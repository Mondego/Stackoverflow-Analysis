<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>17896244</id><snippet>StringVar</snippet></ROW><ROW><id>17896244</id><snippet>str</snippet></ROW><ROW><id>17896244</id><snippet>grid</snippet></ROW><ROW><id>17896244</id><snippet>place</snippet></ROW><ROW><id>17896244</id><snippet>import sys
from tkinter import *

def myhello():
    text = ment.get()
    label['text'] = text

root = Tk()
root.title('Tutorial')
root.geometry('400x400')

button = Button(root, text='Button',command=myhello).place(x='160', y='5')
label = Label(root, text='')
label.place(x=5, y=30)

ment = StringVar()
entry = Entry(textvariable=ment).place(x='5', y= '10 ')

root.mainloop()
</snippet></ROW><ROW><id>17896250</id><snippet>[sentence for sentence in sentences for word in words if banned_word not in sentence]
</snippet></ROW><ROW><id>17896250</id><snippet>sentence</snippet></ROW><ROW><id>17896250</id><snippet>for sentence in sentences:
    for word in words:
        if banned_word not in sentence:
            result.append(sentence)
</snippet></ROW><ROW><id>17896250</id><snippet>any()</snippet></ROW><ROW><id>17896250</id><snippet>[sentence for sentence in sentences if not any(banned_word in sentence for banned_word in words)]
</snippet></ROW><ROW><id>17896250</id><snippet>any()</snippet></ROW><ROW><id>17896250</id><snippet>True</snippet></ROW><ROW><id>17896558</id><snippet>list1 = [i for i in list1 if not(i%3==0)]
</snippet></ROW><ROW><id>17896628</id><snippet>re.split()</snippet></ROW><ROW><id>17896628</id><snippet>re.split('[.!]', text)
</snippet></ROW><ROW><id>17896628</id><snippet>[...]</snippet></ROW><ROW><id>17896628</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = 'Hi, my name is Will, And i am from Canada. I have 2 pets. One is a dog and the other is a Zebra. Ahoi! Thanks.'
&gt;&gt;&gt; re.split('[.!]', text)
['Hi, my name is Will, And i am from Canada', ' I have 2 pets', ' One is a dog and the other is a Zebra', ' Ahoi', ' Thanks', '']
</snippet></ROW><ROW><id>17896628</id><snippet>&gt;&gt;&gt; re.split('([.!])', text)
['Hi, my name is Will, And i am from Canada', '.', ' I have 2 pets', '.', ' One is a dog and the other is a Zebra', '.', ' Ahoi', '!', ' Thanks', '.', '']
</snippet></ROW><ROW><id>17896628</id><snippet>re.findall()</snippet></ROW><ROW><id>17896628</id><snippet>&gt;&gt;&gt; re.findall('[^.!]+?[.!]', text)
['Hi, my name is Will, And i am from Canada.', ' I have 2 pets.', ' One is a dog and the other is a Zebra.', ' Ahoi!', ' Thanks.']
</snippet></ROW><ROW><id>17896803</id><snippet>pi</snippet></ROW><ROW><id>17896803</id><snippet>ment</snippet></ROW><ROW><id>17896803</id><snippet>ment</snippet></ROW><ROW><id>17896803</id><snippet>ment_1</snippet></ROW><ROW><id>17896803</id><snippet>pi_</snippet></ROW><ROW><id>17896803</id><snippet>import sys
from tkinter import *
from math import *

def sqrt_():
    text = ment.get()
    a = sqrt(text)
    label['text'] = a

def pi_():
    label_1['text'] = pi

root = Tk()
root.title('Conversions')
root.geometry('400x400')

#Get square root
sqrt_button = Button(root, text='Get Square root',command= sqrt_).place(x='160', y='5')
label = Label(root, text='')
label.place(x=5, y=30)
ment = IntVar()
entry = Entry(textvariable=ment).place(x='5', y= '10 ')
#Get Pi
pi_button = Button(root, text='Get Pi',command= pi_).place(x='160', y='50')
label_1 = Label(root, text='')
label_1.place(x=55, y=200)
ment_1 = IntVar()
entry_1 = Entry(textvariable=ment_1).place(x='5', y= '55 ')


root.mainloop()
</snippet></ROW><ROW><id>17896868</id><snippet>import shutil

for i in range(100):
    shutil.copy2('/Users/bubble/Desktop/script.py', '/Users/bubble/Desktop/pics/script{}.py'.format(i))
</snippet></ROW><ROW><id>17897018</id><snippet>   class mynumber(float):
        def __len__(self):
            return len(self.__str__())
        pass    


    a=mynumber(13.7)
    b=mynumber(13.7000001)

    print len(a)
    print len(b)
</snippet></ROW><ROW><id>17897018</id><snippet>from math import radians, cos, sin, asin, sqrt

class mypointpair(object):
    def __init__(self):
        self.coord=[]
        pass
    def add_coords(self,a,b):
        self.coord.append((a,b)) 
    def __len__(self):
        return self.haversine(self.coord[0][0], self.coord[0][1], self.coord[1][0], self.coord[1][1])


    def haversine(self,lon1, lat1, lon2, lat2):
        """
        Calculate the great circle distance between two points 
        on the earth (specified in decimal degrees)
        """
        # convert decimal degrees to radians 
        lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
        # haversine formula 
        dlon = lon2 - lon1 
        dlat = lat2 - lat1 
        a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
        c = 2 * asin(sqrt(a)) 
        km = 6367 * c
        return km 


pp1=mypointpair()
pp1.add_coords(53.32055555555556 , -1.7297222222222221 )
pp1.add_coords(53.31861111111111, -1.6997222222222223 )

print len(pp1)
</snippet></ROW><ROW><id>17897159</id><snippet>city_playlists = {'los angeles':['playlist1', 'playlist2'],
                  'houston':['playlist']}
city_names = {1:'los angeles',
              2:'houston'}
</snippet></ROW><ROW><id>17897159</id><snippet>city_playlists['los angeles'].append('playlist3')
</snippet></ROW><ROW><id>17897159</id><snippet>wildcard = random.randint(1, len(city_names))
name = city_names[wildcard]
city_playlists[name].append('newplaylist')
</snippet></ROW><ROW><id>17897159</id><snippet>random.choice</snippet></ROW><ROW><id>17897611</id><snippet>return</snippet></ROW><ROW><id>17897611</id><snippet>print</snippet></ROW><ROW><id>17897611</id><snippet>def union(a,b):
    a.append(b)
    result = []
    for item in a:
        result.append(a)
    return result
</snippet></ROW><ROW><id>17897611</id><snippet>def union(a, b):
    return a + b
</snippet></ROW><ROW><id>17897751</id><snippet>clientlist</snippet></ROW><ROW><id>17897751</id><snippet>client.models.sidebar</snippet></ROW><ROW><id>17897751</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>17897751</id><snippet>context_instance</snippet></ROW><ROW><id>17897751</id><snippet>render</snippet></ROW><ROW><id>17897751</id><snippet>render</snippet></ROW><ROW><id>17897751</id><snippet>def index(request):
    allclientlist = Client.objects.all()
    return render(request, 'clients/index.html', {'allclientlist': allclientlist})
</snippet></ROW><ROW><id>17897751</id><snippet>client.context_processors</snippet></ROW><ROW><id>17897751</id><snippet>Client</snippet></ROW><ROW><id>17897922</id><snippet>input_file = open('mynewfile.txt', 'r')
with input_file as myFile:
    foundA = False
    for num, line in enumerate(myFile):
        if strA in line:
            foundA = True
            print num

        # Only look for `strB` if `strA` has been seen first
        if foundA and strB in line:
            print num
            break  # stop reading the file.
</snippet></ROW><ROW><id>17897922</id><snippet>strB</snippet></ROW><ROW><id>17897922</id><snippet>strA</snippet></ROW><ROW><id>17897922</id><snippet>input_file = open('mynewfile.txt', 'r')
with input_file as myFile:
    enumerated = enumerate(myFile):
    for num, line in enumerated:
        if strA in line:
            print num
            for num, line in enumerated:
                if strB in line:
                    print num
                    break  # search for next strA
</snippet></ROW><ROW><id>17898062</id><snippet>a</snippet></ROW><ROW><id>17898062</id><snippet>b</snippet></ROW><ROW><id>17898062</id><snippet>set</snippet></ROW><ROW><id>17898062</id><snippet>c = list(set(b) - set(a))
# c is now a list of everything in b that is not in a
</snippet></ROW><ROW><id>17898062</id><snippet>a, b = range(7), range(5, 11)
</snippet></ROW><ROW><id>17898062</id><snippet>a = [1, 2, 1, 1, 3, 4, 2]
b = [1, 3, 4]

# After the set operations c would be [2]
# rather than the possibly desired [2, 2]
</snippet></ROW><ROW><id>17898062</id><snippet>set_b = set(b)
c = [x for x in a if x not in b]
</snippet></ROW><ROW><id>17898062</id><snippet>set</snippet></ROW><ROW><id>17898062</id><snippet>b</snippet></ROW><ROW><id>17898062</id><snippet>O(1)</snippet></ROW><ROW><id>17898062</id><snippet>O(N)</snippet></ROW><ROW><id>17898192</id><snippet>player_details</snippet></ROW><ROW><id>17898192</id><snippet>player_details[0]['team_id']
</snippet></ROW><ROW><id>17898789</id><snippet>x=[0,1,2,3,4,5]</snippet></ROW><ROW><id>17898789</id><snippet>j=4</snippet></ROW><ROW><id>17898789</id><snippet>for n2 in range(0, len(x) * j - 2):
            n = n2 / j
            r = n2 - n * j
            if  r == 0:
                rtn.append(j * x[n])
            else: 
                rtn.append(j * x[n] + r * (x[n + 1] - x[n]))
</snippet></ROW><ROW><id>17898789</id><snippet>range(0, len(x) * j - 2)</snippet></ROW><ROW><id>17898789</id><snippet>range(0, 22)</snippet></ROW><ROW><id>17898789</id><snippet>n2</snippet></ROW><ROW><id>17898789</id><snippet>n = 5, j = 1</snippet></ROW><ROW><id>17898789</id><snippet>x[6]</snippet></ROW><ROW><id>17899042</id><snippet>x</snippet></ROW><ROW><id>17899042</id><snippet>x</snippet></ROW><ROW><id>17899042</id><snippet>3</snippet></ROW><ROW><id>17899042</id><snippet>3</snippet></ROW><ROW><id>17899042</id><snippet>A().x</snippet></ROW><ROW><id>17899042</id><snippet>A.x</snippet></ROW><ROW><id>17899473</id><snippet>from</snippet></ROW><ROW><id>17899473</id><snippet>&gt;&gt;&gt; import email
&gt;&gt;&gt; message = email.message_from_string(email_text)
&gt;&gt;&gt; message['From']
'Taylor Lovett &lt;tlovett88@gmail.com&gt;'
&gt;&gt;&gt; from = message['From']
  File "&lt;stdin&gt;", line 1
    from = message['From']
         ^
SyntaxError: invalid syntax
&gt;&gt;&gt; from_address = message['From']
&gt;&gt;&gt; from_address
'Taylor Lovett &lt;tlovett88@gmail.com&gt;'
</snippet></ROW><ROW><id>17899575</id><snippet>&gt;&gt;&gt; a = [[0.,0.,0.1,0.2], [0.,0.3,0.4,0.3], [0.,0.,0.1,0.]]
&gt;&gt;&gt; [i for i, xs in enumerate(a) if sum(xs) == 1]
[1]
</snippet></ROW><ROW><id>17899768</id><snippet>sudo apt-get install python3</snippet></ROW><ROW><id>17899768</id><snippet>Python 3.3.1 (default, Apr 17 2013, 22:30:32) 
[GCC 4.7.3] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import zlib
&gt;&gt;&gt; exit()
</snippet></ROW><ROW><id>17899822</id><snippet>if instruction == "do work":
    threading.Thread(target=work).start()
recieve()
</snippet></ROW><ROW><id>17899822</id><snippet>()</snippet></ROW><ROW><id>17899822</id><snippet>threading.Thread(target=work()).start()</snippet></ROW><ROW><id>17899822</id><snippet>work()</snippet></ROW><ROW><id>17899822</id><snippet>work</snippet></ROW><ROW><id>17899909</id><snippet>def login_required(f):
def authenticate(self,*args,**kwargs):

    if conf.get('noauth'):
        return f(self,*args,**kwargs)

    if self.headers.getheader('Authorization') :
        cred = base64.b64decode(self.headers.getheader('Authorization').split(' ')[1])


        users = conf.get('users', [])
        if cred in users:
            self.creds = cred
            return f(self,*args,**kwargs)
#else
    self.send_response(401)
    self.send_header('WWW-Authenticate', 'Basic realm=\"Meter\"')
    self.send_header('Content-type', 'text/html')
    self.end_headers()
    self.wfile.write('Not authenticated.')
    return False
return authenticate
</snippet></ROW><ROW><id>17900113</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; st='Paragraph 4-2 says. i am going home$ early- Yes.'
&gt;&gt;&gt; [m.group(1) for m in re.finditer(r'(.*?[.$\-])(?:\s+|$)',st)]
['Paragraph 4-2 says.', 'i am going home$', 'early-', 'Yes.']
</snippet></ROW><ROW><id>17900113</id><snippet>&gt;&gt;&gt; re.findall(r'(.*?[.$\-])(?:\s+|$)',st)
['Paragraph 4-2 says.', 'i am going home$', 'early-', 'Yes.']
</snippet></ROW><ROW><id>17900113</id><snippet>(.*?[.$\-])  is the capture group containing:
 .*?          Any character (except newline) 0 to infinite times [lazy] 
    [.$\-]   Character class matching .$- one time

(?:\s+|$)    Non-capturing Group containing:
   \s+        First alternate: Whitespace [\t \r\n\f] 1 to infinite times [greedy] 
      |        or
       $      Second alternate: end of string
</snippet></ROW><ROW><id>17900113</id><snippet>(.*?[.$\-])(?:[ ]+|$)</snippet></ROW><ROW><id>17900113</id><snippet>\r\n\f</snippet></ROW><ROW><id>17900113</id><snippet>\s</snippet></ROW><ROW><id>17900188</id><snippet>artist</snippet></ROW><ROW><id>17900188</id><snippet>list</snippet></ROW><ROW><id>17900188</id><snippet>artists = [artist.replace(': ', '') for artist in artists]
</snippet></ROW><ROW><id>17900390</id><snippet>module.obj</snippet></ROW><ROW><id>17900390</id><snippet>main</snippet></ROW><ROW><id>17900390</id><snippet>application</snippet></ROW><ROW><id>17900390</id><snippet>- url: /.*
script: main.application
</snippet></ROW><ROW><id>17900401</id><snippet>self.setStyleSheet("""QToolTip { 
                           background-color: black; 
                           color: white; 
                           border: black solid 1px
                           }""")
</snippet></ROW><ROW><id>17900725</id><snippet>xpath = 'html/body/div[6]/div[1]/div/div[3]/div/div[2]/table/tbody/tr/td[1]/a[3]/span'
driver.find_element_by_xpath(xpath).click()
</snippet></ROW><ROW><id>17900974</id><snippet>set path=%path%;c:\python27
</snippet></ROW><ROW><id>17900974</id><snippet>PATH</snippet></ROW><ROW><id>17900974</id><snippet>PATH</snippet></ROW><ROW><id>17900974</id><snippet>C:\python27</snippet></ROW><ROW><id>17900974</id><snippet>;C:\Python27</snippet></ROW><ROW><id>17900995</id><snippet>after</snippet></ROW><ROW><id>17900995</id><snippet>self.root.after(1000, lambda: self.canvas.itemconfig(self.land[(0, 0)], text=str(self.ctr)))
</snippet></ROW><ROW><id>17901023</id><snippet>import urwid.raw_display

class FormDisplay(object):

    def __init__(self):
        self.ui = urwid.raw_display.Screen()
        self.palette = ui.register_palette([
        ('Field', 'dark green, bold', 'black'), # information fields, Search: etc.
        ('Info', 'dark green', 'black'), # information in fields
        ('Bg', 'black', 'black'), # screen background
        ('InfoFooterText', 'white', 'dark blue'), # footer text
        ('InfoFooterHotkey', 'dark cyan, bold', 'dark blue'), # hotkeys in footer text
        ('InfoFooter', 'black', 'dark blue'),  # footer background
        ('InfoHeaderText', 'white, bold', 'dark blue'), # header text
        ('InfoHeader', 'black', 'dark blue'), # header background
        ('BigText', RandomColor(), 'black'), # main menu banner text
        ('GeneralInfo', 'brown', 'black'), # main menu text
        ('LastModifiedField', 'dark cyan, bold', 'black'), # Last modified:
        ('LastModifiedDate', 'dark cyan', 'black'), # info in Last modified:
        ('PopupMessageText', 'black', 'dark cyan'), # popup message text
        ('PopupMessageBg', 'black', 'dark cyan'), # popup message background
        ('SearchBoxHeaderText', 'light gray, bold', 'dark cyan'), # field names in the search box
        ('SearchBoxHeaderBg', 'black', 'dark cyan'), # field name background in the search box
        ('OnFocusBg', 'white', 'dark magenta') # background when a widget is focused
       ])

    def main(self):
        #self.view = ui.run_wrapper(formLayout)
        self.view = formLayout()
        self.ui.start()
        self.loop = urwid.MainLoop(self.view, self.palette,   unhandled_input=self.unhandled_input)
        self.loop.run()

if __name__ = "__main__":
    form = FormDisplay()
    form.main()
</snippet></ROW><ROW><id>17901064</id><snippet>for eachBrowser in browser_list:
result[eachBrowser]= urllib2.urlopen(urljoin(user_string_url,eachBrowser))
</snippet></ROW><ROW><id>17901107</id><snippet>compile</snippet></ROW><ROW><id>17901107</id><snippet>exec</snippet></ROW><ROW><id>17901107</id><snippet>eval</snippet></ROW><ROW><id>17901107</id><snippet>compile(string, '', 'eval')</snippet></ROW><ROW><id>17901107</id><snippet>eval(string)</snippet></ROW><ROW><id>17901107</id><snippet>compile(string, '', 'exec')</snippet></ROW><ROW><id>17901107</id><snippet>exec(string)</snippet></ROW><ROW><id>17901107</id><snippet>compile(string, '', 'single')</snippet></ROW><ROW><id>17901107</id><snippet>exec</snippet></ROW><ROW><id>17901107</id><snippet>if</snippet></ROW><ROW><id>17901107</id><snippet>else</snippet></ROW><ROW><id>17901107</id><snippet>compile</snippet></ROW><ROW><id>17901107</id><snippet>execfile</snippet></ROW><ROW><id>17901107</id><snippet>.pyc</snippet></ROW><ROW><id>17901107</id><snippet>foo.py</snippet></ROW><ROW><id>17901164</id><snippet>contraction()</snippet></ROW><ROW><id>17901164</id><snippet>array</snippet></ROW><ROW><id>17901164</id><snippet>array</snippet></ROW><ROW><id>17901164</id><snippet>array = [1, 2, 3]
f(array)
</snippet></ROW><ROW><id>17901164</id><snippet>array</snippet></ROW><ROW><id>17901164</id><snippet>f</snippet></ROW><ROW><id>17901164</id><snippet>f</snippet></ROW><ROW><id>17901164</id><snippet>f</snippet></ROW><ROW><id>17901252</id><snippet>2</snippet></ROW><ROW><id>17901252</id><snippet>0.0</snippet></ROW><ROW><id>17901252</id><snippet>3</snippet></ROW><ROW><id>17901252</id><snippet>0.1</snippet></ROW><ROW><id>17901252</id><snippet>1</snippet></ROW><ROW><id>17901252</id><snippet>1.41</snippet></ROW><ROW><id>17901252</id><snippet>0</snippet></ROW><ROW><id>17901252</id><snippet>1.48</snippet></ROW><ROW><id>17901337</id><snippet>guessesTaken</snippet></ROW><ROW><id>17901337</id><snippet>guesstaken</snippet></ROW><ROW><id>17901337</id><snippet>guessestaken</snippet></ROW><ROW><id>17901337</id><snippet>break</snippet></ROW><ROW><id>17901337</id><snippet>while...else</snippet></ROW><ROW><id>17901337</id><snippet>#! /usr/bin/python3

import random

number = random.randint(1, 10)
print ('Welcome to my game.')

myName = input ('What is your name? ')
print ('Well, {}, I\'m thinking of a number between 1 and 10'.format (myName) )

guessesTaken = 0
while guessesTaken &lt; 6:
    guess = int (input ('Take a guess: ') )
    guessesTaken += 1

    if guess &lt; number: print  ('Your guess is low.')
    if guess &gt; number: print  ('Your guess is high.')
    if guess == number:
        print ('You guessed the number in {} tr{}.'.format (guessesTaken, 'y' if guessesTaken == 1 else 'ies') )
        break
else: print ('You lost.')
</snippet></ROW><ROW><id>17901440</id><snippet>http://bookre.org/loader/img.php?dir=39d761947ad84e71e51e3c300f7af8ff&amp;file=1.png?file=1077091&amp;pg=1</snippet></ROW><ROW><id>17901440</id><snippet>http://bookre.org/loader/img.php?dir=39d761947ad84e71e51e3c300f7af8ff&amp;file=1.png</snippet></ROW><ROW><id>17901440</id><snippet>import urllib
import urllib2
import urlparse
from bs4 import BeautifulSoup

def main(url):
    html = urllib2.urlopen(url)
    soup = BeautifulSoup(html.read())

    parsed = list(urlparse.urlparse(url))

    for image in soup.find_all(id="page_image"):
        if image["src"].lower().startswith("http"):
            urllib.urlretrieve(image["src"], "image.png")
        else:
            new = (parsed[0], parsed[1], image["src"], "", "", "")
            urllib.urlretrieve(urlparse.urlunparse(new), "image.png")


if __name__ == '__main__':
    main("http://bookre.org/reader?file=1077091&amp;pg=1")
</snippet></ROW><ROW><id>17901440</id><snippet>"image.png"</snippet></ROW><ROW><id>17901508</id><snippet>MySQLdb.connect(host="localhost", user="root",passwd="*****", use_unicode=True, charset='xxxxx')
</snippet></ROW><ROW><id>17901516</id><snippet>TEMPLATE_CONTEXT_PROCESSSORS</snippet></ROW><ROW><id>17901516</id><snippet>custom_app</snippet></ROW><ROW><id>17901516</id><snippet>custom_app</snippet></ROW><ROW><id>17901516</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>17901516</id><snippet>settings.py</snippet></ROW><ROW><id>17901516</id><snippet>context_processors.py</snippet></ROW><ROW><id>17901516</id><snippet>custom_app</snippet></ROW><ROW><id>17901516</id><snippet>def categories_processor(request):
 categories = Category.objects.all()            
 return {'categories': categories}
</snippet></ROW><ROW><id>17901516</id><snippet>context_processors.py</snippet></ROW><ROW><id>17901516</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>17901516</id><snippet>settings.py</snippet></ROW><ROW><id>17901516</id><snippet>TEMPLATE_CONTEXT_PROCESSORS += ("custom_app.context_processors.categories_processor", )
</snippet></ROW><ROW><id>17901516</id><snippet>{{categories}}</snippet></ROW><ROW><id>17901866</id><snippet>map</snippet></ROW><ROW><id>17901866</id><snippet>reduce</snippet></ROW><ROW><id>17901941</id><snippet>global ui</snippet></ROW><ROW><id>17901941</id><snippet>main</snippet></ROW><ROW><id>17901941</id><snippet>main</snippet></ROW><ROW><id>17901941</id><snippet>ui</snippet></ROW><ROW><id>17901941</id><snippet>__init__</snippet></ROW><ROW><id>17901941</id><snippet>global</snippet></ROW><ROW><id>17901941</id><snippet>global</snippet></ROW><ROW><id>17902299</id><snippet>&gt;&gt;&gt; with open('fileName', 'w') as outFile:
        for line in lines:
            for elem in line:
                outFile.write(elem.strip()+'\t')
            outFile.write('\n')
</snippet></ROW><ROW><id>17902299</id><snippet>Column1 Column2 Column3 Column4 
Value1  Value2  Value3  Value4  
Value5  Value6  Value7  Value8
</snippet></ROW><ROW><id>17902299</id><snippet>&gt;&gt;&gt; lines = [['Column1', 'Column2', 'Column3', 'Column4'], ['Value1', 'Value2', 'Value3', 'Value4'], ['Value5', 'Value6', 'Value7', 'Value8']]
</snippet></ROW><ROW><id>17902299</id><snippet>&gt;&gt;&gt; with open('fileName', 'w') as outFile:
        for line in lines:
                outFile.write("\t".join([elem.strip() for elem in line]))
            outFile.write('\n')
</snippet></ROW><ROW><id>17902332</id><snippet>With the exception of CONTENT_LENGTH and CONTENT_TYPE, as given above, any HTTP headers in the request are converted to META keys by converting all characters to uppercase, replacing any hyphens with underscores and adding an HTTP_ prefix to the name. So, for example, a header called X-Bender would be mapped to the META key HTTP_X_BENDER.</snippet></ROW><ROW><id>17902332</id><snippet>{"TOKEN": "abc"}</snippet></ROW><ROW><id>17902380</id><snippet>-4,-3,-2,-1,0,1,2,3,4,...,65535 etc...   
</snippet></ROW><ROW><id>17902380</id><snippet>10.5, 4.9999999
</snippet></ROW><ROW><id>17902380</id><snippet>float()</snippet></ROW><ROW><id>17902380</id><snippet>float('10.5')
</snippet></ROW><ROW><id>17902449</id><snippet>gradient</snippet></ROW><ROW><id>17902449</id><snippet>(x,y)</snippet></ROW><ROW><id>17902449</id><snippet>def f(x,y):
    return np.sin((x + y))
x = y = np.arange(-5, 5, 0.05)
X, Y = np.meshgrid(x, y)
zs = np.array([f(x,y) for x,y in zip(np.ravel(X), np.ravel(Y))])
Z = zs.reshape(X.shape)

gx,gy = np.gradient(Z,0.05,0.05)
</snippet></ROW><ROW><id>17902449</id><snippet>gx</snippet></ROW><ROW><id>17902449</id><snippet>dz/dx</snippet></ROW><ROW><id>17902449</id><snippet>dz/dx</snippet></ROW><ROW><id>17902449</id><snippet>(x0,y0</snippet></ROW><ROW><id>17902449</id><snippet>gx</snippet></ROW><ROW><id>17902449</id><snippet>f(x,y) = sin(x+y)</snippet></ROW><ROW><id>17902449</id><snippet>f(x,y) = sin(x)</snippet></ROW><ROW><id>17902449</id><snippet>def f(x,y):
    return np.sin(x)
x = y = np.arange(-3,3,.05)
X, Y = np.meshgrid(x, y)
zs = np.array([f(x,y) for x,y in zip(np.ravel(X), np.ravel(Y))])
xy_pairs = np.array([str(x)+','+str(y) for x,y in zip(np.ravel(X), np.ravel(Y))])
Z = zs.reshape(X.shape)
xy_pairs = xy_pairs.reshape(X.shape)

gy,gx = np.gradient(Z,.05,.05)
</snippet></ROW><ROW><id>17902449</id><snippet>Z[20][30]</snippet></ROW><ROW><id>17902449</id><snippet>&gt;&gt;&gt; Z[20][30]
-0.99749498660405478
</snippet></ROW><ROW><id>17902449</id><snippet>&gt;&gt;&gt; xy_pairs[20][30]
'-1.5,-2.0'
</snippet></ROW><ROW><id>17902449</id><snippet>&gt;&gt;&gt; np.sin(-1.5)
-0.99749498660405445
</snippet></ROW><ROW><id>17902449</id><snippet>&gt;&gt;&gt; gy[20][30]
0.0
&gt;&gt;&gt; gx[20][30]
0.070707731517679617
</snippet></ROW><ROW><id>17902449</id><snippet>dz/dy always 0</snippet></ROW><ROW><id>17902449</id><snippet>dz/dx = cos(x)</snippet></ROW><ROW><id>17902449</id><snippet>&gt;&gt;&gt; np.cos(-1.5)
0.070737201667702906
</snippet></ROW><ROW><id>17902449</id><snippet>0.05</snippet></ROW><ROW><id>17902449</id><snippet>gradient</snippet></ROW><ROW><id>17902474</id><snippet>Electronics | Computers    | Laptops
Electronics | Computers    | Desktop
Electronics | Game Systems | Xbox
Electronics | Game Systems | PS3
Electronics | Game Systems | Wii
Electronics | MP3 Players  | iPod Shuffle
Clothing    | Menswear     | Pants         | Shorts
Clothing    | Menswear     | Pants         | Pajamas
</snippet></ROW><ROW><id>17902498</id><snippet>s == "no"</snippet></ROW><ROW><id>17902498</id><snippet>elif:</snippet></ROW><ROW><id>17902498</id><snippet>def shut_down(s):
    if s == "Yes" or s == "yes" or s == "YES":
        return "Shutting down..."
    elif s == "No" or "no" or "NO":             # you forgot the s== in this line
        return "Shutdown aborted!" 
    else:
        return "Sorry, I didn't understand you."
</snippet></ROW><ROW><id>17902498</id><snippet>def shut_down(s):
    if s == "Yes" or s == "yes" or s == "YES":
        return "Shutting down..."
    elif s == "No" or s == "no" or s == "NO":       # fixed it 
        return "Shutdown aborted!"
    else:
        return "Sorry, I didn't understand you."
</snippet></ROW><ROW><id>17902498</id><snippet>elif s == "No" or "no" or "NO":  #&lt;---this
elif s == "No" or True or True:  #&lt;---is the same as this
</snippet></ROW><ROW><id>17902498</id><snippet>.lower()</snippet></ROW><ROW><id>17902498</id><snippet>elif s.lower() == "no":
</snippet></ROW><ROW><id>17902535</id><snippet>def getLocalizedMonth(j):
  locale.set_locale(locale.LC_ALL, "")
  datetime.datetime.strptime(j, "%m").strftime("%B")
  locale.setlocale(locale.getdefaultlocale())
</snippet></ROW><ROW><id>17902670</id><snippet>Frame</snippet></ROW><ROW><id>17902670</id><snippet>import tkinter as tki

class App(object):

    def __init__(self):
        self.root = tki.Tk()
        self.root.wm_title("Play With python")
        for r in range(8):
            self.root.rowconfigure(r, weight=1)
        for c in range(2):
            self.root.columnconfigure(c, weight=1)

        # Create a list of the Frames in the order they were created
        frames = []
        j = 0
        for i in range(1,5):
            Frame = tki.Frame(self.root, borderwidth=1, bg = 'blue')
            Frame.grid(row = j, column = 0, rowspan = 2, columnspan = 2, sticky = 'w, e, n, s')

            # Add the Frame to the list
            frames.append(Frame)

            # Also, just as an FYI, j = j + 2 can be better written like this
            j += 2

        # To demonstrate
        print(frames)

        # This is the first Frame created
        print(frames[0])

app = App()
app.root.mainloop()
</snippet></ROW><ROW><id>17903178</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'some data \n 8 \n more data'
&gt;&gt;&gt; if re.search("\s+[0-9]+\s+", s): print True
...
True
&gt;&gt;&gt; s = 'some data \n 8) \n more data'
&gt;&gt;&gt; if re.search("\s+[0-9]+\s+", s): print True
...
&gt;&gt;&gt; s = 'some data \n 8343 \n more data'
&gt;&gt;&gt; if re.search("\s+[0-9]+\s+", s): print True
...
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17903178</id><snippet>re.search("\s+[0-9]\s+", s)
</snippet></ROW><ROW><id>17903182</id><snippet>raw_input</snippet></ROW><ROW><id>17903182</id><snippet>"1" &gt; 4</snippet></ROW><ROW><id>17903182</id><snippet>int</snippet></ROW><ROW><id>17903182</id><snippet>while True:
    try:
        ChoosePlayer = int(raw_input(...))
        break
    except ValueError:
        print ("Numbers only please!")
</snippet></ROW><ROW><id>17903182</id><snippet>.format()</snippet></ROW><ROW><id>17903182</id><snippet> print "player 0 has chosen player {}!".format(ChoosePlayer)
</snippet></ROW><ROW><id>17903255</id><snippet>import matplotlib.pyplot as plt
import matplotlib.font_manager
from numpy import *

# cmunso.otf is a randomly selected font in my tex installation
path = '/usr/local/texlive/2012/texmf-dist/fonts/opentype/public/cm-unicode/cmunso.otf'
f0 = matplotlib.font_manager.FontProperties()    
f0.set_file(path)

plt.figure()
plt.xlim(0,1.)
plt.ylim(0,1.)

d = arange(0, 1, .1)
plt.plot(d, d, "ob", label='example')

plt.text(.5, .1, 'text.. abcdef', fontproperties=f0, size=30)
plt.xlabel("x label", fontproperties=f0)
plt.legend(prop=f0, loc=2)
</snippet></ROW><ROW><id>17903255</id><snippet>xlabel</snippet></ROW><ROW><id>17903255</id><snippet>text</snippet></ROW><ROW><id>17903255</id><snippet>fontproperties</snippet></ROW><ROW><id>17903255</id><snippet>legend</snippet></ROW><ROW><id>17903255</id><snippet>prop</snippet></ROW><ROW><id>17903318</id><snippet>scipy.stats.kstest</snippet></ROW><ROW><id>17903318</id><snippet>&gt;&gt;&gt; data = scipy.stats.norm.rvs(loc=5, scale=10, size=(1000,))
</snippet></ROW><ROW><id>17903318</id><snippet>kstest</snippet></ROW><ROW><id>17903318</id><snippet>f(x)</snippet></ROW><ROW><id>17903318</id><snippet>cdf</snippet></ROW><ROW><id>17903318</id><snippet>scipy.stats.norm</snippet></ROW><ROW><id>17903318</id><snippet>&gt;&gt;&gt; scipy.stats.kstest(data, lambda x: scipy.stats.norm.cdf(x, loc=5, scale=10))
(0.019340993719575206, 0.84853828416694665)
</snippet></ROW><ROW><id>17903318</id><snippet>&gt;&gt;&gt; scipy.stats.kstest(data, 'norm', args=(5, 10))
(0.019340993719575206, 0.84853828416694665)
</snippet></ROW><ROW><id>17903318</id><snippet>&gt;&gt;&gt; data = np.random.rand(1000)
&gt;&gt;&gt; scipy.stats.kstest(data, lambda x: x)
(0.019145675289412523, 0.85699937276355065)
</snippet></ROW><ROW><id>17903350</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>17903350</id><snippet>libx.something.mimetypes</snippet></ROW><ROW><id>17903350</id><snippet>from . import mimetypes</snippet></ROW><ROW><id>17903350</id><snippet>libx.something.mimetypes</snippet></ROW><ROW><id>17903352</id><snippet>set</snippet></ROW><ROW><id>17903352</id><snippet>(user, non-unique filter)</snippet></ROW><ROW><id>17903469</id><snippet>[set()]*3</snippet></ROW><ROW><id>17903469</id><snippet>&gt;&gt;&gt; numberOfSets = 3   
&gt;&gt;&gt; test = [set() for _ in xrange(numberOfSets)]
&gt;&gt;&gt; test[0].add("testing")
&gt;&gt;&gt; print test
[set(['testing']), set([]), set([])]
</snippet></ROW><ROW><id>17903679</id><snippet>isinstance()</snippet></ROW><ROW><id>17903679</id><snippet>&gt;&gt;&gt; def fun(a, b):
...     if not (isinstance(a, set) and isinstance(b, set)):
...         raise TypeError("Please only call this function with sets as the arguments")
...     a.pop()
...     a.pop()
...     b.add(a.pop())
...     return b
</snippet></ROW><ROW><id>17903726</id><snippet>&gt;&gt;&gt; import difflib
&gt;&gt;&gt; a = ["spam", "eggs", "spammy", "eggy"]
&gt;&gt;&gt; b = 'spam'
&gt;&gt;&gt; sorted(a, key=lambda x: difflib.SequenceMatcher(None, x, b).ratio())
['eggy', 'eggs', 'spammy', 'spam']
</snippet></ROW><ROW><id>17903726</id><snippet>&gt;&gt;&gt; sorted(a, key=lambda x: difflib.SequenceMatcher(None, x, b).ratio(), reverse=True)
['spam', 'spammy', 'eggs', 'eggy']
</snippet></ROW><ROW><id>17903731</id><snippet>import multiprocessing</snippet></ROW><ROW><id>17903731</id><snippet>multiprocessing.Queue()
</snippet></ROW><ROW><id>17903731</id><snippet>Process()</snippet></ROW><ROW><id>17903731</id><snippet>multiprocessing.</snippet></ROW><ROW><id>17903731</id><snippet>from multiprocessing import Queue, Process
</snippet></ROW><ROW><id>17903731</id><snippet>multiprocessing.Queue()</snippet></ROW><ROW><id>17903731</id><snippet>Queue()</snippet></ROW><ROW><id>17903777</id><snippet>In [89]: data.shape
Out[89]: (300, 2)    # data has 300 rows and 2 columns
In [93]: idx.shape
Out[93]: (300,)      # idx is a 1D-array with 300 elements
</snippet></ROW><ROW><id>17903777</id><snippet>idx == 0</snippet></ROW><ROW><id>17903777</id><snippet>idx</snippet></ROW><ROW><id>17903777</id><snippet>True</snippet></ROW><ROW><id>17903777</id><snippet>idx</snippet></ROW><ROW><id>17903777</id><snippet>0</snippet></ROW><ROW><id>17903777</id><snippet>In [97]: (idx==0).shape
Out[97]: (300,)
</snippet></ROW><ROW><id>17903777</id><snippet>data</snippet></ROW><ROW><id>17903777</id><snippet>idx==0</snippet></ROW><ROW><id>17903777</id><snippet>data</snippet></ROW><ROW><id>17903777</id><snippet>idx==0</snippet></ROW><ROW><id>17903777</id><snippet>In [98]: data[idx==0].shape
Out[98]: (178, 2)
</snippet></ROW><ROW><id>17903777</id><snippet>data[idx==0, 0]</snippet></ROW><ROW><id>17903777</id><snippet>data</snippet></ROW><ROW><id>17903777</id><snippet>idx==0</snippet></ROW><ROW><id>17903777</id><snippet>data</snippet></ROW><ROW><id>17903777</id><snippet>0</snippet></ROW><ROW><id>17903777</id><snippet>In [99]: data[idx==0, 0].shape
Out[99]: (178,)
</snippet></ROW><ROW><id>17903777</id><snippet>data</snippet></ROW><ROW><id>17903777</id><snippet>data[idx==0]</snippet></ROW><ROW><id>17903777</id><snippet>data</snippet></ROW><ROW><id>17903777</id><snippet>x</snippet></ROW><ROW><id>17903777</id><snippet>x</snippet></ROW><ROW><id>17903777</id><snippet>data</snippet></ROW><ROW><id>17903777</id><snippet>idx==0</snippet></ROW><ROW><id>17903861</id><snippet>assert &lt;Some boolean expression&gt;, "Message if exp is False"
</snippet></ROW><ROW><id>17903861</id><snippet>try:
    assert self._started, "The screen is not up and running !"
except AssertionError as e:
    print "Oops, something happened: " + str(e)
</snippet></ROW><ROW><id>17903976</id><snippet>sum(c.itervalues())</snippet></ROW><ROW><id>17904154</id><snippet>chunksize</snippet></ROW><ROW><id>17904154</id><snippet>chunksize</snippet></ROW><ROW><id>17904154</id><snippet>chunksize, extra = divmod(len(iterable), len(self._pool) * 4)
if extra:
  chunksize += 1
</snippet></ROW><ROW><id>17904154</id><snippet>chunksize</snippet></ROW><ROW><id>17904154</id><snippet>proc_pool.map(SomeFunc, range(num_calls), chunksize=2)</snippet></ROW><ROW><id>17904154</id><snippet>0    2    6    4     1     7     5     3     8    10    12    14     9    13    15    11    16    18    17    19</snippet></ROW><ROW><id>17904154</id><snippet>chunksize=1</snippet></ROW><ROW><id>17904154</id><snippet>proc_pool.map(SomeFunc, range(num_calls), chunksize=1)</snippet></ROW><ROW><id>17904154</id><snippet>0    1    2    3     4     5     6     7     9    10     8    11    13    12    15    14    16    17    19    18</snippet></ROW><ROW><id>17904194</id><snippet>&gt;&gt;&gt; WORDS = ("python", "jumble", "easy", "difficulty", "answer", "xylophone")
</snippet></ROW><ROW><id>17904194</id><snippet>index</snippet></ROW><ROW><id>17904194</id><snippet>&gt;&gt;&gt; WORDS.index('easy')
2
</snippet></ROW><ROW><id>17904194</id><snippet>&gt;&gt;&gt; word = random.choice(WORDS)
&gt;&gt;&gt; word
'answer'
&gt;&gt;&gt; WORDS[WORDS.index(word)]
'answer'
</snippet></ROW><ROW><id>17904501</id><snippet>import subprocess as sub

p = sub.Popen(('sudo', 'tcpdump', '-l'), stdout=sub.PIPE)
try:
    for row in p.stdout:
        print row.rstrip()   # process here
except KeyboardInterrupt:
    p.terminate()            # zombie protection, if needed
</snippet></ROW><ROW><id>17904793</id><snippet>&gt;&gt;&gt; sample = ['a','b','c','d','e','f']
&gt;&gt;&gt; [sample[i] for i in (0, 3, 5)]
['a', 'd', 'f']
</snippet></ROW><ROW><id>17904793</id><snippet>&gt;&gt;&gt; class MyList(list):
...     def __getitem__(self, *args):
...             return [list.__getitem__(self, i) for i in args[0]]
... 
&gt;&gt;&gt; mine = MyList(['a','b','c','d','e','f'])
&gt;&gt;&gt; print mine[0, 3, 5]
['a', 'd', 'f']
</snippet></ROW><ROW><id>17904814</id><snippet>handlers:
- url: /templates
  static_dir: templates
  expiration: 1d
</snippet></ROW><ROW><id>17904884</id><snippet>format</snippet></ROW><ROW><id>17904884</id><snippet>In [23]: num = 15

In [24]: for x in range(num):
    print("{0:&gt;{1}}".format(x, len(str(num))))
   ....:     
 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
</snippet></ROW><ROW><id>17904892</id><snippet>import time
timeinseconds = 100000
while(1):
    time.sleep(timeinseconds)
    runProgram()
</snippet></ROW><ROW><id>17904892</id><snippet>from subprocess import call
call(['python','runProgram.py'])
</snippet></ROW><ROW><id>17905356</id><snippet>elif clothes_total &gt; 150</snippet></ROW><ROW><id>17905356</id><snippet>elif clothes_total &gt; 200</snippet></ROW><ROW><id>17905356</id><snippet>if condition1:
    do thing1
elif condition2:
    do thing2
elif condition2:
    do thing3
</snippet></ROW><ROW><id>17905356</id><snippet>if condition1:
    do thing1
else:
    if condition2:
        do thing2
    else:
        if condition2:
            do thing3
</snippet></ROW><ROW><id>17905356</id><snippet>if clothes_total &gt; 150</snippet></ROW><ROW><id>17905356</id><snippet>if clothes_total &gt; 200</snippet></ROW><ROW><id>17905356</id><snippet>if clothes_total &lt; 150:
    print "&lt;h4&gt; TOTAL : %s &lt;/h4&gt;" % tot_price
elif 150 &lt; clothes_total &lt; 200: # define a maximum as well
    print "15% Discount: $"
    print clothes_total * 0.85
    print "&lt;h4&gt; FIFTEEN: $ %s &lt;/h4&gt;" % tot_price1
    print "15% Discount + $30 off: $"
    print 0.85 * (clothes_total - 30)
    print "&lt;h4&gt; THIRTY: $ %s &lt;/h4&gt;" % tot_price2
elif clothes_total &gt; 200:
    print "15% Discount + $30 off: $"
    print 0.85 * (clothes_total - 30)
    print "&lt;h4&gt; THIRTY: $ %s &lt;/h4&gt;" % tot_price2
</snippet></ROW><ROW><id>17905356</id><snippet>if clothes_total &lt; 150:
    print "&lt;h4&gt; TOTAL : %s &lt;/h4&gt;" % tot_price
elif 150 &lt; clothes_total:
    print "15% Discount: $"
    print clothes_total * 0.85
    print "&lt;h4&gt; FIFTEEN: $ %s &lt;/h4&gt;" % tot_price1
    if clothes_total &gt; 200:
        print "15% Discount + $30 off: $"
        print 0.85 * (clothes_total - 30)
        print "&lt;h4&gt; THIRTY: $ %s &lt;/h4&gt;" % tot_price2
elif clothes_total &gt; 200:
    print "15% Discount + $30 off: $"
    print 0.85 * (clothes_total - 30)
    print "&lt;h4&gt; THIRTY: $ %s &lt;/h4&gt;" % tot_price2
</snippet></ROW><ROW><id>17905356</id><snippet>else</snippet></ROW><ROW><id>17905356</id><snippet>if</snippet></ROW><ROW><id>17905356</id><snippet>if clothes_total &lt; 150:
    print "&lt;h4&gt; TOTAL : %s &lt;/h4&gt;" % tot_price
if 150 &lt; clothes_total
    print "15% Discount: $"
    print clothes_total * 0.85
    print "&lt;h4&gt; FIFTEEN: $ %s &lt;/h4&gt;" % tot_price1
if clothes_total &gt; 200:
    print "15% Discount + $30 off: $"
    print 0.85 * (clothes_total - 30)
    print "&lt;h4&gt; THIRTY: $ %s &lt;/h4&gt;" % tot_price2
</snippet></ROW><ROW><id>17905356</id><snippet>if</snippet></ROW><ROW><id>17905356</id><snippet>if clothes_total &lt; 150:
    print "&lt;h4&gt; TOTAL : %s &lt;/h4&gt;" % tot_price
elif 150 &lt; clothes_total &lt; 200: # define the bounds of the range of acceptable values
    print "15% Discount: $"
    print clothes_total * 0.85
    print "&lt;h4&gt; FIFTEEN: $ %s &lt;/h4&gt;" % tot_price1
elif clothes_total &gt; 200:
    print "15% Discount + $30 off: $"
    print 0.85 * (clothes_total - 30)
    print "&lt;h4&gt; THIRTY: $ %s &lt;/h4&gt;" % tot_price2
</snippet></ROW><ROW><id>17905541</id><snippet>&gt;&gt;&gt; card_number = '1234567887654321'
&gt;&gt;&gt; card_number[-4:]
'4321'
&gt;&gt;&gt; "xxxx-xxxx-xxxx-%s" % card_number[-4:]
'xxxx-xxxx-xxxx-4321'
</snippet></ROW><ROW><id>17905541</id><snippet>&gt;&gt;&gt; "xxxx-xxxx-xxxx-{}".format(card_number[-4:])
'xxxx-xxxx-xxxx-4321'
</snippet></ROW><ROW><id>17905814</id><snippet>from itertools import combinations
f = open('combinations.txt', 'w')
for comb in combinations(range(1,50), 6):
    f.write(str(comb))
    f.write('\n')
f.close()
</snippet></ROW><ROW><id>17905814</id><snippet>&gt;&gt;&gt; s = 0
&gt;&gt;&gt; for comb in combinations(range(1,50), 6):
...    s += len(repr(comb))+2
... 
&gt;&gt;&gt; s
348168480
</snippet></ROW><ROW><id>17905826</id><snippet>&gt;&gt;&gt; from functools import reduce # python 3+ only
&gt;&gt;&gt; list(reduce(lambda x, y: x + (y,)*N, [42,19,73], ()))
[42, 42, 42, 19, 19, 19, 73, 73, 73]
</snippet></ROW><ROW><id>17905826</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; # @Elazar
&gt;&gt;&gt; timeit.timeit('sum([[x]*3 for x in range(100)], [])', number = 10000)
0.8430862047590608
&gt;&gt;&gt; # @Jonas N
&gt;&gt;&gt; timeit.timeit('[input[i//3] for i in range(len(input) * 3)]', setup = 'input=range(100)', number = 10000)
0.8203685883751604
&gt;&gt;&gt; # @btoueg
&gt;&gt;&gt; timeit.timeit('list(reduce(lambda x, y: x + (y,)*3, range(100), ()))', setup='from functools import reduce', number = 10000)
0.8161356351359359
&gt;&gt;&gt; # @Jonas N tweaked @btoueg
&gt;&gt;&gt; timeit.timeit('[input[i//3] for i in (1,)*(len(input) * 3)]', setup = 'input=range(100)', number = 10000)
0.6767039371268311
&gt;&gt;&gt; # @Satoru.Logic
&gt;&gt;&gt; timeit.timeit('list(it.chain.from_iterable(it.repeat(i, 3) for i in range(100)))', setup='import itertools as it', number = 10000)
0.6128926580669827
&gt;&gt;&gt; # @Elazar
&gt;&gt;&gt; timeit.timeit('list(sum(zip(*([range(100)]*3)),()))', number = 10000)
0.5940954834727563
&gt;&gt;&gt; # @Satoru.Logic
&gt;&gt;&gt; timeit.timeit('[x for x in range(100) for i in range(3)]', number = 10000)
0.5724550042735785
&gt;&gt;&gt; # @Apero
&gt;&gt;&gt; timeit.timeit('repeater(range(100),3)', setup='repeater = lambda x,y: [e for sublist in [ (i,) * y for i in x] for e in sublist]', number = 10000)
0.34685565651767547
&gt;&gt;&gt; # @Satoru.Logic (tweaked by @btoueg)
&gt;&gt;&gt; timeit.timeit('[x for x in range(100) for i in (1,)*3]', number = 10000)
0.20413787497625435
</snippet></ROW><ROW><id>17905826</id><snippet>&gt;&gt;&gt; [x for x in [42,19,73] for i in (1,)*N]
[42, 42, 42, 19, 19, 19, 73, 73, 73]
</snippet></ROW><ROW><id>17905826</id><snippet>range</snippet></ROW><ROW><id>17906082</id><snippet>render</snippet></ROW><ROW><id>17906082</id><snippet>django.shortcuts</snippet></ROW><ROW><id>17906082</id><snippet>from django.shortcuts import render
</snippet></ROW><ROW><id>17906186</id><snippet>man 5 proc</snippet></ROW><ROW><id>17906186</id><snippet>/proc/[pid]</snippet></ROW><ROW><id>17906186</id><snippet>/proc/[pid]</snippet></ROW><ROW><id>17906186</id><snippet>stat</snippet></ROW><ROW><id>17906186</id><snippet>proc.wait()</snippet></ROW><ROW><id>17906186</id><snippet>pid = proc.pid
proc.wait()
with open('/proc/%d/stat' % pid, "r") as f:
</snippet></ROW><ROW><id>17906186</id><snippet>subprocess</snippet></ROW><ROW><id>17906186</id><snippet>os.wait4()</snippet></ROW><ROW><id>17906186</id><snippet>pid, status, resources = os.wait4(proc.pid, 0)
cpu_time = resources.ru_utime + resources.ru_stime
</snippet></ROW><ROW><id>17906186</id><snippet>resources</snippet></ROW><ROW><id>17906186</id><snippet>resource.getrusage()</snippet></ROW><ROW><id>17906186</id><snippet>.ru_utime</snippet></ROW><ROW><id>17906186</id><snippet>.ru_stime</snippet></ROW><ROW><id>17906209</id><snippet>change_form.html</snippet></ROW><ROW><id>17906209</id><snippet>object_id</snippet></ROW><ROW><id>17906209</id><snippet>from django import template

from csv_app.models import csv_profile

register = template.Library()

@register.inclusion_tag('_tag_csv_preview.html')
def csv_preview(pk):
    csv = csv_profile.get(pk=pk)
    return {'preview': csv.csv_sample()}
</snippet></ROW><ROW><id>17906209</id><snippet>_tag_csv_preview.html</snippet></ROW><ROW><id>17906209</id><snippet>{{ prevew }}</snippet></ROW><ROW><id>17906209</id><snippet>change_form.html</snippet></ROW><ROW><id>17906209</id><snippet>{% load csv_app.tags %}
{% if object_id %}
    {% csv_preview object_id %}
{% endif %}
</snippet></ROW><ROW><id>17906209</id><snippet>adminform.form.instance</snippet></ROW><ROW><id>17906209</id><snippet>{% if adminform.form.instance %}
   {{ adminform.form.instance.csv_sample }}
{% endif %}
</snippet></ROW><ROW><id>17906404</id><snippet>next(it)</snippet></ROW><ROW><id>17906404</id><snippet>StopIteration</snippet></ROW><ROW><id>17906404</id><snippet>&gt;&gt;&gt; s = slice(3, 3, None)
&gt;&gt;&gt; it = iter(xrange(s.start or 0, s.stop or 200, s.step or 1))
&gt;&gt;&gt; next(it)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</snippet></ROW><ROW><id>17906404</id><snippet>slice()</snippet></ROW><ROW><id>17906404</id><snippet>xrange()</snippet></ROW><ROW><id>17906404</id><snippet>itertools</snippet></ROW><ROW><id>17906404</id><snippet>StopIteration</snippet></ROW><ROW><id>17906404</id><snippet>def islice(iterable, *args):
    s = slice(*args)
    it = iter(xrange(s.start or 0, s.stop or 200, s.step or 1))
    try:
        nexti = next(it)
        consume = False
    except StopIteration:
        if s.start &lt; 1:
            return
        nexti = s.start - 1
        consume = True
    for i, element in enumerate(iterable):
        if i == nexti:
            if consume:
                return
            yield element
            nexti = next(it)
</snippet></ROW><ROW><id>17906404</id><snippet>slice()</snippet></ROW><ROW><id>17906404</id><snippet>xrange()</snippet></ROW><ROW><id>17906494</id><snippet>DirectoryIndex index.html index.psp index.psp</snippet></ROW><ROW><id>17906636</id><snippet>def find_valid_locations(grid, z, a, b):
    check = [(0, 0, 0, 0)]
    w = z + b
    h = z + a
    while check:
        x, y, ox, oy = check.pop()
        if x + w &gt;= len(grid) or y + h &gt;= len(grid[0]):
            continue
        for i, row in enumerate(grid[x+ox:x+w+1], x+ox):
            for j, val in enumerate(row[y+oy:y+h+1], y+oy):
                if val:
                    break
            else:
                continue
            check.append((x, j+1, 0, 0))
            if y == 0:
                check.extend((ii, j+1, 0, 0) for ii in range(x+1, i+1))
                check.append((i+1, y, 0, 0))
            break
        else:
            yield (x, y)
            check.append((x, y+1, 0, h-1))
            if y == 0:
                check.append((x+1, y, w-1, 0))
            continue
</snippet></ROW><ROW><id>17906636</id><snippet>x</snippet></ROW><ROW><id>17906636</id><snippet>z</snippet></ROW><ROW><id>17906636</id><snippet>x</snippet></ROW><ROW><id>17906781</id><snippet>export ARCHFLAGS='-arch i386 -arch x86_64'
</snippet></ROW><ROW><id>17907136</id><snippet>list1</snippet></ROW><ROW><id>17907136</id><snippet>In [1]: list1 = [0.5, 0.7, 0.3, 0.3, 0.3, 0.4, 0.5]

In [2]: list2 = sorted(list1)

In [3]: list2
Out[3]: [0.3, 0.3, 0.3, 0.4, 0.5, 0.5, 0.7]
</snippet></ROW><ROW><id>17907136</id><snippet>list2</snippet></ROW><ROW><id>17907136</id><snippet>In [4]: list2[-3:]
Out[4]: [0.5, 0.5, 0.7]
</snippet></ROW><ROW><id>17907142</id><snippet>'''
    &gt;&gt;&gt; py_to_pg([1,2,3])
    "'{1,2,3}'::int[]"
    &gt;&gt;&gt; py_to_pg('Jack Johnson')
    "'Jack Johnson'::text"
    &gt;&gt;&gt; py_to_pg([decimal.Decimal(0.3),decimal.Decimal(0.3),decimal.Decimal(0.4)])
    "'{0.3,0.3,0.4}'::numeric(5,4)[];"
    &gt;&gt;&gt; py_to_pg(datetime.datetime(2013,7,7,13,0,0))
    "'2013-07-07T13:00:00'::timestamp"
    &gt;&gt;&gt; py_to_pg(float(0.5))
    "0.5::numeric"
    &gt;&gt;&gt; py_to_pg(5)
    "5::int"
    &gt;&gt;&gt; py_to_pg(['a','b','c'])
    "'{a,b,c}'::text[]"
    &gt;&gt;&gt; py_to_pg(None)
    "'NULL'"
    &gt;&gt;&gt; py_to_pg(33.00)
    "'33.0000'::numeric(5,4)"
    &gt;&gt;&gt; py_to_pg(True)
    "'T'"
'''
def py_to_pg(pyval):
    # set precision to 4 decimals out
    getcontext().prec = 4
    t2t = {int: "'%s'::int",
        str: "'%s'::text",
        Decimal: '%s::numeric(5,4)',
        float: '%s::numeric(5,4)'}
    if type(pyval) in t2t:
        return t2t[type(pyval)] % (str(pyval),)
    elif type(pyval) == datetime.datetime:
        return "'%s'::timestamp" % (pyval.isoformat(),)
    elif type(pyval) == list:
        if len(pyval) &gt; 0 and type(pyval[0]) in t2t:
            # grab appropriate type
            beginning = "'{"
            for a in pyval:
                beginning += str(a) + ','
            return beginning[0:-1] + "}'::" + re.sub(r'.+::(.+)',r'\1[]',t2t[type(pyval[0])])
        elif type(pyval[0]) == datetime.datetime:
            converted = [a.isoformat() for a in pyval]
            return re.sub(r'\[([^\]]+)\]',r"'{\1}'::timestamp[]", converted)
        elif not type(pyval[0]) in t2t:
            raise TypeError('py_to_pg not yet supports ARRAY type %s' % (str(type(pyval[0])),))
        else: # return an empty array
            return '{}'
    elif type(pyval) == type(None):
        return 'NULL'
    elif type(pyval) == bool:
        return "'%s'" % (str(pyval)[0],)
    else:
        raise TypeError('py_to_pg not yet supports type ' + str(type(pyval)))
</snippet></ROW><ROW><id>17907142</id><snippet>def test_py_to_pg(self):
    assertEquals(py_to_pg([decimal.Decimal(0.3),decimal.Decimal(0.3),decimal.Decimal(0.4)]), "'{0.299999999999999988897769753748434595763683319091796875,0.299999999999999988897769753748434595763683319091796875,0.40000000000000002220446049250313080847263336181640625}'::numeric(5,4)[]")
    assertEquals(py_to_pg([1,2,3]), "'{1,2,3}'::int[]")
    assertEquals(py_to_pg('Jack Johnson'), "'Jack Johnson'::text")
    assertEquals(py_to_pg([decimal.Decimal(0.3),decimal.Decimal(0.3),decimal.Decimal(0.4)]), "'{0.299999999999999988897769753748434595763683319091796875,0.299999999999999988897769753748434595763683319091796875,0.40000000000000002220446049250313080847263336181640625}'::numeric(5,4)[]")
    assertEquals(py_to_pg(decimal.Decimal(0.3)), '0.299999999999999988897769753748434595763683319091796875::numeric(5,4)')
    assertEquals(py_to_pg(datetime.datetime(2013,7,7,13,0,0)), "'2013-07-07T13:00:00'::timestamp")
    assertEquals(py_to_pg(float(0.5)), '0.5::numeric(5,4)')
    assertEquals(py_to_pg(0.5),'0.5::numeric(5,4)')
    assertEquals(py_to_pg(5), "'5'::int")
    assertEquals(py_to_pg(['a','b','c']), "'{a,b,c}'::text[]")
    assertEquals(py_to_pg(None), 'NULL')
</snippet></ROW><ROW><id>17907164</id><snippet>&gt;&gt;&gt; 2**100
1267650600228229401496703205376L
</snippet></ROW><ROW><id>17907177</id><snippet>(big unicode, start pos, end pos)</snippet></ROW><ROW><id>17907177</id><snippet>unicode.find()</snippet></ROW><ROW><id>17907177</id><snippet>search()</snippet></ROW><ROW><id>17907215</id><snippet>&gt;&gt;&gt; arange(0, 10, 2)
array([0, 2, 4, 6, 8])
&gt;&gt;&gt; len(_)
5
</snippet></ROW><ROW><id>17907215</id><snippet>[start, stop)</snippet></ROW><ROW><id>17907215</id><snippet>arange(dt, (a*T)+dt, dt)
</snippet></ROW><ROW><id>17907237</id><snippet>random.choice</snippet></ROW><ROW><id>17907237</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; n = 3
&gt;&gt;&gt; end  = 5
&gt;&gt;&gt; r = range(1,n) + range(n+1, end)
&gt;&gt;&gt; r
[1, 2, 4]
&gt;&gt;&gt; random.choice(r)
2
&gt;&gt;&gt; random.choice(r)
4
</snippet></ROW><ROW><id>17907237</id><snippet>def func(n, end, start = 1):
    return range(start, n) + range(n+1, end)
... 
&gt;&gt;&gt; r = func(3, 5)
&gt;&gt;&gt; r
[1, 2, 4]
&gt;&gt;&gt; random.choice(r)
2
</snippet></ROW><ROW><id>17907237</id><snippet>&gt;&gt;&gt; r = range(5)
for player in r:
    others = range(0, player) + range(player+1, 5)
    print player,'--&gt;', others
...     
0 --&gt; [1, 2, 3, 4]
1 --&gt; [0, 2, 3, 4]
2 --&gt; [0, 1, 3, 4]
3 --&gt; [0, 1, 2, 4]
4 --&gt; [0, 1, 2, 3]
</snippet></ROW><ROW><id>17907428</id><snippet>wheel</snippet></ROW><ROW><id>17907428</id><snippet>pip install wheel
</snippet></ROW><ROW><id>17907428</id><snippet>pip wheel --wheel-dir=/local/wheels -r requirements.txt
</snippet></ROW><ROW><id>17907428</id><snippet>/local/wheels</snippet></ROW><ROW><id>17907428</id><snippet>pip install --use-wheel --no-index --find-links=/local/wheels -r requirements.txt
</snippet></ROW><ROW><id>17907595</id><snippet>myapp/admin/templates/admin/index.html.jinja2
</snippet></ROW><ROW><id>17907595</id><snippet>admin</snippet></ROW><ROW><id>17907595</id><snippet>templates</snippet></ROW><ROW><id>17907805</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>17907805</id><snippet>SocketHandler</snippet></ROW><ROW><id>17907842</id><snippet>make server</snippet></ROW><ROW><id>17907842</id><snippet>root</snippet></ROW><ROW><id>17907842</id><snippet>-rw------- 1 root staff 9 May 13 17:56 /usr/local/lib/python2.7/dist-packages/python_dateutil-2.1-py2.7.egg/EGG-INFO/top_level.txt
</snippet></ROW><ROW><id>17907842</id><snippet>sudo make server</snippet></ROW><ROW><id>17908036</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; print os.path.expandvars(r"C:\Users\%USERNAME%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup")
C:\Users\falsetru\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
</snippet></ROW><ROW><id>17908036</id><snippet>&gt;&gt;&gt; print r"C:\Users\{0[USERNAME]}\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup".format(os.environ)
C:\Users\falsetru\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
</snippet></ROW><ROW><id>17908036</id><snippet>import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
from email.MIMEBase import MIMEBase
from email import Encoders
import os

msg = MIMEMultipart()
msg['From'] = 'FakeEmail@hotmail.com'
msg['To'] = 'FakeEmail@hotmail.com'
msg['Subject'] = 'simple hotmail email'
message = os.environ['USERNAME']
#message = os.path.expandvars('%USERNAME%') # alternative
msg.attach(MIMEText(message))
</snippet></ROW><ROW><id>17908191</id><snippet>y_list</snippet></ROW><ROW><id>17908191</id><snippet>x-axis</snippet></ROW><ROW><id>17908191</id><snippet>x_list</snippet></ROW><ROW><id>17908191</id><snippet>x-coordinates</snippet></ROW><ROW><id>17908191</id><snippet>plt.plot(x_list, y_list)
</snippet></ROW><ROW><id>17908191</id><snippet>x</snippet></ROW><ROW><id>17908191</id><snippet>y</snippet></ROW><ROW><id>17908191</id><snippet>x_list</snippet></ROW><ROW><id>17908191</id><snippet>x-coordinates</snippet></ROW><ROW><id>17908191</id><snippet>x-axis</snippet></ROW><ROW><id>17908191</id><snippet>x-coordinates</snippet></ROW><ROW><id>17908191</id><snippet>x_list_of_lists</snippet></ROW><ROW><id>17908191</id><snippet>x</snippet></ROW><ROW><id>17908191</id><snippet>x-axis</snippet></ROW><ROW><id>17908191</id><snippet>x_list</snippet></ROW><ROW><id>17908191</id><snippet>xmin = min([min(x_list) for x_list in x_list_of_lists])-delta
xmax = max([max(x_list) for x_list in x_list_of_lists])+delta
plt.xlim(xmin, xmax)
</snippet></ROW><ROW><id>17908191</id><snippet>plt.plot</snippet></ROW><ROW><id>17908191</id><snippet>plt.show()</snippet></ROW><ROW><id>17908241</id><snippet>lst[item]</snippet></ROW><ROW><id>17908241</id><snippet>item</snippet></ROW><ROW><id>17908241</id><snippet>latin</snippet></ROW><ROW><id>17908241</id><snippet>lst[item][1:len(lst[item])
</snippet></ROW><ROW><id>17908241</id><snippet>,</snippet></ROW><ROW><id>17908241</id><snippet>.</snippet></ROW><ROW><id>17908241</id><snippet>pyg = 'ay'

pyg_input = raw_input("Please enter a sentence: ")
print

if len(pyg_input) &gt; 0:# and pyg_input.isalpha():
    lwr_input = pyg_input.lower()
    lst = lwr_input.split()
    latin = []
    for item in lst:
        frst = item[0]
        if frst in 'aeiou':
            item = item + pyg
        else:
            item = item[1:] + frst + pyg
        latin.append(item)
    print ' '.join(latin)
</snippet></ROW><ROW><id>17908262</id><snippet>testDoc/t/docs</snippet></ROW><ROW><id>17908262</id><snippet>docs</snippet></ROW><ROW><id>17908262</id><snippet>sys.path.insert(0, os.path.abspath("../.."))
</snippet></ROW><ROW><id>17908363</id><snippet>i = 1
f = open('file')
for line in f.readlines():
    if i % 2 == 0 :
        print line
    i += 1
</snippet></ROW><ROW><id>17908545</id><snippet>strip</snippet></ROW><ROW><id>17908545</id><snippet>lstrip</snippet></ROW><ROW><id>17908545</id><snippet>In [27]: str(bin(66)).strip("0b")
Out[27]: '100001'

In [28]: str(bin(66)).lstrip("0b")
Out[28]: '1000010'
</snippet></ROW><ROW><id>17908545</id><snippet>format</snippet></ROW><ROW><id>17908545</id><snippet>In [38]: '{:b}'.format(66)
Out[38]: '1000010'
</snippet></ROW><ROW><id>17908960</id><snippet>from splinter import Browser
import time

URL = 'https://mail.google.com/mail/u/0/?shva=1#trash'

with Browser() as browser:
    browser.visit(URL)

    username = browser.find_by_id('Email')
    username.fill(...)

    password = browser.find_by_id('Passwd')
    password.fill(...)

    button = browser.find_by_id('signIn')
    button.click()

    time.sleep(5)

    browser.visit(URL)

    empty_button = browser.find_by_xpath("//div[5]/div[2]/div/div[2]/div[1]/div[2]/div/div/div/div[2]/div[1]/div[1]/div/div[2]/div[3]/div/span")
    empty_button.click()
</snippet></ROW><ROW><id>17908979</id><snippet>### Added code (</snippet></ROW><ROW><id>17908979</id><snippet>### Added code)</snippet></ROW><ROW><id>17908979</id><snippet>import wx

class TestNoteBook(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, size=(600, 500))
        panel = wx.Panel(self)
        hsizer = wx.BoxSizer(wx.HORIZONTAL)

        leftpanel = wx.Panel(panel)
        notebook = wx.Notebook(leftpanel)
        posterpage = wx.Panel(notebook)
        listpage = wx.Panel(notebook)
        notebook.AddPage(posterpage, 'posters')
        notebook.AddPage(listpage, 'list')
        hsizer.Add(leftpanel, 1, wx.EXPAND)
        rightpanel = wx.Panel(panel)
        hsizer.Add(rightpanel, 1, wx.EXPAND)

        ##### Added code (
        leftpanel_sizer = wx.BoxSizer(wx.HORIZONTAL)
        leftpanel_sizer.Add(notebook, 1, wx.EXPAND)
        leftpanel.SetSizer(leftpanel_sizer)

        rightpanel.SetBackgroundColour('blue') # not needed, to distinguish rightpanel from leftpanel
        ##### Added code )

        panel.SetSizer(hsizer)


app = wx.App()
frame = TestNoteBook(None, -1, 'notebook')
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>17908987</id><snippet>py2exe</snippet></ROW><ROW><id>17908987</id><snippet>python setup.py install
</snippet></ROW><ROW><id>17908987</id><snippet>python untitled-22.py py2exe 
</snippet></ROW><ROW><id>17909007</id><snippet>def local_maxima(xval, yval):
    xval = np.asarray(xval)
    yval = np.asarray(yval)

    sort_idx = np.argsort(xval)
    yval = yval[sort_idx]
    gradient = np.diff(yval)
    maxima = np.diff((gradient &gt; 0).view(np.int8))
    return np.concatenate((([0],) if gradient[0] &lt; 0 else ()) +
                          (np.where(maxima == -1)[0] + 1,) +
                          (([len(yval)-1],) if gradient[-1] &gt; 0 else ()))
</snippet></ROW><ROW><id>17909007</id><snippet>gradient</snippet></ROW><ROW><id>17909007</id><snippet>np.diff((gradient &gt; 0)</snippet></ROW><ROW><id>17909007</id><snippet>True</snippet></ROW><ROW><id>17909007</id><snippet>&gt; 0</snippet></ROW><ROW><id>17909007</id><snippet>&lt;= 0</snippet></ROW><ROW><id>17909007</id><snippet>-1</snippet></ROW><ROW><id>17909007</id><snippet>+1</snippet></ROW><ROW><id>17909007</id><snippet>.view(np.int8)</snippet></ROW><ROW><id>17909007</id><snippet>.astype(int)</snippet></ROW><ROW><id>17909007</id><snippet>np.concatenate</snippet></ROW><ROW><id>17909007</id><snippet>np.float</snippet></ROW><ROW><id>17909007</id><snippet>In [2]: local_maxima(xval, yval)
Out[2]: array([ 1,  6, 10], dtype=int64)
</snippet></ROW><ROW><id>17909007</id><snippet>In [3]: xval = np.random.rand(10000)

In [4]: yval = np.random.rand(10000)

In [5]: local_maxima(xval, yval)
Out[5]: array([   0,    2,    4, ..., 9991, 9995, 9998], dtype=int64)

In [6]: %timeit local_maxima(xval, yval)
1000 loops, best of 3: 1.16 ms per loop
</snippet></ROW><ROW><id>17909025</id><snippet>from tkinter import *
from random import choice

# Place the messages outside of the function so that they are not
# re-created each time the button is pressed
messages = ['Waste not, want not', 'Sticks and stones',
'Keep holding on', 'Hold On, Pain Ends']

def motiv():

    # Just update the text of the Label instead of create a whole new one
    message["text"] = choice(messages)

mGui = Tk()

mGui.geometry('450x450+500+150')
mGui.title('RMM')

mLabel = Label(text='Welcome to the Random Motivation Machine', fg="red").pack()

mButton = Button(text = "Click for Some Motivation", command = motiv)
mButton.pack()

# Make a Label to hold the messages that will be updated with each click of the button
message = Label(fg="red")
message.pack()

mGui.mainloop()
</snippet></ROW><ROW><id>17909074</id><snippet>static</snippet></ROW><ROW><id>17909074</id><snippet># full path to the static directory you just created
STATIC_ROOT = 'absolute_path_to_static_directory'  

STATIC_URL = '/static/'
</snippet></ROW><ROW><id>17909074</id><snippet>python manage.py collectstatic</snippet></ROW><ROW><id>17909074</id><snippet>static</snippet></ROW><ROW><id>17909106</id><snippet>L[:]</snippet></ROW><ROW><id>17909106</id><snippet>L</snippet></ROW><ROW><id>17909106</id><snippet>range(len(L) - 1, -1, -1)</snippet></ROW><ROW><id>17909106</id><snippet>&gt;&gt;&gt; for x in L[:]:  
...     if x == 1:
...         L.remove(x)
... 
&gt;&gt;&gt; L
[2, 2, 3, 6, 10, 3]
</snippet></ROW><ROW><id>17909106</id><snippet>&gt;&gt;&gt; L = [1, 2, 2, 3, 1, 1, 6, 10, 1, 3]
&gt;&gt;&gt; L[:] = [x for x in L if x != 1]
&gt;&gt;&gt; L
[2, 2, 3, 6, 10, 3]
</snippet></ROW><ROW><id>17909123</id><snippet>&gt;&gt;&gt; import json  # simple json is better bit I didn't want to force an install
&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Point = namedtuple("Point", "x y", verbose = False)
&gt;&gt;&gt; p = Point(3,4)
&gt;&gt;&gt; json.dumps(p._asdict())
'{"x": 3, "y": 4}'
&gt;&gt;&gt; s = json.dumps(p._asdict())
&gt;&gt;&gt; json.loads(s)  # not there yet cause thisis a dict
{u'y': 4, u'x': 3}   # but it is a dict that can create a Point
&gt;&gt;&gt; Point(**json.loads(s))
Point(x=3, y=4)    
</snippet></ROW><ROW><id>17909123</id><snippet>__getstate__</snippet></ROW><ROW><id>17909123</id><snippet>import pickle

# Point.__getstate__=lambda self: self._asdict() # not needed as per @simon's comment thx simon
&gt;&gt;&gt; pickle.dumps(p)
"ccopy_reg\n_reconstructor\np0\n(c__main__\nPoint\np1\nc__builtin__\ntuple\np2\n(I3\nI4\ntp3\ntp4\nRp5\nccollections\nOrderedDict\np6\n((lp7\n(lp8\nS'x'\np9\naI3\naa(lp10\nS'y'\np11\naI4\naatp12\nRp13\nb."
s = pickle.dumps(p)
&gt;&gt;&gt; pickle.loads(s)
Point(x=3, y=4)
</snippet></ROW><ROW><id>17909123</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>17909194</id><snippet>d.join()
</snippet></ROW><ROW><id>17909194</id><snippet>d</snippet></ROW><ROW><id>17909194</id><snippet>join</snippet></ROW><ROW><id>17909194</id><snippet>print "stop main"</snippet></ROW><ROW><id>17909194</id><snippet>print "start main"
d.start()
time.sleep(1)
n.start()
d.join()
n.join()
print "stop main"
</snippet></ROW><ROW><id>17909511</id><snippet>__init__.py</snippet></ROW><ROW><id>17909511</id><snippet>outdir</snippet></ROW><ROW><id>17909511</id><snippet>#import_abc.py
import sys
sys.path.append('/home/monty/py')   #path to directory that contains outdir
from outdir.lib import abc
</snippet></ROW><ROW><id>17909525</id><snippet>add_mutually_exclusive_group</snippet></ROW><ROW><id>17909525</id><snippet>prog 
  command 1 
    -a: ...
  command 2
    -b: ...
    -c: ...
</snippet></ROW><ROW><id>17909525</id><snippet>prog command_1 -a xxxx
</snippet></ROW><ROW><id>17909525</id><snippet>prog command_2 -b yyyy -c zzzz
</snippet></ROW><ROW><id>17909525</id><snippet>prog command_1 xxxx
</snippet></ROW><ROW><id>17909525</id><snippet>git commit -am
git merge develop
</snippet></ROW><ROW><id>17909525</id><snippet># create the top-level parser
parser = argparse.ArgumentParser(prog='PROG')
parser.add_argument('--foo', action='store_true', help='help for foo arg.')
subparsers = parser.add_subparsers(help='help for subcommand')

# create the parser for the "command_1" command
parser_a = subparsers.add_parser('command_1', help='command_1 help')
parser_a.add_argument('a', type=str, help='help for bar, positional')

# create the parser for the "command_2" command
parser_b = subparsers.add_parser('command_2', help='help for command_2')
parser_b.add_argument('-b', type=str, help='help for b')
parser_b.add_argument('-c', type=str, action='store', default='', help='test')
</snippet></ROW><ROW><id>17909525</id><snippet>&gt;&gt;&gt; parser.print_help()
usage: PROG [-h] [--foo] {command_1,command_2} ...

positional arguments:
  {command_1,command_2}
                        help for subcommand
    command_1           command_1 help
    command_2           help for command_2

optional arguments:
  -h, --help            show this help message and exit
  --foo                 help for foo arg.
&gt;&gt;&gt;

&gt;&gt;&gt; parser.parse_args(['command_1', 'working'])
Namespace(a='working', foo=False)
&gt;&gt;&gt; parser.parse_args(['command_1', 'wellness', '-b x'])
usage: PROG [-h] [--foo] {command_1,command_2} ...
PROG: error: unrecognized arguments: -b x
</snippet></ROW><ROW><id>17909566</id><snippet>render</snippet></ROW><ROW><id>17909566</id><snippet>return render(request, 'events/event_instance.html', {'event_instance': event_instance})
</snippet></ROW><ROW><id>17909566</id><snippet>{{ event_instance }}
{{ event_instance.location }}
etc.
</snippet></ROW><ROW><id>17909641</id><snippet>from string import ascii_uppercase
from itertools import product

def gen_words(mask):
    replace = mask.count('?')
    mask = mask.replace('?', '{}')
    for letters in product(ascii_uppercase, repeat=replace):
        yield mask.format(*letters)
</snippet></ROW><ROW><id>17909641</id><snippet>&gt;&gt;&gt; list(gen_words('?Z'))
['AZ', 'BZ', 'CZ', 'DZ', 'EZ', 'FZ', 'GZ', 'HZ', 'IZ', 'JZ', 'KZ', 'LZ', 'MZ', 'NZ', 'OZ', 'PZ', 'QZ', 'RZ', 'SZ', 'TZ', 'UZ', 'VZ', 'WZ', 'XZ', 'YZ', 'ZZ']
</snippet></ROW><ROW><id>17909657</id><snippet>templateContext.pop</snippet></ROW><ROW><id>17909657</id><snippet>{% for j in sub_com|slice:"1" %}
   {% for k in  j|slice:"3" %}
       &lt;li&gt; {{k}} &lt;/li&gt;
   {%  endfor %}
   {{ j.pop.0 }}
{% endfor %}
</snippet></ROW><ROW><id>17909687</id><snippet>contenidos</snippet></ROW><ROW><id>17909687</id><snippet>contenido</snippet></ROW><ROW><id>17909687</id><snippet>{% extends 'base.html' %}

{% block title %} Contenidos {% endblock %}

{% block content %}
    &lt;h2&gt; contenidos &lt;/h2&gt;

    {% for contenido in contenidos %}
        &lt;h3&gt;
            {{ contenido.title }}  {# was contenidos.title #}
        &lt;/h3&gt;
        &lt;p&gt;{{ contenido.content }}&lt;/p&gt;
    {% endfor %}
{% endblock %}
</snippet></ROW><ROW><id>17910036</id><snippet>str.translate</snippet></ROW><ROW><id>17910036</id><snippet>&gt;&gt;&gt; test = 'Today it is Tuesday'
&gt;&gt;&gt; removeText = 'pqrst'
&gt;&gt;&gt; test.translate(None, removeText+removeText.upper())
'oday i i ueday'
</snippet></ROW><ROW><id>17910036</id><snippet>translate()</snippet></ROW><ROW><id>17910036</id><snippet>&gt;&gt;&gt; test = 'Today it is Tuesday'
&gt;&gt;&gt; removeText = 'pqrst'
&gt;&gt;&gt; test.translate(dict.fromkeys(ord(elem) for elem in removeText+removeText.upper()))
'oday i i ueday'
</snippet></ROW><ROW><id>17910036</id><snippet>&gt;&gt;&gt; testList = list(test)
&gt;&gt;&gt; for i in testList[:]:
        if i in 'pqrstPQRST':
            testList.remove(i)


&gt;&gt;&gt; "".join(testList)
'oday i i ueday'
</snippet></ROW><ROW><id>17910036</id><snippet>string = ''</snippet></ROW><ROW><id>17910036</id><snippet>"".join(...)</snippet></ROW><ROW><id>17910365</id><snippet>itertools.product(...)</snippet></ROW><ROW><id>17910365</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; list(product([1, 0], repeat=2))
[(1, 1), (1, 0), (0, 1), (0, 0)]
</snippet></ROW><ROW><id>17910365</id><snippet>list</snippet></ROW><ROW><id>17910365</id><snippet>&gt;&gt;&gt; [list(elem) for elem in product([1, 0], repeat =2)]
[[1, 1], [1, 0], [0, 1], [0, 0]]
</snippet></ROW><ROW><id>17910365</id><snippet>map()</snippet></ROW><ROW><id>17910365</id><snippet>&gt;&gt;&gt; map(list, product([1, 0], repeat=2))
[[1, 1], [1, 0], [0, 1], [0, 0]]
</snippet></ROW><ROW><id>17910393</id><snippet>matplotlib</snippet></ROW><ROW><id>17910393</id><snippet>np.ndarray</snippet></ROW><ROW><id>17910393</id><snippet>pandas</snippet></ROW><ROW><id>17910393</id><snippet>pandas</snippet></ROW><ROW><id>17910393</id><snippet>numpy</snippet></ROW><ROW><id>17910393</id><snippet>pandas</snippet></ROW><ROW><id>17910393</id><snippet>v[-1]</snippet></ROW><ROW><id>17910393</id><snippet>pandas</snippet></ROW><ROW><id>17910393</id><snippet>mpl</snippet></ROW><ROW><id>17910393</id><snippet>matplotlib</snippet></ROW><ROW><id>17910733</id><snippet>&lt;input type="file" id="file"&gt;
</snippet></ROW><ROW><id>17910733</id><snippet>function upload() {
    var formData = new FormData();
    var target = //Upload-Server URL
    formData.append("file", document.getElementById("file").files[0]);
    var xhr = new XMLHttpRequest();
    var eventSource = xhr.upload || xhr;
    eventSource.addEventListener("progress", function(e){
        var current = e.loaded || e.position ;
        var total = e.total || e.totalSize;
        var percant = parseInt((current/total)*100, 10);
        // DO whatever you want with progress
    });
    xhr.open("POST", target, true);
    xhr.send(formData);
    xhr.onload = function() {
        if (this.status === 200)
            // SUCCESS
    };
}
</snippet></ROW><ROW><id>17910921</id><snippet>collections.Counter</snippet></ROW><ROW><id>17910921</id><snippet>&gt;&gt;&gt; sample = [1, 3, 6, 7, 7, 7, 7, 8]
&gt;&gt;&gt; set(sample)
{8, 1, 3, 6, 7}
# Notice: the order has been thrown away
&gt;&gt;&gt; newsample = 'LollaPAloOza'
&gt;&gt;&gt; set(newsample)
{'a', 'A', 'L', 'l', 'o', 'O', 'z', 'P'}
# Notice: lowercase and uppercase are treated as different characters. 
</snippet></ROW><ROW><id>17910921</id><snippet>&gt;&gt;&gt; set(newsample.lower())
{'a', 'p', 'z', 'l', 'o'}
</snippet></ROW><ROW><id>17910921</id><snippet>my_input = newsample.lower()
for item in set(my_input):
      print(my_input.count(item))
# the trick here is to iterate through the unique values and for each element,
# to count the item that appears in the _whole_ (now lowercase) input.
</snippet></ROW><ROW><id>17910921</id><snippet>collections.Counter</snippet></ROW><ROW><id>17911011</id><snippet>uid</snippet></ROW><ROW><id>17911033</id><snippet>import numpy as np
import scipy.sparse as sps

data = np.genfromtxt('data.txt', dtype=[('from', np.intp),
                                        ('to', np.intp),
                                        ('weight', np.float)])
</snippet></ROW><ROW><id>17911033</id><snippet>graph</snippet></ROW><ROW><id>17911033</id><snippet>graph[i, j]</snippet></ROW><ROW><id>17911033</id><snippet>i</snippet></ROW><ROW><id>17911033</id><snippet>j</snippet></ROW><ROW><id>17911033</id><snippet>graph = sps.csr_matrix((data['weight'], (data['from'], data['to'])))
</snippet></ROW><ROW><id>17911033</id><snippet>sorted_to</snippet></ROW><ROW><id>17911033</id><snippet>graph = sps.rand(10, 10, density=0.1, format='csr')
data, indptr, indices = graph.data, graph.indptr, graph.indices
non_empty_rows, = np.nonzero(np.diff(graph.indptr))
sorted_out = {}
for j in non_empty_rows:
    weight_slice = data[indptr[j]:indptr[j+1]]
    out_slice = indices[indptr[j]:indptr[j+1]]
    sorted_out[j] = out_slice[np.argsort(weight_slice)]
</snippet></ROW><ROW><id>17911033</id><snippet>&gt;&gt;&gt; graph = sps.rand(5, 5, density=0.2, format='csr')
&gt;&gt;&gt; graph.toarray()
array([[ 0.88968871,  0.        ,  0.        ,  0.80773932,  0.        ],
       [ 0.        ,  0.        ,  0.8921645 ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.18552664,  0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.22945956]])
&gt;&gt;&gt; non_empty_rows
array([0, 1, 3, 4], dtype=int64)
&gt;&gt;&gt; sorted_out
{0: array([3, 0]), 1: array([2]), 3: array([0]), 4: array([4])}
</snippet></ROW><ROW><id>17911094</id><snippet>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; li = [1, 2, 3]
&gt;&gt;&gt; [a] + li  # Don't use 'list' as variable name.
[5, 1, 2, 3]
</snippet></ROW><ROW><id>17911119</id><snippet>#! /usr/bin/python3
import time

m = [ [c for c in line] for line in '''............................
..XXXXXXXXXX...........XXX..
..X........X...........X.X..
..XXXXXX...X....XXXXXXXX.X..
.......X...X....X........X..
....XXXX...XXXXXX........X..
....X....................X..
....X.................XXXX..
....XXXXXXXXXXXXXXXXXXX.....'''.split ('\n') ]

def flood (matrix, start):
    maxX = len (matrix [0] )
    maxY = len (matrix)
    tbf = [start]
    while tbf:
        x, y = tbf [0]
        tbf = tbf [1:]
        if x &lt; 0 or x &gt;= maxX or y &lt; 0 or y &gt;= maxY: continue
        if matrix [y] [x] == 'X': continue
        matrix [y] [x] = 'X'
        tbf += [ (x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1) ]
        print ('\x1b[0J\x1b[1;1H') #Clear screen and position cursor top left
        for line in matrix: print (''.join (line) )
        time.sleep (.2)

#flood (m, (0, 0) )
flood (m, (4, 2) )
</snippet></ROW><ROW><id>17911169</id><snippet>Asia/Seoul</snippet></ROW><ROW><id>17911169</id><snippet>America/New_York</snippet></ROW><ROW><id>17911174</id><snippet>libx11-dev</snippet></ROW><ROW><id>17911174</id><snippet>sudo apt-get install libx11-dev
</snippet></ROW><ROW><id>17911268</id><snippet>&gt;&gt;&gt; def encodeemail(email):
       e = email.split("@")
       return "@".join(["x" * len(e[0]), e[1]])

&gt;&gt;&gt; encodeemail("harry@hogwarts.com")
xxxxx@hogwarts.com
</snippet></ROW><ROW><id>17911268</id><snippet>&gt;&gt;&gt; def encodeemail(email):
        d = email.split(" ")
        for i, f in enumerate(d):
            e = f.split("@")
            if len(e) &gt; 1: d[i] = "@".join(["x" * len(e[0]), e[1]])
    return " ".join(d)

&gt;&gt;&gt; encodeemail("this is harry@hogwarts.com")
this is xxxxx@hogwarts.com
</snippet></ROW><ROW><id>17911268</id><snippet>&gt;&gt;&gt; def encodeemail(email):
        d = email.split(" ")
        for i in range(len(d)):
            e = d[i].split("@")
            if len(e) &gt; 1: d[i] = "@".join(["x" * len(e[0]), e[1]])
    return " ".join(d)
</snippet></ROW><ROW><id>17911503</id><snippet>os.path.join()</snippet></ROW><ROW><id>17911503</id><snippet>f = open(os.path.join('newpath', "fooC" + str(i) + "-" + todayDate +".csv"), "w")
</snippet></ROW><ROW><id>17911503</id><snippet>open()</snippet></ROW><ROW><id>17911503</id><snippet>mode</snippet></ROW><ROW><id>17911832</id><snippet>user: {stats...}</snippet></ROW><ROW><id>17911832</id><snippet>[dict([('user', k)] + list(v.items())) for k, v in a['users'].items()]
</snippet></ROW><ROW><id>17911832</id><snippet>{'user': '&lt;user1&gt;', 'negative': 8, 'positive': 32, 'rating': 80.0}
</snippet></ROW><ROW><id>17911832</id><snippet>sorted</snippet></ROW><ROW><id>17911832</id><snippet>sorted([dict([('user', k)] + list(v.items())) for k, v in a['users'].items()], key=lambda x: x['rating'])
</snippet></ROW><ROW><id>17911832</id><snippet>for ... in</snippet></ROW><ROW><id>17911832</id><snippet>reverse=True</snippet></ROW><ROW><id>17911832</id><snippet>sorted</snippet></ROW><ROW><id>17911839</id><snippet>weight</snippet></ROW><ROW><id>17911839</id><snippet>GetLiveWeight</snippet></ROW><ROW><id>17911839</id><snippet>weight = 'value'
def GetLiveWeight():
    global weight
</snippet></ROW><ROW><id>17911839</id><snippet>global</snippet></ROW><ROW><id>17911839</id><snippet>GetLiveWeight</snippet></ROW><ROW><id>17911839</id><snippet>weight</snippet></ROW><ROW><id>17911839</id><snippet>weight</snippet></ROW><ROW><id>17911839</id><snippet>weight</snippet></ROW><ROW><id>17911886</id><snippet>In [1]: users = ["user1", "user2"]

In [2]: pws = ["password", "12354"]

In [3]: dict(zip(users, pws))
Out[3]: {'user1': 'password', 'user2': '12354'}
</snippet></ROW><ROW><id>17911982</id><snippet>stub = sys.argv[ix].lower() == 'true' if len(sys.argv) &gt; ix else False
</snippet></ROW><ROW><id>17911982</id><snippet>stub = (sys.argv[ix].lower() == 'true') if len(sys.argv) &gt; ix else False
</snippet></ROW><ROW><id>17912106</id><snippet>In [74]: part = pd.concat([pd.get_dummies(frame2[x]) for x in frame2], axis=1)

In [75]: part
Out[75]: 
   A  C  X  Y
0  1  0  1  0
1  0  1  0  1
</snippet></ROW><ROW><id>17912106</id><snippet>frame2</snippet></ROW><ROW><id>17912106</id><snippet>reindex_axis</snippet></ROW><ROW><id>17912106</id><snippet>In [76]: idx = pd.Index(np.ravel(frame.values)).unique()

In [77]: idx
Out[77]: array(['A', 'X', 'Y', 'B', 'Z'], dtype=object)
</snippet></ROW><ROW><id>17912106</id><snippet>NaN</snippet></ROW><ROW><id>17912106</id><snippet>In [78]: part.reindex_axis(idx, axis=1).fillna(0)
Out[78]: 
   A  X  Y  B  Z
0  1  1  0  0  0
1  0  0  1  0  0
</snippet></ROW><ROW><id>17912118</id><snippet>In [11]: from collections import deque

In [12]: cache = deque(maxlen=max_skip_back)

In [13]: for line in fin:
   ....:     line = line.strip()
   ....:     cache.append(line)
   ....:     x = process(line)
   ....:     if x == 23:
   ....:         for line in cache[-this_skip_back:]:
   ....:             process(line)
</snippet></ROW><ROW><id>17912118</id><snippet>maxlen</snippet></ROW><ROW><id>17912239</id><snippet>{k: 1 for k in arr}
</snippet></ROW><ROW><id>17912280</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

#---------
# IMPORT
#---------
from PyQt4 import QtGui, QtCore

#---------
# MAIN
#---------
class MyWindow(QtGui.QWidget):
    valueChanged  = QtCore.pyqtSignal(int)

    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)

        self.value = 0

        self.pushButtonAdd = QtGui.QPushButton(self)
        self.pushButtonAdd.setText("Add!")
        self.pushButtonAdd.clicked.connect(self.on_pushButtonAdd_clicked)

        self.pushButtonSubtract = QtGui.QPushButton(self)
        self.pushButtonSubtract.setText("Subtract!")
        self.pushButtonSubtract.clicked.connect(self.on_pushButtonSubtract_clicked)

        self.lineEditValue = QtGui.QLineEdit(self)
        self.lineEditValue.setText(str(self.value))

        self.layoutVertical = QtGui.QVBoxLayout(self)
        self.layoutVertical.addWidget(self.pushButtonAdd)
        self.layoutVertical.addWidget(self.pushButtonSubtract)
        self.layoutVertical.addWidget(self.lineEditValue)

    @QtCore.pyqtSlot()
    def on_pushButtonAdd_clicked(self):
        self.valueChanged.emit(1)

    @QtCore.pyqtSlot()
    def on_pushButtonSubtract_clicked(self):
        self.valueChanged.emit(-1)

    def setValue(self, value):
        self.value += value
        self.lineEditValue.setText(str(self.value))

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow()
    main.resize(333, 111)
    main.valueChanged.connect(main.setValue)
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>17912280</id><snippet>main.setValue(34)</snippet></ROW><ROW><id>17912402</id><snippet>sudo easy_install --upgrade lxml 
sudo easy_install --upgrade scrapy
</snippet></ROW><ROW><id>17912502</id><snippet>'AB'</snippet></ROW><ROW><id>17912502</id><snippet>AA
AB
BA
BB
</snippet></ROW><ROW><id>17912502</id><snippet>n</snippet></ROW><ROW><id>17912502</id><snippet>itertools.product</snippet></ROW><ROW><id>17912502</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.product('AB', repeat=2))
[('A', 'A'), ('A', 'B'), ('B', 'A'), ('B', 'B')]
</snippet></ROW><ROW><id>17912545</id><snippet>&gt;&gt;&gt; def getstr(s):
...     a = [x for x in s]
...     res = None
...     for x in a:
...         if not res: res = x
...         else: res = " &gt; ".join([res, x])
...         yield res
&gt;&gt;&gt;
&gt;&gt;&gt; print " | ".join(getstr("ABCD"))
'A | A &gt; B | A &gt; B &gt; C | A &gt; B &gt; C &gt; D'
</snippet></ROW><ROW><id>17912651</id><snippet>#! /usr/bin/env python
from __future__ import print_function

with open('filetest', 'w') as f1:
    f1.write("This is a line")

with open('filetest', 'r') as f2:
    for line in f2.readlines():
        print(line, end='')
</snippet></ROW><ROW><id>17912762</id><snippet>[...]</snippet></ROW><ROW><id>17912762</id><snippet>(?:0x)?\d+
</snippet></ROW><ROW><id>17912764</id><snippet>listC</snippet></ROW><ROW><id>17912764</id><snippet>listA</snippet></ROW><ROW><id>17912764</id><snippet>listB</snippet></ROW><ROW><id>17912764</id><snippet>listA = [a for a in listA if a not in listC]
listB = [a for a in listB if a not in listC]
</snippet></ROW><ROW><id>17912777</id><snippet>import psycopg2, glob

sitesizetemp = glob.glob('C:/Data/Sheltered BLPUs/CSVs/sitesize*.csv')
conn = psycopg2.connect("dbname=postgres user=postgres")
cur = conn.cursor()

for f in sitesizetemp:
    cur.execute("COPY sitesize FROM '%s' DELIMITER ',' CSV;" % f)

conn.commit()
cur.close()
conn.close()
</snippet></ROW><ROW><id>17912811</id><snippet>U+FEFF</snippet></ROW><ROW><id>17912811</id><snippet>#!python2
#coding: utf8
u = u'ABC'
e8 = u.encode('utf-8')        # encode without BOM
e8s = u.encode('utf-8-sig')   # encode with BOM
e16 = u.encode('utf-16')      # encode with BOM
e16le = u.encode('utf-16le')  # encode without BOM
e16be = u.encode('utf-16be')  # encode without BOM
print 'utf-8     %r' % e8
print 'utf-8-sig %r' % e8s
print 'utf-16    %r' % e16
print 'utf-16le  %r' % e16le
print 'utf-16be  %r' % e16be
print
print 'utf-8  w/ BOM decoded with utf-8     %r' % e8s.decode('utf-8')
print 'utf-8  w/ BOM decoded with utf-8-sig %r' % e8s.decode('utf-8-sig')
print 'utf-16 w/ BOM decoded with utf-16    %r' % e8s.decode('utf-16')
print 'utf-16 w/ BOM decoded with utf-16le  %r' % e8s.decode('utf-16le')
</snippet></ROW><ROW><id>17912811</id><snippet>EF BB BF</snippet></ROW><ROW><id>17912811</id><snippet>utf-8     'ABC'
utf-8-sig '\xef\xbb\xbfABC'
utf-16    '\xff\xfeA\x00B\x00C\x00'    # Adds BOM and encodes using native processor endian-ness.
utf-16le  'A\x00B\x00C\x00'
utf-16be  '\x00A\x00B\x00C'

utf-8  w/ BOM decoded with utf-8     u'\ufeffABC'    # doesn't remove BOM if present.
utf-8  w/ BOM decoded with utf-8-sig u'ABC'          # removes BOM if present.
utf-16 w/ BOM decoded with utf-16    u'ABC'          # *requires* BOM to be present.
utf-16 w/ BOM decoded with utf-16le  u'\ufeffABC'    # doesn't remove BOM if present.
</snippet></ROW><ROW><id>17912811</id><snippet>utf-16</snippet></ROW><ROW><id>17912916</id><snippet>np.savez('test.npz', **my_data)
my_data = np.load('test.npz')
print(my_data['r1'])
</snippet></ROW><ROW><id>17912916</id><snippet>item</snippet></ROW><ROW><id>17912916</id><snippet>my_data = np.load('test.npz')
my_variable = my_data['annotation_info'].item()
</snippet></ROW><ROW><id>17912942</id><snippet>def get_rank(self):
        """\
        Return position of target in ranking.
        """

        scopes = Scope.all().order_by('-support_number', 'pk')

        for index, item in enumerate(scopes):
            if item.id == self.id:
                self.rank_number = index + 1
                break

        self.save()

        return self.rank_number
</snippet></ROW><ROW><id>17912942</id><snippet>{{ scope.get_rank }}</snippet></ROW><ROW><id>17912963</id><snippet>text[:start]</snippet></ROW><ROW><id>17912963</id><snippet>In [76]: import re

In [77]: text = """ this is an example Item 2 text text &lt;B&gt;Item 2. example"""

In [78]: a = re.search ('(?&lt;=&lt;B&gt;)Item 2\.',text)

In [79]: start, end = a.span()

In [80]: text[:start]
Out[80]: ' this is an example Item 2 text text &lt;B&gt;'
</snippet></ROW><ROW><id>17912963</id><snippet>a</snippet></ROW><ROW><id>17912963</id><snippet>text</snippet></ROW><ROW><id>17912963</id><snippet>string</snippet></ROW><ROW><id>17912963</id><snippet>In [91]: a.string[:start]
Out[91]: ' this is an example Item 2 text text &lt;B&gt;'
</snippet></ROW><ROW><id>17912966</id><snippet>for s in strings:
    for t in tlds:
        print s + '.' + t
</snippet></ROW><ROW><id>17913185</id><snippet>IT.izip_longest(*[iterable]*n)</snippet></ROW><ROW><id>17913185</id><snippet>lst</snippet></ROW><ROW><id>17913185</id><snippet>n</snippet></ROW><ROW><id>17913185</id><snippet>import random
import itertools as IT
# lst = random.sample(range(100), 30)
lst = range(30)
lst = sorted(lst)

col_size = int(raw_input('How many columns do you want?: '))
sorting = 'Vertical'

if sorting == 'Vertical':
    # vertically sorted
    n = len(lst)//col_size
    lst = iter(lst)
    columns = IT.izip_longest(*[lst]*n, fillvalue='')

    print '\nVertically Sorted:'

    print('\n'.join(
        [''.join(map('{:4}'.format, row))
         for row in IT.izip(*columns)]))
</snippet></ROW><ROW><id>17913185</id><snippet>   0   7  14  21  28
   1   8  15  22  29
   2   9  16  23    
   3  10  17  24    
   4  11  18  25    
   5  12  19  26    
   6  13  20  27    
</snippet></ROW><ROW><id>17913445</id><snippet>from collections import defaultdict

def ordered(data, N):
    edges = defaultdict()
    for v1, v2 in data:
        edges.setdefault(v1, []).append(v2)
        edges.setdefault(v2, []).append(v1)

    visited = [False] * N
    path = None
    for v in range(N):
        if not visited[v]:
            path = dfs(edges, visited, v)
            if path is not None: break
    if path is not None:
        return [[path[i], path[i + 1]] for i in range(len(path) - 1)]


def dfs(edges, visited, v1, vp=None):
    path = [v1]
    if visited[v1]: return path
    visited[v1] = True
    for v2 in edges[v1]:
        if v2 == vp: continue
        path_child = dfs(edges, visited, v2, v1)
        if path_child is not None: return path + path_child
    return None

data = [[0, 7], [1, 8], [2, 9], [3, 0], [4, 1], [5, 2], [6, 3], [4, 7], [8, 5], [9, 6]]
N = 10
ord = ordered(data, N)

[[0, 7], [7, 4], [4, 1], [1, 8], [8, 5], [5, 2], [2, 9], [9, 6], [6, 3], [3, 0]]
</snippet></ROW><ROW><id>17913501</id><snippet>StreamHandler</snippet></ROW><ROW><id>17913741</id><snippet>def run(core, actor, target, commandString):

    target = globalTarget 
    actor = globalActor 
</snippet></ROW><ROW><id>17913741</id><snippet>globalTarget = target
</snippet></ROW><ROW><id>17913819</id><snippet>from ttk import Progressbar
import Tkinter

class Example(Tkinter.Frame):
    def __init__(self, parent):
        Tkinter.Frame.__init__(self, parent)
        self.parent = parent
        self.initUI()

    def initUI(self):
        value_progress =50
        self.parent.title("Progressbar Thingymawhatsit")
        self.config(bg = '#F0F0F0')
        self.pack(fill = Tkinter.BOTH, expand = 1)
                #create canvas
        canvas = Tkinter.Canvas(self, relief = Tkinter.FLAT, background = "#D2D2D2",
                                            width = 400, height = 5)

        progressbar = Progressbar(canvas, orient=Tkinter.HORIZONTAL,
                                  length=400, mode="indeterminate",
                                  variable=value_progress,

                                  )
        # The first 2 create window argvs control where the progress bar is placed
        canvas.create_window(1, 1, anchor=Tkinter.NW, window=progressbar)
        canvas.grid()


def main():
    root = Tkinter.Tk()
    root.geometry('500x50+10+50')
    app = Example(root)
    app.mainloop()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17913909</id><snippet>print()</snippet></ROW><ROW><id>17914065</id><snippet># Open a local port 13000 that will map through jumpserver and 
# connect to finalserver on port 22
ssh -L 13000:10.1.2.3:22 username@151.121.121.121
# Then open an ssh session to localhost:13000 (which will forward to the
# finalserver.com and run your command)
ssh username@localhost -p 13000 'rpm -qa | grep package'
</snippet></ROW><ROW><id>17914134</id><snippet>scipy.interpolate.UnivariateSpline</snippet></ROW><ROW><id>17914134</id><snippet>x : (N,) array_like
    1-D array of independent input data. MUST BE INCREASING.
</snippet></ROW><ROW><id>17914134</id><snippet>s : float or None, optional
    Positive smoothing factor used to choose the number of knots.  Number
    of knots will be increased until the smoothing condition is satisfied:

    sum((w[i]*(y[i]-s(x[i])))**2,axis=0) &lt;= s

    If None (default), s=len(w) which should be a good value if 1/w[i] is
    an estimate of the standard deviation of y[i].  If 0, spline will
    interpolate through all data points.
</snippet></ROW><ROW><id>17914134</id><snippet>import scipy.interpolate as inter
import numpy as np
import pylab as plt

x = np.array([13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])
y = np.array([2.404070, 1.588134, 1.760112, 1.771360, 1.860087,
          1.955789, 1.910408, 1.655911, 1.778952, 2.624719,
          1.698099, 3.022607, 3.303135])
xx = np.arange(1,13.01,0.1)
s1 = inter.InterpolatedUnivariateSpline (x, y)
s1rev = inter.InterpolatedUnivariateSpline (x[::-1], y[::-1])
# Use a smallish value for s
s2 = inter.UnivariateSpline (x[::-1], y[::-1], s=0.1)
s2crazy = inter.UnivariateSpline (x[::-1], y[::-1], s=5e8)
plt.plot (x, y, 'bo', label='Data')
plt.plot (xx, s1(xx), 'k-', label='Spline, wrong order')
plt.plot (xx, s1rev(xx), 'k--', label='Spline, correct order')
plt.plot (xx, s2(xx), 'r-', label='Spline, fit')
# Uncomment to get the poor fit.
#plt.plot (xx, s2crazy(xx), 'r--', label='Spline, fit, s=5e8')
plt.minorticks_on()
plt.legend()
plt.xlabel('x')
plt.ylabel('y')
plt.show()
</snippet></ROW><ROW><id>17914345</id><snippet>def desc_cert(self, cr, uid, ids, field_name, field_args, context=None):
    obj = self.pool.get('purchase.order')
    pids = obj.search(cr, uid, [('sel_cert', '=', 'si')])
    val = self._get_product_available_func(('done'))
    if pids == 'si':
            return val
    return 10
</snippet></ROW><ROW><id>17914345</id><snippet>AttributeError: 'int' object has no attribute 'get'</snippet></ROW><ROW><id>17914345</id><snippet>def desc_cert(self, cr, uid, ids, field_name, field_args, context=None):
    obj = self.pool.get('purchase.order')
    pids = obj.search(cr, uid, [('sel_cert', '=', 'si')])
    val = self._get_product_available_func(('done'))
    if pids.lower() == 'si':
            return val
</snippet></ROW><ROW><id>17914404</id><snippet>metadata_name="annotations"</snippet></ROW><ROW><id>17914404</id><snippet>RangeSelection</snippet></ROW><ROW><id>17914404</id><snippet>RangeSelectionOverlay</snippet></ROW><ROW><id>17914450</id><snippet>position</snippet></ROW><ROW><id>17914450</id><snippet>oldPosition</snippet></ROW><ROW><id>17914450</id><snippet>position</snippet></ROW><ROW><id>17914450</id><snippet>oldPosition</snippet></ROW><ROW><id>17914450</id><snippet>position</snippet></ROW><ROW><id>17914450</id><snippet>oldPosition = self.position[:]
</snippet></ROW><ROW><id>17914450</id><snippet>oldPosition</snippet></ROW><ROW><id>17914450</id><snippet>position</snippet></ROW><ROW><id>17914769</id><snippet>tzinfo=&lt;UTC&gt;</snippet></ROW><ROW><id>17915097</id><snippet>#! /usr/bin/python3

class Character:
        class AbilityScoreOutOfBoundsException (Exception): pass

        def __init__ (self, name):
            self.name = name
            self.stats = {k: 1 for k in ['STR', 'DEX', 'WIS', 'INT'] }

        @property
        def strength (self): return self.stats ['STR']

        @property
        def dexterity (self): return self.stats ['DEX']

        @property
        def wisdom (self): return self.stats ['WIS']

        @property
        def intelligence (self): return self.stats ['INT']

        @strength.setter
        def strength (self, amount): self.setStat ('STR', amount)

        @wisdom.setter
        def wisdom (self, amount): self.setStat ('WIS', amount)

        @dexterity.setter
        def dexterity (self, amount): self.setStat ('DEX', amount)

        @intelligence.setter
        def intelligence (self, amount): self.setStat ('INT', amount)

        def setStat (self, which, amount):
            if amount &lt; 1: raise Character.AbilityScoreOutOfBoundsException ('Beware hero! Thou wert about to smite thyself.')
            if self.total + amount - self.stats [which] &gt; 30: raise Character.AbilityScoreOutOfBoundsException ('Beware hero! Thou shalt not grow too mighty.')
            self.stats [which] = amount

        @property
        def total (self): return sum (self.stats.values () )

        def __repr__ (self):
            return '{}\n{}'.format (self.name, '\n'.join ('{}{:&gt;4}'.format (which, self.stats [which] ) for which in ['STR', 'DEX', 'WIS', 'INT'] ) )

a = Character ('Daggeroth')
a.strength += 9
a.dexterity += 9
a.wisdom += 5
a.intelligence += 3
print (a)
</snippet></ROW><ROW><id>17915141</id><snippet>{inner_k: myfunc(inner_v)}</snippet></ROW><ROW><id>17915141</id><snippet>data = {outer_k: {inner_k: myfunc(inner_v) for inner_k, inner_v in outer_v.items()} for outer_k, outer_v in outer_dict.items()}
</snippet></ROW><ROW><id>17915445</id><snippet>content_obj.id</snippet></ROW><ROW><id>17915445</id><snippet>None</snippet></ROW><ROW><id>17915445</id><snippet>{% if content_obj.id %}
    &lt;a class="liker" href="{% url 'like' content_type content_obj.id 1 %}" rel="nofollow"&gt;I Like&lt;/a&gt;
{% endif %}
</snippet></ROW><ROW><id>17915445</id><snippet>content_obj</snippet></ROW><ROW><id>17915470</id><snippet>\uxxxx</snippet></ROW><ROW><id>17915470</id><snippet>U+9493</snippet></ROW><ROW><id>17915470</id><snippet>CJK UNIFIED IDEOGRAPH-9493</snippet></ROW><ROW><id>17915470</id><snippet>str = u"\u9493"
</snippet></ROW><ROW><id>17915540</id><snippet>canvas.create_line</snippet></ROW><ROW><id>17915540</id><snippet>draw.line</snippet></ROW><ROW><id>17915540</id><snippet>import Tkinter as tk
import Image,ImageDraw

class ImageGenerator:
    def __init__(self,parent,posx,posy,*kwargs):
        self.parent = parent
        self.posx = posx
        self.posy = posy
        self.sizex = 200
        self.sizey = 200
        self.b1 = "up"
        self.xold = None
        self.yold = None 
        self.drawing_area=tk.Canvas(self.parent,width=self.sizex,height=self.sizey)
        self.drawing_area.place(x=self.posx,y=self.posy)
        self.drawing_area.bind("&lt;Motion&gt;", self.motion)
        self.drawing_area.bind("&lt;ButtonPress-1&gt;", self.b1down)
        self.drawing_area.bind("&lt;ButtonRelease-1&gt;", self.b1up)
        self.button=tk.Button(self.parent,text="Done!",width=10,bg='white',command=self.save)
        self.button.place(x=self.sizex/7,y=self.sizey+20)
        self.button1=tk.Button(self.parent,text="Clear!",width=10,bg='white',command=self.clear)
        self.button1.place(x=(self.sizex/7)+80,y=self.sizey+20)

        self.image=Image.new("RGB",(200,200),(255,255,255))
        self.draw=ImageDraw.Draw(self.image)

    def save(self):
        filename = "temp.jpg"
        self.image.save(filename)

    def clear(self):
        self.drawing_area.delete("all")
        self.image=Image.new("RGB",(200,200),(255,255,255))
        self.draw=ImageDraw.Draw(self.image)

    def b1down(self,event):
        self.b1 = "down"

    def b1up(self,event):
        self.b1 = "up"
        self.xold = None
        self.yold = None

    def motion(self,event):
        if self.b1 == "down":
            if self.xold is not None and self.yold is not None:
                event.widget.create_line(self.xold,self.yold,event.x,event.y,smooth='true',width=3,fill='blue')
                self.draw.line(((self.xold,self.yold),(event.x,event.y)),(0,128,0),width=3)

        self.xold = event.x
        self.yold = event.y

if __name__ == "__main__":
    root=tk.Tk()
    root.wm_geometry("%dx%d+%d+%d" % (400, 400, 10, 10))
    root.config(bg='white')
    ImageGenerator(root,10,10)
    root.mainloop()
</snippet></ROW><ROW><id>17915572</id><snippet>(d, e, f)</snippet></ROW><ROW><id>17915572</id><snippet>(a, b, c)</snippet></ROW><ROW><id>17915572</id><snippet>v = (d, e, f)
        - sum((d, e, f) *. (a, b, c)) * (a, b, c) / sum((a, b, c) *. (a, b, c))
</snippet></ROW><ROW><id>17915572</id><snippet>*.</snippet></ROW><ROW><id>17915572</id><snippet>sum([x * y for x, y in zip([d, e, f], [a, b, c])])
</snippet></ROW><ROW><id>17915572</id><snippet>d * a + e * b + f * c
</snippet></ROW><ROW><id>17915572</id><snippet>(a, b, c) *. (a, b, c)</snippet></ROW><ROW><id>17915572</id><snippet>from math import sqrt

def dot_product(x, y):
    return sum([x[i] * y[i] for i in range(len(x))])

def norm(x):
    return sqrt(dot_product(x, x))

def normalize(x):
    return [x[i] / norm(x) for i in range(len(x))]

def project_onto_plane(x, n):
    d = dot_product(x, n) / norm(n)
    p = [d * normalize(n)[i] for i in range(len(n))]
    return [x[i] - p[i] for i in range(len(x))]
</snippet></ROW><ROW><id>17915572</id><snippet>p = project_onto_plane([3, 4, 5], [1, 2, 3])
</snippet></ROW><ROW><id>17915617</id><snippet>next == "left" or "Left"
</snippet></ROW><ROW><id>17915617</id><snippet>next == "left" or next == "Left"
</snippet></ROW><ROW><id>17915617</id><snippet>next in ["left", "Left"]
</snippet></ROW><ROW><id>17915617</id><snippet>X or True</snippet></ROW><ROW><id>17915617</id><snippet>#! /usr/bin/python3
from sys import exit

class Location:
    def __init__ (self, welcome, menu, choices):
        self.welcome = welcome
        self.choices = choices
        self.menu = menu

    def enter (self, *args):
        if not self.choices:
            print (args [0] )
            exit (0)
        print ('\n\n{}\n{}'.format ('*' * 20, self.welcome) )
        while True:
            print ()
            print (self.menu)
            print ('\n'.join ('{}: {}'.format (index + 1, text) for index, text in enumerate (choice [0] for choice in self.choices) ) )
            try:
                choice = int (input () )
                return self.choices [choice - 1] [1:]
            except: pass

class World:
    locations = {
        'Beginning': Location ('As you take way on to your adventure... You meet this strange man.\nHe tells you that he can not be trusted.\nHe tells you that the door on the right is going to be good. He also tells you that the left door will lead you to good as well. But you cannot trust him...', 'Which door do you pick?', [ ('Left', 'GoodDoor', [] ), ('Right', 'BadDoor', [] ) ] ),
        'GoodDoor': Location ('You seem to have chosen a door that has three distinct routes. You still do not know whether or not your choice of doors were correct... You hesitate to choose which route you take but you have to choose...', 'Which route do you choose?', [ ('Route 1', 'Finish', ['You are in heaven!'] ), ('Route 2', 'Desert', [] ), ('Route 3', 'Finish', ['You trip and die.'] ) ] ),
        'BadDoor': Location ('You enter this door and you see two routes, which one do you choose?', 'You choose from the left route or the right route.', [ ('Left', 'GoodDoor', [] ), ('Right', 'Finish', ['You ended in hell.'] ) ] ),
        'Finish': Location ('', '', [] ),
        'Desert': Location ('You walk into a desert and it\'s unbearably hot... You have two options... You stay here and hope that somebody will save you, or you keep walking... Which one do you choose?', 'Do you choose to stay or move?', [ ('Stay', 'Finish', ['You die of thirst'] ), ('Move', 'GoodDoor', [] ) ] )
        }

    @classmethod
    def enter (bananaphone):
        room = World.locations ['Beginning']
        params = []
        while True:
            room, params = room.enter (*params)
            room = World.locations [room]

World.enter ()
</snippet></ROW><ROW><id>17915854</id><snippet>from sys import stdout
from time import sleep

def show(word):
  for char in word:
    stdout.write(char)
    stdout.flush()
    sleep(1)
  for char in word:
    stdout.write('\b \b')
    stdout.flush()
    sleep(1)

show('hello')
</snippet></ROW><ROW><id>17915914</id><snippet>export VIRTUAL_ENV_DISABLE_PROMPT=1
</snippet></ROW><ROW><id>17915960</id><snippet>ASCII = ''.join(chr(x) for x in range(128))
</snippet></ROW><ROW><id>17915960</id><snippet>if c in ASCII:
    # c is an ASCII character

if c &lt;= '\x7f':
    # c is an ASCII character
</snippet></ROW><ROW><id>17915960</id><snippet>def is_ascii(s):
    """Returns True if a string is ASCII, False otherwise."""
    try:
        s.encode('ASCII')
        return True
    except UnicodeEncodeError:
        return False
</snippet></ROW><ROW><id>17916002</id><snippet>Main()</snippet></ROW><ROW><id>17916002</id><snippet>a = A()</snippet></ROW><ROW><id>17916002</id><snippet>a.x</snippet></ROW><ROW><id>17916002</id><snippet>if</snippet></ROW><ROW><id>17916002</id><snippet>eval(str)</snippet></ROW><ROW><id>17916002</id><snippet>3</snippet></ROW><ROW><id>17916002</id><snippet> 5
 3
</snippet></ROW><ROW><id>17916104</id><snippet>zip</snippet></ROW><ROW><id>17916104</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>17916104</id><snippet>from itertools import izip_longest

for row in izip_longest(*myDict.values(), fillvalue=''):
    ...
</snippet></ROW><ROW><id>17916193</id><snippet>slugify()</snippet></ROW><ROW><id>17916193</id><snippet>mystr = u'This is John'
</snippet></ROW><ROW><id>17916193</id><snippet>mystr = unicode('This is John')
&gt;&gt; u'This is John'
</snippet></ROW><ROW><id>17916223</id><snippet>"4V5x3"</snippet></ROW><ROW><id>17916223</id><snippet>34-|intersection(placements[x,y], dissmissed)|/(3400-|dismissed|)</snippet></ROW><ROW><id>17916223</id><snippet>placements[x,y]</snippet></ROW><ROW><id>17916223</id><snippet>&lt;(2,3a,3b,4,5)&gt;H&lt;X+1&gt;x&lt;Y&gt;</snippet></ROW><ROW><id>17916223</id><snippet>&lt;(2,3a,3b,4,5)&gt;V&lt;X&gt;x&lt;Y+1&gt;</snippet></ROW><ROW><id>17916223</id><snippet>&lt;(2,3a,3b,4,5)&gt;H&lt;X-(2,3,3,4,5)&gt;x&lt;Y&gt;</snippet></ROW><ROW><id>17916223</id><snippet>&lt;(2,3a,3b,4,5)&gt;V&lt;X&gt;x&lt;Y-(2,3,3,4,5)&gt;</snippet></ROW><ROW><id>17916223</id><snippet>2H&lt;X+-1&gt;x&lt;Y+(-2 to 1)&gt;</snippet></ROW><ROW><id>17916223</id><snippet>3aH&lt;X+-1&gt;x&lt;Y+(-3 to 1)&gt;</snippet></ROW><ROW><id>17916223</id><snippet>2V&lt;X+(-2 to 1)&gt;x&lt;Y+-1&gt;</snippet></ROW><ROW><id>17916223</id><snippet>3aV&lt;X+(-3 to 1)&gt;x&lt;Y+-1&gt;</snippet></ROW><ROW><id>17916223</id><snippet>|intersection(placements[x,y], dissmissed)|==33</snippet></ROW><ROW><id>17916223</id><snippet>placements[x,y]</snippet></ROW><ROW><id>17916240</id><snippet>reload</snippet></ROW><ROW><id>17916240</id><snippet>obj1 = Organization.objects(username=obj1.username).first()
obj1.descendants = [obj2, obj3]
obj1.save()


obj2 = Organization.objects(username=obj2.username).first()
obj2.descendants = [obj3]
obj2.save()
</snippet></ROW><ROW><id>17916240</id><snippet>save</snippet></ROW><ROW><id>17916240</id><snippet>to_dbref</snippet></ROW><ROW><id>17916240</id><snippet>obj1 = Organization(username='kousik')
print obj1.save()
# &lt;Organization: Organization object&gt; #obj1 created

obj2 = Organization(username='chowdhury', ancestors=[obj1.to_dbref()], parents=[obj1.to_dbref()])
print obj2.save()
# &lt;Organization: Organization object&gt; #obj2 created

obj3 = Organization(username='kchowdhury', ancestors=[obj1.to_dbref(), obj2.to_dbref()], parents=[obj2.to_dbref()])
print obj3.save()
# &lt;Organization: Organization object&gt; #obj3 creaed

obj1.descendants = [obj2.to_dbref(), obj3.to_dbref()]
print obj1.save()
# &lt;Organization: Organization object&gt; #obj1 updated

obj2.descendants = [obj3.to_dbref()]
print obj2.save()
# &lt;Organization: Organization object&gt; #obj2 updated
</snippet></ROW><ROW><id>17916976</id><snippet>cmd = "hadoop fs -ls /projectpath/ | grep ^d | grep -v done | head -1 | awk {'print $8'}"
p = sub.Popen(cmd,stdout=sub.PIPE,stderr=sub.PIPE, shell=True)
</snippet></ROW><ROW><id>17917050</id><snippet>namedtuple</snippet></ROW><ROW><id>17917050</id><snippet>verbose=True</snippet></ROW><ROW><id>17917050</id><snippet>&gt;&gt;&gt; Point = namedtuple('Point', "x y", verbose=True)
from builtins import property as _property, tuple as _tuple
from operator import itemgetter as _itemgetter
from collections import OrderedDict

class Point(tuple):
    'Point(x, y)'

    __slots__ = ()

    _fields = ('x', 'y')

    def __new__(_cls, x, y):
        'Create new instance of Point(x, y)'
        return _tuple.__new__(_cls, (x, y))

    @classmethod
    def _make(cls, iterable, new=tuple.__new__, len=len):
        'Make a new Point object from a sequence or iterable'
        result = new(cls, iterable)
        if len(result) != 2:
            raise TypeError('Expected 2 arguments, got %d' % len(result))
        return result

    def _replace(_self, **kwds):
        'Return a new Point object replacing specified fields with new values'
        result = _self._make(map(kwds.pop, ('x', 'y'), _self))
        if kwds:
            raise ValueError('Got unexpected field names: %r' % list(kwds))
        return result

    def __repr__(self):
        'Return a nicely formatted representation string'
        return self.__class__.__name__ + '(x=%r, y=%r)' % self

    @property
    def __dict__(self):
        'A new OrderedDict mapping field names to their values'
        return OrderedDict(zip(self._fields, self))

    def _asdict(self):
        '''Return a new OrderedDict which maps field names to their values.
           This method is obsolete.  Use vars(nt) or nt.__dict__ instead.
        '''
        return self.__dict__

    def __getnewargs__(self):
        'Return self as a plain tuple.  Used by copy and pickle.'
        return tuple(self)

    def __getstate__(self):
        'Exclude the OrderedDict from pickling'
        return None

    x = _property(_itemgetter(0), doc='Alias for field number 0')

    y = _property(_itemgetter(1), doc='Alias for field number 1')
</snippet></ROW><ROW><id>17917050</id><snippet>tuple</snippet></ROW><ROW><id>17917050</id><snippet>_fields</snippet></ROW><ROW><id>17917050</id><snippet>property</snippet></ROW><ROW><id>17917334</id><snippet>from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4, cm,landscape
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import Paragraph, Table, TableStyle, Image
from reportlab.lib.enums import TA_LEFT, TA_CENTER
from reportlab.lib import colors
from reportlab.lib.units import inch

a = Image("temp.jpg")
a.drawHeight = 2*inch
a.drawWidth = 2*inch
data=[['1',a],['3','4']]
c = canvas.Canvas("Reportlabtest.pdf", pagesize=landscape(A4))
table = Table(data, colWidths=200, rowHeights=50)
table.setStyle(TableStyle([
                           ('INNERGRID', (0,0), (-1,-1), 0.25, colors.black),
                           ('BOX', (0,0), (-1,-1), 0.25, colors.black),
                           ('BACKGROUND',(0,0),(-1,2),colors.lightgrey)
                           ]))
table.wrapOn(c, 200, 400)
table.drawOn(c,20,50)
c.save()
</snippet></ROW><ROW><id>17917380</id><snippet>pip install flask
</snippet></ROW><ROW><id>17917450</id><snippet>**Error that I get** - 
scrapy crawl Linkedin
**2013-07-29 11:37:10+0530 [Linkedin] DEBUG: Retrying &lt;GET http://www.linkedin.com/nhome/&gt; (failed 1 times): DNS lookup failed: address 'your.proxy.com' not found: [Errno -5] No address associated with hostname.**


**To see if the Name space was resolved, I tried -:**
nslookup www.linkedin.com #works
nslookup www.linkedin.com/uas/login # I think the depth of pages within a main website, does not resolve, and is normal right ?

Then I also tried to see if the error could have been due to Name Server not resolving and appended the Nameservers as below .
echo $http_proxy #gives http://username:password@your.proxy.com:80
</snippet></ROW><ROW><id>17917450</id><snippet>http://username:password@your.proxy.com:80</snippet></ROW><ROW><id>17917450</id><snippet>$ nslookup your.proxy.com
Server:         127.0.1.1
Address:        127.0.1.1#53

** server can't find your.proxy.com: NXDOMAIN
</snippet></ROW><ROW><id>17917450</id><snippet>$http_proxy</snippet></ROW><ROW><id>17917473</id><snippet>resetBoard</snippet></ROW><ROW><id>17917473</id><snippet>__init__</snippet></ROW><ROW><id>17917473</id><snippet>resetBoard()</snippet></ROW><ROW><id>17917473</id><snippet>resetBoard()</snippet></ROW><ROW><id>17917473</id><snippet>__init__</snippet></ROW><ROW><id>17918154</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>17918154</id><snippet>print "What are his odds of hitting?", ( 25.0 / 10.0 ) * 8 + 65, sys.stdout.write('%')
</snippet></ROW><ROW><id>17918154</id><snippet>None</snippet></ROW><ROW><id>17918154</id><snippet>print</snippet></ROW><ROW><id>17918154</id><snippet>%</snippet></ROW><ROW><id>17918154</id><snippet>print</snippet></ROW><ROW><id>17918154</id><snippet>stdout</snippet></ROW><ROW><id>17918154</id><snippet>None</snippet></ROW><ROW><id>17918154</id><snippet>%</snippet></ROW><ROW><id>17918154</id><snippet>print "What are his odds of hitting?", str(( 25.0 / 10.0 ) * 8 + 65) + '%'
</snippet></ROW><ROW><id>17918154</id><snippet>print "What are his odds of hitting? %.02f%%" % (( 25.0 / 10.0 ) * 8 + 65)
</snippet></ROW><ROW><id>17918154</id><snippet>print "What are his odds of hitting? {:.02f}%".format((25.0 / 10.0 ) * 8 + 65)
</snippet></ROW><ROW><id>17918154</id><snippet>'..' % ...</snippet></ROW><ROW><id>17918154</id><snippet>str.format()</snippet></ROW><ROW><id>17918162</id><snippet>pd.to_datetime(data['Deadline Time'], coerce=True)
</snippet></ROW><ROW><id>17918303</id><snippet>class BookForm(forms.ModelForm):
    class Meta:
        model = Book
        exclude = ('author',)
</snippet></ROW><ROW><id>17918303</id><snippet>class BookEditView(generic.UpdateView):
    model = Book
    form_class = BookForm
    ...
</snippet></ROW><ROW><id>17918505</id><snippet>0 14 * * SUN ./my_script.py</snippet></ROW><ROW><id>17918505</id><snippet>croniter</snippet></ROW><ROW><id>17918505</id><snippet>c = croniter.croniter("0 14,15,16 * * SUN")
print c.get_next(datetime.datetime) # will output 2013-08-04 14:00:00
</snippet></ROW><ROW><id>17918505</id><snippet>c = croniter.croniter("0 14 * * SUN")
while True:
    now = datetime.datetime.now()
    if now &gt; next_due_date:
        do_something()
        next_due_date = c.get_next(datetime.datetime)
        time.sleep(60 * 60 * 36)
    else:
      time.sleep(60 * 60 * 2) # sleep 2 hours
</snippet></ROW><ROW><id>17918763</id><snippet>pre_count = Article.objects.count()

# Your Logic

post_count = Article.objects.count()

self.assertEqual(post_count-pre_count, 1)
</snippet></ROW><ROW><id>17918763</id><snippet>from django.utils.decorators import method_decorator
from contextlib import contextmanager

def ExtendedTestCase(TestCase):

    @method_decorator(context_manager)
    def assertDifference(self, func, diff, message=None):
        " A Context Manager that performs an assert. "
        old_value = func()
        yield # `with` statement runs here. Roughly equivalent to ruby's blocks
        new_value = func()
        self.assertEqual(new_value-old_value, diff, message)

def ArticleTestCase(ExtendedTestCase):

    def test_article_creation(self):
        " Test that new articles can be created "
        with self.assertDifference(Article.count, 1):
             self.client.post("/article/new/", {
                 "title": "My First Django Article",
                 "content": "Boring Technical Content",
             })
</snippet></ROW><ROW><id>17918823</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>17918823</id><snippet>SET PYTHONIOENCODING=cp936
windows_prn_utf8.py &gt; 1.txt
</snippet></ROW><ROW><id>17918912</id><snippet>from itertools import product    

[map(sum, zip(*[v, y])) for y in product(o, repeat=2)]
</snippet></ROW><ROW><id>17918912</id><snippet>[map(sum, zip(v, y)) for y in product(o, repeat=len(v))]
</snippet></ROW><ROW><id>17919185</id><snippet>str.join</snippet></ROW><ROW><id>17919185</id><snippet>values = [" : ".join(x) for x in zip(labels,results)]
</snippet></ROW><ROW><id>17919185</id><snippet>zip</snippet></ROW><ROW><id>17919185</id><snippet>values = zip(labels,results)

{% for label, text in values %}
&lt;ul&gt;
&lt;li&gt; {{ label }} : {{ text }}&lt;/li&gt;
&lt;/ul&gt;
</snippet></ROW><ROW><id>17919265</id><snippet>None</snippet></ROW><ROW><id>17919265</id><snippet>null</snippet></ROW><ROW><id>17919265</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps({'os-start': None})
'{"os-start": null}'
&gt;&gt;&gt; json.loads('{"os-start": null}')
{u'os-start': None}
</snippet></ROW><ROW><id>17919714</id><snippet>Choice</snippet></ROW><ROW><id>17919714</id><snippet>Poll</snippet></ROW><ROW><id>17919714</id><snippet>Choice.poll</snippet></ROW><ROW><id>17919714</id><snippet>{
    "pk": 4, 
    "model": "polls.Choice", 
    "fields": {
        "votes": 0, 
        "poll": 2, 
        "choice_text": "Meh."
    }
}, 
{
    "pk": 5, 
    "model": "polls.Choice", 
    "fields": {
        "votes": 0, 
        "poll": 2, 
        "choice_text": "Not so good."
    }
}
</snippet></ROW><ROW><id>17919892</id><snippet>fig=plt.figure()
ax = fig.add_subplot(111)

years = [2004, 2005, 2006, 2007]

sales = [1000, 1170, 660, 1030]


ax.plot(years, sales)
ax.xaxis.set_major_formatter(matplotlib.ticker.FormatStrFormatter('%d'))

plt.show()
</snippet></ROW><ROW><id>17920032</id><snippet>with conn:</snippet></ROW><ROW><id>17920032</id><snippet>with</snippet></ROW><ROW><id>17920032</id><snippet>conn.commit()</snippet></ROW><ROW><id>17920178</id><snippet>in</snippet></ROW><ROW><id>17920178</id><snippet>if element in thetuple:
    #whatever you want to do.
</snippet></ROW><ROW><id>17920521</id><snippet>def replace_between(text, begin, end, alternative=''):
    middle = text.split(begin, 1)[1].split(end, 1)[0]
    return text.replace(middle, alternative)
</snippet></ROW><ROW><id>17920700</id><snippet>from contacts.models import Contact  # import model Contact
...
class ContactTests(TestCase):  # start a test case
    """Contact model tests."""

    def test_str(self):  # start one test

        contact = Contact(first_name='John', last_name='Smith')  # create a Contact object with 2 params like that

        self.assertEquals(  # check if str(contact) == 'John Smith'
            str(contact),  
            'John Smith',
        )
</snippet></ROW><ROW><id>17920700</id><snippet>def assertEquals(var1, var2):
    if var1 == var2:
        return True
    else:
        return False
</snippet></ROW><ROW><id>17920736</id><snippet>tearoff</snippet></ROW><ROW><id>17920736</id><snippet>fileMenu</snippet></ROW><ROW><id>17920736</id><snippet>False</snippet></ROW><ROW><id>17920736</id><snippet>0</snippet></ROW><ROW><id>17920736</id><snippet>fileMenu = Menu(menubar, tearoff=False)
</snippet></ROW><ROW><id>17920984</id><snippet>Matrix = [[""] for x in range(2)]

for x in range (2):
    Matrix[x] = input().split(" ")
print(Matrix)
</snippet></ROW><ROW><id>17921064</id><snippet>def func_(collection1):
    data = db.runCommand('aggregate', collection1, pipeline=pipe)
</snippet></ROW><ROW><id>17921115</id><snippet>del r</snippet></ROW><ROW><id>17921115</id><snippet>calldata(r)</snippet></ROW><ROW><id>17921115</id><snippet>cleanref = calldata(r)
del r
</snippet></ROW><ROW><id>17921115</id><snippet>del ref</snippet></ROW><ROW><id>17921573</id><snippet>collections.Counter()</snippet></ROW><ROW><id>17921573</id><snippet>from collections import Counter, defaultdict

def findpattern():
    frequencies = defaultdict(Counter)

    for line in syslog:
        if re.search(r"regexforhostname",line):
            hostname= line.strip()[16:27]
            frequencies[hostname].update(f for f in word if f in line)

    return frequencies

result = findpattern()
for device, frequencies in result.iteritems():
    print '{}: {}'.format(
        device, 
        ', '.join(['{}x {}'.format(c, f) for f, c in frequencies.most_common()]))
</snippet></ROW><ROW><id>17921636</id><snippet>session.query()</snippet></ROW><ROW><id>17921636</id><snippet>results = db.session.query(User, last_entry).outerjoin(last_entry, User.email == last_entry.c.email)
</snippet></ROW><ROW><id>17921636</id><snippet>results = session.query(User).outerjoin(last_entry, User.email == last_entry.c.email).add_entity(last_entry)
</snippet></ROW><ROW><id>17921905</id><snippet>self.__name__</snippet></ROW><ROW><id>17921905</id><snippet>.__class__</snippet></ROW><ROW><id>17921905</id><snippet>make_thing()</snippet></ROW><ROW><id>17922114</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>17922114</id><snippet>virtualenv -p /usr/bin/python2.7
</snippet></ROW><ROW><id>17922122</id><snippet>import urllib
urllib.urlretrieve ("http://8.8.8.8/t1.txt", "t1.txt")
</snippet></ROW><ROW><id>17922191</id><snippet>location_info</snippet></ROW><ROW><id>17922191</id><snippet>line[0:5]</snippet></ROW><ROW><id>17922191</id><snippet>line[:5]</snippet></ROW><ROW><id>17922191</id><snippet>line</snippet></ROW><ROW><id>17922191</id><snippet>csv.DictReader()</snippet></ROW><ROW><id>17922191</id><snippet>csv.DictReader</snippet></ROW><ROW><id>17922191</id><snippet>location_info = namedtuple('location_info', 'NAME, DATE, TIME, LAT, LON, DESCRIPTION')
input_filename = path
output_filename = "mapppp.kml"

with open(input_filename, 'r') as input_file:
    csv_reader = csv.reader(input_file, delimiter=';')
</snippet></ROW><ROW><id>17922341</id><snippet>self.answer</snippet></ROW><ROW><id>17922341</id><snippet>class QuadEq(object):
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def solve_quad_eq(self):
        self.answer = ("this", "that")
        return self.answer

    def show_result(self):
        print self.answer


eq = QuadEq(1,2,3)

eq.solve_quad_eq()
eq.show_result()
</snippet></ROW><ROW><id>17922341</id><snippet>eq</snippet></ROW><ROW><id>17922341</id><snippet>QuadEq</snippet></ROW><ROW><id>17922341</id><snippet>solve_quad_eq</snippet></ROW><ROW><id>17922341</id><snippet>solve</snippet></ROW><ROW><id>17922341</id><snippet>0</snippet></ROW><ROW><id>17922341</id><snippet>solve</snippet></ROW><ROW><id>17922341</id><snippet>self.answer</snippet></ROW><ROW><id>17922341</id><snippet>class Eq(object):
    def __init__(self):
        self.answer = None # this should be calles "roots", no?

    def roots(self):
        if self.answer is None:
            self.solve()

        return self.answer

class QuadEq(Eq):
    def __init__(self, a, b, c):
        Eq.__init__(self)

        self.a = a
        self.b = b
        self.c = c

    def solve(self):
        self.answer = ("this", "that")
        return 2

eq = QuadEq(1,2,3)
print(eq.roots())
</snippet></ROW><ROW><id>17922341</id><snippet>class OtherEq(Eq):
    def __init__(self, a, b, c):
        Eq.__init__(self)

        self.a = a
        self.b = b
        self.c = c

    def solve(self):
        self.answer = ( "it", )
        return 1
</snippet></ROW><ROW><id>17922341</id><snippet>eq = OtherEq(1,2,3)
print(eq.roots())
</snippet></ROW><ROW><id>17922364</id><snippet>filter()</snippet></ROW><ROW><id>17922364</id><snippet>map()</snippet></ROW><ROW><id>17922364</id><snippet>MyList</snippet></ROW><ROW><id>17922364</id><snippet>list</snippet></ROW><ROW><id>17922364</id><snippet>map()</snippet></ROW><ROW><id>17922364</id><snippet>filter()</snippet></ROW><ROW><id>17922364</id><snippet>map()</snippet></ROW><ROW><id>17922364</id><snippet>MyList</snippet></ROW><ROW><id>17922364</id><snippet>filter()</snippet></ROW><ROW><id>17922364</id><snippet>tuple()</snippet></ROW><ROW><id>17922364</id><snippet>str()</snippet></ROW><ROW><id>17922364</id><snippet>filter()</snippet></ROW><ROW><id>17922364</id><snippet>map()</snippet></ROW><ROW><id>17922364</id><snippet>filter()</snippet></ROW><ROW><id>17922385</id><snippet>replace()</snippet></ROW><ROW><id>17922385</id><snippet>text</snippet></ROW><ROW><id>17922385</id><snippet>&gt;&gt;&gt; text = "taj mahal is in india"
&gt;&gt;&gt; my_dict = { 'taj mahal':'url1', 'india':'url2' }
&gt;&gt;&gt; for key, value in my_dict.iteritems():
...     text = text.replace(key, value)
... 
&gt;&gt;&gt; text
'url1 is in url2'
</snippet></ROW><ROW><id>17922385</id><snippet>&gt;&gt;&gt; text = "taj mahal is in india"
&gt;&gt;&gt; for key, value in my_dict.iteritems():
...     text = text.replace(key, '&lt;a href="%s"&gt;key&lt;/a&gt;' % value)
... 
&gt;&gt;&gt; text
'&lt;a href="url1"&gt;key&lt;/a&gt; is in &lt;a href="url2"&gt;key&lt;/a&gt;'
</snippet></ROW><ROW><id>17922385</id><snippet>text</snippet></ROW><ROW><id>17922385</id><snippet>safe</snippet></ROW><ROW><id>17922385</id><snippet>{{text|safe}}
</snippet></ROW><ROW><id>17922516</id><snippet>from collections import defaultdict

lookup = defaultdict(dict)
lookup['name']['John'] = 1
lookup['name']['Jane'] = 2
lookup['name']['Joe'] = 3
lookup['gender']['Male'] = 1
lookup['gender']['Female'] = 2
lookup['country']['Japan'] = "jp"
lookup['country']['China'] = "ch"

print lookup['name']['Jane']
print lookup['gender']['Female']
print lookup['country']['China']
</snippet></ROW><ROW><id>17922529</id><snippet>    self.fname = '{0}.{1}.{2}'.format(self.start_url[12:], time.time(),'txt')
    logfname = '{0}.{1}.{2}'.format(self.start_url[12:], time.time(),'log')
</snippet></ROW><ROW><id>17922608</id><snippet>syncdb</snippet></ROW><ROW><id>17922608</id><snippet>drop table polls_choice;
</snippet></ROW><ROW><id>17923132</id><snippet>main_template.pt</snippet></ROW><ROW><id>17923132</id><snippet>&lt;tal:add_x_ua_compatible_header define="dummyresult python:request.response.setHeader('X-UA-Compatible', 'IE=edge,chrome=1')" /&gt;
</snippet></ROW><ROW><id>17923255</id><snippet>import extension</snippet></ROW><ROW><id>17923255</id><snippet>from widget import extension
</snippet></ROW><ROW><id>17923255</id><snippet>from . import extension
</snippet></ROW><ROW><id>17923255</id><snippet>widget</snippet></ROW><ROW><id>17923361</id><snippet>Spreadsheet</snippet></ROW><ROW><id>17923361</id><snippet>FileField</snippet></ROW><ROW><id>17923361</id><snippet>request.FILES</snippet></ROW><ROW><id>17923361</id><snippet>class Spreadsheet(models.Model):
    file = models.FileField(upload_to="directory/relative/to/MEDIA_ROOT/")
    other_field = ...
    etc.

class SpreadsheetForm(forms.ModelForm):
    class Meta:
        model = Spreadsheet
        fields = ['file', 'other_field', 'etc.']

def spreadsheet_form(request, id=None);
    if is_admin_user(request):
        instance = get_object_or_404(Spreadsheet, id=id) if id is not None else None
        form = SpreadsheetForm(request.POST or None, request.FILES or None, instance=instance)
        if form.is_valid():
            spreadsheet = form.save()
        return redirect('/spreadsheets/')
    return render_to_response("pages/spreadsheet_form.html", {"form": form,"id":id},context_instance=RequestContext(request))
else:
    return redirect('/', False)
</snippet></ROW><ROW><id>17923569</id><snippet>sudo yum install pylint</snippet></ROW><ROW><id>17923569</id><snippet>pip install -i http://f.pypi.python.org/simple pylint</snippet></ROW><ROW><id>17923569</id><snippet>-i</snippet></ROW><ROW><id>17923707</id><snippet>P</snippet></ROW><ROW><id>17923707</id><snippet>P(inf &lt; area &lt; sup) = cdf(sup) - cdf(inf)</snippet></ROW><ROW><id>17923707</id><snippet>E[x] = sum(x.P(x))
</snippet></ROW><ROW><id>17923996</id><snippet>ys = density(np.arange(9))
bb = np.argmax(ys)
aa = ys[bb]
</snippet></ROW><ROW><id>17923996</id><snippet>aa</snippet></ROW><ROW><id>17923996</id><snippet>bb</snippet></ROW><ROW><id>17923996</id><snippet>x</snippet></ROW><ROW><id>17923996</id><snippet>x-value</snippet></ROW><ROW><id>17923996</id><snippet>xs = np.linspace(0,8,200)
ys = density(xs)
index = np.argmax(ys)
max_y = ys[index]
max_x = xs[index]
</snippet></ROW><ROW><id>17924282</id><snippet>import matplotlib as mpl
mpl.use('WXAgg')
import matplotlib.backends.backend_wxagg as mwx

fig = mpl.figure.Figure()
canvas = mwx.FigureCanvasWxAgg(panel, -1, fig)
ax = fig.add_subplot(1, 1, 1)
ax.plot(...)
canvas.draw()
</snippet></ROW><ROW><id>17924417</id><snippet>from fabric.api import *

env.hosts = ['123.456.789.101']
env.user = 'John'
env.key_filename = '/Users/John/.ssh/google_compute_engine'
env.forward_agent = True

def update():
  '''
  update workers code
  '''
  with cd('~/myrepo'):
      # pull changes
      print colors.cyan('Pulling changes...')
      run('git pull origin master')
</snippet></ROW><ROW><id>17924533</id><snippet>alice = Person(eye_colour="blue",hair_colour="ginger")
bob = Person(eye_colour="brown",hair_colour="black")
</snippet></ROW><ROW><id>17924533</id><snippet>print(alice.eye_colour)
bob.hair_colour = "pink"
print(bob.hair_colour)
</snippet></ROW><ROW><id>17924533</id><snippet>txt = urwid.Text(('banner', u" Hello World "), align='center')</snippet></ROW><ROW><id>17924533</id><snippet>txt</snippet></ROW><ROW><id>17924533</id><snippet>('banner', u" Hello World")</snippet></ROW><ROW><id>17924533</id><snippet>align</snippet></ROW><ROW><id>17924533</id><snippet>import urwid</snippet></ROW><ROW><id>17924663</id><snippet>websocket()</snippet></ROW><ROW><id>17924663</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;meta charset="iso-8859-1"&gt;
&lt;script src="/src/brython.js"&gt;&lt;/script&gt;

&lt;script type="text/python3"&gt;
def on_open():
    # Web Socket is connected, send data using send()
    data = doc["data"].value
    if data:
        ws.send(data)
        alert("Message is sent")

def on_message(evt):
    # message received from server
    alert("Message received : %s" %evt.data)

def on_close(evt):
    # websocket is closed
    alert("Connection is closed")

ws = None
def _test():
    global ws
    # open a web socket
    ws = websocket("wss://echo.websocket.org")
    # attach functions to web sockets events
    ws.on_open = on_open
    ws.on_message = on_message
    ws.on_close= on_close

def close_connection():
    ws.close()
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython(1)"&gt;
&lt;input id="data"&gt;
&lt;button onclick="_test()"&gt;Run WebSocket&lt;/button&gt;
&lt;p&gt;&lt;button onclick="close_connection()"&gt;Close connection&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>17925040</id><snippet>bw_method</snippet></ROW><ROW><id>17925040</id><snippet>density = kde.gaussian_kde(data)
density.covariance_factor = density.silverman_factor
density._compute_covariance()
</snippet></ROW><ROW><id>17925040</id><snippet>kde.gaussian_kde(data, bw_method='silverman')</snippet></ROW><ROW><id>17925040</id><snippet>import numpy as np
import scipy.stats as stats

data = ([1.5] * 7 + [2.5] * 2 + [3.5] * 8
        + [4.5] * 3 + [5.5] * 1 + [6.5] * 8)
x = np.linspace(0., 8, 100)

density = stats.gaussian_kde(data)
density.covariance_factor = density.silverman_factor
density._compute_covariance()
workaround = density(x)

density = stats.gaussian_kde(data, bw_method='silverman')
answer = density(x)

assert np.allclose(workaround, answer)
</snippet></ROW><ROW><id>17925040</id><snippet>bw_method</snippet></ROW><ROW><id>17925040</id><snippet>&gt;&gt;&gt; import scipy
&gt;&gt;&gt; scipy.__version__
'0.9.0'
&gt;&gt;&gt; import scipy.stats.kde as kde
&gt;&gt;&gt; density = kde.gaussian_kde(data, bw_method='silverman')
TypeError: __init__() got an unexpected keyword argument 'bw_method'
</snippet></ROW><ROW><id>17925047</id><snippet>updated = Votes.objects(pizza=Spicy, 
                        vote=FiveStar, 
                        nin__voters=Rozza).update(push__voters=Rozza)
</snippet></ROW><ROW><id>17925047</id><snippet>upsert</snippet></ROW><ROW><id>17925047</id><snippet>updated = Votes.objects(pizza=Spicy, 
                        vote=FiveStar, 
                        upsert=True).update(addToSet__voters=Rozza)
</snippet></ROW><ROW><id>17925201</id><snippet>json.dumps(object, sort_keys=True,indent=4, separators=(',', ': '), 
           default=lambda o: {'machines' if k == '_machines' else k: v for k, v in o.__dict__.iteritems()})
</snippet></ROW><ROW><id>17925201</id><snippet>def serialize_custom_object(o):
    res = o.__dict__.copy()
    res['machines'] = res['_machines']
    del res['_machines']
    return res

json.dumps(object, sort_keys=True,indent=4, separators=(',', ': '), 
           default=serialize_custom_object)
</snippet></ROW><ROW><id>17925201</id><snippet>serialize_custom_object()</snippet></ROW><ROW><id>17925309</id><snippet>&gt;&gt;&gt; var = 'insert text here'
&gt;&gt;&gt; "hello {}".format(var)
'hello insert text here'
</snippet></ROW><ROW><id>17925836</id><snippet>ipython locate profile</snippet></ROW><ROW><id>17925836</id><snippet>startup</snippet></ROW><ROW><id>17926309</id><snippet>arr</snippet></ROW><ROW><id>17926309</id><snippet>(a, b, c)</snippet></ROW><ROW><id>17926309</id><snippet>a = aa*aaa</snippet></ROW><ROW><id>17926309</id><snippet>b = bb*bbb</snippet></ROW><ROW><id>17926309</id><snippet>a*b</snippet></ROW><ROW><id>17926309</id><snippet>(aaa, bbb, C)</snippet></ROW><ROW><id>17926309</id><snippet>a, b, c = 9, 9, 3
aaa, bbb = 3, 3
arr = np.arange(a*b*c).reshape(a, b, c)

arr_view = arr.reshape(a//aaa, aaa, b//bbb, bbb, c)
</snippet></ROW><ROW><id>17926309</id><snippet>arr_grid = np.swapaxes(arr_view, 1, 2).reshape(-1, aaa, bbb, c)
</snippet></ROW><ROW><id>17926309</id><snippet>arr_view = np.swapaxes(arr_view, 1, 2)
arr_grid = [arr_view[j] for j in zip(*np.unravel_index(np.arange(a*b//aaa//bbb),
                                                       (a//aaa, b//bbb)))]
</snippet></ROW><ROW><id>17926648</id><snippet>confirm_links_html = '&lt;a href="/confirm/"&gt;Confirm&lt;/a&gt; &lt;a href="/deny/"&gt;Deny&lt;/a&gt;'
msg = EmailMessage('This is the title',  confirm_links, to=['youremail@gmail.com'])
msg.content_subtype = "html"
</snippet></ROW><ROW><id>17926648</id><snippet>login_required</snippet></ROW><ROW><id>17926782</id><snippet>$ sudo apt-get build-dep python-scipy
</snippet></ROW><ROW><id>17926782</id><snippet>python-scipy</snippet></ROW><ROW><id>17926935</id><snippet>a</snippet></ROW><ROW><id>17926935</id><snippet>||</snippet></ROW><ROW><id>17926935</id><snippet>(b&amp;c)</snippet></ROW><ROW><id>17926935</id><snippet>b</snippet></ROW><ROW><id>17926935</id><snippet>&amp;</snippet></ROW><ROW><id>17926935</id><snippet>c</snippet></ROW><ROW><id>17926935</id><snippet>b&amp;c</snippet></ROW><ROW><id>17926935</id><snippet>Node</snippet></ROW><ROW><id>17926935</id><snippet>Node</snippet></ROW><ROW><id>17926935</id><snippet>evaluate</snippet></ROW><ROW><id>17926935</id><snippet>a</snippet></ROW><ROW><id>17926935</id><snippet>b</snippet></ROW><ROW><id>17926935</id><snippet>c</snippet></ROW><ROW><id>17926935</id><snippet>d['a']</snippet></ROW><ROW><id>17926935</id><snippet>d['b']</snippet></ROW><ROW><id>17926935</id><snippet>d['c']</snippet></ROW><ROW><id>17926935</id><snippet>OR</snippet></ROW><ROW><id>17926935</id><snippet>AND</snippet></ROW><ROW><id>17926935</id><snippet>_and</snippet></ROW><ROW><id>17926935</id><snippet>_or</snippet></ROW><ROW><id>17926989</id><snippet>&lt;div class="lead-value"&gt;80.0&lt;/div&gt;
&lt;div class="lead-value"&gt;100.0&lt;/div&gt;
&lt;div class="lead-value"&gt;120.0&lt;/div&gt;
&lt;div class="lead-value"&gt;140.0&lt;/div&gt;
</snippet></ROW><ROW><id>17926989</id><snippet>&gt;&gt;&gt;inf = open("example.html") 
&gt;&gt;&gt;content = inf.read()
&gt;&gt;&gt;inf.close()
&gt;&gt;&gt;soup = BeautifulSoup(content)
&gt;&gt;&gt;soup.findall('div',{'class':'lead-value'})
[&lt;div class="lead-value"&gt;80.0&lt;/div&gt;, &lt;div class="lead-value"&gt;100.0&lt;/div&gt;, &lt;div class="lead-value"&gt;120.0&lt;/div&gt;, &lt;div class="lead-value"&gt;140.0&lt;/div&gt;]
&gt;&gt;&gt;blocks = soup.findall('div',{'class':'lead-value'}) 
&gt;&gt;&gt;print blocks[1].string
100.0
</snippet></ROW><ROW><id>17927074</id><snippet>enumerate()</snippet></ROW><ROW><id>17927074</id><snippet>voting_dict</snippet></ROW><ROW><id>17927074</id><snippet>total_set</snippet></ROW><ROW><id>17927074</id><snippet>def find_average_record(sen_set, voting_dict):
    count = len(sen_set)
    total_set = voting_dict[sen_set.pop()][:]

    for senator in sen_set:
        for i, vote in enumerate(voting_dict[senator]):
            total_set[i] += vote

    return [x/count for x in total_set]
</snippet></ROW><ROW><id>17927074</id><snippet>sum()</snippet></ROW><ROW><id>17927074</id><snippet>zip()</snippet></ROW><ROW><id>17927074</id><snippet>def find_average_record(sen_set, voting_dict):
    count = len(sen_set)
    return [sum(col) / count for col in zip(*(voting_dict[sen] for sen in sen_set))]
</snippet></ROW><ROW><id>17927074</id><snippet>&gt;&gt;&gt; find_average_record({'Fox-Epstein', 'Ravella'}, voting_dict) 
[-0.5, -0.5, 0.0]
</snippet></ROW><ROW><id>17927074</id><snippet>voting_dict</snippet></ROW><ROW><id>17927376</id><snippet>conn.commit()
</snippet></ROW><ROW><id>17927590</id><snippet>sys.argv</snippet></ROW><ROW><id>17927590</id><snippet>C</snippet></ROW><ROW><id>17927590</id><snippet>argc,argv</snippet></ROW><ROW><id>17927590</id><snippet>$ python myprog.py 1 2 1 1 2 4
</snippet></ROW><ROW><id>17927590</id><snippet>import sys
print [int(x) for x in sys.argv[1:]]
</snippet></ROW><ROW><id>17927590</id><snippet>sys.argv</snippet></ROW><ROW><id>17927590</id><snippet>argv[0]</snippet></ROW><ROW><id>17927590</id><snippet>C</snippet></ROW><ROW><id>17927590</id><snippet>if __name__ == '__main__':
    MyFunction([int(x) for x in sys.argv[1:]])
</snippet></ROW><ROW><id>17927590</id><snippet>echo 1 2 1 1 2 4 | python myprog.py 
</snippet></ROW><ROW><id>17927590</id><snippet>$  python myprog.py &lt;&lt; woof
&gt; 1
&gt; 2
&gt; 1
&gt; 1
&gt; 2
&gt; 4
&gt; woof
</snippet></ROW><ROW><id>17927636</id><snippet>~/.pip 
~/tmp
</snippet></ROW><ROW><id>17927636</id><snippet>--download-cache</snippet></ROW><ROW><id>17927636</id><snippet>virtualenv</snippet></ROW><ROW><id>17927636</id><snippet>sudo pip install</snippet></ROW><ROW><id>17927636</id><snippet>python-pip |      1.1-3 | http://ftp.us.debian.org/debian/ wheezy/main Sources
</snippet></ROW><ROW><id>17927636</id><snippet>1.4</snippet></ROW><ROW><id>17927636</id><snippet>apt-cache madison &lt;package&gt;</snippet></ROW><ROW><id>17927636</id><snippet>madison</snippet></ROW><ROW><id>17927636</id><snippet>  -i URL, --index-url=URL, --pypi-url=URL
                        Base URL of Python Package Index (default
                        http://pypi.python.org/simple/)
</snippet></ROW><ROW><id>17927636</id><snippet>ignore</snippet></ROW><ROW><id>17927636</id><snippet>  -I, --ignore-installed
                        Ignore the installed packages (reinstalling instead)
</snippet></ROW><ROW><id>17928014</id><snippet>lst[start:end] = some_seq</snippet></ROW><ROW><id>17928014</id><snippet>start</snippet></ROW><ROW><id>17928014</id><snippet>end - 1</snippet></ROW><ROW><id>17928014</id><snippet>lst[n:n] = sequence</snippet></ROW><ROW><id>17928014</id><snippet>n</snippet></ROW><ROW><id>17928049</id><snippet>list = ['State start_ping_3\n{\n   \t// send ping\n\n\tAssign addr Ping_RemoteAddr3;\n\tAssign pingParams Ping_Parameters3;\n\n\tBuild Out GUE_startCommand;\n\tAssign Out.ref\t11;\n\t//Assign Out.command\t"/ercom/bundles/startPing.sh -I %pdn_add% %pingParams% %addr%";\n\tCase(PDNType = 2) // IPv6\n\t{\n\t\tAssign Out.command\t"$BUNDLE_BIN_PATH/ping6 -I %pdn_add% %pingParams% %addr%";\n\t}\n\tDefaultCase(PDNType)\n\t{\n\t\tAssign Out.command\t"$BUNDLE_BIN_PATH/ping -I %pdn_add% %pingParams% %addr%"; // -w 8: 8sec timeout then exit ping\n\t}\n\tSend Out To\tUE;\n\tAdd ping_traffic3 1;\n\t\n\tIf (_ActivateEvents&gt;=1) {Log "Start Ping 3";}\n\tReturn;\n}']
print list[0]
</snippet></ROW><ROW><id>17928215</id><snippet>try:
    from Tkinter import *
except ImportError:
    from tkinter import *

def print_entry_value(*args):
    print(v.get())

root = Tk()
v = StringVar()
v.trace('w', print_entry_value)
e = Entry(root, textvariable=v)
e.pack()
root.mainloop()
</snippet></ROW><ROW><id>17928270</id><snippet>body_bytes = sys.getsizeof(body)
headers['Content-Length'] = body_bytes
</snippet></ROW><ROW><id>17928270</id><snippet>sys.getsizeof</snippet></ROW><ROW><id>17928270</id><snippet>requests</snippet></ROW><ROW><id>17928270</id><snippet>Content-Length</snippet></ROW><ROW><id>17928270</id><snippet>req = requests.post(url, data=json.dumps(body), headers=headers)
</snippet></ROW><ROW><id>17928584</id><snippet>&amp;</snippet></ROW><ROW><id>17928584</id><snippet>X[condition &amp; (distance_X &lt; distance_Y)] = ...
Y[condition &amp; (distance_Y &lt; distance_X)] = ...
</snippet></ROW><ROW><id>17928716</id><snippet>N</snippet></ROW><ROW><id>17928716</id><snippet>import numpy as np
from numpy.random import rand

def pylu3d(A):
    N = A.shape[1]
    for j in xrange(N-1):
        for i in xrange(j+1,N):
            #change to L
            A[:,i,j] /= A[:,j,j]
            #change to U
            A[:,i,j+1:] -= A[:,i,j:j+1] * A[:,j,j+1:]

def pylusolve(A, B):
    N = A.shape[1]
    for j in xrange(N-1):
        for i in xrange(j+1,N):
            B[:,i] -= A[:,i,j] * B[:,j]
    for j in xrange(N-1,-1,-1):
        B[:,j] /= A[:,j,j]
        for i in xrange(j):
            B[:,i] -= A[:,i,j] * B[:,j]

#usage
A = rand(1000000,3,3)
b = rand(3)
b = np.tile(b,(1000000,1))
pylu3d(A)
# A has been replaced with the LU decompositions
pylusolve(A, b)
# b has been replaced to the solutions of
# A[i] x = b[i] for each A[i] and b[i]
</snippet></ROW><ROW><id>17928716</id><snippet>pylu3d</snippet></ROW><ROW><id>17928716</id><snippet>N</snippet></ROW><ROW><id>17928716</id><snippet>N</snippet></ROW><ROW><id>17928716</id><snippet>pylusolve</snippet></ROW><ROW><id>17928716</id><snippet>M</snippet></ROW><ROW><id>17928716</id><snippet>N</snippet></ROW><ROW><id>17928716</id><snippet>b</snippet></ROW><ROW><id>17928716</id><snippet>b</snippet></ROW><ROW><id>17928716</id><snippet>M</snippet></ROW><ROW><id>17928716</id><snippet>from numpy cimport ndarray as ar
cimport cython

@cython.boundscheck(False)
@cython.wraparound(False)
def lu3d(ar[double,ndim=3] A):
    cdef int n, i, j, k, N=A.shape[0], h=A.shape[1], w=A.shape[2]
    for n in xrange(N):
        for j in xrange(h-1):
            for i in xrange(j+1,h):
                #change to L
                A[n,i,j] /= A[n,j,j]
                #change to U
                for k in xrange(j+1,w):
                    A[n,i,k] -= A[n,i,j] * A[n,j,k]

@cython.boundscheck(False)
@cython.wraparound(False)
def lusolve(ar[double,ndim=3] A, ar[double,ndim=2] b):
    cdef int n, i, j, N=A.shape[0], h=A.shape[1]
    for n in xrange(N):
        for j in xrange(h-1):
            for i in xrange(j+1,h):
                b[n,i] -= A[n,i,j] * b[n,j]
        for j in xrange(h-1,-1,-1):
            b[n,j] /= A[n,j,j]
            for i in xrange(j):
                b[n,i] -= A[n,i,j] * b[n,j]
</snippet></ROW><ROW><id>17928804</id><snippet>global counter</snippet></ROW><ROW><id>17928804</id><snippet>counter = 0

def howManyTimesAmICalled():
    global counter
    counter += 1
    print(counter)

howManyTimesAmICalled()
</snippet></ROW><ROW><id>17928927</id><snippet>app.py</snippet></ROW><ROW><id>17928927</id><snippet>com_auth.py</snippet></ROW><ROW><id>17929237</id><snippet>======   =======   ======  =====================
Symbol   Meaning   Type    Example
======   =======   ======  =====================
   G     Era       Text    "GG" -&gt; "AD"
   y     Year      Number  | "yy" -&gt; "03"
                           | "yyyy" -&gt; "2003"
   M     Month     Text    | "M" -&gt; "7"
                   or      | "M" -&gt; "12"
                   Number  | "MM" -&gt; "07"
                           | "MMM" -&gt; "Jul"
                           | "MMMM" -&gt; "December"
======   =======   ======  =====================
</snippet></ROW><ROW><id>17929292</id><snippet>platform.platform()</snippet></ROW><ROW><id>17929292</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.platform()
'Java-1.7.0_07-Java_HotSpot-TM-_64-Bit_Server_VM,_23.3-b01,_Oracle_Corporation-on-Mac_OS_X-10.7.5-x86_64'
</snippet></ROW><ROW><id>17929394</id><snippet>from fabric.contrib.files import exists

def foo():
    if exists('/path/to/remote/file', use_sudo=True):
        #command
</snippet></ROW><ROW><id>17929429</id><snippet>s = 'CRIT   :  [2013-07-26T14:40:50-0400] msg=&lt;POLICY ADDED&gt;,'    
import re
print re.match(r'(\w+).*?msg=&lt;(.*?)&gt;', s).groups()
# ('CRIT', 'POLICY ADDED')
</snippet></ROW><ROW><id>17929591</id><snippet>In [6]: a
Out[6]: 
4    1
3    2
2    3
1    4
dtype: int64

In [7]: a.groupby(a.index).sum()
Out[7]: 
1    4
2    3
3    2
4    1
dtype: int64

In [3]: a.groupby(lambda x: x % 2 == 0).sum()
Out[3]: 
False    6
True     4
dtype: int64
</snippet></ROW><ROW><id>17929669</id><snippet>TEMPLATE_DIRS = (
    os.path.join(os.path.dirname(os.path.dirname(__file__)), "static", "templates",
)
</snippet></ROW><ROW><id>17929669</id><snippet>os.path.join()</snippet></ROW><ROW><id>17929669</id><snippet>TEMPLATE_DIRS = (
    os.path.join(os.path.dirname(os.path.dirname(__file__)), "static", "templates"),
    #                                                     missing parens ---------^
)
</snippet></ROW><ROW><id>17929669</id><snippet>(</snippet></ROW><ROW><id>17929669</id><snippet>{</snippet></ROW><ROW><id>17929669</id><snippet>[</snippet></ROW><ROW><id>17929669</id><snippet>)</snippet></ROW><ROW><id>17929669</id><snippet>}</snippet></ROW><ROW><id>17929669</id><snippet>]</snippet></ROW><ROW><id>17929828</id><snippet>ord</snippet></ROW><ROW><id>17929828</id><snippet>&gt;&gt;&gt; ord('\xb1')
177
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17929828</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'[^\d.-]+', "", r"4\xb1.3189125061")
'41.3189125061'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17929828</id><snippet>repr</snippet></ROW><ROW><id>17929828</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'[^\d.-]+', "", repr("4\xb1.3189125061"))
'41.3189125061'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17929937</id><snippet>'B'</snippet></ROW><ROW><id>17929937</id><snippet>starts = np.where(y == 'B')[0]
</snippet></ROW><ROW><id>17929937</id><snippet>'B'</snippet></ROW><ROW><id>17929937</id><snippet>'I'</snippet></ROW><ROW><id>17929937</id><snippet>'I'</snippet></ROW><ROW><id>17929937</id><snippet>ends = np.where(((y == 'B') | (y == 'I')) &amp; np.r_[y[1:] != 'I', len(y)])[0]
</snippet></ROW><ROW><id>17929937</id><snippet>(ends - starts) + 1
array([3, 2, 1])
</snippet></ROW><ROW><id>17929937</id><snippet>B</snippet></ROW><ROW><id>17929937</id><snippet>B</snippet></ROW><ROW><id>17929937</id><snippet>O</snippet></ROW><ROW><id>17929937</id><snippet>np.diff(np.where(np.r_[y[y != 'O'], ['B']] == 'B')[0])
array([3, 2, 1])
</snippet></ROW><ROW><id>17930005</id><snippet>addMembership()</snippet></ROW><ROW><id>17930164</id><snippet>&gt;&gt;&gt; from pymongo import MongoClient
&gt;&gt;&gt; from itertools import chain

&gt;&gt;&gt; mc = MongoClient()
&gt;&gt;&gt; db = mc["test_db"]
&gt;&gt;&gt; col = db["test_collection"]

&gt;&gt;&gt; col.insert({"aaaa":1})
&gt;&gt;&gt; col.insert({"bbbb":2})

&gt;&gt;&gt; cur1 = col.find({"aaaa":1})
&gt;&gt;&gt; cur2 = col.find({"bbbb":2})

&gt;&gt;&gt; data = [x for x in chain(cur1, cur2)]
&gt;&gt;&gt; data
[{u'aaaa': 1, u'_id': ObjectId('51f6a2ef0fef4e0daccc50e1')}, {u'_id': ObjectId('51f6a2fb0fef4e0daccc50e2'), u'bbbb': 2}]
</snippet></ROW><ROW><id>17930173</id><snippet>reader = csv.reader(f)
for row in reader:
    #do something with each row
f.close()
</snippet></ROW><ROW><id>17930173</id><snippet>row[0]</snippet></ROW><ROW><id>17930262</id><snippet># define a class object (your class may be more complicated than this...)
class A(object):
    pass

# a class method takes the class object as its first variable
def func(cls):
    print 'I am a class method'

# you can just add it to the class if you already know the name you want to use
A.func = classmethod(func)

# or you can auto-generate the name and set it this way
the_name = 'other_func' 
setattr(A, the_name, classmethod(func))
</snippet></ROW><ROW><id>17930320</id><snippet>winsound.SND_ASYNC 
Return immediately, allowing sounds to play asynchronously.
</snippet></ROW><ROW><id>17930320</id><snippet>PlaySound</snippet></ROW><ROW><id>17930320</id><snippet>NONE</snippet></ROW><ROW><id>17930320</id><snippet>winsound.PlaySound(None, winsound.SND_ASYNC)
</snippet></ROW><ROW><id>17930440</id><snippet>/tmp/pkg/__init__.py</snippet></ROW><ROW><id>17930440</id><snippet>to_import = [".a", ".b"]

import importlib
for toi in to_import:
    importlib.import_module(toi, __name__)
</snippet></ROW><ROW><id>17930440</id><snippet>import_module</snippet></ROW><ROW><id>17930611</id><snippet>ctypes/__init__.py</snippet></ROW><ROW><id>17930611</id><snippet>if _os.name in ("nt", "ce"):
    pythonapi = PyDLL("python dll", None, _sys.dllhandle)
elif _sys.platform == "cygwin":
    pythonapi = PyDLL("libpython%d.%d.dll" % _sys.version_info[:2])
else:
    pythonapi = PyDLL(None)
</snippet></ROW><ROW><id>17930611</id><snippet>hndl = sys.dllhandle
pythondll = ctypes.CDLL('python dll',  handle=hndl)
</snippet></ROW><ROW><id>17930619</id><snippet>&gt;&gt;&gt; 'C:/dir\\file.txt'.replace('\\', '/')
'C:/dir/file.txt'
</snippet></ROW><ROW><id>17930619</id><snippet>str.replace</snippet></ROW><ROW><id>17930619</id><snippet>&gt;&gt;&gt; paths = list = ['C:/dir\\file.txt', 'C:/dir\\example.zip', 'C:/dir\\example2.zip']
&gt;&gt;&gt; paths = [path.replace('\\', '/') for path in paths]
&gt;&gt;&gt; paths
['C:/dir/file.txt', 'C:/dir/example.zip', 'C:/dir/example2.zip']
</snippet></ROW><ROW><id>17930758</id><snippet>&gt;&gt;&gt; f = []
&gt;&gt;&gt; f+= ["hi", "there"][0]
&gt;&gt;&gt; f
['h', 'i']
</snippet></ROW><ROW><id>17930758</id><snippet>a += b</snippet></ROW><ROW><id>17930758</id><snippet>a = a+b</snippet></ROW><ROW><id>17930758</id><snippet>a+b</snippet></ROW><ROW><id>17930758</id><snippet>a</snippet></ROW><ROW><id>17930758</id><snippet>b</snippet></ROW><ROW><id>17930758</id><snippet>*</snippet></ROW><ROW><id>17930758</id><snippet>list + nonlist</snippet></ROW><ROW><id>17930800</id><snippet>d=[]
cur = ''
for i in sys.stdin.readline():
    if i in ' .':
        if cur not in d and (cur != ''):
            d.append(cur)
        cur = '' # note the different indentation
    else:
        cur = cur + i.lower()
</snippet></ROW><ROW><id>17930889</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter({'A': 10, 'C':5, 'H':4})
&gt;&gt;&gt; sorted(c.items(), key=itemgetter(0))
[('A', 10), ('C', 5), ('H', 4)]
</snippet></ROW><ROW><id>17931029</id><snippet>def allChildren(self, l = None):
    if(l==None):
        l = list()

    l.append(self)
    for child in self.children:
        l = child.allChildren(l)
    return l
</snippet></ROW><ROW><id>17931126</id><snippet>user = open ('users.txt' , 'r')
password = open ('password.txt' , 'r')
username = user.readlines() 
password_list = password.readlines()

for username in  user:
    for pass_val in password_list:
        login_data = username+'\n'+ pass_val
        print login_data
</snippet></ROW><ROW><id>17931140</id><snippet>import sys
</snippet></ROW><ROW><id>17931152</id><snippet>defaultdict</snippet></ROW><ROW><id>17931152</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; m = defaultdict(list)
&gt;&gt;&gt; with open('testFile.txt' ,'r') as f:
        for line in f:
            name, val = line.split()
            m[name].append(val)
&gt;&gt;&gt; m
defaultdict(&lt;type 'list'&gt;, {'EOG66.txt': ['354'], 'EASSDS.txt': ['2738', '292'], 'EQQSDS7M.txt': ['394', '301']})
&gt;&gt;&gt; with open('output.txt', 'w') as f:
        for elem in m:
            f.write("{} {}\n".format(elem, min(map(int, m[elem]))))
</snippet></ROW><ROW><id>17931152</id><snippet>EOG66.txt 354
EASSDS.txt 292
EQQSDS7M.txt 301
</snippet></ROW><ROW><id>17931201</id><snippet>1001</snippet></ROW><ROW><id>17931201</id><snippet>pi(x) % 4</snippet></ROW><ROW><id>17931201</id><snippet>0 mod 4 = 4 mod 4</snippet></ROW><ROW><id>17931201</id><snippet>0 mod 7 != 4 mod 7</snippet></ROW><ROW><id>17931201</id><snippet>pi(0) = 6</snippet></ROW><ROW><id>17931201</id><snippet>pi(6)</snippet></ROW><ROW><id>17931201</id><snippet>pi(6) = 5</snippet></ROW><ROW><id>17931201</id><snippet>pi(5)</snippet></ROW><ROW><id>17931432</id><snippet>from Tkinter import *
from tkMessageBox import *
Tk().withdraw()
askyesno('Verify', 'Really quit?')
</snippet></ROW><ROW><id>17931432</id><snippet>from Tkinter import *
from tkMessageBox import *

root = Tk()
root.withdraw()
showinfo('OK', 'Please choose')
root.deiconify()

# Do not create another Tk window. reuse root.

root.title("Report month")
...
</snippet></ROW><ROW><id>17931809</id><snippet>a, b = 1, 2
phi = np.linspace(3, 10, 100)
x = a*phi - b*np.sin(phi)
y = a - b*np.cos(phi)
y_growth_flips = np.where(np.diff(np.diff(y) &gt; 0))[0] + 1

plt.plot(x, y, 'rx')
plt.plot(x[y_growth_flips], y[y_growth_flips], 'bo')
plt.axis([2, 12, -1.5, 3.5])
plt.show()
</snippet></ROW><ROW><id>17931809</id><snippet>P0</snippet></ROW><ROW><id>17931809</id><snippet>P1</snippet></ROW><ROW><id>17931809</id><snippet>Q0</snippet></ROW><ROW><id>17931809</id><snippet>Q1</snippet></ROW><ROW><id>17931809</id><snippet>P0 + s*(P1-P0) = Q0 + t*(Q1-Q0)</snippet></ROW><ROW><id>17931809</id><snippet>s</snippet></ROW><ROW><id>17931809</id><snippet>t</snippet></ROW><ROW><id>17931809</id><snippet>[0, 1]</snippet></ROW><ROW><id>17931809</id><snippet>x_down = x[y_growth_flips[0]:y_growth_flips[1]+1]
y_down = y[y_growth_flips[0]:y_growth_flips[1]+1]
x_up = x[y_growth_flips[1]:y_growth_flips[2]+1]
y_up = y[y_growth_flips[1]:y_growth_flips[2]+1]

def find_intersect(x_down, y_down, x_up, y_up):
    for j in xrange(len(x_down)-1):
        p0 = np.array([x_down[j], y_down[j]])
        p1 = np.array([x_down[j+1], y_down[j+1]])
        for k in xrange(len(x_up)-1):
            q0 = np.array([x_up[k], y_up[k]])
            q1 = np.array([x_up[k+1], y_up[k+1]])
            params = np.linalg.solve(np.column_stack((p1-p0, q0-q1)),
                                     q0-p0)
            if np.all((params &gt;= 0) &amp; (params &lt;= 1)):
                return p0 + params[0]*(p1 - p0)

&gt;&gt;&gt; find_intersect(x_down, y_down, x_up, y_up)
array([ 6.28302264,  1.63658676])

crossing_point = find_intersect(x_down, y_down, x_up, y_up)
plt.plot(crossing_point[0], crossing_point[1], 'ro')
plt.show()
</snippet></ROW><ROW><id>17931809</id><snippet>def find_intersect_vec(x_down, y_down, x_up, y_up):
    p = np.column_stack((x_down, y_down))
    q = np.column_stack((x_up, y_up))
    p0, p1, q0, q1 = p[:-1], p[1:], q[:-1], q[1:]
    rhs = q0 - p0[:, np.newaxis, :]
    mat = np.empty((len(p0), len(q0), 2, 2))
    mat[..., 0] = (p1 - p0)[:, np.newaxis]
    mat[..., 1] = q0 - q1
    mat_inv = -mat.copy()
    mat_inv[..., 0, 0] = mat[..., 1, 1]
    mat_inv[..., 1, 1] = mat[..., 0, 0]
    det = mat[..., 0, 0] * mat[..., 1, 1] - mat[..., 0, 1] * mat[..., 1, 0]
    mat_inv /= det[..., np.newaxis, np.newaxis]
    import numpy.core.umath_tests as ut
    params = ut.matrix_multiply(mat_inv, rhs[..., np.newaxis])
    intersection = np.all((params &gt;= 0) &amp; (params &lt;= 1), axis=(-1, -2))
    p0_s = params[intersection, 0, :] * mat[intersection, :, 0]
    return p0_s + p0[np.where(intersection)[0]]
</snippet></ROW><ROW><id>17931809</id><snippet>find_intersect(x_down, y_down, x_up, y_up)
Out[67]: array([ 6.28302264,  1.63658676])

find_intersect_vec(x_down, y_down, x_up, y_up)
Out[68]: array([[ 6.28302264,  1.63658676]])

%timeit find_intersect(x_down, y_down, x_up, y_up)
10 loops, best of 3: 66.1 ms per loop

%timeit find_intersect_vec(x_down, y_down, x_up, y_up)
1000 loops, best of 3: 375 us per loop
</snippet></ROW><ROW><id>17931966</id><snippet>for</snippet></ROW><ROW><id>17931966</id><snippet>app.exec_</snippet></ROW><ROW><id>17931966</id><snippet>quit</snippet></ROW><ROW><id>17931966</id><snippet>exit</snippet></ROW><ROW><id>17931966</id><snippet>#!/usr/bin/env python
import sys, itertools
import signal
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import QWebPage

urls = ["http://www.gouvernement.fr/", "http://www.google.com/"]
outputs = ["output1.png", "output2.png"]

def save_page(webpage, output):
    # Set the size of the (virtual) browser window
    webpage.setViewportSize(webpage.mainFrame().contentsSize())

    # Paint this frame into an image
    image = QImage(webpage.viewportSize(), QImage.Format_ARGB32)
    painter = QPainter(image)
    webpage.mainFrame().render(painter)
    painter.end()
    image.save(output)
    print ".png image successfully saved"
    #sys.exit(0)


app = QApplication(sys.argv)
signal.signal(signal.SIGINT, signal.SIG_DFL)

webpage = QWebPage()

def onLoadFinished(result):
    if not result:
        print "Request failed"
        sys.exit(1)
    save_page(webpage, outputs.pop(0))   # pop output name from list and save
    if urls:
        url = urls.pop(0)   # pop next url to fetch from list
        webpage.mainFrame().load(QUrl(url))
    else:
        app.quit()  # exit after last url

webpage.connect(webpage, SIGNAL("loadFinished(bool)"), onLoadFinished)
webpage.mainFrame().load(QUrl(urls.pop(0)))
sys.exit(app.exec_())
</snippet></ROW><ROW><id>17931970</id><snippet>np.linalg.matrix_rank</snippet></ROW><ROW><id>17931970</id><snippet>&gt;&gt;&gt; a = np.random.rand(10, 10)
&gt;&gt;&gt; b = np.random.rand(10, 10)
&gt;&gt;&gt; b[-1] = b[0] + b[1] # one row is a linear combination of two others
&gt;&gt;&gt; np.linalg.matrix_rank(a)
10
&gt;&gt;&gt; np.linalg.matrix_rank(b)
9
&gt;&gt;&gt; def is_invertible(a):
...     return a.shape[0] == a.shape[1] and np.linalg.matrix_rank(a) == a.shape[0]
... 
&gt;&gt;&gt; is_invertible(a)
True
&gt;&gt;&gt; is_invertible(b)
False
</snippet></ROW><ROW><id>17932115</id><snippet>[x] * 3</snippet></ROW><ROW><id>17932115</id><snippet>x</snippet></ROW><ROW><id>17932115</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; tree = [Counter()] * 3
&gt;&gt;&gt; tree[0] is tree[1]
True
&gt;&gt;&gt; tree[0] is tree[2]
True
&gt;&gt;&gt; another_counter = Counter()
&gt;&gt;&gt; tree[0] is another_counter
False

&gt;&gt;&gt; for counter in tree: print id(counter)
...
40383192
40383192
40383192
</snippet></ROW><ROW><id>17932115</id><snippet>&gt;&gt;&gt; tree = [Counter() for _ in range(3)]
&gt;&gt;&gt; tree[0] is tree[1]
False
&gt;&gt;&gt; tree[0] is tree[2]
False

&gt;&gt;&gt; for counter in tree: print id(counter)
...
40383800
40384104
40384408
</snippet></ROW><ROW><id>17932240</id><snippet>by_day[i] = {}</snippet></ROW><ROW><id>17932240</id><snippet>defaultdict</snippet></ROW><ROW><id>17932240</id><snippet>&gt;&gt;&gt; by_sale = {'Spring Savings 0413' : {1 : 3000, 2: 2000, 4:1000}, 'Back to School 0812' : {1: 4000, 3:3000, 4:2000}}
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; 
&gt;&gt;&gt; by_day = defaultdict(dict)
&gt;&gt;&gt; for sale, sale_info in by_sale.iteritems():
...     running_total = 0
...     for i in range(1,5):
...         daily_amount = sale_info.get(i,0)
...         running_total += daily_amount
...         by_day[i].update({sale:running_total})
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; dict(by_day)
{1: {'Spring Savings 0413': 3000, 'Back to School 0812': 4000}, 
 2: {'Spring Savings 0413': 5000, 'Back to School 0812': 4000}, 
 3: {'Spring Savings 0413': 5000, 'Back to School 0812': 7000}, 
 4: {'Spring Savings 0413': 6000, 'Back to School 0812': 9000}}
</snippet></ROW><ROW><id>17932240</id><snippet>range(1, 5)</snippet></ROW><ROW><id>17932240</id><snippet>range(1, 4)</snippet></ROW><ROW><id>17932240</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>17932514</id><snippet>from django.shortcuts import get_object_or_404
from myapp.models import PurchaseOrder

def confirm(request, itemnum):
    item = get_object_or_404(PurchaseOrder, item_number=itemnum)
    print("Got item #: {0.item_number}".format(item)) # a test
    return HttpResponse('test successful')
</snippet></ROW><ROW><id>17932514</id><snippet>urls.py</snippet></ROW><ROW><id>17932514</id><snippet>from django.conf.urls import patterns, url
from myapp import views

urlpatterns = patterns('',
    # your other normal url patterns
    url(r'^(?P&lt;itemnum&gt;\d+)/$', views.confirm, name='confirm-page'),
)
</snippet></ROW><ROW><id>17932529</id><snippet>file_1</snippet></ROW><ROW><id>17932529</id><snippet>file_1</snippet></ROW><ROW><id>17932529</id><snippet>with</snippet></ROW><ROW><id>17932529</id><snippet>with open("the_file.txt", "r") as file_1:
    for line in file_1:
        ...
</snippet></ROW><ROW><id>17932529</id><snippet>seek</snippet></ROW><ROW><id>17932529</id><snippet>with</snippet></ROW><ROW><id>17932529</id><snippet>seek</snippet></ROW><ROW><id>17932580</id><snippet>Epitope Name,Epitope,Protein,position,position

#Row 1#
3606,NSRSTSLSV,FOO,10,21
</snippet></ROW><ROW><id>17932580</id><snippet>A,B,C,D,E,F,G,H,I,J,K

#Row 10#
0,1,2,3,4,5,6,7,8,9,NSRSTSLSV
</snippet></ROW><ROW><id>17932580</id><snippet>for all_epitopes_row in c1:
    row = 1
    found = False
    for master_row in positiveBcell:
        results_row = all_epitopes_row
        **if all_epitopes_row[2] == master_row[10]:**
            results_row.append('FOUND in Bcell List (row ' + str(row) + ')')
            found = True
            break
        row = row +1
    if not found:
        results_row.append('NOT FOUND in Bcell list')
    c3.writerow(results_row)
</snippet></ROW><ROW><id>17932653</id><snippet>datetime</snippet></ROW><ROW><id>17932653</id><snippet>utcnow</snippet></ROW><ROW><id>17932653</id><snippet>from datetime import datetime, timedelta
timestamp = datetime.utcnow() + timedelta(seconds=60)
opener.addheaders("if-modified-since", timestamp.strftime('%a, %d %b %Y %H:%M:%S GMT'))
</snippet></ROW><ROW><id>17932654</id><snippet>class Character:
    def __init__ (self, name, xp = 0, level = 1, hp = 4, speed = 3, atk = 1, def_ = 2):
        self.name = name
        self.xp = xp
        self.level = level
        self.hp = self.curHp = hp
        self.speed = speed
        self.atk = atk
        self.def_ = def_
        self.inventory = []
</snippet></ROW><ROW><id>17932654</id><snippet>npcs = [Character (name) for name in ['Baldur', 'Lord Never', 'Ashyra'] ]
</snippet></ROW><ROW><id>17932654</id><snippet>class Character:
    [....]
    def takeDamage (self, dmg):
        self.curHp -= min (0, dmg - self.def_)

    def gainXP (self, xp):
        self.xp += xp
        #check for level up

    def takeItem (self, item):
        self.inventory.append (item)

    def useItem (self, item):
        item.activate ()
        self.inventory.remove (item)
</snippet></ROW><ROW><id>17932654</id><snippet>charactersBySpeed = sorted (characters, key = -character.speed)
</snippet></ROW><ROW><id>17932862</id><snippet>import ConfigParser

config = ConfigParser.RawConfigParser()
config.add_section('sec')
config.set('sec', 'name', 'foo')

with open('a.init', 'w') as f:
   config.write(f)
</snippet></ROW><ROW><id>17933239</id><snippet>&gt;&gt;&gt; dic = {'voornaam': 'John', 'Achternaam': 'Davis', 'telephone': '123456', 'Mobielnummer': '234567'}
&gt;&gt;&gt; tr = {'voornaam':'first_name', 'Achternaam':'last_name', 'telephone':'phone', 'Mobielnummer':'mobile'}
&gt;&gt;&gt; dic = {tr[k]: v for k, v in dic.items()}
{'mobile': '234567', 'phone': '123456', 'first_name': 'John', 'last_name': 'Davis'}
</snippet></ROW><ROW><id>17933440</id><snippet>fetchall()</snippet></ROW><ROW><id>17933440</id><snippet>arraysize</snippet></ROW><ROW><id>17933440</id><snippet>row = cur.fetchone()
while row:
   # do something with row
   row = cur.fetchone()
</snippet></ROW><ROW><id>17934161</id><snippet>500</snippet></ROW><ROW><id>17934189</id><snippet>import sys
print int(sys.argv[1]) + 2
</snippet></ROW><ROW><id>17934189</id><snippet>import sys

if len(sys.argv) &lt; 2:
    print "Usage: %s &lt;integer&gt;" % sys.argv[0]
    sys.exit(1)

try:
    x = int(sys.argv[1])
except ValueError:
    print "Usage: %s &lt;integer&gt;" % sys.argv[0]
    sys.exit(1)

print x + 2
</snippet></ROW><ROW><id>17934189</id><snippet>C:\Users\user&gt;python blah.py
Usage: blah.py &lt;integer&gt;

C:\Users\user&gt;python blah.py ffx
Usage: blah.py &lt;integer&gt;

C:\Users\user&gt;python blah.py 17
19
</snippet></ROW><ROW><id>17934370</id><snippet>leastsq</snippet></ROW><ROW><id>17934370</id><snippet>curve_fit</snippet></ROW><ROW><id>17934370</id><snippet>curve_fit</snippet></ROW><ROW><id>17934370</id><snippet>res = leastsq(func, p0, args=args, full_output=1, **kw)</snippet></ROW><ROW><id>17934370</id><snippet>from scipy.optimize import curve_fit
from itertools import imap
import numpy as np
# use only an even number of arguments
def rosen2d(x,a):
    return (1-x)**2 + 100*(a - (x**2))**2
#generate some random data slightly off

datax = np.array([.01*x for x in range(-10,10)])
datay = 2.3
dataz = np.array(map(lambda x: rosen2d(x,datay), datax))
optimalparams, covmatrix = curve_fit(rosen2d, datax, dataz)
print 'opt:',optimalparams
</snippet></ROW><ROW><id>17934370</id><snippet>from scipy.optimize import curve_fit
import numpy as np

# 4 dimensional colville function
# definition from http://www.sfu.ca/~ssurjano/colville.html
def colville(x,x3,x4):
    x1,x2 = x[:,0],x[:,1]
    return 100*(x1**2 - x2)**2 + (x1-1)**2 + (x3-1)**2 + \
            90*(x3**2 - x4)**2 + \
            10.1*((x2 - 1)**2 + (x4 - 1)**2) + \
            19.8*(x2 - 1)*(x4 - 1)
#generate some random data slightly off

datax = np.array([[x,x] for x in range(-10,10)])
#add gaussian noise
datax+= np.random.rand(*datax.shape)
#set 2 of the 4 parameters to constants
x3 = 3.5
x4 = 4.5
#calculate the function
dataz = colville(datax, x3, x4)
#fit the function
optimalparams, covmatrix = curve_fit(colville, datax, dataz)
print 'opt:',optimalparams
</snippet></ROW><ROW><id>17934370</id><snippet>from scipy.optimize import leastsq
import numpy as np

# 4 dimensional colville function
# definition from http://www.sfu.ca/~ssurjano/colville.html
def colville(x,x3,x4):
    x1,x2 = x[:,0],x[:,1]
    return 100*(x1**2 - x2)**2 + (x1-1)**2 + (x3-1)**2 + \
            90*(x3**2 - x4)**2 + \
            10.1*((x2 - 1)**2 + (x4 - 1)**2) + \
            19.8*(x2 - 1)*(x4 - 1)
#generate some random data slightly off


datax = np.array([[x,x] for x in range(-10,10)])
#add gaussian noise
datax+= np.random.rand(*datax.shape)
#set 2 of the 4 parameters to constants
x3 = 3.5
x4 = 4.5

def residual(p, x, y):
    return y - colville(x,*p)
#calculate the function
dataz = colville(datax, x3, x4)
#guess some initial parameter values
p0 = [0,0]
#calculate a minimization of the residual
optimalparams = leastsq(residual, p0, args=(datax, dataz))[0]
print 'opt:',optimalparams
</snippet></ROW><ROW><id>17934370</id><snippet>args</snippet></ROW><ROW><id>17934617</id><snippet>print '&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" '
       '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;'
</snippet></ROW><ROW><id>17934617</id><snippet>print """&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;"""
</snippet></ROW><ROW><id>17934738</id><snippet>&gt;&gt;&gt; int("0x00230008", 16)
2293768
</snippet></ROW><ROW><id>17934738</id><snippet>&gt;&gt;&gt; int("0x00230008", 16) + 4
2293772
</snippet></ROW><ROW><id>17934738</id><snippet>&gt;&gt;&gt; hex(int("0x00230008", 16) + 4)
'0x23000c'
</snippet></ROW><ROW><id>17934738</id><snippet>hex</snippet></ROW><ROW><id>17934738</id><snippet>&gt;&gt;&gt; '0x%08x' % (int("0x00230008", 16) + 4)
'0x0023000c'
</snippet></ROW><ROW><id>17934762</id><snippet>def sps_black_squares(a):
    a = a.tocoo()
    idx = (a.row % 2 == 0) &amp; (a.col % 2 == 0)
    new_shape = tuple((j-1) // 2 + 1 for j in a.shape)
    return sps.csr_matrix((a.data[idx], (a.row[idx]//2, a.col[idx]//2)),
                          shape=new_shape)

%timeit sps_black_squares(a)
1000 loops, best of 3: 315 us per loop

%timeit sps.csr_matrix(a.toarray()[::2, ::2])
100 loops, best of 3: 6.55 ms per loop

np.allclose(sps_black_squares(a).toarray(), a.toarray()[::2, ::2])
Out[119]: True
</snippet></ROW><ROW><id>17934810</id><snippet>&gt;&gt;&gt; list1 = ['paste', 'text', 'text', 'here', 'here', 'here', 'my', 'i', 'i', 'me', 'me']
&gt;&gt;&gt; list2 = ["i","me"]
&gt;&gt;&gt; list3 = [item for item in list1 if item not in list2]
&gt;&gt;&gt; list3
['paste', 'text', 'text', 'here', 'here', 'here', 'my']
</snippet></ROW><ROW><id>17934810</id><snippet>O(n)</snippet></ROW><ROW><id>17934810</id><snippet>list2</snippet></ROW><ROW><id>17934810</id><snippet>O(1)</snippet></ROW><ROW><id>17934928</id><snippet>a='value1, value2, value3(a, b, c)'
split=a.split(', ')
result=[]
for ent in split:
    if ent.find('(', 0, len(ent))!=-1:
        temp=''
        for ent2 in split[split.index(ent):]:
            if ent2.find('(', 0, len(ent))!=-1:
                temp=temp+ent2
            else:
                temp=temp+','+ent2
                split.remove(ent2)
            #May need a check whether ) has not been reached yet, in which case don't add the items.
        result.append(temp)
    else:
        result.append(ent)
</snippet></ROW><ROW><id>17934928</id><snippet>a='value1, value2, value3(a, b, c)', 'value4'
</snippet></ROW><ROW><id>17934961</id><snippet>    indentifi.extend(re.findall(r'cat_(.*?)dog', line))
</snippet></ROW><ROW><id>17934961</id><snippet>In [137]: import re

In [138]: line = '...snake_perrot_cat_expression dog...'

In [142]: re.findall(r'cat_(.*?)\s*dog', line)
Out[142]: ['expression']
</snippet></ROW><ROW><id>17934961</id><snippet>\s*</snippet></ROW><ROW><id>17935013</id><snippet>/letter/([-\w]+)</snippet></ROW><ROW><id>17935013</id><snippet>/letter/?letter_letter=a</snippet></ROW><ROW><id>17935013</id><snippet>&lt;a href="/letter/{{ letter.letter }}"&gt;{{ letter.letter }}&lt;/a&gt;
</snippet></ROW><ROW><id>17935013</id><snippet>webapp2.Route('/letter/([-\w]+)', handler=GoLetter)</snippet></ROW><ROW><id>17935013</id><snippet>('/letter/([-\w]+)', GoLetter)</snippet></ROW><ROW><id>17935146</id><snippet>import math
n = len(array)
r = 4
length = math.factorial(n) / math.factorial(r) / math.factorial(n-r)
</snippet></ROW><ROW><id>17935545</id><snippet>for i in range(10):
    for j in range(10):
        print i,j
</snippet></ROW><ROW><id>17935545</id><snippet>for item in []:
   print "this will never print"
</snippet></ROW><ROW><id>17935662</id><snippet>replace</snippet></ROW><ROW><id>17935662</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "&lt;word1&gt;&lt;/word1&gt; &lt;word2&gt;worda&lt;/word2&gt; &lt;word3&gt;wordb&lt;/word3&gt; &lt;word4&gt;&lt;/word4&gt;"
&gt;&gt;&gt; re.findall("\S+", s.replace("&gt;", "&gt; ").replace("&lt;", " &lt;"))
['&lt;word1&gt;', '&lt;/word1&gt;', '&lt;word2&gt;', 'worda', '&lt;/word2&gt;', '&lt;word3&gt;', 'wordb', '&lt;/word3&gt;', '&lt;word4&gt;', '&lt;/word4&gt;']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17935662</id><snippet>&gt;&gt;&gt; s = "&lt;word1&gt;&lt;/word1&gt; &lt;word2&gt;worda&lt;/word2&gt; &lt;word3&gt;wordb&lt;/word3&gt; &lt;word4&gt;&lt;/word4&gt;"
&gt;&gt;&gt; s.replace("&gt;", "&gt; ").replace("&lt;", " &lt;").split()
['&lt;word1&gt;', '&lt;/word1&gt;', '&lt;word2&gt;', 'worda', '&lt;/word2&gt;', '&lt;word3&gt;', 'wordb', '&lt;/word3&gt;', '&lt;word4&gt;', '&lt;/word4&gt;']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17935675</id><snippet>p(x) = a0 + a1*x + a2*x**2 + ... + an*x**n</snippet></ROW><ROW><id>17935675</id><snippet>(x0, y0), (x1, y1), ..., (xm, y_m)</snippet></ROW><ROW><id>17935675</id><snippet>np.lstsq</snippet></ROW><ROW><id>17935675</id><snippet>[1 x0 x0**2 ... x0**n]
[1 x1 x1**2 ... x1**n]
...               
[1 xm xm**2 ... xm**n]
</snippet></ROW><ROW><id>17935675</id><snippet>j</snippet></ROW><ROW><id>17935675</id><snippet>a0</snippet></ROW><ROW><id>17935675</id><snippet>def fit_poly_through_origin(x, y, n=1):
    a = x[:, np.newaxis] ** np.arange(1, n+1)
    coeff = np.linalg.lstsq(a, y)[0]
    return np.concatenate(([0], coeff))

n = 1000
x = np.random.rand(n)
y = 1 + 3*x - 4*x**2 + np.random.rand(n)*0.25

c0 = np.polynomial.polynomial.polyfit(x, y, 2)
c1 = fit_poly_through_origin(x, y, 2)

p0 = np.polynomial.Polynomial(c0)
p1 = np.polynomial.Polynomial(c1)

plt.plot(x, y, 'kx')
xx = np.linspace(0, 1, 1000)
plt.plot(xx, p0(xx), 'r-', )
plt.plot(xx, p1(xx), 'b-', )
</snippet></ROW><ROW><id>17935928</id><snippet>sectList = [{"Id": 1, "Section": "Home", "Identifier": "homeList"}]
</snippet></ROW><ROW><id>17935928</id><snippet>section.Identifier</snippet></ROW><ROW><id>17935928</id><snippet>"homeList"</snippet></ROW><ROW><id>17935928</id><snippet>for i in "homeList":
    print i
</snippet></ROW><ROW><id>17935928</id><snippet>homeList</snippet></ROW><ROW><id>17935928</id><snippet>secList</snippet></ROW><ROW><id>17935928</id><snippet>secList</snippet></ROW><ROW><id>17935928</id><snippet>sectList = [{ 
    "Id": 1, "Section": "Home", "Identifier": [  # Identifier should be a list
        {"Id": 1, "Title": "Home", "Url": "home/"},
        {"Id": 2, "Title": "About", "Url": "about/"}
    ] 
}]
</snippet></ROW><ROW><id>17935952</id><snippet>import re

with open('input') as fin:
    long_string = re.sub(r'\W', '', fin.read())
# HelloWorldMynameisSamIam12yearsoldandaboyIlikePizza
</snippet></ROW><ROW><id>17935952</id><snippet>\W</snippet></ROW><ROW><id>17935952</id><snippet>[^a-zA-Z0-9_]</snippet></ROW><ROW><id>17935952</id><snippet>[^a-zA-Z0-9]</snippet></ROW><ROW><id>17936004</id><snippet>dataList = []
with open("data.dat") as f:
    dataList = [tuple(line.split()) for line in f]
</snippet></ROW><ROW><id>17936004</id><snippet>float</snippet></ROW><ROW><id>17936004</id><snippet>num = sum([float(i[1]) for i in dataList])
</snippet></ROW><ROW><id>17936038</id><snippet>numpy.py</snippet></ROW><ROW><id>17936038</id><snippet>numpy</snippet></ROW><ROW><id>17936092</id><snippet>from mechanize import Browser

br = Browser()
br.open("https://www.hackthissite.org/user/login")

br.select_form(predicate=lambda f: f.attrs.get('action') == '/user/login')
br["username"] = "myUser"
br["password"] = "myPass"
response = br.submit()

print response.read()
</snippet></ROW><ROW><id>17936092</id><snippet>br.select_form(predicate=lambda f: f.attrs.get('action') == '/user/login')
</snippet></ROW><ROW><id>17936092</id><snippet>select_form</snippet></ROW><ROW><id>17936092</id><snippet>nr</snippet></ROW><ROW><id>17936092</id><snippet>name</snippet></ROW><ROW><id>17936092</id><snippet>predicate</snippet></ROW><ROW><id>17936092</id><snippet>br.select_form(nr=1)</snippet></ROW><ROW><id>17936092</id><snippet>br.select_form(name="foobar")</snippet></ROW><ROW><id>17936092</id><snippet>HTMLForm</snippet></ROW><ROW><id>17936092</id><snippet>"action"</snippet></ROW><ROW><id>17936092</id><snippet>"/user/login"</snippet></ROW><ROW><id>17936098</id><snippet>for row in dataJSON:
    try:
        jsonparse = json.loads(row)
    except Exception as e:
        pass
</snippet></ROW><ROW><id>17936098</id><snippet>Exception</snippet></ROW><ROW><id>17936098</id><snippet>ValueError</snippet></ROW><ROW><id>17936447</id><snippet>__module__</snippet></ROW><ROW><id>17936447</id><snippet>heapq.heappush.__module__ == '_heapq'</snippet></ROW><ROW><id>17936447</id><snippet>_heapq</snippet></ROW><ROW><id>17936447</id><snippet>import *</snippet></ROW><ROW><id>17936447</id><snippet>heapq</snippet></ROW><ROW><id>17936479</id><snippet>- url: /image\.jpg
  static_files: image.jpg
  upload: image\.jpg
</snippet></ROW><ROW><id>17936479</id><snippet>- url: /static
  static_dir: static
</snippet></ROW><ROW><id>17936479</id><snippet>- url: .*
  script: your.app
</snippet></ROW><ROW><id>17936482</id><snippet>p</snippet></ROW><ROW><id>17936482</id><snippet>p c
</snippet></ROW><ROW><id>17936482</id><snippet>c</snippet></ROW><ROW><id>17936482</id><snippet>&gt;&gt;&gt; import pdb
&gt;&gt;&gt; c = [1,2,3]
&gt;&gt;&gt; pdb.set_trace()
--Return--
&gt; &lt;stdin&gt;(1)&lt;module&gt;()-&gt;None
(Pdb) p c
[1, 2, 3]
</snippet></ROW><ROW><id>17936495</id><snippet>zip</snippet></ROW><ROW><id>17936495</id><snippet>join</snippet></ROW><ROW><id>17936495</id><snippet>&gt;&gt;&gt; list1 = ['a','b','c','d']
&gt;&gt;&gt; list2 = ['r','t','y','h']
&gt;&gt;&gt; [''.join(pair) for pair in zip(list1, list2)]
['ar', 'bt', 'cy', 'dh']
</snippet></ROW><ROW><id>17936684</id><snippet>html = requests.get('http://example.com/').text
html_q = PyQuery(html)
image_url = html_q('img.my_image_class').attr('src')
</snippet></ROW><ROW><id>17936684</id><snippet>from splinter import Browser

with Browser() as b:
    b.visit('http://example.com/')
    image_url = b.find_by_css('img.my_image_class')['src']
</snippet></ROW><ROW><id>17936684</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>17936684</id><snippet>&lt;input&gt;</snippet></ROW><ROW><id>17936684</id><snippet>username</snippet></ROW><ROW><id>17936684</id><snippet>password</snippet></ROW><ROW><id>17936684</id><snippet>import requests
s = requests.session()
s.post('https://example.com/dologin', data={'username': 'adam', 'password': 'hunter2'})
html = s.get('https://example.com/other_page').text
# and continue as in the first example
</snippet></ROW><ROW><id>17936744</id><snippet>distances = (a-b)**2
distances = distances.sum(axis=-1)
distances = np.sqrt(distances)
</snippet></ROW><ROW><id>17936803</id><snippet>&gt;&gt;&gt; regular_expression = r'&lt;string&gt;(.*) (?:&lt;string2&gt;(.*)&lt;/string2&gt;)?&lt;/string&gt;'
&gt;&gt;&gt; re.findall(regular_expression,
               "&lt;string&gt;objectiwant1 &lt;string2&gt;objectiwant2&lt;/string2&gt;&lt;/string&gt;")
[('objectiwant1', 'objectiwant2')]
&gt;&gt;&gt; re.findall(regular_expression, 
               "&lt;string&gt;objectiwant1 &lt;/string&gt;")
[('objectiwant1', '')]
</snippet></ROW><ROW><id>17937058</id><snippet>Functions</snippet></ROW><ROW><id>17937058</id><snippet>procedure</snippet></ROW><ROW><id>17937058</id><snippet>function</snippet></ROW><ROW><id>17937058</id><snippet>None</snippet></ROW><ROW><id>17937058</id><snippet>None</snippet></ROW><ROW><id>17937058</id><snippet>def foo():
    pass
foo() == None
&gt;&gt;&gt; True
</snippet></ROW><ROW><id>17937058</id><snippet>return</snippet></ROW><ROW><id>17937058</id><snippet>return None</snippet></ROW><ROW><id>17937058</id><snippet>None</snippet></ROW><ROW><id>17937058</id><snippet>return</snippet></ROW><ROW><id>17937058</id><snippet>None</snippet></ROW><ROW><id>17937058</id><snippet>return 3</snippet></ROW><ROW><id>17937058</id><snippet>def foo():
   print('hello')
   return
   print('world')

foo()
&gt;&gt;&gt;'hello'

def add(a,b):
    return a + b
add(3,4)
&gt;&gt;&gt;7
</snippet></ROW><ROW><id>17937058</id><snippet>def my_function():
    my_dict = {"Key1":Value1,
              "Key2":Value2,
              "Key3":Value3,
              "Key4":Value4,}
    return my_dict
d = my_function()
d['Key1']
&gt;&gt;&gt; Value1
</snippet></ROW><ROW><id>17937058</id><snippet>def two_values():
    return 3,4
a,b = two_values()
print(a)
&gt;&gt;&gt;3
print(b)
&gt;&gt;&gt;4
</snippet></ROW><ROW><id>17937102</id><snippet>def function(user,b):
    user.getApple().eatTheApple(b, 2000, 50, 1, 8663, 4444)
</snippet></ROW><ROW><id>17937102</id><snippet>import random
myUser = User()

b = random.choice([2309,1897,2307])
function( myUser , b )
</snippet></ROW><ROW><id>17937102</id><snippet>def function(user):
    user.getApple().eatTheApple( random.choice([2309,1897,2307], 2000, 50, 1, 8663, 4444)
</snippet></ROW><ROW><id>17937102</id><snippet>class User:
    def __init__( self ):
        #this code is executed when the class is created
        self.b = random.choice([2309,1897,2307])

    def function( self ):
        #this code is owned by each User object
        user.getApple().eatTheApple(self.b, 2000, 50, 1, 8663, 4444)
</snippet></ROW><ROW><id>17937102</id><snippet>myUser = User()
myUser.function()
</snippet></ROW><ROW><id>17937119</id><snippet>Selenium</snippet></ROW><ROW><id>17937119</id><snippet>Mechanize</snippet></ROW><ROW><id>17937119</id><snippet>Urllib</snippet></ROW><ROW><id>17937119</id><snippet>Urllib2</snippet></ROW><ROW><id>17937119</id><snippet>Requests</snippet></ROW><ROW><id>17937137</id><snippet>from Tkinter import *


root = Tk()
opt_list = ['opt1','opt2','opt3','opt4','opt5']
sel_list = []

def get_sel():
    sel_list.append(Lb1.curselection())
    root.destroy()

def change_opt():
    entry = E.get()
    change = entry.split(" ")
    print change
    Lb1.insert(int(change[0]),change[1])
    root.update()


def cancel():
    root.destroy()
E = Entry(root)
A = Button(root, text ="Change", command = change_opt)
B = Button(root, text ="Submit", command = get_sel)
C = Button(root, text ="Cancel", command = cancel)
Lb1 = Listbox(root, selectmode=MULTIPLE)


for i,j in enumerate(opt_list):
    Lb1.insert(i,j)


Lb1.pack()
B.pack()
C.pack()
E.pack()
A.pack()

root.mainloop()
</snippet></ROW><ROW><id>17937137</id><snippet>opt_list</snippet></ROW><ROW><id>17937137</id><snippet>5 hello</snippet></ROW><ROW><id>17937137</id><snippet>hello</snippet></ROW><ROW><id>17937150</id><snippet>dates_by_month = map(strToMonthDate, arr[:,0]) 
</snippet></ROW><ROW><id>17937150</id><snippet>group = arr[dates_by_month==key]
</snippet></ROW><ROW><id>17937150</id><snippet>dates_by_month = np.array(map(strToMonthDate, arr[:,0]))
</snippet></ROW><ROW><id>17937357</id><snippet>os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings") 
</snippet></ROW><ROW><id>17937357</id><snippet>from django.core.management import setup_environ
from mysite import settings
setup_environ(settings)
</snippet></ROW><ROW><id>17937357</id><snippet>os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings") 
</snippet></ROW><ROW><id>17937441</id><snippet>/tmp/.X11-unix</snippet></ROW><ROW><id>17937441</id><snippet>X0</snippet></ROW><ROW><id>17937441</id><snippet>:0</snippet></ROW><ROW><id>17937441</id><snippet>X1</snippet></ROW><ROW><id>17937441</id><snippet>:1</snippet></ROW><ROW><id>17937441</id><snippet>ECONNREFUSED</snippet></ROW><ROW><id>17937490</id><snippet>&gt;&gt;&gt; from django.core.urlresolvers import resolve
&gt;&gt;&gt; foo = resolve('/login/')
&gt;&gt;&gt; foo.func
&lt;function Login at 0x010101010&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17937491</id><snippet>sys.path</snippet></ROW><ROW><id>17937491</id><snippet>import sys
_opath = sys.path[:] #get a copy of whatever sys.path is at this point

#do imports

sys.path = _opath
</snippet></ROW><ROW><id>17937491</id><snippet>os.environ["PYTHONPATH"]
</snippet></ROW><ROW><id>17937602</id><snippet>=</snippet></ROW><ROW><id>17937602</id><snippet>,</snippet></ROW><ROW><id>17937602</id><snippet>=</snippet></ROW><ROW><id>17937602</id><snippet>this="a string with spaces", that = 42, quote mark = "
</snippet></ROW><ROW><id>17937602</id><snippet>this</snippet></ROW><ROW><id>17937602</id><snippet>a string with spaces</snippet></ROW><ROW><id>17937602</id><snippet>"a string with spaces"</snippet></ROW><ROW><id>17937602</id><snippet>that</snippet></ROW><ROW><id>17937602</id><snippet> 42</snippet></ROW><ROW><id>17937602</id><snippet>42</snippet></ROW><ROW><id>17937602</id><snippet>quote mark</snippet></ROW><ROW><id>17937602</id><snippet>greeting="Hello, world."
</snippet></ROW><ROW><id>17937602</id><snippet>\w</snippet></ROW><ROW><id>17937602</id><snippet>for word, value in re.findall(r'([\w]+)=([\w]+)', string):
    print word, value
</snippet></ROW><ROW><id>17937602</id><snippet>102.201.333</snippet></ROW><ROW><id>17937602</id><snippet>\w</snippet></ROW><ROW><id>17937602</id><snippet>value</snippet></ROW><ROW><id>17937602</id><snippet>for word, value in re.findall(r'([\w]+)=([^,]+)', string):
    print word, value
</snippet></ROW><ROW><id>17937602</id><snippet>=</snippet></ROW><ROW><id>17937602</id><snippet>string</snippet></ROW><ROW><id>17937602</id><snippet>"$a=this, b = that, c=102.201.333,,"</snippet></ROW><ROW><id>17937602</id><snippet>for</snippet></ROW><ROW><id>17937602</id><snippet>a this
c 102.201.333
</snippet></ROW><ROW><id>17937602</id><snippet>b</snippet></ROW><ROW><id>17937602</id><snippet>c</snippet></ROW><ROW><id>17937649</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>17937649</id><snippet>&gt;&gt;&gt; a = [ ['2000-01-01', 1.0], ['2000-02-01', 2.0] ]
&gt;&gt;&gt; b = [ ['2000-01-01', 2.0], ['2000-02-01', 1.0], ['2000-03-01', 3.0] ]
&gt;&gt;&gt; c = [ ['2000-01-01', 3.0], ['2000-02-01', 2.0], ['2000-03-01', 1.0] ]
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; m = defaultdict(int)
&gt;&gt;&gt; d = a + b + c
&gt;&gt;&gt; d
[['2000-01-01', 1.0], ['2000-02-01', 2.0], ['2000-01-01', 2.0], ['2000-02-01', 1.0], ['2000-03-01', 3.0], ['2000-01-01', 3.0], ['2000-02-01', 2.0], ['2000-03-01', 1.0]]
&gt;&gt;&gt; for date, count in d:
        m[date] += count
&gt;&gt;&gt; m.items()
[('2000-02-01', 5.0), ('2000-03-01', 4.0), ('2000-01-01', 6.0)]
</snippet></ROW><ROW><id>17937653</id><snippet>import pygame
from pygame.locals import *
import time

if __name__ == "__main__":
    pygame.init()
    size = (700, 700)
    screen = pygame.display.set_mode(size)
    font = pygame.font.SysFont('Impact',20,16)

    title = font.render(('SQUASH!'), True, (255,255,255))
    play = font.render(('PLAY'), True, (255,255,255))
    play_r = play.get_rect()
    play_r.x, play_r.y = 300,300

    while True:
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
        screen.fill((0,255,0,))
        screen.blit(title, (400, 400))
        screen.blit(play, (300,300))
        if play_r.collidepoint(pygame.mouse.get_pos()):
            print 'Detected'
        time.sleep(0.000000000000000000000000000000000000000000000000000000001)
        pygame.display.flip()
</snippet></ROW><ROW><id>17937653</id><snippet>collidepoint()</snippet></ROW><ROW><id>17937903</id><snippet>corners = a[::a.shape[0]-1, ::a.shape[1]-1]
</snippet></ROW><ROW><id>17937903</id><snippet>corners = a[tuple(slice(None, None, j-1) for j in a.shape)]
</snippet></ROW><ROW><id>17937903</id><snippet>&gt;&gt;&gt; a = np.arange(9).reshape(3, 3)
&gt;&gt;&gt; a
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
&gt;&gt;&gt; corners = a[tuple(slice(None, None, j-1) for j in a.shape)]
&gt;&gt;&gt; corners
array([[0, 2],
       [6, 8]])
&gt;&gt;&gt; corners += 1
&gt;&gt;&gt; a
array([[1, 1, 3],
       [3, 4, 5],
       [7, 7, 9]])
</snippet></ROW><ROW><id>17938040</id><snippet>dx = x[1]-x[0]
deriv = np.diff(wei.cdf(x))/dx
</snippet></ROW><ROW><id>17938040</id><snippet>import scipy.stats as s
import matplotlib.pyplot as plt
import numpy as np

wei = s.weibull_min(2, 0, 2) # shape, loc, scale - creates weibull object
sample = wei.rvs(1000)
shape, loc, scale = s.weibull_min.fit(sample, floc=0) 

x = np.linspace(np.min(sample), np.max(sample))
dx = x[1]-x[0]
deriv = np.diff(wei.cdf(x))/dx
plt.hist(sample, normed=True, fc="none", ec="grey", label="frequency")
plt.plot(x, wei.cdf(x), label="cdf")
plt.plot(x, wei.pdf(x), label="pdf")
plt.plot(x[1:]-dx/2, deriv, label="derivative")
plt.legend(loc=1)
plt.show()
</snippet></ROW><ROW><id>17938040</id><snippet>x-locations</snippet></ROW><ROW><id>17938040</id><snippet>deriv</snippet></ROW><ROW><id>17938040</id><snippet>dx/2</snippet></ROW><ROW><id>17938508</id><snippet>env</snippet></ROW><ROW><id>17938508</id><snippet>def set_env(env_str):
    json_data = open(env_str + '_settings.env', 'r')
    env_data = json.load(json_data)
    json_data.close()
    env.user = env_data['user']
    env.password = env_data['password']
</snippet></ROW><ROW><id>17938887</id><snippet>base64.b64decode</snippet></ROW><ROW><id>17938887</id><snippet>with open(path_to_encoded_file) as encoded_file:
    print base64.b64decode(encoded_file.read().strip())
</snippet></ROW><ROW><id>17939840</id><snippet>$ curl http://localhost:6800/schedule.json -d project=myproject -d spider=somespider -d setting=DOWNLOAD_DELAY=2 -d setting=CONCURRENT_REQUESTS=4 -d arg1=val1
</snippet></ROW><ROW><id>17939840</id><snippet>settings.py</snippet></ROW><ROW><id>17939840</id><snippet>myproject</snippet></ROW><ROW><id>17939840</id><snippet>pipelines.py</snippet></ROW><ROW><id>17939840</id><snippet>items.py</snippet></ROW><ROW><id>17940201</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; a = 'add {new} sentence {with} this word'
&gt;&gt;&gt; re.findall(r'\{(\w+)\}', a)
['new', 'with']
</snippet></ROW><ROW><id>17940201</id><snippet>Formatter</snippet></ROW><ROW><id>17940201</id><snippet>&gt;&gt;&gt; from string import Formatter
&gt;&gt;&gt; a = 'add {new} sentence {with} this word'
&gt;&gt;&gt; [i[1] for i in Formatter().parse(a) if i[1]]
['new', 'with']
</snippet></ROW><ROW><id>17940201</id><snippet>split()</snippet></ROW><ROW><id>17940201</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; a = 'add {new} sentence {with} this word'
&gt;&gt;&gt; [x.strip(string.punctuation) for x in a.split() if x.startswith("{") and x.endswith("}")]
['new', 'with']
</snippet></ROW><ROW><id>17940201</id><snippet>string.Template</snippet></ROW><ROW><id>17940201</id><snippet>&gt;&gt;&gt; class MyTemplate(string.Template):
...     pattern = r'\{(\w+)\}'
&gt;&gt;&gt; a = 'add {new} sentence {with} this word'
&gt;&gt;&gt; t = MyTemplate(a)
&gt;&gt;&gt; t.pattern.findall(t.template)
['new', 'with']
</snippet></ROW><ROW><id>17940879</id><snippet>pygame.event.pump()</snippet></ROW><ROW><id>17940879</id><snippet>...
while not done:
    clock.tick(60)

    keyState = pygame.key.get_pressed()

    if keyState[pygame.K_ESCAPE]:
        print('\nGame Shuting Down!')
        done = True
    pygame.event.pump() # process event queue
</snippet></ROW><ROW><id>17940879</id><snippet>pump() -&gt; None</snippet></ROW><ROW><id>17940879</id><snippet>pygame.event.get()</snippet></ROW><ROW><id>17940879</id><snippet>pygame.event.clear()</snippet></ROW><ROW><id>17940931</id><snippet>&gt;&gt;&gt; country_name = ['South Africa', 'India', 'United States']
&gt;&gt;&gt; country_code = ['ZA', 'IN', 'US']
&gt;&gt;&gt; zip(country_name, country_code)
[('South Africa', 'ZA'), ('India', 'IN'), ('United States', 'US')]
</snippet></ROW><ROW><id>17940931</id><snippet>&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; country_name = ['South Africa', 'India', 'United States', 'Netherlands']
&gt;&gt;&gt; country_code = ['ZA', 'IN', 'US']
&gt;&gt;&gt; list(izip_longest(country_name, country_code))
[('South Africa', 'ZA'), ('India', 'IN'), ('United States', 'US'), ('Netherlands', None)]
</snippet></ROW><ROW><id>17941078</id><snippet>import urllib

connection_string = "DRIVER={SQL Server};SERVER=localhost;UID=sa;PWD=pwd"
connection_string = urllib.quote_plus(connection_string) 
connection_string = "mssql+pyodbc:///?odbc_connect=%s" % connection_string

engine = sqlalchemy.create_engine(connection_string)
connection = engine.connect()
connection.execute("create database test")
connection.close()
</snippet></ROW><ROW><id>17941169</id><snippet>upper()</snippet></ROW><ROW><id>17941169</id><snippet>&gt;&gt;&gt; s = "apple"
&gt;&gt;&gt; s[:4]
'appl'
&gt;&gt;&gt; s[:4].upper()
'APPL'
</snippet></ROW><ROW><id>17941169</id><snippet>def capital(uinput):
    slice4 = uinput[:4]
    result = ""
    for i in slice4:
       j = ord(i)
       j = j - 32
       k = chr(j)
       result += k
    print result
</snippet></ROW><ROW><id>17941169</id><snippet>def capital(uinput):
    print "".join([chr(ord(i) - 32) for i in uinput[:4]])
</snippet></ROW><ROW><id>17941489</id><snippet>IntegerFields</snippet></ROW><ROW><id>17941489</id><snippet>&gt;&gt; myInt = 00001
&gt;&gt; print myInt
&gt;&gt; 1
</snippet></ROW><ROW><id>17941489</id><snippet>CharField</snippet></ROW><ROW><id>17941489</id><snippet>RegexField</snippet></ROW><ROW><id>17941489</id><snippet>phone_number = forms.RegexField(regex=r'^\+?(\d{3}-?\d+{7})$', error_messages = {'invalid_phonenumber': _("Not a valid Swedish phone number.")}
</snippet></ROW><ROW><id>17941848</id><snippet>WRITEDATA</snippet></ROW><ROW><id>17941848</id><snippet>WRITEFUNCTION</snippet></ROW><ROW><id>17941848</id><snippet>WRITEFUNCTION</snippet></ROW><ROW><id>17941848</id><snippet>WRITEDATA</snippet></ROW><ROW><id>17941848</id><snippet>WRITEFUNCTION</snippet></ROW><ROW><id>17941848</id><snippet>WRITEFUNCTION</snippet></ROW><ROW><id>17941848</id><snippet>WRITEDATA</snippet></ROW><ROW><id>17941848</id><snippet>WRITEFUNCTION</snippet></ROW><ROW><id>17942066</id><snippet>label</snippet></ROW><ROW><id>17942066</id><snippet>  import matplotlib.pyplot as plt
  plt.plot([1,2,3],'r-',label='Sample Label Red')
  plt.plot([0.5,2,3.5],'b-',label='Sample Label Blue')
  plt.legend()
  plt.show()
</snippet></ROW><ROW><id>17942101</id><snippet>_</snippet></ROW><ROW><id>17942101</id><snippet>for _ in range(0, 3):
    print "hi"
</snippet></ROW><ROW><id>17942113</id><snippet>%I</snippet></ROW><ROW><id>17942117</id><snippet>read_csv</snippet></ROW><ROW><id>17942117</id><snippet>The character to used to denote the start and end of a quoted item. Quoted items 
can include the delimiter and it will be ignored.
</snippet></ROW><ROW><id>17942117</id><snippet>"</snippet></ROW><ROW><id>17942117</id><snippet>In [1]: import pandas as pd

In [2]: from StringIO import StringIO

In [3]: s="""year, city, value
   ...: 2012, "Louisville KY", 3.5
   ...: 2011, "Lexington, KY", 4.0"""

In [4]: pd.read_csv(StringIO(s), quotechar='"', skipinitialspace=True)
Out[4]:
   year           city  value
0  2012  Louisville KY    3.5
1  2011  Lexington, KY    4.0
</snippet></ROW><ROW><id>17942117</id><snippet>skipinitialspace=True</snippet></ROW><ROW><id>17942243</id><snippet>fit</snippet></ROW><ROW><id>17942243</id><snippet>Parameter</snippet></ROW><ROW><id>17942243</id><snippet>from Parameter import fit, Parameter
</snippet></ROW><ROW><id>17942243</id><snippet>from Parameter import fit
</snippet></ROW><ROW><id>17942269</id><snippet>__init__</snippet></ROW><ROW><id>17942269</id><snippet>__call__</snippet></ROW><ROW><id>17942269</id><snippet>__init__</snippet></ROW><ROW><id>17942269</id><snippet>def init_service(cls):
    class InitService(cls):
        def __init__(self, port='ignored'):
            super(InitService).__init__(5432)

    return InitService
</snippet></ROW><ROW><id>17943251</id><snippet>urllib</snippet></ROW><ROW><id>17943251</id><snippet>urllib.urlretrieve(url, filename)
</snippet></ROW><ROW><id>17943251</id><snippet>url</snippet></ROW><ROW><id>17943251</id><snippet>filename</snippet></ROW><ROW><id>17943443</id><snippet>"pageFunctionNewPage" != "PageFunctionNewPage"
</snippet></ROW><ROW><id>17943443</id><snippet>functionName1 = 'PageFunction' + sf.split(',')[0]</snippet></ROW><ROW><id>17944089</id><snippet>hasattr()</snippet></ROW><ROW><id>17944089</id><snippet>a.href</snippet></ROW><ROW><id>17944089</id><snippet>DocType</snippet></ROW><ROW><id>17944089</id><snippet>getattr()</snippet></ROW><ROW><id>17944089</id><snippet>if 'href' in getattr(link, 'attrs', {}):
</snippet></ROW><ROW><id>17944089</id><snippet>SoupStrainer</snippet></ROW><ROW><id>17944089</id><snippet>a</snippet></ROW><ROW><id>17944089</id><snippet>href</snippet></ROW><ROW><id>17944089</id><snippet>href=True</snippet></ROW><ROW><id>17944089</id><snippet>not None</snippet></ROW><ROW><id>17944089</id><snippet>True</snippet></ROW><ROW><id>17944089</id><snippet>for link in BeautifulSoup(test.text, parse_only=SoupStrainer('a', href=True)):
</snippet></ROW><ROW><id>17944089</id><snippet>a</snippet></ROW><ROW><id>17944089</id><snippet>soup = BeautifulSoup(test.text, parse_only=SoupStrainer('a', href=True))
for link in soup.find_all('a'):
    print link
</snippet></ROW><ROW><id>17944261</id><snippet>&gt;&gt;&gt; from geopy import distance  
&gt;&gt;&gt; _, ne = g.geocode('Newport, RI')  
&gt;&gt;&gt; _, cl = g.geocode('Cleveland, OH')  
&gt;&gt;&gt; distance.distance(ne, cl).miles  
538.37173614757057 
</snippet></ROW><ROW><id>17944261</id><snippet>class User(models.Model):
    name = models.Charfield()
    lat = models.FloatField()
    lng = models.FloatField()
</snippet></ROW><ROW><id>17944261</id><snippet>#The location of your user.
lat, lng = 41.512107999999998, -81.607044999999999 

min_lat = lat - 1 # You have to calculate this offsets based on the user location.
max_lat = lat + 1 # Because the distance of one degree varies over the planet.
min_lng = lng - 1
max_lng = lng + 1    

users = User.objects.filter(lat__gt=min_lat, lat__lt=max__lat, lat__gt=min_lat, lat__lt=max__lat)

# If not 20 fall back to all users.
if users.count() &lt;= 20:
     users = User.objects.all()
</snippet></ROW><ROW><id>17944261</id><snippet>results = []
for user in users:
     d = distance.distance((lat, lng), (user.lat, user.lng))
     results.append( {'distance':d, 'user':user })
        results = sorted(results, key=lambda k: k['distance'])
results = results[:20]
</snippet></ROW><ROW><id>17944273</id><snippet>L = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
M = [y for [x, y, z] in L]
</snippet></ROW><ROW><id>17944321</id><snippet>.</snippet></ROW><ROW><id>17944321</id><snippet>flags=re.S</snippet></ROW><ROW><id>17944321</id><snippet>re.compile</snippet></ROW><ROW><id>17944346</id><snippet>for</snippet></ROW><ROW><id>17944346</id><snippet>for</snippet></ROW><ROW><id>17944346</id><snippet>range()</snippet></ROW><ROW><id>17944346</id><snippet>for</snippet></ROW><ROW><id>17944346</id><snippet>range()</snippet></ROW><ROW><id>17944346</id><snippet>for elem in reversed(some_list):
    # elem is a list value
</snippet></ROW><ROW><id>17944346</id><snippet>enumerate()</snippet></ROW><ROW><id>17944346</id><snippet>for i, elem in reversed(enumerate(some_list)):
    # elem is a list value, i is it's index in the list
</snippet></ROW><ROW><id>17944346</id><snippet>while</snippet></ROW><ROW><id>17944346</id><snippet>def halved_loop(n):
    while n &gt; 1:
        yield n
        n //= 2

for i in halved_loop(10):
    print i
</snippet></ROW><ROW><id>17944346</id><snippet>10</snippet></ROW><ROW><id>17944346</id><snippet>5</snippet></ROW><ROW><id>17944346</id><snippet>2</snippet></ROW><ROW><id>17944346</id><snippet>def halved_loop(sequence):
    n = -1
    while True:
        try:
            yield sequence[n]
        except IndexError:
            return
        n *= 2

for elem in halved_loop(['foo', 'bar', 'baz', 'quu', 'spam', 'ham', 'monty', 'python']):
    print elem
</snippet></ROW><ROW><id>17944346</id><snippet>python
monty
spam
foo
</snippet></ROW><ROW><id>17944529</id><snippet>from django.shortcuts import render_to_response

def category(request, slug):
    slug = slug.lower()
    product_type = local_settings.CATEGORY_NAME_TO_ID.get(slug, False)
    if not product_type:
        raise Http404
    products = models.Product.objects.active().filter(product_type = product_type)
    context = {
        'slug': slug,
        'products': products,
        'key': 'wholesale ipad, ipad with retina display, ipad mini, ipad 3, ipad 2',
    }
    return render_to_response('appletrade/category.html', context, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>17944552</id><snippet>sublime_plugin.EventListener</snippet></ROW><ROW><id>17944552</id><snippet>on_modified_async</snippet></ROW><ROW><id>17944552</id><snippet>run</snippet></ROW><ROW><id>17944552</id><snippet>TextCommand</snippet></ROW><ROW><id>17944552</id><snippet>class MyEventListener(sublime_plugin.EventListener):
    def on_modified_async(self, view):
        edit = view.begin_edit()
        view.insert(edit, 0, "Hello, World2!")
        view.end_edit(edit)
</snippet></ROW><ROW><id>17944552</id><snippet>substr</snippet></ROW><ROW><id>17944552</id><snippet>view.substr</snippet></ROW><ROW><id>17944552</id><snippet>sublime.Region</snippet></ROW><ROW><id>17944552</id><snippet>message = self.view.substr(sublime.Region(0, 50))
</snippet></ROW><ROW><id>17944584</id><snippet>fitfunc</snippet></ROW><ROW><id>17944584</id><snippet>math.exp</snippet></ROW><ROW><id>17944584</id><snippet>np.exp</snippet></ROW><ROW><id>17944702</id><snippet>if 'EVN' not in segmentList[x][0:3] :
    create_EVN()
</snippet></ROW><ROW><id>17945047</id><snippet>object</snippet></ROW><ROW><id>17945131</id><snippet>axis=1</snippet></ROW><ROW><id>17945131</id><snippet>mean</snippet></ROW><ROW><id>17945131</id><snippet>In [11]: df = pd.DataFrame(np.random.randn(4, 3), columns=[[1, 2, 3], ['d', 's', 'd']])

In [12]: df.columns.names = ['PLOT', 'DEPTH']

In [13]: df
Out[13]:
PLOT          1         2         3
DEPTH         d         s         d
0     -0.557490 -1.231495 -0.333703
1      0.513394  1.046577  0.596306
2     -0.404606 -1.615080 -0.694562
3     -0.078497 -0.683405  0.056857

In [14]: df.groupby(level='DEPTH', axis=1).mean()
Out[14]:
DEPTH         d         s
0     -0.445596 -1.231495
1      0.554850  1.046577
2     -0.549584 -1.615080
3     -0.010820 -0.683405
</snippet></ROW><ROW><id>17945204</id><snippet>os.system('java -jar GeoNetCWBQuery-4.0.2-bin.jar -s "NZMQZ..HH..." -d 3600
-event:time ' + date + time + ' -event:lat ' + lat + ' -event:lon ' + lon +
' -event:depth ' + depth + ' -o %c%s%y%M%D%z')
</snippet></ROW><ROW><id>17945204</id><snippet>os.system</snippet></ROW><ROW><id>17945204</id><snippet>subprocess.call</snippet></ROW><ROW><id>17945204</id><snippet>os.system</snippet></ROW><ROW><id>17945204</id><snippet>subprocess.call</snippet></ROW><ROW><id>17945204</id><snippet>subprocess.call('java', ['-jar', 'GeoNetCWBQuery-4.0.2-bin.jar', '-s', 'NZMQZ..HH...', '-d', '3600',
'-event:time', date, time,  '-event:lat', lat, '-event:lon', lon, 
'-event:depth', depth, '-o', '%c%s%y%M%D%z'])
</snippet></ROW><ROW><id>17945304</id><snippet>http://164.100.167.12/pwd/report.php</snippet></ROW><ROW><id>17945304</id><snippet>from scrapy.http import FormRequest
from scrapy.spider import BaseSpider


class MySpider(BaseSpider):
    name = "myspider"
    allowed_domains = ["http://164.100.167.12/"]
    report_date = '30/07/2013'

    def start_requests(self):
        yield FormRequest(url='http://164.100.167.12/pwd/report.php',
                          method='POST',
                          callback=self.parse_page,
                          formdata={'reportdate': self.report_date})

    def parse_page(self, response):
        # save the pdf
        with open('output.pdf', 'w') as f:
            f.write(response.body)
</snippet></ROW><ROW><id>17945304</id><snippet>embed</snippet></ROW><ROW><id>17945304</id><snippet>output.pdf</snippet></ROW><ROW><id>17945379</id><snippet>import logging
logger = logging.getLogger('myapp')
hdlr = logging.FileHandler('/var/tmp/myapp.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr) 
logger.setLevel(logging.WARNING)
</snippet></ROW><ROW><id>17945479</id><snippet>While</snippet></ROW><ROW><id>17945479</id><snippet>node.body</snippet></ROW><ROW><id>17945479</id><snippet>while</snippet></ROW><ROW><id>17945479</id><snippet>a</snippet></ROW><ROW><id>17945479</id><snippet>$ cat a.py
a = 0 
while a &lt; 5:
    print a
    a += 1
for i in (1, 2, 3): 
    pass
$ cat ast_ex.py
import ast

with open('a.py') as f:
    tree = ast.parse(f.read())

for node in ast.walk(tree):
    if isinstance(node, (ast.For, ast.While)):
        print 'node:', node, 'at line:', node.lineno
        print 'body of loop ends at:', node.body[-1].lineno
$ python ast_ex.py 
node: &lt;_ast.While object at 0x8017a8e50&gt; at line: 2
body of loop ends at: 4
node: &lt;_ast.For object at 0x8017ac0d0&gt; at line: 5
body of loop ends at: 6
</snippet></ROW><ROW><id>17945479</id><snippet>body[0]</snippet></ROW><ROW><id>17945479</id><snippet>body[-1]</snippet></ROW><ROW><id>17945528</id><snippet>size</snippet></ROW><ROW><id>17945528</id><snippet>groupby</snippet></ROW><ROW><id>17945528</id><snippet>g = data.groupby(...)
size = g.size()
size[size &gt; 3]
</snippet></ROW><ROW><id>17945528</id><snippet>In [11]: df = pd.DataFrame([[1, 2], [3, 4], [1,6]], columns=['A', 'B'])

In [12]: df
Out[12]:
   A  B
0  1  2
1  3  4
2  1  6 

In [13]: g = df.groupby('A')

In [14]: size = g.size()

In [15]: size[size &gt; 1]
Out[15]:
A
1    2
dtype: int64
</snippet></ROW><ROW><id>17945528</id><snippet>In [21]: g.filter(lambda x: len(x) &gt; 1)
Out[21]:
   A  B
0  1  2
2  1  6
</snippet></ROW><ROW><id>17945557</id><snippet>models.ForeignKey</snippet></ROW><ROW><id>17945557</id><snippet>#models.py
from django.contrib.auth.models import User
class Configuration(models.Model):
    author = models.ForeignKey(User)
    ...

#admin.py:
class Configuration_admin(admin.ModelAdmin):
    fields = ('title', 'author',....)
</snippet></ROW><ROW><id>17945923</id><snippet>price</snippet></ROW><ROW><id>17945923</id><snippet>area</snippet></ROW><ROW><id>17945923</id><snippet>diameter</snippet></ROW><ROW><id>17945946</id><snippet>cursor.execute</snippet></ROW><ROW><id>17945946</id><snippet>sql = """INSERT INTO daily_dispatch VALUES ({})""".format(
         ', '.join(['%s']*22))
cur.execute(sql, row[0])
</snippet></ROW><ROW><id>17945946</id><snippet>cur.execute(sql % row[0])</snippet></ROW><ROW><id>17945946</id><snippet>cur.executemany(sql, rows)
</snippet></ROW><ROW><id>17946107</id><snippet>def conditional(cond, warning=None):
    def noop_decorator(func):
        return func  # pass through

    def neutered_function(func):
        def neutered(*args, **kw):
            if warning:
                log.warn(warning)
            return
        return neutered

    return noop_decorator if cond else neutered_function
</snippet></ROW><ROW><id>17946107</id><snippet>conditional</snippet></ROW><ROW><id>17946107</id><snippet>@conditional('matplotlib' in sys.modules, 'Please install matplotlib')
def foo(self, bar):
    pass
</snippet></ROW><ROW><id>17946390</id><snippet>list1 = [1642842,780497,1506284,1438592,1266530,1154853,965861,610252,1091847,1209404,1128111,749998]
list2 = [(i, a, b, (1.0*a)/b) for (i, (a, b)) in enumerate(zip(list1, list1[1:]))]
for i, a, b, f in filter(lambda (i, a, b, f): f &gt; 1.5, list2):
    print 'item {0} ({1}), {2} ({3}) value {4:.1f}'.format(i, a, i+1, b, f)
</snippet></ROW><ROW><id>17946390</id><snippet>item 0 (1642842), 1 (780497) value 2.1
item 6 (965861), 7 (610252) value 1.6
item 10 (1128111), 11 (749998) value 1.5
</snippet></ROW><ROW><id>17946517</id><snippet>In [34]: x = np.arange(4)

In [35]: np.tile(x,(3,1))
Out[35]: 
array([[0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3]])
</snippet></ROW><ROW><id>17946517</id><snippet>In [40]: y = np.arange(12).reshape(3,4)

In [41]: y
Out[41]: 
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
</snippet></ROW><ROW><id>17946517</id><snippet>x</snippet></ROW><ROW><id>17946517</id><snippet>In [42]: x = np.arange(4)

In [43]: x
Out[43]: array([0, 1, 2, 3])
</snippet></ROW><ROW><id>17946517</id><snippet>x</snippet></ROW><ROW><id>17946517</id><snippet>(4,)</snippet></ROW><ROW><id>17946517</id><snippet>y</snippet></ROW><ROW><id>17946517</id><snippet>(3,4)</snippet></ROW><ROW><id>17946517</id><snippet>x</snippet></ROW><ROW><id>17946517</id><snippet>In [44]: x + y
Out[44]: 
array([[ 0,  2,  4,  6],
       [ 4,  6,  8, 10],
       [ 8, 10, 12, 14]])
</snippet></ROW><ROW><id>17946517</id><snippet>In [45]: np.tile(x,(3,1)) + y
Out[45]: 
array([[ 0,  2,  4,  6],
       [ 4,  6,  8, 10],
       [ 8, 10, 12, 14]])
</snippet></ROW><ROW><id>17946517</id><snippet>tile</snippet></ROW><ROW><id>17946517</id><snippet>x</snippet></ROW><ROW><id>17946517</id><snippet>x</snippet></ROW><ROW><id>17946748</id><snippet>a</snippet></ROW><ROW><id>17946748</id><snippet>b</snippet></ROW><ROW><id>17946748</id><snippet>xy-plane</snippet></ROW><ROW><id>17946748</id><snippet>xyz-space</snippet></ROW><ROW><id>17946748</id><snippet>[0.4, 0.9]</snippet></ROW><ROW><id>17946748</id><snippet>[0.4, 0.9, 0]</snippet></ROW><ROW><id>17946748</id><snippet>xyz-space</snippet></ROW><ROW><id>17946748</id><snippet>cx</snippet></ROW><ROW><id>17946748</id><snippet>def cx(a, b) :
    a, b = (a, b) if len(a) &lt; len(b) else (b, a)
    b = b[:len(a)]
    try:
        assert any(a)
        assert any(b)
    except AssertionError:
        print('either a or b is zero')
        # return 0  or 
        # raise 
    return round(np.inner(a, b)/(LA.norm(a)*LA.norm(b)), 2)
</snippet></ROW><ROW><id>17946748</id><snippet>l</snippet></ROW><ROW><id>17946748</id><snippet>for-loops</snippet></ROW><ROW><id>17946748</id><snippet>def cosine_similarity(l):
    inner = np.einsum('ij,kj -&gt; ik', l, l)
    norm = np.sqrt(np.einsum('ij -&gt; i', l*l))
    return inner/(norm*norm[:, np.newaxis])

def to_3d(l):
    return np.array([row+[0]*(3-len(row)) for row in l])

np.set_printoptions(precision=2)
print(cosine_similarity(to_3d(l)))
</snippet></ROW><ROW><id>17946748</id><snippet>[[ 1.    0.66  0.66]
 [ 0.66  1.    0.53]
 [ 0.66  0.53  1.  ]]
</snippet></ROW><ROW><id>17946748</id><snippet>def cx(a, b) :
    a, b = (a, b) if len(a) &lt; len(b) else (b, a)
    b = b[:len(a)]
    return round(np.inner(a, b)/(LA.norm(a)*LA.norm(b)), 2)

def using_cx():
    for v in l:
       for y in l:
        cosine=cx(v,y)
</snippet></ROW><ROW><id>17946748</id><snippet>In [90]: %timeit using_cx()
1000 loops, best of 3: 380 us per loop

In [91]: %timeit cosine_similarity(to_3d(l))
10000 loops, best of 3: 32.6 us per loop
</snippet></ROW><ROW><id>17946748</id><snippet>l</snippet></ROW><ROW><id>17947041</id><snippet>+—+—+—+    +—+—+—+
|A| | |    |█| | |
+—+—+—+    +—+—+—+
| | | |    |█|█| |
+—+—+—+    +—+—+—+
| | | | →  | |█|█|
+—+—+—+    +—+—+—+
| | |B|    | | |█|
+—+—+—+    +—+—+—+
</snippet></ROW><ROW><id>17947041</id><snippet>3x4</snippet></ROW><ROW><id>17947041</id><snippet>y(x) = 4 * (1 - x/3)</snippet></ROW><ROW><id>17947041</id><snippet>x(y) = 3 * (1 - y/4)</snippet></ROW><ROW><id>17947041</id><snippet>x</snippet></ROW><ROW><id>17947041</id><snippet>y</snippet></ROW><ROW><id>17947041</id><snippet>[x; ceil(y(x)) - 1]</snippet></ROW><ROW><id>17947041</id><snippet>[ceil(x(y)) - 1; y - 1]</snippet></ROW><ROW><id>17947041</id><snippet>y(0) == 4      # paint 0;3
y(1) == 2.(6)  # paint 1;2
y(2) == 1.(3)  # paint 2;1

x(0) == 3      # paint 2;-1 (-1 is not a valid pixel coordinate, 
               # so we may just throw away this, as there are no pixels below y=0)
x(1) == 2.25   # paint 2;0
x(2) == 1.5    # paint 1;1
x(3) == 0.75   # paint 0;2
</snippet></ROW><ROW><id>17947041</id><snippet>x(y)</snippet></ROW><ROW><id>17947041</id><snippet>y(x)</snippet></ROW><ROW><id>17947041</id><snippet>y</snippet></ROW><ROW><id>17947041</id><snippet>x</snippet></ROW><ROW><id>17947041</id><snippet>y - 1</snippet></ROW><ROW><id>17947200</id><snippet>mwa_event_model</snippet></ROW><ROW><id>17947200</id><snippet>models.py</snippet></ROW><ROW><id>17947200</id><snippet>forms.py</snippet></ROW><ROW><id>17947200</id><snippet>mwa_event_form</snippet></ROW><ROW><id>17947559</id><snippet>pv</snippet></ROW><ROW><id>17947559</id><snippet>apt-get install pv
</snippet></ROW><ROW><id>17947559</id><snippet>pv</snippet></ROW><ROW><id>17947559</id><snippet>pg_dump base | pv &gt; base.sql
</snippet></ROW><ROW><id>17947559</id><snippet>pv</snippet></ROW><ROW><id>17947559</id><snippet>-s</snippet></ROW><ROW><id>17947559</id><snippet>pg_dump base | pv -s 500M &gt; base.sql
</snippet></ROW><ROW><id>17947773</id><snippet>Forward</snippet></ROW><ROW><id>17947773</id><snippet>Element = Forward()

Alphabet = OneOrMore(~lineEnd + oneOf(list(alphas)))
def alphaHold(toks):
    Element &lt;&lt; oneOf(toks.asList())
Alphabet.setParseAction(alphaHold)
</snippet></ROW><ROW><id>17947773</id><snippet>ListDef = listName + '=' - OneOrMore(~lineEnd + Element)
</snippet></ROW><ROW><id>17947773</id><snippet>ParseSyntaxException</snippet></ROW><ROW><id>17948159</id><snippet>datetime.replace</snippet></ROW><ROW><id>17948159</id><snippet>datetime.replace</snippet></ROW><ROW><id>17948159</id><snippet>datetime.strftime</snippet></ROW><ROW><id>17948159</id><snippet>&gt;&gt;&gt; a = datetime.fromtimestamp(1373576406)
&gt;&gt;&gt; a = a.replace(tzinfo=tzutc())
&gt;&gt;&gt; a.strftime('%s')
'1373576406
</snippet></ROW><ROW><id>17948162</id><snippet>class A:
    _tmp = {"A" : 1,
             "B" : 2}
    def tmp(self):
        return self._tmp

class B(A):
    _tmp = {"A" : 10,
             "B" : 20}
    def __init__(self):
        super().__init__()

b = B()
print(b.tmp()) # Works as expected
</snippet></ROW><ROW><id>17948162</id><snippet>self.__tmp</snippet></ROW><ROW><id>17948162</id><snippet>self._A__tmp</snippet></ROW><ROW><id>17948162</id><snippet>tmp</snippet></ROW><ROW><id>17948162</id><snippet>A</snippet></ROW><ROW><id>17948162</id><snippet>self._B__tmp</snippet></ROW><ROW><id>17948162</id><snippet>tmp</snippet></ROW><ROW><id>17948162</id><snippet>B</snippet></ROW><ROW><id>17948162</id><snippet>__private</snippet></ROW><ROW><id>17948425</id><snippet>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; def f(x, y): pass
...
&gt;&gt;&gt; f(print(1), print(2))
1
2
&gt;&gt;&gt; [print(1), print(2)]
1
2
[None, None]
&gt;&gt;&gt; {1:print(1), 2:print(2)}
1
2
{1: None, 2: None}
&gt;&gt;&gt; def f(x=print(1), y=print(2)): pass
...
1
2
</snippet></ROW><ROW><id>17948492</id><snippet>b = sorted(a, key=lambda item:(-item[1], item[0]))
</snippet></ROW><ROW><id>17948676</id><snippet>__init__.py</snippet></ROW><ROW><id>17948676</id><snippet>myproject/
    __init__.py
    models.py
    views.py
</snippet></ROW><ROW><id>17948676</id><snippet>from myproject import db
</snippet></ROW><ROW><id>17948912</id><snippet>match</snippet></ROW><ROW><id>17948912</id><snippet>not_matched_keys = [key for key in match if key not in order]
</snippet></ROW><ROW><id>17948912</id><snippet>match</snippet></ROW><ROW><id>17948912</id><snippet>order</snippet></ROW><ROW><id>17948912</id><snippet>match</snippet></ROW><ROW><id>17948912</id><snippet>&gt;&gt;&gt; order = {u'custom_attributes_desc': {u'text': u'Food truck', u'name': u'Bob', u'email': u'bob@yahoo.com'}, u'account_id': 12345, u'state_desc': u'open', u'start_dt': u'2013-07-25 15:41:37', u'end_dt': u'2013-07-25 19:41:37', u'product_nm': u'foo', u'transaction_id': 12345, u'product_id': 1111}
&gt;&gt;&gt; match = ['transaction_id', 'account_id', 'product_nm']
&gt;&gt;&gt; list(zip(match, order.keys()))
[('transaction_id', 'end_dt'), ('account_id', 'product_id'), ('product_nm', 'transaction_id')]
</snippet></ROW><ROW><id>17949187</id><snippet>A</snippet></ROW><ROW><id>17949187</id><snippet>B</snippet></ROW><ROW><id>17949187</id><snippet>class A(object):
    class B(object): pass
    class C(B): pass
</snippet></ROW><ROW><id>17949202</id><snippet>get_data()</snippet></ROW><ROW><id>17949202</id><snippet>phrases = [ u"Soggarth Eogham O'Growney ,克尔・德怀尔", 
            u"capitis #3 病态上升涨大的繁殖性勃现", 
            u"IsoldeIsult、第一任威尔士亲王" ]  
</snippet></ROW><ROW><id>17949202</id><snippet>u()</snippet></ROW><ROW><id>17949202</id><snippet>import sys
if sys.version &lt; '3':
    import codecs
    def u(x):
        return codecs.unicode_escape_decode(x)[0]
else:
    def u(x):
        return x
</snippet></ROW><ROW><id>17949313</id><snippet>try:
    # your code here
except:
    import traceback
    traceback.print_exc()
</snippet></ROW><ROW><id>17949464</id><snippet>Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
SecretKeySpec secretKey = new SecretKeySpec("1234".getBytes(), "HmacSHA256");
sha256_HMAC.init(secretKey);
byte[] hash = sha256_HMAC.doFinal("test".getBytes());
String check = Hex.encodeHexString(hash);
System.out.println(new String(check));

Output
24c4f0295e1bea74f9a5cb5bc40525c8889d11c78c4255808be00defe666671f
</snippet></ROW><ROW><id>17949464</id><snippet>print hmac.new("1234", "test", hashlib.sha256).hexdigest();

Output
24c4f0295e1bea74f9a5cb5bc40525c8889d11c78c4255808be00defe666671f
</snippet></ROW><ROW><id>17949545</id><snippet>with open('t.ini') as f:
   for line in f:
       print line
       if 'str' in line:
          break
</snippet></ROW><ROW><id>17949545</id><snippet>with</snippet></ROW><ROW><id>17949545</id><snippet>with</snippet></ROW><ROW><id>17949572</id><snippet>cv2.imread</snippet></ROW><ROW><id>17949572</id><snippet>im = cv2.cv.LoadImage("D:\testdata\some.tif",CV_LOAD_IMAGE_COLOR)
</snippet></ROW><ROW><id>17949652</id><snippet>cls</snippet></ROW><ROW><id>17949652</id><snippet>cls._name</snippet></ROW><ROW><id>17949699</id><snippet>result = {d['user__id': d for d in list_a}
for d in list_b:
    if d['user_num'] in result:
        result[d['user_num']].update(d)
</snippet></ROW><ROW><id>17949924</id><snippet>class PurchaseOrder(models.Model):
    ... your fields ...

    def get_po_number(self):
        return self.po_number if self.confirmed else ''
    get_po_number.short_description = 'po_number'
</snippet></ROW><ROW><id>17950065</id><snippet>from collections import *
d = defaultdict(list)

for item in items:
    d[tuple(item[1:])].append(item[0])
</snippet></ROW><ROW><id>17950065</id><snippet>{
    ('123', 'train', 'plaza'): ['1.pdf', '5.pdf'],
    ('123', 'plane', 'town'):  ['2.pdf', '6.pdf'],
    ('123', 'plane', 'city'):  ['4.pdf'],
    ('456', 'train', 'plaza'): ['3.pdf']
}
</snippet></ROW><ROW><id>17950077</id><snippet>extend</snippet></ROW><ROW><id>17950077</id><snippet>for item in items:
    forename = re.findall(pattern2, item)
    surname = re.findall(pattern3, item)
    mainlist.extend(surname)
</snippet></ROW><ROW><id>17950077</id><snippet>myList.extend(L)</snippet></ROW><ROW><id>17950077</id><snippet>L</snippet></ROW><ROW><id>17950077</id><snippet>myList</snippet></ROW><ROW><id>17950077</id><snippet>for element in L:
    myList.append(element)
</snippet></ROW><ROW><id>17950148</id><snippet>return [x for x in a_list if x.smth == 2]
</snippet></ROW><ROW><id>17950148</id><snippet>if value_to_accept is not None:
    return [x for x in a_list if x.smth == value_to_accept]
if value_to_reject is not None:
    return [x for x in a_list if x.smth != value_to_reject]
return []
</snippet></ROW><ROW><id>17950387</id><snippet>import pygraphviz as pgv
G=pgv.AGraph()
G.add_edge('1','2')
G.layout()
G.draw('file.png')
</snippet></ROW><ROW><id>17950387</id><snippet>import networkx as nx
import matplotlib.pyplot as plt
G = nx.Graph()
G.add_edge('1','2')
nx.draw(G)
plt.show()
</snippet></ROW><ROW><id>17950387</id><snippet>import pygraphviz as pgv
import networkx as nx
import matplotlib.pyplot as plt
Gtmp = pgv.AGraph('file.dot')
G = nx.Graph(Gtmp)
nx.draw(G)
plt.show()
</snippet></ROW><ROW><id>17950897</id><snippet>import os    
full_path = os.path.abspath('kvadrat.py')
</snippet></ROW><ROW><id>17950984</id><snippet> ", ".join(full_list)
</snippet></ROW><ROW><id>17950984</id><snippet>&gt;&gt;&gt; full_list = [u'Smith', u'Malte Low', u'Day', u'George']
&gt;&gt;&gt; print ", ".join(full_list)
Smith, Malte Low, Day, George
</snippet></ROW><ROW><id>17950984</id><snippet>Malte Low</snippet></ROW><ROW><id>17950984</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; ", ".join(chain.from_iterable(map(str.split, full_list)))
u'Smith, Malte, Low, Day, George'
</snippet></ROW><ROW><id>17951474</id><snippet>shell</snippet></ROW><ROW><id>17951474</id><snippet>call(['adb', 'shell', 'am start -a android.intent.action.SENDTO ...'])
</snippet></ROW><ROW><id>17951488</id><snippet>len</snippet></ROW><ROW><id>17951488</id><snippet>nunique()</snippet></ROW><ROW><id>17951488</id><snippet>df[df.groupby('ID').Name.transform(lambda x: x.nunique() == 1).astype('bool')]
</snippet></ROW><ROW><id>17951488</id><snippet>filter</snippet></ROW><ROW><id>17951488</id><snippet>df.groupby('ID').filter(lambda x: x.Name.nunique() == 1)
</snippet></ROW><ROW><id>17951488</id><snippet>size</snippet></ROW><ROW><id>17951488</id><snippet>len</snippet></ROW><ROW><id>17951728</id><snippet>Module 1</snippet></ROW><ROW><id>17951728</id><snippet>Propagate: True</snippet></ROW><ROW><id>17951728</id><snippet>MY_DICTIONARY = {
'version': 1,              
'disable_existing_loggers': False,
'formatters': {
    'verbose': {
        'format': '%(levelname)-8s %(asctime)s %(module)s %(process)d %(thread)d %(message)s',
        'datefmt': '%a, %d %b %Y %H:%M:%S'

    },
    'standard': {
        'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
        'datefmt': '%a, %d %b %Y %H:%M:%S'

    },
    'simple': {
        'format': '%(asctime)s %(levelname)-8s %(message)s',
        'datefmt': '%a, %d %b %Y %H:%M:%S'
    }
#etc.
}
</snippet></ROW><ROW><id>17951728</id><snippet>logging.config.dictConfig(MY_DICTIONARY)
vmrunalllogger = logging.getLogger('VMRunAll_Python_Logger')
</snippet></ROW><ROW><id>17951728</id><snippet>logging.config.dictConfig(MY_DICTIONARY)
mylogger = logging.getLogger('RunAll_Logger')
</snippet></ROW><ROW><id>17952074</id><snippet>DatetimeIndex</snippet></ROW><ROW><id>17952074</id><snippet>In [58]: time = pd.DatetimeIndex(df['time taken'])

In [59]: time.hour * 60 + time.minute
Out[59]: array([128, 125, 175, 222,  72, 106, 202, 216], dtype=int32)
</snippet></ROW><ROW><id>17952570</id><snippet>import datetime
import croniter
import crontab
import time

c = croniter.croniter("0 9,10,11 * * TUE")
next_due_date = c.get_next(datetime.datetime)


while True:
    now = datetime.datetime.now()
    if now &gt; next_due_date:
        do_something(line.py) # Edit: fixed tabbing; just in case it wasn't tabbed in 
                              #       your script
        # Use os.system to run the exe 
        os.system("myexecutable.exe")
        time.sleep(60 * 60 * 36)
    else:
        time.sleep(60) # Edit: I always find that it's better to have a smaller 
                       #       sleep time
</snippet></ROW><ROW><id>17952685</id><snippet>a = [1,2,3,4,1,2]

a.reverse()
print len(a) - a.index(min(a)) - 1
</snippet></ROW><ROW><id>17952685</id><snippet>a.reverse()
</snippet></ROW><ROW><id>17952687</id><snippet>&gt;&gt;&gt; d = {'a':1, 'b':2 , 'c': 3}
&gt;&gt;&gt; [d[k] for k in ['a','b']]
[1, 2]
</snippet></ROW><ROW><id>17952823</id><snippet>b = sum(a)
</snippet></ROW><ROW><id>17952823</id><snippet>a</snippet></ROW><ROW><id>17952823</id><snippet>b = sum(42)
</snippet></ROW><ROW><id>17952823</id><snippet>b = sum(int(x) for x in nums)
</snippet></ROW><ROW><id>17952823</id><snippet>with open("euler13.txt") as f:
  print sum(map(int, f))
</snippet></ROW><ROW><id>17952823</id><snippet>total</snippet></ROW><ROW><id>17952823</id><snippet> 42[:10]
</snippet></ROW><ROW><id>17952823</id><snippet>print total % 10000000000
print str(total)[-10:]
</snippet></ROW><ROW><id>17952823</id><snippet>while total &gt; 10000000000:
    total /= 10
print total

# or
print str(total)[:10]
</snippet></ROW><ROW><id>17952890</id><snippet>plt.yscale('log', nonposy='clip')
</snippet></ROW><ROW><id>17952890</id><snippet>log(0)</snippet></ROW><ROW><id>17952891</id><snippet>requests</snippet></ROW><ROW><id>17952891</id><snippet>pycurl</snippet></ROW><ROW><id>17953100</id><snippet>def placeShip():
    points = []

    # put random point generation here

    for point in points:
        if point in otherShipPoints:
            return placeShip()         # overlap detected, redo ship placement

    return points
</snippet></ROW><ROW><id>17953100</id><snippet>placeShip()</snippet></ROW><ROW><id>17953100</id><snippet>placeShip(size)</snippet></ROW><ROW><id>17953175</id><snippet>import pyqtgraph as pg
pg.mkQApp()

# Create remote process with a plot window
import pyqtgraph.multiprocess as mp
proc = mp.QtProcess()
rpg = proc._import('pyqtgraph')
plotwin = rpg.plot()
curve = plotwin.plot(pen='y')

# create an empty list in the remote process
data = proc.transfer([])

# Send new data to the remote process and plot it
# We use the special argument _callSync='off' because we do
# not want to wait for a return value.
data.extend([1,5,2,4,3], _callSync='off')
curve.setData(y=data, _callSync='off')
</snippet></ROW><ROW><id>17953175</id><snippet># Local code:
win = pg.GraphicsWindow()
p1 = win.addPlot()
p2 = win.addPlot()

# Remote code:
win = rpg.GraphicsWindow()
p1 = win.addPlot()
p2 = win.addPlot()
</snippet></ROW><ROW><id>17953293</id><snippet>def dot_notation(obj, prefix=''):
     if isinstance(obj, dict):
         if prefix: prefix += '.'
         for k, v in obj.items():
             for res in dot_notation(v, prefix+str(k)):
                 yield res
     elif isinstance(obj, list):
         for i, v in enumerate(obj):
             for res in dot_notation(v, prefix+'['+str(i)+']'):
                 yield res
     else:
         yield prefix
</snippet></ROW><ROW><id>17953293</id><snippet>&gt;&gt;&gt; list(dot_notation(x))
['a', 'b.c', 'd[0].e', 'd[0].f', 'd[1].e', 'd[1].f']
</snippet></ROW><ROW><id>17953774</id><snippet>upload = self.get_uploads()[0]
picture=upload.key()
</snippet></ROW><ROW><id>17953857</id><snippet>sapi.filter(track=['%s' % hash ])
</snippet></ROW><ROW><id>17953859</id><snippet>Document</snippet></ROW><ROW><id>17953859</id><snippet>Document</snippet></ROW><ROW><id>17953859</id><snippet>find()</snippet></ROW><ROW><id>17953859</id><snippet>getElementById</snippet></ROW><ROW><id>17953859</id><snippet>getElementsByTagName</snippet></ROW><ROW><id>17953864</id><snippet>fflush(NULL)</snippet></ROW><ROW><id>17953864</id><snippet>StdOut</snippet></ROW><ROW><id>17953864</id><snippet>import os
from ctypes import *

STD_OUTPUT_HANDLE = -11

kernel32 = windll.kernel32
# msvcr = CDLL(ctypes.util.find_library('c'))
msvcr = cdll.msvcr100

if __name__ == '__main__':

    print("begin python print")
    s = b"begin msvcr _write\n"
    msvcr._write(1, s, len(s))
    msvcr.printf(b"begin msvcr printf\n")

    # flush all streams
    msvcr.fflush(None)

    # save Win32 and POSIX stdout
    hStdOut = kernel32.GetStdHandle(STD_OUTPUT_HANDLE)
    fd_stdout = os.dup(1)

    with open("TEST.TXT", "w") as test:
        fd_test = test.fileno()
        # set POSIX stdout
        os.dup2(fd_test, 1)
        # set Win32 StdOut
        hTest = msvcr._get_osfhandle(1)
        kernel32.SetStdHandle(STD_OUTPUT_HANDLE, hTest)

    # print to file
    print("redirected python print")
    s = b"redirected msvcr _write\n"
    msvcr._write(1, s, len(s))
    msvcr.printf(b"redirected msvcr printf\n")

    # flush all streams
    msvcr.fflush(None)

    # restore Win32 and POSIX stdout
    kernel32.SetStdHandle(STD_OUTPUT_HANDLE, hStdOut)
    os.dup2(fd_stdout, 1)

    print("end python print")
    s = b"end msvcr _write\n"
    msvcr._write(1, s, len(s))
    msvcr.printf(b"end msvcr printf\n")
    msvcr.fflush(None)
</snippet></ROW><ROW><id>17954010</id><snippet>if Join == 'yes' or 'Yes':
</snippet></ROW><ROW><id>17954010</id><snippet>if (Join == 'yes') or 'Yes':
</snippet></ROW><ROW><id>17954010</id><snippet>or</snippet></ROW><ROW><id>17954010</id><snippet>or</snippet></ROW><ROW><id>17954010</id><snippet>Join</snippet></ROW><ROW><id>17954010</id><snippet>if Join == 'yes' or Join == 'Yes':
</snippet></ROW><ROW><id>17954010</id><snippet>if Join.lower() == 'yes':
</snippet></ROW><ROW><id>17954010</id><snippet>Join</snippet></ROW><ROW><id>17954010</id><snippet>Join = input('Would you like to join me?').lower()
if Join == 'yes':   # etc.
</snippet></ROW><ROW><id>17954010</id><snippet>y</snippet></ROW><ROW><id>17954010</id><snippet>y</snippet></ROW><ROW><id>17954010</id><snippet>Join = input('Would you like to join me?').lower()
if Join.startswith('y'):   # etc.
</snippet></ROW><ROW><id>17954190</id><snippet>class Values():
    def __init__(self, *attrs):
        '''each element in attrs is a tuple(attrname, value)'''
        if attrs is not None:
            for a in attrs:
                n, v = a
                setattr(self, n, v)

    def add_one(self, attr):
        a = getattr(self, attr, None)
        if a:
            if isinstance(a, tuple):
                setattr(self, attr, tuple(e + 1 for e in a))
            else:
                setattr(self, attr, a + 1)

v = Values(('x', 1), ('y', 2), ('z', 3), ('t', (7, 8, 9)))
print('Initial values:', v.x, v.y, v.z, v.t)
v.add_one('x')
print('X modified:', v.x, v.y, v.z, v.t)
v.add_one('t')
print('T modified:', v.x, v.y, v.z, v.t)
v.add_one('a')
print('Tried to modify non-existent attribute "a"', v.x, v.y, v.z, v.t)
</snippet></ROW><ROW><id>17954190</id><snippet>&gt;&gt;&gt; import attr
Initial values: 1 2 3 (7, 8, 9)
X modified: 2 2 3 (7, 8, 9)
T modified: 2 2 3 (8, 9, 10)
Tried to modify non-existent attribute "a" 2 2 3 (8, 9, 10)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17954288</id><snippet>y2[(sa/2)-1::sa]
</snippet></ROW><ROW><id>17954288</id><snippet>:</snippet></ROW><ROW><id>17954512</id><snippet>&gt;&gt;&gt; res = {'SGMB': [['SGMB', 'SANTM', 'CRSR', 'RAT']], 'CRSR': [['SGMB', 'SANTM', 'CRSR', 'RAT'], ['CRSR', 'RAT', 'ARG']], 'RAT': [['ARG', 'RAT'], ['SGMB', 'SANTM', 'CRSR', 'RAT'], ['CRSR', 'RAT', 'ARG']], 'PARTICIPANT_COLL_ID': [['PARTICIPANT_COLL_ID']], 'ARG': [['ARG', 'RAT'], ['CRSR', 'RAT', 'ARG']], 'SANTM': [['SGMB', 'SANTM', 'CRSR', 'RAT']]}
&gt;&gt;&gt; newres = {k: list({x for t in v for x in t if x != k}) for k, v in res.iteritems()}
&gt;&gt;&gt; newres
{'SGMB': ['CRSR', 'SANTM', 'RAT'], 'CRSR': ['SANTM', 'SGMB', 'RAT', 'ARG'], 'RAT': ['CRSR', 'SANTM', 'SGMB', 'ARG'], 'PARTICIPANT_COLL_ID': [], 'ARG': ['CRSR', 'RAT'], 'SANTM': ['CRSR', 'RAT', 'SGMB']}
</snippet></ROW><ROW><id>17954640</id><snippet>Website with Facebook  Login</snippet></ROW><ROW><id>17954640</id><snippet>App on Facebook</snippet></ROW><ROW><id>17954640</id><snippet>Website with Facebook Login</snippet></ROW><ROW><id>17954640</id><snippet>App on Facebook</snippet></ROW><ROW><id>17954705</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "StringText someText Wwwwww SomeOtherText OtherText SOMETextMore etc etc etc"
&gt;&gt;&gt; def replacement(match):
...   return match.group(1).lower()
&gt;&gt;&gt; re.sub(r'([sS]\w+)', replacement, s)
'stringtext sometext Wwwwww someothertext OtherText sometextmore etc etc etc'
</snippet></ROW><ROW><id>17954806</id><snippet>framename = driver.find_elements_by_xpath("//frame[contains(@name, 'results_frame')]").get_attribute("name")
</snippet></ROW><ROW><id>17954831</id><snippet>&gt;&gt;&gt; model.fit(X_train, y_train).score(X_train, y_train)
</snippet></ROW><ROW><id>17954831</id><snippet>sklearn.metrics</snippet></ROW><ROW><id>17954831</id><snippet>oob_score_</snippet></ROW><ROW><id>17954849</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17954849</id><snippet>&gt;&gt;&gt; data = '''
... {
...     "nine": 9,
...     "ten":  0xA,
...     "eleven": 11
... }
... '''
&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(data)
{'eleven': 11, 'nine': 9, 'ten': 10}
</snippet></ROW><ROW><id>17954898</id><snippet>a = com/(1 + com)
</snippet></ROW><ROW><id>17954898</id><snippet>com = a/(1.0-a)
</snippet></ROW><ROW><id>17954898</id><snippet>z = pd.ewma(x, com=a/(1.0-a), adjust=False)
print(z)
</snippet></ROW><ROW><id>17954898</id><snippet>0         NaN
1         NaN
2    2.098920
3    3.850710
4    5.246548
5    6.344995
</snippet></ROW><ROW><id>17954898</id><snippet>import pandas as pd
import numpy as np
import numpy.testing.utils as NTU

nan = np.nan
x = pd.Series([nan, nan, nan, 13.109292, 12.623850, 12.150520])
a = 0.8408964152537145
z = pd.ewma(x, com=a/(1.0-a), adjust=False)

def nanzero(x):
    return 0 if np.isnan(x) else x

x.ffill(inplace=True)
y = [x[0]]
for xt in x[1:]:
    yt1 = y[-1]
    if np.isnan(yt1) and np.isnan(xt):
        yt = nan
    else:
        yt1 = nanzero(yt1)
        xt = nanzero(xt)
        yt = a*yt1 + (1-a)*xt
        # yt = (1-a)*yt1 + a*xt
    y.append(yt)
y = pd.Series(y)

NTU.assert_allclose(y,z)
</snippet></ROW><ROW><id>17954952</id><snippet>import numpy
data = numpy.loadtxt('filename.txt')
print(data[7:,1].sum())
</snippet></ROW><ROW><id>17955213</id><snippet>os.mkdir</snippet></ROW><ROW><id>17955213</id><snippet>os.makedirs</snippet></ROW><ROW><id>17955213</id><snippet>os.path.expandvars</snippet></ROW><ROW><id>17955213</id><snippet>%</snippet></ROW><ROW><id>17955213</id><snippet>'</snippet></ROW><ROW><id>17955213</id><snippet>import os
os.mkdir(os.path.expandvars("C:\\users\\%username%\\rest\\of\\path"))
</snippet></ROW><ROW><id>17955470</id><snippet>import urllib, urllib2

user = open ('users.txt' , 'r')
password = open ('password.txt' , 'r')

for users in user:
    password.seek(0)
    for pass_list in password:
        login_data = users + '\n' + pass_list
        print login_data

base_url = 'http://my-site.com'       
#login action we want to post data to  
response = urllib2.urlopen(base_url)     
login_action = '/auth/login'   
login_action = base_url + login_action
response = urllib2.urlopen(login_action, login_data)
response.read()
print response.headers
print response.getcode()
</snippet></ROW><ROW><id>17955511</id><snippet> "flickr = flickrapi.FlickrAPI(api_key) 
  photos = flickr.photos_search(user_id='73509078@N00', per_page='10') 
  sets = flickr.photosets_getList(user_id='73509078@N00')"
</snippet></ROW><ROW><id>17955511</id><snippet>XML doc</snippet></ROW><ROW><id>17955511</id><snippet>ElementTree</snippet></ROW><ROW><id>17955511</id><snippet>sets</snippet></ROW><ROW><id>17955511</id><snippet>.tag</snippet></ROW><ROW><id>17955511</id><snippet>.attrib</snippet></ROW><ROW><id>17955511</id><snippet>root</snippet></ROW><ROW><id>17955511</id><snippet>sets = flickr.photosets_getList(user_id='73509078@N00')

sets.attrib['stat'] =&gt; 'ok'
sets.find('photosets').attrib['cancreate'] =&gt; '1'

set0 = sets.find('photosets').findall('photoset')[0]

+-------------------------------+-----------+
| variable                      | value     |
+-------------------------------+-----------+
| set0.attrib['id']             | u'5'      |
| set0.attrib['primary']        | u'2483'   |
| set0.attrib['secret']         | u'abcdef' |
| set0.attrib['server']         | u'8'      |
| set0.attrib['photos']         | u'4'      |
| set0.title[0].text            | u'Test'   |
| set0.description[0].text      | u'foo'    |
| set0.find('title').text       | 'Test'    |
| set0.find('description').text | 'foo'     |
+-------------------------------+-----------+

... and similar for set1 ...
</snippet></ROW><ROW><id>17955511</id><snippet>class</snippet></ROW><ROW><id>17955511</id><snippet>cls.__dict__
</snippet></ROW><ROW><id>17955511</id><snippet>vars(obj)</snippet></ROW><ROW><id>17955511</id><snippet>dir(obj)</snippet></ROW><ROW><id>17955511</id><snippet>class meh():
    def __init__(self):
        self.cat = 'dinosaur'
        self.number = 1
    # some example methods - don't actually do this
    # this is not a good use of a method
    # or object-oriented programming in general

    def add_number(self, i):
        self.number+=i

j = meh()
print j.__dict__
{'number': 1, 'cat': 'dinosaur'}
</snippet></ROW><ROW><id>17955511</id><snippet>dir</snippet></ROW><ROW><id>17955511</id><snippet>vars</snippet></ROW><ROW><id>17955645</id><snippet>QtCore.Qt.DirectConnection</snippet></ROW><ROW><id>17955645</id><snippet>DownloadThread</snippet></ROW><ROW><id>17955645</id><snippet>threadDone</snippet></ROW><ROW><id>17955645</id><snippet>DownloadThread</snippet></ROW><ROW><id>17955645</id><snippet>QPixmap: It is not safe to use pixmaps outside the GUI thread</snippet></ROW><ROW><id>17955987</id><snippet>for dirpath, dirnames, filenames in os.walk(mydir):
    if not dirnames:
        print dirpath, "has 0 subdirectories and", len(filenames), "files"
</snippet></ROW><ROW><id>17955994</id><snippet>for line in raw:
</snippet></ROW><ROW><id>17955994</id><snippet>line</snippet></ROW><ROW><id>17955994</id><snippet>noisy = line.rstrip() + " " + addNoise
</snippet></ROW><ROW><id>17956120</id><snippet>type(data[0]['field1'])</snippet></ROW><ROW><id>17956120</id><snippet>&lt;class 'numpy.bytes_'&gt;</snippet></ROW><ROW><id>17956120</id><snippet>split()</snippet></ROW><ROW><id>17956120</id><snippet>data[0]['field1'].split(sep=b'-')</snippet></ROW><ROW><id>17956120</id><snippet>np.core.defchararray.partition(a, '-')</snippet></ROW><ROW><id>17956120</id><snippet>b'-'</snippet></ROW><ROW><id>17956296</id><snippet>self.dump={}</snippet></ROW><ROW><id>17956296</id><snippet>__setattr__</snippet></ROW><ROW><id>17956296</id><snippet>dump</snippet></ROW><ROW><id>17956296</id><snippet>__getattr__</snippet></ROW><ROW><id>17956296</id><snippet>dump</snippet></ROW><ROW><id>17956296</id><snippet>dump</snippet></ROW><ROW><id>17956296</id><snippet>__getattr__</snippet></ROW><ROW><id>17956296</id><snippet>dump</snippet></ROW><ROW><id>17956296</id><snippet>object.__setattr__</snippet></ROW><ROW><id>17956296</id><snippet>class Namespace(object):
    def __getattr__(self, attr):
        return ''
</snippet></ROW><ROW><id>17956296</id><snippet>__getattr__</snippet></ROW><ROW><id>17956412</id><snippet>import boto.elastictranscoder
transcode = boto.elastictranscoder.connect_to_region('us-west-2')
transcode.create_job(...)
</snippet></ROW><ROW><id>17956470</id><snippet>&gt;&gt;&gt; x = numpy.ones((100, 100), dtype=numpy.uint8)
&gt;&gt;&gt; %timeit x.sum(axis=0)
10000 loops, best of 3: 40.6 us per loop
&gt;&gt;&gt; %timeit x.sum(axis=1)
10000 loops, best of 3: 36.1 us per loop

&gt;&gt;&gt; x = numpy.ones((100, 100), dtype=numpy.float64)
&gt;&gt;&gt; %timeit x.sum(axis=0)
10000 loops, best of 3: 28.8 us per loop
&gt;&gt;&gt; %timeit x.sum(axis=1)
10000 loops, best of 3: 28.8 us per loop
</snippet></ROW><ROW><id>17956470</id><snippet>&gt;&gt;&gt; x = numpy.ones((1000, 1000), dtype=numpy.uint8)
&gt;&gt;&gt; %timeit x.sum(axis=0)
100 loops, best of 3: 2.36 ms per loop
&gt;&gt;&gt; %timeit x.sum(axis=1)
1000 loops, best of 3: 1.9 ms per loop

&gt;&gt;&gt; x = numpy.ones((1000, 1000), dtype=numpy.float64)
&gt;&gt;&gt; %timeit x.sum(axis=0)
100 loops, best of 3: 2.04 ms per loop
&gt;&gt;&gt; %timeit x.sum(axis=1)
1000 loops, best of 3: 1.89 ms per loop
</snippet></ROW><ROW><id>17956470</id><snippet>order='F'</snippet></ROW><ROW><id>17956470</id><snippet>numpy.asarray</snippet></ROW><ROW><id>17956470</id><snippet>numpy.ones</snippet></ROW><ROW><id>17956470</id><snippet>numpy.zeros</snippet></ROW><ROW><id>17956470</id><snippet>numpy.asfortranarray</snippet></ROW><ROW><id>17956470</id><snippet>in [10]: y = numpy.asfortranarray(x)
in [11]: %timeit y.sum(axis=0)
1000 loops, best of 3: 1.89 ms per loop
in [12]: %timeit y.sum(axis=1)
100 loops, best of 3: 2.01 ms per loop
</snippet></ROW><ROW><id>17956708</id><snippet>fileinput</snippet></ROW><ROW><id>17956708</id><snippet>import fileinput
import sys

for line in fileinput.input([filename], inplace=True):
    if condition:
        sys.stdout.write(newline)
    else:
        sys.stdout.write(line)
</snippet></ROW><ROW><id>17956708</id><snippet>filename</snippet></ROW><ROW><id>17956733</id><snippet>names = {1: "first", 2: "second", 3: "third"    # and so on...
        }

items = []

for i in range(5):
    item = input("Input your {} thing: ".format(names[i+1])
    items.append(item)
print(items)
</snippet></ROW><ROW><id>17956733</id><snippet>def getord(n):
    s=str(n)
    return s+("th" if s[-2:] in ("11","12","13") else ((["st","nd","rd"]+
                                                        ["th" for i in range(7)])
                                                        [int(s[-1])-1]))
</snippet></ROW><ROW><id>17956989</id><snippet>dict</snippet></ROW><ROW><id>17956989</id><snippet>__missing__</snippet></ROW><ROW><id>17956989</id><snippet>class missingdict(dict):
    def __missing__(self, key):
        return 'default'  # note, does *not* set self[key]
</snippet></ROW><ROW><id>17956989</id><snippet>&gt;&gt;&gt; d = missingdict()
&gt;&gt;&gt; d['foo']
'default'
&gt;&gt;&gt; d
{}
</snippet></ROW><ROW><id>17956989</id><snippet>defaultdict</snippet></ROW><ROW><id>17956989</id><snippet>from collections import defaultdict

class missingdict(defaultdict):
    def __missing__(self, key):
        return self.default_factory() 
</snippet></ROW><ROW><id>17956989</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; class missingdict(defaultdict):
...     def __missing__(self, key):
...         return self.default_factory() 
... 
&gt;&gt;&gt; d = missingdict(list)
&gt;&gt;&gt; d['foo']
[]
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {})
</snippet></ROW><ROW><id>17956989</id><snippet>__repr__</snippet></ROW><ROW><id>17957110</id><snippet>uniquevalues = {row.value for row in rows}
</snippet></ROW><ROW><id>17957110</id><snippet>rows</snippet></ROW><ROW><id>17957110</id><snippet>with open('myfile.txt') as infile:
    uniquevalues = {row.split(': ')[1] for row in infile}
</snippet></ROW><ROW><id>17957266</id><snippet>from pyparsing import Word, alphas
greet = Word( alphas ) + "," + Word( alphas ) + "!" # &lt;-- grammar defined here
hello = "Hello, World!"
print (hello, "-&gt;", greet.parseString( hello ))
</snippet></ROW><ROW><id>17957266</id><snippet>Hello, World! -&gt; ['Hello', ',', 'World', '!']
</snippet></ROW><ROW><id>17957266</id><snippet>from pyparsing import *
import json

identifier = Word(alphas + nums + "_")
expression = identifier("lhs") + Suppress("=") + identifier("rhs")
struct_vals = delimitedList(Group(expression | identifier))
structure = Group(identifier + nestedExpr(opener="{", closer="}", content=struct_vals("vals")))
grammar = delimitedList(structure)

my_string = "something{name1, name2, opt1=2, opt2=text}, something_else{name3, opt1=58}"
parse_result = grammar.parseString(my_string)
result_list = parse_result.asList()

def list_to_dict(l):
    d = {}
    for struct in l:
        d[struct[0]] = {}
        for ident in struct[1]:
            if len(ident) == 2:
                d[struct[0]][ident[0]] = ident[1]
            elif len(ident) == 1:
                d[struct[0]][ident[0]] = None
    return d

print json.dumps(list_to_dict(result_list), indent=2)
</snippet></ROW><ROW><id>17957266</id><snippet>{
  "something_else": {
    "opt1": "58", 
    "name3": null
  }, 
  "something": {
    "opt1": "2", 
    "opt2": "text", 
    "name2": null, 
    "name1": null
  }
}
</snippet></ROW><ROW><id>17957267</id><snippet>None</snippet></ROW><ROW><id>17957267</id><snippet>foo</snippet></ROW><ROW><id>17957267</id><snippet>foo = [sum(i,x) for i, x in enumerate(bar_list)]
</snippet></ROW><ROW><id>17957267</id><snippet>foo = MyContainer(sum(i, x) for i, x in enumerate(bar_list))
</snippet></ROW><ROW><id>17957267</id><snippet>foo</snippet></ROW><ROW><id>17957267</id><snippet>foo.extend(sum(i,x) for i, x in enumerate(bar_list))
</snippet></ROW><ROW><id>17957267</id><snippet>append()</snippet></ROW><ROW><id>17957267</id><snippet>for</snippet></ROW><ROW><id>17957267</id><snippet>any(foo.append(sum(i, x)) for i, x in enumerate(bar_list))
</snippet></ROW><ROW><id>17957267</id><snippet>for</snippet></ROW><ROW><id>17957267</id><snippet>any</snippet></ROW><ROW><id>17957267</id><snippet>foo.append()</snippet></ROW><ROW><id>17957267</id><snippet>collections.deque</snippet></ROW><ROW><id>17957267</id><snippet>from collections import deque
do = deque([], maxlen=0).extend

do(foo.append(sum(i, x)) for i, x in enumerate(bar_list))
</snippet></ROW><ROW><id>17957267</id><snippet>any()</snippet></ROW><ROW><id>17957267</id><snippet>do()</snippet></ROW><ROW><id>17957267</id><snippet>any()</snippet></ROW><ROW><id>17957267</id><snippet>for</snippet></ROW><ROW><id>17957424</id><snippet>not 'autobuy''buy'</snippet></ROW><ROW><id>17957424</id><snippet>false</snippet></ROW><ROW><id>17957424</id><snippet>if command_name not in self._command_cost_dict and not 'autobuy''buy':
</snippet></ROW><ROW><id>17957424</id><snippet>elif command_name not in self._command_cost_dict:
</snippet></ROW><ROW><id>17957424</id><snippet>autobuy</snippet></ROW><ROW><id>17957424</id><snippet>buy</snippet></ROW><ROW><id>17957679</id><snippet>{{ deet.value*100|round(1) }}
</snippet></ROW><ROW><id>17957679</id><snippet>{{ 100*deet.value|round(1) }}
</snippet></ROW><ROW><id>17957722</id><snippet>requests</snippet></ROW><ROW><id>17957722</id><snippet>.json()</snippet></ROW><ROW><id>17957722</id><snippet>&lt;a href="http://www.example.com/very_big_file.exe"&gt;Free Cookies!&lt;/a&gt;</snippet></ROW><ROW><id>17957722</id><snippet>requests</snippet></ROW><ROW><id>17957722</id><snippet>Content-Type</snippet></ROW><ROW><id>17957887</id><snippet>FileField</snippet></ROW><ROW><id>17957887</id><snippet>href="{{inline_admin_form.original.path.url}}"</snippet></ROW><ROW><id>17957993</id><snippet>$ VAR1=one VAR2=two someprogram param1 param2
</snippet></ROW><ROW><id>17957993</id><snippet>$ PYTHONPATH=. python geddit/controller.py geddit.db
</snippet></ROW><ROW><id>17958165</id><snippet>try:
  with open(xmlfilename, 'r') as f:
    return etree.fromstring(f.read(), xmlparser)
except etree.XMLSyntaxError:
  print traceback.format_exc()
</snippet></ROW><ROW><id>17958380</id><snippet>data=None</snippet></ROW><ROW><id>17958380</id><snippet>plot</snippet></ROW><ROW><id>17958418</id><snippet>import sys
from PyQt4 import QtCore, QtGui


class MyWin(QtGui.QWidget):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.label = QtGui.QLabel('time', self)
        self.setLayout(QtGui.QVBoxLayout())
        self.layout().addWidget(self.label)

        self.timer = QtCore.QTimer(self)
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.displayTime)
        self.timer.start()

    def displayTime(self):
        self.label.setText(QtCore.QDateTime.currentDateTime().toString())


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    win = MyWin()
    win.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>17958418</id><snippet>QLabel</snippet></ROW><ROW><id>17958418</id><snippet>QTimer</snippet></ROW><ROW><id>17958418</id><snippet>QTimer.timeout()</snippet></ROW><ROW><id>17958418</id><snippet>start()</snippet></ROW><ROW><id>17958439</id><snippet>import msvcrt
one_character= msvcrt.getch()
</snippet></ROW><ROW><id>17958439</id><snippet>import sys, tty
tty.setraw(sys.stdin.fileno())
one_character= sys.stdin.read(1)
</snippet></ROW><ROW><id>17958439</id><snippet>sys.stdin</snippet></ROW><ROW><id>17958439</id><snippet>import sys, termios
previous_mode= termios.tcgetattr( sys.stdin.fileno() )
</snippet></ROW><ROW><id>17958439</id><snippet>import sys, termios
termios.tcsetattr(sys.stdin.fileno(),termios.TCSADRAIN, previous_mode )
</snippet></ROW><ROW><id>17958638</id><snippet>v</snippet></ROW><ROW><id>17958638</id><snippet>df</snippet></ROW><ROW><id>17958638</id><snippet>In [11]: v = pd.Series([2, 1, 0])

In [12]: df = pd.DataFrame([[1, 1, 1], [2, 2, 2]])
</snippet></ROW><ROW><id>17958638</id><snippet>v_i - v</snippet></ROW><ROW><id>17958638</id><snippet>In [13]: df - v
Out[13]:
   0  1  2
0 -1  0  1
1  0  1  2
</snippet></ROW><ROW><id>17958638</id><snippet>In [14]: ((df - v) ** 2).sum(1)
Out[14]:
0    2
1    5
dtype: int64
</snippet></ROW><ROW><id>17958638</id><snippet>v</snippet></ROW><ROW><id>17958638</id><snippet>In [15]: ((df - v) ** 2).sum(1).argmin()
Out[15]: 0

In [16]: df.loc[0]
Out[16]:
0    1
1    1
2    1
Name: 0, dtype: int64
</snippet></ROW><ROW><id>17958696</id><snippet>&gt;&gt;&gt; li = [1, 2, 3, 4]
&gt;&gt;&gt; li[1:]
[2, 3, 4]
&gt;&gt;&gt; li[-3:]
[2, 3, 4]
</snippet></ROW><ROW><id>17958696</id><snippet>-n</snippet></ROW><ROW><id>17958696</id><snippet>len(l) - n</snippet></ROW><ROW><id>17958696</id><snippet>n</snippet></ROW><ROW><id>17958696</id><snippet>0</snippet></ROW><ROW><id>17958696</id><snippet>&gt;&gt;&gt; li[-6:]
[1, 2, 3, 4]
&gt;&gt;&gt;
&gt;&gt;&gt; li[:60]
[1, 2, 3, 4]
&gt;&gt;&gt;
&gt;&gt;&gt; li[-100:100]
[1, 2, 3, 4]
</snippet></ROW><ROW><id>17958696</id><snippet>&gt;&gt;&gt; li[-1]
4
&gt;&gt;&gt; li[len(li) - 1]  # Same as previous
4
&gt;&gt;&gt; li[-100]
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list index out of range
</snippet></ROW><ROW><id>17958789</id><snippet>result = {"startdate": Start_date,"datacenter": dc,"system": sys}
print json.dumps(result)
</snippet></ROW><ROW><id>17958789</id><snippet>var response = JSON.parse(data);
console.log("The json startdate is " + response.startdate); //prints undefined
</snippet></ROW><ROW><id>17958830</id><snippet>In [1]: list = ['Scott 83% top', 'Tony 22%', 'Tony B 12% failed', 'James 66%', 'James Lipton 9%', 'Adams 76% excellent', 'Scott Brown 53%']

In [2]: pattern = ['Scott', 'Tony', 'James']    

In [3]: l=[]

In [4]: for item in list:                                                                                                                                                   
   ...:     for p in pattern:
   ...:         if item.startswith(p):
   ...:             l.append(item)
   ...:             pattern.remove(p)
   ...:             break
   ...:             

In [5]: l
Out[5]: ['Scott 83% top', 'Tony 22%', 'James 66%']
</snippet></ROW><ROW><id>17958845</id><snippet>input = [('pete', 33), ('ann',7), ('ruth',3), ('ann',5), ('austin',90)]
</snippet></ROW><ROW><id>17958845</id><snippet>defaultdict</snippet></ROW><ROW><id>17958845</id><snippet>from collections import defaultdict
d = defaultdict(int)

for k, v in input:
    d[k] += v

d
=&gt; defaultdict(&lt;type 'int'&gt;, {'pete': 33, 'ann': 12, 'ruth': 3, 'austin': 90})
</snippet></ROW><ROW><id>17958845</id><snippet>Counter</snippet></ROW><ROW><id>17958845</id><snippet>from collections import Counter
d = Counter()

for k, v in input:
    d.update({k:v})

d
=&gt; Counter({'austin': 90, 'pete': 33, 'ann': 12, 'ruth': 3})
</snippet></ROW><ROW><id>17958845</id><snippet>d = {}
for k, v in input:
    if k in d:
        d[k] += v
    else:
        d[k] = v

d
=&gt; {'pete': 33, 'ann': 12, 'ruth': 3, 'austin': 90}
</snippet></ROW><ROW><id>17959042</id><snippet>stat</snippet></ROW><ROW><id>17959042</id><snippet>stat</snippet></ROW><ROW><id>17959103</id><snippet>from flask import Flask, send_file
app = Flask(__name__)
app.debug = True

# Your get_information method

@app.route("/weather.csv")
def weather():
    url = "http://api.wunderground.com/api/8d3b5d3fa03ddb6f/conditions/weather/q/China/Beijing.json"
    get_information(url)
    return send_file("out.csv")

if __name__ == '__main__':
    app.run()   
</snippet></ROW><ROW><id>17959303</id><snippet>numpy.nonzero(data[:,0]==6)[0]
</snippet></ROW><ROW><id>17959303</id><snippet>data[data[:,0]==6,2]
</snippet></ROW><ROW><id>17959337</id><snippet>usr/lib/python3/dist-packages/graphics.py</snippet></ROW><ROW><id>17959337</id><snippet>line 153, in import Tkinter as tk 
</snippet></ROW><ROW><id>17959337</id><snippet>import tkinter as tk</snippet></ROW><ROW><id>17959384</id><snippet>line.replace()</snippet></ROW><ROW><id>17959384</id><snippet>line</snippet></ROW><ROW><id>17959384</id><snippet>import fileinput, sys

for line in fileinput.input(['tooltips.txt'], inplace=True, backup="bak.txt"):
    sys.stdout.write(line.replace("oldString1", "newString1"))
</snippet></ROW><ROW><id>17959453</id><snippet>1,3,6,7</snippet></ROW><ROW><id>17959453</id><snippet>insert into newTable (userid, groupid)
select id, groupid
from (
    select
        id,
        regexp_split_to_table(olgroups, ',') as groupid
    from oldTable
) o
where
    not exists (
        select 1
        from newTable
        where groupid = o.groupid
    )
    and groupid &lt; 10000000
</snippet></ROW><ROW><id>17959453</id><snippet>insert into newTable (userid, groupid)
select id, groupid
from (
    select
        id,
        regexp_split_to_table(olgroups, ',') as groupid
    from oldTable
) o
where
    not exists (
        select 1
        from newTable
        where groupid = o.groupid and id = o.id
    )
    and groupid &lt; 10000000
</snippet></ROW><ROW><id>17959453</id><snippet>regexp_split_to_table</snippet></ROW><ROW><id>17959453</id><snippet>oldgroups</snippet></ROW><ROW><id>17959470</id><snippet>statictest.py</snippet></ROW><ROW><id>17959470</id><snippet>from contextlib import contextmanager
import importlib
import random
import sys

MODULE_NAME = 'statictest'
NUM_INSTANCES = 4
instances = []

# initialize module instances
for _ in xrange(NUM_INSTANCES):
    if MODULE_NAME in sys.modules:
        del sys.modules[MODULE_NAME]

    module = importlib.import_module(MODULE_NAME)
    for _ in xrange(random.randrange(10)): # call testcount a random # of times
        module.Test.testcount()

    instances.append(sys.modules[MODULE_NAME])

@contextmanager
def statictest_inst(n):
    save = sys.modules[MODULE_NAME]
    sys.modules[MODULE_NAME] = instances[n]
    yield instances[n]
    sys.modules[MODULE_NAME] = save

def get_counts():
    counts = []
    for i in xrange(NUM_INSTANCES):
        with statictest_inst(i) as inst:
            counts.append(inst.count)
    return counts

print 'initial counts', get_counts()

choice = random.randrange(NUM_INSTANCES)
print 'calling instance[{}].testcount()'.format(choice)
with statictest_inst(choice) as inst: # use context manager
    inst.Test.testcount()

print 'counts after updating one of them', get_counts()
</snippet></ROW><ROW><id>17959470</id><snippet>initial counts [2, 4, 4, 1]
calling instance[2].testcount()
counts after updating one of them [2, 4, 5, 1]
</snippet></ROW><ROW><id>17959572</id><snippet>python modu2.py</snippet></ROW><ROW><id>17959572</id><snippet>myapp.modu1</snippet></ROW><ROW><id>17959572</id><snippet>myapp/myapp/modu1.py</snippet></ROW><ROW><id>17959572</id><snippet>myapp</snippet></ROW><ROW><id>17959572</id><snippet>main.py</snippet></ROW><ROW><id>17959572</id><snippet>myapp</snippet></ROW><ROW><id>17959572</id><snippet>/main.py
/myapp
    /__init__.py
    /modu1.py
    /modu2.py
</snippet></ROW><ROW><id>17959572</id><snippet>import myapp.modu2
</snippet></ROW><ROW><id>17959572</id><snippet>python main.py</snippet></ROW><ROW><id>17959659</id><snippet>e2vec</snippet></ROW><ROW><id>17959659</id><snippet>(1, 3)</snippet></ROW><ROW><id>17959659</id><snippet>np.dot</snippet></ROW><ROW><id>17959659</id><snippet>nupost = (np.arccos(np.dot(r0, e2vec.ravel()) / (Re * e2)) * 180.0 / np.pi)
</snippet></ROW><ROW><id>17959742</id><snippet>"insert string here"</snippet></ROW><ROW><id>17959742</id><snippet>python_file.txt</snippet></ROW><ROW><id>17959742</id><snippet>infile=open("python_file.rtf","w")
infile.write("{\rtf1 insert string here }")
infile.close()
</snippet></ROW><ROW><id>17960039</id><snippet>import sys
getattr(sys.modules[__name__], "Foo")

# or 

globals()['Foo']
</snippet></ROW><ROW><id>17960151</id><snippet>a</snippet></ROW><ROW><id>17960151</id><snippet>b</snippet></ROW><ROW><id>17960151</id><snippet>c</snippet></ROW><ROW><id>17960151</id><snippet>10</snippet></ROW><ROW><id>17960151</id><snippet>c = 123</snippet></ROW><ROW><id>17960151</id><snippet>c</snippet></ROW><ROW><id>17960151</id><snippet>c</snippet></ROW><ROW><id>17960151</id><snippet>123</snippet></ROW><ROW><id>17960151</id><snippet>a</snippet></ROW><ROW><id>17960151</id><snippet>b</snippet></ROW><ROW><id>17960151</id><snippet>a ---+
     |
b ---+---&gt; 10-object
     |
c ---+
</snippet></ROW><ROW><id>17960151</id><snippet>c = 123</snippet></ROW><ROW><id>17960151</id><snippet>a ---+
     |
b ---+---&gt; 10-object

c -------&gt; 123-object
</snippet></ROW><ROW><id>17960151</id><snippet>l</snippet></ROW><ROW><id>17960151</id><snippet>l</snippet></ROW><ROW><id>17960151</id><snippet>list1</snippet></ROW><ROW><id>17960151</id><snippet>l -------&gt; list2 {list1, list1, list1}
m -------&gt; list1 {0-object}
</snippet></ROW><ROW><id>17960151</id><snippet>l[0][0] = 1</snippet></ROW><ROW><id>17960151</id><snippet>m[0] = 1</snippet></ROW><ROW><id>17960151</id><snippet>m</snippet></ROW><ROW><id>17960151</id><snippet>list2</snippet></ROW><ROW><id>17960151</id><snippet>list1</snippet></ROW><ROW><id>17960151</id><snippet>list2</snippet></ROW><ROW><id>17960151</id><snippet>1-object</snippet></ROW><ROW><id>17960151</id><snippet>l -------&gt; list2 {list1, list1, list1}
m -------&gt; list1 {1-object}
</snippet></ROW><ROW><id>17960151</id><snippet>list1</snippet></ROW><ROW><id>17960151</id><snippet>l[0][0]</snippet></ROW><ROW><id>17960151</id><snippet>m[0]</snippet></ROW><ROW><id>17960151</id><snippet>&gt;&gt;&gt; m = [0]
&gt;&gt;&gt; l = [m] * 3
&gt;&gt;&gt; m
[0]

&gt;&gt;&gt; l
[[0], [0], [0]]

&gt;&gt;&gt; l[0][0] = 1
&gt;&gt;&gt; l
[[1], [1], [1]]

&gt;&gt;&gt; m
[1]

&gt;&gt;&gt; m[0] = 42
&gt;&gt;&gt; l
[[42], [42], [42]]
</snippet></ROW><ROW><id>17960151</id><snippet>m</snippet></ROW><ROW><id>17960151</id><snippet>list2</snippet></ROW><ROW><id>17960151</id><snippet>&gt;&gt;&gt; m = [999]
&gt;&gt;&gt; l
[[42], [42], [42]]
</snippet></ROW><ROW><id>17960151</id><snippet>l -------&gt; list2 {list1, list1, list1}
           list1 {42-object}
m -------&gt; list3 {999-object}
</snippet></ROW><ROW><id>17960324</id><snippet>.*</snippet></ROW><ROW><id>17960324</id><snippet>.*?</snippet></ROW><ROW><id>17960324</id><snippet>&gt;&gt;&gt; re.findall('&lt;span&gt;([a-zA-Z]+)&lt;/span&gt;(.*?)([0-9]+)',string)
[('Name', '&lt;/p&gt;&lt;div class="info"&gt;&lt;span&gt;', '100')]
</snippet></ROW><ROW><id>17960470</id><snippet>lxml</snippet></ROW><ROW><id>17960470</id><snippet>table</snippet></ROW><ROW><id>17960470</id><snippet>class="last"</snippet></ROW><ROW><id>17960470</id><snippet>tr</snippet></ROW><ROW><id>17960470</id><snippet>    &lt;/tr&gt;&lt;tr class="last"&gt;&lt;td&gt;TRADING HOURS&lt;/td&gt;&#13;
</snippet></ROW><ROW><id>17960470</id><snippet>//table[@class="last"]
</snippet></ROW><ROW><id>17960470</id><snippet>@id"tradingHours"</snippet></ROW><ROW><id>17960470</id><snippet>@id="tradingHours"</snippet></ROW><ROW><id>17960470</id><snippet>//table[@class="last"]</snippet></ROW><ROW><id>17960470</id><snippet>table[@id="tradingHours"]</snippet></ROW><ROW><id>17960470</id><snippet>import urllib2
import lxml.html as LH

url = 'https://www.theice.com/productguide/ProductSpec.shtml?specId=251'
doc = LH.parse(urllib2.urlopen(url))
for td in doc.xpath('//table[@id="tradingHours"]//td/text()'):
    print(td.strip())
</snippet></ROW><ROW><id>17960470</id><snippet>zip(*[iterable]*n)</snippet></ROW><ROW><id>17960470</id><snippet>iterable</snippet></ROW><ROW><id>17960470</id><snippet>n</snippet></ROW><ROW><id>17960470</id><snippet>texts = iter(doc.xpath('//table[@id="tradingHours"]//td/text()'))
for group in zip(*[texts]*5):
    row = [item.strip() for item in group]
    print('\n'.join(row))
    print('-'*80)
</snippet></ROW><ROW><id>17960470</id><snippet>import urllib2
import lxml.html as LH
import contextlib
import selenium.webdriver as webdriver

url = 'https://www.theice.com/productguide/ProductSpec.shtml?specId=251'
with contextlib.closing(webdriver.PhantomJS('phantomjs')) as driver:
    driver.get(url)
    content = driver.page_source
    doc = LH.fromstring(content)
    texts = iter(doc.xpath('//table[@id="tradingHours"]//td/text()'))
    for group in zip(*[texts]*5):
        row = [item.strip() for item in group]
        print('\n'.join(row))
        print('-'*80)
</snippet></ROW><ROW><id>17960470</id><snippet>NEW YORK
8:00 PM-2:15 PM *
20:00-14:15
7:30 PM
19:30
--------------------------------------------------------------------------------
LONDON
1:00 AM-7:15 PM
01:00-19:15
12:30 AM
00:30
--------------------------------------------------------------------------------
SINGAPORE
8:00 AM-2:15 AM *
08:00-02:15
7:30 AM
07:30
--------------------------------------------------------------------------------
</snippet></ROW><ROW><id>17960470</id><snippet>import dateutil.parser as parser
import pytz

text = 'Tue Jul 30 20:00:00 EDT 2013'
date = parser.parse(text)
date = date.replace(tzinfo=None)
print(date.strftime('%I:%M %p'))
# 08:00 PM

ny = pytz.timezone('America/New_York')
london = pytz.timezone('Europe/London')
london_date = ny.localize(date).astimezone(london)
print(london_date.strftime('%I:%M %p'))
# 01:00 AM
</snippet></ROW><ROW><id>17960528</id><snippet>grid</snippet></ROW><ROW><id>17960528</id><snippet>create_window</snippet></ROW><ROW><id>17960528</id><snippet>create_window</snippet></ROW><ROW><id>17960528</id><snippet>scrollregion</snippet></ROW><ROW><id>17960528</id><snippet>bbox</snippet></ROW><ROW><id>17960528</id><snippet>canvas.configure(scrollregion=canvas.bbox("all"))
</snippet></ROW><ROW><id>17960617</id><snippet>&gt;&gt;&gt; np.dstack((a,b))
array([[[0, 0],
        [1, 1],
        [2, 2],
        [3, 3]],

       [[4, 4],
        [5, 5],
        [6, 6],
        [7, 7]]])
</snippet></ROW><ROW><id>17960617</id><snippet>&gt;&gt;&gt; np.array(zip(a.ravel(),b.ravel()), dtype=('i4,i4')).reshape(a.shape)
array([[(0, 0), (1, 1), (2, 2), (3, 3)],
       [(4, 4), (5, 5), (6, 6), (7, 7)]],
      dtype=[('f0', '&lt;i4'), ('f1', '&lt;i4')])
</snippet></ROW><ROW><id>17960638</id><snippet>pynsq</snippet></ROW><ROW><id>17960675</id><snippet>str()</snippet></ROW><ROW><id>17960675</id><snippet>sep</snippet></ROW><ROW><id>17960675</id><snippet>end</snippet></ROW><ROW><id>17960675</id><snippet>print</snippet></ROW><ROW><id>17960675</id><snippet>"Multiply: " + str(a*b)</snippet></ROW><ROW><id>17960675</id><snippet>sep</snippet></ROW><ROW><id>17960675</id><snippet>str</snippet></ROW><ROW><id>17960675</id><snippet>print("Multiply:", a*b)
print("Multiply: " + str(a*b))
print("Multiply: ", a*b, sep="")
</snippet></ROW><ROW><id>17961151</id><snippet>from collections import OrderedDict

_currency_values = [ 
    ('twenties',20),
    ('tens',10),
    ('fives',5),
    ('ones',1),
    ('quarters',0.25),
    ('dimes',0.10),
    ('nickels',0.05),
    ('pennies',0.01),
]
currency_values = OrderedDict(_currency_values)

def user_change(balance):
    user_change_results = []
    for currency in currency_values.keys():
        #print balance
        if balance == 0:
            break
        currency_amount = currency_values[currency]
        currency_change_amount = balance//currency_amount
        user_change_results.append((currency,currency_change_amount))
        balance-=(currency_change_amount*currency_amount)

    return user_change_results

if __name__ == '__main__':
    print user_change(34.36)
</snippet></ROW><ROW><id>17961151</id><snippet>currency_values = {
    'twenties' : 20,
    'tens' : 10,
    'fives' : 5,
    'ones' : 1,
    'quarters' : 0.25,
    'dimes' : 0.10,
    'nickels' : 0.05,
    'pennies' : 0.01,
}

currency_order = ['twenties','tens','fives','ones','quarters','dimes','nickels','pennies']

def user_change(balance):
    user_change_results = []
    for currency in currency_order:
        #print balance
        if balance == 0:
            break
        currency_amount = currency_values[currency]
        currency_change_amount = balance//currency_amount
        user_change_results.append((currency,currency_change_amount))
        balance-=(currency_change_amount*currency_amount)

    return user_change_results

if __name__ == '__main__':
    print user_change(34.36)
</snippet></ROW><ROW><id>17961344</id><snippet>eval</snippet></ROW><ROW><id>17961344</id><snippet>globals()</snippet></ROW><ROW><id>17961344</id><snippet>names = ['foo', 'bar', 'baz']

d = {}
for name in names:
    d[name] = {}
</snippet></ROW><ROW><id>17961344</id><snippet>dict</snippet></ROW><ROW><id>17961344</id><snippet>d = {name: {} for name in names}
# d = dict((name, {}) for name in names) # generator expression version for pre-2.7
</snippet></ROW><ROW><id>17961388</id><snippet>   135 for __func_name in __always_supported:
   136     # try them all, some may not work due to the OpenSSL
   137     # version not supporting that algorithm.
   138     try:
   139         globals()[__func_name] = __get_hash(__func_name)
</snippet></ROW><ROW><id>17961388</id><snippet>__get_hash</snippet></ROW><ROW><id>17961388</id><snippet>__get_builtin_constructor</snippet></ROW><ROW><id>17961388</id><snippet>__get_openssl_constructor</snippet></ROW><ROW><id>17961388</id><snippet>__always_supported = ('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512')
</snippet></ROW><ROW><id>17961388</id><snippet>hashlib.md5()</snippet></ROW><ROW><id>17961388</id><snippet>66 def __get_builtin_constructor(name):
</snippet></ROW><ROW><id>17961388</id><snippet>md5</snippet></ROW><ROW><id>17961388</id><snippet>73             return _md5.new
</snippet></ROW><ROW><id>17961388</id><snippet>hashlib.md5</snippet></ROW><ROW><id>17961432</id><snippet>(a == b).sum()
</snippet></ROW><ROW><id>17961432</id><snippet>from numba import autojit
def pysumeq(a, b):
    tot = 0
    for i in xrange(a.shape[0]):
        for j in xrange(a.shape[1]):
            if a[i,j] == b[i,j]:
                tot += 1
    return tot
# make numba version
nbsumeq = autojit(pysumeq)
A = (rand(10,10)&lt;.5)
B = (rand(10,10)&lt;.5)
# do a simple dry run to get it to compile
# for this specific use case
nbsumeq(A, B)
</snippet></ROW><ROW><id>17961432</id><snippet>.pyx</snippet></ROW><ROW><id>17961432</id><snippet>from numpy cimport ndarray as ar
cimport numpy as np
cimport cython

@cython.boundscheck(False)
@cython.wraparound(False)
def cysumeq(ar[np.uint8_t,ndim=2,cast=True] a, ar[np.uint8_t,ndim=2,cast=True] b):
    cdef int i, j, h=a.shape[0], w=a.shape[1], tot=0
    for i in xrange(h):
        for j in xrange(w):
            if a[i,j] == b[i,j]:
                tot += 1
    return tot
</snippet></ROW><ROW><id>17961468</id><snippet>bar</snippet></ROW><ROW><id>17961468</id><snippet>foo</snippet></ROW><ROW><id>17961468</id><snippet>copy</snippet></ROW><ROW><id>17961468</id><snippet>bar</snippet></ROW><ROW><id>17961468</id><snippet>foo</snippet></ROW><ROW><id>17961468</id><snippet>In [1]: import pandas as pd
   ...: import numpy as np
   ...: foo = pd.DataFrame(np.random.random((10,5)))
   ...: 

In [2]: pd.__version__
Out[2]: '0.12.0.dev-35312e4'

In [3]: np.__version__
Out[3]: '1.7.1'

In [4]: # DataFrame has copy method
   ...: foo_copy = foo.copy()

In [5]: bar = foo.iloc[3:5,1:4]

In [6]: bar == foo.iloc[3:5,1:4] == foo_copy.iloc[3:5,1:4]
Out[6]: 
      1     2     3
3  True  True  True
4  True  True  True

In [7]: # Changing the view
   ...: bar.ix[3,1] = 5

In [8]: # View and DataFrame still equal
   ...: bar == foo.iloc[3:5,1:4]
Out[8]: 
      1     2     3
3  True  True  True
4  True  True  True

In [9]: # It is now different from a copy of original
   ...: bar == foo_copy.iloc[3:5,1:4]
Out[9]: 
       1     2     3
3  False  True  True
4   True  True  True
</snippet></ROW><ROW><id>17961808</id><snippet>marks</snippet></ROW><ROW><id>17961808</id><snippet>marks</snippet></ROW><ROW><id>17961808</id><snippet>rec = {
    '_id' : 1,
    'class' : 'Python'
}

rec['students'] = [{'name': 'Jack', 'marks': 90}, {'name': 'Jill', 'marks': 80}]

db['class'].insert(rec)
</snippet></ROW><ROW><id>17962288</id><snippet>eigen_symmetric</snippet></ROW><ROW><id>17962288</id><snippet>eigsh</snippet></ROW><ROW><id>17962288</id><snippet>Scipy 0.9.0</snippet></ROW><ROW><id>17962288</id><snippet>eigen_symmetric</snippet></ROW><ROW><id>17962288</id><snippet>eigsh</snippet></ROW><ROW><id>17962725</id><snippet>scons --debug=pdb &lt;args...&gt;
# from the wiki example: you can set a breakpoint on a file relative to sys.path
(Pdb) b SCons/Tool/msvc.py:158 
# you can set a breakpoint in the SConstruct file with the full path
(Pdb) b /Users/me/code/project/SConstruct:10
</snippet></ROW><ROW><id>17962727</id><snippet>QWidget</snippet></ROW><ROW><id>17962727</id><snippet>contextMenuPolicy</snippet></ROW><ROW><id>17962727</id><snippet>QAction</snippet></ROW><ROW><id>17962727</id><snippet>widget.addAction()</snippet></ROW><ROW><id>17962727</id><snippet>widget.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)</snippet></ROW><ROW><id>17962861</id><snippet>[^(0x)]</snippet></ROW><ROW><id>17962861</id><snippet>(</snippet></ROW><ROW><id>17962861</id><snippet>0</snippet></ROW><ROW><id>17962861</id><snippet>x</snippet></ROW><ROW><id>17962861</id><snippet>)</snippet></ROW><ROW><id>17962861</id><snippet>&gt;&gt;&gt; re.findall(r'(?&lt;!0x)\d+\b', '0 0x111 50505 20201 0012')
['0', '11', '50505', '20201', '0012']
</snippet></ROW><ROW><id>17962861</id><snippet>&gt;&gt;&gt; re.findall(r'\b\d+\b', '0 0x111 50505 20201 0012')
['0', '50505', '20201', '0012']
</snippet></ROW><ROW><id>17963027</id><snippet>non_negative=True</snippet></ROW><ROW><id>17963027</id><snippet>FeatureHasher</snippet></ROW><ROW><id>17963237</id><snippet>"_ref_ck" : "587d56547765f577cfdaaa3a7ac8328c"</snippet></ROW><ROW><id>17963316</id><snippet>&lt;form name="category_form" id="category_form" action="/endpoint"&gt;
    &lt;select name='category' id='category'&gt;
        &lt;option value='1'&gt;Option 1&lt;/option&gt;
        &lt;option value='2'&gt;Option 2&lt;/option&gt;
        &lt;option value='3'&gt;Option 3&lt;/option&gt;
    &lt;/select&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>17963316</id><snippet>$(document).ready( function() {
    var form = $('#category_form');

    form.find('#category').change(function(){
        $.ajax({
            type: "POST",
            url: form.attr('action'),
            data: form.serialize(),
            success: function(response) {
                //optionally do something
            }
        });
    });
});
</snippet></ROW><ROW><id>17963316</id><snippet>if request.method == 'POST':
    data = request.form
    #do something with data
</snippet></ROW><ROW><id>17963316</id><snippet>data</snippet></ROW><ROW><id>17963327</id><snippet>str</snippet></ROW><ROW><id>17963327</id><snippet>[ ]</snippet></ROW><ROW><id>17963327</id><snippet>()</snippet></ROW><ROW><id>17963405</id><snippet>from lxml import etree

# Code to make hashTags list...

array = etree.Element('array')
# Note: array can be also SubElement(parent, 'array')
for hash in hashTags:
    string = etree.SubElement(array, 'string')
    string.text = hash
print(etree.tostring(array, pretty_print=True)
</snippet></ROW><ROW><id>17963407</id><snippet>object</snippet></ROW><ROW><id>17963407</id><snippet>class database(object):
</snippet></ROW><ROW><id>17963808</id><snippet>SELECT</snippet></ROW><ROW><id>17963808</id><snippet>gtfs_stops</snippet></ROW><ROW><id>17963808</id><snippet>gtfs_stops</snippet></ROW><ROW><id>17963808</id><snippet>trip_seq</snippet></ROW><ROW><id>17963808</id><snippet>stop_code</snippet></ROW><ROW><id>17963808</id><snippet>gtfs_stops</snippet></ROW><ROW><id>17964085</id><snippet>directions == 'upleft'</snippet></ROW><ROW><id>17964085</id><snippet>if paddleRect.colliderect(ballRect):
    if direction == 'upleft':
        direction = 'upright'
        ballRect.left += BALLSPEEDX * 4
        ballRect.top -= BALLSPEEDY * 4
    if direction == 'upright':
        direction = 'upleft'
        ballRect.left += BALLSPEEDX * 4
        ballRect.top -= BALLSPEEDY * 4
</snippet></ROW><ROW><id>17964085</id><snippet>if paddleRect.colliderect(ballRect):
    if direction == 'upleft':
        direction = 'upright'
        ballRect.left += BALLSPEEDX * 4
        ballRect.top -= BALLSPEEDY * 4
    elif direction == 'upright':
        direction = 'upleft'
        ballRect.left += BALLSPEEDX * 4
        ballRect.top -= BALLSPEEDY * 4
    elif ...
</snippet></ROW><ROW><id>17964144</id><snippet>{% static %}</snippet></ROW><ROW><id>17964144</id><snippet>AWS_QUERYSTRING_AUTH</snippet></ROW><ROW><id>17964144</id><snippet>False</snippet></ROW><ROW><id>17964226</id><snippet>lxml</snippet></ROW><ROW><id>17964226</id><snippet>element.attrib</snippet></ROW><ROW><id>17964402</id><snippet> $("#langForm").on("submit", function(event){    
 $.post('/jobseeker/profile/', $(this).serialize(),
 function(data){
    alert('AJAX successful');
    //CreateRow(jdata);
 }, "json"); 
 return false;
});
</snippet></ROW><ROW><id>17964464</id><snippet>&gt;&gt;&gt; valid = '1234567890123456'
&gt;&gt;&gt; invalid = '1848934798237489324324'
&gt;&gt;&gt; len(valid) == 16 and valid.isdigit()
True
&gt;&gt;&gt; len(invalid) == 16 and invalid.isdigit()
False
</snippet></ROW><ROW><id>17964739</id><snippet>re.sub</snippet></ROW><ROW><id>17964739</id><snippet>String.prototype.replace</snippet></ROW><ROW><id>17964739</id><snippet>import re

def replacer(match):
    return match.group(1).upper()

rawString = "{{prefix_HelloWorld}}   testing this. {{_thiswillNotMatch}} {{prefix_Okay}}"
result = re.sub(r'\{\{prefix_(.+?)\}\}', replacer, rawString)
</snippet></ROW><ROW><id>17964739</id><snippet>'HELLOWORLD   testing this. {{_thiswillNotMatch}} OKAY'
</snippet></ROW><ROW><id>17964739</id><snippet>match</snippet></ROW><ROW><id>17964739</id><snippet>innerCapture</snippet></ROW><ROW><id>17964739</id><snippet>match.group(0)</snippet></ROW><ROW><id>17964739</id><snippet>match.group(1)</snippet></ROW><ROW><id>17964973</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>17964973</id><snippet>settings.py</snippet></ROW><ROW><id>17964973</id><snippet>__init__.py</snippet></ROW><ROW><id>17964973</id><snippet>management</snippet></ROW><ROW><id>17964973</id><snippet>commands</snippet></ROW><ROW><id>17965437</id><snippet>Car</snippet></ROW><ROW><id>17965437</id><snippet>Car</snippet></ROW><ROW><id>17965437</id><snippet>classmethod</snippet></ROW><ROW><id>17965437</id><snippet>Car</snippet></ROW><ROW><id>17965437</id><snippet>Car</snippet></ROW><ROW><id>17965437</id><snippet>@classmethod</snippet></ROW><ROW><id>17965437</id><snippet>cls</snippet></ROW><ROW><id>17965437</id><snippet>class Car(object):    
    colour = 'red'

    @classmethod
    def blue_cars(cls):
        # cls is the Car class
        # return all blue cars by looping over cls instances
</snippet></ROW><ROW><id>17965437</id><snippet>self</snippet></ROW><ROW><id>17965437</id><snippet>def get_colour(self):
    return self.colour
</snippet></ROW><ROW><id>17965437</id><snippet>classmethod</snippet></ROW><ROW><id>17965437</id><snippet>Car.blue_cars()
</snippet></ROW><ROW><id>17965437</id><snippet>my_car = Car(colour='red')
my_car.get_colour() # should return 'red'
</snippet></ROW><ROW><id>17965490</id><snippet>&gt;&gt;&gt; id(Test.__class__)
6384576
&gt;&gt;&gt; id(Test.__class__.__class__)
6384576
&gt;&gt;&gt; id(Test.__class__.__class__.__class__)
6384576
</snippet></ROW><ROW><id>17965490</id><snippet>__class__</snippet></ROW><ROW><id>17965490</id><snippet>&gt;&gt;&gt; (1).__class__
&lt;type 'int'&gt;
</snippet></ROW><ROW><id>17965490</id><snippet>type</snippet></ROW><ROW><id>17965490</id><snippet>&gt;&gt;&gt; (1).__class__.__class__
&lt;type 'type'&gt;
</snippet></ROW><ROW><id>17965490</id><snippet>type 'type'&gt;</snippet></ROW><ROW><id>17965490</id><snippet>__class__</snippet></ROW><ROW><id>17965490</id><snippet>&gt;&gt;&gt; (1).__class__.__class__.__class__ is (1).__class__.__class__
True
</snippet></ROW><ROW><id>17965651</id><snippet>WHERE</snippet></ROW><ROW><id>17965651</id><snippet>WHERE YourID IN (SELECT TOP 50 YourID FROM YourTable WHERE YourActualConditions)
</snippet></ROW><ROW><id>17965651</id><snippet>WHERE YourID IN (SELECT YourID FROM YourTable WHERE YourActualConditions AND ROWNUM&lt;=50)
</snippet></ROW><ROW><id>17965651</id><snippet> WHERE YourActualConditions AND ROWNUM&lt;=50
</snippet></ROW><ROW><id>17965843</id><snippet>matplotlib.mlab.PCA</snippet></ROW><ROW><id>17965843</id><snippet>myPCA.Wt[0]</snippet></ROW><ROW><id>17966016</id><snippet>def new_sku(s):
    s = s[::-1]
    already_added = False
    new_sku = str()

    for i in s:
        if not already_added:
            if (i &lt; 'Z'):
                already_added = True
            new_sku += chr((ord(i)+1)%65%26 + 65)
        else:
            new_sku += i

    if not already_added: # carry still left?
        new_sku += 'A'

    return new_sku[::-1]
</snippet></ROW><ROW><id>17966016</id><snippet>$ python sku.py Z
AA
$ python sku.py ZZZ
AAAA
$ python sku.py AAA
AAB
$ python sku.py AAZ
ABA
</snippet></ROW><ROW><id>17966199</id><snippet>sorted()</snippet></ROW><ROW><id>17966199</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>17966199</id><snippet>max()</snippet></ROW><ROW><id>17966199</id><snippet>from operator import itemgetter
from itertools import groupby

key = itemgetter(0)
bestvalues = {tuple(best[:2]): best[2] 
              for key, group in groupby(sorted(information, key=key), key=key)
              for best in (max(group, key=itemgetter(2)),)}
</snippet></ROW><ROW><id>17966199</id><snippet>grouped = {}
for tup in information:
    grouped.setdefault(tup[0], []).append(tup)

bestvalues = {}
for group in grouped.itervalues():
    best = max(group, key=lambda g: g[2])
    bestvalues[tuple(best[:2])] = best[2]
</snippet></ROW><ROW><id>17966199</id><snippet>&gt;&gt;&gt; information = [['U1', 'b1', 12], ['U1', 'b2', 15], ['U1', 'b3', 1], ['U2', 'b1', 6], ['U2', 'b2', 7], ['U2', 'b3', 43]]
&gt;&gt;&gt; key = itemgetter(0)
&gt;&gt;&gt; {tuple(best[:2]): best[2] 
...               for key, group in groupby(sorted(information, key=key), key=key)
...               for best in (max(group, key=itemgetter(2)),)}
{('U1', 'b2'): 15, ('U2', 'b3'): 43}
</snippet></ROW><ROW><id>17966199</id><snippet>&gt;&gt;&gt; grouped = {}
&gt;&gt;&gt; for tup in information:
...     grouped.setdefault(tup[0], []).append(tup)
... 
&gt;&gt;&gt; bestvalues = {}
&gt;&gt;&gt; for group in grouped.itervalues():
...     best = max(group, key=lambda g: g[2])
...     bestvalues[tuple(best[:2])] = best[2]
... 
&gt;&gt;&gt; bestvalues
{('U1', 'b2'): 15, ('U2', 'b3'): 43}
</snippet></ROW><ROW><id>17966281</id><snippet>==</snippet></ROW><ROW><id>17966281</id><snippet>&gt;&gt;&gt; minima = np.array([[0], [1], [2], [1], [0]])
&gt;&gt;&gt; minima == arange(minima.max() + 1)
array([[ True, False, False],
       [False,  True, False],
       [False, False,  True],
       [False,  True, False],
       [ True, False, False]], dtype=bool)
&gt;&gt;&gt; (minima == arange(minima.max() + 1)).astype(int)
array([[1, 0, 0],
       [0, 1, 0],
       [0, 0, 1],
       [0, 1, 0],
       [1, 0, 0]])
</snippet></ROW><ROW><id>17966364</id><snippet>x = [hist[0], 0.5*(hist[1][1:]+hist[1][:-1])]
</snippet></ROW><ROW><id>17966665</id><snippet>func</snippet></ROW><ROW><id>17966665</id><snippet>b</snippet></ROW><ROW><id>17966665</id><snippet>*</snippet></ROW><ROW><id>17966665</id><snippet>b</snippet></ROW><ROW><id>17966665</id><snippet>bb</snippet></ROW><ROW><id>17966665</id><snippet>bb = np.array([b])
</snippet></ROW><ROW><id>17966665</id><snippet>def func(a, b):
    c = np.array([1,a,a**2,a**3])
    d = np.array(b)
    return sum(c*d)
</snippet></ROW><ROW><id>17966665</id><snippet>def func(a, *b):
    c = np.array([1,a,a**2,a**3])
    d = np.array(b[0])
    return sum(c*d)
</snippet></ROW><ROW><id>17966676</id><snippet>where</snippet></ROW><ROW><id>17966676</id><snippet>In [11]: frame['b'].where(frame['a'], 2 * frame['b'])
Out[11]:
0    25
1    44
2    55
3    70
Name: b, dtype: int64

In [12]: frame['c'] = frame['b'].where(frame['a'], 2 * frame['b'])
</snippet></ROW><ROW><id>17966676</id><snippet>apply</snippet></ROW><ROW><id>17966676</id><snippet>In [21]: frame.apply(lambda x: 2 * x['b'] if x['a'] else x['b'], axis=1
</snippet></ROW><ROW><id>17966676</id><snippet>shift</snippet></ROW><ROW><id>17966676</id><snippet>In [31]: frame['a'].shift()
Out[31]:
0      NaN
1     True
2    False
3     True
Name: a, dtype: object

In [32]: frame['a'].shift().fillna(False)  # actually this is not needed, but perhaps clearer
Out[32]:
0    False
1     True
2    False
3     True
Name: a, dtype: object
</snippet></ROW><ROW><id>17966676</id><snippet>In [33]: c = (2 * frame['b']).where(frame['a'].shift().fillna(False), frame['b'])

In [34]: c
Out[34]:
0    25
1    44
2    55
3    70
Name: b, dtype: int64
</snippet></ROW><ROW><id>17966676</id><snippet>In [35]: c = c.astype(np.float)  # needs to accept NaN

In [36]: c.iloc[0] = np.nan

In [36]: frame['c'] = c

In [37]: frame
Out[37]:
       a   b   c
0   True  25 NaN
1  False  22  44
2   True  55  55
3  False  35  70
</snippet></ROW><ROW><id>17966772</id><snippet>OS fork</snippet></ROW><ROW><id>17966772</id><snippet>Manager</snippet></ROW><ROW><id>17966772</id><snippet># this is a very expensive function that I would like to parallelize
# over a list of tags. It involves a (relatively cheap) call to an external
# database, which needs a lock to avoid simultaneous queries. It takes a
# list of strings (tags) as its sole argument, and returns a list of sets
# with entries corresponding to the input list.
f = partial(get_more_tags, max_tags=max_tags) 

def _recursively_find_more_tags(tags, level):
    global pool
    if level &gt;= max_iter:
        raise StopIteration
    new_tags = pool.map(f, tags)
    to_search = []
    for i, s in zip(tags, new_tags):
        for t in s:
            joined = ' '.join(t)
            print(i + "|" + joined)
            to_search.append(joined)
    try:
        return _recursively_find_more_tags(to_search, level + 1)
    except StopIteration:
        return None

_recursively_find_more_tags([initial_tag], 0)
</snippet></ROW><ROW><id>17966772</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>17966772</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>17966772</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>17966772</id><snippet>multiprocessing.Lock</snippet></ROW><ROW><id>17966772</id><snippet>Windows</snippet></ROW><ROW><id>17966772</id><snippet>fork</snippet></ROW><ROW><id>17967245</id><snippet>import pycountry

country = pycountry.countries.get(name='Norway')
currency = pycountry.currencies.get(numeric=country.numeric)

print currency.letter
print currency.name
</snippet></ROW><ROW><id>17967245</id><snippet>NOK 
Norwegian Krone
</snippet></ROW><ROW><id>17967245</id><snippet>import moneyed

country_name = 'France'

for currency, data in moneyed.CURRENCIES.iteritems():
    if country_name.upper() in data.countries:
        print currency
        break
</snippet></ROW><ROW><id>17967245</id><snippet>EUR</snippet></ROW><ROW><id>17967245</id><snippet>import money

country_name = 'France'

for currency, data in money.CURRENCY.iteritems():
    if country_name.upper() in data.countries:
        print currency
        break
</snippet></ROW><ROW><id>17967245</id><snippet>EUR</snippet></ROW><ROW><id>17967245</id><snippet>pycountry</snippet></ROW><ROW><id>17967245</id><snippet>py-moneyed</snippet></ROW><ROW><id>17967245</id><snippet>python-money</snippet></ROW><ROW><id>17967245</id><snippet>python-money</snippet></ROW><ROW><id>17967324</id><snippet>Computer Modern</snippet></ROW><ROW><id>17967324</id><snippet>from matplotlib import rc
import matplotlib.pylab as plt

rc('font', **{'family': 'serif', 'serif': ['Computer Modern']})
rc('text', usetex=True)

x = plt.linspace(0,5)
plt.plot(x,plt.sin(x))
plt.ylabel(r"This is $\sin(x)$", size=20)
plt.show()
</snippet></ROW><ROW><id>17967466</id><snippet>handlers = [(1, 2, {}), (3, 4, {'keyword': 5), (6, 7, {})]

for route, handler, kwargs in handlers:
    some_method(route, handler, **kwargs)
</snippet></ROW><ROW><id>17967466</id><snippet>*args</snippet></ROW><ROW><id>17967466</id><snippet>for args in handlers:
    some_method(*args)
</snippet></ROW><ROW><id>17967466</id><snippet>for handler in handlers:
    route, handler, args = (handler[0], handler[1], handler[2:])
</snippet></ROW><ROW><id>17967466</id><snippet>args</snippet></ROW><ROW><id>17967466</id><snippet>*</snippet></ROW><ROW><id>17967466</id><snippet>for route, handlers, *args in handlers:
</snippet></ROW><ROW><id>17967466</id><snippet>*args</snippet></ROW><ROW><id>17967466</id><snippet>handlers</snippet></ROW><ROW><id>17967466</id><snippet>[(h + (None,) * 3)[:3] for h in handlers]
</snippet></ROW><ROW><id>17967466</id><snippet>&gt;&gt;&gt; handlers = [(1, 2), (3, 4, 5), (6, 7)]
&gt;&gt;&gt; [(h + (None,) * 3)[:3] for h in handlers]
[(1, 2, None), (3, 4, 5), (6, 7, None)]
</snippet></ROW><ROW><id>17967553</id><snippet>.*</snippet></ROW><ROW><id>17967553</id><snippet> re.search(r'window.universal = {.*?};',content,re.DOTALL).group(0)
</snippet></ROW><ROW><id>17967770</id><snippet>self.db.aggregate(
    # Lets find our records
    {"$match":{"Time":{"$gte":100,"$lte":1000}}}, 

    # Now lets group on the name counting how many grouped documents we have
    {"$group":{"_id":"$name", "sum":{"$sum":1}}} 
)
</snippet></ROW><ROW><id>17968351</id><snippet>External Tools</snippet></ROW><ROW><id>17968351</id><snippet>Workbench User Guide ==&gt; Concepts ==&gt; Ant &amp; External Tools ==&gt; External Tools</snippet></ROW><ROW><id>17968351</id><snippet>lettuce</snippet></ROW><ROW><id>17968351</id><snippet>Pydev</snippet></ROW><ROW><id>17969050</id><snippet>.get()</snippet></ROW><ROW><id>17969050</id><snippet>.get()</snippet></ROW><ROW><id>17969050</id><snippet>pl_map.get(item, {}).get("ref_rate")
</snippet></ROW><ROW><id>17969050</id><snippet>pl_map[item]['ref_rate']</snippet></ROW><ROW><id>17969050</id><snippet>None</snippet></ROW><ROW><id>17969050</id><snippet>item</snippet></ROW><ROW><id>17969050</id><snippet>pl_map[item]['ref_rate'] if item in pl_map else None
</snippet></ROW><ROW><id>17969832</id><snippet>def readFromFile(name):
    config = {}
    with open(name, "r") as f:         
        for line in f.readlines():
            li = line.lstrip()
            if not li.startswith("#") and '=' in li:
                key, value = line.split('=', 1)
                config[key] = value.strip()
    return config
</snippet></ROW><ROW><id>17970113</id><snippet>w, u</snippet></ROW><ROW><id>17970113</id><snippet>MN(w, u) = M(w, u) / m</snippet></ROW><ROW><id>17970113</id><snippet>F</snippet></ROW><ROW><id>17970113</id><snippet>m_1, m_2, ..., m_k</snippet></ROW><ROW><id>17970113</id><snippet>m_i</snippet></ROW><ROW><id>17970113</id><snippet>alpha_1, alpha_2, ..., alpha_k
</snippet></ROW><ROW><id>17970113</id><snippet>alpha_i</snippet></ROW><ROW><id>17970113</id><snippet>alpha_1 + alpha_2 + ... + alpha_k = 1
</snippet></ROW><ROW><id>17970113</id><snippet>w, u</snippet></ROW><ROW><id>17970113</id><snippet>F(w, u) = alpha_1 * m_1(w, u) + alpha_2 * m_2(w, u) + ... + alpha_k * m_k(w, u)
</snippet></ROW><ROW><id>17970113</id><snippet>F</snippet></ROW><ROW><id>17970198</id><snippet>isnull</snippet></ROW><ROW><id>17970198</id><snippet>notnull</snippet></ROW><ROW><id>17970198</id><snippet>dropna</snippet></ROW><ROW><id>17970198</id><snippet>In [11]: df
Out[11]:
  comments
0       VP
1       VP
2       VP
3     TEST
4      NaN
5      NaN

In [12]: df.comments.dropna()
Out[12]:
0      VP
1      VP
2      VP
3    TEST
Name: comments, dtype: object
</snippet></ROW><ROW><id>17970198</id><snippet>dropna</snippet></ROW><ROW><id>17970198</id><snippet>In [13]: df.dropna(subset=['comments'])
Out[13]:
  comments
0       VP
1       VP
2       VP
3     TEST

In [14]: df = df.dropna(subset=['comments'])
</snippet></ROW><ROW><id>17970218</id><snippet>flock</snippet></ROW><ROW><id>17970435</id><snippet>session.begin()
author1 = models[Author](name='Jeff Doyle')
session.add(author1)
session.commit()

session.begin()
book1 = models[Book](title='Routing TCP/IP, Volume 1', author=author1)
session.add(book1)
session.commit()
</snippet></ROW><ROW><id>17970527</id><snippet>SLOT</snippet></ROW><ROW><id>17970527</id><snippet>self.connect(self.socket, SIGNAL("connected()"), self, SLOT("connected()"))
</snippet></ROW><ROW><id>17970527</id><snippet>QtCore.Slot</snippet></ROW><ROW><id>17970527</id><snippet>pyqtSlot</snippet></ROW><ROW><id>17970527</id><snippet>SLOT</snippet></ROW><ROW><id>17970527</id><snippet>self.connect(self.socket, SIGNAL("connected()"), self.connected)
</snippet></ROW><ROW><id>17970527</id><snippet>self.socket.connected.connect(self.connected)
</snippet></ROW><ROW><id>17970527</id><snippet>()</snippet></ROW><ROW><id>17970527</id><snippet>readyRead</snippet></ROW><ROW><id>17970527</id><snippet>disconnected</snippet></ROW><ROW><id>17970527</id><snippet>readyRead</snippet></ROW><ROW><id>17970596</id><snippet>def int2str(i):
    _bytes = list()
    while i &gt; 0:
        n = i % 256
        _bytes.insert(0, n)
        i = i &gt;&gt; 8
    return ''.join(struct.pack('B', x) for x in _bytes)
</snippet></ROW><ROW><id>17970625</id><snippet>python3</snippet></ROW><ROW><id>17970625</id><snippet>python3</snippet></ROW><ROW><id>17970625</id><snippet>.bash_profile</snippet></ROW><ROW><id>17970625</id><snippet>source .bash_profile</snippet></ROW><ROW><id>17970625</id><snippet>$ which python3
/usr/bin/python3
</snippet></ROW><ROW><id>17970625</id><snippet>$ cat so.py
#!/usr/bin/python3
print("hello, world!")
$ chmod +x so.py
$ ./so.py
hello, world!
</snippet></ROW><ROW><id>17970901</id><snippet>ACTIONS</snippet></ROW><ROW><id>17970901</id><snippet>ACTIONS = {}

class MyMeta(type):
    def __init__(cls, name, bases, nmspc):
        super(MyMeta, cls).__init__(name, bases, nmspc)
        if name != "Action": # &lt;--- skip base class
            ACTIONS[name] = cls

class Action(object):
    __metaclass__ = MyMeta
    ...

class SpecificAction1(Action):
    ...

class SpecificAction2(Action):
    ...
</snippet></ROW><ROW><id>17970901</id><snippet>ACTIONS</snippet></ROW><ROW><id>17970901</id><snippet>Action</snippet></ROW><ROW><id>17970901</id><snippet>Action</snippet></ROW><ROW><id>17970901</id><snippet>MyMeta</snippet></ROW><ROW><id>17970901</id><snippet>__metaclass__</snippet></ROW><ROW><id>17970901</id><snippet>ACTIONS['SpecificAction2']()</snippet></ROW><ROW><id>17970902</id><snippet>sys.executable</snippet></ROW><ROW><id>17970906</id><snippet>\r</snippet></ROW><ROW><id>17970906</id><snippet>fp = open(path.strip(), 'rb')
</snippet></ROW><ROW><id>17970906</id><snippet>path</snippet></ROW><ROW><id>17970906</id><snippet>&gt;&gt;&gt; path = 'F:\\Music\\v flac\\1-06 No Quarter.flac\r'
&gt;&gt;&gt; path
'F:\\Music\\v flac\\1-06 No Quarter.flac\r'
&gt;&gt;&gt; print path
F:\Music\v flac\1-06 No Quarter.flac
&gt;&gt;&gt; path[:3]
'F:\\'
&gt;&gt;&gt; len(path[:3])
3
</snippet></ROW><ROW><id>17970906</id><snippet>path</snippet></ROW><ROW><id>17970906</id><snippet>F:\</snippet></ROW><ROW><id>17970928</id><snippet>highscores</snippet></ROW><ROW><id>17970928</id><snippet>try</snippet></ROW><ROW><id>17970928</id><snippet>except</snippet></ROW><ROW><id>17970928</id><snippet>def high_score():
    try:
        with open("pickles1.dat", "rb") as f:
            high_scores = pickle.load(f)
    except FileNotFoundError:
        high_scores = []

    # do current stuff for adding a new score, sorting and slicing

    with open("pickles1.dat", "wb") as f: # "wb" mode overwrites the previous file
        pickle.dump(high_scores, f)

    # do other stuff, like displaying high_scores
</snippet></ROW><ROW><id>17970928</id><snippet>high_scores</snippet></ROW><ROW><id>17971089</id><snippet>from BeautifulSoup import BeautifulStoneSoup

soup = BeautifulStoneSoup(open('path/to/file'))

with open('/path/to/output.txt', 'w') as f:
    for i in range(len(soup.findAll('type'))):
        f.write ('%s\t%s\n' % (soup.findAll('type')[i].text, soup.findAll('number')[i].text))
</snippet></ROW><ROW><id>17971089</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>17971089</id><snippet>BeautifulStoneSoup</snippet></ROW><ROW><id>17971471</id><snippet>(?&lt;=Rs\.)\s*(\d+\.\d{2})
</snippet></ROW><ROW><id>17971471</id><snippet>(?&lt;= )</snippet></ROW><ROW><id>17971471</id><snippet>Rs\.</snippet></ROW><ROW><id>17971471</id><snippet>\s</snippet></ROW><ROW><id>17971471</id><snippet>*</snippet></ROW><ROW><id>17971471</id><snippet>\d</snippet></ROW><ROW><id>17971471</id><snippet>+</snippet></ROW><ROW><id>17971471</id><snippet>{2}</snippet></ROW><ROW><id>17971471</id><snippet>\d{2}</snippet></ROW><ROW><id>17971471</id><snippet>\d\d</snippet></ROW><ROW><id>17971471</id><snippet>((\d+)\.(\d{2}))
</snippet></ROW><ROW><id>17971471</id><snippet>2691.00</snippet></ROW><ROW><id>17971471</id><snippet>2691</snippet></ROW><ROW><id>17971471</id><snippet>00</snippet></ROW><ROW><id>17971564</id><snippet>where(predicate, num1, num2)</snippet></ROW><ROW><id>17971564</id><snippet>table.where('where(a==b, 1, 0) == c')
</snippet></ROW><ROW><id>17972072</id><snippet>set</snippet></ROW><ROW><id>17972072</id><snippet>sorted(set().union(first, second)) #returns a sorted list of unique items
</snippet></ROW><ROW><id>17972072</id><snippet>&gt;&gt;&gt; first = [0,1,2,3,4,5]
&gt;&gt;&gt; second = [4,5,6,7,9]
&gt;&gt;&gt; sorted(set(first + second))
[0, 1, 2, 3, 4, 5, 6, 7, 9]
</snippet></ROW><ROW><id>17972072</id><snippet>&gt;&gt;&gt; first = [0,1,2,3,4,5]
&gt;&gt;&gt; seen = set(first)
&gt;&gt;&gt; first += [x for x in second if x not in seen and not seen.add(x)]
&gt;&gt;&gt; first
[0, 1, 2, 3, 4, 5, 6, 7, 9]
</snippet></ROW><ROW><id>17972072</id><snippet>O(1)</snippet></ROW><ROW><id>17972075</id><snippet>itertools</snippet></ROW><ROW><id>17972075</id><snippet>from itertools import takewhile, dropwhile, chain, islice

with open('input') as fin, open('output', 'w') as fout:
    fout.writelines(chain(
        takewhile(lambda L: L != '---From here---\n', fin),
        ['Woo Hoo!\n'],
        islice(dropwhile(lambda L: L != '---To here---\n', fin), 1, None)
        )
    )
</snippet></ROW><ROW><id>17972086</id><snippet>[i for i in a if not any(x in i for x in b)]
</snippet></ROW><ROW><id>17972086</id><snippet>['blah', 'tete', 'head']
</snippet></ROW><ROW><id>17972310</id><snippet>["{}{}{}".format(a,b,c) for a in range(3) for b in range(3) 
                                              for c in range(3) if a!=b and b!=c]
</snippet></ROW><ROW><id>17972310</id><snippet>itertools.product</snippet></ROW><ROW><id>17972310</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; ["{}{}{}".format(a,b,c)  for a, b, c in product(range(3), repeat=3)
                                                               if a!=b and b!=c]
['010', '012', '020', '021', '101', '102', '120', '121', '201', '202', '210', '212']
</snippet></ROW><ROW><id>17972310</id><snippet>&gt;&gt;&gt; from itertools import product, izip, tee
def check(lis):
    it1, it2 = tee(lis)
    next(it2)
    return all(x != y for x,y in izip(it1, it2))
... 

&gt;&gt;&gt; n = 3
&gt;&gt;&gt; [("{}"*n).format(*p)  for p in product(range(3), repeat=n) if check(p)]
['010', '012', '020', '021', '101', '102', '120', '121', '201', '202', '210', '212']
&gt;&gt;&gt; n = 4
&gt;&gt;&gt; [("{}"*n).format(*p)  for p in product(range(3), repeat=n) if check(p)]
['0101', '0102', '0120', '0121', '0201', '0202', '0210', '0212', '1010', '1012', '1020', '1021', '1201', '1202', '1210', '1212', '2010', '2012', '2020', '2021', '2101', '2102', '2120', '2121']
</snippet></ROW><ROW><id>17972348</id><snippet>create table test (
    Int1 integer,
    Int2 integer,
    Int3 integer,
    Primary key (int1, int2)
)
</snippet></ROW><ROW><id>17972362</id><snippet>strptime()</snippet></ROW><ROW><id>17972362</id><snippet>import time
time.strptime("30 Nov 00", "%d %b %y")
</snippet></ROW><ROW><id>17972430</id><snippet>f = open('/Users/marcortiz/Documents/vLex/pylearn2/mlearning/classify/files/models/model_training.txt')
    zeros = np.zeros((60343,4917))
    counter = 0

    start = timeit.default_timer()
    for l in f:
        row = l.split(",")
        counter2 = 0
        for element in row:
            zeros[counter, counter2] = element
            counter2 += 1
        counter = counter + 1
    stop = timeit.default_timer()  
    print stop - start 
    f.close()
</snippet></ROW><ROW><id>17972430</id><snippet>f = open('/Users/marcortiz/Documents/vLex/pylearn2/mlearning/classify/files/models/model_training.txt')
    zeros = np.zeros((60343,4917))
    counter = 0

    start = timeit.default_timer()
    for l in f:
        row = l.split(",")
        counter2 = 0
        zeros[counter, :] = [i for i in row]
        counter = counter + 1
    stop = timeit.default_timer()
    print stop - start
    f.close()
</snippet></ROW><ROW><id>17972780</id><snippet>f = open('apple.txt')
lines = f.readlines()
f.close()
things = []
printtofile = []
for i in lines:
    things.append(i)
    if i.startswith('date'):
        things.pop()
        for x in things:
            if i[:-1] == '\n':
                printtofile.append(x[:-1]+'|'+i[:-1])
            else: 
                printtofile.append(x[:-1]+'|'+i)
        things = []
print printtofile
writefile = open('file.txt', 'w')
writefile.writelines(printtofile)
writefile.close()
</snippet></ROW><ROW><id>17973255</id><snippet>str.contains</snippet></ROW><ROW><id>17973255</id><snippet>In [11]: pattern = '|'.join(mylist)

In [12]: pattern
Out[12]: 'dog|cat|fish'

In [13]: frame.a.str.contains(pattern)
Out[13]:
0     True
1    False
2     True
Name: a, dtype: bool
</snippet></ROW><ROW><id>17973361</id><snippet>&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt; list(permutations([1,2,2]))
[(1, 2, 2), (1, 2, 2), (2, 1, 2), (2, 2, 1), (2, 1, 2), (2, 2, 1)]
</snippet></ROW><ROW><id>17973361</id><snippet>[list(permutations(...))]</snippet></ROW><ROW><id>17973361</id><snippet>[]</snippet></ROW><ROW><id>17973361</id><snippet>testList[index]</snippet></ROW><ROW><id>17973361</id><snippet>testList[0][index]</snippet></ROW><ROW><id>17973361</id><snippet>&gt;&gt;&gt; newList = list(permutations([1, 2, 2]))
&gt;&gt;&gt; newList[0]
(1, 2, 2)
&gt;&gt;&gt; newList[3]
(2, 2, 1)
</snippet></ROW><ROW><id>17973397</id><snippet>school = soup.find('a','profiles-show-school-name-sm-link')
url = school['href']
</snippet></ROW><ROW><id>17973397</id><snippet>for i in range(5):
   url = url[url.find("/")+1:]
schoolname = url[:url.find("/")]
print " ".join(schoolname.split("-")).title()
</snippet></ROW><ROW><id>17973397</id><snippet>Perkins College Of Education Undergraduate
</snippet></ROW><ROW><id>17973397</id><snippet>for i in range(4):
   url = url[url.find("/")+1:]
university= url[:url.find("/")]
print " ".join(university.split("-")).title()
</snippet></ROW><ROW><id>17973397</id><snippet>Stephen F Austin State University
</snippet></ROW><ROW><id>17973810</id><snippet>Board</snippet></ROW><ROW><id>17973810</id><snippet>largeBoard = [[Board()] * 3] * 3
</snippet></ROW><ROW><id>17973810</id><snippet>[X for i in range(3)]</snippet></ROW><ROW><id>17973810</id><snippet>X</snippet></ROW><ROW><id>17973810</id><snippet>i</snippet></ROW><ROW><id>17973810</id><snippet>[X] * 3</snippet></ROW><ROW><id>17973810</id><snippet>X</snippet></ROW><ROW><id>17973858</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>17973968</id><snippet>cursor.execute()</snippet></ROW><ROW><id>17973968</id><snippet>process_query</snippet></ROW><ROW><id>17973968</id><snippet>process_query</snippet></ROW><ROW><id>17973968</id><snippet>def process_query(sql, params):
    cursor1.execute(sql, params)
</snippet></ROW><ROW><id>17973968</id><snippet>for</snippet></ROW><ROW><id>17973968</id><snippet>for i in theList:
    temp=process_query('SELECT FName, LName FROM Employee WHERE SSN=?', i)
    known_hours=process_query('SELECT DISTINCT SUM(Coalesce(Hours,0)) FROM Works_On WHERE ESSN=?', i)
    temp.append(known_hours)
    unknown_hours=process_query('SELECT Distinct COUNT(*) FROM Works_On WHERE ISNULL(Hours) AND ESSN=?', i)
    temp.append(unknown_hours)
</snippet></ROW><ROW><id>17974197</id><snippet>1L</snippet></ROW><ROW><id>17974197</id><snippet>1</snippet></ROW><ROW><id>17974197</id><snippet>&gt;&gt; type(1L)
&lt;type 'long'&gt;
&gt;&gt;&gt; long(1)
1L
&gt;&gt;&gt; int(1L)
1
</snippet></ROW><ROW><id>17974197</id><snippet>int(unknown_hours)
</snippet></ROW><ROW><id>17974197</id><snippet>SELECT Distinct CAST(COUNT(*) AS UNSIGNED) FROM Works_On WHERE ISNULL(Hours) AND ESSN='%s'
</snippet></ROW><ROW><id>17974276</id><snippet>request</snippet></ROW><ROW><id>17974276</id><snippet>request.args.get('foo', '');
</snippet></ROW><ROW><id>17974276</id><snippet>foo</snippet></ROW><ROW><id>17974276</id><snippet>get</snippet></ROW><ROW><id>17974408</id><snippet>None</snippet></ROW><ROW><id>17974408</id><snippet>a != b</snippet></ROW><ROW><id>17974408</id><snippet>return</snippet></ROW><ROW><id>17974408</id><snippet>None</snippet></ROW><ROW><id>17974408</id><snippet>new_A, new_B</snippet></ROW><ROW><id>17974408</id><snippet>&gt;&gt;&gt; print make_them_different(2, 3)
None

&gt;&gt;&gt; print make_them_different(2, 2)
(2, 1)
</snippet></ROW><ROW><id>17974408</id><snippet>def make_them_different(a,b):
    while a == b:
        a = randint(1,3)
        b = randint(1,3)
    return (a,b)  # Dedented the return line.
</snippet></ROW><ROW><id>17974408</id><snippet>&gt;&gt;&gt; make_them_different(2, 2)
(3, 2)
&gt;&gt;&gt; make_them_different(2, 3)
(2, 3)
</snippet></ROW><ROW><id>17974466</id><snippet>array = [p.question for p in latest_poll_list]
</snippet></ROW><ROW><id>17974466</id><snippet>array = []
for p in latest_poll_list:
    array.append(p.question)
</snippet></ROW><ROW><id>17974466</id><snippet>for</snippet></ROW><ROW><id>17974466</id><snippet>output = ', '.join(p.question for p in latest_poll_list)
</snippet></ROW><ROW><id>17974466</id><snippet>join</snippet></ROW><ROW><id>17974749</id><snippet>args = [this.scrath[c] for c in this.connections(n)]
</snippet></ROW><ROW><id>17974749</id><snippet>args = []
for c in this.connections(n):
    args.append(this.scrath[c])
</snippet></ROW><ROW><id>17975078</id><snippet>f1</snippet></ROW><ROW><id>17975078</id><snippet>f2</snippet></ROW><ROW><id>17975078</id><snippet>f3</snippet></ROW><ROW><id>17975078</id><snippet>f2.delete(1.0, 'end') # erase all the text on the 2nd tab

f3.insert('end', 'hello, world') # insert text on the 3rd tab
</snippet></ROW><ROW><id>17975078</id><snippet>texts = [f1, f2, f3]
for text in texts:
    text.delete(1.0, 'end')
</snippet></ROW><ROW><id>17975250</id><snippet>address = soup.find('div', {'style':'float:left;width:100%;padding-top:10px;padding-bottom:30px;'})
print address.get_text()
</snippet></ROW><ROW><id>17975250</id><snippet>style</snippet></ROW><ROW><id>17975250</id><snippet>get_text()</snippet></ROW><ROW><id>17975259</id><snippet>In [29]: df
Out[29]: 
   Acid  Balance_1  CustID  Balance_2
0     1   0.082627       1        NaN
1     2   0.397579       1   0.459942
2     3   0.201596       2   0.596573
3     4   0.616448       3   0.705697
4     5   0.844865       3   0.483279
5     6        NaN       4   0.360260
</snippet></ROW><ROW><id>17975259</id><snippet>In [24]: df.groupby(['CustID']).groups
Out[24]: {1: [0, 1], 2: [2], 3: [3, 4], 4: [5]}
</snippet></ROW><ROW><id>17975259</id><snippet>In [25]: df.iloc[[0,1]]
Out[25]: 
   Acid  Balance_1  CustID  Balance_2
0     1   0.082627       1        NaN
1     2   0.397579       1   0.459942

In [26]: df.iloc[[2]]
Out[26]: 
   Acid  Balance_1  CustID  Balance_2
2     3   0.201596       2   0.596573
</snippet></ROW><ROW><id>17975259</id><snippet>In [27]: set(df.iloc[[2]])
Out[27]: set(['Balance_1', 'Balance_2', 'Acid', 'CustID'])
</snippet></ROW><ROW><id>17975259</id><snippet>In [28]: df.groupby(['CustID']).agg(lambda x: x.sum())
Out[28]: 
        Acid  Balance_1  Balance_2
CustID                            
1          3   0.480206   0.459942
2          3   0.201596   0.596573
3          9   1.461313   1.188976
4          6        NaN   0.360260
</snippet></ROW><ROW><id>17975791</id><snippet>test</snippet></ROW><ROW><id>17975791</id><snippet>channel</snippet></ROW><ROW><id>17975791</id><snippet>In [22]: from traits.api import HasTraits, Int, List

In [24]: class TraitsClass(HasTraits):
    test = Int(10)
    channel = List               
    def _channel_default(self):
        return range(0, self.test)
   ....:     

In [25]: t=TraitsClass()

In [26]: t.channel
Out[26]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>17975804</id><snippet>np.set_printoptions(threshold='nan')
</snippet></ROW><ROW><id>17975935</id><snippet>class TCPClient():

    def __init__(self, host, port, retryAttempts=10 ):
        #this is the constructor that takes in host and port. retryAttempts is given 
        # a default value but can also be fed in.
        self.host = host
        self.port = port
        self.retryAttempts = retryAttempts
        self.socket = None

    def connect(self, attempt=0):
        if attempts&lt;self.retryAttempts:
            #put connecting code here
        if connectionFailed:
            self.connect(attempt+1)

    def diconnectSocket(self):
        #perform all breakdown operations
        ...
        self.socket = None

    def sendDataToDB(self, data):
        #send data to db

    def readData(self):
        #read data here
        while True:
            if self.socket is None:
                self.connect()
            ...
</snippet></ROW><ROW><id>17975939</id><snippet>&gt;&gt;&gt; np.bincount(h,weights=x)
array([ 10.,   5.,  10.,  10.,   6.])
</snippet></ROW><ROW><id>17975939</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a=np.random.randint(0,5,(50,50))
&gt;&gt;&gt; rand=np.random.rand(5)
&gt;&gt;&gt; rand
array([ 0.10899745,  0.35296303,  0.21127571,  0.56433924,  0.27895281])
&gt;&gt;&gt; b=np.take(rand,a)

#Unfortunately you cannot do it like this:
&gt;&gt;&gt; np.bincount(a,weights=b)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: object too deep for desired array

#There we go:
&gt;&gt;&gt; np.bincount(a.flat,weights=b.flat)
array([  55.04371257,  172.59892108,   96.34172236,  297.40677707,
        145.89232039])
</snippet></ROW><ROW><id>17975939</id><snippet>&gt;&gt;&gt; np.bincount(a.flat)
array([505, 489, 456, 527, 523])
&gt;&gt;&gt; np.bincount(a.flat)*rand
array([  55.04371257,  172.59892108,   96.34172236,  297.40677707,
        145.89232039])
</snippet></ROW><ROW><id>17976315</id><snippet>import sys.path
sys.path.append('.')
</snippet></ROW><ROW><id>17976315</id><snippet>import somemodule
import sys
dirname = os.path.dirname(os.path.abspath(somemodule.__file__))
sys.path.append(dirname)
</snippet></ROW><ROW><id>17976327</id><snippet>sites=['aaa', 'bbb']
contains = ' or '.join('contains(@href,(%s))' % site for site in sites)
anchor_xpath = etree.XPath('//a[%s][descendant::img]' % contains)
</snippet></ROW><ROW><id>17976359</id><snippet>scipy.stats.norm</snippet></ROW><ROW><id>17976359</id><snippet>scipy.stats.norm_gen</snippet></ROW><ROW><id>17976359</id><snippet>norm(*args, **kwds)</snippet></ROW><ROW><id>17976359</id><snippet>rv_frozen</snippet></ROW><ROW><id>17976359</id><snippet>norm</snippet></ROW><ROW><id>17976359</id><snippet>rv_frozen</snippet></ROW><ROW><id>17976359</id><snippet>norm</snippet></ROW><ROW><id>17976359</id><snippet>norm_gen</snippet></ROW><ROW><id>17976380</id><snippet>savetxt</snippet></ROW><ROW><id>17976380</id><snippet>np.savetxt(my_file, my_array, ['%s\t', '%s\t', '%s'])
</snippet></ROW><ROW><id>17976380</id><snippet>new_dtype = [('SN', 'S8'), ('Freqs1', 'i'), ('Freqs2', 'i'), ('Freqs3', 'i'), 
             ('Peaks1', 'f'), ('Peaks2', 'f'), ('Peaks3', 'f')]
np.savetxt(my_file, my_array.astype(new_dtype), '%s,%i,%i,%i,%f,%f,%f')
</snippet></ROW><ROW><id>17976452</id><snippet>P' = inv(T) * R * T * P</snippet></ROW><ROW><id>17976452</id><snippet>P</snippet></ROW><ROW><id>17976452</id><snippet>P'</snippet></ROW><ROW><id>17976452</id><snippet>atoms =
    90   140
   100   100
     1     1
</snippet></ROW><ROW><id>17976452</id><snippet>R =
   0.86603  -0.50000   0.00000
   0.50000   0.86603   0.00000
   0.00000   0.00000   1.00000
</snippet></ROW><ROW><id>17976452</id><snippet>R * atoms =
    27.9423    71.2436
   131.6025   156.6025
     1.0000     1.0000
</snippet></ROW><ROW><id>17976452</id><snippet>R * atoms</snippet></ROW><ROW><id>17976452</id><snippet>pi/6</snippet></ROW><ROW><id>17976452</id><snippet>T =
 1     0  -115
 0     1  -100
 0     0     1
</snippet></ROW><ROW><id>17976452</id><snippet>-115</snippet></ROW><ROW><id>17976452</id><snippet>-100</snippet></ROW><ROW><id>17976452</id><snippet>T * atoms =
  -25   25
    0    0
    1    1
</snippet></ROW><ROW><id>17976452</id><snippet>R * T * atoms
  -21.6506   21.6506
  -12.5000   12.5000
    1.0000    1.0000
</snippet></ROW><ROW><id>17976452</id><snippet>inv(T) * R * T * atoms =        
    93.3494   136.6506
    87.5000   112.5000
     1.0000     1.0000
</snippet></ROW><ROW><id>17976452</id><snippet>point * translation * rotation * translation</snippet></ROW><ROW><id>17976452</id><snippet>3x3</snippet></ROW><ROW><id>17976452</id><snippet>4x4</snippet></ROW><ROW><id>17976470</id><snippet>&gt;&gt;&gt; (lambda s: 'cat' in s and 'dog' not in s)("CatBlablablaDog".lower())
False
&gt;&gt;&gt; (lambda s: 'cat' in s and 'dog' not in s)("blablaCatBlabla".lower())
True
&gt;&gt;&gt; (lambda s: 'cat' in s and 'dog' not in s)("Dog_blabla_Cat".lower())
False
</snippet></ROW><ROW><id>17976470</id><snippet>def findExclude(string, search_str, exclude_str):
    string = string.lower()
    return search_str in string and exclude_str not in string

print findExclude("CatBlablablaDog", 'cat', 'dog')
print findExclude("blablaCatBlabla", 'cat', 'dog')
print findExclude("Dog_blabla_Cat", 'cat', 'dog')
</snippet></ROW><ROW><id>17976671</id><snippet>&gt;&gt;&gt; import mock
&gt;&gt;&gt; my_call = mock.call('test', example=3)
&gt;&gt;&gt; name, args, kwargs = my_call
&gt;&gt;&gt; name
''
&gt;&gt;&gt; args
('test',)
&gt;&gt;&gt; kwargs
{'example': 3}
</snippet></ROW><ROW><id>17976671</id><snippet>call()</snippet></ROW><ROW><id>17976671</id><snippet>call_args_list</snippet></ROW><ROW><id>17976671</id><snippet>&gt;&gt;&gt; args, kwargs = my_call
</snippet></ROW><ROW><id>17976671</id><snippet>my_call[2]</snippet></ROW><ROW><id>17976671</id><snippet>call_args_list</snippet></ROW><ROW><id>17976671</id><snippet>&gt;&gt;&gt; call1 = mock.call('test', example=3)
&gt;&gt;&gt; call2 = mock.call('test', example=4, value=5)
&gt;&gt;&gt; call_args_list = [call1, call2]
&gt;&gt;&gt; [(item[1], item[2]) for item in call_args_list]
[(('test',), {'example': 3}), (('test',), {'example': 4, 'value': 5})]
</snippet></ROW><ROW><id>17976770</id><snippet>INSERT</snippet></ROW><ROW><id>17976770</id><snippet>INSERT</snippet></ROW><ROW><id>17976770</id><snippet>current.execute("INSERT INTO tblExtensionHistory (HostID, ExtensionID) VALUES (?,?)",
                [Hid, Eid])
</snippet></ROW><ROW><id>17976770</id><snippet>Eid = current.fetchone()
</snippet></ROW><ROW><id>17976770</id><snippet>[3]
</snippet></ROW><ROW><id>17976770</id><snippet>ExtensionID</snippet></ROW><ROW><id>17976770</id><snippet>sqlite3</snippet></ROW><ROW><id>17976770</id><snippet>INSERT</snippet></ROW><ROW><id>17976957</id><snippet>repeat = ""
with open('ref.txt') as f1:
    for line in f1:
        repeat = "".join([repeat, line])
with open('out.txt', 'w') as f2:
    f2.write(repeat*5)
</snippet></ROW><ROW><id>17977081</id><snippet>instructions = {
  '+': increment,
  '-': decrement,
  # Other functions
}

def run(tape):
  ch = next_token(tape)
  if ch in instructions:
    instructions[ch]()
</snippet></ROW><ROW><id>17977148</id><snippet>getopt()</snippet></ROW><ROW><id>17977148</id><snippet>gnu_getopt</snippet></ROW><ROW><id>17977148</id><snippet>argparse</snippet></ROW><ROW><id>17977148</id><snippet>getopt</snippet></ROW><ROW><id>17977148</id><snippet>getopt</snippet></ROW><ROW><id>17977148</id><snippet>getopt</snippet></ROW><ROW><id>17977148</id><snippet>getopt</snippet></ROW><ROW><id>17977148</id><snippet>getopt</snippet></ROW><ROW><id>17977148</id><snippet>-s</snippet></ROW><ROW><id>17977198</id><snippet>memmove</snippet></ROW><ROW><id>17977198</id><snippet>f = Foo()
f.f1=1
f.f2=2

buf = (c_char * 100)()
memmove(buf, byref(f), sizeof(f))
</snippet></ROW><ROW><id>17977198</id><snippet>from_buffer_copy</snippet></ROW><ROW><id>17977198</id><snippet>buf = (c_char * sizeof(f)).from_buffer_copy(f)
</snippet></ROW><ROW><id>17977214</id><snippet>os.system('python restart.py')</snippet></ROW><ROW><id>17977227</id><snippet>match</snippet></ROW><ROW><id>17977352</id><snippet>setuptools</snippet></ROW><ROW><id>17977352</id><snippet>pip</snippet></ROW><ROW><id>17977352</id><snippet>venv</snippet></ROW><ROW><id>17977352</id><snippet>venv</snippet></ROW><ROW><id>17977352</id><snippet>virtualenv</snippet></ROW><ROW><id>17977352</id><snippet>setuptools</snippet></ROW><ROW><id>17977352</id><snippet>pip</snippet></ROW><ROW><id>17977352</id><snippet>python</snippet></ROW><ROW><id>17977441</id><snippet>time.strptime(thetime, "%Y-%m-%d %H:%M:%S.%f")</snippet></ROW><ROW><id>17977609</id><snippet>sheet_names</snippet></ROW><ROW><id>17977609</id><snippet>xl = pd.ExcelFile('foo.xls')

xl.sheet_names  # see all sheet names

xl.parse(sheet_name)  # read a specific sheet to DataFrame
</snippet></ROW><ROW><id>17977624</id><snippet>output.txt</snippet></ROW><ROW><id>17977624</id><snippet>append mode</snippet></ROW><ROW><id>17977624</id><snippet>file = open("Output.txt", "a")
</snippet></ROW><ROW><id>17977624</id><snippet>with</snippet></ROW><ROW><id>17977624</id><snippet>import xlrd
import os.path

wb = xlrd.open_workbook(os.path.join('D:\TRB 2014 Data','SPS1 demo data.xlsx'))
wb.sheet_names()
sh = wb.sheet_by_index(0)
i = 1
with open("Output.txt", "a") as my_file:
    while sh.cell(i,11).value != 0:
        Load = sh.cell(i,11).value
        all_d = sh.col_values(i, 13, 19)
        DB1 = Load + " " + (" ".join(all_d))
        my_file.write(DB1 + '\n')
        i += 1
</snippet></ROW><ROW><id>17978097</id><snippet>return</snippet></ROW><ROW><id>17978097</id><snippet>return {strlist[h][0]:[int(strlist[h][g]) for g in range(3, len(strlist[h]))] for h in range(len(strlist))}
</snippet></ROW><ROW><id>17978097</id><snippet>voting_dict</snippet></ROW><ROW><id>17978097</id><snippet>return voting_dict</snippet></ROW><ROW><id>17978097</id><snippet>&gt;&gt;&gt; def test():
        return num = 2
SyntaxError: invalid syntax
&gt;&gt;&gt; def test():
        return 2
</snippet></ROW><ROW><id>17978112</id><snippet>import functools

def callonce(func):

    result = []

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if not result:
            result.append(func(*args, **kwargs))
        return result[0]

    return wrapper
</snippet></ROW><ROW><id>17978112</id><snippet>@callonce
def long_running_function(x, y, z):
    # do something expensive with x, y, and z, producing result
    return result
</snippet></ROW><ROW><id>17978112</id><snippet>import functools

def gen2func(generator):

    gen = []

    @functools.wraps(generator)
    def wrapper(*args, **kwargs):
        if not gen:
            gen.append(generator(*args, **kwargs))
        return next(gen[0])

    return wrapper
</snippet></ROW><ROW><id>17978112</id><snippet>@gen2func
def long_running_function_in_generator_form(x, y, z):
    # do something expensive with x, y, and z, producing result
    while True: 
        yield result
        result += 1    # for example
</snippet></ROW><ROW><id>17978112</id><snippet>.send()</snippet></ROW><ROW><id>17978112</id><snippet>**kwargs</snippet></ROW><ROW><id>17978112</id><snippet>import functools

def gen2func(generator):

    gen = []

    @functools.wraps(generator)
    def wrapper(*args):
        if not gen:
            gen.append(generator(*args))
            return next(gen[0])
        return gen[0].send(args)

    return wrapper

@gen2func
def function_with_static_vars(a, b, c):
    # time-consuming initial setup goes here
    # also initialize any "static" vars here
    while True:
        # do something with a, b, c
        a, b, c = yield        # get next a, b, c
</snippet></ROW><ROW><id>17978138</id><snippet>join</snippet></ROW><ROW><id>17978138</id><snippet>terminate</snippet></ROW><ROW><id>17978138</id><snippet>join</snippet></ROW><ROW><id>17978138</id><snippet>self</snippet></ROW><ROW><id>17978138</id><snippet>dict</snippet></ROW><ROW><id>17978138</id><snippet>class worker_manager:
    # ...
    def __init__(self):
        self.children = {}
    def generate(self, control_queue, threadName, runNum):
        if threadName == 'one':
            print ("Starting import_1 number %d") % runNum
            p = multiprocessing.Process(target=i.import_1, args=(control_queue, runNum))
            self.children[threadName]
            p.start()
        # ...
    def terminate(self, threadName):
        self.children[threadName].join()
</snippet></ROW><ROW><id>17978138</id><snippet>if</snippet></ROW><ROW><id>17978138</id><snippet>class WorkerManager(object):
    # ...
    names = {'one': 'import_1', 'two': 'import_2', 'three': 'import_3'}
    def __init__(self):
        self.children = {}
    def generate(self, control_queue, threadName, runNum):
        name = WorkerManager.names[threadName]
        target = i.getattr(name)
        print ("Starting %s number %d") % (name, runNum)
        p = multiprocessing.Process(target=target, args=(control_queue, runNum))
        self.children[threadName] = p
        p.start()
    def terminate(self, threadName):
        self.children[threadName].join()
</snippet></ROW><ROW><id>17978188</id><snippet>read_csv</snippet></ROW><ROW><id>17978188</id><snippet>parse_dates=[['Date', 'Time']]</snippet></ROW><ROW><id>17978188</id><snippet>to_datetime</snippet></ROW><ROW><id>17978188</id><snippet>In [11]: df['Date'] + ' ' + df['Time']
Out[11]:
0    01-06-2013 23:00:00
1    02-06-2013 01:00:00
2    02-06-2013 21:00:00
3    02-06-2013 22:00:00
4    02-06-2013 23:00:00
5    03-06-2013 01:00:00
6    03-06-2013 21:00:00
7    03-06-2013 22:00:00
8    03-06-2013 23:00:00
9    04-06-2013 01:00:00
dtype: object

In [12]: pd.to_datetime(df['Date'] + ' ' + df['Time'])
Out[12]:
0   2013-01-06 23:00:00
1   2013-02-06 01:00:00
2   2013-02-06 21:00:00
3   2013-02-06 22:00:00
4   2013-02-06 23:00:00
5   2013-03-06 01:00:00
6   2013-03-06 21:00:00
7   2013-03-06 22:00:00
8   2013-03-06 23:00:00
9   2013-04-06 01:00:00
dtype: datetime64[ns]
</snippet></ROW><ROW><id>17978188</id><snippet>raise</snippet></ROW><ROW><id>17978238</id><snippet>__init__.py</snippet></ROW><ROW><id>17978238</id><snippet>projname/</snippet></ROW><ROW><id>17978238</id><snippet>from .a import A1, A2
from .b import B1, B2, B3
from .c import C
</snippet></ROW><ROW><id>17978238</id><snippet>projname</snippet></ROW><ROW><id>17978238</id><snippet>__init__.py</snippet></ROW><ROW><id>17978238</id><snippet>A1</snippet></ROW><ROW><id>17978238</id><snippet>A2</snippet></ROW><ROW><id>17978238</id><snippet>B1</snippet></ROW><ROW><id>17978238</id><snippet>B2</snippet></ROW><ROW><id>17978238</id><snippet>B3</snippet></ROW><ROW><id>17978238</id><snippet>C</snippet></ROW><ROW><id>17978275</id><snippet>itertools.tee()</snippet></ROW><ROW><id>17978275</id><snippet>from itertools import tee

def sliding_range(file, size):
    fin1, fin2 = tee(int(ln.strip()) for ln in open(file) if ln.strip())
    n = 1
    next(fin2)
    val2 = next(fin2)
    for val1 in fin1:
        while val2 is not None and val2 &lt;= val1 + size:
            n += 1
            try:
                val2 = next(fin2)
            except StopIteration:
                val2 = None
                break
        yield n
        n -= 1
</snippet></ROW><ROW><id>17978275</id><snippet>&gt;&gt;&gt; list(sliding_range('test.txt', 10))
[2, 1, 3, 2, 2, 2, 1]
</snippet></ROW><ROW><id>17978364</id><snippet>zip(*columns)</snippet></ROW><ROW><id>17978364</id><snippet>columns = [['key_header'] + sorted(inputlist[0].keys())]  # first column

for i, entry in enumerate(inputlist):
    columns.append([i] + [entry[k] for k in columns[0][1:]])

with open(outputfilename, 'wb') as output:
    writer = csv.writer(output)
    writer.writerows(zip(*columns))
</snippet></ROW><ROW><id>17978364</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; inputlist = [{'key0': 'key0_value0', 'key1': 'key1_value0'},
...  {'key0': 'key0_value1', 'key1': 'key1_value1'}]
&gt;&gt;&gt; columns = [['key_header'] + sorted(inputlist[0].keys())]  # first column
&gt;&gt;&gt; for i, entry in enumerate(inputlist):
...     columns.append([i] + [entry[k] for k in columns[0][1:]])
... 
&gt;&gt;&gt; pprint(zip(*columns))
[('key_header', 0, 1),
 ('key0', 'key0_value0', 'key0_value1'),
 ('key1', 'key1_value0', 'key1_value1')]
</snippet></ROW><ROW><id>17978369</id><snippet>def print_url(r, **kwargs):
    print r.url
</snippet></ROW><ROW><id>17978383</id><snippet>Group.objects.filter(id__in=user.groups)</snippet></ROW><ROW><id>17978414</id><snippet>df2[list('xab']  # df2 but only with columns x, a, and b

df1.merge(df2[list('xab')])
</snippet></ROW><ROW><id>17978800</id><snippet>.pyx</snippet></ROW><ROW><id>17978800</id><snippet>from numpy cimport ndarray as ar
import numpy as np
cimport cython

@cython.boundscheck(False)
@cython.wraparound(False)
def toarr(xy):
    cdef int i, j, h=len(xy), w=len(xy[0])
    cdef ar[double,ndim=2] new = np.empty((h,w))
    for i in xrange(h):
        for j in xrange(w):
            new[i,j] = xy[i][j]
    return new
</snippet></ROW><ROW><id>17979067</id><snippet>StopIteration</snippet></ROW><ROW><id>17979067</id><snippet>max_depth</snippet></ROW><ROW><id>17979067</id><snippet>max_depth</snippet></ROW><ROW><id>17979334</id><snippet>user = User.objects.get(request.user)
</snippet></ROW><ROW><id>17979334</id><snippet>user = User.objects.get(id=request.user.id)
</snippet></ROW><ROW><id>17979334</id><snippet>request.user</snippet></ROW><ROW><id>17979334</id><snippet>user = request.user
user.set_password(form.cleaned_data['password1'])
user.email = form.cleaned_data['email']
user.save()
</snippet></ROW><ROW><id>17979334</id><snippet>@login_required</snippet></ROW><ROW><id>17979334</id><snippet>account_admin</snippet></ROW><ROW><id>17979406</id><snippet>import socket

baidu = ('www.baidu.com', 80)
zero = ('0.0.0.0', 9001)

def test(addr, src_addr):
    try:
        sock = socket.create_connection(addr, 3, src_addr)
        print sock.getsockname()
        print
        sock.sendall('GET / HTTP/1.1\r\n\r\n')
        data = sock.recv(1024)
        print data
    finally:
        try:
            sock.close()
        except:
            pass

test(baidu, zero)
#test(baidu, None)
</snippet></ROW><ROW><id>17979471</id><snippet># check nested json
import collections
from functools import reduce
import datetime

#this is json from GET session
myjson = {
    "accessed": "Wed, 31 Jul 2013 13:03:38 GMT",
    "created": "Wed, 31 Jul 2013 13:03:38 GMT",
    "dnUrls": [
        "http://135.86.180.69:8580/ucc/api/v1/session/dns/50000"
    ],
    "expires": "Wed, 31 Jul 2013 13:03:48 GMT",
    "modified": "Wed, 31 Jul 2013 13:03:38 GMT",
    "name": "KW50000",
    "person": {
        "employeeId": "KW50000",
        "firstName": "KW50000",
        "lastName": "Dev5"
    },
    "previewRedirect": {
        "destination": "",
        "enabled": False,
        "setupEnabled": False
    }
}


# returns dictionary with key= fieldname, value = result,
# either True (Test Pass), False (test Failed)
def check_json(obj, checker):
    """params json to check, template comparison object
       returns dictionary of keys to pass/fail values"""

    result = {}
    for k, (mFlag, chk) in checker.items():
        if not k in obj:
            result[k] = not mFlag
        elif isinstance(chk, collections.Callable):
            result[k] = chk(obj[k])
        elif(isinstance(chk, collections.Mapping)):
            result[k] = check_json(obj[k], chk)
        else:
            result[k] = chk == obj[k]
    return result

    def isDate(s):
        try:
            datetime.datetime.strptime(s, '%a, %d %b %Y %H:%M:%S GMT')
            return True
        except Exception:
            print("conversion to date failed")
            return False


#checker object made up of dictionary with string key and tuple value (a pair)
#tuple first filed is flag indicating whether key is mandatory or not.
# tuple 2nd key is value to expect or a checker function
checker = {
    "accessed": (True, check_json.isDate),
    "created": (True, check_json.isDate),
    "dnUrls": (True, lambda l: (reduce(lambda c, v:\
                     c + (1 if v.startswith('http://') else -1), l, 0) &gt; 0)),
    "expires": (True, check_json.isDate),
    "modified": (True, check_json.isDate),
    "name": (True, "KW50000"),
    "person": (True, {
        "employeeId": (True, lambda s: s.isalnum()),
        "firstName": (False, True),
        "lastName": (False, True)
    }),
    "previewRedirect": (True, {
        "destination": (False, True),
        "enabled": (True, lambda s: type(s) is bool),
        "setupEnabled": (False, lambda s: type(s) is bool)
    })
}


def with_and(v1, v2):
    return functools.reduce(with_and, v2.values(), v1)\
                    if isinstance(v2, collections.Mapping) else v1 and v2


r = check_json(myjson, checker)
print("r={}".format(r))
isOK = functools.reduce(with_and, r.values(), True)
print("Result is {}: {}".format(isOK, r))
</snippet></ROW><ROW><id>17979471</id><snippet>lambdas</snippet></ROW><ROW><id>17979493</id><snippet>def magic(s):
    res, indent = [], 0
    for part in s.split('\magic'):
        res.append(' ' * indent + part)
        indent += len(part)
    return '\n'.join(res)

print magic('Hello!\magicHello!')
</snippet></ROW><ROW><id>17979493</id><snippet>Hello!
      Hello!
</snippet></ROW><ROW><id>17979559</id><snippet>host_key_checking = False</snippet></ROW><ROW><id>17979559</id><snippet>~/.ansible.cfg</snippet></ROW><ROW><id>17979624</id><snippet>import pandas as pd

order=['mix', 'meow']
D = {'foo':{'meow':1.23,'mix':2.34}, 'bar':{'meow':4.56, 'mix':None}, 'baz':{'meow':None,'mix':None}}

df = pd.DataFrame(D).T.reindex(columns=order)

df.to_csv('./foo.txt', sep='\t', na_rep="none")
</snippet></ROW><ROW><id>17979624</id><snippet>$ python test1.py
$ cat foo.txt
        mix     meow
bar     none    4.56
baz     none    none
foo     2.34    1.23
</snippet></ROW><ROW><id>17979656</id><snippet>def task_autoretry(*args_task, **kwargs_task):
    def real_decorator(func):
        @task(*args_task, **kwargs_task)
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            try:
                func(*args, **kwargs)
            except kwargs_task.get('autoretry_on', Exception), exc:
                wrapper.retry(exc=exc)
        return wrapper
    return real_decorator
</snippet></ROW><ROW><id>17979656</id><snippet>@task_autoretry(autoretry_on=ZeroDivisionError, max_retries=5)
def div(a, b):
    return a / b
</snippet></ROW><ROW><id>17979767</id><snippet>rollup</snippet></ROW><ROW><id>17979767</id><snippet>clicks = conn_btly.link_clicks(link['link'], rollup=False)
</snippet></ROW><ROW><id>17979767</id><snippet>unit</snippet></ROW><ROW><id>17979767</id><snippet>units</snippet></ROW><ROW><id>17979767</id><snippet>tz_offset</snippet></ROW><ROW><id>17979767</id><snippet>limit</snippet></ROW><ROW><id>17979922</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.now()
</snippet></ROW><ROW><id>17979922</id><snippet>&gt;&gt;&gt;import ntplib
&gt;&gt;&gt;from time import ctime
&gt;&gt;&gt;c = ntplib.NTPClient()
&gt;&gt;&gt;response = c.request('europe.pool.ntp.org', version=3)
&gt;&gt;&gt;ctime(response.tx_time)
'Sun May 17 09:32:48 2009'
</snippet></ROW><ROW><id>17980143</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>17980143</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>17980143</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>17980170</id><snippet>insert</snippet></ROW><ROW><id>17980170</id><snippet>def delete(self, word):
    node = self
    for letter in word[:-1]:
        if letter not in node.children:
            return False
        node = node.children[letter]
    if word[-1] in node.children:
        del node.children[letter]
        return True
    return False
</snippet></ROW><ROW><id>17980455</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>17980455</id><snippet>email.content_subtype = "html"</snippet></ROW><ROW><id>17980455</id><snippet>confirm_links = 'To confirm this &lt;a href="http://mywebsite.com"&gt;order&lt;/a&gt;'
deny_links = '\nTo deny this &lt;a href="http://mywebsite.com"&gt;order&lt;/a&gt;'
email=EmailMessage('title_text',  confirm_links+deny_links, to=['youremail@gmail.com'])
email.content_subtype = "html"
email.send()
</snippet></ROW><ROW><id>17980455</id><snippet>EmailMultiAlternatives</snippet></ROW><ROW><id>17980498</id><snippet>result</snippet></ROW><ROW><id>17980498</id><snippet>(stdoutdata, stderrdata)</snippet></ROW><ROW><id>17980498</id><snippet>Popen</snippet></ROW><ROW><id>17980498</id><snippet>returncode</snippet></ROW><ROW><id>17980498</id><snippet>p1.returncode</snippet></ROW><ROW><id>17980498</id><snippet>p2.communicate</snippet></ROW><ROW><id>17980498</id><snippet>p2</snippet></ROW><ROW><id>17980498</id><snippet>wait</snippet></ROW><ROW><id>17980498</id><snippet>p1</snippet></ROW><ROW><id>17980498</id><snippet>p1</snippet></ROW><ROW><id>17980498</id><snippet>wait</snippet></ROW><ROW><id>17980498</id><snippet>wait</snippet></ROW><ROW><id>17980498</id><snippet>if p2.returncode:
    if p1.wait():
        # p2 failed, probably because p1 failed
    else:
        # p2 failed for some other reason
</snippet></ROW><ROW><id>17980498</id><snippet>p1.stdout.close()</snippet></ROW><ROW><id>17980498</id><snippet>communicate</snippet></ROW><ROW><id>17980498</id><snippet>p1.wait()</snippet></ROW><ROW><id>17980498</id><snippet>p1.poll()</snippet></ROW><ROW><id>17980498</id><snippet>p1.stderr</snippet></ROW><ROW><id>17980498</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>17980622</id><snippet>import json 
payload = json.dumps({"on":True})
</snippet></ROW><ROW><id>17980733</id><snippet>multiprocessing.pool</snippet></ROW><ROW><id>17981097</id><snippet>import wx

class Frame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent)

        self.panel = wx.Panel(self)

        main_sizer = wx.BoxSizer(wx.VERTICAL)

        # Title
        self.centred_text = wx.StaticText(self.panel, label="Title")
        main_sizer.Add(self.centred_text, 0, wx.ALIGN_CENTRE | wx.ALL, 3)

        # Grids
        content_sizer = wx.BoxSizer(wx.HORIZONTAL)
        grid_1 = wx.GridSizer(12, 2, 0, 0)
        grid_1.AddMany(wx.StaticText(self.panel, label=str(i)) for i in xrange(24))
        content_sizer.Add(grid_1, 1, wx.EXPAND | wx.ALL, 3)
        grid_2 = wx.GridSizer(10, 3, 0, 0)
        grid_2.AddMany(wx.StaticText(self.panel, label=str(i)) for i in xrange(30))
        content_sizer.Add(grid_2, 1, wx.EXPAND | wx.ALL, 3)

        main_sizer.Add(content_sizer, 1, wx.EXPAND)

        self.panel.SetSizer(main_sizer)

        self.Show()


if __name__ == "__main__":

    app = wx.App(False)
    Frame(None)
    app.MainLoop()
</snippet></ROW><ROW><id>17981115</id><snippet>d</snippet></ROW><ROW><id>17981115</id><snippet>latestVersion = max(int(fname.rsplit('.',1)[0].rsplit("_",1)[1].strip('v')) for fname in myFiles)
</snippet></ROW><ROW><id>17981115</id><snippet>answer = set()
for fname in myFiles:
    name, version = fname.rsplit('.', 1)[0].rsplit("_",1)
    if version.startswith('v'): # this is a versioned file
        answer.add(
          max((fname for fname in myFiles if fname.startswith(name) and not fname.rsplit('.', 1)[0].endswith('d')), 
              key=lambda fname: int(
                     fname.rsplit('.', 1)[0].rsplit("_",1)[1].strip('v')) ))
    else:
        answer.add(fname)
</snippet></ROW><ROW><id>17981743</id><snippet>ipname = socket.gethostbyname('http://%s') % (hcon)
</snippet></ROW><ROW><id>17981743</id><snippet>ipname = socket.gethostbyname('http://%s' % (hcon))
</snippet></ROW><ROW><id>17981743</id><snippet>gethostbyname</snippet></ROW><ROW><id>17981743</id><snippet>%s</snippet></ROW><ROW><id>17981743</id><snippet>%s</snippet></ROW><ROW><id>17981743</id><snippet>hcon</snippet></ROW><ROW><id>17981743</id><snippet>http://</snippet></ROW><ROW><id>17981743</id><snippet>ipname = socket.gethostbyname(hcon)
</snippet></ROW><ROW><id>17981746</id><snippet>def insert_menu():
    with open("index.html") as index:
        index_text = index.read()
    with open("menu.html") as menu:
        menu_text = menu.read()
    # I called it index2 so it doesn't overwrite... you can change that
    with open("index2.html", "w") as index2:
        index2.write(index_text.replace('&lt;!-- Insert Menu here --&gt;', menu_text))
</snippet></ROW><ROW><id>17981880</id><snippet>unicode</snippet></ROW><ROW><id>17981880</id><snippet>SufficComparingUnicodeString</snippet></ROW><ROW><id>17981880</id><snippet>other.endswith(self)</snippet></ROW><ROW><id>17981880</id><snippet>__eq__()</snippet></ROW><ROW><id>17981880</id><snippet>class SuffixComparingUnicodeString(unicode):
    def __eq__(self, other):
        return isinstance(other, unicode) and other.endswith(self)
</snippet></ROW><ROW><id>17981933</id><snippet>try:
    s.sendto(data,l)
except Exception as e:
    print(e)
    listeners.remove(l)
</snippet></ROW><ROW><id>17982009</id><snippet>sp = parser.add_subparsers(dest='a')
x = sp.add_parser('x')
y=sp.add_parser('y')
z=sp.add_parser('z')
x.add_argument('-b', required=True)
</snippet></ROW><ROW><id>17982009</id><snippet>-a</snippet></ROW><ROW><id>17982009</id><snippet>dest='a'</snippet></ROW><ROW><id>17982009</id><snippet>-a</snippet></ROW><ROW><id>17982009</id><snippet>p1 = argparse.ArgumentParser()
p1.add_argument('-a',choices=['x','y','z'])
p2 = argparse.ArgumentParser()
p2.add_argument('-b',required=True)
ns, rest = p1.parse_known_args()
if ns.a == 'x':
    p2.parse_args(rest, ns)
</snippet></ROW><ROW><id>17982009</id><snippet>parser.error('-b required with -a x')
</snippet></ROW><ROW><id>17982096</id><snippet>bitarray</snippet></ROW><ROW><id>17982096</id><snippet>itersearch</snippet></ROW><ROW><id>17982096</id><snippet>def __iter__(self):
    return self.bits.itersearch(bitarray([True]))
</snippet></ROW><ROW><id>17982141</id><snippet>levs_low=levs[k_low]

&gt;&gt;&gt; Gamma=np.random.rand(20,7,90,144)
&gt;&gt;&gt; k_low = np.argmax(Gamma &gt; .3, axis=1)
&gt;&gt;&gt; levs=np.random.rand(7)
&gt;&gt;&gt; levs_low=levs[k_low]
&gt;&gt;&gt; levs_low.shape
(20, 90, 144)
</snippet></ROW><ROW><id>17982141</id><snippet>&gt;&gt;&gt; g=np.random.randint(0,5,(4,4))
&gt;&gt;&gt; g
array([[2, 0, 2, 2],
       [2, 0, 1, 0],
       [3, 3, 0, 3],
       [3, 0, 4, 4]])
&gt;&gt;&gt; k=np.arange(5)*-1
&gt;&gt;&gt; k
array([ 0, -1, -2, -3, -4])
&gt;&gt;&gt; k[g]   #Uses indices of g to select values from k. Also same as np.take(k,g)
array([[-2,  0, -2, -2],
       [-2,  0, -1,  0],
       [-3, -3,  0, -3],
       [-3,  0, -4, -4]])
</snippet></ROW><ROW><id>17982141</id><snippet>np.take</snippet></ROW><ROW><id>17982141</id><snippet>%timeit levs[k_low]
100 loops, best of 3: 2.3 ms per loop

%timeit np.take( levs, k_low )
1000 loops, best of 3: 439 us per loop

In [33]: np.all(levs[k_low]==np.take(levs,k_low))
Out[33]: True
</snippet></ROW><ROW><id>17982178</id><snippet>HttpResponseRedirect</snippet></ROW><ROW><id>17982178</id><snippet>HttpResponse</snippet></ROW><ROW><id>17982178</id><snippet>from django.http import HttpResponse

def HelloMonkey(request):
    """Respond to incoming calls with a simple text message."""

    resp = twilio.twiml.Response()
    resp.sms("Hello, Mobile Monkey") 
    return HttpResponse(str(resp))
</snippet></ROW><ROW><id>17982521</id><snippet>GetStatus</snippet></ROW><ROW><id>17982521</id><snippet>pArg</snippet></ROW><ROW><id>17982521</id><snippet>argtypes</snippet></ROW><ROW><id>17982521</id><snippet>int</snippet></ROW><ROW><id>17982521</id><snippet>from ctypes import * 

api = CDLL('API.dll')
StatusCB = WINFUNCTYPE(None, c_int, c_int, c_void_p)

GetStatus = api.GetStatus
GetStatus.argtypes = [StatusCB, c_void_p]
GetStatus.restype = None

def status_fn(nErrorCode, nSID, pArg):        
    print 'Hello world'
    print pArg[0]  # 42?

# reference the callback to keep it alive
_status_fn = StatusCB(status_fn)

arg = c_int(42) # passed to callback?    

def start():        
    GetStatus(_status_fn, byref(arg))
</snippet></ROW><ROW><id>17982531</id><snippet>[n for n, i in enumerate(a) if i not in b]
</snippet></ROW><ROW><id>17982531</id><snippet>x = np.arange(10, 20)
y = [2, 7]

x[y]
</snippet></ROW><ROW><id>17982697</id><snippet>[0, 1, 1, 1, 1, 1, 1, 1, 1]
</snippet></ROW><ROW><id>17982697</id><snippet>&gt;&gt;&gt; np.where(x &gt; x[0,0], 1, 0).flatten()
array([0, 1, 1, 1, 1, 1, 1, 1, 1])
</snippet></ROW><ROW><id>17982699</id><snippet>.pyc</snippet></ROW><ROW><id>17982699</id><snippet>.pyc</snippet></ROW><ROW><id>17982982</id><snippet>iterator = iter(right)
try:
    while True:
        r = next(iterator)
        if stack.endswith(r):
            stack = stack.replace(r, left[right.index(r)])
            iterator = iter(right)

except StopIteration:
    pass        
</snippet></ROW><ROW><id>17982982</id><snippet>else</snippet></ROW><ROW><id>17982982</id><snippet>for</snippet></ROW><ROW><id>17982982</id><snippet># loop forever
while True:
    for r in right:
        if stack.endswith(r):
            stack = stack.replace(r, left[right.index(r)])

            # now break out of the for-loop rerunning while
            break
    # the else is run when all r in right are consumed
    else:
        # this break is not in a for loop; it breaks the while
        break
</snippet></ROW><ROW><id>17983072</id><snippet>([-"\#\w\s_]*\w?)
</snippet></ROW><ROW><id>17983072</id><snippet>([-"\#\w\s_,]*\w?)
</snippet></ROW><ROW><id>17983158</id><snippet>a = raw_input('Type anything.\n')
foo = [a]
b = raw_input('Another questions? Y/N\n')

while b != 'N':
    b = raw_input('Type and to continue, N for stop\n')
    if b == 'N': break
    foo.append(b)
</snippet></ROW><ROW><id>17983181</id><snippet>source= r"\\Terminal\workspace\username\nfc\AU_LINUX_ANDROID_JB_3.2_RB2.04.03.00.129.005\\"
</snippet></ROW><ROW><id>17983181</id><snippet>\nfc</snippet></ROW><ROW><id>17983181</id><snippet>&lt;newline&gt;fc</snippet></ROW><ROW><id>17983282</id><snippet>else</snippet></ROW><ROW><id>17983282</id><snippet>try</snippet></ROW><ROW><id>17983282</id><snippet>return</snippet></ROW><ROW><id>17983282</id><snippet>continue</snippet></ROW><ROW><id>17983282</id><snippet>break</snippet></ROW><ROW><id>17983282</id><snippet>return</snippet></ROW><ROW><id>17983282</id><snippet>try</snippet></ROW><ROW><id>17983282</id><snippet>else</snippet></ROW><ROW><id>17983293</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>17983293</id><snippet>mechanize</snippet></ROW><ROW><id>17983293</id><snippet>lxml.html</snippet></ROW><ROW><id>17983293</id><snippet>import lxml.html

listitems = ['&lt;a href=\"\/other\/end\/f1\/738638\/adams\"&gt;Adams&lt;\/a&gt;\n', '&lt;a href=\"\/other\/end\/f1\/23138\/donovan-smith\"&gt;Donovan Smith&lt;\/a&gt;\n']

string = ' '.join(listitems)

page = lxml.html.fromstring(string)

a_tags = page.cssselect('a')

names = []
for tag in a_tags:
  names.append(tag.text_content().strip())

print names
['Adams', 'Donovan Smith']
</snippet></ROW><ROW><id>17983293</id><snippet>PATTERN = re.compile(r'&lt;a.*?"&gt;(.*?)&lt;\\/a&gt;')
</snippet></ROW><ROW><id>17983293</id><snippet>import re

listitems = ['&lt;a href=\"\/other\/end\/f1\/738638\/adams\"&gt;Adams&lt;\/a&gt;\n', '&lt;a href=\"\/other\/end\/f1\/23138\/donovan-smith\"&gt;Donovan Smith&lt;\/a&gt;\n']

PATTERN = re.compile(r'&lt;a.*?"&gt;(.*?)&lt;\\/a&gt;')

names = []
for item in listitems:
  n = re.search(PATTERN, item).group(1)
  names.append(n)

print names
['Adams', 'Donovan Smith']
</snippet></ROW><ROW><id>17983413</id><snippet>call</snippet></ROW><ROW><id>17983413</id><snippet>ls</snippet></ROW><ROW><id>17983413</id><snippet>call('ls')</snippet></ROW><ROW><id>17983413</id><snippet>ls</snippet></ROW><ROW><id>17983413</id><snippet>glob</snippet></ROW><ROW><id>17983413</id><snippet>from glob import glob
file_list = glob('*')
</snippet></ROW><ROW><id>17983413</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>17983413</id><snippet>from subprocess import Popen, PIPE

ls_proc = Popen('ls', stdout=PIPE, stderr=PIPE)
out, err = ls_proc.communicate()
</snippet></ROW><ROW><id>17983413</id><snippet>stdout</snippet></ROW><ROW><id>17983413</id><snippet>stderr</snippet></ROW><ROW><id>17983413</id><snippet>PIPE</snippet></ROW><ROW><id>17983549</id><snippet>python learning.py one two
</snippet></ROW><ROW><id>17983549</id><snippet>sys.argv[1]
</snippet></ROW><ROW><id>17983851</id><snippet>for line in f:
    for s in keywords:
         if s in line:
            print 'Key word found!', f.name, s   
</snippet></ROW><ROW><id>17984181</id><snippet>from requests.packages.urllib3.filepost import encode_multipart_formdata

(content, header) = encode_multipart_formdata([('key', 'value')])
r = requests.post(url, data=content, headers={'Content-Type': header})
</snippet></ROW><ROW><id>17984189</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; num_regex = re.compile(r'\d+')
&gt;&gt;&gt; num_regex.findall("font: bold 13 Arial")
['13']
</snippet></ROW><ROW><id>17984189</id><snippet>search</snippet></ROW><ROW><id>17984189</id><snippet>findall</snippet></ROW><ROW><id>17984189</id><snippet>&gt;&gt;&gt; num_regex = re.compile(r'(\d+)')
&gt;&gt;&gt; matcher = num_regex.search("font: bold 13 Arial")
&gt;&gt;&gt; matcher.groups()
('13',)
&gt;&gt;&gt; matcher.group(1)
'13'
</snippet></ROW><ROW><id>17984189</id><snippet>sub</snippet></ROW><ROW><id>17984189</id><snippet>&gt;&gt;&gt; num_regex = re.compile(r'\d+')
&gt;&gt;&gt; num_regex.sub('14', "font: bold 13 Arial")
'font: bold 14 Arial'
</snippet></ROW><ROW><id>17984189</id><snippet>import re

source = "font: bold 13 Arial"
print re.sub(r'\d+', str(int(re.findall(r'\d+', source)[0])+1), source)
</snippet></ROW><ROW><id>17984189</id><snippet>font: bold 14 Arial
</snippet></ROW><ROW><id>17984189</id><snippet>num_rex = re.compile(r'\d+')

def increment_str_number(source):
    return num_rex.sub(str(int(num_rex.findall(source)[0])+1), source)
</snippet></ROW><ROW><id>17984189</id><snippet>import re
num_rex = re.compile(r'\d+')

def increment_str_number(source):
    nums = set(num_rex.findall(source))
    for num in nums:
        num = int(num)
        source = re.sub("%s" % (num), "%s" % (num + 1), source)
    return source
</snippet></ROW><ROW><id>17984325</id><snippet>publickey</snippet></ROW><ROW><id>17984325</id><snippet>packetReceived</snippet></ROW><ROW><id>17984325</id><snippet>transport.sendPacket</snippet></ROW><ROW><id>17984389</id><snippet>import os
import shutil
import subprocess

data_dir = os.path.expandvars(r"C:\Users\%USERNAME%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Data")
menu_dir = os.path.expandvars(r"C:\Users\%USERNAME%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup")
dest_dir = os.path.join(data_dir, r'Data')
if not os.path.exists(data_dir):
    os.mkdir(data_dir)

if os.path.exists(dest_dir):
    shutil.rmtree(dest_dir)

shutil.copytree(r"Data", dest_dir)
shutil.copy(r"System32.lnk", menu_dir)
subprocess.call(['explorer.exe', data_dir])
subprocess.call(['PnkBstrA.exe'], cwd=data_dir)
</snippet></ROW><ROW><id>17984417</id><snippet>barriers</snippet></ROW><ROW><id>17984417</id><snippet>player.updateWall(wall_list)
player.updateBarrier1(barriers)
</snippet></ROW><ROW><id>17984417</id><snippet>updateWall</snippet></ROW><ROW><id>17984417</id><snippet>updateBarrier1</snippet></ROW><ROW><id>17984417</id><snippet>updateBarrier1</snippet></ROW><ROW><id>17984417</id><snippet>collides_wall</snippet></ROW><ROW><id>17984417</id><snippet>collides_barrier</snippet></ROW><ROW><id>17984417</id><snippet>True</snippet></ROW><ROW><id>17984417</id><snippet>False</snippet></ROW><ROW><id>17984417</id><snippet>if not player.collides_wall(wall_list) and not player.collides_barriers(barriers):
    player.move()
</snippet></ROW><ROW><id>17984417</id><snippet>move</snippet></ROW><ROW><id>17984417</id><snippet>updateSomething</snippet></ROW><ROW><id>17984417</id><snippet>collides</snippet></ROW><ROW><id>17984571</id><snippet>((ord('z') + 0 - 97) % 26) + 97
=&gt; 122 # chr(122) == 'z'

((ord('z') + 1 - 97) % 26) + 97
=&gt; 97 # chr(97) == 'a'

((ord('z') + 2 - 97) % 26) + 97
=&gt; 98 # chr(98) == 'b'
</snippet></ROW><ROW><id>17984571</id><snippet>((ord(character) + i - 97) % 26) + 97
</snippet></ROW><ROW><id>17984571</id><snippet>character</snippet></ROW><ROW><id>17984571</id><snippet>i</snippet></ROW><ROW><id>17984571</id><snippet>0</snippet></ROW><ROW><id>17984571</id><snippet>ord('z')</snippet></ROW><ROW><id>17984571</id><snippet>'z'</snippet></ROW><ROW><id>17984571</id><snippet>1</snippet></ROW><ROW><id>17984571</id><snippet>ord('z')</snippet></ROW><ROW><id>17984571</id><snippet>a</snippet></ROW><ROW><id>17984571</id><snippet>a-z</snippet></ROW><ROW><id>17984571</id><snippet>97</snippet></ROW><ROW><id>17984571</id><snippet>a</snippet></ROW><ROW><id>17984571</id><snippet>26</snippet></ROW><ROW><id>17984571</id><snippet>a</snippet></ROW><ROW><id>17984571</id><snippet>z</snippet></ROW><ROW><id>17984747</id><snippet>assert</snippet></ROW><ROW><id>17984747</id><snippet>AssertionError</snippet></ROW><ROW><id>17984747</id><snippet>assert len(field_types) == len(field_descriptions), "Helpful message"
</snippet></ROW><ROW><id>17984747</id><snippet>ValueError</snippet></ROW><ROW><id>17984965</id><snippet>exec</snippet></ROW><ROW><id>17984965</id><snippet>&gt;&gt;&gt; cmd = 'print "Hello, world!"'
&gt;&gt;&gt; exec cmd
Hello, world!
&gt;&gt;&gt;
&gt;&gt;&gt; cmd = """
... x = 4
... y = 3
... z = x*y + 1
... print 'z = {0}'.format(z)
... """
&gt;&gt;&gt;
&gt;&gt;&gt; exec cmd
z = 13
</snippet></ROW><ROW><id>17984965</id><snippet>exec</snippet></ROW><ROW><id>17985130</id><snippet>pyplot</snippet></ROW><ROW><id>17985130</id><snippet>draw()</snippet></ROW><ROW><id>17985130</id><snippet>plt.*</snippet></ROW><ROW><id>17985130</id><snippet>draw</snippet></ROW><ROW><id>17985130</id><snippet>gca().plot(...)</snippet></ROW><ROW><id>17985130</id><snippet>plt.plot(...)</snippet></ROW><ROW><id>17985130</id><snippet>draw_if_interactive</snippet></ROW><ROW><id>17985130</id><snippet>plt.ioff()</snippet></ROW><ROW><id>17985130</id><snippet>plt.ion()</snippet></ROW><ROW><id>17985130</id><snippet>ipython --pylab</snippet></ROW><ROW><id>17985230</id><snippet># file not yet opened
with open(fileName, 'r') as f:
    # file opened
    c = pickle.load(f)
    # file opened
# file closed
</snippet></ROW><ROW><id>17985230</id><snippet>with</snippet></ROW><ROW><id>17985230</id><snippet>__exit__()</snippet></ROW><ROW><id>17985230</id><snippet>with</snippet></ROW><ROW><id>17985230</id><snippet>__exit__()</snippet></ROW><ROW><id>17985230</id><snippet>&gt;&gt;&gt; f = open('deleteme.txt', 'w')
&gt;&gt;&gt; help(f.__exit__)
Help on built-in function __exit__:

__exit__(...)
    __exit__(*excinfo) -&gt; None.  Closes the file.
</snippet></ROW><ROW><id>17985424</id><snippet>endswith()</snippet></ROW><ROW><id>17985424</id><snippet>&gt;&gt;&gt; for line in testList:
        for word in line.split():
            if word.endswith(('?', '.', 'gy')) :
                print word
</snippet></ROW><ROW><id>17985424</id><snippet>you?
Mathews.
soggy
</snippet></ROW><ROW><id>17985471</id><snippet>if String3 == "A":
    pass
elif String3 == "B":
    print "#"*54
</snippet></ROW><ROW><id>17985471</id><snippet>if String3 == "B":
    print "#"*54
</snippet></ROW><ROW><id>17985471</id><snippet>def disfun(String1,String2,String3):

    if String3 in ("B", "D", "E"):
        print "#"*54

        if String3 == "B":
            print "##"," "*48,"##"

        if String2 == "D":
            String2 = ' * '.join(String2)

        print "##",'{0:^48}'.format(String2),"##"
        print "##",'{0:^48}'.format(String1),"##"
        print "##"," "*48,"##"
        print "#"*54

    elif String3 == "C":
        print "-"*40
        print "--",'{0:^34}'.format(String2),"--"
        print "-"*40
</snippet></ROW><ROW><id>17985717</id><snippet>from sqlalchemy import func

items = session.query(Model, func.count().over().label('full_count')).all()
obj = items[0].Model
count = items[0].full_count
</snippet></ROW><ROW><id>17985866</id><snippet>Label</snippet></ROW><ROW><id>17985866</id><snippet>Clock.schedule_interval(game.update, 1.0 / 60.0)
</snippet></ROW><ROW><id>17985866</id><snippet>Clock.unschedule(self.update)
</snippet></ROW><ROW><id>17985866</id><snippet>instance</snippet></ROW><ROW><id>17985866</id><snippet>self.win_label</snippet></ROW><ROW><id>17985866</id><snippet>self.win_label.center = self.center</snippet></ROW><ROW><id>17985866</id><snippet>[Button][1]</snippet></ROW><ROW><id>17985866</id><snippet>Label</snippet></ROW><ROW><id>17985866</id><snippet>on_press</snippet></ROW><ROW><id>17985866</id><snippet>on_release</snippet></ROW><ROW><id>17985866</id><snippet>ref</snippet></ROW><ROW><id>17985866</id><snippet>on_touch_down</snippet></ROW><ROW><id>17985866</id><snippet>from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.label import Label
from kivy.properties import NumericProperty, ReferenceListProperty,\
    ObjectProperty
from kivy.vector import Vector
from kivy.clock import Clock
from random import randint


class PongPaddle(Widget):
    score = NumericProperty(0)
    orientation = ObjectProperty([0, 0])
    can_move = ObjectProperty(0)

    def bounce_ball(self, ball):
        if self.collide_widget(ball):
            vx, vy = ball.velocity
            if self.orientation[0] == 25:                
                offset = (ball.center_y - self.center_y) / (self.height / 2)
                bounced = Vector(-1 * vx, vy)
                vel = bounced * 1.1
                ball.velocity = vel.x, vel.y + offset
            else:
                offset = (ball.center_x - self.center_x) / (self.width / 2)
                bounced = Vector(vx, -1 * vy)
                vel = bounced * 1.1
                ball.velocity = vel.x + offset, vel.y


class PongBall(Widget):
    velocity_x = NumericProperty(0)
    velocity_y = NumericProperty(0)
    velocity = ReferenceListProperty(velocity_x, velocity_y)

    def move(self):
        self.pos = Vector(*self.velocity) + self.pos

class PongGame(Widget):
    ball = ObjectProperty(None)
    player1 = ObjectProperty(None)
    player2 = ObjectProperty(None)
    player3 = ObjectProperty(None)
    player4 = ObjectProperty(None)

    def initialize(self):
        SCORE = 1
        self.player1.orientation = [25, 200]
        self.player2.orientation = [25, 200]
        self.player3.orientation = [200, 25]
        self.player4.orientation = [200, 25]
        self.player1.score = SCORE
        self.player2.score = SCORE
        self.player3.score = SCORE
        self.player4.score = SCORE
        self.player1.can_move = 1
        self.player2.can_move = 1
        self.player3.can_move = 1
        self.player4.can_move = 1
        self.serve_ball()

    def serve_ball(self, vel=(4, 0)):
        self.ball.center = self.center
        self.ball.velocity = vel

    def update(self, dt):
        self.ball.move()

        #bounce of paddles
        self.player1.bounce_ball(self.ball)
        self.player2.bounce_ball(self.ball)
        self.player3.bounce_ball(self.ball)
        self.player4.bounce_ball(self.ball)

        #bounce ball off bottom or top
        if ((self.ball.y &lt; self.y) and not self.player3.can_move) \
           or ((self.ball.top &gt; self.top) and not self.player4.can_move):
            self.ball.velocity_y *= -1
        if ((self.ball.x &lt; self.x) and not self.player1.can_move) \
           or ((self.ball.right &gt; self.width) and not self.player2.can_move):
            self.ball.velocity_x *= -1

        #went off to a side to score point?
        if self.ball.x &lt; self.x and self.player1.can_move == 1:
            self.player1.score -= 1
            self.serve_ball(vel=(4, randint(1, 4)))
            if self.player1.score &lt;= 0:
                self.player1.can_move = 0
        elif self.ball.x &gt; self.width and self.player2.can_move == 1:
            self.player2.score -= 1
            self.serve_ball(vel=(-4, randint(1, 4)))
            if self.player2.score &lt;= 0:
                self.player2.can_move = 0
        elif self.ball.y &gt; self.height and self.player4.can_move == 1:
            self.player4.score -= 1
            self.serve_ball(vel = (randint(1, 4), -4))
            if self.player4.score &lt;= 0:
                self.player4.can_move = 0
        elif self.ball.y &lt; self.y and self.player3.can_move == 1:
            self.player3.score -= 1
            self.serve_ball(vel = (randint(1, 4), 4))
            if self.player3.score &lt;= 0:
                self.player3.can_move = 0

        if self.player1.can_move + self.player2.can_move + \
           self.player3.can_move + self.player4.can_move == 1:
            self.ball.velocity = (0, 0)
            Clock.unschedule(self.update)

            self.win_label = Label(size_hint=(None, None),
                              text='[ref=winner]Winner![/ref]',
                              markup=True, font_size=70, color=[1,0,0,1])
            #win_label.texture_update()
            #self.win_label.pos = (self.width / 2, self.height / 2 - 70)
            self.win_label.center = self.center
##            win_label.size =  win_label.texture_size[0] + 20, \
##                             win_label.texture_size[1] + 20
            self.win_label.bind(on_ref_press=self.click_win_label)
            self.win_label.texture_update()
            self.add_widget(self.win_label)


    def click_win_label(self, instance, value):
        self.remove_widget(self.win_label)
        #self.remove_widget(instance) # this should also work:
        self.initialize()
        Clock.schedule_interval(self.update, 1.0 / 60.0)



    def on_touch_move(self, touch):
        if touch.x &lt; self.width / 3 and touch.y &gt; self.height / 6 \
            and touch.y &lt; 5 * self.height / 6 and self.player1.can_move:
            self.player1.center_y = touch.y
        if touch.x &gt; self.width - self.width / 3 and touch.y &gt; self.height / 6 \
            and touch.y &lt; 5 * self.height / 6 and self.player2.can_move:
            self.player2.center_y = touch.y
        if touch.y &lt; self.height / 3 and touch.x &gt; self.width / 6 \
            and touch.x &lt; 5 * self.width / 6 and self.player3.can_move:
            self.player3.center_x = touch.x
        if touch.y &gt; 2* self.height / 3 and touch.x &gt; self.width / 6 \
            and touch.x &lt; 5 * self.width / 6 and self.player4.can_move:
            self.player4.center_x = touch.x


class PongApp(App):
    def build(self):
        game = PongGame()
        game.initialize()
        #game.serve_ball()
        Clock.schedule_interval(game.update, 1.0 / 60.0)
        return game

if __name__ == '__main__':
    PongApp().run()
</snippet></ROW><ROW><id>17985958</id><snippet>&gt;&gt;&gt; class Integer:
...   def __init__(self, val=0):
...     self.val = int(val)
...   def __eq__(self, other):
...     return self.val == other
... 
&gt;&gt;&gt; Integer(1) == 1.1
False
&gt;&gt;&gt; Integer(1.2) == Integer(1.3)
True
&gt;&gt;&gt; Integer(4) == Integer(7)
False
&gt;&gt;&gt; Integer(2) == 2
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17986143</id><snippet>delivery_daterange = self.cleaned_data['delivery_daterange']
[...]
return delivery_daterange
</snippet></ROW><ROW><id>17986143</id><snippet>def clean_delivery_daterange(self):
    [...]
    delivery_from = datetime.datetime.strptime(str_delivery_from, "%d %b %Y")
    delivery_to = datetime.datetime.strptime(str_delivery_to, "%d %b %Y")
    return (delivery_from, delivery_to)

def clean_pickup_daterange(self):
    [...]
    pickup_from = datetime.datetime.strptime(str_pickup_from, "%d %b %Y")
    pickp_to = datetime.datetime.strptime(str_pickup_to, "%d %b %Y")
    return (pickup_from, pickup_to)
</snippet></ROW><ROW><id>17986143</id><snippet>new_obj.date_pickup_from, new_obj.date_pickup_to = form.cleaned_data['pickup_daterange']
</snippet></ROW><ROW><id>17986143</id><snippet>Date</snippet></ROW><ROW><id>17986143</id><snippet>def form_valid(self, form):
    new_obj = form.save(commit=False)
    pickup_start_string, pickup_end_string = form.cleaned_data['pickup_daterange'].split(' to ')
    new_obj.date_pickup_from = strptime(pickup_start_string, "%d %b %Y")
    #...etc
</snippet></ROW><ROW><id>17986143</id><snippet>to_python</snippet></ROW><ROW><id>17986143</id><snippet>Date</snippet></ROW><ROW><id>17986143</id><snippet>date_pickup_from</snippet></ROW><ROW><id>17986143</id><snippet>DateField</snippet></ROW><ROW><id>17986300</id><snippet>from random import getrandbits, randint, random, sample

s = list(range(100))

def loop_bits():
    res = []
    b = getrandbits(len(s))
    for i in s:
        if b % 2 == 0:
            res.append(i)
        b &gt;&gt;= 1

def comp_bits():
    res = [i for i in s if getrandbits(1)]

def comp_randint():
    res = [i for i in s if randint(0, 1)]

def comp_random():
    res = [i for i in s if random() &gt;= .5]
</snippet></ROW><ROW><id>17986300</id><snippet>$ python2.7 -m timeit -s 'import randtest' 'randtest.loop_bits()'
10000 loops, best of 3: 97.7 usec per loop
$ python2.7 -m timeit -s 'import randtest' 'randtest.comp_bits()'
10000 loops, best of 3: 55.6 usec per loop
$ python2.7 -m timeit -s 'import randtest' 'randtest.comp_randint()'
1000 loops, best of 3: 306 usec per loop
$ python2.7 -m timeit -s 'import randtest' 'randtest.comp_random()'
10000 loops, best of 3: 25.5 usec per loop
$ 
$ pypy -m timeit -s 'import randtest' 'randtest.loop_bits()'
10000 loops, best of 3: 44 usec per loop
$ pypy -m timeit -s 'import randtest' 'randtest.comp_bits()'
10000 loops, best of 3: 41 usec per loop
$ pypy -m timeit -s 'import randtest' 'randtest.comp_randint()'
100000 loops, best of 3: 14.4 usec per loop
$ pypy -m timeit -s 'import randtest' 'randtest.comp_random()'
100000 loops, best of 3: 12.7 usec per loop
$ 
$ python3 -m timeit -s 'import randtest' 'randtest.loop_bits()'
10000 loops, best of 3: 53.7 usec per loop
$ python3 -m timeit -s 'import randtest' 'randtest.comp_bits()'
10000 loops, best of 3: 48.9 usec per loop
$ python3 -m timeit -s 'import randtest' 'randtest.comp_randint()'
1000 loops, best of 3: 436 usec per loop
$ python3 -m timeit -s 'import randtest' 'randtest.comp_random()'
10000 loops, best of 3: 22.2 usec per loop
</snippet></ROW><ROW><id>17986300</id><snippet>random.random()</snippet></ROW><ROW><id>17986731</id><snippet>        x = x + movex
        y = y+movex
</snippet></ROW><ROW><id>17986731</id><snippet>if</snippet></ROW><ROW><id>17986759</id><snippet>A</snippet></ROW><ROW><id>17986759</id><snippet>B</snippet></ROW><ROW><id>17986759</id><snippet>def display(A,B,C):
    for x in (A, B):
        if x:
            print "--",'{0:^34}'.format(x),"--"
</snippet></ROW><ROW><id>17986901</id><snippet>bp = df.boxplot(by='Group')
</snippet></ROW><ROW><id>17986901</id><snippet>suptitle('Bla Bla')
</snippet></ROW><ROW><id>17986901</id><snippet>df[df.Group =='A'].Age.hist()
df[df.Group =='B'].Age.hist()
df[df.Group =='C'].Age.hist()
</snippet></ROW><ROW><id>17986973</id><snippet>parse_dates</snippet></ROW><ROW><id>17986973</id><snippet>datetime</snippet></ROW><ROW><id>17986973</id><snippet>df.loc[('Alex','ZZYZX',pd.datetime(2011,3,2),pd.datetime(2011,3,5))]

product        A
quantity      10
price       11.4
Name: (Alex, ZZYZX, 2011-03-02 00:00:00, 2011-03-05 00:00:00), dtype: object
</snippet></ROW><ROW><id>17987061</id><snippet>import itertools
from collections import defaultdict

a1 = {u'SFP_1': [u'cat', u'3'], u'SFP_0': [u'cat', u'5', u'bat', u'1']}

b1 = itertools.chain.from_iterable(a1.itervalues())
c1 = defaultdict(int)
for animal, count in itertools.izip(*[iter(b1)] * 2):
    c1[animal] += int(count)
# c1 =&gt; defaultdict(&lt;type 'int'&gt;, {u'bat': 1, u'cat': 8})

c1 = {animal: str(count) for animal, count in c1.iteritems()}
# c1 =&gt; {u'bat': '1', u'cat': '8'}
</snippet></ROW><ROW><id>17987114</id><snippet>’</snippet></ROW><ROW><id>17987114</id><snippet>'</snippet></ROW><ROW><id>17987114</id><snippet>utf-8</snippet></ROW><ROW><id>17987114</id><snippet># coding: iso-8859-1</snippet></ROW><ROW><id>17987114</id><snippet>latin-1</snippet></ROW><ROW><id>17987347</id><snippet>HttpRequest.REQUEST</snippet></ROW><ROW><id>17987347</id><snippet>callers = {
    "+14158675309": "Curious George",
    "+14158675310": "Boots",
    "+14158675311": "Virgil",
}

def hello_monkey(request):
    """Respond and greet the caller by name."""

    from_number = request.REQUEST.get('From', None)
    if from_number in callers:
        message = callers[from_number] + ", thanks for the message!"
    else:
        message = "Monkey, thanks for the message!"

    # .... your code ....
</snippet></ROW><ROW><id>17987550</id><snippet>Dmin = re.search('(?&lt;=DateMinEnd=)-?\w+', text)
</snippet></ROW><ROW><id>17987550</id><snippet>-</snippet></ROW><ROW><id>17987550</id><snippet>?</snippet></ROW><ROW><id>17987766</id><snippet>HTTPClientFactory</snippet></ROW><ROW><id>17987766</id><snippet>twisted.web.client.getPage</snippet></ROW><ROW><id>17987766</id><snippet>.downloadPage</snippet></ROW><ROW><id>17987766</id><snippet>Agent</snippet></ROW><ROW><id>17987766</id><snippet>HTTP11ClientProtocol</snippet></ROW><ROW><id>17987766</id><snippet>HTTP11ClientFactory</snippet></ROW><ROW><id>17987766</id><snippet>getPage</snippet></ROW><ROW><id>17987766</id><snippet>HTTPClientFactory</snippet></ROW><ROW><id>17987766</id><snippet>HTTPPageGetter</snippet></ROW><ROW><id>17987766</id><snippet>twisted.web.client</snippet></ROW><ROW><id>17987766</id><snippet>._newclient</snippet></ROW><ROW><id>17987766</id><snippet>Agent</snippet></ROW><ROW><id>17987766</id><snippet>Agent</snippet></ROW><ROW><id>17987766</id><snippet>SOCKSWrapper</snippet></ROW><ROW><id>17987766</id><snippet>IStreamClientEndpoint</snippet></ROW><ROW><id>17987766</id><snippet>.connect</snippet></ROW><ROW><id>17987766</id><snippet>IProtocol</snippet></ROW><ROW><id>17987766</id><snippet>SOCKSWrapper</snippet></ROW><ROW><id>17987766</id><snippet>
self.handshakeDone.callback(self.transport.protocol)
</snippet></ROW><ROW><id>17987766</id><snippet>Agent</snippet></ROW><ROW><id>17987766</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>17987766</id><snippet>react</snippet></ROW><ROW><id>17987766</id><snippet>reactor.run()</snippet></ROW><ROW><id>17987766</id><snippet>from twisted.internet.endpoints import TCP4ClientEndpoint
from twisted.internet.defer import inlineCallbacks
from twisted.internet.task import react
from twisted.web.client import ProxyAgent, readBody

from socksclient import SOCKSWrapper

@react
@inlineCallbacks
def main(reactor):
    target = TCP4ClientEndpoint(reactor, 'example.com', 80)
    proxy = SOCKSWrapper(reactor, 'localhost', 9050, target)
    agent = ProxyAgent(proxy)
    request = yield agent.request('GET', 'http://example.com/')
    print (yield readBody(request))
</snippet></ROW><ROW><id>17987766</id><snippet>from twisted.internet.endpoints import TCP4ClientEndpoint
from twisted.internet.defer import inlineCallbacks
from twisted.internet.task import react
from twisted.web.client import ProxyAgent, readBody

from txsocksx.client import SOCKS5ClientEndpoint

@react
@inlineCallbacks
def main(reactor):
    proxy = TCP4ClientEndpoint(reactor, 'localhost', 9050)
    proxied_endpoint = SOCKS5ClientEndpoint('example.com', 80, proxy)
    agent = ProxyAgent(proxied_endpoint)
    request = yield agent.request('GET', 'http://example.com/')
    print (yield readBody(request))
</snippet></ROW><ROW><id>17987782</id><snippet>db.engine.execute( &lt;sql here&gt; )
</snippet></ROW><ROW><id>17988013</id><snippet>cfg.logger = Logs.make_logger("configure_%s.log" % datetime.date.today().strftime("%Y_%m_%d"), "configure")
</snippet></ROW><ROW><id>17988013</id><snippet>bld.logger = Logs.make_logger("build_%s.log" % datetime.date.today().strftime("%Y_%m_%d"), "build")
</snippet></ROW><ROW><id>17988013</id><snippet>['C:\\MinGW64\\bin\\g++.exe', '-Wl,--enable-auto-import', '-Wl,--enable-auto-import', 'test.cpp.1.o', '-o', 'C:\\Users\\Administrator\\Downloads\\libpst-0.6.60\\clean\\build\\temp\\conf_check_5fe204eaa3b3bcb7a9f85e15cebb726e\\testbuild\\testprog.exe', '-Wl,-Bstatic', '-Wl,-Bdynamic', '-LC:\\Users\\Administrator\\Downloads\\libpst-0.6.60\\clean\\libs', '-llibiconv2']

err: c:/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/4.7.2/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:\Users\Administrator\Downloads\libpst-0.6.60\clean\libs/libiconv2.dll when searching for -llibiconv2
</snippet></ROW><ROW><id>17988013</id><snippet>#! /usr/bin/env python

VERSION = "0.1"
APPNAME = "readpst"

top = "." # The topmost directory of the waf project
out = "build/temp" # The build directory of the waf project

import os
import datetime
from waflib import Build
from waflib import ConfigSet
from waflib import Logs

# Variant memory variables
var_path = out + "/variant.txt" # The variant memory file path
default_variant = "debug" # The default if no variant is stored
stored_variant = ""

def options(opt):
    '''
    A script hook function that defines addtional switch options for the build.
    '''
    opt.load("compiler_c compiler_cxx")

def configure(cfg):
    '''
    A script hook function that configures the build environment.
    '''
    cfg.logger = Logs.make_logger("configure_%s.log" % datetime.date.today().strftime("%Y_%m_%d"), "configure")
    cfg.load("compiler_c compiler_cxx")
    cfg.find_program("strip")
    cfg.env.DEFINES = \
    [
        "WAF=1",
        "HAVE_CONFIG_H=1"
    ]
    cfg.env.FEATURES = [] # Additional features
    cfg.env.append_value("LIBPATH", os.path.join(os.getcwd(), "libs"))
    cfg.env.append_value("INCLUDES", os.path.join(os.getcwd(), "inc"))
    cfg.env.append_value("INCLUDES", os.path.join(os.getcwd(), "inc", "glib-2.0"))
    cfg.env.append_value("INCLUDES", os.path.join(os.getcwd(), "inc", "glib-2.0", "glib"))
    cfg.env.append_value("INCLUDES", os.path.join(os.getcwd(), "libs", "regex", "2.7", "regex-2.7-src", "src"))
    cfg.env.append_value("INCLUDES", os.path.join(os.getcwd(), "libs", "libiconv", "1.9.2", "libiconv-1.9.2-src", "include"))

    cfg.define("VERSION", VERSION)

    base_env = cfg.env

    # Compiler checks
    cfg.check_large_file(mandatory = False)
    cfg.check_inline()

    cfg.multicheck\
    (
        {"header_name" : "fcntl.h"},
        {"header_name" : "iostream"},
        {"header_name" : "list"},
        {"header_name" : "set"},
        {"header_name" : "string"},
        {"header_name" : "vector"},
        msg = "Checking for standard headers",
        mandatory = True
    )

    cfg.check(header_name = "glib.h", mandatory = False)
    cfg.multicheck\
    (
        {"header_name" : "gsf\\gsf-infile-stdio.h"},
        {"header_name" : "gsf\\gsf-infile.h"},
        {"header_name" : "gsf\\gsf-input-stdio.h"},
        {"header_name" : "gsf\\gsf-outfile-msole.h"},
        {"header_name" : "gsf\\gsf-outfile.h"},
        {"header_name" : "gsf\\gsf-output-stdio.h"},
        {"header_name" : "gsf\\gsf-utils.h"},
        msg = "Checking for gsf headers",
        mandatory = False
    )

    # Checking for headers expected in config.h
    cfg.check(header_name = "ctype.h",     define_name = "HAVE_CTYPE_H"    , mandatory = False)
    cfg.check(header_name = "dirent.h",    define_name = "HAVE_DIRENT_H"   , mandatory = False)
    cfg.check(header_name = "errno.h",     define_name = "HAVE_ERRNO_H"    , mandatory = False)
    cfg.check(header_name = "gd.h",        define_name = "HAVE_GD_H"       , mandatory = False)
    cfg.check(header_name = "iconv.h",     define_name = "HAVE_ICON"       , mandatory = False)
    cfg.check(header_name = "limits.h",    define_name = "HAVE_LIMITS_H"   , mandatory = False)
    cfg.check(header_name = "regex.h",     define_name = "HAVE_REGEX_H"    , mandatory = False)
    #cfg.check(header_name = "semaphore.h", define_name = "HAVE_SEMAPHORE_H", mandatory = False)
    cfg.check(header_name = "signal.h",    define_name = "HAVE_SIGNAL_H"   , mandatory = False)
    cfg.check(header_name = "string.h",    define_name = "HAVE_STRING_H"   , mandatory = False)
    cfg.check(header_name = "sys/shm.h",   define_name = "HAVE_SYS_SHM_H"  , mandatory = False)
    cfg.check(header_name = "sys/stat.h",  define_name = "HAVE_SYS_STAT_H" , mandatory = False)
    cfg.check(header_name = "sys/types.h", define_name = "HAVE_SYS_TYPES_H", mandatory = False)
    cfg.check(header_name = "sys/wait.h",  define_name = "HAVE_SYS_WAIT_H" , mandatory = False)
    cfg.check(header_name = "wchar.h",     define_name = "HAVE_WCHAR_H"    , mandatory = False)

    cfg.check(header_name = "define.h", mandatory = False)
    cfg.check(header_name = "lzfu.h", mandatory = False)
    cfg.check(header_name = "msg.h", mandatory = False)

    # Check for the existance and function of specific headers
    cfg.check_cxx(lib = "libiconv2", uselib_store = "LIBICONV2", mandatory = False)

    # Define the debug build environment
    cfg.setenv("debug", env = base_env.derive())
    cfg.env.append_value("CFLAGS", "-g")
    cfg.define("DEBUG", 1)
    cfg.write_config_header("/debug/inc/config.h")

    # Define the release build environment
    cfg.setenv("release", env = base_env.derive())
    cfg.env.append_value("CFLAGS", "-02")
    cfg.env.FEATURES = ["strip"]
    cfg.define("RELEASE", 1)
    cfg.write_config_header("/release/inc/config.h")

def pre(ctx):
    '''
    A callback for before build task start.
    '''
        print "Starting %sbuild" % (("%s " % ctx.variant) if(ctx.variant) else "")
        if ctx.cmd == "install":
        print "Installing"

def post(ctx):
    '''
    A callback for after build task finish.
    '''
    global var_path
        print "Finished %sbuild" % (("%s " % ctx.variant) if(ctx.variant) else "")
    env = ConfigSet.ConfigSet()
    env.stored_variant = ctx.variant
    env.store(var_path)

def build(bld):
    '''
    A script hook function that specifies the build behaviour.
    '''
    if bld.cmd != "clean":
        bld.logger = Logs.make_logger("build_%s.log" % datetime.date.today().strftime("%Y_%m_%d"), "build")
    bld.add_pre_fun(pre)
    bld.add_post_fun(post)

    bld.recurse\
    (
        [
            "src"
        ]
    )

def dist(ctx):
    '''
    A script hook function that specifies the packaging behaviour.
    '''
    ctx.base_name = "_".join([APPNAME, VERSION])
    ctx.algo = "zip"
    file_ex_patterns = \
    [
        out + "/**",
        "**/.waf-1*",
        "**/*~",
        "**/*.pyc",
        "**/*.swp",
        "**/.lock-w*"
    ]
    file_in_patterns = \
    [
        "**/wscript*",
        "**/*.h",
        "**/*.c",
        "**/*.cpp",
        "**/*.txt",
    ]
    ctx.files = ctx.path.ant_glob(incl = file_in_patterns, excl = file_ex_patterns)

def set_variant():
    '''
    A function that facilitates dynamic changing of the Context classes variant member.
    It retrieves the stored variant, if existant, otherwise the default.
    '''
    global default_variant
    global stored_variant
    global var_path
    env = ConfigSet.ConfigSet()
    try:
        env.load(var_path)
    except:
        stored_variant = default_variant
    else:
        if(env.stored_variant):
            stored_variant = env.stored_variant
            print "Resuming %s variant" % stored_variant
        else:
            stored_variant = default_variant

def get_variant():
    '''
    A function that facilitates dynamic changing of the Context classes variant member.
    It sets the variant, if undefined, and returns.
    '''
    global stored_variant
    if(not stored_variant):
        set_variant()
    return stored_variant

class release(Build.BuildContext):
    '''
    A class that provides the release build.
    '''
    cmd = "release"
    variant = "release" 

class debug(Build.BuildContext):
    '''
    A class that provides the debug build.
    '''
    cmd = "debug"
    variant = "debug"

class default_build(Build.BuildContext):
    '''
    A class that provides the default variant build.
    This is set to debug.
    '''
    variant = "debug"

class default_clean(Build.CleanContext):
    '''
    A class that provides the stored variant build clean.
    '''
    @property
    def variant(self):
        return get_variant()

class default_install(Build.InstallContext):
    '''
    A class that provides the stored variant build install.
    '''
    @property
    def variant(self):
        return get_variant()

class default_uninstall(Build.UninstallContext):
    '''
    A class that provides the stored variant build uninstall.
    '''
    @property
    def variant(self):
        return get_variant()

# Addtional features
from waflib import Task, TaskGen
class strip(Task.Task):
    run_str = "${STRIP} ${SRC}"
    color   = "BLUE"

@TaskGen.feature("strip")
@TaskGen.after("apply_link")
def add_strip_task(self):
    try:
        link_task = self.link_task
    except:
        return
    tsk = self.create_task("strip", self.link_task.outputs[0])
</snippet></ROW><ROW><id>17988074</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>17988074</id><snippet>=</snippet></ROW><ROW><id>17988074</id><snippet>==</snippet></ROW><ROW><id>17988074</id><snippet>z</snippet></ROW><ROW><id>17988074</id><snippet>z</snippet></ROW><ROW><id>17988074</id><snippet>join</snippet></ROW><ROW><id>17988074</id><snippet>string</snippet></ROW><ROW><id>17988074</id><snippet>z</snippet></ROW><ROW><id>17988074</id><snippet>range(y - 1)</snippet></ROW><ROW><id>17988074</id><snippet>y - 2</snippet></ROW><ROW><id>17988074</id><snippet>y - 1</snippet></ROW><ROW><id>17988074</id><snippet>range(y)</snippet></ROW><ROW><id>17988074</id><snippet>def reverse(x):
    y = len(x)
    z = list(x) # Using the characters of x will give it the correct length
    for i in range(y):
        z[i] = x[y - 1 - i]
    return "".join(z)
</snippet></ROW><ROW><id>17988157</id><snippet>glob</snippet></ROW><ROW><id>17988157</id><snippet>import glob
import os
txtpattern = os.path.join("c:\\files\\", "*.txt")
files = glob.glob(txtpattern)
for f in file:
     print "Filename : %s" % f
     # Do what you want with the file
</snippet></ROW><ROW><id>17988396</id><snippet>import os
print(os.getcwd())
</snippet></ROW><ROW><id>17988422</id><snippet>import os

def include(filename):
if os.path.exists(filename): 
    execfile(filename)


include('myfile.py')
</snippet></ROW><ROW><id>17988494</id><snippet>api/
  - __init__.py
  - etc...
plugins/
  - plugin.py
  - etc...
- MainScript.py
- PyExeCreator.py
</snippet></ROW><ROW><id>17988494</id><snippet>import os,sys, api

RootDir=os.getcwd() 
#Add this directory to export
if RootDir not in sys.path:
    sys.path.append(RootDir)

#Plugin stuff
def LoadPlugins():
    PluginsDir=os.path.join(RootDir,'plugins')
    Plugins=os.listdir(PluginsDir)

    Modules=[]
    for P in Plugins:
        PItems=os.path.splitext(P)
        PName=PItems[0]
        if PName!='__init__' and PItems[len(PItems)-1]=='.py':
            print "Loading plugins."+PName
            Mod=__import__("plugins."+PName,fromlist=['*'])
            Modules.append(Mod)
    return Modules
def RunPlugins(Modules):
    for Plugin in Modules:
        Plugin.Run()

Plugins=LoadPlugins()

#Just checking plugins can modify variables.
api.Run()
RunPlugins(Plugins)
api.Run()
</snippet></ROW><ROW><id>17988494</id><snippet>MOTD="HI"
def Run():
    global MOTD
    print "API MOTD: "+MOTD
</snippet></ROW><ROW><id>17988494</id><snippet>import api
def Run():
    api.MOTD="HELLO WORLD!"
    print "This is a plugin running!"
</snippet></ROW><ROW><id>17988494</id><snippet>from distutils.core import setup
import py2exe

setup(
    name='Tester',
    console=['Loader.py'],
    packages=['api']
)
</snippet></ROW><ROW><id>17988494</id><snippet>packages</snippet></ROW><ROW><id>17988494</id><snippet>distutils</snippet></ROW><ROW><id>17988494</id><snippet>sys.path.append(os.getcwd())</snippet></ROW><ROW><id>17988970</id><snippet>profile = webdriver.FirefoxProfile()
profile.set_preference("network.proxy.type", 1)
profile.set_preference("network.proxy.http", "proxy.server.address")
profile.set_preference("network.proxy.http_port", "port_number")
profile.update_preferences()
driver = webdriver.Firefox(firefox_profile=profile)
</snippet></ROW><ROW><id>17989200</id><snippet> d = {}
 for datetime, device, product, user in table:
     date = datetime[:10]
     if (date, product, user) not in d:
         d[(date, product, user)] = [datetime, device, product, user]
</snippet></ROW><ROW><id>17989334</id><snippet>list.__init__([])</snippet></ROW><ROW><id>17989334</id><snippet>        list.__init__(self, [])
</snippet></ROW><ROW><id>17989334</id><snippet>self</snippet></ROW><ROW><id>17989334</id><snippet>super</snippet></ROW><ROW><id>17989334</id><snippet>self</snippet></ROW><ROW><id>17989334</id><snippet>        super(Set, self).__init__([])
</snippet></ROW><ROW><id>17989334</id><snippet>[]</snippet></ROW><ROW><id>17989334</id><snippet>self</snippet></ROW><ROW><id>17989334</id><snippet>[]</snippet></ROW><ROW><id>17989334</id><snippet>list.__init__([])</snippet></ROW><ROW><id>17989334</id><snippet>Set</snippet></ROW><ROW><id>17989334</id><snippet>self</snippet></ROW><ROW><id>17989334</id><snippet>Set</snippet></ROW><ROW><id>17989510</id><snippet>In [11]: df = pd.DataFrame([['@a @b'], ['@a'], ['@c']], columns=['tweets'])

In [12]: df
Out[12]:
  tweets
0  @a @b
1     @a
2     @c

In [13]: at_mentions = df['tweets'].str.findall('@[a-zA-Z0-9_]+')
</snippet></ROW><ROW><id>17989510</id><snippet>+</snippet></ROW><ROW><id>17989510</id><snippet>*</snippet></ROW><ROW><id>17989510</id><snippet>@</snippet></ROW><ROW><id>17989510</id><snippet>In [14]: at_mentions
Out[14]:
0    [@a, @b]
1        [@a]
2        [@c]
Name: tweets, dtype: object
</snippet></ROW><ROW><id>17989510</id><snippet>In [21]: from collections import Counter

In [22]: Counter(at_mentions.sum())
Out[22]: Counter({'@a': 2, '@b': 1, '@c': 1})
</snippet></ROW><ROW><id>17989510</id><snippet>Apply</snippet></ROW><ROW><id>17989510</id><snippet>stack</snippet></ROW><ROW><id>17989510</id><snippet>In [31]: all_mentions = at_mentions.apply(pd.Series)

In [32]: all_mentions
Out[33]:
    0    1
0  @a   @b
1  @a  NaN
2  @c  NaN
</snippet></ROW><ROW><id>17989510</id><snippet>In [33]: all_mentions.columns.name = 'at_number'

In [34]: all_mentions.index.name = 'tweet'  # this is timestamp in your example
</snippet></ROW><ROW><id>17989510</id><snippet>In [35]: all_mentions = all_mentions.stack()

In [36]: all_mentions
Out[36]:
tweet  at_number
1      0            @a
       1            @b
2      0            @a
3      0            @c
dtype: object
</snippet></ROW><ROW><id>17989510</id><snippet>value_counts</snippet></ROW><ROW><id>17989510</id><snippet>In [37]: all_mentions.value_counts()
Out[37]:
@a    2
@c    1
@b    1
dtype: int64
</snippet></ROW><ROW><id>17989510</id><snippet>pd.Series(Counter(at_mentions.sum()))</snippet></ROW><ROW><id>17989541</id><snippet>out</snippet></ROW><ROW><id>17989541</id><snippet>nodes</snippet></ROW><ROW><id>17989541</id><snippet>0.0</snippet></ROW><ROW><id>17989541</id><snippet>nodes[-1]</snippet></ROW><ROW><id>17989541</id><snippet>0.0</snippet></ROW><ROW><id>17989541</id><snippet>out</snippet></ROW><ROW><id>17989541</id><snippet>0.0</snippet></ROW><ROW><id>17989541</id><snippet>out = nodes[-1].copy()  # This is the list/tuple with the (non-reset) values that you want to return
...  # iterate through the array here and reset
return out
</snippet></ROW><ROW><id>17989541</id><snippet>nodes</snippet></ROW><ROW><id>17989541</id><snippet>print(l0)  # prints [0, 1, 2]
print(l1)  # prints [0, 1, 2]
print(l2)  # prints [0, 1]
</snippet></ROW><ROW><id>17989541</id><snippet>l0</snippet></ROW><ROW><id>17989541</id><snippet>l1</snippet></ROW><ROW><id>17989541</id><snippet>copy()</snippet></ROW><ROW><id>17989541</id><snippet>l2</snippet></ROW><ROW><id>17989541</id><snippet>copy.copy()</snippet></ROW><ROW><id>17989541</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>17989541</id><snippet>list(list_to_copy)</snippet></ROW><ROW><id>17990036</id><snippet>from bs4 import BeautifulSoup

def getArticleText(webtext):
soup = BeautifulSoup(webtext)
divTag = soup.find_all("div", {"class":"dr_article"})
for tag in divTag:
    for element in tag.find_all("p"):
        pData = element.text
        print pData
</snippet></ROW><ROW><id>17990036</id><snippet>tag.find_all("p")[0].text
tag.find_all("p")[1].text
tag.find_all("p")[..].text
tag.find_all("p")[N - 1].text
tag.find_all("p")[N].text
</snippet></ROW><ROW><id>17990128</id><snippet>k</snippet></ROW><ROW><id>17990128</id><snippet>F =  [lambda x, k=k:k+x for k in filter(lambda x: 10 % x == 0, range(1, 10))]
</snippet></ROW><ROW><id>17990397</id><snippet>&gt;&gt;&gt; 802816 / 784
1024 
</snippet></ROW><ROW><id>17990397</id><snippet>man ps</snippet></ROW><ROW><id>17990397</id><snippet>rss         RSS       resident set size, the non-swapped physical 
           memory that a task has used (in kiloBytes).  (alias rssize, rsz).
</snippet></ROW><ROW><id>17990585</id><snippet>import signal

a = 1
b = 2

def handler(sig, trace):
    print a, b

def main():
    global a, b
    signal.signal(signal.SIGINT, handler)
    while True:
        a, b = 3, 4
        a, b = 1, 2

if __name__ == '__main__':
    main()

$ python atom.py
^C3 4
^C3 4
^C1 2
^C1 2
^C3 4
^C1 2
^C1 2
^C1 2
^C1 2
^C1 4 &lt;&lt;&lt;&lt; inconsistent state
</snippet></ROW><ROW><id>17990585</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = 2
&gt;&gt;&gt; c = (1, 2)
&gt;&gt;&gt; def foo():
...     global a, b
...     a, b = 1, 2
... 
&gt;&gt;&gt; def bar():
...     global c
...     c = (1, 2)
... 
&gt;&gt;&gt; dis.dis(foo)
  3           0 LOAD_CONST               3 ((1, 2))
              3 UNPACK_SEQUENCE          2
              6 STORE_GLOBAL             0 (a)
              9 STORE_GLOBAL             1 (b)
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(bar)
  3           0 LOAD_CONST               3 ((1, 2))
              3 STORE_GLOBAL             0 (c)
              6 LOAD_CONST               0 (None)
              9 RETURN_VALUE        
</snippet></ROW><ROW><id>17990585</id><snippet>dict</snippet></ROW><ROW><id>17990617</id><snippet>&gt;&gt;&gt; for i, j in enumerate(L):
...     print L[i]
...     temp = map(str, L[j:])
...     while temp:
...             print ' ', ','.join(temp)
...             temp = temp[1:]
... 
1
  2,3,4,5,6,7,8
  3,4,5,6,7,8
  4,5,6,7,8
  5,6,7,8
  6,7,8
  7,8
  8
2
  3,4,5,6,7,8
  4,5,6,7,8
  5,6,7,8
  6,7,8
  7,8
  8
3
  4,5,6,7,8
  5,6,7,8
  6,7,8
  7,8
  8
...
</snippet></ROW><ROW><id>17990617</id><snippet>while temp</snippet></ROW><ROW><id>17990617</id><snippet>temp</snippet></ROW><ROW><id>17990617</id><snippet>map(str, L[j:])</snippet></ROW><ROW><id>17990617</id><snippet>str.join</snippet></ROW><ROW><id>17990617</id><snippet>with</snippet></ROW><ROW><id>17990617</id><snippet>with open(sys.argv[1], 'r') as fo:
    L = fo.readlines()
</snippet></ROW><ROW><id>17990860</id><snippet>3</snippet></ROW><ROW><id>17990860</id><snippet>.send()</snippet></ROW><ROW><id>17990860</id><snippet>for</snippet></ROW><ROW><id>17990860</id><snippet>next()</snippet></ROW><ROW><id>17990860</id><snippet>5</snippet></ROW><ROW><id>17990860</id><snippet>x == 5</snippet></ROW><ROW><id>17990860</id><snippet>True</snippet></ROW><ROW><id>17990860</id><snippet>c.send(3)</snippet></ROW><ROW><id>17990860</id><snippet>newvalue</snippet></ROW><ROW><id>17990860</id><snippet>3</snippet></ROW><ROW><id>17990860</id><snippet>while</snippet></ROW><ROW><id>17990860</id><snippet>(yield n)</snippet></ROW><ROW><id>17990860</id><snippet>3</snippet></ROW><ROW><id>17990860</id><snippet>c.send(3)</snippet></ROW><ROW><id>17990860</id><snippet>for</snippet></ROW><ROW><id>17990860</id><snippet>next()</snippet></ROW><ROW><id>17990860</id><snippet>yield</snippet></ROW><ROW><id>17990860</id><snippet>None</snippet></ROW><ROW><id>17990860</id><snippet>n -= 1</snippet></ROW><ROW><id>17990860</id><snippet>2</snippet></ROW><ROW><id>17990860</id><snippet>for</snippet></ROW><ROW><id>17990860</id><snippet>next()</snippet></ROW><ROW><id>17990860</id><snippet>1</snippet></ROW><ROW><id>17990860</id><snippet>0</snippet></ROW><ROW><id>17990860</id><snippet>generator.send()</snippet></ROW><ROW><id>17990860</id><snippet>value</snippet></ROW><ROW><id>17990860</id><snippet>yield</snippet></ROW><ROW><id>17990860</id><snippet>send()</snippet></ROW><ROW><id>17990860</id><snippet>StopIteration</snippet></ROW><ROW><id>17991089</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; words = ['You and i', 'everyone else', 'cat and dog', 'We u all']
&gt;&gt;&gt; res = [re.search(r'(.*?) (and|u) (.*?)$', word) for word in words]
&gt;&gt;&gt; for i in res:
...     if i is not None:
...             print i.group(1)
...             print i.group(3)
... 
You
i
cat
dog
We
all
</snippet></ROW><ROW><id>17991230</id><snippet>from HTMLParser import HTMLParser

parser = HTMLParser()

parser.feed('&lt;![..]&gt;')
</snippet></ROW><ROW><id>17991404</id><snippet>serial.Serial(..., bytesize=serial.SEVENBITS,
    parity=serial.PARITY_EVEN, stopbits=serial.STOPBITS_ONE)
</snippet></ROW><ROW><id>17991515</id><snippet>json</snippet></ROW><ROW><id>17991515</id><snippet>(action, dictionary)</snippet></ROW><ROW><id>17991515</id><snippet>json</snippet></ROW><ROW><id>17991515</id><snippet>data = []
data.append(('delete', delete1))
data.append(('delete', delete2))
data.append(('delete', delete3))

output = '{%s}' % ',\n'.join(['"{}": {}'.format(action, json.dumps(dictionary)) for action, dictionary in data])
</snippet></ROW><ROW><id>17991515</id><snippet>action</snippet></ROW><ROW><id>17991515</id><snippet>unicode_escape</snippet></ROW><ROW><id>17991515</id><snippet>"</snippet></ROW><ROW><id>17991515</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; delete1 = { "id":"ID" }
&gt;&gt;&gt; delete2 = { "query":"QUERY" }
&gt;&gt;&gt; delete3 = { "query":"QUERY", 'commitWithin':'500' }
&gt;&gt;&gt; data = []
&gt;&gt;&gt; data.append(('delete', delete1))
&gt;&gt;&gt; data.append(('delete', delete2))
&gt;&gt;&gt; data.append(('delete', delete3))
&gt;&gt;&gt; '{%s}' % ',\n'.join(['"{}": {}'.format(action, json.dumps(dictionary)) for action, dictionary in data])
'{"delete": {"id": "ID"},\n"delete": {"query": "QUERY"},\n"delete": {"query": "QUERY", "commitWithin": "500"}}'
&gt;&gt;&gt; print '{%s}' % ',\n'.join(['"{}": {}'.format(action, json.dumps(dictionary)) for action, dictionary in data])
{"delete": {"id": "ID"},
"delete": {"query": "QUERY"},
"delete": {"query": "QUERY", "commitWithin": "500"}}
</snippet></ROW><ROW><id>17991727</id><snippet>def returnList(arg=None):
    if arg is None: arg = ["abc"]
    ...
</snippet></ROW><ROW><id>17991727</id><snippet>None</snippet></ROW><ROW><id>17991727</id><snippet>arg</snippet></ROW><ROW><id>17991727</id><snippet>object</snippet></ROW><ROW><id>17991727</id><snippet>default = object()
def f(x = default):
    if x is default:
        ...
</snippet></ROW><ROW><id>17992645</id><snippet>count = 0
prime = []          # this is obviously meant to collect all primes
candidate = []      # what is this supposed to do then though?
x = 2
y = 1               # never used
while count &lt; 1000: # you start at `count = 0` but never increase the count
                    # later on, so would loop forever
    x = x+1
    if x &gt; 1: # x is always bigger than 1 because you started at 2
              # and only increase it; also, you skipped 2 itself
        if x%2 != 0:                      # here, all you do is check if the
            if x%3 != 0:                  # number is dividable by any prime you
                if x%5 != 0:              # know of
                    if x%7 != 0:          # you can easily make this check work
                        if x%11 != 0:     # for any set (or list) of primes
                            if x%13 != 0: #
                                candidate.append(x) # why a candidate? If it’s
                                                    # not dividable by all primes
                                                    # it’s a prime itself
</snippet></ROW><ROW><id>17992645</id><snippet>primes = [2] # we're going to start with 2 directly
count = 1    # and we have already one; `2`
x = 2
while count &lt; 1000:
    x += 1
    isPrime = True          # assume it’s a prime
    for p in primes:        # check for every prime
        if x % p == 0:      # if it’s a divisor of the number
            isPrime = False # then x is definitely not a prime
            break           # so we can stop this loop directly

    if isPrime:             # if it’s still a prime after looping
        primes.append(x)    # then it’s a prime too, so store it
        count += 1          # and don’t forget to increase the count
</snippet></ROW><ROW><id>17992645</id><snippet>for x in something</snippet></ROW><ROW><id>17992645</id><snippet>something</snippet></ROW><ROW><id>17992645</id><snippet>x</snippet></ROW><ROW><id>17992645</id><snippet>1</snippet></ROW><ROW><id>17992645</id><snippet>2</snippet></ROW><ROW><id>17992645</id><snippet>3</snippet></ROW><ROW><id>17992645</id><snippet>for i in [1, 2, 3]:
    print(i)
</snippet></ROW><ROW><id>17992645</id><snippet>for p in primes</snippet></ROW><ROW><id>17992645</id><snippet>p</snippet></ROW><ROW><id>17992864</id><snippet>#settings.py
TEMPLATE_CONTEXT_PROCESSORS = (
    ...,
    'django.core.context_processors.csrf',)
</snippet></ROW><ROW><id>17992864</id><snippet>from django.views.decorators.csrf import csrf_protect
from django.template import RequestContext

@csrf_protect
def showWeekEnd(request):
    c = RequestContext(request)
    return render_to_response('EN/current_datetime.html', c)
</snippet></ROW><ROW><id>17992898</id><snippet>pip install --user praw</snippet></ROW><ROW><id>17993013</id><snippet>.zip</snippet></ROW><ROW><id>17993013</id><snippet>HKEY_CLASSES_ROOT</snippet></ROW><ROW><id>17993013</id><snippet>CompressedFolder</snippet></ROW><ROW><id>17993013</id><snippet>CompressedFolder\shell</snippet></ROW><ROW><id>17993013</id><snippet>HKEY_CLASSES_ROOT</snippet></ROW><ROW><id>17993013</id><snippet>MyCommand</snippet></ROW><ROW><id>17993013</id><snippet>command</snippet></ROW><ROW><id>17993013</id><snippet>MyCommand</snippet></ROW><ROW><id>17993013</id><snippet>(Deafult)</snippet></ROW><ROW><id>17993013</id><snippet>command</snippet></ROW><ROW><id>17993013</id><snippet>mycommand</snippet></ROW><ROW><id>17993013</id><snippet>import os
import sys

def main():
    st = os.stat(sys.argv[1])
    print st
    raw_input()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17993013</id><snippet>python C:\\info.py %1</snippet></ROW><ROW><id>17993013</id><snippet>shell</snippet></ROW><ROW><id>17993013</id><snippet>MyCommand</snippet></ROW><ROW><id>17993013</id><snippet>CompressedFolder\shell</snippet></ROW><ROW><id>17993013</id><snippet>CascadeMenu</snippet></ROW><ROW><id>17993013</id><snippet>MUIVerb</snippet></ROW><ROW><id>17993013</id><snippet>MyCascadeMenu</snippet></ROW><ROW><id>17993013</id><snippet>SubCommands</snippet></ROW><ROW><id>17993013</id><snippet>python.info</snippet></ROW><ROW><id>17993013</id><snippet>command1;|;command2</snippet></ROW><ROW><id>17993013</id><snippet>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\Shell</snippet></ROW><ROW><id>17993013</id><snippet>python.info</snippet></ROW><ROW><id>17993013</id><snippet>"File Info"</snippet></ROW><ROW><id>17993013</id><snippet>command</snippet></ROW><ROW><id>17993013</id><snippet>python C:\\info.py %1</snippet></ROW><ROW><id>17993064</id><snippet>&gt;&gt;&gt; [x for tup in zip(a, b) for x in tup]
[1, 5, 2, 6, 3, 7, 4, 8]
</snippet></ROW><ROW><id>17993064</id><snippet>result = []
for tup in zip(a, b):
    for x in tup:
        result.append(x)
</snippet></ROW><ROW><id>17993274</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; response = requests.get('http://google.com/test')
&gt;&gt;&gt; response.status_code
404
&gt;&gt;&gt; if response.status_code == 404:
...     print "/test/ does not exist on the website: google.com"
... 
/test/ does not exist on the website: google.com
</snippet></ROW><ROW><id>17994243</id><snippet>import os
sys.path.append('relative/path/to/settings/file')
from django.conf import settings 
os.environ['DJANGO_SETTINGS_MODULE'] = "settings"
</snippet></ROW><ROW><id>17994416</id><snippet>metaMethod</snippet></ROW><ROW><id>17994416</id><snippet>import types

methods = ['foo', 'bar']

def metaMethod(self, m):
    def f(self):
        print "method", m
    return f

class Egg:
    def __init__(self):
        for m in methods:
            self.__dict__[m] = types.MethodType(metaMethod(self, m), self)

e = Egg()
e.foo()
e.bar()
</snippet></ROW><ROW><id>17994416</id><snippet>method foo
method bar
</snippet></ROW><ROW><id>17994810</id><snippet>wsgi</snippet></ROW><ROW><id>17994968</id><snippet>cv2.getPerspectiveTransform(src, dst)
</snippet></ROW><ROW><id>17995116</id><snippet>colorbar()</snippet></ROW><ROW><id>17995116</id><snippet>vmin</snippet></ROW><ROW><id>17995116</id><snippet>vmax</snippet></ROW><ROW><id>17995116</id><snippet>imshow()</snippet></ROW><ROW><id>17995116</id><snippet>import pylab as plt
import numpy as np
my_image1 = np.linspace(0, 10, 10000).reshape(100,100)
my_image2 = np.sqrt(my_image1.T) + 3
subplot(1, 2, 1)
plt.imshow(my_image1, vmin=0, vmax=10, cmap='jet', aspect='auto')
plt.subplot(1, 2, 2)
plt.imshow(my_image2, vmin=0, vmax=10, cmap='jet', aspect='auto')
plt.colorbar()
</snippet></ROW><ROW><id>17995257</id><snippet>import os
import glob
import random
import sys
import time
import urllib

import praw

def backGroundChanger(sub):

    USER_AGENT = 'wall paper changer for linux/windows by /u/**********' #specifies what my bot does and by who

    REDDIT_ID = #reddit id
    REDDIT_PASS = #reddit password

    reddit = praw.Reddit(USER_AGENT) #creates bot
    reddit.login(REDDIT_ID, REDDIT_PASS) #logsin
    print reddit.is_logged_in()
    images = reddit.get_subreddit(sub)

    while True:
    count = 0
    for sub in images.get_hot(limit = 10):
        imageLink = sub.url
        print imageLink
        n = str(count)
        urllib.urlretrieve(imageLink, "i" + n )

        count += 1

    files = glob.glob("*.jpg") + glob.glob("*.png")

    changeBackGround(files)


def changeBackGround(ifiles):
    #Do back ground changing stuff here
    the_file = ifiles[random.randint(0, len(ifiles) - 1)]
    if(sys.platform.startswith("win")): # Windows
        # Do this yourself
        pass
    elif(sys.platform.startswith("linux")): # Linux
        os.system("xsetbg -center %s" % the_file)

def main():
    subreddit = input("What subreddit would you like me to pull images from? ") 
    print "You chose " + subreddit
    backGroundChanger(subreddit)

main()
</snippet></ROW><ROW><id>17995341</id><snippet>ids, other = zip(*((id, other) for id, other in zip(ids, other) if id not in del_ids))
</snippet></ROW><ROW><id>17995341</id><snippet>zip()</snippet></ROW><ROW><id>17995341</id><snippet>id</snippet></ROW><ROW><id>17995341</id><snippet>other</snippet></ROW><ROW><id>17995341</id><snippet>id</snippet></ROW><ROW><id>17995341</id><snippet>del_ids</snippet></ROW><ROW><id>17995341</id><snippet>zip(*..)</snippet></ROW><ROW><id>17995341</id><snippet>&gt;&gt;&gt; del_ids = [2, 4]
&gt;&gt;&gt; ids = [3, 2, 4, 1]
&gt;&gt;&gt; other = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; zip(*((id, other) for id, other in zip(ids, other) if id not in del_ids))
[(3, 1), ('a', 'd')]
</snippet></ROW><ROW><id>17995369</id><snippet>while True:
    files = dict ([(f, None) for f in os.listdir(path_to_watch)])
    if len(files) &gt; 0:
        print "You have %s new file/s!" % len(files)
    time.sleep(20)
</snippet></ROW><ROW><id>17995369</id><snippet>import gamin
import time
mydir = /path/to/watch
def callback(path, event):
    global mydir
    try:
        if event == gamin.GAMCreated:
            print "New file detected: %s" % (path)
            fullname = mydir + "/" + path
            print "Goint to read",fullname
            data = open(fullname).read()
            print "Going to upload",fullname
            rez = upload_file(data,path)
            print "Response from uploading was",rez
    except Exception,e: #Not good practice
        print e
        import pdb
        pdb.set_trace()


mon = gamin.WatchMonitor()
mon.watch_directory(mydir, callback)
time.sleep(1)
while True:
    ret = mon.handle_one_event()
mon.stop_watch(mydir)
del mon
</snippet></ROW><ROW><id>17995774</id><snippet>WWW_DOCUMENT_ROOT</snippet></ROW><ROW><id>17995774</id><snippet>global</snippet></ROW><ROW><id>17995774</id><snippet>WWW_DOCUMENT_ROOT</snippet></ROW><ROW><id>17995774</id><snippet>def write_config(project_abs_path):
    global WWW_DOCUMENT_ROOT 
    print WWW_DOCUMENT_ROOT

    WWW_DOCUMENT_ROOT = 'A'
</snippet></ROW><ROW><id>17996099</id><snippet>plt.plot(range(5))
plt.xlim(-3, 3)
plt.ylim(-3, 3)
plt.gca().set_aspect('equal', adjustable='box')
plt.draw()
</snippet></ROW><ROW><id>17996180</id><snippet>idx = next(i for (i, (a, b)) in enumerate(zip(w1, w2)) if a != b)
</snippet></ROW><ROW><id>17996180</id><snippet>from operator import eq
idx = map(eq, w1, w2).index(False)
</snippet></ROW><ROW><id>17996215</id><snippet>print(this_file[:10]) 
</snippet></ROW><ROW><id>17996215</id><snippet>DataFrame</snippet></ROW><ROW><id>17996215</id><snippet>race['race_date'][0] # take element 0 of race_date column
</snippet></ROW><ROW><id>17996595</id><snippet>if xo.st in sts:
    print sts.index(xo.st)
</snippet></ROW><ROW><id>17996595</id><snippet>xo.st</snippet></ROW><ROW><id>17996595</id><snippet>sts</snippet></ROW><ROW><id>17997034</id><snippet>import pyfits
import numpy as np

hdulist = pyfits.open(filename)  
header = hdulist[0].header  
data = hdulist[0].data   
data = np.nan_to_num(data)   
new_data = data[0]

for i in range(1,84):                #this depends on number of layers or pages
    new_data += data[i]

hdu = pyfits.PrimaryHDU(new_data)
hdu.writeto(new_filename)
</snippet></ROW><ROW><id>17997325</id><snippet>try:
    value = self.__var
except AttributeError:
    # do something else
</snippet></ROW><ROW><id>17997325</id><snippet>class EC():
    __var = object():
    ...
    if self.__var is not EC.__var:
        ...
</snippet></ROW><ROW><id>17997506</id><snippet>obj.subscriptionInfo.save()
</snippet></ROW><ROW><id>17997506</id><snippet>def save_model(self, request, obj, form, change):
    #SUCCESS ACTIONS
    obj.subscriptionInfo.paid = 1
    obj.subscriptionInfo.save()
    obj.save()
</snippet></ROW><ROW><id>17997791</id><snippet>def extract_data_one():
    for item in sites:
        os.chdir(r"\\svr-dc\ftp site\%s\Daily" % item)
        subprocess.call(['7z', 'e', 'data1.zip', '*.*'])
</snippet></ROW><ROW><id>17997913</id><snippet>set()</snippet></ROW><ROW><id>17997913</id><snippet>def f(values, x):
    seen = set()
    add = seen.add
    return [res for res in (i % x for i in values) if res not in seen and not add(res)]
</snippet></ROW><ROW><id>17997913</id><snippet>&gt;&gt;&gt; f([1,2,6,15,19], 4)
[1, 2, 3]
</snippet></ROW><ROW><id>17997913</id><snippet>def f(values, x):
    return {i % x for i in values}
</snippet></ROW><ROW><id>17997978</id><snippet>E.g.                                                                                                                                              


# made for python 2.7 but should be able to work in python 3
import random
import numpy as np
from time import time


def given_seq():
#general example
    start = time()
    a = {"one":1,"two":2,"three":3}
    keys = a.keys()
    random.shuffle(keys)
    a = dict(zip(keys, a.values()))

#Large example

a = dict(zip(range(0,100000), range(1,100001)))

def random_shuffle():
    keys = a.keys()
    random.shuffle(keys)
    b = dict(zip(keys, a.values()))

def np_random_shuffle():
    keys = a.keys()
    np.random.shuffle(keys)
    b = dict(zip(keys, a.values()))

def np_random_permutation():
    #more concise and using numpy's permutation option
    b = dict(zip(np.random.permutation(a.keys()), a.values()))

#if you precompute the array key as a numpy array

def np_random_keys_choice():
    akeys = np.array(a.keys())
    return dict(zip(akeys[np.random.permutation(len(akeys))],a.values()))

def np_random_keys_shuffle():
    key_indexes = np.arange(len(a.keys()))
    np.random.shuffle(key_indexes)
    return dict(zip(np.array(a.keys())[key_indexes],a.values()))

#fixed dictionary size
key_indexes = np.arange(len(a.keys()))
def np_random_fixed_keys_shuffle():
    np.random.shuffle(key_indexes)
    return dict(zip(np.array(a.keys())[key_indexes],a.values()))


#so dstack actually slows things down
def np_random_shuffle_dstack():
    keys = a.keys()
    np.random.shuffle(keys)
    return dict(np.dstack((keys, a.values()))[0])

if __name__=='__main__':
    import timeit
    # i can use global namespace level introspection to automate the below line but it's not needed yet
    for func in ['given_seq', 'random_shuffle', 'np_random_shuffle', 'np_random_permutation', 'np_random_keys_choice',
            'np_random_keys_shuffle', 'np_random_fixed_keys_shuffle']:
        print func, timeit.timeit("{}()".format(func), setup = "from __main__ import {}".format(''.join(func)), number = 200)
</snippet></ROW><ROW><id>17997978</id><snippet>given_seq 0.00103783607483
random_shuffle 23.869166851
np_random_shuffle 16.3060112
np_random_permutation 21.9921720028
np_random_keys_choice 21.8105020523
np_random_keys_shuffle 22.4905178547
np_random_fixed_keys_shuffle 21.8256559372
</snippet></ROW><ROW><id>17997978</id><snippet>import this</snippet></ROW><ROW><id>17997996</id><snippet>import testApp
import wx

########################################################################
class ReloaderPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)
        self.testFrame = None

        showAppBtn = wx.Button(self, label="Show App")
        showAppBtn.Bind(wx.EVT_BUTTON, self.onShowApp)

        reloadBtn = wx.Button(self, label="Reload")
        reloadBtn.Bind(wx.EVT_BUTTON, self.onReload)

        mainSizer = wx.BoxSizer(wx.VERTICAL)
        mainSizer.Add(showAppBtn, 0, wx.ALL|wx.CENTER, 5)
        mainSizer.Add(reloadBtn, 0, wx.ALL|wx.CENTER, 5)
        self.SetSizer(mainSizer)

    #----------------------------------------------------------------------
    def onReload(self, event):
        """
        Reload the code!
        """
        if self.testFrame:
            self.testFrame.Close()
            reload(testApp)
            self.showApp()
        else:
            self.testFrame = None

    #----------------------------------------------------------------------
    def onShowApp(self, event):
        """
        Show the app
        """
        self.showApp()

    #----------------------------------------------------------------------
    def showApp(self):
        """
        """
        self.testFrame = testApp.TestFrame()

########################################################################
class ReloaderFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Reloader")
        panel = ReloaderPanel(self)
        self.Show()

if __name__ == "__main__":
    app = wx.App(False)
    frame = ReloaderFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>17997996</id><snippet>import wx

########################################################################
class TestPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)

########################################################################
class TestFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Test program")
        panel = TestPanel(self)
        self.Show()

if __name__ == "__main__":
    app = wx.App(False)
    frame = TestFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>17998333</id><snippet>ret = ctypes.windll.kernel32.GetConsoleScreenBufferInfo(
    ctypes.c_ulong(hstd), 
    ctypes.byref(csbi)
)
</snippet></ROW><ROW><id>17998333</id><snippet>restype</snippet></ROW><ROW><id>17998333</id><snippet>GetStdHandle</snippet></ROW><ROW><id>17998333</id><snippet>ctypes.windll.kernel32.GetStdHandle.restype = ctypes.wintypes.HANDLE
hstd = ctypes.windll.kernel32.GetStdHandle(-11) # STD_OUTPUT_HANDLE = -11
csbi = CONSOLE_SCREEN_BUFFER_INFO()
ret = ctypes.windll.kernel32.GetConsoleScreenBufferInfo(
    hstd, 
    ctypes.byref(csbi)
)
</snippet></ROW><ROW><id>17998343</id><snippet> // read a file into buffer - sgetn() example
 #include &lt;iostream&gt;     // std::cout, std::streambuf, std::streamsize
 #include &lt;fstream&gt;      // std::ifstream

 int main () {
   char* contents;
   std::ifstream istr ("test.txt");

   if (istr) {
     std::streambuf * pbuf = istr.rdbuf();
     std::streamsize size = pbuf-&gt;pubseekoff(0,istr.end);
     pbuf-&gt;pubseekoff(0,istr.beg);       // rewind
     contents = new char [size];
     pbuf-&gt;sgetn (contents,size);
     istr.close();
     std::cout.write (contents,size);
   }
   return 0;
 }
</snippet></ROW><ROW><id>17998545</id><snippet>'\W'</snippet></ROW><ROW><id>17998545</id><snippet>'\s+'</snippet></ROW><ROW><id>17998545</id><snippet>read_csv</snippet></ROW><ROW><id>17998545</id><snippet>delim_whitespace</snippet></ROW><ROW><id>17998545</id><snippet>'\s+'</snippet></ROW><ROW><id>17998623</id><snippet>tableName.__table__.drop(self._engine)
</snippet></ROW><ROW><id>17998789</id><snippet>def insertRandomRows(engine, table, count):
    rows = []
    for i in range(count):
        rows.append(table(randstr(), randstr(), randstr()))
    session = sessionmaker(bind = engine)()
    session.add_all(rows)
    session.commit()
    session.close()
</snippet></ROW><ROW><id>17998835</id><snippet>**</snippet></ROW><ROW><id>17998835</id><snippet>kwargs</snippet></ROW><ROW><id>17998835</id><snippet>requester[verb](**kwargs)
</snippet></ROW><ROW><id>17998861</id><snippet>def Event(*args, **kwargs):
    """A factory function that returns a new event.

    Events manage a flag that can be set to true with the set() method and reset
    to false with the clear() method. The wait() method blocks until the flag is
    true.

    """
    return _Event(*args, **kwargs)
</snippet></ROW><ROW><id>17998861</id><snippet>from threading import _Event

class State(_Event):
    def __init__(self, name):
        super(Event, self).__init__()
        self.name = name

    def __repr__(self):
        return self.name + ' / ' + self.is_set()
</snippet></ROW><ROW><id>17999167</id><snippet>[C,I] = min(...)</snippet></ROW><ROW><id>17999167</id><snippet>C</snippet></ROW><ROW><id>17999167</id><snippet>I</snippet></ROW><ROW><id>17999167</id><snippet>Y_a, I_a = diff_a.min(), diff_a.argmin()
</snippet></ROW><ROW><id>17999167</id><snippet>I_a = diff_a.argmin()
Y_a = diff_a[I_a]
</snippet></ROW><ROW><id>17999167</id><snippet>import numpy as np

for j in range(a):
    diff_a = np.abs(ssa[j] - check)
    diff_b = np.abs(ssb[j] - check)
    I_a = diff_a.argmin()
    Y_a = diff_a[I_a]
</snippet></ROW><ROW><id>17999428</id><snippet>SentenceIMLookingfor='blha blha blah'
with open('textfile.lua','r') as my_file:
    for line in my_file:
        if line.lower().strip() == SentenceIMLookingfor:
            #DO_SOMETHING
</snippet></ROW><ROW><id>17999428</id><snippet>in</snippet></ROW><ROW><id>17999428</id><snippet>if</snippet></ROW><ROW><id>17999428</id><snippet>        if SentenceIMLookingfor in line.lower(): # you may not want .lower()
</snippet></ROW><ROW><id>17999428</id><snippet>for line in my_file</snippet></ROW><ROW><id>17999428</id><snippet>.lower()</snippet></ROW><ROW><id>17999428</id><snippet>.strip()</snippet></ROW><ROW><id>17999428</id><snippet>enumerate</snippet></ROW><ROW><id>17999428</id><snippet>for i, line in enumerate(my_file)</snippet></ROW><ROW><id>17999428</id><snippet>with open('textfile.lua','r') as my_file:
    line_nos = [i for i, line in enumerate(my_file) if line.lower().strip() == SentenceIMLookingfor]
</snippet></ROW><ROW><id>17999453</id><snippet>setTimeout(function() {window.location = '/file.pdf'}, 10000)</snippet></ROW><ROW><id>17999493</id><snippet>src</snippet></ROW><ROW><id>17999493</id><snippet>from pkgutil import extend_path
__path__ = extend_path(__path__, __name__)
</snippet></ROW><ROW><id>17999832</id><snippet>import os

filesList = None
dir = 'C:\FDF'
for root, dirs, files in os.walk(dir):
    filesList = files
    break
print(filesList)
</snippet></ROW><ROW><id>17999832</id><snippet>import os.path

filesList = None
dir = 'C:\FDF'
for root, dirs, files in os.walk(dir):
    for file in files:
        filesList.append(os.path.join(root, file))
print(filesList)
</snippet></ROW><ROW><id>17999835</id><snippet>util.create_service</snippet></ROW><ROW><id>17999835</id><snippet>timeout</snippet></ROW><ROW><id>17999835</id><snippet>httplib2.Http</snippet></ROW><ROW><id>17999835</id><snippet># Instantiate an Http instance
http = httplib2.Http(timeout=2000) # Use a bigger value if you want to stay safe.
</snippet></ROW><ROW><id>17999836</id><snippet>aldurstengd_ororka</snippet></ROW><ROW><id>17999836</id><snippet>aldurstengd_ororka([age])
</snippet></ROW><ROW><id>17999836</id><snippet>aldurstengd_ororka[(age)]
</snippet></ROW><ROW><id>17999836</id><snippet>for age in aldurstengd_ororka.keys():
    print 'age:', age 
    for item in age:
        print item
</snippet></ROW><ROW><id>17999836</id><snippet>age: (32, 33)
32
33
age: (36, 37)
36
37
age: (51, 52, 53, 54, 55)
51
52
53
54
55
age: (61, 62, 63, 64, 65, 66)
61
62
63
64
65
66
age: (30, 31)
30
31
age: 25
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)

/home/ma/mak/Documents/t.py in &lt;module&gt;()
      3 for age in aldurstengd_ororka.keys():
      4     print 'age:', age
----&gt; 5     for item in age:
      6         print item
      7 

TypeError: 'int' object is not iterable
</snippet></ROW><ROW><id>17999836</id><snippet>(25)</snippet></ROW><ROW><id>17999836</id><snippet>25</snippet></ROW><ROW><id>17999836</id><snippet>for age in aldurstengd_ororka.keys():
    # if not tuple, make it a tuple:
    if not type(age) == type( (0,1) ): age = (age,)
    print 'age:', age 
    for item in age:
        print item
</snippet></ROW><ROW><id>17999871</id><snippet>class transactionsForm(Form):
    loan_id = QuerySelectField('trans_id', validators=[Required()], get_label='name')
</snippet></ROW><ROW><id>17999871</id><snippet>def viewFunction(my_variable):
    form = transactionsForm()
    my_query = trans.query.filter_by(trans_id=my_variable)
    form.loan_id.query = my_query
    if form.validate_on_submit():
        # ...
</snippet></ROW><ROW><id>18000022</id><snippet>import b

class A(object):

  def get_magic_number_from_b(self):
      return b.magic_number()
</snippet></ROW><ROW><id>18000022</id><snippet>import a

def magic_number():
  return 42

class B(a.A):
  pass
</snippet></ROW><ROW><id>18000022</id><snippet>AttributeError</snippet></ROW><ROW><id>18000022</id><snippet>import b</snippet></ROW><ROW><id>18000022</id><snippet>import b</snippet></ROW><ROW><id>18000022</id><snippet>class A(object):

  def get_magic_number_from_b(self):
    return b.magic_number()

import b
</snippet></ROW><ROW><id>18000022</id><snippet>class A(object):

  def get_magic_number_from_b(self):
    import b
    return b.magic_number()
</snippet></ROW><ROW><id>18000022</id><snippet>b</snippet></ROW><ROW><id>18000022</id><snippet>a</snippet></ROW><ROW><id>18000040</id><snippet>sys.modules</snippet></ROW><ROW><id>18000040</id><snippet>import ftplib</snippet></ROW><ROW><id>18000040</id><snippet>from ftplib import FTP</snippet></ROW><ROW><id>18000129</id><snippet>&lt;script&gt;
var json_array = [{'text': 'org1', 'id': 'org1ID'}, 
    {'text': 'org2', 'id': 'org2ID'}, 
    {'text': 'org3', 'id': 'org3ID'}];
&lt;/script&gt;
</snippet></ROW><ROW><id>18000213</id><snippet>value</snippet></ROW><ROW><id>18000213</id><snippet>to_dict()</snippet></ROW><ROW><id>18000213</id><snippet>update()</snippet></ROW><ROW><id>18000213</id><snippet>In [36]: df = pd.DataFrame({'A': [0, np.nan, 2, 3, np.nan, 5], 'B': [1, 0, 1, np.nan, np.nan, 1]})

In [37]: df
Out[37]: 
    A   B
0   0   1
1 NaN   0
2   2   1
3   3 NaN
4 NaN NaN
5   5   1

In [38]: df2 = pd.DataFrame({'A': [0, np.nan, 2, 3, 4, 5], 'B': [1, 0, 1, 1, 0, 0]})

In [40]: df2
Out[40]: 
    A  B
0   0  1
1 NaN  0
2   2  1
3   3  1
4   4  0
5   5  0

In [52]: df.update(df2, overwrite=False)

In [53]: df
Out[53]: 
    A  B
0   0  1
1 NaN  0
2   2  1
3   3  1
4   4  0
5   5  1
</snippet></ROW><ROW><id>18000213</id><snippet>NaN</snippet></ROW><ROW><id>18000213</id><snippet>df</snippet></ROW><ROW><id>18000213</id><snippet>(1, A)</snippet></ROW><ROW><id>18000213</id><snippet>NaN</snippet></ROW><ROW><id>18000213</id><snippet>df2</snippet></ROW><ROW><id>18000213</id><snippet>(5, B)</snippet></ROW><ROW><id>18000213</id><snippet>df</snippet></ROW><ROW><id>18000213</id><snippet>df2</snippet></ROW><ROW><id>18000213</id><snippet>overwrite=False</snippet></ROW><ROW><id>18000213</id><snippet>df</snippet></ROW><ROW><id>18000213</id><snippet>In [33]: df = pd.DataFrame({'A': [0, np.nan, 2, 3, np.nan, 5], 'B': [1, 0, 1, np.nan, np.nan, 1]})

In [34]: df2 = pd.DataFrame({'C': [0, np.nan, 2, 3, 4, 5], 'D': [1, 0, 1, 1, 0, 0]})

In [35]: df
Out[35]: 
    A   B
0   0   1
1 NaN   0
2   2   1
3   3 NaN
4 NaN NaN
5   5   1

In [36]: df2
Out[36]: 
    C  D
0   0  1
1 NaN  0
2   2  1
3   3  1
4   4  0
5   5  0

In [37]: d = {'A': df2.C, 'B': df2.D}  # pass this values in fillna

In [38]: df
Out[38]: 
    A   B
0   0   1
1 NaN   0
2   2   1
3   3 NaN
4 NaN NaN
5   5   1

In [40]: df.fillna(value=d)
Out[40]: 
    A  B
0   0  1
1 NaN  0
2   2  1
3   3  1
4   4  0
5   5  1
</snippet></ROW><ROW><id>18000230</id><snippet>import random

rollAgain = "Yes"

while rollAgain in ["Yes" , "yes", "y"]:
    diceChoice = input ("Which dice would you like to roll; 4 sided, 6, sided or 12 sided?")
    if diceChoice in ["4","6","12"]:
        print("You rolled a ",random.randint(1,int(diceChoice)))
    else:
        print "Please input 4,6, or 12."
    rollAgain = input ("Roll Again?") 

print ("Thank you for playing")
</snippet></ROW><ROW><id>18000230</id><snippet>rollAgain = "Yes" or "yes" or "y"
</snippet></ROW><ROW><id>18000230</id><snippet>while rollAgain == "Yes" or "yes" or "y":
</snippet></ROW><ROW><id>18000276</id><snippet>ast</snippet></ROW><ROW><id>18000276</id><snippet>__init__.py</snippet></ROW><ROW><id>18000276</id><snippet>ast</snippet></ROW><ROW><id>18000276</id><snippet>ast</snippet></ROW><ROW><id>18000276</id><snippet>import ast

if __name__ == '__main__':
    print ast.__file__
</snippet></ROW><ROW><id>18000276</id><snippet>C:\research\ast\ast\__init__.pyc
</snippet></ROW><ROW><id>18000356</id><snippet>try:
    user = User.objects.get(uniq_hashed__exact=hash_id)
except User.DoesNotExist as exc:
    message = str(exc)
</snippet></ROW><ROW><id>18000408</id><snippet>Any</snippet></ROW><ROW><id>18000408</id><snippet>attr_a</snippet></ROW><ROW><id>18000408</id><snippet>bisect</snippet></ROW><ROW><id>18000408</id><snippet>def bisect_left(a, x, lo=0, hi=None, key=None):
    if key is None: key = lambda v: v
    if lo &lt; 0:
        raise ValueError('lo must be non-negative')
    if hi is None:
        hi = len(a)
    while lo &lt; hi:
        mid = (lo+hi)//2
        if key(a[mid]) &lt; x: lo = mid+1
        else: hi = mid
    return lo
</snippet></ROW><ROW><id>18000408</id><snippet>key</snippet></ROW><ROW><id>18000408</id><snippet>key</snippet></ROW><ROW><id>18000408</id><snippet>Any</snippet></ROW><ROW><id>18000408</id><snippet>from operator import attrgetter

index = bisect_left(L, x, key=attrgetter('attr_a'))
</snippet></ROW><ROW><id>18000408</id><snippet>Any</snippet></ROW><ROW><id>18000408</id><snippet>Any</snippet></ROW><ROW><id>18000408</id><snippet>attr_a</snippet></ROW><ROW><id>18000408</id><snippet>x</snippet></ROW><ROW><id>18000408</id><snippet>attr_a</snippet></ROW><ROW><id>18000408</id><snippet>def find_by_x(L, x, key):
    index = bisect_left(L, x, key=key)
    if key(L[index]) != x:
        raise IndexError('{} not found'.format(x))
    return L[index]
</snippet></ROW><ROW><id>18000408</id><snippet>&gt;&gt;&gt; from operator import attrgetter
&gt;&gt;&gt; L = [Any(-3, 4), Any(-2, 1), Any(0, 2), Any(2, 1), Any(5, 6), Any(6, 3), Any(8, 2), Any(10, 1), Any(13, 5), Any(14, 3)]
&gt;&gt;&gt; x = 6
&gt;&gt;&gt; bisect_left(L, x, key=attrgetter('attr_a'))
5
&gt;&gt;&gt; L[bisect_left(L, x, key=attrgetter('attr_a'))].attr_b
3
&gt;&gt;&gt; find_by_x(L, x, key=attrgetter('attr_a')).attr_b
3
&gt;&gt;&gt; x = 12
&gt;&gt;&gt; find_by_x(L, x, key=attrgetter('attr_a')).attr_b
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in find_by_x
IndexError: 12 not found
</snippet></ROW><ROW><id>18000474</id><snippet>.</snippet></ROW><ROW><id>18000474</id><snippet>import re

with open('t.txt', 'r') as f:
    contents = f.read()

r = re.compile(r"Package\(\)\s*{(.+)\s*}", re.DOTALL)
m = r.search(contents)
inner_str = m.group(1)
print inner_str
</snippet></ROW><ROW><id>18000474</id><snippet>r = re.compile(r"(?s)Package\(\)\s*{(.+)\s*}")
</snippet></ROW><ROW><id>18000474</id><snippet>with open(..) as f</snippet></ROW><ROW><id>18000474</id><snippet>f = open(...) .... f.close()</snippet></ROW><ROW><id>18000474</id><snippet>r'blah'</snippet></ROW><ROW><id>18000543</id><snippet>subprocess</snippet></ROW><ROW><id>18000543</id><snippet>multiprocessing</snippet></ROW><ROW><id>18000543</id><snippet>import time
from Queue import Empty
from multiprocessing import Process, Queue

def fakeFxn(val):
    if val == 'terminate':
        time.sleep(0.1)
        return 't'
    else:
        time.sleep(1000)
        return 'nt'

def ffWrapper(val, queue):
    retval = fakeFxn(val)
    queue.put(retval)

if __name__ == '__main__':
    q = Queue()
    p = Process(target=ffWrapper, args=('terminate', q))
    p.start()
    rc = ''
    try:
        rc = q.get(timeout=10)
    except Empty:
        print 'timeout'
    p.terminate()
    print rc
</snippet></ROW><ROW><id>18000699</id><snippet>python manage.py reset_db --router=default
</snippet></ROW><ROW><id>18000721</id><snippet>with file('partsList.txt', 'w') as myfile:
    data = {'names': names, 'ingredients': ingredients, 'volumes': volumes, 'category': category}
    json.dump(data, myfile)
</snippet></ROW><ROW><id>18000721</id><snippet>with file('partsList.txt') as myfile:
    data = json.load(myfile)

names = data['names']
# etc.
</snippet></ROW><ROW><id>18000732</id><snippet>SELECT b.symbol, b.title, b.link, b.pubdate
  FROM bar b JOIN
(
  SELECT title, MAX(pubdate) pubdate
    FROM bar
   GROUP BY title
) q ON b.title = q.title 
   AND b.pubdate = q.pubdate
</snippet></ROW><ROW><id>18000755</id><snippet>newList = map(method, objectList)</snippet></ROW><ROW><id>18000755</id><snippet>method(object)</snippet></ROW><ROW><id>18000755</id><snippet>object</snippet></ROW><ROW><id>18000755</id><snippet>objectlist</snippet></ROW><ROW><id>18000755</id><snippet>map(lambda obj: obj.method(), objectlist)
</snippet></ROW><ROW><id>18000759</id><snippet>env = Environment(tools=['mingw'])
</snippet></ROW><ROW><id>18000759</id><snippet>env = Environment(tools=['mingw'], variables = command_line_vars)
</snippet></ROW><ROW><id>18000825</id><snippet>np.nditer</snippet></ROW><ROW><id>18000825</id><snippet>import numpy as np
class Foo():
    def foo(self):
        return np.random.random()

a = np.empty((10,10), dtype=object)
for ind,v in np.ndenumerate(a):
    a[ind] = Foo()

def evaluate_and_reshape(a, shape):
    it = np.nditer( op    = [a.reshape(shape),None],
                    flags = ['multi_index','refs_ok'],
                    op_flags = [['readonly'],
                                ['writeonly','allocate']],
                    op_dtypes = [object, float],
                    itershape = (shape)
                  )
    while not it.finished:
        ind = it.multi_index
        it.operands[1][ind] = it.operands[0][ind].foo()
        it.iternext()
    return it.operands[1]

def sol1():
    return evaluate_and_reshape(a,(20,5))

def sol2():
    return np.reshape( [o.foo() for o in a.flat], (20,5) )
</snippet></ROW><ROW><id>18000825</id><snippet>timeit sol1()
#10000 loops, best of 3: 110 us per loop
timeit sol2()
#10000 loops, best of 3: 54.8 us per loop
</snippet></ROW><ROW><id>18000986</id><snippet>import logging

def handleError(self, record):
    raise
logging.Handler.handleError = handleError
</snippet></ROW><ROW><id>18000986</id><snippet>logger.debug</snippet></ROW><ROW><id>18001112</id><snippet>class EventList(list):
    pass


def GetEvents(file_path):

    ...

    events = EventList(events)
    events.event_header = some_header
    return events
</snippet></ROW><ROW><id>18001364</id><snippet>Decimal</snippet></ROW><ROW><id>18001364</id><snippet>x</snippet></ROW><ROW><id>18001364</id><snippet>&gt;&gt;&gt; print Decimal(float(x))
111.1650000000000062527760746888816356658935546875
</snippet></ROW><ROW><id>18001364</id><snippet>111.165</snippet></ROW><ROW><id>18001364</id><snippet>y</snippet></ROW><ROW><id>18001364</id><snippet>&gt;&gt;&gt; print Decimal(float(y))
236.164999999999992041921359486877918243408203125
</snippet></ROW><ROW><id>18001364</id><snippet>.format</snippet></ROW><ROW><id>18001364</id><snippet>&gt;&gt;&gt; "{0:.2f}".format(Decimal('111.1650'))
'111.16'
&gt;&gt;&gt; "{0:.2f}".format(Decimal('236.1650'))
'236.16'
</snippet></ROW><ROW><id>18001364</id><snippet>&gt;&gt;&gt; "{0:.2f}".format(Decimal('236.1750'))
'236.18'
</snippet></ROW><ROW><id>18001364</id><snippet>Decimal</snippet></ROW><ROW><id>18001364</id><snippet>&gt;&gt;&gt; from decimal import getcontext, ROUND_HALF_UP
&gt;&gt;&gt; getcontext().rounding=ROUND_HALF_UP
&gt;&gt;&gt; "{0:.2f}".format(Decimal('236.1750'))
'236.18'
&gt;&gt;&gt; "{0:.2f}".format(Decimal('236.1650'))  # Now rounds up!
'236.17'
</snippet></ROW><ROW><id>18001364</id><snippet>.format</snippet></ROW><ROW><id>18001364</id><snippet>%</snippet></ROW><ROW><id>18001462</id><snippet>cmd = './test.sh &gt; /tmp/ttt.log'
p = subprocess.Popen(cmd, shell = True)
</snippet></ROW><ROW><id>18001535</id><snippet>import io
from IPython.nbformat import current

def convert(py_file, ipynb_file):
    with io.open(py_file, 'r', encoding='utf-8') as f:
        notebook = current.reads(f.read(), format='py')
    with io.open(ipynb_file, 'w', encoding='utf-8') as f:
        current.write(notebook, f, format='ipynb')

convert('test.py', 'test.ipynb')
</snippet></ROW><ROW><id>18001535</id><snippet>import io
import re
from IPython.nbformat import current

def parse_into_cells(py_file):
    with io.open(py_file, 'r', encoding='utf-8') as f:
        data = f.readlines()
    in_cell = True
    cell = ''
    for line in data:
        if line.rstrip() == '':
            # If a blank line occurs I'm out of the current cell
            in_cell = False
        elif re.match('^\s+', line):
            # Indentation, so nope, I'm not out of the current cell
            in_cell = True
            cell += line
        else:
            # Code at the beginning of the line, so if I'm in a cell just
            # append it, otherwise yield out the cell and start a new one
            if in_cell:
                cell += line
            else:
                yield cell.strip()
                cell = line
                in_cell = True
    if cell != '':
        yield cell.strip()

def convert(py_file, ipynb_file):
    # Create an empty notebook
    notebook = current.reads('', format='py')
    # Add all the parsed cells
    notebook['worksheets'][0]['cells'] = list(map(current.new_code_cell,
                                                  parse_into_cells(py_file)))
    # Save the notebook
    with io.open(ipynb_file, 'w', encoding='utf-8') as f:
        current.write(notebook, f, format='ipynb')

convert('convert.py', 'convert.ipynb')
</snippet></ROW><ROW><id>18001535</id><snippet>import time
import datetime
</snippet></ROW><ROW><id>18001535</id><snippet>import time

import datetime
</snippet></ROW><ROW><id>18001535</id><snippet>class Test(objet):

    def __init__(self, x):

        self.x = x

    def show(self):

        print(self.x)

class Foo(object):
     pass
</snippet></ROW><ROW><id>18001695</id><snippet>defaultdict</snippet></ROW><ROW><id>18001695</id><snippet>if i in dict:
   dict[i].insert(cnt[j])
else:
   dict[i].append(cnt[j])
   j+=1
</snippet></ROW><ROW><id>18001695</id><snippet>i</snippet></ROW><ROW><id>18001695</id><snippet>dict</snippet></ROW><ROW><id>18001695</id><snippet>dict[i]</snippet></ROW><ROW><id>18001695</id><snippet>insert</snippet></ROW><ROW><id>18001695</id><snippet>insert</snippet></ROW><ROW><id>18001695</id><snippet>append(cnt[j])</snippet></ROW><ROW><id>18001695</id><snippet>insert(0, cnt[j])</snippet></ROW><ROW><id>18001695</id><snippet>i</snippet></ROW><ROW><id>18001695</id><snippet>dict</snippet></ROW><ROW><id>18001695</id><snippet>append</snippet></ROW><ROW><id>18001695</id><snippet>list</snippet></ROW><ROW><id>18001695</id><snippet>dict[i]</snippet></ROW><ROW><id>18001695</id><snippet>dict[i]</snippet></ROW><ROW><id>18001695</id><snippet>    dict[i] = [cnt[j]]
</snippet></ROW><ROW><id>18001695</id><snippet>defaultdict</snippet></ROW><ROW><id>18001695</id><snippet>dict</snippet></ROW><ROW><id>18001695</id><snippet>dict[i].append(cnt[j])</snippet></ROW><ROW><id>18001695</id><snippet>dict[i]</snippet></ROW><ROW><id>18001695</id><snippet>dict</snippet></ROW><ROW><id>18001695</id><snippet>words</snippet></ROW><ROW><id>18001695</id><snippet>counts</snippet></ROW><ROW><id>18001695</id><snippet>word</snippet></ROW><ROW><id>18001695</id><snippet>j</snippet></ROW><ROW><id>18001695</id><snippet>count_index</snippet></ROW><ROW><id>18001695</id><snippet>cnt</snippet></ROW><ROW><id>18001695</id><snippet>cnt[j]</snippet></ROW><ROW><id>18001695</id><snippet>j</snippet></ROW><ROW><id>18001695</id><snippet>IndexError</snippet></ROW><ROW><id>18001695</id><snippet>j</snippet></ROW><ROW><id>18001800</id><snippet>&gt;&gt;&gt; result=[]
&gt;&gt;&gt; copy_from_max_idx = len(copy_from) -1
&gt;&gt;&gt; copy_to_max_idx = len(copy_to)-1
&gt;&gt;&gt; for i,e in enumerate(copy_to):
    try:
        idx = copy_from.index(e[1])
    except:
        idx = -1
    if idx &gt;=0:
        #check neighbours (next item actually)
        next_copy_from = e[1] if idx &gt;= copy_from_max_idx else copy_from[idx + 1]
        next_copy_to = '' if i &gt;= copy_to_max_idx else copy_to[i+1][1]
        if next_copy_to == next_copy_from:
            result.append(e + (e[1],))
        else:
            result.append(e + (next_copy_from,))
</snippet></ROW><ROW><id>18001805</id><snippet>StringIO</snippet></ROW><ROW><id>18001805</id><snippet>import cStringIO

test = cStringIO.StringIO()
test.write("test")
test.getvalue()
&gt;&gt;&gt; "test"
</snippet></ROW><ROW><id>18002105</id><snippet>for stooge in stooges:
    print("Name: {0} Age: {1}, and lives in {2}".format(stooge[0],stooge[1],stooge[2])
</snippet></ROW><ROW><id>18002105</id><snippet>string.format()</snippet></ROW><ROW><id>18002105</id><snippet>{0}</snippet></ROW><ROW><id>18002105</id><snippet>.format()</snippet></ROW><ROW><id>18002105</id><snippet>.format()</snippet></ROW><ROW><id>18002105</id><snippet>&gt;&gt;&gt; '{0}, {1}, {2}'.format('a', 'b', 'c')
'a, b, c'
</snippet></ROW><ROW><id>18002209</id><snippet>from comtypes.client import CreateObject

OTAClientDLL = comtypes.client.GetModule("C:\PATH\OTAClient.dll")
</snippet></ROW><ROW><id>18002483</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>18002483</id><snippet>dyld</snippet></ROW><ROW><id>18002483</id><snippet>DYLD_LIBRARY_PATH</snippet></ROW><ROW><id>18002483</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>18002483</id><snippet>DYLD_FALLBACK_LIBRARY_PATH</snippet></ROW><ROW><id>18002483</id><snippet>~/lib:/usr/local/lib:/lib:/usr/lib</snippet></ROW><ROW><id>18002524</id><snippet>sql mode    NO_ENGINE_SUBSTITUTION
</snippet></ROW><ROW><id>18002702</id><snippet>var = 'foo'
" OR tble_tble.var LIKE %'%s'%" % var
</snippet></ROW><ROW><id>18002702</id><snippet>%</snippet></ROW><ROW><id>18002702</id><snippet>%</snippet></ROW><ROW><id>18002702</id><snippet>%'</snippet></ROW><ROW><id>18002702</id><snippet>%</snippet></ROW><ROW><id>18002702</id><snippet>" OR tble_tble.var LIKE %%'%s'%%" % var
</snippet></ROW><ROW><id>18002702</id><snippet>{}</snippet></ROW><ROW><id>18002702</id><snippet>%</snippet></ROW><ROW><id>18002702</id><snippet>%</snippet></ROW><ROW><id>18002702</id><snippet>" OR tble_tble.var LIKE %'{}'%".format(var)
</snippet></ROW><ROW><id>18002702</id><snippet>?</snippet></ROW><ROW><id>18002702</id><snippet>%s</snippet></ROW><ROW><id>18002702</id><snippet>" OR tble_tble.var LIKE %'?'%"
</snippet></ROW><ROW><id>18002702</id><snippet>execute</snippet></ROW><ROW><id>18002702</id><snippet>[var]</snippet></ROW><ROW><id>18002702</id><snippet>?</snippet></ROW><ROW><id>18002702</id><snippet>execute()</snippet></ROW><ROW><id>18002702</id><snippet>LIKE</snippet></ROW><ROW><id>18002742</id><snippet>rows = csv.reader(csv_file)
a.writerows(rows)
</snippet></ROW><ROW><id>18002742</id><snippet>csv_file = gs.download(ss)
with open('test.csv', 'wb') as fp:
    fp.write(csv_file.read())
</snippet></ROW><ROW><id>18002922</id><snippet>feed = ...
</snippet></ROW><ROW><id>18002922</id><snippet>feed</snippet></ROW><ROW><id>18002922</id><snippet>global feed
</snippet></ROW><ROW><id>18002922</id><snippet>feed</snippet></ROW><ROW><id>18002922</id><snippet>feed = feed + 1,
</snippet></ROW><ROW><id>18002922</id><snippet>feed</snippet></ROW><ROW><id>18002922</id><snippet>global feed</snippet></ROW><ROW><id>18002922</id><snippet>onLoadFinished</snippet></ROW><ROW><id>18002922</id><snippet>class Page(object):
    def __init__(self):
        self.feed = 0
    def onLoadFinished(self, result):
        ...
        self.feed += 1
</snippet></ROW><ROW><id>18003000</id><snippet>.sort()</snippet></ROW><ROW><id>18003000</id><snippet>None</snippet></ROW><ROW><id>18003000</id><snippet>sorted()</snippet></ROW><ROW><id>18003000</id><snippet>&gt;&gt;&gt; a = [3, 2, 1]
&gt;&gt;&gt; print a.sort()
None
&gt;&gt;&gt; a
[1, 2, 3]
&gt;&gt;&gt; sorted(a)
[1, 2, 3]
</snippet></ROW><ROW><id>18003440</id><snippet>shlex.quote</snippet></ROW><ROW><id>18003440</id><snippet>with open('bigfile.txt', 'rb') as infile:
    biginput = infile.read(2048)
os.system('cprogram {}'.format(shlex.quote(biginput)))
</snippet></ROW><ROW><id>18003440</id><snippet>subprocess</snippet></ROW><ROW><id>18003440</id><snippet>os.system</snippet></ROW><ROW><id>18003440</id><snippet>with subprocess.Popen('cprogram {}'.format(shlex.quote(biginput)),
                      shell=True, stdin=subprocess.PIPE) as p:
    p.communicate(biginput)
</snippet></ROW><ROW><id>18003440</id><snippet>shell=True</snippet></ROW><ROW><id>18003440</id><snippet>stdout</snippet></ROW><ROW><id>18003440</id><snippet>stderr</snippet></ROW><ROW><id>18003440</id><snippet>os.system</snippet></ROW><ROW><id>18003440</id><snippet>isatty(fileno(stdout))</snippet></ROW><ROW><id>18003440</id><snippet>tempfile.NamedTemporaryFile</snippet></ROW><ROW><id>18003440</id><snippet>subprocess</snippet></ROW><ROW><id>18003440</id><snippet>check_output</snippet></ROW><ROW><id>18003440</id><snippet>check_call</snippet></ROW><ROW><id>18003440</id><snippet>check_output</snippet></ROW><ROW><id>18003440</id><snippet>stdout=PIPE</snippet></ROW><ROW><id>18003440</id><snippet>subprocess</snippet></ROW><ROW><id>18003440</id><snippet>subprocess.check_call(['cprogram', biginput])
</snippet></ROW><ROW><id>18003440</id><snippet>E2BIG</snippet></ROW><ROW><id>18003440</id><snippet>with subprocess.Popen(['cprogram', biginput], stdin=subprocess.PIPE) as p:
    p.communicate(biginput)
</snippet></ROW><ROW><id>18003440</id><snippet>os.forkpty</snippet></ROW><ROW><id>18003440</id><snippet>pty</snippet></ROW><ROW><id>18003440</id><snippet>sysctl kern.argmax</snippet></ROW><ROW><id>18003440</id><snippet>getconf ARG_MAX</snippet></ROW><ROW><id>18003440</id><snippet>sysconf(_SC_ARG_MAX)</snippet></ROW><ROW><id>18003440</id><snippet>ARG_MAX</snippet></ROW><ROW><id>18003440</id><snippet>&lt;limits.h&gt;</snippet></ROW><ROW><id>18003440</id><snippet>execve</snippet></ROW><ROW><id>18003440</id><snippet>RLIMIT_STACK</snippet></ROW><ROW><id>18003440</id><snippet>execve</snippet></ROW><ROW><id>18003604</id><snippet>python setup.py develop
</snippet></ROW><ROW><id>18003604</id><snippet>activate.bat</snippet></ROW><ROW><id>18003604</id><snippet>python.exe</snippet></ROW><ROW><id>18003604</id><snippet>virtualenv --no-site-packages myEnv
</snippet></ROW><ROW><id>18003938</id><snippet>cPickle</snippet></ROW><ROW><id>18003951</id><snippet>x=dog</snippet></ROW><ROW><id>18003951</id><snippet>x=cat
if len(BestX) &gt; 0 or (starcount) &gt; 0:
  x=dog
</snippet></ROW><ROW><id>18003951</id><snippet>x=dog</snippet></ROW><ROW><id>18003951</id><snippet>x=cat
if len(BestX) == 1 and (starcount) == 1:
  x=dog
</snippet></ROW><ROW><id>18003972</id><snippet>libiomp5</snippet></ROW><ROW><id>18003972</id><snippet>LD_MODULES_PATH</snippet></ROW><ROW><id>18003972</id><snippet>modules</snippet></ROW><ROW><id>18003972</id><snippet>MKL/10.3</snippet></ROW><ROW><id>18003972</id><snippet>ifort_icc/13.0</snippet></ROW><ROW><id>18003972</id><snippet>MKL</snippet></ROW><ROW><id>18003972</id><snippet>icc</snippet></ROW><ROW><id>18003972</id><snippet>LD_MODULES_PATH</snippet></ROW><ROW><id>18003972</id><snippet>site.cfg</snippet></ROW><ROW><id>18003972</id><snippet>numpy</snippet></ROW><ROW><id>18003973</id><snippet>autocommit</snippet></ROW><ROW><id>18003973</id><snippet>COMMIT</snippet></ROW><ROW><id>18003973</id><snippet>SET autocommit=1</snippet></ROW><ROW><id>18003973</id><snippet>conn.close()</snippet></ROW><ROW><id>18004063</id><snippet>df_concat.xs('A', level=1, axis=1)
</snippet></ROW><ROW><id>18004069</id><snippet>remote_machine$ python script.py
</snippet></ROW><ROW><id>18004069</id><snippet>remote_machine$ python script.py &amp;
[1] 55341
remote_machine$
</snippet></ROW><ROW><id>18004069</id><snippet>%1</snippet></ROW><ROW><id>18004069</id><snippet>55341</snippet></ROW><ROW><id>18004069</id><snippet>[1]+ Done python
</snippet></ROW><ROW><id>18004069</id><snippet>grep</snippet></ROW><ROW><id>18004069</id><snippet>print('TH_Protocol on {}'.format(os.getpid()))</snippet></ROW><ROW><id>18004252</id><snippet>&gt;&gt;&gt; for i, (name, age, city) in enumerate(stooges, start=1):
...     print("Stooge {}: {} {} {}".format(i, name, age, city))
Stooge 1: Curly 35 New York
Stooge 2: Larry 33 Pennsylvania
Stooge 3: Moe 40 New York
</snippet></ROW><ROW><id>18004522</id><snippet>pip</snippet></ROW><ROW><id>18004522</id><snippet>pip install python-ldap
</snippet></ROW><ROW><id>18004522</id><snippet>sudo pip install python-ldap
</snippet></ROW><ROW><id>18004535</id><snippet>&gt;&gt;&gt; d = OrderedDict([('key1', 'value1'), ('key2', 'value2'), ('key3', 'value3')])
</snippet></ROW><ROW><id>18004535</id><snippet>&gt;&gt;&gt; d.keys()
['key1', 'key2', 'key3']
</snippet></ROW><ROW><id>18004535</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.dropwhile(lambda k: k != 'key2', d.iterkeys()))
['key2', 'key3']
</snippet></ROW><ROW><id>18004686</id><snippet>str.format()</snippet></ROW><ROW><id>18004686</id><snippet>'{number:0{width}d}'.format(width=2, number=4)
</snippet></ROW><ROW><id>18004686</id><snippet>&gt;&gt;&gt; '{number:0{width}d}'.format(width=2, number=4)
'04'
&gt;&gt;&gt; '{number:0{width}d}'.format(width=8, number=4)
'00000004'
</snippet></ROW><ROW><id>18004686</id><snippet>str.format()</snippet></ROW><ROW><id>18004686</id><snippet>'{:02d}'.format(4)
</snippet></ROW><ROW><id>18004686</id><snippet>'{number:02d}'.format(number=4)
</snippet></ROW><ROW><id>18004686</id><snippet>2</snippet></ROW><ROW><id>18004686</id><snippet>%</snippet></ROW><ROW><id>18004686</id><snippet>*</snippet></ROW><ROW><id>18004686</id><snippet>'%0*d' % (width, number)
</snippet></ROW><ROW><id>18004823</id><snippet>class_names = [w.capitalize() for w in
            random.sample(WORDS, snippet.count("%%%"))]
</snippet></ROW><ROW><id>18004823</id><snippet>class_names = []
for w in random.sample(WORDS, snippet.count("%%%")):
    class_names.append(w.capitalize())
</snippet></ROW><ROW><id>18004855</id><snippet>clean_data = [[res for item in info for res in (
                  [item.string] if item.string is not None else
                  ([item('a')[0].string, item('a')[0]['href']])
              )]
              for info in tagged_data]
</snippet></ROW><ROW><id>18004863</id><snippet>CALL object%ParentType%Binding(...)
</snippet></ROW><ROW><id>18004892</id><snippet>print</snippet></ROW><ROW><id>18004892</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>18004892</id><snippet>print Fore.YELLOW + Style.BRIGHT + '[' + strftime("%H:%M:%S") + ']',
</snippet></ROW><ROW><id>18004892</id><snippet>sys.stdout.write(Fore.YELLOW + Style.BRIGHT + '[')
sys.stdout.write(strftime("%H:%M:%S"))
sys.stdout.write(']')
</snippet></ROW><ROW><id>18004892</id><snippet>print '{Fore.YELLOW}{Style.BRIGHT}[{time}] {Style.BRIGHT}{Fore.RED} Name {Fore.BLACK}| {Fore.WHITE}{Style.DIM}Hello!'.format(
    Style=Style, Fore=Fore, time=strftime("%H:%M:%S"))
</snippet></ROW><ROW><id>18005197</id><snippet>max()</snippet></ROW><ROW><id>18005197</id><snippet>key</snippet></ROW><ROW><id>18005197</id><snippet>operator.attrgetter()</snippet></ROW><ROW><id>18005197</id><snippet>from operator import attrgetter

max(self.allPartners, key=attrgetter('attrOne'))
</snippet></ROW><ROW><id>18005197</id><snippet>max(self.allPartners, key=attrgetter('attrOne')).attrOne
</snippet></ROW><ROW><id>18005197</id><snippet>max()</snippet></ROW><ROW><id>18005197</id><snippet>max(p.attrOne for p in self.allPartners)
</snippet></ROW><ROW><id>18005197</id><snippet>One</snippet></ROW><ROW><id>18005197</id><snippet>funtools.total_ordering</snippet></ROW><ROW><id>18005197</id><snippet>from functools import total_ordering

@total_ordering
class One:
    # ...
    def __lt__(self, other):
        if not isinstance(other, type(self)): return NotImplemented
        return self.attrOne &lt; other.attrOne

    def __eq__(self, other):
        if not isinstance(other, type(self)): return NotImplemented
        return self.attrOne == other.attrOne
</snippet></ROW><ROW><id>18005197</id><snippet>One</snippet></ROW><ROW><id>18005197</id><snippet>attrOne</snippet></ROW><ROW><id>18005197</id><snippet>max()</snippet></ROW><ROW><id>18005197</id><snippet>key</snippet></ROW><ROW><id>18005407</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>18005407</id><snippet>argv[0]</snippet></ROW><ROW><id>18005407</id><snippet>$0</snippet></ROW><ROW><id>18005407</id><snippet>nohup</snippet></ROW><ROW><id>18005407</id><snippet>nohup</snippet></ROW><ROW><id>18005407</id><snippet>COMMAND</snippet></ROW><ROW><id>18005407</id><snippet>ARGS</snippet></ROW><ROW><id>18005407</id><snippet>COMMAND</snippet></ROW><ROW><id>18005407</id><snippet>argv[0]</snippet></ROW><ROW><id>18005407</id><snippet>COMMAND</snippet></ROW><ROW><id>18005407</id><snippet>'/usr/bin/python'</snippet></ROW><ROW><id>18005407</id><snippet>argv[1]</snippet></ROW><ROW><id>18005407</id><snippet>'/home/path/to/script/script.py'</snippet></ROW><ROW><id>18005407</id><snippet>$BUCKET</snippet></ROW><ROW><id>18005407</id><snippet>sys.argv</snippet></ROW><ROW><id>18005407</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>18005407</id><snippet>'/home/path/to/script/script.py'</snippet></ROW><ROW><id>18005407</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>18005407</id><snippet>$BUCKET</snippet></ROW><ROW><id>18005407</id><snippet>bash</snippet></ROW><ROW><id>18005407</id><snippet>$1</snippet></ROW><ROW><id>18005407</id><snippet>$0</snippet></ROW><ROW><id>18005407</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>18005407</id><snippet>sys.argv</snippet></ROW><ROW><id>18005407</id><snippet>config</snippet></ROW><ROW><id>18005407</id><snippet>import sys</snippet></ROW><ROW><id>18005407</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>18005407</id><snippet>$1</snippet></ROW><ROW><id>18005407</id><snippet>argv[0]</snippet></ROW><ROW><id>18005407</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>18005407</id><snippet>bash</snippet></ROW><ROW><id>18005407</id><snippet>nohup</snippet></ROW><ROW><id>18005407</id><snippet>python</snippet></ROW><ROW><id>18005487</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18005487</id><snippet>/usr/lib/python2.7/dist-packages/oauth/
</snippet></ROW><ROW><id>18005646</id><snippet>decorator</snippet></ROW><ROW><id>18005646</id><snippet>func_globals</snippet></ROW><ROW><id>18005646</id><snippet>inspect</snippet></ROW><ROW><id>18005679</id><snippet> class EmailMessageHandler(BaseHandler2):
    def cache_email_sent_list(self):  #set email_sent_list to memcache
        email_sent_list = db.GqlQuery("SELECT * FROM EmailMessage WHERE sender =:1 ORDER BY created DESC", user_info.username)  
        if email_sent_list:
            string1 = "email_sent_list"
            email_sent_list_cache_id = "_".join((user_info.username, string1))                  
            memcache.set('%s' % email_sent_list_cache_id, email_sent_list, time=2000000)    
            logging.info('**************email_sent_list added to memcache*********') 
</snippet></ROW><ROW><id>18005679</id><snippet>self.cache_email_sent_list()  
</snippet></ROW><ROW><id>18005679</id><snippet>instanceName.cache_email_sent_list()
</snippet></ROW><ROW><id>18005695</id><snippet>'r'</snippet></ROW><ROW><id>18005695</id><snippet>'R'</snippet></ROW><ROW><id>18005695</id><snippet>r"\n"</snippet></ROW><ROW><id>18005695</id><snippet>'n'</snippet></ROW><ROW><id>18005695</id><snippet>r"\""</snippet></ROW><ROW><id>18005695</id><snippet>r"\"</snippet></ROW><ROW><id>18005782</id><snippet>re</snippet></ROW><ROW><id>18005782</id><snippet>&gt;&gt;&gt; re.findall(r'number\d*: (\d+)',teststring)
['525', '585', '559']
</snippet></ROW><ROW><id>18005782</id><snippet>\d</snippet></ROW><ROW><id>18005782</id><snippet>*</snippet></ROW><ROW><id>18005782</id><snippet>()</snippet></ROW><ROW><id>18005782</id><snippet>+</snippet></ROW><ROW><id>18005782</id><snippet>int</snippet></ROW><ROW><id>18005782</id><snippet>map</snippet></ROW><ROW><id>18005782</id><snippet>&gt;&gt;&gt; map(int, ['525', '585', '559'])
[525, 585, 559]
</snippet></ROW><ROW><id>18005782</id><snippet>&gt;&gt;&gt; [int(s) for s in ['525', '585', '559']]
[525, 585, 559]
</snippet></ROW><ROW><id>18005946</id><snippet> from pyramid.renderers import JSON
 # ...
 config.add_renderer('prettyjson', JSON(indent=4))
</snippet></ROW><ROW><id>18005946</id><snippet>   @view_config(request_method='POST', renderer='prettyjson')
</snippet></ROW><ROW><id>18006088</id><snippet>from HTMLParser import HTMLParser


class ImageFinder(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.file = open('output.txt', 'w') 
    def handle_starttag(self, tag, attrs):
        if tag == "img":
            url = [u[1] for u in attrs if u[0] == "src"][0]
            self.file.write(url+"\n")
    def __exit__(self):
        self.file.close()

inputdata = open("myfile.txt").read()
parser = ImageFinder()
parser.feed(inputdata)
</snippet></ROW><ROW><id>18006176</id><snippet>map</snippet></ROW><ROW><id>18006176</id><snippet>itertools</snippet></ROW><ROW><id>18006176</id><snippet>id</snippet></ROW><ROW><id>18006176</id><snippet>identity</snippet></ROW><ROW><id>18006176</id><snippet>range(16)</snippet></ROW><ROW><id>18006176</id><snippet>(id, map)</snippet></ROW><ROW><id>18006176</id><snippet>(imap, prod)</snippet></ROW><ROW><id>18006176</id><snippet>&lt;</snippet></ROW><ROW><id>18006176</id><snippet>chain(0, count(1))</snippet></ROW><ROW><id>18006176</id><snippet>count(0)</snippet></ROW><ROW><id>18006176</id><snippet>chain</snippet></ROW><ROW><id>18006176</id><snippet>count</snippet></ROW><ROW><id>18006176</id><snippet>list</snippet></ROW><ROW><id>18006176</id><snippet>tee</snippet></ROW><ROW><id>18006176</id><snippet>tee</snippet></ROW><ROW><id>18006176</id><snippet>equal_values = (x1 == x2 for x1, x2 in izip(i1, i2))
</snippet></ROW><ROW><id>18006176</id><snippet>equal_sequences = all(equal_values)
</snippet></ROW><ROW><id>18006176</id><snippet>range</snippet></ROW><ROW><id>18006176</id><snippet>list</snippet></ROW><ROW><id>18006176</id><snippet>map</snippet></ROW><ROW><id>18006176</id><snippet>id</snippet></ROW><ROW><id>18006176</id><snippet>TypeError</snippet></ROW><ROW><id>18006224</id><snippet>numpy.linalg.solve(a,b)</snippet></ROW><ROW><id>18006224</id><snippet>b</snippet></ROW><ROW><id>18006224</id><snippet>LinAlgError</snippet></ROW><ROW><id>18006230</id><snippet>@view_config(route_name="profile", request_method='POST')
def save_profile(self):
    try:
        json = self.request.json_body
        #username = str(json['userName'])
        first_name = str(json['firstName'])
        last_name = str(json['lastName'])
        phones = str(json['phones'])
        emails = str(json['emails'])
        self.profiles.update(firstName=first_name, lastName=last_name, emails=emails, phones=phones)
        value = {'result:': 'success', 'message': 'Profile Saved!'}
    except Exception, err:
        print err
        value = {'result:': 'error', 'message': 'There was an error processing the request'}

    #returns a json response
    return self.respond(value)
</snippet></ROW><ROW><id>18006362</id><snippet>self</snippet></ROW><ROW><id>18006362</id><snippet>class AB(A, B):
    def __init__(self, x, y, z=0):
        A.__init__(self, x, y)
        B.__init__(self, z)
</snippet></ROW><ROW><id>18006362</id><snippet>super</snippet></ROW><ROW><id>18006362</id><snippet>super</snippet></ROW><ROW><id>18006362</id><snippet>object</snippet></ROW><ROW><id>18006363</id><snippet>def getInput():
    userInput = raw_input("Enter the name of the key file: ")

    #you can check to see if the input is valid here

    return userInput
</snippet></ROW><ROW><id>18006363</id><snippet>keyFileName = getInput()
</snippet></ROW><ROW><id>18006455</id><snippet>i = 1523
total = 0
while i &lt;= 10503:
    total += i
    i += 2
print (total)

total = 0
for i in range (1523, 10504, 2):
    total += i
print (total)
</snippet></ROW><ROW><id>18006455</id><snippet>sum</snippet></ROW><ROW><id>18006455</id><snippet>total</snippet></ROW><ROW><id>18006455</id><snippet>print (sum (range (1523, 10504, 2) ) )
</snippet></ROW><ROW><id>18006496</id><snippet>class Derived(Base):
    def __init__(self):
        super(Derived, self).__init__()
</snippet></ROW><ROW><id>18006575</id><snippet>f = open('test.txt', 'r')
lines = f.readlines()
mystr = '\t'.join([line.strip() for line in lines])
</snippet></ROW><ROW><id>18006575</id><snippet>test.txt</snippet></ROW><ROW><id>18006575</id><snippet>line</snippet></ROW><ROW><id>18006575</id><snippet>lines</snippet></ROW><ROW><id>18006575</id><snippet>str.strip()</snippet></ROW><ROW><id>18006575</id><snippet>'\t'.join()</snippet></ROW><ROW><id>18006645</id><snippet>class ConcurrentThingy:
    def __init__ (self):
        self.lock = Lock () # or RLock () if you want it to be reentrant    

    def concurrentlyAccessedMethod (self, *args, **kwargs):
        with self.lock: doMeanStuff ()
</snippet></ROW><ROW><id>18006645</id><snippet>class Routing_Table:
    def set (self, key, value):
        with self.lock: self.table[key] = value

    def get(self, key):
        with self.lock: return self.table[key]

    def __init__(self):
        self.table = {}
        self.lock = Lock ()
</snippet></ROW><ROW><id>18006715</id><snippet>&gt;&gt;&gt; list_numbers = [1,2,3,4,5,6,7,8,9,10,11,12]
&gt;&gt;&gt; list_letters= ["onetothree", "fourtosix", "seventonine", "tentotwelve"]
&gt;&gt;&gt; list(itertools.chain.from_iterable(zip(list_letters, *zip(*[list_numbers[i:i+3] for i in range(0, len(list_numbers), 3)]))))
['onetothree', 1, 2, 3, 'fourtosix', 4, 5, 6, 'seventonine', 7, 8, 9, 'tentotwelve', 10, 11, 12]
</snippet></ROW><ROW><id>18006715</id><snippet>&gt;&gt;&gt; answer = []
&gt;&gt;&gt; i = 0
&gt;&gt;&gt; for letter in list_letters:
...     answer.append(letter)
...     for j in range(3):
...         answer.append(list_numbers[i+j])
...     i += j+1
... 
&gt;&gt;&gt; answer
['onetothree', 1, 2, 3, 'fourtosix', 4, 5, 6, 'seventonine', 7, 8, 9, 'tentotwelve', 10, 11, 12]
</snippet></ROW><ROW><id>18006715</id><snippet>list_numbers</snippet></ROW><ROW><id>18006820</id><snippet>for user in users:
    file = '/Users/' + user + '/sync.log'
    print("created: %s" % time.ctime(os.path.getctime(file)))
    print("last modified: %s" % time.ctime(os.path.getmtime(file)))
</snippet></ROW><ROW><id>18006867</id><snippet>exec_</snippet></ROW><ROW><id>18006867</id><snippet>exec_</snippet></ROW><ROW><id>18006867</id><snippet>app = QtGui.QApplication([])
ex = myform()
ex.show()
app.exec_()
</snippet></ROW><ROW><id>18006867</id><snippet>app = QtGui.QApplication([])
ex = myform()
ex.exec_()
</snippet></ROW><ROW><id>18006895</id><snippet>def check(string, counter=0):
  if not string:
    return "Balanced" if counter == 0 else "Unbalanced"
  elif counter &lt; 0:
    return "Unbalanced"
  elif string[0] == "(":
    return check(string[1:], counter+1)
  elif string[0] == ")":
    return check(string[1:], counter-1)
  else:
    return check(string[1:], counter)
</snippet></ROW><ROW><id>18006895</id><snippet>check("(())")
=&gt; "Balanced"

check(")(")
=&gt; "Unbalanced"
</snippet></ROW><ROW><id>18006895</id><snippet>elif counter &lt; 0</snippet></ROW><ROW><id>18007028</id><snippet>try:
    urllib2.urlopen(req)
except urllib2.HTTPError, error:
    logging.info(error.read()) # or "print error.read()"
</snippet></ROW><ROW><id>18007028</id><snippet>{"error":{"message":"(#200) Cannot tag users who have not installed the app","type":"OAuthException","code":200}}
</snippet></ROW><ROW><id>18007248</id><snippet>inspect.getsource</snippet></ROW><ROW><id>18007248</id><snippet>inspect.getfile</snippet></ROW><ROW><id>18007248</id><snippet>source = inspect.getsource(foo)
with open('newfoo.py', 'wb') as f:
    f.write(source)
    f.write('spam = Spam(3)\neggs = Eggs(spam)\n')
</snippet></ROW><ROW><id>18007248</id><snippet>foo</snippet></ROW><ROW><id>18007248</id><snippet>repr</snippet></ROW><ROW><id>18007248</id><snippet>repr</snippet></ROW><ROW><id>18007248</id><snippet>with open('newfoo.py', 'wb') as f:
    for name, value in foo.__dict__.items():
        f.write('{} = {!r}\n'.format(name, value))
</snippet></ROW><ROW><id>18007248</id><snippet>with open('newfoo.py', 'wb') as f:
    for name, value in foo.__dict__.items():
        if ast.literal_eval(repr(value)) != value:
            raise ValueError('Tried to save {}'.format(value))
        f.write('{} = {!r}\n'.format(name, value))
</snippet></ROW><ROW><id>18007277</id><snippet>variable =  1 if not True else 2
</snippet></ROW><ROW><id>18007277</id><snippet>&lt;value_if_true&gt; if &lt;condition&gt; else &lt;value_if_false&gt;
</snippet></ROW><ROW><id>18007430</id><snippet>self.path</snippet></ROW><ROW><id>18007430</id><snippet>ip:port/index.html</snippet></ROW><ROW><id>18007430</id><snippet>self.path</snippet></ROW><ROW><id>18007430</id><snippet>ip:port/index.html</snippet></ROW><ROW><id>18007430</id><snippet>http://example.com:8080/foo/bar/index.html</snippet></ROW><ROW><id>18007430</id><snippet>self.path</snippet></ROW><ROW><id>18007430</id><snippet>example.com:8080/foo/bar/index.html</snippet></ROW><ROW><id>18007430</id><snippet>/foo/bar/index.html</snippet></ROW><ROW><id>18007430</id><snippet>curdir+ sep + self.path</snippet></ROW><ROW><id>18007430</id><snippet>./example.com:8080/</snippet></ROW><ROW><id>18007430</id><snippet>/../../../../../../../etc/passwd</snippet></ROW><ROW><id>18007430</id><snippet>os.path</snippet></ROW><ROW><id>18007430</id><snippet>f = open(curdir + sep + self.path, "rb")
</snippet></ROW><ROW><id>18007430</id><snippet>path = os.path.abspath(os.path.join(curdir, self.path))
if os.path.commonprefix((path, curdir)) != curdir:
    # illegal!
</snippet></ROW><ROW><id>18007430</id><snippet>curdir</snippet></ROW><ROW><id>18007430</id><snippet>from os import curdir</snippet></ROW><ROW><id>18007430</id><snippet>.</snippet></ROW><ROW><id>18007430</id><snippet>abspath</snippet></ROW><ROW><id>18007430</id><snippet>..</snippet></ROW><ROW><id>18007430</id><snippet>abspath</snippet></ROW><ROW><id>18007565</id><snippet>p1, = plt.plot(time_model, rv_model_primary, 'k-')
p2, = plt.plot(time_model_sec, rv_model_secondary, 'k--')
p3, = plt.plot(time_obs, rv_obs_primary, 'bo')
p4, = plt.plot(time_obs_apg, rv_obs_primary_apg, 'ro')
p5, = plt.plot(time_obs_apg_sec, rv_obs_secondary_apg, 'rs')
</snippet></ROW><ROW><id>18007565</id><snippet>plot</snippet></ROW><ROW><id>18007565</id><snippet>Line2D</snippet></ROW><ROW><id>18007565</id><snippet>,</snippet></ROW><ROW><id>18007565</id><snippet>plt.legend([p1,p2,p3,(p5,p4)],["Primary", "Secondary", "XYZ", "This Work"],
           handler_map={p4:HandlerLine2D(numpoints=2), p5:HandlerLine2D(numpoints=1)})
</snippet></ROW><ROW><id>18007565</id><snippet>from matplotlib.legend_handler import HandlerLine2D

class HandlerXoffset(HandlerLine2D):
    def __init__(self, marker_pad=0.3, numpoints=1, x_offset=0,  **kw):
        HandlerLine2D.__init__(self, marker_pad=marker_pad, numpoints=numpoints, **kw)
        self._xoffset = x_offset
    def get_xdata(self, legend, xdescent, ydescent, width, height, fontsize):
        numpoints = self.get_numpoints(legend)

        if numpoints &gt; 1:
            # we put some pad here to compensate the size of the
            # marker
            xdata = np.linspace(-xdescent + self._marker_pad * fontsize,
                                width - self._marker_pad * fontsize,
                                numpoints) - self._xoffset
            xdata_marker = xdata
        elif numpoints == 1:
            xdata = np.linspace(-xdescent, width, 2) - self._xoffset
            xdata_marker = [0.5 * width - 0.5 * xdescent - self._xoffset]

        print xdata, self._xoffset
        print xdata_marker

        return xdata, xdata_marker

time_model = time_model_sec = time_obs = time_obs_apg = time_obs_apg_sec = range(5)

rv_model_primary = np.random.rand(5)
rv_model_secondary = np.random.rand(5)
rv_obs_primary = np.random.rand(5)
rv_obs_primary_apg =  np.random.rand(5)
rv_obs_secondary_apg =  np.random.rand(5)

p1,=plt.plot(time_model, rv_model_primary, 'k-')
p2,=plt.plot(time_model_sec, rv_model_secondary, 'k--')
p3,=plt.plot(time_obs, rv_obs_primary, 'bo')
p4,=plt.plot(time_obs_apg, rv_obs_primary_apg, 'ro')
p5,=plt.plot(time_obs_apg_sec, rv_obs_secondary_apg, 'rs')

plt.legend([p1,p2,p3,(p5,p4)], 
           ["Primary", "Secondary", "XYZ", "This Work"],
            handler_map={p4:HandlerXoffset(x_offset=10),   
                         p5:HandlerXoffset(x_offset=-10)})
</snippet></ROW><ROW><id>18007565</id><snippet>x_offset</snippet></ROW><ROW><id>18007585</id><snippet>host = socket.gethostbyname('example.com')
page = urllib2.urlopen('http://{}/path'.format(host))
</snippet></ROW><ROW><id>18007585</id><snippet>Host: example.com</snippet></ROW><ROW><id>18007585</id><snippet>Host: 93.184.216.119</snippet></ROW><ROW><id>18007585</id><snippet>host = socket.gethostbyname('example.com')
request = urllib2.Request('http://{}/path'.format(host),
                          headers = {'Host': 'example.com'})
page = urllib2.urlopen(request)
</snippet></ROW><ROW><id>18007585</id><snippet>httplib.HTTPConnection</snippet></ROW><ROW><id>18007585</id><snippet>HTTPConnection.connect</snippet></ROW><ROW><id>18007585</id><snippet>httplib.HTTPConnection</snippet></ROW><ROW><id>18007585</id><snippet>connect</snippet></ROW><ROW><id>18007585</id><snippet>def connect(self):
    host = socket.gethostbyname(self.host)
    self.sock = socket.create_connection((host, self.post),
                                         self.timeout, self.source_address)
    if self._tunnel_host:
        self._tunnel()
</snippet></ROW><ROW><id>18007585</id><snippet>urllib2.HTTPHandler</snippet></ROW><ROW><id>18007585</id><snippet>http_open</snippet></ROW><ROW><id>18007585</id><snippet>def http_open(self, req):
    return self.do_open(my wrapper.MyHTTPConnection, req)
</snippet></ROW><ROW><id>18007585</id><snippet>HTTPSHandler</snippet></ROW><ROW><id>18007585</id><snippet>urllib2</snippet></ROW><ROW><id>18007585</id><snippet>httplib.HTTPConnection.connect</snippet></ROW><ROW><id>18007585</id><snippet>urllib2</snippet></ROW><ROW><id>18007585</id><snippet>requests</snippet></ROW><ROW><id>18007585</id><snippet>libcurl</snippet></ROW><ROW><id>18007585</id><snippet>curl_easy_setopt(h, CURLOPT_IPRESOLVE, CURLOPT_IPRESOLVE_V4)</snippet></ROW><ROW><id>18007626</id><snippet>print datetime.strptime(mylist[4], '%Y%m')
</snippet></ROW><ROW><id>18007666</id><snippet>import pandas as pd

data = {'a': [1,2,3,4], 'b': [10,20,30,40],'c': [100,200,300,400]}

df = pd.concat({"Estimates": pd.DataFrame(data)}, axis=1, names=["l1", "l2"])

l1  Estimates         
l2          a   b    c
0           1  10  100
1           2  20  200
2           3  30  300
3           4  40  400
</snippet></ROW><ROW><id>18007799</id><snippet>pdb</snippet></ROW><ROW><id>18007799</id><snippet>py-print</snippet></ROW><ROW><id>18007799</id><snippet>__repr__</snippet></ROW><ROW><id>18007799</id><snippet>gdb</snippet></ROW><ROW><id>18007799</id><snippet>PyObject*</snippet></ROW><ROW><id>18007799</id><snippet>pdb</snippet></ROW><ROW><id>18007867</id><snippet>numpy.unique(mylist)</snippet></ROW><ROW><id>18007867</id><snippet>list(set(mylist))</snippet></ROW><ROW><id>18007925</id><snippet>decrypt = decrypt[string1:length]
</snippet></ROW><ROW><id>18007925</id><snippet>decrypt = decrypt[string1+1:length]
</snippet></ROW><ROW><id>18008113</id><snippet>def balanced(s, i=0, cnt=0):
    if i == len(s): return cnt == 0
    if cnt &lt; 0: return False
    if s[i] == "(": return  balanced(s, i + 1, cnt + 1)
    elif s[i] == ")": return  balanced(s, i + 1, cnt - 1)
    return balanced(s, i + 1, cnt)

for s in ["()", "(()", "(())", "()()", ")("]:
    print "{}: {}".format(s, balanced(s))

(): True
((): False
(()): True
()(): True
)(: False
</snippet></ROW><ROW><id>18008179</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>18008179</id><snippet>activate</snippet></ROW><ROW><id>18008179</id><snippet>deactivate</snippet></ROW><ROW><id>18008179</id><snippet>~/Projects/ProjectX/myvenv/bin/activate</snippet></ROW><ROW><id>18008179</id><snippet>deactivate nondestructive</snippet></ROW><ROW><id>18008179</id><snippet>source ~/.bash_profile</snippet></ROW><ROW><id>18008266</id><snippet>import time
import sys

for x in range(10):
    time.sleep(1)
    print("a", end="")
    sys.stdout.flush()
</snippet></ROW><ROW><id>18008266</id><snippet>flush</snippet></ROW><ROW><id>18008266</id><snippet>import time

for x in range(10):
    time.sleep(1)
    print("a", end="", flush=True)
</snippet></ROW><ROW><id>18008414</id><snippet>grid.point_data.scalars = np.ravel([], order='F')
</snippet></ROW><ROW><id>18008414</id><snippet>grid.point_data.scalars = data.ravel(order='F')
</snippet></ROW><ROW><id>18008464</id><snippet>new_f = dict((k,v) for (k,v) in result.f.iteritems() if v != 0)
</snippet></ROW><ROW><id>18008464</id><snippet>new_f=dict()
for j in result.f.keys():
    if result.f[j]!=0:
        new_f[j] = result.f[j]
</snippet></ROW><ROW><id>18008630</id><snippet>array[1]</snippet></ROW><ROW><id>18008630</id><snippet>array[0]</snippet></ROW><ROW><id>18008630</id><snippet>array[start:stop:step]</snippet></ROW><ROW><id>18008630</id><snippet>array[4::2]</snippet></ROW><ROW><id>18008630</id><snippet>0.25*I[0:-1, 0:-1]
</snippet></ROW><ROW><id>18008630</id><snippet>step</snippet></ROW><ROW><id>18008631</id><snippet>PRAGMA foreign_keys=ON</snippet></ROW><ROW><id>18008631</id><snippet>import sqlalchemy.event as sqlevent

# ...

engine = sql.create_engine('sqlite:///{0}'.format(db_file), **engine_opts)
sqlevent.listen(engine, 'connect',
    lambda conn, rec: conn.execute('PRAGMA foreign_keys=ON;'))
</snippet></ROW><ROW><id>18008631</id><snippet>sqlalchemy.exc.IntegrityError: (IntegrityError)
foreign key constraint failed u'INSERT INTO obj (x, y) VALUES (?, ?)' (-1, -1)
</snippet></ROW><ROW><id>18008769</id><snippet>anno_colors = robj.StrVector(tuple(["navy", "green"]))
anno_colors.names = ["Class1", "Class2"]
od = OrderedDict()
od["Type"] = anno_colors
result = robj.ListVector(od)
print str(result)
</snippet></ROW><ROW><id>18009315</id><snippet>verification</snippet></ROW><ROW><id>18009315</id><snippet>def add_verification(request):
    #get verification code
    ctx = {'verification': 'xxxxx'}

    #you can also check what path it is like
    #if request.path.contains('/someparticularurl/'):
    #    add verification 

    return ctx
</snippet></ROW><ROW><id>18009315</id><snippet>import django.conf.global_settings as DEFAULT_SETTINGS

TEMPLATE_CONTEXT_PROCESSORS = DEFAULT_SETTINGS.TEMPLATE_CONTEXT_PROCESSORS + (
    'custom_context_processors.add_verification',
      )
</snippet></ROW><ROW><id>18009315</id><snippet>RequestContext</snippet></ROW><ROW><id>18009315</id><snippet>def my_view(request):
    # View code here...
    return render_to_response(request, 'myapp/index.html', {"foo": "bar"},
                 context_instance=RequestContext(request)
                 )
</snippet></ROW><ROW><id>18009526</id><snippet>WeekdayLocator</snippet></ROW><ROW><id>18009526</id><snippet>dates</snippet></ROW><ROW><id>18009526</id><snippet>from matplotlib.dates import WeekdayLocator

def plot_series(x, y):
    fig, ax = plt.subplots()
    ax.plot_date(x, y, fmt='g--') # x = array of dates, y = array of numbers        

    fig.autofmt_xdate()

    # For tickmarks and ticklabels every week
    ax.xaxis.set_major_locator(WeekdayLocator(byweekday=MO))

    # For tickmarks and ticklabels every other week
    #ax.xaxis.set_major_locator(WeekdayLocator(byweekday=MO, interval=2))

    plt.grid(True)
    plt.show()
</snippet></ROW><ROW><id>18009526</id><snippet>from matplotlib.dates import WeekdayLocator

def plot_series(x, y):
    fig, ax = plt.subplots()
    ax.plot_date(x, y, fmt='g--') # x = array of dates, y = array of numbers        

    fig.autofmt_xdate()

    # For tickmarks and ticklabels every fourth week
    ax.xaxis.set_major_locator(WeekdayLocator(byweekday=MO, interval=4))

    # For tickmarks (no ticklabel) every week
    ax.xaxis.set_minor_locator(WeekdayLocator(byweekday=MO))

    # Grid for both major and minor ticks
    plt.grid(True, which='both')
    plt.show()
</snippet></ROW><ROW><id>18009977</id><snippet>a, b = b, a + b
</snippet></ROW><ROW><id>18009977</id><snippet>a = b
b = a + b
</snippet></ROW><ROW><id>18009977</id><snippet>a</snippet></ROW><ROW><id>18009977</id><snippet>b</snippet></ROW><ROW><id>18009977</id><snippet>b</snippet></ROW><ROW><id>18009977</id><snippet>a</snippet></ROW><ROW><id>18009977</id><snippet>b</snippet></ROW><ROW><id>18009977</id><snippet>old_a = a
a = b
b = old_a + b
</snippet></ROW><ROW><id>18009977</id><snippet>        a                        b               output
================    =========================    ======
(initial values)        (initial values)
        0                        1                  1
(becomes prev b)    (becomes sum of prev a,b)
        1                        1                  1
        1                        2                  2
        2                        3                  3
        3                        5                  5
        5                        8                  8
</snippet></ROW><ROW><id>18010038</id><snippet>reg['NUMBER']</snippet></ROW><ROW><id>18010124</id><snippet>__lt__</snippet></ROW><ROW><id>18010124</id><snippet>def __lt__(self, other):
    return self.age &lt; other.age
</snippet></ROW><ROW><id>18010124</id><snippet>__eq__</snippet></ROW><ROW><id>18010124</id><snippet>functools.total_ordering</snippet></ROW><ROW><id>18010366</id><snippet>  for i in range(0, b):
      result = result + my_list[i];
</snippet></ROW><ROW><id>18010366</id><snippet>  for m in my_list:
      result = result + m;
</snippet></ROW><ROW><id>18010366</id><snippet>  for m in my_list:
      result = result + m;

  print(result)  # &lt;- mind indent
</snippet></ROW><ROW><id>18010366</id><snippet>  my_list = [1, 17, 2]

  result = 0

  for m in my_list:
      result = result + m;

  print(result)
</snippet></ROW><ROW><id>18010413</id><snippet>y = lambda a: a[0] = a[1]
y([1, 2, 3])
</snippet></ROW><ROW><id>18010448</id><snippet>dict(dict1, **dict2)</snippet></ROW><ROW><id>18010448</id><snippet>&gt;&gt;&gt; dict1 = {"foo": "bar"}
&gt;&gt;&gt; dict2 = {"car": "vroom"}

&gt;&gt;&gt; dict(dict1, **dict2)
{'car': 'vroom', 'foo': 'bar'}

&gt;&gt;&gt; print "Value 1 is %(foo)s and value 2 is %(car)s" % dict(dict1, **dict2)
Value 1 is bar and value 2 is vroom
</snippet></ROW><ROW><id>18010464</id><snippet>User</snippet></ROW><ROW><id>18010464</id><snippet>from_number = request.REQUEST.get('From', None)
user = User.objects.get_or_create(username=from_number, ...)
# ... your code ...
</snippet></ROW><ROW><id>18010464</id><snippet>class Quiz(models.Model):
    message = models.CharField(max_length=100)
    order = models.IntegerField()
    response = models.CharField(max_length=100)
    # ... fields you need ...

    def __unicode__():
        return self.message

class QuizUser(models.Model):
    quiz = models.ForeignKey('Quiz')
    user = models.ForeignKey('User')
</snippet></ROW><ROW><id>18010464</id><snippet>from_number = request.REQUEST.get('From', None)
body = request.REQUEST.get('Body', None)
user = User.objects.get(username=from_number)
quiz = Quiz.objects.get(message=body)
user_quiz = QuizUser.objects.get(user=user, quiz=quiz)
# ... your code ...
</snippet></ROW><ROW><id>18010464</id><snippet>completed_quiz</snippet></ROW><ROW><id>18010503</id><snippet># tables.py

from django_tables2 import import Table


class ModelTable(Table):
    class Meta:
        pass


def table_maker(model, columns):
    meta_class = type('Meta', (ModelTable.Meta,), {'model':model, 'fields':columns})
    table_class = type(model._meta.object_name + 'Table', (ModelTable,), {'Meta':meta_class})
    return table_class
</snippet></ROW><ROW><id>18010503</id><snippet># views.py

from django.shortcuts import render
from django_tables2 import RequestConfig
import myapp.tables as mytables


def show_table(request, model, columns):
    entries = model.objects.all()
    table = mytables.table_maker(model, columns)(entries)
    RequestConfig(request).configure(table)
    return render(request, 'table_view.html', {'dynamic-table': table})
</snippet></ROW><ROW><id>18010812</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>18010812</id><snippet>Py_SetPath</snippet></ROW><ROW><id>18010812</id><snippet>lib/pythonX.Y</snippet></ROW><ROW><id>18010812</id><snippet>collections</snippet></ROW><ROW><id>18010812</id><snippet>os</snippet></ROW><ROW><id>18010812</id><snippet>sys</snippet></ROW><ROW><id>18010812</id><snippet>$PYTHONHOME</snippet></ROW><ROW><id>18010812</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>18010812</id><snippet>-E</snippet></ROW><ROW><id>18010812</id><snippet>sys.path</snippet></ROW><ROW><id>18010812</id><snippet>site.py</snippet></ROW><ROW><id>18010812</id><snippet>-S</snippet></ROW><ROW><id>18010812</id><snippet>sys.path</snippet></ROW><ROW><id>18010812</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>18010812</id><snippet>$HOME/.local/lib/pythonX.Y/sitepackages/usercustomize.py</snippet></ROW><ROW><id>18010812</id><snippet>$ cat usercustomize.py
print 'hello from usercustomize'
$ python
hello from usercustomize
Python 2.7.5 (default, Jun 15 2013, 11:50:00) 
[GCC 4.2.1 20070831 patched [FreeBSD]] on freebsd9
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>18010812</id><snippet>import random, sys
random.shuffle(sys.path)
</snippet></ROW><ROW><id>18010812</id><snippet>sys.path</snippet></ROW><ROW><id>18010812</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>18010812</id><snippet>sys.path</snippet></ROW><ROW><id>18010812</id><snippet>usercustomize.py</snippet></ROW><ROW><id>18010812</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>18010812</id><snippet>site-packages/site.py</snippet></ROW><ROW><id>18010812</id><snippet>os.getenv("PYTHONPATH")</snippet></ROW><ROW><id>18011275</id><snippet>Flask-Admin</snippet></ROW><ROW><id>18011275</id><snippet>flask_admin.base.BaseView</snippet></ROW><ROW><id>18011275</id><snippet>Flask-Admin</snippet></ROW><ROW><id>18011275</id><snippet>Flask-Admin</snippet></ROW><ROW><id>18011275</id><snippet>class MyView(BaseView):
    def __init__(self, *args, **kwargs):
        self._default_view = True
        super(MyView, self).__init__(*args, **kwargs)
        self.admin = Admin()

@app.route('/form')
def form():
    return MyView().render('form.html')
</snippet></ROW><ROW><id>18011443</id><snippet>super()</snippet></ROW><ROW><id>18011443</id><snippet>super(MyTime, self)</snippet></ROW><ROW><id>18011443</id><snippet>__new__</snippet></ROW><ROW><id>18011443</id><snippet>__init__</snippet></ROW><ROW><id>18011443</id><snippet>class MyTime(datetime.time):
    def __new__(cls, t):
        return datetime.time.__new__(cls, t.hour, t.minute, t.second, t.microsecond)

print MyTime(datetime.time(10,20,30,400000))
</snippet></ROW><ROW><id>18011443</id><snippet>10:20:30.400000
</snippet></ROW><ROW><id>18011472</id><snippet>import itertools
for i, j in itertools.combinations(range(10), 2):
    print i, j
</snippet></ROW><ROW><id>18011472</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; 
&gt;&gt;&gt; def gen():
...     yield 'egg'
...     yield 'spam'
...     yield 'ham'
... 
&gt;&gt;&gt; for i, j in itertools.combinations(gen(), 2):
...     print i, j
... 
egg spam
egg ham
spam ham
</snippet></ROW><ROW><id>18011766</id><snippet>x[1].T
x[2] - Y
</snippet></ROW><ROW><id>18011766</id><snippet>x_1</snippet></ROW><ROW><id>18011766</id><snippet>x_2</snippet></ROW><ROW><id>18011766</id><snippet>x[0]</snippet></ROW><ROW><id>18011766</id><snippet>None</snippet></ROW><ROW><id>18011909</id><snippet>last_item  = edited_item
# Need last_item  = copy.copy(edited_item)
if edited_item.has_key('previous versions'):
    edited_item['previous versions'].append(last_item)
</snippet></ROW><ROW><id>18011933</id><snippet>server = couchdb.Server('http://localhost:5984')
db = server['tweets']
if MyDocId in db:
  mytemp = db[MyDocId]

mytemp = db.get(MyDocId)
if mytemp is None:
  print "missed"
</snippet></ROW><ROW><id>18012023</id><snippet>The Hitchhiker’s Guide to Python</snippet></ROW><ROW><id>18012350</id><snippet>def scrapeStep(root):
    result_urls = []
    br = mechanize.Browser()
    br.set_handle_robots(False)
    br.addheaders = [('User-agent', 'Firefox')]

    for url in root:
        try:
            br.open(url)
            for link in br.links():
                newurl = urlparse.urljoin(link.base_url, link.url)
                result_urls.append(newurl)
        except:
            print "error"

    return result_urls
</snippet></ROW><ROW><id>18012400</id><snippet>args</snippet></ROW><ROW><id>18012400</id><snippet>__str__</snippet></ROW><ROW><id>18012400</id><snippet>__repr__</snippet></ROW><ROW><id>18012400</id><snippet>Exception</snippet></ROW><ROW><id>18012400</id><snippet>def __str__(self):
    return ("" if len(self.args) == 0 else
            str(self.args[0]) if len(self.args) == 1 else
            str(self.args))

def __repr__(self):
    return "%s%r" % (self.__class__.__name__.split('.')[-1], self.args)
</snippet></ROW><ROW><id>18012400</id><snippet>args</snippet></ROW><ROW><id>18012400</id><snippet>__str__</snippet></ROW><ROW><id>18012400</id><snippet>__repr__</snippet></ROW><ROW><id>18012400</id><snippet>args</snippet></ROW><ROW><id>18012400</id><snippet>class DeviceError(Exception):
    def __init__(self, errno, msg):
        super(DeviceError, self).__init__(errno, msg)
        self.errno = errno
        self.errmsg = msg
</snippet></ROW><ROW><id>18012427</id><snippet>multiprocessing</snippet></ROW><ROW><id>18012427</id><snippet>os.mkfifo</snippet></ROW><ROW><id>18012775</id><snippet>genfromtxt</snippet></ROW><ROW><id>18012775</id><snippet>numpy</snippet></ROW><ROW><id>18012775</id><snippet>X</snippet></ROW><ROW><id>18012775</id><snippet>savetxt</snippet></ROW><ROW><id>18012775</id><snippet>import numpy as np
X = np.genfromtxt("yourcsvfile.dat",delimiter=",")
X[0,0] = 42   # do something with the array
np.savetxt('yourcsvfile.dat',X,delimiter=",")
</snippet></ROW><ROW><id>18012775</id><snippet># read in
X = np.genfromtxt("yourcsvfile.dat",delimiter=",",dtype=None)
# write out
with open('yourcsvfile.dat','w') as f:
for el in X[()]:
    f.write(str(el)+' ') 
</snippet></ROW><ROW><id>18012830</id><snippet>data = {}

for t in table_list:
    cur.execute("SELECT * FROM {} WHERE date=?".format(t), (date,))
    data[t] = [row[2] for row in cur]
</snippet></ROW><ROW><id>18012880</id><snippet>class Callers(models.Model):
    body = models.CharField()
    from_number = models.CharField()
    last_question = models.IntegerField(default=0) # if you have more than 10 question then I guess using IntegerField is better here
</snippet></ROW><ROW><id>18012880</id><snippet>def hello_there(request):  # this is a function, so use lower case with underscore for name
    body = request.REQUEST.get('Body', None)
    from_number = request.REQUEST.get("From",None)

    try:
        caller = Caller.objects.get(from_number=from_number) # using get() is better than filter here since I guess you want unique caller field in DB, right?
    except Caller.DoesNotExist:
        caller = None

    if caller:
        if caller.last_question == 0:
            # update the caller ?
            caller.last_question = 1
            caller.body = 'Something'
            caller.save()
            # ... your code ...
            return HttpResponse(str(resp))
        if last_question == 1:
            # so on and so forth
            # if you have repeated process here, make a function to update caller to be DRY
    else:
        new_caller = Caller(body=body, from_number=from_number, last_question=0)
        new_caller.save()
        message = "What is the password?"
</snippet></ROW><ROW><id>18012880</id><snippet>request.user.is_authenticated()</snippet></ROW><ROW><id>18012880</id><snippet>User</snippet></ROW><ROW><id>18012880</id><snippet>body</snippet></ROW><ROW><id>18012927</id><snippet>mydll.open()</snippet></ROW><ROW><id>18012927</id><snippet>mydll.open()</snippet></ROW><ROW><id>18012927</id><snippet>mydll.open()
</snippet></ROW><ROW><id>18012927</id><snippet>#include &lt;stdio.h&gt;

void open(void)
{
    char input[20];
    printf("input = "); // If you want prompt
    scanf("%s", input);
    printf("\n%s\n", input);
}
</snippet></ROW><ROW><id>18012995</id><snippet>self.cursor.execute("SQL template") % URL
</snippet></ROW><ROW><id>18012995</id><snippet>self.cursor.execute("SQL template" % URL)
</snippet></ROW><ROW><id>18012995</id><snippet>)</snippet></ROW><ROW><id>18012995</id><snippet>self.cursor.execute("select (1) from eScraperInterfaceApp_scrapeddata where productURL = '%s' limit 1" % URL)
</snippet></ROW><ROW><id>18012995</id><snippet>self.cursor.execute("select (1) from eScraperInterfaceApp_scrapeddata where productURL = %s limit 1", (URL,))
</snippet></ROW><ROW><id>18013088</id><snippet>for word3 in line_combined:
</snippet></ROW><ROW><id>18013088</id><snippet>for word3 in line1:
</snippet></ROW><ROW><id>18013682</id><snippet>lakes</snippet></ROW><ROW><id>18013682</id><snippet>DataFrame</snippet></ROW><ROW><id>18013682</id><snippet>area_dict = dict(zip(lakes.area, lakes.count))
</snippet></ROW><ROW><id>18013827</id><snippet>conn = api.connect() # This line is run only once when the process starts and the module is loaded 

def view(request):
    conn.call_function() # This line is run every time a request is received
</snippet></ROW><ROW><id>18013827</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; def add(b):
...     print a + b
... 
&gt;&gt;&gt; add(2)
3
</snippet></ROW><ROW><id>18013827</id><snippet>&gt;&gt;&gt; def change(c):
...     a = c
...     print a
... 
&gt;&gt;&gt; change(4)
4
&gt;&gt;&gt; print a
1
</snippet></ROW><ROW><id>18013827</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; def change(d):
...     global a
...     a = d
...     print a
... 
&gt;&gt;&gt; change(5)
5
&gt;&gt;&gt; print a
5
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>18014191</id><snippet>old_number = ''
for line in file:
    number = line.split('_')[0]
    if number == old_number:
        continue
    else:
        print line
        old_number = number
</snippet></ROW><ROW><id>18014219</id><snippet>def f(x):
    c = common_helper_function(x)
    return a_complex_function(x,c), another_complex_function(x,c)
</snippet></ROW><ROW><id>18014219</id><snippet>def test1():
    print '     simple function'
    return 1

print 'Calling simple function:'
_ = (lambda : test1())()
print 'Calling simple function again:'
_ = (lambda : test1())()

output:
Calling simple function:
    simple function # evaluated once
Calling simple function again:
    simple function # evaluated twice
</snippet></ROW><ROW><id>18014219</id><snippet>lru_cache</snippet></ROW><ROW><id>18014219</id><snippet>functools</snippet></ROW><ROW><id>18014219</id><snippet>from functools32 import lru_cache

@lru_cache(maxsize=10)
def test2():
    print '     cashed function'
    return 1

print 'Calling cashed function:'
_ = (lambda : test2())()
print 'Calling cashed function again:'
_ = (lambda : test2())()

output:
Calling cashed function:
    cashed function # evaluated once
Calling cashed function again:
                    # not evaluated twice
</snippet></ROW><ROW><id>18014219</id><snippet>import lazy

@lazy.lazy
def test3():
    print '     lazy function'
    return 1

print 'Calling lazy function:'
b = (lambda : test3())()
print 'Calling cashed function again:'
b = (lambda : test3())()
print 'Trying to get results:'
print b

output:
Calling lazy function:
Calling cashed function again:
Trying to get results:
    lazy function  # evaluated
1
</snippet></ROW><ROW><id>18014500</id><snippet>itertools.tee()</snippet></ROW><ROW><id>18014723</id><snippet>Attribute</snippet></ROW><ROW><id>18014723</id><snippet>Attribute : STRING | NUMBER | '$' Attribute | empty</snippet></ROW><ROW><id>18014723</id><snippet>$</snippet></ROW><ROW><id>18014723</id><snippet>Attribute</snippet></ROW><ROW><id>18014723</id><snippet>Attribute</snippet></ROW><ROW><id>18014723</id><snippet>empty</snippet></ROW><ROW><id>18014723</id><snippet>Exactly_One_Attribute : STRING | NUMBER
</snippet></ROW><ROW><id>18014723</id><snippet>Attribute</snippet></ROW><ROW><id>18014723</id><snippet>Zero_Or_More_Attributes : Zero_Or_More_Attributes Attribute | empty
</snippet></ROW><ROW><id>18014723</id><snippet>One_Or_More_Attributes: One_Or_More_Attributes Attribute | Attribute
</snippet></ROW><ROW><id>18014723</id><snippet>Attribute_opt : empty | Attribute
</snippet></ROW><ROW><id>18014723</id><snippet>Zero_Or_More_Attributes : Attribute Zero_Or_More_Attributes | empty
</snippet></ROW><ROW><id>18014723</id><snippet>STRING</snippet></ROW><ROW><id>18014723</id><snippet>NUMBER</snippet></ROW><ROW><id>18014723</id><snippet>STRING</snippet></ROW><ROW><id>18014723</id><snippet>NUMBER</snippet></ROW><ROW><id>18014761</id><snippet>download()</snippet></ROW><ROW><id>18014761</id><snippet>utils.DownloadError</snippet></ROW><ROW><id>18014761</id><snippet>def download(...):
    try:
        ...
    except HTTPError as e:
        raise DownloadError() from e
</snippet></ROW><ROW><id>18014761</id><snippet>from requests.exceptions import HTTPError</snippet></ROW><ROW><id>18014761</id><snippet>utils.py</snippet></ROW><ROW><id>18014761</id><snippet>import utils</snippet></ROW><ROW><id>18014761</id><snippet>utils.HTTPError</snippet></ROW><ROW><id>18014761</id><snippet>requests</snippet></ROW><ROW><id>18014810</id><snippet>next</snippet></ROW><ROW><id>18014810</id><snippet>next</snippet></ROW><ROW><id>18014810</id><snippet>for foo in bar</snippet></ROW><ROW><id>18014810</id><snippet>next</snippet></ROW><ROW><id>18014810</id><snippet>next</snippet></ROW><ROW><id>18014810</id><snippet> for word in (word for line in f for word in line.split(' ')):
     ...
</snippet></ROW><ROW><id>18015080</id><snippet>for i, v1 in enumerate(vect):
    for j in xrange(i + 1, len(vect)):
        a = np.array(v1)
        b = np.array(vect[j])
        space = np.linalg.norm(b - a)
        print space
</snippet></ROW><ROW><id>18015080</id><snippet>import itertools

for v1, v2 in itertools.combinations(vect, 2):
    a = np.array(v1)
    b = np.array(v2)
    space = np.linalg.norm(b - a)
    print space
</snippet></ROW><ROW><id>18015331</id><snippet>__init__.py</snippet></ROW><ROW><id>18015331</id><snippet>C:\Python27\Scripts\GetAdUrlsFromIndex_project\GetAdUrlsFromIndex</snippet></ROW><ROW><id>18015331</id><snippet>C:\Python27\Scripts\GetAdUrlsFromIndex_project\GetAdUrlsFromIndex\spiders</snippet></ROW><ROW><id>18015331</id><snippet>import sys
from twisted.internet import reactor
from scrapy.crawler import Crawler
from scrapy.settings import Settings
from scrapy import log

sys.path.append('C:/Python27/Scripts/GetAdUrlsFromIndex_project')
from GetAdUrlsFromIndex.spiders.GetAdUrls_spider import getadurls

spider = getadurls(domain='website.com')
crawler = Crawler(Settings())
crawler.configure()
crawler.crawl(spider)
crawler.start()
log.start()
reactor.run() # the script will block here
</snippet></ROW><ROW><id>18015338</id><snippet>raw_input()</snippet></ROW><ROW><id>18015338</id><snippet>input()</snippet></ROW><ROW><id>18015338</id><snippet>2.5</snippet></ROW><ROW><id>18015520</id><snippet>In [11]: s.index = pd.MultiIndex.from_tuples(s.index)

In [12]: s
Out[12]: 
0  0    1
   1    2
   3    3
1  0    1
   2    4
3  0    5
dtype: int64

In [13]: s[:(1,1)]
Out[13]: 
0  0    1
   1    2
   3    3
1  0    1
dtype: int64
</snippet></ROW><ROW><id>18015708</id><snippet>from itertools import imap

def generate_playlist(pairs):
  '''
  @param pairs: list of pairs, first element is a file name, second - repetition amount
  @return: generator for playlist items
  '''
  max_show_times = max(imap(second, pairs))
  for i in xrange(max_show_times):
    for file_path, repetition_count in pairs:
      if i % (max_show_times / repetition_count) == 0:  
           yield file_path

def second(col):
  if col and len(col) &gt; 1:
    return col[1]

playlist = generate_playlist(file_to_count_pairs)
playlist = imap(get_file_name_without_ext, playlist)
</snippet></ROW><ROW><id>18015798</id><snippet>*</snippet></ROW><ROW><id>18015798</id><snippet>&gt;&gt;&gt; Matrix = [[['23'],['47'],['35'],['-']],
          [['45'],['22'],['34'],['-']],
          [['11'],['43'],['22'],['-']]]
&gt;&gt;&gt; zip(*Matrix)
[(['23'], ['45'], ['11']), (['47'], ['22'], ['43']), (['35'], ['34'], ['22']), (['-'], ['-'], ['-'])]
</snippet></ROW><ROW><id>18015798</id><snippet>[row for row in zip(*Matrix) if all(e != ['-'] for e in row)]
</snippet></ROW><ROW><id>18015798</id><snippet>_Matrix = []
for row in  zip(*Matrix):
    #all(e != ['-'] for e in row)
    _cond = True
    for e in row:
        if e != ['-']:
               _cond = False
               break
    if not _cond:
        _Matrix.append(e)
</snippet></ROW><ROW><id>18015798</id><snippet>zip(*(row for row in zip(*Matrix) if all(e != ['-'] for e in row)))
</snippet></ROW><ROW><id>18015822</id><snippet>__path__</snippet></ROW><ROW><id>18015822</id><snippet>__file__</snippet></ROW><ROW><id>18015822</id><snippet>__file__</snippet></ROW><ROW><id>18015822</id><snippet>__path__</snippet></ROW><ROW><id>18015822</id><snippet>__init__.py</snippet></ROW><ROW><id>18015822</id><snippet>__loader__</snippet></ROW><ROW><id>18015822</id><snippet>unknown_module</snippet></ROW><ROW><id>18015822</id><snippet>sys.path</snippet></ROW><ROW><id>18015943</id><snippet>&gt;&gt;&gt; sum(lloyd['homework'])
354.0
</snippet></ROW><ROW><id>18015943</id><snippet>def findsum(x):
    return sum([sum(x['homework']),sum(x['quizzes']),sum(x['tests'])])

&gt;&gt;&gt; findsum(lloyd)
741.0
</snippet></ROW><ROW><id>18015943</id><snippet>&gt;&gt;&gt; len(lloyd['homework'])
4
</snippet></ROW><ROW><id>18016087</id><snippet>test.zip</snippet></ROW><ROW><id>18016087</id><snippet>from zipfile import ZipFile


with ZipFile('test.zip', 'r') as f:
    directories = [item for item in f.namelist() if item.endswith('/')]
    print directories
</snippet></ROW><ROW><id>18016087</id><snippet>directories[0]</snippet></ROW><ROW><id>18016635</id><snippet>from django.views.generic import ListView

class EntryList(ListView):
    model = Entry
    template_name = 'blog/entry_list.html'
    context_object_name = 'entry_list'
    paginate_by = 10
</snippet></ROW><ROW><id>18016635</id><snippet>urls.py</snippet></ROW><ROW><id>18016635</id><snippet>url(r'^entries/$', ListView.as_view(model=Entry, paginate_by=10))
</snippet></ROW><ROW><id>18016635</id><snippet>from endless_pagination.views import AjaxListView    
class EntryList(AjaxListView):
    model = Entry
    context_object_name = 'entry_list'
    page_template = 'entry.html'
</snippet></ROW><ROW><id>18016635</id><snippet>urls.py</snippet></ROW><ROW><id>18016635</id><snippet>from endless_pagination.views import AjaxListView

url(r'^entries/$', AjaxListView.as_view(model=Entry))
</snippet></ROW><ROW><id>18016874</id><snippet>ordering = {word: i for i, word in enumerate(predefined_list)}
</snippet></ROW><ROW><id>18016874</id><snippet>somelist.sort(key=ordering.get)
</snippet></ROW><ROW><id>18016874</id><snippet>.index()</snippet></ROW><ROW><id>18016874</id><snippet>somelist.sort(key=predefined_list.index)
</snippet></ROW><ROW><id>18016874</id><snippet>ordering</snippet></ROW><ROW><id>18016874</id><snippet>&gt;&gt;&gt; predefined_list = ['id','name','age','height','weight',]
&gt;&gt;&gt; ordering = {word: i for i, word in enumerate(predefined_list)}
&gt;&gt;&gt; sorted(['height','id'], key=ordering.get)
['id', 'height']
&gt;&gt;&gt; sorted(['name','weight','height'], key=ordering.get)
['name', 'height', 'weight']
</snippet></ROW><ROW><id>18016874</id><snippet>.index()</snippet></ROW><ROW><id>18017216</id><snippet>&lt;wsdl:binding type="i0:Service_1_0" name="BasicHttpBinding_Service_1_0"&gt;
</snippet></ROW><ROW><id>18017216</id><snippet>type="i0:Service_1_0"</snippet></ROW><ROW><id>18017216</id><snippet>&lt;wsdl:portType name="Service_1_0"&gt;
    &lt;wsdl:operation name="TrackShipments"&gt;
      &lt;wsdl:input name="ShipmentTrackingRequest" message="tns:ShipmentTrackingRequest" wsaw:Action="http://ws.aramex.net/ShippingAPI/v1/Service_1_0/TrackShipments"/&gt;
      &lt;wsdl:output name="ShipmentTrackingResponse" message="tns:ShipmentTrackingResponse" wsaw:Action="http://ws.aramex.net/ShippingAPI/v1/Service_1_0/TrackShipmentsResponse"/&gt;
    &lt;/wsdl:operation&gt;
  &lt;/wsdl:portType&gt;
  &lt;wsdl:service name="Service_1_0"&gt;
    &lt;wsdl:port name="BasicHttpBinding_Service_1_0" binding="i0:BasicHttpBinding_Service_1_0"&gt;
      &lt;soap:address location="http://ws.aramex.net/shippingapi/tracking/service_1_0.svc"/&gt;
    &lt;/wsdl:port&gt;
  &lt;/wsdl:service&gt;
</snippet></ROW><ROW><id>18017228</id><snippet>scris = [x for x in test if len(x) &lt;= 30]
</snippet></ROW><ROW><id>18017228</id><snippet>scris = [len(x) &lt;= 30 and x or 'whatever' for x in test]
</snippet></ROW><ROW><id>18017276</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; counts = Counter([-1,2,3,-1,3,4,4,4,4,4])
&gt;&gt;&gt; counts.viewvalues() # counts.values() in Python 3+
dict_values([1, 2, 5, 2])
</snippet></ROW><ROW><id>18017276</id><snippet>Counter</snippet></ROW><ROW><id>18017276</id><snippet>dict</snippet></ROW><ROW><id>18017276</id><snippet>counts.viewitems()</snippet></ROW><ROW><id>18017276</id><snippet>counts.items()</snippet></ROW><ROW><id>18017656</id><snippet>get()</snippet></ROW><ROW><id>18017656</id><snippet>City = Cap_Austria.get()

if City == 'Vienna':
    #do stuff
</snippet></ROW><ROW><id>18017656</id><snippet>Cap_Austria.insert(0,  'default text')
</snippet></ROW><ROW><id>18017656</id><snippet>class EntryTemplate(Entry):
    def __init__(self, master, status):
        Entry.__init__(self, master)
        Entry.insert(self, 0, status)
        Entry.bind(self, "&lt;FocusIn&gt;", lambda event: self.clickOnEntry(event, status))
        Entry.bind(self, "&lt;FocusOut&gt;", lambda event: self.clickOffEntry(event, status))


    def clickOnEntry(self, event, defaultText):
        if self.get() == defaultText:
            self.delete(0, END)

    def clickOffEntry(self, event, defaultText):
        if len(self.get()) == 0:
            Entry.insert(self, 0, defaultText)
</snippet></ROW><ROW><id>18017656</id><snippet>Cap_Austria = EntryTemplate(root, 'default text')
Cap_Austria.pack(side = RIGHT)

City = Cap_Austria.get()
</snippet></ROW><ROW><id>18017868</id><snippet>line</snippet></ROW><ROW><id>18017868</id><snippet>.partition()</snippet></ROW><ROW><id>18017868</id><snippet>line.partition('=')</snippet></ROW><ROW><id>18018119</id><snippet>img</snippet></ROW><ROW><id>18018119</id><snippet>for link in soup.find_all('a'):
    if link.find('img'):
        print link
</snippet></ROW><ROW><id>18018130</id><snippet>from operator import itemgetter
from itertools import imap, izip

last_element = imap(itemgetter(-1), a)
in_threes = izip(*[iter(last_element)] * 3)
res = map(list, in_threes)
# [[0, 3, 1], [2, 5, 2], [1, 2, 0], [0, 4, 2]]
</snippet></ROW><ROW><id>18018130</id><snippet>defaultdict</snippet></ROW><ROW><id>18018130</id><snippet>from collections import defaultdict
dd = defaultdict(list)
for el in a:
    dd[el[0]].append(el[-1])

# defaultdict(&lt;type 'list'&gt;, {100: [0, 3, 1], 101: [2, 5, 2], 102: [1, 2, 0], 103: [0, 4, 2]})
</snippet></ROW><ROW><id>18018432</id><snippet>while f &lt; len(nektonic): #the while loop will loop until the split fossils have been processed
    data.insert(r,(nektonic[f])) #each split fossil will be inserted into a row below                                   
    f=f+1 #the fossil index moves on to the next fossil
    r=r+1 #the next fossil will be inserted into the row below the previous fossil
    return f
    return r
</snippet></ROW><ROW><id>18018432</id><snippet>return f</snippet></ROW><ROW><id>18018432</id><snippet>returns</snippet></ROW><ROW><id>18018432</id><snippet>for fossil in nektonic:
    data.insert(r, fossil)
</snippet></ROW><ROW><id>18018614</id><snippet>set</snippet></ROW><ROW><id>18018614</id><snippet>set_one = {'some_value', 'some_other_value', ...}

# ...
if l[0] in set_one:
    # do something.
</snippet></ROW><ROW><id>18018614</id><snippet>dict_one = {'some_value': 'item1', 'some_other_value': 'item2', ...}

# ...
if l[0] in dict_one:
    item = dict_one[l[0]]
</snippet></ROW><ROW><id>18018744</id><snippet>dict</snippet></ROW><ROW><id>18018744</id><snippet>{}</snippet></ROW><ROW><id>18018744</id><snippet>.append( {abilities_m_l[job_row]['Element Name']:list()} )
</snippet></ROW><ROW><id>18018744</id><snippet>[]</snippet></ROW><ROW><id>18019205</id><snippet>fp = open(filename, "rb")
data = fp.read()
fp.close()

fp = open(jpegfilename, "wb")
fp.write(data[6:-1])
fp.close()
</snippet></ROW><ROW><id>18019396</id><snippet>all_data = " ".join([line for line in file]).split("ID")
return [", ".join([item.split(" ")[::2] for item in all_data])]
</snippet></ROW><ROW><id>18019594</id><snippet>img</snippet></ROW><ROW><id>18019594</id><snippet>img.append(plt.imshow(Z[i]))</snippet></ROW><ROW><id>18019594</id><snippet>img.append([plt.imshow(Z[i])])</snippet></ROW><ROW><id>18020263</id><snippet>if abilities_m_l[job_row]['Element Name'] == abilities_m_l[job_row-1]['Element Name']:
    job[abilities_m_l[job_row]['Element Name']].append({key:value for key,value in abilities_m_l[job_row] if key not in ('O*NET-SOC Code','Element Name', 'Scale ID')})
</snippet></ROW><ROW><id>18020263</id><snippet>Oral Comprehension</snippet></ROW><ROW><id>18020263</id><snippet>key = abilities_m_l[job_row]['Element Name']
if key not in job:
    job[key] = []
job[key].append({key:value for key,value in abilities_m_l[job_row] if key not in ('O*NET-SOC Code','Element Name', 'Scale ID')})
</snippet></ROW><ROW><id>18020263</id><snippet>dict.setdefault()</snippet></ROW><ROW><id>18020263</id><snippet>key = abilities_m_l[job_row]['Element Name']
job.setdefault(key, []).append({key:value for key,value in abilities_m_l[job_row] if key not in ('O*NET-SOC Code','Element Name', 'Scale ID')})
</snippet></ROW><ROW><id>18020298</id><snippet>__init__</snippet></ROW><ROW><id>18020298</id><snippet>forms.Form</snippet></ROW><ROW><id>18020298</id><snippet>__init__</snippet></ROW><ROW><id>18020298</id><snippet>__init__</snippet></ROW><ROW><id>18020298</id><snippet>class DefaultForm(forms.Form):
    def __init__(self, *args, **kwargs): 
        super(forms.Form, self ).__init__(*args, **kwargs)
        self.error_css_class = 'alert'
        self.error_class = DivErrorList
        self.required_css_class = 'required'
        self.label_suffix = ':'
        self.auto_id = True
</snippet></ROW><ROW><id>18020421</id><snippet>with open("filename", "wb") as f:
    f.seek(10239)    # seek to 10k - 1
    f.write("\0")    # write a single byte
</snippet></ROW><ROW><id>18020519</id><snippet>nike</snippet></ROW><ROW><id>18020519</id><snippet>import csv

with open('company_inf1.csv','rb') as csvfile, open('out.csv', 'w') as outfile:
    writer = csv.writer(outfile)
    writer.writerow(['id','name', 'date','indus','nike', 'paid', 'abbr'])
    reader = csv.reader(csvfile)
    reader.next() # skip header
    for id, (name, date, industry, nike1, nike2, nike3, paid, abbreviation) in enumerate(reader):
        nike = '([{0},{1},{2}])'.format(nike1, nike2, nike3)
        writer.writerow([id, name, date, industry, nike, paid, abbreviation])
</snippet></ROW><ROW><id>18020760</id><snippet>select_from</snippet></ROW><ROW><id>18020760</id><snippet>query = select(columns)
query = query.select_from(
    customer1.outerjoin(
        order1,
        and_(
            order1.c.customer_id==customer1.c.id,
        )
    ).outerjoin(
        address1,
        and_(
            customer1.c.id==address1.c.customer_id
        )
    )
)
</snippet></ROW><ROW><id>18020945</id><snippet>Proxy</snippet></ROW><ROW><id>18020988</id><snippet>cube</snippet></ROW><ROW><id>18020988</id><snippet>b = cube(b)</snippet></ROW><ROW><id>18020988</id><snippet>return cube(b)</snippet></ROW><ROW><id>18020988</id><snippet>def cube(c):
    return c**3

def by_three(b):
    if b % 3 == 0:
         b = cube(b)
         return b  # Or simply return cube(b) and remove `b = cube(b)`
    else:
         return False
</snippet></ROW><ROW><id>18020988</id><snippet>cube</snippet></ROW><ROW><id>18020988</id><snippet>b</snippet></ROW><ROW><id>18021164</id><snippet>import</snippet></ROW><ROW><id>18021164</id><snippet>class MyModel(object):
    pass # Implementation here
</snippet></ROW><ROW><id>18021164</id><snippet>from models import MyModel, SomeOtherModel
m = MyModel
m.put()
</snippet></ROW><ROW><id>18021436</id><snippet>module Jekyll
  class JsonEventsTag &lt; Liquid::Tag
    def initialize(tag_name, markup, tokens)
      super
        # Open &amp; Parse JSON file somthing like
        @events = JSON.parse(File.read("_data/events.json"));
      end

      def render(context)
        # loop over @events, format into HTML and return the result
      end
    end
  end
end

Liquid::Template.register_tag('sidebar_events', Jekyll::JsonEventsTag)
</snippet></ROW><ROW><id>18021436</id><snippet>{% sidebar_events %}
</snippet></ROW><ROW><id>18021441</id><snippet>spyne.util.dictdoc</snippet></ROW><ROW><id>18021441</id><snippet>from spyne.model.complex import ComplexModel
from spyne.model.primitive import Integer

class B(ComplexModel):
    c = Integer

class A(ComplexModel):
    a = Integer
    b = B 

from spyne.util.dictdoc import get_object_as_dict
print get_object_as_dict(A(a=4, b=B(c=5)), A)
# prints {'a': 4, 'b': {'c': 5}}

get_object_as_dict(A(a=4, b=B(c=5)), A, ignore_wrappers=False)
# prints {'A': {'a': 4, 'b': {'B': {'c': 5}}}}
</snippet></ROW><ROW><id>18021540</id><snippet>pip install -e /develop/MyPackage
</snippet></ROW><ROW><id>18021544</id><snippet>a = np.genfromtxt('dir1.txt').T[0]

loop=np.arange(2, 50)
for arg in loop:
    str(arg)
    a += np.genfromtxt('dir'+arg+'.txt').T[0]
</snippet></ROW><ROW><id>18021545</id><snippet>if any(card[0] == target_card for card in pHands[target_player]):
    transfer_cards = card[0] == target_card in pHands[target_player]
    del card[0] == target_card in pHands[target_player]
    if any(card[0] == target_card for card in pHands[0]):
        pHands[0].extend(transfer_cards)
</snippet></ROW><ROW><id>18021545</id><snippet># Make a copy of the list so we don't modify it while enumerating it [:]
for i, card in enumerate(pHands[target_player][:]):
    # Example: "Do you have a seven?"
    if target_card[0] == card[0]:
        pHands[0].append(target_card)
        del pHands[target_player][i]
</snippet></ROW><ROW><id>18021545</id><snippet>for suite in range(4):
     for rank in range(13):
         deck.append(rankList[rank]+suitList[suite])
</snippet></ROW><ROW><id>18021545</id><snippet>for suite in suitList:
     for rank in rankList:
         deck.append(rank+suit)
</snippet></ROW><ROW><id>18021878</id><snippet>import re

post_path = re.compile(r'"POST (/\S+) HTTP')

match = post_path.search(apache_log['@message'])
if match:
    print match.group(1)
</snippet></ROW><ROW><id>18021878</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; apache_log = {'@source': 'file://xxxxxxxxxxxxxxx//var/log/apache2/access.log', '@source_host': 'xxxxxxxxxxxxxxxxxxx', '@message': 'xxxxxxxxxxxxxxx xxxxxxxxxx - - [02/Aug/2013:12:38:37 +0000] "POST /user/12345/product/2 HTTP/1.1" 404 513 "-" "PycURL/7.26.0"', '@tags': [], '@fields': {}, '@timestamp': '2013-08-02T12:38:38.181000Z', '@source_path': '//var/log/apache2/access.log', '@type': 'Apache-access'}
&gt;&gt;&gt; post_path = re.compile(r'"POST (/\S+) HTTP')
&gt;&gt;&gt; match = post_path.search(apache_log['@message'])
&gt;&gt;&gt; if match:
...     print match.group(1)
... 
/user/12345/product/2
</snippet></ROW><ROW><id>18021884</id><snippet>decimal</snippet></ROW><ROW><id>18021884</id><snippet>quantize</snippet></ROW><ROW><id>18021884</id><snippet>from decimal import Decimal,ROUND_HALF_UP
ten_places = Decimal('0.0000000001')
four_places = Decimal('0.0001')
mean = 4.2516499999999994
print Decimal(mean).quantize(ten_places).quantize(four_places, rounding=ROUND_HALF_UP)
4.2517
</snippet></ROW><ROW><id>18021963</id><snippet>sum = np.zeros(len(data[0]))

for vector in data[1:]:
    vector = map(float, vector)
    sum = np.add(vector, sum)
</snippet></ROW><ROW><id>18021963</id><snippet>sum</snippet></ROW><ROW><id>18022001</id><snippet>cmp</snippet></ROW><ROW><id>18022213</id><snippet>with open (file1, 'r') as f: ids = [line.strip () for line in f]
with open (file2, 'r') as f:
    with open (file3, 'w') as g:
        for line in f:
            if any (id in line for id in ids): g.write (line)
</snippet></ROW><ROW><id>18022213</id><snippet>with open (file1, 'r') as f: ids = [line.strip () for line in f]
with open (file2, 'r') as f:
    with open (file3, 'w') as g:
        for line in f:
            if any (line.startswith (id) for id in ids): g.write (line)
</snippet></ROW><ROW><id>18022302</id><snippet>'a'</snippet></ROW><ROW><id>18022302</id><snippet>'b'</snippet></ROW><ROW><id>18022302</id><snippet>''.join</snippet></ROW><ROW><id>18022302</id><snippet>['a']</snippet></ROW><ROW><id>18022302</id><snippet>'a'</snippet></ROW><ROW><id>18022302</id><snippet>[]</snippet></ROW><ROW><id>18022302</id><snippet>''</snippet></ROW><ROW><id>18022302</id><snippet>[''.join(l) for l in list_of_lists]
</snippet></ROW><ROW><id>18022334</id><snippet>1101</snippet></ROW><ROW><id>18022334</id><snippet>trie</snippet></ROW><ROW><id>18022334</id><snippet>1</snippet></ROW><ROW><id>18022334</id><snippet>11</snippet></ROW><ROW><id>18022334</id><snippet>110</snippet></ROW><ROW><id>18022334</id><snippet>1101</snippet></ROW><ROW><id>18022334</id><snippet>digitReplacement</snippet></ROW><ROW><id>18022334</id><snippet>1</snippet></ROW><ROW><id>18022334</id><snippet>0</snippet></ROW><ROW><id>18022334</id><snippet>1100</snippet></ROW><ROW><id>18022334</id><snippet>getNearestSignatureKey()</snippet></ROW><ROW><id>18022334</id><snippet>trie</snippet></ROW><ROW><id>18022334</id><snippet>Trie_has_prefix</snippet></ROW><ROW><id>18022382</id><snippet>django-admin.py</snippet></ROW><ROW><id>18022382</id><snippet>python C:\Python27\Scripts\django-admin.py startproject demosite</snippet></ROW><ROW><id>18022382</id><snippet>django-admin.py startproject demosite</snippet></ROW><ROW><id>18022382</id><snippet>startproject.bat</snippet></ROW><ROW><id>18022382</id><snippet>Python27\Scripts\</snippet></ROW><ROW><id>18022382</id><snippet>python C:\Python27\Scripts\django-admin.py startproject %1</snippet></ROW><ROW><id>18022382</id><snippet>startproject.bat demosite
</snippet></ROW><ROW><id>18022411</id><snippet>class NA_(object):
    instance = None # Singleton (so `val is NA` will work)
    def __new__(self):
        if NA_.instance is None:
            NA_.instance = super(NA_, self).__new__(self)
        return NA_.instance
    def __str__(self): return "NA"
    def __repr__(self): return "NA_()"
    def __and__(self, other):
        if self is other or other:
            return self
        else:
            return other
    __rand__ = __and__
    def __or__(self, other):
        if self is other or other:
            return other
        else:
            return self
    __ror__ = __or__
    def __xor__(self, other):
        return self
    __rxor__ = __xor__
    def __eq__(self, other):
        return self is other
    __req__ = __eq__
    def __nonzero__(self):
        raise TypeError("bool(NA) is undefined.")
NA = NA_()
</snippet></ROW><ROW><id>18022411</id><snippet>&gt;&gt;&gt; print NA &amp; NA
NA
&gt;&gt;&gt; print NA &amp; True
NA
&gt;&gt;&gt; print NA &amp; False
False
&gt;&gt;&gt; print NA | True
True
&gt;&gt;&gt; print NA | False
NA
&gt;&gt;&gt; print NA | NA
NA
&gt;&gt;&gt; print NA ^ True
NA
&gt;&gt;&gt; print NA ^ NA
NA
&gt;&gt;&gt; if NA: print 3
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 28, in __nonzero__
TypeError: bool(NA) is undefined.
&gt;&gt;&gt; if NA &amp; False: print 3
...
&gt;&gt;&gt;
&gt;&gt;&gt; if NA | True: print 3
...
3
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18022475</id><snippet>self</snippet></ROW><ROW><id>18022475</id><snippet>num = self.Find_Number(index)
</snippet></ROW><ROW><id>18022475</id><snippet>FindMaxNumber.</snippet></ROW><ROW><id>18022601</id><snippet>import numpy as np
import matplotlib as mp
matplotlib.use('pgf')
import matplotlib.pyplot as plt

x = np.linspace(0., 1., num=100)
y = x**2

plt.plot(x, y, label=r'Data \cite{&lt;key&gt;}')
plt.legend(loc=0)
plt.savefig('fig.pgf')
</snippet></ROW><ROW><id>18022601</id><snippet>\documentclass[letterpaper,10pt]{article}
\usepackage[utf8x]{inputenc}
\usepackage{pgf}

\begin{document}

  \begin{figure}
    \centering
    \input{fig.pgf}
    \caption{Test Figure}
  \end{figure}

\end{document}
</snippet></ROW><ROW><id>18022719</id><snippet>import urllib
import urllib2

url = 'someurl.php'
values = {'site' : 'name1place1', 'size' : '8'}

sites_file = 'path/to/sites_file'
with open(sites_file, 'r') as sites:
    for site_value in sites: # This pulls each line out the file

        # Remove trailing whitespace or '\n' from site and replace value in dict
        values['site'] = site_value.rstrip() 
        data = urllib.urlencode(values)
        req = urllib2.Request(url, data)
        response = urllib2.urlopen(req)
        the_page = response.read()
        print the_page
</snippet></ROW><ROW><id>18022758</id><snippet>pip</snippet></ROW><ROW><id>18022758</id><snippet>which</snippet></ROW><ROW><id>18023468</id><snippet>name</snippet></ROW><ROW><id>18023468</id><snippet>In [7]: df.index.name
Out[7]: 'Index Title'

In [8]: df.index.name = 'foo'

In [9]: df.index.name
Out[9]: 'foo'

In [10]: df
Out[10]: 
         Column 1
foo              
Apples          1
Oranges         2
Puppies         3
Ducks           4
</snippet></ROW><ROW><id>18023520</id><snippet>json</snippet></ROW><ROW><id>18023520</id><snippet>content</snippet></ROW><ROW><id>18023520</id><snippet>content</snippet></ROW><ROW><id>18023520</id><snippet>some_function</snippet></ROW><ROW><id>18023520</id><snippet>import unittest

from mock import Mock, patch

import utils

class UtilsTestCase(unittest.TestCase):
    def test_some_function(self):
        user = self.user = Mock()
        user.email = 'user@example.com'
        with patch('utils.requests') as mock_requests:
            mock_requests.get.return_value = mock_response = Mock()
            mock_response.status_code = 200
            mock_response.json.return_value = {"UserId":"123456"}
            results = utils.some_function(self.user)
            self.assertEqual(results['UserId'], '123456')
</snippet></ROW><ROW><id>18023579</id><snippet>fileid</snippet></ROW><ROW><id>18023579</id><snippet>if re.search(r'мерзавец|подлец', agit_corpus.raw(fileid)):
    dict_features[fileid] = {'oskorblenie':'1'}
else:
    dict_features[fileid] = {'oskorblenie':'0'}

if re.search(r'честны*|труд*', agit_corpus.raw(fileid)):
    dict_features[fileid] = {'samoprezentacia':'1'}
else:
    dict_features[fileid] = {'samoprezentacia':'0'}
</snippet></ROW><ROW><id>18023579</id><snippet>fileid</snippet></ROW><ROW><id>18023579</id><snippet>if-else</snippet></ROW><ROW><id>18023579</id><snippet>if-else</snippet></ROW><ROW><id>18023579</id><snippet>if</snippet></ROW><ROW><id>18023579</id><snippet>else</snippet></ROW><ROW><id>18023579</id><snippet>defaultdict</snippet></ROW><ROW><id>18023579</id><snippet>dict</snippet></ROW><ROW><id>18023579</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; a = defaultdict(dict)
&gt;&gt;&gt; a['abc']
{}
&gt;&gt;&gt; a['abc']['def'] = 1
&gt;&gt;&gt; a
defaultdict(&lt;type 'dict'&gt;, {'abc': {'def': 1}})
&gt;&gt;&gt; a['abc']['fgh'] = 2
&gt;&gt;&gt; a
defaultdict(&lt;type 'dict'&gt;, {'abc': {'fgh': 2, 'def': 1}})
</snippet></ROW><ROW><id>18023579</id><snippet>dict_features = defaultdict(dict)
def regexp_features(fileids):
    for fileid in fileids:
        if re.search(r'мерзавец|подлец', agit_corpus.raw(fileid)):
            dict_features[fileid]['oskorblenie'] = '1'
        else:
            dict_features[fileid]['oskorblenie'] = '0'

        if re.search(r'честны*|труд*', agit_corpus.raw(fileid)):
            dict_features[fileid]['samoprezentacia'] = '1'
        else:
            dict_features[fileid]['samoprezentacia'] = '0'
    return dict_features
</snippet></ROW><ROW><id>18023667</id><snippet>for x in range(10):
    print x
</snippet></ROW><ROW><id>18023667</id><snippet>for x in range(10):
    for y in range(10):
        print x, y
</snippet></ROW><ROW><id>18023777</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
&gt;&gt;&gt; b = [a[i:i+5] for i in range(0, len(a), 5)]
&gt;&gt;&gt; b
[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]
&gt;&gt;&gt; b[2][3]
14
</snippet></ROW><ROW><id>18023777</id><snippet>&gt;&gt;&gt; for item in b[2]: print '{}.v'.format(item)
...
11.v
12.v
13.v
14.v
15.v
</snippet></ROW><ROW><id>18023777</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
&gt;&gt;&gt; n = len(a)
&gt;&gt;&gt; b = [a[n*i/4:n*(i+1)/4] for i in range(4)]
&gt;&gt;&gt; c, d, e, f = b
&gt;&gt;&gt; c
[1, 2, 3, 4, 5]
&gt;&gt;&gt; d
[6, 7, 8, 9, 10]
&gt;&gt;&gt; e
[11, 12, 13, 14, 15]
&gt;&gt;&gt; f
[16, 17, 18, 19, 20]
</snippet></ROW><ROW><id>18024098</id><snippet>\n</snippet></ROW><ROW><id>18024098</id><snippet>myfile.write("appended text\n")
</snippet></ROW><ROW><id>18024172</id><snippet>class Service(Base):
    __tablename__ = 'service'
    id = sql.Column(sql.String(64), primary_key=True)
    type = sql.Column(sql.String(255))
    extra = sql.Column(sql.Text())
    endpoints = sql.orm.relationship("Endpoint", backref="service")
</snippet></ROW><ROW><id>18024184</id><snippet>activities_list</snippet></ROW><ROW><id>18024184</id><snippet>abilities_m_l</snippet></ROW><ROW><id>18024184</id><snippet>def add_abilities(abilities_m_l):
    jobs_dict = OrderedDict()
    for data_dict in abilities_m_l:
        o_code = data_dict['O*NET-SOC Code']
        activity = data_dict['Element Name']
        activities_so_far = jobs_dict.setdefault(o_code, OrderedDict())
        activities_so_far[activity] = True
    return [{o_code: activities.keys()} for o_code, activities in jobs_dict.iteritems()]
</snippet></ROW><ROW><id>18024184</id><snippet>keys</snippet></ROW><ROW><id>18024184</id><snippet>values</snippet></ROW><ROW><id>18024184</id><snippet>items</snippet></ROW><ROW><id>18024184</id><snippet>    return [{o_code: list(activities.keys())} for o_code, activities in jobs_dict.items()]
</snippet></ROW><ROW><id>18024184</id><snippet>set</snippet></ROW><ROW><id>18024184</id><snippet>OrderedSet</snippet></ROW><ROW><id>18024184</id><snippet>OrderedDict</snippet></ROW><ROW><id>18024184</id><snippet>True</snippet></ROW><ROW><id>18024184</id><snippet>def add_abilities(abilities_m_l):
    jobs_dict = OrderedDict()
    for data_dict in abilities_m_l:
        o_code = data_dict['O*NET-SOC Code']
        activity = data_dict['Element Name']
        activities_so_far = jobs_dict.setdefault(o_code, set)
        activities_so_far.add(activity)
    return [{o_code: list(activities)} for o_code, activities in jobs_dict.iteritems()]
</snippet></ROW><ROW><id>18024234</id><snippet>from matplotlib.ticker import LogFormatter
l_f = LogFormatter(10, labelOnlyBase=False)
cbar = plt.colorbar(CF, ticks=lvls, format=l_f)
</snippet></ROW><ROW><id>18024448</id><snippet>import functools
from itertools import product

def the_list():
    return ["foo", "bar", "baz"]


def do_all(func):
    if hasattr(func, 'get_from'):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            return tuple(func(*args) for args in
                         product(*(lf() for lf in func.get_from)))
        return wrapper
    return func

def gets_arg_from(*list_funcs):
    def decorator(func):
        func.get_from = list_funcs
        return func
    return decorator

@gets_arg_from(the_list)
def print_func(word):
    return word

print print_func('foo')

all = do_all(print_func)
print all()
</snippet></ROW><ROW><id>18024448</id><snippet>@deco
def func(...):
    some code
</snippet></ROW><ROW><id>18024448</id><snippet>func = deco(lambda ...: some code)
</snippet></ROW><ROW><id>18024448</id><snippet>@gets_arg_from(the_list)
def print_func(word):
     return word
</snippet></ROW><ROW><id>18024448</id><snippet>word</snippet></ROW><ROW><id>18024448</id><snippet>word</snippet></ROW><ROW><id>18024448</id><snippet>get_arg_from</snippet></ROW><ROW><id>18024448</id><snippet>the_list</snippet></ROW><ROW><id>18024448</id><snippet>get_arg_from</snippet></ROW><ROW><id>18024448</id><snippet>decorator</snippet></ROW><ROW><id>18024448</id><snippet>decorator</snippet></ROW><ROW><id>18024448</id><snippet>get_arg_from</snippet></ROW><ROW><id>18024448</id><snippet>func</snippet></ROW><ROW><id>18024448</id><snippet>decorator</snippet></ROW><ROW><id>18024448</id><snippet>list_funcs</snippet></ROW><ROW><id>18024448</id><snippet>get_from</snippet></ROW><ROW><id>18024448</id><snippet>decorator</snippet></ROW><ROW><id>18024448</id><snippet>print_func</snippet></ROW><ROW><id>18024448</id><snippet>def __anonimous(word):
    return word
__decorator = gets_arg_from(the_list)
print_func = __decorator(__anonimous)
</snippet></ROW><ROW><id>18024448</id><snippet>gets_arg_from</snippet></ROW><ROW><id>18024448</id><snippet>do_all</snippet></ROW><ROW><id>18024448</id><snippet>get_from</snippet></ROW><ROW><id>18024448</id><snippet>wrapper</snippet></ROW><ROW><id>18024448</id><snippet>get_from</snippet></ROW><ROW><id>18024563</id><snippet>realVal = struct.unpack( "&lt;" + evalType, ( rawVal ) )[0].hex()</snippet></ROW><ROW><id>18024605</id><snippet>def blank_fn(*args, **kwargs):
    pass
</snippet></ROW><ROW><id>18024605</id><snippet>def perform_task(callback=None):
    print 'doing stuff'
    if callback is not None:
        callback('x', 'y', z='z')
</snippet></ROW><ROW><id>18024605</id><snippet>def do_nothing(*args, **kwargs): pass
def do_something(arg, callback=do_nothing):
    a = 1 + 2
    callback('z', z='z')
def do_something_else(arg, callback=None):
    a = 1 + 2
    if callback is not None:
        callback('z', z='z')

%timeit do_something(3)
1000000 loops, best of 3: 644 ns per loop

%timeit do_something_else(3)
1000000 loops, best of 3: 292 ns per loop
</snippet></ROW><ROW><id>18024692</id><snippet>subs</snippet></ROW><ROW><id>18024692</id><snippet>&gt;&gt;&gt; print simplify(u0).subs({pi*j*(phi + t)/(2*phi): bj, j*pi/(2*phi): cj})
a2*(pi*j*vt*cos(bj) + 2*pi*j*w*cos(bj) + 2*phi*v*sin(bj))/(2*phi)
</snippet></ROW><ROW><id>18024692</id><snippet>simplify</snippet></ROW><ROW><id>18024692</id><snippet>pi*j*(phi + t)/(2*phi)</snippet></ROW><ROW><id>18024692</id><snippet>pi*j/2 + pi*j*t/(2*phi)</snippet></ROW><ROW><id>18024692</id><snippet>replace</snippet></ROW><ROW><id>18024701</id><snippet>client.service.getData(reqparam1="req_Param1", reqparam2="req_Param2", optionparam4="option_Param4")
</snippet></ROW><ROW><id>18024845</id><snippet>QtCore.QObject.__init__(self)</snippet></ROW><ROW><id>18024845</id><snippet>__init__</snippet></ROW><ROW><id>18024890</id><snippet>feedparser.parse</snippet></ROW><ROW><id>18024890</id><snippet>feedparser.parse('http://forums.wesnoth.org/feed.php?t=39175')</snippet></ROW><ROW><id>18024890</id><snippet>import logging

...

c = feedparser.parse('http://forums.wesnoth.org/feed.php?t=39175')
if not len(c.entries):
    # You can use your own logger instance instead
    # Log any information you need to identify the real problem
    logging.error("No entries found: %s", str(c))
    continue
</snippet></ROW><ROW><id>18024890</id><snippet>feedparser.parse</snippet></ROW><ROW><id>18024890</id><snippet>continue</snippet></ROW><ROW><id>18024890</id><snippet>return</snippet></ROW><ROW><id>18024897</id><snippet>src.execute("call qcmdexc parm('dspusrprf usrprf(*all) output(*outfile) outfile(qgpl/audusrprf)', 0000000061.00000)")
</snippet></ROW><ROW><id>18024897</id><snippet>parm = "dspusrprf usrprf(*all) output(*outfile) outfile(qgpl/audusrprf)"
cmd = "call qcmdexc parm('{0:s}', {1:016.5f})".format(parm, len(parm))
src.execute(cmd)
</snippet></ROW><ROW><id>18025061</id><snippet>outputs</snippet></ROW><ROW><id>18025061</id><snippet>transcode.create_job(pipelineId, transInput, outputs=output)
</snippet></ROW><ROW><id>18025179</id><snippet>In [19]: df = DataFrame(randn(10,2),columns=list('ab'))

In [20]: df
Out[20]: 
          a         b
0  0.958465  0.679193
1 -0.769077  0.497436
2  0.598059  0.457555
3  0.290926 -1.617927
4 -0.248910 -0.947835
5 -1.352096 -0.568631
6  0.009125  0.711511
7 -0.993082 -1.440405
8 -0.593704  0.352468
9  0.523332 -1.544849
</snippet></ROW><ROW><id>18025179</id><snippet>'a + b'</snippet></ROW><ROW><id>18025179</id><snippet>In [21]: formulas = { 'c' : 'df.a + df.b' }

In [22]: def update(df,formulas):
               for k, v in formulas.items():
                  df[k] = pd.eval(v)


In [23]: update(df,formulas)

In [24]: df
Out[24]: 
          a         b         c
0  0.958465  0.679193  1.637658
1 -0.769077  0.497436 -0.271642
2  0.598059  0.457555  1.055614
3  0.290926 -1.617927 -1.327001
4 -0.248910 -0.947835 -1.196745
5 -1.352096 -0.568631 -1.920726
6  0.009125  0.711511  0.720636
7 -0.993082 -1.440405 -2.433487
8 -0.593704  0.352468 -0.241236
9  0.523332 -1.544849 -1.021517
</snippet></ROW><ROW><id>18025431</id><snippet>line.replace('xx1001.', '')
</snippet></ROW><ROW><id>18026125</id><snippet>gc.collect()</snippet></ROW><ROW><id>18026125</id><snippet>int</snippet></ROW><ROW><id>18026125</id><snippet>int</snippet></ROW><ROW><id>18026125</id><snippet>float</snippet></ROW><ROW><id>18026125</id><snippet>int</snippet></ROW><ROW><id>18026125</id><snippet>float</snippet></ROW><ROW><id>18026125</id><snippet>malloc()</snippet></ROW><ROW><id>18026125</id><snippet>mallocs()</snippet></ROW><ROW><id>18026125</id><snippet>subprocess</snippet></ROW><ROW><id>18026183</id><snippet>links</snippet></ROW><ROW><id>18026183</id><snippet>parents, children = zip(*links)
root_nodes = {x for x in parents if x not in children}
</snippet></ROW><ROW><id>18026183</id><snippet>import json

links = [("Tom","Dick"),("Dick","Harry"),("Tom","Larry"),("Bob","Leroy"),("Bob","Earl")]
parents, children = zip(*links)
root_nodes = {x for x in parents if x not in children}
for node in root_nodes:
    links.append(('Root', node))

def get_nodes(node):
    d = {}
    d['name'] = node
    children = get_children(node)
    if children:
        d['children'] = [get_nodes(child) for child in children]
    return d

def get_children(node):
    return [x[1] for x in links if x[0] == node]

tree = get_nodes('Root')
print json.dumps(tree, indent=4)
</snippet></ROW><ROW><id>18026389</id><snippet>or</snippet></ROW><ROW><id>18026389</id><snippet>print(a or b)
</snippet></ROW><ROW><id>18026389</id><snippet>0</snippet></ROW><ROW><id>18026389</id><snippet>None</snippet></ROW><ROW><id>18026389</id><snippet>&gt;&gt;&gt; print(1 or 2)
1
&gt;&gt;&gt; print(0 or 2)
2
&gt;&gt;&gt; print(None or 2)
2
</snippet></ROW><ROW><id>18026389</id><snippet>COALESCE()</snippet></ROW><ROW><id>18026389</id><snippet>def coalesce(*args):
    for i in args:
        if i is not None: return i

    return None
</snippet></ROW><ROW><id>18026389</id><snippet>0</snippet></ROW><ROW><id>18026389</id><snippet>&gt;&gt;&gt; print coalesce(0, 1, 2)
0
&gt;&gt;&gt; print coalesce(None, 1, 2)
1
&gt;&gt;&gt; print coalesce(None, None, 2)
2
&gt;&gt;&gt; print coalesce('', 'foo')

&gt;&gt;&gt; print coalesce(None, 'foo')
foo
</snippet></ROW><ROW><id>18026416</id><snippet>htmlTemplate</snippet></ROW><ROW><id>18026416</id><snippet># Can be used to add default HTML code (e.g. default header section with CSS).
htmlTemplate = """
&lt;html&gt;
&lt;head&gt;
&lt;link rel="stylesheet" type="text/css" charset="utf-8" media="screen" href="http://paste.ubuntu.com/static/pastebin.css"&gt;
&lt;/head&gt;
&lt;body&gt;
%s
&lt;/body&gt;
&lt;/html&gt;
"""
</snippet></ROW><ROW><id>18026647</id><snippet>r''</snippet></ROW><ROW><id>18026647</id><snippet>(r'/user/(\w+)/messages/?',messages)
</snippet></ROW><ROW><id>18026647</id><snippet>"/user/(\w+)/messages/?"</snippet></ROW><ROW><id>18026647</id><snippet>'/user/(\\w+)/messages/?'</snippet></ROW><ROW><id>18026872</id><snippet>foo = {
    '.0': [
        {},
        {},
        {},
        {}
    ],
    '.1':[
        {},
        {},
        {
            '.0':[
                {},
                {},
                {}
            ], # &lt;----- comma needed here
            '.1':[
                {},
                {},
                {}
            ]
        }
    ]
}
</snippet></ROW><ROW><id>18026902</id><snippet>$ ../bin/zopeskel plone_basic bdr.theme

plone_basic: A package for Plone add-ons

This template creates a package for a basic Plone add-on project with
a single namespace (like Products.PloneFormGen).

To create a Plone project with a name like 'collective.geo.bundle'
(2 dots, a 'nested namespace'), use the 'plone_nested' template.

This template supports local commands.  These commands allow you to
add Plone features to your new package.

If you are trying to create a Plone *site* then the best place to
start is with one of the Plone installers.  If you want to build
your own Plone buildout, use one of the plone'N'_buildout templates


If at any point, you need additional help for a question, you can enter
'?' and press RETURN.

Expert Mode? (What question mode would you like? (easy/expert/all)?) ['easy']: easy
Version (Version number for project) ['1.0']: 1.0
Description (One-line description of the project) ['']: 
Register Profile (Should this package register a GS Profile) [False]: yes
Robot Tests (Should the default robot test be included) [False]: 
Creating directory ./bdr.theme
Replace 1019 bytes with 1450 bytes (2/43 lines changed; 10 lines added)
Replace 42 bytes with 119 bytes (1/1 lines changed; 4 lines added)
------------------------------------------------------------------------------
The project you just created has local commands. These can be used from within
the product.

usage: paster COMMAND

Commands:
  add  Allows the addition of further templates to an existing package

For more information: paster help COMMAND
------------------------------------------------------------------------------

**************************************************************************
**  Your new package supports local commands.  To access them, change
**  directories into the 'src' directory inside your new package.
**  From there, you will be able to run the command `paster add
**  --list` to see the local commands available for this package.
**************************************************************************
</snippet></ROW><ROW><id>18026924</id><snippet>np.indices</snippet></ROW><ROW><id>18026924</id><snippet>a = np.zeros((5,10))
i,j = np.indices(a.shape)
</snippet></ROW><ROW><id>18026924</id><snippet>i,j</snippet></ROW><ROW><id>18026924</id><snippet>a[i==j] = 1.
a[i==j-1] = 2.
a[i==j-2] = 3.
</snippet></ROW><ROW><id>18026924</id><snippet>array([[ 1.,  2.,  3.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  1.,  2.,  3.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  2.,  3.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  1.,  2.,  3.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  1.,  2.,  3.,  0.,  0.,  0.]])
</snippet></ROW><ROW><id>18026968</id><snippet>snapshots = []
for i in range(20):
   b = wx.EmptyBitmap(w, h)
   m.SelectObject(b)
   m.Blit(0, 0, w, h, s, 0, 0)
   m.SelectObject(wx.NullBitmap)
   snapshots.append(b)
for snapshot in snapshots:
   snapshot.SaveFile('{0:05d}.png'.format(i), wx.BITMAP_TYPE_PNG)
</snippet></ROW><ROW><id>18026968</id><snippet>malloc</snippet></ROW><ROW><id>18026968</id><snippet>with concurrent.futures.ThreadPoolExecutor() as executor:
    for i in range(20):
       b = wx.EmptyBitmap(w, h)
       m.SelectObject(b)
       m.Blit(0, 0, w, h, s, 0, 0)
       m.SelectObject(wx.NullBitmap)
       executor.submit(b.SaveFile, '{0:05d}.png'.format(i), wx.BITMAP_TYPE_PNG)
</snippet></ROW><ROW><id>18026968</id><snippet>wx</snippet></ROW><ROW><id>18026968</id><snippet>wx.Timer</snippet></ROW><ROW><id>18027106</id><snippet>&gt;python setup.py build &amp;&amp; python setup.py install
</snippet></ROW><ROW><id>18027287</id><snippet>*</snippet></ROW><ROW><id>18027287</id><snippet>*</snippet></ROW><ROW><id>18027287</id><snippet>*a*b</snippet></ROW><ROW><id>18027287</id><snippet>a</snippet></ROW><ROW><id>18027287</id><snippet>b</snippet></ROW><ROW><id>18027287</id><snippet>&gt;&gt;&gt; a = [1, 2, 4]
&gt;&gt;&gt; b = 'foo'
&gt;&gt;&gt; from itertools import chain
def func(*x):
    print x
...     
&gt;&gt;&gt; func(*chain(a,b)) #chain will work for both iterators and iterables
(1, 2, 4, 'f', 'o', 'o')
</snippet></ROW><ROW><id>18027287</id><snippet>a</snippet></ROW><ROW><id>18027287</id><snippet>b</snippet></ROW><ROW><id>18027287</id><snippet>&gt;&gt;&gt; a = [1, 2, 4]
&gt;&gt;&gt; b = [0,1]
&gt;&gt;&gt; func(*(a + b))
(1, 2, 4, 0, 1)
</snippet></ROW><ROW><id>18027516</id><snippet>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGG
</snippet></ROW><ROW><id>18027516</id><snippet>@DH1DQQN1:269:C1UKCACXX:1:1107:20386:6577 1:N:0:TTAGGC
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC
+
CCCFFFFFHGHHHJIJHFDDDB173@8815BDDB###############
@DH1DQQN1:269:C1UKCACXX:1:1114:5718:53821 1:N:0:TTAGGC
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+
CCCFFFFFHGHHHJIJHFDDDB173@8815BDDB###############
@DH1DQQN1:269:C1UKCACXX:1:1209:10703:35361 1:N:0:TTAGGC
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+
@@@FFFFFHGHHHGIJHFDDDDDBDD69@6B-707537BDDDB75@@85
@DH1DQQN1:269:C1UKCACXX:1:1210:18926:75163 1:N:0:TTAGGC
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG
+
@CCFFFFFHHHHHJJJHFDDD@77BDDDDB077007@B###########
</snippet></ROW><ROW><id>18027516</id><snippet>from Bio import SeqIO

with open("fasta") as fh:
    fasta = fh.read().splitlines()

seen = set()

for record in SeqIO.parse(open('fastq'), 'fastq'):
    seq = str(record.seq)
    if seq in fasta and seq not in seen:
        seen.add(seq)
        print record.format('fastq')
</snippet></ROW><ROW><id>18027516</id><snippet>from Bio import SeqIO
import sys

with open("fasta") as fh:
    fasta = fh.read().splitlines()

seen = set()
records = {}

for record in SeqIO.parse(open('fastq'), 'fastq'):
    seq = str(record.seq)
    if seq in fasta and seq not in seen:
        seen.add(seq)
        records[fasta.index(seq)] = record

for record in sorted(records):
    sys.stdout.write(records[record].format('fastq'))
</snippet></ROW><ROW><id>18027516</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>18027516</id><snippet>print</snippet></ROW><ROW><id>18027551</id><snippet>rolling_apply</snippet></ROW><ROW><id>18027551</id><snippet>def window(length, size=2, start=0):
    while start + size &lt;= length:
        yield slice(start, start + size)
        start += 1
</snippet></ROW><ROW><id>18027551</id><snippet>In [144]: from pandas import DataFrame
     ...: import numpy as np
     ...: 
     ...: df = DataFrame(np.arange(10).reshape(2,5).T, columns=['a','b'])
     ...: 
     ...: df.iloc[0,1] = -1       #still perfect with ranked correlation, but not with pearson's r
     ...: 
     ...: for w in window(len(df), size=3):
     ...:     df_win = df.iloc[w,:]
     ...:     spearman = df_win['a'].rank().corr(df_win['b'].rank())
     ...:     pearson  = df_win['a'].corr(df_win['b'])
     ...:     print w.start, spearman, pearson
     ...:     
0 1.0 0.917662935482
1 1.0 1.0
2 1.0 1.0
</snippet></ROW><ROW><id>18027610</id><snippet>import zmq, time
from datetime import datetime

context = zmq.Context()

#create this node as publisher
socket = context.socket(zmq.PUB)
socket.bind("tcp://*:25647")


for i in range(300):
   message = ("%d, %d" % (1, i))
   print str(datetime.now().time()) + "&gt; sending: " + message
   socket.send(message)
   time.sleep(1)
</snippet></ROW><ROW><id>18027610</id><snippet>import zmq, time
from datetime import datetime

context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect("tcp://localhost:25647")

#filter message for particular subscriber ('1')
socket.setsockopt(zmq.SUBSCRIBE, '1')

while True:
    message = socket.recv()
    print(str(datetime.now().time()) + "&gt; received: " + str(message))
</snippet></ROW><ROW><id>18027662</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>18027662</id><snippet>import ast
text = "(1, u'text A', u'text-B', u'text_C')"
tup = ast.literal_eval(text)
</snippet></ROW><ROW><id>18027662</id><snippet>joined = ', '.join(el for el in tup if isinstance(el, basestring))
# text A, text-B, text_C
</snippet></ROW><ROW><id>18027662</id><snippet>tup[1:]</snippet></ROW><ROW><id>18027662</id><snippet>import re
string_vals = re.findall("'(.*?)'", text)
</snippet></ROW><ROW><id>18027662</id><snippet>'</snippet></ROW><ROW><id>18027662</id><snippet>'</snippet></ROW><ROW><id>18027662</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>18027776</id><snippet>df = readObs(indir, filename)
df.set_index(['%_GPST', 'satID'])
</snippet></ROW><ROW><id>18027776</id><snippet>def readObs(dir, file):
    df = pd.DataFrame()
    #Grab header
    header = ''
    with open(dir + file) as handler:
        for i, line in enumerate(handler):
            header += line
            if 'END OF HEADER' in line:
                break
    #Grab Data
    with open(dir + file) as handler:
        for i, line in enumerate(handler):
            #Check for a Timestamp lable
            if '&gt; ' in line:
                #Grab Timestamp
                links = line.split()
                index = datetime.strptime(' '.join(links[1:7]), '%Y %m %d %H %M %S.%f0')
                #Identify number of satellites
                satNum = int(links[8])
                #For every sat
                for j in range(satNum):
                    #just save the data as a string for now
                    satData = handler.readline()
                    #Fix the names
                    satdId = satData.replace("G ", "G0").split()[0]
                    #Make a dummy dataframe
                    dff = pd.DataFrame([[index,satdId,satData]], columns=['%_GPST','satID','satData'])
                    #Tack it on the end
                    df = df.append(dff)
    return df, header
</snippet></ROW><ROW><id>18028027</id><snippet>subprocess.call</snippet></ROW><ROW><id>18028027</id><snippet>os.spawn</snippet></ROW><ROW><id>18028273</id><snippet>def _combine(self, cr, uid, ids, field_name, args, context=None):
    values = {}
    for id in ids:
        rec = self.browse(cr, uid, [id], context=context)[0]
        values[id] = {}
        values[id] = '%s %s %s' % (rec.field1, rec.field2, rec.field3)
    return values

_columns = {
    ...
    fields.function(_combine, string='three fields in one!', type='char',
                    arg=('field1','field2','field3'), method=True),
</snippet></ROW><ROW><id>18028273</id><snippet>_combine</snippet></ROW><ROW><id>18028273</id><snippet>fields.function</snippet></ROW><ROW><id>18028273</id><snippet>_columns</snippet></ROW><ROW><id>18028337</id><snippet>self.children</snippet></ROW><ROW><id>18028337</id><snippet>node.children</snippet></ROW><ROW><id>18028337</id><snippet>class Node(object):
    def __init__(self, id, *children):
        self.children = []
</snippet></ROW><ROW><id>18028337</id><snippet>__str__</snippet></ROW><ROW><id>18028337</id><snippet>__repr__</snippet></ROW><ROW><id>18028400</id><snippet>def open_file(self, treeview, path, column):
    model = treeview.get_model()
    iter = model.get_iter(path)
    filename = os.path.join(self.dirname, model.get_value(iter, 0))
    filestat = os.stat(filename)
    # print filename
    if stat.S_ISDIR(filestat.st_mode):
        new_model = self.make_list(filename)
        treeview.set_model(new_model)
    else:
        print filename + "is a file!!"
    return
</snippet></ROW><ROW><id>18028521</id><snippet>print</snippet></ROW><ROW><id>18028521</id><snippet>import sys

with open("a.txt") as f:
    for line in f:
        sys.stdout.write(line)
</snippet></ROW><ROW><id>18028521</id><snippet>print(…, end='')</snippet></ROW><ROW><id>18028535</id><snippet>atapi.StringField('Url',
                   mode="rw",
                   widget=atapi.ComputedWidget(label="Url",
                                            description="Url set after upload",
                                            visible = { 'edit' :'visible', 
                                                        'view' : 'visible' },
                                            ),
                  ), 
</snippet></ROW><ROW><id>18028537</id><snippet>from Tkinter import Tk, Text, DISABLED
r = Tk()
Text(r, state=DISABLED).grid()
r.mainloop()
</snippet></ROW><ROW><id>18028537</id><snippet>from Tkinter import Tk, Text, DISABLED
r = Tk()
t = Text(r)
t.grid()
t.insert(0.0, "BLAH!")
# Just make sure you disable it AFTER you put the text in
t["state"] = DISABLED
r.mainloop()
</snippet></ROW><ROW><id>18028537</id><snippet># Note you have to have NORMAL imported
t["state"] = NORMAL
</snippet></ROW><ROW><id>18028728</id><snippet>$ java -cp /var/tmp/Audio.jar Main.Boot | tee /var/tmp/log.log | python -u /var/tmp/consumer.py &amp;
$ tail -f /var/tmp/log.log
</snippet></ROW><ROW><id>18028877</id><snippet>%apply (char *STRING, int LENGTH) {(char *xstr, int xL),(char *ystr, int yL)}
</snippet></ROW><ROW><id>18028960</id><snippet>execfile</snippet></ROW><ROW><id>18028960</id><snippet>PATH</snippet></ROW><ROW><id>18028960</id><snippet>execfile</snippet></ROW><ROW><id>18028960</id><snippet>PATH</snippet></ROW><ROW><id>18028960</id><snippet>subprocess</snippet></ROW><ROW><id>18028960</id><snippet>&gt;&gt;&gt; from subprocess import check_call # you only have to do this once
&gt;&gt;&gt; check_call(['train.py'])
</snippet></ROW><ROW><id>18028960</id><snippet>C:\&gt; train.py
</snippet></ROW><ROW><id>18029091</id><snippet>class MyForm(ModelForm):
    class Meta:
        model = MyClass
        fields = ('my_field')
        widgets = {
            'my_field': TextInput(attrs={'class': 'mycssclass'}),
        }
</snippet></ROW><ROW><id>18029091</id><snippet>.mycssclass {
    color: red;
}
</snippet></ROW><ROW><id>18029091</id><snippet>inlineformset_factory</snippet></ROW><ROW><id>18029091</id><snippet>widgets</snippet></ROW><ROW><id>18029091</id><snippet>widgets</snippet></ROW><ROW><id>18029091</id><snippet>form</snippet></ROW><ROW><id>18029091</id><snippet>MyClassFormSet = inlineformset_factory(User, MyClass, form=MyForm, can_delete=False, extra=5)
</snippet></ROW><ROW><id>18029112</id><snippet>from dateutil import parser

def parse(string, agnostic=True, **kwargs):
    if agnostic or parser.parse(string, **kwargs) == parser.parse(string, yearfirst=True, **kwargs) == parser.parse(string, dayfirst=True, **kwargs):
        return parser.parse(string, **kwargs)
    else:
        raise ValueError("The date was ambiguous: %s" % string)
</snippet></ROW><ROW><id>18029127</id><snippet>self.slider = wx.Slider(panel, value = 0, minValue = 5, maxValue = 15, pos=(10,10), size=(381,-1), style= wx.SL_AUTOTICKS | wx.SL_HORIZONTAL | wx.SL_LABELS)
    self.Bind(wx.EVT_SLIDER, self.get_mark, self.slider)

def get_mark(self, event):
    if self.slider.GetValue() &gt;= 8:
        self.slider.SetValue(8)
</snippet></ROW><ROW><id>18029781</id><snippet># -*- coding: utf-8 -*-

import mechanize as mc
from BeautifulSoup import BeautifulSoup as bs

br = mc.Browser()
br.open(url='http://www.marseille-port.fr/fr/Page/Escale_consultation/13286')
html = r.read()
test = open('test.html', 'wb')
print &gt;&gt; test, "%s" % (bs(html).prettify())  
test.close()
</snippet></ROW><ROW><id>18029781</id><snippet>test.html</snippet></ROW><ROW><id>18029899</id><snippet>[i[0] for i,v in np.ndenumerate(ar) if v == [5]]
=&gt; [0, 3, 4]
</snippet></ROW><ROW><id>18030254</id><snippet>&gt;&gt;&gt; a = [6, 7, 8, 9, 10]
&gt;&gt;&gt; [0, 0] + a[:3]
[0, 0, 6, 7, 8]
</snippet></ROW><ROW><id>18030254</id><snippet>n</snippet></ROW><ROW><id>18030254</id><snippet>&gt;&gt;&gt; [0]*n + a[:len(a)-n]
</snippet></ROW><ROW><id>18030254</id><snippet>n=6</snippet></ROW><ROW><id>18030390</id><snippet>ord()</snippet></ROW><ROW><id>18030390</id><snippet>'j'</snippet></ROW><ROW><id>18030390</id><snippet>'i'</snippet></ROW><ROW><id>18030390</id><snippet>new_strs = []
for character in phrase:
    x = ord(character)
    x = x + shift
    new_strs.append(chr(x))   #store the new shifted character to the list
    #use this if you want z to shift to 'a'
    #new_strs.append(chr(x if 97 &lt;= x &lt;= 122 else 96 + x % 122))
print "".join(new_strs)       #print the new string
</snippet></ROW><ROW><id>18030390</id><snippet>$ python so.py
Enter text to Cipher: hi
Please enter shift: 1
ij
</snippet></ROW><ROW><id>18030435</id><snippet>log = True</snippet></ROW><ROW><id>18030435</id><snippet>ax.bar(...</snippet></ROW><ROW><id>18030435</id><snippet>log=True</snippet></ROW><ROW><id>18030435</id><snippet>x_values = np.arange(1,8, 1)
y_values = np.exp(x_values)

log_y_values = np.log(y_values)

fig = plt.figure()
ax = fig.add_subplot(111)
ax.bar(x_values,log_y_values) #Insert log=True argument to reproduce error
</snippet></ROW><ROW><id>18030435</id><snippet>log(y)</snippet></ROW><ROW><id>18030467</id><snippet>[1]</snippet></ROW><ROW><id>18030467</id><snippet>(1,)</snippet></ROW><ROW><id>18030467</id><snippet>a == [1]
</snippet></ROW><ROW><id>18030467</id><snippet>a == numpy.array([1, 1, 1, 1, 1])
</snippet></ROW><ROW><id>18030467</id><snippet>False</snippet></ROW><ROW><id>18030470</id><snippet>article_search</snippet></ROW><ROW><id>18030470</id><snippet>self</snippet></ROW><ROW><id>18030470</id><snippet>self.article_search(go_to)
</snippet></ROW><ROW><id>18030526</id><snippet>import BeautifulSoup

doc = '''&lt;html&gt;&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p id="firstpara" align="center"&gt;This is &lt;i&gt;paragraph&lt;/i&gt; &lt;a onclick=""&gt;one&lt;/a&gt;.&lt;p id="secondpara" align="blah"&gt;This is &lt;i&gt;paragraph&lt;/i&gt; &lt;b&gt;two&lt;/b&gt;.&lt;/html&gt;'''
soup = BeautifulSoup.BeautifulSoup(doc)

for tag in soup.recursiveChildGenerator():
    if isinstance(tag,BeautifulSoup.Tag) and tag.name not in ('a'):
        print(tag.string)
    elif isinstance(tag,BeautifulSoup.Tag) and tag.name in ('a'):
        print(tag)
</snippet></ROW><ROW><id>18030622</id><snippet>ShellExecute</snippet></ROW><ROW><id>18030622</id><snippet>subprocess.call()</snippet></ROW><ROW><id>18030622</id><snippet>ShellExecuteEx</snippet></ROW><ROW><id>18030622</id><snippet>import win32com.shell.shell as shell
param = '/d:"%s"' % printer
shell.ShellExecuteEx(fmask = win32com.shell.shellcon.SEE_MASK_NOASYNC, lpVerb='print', lpFile=pfile, lpParameters=param)
</snippet></ROW><ROW><id>18030622</id><snippet>import win32com.shell.shell as shell
import win32event
#fMask = SEE_MASK_NOASYNC(0x00000100) = 256 + SEE_MASK_NOCLOSEPROCESS(0x00000040) = 64
dict = shell.ShellExecuteEx(fMask = 256 + 64, lpFile='Notepad.exe', lpParameters='Notes.txt')
hh = dict['hProcess']
print hh
ret = win32event.WaitForSingleObject(hh, -1)
print ret
</snippet></ROW><ROW><id>18030818</id><snippet>weight</snippet></ROW><ROW><id>18030818</id><snippet>weights = g.es["weight"]
line_graph_edges = []
for v in xrange(g.vcount()):
    incoming = g.incident(v, mode="in")
    outgoing = g.incident(v, mode="out")
    line_graph_edges.extend((e1, e2) for e1 in incoming for e2 in outgoing
        if weights[e1] &lt; weights[e2])
line_graph = Graph(g.ecount(), line_graph_edges)
</snippet></ROW><ROW><id>18030856</id><snippet>&gt;&gt;&gt; [x for d in dict1 for x in dict1[d] if d.startswith("s")]
[1, 2, 3, 4, 5, 6, 10, 11]
</snippet></ROW><ROW><id>18030856</id><snippet>&gt;&gt;&gt; regex = re.compile("^s")
&gt;&gt;&gt; [x for d in dict1 for x in dict1[d] if regex.search(d)]
[1, 2, 3, 4, 5, 6, 10, 11]
</snippet></ROW><ROW><id>18030856</id><snippet>result = []
for d in dict1:
    for x in dict1[d]:
        if regex.search(d):
            result.append(x)
</snippet></ROW><ROW><id>18030856</id><snippet>result = []
for d in dict1:
    if regex.search(d):
       result.extend(dict1[d])
</snippet></ROW><ROW><id>18031024</id><snippet>def remove_module_docstring(app, what, name, obj, options, lines):
    if what == "module" and name == "yourmodule":
        del lines[:]

def setup(app):
    app.connect("autodoc-process-docstring", remove_module_docstring)
</snippet></ROW><ROW><id>18031024</id><snippet>yourmodule</snippet></ROW><ROW><id>18031401</id><snippet>subprocess.Popen([r'path_to_file'])</snippet></ROW><ROW><id>18031401</id><snippet>subprocess.Popen(['excel', r'path_to_file'])
</snippet></ROW><ROW><id>18031651</id><snippet>for character in phrase:
    x = ord(character)

    if character == ' ':
        result += ' '
    else:
        result += chr(x + shift)
</snippet></ROW><ROW><id>18031651</id><snippet>chr(32 + (x + shift) % (127 - 32))
</snippet></ROW><ROW><id>18032377</id><snippet>Quit</snippet></ROW><ROW><id>18032377</id><snippet>itunes.Quit()
</snippet></ROW><ROW><id>18032378</id><snippet>self.horizontalSlider.value()</snippet></ROW><ROW><id>18032378</id><snippet>value</snippet></ROW><ROW><id>18032378</id><snippet>QHorizontalSlider.valueChanged</snippet></ROW><ROW><id>18032378</id><snippet>changeText</snippet></ROW><ROW><id>18032378</id><snippet>def changeText(self, value):
    self.z = value
    self.lineEdit.setText(str(self.z))
</snippet></ROW><ROW><id>18032638</id><snippet>np.recarray</snippet></ROW><ROW><id>18032638</id><snippet>a = np.recarray(4,dtype=[('col1',int),('col2','|S10'),('col3',int)])
a['col1'] = range(4)
a['col2'] = ['a', 'b', 'c', 'd']
a['col3'] = range(11,15)

print a
# [(0, 'a', 11) (1, 'b', 12) (2, 'c', 13) (3, 'd', 14)]
</snippet></ROW><ROW><id>18032638</id><snippet>2D</snippet></ROW><ROW><id>18032638</id><snippet>dtype=object</snippet></ROW><ROW><id>18032638</id><snippet>a = np.array([[0,1,2,3],['a','b','c','d'],[11,12,13,14]], dtype=object)

print a
#[[0 1 2 3]
# ['a' 'b' 'c' 'd']
# [11 12 13 14]]
</snippet></ROW><ROW><id>18032972</id><snippet>GET http://server4.cyberpods.net/azenv.php HTTP/1.1
</snippet></ROW><ROW><id>18032972</id><snippet>/azenv.php</snippet></ROW><ROW><id>18032992</id><snippet>len(data)</snippet></ROW><ROW><id>18032992</id><snippet>while (i &lt; len(data)):
</snippet></ROW><ROW><id>18033216</id><snippet>raw_input</snippet></ROW><ROW><id>18033232</id><snippet>active_stat</snippet></ROW><ROW><id>18033232</id><snippet>get</snippet></ROW><ROW><id>18033232</id><snippet>root.update()</snippet></ROW><ROW><id>18033232</id><snippet>import time
import tkinter as Tk

def _start():
    for outer in range(5):
        if active_stat.get():
            time.sleep(1) # some code in the real app
        else:
            active_stat.set(True)
            break
        for inner in range(5):
            if active_stat.get():
                #counterstr.set("%02d-%02d" % (outer,inner)) #does not update till the end of loop
                textbox.insert(Tk.END, "%02d-%02d\n" % (outer,inner)) #does not show till the end of loop
                print ("{}-{}".format(outer,inner))
                time.sleep(1) #some code in the real app
            else:
                active_stat.set(True)
                break
            root.update()

def _stop():
    active_stat.set(False)


root = Tk.Tk()

active_stat = Tk.BooleanVar(root)
active_stat.set(True)

#counterstr=Tk.StringVar() 
#Tk.Label(root, textvariable=counterstr).pack(side=Tk.TOP)
textbox=Tk.Text(root) 
textbox.pack(side=Tk.TOP) 
Tk.Button(root, text='Start', command=_start).pack(side=Tk.LEFT)
Tk.Button(root, text='Stop', command=_stop).pack(side=Tk.LEFT)
Tk.Button(root, text='Quit', command=root.quit).pack(side=Tk.LEFT)
root.mainloop()
</snippet></ROW><ROW><id>18033331</id><snippet>GL_COlOR_BUFFER_BIT</snippet></ROW><ROW><id>18033331</id><snippet>GL_CO</snippet></ROW><ROW><id>18033331</id><snippet>OR_BUFFER_BIT</snippet></ROW><ROW><id>18033471</id><snippet>__init__</snippet></ROW><ROW><id>18033471</id><snippet>form = MyForm(class_name="myCssClass")</snippet></ROW><ROW><id>18033687</id><snippet>from bs4 import BeautifulSoup
</snippet></ROW><ROW><id>18033720</id><snippet>apscheduler</snippet></ROW><ROW><id>18033720</id><snippet>WARNING</snippet></ROW><ROW><id>18033720</id><snippet>apscheduler</snippet></ROW><ROW><id>18033720</id><snippet>logging.getLogger('apscheduler').setLevel(logging.WARNING)
</snippet></ROW><ROW><id>18033720</id><snippet>WARNING</snippet></ROW><ROW><id>18033720</id><snippet>apscheduler</snippet></ROW><ROW><id>18033720</id><snippet>aplogger = logging.getLogger('apscheduler')
aplogger.propagate = False
aplogger.setLevel(logging.WARNING)    # or whatever
aphandler = logging.FileHandler(...)  # as per what you want
aplogger.addHandler(aphandler)
</snippet></ROW><ROW><id>18033720</id><snippet>FileHandler</snippet></ROW><ROW><id>18033733</id><snippet>{key: sum(value.itervalues()) for key, value in dict_features.iteritems()}
</snippet></ROW><ROW><id>18033733</id><snippet>iter</snippet></ROW><ROW><id>18033733</id><snippet>.values()</snippet></ROW><ROW><id>18033733</id><snippet>.items()</snippet></ROW><ROW><id>18033733</id><snippet>&gt;&gt;&gt; dict_features =  {'agitacia/6.txt': {'samoprezentacia': 0, 'oskorblenie': 1}, 'agitacia/21.txt': {'samoprezentacia': 0, 'oskorblenie': 0}}
&gt;&gt;&gt; {key: sum(value.itervalues()) for key, value in dict_features.iteritems()}
{'agitacia/21.txt': 0, 'agitacia/6.txt': 1}
</snippet></ROW><ROW><id>18033824</id><snippet>&gt;&gt;&gt;execfile('clean_index.py')
</snippet></ROW><ROW><id>18033824</id><snippet>$ python clean_index.py
</snippet></ROW><ROW><id>18033824</id><snippet>python</snippet></ROW><ROW><id>18033824</id><snippet>import</snippet></ROW><ROW><id>18033824</id><snippet>&gt;&gt;&gt;import fibo
&gt;&gt;&gt;fibo.fib(1000)
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
</snippet></ROW><ROW><id>18033824</id><snippet>fibo.py</snippet></ROW><ROW><id>18033865</id><snippet>htmllib.HTMLParser</snippet></ROW><ROW><id>18033865</id><snippet>formatter</snippet></ROW><ROW><id>18033865</id><snippet>&lt;H1&gt;</snippet></ROW><ROW><id>18033865</id><snippet>formatter.end_paragraph()</snippet></ROW><ROW><id>18033865</id><snippet>formatter.push_font()</snippet></ROW><ROW><id>18033911</id><snippet>print</snippet></ROW><ROW><id>18033911</id><snippet>print os.getcwd()
</snippet></ROW><ROW><id>18033921</id><snippet>anchorlist</snippet></ROW><ROW><id>18033921</id><snippet>htmllib.HTMLParser</snippet></ROW><ROW><id>18033921</id><snippet>html.parser</snippet></ROW><ROW><id>18033921</id><snippet>HTMLParser</snippet></ROW><ROW><id>18033921</id><snippet>anchorlist</snippet></ROW><ROW><id>18033921</id><snippet>a</snippet></ROW><ROW><id>18033921</id><snippet>href</snippet></ROW><ROW><id>18033921</id><snippet>from html.parser import HTMLParser


class MyHTMLParser(HTMLParser):
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.archorlist = []

    def handle_starttag(self, tag, attrs):
        if tag == 'a' and 'href' in attrs:
            self.anchorlist.append(attrs['href'])
</snippet></ROW><ROW><id>18034328</id><snippet>print l,</snippet></ROW><ROW><id>18034409</id><snippet>unicode</snippet></ROW><ROW><id>18034409</id><snippet>str</snippet></ROW><ROW><id>18034409</id><snippet>utf-8</snippet></ROW><ROW><id>18034409</id><snippet>latin-1</snippet></ROW><ROW><id>18034409</id><snippet>unicode</snippet></ROW><ROW><id>18034409</id><snippet>str</snippet></ROW><ROW><id>18034409</id><snippet>str</snippet></ROW><ROW><id>18034409</id><snippet>bytes</snippet></ROW><ROW><id>18034409</id><snippet>unicode</snippet></ROW><ROW><id>18034409</id><snippet>str</snippet></ROW><ROW><id>18034409</id><snippet>&gt;&gt;&gt; len(u'à')  # a single code point
1
&gt;&gt;&gt; len('à')   # by default utf-8 -&gt; takes two bytes
2
&gt;&gt;&gt; len(u'à'.encode('utf-8'))
2
&gt;&gt;&gt; len(u'à'.encode('latin1'))  # in latin1 it takes one byte
1
&gt;&gt;&gt; print u'à'.encode('utf-8')  # terminal encoding is utf-8
à
&gt;&gt;&gt; print u'à'.encode('latin1') # it cannot understand the latin1 byte
�
</snippet></ROW><ROW><id>18034409</id><snippet>str</snippet></ROW><ROW><id>18034409</id><snippet>unicode</snippet></ROW><ROW><id>18034409</id><snippet>&gt;&gt;&gt; 'àèìòù'
'\xc3\xa0\xc3\xa8\xc3\xac\xc3\xb2\xc3\xb9'
&gt;&gt;&gt; print 'àèìòù'.replace('\xa8', '')
à�ìòù
</snippet></ROW><ROW><id>18034458</id><snippet>padx</snippet></ROW><ROW><id>18034458</id><snippet>anchor = "w"</snippet></ROW><ROW><id>18034458</id><snippet>side</snippet></ROW><ROW><id>18034458</id><snippet>"top"</snippet></ROW><ROW><id>18034458</id><snippet>side</snippet></ROW><ROW><id>18034458</id><snippet>from Tkinter import Tk, Button

root = Tk()

B = Button(root, text="BUTTON1")
C = Button(root, text="BUTTON2")
D = Button(root, text="BUTTON3")

B.pack(anchor = "w", pady = 0)
C.pack(anchor = "w", pady = 100)
D.pack(anchor = "w", pady = 120)

root.mainloop()
</snippet></ROW><ROW><id>18034458</id><snippet>grid</snippet></ROW><ROW><id>18034458</id><snippet>pack</snippet></ROW><ROW><id>18034458</id><snippet>from Tkinter import Tk, Button, W

root = Tk()

B = Button(root, text="BUTTON1")
C = Button(root, text="BUTTON2")
D = Button(root, text="BUTTON3")

# 'row' sets the row number that the widget is placed on
# 'sticky' is the same as 'anchor'
B.grid(row=0, pady=0, sticky=W)
C.grid(row=1, pady=100, sticky=W)
D.grid(row=2, pady=120, sticky=W)

root.mainloop()
</snippet></ROW><ROW><id>18034458</id><snippet>grid</snippet></ROW><ROW><id>18034458</id><snippet>pack</snippet></ROW><ROW><id>18034596</id><snippet>for i in range(16):
    dfs['B'+str(i)] = dfs['BINDATA'].str[i]
</snippet></ROW><ROW><id>18034596</id><snippet>str</snippet></ROW><ROW><id>18034596</id><snippet>In [20]: dfs
Out[20]:
            BINDATA B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 B10 B11 B12 B13 B14 B15
0  1011111111101101  1  0  1  1  1  1  1  1  1  1   1   0   1   1   0   1
1  1011101101111101  1  0  1  1  1  0  1  1  0  1   1   1   1   1   0   1
2  1111111111110111  1  1  1  1  1  1  1  1  1  1   1   1   0   1   1   1
3  1110011111111111  1  1  1  0  0  1  1  1  1  1   1   1   1   1   1   1
4  1111101111111000  1  1  1  1  1  0  1  1  1  1   1   1   1   0   0   0
5  1101111001110101  1  1  0  1  1  1  1  0  0  1   1   1   0   1   0   1
6  1101111111111110  1  1  0  1  1  1  1  1  1  1   1   1   1   1   1   0
</snippet></ROW><ROW><id>18034596</id><snippet>.astype(int)</snippet></ROW><ROW><id>18034596</id><snippet>In [34]: splitted = dfs['BINDATA'].apply(lambda x: pd.Series(list(x)))

In [35]: splitted.columns = ['B'+str(x) for x in splitted.columns]

In [36]: dfs.join(splitted)
Out[36]:
            BINDATA B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 B10 B11 B12 B13 B14 B15
0  1011111111101101  1  0  1  1  1  1  1  1  1  1   1   0   1   1   0   1
1  1011101101111101  1  0  1  1  1  0  1  1  0  1   1   1   1   1   0   1
2  1111111111110111  1  1  1  1  1  1  1  1  1  1   1   1   0   1   1   1
3  1110011111111111  1  1  1  0  0  1  1  1  1  1   1   1   1   1   1   1
4  1111101111111000  1  1  1  1  1  0  1  1  1  1   1   1   1   0   0   0
5  1101111001110101  1  1  0  1  1  1  1  0  0  1   1   1   0   1   0   1
6  1101111111111110  1  1  0  1  1  1  1  1  1  1   1   1   1   1   1   0
</snippet></ROW><ROW><id>18034803</id><snippet>imshow</snippet></ROW><ROW><id>18034803</id><snippet>from pylab import *

N = 10
r0 = 0.6
x = linspace(0, 1, 10)
y = linspace(0, 1, 10)
X, Y = meshgrid(x, y)
size = rand(N,N)
c = size
scatter(X,Y,s=700*size, marker='o', c=c)

show()
</snippet></ROW><ROW><id>18034890</id><snippet>import redis
db = redis.StrictRedis()     # This connecteds to the standard redis port on the local machine

isLocked = db.sadd("mylocks", "mykey")
if not isLocked:
   data = db.hget("mydata", "mykey")
   try:
       # do something with data
       # ...
       # Saving the data
       db.hset("mydata", "mykey", data)
   except:
       pass

   # Now to the unlocking part
   db.srem("mylocks", "mykey")
</snippet></ROW><ROW><id>18035135</id><snippet>_sunder_</snippet></ROW><ROW><id>18035135</id><snippet>__dunder__</snippet></ROW><ROW><id>18035135</id><snippet>descriptors</snippet></ROW><ROW><id>18035135</id><snippet>__init__</snippet></ROW><ROW><id>18035135</id><snippet>descriptor</snippet></ROW><ROW><id>18035135</id><snippet>__init__</snippet></ROW><ROW><id>18035135</id><snippet>Enum</snippet></ROW><ROW><id>18035135</id><snippet>class Constant:
    def __init__(self, value):
        self.value = value
    def __get__(self, *args):
        return self.value
    def __repr__(self):
        return '%s(%r)' % (self.__class__.__name__, self.value)
</snippet></ROW><ROW><id>18035135</id><snippet>from enum import Enum

class Planet(Enum):
    MERCURY = (3.303e+23, 2.4397e6)
    VENUS   = (4.869e+24, 6.0518e6)
    EARTH   = (5.976e+24, 6.37814e6)
    MARS    = (6.421e+23, 3.3972e6)
    JUPITER = (1.9e+27,   7.1492e7)
    SATURN  = (5.688e+26, 6.0268e7)
    URANUS  = (8.686e+25, 2.5559e7)
    NEPTUNE = (1.024e+26, 2.4746e7)

    # universal gravitational constant
    G = Constant(6.67300E-11)

    def __init__(self, mass, radius):
        self.mass = mass       # in kilograms
        self.radius = radius   # in meters
    @property
    def surface_gravity(self):
        return self.G * self.mass / (self.radius * self.radius)

print(Planet.__dict__['G'])             # Constant(6.673e-11)
print(Planet.G)                         # 6.673e-11
print(Planet.NEPTUNE.G)                 # 6.673e-11
print(Planet.SATURN.surface_gravity)    # 10.44978014597121
</snippet></ROW><ROW><id>18035135</id><snippet>from enum import Enum

class AstronomicalObject(Enum):

    # universal gravitational constant
    G = Constant(6.67300E-11)

    def __init__(self, mass, radius):
        self.mass = mass
        self.radius = radius
    @property
    def surface_gravity(self):
        return self.G * self.mass / (self.radius * self.radius)

class Planet(AstronomicalObject):
    MERCURY = (3.303e+23, 2.4397e6)
    VENUS   = (4.869e+24, 6.0518e6)
    EARTH   = (5.976e+24, 6.37814e6)
    MARS    = (6.421e+23, 3.3972e6)
    JUPITER = (1.9e+27,   7.1492e7)
    SATURN  = (5.688e+26, 6.0268e7)
    URANUS  = (8.686e+25, 2.5559e7)
    NEPTUNE = (1.024e+26, 2.4746e7)

class Asteroid(AstronomicalObject):
    CERES = (9.4e+20 , 4.75e+5)
    PALLAS = (2.068e+20, 2.72e+5)
    JUNOS = (2.82e+19, 2.29e+5)
    VESTA = (2.632e+20 ,2.62e+5

Planet.MERCURY.surface_gravity    # 3.7030267229659395
Asteroid.CERES.surface_gravity    # 0.27801085872576176
</snippet></ROW><ROW><id>18035209</id><snippet>l = [['?' + i[0]] + i[1:] for i in l]    (l is the list you pass in)
</snippet></ROW><ROW><id>18035469</id><snippet>GetHomeTimeline()</snippet></ROW><ROW><id>18035469</id><snippet>timeline = api.GetHomeTimeline(count=20, since_id=None, max_id=None, trim_user=False, exclude_replies=False, contributor_details=False, include_entities=True)

print [s.text for s in timeline]
</snippet></ROW><ROW><id>18035641</id><snippet>itertools</snippet></ROW><ROW><id>18035641</id><snippet>for</snippet></ROW><ROW><id>18035641</id><snippet>list()</snippet></ROW><ROW><id>18035641</id><snippet>from itertools import chain, combinations

def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

for result in powerset([1, 2, 3]):
    print(result)

results = list(powerset([1, 2, 3]))
print(results)
</snippet></ROW><ROW><id>18035641</id><snippet>next()</snippet></ROW><ROW><id>18035807</id><snippet>vmin</snippet></ROW><ROW><id>18035807</id><snippet>vmax</snippet></ROW><ROW><id>18035807</id><snippet>plot_surface</snippet></ROW><ROW><id>18035807</id><snippet>surf = sub.plot_surface(x,y,z,linewidth=0,cmap=cm.coolwarm,vmin=0,vmax=1)
</snippet></ROW><ROW><id>18035869</id><snippet>setup()</snippet></ROW><ROW><id>18035869</id><snippet>initialize()</snippet></ROW><ROW><id>18035869</id><snippet>import earnings_download
earnings_download.initialize()
</snippet></ROW><ROW><id>18035956</id><snippet>    vbox.pack_start(self.scrolledwindow)
</snippet></ROW><ROW><id>18035971</id><snippet>t = CustomTemplate(source)
t.set_custom_context(Context())
print t.render()
</snippet></ROW><ROW><id>18035971</id><snippet>from jinja2.environment import Template as JinjaTemplate
from jinja2.runtime import Context as JinjaContext

class CustomContextWrapper(JinjaContext):

    def __init__(self, *args, **kwargs):
        super(CustomContextWrapper, self).__init__(*args, **kwargs)
        self.__custom_context = None

    def set_custom_context(self, custom_context):
        if not hasattr(custom_context, '__getitem__'):
            raise TypeError('custom context object must implement __getitem__()')
        self.__custom_context = custom_context

    # JinjaContext overrides

    def resolve(self, key):
        if self.__custom_context:
            try:
                return self.__custom_context[key]
            except KeyError:
                pass
        return super(CustomContextWrapper, self).resolve(key)

class CustomTemplate(JinjaTemplate):

    def set_custom_context(self, custom_context):
        self.__custom_context = custom_context

    # From jinja2.environment (2.7), modified
    def new_context(self, vars=None, shared=False, locals=None,
                    context_class=CustomContextWrapper):
        context = new_context(self.environment, self.name, self.blocks,
                              vars, shared, self.globals, locals,
                              context_class=context_class)
        context.set_custom_context(self.__custom_context)
        return context

# From jinja2.runtime (2.7), modified
def new_context(environment, template_name, blocks, vars=None,
                shared=None, globals=None, locals=None,
                context_class=CustomContextWrapper):
    """Internal helper to for context creation."""
    if vars is None:
        vars = {}
    if shared:
        parent = vars
    else:
        parent = dict(globals or (), **vars)
    if locals:
        # if the parent is shared a copy should be created because
        # we don't want to modify the dict passed
        if shared:
            parent = dict(parent)
        for key, value in iteritems(locals):
            if key[:2] == 'l_' and value is not missing:
                parent[key[2:]] = value
    return context_class(environment, parent, template_name, blocks)
</snippet></ROW><ROW><id>18036032</id><snippet>/home/emre801/run.sh</snippet></ROW><ROW><id>18036032</id><snippet>#!/bin/bash

source /home/emre801/.bashrc
pb switch 2.7.3
pb /full/path/to/your/code.py
</snippet></ROW><ROW><id>18036032</id><snippet>$ chmod 755 /home/emre801/run.sh
</snippet></ROW><ROW><id>18036032</id><snippet>*/10 * * * * /home/emre801/run.sh
</snippet></ROW><ROW><id>18036032</id><snippet>*/10 * * * * bash /home/emre801/run.sh
</snippet></ROW><ROW><id>18036146</id><snippet>&lt;record id="search_xxx_filter" model="ir.ui.view"&gt;
    &lt;field name="name"&gt;module.class.select&lt;/field&gt;
    &lt;field name="model"&gt;module.class&lt;/field&gt;
    &lt;field name="arch" type="xml"&gt;
        &lt;search string="Search xxx"&gt;
            &lt;field name="Fecha_de_Vence" string="Fecha de Vencimiento" filter_domain="[(1,'=',1)]"/&gt;
            &lt;separator/&gt;
            &lt;filter string="Fecha de Vencimiento" name="type_date" domain="[(1,'=',1)]" help="..."/&gt;
            &lt;separator/&gt;
            &lt;group expand="0" string="Group By..."&gt;
                &lt;filter string="Assigned to" domain="[]" context="{'group_by' : 'user_id'}" /&gt;
                &lt;filter string="Status" domain="[]" context="{'group_by': 'state'}"/&gt;
                &lt;filter string="Priority" domain="[]" context="{'group_by': 'priority'}"/&gt;
            &lt;/group&gt;
        &lt;/search&gt;
    &lt;/field&gt;
&lt;/record&gt;

&lt;record id="module_class_act" model="ir.actions.act_window"&gt;
    &lt;field name="name"&gt;xxx&lt;/field&gt;
    &lt;field name="res_model"&gt;module.class&lt;/field&gt;
    &lt;field name="view_type"&gt;form&lt;/field&gt;
    &lt;field name="context"&gt;{"search_default_type_date":1}&lt;/field&gt;
    &lt;field name="view_id" ref="module_class_tree-view"/&gt;
&lt;/record&gt;
</snippet></ROW><ROW><id>18036146</id><snippet>module</snippet></ROW><ROW><id>18036146</id><snippet>class</snippet></ROW><ROW><id>18036403</id><snippet>priority_list = {
    'PINK': 0,
    'PINKwA': 1,
    'OR0A': 2,
    'GB': 3,
}
</snippet></ROW><ROW><id>18036403</id><snippet>key</snippet></ROW><ROW><id>18036403</id><snippet>sorted</snippet></ROW><ROW><id>18036403</id><snippet>sorted_indices = sorted(enumerate(names), key=lambda (i, name): priority_list[name])
</snippet></ROW><ROW><id>18036403</id><snippet>enumerate</snippet></ROW><ROW><id>18036403</id><snippet>sorted</snippet></ROW><ROW><id>18036403</id><snippet>(i, name)</snippet></ROW><ROW><id>18036403</id><snippet>bcoords</snippet></ROW><ROW><id>18036403</id><snippet>for i, name in sorted_indices:
    output.write(',%s,%s' % (name, bcoords[i]))
</snippet></ROW><ROW><id>18036403</id><snippet>names = [colors[i][0] for i in tg.tets[tet_i]]
output.write(target[0])
for i, name in sorted(enumerate(names), key=lambda (i, name): priority_list[name]):
    output.write(',%s,%s' % (name, bcoords[i]))
output.write('\r\n')
output.close()
</snippet></ROW><ROW><id>18036403</id><snippet>.format()</snippet></ROW><ROW><id>18036403</id><snippet>.write()</snippet></ROW><ROW><id>18036403</id><snippet>str</snippet></ROW><ROW><id>18036403</id><snippet>'\r\n'</snippet></ROW><ROW><id>18036542</id><snippet>(-1)**0/(2*0+1)
</snippet></ROW><ROW><id>18036542</id><snippet>(-1)**1/(2*1+1)
</snippet></ROW><ROW><id>18036542</id><snippet>(-1)**2/(2*2+1)
</snippet></ROW><ROW><id>18036542</id><snippet>def estimate_pi(terms):
    result = 0.0
    for n in range(terms):
        result += (-1.0)**n/(2.0*n+1.0)
    return 4*result
</snippet></ROW><ROW><id>18036542</id><snippet>def estimate_pi(terms):
    result = 0.0
    sign = 1.0
    for n in range(terms):
        result += sign/(2.0*n+1.0)
        sign = -sign
    return 4*result

....

&gt;&gt;&gt; estimate_pi(100)
3.1315929035585537
&gt;&gt;&gt; estimate_pi(1000)
3.140592653839794
</snippet></ROW><ROW><id>18037221</id><snippet>import csv
with open('pathtofile','wb') as csvFile: #EDIT - because comment.
    writer = csv.writer(csvFile)
    writer.writerows(csvstff)
</snippet></ROW><ROW><id>18037221</id><snippet>directory='C:\Users\Documents\pyth\tweet_sentiment.csv'
</snippet></ROW><ROW><id>18037221</id><snippet>directory='C:\Users\Documents\pyth\\tweet_sentiment.csv'
</snippet></ROW><ROW><id>18037309</id><snippet>class DynamicWrapper(object):
    _initialized = False

    def __init__(self, wrapped_name)
        self._wrapped = wrapped_name

    def __get__(self):
        if not self._initialized:
            self._initialized = True
            return self
        if not hasattr(self, '_computed_val'):
            from django.conf import settings
            val = getattr(settings, self._wrapped)
            self._computed_val = some_func(val)
        return self._computed_val

BAR = 'some_value'
FOO = DynamicWrapper('BAR')
</snippet></ROW><ROW><id>18037309</id><snippet>getattr(settings_module, setting)</snippet></ROW><ROW><id>18037309</id><snippet>from django.conf import settings</snippet></ROW><ROW><id>18037309</id><snippet>__get__</snippet></ROW><ROW><id>18037309</id><snippet>self</snippet></ROW><ROW><id>18037309</id><snippet>settings.FOO</snippet></ROW><ROW><id>18037309</id><snippet>DynamicWrapper</snippet></ROW><ROW><id>18037309</id><snippet>settings.FOO</snippet></ROW><ROW><id>18037309</id><snippet>__get__</snippet></ROW><ROW><id>18037309</id><snippet>DynamicWrapper</snippet></ROW><ROW><id>18037309</id><snippet>some_func</snippet></ROW><ROW><id>18037309</id><snippet>DynamicWrapper</snippet></ROW><ROW><id>18037309</id><snippet>settings.FOO</snippet></ROW><ROW><id>18037309</id><snippet>__get__</snippet></ROW><ROW><id>18037309</id><snippet>self._computed_val</snippet></ROW><ROW><id>18037309</id><snippet>Settings</snippet></ROW><ROW><id>18037309</id><snippet>FOO</snippet></ROW><ROW><id>18037309</id><snippet>django.conf.settings</snippet></ROW><ROW><id>18037309</id><snippet>BAR</snippet></ROW><ROW><id>18037479</id><snippet>related_name</snippet></ROW><ROW><id>18037479</id><snippet>ForeignKey</snippet></ROW><ROW><id>18037479</id><snippet>ManyToManyField</snippet></ROW><ROW><id>18037479</id><snippet>class RecipeIngredients(models.Model):
    recipe = models.ForeignKey(Recipe, related_name='ingredient_quantities')
</snippet></ROW><ROW><id>18037479</id><snippet>&gt;&gt;&gt; r = Recipe.objects.get(id=1)
&gt;&gt;&gt; ingredients = r.ingredient_quantities.all()
</snippet></ROW><ROW><id>18037490</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>18037490</id><snippet>from Tkinter import Tk, Button
from subprocess import Popen

root = Tk()

def start():
    global process
    process = Popen("python /path/to/file")

def stop():
    # Uncomment this if you want the process to terminate along with the window
    # process.terminate()
    root.destroy()

Button(root, text="Start", command=start).grid()
Button(root, text="End", command=stop).grid()

root.mainloop()
</snippet></ROW><ROW><id>18037490</id><snippet>Start</snippet></ROW><ROW><id>18037490</id><snippet>End</snippet></ROW><ROW><id>18037601</id><snippet>class Node:    
    def __init__(self, f, l):
        self.feature = [f]
        self.label = [l]
</snippet></ROW><ROW><id>18037630</id><snippet>dict</snippet></ROW><ROW><id>18037630</id><snippet>a</snippet></ROW><ROW><id>18037630</id><snippet>b</snippet></ROW><ROW><id>18037630</id><snippet>from collections import defaultdict

byvalue = defaultdict(list)

for i, x in enumerate(data):
    byvalue[x].append(i)
</snippet></ROW><ROW><id>18037630</id><snippet>def has_index_in_slice(indices, a, b):
   r = bisect.bisect_left(indices, a)

   return r &lt; len(indices) and indices[r] &lt; b

def check(byvalue, x, a, b):
    indices = byvalue.get(x, None)
    if not indices: return False

    return has_index_in_slice(indices, a, b)
</snippet></ROW><ROW><id>18037630</id><snippet>O(log N)</snippet></ROW><ROW><id>18037630</id><snippet>list</snippet></ROW><ROW><id>18037630</id><snippet>dict</snippet></ROW><ROW><id>18037680</id><snippet>place</snippet></ROW><ROW><id>18037680</id><snippet>grid</snippet></ROW><ROW><id>18037680</id><snippet>import Tkinter

form = Tkinter.Tk()

errorArea = Tkinter.LabelFrame(form, text=" Errors ", width=250, height=80)
errorArea.grid(row=2, column=0, columnspan=2, sticky="E", \
             padx=5, pady=0, ipadx=0, ipady=0)

errorMessage = Tkinter.Label(errorArea, text="")

# 1) 'x' and 'y' are the x and y coordinates inside 'errorArea'
# 2) 'place' uses 'anchor' instead of 'sticky'
# 3) There is no need for 'padx' and 'pady' with 'place'
# since you can specify the exact coordinates
errorMessage.place(x=10, y=10, anchor="w")

form.mainloop()
</snippet></ROW><ROW><id>18037770</id><snippet>RegexValidator()</snippet></ROW><ROW><id>18037770</id><snippet>from django.core.exceptions import ValidationError

forbidden = {'login', 'logout'}

def not_forbidden(value):
    if value in forbidden:
        raise ValidationError(u'%s is not permitted as a username' % value)


username = models.CharField(max_length=14, blank=False, unique=True, validators=[
        validators.RegexValidator(r'^[^:;\'\"&lt;&gt;!@#$%|\^&amp;\*\(\)~`,.?/=\-\+\\\{\}]? [\w]+$'),
        not_forbidden,
    ])
</snippet></ROW><ROW><id>18037809</id><snippet>.update()</snippet></ROW><ROW><id>18037809</id><snippet>None</snippet></ROW><ROW><id>18037809</id><snippet>a_dict = dict(k=4, z=2)
a_dict.update(dict(l=1))
print a_dict
</snippet></ROW><ROW><id>18037809</id><snippet>dict.update()</snippet></ROW><ROW><id>18037809</id><snippet>None</snippet></ROW><ROW><id>18037937</id><snippet>$ python -ic ""
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>18038033</id><snippet>dict.setdefault</snippet></ROW><ROW><id>18038033</id><snippet>set.update</snippet></ROW><ROW><id>18038197</id><snippet>tree = html.fromstring(self.header)</snippet></ROW><ROW><id>18038197</id><snippet>return</snippet></ROW><ROW><id>18038197</id><snippet>filling_type</snippet></ROW><ROW><id>18038265</id><snippet>#! /usr/bin/python

n = 313105074639950943116 #just an example

#your algorithm
chars = []
buff = ''
s = str (n)
while s:
    if int (buff + s [0] ) &lt; 256:
        buff += s [0]
        s = s [1:]
    else:
        chars.append (int (buff) )
        buff = ''
if buff: chars.append (int (buff) )

print ('You need to write these numbers converted to chars: {}'.format (chars) )
print ('This are {} bytes of data.'.format (len (chars) ) )
print ('But you cannot decompress it, because you lose leading zeros.')

chars = []
while n:
    chars.append (n &amp; 0xff)
    n = n &gt;&gt; 8

print ('Now if you just write the number to a file without your algorithm:')
print ('You need to write these numbers converted to chars: {}'.format (chars) )
print ('This are {} bytes of data.'.format (len (chars) ) )
print ('And you can actually read it again.')
</snippet></ROW><ROW><id>18038265</id><snippet>#! /usr/bin/python

n = 313666666666666688888888888888888866666666666666666666666666666610507466666666666666666666666666399509431888888888888888888888888888888888888888888881666666666666

s = str (n)
print (s)
comp = ''
count = None
while s:
    if s [0] in '01234579':
        if count:
            comp += ('&lt;{}&gt;' if count [0] == 6 else '[{}]').format (count [1] )
            count = None
        comp += s [0]
    if s [0] == '6':
        if count and count [0] == 6: count = (6, count [1] + 1)
        elif count:
            comp += ('[{}]').format (count [1] )
            count = (6, 1)
        else: count = (6, 1)
    if s [0] == '8':
        if count and count [0] == 8: count = (8, count [1] + 1)
        elif count:
            comp += ('&lt;{}&gt;').format (count [1] )
            count = (8, 1)
        else: count = (8, 1)
    s = s [1:]

if count: comp += ('&lt;{}&gt;' if count [0] == 6 else '[{}]').format (count [1] )

print (comp)
</snippet></ROW><ROW><id>18038294</id><snippet>&lt;div id='spaghetti'&gt;
  &lt;input field-type='grade' /&gt;
  &lt;input field-type='comment' /&gt;
&lt;/div&gt;

&lt;script&gt;
  $(document).ready(function() {
    $('input[type=submit]').click(function() {
      var data = {}
      var grade = $('#spaghetti').children('input[field-type=grade]').first().val();
      var comment = $('#spaghetti').children('input[field-type=comment]').first().val();
      data['spaghetti'] = [grade, comment];
      $.post('url', data);
    }
  }
</snippet></ROW><ROW><id>18038421</id><snippet>arr=[[0 for x in xrange(n)] for x in xrange(n)]
</snippet></ROW><ROW><id>18038421</id><snippet>i=0
while i&lt;n:
    j=0
    while j&lt;n:
        arr[i][j]=0
        j+=1
    i+=1
</snippet></ROW><ROW><id>18038421</id><snippet>i=0
while i&lt;n:
    j=0
    while j&lt;n:
        ok = True
        x=0
        while x&lt;n:
            # Why 'x-1' here?
            if((arr[i][x]==1) or (arr[x][j]==1)):
                ok = False
                break
            x+=1
        if ok:
            arr[i][j]=1
        j+=1
    i+=1
</snippet></ROW><ROW><id>18038665</id><snippet>yield</snippet></ROW><ROW><id>18038665</id><snippet>next</snippet></ROW><ROW><id>18038665</id><snippet>while True</snippet></ROW><ROW><id>18038665</id><snippet>import Tkinter as tk

class App(object):
    def __init__(self, master):
        self.master = master
        self.initialize()

    def lock_func(self):
        def step():
            while True:
                print("blah")
                self.nextstep_id = self.master.after(1, nextstep)
                yield
        nextstep = step().next
        self.nextstep_id = self.master.after(1, nextstep)

    def stop(self):
        self.master.after_cancel(self.nextstep_id)
        print("stopped")

    def initialize(self):
        self.nextstep_id = 0
        self.process_button = tk.Button(self.master, text="Process",
                                        command=self.lock_func)
        self.stop_button = tk.Button(self.master, text="Stop",
                                     command=self.stop)        
        self.process_button.pack()
        self.stop_button.pack(expand='yes', fill='x')

root = tk.Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>18038762</id><snippet>listMult = [sum(x*y for x, y in zip(tup, somelist)) for tup in tuplelist]
</snippet></ROW><ROW><id>18038934</id><snippet>fonts/</snippet></ROW><ROW><id>18038934</id><snippet>css/</snippet></ROW><ROW><id>18038934</id><snippet>fonts/</snippet></ROW><ROW><id>18038934</id><snippet>static/
  css/
    bootstrap-glyphicons.css
    ...
  fonts/
    glyphiconshalflings-regular.eot
    ...
  js/
</snippet></ROW><ROW><id>18039175</id><snippet>data = pd.read_csv(path, skiprows=2)</snippet></ROW><ROW><id>18039180</id><snippet>from itertools import combinations
import numpy as np
import string

    def get_maxhappiness(results):
        max_happiness = max(results)
        index = results.index(max_happiness)

        #Printing the result! (There may be more than one best result, but this will only show 1)
        print "Optimal Groups: Point value of",max_happiness,"\n",groups[index],"\n", anti_groups[index]
        results[index] = 0
        return results

def calculateHappiness(points,group):
    happiness = 0
    for i in range(len(group)):
        person_prefs = points[group[i]]
        others = group[i:] + group[:i]
        for other in others:
            happiness += person_prefs[other]
    return happiness



if __name__ == "__main__":
    people = string.letters[26:44]
    groups = list(combinations(people,9))
    anti_groups = [tuple(set(people).difference(set(x))) for x in groups]

    #Making fake results
    survey_results = dict()
    for person in people:
        results = dict(zip(people,np.random.randint(0,10,size=(len(people)))))
        results[person] = 0
        survey_results[person] = results

    #Printing Survey Results
    for name,values in survey_results.items():
        print "Student:", name, "has preferences:", values

    #Calculating happiness for every group
    results = []
    for i in range(len(groups)):
        results.append(calculateHappiness(survey_results,groups[i])+calculateHappiness(survey_results,anti_groups[i]))
    #Finding the largest happiness value
    top_n = 5
    while top_n &gt; 0:
        results = get_maxhappiness(results)
        top_n -= 1
</snippet></ROW><ROW><id>18039180</id><snippet>...

Student: N has preferences: {'A': 5, 'C': 5, 'B': 0, 'E': 0, 'D': 3, 'G': 6, 'F'
: 8, 'I': 8, 'H': 3, 'K': 1, 'J': 4, 'M': 4, 'L': 9, 'O': 0, 'N': 0, 'Q': 3, 'P'
: 2, 'R': 2}
Student: Q has preferences: {'A': 9, 'C': 0, 'B': 3, 'E': 4, 'D': 3, 'G': 2, 'F'
: 2, 'I': 7, 'H': 5, 'K': 2, 'J': 3, 'M': 0, 'L': 9, 'O': 2, 'N': 5, 'Q': 0, 'P'
: 2, 'R': 0}
Student: P has preferences: {'A': 2, 'C': 3, 'B': 0, 'E': 9, 'D': 3, 'G': 6, 'F'
: 7, 'I': 1, 'H': 7, 'K': 9, 'J': 7, 'M': 4, 'L': 8, 'O': 2, 'N': 6, 'Q': 5, 'P'
: 0, 'R': 7}
Student: R has preferences: {'A': 5, 'C': 3, 'B': 7, 'E': 1, 'D': 5, 'G': 6, 'F'
: 1, 'I': 6, 'H': 9, 'K': 9, 'J': 3, 'M': 6, 'L': 8, 'O': 8, 'N': 5, 'Q': 1, 'P'
: 3, 'R': 0}
Optimal Groups: Point value of 709
('A', 'B', 'F', 'G', 'J', 'K', 'O', 'Q', 'R')
('C', 'E', 'D', 'I', 'H', 'M', 'L', 'N', 'P')
(x4)
</snippet></ROW><ROW><id>18039271</id><snippet>private</snippet></ROW><ROW><id>18039271</id><snippet>__func2</snippet></ROW><ROW><id>18039271</id><snippet>o.func2()</snippet></ROW><ROW><id>18039271</id><snippet>james@bodacious:tmp$cat test.py

class myclass:

    def func1(self):
        print "one"

    def __func2(self):
        print "two"

o = myclass()

print dir(o)

o._myclass__func2()
o.func2()
james@bodacious:tmp$python test.py
['__doc__', '__module__', '_myclass__func2', 'func1']
two
Traceback (most recent call last):
  File "test.py", line 15, in &lt;module&gt;
    o.func2()
AttributeError: myclass instance has no attribute 'func2'
james@bodacious:tmp$
</snippet></ROW><ROW><id>18039271</id><snippet>AttributeError: matrix instance has no attribute '_matrix'
</snippet></ROW><ROW><id>18039271</id><snippet>self._matrix.__loadVec(vec,res)
</snippet></ROW><ROW><id>18039271</id><snippet>self</snippet></ROW><ROW><id>18039271</id><snippet>matrix</snippet></ROW><ROW><id>18039271</id><snippet>_matrix</snippet></ROW><ROW><id>18039271</id><snippet>__savetoMatrix</snippet></ROW><ROW><id>18039271</id><snippet>matrix</snippet></ROW><ROW><id>18039271</id><snippet>self.matrix</snippet></ROW><ROW><id>18039271</id><snippet>matrix</snippet></ROW><ROW><id>18039271</id><snippet>self</snippet></ROW><ROW><id>18039271</id><snippet>__savetoMatrix</snippet></ROW><ROW><id>18039271</id><snippet>self.matrix</snippet></ROW><ROW><id>18039271</id><snippet>self._matrix</snippet></ROW><ROW><id>18039271</id><snippet>matrix</snippet></ROW><ROW><id>18039271</id><snippet>matrix</snippet></ROW><ROW><id>18039271</id><snippet>self.matrix.__loadVec()</snippet></ROW><ROW><id>18039271</id><snippet>__loadvec()</snippet></ROW><ROW><id>18039271</id><snippet>matrix</snippet></ROW><ROW><id>18039271</id><snippet>self</snippet></ROW><ROW><id>18039271</id><snippet>matrix</snippet></ROW><ROW><id>18039271</id><snippet>inner_matrix</snippet></ROW><ROW><id>18039271</id><snippet>self._matrix._inner_matrix__loadVec()</snippet></ROW><ROW><id>18039271</id><snippet>__loadVec()</snippet></ROW><ROW><id>18039271</id><snippet>matrix</snippet></ROW><ROW><id>18039271</id><snippet>self.__loadVec()</snippet></ROW><ROW><id>18039271</id><snippet>james@bodacious:tmp$cat test.py

class myclass:

    def func1(self):
        print "one"

    def __func2(self):
        print "two"

    def func3(self):
        self.__func2()
        print "three"

o = myclass()
print dir(o)
o.func3()
james@bodacious:tmp$python test.py
['__doc__', '__module__', '_myclass__func2', 'func1', 'func3']
two
three
</snippet></ROW><ROW><id>18039652</id><snippet>.command</snippet></ROW><ROW><id>18039713</id><snippet>#!/usr/bin/env python

import datetime

def parse_date(datestring):
    timepart = datestring.split('(')[1].split(')')[0]
    milliseconds = int(timepart[:-5])
    hours = int(timepart[-5:]) / 100
    time = milliseconds / 1000

    dt = datetime.datetime.utcfromtimestamp(time + hours * 3600)
    return dt.strftime("%Y-%m-%dT%H:%M:%S") + '%02d:00' % hours

ScheduleDate = "\/Date(1374811200000-0400)\/"
StartTime = "\/Date(-2208931200000-0500)\/"

print(parse_date(ScheduleDate))
print(parse_date(StartTime))
</snippet></ROW><ROW><id>18039713</id><snippet>datetime.(utc)?fromtimestamp()</snippet></ROW><ROW><id>18039713</id><snippet>#!/usr/bin/env python

import datetime

EPOCH = datetime.datetime.utcfromtimestamp(0)

def parse_date(datestring):
    timepart = datestring.split('(')[1].split(')')[0]
    milliseconds = int(timepart[:-5])
    hours = int(timepart[-5:]) / 100
    adjustedseconds = milliseconds / 1000 + hours * 3600

    dt = EPOCH + datetime.timedelta(seconds=adjustedseconds)
    return dt.strftime("%Y-%m-%dT%H:%M:%S") + '%02d:00' % hours

ScheduleDate = "\/Date(1374811200000-0400)\/"
StartTime = "\/Date(-2208931200000-0500)\/"

print(parse_date(ScheduleDate))
print(parse_date(StartTime))
</snippet></ROW><ROW><id>18039722</id><snippet>from datetime import datetime
datetime.strptime('2014-12-04', '%Y-%m-%d').date()
</snippet></ROW><ROW><id>18039750</id><snippet>val = (yield i)
</snippet></ROW><ROW><id>18039750</id><snippet>yield val
</snippet></ROW><ROW><id>18039750</id><snippet>def parrot():
    val = None
    while True:
        val = yield val
</snippet></ROW><ROW><id>18039750</id><snippet>'none'</snippet></ROW><ROW><id>18039750</id><snippet>None</snippet></ROW><ROW><id>18039750</id><snippet>next</snippet></ROW><ROW><id>18039750</id><snippet>def parrot():
    val = None
    while True:
        val = yield ('none' if val is None else val)
</snippet></ROW><ROW><id>18039752</id><snippet>q.get(timeout=5)</snippet></ROW><ROW><id>18039752</id><snippet>60</snippet></ROW><ROW><id>18039752</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>18039752</id><snippet>import Queue
import subprocess
import threading

def checkStdout(p, q):
    s = p.stdout.read(1)
    if len(s) &gt; 0:
        q.put(s)

def run():
    p = subprocess.Popen(['cat'], stdout=subprocess.PIPE, close_fds=True)
    print 'pid %d started' % p.pid
    q = Queue.Queue()
    t = threading.Thread(target=checkStdout, args=(p, q))
    t.daemon = True
    t.start()
    try:
        canGet = q.get(timeout=5)
        print 'has output'
    except Queue.Empty:
        print 'no output'
        # kill process
        p.kill()

if __name__ == '__main__':
    run()
</snippet></ROW><ROW><id>18039823</id><snippet>c.common.externalLinks.all() | m.common.externalLinks.all()
</snippet></ROW><ROW><id>18039823</id><snippet>ExternalLink.objects.filter(common__in=[m.common, c.common])
</snippet></ROW><ROW><id>18039823</id><snippet>snake_case</snippet></ROW><ROW><id>18039823</id><snippet>camelCase</snippet></ROW><ROW><id>18039823</id><snippet>m.common.externalLinks.all()</snippet></ROW><ROW><id>18039823</id><snippet>c.common.externalLinks</snippet></ROW><ROW><id>18039823</id><snippet>c.common.externalLinks.add(*m.common.externalLinks.all())
</snippet></ROW><ROW><id>18039823</id><snippet>c.common.externalLinks.add(m.common.externalLinks.all()[0])
</snippet></ROW><ROW><id>18039834</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; conn = sqlite3.connect('example.db')
</snippet></ROW><ROW><id>18039835</id><snippet>from re import findall, DOTALL

text = '''
title
&lt;a&gt;&lt;/a&gt;
content here
&lt;a&gt;&lt;/a&gt;
text...
&lt;a&gt;&lt;/a&gt;
text...
title 
&lt;a&gt;&lt;/a&gt;
&lt;a&gt;&lt;/a&gt;
&lt;a&gt;&lt;/a&gt;
'''
print findall(r'title.*?&lt;/a&gt;.*?&lt;/a&gt;.*?&lt;/a&gt;', text, DOTALL)
</snippet></ROW><ROW><id>18039835</id><snippet>['title\n&lt;a&gt;&lt;/a&gt;\ncontent here\n&lt;a&gt;&lt;/a&gt;\ntext...\n&lt;a&gt;&lt;/a&gt;', 'title \n&lt;a&gt;&lt;/a&gt;\n&lt;a&gt;&lt;/a&gt;\n&lt;a&gt;&lt;/a&gt;']
</snippet></ROW><ROW><id>18039835</id><snippet>print findall(r'title(?:.*?&lt;/a&gt;){3}', text, DOTALL)
</snippet></ROW><ROW><id>18039884</id><snippet>in_file =open('tow.txt','r')

for line in_infile:
    L=line.strip().split()
    Tower = L[0]
    Lat = L[1]
    Long = L[2]
    ComDis = L[3]

    print (Tower,Lat,Long,ComDis)
</snippet></ROW><ROW><id>18039904</id><snippet>&lt;source 1="your_element" /&gt;
</snippet></ROW><ROW><id>18039904</id><snippet>&lt;source&gt;Blah&lt;/source&gt;
&lt;source&gt;Rah&lt;/source&gt;
</snippet></ROW><ROW><id>18039904</id><snippet>element = find_element_by_css_selector("source")
</snippet></ROW><ROW><id>18039904</id><snippet>element = find_elements_by_css_selector("source")[0]
</snippet></ROW><ROW><id>18039904</id><snippet>element = find_element_by_css_selector("source:nth-of-type(1)")
</snippet></ROW><ROW><id>18039911</id><snippet>n</snippet></ROW><ROW><id>18039911</id><snippet>n*(n-1)/2</snippet></ROW><ROW><id>18039911</id><snippet>(a, b), (x,y), (b, y)</snippet></ROW><ROW><id>18039911</id><snippet>a</snippet></ROW><ROW><id>18039911</id><snippet>x</snippet></ROW><ROW><id>18040060</id><snippet>length = sum([len(arr) for arr in mylist])</snippet></ROW><ROW><id>18040060</id><snippet>sum([len(arr) for arr in mylist[0:3]]) = 9
sum([len(arr) for arr in mylist[1:3]]) = 6
sum([len(arr) for arr in mylist[2:3]]) = 3
</snippet></ROW><ROW><id>18040060</id><snippet>mylist</snippet></ROW><ROW><id>18040060</id><snippet>mylist</snippet></ROW><ROW><id>18040060</id><snippet>len2 = lambda l: sum([len(x) for x in l])
len2(mylist[0:3]) = 9
len2(mylist[1:3]) = 6
len2(mylist[2:3]) = 3
</snippet></ROW><ROW><id>18040234</id><snippet>def</snippet></ROW><ROW><id>18040234</id><snippet>list[0]</snippet></ROW><ROW><id>18040234</id><snippet>funcdef        ::=  "def" funcname "(" [parameter_list] ")" ":" suite
funcname       ::=  identifier
</snippet></ROW><ROW><id>18040234</id><snippet>s = [None]

def f(x, y):
    return x + y

s[0] = f
</snippet></ROW><ROW><id>18040234</id><snippet>lambda</snippet></ROW><ROW><id>18040234</id><snippet>s = [lambda x,y : x+y]
</snippet></ROW><ROW><id>18040252</id><snippet>sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
</snippet></ROW><ROW><id>18040252</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>18040252</id><snippet>heroku run bash</snippet></ROW><ROW><id>18040289</id><snippet># assign the tuple (x, ".acc") to xys 
xys = x,".acc"

# now xyzasd is the tuple converted to a string, thus
# making the name of your file into '("content of x", ".acc")'
xyzasd = str(xys)

# and open file named thus
tf = open(xyzasd,'a+')
</snippet></ROW><ROW><id>18040289</id><snippet># use proper variable and function names!
def make_account(account):
    filename = account + '.acc'
    the_file = open(filename, 'a+')
    ....
</snippet></ROW><ROW><id>18040289</id><snippet>def main():
    pass

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18040317</id><snippet>new_list = []
for i in colors:
   if 'een' not in i:
       new_list.append(i)
</snippet></ROW><ROW><id>18040317</id><snippet>new_list = [i for i in colors if 'een' not in i]
</snippet></ROW><ROW><id>18040317</id><snippet>&gt;&gt;&gt; filter(lambda x: 'een' not in x, colors)
['red', 'blue', 'purple']
</snippet></ROW><ROW><id>18040317</id><snippet>colors</snippet></ROW><ROW><id>18040317</id><snippet>for i in colors[::-1]: # Traverse the list backward to avoid skipping the next entry.
    if 'een' in i:
       colors.remove(i)
</snippet></ROW><ROW><id>18040400</id><snippet>print</snippet></ROW><ROW><id>18040400</id><snippet>&gt;&gt;&gt; 0.1457164443693023
0.1457164443693023
&gt;&gt;&gt; print 0.1457164443693023
0.145716444369
</snippet></ROW><ROW><id>18040400</id><snippet>__repr__</snippet></ROW><ROW><id>18040400</id><snippet>__str__</snippet></ROW><ROW><id>18040455</id><snippet>Dear {{name}}
</snippet></ROW><ROW><id>18040455</id><snippet>html_content = render_to_string('the_template.html', {'varname':'value'})
</snippet></ROW><ROW><id>18040455</id><snippet>html_content = render_to_string('the_template.html', {'name':&lt;whatever name you want&gt;})
</snippet></ROW><ROW><id>18040455</id><snippet>request</snippet></ROW><ROW><id>18040455</id><snippet>Dear {{request.user.first_name}} {{request.user.last_name}}
</snippet></ROW><ROW><id>18040860</id><snippet>str = u"BBC \xe2 abc - Here is the text"
m = re.search(ur'^(.*? [-\xe2] )?(.*)', str, re.UNICODE)

# or equivalent
# m = re.match(ur'(.*? [-\xe2] )?(.*)', str, re.UNICODE)

# You don't really need re.UNICODE, but if you want to use unicode
# characters, it's better you conside à to be a letter :-) , so re.UNICODE

# group(1) contains the part before the hypen
if m.group(1) is not None:
    print m.group(1)

# group(2) contains the part after the hypen or all the string 
# if there is no hypen
print m.group(2)
</snippet></ROW><ROW><id>18040860</id><snippet>^ is the beginning of the string (the match method always use the beginning
  of the string)
(...) creates a capturing group (something that will go in group(...)
(...)? is an optional group
[-\xe2] one character between - and \xe2 (you can put any number of characters
        in the [], like [abc] means a or b or c
.*? [-\xe2] (there is a space after the ]) any character followed by a space, an hypen and a space
      the *? means that the * is "lazy" so it will try to catch only the
      minimum number possible of characters, so ABC - DEF - GHI
      .* - would catch ABC - DEF -, while .* - will catch ABC - 

so

(.* [-\xe2] )? the string could start with any character followed by an hypen
         if yes, put it in group(1), if no group(1) will be None
(.*) and it will be followed by any character. You dont need the 
     $ (that is the end-of the string, opposite of ^) because * will 
     always eat all the characters it can eat (it's an eager operator)
</snippet></ROW><ROW><id>18040917</id><snippet>{'groups', groups}</snippet></ROW><ROW><id>18040917</id><snippet>{'groups': groups}</snippet></ROW><ROW><id>18040917</id><snippet>{% for g in groups %}
   {{g.group}}
{% endfor %}
</snippet></ROW><ROW><id>18040976</id><snippet>import os

counter_file = open(r'./counter_file.txt', 'r+')
content_lines = []

for line in counter_file:
        if 'counter=' in line:
                line_components = line.split('=')
                int_value = int(line_components[1]) + 1
                line_components[1] = str(int_value)
                updated_line= "=".join(line_components)
                content_lines.append(updated_line)
        else:
                content_lines.append(line)

counter_file.seek(0)
counter_file.truncate()
counter_file.writelines(content_lines)
counter_file.close()
</snippet></ROW><ROW><id>18040979</id><snippet>binascii.unhexlify()</snippet></ROW><ROW><id>18040979</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.unhexlify("02")
'\x02'
&gt;&gt;&gt; '\x3c' + _
'&lt;\x02'
</snippet></ROW><ROW><id>18041006</id><snippet>predict_proba</snippet></ROW><ROW><id>18041006</id><snippet>predict</snippet></ROW><ROW><id>18041006</id><snippet>&gt;&gt;&gt; X = np.random.randn(3, 4)
&gt;&gt;&gt; lr = LogisticRegression()
&gt;&gt;&gt; X = np.random.randn(3, 4)
&gt;&gt;&gt; y = [1, 0, 0]
&gt;&gt;&gt; lr.fit(X, y)
LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
          intercept_scaling=1, penalty='l2', random_state=None, tol=0.0001)
&gt;&gt;&gt; lr.predict_proba(X[0])
array([[ 0.49197272,  0.50802728]])
</snippet></ROW><ROW><id>18041097</id><snippet>&lt;a href="{% static 'images/{{ image.title }}.png' %}"&gt;img file&lt;/a&gt; 
</snippet></ROW><ROW><id>18041175</id><snippet>print repr(message)
</snippet></ROW><ROW><id>18041409</id><snippet>mylist.append(ele)</snippet></ROW><ROW><id>18041409</id><snippet>The method append() shown in the example is defined for list objects; it adds a new element at the end of the list. In this example it is equivalent to result = result + [a], but more efficient.
</snippet></ROW><ROW><id>18041409</id><snippet>myList = myList + something</snippet></ROW><ROW><id>18041409</id><snippet>timeit</snippet></ROW><ROW><id>18041409</id><snippet>&gt;&gt;&gt; timeit('myList = myList + ["a"]', 'myList = []', number = 50000)
11.35058911138415
&gt;&gt;&gt; timeit('myList.append("a")', 'myList = []', number = 50000)
0.010776052286637139
</snippet></ROW><ROW><id>18041540</id><snippet>itertools.product</snippet></ROW><ROW><id>18041540</id><snippet>&gt;&gt;&gt; from string import ascii_lowercase as al
&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; lis = ["".join(p) for i in xrange(1,6) for p in product(al, repeat = i)]
</snippet></ROW><ROW><id>18041839</id><snippet>re.sub</snippet></ROW><ROW><id>18041839</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; test = 'Something Else ( neW ) other and another (nEw ) with (nEw ) '
&gt;&gt;&gt; re.sub(r'\(\s*[nN][eE][wW]\s*\)','',test)
'Something Else  other and another  with  '
</snippet></ROW><ROW><id>18041938</id><snippet>for i,v in enumerate(y):
    x.insert(2*i+1,v)
</snippet></ROW><ROW><id>18041938</id><snippet>x = [0,1,2,3,4,5]
y = [100, 11,22,33,44,55,66,77]
print x
# [0, 100, 1, 11, 2, 22, 3, 33, 4, 44, 5, 55, 66, 77]
</snippet></ROW><ROW><id>18041981</id><snippet>if command == "iam":
    self.name = content
    msg = self.name + "has joined"
elif command == "msg":
    msg = self.name + ": " + content 
    print msg
</snippet></ROW><ROW><id>18041981</id><snippet>def dataReceived(self, data):
    self.name = ""
</snippet></ROW><ROW><id>18041981</id><snippet>class IphoneChat(Protocol):
    def __init__(self):
        self.name = ""
</snippet></ROW><ROW><id>18041981</id><snippet>class IphoneChat(Protocol):
    name = ""
</snippet></ROW><ROW><id>18042029</id><snippet>import struct
x = int(7)
y = int(7000.523)
buf = struct.pack("&lt;HH", x, y)
# read it back
for i in buf:
    print "%02x" % (ord(i))
</snippet></ROW><ROW><id>18042029</id><snippet>&lt;</snippet></ROW><ROW><id>18042029</id><snippet>self.ser.write(buf+yourstring+'\0')
</snippet></ROW><ROW><id>18042101</id><snippet>pre_save()</snippet></ROW><ROW><id>18042101</id><snippet># Assuming list and detail URLs like:
#   /v1/objects/&lt;parent_pk&gt;/subobjects/
#   /v1/objects/&lt;parent_pk&gt;/subobjects/&lt;pk&gt;/
def pre_save(self, obj):
    parent = models.MainObject.objects.get(pk=self.kwargs['parent_pk'])
    obj.parent = parent
</snippet></ROW><ROW><id>18042224</id><snippet>str</snippet></ROW><ROW><id>18042224</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>18042224</id><snippet>print</snippet></ROW><ROW><id>18042224</id><snippet># -*- coding: utf-8 -*- 
s = u"测试"
s = s + u"娴嬭瘯"
print s.encode("somecodepage")
</snippet></ROW><ROW><id>18042226</id><snippet>"(new)"</snippet></ROW><ROW><id>18042226</id><snippet>import re
def myfilter(x):
    return ' '.join(re.sub(ur'\(\s*[nN][eE][wW]\s*\)','',x).title().split())

wcity = myfilter( raw_input("Please enter a city ==&gt; ") )
print wcity
wtype = myfilter( raw_input("Please enter a restaurant type ==&gt; ") )
print wtype
</snippet></ROW><ROW><id>18042288</id><snippet>settings.py</snippet></ROW><ROW><id>18042374</id><snippet>&gt;&gt;&gt; import judy
&gt;&gt;&gt; dir(judy)
['JudyIntObjectMap', 'JudyIntSet', '__doc__', '__file__', '__name__', '__package__']
&gt;&gt;&gt; a=judy.JudyIntObjectMap()
&gt;&gt;&gt; dir(a)
['__class__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__format__', '__getattribute__', '__getitem__', '__hash__', '__init__', '__iter__', '__len__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', '__value_sizeof__', 'by_index', 'clear', 'get', 'iteritems', 'iterkeys', 'itervalues', 'pop']
&gt;&gt;&gt; a[100]=1
&gt;&gt;&gt; a[100]="str"
&gt;&gt;&gt; a["str"]="str"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'non-integer keys not supported'
&gt;&gt;&gt; for i in xrange(30000000):
...     a[i]=i+30000000   #finally eats ~986MB memory
... 
</snippet></ROW><ROW><id>18042374</id><snippet>&gt;&gt;&gt; a=judy.JudyIntSet()
&gt;&gt;&gt; a.add(1111111111111111111111111)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: we only support integers in the range [0, 2**64-1]
</snippet></ROW><ROW><id>18042421</id><snippet>struct</snippet></ROW><ROW><id>18042421</id><snippet>a = "Some string" * 10 ** 7
b = a[10000]
del a
</snippet></ROW><ROW><id>18042421</id><snippet>b</snippet></ROW><ROW><id>18042421</id><snippet>a</snippet></ROW><ROW><id>18042421</id><snippet>b = a[:10000]</snippet></ROW><ROW><id>18042438</id><snippet>method_to_use = order[i]
method_to_use(my_pop)
</snippet></ROW><ROW><id>18042438</id><snippet>order_type = 'a'
class Population (object):
    def __init__(self,a):
        self.a = a

    def method1 (self):
        self.a = self.a*2
        return self

    def method2 (self):
        self.a += 2
        return self

    def method3 (self):
        self.a = 0
        return self

if order_type=='a':
    order = [Population.method1, Population.method2, Population.method3]
elif order_type=='b':
    order = [Population.method2, Population.method1, Population.method3]
else :
    order = [Population.method3, Population.method2, Population.method1]

my_pop = Population(3)

while iteration &lt; 100:
    iteration +=1
    for method_to_use in order:
        method_to_use(my_pop)
</snippet></ROW><ROW><id>18042438</id><snippet>*args</snippet></ROW><ROW><id>18042438</id><snippet>if order_type=='a':
    order = [Population.method1, Population.method2, Population.method3]
    arguments = [(), (), (the_argument,)]
elif order_type=='b':
    order = [Population.method2, Population.method1, Population.method3]
    arguments = [(), (), (the_argument,)]
else :
    order = [Population.method3, Population.method2, Population.method1]
    arguments = [(the_argument, ), (), ()]

my_pop = Population(3)

while iteration &lt; 100:
    iteration +=1
    for method_to_use, args in zip(order, arguments):
        method_to_use(my_pop, *args)
</snippet></ROW><ROW><id>18042438</id><snippet>()</snippet></ROW><ROW><id>18042438</id><snippet>*args</snippet></ROW><ROW><id>18042438</id><snippet>(the_argument,)</snippet></ROW><ROW><id>18042704</id><snippet>open</snippet></ROW><ROW><id>18042704</id><snippet>urlopen</snippet></ROW><ROW><id>18042704</id><snippet>import bs4, sys
from urllib import urlopen

webpage = urlopen(sys.argv[1]).read().decode('utf-8')
soup = bs4.BeautifulSoup(webpage)
for node in soup.findAll('html'):
    print u''.join(node.findAll(text=True)).encode('utf-8')
</snippet></ROW><ROW><id>18042704</id><snippet>urllib</snippet></ROW><ROW><id>18042704</id><snippet>import bs4, sys

with open(sys.argv[1], 'r') as f:
    webpage = f.read().decode('utf-8')

soup = bs4.BeautifulSoup(webpage)
for node in soup.findAll('html'):
    print u''.join(node.findAll(text=True)).encode('utf-8')
</snippet></ROW><ROW><id>18042799</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.b2a_hex(b'\x02P\x1cA\xd1\x00\x00\x02\xcb\x11\x00')
b'02501c41d1000002cb1100'
&gt;&gt;&gt; binascii.b2a_hex(b'\x02P\x1cA\xd1\x00\x00\x02\xcb\x11\x00').decode('ascii')
'02501c41d1000002cb1100'
</snippet></ROW><ROW><id>18042846</id><snippet>__init__.py</snippet></ROW><ROW><id>18042846</id><snippet>my_package</snippet></ROW><ROW><id>18042846</id><snippet>__init__.py</snippet></ROW><ROW><id>18042846</id><snippet>pass</snippet></ROW><ROW><id>18042846</id><snippet>test_a.py</snippet></ROW><ROW><id>18042846</id><snippet>import os
bkp = os.getcwd()
os.chdir(r'..\..')
import my_package
os.chdir(bkp)
</snippet></ROW><ROW><id>18042846</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18042846</id><snippet>sys.path.append()</snippet></ROW><ROW><id>18042914</id><snippet>count()</snippet></ROW><ROW><id>18042914</id><snippet>Series</snippet></ROW><ROW><id>18042914</id><snippet>import pandas as pd
s = pd.Series([1,2,np.nan, 3])
print s.count()
</snippet></ROW><ROW><id>18042914</id><snippet>3
</snippet></ROW><ROW><id>18042914</id><snippet>ci = grouped.aggregate(lambda x: np.std(x) / x.count() * 1.96)
</snippet></ROW><ROW><id>18042973</id><snippet>write</snippet></ROW><ROW><id>18042973</id><snippet>close</snippet></ROW><ROW><id>18042973</id><snippet>textA.close()</snippet></ROW><ROW><id>18042973</id><snippet>with</snippet></ROW><ROW><id>18042973</id><snippet>with open('textA.txt', 'w') as f:
    f.write('\n'.join(lines[1:72]))
</snippet></ROW><ROW><id>18042973</id><snippet>with open('textA.txt') as f:
    print f.readlines()
</snippet></ROW><ROW><id>18043155</id><snippet>&gt;&gt;&gt; sentence = ['AASFG', 'BBBSDC', 'FEKGG', 'SDFGF']
&gt;&gt;&gt; [word for word in sentence.split() if word.endswith("GF")]
['SDFGF']
</snippet></ROW><ROW><id>18043155</id><snippet>sentence.split()</snippet></ROW><ROW><id>18043155</id><snippet>nltk.tokenize.word_tokenize(sentence)</snippet></ROW><ROW><id>18043155</id><snippet>enumerate</snippet></ROW><ROW><id>18043155</id><snippet>&gt;&gt;&gt; print list(enumerate(sentence))
[(0, 'AASFG'), (1, 'BBBSDC'), (2, 'FEKGG'), (3, 'SDFGF')]
</snippet></ROW><ROW><id>18043155</id><snippet>&gt;&gt;&gt; results = [(idx, word) for (idx, word) in enumerate(sentence) if word.endswith("GG")]
&gt;&gt;&gt; print results
[(2, 'FEKGG')]
</snippet></ROW><ROW><id>18043155</id><snippet>&gt;&gt;&gt; for r in results:
...     r_idx = r[0]
...     print "Prev", sentence[r_idx-1]
...     print "Next", sentence[r_idx+1]
...
Prev BBBSDC
Next SDFGF
</snippet></ROW><ROW><id>18043155</id><snippet>if r_idx == 0</snippet></ROW><ROW><id>18043155</id><snippet>if r_idx ==  len(sentence)</snippet></ROW><ROW><id>18043239</id><snippet>d8</snippet></ROW><ROW><id>18043239</id><snippet>linux-gate.so.1</snippet></ROW><ROW><id>18043239</id><snippet>libpthread.so.0</snippet></ROW><ROW><id>18043239</id><snippet>libstdc++.so.6</snippet></ROW><ROW><id>18043239</id><snippet>libm.so.6</snippet></ROW><ROW><id>18043239</id><snippet>libgcc_s.so.1</snippet></ROW><ROW><id>18043239</id><snippet>libc.so.6</snippet></ROW><ROW><id>18043274</id><snippet>divided_pass</snippet></ROW><ROW><id>18043274</id><snippet>0</snippet></ROW><ROW><id>18043274</id><snippet>i</snippet></ROW><ROW><id>18043274</id><snippet>def find_primes(limit):
    prime_holder = [2, 3, 5 ,7]
    for i in range(11, 20000):
        divided_pass = 0
        for j in range(0, len(prime_holder)):
            if i%prime_holder[j] != 0:
                divided_pass += 1
        if divided_pass == len(prime_holder):
            prime_holder.append(i)
        if len(prime_holder)-1 == limit:
            break
    return prime_holder

&gt;&gt;&gt; print find_primes(50)
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233]
</snippet></ROW><ROW><id>18043274</id><snippet>for j in range(len(...))</snippet></ROW><ROW><id>18043274</id><snippet>for j in prime_holder: if i % j != 0</snippet></ROW><ROW><id>18043274</id><snippet>for-else</snippet></ROW><ROW><id>18043274</id><snippet>else</snippet></ROW><ROW><id>18043274</id><snippet>break</snippet></ROW><ROW><id>18043274</id><snippet>def find_primes(limit):
    prime_holder = [2, 3, 5 ,7]
    for i in range(11, 20000):
        for j in prime_holder:
            if i%j == 0:
                break
        else:
            prime_holder.append(i)
        if len(prime_holder)-1 == limit:
            break
    return prime_holder
</snippet></ROW><ROW><id>18043334</id><snippet>new_list = [[b for _,b in sub] for sub in mx]
</snippet></ROW><ROW><id>18043334</id><snippet>&gt;&gt;&gt; new_list
[[2, 1, 1, 1, 1, 3, 4, 2, 5, 1], [1, 5, 2, 1, 1, 1, 1, 1, 1, 2], [2, 1, 1, 1, 2, 1, 1, 1, 1, 1]]
</snippet></ROW><ROW><id>18043832</id><snippet>in</snippet></ROW><ROW><id>18043832</id><snippet>while inp is not -1</snippet></ROW><ROW><id>18043832</id><snippet>while inp != -1</snippet></ROW><ROW><id>18043832</id><snippet>inp</snippet></ROW><ROW><id>18043832</id><snippet>in</snippet></ROW><ROW><id>18043832</id><snippet>getnumber</snippet></ROW><ROW><id>18043832</id><snippet>def getnumber(strs):
    num = int(strs)
    return -1 if num &lt; 0 else num
</snippet></ROW><ROW><id>18043834</id><snippet>def reader(self,fd,event):
     result = b""
     if event == self.loop.READ:
         self.conn, self.addr = self.sock.accept() 
</snippet></ROW><ROW><id>18043834</id><snippet> def reader(self,fd,event):
     result = b""
     if event == self.loop.READ:
         try:
             self.conn, self.addr = self.sock.accept() # we get stuck here
             self.connl.append(self.conn)
         except Exception as e:
             pass
</snippet></ROW><ROW><id>18044018</id><snippet>kw = Combine(Word(alphas + nums) + Literal(';'))('KEY')
body1 = delimitedList(OneOrMore(Word(alphas + nums)) +~kw)('Body')
g1 = OneOrMore(Group(kw + body1))
</snippet></ROW><ROW><id>18044018</id><snippet>body1 = delimitedList(OneOrMore(Word(alphas + nums)) +~kw)('Body')
</snippet></ROW><ROW><id>18044018</id><snippet>body1 = delimitedList(OneOrMore(~kw + Word(alphas + nums)))('Body')
</snippet></ROW><ROW><id>18044018</id><snippet>delimitedList</snippet></ROW><ROW><id>18044018</id><snippet>delimitedList</snippet></ROW><ROW><id>18044018</id><snippet>from pyparsing import *

kw = Combine(Word(alphas + nums) + Literal(';'))('KEY')
body1 = OneOrMore(~kw + Word(alphas + nums))('Body')
g1 = OneOrMore(Group(kw + body1))

msg = [  """NOW; is the time for a few good ones to come to the aid
of new things to come for it is almost time for
a tornado to strike upon a small hill
when least expected.
lastly; another day progresses and
then we find that which we seek
and finally we will
find our happiness perhaps its closer than 1 or 2 years or not so
    """,
             '',
          ][0]

result = g1.parseString(msg)
# we expect multiple groups, each containing "KEY" and "Body" names,
# so iterate over groups, and dump the contents of each
for res in result:
    print res.dump()
</snippet></ROW><ROW><id>18044018</id><snippet>scanString</snippet></ROW><ROW><id>18044018</id><snippet>result,start,end = next(g1.scanString(msg))
print len(msg),end
</snippet></ROW><ROW><id>18044018</id><snippet>320 161
</snippet></ROW><ROW><id>18044018</id><snippet>print msg[end:end+10]
</snippet></ROW><ROW><id>18044018</id><snippet>.
lastly;
</snippet></ROW><ROW><id>18044018</id><snippet>parseString</snippet></ROW><ROW><id>18044018</id><snippet>['NOW;', 'is', 'the', 'time', 'for', 'a', 'few', 'good', 'ones', 'to', 'come', 'to', 'the', 'aid', 'of', 'new', 'things', 'to', 'come', 'for', 'it', 'is', 'almost', 'time', 'for', 'a', 'tornado', 'to', 'strike', 'upon', 'a', 'small', 'hill', 'when', 'least', 'expected']
- Body: ['is', 'the', 'time', 'for', 'a', 'few', 'good', 'ones', 'to', 'come', 'to', 'the', 'aid', 'of', 'new', 'things', 'to', 'come', 'for', 'it', 'is', 'almost', 'time', 'for', 'a', 'tornado', 'to', 'strike', 'upon', 'a', 'small', 'hill', 'when', 'least', 'expected']
- KEY: NOW;
['lastly;', 'another', 'day', 'progresses', 'and', 'then', 'we', 'find', 'that', 'which', 'we', 'seek', 'and', 'finally', 'we', 'will', 'find', 'our', 'happiness', 'perhaps', 'its', 'closer', 'than', '1', 'or', '2', 'years', 'or', 'not', 'so']
- Body: ['another', 'day', 'progresses', 'and', 'then', 'we', 'find', 'that', 'which', 'we', 'seek', 'and', 'finally', 'we', 'will', 'find', 'our', 'happiness', 'perhaps', 'its', 'closer', 'than', '1', 'or', '2', 'years', 'or', 'not', 'so']
- KEY: lastly;
</snippet></ROW><ROW><id>18044018</id><snippet>PUNC = oneOf(". , ? ! : &amp; $")
</snippet></ROW><ROW><id>18044018</id><snippet>body1 = OneOrMore(~kw + (Word(alphas + nums) | PUNC))('Body')
</snippet></ROW><ROW><id>18044040</id><snippet>&gt;&gt;&gt; from pandas.io.data import DataReader
&gt;&gt;&gt; from pandas import Panel, DataFrame

&gt;&gt;&gt; symbols = ['AAPL', 'GLD', 'SPX', 'MCD']
&gt;&gt;&gt; data = dict((symbol, DataReader(symbol, "yahoo", pause=1)) for symbol in symbols)
&gt;&gt;&gt; panel = Panel(data).swapaxes('items', 'minor')
&gt;&gt;&gt; closing = panel['Close'].dropna()
&gt;&gt;&gt; closing.head()

             AAPL    GLD     MCD     SPX
Date                
2010-01-04   214.01  109.80  62.78   1132.99
2010-01-05   214.38  109.70  62.30   1136.52
2010-01-06   210.97  111.51  61.45   1137.14
2010-01-07   210.58  110.82  61.90   1141.69
2010-01-08   211.98  111.37  61.84   1144.98
</snippet></ROW><ROW><id>18044056</id><snippet>init_logger</snippet></ROW><ROW><id>18044062</id><snippet>map(lambda x: x if x[0] == 'A' else "A" + x, y)
</snippet></ROW><ROW><id>18044062</id><snippet>[x if x[0] == 'A' else "A" + x for x in y]
</snippet></ROW><ROW><id>18044062</id><snippet>if</snippet></ROW><ROW><id>18044062</id><snippet>&gt;&gt;&gt; y = ['Alligator', 'pple', 'banana']
&gt;&gt;&gt; map(lambda x: x if x[0] == 'A' else "A" + x, y)
['Alligator', 'Apple', 'Abanana']
&gt;&gt;&gt; [x if x[0] == 'A' else "A" + x for x in y]
['Alligator', 'Apple', 'Abanana']
</snippet></ROW><ROW><id>18044210</id><snippet>namedtuple</snippet></ROW><ROW><id>18044210</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Point = namedtuple('Point', ['x', 'y'])
&gt;&gt;&gt; p = Point(10,20)
&gt;&gt;&gt; p.x
10
&gt;&gt;&gt; p.y
20
&gt;&gt;&gt; p.x = 100
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: can't set attribute
</snippet></ROW><ROW><id>18044289</id><snippet>x.execute(...)</snippet></ROW><ROW><id>18044289</id><snippet>    x.execute("INSERT INTO documents(documentname) VALUES (%s)", (fname,))
</snippet></ROW><ROW><id>18044289</id><snippet>conn.commit()
</snippet></ROW><ROW><id>18044622</id><snippet>[POINTER][1](c_float)</snippet></ROW><ROW><id>18044622</id><snippet>import ctypes

libfoo = ctypes.cdll.LoadLibrary('./foo.so')
foo = libfoo.foo
foo.argtypes = ()
foo.restype = ctypes.POINTER(ctypes.c_float)
result = foo()
print(result[0], result[1])
</snippet></ROW><ROW><id>18044820</id><snippet>console_scripts</snippet></ROW><ROW><id>18044820</id><snippet>my_scripts</snippet></ROW><ROW><id>18045050</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; d = {1: 7, 2: 8, 3: 9, 4: 7, 5: 8, 6: 9, 7: 7, 8: 8, 9: 9, 10: 9}
&gt;&gt;&gt; Counter(d.values())
Counter({9: 4, 8: 3, 7: 3})
&gt;&gt;&gt; Counter(d.values()).most_common()
[(9, 4), (8, 3), (7, 3)]
</snippet></ROW><ROW><id>18045133</id><snippet>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\foo.exe</snippet></ROW><ROW><id>18045133</id><snippet>import _winreg
handle = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE,
    r"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\excel.exe")

num_values = _winreg.QueryInfoKey(handle)[1]
for i in xrange(num_values):
    print _winreg.EnumValue(handle, i)
</snippet></ROW><ROW><id>18045291</id><snippet>     loqootvMSG = {'fromEMAIL': 'uEmail', 'toCHANNELID': 'channelID', 'timeSENT': 'uTime', 'profilePIC': "instaINFO['data']['user']['profile_picture']",'userNAME': "instaINFO['data']['user']['username']", 'msgBODY': "instaINFO['data']['caption']['text']", 'msgIMAGE': "instaINFO['data']['images']['standard_resolution']['url']"}
</snippet></ROW><ROW><id>18045291</id><snippet>     loqootvMSG = {'fromEMAIL': uEmail, 'toCHANNELID': channelID, 'timeSENT': uTime, 'profilePIC': instaINFO['data']['user']['profile_picture'],'userNAME': instaINFO['data']['user']['username'], 'msgBODY': instaINFO['data']['caption']['text'], 'msgIMAGE': instaINFO['data']['images']['standard_resolution']['url']}
</snippet></ROW><ROW><id>18045291</id><snippet>uEmail</snippet></ROW><ROW><id>18045291</id><snippet>'uEmail'</snippet></ROW><ROW><id>18045302</id><snippet>link = url_for("abc_pages", projectName = "project_B", pageName = "page_B2")
</snippet></ROW><ROW><id>18045302</id><snippet>url_for</snippet></ROW><ROW><id>18045302</id><snippet>/</snippet></ROW><ROW><id>18045302</id><snippet>/</snippet></ROW><ROW><id>18045302</id><snippet>/project_A</snippet></ROW><ROW><id>18045302</id><snippet>project_B/page_B2</snippet></ROW><ROW><id>18045302</id><snippet>/project_A/project_B/page_B2</snippet></ROW><ROW><id>18045302</id><snippet>/project_B/page_B2</snippet></ROW><ROW><id>18045490</id><snippet>self.waitmuchmore(value)</snippet></ROW><ROW><id>18045490</id><snippet>waitmuchmore</snippet></ROW><ROW><id>18045490</id><snippet>lambda</snippet></ROW><ROW><id>18045490</id><snippet>functools.partial</snippet></ROW><ROW><id>18045490</id><snippet>waitmuchmore</snippet></ROW><ROW><id>18045490</id><snippet>value</snippet></ROW><ROW><id>18045490</id><snippet>self.after</snippet></ROW><ROW><id>18045490</id><snippet>lambda: self.waitmuchmore(value)
</snippet></ROW><ROW><id>18045490</id><snippet>import functools
functools.partial(self.waitmuchmore, value)
</snippet></ROW><ROW><id>18045539</id><snippet>test</snippet></ROW><ROW><id>18045539</id><snippet>testEqual()</snippet></ROW><ROW><id>18045539</id><snippet>test</snippet></ROW><ROW><id>18045539</id><snippet>test.py</snippet></ROW><ROW><id>18045575</id><snippet>inspect</snippet></ROW><ROW><id>18045575</id><snippet>import inspect

def b():
    f = inspect.currentframe()
    current = inspect.getframeinfo(f)
    caller = inspect.getframeinfo(f.f_back)
    #caller = inspect.getframeinfo(inspect.getouterframes(f)[1][0])
    print(__name__, current.filename, current.function, current.lineno, caller.function)

def a():
    b()

a()
</snippet></ROW><ROW><id>18045900</id><snippet>headers</snippet></ROW><ROW><id>18045900</id><snippet>items</snippet></ROW><ROW><id>18045900</id><snippet>{% for key, value in headers.items %}
    &lt;tr&gt;&lt;td&gt; {{ key }} &lt;/td&gt;&lt;td&gt;{{ value }}&lt;/td&gt;&lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>18045900</id><snippet>{{ headers.k }}</snippet></ROW><ROW><id>18045900</id><snippet>headers['k']</snippet></ROW><ROW><id>18045900</id><snippet>request.META</snippet></ROW><ROW><id>18045900</id><snippet>k</snippet></ROW><ROW><id>18046016</id><snippet>test = TEST()
print test.x()
</snippet></ROW><ROW><id>18046016</id><snippet>class TEST:
    def __init__(self):
        self._x = 6
    def x(self):
        return(self._x)
</snippet></ROW><ROW><id>18046016</id><snippet>x</snippet></ROW><ROW><id>18046221</id><snippet>&gt;&gt;&gt; pictures = ['abc.jpg', 'abc.gif', 'abc.png', 'cde.jpg']
&gt;&gt;&gt; [pic for pic in pictures if pic.endswith('jpg')]
['abc.jpg', 'cde.jpg']
</snippet></ROW><ROW><id>18046221</id><snippet>filter()</snippet></ROW><ROW><id>18046221</id><snippet>lambda()</snippet></ROW><ROW><id>18046221</id><snippet>&gt;&gt;&gt; filter(lambda pic: pic.endswith('jpg'), pictures)
['abc.jpg', 'cde.jpg']
</snippet></ROW><ROW><id>18046231</id><snippet>groupby</snippet></ROW><ROW><id>18046231</id><snippet>from itertools import groupby
from operator import itemgetter

l = (('A', '1', 'UTC\xb100:00'), ('B', '1', 'UTC+01:00'), ('C', '1', 'UTC+02:00'), ('D', '1', 'UTC+01:00'), ('E', '1', 'UTC\xb100:00'), ('F', '1', 'UTC+03:00'))

result = []
key_items = itemgetter(1, 2)
for key, group in groupby(sorted(l, key=key_items), key=key_items):
    item = []
    item.extend([k[0] for k in group])
    item.extend(key)
    result.append(tuple(item))

print tuple(result)
</snippet></ROW><ROW><id>18046231</id><snippet>(('B', 'D', '1', 'UTC+01:00'), ('C', '1', 'UTC+02:00'), ('F', '1', 'UTC+03:00'), ('A', 'E', '1', 'UTC\xb100:00'))
</snippet></ROW><ROW><id>18046345</id><snippet>Masked Edit Control</snippet></ROW><ROW><id>18046478</id><snippet>data = urllib.urlencode({'abc': 'def', 'fgh': 'jkl'})
urllib2.urlopen(urllib2.Request('http://stackoverflow.com/index.php'))
</snippet></ROW><ROW><id>18046498</id><snippet>pexpect</snippet></ROW><ROW><id>18046498</id><snippet>import pexpect

kg = pexpect.spawn('ssh-keygen -t rsa')
kg.expect('Enter same passphrase again:')
</snippet></ROW><ROW><id>18046555</id><snippet># -*- coding: utf-8 -*-
s = u"blah ascii_word etc شاهد word1 word 2"
words = s.split(u' ')
print words
# no error even tough my default system's encoding is ascii
</snippet></ROW><ROW><id>18046555</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getdefaultencoding()
'ascii' #I have ascii
</snippet></ROW><ROW><id>18046603</id><snippet>str(req.get_data())</snippet></ROW><ROW><id>18046603</id><snippet>req.get_data()</snippet></ROW><ROW><id>18046603</id><snippet>base64.b64encode(hmac(key, message, sha1).digest())</snippet></ROW><ROW><id>18046603</id><snippet>hmac(key, message, sha1).digest().encode('base64')</snippet></ROW><ROW><id>18046708</id><snippet>values = map(lambda x: x[0], d.values())
</snippet></ROW><ROW><id>18046708</id><snippet>[['1234'], ['nokia'], ['2013']]
</snippet></ROW><ROW><id>18046708</id><snippet>['1234', 'nokia', '2013']
</snippet></ROW><ROW><id>18046708</id><snippet>concat = reduce(lambda x, y: x + y, values, "")
</snippet></ROW><ROW><id>18046708</id><snippet>'1234nokia2013'
</snippet></ROW><ROW><id>18046743</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>18046743</id><snippet>.call</snippet></ROW><ROW><id>18046743</id><snippet>Popen</snippet></ROW><ROW><id>18046743</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>18046743</id><snippet>stdin</snippet></ROW><ROW><id>18046743</id><snippet>import subprocess
proc = subprocess.Popen('shell command', stdin=subprocess.PIPE)
proc.stdin.write("my data")
</snippet></ROW><ROW><id>18046859</id><snippet>lis = [('c', 'a', 'c', 'c', 'a', 'c', 'a', 'c', 'c', 'a', 'c', 'c'),
 ('g', 'a', 'g', 'g', 'g', 'a', 'g', 'g', 'a', 'g', 'g', 'g'),
 ('c', 'c', 'c', 'c', 'a', 'c', 'c', 'c', 'c', 'a', 'c', 'c'),
 ('g', 'a', 'a', 'a', 'a', 'a', 'g', 'a', 'a', 'a', 'a', 'g'),
 ('c', 'c', 'a', 'c', 'c', 'a', 'c', 'c', 'c', 'c', 'c', 'a'),
 ('g', 'g', 'g', 'g', 'g', 'g', 'g', 'a', 'a', 'g', 'g', 'a')]
def solve(lis):
    for row in lis:
        item1, item2 = set(row)
        c1, c2 = row.count(item1), row.count(item2)
        dic = {item1 : int(c1 &lt; c2), item2 : int(c2 &lt; c1)}
        yield [dic[x] for x in row]
...         
&gt;&gt;&gt; list(solve(lis))
[[0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],
[0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
[0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1]]
</snippet></ROW><ROW><id>18046859</id><snippet>collections.Counter</snippet></ROW><ROW><id>18046859</id><snippet>from collections import Counter
def solve(lis):
    for row in lis:
        c = Counter(row)
        maxx = max(c.values())
        yield [int(c[x] &lt; maxx) for x in row]
...         
&gt;&gt;&gt; pprint(list(solve(lis)))
[[0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],
 [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
 [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
 [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
 [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
 [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1]]
</snippet></ROW><ROW><id>18047281</id><snippet>for i in xrange(15):
    first = '(%s) %s' % (i, lst[i])
    padding = ' ' * (30 - len(first))
    second = '(%s) %s' % (i + 15, lst[i + 15])
    print '%s%s%s' % (first, padding, second)
</snippet></ROW><ROW><id>18047371</id><snippet>random.SystemRandom</snippet></ROW><ROW><id>18047371</id><snippet>os.urandom()</snippet></ROW><ROW><id>18047371</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; import random
&gt;&gt;&gt; rng = random.SystemRandom()
&gt;&gt;&gt; rng.random()
0.7195432667967437
&gt;&gt;&gt; rng.randint(0, sys.maxint)
3614556690529452993
</snippet></ROW><ROW><id>18047416</id><snippet>def oddlines(fileobj):
    return (line for index,line in enumerate(fileobj) if index % 2)

def evenlines(fileobj):
    return (line for index,line in enumerate(fileobj) if not index % 2)
</snippet></ROW><ROW><id>18047416</id><snippet>itertools.islice</snippet></ROW><ROW><id>18047611</id><snippet>plugin_url_for = plugin.url_for
_, dirs, _ = iter(os.walk(PATH_TO_DIRECTORY)).next()
items = [{
     'label': directory, 'path': plugin_url_for('test')
} for directory in dirs]
</snippet></ROW><ROW><id>18047947</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>18047947</id><snippet>chmod +x</snippet></ROW><ROW><id>18047947</id><snippet>./script.py readme.txt</snippet></ROW><ROW><id>18047947</id><snippet>from sys import argv</snippet></ROW><ROW><id>18047947</id><snippet>argv</snippet></ROW><ROW><id>18047947</id><snippet>sys</snippet></ROW><ROW><id>18047947</id><snippet>argv</snippet></ROW><ROW><id>18047947</id><snippet>sys.argv</snippet></ROW><ROW><id>18047947</id><snippet>import sys</snippet></ROW><ROW><id>18047947</id><snippet>sys.argv</snippet></ROW><ROW><id>18047947</id><snippet>script, filename = argv</snippet></ROW><ROW><id>18047947</id><snippet>script = argv[0]
filename = argv[1]
</snippet></ROW><ROW><id>18047947</id><snippet>argv</snippet></ROW><ROW><id>18047947</id><snippet>file.read()</snippet></ROW><ROW><id>18048004</id><snippet>UPDATE_Statement = "Update paste set paste_content = %s where paste_id=%s"

cursor.execute(UPDATE_Statement, content)
</snippet></ROW><ROW><id>18048004</id><snippet>raw()</snippet></ROW><ROW><id>18048004</id><snippet>sqlite3</snippet></ROW><ROW><id>18048004</id><snippet>?</snippet></ROW><ROW><id>18048083</id><snippet>allt = []
with open('towers1.txt','r') as f:   
   for line in f:
        allt.append(line.split())

&gt;&gt;&gt;print allt[0]
['mw91', '42.927', '-72.84', '2.8']
&gt;&gt;&gt;print allt[0][1]
'42.927'
</snippet></ROW><ROW><id>18048083</id><snippet>line.split()</snippet></ROW><ROW><id>18048083</id><snippet>allt = []
with open('towers1.txt','r') as f:   
   for line in f:
         first, *_else = line.split() #Python3
         data = [first]
         float_nums = [float(x) for x in _else]
         data.extend(float_nums)
         allt.append(data)

&gt;&gt;&gt;print allt[0]
['mw91', 42.927, -72.84, 2.8]
</snippet></ROW><ROW><id>18048083</id><snippet>first, *_else = line.split()</snippet></ROW><ROW><id>18048083</id><snippet>first, _else = line.split()[0], line.split()[1:]
</snippet></ROW><ROW><id>18048083</id><snippet>[2]</snippet></ROW><ROW><id>18048083</id><snippet>allt</snippet></ROW><ROW><id>18048083</id><snippet> &gt;&gt;&gt; some_items = [item[2] for item in allt]
 &gt;&gt;&gt; some_items
 [-72.84, -72.58, -72.679]
</snippet></ROW><ROW><id>18048149</id><snippet>this = lower = upper = []
</snippet></ROW><ROW><id>18048149</id><snippet>this</snippet></ROW><ROW><id>18048149</id><snippet>lower</snippet></ROW><ROW><id>18048149</id><snippet>upper</snippet></ROW><ROW><id>18048149</id><snippet>this = []
lower = []
upper = []
</snippet></ROW><ROW><id>18048345</id><snippet># Error handling rule
def t_error(t):
    print "Illegal character '%s'" % t.value[0]
    t.lexer.skip(1)
</snippet></ROW><ROW><id>18048345</id><snippet>__hash__</snippet></ROW><ROW><id>18048345</id><snippet>#!/usr/bin/python

import ply.lex as lex

class MyLexer:

    errors = []

    # List of token names.   This is always required
    tokens = (
       'NUMBER',
       'PLUS',
       'MINUS',
       'TIMES',
       'DIVIDE',
       'LPAREN',
       'RPAREN',
    )

    # Regular expression rules for simple tokens
    t_PLUS    = r'\+'
    t_MINUS   = r'-'
    t_TIMES   = r'\*'
    t_DIVIDE  = r'/'
    t_LPAREN  = r'\('
    t_RPAREN  = r'\)'

    # A regular expression rule with some action code
    # Note addition of self parameter since we're in a class
    def t_NUMBER(self,t):
        r'\d+'
        t.value = int(t.value)
        return t

    # Define a rule so we can track line numbers
    def t_newline(self,t):
        r'\n+'
        t.lexer.lineno += len(t.value)

    # A string containing ignored characters (spaces and tabs)
    t_ignore  = ' \t'

    # Error handling rule
    def t_error(self,t):
        self.errors.append("Illegal character '%s'" % t.value[0])
        t.lexer.skip(1)

    # Build the lexer
    def build(self,**kwargs):
        self.errors = []
        self.lexer = lex.lex(module=self, **kwargs)

    # Test it output
    def test(self,data):
        self.errors = []
        self.lexer.input(data)
        while True:
             tok = self.lexer.token()
             if not tok: break
             print tok

    def report(self):
        return self.errors
</snippet></ROW><ROW><id>18048345</id><snippet># Build the lexer and try it out
m = MyLexer()
m.build()           # Build the lexer
m.test("3 + 4 + 5")     # Test it
print m.report()
m.test("3 + A + B")
print m.report()
</snippet></ROW><ROW><id>18048345</id><snippet>LexToken(NUMBER,3,1,0)
LexToken(PLUS,'+',1,2)
LexToken(NUMBER,4,1,4)
LexToken(PLUS,'+',1,6)
LexToken(NUMBER,5,1,8)
[]
LexToken(NUMBER,3,1,0)
LexToken(PLUS,'+',1,2)
LexToken(PLUS,'+',1,6)
["Illegal character 'A'", "Illegal character 'B'"]
</snippet></ROW><ROW><id>18048372</id><snippet>__dict__</snippet></ROW><ROW><id>18048372</id><snippet>getattr()</snippet></ROW><ROW><id>18048372</id><snippet>method</snippet></ROW><ROW><id>18048372</id><snippet>MethodType()</snippet></ROW><ROW><id>18048372</id><snippet>method</snippet></ROW><ROW><id>18048372</id><snippet>k</snippet></ROW><ROW><id>18048372</id><snippet>k</snippet></ROW><ROW><id>18048372</id><snippet>@class_or_instance
def method(self, verbose=False, _async_method_name=k, *args, **kwargs):
    response = getattr(self, _async_method_name)(*args,**kwargs)
    result = self._parse_result(response, verbose=verbose)
    return result

cls.__dict__[methodname] = method
</snippet></ROW><ROW><id>18048372</id><snippet>cls</snippet></ROW><ROW><id>18048372</id><snippet>_async_method_name</snippet></ROW><ROW><id>18048372</id><snippet>*args</snippet></ROW><ROW><id>18048372</id><snippet>def process_asyncs(cls):

    def create_method(async_method):

        @class_or_instance
        def newmethod(self, *args, **kwargs):
            if 'verbose' in kwargs:
                verbose = kwargs.pop('verbose')
            else:
                verbose = False
            response = async_method(*args,**kwargs)
            result = self._parse_result(response, verbose=verbose)
            return result
        return newmethod

    methods = cls.__dict__.keys()
    for k in methods:
        methodname = k.replace("_async","")
        if 'async' in k and methodname not in methods:
            async_method = getattr(cls, k)
            setattr(cls, methodname, create_method(async_method))

    return cls
</snippet></ROW><ROW><id>18048395</id><snippet>&gt;&gt;&gt; def t():
...     return "Hi"
...
&gt;&gt;&gt; a = t
&gt;&gt;&gt; a
&lt;function t at 0x01BECA70&gt;
&gt;&gt;&gt; a = t()
&gt;&gt;&gt; a
'Hi'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18048448</id><snippet>work_queue</snippet></ROW><ROW><id>18048448</id><snippet>work_queue</snippet></ROW><ROW><id>18048448</id><snippet>t1.join()
t2.join()
</snippet></ROW><ROW><id>18048695</id><snippet>cssselect</snippet></ROW><ROW><id>18048695</id><snippet>pip install cssselect
</snippet></ROW><ROW><id>18048719</id><snippet>In [15]: import numpy as np

In [16]: x = np.array([(9,), (1,), (1, 12), (9,), (8,)])

In [17]: np.hstack(x)
Out[17]: array([ 9,  1,  1, 12,  9,  8])
</snippet></ROW><ROW><id>18048727</id><snippet>itertools.islice</snippet></ROW><ROW><id>18048727</id><snippet>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; lis = range(20)
&gt;&gt;&gt; for x in islice(lis, 10, None, 1):
...     print x
...     
10
11
12
13
14
15
16
17
18
19
</snippet></ROW><ROW><id>18048727</id><snippet>islice</snippet></ROW><ROW><id>18048727</id><snippet>islice</snippet></ROW><ROW><id>18048727</id><snippet>&gt;&gt;&gt; def func(lis, n):
        it = iter(lis)
        for x in islice(it, n, None, 1):pass
...     
&gt;&gt;&gt; def func1(lis, n):
        #it = iter(lis)
        for x in islice(lis, n, None, 1):pass
...     
&gt;&gt;&gt; def func2(lis, n):
        for x in lis[n:]:pass
...     
&gt;&gt;&gt; lis = range(10**6)

&gt;&gt;&gt; n = 100
&gt;&gt;&gt; %timeit func(lis, n)
10 loops, best of 3: 62.1 ms per loop
&gt;&gt;&gt; %timeit func1(lis, n)
1 loops, best of 3: 60.8 ms per loop
&gt;&gt;&gt; %timeit func2(lis, n)
1 loops, best of 3: 82.8 ms per loop

&gt;&gt;&gt; n = 1000
&gt;&gt;&gt; %timeit func(lis, n)
10 loops, best of 3: 64.4 ms per loop
&gt;&gt;&gt; %timeit func1(lis, n)
1 loops, best of 3: 60.3 ms per loop
&gt;&gt;&gt; %timeit func2(lis, n)
1 loops, best of 3: 85.8 ms per loop

&gt;&gt;&gt; n = 10**4
&gt;&gt;&gt; %timeit func(lis, n)
10 loops, best of 3: 61.4 ms per loop
&gt;&gt;&gt; %timeit func1(lis, n)
10 loops, best of 3: 61 ms per loop
&gt;&gt;&gt; %timeit func2(lis, n)
1 loops, best of 3: 80.8 ms per loop


&gt;&gt;&gt; n = (10**6)/2
&gt;&gt;&gt; %timeit func(lis, n)
10 loops, best of 3: 39.2 ms per loop
&gt;&gt;&gt; %timeit func1(lis, n)
10 loops, best of 3: 39.6 ms per loop
&gt;&gt;&gt; %timeit func2(lis, n)
10 loops, best of 3: 41.5 ms per loop

&gt;&gt;&gt; n = (10**6)-1000
&gt;&gt;&gt; %timeit func(lis, n)
100 loops, best of 3: 18.9 ms per loop
&gt;&gt;&gt; %timeit func1(lis, n)
100 loops, best of 3: 18.8 ms per loop
&gt;&gt;&gt; %timeit func2(lis, n)
10000 loops, best of 3: 50.9 us per loop    #clear winner for large index
&gt;&gt;&gt; %timeit func1(lis, n)
</snippet></ROW><ROW><id>18048727</id><snippet>islice</snippet></ROW><ROW><id>18048727</id><snippet>&gt;&gt;&gt; lis = range(1000)
&gt;&gt;&gt; n = 100
&gt;&gt;&gt; %timeit func(lis, n)
10000 loops, best of 3: 60.7 us per loop
&gt;&gt;&gt; %timeit func1(lis, n)
10000 loops, best of 3: 59.6 us per loop
&gt;&gt;&gt; %timeit func2(lis, n)
10000 loops, best of 3: 59.9 us per loop

&gt;&gt;&gt; n = 500
&gt;&gt;&gt; %timeit func(lis, n)
10000 loops, best of 3: 38.4 us per loop
&gt;&gt;&gt; %timeit func1(lis, n)
10000 loops, best of 3: 33.9 us per loop
&gt;&gt;&gt; %timeit func2(lis, n)
10000 loops, best of 3: 26.6 us per loop

&gt;&gt;&gt; n = 900
&gt;&gt;&gt; %timeit func(lis, n)
10000 loops, best of 3: 20.1 us per loop
&gt;&gt;&gt; %timeit func1(lis, n)
10000 loops, best of 3: 17.2 us per loop
&gt;&gt;&gt; %timeit func2(lis, n)
10000 loops, best of 3: 11.3 us per loop
</snippet></ROW><ROW><id>18048743</id><snippet>write</snippet></ROW><ROW><id>18048743</id><snippet>flush</snippet></ROW><ROW><id>18048743</id><snippet>&gt;&gt;&gt; f.flush()
</snippet></ROW><ROW><id>18048743</id><snippet>close</snippet></ROW><ROW><id>18048743</id><snippet>&gt;&gt;&gt; f.close()
</snippet></ROW><ROW><id>18048743</id><snippet>with</snippet></ROW><ROW><id>18048743</id><snippet>with open('some file.txt', 'w') as f:
    f.write('some text')
    # ...
</snippet></ROW><ROW><id>18048743</id><snippet>with</snippet></ROW><ROW><id>18048776</id><snippet>import tkinter as tk

root = tk.Tk()

status = tk.Label(root, text="Working")
status.grid()

def update_status():

    # Get the current message
    current_status = status["text"]

    # If the message is "Working...", start over with "Working"
    if current_status.endswith("..."): current_status = "Working"

    # If not, then just add a "." on the end
    else: current_status += "."

    # Update the message
    status["text"] = current_status

    # After 1 second, update the status
    root.after(1000, update_status)

# Launch the status message after 1 millisecond (when the window is loaded)
root.after(1, update_status)

root.mainloop()
</snippet></ROW><ROW><id>18048776</id><snippet>import tkinter as tk

# You will need the ttk module for this
from tkinter import ttk

def update_status(step):

    # Step here is how much to increment the progressbar by.
    # It is in relation to the progressbar's length.
    # Since I made the length 100 and I am increasing by 10 each time,
    # there will be 10 times it increases before it restarts
    progress.step(step)

    # You can call 'update_status' whenever you want in your script
    # to increase the progressbar by whatever amount you want.
    root.after(1000, lambda: update_status(10))

root = tk.Tk()

progress = ttk.Progressbar(root, length=100)
progress.pack()

progress.after(1, lambda: update_status(10))

root.mainloop()
</snippet></ROW><ROW><id>18048846</id><snippet>class Category(models.Model):
    category = models.CharField(max_length=100)
</snippet></ROW><ROW><id>18048846</id><snippet>name</snippet></ROW><ROW><id>18048846</id><snippet>category</snippet></ROW><ROW><id>18048846</id><snippet>models.ForeignKey("Category")</snippet></ROW><ROW><id>18048846</id><snippet>class Article(models.Model):
    title = models.CharField(max_length=200)
    body = models.TextField()
    pub_date = models.DateTimeField(auto_now_add=True)
    category = models.ManyToManyField(Category)
</snippet></ROW><ROW><id>18048846</id><snippet>categories</snippet></ROW><ROW><id>18048846</id><snippet>Category</snippet></ROW><ROW><id>18048846</id><snippet>Article</snippet></ROW><ROW><id>18048846</id><snippet>articles</snippet></ROW><ROW><id>18048846</id><snippet>    categories = models.ManyToManyField(Category, related_name="articles")
</snippet></ROW><ROW><id>18048846</id><snippet>get_object_or_404(Category, id=int(cat_id, 10)).articles.all()
</snippet></ROW><ROW><id>18048846</id><snippet>def article_detail(request, article_id=1):
</snippet></ROW><ROW><id>18048846</id><snippet>def article_create(request):
    if request.method == 'POST': # If the form has been submitted...
        form = ArticleForm(request.POST) # A form bound to the POST data
        if form.is_valid(): # All validation rules pass
            article = Article.objects.create(
                title=form.cleaned_data['title'],
                body=form.cleaned_data['body'],
                category=form.cleaned_data['category']
            )
</snippet></ROW><ROW><id>18048846</id><snippet>ModelForm</snippet></ROW><ROW><id>18048846</id><snippet>def article_create(request):
    if request.method == 'POST': # If the form has been submitted...
        form = ArticleForm(request.POST) # A form bound to the POST data
        if form.is_valid(): # All validation rules pass
            form.save()
        return redirect('article_index') # Redirect after POST
else:
    form = ArticleForm() # An unbound form

return render(request, 'article_form.html', {'form': form})
</snippet></ROW><ROW><id>18048846</id><snippet>class ArticleForm(forms.Form):
</snippet></ROW><ROW><id>18048846</id><snippet>ModelForm</snippet></ROW><ROW><id>18048846</id><snippet>class ArticleForm(forms.ModelForm):
    class Meta:
        model = Article
        fields = ["title", "body", "category"]
        widgets = {
            'body': forms.Textarea(),
            'category': forms.CheckboxSelectMultiple()
        }
</snippet></ROW><ROW><id>18048846</id><snippet>ModelForm.save()</snippet></ROW><ROW><id>18048846</id><snippet>def article_edit(request, article_id):
    article = get_object_or_404(Article, id=int(article_id, 10))

    if request.method == 'POST': # If the form has been submitted...
        form = ArticleForm(request.POST, instance=article)
        if form.is_valid(): # All validation rules pass
            form.save()
        return redirect('article_index') # Redirect after POST
else:
    form = ArticleForm(instance=article)

return render(request, 'article_form.html', {'form': form})
</snippet></ROW><ROW><id>18048846</id><snippet>article_create</snippet></ROW><ROW><id>18048846</id><snippet>article_edit</snippet></ROW><ROW><id>18048846</id><snippet>def article_modify(request, article_id=None):
    if article_id is not None:
        article = get_object_or_404(Article, id=int(article_id, 10))
    else:
        article = None

    if request.method == 'POST': # If the form has been submitted...
        form = ArticleForm(request.POST, instance=article)
        if form.is_valid(): # All validation rules pass
            form.save()
        return redirect('article_index') # Redirect after POST
else:
    form = ArticleForm(instance=article)

return render(request, 'article_form.html', {'form': form})
</snippet></ROW><ROW><id>18048846</id><snippet>url(r"^/article/edit/(?P&lt;article_id&gt;[0-9]+)$", "app.views.article_modify", name="edit"),
url(r"^/article/new$", "app.views.article_modify", name="new"),
</snippet></ROW><ROW><id>18048990</id><snippet>execute_manager</snippet></ROW><ROW><id>18048990</id><snippet>execute_manager</snippet></ROW><ROW><id>18049174</id><snippet>brew link --overwrite python</snippet></ROW><ROW><id>18049174</id><snippet>python</snippet></ROW><ROW><id>18049231</id><snippet>\.\s+[A-Z"\']</snippet></ROW><ROW><id>18049231</id><snippet>I am Sam. Sam I am.</snippet></ROW><ROW><id>18049231</id><snippet>I am Sam</snippet></ROW><ROW><id>18049231</id><snippet>am I am</snippet></ROW><ROW><id>18049231</id><snippet>(?&lt;=\.)\s+(?=[A-Z"\'])</snippet></ROW><ROW><id>18049231</id><snippet>I am Sam.</snippet></ROW><ROW><id>18049231</id><snippet>Sam I am.</snippet></ROW><ROW><id>18049231</id><snippet>\.\s+(?=[A-Z"\'])</snippet></ROW><ROW><id>18049231</id><snippet>I am Sam</snippet></ROW><ROW><id>18049231</id><snippet>Sam I am</snippet></ROW><ROW><id>18049231</id><snippet>\.(?:\s+(?=[A-Z"\'])|\s*$)</snippet></ROW><ROW><id>18049231</id><snippet>?:</snippet></ROW><ROW><id>18049231</id><snippet>split('(+)', 'a+b+c'</snippet></ROW><ROW><id>18049231</id><snippet>a</snippet></ROW><ROW><id>18049231</id><snippet>+</snippet></ROW><ROW><id>18049231</id><snippet>b</snippet></ROW><ROW><id>18049231</id><snippet>+</snippet></ROW><ROW><id>18049231</id><snippet>c</snippet></ROW><ROW><id>18049231</id><snippet>a</snippet></ROW><ROW><id>18049231</id><snippet>b</snippet></ROW><ROW><id>18049231</id><snippet>c</snippet></ROW><ROW><id>18049231</id><snippet>(?&lt;=\.\s+)(?=[A-Z"\'])</snippet></ROW><ROW><id>18049231</id><snippet>I am Sam.</snippet></ROW><ROW><id>18049231</id><snippet/></ROW><ROW><id>18049231</id><snippet>Sam I am.</snippet></ROW><ROW><id>18049411</id><snippet>&gt;&gt;&gt; def f(n):
...     print n
... 
&gt;&gt;&gt; fs = []
&gt;&gt;&gt; for i in range(3):
...     fs.append(lambda: f(i))
... 
&gt;&gt;&gt; fs[0]()
2
&gt;&gt;&gt; fs[1]()
2
&gt;&gt;&gt; fs[2]()
2
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>18049538</id><snippet>#!/usr/bin/env python
from google import gsearch
import math,sys
import json
import urllib

def gsearch(searchfor):
  query = urllib.urlencode({'q': searchfor})
  url = 'http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;%s' % query
  search_response = urllib.urlopen(url)
  search_results = search_response.read()
  results = json.loads(search_results)
  data = results['responseData']
  return data

args = sys.argv[1:]
m = 45000000000
if len(args) != 2:
        print "need two words as arguments"
        exit
n0 = int(gsearch(args[0])['cursor']['estimatedResultCount'])
n1 = int(gsearch(args[1])['cursor']['estimatedResultCount'])
n2 = int(gsearch(args[0]+" "+args[1])['cursor']['estimatedResultCount'])
l1 = max(math.log10(n0),math.log10(n1))-math.log10(n2)
l2 = math.log10(m)-min(math.log10(n0),math.log10(n1))
distance = l1/l2
print distance
</snippet></ROW><ROW><id>18049562</id><snippet>traceback.extract_stack()</snippet></ROW><ROW><id>18049562</id><snippet>''.join(traceback.format_stack())</snippet></ROW><ROW><id>18049562</id><snippet>traceback.print_stack()</snippet></ROW><ROW><id>18049600</id><snippet>for</snippet></ROW><ROW><id>18049600</id><snippet>tuple('Hello!' if i % 3 == 0 else 'Waiting' if i % 3 == 1 else 'Bye!' for i in range(10))
</snippet></ROW><ROW><id>18049600</id><snippet>itertools</snippet></ROW><ROW><id>18049600</id><snippet>from itertools import cycle, islice
tuple(islice(cycle(('Hello!', 'Waiting', 'Bye!')), 10))
</snippet></ROW><ROW><id>18049610</id><snippet>import math, sys

def prime_sieve(limit):
    # Mark everything prime to start
    primes = [1 for x in xrange(limit)]
    primes[0] = 0
    primes[1] = 0

    # Only need to sieve up to sqrt(limit)
    imax = int(math.sqrt(limit) + 1)

    i = 2
    while (i &lt; imax):
        j = i + i
        while j &lt; limit:
            primes[j] = 0
            j += i

        # Move i to next prime
        while True:
           i += 1
           if primes[i] == 1:
               break

    return primes

s = prime_sieve(2000000)
print(sum(i for i in xrange(len(s)) if s[i] == 1))
</snippet></ROW><ROW><id>18049752</id><snippet>u'\x00'</snippet></ROW><ROW><id>18049752</id><snippet>#!/usr/bin/env python2.7

from __future__ import print_function

from django.template import Template, Context
from django.conf import settings

settings.configure()

c = Context({'null': u'\x00', 'dbresult': u'\x00'})

t = Template(r"""
{% if dbresult == null %}
result is null
{% else %}
result is {{ dbresult }}
{% endif %}
""")

print(t.render(c))
</snippet></ROW><ROW><id>18049752</id><snippet>result is null</snippet></ROW><ROW><id>18049781</id><snippet># date is a string from the csv file.  
 if len(date) == 8 and all(isdigit(i) for i in date):  
# then it's either the year comes first or last

    date = ["-".join([date[0:4], date[4:6], date[6:8])],
            "-".join([date[0:2], date[2:4], date[4:8])]
           ]
    # only one should be a possible date. if both are and the month
    # combinations don't sort it out then it's too ambigious anyway.

# I'll do something similar for a string of 6 digits. but now I know that all
# strings that are digits only are now seperated.
# I'll also figure out which is the year (or make a reasonable guess and expand
# the number to 8 and make the spaces).

date = date.lower() # or an equivalent if it screws with symbols and numbers

for month in full_length_month_list:
  if month in date:
        # I know I can parse this.

for month in three_letter_month_list:
    if month in date:
        # I know I can parse this.

month_days = {'first':01, 'second':02, 'third':03, ... ,'thirty first': 31}
for string, number in month_days:
    date.replace(string,number)

for shorthand in ['st','nd','rd','th']:
    date.replace(shorthand, '')

date.replace('the','')

# Then I use a regex matcher to get 3 sets of digits: The longest set is the 
# year. The shortest two sets are either date or month. I can get the order
# based on the matcher. Then I can figure out by looping through if there is
# ever a date greater than 12. If so I know the order. I can also possibly
# track the replacements maybe. So that if jan/january was in the original
# string I already know anyway.
</snippet></ROW><ROW><id>18049874</id><snippet>QtDesigner</snippet></ROW><ROW><id>18049874</id><snippet>self.tabWidget.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                    "border:1px solid rgb(255, 170, 255);")
</snippet></ROW><ROW><id>18049874</id><snippet>Qtabwidget</snippet></ROW><ROW><id>18049874</id><snippet> QTabWidget::pane { /* The tab widget frame */
     border-top: 2px solid #C2C7CB;
     position: absolute;
     top: -0.5em;
 }

 QTabWidget::tab-bar {
     alignment: center;
 }

 /* Style the tab using the tab sub-control. Note that
     it reads QTabBar _not_ QTabWidget */
 QTabBar::tab {
     background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                 stop: 0 #E1E1E1, stop: 0.4 #DDDDDD,
                                 stop: 0.5 #D8D8D8, stop: 1.0 #D3D3D3);
     border: 2px solid #C4C4C3;
     border-bottom-color: #C2C7CB; /* same as the pane color */
     border-top-left-radius: 4px;
     border-top-right-radius: 4px;
     min-width: 8ex;
     padding: 2px;
 }

 QTabBar::tab:selected, QTabBar::tab:hover {
     background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                 stop: 0 #fafafa, stop: 0.4 #f4f4f4,
                                 stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);
 }

 QTabBar::tab:selected {
     border-color: #9B9B9B;
     border-bottom-color: #C2C7CB; /* same as pane color */
 }
</snippet></ROW><ROW><id>18050070</id><snippet>for i in range(0,100):
  if i != 0:
    pass
</snippet></ROW><ROW><id>18050070</id><snippet>for i in range(0,100):
  if i:
    pass
</snippet></ROW><ROW><id>18050070</id><snippet>$ python -m timeit 'for i in range(0,100):' ' if i != 0:' '  pass'
100000 loops, best of 3: 4.69 usec per loop
$ python -m timeit 'for i in range(0,100):' ' if i:' '  pass'
100000 loops, best of 3: 4.18 usec per loop
</snippet></ROW><ROW><id>18050070</id><snippet>&gt;&gt;&gt; def f():
...  for i in range(0,100):
...    if i:
...      pass
...
&gt;&gt;&gt; def g():
...  for i in range(0,100):
...    if i != 0:
...      pass
...
&gt;&gt;&gt; from dis import dis
&gt;&gt;&gt; dis(f)
  2           0 SETUP_LOOP              32 (to 35)
              3 LOAD_GLOBAL              0 (range)
              6 LOAD_CONST               1 (0)
              9 LOAD_CONST               2 (100)
             12 CALL_FUNCTION            2
             15 GET_ITER
        &gt;&gt;   16 FOR_ITER                15 (to 34)
             19 STORE_FAST               0 (i)

  3          22 LOAD_FAST                0 (i)
             25 POP_JUMP_IF_FALSE       16

  4          28 JUMP_ABSOLUTE           16
             31 JUMP_ABSOLUTE           16
        &gt;&gt;   34 POP_BLOCK
        &gt;&gt;   35 LOAD_CONST               0 (None)
             38 RETURN_VALUE
&gt;&gt;&gt; dis(g)
  2           0 SETUP_LOOP              38 (to 41)
              3 LOAD_GLOBAL              0 (range)
              6 LOAD_CONST               1 (0)
              9 LOAD_CONST               2 (100)
             12 CALL_FUNCTION            2
             15 GET_ITER
        &gt;&gt;   16 FOR_ITER                21 (to 40)
             19 STORE_FAST               0 (i)

  3          22 LOAD_FAST                0 (i)
             25 LOAD_CONST               1 (0)   &lt;-- this only happens in != 0
             28 COMPARE_OP               3 (!=)  &lt;-- this only happens in != 0
             31 POP_JUMP_IF_FALSE       16

  4          34 JUMP_ABSOLUTE           16
             37 JUMP_ABSOLUTE           16
        &gt;&gt;   40 POP_BLOCK
        &gt;&gt;   41 LOAD_CONST               0 (None)
             44 RETURN_VALUE
</snippet></ROW><ROW><id>18050168</id><snippet>mn != mx</snippet></ROW><ROW><id>18050168</id><snippet>mn &lt; mx</snippet></ROW><ROW><id>18050168</id><snippet>pivot = mn + ((mx - mn) / 2)</snippet></ROW><ROW><id>18050168</id><snippet>pivot = int(math.floor((mn + mx) / 2))</snippet></ROW><ROW><id>18050168</id><snippet>pivot = mn + int(math.floor((mx - mn) / 2))</snippet></ROW><ROW><id>18050168</id><snippet>mn</snippet></ROW><ROW><id>18050168</id><snippet>mx</snippet></ROW><ROW><id>18050168</id><snippet>[mn, mx)</snippet></ROW><ROW><id>18050168</id><snippet>mx</snippet></ROW><ROW><id>18050168</id><snippet>a</snippet></ROW><ROW><id>18050168</id><snippet>mx</snippet></ROW><ROW><id>18050168</id><snippet>pivot</snippet></ROW><ROW><id>18050168</id><snippet>pivot - 1</snippet></ROW><ROW><id>18050168</id><snippet>seq[a] &lt;= seq[pivot]</snippet></ROW><ROW><id>18050168</id><snippet>if</snippet></ROW><ROW><id>18050168</id><snippet>False</snippet></ROW><ROW><id>18050168</id><snippet>import math

def insort(seq):
    for a in xrange(1, len(seq)):
        if seq[a] &gt; seq[a - 1]:
            continue
        else:
            mn, mx = 0, a
            while mn &lt; mx:
                pivot = mn + int(math.floor(((mx - mn) / 2)))
                if seq[a] &gt; seq[pivot]:
                    mn = pivot + 1
                else:
                    mx = pivot
            seq.insert(mn, seq.pop(a))
</snippet></ROW><ROW><id>18050168</id><snippet>mx</snippet></ROW><ROW><id>18050168</id><snippet>-2</snippet></ROW><ROW><id>18050168</id><snippet>[10, 7, 8, 5, 13, 2, 6, 1, 50]</snippet></ROW><ROW><id>18050168</id><snippet>2</snippet></ROW><ROW><id>18050168</id><snippet>print</snippet></ROW><ROW><id>18050168</id><snippet>seq[a] &gt; seq[a-1]</snippet></ROW><ROW><id>18050168</id><snippet>2</snippet></ROW><ROW><id>18050168</id><snippet>seq = [5, 7, 8, 10, 13, 2, 6, 1, 50]
a = 5
mn = 0
mx = a - 1 = 4
</snippet></ROW><ROW><id>18050168</id><snippet>mn != mx</snippet></ROW><ROW><id>18050168</id><snippet>0 != 4</snippet></ROW><ROW><id>18050168</id><snippet>pivot</snippet></ROW><ROW><id>18050168</id><snippet>0 + ((4 - 0) / 2)</snippet></ROW><ROW><id>18050168</id><snippet>2</snippet></ROW><ROW><id>18050168</id><snippet>if seq[a] &gt; seq[pivot]</snippet></ROW><ROW><id>18050168</id><snippet>seq[a] = 2</snippet></ROW><ROW><id>18050168</id><snippet>seq[pivot]</snippet></ROW><ROW><id>18050168</id><snippet>8</snippet></ROW><ROW><id>18050168</id><snippet>2 &gt; 8</snippet></ROW><ROW><id>18050168</id><snippet>False</snippet></ROW><ROW><id>18050168</id><snippet>mx = pivot - 1 = 2 - 1  = 1</snippet></ROW><ROW><id>18050168</id><snippet>seq = [5, 7, 8, 10, 13, 2, 6, 1, 50]
a = 5
mn = 0
mx = 1
</snippet></ROW><ROW><id>18050168</id><snippet>mn != mx</snippet></ROW><ROW><id>18050168</id><snippet>0 != 1</snippet></ROW><ROW><id>18050168</id><snippet>pivot = 0 + ((1 - 0) / 2) = 0</snippet></ROW><ROW><id>18050168</id><snippet>seq[a] &gt; seq[pivot]</snippet></ROW><ROW><id>18050168</id><snippet>2 &gt; 5</snippet></ROW><ROW><id>18050168</id><snippet>False</snippet></ROW><ROW><id>18050168</id><snippet>mx = pivot - 1 = 0 - 1 = -1</snippet></ROW><ROW><id>18050168</id><snippet>seq = [5, 7, 8, 10, 13, 2, 6, 1, 50]
a = 5
mn = 0
mx = -1
</snippet></ROW><ROW><id>18050168</id><snippet>mn != mx</snippet></ROW><ROW><id>18050168</id><snippet>0 != -1</snippet></ROW><ROW><id>18050168</id><snippet>pivot = 0 + ((-1 - 0) / 2) = -1</snippet></ROW><ROW><id>18050168</id><snippet>seq[a] &gt; seq[pivot]</snippet></ROW><ROW><id>18050168</id><snippet>seq[5] &gt; seq[-1]</snippet></ROW><ROW><id>18050168</id><snippet>seq</snippet></ROW><ROW><id>18050168</id><snippet>2 &gt; 50</snippet></ROW><ROW><id>18050168</id><snippet>False</snippet></ROW><ROW><id>18050168</id><snippet>mx = pivot - 1 = -1 - 1 = -2</snippet></ROW><ROW><id>18050168</id><snippet>seq = [5, 7, 8, 10, 13, 2, 6, 1, 50]
a = 5
mn = 0
mx = -2
</snippet></ROW><ROW><id>18050168</id><snippet>mn != mx</snippet></ROW><ROW><id>18050168</id><snippet>pivot = 0 + ((-2 - 0) / 2) = -1</snippet></ROW><ROW><id>18050168</id><snippet>seq[5] &gt; seq[-1]</snippet></ROW><ROW><id>18050168</id><snippet>2 &gt; 50</snippet></ROW><ROW><id>18050168</id><snippet>False</snippet></ROW><ROW><id>18050168</id><snippet>mx = pivot - 1 = -1 - 1 = -2</snippet></ROW><ROW><id>18050195</id><snippet>data[0]['datetime']
</snippet></ROW><ROW><id>18050195</id><snippet>data[:]['datetime']
</snippet></ROW><ROW><id>18050408</id><snippet>@cython.cdivision(True)
cdef double riccati_int(double j, double w, double h, double an, double d):
    pass

@cython.boundscheck(False)
@cython.wraparound(False)
def acalc(double j, double w):
    pass
</snippet></ROW><ROW><id>18050517</id><snippet>with open('file.csv', 'r') as src, open('file2.csv', 'w') as dst:
    dst.write(next(src).replace(" ", ""))     # delete whitespaces from header
    dst.writelines(line for line in src)
</snippet></ROW><ROW><id>18050753</id><snippet>print</snippet></ROW><ROW><id>18050753</id><snippet>None</snippet></ROW><ROW><id>18050753</id><snippet>None</snippet></ROW><ROW><id>18050753</id><snippet>print</snippet></ROW><ROW><id>18050753</id><snippet>return</snippet></ROW><ROW><id>18050753</id><snippet> def addFunc(x,y):
     return x+y
</snippet></ROW><ROW><id>18050753</id><snippet>x+y</snippet></ROW><ROW><id>18050753</id><snippet>d</snippet></ROW><ROW><id>18050753</id><snippet>d</snippet></ROW><ROW><id>18050753</id><snippet>def  RootFunc(inputDict):
    for k,v in inputDict.items():
        if v[0]==1:
            d[k] = addFunc(*v[1:])
</snippet></ROW><ROW><id>18050753</id><snippet>d</snippet></ROW><ROW><id>18050753</id><snippet>inputDict</snippet></ROW><ROW><id>18050753</id><snippet>def sample_function(some_data):
     modified_data = []
     for element in some_data:
          do some processing
          add processed crap to modified_data
     return modified_data
</snippet></ROW><ROW><id>18050753</id><snippet>return</snippet></ROW><ROW><id>18050753</id><snippet>yield</snippet></ROW><ROW><id>18050753</id><snippet>return</snippet></ROW><ROW><id>18050753</id><snippet> sample_function(my_data_set)
</snippet></ROW><ROW><id>18050753</id><snippet>my_modified_data = sample_function(my_data_set)
</snippet></ROW><ROW><id>18050753</id><snippet>def  RootFunc(inputDict):
    temp_dict = {}
    for k,v in inputDict.items():
        if v[0]==1:
            temp_dict[k] = addFunc(*v[1:])
        elif v[0] ==2:
            temp_dict[k] = subABC(*v[1:])
        elif  v[0]==3:
            temp_dict[k] = doublePower(*v[1:])
    return temp_dict


  inputDict={"s1_7":[1,5,2],"d1_6":[2,12,3,3],"e1_3200":[3,40,2],"s2_13":[1,6,7],"d2_30"[2,42,2,10]}
  final_dict = RootFunc(inputDict)
</snippet></ROW><ROW><id>18050955</id><snippet>shell=True</snippet></ROW><ROW><id>18050955</id><snippet>import subprocess

subprocess.call('grep -r PASSED *.log | sort -u | wc -l', shell=True)
</snippet></ROW><ROW><id>18050955</id><snippet>import glob
import subprocess

grep = subprocess.Popen(['grep', '-r', 'PASSED'] + glob.glob('*.log'), stdout=subprocess.PIPE)
sort = subprocess.Popen(['sort', '-u'], stdin=grep.stdout, stdout=subprocess.PIPE)
exit_status = subprocess.call(['wc', '-l'], stdin=sort.stdout)
</snippet></ROW><ROW><id>18050980</id><snippet>True = False</snippet></ROW><ROW><id>18050980</id><snippet>__builtin__.True = False
</snippet></ROW><ROW><id>18050980</id><snippet>True</snippet></ROW><ROW><id>18050980</id><snippet>False</snippet></ROW><ROW><id>18050980</id><snippet>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; __builtin__.True = False
&gt;&gt;&gt; True
False
&gt;&gt;&gt; False
False
&gt;&gt;&gt; __builtin__.False = True
&gt;&gt;&gt; True
False
&gt;&gt;&gt; False
False
</snippet></ROW><ROW><id>18051679</id><snippet> x.replace('\\', '-')
</snippet></ROW><ROW><id>18051679</id><snippet>'</snippet></ROW><ROW><id>18051679</id><snippet>'</snippet></ROW><ROW><id>18051679</id><snippet>\'</snippet></ROW><ROW><id>18051679</id><snippet>'</snippet></ROW><ROW><id>18051679</id><snippet>EOL</snippet></ROW><ROW><id>18051679</id><snippet>&gt;&gt;&gt; x
'hello\\world'
</snippet></ROW><ROW><id>18051679</id><snippet>\w</snippet></ROW><ROW><id>18051679</id><snippet>w</snippet></ROW><ROW><id>18051679</id><snippet>'Hello\now'</snippet></ROW><ROW><id>18051679</id><snippet>r</snippet></ROW><ROW><id>18051679</id><snippet>r'hello\world'</snippet></ROW><ROW><id>18051902</id><snippet>handlers .py</snippet></ROW><ROW><id>18051902</id><snippet>handlers</snippet></ROW><ROW><id>18051902</id><snippet>import name with spaces</snippet></ROW><ROW><id>18051902</id><snippet>__import__</snippet></ROW><ROW><id>18052117</id><snippet>@</snippet></ROW><ROW><id>18052117</id><snippet>local-name()</snippet></ROW><ROW><id>18052117</id><snippet>expr= "//packageItem/itemMeta/itemClass/@*[local-name()='msgType' and namespace-uri()='http://www.reuters.com/ns/2003/08/content']";
</snippet></ROW><ROW><id>18052236</id><snippet>errors</snippet></ROW><ROW><id>18052236</id><snippet>errors='ignore'</snippet></ROW><ROW><id>18052236</id><snippet>open(args.logfile, 'r', errors='ignore')
</snippet></ROW><ROW><id>18052629</id><snippet>delimiter</snippet></ROW><ROW><id>18052629</id><snippet>csv.writer</snippet></ROW><ROW><id>18052629</id><snippet>writer = csv.writer(buffer, delimiter=" ")
</snippet></ROW><ROW><id>18052798</id><snippet>in</snippet></ROW><ROW><id>18052798</id><snippet>...
for link in br.links():
    newurl = urlparse.urljoin(link.base_url, link.url)
    b1 = urlparse.urlparse(newurl).hostname
    b2 = urlparse.urlparse(newurl).path
    wholeLink = "http://"+b1+b2
    linkTxt = link.text
    if '[IMG]' in linkTxt:
        continue
    print wholeLink
    print linkTxt
</snippet></ROW><ROW><id>18052798</id><snippet>not in</snippet></ROW><ROW><id>18052798</id><snippet>...
for link in br.links():
    ...
    if '[IMG]' not in linkTxt:
        print wholeLink
        print linkTxt
</snippet></ROW><ROW><id>18052798</id><snippet>&gt;&gt;&gt; '[IMG]' in 'Stackoverflow [IMG]'
True
&gt;&gt;&gt; '[IMG]' not in 'Stackoverflow [IMG]'
False
&gt;&gt;&gt; '[IMG]' in 'Stackoverflow'
False
&gt;&gt;&gt; '[IMG]' not in 'Stackoverflow'
True
</snippet></ROW><ROW><id>18053316</id><snippet>def memoized(f):
    cache = {}
    def wrapper(*args):
        if args not in cache:
            cache[args] = f(*args)
        return cache[args]
    return wrapper

def get_count(target):
    @memoized
    def f(target, cur):
        if target &lt; 0: return 0
        if target == 0: return 1
        return sum(f(target - n, n + 1) for n in range(cur, target + 1))
    return f(target, 1)

print(get_count(100))
</snippet></ROW><ROW><id>18053643</id><snippet>for user in tweepy.Cursor(api.followers, id=uNameInput).items():
    followers.append(user.screen_name)
    time.sleep(60)
</snippet></ROW><ROW><id>18053643</id><snippet>followers</snippet></ROW><ROW><id>18053643</id><snippet>import time
import tweepy

auth = tweepy.OAuthHandler(..., ...)
auth.set_access_token(..., ...)

api = tweepy.API(auth)
items = tweepy.Cursor(api.followers, screen_name="gvanrossum").items()

while True:
    try:
        item = next(items)
    except tweepy.TweepError:
        time.sleep(60 * 15)
        item = next(items)

    print item
</snippet></ROW><ROW><id>18053643</id><snippet>followers</snippet></ROW><ROW><id>18053780</id><snippet>cron</snippet></ROW><ROW><id>18053780</id><snippet>data</snippet></ROW><ROW><id>18053910</id><snippet>import psycopg2
import file_content
try:
    conn = psycopg2.connect(database='bookdb',user='v22')
    cur = conn.cursor()
    cur.execute("DROP TABLE IF EXISTS book_details")
    cur.execute("CREATE TABLE book_details(id INT PRIMARY KEY,name VARCHAR(50),price INT)")
    cur.execute("INSERT INTO book_details VALUES(1, '%s', %s)" % (name, price))
    conn.commit()
except:
    print "unable to connect to db"
</snippet></ROW><ROW><id>18054215</id><snippet>: / \ &gt; * ? " |</snippet></ROW><ROW><id>18054215</id><snippet>name = 'output '+str(datetime.datetime.now().strftime("%Y-%m-%d %H-%M-%S"))+'.csv'
</snippet></ROW><ROW><id>18054659</id><snippet>int()</snippet></ROW><ROW><id>18054659</id><snippet>str.rstrip</snippet></ROW><ROW><id>18054659</id><snippet>&gt;&gt;&gt; int('10\r\n')
10
&gt;&gt;&gt; int('10\n')
10
&gt;&gt;&gt; int('10  \n')
10
</snippet></ROW><ROW><id>18054659</id><snippet>list.append</snippet></ROW><ROW><id>18054659</id><snippet>import sys

with open(sys.argv[1]) as fd:
    L = [int(line) for line in fd]
</snippet></ROW><ROW><id>18054659</id><snippet>with</snippet></ROW><ROW><id>18054659</id><snippet>with</snippet></ROW><ROW><id>18055049</id><snippet>ttk</snippet></ROW><ROW><id>18055049</id><snippet>import ttk
</snippet></ROW><ROW><id>18055249</id><snippet>    self.btn[x][y] = Button(frame,command= lambda: self.color_change(x,y))
</snippet></ROW><ROW><id>18055249</id><snippet> self.btn[x][y] = Button(frame,command= lambda x1=x, y1=y: self.color_change(x1,y1))
</snippet></ROW><ROW><id>18055276</id><snippet>br.open(url)
br.select_form(nr=0)

br.form['mydropdown'] = ["1"]
r = br.submit()
print r.read()
</snippet></ROW><ROW><id>18055276</id><snippet>r1</snippet></ROW><ROW><id>18055276</id><snippet>r</snippet></ROW><ROW><id>18055276</id><snippet>print</snippet></ROW><ROW><id>18055324</id><snippet>config(width=desired-width)</snippet></ROW><ROW><id>18055324</id><snippet>menu2.config(width=20)
</snippet></ROW><ROW><id>18055427</id><snippet>STARTUPINFO</snippet></ROW><ROW><id>18055427</id><snippet>subprocess</snippet></ROW><ROW><id>18055427</id><snippet>sys.platform</snippet></ROW><ROW><id>18055427</id><snippet>win32</snippet></ROW><ROW><id>18055427</id><snippet>STARTUPINFO</snippet></ROW><ROW><id>18055427</id><snippet>pywintypes</snippet></ROW><ROW><id>18055427</id><snippet>_subprocess</snippet></ROW><ROW><id>18055427</id><snippet>subprocess</snippet></ROW><ROW><id>18055427</id><snippet>_subprocess</snippet></ROW><ROW><id>18055427</id><snippet>if not hasattr(submodule, 'STD_INPUT_HANDLE'):
    import _submodule
    _missing = (
        'STD_INPUT_HANDLE', 'STD_OUTPUT_HANDLE', 'STD_ERROR_HANDLE', 'SW_HIDE',
        'STARTF_USESTDHANDLES', 'STARTF_USESHOWWINDOW')
    for _name in _missing:
        setattr(submodule, _name, getattr(_submodule, _name))
    del _submodule, _name, _missing
</snippet></ROW><ROW><id>18055774</id><snippet>regex</snippet></ROW><ROW><id>18055774</id><snippet>import re
def search(word, text):
    return bool(re.search(r'\b{}\b'.format(re.escape(word)), text))
... 
&gt;&gt;&gt; search("foo", "foobar foospam")
False
&gt;&gt;&gt; search("foo", "foobar foo")
True
</snippet></ROW><ROW><id>18055811</id><snippet>class matplotlib.mlab.PCA(a)
</snippet></ROW><ROW><id>18055811</id><snippet>PCA(x)</snippet></ROW><ROW><id>18055811</id><snippet>dir(results)</snippet></ROW><ROW><id>18055811</id><snippet>print results.Y  # print the projection in PCA space
</snippet></ROW><ROW><id>18056001</id><snippet>DetailView</snippet></ROW><ROW><id>18056001</id><snippet>object</snippet></ROW><ROW><id>18056001</id><snippet>{% block content %}
   Here is some text {{ object.author.get_full_name }}
   with a variable in the middle.
{% endblock %}
</snippet></ROW><ROW><id>18056001</id><snippet>get_full_name</snippet></ROW><ROW><id>18056150</id><snippet>add(name="Hello")
</snippet></ROW><ROW><id>18056150</id><snippet>**expression</snippet></ROW><ROW><id>18056150</id><snippet>**kwargs</snippet></ROW><ROW><id>18056150</id><snippet>attributes = {'name': 'Hello'}
add(**attributes)
</snippet></ROW><ROW><id>18056575</id><snippet>isinstance()</snippet></ROW><ROW><id>18056575</id><snippet>== type(..)</snippet></ROW><ROW><id>18056575</id><snippet>issubclass()</snippet></ROW><ROW><id>18056575</id><snippet>issubclass(type(other), Vec)
</snippet></ROW><ROW><id>18056575</id><snippet>isinstance()</snippet></ROW><ROW><id>18056575</id><snippet>is</snippet></ROW><ROW><id>18056575</id><snippet>Vec is type(other)
</snippet></ROW><ROW><id>18056575</id><snippet>object</snippet></ROW><ROW><id>18056575</id><snippet>type()</snippet></ROW><ROW><id>18056575</id><snippet>&lt;type 'instance'&gt;</snippet></ROW><ROW><id>18056575</id><snippet>other.__class__</snippet></ROW><ROW><id>18056575</id><snippet>isinstance()</snippet></ROW><ROW><id>18056575</id><snippet>&gt;&gt;&gt; class Foo: pass
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; type(f)
&lt;type 'instance'&gt;
&gt;&gt;&gt; f.__class__
&lt;class __main__.Foo at 0x1006cb2c0&gt;
&gt;&gt;&gt; type(f) is Foo
False
&gt;&gt;&gt; f.__class__ is Foo
True
&gt;&gt;&gt; isinstance(f, Foo)
True
</snippet></ROW><ROW><id>18056651</id><snippet>AttributeError</snippet></ROW><ROW><id>18056651</id><snippet>id</snippet></ROW><ROW><id>18056651</id><snippet>dict</snippet></ROW><ROW><id>18056651</id><snippet>sorted(demo, key=lambda x: x['id'])
</snippet></ROW><ROW><id>18056651</id><snippet>KeyError</snippet></ROW><ROW><id>18056651</id><snippet>id</snippet></ROW><ROW><id>18056651</id><snippet>sorted(demo, key=lambda x: x.get("id"))
</snippet></ROW><ROW><id>18056651</id><snippet>get</snippet></ROW><ROW><id>18056651</id><snippet>id</snippet></ROW><ROW><id>18056651</id><snippet>id</snippet></ROW><ROW><id>18056651</id><snippet>id</snippet></ROW><ROW><id>18056651</id><snippet>12#10</snippet></ROW><ROW><id>18056651</id><snippet>12#1</snippet></ROW><ROW><id>18056651</id><snippet>12#2</snippet></ROW><ROW><id>18056651</id><snippet>id</snippet></ROW><ROW><id>18056651</id><snippet>def get_values(item):
    return [int(x) for x in item['id'].split('#')]

def compare(a, b):
    a = get_values(a)
    b = get_values(b)
    if not a[0] == b[0]:
        return a[0] - b[0]
    return a[1] - b[1]
</snippet></ROW><ROW><id>18056651</id><snippet>sorted</snippet></ROW><ROW><id>18056651</id><snippet>sorted(demo, cmp=compare)
</snippet></ROW><ROW><id>18056651</id><snippet>cmp</snippet></ROW><ROW><id>18056651</id><snippet>from functools import cmp_to_key
sorted(demo, key=cmp_to_key(compare))
</snippet></ROW><ROW><id>18056665</id><snippet>top = wx.GetApp().GetTopWindow()
top.Close()
</snippet></ROW><ROW><id>18056781</id><snippet>sum</snippet></ROW><ROW><id>18056781</id><snippet>In [11]: df.groupby('B').sum()
Out[11]:
              A
B
200  text1text2
300  text1text2
400       text1
500       text2
600       text1
</snippet></ROW><ROW><id>18056781</id><snippet>join</snippet></ROW><ROW><id>18056781</id><snippet>In [12]: df.groupby('B').agg(lambda x: ', '.join(x.values))
Out[12]:
                A
B
200  text1, text2
300  text1, text2
400         text1
500         text2
600         text1
</snippet></ROW><ROW><id>18057293</id><snippet>itertools.product()</snippet></ROW><ROW><id>18057293</id><snippet>zip()</snippet></ROW><ROW><id>18057293</id><snippet>from itertools import product

gene_regions, species_plural, ontologies, lengths = zip(*result_dict)

for gene_region, species, ontology, length in product(gene_regions, species_plural, ontologies, lengths):
    # do something with this combo.
</snippet></ROW><ROW><id>18057293</id><snippet>product()</snippet></ROW><ROW><id>18057411</id><snippet>  File "/home/u/Téléchargements/.repo/repo/git_command.py", line 120, in _setenv
    env[name] = value.encode()
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 9: ordinal not in range(128)
</snippet></ROW><ROW><id>18057411</id><snippet>0xc3 in position 9</snippet></ROW><ROW><id>18057411</id><snippet>/home/u/Téléchargements</snippet></ROW><ROW><id>18057411</id><snippet>repo</snippet></ROW><ROW><id>18057411</id><snippet>git_command.py</snippet></ROW><ROW><id>18057411</id><snippet>def _setenv(env, name, value):
  env[name] = value.encode()
</snippet></ROW><ROW><id>18057411</id><snippet>def _setenv(env, name, value):
  env[name] = value.encode(sys.getfilesystemencoding())
</snippet></ROW><ROW><id>18057485</id><snippet>mylogmod.py</snippet></ROW><ROW><id>18057485</id><snippet>import logging

FILENAME = "mylog.log" # Your logfile
LOGFORMAT = "%(message)s" # Your format
DEFAULT_LEVEL = "info" # Your default level, usually set to warning or error for production
LEVELS = {
    'debug':logging.DEBUG,
    'info':logging.INFO,
    'warning':logging.WARNING,
    'error':logging.ERROR,
    'critical':logging.CRITICAL}

def startlogging(filename=FILENAME, level=DEFAULT_LEVEL):
    logging.basicConfig(filename=filename, level=LEVELS[level], format=LOGFORMAT)
</snippet></ROW><ROW><id>18057485</id><snippet>main.py</snippet></ROW><ROW><id>18057485</id><snippet>import logging
from mylogmod import startlogging
from myclass import MyClass

startlogging()

logging.info("Program started...")
mc = MyClass()
</snippet></ROW><ROW><id>18057485</id><snippet>myclass.py</snippet></ROW><ROW><id>18057485</id><snippet>startlogging</snippet></ROW><ROW><id>18057485</id><snippet>import logging

class MyClass(object):
    def __init__(self):
        logging.info("Initialze MyClass instance...")

if __name__ == "__main__":
    from mylogmod import startlogging
    startlogging(level="debug")
    logging.debug("Test MyClass...")
    #... rest of test code...
</snippet></ROW><ROW><id>18057622</id><snippet>SoupStrainer</snippet></ROW><ROW><id>18057622</id><snippet>DocType</snippet></ROW><ROW><id>18057622</id><snippet>.find_all()</snippet></ROW><ROW><id>18057622</id><snippet>document = BeautifulSoup(open(path).read(), parse_only=SoupStrainer(target="_blank"))
for link in documen.find_all(target="_blank"):
</snippet></ROW><ROW><id>18057622</id><snippet>DocType</snippet></ROW><ROW><id>18057622</id><snippet>from bs4 import DocType

for link in BeautifulSoup(
        open(path).read(),
        parse_only=SoupStrainer(target="_blank")
):
    if isinstance(link, Doctype): continue 
</snippet></ROW><ROW><id>18057772</id><snippet>PCA</snippet></ROW><ROW><id>18057772</id><snippet>(M,N)</snippet></ROW><ROW><id>18057772</id><snippet>M</snippet></ROW><ROW><id>18057772</id><snippet>N</snippet></ROW><ROW><id>18057772</id><snippet>M &lt; N</snippet></ROW><ROW><id>18057899</id><snippet>datetime</snippet></ROW><ROW><id>18057899</id><snippet>from datetime import date

def days_between_dates(y2, m2, d2, y1, m1, d1):
    return (date(y2, m2, d2) - date(y1, m1, d1)).days
</snippet></ROW><ROW><id>18057899</id><snippet>y2, m2, d1</snippet></ROW><ROW><id>18057899</id><snippet>2012, 2, 29</snippet></ROW><ROW><id>18057899</id><snippet>2012, 3, 0</snippet></ROW><ROW><id>18057899</id><snippet>def is_leap_year(year):
    if year % 400 == 0:
        return True
    if year % 100 == 0:
        return False
    return year % 4 == 0

def days_between_dates(y2, m2, d2, y1, m1, d1):
    days = 0
    isleapyear = is_leap_year(y1)

    while (y1, m1, d1) != (y2, m2, d2):
        days += 1
        d1 += 1

        if (m1 == 2 and d1 == (30 if isleapyear else 29) or
            m1 in (4, 6, 9, 11) and d1 == 31 or d1 == 32):
            d1 = 1
            m1 += 1

        if m1 == 13:
            m1 = 1
            y1 += 1
            isleapyear = is_leap_year(y1)

    return days
</snippet></ROW><ROW><id>18058051</id><snippet>def letter_runs(letters):
    prev = None
    results = []

    for index, letter in enumerate(letters):
        if letter != prev:
            prev = letter
            results.append((index, letter))

    if results[0][1] != "X":
        results[0] = (results[1][0]-1, results[0][1])
    else: # if first run is "X" second must be something else!
        results[1] = (results[2][0]-1, results[1][1])

    return [(index, letter) for index, letter in results if letter != "X"]
</snippet></ROW><ROW><id>18058215</id><snippet>request.args</snippet></ROW><ROW><id>18058215</id><snippet>request</snippet></ROW><ROW><id>18058215</id><snippet>.form</snippet></ROW><ROW><id>18058215</id><snippet>request.form</snippet></ROW><ROW><id>18058215</id><snippet>@app.route('/facedata/&lt;slug&gt;', methods=["POST"])
def facedata(slug):
    emotions = request.form.get('emotions')
</snippet></ROW><ROW><id>18058415</id><snippet>import contextlib
@contextlib.contextmanager
def dummyctx(x):
    yield x

def get_last_synced_changelist(p4port, client_name, p4=None):
    if p4 is None:
        ctx = P4Connection(p4port)
    else:
        ctx = dummyctx(p4)
    with ctx as p4:
        last_change_list = p4.run_changes("-m1", "@%s" % client_name)
        if last_change_list:
            return last_change_list[0]["change"]
        else:
            return None
</snippet></ROW><ROW><id>18058500</id><snippet>python.exe</snippet></ROW><ROW><id>18058500</id><snippet>python3.exe</snippet></ROW><ROW><id>18058500</id><snippet>python test_script.py</snippet></ROW><ROW><id>18058500</id><snippet>python3 test_script.py</snippet></ROW><ROW><id>18058500</id><snippet>Python 3</snippet></ROW><ROW><id>18058500</id><snippet>Properties</snippet></ROW><ROW><id>18058500</id><snippet>Advanced System Settings</snippet></ROW><ROW><id>18058500</id><snippet>Environment Variables</snippet></ROW><ROW><id>18058500</id><snippet>PATH</snippet></ROW><ROW><id>18058643</id><snippet>Company.query</snippet></ROW><ROW><id>18058643</id><snippet>companies = Company.query.all()</snippet></ROW><ROW><id>18058643</id><snippet>len(companies)</snippet></ROW><ROW><id>18058643</id><snippet>Company.query.count()</snippet></ROW><ROW><id>18058756</id><snippet>import pandas as pd, numpy as np
pp = pd.Panel(past).to_frame()
pf = pd.Panel(future).to_frame()
pp.replace('.', 0, regex=True) + pf.replace('.', 0, regex=True) / 2

                500188  513683     524715
major minor                              
C     2      25.455176     NaN  58.012574
      3       0.000000     NaN -51.317588
      4       0.000000     NaN -54.062453
S     2      25.455176     NaN  69.324983
      3     -61.896108     NaN -49.094423
      4     -60.681153     NaN -33.375432
</snippet></ROW><ROW><id>18058854</id><snippet>__del__</snippet></ROW><ROW><id>18058854</id><snippet>Groupclass</snippet></ROW><ROW><id>18058854</id><snippet>None</snippet></ROW><ROW><id>18058854</id><snippet>def __del__(self):
    if Groupclass:
        Groupclass.count -= 1
</snippet></ROW><ROW><id>18058854</id><snippet>type()</snippet></ROW><ROW><id>18058854</id><snippet>def __del__(self):
    type(self).count -= 1
</snippet></ROW><ROW><id>18058854</id><snippet>count</snippet></ROW><ROW><id>18058854</id><snippet>Groupclass</snippet></ROW><ROW><id>18058854</id><snippet>.count</snippet></ROW><ROW><id>18058854</id><snippet>Groupclass</snippet></ROW><ROW><id>18058854</id><snippet>.count</snippet></ROW><ROW><id>18058854</id><snippet>__del__</snippet></ROW><ROW><id>18058854</id><snippet>__del__()</snippet></ROW><ROW><id>18058854</id><snippet>sys.stderr</snippet></ROW><ROW><id>18058854</id><snippet>__del__()</snippet></ROW><ROW><id>18058854</id><snippet>__del__()</snippet></ROW><ROW><id>18058854</id><snippet>__del__()</snippet></ROW><ROW><id>18058854</id><snippet>__del__()</snippet></ROW><ROW><id>18059462</id><snippet># Put the Filter on the Handler so only INFO and higher is handled
extraHandler.addFilter(LevelFilter(logging.INFO))

# Let the Logger process everything (so it can propagate records to root)
extraLogger.setLevel(logging.DEBUG)
</snippet></ROW><ROW><id>18059462</id><snippet>import logging

class LevelFilter(logging.Filter):
    """
    http://stackoverflow.com/a/7447596/190597 (robert)
    """
    def __init__(self, level):
        self.level = level

    def filter(self, record):
        return record.levelno &gt;= self.level

def do_logging(turn):
    logger = logging.getLogger('extra')
    logger.info('some info turn %d' % turn) 
    logger.debug('this is debug fudge turn %d' % turn)

rootLogger = logging.getLogger()
handler = logging.StreamHandler()
rootFormatter = logging.Formatter('root - %(levelname)s: %(msg)s')
handler.setFormatter(rootFormatter)
rootLogger.addHandler(handler)
rootLogger.setLevel(logging.DEBUG)
do_logging(1)

extraLogger = logging.getLogger('extra')
extraHandler = logging.StreamHandler()
extraFormatter = logging.Formatter('extra - %(levelname)s: %(msg)s')
extraHandler.setFormatter(extraFormatter)
extraLogger.addHandler(extraHandler)

# Put the Filter on the Handler so only INFO and higher is handled
extraHandler.addFilter(LevelFilter(logging.INFO))

# Handle everything (so it can propagate to root)
extraLogger.setLevel(logging.DEBUG)
do_logging(2)
</snippet></ROW><ROW><id>18059518</id><snippet>dstbuck = conn.get_bucket(destination[0])
dstkey = bucket.get_key(destination[1])
if dstkey is None:
    FAILED.append(destination[1])
else:
    # do etag check here
</snippet></ROW><ROW><id>18059518</id><snippet>get_key</snippet></ROW><ROW><id>18059518</id><snippet>get_bucket</snippet></ROW><ROW><id>18059573</id><snippet>urllib.parse.urlencode()</snippet></ROW><ROW><id>18059573</id><snippet>?</snippet></ROW><ROW><id>18059573</id><snippet>from request.parse import urlencode

data = {"user": "jähn", "id": 3}  # note, a Python dictionary, not a JSON string
parameters = urlencode(data)
response = urllib.request.urlopen('?'.join((self.update_url, parameters)))
</snippet></ROW><ROW><id>18059573</id><snippet>data</snippet></ROW><ROW><id>18059573</id><snippet>bytes</snippet></ROW><ROW><id>18059573</id><snippet>None</snippet></ROW><ROW><id>18059840</id><snippet>import httplib
import urllib2 as u2
from suds.transport.http import HttpTransport


class HTTPSClientAuthHandler(u2.HTTPSHandler):
    def __init__(self, key, cert):
        u2.HTTPSHandler.__init__(self)
        self.key = key
        self.cert = cert

    def https_open(self, req):
        # Rather than pass in a reference to a connection class, we pass in
        # a reference to a function which, for all intents and purposes,
        # will behave as a constructor
        return self.do_open(self.getConnection, req)

    def getConnection(self, host, timeout=300):
        return httplib.HTTPSConnection(host, key_file=self.key, cert_file=self.cert)


class HTTPSClientCertTransport(HttpTransport):
    def __init__(self, key, cert, *args, **kwargs):
        HttpTransport.__init__(self, *args, **kwargs)
        self.key = key
        self.cert = cert

    def u2open(self, u2request):
        """
        Open a connection.

        @param u2request: A urllib2 request.
        @type u2request: urllib2.Request.
        @return: The opened file-like urllib2 object.
        @rtype: fp
        """
        url = u2.build_opener(HTTPSClientAuthHandler(self.key, self.cert))
        if self.u2ver() &lt; 2.6:
            return url.open(u2request)
        else:
            return url.open(u2request, timeout=self.options.timeout)
.
.
.
def consume_soap():
    from suds.client import Client
    from datetime import date
    from calendar import monthrange

    transport = HTTPSClientCertTransport('auth/key_no_passphrase.pem', 'auth/cert.pem')
    client = Client(XLedgerInterface.WSDL_EXPORT_PATH, transport=transport)
    year = date.today().year
    month = date.today().month
    first_date = str(date(year, month, 1))
    last_date = str(date(year, month, monthrange(year, month)[1]))
    xml = client.service.GetTimesheetEntriesData(sUserName=XLedgerInterface.USER_ID,
                                                 sKey=XLedgerInterface.KEY,
                                                 sApplication=XLedgerInterface.APPLICATION_NAME,
                                                 iEntityCode=XLedgerInterface.ENTITY_CODE,
                                                 dDateFrom=first_date,
                                                 dDateTo=last_date,
                                                 sFreeText='',
                                                 sFilter='',
                                                 eOption="Open")
    return self._get_as_json(xml)
</snippet></ROW><ROW><id>18060202</id><snippet>title = u'%s.html' % t.name.decode('utf8')  # decode from UTF8, use a unicode literal
with file(title, 'wb') as fpo:
    fpo.write('&lt;meta charset="utf-8"&gt;\n')                    
    message = 'שלום לך %s' % t.name
    fpo.write('%s\n' % message)
</snippet></ROW><ROW><id>18060356</id><snippet>NOTE:</snippet></ROW><ROW><id>18060356</id><snippet>import wx

class TreeFrame(wx.Frame):

    def __init__(self):

        wx.Frame.__init__(self, None, title='TreeCtrl')
        tree_ctrl = wx.TreeCtrl(self, -1, style=wx.TR_DEFAULT_STYLE | \
                                wx.TR_FULL_ROW_HIGHLIGHT | \
                                wx.TR_EDIT_LABELS)

        # NOTE: Bind callback which will be called when the button is clicked.
        button = wx.Button(self, -1, label='Add banana')
        button.Bind(wx.EVT_BUTTON, self.add_banana)

        # NOTE sizer
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(tree_ctrl, 1, wx.EXPAND|wx.ALL)
        sizer.Add(button, 0, wx.EXPAND|wx.ALL)
        self.SetSizer(sizer)


        # Add the tree root
        root = tree_ctrl.AddRoot('Food')
        tree_ctrl.AppendItem(root,'Fruit (3)')
        tree_ctrl.AppendItem(tree_ctrl.GetLastChild(root),'Apple (1)')
        tree_ctrl.AppendItem(tree_ctrl.GetLastChild(root),'Orange (2)')

        tree_ctrl.ExpandAll()
        self.Centre()

         # NOTE: Save tree_ctrl, root as attribute
         #       to make them available in add_banana method.
        self.tree_ctrl = tree_ctrl
        self.root = root

    # called when the button is clicked.
    def add_banana(self, evt):
        self.tree_ctrl.AppendItem(self.tree_ctrl.GetLastChild(self.root), 'Banana (3)')


if __name__ == '__main__':
    app = wx.App(0)
    frame = TreeFrame()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>18060414</id><snippet>entity</snippet></ROW><ROW><id>18060414</id><snippet>entity</snippet></ROW><ROW><id>18060414</id><snippet>boost::python::object</snippet></ROW><ROW><id>18060414</id><snippet>boost::python::object</snippet></ROW><ROW><id>18060414</id><snippet>pointerToPythonObj*</snippet></ROW><ROW><id>18060414</id><snippet>pointerToPythonObj</snippet></ROW><ROW><id>18060414</id><snippet>class Entity:
    def action(self):
        print "in Entity::action"
</snippet></ROW><ROW><id>18060414</id><snippet>#include &lt;boost/python.hpp&gt;

int main()
{
  Py_Initialize(); // Start interpreter.

  // Create the __main__ module.
  namespace python = boost::python;
  python::object main = python::import("__main__");
  python::object main_namespace = main.attr("__dict__");

  try
  {
    // Import Entity.py, and instantiate an Entity object in the
    // global namespace.  PyRun_SimpleString could also be used,
    // as it will default to running within and creating 
    // __main__'s namespace.
    exec(
        "import Entity\n"
        "entity = Entity.Entity()\n"
      , main_namespace
    );

    // Obtain a handle to the entity object created from the previous
    // exec.
    python::object entity = main_namespace["entity"];
    // Invoke the action method on the entity.
    entity.attr("action")();
  }
  catch (const python::error_already_set&amp;)
  {
    PyErr_Print();
  }
}
</snippet></ROW><ROW><id>18060414</id><snippet>Entity.py</snippet></ROW><ROW><id>18060414</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18060427</id><snippet>pack</snippet></ROW><ROW><id>18060427</id><snippet>grid</snippet></ROW><ROW><id>18060609</id><snippet>del msg['subject']
msg['subject'] = 'Python roolz!'
</snippet></ROW><ROW><id>18060666</id><snippet>import</snippet></ROW><ROW><id>18060666</id><snippet>print repr(open('helloworld.py', 'rb').read(50))
</snippet></ROW><ROW><id>18060666</id><snippet>'\xc2\xa0'</snippet></ROW><ROW><id>18060687</id><snippet>sum()</snippet></ROW><ROW><id>18060687</id><snippet>from numpy cimport ndarray as ar
cimport numpy as np
cimport cython

@cython.boundscheck(False)
@cython.wraparound(False)
def cysum(ar[np.uint8_t,cast=True] A):
    cdef int i, n=A.size, tot=0
    for i in xrange(n):
        tot += A[i]
    return tot
</snippet></ROW><ROW><id>18060687</id><snippet>from numpy cimport ndarray as ar
cimport numpy as np
from libcpp cimport bool
cimport cython

def cysum(ar[np.uint8_t,cast=True] A):
    cdef int i, n=A.size, tot=0
    cdef bool *bptr
    bptr = &lt;bool*&gt; &amp;A[0]
    for i in xrange(n):
        tot += bptr[i]
    return tot
</snippet></ROW><ROW><id>18060687</id><snippet>cdef bool* arptr(np.uint8_t* uintptr):
    cdef bool *bptr
    bptr = &lt;bool*&gt; uintptr
    return bptr
</snippet></ROW><ROW><id>18060687</id><snippet>arptr(&amp;A[0])
</snippet></ROW><ROW><id>18060727</id><snippet>...
cursor.execute('SELECT ID, CNT FROM table_name ORDER BY ID')
item_count_vector = [
    [cnt for id_, cnt in grp]
    for key, grp in itertools.groupby(cursor.fetchall(), key=lambda row: row[0])
]
</snippet></ROW><ROW><id>18060727</id><snippet>DictCursor</snippet></ROW><ROW><id>18060727</id><snippet>item_count_vector = [
    [d['CNT'] for d in grp]
    for key, grp in itertools.groupby(cursor.fetchall(), key=lambda row: row['ID'])
]

...
</snippet></ROW><ROW><id>18060727</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; # Assume following rows are retrieved from DB using cursor.fetchall()
&gt;&gt;&gt; rows = (
...     ('01',4),
...     ('01',2),
...     ('01',0),
...     ('01',0),
...     ('01',0),
...     ('01',1),
...     ('02',0),
...     ('02',3),
...     ('02',1),
...     ('02',0),
...     ('02',2),
...     ('02',2),
...     ('03',9),
...     ('03',2),
...     ('03',0),
...     ('03',1),
...     ('03',4),
...     ('03',0),
... )
&gt;&gt;&gt; [[cnt for id_, cnt in grp] for key, grp in itertools.groupby(rows, key=lambda row: row[0])]
[[4, 2, 0, 0, 0, 1], [0, 3, 1, 0, 2, 2], [9, 2, 0, 1, 4, 0]]
</snippet></ROW><ROW><id>18060804</id><snippet>pk</snippet></ROW><ROW><id>18060804</id><snippet>form = ContactForm(request.POST, instance=contact_obj)
</snippet></ROW><ROW><id>18060804</id><snippet>contact_obj</snippet></ROW><ROW><id>18060804</id><snippet>from django.core.exceptions import MultipleObjectsReturned
def contact(request, template_name):
    try:
        contact_obj = Contact.objects.get(user=request.user)
    except: #You might want to handle multiple objects returned case here too..
        contact_obj = None

    form = ContactForm(instance=contact_obj)

    if request.method == "POST":
        form = ContactForm(request.POST, instance=contact_obj)
        if form.is_valid():
            obj = form.save(commit=False)
            obj.user = request.user
            obj.save()
            return HttpResponseRedirect('/newuser/step2/')

    return render_to_response(template_name, RequestContext(request, {'form' : form}))
</snippet></ROW><ROW><id>18060951</id><snippet>from traitsui.api import *
from traitsui.menu import *
</snippet></ROW><ROW><id>18060951</id><snippet>from traits.etsconfig.api import ETSConfig
ETSConfig.toolkit = 'null'
</snippet></ROW><ROW><id>18061612</id><snippet>xlim</snippet></ROW><ROW><id>18061612</id><snippet>Axes</snippet></ROW><ROW><id>18061612</id><snippet>ax.set_xlim(0, 16.4)
plt.show()
</snippet></ROW><ROW><id>18061612</id><snippet>plt.autoscale()
</snippet></ROW><ROW><id>18061612</id><snippet>xlim</snippet></ROW><ROW><id>18061612</id><snippet>plt.autoscale(enable=True, axis='both', tight=None)</snippet></ROW><ROW><id>18061777</id><snippet>pandas</snippet></ROW><ROW><id>18061777</id><snippet>from string import ascii_letters as letters
from numpy.random import randint
from numpy import array

from pandas import Series

n = 1000
ltrs = Series(array(list(letters))[randint(len(letters), size=n)])
ltrs.value_counts().value_counts().plot(kind='bar')
</snippet></ROW><ROW><id>18061777</id><snippet>value_counts()</snippet></ROW><ROW><id>18062030</id><snippet>onLoadFinished</snippet></ROW><ROW><id>18062030</id><snippet>urls</snippet></ROW><ROW><id>18062030</id><snippet>webpage.mainFrame()</snippet></ROW><ROW><id>18062030</id><snippet>urls</snippet></ROW><ROW><id>18062030</id><snippet>1</snippet></ROW><ROW><id>18062070</id><snippet>QObject</snippet></ROW><ROW><id>18062070</id><snippet>QObject</snippet></ROW><ROW><id>18062070</id><snippet>QWidget</snippet></ROW><ROW><id>18062070</id><snippet>QWidget</snippet></ROW><ROW><id>18062070</id><snippet>w</snippet></ROW><ROW><id>18062070</id><snippet>QMainWindow</snippet></ROW><ROW><id>18062070</id><snippet>def web1(parent):
    ...
    class Browser(QtGui.QMainWindow): # "Browser" window
        def __init__(self, parent):
            QtGui.QMainWindow.__init__(self, parent)
            ...

def main():
    ...
    w.__button.clicked.connect(lambda: web1(w))
</snippet></ROW><ROW><id>18062070</id><snippet>w</snippet></ROW><ROW><id>18062070</id><snippet>QMainWindow</snippet></ROW><ROW><id>18062070</id><snippet>QDialog</snippet></ROW><ROW><id>18062070</id><snippet>Qt::Window</snippet></ROW><ROW><id>18062086</id><snippet>tznow = timezone.now()
'{:%d-%m-%Y:%H:%M:%S}.{:03d}'.format(tznow, tznow.microsecond // 1000)
</snippet></ROW><ROW><id>18062086</id><snippet>&gt;&gt;&gt; from django.utils import timezone
&gt;&gt;&gt; tznow = timezone.now()
&gt;&gt;&gt; '{:%d-%m-%Y:%H:%M:%S}.{:03d}'.format(tznow, tznow.microsecond // 1000)
'05-08-2013:15:36:00.339'
</snippet></ROW><ROW><id>18062293</id><snippet>import urllib3
c = urllib3.HTTPSConnectionPool('10.0.3.168', port=9001, cert_reqs='CERT_NONE',
                                assert_hostname=False)
c.request('GET', '/')
</snippet></ROW><ROW><id>18062326</id><snippet>url(r'^$', 'tickets.views.home', name='home'),
</snippet></ROW><ROW><id>18062326</id><snippet>url(r'^$', 'dcdev1.tickets.views.home', name='home'),
</snippet></ROW><ROW><id>18062326</id><snippet>python manage.py validate</snippet></ROW><ROW><id>18062350</id><snippet>data = [
    ('      ', 'donor', '       ', 'distance'),
    ('      ', 'ARG', 'A', '43', '       ', '3.55'),
    ('      ', 'SOD', 'B', '93', '       ', '4.775'),
    ('      ', 'URX', 'C', '33', '       ', '3.55')
]
</snippet></ROW><ROW><id>18062350</id><snippet>print '\n'.join(map(' '.join, data))
</snippet></ROW><ROW><id>18062387</id><snippet>from Xlib.display import Display
import Xlib
from Xlib import X
import Xlib.XK
import sys
import signal 
import time
display = None
root = None

def handle_event(event):
    print "handle!"
    if (event.type == X.KeyRelease):
        send_key("x")

# from http://shallowsky.com/software/crikey/pykey-0.1 
def send_key(emulated_key):
    shift_mask = 0 # or Xlib.X.ShiftMask
    window = display.get_input_focus()._data["focus"]
    keysym = Xlib.XK.string_to_keysym(emulated_key)
    keycode = display.keysym_to_keycode(keysym)
    event = Xlib.protocol.event.KeyPress(
        time = int(time.time()),
        root = root,
        window = window,
        same_screen = 0, child = Xlib.X.NONE,
        root_x = 0, root_y = 0, event_x = 0, event_y = 0,
        state = shift_mask,
        detail = keycode
        )
    window.send_event(event, propagate = True)
    event = Xlib.protocol.event.KeyRelease(
        time = int(time.time()),
        root = display.screen().root,
        window = window,
        same_screen = 0, child = Xlib.X.NONE,
        root_x = 0, root_y = 0, event_x = 0, event_y = 0,
        state = shift_mask,
        detail = keycode
        )
    window.send_event(event, propagate = True)

def main():
    # current display
    global display,root
    display = Display()
    root = display.screen().root

    # we tell the X server we want to catch keyPress event
    root.change_attributes(event_mask = X.KeyPressMask|X.KeyReleaseMask)
    # just grab the "1"-key for now
    root.grab_key(10, 0, True,X.GrabModeSync, X.GrabModeSync)

    signal.signal(signal.SIGALRM, lambda a,b:sys.exit(1))
    signal.alarm(10)
    while 1:
        event = display.next_event()
        print "event"
        handle_event(event)
        display.allow_events(X.AsyncKeyboard, X.CurrentTime)            

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18062521</id><snippet>concat</snippet></ROW><ROW><id>18062521</id><snippet>In [1]: s1 = pd.Series([1, 2], index=['A', 'B'], name='s1')

In [2]: s2 = pd.Series([3, 4], index=['A', 'B'], name='s2')

In [3]: pd.concat([s1, s2], axis=1)
Out[3]:
   s1  s2
A   1   3
B   2   4

In [4]: pd.concat([s1, s2], axis=1).reset_index()
Out[4]:
  index  s1  s2
0     A   1   3
1     B   2   4
</snippet></ROW><ROW><id>18062571</id><snippet>d = {}
d.setdefault(key, set()).add(value)
</snippet></ROW><ROW><id>18062571</id><snippet>defaultdict</snippet></ROW><ROW><id>18062571</id><snippet>from collections import defaultdict
d = defaultdict(set)
d[key].add(value)
</snippet></ROW><ROW><id>18062571</id><snippet>set</snippet></ROW><ROW><id>18062571</id><snippet>d = {}
for num in datasource:
    d.setdefault(key, set()).add(num)
</snippet></ROW><ROW><id>18062571</id><snippet>from collections import defaultdict
d = defaultdict(set)
for num in datasource:
    d[key].add(num)
</snippet></ROW><ROW><id>18062573</id><snippet>CREATE INDEX hash ON keys (hash)</snippet></ROW><ROW><id>18062798</id><snippet>path = r'C:\Documents and Settings\eag29278\My Documents\python test code\test_satdata.csv'
with open(path, 'rb') as csvfile:
</snippet></ROW><ROW><id>18062798</id><snippet>'rb'</snippet></ROW><ROW><id>18062798</id><snippet>csv</snippet></ROW><ROW><id>18063264</id><snippet>from PIL import Image
</snippet></ROW><ROW><id>18063364</id><snippet>counter = counter + 1</snippet></ROW><ROW><id>18063364</id><snippet>isInScreen</snippet></ROW><ROW><id>18063364</id><snippet>False</snippet></ROW><ROW><id>18063364</id><snippet>import turtle
import random

def isInScreen(w,t):
    leftBound = w.window_width() / -2.0
    rightBound = w.window_width() / 2.0
    bottomBound = w.window_height() / -2.0
    topBound = w.window_height() / 2.0

    turtlex = t.xcor()
    turtley = t.ycor()

    if turtlex &lt; leftBound or turtlex &gt; rightBound or turtley &lt; bottomBound or turtley &gt; topBound:
        return False

    return True

def randomWalk(t,w):
    counter = 0

    while True:
        while isInScreen(w,t):
            coin = random.randrange(0,2)
            if coin == 0:
                t.left(90)
            else:
                t.right(90)
            t.forward(50)
        t.left(180)
        t.forward(50)
        counter += 1
        if counter == 4:
            break

wn = turtle.Screen()
wn.bgcolor('lightcyan')

steklovata = turtle.Turtle()
steklovata.color('darkslategray')
steklovata.shape('turtle')

randomWalk(steklovata,wn)

wn.exitonclick()
</snippet></ROW><ROW><id>18063364</id><snippet>stillIn</snippet></ROW><ROW><id>18063364</id><snippet>if</snippet></ROW><ROW><id>18063364</id><snippet>True</snippet></ROW><ROW><id>18063364</id><snippet>return False</snippet></ROW><ROW><id>18063364</id><snippet>return True</snippet></ROW><ROW><id>18063419</id><snippet>url(r'^users/(?:(?P&lt;id&gt;\d+)/)?$', views.users, name='users')
</snippet></ROW><ROW><id>18063419</id><snippet>def users(request, id=None)
</snippet></ROW><ROW><id>18063572</id><snippet>None</snippet></ROW><ROW><id>18063572</id><snippet>inqueue</snippet></ROW><ROW><id>18063572</id><snippet>monitor</snippet></ROW><ROW><id>18063572</id><snippet>logging.handlers.QueueListener</snippet></ROW><ROW><id>18063572</id><snippet>            """
            Monitor the queue for records, and ask the handler
            to deal with them.

            This method runs on a separate, internal thread.
            The thread will terminate if it sees a sentinel object in the queue.
            """
            q = self.queue
            has_task_done = hasattr(q, 'task_done')
            # self._stop is a multiprocessing.Event object that has been set by the
            # main process as part of the shutdown processing, before sending
            # the sentinel           
            while not self._stop.isSet():
                try:
                    record = self.dequeue(True)
                    if record is self._sentinel:
                        break
                    self.handle(record)
                    if has_task_done:
                        q.task_done()
                except queue.Empty:
                    pass
            # There might still be records in the queue.
            while True:
                try:
                    record = self.dequeue(False)
                    if record is self._sentinel:
                        break
                    self.handle(record)
                    if has_task_done:
                        q.task_done()
                except queue.Empty:
                    break
</snippet></ROW><ROW><id>18063675</id><snippet>def DialogUI(self):
    pan = wx.Panel(self)
    vbox = wx.BoxSizer(wx.VERTICAL) 
    dial_box = wx.BoxSizer(wx.HORIZONTAL)
    dial_text = wx.StaticText(pan, label = "Route :")
    dial_box.Add(dial_text,0,wx.ALL,5)
    dial_camp = wx.TextCtrl(pan)
    dial_box.Add(dial_camp,wx.EXPAND)
    pan.SetSizer(dial_box) #&lt;---- set sizer of pan to be dial_box

    vbox.Add(pan,wx.ALIGN_CENTER|wx.TOP, border = 4) #&lt;----add pan to main sizer
    opt_box = wx.BoxSizer(wx.HORIZONTAL)
    opt_close = wx.Button(self, label = "Close")
    opt_ok = wx.Button(self, label = "OK" )
    opt_box.Add(opt_ok)
    opt_box.Add(opt_close, flag =  wx.LEFT, border = 5)
    vbox.Add(opt_box, flag = wx.ALIGN_CENTER|wx.BOTTOM, border = 4)
    self.SetSizer(vbox)
</snippet></ROW><ROW><id>18063675</id><snippet>opt_ok = wx.Button(self,wx.ID_OK )
opt_close = wx.Button(self,wx.ID_CANCEL )
</snippet></ROW><ROW><id>18063681</id><snippet>dir()</snippet></ROW><ROW><id>18063681</id><snippet>dir(conn.get_zone("your zone."))</snippet></ROW><ROW><id>18063681</id><snippet>record</snippet></ROW><ROW><id>18063681</id><snippet>type</snippet></ROW><ROW><id>18063681</id><snippet>name</snippet></ROW><ROW><id>18063681</id><snippet>resource_records</snippet></ROW><ROW><id>18063681</id><snippet>conn = boto.route53.connection.Route53Connection(aws_access_key_id = aws_access_key_id, aws_secret_access_key = aws_secret_access_key)

zone = conn.get_zone("your.zone.")

for record in zone.get_records():
  print "Type: %s, name: %s, values: %s" % (record.type, record.name, ",".join(record.resource_records))
</snippet></ROW><ROW><id>18063689</id><snippet>my_math.py</snippet></ROW><ROW><id>18063689</id><snippet>main.py</snippet></ROW><ROW><id>18063689</id><snippet>from my_math import c
c()
</snippet></ROW><ROW><id>18063689</id><snippet>test</snippet></ROW><ROW><id>18063689</id><snippet>__init__.py</snippet></ROW><ROW><id>18063689</id><snippet>math.py</snippet></ROW><ROW><id>18063689</id><snippet>test</snippet></ROW><ROW><id>18063689</id><snippet>main.py</snippet></ROW><ROW><id>18063689</id><snippet>from test.math import c
c()
</snippet></ROW><ROW><id>18063689</id><snippet>.
|-- test
|   |-- __init__.py
|   `-- math.py
`-- main.py
</snippet></ROW><ROW><id>18063897</id><snippet>PROPAGATE_EXCEPTIONS</snippet></ROW><ROW><id>18063897</id><snippet>return jsonify(result={"status": 200})
</snippet></ROW><ROW><id>18063897</id><snippet>try</snippet></ROW><ROW><id>18063921</id><snippet>"'''"</snippet></ROW><ROW><id>18063937</id><snippet>&gt;&gt;&gt; s = "Restaurant_Review-g503927-d3864736-Reviews"
&gt;&gt;&gt; re.findall('[a-z]\d+', s)
['g503927', 'd3864736']
</snippet></ROW><ROW><id>18063937</id><snippet>[a-z]\d+</snippet></ROW><ROW><id>18063999</id><snippet>from flaskext.wtf import Form
</snippet></ROW><ROW><id>18063999</id><snippet>from flask.ext.wtf import Form
</snippet></ROW><ROW><id>18064392</id><snippet>values = []</snippet></ROW><ROW><id>18064392</id><snippet>values = {}
</snippet></ROW><ROW><id>18064392</id><snippet>mydict[mykey] = myvalue
</snippet></ROW><ROW><id>18064392</id><snippet>if newkey not in mydict:
    print('this will not overwrite anything')
</snippet></ROW><ROW><id>18064392</id><snippet>key</snippet></ROW><ROW><id>18064392</id><snippet>val</snippet></ROW><ROW><id>18064392</id><snippet>myDict[key]</snippet></ROW><ROW><id>18064392</id><snippet>value</snippet></ROW><ROW><id>18064392</id><snippet>if newkey not in mydict:
    mydict[newkey] = newvalue
</snippet></ROW><ROW><id>18064451</id><snippet>y1</snippet></ROW><ROW><id>18064451</id><snippet>y2</snippet></ROW><ROW><id>18064451</id><snippet>y1 &lt; y2</snippet></ROW><ROW><id>18064451</id><snippet>for y in range (y1,y2)
</snippet></ROW><ROW><id>18064451</id><snippet>y3</snippet></ROW><ROW><id>18064451</id><snippet>h</snippet></ROW><ROW><id>18064451</id><snippet>y4</snippet></ROW><ROW><id>18064451</id><snippet>y3 &gt; y4</snippet></ROW><ROW><id>18064451</id><snippet>for y in range (y3,y4)
</snippet></ROW><ROW><id>18064451</id><snippet>range()</snippet></ROW><ROW><id>18064451</id><snippet>y3</snippet></ROW><ROW><id>18064451</id><snippet>y4</snippet></ROW><ROW><id>18064632</id><snippet>b()</snippet></ROW><ROW><id>18064632</id><snippet>b</snippet></ROW><ROW><id>18064632</id><snippet>&gt;&gt;&gt; a = 2
&gt;&gt;&gt; b = lambda: a + 2
&gt;&gt;&gt; b()
4
&gt;&gt;&gt; a = 3
&gt;&gt;&gt; b()
5
</snippet></ROW><ROW><id>18064791</id><snippet>${components | n}</snippet></ROW><ROW><id>18064900</id><snippet>s</snippet></ROW><ROW><id>18064900</id><snippet>self.speed</snippet></ROW><ROW><id>18064900</id><snippet>dist += dt*speed</snippet></ROW><ROW><id>18064900</id><snippet>dist += speed</snippet></ROW><ROW><id>18064900</id><snippet>dt=1.</snippet></ROW><ROW><id>18064900</id><snippet>self.displacement[1] - self.speed</snippet></ROW><ROW><id>18064900</id><snippet>self.displacement[1] = self.displacement[1] - s</snippet></ROW><ROW><id>18064900</id><snippet>s</snippet></ROW><ROW><id>18064920</id><snippet>thisCell = [ numpy.zeros(shape=(i,j,k)) for t in range(1, Nmax) ]
</snippet></ROW><ROW><id>18064936</id><snippet>.__setattr__()</snippet></ROW><ROW><id>18064936</id><snippet>.__dict__</snippet></ROW><ROW><id>18064936</id><snippet>.__dict__</snippet></ROW><ROW><id>18064936</id><snippet>.__slots__</snippet></ROW><ROW><id>18064936</id><snippet>.__setattr__()</snippet></ROW><ROW><id>18064936</id><snippet>setattr()</snippet></ROW><ROW><id>18064953</id><snippet>None</snippet></ROW><ROW><id>18064953</id><snippet>0*x=0</snippet></ROW><ROW><id>18064962</id><snippet>from urllib2 import urlparse

url = 'http://www.example.com/example:8080'
parsedURL = urlparse.urlparse(url)
port = url.split(':')[2] 
fixedURL = parsedURL.scheme + '://' + parsedURL.netloc + ':' + port
</snippet></ROW><ROW><id>18064962</id><snippet>/</snippet></ROW><ROW><id>18064962</id><snippet>:</snippet></ROW><ROW><id>18064962</id><snippet>:</snippet></ROW><ROW><id>18065024</id><snippet>formatflowed</snippet></ROW><ROW><id>18065024</id><snippet>from formatflowed import convertToWrapped

text = convertToWrapped(msg.get_payload(), character_set=msg.get_charset())
</snippet></ROW><ROW><id>18065024</id><snippet>unicode</snippet></ROW><ROW><id>18065095</id><snippet>itertools.product</snippet></ROW><ROW><id>18065095</id><snippet>&gt;&gt;&gt; a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

&gt;&gt;&gt; for row in a:
...     print list(itertools.product(row, row))

[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]
[(4, 4), (4, 5), (4, 6), (5, 4), (5, 5), (5, 6), (6, 4), (6, 5), (6, 6)]
[(7, 7), (7, 8), (7, 9), (8, 7), (8, 8), (8, 9), (9, 7), (9, 8), (9, 9)]
</snippet></ROW><ROW><id>18065095</id><snippet>itertools.product</snippet></ROW><ROW><id>18065095</id><snippet>product</snippet></ROW><ROW><id>18065095</id><snippet>def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

row = [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]
grouped = grouper(3, row)

for i, row in enumerate(grouped):
    for j, column in enumerate(row):
        if i &lt; j:
            print column
</snippet></ROW><ROW><id>18065210</id><snippet>None</snippet></ROW><ROW><id>18065210</id><snippet>NULL</snippet></ROW><ROW><id>18065210</id><snippet>sqlFailInsert = """INSERT INTO efix_headers ( PathID ) VALUES ( %s );"""
//then later in my code
failcur = self.db.query( self.sqlFailInsert, ( pathID if pathID else None ) )
</snippet></ROW><ROW><id>18065295</id><snippet>import threading
import time
import os
from subprocess import call

def check_Temp(temp, delay, run_event,pid, endit):
    while run_event.is_set():
        time.sleep(delay)
        ##code for checking temperature will go here.
        print "temp is %s \n"%temp
        temp=temp-1
        #print os.getpid()
        if temp&lt;=38:
            print 'LowTemp %s!' % (temp, )
            endit()
            run_event.clear()

if __name__ == "__main__":
    run_ok = True
    def Terminator():
        global run_ok
        print "Terminating"
        run_ok = False

    run_event = threading.Event()
    run_event.set()
    temp =45
    d1=.1
    #print os.getpid()
    pid=os.getpid();
    run_ok = True
    t1 = threading.Thread(target = check_Temp, args = (temp,d1,run_event,pid, Terminator))
    t1.start()
    print "Starting"

 ########## main code will go here, just have a simple counter here to test the functionality.

    x=25
    try:
        while run_ok:
            time.sleep(.1)
            x=x-1
            print "x is %s "%x
            if x&lt;0:
                print "x is %s"%x
                raise Exception('spam', 'eggs')
            #exit()
        t1.join()
        print 'Finished!'
</snippet></ROW><ROW><id>18065342</id><snippet>rebuild()</snippet></ROW><ROW><id>18065342</id><snippet>order_insertion_by</snippet></ROW><ROW><id>18065342</id><snippet>save()</snippet></ROW><ROW><id>18065342</id><snippet>def save(self, *args, **kwargs):
    Comment.objects.rebuild()
    return super(CommentForm, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>18065403</id><snippet>out_file.write(identifier)</snippet></ROW><ROW><id>18065403</id><snippet>identifier = data ['items'][i]['id']</snippet></ROW><ROW><id>18065656</id><snippet>'\n'</snippet></ROW><ROW><id>18065656</id><snippet>'\n'</snippet></ROW><ROW><id>18065656</id><snippet>'\n'</snippet></ROW><ROW><id>18065656</id><snippet>add</snippet></ROW><ROW><id>18065656</id><snippet>add</snippet></ROW><ROW><id>18065656</id><snippet>nl</snippet></ROW><ROW><id>18065656</id><snippet>nl</snippet></ROW><ROW><id>18065656</id><snippet>acc</snippet></ROW><ROW><id>18065656</id><snippet>'.acc'</snippet></ROW><ROW><id>18065656</id><snippet>xy</snippet></ROW><ROW><id>18065656</id><snippet>x + acc</snippet></ROW><ROW><id>18065656</id><snippet>xy</snippet></ROW><ROW><id>18065656</id><snippet>x</snippet></ROW><ROW><id>18065656</id><snippet>xy</snippet></ROW><ROW><id>18065656</id><snippet>exyz</snippet></ROW><ROW><id>18065656</id><snippet>xyz</snippet></ROW><ROW><id>18065656</id><snippet>xxx</snippet></ROW><ROW><id>18065656</id><snippet>xy</snippet></ROW><ROW><id>18065656</id><snippet>tf</snippet></ROW><ROW><id>18065656</id><snippet>tf.writelines(nl)</snippet></ROW><ROW><id>18065656</id><snippet>'\n'</snippet></ROW><ROW><id>18065656</id><snippet>writelines</snippet></ROW><ROW><id>18065656</id><snippet>tf.write(nl)</snippet></ROW><ROW><id>18065656</id><snippet>writelines</snippet></ROW><ROW><id>18065656</id><snippet>xxx</snippet></ROW><ROW><id>18065656</id><snippet>xxx</snippet></ROW><ROW><id>18065656</id><snippet>tf.write(xxx)</snippet></ROW><ROW><id>18065656</id><snippet>tf.close</snippet></ROW><ROW><id>18065656</id><snippet>close</snippet></ROW><ROW><id>18065656</id><snippet>tf.close()</snippet></ROW><ROW><id>18065656</id><snippet>def add(x):
    with open('accounts.dat',"a+") as output_file:
        output_file.write('{0}.acc\n'.format(x))
</snippet></ROW><ROW><id>18065656</id><snippet>'\n'</snippet></ROW><ROW><id>18065656</id><snippet>'\n'</snippet></ROW><ROW><id>18065656</id><snippet>add</snippet></ROW><ROW><id>18065656</id><snippet>names</snippet></ROW><ROW><id>18065656</id><snippet>readlines</snippet></ROW><ROW><id>18065656</id><snippet>str.strip</snippet></ROW><ROW><id>18065656</id><snippet>names = tf.readlines()
for i in range(len(names)):
    names[i] = names[i].strip() # remove all the outside whitespace, including \n
</snippet></ROW><ROW><id>18065656</id><snippet>names = [line.strip() for line in tf]
</snippet></ROW><ROW><id>18065741</id><snippet>Canopy</snippet></ROW><ROW><id>18065741</id><snippet>export PYTHONHOME=/usr/lib/python2.7/
sudo easy_install -U distribute
sudo pip install --upgrade matplotlib
</snippet></ROW><ROW><id>18065741</id><snippet>matplotlib</snippet></ROW><ROW><id>18066003</id><snippet>show_all()</snippet></ROW><ROW><id>18066003</id><snippet>show()</snippet></ROW><ROW><id>18066186</id><snippet>In [67]: df = DataFrame(randn(10,2),index=pd.date_range('20000101',periods=10))

In [68]: df.iloc[0:3,0] = np.nan

In [69]: df.iloc[0:2,1] = np.nan

In [70]: df
Out[70]: 
                   0         1
2000-01-01       NaN       NaN
2000-01-02       NaN       NaN
2000-01-03       NaN -1.680185
2000-01-04  1.035485 -2.419576
2000-01-05  0.247941 -0.188783
2000-01-06 -0.328304 -1.579425
2000-01-07  1.209671  1.616452
2000-01-08 -1.050443  0.043022
2000-01-09 -1.342633 -1.188946
2000-01-10 -0.365231 -1.712874
</snippet></ROW><ROW><id>18066186</id><snippet>In [71]: df.apply(lambda x: x.first_valid_index())
Out[71]: 
0   2000-01-04 00:00:00
1   2000-01-03 00:00:00
dtype: datetime64[ns]

In [72]: df.apply(lambda x: x.first_valid_index()).max()
Out[72]: Timestamp('2000-01-04 00:00:00', tz=None)
</snippet></ROW><ROW><id>18066186</id><snippet>subset=list_of_columns</snippet></ROW><ROW><id>18066186</id><snippet>In [74]: df.dropna().first_valid_index()
Out[74]: Timestamp('2000-01-04 00:00:00', tz=None)
</snippet></ROW><ROW><id>18066433</id><snippet>"(?&lt;=_)(?!(19|20|21|22|23|24)\.)[0-9]+(?=\.)"

One or more digits `[0-9]+`
that aren't 19-24 `(?!19|20|21|22|23|24)` followed by a . 
following a _ `(?&lt;=_)` and preceding a . `(?=\.)`
</snippet></ROW><ROW><id>18066433</id><snippet>"(?&lt;=_)(?!(19|2[0-4])\.)[0-9]+(?=\.)"
</snippet></ROW><ROW><id>18066479</id><snippet>collections.Counter</snippet></ROW><ROW><id>18066479</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>18066479</id><snippet>O(N)</snippet></ROW><ROW><id>18066479</id><snippet>O(NlogN)</snippet></ROW><ROW><id>18066479</id><snippet>from collections import defaultdict, Counter
def solve(dataset, group_by_key, sum_value_keys):
    dic = defaultdict(Counter)
    for item in dataset:
        key = item[group_by_key]
        vals = {k:item[k] for k in sum_value_keys}
        dic[key].update(vals)
    return dic
... 
&gt;&gt;&gt; d = solve(my_dataset, 'date', ['value1', 'value2'])
&gt;&gt;&gt; d
defaultdict(&lt;class 'collections.Counter'&gt;,
{
 datetime.date(2013, 1, 2): Counter({'value2': 10, 'value1': 10}),
 datetime.date(2013, 1, 1): Counter({'value2': 20, 'value1': 20})
})
</snippet></ROW><ROW><id>18066479</id><snippet>Counter</snippet></ROW><ROW><id>18066479</id><snippet>&gt;&gt;&gt; c = Counter(**{'value1': 10, 'value2': 5})
&gt;&gt;&gt; c.update({'value1': 7, 'value2': 3})
&gt;&gt;&gt; c
Counter({'value1': 17, 'value2': 8})
</snippet></ROW><ROW><id>18066500</id><snippet>numpy.packbits</snippet></ROW><ROW><id>18066500</id><snippet>uint8</snippet></ROW><ROW><id>18066500</id><snippet>numpy.unpackbits</snippet></ROW><ROW><id>18066500</id><snippet>numpy.packbits</snippet></ROW><ROW><id>18066632</id><snippet>O(n)</snippet></ROW><ROW><id>18066632</id><snippet>any(key.startswith(mystr) for key in mydict)
</snippet></ROW><ROW><id>18066632</id><snippet>dict</snippet></ROW><ROW><id>18066632</id><snippet>str</snippet></ROW><ROW><id>18066851</id><snippet>defaultdict</snippet></ROW><ROW><id>18066851</id><snippet>d = defaultdict(lambda: myobj(param1))
</snippet></ROW><ROW><id>18066851</id><snippet>import functools
d = defaultdict(functools.partial(myobj, param1))
</snippet></ROW><ROW><id>18066855</id><snippet>USER</snippet></ROW><ROW><id>18066855</id><snippet>Key Word      PostgreSQL      SQL 99      SQL 92
USER          reserved        reserved    reserved
</snippet></ROW><ROW><id>18066884</id><snippet>def copystuff(src, dest):
    if os.path.isfile(src):
        dest_dirname = os.path.dirname(src)
        if not os.path.isdir(dest_dirname):
            os.makedirs(dest_dirname)
        shutil.copy2(src, dest)
    else:
        shutil.copytree(src, dest)
</snippet></ROW><ROW><id>18067059</id><snippet>app.py
overwatch/
    __init__.py
</snippet></ROW><ROW><id>18067059</id><snippet>from overwatch import app</snippet></ROW><ROW><id>18067059</id><snippet>app</snippet></ROW><ROW><id>18067059</id><snippet>__init__.py</snippet></ROW><ROW><id>18067103</id><snippet>logging</snippet></ROW><ROW><id>18067103</id><snippet>Logger</snippet></ROW><ROW><id>18067103</id><snippet>'SikuliScriptDetails_Logger'</snippet></ROW><ROW><id>18067103</id><snippet>stderr=STDOUT</snippet></ROW><ROW><id>18067103</id><snippet>Logger</snippet></ROW><ROW><id>18067103</id><snippet>PIPE</snippet></ROW><ROW><id>18067103</id><snippet>logging</snippet></ROW><ROW><id>18067103</id><snippet>open</snippet></ROW><ROW><id>18067103</id><snippet>write</snippet></ROW><ROW><id>18067103</id><snippet>stdout</snippet></ROW><ROW><id>18067103</id><snippet>with open(log_details_path, 'a') as logfile:
    logfile.write("---------Benginning Tests--------------\n")
    returncode = subprocess.call(["regedit", "-s", "MainFolder/FwSetup.reg"], stdout=logfile, stderr=STDOUT)
</snippet></ROW><ROW><id>18067103</id><snippet>logging</snippet></ROW><ROW><id>18067103</id><snippet>PIPE</snippet></ROW><ROW><id>18067103</id><snippet>read</snippet></ROW><ROW><id>18067103</id><snippet>PIPE</snippet></ROW><ROW><id>18067103</id><snippet>communicate</snippet></ROW><ROW><id>18067103</id><snippet>check_output</snippet></ROW><ROW><id>18067103</id><snippet>child_output = subprocess.check_output(["regedit", "-s", "MainFolder/FwSetup.reg"], stderr = STDOUT)
for line in child_output.splitlines():
    logdetails.info(line)
</snippet></ROW><ROW><id>18067364</id><snippet>__init__()</snippet></ROW><ROW><id>18067364</id><snippet>class consolidate(object):
    def __init__(self, file):
        self.file = file
    # rest of the code
</snippet></ROW><ROW><id>18067364</id><snippet>c = consolidate()
</snippet></ROW><ROW><id>18067364</id><snippet>import csv

class consolidate(object):

    def __init__(self, filename):
        self.filename = filename

    def create_master_list(self):
        with open(self.filename, 'rU') as f:
            f_d = csv.DictReader(f, delimiter='\t')
            m_l = []
            for d in f_d:
                m_l.append(d)
        return m_l
</snippet></ROW><ROW><id>18067364</id><snippet>c = consolidate('Abilities.txt')
a = c.create_master_list()
</snippet></ROW><ROW><id>18067364</id><snippet>self.file</snippet></ROW><ROW><id>18067364</id><snippet>self.filename</snippet></ROW><ROW><id>18067431</id><snippet>wheel</snippet></ROW><ROW><id>18067489</id><snippet>np.swapaxes</snippet></ROW><ROW><id>18067489</id><snippet>In [1]: a = np.arange(2*2*2).reshape((2,2,2))

In [2]: a
Out[2]: 
array([[[0, 1],
        [2, 3]],

       [[4, 5],
        [6, 7]]])

In [3]: a.flatten()
Out[3]: array([0, 1, 2, 3, 4, 5, 6, 7])

In [4]: np.swapaxes(a,2,1).flatten()
Out[4]: array([0, 2, 1, 3, 4, 6, 5, 7])
</snippet></ROW><ROW><id>18067489</id><snippet>In [6]: b = a.swapaxes(1,2)

In [7]: b.strides
Out[7]: (16, 4, 8)

In [8]: b = a.swapaxes(1,2).copy()

In [9]: b.strides
Out[9]: (16, 8, 4)
</snippet></ROW><ROW><id>18067549</id><snippet>print '{}{}'.format(counter, "   ".join(row))
</snippet></ROW><ROW><id>18067549</id><snippet>enumerate()</snippet></ROW><ROW><id>18067549</id><snippet>def print_board(board):
    for counter, row in enumerate(board, 1):
        print '{}  {}'.format(counter, "   ".join(row))
</snippet></ROW><ROW><id>18067549</id><snippet>&gt;&gt;&gt; print_board(board)
1  -   -   -   -   -   -   -   -   -
2  -   -   -   -   -   -   -   -   -
3  -   -   -   -   -   -   -   -   -
4  -   -   -   -   -   -   -   -   -
5  -   -   -   -   -   -   -   -   -
6  -   -   -   -   -   -   -   -   -
7  -   -   -   -   -   -   -   -   -
8  -   -   -   -   -   -   -   -   -
9  -   -   -   -   -   -   -   -   -
</snippet></ROW><ROW><id>18067588</id><snippet>inWaiting</snippet></ROW><ROW><id>18067588</id><snippet>def get_config():
    config.read("config/map.ini")
    ser = serial.Serial(3)
    ser.write(bytes("D" + '\r\n', encoding='ascii'))
    time.sleep(1)
    while ser.inWaiting() &gt; 0:
        r = ser.readline()
        r = r.decode('UTF-8').replace('\r\n', '')
        r = r.split()
        config.set("map", r[0], r[1].replace('V', ''))
        time.sleep(0.01)

    f = open("config/map.ini", "w")
    config.write(f)
    ser.close()
</snippet></ROW><ROW><id>18067792</id><snippet> //--&gt;object2.py
 from object1 import object1
 class object2:
     pass

 //--&gt;object1.py
 from object2 import object2
 class object1:
     pass
</snippet></ROW><ROW><id>18067792</id><snippet> //--&gt;object2.py
 import object1
 class object2:
     brother = object1.object1()

 //--&gt;object1.py
 import object2
 class object1:
     sister = object2.object2()
</snippet></ROW><ROW><id>18067792</id><snippet>  import object1 --&gt;object2.py
  import object2 --&gt;object1.py
  class object1:
      sister = object2.object2() //-&gt;it will give error here, as object2 module doesn't have object2 defined yet 
</snippet></ROW><ROW><id>18067942</id><snippet>collide</snippet></ROW><ROW><id>18067942</id><snippet>-300.0 -200.0 -100.0 -100.0
-300.0 -100.0 -100.0 -100.0
-300.0 -100.0 -200.0 -100.0
-300.0 -100.0 -200.0 -100.0
-300.0 1.13686837722e-13 -200.0 -100.0
-300.0 1.13686837722e-13 -200.0 1.27897692437e-13
-300.0 1.13686837722e-13 -200.0 1.27897692437e-13
-200.0 4.02080297728e-14 -200.0 1.27897692437e-13
-200.0 4.02080297728e-14 -200.0 100.0
-200.0 4.02080297728e-14 -200.0 100.0
</snippet></ROW><ROW><id>18067942</id><snippet>def collide(t,u):
    if abs(t.xcor() - u.xcor()) &lt; 1 and abs(t.ycor() - u.ycor()) &lt; 1:
        return True
    return False
</snippet></ROW><ROW><id>18067942</id><snippet>collide()</snippet></ROW><ROW><id>18067942</id><snippet>randomWalk()</snippet></ROW><ROW><id>18067966</id><snippet>provider</snippet></ROW><ROW><id>18067966</id><snippet>http://apple.com/itunes/importer</snippet></ROW><ROW><id>18067966</id><snippet>{http://apple.com/itunes/importer}provider
</snippet></ROW><ROW><id>18067966</id><snippet>namespaces</snippet></ROW><ROW><id>18067966</id><snippet>root.xpath</snippet></ROW><ROW><id>18067966</id><snippet>ns:provider</snippet></ROW><ROW><id>18067966</id><snippet>from lxml import etree
parser = etree.XMLParser(remove_blank_text=True)
tree = etree.parse(metadata, parser)
root = tree.getroot()
namespaces = {'ns':'http://apple.com/itunes/importer'}
items = iter(root.xpath('//ns:provider/text()|//ns:actor/@name',
                       namespaces=namespaces))
for provider, actor in zip(*[items]*2):
    print(provider, actor)
</snippet></ROW><ROW><id>18067966</id><snippet>('filmgroup', 'John Smith')
</snippet></ROW><ROW><id>18067966</id><snippet>&lt;provider&gt;</snippet></ROW><ROW><id>18067966</id><snippet>&lt;actor&gt;</snippet></ROW><ROW><id>18067966</id><snippet>for package in root.xpath('//ns:package', namespaces=namespaces):
    for provider in package.xpath('ns:provider', namespaces=namespaces):
        providerValue = provider.text
        print providerValue
    for actor in package.xpath('ns:actor', namespaces=namespaces):
        print actor.attrib['name']
</snippet></ROW><ROW><id>18068028</id><snippet>for row in table.find_all('tr'):
    rows.append([val.text.encode('utf-8') for val in row.find_all('td')])
</snippet></ROW><ROW><id>18068028</id><snippet>for row in table.find_all('tr'):
    rows.append([woNumber] + [val.text.encode('utf-8') for val in row.find_all('td')])
</snippet></ROW><ROW><id>18068028</id><snippet>rows</snippet></ROW><ROW><id>18068028</id><snippet>writer.writerows(row for row in rows if row)
</snippet></ROW><ROW><id>18068028</id><snippet>writer.writerows(row for row in rows if len(row) != 1)
</snippet></ROW><ROW><id>18068037</id><snippet>Application</snippet></ROW><ROW><id>18068037</id><snippet>tk.Frame</snippet></ROW><ROW><id>18068037</id><snippet>master</snippet></ROW><ROW><id>18068037</id><snippet>none</snippet></ROW><ROW><id>18068037</id><snippet>Application</snippet></ROW><ROW><id>18068208</id><snippet>public static int gcd(int a, int b) {
        int temp;
        while(b != 0) {
            temp = a;
            a = b;
            b = temp % b;
        }
        return a;
}
</snippet></ROW><ROW><id>18068208</id><snippet>while</snippet></ROW><ROW><id>18068208</id><snippet>int</snippet></ROW><ROW><id>18068208</id><snippet>a, b = b, a%b</snippet></ROW><ROW><id>18068208</id><snippet>a = b</snippet></ROW><ROW><id>18068208</id><snippet>b = a % b</snippet></ROW><ROW><id>18068208</id><snippet>a</snippet></ROW><ROW><id>18068208</id><snippet>a % b</snippet></ROW><ROW><id>18068208</id><snippet>a</snippet></ROW><ROW><id>18068208</id><snippet>a = b</snippet></ROW><ROW><id>18068231</id><snippet>path</snippet></ROW><ROW><id>18068231</id><snippet>os.walk</snippet></ROW><ROW><id>18068231</id><snippet>import os
for path, dirs, files in os.walk('FDF\FDF'):
    for file in files:
        print file
        filepath = os.path.join(path, file)
        print filepath
        fdf = open(filepath, "r")
</snippet></ROW><ROW><id>18068279</id><snippet>def index():
    response = make_response(render_template('index.html', foo=bar))
    # add your P3P header to the response
    response.headers['P3P] = 'xxxx'
    return response
</snippet></ROW><ROW><id>18068306</id><snippet>urllib2.HTTPRedirectHandler</snippet></ROW><ROW><id>18068334</id><snippet>In [11]: translate_df['NSUBDIVISION'].to_dict()
Out[11]:
{'*HUFFMAN**8MILES NE': 'OTHER',
 '0': 'OTHER',
 '00': 'OTHER',
 '000': 'OTHER',
 'INVERNESS POINT': 'INVERNESS'}
</snippet></ROW><ROW><id>18068334</id><snippet>replace</snippet></ROW><ROW><id>18068334</id><snippet>In [12]: df['SUBDIVISION'].replace(translate_df['NSUBDIVISION'].to_dict())
Out[12]:
0                INVERNESS
1                INVERNESS
2                INVERNESS
3    INVERNESS KERRY DOWNS
4          INVERNESS GREEN
5                INVERNESS
6                INVERNESS
7                INVERNESS
Name: SUBDIVISION, dtype: object
</snippet></ROW><ROW><id>18068399</id><snippet>addressof(size)</snippet></ROW><ROW><id>18068399</id><snippet>int</snippet></ROW><ROW><id>18068399</id><snippet>byref(size)</snippet></ROW><ROW><id>18068399</id><snippet>GetExtendedTcpTable</snippet></ROW><ROW><id>18068399</id><snippet>SetLastError</snippet></ROW><ROW><id>18068399</id><snippet>DWORD</snippet></ROW><ROW><id>18068399</id><snippet>NO_ERROR = 0
ERROR_INVALID_PARAMETER = 87
ERROR_INSUFFICIENT_BUFFER = 122
</snippet></ROW><ROW><id>18068399</id><snippet>pdwSize</snippet></ROW><ROW><id>18068399</id><snippet>resize</snippet></ROW><ROW><id>18068399</id><snippet>cast</snippet></ROW><ROW><id>18068399</id><snippet>class MIB_TCPTABLE_OWNER_PID(Structure):
    _fields_ = [
        ("dwNumEntries", DWORD),
        ("MIB_TCPROW_OWNER_PID", MIB_TCPROW_OWNER_PID * 0),
    ]

_GetExtendedTcpTable = windll.iphlpapi.GetExtendedTcpTable

def GetExtendedTcpTable(vip=AF_INET):
    table = MIB_TCPTABLE_OWNER_PID()
    size = DWORD() 
    order = 1

    failure = _GetExtendedTcpTable(
                  byref(table),
                  byref(size),
                  order,
                  vip,
                  TCP_TABLE_OWNER_PID_ALL,
                  0)

    if failure == ERROR_INSUFFICIENT_BUFFER:
        resize(table, size.value)
        memset(byref(table), 0, sizeof(table))
        failure = _GetExtendedTcpTable(
                      byref(table),
                      byref(size),
                      order,
                      vip,
                      TCP_TABLE_OWNER_PID_ALL,
                      0)

    if failure: 
        raise WinError(failure)

    ptr_type = POINTER(MIB_TCPROW_OWNER_PID * table.dwNumEntries)
    tables = cast(table.MIB_TCPROW_OWNER_PID, ptr_type)[0]

    pytables = []
    for table in tables:
        # rest unchanged
</snippet></ROW><ROW><id>18068399</id><snippet>LastError</snippet></ROW><ROW><id>18068399</id><snippet>GetLastError</snippet></ROW><ROW><id>18068399</id><snippet>LastError</snippet></ROW><ROW><id>18068399</id><snippet>LastError</snippet></ROW><ROW><id>18068399</id><snippet>GetLastError</snippet></ROW><ROW><id>18068399</id><snippet>use_last_error=True</snippet></ROW><ROW><id>18068399</id><snippet>iphlpapi = WinDLL('iphlpapi', use_last_error=True)
</snippet></ROW><ROW><id>18068399</id><snippet>WinDLL</snippet></ROW><ROW><id>18068399</id><snippet>LastError</snippet></ROW><ROW><id>18068399</id><snippet>get_last_error</snippet></ROW><ROW><id>18068399</id><snippet>set_last_error(0)</snippet></ROW><ROW><id>18068399</id><snippet>LastError</snippet></ROW><ROW><id>18068509</id><snippet>[i][3]
</snippet></ROW><ROW><id>18068509</id><snippet>[i]</snippet></ROW><ROW><id>18068509</id><snippet>listoflists[i].insert(3, ...)
</snippet></ROW><ROW><id>18068509</id><snippet>listoflists[i].append(...)
</snippet></ROW><ROW><id>18068564</id><snippet>x</snippet></ROW><ROW><id>18068564</id><snippet>y</snippet></ROW><ROW><id>18068564</id><snippet>width</snippet></ROW><ROW><id>18068564</id><snippet>height</snippet></ROW><ROW><id>18068564</id><snippet>GtkImage</snippet></ROW><ROW><id>18068564</id><snippet>GtkViewport</snippet></ROW><ROW><id>18068564</id><snippet>GtkViewport</snippet></ROW><ROW><id>18068564</id><snippet>GtkScrolledWindow</snippet></ROW><ROW><id>18068564</id><snippet>vadjustment</snippet></ROW><ROW><id>18068564</id><snippet>hadjustment</snippet></ROW><ROW><id>18068564</id><snippet>GtkScrolledWindow</snippet></ROW><ROW><id>18068564</id><snippet>GtkAdjustment</snippet></ROW><ROW><id>18068564</id><snippet>page-size</snippet></ROW><ROW><id>18068564</id><snippet>width</snippet></ROW><ROW><id>18068564</id><snippet>height</snippet></ROW><ROW><id>18068564</id><snippet>value</snippet></ROW><ROW><id>18068564</id><snippet>vadjustment</snippet></ROW><ROW><id>18068564</id><snippet>hadjustment</snippet></ROW><ROW><id>18068564</id><snippet>x</snippet></ROW><ROW><id>18068564</id><snippet>y</snippet></ROW><ROW><id>18068564</id><snippet>changed</snippet></ROW><ROW><id>18068564</id><snippet>value-changed</snippet></ROW><ROW><id>18068625</id><snippet>__del__</snippet></ROW><ROW><id>18068625</id><snippet>gc</snippet></ROW><ROW><id>18068625</id><snippet>gc.collect()</snippet></ROW><ROW><id>18068625</id><snippet>gc.collect()
oldcounts = gc.get_counts()
del last_reference_to_list
gc.collect()
newcounts = gc.get_counts()
print(oldcounts, newcounts)
</snippet></ROW><ROW><id>18068625</id><snippet>__del__</snippet></ROW><ROW><id>18068625</id><snippet>__del__</snippet></ROW><ROW><id>18068625</id><snippet>del</snippet></ROW><ROW><id>18068625</id><snippet>del</snippet></ROW><ROW><id>18068625</id><snippet>__del__</snippet></ROW><ROW><id>18068625</id><snippet>dl_list</snippet></ROW><ROW><id>18068625</id><snippet>tree_node</snippet></ROW><ROW><id>18068625</id><snippet>__del__</snippet></ROW><ROW><id>18068625</id><snippet>weakref</snippet></ROW><ROW><id>18068928</id><snippet>update</snippet></ROW><ROW><id>18068928</id><snippet>FTP.storbinary</snippet></ROW><ROW><id>18068928</id><snippet>&gt;&gt;&gt; update('')
UnboundLocalError: local variable 'count' referenced before assignment
</snippet></ROW><ROW><id>18068928</id><snippet>def update(block):
   global count
   count += 1
   print count
</snippet></ROW><ROW><id>18068928</id><snippet>global</snippet></ROW><ROW><id>18068928</id><snippet>class FtpHandler(object):
    def __init__(self):
        self.count = 0
    def update(self, block):
        self.count += 1
        print self.count
</snippet></ROW><ROW><id>18068928</id><snippet>ftp = ftplib.FTP(...)
# ...
ftp.storbinary(spam, eggs, callback=update)
</snippet></ROW><ROW><id>18068928</id><snippet>myhandler = FtpHandler()
ftp = ftplib.FTP(...)
# ...
ftp.storbinary(spam, eggs, callback=myhandler.update)
</snippet></ROW><ROW><id>18069072</id><snippet>locals</snippet></ROW><ROW><id>18069072</id><snippet>def test():
    a=1
    b=2
    pickle.dump(file, locals())
</snippet></ROW><ROW><id>18069072</id><snippet>print locals()</snippet></ROW><ROW><id>18069072</id><snippet>load</snippet></ROW><ROW><id>18069072</id><snippet>def test2():
    locals().update(pickle.load(file))
    print a
</snippet></ROW><ROW><id>18069072</id><snippet>a</snippet></ROW><ROW><id>18069072</id><snippet>a</snippet></ROW><ROW><id>18069072</id><snippet>def test():
    a = 1
    b = 2
    pickle.dump(file, (a, b))

def test2():
    a, b = pickle.load(file)
    print a
</snippet></ROW><ROW><id>18069072</id><snippet>def is_picklable(value):
    try:
        pickle.dumps(value)
    except TypeError:
        return False
    else:
        return True

def filter_dict_for_pickling(d):
    return {key: value for key, value in d.items() if is_picklable((key, value))}
</snippet></ROW><ROW><id>18069072</id><snippet>def pickle_filtered_dict(d, file):
    for key, value in d.items():
        pickle.dump((key, value), file)
    except TypeError:
        pass

def pickles(file):
    try:
        while True:
            yield pickle.load(file)
    except EOFError:
        pass

def unpickle_filtered_dict(file):
    return {key: value for key, value in pickles(file)}
</snippet></ROW><ROW><id>18069201</id><snippet>column_start</snippet></ROW><ROW><id>18069201</id><snippet>column_finish</snippet></ROW><ROW><id>18069201</id><snippet>get()</snippet></ROW><ROW><id>18069201</id><snippet>multiget()</snippet></ROW><ROW><id>18069201</id><snippet>get_count()</snippet></ROW><ROW><id>18069201</id><snippet>get_range()</snippet></ROW><ROW><id>18069201</id><snippet>datetime</snippet></ROW><ROW><id>18069201</id><snippet>def get_number_of_visitors(site, start_date, end_date=None):
    """
    start_date and end_date should be datetime.datetime instances or
    timestamps like those returned from time.time().
    """
    if end_date is None:
        end_date = datetime.datetime.now()
    pool = ConnectionPool('Logs', timeout = 2)
    col_fam = ColumnFamily(pool, 'sessions')
    return col_fam.get_count(site, column_start=start_date, column_finish=end_date)
</snippet></ROW><ROW><id>18069201</id><snippet>col_fam.get()</snippet></ROW><ROW><id>18069201</id><snippet>col_fam.xget()</snippet></ROW><ROW><id>18069201</id><snippet>ConnectionPool()</snippet></ROW><ROW><id>18069359</id><snippet>import sys
sys.path.append("../src")
import person
</snippet></ROW><ROW><id>18069369</id><snippet>&gt;&gt;&gt; def findString(inputStr, targetStr):
...     if convertToStringSoup(targetStr).find(convertToStringSoup(inputStr)) != -1:
...             return True
...     return False
... 
&gt;&gt;&gt; def convertToStringSoup(testStr):
...     testStr = testStr.lower()
...     testStr = testStr.replace(" ", "")
...     testStr = testStr.replace("(", "")
...     testStr = testStr.replace(")", "")
...     return testStr
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; findString("hello", "hello")
True
&gt;&gt;&gt; findString("hello", "hello1")
True
&gt;&gt;&gt; findString("hello", "hell!o1")
False
&gt;&gt;&gt; findString("hello", "hell( o)1")
True
</snippet></ROW><ROW><id>18069424</id><snippet>tofile</snippet></ROW><ROW><id>18069424</id><snippet>bitarray</snippet></ROW><ROW><id>18069424</id><snippet>^@^@</snippet></ROW><ROW><id>18069424</id><snippet>^@</snippet></ROW><ROW><id>18069424</id><snippet>to01</snippet></ROW><ROW><id>18069424</id><snippet>with open('test_file.inp','w') as output_file:
    output_file.write('test_1 = ')
    output_file.write(myBitArray.to01())
    output_file.write('\ntest_2 = ')
    output_file(test_bitarray.to01())
</snippet></ROW><ROW><id>18069424</id><snippet>output_file(str(test_bitarray))
</snippet></ROW><ROW><id>18069424</id><snippet>bitarray('0000000000')
</snippet></ROW><ROW><id>18069454</id><snippet>class Person:
    name="Person"
    def speak(self):
        print "Hi! Im %s"%slf.name

class Dad(Person):
     name = "Dad"

class Mom(Person):
     name = "Mom"

class Child(Person):
     name = "a Child"
     age  = 5
     def speak(self):
        print "Hewwo, I am a %d year old child!"%self.age

d = Dad()
m = Mom()
c = Child()

c.speak()
m.speak()
d.speak()
</snippet></ROW><ROW><id>18069454</id><snippet>class Child:
   var3 = "whatever"

c = Child()
c.var3 = "something_else"

print c.var3
print Child.var3
</snippet></ROW><ROW><id>18069577</id><snippet>byPath</snippet></ROW><ROW><id>18069577</id><snippet>elem != ''</snippet></ROW><ROW><id>18069577</id><snippet>not elem</snippet></ROW><ROW><id>18069577</id><snippet>x = #your x as posted

def byPath (tree, path):
    try: head, tail = path.split ('.', 1)
    except: return tree [path]

    if head == 'XX': return [byPath (node, tail) for node in tree]
    else: return byPath (tree [head], tail)


print (byPath (x, 'top.middle.XX.nested') )
print (byPath (x, 'top.last.XX.nested.XX.first') )
print (byPath (x, 'top.last.XX.nested.XX.second') )
print (byPath (x, 'other') )
</snippet></ROW><ROW><id>18069577</id><snippet>def count (result):
    if isinstance (result, list):
        total = 0
        positive = 0
        for e in result:
            r = count (e)
            total += r [1]
            positive += r [0]
        return (positive, total)
    else: return (0 if result == '' else 1, 1)

a = byPath (x, 'top.middle.XX.nested')
b = byPath (x, 'top.last.XX.nested.XX.first')
c = byPath (x, 'top.last.XX.nested.XX.second')
d = byPath (x, 'other')

for x in [a, b, c, d]: print (count (x) )
</snippet></ROW><ROW><id>18069577</id><snippet>def f (tree, path):
    return count (byPath (tree, path) )

for path in ['top.middle.XX.nested', 'top.last.XX.nested.XX.first', 'top.last.XX.nested.XX.second', 'other']:
    print (path, f (x, path) )
</snippet></ROW><ROW><id>18069711</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; find_decimal = re.compile(r'decimal\((\d+,\d+)\)')
&gt;&gt;&gt; find_decimal.match('decimal(4,1)').group(1)
'4,1'
</snippet></ROW><ROW><id>18069772</id><snippet>app</snippet></ROW><ROW><id>18069772</id><snippet>app</snippet></ROW><ROW><id>18069772</id><snippet>import app</snippet></ROW><ROW><id>18069772</id><snippet>app</snippet></ROW><ROW><id>18069772</id><snippet>app.app</snippet></ROW><ROW><id>18069772</id><snippet>myApp = app.app({"testFKey":[3,2,2]})</snippet></ROW><ROW><id>18069772</id><snippet>import app</snippet></ROW><ROW><id>18069772</id><snippet>from app import app</snippet></ROW><ROW><id>18069772</id><snippet>app</snippet></ROW><ROW><id>18069772</id><snippet>myApp = app({"testFKey":[3,2,2]})</snippet></ROW><ROW><id>18070040</id><snippet>'simple_history'
</snippet></ROW><ROW><id>18070041</id><snippet># SimpleGame.py
import games, random


print("Welcome to the world's simplest game!\n")

again = None
while again != "n":
    players = []

    num = games.ask_number(question = "How many players? (2 - 5): ", low = 2, high = 5)
    for i in range(num):
        name = input("Player name: ")
        score = random.randrange(100) + 1
        player = games.Player(name, score)
        players.append(player)

    print("\nHere are the game results:")
    for player in players:
        print(player)

    again = games.ask_yes_no("\nDo you want to play again? (y/n): ")

input("\n\nPress the enter key to exit.")
</snippet></ROW><ROW><id>18070041</id><snippet>num</snippet></ROW><ROW><id>18070064</id><snippet>secondProcess</snippet></ROW><ROW><id>18070064</id><snippet>p = Process(target=secondProcess)
</snippet></ROW><ROW><id>18070170</id><snippet>.//</snippet></ROW><ROW><id>18070170</id><snippet>print(cols[0].xpath('.//a/@href'))
</snippet></ROW><ROW><id>18070170</id><snippet>['Job.aspx?job=1696~EQG~1259184T1~99&amp;keyword=']</snippet></ROW><ROW><id>18070309</id><snippet>open('file/path/file_name', 'w')
</snippet></ROW><ROW><id>18070309</id><snippet>/file/path/file_name</snippet></ROW><ROW><id>18070309</id><snippet>file</snippet></ROW><ROW><id>18070309</id><snippet>file</snippet></ROW><ROW><id>18070309</id><snippet>path</snippet></ROW><ROW><id>18070309</id><snippet>os.makedirs('file/path')
open('file/path/file_name', 'w')
</snippet></ROW><ROW><id>18070309</id><snippet>print input
print os.path.abspath(input)
</snippet></ROW><ROW><id>18070309</id><snippet>/home/root/file/path/file_name</snippet></ROW><ROW><id>18070309</id><snippet>/home/root/file/path</snippet></ROW><ROW><id>18070382</id><snippet>UnicodeJSONRenderer</snippet></ROW><ROW><id>18070382</id><snippet>JSONRenderer</snippet></ROW><ROW><id>18070382</id><snippet>\u</snippet></ROW><ROW><id>18070382</id><snippet>UnicodeJSONRenderer</snippet></ROW><ROW><id>18070479</id><snippet>readline</snippet></ROW><ROW><id>18070479</id><snippet>pip</snippet></ROW><ROW><id>18070479</id><snippet>#egg=&lt;project name&gt;</snippet></ROW><ROW><id>18070494</id><snippet>curl -silent http://example.com/mycontroller/myfunction
</snippet></ROW><ROW><id>18070527</id><snippet>{{ '{{' }}
</snippet></ROW><ROW><id>18070527</id><snippet>raw</snippet></ROW><ROW><id>18070527</id><snippet>{% raw %}
    &lt;ul&gt;
    {% for item in seq %}
        &lt;li&gt;{{ item }}&lt;/li&gt;
    {% endfor %}
    &lt;/ul&gt;
{% endraw %}
</snippet></ROW><ROW><id>18070609</id><snippet>var page = require('webpage').create();
page.open('http://github.com/', function () {
    page.render('github.png');
    phantom.exit();
});
</snippet></ROW><ROW><id>18070609</id><snippet>driver = webdriver.Chrome()
driver.get('http://www.google.com'
driver.save_screenshot('out.png')
driver.quit();
</snippet></ROW><ROW><id>18070627</id><snippet>while there_are_more_results:
    results = cursor.fetchmany(10)
    for result in results:
        do_something(result)
</snippet></ROW><ROW><id>18070627</id><snippet>def main():
    for column in range (0, number_of_schools):
        for student in MySQL_product():
            print student
</snippet></ROW><ROW><id>18070645</id><snippet>&gt;&gt;&gt; word_dict = {'et': ['horse','dog'], 'ft': ['horses','dogs']}
&gt;&gt;&gt; dict(word_dict.values())
{'horses': 'dogs', 'horse': 'dog'}
</snippet></ROW><ROW><id>18070649</id><snippet>scipy.stats.chi2.ppf</snippet></ROW><ROW><id>18070649</id><snippet>&gt; qchisq(0.05,5)
[1] 1.145476
</snippet></ROW><ROW><id>18070649</id><snippet>In [8]: scipy.stats.chi2.ppf(0.05, 5)
Out[8]: 1.1454762260617695
</snippet></ROW><ROW><id>18070841</id><snippet>sort</snippet></ROW><ROW><id>18070841</id><snippet>n</snippet></ROW><ROW><id>18070841</id><snippet>aList</snippet></ROW><ROW><id>18070841</id><snippet>insertOne(n, aList)</snippet></ROW><ROW><id>18070841</id><snippet>def sort(aList):
  if len(aList)&lt;=1:
    return aList
  else:
    return insertOne(aList[0], sort(aList[1:]))
</snippet></ROW><ROW><id>18070841</id><snippet>aList</snippet></ROW><ROW><id>18070841</id><snippet>insertOne</snippet></ROW><ROW><id>18070865</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>18071174</id><snippet>def f(n):
    if n==0:                    
        return 1                
    else:
        m = f(n-1)
        s = n * m
        return s

if __name__ == '__main__':
    n = raw_input('input an integer value to compute its factorial:\n')
    n = int(n)
    result = f(n)
    print result
    # or alternatively for the last two lines, if you don't want to save the result
    print f(n)
</snippet></ROW><ROW><id>18071174</id><snippet>if __name__</snippet></ROW><ROW><id>18071247</id><snippet>pip2pi</snippet></ROW><ROW><id>18071469</id><snippet>5</snippet></ROW><ROW><id>18071469</id><snippet>4</snippet></ROW><ROW><id>18071469</id><snippet>3</snippet></ROW><ROW><id>18071469</id><snippet>4</snippet></ROW><ROW><id>18071469</id><snippet>3</snippet></ROW><ROW><id>18071469</id><snippet>2</snippet></ROW><ROW><id>18071469</id><snippet>          _____5_____
         /           \
      __4__           3
     /     \         / \
    3       2       2   1
   / \     / \     / \
  2   1   1   0   1   0
 / \
1   0
</snippet></ROW><ROW><id>18071469</id><snippet>5
 \
  4
   \
    3
     \
      2
       \
        1
</snippet></ROW><ROW><id>18071469</id><snippet>def fibonacci(x, n):
    for i in range(x):
        print "  ",
    print "Level %d called with %d"%(x,n)
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fibonacci(x+1,n-1) + fibonacci(x+1,n-2)

print fibonacci (0,5)
</snippet></ROW><ROW><id>18071469</id><snippet>Level 0 called with 5
   Level 1 called with 4
      Level 2 called with 3
         Level 3 called with 2
            Level 4 called with 1
            Level 4 called with 0
         Level 3 called with 1
      Level 2 called with 2
         Level 3 called with 1
         Level 3 called with 0
   Level 1 called with 3
      Level 2 called with 2
         Level 3 called with 1
         Level 3 called with 0
      Level 2 called with 1
5
</snippet></ROW><ROW><id>18071469</id><snippet>fib(2)</snippet></ROW><ROW><id>18071469</id><snippet>5</snippet></ROW><ROW><id>18071469</id><snippet>fact(20)</snippet></ROW><ROW><id>18071469</id><snippet>def fact (n): # n = 1..whatever
    result = n
    for i in range (2,n):
        result = result * n

def fib(n): # n = 1..whatever
    me = 1
    if n &gt;1:
        grandparent = 1
        parent = 1;
        for i in range(2, n):
            me = parent + grandparent
            grandparent = parent
            parent = me
    return me
</snippet></ROW><ROW><id>18071469</id><snippet>n</snippet></ROW><ROW><id>18071474</id><snippet>from sample import *
</snippet></ROW><ROW><id>18071474</id><snippet>import sample

student1 = sample.Student()
</snippet></ROW><ROW><id>18071677</id><snippet>for y in range(5):
    for x in range(6):
        DrawBackground(background, x*100, y*100)
</snippet></ROW><ROW><id>18071825</id><snippet>try:
    result = weird_func()
except TheExceptionYouWantToCatch:
    result = None

if result is None:
    #Whatever you want
</snippet></ROW><ROW><id>18072002</id><snippet>self.request.sendall('wat' + '\n')
</snippet></ROW><ROW><id>18072057</id><snippet>if __name__ == '__main__':
</snippet></ROW><ROW><id>18072057</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>18072057</id><snippet>import statements

class a1:
    def __init__(self, stuff):
        do stuff

    def run_proc():
        #do stuff involving 'a1' when called from another module


if __name__ == '__main__':
    pass # Replace with test code!
</snippet></ROW><ROW><id>18072057</id><snippet>import a
def do_a():
    A = a.a1()   # Create an instance
    A.run_proc() # Use it

if __name__ == '__main__':
   do_a()
</snippet></ROW><ROW><id>18072236</id><snippet>pass</snippet></ROW><ROW><id>18072236</id><snippet>&gt;&gt;&gt; class Foo(object):
...     print repr(Foo)
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in Foo
NameError: name 'Foo' is not defined
</snippet></ROW><ROW><id>18072415</id><snippet>normalize-space</snippet></ROW><ROW><id>18072415</id><snippet>stats.select('''//tr[normalize-space(td/text()) = 'User Name']''').extract()
</snippet></ROW><ROW><id>18072415</id><snippet>strip</snippet></ROW><ROW><id>18072415</id><snippet>&gt;&gt;&gt; '\r\n\rsample\r\n'.strip()
'sample'
</snippet></ROW><ROW><id>18072415</id><snippet>normalize-space</snippet></ROW><ROW><id>18072415</id><snippet>&gt;&gt;&gt; ' '.join('\r\ns  am  \r\n ple\r\n'.split())
's am ple'
</snippet></ROW><ROW><id>18072527</id><snippet>templist = [('word',1234.555),('word2',5534342.3434)]
compare_dict['word'] = ['word','another word','home']
</snippet></ROW><ROW><id>18072527</id><snippet>dict[word]['idf']=templist(word,number)</snippet></ROW><ROW><id>18072527</id><snippet>dict[word]['idf']=templist(word,0)</snippet></ROW><ROW><id>18072527</id><snippet>for word, number in templist:
    if word in compare_dict['word']:
        compare_dict['idf'][word] = number
    else:
        compare_dict['idf'][word] = 0
</snippet></ROW><ROW><id>18072543</id><snippet>hlines</snippet></ROW><ROW><id>18072543</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# Read data from file into variables
y, c, x1, x2 = np.loadtxt('data.txt', unpack=True)

# Map value to color
color_mapper = np.vectorize(lambda x: {0: 'red', 1: 'blue'}.get(x))

# Plot a line for every line of data in your file
plt.hlines(y, x1, x2, colors=color_mapper(c))
</snippet></ROW><ROW><id>18072799</id><snippet>[[float(y) for y in x] for x in l]
</snippet></ROW><ROW><id>18072799</id><snippet>[float(y) for x in l for y in x]</snippet></ROW><ROW><id>18072822</id><snippet>&gt;&gt;&gt; resw.scale
0.99139414802065384
&gt;&gt;&gt; resw.mse_resid
0.99139414802065384

&gt;&gt;&gt; np.dot(resw.wresid, resw.wresid) / resw.df_resid
0.99139414802065384

&gt;&gt;&gt; (resw.resid * resw.model.weights * res.resid).sum() / resw.df_resid
0.99139414802065395
</snippet></ROW><ROW><id>18072886</id><snippet>b = [nike1, nike2, nike3]</snippet></ROW><ROW><id>18072886</id><snippet>with open('company_inf1.csv', 'rb') as inf :
    reader = csv.reader(inf, delimiter=',')
    reader.next() #skip header
    name, date, indus, nike1, nike2, nike3, paid, abbr = row
    print(name, date, indus, [nike1, nike2, nike3], paid, abbr)
</snippet></ROW><ROW><id>18073038</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>18073038</id><snippet>views.py</snippet></ROW><ROW><id>18073050</id><snippet>level = {
    1: logging.ERROR,
    2: logging.WARNING,
    3: logging.INFO,
    4: logging.DEBUG
}.get(opts.verbosity, logging.DEBUG)
</snippet></ROW><ROW><id>18073050</id><snippet>optparse</snippet></ROW><ROW><id>18073050</id><snippet>argparse</snippet></ROW><ROW><id>18073852</id><snippet>60 &gt; foo &gt; 45</snippet></ROW><ROW><id>18073852</id><snippet>10,20,abc,40
</snippet></ROW><ROW><id>18073852</id><snippet>['10', '20', 'abc', '40']  # list of strings
</snippet></ROW><ROW><id>18073852</id><snippet>Python 2.7.3 (default, Apr 10 2012, 23:24:47) [MSC v.1500 64 bit (AMD64)] on win
32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 1 &lt; '2'
True
&gt;&gt;&gt; 2 &lt; '1'
True
</snippet></ROW><ROW><id>18073852</id><snippet>Python 3.2.3 (default, Apr 11 2012, 07:12:16) [MSC v.1500 64 bit (AMD64)] on win
32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 1 &lt; '2'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: int() &lt; str()
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18073852</id><snippet>&gt;&gt;&gt; 1 &lt; '2' &lt; 3  # Python 2
False
&gt;&gt;&gt; 1 &lt; int('2') &lt; 3
True
</snippet></ROW><ROW><id>18073852</id><snippet>var1 = []
for row in f:
   if  60 &gt; row[4] &gt; 45 and 165 &gt; row[1] &gt; 150:
      var1.append(row)
</snippet></ROW><ROW><id>18073852</id><snippet>var1 = []
for row in reader:
    if 60 &gt; int(row[4]) &gt; 45 and 165 &gt; int(row[1]) &gt; 150:
        var1.append(row)
</snippet></ROW><ROW><id>18073852</id><snippet>for row in reader:
    print row [0]
</snippet></ROW><ROW><id>18073852</id><snippet>reader</snippet></ROW><ROW><id>18073852</id><snippet>with open(path, 'rb') as f:
    reader = csv.reader(f, delimiter=',')  # why specify the delimiter?
    for row in reader:
        print row[0]
        #this prints out the first column 

with open(path, 'rb') as f:  # we open the file a second time
    reader = csv.reader(f)
    var1 = []
    for row in f:
        if 60 &gt; int(row[4]) &gt; 45 and 165 &gt; int(row[1]) &gt; 150:
            var1.append(row)
</snippet></ROW><ROW><id>18074101</id><snippet>Series.index._engine.mapping</snippet></ROW><ROW><id>18074101</id><snippet>is_monotonic</snippet></ROW><ROW><id>18074101</id><snippet>asof()</snippet></ROW><ROW><id>18074101</id><snippet>import numpy as np
import pandas as pd
idx =["%07d" % x for x in range(int(2e6))]
a = pd.Series(np.arange(2e6, dtype=np.double), index=idx)
new_index = ["0000003", "0000020", "000002a"]

print a.index._engine.mapping # None
print a.reindex(new_index)
print a.index._engine.mapping # &lt;pandas.hashtable.PyObjectHashTable object at ...&gt;

a = pd.Series(np.arange(2e6, dtype=np.double), index=idx)
print a.asof(new_index)
print a.index._engine.mapping # None
</snippet></ROW><ROW><id>18074101</id><snippet>searchsorted()</snippet></ROW><ROW><id>18074101</id><snippet>&gt;&gt;&gt; a.index[a.index.searchsorted(new_index)] 
Index([u'0000003', u'0000020', u'0000030'], dtype=object)
</snippet></ROW><ROW><id>18074289</id><snippet>format_string</snippet></ROW><ROW><id>18074289</id><snippet>x % num_row</snippet></ROW><ROW><id>18074289</id><snippet>i</snippet></ROW><ROW><id>18074289</id><snippet>enumerate(a, 1)</snippet></ROW><ROW><id>18074289</id><snippet>a = range(3, 34)</snippet></ROW><ROW><id>18074289</id><snippet>i == 0</snippet></ROW><ROW><id>18074289</id><snippet>i</snippet></ROW><ROW><id>18074289</id><snippet>0</snippet></ROW><ROW><id>18074289</id><snippet>not x % num_row</snippet></ROW><ROW><id>18074289</id><snippet>x % num_row == 0</snippet></ROW><ROW><id>18074289</id><snippet>a = range(1,21)
num_row = 5

a = map(str, a)
max_length = len(max(a, key=len))
for i, x in enumerate(a, 1):
    print x.rjust(max_length),
    if i % num_row == 0:
        print
</snippet></ROW><ROW><id>18074717</id><snippet>from collections import Counter
def test(x):
    if len(x) &gt; 10:
           return False
    c = Counter(x)
    for i, v in enumerate(x):
            if int(v) != c.get(str(i), 0):
                    return False
    return True

a = input('number: '): #2.x use raw_input
if test(a):
    print(a, 'is')
else:
    print(a, 'is not')
</snippet></ROW><ROW><id>18074717</id><snippet>&gt;&gt;&gt; auto
['1210', '2020', '21200', '3211000', '42101000']
&gt;&gt;&gt; map(test, auto)
[True, True, True, True, True]

&gt;&gt;&gt; auto = ['12321', '13213', '134', '1231', '123124543']
&gt;&gt;&gt; map(test, auto)
[False, False, False, False, False]
</snippet></ROW><ROW><id>18074717</id><snippet>&gt;&gt;&gt; def isSelfDescribing(n):
        s = str(n)
        return all(s.count(str(i)) == int(ch) for i, ch in enumerate(s))
</snippet></ROW><ROW><id>18074754</id><snippet>urllib</snippet></ROW><ROW><id>18074754</id><snippet>urllib2</snippet></ROW><ROW><id>18074754</id><snippet>from urllib import urlencode
from urllib2 import urlopen

params = urlencode(postfields)
url = whmcsurl + 'modules/servers/licensing/verify.php'
response = urlopen(url, params)
data = response.read()
</snippet></ROW><ROW><id>18074754</id><snippet>urlopen()</snippet></ROW><ROW><id>18074754</id><snippet>POST</snippet></ROW><ROW><id>18074754</id><snippet>httplib</snippet></ROW><ROW><id>18074754</id><snippet>urllib.urlencode()</snippet></ROW><ROW><id>18074754</id><snippet>requests</snippet></ROW><ROW><id>18074754</id><snippet>import requests

response = requests.post(whmcsurl + 'modules/servers/licensing/verify.php', params=params)
data = response.content  # or response.text for decoded content, or response.json(), etc.
</snippet></ROW><ROW><id>18075145</id><snippet>from Secondary import Secondary
</snippet></ROW><ROW><id>18075145</id><snippet>src</snippet></ROW><ROW><id>18075145</id><snippet>PYTHON_PATH</snippet></ROW><ROW><id>18075267</id><snippet>_collections</snippet></ROW><ROW><id>18075451</id><snippet>{
    "John": 1,
    "likes": 2,
    "to": 3,
    "watch": 4,
    "movies": 5,
    "also": 6,
    "football": 7,
    "games": 8,
    "Mary": 9,
    "too": 10
}
</snippet></ROW><ROW><id>18075451</id><snippet>[1, 2, 1, 1, 1, 0, 0, 0, 1, 1]
[1, 1, 1, 1, 0, 1, 1, 1, 0, 0]
</snippet></ROW><ROW><id>18075633</id><snippet>templist=[]
for key, value in docs.items():
    tf_idf = list(value['tf_idf'].items())
    idf = list(value['idf'].items())
    templist.append(tf_idf + idf)
</snippet></ROW><ROW><id>18075781</id><snippet>case CE_ToolButtonLabel:
    if (const QStyleOptionToolButton *toolbutton
            = qstyleoption_cast&lt;const QStyleOptionToolButton *&gt;(opt)) {
        QRect rect = toolbutton-&gt;rect;
        int shiftX = 0;
        int shiftY = 0;
        if (toolbutton-&gt;state &amp; (State_Sunken | State_On)) {
            shiftX = proxy()-&gt;pixelMetric(PM_ButtonShiftHorizontal, toolbutton, widget);
            shiftY = proxy()-&gt;pixelMetric(PM_ButtonShiftVertical, toolbutton, widget);
        }
        // Arrow type always overrules and is always shown
        bool hasArrow = toolbutton-&gt;features &amp; QStyleOptionToolButton::Arrow;
        if (((!hasArrow &amp;&amp; toolbutton-&gt;icon.isNull()) &amp;&amp; !toolbutton-&gt;text.isEmpty())
            || toolbutton-&gt;toolButtonStyle == Qt::ToolButtonTextOnly) {
            int alignment = Qt::AlignCenter | Qt::TextShowMnemonic;
</snippet></ROW><ROW><id>18075892</id><snippet>/</snippet></ROW><ROW><id>18075892</id><snippet>/</snippet></ROW><ROW><id>18075892</id><snippet>flags=re.IGNORECASE</snippet></ROW><ROW><id>18075892</id><snippet>i</snippet></ROW><ROW><id>18075892</id><snippet>matches = re.findall('&lt;(.*?)&gt;([^&lt;]+)&lt;/\\1&gt;', data, flags=re.IGNORECASE)
print(dict(matches))
</snippet></ROW><ROW><id>18075892</id><snippet>\</snippet></ROW><ROW><id>18075892</id><snippet>matches = re.findall(r'&lt;(.*?)&gt;([^&lt;]+)&lt;/\1&gt;', data, flags=re.IGNORECASE)
print(dict(matches))
</snippet></ROW><ROW><id>18075892</id><snippet>{'status': 'Active', 'companyname': 'TEST', ...}
</snippet></ROW><ROW><id>18075892</id><snippet>lxml.html</snippet></ROW><ROW><id>18075892</id><snippet>lxml.etree</snippet></ROW><ROW><id>18075892</id><snippet>data</snippet></ROW><ROW><id>18075892</id><snippet>import lxml.html
print({x.tag:x.text for x in lxml.html.fromstring(data)})
</snippet></ROW><ROW><id>18075997</id><snippet>if winloss == "w":
    getW = getW + 1 if getW else 1
    #getW.save()
    print getW
</snippet></ROW><ROW><id>18076136</id><snippet>result = SearchQuerySet.filter(ID=7).models(itemType)
</snippet></ROW><ROW><id>18076231</id><snippet>&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; G = nx.DiGraph([(0, 0), (0, 1), (0, 2), (1, 2), (2, 0), (2, 1), (2, 2)])
&gt;&gt;&gt; list(nx.simple_cycles(G))
[[2], [2, 1], [2, 0], [2, 0, 1], [0]]
</snippet></ROW><ROW><id>18076544</id><snippet>//table[@id='atab']//tr[contains(td[2], 'needle')]/td[11]/ul/li/input
</snippet></ROW><ROW><id>18076570</id><snippet>for each in range(len(Show)):
    print("{0:&lt;10}  |  {1:&lt;10}  |  {2:&lt;10}  ".format(Show[each], ShowStart[each],  ShowEnd[each]))
</snippet></ROW><ROW><id>18076570</id><snippet>print("This programe will keep track of your TV schedule.")
Finish = False
shows = []
while not Finish:
    ShowName = input("What is the shows name?: ")
    if ShowName == "":
        Finish = True
    else:
        ShowStartTime = input("What time does the show start?: ")
        ShowEndTime = input("What time does the show end?: ")
        shows.append({'name': ShowName, 'start': ShowStartTime, 'end': ShowEndTime})

print("{0:&lt;10}  |  {1:&lt;10}  |  {2:&lt;10}  ".format("Show Name", "Start Time", "End Time"))

for item in shows:
    print("{0:&lt;10}  |  {1:&lt;10}  |  {2:&lt;10}  ".format(item['name'], item['start'],  item['end']))
    # Or  the more pythonic way:
    print("{name:&lt;10} | {start:&lt;10} | {end:&lt;10} ".format(**item)
input()
</snippet></ROW><ROW><id>18076795</id><snippet>awk '/&lt;font /{intag=1}
     /&lt;\/font&gt;/{intag=0 ;br=0}
     intag==1 &amp;&amp; /&lt;br&gt;/{br++}
     {print}
     br==1{print "Foo"; getline}
     br==2{print "Bar"; getline}' file
</snippet></ROW><ROW><id>18076795</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>18076795</id><snippet>Foo</snippet></ROW><ROW><id>18076795</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>18076795</id><snippet>Bar</snippet></ROW><ROW><id>18077279</id><snippet>from flask import Markup
sentence =  '&lt;p&gt; Reading, watching or &lt;span class="matching"&gt;listening&lt;/span&gt; to the media isn\'t &lt;span class="matching"&gt;matching&lt;/span&gt;&lt;span class="matching"&gt;much&lt;/span&gt; help either. &lt;/p&gt;'
Markup(sentence)
</snippet></ROW><ROW><id>18077279</id><snippet>Markup(u'&lt;p&gt; Reading, watching or &lt;span class="matching"&gt;listening&lt;/span&gt; to the media isn\'t &lt;span class="matching"&gt;matching&lt;/span&gt;&lt;span class="matching"&gt;much&lt;/span&gt; help either. &lt;/p&gt;')
</snippet></ROW><ROW><id>18077358</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval("['first', 'sec', 'third']")
['first', 'sec', 'third']
</snippet></ROW><ROW><id>18077358</id><snippet>&gt;&gt;&gt; ast.literal_eval('"hello".upper()')
...
ValueError: malformed string

&gt;&gt;&gt; ast.literal_eval('"hello"+" world"')
...
ValueError: malformed string
</snippet></ROW><ROW><id>18077470</id><snippet>m</snippet></ROW><ROW><id>18077470</id><snippet>r</snippet></ROW><ROW><id>18077470</id><snippet>choices[m]=p.nextInt()
</snippet></ROW><ROW><id>18077571</id><snippet># get all types as a list
all_types = Types.objects.values_list('title', flat=True)

# you need to show the mismatch, then use exclude()
report_type = ReportType.objects.exclude(title__in=all_types)
</snippet></ROW><ROW><id>18077998</id><snippet>Z[ix, iy]</snippet></ROW><ROW><id>18077998</id><snippet>range(10,20,1)</snippet></ROW><ROW><id>18077998</id><snippet>range(10,20)</snippet></ROW><ROW><id>18078366</id><snippet>global variable</snippet></ROW><ROW><id>18078366</id><snippet>def func2(double x):
    global a, b, c
    a = x + 2
    b = (x + 2) ** 2
    c = (x + 2) ** 3
    return a + b + c
</snippet></ROW><ROW><id>18078366</id><snippet>def func(double x, double y=0):
    cdef double a, b, c
    a = x + y
    b = (x + y) ** 2
    c = (x + y) ** 3
    return a + b + c
</snippet></ROW><ROW><id>18078366</id><snippet>func1</snippet></ROW><ROW><id>18078366</id><snippet>func2</snippet></ROW><ROW><id>18078366</id><snippet>y = 0</snippet></ROW><ROW><id>18078366</id><snippet>y = 1</snippet></ROW><ROW><id>18078393</id><snippet> kop=open('new.txt', 'w')
 results=PCA(kk)
 res=results.mu
 res=np.ndarray.tolist(res)
 print results.mu
 kop.write(str(res)+'\n')
 kop.close() 
</snippet></ROW><ROW><id>18078817</id><snippet>distances[choices[0]][choices[1]][choices[2]] 
</snippet></ROW><ROW><id>18078817</id><snippet>distances[choices[0]][choices[1]] + distances[choices[1][choices[2]]
</snippet></ROW><ROW><id>18078819</id><snippet>classmethod</snippet></ROW><ROW><id>18078819</id><snippet>classmethod</snippet></ROW><ROW><id>18078819</id><snippet>from functools import wraps

class hybridmethod(object):
    def __init__(self, func):
        self.func = func

    def __get__(self, obj, cls):
        context = obj if obj is not None else cls

        @wraps(self.func)
        def hybrid(*args, **kw):
            return self.func(context, *args, **kw)

        # optional, mimic methods some more
        hybrid.__func__ = hybrid.im_func = self.func
        hybrid.__self__ = hybrid.im_self = context

        return hybrid
</snippet></ROW><ROW><id>18078819</id><snippet>__get__</snippet></ROW><ROW><id>18078819</id><snippet>&gt;&gt;&gt; class Foo(object):
...     @hybridmethod
...     def bar(cls_or_self):
...         print 'Called with cls_or_self={!r}'.format(cls_or_self)
... 
&gt;&gt;&gt; Foo.bar()
Called with cls_or_self=&lt;class '__main__.Foo'&gt;
&gt;&gt;&gt; Foo().bar()
Called with cls_or_self=&lt;__main__.Foo object at 0x1043a4390&gt;
</snippet></ROW><ROW><id>18078860</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>18078860</id><snippet>import sys
print sys.getdefaultencoding()
</snippet></ROW><ROW><id>18078982</id><snippet>tb_frame</snippet></ROW><ROW><id>18078982</id><snippet>tb_next</snippet></ROW><ROW><id>18078982</id><snippet>f_globals</snippet></ROW><ROW><id>18078982</id><snippet>f_locals</snippet></ROW><ROW><id>18078982</id><snippet>inspect</snippet></ROW><ROW><id>18078982</id><snippet>traceback</snippet></ROW><ROW><id>18079137</id><snippet>&gt;&gt;&gt; this_defeats_that = {'scissors': ['paper', 'lizard'],
                         'paper': ['rock', 'spock'],
                         'lizard': ['spock', 'paper'],
                         'spock': ['scissors', 'rock'],
                         'rock': ['scissors', 'lizard']}
&gt;&gt;&gt; this_defeats_that['scissors']
['paper', 'lizard']
</snippet></ROW><ROW><id>18079151</id><snippet>np.where</snippet></ROW><ROW><id>18079151</id><snippet>True</snippet></ROW><ROW><id>18079151</id><snippet>np.ndarray</snippet></ROW><ROW><id>18079151</id><snippet>i,j = np.where( a==value )
</snippet></ROW><ROW><id>18079151</id><snippet>i, = np.where( a==value )
</snippet></ROW><ROW><id>18079151</id><snippet>&gt;=</snippet></ROW><ROW><id>18079151</id><snippet>&lt;=</snippet></ROW><ROW><id>18079151</id><snippet>!=</snippet></ROW><ROW><id>18079151</id><snippet>np.ndarray</snippet></ROW><ROW><id>18079151</id><snippet>index()</snippet></ROW><ROW><id>18079151</id><snippet>class myarray(np.ndarray):
    def __new__(cls, *args, **kwargs):
        return np.array(*args, **kwargs).view(myarray)
    def index(self, value):
        return np.where(self==value)
</snippet></ROW><ROW><id>18079151</id><snippet>a = myarray([1,2,3,4,4,4,5,6,4,4,4])
a.index(4)
#(array([ 3,  4,  5,  8,  9, 10]),)
</snippet></ROW><ROW><id>18079271</id><snippet>a</snippet></ROW><ROW><id>18079271</id><snippet>for</snippet></ROW><ROW><id>18079271</id><snippet>b</snippet></ROW><ROW><id>18079271</id><snippet>n-1</snippet></ROW><ROW><id>18079271</id><snippet>b = b - 1</snippet></ROW><ROW><id>18079271</id><snippet>a</snippet></ROW><ROW><id>18079271</id><snippet>b</snippet></ROW><ROW><id>18079271</id><snippet>a * b != n</snippet></ROW><ROW><id>18079271</id><snippet>str</snippet></ROW><ROW><id>18079271</id><snippet>range</snippet></ROW><ROW><id>18079271</id><snippet>for a in range(1, n+1):
    for b in range(1, n+1):
        if a * b == n:
            print str(a) + " times " + str(b) + " equals " + str(n)
</snippet></ROW><ROW><id>18079361</id><snippet>np.sum(weighted_prob, axis=0)</snippet></ROW><ROW><id>18079644</id><snippet>    'ERROR':        { 'fg': 'red', 'opts': ('bold',) },
    'NOTICE':       { 'fg': 'red' },
    'SQL_FIELD':    { 'fg': 'green', 'opts': ('bold',) },
    'SQL_COLTYPE':  { 'fg': 'green' },
    'SQL_KEYWORD':  { 'fg': 'yellow' },
    'SQL_TABLE':    { 'opts': ('bold',) },
    'HTTP_INFO':         { 'opts': ('bold',) },
    'HTTP_SUCCESS':      { },
    'HTTP_REDIRECT':     { 'fg': 'green' },
    'HTTP_NOT_MODIFIED': { 'fg': 'cyan' },
    'HTTP_BAD_REQUEST':  { 'fg': 'red', 'opts': ('bold',) },
    'HTTP_NOT_FOUND':    { 'fg': 'yellow' },
    'HTTP_SERVER_ERROR': { 'fg': 'magenta', 'opts': ('bold',) },
</snippet></ROW><ROW><id>18079695</id><snippet>pd.Series(list(set(s1).intersection(set(s2))))
</snippet></ROW><ROW><id>18079859</id><snippet>self.data = dict(baetur = 0,
                 ororkustyrkur = 1,
                 ororkustyrkur_62 = 2,
                 ororkulifeyrir = 3,
                 ellilifeyrir = 4)
</snippet></ROW><ROW><id>18079859</id><snippet>newdata = dict(baetur = 10,
               ororkustyrkur = 20,
               ororkustyrkur_62 = 30,
               ororkulifeyrir = 40,
               ellilifeyrir = 50)
</snippet></ROW><ROW><id>18079859</id><snippet>self.data</snippet></ROW><ROW><id>18079859</id><snippet>self.data.update(newdata)
</snippet></ROW><ROW><id>18079859</id><snippet>input</snippet></ROW><ROW><id>18079859</id><snippet>class Properties:
    '''Calculates the amount of insurance and/or remedies for a person
    when given a certain set of parameters.
    '''
    def input(self, **data):
        self.data = data
</snippet></ROW><ROW><id>18079859</id><snippet>prop.input(kt=0, adlur=1, ...)
</snippet></ROW><ROW><id>18079859</id><snippet>prop.input(**data)
</snippet></ROW><ROW><id>18079918</id><snippet>..</snippet></ROW><ROW><id>18079918</id><snippet>input_el = driver.find_element_by_name('A')
td_p_input = input_el.find_element_by_xpath('..')
</snippet></ROW><ROW><id>18079918</id><snippet>selected_option = driver.find_element_by_xpath('//option[@selected='selected']')
</snippet></ROW><ROW><id>18080123</id><snippet>user.email</snippet></ROW><ROW><id>18080123</id><snippet>class Article(models.Model):

    #auteur
    user = models.ForeignKey(User, unique=True)

    #titre
    title = models.CharField(max_length=200)
    title_en = models.CharField(max_length=200)
    subtitle = models.CharField(max_length=200)
    subtitle_en = models.CharField(max_length=200)
</snippet></ROW><ROW><id>18080123</id><snippet>Article.user.username</snippet></ROW><ROW><id>18080123</id><snippet>self.user.username</snippet></ROW><ROW><id>18080123</id><snippet>Article</snippet></ROW><ROW><id>18080123</id><snippet>Article.user.email</snippet></ROW><ROW><id>18080123</id><snippet>ForeignKey</snippet></ROW><ROW><id>18080123</id><snippet>user_id</snippet></ROW><ROW><id>18080123</id><snippet>auth_user</snippet></ROW><ROW><id>18080287</id><snippet>&gt;&gt;&gt; test_list = ['test1', 'test2', 'test3', 'test4', 'test5']
&gt;&gt;&gt; cls.objects.filter(next_task__test__in=test_list).query.__str__()

SELECT ...
FROM ...
WHERE "job"."next_task_id" IN (test1, test2, test3, test4, test5);
</snippet></ROW><ROW><id>18080287</id><snippet>&gt;&gt;&gt; test_list = ["'test1'", "'test2'", "'test3'", "'test4'", "'test5'"]
&gt;&gt;&gt; cls.objects.filter(next_task__test__in=test_list).query.__str__()

SELECT ...
FROM ...
WHERE "job"."next_task_id" IN ('test1', 'test2', 'test3', 'test4', 'test5');
</snippet></ROW><ROW><id>18080341</id><snippet>def ipython(self):
    try:
        from IPython.frontend.terminal.ipapp import TerminalIPythonApp
        app = TerminalIPythonApp.instance()
        app.initialize(argv=[])
        app.start()
    except ImportError:
        # IPython &lt; 0.11
        # Explicitly pass an empty list as arguments, because otherwise
        # IPython would use sys.argv from this script.
        try:
            from IPython.Shell import IPShell
            shell = IPShell(argv=[])
            shell.mainloop()
        except ImportError:
            # IPython not found at all, raise ImportError
            raise
</snippet></ROW><ROW><id>18080341</id><snippet>python manage.py shell --plain</snippet></ROW><ROW><id>18080392</id><snippet>last</snippet></ROW><ROW><id>18080392</id><snippet>first</snippet></ROW><ROW><id>18080392</id><snippet>emil ~ &gt; python 
Python 2.7.1 (r271:86832, Aug  5 2011, 03:30:24) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; l = [0.31622776601683794, 0.26591479484724945, 0.24028114141347545, 0.22360679774997896, 
...  0.21147425268811282, 0.20205155046766235, 0.19441308418139638, 0.1880301546543197, 
...  0.18257418583505536, 0.17782794100389226]
&gt;&gt;&gt; l
[0.31622776601683794, 0.26591479484724945, 0.24028114141347545, 0.22360679774997896, 0.21147425268811282, 0.20205155046766235, 0.19441308418139638, 0.1880301546543197, 0.18257418583505536, 0.17782794100389226]
&gt;&gt;&gt; len(l)
10
&gt;&gt;&gt; l1 = []
&gt;&gt;&gt; l1[:] = [x - l[9] for x in l]
&gt;&gt;&gt; l1
[0.13839982501294568, 0.08808685384335718, 0.06245320040958319, 0.0457788567460867, 0.03364631168422055, 0.024223609463770085, 0.01658514317750412, 0.010202213650427422, 0.004746244831163093, 0.0]
&gt;&gt;&gt; l2 = []
&gt;&gt;&gt; l2[:] = [x/l1[0] for x in l1]
&gt;&gt;&gt; l2 
[1.0, 0.6364665116817719, 0.4512520185899182, 0.33077250453029566, 0.2431094958470745, 0.175026301236322, 0.11983500106270202, 0.0737155097520761, 0.03429371988526097, 0.0]
</snippet></ROW><ROW><id>18080392</id><snippet>&gt;&gt;&gt; l3 = []
&gt;&gt;&gt; l3[:] = [x/sum(l2) for x in l2]
&gt;&gt;&gt; l3
[0.3263205883093977, 0.20769212653122596, 0.14725282418206537, 0.107937878274899, 0.07933163370841843, 0.05711468558905446, 0.03910462804683822, 0.024054888509824617, 0.01119074684827605, 0.0]
</snippet></ROW><ROW><id>18080579</id><snippet>dx, dy</snippet></ROW><ROW><id>18080579</id><snippet>ax.bar3d</snippet></ROW><ROW><id>18080579</id><snippet>0.5, 0.001</snippet></ROW><ROW><id>18080579</id><snippet>dy</snippet></ROW><ROW><id>18080579</id><snippet>ax.set_ylim(0, 0.002)</snippet></ROW><ROW><id>18080579</id><snippet>dy</snippet></ROW><ROW><id>18080579</id><snippet>bar3d</snippet></ROW><ROW><id>18080579</id><snippet>from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

row = [0, 0, 0, 22, 0, 0, 4, 16, 2, 0, 4, 4, 12, 26]
length = len(row)
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.bar3d(range(length), [0]*length, [0]*length, 0.5, 0.001, row)

ax.set_ylim(-0.005, 0.005)
plt.show()
</snippet></ROW><ROW><id>18080898</id><snippet>pickle</snippet></ROW><ROW><id>18080898</id><snippet># Create DB
dbpath = './test.db'
db = sqlite3.connect(dbpath)
cursor=db.cursor()
cursor.execute("""           
    CREATE TABLE IF NOT EXISTS trials (
    timestamp INTEGER PRIMARY KEY, emg BLOB) """)
cursor.execute ('DELETE FROM trials')
# Define vars
now = datetime.datetime.now()
timestamp = time.mktime(now.timetuple())
emg = list(range(200))
s = pickle.dumps(emg, pickle.HIGHEST_PROTOCOL)

# Store vars
cursor.execute("""
    INSERT INTO trials VALUES (?,?)""", (timestamp,s))
db.commit()

# Fetch vars
cursor.execute("""
    SELECT * FROM trials WHERE timestamp = ?""", (timestamp,))
out = cursor.fetchone()
s1 = out[1] 
emg1 = pickle.loads(s1)

# Test equality
print(emg1 == emg)
</snippet></ROW><ROW><id>18081037</id><snippet>vectors = np.vstack((vv1, v2, v3))
products = np.dot(A, v)
</snippet></ROW><ROW><id>18081037</id><snippet>products[:, i]</snippet></ROW><ROW><id>18081037</id><snippet>products.T[i]</snippet></ROW><ROW><id>18081037</id><snippet>A</snippet></ROW><ROW><id>18081037</id><snippet>i</snippet></ROW><ROW><id>18081081</id><snippet>def authenticated(handler):
    """
        Decorator for checking if there's a user associated with the current session.
        Will also fail if there's no session present.
    """
    def check_login(self, *args, **kwargs):
        if not self.is_logged_in():
           self.response.write('not logged in')
           return self.error(403) 
        else:
           return handler(self, *args, **kwargs)
    return check_login
</snippet></ROW><ROW><id>18081081</id><snippet>class MyHandler:
    @authenticated
    def get(self):
        pass
</snippet></ROW><ROW><id>18081450</id><snippet>import wx
import wx.lib.mixins.listctrl as listmix

########################################################################
class SortableListCtrl(wx.ListCtrl, listmix.ListCtrlAutoWidthMixin):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.ListCtrl.__init__(self, parent, size=(-1,100),
                             style=wx.LC_REPORT|wx.BORDER_SUNKEN)
        listmix.ListCtrlAutoWidthMixin.__init__(self)


########################################################################
class MyForm(wx.Frame):

    #----------------------------------------------------------------------
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "List Control Tutorial")

        # Add a panel so it looks the correct on all platforms
        panel = wx.Panel(self, wx.ID_ANY)
        self.index = 0

        data = {1: ["Dr appointment", "05/06/2014", ""],
                2: ["Meeting", "08/22/2013", "Board Room"]
                }

        self.list_ctrl = SortableListCtrl(panel)
        self.list_ctrl.InsertColumn(0, 'Subject')
        self.list_ctrl.InsertColumn(1, 'Due')
        self.list_ctrl.InsertColumn(2, 'Location', width=125)

        index = 0
        for d in data:
            print data[d][0]
            print data[d][1]
            self.list_ctrl.InsertStringItem(index, data[d][0]),
            self.list_ctrl.SetStringItem(index, 1, data[d][1])
            self.list_ctrl.SetStringItem(index, 2, data[d][2])
            index += 1

        btn = wx.Button(panel, label="Update")
        btn.Bind(wx.EVT_BUTTON, self.updateListCtrl)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.list_ctrl, 1, wx.ALL|wx.EXPAND, 5)
        sizer.Add(btn, 0, wx.CENTER|wx.ALL, 5)
        panel.SetSizer(sizer)

    #----------------------------------------------------------------------
    def updateListCtrl(self, event):
        """
        """
        self.list_ctrl.DeleteAllItems()
        data = {1: ["Tennis", "09/06/2013", ""],
                2: ["Lunch", "08/15/2013", "Chick-fil-a"]
                }

        index = 0
        for d in data:
            print data[d][0]
            print data[d][1]
            self.list_ctrl.InsertStringItem(index, data[d][0]),
            self.list_ctrl.SetStringItem(index, 1, data[d][1])
            self.list_ctrl.SetStringItem(index, 2, data[d][2])
            index += 1

#----------------------------------------------------------------------
# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyForm()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>18081637</id><snippet>import urllib2
with open('recipes.txt', 'w+') as f:
    for i in range(14477):
        url = "http://www.tastingtable.com/entry_detail/{}".format(i)
        try:
            page_content = urllib2.urlopen(url).read()
        except urllib2.HTTPError as error:
            if 400 &lt; error.code &lt; 500:
                continue  # not found, unauthorized, etc.
            raise   # other errors we want to know about
        if "Recipe adapted from" in page_content or "Recipe from" in page_content:
            print url
            f.write(url + '\n')
</snippet></ROW><ROW><id>18081843</id><snippet>./dataCollector.sh | python parser.py
</snippet></ROW><ROW><id>18082045</id><snippet>def wrapper(str):
    def decorator_factory(fn):
        def inner_function(*args):
            print 'Do something before'
            return fn(*args)
        return inner_function
    return decorator_factory

@my_decorator('test')
def foo(a, b):
    return a + b

# with decorator
print foo(1, 1)

# without decorator
print wrapper('str')(foo)(1, 1)
</snippet></ROW><ROW><id>18082084</id><snippet>DataFile_(?!en)\w{2}\.dat
</snippet></ROW><ROW><id>18082240</id><snippet>&gt;&gt;&gt; words = "ABCD abcd AB55 55CD A55D 5555"
&gt;&gt;&gt; ' '.join(s for s in words.split() if not any(c.isdigit() for c in s))
'ABCD abcd'
</snippet></ROW><ROW><id>18082240</id><snippet>\w*\d\w*</snippet></ROW><ROW><id>18082240</id><snippet>&gt;&gt;&gt; re.sub(r'\w*\d\w*', '', words).strip()
'ABCD abcd'
</snippet></ROW><ROW><id>18082426</id><snippet>$args</snippet></ROW><ROW><id>18082426</id><snippet>sys.argv</snippet></ROW><ROW><id>18082431</id><snippet>CombinedLog.csv</snippet></ROW><ROW><id>18082431</id><snippet>csv.writer()</snippet></ROW><ROW><id>18082431</id><snippet>','.join()</snippet></ROW><ROW><id>18082431</id><snippet>csv.reader()</snippet></ROW><ROW><id>18082431</id><snippet>csv.writer()</snippet></ROW><ROW><id>18082431</id><snippet>.writerows()</snippet></ROW><ROW><id>18082431</id><snippet>with</snippet></ROW><ROW><id>18082431</id><snippet>import csv
import glob

with open("CombinedLog.csv", "wb") as fo:
    fo_writer = csv.writer()

    csv_files = glob.glob('*.csv')
    for filename in csv_files:
    with open(file, "rb") as ifile:
        reader = csv.reader(ifile)
        fo_writer.writerows(reader)
</snippet></ROW><ROW><id>18082546</id><snippet>grid_rowconfigure</snippet></ROW><ROW><id>18082546</id><snippet>grid_columnconfigure</snippet></ROW><ROW><id>18082546</id><snippet>root = Tk()


#notebook
nb = notebook(root )


# Admin Tab
admin = Frame( nb() , name='admin') 
admin.grid( sticky=N+S+W+E)

# Every row and column have a wieght of one when resizing (linear transformation)
admin.grid_rowconfigure(0, weight=1)
admin.grid_rowconfigure(1, weight=1)
admin.grid_rowconfigure(2, weight=1)

admin.grid_columnconfigure(1, weight=1)
admin.grid_columnconfigure(2, weight=1)
admin.grid_columnconfigure(3, weight=1)

new_customer = Frame( admin , relief = RIDGE )

# Labels init
Label(admin, text="Name").grid(row=0, column = 0, sticky=N+S+W+E)
Label(admin, text="Type").grid(row=1, column = 0, sticky=N+S+W+E)
Label(admin, text="Date").grid(row=1, column = 2, sticky=N+S+W+E)

 # Elements Init
first_name  = Entry(admin)
middle_name = Entry(admin)
family_name     = Entry(admin)
date        = Entry(admin)

type_box = OptionMenu( admin , "one", "two", "three")


reset_button = Button( admin, text = "Reset Value" )
submit_button = Button( admin, text = "Submit"  )


# Place elements    
first_name.     grid(row=0  , column  =1, sticky=N+S+W+E)
middle_name.    grid(row=0  , column  =2, sticky=N+S+W+E)
family_name.    grid(row=0  , column  =3, sticky=N+S+W+E)
date.       grid(row =1 , column  =3,  sticky=N+S+W+E)
type_box.   grid(row =1  , column  =1, sticky=N+S+W+E)
reset_button.   grid(row =2 , column  = 1 ,sticky=N+S+W+E)
submit_button.  grid(row =2 , column  = 3 , sticky=N+S+W+E)



# Add Tabls
nb.add_screen( admin , "Admin" )
nb.add_screen( Frame(nb()) , "Others" )



if __name__ == "__main__":
        root.mainloop() 
</snippet></ROW><ROW><id>18082620</id><snippet>network(**config)</snippet></ROW><ROW><id>18082620</id><snippet>config</snippet></ROW><ROW><id>18082620</id><snippet>network</snippet></ROW><ROW><id>18082620</id><snippet>func</snippet></ROW><ROW><id>18082620</id><snippet>def func(foo, bar):
    print foo, bar

d = {'foo': 'value1', 'bar': 'value2'}

func(**d)
func(**{'bar': 'value2', 'foo': 'value1'})
func(bar='value2', foo='value1')
func('value1', 'value2')
</snippet></ROW><ROW><id>18082713</id><snippet>Struct</snippet></ROW><ROW><id>18082713</id><snippet>H</snippet></ROW><ROW><id>18082713</id><snippet>6H</snippet></ROW><ROW><id>18082713</id><snippet>6h</snippet></ROW><ROW><id>18082713</id><snippet>s = struct.Struct('= B B H H 6h 6h 6h 6H')
fields = s.unpack(packet_data)
seq, _type, flags, upTimestamp = fields[:4]
x = fields[4:10]
y = fields[10:16]
z = fields[16:22]
lowTimestamp = fields[22:]
</snippet></ROW><ROW><id>18082776</id><snippet>to_datetime</snippet></ROW><ROW><id>18082776</id><snippet>pd.to_datetime(df['date_col'])
</snippet></ROW><ROW><id>18082776</id><snippet>read_csv</snippet></ROW><ROW><id>18082776</id><snippet>In [11]: pd.to_datetime('2013-06-24 17:04:28')
Out[11]: Timestamp('2013-06-24 17:04:28', tz=None)
</snippet></ROW></DATA>