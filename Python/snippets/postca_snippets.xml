<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>12044582</id><snippet>sqlite3</snippet></ROW><ROW><id>12044582</id><snippet>pysqlite2</snippet></ROW><ROW><id>12044582</id><snippet>import sqlite3
</snippet></ROW><ROW><id>12044582</id><snippet>sqlite3</snippet></ROW><ROW><id>12044582</id><snippet>dbapi2</snippet></ROW><ROW><id>12044582</id><snippet>sqlite3</snippet></ROW><ROW><id>12044582</id><snippet>dbapi2</snippet></ROW><ROW><id>12044954</id><snippet>s = '\s hi world'
re.sub(r'\\s (.*)', r'&lt;h3&gt;\1&lt;/h3&gt;', s)
</snippet></ROW><ROW><id>12044954</id><snippet>'&lt;h3&gt;hi world&lt;/h3&gt;'
</snippet></ROW><ROW><id>12044987</id><snippet>class Foo(object)
    def __hash__(self)
         #return good (int) hash for a Foo

    def __eq__(self, other)
         #return true if self == other

    def __ne__(self, other)
         #return true if self != other
</snippet></ROW><ROW><id>12044987</id><snippet>d = {Foo(): "value1", Foo(): "value2"}
</snippet></ROW><ROW><id>12045009</id><snippet>with open(outputfile,'w') as out, open(inputfile) as f:
    for line in f:
        out.write(line)
        if tag_match(line):  #Somehow determine if this line is a match where we want to insert text.
           out.write('\n'.join(fruits)+'\n')
</snippet></ROW><ROW><id>12045012</id><snippet>__getitem__</snippet></ROW><ROW><id>12045415</id><snippet>QTextBrowser</snippet></ROW><ROW><id>12045415</id><snippet>tr</snippet></ROW><ROW><id>12045415</id><snippet>align</snippet></ROW><ROW><id>12045415</id><snippet>td</snippet></ROW><ROW><id>12045415</id><snippet>th</snippet></ROW><ROW><id>12045465</id><snippet>readlines()</snippet></ROW><ROW><id>12045465</id><snippet>\n</snippet></ROW><ROW><id>12045465</id><snippet>if(len(a) and a[0] == "Verified\n"):
  # verfiied, do your stuff here 
</snippet></ROW><ROW><id>12045697</id><snippet>foo = Foo()
</snippet></ROW><ROW><id>12045697</id><snippet>Foo</snippet></ROW><ROW><id>12045697</id><snippet>Foo()</snippet></ROW><ROW><id>12045697</id><snippet>foo = Foo()
</snippet></ROW><ROW><id>12045732</id><snippet>class ArRow (urwid.WidgetWrap):
    def __init__ (self):
        self.build_row()
        self._w = AColumns(self.item)
        self.__super.__init__(self._w)
    def build_row(self):
        w=5
        self.item = [
            ('fixed',w,urwid.AttrWrap(urwid.Text(str(randint(1,100))), 'body', 'focus')),
            ('fixed',w,urwid.AttrWrap(urwid.Text(str(randint(1,100))), 'body', 'focus')),
            ('fixed',w,urwid.AttrWrap(urwid.Text(str(randint(1,100))), 'body', 'focus')),
        ]
    def refresh(self):
        self.build_row()
        self._w = AColumns(self.item)
        #self.__super.__init__(w)
        logging.critical(str(self.item))
......

def refresh(_loop,_data):
    for item in items:
        item.refresh()
    #loop.draw_screen()
    _loop.set_alarm_in(2,refresh)

loop.set_alarm_in(2,refresh)
loop.run()
</snippet></ROW><ROW><id>12045897</id><snippet>is_active = Column(Boolean, unique=False, default=True)
</snippet></ROW><ROW><id>12045897</id><snippet>__init__</snippet></ROW><ROW><id>12045897</id><snippet>is_active = True</snippet></ROW><ROW><id>12045897</id><snippet>self.is_active = True</snippet></ROW><ROW><id>12046042</id><snippet>from collections import Counter # Requires Python &gt; 2.7

# Test abscissa values
x = [3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 9.0, 9.0, 9.0, 11.0]

# Count of the number of occurances of each unique `x` value
xcount = Counter(x)

# Generate a list of unique x values in the range [0..len(set(x))]

nonRepetitive_x = list(set(x)) #making a set eliminates duplicates
nonRepetitive_x.sort()         #sets aren't ordered, so a sort must be made
x_normalised = [_ for i, xx in enumerate(set(nonRepetitive_x)) for _ in xcount[xx]*[i]]    
</snippet></ROW><ROW><id>12046042</id><snippet>print x_normalised</snippet></ROW><ROW><id>12046042</id><snippet>[0, 1, 2, 2, 3, 4, 5, 5, 5, 6]
</snippet></ROW><ROW><id>12046042</id><snippet>y</snippet></ROW><ROW><id>12046042</id><snippet>x_normalised</snippet></ROW><ROW><id>12046042</id><snippet>from matplotlib.figure import Figure
fig=Figure()
ax=fig.add_subplot(111)

y = [6.0, 5.0, 4.0, 2.5, 3.0, 2.0, 1.0, 2.0, 2.5, 2.5]

ax.plot(x_normalised, y, 'bo')
</snippet></ROW><ROW><id>12046042</id><snippet>set_xticklabels</snippet></ROW><ROW><id>12046042</id><snippet>ax.set_xticklabels(nonRepetitive_x)
</snippet></ROW><ROW><id>12046042</id><snippet>x1,x2,y1,y2 = ax.axis()
x1 = min(x_normalised) - 1 
x2 = max(x_normalised) + 1
ax.axis((x1,x2,(y1-1),(y2+1))) 

#If the above is done, then before set_xticklabels, 
#one has to add a first and last value. eg:

nonRepetitive_x.insert(0,x[0]-1) #for the first tick on the left of the graph
nonRepetitive_x.append(x[-1]+1) #for the last tick on the right of the graph 
</snippet></ROW><ROW><id>12046084</id><snippet>urls.py</snippet></ROW><ROW><id>12046084</id><snippet>(r'^widget2/widget2_image_upload/(?P&lt;widget2_hash_id&gt;[a-fA-F0-9]+)/$', 'widget2.views.widget2_editable_image_ajax_uploader'),
</snippet></ROW><ROW><id>12046084</id><snippet>url</snippet></ROW><ROW><id>12046084</id><snippet>django</snippet></ROW><ROW><id>12046084</id><snippet>widget2.views.widget2_editable_image_ajax_uploader</snippet></ROW><ROW><id>12046084</id><snippet>view</snippet></ROW><ROW><id>12046084</id><snippet>request
*args: []
*kwargs: {'widget2_hash_id':'somehashid',}
</snippet></ROW><ROW><id>12046084</id><snippet>dispatch</snippet></ROW><ROW><id>12046084</id><snippet>django</snippet></ROW><ROW><id>12046084</id><snippet>widget2.views.widget2_editable_image_ajax_uploader</snippet></ROW><ROW><id>12046084</id><snippet>django</snippet></ROW><ROW><id>12046084</id><snippet>widget2_hash_id</snippet></ROW><ROW><id>12046084</id><snippet>__call__</snippet></ROW><ROW><id>12046084</id><snippet>_ajax_upload</snippet></ROW><ROW><id>12046084</id><snippet>backend.upload(upload, filename, is_raw)
</snippet></ROW><ROW><id>12046084</id><snippet>backend.upload(upload, filename, is_raw, widget2_hash_id)
</snippet></ROW><ROW><id>12046084</id><snippet>django</snippet></ROW><ROW><id>12046120</id><snippet>update(spec, document, upsert=False, multi=False, ...)
</snippet></ROW><ROW><id>12046120</id><snippet>spec</snippet></ROW><ROW><id>12046120</id><snippet>{ '_id' : ObjectId( 'anID' ) }</snippet></ROW><ROW><id>12046120</id><snippet>user = db.users.find_one( { '_id' : ObjectId( 'anID' ) } )
user['gender'] = newGender
db.users.update( { '_id' : user['_id'] }, user, False)
</snippet></ROW><ROW><id>12046120</id><snippet>db.users.update( { '_id' : ObjectId( 'anID' ) }, \
                 { '$set': { 'gender' : newGender } }, False )
</snippet></ROW><ROW><id>12046121</id><snippet>shell=True</snippet></ROW><ROW><id>12046121</id><snippet>subprocess.call</snippet></ROW><ROW><id>12046121</id><snippet>shell=True</snippet></ROW><ROW><id>12046121</id><snippet>shell=True</snippet></ROW><ROW><id>12046295</id><snippet>    dataout.close()
</snippet></ROW><ROW><id>12046314</id><snippet>run -i script.py
</snippet></ROW><ROW><id>12046314</id><snippet>AA = np.array([[1,2],[3, myVar]])
print AA
</snippet></ROW><ROW><id>12046314</id><snippet>In [1]: myVar = 7
In [2]: run -i script.py
[[1 2]
 [3 7]]
In [3]: myVar = 17
In [4]: run -i script.py
[[ 1  2]
 [ 3 17]]
In [5]: 
</snippet></ROW><ROW><id>12046420</id><snippet>&lt;?php
$passw='secretPassword12';
$ntext='helloWorld123456';
$enc = base64_encode(mcrypt_encrypt(MCRYPT_BLOWFISH, $passw, $ntext, MCRYPT_MODE_ECB));
echo '&lt;div&gt;'.$enc.'&lt;/div';
</snippet></ROW><ROW><id>12046420</id><snippet>from Crypto.Cipher import Blowfish
from base64 import b64encode, b64decode
passw='secretPassword12'
ntext='helloworld123456'

cipher=Blowfish.new(passw, Blowfish.MODE_ECB)
encStr=b64encode(cipher.encrypt(data))
print encStr
</snippet></ROW><ROW><id>12046420</id><snippet>Remember to pad your data such that the len is divisible by 16. 
</snippet></ROW><ROW><id>12046635</id><snippet>for price in item['sellingStatus'][0]['currentPrice']:
    print price
</snippet></ROW><ROW><id>12046635</id><snippet>for price in item['sellingStatus'][0]['currentPrice']:
    print price['__value__']
</snippet></ROW><ROW><id>12046903</id><snippet>NameError: global name 'webbroswer' is not defined</snippet></ROW><ROW><id>12046903</id><snippet>webbrowser</snippet></ROW><ROW><id>12046903</id><snippet>IOError: [Errno 2] No such file or directory: 'file.txt'</snippet></ROW><ROW><id>12046903</id><snippet>    action = open(file, 'r')
</snippet></ROW><ROW><id>12046962</id><snippet>number_of_texts</snippet></ROW><ROW><id>12046962</id><snippet>Collection</snippet></ROW><ROW><id>12046962</id><snippet>c</snippet></ROW><ROW><id>12046962</id><snippet>for c in collections:
  number_of_texts = len(c.text_keys)
</snippet></ROW><ROW><id>12046962</id><snippet>length</snippet></ROW><ROW><id>12046962</id><snippet>{% for c in collections %}
    &lt;p&gt;{{c.name}}, number of texts: {{c.text_keys|length}}&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>12046984</id><snippet>@decorate
def foo(a):
  print a
</snippet></ROW><ROW><id>12046984</id><snippet>def bar(a):
  print a

foo = decorate(bar)
</snippet></ROW><ROW><id>12047091</id><snippet>update</snippet></ROW><ROW><id>12047256</id><snippet>raw_input</snippet></ROW><ROW><id>12047256</id><snippet>while True:
     result = raw_input("Enter results file: ")

     try:
         result = get_marks_from_file(result)
         break
     except IOError:
         print 'Please supply correct file. '
</snippet></ROW><ROW><id>12047320</id><snippet>as_view</snippet></ROW><ROW><id>12047320</id><snippet>filter_field</snippet></ROW><ROW><id>12047320</id><snippet>self.filter_field</snippet></ROW><ROW><id>12047320</id><snippet>get</snippet></ROW><ROW><id>12047320</id><snippet>class MonthCalends(ListView):
    template_name='month_list.html'
    ## Sets default fieldname value
    filter_field = "defaultfieldname"

    def get(self, request, *args, **kwargs):
        try:
            # if the filter field was sent as an argument
            filter_field = self.filter_field
        except:
            # else revert to default
            filter_field = MonthCalends.filter_field
        # ...rest of code
</snippet></ROW><ROW><id>12047327</id><snippet>dotcloud push</snippet></ROW><ROW><id>12047593</id><snippet>/^([[:alnum:]]+):/
</snippet></ROW><ROW><id>12047710</id><snippet>import sys

with open("log.txt", "w") as logfile:
    sys.stdout, sys.stderr = logfile, logfile

    # do your stuff here, e.g. import the module that you want to log
</snippet></ROW><ROW><id>12047710</id><snippet>python myscript.py &gt; log.txt 2&gt;&amp;1
</snippet></ROW><ROW><id>12047804</id><snippet>import sys, shutil, time, threading

class CopyThread(threading.Thread):
    def __init__(self, source, destination):
        super(CopyThread, self).__init__()

        self.source = source
        self.destination = destination

    def run(self):
        time.sleep(5)  # Delete me later on, I'm just here to slow things down
        return shutil.copytree(src=self.source, dst=self.destination)

if __name__ == '__main__':
    thread = CopyThread('source_folder', 'destination_folder')
    thread.start()

    while thread.is_alive():
        sys.stdout.write('.')
        sys.stdout.flush()

        time.sleep(1)

    thread.join()
</snippet></ROW><ROW><id>12047804</id><snippet>threading.Thread</snippet></ROW><ROW><id>12047804</id><snippet>run()</snippet></ROW><ROW><id>12047804</id><snippet>.start()</snippet></ROW><ROW><id>12047930</id><snippet>l = [(0, pi) for i in range(12)]
</snippet></ROW><ROW><id>12047930</id><snippet>tuple</snippet></ROW><ROW><id>12047930</id><snippet>list</snippet></ROW><ROW><id>12047930</id><snippet>&gt;&gt;&gt; pi = 3
&gt;&gt;&gt; l = [[0, pi]] * 4
&gt;&gt;&gt; l
[[0, 3], [0, 3], [0, 3], [0, 3]]
&gt;&gt;&gt; l[0][1] = 4
&gt;&gt;&gt; l
[[0, 4], [0, 4], [0, 4], [0, 4]]  # Wat
</snippet></ROW><ROW><id>12048016</id><snippet>.sqlite</snippet></ROW><ROW><id>12048087</id><snippet>__getattr__</snippet></ROW><ROW><id>12048087</id><snippet>__getattribute__</snippet></ROW><ROW><id>12048087</id><snippet>__get__</snippet></ROW><ROW><id>12048087</id><snippet>__getattribute__</snippet></ROW><ROW><id>12048087</id><snippet>foo.x</snippet></ROW><ROW><id>12048087</id><snippet>foo.__getattr__(x)
</snippet></ROW><ROW><id>12048087</id><snippet>__getattribute__</snippet></ROW><ROW><id>12048087</id><snippet>foo.__dict__</snippet></ROW><ROW><id>12048087</id><snippet>foo.__getattribute__('__getattr__')(x)
</snippet></ROW><ROW><id>12048087</id><snippet>self.__dict__</snippet></ROW><ROW><id>12048087</id><snippet>__getattr__</snippet></ROW><ROW><id>12048087</id><snippet>__getattr__</snippet></ROW><ROW><id>12048087</id><snippet>__getattribute__</snippet></ROW><ROW><id>12048087</id><snippet>if name in self.__dict__</snippet></ROW><ROW><id>12048244</id><snippet>short_description</snippet></ROW><ROW><id>12048244</id><snippet># note, this must be done in the class definition;
# not User.get_full_name.short_description
get_full_name.short_description = 'my label' 
</snippet></ROW><ROW><id>12048244</id><snippet>list_display</snippet></ROW><ROW><id>12048244</id><snippet>ModelAdmin</snippet></ROW><ROW><id>12048244</id><snippet>readonly_fields</snippet></ROW><ROW><id>12048244</id><snippet>_</snippet></ROW><ROW><id>12048244</id><snippet>class MyAdmin(...):
    list_display = ('_my_field',)
    readonly_fields = ('_my_field', )     

    def _my_field(self, obj):
        return obj.get_full_name()
    _my_field.short_description = 'my custom label'
</snippet></ROW><ROW><id>12048460</id><snippet>setA = set(listA)
setB = set(listB)
setA.intersection(setB)
</snippet></ROW><ROW><id>12048460</id><snippet>listA = [1,1,2,2,3]</snippet></ROW><ROW><id>12048460</id><snippet>listB = [1,1,2,3]</snippet></ROW><ROW><id>12048460</id><snippet>set([1,2,3])</snippet></ROW><ROW><id>12048460</id><snippet>O(n * m)</snippet></ROW><ROW><id>12048460</id><snippet>O(n) + O(m) + O(min(m,n)) == O(max(m,n))</snippet></ROW><ROW><id>12048692</id><snippet># Get a set of unique first elements for each list
set1 = set([n[0] for n in mark1])
set2 = set([n[0] for n in mark2])

# Items in mark1 but not mark2
if set1.difference(set2):
  print 'some marks are not the same - no match found'

# Items in mark2 but not mark1
if set2.difference(set1):
  print 'some marks are not the same - no match found'
</snippet></ROW><ROW><id>12048692</id><snippet># Get a set of unique first elements for each list
set1 = set([n[0] for n in mark1])
set2 = set([n[0] for n in mark2])

# Items in mark1 but not mark2
set1_diffs = set1.difference(set2)
if set1_diffs:
  print 'Marks {0} in mark1 but not mark2'.format(list(set1_diffs))

# Items in mark2 but not mark1
set2_diffs = set2.difference(set1)
if set2_diffs:
  print 'Marks {0} in mark2 but not mark1'.format(list(set2_diffs))
</snippet></ROW><ROW><id>12049587</id><snippet>def a_fn():
    //do something
def b_fn():
    //do something
def c_fn():
    b_fn()
    a_fn()
</snippet></ROW><ROW><id>12049587</id><snippet>def c_fn():
    def a_fn():
        //do something
    def b_fn():
        //do something
    b_fn()
    a_fn()
</snippet></ROW><ROW><id>12050381</id><snippet>pr = subprocess.Popen(['js2coffee'], 
                      stdin=subprocess.PIPE,  
                      stdout=subprocess.PIPE)
result, stderrdata = pr.communicate('var myNumber = 100;')
</snippet></ROW><ROW><id>12050530</id><snippet>class Out(object):
    def write(self, s):
        sys.__stdout__.write(s)
        open('/tmp/log', 'a').write(s)

sys.stdout = Out()

...

print something # prints to stdout and logs
</snippet></ROW><ROW><id>12050530</id><snippet>print</snippet></ROW><ROW><id>12051080</id><snippet>dot()</snippet></ROW><ROW><id>12051080</id><snippet>linalg.norm(v)</snippet></ROW><ROW><id>12051080</id><snippet>In [1]: import math

In [2]: import numpy as np

In [3]: a = np.array([4,2,7])

In [4]: np.linalg.norm(a)
Out[4]: 8.3066238629180749

In [5]: math.sqrt(sum([n**2 for n in a]))
Out[5]: 8.306623862918075

In [6]: b = a/np.linalg.norm(a)

In [7]: np.linalg.norm(b)
Out[7]: 1.0
</snippet></ROW><ROW><id>12051080</id><snippet>In [5]</snippet></ROW><ROW><id>12051080</id><snippet>In [6]</snippet></ROW><ROW><id>12051323</id><snippet>y = [0., 0.5, 1., 1.5, 2., 2.5]
</snippet></ROW><ROW><id>12051323</id><snippet>import math
print range(math.floor(min(y)), math.ceil(max(y))+1)
</snippet></ROW><ROW><id>12051323</id><snippet>[0, 1, 2, 3]
</snippet></ROW><ROW><id>12051323</id><snippet>yint = range(min(y), math.ceil(max(y))+1)

matplotlib.pyplot.yticks(yint)
</snippet></ROW><ROW><id>12051354</id><snippet>for item in List:

    if ":" in item["List_contents"]:
        print "*--* ", item["List_contents"]
    if " " in item["List_contents"]:
        print "*--* ", item["List_contents"]  
</snippet></ROW><ROW><id>12051354</id><snippet>List</snippet></ROW><ROW><id>12051354</id><snippet>{'List_selection': 'List3', 'List_contents': 1}</snippet></ROW><ROW><id>12051354</id><snippet>str()</snippet></ROW><ROW><id>12051354</id><snippet>if ":" in str(item["List_contents"]):
</snippet></ROW><ROW><id>12051453</id><snippet>netAnalyzer</snippet></ROW><ROW><id>12051453</id><snippet>netAnalyzer.myfunction(...)</snippet></ROW><ROW><id>12051453</id><snippet>myfunction(...)</snippet></ROW><ROW><id>12051872</id><snippet>from myclass import MyClass
from foo.bar.yourclass import YourClass
</snippet></ROW><ROW><id>12051872</id><snippet>import myclass
import foo.bar.yourclass
</snippet></ROW><ROW><id>12051962</id><snippet>threading.py</snippet></ROW><ROW><id>12051962</id><snippet>__pycache__</snippet></ROW><ROW><id>12052296</id><snippet>public class TestPy {

    private Thread thread;

    public void die() {
        synchronized (thread) {
            thread.interrupt();
        }    
    }

    public TestPy() {
        thread = new Thread(){
            public void run() {
                try {
                    while (!Thread.interrupted()) {
                        Thread.sleep(500);
                    }
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        };
        thread.start();    
    }

    public static void main(String[] args) {
        TestPy tp = new TestPy();
        GatewayServer server = new GatewayServer(tp);
        server.start();
    }
}
</snippet></ROW><ROW><id>12052296</id><snippet>gateway = JavaGateway()
do your stuff here using the lib
tp = gateway.entry_point
tp.die()
</snippet></ROW><ROW><id>12052410</id><snippet>//hpp
#include &lt;boost/python.hpp&gt;
using namespace boost::python;

struct World
{
    void set(std::string msg);
    std::string greet();
    std::string msg;
};

BOOST_PYTHON_MODULE(hello)
{
    class_&lt;World&gt;("World")
        .def("greet", &amp;World::greet)
        .def("set", &amp;World::set)
    ;
}

//cpp

void World::set(std::string msg) { this-&gt;msg = msg; }
std::string greet() { return this-&gt;msg; }
</snippet></ROW><ROW><id>12052437</id><snippet>db.login_info.update({}, {$pull:{location:{city:"Canada"}}})
</snippet></ROW><ROW><id>12052437</id><snippet>db.login_info.update( { "location.city" : { $exists : true } }, { $unset : { "location.city" : "Canada" } }, false, true);
</snippet></ROW><ROW><id>12052544</id><snippet>(numpy.array([2])  &gt; 1).any()
</snippet></ROW><ROW><id>12053124</id><snippet>def run(self):
    while True:
</snippet></ROW><ROW><id>12053124</id><snippet>def run(self):
    print("Hello "+self.surname)
    time.sleep(1)
    self.counter += 1
    print("Bye "+self.surname)
</snippet></ROW><ROW><id>12053186</id><snippet>turtle</snippet></ROW><ROW><id>12053186</id><snippet>circle()</snippet></ROW><ROW><id>12053186</id><snippet>def venn_circle(circle_color, circle_radius):
    """ Draws a colored circle, returns the points within. """
    turtle.color(circle_color)
    # &lt;fill in: code to move, orient the turtle&gt;
    center = turtle.position()
    # &lt;fill in: code to draw the circle&gt;
    return circle_coords(center, circle_radius)


def circle_coords(center, radius):
    """ Return the set of pixels within the circle. """
    raise NotImplementedError()
</snippet></ROW><ROW><id>12053186</id><snippet>from package import *</snippet></ROW><ROW><id>12053186</id><snippet>import turtle</snippet></ROW><ROW><id>12053219</id><snippet>try:
    string.decode('utf-8')
    print "string is UTF-8, length %d bytes" % len(string)
except UnicodeError:
    print "string is not UTF-8"
</snippet></ROW><ROW><id>12053219</id><snippet>str</snippet></ROW><ROW><id>12053219</id><snippet>unicode</snippet></ROW><ROW><id>12053219</id><snippet>str.decode</snippet></ROW><ROW><id>12053219</id><snippet>unicode</snippet></ROW><ROW><id>12053219</id><snippet>unicode.encode</snippet></ROW><ROW><id>12053219</id><snippet>str</snippet></ROW><ROW><id>12053219</id><snippet>u"é"</snippet></ROW><ROW><id>12053219</id><snippet>u"\xe9"</snippet></ROW><ROW><id>12053219</id><snippet>"\xc3\xa9"</snippet></ROW><ROW><id>12053219</id><snippet>bytes</snippet></ROW><ROW><id>12053219</id><snippet>str</snippet></ROW><ROW><id>12053284</id><snippet>tdict</snippet></ROW><ROW><id>12053284</id><snippet>newdict</snippet></ROW><ROW><id>12053284</id><snippet>newdict['name'+str(i)]=tdict
</snippet></ROW><ROW><id>12053284</id><snippet>'a'</snippet></ROW><ROW><id>12053284</id><snippet>tdict</snippet></ROW><ROW><id>12053284</id><snippet># newdict['name'+str(i)] is a reference to tdict
newdict['name'+str(i)]['a']='value'+str(i)
# this is equivalent to doing
tdict['a']='value'+str(i)
</snippet></ROW><ROW><id>12053284</id><snippet>tdict</snippet></ROW><ROW><id>12053284</id><snippet>newdict['name'+str(i)]=dict(tdict)
</snippet></ROW><ROW><id>12053284</id><snippet>&gt;&gt;&gt; a={'a': 1, 'b': 2, 'c': [1,2,3]}
&gt;&gt;&gt; b=dict(a)
&gt;&gt;&gt; b['a']=9
&gt;&gt;&gt; a
{'a': 1, 'c': [1, 2, 3], 'b': 2}
&gt;&gt;&gt; b
{'a': 9, 'c': [1, 2, 3], 'b': 2}
&gt;&gt;&gt; b['c'].append(99)
&gt;&gt;&gt; a
{'a': 1, 'c': [1, 2, 3, 99], 'b': 2}
&gt;&gt;&gt; b
{'a': 9, 'c': [1, 2, 3, 99], 'b': 2}
</snippet></ROW><ROW><id>12053284</id><snippet>&gt;&gt;&gt; import copy
&gt;&gt;&gt; a={'a': 1, 'b': 2, 'c': [1,2,3]}
&gt;&gt;&gt; b=copy.deepcopy(a)
&gt;&gt;&gt; b['a']=9
&gt;&gt;&gt; b['c'].append(99)
&gt;&gt;&gt; a
{'a': 1, 'c': [1, 2, 3], 'b': 2}
&gt;&gt;&gt; b
{'a': 9, 'c': [1, 2, 3, 99], 'b': 2}
</snippet></ROW><ROW><id>12053363</id><snippet>concatenatedString = ' - '.join(myWordList)
# ie: delimeter.join(list)
</snippet></ROW><ROW><id>12053429</id><snippet>driver = Driver()
driver.implicitly_wait(10) # The time that webdriver will wait for actions to happen before failing
</snippet></ROW><ROW><id>12053497</id><snippet>zip</snippet></ROW><ROW><id>12053497</id><snippet>[(l1[0][0], l2[0][1]) for l1, l2 in zip(list1, list2)]
</snippet></ROW><ROW><id>12053600</id><snippet>var result = "{{myposts|join:'/'}}".split('/');
</snippet></ROW><ROW><id>12053711</id><snippet>from datetime import date, timedelta
def prev_weekday(adate):
    adate -= timedelta(days=1)
    while adate.weekday() &gt; 4: # Mon-Fri are 0-4
        adate -= timedelta(days=1)
    return adate
</snippet></ROW><ROW><id>12053711</id><snippet>&gt;&gt;&gt; prev_weekday(date.today())
datetime.date(2012, 8, 20)
&gt;&gt;&gt; prev_weekday(date(2012, 8, 20))
datetime.date(2012, 8, 17)
</snippet></ROW><ROW><id>12053711</id><snippet>_offsets = (3, 1, 1, 1, 1, 1, 2)
def prev_weekday(adate):
    return adate - timedelta(days=_offsets[adate.weekday()])
</snippet></ROW><ROW><id>12053972</id><snippet>r.decode('cp1252')</snippet></ROW><ROW><id>12053972</id><snippet>r</snippet></ROW><ROW><id>12053972</id><snippet>unicode</snippet></ROW><ROW><id>12053972</id><snippet>str</snippet></ROW><ROW><id>12053972</id><snippet>ansi</snippet></ROW><ROW><id>12053972</id><snippet>print xyz.encode('utf-8')
</snippet></ROW><ROW><id>12053972</id><snippet>str</snippet></ROW><ROW><id>12053972</id><snippet>unicode</snippet></ROW><ROW><id>12053972</id><snippet>str</snippet></ROW><ROW><id>12053972</id><snippet>bytes</snippet></ROW><ROW><id>12053972</id><snippet>unicode</snippet></ROW><ROW><id>12053972</id><snippet>str</snippet></ROW><ROW><id>12053972</id><snippet>.decode()</snippet></ROW><ROW><id>12053972</id><snippet>str</snippet></ROW><ROW><id>12053972</id><snippet>.decode()</snippet></ROW><ROW><id>12053972</id><snippet>unicode</snippet></ROW><ROW><id>12053993</id><snippet>for row in rows:
    id = ''.join([getattr(row, col) for col in columns])
</snippet></ROW><ROW><id>12054019</id><snippet>after - before</snippet></ROW><ROW><id>12054019</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>12054019</id><snippet>total_seconds</snippet></ROW><ROW><id>12054019</id><snippet>total_seconds</snippet></ROW><ROW><id>12054019</id><snippet>&gt;&gt;&gt; d = t1 - t0
&gt;&gt;&gt; d.total_seconds()
2.429001
</snippet></ROW><ROW><id>12054066</id><snippet>class Test(object):
    def __init__(self):
        self.hi()

    def hi(self):
        print "Hi!"
</snippet></ROW><ROW><id>12054066</id><snippet>__init__</snippet></ROW><ROW><id>12054352</id><snippet>x</snippet></ROW><ROW><id>12054352</id><snippet>s=...</snippet></ROW><ROW><id>12054396</id><snippet>categories.items()</snippet></ROW><ROW><id>12054396</id><snippet>categories.iteritems()</snippet></ROW><ROW><id>12054396</id><snippet>for key, val in categories.items() :
    for k, v in items.items() :
        if key == v :
            print(val, k)
</snippet></ROW><ROW><id>12054396</id><snippet>&gt;&gt;&gt; dict3 = { catname : [ item for item, itemcat in items.items() if itemcat == cat  ] for cat, catname in categories.items()  }
&gt;&gt;&gt; dict3
{'Antics': ['Picture', 'Clock'],
'Bookz': ['Thinking in C++', 'Thinking in Java'],
'Clothes': ['Asus', 'HP'],
'Computers': [],
'Gamez': ['Diablo 3', 'Diablo 2', 'Cabal', 'WoW'],
'Jewelry': ['Golden ring'],
'Moviez': ['The pianist', 'Batman', 'Spider-Man'],
'Music': [],
'Photography': [],
'Tickets': ['Ticket for Mettalica concert',
'Ticket for Placebo concert',
'Ticket for Iron Maiden concert']}
</snippet></ROW><ROW><id>12054396</id><snippet>cat</snippet></ROW><ROW><id>12055059</id><snippet>Referrer</snippet></ROW><ROW><id>12055059</id><snippet>Referrer</snippet></ROW><ROW><id>12055059</id><snippet>Request</snippet></ROW><ROW><id>12055059</id><snippet>Response</snippet></ROW><ROW><id>12055059</id><snippet>request</snippet></ROW><ROW><id>12055059</id><snippet>response.request.headers.get('Referrer', None)
</snippet></ROW><ROW><id>12055059</id><snippet>Referrer</snippet></ROW><ROW><id>12055612</id><snippet>open</snippet></ROW><ROW><id>12055612</id><snippet>from socket import gethostbyaddr 

with open('top-1m.csv') as input:
    for line in input:
        index, host = line.strip().split(',')
        try: 
            output = gethostbyaddr(host)
            print "%s %s is %s/%s" % (index, host, output[0], output[2])
        except: 
            print host, "not found"
</snippet></ROW><ROW><id>12055612</id><snippet>csv</snippet></ROW><ROW><id>12055612</id><snippet>twisted</snippet></ROW><ROW><id>12055612</id><snippet>socket</snippet></ROW><ROW><id>12055669</id><snippet>import itertools, string

map(''.join, itertools.product(string.ascii_lowercase, repeat=3))
map(''.join, itertools.product(string.ascii_letters, repeat=3))
map(''.join, itertools.product(string.ascii_letters + string.digits, repeat=3))
</snippet></ROW><ROW><id>12056415</id><snippet>bb_attachments</snippet></ROW><ROW><id>12056415</id><snippet>bb_attachments = GridFS(db, collection="bb_attachments")
</snippet></ROW><ROW><id>12056415</id><snippet>bb_attachments.exists({"filename" : "C1208BSP130.pdf"})
</snippet></ROW><ROW><id>12056553</id><snippet>class Supplier(object):
    def __init__(self):
        self.projects = []  #winning projects
        self.bids = []      #how much this supplier bid, winning bid.
</snippet></ROW><ROW><id>12056553</id><snippet>from collections import defaultdict
def parse_datafile(fname,output=None):
    if output is None:
       output = defaultdict(Supplier)
    with open(fname,r) as f:
       project = f.readline().split(':')[1].strip()
       suppliers = map(str.strip,f.readline().split(',')[:-2])
       bids = map(str.strip,f.readline().split(','))
       winner = bids[-1]
       win_amt = bids[-2]

       for s,b in zip(suppliers,bids):
           output[s].bids.append(int(b),int(win_amt))
       output[winner].projects.append(project)
    return output
</snippet></ROW><ROW><id>12056553</id><snippet> import glob
 from Collections import defaultdict
 d = defaultdict(Supplier)
 for fname in glob.iglob('*.txt'):
     d = parse_datafile(fname,output=d)
</snippet></ROW><ROW><id>12056553</id><snippet>print d['supplier A'].projects
print [ float(bid)/winbid for bid,winbid in d['supplier A'].bids ]
</snippet></ROW><ROW><id>12056553</id><snippet>.xls</snippet></ROW><ROW><id>12056974</id><snippet>^</snippet></ROW><ROW><id>12056974</id><snippet>app.Microsoft_Excel.TypeKeys('^a')
</snippet></ROW><ROW><id>12056978</id><snippet>setup.py</snippet></ROW><ROW><id>12056978</id><snippet>setup.py</snippet></ROW><ROW><id>12056978</id><snippet>packages=['django_bleach']</snippet></ROW><ROW><id>12056978</id><snippet>'django_bleach.templatetags'</snippet></ROW><ROW><id>12056978</id><snippet>    ...
    packages=[
        'django_bleach',
        'django_bleach.templatetags'
    ],
    ...
</snippet></ROW><ROW><id>12056978</id><snippet>setup.py</snippet></ROW><ROW><id>12056978</id><snippet>requirement.txt</snippet></ROW><ROW><id>12056978</id><snippet>    (other packages)
    ...
    django-bleach
    ...
</snippet></ROW><ROW><id>12056978</id><snippet>    ...
    git+https://sebastien_worms@bitbucket.org/sebastien_worms/django-bleach.git
    ...
</snippet></ROW><ROW><id>12056978</id><snippet>pip install -r requirement.txt</snippet></ROW><ROW><id>12057001</id><snippet>cursor.execute("SELECT * FROM info WHERE job=?", search_string)
</snippet></ROW><ROW><id>12057001</id><snippet>field</snippet></ROW><ROW><id>12057001</id><snippet>cursor.execute("SELECT * FROM info WHERE %s=?" % field, (search_string,))
</snippet></ROW><ROW><id>12057001</id><snippet>field</snippet></ROW><ROW><id>12057001</id><snippet>def search2(query, field):
    if field not in set(['bp', 'key', 'exp', 'job']):
        raise ValueError('No such column ' + field)    
    cursor.execute("SELECT * FROM info WHERE %s=?" % field, (query,))
</snippet></ROW><ROW><id>12057319</id><snippet>n</snippet></ROW><ROW><id>12057319</id><snippet>while n &gt; 2: .. n -= 1</snippet></ROW><ROW><id>12057319</id><snippet>n &gt; 5</snippet></ROW><ROW><id>12057319</id><snippet>n</snippet></ROW><ROW><id>12057319</id><snippet>for i in range(n, 2, -1):
    first, second = second, first + second
</snippet></ROW><ROW><id>12057319</id><snippet>i</snippet></ROW><ROW><id>12057319</id><snippet>n</snippet></ROW><ROW><id>12057517</id><snippet>import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

class Annotate(object):
    def __init__(self):
        self.ax = plt.gca()
        self.rect = Rectangle((0,0), 1, 1)
        self.x0 = None
        self.y0 = None
        self.x1 = None
        self.y1 = None
        self.ax.add_patch(self.rect)
        self.ax.figure.canvas.mpl_connect('button_press_event', self.on_press)
        self.ax.figure.canvas.mpl_connect('button_release_event', self.on_release)

    def on_press(self, event):
        print 'press'
        self.x0 = event.xdata
        self.y0 = event.ydata

    def on_release(self, event):
        print 'release'
        self.x1 = event.xdata
        self.y1 = event.ydata
        self.rect.set_width(self.x1 - self.x0)
        self.rect.set_height(self.y1 - self.y0)
        self.rect.set_xy((self.x0, self.y0))
        self.ax.figure.canvas.draw()

a = Annotate()
plt.show()
</snippet></ROW><ROW><id>12057934</id><snippet>import posixpath
posixpath.isabs('/home/eduard/tmp/chrome-data-dir/file.ext')
</snippet></ROW><ROW><id>12057934</id><snippet>posixpath</snippet></ROW><ROW><id>12057934</id><snippet>os.path</snippet></ROW><ROW><id>12057934</id><snippet>isabs</snippet></ROW><ROW><id>12058425</id><snippet>def proclevel(levels):
    if levels &gt; 0:
        generator = proclevel(levels - 1)
        temp = None
        for firsthash, secondhash in generator:
            if not temp: temp = hashofthem(firsthash, secondhash)
            else: yield temp, hashofthem(firsthash, secondhash); temp = None
        #If odd number of packets
        if temp: yield temp, None
    else:
        temp = None
        for chunk in chunks:
            if not temp: temp = hash(chunk)
            else: yield temp, hash(chunk); temp = None
        if temp: yield temp, None
</snippet></ROW><ROW><id>12058462</id><snippet>import json
#...
json.dumps(msg_set) # &lt;- return this one instead
</snippet></ROW><ROW><id>12058462</id><snippet>NSString *myPythonJson = @""; // &lt;- Whatever you got from python
NSError *error = nil;
id myObjectsFromJson = [NSJSONSerialization JSONObjectWithData:[myPythonJson dataUsingEncoding:NSUTF8StringEncoding] options:NSJSONReadingAllowFragments error:&amp;error];
</snippet></ROW><ROW><id>12058495</id><snippet>from A import settings as A_settings
</snippet></ROW><ROW><id>12058569</id><snippet>%5N</snippet></ROW><ROW><id>12058569</id><snippet>strftime</snippet></ROW><ROW><id>12058569</id><snippet>%f</snippet></ROW><ROW><id>12058569</id><snippet>datetime.strptime(row[1], "%Y-%m-%d %H:%M:%S.%f")
</snippet></ROW><ROW><id>12058784</id><snippet>import yaml
logging.config.dictConfig(yaml.load(open('logging.config', 'r')))
</snippet></ROW><ROW><id>12058796</id><snippet>import bottle
from bottle import request, response

def foo(callback):
    def wrapper(*args, **kwargs):
        # before view function execution
        print(request.environ)  # do whatever you want

        body = callback(*args, **kwargs)  # this line basically means "call the view normally"

        # after view function execution
        response.headers['X-Foo'] = 'Bar'  # you don't need this, just an example

        return body  # another 'mandatory' line: return what the view returned (you can change it too)
    return wrapper

bottle.install(foo)
</snippet></ROW><ROW><id>12058974</id><snippet>from collections import defaultdict

for k, lst in d.iteritems():
    counts = defaultdict(int)
    for i in range(0, len(lst), 3):
        counts[lst[i]] += lst[i + 2]
    print k, ", ".join(["%s %d" % (n, c) for n, c in counts.items()])
</snippet></ROW><ROW><id>12058974</id><snippet>d = {'a': {'Adam': {'Book': 4}},
     'b': {'Bill': {'TV': 6, 'Computer': 5}, 'Jill': {'Sports': 1}},
     'c': {'Bill': {'Sports': 3}},
     'd': {'Quin': {'Computer': 3}, 'Adam': {'TV': 3}},
     'e': {'Quin': {'TV': 2, 'Book': 5}},
     'f': {'Adam': {'Computer': 7}}}
</snippet></ROW><ROW><id>12058974</id><snippet>for k, v in d.items():
    print k, ", ".join(["%s %d" % (n, sum(a.values())) for n, a in v.items()])
</snippet></ROW><ROW><id>12058974</id><snippet>d["a"]["Adam"]["Book"]</snippet></ROW><ROW><id>12058974</id><snippet>d["a"].get("Adam", {}).get("Book", 0)</snippet></ROW><ROW><id>12059105</id><snippet>dblink</snippet></ROW><ROW><id>12059473</id><snippet>class postcon:
    def POST(self):
        conn=MySQLdb.connect(host="localhost",user="root",passwd="mysql",db="dang",charset="utf8")  
        cursor = conn.cursor()
        n = cursor.execute("insert into d_message (mid,title,content,image) values(2,'xx','ccc','fff')")
        conn.commit() # This right here
        cursor.close()
        conn.close()
        if n:
            raise web.seeother('/')
</snippet></ROW><ROW><id>12059703</id><snippet>"</snippet></ROW><ROW><id>12059703</id><snippet>import re
inputString='type="NN" span="123..145" confidence="1.0" '
pat=re.compile('"([^"]*)"')
while True:
        mat=pat.search(inputString)
        if mat is None:
                break
        strings.append(mat.group(1))
        inputString=inputString[mat.end():]
print strings
</snippet></ROW><ROW><id>12059703</id><snippet>import re
inputString='type="NN" span="123..145" confidence="1.0" '
strings=re.findall('"([^"]*)"', inputString)
print strings
</snippet></ROW><ROW><id>12059703</id><snippet>['NN', '123..145', '1.0']
</snippet></ROW><ROW><id>12059739</id><snippet>response.find('log')</snippet></ROW><ROW><id>12059739</id><snippet>log</snippet></ROW><ROW><id>12059739</id><snippet>response.text</snippet></ROW><ROW><id>12059739</id><snippet>log</snippet></ROW><ROW><id>12059739</id><snippet>lxml.etree</snippet></ROW><ROW><id>12059739</id><snippet>xml.etree</snippet></ROW><ROW><id>12059739</id><snippet>find</snippet></ROW><ROW><id>12059739</id><snippet>None</snippet></ROW><ROW><id>12059739</id><snippet>response.find('date')</snippet></ROW><ROW><id>12059739</id><snippet>lxml</snippet></ROW><ROW><id>12059739</id><snippet>xpath</snippet></ROW><ROW><id>12059739</id><snippet>author = response.xpath('//author')[0].text
msg = [i.text for i in response.xpath('//msg')]
</snippet></ROW><ROW><id>12059739</id><snippet>find</snippet></ROW><ROW><id>12059739</id><snippet>msg</snippet></ROW><ROW><id>12059739</id><snippet>find</snippet></ROW><ROW><id>12059828</id><snippet>if index == ...</snippet></ROW><ROW><id>12059828</id><snippet>elif index == ...</snippet></ROW><ROW><id>12059828</id><snippet>combos={
        0: 'id',
        2: 'country',
        3: 'type',
        5: 'lat',
        6: 'lon',
        8: 'depth',
        9: 'yield',
        12: 'name' }

...

for index, item ...:
    if index == 4:
        soup = BeautifulSoup(item)
        for a in soup.findAll('a'):
        events['date'] = ''.join(a.findAll(text=True))
    elif index in combos:
        events[combox[index]]=item
</snippet></ROW><ROW><id>12060124</id><snippet>eval</snippet></ROW><ROW><id>12060124</id><snippet>#!/usr/bin/env python

a = 1
b = 3
x = "(a+b)/2"
print eval(x)
</snippet></ROW><ROW><id>12060191</id><snippet>xpath = {
  "ID": "/Total/ID/text()",
  "Check": "/Total/Response/Detail/Nix/Check/text()", # or "//Check/text()"
}
</snippet></ROW><ROW><id>12060191</id><snippet>row = {name: tree.xpath(path) for name, path in xpath.items()}
</snippet></ROW><ROW><id>12060191</id><snippet>lxml</snippet></ROW><ROW><id>12060191</id><snippet>el.text</snippet></ROW><ROW><id>12060191</id><snippet>xpath = {
  "ID": ".//ID",
  "Check": ".//Check",
}
row = {name: tree.findtext(path) for name, path in xpath.items()}
</snippet></ROW><ROW><id>12060191</id><snippet>import xml.etree.cElementTree as etree

for _, el in etree.iterparse("xxm.xml"):
    if el.text and not el: # leaf element with text
       print el.tag, el.text
</snippet></ROW><ROW><id>12060297</id><snippet>type</snippet></ROW><ROW><id>12060297</id><snippet>pyqtSignal</snippet></ROW><ROW><id>12060297</id><snippet>type</snippet></ROW><ROW><id>12060297</id><snippet>None</snippet></ROW><ROW><id>12060297</id><snippet>type(None)</snippet></ROW><ROW><id>12060297</id><snippet>"None"</snippet></ROW><ROW><id>12060297</id><snippet>None</snippet></ROW><ROW><id>12060297</id><snippet>valueChanged = QtCore.pyqtSignal([MyClass], [type(None)])
</snippet></ROW><ROW><id>12060297</id><snippet>self.valueChanged[type(None)].emit(None)
</snippet></ROW><ROW><id>12060297</id><snippet>TypeError: Window.valueChanged[MyClass].emit():
argument 1 has unexpected type 'NoneType'
</snippet></ROW><ROW><id>12060297</id><snippet>valueChanged[type(None)]</snippet></ROW><ROW><id>12060297</id><snippet>[MyClass]</snippet></ROW><ROW><id>12060297</id><snippet>None</snippet></ROW><ROW><id>12060374</id><snippet>fileToWrite</snippet></ROW><ROW><id>12060374</id><snippet>fileToWrite = open("somefile", "wb")
ftp.retrbinary("RETR somefile", lambda block: handleDownload(block, fileToWrite))
</snippet></ROW><ROW><id>12060380</id><snippet>print</snippet></ROW><ROW><id>12060380</id><snippet>print(stuff)</snippet></ROW><ROW><id>12060380</id><snippet>print</snippet></ROW><ROW><id>12060380</id><snippet>\n</snippet></ROW><ROW><id>12060380</id><snippet>def factor(a, b, c):
    low_value = min(a, b, c)
    high_value = max(a, b, c)
    for i in range(low_value, high_value):
        for j in range(low_value, high_value):
            for k in range(low_value, high_value):
                if i*k != a:
                    # check this clause earlier to improve speed a bit
                    continue
                for l in range(low_value, high_value):
                    if j*l != c:
                        continue
                    if (i*l) + (j*k) != b:
                        continue
                    return (i, j, k, l)
    return None

print("Factoring...")
solution = factor(1, 2, 4)
if solution:
    (i, j, k, l) = solution
    print("Your factored Equation is: (" + i + "x + " + j + ")" +
          "(" + k + "x + " + l + ")")
else:
    print("No solution can be found.")
</snippet></ROW><ROW><id>12060563</id><snippet>lis=[u' ', u'Address :',u'Sadar Bazaar',u'new Delhi,India',u' ',u'Name :',u'Saun-Jean',u' ',u'Occupation :',u'Developer',u'Hacker',u' ']
strs=' '.join(str(x).strip() for x in lis if str(x).strip())
lis1=strs.split(':')
dic={}
for i,x in enumerate(lis1[:-1]):
    if x.strip():
        temp_lis=x.strip().split()
        if i+1 &lt;len(lis1)-1:
            dic[temp_lis[-1]]=' '.join(lis1[i+1].split()[:-1])
        else:
            dic[temp_lis[-1]]=' '.join(lis1[i+1].split())

print dic 
</snippet></ROW><ROW><id>12060563</id><snippet>{'Occupation': 'Developer Hacker', 'Name': 'Saun-Jean', 'Address': 'Sadar Bazaar new Delhi,India'}
</snippet></ROW><ROW><id>12060675</id><snippet>attributes.getNamedItem()</snippet></ROW><ROW><id>12060675</id><snippet>&lt;NameValueList&gt;</snippet></ROW><ROW><id>12060675</id><snippet>Name</snippet></ROW><ROW><id>12060675</id><snippet>&lt;Name&gt;</snippet></ROW><ROW><id>12060675</id><snippet>&lt;NameValueList&gt;</snippet></ROW><ROW><id>12060675</id><snippet>.getElementsByTagName('Name')</snippet></ROW><ROW><id>12060675</id><snippet>.getElementsByTagName('Value')</snippet></ROW><ROW><id>12060675</id><snippet>from xml.etree import ElementTree as ET

etree = ET.fromstring(data)
results = {}
for nvl in etree.findall('NameValueList'):
    name = nvl.find('Name').text
    value = nvl.find('Value').text
    results[name] = value
</snippet></ROW><ROW><id>12060886</id><snippet>from pandas import DataFrame
df = DataFrame(resoverall.fetchall())
df.columns = resoverall.keys()
</snippet></ROW><ROW><id>12060888</id><snippet>shell</snippet></ROW><ROW><id>12060888</id><snippet>call("myAlias", shell=True)
</snippet></ROW><ROW><id>12060888</id><snippet>shell</snippet></ROW><ROW><id>12060888</id><snippet>True</snippet></ROW><ROW><id>12060888</id><snippet>.profile</snippet></ROW><ROW><id>12060888</id><snippet>.bashrc</snippet></ROW><ROW><id>12060888</id><snippet>$ENV</snippet></ROW><ROW><id>12060888</id><snippet>call("myAlias", shell=True, env=dict(ENV='/path/to/aliasfile'))
</snippet></ROW><ROW><id>12061215</id><snippet>shouldStoreData</snippet></ROW><ROW><id>12061215</id><snippet>handle_starttag</snippet></ROW><ROW><id>12061215</id><snippet>handle_data</snippet></ROW><ROW><id>12061215</id><snippet>handle_data</snippet></ROW><ROW><id>12061215</id><snippet>self.shouldStoreData</snippet></ROW><ROW><id>12061215</id><snippet>MyHTMLParser.shouldStoreData</snippet></ROW><ROW><id>12061215</id><snippet>shouldStoreData</snippet></ROW><ROW><id>12061215</id><snippet>__init__</snippet></ROW><ROW><id>12061215</id><snippet>def __init__(self):
    self.shouldStoreData = False
</snippet></ROW><ROW><id>12061215</id><snippet>self.shouldStoreData</snippet></ROW><ROW><id>12061231</id><snippet>window = int(math.ceil(math.log((max(self._degree, other.degree) + 1) *
                                (self._mod_n - 1)**2, 2)))
</snippet></ROW><ROW><id>12061231</id><snippet>new.coeffs = np.convolve(self.coeffs, other.coeffs) % self.mod
</snippet></ROW><ROW><id>12061437</id><snippet>import csv
from StringIO import StringIO

quotedData = StringIO()

with open('file.csv') as f:
    reader = csv.reader(f)
    writer = csv.writer(quotedData, quoting=csv.QUOTE_ALL)
    for row in reader:
       writer.writerow(row)
</snippet></ROW><ROW><id>12061437</id><snippet>reader=csv.reader(StringIO('1,2,3'))</snippet></ROW><ROW><id>12061437</id><snippet>print quotedData.getvalue()
"1","2","3"
</snippet></ROW><ROW><id>12061449</id><snippet>from PyQt4 import QtGui, QtCore

class TestWidget(QtGui.QWidget):
    textSaved = QtCore.pyqtSignal(str)

    def __init__( self, parent = None ):
        super(TestWidget, self).__init__(parent)

        # create the ui (or load it)
        self.__edit   = QtGui.QTextEdit(self)
        self.__button = QtGui.QPushButton(self)
        self.__button.setText('Save')

        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.__edit)
        layout.addWidget(self.__button)
        self.setLayout(layout)

        # create connections
        self.__button.clicked.connect(self.emitTextSaved)

    def emitTextSaved( self ):
        # allow Qt's blocking of signals paradigm to control flow
        if ( not self.signalsBlocked() ):
            self.textSaved.emit(self.__edit.toPlainText())
</snippet></ROW><ROW><id>12061449</id><snippet>from PyQt4 import QtGui, QtCore
import testwidget

class TestWindow(QtGui.QMainWindow):
    def __init__( self, parent == None ):
        super(TestWindow, self).__init__(parent)

        # create the ui (or load it)
        self.__editor = testwidget.TestWidget(self)
        self.setCentralWidget(self.__editor)

        # create connections
        self.__editor.textSaved.connect(self.showMessage)

    def showMessage( self, message ):
        QtGui.QMessageBox.information(self, 'Message', message)
</snippet></ROW><ROW><id>12061639</id><snippet>xgettext</snippet></ROW><ROW><id>12061639</id><snippet>//</snippet></ROW><ROW><id>12061639</id><snippet>#</snippet></ROW><ROW><id>12061639</id><snippet>xgettext</snippet></ROW><ROW><id>12061737</id><snippet>g2 = g + h
g2.add_edges([(0, 50), (1, 51)])
</snippet></ROW><ROW><id>12061737</id><snippet>g2 = g + h + [(0, 50), (1, 51)]
</snippet></ROW><ROW><id>12061737</id><snippet>+</snippet></ROW><ROW><id>12061737</id><snippet>igraph</snippet></ROW><ROW><id>12061737</id><snippet>g2</snippet></ROW><ROW><id>12061737</id><snippet>g</snippet></ROW><ROW><id>12061737</id><snippet>h</snippet></ROW><ROW><id>12061737</id><snippet>group_markers = [(clique, "gray") for clique in mcliques]
plot(g2, mark_groups=group_markers)
</snippet></ROW><ROW><id>12061737</id><snippet>Graph.__plot__</snippet></ROW><ROW><id>12061737</id><snippet>mark_groups</snippet></ROW><ROW><id>12061792</id><snippet>for</snippet></ROW><ROW><id>12061792</id><snippet>  for s in list:
    if s.startswith('x'):
      xlist.append(s)
      list.remove(s)    # this line causes the bug
</snippet></ROW><ROW><id>12061827</id><snippet>python27 setup.py install</snippet></ROW><ROW><id>12061996</id><snippet>__iter__</snippet></ROW><ROW><id>12061996</id><snippet>next</snippet></ROW><ROW><id>12062159</id><snippet>Pusher</snippet></ROW><ROW><id>12062171</id><snippet>a, b = wholeString.split('..')
</snippet></ROW><ROW><id>12062464</id><snippet>missingFromAuthoritative</snippet></ROW><ROW><id>12062464</id><snippet>with</snippet></ROW><ROW><id>12062464</id><snippet>with open('missing.csv', "wb") as outFile:
    outCsv = csv.writer(outFile)
    outCsv.write(header)
    for missing in missingFromAuthoritative:
        # do your other stuff with inconsistencies, etc., here
        print missing
        outCsv.writerow(missing)
</snippet></ROW><ROW><id>12062624</id><snippet>db.users.update({
    'emailAddress': newData['emailAddress'],
    '$or': [
        { 'keyA': { '$exists': false } },
        { 'keyA': None } ] }
    ]
}, {
    '$set': { 'keyA': newData['keyA'] }
})
</snippet></ROW><ROW><id>12062841</id><snippet>nextLink = ElementTree.SubElement(
    root_element, 'a',
    {
        'class': 'bah',
        'href': 'www.bah.com'
    })
</snippet></ROW><ROW><id>12062942</id><snippet>from pytz.gae import pytz</snippet></ROW><ROW><id>12063026</id><snippet>from itertools import takewhile
def msgreader(file):
    while True:
        header = list(takewhile(lambda x: x.strip(), file))
        if not header: break
        header_dict = {k: v.strip() for k,v in (line.split(":", 1) for line in header)}
        line_count = int(header_dict['Lines'])
        message = [next(file) for i in xrange(line_count)] # or islice..
        yield message
</snippet></ROW><ROW><id>12063026</id><snippet>with open("53903") as fp:
    for message in msgreader(fp):
        print message
</snippet></ROW><ROW><id>12063241</id><snippet>cygstart "http://www.google.com"
</snippet></ROW><ROW><id>12063241</id><snippet>from subprocess import call
call(["cygstart", "http://www.google.com"])
</snippet></ROW><ROW><id>12063241</id><snippet>platform.system</snippet></ROW><ROW><id>12063241</id><snippet>webbrowser.open</snippet></ROW><ROW><id>12063264</id><snippet>list_of_pixels = list(im.getdata())
# Do something to the pixels...
im2 = Image.new(im.mode, im.size)
im2.putdata(list_of_pixels)
</snippet></ROW><ROW><id>12063290</id><snippet>prefetch_related</snippet></ROW><ROW><id>12063290</id><snippet># Fetch articles
articles = Articles.objects.filter(active=True) \
    .prefetch_related('tags')[start_from:per_page+start_from]

# Eat a donut
logging.info('omnomnomnom')
</snippet></ROW><ROW><id>12063536</id><snippet>url</snippet></ROW><ROW><id>12063536</id><snippet>name</snippet></ROW><ROW><id>12063536</id><snippet>url(r'^vol(?P&lt;q_vol&gt;\d+)/no(?P&lt;q_no&gt;\d+)/(?P&lt;q_slug&gt;[^.*]+)/$', detail, name='newsletter-detail'),
</snippet></ROW><ROW><id>12063536</id><snippet>url</snippet></ROW><ROW><id>12063536</id><snippet>url</snippet></ROW><ROW><id>12063536</id><snippet>{% url "app.views.myview" %}</snippet></ROW><ROW><id>12063699</id><snippet>parent</snippet></ROW><ROW><id>12063899</id><snippet>model.py</snippet></ROW><ROW><id>12063899</id><snippet>meta = {"db_alias": "user-db"}
</snippet></ROW><ROW><id>12063935</id><snippet>QLabel</snippet></ROW><ROW><id>12063935</id><snippet>QTextBrowser</snippet></ROW><ROW><id>12063935</id><snippet>table</snippet></ROW><ROW><id>12063935</id><snippet>&lt;table border="1" style="border-style: dotted; border-color: black"&gt;&lt;tr&gt;&lt;td&gt;
&lt;blockquote&gt;
...
&lt;/blockquote&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
</snippet></ROW><ROW><id>12063935</id><snippet>&lt;table bgcolor="black"&gt;&lt;tr&gt;&lt;td&gt;
&lt;blockquote style="background-color: palette(window)"&gt;
...
&lt;/blockquote&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
</snippet></ROW><ROW><id>12064003</id><snippet>rating</snippet></ROW><ROW><id>12064003</id><snippet>rating = u'Barntillåten'
</snippet></ROW><ROW><id>12064003</id><snippet>'Barntillåten'</snippet></ROW><ROW><id>12064218</id><snippet>import urllib2

url = 'http://api.justin.tv/api/stream/list.json?channel=FollowGrubby'
contents = urllib2.urlopen(url)

print contents.read()
</snippet></ROW><ROW><id>12064368</id><snippet>pytz</snippet></ROW><ROW><id>12064368</id><snippet>dateutil</snippet></ROW><ROW><id>12064368</id><snippet>&gt;&gt;&gt; from dateutil import parser
&gt;&gt;&gt; parser.parse('2012-06-14 20:38:24.213-7:00')
datetime.datetime(2012, 6, 14, 20, 38, 24, 213000, tzinfo=tzoffset(None, -25200))
</snippet></ROW><ROW><id>12064420</id><snippet>vars()</snippet></ROW><ROW><id>12064420</id><snippet>locals()</snippet></ROW><ROW><id>12064420</id><snippet>globals()</snippet></ROW><ROW><id>12064420</id><snippet>vars()</snippet></ROW><ROW><id>12064601</id><snippet>with open("data.txt") as f:
    data = f.readlines()
    for i, line in enumerate(data):
        if "456" in line:
            print data[i+3].split(',')[1],
</snippet></ROW><ROW><id>12064601</id><snippet>data</snippet></ROW><ROW><id>12064601</id><snippet>i</snippet></ROW><ROW><id>12064601</id><snippet>line</snippet></ROW><ROW><id>12064601</id><snippet>i + 3</snippet></ROW><ROW><id>12064601</id><snippet>with open("data.txt") as f:
    count = -1
    for line in f:
        if "456" in line:
            count = 4

        count -= 1
        if count == 0:
            print line.split(',')[1],
</snippet></ROW><ROW><id>12064601</id><snippet>,</snippet></ROW><ROW><id>12064601</id><snippet>with</snippet></ROW><ROW><id>12064679</id><snippet>'AAA'.lower() == 'aaa'
True
'Aa'.lower() == 'aA'.lower()
True
</snippet></ROW><ROW><id>12064679</id><snippet>class C:
    def __init__(self):
        self.a = None
        self.A = None
        self.aA = None
        self.Aa = None
        self.AAA = None
        self.aAa = None
</snippet></ROW><ROW><id>12064679</id><snippet>&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c.__dict__
{'a': None, 'A': None, 'aA': None, 'AAA': None, 'Aa': None, 'aAa': None}
&gt;&gt;&gt; c.__dict__.keys()
['a', 'A', 'aA', 'AAA', 'Aa', 'aAa']
</snippet></ROW><ROW><id>12064679</id><snippet>&gt;&gt;&gt; sorted(key.lower() for key in c.__dict__.keys())
['a', 'a', 'aa', 'aa', 'aaa', 'aaa']
</snippet></ROW><ROW><id>12064810</id><snippet>*</snippet></ROW><ROW><id>12064810</id><snippet>itertools.product(*map(itertools.permutations,[A,B,C]))
</snippet></ROW><ROW><id>12064888</id><snippet>yourmongocoll.find({"vals":1100})
yourmongocoll.find({"$or":[ {"vals":1700}, {"vals":100}]})
yourmongocoll.find({"$and":[ {"vals":100}, {"vals":1100}]})
</snippet></ROW><ROW><id>12065012</id><snippet>python -u someFileName.py
</snippet></ROW><ROW><id>12065054</id><snippet>subset[subSetCount]</snippet></ROW><ROW><id>12065054</id><snippet>rowList[rowCount]</snippet></ROW><ROW><id>12065054</id><snippet>rowList[columnCount]</snippet></ROW><ROW><id>12065054</id><snippet>subset[subSetCount].append(rowList[rowCount]);
subset[subSetCount].append(rowList[columnCount]);
</snippet></ROW><ROW><id>12065054</id><snippet>rowList.append( rowCount )
columnList.append( columnCount )
</snippet></ROW><ROW><id>12065054</id><snippet>for columnCount</snippet></ROW><ROW><id>12065054</id><snippet>subset.append( [rowList, columnList] )
</snippet></ROW><ROW><id>12065356</id><snippet>currentservertime = []
for item in results:
    currentservertime.append(int(time.time())
</snippet></ROW><ROW><id>12065356</id><snippet>currentservertime = [int(time.time()) for item in results]
</snippet></ROW><ROW><id>12065580</id><snippet>__init__</snippet></ROW><ROW><id>12065580</id><snippet>class Wall(pygame.sprite.Sprite): 

    def __init__(self,x,y,width,height, color):#For when the walls are set up later
        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.Surface([width, height]) # &lt;-------------
        self.image.fill(color)

class player(pygame.sprite.Sprite):

    def __init__ (self,x,y):

        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.Surface([13,13])  # &lt;-------------
        self.image.fill(white) 

class Food(pygame.sprite.Sprite)
    def __init__(self,x,y,color):
        pygame.sprite.Sprite.__init__(self)

        pygame.image = pygame.Surface([7,7])  # &lt;----- this one is different!
        self.image.fill(color)
</snippet></ROW><ROW><id>12065580</id><snippet>self</snippet></ROW><ROW><id>12065580</id><snippet>image</snippet></ROW><ROW><id>12065580</id><snippet>self.image</snippet></ROW><ROW><id>12065580</id><snippet>pygame</snippet></ROW><ROW><id>12065580</id><snippet>        food.remove
</snippet></ROW><ROW><id>12065580</id><snippet>remove</snippet></ROW><ROW><id>12065580</id><snippet>food.remove()</snippet></ROW><ROW><id>12065580</id><snippet>food.remove</snippet></ROW><ROW><id>12065777</id><snippet>argmax</snippet></ROW><ROW><id>12065777</id><snippet>&gt;&gt;&gt; z = numpy.array([[ 0.1 ,  0.1 ,  1.  ],
...                  [ 1.  ,  0.1 ,  0.09],
...                  [ 0.1 ,  1.  ,  0.2 ]])

numpy.argmax(z, axis=1)

&gt;&gt;&gt; array([2, 0, 1]) #Goal column indices

z[:,numpy.argmax(z, axis=1)]

&gt;&gt;&gt; array([[ 1.  ,  0.1 ,  0.1 ],
...        [ 0.09,  1.  ,  0.1 ],
...        [ 0.2 ,  0.1 ,  1.  ]])
</snippet></ROW><ROW><id>12065904</id><snippet>isin</snippet></ROW><ROW><id>12065904</id><snippet>rpt[rpt['STK_ID'].isin(stk_list)]</snippet></ROW><ROW><id>12066068</id><snippet>&gt;&gt;&gt; var_1 = "hello"
&gt;&gt;&gt; [var_1]
['hello']
</snippet></ROW><ROW><id>12066124</id><snippet>file(absolute_file_location).read()</snippet></ROW><ROW><id>12066124</id><snippet>content = None
with open(file, 'r') as f:
  content = f.read()
  f.close()

excel_attach.set_payload(content)
</snippet></ROW><ROW><id>12066303</id><snippet>logger</snippet></ROW><ROW><id>12066303</id><snippet># In logging.py
def log(msg):
  print msg
</snippet></ROW><ROW><id>12066303</id><snippet>from logging import log
log("A critical error occured.")
</snippet></ROW><ROW><id>12066321</id><snippet>localhost-2:tmp $ ipython
Python 2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 15:22:34) 
Type "copyright", "credits" or "license" for more information.

IPython 0.12 -- An enhanced Interactive Python.
?         -&gt; Introduction and overview of IPython's features.
%quickref -&gt; Quick reference.
help      -&gt; Python's own help system.
object?   -&gt; Details about 'object', use 'object??' for extra details.

In [1]: !ls
a.txt

In [2]: z = !ls

In [3]: z
Out[3]: ['a.txt']

In [4]: !!ls
Out[4]: ['a.txt']
</snippet></ROW><ROW><id>12066321</id><snippet>In [10]: z = !!ls

In [11]: z
Out[11]: ['/bin/sh: !ls: command not found']
</snippet></ROW><ROW><id>12066321</id><snippet>%sx?</snippet></ROW><ROW><id>12066321</id><snippet>!!ls</snippet></ROW><ROW><id>12066564</id><snippet>__init__</snippet></ROW><ROW><id>12066564</id><snippet>class Manager(Employee): 
  def __init__(self, reports):
    super(Manager, self).__init__()
    self.reports = reports
</snippet></ROW><ROW><id>12066564</id><snippet>Employee</snippet></ROW><ROW><id>12066564</id><snippet>__init__</snippet></ROW><ROW><id>12066564</id><snippet>class Employee(object): 
  def __init__(self, emp=None, name=None, seat=None):
    self.emp = emp
    self.name = name
    self.seat = seat
</snippet></ROW><ROW><id>12066564</id><snippet>  def totalreports(self):
    return reports
</snippet></ROW><ROW><id>12066564</id><snippet>reports</snippet></ROW><ROW><id>12066564</id><snippet>__init__</snippet></ROW><ROW><id>12066564</id><snippet>self.reports</snippet></ROW><ROW><id>12066564</id><snippet>reports</snippet></ROW><ROW><id>12066564</id><snippet>class Business(object):
  def __init__(self, name):
    self.name = name
    self.employees = []
    self.managers = []

  def employee_names(self);
    return [employee.name for employee in self.employees]
</snippet></ROW><ROW><id>12066747</id><snippet>manager.dict</snippet></ROW><ROW><id>12066747</id><snippet>from multiprocessing import Pool
from multiprocessing import Manager
import random

manager = Manager()
dproxy = manager.dict()

urls = ['www.yahoo.com','www.google.com','www.microsoft.com','www.apple.com','www.cisco.com']



def f(url):
    shared_dict = dproxy[0]
    key = random.randrange(1,10)
    value = random.randrange(11,20)
    shared_dict[key] = value
    dproxy[0] = shared_dict

if __name__ == '__main__':
    dproxy[0] = {}
    pool = Pool(processes=5)

    pool.map(f, urls)
    print dproxy[0]
</snippet></ROW><ROW><id>12066747</id><snippet>idle</snippet></ROW><ROW><id>12066807</id><snippet>&gt;&gt;&gt; class test():
    def handy(self):
        a = raw_input('How many hands? ')
        d = { "hand" + str(i + 1) : self.do_something(i) for i in range(int(a)) }

        keys = d.keys()
        keys.sort()
        for x in keys:
            print x, '=', d[x]

    def do_something(self, i):
        return "something " + str(i)

&gt;&gt;&gt; test().handy()
How many hands? 4
hand1 = something 0
hand2 = something 1
hand3 = something 2
hand4 = something 3
</snippet></ROW><ROW><id>12066807</id><snippet>&gt;&gt;&gt; d = { i : { j : str(i) + str(j) for j in range(5) } for i in range(5) }
&gt;&gt;&gt; d[1][2]
'12'
&gt;&gt;&gt; d[4][1]
'41'
&gt;&gt;&gt; d[2]
{0: '20', 1: '21', 2: '22', 3: '23', 4: '24'}
&gt;&gt; d[5] = { 1 : '51' }
&gt;&gt; d[5][1]
'51'
</snippet></ROW><ROW><id>12066822</id><snippet>cursor.execute("INSERT ... (?, ?, ?)", (var1, var2, var3))
</snippet></ROW><ROW><id>12067511</id><snippet>from urllib import urlencode
from urllib2 import urlopen

ACCESS_KEY = 'blahblah'
long_url = 'http://www.example.com/foo/bar/zoo/hello/'
endpoint = 'https://api-ssl.bitly.com/v3/shorten?access_token={0}&amp;longUrl={1}&amp;format=txt'
req = urlencode(endpoint.format(ACCESS_KEY, long_url))
short_url = urlopen(req).read()
</snippet></ROW><ROW><id>12067511</id><snippet>@register.simple_tag
def bitlyfy(the_url):
    endpoint = 'https://api-ssl.bitly.com/v3/shorten?access_token={0}&amp;longUrl={1}&amp;format=txt'
    req = urlencode(endpoint.format(settings.ACCESS_KEY, the_url))
    return urlopen(req).read()
</snippet></ROW><ROW><id>12067511</id><snippet>{% bitlyfy "http://www.google.com" %}</snippet></ROW><ROW><id>12067538</id><snippet>numpy.save()</snippet></ROW><ROW><id>12067538</id><snippet>np.load()</snippet></ROW><ROW><id>12067538</id><snippet>import numpy as np
import cPickle
data = np.random.rand(50000000)
f = open('foo.pck', 'wb')
cPickle.dump([1,2,3], f, protocol=2)
np.save(f, data)
f.close()
</snippet></ROW><ROW><id>12067538</id><snippet>import cPickle
import numpy as np
f= open('foo.pck', 'rb')
v = cPickle.load(f)
data = np.load(f)
print data.shape, data
</snippet></ROW><ROW><id>12067615</id><snippet>$pull</snippet></ROW><ROW><id>12067615</id><snippet>'$pull': {...
</snippet></ROW><ROW><id>12067761</id><snippet>multiprocessing</snippet></ROW><ROW><id>12067761</id><snippet>multiprocessing.Pool()</snippet></ROW><ROW><id>12067761</id><snippet>subprocess</snippet></ROW><ROW><id>12067813</id><snippet>print replace,</snippet></ROW><ROW><id>12067813</id><snippet>__future__</snippet></ROW><ROW><id>12068030</id><snippet>.split()</snippet></ROW><ROW><id>12068030</id><snippet>.join()</snippet></ROW><ROW><id>12068030</id><snippet>&gt;&gt;&gt; '.'.join('20.99.0'.split('.')[:2])
'20.99'
&gt;&gt;&gt; '.'.join('20.99.1231.23'.split('.')[:2])
'20.99'
&gt;&gt;&gt; '.'.join('20.99'.split('.')[:2])
'20.99'
&gt;&gt;&gt; '.'.join('20'.split('.')[:2])
'20'
</snippet></ROW><ROW><id>12068156</id><snippet>import sys
s1, s2, s4 = sys.argv[1:4]
</snippet></ROW><ROW><id>12068156</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>12068262</id><snippet>q = ndb.query()
cursor = ndb.Cursor(urlsafe=self.request.get('cursor'))
items, next_curs, more = q.fetch_page(10, start_cursor=cursor) 
if more:
    next_c = next_curs.urlsafe()
else:
    next_c = None
self.generate('home.html', {'items': items, 'cursor': next_c })
</snippet></ROW><ROW><id>12068262</id><snippet>{% if cursor %}
    &lt;a class="btn" href="?cursor={{cursor}}"&gt;more..&lt;/a&gt;
{% endif %}
</snippet></ROW><ROW><id>12068764</id><snippet>def select_authorizer(sqltype, arg1, arg2, dbname, source):
</snippet></ROW><ROW><id>12068764</id><snippet>*args</snippet></ROW><ROW><id>12068764</id><snippet>def select_authorizer(*args):
     print(args)
     return sqlite.SQLITE_OK
</snippet></ROW><ROW><id>12068764</id><snippet>(21, None, None, None, None)
(20, 'A', 'name', 'main', None)
</snippet></ROW><ROW><id>12068764</id><snippet>SELECT</snippet></ROW><ROW><id>12068764</id><snippet>set_authorizer</snippet></ROW><ROW><id>12068865</id><snippet>In [84]: user_input = raw_input("Enter a number between 1 to 5 :")
Enter a number between 1 to 5 :3

In [85]: selected_elem = []

In [86]: while len(selected_elem) &lt; int(user_input):
   ....:         random_elem = random.randrange(1, 10, 1)
   ....:         if random_elem not in selected_elem:
   ....:                 selected_elem.append(random_elem)
   ....:

In [87]: print selected_elem
[1, 2, 4]
</snippet></ROW><ROW><id>12068895</id><snippet>yield</snippet></ROW><ROW><id>12068895</id><snippet>a</snippet></ROW><ROW><id>12068895</id><snippet>next()</snippet></ROW><ROW><id>12068895</id><snippet>return</snippet></ROW><ROW><id>12068895</id><snippet>StopIteration</snippet></ROW><ROW><id>12068895</id><snippet>StopIteration</snippet></ROW><ROW><id>12068895</id><snippet>&gt;&gt;&gt; def fib():
...     a = 0
...     b = 1
...     while True:
...         yield a
...         a = b
...         b += a
...         if a &gt; 100:
...             raise StopIteration
...
&gt;&gt;&gt;
&gt;&gt;&gt; for value in fib():
...     print value
...
0
1
2
4
8
16
32
64
&gt;&gt;&gt;

&gt;&gt;&gt; # assign the resulting object to 'generator'
&gt;&gt;&gt; generator = fib()
&gt;&gt;&gt; generator.next()
0
&gt;&gt;&gt; generator.next()
1
&gt;&gt;&gt; for value in generator:
...     print value
...
2
4
8
16
32
64
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12068917</id><snippet>cur.execute('CREATE TABLE OtherInfo([Key] VARCHAR(100), [Value] VARCHAR(100))') 
</snippet></ROW><ROW><id>12068926</id><snippet>import datetime
x = datetime.datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S.%f")
</snippet></ROW><ROW><id>12068926</id><snippet>from datetime import datetime
x = datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S.%f")
</snippet></ROW><ROW><id>12068951</id><snippet>Analytics.objects.extra(select={'timestamp': "CONCAT(UNIX_TIMESTAMP(date), '000')"}).order_by('date').values('timestamp', 'users')
</snippet></ROW><ROW><id>12069474</id><snippet>np.array()</snippet></ROW><ROW><id>12069474</id><snippet>np.matrix()</snippet></ROW><ROW><id>12069474</id><snippet>np.matrix('-1, 1, 1, 2')</snippet></ROW><ROW><id>12069474</id><snippet>np.array([-1, 1, 1, 2])</snippet></ROW><ROW><id>12069483</id><snippet>bundle</snippet></ROW><ROW><id>12069483</id><snippet>virtualenv --no-site-packages myproject_env # create a blank Python virtual environment
source myproject_env/bin/activate # activate it
(myproject_env)$ pip install django # install django into the virtual environment
(myproject_env)$ pip install other_package # etc.
...
(myproject_env)$ pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>12069483</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>12069483</id><snippet>pip</snippet></ROW><ROW><id>12069483</id><snippet>Django==1.4
South==0.7.4
Werkzeug==0.8.3
amqplib==1.0.2
anyjson==0.3.1
celery==2.5.1
django-celery==2.5.1
django-debug-toolbar==0.9.4
django-extensions==0.8
django-guardian==1.0.4
django-picklefield==0.2.0
kombu==2.1.4
psycopg2==2.4.5
python-dateutil==2.1
six==1.1.0
wsgiref==0.1.2
xlwt==0.7.3
</snippet></ROW><ROW><id>12069896</id><snippet>multimechanize/core.py</snippet></ROW><ROW><id>12069896</id><snippet># scripts have access to these vars, which can be useful for loading unique data
trans.thread_num = self.thread_num
trans.process_num = self.process_num
</snippet></ROW><ROW><id>12069896</id><snippet>Transaction()</snippet></ROW><ROW><id>12070082</id><snippet>time.strptime()</snippet></ROW><ROW><id>12070082</id><snippet>%z</snippet></ROW><ROW><id>12070082</id><snippet>dateutil</snippet></ROW><ROW><id>12070151</id><snippet>engine.execute(query_string)
</snippet></ROW><ROW><id>12070261</id><snippet>wx.TreeCtrl</snippet></ROW><ROW><id>12070261</id><snippet>wx.TreeItemData</snippet></ROW><ROW><id>12070261</id><snippet># Let fullPath be holding full path you your file (i.e. in Python string)
fileInfo = wx.TreeItemData(fullPath)
</snippet></ROW><ROW><id>12070261</id><snippet>fileInfo</snippet></ROW><ROW><id>12070261</id><snippet>wx.TreeItemData</snippet></ROW><ROW><id>12070261</id><snippet>wx.TreeCtrl</snippet></ROW><ROW><id>12070261</id><snippet># Let item variable contain your tree item object
self.fileTree.SetPyData(item, fileInfo)
</snippet></ROW><ROW><id>12070261</id><snippet>fileInfo</snippet></ROW><ROW><id>12070261</id><snippet>self.fileTree.GetPyData(event.GetItem())
</snippet></ROW><ROW><id>12070261</id><snippet>wx.TreeCtrl</snippet></ROW><ROW><id>12070311</id><snippet>from itertools import chain
def myGenerator(index):
    return chain([0, 1 / 3.0], xrange(1, index - 3), [index - 3 - 1 / 3.0, index - 3])

list(myGenerator(12))
[0, 0.33333333333333331, 1, 2, 3, 4, 5, 6, 7, 8, 8.6666666666666661, 9]
</snippet></ROW><ROW><id>12070426</id><snippet>datetime.datetime.strptime</snippet></ROW><ROW><id>12070426</id><snippet>datetime.datetime.strptime</snippet></ROW><ROW><id>12070426</id><snippet>time.strptime</snippet></ROW><ROW><id>12070622</id><snippet>&gt;&gt;&gt; 

Traceback (most recent call last):
  File "C:\python\tester.py", line 6, in &lt;module&gt;
    while((present_time - past_time) &lt; 1):
TypeError: can't compare datetime.timedelta to int
</snippet></ROW><ROW><id>12070622</id><snippet>import datetime

past_time =  datetime.datetime.utcnow()
present_time =  datetime.datetime.utcnow()
for i in range(10):
    while((present_time - past_time).seconds &lt; 1):
        present_time = datetime.datetime.utcnow()
    my_fct(......)
    past_time = present_time
</snippet></ROW><ROW><id>12070622</id><snippet>my_fct()</snippet></ROW><ROW><id>12070622</id><snippet>import time
from threading import Thread

 for i in range(10):
    time.sleep(1)
    t = Thread(target=my_fnc, args=(......))
    t.start()
</snippet></ROW><ROW><id>12070841</id><snippet>#!/usr/bin/python
from twisted.internet import protocol, reactor, utils, defer
from twisted.web.server import Site
from twisted.web.static import File

from autobahn.websocket import WebSocketServerFactory, WebSocketServerProtocol
from autobahn.util import newid
from autobahn.resource import WebSocketResource

class ModbusThing(object):
  def __init__(self,clientAddress):
    self.clientAddress = clientAddress
    self.client = None
  def start(self):
    pass
    ## Create client connection to modbus server
    ## Start Looping Call of pollForData with suitable interval
  def pollForData(self):
    pass
    ## Call read methods on ModbusClient object, add call backs to process the results
    ## Add errorBacks to notify of errors
  def resultCallback(self,result):
    pass
    ## Process the data from a read request
    ## Assumes that your websocket clients expect json like {"event":"update","data":[0,1,2]}
    message = dict(event="update",data=processedResults)
    self.broadcast(json.dumps(message))
  def broadcast(self,msg):
    """Override me"""
    pass

class TrackingWebSocketProtocol(WebSocketServerProtocol):
  def onOpen(self):
    self.session_id = newid()
    self.factory._addSession(self,self.session_id)
    print "Socket Open %s" % (self.peerstr,)

  def onMessage(self,payload,isBinary):
    print "Message received from %s\n\t: %r" % (self.peerstr,payload)

  def onClose(self,wasClean,code,reason):
    self.factory._removeSession(self)
    print "Socket Closed %s" % (self.peerstr,)

class TrackingWebSocketFactory(WebSocketServerFactory):
  def __init__(self,*args,**kwargs):
    WebSocketServerFactory.__init__(self,*args,**kwargs)
    self.proto2session = {}
    self.session2proto = {}
  def _addSession(self,proto,session_id):
    if not self.proto2session.has_key(proto):
       self.proto2session[proto] = session_id
    else:
       raise Exception("logic error - dublicate _addSession for protoToSessions")
    if not self.session2proto.has_key(session_id):
       self.session2proto[session_id] = proto
    else:
       raise Exception("logic error - dublicate _addSession for sessionsToProto")
  def _removeSession(self,proto):
    if proto in self.proto2session:
      session_id = self.proto2session[proto]
      del self.proto2session[proto]
      if session_id in self.session2proto:
        del self.session2proto[session_id]
  def sendToAll(self,message,binary=False):
    prepped = self.prepareMessage(message,binary)
    for proto in self.proto2session.keys():
      proto.sendPreparedMessage(prepped)


def run():
  ## WebSocket Factory
  wsfactory = TrackingWebSocketFactory('ws://yourhostname:80')
  wsfactory.protocol = TrackingWebSocketProtocol
  wsresource = WebSocketResource(wsfactory)
  ## Modbus handler
  modbus_thing = ModbusThing((addressofserver,portofserver))
  modbus_thing.broadcast = wsfactory.sendToAll
  modbus_thing.start()
  ## WebServer Site
  # "static" subdirectory, containing http served resources, e.g. index.html, javascript and css
  root = File("static")
  # Your websocket service as 'ws://yourhostname/ws'
  root.putChild("ws", wsresource)
  site = Site(root)
  reactor.listenTCP(80,site)

def main():
  reactor.callWhenRunning(run)
  reactor.run()

if __name__=='__main__':
  main()
</snippet></ROW><ROW><id>12070841</id><snippet>var FancyWebSocket = function(url){
  var conn = null;
  var fws = this;
  if ("WebSocket" in window) {
    conn = new WebSocket(url);
  } else if ("MozWebSocket" in window) {
    conn = new MozWebSocket(url);
  } else {
    console.log("Error Websockets not supported in browser");
    return;
  }
  var callbacks = {};
  var debug = true;
  this.bind = function(event_name, callback){
    callbacks[event_name] = callbacks[event_name] || [];
    callbacks[event_name].push(callback);
    return this;// chainable
  };
  this.send = function(event_name, event_data){
    var payload = JSON.stringify({event:event_name, data: event_data});
    conn.send( payload ); // &lt;= send JSON data to socket server
    return this;
  };
  this.close = function(){ conn.close(); return this;}
  // dispatch to the right handlers
  conn.onmessage = function(evt){
    if (debug) console.log("Websocket(" + conn.URL + ") Message: " + evt.data)
    var json = JSON.parse(evt.data)
    dispatch(json.event, json.data)
  };
  conn.onclose = function(){
    if (debug) console.log("Websocket(" + conn.URL + ") Closed");
    dispatch('close',fws);
  }
  conn.onopen = function(){
    if (debug) console.log("Websocket(" + conn.URL + ") Open");
    dispatch('open',fws);
  }
  conn.onerror = function(e){
    if (debug) console.log("Websocket(" + conn.URL + ") Error: " + error);
    dispatch('error',fws,e);
  }
  this.setdebug = function(v) { debug=v; return this; }
  var dispatch = function(event_name, message){
    var chain = callbacks[event_name];
    if(typeof chain == 'undefined') return; // no callbacks for this event
    for(var i = 0; i &lt; chain.length; i++){
      chain[i]( message )
    }
  }
};
</snippet></ROW><ROW><id>12070841</id><snippet>conn = new FancyWebSocket("ws://yourhostname/ws");
</snippet></ROW><ROW><id>12071044</id><snippet>os.system()</snippet></ROW><ROW><id>12071044</id><snippet>os.wait()</snippet></ROW><ROW><id>12071044</id><snippet>subprocess.call()</snippet></ROW><ROW><id>12071044</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>12071044</id><snippet>wait()</snippet></ROW><ROW><id>12071044</id><snippet>poll()</snippet></ROW><ROW><id>12071044</id><snippet>Popen</snippet></ROW><ROW><id>12071044</id><snippet>os.system()</snippet></ROW><ROW><id>12071044</id><snippet>multiprocessing</snippet></ROW><ROW><id>12071044</id><snippet>Pool</snippet></ROW><ROW><id>12071044</id><snippet>import time
import subprocess

t1 = time.clock()
t2 = time.clock()
overhead = t2-t1

t1 = time.clock()
subprocess.call(['wget', 'http://site.com/test.php'])
t2 = time.clock()
print 'elapsed time: {:.3f} seconds.'.format(t2-t1-overhead)
</snippet></ROW><ROW><id>12071437</id><snippet>params = ['-s','mapred.skip.mode.enabled=true',
          '-s', 'mapred.skip.map.max.skip.records=1',
          '-s', 'mapred.skip.attempts.to.start.skipping=2',
          '-s', 'mapred.map.max.attempts=5',
          '-s', 'mapred.task.timeout=100000']
config_bootstrapper = BootstrapAction('Enable skip mode', 's3://elasticmapreduce/bootstrap-actions/configure-hadoop', params)

conn = EmrConnection(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
step = StreamingStep(name='My Step', ...)
conn.run_jobflow(..., bootstrap_actions=[config_bootstrapper], steps=[step], ...)
</snippet></ROW><ROW><id>12071618</id><snippet>db.ds.find({querystring}).count()  # SyntaxError here
</snippet></ROW><ROW><id>12071618</id><snippet>SyntaxError</snippet></ROW><ROW><id>12071618</id><snippet>{object}</snippet></ROW><ROW><id>12071618</id><snippet>set</snippet></ROW><ROW><id>12071618</id><snippet>{object}  # creates set since Python 2.7
{object1: object2}  # creates dict (object1 should be [hashable][1])
</snippet></ROW><ROW><id>12071618</id><snippet>s = {1, 2, 3}  # Creating set of three unique elements ({} - set literal)
d = {1: 'a', 2: 'b'}  # Creating dict of number-&gt;letters ({:} - dict literal)
</snippet></ROW><ROW><id>12071618</id><snippet>dict</snippet></ROW><ROW><id>12071618</id><snippet>set</snippet></ROW><ROW><id>12071618</id><snippet>dict</snippet></ROW><ROW><id>12071618</id><snippet>dict</snippet></ROW><ROW><id>12071694</id><snippet>#!/bin/sh -e
pythons=('python2', 'python2.7.3')
for py_exec in ${pythons[@]}; do
    py_exec="/usr/bin/$py_exec"
    if [[ -f $py_exec ]]; then
        exec $py_exec $1
    fi
done
</snippet></ROW><ROW><id>12072132</id><snippet>import gio

f = gio.File(uri='http://xxxx/')
def on_ready(gdaemonfile, result):
    data, length, tag = f.load_contents_finish(result)
f.load_contents_async(on_ready)
</snippet></ROW><ROW><id>12072132</id><snippet>GLib.idle_add</snippet></ROW><ROW><id>12072132</id><snippet>import threading
import glib
glib.threads_init()

def load_data():
    opener = urllib2.build_opener() 
    opener.addheaders.append(('Cookie', cookie)) 
    state = opener.open('http://'+gd_adress+'/state.cst?Lang=en')
    state_data = state.read()
    glib.idle_add(on_read_data, state_data)
thread = threading.Thread(target=load_data)
thread.start()
</snippet></ROW><ROW><id>12072644</id><snippet>throw_errors</snippet></ROW><ROW><id>12072644</id><snippet>True</snippet></ROW><ROW><id>12072644</id><snippet>cherrypy._cprequest.Request.throw_errors = True</snippet></ROW><ROW><id>12072644</id><snippet>import cherrypy
from cherrypy import wsgiserver

from werkzeug.debug import DebuggedApplication

class Root(object):

    @cherrypy.expose
    def index(self):
        return "Hello World :)"

    @cherrypy.expose
    def page(self):
        # Error:
        return self.self.self.pas

cherrypy._cprequest.Request.throw_errors = True

app = cherrypy.Application(Root(), script_name=None, config=None)
app = DebuggedApplication(app, evalex=True)

d = wsgiserver.WSGIPathInfoDispatcher({'/': app})
server = wsgiserver.CherryPyWSGIServer(('0.0.0.0', 8080), d)
try:
    server.start()
except KeyboardInterrupt:
    server.stop()
</snippet></ROW><ROW><id>12072941</id><snippet>def findsource(object):
    """Return the entire source file and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of all the lines
    in the file and the line number indexes a line in that list.  An **IOError
    is raised if the source code cannot be retrieved.**"""
    try:
        file = open(getsourcefile(object))  
    except (TypeError, IOError):
        raise IOError, 'could not get source code'
    lines = file.readlines()               #reads the file
    file.close()
</snippet></ROW><ROW><id>12072941</id><snippet>exec</snippet></ROW><ROW><id>12073102</id><snippet>&gt;&gt;&gt; from distutils.version import StrictVersion
&gt;&gt;&gt; StrictVersion('00.03') &gt; StrictVersion('00.10')
False
&gt;&gt;&gt; StrictVersion('00.03') &gt; StrictVersion('00.02')
True
</snippet></ROW><ROW><id>12073102</id><snippet>'1.0b'</snippet></ROW><ROW><id>12073102</id><snippet>LooseVersion</snippet></ROW><ROW><id>12073102</id><snippet>&gt;&gt;&gt; from distutils.version import LooseVersion
&gt;&gt;&gt; LooseVersion('1.2b') &gt; LooseVersion('0.1')
True
&gt;&gt;&gt; LooseVersion('1.2b') &gt; LooseVersion('1.2c')
False
</snippet></ROW><ROW><id>12073109</id><snippet>In [68]: ax1.get_xlim()
Out[68]: (9.9999999999999995e-08, 34359738368.0)

In [69]: ax2.get_xlim()
Out[69]: (0.0, 34359738368.0)
</snippet></ROW><ROW><id>12073109</id><snippet>set_xscale()</snippet></ROW><ROW><id>12073109</id><snippet>set_xlim()</snippet></ROW><ROW><id>12073109</id><snippet>log(0)</snippet></ROW><ROW><id>12073109</id><snippet>-inf</snippet></ROW><ROW><id>12073109</id><snippet>0</snippet></ROW><ROW><id>12073109</id><snippet>log</snippet></ROW><ROW><id>12073109</id><snippet>0</snippet></ROW><ROW><id>12073109</id><snippet>In [103]: ax1.get_xlim()
Out[103]: (0.0, 34359738368.0)

In [104]: ax2.get_xlim()
Out[104]: (0.0, 34359738368.0)
</snippet></ROW><ROW><id>12073109</id><snippet>1</snippet></ROW><ROW><id>12073109</id><snippet>In [88]: ax1.get_xlim()
Out[88]: (1.0, 34359738368.0)

In [89]: ax2.get_xlim()
Out[89]: (1.0, 34359738368.0)
</snippet></ROW><ROW><id>12073219</id><snippet>struct</snippet></ROW><ROW><id>12073219</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; id, first, second = 5, 42, 58
&gt;&gt;&gt; struct.pack('&gt;bhb', id, first, second)
b'\x05\x00*:'
</snippet></ROW><ROW><id>12073219</id><snippet>bytes</snippet></ROW><ROW><id>12073290</id><snippet>num = entry.box.get_text()</snippet></ROW><ROW><id>12073290</id><snippet>num = entry.get_text()</snippet></ROW><ROW><id>12073382</id><snippet>easy_install MySQL-python</snippet></ROW><ROW><id>12073382</id><snippet>pip install MySQL-python</snippet></ROW><ROW><id>12073774</id><snippet>DirtySprite</snippet></ROW><ROW><id>12073774</id><snippet>LayeredDirty</snippet></ROW><ROW><id>12073774</id><snippet>LayeredDirty</snippet></ROW><ROW><id>12073774</id><snippet>Group</snippet></ROW><ROW><id>12073774</id><snippet>draw</snippet></ROW><ROW><id>12073774</id><snippet>sprites = pygame.sprite.LayeredDirty((sprite1, sprite2, sprite3))
sprites.add(sprite4)
...
sprites.draw(pygame_screen)
</snippet></ROW><ROW><id>12073774</id><snippet>pygame.sprite.groupcollide</snippet></ROW><ROW><id>12073774</id><snippet>pygame.sprite.spritecollideany</snippet></ROW><ROW><id>12073808</id><snippet>a = np.arange(27)
indices = [0, -1]
b = a[indices] # array([0, 26])
</snippet></ROW><ROW><id>12073808</id><snippet>vertices = [(0,0,0),(0,0,-1),(0,-1,0),(0,-1,-1),(-1,-1,-1),(-1,-1,0),(-1,0,0),(-1,0,-1)]
indices = list(zip(*vertices))  #Can store this for later use.
a = np.arange(27).reshape((3,3,3)) #dummy array for testing.  Can be any shape size :)
vertex_values = a[indices].reshape((2,2,2))
</snippet></ROW><ROW><id>12073808</id><snippet>itertools</snippet></ROW><ROW><id>12073808</id><snippet>zip</snippet></ROW><ROW><id>12073912</id><snippet>winfo_width</snippet></ROW><ROW><id>12073912</id><snippet>winfo_height</snippet></ROW><ROW><id>12073912</id><snippet>bbox</snippet></ROW><ROW><id>12073912</id><snippet>bbox</snippet></ROW><ROW><id>12073912</id><snippet>content.box()</snippet></ROW><ROW><id>12073964</id><snippet>from lxml import html
html_document = ... #Get your document contents here from a file or whatever

tree = html.fromstring(html_document)
text_document = tree.text_content()
</snippet></ROW><ROW><id>12073964</id><snippet>body_tags = tree.xpath('//body')
if body_tags:
  body = body_tags[0]
  text_document = body.text_content()
else:
  text_document = ''
</snippet></ROW><ROW><id>12074290</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; tagname = subprocess.check_output('git describe --tags'.split())
</snippet></ROW><ROW><id>12074367</id><snippet>random.py</snippet></ROW><ROW><id>12074367</id><snippet>random.Random</snippet></ROW><ROW><id>12074388</id><snippet>re.DOTALL</snippet></ROW><ROW><id>12074388</id><snippet>VirtualHost</snippet></ROW><ROW><id>12074388</id><snippet>fileinput</snippet></ROW><ROW><id>12074388</id><snippet>import os
import sys
import re

for fn in sys.argv[1:]:
    os.rename(fn, fn + '.orig')
    with open(fn + '.orig', 'rb') as fin, open(fn, 'wb') as fout:
        data = fin.read()
        data = re.sub(r'&lt;VirtualHost.*?&gt;.*?&lt;/VirtualHost&gt;', '', data,
                      flags=re.DOTALL)
        fout.write(data)
</snippet></ROW><ROW><id>12074388</id><snippet>with</snippet></ROW><ROW><id>12074388</id><snippet>contextlib.nested</snippet></ROW><ROW><id>12074467</id><snippet>sample = """Don't yield this
# 0 867.691994 855.172889 279.230411 -78.951239 55.994189 -164.824148
# 0 872.477810 854.828159 279.690170 -78.950558 55.994391 -164.823700
...
893.270609 1092.179289 184.692319
907.682255 1048.809187 112.538457
...
# 0 877.347791 854.481104 280.214892 -78.949869 55.994596 -164.823240
...
893.243290 1091.395104 184.726720
907.682255 1048.809187 112.538457
...
# 0 882.216053 854.135168 280.745489 -78.948443 55.996206 -164.821887
Don't yield this either"""

def blocks1(text):
  """All non-comment blocks"""
  buff = []
  for line in text.split('\n'):
    if line.startswith('#'):
      if buff:
        yield "\n".join(buff)
        buff = []
    else:
      buff.append(line)
  if buff:
    yield "\n".join(buff)

def blocks2(text):
  """Only non-comment blocks *between* comments"""
  buff = None
  for line in text.split('\n'):
    if line.startswith('#'):
      if buff is None:
        buff = []
      if buff:
        yield "\n".join(buff)
        buff = []
    else:
      if buff is not None:
        buff.append(line)

for block in blocks2(sample):
  print "Block:\n%s" % (block,)
</snippet></ROW><ROW><id>12074467</id><snippet>Block:
...
893.270609 1092.179289 184.692319
907.682255 1048.809187 112.538457
...
Block:
...
893.243290 1091.395104 184.726720
907.682255 1048.809187 112.538457
...
</snippet></ROW><ROW><id>12074561</id><snippet>global</snippet></ROW><ROW><id>12074561</id><snippet>defined = 'my_logger' in globals()
if defined:
    print('my_logger has not been defined')
</snippet></ROW><ROW><id>12074749</id><snippet>()</snippet></ROW><ROW><id>12074749</id><snippet>def somefun(lengen):
    for length in lengen:
        if not is_blahblah(length): return False
</snippet></ROW><ROW><id>12074749</id><snippet>somefun</snippet></ROW><ROW><id>12074749</id><snippet>lengen</snippet></ROW><ROW><id>12074749</id><snippet>lengths</snippet></ROW><ROW><id>12074749</id><snippet>lengths()</snippet></ROW><ROW><id>12074762</id><snippet>sudo apt-get install python-mysqldb
</snippet></ROW><ROW><id>12074762</id><snippet>easy_install</snippet></ROW><ROW><id>12075008</id><snippet>from selenium.webdriver.common.by import By

trs = driver.find_elements(By.TAG_NAME, "tr") 

tds = trs[1].find_elements(By.TAG_NAME, "td")
</snippet></ROW><ROW><id>12075044</id><snippet>mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);</snippet></ROW><ROW><id>12075044</id><snippet>mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);</snippet></ROW><ROW><id>12075044</id><snippet>#include &lt;windows.h&gt;
#include &lt;iostream&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
using namespace std;

bool KeyIsPressed( unsigned char k )
{
    USHORT status = GetAsyncKeyState( k );
    return (( ( status &amp; 0x8000 ) &gt;&gt; 15 ) == 1) || (( status &amp; 1 ) == 1);
}

int WINAPI WinMain( HINSTANCE hInst, HINSTANCE P, LPSTR CMD, int nShowCmd )
{

    MessageBox( NULL, "[CTRL] + [SHIFT] + [HOME]: Start/Pause\n [CTRL] + [SHIFT] + [END]: Quit", "Instructions", NULL );
    HWND target = GetForegroundWindow();

    POINT pt;
    RECT wRect;
    int delay;
    bool paused = true;

    srand( time(NULL) );

    while ( 1 )
    {
        if ( KeyIsPressed( VK_CONTROL ) &amp;&amp; KeyIsPressed( VK_SHIFT ) &amp;&amp; KeyIsPressed( VK_HOME ) )
        {
            paused = !paused;
            if ( paused )
            {
                MessageBox( NULL, "Paused.", "Notification", NULL );
            }
            else
            {
                cout &lt;&lt; "Unpaused.\n";
                target = GetForegroundWindow();
                cout &lt;&lt; "Target window set.\n";
            }
            Sleep( 1000 );
        }

        // Shutdown.
        if ( KeyIsPressed( VK_CONTROL ) &amp;&amp; KeyIsPressed( VK_SHIFT ) &amp;&amp; KeyIsPressed( VK_END ) )
        {
            MessageBox( NULL, "AutoClicker Shutdown.", "Notification", NULL );
            break;
        }

        if ( paused == false &amp;&amp; GetForegroundWindow() == target )
        {
            GetCursorPos( &amp;pt );
            GetWindowRect( target, &amp;wRect );

            // Make sure we are inside the target window.
            if ( pt.x &gt; wRect.left &amp;&amp; pt.x &lt; wRect.right &amp;&amp; pt.y &gt; wRect.top &amp;&amp; pt.y &lt; wRect.bottom )
            {
                mouse_event( MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0 );
                mouse_event( MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0 );
            }
            delay = (rand() % 3 + 1) * 100;
            Sleep( delay );
        }
    }

    return 0;
}
</snippet></ROW><ROW><id>12075072</id><snippet>&gt;&gt;&gt; customers = [
...     ['customerID1', 'NameOfCustomer1', 'e','t','c', '01 02 03'],
...     ['customerID2', 'NameOfCustomer2', 'e','t','c', '02 05']
...     ]
&gt;&gt;&gt; 
&gt;&gt;&gt; cust_keys = ('id', 'name', 'q1','q2','q3','categories')
&gt;&gt;&gt; cdicts = [dict(zip(cust_keys, cust_vals)) for cust_vals in customers]
&gt;&gt;&gt; cdicts
[{'q1': 'e', 'q3': 'c', 'q2': 't', 'name': 'NameOfCustomer1', 'id': 'customerID1', 'categories': '01 02 03'}, {'q1': 'e', 'q3': 'c', 'q2': 't', 'name': 'NameOfCustomer2', 'id': 'customerID2', 'categories': '02 05'}]
</snippet></ROW><ROW><id>12075072</id><snippet>&gt;&gt;&gt; for cdict in cdicts:
...     cdict['categories'] = cdict['categories'].split()
... 
&gt;&gt;&gt; cdicts
[{'q1': 'e', 'q3': 'c', 'q2': 't', 'name': 'NameOfCustomer1', 'id': 'customerID1', 'categories': ['01', '02', '03']}, {'q1': 'e', 'q3': 'c', 'q2': 't', 'name': 'NameOfCustomer2', 'id': 'customerID2', 'categories': ['02', '05']}]
</snippet></ROW><ROW><id>12075072</id><snippet>defaultdict</snippet></ROW><ROW><id>12075072</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; by_categories = defaultdict(list)
&gt;&gt;&gt; for customer in cdicts:
...     for category in customer['categories']:
...         by_categories[category].append(customer)
... 
</snippet></ROW><ROW><id>12075072</id><snippet>&gt;&gt;&gt; for k in sorted(by_categories):
...     print 'category', k, 'contains:'
...     for v in by_categories[k]:
...         print v
... 
category 01 contains:
{'q1': 'e', 'q3': 'c', 'q2': 't', 'name': 'NameOfCustomer1', 'id': 'customerID1', 'categories': ['01', '02', '03']}
category 02 contains:
{'q1': 'e', 'q3': 'c', 'q2': 't', 'name': 'NameOfCustomer1', 'id': 'customerID1', 'categories': ['01', '02', '03']}
{'q1': 'e', 'q3': 'c', 'q2': 't', 'name': 'NameOfCustomer2', 'id': 'customerID2', 'categories': ['02', '05']}
category 03 contains:
{'q1': 'e', 'q3': 'c', 'q2': 't', 'name': 'NameOfCustomer1', 'id': 'customerID1', 'categories': ['01', '02', '03']}
category 05 contains:
{'q1': 'e', 'q3': 'c', 'q2': 't', 'name': 'NameOfCustomer2', 'id': 'customerID2', 'categories': ['02', '05']}
</snippet></ROW><ROW><id>12075177</id><snippet>'b' in x and 'c' in x</snippet></ROW><ROW><id>12075177</id><snippet>and</snippet></ROW><ROW><id>12075177</id><snippet>in</snippet></ROW><ROW><id>12075177</id><snippet>and</snippet></ROW><ROW><id>12075177</id><snippet>if 'b' and ('c' in x):
</snippet></ROW><ROW><id>12075177</id><snippet>if 'c' in x:
</snippet></ROW><ROW><id>12075177</id><snippet>bool('b')</snippet></ROW><ROW><id>12075177</id><snippet>True</snippet></ROW><ROW><id>12075177</id><snippet>'b'</snippet></ROW><ROW><id>12075177</id><snippet>and</snippet></ROW><ROW><id>12075177</id><snippet>in</snippet></ROW><ROW><id>12075177</id><snippet>('b' and 'c') in x</snippet></ROW><ROW><id>12075177</id><snippet>'c' in x</snippet></ROW><ROW><id>12075177</id><snippet>'b' and 'c'</snippet></ROW><ROW><id>12075177</id><snippet>'c'</snippet></ROW><ROW><id>12075177</id><snippet>if all( key in yourdict for key in ('b', 'c') ):
</snippet></ROW><ROW><id>12075177</id><snippet>in</snippet></ROW><ROW><id>12075177</id><snippet>3 &gt; 10 &gt; 100 &gt; 1000</snippet></ROW><ROW><id>12075177</id><snippet>a operator b operator c operator ...
</snippet></ROW><ROW><id>12075177</id><snippet>(a operator b) and (b operator c) and (c operator ...
</snippet></ROW><ROW><id>12075208</id><snippet>PyObject *</snippet></ROW><ROW><id>12075654</id><snippet>%H</snippet></ROW><ROW><id>12075654</id><snippet>try:
     time = datetime.datetime.strptime(time, " %H:%M:%S.%f")
except ValueError:
     time = time.replace(' 24', ' 23')
     time = datetime.datetime.strptime(time, " %H:%M:%S.%f")
     time += datetime.timedelta(hours=1)
</snippet></ROW><ROW><id>12076297</id><snippet>a = [[2,3,4,],[8,14,13],[12,54,98]]
a[2] = a[0]
</snippet></ROW><ROW><id>12076297</id><snippet>a</snippet></ROW><ROW><id>12076297</id><snippet>[[2, 3, 4], [8, 14, 13], [2, 3, 4]] 
</snippet></ROW><ROW><id>12076297</id><snippet>a[0], a[-1] = a[-1], a[0]
</snippet></ROW><ROW><id>12076297</id><snippet>[[12, 54, 98], [8, 14, 13], [2, 3, 4]]
</snippet></ROW><ROW><id>12076539</id><snippet>dict</snippet></ROW><ROW><id>12076539</id><snippet>set</snippet></ROW><ROW><id>12076539</id><snippet>.__hash__()</snippet></ROW><ROW><id>12076539</id><snippet>.__eq__()</snippet></ROW><ROW><id>12076539</id><snippet>class Engine(object):
    def __init__(self, id):
        self.id = id

    def __hash__(self):
        return hash(self.id)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.id == other.id
        return NotImplemented
</snippet></ROW><ROW><id>12076539</id><snippet>&gt;&gt;&gt; eng1 = Engine(1)
&gt;&gt;&gt; eng2 = Engine(2)
&gt;&gt;&gt; eng1 == eng2
False
&gt;&gt;&gt; eng1 == eng1
True
&gt;&gt;&gt; eng1 == Engine(1)
True
&gt;&gt;&gt; engines = set([eng1, eng2])
&gt;&gt;&gt; engines
set([&lt;__main__.Engine object at 0x105ebef10&gt;, &lt;__main__.Engine object at 0x105ebef90&gt;])
&gt;&gt;&gt; engines.add(Engine(1))
&gt;&gt;&gt; engines
set([&lt;__main__.Engine object at 0x105ebef10&gt;, &lt;__main__.Engine object at 0x105ebef90&gt;])
</snippet></ROW><ROW><id>12076539</id><snippet>Engine(1)</snippet></ROW><ROW><id>12076539</id><snippet>.__eq__()</snippet></ROW><ROW><id>12076539</id><snippet>.__eq__()</snippet></ROW><ROW><id>12076539</id><snippet>&gt;&gt;&gt; Engine(1) in [eng1, eng2]
True
</snippet></ROW><ROW><id>12076739</id><snippet>import pyaudio
import wave
import sys

chunk = 1024

def convert(data, sampleSize = 4, channel = 0):
    for i in range(0, len(data), 2*sampleSize):
        for j in range(0, sampleSize):
           data[i + j + sampleSize * channel] = data[i + j + sampleSize * (1 - channel)]

if len(sys.argv) &lt; 2:
    print "Plays a wave file.\n\n" +\
          "Usage: %s filename.wav" % sys.argv[0]
    sys.exit(-1)

wf = wave.open(sys.argv[1], 'rb')

p = pyaudio.PyAudio()

# open stream
stream = p.open(format =
                p.get_format_from_width(wf.getsampwidth()),
                channels = wf.getnchannels(),
                rate = wf.getframerate(),
                output = True)

# read data
data = wf.readframes(chunk)
convert(data)

# play stream
while data != '':
    stream.write(data)
    data = wf.readframes(chunk)
    convert(data)

stream.close()
p.terminate()
</snippet></ROW><ROW><id>12077013</id><snippet>x = init value
for f in funclist:
    x = f(x)
</snippet></ROW><ROW><id>12077013</id><snippet>value = reduce(lambda x, f: f(x), funclist, init_value)
</snippet></ROW><ROW><id>12077214</id><snippet>import tornado.wsgi
from fanstatic import Fanstatic   

from your_tornado_app import MainHandler # tornado.web.RequestHandler

app = tornado.wsgi.WSGIApplication([
    (r"/", MainHandler),
])
app = Fantastic(app)

if __name__ == '__main__':
    from wsgiref.simple_server import make_server

    server = make_server('127.0.0.1', 8080, app)
    server.serve_forever()
</snippet></ROW><ROW><id>12077358</id><snippet>dict((s, v) for (o, s), v in mydict.iteritems() if o is co1)
</snippet></ROW><ROW><id>12077358</id><snippet>{s: v for (o, s), v in mydict.iteritems() if o is co1}
</snippet></ROW><ROW><id>12077461</id><snippet>import csv

datafile1 = csv.reader(open('datafile1.csv','rb'), delimiter=",", quotechar='|')
datafile2 = csv.reader(open('datafile2.csv','rb'), delimiter=",", quotechar='|')


class data(object):

    def __init__(self,data_file):

        self.date, self.data1, self.data2, self.data3 = [], [], [], []

        for row in data_file:
            self.date.append(row[0])
            self.data1.append(row[1])
            self.data2.append(row[2])
            self.data3.append(row[3])


data1 = data(datafile1)
data2 = data(datafile2)
</snippet></ROW><ROW><id>12078059</id><snippet>with open('sample.txt', 'r') as fin:
    lines = fin.readlines()

    with open('sample_output.txt', 'w') as fout:
        index = 1
        for line in lines:
            if line[0] == 'o':
                line = '*' + str(index) + line[1:]
                index += 1
            fout.write(line.rstrip() + '\n')
</snippet></ROW><ROW><id>12078217</id><snippet>pycurl.py</snippet></ROW><ROW><id>12078352</id><snippet>p</snippet></ROW><ROW><id>12078352</id><snippet>wrapper</snippet></ROW><ROW><id>12078352</id><snippet>p</snippet></ROW><ROW><id>12078352</id><snippet>wrapper</snippet></ROW><ROW><id>12078352</id><snippet>wrapper</snippet></ROW><ROW><id>12078352</id><snippet>nonlocal p</snippet></ROW><ROW><id>12078352</id><snippet>p</snippet></ROW><ROW><id>12078352</id><snippet>def decorator(fn, p=p)</snippet></ROW><ROW><id>12078352</id><snippet>p</snippet></ROW><ROW><id>12078352</id><snippet>pdecor</snippet></ROW><ROW><id>12078352</id><snippet>pdecor</snippet></ROW><ROW><id>12078352</id><snippet>p</snippet></ROW><ROW><id>12078352</id><snippet>p</snippet></ROW><ROW><id>12078393</id><snippet>libcairo*</snippet></ROW><ROW><id>12078393</id><snippet>/usr/lib</snippet></ROW><ROW><id>12078393</id><snippet>/usr/lib64</snippet></ROW><ROW><id>12078412</id><snippet>with open('test.txt') as f:
    for i in f:
        print("&gt;", i, end="")
</snippet></ROW><ROW><id>12078484</id><snippet>msg_atch.strip()</snippet></ROW><ROW><id>12078484</id><snippet>strip()</snippet></ROW><ROW><id>12078484</id><snippet>MIMEBase</snippet></ROW><ROW><id>12078484</id><snippet>msg_obj = MIMEMultipart()
msg_atch = MIMEBase(mime_type, mime_subtype)
msg_atch.set_payload(file_data)
Encoders.encode_base64(msg_atch)
msg_atch._payload = msg_atch._payload.replace('\n','')
msg_obj.attach(msg_atch)
</snippet></ROW><ROW><id>12078484</id><snippet>MIMEBase._payload</snippet></ROW><ROW><id>12078484</id><snippet>msg_atch._payload = msg_atch._payload.rstrip('\n')</snippet></ROW><ROW><id>12078484</id><snippet>Content-Type: application/octet-stream</snippet></ROW><ROW><id>12078484</id><snippet>MIME-Version: 1.0</snippet></ROW><ROW><id>12078595</id><snippet>mystruct = "47B12s29B9s"
struct.unpack(mystruct, mystring)
</snippet></ROW><ROW><id>12078638</id><snippet>url</snippet></ROW><ROW><id>12078638</id><snippet>/error/&lt;id&gt;</snippet></ROW><ROW><id>12078638</id><snippet>errors = {1 : "Error message for error id 1", 2 : "Error message for error id 2"}</snippet></ROW><ROW><id>12078638</id><snippet>error_codes.py</snippet></ROW><ROW><id>12078638</id><snippet>views.py</snippet></ROW><ROW><id>12078638</id><snippet>&lt;id&gt;</snippet></ROW><ROW><id>12078638</id><snippet>url</snippet></ROW><ROW><id>12078638</id><snippet>template</snippet></ROW><ROW><id>12078638</id><snippet>error code</snippet></ROW><ROW><id>12078638</id><snippet>process_template_response(self, request, response)</snippet></ROW><ROW><id>12078638</id><snippet>response.context_data</snippet></ROW><ROW><id>12078638</id><snippet>error_code_dictionary</snippet></ROW><ROW><id>12078703</id><snippet>def func(a):
    return a.month

vfunc = np.vectorize(func)
</snippet></ROW><ROW><id>12078703</id><snippet>np.where(vfunc(inp['Date_start']) == 7)
</snippet></ROW><ROW><id>12078709</id><snippet>__getitem__</snippet></ROW><ROW><id>12078709</id><snippet>__setitem__</snippet></ROW><ROW><id>12078709</id><snippet>l[:]</snippet></ROW><ROW><id>12078709</id><snippet>l[:] = ...</snippet></ROW><ROW><id>12078857</id><snippet>if [ ! -d $OPENSHIFT_REPO_DIR/wsgi/static/admin ]; then
mkdir $OPENSHIFT_REPO_DIR/wsgi/static/admin
fi

cp $OPENSHIFT_GEAR_DIR/virtenv/lib/python2.6/site-packages/Django-1.4.1-py2.6.egg/django/contrib/admin/static/admin $OPENSHIFT_REPO_DIR/wsgi/static/
</snippet></ROW><ROW><id>12078878</id><snippet>def callback(*args):
    def decorate(f):
        try:
            f._marks.add(args)
        except AttributeError:
            f._marks = {args}
        return f
    return decorate
</snippet></ROW><ROW><id>12078878</id><snippet>def connect_callbacks(obj):
    for _, f in inspect.getmembers(obj, inspect.ismethod):
        try:
            marks = f.__func__._marks
        except AttributeError:
            continue
        for widget, signal in marks:
            widget.connect(signal, f)
</snippet></ROW><ROW><id>12078878</id><snippet>__func__</snippet></ROW><ROW><id>12078878</id><snippet>class Test:
    def __init__(self):
        ...
        connect_callbacks(self)

    @callback(widget, signal)
    def test():
        ...
</snippet></ROW><ROW><id>12079036</id><snippet>with open("filename", "w") as f:
    for key in dict:
        print &gt;&gt;f, key
</snippet></ROW><ROW><id>12079036</id><snippet>with open("filename", "w") as f:
    for key in dict:
        print(key, file=f)
</snippet></ROW><ROW><id>12079056</id><snippet>sqlite</snippet></ROW><ROW><id>12079056</id><snippet>postgres</snippet></ROW><ROW><id>12079379</id><snippet>-e .
</snippet></ROW><ROW><id>12079485</id><snippet>base64</snippet></ROW><ROW><id>12079485</id><snippet>base64</snippet></ROW><ROW><id>12079491</id><snippet>&gt;&gt;&gt; urllib.quote('https://dl.dropbox.com/u/94943007/file.kml', '')
'https%3A%2F%2Fdl.dropbox.com%2Fu%2F94943007%2Ffile.kml'
</snippet></ROW><ROW><id>12079931</id><snippet>dynmodfunc &lt;- function() {
    plot(0:1,0:1,ann=FALSE,type='n')
    mypoints &lt;- matrix(ncol=2, nrow=0)
    while( length(p &lt;- locator(1, type='p', col='red')) ) {
        mypoints &lt;- rbind(mypoints, unlist(p))
        plot(mypoints, col='red', ann=FALSE, xlim=0:1, ylim=0:1)
        if(nrow(mypoints)&gt;1) {
            xspline(mypoints, shape=-1)
        }
    }
    mypoints
}

(out &lt;- dynmodfunc())
</snippet></ROW><ROW><id>12079931</id><snippet>shape</snippet></ROW><ROW><id>12079931</id><snippet>xspline</snippet></ROW><ROW><id>12079931</id><snippet>matrix2mathematica &lt;- function(x) {
    paste0( '{', 
        paste0( '{', x[,1], ', ', x[,2], '}', collapse=', '),
    '}')
}

cat( matrix2mathematica(out))
</snippet></ROW><ROW><id>12080001</id><snippet>'is_attending': context['is_attending']</snippet></ROW><ROW><id>12080001</id><snippet>.inclusion_tag()</snippet></ROW><ROW><id>12080001</id><snippet>if profile in attendees:
    return {'is_attending': context['is_attending']}
else:
    return {'is_attending': ''}
</snippet></ROW><ROW><id>12080001</id><snippet>takes_context</snippet></ROW><ROW><id>12080001</id><snippet> {% registration %}
</snippet></ROW><ROW><id>12080001</id><snippet>event</snippet></ROW><ROW><id>12080001</id><snippet>@register.inclusion_tag('events/list.html', takes_context=True)
def registration(context):
    request = context['request']
    event = context['event']
    profile = Profile.objects.get(user=request.user)
    attendees = [a.profile for a in Attendee.objects.filter(event=event)]
    if profile in attendees:
        return {'is_attending': context['is_attending']}
    else:
        return {'is_attending': ''}
</snippet></ROW><ROW><id>12080183</id><snippet>Connection: Keep-Alive, TE
</snippet></ROW><ROW><id>12080200</id><snippet>sorted(i)</snippet></ROW><ROW><id>12080200</id><snippet>i.sort()</snippet></ROW><ROW><id>12080200</id><snippet>temp = [i.get_hot_post(3) for i in node_list]
hot_posts = [sorted(i, key=sort_by_rate) for i in temp]
</snippet></ROW><ROW><id>12080228</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>12080228</id><snippet>+</snippet></ROW><ROW><id>12080228</id><snippet>str.__add__</snippet></ROW><ROW><id>12080228</id><snippet>1+1</snippet></ROW><ROW><id>12080228</id><snippet>"hello".upper()</snippet></ROW><ROW><id>12080556</id><snippet>grid_forget</snippet></ROW><ROW><id>12080556</id><snippet>grid_forget</snippet></ROW><ROW><id>12080621</id><snippet>def format_currency(value):
    return "${:,.2f}".format(value)
</snippet></ROW><ROW><id>12080644</id><snippet>palin</snippet></ROW><ROW><id>12080644</id><snippet>polly</snippet></ROW><ROW><id>12080644</id><snippet>"alive"</snippet></ROW><ROW><id>12080644</id><snippet>polly</snippet></ROW><ROW><id>12080644</id><snippet>palin</snippet></ROW><ROW><id>12080644</id><snippet>polly</snippet></ROW><ROW><id>12080644</id><snippet>"dead"</snippet></ROW><ROW><id>12080644</id><snippet>"alive"</snippet></ROW><ROW><id>12080644</id><snippet>"alive"</snippet></ROW><ROW><id>12080644</id><snippet>1</snippet></ROW><ROW><id>12080644</id><snippet>&gt;&gt;&gt; palin[1] = polly
&gt;&gt;&gt; palin
['parrot', 'dead']
</snippet></ROW><ROW><id>12080644</id><snippet>palin[1]</snippet></ROW><ROW><id>12080644</id><snippet>polly</snippet></ROW><ROW><id>12080644</id><snippet>dict</snippet></ROW><ROW><id>12080644</id><snippet>set</snippet></ROW><ROW><id>12080644</id><snippet>tuple</snippet></ROW><ROW><id>12080644</id><snippet>"dead"</snippet></ROW><ROW><id>12080644</id><snippet>"alive"</snippet></ROW><ROW><id>12080810</id><snippet>%</snippet></ROW><ROW><id>12080810</id><snippet>%%</snippet></ROW><ROW><id>12080810</id><snippet>statmt="select id from %s WHERE `email` LIKE '%%blah%%'" % (tbl)
</snippet></ROW><ROW><id>12080903</id><snippet>whitelist = ['prop1', 'prop2', ...]

def update_entity(key, **changed_values):
  ent = key.get()
  for name, value in changed_values.items():
    if name in whitelist:
      setattr(ent, name, value)  # Or ent._properties[name]._set_value(ent, value)
  ent.put()
</snippet></ROW><ROW><id>12080984</id><snippet>from celery import Celery

celery = Celery()

@celery.task
def add(x, y):
    return x + y
</snippet></ROW><ROW><id>12080984</id><snippet>from nose.tools import eq_

def test_add_task():
    rst = add.apply(args=(4, 4)).get()
    eq_(rst, 8)
</snippet></ROW><ROW><id>12081010</id><snippet>&gt;&gt;&gt; from collections import Counter

&gt;&gt;&gt; d = {'apple': {'a': 1, 'b': 4, 'c': 2}, 'orange': {'a': 4, 'c': 5}, 'pear': {'a': 1, 'b': 2}}
&gt;&gt;&gt; sum(map(Counter, d.values()), Counter())
Counter({'c': 7, 'a': 6, 'b': 6})
</snippet></ROW><ROW><id>12081163</id><snippet>zip()</snippet></ROW><ROW><id>12081163</id><snippet>a</snippet></ROW><ROW><id>12081163</id><snippet>b</snippet></ROW><ROW><id>12081163</id><snippet>dict(zip(a, b))
</snippet></ROW><ROW><id>12081163</id><snippet>dict()</snippet></ROW><ROW><id>12081454</id><snippet>def handy(self, play_deck):
    a = raw_input('How many hands? ')
    for i in range(int(a)):
        h = "hand" + str(i+ 1) # dynamilly create key
        q, play_deck = self.deal(self.full_deck) # pull cards from deck
        self.dict_of_hands.setdefault(h, q) # load up dict of hands

    hand_keys = self.dict_of_hands.keys()
    the_hands = self.dict_of_hands

    first_cards = []
    second_cards = []
    for hand in the_hands:
        # print the_hands[hand][0]
        first_cards.append(the_hands[hand][0])

    for hand in the_hands:
        # print the_hands[hand][1]
        second_cards.append(the_hands[hand][1])         

    header = self.dict_of_hands.keys()


    table = texttable.Texttable()
    table.header(header)
    table.add_rows([first_cards, second_cards], header=False)
    print table.draw()
</snippet></ROW><ROW><id>12081454</id><snippet>How many hands? 4
+---------------+---------------+------------------+---------------+
|     hand4     |     hand1     |      hand2       |     hand3     |
+===============+===============+==================+===============+
| Jack of Clubs | 9 of Diamonds | Jack of Diamonds | 4 of Spades   |
+---------------+---------------+------------------+---------------+
| 6 of Diamonds | 10 of Spades  | 9 of Diamonds    | Ace of Hearts |
+---------------+---------------+------------------+---------------+
</snippet></ROW><ROW><id>12081454</id><snippet>table.add_rows([first_cards, second_cards], header=False)
</snippet></ROW><ROW><id>12081675</id><snippet>zip</snippet></ROW><ROW><id>12081675</id><snippet>next()</snippet></ROW><ROW><id>12081675</id><snippet>0</snippet></ROW><ROW><id>12081675</id><snippet>1</snippet></ROW><ROW><id>12081675</id><snippet>3</snippet></ROW><ROW><id>12081675</id><snippet>zip</snippet></ROW><ROW><id>12081788</id><snippet>class User(UserMixin):
    def __init__(self, name, id, active=True):
        self.name = name
        self.id = id
        self.active = active

    def is_active(self):
        # Here you should write whatever the code is
        # that checks the database if your user is active
        return self.active

    def is_anonymous(self):
        return False

    def is_authenticated(self):
        return True
</snippet></ROW><ROW><id>12081788</id><snippet>User</snippet></ROW><ROW><id>12081788</id><snippet>@login_manager.user_loader
def load_user(id):
     # 1. Fetch against the database a user by `id` 
     # 2. Create a new object of `User` class and return it.
     u = DBUsers.query.get(id)
    return User(u.name,u.id,u.active)
</snippet></ROW><ROW><id>12081788</id><snippet>login_user()</snippet></ROW><ROW><id>12081933</id><snippet>itertools</snippet></ROW><ROW><id>12081933</id><snippet>islice</snippet></ROW><ROW><id>12081933</id><snippet>None</snippet></ROW><ROW><id>12081933</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; it = (i for i in range(10, 20)) # it = xrange(10, 20)
&gt;&gt;&gt; a = itertools.islice(it, 4, None)
&gt;&gt;&gt; list(a)
[14, 15, 16, 17, 18, 19]
</snippet></ROW><ROW><id>12081957</id><snippet>recv</snippet></ROW><ROW><id>12082138</id><snippet>editor</snippet></ROW><ROW><id>12082138</id><snippet>Gtk.ScrolledWindow</snippet></ROW><ROW><id>12082138</id><snippet>ScrolledWindow</snippet></ROW><ROW><id>12082138</id><snippet>TextView</snippet></ROW><ROW><id>12082179</id><snippet>&gt;&gt;&gt; class A(object):
...   foo = 'bar'  # Notice that this isn't in an __init__ function definition
... 
&gt;&gt;&gt; a = A()        # Just creating two distinct instances of A
&gt;&gt;&gt; b = A()
&gt;&gt;&gt; A.foo = 'baz'  # Now, I'm setting the class attribute
&gt;&gt;&gt; b.foo
'baz'              # Notice how all instances of A changed
&gt;&gt;&gt; a.foo
'baz'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12082248</id><snippet>Grid_Type</snippet></ROW><ROW><id>12082248</id><snippet>data</snippet></ROW><ROW><id>12082248</id><snippet>form = Isochrone_Set_Parameters(request.POST)</snippet></ROW><ROW><id>12082248</id><snippet>Grid_Type</snippet></ROW><ROW><id>12082248</id><snippet>Grid_Type</snippet></ROW><ROW><id>12082248</id><snippet>kwargs</snippet></ROW><ROW><id>12082248</id><snippet>def __init__(self, *args, **kwargs):
    Grid_Type = kwargs.pop('Grid_Type', None)
    super(Isochrone_Set_Parameters, self).__init__(*args, **kwargs)
    ...
</snippet></ROW><ROW><id>12082248</id><snippet>IsochroneSetParameters</snippet></ROW><ROW><id>12082248</id><snippet>grid_type</snippet></ROW><ROW><id>12082349</id><snippet>urllib.quote_plus("http://earth.google.com/gallery/kmz/women_for_women.kmz?a=large")
</snippet></ROW><ROW><id>12082349</id><snippet>'http%3A%2F%2Fearth.google.com%2Fgallery%2Fkmz%2Fwomen_for_women.kmz%3Fa%3Dlarge'
</snippet></ROW><ROW><id>12082392</id><snippet># What happens if id = "1'; DROP DATABASE somedb" ?
delstatmt = "DELETE FROM `maillist_subscription` WHERE id = '%s'" % id
cursor.execute(delstatmt)
conn.commit()
</snippet></ROW><ROW><id>12082392</id><snippet>delstatmt = "DELETE FROM `maillist_subscription` WHERE id = ?"
cursor.execute(delstatmt, id)
conn.commit()
</snippet></ROW><ROW><id>12082439</id><snippet>import Image
import numpy

im = Image.open('Tiff.tif')

imarray = numpy.array(im)
print imarray.shape, im.size   #these agree
</snippet></ROW><ROW><id>12082439</id><snippet>im = open('Tiff.tif','r')
image_data = im.read()
im.close()

#lets look at the first few characters
for char in image_data[:64]:  
    print ord(char),  #need to use ord so we can see the number
</snippet></ROW><ROW><id>12082463</id><snippet>num</snippet></ROW><ROW><id>12082463</id><snippet>while</snippet></ROW><ROW><id>12082463</id><snippet>theSum</snippet></ROW><ROW><id>12082463</id><snippet>num</snippet></ROW><ROW><id>12082463</id><snippet>theSum</snippet></ROW><ROW><id>12082463</id><snippet>num</snippet></ROW><ROW><id>12082488</id><snippet>bar</snippet></ROW><ROW><id>12082488</id><snippet>bar</snippet></ROW><ROW><id>12082488</id><snippet>partialfun</snippet></ROW><ROW><id>12082514</id><snippet>imshow</snippet></ROW><ROW><id>12082514</id><snippet>extent</snippet></ROW><ROW><id>12082514</id><snippet>aspect='auto'</snippet></ROW><ROW><id>12082514</id><snippet>pcolormesh</snippet></ROW><ROW><id>12082514</id><snippet>shading='gouraud'</snippet></ROW><ROW><id>12082514</id><snippet>imshow</snippet></ROW><ROW><id>12082514</id><snippet>interpolate.interp1d</snippet></ROW><ROW><id>12082514</id><snippet>from scipy.interpolate import interp1d

fint = interp1d(depth, data.T, kind='cubic')
newdata = fint(newdepth).T
</snippet></ROW><ROW><id>12082514</id><snippet>.T</snippet></ROW><ROW><id>12082514</id><snippet>kind</snippet></ROW><ROW><id>12082514</id><snippet>'linear'</snippet></ROW><ROW><id>12082715</id><snippet>with open('input.txt','r') as f:
    data = f.readlines()

with open('output.txt','w') as f:
    for i, line in enumerate(data):
        if '456' in line:
            fields = data[i+3].split(',')
            fields[-1] = 'PIZZA\n'
            data[i+3] = ','.join(fields)
        f.write(line)
</snippet></ROW><ROW><id>12082838</id><snippet>prettify</snippet></ROW><ROW><id>12082914</id><snippet>parseTags</snippet></ROW><ROW><id>12082914</id><snippet>sanitizeTag</snippet></ROW><ROW><id>12082914</id><snippet># This function takes a string with commas separating raw user input, and
# returns a list of valid tags made by sanitizing the strings between the
# commas.
def parseTags(str):
    # First, we split the string on commas.
    rawTags = str.split(',')

    # Then, we sanitize each of the tags.  If sanitizing gives us back None,
    # then the tag was invalid, so we leave those cases out of our final
    # list of tags.  We can use None as the predicate because sanitizeTag
    # will never return '', which is the only falsy string.
    return filter(None, map(sanitizeTag, rawTags))

# This function takes a single proto-tag---the string in between the commas
# that will be turned into a valid tag---and sanitizes it.  It either
# returns an alphanumeric string (if the argument can be made into a valid
# tag) or None (if the argument cannot be made into a valid tag; i.e., if
# the argument contains only whitespace and/or punctuation).
def sanitizeTag(str):
    # First, we turn non-alphanumeric characters into whitespace.  You could
    # also use a regular expression here; see below.
    str = ''.join(c if c.isalnum() else ' ' for c in str)

    # Next, we split the string on spaces, ignoring leading and trailing
    # whitespace.
    words = str.split()

    # There are now three possibilities: there are no words, there was one
    # word, or there were multiple words.
    numWords = len(words)
    if numWords == 0:
        # If there were no words, the string contained only spaces (and/or
        # punctuation).  This can't be made into a valid tag, so we return
        # None.
        return None
    elif numWords == 1:
        # If there was only one word, that word is the tag, no
        # post-processing required.
        return words[0]
    else:
        # Finally, if there were multiple words, we camel-case the string:
        # we lowercase the first word, capitalize the first letter of all
        # the other words and lowercase the rest, and finally stick all
        # these words together without spaces.
        return words[0].lower() + ''.join(w.capitalize() for w in words[1:])
</snippet></ROW><ROW><id>12082914</id><snippet>&gt;&gt;&gt; parseTags("tHiS iS a tAg, \t\n!&amp;#^ , secondcomment , no!punc$$, ifNOSPACESthenPRESERVEcaps")
['thisIsATag', 'secondcomment', 'noPunc', 'ifNOSPACESthenPRESERVEcaps']
</snippet></ROW><ROW><id>12082914</id><snippet>str.split()</snippet></ROW><ROW><id>12082914</id><snippet>sanitizeTags</snippet></ROW><ROW><id>12082914</id><snippet>a b c</snippet></ROW><ROW><id>12082914</id><snippet>['a','b','c']</snippet></ROW><ROW><id>12082914</id><snippet>str.split(' ')</snippet></ROW><ROW><id>12082914</id><snippet>['','a','b','c','']</snippet></ROW><ROW><id>12082914</id><snippet>tAG$</snippet></ROW><ROW><id>12082914</id><snippet>$</snippet></ROW><ROW><id>12082914</id><snippet>tAG</snippet></ROW><ROW><id>12082914</id><snippet>tag</snippet></ROW><ROW><id>12082914</id><snippet>words = re.split(r'\s+', str)</snippet></ROW><ROW><id>12082914</id><snippet>parseTags</snippet></ROW><ROW><id>12082914</id><snippet>rawTags = re.split(r'\s*,\s*', str)</snippet></ROW><ROW><id>12082914</id><snippet>'a , b , c'.split(',') becomes ['a ', ' b ', ' c']</snippet></ROW><ROW><id>12082914</id><snippet>r'\s*,\s*'</snippet></ROW><ROW><id>12082914</id><snippet>str = ''.join(c if c.isalnum() else ' ' for c in str)</snippet></ROW><ROW><id>12082914</id><snippet>str = re.sub(r'[^A-Za-z0-9]', ' ', str)
</snippet></ROW><ROW><id>12082914</id><snippet>[^...]</snippet></ROW><ROW><id>12082914</id><snippet>str = re.sub(r'\W', ' ', str, flags=re.UNICODE)
</snippet></ROW><ROW><id>12082914</id><snippet>\W</snippet></ROW><ROW><id>12082914</id><snippet>flags=re.UNICODE</snippet></ROW><ROW><id>12082914</id><snippet>r'(?u)\W'</snippet></ROW><ROW><id>12082914</id><snippet>|_</snippet></ROW><ROW><id>12082914</id><snippet>str = re.sub(r'\W|_', ' ', str, flags=re.UNICODE)
</snippet></ROW><ROW><id>12082914</id><snippet>def parseTags(str):
    return filter(None, map(sanitizeTag, str.split(',')))

def sanitizeTag(str):
    words    = ''.join(c if c.isalnum() else ' ' for c in str).split()
    numWords = len(words)
    if numWords == 0:
        return None
    elif numWords == 1:
        return words[0]
    else:
        return words[0].lower() + ''.join(w.capitalize() for w in words[1:])
</snippet></ROW><ROW><id>12082914</id><snippet>def parseTags(str):
    return filter(None, map(sanitizeTag, str.split(',')))

def sanitizeTag(str):
    words    = filter(lambda c: c.isalnum() or c.isspace(), str).split()
    numWords = len(words)
    if numWords == 0:
        return None
    elif numWords == 1:
        return words[0]
    else:
        words0 = words[0].lower() if words[0][0].islower() else words[0].capitalize()
        return words0 + ''.join(w.capitalize() for w in words[1:])
</snippet></ROW><ROW><id>12082914</id><snippet>&gt;&gt;&gt; parseTags("tHiS iS a tAg, AnD tHIs, \t\n!&amp;#^ , se@%condcomment$ , No!pUnc$$, ifNOSPACESthenPRESERVEcaps")
['thisIsATag', 'AndThis', 'secondcomment', 'NopUnc', 'ifNOSPACESthenPRESERVEcaps']
</snippet></ROW><ROW><id>12082984</id><snippet>a = [1,2]
a_rev = a[::-1]  #new list -- if you just want an iterator, reversed(a) also works.
</snippet></ROW><ROW><id>12082984</id><snippet>a</snippet></ROW><ROW><id>12082984</id><snippet>a_rev</snippet></ROW><ROW><id>12082984</id><snippet>all( abs(x) == abs(y) for x,y in zip(a,a_rev) )
</snippet></ROW><ROW><id>12082984</id><snippet>all( abs(x) == abs(y) for x,y in zip(a,reversed(a)) )
</snippet></ROW><ROW><id>12082984</id><snippet>your_list_of_lists.sort(key = lambda x : map(abs,x) )
</snippet></ROW><ROW><id>12082984</id><snippet>def cmp_list(x,y):
    return True if x == y else all( abs(a) == abs(b) for a,b in zip(a,b) )

duplicate_idx = [ idx for idx,val in enumerate(your_list_of_lists[1:]) 
                  if cmp_list(val,your_list_of_lists[idx])  ]

#now remove duplicates:
for idx in reversed(duplicate_idx):
    _ = your_list_of_lists.pop(idx)
</snippet></ROW><ROW><id>12082984</id><snippet>lists = list(set( tuple(sorted(x)) for x in your_list_of_lists ) ) 
</snippet></ROW><ROW><id>12083038</id><snippet>re.sub(pattern, replace, text, flags=re.MULTILINE) 
</snippet></ROW><ROW><id>12083038</id><snippet>re.sub(pattern, replace, text, re.MULTILINE) 
</snippet></ROW><ROW><id>12083038</id><snippet>re.sub(pattern, replace, text, count=re.MULTILINE)
</snippet></ROW><ROW><id>12083258</id><snippet>sudo apt-get install python-setuptools
</snippet></ROW><ROW><id>12083258</id><snippet>sudo aptitude install python-setuptools
</snippet></ROW><ROW><id>12083258</id><snippet>sudo easy_install &lt;module&gt;
</snippet></ROW><ROW><id>12083258</id><snippet>sudo easy_install BeautifulSoup
</snippet></ROW><ROW><id>12083328</id><snippet>repr</snippet></ROW><ROW><id>12083328</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; urllib2.urlopen('http://www.google.com')
&lt;addinfourl at 18362520 whose fp = &lt;socket._fileobject object at 0x106b250&gt;&gt;
&gt;&gt;&gt; 
&gt;&gt;&gt; f = urllib2.urlopen('http://www.google.com')
&gt;&gt;&gt; f
&lt;addinfourl at 18635448 whose fp = &lt;socket._fileobject object at 0x106b950&gt;&gt;
</snippet></ROW><ROW><id>12083328</id><snippet>read()</snippet></ROW><ROW><id>12083328</id><snippet>&gt;&gt;&gt; data = f.read()
&gt;&gt;&gt; data[:50]
'&lt;!doctype html&gt;&lt;html itemscope="itemscope" itemtyp'
</snippet></ROW><ROW><id>12083328</id><snippet>&gt;&gt;&gt; print f.headers
Date: Thu, 23 Aug 2012 00:46:22 GMT
Expires: -1
Cache-Control: private, max-age=0
... etc ...
</snippet></ROW><ROW><id>12083635</id><snippet>O_EXLOCK</snippet></ROW><ROW><id>12083635</id><snippet>fcntl</snippet></ROW><ROW><id>12083719</id><snippet>PATH</snippet></ROW><ROW><id>12083719</id><snippet>~/.profile</snippet></ROW><ROW><id>12083719</id><snippet>export PATH=/opt/local/bin:/opt/local/sbin:$PATH</snippet></ROW><ROW><id>12083802</id><snippet>foo</snippet></ROW><ROW><id>12083802</id><snippet>from ctypes import *
from itertools import takewhile

lib = CDLL("foo")
lib.foo.restype = POINTER(c_wchar_p)
lib.foo.argtypes = [c_char_p]

ret = lib.foo('a.bcd.ef')

# Iterate until None is found (equivalent to C NULL)
for s in takewhile(lambda x: x is not None,ret):
    print s
</snippet></ROW><ROW><id>12083802</id><snippet>#include &lt;stdlib.h&gt;

__declspec(dllexport) wchar_t** foo(const char *x)
{
    static wchar_t* y[] = {L"ABC",L"DEF",L"GHI",NULL};
    return &amp;y[0];
}
</snippet></ROW><ROW><id>12083802</id><snippet>ABC
DEF
GHI
</snippet></ROW><ROW><id>12083835</id><snippet>db.commit()
</snippet></ROW><ROW><id>12083843</id><snippet>player0.append(player1[range(warcard1 + 1)] 
                                           ^
</snippet></ROW><ROW><id>12083843</id><snippet>)</snippet></ROW><ROW><id>12083843</id><snippet>       if warcardvalue0 &gt; warcardvalue1:
            player0.append(player0[range(warcard0 + 1)]
            player0.append(player1[range(warcard1 + 1)] 
            player0.remove(player0[range(warcard0 + 1)]
            player1.remove(player1[range(warcard1 + 1)] 

        elif warcardvalue0 &lt; warcardvalue1:
            player1.append(player1[range(warcard1 + 1)]
            player1.append(player0[range(warcard0 + 1)] 
            player1.remove(player1[range(warcard1 + 1)]
            player0.remove(player0[range(warcard0 + 1)] 
</snippet></ROW><ROW><id>12083963</id><snippet>DailyVital.objects.all()</snippet></ROW><ROW><id>12083963</id><snippet>DailyVital.objects.filter(user=request.user)</snippet></ROW><ROW><id>12083963</id><snippet>QuerySet</snippet></ROW><ROW><id>12083963</id><snippet>values_list</snippet></ROW><ROW><id>12083963</id><snippet>def download(request):
    response = HttpResponse(mimetype='text/csv')
    response['Content-Disposition'] = 'attachment; filename=UserData.csv'
    writer = csv.writer(response)
    writer.writerow(['Date', 'HighBGL', 'LowBGL', 'Weight', 'Height'])
    query = DailyVital.objects.filter(user=request.user)
    for row in query.values_list('entered_at', 'high_BGL', 'low_BGL', 'weight', 'height'):
       writer.writerow(row)
    return response
</snippet></ROW><ROW><id>12083963</id><snippet>sqlite3</snippet></ROW><ROW><id>12083963</id><snippet>-csv</snippet></ROW><ROW><id>12084263</id><snippet>def __init__(self, *args, **kwargs):
     #load the file here
     super(DmozSpider, self).__init__()         
     for url in some_file:
         self.start_urls.append[url]
</snippet></ROW><ROW><id>12084263</id><snippet>    # -*- coding: utf-8 -*-
#Por: Daniel Ortiz Costa, Ivo Andres Astudillo, Ruben Quezada
#Proyecto de Academias Web - Extraer publicaciones de Scopus

from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
import datetime
import MySQLdb

class DmozSpider(BaseSpider):
    name = "scrapyscopus"

    start_urls = ["http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&amp;scp=84858710280",]

    #id de la url actual
    id_paper_web = ""

    #Variables de la base de datos
    abstracto = ""
    keywords = ""
    anio_publicacion = ""
    tipo_documento = ""
    tipo_publicacion = ""    
    descripcion = ""
    volume_info = ""
    idioma = ""
    fecha_consulta = ""
    nombres = {}
    instituciones = {}

    #La probabilidad de que el articulo sea de alguien que buscamos
    probabilidad = 0

    def __init__(self, *args, **kwargs):
        super(DmozSpider, self).__init__()

        #load file here
        for url in some_file:
            self.start_urls.append[url]


    def parse(self, response):

        #Recibe el codigo de la pagina en la response
        hxs = HtmlXPathSelector(response)

        self.obtenerId(response.url)

        #La probabilidad de exito consta de 3 factores
        #1 - Probabilidad del 25% por pertenecer al pais
        #2 - Probabilidad del 25% por tener la misma inicial y apellido
        #3 - Probabilidad del 35% porque el articulo tenga a alguien de la universidad
        #4 - Probabilidad del 15% si es que todos los del articulo son de la universidad

        #Las dos primeras condiciones ya se cumplieron, por lo que se suma 50%
        #la otra se determinará leyendo las instituciones dentro del código 
        self.probabilidad = self.probabilidad+50;

        #ABSTRACTO
        #Se extrae el abstracto que es el parrafo que contiene un valor align=justify
        lista =  hxs.select('//p[contains(@align, "justify")]/text()')  

        #Se saca el texto
        self.abstracto = lista[0].extract()

        #KEYWORDS
        #Se encuentran en el ultimo resultado de la lista de parrafos con clase marginB3
        lista =  hxs.select('//p[@class="marginB3"]/text()')          

        #Se saca el texto del ultimo resultado
        self.keywords = lista[len(lista)-1].extract()

        #TIPO DE PUB, TIPO DE DOC E IDIOMA
        #Se encuentran todos con la clase paddingR15
        lista =  hxs.select('//span[@class="paddingR15"]')

        #Se analiza cada uno de los span recibidos en busca del correcto
        for i in lista:

            #Se analiza el strong que retiene la descripcion de lo que vemos
            #Para sacar el lenguaje por ejemplo, debemos buscar la linea "Original Language"
            #Luego de ello proceder a extraer el texto del span padre

            if (str(i.select('.//strong/text()').extract()[0]) == "Source Type: "):
                self.tipo_publicacion=i.select('text()').extract()[0]; 

            if (str(i.select('.//strong/text()').extract()[0]) == "Original language: "):
                self.idioma=i.select('text()').extract()[1];

            if (str(i.select('.//strong/text()').extract()[0]) == "Document Type: "):
                self.tipo_documento=i.select('text()').extract()[0]; 

        #FECHA DE CONSULTA
        #Para la fecha de consulta se obtiene la fecha actual
        self.fecha_consulta = datetime.datetime.now().strftime("%Y-%m-%d")


        #DESCRIPCION
        #La descripcion se encuentra formada por la zona del encabezado
        #Se extrae primeramente el titulo, que es un h2 de clase sourceTitle
        lista =  hxs.select('//h2[@class="sourceTitle"]/text()') 

        #Luego se la agrega a la cadena de descripcion
        self.descripcion=self.descripcion+str(lista[0].extract())+"\n";

        #Se obtiene la informacion del volumen que tambien pertenece a la descripcion
        lista =  hxs.select('//div[@class="volumeInfo"]/text()')             

        #Se la extrae
        self.volume_info=str(lista[0].extract())

        #Se la agrega a la cadena de la descripcion
        self.descripcion=self.descripcion+self.volume_info

        #Se debe extraer el anio de publicacion desde la informacion de volumeen
        #Para ello se llama al metodo respectivo que se encarga de la extraccion
        self.obtenerAnioPublicacion()


        #AUTORES
        #Se determina el parrafo donde se encuentran los nombres de los autores
        lista =  hxs.select('//p[@class="smallLink authorlink svDoNotLink paddingB5"]')

        #Se seleccionan  los span directos de ese parrafo
        lista = lista.select('span')

        for elemento in lista:

            lista2 = elemento.select('.//sup')

            for i in lista2:
                self.nombres[elemento.select('.//span[@class="previewTxt"]/text()').extract()[0]]=i.select('text()').extract()[0]
                break;


        #DIRECCIONES
        #Se determina el parrafo donde se encuentran los nombres de los autores
        lista =  hxs.select('//p[@class="affilTxt"]')

        #Se determina una nueva lista con los sup y su texto
        lista2 = lista.select('.//sup/text()')

        #Se la lista siguiente mostrará los datos procesados
        letras=[]

        #Obtendrá la letra de cada publicación
        for i in lista2:
            letra = str(i.extract()[0])
            letras.append(letra)

        #Se determina el parrafo donde se encuentran los nombres de los autores
        lista3 = lista.select('text()')

        institucion=[]

        contador=0;

        for i in lista3:

            if(i.extract()!="\n"):
                if "Loja" in i.extract():
                    contador=contador+1

                institucion.append(i.extract())

        if contador&gt;=1:
            if contador==1:
                self.probabilidad=self.probabilidad+35
            else:
                if contador==len(institucion):
                    self.probabilidad=self.probabilidad+15

        self.instituciones=dict(zip(letras, institucion))

        self.guardarDatos()

    """
    Metodo responsable de obtener el 
    anio de publicacion del articulo.
    """
    def obtenerAnioPublicacion(self):

        #Divide el volumen de acuerdo a la , que posee
        componentes=self.volume_info.split(', ')      

        #Dependiendo del tipo de publicacion, la posicion del anio variara
        if(self.tipo_publicacion == "Journal"):            
            self.anio_publicacion=componentes[2]

        else:
            self.anio_publicacion=componentes[0]



    """
    Metodo de obtener el id de la url actual
    """
    def obtenerId(self, url):   

        db = MySQLdb.connect("localhost","root","","proyectoacademias" )

        cursor = db.cursor()

        sql = "SELECT id FROM test WHERE url like \'"
        sql = sql + url
        sql = sql + "\'"

        cursor.execute(sql)

        data = cursor.fetchone()

        for row in data:
            print str(row)
            self.id_paper_web=str(row)

        db.close()



    """
    Metodo de guardar los datos

    """
    def guardarDatos(self):
        db = MySQLdb.connect("localhost","root","","proyectoacademias" )

        cursor = db.cursor()

        sql = "UPDATE test SET abstract=\'"+str(self.abstracto)+"\', fecha_consulta=\'"+str(self.fecha_consulta)+"\', anio_publicacion=\'"+str(self.anio_publicacion)+"\', probabilidad="+str(self.probabilidad)+" WHERE id = "+str(self.id_paper_web)

        print "\n\n\n"+sql+"\n\n\n"
        cursor.execute(sql)      
        db.commit()

        for i in range (len(self.nombres)):
            sql = "INSERT INTO test_autores VALUES (\'"+self.nombres.keys()[i]+"\', "+str(self.id_paper_web)+", \'"+self.instituciones[self.nombres[self.nombres.keys()[i]]]+"\', "+str((i+1))+")"
            print "\n\n\n"+sql+"\n\n\n"
            cursor.execute(sql)
            db.commit()

        db.close()
</snippet></ROW><ROW><id>12084351</id><snippet>warcardvalue0 = order.index(warcard0)
warcardvalue1 = order.index(warcard1)
</snippet></ROW><ROW><id>12084351</id><snippet>warcardvalue0 = order.index(player0[warcard0])
warcardvalue1 = order.index(player1[warcard1])
</snippet></ROW><ROW><id>12084351</id><snippet>        elif len(player1) &lt; 4:
            warcard1 = len(player1)-1
</snippet></ROW><ROW><id>12084351</id><snippet>        elif len(player1) &lt; 4:
            warcard1 = len(player1)
</snippet></ROW><ROW><id>12084351</id><snippet>        if len(player0) &gt;= warcard0 + 4:
            warcard0 = warcard0+3
        elif len(player0) &lt; warcard0 + 4:
            warcard0 = len(player0)-1
</snippet></ROW><ROW><id>12084351</id><snippet>            player1.append(player1[0:warcard1+1])
</snippet></ROW><ROW><id>12084423</id><snippet>operatorPrecedence</snippet></ROW><ROW><id>12084423</id><snippet>and_tok = pyp.Keyword("and")
or_tok = pyp.Keyword("or")
Word = ~(and_tok | or_tok) + pyp.Word(pyp.alphas)("Word")
</snippet></ROW><ROW><id>12084423</id><snippet>pyp.OneOrMore(Word)</snippet></ROW><ROW><id>12084423</id><snippet>^ Word</snippet></ROW><ROW><id>12084423</id><snippet>Phrase</snippet></ROW><ROW><id>12084423</id><snippet>Expression</snippet></ROW><ROW><id>12084423</id><snippet>Expression = (
    pyp.operatorPrecedence(pyp.OneOrMore(Word), [
        (and_tok, 2, pyp.opAssoc.LEFT),
        (or_tok, 2, pyp.opAssoc.LEFT)
    ])
)
</snippet></ROW><ROW><id>12084423</id><snippet>&gt;&gt;&gt; test("Hello and Bob")

&lt;ITEM&gt;
  &lt;ITEM&gt;
    &lt;Word&gt;Hello&lt;/Word&gt;
    &lt;AND&gt;and&lt;/AND&gt;
    &lt;Word&gt;Bob&lt;/Word&gt;
  &lt;/ITEM&gt;
&lt;/ITEM&gt;

&gt;&gt;&gt; test("TestA and TestB and TestC or TestD")

&lt;ITEM&gt;
  &lt;ITEM&gt;
    &lt;ITEM&gt;
      &lt;Word&gt;TestA&lt;/Word&gt;
      &lt;AND&gt;and&lt;/AND&gt;
      &lt;Word&gt;TestB&lt;/Word&gt;
      &lt;AND&gt;and&lt;/AND&gt;
      &lt;Word&gt;TestC&lt;/Word&gt;
    &lt;/ITEM&gt;
    &lt;OR&gt;or&lt;/OR&gt;
    &lt;Word&gt;TestD&lt;/Word&gt;
  &lt;/ITEM&gt;
&lt;/ITEM&gt;
</snippet></ROW><ROW><id>12084423</id><snippet>parseAction</snippet></ROW><ROW><id>12084423</id><snippet>test("TestA and TestB and TestC or TestD")</snippet></ROW><ROW><id>12084423</id><snippet>(TestA and TestB and TestC) or TestD</snippet></ROW><ROW><id>12084423</id><snippet>(TestC or TestD)</snippet></ROW><ROW><id>12084686</id><snippet>self</snippet></ROW><ROW><id>12084686</id><snippet>Newpost.get</snippet></ROW><ROW><id>12084686</id><snippet>RequestHandler</snippet></ROW><ROW><id>12084686</id><snippet>Blog</snippet></ROW><ROW><id>12084686</id><snippet>class db_blog(db.Model):

    post_subject = db.StringProperty(required = True)
    post_content = db.TextProperty(required = True)
    post_created = db.DateTimeProperty(auto_now_add = True)
    post_last_modified = db.DateTimeProperty(auto_now_add = True)

    @property
    def escaped_content(self):
        # possibly want to escape HTML in your post_content first
        return self.post_content.replace("\n", "&lt;br /&gt;")
</snippet></ROW><ROW><id>12084686</id><snippet>query_select</snippet></ROW><ROW><id>12084686</id><snippet>{% for post in query_select %}
{{ post.escaped_content | safe }}
{% endfor %}
</snippet></ROW><ROW><id>12084686</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>12084686</id><snippet>{% for post in query_select %}</snippet></ROW><ROW><id>12084686</id><snippet>db_blog</snippet></ROW><ROW><id>12084686</id><snippet>post.escaped_content</snippet></ROW><ROW><id>12084686</id><snippet>escaped_content</snippet></ROW><ROW><id>12084686</id><snippet>{{ post.escaped_content | safe }}</snippet></ROW><ROW><id>12084686</id><snippet>safe</snippet></ROW><ROW><id>12084686</id><snippet>safe</snippet></ROW><ROW><id>12084686</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>12084686</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>12084686</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>12084686</id><snippet>{% endfor %}</snippet></ROW><ROW><id>12084728</id><snippet>[text]</snippet></ROW><ROW><id>12084728</id><snippet>for i in text:</snippet></ROW><ROW><id>12084728</id><snippet>i</snippet></ROW><ROW><id>12084728</id><snippet>list</snippet></ROW><ROW><id>12084728</id><snippet>list</snippet></ROW><ROW><id>12084728</id><snippet>print</snippet></ROW><ROW><id>12084728</id><snippet>code = dict(a='s', b='q', c='n', d='z', e='p', f='o', g='k', h='v', i='m', j='c',
            k='i', l='y', m='w', n='a', o='l', p='t', q='d', r='r', s='j', t='b',
            u='f', v='e', w='h', x='u', y='x', z='g')

# another way to define the dictionary (you don't need both)
alphabet      = "abcdefghijklmnopqrstuvwxyz"
codedalphabet = "sqnzpokvmciywaltdrjbfehuxg"
code          = dict(zip(alphabet, codedalphabet))

# add upper-case versions of all letters to dictionary
for letter, codedletter in code.iteritems():
    code[letter.upper()] = codedletter.upper()

for char in input("Enter your text: "):
    if char in code:
        print(code[char], end="")
    else:
        print(char, end="")    # not an alphabetic character, print as-is
print()                        # we haven't printed a line break; do so now
</snippet></ROW><ROW><id>12084728</id><snippet>for</snippet></ROW><ROW><id>12084915</id><snippet>    size = self.browser.mainFrame().contentsSize()
    if width &gt; 0:
        size.setWidth(width)
    self.browser.setViewportSize(size)

    # Render the virtual browsers viewport to an image.
    image = QImage(self.browser.viewportSize(), QImage.Format_ARGB32)
    paint = QPainter(image) #Have the painters target be our image object
    self.browser.mainFrame().render(paint) #Render browser window to painter
    paint.end()
    image = image.scaledToWidth(width) #ensure the image is your desired width
    extension = os.path.splitext(filename)[1][1:].upper()  #save the file as your desired image extension
    if extension not in self.image_extensions:
        raise ValueError("'filename' must be a valid extension: {0}".format(self.image_extensions))
    image.save(filename, extension)
</snippet></ROW><ROW><id>12085205</id><snippet>from scrapy.selector import HtmlXPathSelector
from scrapy.spider import BaseSpider
from bs4 import BeautifulSoup

class TestSpider(BaseSpider):
    name = "Test"

    start_urls = [
        "http://detail.zol.com.cn/series/268/10227_1.html"
                 ]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)

        #data = hxs.select("//div[@id='param-more']").extract()

        data = response.body
        soup = BeautifulSoup(data)
        print soup.find(id='param-more')
</snippet></ROW><ROW><id>12085205</id><snippet>from scrapy.selector import HtmlXPathSelector
from scrapy.spider import BaseSpider
from bs4 import BeautifulSoup
import chardet

class TestSpider(BaseSpider):
    name = "Test"

    start_urls = [
        "http://detail.zol.com.cn/series/268/10227_1.html"
                 ]

    def parse(self, response):

        encoding = chardet.detect(response.body)['encoding']
        if encoding != 'utf-8':
            response.body = response.body.decode(encoding, 'replace').encode('utf-8')

        hxs = HtmlXPathSelector(response)
        data = hxs.select("//div[@id='param-more']").extract()
        #print encoding
        print data
</snippet></ROW><ROW><id>12085205</id><snippet>@property
def encoding(self):
    return self._get_encoding(infer=True)

def _get_encoding(self, infer=False):
    enc = self._declared_encoding()
    if enc and not encoding_exists(enc):
        enc = None
    if not enc and infer:
        enc = self._body_inferred_encoding()
    if not enc:
        enc = self._DEFAULT_ENCODING
    return resolve_encoding(enc)

def _declared_encoding(self):
    return self._encoding or self._headers_encoding() \
        or self._body_declared_encoding()
</snippet></ROW><ROW><id>12085512</id><snippet>top</snippet></ROW><ROW><id>12085819</id><snippet>__getattr__</snippet></ROW><ROW><id>12085819</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __getattr__(self, attr):
...         return "Default"
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.someJunk
'Default'
</snippet></ROW><ROW><id>12085952</id><snippet>from django.db import models

import datetime
from django.utils import timezone

class Poll(models.Model):
    question = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')

    def __unicode__(self):
        return self.question

    def was_published_recently(self):
        return self.pub_date &gt;= timezone.now() - datetime.timedelta(days=1)


class Choice(models.Model):
    poll = models.ForeignKey(Poll)
    choice = models.CharField(max_length=200)
    votes = models.IntegerField()

    def __unicode__(self):
        return self.choice
</snippet></ROW><ROW><id>12085952</id><snippet>Poll.question</snippet></ROW><ROW><id>12085952</id><snippet>__unicode__</snippet></ROW><ROW><id>12086306</id><snippet>def display_path(path):
    return path.replace("\\", "/")
</snippet></ROW><ROW><id>12086306</id><snippet>str.join</snippet></ROW><ROW><id>12086306</id><snippet>os.path.join</snippet></ROW><ROW><id>12086306</id><snippet>str.join</snippet></ROW><ROW><id>12086306</id><snippet>os.path.join</snippet></ROW><ROW><id>12086306</id><snippet>*args</snippet></ROW><ROW><id>12086306</id><snippet>join = lambda *args: "/".join(args)
</snippet></ROW><ROW><id>12086306</id><snippet>join = lambda *args: os.path.join(*args).replace("\\", "/")
</snippet></ROW><ROW><id>12086306</id><snippet>if</snippet></ROW><ROW><id>12086306</id><snippet>display_path</snippet></ROW><ROW><id>12086306</id><snippet>join</snippet></ROW><ROW><id>12086747</id><snippet>User.objects.create()</snippet></ROW><ROW><id>12086747</id><snippet>User.objects.create_user()</snippet></ROW><ROW><id>12086988</id><snippet>allowedlist</snippet></ROW><ROW><id>12086988</id><snippet>set</snippet></ROW><ROW><id>12086988</id><snippet>min(allowedList, key=sortedList.index)
</snippet></ROW><ROW><id>12086988</id><snippet>min</snippet></ROW><ROW><id>12086988</id><snippet>np.min</snippet></ROW><ROW><id>12087456</id><snippet>for i in xrange(1, N+1): # N is number of arrays
    arr = globals()['Level%i' % i] # this gets the Level&lt;X&gt; value for each i
    arr.dtype = [('AP%02i' % i,float), ('BP%02i' % i, float), ('AS%02i' % i, float), ('BS%02i' % i, float)]
# example
print Level1[0]['AP01']
</snippet></ROW><ROW><id>12087458</id><snippet>columna</snippet></ROW><ROW><id>12087458</id><snippet>archivo.write(columna[0])
</snippet></ROW><ROW><id>12087727</id><snippet>#!/usr/bin/env python

import os

def searchthis(location, searchterm):
   for dir_path, dirs, file_names in os.walk(location):
      for file_name in file_names:
         fullpath = os.path.join(dir_path, file_name)
         for line in file(fullpath):
            if searchterm in line:
                print line

searchthis(os.getcwd(), "mystring")
</snippet></ROW><ROW><id>12087750</id><snippet>autofunction</snippet></ROW><ROW><id>12087750</id><snippet>True</snippet></ROW><ROW><id>12087750</id><snippet>def myfunc(val=foobar):
    '''myfunc(val=foobar)

    Blah blah blah'''
    pass
</snippet></ROW><ROW><id>12087750</id><snippet>.. function:: my_module.myfunc(val=foobar) 
</snippet></ROW><ROW><id>12087777</id><snippet>.text()</snippet></ROW><ROW><id>12087777</id><snippet>.item(index)</snippet></ROW><ROW><id>12087777</id><snippet>items = []
for index in xrange(self.ui.QListWidget.count()):
     items.append(self.ui.QListWidget.item(index))
labels = [i.text() for i in items]
</snippet></ROW><ROW><id>12087864</id><snippet>string_list = ["first", "second", "", "fourth"]</snippet></ROW><ROW><id>12087864</id><snippet>string_list[2] = "third"</snippet></ROW><ROW><id>12087864</id><snippet>string_list = ["first", "second", "third", "fourth"]</snippet></ROW><ROW><id>12087864</id><snippet>string_list[string_list.index("")] = "replacement string"

print string_list
&gt;&gt;&gt; ["first", "second", "replacement string", "fourth"]
</snippet></ROW><ROW><id>12087992</id><snippet>from operator import attrgetter
from collections import namedtuple

Person = namedtuple('Person', 'name age score')
seq = [Person(name = 'nick', age = 23, score = 100),
        Person(name = 'bob', age = 25, score = 200)]


# sort list by name
print(sorted(seq, key=attrgetter('name')))
# sort list by age
print(sorted(seq, key=attrgetter('age')))
</snippet></ROW><ROW><id>12088022</id><snippet>SessionManager</snippet></ROW><ROW><id>12088022</id><snippet>DhcpServer</snippet></ROW><ROW><id>12088143</id><snippet>subprocess</snippet></ROW><ROW><id>12088143</id><snippet>path = os.path.join(destination, filename)
</snippet></ROW><ROW><id>12088630</id><snippet>y = [value for value in line.split()]
</snippet></ROW><ROW><id>12088630</id><snippet>y = line.split()
</snippet></ROW><ROW><id>12088630</id><snippet>y = line.strip().split(",")
</snippet></ROW><ROW><id>12089483</id><snippet>$ python code.pyc
</snippet></ROW><ROW><id>12089483</id><snippet>python -m compileall ./
</snippet></ROW><ROW><id>12089716</id><snippet>from gevent import monkey
monkey.patch_all(thread=False)
</snippet></ROW><ROW><id>12089716</id><snippet>threading.active_count()</snippet></ROW><ROW><id>12090070</id><snippet>dict</snippet></ROW><ROW><id>12090070</id><snippet>dict</snippet></ROW><ROW><id>12090070</id><snippet>{
  '/': {
    'bin': {}, 
    'sbin': {}, 
    'home': {
      'user1': {},
      'user2': {
        'desktop': {}
      }
  }
}
</snippet></ROW><ROW><id>12090070</id><snippet>mydict = {}
mydict['name'] = 1
mydict['name'] # is 1
mydict['name'] = 2

for x,y in mydict.iteritems():
  print '{0}: {1}'.format(x,y)
&gt;&gt; name: 2 # Note only one entry
</snippet></ROW><ROW><id>12090218</id><snippet>var results = {{ myposts|safe }};
</snippet></ROW><ROW><id>12090875</id><snippet> common_elements = list(set(list1).intersection(list2).intersection(list3))
</snippet></ROW><ROW><id>12090875</id><snippet> common_elements = list( set(list1) &amp; set(list2) &amp; set(list3) )
</snippet></ROW><ROW><id>12090875</id><snippet>&amp;</snippet></ROW><ROW><id>12090875</id><snippet>intersection</snippet></ROW><ROW><id>12090875</id><snippet> common_elements = list( set.intersection( * map(set, your_list_of_lists) ) )
</snippet></ROW><ROW><id>12090875</id><snippet> common_elements = set(your_list_of_lists[0])
 for elem in your_list_of_lists[1:]:
     common_elements = common_elements.intersection(elem)  #or common_elements &amp;= set(elem) ...
 else:
     common_elements = list(common_elements)
</snippet></ROW><ROW><id>12090875</id><snippet>common_elements.sort( key = lambda x, your_list_of_lists[0].index(x) )
</snippet></ROW><ROW><id>12090875</id><snippet>ValueError</snippet></ROW><ROW><id>12091024</id><snippet># Returns value of is_user_like key from user's session if it's available, or False
request.session.get('is_user_like', False)
# Sets value of is_user_like in user's session to True
request.session['is_user_like'] = True
</snippet></ROW><ROW><id>12091024</id><snippet>&lt;a href="/like/"&gt;
    &lt;button class="like pull-right btn btn-info text-left pad0  btn-mini mrg-left5 like-food"&gt;
        &lt;i class="{% if user_likes %}icon-thumbs-down{% else %}icon-thumbs-up{% endif %}"&gt;&lt;/i&gt; `{{rest.food_likes}}`
    &lt;/button&gt;
&lt;/a&gt;
</snippet></ROW><ROW><id>12091024</id><snippet>user_likes = request.session.get('is_user_like', False)</snippet></ROW><ROW><id>12091024</id><snippet>def like(request):
    if request.is_ajax:
        r = Restaurant.objects.get(pk=1)
        r.food_likes +=1
        r.save()
        request.session['is_user_like'] = True
        return HttpResponse(str(r.food_likes))
    else:
        return redirect(request.META.get('HTTP_REFERER'))
</snippet></ROW><ROW><id>12091292</id><snippet>errors = [('message', [u'Content is empty'])]
</snippet></ROW><ROW><id>12091292</id><snippet>d = dict(errors)
</snippet></ROW><ROW><id>12091292</id><snippet>d</snippet></ROW><ROW><id>12091292</id><snippet>{'message': [u'Content is empty']}</snippet></ROW><ROW><id>12091292</id><snippet>d['message']
</snippet></ROW><ROW><id>12091292</id><snippet>[u'Content is empty']</snippet></ROW><ROW><id>12091292</id><snippet>d['message'][0]
</snippet></ROW><ROW><id>12091292</id><snippet>u'Content is empty'</snippet></ROW><ROW><id>12091358</id><snippet>os.path.dirname</snippet></ROW><ROW><id>12091358</id><snippet>os.path.join</snippet></ROW><ROW><id>12091358</id><snippet>os.path</snippet></ROW><ROW><id>12091490</id><snippet> shell_exec('/usr/bin/python mail.py &amp;');
</snippet></ROW><ROW><id>12091553</id><snippet>import numpy.lib.recfunctions
</snippet></ROW><ROW><id>12091553</id><snippet>numpy.lib.recfunctions.stack_arrays((a,b), autoconvert=True, usemask=False)
</snippet></ROW><ROW><id>12091553</id><snippet>usemask=False</snippet></ROW><ROW><id>12091553</id><snippet>autoconvert=True</snippet></ROW><ROW><id>12091553</id><snippet>a</snippet></ROW><ROW><id>12091553</id><snippet>dtype</snippet></ROW><ROW><id>12091553</id><snippet>"|S3"</snippet></ROW><ROW><id>12091553</id><snippet>"|S5"</snippet></ROW><ROW><id>12091566</id><snippet>matchObj = re.search("^(?!OK|\\.).*", item)
</snippet></ROW><ROW><id>12091566</id><snippet>.*</snippet></ROW><ROW><id>12091832</id><snippet>column1 = ["soft","pregnant","tall"]
column2 = ["skin","woman", "man"]

for c1, c2 in zip(column1, column2):
    print "%-9s %s" % (c1, c2)
</snippet></ROW><ROW><id>12091832</id><snippet>str.ljust</snippet></ROW><ROW><id>12091832</id><snippet>padding = 9
for c1, c2 in zip(column1, column2):
    print "%s %s" % (c1.ljust(padding), c2)
</snippet></ROW><ROW><id>12091832</id><snippet>9</snippet></ROW><ROW><id>12091832</id><snippet>10</snippet></ROW><ROW><id>12092094</id><snippet>cache</snippet></ROW><ROW><id>12092094</id><snippet>nonlocal</snippet></ROW><ROW><id>12092094</id><snippet>def f():
    v = 0

    def x():
        return v    #works because v is read from the outer scope

    def y():
        if v == 0:  #fails because the variable v is assigned to below
            v = 1

    #for python3:
    def z():
        nonlocal v  #tell python to search for v in the surrounding scope(s)
        if v == 0:
            v = 1   #works because you declared the variable as nonlocal
</snippet></ROW><ROW><id>12092094</id><snippet>global</snippet></ROW><ROW><id>12092094</id><snippet>function</snippet></ROW><ROW><id>12092094</id><snippet>global</snippet></ROW><ROW><id>12092094</id><snippet>nonlocal</snippet></ROW><ROW><id>12092388</id><snippet>pandas</snippet></ROW><ROW><id>12092388</id><snippet>np.histogram</snippet></ROW><ROW><id>12092388</id><snippet>min_dif</snippet></ROW><ROW><id>12092388</id><snippet>&gt;&gt;&gt; bins = np.arange(t[0], t[-1]+min_dif, min_dif) - 1e-12
</snippet></ROW><ROW><id>12092388</id><snippet>t[-1]+min_dif</snippet></ROW><ROW><id>12092388</id><snippet>-1e-12</snippet></ROW><ROW><id>12092388</id><snippet>4.0</snippet></ROW><ROW><id>12092388</id><snippet>&gt;&gt;&gt; (counts, _) = np.histogram(t, bins)
&gt;&gt;&gt; counts
array([4, 1, 1, 0, 3])
&gt;&gt;&gt; counts.cumsum()
array([4, 5, 6, 6, 9])
</snippet></ROW><ROW><id>12092388</id><snippet>v[0:4]</snippet></ROW><ROW><id>12092388</id><snippet>v[4:5]</snippet></ROW><ROW><id>12092564</id><snippet>f = open('/tmp/output', 'wb')
</snippet></ROW><ROW><id>12092591</id><snippet>$in</snippet></ROW><ROW><id>12093017</id><snippet>IN_MOVE_SELF</snippet></ROW><ROW><id>12093070</id><snippet>start_hand</snippet></ROW><ROW><id>12093070</id><snippet>deck</snippet></ROW><ROW><id>12093070</id><snippet>print "dhand = %r" % self.deck.start_hand.hand_a
</snippet></ROW><ROW><id>12093506</id><snippet>QTableView</snippet></ROW><ROW><id>12093506</id><snippet>QAbstractTableModel</snippet></ROW><ROW><id>12093506</id><snippet>QAbstractTableModel</snippet></ROW><ROW><id>12093506</id><snippet>headerData</snippet></ROW><ROW><id>12093506</id><snippet>data</snippet></ROW><ROW><id>12093506</id><snippet>view.setModel(model)</snippet></ROW><ROW><id>12093845</id><snippet>def mydef(a, b, **kwargs):</snippet></ROW><ROW><id>12093945</id><snippet>global RAWR</snippet></ROW><ROW><id>12093945</id><snippet>RAWR</snippet></ROW><ROW><id>12093994</id><snippet>/</snippet></ROW><ROW><id>12093994</id><snippet>.</snippet></ROW><ROW><id>12093994</id><snippet>.lock</snippet></ROW><ROW><id>12093994</id><snippet># must not contain /.
(?!.*/\.)
# must not end with .lock
(?&lt;!\.lock)$
</snippet></ROW><ROW><id>12093994</id><snippet>/</snippet></ROW><ROW><id>12093994</id><snippet>--allow-onelevel</snippet></ROW><ROW><id>12093994</id><snippet>.+/.+  # may get more precise later
</snippet></ROW><ROW><id>12093994</id><snippet>..</snippet></ROW><ROW><id>12093994</id><snippet>(?!.*\.\.)
</snippet></ROW><ROW><id>12093994</id><snippet>\040</snippet></ROW><ROW><id>12093994</id><snippet>\177 DEL</snippet></ROW><ROW><id>12093994</id><snippet>~</snippet></ROW><ROW><id>12093994</id><snippet>^</snippet></ROW><ROW><id>12093994</id><snippet>:</snippet></ROW><ROW><id>12093994</id><snippet>[^\040\177 ~^:]+   # pattern for allowed characters
</snippet></ROW><ROW><id>12093994</id><snippet>?</snippet></ROW><ROW><id>12093994</id><snippet>*</snippet></ROW><ROW><id>12093994</id><snippet>[</snippet></ROW><ROW><id>12093994</id><snippet>--refspec-pattern</snippet></ROW><ROW><id>12093994</id><snippet>[^\040\177 ~^:?*[]+   # new pattern for allowed characters
</snippet></ROW><ROW><id>12093994</id><snippet>/</snippet></ROW><ROW><id>12093994</id><snippet>--normalize</snippet></ROW><ROW><id>12093994</id><snippet>^(?!/)
(?&lt;!/)$
(?!.*//)
</snippet></ROW><ROW><id>12093994</id><snippet>.</snippet></ROW><ROW><id>12093994</id><snippet>(?&lt;!\.)$
</snippet></ROW><ROW><id>12093994</id><snippet>@{</snippet></ROW><ROW><id>12093994</id><snippet>(?!.*@\{)
</snippet></ROW><ROW><id>12093994</id><snippet>\</snippet></ROW><ROW><id>12093994</id><snippet>(?!.*\\)
</snippet></ROW><ROW><id>12093994</id><snippet>^(?!.*/\.)(?!.*\.\.)(?!/)(?!.*//)(?!.*@\{)(?!.*\\)[^\040\177 ~^:?*[]+/[^\040\177 ~^:?*[]+(?&lt;!\.lock)(?&lt;!/)(?&lt;!\.)$
</snippet></ROW><ROW><id>12093994</id><snippet>build-</snippet></ROW><ROW><id>12093994</id><snippet>^(?!build-)(?!.*/\.)(?!.*\.\.)(?!/)(?!.*//)(?!.*@\{)(?!.*\\)[^\040\177 ~^:?*[]+/[^\040\177 ~^:?*[]+(?&lt;!\.lock)(?&lt;!/)(?&lt;!\.)$
</snippet></ROW><ROW><id>12093994</id><snippet>^(?!build-|/|.*([/.]\.|//|@\{|\\))[^\040\177 ~^:?*[]+/[^\040\177 ~^:?*[]+(?&lt;!\.lock|[/.])$
</snippet></ROW><ROW><id>12093995</id><snippet>sorted()</snippet></ROW><ROW><id>12093995</id><snippet>for infile in sorted(glob.glob('*.txt')):
    print "Current File Being Processed is: " + infile
</snippet></ROW><ROW><id>12093995</id><snippet>os.path.join</snippet></ROW><ROW><id>12093995</id><snippet>10</snippet></ROW><ROW><id>12093995</id><snippet>9</snippet></ROW><ROW><id>12093995</id><snippet>import re
numbers = re.compile(r'(\d+)')
def numericalSort(value):
    parts = numbers.split(value)
    parts[1::2] = map(int, parts[1::2])
    return parts

 for infile in sorted(glob.glob('*.txt'), key=numericalSort):
    print "Current File Being Processed is: " + infile
</snippet></ROW><ROW><id>12093995</id><snippet>numericalSort</snippet></ROW><ROW><id>12093995</id><snippet>&gt;&gt;&gt; files = ['file9.txt', 'file10.txt', 'file11.txt', '32foo9.txt', '32foo10.txt']
&gt;&gt;&gt; sorted(files)
['32foo10.txt', '32foo9.txt', 'file10.txt', 'file11.txt', 'file9.txt']
&gt;&gt;&gt; sorted(files, key=numericalSort)
['32foo9.txt', '32foo10.txt', 'file9.txt', 'file10.txt', 'file11.txt']
</snippet></ROW><ROW><id>12094254</id><snippet>elements = driver.find_elements_by_xpath("//div[@class='Display']")
title = elements[1].find_elements_by_xpath(".//div[@class='Title']")
</snippet></ROW><ROW><id>12094292</id><snippet>d = defaultdict(int)
for lst in lists:
   d[len(lst)] += 1
</snippet></ROW><ROW><id>12094519</id><snippet>def product(*iterables, **kwargs):
    if len(iterables) == 0:
        yield ()
    else:
        iterables = iterables * kwargs.get('repeat', 1)
        it = iterables[0]
        for item in it() if callable(it) else iter(it):
            for items in product(*iterables[1:]):
                yield (item, ) + items
</snippet></ROW><ROW><id>12094519</id><snippet>import itertools
g = product(lambda: itertools.permutations(xrange(100)),
            lambda: itertools.permutations(xrange(100)))
print next(g)
print sum(1 for _ in g)
</snippet></ROW><ROW><id>12094524</id><snippet>with open("f", "a") as myfile</snippet></ROW><ROW><id>12094524</id><snippet>with open(f, "a") as myfile</snippet></ROW><ROW><id>12094524</id><snippet>with open(f) as myfile:
    print myfile.read()
</snippet></ROW><ROW><id>12094630</id><snippet>/blog/static/blog/js
</snippet></ROW><ROW><id>12094630</id><snippet>/static/js
</snippet></ROW><ROW><id>12094630</id><snippet>{% load static %}
&lt;img src="{% static 'js/abacadabra.js' %}" /&gt;
</snippet></ROW><ROW><id>12094630</id><snippet>STATICFILES_DIRS = (
    'C:/Python27/Scripts/mysite/blog/static',
)
</snippet></ROW><ROW><id>12094630</id><snippet>PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

STATICFILES_DIRS = (
    PROJECT_ROOT + '/static/'
)
</snippet></ROW><ROW><id>12094643</id><snippet>from exception.UniqueConstraintException import UniqueConstraintException
</snippet></ROW><ROW><id>12094722</id><snippet>os.remove</snippet></ROW><ROW><id>12094722</id><snippet>os.unlink</snippet></ROW><ROW><id>12094722</id><snippet>unlink functionality</snippet></ROW><ROW><id>12094807</id><snippet>s.split('=')</snippet></ROW><ROW><id>12094807</id><snippet>['A', '5']</snippet></ROW><ROW><id>12094807</id><snippet>'A'</snippet></ROW><ROW><id>12094807</id><snippet>'5'</snippet></ROW><ROW><id>12094807</id><snippet>for name,value in [s.split('=')]</snippet></ROW><ROW><id>12094807</id><snippet> splitstrs = (s.split('=') for s in list_of_strings) 
 d = {name: int(value) for name,value in splitstrs }
</snippet></ROW><ROW><id>12095090</id><snippet># -*- coding: utf-8 -*-
import urllib
import simplejson

def searchTweets(query, minimum_tweets):
  results = []
  i=0
  while len(results)&lt;minimum_tweets:
    if i==0: # First time through don't include max id
        response = urllib.urlopen("http://search.twitter.com/search.json?q="+query+"&amp;rpp=100")
    else: # Subsequent times include max id
        response = urllib.urlopen("http://search.twitter.com/search.json?q="+query+"&amp;rpp=100&amp;max_id="+max_id)
    response = simplejson.loads(response.read())
    if not response['results']: break # Break if no tweets are returned
    max_id = str(long(response['results'][-1]['id_str'])-1) # Define max_id for next iteration
    results.extend(response['results']) # Extend tweets to results array
    i += 1

  print "\n",len(results)," tweets found","\n" 

searchTerm = "steak"
searchTweets(searchTerm, 1200)
</snippet></ROW><ROW><id>12095092</id><snippet>fs = 8000.0
fso2 = fs/2
N,wn = scipy.signal.buttord(ws=[300/fso2,3100/fso2], wp=[200/fs02,3200/fs02],
   gpass=0.0, gstop=30.0)
</snippet></ROW><ROW><id>12095288</id><snippet>.exclude(id=post.id)</snippet></ROW><ROW><id>12095288</id><snippet>other_news = NewsPost.objects.exclude(id=post.id).filter(live=True,    
    categories__in=post.categories.all).distinct().order_by("-posted")[:3]
</snippet></ROW><ROW><id>12095288</id><snippet>exclude()</snippet></ROW><ROW><id>12095288</id><snippet>filter()</snippet></ROW><ROW><id>12095740</id><snippet>COPYING</snippet></ROW><ROW><id>12095740</id><snippet>COPYRIGHT</snippet></ROW><ROW><id>12095901</id><snippet>pip install &lt;path-to-repo&gt;/src</snippet></ROW><ROW><id>12096066</id><snippet>class Employee(ndb.Model):
  &lt;properties here&gt;

  saved = False  # class variable provides default value

  @classmethod
  def _post_get_hook(cls, key, future):
    obj = future.get_result()
    if obj is not None:
      # test needed because post_get_hook is called even if get() fails!
      obj.saved = True

  def _post_put_hook(self, future):
    self.saved = True
</snippet></ROW><ROW><id>12096112</id><snippet>from lxml import html
root = html.parse(open('your/file.html')).getroot()

sibling_content = lambda x: [b.getparent().getnext().text_content() for b in
                             root.cssselect("td b:contains('{0}')".format(x))]

fields = ['notificationNodeName', 'packageName', 'notificationEnabled']

for item in zip(*[sibling_content(field) for field in fields]):
    print item
</snippet></ROW><ROW><id>12096155</id><snippet>loc</snippet></ROW><ROW><id>12096155</id><snippet>upper right</snippet></ROW><ROW><id>12096155</id><snippet>upper left</snippet></ROW><ROW><id>12096155</id><snippet>import matplotlib.pyplot as plt

from mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes
from mpl_toolkits.axes_grid1.inset_locator import mark_inset

import numpy as np

def get_demo_image():
    from matplotlib.cbook import get_sample_data
    import numpy as np
    f = get_sample_data("axes_grid/bivariate_normal.npy", asfileobj=False)
    z = np.load(f)
    # z is a numpy array of 15x15
    return z, (-3,4,-4,3)


fig = plt.figure(1, [5,4])
ax = fig.add_subplot(111)

# prepare the demo image
Z, extent = get_demo_image()
Z2 = np.zeros([150, 150], dtype="d")
ny, nx = Z.shape
Z2[30:30+ny, 30:30+nx] = Z

# extent = [-3, 4, -4, 3]
ax.imshow(Z2, extent=extent, interpolation="nearest",
          origin="lower")

axins = zoomed_inset_axes(ax, 6, loc=1) # zoom = 6
axins.imshow(Z2, extent=extent, interpolation="nearest",
             origin="lower")

# sub region of the original image
x1, x2, y1, y2 = -1.5, -0.9, -2.5, -1.9
axins.set_xlim(x1, x2)
axins.set_ylim(y1, y2)

axins1 = zoomed_inset_axes(ax, 8, loc=2) # zoom = 6
axins1.imshow(Z2, extent=extent, interpolation="nearest",
             origin="lower")

# sub region of the original image
x1, x2, y1, y2 = -1.2, -0.9, -2.2, -1.9
axins1.set_xlim(x1, x2)
axins1.set_ylim(y1, y2)

plt.xticks(visible=False)
plt.yticks(visible=False)

# draw a bbox of the region of the inset axes in the parent axes and
# connecting lines between the bbox and the inset axes area
mark_inset(ax, axins, loc1=2, loc2=4, fc="none", ec="0.5")
mark_inset(ax, axins1, loc1=2, loc2=4, fc="none", ec="0.5")

plt.draw()
plt.show()
</snippet></ROW><ROW><id>12096155</id><snippet>from pylab import *
from mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes
from mpl_toolkits.axes_grid1.inset_locator import mark_inset

# fake up some data
spread= rand(50) * 100 
center = ones(25) * 50
flier_high = rand(10) * 100 + 100
flier_low = rand(10) * -100
data =concatenate((spread, center, flier_high, flier_low), 0)

# fake up some more data
spread= rand(50) * 100
center = ones(25) * 40
flier_high = rand(10) * 100 + 100
flier_low = rand(10) * -100
d2 = concatenate( (spread, center, flier_high, flier_low), 0 )
data.shape = (-1, 1)
d2.shape = (-1, 1)
data = [data, d2, d2[::2,0]]

# multiple box plots on one figure
fig = plt.figure(1, [5,4])
ax = fig.add_subplot(111)
ax.boxplot(data)
ax.set_xlim(0.5,5)
ax.set_ylim(0,300)

# Create the zoomed axes
axins = zoomed_inset_axes(ax, 3, loc=1) # zoom = 3, location = 1 (upper right)
axins.boxplot(data)

# sub region of the original image
x1, x2, y1, y2 = 0.9, 1.1, 125, 175
axins.set_xlim(x1, x2)
axins.set_ylim(y1, y2)
plt.xticks(visible=False)
plt.yticks(visible=False)

# draw a bbox of the region of the inset axes in the parent axes and
# connecting lines between the bbox and the inset axes area
mark_inset(ax, axins, loc1=2, loc2=4, fc="none", ec="0.5")

show() 
</snippet></ROW><ROW><id>12096155</id><snippet>x</snippet></ROW><ROW><id>12096155</id><snippet>y</snippet></ROW><ROW><id>12096155</id><snippet>y-axis</snippet></ROW><ROW><id>12096155</id><snippet>log</snippet></ROW><ROW><id>12096155</id><snippet>from pylab import *

# fake up some data
spread= rand(50) * 1
center = ones(25) * .5
flier_high = rand(10) * 100 + 100
flier_low = rand(10) * -100
data =concatenate((spread, center, flier_high, flier_low), 0)

# fake up some more data
spread= rand(50) * 1
center = ones(25) * .4
flier_high = rand(10) * 100 + 100
flier_low = rand(10) * -100
d2 = concatenate( (spread, center, flier_high, flier_low), 0 )
data.shape = (-1, 1)
d2.shape = (-1, 1)
data = [data, d2, d2[::2,0]]

# multiple box plots on one figure
fig = plt.figure(1, [5,4]) # Figure Size
ax = fig.add_subplot(111)  # Only 1 subplot 
ax.boxplot(data)
ax.set_xlim(0.5,5)
ax.set_ylim(.1,300)
ax.set_yscale('log')

show()
</snippet></ROW><ROW><id>12096200</id><snippet>$("#submit").click(function() {
    $.ajax({
     dataType: 'json',
     beforeSubmit: function() {
     },
     timeout: 60000,
     error: function(request,error) {
     },
      success: function(data) {
       var obj = jQuery.parseJSON(data);
       //blah blah...
       } // End success
    }); // End ajax method
    return false; // Cancel default action.
});
</snippet></ROW><ROW><id>12096200</id><snippet>false</snippet></ROW><ROW><id>12096200</id><snippet>action</snippet></ROW><ROW><id>12096331</id><snippet>from PIL
import Image
</snippet></ROW><ROW><id>12096331</id><snippet>from PIL import Image
</snippet></ROW><ROW><id>12096439</id><snippet>imp.load_compiled</snippet></ROW><ROW><id>12096439</id><snippet>import</snippet></ROW><ROW><id>12096439</id><snippet>import imp
my_module = imp.load_compiled("my_module", "full_path_to_my_module/my_module.pyc")
</snippet></ROW><ROW><id>12096439</id><snippet>my_module.yayfunctions('a')
</snippet></ROW><ROW><id>12096439</id><snippet>$ cat /tmp/my_module.py
def yayfunctions(a):
    print a
$ python -m compileall /tmp/my_module.py
$ ls /tmp/my_module.py*
my_module.py   my_module.pyc
$ python
&gt;&gt;&gt; import imp
&gt;&gt;&gt; my_module = imp.load_compiled("my_module", "/tmp/my_module.pyc")
&gt;&gt;&gt; my_module.yayfunctions('a')
a
</snippet></ROW><ROW><id>12096439</id><snippet>ImportError: No module named another_module</snippet></ROW><ROW><id>12096439</id><snippet>my_module.pyc</snippet></ROW><ROW><id>12096439</id><snippet>another_module.py</snippet></ROW><ROW><id>12096439</id><snippet>my_module</snippet></ROW><ROW><id>12096439</id><snippet>sys.path</snippet></ROW><ROW><id>12096439</id><snippet>__import__</snippet></ROW><ROW><id>12096439</id><snippet>import os


def load_path(filepath):
    """Given a path like /path/to/my_module.pyc (or .py) imports the
    module and returns it
    """

    path, fname = os.path.split(filepath)
    modulename, _ = os.path.splitext(fname)

    if path not in sys.path:    
        sys.path.insert(0, path)

    return __import__(modulename)


if __name__ == '__main__':
    # Example usage
    my_module = load_path('/tmp/my_module.py')
    my_module.yayfunctions('test')
</snippet></ROW><ROW><id>12096520</id><snippet>sifter</snippet></ROW><ROW><id>12096520</id><snippet>p</snippet></ROW><ROW><id>12096520</id><snippet>&gt;&gt; p = 2
&gt;&gt; sifter = (i*p for i in count(p))
&gt;&gt; for x in range(3):
&gt;&gt;    print next(sifter)
4
6
8
&gt;&gt;&gt; # now lets see what happens when we change p
&gt;&gt;&gt; p = 3
&gt;&gt;&gt; for x in range(3):
&gt;&gt;&gt;     print next(sifter)
15
18
21
</snippet></ROW><ROW><id>12096520</id><snippet>i*p</snippet></ROW><ROW><id>12096520</id><snippet>def gensifter(x):
    return (i*x for i in count(x))
</snippet></ROW><ROW><id>12096520</id><snippet>def primes3():
    p = 2
    yield p
    sifter = gensifter(p) # &lt;-- changed!
    s = next(sifter)
    for p in count(p+1):
        #print '(testing p = %d\ts = %d)' % (p, s)
        if p==s: # this p is sieved out
            print 's:', s
            s = next(sifter)
        else:
            yield p # this is prime
            print 'p:', p
            sifter = (k for k, g in groupby(merge(sifter,gensifter(p)))) # &lt;-- changed!
</snippet></ROW><ROW><id>12096520</id><snippet>&gt;&gt;&gt; print list(islice(primes3(), 10))
p: 3
s: 4
p: 5
s: 6
p: 7
s: 8
s: 9
s: 10
p: 11
s: 12
p: 13
s: 14
s: 15
s: 16
p: 17
s: 18
p: 19
s: 20
s: 21
s: 22
p: 23
s: 24
s: 25
s: 26
s: 27
s: 28
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
</snippet></ROW><ROW><id>12096619</id><snippet>try</snippet></ROW><ROW><id>12096619</id><snippet>except</snippet></ROW><ROW><id>12096631</id><snippet>import sys
from urllib import urlretrieve
import time

url = "http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz" # 14.135.620 Byte
startTime = time.time()

class TooSlowException(Exception):
    pass

def convertBToMb(bytes):
    """converts Bytes to Megabytes"""
    bytes = float(bytes)
    megabytes = bytes / 1048576
    return megabytes


def dlProgress(count, blockSize, totalSize):
    global startTime

    alreadyLoaded = count*blockSize
    timePassed = time.time() - startTime
    transferRate = convertBToMb(alreadyLoaded) / timePassed # mbytes per second
    transferRate *= 60 # mbytes per minute

    percent = int(alreadyLoaded*100/totalSize)
    sys.stdout.write("\r" + "progress" + "...%d%%" % percent)
    sys.stdout.flush()

    if transferRate &lt; 4 and timePassed &gt; 2: # download will be slow at the beginning, hence wait 2 seconds
        print "\ndownload too slow! retrying..."
        time.sleep(1) # let's not hammer the server
        raise TooSlowException

def main():
    try:
        urlretrieve(url, '/tmp/localfile', reporthook=dlProgress)

    except TooSlowException:
        global startTime
        startTime = time.time()
        main()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>12096737</id><snippet>player1.extend(player1[:warcardvalue1])
</snippet></ROW><ROW><id>12096776</id><snippet>@app.route('/')
def index():
  content = """
     teste
   """
  user = "Hero"
  return render_template('index.html', **locals())
</snippet></ROW><ROW><id>12096776</id><snippet>def index() :
    return render_template('index.html', obj = "object", data = "a223jsd" );
</snippet></ROW><ROW><id>12096927</id><snippet>polls/
    models.py
    templatetags/
        __init__.py
        poll_extras.py
    views.py
</snippet></ROW><ROW><id>12096927</id><snippet>yourapp/templatetags/__init__.py
yourapp/templatetags/yourapp_tags.py
</snippet></ROW><ROW><id>12096927</id><snippet>yourapp/templatetags/</snippet></ROW><ROW><id>12096927</id><snippet>yourapp/templatetags/__init__.py</snippet></ROW><ROW><id>12096927</id><snippet>{% load poll_extras %}
</snippet></ROW><ROW><id>12096964</id><snippet>&gt;&gt;&gt; x = np.array([1, 2, np.nan, 3, np.nan, 4])
... y = np.array([1, np.nan, 2, 5, np.nan, 8])
&gt;&gt;&gt; x = np.ma.masked_array(np.nan_to_num(x), mask=np.isnan(x) &amp; np.isnan(y))
&gt;&gt;&gt; y = np.ma.masked_array(np.nan_to_num(y), mask=x.mask)
&gt;&gt;&gt; (x+y).filled(np.nan)
array([  2.,   2.,   2.,   8.,  nan,  12.])
</snippet></ROW><ROW><id>12096964</id><snippet>nan</snippet></ROW><ROW><id>12096964</id><snippet>nan</snippet></ROW><ROW><id>12096964</id><snippet>np.nan_to_num(x) + np.nan_to_num(y)</snippet></ROW><ROW><id>12096980</id><snippet>from django.conf import settings
print settings.TEMPLATE_CONTEXT_PROCESSORS
</snippet></ROW><ROW><id>12097066</id><snippet>class RegistrationForm(ModelForm):
username = forms.CharField(error_messages={'required': 'Please enter a &lt;b&gt;username&lt;/b&gt;.'})
</snippet></ROW><ROW><id>12097066</id><snippet>from django.utils.safestring import mark_safe

class RegistrationForm(ModelForm):
    username = forms.CharField(error_messages={'required': mark_safe('Please enter a &lt;b&gt;username&lt;/b&gt;.')})
</snippet></ROW><ROW><id>12097120</id><snippet>sleep(2)</snippet></ROW><ROW><id>12097120</id><snippet>from Tkinter import *
from time import sleep

class App:

    def __init__(self, master):

        self.master = master
        self.running = False
        frame = Frame(master)
        frame.pack()

        self.exeButton = Button(frame, text="Execute", fg="blue", 
            command=lambda: self.execute(True))
        self.exeButton.pack(side=LEFT)

        self.tOffButton = Button(frame, text="Toggle Off", 
            command=lambda: self.execute(False))
        self.tOffButton.pack(side=LEFT)

    def execute(self, running=None):
        if running is not None:
            self.running = running
        if self.running:
            print "hi there, everyone!"
            self.master.after(2000, self.execute)

root = Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>12097122</id><snippet>People.objects.exclude(recordings=None)
</snippet></ROW><ROW><id>12097166</id><snippet>a = [[1,2],[3,4]]
b = [[2,3],[4,5]]

# Works correctly, returns 0
a.index([1,2])

# Throws error because list does not contain it
b.index([1,2])
</snippet></ROW><ROW><id>12097166</id><snippet>in</snippet></ROW><ROW><id>12097166</id><snippet>if [1,2] in a:
    pass
</snippet></ROW><ROW><id>12097166</id><snippet>index = None

try:
    index = b.index([0,3])
except ValueError:
    print("List does not contain value")
</snippet></ROW><ROW><id>12097174</id><snippet>find /path/to/project -name '*pyc' -delete</snippet></ROW><ROW><id>12097174</id><snippet>grep -r wequest /path/to/project</snippet></ROW><ROW><id>12097431</id><snippet>os.environ['APPDATA']</snippet></ROW><ROW><id>12097431</id><snippet>$HOME</snippet></ROW><ROW><id>12097431</id><snippet>~/.config</snippet></ROW><ROW><id>12097431</id><snippet>os.environ.get('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))</snippet></ROW><ROW><id>12097464</id><snippet>query</snippet></ROW><ROW><id>12097464</id><snippet>query = Model.all().filter("profile =", p_key)
query = query.order('-created')
query = query.run(limit=10)
</snippet></ROW><ROW><id>12097464</id><snippet>query</snippet></ROW><ROW><id>12097609</id><snippet>request.session</snippet></ROW><ROW><id>12097609</id><snippet># view1
request.session['name1'] = male_results
request.session['userid1'] = male_pic_userid

# view2 (or elsewhere in view1)
male_results = request.session.get('name1')
male_pic_userid = request.session.get('userid1')
</snippet></ROW><ROW><id>12097609</id><snippet>POST</snippet></ROW><ROW><id>12097609</id><snippet>/match/?name1=foo1&amp;userid1&amp;name2=bar&amp;userid2=2</snippet></ROW><ROW><id>12097609</id><snippet>&lt;a href='/match/?name1={{ male_results }}...</snippet></ROW><ROW><id>12097609</id><snippet>POST</snippet></ROW><ROW><id>12097609</id><snippet>GET</snippet></ROW><ROW><id>12097609</id><snippet>POST</snippet></ROW><ROW><id>12097900</id><snippet>class FooForm(forms.ModelForm):
    class Meta:
        model = People
        widgets = { 
            'name': forms.Textarea(attrs={'placeholder': u'Bla bla'}),
        }   
</snippet></ROW><ROW><id>12097900</id><snippet>class FooForm(forms.ModelForm):
    name = forms.CharField()

    class Meta:
        model = People
        widgets = { 
            'name': forms.Textarea(attrs={'placeholder': u'Bla bla'}),
        }
</snippet></ROW><ROW><id>12097900</id><snippet>   204         if opts.model:
   205             # If a model is defined, extract form fields from it.
   206             fields = fields_for_model(opts.model, opts.fields,
   207                                       opts.exclude, opts.widgets, formfield_callback)
   208             # make sure opts.fields doesn't specify an invalid field
   209             none_model_fields = [k for k, v in fields.iteritems() if not v]
   210             missing_fields = set(none_model_fields) - \
EE 211                              set(declared_fields.keys())
   212             if missing_fields:
   213                 message = 'Unknown field(s) (%s) specified for %s'
   214                 message = message % (', '.join(missing_fields),
   215                                      opts.model.__name__)
   216                 raise FieldError(message)
   217             # Override default model fields with any custom declared ones
   218             # (plus, include all the other declared fields).
   219             fields.update(declared_fields)
</snippet></ROW><ROW><id>12097916</id><snippet>Extension('c_extension', ...)
</snippet></ROW><ROW><id>12097916</id><snippet>Extension('foo.bar.c_extension', ...)
</snippet></ROW><ROW><id>12097916</id><snippet>__init__.py</snippet></ROW><ROW><id>12097916</id><snippet>foo</snippet></ROW><ROW><id>12097916</id><snippet>bar</snippet></ROW><ROW><id>12097916</id><snippet>packages = ['foo', 'foo.bar'],
</snippet></ROW><ROW><id>12097916</id><snippet>setup.py
foo/
    __init__.py
    bar/
        __init__.py
</snippet></ROW><ROW><id>12097968</id><snippet>if user_can_read(request.user, b):
    ## do stuff
</snippet></ROW><ROW><id>12097968</id><snippet>user_can_read</snippet></ROW><ROW><id>12097968</id><snippet>if not user_can_read(request.user, b)</snippet></ROW><ROW><id>12098001</id><snippet>__new__</snippet></ROW><ROW><id>12098001</id><snippet>object</snippet></ROW><ROW><id>12098001</id><snippet>object</snippet></ROW><ROW><id>12098100</id><snippet>import random

def myRand(i, w):
    r = random.uniform(0, sum(w))

    # loop through a list of inputs and max cutoff values, returning
    # the first value for which the random num r is less than the cutoff value
    for n,v in map(None, i,[sum(w[:x+1]) for x in range(len(w))]):
        if r &lt; v:
            return n
</snippet></ROW><ROW><id>12098100</id><snippet>inputs = ['e', 'f', 'g', 'h']
weights = [10, 30, 50, 10]

print myRand(inputs, weights)
</snippet></ROW><ROW><id>12098144</id><snippet>mylistoftuples.append((int(record[0]), str(parsed.first),str(parsed.middle),str(parsed.last),str(parsed.suffix)))

cursor.executemany("""insert into NamesToParseOut(id, first, middle, last, suffix) values (%s, %s, %s, %s, %s)""", mylistoftuples)
</snippet></ROW><ROW><id>12098174</id><snippet>NumDates</snippet></ROW><ROW><id>12098174</id><snippet>for dates in range(NumDates):
    ...
</snippet></ROW><ROW><id>12098174</id><snippet>xrange</snippet></ROW><ROW><id>12098174</id><snippet>xrange</snippet></ROW><ROW><id>12098174</id><snippet>range</snippet></ROW><ROW><id>12098174</id><snippet>range</snippet></ROW><ROW><id>12098174</id><snippet>2to3</snippet></ROW><ROW><id>12098174</id><snippet>dates = dates + 1</snippet></ROW><ROW><id>12098174</id><snippet>dates += 1</snippet></ROW><ROW><id>12098580</id><snippet>strip</snippet></ROW><ROW><id>12098580</id><snippet>s = s.strip(' "\'\t\r\n')
</snippet></ROW><ROW><id>12098586</id><snippet>In [5]: df = DataFrame({'A' : [5,6,3,4], 'B' : [1,2,3, 5]})

In [6]: df
Out[6]:
   A  B
0  5  1
1  6  2
2  3  3
3  4  5

In [7]: df[df['A'].isin([3, 6])]
Out[7]:
   A  B
1  6  2
2  3  3
</snippet></ROW><ROW><id>12098600</id><snippet>.py</snippet></ROW><ROW><id>12098743</id><snippet>model.save</snippet></ROW><ROW><id>12098743</id><snippet>model.delete</snippet></ROW><ROW><id>12098768</id><snippet>with</snippet></ROW><ROW><id>12098768</id><snippet>with open('resume.txt','w') as wr:
    login(usr,pas)
    wr.write('login')
    # This is hacky, but it will go to the beginning 
    # of the file and then erase (truncate) it
    wr.seek(0)
    # I think you wanted to do this after you tried an action, 
    # but you can move it to wherever you want
    post(msg,con)
    wr.truncate()
    wr.write('post')
</snippet></ROW><ROW><id>12098768</id><snippet>with</snippet></ROW><ROW><id>12098768</id><snippet>with open('resume.txt','w') as wr:
    login(usr,pas)
    wr.write('login')
    wr.seek(0)
    post(msg,con)
    wr.truncate()
    wr.write('post')
    # wr.seek(0) ...

# Next steps...
</snippet></ROW><ROW><id>12099438</id><snippet>browser.helperApps.neverAsk.saveToDisk</snippet></ROW><ROW><id>12099438</id><snippet>profile = webdriver.firefox.firefox_profile.FirefoxProfile()
profile.set_preference('browser.helperApps.neverAsk.saveToDisk', ('text/csv,'
                                                                  'application/csv,'
                                                                  'application/msexcel'))
</snippet></ROW><ROW><id>12099438</id><snippet>profile = webdriver.firefox.firefox_profile.FirefoxProfile()
profile.set_preference('browser.helperApps.neverAsk.saveToDisk', ('application/pdf'))
</snippet></ROW><ROW><id>12099438</id><snippet>Save As</snippet></ROW><ROW><id>12099438</id><snippet>browser</snippet></ROW><ROW><id>12099438</id><snippet>browser = webdriver.Firefox(firefox_profile=profile)
</snippet></ROW><ROW><id>12099438</id><snippet>profile</snippet></ROW><ROW><id>12099438</id><snippet>profile.set_preference('browser.download.folderList': 2)
profile.set_preference('browser.download.dir': '/path/to/your/dir')
</snippet></ROW><ROW><id>12099762</id><snippet>;)</snippet></ROW><ROW><id>12099762</id><snippet>__init__</snippet></ROW><ROW><id>12099762</id><snippet>country</snippet></ROW><ROW><id>12099762</id><snippet>form = CarsForm(country, request.POST)
</snippet></ROW><ROW><id>12099762</id><snippet>request.POST</snippet></ROW><ROW><id>12099762</id><snippet>country</snippet></ROW><ROW><id>12099762</id><snippet>__init__</snippet></ROW><ROW><id>12099762</id><snippet>is_valid()</snippet></ROW><ROW><id>12099762</id><snippet>False</snippet></ROW><ROW><id>12099762</id><snippet>SkillForm</snippet></ROW><ROW><id>12099762</id><snippet>CarsForm</snippet></ROW><ROW><id>12099839</id><snippet>Class C():
    def __init__(self, base_type):
        if base_type == 'A':
            self.__class__=A
        else:
            self.__class__=B
</snippet></ROW><ROW><id>12099848</id><snippet>page.execute_script</snippet></ROW><ROW><id>12099848</id><snippet>    jQuery('textarea.tinymce').tinymce().setContent('test text in editor');   
    jQuery('textarea.tinymce').tinymce().selection.select(jQuery('textarea.tinymce').tinymce().dom.select('p')[0]);
    jQuery('textarea.tinymce').tinymce().execCommand('Italic','true');
    jQuery('textarea.tinymce').tinymce().execCommand('Underline','true');  
    jQuery('textarea.tinymce').tinymce().execCommand('Bold','true');
</snippet></ROW><ROW><id>12099848</id><snippet>.execCommand()</snippet></ROW><ROW><id>12099872</id><snippet>&gt;&gt;&gt; # import the library
&gt;&gt;&gt; import pandas as PD
</snippet></ROW><ROW><id>12099872</id><snippet>&gt;&gt;&gt; data = {'category_code': ['D', 'A', 'B', 'C', 'D', 'A', 'C', 'A'], 
            'value':[4, 2, 6, 3, 8, 4, 3, 9]}

&gt;&gt;&gt; # convert to a Pandas 'DataFrame'
&gt;&gt;&gt; D = PD.DataFrame(data)
</snippet></ROW><ROW><id>12099872</id><snippet>&gt;&gt;&gt; # step 1: create the index 
&gt;&gt;&gt; idx = (D.category_code== '8') | (D.category_code == 'C')

&gt;&gt;&gt; # then filter the data against that index:
&gt;&gt;&gt; D.ix[idx]

        category_code  value
   2             B      6
   3             C      3
   6             C      3
</snippet></ROW><ROW><id>12099872</id><snippet>&gt;&gt;&gt;  D[idx,:]
</snippet></ROW><ROW><id>12099872</id><snippet>&gt;&gt;&gt; D.ix[idx]
</snippet></ROW><ROW><id>12100104</id><snippet>import csv, re
from collections import defaultdict

lookup = defaultdict(list)
with open('humsavar.txt', 'rb') as humsavarTxt:
    reader = csv.reader(humsavarTxt, delimiter=" ", skipinitialspace=True)
    for line in reader:
        code = re.search(r'(\d+)', line[3])
        lookup[line[1]].append(int(code.group(1)))
</snippet></ROW><ROW><id>12100104</id><snippet>&gt;&gt;&gt; lookup
defaultdict(&lt;type 'list'&gt;, {'P04217': [52, 395], 'Q9NRG9': [15]})
&gt;&gt;&gt; lookup['P04217']
[52, 395]
</snippet></ROW><ROW><id>12100266</id><snippet> ffmpeg -i foo.avi -r 1 -s WxH -f image2 foo-%03d.jpeg
</snippet></ROW><ROW><id>12100266</id><snippet>foo-001.jpeg</snippet></ROW><ROW><id>12100266</id><snippet>foo-002.jpeg</snippet></ROW><ROW><id>12100266</id><snippet>ffmpeg -i foo.avi -vsync 0 -vf select="eq(pict_type\,PICT_TYPE_I)" -s WxH -f image2 foo-%03d.jpeg
</snippet></ROW><ROW><id>12100627</id><snippet>def ask_ok(prompt, retries=4, complaint='Yes or no, please!'):
    while 1:
        ok = raw_input(prompt)
        if ok in ('y', 'ye', 'yes'): return 1
        if ok in ('n', 'no', 'nop', 'nope'): return 0
        retries = retries - 1
        if retries &lt; 0: raise IOError, 'refusenik user'
        print complaint
</snippet></ROW><ROW><id>12100627</id><snippet>ask_ok('Do you really want to quit?')</snippet></ROW><ROW><id>12100627</id><snippet>ask_ok('OK to overwrite the file?', 2)
</snippet></ROW><ROW><id>12100694</id><snippet>python2.7 setup.py clean
python2.7 setup.py build
python2.7 setup.py install
</snippet></ROW><ROW><id>12100694</id><snippet>pip</snippet></ROW><ROW><id>12100842</id><snippet>networks = [
        {'address': '192.168.1.1'},
        {'address': '127.0.0.1'},
    ]

missing = [
        {'address': '127.0.0.1'}
    ]
</snippet></ROW><ROW><id>12100842</id><snippet>def make_hashable(d):
    return (frozenset(x.iteritems()) for x in d)

networks_hashable = make_hashable(networks)
missing_hashable = make_hashable(missing)
</snippet></ROW><ROW><id>12100842</id><snippet>diff = set(networks_hashable).difference(missing_hashable)
</snippet></ROW><ROW><id>12100842</id><snippet>print list(diff)
</snippet></ROW><ROW><id>12100842</id><snippet>print [dict(x) for x in diff]
</snippet></ROW><ROW><id>12100842</id><snippet>make_hashable</snippet></ROW><ROW><id>12100854</id><snippet>views.py</snippet></ROW><ROW><id>12100907</id><snippet>next</snippet></ROW><ROW><id>12100907</id><snippet>self._input</snippet></ROW><ROW><id>12100907</id><snippet>next</snippet></ROW><ROW><id>12100907</id><snippet>_parsegen()</snippet></ROW><ROW><id>12100907</id><snippet>yield</snippet></ROW><ROW><id>12100907</id><snippet>In [1]: def a():
   ...:     yield 1
   ...:     yield 2
   ...:     

In [2]: a()
Out[2]: &lt;generator object a at 0x1a56550&gt;

In [3]: a().next
Out[3]: &lt;method-wrapper 'next' of generator object at 0x1a567d0&gt;

In [4]: a().next()
Out[4]: 1
</snippet></ROW><ROW><id>12100941</id><snippet>group_df = df.groupby(group_name).agg([np.mean, np.std, np.count_nonzero])
group_df.rename(None, lambda coltuple: '_'.join(coltuple), False, True)
</snippet></ROW><ROW><id>12100960</id><snippet>QTextDocument</snippet></ROW><ROW><id>12100960</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self, rows, columns):
        QtGui.QWidget.__init__(self)
        self.table = QtGui.QTableView(self)
        model =  QtGui.QStandardItemModel(rows, columns, self.table)
        for row in range(rows):
            for column in range(columns):
                item = QtGui.QStandardItem('(%d, %d)' % (row, column))
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                model.setItem(row, column, item)
        self.table.setModel(model)
        self.buttonPrint = QtGui.QPushButton('Print', self)
        self.buttonPrint.clicked.connect(self.handlePrint)
        self.buttonPreview = QtGui.QPushButton('Preview', self)
        self.buttonPreview.clicked.connect(self.handlePreview)
        layout = QtGui.QGridLayout(self)
        layout.addWidget(self.table, 0, 0, 1, 2)
        layout.addWidget(self.buttonPrint, 1, 0)
        layout.addWidget(self.buttonPreview, 1, 1)

    def handlePrint(self):
        dialog = QtGui.QPrintDialog()
        if dialog.exec_() == QtGui.QDialog.Accepted:
            self.handlePaintRequest(dialog.printer())

    def handlePreview(self):
        dialog = QtGui.QPrintPreviewDialog()
        dialog.paintRequested.connect(self.handlePaintRequest)
        dialog.exec_()

    def handlePaintRequest(self, printer):
        document = QtGui.QTextDocument()
        cursor = QtGui.QTextCursor(document)
        model = self.table.model()
        table = cursor.insertTable(
            model.rowCount(), model.columnCount())
        for row in range(table.rows()):
            for column in range(table.columns()):
                cursor.insertText(model.item(row, column).text())
                cursor.movePosition(QtGui.QTextCursor.NextCell)
        document.print_(printer)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window(25, 2)
    window.resize(300, 400)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>12100991</id><snippet>fetchone</snippet></ROW><ROW><id>12100991</id><snippet>fetchall</snippet></ROW><ROW><id>12101156</id><snippet>import re

conditions = ['CELSIUS', 'FROM_KELVIN']

def eval_conditional(matchobj):
    statement = matchobj.groups()[1].split('#else')
    statement.append('') # in case there was no else statement
    if matchobj.groups()[0] in conditions: return statement[0]
    else: return statement[1]

def parse(text):
    pattern = r'#if\s*(\S*)\s*((?:.(?!#if|#endif))*.)#endif'
    regex = re.compile(pattern, re.DOTALL)
    while True:
        if not regex.search(text): break
        text = regex.sub(eval_conditional, text)
    return text

if __name__ == '__main__':
    i = open('input.txt', 'r').readlines()
    g = ''.join([x.split(';')[0] for x in i if x.strip()])
    o = parse(g)
    open('output.txt', 'w').write(o)
</snippet></ROW><ROW><id>12101156</id><snippet>...
        temp_conversion = 1, 273

...
</snippet></ROW><ROW><id>12101501</id><snippet>QProcess</snippet></ROW><ROW><id>12101501</id><snippet>selectedNew()</snippet></ROW><ROW><id>12101501</id><snippet>doWork</snippet></ROW><ROW><id>12101501</id><snippet>doWork</snippet></ROW><ROW><id>12101501</id><snippet>QProcess</snippet></ROW><ROW><id>12101501</id><snippet>A</snippet></ROW><ROW><id>12101501</id><snippet>class A():
    def __init__(self):
      ...
      self.ui.actionNew.triggered.connect(self.selectedNew)

    def readStdOut(self):
        self.ui.text_edit.append(str(self.qprocess.readAllStandardOutput()))

    def readStdErr(self):
        self.ui.text_edit.append(str(self.qprocess.readAllStandardError()))

    def selectedNew(self):
        ...
        qprocess = QtCore.QProcess(self)
        qprocess.readyReadStandardOutput.connect(self.readStdOut)
        qprocess.readyReadStandardError.connect(self.readStdErr)

        qprocess.start("script_that_waits_for_user_input", params)

        print qprocess.state() == qprocess.Running
</snippet></ROW><ROW><id>12101501</id><snippet>B</snippet></ROW><ROW><id>12101501</id><snippet>B</snippet></ROW><ROW><id>12101501</id><snippet>A</snippet></ROW><ROW><id>12101501</id><snippet>b_instance.qprocess</snippet></ROW><ROW><id>12101501</id><snippet>B</snippet></ROW><ROW><id>12101501</id><snippet>class A(QtGui.QMainWindow):
    ...

    def readStdOut(self):
        qprocess = self.sender()
        self.ui.text_edit.append(QtCore.QString(qprocess.readAllStandardOutput()))

    def readStdErr(self):
        qprocess = self.sender()
        self.ui.text_edit.append(QtCore.QString(qprocess.readAllStandardError()))


    def selectedNew(self):
        ...
        b = B()
        b.qprocess.readyReadStandardOutput.connect(self.readStdOut)
        b.qprocess.readyReadStandardError.connect(self.readStdErr)

        b.doWork(params)

        print b.qprocess.state() == qprocess.Running


class B(QtCore.QObject):
    def __init__(self):
        ...
        self.qprocess = QtCore.QProcess(self)

    def doWork(params):
        ...
        self.qprocess.start("script_that_waits_for_user_input", params)
</snippet></ROW><ROW><id>12101501</id><snippet>A</snippet></ROW><ROW><id>12101501</id><snippet>B</snippet></ROW><ROW><id>12101501</id><snippet>B</snippet></ROW><ROW><id>12101501</id><snippet>doWork</snippet></ROW><ROW><id>12101501</id><snippet>B</snippet></ROW><ROW><id>12101641</id><snippet>__setslice__</snippet></ROW><ROW><id>12101641</id><snippet>__setitem__</snippet></ROW><ROW><id>12101641</id><snippet>a[i:j:step]</snippet></ROW><ROW><id>12101641</id><snippet>a[i:j, k:l]</snippet></ROW><ROW><id>12101641</id><snippet>a[..., i:j]</snippet></ROW><ROW><id>12101641</id><snippet>key</snippet></ROW><ROW><id>12101641</id><snippet>&gt;&gt;&gt; class Foo(object):
&gt;&gt;&gt;     def __setitem__(self, key, value):
&gt;&gt;&gt;         print key
&gt;&gt;&gt; 
&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; a[1:1] = 1
slice(1, 1, None)
&gt;&gt;&gt; 
&gt;&gt;&gt; a[1:1:1] = 1
slice(1, 1, 1)
&gt;&gt;&gt; 
&gt;&gt;&gt; a[1:1, 1:1] = 1
(slice(1, 1, None), slice(1, 1, None))
</snippet></ROW><ROW><id>12101764</id><snippet>adam_id</snippet></ROW><ROW><id>12101764</id><snippet>from multiprocessing import Pool

def pull_down(cursor):
    # get all the data in one query
    count = cursor.execute("""SELECT adam_id FROM title WHERE success=0 
                      AND number_of_tries &lt; 5 ORDR BY adam_id LIMIT 1""")
    if count:
        # Step #1
        adam_id_list = [row[0] for row in cursor.fetchall()]

        # Step #2
        pool = Pool(4)
        results = pool.map(do_api_call, adam_id_list)
        pool.close()

        # Step #3
        update_db(results)

def do_api_call(adam_id):
    # do api call
    success = call_api_with_id(adam_id)
    return (adam_id, success)

def update_db(results):
    # loop over results and built batch queries for the success
    # or failed items

    # (obviously this split up could be optimized)
    succeeded = [result[0] for result in results if result[1]]
    failed = [result[0] for result in results if not result[1]]

    submit_success(succeeded)
    submit_failed(failed)
</snippet></ROW><ROW><id>12101837</id><snippet>M[:,i]</snippet></ROW><ROW><id>12101837</id><snippet>M.shape[1]</snippet></ROW><ROW><id>12101837</id><snippet>import matplotlib.pyplot as plt

T = range(M.shape[0])

for i in range(M.shape[1]):
    plt.plot(T, M[:,i])

plt.show()
</snippet></ROW><ROW><id>12102163</id><snippet>class A(object):
    instances = []

    def __init__(self, foo):
        self.foo = foo
        A.instances.append(self)
</snippet></ROW><ROW><id>12102163</id><snippet>foo_vars = {id(instance): instance.foo for instance in A.instances}
</snippet></ROW><ROW><id>12102163</id><snippet>&gt;&gt;&gt; a = A(1)
&gt;&gt;&gt; b = A(2)
&gt;&gt;&gt; A.instances
[&lt;__main__.A object at 0x1004d44d0&gt;, &lt;__main__.A object at 0x1004d4510&gt;]
&gt;&gt;&gt; id(A.instances)
4299683456
&gt;&gt;&gt; id(a.instances)
4299683456    
&gt;&gt;&gt; id(b.instances)
4299683456    
</snippet></ROW><ROW><id>12102246</id><snippet>"Dealer has %s showing." % self.dealer[:2]
</snippet></ROW><ROW><id>12102246</id><snippet>"Dealer has %s showing." % (self.dealer[0], self.dealer[1])
</snippet></ROW><ROW><id>12102246</id><snippet>self.dealer[:2]</snippet></ROW><ROW><id>12102246</id><snippet>"Dealer has %s showing." % (self.dealer[:2],)
</snippet></ROW><ROW><id>12102424</id><snippet>class ChainList(list):
    def __getattribute__(self, name):
        try:
            return object.__getattribute__(self, name)
        except:
            pass

        return ChainList([getattr(child, name) 
            for child in self if name in dir(child)])

    def __call__(self, *args, **kwargs):       
        return ChainList([child(*args, **kwargs)
            for child in self if callable(child)])

class GrandParent(object):
    def __init__(self,name='',age=0,is_retired=True,children=[]):
        self.name = name
        self.age = age
        self.is_retired = is_retired

        if children:
            self.children = ChainList(children)

    def print_mychildren(self):
       for child in self.children:
            print "Child: ",child

    def mychildren(self):
        return self.children

    def __str__(self):
        return "name: %s age: %s is_retired:%s" %(self.name,self.age,self.is_retired)

class Parent(object):
    def __init__(self,name='',age=0,has_mortgage=True,children=[]):
        self.name = name
        self.age = age
        self.has_mortgage = has_mortgage

        if children:
            self.children = ChainList(children)

    def print_mychildren(self):
       for child in self.children:
            print "Child: ",child

    def __str__(self):
        return "name: %s age: %s has_mortgage: %s" %(self.name,self.age,self.has_mortgage)

    def mychild(self, name):
        for child in self.children:
            if child.name == name:
                return child

class Child(object):
    def __init__(self,name='',age=0,has_toys=True):

        self.name = name
        self.age = age
        self.has_toys = has_toys

    def __str__(self):
        return "name: %s age: %s has_toys:%s" %(self.name,self.age,self.has_toys)



if __name__ == '__main__':

    beaver = Child('Beaver',12,True)
    ward = Child('Ward',16,False)

    june = Parent('June',38,True,[beaver,ward])

    grandpa = GrandParent('Grandpa',61,True,[june])

    print grandpa

    grandpa.print_mychildren() # print June

    # Doesn't work
    grandpa.mychildren().print_mychildren() #  I want it to print Ward and Beaver
    # Doesn't work
    print grandpa.mychildren().mychild('Beaver').age # I want it to return an age
</snippet></ROW><ROW><id>12102424</id><snippet>__getattribute__</snippet></ROW><ROW><id>12102424</id><snippet>__call__</snippet></ROW><ROW><id>12102637</id><snippet>for</snippet></ROW><ROW><id>12102637</id><snippet>In [78]: for i in range(3):
   ....: for j in range(3):
</snippet></ROW><ROW><id>12102637</id><snippet>In [78]: for i in range(3):
   ....:    for j in range(3):
</snippet></ROW><ROW><id>12102637</id><snippet>else:
   pass 
</snippet></ROW><ROW><id>12102637</id><snippet>continue</snippet></ROW><ROW><id>12102691</id><snippet>object.__getstate__()
</snippet></ROW><ROW><id>12102691</id><snippet>__getstate__()</snippet></ROW><ROW><id>12102691</id><snippet>__getstate__()</snippet></ROW><ROW><id>12102691</id><snippet>__dict__</snippet></ROW><ROW><id>12102691</id><snippet>__getattr__()</snippet></ROW><ROW><id>12102691</id><snippet>__getattribute__()</snippet></ROW><ROW><id>12102691</id><snippet>__setattr__()</snippet></ROW><ROW><id>12102691</id><snippet>__getinitargs__()</snippet></ROW><ROW><id>12102691</id><snippet>__getnewargs__()</snippet></ROW><ROW><id>12102691</id><snippet>__new__()</snippet></ROW><ROW><id>12102691</id><snippet>__init__()</snippet></ROW><ROW><id>12102691</id><snippet>hasattr(self, '_data')</snippet></ROW><ROW><id>12102691</id><snippet>__getinitargs__()</snippet></ROW><ROW><id>12102691</id><snippet>__getnewargs__()</snippet></ROW><ROW><id>12102691</id><snippet>__init__</snippet></ROW><ROW><id>12102758</id><snippet>for item in [1,2,3,4]:
    print(item, " ", end="")
</snippet></ROW><ROW><id>12102758</id><snippet>1  2  3  4
</snippet></ROW><ROW><id>12102758</id><snippet>Old: print x,           # Trailing comma suppresses newline
New: print(x, end=" ")  # Appends a space instead of a newline
</snippet></ROW><ROW><id>12102758</id><snippet>print()</snippet></ROW><ROW><id>12102758</id><snippet>sep</snippet></ROW><ROW><id>12102758</id><snippet>In [21]: print('this','is', 'a', 'test')  # default single space between items
this is a test

In [22]: print('this','is', 'a', 'test', sep="") # no spaces between items
thisisatest

In [22]: print('this','is', 'a', 'test', sep="--*--") # user specified separation
this--*--is--*--a--*--test
</snippet></ROW><ROW><id>12102852</id><snippet>ax = fig.add_subplot(111, rasterized=True)
ax.plot(ts[0], ys.T, color='r', lw=0.5, alpha=0.5)
</snippet></ROW><ROW><id>12103120</id><snippet>glob.iglob</snippet></ROW><ROW><id>12103120</id><snippet>iglob</snippet></ROW><ROW><id>12103120</id><snippet>files = [ 
    os.path.join(args.src_path, 'EXISTENT_FILE'),
    os.path.join(args.src_path, 'NON_EXISTENT_FILE'),
]
</snippet></ROW><ROW><id>12103120</id><snippet>os.path.exists</snippet></ROW><ROW><id>12103120</id><snippet>import os.path

for file in files:
    if os.path.exists(file):
        sys.stdout.write('File exists: ' + file + '\n')
    else:
        sys.stderr.write('File does not exist: ' + file + '\n')
</snippet></ROW><ROW><id>12103120</id><snippet>files</snippet></ROW><ROW><id>12103274</id><snippet>output.seek(0) #put the position of the buffer at the beginning
</snippet></ROW><ROW><id>12103274</id><snippet>write</snippet></ROW><ROW><id>12103274</id><snippet>copy_to</snippet></ROW><ROW><id>12103274</id><snippet>StringIO</snippet></ROW><ROW><id>12103554</id><snippet>self.x</snippet></ROW><ROW><id>12103554</id><snippet>class Parent(object):
    x = None  # default value
    def __init__(self):
        print self.x

class someChild(Parent):
    x = 10
    def __init__(self):
        Parent.__init__(self)

class otherChild(Parent):
    x = 20
    def __init__(self):
        Parent.__init__(self)

a = someChild()
# output: 10
b = otherChild()
# output: 20
</snippet></ROW><ROW><id>12103554</id><snippet>Parent</snippet></ROW><ROW><id>12103554</id><snippet>x</snippet></ROW><ROW><id>12103554</id><snippet>None</snippet></ROW><ROW><id>12103596</id><snippet>def lower_case(a):
    x=str(a).lower()
    y = "This is now Lowercase:" + x;
    return y;
</snippet></ROW><ROW><id>12103736</id><snippet>Publisher.objects.filter(book__rating__gt=3.0).annotate(num_books=Count('book'))
</snippet></ROW><ROW><id>12103736</id><snippet>Publisher.objects.filter(book__type='nonfiction').annotate(num_books=Count('book'))
</snippet></ROW><ROW><id>12103952</id><snippet>user = models.OneToOneField(User) 
blah = 
.
.
</snippet></ROW><ROW><id>12103952</id><snippet>if form.is_valid():
    user = User.objects.create_user(username = form.cleaned_data['username'],
                                    email = form.cleaned_data['email'],
                                    password = form.cleaned_data['password'],
                                    )
</snippet></ROW><ROW><id>12103952</id><snippet>create_user</snippet></ROW><ROW><id>12104807</id><snippet>select</snippet></ROW><ROW><id>12104807</id><snippet>select()</snippet></ROW><ROW><id>12104807</id><snippet>select()</snippet></ROW><ROW><id>12104807</id><snippet>asyncore</snippet></ROW><ROW><id>12105157</id><snippet>split()</snippet></ROW><ROW><id>12105157</id><snippet>split('\t')</snippet></ROW><ROW><id>12105437</id><snippet>result = simplejson.loads(request.params.get('abc', '{}'))
</snippet></ROW><ROW><id>12105851</id><snippet>ValueError: array is too big.</snippet></ROW><ROW><id>12105851</id><snippet>DictVectorizer</snippet></ROW><ROW><id>12105921</id><snippet>$ pip install python-dateutil==1.5
</snippet></ROW><ROW><id>12106002</id><snippet>from django import forms

from models import Team, Game    


class GameUpdateForm(forms.ModelForm):
    home_team_name = forms.CharField(max_length=20)
    away_team_name = forms.CharField(max_length=20)

    def save(self):
        obj = super(GameForm, self).save()

        if not obj.home_team_id:
            obj.home_team = Team()
        obj.home_team.name = self.cleaned_data.get('home_team_name')
        obj.home_team.save()

        if not obj.away_team_id:
            obj.away_team = Team()
        obj.away_team.name = self.cleaned_data.get('away_team_name')
        obj.away_team.save()

        return obj
    class Meta:
        model = Game
        exclude = ('home_team', 'away_team')
</snippet></ROW><ROW><id>12106002</id><snippet>GameFormSet = modelformset_factory(Game, form=GameForm, extra=1)
</snippet></ROW><ROW><id>12106232</id><snippet>before</snippet></ROW><ROW><id>12106232</id><snippet>expect</snippet></ROW><ROW><id>12106232</id><snippet>current_date = p.before.split('\n')[-1]
</snippet></ROW><ROW><id>12106232</id><snippet>p.sendline('mypassword')
p.expect('[#\$] ')
p.sendline('date')
</snippet></ROW><ROW><id>12106634</id><snippet>get_language_for_user</snippet></ROW><ROW><id>12106634</id><snippet>django.middleware.locale.LocaleMiddleware</snippet></ROW><ROW><id>12106675</id><snippet>sudo modprobe ip_conntrack
sysctl -w net.netfilter.nf_conntrack_acct=1
</snippet></ROW><ROW><id>12106675</id><snippet>bwmon</snippet></ROW><ROW><id>12106675</id><snippet>bytes</snippet></ROW><ROW><id>12106675</id><snippet>packets</snippet></ROW><ROW><id>12106675</id><snippet>/proc/net/ip_conntrack</snippet></ROW><ROW><id>12106798</id><snippet>from celery import Celery

celery = Celery('tasks', broker='redis://localhost:6379/0')

@celery.task
def add(x, y):
    return x + y
</snippet></ROW><ROW><id>12106798</id><snippet>$ celery -A mytasks worker --loglevel=info
</snippet></ROW><ROW><id>12106798</id><snippet>&gt;&gt;&gt; from mytasks import add
&gt;&gt;&gt; add.delay(1, 1)
2
</snippet></ROW><ROW><id>12106915</id><snippet>\1</snippet></ROW><ROW><id>12106915</id><snippet>r</snippet></ROW><ROW><id>12106915</id><snippet>output=p.sub(u'&lt;a href="'+ URL +r'"&gt;\1&lt;/a&gt;',content)
</snippet></ROW><ROW><id>12106915</id><snippet># -*- coding: utf-8 -*-
import re
KEYWORD = u"英語"
URL = u"http://www.google.com/"
content = u"和製英語（わせいえいご）とは、日本で作られた英語風の日本語語彙のことである。"
p=re.compile(u'('+ KEYWORD +u')(?!(([^&lt;&gt;]*?)&gt;)|([^&gt;]*?&lt;/a&gt;))',re.UNICODE)
print p.sub(u'&lt;a href="'+ URL +'"&gt;\1&lt;/a&gt;',content)
print p.sub(u'&lt;a href="'+ URL +r'"&gt;\1&lt;/a&gt;',content)
</snippet></ROW><ROW><id>12106915</id><snippet>和製&lt;a href="http://www.google.com/"&gt;&lt;/a&gt;（わせいえいご）とは、日本で作られた&lt;a href="http://www.google.com/"&gt;&lt;/a&gt;風の日本語語彙のことである。
和製&lt;a href="http://www.google.com/"&gt;英語&lt;/a&gt;（わせいえいご）とは、日本で作られた&lt;a href="http://www.google.com/"&gt;英語&lt;/a&gt;風の日本語語彙のことである。
</snippet></ROW><ROW><id>12107048</id><snippet>iter()</snippet></ROW><ROW><id>12107048</id><snippet>for data_chunk in iter(lambda: data.read(1048576), ''):
    if not rpc_srv.chunk_upload(tf_uuid, data_chunk):
        raise Exception('Failed to upload data.')
</snippet></ROW><ROW><id>12107048</id><snippet>.seek()</snippet></ROW><ROW><id>12107048</id><snippet>.read()</snippet></ROW><ROW><id>12107072</id><snippet>def digitalSum(n):
    if n &lt; 10 :
        return n
    return n % 10 + digitalSum( n // 10 )
</snippet></ROW><ROW><id>12107072</id><snippet>n % 10</snippet></ROW><ROW><id>12107072</id><snippet>n // 10</snippet></ROW><ROW><id>12107072</id><snippet>5 + digitalSum( 1234 )
5 + 4 + digitalSum( 123 )
5 + 4 + 3 + digitalSum( 12 )
5 + 4 + 3 + 2 + 1 &lt;- done recursing
5 + 4 + 3 + 3
5 + 4 + 6
5 + 10
15
</snippet></ROW><ROW><id>12107088</id><snippet>{% if dict %}
  {% for key, value in dict.items %}
    list
  {% endfor %}
{endif}
</snippet></ROW><ROW><id>12107088</id><snippet>{% if dict %}</snippet></ROW><ROW><id>12107088</id><snippet>  {% for key, value in dict.items %}
    list
  {% endfor %}
</snippet></ROW><ROW><id>12107102</id><snippet>lastHeight</snippet></ROW><ROW><id>12107102</id><snippet>a</snippet></ROW><ROW><id>12107102</id><snippet>userSel</snippet></ROW><ROW><id>12107102</id><snippet>b</snippet></ROW><ROW><id>12107605</id><snippet>QWidget</snippet></ROW><ROW><id>12107605</id><snippet>QObject</snippet></ROW><ROW><id>12107605</id><snippet>QWebPage</snippet></ROW><ROW><id>12107605</id><snippet>QWidget</snippet></ROW><ROW><id>12107605</id><snippet>browser = QWebView()
browser.show()
</snippet></ROW><ROW><id>12107690</id><snippet>import pandas
matrix = pandas.DataFrame(index=['a','b','c'], columns=['one','two'])
</snippet></ROW><ROW><id>12107690</id><snippet>   one  two
a  NaN  NaN
b  NaN  NaN
c  NaN  NaN
</snippet></ROW><ROW><id>12107690</id><snippet>matrix['one']['a']=1</snippet></ROW><ROW><id>12107703</id><snippet>&gt;&gt;&gt; conf.L3socket
&lt;class __main__.L3PacketSocket at 0xb7bdf5fc&gt;
&gt;&gt;&gt; conf.L3socket=L3RawSocket
&gt;&gt;&gt; sr1(IP(dst="127.0.0.1")/ICMP())
&lt;IP  version=4L ihl=5L tos=0x0 len=28 id=40953 flags= frag=0L ttl=64 proto=ICMP chksum=0xdce5 src=127.0.0.1 dst=127.0.0.1 options='' |&lt;ICMP  type=echo-reply code=0 chksum=0xffff id=0x0 seq=0x0 |&gt;&gt;
</snippet></ROW><ROW><id>12107818</id><snippet>import random

prefix = '05'    
print prefix + str(random.randrange(1, 100)
</snippet></ROW><ROW><id>12107818</id><snippet>random.random()</snippet></ROW><ROW><id>12107986</id><snippet>import datetime 
import random
import numpy as np
import math
import sys
from openpyxl import Workbook
from openpyxl.cell import get_column_letter
from openpyxl import load_workbook
from tempfile import TemporaryFile
from random import normalvariate, expovariate, seed, gammavariate
from math import sqrt
from itertools import groupby

## Test Lists for testing code
lst_FC_error = []

## Using Lists and Excel
wb = Workbook()
dest_filename = r'RHF_Loop_test4py.xlsx'

EC_PlanData = []
sheet1 = wb.create_sheet(0)
sheet1.title = "EC_PlanData"

EC_FC_Data_original = []
sheet2 = wb.create_sheet(1)
sheet2.title = "EC_FC_Data_original"

FC_AccData = []
sheet5 = wb.create_sheet(4)
sheet5.title = "FC_Acc_Data"

EC_FC_Data_commited = []
sheet6 = wb.create_sheet(5)
sheet6.title = "EC_FC_Data_commited"

FC_Error = 0
alpha = 50
beta = 10
CurrentWeekRangeSize = 10
CurrentWeek = range(1,CurrentWeekRangeSize,1)
RemainingFCError = .2

for Global_counter in CurrentWeek:

    if Global_counter == 1:

        for index in range(Global_counter,Global_counter + 52 + CurrentWeekRangeSize,1):
            PlanWeek = index
            EC_demand = 500.0
            if  EC_demand &lt;= 0:
                EC_demand = EC_demand *(-1)
            EC_PlanData.append(EC_demand)
            d = sheet1.cell(row = Global_counter, column = PlanWeek)
            print "hello", Global_counter, PlanWeek
            d2 = sheet2.cell(row = Global_counter, column = PlanWeek)
            d.value = EC_demand
            d2.value = EC_demand
        wb.save('RHF_Loop_test4py.xlsx')
        print "-------------"
    else:
        #this was the original logic:
        #for index in range(Global_counter,Global_counter + 52,1):
        for index in range(Global_counter,52,1):
            PlanWeek = index
            DiffWeek = PlanWeek - Global_counter
            Sigma = 1
            mu = 0
            FC_VZ = random.normalvariate(mu, Sigma)
            if FC_VZ &gt; 0:
               FC_VZ = 1
            FC_Error = FC_Error+RemainingFCError   ## decrease demand
            fcerr = sheet5.cell(row = Global_counter, column = PlanWeek)
            fcerr.value = FC_Error

            Prev_Week = Global_counter - 1
            ECDD1 = sheet1.cell(row=Prev_Week, column=PlanWeek).value
            print Prev_Week, PlanWeek, ECDD1
            ECDD2 = sheet1.cell(row=Prev_Week, column=PlanWeek).value
            EC_demand = ECDD1 - (ECDD2*FC_Error)

            FC_Error = 0   
            ECPD = sheet1.cell(row = Global_counter, column=PlanWeek)
            ECPD.value = EC_demand
            FCAD = sheet6.cell(row = Global_counter, column=PlanWeek)
            FCAD.value = FC_Error
            IEFD = sheet2.cell(row = Global_counter, column=PlanWeek)
            IEFD.value = EC_demand
            EC_demand = 0
        wb.save('RHF_Loop_test4py.xlsx')
</snippet></ROW><ROW><id>12108037</id><snippet>return line</snippet></ROW><ROW><id>12108037</id><snippet>n</snippet></ROW><ROW><id>12108037</id><snippet>def big(dic, n):
    line = []
    for k in dic:
        if k &gt; n:
            line.append(k)
    return line
</snippet></ROW><ROW><id>12108037</id><snippet>def big(dic, n):
    return [k for k in dic if k&gt;n]
</snippet></ROW><ROW><id>12108037</id><snippet>{key: value}</snippet></ROW><ROW><id>12108037</id><snippet>k</snippet></ROW><ROW><id>12108037</id><snippet>[k for k in dic] = [key1, key2, ...]
</snippet></ROW><ROW><id>12108037</id><snippet>    return [dic[k] for k in dic if dic[k]&gt;n]
</snippet></ROW><ROW><id>12108037</id><snippet>dic</snippet></ROW><ROW><id>12108037</id><snippet>dict</snippet></ROW><ROW><id>12108037</id><snippet>type(dic)==dict</snippet></ROW><ROW><id>12108092</id><snippet>for</snippet></ROW><ROW><id>12108092</id><snippet>array.array</snippet></ROW><ROW><id>12108092</id><snippet>list</snippet></ROW><ROW><id>12108227</id><snippet> for k,v in tree.iteritems():
     print k, dict(v)
</snippet></ROW><ROW><id>12108227</id><snippet>defaultdict</snippet></ROW><ROW><id>12108227</id><snippet>dict</snippet></ROW><ROW><id>12108227</id><snippet>__getitem__</snippet></ROW><ROW><id>12108227</id><snippet>__repr__</snippet></ROW><ROW><id>12108227</id><snippet>defaultdict</snippet></ROW><ROW><id>12108227</id><snippet>dict</snippet></ROW><ROW><id>12108227</id><snippet>__copy__</snippet></ROW><ROW><id>12108227</id><snippet>__deepcopy__</snippet></ROW><ROW><id>12108227</id><snippet>defaultdict</snippet></ROW><ROW><id>12108227</id><snippet>copy</snippet></ROW><ROW><id>12108227</id><snippet>__reduce__</snippet></ROW><ROW><id>12108227</id><snippet>pickle</snippet></ROW><ROW><id>12108433</id><snippet>li2 = [['a']] * 3</snippet></ROW><ROW><id>12108433</id><snippet>li2[0]</snippet></ROW><ROW><id>12108433</id><snippet>li2[1]</snippet></ROW><ROW><id>12108433</id><snippet>li2[2]</snippet></ROW><ROW><id>12108433</id><snippet>li1 = [['a'], ['a'], ['a']]
</snippet></ROW><ROW><id>12108433</id><snippet>li1[0]</snippet></ROW><ROW><id>12108433</id><snippet>li1</snippet></ROW><ROW><id>12108433</id><snippet>li2</snippet></ROW><ROW><id>12108649</id><snippet>chunk_size = int(line.strip().split(';')[0], 16)
</snippet></ROW><ROW><id>12109036</id><snippet>redirect_template.html</snippet></ROW><ROW><id>12109036</id><snippet>&lt;html&gt;
    &lt;head&gt;
        &lt;script&gt;
            window.top.location.href = '{{ redirect_url }}';
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>12109036</id><snippet>return HttpResponseRedirect("www.google.com")
</snippet></ROW><ROW><id>12109036</id><snippet>return TemplateResponse(request, 'redirect_template.html', {'redirect_url':'www.google.com'}
</snippet></ROW><ROW><id>12109118</id><snippet>status.__dict__.items()</snippet></ROW><ROW><id>12109118</id><snippet>for k,v in status.__dict__.items():  #same thing as `vars(status)`
    print k,v
</snippet></ROW><ROW><id>12109118</id><snippet>__slots__</snippet></ROW><ROW><id>12109118</id><snippet>__dict__</snippet></ROW><ROW><id>12109118</id><snippet>__slots__</snippet></ROW><ROW><id>12109118</id><snippet>dir</snippet></ROW><ROW><id>12109118</id><snippet>getattr</snippet></ROW><ROW><id>12109118</id><snippet>for attr in dir(status):
    print attr, getattr(status,attr)
</snippet></ROW><ROW><id>12109118</id><snippet>__slots__</snippet></ROW><ROW><id>12109118</id><snippet>__getattr__</snippet></ROW><ROW><id>12109118</id><snippet>__dict__</snippet></ROW><ROW><id>12109118</id><snippet>inspect</snippet></ROW><ROW><id>12109680</id><snippet>lst = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']
dct = {'var_%s'%(i+1) : val for i, val in enumerate(lst)}

dct['var_1'] #accessing fist variable
&gt;&gt;&gt; 'a'
dct['var_11']
&gt;&gt;&gt; 'k'
dct['var_12']
&gt;&gt;&gt; KeyError: 'var_12'
</snippet></ROW><ROW><id>12109680</id><snippet>locals().update(dct)</snippet></ROW><ROW><id>12109824</id><snippet>DISPLAY</snippet></ROW><ROW><id>12109824</id><snippet>DISPLAY</snippet></ROW><ROW><id>12109824</id><snippet>Xvfb</snippet></ROW><ROW><id>12109824</id><snippet>DISPLAY</snippet></ROW><ROW><id>12110146</id><snippet>through</snippet></ROW><ROW><id>12110146</id><snippet>quantity</snippet></ROW><ROW><id>12110160</id><snippet>csv</snippet></ROW><ROW><id>12110160</id><snippet>for line in myfile:
  row = csv.reader([line]).next()
</snippet></ROW><ROW><id>12110160</id><snippet>"data"</snippet></ROW><ROW><id>12110160</id><snippet>data</snippet></ROW><ROW><id>12110160</id><snippet>d</snippet></ROW><ROW><id>12110387</id><snippet>Twisted</snippet></ROW><ROW><id>12110690</id><snippet>@skip("skip this test")
def testSomething(self):
    pass # TODO

def testBar(self):
    self.skipTest('We need a test here, really')

def testFoo(self):
    raise SkipTest('TODO: Write a test here too')
</snippet></ROW><ROW><id>12110949</id><snippet>localtime</snippet></ROW><ROW><id>12110949</id><snippet>SetSystemTime</snippet></ROW><ROW><id>12110949</id><snippet>time.gmtime()</snippet></ROW><ROW><id>12110949</id><snippet>tt = time.gmttime()
win32api.SetSystemTime(year, month, 0, day, 
    tt.tm_hour, tt.tt_min, tt.tt_sec, 0)
</snippet></ROW><ROW><id>12110949</id><snippet>datetime.datetime.utcnow()</snippet></ROW><ROW><id>12110949</id><snippet>import datetime
tt = datetime.datetime.utcnow().time()
win32api.SetSystemTime(year, month, 0, day,
    tt.hour, tt.minute, tt.second, tt.microsecond//1000)
</snippet></ROW><ROW><id>12110949</id><snippet>SetSystemTime</snippet></ROW><ROW><id>12110949</id><snippet>win32_systemtime_weekday = (python_weekday + 2) % 7)
</snippet></ROW><ROW><id>12111311</id><snippet>likes = json.loads(likes_data)
comments = json.loads(comments_data)
data = {'likes': likes['data'], 'comments': comments['data']}
self.response.out.write(json.dumps(data))
</snippet></ROW><ROW><id>12111371</id><snippet>&gt; ipython

In [1]: import requests

In [2]: r = requests.get('http://www.google.com')

In [3]: r.status_code
Out[3]: 200

In [4]: r.text[:80]
Out[4]: u'&lt;!doctype html&gt;&lt;html itemscope="itemscope" itemtype="http://schema.org/WebPage"&gt;'

In [5]: len(r.text)
Out[5]: 10969
</snippet></ROW><ROW><id>12111399</id><snippet>button = getattr(self, 'flipButton')
button.setEnabled(True)
</snippet></ROW><ROW><id>12111646</id><snippet>crud_utils</snippet></ROW><ROW><id>12111646</id><snippet>setup.py</snippet></ROW><ROW><id>12111646</id><snippet>python setup.py
</snippet></ROW><ROW><id>12111646</id><snippet>crud_utils/__init__.py</snippet></ROW><ROW><id>12111646</id><snippet>"""Some docstring here would help"""
</snippet></ROW><ROW><id>12111646</id><snippet>.pyc</snippet></ROW><ROW><id>12111817</id><snippet>dis</snippet></ROW><ROW><id>12111817</id><snippet>dis</snippet></ROW><ROW><id>12111817</id><snippet>disassemble</snippet></ROW><ROW><id>12111817</id><snippet>disassemble_string</snippet></ROW><ROW><id>12111817</id><snippet>sys.stdout</snippet></ROW><ROW><id>12111817</id><snippet>import sys
from cStringIO import StringIO

out = StringIO()
stdout = sys.stdout
sys.stdout = out
dis.dis()
sys.stdout = stdout
out = out.getvalue()
</snippet></ROW><ROW><id>12111817</id><snippet>import sys
from contextlib import contextmanager
from cStringIO import StringIO

@contextmanager
def captureStdOut(output):
    stdout = sys.stdout
    sys.stdout = output
    yield
    sys.stdout = stdout

out = StringIO()
with captureStdOut(out):
    dis.dis()
print out.getvalue()
</snippet></ROW><ROW><id>12111817</id><snippet>stdout</snippet></ROW><ROW><id>12111817</id><snippet>dis</snippet></ROW><ROW><id>12111817</id><snippet>&gt;&gt;&gt; out = StringIO()
&gt;&gt;&gt; with captureStdOut(out):
...     dis.dis(captureStdOut)
... 
&gt;&gt;&gt; print out.getvalue()
 83           0 LOAD_GLOBAL              0 (GeneratorContextManager)
              3 LOAD_DEREF               0 (func)
              6 LOAD_FAST                0 (args)
              9 LOAD_FAST                1 (kwds)
             12 CALL_FUNCTION_VAR_KW     0
             15 CALL_FUNCTION            1
             18 RETURN_VALUE        
</snippet></ROW><ROW><id>12112248</id><snippet>sum(letterGoodness.get(c,0) for c in yourstring.upper())
#                                             #^.upper for defensive programming
</snippet></ROW><ROW><id>12112248</id><snippet>letterGoodness</snippet></ROW><ROW><id>12112248</id><snippet>import string
letterGoodness = dict(zip(string.ascii_uppercase,letterGoodness))
</snippet></ROW><ROW><id>12112248</id><snippet>letterGoodness = dict(zip(string.ascii_uppercase,letterGoodness))
letterGoodness[' '] = 0
sum(letterGoodness[c] for c in yourstring)
</snippet></ROW><ROW><id>12112248</id><snippet>letterGoodness</snippet></ROW><ROW><id>12112248</id><snippet>ord</snippet></ROW><ROW><id>12112248</id><snippet> ordA = ord('A')
 sum(letterGoodness[ord(c)-ordA] for c in yourstring if c in string.ascii_uppercase)
</snippet></ROW><ROW><id>12112248</id><snippet>timeit</snippet></ROW><ROW><id>12112248</id><snippet>string.ascii_uppercase</snippet></ROW><ROW><id>12112248</id><snippet>str.__contains__</snippet></ROW><ROW><id>12112248</id><snippet>set.__contains__</snippet></ROW><ROW><id>12112248</id><snippet> ordA = ord('A')
 big_letters = set(string.ascii_uppercase)
 sum(letterGoodness[ord(c)-ordA] for c in yourstring.upper() if c in big_letters)
</snippet></ROW><ROW><id>12112457</id><snippet>pip install ipdb</snippet></ROW><ROW><id>12112457</id><snippet>import ipdb; ipdb.set_trace()</snippet></ROW><ROW><id>12113375</id><snippet>&gt;&gt;&gt; a = (1, 2, 4)
&gt;&gt;&gt; b = (1.1, 2.1, 4.1)
&gt;&gt;&gt; map(lambda a,b: 100*abs(a-b)/a &lt; 3, a, b)
[False, False, True]
</snippet></ROW><ROW><id>12113391</id><snippet># Declare a mutable object so that it can be pass via reference
user_input = [None]

# spawn a new thread to wait for input 
def get_user_input(user_input_ref):
    user_input_ref[0] = raw_input("Give me some Information: ")

mythread = threading.Thread(target=get_user_input, args=(user_input,))
mythread.daemon = True
mythread.start()

for increment in range(1, 10):
    time.sleep(1)
    if user_input[0] is not None:
        break
</snippet></ROW><ROW><id>12113473</id><snippet>sum(ord(c) for c in text)
</snippet></ROW><ROW><id>12113473</id><snippet>sum(ord(c) for c in text.lower())
</snippet></ROW><ROW><id>12113488</id><snippet>public class User {
  private String firstName;
  private String lastName;
  // etc.

  public User(String firstName, String lastName /*etc.*/){
    this.firstName = firstName;
    this.lastName = lastName;
    // etc.
  }
}
</snippet></ROW><ROW><id>12113488</id><snippet>userInfo</snippet></ROW><ROW><id>12113488</id><snippet>ArrayList&lt;User&gt; userInfo = new ArrayList&lt;User&gt;();
userInfo.add( new User("Some", "Guy" /*...*/) );
</snippet></ROW><ROW><id>12113633</id><snippet>&gt;&gt;&gt; ./manage.py test --help   
Usage: ./manage.py test [options] [appname ...]

Runs the test suite for the specified applications, or the entire site if no apps are specified.

[...]

--noinput             Tells Django to NOT prompt the user for input of any
                      kind.
</snippet></ROW><ROW><id>12113873</id><snippet>cython -a &lt;file&gt;</snippet></ROW><ROW><id>12113873</id><snippet>Array</snippet></ROW><ROW><id>12113873</id><snippet>cimport cython

@cython.boundscheck(False)
def find_regions_3d(...):
</snippet></ROW><ROW><id>12113873</id><snippet>cdef</snippet></ROW><ROW><id>12113873</id><snippet>ndarray</snippet></ROW><ROW><id>12113873</id><snippet> def find_regions_3D(np.ndarray[DTYPE_t,ndim=3] Array not None):
     [...]
     cdef np.ndarray[DTYPE_t,ndim=3] array_region = ...
     [etc.]
</snippet></ROW><ROW><id>12113873</id><snippet>cdef</snippet></ROW><ROW><id>12113873</id><snippet>unsigned int</snippet></ROW><ROW><id>12113873</id><snippet>int</snippet></ROW><ROW><id>12113873</id><snippet>ind</snippet></ROW><ROW><id>12113873</id><snippet>ind = np.where(Array==1)
cdef np.ndarray[DTYPE_t,ndim=1] ind_x = ind[0], ind_y = ind[1], ind_z = ind[2]
</snippet></ROW><ROW><id>12113873</id><snippet>for x,y,z in zip(..[0],..[1],..[2])</snippet></ROW><ROW><id>12113873</id><snippet>cdef int i
for i in range(len(ind_x)):
    x = ind_x[i]
    y = ind_y[i]
    z = ind_z[i]
</snippet></ROW><ROW><id>12113873</id><snippet>filter</snippet></ROW><ROW><id>12113873</id><snippet>max_region=array_region[xMin:xMax,yMin:yMax,zMin:zMax].max()
if max_region &gt; 0:
    new_region = min(filter(lambda i: i &gt; 0, array_region[xMin:xMax,yMin:yMax,zMin:zMax].ravel()))
    if max_region &gt; new_region:
        if max_region in equivalences:
            equivalences[max_region].add(new_region)
        else:
            equivalences[max_region] = set((new_region, ))
</snippet></ROW><ROW><id>12113873</id><snippet>max_region = 0
new_region = 2000000000 # "infinity"
for xi in range(xMin, xMax):
    for yi in range(yMin, yMax):
        for zi in range(zMin, zMax):
            val = array_region[xi,yi,zi]
            if val &gt; max_region: # val is the new maximum
                max_region = val

            if 0 &lt; val &lt; new_region: # val is the new minimum
                new_region = val

if max_region &gt; 0:
   if max_region &gt; new_region:
       if max_region in equivalences:
           equivalences[max_region].add(new_region)
       else:
           equivalences[max_region] = set((new_region, ))
else:
   n_regions += 1
   new_region = n_regions
</snippet></ROW><ROW><id>12113873</id><snippet>cdef</snippet></ROW><ROW><id>12113873</id><snippet>xi</snippet></ROW><ROW><id>12113873</id><snippet>yi</snippet></ROW><ROW><id>12113873</id><snippet>zi</snippet></ROW><ROW><id>12113873</id><snippet>val</snippet></ROW><ROW><id>12113873</id><snippet>equivalences</snippet></ROW><ROW><id>12113873</id><snippet>int</snippet></ROW><ROW><id>12113873</id><snippet>int</snippet></ROW><ROW><id>12113873</id><snippet>if max_region in equivalences:
    equivalences[max_region].add(new_region)
else:
    equivalences[max_region] = set((new_region, ))

[...]

while r in equivalences:
    r = min(equivalences[r])
</snippet></ROW><ROW><id>12113873</id><snippet>if max_region not in equivalences or new_region &lt; equivalences[max_region]:
    equivalences[max_region] = new_region

[...]

while r in equivalences:
    r = equivalences[r]
</snippet></ROW><ROW><id>12113873</id><snippet>equivalences</snippet></ROW><ROW><id>12113873</id><snippet>int</snippet></ROW><ROW><id>12113873</id><snippet>int</snippet></ROW><ROW><id>12113873</id><snippet>from libcpp.map cimport map</snippet></ROW><ROW><id>12113873</id><snippet>cdef map[int,int] equivalences</snippet></ROW><ROW><id>12113873</id><snippet>.. not in equivalences</snippet></ROW><ROW><id>12113873</id><snippet>equivalences.count(..) == 0</snippet></ROW><ROW><id>12113873</id><snippet>.. in equivalences</snippet></ROW><ROW><id>12113873</id><snippet>equivalences.count(..) &gt; 0</snippet></ROW><ROW><id>12114169</id><snippet>xml.minidom</snippet></ROW><ROW><id>12114169</id><snippet>from xml.dom.minidom import parse
def make_xml(filename, elements):
    dom = parse(filename)
    top_element = dom.documentElement

    for elmnt in elements:
        parent = doc.createElement('word-data')
        top_element.appendChild(parent)
        parent.appendChild(doc.createTextNode(elmnt))
    return dom



new_dom = add_to_xml_file('old_file.xml', ['foo','bar','baz'])

# save file
new_dom.writexml(open('new-bigger-file.xml','w'))
</snippet></ROW><ROW><id>12114231</id><snippet>// Document A, in collection 'comments':
{ _id: ObjectId('123...'), user: ObjectId('abc...'), text: 'Hi!' }

// Document B, in collection 'users':
{ _id: ObjectId('abc...'), name: 'Jesse' }
</snippet></ROW><ROW><id>12114423</id><snippet>{{ list2 }}  {# show list2 #}
{% for item in list1 %}
    {{ list2.0 }}
    {# remove list2.0 from list2 #}
    {{ list2.pop.0 }}
{% endfor %}
{{ list2 }}  {# empty #}
</snippet></ROW><ROW><id>12114423</id><snippet>pop</snippet></ROW><ROW><id>12114669</id><snippet>threading</snippet></ROW><ROW><id>12114669</id><snippet>multiprocessing</snippet></ROW><ROW><id>12114669</id><snippet>def retrieve_url(url):
    os.system('cclive %s' % url)

pool = multiprocessing.Pool(4)
pool.map(retrieve_url, list_of_urls)
</snippet></ROW><ROW><id>12114690</id><snippet>def recurse():
  try:
    recurse()
  except RuntimeError as e:
    if e.message == 'maximum recursion depth exceeded while calling a Python object':
      # don't recurse any longer
    else:
      # something else went wrong
</snippet></ROW><ROW><id>12114733</id><snippet>&gt;&gt;&gt; List1 = ['a', 'a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; List2 = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; import collections
&gt;&gt;&gt; counter = collections.Counter(List1)
&gt;&gt;&gt; counter.subtract(List2)
&gt;&gt;&gt; list(counter.elements())
['a', 'e']
</snippet></ROW><ROW><id>12114904</id><snippet>def permutateIndexes(array, perm):
    return array[perm][:, perm]
</snippet></ROW><ROW><id>12114904</id><snippet>def permutateIndexes(array, perm):
    return array[np.ix_(perm, perm)]
</snippet></ROW><ROW><id>12114904</id><snippet>def permutateIndexes(array, perm):
    return array[np.ix_(*(perm[:s] for s in array.shape))]
</snippet></ROW><ROW><id>12114958</id><snippet>urllib.quote_plus(url, safe=':')
</snippet></ROW><ROW><id>12114958</id><snippet>urllib.quote()</snippet></ROW><ROW><id>12114958</id><snippet>&gt;&gt;&gt; expected = 'https:%2F%2Fdl.dropbox.com%2Fu%2F94943007%2Ffile.kml'
&gt;&gt;&gt; url = 'https://dl.dropbox.com/u/94943007/file.kml'
&gt;&gt;&gt; urllib.quote(url, safe=':') == expected
True
</snippet></ROW><ROW><id>12114958</id><snippet>urllib.quote()</snippet></ROW><ROW><id>12114958</id><snippet>safe</snippet></ROW><ROW><id>12114958</id><snippet>/</snippet></ROW><ROW><id>12114958</id><snippet>''</snippet></ROW><ROW><id>12114958</id><snippet>safe</snippet></ROW><ROW><id>12114958</id><snippet>'/'</snippet></ROW><ROW><id>12114958</id><snippet>':'</snippet></ROW><ROW><id>12114958</id><snippet>urllib.quote_plus()</snippet></ROW><ROW><id>12114958</id><snippet>safe</snippet></ROW><ROW><id>12114958</id><snippet>'/'</snippet></ROW><ROW><id>12115141</id><snippet>list_of_ints=[112, 896, 455, 1164, 1164, 336, 386, 521, 1011, 1033]
list_of_strings=[['ZNF91', 'Q05481', 'VAR_057393', 'p.Tyr112His', 'Polymorphism', 'rs296091', '-'],
 ['ZNF91', 'Q05481', 'VAR_057394', 'p.Thr896Ala', 'Polymorphism', 'rs296093', '-']]
for ints in list_of_ints:
    for st in list_of_strings:
        if str(ints) in ','.join(st):
            print st


['ZNF91', 'Q05481', 'VAR_057393', 'p.Tyr112His', 'Polymorphism', 'rs296091', '-']
['ZNF91', 'Q05481', 'VAR_057394', 'p.Thr896Ala', 'Polymorphism', 'rs296093', '-']
</snippet></ROW><ROW><id>12115402</id><snippet>def call_clsinit(cls):
    cls._clsinit()
    return cls

@call_clsinit
class MyClass:
    @classmethod
    def _clsinit(cls):
        print "MyClass._clsinit()"
</snippet></ROW><ROW><id>12115402</id><snippet>def call_clsinit(*args, **kwargs):
    cls = type(*args, **kwargs)
    cls._clsinit()
    return cls;

class MyClass(object):
    __metaclass__ = call_clsinit

    @classmethod
    def _clsinit(cls):
        print "MyClass._clsinit()"
</snippet></ROW><ROW><id>12115563</id><snippet>Queue</snippet></ROW><ROW><id>12115697</id><snippet>pip install kombu==2.4.0
</snippet></ROW><ROW><id>12116147</id><snippet>foo(x)</snippet></ROW><ROW><id>12116147</id><snippet> # METHOD 2 : APPLY_ASYNC
 jobs = 4
 size = len(List1)
 pool = Pool(4)
 results = []
 # split the list into 4 equally sized chunks and submit those to the pool
 heads = range(size/jobs, size, size/jobs) + [size]
 tails = range(0,size,size/jobs)
 for tail,head in zip(tails, heads):
      werte = pool.apply_async(foo, args=(List1[tail:head],))
      results.append(werte)

 pool.close()
 pool.join() # wait for the pool to be done

 for result in results:
      werte = result.get() # get the return value from the sub jobs
</snippet></ROW><ROW><id>12116147</id><snippet>foo</snippet></ROW><ROW><id>12116147</id><snippet>List1</snippet></ROW><ROW><id>12116147</id><snippet>map</snippet></ROW><ROW><id>12116147</id><snippet>foo</snippet></ROW><ROW><id>12116147</id><snippet>apply_async</snippet></ROW><ROW><id>12116147</id><snippet>def foo(thing):
    print thing

map(foo, ['a','b','c','d'])
</snippet></ROW><ROW><id>12116147</id><snippet>chunksize</snippet></ROW><ROW><id>12116147</id><snippet>map</snippet></ROW><ROW><id>12116147</id><snippet>pool.map(foo, List1, chunksize=size/jobs) 
</snippet></ROW><ROW><id>12116147</id><snippet>map</snippet></ROW><ROW><id>12116214</id><snippet>    self.assertTrue(self.client.login(user='chris', password='password'),
        'Unexpected login failure.')
</snippet></ROW><ROW><id>12116214</id><snippet>username</snippet></ROW><ROW><id>12116231</id><snippet>def foo():
    spam = 'eggs'
    def bar():
        print spam
foo()
</snippet></ROW><ROW><id>12116231</id><snippet>foo</snippet></ROW><ROW><id>12116231</id><snippet>global</snippet></ROW><ROW><id>12116231</id><snippet>spam</snippet></ROW><ROW><id>12116231</id><snippet>nonlocal</snippet></ROW><ROW><id>12116231</id><snippet>spam</snippet></ROW><ROW><id>12116231</id><snippet>nonlocal</snippet></ROW><ROW><id>12116231</id><snippet>bar</snippet></ROW><ROW><id>12116231</id><snippet>bar</snippet></ROW><ROW><id>12116231</id><snippet>chunks</snippet></ROW><ROW><id>12116231</id><snippet>chunks</snippet></ROW><ROW><id>12116231</id><snippet>chunks</snippet></ROW><ROW><id>12116231</id><snippet>processchunk</snippet></ROW><ROW><id>12116231</id><snippet>chunks[0]</snippet></ROW><ROW><id>12116231</id><snippet>chunks</snippet></ROW><ROW><id>12116231</id><snippet>chunks</snippet></ROW><ROW><id>12116231</id><snippet>chunks</snippet></ROW><ROW><id>12116231</id><snippet>nonlocal</snippet></ROW><ROW><id>12116231</id><snippet>processchunk</snippet></ROW><ROW><id>12116275</id><snippet>SIGNAL</snippet></ROW><ROW><id>12116275</id><snippet>QtCore</snippet></ROW><ROW><id>12116275</id><snippet>self.connect(self.qFileButton, QtCore.SIGNAL("pressed()"), self.loadFile)
</snippet></ROW><ROW><id>12116275</id><snippet>self.qFileButton.pressed.connect(self.loadFile)
</snippet></ROW><ROW><id>12116275</id><snippet>click</snippet></ROW><ROW><id>12116275</id><snippet>press/release</snippet></ROW><ROW><id>12116275</id><snippet>clicked</snippet></ROW><ROW><id>12116275</id><snippet>self.qFileButton.clicked.connect(self.loadFile)
</snippet></ROW><ROW><id>12116514</id><snippet>while len(selected_elem) &lt; int(user_input):
    if 1 &lt;= int(user_input) &lt;= 5:
        random_elem = random.randrange(1, 10, 1)
        if random_elem not in selected_elem:
            selected_elem.append(random_elem)
    else:
        print ("That is not an option...")
</snippet></ROW><ROW><id>12116514</id><snippet>user_input</snippet></ROW><ROW><id>12116514</id><snippet>int()</snippet></ROW><ROW><id>12116514</id><snippet>while True:
    num = input('Enter number between 1 - 5:')
    if 1 &lt;= num &lt;= 5:
        print 'number is fine' 
        break
    else:
        print 'number out of range'
</snippet></ROW><ROW><id>12116514</id><snippet>while True:
    try:
        num = input('Enter number between 1 - 5:')
        if 1 &lt;= num &lt;= 5:
            print 'number is fine'
            break
        else:
            print 'number out of range'
    except NameError:
        print 'Input was not a digit - please try again.'
</snippet></ROW><ROW><id>12116514</id><snippet>break</snippet></ROW><ROW><id>12116514</id><snippet>print</snippet></ROW><ROW><id>12116561</id><snippet>NULL</snippet></ROW><ROW><id>12116561</id><snippet>NULL</snippet></ROW><ROW><id>12116561</id><snippet>void*</snippet></ROW><ROW><id>12116561</id><snippet>0</snippet></ROW><ROW><id>12116561</id><snippet>NULL</snippet></ROW><ROW><id>12116561</id><snippet>None</snippet></ROW><ROW><id>12116561</id><snippet>nullptr</snippet></ROW><ROW><id>12116698</id><snippet>return HttpResponseRedirect('/explore/?search=test&amp;page=1')
</snippet></ROW><ROW><id>12116698</id><snippet>search = request.GET.get('search')
page = request.GET.get('page')
</snippet></ROW><ROW><id>12116734</id><snippet>import re
removedSpaces = re.sub(r'\n{3,}', "\n\n", lineWithSpaces)
</snippet></ROW><ROW><id>12116854</id><snippet>...</snippet></ROW><ROW><id>12116854</id><snippet>Ellipsis</snippet></ROW><ROW><id>12116854</id><snippet>slice = myarray[...,i]
</snippet></ROW><ROW><id>12116966</id><snippet>wanted = set(['123', '789'])

with open("inputfile.txt",'r') as infile, open("outfile.txt",'w') as outfile: 
    for line in infile:
        if line.startswith('NUM,'):
            UNIT = line.strip().split(',')[1] 
            if UNIT not in wanted:
                for _ in xrange(4):
                    infile.next()
                continue

        outfile.write(line)
</snippet></ROW><ROW><id>12117065</id><snippet>type</snippet></ROW><ROW><id>12117065</id><snippet>add_argument</snippet></ROW><ROW><id>12117065</id><snippet>float</snippet></ROW><ROW><id>12117065</id><snippet>def restricted_float(x):
    x = float(x)
    if x &lt; 0.0 or x &gt; 1.0:
        raise argparse.ArgumentTypeError("%r not in range [0.0, 1.0]"%(x,))
    return x

p = argparse.ArgumentParser()
p.add_argument("--arg", type=restricted_float)
</snippet></ROW><ROW><id>12117084</id><snippet>name</snippet></ROW><ROW><id>12117084</id><snippet>indegree</snippet></ROW><ROW><id>12117084</id><snippet>outdegree</snippet></ROW><ROW><id>12117084</id><snippet>&gt;&gt;&gt; g = Graph.Ring(4)
&gt;&gt;&gt; g.vs["name"] = ["A", "B", "C", "D"]
&gt;&gt;&gt; g.degree("C")
2
&gt;&gt;&gt; g.delete_vertices(["B"])
&gt;&gt;&gt; g.degree("C")
1
</snippet></ROW><ROW><id>12117084</id><snippet>B</snippet></ROW><ROW><id>12117084</id><snippet>C</snippet></ROW><ROW><id>12117084</id><snippet>select</snippet></ROW><ROW><id>12117084</id><snippet>AS = S.vs.select(lambda vertex: T.outdegree(vertex["name"]) &lt; 1.01 * E(S,T)/S.vcount())
</snippet></ROW><ROW><id>12117084</id><snippet>S</snippet></ROW><ROW><id>12117084</id><snippet>T</snippet></ROW><ROW><id>12117094</id><snippet>keys = ['name', 'last_name', 'phone_number', 'email']
dict1 = {x:dict1[x] for x in keys}
</snippet></ROW><ROW><id>12117110</id><snippet>private</snippet></ROW><ROW><id>12117110</id><snippet>private</snippet></ROW><ROW><id>12117110</id><snippet>protected</snippet></ROW><ROW><id>12117333</id><snippet># what you described:
In [15]: import numpy as np
In [16]: import pandas
In [17]: x = pandas.read_csv('weird.csv')

In [19]: x.dtypes
Out[19]: 
int_field            int64
floatlike_field    float64  # what you don't want?
str_field           object

In [20]: datatypes = [('int_field','i4'),('floatlike','S10'),('strfield','S10')]

In [21]: y_np = np.loadtxt('weird.csv', dtype=datatypes, delimiter=',', skiprows=1)

In [22]: y_np
Out[22]: 
array([(1, '2.31', 'one'), (2, '3.12', 'two'), (3, '1.32', 'three ')], 
      dtype=[('int_field', '&lt;i4'), ('floatlike', '|S10'), ('strfield', '|S10')])

In [23]: y_pandas = pandas.DataFrame.from_records(y_np)

In [25]: y_pandas.dtypes
Out[25]: 
int_field     int64
floatlike    object  # better?
strfield     object
</snippet></ROW><ROW><id>12117380</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.scene = QtGui.QGraphicsScene(self)
        self.scene.addPixmap(QtGui.QPixmap('image.jpg'))
        self.scene.installEventFilter(self)
        self.view = QtGui.QGraphicsView(self)
        self.view.setScene(self.scene)
        self.label = QtGui.QLabel(self)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.view)
        layout.addWidget(self.label)

    def eventFilter(self, source, event):
        if (source is self.scene and
            event.type() == QtCore.QEvent.GraphicsSceneMouseRelease and
            event.button() == QtCore.Qt.LeftButton):
            pos = event.scenePos()
            self.label.setText('x=%0.01f,y=%0.01f' % (pos.x(), pos.y()))
        return QtGui.QWidget.eventFilter(self, source, event)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>12117421</id><snippet>remove</snippet></ROW><ROW><id>12117421</id><snippet>draw</snippet></ROW><ROW><id>12117421</id><snippet>m</snippet></ROW><ROW><id>12117421</id><snippet>basemap</snippet></ROW><ROW><id>12117421</id><snippet> barbs1,barbs2 = m.barbs(...)
 # some code
 barbs1.remove()
 barbs2.remove()
 plt.draw()
</snippet></ROW><ROW><id>12117440</id><snippet>ascii</snippet></ROW><ROW><id>12117440</id><snippet>C:\&gt;python -m timeit -s "content=u'&lt;p&gt;blah&lt;br/&gt;blah&lt;/p&gt;'" "content.replace(u'&lt;p&gt;',u'&lt;div&gt;').replace(u'&lt;/p&gt;',u'&lt;/div&gt;').replace(u'&lt;br/&gt;',u'')"
1000000 loops, best of 3: 1.09 usec per loop

C:\&gt;python -m timeit -s "content=u'&lt;p&gt;blah&lt;br/&gt;blah&lt;/p&gt;'" "content.replace('&lt;p&gt;','&lt;div&gt;').replace('&lt;/p&gt;','&lt;/div&gt;').replace('&lt;br/&gt;','')"
1000000 loops, best of 3: 1.76 usec per loop

C:\&gt;python -m timeit -s "content=u'&lt;p&gt;blah&lt;br/&gt;blah&lt;/p&gt;'" "content.replace(r'&lt;p&gt;',r'&lt;div&gt;').replace(r'&lt;/p&gt;',r'&lt;/div&gt;').replace(r'&lt;br/&gt;',r'')"
1000000 loops, best of 3: 1.75 usec per loop
</snippet></ROW><ROW><id>12117475</id><snippet>\r</snippet></ROW><ROW><id>12117475</id><snippet>open(filename)</snippet></ROW><ROW><id>12117475</id><snippet>'rU'</snippet></ROW><ROW><id>12117475</id><snippet>\r</snippet></ROW><ROW><id>12117475</id><snippet>with open(filename, "rU") as f:
    # do your stuff here.
    ...
</snippet></ROW><ROW><id>12117475</id><snippet>\r</snippet></ROW><ROW><id>12117622</id><snippet>Counter()</snippet></ROW><ROW><id>12117622</id><snippet>strip()</snippet></ROW><ROW><id>12117622</id><snippet>\n</snippet></ROW><ROW><id>12117622</id><snippet>from collections import Counter
with open('x.txt') as f1,open('y.txt','w') as f2:
    c=Counter(x.strip() for x in f1)
    for x in c:
        print x,c[x]   #do f2.write() here if you want to write them to f2
</snippet></ROW><ROW><id>12117622</id><snippet>A 1
C 3
EH 1
IRQ 1
V 2
H 1
IRG 1
</snippet></ROW><ROW><id>12117866</id><snippet>{% if currentuser|AccessOK(constant-parameter) %} 
    &lt;li&gt;&lt;a href="/tokens-step1"&gt;Tokens&lt;/a&gt;&lt;/li&gt;
{% endif %} 
</snippet></ROW><ROW><id>12117866</id><snippet>def AccessOK(xCurrentUser, PermissionID):
</snippet></ROW><ROW><id>12117994</id><snippet>#!/usr/bin/env python3

import argparse, glob, sys, itertools

parser = argparse.ArgumentParser()
parser.add_argument("src_path", metavar="path", type=str,
    help="Path to files to be merged; enclose in quotes, accepts * as wildcard for directories or filenames")

args = parser.parse_args()
files = glob.iglob(args.src_path)

try:
    first_file = files.next()
except StopIteration:
    print('File does not exist: ' + args.src_path, file=sys.stderr)
    sys.exit(1)
for file in itertools.chain([first_file], files):
    print('File exists: ' + file)
</snippet></ROW><ROW><id>12117994</id><snippet>#!/usr/bin/env python3

import argparse, glob, sys

parser = argparse.ArgumentParser()
parser.add_argument("src_path", metavar="path", type=str,
    help="Path to files to be merged; enclose in quotes, accepts * as wildcard for directories or filenames")

args = parser.parse_args()
files = glob.glob(args.src_path)

if not files:
    print('File does not exist: ' + args.src_path, file=sys.stderr)
for file in files:
    print('File exists: ' + file)
</snippet></ROW><ROW><id>12118055</id><snippet>!== null</snippet></ROW><ROW><id>12118055</id><snippet>?wsdl=1</snippet></ROW><ROW><id>12118055</id><snippet>app/code/core/Mage/Api/Server/.../Adapter/Soap.php</snippet></ROW><ROW><id>12118055</id><snippet>index.php</snippet></ROW><ROW><id>12118055</id><snippet>http://localhost/magento/index.php/api/soap/?wsdl=1</snippet></ROW><ROW><id>12118130</id><snippet>sender</snippet></ROW><ROW><id>12118130</id><snippet>def loadFile(self):
    selFile = QtGui.QFileDialog.getOpenFileName()
    if self.sender() == self.qFileButton:
        self.qFileTF.setText(selFile)
    elif self.sender() == self.lhFileTF:
        self.lhFileTF.setText(selFile)
    else:
        self.oldQTF.setText(selFile)      
</snippet></ROW><ROW><id>12118141</id><snippet>PCANode</snippet></ROW><ROW><id>12118141</id><snippet>__call__</snippet></ROW><ROW><id>12118141</id><snippet>PCANode</snippet></ROW><ROW><id>12118141</id><snippet>execute</snippet></ROW><ROW><id>12118176</id><snippet>12.2f</snippet></ROW><ROW><id>12118176</id><snippet>&gt;&gt;&gt; print "|{:^12.2f}|".format(145.6798)
|   145.68   |
</snippet></ROW><ROW><id>12118176</id><snippet>|</snippet></ROW><ROW><id>12118176</id><snippet>12</snippet></ROW><ROW><id>12118283</id><snippet>You may pass a file-like object to filename as an alternative to a string.</snippet></ROW><ROW><id>12118283</id><snippet>from StringIO import StringIO
x = StringIO()
c = canvas.Canvas(x)
... dostuff
c.save()
output = x.getvalue()
self.write_response(output)
</snippet></ROW><ROW><id>12118283</id><snippet>close</snippet></ROW><ROW><id>12118283</id><snippet>save()</snippet></ROW><ROW><id>12118327</id><snippet>s</snippet></ROW><ROW><id>12118327</id><snippet>~\AppData\Roaming\Dropbox\host.db</snippet></ROW><ROW><id>12118327</id><snippet>def _get_appdata_path():
    import ctypes
    from ctypes import wintypes, windll
    CSIDL_APPDATA = 26
    _SHGetFolderPath = windll.shell32.SHGetFolderPathW
    _SHGetFolderPath.argtypes = [wintypes.HWND,
                                 ctypes.c_int,
                                 wintypes.HANDLE,
                                 wintypes.DWORD,
                                 wintypes.LPCWSTR]
    path_buf = wintypes.create_unicode_buffer(wintypes.MAX_PATH)
    result = _SHGetFolderPath(0, CSIDL_APPDATA, 0, 0, path_buf)
    return path_buf.value

def dropbox_home():
    from platform import system
    import base64
    import os.path
    _system = system()
    if _system in ('Windows', 'cli'):
        host_db_path = os.path.join(_get_appdata_path(),
                                    'Dropbox',
                                    'host.db')
    elif _system in ('Linux', 'Darwin'):
        host_db_path = os.path.expanduser('~'
                                          '/.dropbox'
                                          '/host.db')
    else:
        raise RuntimeError('Unknown system={}'
                           .format(_system))
    if not os.path.exists(host_db_path):
        raise RuntimeError("Config path={} doesn't exists"
                           .format(p))
    with open(host_db_path, 'r') as f:
        data = f.read().split()

    return base64.b64decode(data[1])
</snippet></ROW><ROW><id>12118422</id><snippet># I'm assuming that python is available on the command line
$ cd path/to/flaskr
$ python

# Python then runs and you can import flaskr
&gt;&gt;&gt; from flaskr import init_db; init_db()
&gt;&gt;&gt; exit()
</snippet></ROW><ROW><id>12118422</id><snippet>&gt;&gt;&gt; from sys import path
&gt;&gt;&gt; for fp in path:
...     print fp
</snippet></ROW><ROW><id>12118422</id><snippet>init_db</snippet></ROW><ROW><id>12118448</id><snippet>import time
from multiprocessing import Pool, Value, Lock
import decimal
import random

number = Value('i', 0)
lock = Lock()
lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h','i', 'j', 'k']

def thefunction(listi):
    time.sleep(decimal.Decimal(random.random()))
    with lock:
        number.value += 1
        print time.strftime('%H:%M:%S'), number.value, listi

def initializer(*args):
    global number, lock
    number, lock = args

pool = Pool(4, initializer, (number, lock))
pool.map(thefunction, lists)
print number.value
</snippet></ROW><ROW><id>12118485</id><snippet>flask.Flask</snippet></ROW><ROW><id>12118485</id><snippet>send_static_file</snippet></ROW><ROW><id>12118485</id><snippet>class SecuredStaticFlask(Flask):
    def send_static_file(self, filename):
        # Get user from session
        if user.is_authenticated():
            return super(SecuredStaticFlask, self).send_static_file(filename)
        else:
            abort(403) 
            # Or 401 (or 404), whatever is most appropriate for your situation
</snippet></ROW><ROW><id>12118485</id><snippet>send_static_file</snippet></ROW><ROW><id>12118545</id><snippet>print msg
</snippet></ROW><ROW><id>12118545</id><snippet>sys.stdout.write(msg)
</snippet></ROW><ROW><id>12118545</id><snippet>import sys</snippet></ROW><ROW><id>12118545</id><snippet>print</snippet></ROW><ROW><id>12118545</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>12118621</id><snippet>file_content</snippet></ROW><ROW><id>12118621</id><snippet>open(from_file)</snippet></ROW><ROW><id>12118621</id><snippet>.read()</snippet></ROW><ROW><id>12118644</id><snippet>int(float(yourstring))</snippet></ROW><ROW><id>12118677</id><snippet>venv/bin/activate</snippet></ROW><ROW><id>12118677</id><snippet>pip</snippet></ROW><ROW><id>12118677</id><snippet>virtualenv venv</snippet></ROW><ROW><id>12118677</id><snippet>deactivate</snippet></ROW><ROW><id>12118700</id><snippet>dict((k, v) for k, v in metadata.iteritems() if v)</snippet></ROW><ROW><id>12118763</id><snippet>"="</snippet></ROW><ROW><id>12118763</id><snippet>script, first, second, third = argv
</snippet></ROW><ROW><id>12118763</id><snippet>argv</snippet></ROW><ROW><id>12118763</id><snippet>=</snippet></ROW><ROW><id>12118763</id><snippet>argv</snippet></ROW><ROW><id>12118763</id><snippet>test.py this is sure cool
</snippet></ROW><ROW><id>12118763</id><snippet>argv</snippet></ROW><ROW><id>12118763</id><snippet>['test.py', 'this', 'is', 'sure', 'cool']</snippet></ROW><ROW><id>12118763</id><snippet>argv</snippet></ROW><ROW><id>12118763</id><snippet>  script is set to  "this.py"  # the string is in argv[0]
  first to "is"     # argv[1]
  second to "sure"  # argv[2]
</snippet></ROW><ROW><id>12118763</id><snippet>  third to "cool"   # argv[3]
</snippet></ROW><ROW><id>12118763</id><snippet>  script, first, second, third = argv
</snippet></ROW><ROW><id>12118763</id><snippet>  script = argv[0]
  first = argv[1]
  second = argv[2]
  third = argv[3]
</snippet></ROW><ROW><id>12118763</id><snippet> computeData.py input.txt result.txt
</snippet></ROW><ROW><id>12118787</id><snippet>if x in answers</snippet></ROW><ROW><id>12118787</id><snippet>answers</snippet></ROW><ROW><id>12118787</id><snippet>get_answer()</snippet></ROW><ROW><id>12118787</id><snippet>get_answer</snippet></ROW><ROW><id>12118787</id><snippet>get_answer</snippet></ROW><ROW><id>12118787</id><snippet>['hit']</snippet></ROW><ROW><id>12118787</id><snippet>print y</snippet></ROW><ROW><id>12118787</id><snippet>[]</snippet></ROW><ROW><id>12118787</id><snippet>print y</snippet></ROW><ROW><id>12118787</id><snippet>get_answer</snippet></ROW><ROW><id>12118787</id><snippet>[]</snippet></ROW><ROW><id>12118787</id><snippet>print a</snippet></ROW><ROW><id>12118787</id><snippet>foo()</snippet></ROW><ROW><id>12118787</id><snippet>get_answer</snippet></ROW><ROW><id>12118787</id><snippet>[]</snippet></ROW><ROW><id>12118787</id><snippet>get_answer</snippet></ROW><ROW><id>12118787</id><snippet>return get_answer()</snippet></ROW><ROW><id>12118787</id><snippet>get_answer</snippet></ROW><ROW><id>12118787</id><snippet>def get_answer():
    answers = ['hit', 'stick', 'double', 'split']
    while True:
        print "\nWould you like to 'hit', 'stick', 'double' down or 'split'?"
        answer = raw_input('&gt; ')
        if answer in answers:
            return answer

print get_answer()
</snippet></ROW><ROW><id>12118982</id><snippet>INSERT</snippet></ROW><ROW><id>12118982</id><snippet>UPDATE</snippet></ROW><ROW><id>12118982</id><snippet>UPDATE</snippet></ROW><ROW><id>12118982</id><snippet>VACUUM</snippet></ROW><ROW><id>12119043</id><snippet>while True:
    sleeptime = 60 - datetime.utcnow().second
    time.sleep(sleeptime)
    ...
</snippet></ROW><ROW><id>12119043</id><snippet>while True:
    t = datetime.utcnow()
    sleeptime = 60 - (t.second + t.microsecond/1000000.0)
    time.sleep(sleeptime)
    ...
</snippet></ROW><ROW><id>12119210</id><snippet>timeit</snippet></ROW><ROW><id>12119488</id><snippet># this will remove minimized status 
# and restore window with keeping maximized/normal state
window.setWindowState(window.windowState() &amp; ~QtCore.Qt.WindowMinimized | QtCore.Qt.WindowActive)

# this will activate the window
window.activateWindow()
</snippet></ROW><ROW><id>12119488</id><snippet>setWindowState</snippet></ROW><ROW><id>12119488</id><snippet>activateWindow</snippet></ROW><ROW><id>12119490</id><snippet>dropwhile</snippet></ROW><ROW><id>12119490</id><snippet>itertools.ifilterfalse</snippet></ROW><ROW><id>12119558</id><snippet>c = ser.read()

if c == '0':
   spotify.playpause()
elif c == '1':
   spotify.volumeUp()
...
</snippet></ROW><ROW><id>12119574</id><snippet>regex = re.compile(r"My big honking regex")
for datafile in files:
    content = datafile.read()
    result = regex.sub("Replacement", content)
</snippet></ROW><ROW><id>12119682</id><snippet>ScribbleMedia</snippet></ROW><ROW><id>12119682</id><snippet>class ScribbleMedia(models.Model):
     media = models.FileField(upload_to=get_file_path)

     def __unicode__(self):
        return self.media
     def find_typecheck(self):
        filename = self.media.name
        try:
           ext = filename.split('.')[-1]
           if ext == 'jpeg':
              a=1
           else:
              a=2
        except Exception:
           a=-1 #couldn't determine
        return a
</snippet></ROW><ROW><id>12119682</id><snippet>{% if sc_media_obj.find_typecheck ==1 %}
    do something
{% else %}
    do something else
{% endif %}
</snippet></ROW><ROW><id>12119709</id><snippet>__all__</snippet></ROW><ROW><id>12119709</id><snippet>from ... import *</snippet></ROW><ROW><id>12119709</id><snippet>__all__</snippet></ROW><ROW><id>12119709</id><snippet>__all__</snippet></ROW><ROW><id>12119802</id><snippet>    trades = []
    enddate = datetime.date(1900, 1, 1)
    try:
        for startdate in startdates:
            if enddate &lt;= startdate:
                enddate = enddates.next()
                while enddate &lt;= startdate:
                    enddate = enddates.next()
                trades.append((startdate, enddate))
    except StopIteration:
        trades.append((startdate, None))
</snippet></ROW><ROW><id>12120215</id><snippet>'a'</snippet></ROW><ROW><id>12120215</id><snippet>with open('data1.txt','a') as f,open('data1.txt') as f1:
    lines=[x.strip() for x in f1]        #read the lines
    num=len(lines)+1
    f.write("{0}.{1:22s}{2}\n".format((num),name,ha))
</snippet></ROW><ROW><id>12120215</id><snippet>def sortfile(fil):
    with open(fil,'r+') as f:
        lines=[x.strip() for x in f]
        lines.sort(key=lambda x:int(x.split()[-1]))   #sort as per score
        #print(lines)
        f.truncate(0)          #empty the file
        f.seek(0)              #move the cursor back to the start of the file
        for i,x in enumerate(lines):
            ind=x.index('.')           #fetch the index of '.'
            #print ("{0}.{1}\n".format(i+1,x[ind+1:]))
            f.write("{0}.{1}\n".format(i+1,x[ind+1:]))

sortfile('data1.txt')    #call the function whenever you want to sort the file as per scores
</snippet></ROW><ROW><id>12120295</id><snippet>BlogPost</snippet></ROW><ROW><id>12120311</id><snippet>timetuple()</snippet></ROW><ROW><id>12120311</id><snippet>today</snippet></ROW><ROW><id>12120311</id><snippet>time.mktime(today)</snippet></ROW><ROW><id>12120311</id><snippet>&gt;&gt;&gt; time.mktime(today.timetuple())
1345845600.0
</snippet></ROW><ROW><id>12120311</id><snippet>yesterday</snippet></ROW><ROW><id>12120311</id><snippet>today</snippet></ROW><ROW><id>12120311</id><snippet>time.mktime(datetime.date.today().timetuple())
</snippet></ROW><ROW><id>12120533</id><snippet>from ftplib import FTP
from time import sleep

ftp = FTP('localhost')
ftp.login()

def changemon(dir='./'):
    ls_prev = set()

    while True:
        ls = set(ftp.nlst(dir))

        add, rem = ls-ls_prev, ls_prev-ls
        if add or rem: yield add, rem

        ls_prev = ls
        sleep(5)

for add, rem in changemon():
    print('\n'.join('+ %s' % i for i in add))
    print('\n'.join('- %s' % i for i in remove))

ftp.quit()
</snippet></ROW><ROW><id>12120548</id><snippet>2.7.3</snippet></ROW><ROW><id>12120786</id><snippet>import subprocess

...

# Call make to clean
if env.GetOption('clean'):
    subprocess.call(['make', 'clean'])  
</snippet></ROW><ROW><id>12120786</id><snippet>make clean</snippet></ROW><ROW><id>12121094</id><snippet>.py</snippet></ROW><ROW><id>12121094</id><snippet>.pyw</snippet></ROW><ROW><id>12121094</id><snippet>.py</snippet></ROW><ROW><id>12121094</id><snippet>.pyw</snippet></ROW><ROW><id>12121358</id><snippet>r'href="((?:\.\./)+external\.html\?link=)([^"]+)"'
</snippet></ROW><ROW><id>12121358</id><snippet>href=""</snippet></ROW><ROW><id>12121358</id><snippet>../</snippet></ROW><ROW><id>12121358</id><snippet>external.html?link=</snippet></ROW><ROW><id>12121358</id><snippet>"</snippet></ROW><ROW><id>12121358</id><snippet>../../external.html?link=</snippet></ROW><ROW><id>12121358</id><snippet>../../external.html?link=</snippet></ROW><ROW><id>12121358</id><snippet>.sub()</snippet></ROW><ROW><id>12121358</id><snippet>import re
redirects = re.compile(r'href="(?:\.\./)+external\.html\?link=([^"]+)"')

# ...
redirects.sub(r'href="\1"', somehtmlstring)
</snippet></ROW><ROW><id>12121745</id><snippet>chin_split.read()</snippet></ROW><ROW><id>12121830</id><snippet>&gt;&gt;&gt; from __future__ import unicode_literals
&gt;&gt;&gt; s=['xx','yy','zz','aa']
&gt;&gt;&gt; s
[u'xx', u'yy', u'zz', u'aa']
</snippet></ROW><ROW><id>12121830</id><snippet>&gt;&gt;&gt; from __future__ import unicode_literals
&gt;&gt;&gt; s=['xx','yy','zz','aa']
&gt;&gt;&gt; s
['xx', 'yy', 'zz', 'aa']
</snippet></ROW><ROW><id>12122162</id><snippet>a</snippet></ROW><ROW><id>12122162</id><snippet>for k in a.keys():
    if k in all:
        all[k].append(a[k])
    else:
        all[k] = a[k]
</snippet></ROW><ROW><id>12122162</id><snippet>k</snippet></ROW><ROW><id>12122162</id><snippet>all</snippet></ROW><ROW><id>12122162</id><snippet>else</snippet></ROW><ROW><id>12122162</id><snippet>all[k]</snippet></ROW><ROW><id>12122162</id><snippet>a[k]</snippet></ROW><ROW><id>12122162</id><snippet>a[k]</snippet></ROW><ROW><id>12122162</id><snippet>all[k]</snippet></ROW><ROW><id>12122162</id><snippet>all[k]</snippet></ROW><ROW><id>12122162</id><snippet>a[k]</snippet></ROW><ROW><id>12122162</id><snippet>a[k]</snippet></ROW><ROW><id>12122162</id><snippet>all[k] = a[k]</snippet></ROW><ROW><id>12122162</id><snippet>for k in a.keys():
    if k not in all:
        all[k] = []
    all[k].extend(a[k])
</snippet></ROW><ROW><id>12122162</id><snippet>extend</snippet></ROW><ROW><id>12122162</id><snippet>append</snippet></ROW><ROW><id>12122162</id><snippet>all[k]</snippet></ROW><ROW><id>12122162</id><snippet>a[k]</snippet></ROW><ROW><id>12122851</id><snippet>setattr()</snippet></ROW><ROW><id>12122851</id><snippet>for i in [["A", 0], ["B", 1], ["C", 2]]:
    tmp = do_stuff(tmp2[i[1]])
    if tmp != None: setattr(inst, i[0], tmp)
</snippet></ROW><ROW><id>12122851</id><snippet>getattr()</snippet></ROW><ROW><id>12122851</id><snippet>setattr(x, 'foobar', 123)</snippet></ROW><ROW><id>12122851</id><snippet>x.foobar = 123</snippet></ROW><ROW><id>12122851</id><snippet>None</snippet></ROW><ROW><id>12122851</id><snippet>is</snippet></ROW><ROW><id>12122851</id><snippet>is not</snippet></ROW><ROW><id>12122851</id><snippet>for i in [["A", 0], ["B", 1], ["C", 2]]:
    tmp = do_stuff(tmp2[i[1]])
    if tmp is not None:
        setattr(inst, i[0], tmp)
</snippet></ROW><ROW><id>12122851</id><snippet>if</snippet></ROW><ROW><id>12122880</id><snippet>def slope(X,Y,i):
    res = (Y[i]-Y[0])*1.0/(X[i]-X[0])
    return res

len_thold=0.2

def notgood(lst1,lst2):
    if len(lst1)&lt;2 or len(lst2)&lt;2:
        return True
    return  False

def adjust_miss(X,Y):
    slope_thold=1.1
    if len(X)==len(Y):
        return
    newlen=min(len(X),len(Y))  
    if len(Y)-len(X)&lt;0:
        aim=X
    else:
        aim=Y
    difflen=abs(len(Y)-len(X))
    roughk=slope(X,Y,newlen-1)
    for i in xrange(1,newlen):
        if difflen==0:
            break
        k=slope(X,Y,i)
        if (len(Y)&lt;len(X) and k&gt;slope_thold*roughk) or (len(Y)&gt;len(X) and k&lt;1.0/(slope_thold*roughk)):
            aim.pop(i)
            difflen-=1
    if difflen&gt;0:
        for i in xrange(difflen):
            aim.pop(-1) 
    assert len(X) == len(Y)

def test_adjust():
    X=range(10)
    Y=range(10)
    Y.pop(3)
    adjust_miss(X,Y)
    print X,Y
</snippet></ROW><ROW><id>12123396</id><snippet>$DISPLAY</snippet></ROW><ROW><id>12123396</id><snippet>ssh -X</snippet></ROW><ROW><id>12123396</id><snippet>localhost:10</snippet></ROW><ROW><id>12123681</id><snippet>executesql</snippet></ROW><ROW><id>12123681</id><snippet>.execute()</snippet></ROW><ROW><id>12123681</id><snippet>db_test = DAL('mysql://root:root@localhost/test')

sqlddl = """CREATE TEMPORARY TABLE tmp LIKE people;
INSERT INTO tmp SELECT * FROM people;
INSERT INTO tmp SELECT * FROM people;"""

for statement in sqlddl.split(';'):
    db_test.executesql(statement.strip())

sqlselect = "SELECT * FROM tmp;"
results = db_test.executesql(sqlselect)
</snippet></ROW><ROW><id>12123763</id><snippet>Music</snippet></ROW><ROW><id>12123886</id><snippet>line.split</snippet></ROW><ROW><id>12123886</id><snippet>values = [v.strip() for v in line.split("|")[1:-1]]
num_fields = len(values)
num_empty_fields = values.count("")
</snippet></ROW><ROW><id>12123886</id><snippet>indices_empty_fields = [i for i, f in enumerate(values) if f == ""]
</snippet></ROW><ROW><id>12123886</id><snippet>values</snippet></ROW><ROW><id>12123886</id><snippet>import re
values = re.split("\s*\|\s*", line)[1:-1]
</snippet></ROW><ROW><id>12123940</id><snippet>driver.find_element_by_link_text('Download').click()
</snippet></ROW><ROW><id>12124059</id><snippet>for i in x:
  print(i, end="")  # substitute the null-string in place of newline
</snippet></ROW><ROW><id>12124059</id><snippet>......
</snippet></ROW><ROW><id>12124059</id><snippet>print()</snippet></ROW><ROW><id>12124059</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>12124059</id><snippet>Old: print x,           # Trailing comma suppresses newline
New: print(x, end=" ")  # Appends a space instead of a newline
</snippet></ROW><ROW><id>12124059</id><snippet>print()</snippet></ROW><ROW><id>12124319</id><snippet>&gt;&gt;&gt; [a for a in re.split(r'([A-Z][a-z]*)', 'MgSO4') if a]
['Mg', u'S', u'O', u'4']
</snippet></ROW><ROW><id>12124319</id><snippet>&gt;&gt;&gt; [a for a in re.split(r'([A-Z][a-z]*\d*)', txt) if a]
[u'Mg', u'S', u'O4']
</snippet></ROW><ROW><id>12124473</id><snippet>__init__()</snippet></ROW><ROW><id>12124473</id><snippet>log.start()</snippet></ROW><ROW><id>12124473</id><snippet>from datetime import datetime
from scrapy import log
from scrapy.spider import BaseSpider

class ExampleSpider(BaseSpider):
    name = "example"
    allowed_domains = ["example.com"]
    start_urls = ["http://www.example.com/"]

    def __init__(self, name=None, **kwargs):
        LOG_FILE = "scrapy_%s_%s.log" % (self.name, datetime.now())
        # remove the current log
        # log.log.removeObserver(log.log.theLogPublisher.observers[0])
        # re-create the default Twisted observer which Scrapy checks
        log.log.defaultObserver = log.log.DefaultObserver()
        # start the default observer so it can be stopped
        log.log.defaultObserver.start()
        # trick Scrapy into thinking logging has not started
        log.started = False
        # start the new log file observer
        log.start(LOG_FILE)
        # continue with the normal spider init
        super(ExampleSpider, self).__init__(name, **kwargs)

    def parse(self, response):
        ...
</snippet></ROW><ROW><id>12124473</id><snippet>scrapy_example_2012-08-25 12:34:48.823896.log</snippet></ROW><ROW><id>12124865</id><snippet>man 7 regex</snippet></ROW><ROW><id>12124865</id><snippet>re.sub</snippet></ROW><ROW><id>12124865</id><snippet>s/a/b/</snippet></ROW><ROW><id>12124865</id><snippet>echo "aabb" | sed "s/a*\(\(ab\)*\)b/\1/g"
</snippet></ROW><ROW><id>12124865</id><snippet>aab</snippet></ROW><ROW><id>12124865</id><snippet>b</snippet></ROW><ROW><id>12124865</id><snippet>a*</snippet></ROW><ROW><id>12124865</id><snippet>b</snippet></ROW><ROW><id>12124865</id><snippet>&gt;&gt;&gt; re.sub("a*((ab)*)b", r"X\1Y", "aabb")
'XYXY'
</snippet></ROW><ROW><id>12124981</id><snippet>cosine_function = lambda a, b : round(np.inner(a, b)/(LA.norm(a)*LA.norm(b)), 3)
</snippet></ROW><ROW><id>12124981</id><snippet>from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from nltk.corpus import stopwords
import numpy as np
import numpy.linalg as LA

train_set = ["The sky is blue.", "The sun is bright."] #Documents
test_set = ["The sun in the sky is bright."] #Query
stopWords = stopwords.words('english')

vectorizer = CountVectorizer(stop_words = stopWords)
#print vectorizer
transformer = TfidfTransformer()
#print transformer

trainVectorizerArray = vectorizer.fit_transform(train_set).toarray()
testVectorizerArray = vectorizer.transform(test_set).toarray()
print 'Fit Vectorizer to train set', trainVectorizerArray
print 'Transform Vectorizer to test set', testVectorizerArray
cx = lambda a, b : round(np.inner(a, b)/(LA.norm(a)*LA.norm(b)), 3)

for vector in trainVectorizerArray:
    print vector
    for testV in testVectorizerArray:
        print testV
        cosine = cx(vector, testV)
        print cosine

transformer.fit(trainVectorizerArray)
print
print transformer.transform(trainVectorizerArray).toarray()

transformer.fit(testVectorizerArray)
print 
tfidf = transformer.transform(testVectorizerArray)
print tfidf.todense()
</snippet></ROW><ROW><id>12124981</id><snippet>Fit Vectorizer to train set [[1 0 1 0]
 [0 1 0 1]]
Transform Vectorizer to test set [[0 1 1 1]]
[1 0 1 0]
[0 1 1 1]
0.408
[0 1 0 1]
[0 1 1 1]
0.816

[[ 0.70710678  0.          0.70710678  0.        ]
 [ 0.          0.70710678  0.          0.70710678]]

[[ 0.          0.57735027  0.57735027  0.57735027]]
</snippet></ROW><ROW><id>12125087</id><snippet>import subprocess

proc = subprocess.Popen(["mysql", "--user=%s" % USER, "--password=%s" % PASS, "database"],
                        stdin=subprocess.PIPE,
                        stdout=subprocess.PIPE)
out, err = proc.communicate(file("/tmp/dump.sql").read())
</snippet></ROW><ROW><id>12125254</id><snippet>iso8859_13(Baltic languages)</snippet></ROW><ROW><id>12125520</id><snippet>downloadSingleImage(url, (filename_prefix + str(counter))</snippet></ROW><ROW><id>12125580</id><snippet>someJunk = "Notifier"</snippet></ROW><ROW><id>12125580</id><snippet>someJunk = "CommentNotifier"</snippet></ROW><ROW><id>12125580</id><snippet>attrs</snippet></ROW><ROW><id>12125580</id><snippet>__module__</snippet></ROW><ROW><id>12125580</id><snippet>__new__</snippet></ROW><ROW><id>12125580</id><snippet>attrs</snippet></ROW><ROW><id>12125580</id><snippet>__module__</snippet></ROW><ROW><id>12125580</id><snippet>metafile.CommentNotifier</snippet></ROW><ROW><id>12125580</id><snippet>metafile</snippet></ROW><ROW><id>12125580</id><snippet>submeta.CommentNotifier</snippet></ROW><ROW><id>12125580</id><snippet>submeta</snippet></ROW><ROW><id>12125580</id><snippet>__name__</snippet></ROW><ROW><id>12125580</id><snippet>__notify__</snippet></ROW><ROW><id>12125580</id><snippet>__notification__</snippet></ROW><ROW><id>12125580</id><snippet>_Notifier</snippet></ROW><ROW><id>12125580</id><snippet>__str__</snippet></ROW><ROW><id>12125580</id><snippet>__notify__</snippet></ROW><ROW><id>12125682</id><snippet>pylab.quiver(x, y, u, v, angles='xy', scale_units='xy', scale=10)
</snippet></ROW><ROW><id>12125682</id><snippet>angles='uv'</snippet></ROW><ROW><id>12125682</id><snippet>atan2(u,v)</snippet></ROW><ROW><id>12125682</id><snippet>angles='xy'</snippet></ROW><ROW><id>12125682</id><snippet>(x,y)</snippet></ROW><ROW><id>12125682</id><snippet>(x+u, y+v)</snippet></ROW><ROW><id>12125687</id><snippet>self.translation_file.save(self.translation_file.name, self.translation_file)</snippet></ROW><ROW><id>12125687</id><snippet>self.translation_file.save(self.translation_file.name, self.translation_file, save = False)
</snippet></ROW><ROW><id>12125773</id><snippet>import re

# a partial table of atomic weights, replace with something better!
weights = { "H" : 1,  "Na": 11, "Mg": 12, "C" : 12, "N" : 14,
            "O" : 16, "F" : 19, "Al": 27, "S" : 32, "Cl": 35, 
      }

def molecularWeight(formula):
    matches = re.findall(r"([A-Z][a-z]?)([0-9]*)", formula)
    return sum(weights[symbol] * (int(count) if count else 1)
               for (symbol, count) in matches)
</snippet></ROW><ROW><id>12125773</id><snippet>weights[symbol]</snippet></ROW><ROW><id>12125773</id><snippet>formul_data.get(symbol.lower(), 0)</snippet></ROW><ROW><id>12125806</id><snippet>s = map(ord, text)
return ''.join(chr(((a&amp;1)&lt;&lt;7) + (b&gt;&gt;1)) for a,b in zip(s[-1:] + s, s))
</snippet></ROW><ROW><id>12125910</id><snippet>isinstance</snippet></ROW><ROW><id>12125910</id><snippet>{k:v if isinstance(v, (str, int)) else str(v) for k,v in dct.items() if k != ''}
</snippet></ROW><ROW><id>12125910</id><snippet>dict((k, v if isinstance(v, (unicode, int, long)) else unicode(v))
     for k,v in dct.iteritems())
</snippet></ROW><ROW><id>12126092</id><snippet>{% load add_get_parameter %}
&lt;a href="{% add_get_paramater param1='const_value',param2=variable_in_context %}"&gt;
    Link with modified params
&lt;/a&gt;
</snippet></ROW><ROW><id>12126343</id><snippet>from datetime import datetime

birthday = datetime(1988, 2, 19, 12, 0, 0)
diff = datetime.now() - birthday
print diff
# 8954 days, 7:03:45.765329
</snippet></ROW><ROW><id>12126513</id><snippet>hist(hmag, 30, range=[6.5, 12.5], facecolor='gray', align='mid')
</snippet></ROW><ROW><id>12126729</id><snippet>Pool</snippet></ROW><ROW><id>12126729</id><snippet>from multiprocessing import Pool
p = Pool(5)  # like in your example, running five separate processes
p.map(do, range(start_i, end_i))
</snippet></ROW><ROW><id>12126729</id><snippet>python run.py 0 200000 &amp;</snippet></ROW><ROW><id>12126729</id><snippet>python run.py 0 200000</snippet></ROW><ROW><id>12126842</id><snippet>$ cat test.rb               
require "rubypython"

RubyPython.start # start the Python interpreter

cPickle = RubyPython.import("cPickle")
p cPickle.dumps("Testing RubyPython.").rubify

RubyPython.stop # stop the Python interpreter
$ jruby -v; jruby -rubygems test.rb
jruby 1.7.0.preview2 (1.9.3p203) 2012-08-22 ff42564 on Java HotSpot(TM) 64-Bit Server VM 1.7.0_04-b21 [darwin-x86_64]
"S'Testing RubyPython.'\np1\n."
</snippet></ROW><ROW><id>12126976</id><snippet>/Date(1198908717056)/</snippet></ROW><ROW><id>12126976</id><snippet>import datetime

class DateTimeEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, datetime.datetime):
            return obj.isoformat()
        elif isinstance(obj, datetime.date):
            return obj.isoformat()
        elif isinstance(obj, datetime.timedelta):
            return (datetime.datetime.min + obj).time().isoformat()
        else:
            return super(DateTimeEncoder, self).default(obj)

DateTimeEncoder().encode(object)
</snippet></ROW><ROW><id>12127236</id><snippet>self.resquest.referer</snippet></ROW><ROW><id>12127236</id><snippet>FileDownloadHandler</snippet></ROW><ROW><id>12127236</id><snippet>name</snippet></ROW><ROW><id>12127236</id><snippet>id</snippet></ROW><ROW><id>12127295</id><snippet>class Person(db.Model):
    name = db.StringProperty(required=True)

    def toJson(self):
        contact = self.contact_set #this is the default collection name for your class
        d = {"name":self.name,"contact":contact}
        return json.dumps(d)

class Contact(db.Model):
    name = db.StringProperty(required=True)
    email = db.StringProperty()
    trader = db.ReferenceProperty(Person)
</snippet></ROW><ROW><id>12127295</id><snippet>persons_query = Person.all()
persons = persons_query.fetch(50)
data = person.toJson()
</snippet></ROW><ROW><id>12127365</id><snippet>hand1</snippet></ROW><ROW><id>12127365</id><snippet>self.hand1</snippet></ROW><ROW><id>12127365</id><snippet>self.hand1 = Hand()</snippet></ROW><ROW><id>12127365</id><snippet>h = Hand()
self.bob = h
self.larry = h
</snippet></ROW><ROW><id>12127365</id><snippet>Hand("some name")</snippet></ROW><ROW><id>12127365</id><snippet>self.hand1 = Hand()
self.hand1.name = "hand 1"
</snippet></ROW><ROW><id>12127444</id><snippet>&gt; cd C:\Path\To\The\Package\Directory
C:\Path\To\The\Package\Directory&gt; C:\Python27\python.exe setup.py register
</snippet></ROW><ROW><id>12127534</id><snippet>help(re.sub)</snippet></ROW><ROW><id>12127534</id><snippet>lambda</snippet></ROW><ROW><id>12127534</id><snippet>&gt;&gt;&gt; reg.sub(rpl, my_string )
'I hope this This is a nicely escaped newline \n is replaced with a nicely escaped string'
&gt;&gt;&gt; reg.sub(lambda x: rpl, my_string )
'I hope this This is a nicely escaped newline \\n is replaced with a nicely escaped string'
</snippet></ROW><ROW><id>12127686</id><snippet>def _get_last_message(self):
    mail = imaplib.IMAP4_SSL('imap.gmail.com')
    mail.login(MAIL_USERNAME, MAIL_PASSWORD)
    mail.select("inbox")
    result, data = mail.search(None, "ALL")
    latest_email_id = data[0].split()[-1]
    result, data = mail.fetch(latest_email_id, "(RFC822)")
    raw_email = data[0][1]
    return raw_email
</snippet></ROW><ROW><id>12127945</id><snippet>__dict__</snippet></ROW><ROW><id>12127945</id><snippet>__share_state</snippet></ROW><ROW><id>12127945</id><snippet>Classname.__dict__</snippet></ROW><ROW><id>12127945</id><snippet>b1.foo = "123"
</snippet></ROW><ROW><id>12127945</id><snippet>dict</snippet></ROW><ROW><id>12127945</id><snippet>b1.__dict__</snippet></ROW><ROW><id>12127945</id><snippet>Borg.__shared_state</snippet></ROW><ROW><id>12128294</id><snippet>class MySpider(BaseSpider):

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        links = hxs.select('//a')
        for link in links:
            href = link.select('@href').extract()[0]
            text = links.select('text()').extract()[0]
                # I make an assumption here that you want text() instead of @href here
                if text == 'something':
                        yield Request(href, callback = self.parse_page)

    def parse_page(self, response):
        return #return your item here
</snippet></ROW><ROW><id>12129336</id><snippet>import os

root_path = r'C:\Tasks\\'
total_lines = 0
file_indices = dict()

# Based on http://stackoverflow.com/q/845058, bufcount function
def linecount(filename, buf_size=1024*1024):
    with open(filename) as f:
        return sum(buf.count('\n') for buf in iter(lambda: f.read(buf_size), ''))

for dirpath, dirnames, filenames in os.walk(root_path):
    for filename in filenames:
         if not filename.endswith('.txt'):
             continue
         path = os.path.join(dirpath, filename)
         file_indices[total_lines] = path
         total_lines += linecount(path)

offsets = list(file_indices.keys())
offsets.sort()
</snippet></ROW><ROW><id>12129336</id><snippet>import random
import bisect

tasks = list(range(total_lines))
task_indices = random.sample(tasks, 10)

for index in task_indices:
     # find the closest file index
     file_index = offsets[bisect.bisect(offsets, index) - 1]
     path = file_indices[file_index]
     curr_line = file_index
     with open(path) as f:
         while curr_line &lt;= index:
             task = f.readline()
             curr_line += 1
     print(task)
     tasks.remove(index)
</snippet></ROW><ROW><id>12129336</id><snippet>tasks</snippet></ROW><ROW><id>12129336</id><snippet>random.sample()</snippet></ROW><ROW><id>12129336</id><snippet>file_indices</snippet></ROW><ROW><id>12129409</id><snippet>object</snippet></ROW><ROW><id>12129409</id><snippet>TypeError: unsupported operand type(s) for +: 'Number' and 'Number'
</snippet></ROW><ROW><id>12129409</id><snippet>int</snippet></ROW><ROW><id>12129409</id><snippet>__add__</snippet></ROW><ROW><id>12129409</id><snippet>Plus.execute</snippet></ROW><ROW><id>12129409</id><snippet>execute</snippet></ROW><ROW><id>12129409</id><snippet>import functools,operator,re

def parser(inp):
    stack=[]
    token_pat = re.compile("\s*(?:(\d+)|(.))")
    for number, op in token_pat.findall(inp):
        if number:
            stack.append(functools.partial(lambda i:i, int(number)))
        else:
            first,second=stack.pop(),stack.pop()
            try:
                op = {
                    '+': operator.add,
                    '-': operator.sub,
                    '*': operator.mul
                }[op]
            except KeyError:
                raise SyntaxError("unknown operator")

            stack.append(functools.partial(lambda op,first,second:
                        op(first(), second()), op, first, second))
    print(stack[0]())

if __name__=="__main__":
    parser('1 2 + 3 *')
</snippet></ROW><ROW><id>12129472</id><snippet>numpy.convolve</snippet></ROW><ROW><id>12129472</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.convolve([1,1], [1,1])
&gt;&gt;&gt; type(a[0])
&lt;type 'numpy.int64'&gt;
</snippet></ROW><ROW><id>12129472</id><snippet>def convolve(a, b):
    """
    Generate the discrete, linear convolution of two one-dimensional sequences.
    """
    return [sum(a[j] * b[i - j] for j in range(i + 1)
                if j &lt; len(a) and i - j &lt; len(b))
            for i in range(len(a) + len(b) - 1)]

&gt;&gt;&gt; a = [1,1]
&gt;&gt;&gt; for i in range(95): a = convolve(a, [1,1])
... 
&gt;&gt;&gt; from math import factorial as f
&gt;&gt;&gt; all(a[i] == f(96) / f(i) / f(96 - i) for i in range(97))
True
</snippet></ROW><ROW><id>12129834</id><snippet>manage_pages</snippet></ROW><ROW><id>12129834</id><snippet>/me/accounts</snippet></ROW><ROW><id>12129834</id><snippet>access_token</snippet></ROW><ROW><id>12129834</id><snippet>https://graph.facebook.com/WHATEVER_YOU_ARE_DOING?access_token=XXX
</snippet></ROW><ROW><id>12130021</id><snippet>probability=True</snippet></ROW><ROW><id>12130021</id><snippet>SVC</snippet></ROW><ROW><id>12130174</id><snippet>codecs</snippet></ROW><ROW><id>12130261</id><snippet>subprocess</snippet></ROW><ROW><id>12130261</id><snippet>list2cmdline</snippet></ROW><ROW><id>12130261</id><snippet>list2cmdline</snippet></ROW><ROW><id>12130261</id><snippet>shlex.split</snippet></ROW><ROW><id>12130261</id><snippet>subprocess</snippet></ROW><ROW><id>12130261</id><snippet>&gt;&gt;&gt; help(subprocess.list2cmdline)
Help on function list2cmdline in module subprocess:

list2cmdline(seq)
    Translate a sequence of arguments into a command line
    string, using the same rules as the MS C runtime:

    1) Arguments are delimited by white space, which is either a
       space or a tab.

    2) A string surrounded by double quotation marks is
       interpreted as a single argument, regardless of white space
       contained within.  A quoted string can be embedded in an
       argument.

    3) A double quotation mark preceded by a backslash is
       interpreted as a literal double quotation mark.

    4) Backslashes are interpreted literally, unless they
       immediately precede a double quotation mark.

    5) If backslashes immediately precede a double quotation mark,
       every pair of backslashes is interpreted as a literal
       backslash.  If the number of backslashes is odd, the last
       backslash escapes the next double quotation mark as
       described in rule 3.
</snippet></ROW><ROW><id>12130421</id><snippet>&lt;form action="..." method="POST"&gt;
{{ main_form }}    
{{ additional_form_1 }}    
{{ additional_form_2 }}
&lt;input type="submit" value="Submit!"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>12130421</id><snippet>{{ mainform }}</snippet></ROW><ROW><id>12130421</id><snippet>{{ additional_form_1 }}</snippet></ROW><ROW><id>12130421</id><snippet>{{ additional_form_2 }}</snippet></ROW><ROW><id>12130421</id><snippet>if (main_form.is_valid() and
   additional_form_1.is_valid() and
   additional_form_2.is_valid()):
   pass
</snippet></ROW><ROW><id>12130429</id><snippet>@staticmethod</snippet></ROW><ROW><id>12130477</id><snippet>response.delimiters = ['{%', '%}']
</snippet></ROW><ROW><id>12130477</id><snippet>{%=P('hello world')%}
&lt;p&gt;{{ember template code}}&lt;/p&gt;
{%=P('{{ember template code generated by web2py}}')%}
</snippet></ROW><ROW><id>12130477</id><snippet>&lt;p&gt;hello world&lt;/p&gt;
&lt;p&gt;{{ember template code}}&lt;/p&gt;
&lt;p&gt;{{ember template code generated by web2py}}&lt;/p&gt;
</snippet></ROW><ROW><id>12130477</id><snippet>if request.function in ['action1', 'action2', 'action3']:
    response.delimiters = ['{%', '%}']
</snippet></ROW><ROW><id>12130477</id><snippet>def action1():
    response.delimiters = ['{%', '%}']
    [etc.]
</snippet></ROW><ROW><id>12130911</id><snippet>myString = "Test1 [cm]:     -35.00/-34.99/-34.00/0.09"  
print myString.split("/")[1]
</snippet></ROW><ROW><id>12130911</id><snippet>import re 
myString = "Test1 [cm]:     -35.00/-34.99/-34.00/0.09" 
print re.search(r'(?&lt;=\/)[+-]?\d+(?:\.\d+)?', myString).group()
</snippet></ROW><ROW><id>12130911</id><snippet>(?&lt;=\/)[+-]?\d+(?:\.\d+)?
└──┬──┘└─┬─┘└┬┘└───┬────┘
   │     │   │     │
   │     │   │     └ optional period with one or more trailing digits
   │     │   │
   │     │   └ one or more digits
   │     │
   │     └ optional + or -
   │
   └ leading slash before match 
</snippet></ROW><ROW><id>12131385</id><snippet>import itertools
def expandgrid(*itrs):
   product = list(itertools.product(*itrs))
   return {'Var{}'.format(i+1):[x[i] for x in product] for i in range(len(itrs))}

&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [5,7,9]
&gt;&gt;&gt; expandgrid(a, b)
{'Var1': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'Var2': [5, 7, 9, 5, 7, 9, 5, 7, 9]}
</snippet></ROW><ROW><id>12131385</id><snippet>itertools.product</snippet></ROW><ROW><id>12131385</id><snippet>product</snippet></ROW><ROW><id>12131595</id><snippet>pywin32</snippet></ROW><ROW><id>12131595</id><snippet>FILE_ATTRIBUTE_HIDDEN</snippet></ROW><ROW><id>12131595</id><snippet>FILE_ATTRIBUTE_ARCHIVE              = 32
FILE_ATTRIBUTE_ATOMIC_WRITE         = 512
FILE_ATTRIBUTE_COMPRESSED           = 2048
FILE_ATTRIBUTE_DEVICE               = 64
FILE_ATTRIBUTE_DIRECTORY            = 16
FILE_ATTRIBUTE_ENCRYPTED            = 16384
FILE_ATTRIBUTE_HIDDEN               = 2
FILE_ATTRIBUTE_NORMAL               = 128
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED  = 8192
FILE_ATTRIBUTE_OFFLINE              = 4096
FILE_ATTRIBUTE_READONLY             = 1
FILE_ATTRIBUTE_REPARSE_POINT        = 1024
FILE_ATTRIBUTE_SPARSE_FILE          = 512
FILE_ATTRIBUTE_SYSTEM               = 4
FILE_ATTRIBUTE_TEMPORARY            = 256
FILE_ATTRIBUTE_VIRTUAL              = 65536
FILE_ATTRIBUTE_XACTION_WRITE        = 1024
</snippet></ROW><ROW><id>12131595</id><snippet>import win32api, win32con

#test for a certain type of attribute
attribute = win32api.GetFileAttributes(filepath)
#The file attributes are bitflags, so you want to see if a given flag is 1.
# (AKA if it can fit inside the binary number or not) 
# 38 in binary is  100110 which means that 2, 4 and 32 are 'enabled', so we're checking for that
## Thanks to Nneoneo
if attribute &amp; (win32con.FILE_ATTRIBUTE_HIDDEN | win32con.FILE_ATTRIBUTE_SYSTEM):
  raise Exception("hidden file") #or whatever

#or alter them
win32api.SetFileAttributes(filepath, win32con.FILE_ATTRIBUTE_NORMAL) #or FILE_ATTRIBUTE_HIDDEN
</snippet></ROW><ROW><id>12131595</id><snippet>os.stat</snippet></ROW><ROW><id>12131595</id><snippet>stat</snippet></ROW><ROW><id>12131730</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>12131730</id><snippet>converter</snippet></ROW><ROW><id>12131730</id><snippet>np.datetime64</snippet></ROW><ROW><id>12131730</id><snippet>np.object</snippet></ROW><ROW><id>12131730</id><snippet>converter</snippet></ROW><ROW><id>12131730</id><snippet>converter={0:lambda d: datetime.datetime.strptime(d,"%Y%m%d")</snippet></ROW><ROW><id>12131730</id><snippet>dtype</snippet></ROW><ROW><id>12131730</id><snippet>dtype=None</snippet></ROW><ROW><id>12131730</id><snippet>dtype</snippet></ROW><ROW><id>12131730</id><snippet>dtype</snippet></ROW><ROW><id>12131730</id><snippet>dtype=tuple([np.datetime64] + [float]*35)
</snippet></ROW><ROW><id>12131730</id><snippet>dtype=tuple([np.object] + [float]*35)
</snippet></ROW><ROW><id>12131749</id><snippet>  with open('outfile.txt', 'w') as f:
       f.write('this is a test')
</snippet></ROW><ROW><id>12131749</id><snippet>print</snippet></ROW><ROW><id>12131749</id><snippet>       print &gt;&gt; f, 'this is a test'
</snippet></ROW><ROW><id>12131749</id><snippet>outfile.txt</snippet></ROW><ROW><id>12131749</id><snippet>w</snippet></ROW><ROW><id>12131749</id><snippet>a</snippet></ROW><ROW><id>12131749</id><snippet>with</snippet></ROW><ROW><id>12131800</id><snippet>tdelta.total_seconds()
</snippet></ROW><ROW><id>12131800</id><snippet>tdelta</snippet></ROW><ROW><id>12131800</id><snippet>timedelta</snippet></ROW><ROW><id>12131800</id><snippet>datetime</snippet></ROW><ROW><id>12131800</id><snippet>strftime</snippet></ROW><ROW><id>12131800</id><snippet>strptime</snippet></ROW><ROW><id>12131800</id><snippet>datetime.now</snippet></ROW><ROW><id>12131800</id><snippet>time.ctime</snippet></ROW><ROW><id>12131800</id><snippet>strptime</snippet></ROW><ROW><id>12131800</id><snippet>datetime</snippet></ROW><ROW><id>12131800</id><snippet>datetime.fromtimestamp</snippet></ROW><ROW><id>12131800</id><snippet>now = datetime.now()
then = datetime.fromtimestamp(os.path.getmtime("x.cache"))
tdelta = now - then
seconds = tdelta.total_seconds()
</snippet></ROW><ROW><id>12131997</id><snippet>'wsgi.errors': &lt;google.appengine.api.logservice.logservice.LogsBuffer object at 0x105219150&gt;
</snippet></ROW><ROW><id>12131997</id><snippet>google/appengine/runtime/request_environment.py</snippet></ROW><ROW><id>12131997</id><snippet>def __getitem__(self, key):
    return self._request.environ[key]
</snippet></ROW><ROW><id>12131997</id><snippet>def __getitem__(self, key):
    if key in ['wsgi.errors', 'wsgi.input']:
        return str(self._request.environ[key])
    return self._request.environ[key]
</snippet></ROW><ROW><id>12132107</id><snippet>self.videoWidget.setMinimumSize(640,480)
</snippet></ROW><ROW><id>12132349</id><snippet>.*?</snippet></ROW><ROW><id>12132349</id><snippet>[^\]]+</snippet></ROW><ROW><id>12132349</id><snippet>[^\)]+</snippet></ROW><ROW><id>12132349</id><snippet>r'\[([^\]]+)\]\(([^\)]+)\)'</snippet></ROW><ROW><id>12132417</id><snippet>- url: /counter
  script: counter.app

- url: /(.*\.rar)
  script: download.app
</snippet></ROW><ROW><id>12132727</id><snippet> C:\...\&gt; python -m reindent -d C:\Python27\wxpython\ch2-updateui.py
</snippet></ROW><ROW><id>12132727</id><snippet> C:\...\&gt; reindent -d C:\Python27\wxpython\ch2-updateui.py
</snippet></ROW><ROW><id>12132962</id><snippet>import datetime as dt

now = dt.datetime.now()
then = dt.datetime.combine(now, dt.datetime.strptime("6:02PM", "%I:%M%p").time())
print(then)
# 2012-08-26 18:02:00

tdelta = now - then
print(tdelta)
# -1 day, 20:53:25.190721
</snippet></ROW><ROW><id>12133164</id><snippet>&gt;&gt;&gt; a = [[1,2.3,'3', object()], [None, [2,3], 4j]]
&gt;&gt;&gt; b = [v for row in a for v in row]
&gt;&gt;&gt; a
[[1, 2.3, '3', &lt;object object at 0x1002af090&gt;], [None, [2, 3], 4j]]
&gt;&gt;&gt; b
[1, 2.3, '3', &lt;object object at 0x1002af090&gt;, None, [2, 3], 4j]
&gt;&gt;&gt; [id(obj) for row in a for obj in row]
[4298185464, 4298195480, 4299558664, 4297781392, 4296523616, 4299692656, 4297773296]
&gt;&gt;&gt; [id(obj) for obj in b]
[4298185464, 4298195480, 4299558664, 4297781392, 4296523616, 4299692656, 4297773296]
</snippet></ROW><ROW><id>12133164</id><snippet>v</snippet></ROW><ROW><id>12133164</id><snippet>v</snippet></ROW><ROW><id>12133164</id><snippet>v</snippet></ROW><ROW><id>12133235</id><snippet>order</snippet></ROW><ROW><id>12133235</id><snippet>means = means.order()</snippet></ROW><ROW><id>12133351</id><snippet>QTMovie.alloc().initWithAttributes_error_</snippet></ROW><ROW><id>12133351</id><snippet>(movie, error) = QTMovie.alloc().initWithAttributes_error_(attribs, objc.nil)
</snippet></ROW><ROW><id>12133930</id><snippet>ssock.send(File)</snippet></ROW><ROW><id>12133930</id><snippet>filename=client.recv(1024)</snippet></ROW><ROW><id>12133930</id><snippet>filename</snippet></ROW><ROW><id>12133930</id><snippet>send</snippet></ROW><ROW><id>12133930</id><snippet>recv</snippet></ROW><ROW><id>12133930</id><snippet>file-size file-name\n</snippet></ROW><ROW><id>12133982</id><snippet>__new__</snippet></ROW><ROW><id>12133982</id><snippet>__new__</snippet></ROW><ROW><id>12133982</id><snippet>class User(Base):
    def __new__(cls, id=0):
        if id:
            user = DBSession.query(User).filter(User.id==id).first()
        if not user:
            user = User()
        return user
</snippet></ROW><ROW><id>12133982</id><snippet>User</snippet></ROW><ROW><id>12133982</id><snippet>__new__</snippet></ROW><ROW><id>12133982</id><snippet>user = User.__init__()</snippet></ROW><ROW><id>12133982</id><snippet>__init__</snippet></ROW><ROW><id>12133982</id><snippet>__new__</snippet></ROW><ROW><id>12133982</id><snippet>SomeClass()</snippet></ROW><ROW><id>12133982</id><snippet>dict</snippet></ROW><ROW><id>12133982</id><snippet>__new__</snippet></ROW><ROW><id>12133982</id><snippet>__new__</snippet></ROW><ROW><id>12134562</id><snippet>import os

def set_exit_handler(func):
    import signal
    signal.signal(signal.SIGHUP, func) # on closing the terminal
    signal.signal(signal.SIGTERM, func) # on killing the process

    import atexit
    atexit.register(func) # on Ctrl-C, Ctrl-D and other proper exits

if __name__ == "__main__":
    def on_exit(a=None, b=None):
        print "exit handler triggered"
        os.system("gnome-session-quit --logout --no-prompt")
    set_exit_handler(on_exit)

    print "Enter password:"
    raw_input()
    # ... some verification/timeout code ...
</snippet></ROW><ROW><id>12134662</id><snippet>QTreeWidget</snippet></ROW><ROW><id>12134662</id><snippet>invisibleRootItem()</snippet></ROW><ROW><id>12134662</id><snippet>root = tree.invisibleRootItem()
for item in tree.selectedItems():
    (item.parent() or root).removeChild(item)
</snippet></ROW><ROW><id>12134822</id><snippet>long</snippet></ROW><ROW><id>12134822</id><snippet>=</snippet></ROW><ROW><id>12134866</id><snippet>$ source venv/bin/activate
</snippet></ROW><ROW><id>12134866</id><snippet>app_dir</snippet></ROW><ROW><id>12134866</id><snippet>venv</snippet></ROW><ROW><id>12134871</id><snippet>biglist</snippet></ROW><ROW><id>12134871</id><snippet>newlist = []
sublist = []
for i in biglist:
    sublist.append(i)
    if i[2] == 10:
        newlist.append(sublist)
        sublist = []
</snippet></ROW><ROW><id>12134871</id><snippet>[[[TIME, 'b', 0],[TIME, 'b', 1],[TIME, 'b', 1],[TIME, 'b', 1],[TIME, 'b', 10]],
[[TIME, 'b', 0],[TIME, 'b', 1],[TIME, 'b', 1],[TIME, 'b', 10]],
[[TIME, 'b', 0],[TIME, 'b', 1],[TIME, 'b', 1],[TIME, 'b', 1],[TIME, 'b', 1],[TIME, 'b', 10]]]
</snippet></ROW><ROW><id>12134966</id><snippet>ping</snippet></ROW><ROW><id>12134966</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>12134966</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>12134966</id><snippet>ping_process = subprocess.Popen(['ping', '-c', '1', ip], stdout=subprocess.PIPE)

# This will block until ping exits
stdout = ping_process.stdout.read()
print stdout
</snippet></ROW><ROW><id>12134966</id><snippet>-n</snippet></ROW><ROW><id>12135111</id><snippet>kIntegrityKey = [0xbf, 0x77, 0xec, 0x55, 0xc3, 0x01, 0x30, 0xc1, 0xd8, 0xcd, 0x18, 0x62,
  0xed, 0x2a, 0x4c, 0xd2, 0xc7, 0x6a, 0xc3, 0x3b, 0xc0, 0xc4, 0xce, 0x8a,
  0x3d, 0x3b, 0xbd, 0x3a, 0xd5, 0x68, 0x77, 0x92]
</snippet></ROW><ROW><id>12135111</id><snippet>kEncryptionKey</snippet></ROW><ROW><id>12135111</id><snippet>&gt;&gt;&gt; import array
&gt;&gt;&gt; kIntegrityKey = array.array('B', [0xbf, 0x77, 0xec, 0x55, 0xc3, 0x01, 0x30, 0xc1, 
... 0xd8, 0xcd, 0x18, 0x62, 0xed, 0x2a, 0x4c, 0xd2, 0xc7, 0x6a, 0xc3, 0x3b, 0xc0, 0xc4,   
... 0xce, 0x8a, 0x3d, 0x3b, 0xbd, 0x3a, 0xd5, 0x68, 0x77, 0x92])
&gt;&gt;&gt; len(kIntegrityKey)
32
&gt;&gt;&gt; kIntegrityKey.itemsize
1
</snippet></ROW><ROW><id>12135111</id><snippet>array</snippet></ROW><ROW><id>12135111</id><snippet>'B'</snippet></ROW><ROW><id>12135111</id><snippet>unisgned char</snippet></ROW><ROW><id>12135111</id><snippet>itemsize</snippet></ROW><ROW><id>12135306</id><snippet>yield</snippet></ROW><ROW><id>12135306</id><snippet>get_updates_for_user_async()</snippet></ROW><ROW><id>12135306</id><snippet>map_async()</snippet></ROW><ROW><id>12135306</id><snippet>Query</snippet></ROW><ROW><id>12135306</id><snippet>to_dict()</snippet></ROW><ROW><id>12135306</id><snippet>@ndb.tasklet
def get_updates_for_user_async(userKey, lastSyncDate):
  noteQuery = ndb.gql('...')
  note_list = yield noteQuery.map_async(lambda note: note.to_dict())
  raise ndb.Return(note_list)
</snippet></ROW><ROW><id>12135306</id><snippet>@ndb.tasklet</snippet></ROW><ROW><id>12135306</id><snippet>map_async()</snippet></ROW><ROW><id>12135306</id><snippet>def get_updates_for_user_Async(userKey, lastSyncDate):
  noteQuery = ndb.gql('...')
  return noteQuery.map_async(lambda note: note.to_dict())
</snippet></ROW><ROW><id>12135317</id><snippet>library(inline)
move.cursor &lt;- cfunction(c(x="numeric",y="numeric"),
  "CGWarpMouseCursorPosition(CGPointMake(asReal(x),asReal(y)));
   return R_NilValue;",
  "#include &lt;ApplicationServices/ApplicationServices.h&gt;",,"C",
  libargs="-framework AppKit")
</snippet></ROW><ROW><id>12135317</id><snippet>move.cursor</snippet></ROW><ROW><id>12135317</id><snippet>move.cursor(100, 100)
</snippet></ROW><ROW><id>12135325</id><snippet>def compare(a,b):
    if len(a) != len(b):
        return False
    return all(i == j for i,j in itertools.izip(a,b))
</snippet></ROW><ROW><id>12135325</id><snippet>zip</snippet></ROW><ROW><id>12135332</id><snippet>\\\n</snippet></ROW><ROW><id>12135332</id><snippet>|</snippet></ROW><ROW><id>12135332</id><snippet>|</snippet></ROW><ROW><id>12135332</id><snippet>\\\n</snippet></ROW><ROW><id>12135332</id><snippet>:%s/\\\@&lt;=\n/|
:sort
:%s/\\\@&lt;=|/\r
</snippet></ROW><ROW><id>12135332</id><snippet>\@&lt;=</snippet></ROW><ROW><id>12135332</id><snippet>\zs</snippet></ROW><ROW><id>12135762</id><snippet>full_list = test.split(', ')
</snippet></ROW><ROW><id>12135762</id><snippet>full_list = [x.lstrip() for x in test.split(',')]
</snippet></ROW><ROW><id>12135869</id><snippet>for seqs in projSeqs:
    seqFileDir = os.path.join(projStorage, seqs)
    seqFileTemplate = os.path.join(seqFileDir, '%s_stringHere.File' % seqs)
    shutil.copyfile(projTemplate, seqFileTemplate)
    shutil.copystat(projTemplate, seqFileTemplate)         
</snippet></ROW><ROW><id>12135914</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>12135914</id><snippet>dict</snippet></ROW><ROW><id>12135914</id><snippet>dict</snippet></ROW><ROW><id>12136190</id><snippet>--oauth2</snippet></ROW><ROW><id>12136354</id><snippet>TypeError: cdf() argument after * must be a sequence, not int
</snippet></ROW><ROW><id>12136354</id><snippet>args : tuple, sequence
    distribution parameters, used if rvs or cdf are strings
</snippet></ROW><ROW><id>12136354</id><snippet>&gt;&gt;&gt; import scipy.stats
&gt;&gt;&gt; sample = scipy.stats.t(1).rvs(size=10**6)
&gt;&gt;&gt; scipy.stats.kstest(sample, 't', (1,))
(0.0006249662221899932, 0.82960203415652445)
</snippet></ROW><ROW><id>12136354</id><snippet>&gt;&gt;&gt; scipy.stats.kstest(sample, 't', args=(1,))
(0.0006249662221899932, 0.82960203415652445)
</snippet></ROW><ROW><id>12136794</id><snippet>django-socketio</snippet></ROW><ROW><id>12136794</id><snippet>httplib2</snippet></ROW><ROW><id>12136794</id><snippet>Django-Piston</snippet></ROW><ROW><id>12136794</id><snippet>REST</snippet></ROW><ROW><id>12137101</id><snippet>file.write</snippet></ROW><ROW><id>12137101</id><snippet>askopenfilenames</snippet></ROW><ROW><id>12137101</id><snippet>for f in files:
    print &gt;&gt; SPSSList, f
</snippet></ROW><ROW><id>12137101</id><snippet>SPSSList.write('\n'.join(files))
</snippet></ROW><ROW><id>12137101</id><snippet>','.join</snippet></ROW><ROW><id>12137203</id><snippet>append()</snippet></ROW><ROW><id>12137203</id><snippet>line</snippet></ROW><ROW><id>12137203</id><snippet>def GetDistinctValues(theFile, theColumn):
  lines=theFile.split('\n')
  allValues=[]
  for line in lines:
    if line:
      allValues.append(line[theColumn-1])
  return list(set(allValues))
</snippet></ROW><ROW><id>12137203</id><snippet>def GetDistinctValues(theFile, theColumn):
  lines=theFile.split('\n')
  allValues=[]
  for line in lines:
     try:
        allValues.append(line[theColumn-1])
     except IndexError:
        print "line: %r"%line
  return list(set(allValues))
</snippet></ROW><ROW><id>12137248</id><snippet>Flask</snippet></ROW><ROW><id>12137248</id><snippet>ext</snippet></ROW><ROW><id>12137248</id><snippet>import flask.ext.foo</snippet></ROW><ROW><id>12137248</id><snippet>flask_foo</snippet></ROW><ROW><id>12137248</id><snippet>flaskext.foo</snippet></ROW><ROW><id>12137264</id><snippet>help</snippet></ROW><ROW><id>12137264</id><snippet>&gt;&gt;&gt; help(csv.reader)
 reader(...)
    csv_reader = reader(iterable [, dialect='excel']
                            [optional keyword args])
        for row in csv_reader:
            process(row)

    The "iterable" argument can be any object that returns a line
    of input for each iteration, such as a file object or a list.  The
    optional "dialect" parameter is discussed below.  The function
    also accepts optional keyword arguments which override settings
    provided by the dialect.
</snippet></ROW><ROW><id>12137264</id><snippet>csv.reader</snippet></ROW><ROW><id>12137264</id><snippet>import csv
import requests

r = requests.get('http://vote.wa.gov/results/current/export/MediaResults.txt') 
data = r.text
reader = csv.reader(data.splitlines(), delimiter='\t')
for row in reader:
    print row
</snippet></ROW><ROW><id>12137264</id><snippet>csv.DictReader</snippet></ROW><ROW><id>12137264</id><snippet>&gt;&gt;&gt; reader = csv.DictReader(data.splitlines(), delimiter='\t')
&gt;&gt;&gt; for row in reader:
...      print row
{'Votes': '417141', 'BallotName': 'Michael Baumgartner', 'RaceID': '2', 'RaceName': 'U.S. Senator', 'PartyName': '(Prefers Republican Party)', 'TotalBallotsCastByRace': '1387059', 'RaceJurisdictionTypeName': 'Federal', 'BallotID': '23036'}
{'Votes': '15005', 'BallotName': 'Will Baker', 'RaceID': '2', 'RaceName': 'U.S. Senator', 'PartyName': '(Prefers Reform Party)', 'TotalBallotsCastByRace': '1387059', 'RaceJurisdictionTypeName': 'Federal', 'BallotID': '27435'}
</snippet></ROW><ROW><id>12137264</id><snippet>row['Votes']</snippet></ROW><ROW><id>12137264</id><snippet>row[4]</snippet></ROW><ROW><id>12137327</id><snippet>numpy.datetime64</snippet></ROW><ROW><id>12137327</id><snippet>datetime64</snippet></ROW><ROW><id>12137327</id><snippet>base = datetime.datetime(2000, 1, 1)
arr = numpy.array([base + datetime.timedelta(hours=i) for i in xrange(24)])
</snippet></ROW><ROW><id>12137327</id><snippet>array([2000-01-01 00:00:00, 2000-01-01 01:00:00, 2000-01-01 02:00:00,
   2000-01-01 03:00:00, 2000-01-01 04:00:00, 2000-01-01 05:00:00,
   2000-01-01 06:00:00, 2000-01-01 07:00:00, 2000-01-01 08:00:00,
   2000-01-01 09:00:00, 2000-01-01 10:00:00, 2000-01-01 11:00:00,
   2000-01-01 12:00:00, 2000-01-01 13:00:00, 2000-01-01 14:00:00,
   2000-01-01 15:00:00, 2000-01-01 16:00:00, 2000-01-01 17:00:00,
   2000-01-01 18:00:00, 2000-01-01 19:00:00, 2000-01-01 20:00:00,
   2000-01-01 21:00:00, 2000-01-01 22:00:00, 2000-01-01 23:00:00], dtype=object)
</snippet></ROW><ROW><id>12137936</id><snippet>from django.db import models


class YourModel(models.Model):
    password = models.CharField(max_length=200)
</snippet></ROW><ROW><id>12137936</id><snippet>from django import forms

from models import YourModel


class YourModelForm(forms.ModelForm):
    class Meta:
        widgets = {'password': forms.PasswordField}
        model = YourModel
</snippet></ROW><ROW><id>12138077</id><snippet>with</snippet></ROW><ROW><id>12138077</id><snippet>with open(csvPath, 'w') as f:
    writer = csv.writer(f)
    for results in sqlResult:
        writer.writerow([results['gname'],int(results['Count'])])
</snippet></ROW><ROW><id>12138208</id><snippet>json</snippet></ROW><ROW><id>12138208</id><snippet>dict(field_name=json.dumps('geom'))
</snippet></ROW><ROW><id>12138208</id><snippet>init_map(
    ${field_name | n}
);
</snippet></ROW><ROW><id>12138208</id><snippet>.dumps()</snippet></ROW><ROW><id>12138208</id><snippet>| n</snippet></ROW><ROW><id>12138208</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; print json.dumps(u'Quotes and unicode: " \u00d8')
"Quotes and unicode: \" \u00d8"
</snippet></ROW><ROW><id>12138245</id><snippet>**</snippet></ROW><ROW><id>12138252</id><snippet>full = True</snippet></ROW><ROW><id>12138346</id><snippet>with open()</snippet></ROW><ROW><id>12138346</id><snippet>Python 2.6.8 (unknown, Apr 19 2012, 01:24:00) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; with open('/tmp/test/a.txt') as f:
...     print f.readline()
... 
foo

&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12138346</id><snippet>with</snippet></ROW><ROW><id>12138346</id><snippet>with open("check_files/"+exportfileCheckFilesFolder+".txt") as f1:
    with open("transfer-out/"+exportfileTransferFolder) as f2:
        # f1 and f2 are now both open.
</snippet></ROW><ROW><id>12138448</id><snippet>from itertools import combinations

Allusers={
    'User1': {'Film1': 'Vote1', 'Film2': 'Vote2'},
    'User2': {'Film1': 'Vote1', 'Film2': 'Vote2'}
}

for comb in combinations(Allusers, 2):
    if Allusers[comb[0]] == Allusers[comb[1]]:
        print '{0} is same with {1}'.format(comb[0], comb[1])
</snippet></ROW><ROW><id>12138531</id><snippet>OrderedDict</snippet></ROW><ROW><id>12138531</id><snippet>from collections import OrderedDict
d = OrderedDict()
d["A"] = "10"
d["B"] = "100"
d["C"] = "20"
d["D"] = "12.5"
for k in d:
    print k
</snippet></ROW><ROW><id>12138531</id><snippet>OrderedDict</snippet></ROW><ROW><id>12138531</id><snippet>in</snippet></ROW><ROW><id>12138531</id><snippet>l = [1,2,3,4]
print 1 in l # prints True
print 5 in l # prints False
</snippet></ROW><ROW><id>12138564</id><snippet>which virtualenv</snippet></ROW><ROW><id>12138972</id><snippet>a</snippet></ROW><ROW><id>12138972</id><snippet>c</snippet></ROW><ROW><id>12138972</id><snippet>indices = numpy.where(numpy.all(a == c, axis=-1))
</snippet></ROW><ROW><id>12138972</id><snippet>indices</snippet></ROW><ROW><id>12138972</id><snippet>c</snippet></ROW><ROW><id>12138972</id><snippet>coords = zip(indices[0], indices[1])
</snippet></ROW><ROW><id>12138972</id><snippet>import numpy
a = numpy.zeros((4, 4, 3), 'int')    

for n in range(4):
    for m in range(4):
        a[n, m, :] = n + m
        if (n + m) == 4:
            print n, m

c = (4, 4, 4)
indices = numpy.where(numpy.all(a == c, axis=-1))
print indices
print zip(indices[0], indices[1])
</snippet></ROW><ROW><id>12138972</id><snippet>1 3
2 2
3 1
(array([1, 2, 3]), array([3, 2, 1]))
[(1, 3), (2, 2), (3, 1)]
</snippet></ROW><ROW><id>12138982</id><snippet>image = Gtk.Image(stock=Gtk.STOCK_OPEN)
self.browse_button = Gtk.Button(label="Some Label", image=image)
</snippet></ROW><ROW><id>12138997</id><snippet>*args</snippet></ROW><ROW><id>12138997</id><snippet>**kwargs</snippet></ROW><ROW><id>12138997</id><snippet>math.feature</snippet></ROW><ROW><id>12138997</id><snippet>Feature: Basic computations
    In order to play with Lettuce
    As beginners
    We will implement addition and subtraction

    Scenario: Sum of 0 and 1
        Given I have to add the numbers 0 and 1
        When I compute its factorial
        Then I see the number 1

    Scenario: Difference of 3 and 5
        Given I have to substract 5 from 3
        When I compute their difference
        Then I see the number -2
</snippet></ROW><ROW><id>12138997</id><snippet>steps.py</snippet></ROW><ROW><id>12138997</id><snippet>from lettuce import *

@step('I have to add the numbers (\d+) and (\d+)')
def have_to_add(step, number1, number2):
    world.number1 = int(number1)
    world.number2 = int(number2)

@step('I have to substract (?P&lt;subtrahend&gt;) from (?P&lt;minuend&gt;)')
def have_to_substract(step, minuend, subtrahend):
    world.minuend = int(minuend)
    world.subtrahend = int(subtrahend)

@step('I compute their difference')
def compute_its_factorial(step):
    world.number = world.minuend - world.subtrahend

@step('I compute their sum')
def compute_its_factorial(step):
    world.number = world.number1 + world.number2

@step('I see the number (\d+)')
def check_number(step, expected):
    expected = int(expected)
    assert world.number == expected, "Got %d" % world.number
</snippet></ROW><ROW><id>12139155</id><snippet>class DecadeBornListFilter(SimpleListFilter):
    #[...]

    def lookups(self, request, model_admin):
        self.model_admin = model_admin
        # ...

    def queryset(self, request, queryset):
        # here you can use self.model_admin
</snippet></ROW><ROW><id>12139155</id><snippet>class BaseDecadeBornListFilter(SimpleListFilter):
    # [...]


class DecadeBornListFilter1(BaseDecadeBornListFilter):
    # [...]


class DecadeBornListFilter2(BaseDecadeBornListFilter):
    # [...]


class StudentModelAdmin1(admin.ModelAdmin):
    list_filter = (DecadeBornListFilter1,)


class StudentModelAdmin2(admin.ModelAdmin):
    list_filter = (DecadeBornListFilter2,)
</snippet></ROW><ROW><id>12139242</id><snippet>form</snippet></ROW><ROW><id>12139242</id><snippet>first_field</snippet></ROW><ROW><id>12139242</id><snippet>second_field</snippet></ROW><ROW><id>12139242</id><snippet>&lt;form action="/feedback/" method="POST"&gt;
        {% csrf_token %}
        &lt;div class="article"&gt;
            &lt;label for="name"&gt;
                Ваше имя:
            &lt;/label&gt;
            &lt;br /&gt;
            {{ form.first_field.errors }}
            {{ form.first_field.label_tag }}: {{ form.first_field }}
            &lt;br /&gt;
            &lt;!-- class="inputbox required" --&gt;
            {{ form.second_field.errors }}
            {{ form.second_field.label_tag }}: {{ form.second_field }}
            &lt;br /&gt;
            &lt;input type="submit" name="submit" value="Отправить"&gt;
        &lt;/div&gt; &lt;!-- /article --&gt;
    &lt;/form&gt;
</snippet></ROW><ROW><id>12139277</id><snippet>      QtCore.QObject.connect(self.processThread, QtCore.SIGNAL("progress(int)"),self.progressBar, QtCore.SLOT("setValue(int)"), QtCore.Qt.DirectConnection)
</snippet></ROW><ROW><id>12139277</id><snippet>AutoConnection</snippet></ROW><ROW><id>12139277</id><snippet>QueuedConnection</snippet></ROW><ROW><id>12139277</id><snippet>QueuedConnection</snippet></ROW><ROW><id>12139277</id><snippet>      QtCore.QObject.connect(self.processThread, QtCore.SIGNAL("progress(int)"),self.progressBar, QtCore.SLOT("setValue(int)"), QtCore.Qt.QueuedConnection)
</snippet></ROW><ROW><id>12139766</id><snippet>favicon.ico</snippet></ROW><ROW><id>12139766</id><snippet>q</snippet></ROW><ROW><id>12139938</id><snippet>Bind()</snippet></ROW><ROW><id>12139938</id><snippet>ProcessEvent()</snippet></ROW><ROW><id>12140132</id><snippet>testbase.py</snippet></ROW><ROW><id>12140132</id><snippet>class TestSomeFeature(unittest.TestCase):
    test_data_A = ...

    def test_A(self):
        ... #perform test
</snippet></ROW><ROW><id>12140132</id><snippet>class TestSomeFeatureWithDataXY(testbase.TestSomeFeature):
    test_data_A = XY
</snippet></ROW><ROW><id>12140132</id><snippet>class TestSomeFeatureWithDataXYZ(testbase.TestSomeFeature):
    @property
    def test_data_A(self): 
        return json.load("data/XYZ.json")
</snippet></ROW><ROW><id>12140309</id><snippet>floatingpoint=float(str(i)+'.'+str(j))
</snippet></ROW><ROW><id>12140309</id><snippet>&gt;&gt;&gt; float('%d.%d' % (i,j))
1.9
</snippet></ROW><ROW><id>12140425</id><snippet>&gt;&gt;&gt; number = raw_input("&gt; ")
&gt;&gt;&gt; type(number)
&lt;type 'str'&gt;
int(number) converts to &lt;type 'int'&gt;
</snippet></ROW><ROW><id>12140425</id><snippet>if int(number) in range(1, 6):
    print "You entered a number in the range of 1 to 5"
elif int(number) in range(6, 11):
    print "You entered a number in the range of 6 to 10"
else:
    print "Your number wasn't in the correct range"
</snippet></ROW><ROW><id>12140446</id><snippet>from smtplib import SMTP
SMTP('smtp.myserver.net')
</snippet></ROW><ROW><id>12140446</id><snippet>quit</snippet></ROW><ROW><id>12140446</id><snippet>child = subprocess.Popen(["netcat","smtp.myserver.net", "25"],
    stdout=subprocess.PIPE,
    stdin=subprocess.PIPE)
child.stdin.close()
response = child.stdout.read()
x = response.find("220 ***")
</snippet></ROW><ROW><id>12140446</id><snippet>netcat</snippet></ROW><ROW><id>12140451</id><snippet>lines</snippet></ROW><ROW><id>12140451</id><snippet>with open(your_file_name, "r") as f:
    lines = f.readlines()

devices = {}
key = None
for line in lines:
    if not line.strip():
        continue
    if line.startswith("Device Name"):
        key = get_key(line)
        devices[key] = []
    else:
        devices[key].append(line)
</snippet></ROW><ROW><id>12140451</id><snippet>get_key</snippet></ROW><ROW><id>12140451</id><snippet>Device Name: Test2-0002</snippet></ROW><ROW><id>12140451</id><snippet>Device Name: Test2-0002</snippet></ROW><ROW><id>12140451</id><snippet>get_key</snippet></ROW><ROW><id>12140451</id><snippet>get_key = lambda line: line</snippet></ROW><ROW><id>12140451</id><snippet>line</snippet></ROW><ROW><id>12140451</id><snippet>line</snippet></ROW><ROW><id>12140451</id><snippet>Test2-0002</snippet></ROW><ROW><id>12140451</id><snippet>get_key</snippet></ROW><ROW><id>12140451</id><snippet>Device Name:</snippet></ROW><ROW><id>12140451</id><snippet>':'</snippet></ROW><ROW><id>12140451</id><snippet>file.readline()</snippet></ROW><ROW><id>12140451</id><snippet>lines</snippet></ROW><ROW><id>12140451</id><snippet>mmap</snippet></ROW><ROW><id>12140451</id><snippet>Device Name</snippet></ROW><ROW><id>12140610</id><snippet>USE_L10N = False
USE_TZ = False
</snippet></ROW><ROW><id>12140714</id><snippet>{PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}/{PATH}{PROJECT_ID}</snippet></ROW><ROW><id>12140833</id><snippet>In [30]: df = pandas.read_csv('foo1.csv', sep='[\s]{2,}')

In [30]: df
Out[30]:
   ItemId  ClientId  PriceQuoted      ItemDescription
0       1         1           10      scroll of Sneak
1       1         2           12      scroll of Sneak
2       1         3           13      scroll of Sneak
3       2         2         2500  scroll of Invisible
4       2         4         2200  scroll of Invisible

In [31]: df1 = df[['ItemId', 'ItemDescription']].drop_duplicates().set_index('ItemId')

In [32]: df1
Out[32]:
            ItemDescription
ItemId
1           scroll of Sneak
2       scroll of Invisible

In [33]: df2 = df[['ItemId', 'ClientId', 'PriceQuoted']]

In [34]: df2
Out[34]:
   ItemId  ClientId  PriceQuoted
0       1         1           10
1       1         2           12
2       1         3           13
3       2         2         2500
4       2         4         2200
</snippet></ROW><ROW><id>12140861</id><snippet>for b in a:
    for fname in b:
        with open(fname, "r") as f:
            content = f.read()
        if EACH in content:
            print "There's a {0} in {1}".format(EACH, fname)
</snippet></ROW><ROW><id>12140861</id><snippet>with open(...) as ...</snippet></ROW><ROW><id>12140866</id><snippet>db.foo.find({"ID":"123",'a':{$elemMatch:{'x':"/"}}},{_id : 0, 'a.$': 1})
//returns
{ "a" : [ { "x" : "/", "y" : "2000", "z" : "1000" } ] }
</snippet></ROW><ROW><id>12140866</id><snippet>db.foo.find({"ID":"123"},{_id : 0, 'a':{$elemMatch:{'x':"/"}}})
//returns 
{ "a" : [ { "x" : "/", "y" : "2000", "z" : "1000" } ] }
</snippet></ROW><ROW><id>12140866</id><snippet>$project</snippet></ROW><ROW><id>12140866</id><snippet>db.foo.aggregate( 
        {$match : {"ID":"123"}},  
        {$unwind : "$a"},  
        {$match : {"a.x":"/"}},  
        {$project : {_id : 0, z : "$a.z"}}
)
</snippet></ROW><ROW><id>12140866</id><snippet>{ "result" : [ { "z" : "1000" } ], "ok" : 1 }
</snippet></ROW><ROW><id>12140982</id><snippet>new_tag()</snippet></ROW><ROW><id>12140982</id><snippet>&gt;&gt;&gt; soup.new_tag('&lt;div myattr="foo"&gt;&lt;/div&gt;')
&lt;&lt;div myattr="foo"&gt;&lt;/div&gt;&gt;&lt;/&lt;div myattr="foo"&gt;&lt;/div&gt;&gt;
</snippet></ROW><ROW><id>12140982</id><snippet>&gt;&gt;&gt; parent = soup.find('div')
&gt;&gt;&gt; parent
&lt;div&gt;&lt;/div&gt;
&gt;&gt;&gt; new_tag = soup.new_tag('div')
&gt;&gt;&gt; new_tag['id'] = 'menu_top_right'
&gt;&gt;&gt; new_tag['class'] = 'menu_top'
&gt;&gt;&gt; new_tag
&lt;div class="menu_top" id="menu_top_right"&gt;&lt;/div&gt;
&gt;&gt;&gt; parent.insert(1, new_tag)
&gt;&gt;&gt; soup
&lt;div&gt;&lt;div class="menu_top" id="menu_top_right"&gt;&lt;/div&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>12141207</id><snippet>min()</snippet></ROW><ROW><id>12141207</id><snippet>&gt;&gt;&gt; min(myList, key=lambda x:abs(x-myNumber))
4
</snippet></ROW><ROW><id>12141279</id><snippet>^([0-9]{1,3}\.){3}[0-9]{1,3}($|/(16|24))$
</snippet></ROW><ROW><id>12141279</id><snippet>$</snippet></ROW><ROW><id>12141279</id><snippet>/</snippet></ROW><ROW><id>12141279</id><snippet>16</snippet></ROW><ROW><id>12141279</id><snippet>24</snippet></ROW><ROW><id>12141279</id><snippet>?</snippet></ROW><ROW><id>12141279</id><snippet>192.168.0.0/aaaa</snippet></ROW><ROW><id>12141279</id><snippet>/24</snippet></ROW><ROW><id>12141279</id><snippet>/16</snippet></ROW><ROW><id>12141279</id><snippet>192.168.0.1</snippet></ROW><ROW><id>12141386</id><snippet>from ctypes import *

PyObject_HEAD = [
    ("ob_refcnt", c_size_t),
    ("ob_type", c_void_p),
]

class methodcallerobject(Structure):
    _fields_ = PyObject_HEAD + [
        ("name", c_void_p),
        ("args", c_void_p),
        ("kwds", c_void_p),
    ]

def magic(methcallobj):
    if not isinstance(methcallobj, operator.methodcaller):
        raise TypeError("not a methodcaller")

    c_methcallobj = cast(c_void_p(id(methcallobj)), POINTER(methodcallerobject)).contents

    return cast(c_methcallobj.name, py_object).value
</snippet></ROW><ROW><id>12141432</id><snippet>c</snippet></ROW><ROW><id>12141432</id><snippet>+</snippet></ROW><ROW><id>12141432</id><snippet>a</snippet></ROW><ROW><id>12141432</id><snippet>b</snippet></ROW><ROW><id>12141432</id><snippet>c</snippet></ROW><ROW><id>12141432</id><snippet>c</snippet></ROW><ROW><id>12141432</id><snippet>([abc]+)</snippet></ROW><ROW><id>12141432</id><snippet>abc</snippet></ROW><ROW><id>12141465</id><snippet>prefetch_related</snippet></ROW><ROW><id>12141465</id><snippet>all_animals = Animals.objects.prefetch_related('categories')
categories = [animal.categories.all() for animal in all_animals]
</snippet></ROW><ROW><id>12142185</id><snippet>for book in books:
        print "%d/%d" % (curr, total)
        if book.cover_url != "":
            new_path = string.replace(book.cover_url.path, "app-old/", "")
            book.cover_url = new_path
            book.save()
        curr+=1
</snippet></ROW><ROW><id>12142263</id><snippet>class MyThread(Thread):
    def __init__(self):
        self.keep_running = True

    def run(self):
        while self.keep_running:
            # Do stuff

my_thread = MyThread()
my_thread.start()

# Do some other stuff

my_thread.keep_running = False
my_thread.join()
</snippet></ROW><ROW><id>12142611</id><snippet>hay</snippet></ROW><ROW><id>12142611</id><snippet>needle</snippet></ROW><ROW><id>12142611</id><snippet>sm = difflib.SequenceMatcher(None,needle, sms)
</snippet></ROW><ROW><id>12142611</id><snippet>sm = difflib.SequenceMatcher(None, needle, hay)
</snippet></ROW><ROW><id>12142611</id><snippet>get_matching_blocks()</snippet></ROW><ROW><id>12142611</id><snippet>SequenceMatcher()</snippet></ROW><ROW><id>12142611</id><snippet>SequenceMatcher</snippet></ROW><ROW><id>12142611</id><snippet>&gt;&gt;&gt; print(SM(None, 'x' + 'y'*199, 'y'*199).ratio())
&gt;&gt;&gt; 0.9975 #correct
</snippet></ROW><ROW><id>12142611</id><snippet>a</snippet></ROW><ROW><id>12142611</id><snippet>b</snippet></ROW><ROW><id>12142611</id><snippet>&gt;&gt;&gt; print(SM(None, 'y'*199, 'x' + 'y'*199).ratio())
&gt;&gt;&gt; 0 #wrong
</snippet></ROW><ROW><id>12142611</id><snippet>autojunk</snippet></ROW><ROW><id>12142611</id><snippet>False</snippet></ROW><ROW><id>12142762</id><snippet>System.Windows.Forms.Clipboard</snippet></ROW><ROW><id>12142762</id><snippet>private const string html = @"Version:0.9
StartHTML:&lt;&lt;&lt;&lt;&lt;&lt;&lt;1
EndHTML:&lt;&lt;&lt;&lt;&lt;&lt;&lt;2
StartFragment:&lt;&lt;&lt;&lt;&lt;&lt;&lt;3
EndFragment:&lt;&lt;&lt;&lt;&lt;&lt;&lt;4
SourceURL: {0}
&lt;html&gt;
&lt;body&gt;
&lt;!--StartFragment--&gt;
&lt;a href='{0}'&gt;{1}&lt;/a&gt;
&lt;!--EndFragment--&gt;
&lt;/body&gt;
&lt;/html&gt;";

string link = String.Format(html, "http://www.stackoverflow.com", "StackOverflow");
Clipboard.SetText(link, TextDataFormat.Html);
</snippet></ROW><ROW><id>12142903</id><snippet>&gt;&gt;&gt;a = [(1, u'abc'), (2, u'def')]
&gt;&gt;&gt;b = [int(i[0]) for i in a]
[1, 2]
</snippet></ROW><ROW><id>12143114</id><snippet>is_almost_equal(first, second)</snippet></ROW><ROW><id>12143114</id><snippet>first</snippet></ROW><ROW><id>12143114</id><snippet>second</snippet></ROW><ROW><id>12143114</id><snippet>first</snippet></ROW><ROW><id>12143114</id><snippet>second</snippet></ROW><ROW><id>12143114</id><snippet>first</snippet></ROW><ROW><id>12143114</id><snippet>second</snippet></ROW><ROW><id>12143114</id><snippet>==</snippet></ROW><ROW><id>12143114</id><snippet>cut_insignificant_digits_recursively(obj, places)</snippet></ROW><ROW><id>12143114</id><snippet>obj</snippet></ROW><ROW><id>12143114</id><snippet>places</snippet></ROW><ROW><id>12143114</id><snippet>obj</snippet></ROW><ROW><id>12143114</id><snippet>is_almost_equals(first, second, places)</snippet></ROW><ROW><id>12143114</id><snippet>from insignificant_digit_cutter import cut_insignificant_digits_recursively

def is_almost_equal(first, second, places):
    '''returns True if first and second equal. 
    returns true if first and second aren't equal but have exactly the same
    structure and values except for a bunch of floats which are just almost
    equal (floats are almost equal if they're equal when we consider only the
    [places] most significant digits of each).'''
    if first == second: return True
    cut_first = cut_insignificant_digits_recursively(first, places)
    cut_second = cut_insignificant_digits_recursively(second, places)
    return cut_first == cut_second
</snippet></ROW><ROW><id>12143114</id><snippet>cut_insignificant_digits_recursively(obj, places)</snippet></ROW><ROW><id>12143114</id><snippet>def cut_insignificant_digits(number, places):
    '''cut the least significant decimal digits of a number, 
    leave only [places] decimal digits'''
    if  type(number) != float: return number
    number_as_str = str(number)
    end_of_number = number_as_str.find('.')+places+1
    if end_of_number &gt; len(number_as_str): return number
    return float(number_as_str[:end_of_number])

def cut_insignificant_digits_lazy(iterable, places):
    for obj in iterable:
        yield cut_insignificant_digits_recursively(obj, places)

def cut_insignificant_digits_recursively(obj, places):
    '''return a copy of obj except that every float loses its least significant 
    decimal digits remaining only [places] decimal digits'''
    t = type(obj)
    if t == float: return cut_insignificant_digits(obj, places)
    if t in (list, tuple, set):
        return t(cut_insignificant_digits_lazy(obj, places))
    if t == dict:
        return {cut_insignificant_digits_recursively(key, places):
                cut_insignificant_digits_recursively(val, places)
                for key,val in obj.items()}
    return obj
</snippet></ROW><ROW><id>12143251</id><snippet># Original grid
grid = [[1.1, 1.2, 1.3, 1.4, 1.5],
 [2.1, 2.2, 2.3, 2.4, 2.5],
 [3.1, 3.2, 3.3, 3.4, 3.5],
 [4.1, 4.2, 4.3, 4.4, 4.5],
 [5.1, 5.2, 5.3, 5.4, 5.5]]


# Window function to return sequence of pairs.
def window(row):
    return [(row[i], row[i + 1]) for i in range(len(row) - 1)]
</snippet></ROW><ROW><id>12143251</id><snippet># Print sequences of pairs for grid
print [window(y) for y in grid]
</snippet></ROW><ROW><id>12143251</id><snippet># Take the nth item from every row to get that column.
def column(grid, columnNumber):
    return [row[columnNumber] for row in grid]


# Transpose grid to turn it into columns.
def transpose(grid):
    # Assume all rows are the same length.
    numColumns = len(grid[0])
    return [column(grid, columnI) for columnI in range(numColumns)]


# Return windowed pairs for transposed matrix.
print [window(y) for y in transpose(grid)]
</snippet></ROW><ROW><id>12143372</id><snippet>'⚤'</snippet></ROW><ROW><id>12143372</id><snippet>'⚤</snippet></ROW><ROW><id>12143372</id><snippet>'⚤'.</snippet></ROW><ROW><id>12143372</id><snippet>'⚤.</snippet></ROW><ROW><id>12143372</id><snippet>python -c "print ('⚤'')"</snippet></ROW><ROW><id>12143372</id><snippet>python -c "print ('⚤')"</snippet></ROW><ROW><id>12143372</id><snippet>python -c "print ord(u'⚤)"
</snippet></ROW><ROW><id>12143372</id><snippet>python -c "print ord(u'⚤')"
</snippet></ROW><ROW><id>12143416</id><snippet>C++</snippet></ROW><ROW><id>12143416</id><snippet>Django</snippet></ROW><ROW><id>12143416</id><snippet>C++</snippet></ROW><ROW><id>12143547</id><snippet>current_app</snippet></ROW><ROW><id>12143547</id><snippet>from flask import current_app
current_app.config['attribute_name']
</snippet></ROW><ROW><id>12143729</id><snippet>django-userena</snippet></ROW><ROW><id>12143729</id><snippet>django-guardian</snippet></ROW><ROW><id>12143729</id><snippet>@receiver(post_save, sender=User, dispatch_uid='user.created')
def user_created(sender, instance, created, raw, using, **kwargs):
  """ Adds 'change_profile' permission to created user objects """
  if created:
    from guardian.shortcuts import assign
    assign('change_profile', instance, instance.get_profile())
</snippet></ROW><ROW><id>12144029</id><snippet>ax.set_xticks(xinterval)</snippet></ROW><ROW><id>12144029</id><snippet>=</snippet></ROW><ROW><id>12144029</id><snippet>set_xticklabels</snippet></ROW><ROW><id>12144179</id><snippet>#!/usr/bin/env python
"""Continuation-passing style (CPS) script.

Usage:

   $ python cps.py script1.py arg1 arg2 -- script2.py a b c -- script3.py ...
"""
import platform
import sys
from subprocess import call

if len(sys.argv) &lt; 2:
    sys.exit() # nothing to do

# define a command that starts new terminal
if platform.system() == "Windows":
    new_window_command = "cmd.exe /c start cmd.exe /c".split()
else:  #XXX this can be made more portable
    new_window_command = "x-terminal-emulator -e".split()

# find where script args end
end = sys.argv.index('--') if '--' in sys.argv else len(sys.argv)

# call script; wait while it ends; ignore errors
call([sys.executable] + sys.argv[1:end])

# start new window; call itself; pass the rest; ignore errors
rest = sys.argv[end+1:]
if rest:
    call(new_window_command + [sys.executable, sys.argv[0]] + rest)

print("Press Enter to exit") #NOTE: to avoid raw_input/input py3k shenanigans
sys.stdin.readline()
</snippet></ROW><ROW><id>12144179</id><snippet>$ python cps.py script1.py script2.py script3.py
</snippet></ROW><ROW><id>12144179</id><snippet>--</snippet></ROW><ROW><id>12144179</id><snippet>end = 2</snippet></ROW><ROW><id>12144179</id><snippet>rest = sys.argv[end:]</snippet></ROW><ROW><id>12144179</id><snippet>+1</snippet></ROW><ROW><id>12144390</id><snippet>hash_key</snippet></ROW><ROW><id>12144390</id><snippet>range_key</snippet></ROW><ROW><id>12144390</id><snippet>query</snippet></ROW><ROW><id>12144390</id><snippet>hash_key</snippet></ROW><ROW><id>12144390</id><snippet>range_keys</snippet></ROW><ROW><id>12144390</id><snippet>BatchGetItem</snippet></ROW><ROW><id>12144390</id><snippet>scan</snippet></ROW><ROW><id>12144390</id><snippet>query</snippet></ROW><ROW><id>12144390</id><snippet>UnprocessedKeys</snippet></ROW><ROW><id>12144390</id><snippet>hash_key</snippet></ROW><ROW><id>12144390</id><snippet>import boto

# Helper function. This is more or less the code
# I added to devolop branch
def resubmit(batch, prev):
    # Empty (re-use) the batch
    del batch[:]

    # The batch answer contains the list of
    # unprocessed keys grouped by tables
    if 'UnprocessedKeys' in prev:
        unprocessed = res['UnprocessedKeys']
    else:
        return None

    # Load the unprocessed keys
    for table_name, table_req in unprocessed.iteritems():
        table_keys = table_req['Keys']
        table = batch.layer2.get_table(table_name)

        keys = []
        for key in table_keys:
            h = key['HashKeyElement']
            r = None
            if 'RangeKeyElement' in key:
                r = key['RangeKeyElement']
            keys.append((h, r))

        attributes_to_get = None
        if 'AttributesToGet' in table_req:
            attributes_to_get = table_req['AttributesToGet']

        batch.add_batch(table, keys, attributes_to_get=attributes_to_get)

    return batch.submit()

# Main
db = boto.connect_dynamodb()
table = db.get_table('MyTable')
batch = db.new_batch_list()

keys = range (100) # Get items from 0 to 99

batch.add_batch(table, keys)

res = batch.submit()

while res:
    print res # Do some usefull work here
    res = resubmit(batch, res)

# The END
</snippet></ROW><ROW><id>12144390</id><snippet>resubmit()</snippet></ROW><ROW><id>12144390</id><snippet>BatchList</snippet></ROW><ROW><id>12144390</id><snippet>BatchList</snippet></ROW><ROW><id>12144390</id><snippet>submit()</snippet></ROW><ROW><id>12144390</id><snippet>resubmit()</snippet></ROW><ROW><id>12144756</id><snippet>HTTP_PROXY=http://user:password@your-company-proxy.com:8080
</snippet></ROW><ROW><id>12144756</id><snippet>My Computer &gt; Properties &gt; Advanced &gt; Environment Variables</snippet></ROW><ROW><id>12144756</id><snippet>cmd</snippet></ROW><ROW><id>12144756</id><snippet>easy_install</snippet></ROW><ROW><id>12144756</id><snippet>pip</snippet></ROW><ROW><id>12144756</id><snippet>requests</snippet></ROW><ROW><id>12144756</id><snippet>httplib</snippet></ROW><ROW><id>12144756</id><snippet>urllib</snippet></ROW><ROW><id>12144756</id><snippet>requests</snippet></ROW><ROW><id>12144756</id><snippet>HTTP_PROXY</snippet></ROW><ROW><id>12144756</id><snippet>import requests

proxies = {
  "http": "http://user:pass@foo.bar.zoo:8080",
  "https": "http://user:pass@foo.bar.zoo:8080",
}

requests.get("http://example.org", proxies=proxies)
</snippet></ROW><ROW><id>12144770</id><snippet>os.py</snippet></ROW><ROW><id>12144770</id><snippet>from _abcoll import MutableMapping # Can't use collections (bootstrap)
</snippet></ROW><ROW><id>12144770</id><snippet>collections</snippet></ROW><ROW><id>12144770</id><snippet>os</snippet></ROW><ROW><id>12144770</id><snippet>_abcoll</snippet></ROW><ROW><id>12144770</id><snippet>collections.abc</snippet></ROW><ROW><id>12144879</id><snippet>numpy</snippet></ROW><ROW><id>12144879</id><snippet>int</snippet></ROW><ROW><id>12144879</id><snippet>int</snippet></ROW><ROW><id>12144879</id><snippet>long</snippet></ROW><ROW><id>12144879</id><snippet>L</snippet></ROW><ROW><id>12144879</id><snippet>&gt;&gt;&gt; 2**100
1267650600228229401496703205376L
</snippet></ROW><ROW><id>12144879</id><snippet>numpy</snippet></ROW><ROW><id>12144879</id><snippet>dtypes</snippet></ROW><ROW><id>12144879</id><snippet>&gt;&gt;&gt; for kind in numpy.int8, numpy.int16, numpy.int32, numpy.int64:
...     for power in 1, 2, 5, 20:
...         print kind, power, kind(10), kind(10)**power
... 
&lt;type 'numpy.int8'&gt; 1 10 10
&lt;type 'numpy.int8'&gt; 2 10 100
&lt;type 'numpy.int8'&gt; 5 10 100000
&lt;type 'numpy.int8'&gt; 20 10 -2147483648
&lt;type 'numpy.int16'&gt; 1 10 10
&lt;type 'numpy.int16'&gt; 2 10 100
&lt;type 'numpy.int16'&gt; 5 10 100000
&lt;type 'numpy.int16'&gt; 20 10 -2147483648
&lt;type 'numpy.int32'&gt; 1 10 10
&lt;type 'numpy.int32'&gt; 2 10 100
&lt;type 'numpy.int32'&gt; 5 10 100000
&lt;type 'numpy.int32'&gt; 20 10 1661992960
&lt;type 'numpy.int64'&gt; 1 10 10
&lt;type 'numpy.int64'&gt; 2 10 100
&lt;type 'numpy.int64'&gt; 5 10 100000
&lt;type 'numpy.int64'&gt; 20 10 7766279631452241920
</snippet></ROW><ROW><id>12144879</id><snippet>numpy</snippet></ROW><ROW><id>12144879</id><snippet>dtype=object</snippet></ROW><ROW><id>12144879</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.array([10])
array([10])
&gt;&gt;&gt; numpy.array([10])**100
__main__:1: RuntimeWarning: invalid value encountered in power
array([-2147483648])
&gt;&gt;&gt; numpy.array([10], dtype=object)
array([10], dtype=object)
&gt;&gt;&gt; numpy.array([10], dtype=object)**100
array([ 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000], dtype=object)
</snippet></ROW><ROW><id>12145161</id><snippet>StringIO</snippet></ROW><ROW><id>12145161</id><snippet>print_png</snippet></ROW><ROW><id>12145161</id><snippet>from cStringIO import StringIO
sio = StringIO()
canvas.print_png(sio)
return sio.getvalue()
</snippet></ROW><ROW><id>12145161</id><snippet>io.BytesIO</snippet></ROW><ROW><id>12145161</id><snippet>cStringIO</snippet></ROW><ROW><id>12145164</id><snippet>a[contains(text(),'Link Text Next')]</snippet></ROW><ROW><id>12145164</id><snippet>nextPage = HtmlXPathSelector(response).select(
    "//div[@class='paginationControl']/a[contains(text(),'Link Text Next')]/@href")
</snippet></ROW><ROW><id>12145164</id><snippet>Link Text Next</snippet></ROW><ROW><id>12145164</id><snippet>text()="Link Text Next "
</snippet></ROW><ROW><id>12145164</id><snippet>contains</snippet></ROW><ROW><id>12145170</id><snippet>SyntaxError</snippet></ROW><ROW><id>12145469</id><snippet>git pull heroku master</snippet></ROW><ROW><id>12145469</id><snippet>heroku run bash</snippet></ROW><ROW><id>12145469</id><snippet>os</snippet></ROW><ROW><id>12145670</id><snippet>MyClass.__parseFileAsText()</snippet></ROW><ROW><id>12145670</id><snippet>__parseFileAsText()</snippet></ROW><ROW><id>12145670</id><snippet>__parseFileAsText()</snippet></ROW><ROW><id>12145670</id><snippet>__parseFileAsText()</snippet></ROW><ROW><id>12145670</id><snippet>tempParam = StaticConfig.PASTE_PARAMS
...
return tempParam
</snippet></ROW><ROW><id>12145670</id><snippet>StaticConfig.PASTE_PARAMS</snippet></ROW><ROW><id>12145670</id><snippet>StaticConfig.PASTE_PARAMS</snippet></ROW><ROW><id>12145670</id><snippet>StaticConfig.PASTE_PARAMS</snippet></ROW><ROW><id>12145670</id><snippet># StaticConfig.PASTE_PARAMS is an empty dict
tempParam = {}

# All values in StaticConfig.PASTE_PARAMS are immutable
tempParam = dict(StaticConfig.PASTE_PARAMS)
</snippet></ROW><ROW><id>12145670</id><snippet>StaticConfig.PASTE_PARAMS</snippet></ROW><ROW><id>12145670</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>12145670</id><snippet>tempParam</snippet></ROW><ROW><id>12145777</id><snippet>Connection refused</snippet></ROW><ROW><id>12145777</id><snippet>Connection timed out</snippet></ROW><ROW><id>12145777</id><snippet>mtr</snippet></ROW><ROW><id>12145777</id><snippet>traceroute</snippet></ROW><ROW><id>12145777</id><snippet>ping</snippet></ROW><ROW><id>12145777</id><snippet>netstat -tlp</snippet></ROW><ROW><id>12145778</id><snippet>temp = ['-50.00', '60.00', '-63.00', '50.00', '-57.00']
sum(float(t) for t in temp)
</snippet></ROW><ROW><id>12146085</id><snippet>tests</snippet></ROW><ROW><id>12146085</id><snippet>__init__.py</snippet></ROW><ROW><id>12146085</id><snippet>tests</snippet></ROW><ROW><id>12146085</id><snippet>test_something.py</snippet></ROW><ROW><id>12146085</id><snippet>tests</snippet></ROW><ROW><id>12146085</id><snippet>test_</snippet></ROW><ROW><id>12146085</id><snippet>TestCase</snippet></ROW><ROW><id>12146085</id><snippet>test_</snippet></ROW><ROW><id>12146085</id><snippet>unittest</snippet></ROW><ROW><id>12146085</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>12146085</id><snippet>from myproject.views import my_view</snippet></ROW><ROW><id>12146138</id><snippet>res = br.open("https://myapp.url.com/login", data=...)</snippet></ROW><ROW><id>12146138</id><snippet>mechanize.Request</snippet></ROW><ROW><id>12146182</id><snippet>import csv

def get_distinct_values(filename, column):
    with open(filename, "rb") as fp:
        reader = csv.reader(fp)
        return set(line[column] for line in reader)
</snippet></ROW><ROW><id>12146182</id><snippet>&gt;&gt;&gt; get_distinct_values("ccol.csv", 0)
set(['1', '3', '2', '4'])
&gt;&gt;&gt; get_distinct_values("ccol.csv", 1)
set(['', 'hat', 'pants'])
&gt;&gt;&gt; get_distinct_values("ccol.csv", 2)
set(['', 'elephant', 'dog', 'cat'])
</snippet></ROW><ROW><id>12146182</id><snippet>set(line[column] for line in reader if line[column])</snippet></ROW><ROW><id>12146763</id><snippet>{"date": new ISOWeek({year: 2012, kw: 8})}
</snippet></ROW><ROW><id>12146763</id><snippet>{"date": ["ISOWeek", {"year": 2012, "kw": 8}]}
</snippet></ROW><ROW><id>12146765</id><snippet>AUDITRAIL.rst</snippet></ROW><ROW><id>12146765</id><snippet>AUDITTRAIL_SESSIONLOG.rst</snippet></ROW><ROW><id>12146765</id><snippet>AUDITTRAIL_SESSIONLOG.rst</snippet></ROW><ROW><id>12146765</id><snippet>AUDITTRAIL.rst</snippet></ROW><ROW><id>12146765</id><snippet>.. toctree::</snippet></ROW><ROW><id>12146765</id><snippet>RuntimeError: maximum recursion depth exceeded in cmp</snippet></ROW><ROW><id>12146882</id><snippet>trends</snippet></ROW><ROW><id>12146882</id><snippet>&gt;&gt;&gt; import twitter
&gt;&gt;&gt; twitter_api=twitter.Twitter(domain="api.twitter.com", api_version='1')
&gt;&gt;&gt; WORLD_WOE_ID = 1
&gt;&gt;&gt; world_trends = twitter_api.trends._(WORLD_WOE_ID)
&gt;&gt;&gt; trends = [ trend for trend in world_trends()[0]['trends'] ]
</snippet></ROW><ROW><id>12146882</id><snippet>trends</snippet></ROW><ROW><id>12146882</id><snippet>pprint.pprint</snippet></ROW><ROW><id>12146882</id><snippet>name</snippet></ROW><ROW><id>12146882</id><snippet>&gt;&gt;&gt; [cur['name'] for cur in trends]
[u'#20CutestFollowers', u'#watkiestnl', ...]
</snippet></ROW><ROW><id>12146882</id><snippet>for cur in trends:
    print cur['name']
</snippet></ROW><ROW><id>12146940</id><snippet>StringIO</snippet></ROW><ROW><id>12146940</id><snippet>io</snippet></ROW><ROW><id>12146940</id><snippet>from io import StringIO
</snippet></ROW><ROW><id>12146940</id><snippet>from io import import StringIO</snippet></ROW><ROW><id>12146940</id><snippet>import</snippet></ROW><ROW><id>12146940</id><snippet>2to3</snippet></ROW><ROW><id>12147197</id><snippet>&gt;&gt;&gt; from jinja2 import Template

&gt;&gt;&gt; s = "{% for element in elements %}{{loop.index}} {% endfor %}"
&gt;&gt;&gt; Template(s).render(elements=["a", "b", "c", "d"])
1 2 3 4
</snippet></ROW><ROW><id>12147234</id><snippet>plt.subplots()</snippet></ROW><ROW><id>12147234</id><snippet>AxesGrid1</snippet></ROW><ROW><id>12147234</id><snippet>gridspec</snippet></ROW><ROW><id>12147234</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# fake data
x = np.random.lognormal(mean=2.25, sigma=0.75, size=37)

# setup the figure and axes
fig = plt.figure(figsize=(6,4))
bpAx = fig.add_axes([0.2, 0.7, 0.7, 0.2])   # left, bottom, width, height:
                                            # (adjust as necessary)
histAx = fig.add_axes([0.2, 0.2, 0.7, 0.5]) # left specs should match and
                                            # bottom + height on this line should
                                            # equal bottom on bpAx line
# plot stuff
bp = bpAx.boxplot(x, notch=True, vert=False)
h = histAx.hist(x, bins=7)

# confirm that the axes line up 
xlims = np.array([bpAx.get_xlim(), histAx.get_xlim()])
for ax in [bpAx, histAx]:
    ax.set_xlim([xlims.min(), xlims.max()])

bpAx.set_xticklabels([])  # clear out overlapping xlabels
bpAx.set_yticks([])  # don't need that 1 tick mark
plt.show()
</snippet></ROW><ROW><id>12147408</id><snippet>&gt;&gt;&gt; t_end = 100.0
&gt;&gt;&gt; t_step = 0.01
&gt;&gt;&gt; total = int(t_end/t_step)
&gt;&gt;&gt; for x in itertools.accumulate((t_step for i in range(total + 1))):
    print(x)
</snippet></ROW><ROW><id>12147456</id><snippet>python virtualenv.py env
</snippet></ROW><ROW><id>12147820</id><snippet>g.pop()</snippet></ROW><ROW><id>12147820</id><snippet>try</snippet></ROW><ROW><id>12147820</id><snippet>except</snippet></ROW><ROW><id>12147820</id><snippet>try:
    result = g.pop('age')
except KeyError:
    result = default_answer()
</snippet></ROW><ROW><id>12147820</id><snippet>dict</snippet></ROW><ROW><id>12147996</id><snippet>while</snippet></ROW><ROW><id>12147996</id><snippet>new</snippet></ROW><ROW><id>12147996</id><snippet>list</snippet></ROW><ROW><id>12147996</id><snippet>new=[0,0]</snippet></ROW><ROW><id>12147996</id><snippet>while</snippet></ROW><ROW><id>12147996</id><snippet>        ...
        while end&gt;last:
            new=[0,0]
            ...
</snippet></ROW><ROW><id>12147996</id><snippet>datetime.timedelta(minutes=30)</snippet></ROW><ROW><id>12147996</id><snippet>from datetime import datetime, timedelta

def intervals(start, end):
    temp = datetime.min + timedelta(hours=start[0], minutes=start[1])
    last = datetime.min + timedelta(hours=end[0], minutes=end[1])
    interval = timedelta(minutes=30)
    result = []
    while temp &lt;= last:
        result.append([temp.hour, temp.minute])
        temp += interval
    return result

&gt;&gt;&gt; intervals([9, 30], [12, 30])
[[9, 30], [10, 0], [10, 30], [11, 0], [11, 30], [12, 0], [12, 30]]
&gt;&gt;&gt; intervals([9, 45], [12, 15])
[[9, 45], [10, 15], [10, 45], [11, 15], [11, 45], [12, 15]]
</snippet></ROW><ROW><id>12148249</id><snippet>  def configuration(parent_package='',top_path=None):
      from numpy.distutils.misc_util import Configuration, get_info
      config = Configuration('a', parent_package, top_path)
      lib = ['./libdir/lib.a']
      src = ['a.f90','a.pyf']
      inc_dir = ['libdir']              
      config.add_extension('mya',sources=src,depends=lib_tt,
                      include_dirs=inc_dir,extra_objects="lib.a")
      #The main trick was to use extra_objects keyword
      return config

  if __name__ == '__main__':
      from numpy.distutils.core import setup
      setup(**configuration(top_path='').todict())
</snippet></ROW><ROW><id>12148290</id><snippet>def partition(array, left, right, pivotIndex):
    pivotValue = array[pivotIndex]
    swap(array, pivotIndex, right)
    storeIndex = left
    for i in range(left, right):    # range doesn't include right element already
        if array[i] &lt;= pivotValue:  # need to check for equality (not really necessary for the sorting routine)
            swap(array, i, storeIndex)
            storeIndex = storeIndex + 1
            print array, i
    swap(array, storeIndex, right)
    return storeIndex
</snippet></ROW><ROW><id>12148290</id><snippet>range(left, right)</snippet></ROW><ROW><id>12148290</id><snippet>[left, left + 1, ..., right - 1]</snippet></ROW><ROW><id>12148290</id><snippet>range(left, right -1)</snippet></ROW><ROW><id>12148290</id><snippet>right - 2</snippet></ROW><ROW><id>12148290</id><snippet>partition</snippet></ROW><ROW><id>12148290</id><snippet>array[i] &lt;= pivotValue</snippet></ROW><ROW><id>12148445</id><snippet>orderings = (
    ('A2', 'A1'),
    ('B1', 'B2'),
    ('C2', 'C1')
)

orders = [dict([(v, i) for i, v in enumerate(o)]) for o in orderings]

mytable.sort(key=lambda r: tuple(o[c] for c, o in zip(r, orders)))
</snippet></ROW><ROW><id>12148508</id><snippet>A = dot(A, R.T)
</snippet></ROW><ROW><id>12148760</id><snippet>from sqlalchemy import Integer, String, Column, create_engine, ForeignKey, ForeignKeyConstraint
from sqlalchemy.orm import relationship, Session
from sqlalchemy.orm.collections import attribute_mapped_collection
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.associationproxy import association_proxy

Base = declarative_base()

class AnimalFact(Base):
    """key/value attribute whose value can be either a string or a list of strings"""
    __tablename__ = 'animalfacts'

    # use either surrogate PK id, or the composite animal_id/key - but
    # not both.   id/animal_id/key all together is not a proper key.
    # Personally I'd go for "id" here, but here's the composite version.

    animal_id = Column(Integer, ForeignKey('animal.id'), primary_key=True)
    key = Column(String, primary_key=True)

    # data
    str_value = Column(String)
    _list_value = relationship('StringEntry')

    # proxy list strings
    list_proxy = association_proxy('_list_value', 'value')

    def __init__(self, key, value):
        self.key = key
        self.value = value

    @property
    def value(self):
        if self.str_value is not None:
            return self.str_value
        else:
            return self.list_proxy

    @value.setter
    def value(self, value):
        if isinstance(value, basestring):
            self.str_value = value
        elif isinstance(value, list):
            self.list_proxy = value
        else:
            assert False

class Animal(Base):
    __tablename__ = 'animal'

    id = Column(Integer, primary_key=True)
    name = Column(String)
    _facts = relationship(AnimalFact, backref='animal',
                          collection_class=attribute_mapped_collection('key'))
    facts = association_proxy('_facts', 'value')

    def __init__(self, name):
        self.name = name

    # dictionary interface around "facts".
    # I'd just use "animal.facts" here, but here's how to skip that.
    def __getitem__(self, key):
        return self.facts.__getitem__(key)

    def __setitem__(self, key, value):
        self.facts.__setitem__(key, value)

    def __delitem__(self, key):
        self.facts.__delitem__(key)

    def __contains__(self, key):
        return self.facts.__contains__(key)

    def keys(self):
        return self.facts.keys()


class StringEntry(Base):
    __tablename__ = 'myvalue'
    id = Column(Integer, primary_key=True)
    animal_id = Column(Integer)
    key = Column(Integer)
    value = Column(String)

    # because AnimalFact has a composite PK, we need
    # a composite FK.
    __table_args__ = (ForeignKeyConstraint(
                        ['key', 'animal_id'],
                        ['animalfacts.key', 'animalfacts.animal_id']),
                    )
    def __init__(self, value):
        self.value = value

engine = create_engine('sqlite://', echo=True)
Base.metadata.create_all(engine)

session = Session(engine)


# create a new animal
a = Animal('aardvark')

a['eyes'] = ['left side', 'right side']

a['cute'] = 'sort of'

session.add(a)
session.commit()
session.close()

for animal in session.query(Animal):
    print animal.name, ",".join(["%s" % animal[key] for key in animal.keys()])
</snippet></ROW><ROW><id>12148779</id><snippet>getElementsByTagName</snippet></ROW><ROW><id>12148779</id><snippet>xmlauthor</snippet></ROW><ROW><id>12148779</id><snippet>    content += "***Changes by:"  + xmlauthor + "*** \n \n"
</snippet></ROW><ROW><id>12148779</id><snippet>    content += "***Changes by:"  + xmlauthor.childNodes[0].nodeValue + "*** \n \n"
</snippet></ROW><ROW><id>12149135</id><snippet>Relationships</snippet></ROW><ROW><id>12149135</id><snippet>@ndb.tasklet
def callback(entity):
  email = friend_dic['email']
  lastUpdated = friend_dic['lastUpdated']
  userKey = Key('User', email)
  query = ndb.gql('SELECT * FROM StatusUpdates WHERE ANCESTOR IS :1 AND modifiedDate &gt; :2', userKey, lastUpdated)
  status_updates = yield query.fetch_async()
  raise ndb.Return(status_updates)

qry = ndb.gql("SELECT * FROM Relationships WHERE friend_to = :1", user.key)
updates = yield qry.map_async(callback)
#updates will now be a list of status updates
</snippet></ROW><ROW><id>12149135</id><snippet>queries = []
status_list = []
for friend_dic in friends:
  email = friend_dic['email']
  lastUpdated = friend_dic['lastUpdated']
  userKey = Key('User', email)
  queries.append(ndb.gql('SELECT * FROM StatusUpdates WHERE ANCESTOR IS :1 AND modifiedDate &gt; :2', userKey, lastUpdated).fetch_async())

for query in queries:
  statuses = yield query
  status_list.extend([x.to_dict() for x in statuses])

raise ndb.Return(status_list)
</snippet></ROW><ROW><id>12149173</id><snippet>slug = ["snakes", "snake-s" ] # in the real world this is generated from directory structure on disk

# build the query
query = MyModel.objects
if hasattr(slug, "__iter__"):
    q_list = []
    for s in slug:
        q_list.append(Q(slug=s))
    query = query.filter(reduce(operator.or_, q_list))
else:
    query = query.filter(slug=slug)
</snippet></ROW><ROW><id>12149173</id><snippet>q_list = []</snippet></ROW><ROW><id>12149173</id><snippet>reduce(operator.or_, q_list)</snippet></ROW><ROW><id>12149173</id><snippet>reduce</snippet></ROW><ROW><id>12149173</id><snippet>result = MyModel.objects.filter(reduce(operator.or_, [Q(slug=s) for s in slug])) if hasattr(slug, "__iter__") else MyModel.objects.filter(slug=slug)
</snippet></ROW><ROW><id>12149290</id><snippet>http://localhost:8000/api/v1/users/?username=Puck
</snippet></ROW><ROW><id>12149290</id><snippet>api_name='v1'</snippet></ROW><ROW><id>12149332</id><snippet>loadFile</snippet></ROW><ROW><id>12149332</id><snippet>fileName</snippet></ROW><ROW><id>12149332</id><snippet>NameError</snippet></ROW><ROW><id>12149332</id><snippet>self.fileName</snippet></ROW><ROW><id>12149332</id><snippet>goForth</snippet></ROW><ROW><id>12149332</id><snippet>fileName</snippet></ROW><ROW><id>12149332</id><snippet>__init__</snippet></ROW><ROW><id>12149341</id><snippet>Python 3.2.3 (default, Apr 11 2012, 07:15:24) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import csv
&gt;&gt;&gt; it = csv.reader(['foo,0','bar,1'])
&gt;&gt;&gt; next(it)
['foo', '0']
&gt;&gt;&gt; next(it)
['bar', '1']
&gt;&gt;&gt; next(it)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</snippet></ROW><ROW><id>12149341</id><snippet>for row in inputFileText:</snippet></ROW><ROW><id>12149341</id><snippet>counter &gt; 1</snippet></ROW><ROW><id>12149341</id><snippet>counter &gt; 1</snippet></ROW><ROW><id>12149341</id><snippet>list(csv.reader(...))</snippet></ROW><ROW><id>12149341</id><snippet>with</snippet></ROW><ROW><id>12149341</id><snippet>with open('...', 'mode') as f:
    # use f
# f is closed
</snippet></ROW><ROW><id>12149511</id><snippet>In [51]: import xml.dom.minidom as minidom

In [52]: dom = minidom.parse("log.xml")

In [53]: dom
Out[53]: &lt;xml.dom.minidom.Document instance at 0x97082ec&gt;
</snippet></ROW><ROW><id>12149511</id><snippet>In [55]: dom.getElementsByTagName("paths")
Out[55]: [&lt;DOM Element: paths at 0x97086cc&gt;]

In [56]: dom.getElementsByTagName("paths")[0]
Out[56]: &lt;DOM Element: paths at 0x97086cc&gt;

In [57]: vars(dom.getElementsByTagName("paths")[0])
Out[57]: 
{'_attrs': {},
 '_attrsNS': {},
 'childNodes': [&lt;DOM Text node "u'\n\n'"&gt;,
  &lt;DOM Element: path at 0x970874c&gt;,
  &lt;DOM Text node "u'   \n\n'"&gt;,
  &lt;DOM Element: path at 0x97088ac&gt;,
  &lt;DOM Text node "u'\n\n'"&gt;],
 'namespaceURI': None,
 'nextSibling': &lt;DOM Text node "u'\n'"&gt;,
 'nodeName': u'paths',
 'ownerDocument': &lt;xml.dom.minidom.Document instance at 0x97082ec&gt;,
 'parentNode': &lt;DOM Element: logentry at 0x970848c&gt;,
 'prefix': None,
 'previousSibling': &lt;DOM Text node "u'\n'"&gt;,
 'tagName': u'paths'}
</snippet></ROW><ROW><id>12149511</id><snippet>childNodes</snippet></ROW><ROW><id>12149511</id><snippet>In [58]: dom.getElementsByTagName("paths")[0].childNodes
Out[58]: 
[&lt;DOM Text node "u'\n\n'"&gt;,
 &lt;DOM Element: path at 0x970874c&gt;,
 &lt;DOM Text node "u'   \n\n'"&gt;,
 &lt;DOM Element: path at 0x97088ac&gt;,
 &lt;DOM Text node "u'\n\n'"&gt;]
</snippet></ROW><ROW><id>12149511</id><snippet>In [61]: elements = [x for x in dom.getElementsByTagName("paths")[0].childNodes if isinstance(x, minidom.Element)]

In [62]: elements
Out[62]: [&lt;DOM Element: path at 0x970874c&gt;, &lt;DOM Element: path at 0x97088ac&gt;]
</snippet></ROW><ROW><id>12149511</id><snippet>In [65]: elements
Out[65]: [&lt;DOM Element: path at 0x970874c&gt;, &lt;DOM Element: path at 0x97088ac&gt;]

In [66]: vars(elements[0])
Out[66]: 
{'_attrs': {u'action': &lt;xml.dom.minidom.Attr instance at 0x970880c&gt;,
  u'kind': &lt;xml.dom.minidom.Attr instance at 0x97087ac&gt;},
 '_attrsNS': {(None, u'action'): &lt;xml.dom.minidom.Attr instance at 0x970880c&gt;,
  (None, u'kind'): &lt;xml.dom.minidom.Attr instance at 0x97087ac&gt;},
 'childNodes': [&lt;DOM Text node "u'/branches/'..."&gt;],
 'namespaceURI': None,
 'nextSibling': &lt;DOM Text node "u'   \n\n'"&gt;,
 'nodeName': u'path',
 'ownerDocument': &lt;xml.dom.minidom.Document instance at 0x97082ec&gt;,
 'parentNode': &lt;DOM Element: paths at 0x97086cc&gt;,
 'prefix': None,
 'previousSibling': &lt;DOM Text node "u'\n\n'"&gt;,
 'tagName': u'path'}
</snippet></ROW><ROW><id>12149511</id><snippet>In [67]: for elem in elements:
    print elem, elem.childNodes[0].nodeValue, elem.getAttribute("kind"), elem.getAttribute("action") 
   ....:     
&lt;DOM Element: path at 0x970874c&gt; /branches/Patch_4_2_0_Branch/text.xml file M
&lt;DOM Element: path at 0x97088ac&gt; /branches/Patch_4_2_0_Branch dir M
</snippet></ROW><ROW><id>12149585</id><snippet>str(u'a')</snippet></ROW><ROW><id>12149665</id><snippet>encode()</snippet></ROW><ROW><id>12150077</id><snippet>def confirmcallback(url, message):
    return True
browser.set_javascript_confirm_callback(confirmcallback)

def cancel_answer(url, message, defaultvalue):
    return
browser.set_javascript_prompt_callback(cancel_answer)
</snippet></ROW><ROW><id>12150221</id><snippet>name</snippet></ROW><ROW><id>12150221</id><snippet>select</snippet></ROW><ROW><id>12150221</id><snippet>&lt;select name="foo"&gt;
&lt;option value="bar"&gt;Bar&lt;/option&gt;
&lt;/select&gt;

if request.POST.get('foo') == 'bar':
   print 'Bar'
</snippet></ROW><ROW><id>12150349</id><snippet>def</snippet></ROW><ROW><id>12150349</id><snippet>def</snippet></ROW><ROW><id>12150638</id><snippet>all_digits</snippet></ROW><ROW><id>12150638</id><snippet>0</snippet></ROW><ROW><id>12150638</id><snippet>9</snippet></ROW><ROW><id>12150638</id><snippet>digits</snippet></ROW><ROW><id>12150638</id><snippet>"0"</snippet></ROW><ROW><id>12150638</id><snippet>all_digits = set(map(str, range(10)))
</snippet></ROW><ROW><id>12150748</id><snippet>requests</snippet></ROW><ROW><id>12150748</id><snippet>resp = requests.post('http://localhost/proj/1')
cookies = resp.cookies

requests.get('http://localhost/proj/2', cookies=cookies)
</snippet></ROW><ROW><id>12150748</id><snippet>requests.session</snippet></ROW><ROW><id>12150748</id><snippet>with requests.session() as s:
    s.post('http://localhost/proj/1')
    s.get('http://localhost/proj/2')
</snippet></ROW><ROW><id>12150837</id><snippet>np.random.shuffle</snippet></ROW><ROW><id>12150837</id><snippet># Create an array of indices
indices = np.arange(y.size)
# Randomize it
np.random.shuffle(indices)
</snippet></ROW><ROW><id>12150837</id><snippet>indices</snippet></ROW><ROW><id>12150837</id><snippet>y</snippet></ROW><ROW><id>12150837</id><snippet>y_new = y[indices]</snippet></ROW><ROW><id>12150837</id><snippet>indices</snippet></ROW><ROW><id>12150917</id><snippet>&gt;&gt;&gt; d = OrderedDict([('a', 1), ('c', 3), ('b', 2)])
&gt;&gt;&gt; d
OrderedDict([('a', 1), ('c', 3), ('b', 2)])
&gt;&gt;&gt; d2 = OrderedDict([('__C__', v) if k == 'c' else (k, v) for k, v in d.items()])
&gt;&gt;&gt; d2
OrderedDict([('a', 1), ('__C__', 3), ('b', 2)])
</snippet></ROW><ROW><id>12150936</id><snippet>filterByExtension</snippet></ROW><ROW><id>12150936</id><snippet>return matching</snippet></ROW><ROW><id>12150936</id><snippet>None</snippet></ROW><ROW><id>12150936</id><snippet>allfiles</snippet></ROW><ROW><id>12150936</id><snippet>continue</snippet></ROW><ROW><id>12151325</id><snippet>argparse.ArgumentDefaultsHelpFormatter</snippet></ROW><ROW><id>12151325</id><snippet>parser = argparse.ArgumentParser(
    # ... other options ...
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
</snippet></ROW><ROW><id>12151325</id><snippet>ArgumentDefaultsHelpFormatter</snippet></ROW><ROW><id>12151325</id><snippet>  --scan-time [SCAN_TIME]
                        Wait SCAN-TIME seconds between status checks.
                        (default: 5)
</snippet></ROW><ROW><id>12151336</id><snippet>cmd.Cmd</snippet></ROW><ROW><id>12151336</id><snippet>=</snippet></ROW><ROW><id>12151336</id><snippet>import cmd

def parse(arg):
    return tuple(k.partition('=') for k in arg.split())

class MyShell(cmd.Cmd):
    def do_foo(self, arg):
        for x, _, y in parse(arg):
            print(x, y)

    def complete_foo(self, text, line, begidx, endidx):
        # Cmd treats = as the end of params; we don't want that.
        if line.endswith('='):
            return ()

        opts = ['param1=', 'param2', 'param3=']
        return [opt for opt in opts if opt.startswith(text)]

MyShell().cmdloop()
</snippet></ROW><ROW><id>12151336</id><snippet>(Cmd) foo param&lt;TAB&gt;
param1=  param2   param3=  
(Cmd) foo param1=a param
param1=  param2   param3=  
(Cmd) foo param1=a param2 param3=ah
param1 a
param2 
param3 ah
</snippet></ROW><ROW><id>12151336</id><snippet>=</snippet></ROW><ROW><id>12151484</id><snippet>matching</snippet></ROW><ROW><id>12151484</id><snippet>if not os.path.isfile(path):
  print "Warning: File type not expected"
  continue
  if os.path.isfile(path):
    matching.append(name)
</snippet></ROW><ROW><id>12151484</id><snippet>if</snippet></ROW><ROW><id>12151484</id><snippet>if</snippet></ROW><ROW><id>12151484</id><snippet>if not os.path.isfile(path):
  print "Warning: File type not expected"
  continue
if os.path.isfile(path):
  matching.append(name)
</snippet></ROW><ROW><id>12151484</id><snippet>if not os.path.isfile(path):
  print "Warning: File type not expected"
else:
  matching.append(name)
</snippet></ROW><ROW><id>12151503</id><snippet>datetime.date</snippet></ROW><ROW><id>12151503</id><snippet>.strftime()</snippet></ROW><ROW><id>12151503</id><snippet>today = date.today().strftime('%Y-%m-%d')
print today in dates # Will print "True" or "False"
</snippet></ROW><ROW><id>12151503</id><snippet>&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; date.today()
datetime.date(2012, 8, 28)
&gt;&gt;&gt; date.today() == '2012-08-28'
False
&gt;&gt;&gt; date.today().strftime('%Y-%m-%d') == '2012-08-28'
True
</snippet></ROW><ROW><id>12151503</id><snippet>.isoformat()</snippet></ROW><ROW><id>12151503</id><snippet>&gt;&gt;&gt; date.today().isoformat()
'2012-08-28'
</snippet></ROW><ROW><id>12151687</id><snippet>def foo(arg):
    if arg:
       return 1,2
    else
       return "foo","bar","baz"
</snippet></ROW><ROW><id>12151687</id><snippet>foo(1) # (1,2)
foo(0) # ("foo","bar","baz")
</snippet></ROW><ROW><id>12151900</id><snippet>defaultdict</snippet></ROW><ROW><id>12151900</id><snippet>from collections import defaultdict

# count all the emails before we write anything out
emails = defaultdict(int)
for row in f:
    emails[row[0]] += 1

# now write the file
for row in email.items():
    writer.writerow(row)
</snippet></ROW><ROW><id>12152152</id><snippet>var</snippet></ROW><ROW><id>12152152</id><snippet>Test</snippet></ROW><ROW><id>12152152</id><snippet>test</snippet></ROW><ROW><id>12152152</id><snippet>Test.var</snippet></ROW><ROW><id>12152152</id><snippet>test.var</snippet></ROW><ROW><id>12152152</id><snippet>var</snippet></ROW><ROW><id>12152152</id><snippet>sum()</snippet></ROW><ROW><id>12152152</id><snippet>Test</snippet></ROW><ROW><id>12152152</id><snippet>print</snippet></ROW><ROW><id>12152152</id><snippet>var += 1</snippet></ROW><ROW><id>12152152</id><snippet>def sum():
    Test.var += 1
    print Test.var
    test.var += 1
    print test.var
    print var

sum()
</snippet></ROW><ROW><id>12152152</id><snippet>1
2
0
</snippet></ROW><ROW><id>12152152</id><snippet>&gt;&gt;&gt; def sum():
...     Test.var += 1
...     print Test.var
...     test.var += 1
...     print test.var
...     print var
...     var += 1
...     print var
... 
&gt;&gt;&gt; sum()
1
2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 6, in sum
UnboundLocalError: local variable 'var' referenced before assignment
</snippet></ROW><ROW><id>12152152</id><snippet>var</snippet></ROW><ROW><id>12152152</id><snippet>variable scope</snippet></ROW><ROW><id>12152152</id><snippet>print var</snippet></ROW><ROW><id>12152152</id><snippet>var</snippet></ROW><ROW><id>12152152</id><snippet>var = 50</snippet></ROW><ROW><id>12152152</id><snippet>var += 1</snippet></ROW><ROW><id>12152152</id><snippet>def sum():
    Test.var += 1
    print Test.var
    test.var += 1
    print test.var
    global var #added the global keyword
    print var
    var += 1
    print var
</snippet></ROW><ROW><id>12152152</id><snippet>1
2
0    # notice that global var is still 0 because the above var+=1 are for Test.var
1
</snippet></ROW><ROW><id>12152187</id><snippet>button = button.get_rect()
</snippet></ROW><ROW><id>12152187</id><snippet>screen.blit(button,(300,200))
</snippet></ROW><ROW><id>12152187</id><snippet>b = screen.blit(button,(300,200))
</snippet></ROW><ROW><id>12152187</id><snippet>Rect</snippet></ROW><ROW><id>12152187</id><snippet>if event.type == pygame.mouse.get_pressed()
</snippet></ROW><ROW><id>12152187</id><snippet>if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
</snippet></ROW><ROW><id>12152187</id><snippet>pygame.mouse.get_pressed()</snippet></ROW><ROW><id>12152187</id><snippet>event.button == 1</snippet></ROW><ROW><id>12152187</id><snippet>`if button.colliderpoint(pos):` 
</snippet></ROW><ROW><id>12152187</id><snippet>`if b.colliderpoint(pos):`
</snippet></ROW><ROW><id>12152187</id><snippet>Rect</snippet></ROW><ROW><id>12152278</id><snippet>$DISPLAY</snippet></ROW><ROW><id>12152278</id><snippet>$DISPLAY</snippet></ROW><ROW><id>12152278</id><snippet>% echo $DISPLAY
/tmp/launch-k9XueA/org.macosforge.xquartz:0
</snippet></ROW><ROW><id>12152533</id><snippet>import csv
writer = csv.writer(open(filename))
</snippet></ROW><ROW><id>12152533</id><snippet>writer.writerow</snippet></ROW><ROW><id>12152533</id><snippet>writer.writerows</snippet></ROW><ROW><id>12152533</id><snippet>csv.DictWriter</snippet></ROW><ROW><id>12152548</id><snippet>&gt;&gt;&gt; s = 'aabcc'
&gt;&gt;&gt; for x,y in (('ab','b'), ('aa','a')):
...     s = s.replace(x,y)
... 
&gt;&gt;&gt; s
'abcc'
</snippet></ROW><ROW><id>12152548</id><snippet>&gt;&gt;&gt; s = 'aabcc'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub("a([ab])","\\1", s)
'abcc'
</snippet></ROW><ROW><id>12152686</id><snippet>&gt;&gt;&gt; int_to_words(10)
'ten'
&gt;&gt;&gt; int_to_words(100)
'hundred'
&gt;&gt;&gt; int_to_words(1000)
'thousand'
</snippet></ROW><ROW><id>12152686</id><snippet>len("one")*2 == 6</snippet></ROW><ROW><id>12152722</id><snippet>&gt;&gt;&gt; sws= ['switch1','switch2','switch3']
&gt;&gt;&gt; ips = ['10.15.15.1','10.15.15.2','10.15.15.3','10.15.15.4']
&gt;&gt;&gt; print zip(sws,ips)
[('switch1', '10.15.15.1'), ('switch2', '10.15.15.2'),('switch3', '10.15.15.3')]
</snippet></ROW><ROW><id>12152759</id><snippet>pandas</snippet></ROW><ROW><id>12152759</id><snippet>replace</snippet></ROW><ROW><id>12152759</id><snippet>In [25]: df = DataFrame({1: [2,3,4], 2: [3,4,5]})

In [26]: df
Out[26]: 
   1  2
0  2  3
1  3  4
2  4  5

In [27]: df[2]
Out[27]: 
0    3
1    4
2    5
Name: 2

In [28]: df[2].replace(4, 17)
Out[28]: 
0     3
1    17
2     5
Name: 2

In [29]: df[2].replace(4, 17, inplace=True)
Out[29]: 
0     3
1    17
2     5
Name: 2

In [30]: df
Out[30]: 
   1   2
0  2   3
1  3  17
2  4   5
</snippet></ROW><ROW><id>12152759</id><snippet>numpy</snippet></ROW><ROW><id>12152759</id><snippet>In [47]: df[1]
Out[47]: 
0    2
1    3
2    4
Name: 1

In [48]: df[1] == 4
Out[48]: 
0    False
1    False
2     True
Name: 1

In [49]: df[1][df[1] == 4]
Out[49]: 
2    4
Name: 1

In [50]: df[1][df[1] == 4] = 19

In [51]: df
Out[51]: 
    1   2
0   2   3
1   3  17
2  19   5
</snippet></ROW><ROW><id>12152940</id><snippet>return "filename: " + fn.func_code.co_filename
</snippet></ROW><ROW><id>12153007</id><snippet>_console_out = ConsoleHandler()
</snippet></ROW><ROW><id>12153007</id><snippet>ConsoleHandler</snippet></ROW><ROW><id>12153346</id><snippet>import string

class Piece(object):
    def __init__(self, type, colour):
        self.type = type
        self.colour = colour
    def __str__(self):
        return 'Piece(%(type)s, %(colour)s)' % self.__dict__

class Board(dict):
    def __init__(self, width, height):
        self.update(
            dict(((x,y), None) 
                for x in string.ascii_lowercase[:width] # alphabetic axis 
                for y in xrange(1, height+1)            # numeric axis
            )
        )

    def setup(self, position_seq):
        for type, colour, position in position_seq:
            self[position] = Piece(type, colour)

initial_positions = [
    ('rook', 'W', ('a', 1)),
    ('knight', 'W', ('b', 1)),
    ('bishop', 'W', ('c', 1)),
    ('queen', 'W', ('d', 1)),
    ('king', 'W', ('e', 1)),
    ('pawn', 'W', ('a', 2)),
]

b = Board( 8,8 )
b.setup( initial_positions )
print b['a',1] # returns Piece(rook, W)
</snippet></ROW><ROW><id>12153346</id><snippet>setup</snippet></ROW><ROW><id>12153364</id><snippet>charset='utf-8', use_unicode=True</snippet></ROW><ROW><id>12153364</id><snippet>connect()</snippet></ROW><ROW><id>12153364</id><snippet>&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; conn = MySQLdb.connect(... , use_unicode=True, charset='utf8')
&gt;&gt;&gt; cur = conn.cursor()
&gt;&gt;&gt; cur.execute('CREATE TABLE testing(x VARCHAR(20))')
0L
&gt;&gt;&gt; cur.execute('INSERT INTO testing values(%s)', ('López J',))
1L
&gt;&gt;&gt; cur.execute('SELECT * FROM testing')
1L
&gt;&gt;&gt; print cur.fetchall()[0][0]
López J
</snippet></ROW><ROW><id>12153532</id><snippet>self</snippet></ROW><ROW><id>12153532</id><snippet>from PyQt4 import QtGui, QtCore

class MyWidget(QtGui.QWidget):

    def __init__(self, parent=None):
        super(MyWidget, self).__init__(parent)

        ...
        self.txt_list = QtGui.QTextEdit(self)
        self.txt_list.resize(580,400)
        self.txt_list.move(50, 50)
        self.txt_list.setReadOnly(1)
        self.txt_list.setFont(font_consolas)
        ...
        self.monitor = Monitor()
        self.monitor.updateText.connect(self._handleTextUpdate)
        self.monitor.update_list()

    def _handleTextUpdate(self, txt):
        self.txt_list.clear()
        self.txt_list.setText(txt)


class Monitor(QtCore.QObject):

    updateText = QtCore.pyqtSignal(str)

    def update_list(self):
        t_monitor = Thread(self.monitor_vector, parent=self)
        t_monitor.daemon = True
        t_monitor.setName('monitor')
        t_monitor.start()

    def monitor_vector(self):
        ...
        self.updateText.emit('updated list')


class Thread(QtCore.QThread):

    def __init__(self, fn, args, kwargs, parent=None):
        super(Thread, self).__init__(parent)
        self._fn = fn 
        self._args = args 
        self._kwargs = kwargs 

    def run(self):
        self._fn(*self._args, **self._kwargs)
</snippet></ROW><ROW><id>12153532</id><snippet>MyWidget</snippet></ROW><ROW><id>12153780</id><snippet>parse</snippet></ROW><ROW><id>12153780</id><snippet>Request</snippet></ROW><ROW><id>12153780</id><snippet>for site in sites:
    ...
    items.append(item)
    items.append(Request(item['link']), callback=self.parse)
</snippet></ROW><ROW><id>12153780</id><snippet>BookItem</snippet></ROW><ROW><id>12153780</id><snippet>self.parsebook</snippet></ROW><ROW><id>12153786</id><snippet>shlex.split()</snippet></ROW><ROW><id>12153786</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; shlex.split("3 45 5.5 a bc")
['3', '45', '5.5', 'a', 'bc']
&gt;&gt;&gt; shlex.split("3 45 5.5 \"This is a sentence.\" bc")
['3', '45', '5.5', 'This is a sentence.', 'bc']
&gt;&gt;&gt; shlex.split("3 45 5.5 \"\\\"Yes\\\\No?\\\" it said.\" bc")
['3', '45', '5.5', '"Yes\\No?" it said.', 'bc']
</snippet></ROW><ROW><id>12153786</id><snippet>shlex.shlex</snippet></ROW><ROW><id>12153786</id><snippet>.whitespace</snippet></ROW><ROW><id>12153786</id><snippet>', \t\r\n'</snippet></ROW><ROW><id>12153786</id><snippet>shlex</snippet></ROW><ROW><id>12153945</id><snippet>_single_leading_underscore</snippet></ROW><ROW><id>12153945</id><snippet>from M import *</snippet></ROW><ROW><id>12154309</id><snippet>@validate(0, int)
@validate(1, str, logMessage='second argument must respond to str()')
@validate(2, customValidationFunction)
def some_func(int_arg, str_arg, other_arg):
    # the control gets here only after args are validated correctly
    return int_arg * str_arg
</snippet></ROW><ROW><id>12154309</id><snippet>def validate(narg, conv, logMessage = None):
    def decorate(func):
        def funcDecorated(*args):
            newArgs = list(args)
            try:
                newArgs[narg] = conv(newArgs[narg])
            except Exception, e:
                # wrong argument! do some logging here and re-raise
                raise Exception("Invalid argument #{}: {}".format(narg, e))
            else:
                return func(*newArgs)

        return funcDecorated
    return decorate
</snippet></ROW><ROW><id>12154309</id><snippet>validate(narg, converter)</snippet></ROW><ROW><id>12154309</id><snippet>decorate</snippet></ROW><ROW><id>12154309</id><snippet>decorate</snippet></ROW><ROW><id>12154309</id><snippet>func</snippet></ROW><ROW><id>12154309</id><snippet>funcDecorated</snippet></ROW><ROW><id>12154309</id><snippet>func</snippet></ROW><ROW><id>12154309</id><snippet>*args</snippet></ROW><ROW><id>12154309</id><snippet>func</snippet></ROW><ROW><id>12154309</id><snippet>narg</snippet></ROW><ROW><id>12154309</id><snippet>conv</snippet></ROW><ROW><id>12154309</id><snippet>conv</snippet></ROW><ROW><id>12154309</id><snippet>func</snippet></ROW><ROW><id>12154309</id><snippet>validate</snippet></ROW><ROW><id>12154309</id><snippet>conv</snippet></ROW><ROW><id>12155457</id><snippet>&gt;&gt;&gt; root = tree.getroot()
&gt;&gt;&gt; root.attrib
{'{http://www.w3.org/2001/XMLSchema-instance}schemaLocation': 'http://xmlns.oracle.com/weblogic/security/xacml'}
&gt;&gt;&gt; root.nsmap
{None: 'http://xmlns.oracle.com/weblogic/domain', 'wls': 'http://xmlns.oracle.com/weblogic/security/wls', 'sec': 'http://xmlns.oracle.com/weblogic/security', 'xsi': 'http://www.w3.org/2001/XMLSchema-instance'}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12155457</id><snippet>&lt;domain xmlns="http://xmlns.oracle.com/weblogic/domain"
    xmlns:sec="http://xmlns.oracle.com/weblogic/security"
    xmlns:wls="http://xmlns.oracle.com/weblogic/security/wls"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.oracle.com/weblogic/security/xacml"&gt;
</snippet></ROW><ROW><id>12155457</id><snippet>attrib</snippet></ROW><ROW><id>12155457</id><snippet>nsmap</snippet></ROW><ROW><id>12155582</id><snippet>foo</snippet></ROW><ROW><id>12155582</id><snippet>void foo() {
  while(1); // never returns
}
</snippet></ROW><ROW><id>12155582</id><snippet>siglongjmp</snippet></ROW><ROW><id>12155582</id><snippet>foo</snippet></ROW><ROW><id>12155582</id><snippet>%exception</snippet></ROW><ROW><id>12155582</id><snippet>%module test

%{
#include &lt;setjmp.h&gt;
#include &lt;signal.h&gt;

static sigjmp_buf timeout;

static void backout(int sig) {
  siglongjmp(timeout, sig);
}

#include "test.h"
%}

%include &lt;exception.i&gt;

%exception {
  if (!sigsetjmp(timeout, 1)) {
    signal(SIGALRM,backout); // Check return?
    $action
  }
  else {
    // raise a Python exception
    SWIG_exception(SWIG_RuntimeError, "Timeout in $decl");
  }
}

void foo();

%exception;
</snippet></ROW><ROW><id>12155582</id><snippet>import signal
import test

signal.alarm(5)
test.foo()
</snippet></ROW><ROW><id>12155582</id><snippet>SIGALRM</snippet></ROW><ROW><id>12156033</id><snippet>quit()</snippet></ROW><ROW><id>12156033</id><snippet>cherrypy.engine.exit</snippet></ROW><ROW><id>12156033</id><snippet>&gt;&gt;&gt; help(cherrypy.engine.exit)
exit(self) method of cherrypy.process.win32.Win32Bus instance
    Stop all services and prepare to exit the process.
</snippet></ROW><ROW><id>12156479</id><snippet>class BaseHandler(webapp.RequestHandler):
    def handle_exception(self, exception, debug_mode):
      self.response.headers['Content-Type'] = 'application/json'
      self.response.out.write(etc, etc) # format the exception
</snippet></ROW><ROW><id>12156523</id><snippet>plt.imshow</snippet></ROW><ROW><id>12156523</id><snippet>extent</snippet></ROW><ROW><id>12156523</id><snippet>np.tile</snippet></ROW><ROW><id>12156523</id><snippet>a = np.arange(9).reshape(3,3)
b = np.arange(36).reshape(6,6)

plt.imshow(a, extent=[0,1,0,1], interpolation='none')
plt.imshow(b, extent=(1,2,0,1), interpolation='none')
# note scaling is "broke"
plt.xlim(0,2)
</snippet></ROW><ROW><id>12156523</id><snippet>vim=...</snippet></ROW><ROW><id>12156523</id><snippet>vmax</snippet></ROW><ROW><id>12156650</id><snippet>&gt;&gt;&gt; a=User.objects.all()[0]

&gt;&gt;&gt; a.userprofile_set.all()
[&lt;UserProfile: UserProfile object&gt;]

&gt;&gt; a.userprofile_set.create(language='bar')
IntegrityError: column user_id is not unique
</snippet></ROW><ROW><id>12156650</id><snippet>pk=null</snippet></ROW><ROW><id>12156650</id><snippet>"user": ["user8002"]</snippet></ROW><ROW><id>12156650</id><snippet>"user": 8002</snippet></ROW><ROW><id>12156650</id><snippet>[
    {
        "pk": 1,
        "model": "auth.user",
        "fields": {
            "username": "jpic",
            "first_name": "",
            "last_name": "",
            "is_active": true,
            "is_superuser": true,
            "is_staff": true,
            "last_login": "2012-06-11T06:44:57.637Z",
            "groups": [],
            "user_permissions": [],
            "password": "pbkdf2_sha256$10000$KzsUTACvZgJU$qvywXdVv/N3s5lifS/gQxSGog36ExGbuj2U+IQ6aUNk=",
            "email": "t@tt.tt",
            "date_joined": "2012-06-11T06:44:57.637Z"
        }
    },
    {
        "pk": 1,
        "model": "test_app.userprofile",
        "fields": {
            "language": "example.com",
            "user": 1
        }
    }
]
</snippet></ROW><ROW><id>12156650</id><snippet>from annoying.fields import AutoOneToOneField


class UserProfile(models.Model):
    user = AutoOneToOneField('auth.User', primary_key=True)
    home_page = models.URLField(max_length=255, blank=True)
</snippet></ROW><ROW><id>12156665</id><snippet>from itertools import product, combinations

otheroptions = ['A','B',   'D','E','F','G','H','I','J']
c = "C"
l = 10
nc = 3

for t in product(otheroptions, repeat=l-nc):
    for p in combinations(range(l), nc):
        r = list(t)
        for i in p:
            r[i:i] = [c]
        print "".join(r)
</snippet></ROW><ROW><id>12156927</id><snippet>profile.setPreference("browser.download.dir", "c:/yourDownloadDir");
profile.setPreference("browser.download.folderList", 2);
profile.setPreference("browser.helperApps.neverAsk.saveToDisk", "application/csv, text/csv");
</snippet></ROW><ROW><id>12157022</id><snippet>@task(...)
def my_task(

my_task.apply(1)
</snippet></ROW><ROW><id>12157158</id><snippet>import os
root = './'
files = [(path,f) for path,_,file_list in os.walk(root) for f in file_list]
out_file = open('master.txt','w')
for path,f_name in files:
    in_file = open('%s/%s'%(path,f_name), 'r')

    # write out root/path/to/file (space) file_contents
    for line in in_file:
        out_file.write('%s/%s %s'%(path,f_name,line))
    in_file.close()

    # enter new line after each file
    out_file.write('\n')

out_file.close()
</snippet></ROW><ROW><id>12157158</id><snippet>root</snippet></ROW><ROW><id>12157158</id><snippet># only take .txt files from the directory tree
files = [(path,f) for path,_,file_list in os.walk(root) for f in file_list if f.endswith('.txt')]
</snippet></ROW><ROW><id>12157332</id><snippet>from django.shortcuts import render

def login(request):
    return render(request, 'registration/login.html')
</snippet></ROW><ROW><id>12157332</id><snippet>localhost:8000/registration/</snippet></ROW><ROW><id>12157456</id><snippet>else:
    return
</snippet></ROW><ROW><id>12157456</id><snippet>def get_node(x, y, z, side):
    return [(x+side,y,z), (x,y+side,z), (x,y,z+side),
            (x-side,y,z), (x,y-side,z), (x,y,z-side)]

seen_nodes = set()

def goto_next_nodes(x, y, z, cube_side, next_nodes, boundary_x, boundary_y, boundary_z):
    for node in next_nodes:
        if node not in seen_nodes:
            seen_nodes.add(node)
            if 0&lt;=node[0]&lt;=boundary_x and 0&lt;=node[1]&lt;=boundary_y and 0&lt;=node[2]&lt;=boundary_z:
                 print node
                 x,y,z=node[0],node[1],node[2]
                 next_nodes=get_node(x,y,z,cube_side)
                 goto_next_nodes(x,y,z,cube_side,next_nodes,boundary_x,boundary_y,boundary_z)
    return

def display_fcc(cube_side,boundary_x,boundary_y,boundary_z):
     x=y=z=0
     next_nodes=get_node(x,y,z,cube_side)
     goto_next_nodes(x,y,z,cube_side,next_nodes,boundary_x,boundary_y,boundary_z)

display_fcc(5,10,10,10)
</snippet></ROW><ROW><id>12157818</id><snippet>+-----------------------------------------+-----------------------------------------+-----------------------------------------+
| .. figure:: http://placehold.it/150x150 | .. figure:: http://placehold.it/150x150 | .. figure:: http://placehold.it/150x150 |
|   :alt: map to buried treasure          |   :alt: map to buried treasure          |   :alt: map to buried treasure          |
|                                         |                                         |                                         |
|   This is the caption of the figure (a  |   This is the caption of the figure (a  |   This is the caption of the figure (a  |
|   simple paragraph).                    |   simple paragraph).                    |   simple paragraph).                    |
+-----------------------------------------+-----------------------------------------+-----------------------------------------+
</snippet></ROW><ROW><id>12157914</id><snippet>In [57]: data = """\
A    B     C     
 0    foo       
3    bar     2.0
  1        3.0
"""

In [58]: df = pandas.read_fwf(StringIO(data), widths=[5, 5, 5])

In [59]: df
Out[59]: 
   A    B   C
0  0  foo NaN
1  3  bar   2
2  1  NaN   3

In [60]: df.dtypes
Out[60]: 
A      int64
B     object
C    float64
</snippet></ROW><ROW><id>12158074</id><snippet>?</snippet></ROW><ROW><id>12158074</id><snippet>H:M[:S.[USEC]]</snippet></ROW><ROW><id>12158074</id><snippet>(?P&lt;hours&gt;\d+):(?P&lt;minutes&gt;\d+)(?::(?P&lt;seconds&gt;\d+)(\.(?P&lt;microseconds&gt;\d+))?)?
</snippet></ROW><ROW><id>12158074</id><snippet>string.split(':')</snippet></ROW><ROW><id>12158074</id><snippet>(S)|(M:S)|(H:M:S)</snippet></ROW><ROW><id>12158074</id><snippet>(\d+)(:\d+)?(:\d+)?</snippet></ROW><ROW><id>12158233</id><snippet>logging/__init__.py</snippet></ROW><ROW><id>12158233</id><snippet>basicConfig()</snippet></ROW><ROW><id>12158233</id><snippet>addHandler()</snippet></ROW><ROW><id>12158233</id><snippet>basicConfig()</snippet></ROW><ROW><id>12158233</id><snippet># Example to remove all root logger handlers and reconfigure. (UNTESTED)
import logging

# Remove all handlers associated with the root logger object.
for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)

# Reconfigure logging again, this time with a file.
logging.basicConfig(filename = 'myfile.log', level=logging.DEBUG, format='%(filename)s:%(lineno)s %(levelname)s:%(message)s')
</snippet></ROW><ROW><id>12158930</id><snippet>main.py</snippet></ROW><ROW><id>12158930</id><snippet>MyThread.py</snippet></ROW><ROW><id>12158930</id><snippet>main.py</snippet></ROW><ROW><id>12158930</id><snippet>if __name__ == "__main__":
    MyThreadClass().run()
</snippet></ROW><ROW><id>12158930</id><snippet>var1</snippet></ROW><ROW><id>12158930</id><snippet>MyThreadClass</snippet></ROW><ROW><id>12158930</id><snippet>from threading import Thread
import time

class MyThreadClass(Thread):

    def __init__(self, var1):
        Thread.__init__(self)
        self.var1 = var1

    def run(self):
        print "starting " + self.getName() + "\n"
        while True:
            print self.getName() + " is running\n"
            print "value: " + self.var1 + "\n"
            time.sleep(1)
</snippet></ROW><ROW><id>12158930</id><snippet>from MyThread import MyThreadClass

if __name__ == "__main__":
    MyThreadClass("Test").run()
</snippet></ROW><ROW><id>12158970</id><snippet>from flask import Flask
app = Flask(__name__)

@app.route("/")
def root():
    return "Hello World!"

@app.route("/xyz")
def xyz():
    return "Hello XYZ!"

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>12158970</id><snippet>from cherrypy import wsgiserver
from app import app

d = wsgiserver.WSGIPathInfoDispatcher({'/': app})
server = wsgiserver.CherryPyWSGIServer(('0.0.0.0', 9999), d)

if __name__ == '__main__':
    try:
        server.start()
    except KeyboardInterrupt:
        server.stop()
</snippet></ROW><ROW><id>12158970</id><snippet>http://localhost:9999</snippet></ROW><ROW><id>12158970</id><snippet>Hello World!</snippet></ROW><ROW><id>12158970</id><snippet>http://localhost:9999/xyz</snippet></ROW><ROW><id>12158970</id><snippet>Hello XYZ!</snippet></ROW><ROW><id>12159211</id><snippet>/static_url/admin/css/base.css</snippet></ROW><ROW><id>12159211</id><snippet>&gt;&gt;&gt; ./manage.py findstatic admin/css/base.css
Found 'admin/css/base.css' here:
  /home/jpic/env/lib/python2.7/site-packages/django/contrib/admin/static/admin/css/base.css
</snippet></ROW><ROW><id>12159211</id><snippet>/srv/project/static_dir/</snippet></ROW><ROW><id>12159211</id><snippet>settings.STATICFILES_DIRS</snippet></ROW><ROW><id>12159211</id><snippet>mkdir -p /srv/project/static_dir/admin/css/
cp /home/jpic/env/lib/python2.7/site-packages/django/contrib/admin/static/admin/css/base.css /srv/project/static_dir/admin/css
</snippet></ROW><ROW><id>12159211</id><snippet>/srv/project/static_dir/admin/css/base.css</snippet></ROW><ROW><id>12159211</id><snippet>collectstatic</snippet></ROW><ROW><id>12159211</id><snippet>/srv/project/static_dir/</snippet></ROW><ROW><id>12159211</id><snippet>django/contrib/admin/static</snippet></ROW><ROW><id>12159211</id><snippet>settings.STATICFILES_FINDERS</snippet></ROW><ROW><id>12159211</id><snippet>collectstatic</snippet></ROW><ROW><id>12159211</id><snippet>/srv/project/static_url/admin/css/base.css</snippet></ROW><ROW><id>12159211</id><snippet>/srv/project/static_dir/admin/css/base.css</snippet></ROW><ROW><id>12159211</id><snippet>django/contrib/admin/static/admin/css/base.css</snippet></ROW><ROW><id>12159211</id><snippet>/static_url/</snippet></ROW><ROW><id>12159211</id><snippet>STATIC_URL</snippet></ROW><ROW><id>12159211</id><snippet>/srv/project/static_root/</snippet></ROW><ROW><id>12159211</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>12159211</id><snippet>/srv/project/static_dir/</snippet></ROW><ROW><id>12159211</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>12159969</id><snippet>unittest.main()
</snippet></ROW><ROW><id>12160464</id><snippet>a.text</snippet></ROW><ROW><id>12160464</id><snippet>None</snippet></ROW><ROW><id>12160464</id><snippet>a</snippet></ROW><ROW><id>12160522</id><snippet>print ("The area of your shape is: ", (a*b))
#                                   ^
</snippet></ROW><ROW><id>12160586</id><snippet>_ignore_patterns</snippet></ROW><ROW><id>12160734</id><snippet>Queue.Queue</snippet></ROW><ROW><id>12160942</id><snippet>import subprocess
subprocess.call(["schtasks.exe"])
</snippet></ROW><ROW><id>12160942</id><snippet>subprocess.call(["ls", "-l"])
</snippet></ROW><ROW><id>12160942</id><snippet>cmd.exe</snippet></ROW><ROW><id>12161078</id><snippet>iterparse</snippet></ROW><ROW><id>12161078</id><snippet>fast_iter</snippet></ROW><ROW><id>12161078</id><snippet>def fast_iter(context, func, *args, **kwargs):
    # http://www.ibm.com/developerworks/xml/library/x-hiperfparse/
    # Author: Liza Daly
    for event, elem in context:
        func(elem, *args, **kwargs)
        elem.clear()
        while elem.getprevious() is not None:
            del elem.getparent()[0]
    del context
</snippet></ROW><ROW><id>12161078</id><snippet>def process_element(elem):
    print "why does this consume all my memory?"
context = lxml.etree.iterparse('really-big-file.xml', tag='schedule', events = ('end', ))
fast_iter(context, process_element)
</snippet></ROW><ROW><id>12161078</id><snippet>fast_iter</snippet></ROW><ROW><id>12161173</id><snippet>import os.path
with open('titles.txt') as f:
    for line in f:
        newfile = os.path.join('C:\\titles',line.strip()) + '.txt'
        ff = open( newfile, 'a')
        ff.close()
</snippet></ROW><ROW><id>12161173</id><snippet>'w'</snippet></ROW><ROW><id>12161173</id><snippet>'a'</snippet></ROW><ROW><id>12161199</id><snippet>True/False</snippet></ROW><ROW><id>12161199</id><snippet>from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

# Some sample data
x_side = np.arange(-5, 5, 0.04)
y_side = np.arange(-5, 5, 0.04)
X, Y = np.meshgrid(x_side,y_side)

# Fake mountains
Z = np.exp(-(X**2+Y**2)) + 2*np.exp(-((X-2)**2+Y**2)) 

# Assign colors based off some user-defined condition
COLORS = np.empty(X.shape, dtype=str)
COLORS[:,:] = 'b'
COLORS[(Z&gt;.1) * (Z&lt;.3)] = 'r'
COLORS[Z&gt;.3] = 'g'
COLORS[X+Y &lt; -1] = 'k'

# 3D surface plot
fig = plt.figure()
ax = fig.gca(projection='3d')
surf = ax.plot_surface(X, Y, Z, facecolors=COLORS, rstride=1, cstride=1,
        linewidth=0)
plt.show()
</snippet></ROW><ROW><id>12161305</id><snippet>parse_args</snippet></ROW><ROW><id>12161305</id><snippet>args = parser.parse_args('-a -b -c --value=True'.split())
</snippet></ROW><ROW><id>12161305</id><snippet>str.split</snippet></ROW><ROW><id>12161305</id><snippet>'a b c'.split() == ['a', 'b', 'c']</snippet></ROW><ROW><id>12161305</id><snippet>parser.add_argument('-a', '--a-long-name', type=int, ...)
</snippet></ROW><ROW><id>12161305</id><snippet>-</snippet></ROW><ROW><id>12161305</id><snippet>--</snippet></ROW><ROW><id>12161305</id><snippet>args = parser.parse_args(['1','foo'])
print args.DocID # 1
print args.echo  # foo
</snippet></ROW><ROW><id>12161305</id><snippet>python youscript.py 1 foo</snippet></ROW><ROW><id>12161305</id><snippet>parse_args</snippet></ROW><ROW><id>12161409</id><snippet>django/contrib/staticfiles/finders.py</snippet></ROW><ROW><id>12161409</id><snippet>ImproperlyConfigured</snippet></ROW><ROW><id>12161409</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>12161409</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>12161409</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>12161409</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>12161409</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>12161409</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>12161433</id><snippet>words</snippet></ROW><ROW><id>12161484</id><snippet>print "Hello", 1
</snippet></ROW><ROW><id>12161484</id><snippet>__add__()</snippet></ROW><ROW><id>12161484</id><snippet>class MagicStr(str):
    def __add__(self, other):
        return MagicStr(str(self) + str(other))
    def __radd__(self, other):
        return MagicStr(str(other) + str(self))
    __iadd__ = __add__
</snippet></ROW><ROW><id>12161484</id><snippet> MagicStr("Hello") + 1
</snippet></ROW><ROW><id>12161484</id><snippet> "Hello" + str(1)
</snippet></ROW><ROW><id>12161583</id><snippet>num_str = 0
...
while num_str &lt; len(url): 
</snippet></ROW><ROW><id>12161583</id><snippet>while True:</snippet></ROW><ROW><id>12161583</id><snippet>len(url)</snippet></ROW><ROW><id>12162058</id><snippet>self.attribute = ...</snippet></ROW><ROW><id>12162058</id><snippet>class Foo(object):
    attr = []  #class level attribute is Mutable
    def __init__(self):
        # in the next line, self.attr references the class level attribute since
        # there is no instance level attribute (yet)
        self.attr.append('Hello')
        self.attr = []
        # Now, we've created an instance level attribute, so further appends will
        # append to the instance level attribute, not the class level attribute.
        self.attr.append('World')

a = Foo()
print (a.attr)  #['World']
print (Foo.attr) #['Hello']
b = Foo()
print (b.attr)  #['World']
print (Foo.attr) #['Hello', 'Hello']
</snippet></ROW><ROW><id>12162058</id><snippet>__init__</snippet></ROW><ROW><id>12162058</id><snippet>self.attr = ...</snippet></ROW><ROW><id>12162058</id><snippet>__init__</snippet></ROW><ROW><id>12162058</id><snippet>class Foo(object):
   def __init__(self):
       self.attr = 0
</snippet></ROW><ROW><id>12162081</id><snippet>myproject.myapp.something</snippet></ROW><ROW><id>12162081</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>12162081</id><snippet>myproject/static</snippet></ROW><ROW><id>12162081</id><snippet>static</snippet></ROW><ROW><id>12162081</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>12162081</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>12162081</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>12162081</id><snippet>collectstatic</snippet></ROW><ROW><id>12162426</id><snippet>plt.show()</snippet></ROW><ROW><id>12162426</id><snippet>plt.draw()</snippet></ROW><ROW><id>12162426</id><snippet>plt.show</snippet></ROW><ROW><id>12162426</id><snippet>QCoreApplication::exec: The event loop is already running</snippet></ROW><ROW><id>12162553</id><snippet>del sys.modules["mymodule"]
del mymodule
</snippet></ROW><ROW><id>12162635</id><snippet>include</snippet></ROW><ROW><id>12162635</id><snippet>g.user</snippet></ROW><ROW><id>12162635</id><snippet>g</snippet></ROW><ROW><id>12162635</id><snippet>&lt;-- login.html --&gt;
{% if g.user.is_anonymous() %}
Login form goes here
{% else %}
Greetings {{g.user.full_name}}!
{% endif %}
</snippet></ROW><ROW><id>12162635</id><snippet>{% include "login.html" %}</snippet></ROW><ROW><id>12162635</id><snippet>user</snippet></ROW><ROW><id>12162635</id><snippet>context_processor</snippet></ROW><ROW><id>12162635</id><snippet>user</snippet></ROW><ROW><id>12162635</id><snippet>@app.context_processor
def add_user():
    # Get user
    return {"user": user}
</snippet></ROW><ROW><id>12162726</id><snippet>url_for</snippet></ROW><ROW><id>12162726</id><snippet>_external</snippet></ROW><ROW><id>12162726</id><snippet>SERVER_NAME</snippet></ROW><ROW><id>12162754</id><snippet>a = ("Hello SO!")
a = "Hello SO!"
</snippet></ROW><ROW><id>12162754</id><snippet>statement_keyword("foo")
statement_keyword "foo"
</snippet></ROW><ROW><id>12162754</id><snippet>print("Hello","SO!")
</snippet></ROW><ROW><id>12162754</id><snippet>(...,...)</snippet></ROW><ROW><id>12162754</id><snippet>print</snippet></ROW><ROW><id>12162754</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>12162856</id><snippet>0</snippet></ROW><ROW><id>12162856</id><snippet>1</snippet></ROW><ROW><id>12162856</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; r = random.SystemRandom()
&gt;&gt;&gt; bin(r.getrandbits(2000))[2:].zfill(2000)

&gt;&gt;&gt; bin(r.getrandbits(2000))[2:].zfill(2000)

&gt;&gt;&gt; bin(r.getrandbits(2000))[2:].zfill(2000)

</snippet></ROW><ROW><id>12162856</id><snippet>import random
import time

def run(n):
    r = random.SystemRandom()
    for i in xrange(n):
        if i%30000 == 0: print i
        bin(r.getrandbits(2000))[2:].zfill(2000)

s = time.time()
run(300000)
e = time.time()
print "Took %.2fs" % (e-s,)
</snippet></ROW><ROW><id>12162856</id><snippet>Took 12.32s</snippet></ROW><ROW><id>12162856</id><snippet>r.getrandbits(2000)</snippet></ROW><ROW><id>12162856</id><snippet>7.77s</snippet></ROW><ROW><id>12162856</id><snippet>long</snippet></ROW><ROW><id>12162856</id><snippet>os.urandom(250)</snippet></ROW><ROW><id>12162856</id><snippet>3.59s</snippet></ROW><ROW><id>12163058</id><snippet>File "&lt;ipython console&gt;", line 1, in &lt;module&gt;
</snippet></ROW><ROW><id>12163058</id><snippet>__main__</snippet></ROW><ROW><id>12163058</id><snippet>__main__.f</snippet></ROW><ROW><id>12163058</id><snippet>PicklingError: Can't pickle &lt;function f at 0x05A57830&gt;: it's not found as __main__.f
</snippet></ROW><ROW><id>12163058</id><snippet>multiprocessing</snippet></ROW><ROW><id>12163058</id><snippet>pickle</snippet></ROW><ROW><id>12163058</id><snippet>ipython</snippet></ROW><ROW><id>12163195</id><snippet>billed_ops</snippet></ROW><ROW><id>12163195</id><snippet>some_value</snippet></ROW><ROW><id>12163195</id><snippet>some_list</snippet></ROW><ROW><id>12163195</id><snippet>some_list</snippet></ROW><ROW><id>12163195</id><snippet>4 writes per modified indexed property value</snippet></ROW><ROW><id>12163195</id><snippet>some_value</snippet></ROW><ROW><id>12163195</id><snippet>some_value</snippet></ROW><ROW><id>12163450</id><snippet>urllib2</snippet></ROW><ROW><id>12163450</id><snippet>requests</snippet></ROW><ROW><id>12163450</id><snippet>mechanize</snippet></ROW><ROW><id>12163450</id><snippet>windmill</snippet></ROW><ROW><id>12163450</id><snippet>phantomjs</snippet></ROW><ROW><id>12163554</id><snippet>StratifiedKFold</snippet></ROW><ROW><id>12163554</id><snippet>k == 3</snippet></ROW><ROW><id>12163554</id><snippet>GridSearchCV</snippet></ROW><ROW><id>12163576</id><snippet>getattr()</snippet></ROW><ROW><id>12163576</id><snippet>__get__</snippet></ROW><ROW><id>12163576</id><snippet>object</snippet></ROW><ROW><id>12163576</id><snippet>object.__getattribute__(instance, name)
</snippet></ROW><ROW><id>12163576</id><snippet>instance.__dict__[name]
</snippet></ROW><ROW><id>12163802</id><snippet>In [10]: from bs4 import BeautifulSoup

In [11]: xml = "&lt;TestTag&gt;a string&lt;/TestTag&gt;"

In [12]: soup = BeautifulSoup(xml, "xml")

In [13]: print soup
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;TestTag&gt;a string&lt;/TestTag&gt;

In [14]:
</snippet></ROW><ROW><id>12164271</id><snippet>models.py</snippet></ROW><ROW><id>12164271</id><snippet>_p_changed</snippet></ROW><ROW><id>12164271</id><snippet>True</snippet></ROW><ROW><id>12164271</id><snippet>from newmodule1 import MyClass1, MyClass2
from newmodule2 import MyClass3
</snippet></ROW><ROW><id>12164271</id><snippet>sys.modules</snippet></ROW><ROW><id>12164271</id><snippet>import sys
import newmodule

sys.modules['full.path.to.old.module] = newmodule
</snippet></ROW><ROW><id>12164492</id><snippet>request.session['fav_color'] = 'blue'

fav_color = request.session['fav_color']
</snippet></ROW><ROW><id>12164636</id><snippet>WMIC PROCESS get Caption,Commandline,Processid,ExecutablePath
</snippet></ROW><ROW><id>12164793</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; mv = ctypes.c_int32(1732584193)
&gt;&gt;&gt; mv.value &lt;&lt;= 5
&gt;&gt;&gt; mv
c_int(-391880672)
&gt;&gt;&gt; bin(mv.value)
'-0b10111010110111001111111100000'
</snippet></ROW><ROW><id>12164836</id><snippet>any</snippet></ROW><ROW><id>12164904</id><snippet>random.zip</snippet></ROW><ROW><id>12164904</id><snippet>/dev/random</snippet></ROW><ROW><id>12164904</id><snippet>/dev/urandom</snippet></ROW><ROW><id>12164904</id><snippet>/dev/random</snippet></ROW><ROW><id>12164904</id><snippet>random.randint</snippet></ROW><ROW><id>12164904</id><snippet>import random
ba = bytearray([random.randint(0,255) for n in xrange(1000000)])
with open('randint.dat', 'w+') as f:
    f.write(ba)
</snippet></ROW><ROW><id>12164904</id><snippet>ent</snippet></ROW><ROW><id>12164904</id><snippet>Entropy = 7.999840 bits per byte.

Optimum compression would reduce the size
of this 1000000 byte file by 0 percent.

Chi square distribution for 1000000 samples is 221.87, and randomly
would exceed this value 93.40 percent of the times.

Arithmetic mean value of data bytes is 127.5136 (127.5 = random).
Monte Carlo value for Pi is 3.139644559 (error 0.06 percent).
Serial correlation coefficient is -0.000931 (totally uncorrelated = 0.0).
</snippet></ROW><ROW><id>12164904</id><snippet>ent</snippet></ROW><ROW><id>12164904</id><snippet>Entropy = 7.999982 bits per byte.

Optimum compression would reduce the size
of this 10485760 byte file by 0 percent.

Chi square distribution for 10485760 samples is 259.03, and randomly
would exceed this value 41.80 percent of the times.

Arithmetic mean value of data bytes is 127.5116 (127.5 = random).
Monte Carlo value for Pi is 3.139877754 (error 0.05 percent).
Serial correlation coefficient is -0.000296 (totally uncorrelated = 0.0).
</snippet></ROW><ROW><id>12165239</id><snippet>list1 = [8,16,24]
set(list1)        #set([8, 16, 24])
list2 = [24,16,8]
set(list2)        #set([24, 16, 8])
</snippet></ROW><ROW><id>12165239</id><snippet>hash(8)</snippet></ROW><ROW><id>12165239</id><snippet>hash(16)</snippet></ROW><ROW><id>12165239</id><snippet>hash(24)</snippet></ROW><ROW><id>12165239</id><snippet>1</snippet></ROW><ROW><id>12165239</id><snippet>2</snippet></ROW><ROW><id>12165239</id><snippet>3</snippet></ROW><ROW><id>12165239</id><snippet>list1 = [1,2,3]
set(list1)      # set([1, 2, 3])
list2 = [3,2,1]
set(list2)      # set([1, 2, 3])
</snippet></ROW><ROW><id>12165239</id><snippet>hash(1)</snippet></ROW><ROW><id>12165239</id><snippet>hash(2)</snippet></ROW><ROW><id>12165239</id><snippet>hash(3)</snippet></ROW><ROW><id>12165329</id><snippet>connectionMade</snippet></ROW><ROW><id>12165329</id><snippet>twisted.internet.interfaces.IProtocol</snippet></ROW><ROW><id>12165329</id><snippet>twisted.mail.smtp.IMessageDelivery</snippet></ROW><ROW><id>12165329</id><snippet>connectionMade</snippet></ROW><ROW><id>12165329</id><snippet>twisted.protocols.policies.LimitConnectionsByPeer</snippet></ROW><ROW><id>12165329</id><snippet>twisted.protocols.policies.LimitTotalConnectionsFactory</snippet></ROW><ROW><id>12165329</id><snippet>twisted.protocols.policies</snippet></ROW><ROW><id>12165329</id><snippet>LimitConnectionsByPeer</snippet></ROW><ROW><id>12165329</id><snippet>from twisted.protocols.policies import LimitConnectionsByPeer
...
factory = ConsoleSMTPFactory()
wrapper = LimitConnectionsByPeer(ConsoleSMTPFactory(...))
reactor.listenTCP(465, wrapper)
</snippet></ROW><ROW><id>12165329</id><snippet>LimitConnectionsByPeer</snippet></ROW><ROW><id>12165329</id><snippet>WrappingFactory</snippet></ROW><ROW><id>12165329</id><snippet>buildProtocol</snippet></ROW><ROW><id>12165329</id><snippet>from twisted.protocols.policies import WrappingFactory

class DenyFactory(WrappingFactory):
    def buildProtocol(self, clientAddress):
        if clientAddress.host == '1.3.3.7':
            # Reject it
            return None
         # Accept everything else
         return WrappingFactory.buildProtocol(self, clientAddress)
</snippet></ROW><ROW><id>12165329</id><snippet>from twisted.protocols.policies import LimitConnectionsByPeer
...
factory = ConsoleSMTPFactory()
wrapper = LimitConnectionsByPeer(DenyFactory(ConsoleSMTPFactory(...)))
reactor.listenTCP(465, wrapper)
</snippet></ROW><ROW><id>12165512</id><snippet>48.9013471471
48.6057858287
48.1145061659
47.4294863684
</snippet></ROW><ROW><id>12165512</id><snippet>for i in drange2(0, 2*math.pi + 0.0634665182543392 , 0.0634665182543392):
    for x in range(1,N+1):
       yEst = yEst + a * cos(x* i) 
       f.write( str(yEst) + "\n"  )
f.close()
</snippet></ROW><ROW><id>12165512</id><snippet>f.write</snippet></ROW><ROW><id>12165512</id><snippet>+ "\n"</snippet></ROW><ROW><id>12165512</id><snippet>f.write( str(yEst) + " " )</snippet></ROW><ROW><id>12165512</id><snippet>48.9013471471 48.6057858287 48.1145061659 47.4294863684
</snippet></ROW><ROW><id>12165512</id><snippet>f.write( str(yEst) + "|" )</snippet></ROW><ROW><id>12165512</id><snippet>48.9013471471|48.6057858287|48.1145061659|47.4294863684|
</snippet></ROW><ROW><id>12165512</id><snippet>yEst = 0 # or some initial value
yEstArray = []
for i in drange2(0, 2*math.pi + 0.0634665182543392 , 0.0634665182543392):
    for x in range(1,N+1):
       yEst = yEst + a * cos(x* i) 
       yEstArray.append(yEst)
</snippet></ROW><ROW><id>12165512</id><snippet>for yEst in yEstArray:
    do something with yEst
</snippet></ROW><ROW><id>12165512</id><snippet>for yEst, index in enumerate(yEstArray):
    do something with yEst and its index
</snippet></ROW><ROW><id>12165578</id><snippet>python setup.py develop</snippet></ROW><ROW><id>12165578</id><snippet>FOO</snippet></ROW><ROW><id>12165578</id><snippet>bin</snippet></ROW><ROW><id>12165578</id><snippet>use-foo.py</snippet></ROW><ROW><id>12165578</id><snippet>FOO</snippet></ROW><ROW><id>12165578</id><snippet>develop</snippet></ROW><ROW><id>12165578</id><snippet>foo/</snippet></ROW><ROW><id>12165578</id><snippet>FOO</snippet></ROW><ROW><id>12165578</id><snippet>__init__.py</snippet></ROW><ROW><id>12165578</id><snippet>FOO</snippet></ROW><ROW><id>12165578</id><snippet>export PYTHONPATH=/path/to/foo:$PYTHONPATH
export PATH=/path/to/foo/bin:$PATH
</snippet></ROW><ROW><id>12165798</id><snippet>get()</snippet></ROW><ROW><id>12165798</id><snippet>None</snippet></ROW><ROW><id>12165798</id><snippet>val = dict1[thing].get(2)
</snippet></ROW><ROW><id>12165798</id><snippet>val = dict1[thing].get(2, 'nothing')
</snippet></ROW><ROW><id>12165798</id><snippet>for thing in dict1:
    list3.append(dict1[thing].get(2, 'Nothing'))
</snippet></ROW><ROW><id>12166163</id><snippet>__eq__</snippet></ROW><ROW><id>12166163</id><snippet>import unittest


class MyClass(object):
    def __init__(self, day_name, day_num):
        self.day_name = day_name
        self.day_num = day_num

    def __eq__(self, other):
        return other.day_name == self.day_name and other.day_num == self.day_num


class ATestCase(unittest.TestCase):
    def test_foo(self):
        actual_sorted = [MyClass("wed", 20),
                           MyClass("wed", 19),
                           MyClass("thu", 18),
                           MyClass("wed", 17)]

        expected_sorted = [MyClass("wed", 20),
                           MyClass("wed", 19),
                           MyClass("thu", 18),
                           MyClass("wed", 17)]
        self.assertEqual(actual_sorted, expected_sorted)


if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>12166390</id><snippet>session</snippet></ROW><ROW><id>12166390</id><snippet>"name"</snippet></ROW><ROW><id>12166390</id><snippet>False</snippet></ROW><ROW><id>12166390</id><snippet>False</snippet></ROW><ROW><id>12166390</id><snippet>session</snippet></ROW><ROW><id>12166390</id><snippet>get</snippet></ROW><ROW><id>12166390</id><snippet>get</snippet></ROW><ROW><id>12166390</id><snippet>if "name" in request.session:
    result = request.session["name"]
else:
    result = False

if result:
    # Do something
</snippet></ROW><ROW><id>12166400</id><snippet>import calendar
import time
import pytz
import datetime as dt

tz1 = pytz.timezone('CST6CDT')
utc = pytz.timezone('UTC')
now = utc.localize(dt.datetime.utcnow())
now_tz = now.astimezone(tz1)

now_epoch = calendar.timegm(now_tz.utctimetuple())

print(now_tz)
print(now_epoch)
# 2012-08-28 14:33:50.480725-05:00
# 1346182430

begin_day = now_tz.replace(hour=0, minute=0, second=0)
begin_epoch = calendar.timegm(begin_day.utctimetuple())

print(begin_day)
print(begin_epoch)
# 2012-08-28 00:00:00.480725-05:00
# 1346130000
</snippet></ROW><ROW><id>12166482</id><snippet>def save_uploaded_file (form_field, upload_dir):
    """This saves a file uploaded by an HTML form.
       The form_field is the name of the file input field from the form.
       For example, the following form_field would be "file_1":
           &lt;input name="file_1" type="file"&gt;
       The upload_dir is the directory where the file will be written.
       If no file was uploaded or if the field does not exist then
       this does nothing.
    """
    form = cgi.FieldStorage()
    if not form.has_key(form_field): return
    fileitem = form[form_field]
    if not fileitem.file: return
    fout = file (os.path.join(upload_dir, fileitem.filename), 'wb')
    while 1:
        chunk = fileitem.file.read(100000)
        if not chunk: break
        fout.write (chunk)
    fout.close()
</snippet></ROW><ROW><id>12166615</id><snippet>context_processors.py</snippet></ROW><ROW><id>12166615</id><snippet>from django.conf import settings

def cardspring(request):
    return { 'CARDSPRING_APP_ID': settings.CARDSPRING_APP_ID }
</snippet></ROW><ROW><id>12166615</id><snippet>your.location.context_processors.cardspring</snippet></ROW><ROW><id>12166615</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>12166615</id><snippet>your.location</snippet></ROW><ROW><id>12166615</id><snippet>context_processors.py</snippet></ROW><ROW><id>12166627</id><snippet>tokenize</snippet></ROW><ROW><id>12166627</id><snippet>ElementTree</snippet></ROW><ROW><id>12166627</id><snippet>from tokenize import NAME, INDENT, DEDENT, ENDMARKER, NEWLINE, generate_tokens
from xml.etree import ElementTree as etree

def parse(file, TreeBuilder=etree.TreeBuilder):
    tb = TreeBuilder()
    tb.start('ul', {})
    for type_, text, start, end, line in generate_tokens(file.readline):
        if type_ == NAME: # convert name to &lt;li&gt; item
            tb.start('li', {})
            tb.data(text)
            tb.end('li')
        elif type_ == NEWLINE:
            continue
        elif type_ == INDENT: # start &lt;ul&gt;
            tb.start('ul', {})
        elif type_ == DEDENT: # end &lt;/ul&gt;
            tb.end('ul')
        elif type_ == ENDMARKER: # done
            tb.end('ul') # end parent list
            break
        else: # unexpected token
            assert 0, (type_, text, start, end, line)
    return tb.close() # return root element
</snippet></ROW><ROW><id>12166627</id><snippet>.start()</snippet></ROW><ROW><id>12166627</id><snippet>.end()</snippet></ROW><ROW><id>12166627</id><snippet>.data()</snippet></ROW><ROW><id>12166627</id><snippet>.close()</snippet></ROW><ROW><id>12166627</id><snippet>TreeBuilder</snippet></ROW><ROW><id>12166627</id><snippet>ElementTree.write()</snippet></ROW><ROW><id>12166627</id><snippet>import sys

etree.ElementTree(parse(sys.stdin)).write(sys.stdout, method='html')
</snippet></ROW><ROW><id>12166627</id><snippet>&lt;ul&gt;&lt;li&gt;A&lt;/li&gt;&lt;ul&gt;&lt;li&gt;B&lt;/li&gt;&lt;li&gt;C&lt;/li&gt;&lt;ul&gt;&lt;li&gt;D&lt;/li&gt;&lt;li&gt;E&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;
</snippet></ROW><ROW><id>12166627</id><snippet>sys.stdin/sys.stdout</snippet></ROW><ROW><id>12166627</id><snippet>sys.stdout.buffer</snippet></ROW><ROW><id>12166627</id><snippet>encoding="unicode"</snippet></ROW><ROW><id>12166646</id><snippet>user.password</snippet></ROW><ROW><id>12166646</id><snippet>self.client.login(username=user.username, password='&lt;user password&gt;')
</snippet></ROW><ROW><id>12166701</id><snippet>% users</snippet></ROW><ROW><id>12166701</id><snippet>os.chdir("/users/%s/dekstop" % user)</snippet></ROW><ROW><id>12166706</id><snippet>DU = []

for index, line in enumerate(oz):

   line = line.strip() if (index +1) % 15 != 0 else line.strip().split(' ')[0]

   for i in range(0,len(line)-3,3):

      DU.append(line[i:i+3])
</snippet></ROW><ROW><id>12166706</id><snippet> from itertools import izip

 def grouped(iterable, n):
      "s -&gt; (s0,s1,s2,...sn-1), (sn,sn+1,sn+2,...s2n-1), (s2n,s2n+1,s2n+2,...s3n-1), ..."
      return izip(*[iter(iterable)]*n)

 DU = []

 for index, line in enumerate(oz):

        line = line.strip() if (index +1) % 15 != 0 else line.strip().split(' ')[0]


        DU.append(map(''.join, grouped(line.strip(), 3)))
</snippet></ROW><ROW><id>12167243</id><snippet>defaultdict</snippet></ROW><ROW><id>12167243</id><snippet>json_dict = defaultdict(lambda: defaultdict(dict))
</snippet></ROW><ROW><id>12167243</id><snippet>defaultdict</snippet></ROW><ROW><id>12167243</id><snippet>defaultdict</snippet></ROW><ROW><id>12167243</id><snippet>dict</snippet></ROW><ROW><id>12167243</id><snippet>json_dict['context']['name']['id'] = '42'
</snippet></ROW><ROW><id>12167243</id><snippet>if...else</snippet></ROW><ROW><id>12167288</id><snippet>easy_install</snippet></ROW><ROW><id>12167288</id><snippet>USER_BASE</snippet></ROW><ROW><id>12167288</id><snippet>~/.local/bin/easy_install</snippet></ROW><ROW><id>12167288</id><snippet>/opt/ActivePython-2.7</snippet></ROW><ROW><id>12167288</id><snippet>numpy</snippet></ROW><ROW><id>12167288</id><snippet>/usr/lib/python2.7</snippet></ROW><ROW><id>12167288</id><snippet>numpy</snippet></ROW><ROW><id>12167288</id><snippet>easy_install</snippet></ROW><ROW><id>12167288</id><snippet>sudo apt-get install python-setuptools
</snippet></ROW><ROW><id>12167288</id><snippet>/usr/bin/easy_install --user qimage2ndarray
</snippet></ROW><ROW><id>12167288</id><snippet>qimage2ndarray</snippet></ROW><ROW><id>12167288</id><snippet>USER_SITE</snippet></ROW><ROW><id>12167288</id><snippet>sudo /usr/bin/easy_install qimage2ndarray
</snippet></ROW><ROW><id>12167479</id><snippet>getattr(moduleA, 'func1')()</snippet></ROW><ROW><id>12167479</id><snippet>moduleA.func1()</snippet></ROW><ROW><id>12167490</id><snippet>reader</snippet></ROW><ROW><id>12167490</id><snippet>reader</snippet></ROW><ROW><id>12167490</id><snippet>next</snippet></ROW><ROW><id>12167490</id><snippet>reader=iter(reader)</snippet></ROW><ROW><id>12167490</id><snippet>first_row</snippet></ROW><ROW><id>12167490</id><snippet>first_row = reader.next()</snippet></ROW><ROW><id>12167490</id><snippet>first_row</snippet></ROW><ROW><id>12167490</id><snippet>next_row</snippet></ROW><ROW><id>12167490</id><snippet>StopIteration</snippet></ROW><ROW><id>12167490</id><snippet>first_row</snippet></ROW><ROW><id>12167490</id><snippet>try:
    while True:
        next_row = reader.next()
        if first_row["name"] == next_row["name"]:
            ...do_something...
        else:
            writer.writerow(first_row)
            first_row = next_row
except StopIteration:
    writer.writerow(first_row)
</snippet></ROW><ROW><id>12167609</id><snippet>&gt;&gt;&gt; row = ['city', 'state', 'zip', 'zippostal', 'company']
&gt;&gt;&gt; joins = [[4, 0, 2], [1], [3]]
&gt;&gt;&gt; [''.join(row[i] for i in indices) for indices in joins]
['companycityzip', 'state', 'zippostal']
</snippet></ROW><ROW><id>12167609</id><snippet>def custom_join(row, *joins):
    return [''.join(row[i] for i in indices) for indices in joins]
</snippet></ROW><ROW><id>12167609</id><snippet>&gt;&gt;&gt; row = ['city', 'state', 'zip', 'zippostal', 'company']
&gt;&gt;&gt; custom_join(row, [0, 1, 2], [3], [4])
['citystatezip', 'zippostal', 'company']
&gt;&gt;&gt; custom_join(row, [-1, 0, 2], [1], [-2])
['companycityzip', 'state', 'zippostal']
</snippet></ROW><ROW><id>12167609</id><snippet>def custom_join2(row, *joins):
    result = [''.join(row[i] for i in indices) for indices in joins]
    seen = set(i if i &gt;= 0 else len(row)+i for indices in joins for i in indices)
    result.extend(v for i, v in enumerate(row) if i not in seen)
    return result

&gt;&gt;&gt; custom_join2(row, [-1, 0, 2])
['companycityzip', 'state', 'zippostal']
</snippet></ROW><ROW><id>12167702</id><snippet>def V(theta,N):
    return sum(a0*(cos(i*theta) for i in range(1,N+1))
print V(theta,N) 
</snippet></ROW><ROW><id>12167702</id><snippet>lambda</snippet></ROW><ROW><id>12167702</id><snippet>V =lambda theta,N : sum(a0*(cos(i*theta) for i in range(1,N+1))   
print V(theta,N) 
</snippet></ROW><ROW><id>12167709</id><snippet>parse_known_args</snippet></ROW><ROW><id>12167709</id><snippet>--user</snippet></ROW><ROW><id>12167709</id><snippet>--user</snippet></ROW><ROW><id>12167709</id><snippet>--config</snippet></ROW><ROW><id>12167709</id><snippet>parse_args</snippet></ROW><ROW><id>12167709</id><snippet>argparse</snippet></ROW><ROW><id>12167709</id><snippet>import os
import argparse

# Global preparser and options.
preparser = argparse.ArgumentParser(add_help=False)
preparser.add_argument("--user", dest="user", default=os.environ.get("USER"))

# ****** NEW *******
options, _ = preparser.parse_known_args() # Ignore what we haven't defined yet
user = options.user                       # Use this to define the default of --config

parser = argparse.ArgumentParser(parents=[ preparser ], add_help=True,
                   formatter_class=argparse.ArgumentDefaultsHelpFormatter)

# Sub-command parser and options.
subparsers = parser.add_subparsers()

command = subparsers.add_parser("command")

# ****** MODIFIED *******
command.add_argument("--config", dest="config", default="~%s/config" % (user,))

options = parser.parse_args()
</snippet></ROW><ROW><id>12167712</id><snippet>Field('uploader_name', db.user.uname)
</snippet></ROW><ROW><id>12167712</id><snippet>Field('uploader_name', db.user)
</snippet></ROW><ROW><id>12167712</id><snippet>Field('uploader_name', 'reference user')
</snippet></ROW><ROW><id>12167712</id><snippet>db.user</snippet></ROW><ROW><id>12167712</id><snippet>db.define_table('user',
    Field('uname',unique=True),
    Field('name'),
    Field('email'),
    format='%(uname)s')
</snippet></ROW><ROW><id>12167927</id><snippet>[random.random() for _ in xrange(100000)]
</snippet></ROW><ROW><id>12167927</id><snippet>random.sample(range(10), 100000)</snippet></ROW><ROW><id>12167927</id><snippet>random.random()</snippet></ROW><ROW><id>12167927</id><snippet>random.randrange([start], stop[, step])</snippet></ROW><ROW><id>12167927</id><snippet>range([start], stop[, step])</snippet></ROW><ROW><id>12167927</id><snippet>random.randint(a, b)</snippet></ROW><ROW><id>12167927</id><snippet>random.sample</snippet></ROW><ROW><id>12167927</id><snippet>len(population) &gt;= k</snippet></ROW><ROW><id>12168018</id><snippet>'http://sub.flasktest.com/'</snippet></ROW><ROW><id>12168018</id><snippet>self.app.get('/')</snippet></ROW><ROW><id>12168018</id><snippet>self.app.get('/', 'http://sub.flasktest.com/')</snippet></ROW><ROW><id>12168018</id><snippet>from flask import Flask

app = Flask('blueprint_test')
app.config['SERVER_NAME'] = 'flasktest.com'

app.url_map.default_subdomain = 'www' # is this done in Flask already ? It doesn't seem

from flask import Blueprint

main = Blueprint('main', 'main', subdomain='www')

@main.route('/')
def show():
    return 'Hello from main'

app.register_blueprint(main)

sub = Blueprint('sub', 'sub', subdomain='sub')

@sub.route('/')
def show2():
    return 'Hello from sub'

app.register_blueprint(sub)
</snippet></ROW><ROW><id>12168018</id><snippet>import unittest
from flasktest import app

class AppTestCase(unittest.TestCase):

    def setUp(self):
        app.config['TESTING'] = True
        app.config['SERVER_NAME'] = 'flasktest.com'
        self.sub = 'http://sub.flasktest.com/'
        self.app = app.test_client()

    def tearDown(self):
        pass

    def test_index(self):
        rv = self.app.get('/', self.sub)
        print rv.data

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>12168117</id><snippet>su</snippet></ROW><ROW><id>12168117</id><snippet>expect</snippet></ROW><ROW><id>12168117</id><snippet>su</snippet></ROW><ROW><id>12168117</id><snippet>sudo</snippet></ROW><ROW><id>12168117</id><snippet>/etc/sudoers</snippet></ROW><ROW><id>12168117</id><snippet>sudo -u root /bin/sh -c 'echo "root cat write anywhere" &gt; /etc/anywhere'</snippet></ROW><ROW><id>12168117</id><snippet>sudo -u root echo "root can write anywhere" &gt; /etc/anywhere</snippet></ROW><ROW><id>12168252</id><snippet>if f is not None:
    with open(f) as FILE:
        do_something(FILE)
else:
    do_something(f)
</snippet></ROW><ROW><id>12168252</id><snippet>file</snippet></ROW><ROW><id>12168252</id><snippet>from contextlib import contextmanager

none_context = contextmanager(lambda: iter([None]))()
# &lt;contextlib.GeneratorContextManager at 0x1021a0110&gt;

with (open(f) if f is not None else none_context) as FILE:
    do_something(FILE)
</snippet></ROW><ROW><id>12168252</id><snippet>with</snippet></ROW><ROW><id>12168252</id><snippet>__exit__</snippet></ROW><ROW><id>12168268</id><snippet>win32security</snippet></ROW><ROW><id>12168268</id><snippet>import win32security
import ntsecuritycon as con

FILENAME = "whatever"

userx, domain, type = win32security.LookupAccountName ("", "User X")
usery, domain, type = win32security.LookupAccountName ("", "User Y")

sd = win32security.GetFileSecurity(FILENAME, win32security.DACL_SECURITY_INFORMATION)
dacl = sd.GetSecurityDescriptorDacl()   # instead of dacl = win32security.ACL()

dacl.AddAccessAllowedAce(win32security.ACL_REVISION, con.FILE_GENERIC_READ | con.FILE_GENERIC_WRITE, userx)
dacl.AddAccessAllowedAce(win32security.ACL_REVISION, con.FILE_ALL_ACCESS, usery)

sd.SetSecurityDescriptorDacl(1, dacl, 0)   # may not be necessary
win32security.SetFileSecurity(FILENAME, win32security.DACL_SECURITY_INFORMATION, sd)
</snippet></ROW><ROW><id>12168432</id><snippet>if resultDict[currentImageTest] == oldDict["image" + str(j)]:
            del resultDict[currentImageTest]
</snippet></ROW><ROW><id>12168432</id><snippet>i=1</snippet></ROW><ROW><id>12168432</id><snippet>j=1</snippet></ROW><ROW><id>12168432</id><snippet>resultDict["image1"]</snippet></ROW><ROW><id>12168432</id><snippet>i=1</snippet></ROW><ROW><id>12168432</id><snippet>j=2</snippet></ROW><ROW><id>12168432</id><snippet>resultDict["image1"]</snippet></ROW><ROW><id>12168432</id><snippet>oldDict["image2"]</snippet></ROW><ROW><id>12168432</id><snippet>resultDict["image1"]</snippet></ROW><ROW><id>12168432</id><snippet>key</snippet></ROW><ROW><id>12168432</id><snippet>for</snippet></ROW><ROW><id>12168432</id><snippet>range()</snippet></ROW><ROW><id>12168432</id><snippet>resultDict = {"image1":1, "image2":2, "image3":3, "image4":4, "image5": 5}
oldDict = {"image1":1, "image2":22, "image3":3, "image4":47, "image5": 5}

for i in range(1,6):
    currentImageTest = "image" + str(i)
    for j in range(1,6):
        if resultDict[currentImageTest] == oldDict["image" + str(j)]:
            del resultDict[currentImageTest]
            break
        else:
            pass
</snippet></ROW><ROW><id>12168528</id><snippet>def main():
    a = float(raw_input("Enter the first number: "))
    b = float(raw_input("Enter the second number: "))

    print "Your answer is: ",(a*b)

main()
</snippet></ROW><ROW><id>12168528</id><snippet>if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>12168664</id><snippet>eigvals</snippet></ROW><ROW><id>12168664</id><snippet>(N-k,N-1)</snippet></ROW><ROW><id>12168857</id><snippet>from pandas import *
idx = Int64Index([171, 174, 173])
df = DataFrame(index = idx, data =([1,2,3]))
print df

gives me,

     0
171  1
174  2
173  3
</snippet></ROW><ROW><id>12168923</id><snippet>distinct</snippet></ROW><ROW><id>12168923</id><snippet>order_by</snippet></ROW><ROW><id>12168923</id><snippet>Subjects.objects.order_by('created_by', '-num_of_followers')\
    .distinct('created_by')[:5]
</snippet></ROW><ROW><id>12169065</id><snippet>import numpy as np
from matplotlib import pyplot as plt
import random, sys
from datetime import datetime, timedelta
import time

tWindow=1 #moving window in minutes

timeList=[datetime.now()]
valList=[random.randint(1, 20)]

fig = plt.figure() #Make a figure
ax = fig.add_subplot(111) #Add a subplot

#Create the line with initial data using plot_date to add time to the x axis
line,=plt.plot_date(timeList, valList, linestyle='-') 

#Set the x limits to the time window
ax.set_xlim([datetime.now()-timedelta(seconds=tWindow*60),datetime.now()])

#set the y limits
ax.set_ylim(0,20)

#grab the blank background to clear the plot later
background = fig.canvas.copy_from_bbox(ax.bbox)

#show the figure
fig.show()

#loop
for i in range(100):
    #restore the background
    fig.canvas.restore_region(background)

    #add time to time list
    timeList.append(datetime.now())

    #add random value to values
    valList.append(random.randint(1, 20))

    #update the line data
    line.set_data(timeList,valList)

    #update x limits
    ax.set_xlim([datetime.now()-timedelta(seconds=tWindow*60),datetime.now()])

    #redraw widnow
    fig.canvas.draw()

    #pause the loop for .5 seconds
    time.sleep(0.5)
</snippet></ROW><ROW><id>12169065</id><snippet>self.l_user, = self.ax.plot([],self.user, label='Total %')
</snippet></ROW><ROW><id>12169065</id><snippet>self.l_user, = self.ax.plot_date([],self.user, label='Total %')
</snippet></ROW><ROW><id>12169065</id><snippet>def timerEvent(self, evt):
        # get the cpu percentage usage
        result = self.get_cpu_usage()
        # append new data to the datasets
        self.user.append(result[0])
        # update lines data using the lists with new data
        self.l_user.set_data(range(len(self.user)), self.user)
        # force a redraw of the Figure
        self.fig.canvas.draw()
           #else, we increment the counter
        self.cnt += 1
</snippet></ROW><ROW><id>12169065</id><snippet>def timerEvent(self, evt):
        # get the cpu percentage usage
        result = self.get_cpu_usage()
        # append new data to the datasets
        self.user.append(result[0])
        #save the current time
        self.timeStamp.append(datetime.now())
        # update lines data using the lists with new data
        self.l_user.set_data(self.timeStamp, self.user)
        #rescale the x axis maintaining a 5 minutes window
        self.ax.set_xlim([datetime.now()-timedelta(seconds=5*60),datetime.now()])
        # force a redraw of the Figure, this might not update the x axis limits??
        self.fig.canvas.draw()
           #else, we increment the counter
        self.cnt += 1
</snippet></ROW><ROW><id>12169065</id><snippet>from datetime import datetime, timedelta

class CPUMonitor(FigureCanvas):
    """Matplotlib Figure widget to display CPU utilization"""
    def __init__(self):
        ...
        self.timeStamp=[]
        ...
</snippet></ROW><ROW><id>12169082</id><snippet>my_func(my_array[:])</snippet></ROW><ROW><id>12169082</id><snippet>my_func(my_array) #array is modified inside and changes are reflected in original</snippet></ROW><ROW><id>12169095</id><snippet>dt = dt.replace(microsecond = (dt.microsecond / 1000) * 1000)
</snippet></ROW><ROW><id>12169231</id><snippet>zip</snippet></ROW><ROW><id>12169231</id><snippet>listAtoB = dict(zip(listA, listB))

listAtoB[3] # Z2 O95409 V595 **p.His3Leu** Dase - Hophaly type 5 (HPE5) [609637]
</snippet></ROW><ROW><id>12169277</id><snippet>from &lt;app name&gt;.Crunch import *
</snippet></ROW><ROW><id>12169357</id><snippet>&gt;&gt;&gt; df = DataFrame({"A": [1,2,3], "B": [-2, 8, 1]})
&gt;&gt;&gt; df
   A  B
0  1 -2
1  2  8
2  3  1
&gt;&gt;&gt; df[["A", "B"]]
   A  B
0  1 -2
1  2  8
2  3  1
&gt;&gt;&gt; df[["A", "B"]].max(axis=1)
0    1
1    8
2    3
</snippet></ROW><ROW><id>12169357</id><snippet>&gt;&gt;&gt; df["C"] = df[["A", "B"]].max(axis=1)
&gt;&gt;&gt; df
   A  B  C
0  1 -2  1
1  2  8  8
2  3  1  3
</snippet></ROW><ROW><id>12169357</id><snippet>&gt;&gt;&gt; df["C"] = df.max(axis=1)
</snippet></ROW><ROW><id>12169357</id><snippet>.apply(max, axis=1)</snippet></ROW><ROW><id>12169362</id><snippet>&gt;&gt;&gt; left("10000")
Entry({'parent': '10001', 'key': '10000', 'fkey': 'asdf'})
&gt;&gt;&gt; left("10000")['key']
'10000'
&gt;&gt;&gt; left("10000")['parent']
'10001'
</snippet></ROW><ROW><id>12169362</id><snippet>&gt;&gt;&gt; left("10000").parent()
Entry({'parent': '', 'key': '10001', 'fkey': 'qwer'})
&gt;&gt;&gt; left("10000").parent().parent()
&gt;&gt;&gt; left("10001")
Entry({'parent': '', 'key': '10001', 'fkey': 'qwer'})
&gt;&gt;&gt; left("10001") is left("10000").parent()
True
</snippet></ROW><ROW><id>12169362</id><snippet>&gt;&gt;&gt; left("10001").related()
Entry({'parent': '', 'key': 'qwer', 'fkey': '10001'})
&gt;&gt;&gt; right("qwer")
Entry({'parent': '', 'key': 'qwer', 'fkey': '10001'})
&gt;&gt;&gt; right(left("10001").related()['key'])
Entry({'parent': '', 'key': 'qwer', 'fkey': '10001'})
&gt;&gt;&gt; right("qwer") is left("10001").related()
True
</snippet></ROW><ROW><id>12169362</id><snippet>&gt;&gt;&gt; left("10000").parent()['fkey']
'qwer'
</snippet></ROW><ROW><id>12169362</id><snippet>class Entry(object):
    def __init__(self, dataset, d):
        self.dataset = dataset
        self.d = d

    def parent(self):
        return self.dataset.parent_of(self)
    def related(self):
        if not self.dataset.related_dataset:
            raise ValueError("no related dataset specified")
        return self.dataset.related_dataset(self['fkey'])

    def __getitem__(self, k):
        return self.d.__getitem__(k)

    def __repr__(self):
        return "Entry(%s)" % repr(self.d)
    def __str__(self):
        return str(self.d)

class Dataset(object):
    def __init__(self, data):
        self.data = dict((k, Entry(self, v)) for (k,v) in data.items())
        self.related_dataset = None

    def set_related_dataset(self, dataset):
        self.related_dataset = dataset

    def entry(self, key):
        if isinstance(key, Entry): return key
        return self.data[key]
    def __call__(self, key):
        return self.entry(key)

    def parent_of(self, entry):
        entry = self.entry(entry)

        if not entry['parent']:
            return None
        return self.data[entry['parent']]
</snippet></ROW><ROW><id>12169362</id><snippet>leftdata = {'10000': { 'key': '10000', 'fkey':'asdf', 'parent':'10001'},
               '10001': { 'key': '10001', 'fkey':'qwer', 'parent':''},}
rightdata = {'asdf': { 'key': 'asdf', 'fkey':'10000', 'parent':'qwer'},
               'qwer': { 'key': 'qwer', 'fkey':'10001', 'parent':''}}

left = Dataset(leftdata)
right = Dataset(rightdata)
left.set_related_dataset(right)
right.set_related_dataset(left)
</snippet></ROW><ROW><id>12169362</id><snippet>Entry</snippet></ROW><ROW><id>12169362</id><snippet>__getitem__</snippet></ROW><ROW><id>12169362</id><snippet>Dataset</snippet></ROW><ROW><id>12169362</id><snippet>Entry</snippet></ROW><ROW><id>12169362</id><snippet>Entry</snippet></ROW><ROW><id>12169362</id><snippet>.parent()</snippet></ROW><ROW><id>12169362</id><snippet>.related()</snippet></ROW><ROW><id>12169362</id><snippet>.related()</snippet></ROW><ROW><id>12169362</id><snippet>set_related_dataset</snippet></ROW><ROW><id>12169362</id><snippet>Entry</snippet></ROW><ROW><id>12169379</id><snippet>coverage</snippet></ROW><ROW><id>12169379</id><snippet>nose</snippet></ROW><ROW><id>12169379</id><snippet>coverage html</snippet></ROW><ROW><id>12169964</id><snippet>sympy</snippet></ROW><ROW><id>12169964</id><snippet>&gt;&gt;&gt; import sympy
&gt;&gt;&gt; alpha1, r1_x, r1_y = sympy.var("alpha1 r1_x r1_y")
&gt;&gt;&gt; B1 = sympy.exp(-alpha1 * (r1_x**2 + r1_y**2))
&gt;&gt;&gt; B1.integrate(r1_x)
Integral(exp(-alpha1*(r1_x**2 + r1_y**2)), r1_x)
&gt;&gt;&gt; B1.expand(alpha1)
exp(-alpha1*r1_x**2)*exp(-alpha1*r1_y**2)
&gt;&gt;&gt; B1.expand(alpha1).integrate(r1_x)
sqrt(pi)*exp(-alpha1*r1_y**2)*erf(sqrt(alpha1)*r1_x)/(2*sqrt(alpha1))
</snippet></ROW><ROW><id>12170043</id><snippet>get</snippet></ROW><ROW><id>12170043</id><snippet>get</snippet></ROW><ROW><id>12170371</id><snippet>defaultdict</snippet></ROW><ROW><id>12170371</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; d['blue'].append(3)
&gt;&gt;&gt; d['blue'].append(4)
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {'blue': [3, 4]})
</snippet></ROW><ROW><id>12170371</id><snippet>&gt;&gt;&gt; d = defaultdict(lambda: defaultdict(list))
&gt;&gt;&gt; d
defaultdict(&lt;function &lt;lambda&gt; at 0x1004bf9b0&gt;, {})
&gt;&gt;&gt; d['alex']['blue'].append(3)
&gt;&gt;&gt; d['alex']['blue'].append(4)
&gt;&gt;&gt; d['liza']['green'].append(2)
&gt;&gt;&gt; d
defaultdict(&lt;function &lt;lambda&gt; at 0x1004bf9b0&gt;, {'liza': defaultdict(&lt;type 'list'&gt;, {'green': [2]}), 'alex': defaultdict(&lt;type 'list'&gt;, {'blue': [3, 4]})})
&gt;&gt;&gt; d.keys()
['liza', 'alex']
&gt;&gt;&gt; d['alex'].keys()
['blue']
&gt;&gt;&gt; d['alex']['blue']
[3, 4]
</snippet></ROW><ROW><id>12170482</id><snippet>Response</snippet></ROW><ROW><id>12170482</id><snippet>from flask import Response

# construct your app

@app.route("/get-file")
def get_file():
    results = generate_file_data()
    generator = (cell for row in results
                    for cell in row)

    return Response(generator,
                       mimetype="text/plain",
                       headers={"Content-Disposition":
                                    "attachment;filename=test.txt"})
</snippet></ROW><ROW><id>12170519</id><snippet>CrawlSpider</snippet></ROW><ROW><id>12170519</id><snippet>start_urls</snippet></ROW><ROW><id>12170519</id><snippet>site:www.filefactory.com</snippet></ROW><ROW><id>12170519</id><snippet>site:filefactory.com</snippet></ROW><ROW><id>12170521</id><snippet>&gt;&gt;&gt; a = range(10)
&gt;&gt;&gt; # Pick every other element in a starting from a[1]
&gt;&gt;&gt; b = a[1::2]
&gt;&gt;&gt; print b
&gt;&gt;&gt; [1, 3, 5, 7, 9]
</snippet></ROW><ROW><id>12170521</id><snippet>&gt;&gt;&gt; c = a[-1::-2]
&gt;&gt;&gt; print c
&gt;&gt;&gt; [9, 7, 5, 3, 1]
</snippet></ROW><ROW><id>12170521</id><snippet>&gt;&gt;&gt; a, b = s.partition('-')[::2]
</snippet></ROW><ROW><id>12170760</id><snippet>barb.set_UVC(newU,newV,newC)</snippet></ROW><ROW><id>12170760</id><snippet>barbs = m.quiver(x, y, u[0, :], v[0, :], scale = 100)
for i in range(365):
     barbs.set_UVC(u[i,:],v[i,:])
     #save the figure or something
</snippet></ROW><ROW><id>12170760</id><snippet>animation</snippet></ROW><ROW><id>12170946</id><snippet>$1</snippet></ROW><ROW><id>12170946</id><snippet>$2</snippet></ROW><ROW><id>12171037</id><snippet>L = [1,2,3,4,5]
L = sorted(L+[1,2,3,4,5], reverse=True)
</snippet></ROW><ROW><id>12171037</id><snippet>None</snippet></ROW><ROW><id>12171037</id><snippet>&gt;&gt;&gt; L = [1, 2, 3, 4, 5]
&gt;&gt;&gt; L.extend([1,2,3,4,5]) or L.sort() or L.reverse() or L
[5, 5, 4, 4, 3, 3, 2, 2, 1, 1]
</snippet></ROW><ROW><id>12171037</id><snippet>&gt;&gt;&gt; L = [1, 2, 3, 4, 5]
&gt;&gt;&gt; (L.extend([1,2,3,4,5]), L.sort(), L.reverse()) and L
[5, 5, 4, 4, 3, 3, 2, 2, 1, 1]
</snippet></ROW><ROW><id>12171037</id><snippet>&gt;&gt;&gt; L = [1, 2, 3, 4, 5]
&gt;&gt;&gt; max(L.extend([1,2,3,4,5]), L.sort(), L.reverse(), L) # Python2.x only
[5, 5, 4, 4, 3, 3, 2, 2, 1, 1]
</snippet></ROW><ROW><id>12171244</id><snippet>current_func_ref = None
def func():
    global current_func_ref
    current_func_ref = func
</snippet></ROW><ROW><id>12171259</id><snippet>urls.py</snippet></ROW><ROW><id>12171259</id><snippet>HttpResponse</snippet></ROW><ROW><id>12171259</id><snippet>POST</snippet></ROW><ROW><id>12171259</id><snippet>def login(request):
   # t = loader.get_template('registration/login.html') - not needed
   if request.method == "POST":
    username = request.POST.get('user_name')
    password = request.POST.get('password')
    user = authenticate(username=username, password=password)
    if user is not None:
      if user.is_active:
        login(request, user)
        # success
        return render(request,'registration/login.html')
      else:
        # user was not active
        return redirect('registration/')
    else:
        # not a valid user
        return redirect('registration/')
   else:
       # URL was accessed directly
       return redirect('registration/')
</snippet></ROW><ROW><id>12171382</id><snippet>+</snippet></ROW><ROW><id>12171382</id><snippet>+=</snippet></ROW><ROW><id>12171382</id><snippet>a = a + b:
0.11338996887207031
a += b:
0.11040496826171875
</snippet></ROW><ROW><id>12171382</id><snippet>a += b:
0.10780501365661621
a.append(b):
0.1123361587524414
</snippet></ROW><ROW><id>12171382</id><snippet>a += b:
0.41823482513427734
a.append(b):
0.010656118392944336
</snippet></ROW><ROW><id>12171382</id><snippet>a.join()</snippet></ROW><ROW><id>12171382</id><snippet>a.join(a):
0.43739795684814453
</snippet></ROW><ROW><id>12171382</id><snippet>a += b:
0.165287017822
a.append(b):
0.0132720470428
a.join(a):
0.114929914474
</snippet></ROW><ROW><id>12171382</id><snippet>+</snippet></ROW><ROW><id>12171382</id><snippet>+=</snippet></ROW><ROW><id>12171382</id><snippet>''.join()</snippet></ROW><ROW><id>12171437</id><snippet>python command &amp;&amp; sudo shutdown -h now
</snippet></ROW><ROW><id>12171610</id><snippet>{% load tags %}</snippet></ROW><ROW><id>12171686</id><snippet>ARCHFLAGS="-arch x86_64" pip install numpy
</snippet></ROW><ROW><id>12172093</id><snippet>SELECT * from MyModelList where listed_props = 'a' and listed_props = 'b'
</snippet></ROW><ROW><id>12172093</id><snippet>SELECT * from MyModelProps where property_1 = 'a' and property_2 = 'b'
</snippet></ROW><ROW><id>12172720</id><snippet>gsettings</snippet></ROW><ROW><id>12172790</id><snippet>python -m &lt;module&gt;</snippet></ROW><ROW><id>12172790</id><snippet>python -m project.utilities.mainB
</snippet></ROW><ROW><id>12173146</id><snippet>Pipe</snippet></ROW><ROW><id>12173146</id><snippet>seq = fib() | take_while(lambda x: x &lt; 1000000) \
            | where(lambda x: x % 2) \
            | select(lambda x: x * x) \
            | sum()
</snippet></ROW><ROW><id>12173158</id><snippet>readlines()</snippet></ROW><ROW><id>12173158</id><snippet>tell</snippet></ROW><ROW><id>12173158</id><snippet>lines = f.readlines()</snippet></ROW><ROW><id>12173158</id><snippet>lines</snippet></ROW><ROW><id>12173365</id><snippet>s</snippet></ROW><ROW><id>12173365</id><snippet>d</snippet></ROW><ROW><id>12173365</id><snippet>1</snippet></ROW><ROW><id>12173365</id><snippet>i</snippet></ROW><ROW><id>12173365</id><snippet>d</snippet></ROW><ROW><id>12173365</id><snippet>d</snippet></ROW><ROW><id>12173365</id><snippet>i = 0, s = 1
i = 1, s = 2
i = 2, s = 3
# exit inner loop
return True
</snippet></ROW><ROW><id>12173365</id><snippet>for</snippet></ROW><ROW><id>12173365</id><snippet>range()</snippet></ROW><ROW><id>12173365</id><snippet>def check_sudoku(n):
    for i in range(len(n)):
        for s in range(1, len(n)):
            if n[0][i]==n[s][i]:
                return False
    return True
</snippet></ROW><ROW><id>12173365</id><snippet>range</snippet></ROW><ROW><id>12173365</id><snippet>1</snippet></ROW><ROW><id>12173365</id><snippet>len(n)</snippet></ROW><ROW><id>12173365</id><snippet>any()</snippet></ROW><ROW><id>12173365</id><snippet>def check_sudoku(n):
    return not any(n[0][i] == n[s][i] for i in range(len(n)) for s in range(1, len(n)))
</snippet></ROW><ROW><id>12173406</id><snippet>mypkg
├── base.py
└── derived.py
</snippet></ROW><ROW><id>12173406</id><snippet>derived.py</snippet></ROW><ROW><id>12173406</id><snippet>base.py</snippet></ROW><ROW><id>12173406</id><snippet>derived.py</snippet></ROW><ROW><id>12173406</id><snippet>from base import BaseThing
</snippet></ROW><ROW><id>12173406</id><snippet>base</snippet></ROW><ROW><id>12173406</id><snippet>base</snippet></ROW><ROW><id>12173406</id><snippet>derived.py</snippet></ROW><ROW><id>12173406</id><snippet>from .base import BaseThing
</snippet></ROW><ROW><id>12173406</id><snippet>.</snippet></ROW><ROW><id>12173406</id><snippet>Base</snippet></ROW><ROW><id>12173406</id><snippet>.base</snippet></ROW><ROW><id>12173406</id><snippet>./base.py</snippet></ROW><ROW><id>12173406</id><snippet>..</snippet></ROW><ROW><id>12173406</id><snippet>../</snippet></ROW><ROW><id>12173406</id><snippet>..mod</snippet></ROW><ROW><id>12173406</id><snippet>../mod.py</snippet></ROW><ROW><id>12173406</id><snippet>...</snippet></ROW><ROW><id>12173406</id><snippet>../../mod.py</snippet></ROW><ROW><id>12173406</id><snippet>derived.py</snippet></ROW><ROW><id>12173406</id><snippet>math</snippet></ROW><ROW><id>12173406</id><snippet>def sin_degrees(x):
    from math import *
    return sin(degrees(x))
</snippet></ROW><ROW><id>12173406</id><snippet>a.py:1: SyntaxWarning: import * only allowed at module level
  def sin_degrees(x):
</snippet></ROW><ROW><id>12173406</id><snippet>def sin_degrees(x):
    from math import sin, degrees
    return sin(degrees(x))
</snippet></ROW><ROW><id>12173406</id><snippet>from math import *

def sin_degrees(x):
    return sin(degrees(x))
</snippet></ROW><ROW><id>12173415</id><snippet>set</snippet></ROW><ROW><id>12173415</id><snippet>set</snippet></ROW><ROW><id>12173415</id><snippet>seen = set()
with open('test.csv') as input, open('test_out.csv', 'w') as output:
    for line in input:
        value = float(line)
        while value in seen:
            value -= 0.000001
        seen.add(value)
        output.write(str(value) + '\n')
</snippet></ROW><ROW><id>12173415</id><snippet>set</snippet></ROW><ROW><id>12173415</id><snippet>import fileinput

seen = set()
for line in fileinput.FileInput('test.csv', inplace=True):
    value = float(line)
    while value in seen:
        value -= 0.000001
    seen.add(value)
    print str(value).strip()
</snippet></ROW><ROW><id>12173415</id><snippet>decimal</snippet></ROW><ROW><id>12173415</id><snippet>Decimal</snippet></ROW><ROW><id>12173415</id><snippet>1000000</snippet></ROW><ROW><id>12173415</id><snippet>int</snippet></ROW><ROW><id>12173415</id><snippet>float</snippet></ROW><ROW><id>12173472</id><snippet>codecs.open</snippet></ROW><ROW><id>12173472</id><snippet>open</snippet></ROW><ROW><id>12173472</id><snippet>unicode</snippet></ROW><ROW><id>12173472</id><snippet>str</snippet></ROW><ROW><id>12174063</id><snippet>import time
import tkinter
from tkinter import ttk
import threading  

#gui
root = tkinter.Tk()
root.title("Threading demo")

status = tkinter.StringVar()
elapsed = tkinter.StringVar()
error = tkinter.StringVar()

#thread
class timer(threading.Thread):
    def __init__(self):
        super().__init__()
        self.stopped = False
        #your code here, don't need init if you have no code



    def run(self):
        status.set('running')

        while not self.isStopped():
            time.sleep(1)

            try:
                oldtime = int(elapsed.get())
            except ValueError:
                oldtime = 0

            elapsed.set(oldtime+1)

        status.set('stopped')
        time.sleep(2)

    def isStopped(self):
        return self.stopped



    def stop(self):
        self.stopped = True



#starts/stops thread (manages it)
class threadedOp(object):
    def __init__(self):
        self.thread = None


    def run(self):
        if self.thread == None:
            self.thread = timer()
            status.set('starting')
            self.thread.start()
        else:
            error.set('Thread already running')


    def stop(self):
        if self.thread != None:
            status.set('stopping')
            self.thread.stop()
            self.thread.join()
            error.set('Join complete')
            self.thread = None
        else:
            error.set('No thread to stop')

op = threadedOp()

#remaining gui
mainframe = ttk.Frame(root, padding="3 3 12 12")
mainframe.grid(column=0, row=0, sticky=(tkinter.N, tkinter.W, tkinter.E, tkinter.S))
mainframe.columnconfigure(0, weight=1)
mainframe.rowconfigure(0, weight=1)

ttk.Label(mainframe, textvariable=elapsed).grid(column=1, row=1, sticky=(tkinter.W, tkinter.E))
ttk.Label(mainframe, textvariable=status).grid(column=2, row=1, sticky=(tkinter.W, tkinter.E))
ttk.Label(mainframe, textvariable=error).grid(column=1, row=3, sticky=(tkinter.W, tkinter.E))
ttk.Button(mainframe, text="Start", command=op.run).grid(column=1, row=2, sticky=tkinter.W)
ttk.Button(mainframe, text="Stop", command=op.stop).grid(column=2, row=2, sticky=tkinter.W)

root.mainloop()
</snippet></ROW><ROW><id>12174240</id><snippet>cd</snippet></ROW><ROW><id>12174240</id><snippet>nosetests
</snippet></ROW><ROW><id>12174240</id><snippet>test</snippet></ROW><ROW><id>12174240</id><snippet>Test</snippet></ROW><ROW><id>12174682</id><snippet>{{ your_python_data }}
</snippet></ROW><ROW><id>12174682</id><snippet>from django.utils import simplejson

json_data_string = simplejson.dumps(your_data)
</snippet></ROW><ROW><id>12174682</id><snippet>var your_data = {{ json_data_string }};
</snippet></ROW><ROW><id>12174682</id><snippet>from django.utils import simplejson
from django import template
from django.utils.safestring import mark_safe

register = template.Library()


@register.filter
def as_json(data):
    return mark_safe(simplejson.dumps(data))
</snippet></ROW><ROW><id>12174682</id><snippet>{% load your_template_tags %}

{{ your_python_data|as_json }}
</snippet></ROW><ROW><id>12174731</id><snippet>def process(self, formdata=None, obj=None, **kwargs):
    if formdata is not None and not hasattr(formdata, 'getlist'):
        if hasattr(formdata, 'getall'):
            formdata = WebobInputWrapper(formdata)
        else:
            raise TypeError("formdata should be a multidict-type wrapper that supports the 'getlist' method")

    for name, field, in iteritems(self._fields):
        if obj is not None and hasattr(obj, name):
            field.process(formdata, getattr(obj, name))
        elif name in kwargs:
            field.process(formdata, kwargs[name])
        else:
            field.process(formdata)
</snippet></ROW><ROW><id>12174731</id><snippet>**kwargs</snippet></ROW><ROW><id>12174731</id><snippet>formdata</snippet></ROW><ROW><id>12174731</id><snippet>dict</snippet></ROW><ROW><id>12174731</id><snippet>web.storage</snippet></ROW><ROW><id>12174731</id><snippet>getlist</snippet></ROW><ROW><id>12174731</id><snippet>multidict</snippet></ROW><ROW><id>12174731</id><snippet>web.input()</snippet></ROW><ROW><id>12174731</id><snippet>obj</snippet></ROW><ROW><id>12174731</id><snippet>form = my_form(None, web.input())</snippet></ROW><ROW><id>12174813</id><snippet>E[X^2] - (E[X])^2
</snippet></ROW><ROW><id>12174813</id><snippet>E[X]</snippet></ROW><ROW><id>12174813</id><snippet>E[X^2]</snippet></ROW><ROW><id>12174813</id><snippet>csc_matrix</snippet></ROW><ROW><id>12174813</id><snippet>mean</snippet></ROW><ROW><id>12174813</id><snippet>(E[X])^2</snippet></ROW><ROW><id>12174813</id><snippet>mean</snippet></ROW><ROW><id>12174870</id><snippet>ParentResourceListView.as_view(
    content_type=ContentType.objects.get_for_model(ParentResource).id)
</snippet></ROW><ROW><id>12174870</id><snippet>class ChildResourceMixin(object):
    content_type = None
</snippet></ROW><ROW><id>12174925</id><snippet>^\[(\d+)\]</snippet></ROW><ROW><id>12174925</id><snippet>[\1]\r\nvmexten=\1</snippet></ROW><ROW><id>12174925</id><snippet>\1</snippet></ROW><ROW><id>12174925</id><snippet>$1</snippet></ROW><ROW><id>12175320</id><snippet>def threads_over_lists(fn):
    def wrapped(x, *args, **kwargs):
        if isinstance(x, list):
            return [fn(e, *args, **kwargs) for e in x]
        return fn(x, *args, **kwargs)
    return wrapped
</snippet></ROW><ROW><id>12175320</id><snippet>@threads_over_lists</snippet></ROW><ROW><id>12175320</id><snippet>@threads_over_lists
def add_1(val):
    return val + 1

print add_1(10)
print add_1([10, 15, 20])

# if there are multiple arguments, threads only over the first element,
# keeping others the same

@threads_over_lists
def add_2_numbers(x, y):
    return x + y

print add_2_numbers(1, 10)
print add_2_numbers([1, 2, 3], 10)
</snippet></ROW><ROW><id>12175530</id><snippet>url(r'^wiki/(?P&lt;page_name&gt;[^/]+)/$','wiki.views.view_page')

something.com/wiki/2   #here 2 is the second parameter which is like

def view_page(request, 2)
</snippet></ROW><ROW><id>12175530</id><snippet>url(r'^wiki/$', 'wiki.views.view_page'),

something.com/wiki/  #The second parameter is not passed to the function
</snippet></ROW><ROW><id>12175814</id><snippet>{% load custom_tag %}
&lt;ul&gt;
{% for b in Bs %}
    {% autoescape off %}
        &lt;li&gt;in_stock for {{ A1 }} and {{ b }} : {{ A1|through:b }}&lt;/li&gt;
    {% endautoescape %}
&lt;/ul&gt;
{% endfor %}
</snippet></ROW><ROW><id>12175814</id><snippet>register = template.Library()


def through(A1, b):
    t = "%s" % (C.objects.get(b=b, a=A1).in_stock)
    return t


register.filter(through)
</snippet></ROW><ROW><id>12176144</id><snippet>import os, sys
newpath = 'C:\Program Files\test'
with open(open('folders.txt') as f:
  for line in f:
    newdir = os.path.join(newpath, line.strip())
    try:
      os.makedirs(newdir)
    except OSError:  # if makedirs() failed
      sys.stderr.write("ERR: Could not create %s\n" % newdir)
      pass  # continue with next line
</snippet></ROW><ROW><id>12176144</id><snippet>os.path.join()</snippet></ROW><ROW><id>12176144</id><snippet>os.makedirs()</snippet></ROW><ROW><id>12176144</id><snippet>os.makedirs()</snippet></ROW><ROW><id>12176144</id><snippet>OSError</snippet></ROW><ROW><id>12176268</id><snippet>~</snippet></ROW><ROW><id>12176268</id><snippet>[mpenning@tsunami public_html]$ sudo cat /etc/apache2/sites-available/wsgi_test
&lt;VirtualHost *:80&gt;
    ServerName wsgihost
    DocumentRoot /home/mpenning/public_html
    WSGIScriptAlias / /home/mpenning/public_html/test.wsgi
&lt;/VirtualHost&gt;
[mpenning@tsunami public_html]$
</snippet></ROW><ROW><id>12176268</id><snippet>/etc/hosts</snippet></ROW><ROW><id>12176268</id><snippet>[mpenning@tsunami public_html]$ grep wsgihost /etc/hosts
127.0.1.1       tsunami.foo.net  tsunami wsgihost
[mpenning@tsunami public_html]$
</snippet></ROW><ROW><id>12176268</id><snippet>[mpenning@tsunami public_html]$ wget http://wsgihost/
--2012-08-29 05:50:26--  http://wsgihost/
Resolving wsgihost... 127.0.1.1
Connecting to wsgihost|127.0.1.1|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 12 [text/plain]
Saving to: âindex.html.3â

100%[======================================&gt;] 12          --.-K/s   in 0s

2012-08-29 05:50:26 (1.48 MB/s) - âindex.html.3â

[mpenning@tsunami public_html]$ cat index.html
Hello World![mpenning@tsunami public_html]$ #  &lt;------
</snippet></ROW><ROW><id>12176484</id><snippet>class line :
    points = []
</snippet></ROW><ROW><id>12176484</id><snippet>points</snippet></ROW><ROW><id>12176484</id><snippet>line1</snippet></ROW><ROW><id>12176484</id><snippet>line2</snippet></ROW><ROW><id>12176484</id><snippet>points</snippet></ROW><ROW><id>12176484</id><snippet>def __init__(self) :
    self.points = []
</snippet></ROW><ROW><id>12176484</id><snippet>def changename(self, name) :
    self.name = name
</snippet></ROW><ROW><id>12176484</id><snippet>self.name = name</snippet></ROW><ROW><id>12176484</id><snippet>def add(self, point) :
    self.points = self.points + [point]
</snippet></ROW><ROW><id>12176517</id><snippet>('iso_8859_5')</snippet></ROW><ROW><id>12176517</id><snippet>s = "�'ам интересна информация"
</snippet></ROW><ROW><id>12176517</id><snippet>&gt;&gt;&gt; s[0]
'\xef'
&gt;&gt;&gt; ord(s[0])
239
</snippet></ROW><ROW><id>12176517</id><snippet>&gt;&gt;&gt; from encodings import aliases
&gt;&gt;&gt; print(aliases.aliases.keys())
&gt;&gt;&gt; print s.decode('latin4')
īŋŊ'Đ°Đŧ Đ¸ĐŊŅĐĩŅĐĩŅĐŊĐ° Đ¸ĐŊŅĐžŅĐŧĐ°ŅĐ¸Ņ
&gt;&gt;&gt; print s.decode('iso_8859_5')
яПН'аАаМ аИаНбаЕбаЕбаНаА аИаНбаОбаМаАбаИб
&gt;&gt;&gt; print s.decode('utf_16')
뿯➽냐볐퀠킸톽킂통킀통킁킽₰룐뷐蓑뻐胑볐냐蛑룐近
&gt;&gt;&gt; print s.decode('utf_8')
�'ам интересна информация
</snippet></ROW><ROW><id>12176517</id><snippet>&gt;&gt;&gt; uniVersion = "�'ам интересна информация".decode('utf-8')
&gt;&gt;&gt; print uniVersion
�'ам интересна информация
</snippet></ROW><ROW><id>12176517</id><snippet>&gt;&gt;&gt; uniVersion = unicode("�'ам интересна информация", 'utf-8')
</snippet></ROW><ROW><id>12176701</id><snippet>pip install feedparser
</snippet></ROW><ROW><id>12176987</id><snippet># Function to be tested
def callSleep(timer):
    timer.sleep(5)

# Example usage
def main():
    import time
    timer = time

    callSleep(timer)

# Example test
def testFunction():


    class MockTimer:
        numCalled = 0
        withValue = 0
        def sleep(self, val):
            self.numCalled += 1
            self.withValue = val

    mockTimer = MockTimer()

    callSleep(mockTimer)

    print "Num called:", mockTimer.numCalled, "with value", mockTimer.withValue
</snippet></ROW><ROW><id>12177033</id><snippet>stdin</snippet></ROW><ROW><id>12177033</id><snippet>&gt;&gt;&gt; x = ['6d52f\n']
&gt;&gt;&gt; x[0].rstrip('\n')
'6d52f'
</snippet></ROW><ROW><id>12178253</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>12178253</id><snippet>open</snippet></ROW><ROW><id>12178253</id><snippet>sys.argv[-1]</snippet></ROW><ROW><id>12178253</id><snippet>argparse</snippet></ROW><ROW><id>12178395</id><snippet>code_postal</snippet></ROW><ROW><id>12178395</id><snippet>.filter(code_postal='&lt;django.forms.fields.CharField object at 0x26bf550&gt;').
</snippet></ROW><ROW><id>12178395</id><snippet># make sure that lst_ville is not an empty queryset
ville_source = forms.ModelChoiceField(queryset=lst_ville,label='Choisissez votre ville source')
</snippet></ROW><ROW><id>12178512</id><snippet>tweets=api.GetSearch("Ghaza",per_page=100,page=1)
for t in tweets:
  print t.text
</snippet></ROW><ROW><id>12178512</id><snippet>$ pydoc twitter.Status
$ pydoc twitter.User
$ pydoc twitter.DirectMessage
</snippet></ROW><ROW><id>12178589</id><snippet>import nxpy.svn.svn

svn = nxpy.svn.svn.Svn()
svn.info()
</snippet></ROW><ROW><id>12178589</id><snippet>nxpy.svn.svn.Info</snippet></ROW><ROW><id>12178759</id><snippet>__builtins__</snippet></ROW><ROW><id>12178759</id><snippet>value = getattr(__builtins__, type_name)(value)
</snippet></ROW><ROW><id>12178890</id><snippet>from itertools import product

def build_config(db,flag,authType,userPass):
    config = dict(database=db,useExisting=flag)
    config['userCredentials'] = {
        'authType': authType, 
        'user': userPass[0], 
        'password': userPass[1]
    }
    if authType == 'database':
        config['userCredentials'].update(
            dict(extra=1,param=2))
    return config

database = ['sqlite','mysql','oracle']
useExisting = [True, False]
authType = ['windows','database']
userPass = [('testing1','pass1'),('testing2','pass2')]

for options in product(database,useExisting,authType,userPass):
    config = build_config(*options)
    print config
</snippet></ROW><ROW><id>12179090</id><snippet>url</snippet></ROW><ROW><id>12179090</id><snippet>'cache.short_term.url': '127.0.0.1.11211',
</snippet></ROW><ROW><id>12179090</id><snippet>:</snippet></ROW><ROW><id>12179090</id><snippet>port</snippet></ROW><ROW><id>12179090</id><snippet>&gt;&gt;&gt; host = '127.0.0.1.11211'
&gt;&gt;&gt; re.match(r'^(?P&lt;host&gt;[^:]+)(:(?P&lt;port&gt;[0-9]+))?$', host).groupdict()
{'host': '127.0.0.1.11211', 'port': None}
</snippet></ROW><ROW><id>12179090</id><snippet>cache_opts</snippet></ROW><ROW><id>12179090</id><snippet>'cache.short_term.url': '127.0.0.1:11211',
</snippet></ROW><ROW><id>12179090</id><snippet>&gt;&gt;&gt; host = '127.0.0.1:11211'
&gt;&gt;&gt; re.match(r'^(?P&lt;host&gt;[^:]+)(:(?P&lt;port&gt;[0-9]+))?$', host).groupdict()
{'host': '127.0.0.1', 'port': '11211'}
</snippet></ROW><ROW><id>12179221</id><snippet>httplib2</snippet></ROW><ROW><id>12179221</id><snippet>requests</snippet></ROW><ROW><id>12179221</id><snippet>requests.get('http://www.example.com/', auth=('user', 'pass'))
</snippet></ROW><ROW><id>12179649</id><snippet>/</snippet></ROW><ROW><id>12179649</id><snippet>/template</snippet></ROW><ROW><id>12179649</id><snippet>action</snippet></ROW><ROW><id>12179649</id><snippet>'/template'</snippet></ROW><ROW><id>12179724</id><snippet>keyDown()</snippet></ROW><ROW><id>12179724</id><snippet>ord()</snippet></ROW><ROW><id>12179724</id><snippet>getch()</snippet></ROW><ROW><id>12179724</id><snippet>chr()</snippet></ROW><ROW><id>12179724</id><snippet>from msvcrt import getch
while True:
    key = ord(getch())
    if key == 27: #ESC
        break
    elif key == 13: #Enter
        select()
    elif key == 224: #Special keys (arrows, f keys, ins, del, etc.)
        key = ord(getch())
        if key == 80: #Down arrow
            moveDown()
        elif key == 72: #Up arrow
            moveUp()
</snippet></ROW><ROW><id>12179724</id><snippet>from msvcrt import getch
while True:
    print(ord(getch()))
</snippet></ROW><ROW><id>12179752</id><snippet>classmethod</snippet></ROW><ROW><id>12179752</id><snippet>staticmethod</snippet></ROW><ROW><id>12179752</id><snippet>classmethod</snippet></ROW><ROW><id>12179752</id><snippet>staticmethod</snippet></ROW><ROW><id>12179752</id><snippet>class Date(object):

    day = 0
    month = 0
    year = 0

    def __init__(self, day=0, month=0, year=0):
        self.day = day
        self.month = month
        self.year = year
</snippet></ROW><ROW><id>12179752</id><snippet>__init__</snippet></ROW><ROW><id>12179752</id><snippet>instancemethod</snippet></ROW><ROW><id>12179752</id><snippet>self</snippet></ROW><ROW><id>12179752</id><snippet>classmethod</snippet></ROW><ROW><id>12179752</id><snippet>Date</snippet></ROW><ROW><id>12179752</id><snippet>Date</snippet></ROW><ROW><id>12179752</id><snippet>day, month, year = map(int, string_date.split('-'))
date1 = Date(day, month, year)
</snippet></ROW><ROW><id>12179752</id><snippet>classmethod</snippet></ROW><ROW><id>12179752</id><snippet>    @classmethod
    def from_string(cls, date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        date1 = cls(day, month, year)
        return date1

date2 = Date.from_string('11-09-2012')
</snippet></ROW><ROW><id>12179752</id><snippet>cls</snippet></ROW><ROW><id>12179752</id><snippet>Date</snippet></ROW><ROW><id>12179752</id><snippet>from_string</snippet></ROW><ROW><id>12179752</id><snippet>staticmethod</snippet></ROW><ROW><id>12179752</id><snippet>classmethod</snippet></ROW><ROW><id>12179752</id><snippet>classmethod</snippet></ROW><ROW><id>12179752</id><snippet>instancemethod</snippet></ROW><ROW><id>12179752</id><snippet>Date</snippet></ROW><ROW><id>12179752</id><snippet>staticmethod</snippet></ROW><ROW><id>12179752</id><snippet>    @staticmethod
    def is_date_valid(date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        return day &lt;= 31 and month &lt;= 12 and year &lt;= 3999
</snippet></ROW><ROW><id>12179752</id><snippet>staticmethod</snippet></ROW><ROW><id>12179827</id><snippet>import signal
import os

os.kill(0, signal.CTRL_C_EVENT)
</snippet></ROW><ROW><id>12180260</id><snippet>-threads</snippet></ROW><ROW><id>12180260</id><snippet>swig -threads -python test.i
</snippet></ROW><ROW><id>12180260</id><snippet>PyObject *_wrap_Foo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *result = 0 ;

  if (!PyArg_ParseTuple(args,(char *)":Foo")) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (PyObject *)Foo();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}

static PyObject* Foo()
{
    PyErr_SetNone(MyException);
    return NULL;
}
</snippet></ROW><ROW><id>12180260</id><snippet>static PyObject* Foo()
{
    SWIG_Python_SetErrorObj(MyException, Py_None);
    return NULL;
}
</snippet></ROW><ROW><id>12180260</id><snippet>static PyObject* Foo()
{
    SWIG_PYTHON_THREAD_BEGIN_BLOCK; 

    PyErr_SetNone(MyException);

    SWIG_PYTHON_THREAD_END_BLOCK;
    return NULL;
}
</snippet></ROW><ROW><id>12180756</id><snippet>*</snippet></ROW><ROW><id>12180756</id><snippet>import random
num_lines = 10

# read the contents of your file into a list
with open('master.txt', 'r') as f:
  lines = [L for L in f if L.strip()]  # store non-empty lines

# get the line numbers of lines that are not marked
candidates = [i for i, L in enumerate(lines) if not L.startswith("*")] 

# if there are too few candidates, simply select all
if len(candidates) &gt; num_lines:
  selected = random.sample(candidates, num_lines) 
else:
  selected = candidates  # choose all

# print the lines that were selected
print "".join(lines[i] for i in selected)

# Mark selected lines in original content
for i in selected:
  lines[i] = "*%s" % lines[i]  # prepend "*" to selected lines

# overwrite the file with modified content
with open('master.txt', 'w') as f:
  f.write("".join(lines))
</snippet></ROW><ROW><id>12180810</id><snippet>for d in destination[:]:
</snippet></ROW><ROW><id>12181252</id><snippet>name = num.getElementsByTagName('author')[0].firstChild.nodeValue
#xml node-^
#function call -------------------------^
#list indexing ----------------------------^
#attribute access -------------------------------------^
</snippet></ROW><ROW><id>12181252</id><snippet>&lt;author&gt;</snippet></ROW><ROW><id>12181252</id><snippet>num</snippet></ROW><ROW><id>12181252</id><snippet>firstChild</snippet></ROW><ROW><id>12181252</id><snippet>nodeValue</snippet></ROW><ROW><id>12181252</id><snippet>authors = num.getElementsByTagName('author')
if len(authors) &gt; 0:
  name = authors[0].firstChild.nodeValue
</snippet></ROW><ROW><id>12181468</id><snippet>\u0410...</snippet></ROW><ROW><id>12181468</id><snippet>\\u0410....</snippet></ROW><ROW><id>12181468</id><snippet>f = open('b','r')
for line in f:
    line.replace('\u','\\u')
    print line.decode('unicode-escape')
</snippet></ROW><ROW><id>12181697</id><snippet>COPY</snippet></ROW><ROW><id>12181697</id><snippet>STDIN</snippet></ROW><ROW><id>12182035</id><snippet>yield</snippet></ROW><ROW><id>12182035</id><snippet>#!/usr/bin/python3

nx, ny = 4, 5
values = [1,2,3,4,5,6,7,8,9,10,12,18,20,21,24,27,30,35,36,40]
# grid[x][y] so it is a list of columns (prints misleadingly!)
grid = [[0 for _ in range(ny)] for _ in range(nx)]
# cache these to avoid re-calculating
xy_moves = {}
debug = False

def neighbours(grid, x, y):
    'coordinates of vertical/horizontal neighbours'
    for (xx, yy) in [(x-1,y),(x+1,y),(x,y-1),(x,y+1)]:
        if xx &gt; -1 and xx &lt; nx and yy &gt; -1 and yy &lt; ny:
            yield xx, yy

def filled_neighbours(grid, x, y):
    'filter "neighbours" to give only filled cells'
    return filter(lambda xy: grid[xy[0]][xy[1]], neighbours(grid, x, y))

def count_neighbours(grid, x, y):
    'use this to find most-constrained location'
    return sum(1 for _ in filled_neighbours(grid, x, y))

def next_xy(grid, depth):
    '''given a certain depth in the search, where should we move next?  
       choose a place with lots of neighbours so that we have good 
       constraints (and so can reject bad moves)'''
    if depth not in xy_moves:
        best, x, y = 0, nx // 2, ny // 2 # default to centre
        for xx in range(nx):
            for yy in range(ny):
                if not grid[xx][yy]:
                    count = count_neighbours(grid, xx, yy)
                    if count &gt; best:
                        best, x, y = count, xx, yy
        xy_moves[depth] = (x, y)
        if debug: print('next move for %d is %d,%d' % (depth, x, y))
    return xy_moves[depth]

def drop_value(value, values):
    'remove value from the values'
    return [v for v in values if v != value]

def copy_grid(grid, x, y, value):
    'copy grid, replacing the value at x,y'
    return [[value if j == y else grid[i][j] for j in range(ny)]
            if x == i else grid[i]
            for i in range(nx)]

def move_ok(grid, x, y, value):
    'are all neighbours multiples?'
    for (xx, yy) in filled_neighbours(grid, x, y):
        g = grid[xx][yy]
        if (g &gt; value and g % value) or (g &lt; value and value % g):
            if debug: 
                print('fail: %d at %d,%d in %s' % (value, x, y, grid))
            return False
    return True

def search(grid, values, depth=0):
    'search over all values, backtracking on failure'
    if values:
        (x, y) = next_xy(grid, depth)
        for value in values:
            if move_ok(grid, x, y, value):
                if debug: print('add %d to %d,%d' % (value, x, y))
                for result in search(copy_grid(grid, x, y, value),
                                     drop_value(value, values), 
                                     depth+1):
                    yield result
    else:
        yield grid


# run the search, knowing that (2,2) (which is (1,1) for zero-indexing)
# has the value 10.
for result in search(copy_grid(grid, 1, 1, 10), drop_value(10, values)):
    print(result)

# how many solutions in total?
#xy_moves = {} # reset cache
#for (n, solution) in enumerate(search(grid, values)):
#    print('%d: %s' % (n, solution))
</snippet></ROW><ROW><id>12182035</id><snippet>next_xy()</snippet></ROW><ROW><id>12182035</id><snippet>xy_moves</snippet></ROW><ROW><id>12182035</id><snippet>move_ok</snippet></ROW><ROW><id>12182035</id><snippet>&gt; time ./grid.py 
[[4, 20, 5, 35, 7], [40, 10, 30, 1, 21], [8, 2, 6, 18, 3], [24, 12, 36, 9, 27]]
real    0m5.909s
</snippet></ROW><ROW><id>12182136</id><snippet>QLineEdit</snippet></ROW><ROW><id>12182136</id><snippet>text</snippet></ROW><ROW><id>12182136</id><snippet>text = dlg.ui.lineEdit.text()
</snippet></ROW><ROW><id>12182136</id><snippet>QString</snippet></ROW><ROW><id>12182136</id><snippet>"%s" % text</snippet></ROW><ROW><id>12182176</id><snippet>param1 = 'new'
</snippet></ROW><ROW><id>12182176</id><snippet>print param1
</snippet></ROW><ROW><id>12182176</id><snippet>param1</snippet></ROW><ROW><id>12182176</id><snippet>def with_wrapper(param1):
    def dummy_wrapper(fn):
        nonlocal param1
        print param1
        param1 = 'new'
        fn(param1)
    return dummy_wrapper
</snippet></ROW><ROW><id>12182176</id><snippet>def with_wrapper(param1_list):
    def dummy_wrapper(fn):
        print param1_list[0]
        param1_list[0] = 'new'   # mutate the value inside the list
        fn(param1_list[0])
    return dummy_wrapper

def dummy():
    @with_wrapper(['param1'])   # &lt;--- Note we pass a list here
    def implementation(param2):
        print param2
</snippet></ROW><ROW><id>12182288</id><snippet>&gt;&gt;&gt; l=range(8)
&gt;&gt;&gt; l
[0, 1, 2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; l.pop(4)                    # item at index 4
4
&gt;&gt;&gt; l
[0, 1, 2, 3, 5, 6, 7]
&gt;&gt;&gt; l.pop(-1)                   # item at end - equivalent to pop()
7
&gt;&gt;&gt; l
[0, 1, 2, 3, 5, 6]
&gt;&gt;&gt; l.pop(-2)                   # one left of the end 
5
&gt;&gt;&gt; l
[0, 1, 2, 3, 6]
&gt;&gt;&gt; l.pop()                     # always the end item
6
&gt;&gt;&gt; l
[0, 1, 2, 3]
</snippet></ROW><ROW><id>12182288</id><snippet>&gt;&gt;&gt; l=[]
&gt;&gt;&gt; try:
...    i=l.pop(5)
... except IndexError:
...    print "sorry -- can't pop that"
... 
sorry -- can't pop that
</snippet></ROW><ROW><id>12182415</id><snippet>\w</snippet></ROW><ROW><id>12182415</id><snippet>\s</snippet></ROW><ROW><id>12182415</id><snippet>!</snippet></ROW><ROW><id>12182780</id><snippet>python setup.py develop</snippet></ROW><ROW><id>12182780</id><snippet>% pip install -e .
</snippet></ROW><ROW><id>12182780</id><snippet>setup.py</snippet></ROW><ROW><id>12182780</id><snippet>develop</snippet></ROW><ROW><id>12182818</id><snippet>list</snippet></ROW><ROW><id>12182818</id><snippet>list = map(str.strip, list) 
</snippet></ROW><ROW><id>12182818</id><snippet>str.strip</snippet></ROW><ROW><id>12182818</id><snippet>list</snippet></ROW><ROW><id>12182818</id><snippet>list</snippet></ROW><ROW><id>12182898</id><snippet>import os
os.chdir('d:/py/xml/')


from lxml import etree
#from io import StringIO

#----------------------------------------------------------------------
def parseXML(xmlFile):
    """
    Parse the xml
    """
    f = open(xmlFile)
    #xml = f.read()
    #f.close()

    #tree = etree.parse(StringIO(xml))
    context = etree.iterparse(f)
    for action, elem in context:
        if not elem.text:
            text = 'None'
        else:
            text = elem.text
        print (elem.tag + ' =&gt; ' + text)

if __name__ == "__main__":
    parseXML("example.xml")
</snippet></ROW><ROW><id>12183010</id><snippet>ct = CourseTemplate.objects.all()[0]
print ct.pk
# some original pk

ct.pk = None
ct.save()
print ct.pk
# will be a new auto-incremented 
</snippet></ROW><ROW><id>12183177</id><snippet>(1+0.05) * x0[j]</snippet></ROW><ROW><id>12183177</id><snippet>j</snippet></ROW><ROW><id>12183177</id><snippet>x0[j]</snippet></ROW><ROW><id>12183460</id><snippet>df['C'] = df['A'] * 1.0 / df['B']
</snippet></ROW><ROW><id>12183462</id><snippet>satchmo_store.shop.SSLMiddleware.SSLRedirect</snippet></ROW><ROW><id>12183462</id><snippet>urlpatterns = patterns('some_site.some_app.views',
    (r'^test/secure/$','test_secure',{'SSL':True}),
     )
</snippet></ROW><ROW><id>12183462</id><snippet>urlpatterns = patterns('some_site.some_app.views',
    (r'^test/unsecure1/$','test_unsecure',{'SSL':False}),
    (r'^test/unsecure2/$','test_unsecure'),
     )
</snippet></ROW><ROW><id>12183462</id><snippet>settings.py</snippet></ROW><ROW><id>12183468</id><snippet>import PIL
from PIL import Image
from matplotlib import pyplot as plt

im = Image.open('./color_gradient.png')  
w, h = im.size  
colors = im.getcolors(w*h)

def hexencode(rgb):
    r=rgb[0]
    g=rgb[1]
    b=rgb[2]
    return '#%02x%02x%02x' % (r,g,b)

for idx, c in enumerate(colors):
    plt.bar(idx, c[0], color=hexencode(c[1]))

plt.show()
</snippet></ROW><ROW><id>12183468</id><snippet>for idx, c in enumerate(colors):
        plt.bar(idx, c[0], color=hexencode(c[1]),edgecolor=hexencode(c[1]))
</snippet></ROW><ROW><id>12183468</id><snippet>    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1   23.424   23.424   24.672   24.672 {built-in method mainloop}
   460645    8.626    0.000    8.626    0.000 {numpy.core.multiarray.array}
    22941    7.909    0.000   18.447    0.001 C:\Python27\lib\site-packages\matplotlib\artist.py:805(get_aliases)
  6814123    3.900    0.000    3.900    0.000 {method 'startswith' of 'str' objects}
    22941    2.244    0.000    2.244    0.000 {dir}
   276714    2.140    0.000    2.140    0.000 C:\Python27\lib\weakref.py:243(__init__)
  4336835    2.029    0.000    2.029    0.000 {getattr}
  1927044    1.962    0.000    3.027    0.000 C:\Python27\lib\site-packages\matplotlib\artist.py:886(is_alias)
   114811    1.852    0.000    3.883    0.000 C:\Python27\lib\site-packages\matplotlib\colors.py:317(to_rgba)
    69559    1.653    0.000    2.841    0.000 C:\Python27\lib\site-packages\matplotlib\path.py:86(__init__)
    68869    1.425    0.000   11.700    0.000 C:\Python27\lib\site-packages\matplotlib\patches.py:533(_update_patch_transform)
   161205    1.316    0.000    1.618    0.000 C:\Python27\lib\site-packages\matplotlib\cbook.py:381(is_string_like)
        1    1.232    1.232    1.232    1.232 {gc.collect}
   344698    1.116    0.000    1.513    0.000 C:\Python27\lib\site-packages\matplotlib\cbook.py:372(iterable)
    22947    1.111    0.000    3.768    0.000 {built-in method draw_path}
   276692    1.024    0.000    3.164    0.000 C:\Python27\lib\site-packages\matplotlib\transforms.py:80(__init__)
        2    1.021    0.510    1.801    0.900 C:\Python27\lib\site-packages\matplotlib\colors.py:355(to_rgba_array)
    22947    0.818    0.000   14.677    0.001 C:\Python27\lib\site-packages\matplotlib\patches.py:371(draw)
183546/183539    0.793    0.000    2.030    0.000 C:\Python27\lib\site-packages\matplotlib\units.py:117(get_converter)
   138006    0.756    0.000    1.267    0.000 C:\Python27\lib\site-packages\matplotlib\transforms.py:126(set_children)
</snippet></ROW><ROW><id>12183468</id><snippet>ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.001    0.001   84.923   84.923 C:\Python27\test.py:23(imageProcess)
        1    0.013    0.013   44.079   44.079 C:\Python27\lib\site-packages\matplotlib\pyplot.py:2080(bar)
        1    0.286    0.286   43.825   43.825 C:\Python27\lib\site-packages\matplotlib\axes.py:4556(bar)
        1    0.000    0.000   40.533   40.533 C:\Python27\lib\site-packages\matplotlib\pyplot.py:123(show)
        1    0.000    0.000   40.533   40.533 C:\Python27\lib\site-packages\matplotlib\backend_bases.py:69(__call__)
    22943    0.171    0.000   24.964    0.001 C:\Python27\lib\site-packages\matplotlib\patches.py:508(__init__)
        1    0.000    0.000   24.672   24.672 C:\Python27\lib\site-packages\matplotlib\backends\backend_tkagg.py:68(mainloop)
        1    0.000    0.000   24.672   24.672 C:\Python27\lib\lib-tk\Tkinter.py:323(mainloop)
        1   23.424   23.424   24.672   24.672 {built-in method mainloop}
    22947    0.499    0.000   24.654    0.001 C:\Python27\lib\site-packages\matplotlib\patches.py:55(__init__)
    22941    0.492    0.000   20.180    0.001 C:\Python27\lib\site-packages\matplotlib\artist.py:1136(setp)
    22941    0.135    0.000   18.730    0.001 C:\Python27\lib\site-packages\matplotlib\artist.py:788(__init__)
    22941    7.909    0.000   18.447    0.001 C:\Python27\lib\site-packages\matplotlib\artist.py:805(get_aliases)
    72/65    0.071    0.001   17.118    0.263 {built-in method call}
    24/12    0.000    0.000   17.095    1.425 C:\Python27\lib\lib-tk\Tkinter.py:1405(__call__)
    22941    0.188    0.000   16.647    0.001 C:\Python27\lib\site-packages\matplotlib\axes.py:1476(add_patch)
        1    0.000    0.000   15.861   15.861 C:\Python27\lib\site-packages\matplotlib\backends\backend_tkagg.py:429(show)
        1    0.000    0.000   15.861   15.861 C:\Python27\lib\lib-tk\Tkinter.py:909(update)
        1    0.000    0.000   15.846   15.846 C:\Python27\lib\site-packages\matplotlib\backends\backend_tkagg.py:219(resize)
        1    0.000    0.000   15.503   15.503 C:\Python27\lib\site-packages\matplotlib\backends\backend_tkagg.py:238(draw)
</snippet></ROW><ROW><id>12183507</id><snippet>functools.partial</snippet></ROW><ROW><id>12183507</id><snippet>&gt;&gt;&gt; import functools
&gt;&gt;&gt; import operator
&gt;&gt;&gt; add_3 = functools.partial(operator.add,3)
&gt;&gt;&gt; add_3(2)
5
&gt;&gt;&gt; add_3(7)
10
</snippet></ROW><ROW><id>12183507</id><snippet>my_series.apply((lambda x: your_func(a,b,c,d,...,x)))
</snippet></ROW><ROW><id>12183507</id><snippet>partial</snippet></ROW><ROW><id>12184112</id><snippet>cursor.execute(
    'INSERT INTO users (email, password, password_hint, state, last_saved) ' +
    'VALUES (?, ?, ?, ?, DATETIME("now"));',
    (get_cgi('email'), password, get_cgi('password_hint'), get_cgi('current')))
</snippet></ROW><ROW><id>12184247</id><snippet>paramstyle</snippet></ROW><ROW><id>12184247</id><snippet>paramstyle</snippet></ROW><ROW><id>12184247</id><snippet>import sqlite3

paramstyle = sqlite3.paramstyle

if paramstyle == 'qmark':
    ph = "?"
elif paramstyle == 'format':
    ph = "%s"
else:
    raise Exception("Unexpected paramstyle: %s" % paramstyle)

sql = "INSERT INTO foo VALUES (%(ph)s, %(ph)s, %(ph)s)" % { "ph" : ph }
</snippet></ROW><ROW><id>12184273</id><snippet>import os
open(os.path.join(os.path.expanduser('~'),'rest/of/path/to.file'))
</snippet></ROW><ROW><id>12184631</id><snippet>urllib.parse</snippet></ROW><ROW><id>12184631</id><snippet>parse</snippet></ROW><ROW><id>12184631</id><snippet>urllib.parse</snippet></ROW><ROW><id>12184631</id><snippet>urlparse</snippet></ROW><ROW><id>12184694</id><snippet>python.rb</snippet></ROW><ROW><id>12184694</id><snippet>sha1</snippet></ROW><ROW><id>12184743</id><snippet>sec</snippet></ROW><ROW><id>12184743</id><snippet>In [26]: import pandas as pd

In [27]: pd.Index(datetime(1990, 1, 1) + sec * pd.offsets.Second())
Out[27]:
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[1990-01-01 00:14:40, ..., 1990-04-26 17:26:52]
Length: 10000, Freq: None, Timezone: None
</snippet></ROW><ROW><id>12184769</id><snippet>scan</snippet></ROW><ROW><id>12184769</id><snippet>query</snippet></ROW><ROW><id>12184845</id><snippet>#!/usr/bin/env python

import sys
from select import select

def main(argv):
    timeout = 3
    prompt = '&gt; '
    max_chars = 3

    # set raw input mode if relevant
    # it is necessary to make stdin not wait for enter
    try:
        import tty, termios

        prev_flags = termios.tcgetattr(sys.stdin.fileno())
        tty.setraw(sys.stdin.fileno())
    except ImportError:
        prev_flags = None

    buf = ''
    sys.stderr.write(prompt)

    while True: # main loop
        rl, wl, xl = select([sys.stdin], [], [], timeout)
        if rl: # some input
            c = sys.stdin.read(1)
            # you will probably want to add some special key support
            # for example stop on enter:
            if c == '\n':
                break

            buf += c
            # auto-output is disabled as well, so you need to print it
            sys.stderr.write(c)

            # stop if N characters
            if len(buf) &gt;= max_chars:
                break
        else:
            # timeout
            break

    # restore non-raw input
    if prev_flags is not None:
        termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, prev_flags)
    # and print newline
    sys.stderr.write('\n')

    # now buf contains your input
    # ...

if __name__ == "__main__":
    main(sys.argv[1:])
</snippet></ROW><ROW><id>12184845</id><snippet>curses</snippet></ROW><ROW><id>12184845</id><snippet>end_time</snippet></ROW><ROW><id>12184845</id><snippet>end_time - current_time</snippet></ROW><ROW><id>12184845</id><snippet>select()</snippet></ROW><ROW><id>12184873</id><snippet>~/.virtualenvs</snippet></ROW><ROW><id>12184873</id><snippet>mkvirtualenv djangoproject
</snippet></ROW><ROW><id>12184873</id><snippet>workon djangoproject
</snippet></ROW><ROW><id>12184873</id><snippet>pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>12184873</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>12184977</id><snippet>full_query = None
for query in query_terms:
    q = Q(name__icontains=query) | Q(building__name__icontains=query)
    if full_query is None:
        full_query = q
    else:
        full_query = full_query &amp; q
</snippet></ROW><ROW><id>12185013</id><snippet>try:
    import sysconfig
    HAS_SYSCONFIG = True
except ImportError:
    HAS_SYSCONFIG = False

...

if HAS_SYSCONFIG:
    # sysconfig code here
else:
    # compatibility code here
</snippet></ROW><ROW><id>12185013</id><snippet>sysconfig</snippet></ROW><ROW><id>12185223</id><snippet>re_natural = re.compile('[0-9]+|[^0-9]+')

def natural_key(s):
    return [(1, int(c)) if c.isdigit() else (0, c.lower()) for c in re_natural.findall(s)] + [s]

for case in test_cases:
    print case[1]
    print sorted(case[0], key=natural_key)

['a', 'b', 'c']
['a', 'b', 'c']
['A', 'b', 'C']
['A', 'b', 'C']
['a', 'B', 'r', '0', '9']
['a', 'B', 'r', '0', '9']
['a1', 'a2', 'a100', '1a', '10a']
['a1', 'a2', 'a100', '1a', '10a']
['alp1', 'alp2', 'alp10', 'ALP11', 'alp100', 'GAM', '1', '2', '100']
['alp1', 'alp2', 'alp10', 'ALP11', 'alp100', 'GAM', '1', '2', '100']
['A', 'a', 'b', 'r', '0', '9']
['A', 'a', 'b', 'r', '0', '9']
['ABc', 'Abc', 'abc']
['ABc', 'Abc', 'abc']
</snippet></ROW><ROW><id>12185223</id><snippet>def natural_key2(s):
    parts = re_natural.findall(s)
    natural = [(1, int(c)) if c.isdigit() else (0, c.lower()) for c in parts]
    ties_alpha = [c for c in parts if not c.isdigit()]
    ties_numeric = [c for c in parts if c.isdigit()]
    return natural + [(-1,)] + ties_alpha + ties_numeric
</snippet></ROW><ROW><id>12185223</id><snippet>['A', 'a', 'A0', 'a0', '0', '00', '0A', '00A', '0a', '00a']
</snippet></ROW><ROW><id>12185246</id><snippet>X</snippet></ROW><ROW><id>12185246</id><snippet>X.T</snippet></ROW><ROW><id>12185246</id><snippet>X.T</snippet></ROW><ROW><id>12185246</id><snippet>X</snippet></ROW><ROW><id>12185315</id><snippet>dict</snippet></ROW><ROW><id>12185315</id><snippet>globals</snippet></ROW><ROW><id>12185315</id><snippet>GLOBAL_LOAD</snippet></ROW><ROW><id>12185315</id><snippet>z</snippet></ROW><ROW><id>12185315</id><snippet>b</snippet></ROW><ROW><id>12185315</id><snippet>globals</snippet></ROW><ROW><id>12185315</id><snippet>exec()</snippet></ROW><ROW><id>12185315</id><snippet>PyObject_GetItem</snippet></ROW><ROW><id>12185315</id><snippet>__getitem__</snippet></ROW><ROW><id>12185337</id><snippet>...
class ClienteForm(ModelForm):
    class Meta:
        model = Cliente
class ContaForm(ModelForm):
    class Meta:
        model = Conta
        exclude = ("cliente") #exclude the cliente field from showing up in the form rendering. 
</snippet></ROW><ROW><id>12185337</id><snippet>&lt;html&gt;
&lt;body&gt;
&lt;form action='/{{ action }}/' method='post'&gt;
    {% csrf_token %}
    &lt;table&gt;
        {{ form.as_table }} &lt;!-- added as table which was missing from original post. --&gt;
        {{ form2.as_table }}
    &lt;/table&gt;
    &lt;input type='submit' value='Adicionar' /&gt;
&lt;/form&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>12185337</id><snippet>...
def form(request):
    if request.method == 'POST':
        form = ClienteForm(request.POST)
        form2 = ContaForm(request.POST)
        if form.is_valid() and form2.is_valid():
            client = form.save()
            conta = form2.save(commit=False)
            conta.cliente = client
            contra.save()
    else:
        form = ClienteForm()
        form2 = ContaForm()
       return render_to_response('form.html', locals(), context_instance = RequestContext(request))
</snippet></ROW><ROW><id>12185376</id><snippet>#My python script called mypy.py
import sys

if len(sys.argv) != 2:
  sys.exit("Not enough args")
ca_one = str(sys.argv[1])
ca_two = str(sys.argv[2])

print "My command line args are " + ca_one + " and " + ca_two
</snippet></ROW><ROW><id>12185376</id><snippet>//My code file
#include &lt;stdio.h&gt;
#include &lt;python2.7/Python.h&gt;

void main()
{
    FILE* file;
    int argc;
    char * argv[3];

    argc = 3;
    argv[0] = "mypy.py";
    argv[1] = "-m";
    argv[2] = "/tmp/targets.list";

    Py_SetProgramName(argv[0]);
    Py_Initialize();
    PySys_SetArgv(argc, argv);
    file = fopen("mypy.py","r");
    PyRun_SimpleFile(file, "mypy.py");
    Py_Finalize();

    return;
}
</snippet></ROW><ROW><id>12185376</id><snippet>void main(int argc, char *argv[])
{
    FILE* file;

    Py_SetProgramName(argv[0]);
    Py_Initialize();
    PySys_SetArgv(argc, argv);
    file = fopen("mypy.py","r");
    PyRun_SimpleFile(file, "mypy.py");
    Py_Finalize();

    return;
}
</snippet></ROW><ROW><id>12185398</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; list(combinations('ABCD', 2))
[('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('C', 'D')]
</snippet></ROW><ROW><id>12185530</id><snippet># from original example
with open('simple.py', 'r') as f:
    code = f.read()
exec(code)
# compile and run again
a = compile(code, "simple_compiled_this_file_not_created", "exec")
exec(a)
# marshal and unmarshal
import marshal
f = open("./marshalfoo.bin", "wb")
marshal.dump(a,f) 
f.close()
b = marshal.load(open("./marshalfoo.bin", "rb"))
exec(b)
</snippet></ROW><ROW><id>12185827</id><snippet>QGraphicsItem</snippet></ROW><ROW><id>12185827</id><snippet>SurrogateBeat</snippet></ROW><ROW><id>12185827</id><snippet>boundingRect</snippet></ROW><ROW><id>12185827</id><snippet>paint</snippet></ROW><ROW><id>12185998</id><snippet>#fake_thing.py
def compute_something():
    return 'fake_value'

#real_thing.py
def compute_something():
    return 'real_value'

#my_module.py
import real_thing
def my_function():
    return real_thing.compute_something()

#test_my_module.py
import sys

def test_my_function():
    import fake_thing
    sys.modules['real_thing'] = fake_thing
    import my_module
    print my_module.my_function()

test_my_function()
</snippet></ROW><ROW><id>12186004</id><snippet>&gt;&gt;&gt; filter(bool, (1,2,3,4,5,None,None,None,None,None))
(1, 2, 3, 4, 5)
</snippet></ROW><ROW><id>12186004</id><snippet>None</snippet></ROW><ROW><id>12186004</id><snippet>lambda</snippet></ROW><ROW><id>12186004</id><snippet>&gt;&gt;&gt; filter(lambda n: n is not None, (0,1,2,3,4,5,None,None,None,None,None))
(0, 1, 2, 3, 4, 5)
</snippet></ROW><ROW><id>12186004</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; from operator import ne
&gt;&gt;&gt; filter(partial(ne, None), (0,1,2,3,4,5,None,None,None,None,None))
(0, 1, 2, 3, 4, 5)
</snippet></ROW><ROW><id>12186124</id><snippet>pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>12186124</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>12186124</id><snippet>virtualenv</snippet></ROW><ROW><id>12186124</id><snippet>Puppet</snippet></ROW><ROW><id>12186352</id><snippet>def url(self, instance): 
</snippet></ROW><ROW><id>12186352</id><snippet>def url(self,request,instance):
</snippet></ROW><ROW><id>12186422</id><snippet>try:
    return the_list[i]
except IndexError:
    return None
</snippet></ROW><ROW><id>12186422</id><snippet>l[i] if i &lt; len(l) else None
</snippet></ROW><ROW><id>12186422</id><snippet>&gt;&gt;&gt; l=range(5)
&gt;&gt;&gt; i=6
&gt;&gt;&gt; print(l[i] if i &lt; len(l) else None)
None
&gt;&gt;&gt; i=2
&gt;&gt;&gt; print(l[i] if i &lt; len(l) else None)
2
</snippet></ROW><ROW><id>12186575</id><snippet>new_hand_name[0]</snippet></ROW><ROW><id>12186575</id><snippet>new_hand_name</snippet></ROW><ROW><id>12186575</id><snippet>new_hand_name</snippet></ROW><ROW><id>12186575</id><snippet>{'hand_3': None, 0: &lt;__main__.Hand instance at 0x10e0f06c8&gt;}
</snippet></ROW><ROW><id>12186575</id><snippet>"hand_3"</snippet></ROW><ROW><id>12186575</id><snippet>def draw_random_card():
    """
    whatever function returns a new card. Might be in a Deck object, depends on
    your design
    """
    # some code here

class Player:
    def __init__(self):
        self.hands = []

    def deal(self):
        """add a random hand"""
        self.hands.append(Hand([draw_random_card(), draw_random_card()]))

    def split(self, hand):
        """split the given hand"""
        self.hands.remove(hand)
        self.hands += hand.split()

class Hand:
    def __init__(self, cards):
        self.cards = cards

    def hit(self):
        """add a random card"""
        self.cards.append(draw_random_card())

    def split(self):
        """split and return a pair of Hand objects"""
        return [Hand(self.cards[0], draw_random_card()),
                Hand(self.cards[1], draw_random_card())]
</snippet></ROW><ROW><id>12186575</id><snippet>self.hands[0]</snippet></ROW><ROW><id>12186575</id><snippet>self.hands[1]</snippet></ROW><ROW><id>12186575</id><snippet>def process_hand(hand):
    """do something to a hand of cards"""
    h.hit()
    print h.cards()
    h.hit()
h = Hand(cards)
process_hand(h)
</snippet></ROW><ROW><id>12186575</id><snippet>self.hands = {}
self.hands["hand1"] = Hand([card1, card2])
self.hands["hand2"] = Hand([card1, card2])
print self.hands["hand1"]
</snippet></ROW><ROW><id>12186608</id><snippet>class Subscription(models.Model):
    user = models.ForeignKey(User)
    subscribed = models.BooleanField(default=False)
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    expired = models.DateTimeField()

    def save(self, *args, **kwargs):
        self.expired = datetime.datetime.now()+datetime.timedelta(365) # original answer used this line: self.created + datetime.timedelta(365).isoformat()
        super(Subscription, self).save(*args, **kwargs) # Call the "real" save() method.
</snippet></ROW><ROW><id>12186636</id><snippet>zip</snippet></ROW><ROW><id>12186636</id><snippet>itertools.izip</snippet></ROW><ROW><id>12186636</id><snippet>for i, p in zip(list1, list2):
    print(i, p)
</snippet></ROW><ROW><id>12186636</id><snippet>list1</snippet></ROW><ROW><id>12186636</id><snippet>list2</snippet></ROW><ROW><id>12186636</id><snippet>izip_longest</snippet></ROW><ROW><id>12186636</id><snippet>itertools</snippet></ROW><ROW><id>12186824</id><snippet>PyCartApp/models.py</snippet></ROW><ROW><id>12186824</id><snippet>models.Model(max_length=128)</snippet></ROW><ROW><id>12186824</id><snippet>models.CharField(max_length=128)</snippet></ROW><ROW><id>12186863</id><snippet>guess_encoding</snippet></ROW><ROW><id>12186949</id><snippet>sudo setup.py install</snippet></ROW><ROW><id>12186949</id><snippet>sudo setup virtualenv</snippet></ROW><ROW><id>12186949</id><snippet>virtualenv TestEnv</snippet></ROW><ROW><id>12187070</id><snippet>                return marks
</snippet></ROW><ROW><id>12187070</id><snippet>all_marks[a][0]==new_marks[n][0]</snippet></ROW><ROW><id>12187070</id><snippet>all_marks</snippet></ROW><ROW><id>12187070</id><snippet>marks</snippet></ROW><ROW><id>12187070</id><snippet>marks</snippet></ROW><ROW><id>12187070</id><snippet>def merge_marks(all_marks, new_marks, column):
    for n in range(len(new_marks)):
        for a in range(len(all_marks)):
            if all_marks[a][0]==new_marks[n][0]:
                 all_marks[a][column]= new_marks[n][column]

    return all_marks
</snippet></ROW><ROW><id>12187140</id><snippet>.format()</snippet></ROW><ROW><id>12187140</id><snippet>{}</snippet></ROW><ROW><id>12187244</id><snippet>assert not my_var.called, 'method should not have been called'
</snippet></ROW><ROW><id>12187244</id><snippet>&gt;&gt;&gt; mock=Mock()
&gt;&gt;&gt; mock.a()
&lt;Mock name='mock.a()' id='4349129872'&gt;
&gt;&gt;&gt; assert not mock.b.called, 'b was called and should not have been'
&gt;&gt;&gt; assert not mock.a.called, 'a was called and should not have been'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AssertionError: a was called and should not have been
</snippet></ROW><ROW><id>12187581</id><snippet>image[x][y][z]
</snippet></ROW><ROW><id>12187581</id><snippet>x,y,z</snippet></ROW><ROW><id>12187581</id><snippet>0</snippet></ROW><ROW><id>12187581</id><snippet>image[x][y][2]</snippet></ROW><ROW><id>12187581</id><snippet>x</snippet></ROW><ROW><id>12187581</id><snippet>y</snippet></ROW><ROW><id>12187581</id><snippet>dir(&lt;variable&gt;)</snippet></ROW><ROW><id>12187581</id><snippet>image</snippet></ROW><ROW><id>12187581</id><snippet>dir(image)</snippet></ROW><ROW><id>12187581</id><snippet>image.mean()</snippet></ROW><ROW><id>12187748</id><snippet>current_active</snippet></ROW><ROW><id>12187748</id><snippet>next_active</snippet></ROW><ROW><id>12187748</id><snippet>current_active</snippet></ROW><ROW><id>12187748</id><snippet>next_active</snippet></ROW><ROW><id>12187748</id><snippet>current_active</snippet></ROW><ROW><id>12187748</id><snippet>next_active</snippet></ROW><ROW><id>12187814</id><snippet>$</snippet></ROW><ROW><id>12187814</id><snippet>r1 = re.compile(r"\.pdf$")
</snippet></ROW><ROW><id>12187814</id><snippet>.endswith()</snippet></ROW><ROW><id>12187814</id><snippet>if filename.endswith(".pdf"):
    # do something
</snippet></ROW><ROW><id>12188083</id><snippet>&gt;&gt;&gt; for opaque_ref, vm in session.xenapi.VM.get_all_records().items():
...     print vm["name_label"]
</snippet></ROW><ROW><id>12188083</id><snippet>dir(session)</snippet></ROW><ROW><id>12188083</id><snippet>XenAPI.Session</snippet></ROW><ROW><id>12188083</id><snippet>XenAPI</snippet></ROW><ROW><id>12188083</id><snippet>.get_all_records("session")['Value']</snippet></ROW><ROW><id>12188083</id><snippet>.get_all_records()</snippet></ROW><ROW><id>12188083</id><snippet>XenAPI.Failure</snippet></ROW><ROW><id>12188083</id><snippet>XenAPI</snippet></ROW><ROW><id>12188214</id><snippet>from django.core.exceptions import ValidationError

# extend the validation
def clean(self):
    # run the base validation
    super(YOUR_CLASS_NAME, self).clean(*args, **kwargs)

    # Don't allow dates older than now.
    if self.start_time &lt; datetime.datetime.now():
        raise ValidationError('Start time must be later than now.')
</snippet></ROW><ROW><id>12188268</id><snippet>from itertools import izip_longest, islice, combinations

def sextuplets(seq, _fillvalue=object()):
    if len(seq) &lt; 6:
        yield [tuple(seq)]
        return
    it = iter(seq)
    pairs = izip_longest(it, it, fillvalue=_fillvalue)
    sextuplets = (a + b + c for a, b, c in combinations(pairs, 3))
    for st in sextuplets:
        if st[-1] == _fillvalue:
            # replace fill value with valid item not in sextuplet
            # while maintaining original order
            for i, (x, y) in enumerate(zip(st, seq)):
                if x != y:
                    st = st[0:i] + (y,) + st[i:-1]
                    break
        yield st
</snippet></ROW><ROW><id>12188268</id><snippet>&gt;&gt;&gt; def gen_triplets_from_sextuplets(st):
...     triplets = [combinations(s, 3) for s in st]
...     return set(t for trip in triplets for t in trip)
... 
&gt;&gt;&gt; test_items = [xrange(n) for n in range(10, 80)]
&gt;&gt;&gt; triplets = [set(combinations(i, 3)) for i in test_items]
&gt;&gt;&gt; st_triplets = [gen_triplets_from_sextuplets(sextuplets(i)) 
                   for i in test_items]
&gt;&gt;&gt; all(t == s for t, s in zip(triplets, st_triplets))
True
</snippet></ROW><ROW><id>12188268</id><snippet>&gt;&gt;&gt; def gen_triplet_list_from_sextuplets(st):
...     triplets = [combinations(s, 3) for s in st]
...     return list(t for trip in triplets for t in trip)
... 
&gt;&gt;&gt; tlist = gen_triplet_list_from_sextuplets(sextuplets(range(10)))
&gt;&gt;&gt; len(tlist)
200
&gt;&gt;&gt; len(set(tlist))
120
&gt;&gt;&gt; tlist = gen_triplet_list_from_sextuplets(sextuplets(range(80)))
&gt;&gt;&gt; len(tlist)
197600
&gt;&gt;&gt; len(set(tlist))
82160
</snippet></ROW><ROW><id>12188268</id><snippet>&gt;&gt;&gt; len(list(sextuplets(range(80))))
9880
</snippet></ROW><ROW><id>12188268</id><snippet>itertools.combinations</snippet></ROW><ROW><id>12188268</id><snippet>sextuplets</snippet></ROW><ROW><id>12188268</id><snippet>&gt;&gt;&gt; %timeit list(sextuplets(range(20)))
10000 loops, best of 3: 68.4 us per loop
&gt;&gt;&gt; %timeit list(combinations(range(20), 3))
10000 loops, best of 3: 55.1 us per loop
</snippet></ROW><ROW><id>12188268</id><snippet>sextuplets</snippet></ROW><ROW><id>12188268</id><snippet>&gt;&gt;&gt; %timeit list(sextuplets(range(200)))
10 loops, best of 3: 96.6 ms per loop
&gt;&gt;&gt; %timeit list(combinations(range(200), 3))
10 loops, best of 3: 167 ms per loop
</snippet></ROW><ROW><id>12189108</id><snippet>dict</snippet></ROW><ROW><id>12189222</id><snippet>new_dict = {}

for entry in dictionary:
    new_dict['/' + entry + '/'] = dictionary[entry]

return new_dict
</snippet></ROW><ROW><id>12189222</id><snippet>return {'/' + key + '/': val for key, val in dictionary.items()}
</snippet></ROW><ROW><id>12189222</id><snippet># Defining the Digraph method #
def digraphs(s):
    dictionary = {}

    for count in range(len(s)):
        string = s[count:count + 2]
        dictionary['/' + string + '/'] = s.count(string)

    return dictionary
#--End of the Digraph Method---#
</snippet></ROW><ROW><id>12190187</id><snippet>%PDF</snippet></ROW><ROW><id>12190423</id><snippet>enumerate(a)</snippet></ROW><ROW><id>12190423</id><snippet>enumerate(b)</snippet></ROW><ROW><id>12190423</id><snippet>b</snippet></ROW><ROW><id>12190423</id><snippet>maxIndex = a.index(b)
</snippet></ROW><ROW><id>12191200</id><snippet>self.__dict__.update(locals())
</snippet></ROW><ROW><id>12191200</id><snippet>self</snippet></ROW><ROW><id>12191200</id><snippet>self.self</snippet></ROW><ROW><id>12191200</id><snippet>self</snippet></ROW><ROW><id>12191200</id><snippet>locals()</snippet></ROW><ROW><id>12191200</id><snippet>vars(self).update((k,v) for k,v in vars().items() if k != 'self')
</snippet></ROW><ROW><id>12191200</id><snippet>vars(self).update((k,v) for k,v in vars().items()
                   if k != 'self' and k not in vars(self))
</snippet></ROW><ROW><id>12191200</id><snippet>if any(k in vars(self) for k in vars()):
    raise blahblah
vars(self).update((k,v) for k,v in vars().items() if k != 'self')
</snippet></ROW><ROW><id>12191444</id><snippet>process_exception</snippet></ROW><ROW><id>12191444</id><snippet>def process_exception(self, request, exception):
    if isinstance(exception, myException):
        return http.HttpResponse("myException raised")
    else:
        # Perform standard error handling for other exceptions:
        return None
</snippet></ROW><ROW><id>12191667</id><snippet>userProfile = soc_models.Profile.objects.create()
</snippet></ROW><ROW><id>12191667</id><snippet>Profile</snippet></ROW><ROW><id>12191667</id><snippet>dob</snippet></ROW><ROW><id>12191667</id><snippet>NOT NULL</snippet></ROW><ROW><id>12191667</id><snippet>create</snippet></ROW><ROW><id>12191819</id><snippet>ax.set_xticklabels(['true true true...', 'true true false...', ...], rotation=45)
</snippet></ROW><ROW><id>12191904</id><snippet>dtype</snippet></ROW><ROW><id>12191904</id><snippet>dtype</snippet></ROW><ROW><id>12191904</id><snippet>(3,2)</snippet></ROW><ROW><id>12191904</id><snippet>a</snippet></ROW><ROW><id>12191904</id><snippet>int</snippet></ROW><ROW><id>12191904</id><snippet>a.view(dtype=[('f0', int)]</snippet></ROW><ROW><id>12191904</id><snippet>int</snippet></ROW><ROW><id>12191904</id><snippet>a.view(dtype=[('f0',int),('f1',int)])</snippet></ROW><ROW><id>12191904</id><snippet>dtype="i8,i8,i8"</snippet></ROW><ROW><id>12191904</id><snippet>.transpose</snippet></ROW><ROW><id>12191904</id><snippet>aa</snippet></ROW><ROW><id>12191904</id><snippet>b=array([[1,1,1],[2,2,2]])</snippet></ROW><ROW><id>12191904</id><snippet>int</snippet></ROW><ROW><id>12191904</id><snippet>dtype="i8,i8,i8"</snippet></ROW><ROW><id>12191904</id><snippet>(N,M)</snippet></ROW><ROW><id>12191904</id><snippet>N</snippet></ROW><ROW><id>12191904</id><snippet>M</snippet></ROW><ROW><id>12191904</id><snippet>NxM</snippet></ROW><ROW><id>12191904</id><snippet>(N,M)</snippet></ROW><ROW><id>12191904</id><snippet>(M,N)</snippet></ROW><ROW><id>12192021</id><snippet>In [117]: import pandas

In [118]: import random

In [119]: df = pandas.DataFrame(np.random.randn(100, 4), columns=list('ABCD'))

In [120]: rows = random.sample(df.index, 10)

In [121]: df_10 = df.ix[rows]

In [122]: df_90 = df.drop(rows)
</snippet></ROW><ROW><id>12192026</id><snippet>pGraphContLayout = CType(pLayout, esriCarto.IGraphicsContainer)
pFrame = pGraphContLayout.FindFrame(pMxDoc.ActiveView.FocusMap)
pGrids = CType(pFrame, IMapGrids)
</snippet></ROW><ROW><id>12192283</id><snippet>__...__</snippet></ROW><ROW><id>12192283</id><snippet>__init__.py</snippet></ROW><ROW><id>12192283</id><snippet>import cherryPy</snippet></ROW><ROW><id>12192283</id><snippet>cherryPy</snippet></ROW><ROW><id>12192283</id><snippet>__eq__</snippet></ROW><ROW><id>12192283</id><snippet>==</snippet></ROW><ROW><id>12192283</id><snippet>__</snippet></ROW><ROW><id>12192283</id><snippet>_...</snippet></ROW><ROW><id>12192283</id><snippet>_</snippet></ROW><ROW><id>12192283</id><snippet>_</snippet></ROW><ROW><id>12192290</id><snippet>In [135]: year = lambda x : datetime.strptime(str(x), '%Y%m%d').year

In [136]: grouped = RPT.reset_index().set_index('RPT_Date').groupby(['STK_ID', year])

In [137]: for key, df in grouped:
   .....:     print key
   .....:     print df
   .....:
(876, 2006)
          STK_ID       sales
RPT_Date
20060331     876   798627000
20060630     876  1656110000
20060930     876  2719700000
20061231     876  3573660000
(876, 2007)
          STK_ID       sales
RPT_Date
20070331     876   878415000
20070630     876  2024660000
20070930     876  3352630000
20071231     876  4791770000
(600141, 2006)
          STK_ID       sales
RPT_Date
20060331  600141   270912000
20060630  600141   658981000
20060930  600141  1010270000
20061231  600141  1591500000
(600141, 2007)
          STK_ID       sales
RPT_Date
20070331  600141   319602000
20070630  600141   790670000
20070930  600141  1250530000
20071231  600141  1711240000
</snippet></ROW><ROW><id>12192290</id><snippet>In [153]: RPT_tmp = RPT.reset_index()

In [154]: RPT_tmp['year'] = RPT_tmp['RPT_Date'].apply(year)

In [155]: grouped = RPT_tmp.groupby(['STK_ID', 'year'])
</snippet></ROW><ROW><id>12192290</id><snippet>In [48]: RPT
Out[48]: 
                                  sales
STK_ID RPT_Year RPT_Quarter            
876    2006     0             798627000
                1            1656110000
                2            2719700000
                3            3573660000
       2007     0             878415000
                1            2024660000
                2            3352630000
                3            4791770000
600141 2006     0             270912000
                1             658981000
                2            1010270000
                3            1591500000
       2007     0             319602000
                1             790670000
                2            1250530000
                3            1711240000

In [49]: RPT.groupby(level=['STK_ID', 'RPT_Year'])['sales'].apply(sale_per_q)
Out[49]: 
STK_ID  RPT_Year  RPT_Quarter
876     2006      0               798627000
                  1               857483000
                  2              1063590000
                  3               853960000
        2007      0               878415000
                  1              1146245000
                  2              1327970000
                  3              1439140000
600141  2006      0               270912000
                  1               388069000
                  2               351289000
                  3               581230000
        2007      0               319602000
                  1               471068000
                  2               459860000
                  3               460710000
</snippet></ROW><ROW><id>12192362</id><snippet>from pandas import Series
bootstrap_plot(Series(C), size=17517, samples=1000, color='grey')
</snippet></ROW><ROW><id>12193228</id><snippet>list</snippet></ROW><ROW><id>12193228</id><snippet>jsonify</snippet></ROW><ROW><id>12193228</id><snippet>from flask import jsonify

@bookings.route( '/get_customer', methods=[ 'POST' ] )
def get_customer():
    name = {}
    for key, value in request.form.items():
        name[ key ] = value

    customer_obj = customer_class.Customer()
    results = customer_obj.search_customer( name )

    return jsonify(customers=results)    
</snippet></ROW><ROW><id>12193252</id><snippet>\r\n</snippet></ROW><ROW><id>12193252</id><snippet>t</snippet></ROW><ROW><id>12193252</id><snippet>\n</snippet></ROW><ROW><id>12193252</id><snippet>t</snippet></ROW><ROW><id>12193252</id><snippet>\r\n</snippet></ROW><ROW><id>12193252</id><snippet>t</snippet></ROW><ROW><id>12193252</id><snippet>U</snippet></ROW><ROW><id>12193252</id><snippet>U</snippet></ROW><ROW><id>12193252</id><snippet>\r\n</snippet></ROW><ROW><id>12193252</id><snippet>\r</snippet></ROW><ROW><id>12193252</id><snippet>\n</snippet></ROW><ROW><id>12193252</id><snippet>t</snippet></ROW><ROW><id>12193252</id><snippet>"One\r\nTwo\nThree\rFour"</snippet></ROW><ROW><id>12193252</id><snippet>U</snippet></ROW><ROW><id>12193285</id><snippet>0</snippet></ROW><ROW><id>12193285</id><snippet>0</snippet></ROW><ROW><id>12193285</id><snippet>0</snippet></ROW><ROW><id>12193285</id><snippet>0</snippet></ROW><ROW><id>12193285</id><snippet>0</snippet></ROW><ROW><id>12193285</id><snippet>0</snippet></ROW><ROW><id>12193285</id><snippet>0</snippet></ROW><ROW><id>12193285</id><snippet>0</snippet></ROW><ROW><id>12193285</id><snippet>0</snippet></ROW><ROW><id>12193285</id><snippet>0</snippet></ROW><ROW><id>12193285</id><snippet>0</snippet></ROW><ROW><id>12193285</id><snippet>0</snippet></ROW><ROW><id>12193285</id><snippet>return [[y,x]] + getConnectedZeros(x+1, y) + getConnectedZeros(x-1, y) + getConnectedZeros(x, y+1) + getConnectedZeros(x, y-1)
</snippet></ROW><ROW><id>12193285</id><snippet>getConnectedZeros()</snippet></ROW><ROW><id>12193285</id><snippet>1</snippet></ROW><ROW><id>12193285</id><snippet>0</snippet></ROW><ROW><id>12193285</id><snippet>[]</snippet></ROW><ROW><id>12193285</id><snippet>sampleInput = "01100011100100000\n11100011111111011\n10011111101011011"
inputMatrix = [[int(n) for n in row] for row in sampleInput.split('\n')] #matrix where each row is a list of the numbers from sampleInput

def getConnectedZeros(matrix, x, y, foundIndicies=[]):
    if 0&lt;=y&lt;len(matrix) and 0&lt;=x&lt;len(matrix[y]): #catch out of bounds
        if matrix[y][x] == 1: #catch 1s
            return []
        else:
            if not (x,y) in foundIndicies: #catch 0's we've already "seen"
                foundIndicies.append((x,y))
                return [[y,x]] + getConnectedZeros(matrix, x+1, y, foundIndicies) + getConnectedZeros(matrix, x-1, y, foundIndicies) + getConnectedZeros(matrix, x, y+1, foundIndicies) + getConnectedZeros(matrix, x, y-1, foundIndicies)
            else:
                return []
    else:
        return []


#Now we can just loop through the inputMatrix and find all of the subsets
foundZeroIndicies = []
subsets = []
y = -1
for row in inputMatrix:
    y += 1
    x = -1
    for val in row:
        x += 1
        if (not [y,x] in foundZeroIndicies) and val==0:
            zerosList = getConnectedZeros(inputMatrix, x, y)
            subsets.append(zerosList)
            foundZeroIndicies.extend(zerosList)
for subset in subsets:
    print "Distinct Subset Found  : ", subset
</snippet></ROW><ROW><id>12193483</id><snippet>pd.concat</snippet></ROW><ROW><id>12193483</id><snippet>orig = pd.concat([pd.Series(...) for i in li], axis=1)
</snippet></ROW><ROW><id>12193483</id><snippet>list</snippet></ROW><ROW><id>12193483</id><snippet>li</snippet></ROW><ROW><id>12193519</id><snippet>del nums[x]</snippet></ROW><ROW><id>12193519</id><snippet>nums</snippet></ROW><ROW><id>12193519</id><snippet>set_nums = set(nums)</snippet></ROW><ROW><id>12193687</id><snippet>[1, 2, 3].sort()
</snippet></ROW><ROW><id>12193687</id><snippet>l = [1, 2, 3]
</snippet></ROW><ROW><id>12194488</id><snippet>class ABCGuard(object):
    def __init__(self, obj, *abcs):
        if any(not isinstance(obj, abc) for abc in abcs):
            raise ValueError("{0} must implement {1}"
                             .format(obj.__class__.__name__,
                                     ', '.join(abc.__name__ for abc in abcs
                                               if not isinstance(obj, abc))))
        self.__obj = obj
        self.__abcs = abcs
        classname = '{0}{{{1}}}'.format(obj.__class__.__name__,
                                        ', '.join(abc.__name__ for abc in abcs))
        self.__class__ = type(classname, (ABCGuard, ) + abcs, {})

    def __getattribute__(self, name):
        if name.startswith('_ABCGuard__') or (name.startswith('__') and
                                              name.endswith('__')):
            return super(ABCGuard, self).__getattribute__(name)
        elif any(name in abc.__abstractmethods__ for abc in self.__abcs):
            return getattr(self.__obj, name)
        else:
            raise AttributeError("%r object has no attribute %r" %
                                 (self.__class__.__name__, name))

    def __dir__(self):
        return [x for abc in self.__abcs for x in abc.__abstractmethods__]
</snippet></ROW><ROW><id>12194619</id><snippet>python -Wigonre -m Pyro4.naming --host [your ip] --port [your port]
</snippet></ROW><ROW><id>12194684</id><snippet>&gt;&gt;&gt; my_dict = {} 
&gt;&gt;&gt; my_dict['wer'] = 'table.%maker%'
&gt;&gt;&gt; my_dict
{'wer': 'table.%maker%'}
</snippet></ROW><ROW><id>12194684</id><snippet>&gt;&gt;&gt; my_dict = {'wer': 'table.%maker%'}
&gt;&gt;&gt; my_dict
{'wer': 'table.%maker%'}
</snippet></ROW><ROW><id>12195008</id><snippet>sys.path</snippet></ROW><ROW><id>12195008</id><snippet>import sys
# insert at 0 instead of appending to end to take precedence 
# over system-installed suds (if there is one).
sys.path.insert(0, "suds-0.4-py2.6.egg")
import suds
</snippet></ROW><ROW><id>12195043</id><snippet>                                                    # Ident level:
&gt;&gt;&gt; for n in range(2, 10):                          # 0 
...     for x in range(2, n):                       # 1                          
...         if n % x == 0:                          # 2
...             print n, 'equals', x, '*', n/x      # 3
...             break                               # 3
...     else:                                       # 1
...         # loop fell through without finding a factor                        
...         print n, 'is a prime number'            # 2
</snippet></ROW><ROW><id>12195043</id><snippet>else</snippet></ROW><ROW><id>12195043</id><snippet>for</snippet></ROW><ROW><id>12195043</id><snippet>n % x == 0</snippet></ROW><ROW><id>12195043</id><snippet>TRUE</snippet></ROW><ROW><id>12195043</id><snippet>(n % x == 0)</snippet></ROW><ROW><id>12195043</id><snippet>n</snippet></ROW><ROW><id>12195043</id><snippet>n</snippet></ROW><ROW><id>12195389</id><snippet>  client
      The application entity that initiates a TLS connection to a
      server.  This may or may not imply that the client initiated the
      underlying transport connection.  The primary operational
      difference between the server and client is that the server is
      generally authenticated, while the client is only optionally
      authenticated.
</snippet></ROW><ROW><id>12195389</id><snippet>server_side</snippet></ROW><ROW><id>12195389</id><snippet>ssl.wrap_socket</snippet></ROW><ROW><id>12195566</id><snippet>db = QSqlDatabase.addDatabase("QPSQL")</snippet></ROW><ROW><id>12195566</id><snippet>bool ok = ...</snippet></ROW><ROW><id>12195566</id><snippet>QSqlDatabase</snippet></ROW><ROW><id>12195627</id><snippet>brew install pil
</snippet></ROW><ROW><id>12196884</id><snippet>...?fromurl=/post/a/comment</snippet></ROW><ROW><id>12197004</id><snippet>__import__</snippet></ROW><ROW><id>12197004</id><snippet>egg</snippet></ROW><ROW><id>12197060</id><snippet>transaction handling</snippet></ROW><ROW><id>12197060</id><snippet>transaction.commit_manually</snippet></ROW><ROW><id>12197060</id><snippet>transaction.commit()</snippet></ROW><ROW><id>12197060</id><snippet>transaction.rollback()</snippet></ROW><ROW><id>12197141</id><snippet>zlib.decompressobj</snippet></ROW><ROW><id>12197141</id><snippet>wbits</snippet></ROW><ROW><id>12197141</id><snippet>deobj.decompress()</snippet></ROW><ROW><id>12197149</id><snippet>{{ value|date }}</snippet></ROW><ROW><id>12197149</id><snippet>DATE_FORMAT</snippet></ROW><ROW><id>12197149</id><snippet>time</snippet></ROW><ROW><id>12197149</id><snippet>localize</snippet></ROW><ROW><id>12197149</id><snippet>{% load l10n %}
{% for item in calls %}
     &lt;td&gt;{{ item.conversation_datetime|date|localize }}&lt;/td&gt;
     &lt;td&gt;{{ item.conversation_datetime|time|localize }}&lt;/td&gt;
{% endfor %}
</snippet></ROW><ROW><id>12197149</id><snippet>{% load l10n %}
{% for item in calls %}
     &lt;td&gt;{{ item.conversation_datetime|date:"DATE_FORMAT" }}&lt;/td&gt;
     &lt;td&gt;{{ item.conversation_datetime|time:"TIME_FORMAT" }}&lt;/td&gt;
{% endfor %}
</snippet></ROW><ROW><id>12197149</id><snippet>DATE_FORMAT</snippet></ROW><ROW><id>12197149</id><snippet>DATETIME_FORMAT</snippet></ROW><ROW><id>12197149</id><snippet>SHORT_DATE_FORMAT</snippet></ROW><ROW><id>12197149</id><snippet>SHORT_DATETIME_FORMAT</snippet></ROW><ROW><id>12197268</id><snippet>clean_xxx()</snippet></ROW><ROW><id>12197268</id><snippet>cleaned_data</snippet></ROW><ROW><id>12197268</id><snippet>clean_password</snippet></ROW><ROW><id>12197268</id><snippet>password1</snippet></ROW><ROW><id>12197268</id><snippet>cleaned_data</snippet></ROW><ROW><id>12197268</id><snippet>password1</snippet></ROW><ROW><id>12197268</id><snippet>clean()</snippet></ROW><ROW><id>12197268</id><snippet>password</snippet></ROW><ROW><id>12197268</id><snippet>password1</snippet></ROW><ROW><id>12197268</id><snippet>password</snippet></ROW><ROW><id>12197581</id><snippet>setuptools</snippet></ROW><ROW><id>12197581</id><snippet>setup(
    # other arguments here...
    entry_points = {
        'console_scripts': [
            'foo = my_package.some_module:main_func',
            'bar = other_module:some_func',
        ],
        'gui_scripts': [
            'baz = my_package_gui.start_func',
        ]
    }
)
</snippet></ROW><ROW><id>12197961</id><snippet>factorial(30)</snippet></ROW><ROW><id>12197961</id><snippet>factorial(30.0)</snippet></ROW><ROW><id>12197961</id><snippet>&gt;&gt;&gt; 1e20 + 1 == 1e20 #True
</snippet></ROW><ROW><id>12197961</id><snippet>1.84e19</snippet></ROW><ROW><id>12197961</id><snippet>sys.float_info.max</snippet></ROW><ROW><id>12197961</id><snippet>1.8e308</snippet></ROW><ROW><id>12197961</id><snippet>abs(int(n) - n) &lt; 1e-5</snippet></ROW><ROW><id>12198133</id><snippet>class Segmenter(Job):
    map = staticmethod(map_fun)
    reduce = staticmethod(reduce_fun)

    @staticmethod
    def map_fun(line, params):
        ....

    @staticmethod
    def reduce_fun(iter, params):
        ....

    def disco_mp(self):
        job = self.run(input=["raw://word_to_segment_......"])
</snippet></ROW><ROW><id>12198133</id><snippet>self</snippet></ROW><ROW><id>12198133</id><snippet>params</snippet></ROW><ROW><id>12198133</id><snippet>Job.run</snippet></ROW><ROW><id>12198133</id><snippet>self.run</snippet></ROW><ROW><id>12198133</id><snippet>Segmenter</snippet></ROW><ROW><id>12198133</id><snippet>Job</snippet></ROW><ROW><id>12198255</id><snippet>def</snippet></ROW><ROW><id>12198255</id><snippet>def</snippet></ROW><ROW><id>12198255</id><snippet>None</snippet></ROW><ROW><id>12198255</id><snippet>&gt;&gt;&gt; bad_append('foo')
['foo']
&gt;&gt;&gt; bad_append('bar')
['foo', 'bar']
&gt;&gt;&gt; bad_append('zoo')
['foo', 'bar', 'zoo']
&gt;&gt;&gt; bad_append('bar',[])
['bar']
&gt;&gt;&gt; bad_append('bar') # what?
['foo', 'bar', 'zoo', 'bar']
</snippet></ROW><ROW><id>12198305</id><snippet>unicode_csv_reader()</snippet></ROW><ROW><id>12198305</id><snippet>with open('07362853300091_trade_turquoise_errNo_031.csv', 'rb') as file:
     for row in csv.reader(file):
         print "\n".join(row)
</snippet></ROW><ROW><id>12198497</id><snippet>b_set = set(map(tuple,a))  #need to convert the inner lists to tuples so they are hashable
b = map(list,b_set) #Now convert tuples back into lists (maybe unnecessary?)
</snippet></ROW><ROW><id>12198497</id><snippet>b_set = set(tuple(x) for x in a)
b = [ list(x) for x in b_set ]
</snippet></ROW><ROW><id>12198497</id><snippet>b.sort(key = lambda x: a.index(x) )
</snippet></ROW><ROW><id>12198940</id><snippet>[</snippet></ROW><ROW><id>12198940</id><snippet>]</snippet></ROW><ROW><id>12198940</id><snippet>[]</snippet></ROW><ROW><id>12198940</id><snippet>test $ ls
[cc]a.txt test.dat  test.gp   test.py
</snippet></ROW><ROW><id>12198940</id><snippet>&gt;&gt;&gt; glob.glob(r'[[]cc[]]*.txt') #yuck ...
['[cc]a.txt']
</snippet></ROW><ROW><id>12198940</id><snippet>[ something]</snippet></ROW><ROW><id>12198940</id><snippet>[cc]*.txt</snippet></ROW><ROW><id>12198940</id><snippet>c*.txt</snippet></ROW><ROW><id>12199154</id><snippet>for</snippet></ROW><ROW><id>12199154</id><snippet>for</snippet></ROW><ROW><id>12199154</id><snippet>import os

a = open("output.txt", "w")
for path, subdirs, files in os.walk(r'C:\Users\user\Desktop\Test_Py'):
   for filename in files:
     f = os.path.join(path, filename)
     a.write(str(f) + os.linesep) 
</snippet></ROW><ROW><id>12199154</id><snippet>import os

with open("output.txt", "w") as a:
    for path, subdirs, files in os.walk(r'C:\Users\user\Desktop\Test_Py'):
       for filename in files:
         f = os.path.join(path, filename)
         a.write(str(f) + os.linesep) 
</snippet></ROW><ROW><id>12199445</id><snippet>&lt;% print "foo" %&gt;</snippet></ROW><ROW><id>12199645</id><snippet>{% if  image %}
  &lt;img src="{{ image.url }}" /&gt; &lt;!-- Also note the added quotations... --&gt;
{% endif %}  &lt;!-- This is the line you need to add --&gt;
</snippet></ROW><ROW><id>12199652</id><snippet>ObjectId</snippet></ROW><ROW><id>12199652</id><snippet>pymongo.objectid</snippet></ROW><ROW><id>12199652</id><snippet>from bson.objectid import ObjectId
</snippet></ROW><ROW><id>12199652</id><snippet>oid</snippet></ROW><ROW><id>12199652</id><snippet>db_conn.msg.find_one({'_id': ObjectId(my_oid)})
</snippet></ROW><ROW><id>12199776</id><snippet>for x in range(len(a)):</snippet></ROW><ROW><id>12199776</id><snippet>for x in range(len(a)-1):
</snippet></ROW><ROW><id>12199776</id><snippet>x+1</snippet></ROW><ROW><id>12199869</id><snippet>[x for x in list1 if x in list2]
</snippet></ROW><ROW><id>12199869</id><snippet>intersection = []
for x in list1:
    if x in list2: #Note that using 'in' involves looping over list2
        intersection.append(x)
</snippet></ROW><ROW><id>12199869</id><snippet>list1</snippet></ROW><ROW><id>12199869</id><snippet>list2</snippet></ROW><ROW><id>12199869</id><snippet>list1</snippet></ROW><ROW><id>12199869</id><snippet>list1 = [1,2,3]</snippet></ROW><ROW><id>12199869</id><snippet>list2 = [3,2,5]</snippet></ROW><ROW><id>12199869</id><snippet>[2,3]</snippet></ROW><ROW><id>12199869</id><snippet>[x for x in list2 if x in list1]
</snippet></ROW><ROW><id>12199869</id><snippet>list2</snippet></ROW><ROW><id>12199869</id><snippet>[3,2]</snippet></ROW><ROW><id>12199869</id><snippet>list1</snippet></ROW><ROW><id>12199869</id><snippet>&gt;&gt;&gt; [x for x in [1,2,3,3,3] if x in [2,3]]
[2, 3, 3, 3]
</snippet></ROW><ROW><id>12199869</id><snippet>&gt;&gt;&gt; [fruit for fruit in ["Apples", "Bananas", "Pears"] if fruit in ["Kiwis", "Bananas", "Apples"]]
['Apples', 'Bananas']
</snippet></ROW><ROW><id>12199869</id><snippet>&gt;&gt;&gt; [fruit for fruit in ["Kiwis", "Bananas", "Apples"] if fruit in ["Apples", "Bananas", "Pears"]]
['Bananas', 'Apples']
</snippet></ROW><ROW><id>12199927</id><snippet>chr()</snippet></ROW><ROW><id>12199927</id><snippet>&gt;&gt;&gt; chr(0xd3)
'\xd3'
</snippet></ROW><ROW><id>12199948</id><snippet>&lt;condition&gt; and myList.append('myString')
</snippet></ROW><ROW><id>12199948</id><snippet>&lt;condition&gt;</snippet></ROW><ROW><id>12199948</id><snippet>&lt;condition&gt;</snippet></ROW><ROW><id>12199948</id><snippet>if &lt;condition&gt;: myList.append('myString')
</snippet></ROW><ROW><id>12199948</id><snippet>&gt;&gt;&gt; myList = []
&gt;&gt;&gt; False and myList.append('myString')
False
&gt;&gt;&gt; myList
[]
&gt;&gt;&gt; True and myList.append('myString')
&gt;&gt;&gt; myList
['myString']
</snippet></ROW><ROW><id>12199952</id><snippet>return checkAllInOneDirection(...)
</snippet></ROW><ROW><id>12199952</id><snippet>checkAllInOneDirection(...)
</snippet></ROW><ROW><id>12199952</id><snippet>None</snippet></ROW><ROW><id>12199953</id><snippet>{ str(x):(x if x % 2 else x*10) for x in range(10) }
</snippet></ROW><ROW><id>12200246</id><snippet>SaSmith</snippet></ROW><ROW><id>12200246</id><snippet>x</snippet></ROW><ROW><id>12200246</id><snippet>None</snippet></ROW><ROW><id>12200246</id><snippet>return</snippet></ROW><ROW><id>12200246</id><snippet>def creative_name(fname, lname, n=1):
    if n &gt; len(fname): return None
    uname = fname[:n] + lname
    x = active_directory.find_user(uname)
    if x: return creative_name(fname, lname, n+1)
    else: return uname
</snippet></ROW><ROW><id>12200246</id><snippet>active_directory.find_user(fname[:n]_lname)</snippet></ROW><ROW><id>12200246</id><snippet>n</snippet></ROW><ROW><id>12200246</id><snippet>for</snippet></ROW><ROW><id>12200246</id><snippet>None</snippet></ROW><ROW><id>12200520</id><snippet>subprocess</snippet></ROW><ROW><id>12200520</id><snippet>import subprocess as sp
p = sp.Popen(['command', 'arg1', 'arg2'], stdout=sp.PIPE, stderr=sp.PIPE)
stdout, stderr = p.communicate()
returncode = p.returncode
</snippet></ROW><ROW><id>12200520</id><snippet>shell=False</snippet></ROW><ROW><id>12200700</id><snippet>if not any(lst):
    # ...
</snippet></ROW><ROW><id>12200700</id><snippet>any()</snippet></ROW><ROW><id>12200700</id><snippet>True</snippet></ROW><ROW><id>12200700</id><snippet>True</snippet></ROW><ROW><id>12200700</id><snippet>def my_any(iterable):
    for i in iterable:
        if i:
            return True
    return False
</snippet></ROW><ROW><id>12200826</id><snippet>IndexError</snippet></ROW><ROW><id>12200826</id><snippet>rows</snippet></ROW><ROW><id>12200826</id><snippet>IndexError</snippet></ROW><ROW><id>12200860</id><snippet>decorator.decorator</snippet></ROW><ROW><id>12200860</id><snippet>ae_test</snippet></ROW><ROW><id>12200860</id><snippet>from decorator import decorator

def ae_test(prob=1.00,loggedin=False,is_admin=False):
    @decorator
    def run_test(func, *args, **kwargs):
        ... test setup code ...
        func(*args,**kwargs)
        ... test teardown code ...
    return run_test
</snippet></ROW><ROW><id>12201167</id><snippet>subprocess.Popen(["/bin/ls", "-l"]
</snippet></ROW><ROW><id>12201167</id><snippet>subprocess.call</snippet></ROW><ROW><id>12201167</id><snippet>subprocess.call_check</snippet></ROW><ROW><id>12201178</id><snippet>&gt;&gt;&gt; from Bio import Entrez
&gt;&gt;&gt; handle = Entrez.esearch(db="nuccore", term="complete", field="title", rettype='xml')
&gt;&gt;&gt; print Entrez.read(handle)[u'QueryTranslation']
complete[Title]
</snippet></ROW><ROW><id>12201178</id><snippet>&gt;&gt;&gt; from Bio import Entrez
&gt;&gt;&gt; handle = Entrez.esearch(db="nuccore", term="complete[title]", rettype='xml')
&gt;&gt;&gt; print Entrez.read(handle)[u'QueryTranslation']
complete[Title]
</snippet></ROW><ROW><id>12201178</id><snippet>&gt;&gt;&gt; from Bio import Entrez
&gt;&gt;&gt; handle = Entrez.esearch(db="nuccore", term="complete[title] AND viruses[porgn]", rettype='xml')
&gt;&gt;&gt; print Entrez.read(handle)[u'QueryTranslation']
complete[title] AND viruses[porgn]
</snippet></ROW><ROW><id>12201215</id><snippet>In [11]: df = DataFrame({"A": [1,2], "B": [3,4]})

In [12]: df.rename(columns={"A": "series formerly known as A"})
Out[12]: 
   series formerly known as A  B
0                           1  3
1                           2  4
</snippet></ROW><ROW><id>12201215</id><snippet>df</snippet></ROW><ROW><id>12201215</id><snippet>In [13]: df
Out[13]: 
   A  B
0  1  3
1  2  4
</snippet></ROW><ROW><id>12201215</id><snippet>inplace</snippet></ROW><ROW><id>12201215</id><snippet>In [14]: df.rename(columns={"A": "series formerly known as A"}, inplace=True)
Out[14]: 
   series formerly known as A  B
0                           1  3
1                           2  4

In [15]: df
Out[15]: 
   series formerly known as A  B
0                           1  3
1                           2  4
</snippet></ROW><ROW><id>12201377</id><snippet>def printParity(x):
    if x % 2 == 0:
        print(x, "is even")
    else:
        print(x, "is odd")
</snippet></ROW><ROW><id>12201377</id><snippet>print (x), ("is even")</snippet></ROW><ROW><id>12201377</id><snippet>&gt;&gt;&gt; x=2
&gt;&gt;&gt; print (x), ("is even")
2
(None, 'is even')
</snippet></ROW><ROW><id>12201466</id><snippet>direction_function</snippet></ROW><ROW><id>12201466</id><snippet>raw_input</snippet></ROW><ROW><id>12201466</id><snippet>def direction_function(direction=None):
    direction = direction or raw_input()
    # Do something with the input
</snippet></ROW><ROW><id>12201466</id><snippet>raw_input</snippet></ROW><ROW><id>12201677</id><snippet>img = Image("filename.jpg")</snippet></ROW><ROW><id>12201677</id><snippet>color = img[x, y]</snippet></ROW><ROW><id>12201677</id><snippet>img.getBitmap()</snippet></ROW><ROW><id>12201677</id><snippet>img.show()</snippet></ROW><ROW><id>12201693</id><snippet>some_string.lower()</snippet></ROW><ROW><id>12201693</id><snippet>&gt;&gt;&gt; "foo".lower() == "foo"
True
&gt;&gt;&gt; "FOO".lower() == "foo"
True
</snippet></ROW><ROW><id>12201693</id><snippet>import sys
from random import choice

WORDPAIRS = [('Humiliate', 'abasement'), ('Swelling', 'billowing')]

def ask():
    pair = choice(WORDPAIRS)
    while True:
        answer = raw_input("%s: " % pair[0]).lower()
        if answer == pair[1]:
            print "well done!"
            return


def main():
    try:
        while True:
            ask()
    except KeyboardInterrupt:
        sys.exit(0)


if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>12201693</id><snippet>$ python lulu.py 
Swelling: lol
Swelling: rofl
Swelling: billowing
well done!
Humiliate: rofl
Humiliate: Abasement
well done!
Swelling: BILLOWING
well done!
Humiliate: ^C
$
</snippet></ROW><ROW><id>12201723</id><snippet>In [97]: df = pandas.DataFrame({'month': np.random.randint(0,11, 100), 'A': np.random.randn(100), 'B': np.random.randn(100)})

In [98]: df.join(df.groupby('month')['A'].sum(), on='month', rsuffix='_r')
Out[98]:
           A         B  month       A_r
0  -0.040710  0.182269      0 -0.331816
1  -0.004867  0.642243      1  2.448232
2  -0.162191  0.442338      4  2.045909
3  -0.979875  1.367018      5 -2.736399
4  -1.126198  0.338946      5 -2.736399
5  -0.992209 -1.343258      1  2.448232
6  -1.450310  0.021290      0 -0.331816
7  -0.675345 -1.359915      9  2.722156
</snippet></ROW><ROW><id>12201744</id><snippet>import Image
img = Image.open('image.png').convert('LA')
img.save('greyscale.png')
</snippet></ROW><ROW><id>12201744</id><snippet>Y' = 0.299 R + 0.587 G + 0.114 B 
</snippet></ROW><ROW><id>12201744</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

def rgb2gray(rgb):
    return np.dot(rgb[...,:3], [0.299, 0.587, 0.144])

img = mpimg.imread('image.png')     
gray = rgb2gray(img)    
plt.imshow(gray, cmap = plt.get_cmap('gray'))
plt.show()
</snippet></ROW><ROW><id>12201766</id><snippet>None</snippet></ROW><ROW><id>12201766</id><snippet>&gt;&gt;&gt; print [1].append(2)
None
</snippet></ROW><ROW><id>12201929</id><snippet>dpkt</snippet></ROW><ROW><id>12201952</id><snippet>os.chdir(dir)</snippet></ROW><ROW><id>12201952</id><snippet>dir</snippet></ROW><ROW><id>12201952</id><snippet>open</snippet></ROW><ROW><id>12201952</id><snippet>dir = r'C:\Python32'</snippet></ROW><ROW><id>12201952</id><snippet>chdir</snippet></ROW><ROW><id>12201952</id><snippet>os.listdir()</snippet></ROW><ROW><id>12201952</id><snippet>working directory</snippet></ROW><ROW><id>12201952</id><snippet>os.getcwd()</snippet></ROW><ROW><id>12201952</id><snippet>open('sortedLists.yaml')</snippet></ROW><ROW><id>12201952</id><snippet>os.chdir</snippet></ROW><ROW><id>12201952</id><snippet>file.txt</snippet></ROW><ROW><id>12201952</id><snippet>os.chdir(r'C:\Folder')
open('file.txt') #relative path, looks inside the current working directory
</snippet></ROW><ROW><id>12201952</id><snippet>open(r'C:\Folder\file.txt') #full path
</snippet></ROW><ROW><id>12201967</id><snippet>isinstance(key, slice)</snippet></ROW><ROW><id>12201967</id><snippet>__getitem__</snippet></ROW><ROW><id>12201967</id><snippet>__setitem__</snippet></ROW><ROW><id>12202061</id><snippet>&lt;html&gt;

    &lt;body&gt;
    &lt;/body&gt;

    //load data here !

&lt;/html&gt;
</snippet></ROW><ROW><id>12202061</id><snippet>&lt;html&gt;

        &lt;script&gt;
            $(document).ready(function() {
                // DOM is loaded, get data here
            });
        &lt;/script&gt;

        &lt;body&gt;
        &lt;/body&gt;


    &lt;/html&gt;
</snippet></ROW><ROW><id>12202183</id><snippet>loadModule(cx_Oracle)
</snippet></ROW><ROW><id>12202183</id><snippet>cx_Oracle</snippet></ROW><ROW><id>12202183</id><snippet> import module
</snippet></ROW><ROW><id>12202183</id><snippet>from contextlib import contextmanager
import sys

@contextmanager
def safe_import(name):
    try:
        yield
    except:
        print 'Failed to import ' + name
        sys.exit(1)

with safe_import('cuckoo'):
    import cuckoo
</snippet></ROW><ROW><id>12202211</id><snippet> with open(file_name) as f:
      print (f.read()).split("[data]")
</snippet></ROW><ROW><id>12202211</id><snippet>with open(file_name) as f:
      pre_data,post_data =[s.strip() for s in (f.read()).split("[data]")]
post_data_lines = post_data.splitlines()
headers = post_data_lines[0].split()
print headers
for line in post_data_lines[1:]:
      print line.split()
      print dict(zip(headers,line.split()))
</snippet></ROW><ROW><id>12202211</id><snippet>line.split('\t')</snippet></ROW><ROW><id>12202211</id><snippet>file_name = "testdata.txt"
with open(file_name) as f:
      pre_data,post_data =[s.strip() for s in (f.read()).split("[data]")]
post_data_lines = post_data.splitlines()
headers = post_data_lines[0].split()

for line in post_data_lines[1:]:
    tmpline  = []
    pos = 0
    for itm in headers:
        tmpline.append(line[pos:pos+len(itm)])
        pos += len(itm)+1

    print dict(zip(headers,tmpline))
</snippet></ROW><ROW><id>12202211</id><snippet>file_name = "testdata.txt"
with open(file_name) as f:
      pre_data,post_data =[s.strip() for s in (f.read()).split("[data]")]
post_data_lines = post_data.splitlines()
headers = post_data_lines[0].split()
headers2 = [s.replace("_"," ").strip() for s in headers]
for line in post_data_lines[1:]:
    tmpline  = []
    pos = 0
    for itm in headers:
        tmpline.append(line[pos:pos+len(itm)])
        pos += len(itm)+1

    print dict(zip(headers2,tmpline))
</snippet></ROW><ROW><id>12202239</id><snippet>import unittest

class Test(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        print 'setUpClass'
        cls.data = 123

    def test_one(self):
        print 'test_one'
        print self.data

    def test_two(self):
        print 'test_two'


if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>12202239</id><snippet>class Test(unittest.TestCase):
     value = result_of_some_expensive_function()
     def test(self):
         print self.value
</snippet></ROW><ROW><id>12202353</id><snippet>def authGSSServerInit(service):
    """
    Initializes a context for GSSAPI server-side authentication with the given service principal.
    authGSSServerClean must be called after this function returns an OK result to dispose of
    the context once all GSSAPI operations are complete.

    @param service: a string containing the service principal in the form 'type@fqdn'
        (e.g. 'imap@mail.apple.com').
    @return: a tuple of (result, context) where result is the result code (see above) and
        context is an opaque value that will need to be passed to subsequent functions.
    """
</snippet></ROW><ROW><id>12202434</id><snippet>def sum(values, start = 0):
    total = start
    for value in values:
        total = total + value
    return total
</snippet></ROW><ROW><id>12202434</id><snippet>sum([1,2],[3,4])</snippet></ROW><ROW><id>12202434</id><snippet>[3,4] + 1 + 2</snippet></ROW><ROW><id>12202434</id><snippet>sum</snippet></ROW><ROW><id>12202434</id><snippet>sum([[1,2],[3,4]], []) == [1,2,3,4]
</snippet></ROW><ROW><id>12203511</id><snippet>data = {}

for k, v in [('a', 1), ('a', 2), ('b', 3)]:
    try:
        data[k].append(v)
    except KeyError:
        data[k] = [v]  # a list of one element!
</snippet></ROW><ROW><id>12203511</id><snippet>collections</snippet></ROW><ROW><id>12203511</id><snippet>import collections

data = collections.defaultdict(list)
for k, v in [('a', 1), ('a', 2), ('b', 3)]:
    data[k].append(v)
</snippet></ROW><ROW><id>12203614</id><snippet>Command Line Tools for Xcode</snippet></ROW><ROW><id>12203718</id><snippet>request.session['the_list'] = listToPrint
return redirect('result/')
</snippet></ROW><ROW><id>12203718</id><snippet>{% for i in request.session.the_list %}
   {{ i }}
{% endfor %}
</snippet></ROW><ROW><id>12203950</id><snippet>capacity units == reserved computational units</snippet></ROW><ROW><id>12203950</id><snippet>capacity units != reserved network transit</snippet></ROW><ROW><id>12203950</id><snippet>Scan</snippet></ROW><ROW><id>12203950</id><snippet>Scan</snippet></ROW><ROW><id>12203950</id><snippet>limit</snippet></ROW><ROW><id>12203950</id><snippet>capacity unit</snippet></ROW><ROW><id>12203950</id><snippet>0.5 capacity / cumulated KB</snippet></ROW><ROW><id>12203950</id><snippet>1.0</snippet></ROW><ROW><id>12203950</id><snippet>cumulated size &lt; 2KB</snippet></ROW><ROW><id>12204154</id><snippet>processEvents</snippet></ROW><ROW><id>12204154</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.label = QtGui.QLabel('Count = 0', self)
        self.button = QtGui.QPushButton('Start', self)
        self.button.clicked.connect(self.handleButton)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.label)
        layout.addWidget(self.button)
        self._active = False

    def handleButton(self):
        if not self._active:
            self._active = True
            self.button.setText('Stop')
            QtCore.QTimer.singleShot(0, self.runLoop)
        else:
            self._active = False

    def closeEvent(self, event):
        self._active = False

    def runLoop(self):
        from time import sleep
        for index in range(100):
            sleep(0.05)
            self.label.setText('Count = %d' % index)
            QtGui.qApp.processEvents()
            if not self._active:
                break
        self.button.setText('Start')
        self._active = False

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>12204428</id><snippet>import pandas
A = pandas.DataFrame({
    'val' :  ['aaaaa', 'acaca', 'ddddd', 'zzzzz'],
    'extra' : range(10,14),
})
A = A.reset_index(drop=True)
A = A.reset_index(drop=True)
A = A.reset_index(drop=True)
</snippet></ROW><ROW><id>12204566</id><snippet>def resize_image(input, output, size, quality=None, crop=False, force=False):
    if (not force and os.path.exists(output) and
        os.path.getmtime(output) &gt; os.path.getmtime(input)):
        return
    params = []
    if crop:
        params += ["-resize", size + "^"]
        params += ["-gravity", "Center", "-crop", size + "+0+0"]
    else:
        params += ["-resize", size]
    params += ["-unsharp", "0x0.4+0.6+0.008"]
    if quality is not None:
        params += ["-quality", str(quality)]
    subprocess.check_call(["convert", input] + params + [output])
</snippet></ROW><ROW><id>12204612</id><snippet>utcnow</snippet></ROW><ROW><id>12204612</id><snippet>now</snippet></ROW><ROW><id>12204612</id><snippet>datetime</snippet></ROW><ROW><id>12204612</id><snippet>localize</snippet></ROW><ROW><id>12204612</id><snippet>is_dst</snippet></ROW><ROW><id>12204612</id><snippet>utc = pytz.timezone('UTC')
now = utc.localize(datetime.datetime.utcnow())
</snippet></ROW><ROW><id>12204612</id><snippet>la = pytz.timezone('America/Los_Angeles')
local_time = now.astimezone(la)
</snippet></ROW><ROW><id>12204838</id><snippet>\tif now.weekday() == 6 or minutesRemaining &lt;= 60 or\xc2\xa0modeArg == "run":\n
                                                    ^^^^^^^^
</snippet></ROW><ROW><id>12204892</id><snippet>re</snippet></ROW><ROW><id>12204892</id><snippet>\n</snippet></ROW><ROW><id>12204892</id><snippet>&gt;&gt;&gt; s = """This is the text
... 
... I am interested in splitting,
... 
... 
... but I want to remove blank lines!"""
&gt;&gt;&gt; lines = [l for l in s.split("\n") if l]
&gt;&gt;&gt; lines
['This is the text', 'I am interested in splitting,', 'but I want to remove blank lines!']
</snippet></ROW><ROW><id>12204892</id><snippet>string.split</snippet></ROW><ROW><id>12204892</id><snippet>&gt; python -m timeit -s 's = "This is the text\n\nthat I want to split\n\n\nand remove empty lines"; import re;' '[l for l in re.split(r"\n", s) if l]'   
100000 loops, best of 3: 2.84 usec per loop

&gt; python -m timeit -s 's = "This is the text\n\nthat I want to split\n\n\nand remove empty lines"' '[l for l in s.split("\n") if l]'                    
1000000 loops, best of 3: 1.08 usec per loop
</snippet></ROW><ROW><id>12204911</id><snippet>key=`python blah.py var1 var2`
./run $key
</snippet></ROW><ROW><id>12205010</id><snippet>import subprocess
import urllib2
import sys 
source = urllib2.urlopen('http://cdn.sstatic.net/stackoverflow/img/apple-touch-icon.png')
p = subprocess.Popen(['convert','png:-', 'jpg:-'], stdin=source, stdout=subprocess.PIPE)
p.communicate()[0] # this is your converted image
</snippet></ROW><ROW><id>12205017</id><snippet>which='LM'</snippet></ROW><ROW><id>12205240</id><snippet>class RunGui (QtGui.QMainWindow)

    ...

    def normal_output_written(self, msg):
        self.ui.text_edit.append(msg) 

    def new_select(self):
        ...
            np = NewProject()
            np.outputReady.connect(self.normal_output_written)
            np.params = partial(np.create_new_project, section, project, otherargs)
            np.start()

class NewProject(QtCore.QThread):

    outputReady = QtCore.pyqtSignal(object)
    errorReady = QtCore.pyqtSignal(object)
    inputNeeded = QtCore.pyqtSignal(object)

    def __init__(self):
        super(NewProject, self).__init__()

        self._inputQueue = Queue()
        self.params = None

    def run(self):
        self.params()

    def create_new_project(self, section, project, otherargs):
        ...
        qprocess = QtCore.QProcess()
        qprocess.start(command)
        if not qprocess.waitForStarted():
            # handle a failed command here
            return

        if not qprocess.waitForReadyRead():
            # handle a timeout or error here
            return

        msg = str(self.qprocess.readAllStandardOutput())
        self.outputReady.emit(msg) 
</snippet></ROW><ROW><id>12205240</id><snippet>pexpect</snippet></ROW><ROW><id>12205240</id><snippet>import time

i = raw_input("Please enter something: ")
print "Output:", i
time.sleep(.1)
print "Another line"
time.sleep(.1)
print "Done"
</snippet></ROW><ROW><id>12205240</id><snippet>import pexpect
import time

child = pexpect.spawn("python foo.py")
child.setecho(False)

ret = -1
while ret &lt; 0:
    time.sleep(.05)
    ret = child.expect("Please enter something: ")

child.sendline('FOO')
while True:
    line = child.readline()
    if not line:
        break
    print line.strip()

# Output: FOO
# Another line
# Done
</snippet></ROW><ROW><id>12205341</id><snippet>':'.join(s.split(':')[0:3])
</snippet></ROW><ROW><id>12205556</id><snippet>line</snippet></ROW><ROW><id>12205556</id><snippet>lines</snippet></ROW><ROW><id>12205556</id><snippet>for lines in constantfile:
    if address in lines: #if the desired address is in the line
        lineholder=lines.split()
        # etc.
</snippet></ROW><ROW><id>12205556</id><snippet>constantfile</snippet></ROW><ROW><id>12205556</id><snippet>for</snippet></ROW><ROW><id>12205838</id><snippet>&gt;&gt;&gt; re.sub(r"\d{4}-\d{4}", r"(\g&lt;0&gt;)", "Alan Turing 1912-1954")
'Alan Turing (1912-1954)'
</snippet></ROW><ROW><id>12205838</id><snippet>\g&lt;0&gt;</snippet></ROW><ROW><id>12205838</id><snippet>\0</snippet></ROW><ROW><id>12205838</id><snippet>\x00</snippet></ROW><ROW><id>12205838</id><snippet>&gt;&gt;&gt; regex = re.compile(r"\d{4}-\d{4}")
&gt;&gt;&gt; regex.sub(lambda m: '({0})'.format(m.group(0)), "Alan Turing 1912-1954")
'Alan Turing (1912-1954)'
</snippet></ROW><ROW><id>12206100</id><snippet>&gt;&gt;&gt; regex = re.compile(
    r"""\n[ \t]*  # Match a newline plus following whitespace
    (?=           # only if... 
     (?:          # ...the following can be matched:
      (?!&lt;trkpt)  #  (unless an opening &lt;trkpt&gt; tag occurs first)
      .           #  any character
     )*           # any number of times,
     &lt;/trkpt&gt;     # followed by a closing &lt;/trkpt&gt; tag
    )             # End of lookahead""", 
    re.DOTALL | re.VERBOSE)
&gt;&gt;&gt; print regex.sub("", xml)

    &lt;trkseg&gt;
      &lt;trkpt lon="-51.2220657617" lat="-30.1072524581"&gt;&lt;time&gt;2012-08-25T10:20:44Z&lt;/time&gt;&lt;ele&gt;0&lt;/ele&gt;&lt;/trkpt&gt;
      &lt;trkpt lon="-51.2220657617" lat="-30.1072524581"&gt;&lt;time&gt;2012-08-25T10:20:44Z&lt;/time&gt;&lt;ele&gt;0&lt;/ele&gt;&lt;/trkpt&gt;
      &lt;trkpt lon="-51.2220657617" lat="-30.1072524581"&gt;&lt;time&gt;2012-08-25T10:20:44Z&lt;/time&gt;&lt;ele&gt;0&lt;/ele&gt;&lt;/trkpt&gt;
    &lt;/trkseg&gt;
</snippet></ROW><ROW><id>12206690</id><snippet>import itertools

numbers = sorted(map(int, raw_input().split(",")))
for k, g in itertools.groupby(numbers, lambda x: x // 10):
    print k, list(g)
</snippet></ROW><ROW><id>12206690</id><snippet>len()</snippet></ROW><ROW><id>12206690</id><snippet>    # print k, list(g)
    print k, len(list(g))
</snippet></ROW><ROW><id>12206690</id><snippet>1, 5, 6, 89, 43, 43, 25, 76, 12, 32, 23, 25, 27, 13, 5, 7

0 [1, 5, 5, 6, 7]
1 [12, 13]
2 [23, 25, 25, 27]
3 [32]
4 [43, 43]
7 [76]
8 [89]
</snippet></ROW><ROW><id>12206690</id><snippet>0 5
1 2
2 4
3 1
4 2
7 1
8 1
</snippet></ROW><ROW><id>12206690</id><snippet>print "%d - %d: %d" % (k * 10 + 1, (k + 1) * 10, len(list(g))
</snippet></ROW><ROW><id>12206690</id><snippet> 1 - 10: 5
11 - 20: 2
21 - 30: 4
31 - 40: 1
41 - 50: 2
71 - 80: 1
81 - 90: 1 
</snippet></ROW><ROW><id>12206792</id><snippet>%module "test"

/* Prototype */    
%native(DontWrapMeBro)
PyObject* DontWrapMeBro(PyObject* self, PyObject* args);

%{
  PyObject* DontWrapMeBro(PyObject* self, PyObject* args)
  {
    return PyString_AsString("Don't wrap me");
  }
%}
</snippet></ROW><ROW><id>12206868</id><snippet>pip</snippet></ROW><ROW><id>12206868</id><snippet>python</snippet></ROW><ROW><id>12206868</id><snippet>vtk</snippet></ROW><ROW><id>12206868</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>12206868</id><snippet>pip</snippet></ROW><ROW><id>12206868</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>12206868</id><snippet>$ head -n1 $(which pip)
</snippet></ROW><ROW><id>12206868</id><snippet>virtualenv</snippet></ROW><ROW><id>12206868</id><snippet>pip</snippet></ROW><ROW><id>12206868</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>12206868</id><snippet>curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | /usr/local/bin/python
</snippet></ROW><ROW><id>12207172</id><snippet>str</snippet></ROW><ROW><id>12207172</id><snippet>unicode</snippet></ROW><ROW><id>12207172</id><snippet>String</snippet></ROW><ROW><id>12207172</id><snippet>str</snippet></ROW><ROW><id>12207172</id><snippet>unicode</snippet></ROW><ROW><id>12207172</id><snippet>unicode</snippet></ROW><ROW><id>12207172</id><snippet>str</snippet></ROW><ROW><id>12207172</id><snippet>unicode</snippet></ROW><ROW><id>12207172</id><snippet>json</snippet></ROW><ROW><id>12207172</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; print json.dumps({u'words': [u'every', u'single', u'word']})
{"words": ["every", "single", "word"]}
</snippet></ROW><ROW><id>12207352</id><snippet>.value_counts()</snippet></ROW><ROW><id>12207352</id><snippet>&gt;&gt;&gt; import pandas
&gt;&gt;&gt; my_series = pandas.Series([1,2,2,3,3,3, "fred", 1.8, 1.8])
&gt;&gt;&gt; my_series
0       1
1       2
2       2
3       3
4       3
5       3
6    fred
7     1.8
8     1.8
&gt;&gt;&gt; counts = my_series.value_counts()
&gt;&gt;&gt; counts
3       3
2       2
1.8     2
fred    1
1       1
&gt;&gt;&gt; len(counts)
5
&gt;&gt;&gt; sum(counts)
9
&gt;&gt;&gt; counts["fred"]
1
&gt;&gt;&gt; dict(counts)
{1.8: 2, 2: 2, 3: 3, 1: 1, 'fred': 1}
</snippet></ROW><ROW><id>12207371</id><snippet>cgi.escape(self.request.get('name'))
</snippet></ROW><ROW><id>12207383</id><snippet>from ctypes import CDLL, c_int, c_uint8, c_uint16, c_uint32, c_char, c_char_p, Structure, POINTER
from ctypes.util import find_library

import os

class c_dir(Structure):
    pass

class c_dirent(Structure):
    _fields_ = [ 
        ("d_fileno", c_uint32), 
        ("d_reclen", c_uint16),
        ("d_type", c_uint8), 
        ("d_namlen", c_uint8),
        ("d_name", c_char * 4096),
        # proper way of getting platform MAX filename size?
        # ("d_name", c_char * (os.pathconf('.', 'PC_NAME_MAX')+1) ) 
    ]

c_dirent_p = POINTER(c_dirent)
c_dir_p = POINTER(c_dir)

c_lib = CDLL(find_library("c"))
opendir = c_lib.opendir
opendir.argtypes = [c_char_p]
opendir.restype = c_dir_p

# FIXME Should probably use readdir_r here
readdir = c_lib.readdir
readdir.argtypes = [c_dir_p]
readdir.restype = c_dirent_p

closedir = c_lib.closedir
closedir.argtypes = [c_dir_p]
closedir.restype = c_int

def listdir(path):
    """
    A generator to return the names of files in the directory passed in
    """
    dir_p = opendir(".")
    try:
        while True:
            p = readdir(dir_p)
            if not p:
                break
            name = p.contents.d_name
            if name not in (".", ".."):
                yield name
    finally:
        closedir(dir_p)


if __name__ == "__main__":
    for name in listdir("."):
        print name
</snippet></ROW><ROW><id>12207445</id><snippet>index.html</snippet></ROW><ROW><id>12207445</id><snippet>200</snippet></ROW><ROW><id>12207445</id><snippet>301</snippet></ROW><ROW><id>12207445</id><snippet>redirect</snippet></ROW><ROW><id>12207445</id><snippet>success: function(msg){
   if (msg=='redirect') {
      //Redirect to the index
   }
   else {
      console.log(msg);
   }
}
</snippet></ROW><ROW><id>12207583</id><snippet>class Seller(models.Model):
    name = models.CharField(max_length=200)

class Customer(models.Model):
    name = models.CharField(max_length=200)
    feedbacks = models.ManyToManyField(Seller, through='Feedback', related_name='feedbacks')

class Feedback(models.Model):
    seller = models.ForeignKey(Seller)
    customer = models.ForeignKey(Customer)
    seller_feedback = models.IntegerField()
    customer_feedback = models.IntegerField()
</snippet></ROW><ROW><id>12207583</id><snippet>customer.feedbacks.all().count()
</snippet></ROW><ROW><id>12207583</id><snippet>for customer in seller.feedbacks.all():
    do_something(customer)
</snippet></ROW><ROW><id>12207583</id><snippet>def lowes_feedback_response(seller):
    try:
        return models.Feedback.filter(seller=seller).order_by('-seller_feedback')[0].customer_feedback
    except models.Feedback.DoesNotExist:
        return None
</snippet></ROW><ROW><id>12208001</id><snippet> &gt;&gt;&gt; print "{0:0.2f}".format(5)
 5.00
</snippet></ROW><ROW><id>12208219</id><snippet>RegisterStub</snippet></ROW><ROW><id>12208219</id><snippet>CreateRPC</snippet></ROW><ROW><id>12208236</id><snippet> import sqlite3
 db = sqlite3.connect("settings.db")
 c = db.cursor()
 c.execute("""CREATE TABLE IF NOT EXISTS userdata (
                    user_name TEXT,
                    settings1 TEXT,
                    settings2 TEXT
                    );""")
 c.execute("INSERT INTO user_data (user_name,settings1,settings2) VALUES (?,?,?)",("bob","some_Value","some Other Value")
 db.commit()  #save it
 c.execute("SELECT * FROM userdata WHERE user_name=?",GetUserName())
 print c.fetchall()
</snippet></ROW><ROW><id>12208236</id><snippet> import pickle
 try:
     with open("settings.dat") as f:
         print pickle.load(f)
 except IOError:
      print "No Settings Found"
 user_data = {"bob":{"path1":"some/path","otherVar":"56"},
              "paul":{"url":"http://docs.python.org/library/sqlite3.html"}
              }
 with open("settings.dat","wb") as f: 
       pickle.dump(f)
</snippet></ROW><ROW><id>12208344</id><snippet>re_strings=re.compile(r"""   "
                             etc.
                             "
                        """,re.VERBOSE);
</snippet></ROW><ROW><id>12208344</id><snippet>\\.|[^\\"]</snippet></ROW><ROW><id>12208344</id><snippet>\.|[^\"]</snippet></ROW><ROW><id>12208344</id><snippet>.</snippet></ROW><ROW><id>12208344</id><snippet>"</snippet></ROW><ROW><id>12208344</id><snippet>r</snippet></ROW><ROW><id>12208476</id><snippet>m2 = format(bin(xx ^ c2)[2:],'0&gt;32')
</snippet></ROW><ROW><id>12208476</id><snippet>b</snippet></ROW><ROW><id>12208476</id><snippet>m1 = int('01010100011001010111001101110100',2)
c1 = int('00111001000001000001000000000001',2)
c2 = int('00111101000100110000110000010001',2)

print format(m1 ^ c1 ^ c2,'0&gt;32b')
</snippet></ROW><ROW><id>12208476</id><snippet>print '{:0&gt;32b}'.format(m1 ^ c1 ^ c2)
</snippet></ROW><ROW><id>12208481</id><snippet>else</snippet></ROW><ROW><id>12208646</id><snippet>print = ('b = ', (math.sqrt((c**2)-(a**2))))
      ^
</snippet></ROW><ROW><id>12208646</id><snippet>print</snippet></ROW><ROW><id>12208646</id><snippet>print</snippet></ROW><ROW><id>12208646</id><snippet>print('b = ', (math.sqrt((c**2)-(a**2))))
</snippet></ROW><ROW><id>12208819</id><snippet>collections.Counter</snippet></ROW><ROW><id>12208819</id><snippet>import collections

the_input = raw_input("Enter numbers... ") 
the_list = [int(x) for x in the_input.strip("[]").split(",")] 
group_counter = collections.Counter(x//10 for x in the_list)
bin_range = xrange(min(group_counter.keys()), max(group_counter.keys()) + 1)
for bin_tens in bin_range:
    print "There were {} in {} to {}".format(group_counter[bin_tens], bin_tens*10, bin_tens*10+9)
</snippet></ROW><ROW><id>12208819</id><snippet>bin_range = range(10)</snippet></ROW><ROW><id>12208940</id><snippet>func</snippet></ROW><ROW><id>12208940</id><snippet>def func(x,a,b):
   return a*x*x + b

for b in xrange(10):
   popt,pcov = curve_fit(lambda x, a: func(x, a, b), x1, x2)
</snippet></ROW><ROW><id>12208940</id><snippet>func</snippet></ROW><ROW><id>12208940</id><snippet>x</snippet></ROW><ROW><id>12208940</id><snippet>a</snippet></ROW><ROW><id>12208940</id><snippet>b</snippet></ROW><ROW><id>12208940</id><snippet>b</snippet></ROW><ROW><id>12208940</id><snippet>curve_fit</snippet></ROW><ROW><id>12209501</id><snippet>raise
</snippet></ROW><ROW><id>12209501</id><snippet>raise e</snippet></ROW><ROW><id>12209501</id><snippet>raise</snippet></ROW><ROW><id>12209574</id><snippet>global flag
while flag:
    do some asynchronous empty callback
flag = True

#operation 3
#use asynchronous method , but i'll use the result do 
#some process then update in operation 4
#switch to other coroutine

#operation 4
#use asynchronous method ,doesn't matter
#switch to other coroutine

flag = False
</snippet></ROW><ROW><id>12209601</id><snippet>functools.partial</snippet></ROW><ROW><id>12209601</id><snippet>lambda</snippet></ROW><ROW><id>12209601</id><snippet>&gt;&gt;&gt; import functools
&gt;&gt;&gt; def need_two_arguments(a,b):
...     print a + b
... 
&gt;&gt;&gt; no_arguments_needed = functools.partial(need_two_arguments, "Hello, ", "World!")
&gt;&gt;&gt; no_arguments_needed()
Hello, World!
&gt;&gt;&gt; no_arguments_needed = (lambda: need_two_arguments("Hello, ", "World!"))
&gt;&gt;&gt; no_arguments_needed()
Hello, World!
</snippet></ROW><ROW><id>12209647</id><snippet>MANIFEST.in</snippet></ROW><ROW><id>12209647</id><snippet>include negar/data/*.dat
</snippet></ROW><ROW><id>12209647</id><snippet>import os
this_dir, this_filename = os.path.split(__file__)
DATA_PATH = os.path.join(this_dir, "data", "data.txt")
print open(DATA_PATH).read()
</snippet></ROW><ROW><id>12210546</id><snippet>dir  = raw_input("Enter dir:")
if not dir:
    dir = raw_input("Do you really want to leave a blank? Enter dir:")
path = raw_input("Enter path:")
if not path:
    path = raw_input("Do you really want to leave a blank? Enter dir:")
</snippet></ROW><ROW><id>12210742</id><snippet>import collections 

the_inputs = []
for i in range(3):
    the_inputs.append(raw_input("Enter numbers {}... ".format(i+1)))

the_lists = []
for the_input in the_inputs:
    the_lists.append([int(x)//10 for x in the_input.strip("[]").split(",")])

for i, the_list in enumerate(the_lists):
    print "Input {}".format(i+1)
    group_counter = collections.Counter(the_list)
    bin_range = range (6) 
    for bin_tens in bin_range: 
        print "There were {} in {} to {}".format(group_counter[bin_tens], bin_tens*10, bin_tens*10+9)
</snippet></ROW><ROW><id>12210770</id><snippet>aa</snippet></ROW><ROW><id>12210770</id><snippet>bb</snippet></ROW><ROW><id>12210770</id><snippet>aa</snippet></ROW><ROW><id>12210770</id><snippet>aa</snippet></ROW><ROW><id>12210770</id><snippet>bb.foo()</snippet></ROW><ROW><id>12210770</id><snippet>bb</snippet></ROW><ROW><id>12210770</id><snippet>aa</snippet></ROW><ROW><id>12210770</id><snippet>aa.b</snippet></ROW><ROW><id>12210770</id><snippet>bb.foo()</snippet></ROW><ROW><id>12210770</id><snippet>import bb
b = 3
bb.foo(b)
</snippet></ROW><ROW><id>12210770</id><snippet>def foo(b):
    print(b)
</snippet></ROW><ROW><id>12210978</id><snippet>if not CheckNetworkFiles() :
    print "Network files not found, run: scons download_network_files to correct it."
    Exit(1)
// else continue build

...
if "download_network_files" in COMMAND_LINE_TARGETS:
    Exit( downloadNetworkFiles() ) // python code for downloading files
</snippet></ROW><ROW><id>12211179</id><snippet>def imported_function():
    return False
</snippet></ROW><ROW><id>12211179</id><snippet>from somewhere import imported_function

def function_to_be_tested():
    return imported_function()
</snippet></ROW><ROW><id>12211179</id><snippet>testme.function_to_be_tested()</snippet></ROW><ROW><id>12211179</id><snippet>False</snippet></ROW><ROW><id>12211179</id><snippet>somewhere</snippet></ROW><ROW><id>12211179</id><snippet>testme</snippet></ROW><ROW><id>12211179</id><snippet>import somewhere
somewhere.__dict__['imported_function'] = lambda : True

import testme
def test_function_to_be_tested():
    print testme.function_to_be_tested()

test_function_to_be_tested()
</snippet></ROW><ROW><id>12211179</id><snippet>testme</snippet></ROW><ROW><id>12211179</id><snippet>import testme

def test_function_to_be_tested():
    print testme.function_to_be_tested()
    import somewhere
    somewhere.__dict__['imported_function'] = lambda : True
    print testme.function_to_be_tested()
    reload(testme)
    print testme.function_to_be_tested()

test_function_to_be_tested()
</snippet></ROW><ROW><id>12211966</id><snippet>AppHelper.runEventLoop()</snippet></ROW><ROW><id>12211966</id><snippet>class MountainLionNotification(Foundation.NSObject, Notification):

    def notify(self, title, subtitle, text, url):
        NSUserNotification = objc.lookUpClass('NSUserNotification')
        NSUserNotificationCenter = objc.lookUpClass('NSUserNotificationCenter')
        notification = NSUserNotification.alloc().init()
        notification.setTitle_(str(title))
        notification.setSubtitle_(str(subtitle))
        notification.setInformativeText_(str(text))
        notification.setSoundName_("NSUserNotificationDefaultSoundName")
        notification.setHasActionButton_(True)
        notification.setOtherButtonTitle_("View")
        notification.setUserInfo_({"action":"open_url", "value":url})
        NSUserNotificationCenter.defaultUserNotificationCenter().setDelegate_(self)
        NSUserNotificationCenter.defaultUserNotificationCenter().scheduleNotification_(notification)

    def userNotificationCenter_didActivateNotification_(self, center, notification):
        userInfo = notification.userInfo()
        if userInfo["action"] == "open_url":
            import subprocess
            subprocess.Popen(['open', userInfo["value"]])
</snippet></ROW><ROW><id>12212104</id><snippet>RCS/index.txt</snippet></ROW><ROW><id>12212104</id><snippet>^(.*/)?((#.*#)|(.*~)|(.*\.py[co])|(.*/RCS/.*)|(\..*)|)$
^(.*/)?((#.*#)|(.*~)|(.*\.py[co])|(.*/RCS/.*)|(\..*))?$
</snippet></ROW><ROW><id>12212223</id><snippet>L = [['22', '14']]
M = [ int(i) for i in L[0] ]
</snippet></ROW><ROW><id>12212380</id><snippet>(?&lt;=[(]\w+(?=[)]))</snippet></ROW><ROW><id>12212380</id><snippet>\w+</snippet></ROW><ROW><id>12212380</id><snippet>^.*\((.*?)\)$
</snippet></ROW><ROW><id>12212380</id><snippet>^\(.*?\)\((.*)\)$
</snippet></ROW><ROW><id>12212386</id><snippet>datetime.now()</snippet></ROW><ROW><id>12212386</id><snippet>def next_date(nowfunc=datetime.now):
    now = nowfunc()
    ...
</snippet></ROW><ROW><id>12212386</id><snippet>class X:
    def __init__(self, nowfunc=datetime.now):
        self._nowfunc = nowfunc

def next_date(self):
    now = self._nowfunc()
    ...
</snippet></ROW><ROW><id>12212386</id><snippet>@patch.object(datetime, 'now')
def test_next_date(self, nowfunc):
    nowfunc.return_value = ... # required result
    # the rest of the test
</snippet></ROW><ROW><id>12212524</id><snippet>import re
pattern = re.compile(r'0\s*,0\s*,0\s*')
with open(filename) as f:
    for line in f:
            if pattern.search(line):
                    print line
</snippet></ROW><ROW><id>12212524</id><snippet>re</snippet></ROW><ROW><id>12212524</id><snippet>in</snippet></ROW><ROW><id>12212524</id><snippet>with open(filename) as f:
    for line in f:
            if '0,0,0' not in line:
                    print line
</snippet></ROW><ROW><id>12212939</id><snippet>import pylab as pl
pl.figure(figsize=(7, 7))  # Don't create an humongous figure
pl.annotate(..., fontsize=1, ...)   # probably need the annotate line *before* savefig
pl.savefig('test.pdf', format='pdf')   # no need for DPI setting, assuming the fonts and figures are all vector based
</snippet></ROW><ROW><id>12212939</id><snippet>fontsize=0.1</snippet></ROW><ROW><id>12213020</id><snippet>import inspect

def print_local_namespace():
    ns = inspect.stack()[1][0].f_locals
    for k, v in ns.iteritems():
        if not k.startswith('__'):
            print '{0} : {1}'.format(k, v)


def test(a, b):
    c = 'Freely'
    print_local_namespace()
    return a + b + c


test('I', 'P')
</snippet></ROW><ROW><id>12213174</id><snippet>print('        %-40s%s' % (self.serverrqs()*int(self.nbpro), self.servernbrqs()))
</snippet></ROW><ROW><id>12213293</id><snippet>python</snippet></ROW><ROW><id>12213293</id><snippet>python-dev</snippet></ROW><ROW><id>12213293</id><snippet>affinity/_affinity.c:14:20: error: Python.h: No such file or directory
</snippet></ROW><ROW><id>12213399</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>12213399</id><snippet>import shutil
import os.path

with open('C:\\Dropbox\\Python\\master.txt','wb') as output:
    for path, f_name in files:
        with open(os.path.join(path, f_name), 'rb') as input:
            shutil.copyfileobj(input, output)
        output.write(b'\n') # insert extra newline between files
</snippet></ROW><ROW><id>12213399</id><snippet>os.path</snippet></ROW><ROW><id>12213399</id><snippet>open(path, mode, encoding='UTF8')
</snippet></ROW><ROW><id>12213466</id><snippet>variable_1</snippet></ROW><ROW><id>12213466</id><snippet>False</snippet></ROW><ROW><id>12213466</id><snippet>0</snippet></ROW><ROW><id>12213466</id><snippet>variable_1</snippet></ROW><ROW><id>12213466</id><snippet>if variable_1:
  x = variable_1
else:
  x = 0
</snippet></ROW><ROW><id>12213723</id><snippet>options = ChromeOptions();
options.add_argument("--start-maximized");
driver = ChromeDriver(options);
</snippet></ROW><ROW><id>12214182</id><snippet>np.where</snippet></ROW><ROW><id>12214182</id><snippet>y</snippet></ROW><ROW><id>12214182</id><snippet>&gt;&gt;&gt; X = csr_matrix([[1,3,4], [3,2,2], [4,8,1]])
&gt;&gt;&gt; y = np.array([-1, 3, -4])
&gt;&gt;&gt; y_pos = np.where(y &gt; 0)[0]
&gt;&gt;&gt; y_neg = np.where(y &lt; 0)[0]
&gt;&gt;&gt; X_pos = X[y_pos]
&gt;&gt;&gt; X_neg = X[y_neg]
</snippet></ROW><ROW><id>12214182</id><snippet>&gt;&gt;&gt; X_pos
&lt;1x3 sparse matrix of type '&lt;type 'numpy.int64'&gt;'
    with 3 stored elements in Compressed Sparse Row format&gt;
&gt;&gt;&gt; X_neg
&lt;2x3 sparse matrix of type '&lt;type 'numpy.int64'&gt;'
    with 6 stored elements in Compressed Sparse Row format&gt;
&gt;&gt;&gt; X_pos.A
array([[3, 2, 2]])
&gt;&gt;&gt; X_neg.A
array([[1, 3, 4],
       [4, 8, 1]])
</snippet></ROW><ROW><id>12214339</id><snippet>.pop</snippet></ROW><ROW><id>12214339</id><snippet>appended = input.pop()
</snippet></ROW><ROW><id>12214339</id><snippet>input</snippet></ROW><ROW><id>12214339</id><snippet>appended = input.pop(0)
</snippet></ROW><ROW><id>12214396</id><snippet>Does (C)Python create threads on its own, and if so, how can I make use of that?</snippet></ROW><ROW><id>12214427</id><snippet>CELERY_IMPORTS = ('celery_instance.tasks',)
</snippet></ROW><ROW><id>12214453</id><snippet>BS (Backspace)</snippet></ROW><ROW><id>12214453</id><snippet>'('</snippet></ROW><ROW><id>12214453</id><snippet>KEY_DOWN</snippet></ROW><ROW><id>12214453</id><snippet>pygame.key.get_pressed()</snippet></ROW><ROW><id>12214453</id><snippet>    if e.type == KEYDOWN:
        k = pygame.key.get_pressed()
        m = pygame.key.get_mods()
        if m &amp; KMOD_SHIFT and k[K_9]:
            if m &amp; KMOD_CTRL:
                print "controlled yay!"
            else:
                print "yay!"
</snippet></ROW><ROW><id>12214532</id><snippet>os.chdir("/home/local/username/project/scrapy/modulename")
</snippet></ROW><ROW><id>12214532</id><snippet>import</snippet></ROW><ROW><id>12214532</id><snippet>sys.path.append("/home/local/username/project/scrapy/modulename")
</snippet></ROW><ROW><id>12214701</id><snippet>__del__</snippet></ROW><ROW><id>12214701</id><snippet>__del__</snippet></ROW><ROW><id>12214701</id><snippet>eomReceived</snippet></ROW><ROW><id>12214701</id><snippet>connectionLost</snippet></ROW><ROW><id>12214701</id><snippet>IMessage</snippet></ROW><ROW><id>12214701</id><snippet>IMessage</snippet></ROW><ROW><id>12214701</id><snippet>IMessageDelivery</snippet></ROW><ROW><id>12214701</id><snippet>validateTo</snippet></ROW><ROW><id>12214701</id><snippet>eomReceived</snippet></ROW><ROW><id>12214701</id><snippet>connectionLost</snippet></ROW><ROW><id>12214880</id><snippet>&gt;&gt;&gt; s = "Hello world !!"
&gt;&gt;&gt; ":".join("{0:x}".format(ord(c)) for c in s)
'48:65:6c:6c:6f:20:77:6f:72:6c:64:20:21:21
</snippet></ROW><ROW><id>12215080</id><snippet>gc.collect([generation])
With no arguments, run a full collection. The optional argument generation may be an integer specifying which generation to collect (from 0 to 2). A ValueError is raised if the generation number is invalid. The number of unreachable objects found is returned.

Changed in version 2.5: The optional generation argument was added.

Changed in version 2.6: The free lists maintained for a number of built-in types are cleared whenever a full collection or collection of the highest generation (2) is run. Not all items in some free lists may be freed due to the particular implementation, in particular int and float.
</snippet></ROW><ROW><id>12215094</id><snippet>pressure</snippet></ROW><ROW><id>12215094</id><snippet>import sys
from PySide import QtCore, QtGui

class MyWidget(QtGui.QWidget):
    def tabletEvent(self, e):
        print(e.pressure())

app = QtGui.QApplication(sys.argv)
widget = MyWidget()
widget.show()
app.exec_()
</snippet></ROW><ROW><id>12215150</id><snippet>ADict = dict((x.get('key'), x.find('A').text) for x in fields)
BDict = dict((x.get('key'), x.find('B').text) for x in fields)
</snippet></ROW><ROW><id>12216055</id><snippet>&lt;div id="article"&gt;
</snippet></ROW><ROW><id>12216257</id><snippet>def adjust_endpoint(length, endpoint, step):
     if endpoint &lt; 0:
         endpoint += length
         if endpoint &lt; 0:
             endpoint = -1 if step &lt; 0 else 0
     elif endpoint &gt;= length:
         endpoint = length - 1 if step &lt; 0 else length
     return endpoint

def adjust_slice(length, start, stop, step):
     if step is None:
         step = 1
     elif step == 0:
         raise ValueError("step cannot be 0")

     if start is None:
         start = length - 1 if step &lt; 0 else 0
     else:
         start = adjust_endpoint(length, start, step)

     if stop is None:
         stop = -1 if step &lt; 0 else length
     else:
         stop = adjust_endpoint(length, stop, step)

     return start, stop, step

def slice_indices(length, start, stop, step):
     start, stop, step = adjust_slice(length, start, stop, step)
     i = start
     while (i &gt; stop) if step &lt; 0 else (i &lt; stop):
         yield i
         i += step

def mySlice(L, start=None, stop=None, step=None):
     return [L[i] for i in slice_indices(len(L), start, stop, step)]
</snippet></ROW><ROW><id>12216264</id><snippet>target[:] = [(x+y) for x,y in itertools.izip(target,item['values'])]
</snippet></ROW><ROW><id>12216264</id><snippet>target[:]</snippet></ROW><ROW><id>12216264</id><snippet>target</snippet></ROW><ROW><id>12216264</id><snippet>a = [1,2,3,4]
a[1:3] = ["foo","bar"]
print(a)  # [1, 'foo', 'bar', 4]
</snippet></ROW><ROW><id>12216264</id><snippet>a[1:3] = (x for x in iterable)
</snippet></ROW><ROW><id>12216264</id><snippet>target[:] = ((x+y) for x,y in itertools.izip(target,item['values']))
</snippet></ROW><ROW><id>12216355</id><snippet>result = z[z_idx].diagonal()
</snippet></ROW><ROW><id>12216355</id><snippet>arange</snippet></ROW><ROW><id>12216355</id><snippet>result = z[z_idx, np.arange(z_idx.size)]
</snippet></ROW><ROW><id>12216355</id><snippet>np.indices</snippet></ROW><ROW><id>12216355</id><snippet>result = z[z_idx, np.indices(z_idx.shape)[0]]
</snippet></ROW><ROW><id>12216506</id><snippet>  item.sort(key=lambda x: x['light'])
</snippet></ROW><ROW><id>12216784</id><snippet>\[([^\]]*)\][\r\n]+(?:(?!Name:).*[\r\n]+)*?Name:\s*(.*)
</snippet></ROW><ROW><id>12216784</id><snippet>\1</snippet></ROW><ROW><id>12216784</id><snippet>\2</snippet></ROW><ROW><id>12216784</id><snippet>import re

data  = """[SectionTitle0]
...
Name: NameOfTechC
...

[SectionTitle1]
...
Name: NameOfZoneC
...
"""

regexStr = r'\[([^\]]*)\][\r\n]+(?:(?!Name:).*[\r\n]+)*?Name:\s*(.*)'
regex    = re.compile(regexStr)
regex.findall(data)
</snippet></ROW><ROW><id>12216799</id><snippet>def get_detail(self, slug):
    qr = v1_api.canonical_resource_for('question')
    try:
        question = qr.cached_obj_get(slug=slug)
    except Question.DoesNotExist:
        raise Http404

    bundle = qr.full_dehydrate(qr.build_bundle(obj=question))

    # create response
    desired_format = qr.determine_format(self.request)
    serialized = qr.serialize(self.request, bundle, desired_format)
    return serialized
</snippet></ROW><ROW><id>12216935</id><snippet>urlpatterns = patterns('',
    # Examples:
    # url(r'^$', 'Permissions.views.home', name='home'),
    # url(r'^Permissions/', include('Permissions.foo.urls')),
    # url(r'^Permissions$', include('Permissions.Authenication.urls')),

    url(r'^admin/doc/', include('django.contrib.admindocs.urls')),
    url(r'^admin/', include(admin.site.urls)),
    url(r'^$', RedirectView.as_view(url='/welcome/')) #Error was here
)
</snippet></ROW><ROW><id>12216935</id><snippet>urlpatterns += patterns('',
    url(r'^register/$', 'drinker.views.DrinkerRegistration',name='DrinkerRegistration'),
    url(r'^welcome/$','drinker.views.DrinkerWelcome',name='DrinkerWelcome'),
    url(r'^home/(?P&lt;userpk&gt;[^/]+)/$','drinker.views.DrinkerHome', name='DrinkerHome') # Comma was here     
)
</snippet></ROW><ROW><id>12217002</id><snippet>sla_list</snippet></ROW><ROW><id>12217002</id><snippet>sla_list[1]</snippet></ROW><ROW><id>12217002</id><snippet>start_out</snippet></ROW><ROW><id>12217002</id><snippet>sla_list[2]</snippet></ROW><ROW><id>12217002</id><snippet>timedelta = sla_list[1] - sla_list[2]
timedelta = '%02d:%02d' % divmod(timedelta.total_seconds(), 60)
</snippet></ROW><ROW><id>12217002</id><snippet>time.gmtime(timedelta)</snippet></ROW><ROW><id>12217002</id><snippet>strftime</snippet></ROW><ROW><id>12217002</id><snippet>divmod()</snippet></ROW><ROW><id>12217002</id><snippet>service__name</snippet></ROW><ROW><id>12217002</id><snippet>itertools.groupby</snippet></ROW><ROW><id>12217002</id><snippet>from itertools import groupby
from operator import itemgetter

sla_list = self.object_list.filter(types__name="Unplanned").filter(service__sla=True).order_by('service__name').values_list('service__name', 'end_out', 'start_out')
sla_deltas = {}
for name, entries in groupby(sla_list, itemgetter(0)):
    sla_deltas[name] = sum(end - start for name, end, start in entries)
</snippet></ROW><ROW><id>12217002</id><snippet>groupby</snippet></ROW><ROW><id>12217002</id><snippet>sla__name</snippet></ROW><ROW><id>12217002</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>12217002</id><snippet>sum()</snippet></ROW><ROW><id>12217091</id><snippet>def myfunction():
    start = time.time()
    while time.time() &lt; start + 5:
        do1()
        do2()
        do3()
</snippet></ROW><ROW><id>12217091</id><snippet>do1</snippet></ROW><ROW><id>12217091</id><snippet>do2</snippet></ROW><ROW><id>12217091</id><snippet>do3</snippet></ROW><ROW><id>12217091</id><snippet>myFunction</snippet></ROW><ROW><id>12217091</id><snippet>def myfunction():
    todo = itertools.cycle([do1, do2, do3])
    start = time.time()
    while time.time() &lt; start + 5:
        todo.next()()
</snippet></ROW><ROW><id>12217224</id><snippet>append</snippet></ROW><ROW><id>12217224</id><snippet>None</snippet></ROW><ROW><id>12217224</id><snippet>a.append(4)</snippet></ROW><ROW><id>12217224</id><snippet>a</snippet></ROW><ROW><id>12217224</id><snippet>a.append('4')</snippet></ROW><ROW><id>12217224</id><snippet>append</snippet></ROW><ROW><id>12217224</id><snippet>None</snippet></ROW><ROW><id>12217294</id><snippet>urllib.urlopen(stats_URI, proxies={}).read()
</snippet></ROW><ROW><id>12217441</id><snippet>getattr</snippet></ROW><ROW><id>12217441</id><snippet>numpy</snippet></ROW><ROW><id>12217441</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.dtype('long')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: data type not understood
</snippet></ROW><ROW><id>12217441</id><snippet>&gt;&gt;&gt; getattr(np, 'long')
&lt;type 'long'&gt;
&gt;&gt;&gt; np.dtype(getattr(np, 'long'))
dtype('int64')
&gt;&gt;&gt; np.dtype(getattr(np, 'int'))
dtype('int32')
&gt;&gt;&gt; np.dtype(getattr(np, 'float64'))
dtype('float64')
&gt;&gt;&gt; np.dtype(getattr(np, 'float'))
dtype('float64')
</snippet></ROW><ROW><id>12217456</id><snippet>vara</snippet></ROW><ROW><id>12217456</id><snippet>__init__</snippet></ROW><ROW><id>12217456</id><snippet>varb</snippet></ROW><ROW><id>12217456</id><snippet>&gt;&gt;&gt; class Foo(object):
...     classVar = []
...     def __init__(self):
...         self.instVar = []
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; g = Foo()
&gt;&gt;&gt; f.classVar
[]
&gt;&gt;&gt; f.instVar
[]
&gt;&gt;&gt; g.classVar
[]
&gt;&gt;&gt; g.instVar
[]
&gt;&gt;&gt; f.instVar.append(1)
&gt;&gt;&gt; f.instVar
[1]
&gt;&gt;&gt; g.instVar
[]
&gt;&gt;&gt; f.classVar.append(1)
&gt;&gt;&gt; f.classVar
[1]
&gt;&gt;&gt; g.classVar
[1]
</snippet></ROW><ROW><id>12217456</id><snippet>f.classVar</snippet></ROW><ROW><id>12217456</id><snippet>g.classVar</snippet></ROW><ROW><id>12217456</id><snippet>instVar</snippet></ROW><ROW><id>12217553</id><snippet>from collections import Counter
d1 = {'eggs':3, 'ham':2, 'toast':1}
d2 = {'eggs':2,'ham':1}
dresult = Counter(d1) + Counter(d2)  #Counter({'eggs': 5, 'ham': 3, 'toast': 1})
</snippet></ROW><ROW><id>12217553</id><snippet>defaultdict</snippet></ROW><ROW><id>12217553</id><snippet>from collections import defaultdict    
d1 = {'eggs':3, 'ham':2, 'toast':1}
d2 = {'eggs':2,'ham':1}
d = defaultdict(int)
dresult.update(d1)
for k,v in d2.items():
   dresult[k] += v
</snippet></ROW><ROW><id>12217553</id><snippet>setdefault</snippet></ROW><ROW><id>12217584</id><snippet>src_pix</snippet></ROW><ROW><id>12217584</id><snippet>np_pix = numpy.array(srx_pix)
</snippet></ROW><ROW><id>12217584</id><snippet>numpy.sum</snippet></ROW><ROW><id>12217584</id><snippet>rgb = numpy.sum(np_pix)
</snippet></ROW><ROW><id>12217584</id><snippet>rgb = numpy.mean(np_pix)
</snippet></ROW><ROW><id>12217584</id><snippet>numpy.asarray</snippet></ROW><ROW><id>12217584</id><snippet>rgb_slice = numpy.mean(np_pix[X_start:X_end,Y_start:Y_end])
</snippet></ROW><ROW><id>12217626</id><snippet>yield</snippet></ROW><ROW><id>12217626</id><snippet>.next()</snippet></ROW><ROW><id>12217626</id><snippet>&gt;&gt;&gt; def foo():
...     print 'Foo called'
...     yield 'bar'
...     print 'Still in foo'
...     yield 'baz'
... 
&gt;&gt;&gt; foogen = foo()
&gt;&gt;&gt; foogen.next()
Foo called
'bar'
&gt;&gt;&gt; foogen.next()
Still in foo
'baz'
&gt;&gt;&gt; for val in foo():
...     pass
... 
Foo called
Still in foo
</snippet></ROW><ROW><id>12217626</id><snippet>Foo called</snippet></ROW><ROW><id>12217626</id><snippet>.next()</snippet></ROW><ROW><id>12217626</id><snippet>for res in extractIngredientInfo(ingredientLine, sectionTitle):
    yield res
</snippet></ROW><ROW><id>12217884</id><snippet>delete=False</snippet></ROW><ROW><id>12217884</id><snippet>with tempfile.NamedTemporaryFile('w',prefix=section,dir=indir,delete=False) as f:
     pass #Do something with the file here.
</snippet></ROW><ROW><id>12217897</id><snippet># Extra arguments to celeryd
CELERYD_OPTS="--concurrency=1"
</snippet></ROW><ROW><id>12218119</id><snippet>sum(n for _, n in structure)
</snippet></ROW><ROW><id>12218124</id><snippet>sqlite3.Row</snippet></ROW><ROW><id>12218124</id><snippet>memcon.row_factory = sqlite3.Row
memdata.execute("select * from tabletwo where tabletwo.Gene_ID == 'NFYA'")
nfya_row = memdata.fetchone()

memdata.execute("SELECT tableone.SampleID from tableone WHERE tableone.Diagnos=='RH'")
for row in memdata:
    sampleID = row['SampleID']
    print sampleID, nfya_row[sampleID]
</snippet></ROW><ROW><id>12218124</id><snippet>nfya_row</snippet></ROW><ROW><id>12218124</id><snippet>sqlite3.Row</snippet></ROW><ROW><id>12218124</id><snippet>tabelone</snippet></ROW><ROW><id>12218124</id><snippet>apsw</snippet></ROW><ROW><id>12218124</id><snippet>memdata.execute("select * from tabletwo where tabletwo.Gene_ID == 'NFYA'")
nfya_row = {desc[0]: column for desc, column in zip(memdata.getdescription(), memdata.next())}

memdata.execute("SELECT tableone.SampleID from tableone WHERE tableone.Diagnos=='RH'")
for row in memdata:
    sampleID = row[0]
    print sampleID, nfya_row[sampleID]
</snippet></ROW><ROW><id>12218180</id><snippet>Command(target, source, action, [key=val, ...])
</snippet></ROW><ROW><id>12218180</id><snippet>Command(source=['http://archive.apache.org/dist/xmlgraphics/batik/batik-1.6.zip',
                'http://archive.apache.org/dist/commons/collections/binaries/commons-collections-3.0.tar.gz',
                'http://archive.apache.org/dist/commons/logging/binaries/commons-logging-1.0.4.tar.gz'],
        target=['./thirdparty/batik/batik-1.6.zip',
                './thirdparty/commons-collections-3.0.tar.gz',
                './thirdparty/commons-logging-1.0.4.tar.gz'],
        action=external_dependencies)
</snippet></ROW><ROW><id>12218395</id><snippet>import xml.etree.ElementTree as ET

def xml_data():
    root = ET.parse("opidea_2.xml")
    logentries = root.findall("logentry")
    content = ""

    for logentry in logentries:
        date = logentry.find("date").text
        content += date + '\n '
        msg = logentry.find("msg")
        if msg is not None:
            content += "   Comments: \n        " + msg.text + '\n\n'
        else:
            content += "No comment made."

    print content

if __name__ == "__main__":
    xml_data()
</snippet></ROW><ROW><id>12218395</id><snippet>2012-08-06T21:01:52.494219Z
    Comments: 
        PATCH_BRANCH:N/A
 BUG_NUMBER:N/A
 FEATURE_AFFECTED:N/A
 OVERVIEW:N/A
  Adding the SVN log size requirement to the branch 
</snippet></ROW><ROW><id>12218559</id><snippet># reindex both to union of indices
df_a = df_a.reindex(df_a.index | df_b.index)
df_b = df_b.reindex(df_a.index | df_b.index)

# replacement criteria can be put in this lambda function
combiner = lambda: x, y: np.where(y &lt; x, y, x)
df_c = df_a.combine(df.b, combiner)
</snippet></ROW><ROW><id>12218593</id><snippet>proxies</snippet></ROW><ROW><id>12218593</id><snippet>proxies</snippet></ROW><ROW><id>12218593</id><snippet>repr()</snippet></ROW><ROW><id>12218693</id><snippet>__doc__</snippet></ROW><ROW><id>12218693</id><snippet>def docstring(docstr, sep="\n"):
    """
    Decorator: Append to a function's docstring.
    """
    def _decorator(func):
        if func.__doc__ == None:
            func.__doc__ = docstr
        else:
            func.__doc__ = sep.join([func.__doc__, docstr])
        return func
    return _decorator
</snippet></ROW><ROW><id>12218693</id><snippet>@docstring("copyright by nobody")
def testme():
    "This function does nothing"
    pass
</snippet></ROW><ROW><id>12218693</id><snippet>from re import sub
docstring("Copyright unknown")(sub)
</snippet></ROW><ROW><id>12218829</id><snippet>some_list[::len(some_list)-1]
</snippet></ROW><ROW><id>12218829</id><snippet>[some_list[0], some_list[-1]]
</snippet></ROW><ROW><id>12218925</id><snippet>from collections import defaultdict
from random import random as rn

class Grid(object):
    def __init__(self, spacing):
        self.spacing = spacing
        self.griddict = defaultdict(int)

    def add_point(self, coords):
        """
        `vid`, a voxel id, is a tuple of indices, indicating one grid
        bin for each dimension, e.g. (1, 5, 2)
        rule: i_x = int(floor(x_coord / spacing))
        """
        vid = tuple([int(c//self.spacing) for c in coords])
        self.griddict[vid] += 1

    def get_point(self, coords):
        vid = tuple([int(c//self.spacing) for c in coords])
        return self.griddict[vid]

    def vid_centercoords(self, vid):
        """
        Return the real coordinates in space for a certain voxel,
        which is identified by its voxel id `vid` (a tuple of indices).
        """
        return tuple([(i-1)*self.spacing + self.spacing/2 for i in vid])



N = 20
fillpoints = [(rn(),rn(),rn()) for _ in xrange(N)]
testpoints = [(rn(),rn(),rn()) for _ in xrange(N)]

grid = Grid(spacing=0.3)

for p in fillpoints:
    grid.add_point(p)

print [grid.get_point(p) for p in testpoints]
</snippet></ROW><ROW><id>12218925</id><snippet>$ python gridtest.py 
[2, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]
</snippet></ROW><ROW><id>12218925</id><snippet>fillpoints = [(0.334, 0.333, 0.333), (0.167, 0.666, 0.167), (0.167, 0.666, 0.167), (0.5, 0.5, 0), (0.5, 0.5, 0), (0.5, 0.5, 0)]
testpoints = [(0.333, 0.333, 0.333), (0.16667, 0.6666667, 0.17), (0.34, 0.33, 0.33), (0.5001, 0.4999, 0.0)]

grid = Grid(spacing=0.03)
for p in fillpoints:
    grid.add_point(p)
print [grid.get_point(p) for p in testpoints]
</snippet></ROW><ROW><id>12218925</id><snippet>[1, 2, 1, 3]</snippet></ROW><ROW><id>12218925</id><snippet>spacing=3*tolerance</snippet></ROW><ROW><id>12219132</id><snippet>my_array</snippet></ROW><ROW><id>12219132</id><snippet>temp = np.empty((my_array.shape[0], my_array.shape[1]+1))
</snippet></ROW><ROW><id>12219132</id><snippet>temp[:,1:] = my_array
temp[:,0] = np.arange(1, len(my_array)+1)
</snippet></ROW><ROW><id>12219132</id><snippet>np.savetxt</snippet></ROW><ROW><id>12219132</id><snippet>int</snippet></ROW><ROW><id>12219132</id><snippet>"%10.6e"</snippet></ROW><ROW><id>12219132</id><snippet>with open('final.csv', 'w') as f:
    f.write("SP,1,2,3\n")
    np.savetxt(f, temp, fmt="%i,%10.6e,%10.6e,%10.6e",delimiter=",")
</snippet></ROW><ROW><id>12219132</id><snippet>my_array</snippet></ROW><ROW><id>12219132</id><snippet>fmt = ",".join(["%i"] + ["%10.6e"] * my_array.shape[1])
np.savetxt(f, temp, fmt=fmt, delimiter=",")
</snippet></ROW><ROW><id>12219552</id><snippet>[(barcode(productId), metric(size)) for name, size in [lookup(productId)]][0]
</snippet></ROW><ROW><id>12219552</id><snippet>next((barcode(productId), metric(size)) for name, size in [lookup(productId)])
</snippet></ROW><ROW><id>12219552</id><snippet>(lambda (name, size): (barcode(productId), metric(size)))(lookup(productId))
</snippet></ROW><ROW><id>12219552</id><snippet>def barcode_metric(productId):
   name, size = lookup(productId)
   return barcode(productId), metric(size)
list2 = [barcode_metric(productId) for productId in list]
</snippet></ROW><ROW><id>12219596</id><snippet>.ipy</snippet></ROW><ROW><id>12219596</id><snippet>$ ln -s rcode.py rcode.ipy
$ ipython rcode.ipy
</snippet></ROW><ROW><id>12219643</id><snippet>from PyQt4 import QtGui, QtCore

class MyFrame(QtGui.QGraphicsView):
    def __init__( self, parent = None ):
        super(MyFrame, self).__init__(parent)

        self.setScene(QtGui.QGraphicsScene())

        # add some items
        x = 0
        y = 0
        w = 45
        h = 45
        pen = QtGui.QPen(QtGui.QColor(QtCore.Qt.green))
        brush = QtGui.QBrush(pen.color().darker(150))

        item = self.scene().addEllipse(x, y, w, h, pen, brush)
        item.setFlag(QtGui.QGraphicsItem.ItemIsMovable)

if ( __name__ == '__main__' ):
    app = QtGui.QApplication([])
    f = MyFrame()
    f.show()
    app.exec_()
</snippet></ROW><ROW><id>12219643</id><snippet>from PyQt4 import QtGui, QtCore

class MyFrame(QtGui.QGraphicsView):
    def __init__( self, parent = None ):
        super(MyFrame, self).__init__(parent)

        scene = QtGui.QGraphicsScene()
        self.setScene(scene)

        # add some items
        x = 0
        y = 0
        w = 45
        h = 45
        pen   = QtGui.QPen(QtGui.QColor(QtCore.Qt.green))
        brush = QtGui.QBrush(pen.color().darker(150))

        item = scene.addEllipse(x, y, w, h, pen, brush)
        item.setFlag(QtGui.QGraphicsItem.ItemIsMovable)

        # create an open path
        path = QtGui.QPainterPath()
        path.moveTo(-w, -h)
        path.lineTo(-w, h)
        path.lineTo(w, h)
        path.lineTo(w, -h)

        clr   = QtGui.QColor('blue')
        clr.setAlpha(120)
        brush = QtGui.QBrush(clr)
        pen   = QtGui.QPen(QtCore.Qt.NoPen)
        fill_item = scene.addRect(-w, y, w*2, h, pen, brush)
        path_item = scene.addPath(path)

if ( __name__ == '__main__' ):
    app = QtGui.QApplication([])
    f = MyFrame()
    f.show()
    app.exec_()
</snippet></ROW><ROW><id>12219675</id><snippet>cat</snippet></ROW><ROW><id>12219675</id><snippet>dog</snippet></ROW><ROW><id>12219675</id><snippet>'cat|dog'</snippet></ROW><ROW><id>12219675</id><snippet>'|'</snippet></ROW><ROW><id>12219675</id><snippet>from ply.lex import TOKEN
data = data.split() #make data a list of keywords

@TOKEN('|'.join(data))
def t_KEYWORD(t):
    return t
</snippet></ROW><ROW><id>12219914</id><snippet>class Message(models.Model):
    from = models.ForeignKey(User)
    to = models.ManyToManyField(User)

    @staticmethod
    def get_messages_to(user):
        return Message.objects.filter(to=user)

    @staticmethod
    def get_messages_from(user):
        return Message.objects.filter(from=user)
</snippet></ROW><ROW><id>12219937</id><snippet>pyuic</snippet></ROW><ROW><id>12219937</id><snippet>QMainWindow</snippet></ROW><ROW><id>12219937</id><snippet>MyForm</snippet></ROW><ROW><id>12219937</id><snippet>self</snippet></ROW><ROW><id>12219937</id><snippet>QMainWindow</snippet></ROW><ROW><id>12219937</id><snippet>setupUi</snippet></ROW><ROW><id>12219937</id><snippet>MainWindow</snippet></ROW><ROW><id>12219937</id><snippet>self.resize(300, 300)
</snippet></ROW><ROW><id>12219996</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>12219996</id><snippet>/home/yourname/bin/scikit-learn</snippet></ROW><ROW><id>12219996</id><snippet>.bashrc</snippet></ROW><ROW><id>12219996</id><snippet>export PYTHONPATH="/home/yourname/bin/scikit-learn";</snippet></ROW><ROW><id>12219996</id><snippet>python</snippet></ROW><ROW><id>12219996</id><snippet>import sklearn</snippet></ROW><ROW><id>12219996</id><snippet>sklearn.__verion__</snippet></ROW><ROW><id>12219996</id><snippet>'0.12-git'</snippet></ROW><ROW><id>12219996</id><snippet>0.11</snippet></ROW><ROW><id>12219996</id><snippet>sys.path</snippet></ROW><ROW><id>12219996</id><snippet>list</snippet></ROW><ROW><id>12219996</id><snippet>sys.path</snippet></ROW><ROW><id>12219996</id><snippet>sys.path</snippet></ROW><ROW><id>12219996</id><snippet>sys.path</snippet></ROW><ROW><id>12219996</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>12219996</id><snippet>sys.path</snippet></ROW><ROW><id>12219996</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>12219996</id><snippet>sys.path</snippet></ROW><ROW><id>12219996</id><snippet>sys.path</snippet></ROW><ROW><id>12219996</id><snippet>import sys</snippet></ROW><ROW><id>12219996</id><snippet>print sys.path</snippet></ROW><ROW><id>12219996</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>12219996</id><snippet>import sys
sys.path.insert(0, '/home/yourname/bin/scikit-learn')
import sklearn
</snippet></ROW><ROW><id>12220244</id><snippet>pip</snippet></ROW><ROW><id>12220244</id><snippet>virtualenv</snippet></ROW><ROW><id>12220338</id><snippet>verify(good_cert, sig, content, digest)
</snippet></ROW><ROW><id>12220338</id><snippet>crypto.verify(cert, self.sig, hashed, 'sha1')
</snippet></ROW><ROW><id>12220338</id><snippet># N.B. cert = X509 object (from crypto.load_certificate())
crypto.verify(cert, self.sig, data, 'sha1')
</snippet></ROW><ROW><id>12220464</id><snippet>reactor</snippet></ROW><ROW><id>12220464</id><snippet>reactor.callInThread</snippet></ROW><ROW><id>12220464</id><snippet>threads.deferToThread</snippet></ROW><ROW><id>12220602</id><snippet>array</snippet></ROW><ROW><id>12220602</id><snippet>for task in tasks:
    result=np.array([])
    for subject in subjects:
        f=np.load('%d/%s.npy' % (subject,event))
        result=np.append(result,f)
    mu=np.mean(result)
    sav=np.save('%s' %(task),mu)
</snippet></ROW><ROW><id>12220742</id><snippet>query.get()</snippet></ROW><ROW><id>12220742</id><snippet>query = NDB_Model.query(NDB_Model.some_property == some_value)

entity = query.get()
if entity is not None:
    # Do stuff
</snippet></ROW><ROW><id>12220742</id><snippet>query.fetch(n)</snippet></ROW><ROW><id>12220742</id><snippet>n</snippet></ROW><ROW><id>12220742</id><snippet>len()</snippet></ROW><ROW><id>12220877</id><snippet>%d</snippet></ROW><ROW><id>12220877</id><snippet>%f</snippet></ROW><ROW><id>12220877</id><snippet>%s</snippet></ROW><ROW><id>12220900</id><snippet>datetime.time</snippet></ROW><ROW><id>12220900</id><snippet>strftime</snippet></ROW><ROW><id>12220900</id><snippet>:</snippet></ROW><ROW><id>12220900</id><snippet>time</snippet></ROW><ROW><id>12220900</id><snippet>def load(timestr):
    hours,minutes,seconds = timestr.split(":")
    return datetime.time(hours,minutes,seconds)
</snippet></ROW><ROW><id>12220965</id><snippet>__bases__</snippet></ROW><ROW><id>12220965</id><snippet>def test_derived():
    patcher = mock.patch.object(Derived, '__bases__', (mock.Mock,))
    with patcher:
        patcher.is_local = True
        d = Derived()
        print d.foo()
</snippet></ROW><ROW><id>12220965</id><snippet>is_local</snippet></ROW><ROW><id>12220965</id><snippet>mock.patch</snippet></ROW><ROW><id>12220965</id><snippet>delattr</snippet></ROW><ROW><id>12220979</id><snippet>import csv
from collections import defaultdict

def build_dict(source_file):
    projects = defaultdict(dict)
    headers = ['Product', 'Price', 'Cost', 'Brand']
    with open(source_file, 'rb') as fp:
        reader = csv.DictReader(fp, fieldnames=headers, dialect='excel',
                                skipinitialspace=True)
        for rowdict in reader:
            if None in rowdict:
                del rowdict[None]
            brand = rowdict.pop("Brand")
            product = rowdict.pop("Product")
            projects[brand][product] = rowdict
    return dict(projects)

source_file = 'merged.csv'
print build_dict(source_file)
</snippet></ROW><ROW><id>12220979</id><snippet>{'microsoft': {'green widget': {'Cost': '5', 'Price': '7'},
               'purple widget': {'Cost': '6', 'Price': '7'}},
 'sony': {'blue widget': {'Cost': '4', 'Price': '5'},
          'red widget': {'Cost': '5', 'Price': '6'}}}
</snippet></ROW><ROW><id>12220979</id><snippet>merged.csv</snippet></ROW><ROW><id>12220979</id><snippet>defaultdict</snippet></ROW><ROW><id>12220979</id><snippet>dict</snippet></ROW><ROW><id>12220979</id><snippet>Brand</snippet></ROW><ROW><id>12220979</id><snippet>Product</snippet></ROW><ROW><id>12220979</id><snippet>DictReader</snippet></ROW><ROW><id>12220979</id><snippet>reader</snippet></ROW><ROW><id>12221172</id><snippet># -*- Mode: Python -*-
# vi:si:et:sw=4:sts=4:ts=4

import pkgutil
import twisted

for importer, modname, ispkg in pkgutil.walk_packages(
    path=twisted.__path__,
    prefix=twisted.__name__+'.',
    onerror=lambda x: None):
        # skip tests
        if modname.find('test') &gt; -1: 
            continue
        print(modname)
        # gloss over import errors
        try:
            __import__(modname)
        except:
            print 'Failed importing', modname
            pass

# show that we actually imported all these, by showing one subpackage is imported
print twisted.python
</snippet></ROW><ROW><id>12221339</id><snippet>setup.py</snippet></ROW><ROW><id>12221339</id><snippet>lib3to2</snippet></ROW><ROW><id>12221339</id><snippet>pip</snippet></ROW><ROW><id>12221339</id><snippet>pip</snippet></ROW><ROW><id>12221339</id><snippet>pip install https://bitbucket.org/spirit/guess_language/downloads/guess_language-spirit-0.5a1.tar.bz2
</snippet></ROW><ROW><id>12221339</id><snippet>3to2</snippet></ROW><ROW><id>12221339</id><snippet>$ cd guess_language-spirit-0.5a1
guess_language-spirit-0.5a1 $ ../bin/python setup.py install
RefactoringTool: Skipping implicit fixer: collections
RefactoringTool: Skipping implicit fixer: int
RefactoringTool: Skipping implicit fixer: memoryview
RefactoringTool: Skipping implicit fixer: printfunction
RefactoringTool: Skipping implicit fixer: unittest
RefactoringTool: Refactored build/py2k/generate_data.py
RefactoringTool: Refactored build/py2k/guess_language/__main__.py
[..many more lines..]
Processing dependencies for guess-language-spirit==0.5a1
Finished processing dependencies for guess-language-spirit==0.5a1
</snippet></ROW><ROW><id>12221360</id><snippet>from PyQt4 import QtCore, QtGui


class DragButton(QtGui.QPushButton):

    def mousePressEvent(self, event):
        self.__mousePressPos = None
        self.__mouseMovePos = None
        if event.button() == QtCore.Qt.LeftButton:
            self.__mousePressPos = event.globalPos()
            self.__mouseMovePos = event.globalPos()

        super(DragButton, self).mousePressEvent(event)

    def mouseMoveEvent(self, event):
        if event.buttons() == QtCore.Qt.LeftButton:
            # adjust offset from clicked point to origin of widget
            currPos = self.mapToGlobal(self.pos())
            globalPos = event.globalPos()
            diff = globalPos - self.__mouseMovePos
            newPos = self.mapFromGlobal(currPos + diff)
            self.move(newPos)

            self.__mouseMovePos = globalPos

        super(DragButton, self).mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):
        if self.__mousePressPos is not None:
            moved = event.globalPos() - self.__mousePressPos 
            if moved.manhattanLength() &gt; 3:
                event.ignore()
                return

        super(DragButton, self).mouseReleaseEvent(event)

def clicked():
    print "click as normal!"

if __name__ == "__main__":
    app = QtGui.QApplication([])
    w = QtGui.QWidget()
    w.resize(800,600)

    button = DragButton("Drag", w)
    button.clicked.connect(clicked)

    w.show()
    app.exec_()
</snippet></ROW><ROW><id>12221360</id><snippet>mousePressEvent</snippet></ROW><ROW><id>12221360</id><snippet>mouseMoveEvent</snippet></ROW><ROW><id>12221360</id><snippet>mouseReleaseEvent</snippet></ROW><ROW><id>12221556</id><snippet>startswith</snippet></ROW><ROW><id>12221556</id><snippet>reader = csv.DictReader(infile1)
# # this is assuming there are only two columns in the file: Word and Count
prefixes = [l["Word"] for l in list(reader) if int(l["Count"]) &gt;= 2]

def remove_prefix(first_name):
    for p in prefixes:
        if first_name.startswith(p):
            return first_name[len(p):]
    return first_name
</snippet></ROW><ROW><id>12221931</id><snippet>Salted__</snippet></ROW><ROW><id>12221931</id><snippet>randArr = function(num) {
    var result = [], i;
    for (i = 0; i &lt; num; i++) {
        result = result.concat(Math.floor(Math.random() * 256));
    }
    return result;
},
</snippet></ROW><ROW><id>12221931</id><snippet>enc = function(string, pass, binary) {
        // string, password in plaintext
        var salt = randArr(8),
        pbe = openSSLKey(s2a(pass, binary), salt),
        key = pbe.key,
        iv = pbe.iv,
        cipherBlocks,
        saltBlock = [[83, 97, 108, 116, 101, 100, 95, 95].concat(salt)];
        string = s2a(string, binary);
        cipherBlocks = rawEncrypt(string, key, iv);
        // Spells out 'Salted__'
        cipherBlocks = saltBlock.concat(cipherBlocks);
        return Base64.encode(cipherBlocks);
    },
</snippet></ROW><ROW><id>12221931</id><snippet>slice</snippet></ROW><ROW><id>12221931</id><snippet>dec = function(string, pass, binary) {
    // string, password in plaintext
    var cryptArr = Base64.decode(string),
    salt = cryptArr.slice(8, 16),
    pbe = openSSLKey(s2a(pass, binary), salt),
    key = pbe.key,
    iv = pbe.iv;
    cryptArr = cryptArr.slice(16, cryptArr.length);
    // Take off the Salted__ffeeddcc
    string = rawDecrypt(cryptArr, key, iv, binary);
    return string;
},
</snippet></ROW><ROW><id>12221931</id><snippet>openSSLkey</snippet></ROW><ROW><id>12221931</id><snippet>openSSLKey = function(passwordArr, saltArr) {
    // Number of rounds depends on the size of the AES in use
    // 3 rounds for 256
    // 2 rounds for the key, 1 for the IV
    // 2 rounds for 128
    // 1 round for the key, 1 round for the IV
    // 3 rounds for 192 since it's not evenly divided by 128 bits
    var rounds = Nr &gt;= 12 ? 3: 2,
    key = [],
    iv = [],
    md5_hash = [],
    result = [],
    data00 = passwordArr.concat(saltArr),
    i;
    md5_hash[0] = GibberishAES.Hash.MD5(data00);
    result = md5_hash[0];
    for (i = 1; i &lt; rounds; i++) {
        md5_hash[i] = GibberishAES.Hash.MD5(md5_hash[i - 1].concat(data00));
        result = result.concat(md5_hash[i]);
    }
    key = result.slice(0, 4 * Nk);
    iv = result.slice(4 * Nk, 4 * Nk + 16);
    return {
        key: key,
        iv: iv
    };
},
</snippet></ROW><ROW><id>12221931</id><snippet>openSSLKey</snippet></ROW><ROW><id>12221931</id><snippet>Salted__</snippet></ROW><ROW><id>12222029</id><snippet>for index, item in enumerate(l):
    others = l[:index] + l[index+1:]
</snippet></ROW><ROW><id>12222029</id><snippet>def iter_with_others(l):
    for index, item in enumerate(l):
        yield item, l[:index] + l[index+1:]
</snippet></ROW><ROW><id>12222029</id><snippet>for item, others in iter_with_others(l):
    print(item, others)
</snippet></ROW><ROW><id>12222264</id><snippet>...
self.label3.SetLabel("Copied")
self.Update()#force redraw
....
</snippet></ROW><ROW><id>12222271</id><snippet>tkinter</snippet></ROW><ROW><id>12222271</id><snippet>Tkinter</snippet></ROW><ROW><id>12222404</id><snippet>easy_install argparse</snippet></ROW><ROW><id>12222404</id><snippet>import sys
import argparse

p = argparse.ArgumentParser(description="script.py")
p.add_argument("-s", dest="string")
p.add_argument("-f", dest="infile")

args = p.parse_args()

if args.infile == None and args.string == None:
    print "Must be given either a string or a file"
    sys.exit(1)
if args.infile != None and args.string != None:
    print "Must be given either a string or a file, not both"
    sys.exit(1)
if args.infile:
    # process the input file one string at a time
if args.string:
    # process the single string
</snippet></ROW><ROW><id>12222451</id><snippet>/* &lt;![CDATA[ */
(function(){try{var s,a,i,j,r,c,l=document.getElementById("__cf_email__");a=l.className;if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]&gt; */
</snippet></ROW><ROW><id>12222604</id><snippet>remove()</snippet></ROW><ROW><id>12222604</id><snippet>Artist</snippet></ROW><ROW><id>12222604</id><snippet>dc = DataCursor(...) # what ever aruguements you give it
# bunch of code
dc.annotation.remove()
del dc
plt.draw() # need to redraw to make remove visible
</snippet></ROW><ROW><id>12222604</id><snippet>DataCursor</snippet></ROW><ROW><id>12222604</id><snippet>annotation</snippet></ROW><ROW><id>12222604</id><snippet>set_*</snippet></ROW><ROW><id>12222637</id><snippet>plot_handle1, = self.map.plot([x[i]], [y[i]], 'ro')
</snippet></ROW><ROW><id>12222752</id><snippet>A=[w,y,x,z]
all(p == x for p in A)
</snippet></ROW><ROW><id>12223036</id><snippet>repr</snippet></ROW><ROW><id>12223036</id><snippet>&gt;&gt;&gt; len("\\")
1
&gt;&gt;&gt; len("\\n")
2
&gt;&gt;&gt; len("\n")
1
&gt;&gt;&gt; print "\\n"
\n
&gt;&gt;&gt; print "\n"


&gt;&gt;&gt;
</snippet></ROW><ROW><id>12223415</id><snippet>p = subprocess.Popen(['ffmpeg','-i' ...etc])
p.wait()
</snippet></ROW><ROW><id>12223415</id><snippet>p = subprocess.Popen(
   'ffmpeg -i blah.mov -s 128x72 blah.jpg'.split())
p.wait()
</snippet></ROW><ROW><id>12223620</id><snippet>totaluniqueimp = db.alpha2.map_reduce(map, reduce, {
    out: "myresults",
    query: {'ts': {'$gt': 1345840456, '$lt': 2345762454}, 'cid': '2636518'}
}).count();
</snippet></ROW><ROW><id>12223620</id><snippet>totaluniqueimp = db.alpha2.map_reduce(map, reduce, "myresults", query={'ts': {'$gt': 1345840456, '$lt': 2345762454}, 'cid': '2636518'})
</snippet></ROW><ROW><id>12223711</id><snippet>sessionmaker()</snippet></ROW><ROW><id>12223711</id><snippet>Session</snippet></ROW><ROW><id>12223711</id><snippet>Session(bind=engine, expire_on_commit=False)</snippet></ROW><ROW><id>12223711</id><snippet>Session</snippet></ROW><ROW><id>12223711</id><snippet>sessionmaker()</snippet></ROW><ROW><id>12223711</id><snippet>Session</snippet></ROW><ROW><id>12223711</id><snippet>Session()</snippet></ROW><ROW><id>12223815</id><snippet>if 'risk' == word:
    print word, word_dict[word]
</snippet></ROW><ROW><id>12223919</id><snippet>object</snippet></ROW><ROW><id>12223919</id><snippet>__doc__</snippet></ROW><ROW><id>12223919</id><snippet>__str__</snippet></ROW><ROW><id>12223919</id><snippet>instance</snippet></ROW><ROW><id>12223919</id><snippet>type</snippet></ROW><ROW><id>12223919</id><snippet>__str__</snippet></ROW><ROW><id>12223919</id><snippet>class Foo(object):
    def __str__(self):
        return "old str"

foo = Foo()
foo.__str__ = lambda: "new str"

print str(foo)
print foo.__str__()

# old str
# new str
</snippet></ROW><ROW><id>12223919</id><snippet>class Foo:
    def __str__(self):
        return "old str"

foo = Foo()
foo.__str__ = lambda: "new str"

print str(foo)
print foo.__str__()

# new str
# new str
</snippet></ROW><ROW><id>12223949</id><snippet>Base baz()
{
    return Derived();
}
</snippet></ROW><ROW><id>12223949</id><snippet>Base</snippet></ROW><ROW><id>12223949</id><snippet>Derived</snippet></ROW><ROW><id>12223949</id><snippet>reinterpret_cast</snippet></ROW><ROW><id>12223949</id><snippet>dynamic_cast</snippet></ROW><ROW><id>12223949</id><snippet>baz</snippet></ROW><ROW><id>12223949</id><snippet>Derived</snippet></ROW><ROW><id>12223949</id><snippet>Derived d;
Base&amp; b = d;
if(Base* p = dynamic_cast&lt;Derived*&gt;(&amp;b))
    // okay; b is actually an instance of Derived
</snippet></ROW><ROW><id>12224066</id><snippet>help</snippet></ROW><ROW><id>12224066</id><snippet>help</snippet></ROW><ROW><id>12224281</id><snippet>datetime</snippet></ROW><ROW><id>12224281</id><snippet>datetime</snippet></ROW><ROW><id>12224281</id><snippet>datetime</snippet></ROW><ROW><id>12224281</id><snippet>datetime</snippet></ROW><ROW><id>12224281</id><snippet>if __name__ == '__main__':
    last_minute = -1

    while True:
        try:
            r = json.read(rqst_command())
            print r
            command = r.get('cmd')
            interval = r.get('intvl')
            collect_time = r.get('c_time')

            tempTest = True

            while tempTest == True:
                start_time = datetime.now()
                s_minute = start_time.minute

                if(((s_minute % interval) == 0) and (s_minute != last_minute)):
                    tempTest = False
                    c_t = datetime(start_time.year, start_time.month, start_time.day, start_time.hour, start_time.minute, 0)
                    last_minute = c_t.minute

                    send_stats(cmd_nodes(command, collect_time), c_t)
                    time.sleep(1)
                else:
                    time.sleep(1)
        except Exception, e:
            print e
            print "**Top Level Exception"
            pass
</snippet></ROW><ROW><id>12224344</id><snippet>try:
    &lt;code&gt;
except Exception as exp:
    &lt;code&gt;
</snippet></ROW><ROW><id>12224344</id><snippet>except:
    pass
</snippet></ROW><ROW><id>12224385</id><snippet>iter(sorted(nums.items(), key=lambda x: int(x[0])))
</snippet></ROW><ROW><id>12224475</id><snippet>s=sp.std(datacol)</snippet></ROW><ROW><id>12224475</id><snippet>numpy.std()</snippet></ROW><ROW><id>12224475</id><snippet>scipy.stats.std()</snippet></ROW><ROW><id>12224475</id><snippet>fxn()</snippet></ROW><ROW><id>12224475</id><snippet>with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    fxn()  #this function generates DeprecationWarnings
</snippet></ROW><ROW><id>12224478</id><snippet>AddGrowableColumn()</snippet></ROW><ROW><id>12224478</id><snippet>AddGrowableRow()</snippet></ROW><ROW><id>12224478</id><snippet>MainPanel</snippet></ROW><ROW><id>12224478</id><snippet>MainFrame</snippet></ROW><ROW><id>12224478</id><snippet>MainFrame.__init__()</snippet></ROW><ROW><id>12224478</id><snippet>panel</snippet></ROW><ROW><id>12224478</id><snippet>panel</snippet></ROW><ROW><id>12224478</id><snippet>MainFrame</snippet></ROW><ROW><id>12224478</id><snippet>class MainFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, title="BoxSizer Example")
        panel = MainPanel(self)
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(panel)
        self.SetSizer(sizer) #this allows panel and MainFrame to influence each other's sizes
        self.Show()
        self.Fit()
</snippet></ROW><ROW><id>12224478</id><snippet>MainFrame</snippet></ROW><ROW><id>12224478</id><snippet>MainPanel</snippet></ROW><ROW><id>12224478</id><snippet>MainPane1</snippet></ROW><ROW><id>12224478</id><snippet>MainFrame</snippet></ROW><ROW><id>12224478</id><snippet>MainPanel</snippet></ROW><ROW><id>12224478</id><snippet>MainPanel.__init__()</snippet></ROW><ROW><id>12224478</id><snippet>SetSizer()</snippet></ROW><ROW><id>12224478</id><snippet>MainFrame.__init__()</snippet></ROW><ROW><id>12224478</id><snippet>class MainFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, title="BoxSizer Example")
        sizer = wx.GridBagSizer(5, 5)

        # However, just put the chart into main frame.
        chart = ChartPanel(self)
        chart.SetBackgroundColour("blue")

        Students = Sheet(self, 5, 2)
        History = Sheet(self, 2, 2)

        button1 = wx.Button(self, label="Button #1")
        button2 = wx.Button(self, label="Button #2")
        button3 = wx.Button(self, label="Button #3")

        sizer.Add(Students, pos=(0, 0), span=(5, 2), flag=wx.EXPAND)
        sizer.Add(History, pos=(0, 2), span=(2, 2), flag=wx.EXPAND)
        sizer.Add(chart, pos=(2, 2), span=(3, 2), flag=wx.EXPAND)

        sizer.Add(button1, pos=(5, 0), span=(1, 1))
        sizer.Add(button2, pos=(5, 1), span=(1, 1))
        sizer.Add(button3, pos=(5, 2), span=(1, 1))

        #I removed these lines because they gave me errors and I don't understand why you needed them
        #sizer.AddGrowableCol(5) 
        #sizer.AddGrowableRow(5)

        self.SetSizer(sizer)
        self.Fit()
        self.Show()
</snippet></ROW><ROW><id>12224478</id><snippet>wx.GridBagSizer</snippet></ROW><ROW><id>12224478</id><snippet>wx.BoxSizer</snippet></ROW><ROW><id>12224478</id><snippet>def __init__(self, parent):
    wx.Panel.__init__(self, parent)
    mainSizer = wx.BoxSizer(wx.HORIZONTAL) #this will make the columns

    rightSizer = wx.BoxSizer(wx.VERTICAL) #this will be the rows on the right
    # However, just put the chart into main frame.
    chart = ChartPanel(self)
    chart.SetBackgroundColour("blue")
    History = Sheet(self, 2, 2)

    rightSizer.Add(History, 1, wx.EXPAND)
    rightSizer.Add(chart, 1, wx.EXPAND)

    leftSizer = wx.BoxSizer(wx.VERTICAL) #this will be the rows on the left
    Students = Sheet(self, 5, 2)

    buttonSizer = wx.BoxSizer(wx.HORIZONTAL) #this will organize the buttons
    button1 = wx.Button(self, label="Button #1")
    button2 = wx.Button(self, label="Button #2")
    button3 = wx.Button(self, label="Button #3")

    buttonSizer.Add(button1)
    buttonSizer.Add(button2)
    buttonSizer.Add(button3)

    leftSizer.Add(Students, 1, wx.EXPAND)
    leftSizer.Add(buttonSizer)

    mainSizer.Add(leftSizer, 1, wx.EXPAND)
    mainSizer.Add(rightSizer, 1, wx.EXPAND)

    self.SetSizer(mainSizer)
    self.Fit()
</snippet></ROW><ROW><id>12224606</id><snippet>ljThread</snippet></ROW><ROW><id>12224606</id><snippet>queue.put((ue9ipAddr, reading))
</snippet></ROW><ROW><id>12224606</id><snippet>ip, outcome = queue.get()
</snippet></ROW><ROW><id>12224631</id><snippet>h2</snippet></ROW><ROW><id>12224631</id><snippet>yfi_rt_quote_summary</snippet></ROW><ROW><id>12224631</id><snippet>yfi_quote_summary</snippet></ROW><ROW><id>12224631</id><snippet>def find_quote_section(html):
    soup = BeautifulSoup(html)        
    quote = soup.find('div', attrs={'class': 'yfi_rt_quote_summary'})
    return quote
</snippet></ROW><ROW><id>12224631</id><snippet>result</snippet></ROW><ROW><id>12224631</id><snippet>None</snippet></ROW><ROW><id>12224631</id><snippet>def parse_stock_html(html, ticker_name):
    quote = find_quote_section(html)
    result = {}
    tick = ticker_name.lower()
    result['stock_name'] = quote.find('h2').contents[0]
    return result

&gt;&gt;&gt; print parse_stock_html(html, 'GOOG')
{'stock_name': u'Google Inc. (GOOG)'}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12224631</id><snippet>find</snippet></ROW><ROW><id>12224631</id><snippet>&gt;&gt;&gt; help(BeautifulSoup(html).find)
find(self, name=None, attrs={}, recursive=True, text=None, **kwargs) method of BeautifulSoup.BeautifulSoup instance
    Return only the first child of this Tag matching the given
    criteria.
</snippet></ROW><ROW><id>12224631</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>12224631</id><snippet>findall</snippet></ROW><ROW><id>12224631</id><snippet>&gt;&gt;&gt; BeautifulSoup(html).findAll('h2')[3].contents[0]
u'Google Inc. (GOOG)'
</snippet></ROW><ROW><id>12224644</id><snippet>varchar</snippet></ROW><ROW><id>12224644</id><snippet>path</snippet></ROW><ROW><id>12224644</id><snippet>filename</snippet></ROW><ROW><id>12224644</id><snippet>String(256)</snippet></ROW><ROW><id>12224644</id><snippet>path</snippet></ROW><ROW><id>12224644</id><snippet>ForeignKey</snippet></ROW><ROW><id>12224772</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = np.random.random((100, 10))
extent = [0.0001, 0.001, 100, 200]

plt.figure(1)
plt.imshow(data)

plt.figure(2)
plt.imshow(data, extent=extent)

plt.figure(3)
plt.imshow(data, extent=extent, aspect='auto')

plt.show()
</snippet></ROW><ROW><id>12224854</id><snippet>t = locals().copy()
for name, value in t.iteritems():
  setattr(module, name, value)
</snippet></ROW><ROW><id>12225320</id><snippet>listY = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
result = set()
for listX in listY:
    for x in listX:
        result.add(x)
</snippet></ROW><ROW><id>12225377</id><snippet>for x in range(100):
    str_selector = '/tr[@name="tag_{0}"]/td/text()'.format(x)
    hxs.select(str_selector)
</snippet></ROW><ROW><id>12225391</id><snippet>Piece</snippet></ROW><ROW><id>12225391</id><snippet>Board</snippet></ROW><ROW><id>12225391</id><snippet>Board.draw()</snippet></ROW><ROW><id>12225391</id><snippet>class Piece(object):
    symbol = " "
    name = None
    def __init__(self, side, col, row):
        self.side = side
        self.col = col
        self.row = row

class Pawn(Piece):
    symbol = "P"
    name = "Pawn"
    def __init__(self, side, col):
        if side == "white":
            row = 2
        else:
            row = 7
        super(Pawn, self).__init__(self, side, col, row) 
    def move(col, row):
        if self.check_if_move_is_valid(col, row):
            self.col = col
            self.row = row

... same for other pieces...

class Board(object):
    def __init__(self):
        self.pieces = list()
        for col in range(1,9):
            self.pieces.append(Pawn("white", col))
            self.pieces.append(Pawn("black", col))
        self.pieces.append(Rook("white"), 1)
        self.pieces.append(Rook("black"), 8)
        ... etc ...

    def draw():
        grid = create_empty_grid(8)
        for piece in self.pieces:
             grid[piece.row][piece.col] = piece.symbol
        for row in grid:
             print ''.join(row)
</snippet></ROW><ROW><id>12225515</id><snippet>a = raw_input("Enter line: ")
space = ""
# did you want to pre-set the trap to True? #
trap_set = False 
while a != space:
    if 'Set the trap.' in a:
        trap_set = True
      # no reason to print trap if just setting #
      #  print "Trap!" #
    elif 'Mouse!' in a: 
        if  trap_set == False:
            print "The mouse escaped."
        elif trap_set == True:
            print 'trap'
            trap_set = False
    a = raw_input("Enter line: ")
</snippet></ROW><ROW><id>12225821</id><snippet>numpy.savetxt</snippet></ROW><ROW><id>12225821</id><snippet>import numpy
a = numpy.array([[0.0,1.630000e+01,1.990000e+01,1.840000e+01],
                 [1.0,1.630000e+01,1.990000e+01,1.840000e+01],
                 [2.0,1.630000e+01,1.990000e+01,1.840000e+01]])
fmt = ",".join(["%s"] + ["%10.6e"] * (a.shape[1]-1))

# numpy.savetxt, at least as of numpy 1.6.2, writes bytes
# to file, which doesn't work with a file open in text mode.  To
# work around this deficiency, open the file in binary mode, and
# write out the header as bytes.
with open('final.csv', 'wb') as f:
  f.write(b'SP,1,2,3\n')
  #f.write(bytes("SP,"+lists+"\n","UTF-8"))
  #Used this line for a variable list of numbers
  numpy.savetxt(f, a, fmt=fmt, delimiter=",")
</snippet></ROW><ROW><id>12226095</id><snippet>OrderedDict</snippet></ROW><ROW><id>12226095</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; a = OrderedDict((('f','1st'),('fg','2nd')))
&gt;&gt;&gt; a
OrderedDict([('f', '1st'), ('fg', '2nd')])
</snippet></ROW><ROW><id>12226095</id><snippet>OrderedDict</snippet></ROW><ROW><id>12226095</id><snippet>list</snippet></ROW><ROW><id>12226095</id><snippet>tuple</snippet></ROW><ROW><id>12226293</id><snippet>/etc/supervisor.conf</snippet></ROW><ROW><id>12226293</id><snippet>/etc/supervisor/supervisor.conf</snippet></ROW><ROW><id>12226293</id><snippet>--- supervisor-3.0a8.orig/src/supervisor/options.py
+++ supervisor-3.0a8/src/supervisor/options.py
@@ -105,7 +105,7 @@
     def default_configfile(self):
         """Return the name of the found config file or raise. """
         paths = ['supervisord.conf', 'etc/supervisord.conf',
-                 '/etc/supervisord.conf']
+                 '/etc/supervisor/supervisord.conf', '/etc/supervisord.conf']
         config = None
         for path in paths:
             if os.path.exists(path):
</snippet></ROW><ROW><id>12226293</id><snippet>supervisord.conf</snippet></ROW><ROW><id>12226293</id><snippet>etc/</snippet></ROW><ROW><id>12226293</id><snippet>/etc/supervisor/</snippet></ROW><ROW><id>12226293</id><snippet>/etc/</snippet></ROW><ROW><id>12226293</id><snippet>supervisord.conf</snippet></ROW><ROW><id>12226293</id><snippet>[include]
files = /etc/supervisor/conf.d/*.conf
</snippet></ROW><ROW><id>12226293</id><snippet>conf.d</snippet></ROW><ROW><id>12226318</id><snippet>a = int(raw_input("How many did you say you're going to count down? "))
b = int(raw_input("When are you actually going to stop? "))

for i in range(a, b-1, -1):
    print i 
</snippet></ROW><ROW><id>12226318</id><snippet>for</snippet></ROW><ROW><id>12226318</id><snippet>i = i-1</snippet></ROW><ROW><id>12226318</id><snippet>range(a, b-1, -1)</snippet></ROW><ROW><id>12226318</id><snippet>a</snippet></ROW><ROW><id>12226318</id><snippet>b-1</snippet></ROW><ROW><id>12226318</id><snippet>-1</snippet></ROW><ROW><id>12226318</id><snippet>print range(10, 5, -1)</snippet></ROW><ROW><id>12226318</id><snippet>range(5, 11, 2)</snippet></ROW><ROW><id>12226318</id><snippet>range()</snippet></ROW><ROW><id>12226622</id><snippet>coding</snippet></ROW><ROW><id>12226622</id><snippet>[:=]</snippet></ROW><ROW><id>12226622</id><snippet>\s*</snippet></ROW><ROW><id>12226622</id><snippet>(..)</snippet></ROW><ROW><id>12226622</id><snippet>[-\w.]+</snippet></ROW><ROW><id>12226622</id><snippet>\w</snippet></ROW><ROW><id>12226622</id><snippet>\w</snippet></ROW><ROW><id>12226622</id><snippet>foobar320_42spam_eggs</snippet></ROW><ROW><id>12226622</id><snippet>something-or-other</snippet></ROW><ROW><id>12226622</id><snippet>whatever.42</snippet></ROW><ROW><id>12226639</id><snippet>SocialAccount</snippet></ROW><ROW><id>12226639</id><snippet>User</snippet></ROW><ROW><id>12226639</id><snippet>SocialAccount</snippet></ROW><ROW><id>12226639</id><snippet>SocialAccount</snippet></ROW><ROW><id>12226639</id><snippet>{{user.socialaccount_set.all.0.get_avatar_url}}
</snippet></ROW><ROW><id>12226639</id><snippet>{{user.socialaccount_set.all.0.uid}}
</snippet></ROW><ROW><id>12226767</id><snippet>:</snippet></ROW><ROW><id>12226767</id><snippet>checkList = set(['a', 'b', 'c'])

for i in textList:
    check, rest = i.split(':', 1)
    if check.strip() not in checkList:
        continue
    data = rest.strip()
    # insert data into database; check is your column name.
</snippet></ROW><ROW><id>12227095</id><snippet>class Reward(ndb.Model):
    reward = ndb.StringProperty()
    value = ndb.IntegerProperty()

class Student(ndb.Model):
    name = ndb.StringProperty(required=True)
    rewards = ndb.StructuredProperty(Reward, repeated=True)
    total_reward_points = ndb.IntegerProperty()
    s_id = ndb.StringProperty()
</snippet></ROW><ROW><id>12227138</id><snippet>__init.py</snippet></ROW><ROW><id>12227138</id><snippet>__init__.py</snippet></ROW><ROW><id>12227138</id><snippet>import a.b.c</snippet></ROW><ROW><id>12227138</id><snippet>c.x</snippet></ROW><ROW><id>12227138</id><snippet>a.b.c.x</snippet></ROW><ROW><id>12227138</id><snippet>import
a.b.c as c</snippet></ROW><ROW><id>12227138</id><snippet>import lib.sam_lib as sam_lib
print(sam_lib.k)
</snippet></ROW><ROW><id>12227138</id><snippet>import python.lib.sam_lib as sam_lib</snippet></ROW><ROW><id>12227138</id><snippet>from .lib import sam_lib</snippet></ROW><ROW><id>12227138</id><snippet>import python.test</snippet></ROW><ROW><id>12227155</id><snippet>class MyPasswordType(String):
    class comparator_factory(String.Comparator):
        def __eq__(self, other):
            return self.operate(operators.eq, hash(other))
</snippet></ROW><ROW><id>12227155</id><snippet>@password.setter
def password(self, value):
    self._password = hash(value)    
</snippet></ROW><ROW><id>12227166</id><snippet>a='IGADKYFHARGNYDAA'
b='KGADKYFHARGNYEAA'

u=zip(a,b)
d=dict(u)

x=[]
for i,j in d.items(): 
    if i==j:
        x.append('*') 
    else: 
        x.append(j)

print x
</snippet></ROW><ROW><id>12227166</id><snippet>['*', 'E', '*', '*', 'K', '*', '*', '*', '*', '*']</snippet></ROW><ROW><id>12227166</id><snippet>a='IGADKYFHARGNYDAA'
b='KGADKYFHARGNYEAA'

u=zip(a,b)
for i,j in u:
    if i==j:
        print i,'--',j
    else: 
        print i,'  ',j
</snippet></ROW><ROW><id>12227166</id><snippet>I    K
G -- G
A -- A
D -- D
K -- K
Y -- Y
F -- F
H -- H
A -- A
R -- R
G -- G
N -- N
Y -- Y
D    E
A -- A
A -- A
</snippet></ROW><ROW><id>12227166</id><snippet>y=[]
counter=0
for i,j in u:
    if i==j:
        print i,'--',j
    else: 
        y.append(j)
        print i,'  ',j

print '\n', y

print '\n Length = ',len(y)
</snippet></ROW><ROW><id>12227166</id><snippet>I    K
G -- G
A -- A
D -- D
K -- K
Y -- Y
F -- F
H -- H
A -- A
R -- R
G -- G
N -- N
Y -- Y
D    E
A -- A
A    X

['K', 'E', 'X']

 Length =  3
</snippet></ROW><ROW><id>12227190</id><snippet>import heapq
from operator import itemgetter

# get a two tuple of (idx, row)
list_with_index = enumerate(your_list)

# Get the top 10 from column '1' and return a list of those
# which will be (row_index, original_row)
largest = heapq.nlargest(10, list_with_index, key=itemgetter(1, 1))

# Get the top 5 index values
largest_indices = [el[0] for el in largest]
# or map(itemgetter(0), largest) if you prefer...
</snippet></ROW><ROW><id>12227190</id><snippet>for colno in (2, 4, 6):
    largest = map(itemgetter(0), heapq.nlargest(10, enumerate(analyseList), key=itemgetter(1, colno)))
    print '{} largest: {}'.format(colno, ', '.join(largest))
</snippet></ROW><ROW><id>12227190</id><snippet>.argsort</snippet></ROW><ROW><id>12227429</id><snippet>unicode</snippet></ROW><ROW><id>12227429</id><snippet>utf8_bin</snippet></ROW><ROW><id>12227429</id><snippet>SHOW TABLE STATUS FROM %YOURDB%</snippet></ROW><ROW><id>12227529</id><snippet>get_python_lib</snippet></ROW><ROW><id>12227529</id><snippet>import os
import sys
from distutils.errors import DistutilsPlatformError


PREFIX = os.path.normpath(sys.prefix)
EXEC_PREFIX = os.path.normpath(sys.exec_prefix)


def get_python_version():
    """Return a string containing the major and minor Python version,
    leaving off the patchlevel.  Sample return values could be '1.5'
    or '2.2'.
    """
    return sys.version[:3]

def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
    """Return the directory containing the Python library (standard or
    site additions).

    If 'plat_specific' is true, return the directory containing
    platform-specific modules, i.e. any module from a non-pure-Python
    module distribution; otherwise, return the platform-shared library
    directory.  If 'standard_lib' is true, return the directory
    containing standard Python library modules; otherwise, return the
    directory for site-specific modules.

    If 'prefix' is supplied, use it instead of sys.prefix or
    sys.exec_prefix -- i.e., ignore 'plat_specific'.
    """
    if prefix is None:
        prefix = plat_specific and EXEC_PREFIX or PREFIX

    if os.name == "posix":
        libpython = os.path.join(prefix,
                                 "lib", "python" + get_python_version())
        if standard_lib:
            return libpython
        else:
            return os.path.join(libpython, "site-packages")

    elif os.name == "nt":
        if standard_lib:
            return os.path.join(prefix, "Lib")
        else:
            if get_python_version() &lt; "2.2":
                return prefix
            else:
                return os.path.join(prefix, "Lib", "site-packages")

    elif os.name == "os2":
        if standard_lib:
            return os.path.join(prefix, "Lib")
        else:
            return os.path.join(prefix, "Lib", "site-packages")

    else:
        raise DistutilsPlatformError(
            "I don't know where Python installs its library "
            "on platform '%s'" % os.name)
</snippet></ROW><ROW><id>12227529</id><snippet>def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
    if prefix is None:
        prefix = plat_specific and EXEC_PREFIX or PREFIX

    libpython = os.path.join(prefix,
                             "lib", "python" + get_python_version())
    if standard_lib:
        return libpython
    else:
        return os.path.join(libpython, "site-packages")
</snippet></ROW><ROW><id>12227529</id><snippet>dist-packages</snippet></ROW><ROW><id>12227556</id><snippet>__doc__</snippet></ROW><ROW><id>12227618</id><snippet>latitude</snippet></ROW><ROW><id>12227618</id><snippet>latitudes = []
counts = []
blocks = []
current_block = []
for line in test:
    print line
    if line.startswith("latitude"):
        # New block: add the previous one to `blocks` and reset
        blocks.append(current_block)
        current_block = []
        latitudes.append(float(line.split()[-1]))
    elif line.startswith("number_of_data"):
        # Just append the current count to the list
        counts.append(int(line.split()[-1]))
    else:
        # Update the current block
        current_block += [float(f) for f in line.strip().split()]
# Make sure to add the last block...
blocks.append(current_block)
# And to remove the first (empty) one
blocks.pop(0)
</snippet></ROW><ROW><id>12227618</id><snippet>all(len(b)==c for (c,b) in zip(counts,blocks))
</snippet></ROW><ROW><id>12227618</id><snippet>latitude</snippet></ROW><ROW><id>12227618</id><snippet>latitude</snippet></ROW><ROW><id>12227618</id><snippet>number_of_data</snippet></ROW><ROW><id>12227618</id><snippet>import mmap

with open("crap.txt", "r+b") as f:
    # Create the mapper
    mapper = mmap.mmap(f.fileno(), 0)
    # Initialize your output variables
    latitudes = []
    blocks = [] 
    # Find the beginning of the first block
    position = mapper.find("latitude")
    # `position` will be -1 if we can't find it
    while (position &gt;= 0):
        # Move to the beginning of the block
        mapper.seek(position)
        # Read the first line
        lat_line = mapper.readline().strip()
        latitudes.append(lat_line.split()[-1])
        # Read the second one
        zap = mapper.readline()
        # Where are we ?
        start = mapper.tell()
        # Where's the next block ?
        position = mapper.find("latitude")
        # Read the lines and combine them into a large string
        current_block = mapper.read(position-start).replace("\n", " ")
        # Transform the string into a list of floats and update the block
        blocks.append(list(float(i) for i in current_block.split() if i))
</snippet></ROW><ROW><id>12227667</id><snippet>"pi"</snippet></ROW><ROW><id>12227667</id><snippet>def get_number(what):
    # Get value from user; remove any leading/trailing whitespace
    val = input('Enter the {}:'.format(what)).strip()
    if val.lower() == 'pi': # case insensitive check for "pi"
        return math.pi
    try: # try converting it to a float
        return float(val)
    except ValueError: # the user entered some crap that can't be converted
        return 0
</snippet></ROW><ROW><id>12227667</id><snippet>r = get_number('radius')
angle = get_number('angle')
</snippet></ROW><ROW><id>12227667</id><snippet>pi = 3.1415</snippet></ROW><ROW><id>12227667</id><snippet>math.pi</snippet></ROW><ROW><id>12227679</id><snippet>expression
    : add_sub_expr
    ;

add_sub_expr
    : mul_div_expr
    | mul_div_expr '+' add_sub_expr
    | mul_div_expr '-' add_sub_expr
    ;

mul_div_expr
    : funcall_expr
    | funcall_expr '*' mul_div_expr
    | funcall_expr '/' mul_div_expr
    ;

funcall_expr
    : prim_expr
    | FUNCTION_NAME '(' expression_list ')'
    ;

prim_expr
    : NUMBER
    | '(' expression ')'
    ;

expression_list
    : expression
    | expression ','  expression_list
    ;
</snippet></ROW><ROW><id>12227679</id><snippet>FUNCTION_NAME</snippet></ROW><ROW><id>12227961</id><snippet>ScrolledPanel</snippet></ROW><ROW><id>12227961</id><snippet>ScrolledWindow</snippet></ROW><ROW><id>12228008</id><snippet>RandomForestClassifier</snippet></ROW><ROW><id>12228008</id><snippet>n_jobs</snippet></ROW><ROW><id>12228008</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>12228008</id><snippet>numpy.memmap</snippet></ROW><ROW><id>12228008</id><snippet>RandomForestClassifier</snippet></ROW><ROW><id>12228082</id><snippet>*args</snippet></ROW><ROW><id>12228082</id><snippet>**kwargs</snippet></ROW><ROW><id>12228082</id><snippet>def f(*args, **kwargs):
    a = args[0]
    b = args[1]
    c = kwargs.get('c', 3)
    d = kwargs.get('d', 4)
    print a, b, c, d
</snippet></ROW><ROW><id>12228082</id><snippet>def f(a, b, c=3, d=4):
    print a, b, c, d
</snippet></ROW><ROW><id>12228082</id><snippet>args</snippet></ROW><ROW><id>12228082</id><snippet>*args</snippet></ROW><ROW><id>12228082</id><snippet>**kwargs</snippet></ROW><ROW><id>12228098</id><snippet>In [1]: "AAAAAAAA000000000000000000000000".decode('hex')
Out[1]: '\xaa\xaa\xaa\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

In [2]: "eAIUXziwB8QbBexkiIDR3A==".decode('base64')
Out[2]: 'x\x02\x14_8\xb0\x07\xc4\x1b\x05\xecd\x88\x80\xd1\xdc'
</snippet></ROW><ROW><id>12228098</id><snippet>In [1]: from Crypto.Cipher import Blowfish

In [2]: KEY = "AAAAAAAA000000000000000000000000".decode('hex')

In [3]: IV = "AAAAAAAA00000000".decode('hex')

In [4]: cipher = Blowfish.new(KEY, Blowfish.MODE_CBC, IV)

In [5]: ciphertext = "eAIUXziwB8QbBexkiIDR3A==".decode('base64')

In [6]: cipher.decrypt(ciphertext)
Out[6]: 'password\x08\x08\x08\x08\x08\x08\x08\x08'
</snippet></ROW><ROW><id>12228098</id><snippet>In [14]: cipher.decrypt(ciphertext).replace('\x08', '')
Out[14]: 'password'
</snippet></ROW><ROW><id>12228263</id><snippet>np.inf</snippet></ROW><ROW><id>12228263</id><snippet>s.integral(0, np.inf)
</snippet></ROW><ROW><id>12228263</id><snippet>UnivariateSpline</snippet></ROW><ROW><id>12228287</id><snippet>session.query(type(some_object)).populate_existing().get(some_object.id)
</snippet></ROW><ROW><id>12228287</id><snippet>refresh()</snippet></ROW><ROW><id>12228299</id><snippet>In [72]: x = df.reset_index(); x[x.RPT_Date.str.endswith("0630")].set_index(['STK_ID', 'RPT_Date'])
Out[72]: 
                      sales        cogs    net_pft
STK_ID RPT_Date                                   
000876 20060630   857483000   729541000   67157200
       20070630  1146245000  1050808000  113468500
       20080630  1932470000  1777010000  133756300
002254 20070630   501221000   289167000  118012200
</snippet></ROW><ROW><id>12228299</id><snippet>In [73]: timeit x = df.reset_index(); x[x.RPT_Date.str.endswith("0630")].set_index(['STK_ID', 'RPT_Date'])
1000 loops, best of 3: 1.78 ms per loop
</snippet></ROW><ROW><id>12228299</id><snippet>In [75]: df.index
Out[75]: 
MultiIndex
[('000876', '20060331') ('000876', '20060630') ('000876', '20060930')
 ('000876', '20061231') ('000876', '20070331') ('000876', '20070630')
 ('000876', '20070930') ('000876', '20071231') ('000876', '20080331')
 ('000876', '20080630') ('000876', '20080930') ('002254', '20061231')
 ('002254', '20070331') ('002254', '20070630') ('002254', '20070930')]
</snippet></ROW><ROW><id>12228299</id><snippet>In [76]: df[df.index.map(lambda x: x[1].endswith("0630"))]
Out[76]: 
                      sales        cogs    net_pft
STK_ID RPT_Date                                   
000876 20060630   857483000   729541000   67157200
       20070630  1146245000  1050808000  113468500
       20080630  1932470000  1777010000  133756300
002254 20070630   501221000   289167000  118012200
</snippet></ROW><ROW><id>12228299</id><snippet>In [77]: timeit df[df.index.map(lambda x: x[1].endswith("0630"))]
1000 loops, best of 3: 240 us per loop
</snippet></ROW><ROW><id>12228336</id><snippet>pip</snippet></ROW><ROW><id>12228336</id><snippet>python setup.py install</snippet></ROW><ROW><id>12228336</id><snippet>PATH</snippet></ROW><ROW><id>12228336</id><snippet>C:\Path\To\Python27\python "C:\Path\To\BeautifulSoup\setup.py" install</snippet></ROW><ROW><id>12228336</id><snippet>pip</snippet></ROW><ROW><id>12228346</id><snippet>plt.show()</snippet></ROW><ROW><id>12228346</id><snippet>fig.show()</snippet></ROW><ROW><id>12228346</id><snippet>plt.draw()</snippet></ROW><ROW><id>12228346</id><snippet>plt.show()</snippet></ROW><ROW><id>12228346</id><snippet>fig.show()</snippet></ROW><ROW><id>12228346</id><snippet>ax.relim()
ax.autoscale()
plt.draw()
# And this allows you to at least close the window (and crash the program by that ;))
fig.canvas.flush_events()
</snippet></ROW><ROW><id>12228441</id><snippet>fido</snippet></ROW><ROW><id>12228441</id><snippet>Dog</snippet></ROW><ROW><id>12228441</id><snippet>class Dog(object):
    pass

fido = Dog()
</snippet></ROW><ROW><id>12228441</id><snippet>fido.walk()</snippet></ROW><ROW><id>12228441</id><snippet>walk</snippet></ROW><ROW><id>12228441</id><snippet>fido</snippet></ROW><ROW><id>12228441</id><snippet>fido.__dict__</snippet></ROW><ROW><id>12228441</id><snippet>def walk():
   print "Yay! Walking! My favourite thing!"

fido.walk = walk
</snippet></ROW><ROW><id>12228441</id><snippet>fido.walk()</snippet></ROW><ROW><id>12228441</id><snippet>walk</snippet></ROW><ROW><id>12228441</id><snippet>type(fido)</snippet></ROW><ROW><id>12228441</id><snippet>Dog</snippet></ROW><ROW><id>12228441</id><snippet>self</snippet></ROW><ROW><id>12228441</id><snippet>class Dog:
    def walk(self):
         print "Yay! Walking! My favourite thing!"
</snippet></ROW><ROW><id>12228441</id><snippet>repr(fido)</snippet></ROW><ROW><id>12228441</id><snippet>__repr__</snippet></ROW><ROW><id>12228441</id><snippet>class Dog:
    def __repr__(self):
          return 'Dog()'
</snippet></ROW><ROW><id>12228441</id><snippet> repr(Dog)
</snippet></ROW><ROW><id>12228441</id><snippet>__repr__</snippet></ROW><ROW><id>12228441</id><snippet>Dog</snippet></ROW><ROW><id>12228441</id><snippet>Dog.__repr__()
</snippet></ROW><ROW><id>12228441</id><snippet>&gt;&gt;&gt; Dog.__repr__()
Traceback (most recent call last):
  File "&lt;pyshell#38&gt;", line 1, in &lt;module&gt;
    Dog.__repr__()
TypeError: __repr__() takes exactly 1 argument (0 given)
</snippet></ROW><ROW><id>12228441</id><snippet>__repr__()</snippet></ROW><ROW><id>12228441</id><snippet>Dog</snippet></ROW><ROW><id>12228441</id><snippet>self</snippet></ROW><ROW><id>12228441</id><snippet>class Dog:
    def __repr__(self=None):
       if self is None:
           # return repr of Dog
       # return repr of self
</snippet></ROW><ROW><id>12228441</id><snippet>__repr__</snippet></ROW><ROW><id>12228441</id><snippet>__repr__</snippet></ROW><ROW><id>12228441</id><snippet>Dog</snippet></ROW><ROW><id>12228441</id><snippet>type(Dog)</snippet></ROW><ROW><id>12228441</id><snippet>__repr__</snippet></ROW><ROW><id>12228441</id><snippet>Dog</snippet></ROW><ROW><id>12228441</id><snippet>self</snippet></ROW><ROW><id>12228441</id><snippet> if self is None:
   return type(Dog).__repr__(Dog)
</snippet></ROW><ROW><id>12228441</id><snippet>repr(foo)</snippet></ROW><ROW><id>12228441</id><snippet>__repr__</snippet></ROW><ROW><id>12228441</id><snippet>foo</snippet></ROW><ROW><id>12228441</id><snippet>type(foo).__repr__(foo) 
</snippet></ROW><ROW><id>12228453</id><snippet>Referer</snippet></ROW><ROW><id>12228506</id><snippet>MyArray3 = MyArray2[['a','b','c','d']]
</snippet></ROW><ROW><id>12228506</id><snippet>order = [1,0,3,2]
names = MyArray2.dtype.names
MyArray3 = MyArray2[[names[i] for i in order]]
</snippet></ROW><ROW><id>12228506</id><snippet>sortorder=[2,1,4,3]</snippet></ROW><ROW><id>12228506</id><snippet>numpy.lib.recfunctions</snippet></ROW><ROW><id>12228506</id><snippet>stack_arrays</snippet></ROW><ROW><id>12228506</id><snippet>import numpy.lib.recfunctions</snippet></ROW><ROW><id>12228506</id><snippet>stack_arrays(arrays, defaults=None, usemask=True, asrecarray=False, autoconvert=False)

Superposes arrays fields by fields

Parameters
----------
seqarrays : array or sequence
    Sequence of input arrays.
defaults : dictionary, optional
    Dictionary mapping field names to the corresponding default values.
usemask : {True, False}, optional
    Whether to return a MaskedArray (or MaskedRecords is `asrecarray==True`)
    or a ndarray.
asrecarray : {False, True}, optional
    Whether to return a recarray (or MaskedRecords if `usemask==True`) or
    just a flexible-type ndarray.
autoconvert : {False, True}, optional
    Whether automatically cast the type of the field to the maximum.

Examples
--------
&gt;&gt;&gt; from numpy.lib import recfunctions as rfn
&gt;&gt;&gt; x = np.array([1, 2,])
&gt;&gt;&gt; rfn.stack_arrays(x) is x
True
&gt;&gt;&gt; z = np.array([('A', 1), ('B', 2)], dtype=[('A', '|S3'), ('B', float)])
&gt;&gt;&gt; zz = np.array([('a', 10., 100.), ('b', 20., 200.), ('c', 30., 300.)],
...   dtype=[('A', '|S3'), ('B', float), ('C', float)])
&gt;&gt;&gt; test = rfn.stack_arrays((z,zz))
&gt;&gt;&gt; test
masked_array(data = [('A', 1.0, --) ('B', 2.0, --) ('a', 10.0, 100.0) ('b', 20.0, 200.0)
 ('c', 30.0, 300.0)],
             mask = [(False, False, True) (False, False, True) (False, False, False)
 (False, False, False) (False, False, False)],
       fill_value = ('N/A', 1e+20, 1e+20),
            dtype = [('A', '|S3'), ('B', '&lt;f8'), ('C', '&lt;f8')])
</snippet></ROW><ROW><id>12228737</id><snippet>csv.writer</snippet></ROW><ROW><id>12228737</id><snippet>.write()</snippet></ROW><ROW><id>12228737</id><snippet>StringIO</snippet></ROW><ROW><id>12228737</id><snippet>from cStringIO import StringIO

data = StringIO()
csv.writer(data)
# write your stuff
message = EmailMessage('Invoice for 2012', 'h', 'noreply@test.co.uk', ['test@test.co.uk'])
message.attach('invoice.csv', data.getvalue(), 'text/csv')
message.send()
</snippet></ROW><ROW><id>12228737</id><snippet>StringIO</snippet></ROW><ROW><id>12228762</id><snippet>&gt;&gt;&gt; b = [2 * i for i in a]
&gt;&gt;&gt; b
[20, 40, 60, 80, 100]
</snippet></ROW><ROW><id>12228762</id><snippet>a * 2</snippet></ROW><ROW><id>12228762</id><snippet>&gt;&gt;&gt; a = (10,20,30,40,50)
&gt;&gt;&gt; a * 2
(10, 20, 30, 40, 50, 10, 20, 30, 40, 50)
</snippet></ROW><ROW><id>12228831</id><snippet>install_requires</snippet></ROW><ROW><id>12228831</id><snippet>dependency_links</snippet></ROW><ROW><id>12228831</id><snippet>dependency_links=[
      "svn://example.com/package3/svn/trunk#egg=package3"
  ]
</snippet></ROW><ROW><id>12229070</id><snippet>my_dictionary = {k: f(v) for k, v in my_dictionary.items()}
</snippet></ROW><ROW><id>12229070</id><snippet>.iteritems()</snippet></ROW><ROW><id>12229070</id><snippet>.items()</snippet></ROW><ROW><id>12229070</id><snippet>map()</snippet></ROW><ROW><id>12229070</id><snippet>map()</snippet></ROW><ROW><id>12229070</id><snippet>my_dictionary = dict(map(lambda (k,v): (k, f(v)), my_dictionary.iteritems()))
</snippet></ROW><ROW><id>12229139</id><snippet>print np.transpose(np.array((y, y_bool, y_range)))
# [[ 0  0  0]
#  [ 2  1  1]
#  [-6  0  2]
#  [ 4  1  3]
#  [ 1  1  4]]
</snippet></ROW><ROW><id>12229215</id><snippet>text=myFont.render(text, 1, text_color)
rect=text.get_rect()
rect.topleft=(200, 200)
surface.blit(text, rect)
</snippet></ROW><ROW><id>12229215</id><snippet>surface.blit(myFont.render(text, 1, text_color), pygame.Rect(200, 200, myFont.render(text, 1, text_color).get_rect().width, myFont.render(text, 1, text_color).get_rect().height)
</snippet></ROW><ROW><id>12229215</id><snippet>text=myFont.render(text, 1, text_color)
rect=text.get_rect()
rect.centerx=200
rect.centery=200
surface.blit(text, rect)
</snippet></ROW><ROW><id>12229215</id><snippet>surface.blit(myFont.render(text, 1, text_color), pygame.Rect(200-myFont.render(text, 1, text_color).get_rect().width/2, 200-myFont.render(text, 1, text_color).get_rect().height/2, myFont.render(text, 1, text_color).get_rect().width, myFont.render(text, 1, text_color).get_rect().height)
</snippet></ROW><ROW><id>12229228</id><snippet>img = Image.open("withAlpha.png")
p = img.load()

for y in range(2):
    for x in range(img.size[0]):
        t = list(p[x,y])
        t[3] = 0
        p[x,y] = tuple(t)

img.save("result.png")
</snippet></ROW><ROW><id>12229294</id><snippet>class Parent(Base):
    __tablename__ = 'parent'
    id = Column(Integer, primary_key=True)
    children = relationship("Child")

class Child(Base):
    __tablename__ = 'child'
    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('parent.id'))
</snippet></ROW><ROW><id>12229294</id><snippet>A</snippet></ROW><ROW><id>12229294</id><snippet>B</snippet></ROW><ROW><id>12229294</id><snippet>association_table = Table('association', Base.metadata,
    Column('left_id', Integer, ForeignKey('left.id')),
    Column('right_id', Integer, ForeignKey('right.id'))
)

class Parent(Base):
    __tablename__ = 'left'
    id = Column(Integer, primary_key=True)
    children = relationship("Child",
                    secondary=association_table)

class Child(Base):
    __tablename__ = 'right'
    id = Column(Integer, primary_key=True)
</snippet></ROW><ROW><id>12229294</id><snippet>A</snippet></ROW><ROW><id>12229294</id><snippet>B</snippet></ROW><ROW><id>12229352</id><snippet>127.0.0.1 www.google.com 
</snippet></ROW><ROW><id>12229352</id><snippet>www.google.com</snippet></ROW><ROW><id>12229352</id><snippet>80</snippet></ROW><ROW><id>12229742</id><snippet>import</snippet></ROW><ROW><id>12229742</id><snippet>sys.modules</snippet></ROW><ROW><id>12229742</id><snippet>import package.subpackage.module
from package.subpackage import module
from module import attribute1
</snippet></ROW><ROW><id>12229742</id><snippet>package.subpackage</snippet></ROW><ROW><id>12229742</id><snippet>module</snippet></ROW><ROW><id>12229742</id><snippet>module</snippet></ROW><ROW><id>12229742</id><snippet>module</snippet></ROW><ROW><id>12229742</id><snippet>from someModule import ...</snippet></ROW><ROW><id>12229742</id><snippet>from package.subpackage.module import attribute1</snippet></ROW><ROW><id>12229742</id><snippet>package.subpackage.module</snippet></ROW><ROW><id>12229742</id><snippet>from package.subpackage import module</snippet></ROW><ROW><id>12229742</id><snippet>module.attribute1</snippet></ROW><ROW><id>12229742</id><snippet>attribute1</snippet></ROW><ROW><id>12229742</id><snippet>module</snippet></ROW><ROW><id>12229742</id><snippet>from package.subpackage import module
from package.subpackage.module import attribute1
attribute1 # works
module.someOtherAttribute # also works
</snippet></ROW><ROW><id>12229742</id><snippet>package.subpackage</snippet></ROW><ROW><id>12229742</id><snippet>from package.subpackage import module
attribute1 = module.attribute1
attribute1 # works
module.someOtherAttribute #also works
</snippet></ROW><ROW><id>12229749</id><snippet>format</snippet></ROW><ROW><id>12229749</id><snippet>dprint</snippet></ROW><ROW><id>12229749</id><snippet>log.debug</snippet></ROW><ROW><id>12229749</id><snippet>log.debug('formatted message: %s', interpolated_value)
</snippet></ROW><ROW><id>12229749</id><snippet>print</snippet></ROW><ROW><id>12229749</id><snippet>log.debug</snippet></ROW><ROW><id>12229750</id><snippet>MainClass</snippet></ROW><ROW><id>12229750</id><snippet>class MainClass:
    def __init__(self, ..., otherclass=OtherClass):
        self.otherclassobj = otherclass()
        ...
    ...
</snippet></ROW><ROW><id>12229750</id><snippet>MainClass</snippet></ROW><ROW><id>12229750</id><snippet>OtherClass</snippet></ROW><ROW><id>12229750</id><snippet>ExtendedOtherClass</snippet></ROW><ROW><id>12229824</id><snippet>score</snippet></ROW><ROW><id>12229824</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; score = np.array([
... [0,0,0,0],
... [1,2,1,1],
... [2,-6,0,2],
... [3,4,1,3]
... ])
&gt;&gt;&gt; players_to_include = [0,2,3]
&gt;&gt;&gt; score[players_to_include, 1]
array([ 0, -6,  4])
</snippet></ROW><ROW><id>12229824</id><snippet>&gt;&gt;&gt; players = list(xrange(np.size(score, 0)))
&gt;&gt;&gt; players
[0, 1, 2, 3]
&gt;&gt;&gt; excludes = [2,3]
&gt;&gt;&gt; players_to_include = [p for p in players if p not in excludes]
&gt;&gt;&gt; players_to_include
[0, 1]
&gt;&gt;&gt; score[players_to_include, 1]
array([0, 2])
</snippet></ROW><ROW><id>12230001</id><snippet>print y[y[:,-1] == 0, :]
print y[y[:,-1] == 1, :]
</snippet></ROW><ROW><id>12230001</id><snippet>y[:,-1] == 0</snippet></ROW><ROW><id>12230001</id><snippet>... == 1</snippet></ROW><ROW><id>12230001</id><snippet>y[:,-1]</snippet></ROW><ROW><id>12230001</id><snippet>==</snippet></ROW><ROW><id>12230009</id><snippet>for rownum in range (rows ):     
    PrintingList.append([])
    newValues = raw_input().strip().split()
    PrintingList[rownum] += newValues
</snippet></ROW><ROW><id>12230009</id><snippet>for rownum in range (rows ):     
    PrintingList.append([])
    newValues = map(int, raw_input().strip().split())
    PrintingList[rownum] += newValues
</snippet></ROW><ROW><id>12230046</id><snippet>time.time()</snippet></ROW><ROW><id>12230046</id><snippet>n</snippet></ROW><ROW><id>12230106</id><snippet>__file__</snippet></ROW><ROW><id>12230270</id><snippet>sys.argv</snippet></ROW><ROW><id>12230270</id><snippet>argv</snippet></ROW><ROW><id>12230270</id><snippet>sys</snippet></ROW><ROW><id>12230270</id><snippet>int main(int argc, char **argv)
{
    Py_Initialize();
    PySys_SetArgv(argc, argv);
    PyRun_SimpleString("import sys\nprint sys.argv");
}
</snippet></ROW><ROW><id>12230270</id><snippet>localhost-2:argv $ ./a.out
['./a.out']
localhost-2:argv $ ./a.out arg0 17
['./a.out', 'arg0', '17']
</snippet></ROW><ROW><id>12230270</id><snippet>Py_SetProgramName</snippet></ROW><ROW><id>12230600</id><snippet>print "The number sequence is",
for bin_tens in bin_range:
    print group_counter[bin_tens],
print
</snippet></ROW><ROW><id>12230717</id><snippet>    index = np.arange(np.shape(matrix)[0])
    print index
    np.random.shuffle(index)
    return matrix[index, :]
</snippet></ROW><ROW><id>12230724</id><snippet>result = {}
for item in listOfHeroes:
    if item['user__user__username'] not in result:
        result[item['user__user__username']] = []
    result[item['user__user__username']].append({'skill': item['skill'], 'level': item['level']})

for key, value in result.items():
    print 'User: {0} / Skills: {{ {1} }}'.format(key, ' / '.join(['{0} level {1}'.format(skill['skill'], skill['level']) for skill in value]))
</snippet></ROW><ROW><id>12231214</id><snippet>"(hello) (yes) (yo diddly)"[1:-1].split(") (")
</snippet></ROW><ROW><id>12231249</id><snippet>&gt;&gt;&gt; import colander
&gt;&gt;&gt; id = colander.SchemaNode(colander.Integer())
&gt;&gt;&gt; id.deserialize('1')
1
</snippet></ROW><ROW><id>12231273</id><snippet>social_auth</snippet></ROW><ROW><id>12231273</id><snippet>django-allauth</snippet></ROW><ROW><id>12231273</id><snippet>Tweepy</snippet></ROW><ROW><id>12231393</id><snippet>StringIO</snippet></ROW><ROW><id>12231393</id><snippet>subprocess.call</snippet></ROW><ROW><id>12231393</id><snippet>os.system</snippet></ROW><ROW><id>12231393</id><snippet>StringIO</snippet></ROW><ROW><id>12231393</id><snippet>stdin</snippet></ROW><ROW><id>12231393</id><snippet>mybuffer = StringIO.StringIO(open('file.pdf').read())
subprocess.call('pdftk ...', stdin=mybuffer)
</snippet></ROW><ROW><id>12231451</id><snippet>nohup python myscript.py &gt; /dev/null 2&gt;&amp;1 &amp;
</snippet></ROW><ROW><id>12231693</id><snippet>_handle_request_exception</snippet></ROW><ROW><id>12231693</id><snippet>RequestHandler</snippet></ROW><ROW><id>12231693</id><snippet>Application</snippet></ROW><ROW><id>12231693</id><snippet>def _handle_request_exception(self, e):
    logging.error('error')
</snippet></ROW><ROW><id>12231693</id><snippet>RequestHandler</snippet></ROW><ROW><id>12231693</id><snippet>class BaseHandler(tornado.web.RequestHandler):
    def _handle_request_exception(self, e):
        logging.error('error')
</snippet></ROW><ROW><id>12231693</id><snippet>BaseHandler</snippet></ROW><ROW><id>12231695</id><snippet>logging.critical("Failed to connect to server %s:%s", options.host, options.port, msg)
</snippet></ROW><ROW><id>12231695</id><snippet>options.host</snippet></ROW><ROW><id>12231695</id><snippet>options.port</snippet></ROW><ROW><id>12231695</id><snippet>msg</snippet></ROW><ROW><id>12231695</id><snippet>%s</snippet></ROW><ROW><id>12231753</id><snippet>import urllib, urllib2, sys
num = sys.argv[1]
print 'Calling'
phones = [
'http://phone1/index.htm',
'http://phone2/index.htm',
'https://phone3/index.htm',
'https://phone4/index.htm',
'https://phone5/index.htm'
'Fatrock'
]
data = urllib.urlencode({"NUMBER":num, "DIAL":"Dial", "active_line":1})
while 1: 
    for phone in phones:
        if(phone == Fatrock)
        ##remove the lock or delete the temp file that you created.
        try:
            urllib2.urlopen(phone,data) # make call
            urllib2.urlopen(phone+"?dialeddel=0") # clear logs
        except: pass
</snippet></ROW><ROW><id>12231828</id><snippet>print("ASD", end="\r\n")
</snippet></ROW><ROW><id>12231829</id><snippet>for item in seq:
    if someCondition:
       # Here is our code block
       if blah:
           more.stuff()
</snippet></ROW><ROW><id>12231829</id><snippet>for item in seq:
    if not someCondition:
       continue
   # Now our code block is here
   if blah:
       more.stuff()
</snippet></ROW><ROW><id>12231829</id><snippet>if</snippet></ROW><ROW><id>12231858</id><snippet>    self.editname.Refresh()
</snippet></ROW><ROW><id>12231858</id><snippet>OnClick</snippet></ROW><ROW><id>12231858</id><snippet>    self.editname.Parent.Refresh()
</snippet></ROW><ROW><id>12231916</id><snippet>__new__</snippet></ROW><ROW><id>12231916</id><snippet>__init__</snippet></ROW><ROW><id>12232048</id><snippet>mylist = ['id', value]
</snippet></ROW><ROW><id>12232048</id><snippet>mylist[1]</snippet></ROW><ROW><id>12232048</id><snippet>value</snippet></ROW><ROW><id>12232048</id><snippet>mylist[mylist.index(value)]
</snippet></ROW><ROW><id>12232048</id><snippet>mylist.index(value)</snippet></ROW><ROW><id>12232048</id><snippet>value</snippet></ROW><ROW><id>12232189</id><snippet>s,i,r,p,st = linregress(y,x)
</snippet></ROW><ROW><id>12232189</id><snippet>s = 0.026330532212885151</snippet></ROW><ROW><id>12232438</id><snippet>cursor.fetchall()</snippet></ROW><ROW><id>12232438</id><snippet>class SQLRow(object):
    def __init__(self, cursor, row):
        for (attr, val) in zip((d[0] for d in cursor.description), row) :
            setattr(self, attr, val)
</snippet></ROW><ROW><id>12232438</id><snippet>def cdr_user(request):
    cursor = connections['cdr'].cursor()
    calls = cursor.execute('SELECT * FROM cdr')
    result = [SQLRow(cursor, r) for r in cursor.fetchall()]
    return render_to_response("cdr_user.html",
            {'result': result }, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>12232438</id><snippet>billsec</snippet></ROW><ROW><id>12233031</id><snippet>counter.diceOutCome[2]</snippet></ROW><ROW><id>12233031</id><snippet>counter.diceOutCome[n-1]</snippet></ROW><ROW><id>12233031</id><snippet>counter.highHorn(5)</snippet></ROW><ROW><id>12233031</id><snippet>counter.diceOutcome[5]</snippet></ROW><ROW><id>12233031</id><snippet>counter.diceOutcome[5].highHorn()</snippet></ROW><ROW><id>12233031</id><snippet>HighHorn</snippet></ROW><ROW><id>12233031</id><snippet>Bet</snippet></ROW><ROW><id>12233031</id><snippet>HighHorn</snippet></ROW><ROW><id>12233031</id><snippet>HighHorn</snippet></ROW><ROW><id>12233031</id><snippet>wins()</snippet></ROW><ROW><id>12233031</id><snippet>Bet</snippet></ROW><ROW><id>12233031</id><snippet>HighHorn(counter.diceOutCome[5]).wins()</snippet></ROW><ROW><id>12233031</id><snippet>counter</snippet></ROW><ROW><id>12233031</id><snippet>something1</snippet></ROW><ROW><id>12233031</id><snippet>something2</snippet></ROW><ROW><id>12233031</id><snippet>something3</snippet></ROW><ROW><id>12233031</id><snippet>somethings</snippet></ROW><ROW><id>12233031</id><snippet>somethings[2]</snippet></ROW><ROW><id>12233031</id><snippet>sequence[4]</snippet></ROW><ROW><id>12233031</id><snippet>sequence[4-1], the 1st item being found at</snippet></ROW><ROW><id>12233035</id><snippet>AttributeError: 'str' object has no attribute 'repeat'</snippet></ROW><ROW><id>12233035</id><snippet>repeat()</snippet></ROW><ROW><id>12233035</id><snippet>str</snippet></ROW><ROW><id>12233035</id><snippet># gives the first `length` characters in `string` to repeat for `count` times
word[:length] * count 
</snippet></ROW><ROW><id>12233035</id><snippet>length</snippet></ROW><ROW><id>12233035</id><snippet>word</snippet></ROW><ROW><id>12233035</id><snippet>word + word[-length:] * (count - 1)</snippet></ROW><ROW><id>12233112</id><snippet>&gt;&gt;&gt; class A(object):
...     name = "A"
&gt;&gt;&gt; def makeAttr(cls):
...     cls.name = "Child of " + super(cls, cls).name
...     return cls
&gt;&gt;&gt; @makeAttr
... class B(A):
...     name = "B"
&gt;&gt;&gt; B.name
'Child of A'
</snippet></ROW><ROW><id>12233221</id><snippet>word = raw_input("Enter sequence:")

# build a dictionary to know what letter to switch to
swap_dict = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}

# find out what each letter in the reversed word maps to and then join them
newword = ''.join(swap_dict[letter] for letter in reversed(word))

print "Reverse complement sequence:", newword
</snippet></ROW><ROW><id>12233221</id><snippet>if</snippet></ROW><ROW><id>12233281</id><snippet>dict</snippet></ROW><ROW><id>12233544</id><snippet>inFile</snippet></ROW><ROW><id>12233544</id><snippet>inFile = open("input.txt", "r").readlines()
for digit in mylist:
    count = 0
    for line in inFile:
        if digit == int(line):
            count = count + 1
    countlist.append(count)
</snippet></ROW><ROW><id>12233544</id><snippet>mylist = [0,1,2,3,4,5,6,7,8,9,10]
countlist = [0]*len(mylist)
inFile = open("input.txt", "r")
for line in inFile:
    digit = int(line)
    countlist[digit] += 1
</snippet></ROW><ROW><id>12233544</id><snippet>defaultdict</snippet></ROW><ROW><id>12233544</id><snippet>Counter</snippet></ROW><ROW><id>12233544</id><snippet>from collections import Counter
inFile = open("input.txt", "r")
count = Counter()
for line in inFile:
    count[int(line)] += 1
</snippet></ROW><ROW><id>12233544</id><snippet>with open("input.txt") as fp:
    count = Counter(int(line) for line in fp)
</snippet></ROW><ROW><id>12233629</id><snippet>SELECT (duration/60*0.16) FROM cdr;</snippet></ROW><ROW><id>12233629</id><snippet>result</snippet></ROW><ROW><id>12233629</id><snippet>@register.filter
def customFilter(value):
    return value / 60.0 * 0.16
</snippet></ROW><ROW><id>12233629</id><snippet>{% load %}</snippet></ROW><ROW><id>12233629</id><snippet>{{ billsec|customFilter }}
</snippet></ROW><ROW><id>12233717</id><snippet>line = int (raw_input ("Number of lines: "))
for i in range (1, line + 1):
    print i * '*'
</snippet></ROW><ROW><id>12233717</id><snippet>i</snippet></ROW><ROW><id>12233717</id><snippet>{1, 2, 3, 4, 5}</snippet></ROW><ROW><id>12233717</id><snippet>range</snippet></ROW><ROW><id>12233717</id><snippet>line + 1</snippet></ROW><ROW><id>12233717</id><snippet>pax&gt; python testprog.py
Number of lines: 5
*
**
***
****
*****
</snippet></ROW><ROW><id>12233889</id><snippet>__file__</snippet></ROW><ROW><id>12233889</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; import math
&gt;&gt;&gt; os.path.abspath(math.__file__)
'/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/math.so'
</snippet></ROW><ROW><id>12233889</id><snippet>checkIP</snippet></ROW><ROW><id>12233889</id><snippet>checkIP.py</snippet></ROW><ROW><id>12233889</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; import checkIP
&gt;&gt;&gt; os.path.abspath(checkIP.__file__)
'/Users/Matthew/Programs/checkIP.py'
&gt;&gt;&gt; checkIP.__file__
'checkIP.py'
</snippet></ROW><ROW><id>12233977</id><snippet>os.system("start " + content)
</snippet></ROW><ROW><id>12233977</id><snippet>os.startfile(content)
</snippet></ROW><ROW><id>12234096</id><snippet>class jsonEncoder(simplejson.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, db.GeoPt):
            return {'lat': obj.lat, 'lon': obj.lon}
        else:
            return simplejson.JSONEncoder.default(self, obj)
</snippet></ROW><ROW><id>12234198</id><snippet>gpuarray</snippet></ROW><ROW><id>12234198</id><snippet>ctypes.c_void_p</snippet></ROW><ROW><id>12234198</id><snippet>gpuarray</snippet></ROW><ROW><id>12234198</id><snippet>ptr</snippet></ROW><ROW><id>12234198</id><snippet>a_gpu = gpuarray.to_gpu(a)
scikits.cuda.cula.culaDeviceSgetrf(m,n,a_gpu.ptr,n,n)
</snippet></ROW><ROW><id>12234206</id><snippet>self.m_pServer = CTSRSThreadedTCPServer(('', 2304), CTSRSThreadedTCPRequestHandler)
</snippet></ROW><ROW><id>12234241</id><snippet>In [1]: a = ['Peter', '1982', '2000', 'Homeland', '10.34']

In [2]: b = ['Peter', '1982', '2000', 'Homelnad', '10.32']

In [3]: [be if ae != be else '' for ae, be in zip(a, b)]
Out[3]: ['', '', '', 'Homelnad', '10.32']
</snippet></ROW><ROW><id>12234275</id><snippet>@subscriber(NewRequest)
def new_request_subscriber(event):
    import pythoncom
    pythoncom.CoInitialize()
</snippet></ROW><ROW><id>12234298</id><snippet>data = ("John", "Doe", 53.44)
format_string = "Hello"
print format_string % data
</snippet></ROW><ROW><id>12234298</id><snippet>format_string = "....."</snippet></ROW><ROW><id>12234298</id><snippet>%s</snippet></ROW><ROW><id>12234298</id><snippet>data</snippet></ROW><ROW><id>12234321</id><snippet>Place</snippet></ROW><ROW><id>12234321</id><snippet>Restaurant</snippet></ROW><ROW><id>12234321</id><snippet>class MyForm(forms.ModelForm):
    class Meta:
         model = Restaurant

    def __init__(self, *args, **kwargs):
        self.place = kwargs.pop('place', None)
        super(MyForm, self).__init__(*args, **kwargs

    def clean_related_field(self):
        place = self.place
        try:
            place.restaurant
        except Restaurant.DoesNotExist:
            return place
        raise forms.ValidationError("Restaurant already exists for that book")


class MyView(...):
    form_class = MyForm

    def get_form_kwargs(self):
        kwargs = super(MyView, self).get_form_kwargs()
        kwargs['place'] = Place.objects.get(id=self.kwargs['pk'])
        return kwargs

{% if form.related_field.errors %}.........{% endif %}
</snippet></ROW><ROW><id>12234321</id><snippet>class MyView():
    def form_valid(self, form):
        if Restaurant.objects.filter(related_field=self.get_place()):
            ctx = self.get_context_data(form=form)
            ctx['massive_error'] = True
            return self.render_to_response(ctx)
</snippet></ROW><ROW><id>12234547</id><snippet>"django.contrib.messages.context_processors.messages"</snippet></ROW><ROW><id>12234547</id><snippet>from django.contrib.messages.api import get_messages

def messages(request):
    """
    Returns a lazy 'messages' context variable.
    """
    return {'your_name_space': get_messages(request)}
</snippet></ROW><ROW><id>12234593</id><snippet>Domain</snippet></ROW><ROW><id>12234593</id><snippet>wild_domain</snippet></ROW><ROW><id>12234593</id><snippet>AuthTktAuthenticationPolicy</snippet></ROW><ROW><id>12234593</id><snippet>AuthTktAuthenticationPolicy</snippet></ROW><ROW><id>12234593</id><snippet>secure</snippet></ROW><ROW><id>12234593</id><snippet>max_age</snippet></ROW><ROW><id>12234593</id><snippet>AuthTktAuthenticationPolicy</snippet></ROW><ROW><id>12234593</id><snippet>timeout</snippet></ROW><ROW><id>12234593</id><snippet>reissue_time</snippet></ROW><ROW><id>12234689</id><snippet>sys.stdout</snippet></ROW><ROW><id>12234689</id><snippet>file</snippet></ROW><ROW><id>12234689</id><snippet>print()</snippet></ROW><ROW><id>12234689</id><snippet>with open('C:\\Dropbox\\Python\\task1.txt','w') as output:
    print ("".join(lines[i] for i in selected), file=output)
</snippet></ROW><ROW><id>12234771</id><snippet>a="IGADKYFHARGNYDAA"
b="KGADKYFHARGNYEAA"

u=zip(a,b)          
x = 0               # not 1
for i,j in u:       # you don't need a dict here
    print i,j, 
    if i != j:      # they differ iff they are not equal to each other
        x = x + 1
        print "  neq" 
    else:
        print " eq"  
print x
</snippet></ROW><ROW><id>12234807</id><snippet>eval()</snippet></ROW><ROW><id>12234807</id><snippet>setattr()</snippet></ROW><ROW><id>12234807</id><snippet>getattr()</snippet></ROW><ROW><id>12234807</id><snippet>setattr(self, property, getattr(self, property) + amount)
</snippet></ROW><ROW><id>12234845</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>12235272</id><snippet>F(1) = 2</snippet></ROW><ROW><id>12235272</id><snippet>F(n)</snippet></ROW><ROW><id>12235272</id><snippet>n = H</snippet></ROW><ROW><id>12235272</id><snippet>F(n-1)</snippet></ROW><ROW><id>12235272</id><snippet>n = K</snippet></ROW><ROW><id>12235272</id><snippet>2 ** k</snippet></ROW><ROW><id>12235272</id><snippet>k</snippet></ROW><ROW><id>12235272</id><snippet>k = ceil((n - 1) / 2)</snippet></ROW><ROW><id>12235272</id><snippet>F(n) = F(n - 1) + 2 ** ceil((n - 1) / 2)</snippet></ROW><ROW><id>12235272</id><snippet>from math import ceil

def F(n):
    m = 1000000007
    a = 2
    for i in range(2, n+1):
        a = (a + pow(2, int(ceil((i - 1.0) / 2)), m)) % m
    return a
</snippet></ROW><ROW><id>12235272</id><snippet>F(1e9)</snippet></ROW><ROW><id>12235272</id><snippet>def F(n):
    m = 1000000007
    a = 2
    z = 1

    for i in xrange(2, n, 2):
        z = (z * 2) % m
        a = (a + z + z) % m

    if (n &amp; 1 == 0):
        z = (z * 2) % m
        a = (a + z) % m

    return a
</snippet></ROW><ROW><id>12235272</id><snippet>F(n) = (1 + 1) + (2 + 2) + (4 + 4) + ... + (2 ** n/2 + 2 ** n/2)
     = 2 * (1 + 2 + 4 + ... + 2 ** n/2)
     = 2 * (2 ** (n/2 + 1) - 1)
     = 2 ** (n/2 + 2) - 2
</snippet></ROW><ROW><id>12235272</id><snippet>n</snippet></ROW><ROW><id>12235272</id><snippet>2 ** n/2</snippet></ROW><ROW><id>12235272</id><snippet>def F(n):
    m = 1000000007
    z = pow(2, n/2, m)

    if (n % 2 == 0):
        return (z * 3 - 2) % m
    else:
        return (z * 4 - 2) % m
</snippet></ROW><ROW><id>12235272</id><snippet>pow(x, y, z)</snippet></ROW><ROW><id>12235272</id><snippet>O(lg n)</snippet></ROW><ROW><id>12235272</id><snippet>def F(n):
    return (pow(2, n/2, 1000000007) * (3 + n % 2) - 2) % 1000000007
</snippet></ROW><ROW><id>12235272</id><snippet>1   =&gt; 2
2   =&gt; 4
3   =&gt; 6
4   =&gt; 10
5   =&gt; 14
6   =&gt; 22
7   =&gt; 30
8   =&gt; 46
9   =&gt; 62
10  =&gt; 94
1e6 =&gt; 902893650
1e7 =&gt; 502879941
1e8 =&gt; 251151906
1e9 =&gt; 375000001
</snippet></ROW><ROW><id>12235442</id><snippet>def prepare():
    os.setsid() # start a new detached session
    tty.setcbreak(sys.stdin) # set standard input to cbreak mode
    old = termios.tcgetattr(sys.stdin)
    old[0] |= termios.BRKINT # transforms break to SIGINT
    old[3] &amp;= termios.ICANON # non-canonical mode
    old[3] |= termios.ECHO | termios.ISIG # set echo and signal characters handling
    cc = old[6]
    # make input unbuffered
    cc[termios.VMIN] = 1
    cc[termios.VTIME] = 0
    termios.tcsetattr(sys.stdin, termios.TCSANOW, old)

master, slave = pty.openpty()
master = os.fdopen(master, 'rb+wb', 0) # open file in an unbuffered mode
_make_non_blocking(master)

prog = subprocess.Popen(shell=False, args=['/bin/sh', '-i'], stdin=slave, stdout=slave, stderr=subprocess.STDOUT, preexec_fn=prepare)
</snippet></ROW><ROW><id>12235637</id><snippet>numpy</snippet></ROW><ROW><id>12235637</id><snippet>import numpy as np

x = np.array(["A", "B"])
print np.repeat(x, [2, 3], axis=0)

['A' 'A' 'B' 'B' 'B']
</snippet></ROW><ROW><id>12236019</id><snippet>text/event-stream</snippet></ROW><ROW><id>12236019</id><snippet>data:</snippet></ROW><ROW><id>12236019</id><snippet>data: this is a simple message
&lt;blank line&gt;
</snippet></ROW><ROW><id>12236019</id><snippet>def event_stream():
    pubsub = red.pubsub()
    pubsub.subscribe('chat')
    for message in pubsub.listen():
        print message
        yield 'data: %s\n\n' % message['data']


@app.route('/post', methods=['POST'])
def post():
    message = flask.request.form['message']
    user = flask.session.get('user', 'anonymous')
    now = datetime.datetime.now().replace(microsecond=0).time()
    red.publish('chat', u'[%s] %s: %s' % (now.isoformat(), user, message))


@app.route('/stream')
def stream():
    return flask.Response(event_stream(),
                          mimetype="text/event-stream")
</snippet></ROW><ROW><id>12236019</id><snippet>if __name__ == '__main__':
    app.debug = True
    app.run(threaded=True)
</snippet></ROW><ROW><id>12236019</id><snippet>var source = new EventSource('/stream');
source.onmessage = function (event) {
     alert(event.data);
};
</snippet></ROW><ROW><id>12236048</id><snippet>*argument</snippet></ROW><ROW><id>12236048</id><snippet>argument</snippet></ROW><ROW><id>12236048</id><snippet>"google, Inc.".replace(', Inc.', '')
</snippet></ROW><ROW><id>12236048</id><snippet>&gt;&gt;&gt; def foo(arg1, arg2):
...     print arg1, arg2
...
&gt;&gt;&gt; arguments = ('spam', 'eggs')
&gt;&gt;&gt; foo(*arguments)
spam, eggs
</snippet></ROW><ROW><id>12236048</id><snippet>**kw</snippet></ROW><ROW><id>12236048</id><snippet>&gt;&gt;&gt; def foo(arg1='ham', arg2='spam'):
...     print arg1, arg2
...
&gt;&gt;&gt; arguments = dict(arg2='foo', arg1='bar')
&gt;&gt;&gt; foo(**arguments)
bar, foo
</snippet></ROW><ROW><id>12236048</id><snippet>&gt;&gt;&gt; def foo(*args, **kw):
...     print args, kw
...
&gt;&gt;&gt; foo('arg1', 'arg2', foo='bar', spam='eggs')
('arg1', 'arg2'), {'foo': 'bar', 'spam': 'eggs'}
</snippet></ROW><ROW><id>12236406</id><snippet>awk '{print}; ""~$0 {getline; print "$" $0}' input_file
</snippet></ROW><ROW><id>12236406</id><snippet>text1

$text2
text3

$text4
text5
</snippet></ROW><ROW><id>12236406</id><snippet>awk '""~$0 {flag=1; print; next}; flag {printf "$"; flag=0} 1'
</snippet></ROW><ROW><id>12236808</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm

x = np.arange(10)
ys = [i+x+(i*x)**2 for i in range(10)]

colors = cm.rainbow(np.linspace(0, 1, len(ys)))
for y, c in zip(ys, colors):
    plt.scatter(x, y, color=c)
</snippet></ROW><ROW><id>12236808</id><snippet>itertools.cycle</snippet></ROW><ROW><id>12236808</id><snippet>next</snippet></ROW><ROW><id>12236808</id><snippet>colors = itertools.cycle(["r", "b", "g"])
for y in ys:
    plt.scatter(x, y, color=next(colors))
</snippet></ROW><ROW><id>12236808</id><snippet>zip</snippet></ROW><ROW><id>12236808</id><snippet>colors = iter(cm.rainbow(np.linspace(0, 1, len(ys))))
for y in ys:
    plt.scatter(x, y, color=next(colors))
</snippet></ROW><ROW><id>12236885</id><snippet>with open('pyuca.pyc', 'rb') as f:
    print struct.unpack('&lt;H', f.read(2))
</snippet></ROW><ROW><id>12236885</id><snippet>sys.version</snippet></ROW><ROW><id>12236885</id><snippet>.pyo</snippet></ROW><ROW><id>12237022</id><snippet>env</snippet></ROW><ROW><id>12237022</id><snippet>from fabric.api import *

credentials = load_credentials_from_your_db()
for (hostname, username, password) in credentials:
    host_string = username + '@' + hostname
    env.hosts.append(host_string)
    env.passwords[host_string] = password
</snippet></ROW><ROW><id>12237027</id><snippet>"address_is_after_"</snippet></ROW><ROW><id>12237027</id><snippet>&gt;&gt;&gt; m = re.search(r"(?&lt;=address_is_after_)\d+|\d+(?=_address_is_before)",text)
&gt;&gt;&gt; m.group(0)
'123'
</snippet></ROW><ROW><id>12237216</id><snippet>class</snippet></ROW><ROW><id>12237216</id><snippet>__repr__</snippet></ROW><ROW><id>12237216</id><snippet>&gt;&gt;&gt; int       # "type"
&lt;type 'int'&gt;
&gt;&gt;&gt; class X(object): pass
... 
&gt;&gt;&gt; X         # "class"
&lt;class '__main__.X'&gt;
</snippet></ROW><ROW><id>12237216</id><snippet>__repr__</snippet></ROW><ROW><id>12237216</id><snippet>is_class_instance</snippet></ROW><ROW><id>12237216</id><snippet># Built-in types such as int or object do not have __dict__ by
# default. __dict__ is normally obtained by inheriting from a
# dictless type using the class statement.  Checking for the
# existence of __dict__ is an indication of a class instance.
#
# Caveat: a built-in or extension type can still request instance
# dicts using tp_dictoffset, and a class can suppress it with
# __slots__.
def is_class_instance(o):
    return hasattr(o, '__dict__')

# A reliable approach, but one that is also more dependent
# on the CPython implementation.
Py_TPFLAGS_HEAPTYPE = (1L&lt;&lt;9)       # Include/object.h
def is_class_instance(o):
    return bool(type(o).__flags__ &amp; Py_TPFLAGS_HEAPTYPE)
</snippet></ROW><ROW><id>12237216</id><snippet>tp_flags</snippet></ROW><ROW><id>12237216</id><snippet>PyTypeObject</snippet></ROW><ROW><id>12237216</id><snippet>Py_TPFLAGS_HEAPTYPE</snippet></ROW><ROW><id>12237216</id><snippet>Py_TPFLAGS_HEAPTYPE</snippet></ROW><ROW><id>12237216</id><snippet>Py_TPFLAGS</snippet></ROW><ROW><id>12237216</id><snippet>Include/object.h</snippet></ROW><ROW><id>12237218</id><snippet>markdown2.py</snippet></ROW><ROW><id>12237218</id><snippet>cheese</snippet></ROW><ROW><id>12237218</id><snippet>import markdown2</snippet></ROW><ROW><id>12237296</id><snippet>from itertools import product

for word, letter, hours in product(["AAA", "BBB", "CCC"], ["M", "Q", "S", "K", "B"], ["00:00", "01:00", "02:00", "03:00"]):
</snippet></ROW><ROW><id>12237296</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; for word, letter, hours in product(["AAA", "BBB", "CCC"], ["M", "Q", "S", "K", "B"], ["00:00", "01:00", "02:00", "03:00"]):
...     print word, letter, hours
... 
AAA M 00:00
AAA M 01:00
AAA M 02:00
AAA M 03:00
...
CCC B 00:00
CCC B 01:00
CCC B 02:00
CCC B 03:00
</snippet></ROW><ROW><id>12237397</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; v = np.array(np.arange(24)).reshape(2,3,4)
&gt;&gt;&gt; v
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])
&gt;&gt;&gt; v[:, 1, 3]
array([ 7, 19])
</snippet></ROW><ROW><id>12237397</id><snippet>&gt;&gt;&gt; v[0, :, 0]
array([0, 4, 8])
&gt;&gt;&gt; v[1, 1, :]
array([16, 17, 18, 19])
</snippet></ROW><ROW><id>12237435</id><snippet>a = [2,2]
b = [a] * 3
b =&gt; [a, a, a] =&gt; [[2,2], [2,2], [2,2]]
</snippet></ROW><ROW><id>12237435</id><snippet>b</snippet></ROW><ROW><id>12237435</id><snippet>a</snippet></ROW><ROW><id>12237435</id><snippet>new_list = old_list[:]
</snippet></ROW><ROW><id>12237435</id><snippet>new_list = list(old_list)
</snippet></ROW><ROW><id>12237455</id><snippet>import unittest
import carfactory
from mock import Mock

def constructorMock(name):
    """Create fake constructor that returns Mock object when invoked"""
    instance = Mock()
    instance._name_of_parent_class = name
    constructor = Mock(return_value=instance)
    return constructor

class CarFactoryTest(unittest.TestCase):

    def setUp():
        """Replace classes Wheel, Engine and Car with mock objects"""

        carfactory.Wheel = constructorMock("Wheel")
        carfactory.Engine = constructorMock("Engine")
        carfactory.Car = constructorMock("Car")

    def test_factory_creates_car():
        """Create car and check it has correct properties"""

        factory = carfactory.CarFactory()
        car_created = factory.create_car()

        # Check the wheels are created with correct radii
        carfactory.Wheel.assert_called_with(radius=50)
        carfactory.Wheel.assert_called_with(radius=50)
        carfactory.Wheel.assert_called_with(radius=60)
        carfactory.Wheel.assert_called_with(radius=60)

        # Check the engine is created with correct power
        carfactory.Engine.assert_called_once_with(power=500)

        # Check the car is created with correct engine and wheels
        wheel = carfactory.Wheel.return_value
        engine = carfactory.Engine.return_value
        carfactory.Car.assert_called_once_with(engine, [wheel, wheel, wheel, wheel])

        # Check the returned value is the car created
        self.assertEqual(car_created._name_of_parent_class, "Car")
</snippet></ROW><ROW><id>12237496</id><snippet>\p{property=value}</snippet></ROW><ROW><id>12237496</id><snippet>\p{property=value}; \P{property=value}; \p{value} ; \P{value}
</snippet></ROW><ROW><id>12237496</id><snippet>Word_Break</snippet></ROW><ROW><id>12237496</id><snippet>ALetter</snippet></ROW><ROW><id>12237496</id><snippet>.format(A='...')</snippet></ROW><ROW><id>12237496</id><snippet>"(?:\p{Word_Break=ALetter}(?:'\p{Word_Break=ALetter})?)++|-+|\S"
</snippet></ROW><ROW><id>12237496</id><snippet>-+</snippet></ROW><ROW><id>12237496</id><snippet>-</snippet></ROW><ROW><id>12237496</id><snippet>re</snippet></ROW><ROW><id>12237496</id><snippet>++</snippet></ROW><ROW><id>12237591</id><snippet>axes</snippet></ROW><ROW><id>12237591</id><snippet>import numpy
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider
# fake data
xdata = numpy.random.rand(100,100) 
ydata = numpy.random.rand(100,100) 
# set up figure
fig = plt.figure()
ax = fig.add_subplot(111)
ax.autoscale(True)
plt.subplots_adjust(left=0.25, bottom=0.25)

# plot first data set
frame = 0
ln, = ax.plot(xdata[frame],ydata[frame])

# make the slider
axframe = plt.axes([0.25, 0.1, 0.65, 0.03])
sframe = Slider(axframe, 'Frame', 0, 99, valinit=0,valfmt='%d')

# call back function
def update(val):
    frame = numpy.floor(sframe.val)
    ln.set_xdata(xdata[frame])
    ln.set_ydata((frame+1)* ydata[frame])
    ax.set_title(frame)
    ax.relim()
    ax.autoscale_view()
    plt.draw()

# connect callback to slider   
sframe.on_changed(update)
plt.show()
</snippet></ROW><ROW><id>12237664</id><snippet>.sum</snippet></ROW><ROW><id>12237664</id><snippet>squared_X = X.copy()
# now square the data in squared_X
squared_X.data **= 2

# and sum each row:
squared_sum = squared_X.sum(1)
# and delete the squared_X:
del squared_X
</snippet></ROW><ROW><id>12237664</id><snippet>.data</snippet></ROW><ROW><id>12237664</id><snippet>X.sum_duplicate() # make sure, not sure if this happens with normal usage.
old_data = X.data.copy()
X.data **= 2
squared_sum = X.sum(1)
X.data = old_data
</snippet></ROW><ROW><id>12237664</id><snippet>.multiply</snippet></ROW><ROW><id>12237664</id><snippet>squared_sum = X.multiply(X).sum(1)
</snippet></ROW><ROW><id>12237664</id><snippet>csr.data</snippet></ROW><ROW><id>12237664</id><snippet>.sum_duplicates()</snippet></ROW><ROW><id>12237692</id><snippet>ndb</snippet></ROW><ROW><id>12237906</id><snippet>SPARQLWrapper</snippet></ROW><ROW><id>12237906</id><snippet>UnicodeDecoreError</snippet></ROW><ROW><id>12237906</id><snippet>unicode_obj = some_utf8_string.decode('utf-8')
</snippet></ROW><ROW><id>12237906</id><snippet>unicode_obj = u'Hello World'
</snippet></ROW><ROW><id>12237906</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>12237906</id><snippet>urllib.quote_plus</snippet></ROW><ROW><id>12237906</id><snippet>from urllib import quote_plus
encoded_url = quote_plus(url, safe='/:')
</snippet></ROW><ROW><id>12237906</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

from SPARQLWrapper import SPARQLWrapper, JSON
from urllib import quote_plus

url = 'http://dbpedia.org/resource/Musée_du_Louvre'
encoded_url = quote_plus(url, safe='/:')

sparql = SPARQLWrapper("http://dbpedia.org/sparql")

query = u"""
    PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
    SELECT ?subject
    WHERE { &lt;%s&gt; dcterms:subject ?subject }
""" % encoded_url

sparql.setQuery(query)

# JSON example
print '\n\n*** JSON Example'
sparql.setReturnFormat(JSON)
results = sparql.query().convert()
for result in results["results"]["bindings"]:
    print result["subject"]["value"]
</snippet></ROW><ROW><id>12237944</id><snippet>&gt; db.prescriptions.addIndex({'key': 1});
</snippet></ROW><ROW><id>12238111</id><snippet># memorize position of fixed elements
fixed = [(pos, item) for (pos,item) in enumerate(items) if item.freeze]
# shuffle list
random.shuffle(items)
# swap fixed elements back to their original position
for pos, item in fixed:
    index = items.index(item)
    items[pos], items[index] = items[index], items[pos]
</snippet></ROW><ROW><id>12238133</id><snippet>.multiply</snippet></ROW><ROW><id>12238133</id><snippet># Assuming that Y is 1D, might need to do Y = Y.A.ravel() or such...

# just to make the point that this works only with CSR:
if not isinstance(X, scipy.sparse.csr_matrix):
    raise ValueError('Matrix must be CSR.')

Z = X.copy()
# simply repeat each value in Y by the number of nnz elements in each row: 
Z.data *= Y.repeat(np.diff(Z.indptr))
</snippet></ROW><ROW><id>12238133</id><snippet>Z.data *= Y[Z.row] # you can use np.take which is faster then indexing.
</snippet></ROW><ROW><id>12238133</id><snippet>Z.data *= Y[Z.indices]
</snippet></ROW><ROW><id>12238278</id><snippet>pip -U scoop</snippet></ROW><ROW><id>12238344</id><snippet>def populate( self, tree ):
    tree.setEditTriggers(tree.SelectedClicked)
    for i in range(10):
        item = QTreeWidgetItem(['Testing %02i' % i])
        item.setFlags(item.flags() | item.ItemIsEditable)
</snippet></ROW><ROW><id>12238410</id><snippet>import grequests
from bs4 import BeautifulSoup


def get_urls_from_response(r):
    soup = BeautifulSoup(r.text)
    urls = [link.get('href') for link in soup.find_all('a')]
    return urls


def print_url(args):
    print args['url']


def recursive_urls(urls):
    """
    Given a list of starting urls, recursively finds all descendant urls
    recursively
    """
    if len(urls) == 0:
        return
    rs = [grequests.get(url, hooks=dict(args=print_url)) for url in urls]
    responses = grequests.map(rs)
    url_lists = [get_urls_from_response(response) for response in responses]
    urls = sum(url_lists, [])  # flatten list of lists into a list
    recursive_urls(urls)
</snippet></ROW><ROW><id>12238410</id><snippet>grequests</snippet></ROW><ROW><id>12238410</id><snippet>requests</snippet></ROW><ROW><id>12238410</id><snippet>grequest</snippet></ROW><ROW><id>12238410</id><snippet>gevent+request</snippet></ROW><ROW><id>12238410</id><snippet>gevent</snippet></ROW><ROW><id>12238410</id><snippet>import grequests
from bs4 import BeautifulSoup


def get_urls_from_response(r):
    soup = BeautifulSoup(r.text)
    urls = [link.get('href') for link in soup.find_all('a')]
    return urls


def print_url(args):
    print args['url']


def recursive_urls(urls):
    """
    Given a list of starting urls, recursively finds all descendant urls
    recursively
    """
    while True:
        if len(urls) == 0:
            break
        rs = [grequests.get(url, hooks=dict(args=print_url)) for url in urls]
        responses = grequests.map(rs)
        url_lists = [get_urls_from_response(response) for response in responses]
        urls = sum(url_lists, [])  # flatten list of lists into a list

if __name__ == "__main__":
    recursive_urls(["INITIAL_URLS"])
</snippet></ROW><ROW><id>12238526</id><snippet>split</snippet></ROW><ROW><id>12238526</id><snippet>r = r.split(' ')</snippet></ROW><ROW><id>12238588</id><snippet>x,y</snippet></ROW><ROW><id>12238588</id><snippet>def eventFilter(self, obj, event):
    if obj is self.p1 and event.type() == event.GraphicsSceneMousePress:
        if event.button() == Qt.LeftButton:
            pos = event.scenePos()
            x = QtGui.QTableWidgetItem(
                '%0.01f' % ((pos.x() * 2.486 / 96) - 1))
            y = QtGui.QTableWidgetItem(
                '%0.01f' % (pos.y() * 10.28 / 512))
            row = self.coordinates.rowCount()
            self.coordinates.insertRow(row)
            self.coordinates.setItem(row, 0, x)
            self.coordinates.setItem(row, 1, y)
</snippet></ROW><ROW><id>12238656</id><snippet>load</snippet></ROW><ROW><id>12238656</id><snippet>def load():
    inFile = open('save.txt', 'rb')
    newList = cPickle.load(inFile)
    inFile.close()
    return newList
</snippet></ROW><ROW><id>12238656</id><snippet>def load(name_of_your_saved_file):
    with open(name_of_your_saved_file, 'rb') as inFile:
        newList = cPickle.load(inFile)
    return newList
</snippet></ROW><ROW><id>12238656</id><snippet>with...as</snippet></ROW><ROW><id>12238656</id><snippet>load</snippet></ROW><ROW><id>12238656</id><snippet>GameState</snippet></ROW><ROW><id>12238656</id><snippet>game_state_loaded = load('save.txt')
</snippet></ROW><ROW><id>12238725</id><snippet>exec</snippet></ROW><ROW><id>12238725</id><snippet>compile</snippet></ROW><ROW><id>12238725</id><snippet>exec</snippet></ROW><ROW><id>12238725</id><snippet>exec</snippet></ROW><ROW><id>12238725</id><snippet>exec</snippet></ROW><ROW><id>12238725</id><snippet>from __future__ import print_function

import sys


def a():
    print('a()')


def comment_1(s):
    lines = s.split('\n')
    return '\n'.join(line.replace(';','#;',1) if line.strip().startswith('1;') else line for line in lines)

_blocked = False

def remove_1(f):
    global _blocked
    if _blocked:
        return f
    import inspect
    source = inspect.getsource(f)    
    new_source = comment_1(source)
    env = sys.modules[f.__module__].__dict__
    _blocked = True
    try:
        exec new_source in env
    finally:
        _blocked = False
    return env[f.__name__]


@remove_1
def f():
    1;a()
    print('Some statements 1')
    1;a()
    print('Some statements 2')


f()

def remove_1(f):    
    import inspect
    source = inspect.getsource(f)    
    new_source = comment_1(source)
    env = sys.modules[f.__module__].__dict__.copy()
    exec new_source in env
    return env[f.__name__]
</snippet></ROW><ROW><id>12239032</id><snippet>compose()</snippet></ROW><ROW><id>12239032</id><snippet>try:
    from functools import reduce  # Python 3 compatibility
except:
    pass

def compose(*funcs, **kwargs):
    """Compose a series of functions (...(f3(f2(f1(*args, **kwargs))))) into
    a single composite function which passes the result of each
    function as the argument to the next, from the first to last
    given.
    """
    return reduce(lambda f, g:
                    lambda *args, **kwargs: f(g(*args, **kwargs)),
                        reversed(funcs))
</snippet></ROW><ROW><id>12239032</id><snippet>f = lambda x: 'f({!r})'.format(x)
g = lambda x: 'g({})'.format(x)
h = lambda x: 'h({})'.format(x)

my_composition = compose(f, g, h)
print my_composition('X')
</snippet></ROW><ROW><id>12239032</id><snippet>h(g(f('X')))
</snippet></ROW><ROW><id>12239032</id><snippet>my_composition = compose(remove_tables, clean_text_passage, replace,
                         count_words, risk_count)
with open('filing2.txt') as input:
    riskcount = my_composition(input.read())
</snippet></ROW><ROW><id>12239037</id><snippet>write</snippet></ROW><ROW><id>12239037</id><snippet>write</snippet></ROW><ROW><id>12239037</id><snippet>write</snippet></ROW><ROW><id>12239037</id><snippet>log.info</snippet></ROW><ROW><id>12239037</id><snippet>write(fd, buf, buflen);
</snippet></ROW><ROW><id>12239037</id><snippet>fd</snippet></ROW><ROW><id>12239037</id><snippet>buf</snippet></ROW><ROW><id>12239037</id><snippet>buflen</snippet></ROW><ROW><id>12239037</id><snippet>strace</snippet></ROW><ROW><id>12239037</id><snippet>write</snippet></ROW><ROW><id>12239037</id><snippet>buflen</snippet></ROW><ROW><id>12239037</id><snippet>buflen</snippet></ROW><ROW><id>12239037</id><snippet>write</snippet></ROW><ROW><id>12239037</id><snippet>write</snippet></ROW><ROW><id>12239037</id><snippet>fd</snippet></ROW><ROW><id>12239037</id><snippet>write</snippet></ROW><ROW><id>12239037</id><snippet>write</snippet></ROW><ROW><id>12239239</id><snippet>scipy.sparse</snippet></ROW><ROW><id>12239405</id><snippet>'file_input' in request.POST'</snippet></ROW><ROW><id>12239405</id><snippet>u''</snippet></ROW><ROW><id>12239405</id><snippet>if 'file_input' in request.POST and hasattr(request.POST['file_input'], 'filename'):
</snippet></ROW><ROW><id>12239405</id><snippet>cgi.FieldStorage</snippet></ROW><ROW><id>12239405</id><snippet>filename</snippet></ROW><ROW><id>12239405</id><snippet>cgi</snippet></ROW><ROW><id>12239444</id><snippet>from suds.xsd.doctor import Import
from suds.xsd.doctor import ImportDoctor
from suds.client import Client


url = 'https://personyze.com/site/service/service/social_archive/'
tns = 'urn:SocialArchiveServiceProviderwsdl'

imp = Import('http://schemas.xmlsoap.org/soap/encoding/', 'http://schemas.xmlsoap.org/soap/encoding/')
imp.filter.add(tns)
client = Client(url,plugins=[ImportDoctor(imp)])

print client.service.select({"server_id":123456, "api_key":123456}, "user_id")
</snippet></ROW><ROW><id>12239453</id><snippet>Project</snippet></ROW><ROW><id>12239453</id><snippet>src</snippet></ROW><ROW><id>12239453</id><snippet>Mark directory as</snippet></ROW><ROW><id>12239453</id><snippet>Source root</snippet></ROW><ROW><id>12239592</id><snippet>&lt;pythonInstallationDir&gt;/Lib/win32com/gen-py</snippet></ROW><ROW><id>12239663</id><snippet>QWidget</snippet></ROW><ROW><id>12239663</id><snippet>canvas</snippet></ROW><ROW><id>12239663</id><snippet>toolbar</snippet></ROW><ROW><id>12239663</id><snippet>QWidget</snippet></ROW><ROW><id>12239663</id><snippet>QWidget</snippet></ROW><ROW><id>12239663</id><snippet>minimumSize</snippet></ROW><ROW><id>12239663</id><snippet>QScrollArea</snippet></ROW><ROW><id>12239663</id><snippet>QScrollArea</snippet></ROW><ROW><id>12239663</id><snippet>FigureCanvas</snippet></ROW><ROW><id>12239663</id><snippet>minimumSize</snippet></ROW><ROW><id>12239663</id><snippet>for i in xrange(5):
  qfigWidget = QtGui.QWidget(qscrollContents)

  fig = Figure((5.0, 4.0), dpi=100)
  canvas = FigureCanvas(fig)
  canvas.setParent(qfigWidget)
  toolbar = NavigationToolbar(canvas, qfigWidget)
  axes = fig.add_subplot(111)
  axes.plot([1,2,3,4])

  # place plot components in a layout
  plotLayout = QtGui.QVBoxLayout()
  plotLayout.addWidget(canvas)
  plotLayout.addWidget(toolbar)
  qfigWidget.setLayout(plotLayout)

  # prevent the canvas to shrink beyond a point
  # original size looks like a good minimum size
  canvas.setMinimumSize(canvas.size())

  qscrollLayout.addWidget(qfigWidget)
</snippet></ROW><ROW><id>12239720</id><snippet># python-script.py 
import xyz
if __name__ == '__main__':
    xyz.showdate()
</snippet></ROW><ROW><id>12239720</id><snippet>python path/to/python-script.py
</snippet></ROW><ROW><id>12239720</id><snippet>xyz.showdate</snippet></ROW><ROW><id>12239936</id><snippet>(.)\1</snippet></ROW><ROW><id>12239936</id><snippet>(\d+):\w+</snippet></ROW><ROW><id>12240286</id><snippet>re.UNICODE</snippet></ROW><ROW><id>12240286</id><snippet>&gt;&gt;&gt; re.findall(r'\w+', 'abc def güi jkl', re.UNICODE)
['abc', 'def', 'g\xc3\xbci', 'jkl']
</snippet></ROW><ROW><id>12240307</id><snippet>np.log10</snippet></ROW><ROW><id>12240307</id><snippet>math.log10</snippet></ROW><ROW><id>12240307</id><snippet>X.data = np.log10(X.data)
</snippet></ROW><ROW><id>12240419</id><snippet>dprint</snippet></ROW><ROW><id>12240419</id><snippet>ast</snippet></ROW><ROW><id>12240419</id><snippet>temp_f.py</snippet></ROW><ROW><id>12240419</id><snippet>f</snippet></ROW><ROW><id>12240419</id><snippet>_blocked</snippet></ROW><ROW><id>12240419</id><snippet>from __future__ import print_function

DEBUG = False

def dprint(*args,**kwargs):
    '''Debug print'''
    print(*args,**kwargs)

_blocked = False
def nodebug(name='dprint'):
    '''Decorator to remove all functions with name 'name' being a separate expressions'''
    def helper(f):      
        global _blocked
        if _blocked:
            return f

        import inspect, ast, sys

        source = inspect.getsource(f)        
        a = ast.parse(source) #get ast tree of f

        class Transformer(ast.NodeTransformer):
            '''Will delete all expressions containing 'name' functions at the top level'''
            def visit_Expr(self, node): #visit all expressions
                try:
                    if node.value.func.id == name: #if expression consists of function with name a
                        return None #delete it
                except(ValueError):
                    pass
                return node #return node unchanged
        transformer = Transformer()
        a_new = transformer.visit(a)
        f_new_compiled = compile(a_new,'&lt;string&gt;','exec')

        env = sys.modules[f.__module__].__dict__
        _blocked = True
        try:
            exec(f_new_compiled,env)
        finally:
            _blocked = False
        return env[f.__name__]         
    return helper


@nodebug('dprint')        
def f():
    dprint('f() started')
    print('Important output')
    dprint('f() ended')
    print('Important output2')


f()
</snippet></ROW><ROW><id>12240528</id><snippet>python setup.py build
sudo python setup.py install
</snippet></ROW><ROW><id>12240667</id><snippet>data = ['a,x', 'b,y', 'c,z']
f = open('data.csv', 'wb')
w = csv.writer(f, delimiter = ',')
w.writerows([x.split(',') for x in data])
f.close()
</snippet></ROW><ROW><id>12240719</id><snippet>fetchall()</snippet></ROW><ROW><id>12240719</id><snippet>for row in result:
  print row[0]
</snippet></ROW><ROW><id>12240751</id><snippet>dict</snippet></ROW><ROW><id>12240751</id><snippet>unquote_plus</snippet></ROW><ROW><id>12240751</id><snippet>QUrl</snippet></ROW><ROW><id>12240751</id><snippet>formSubmitted</snippet></ROW><ROW><id>12240751</id><snippet>close()</snippet></ROW><ROW><id>12240751</id><snippet>quit()</snippet></ROW><ROW><id>12240751</id><snippet>contentsMargins</snippet></ROW><ROW><id>12240751</id><snippet>import sys
from urllib import unquote_plus

from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *

class MyWebPage(QWebPage):
    formSubmitted = pyqtSignal(QUrl)

    def acceptNavigationRequest(self, frame, req, nav_type):
        if nav_type == QWebPage.NavigationTypeFormSubmitted:
            self.formSubmitted.emit(req.url())
        return super(MyWebPage, self).acceptNavigationRequest(frame, req, nav_type)

class Window(QWidget):
    def __init__(self, html):
        super(Window, self).__init__()
        self.setWindowFlags(Qt.FramelessWindowHint)
        view = QWebView(self)
        layout = QVBoxLayout(self)
        layout.addWidget(view)
        layout.setContentsMargins(0, 0, 0, 0)
        view.setPage(MyWebPage())
        view.setHtml(html)
        view.page().formSubmitted.connect(self.handleFormSubmitted)

    def handleFormSubmitted(self, url):
        self.close()
        elements = {}
        for key, value in url.encodedQueryItems():
            key = unquote_plus(bytes(key)).decode('utf8')
            value = unquote_plus(bytes(value)).decode('utf8')
            elements[key] = value
        # do stuff with elements...
        for item in elements.iteritems():
            print '"%s" = "%s"' % item
        qApp.quit()

# setup the html form
html = """
&lt;form action="" method="get"&gt;
Like it?
&lt;input type="radio" name="like" value="yes"/&gt; Yes
&lt;input type="radio" name="like" value="no" /&gt; No
&lt;br/&gt;&lt;input type="text" name="text" value="" /&gt;
&lt;input type="submit" name="submit" value="Send"/&gt;
&lt;/form&gt;
"""

def main():
    app = QApplication(sys.argv)

    window = Window(html)
    window.show()
    app.exec_()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>12240777</id><snippet>HAVING</snippet></ROW><ROW><id>12240777</id><snippet>GROUP BY</snippet></ROW><ROW><id>12240777</id><snippet>EXISTS</snippet></ROW><ROW><id>12240777</id><snippet>Event.exceptions</snippet></ROW><ROW><id>12240777</id><snippet>session.query(Event).filter(or_(
    and_(
        Event.regular == True,
        ~Event.exceptions.any(and_(
            EventException.year == current_year,
            EventException.occurs == False,
        )),
    ),
    and_(
        Event.regular == False,
        Event.exceptions.any(and_(
            EventException.year == current_year,
            EventException.occurs == True,
        )),
    ),
))
</snippet></ROW><ROW><id>12240777</id><snippet>SELECT event.*
FROM event
WHERE
    (
        event.regular = true
        AND NOT EXISTS (
            SELECT 1
            FROM event_exception
            WHERE
                event.id = event_exception.event_id
                AND event_exception.year == :year
                AND event_exception.occurs = false
        )
    )
    OR
    (
        event.regular = false
        AND EXISTS (
            SELECT 1
            FROM event_exception
            WHERE
                event.id = event_exception.event_id
                AND event_exception.year == :year
                AND event_exception.occurs = true
        )
    )
</snippet></ROW><ROW><id>12240777</id><snippet>NOT EXISTS</snippet></ROW><ROW><id>12240790</id><snippet>scipy.interpolate.interp1d</snippet></ROW><ROW><id>12240799</id><snippet>for file in form</snippet></ROW><ROW><id>12240799</id><snippet>form['file']</snippet></ROW><ROW><id>12240799</id><snippet>method=post enctype=multipart/form-data</snippet></ROW><ROW><id>12240799</id><snippet>import shutil

if 'file' in form:
   filefield = form['file']
   if not isinstance(filefield, list):
      filefield = [filefield]

   for fileitem in filefield:
       if fileitem.filename:
          fn = secure_filename(fileitem.filename)
          # save file
          with open('/var/www/domain.com/files/' + fn, 'wb') as f:
              shutil.copyfileobj(fileitem.file, f)
</snippet></ROW><ROW><id>12241477</id><snippet>on_done</snippet></ROW><ROW><id>12241477</id><snippet>    self.view.window().show_input_panel("Name", "", self.on_done, None, None)
</snippet></ROW><ROW><id>12241477</id><snippet>self.on_done</snippet></ROW><ROW><id>12241477</id><snippet>print "run: ", self.name</snippet></ROW><ROW><id>12241477</id><snippet>on_done</snippet></ROW><ROW><id>12241477</id><snippet>print "on_done: ", self.name</snippet></ROW><ROW><id>12241651</id><snippet>line = line.strip()
</snippet></ROW><ROW><id>12241651</id><snippet>if (lnum == 19):</snippet></ROW><ROW><id>12241651</id><snippet>line</snippet></ROW><ROW><id>12241651</id><snippet>write</snippet></ROW><ROW><id>12241651</id><snippet> line = line.strip()
 line = "{0:.2e} {} {0:.2e}   {0:.2e}\n".format(x, line, y, z)
</snippet></ROW><ROW><id>12242256</id><snippet>b</snippet></ROW><ROW><id>12242256</id><snippet>n-1</snippet></ROW><ROW><id>12242256</id><snippet>n</snippet></ROW><ROW><id>12242256</id><snippet>1</snippet></ROW><ROW><id>12242256</id><snippet>def g(b, n):
    assert isinstance(n, int) and n &gt;= 0
    ret = 1
    for _ in xrange(n):
        ret = b ** ret
    return ret
</snippet></ROW><ROW><id>12242296</id><snippet>import numpy as np
import visvis as vv
app = vv.use()

f = vv.clf()
a = vv.cla()

angle = np.linspace(0, 6*np.pi, 1000)
x = np.sin(angle)
y = np.cos(angle)
z = angle / 6.0
vv.plot(x, y, z, lw=10)

angle += np.pi*2/3.0
x = np.sin(angle)
y = np.cos(angle)
z = angle / 6.0 - 0.5
vv.plot(x, y, z, lc ="r", lw=10)

app.Run()
</snippet></ROW><ROW><id>12242296</id><snippet>import numpy as np
from mayavi import mlab

angle = np.linspace(0, 6*np.pi, 1000)
x = np.sin(angle)
y = np.cos(angle)
z = angle / 6.0

mlab.plot3d(x, y, z, color=(1,0,0), tube_radius=0.1)

angle += np.pi*2/3.0
x = np.sin(angle)
y = np.cos(angle)
z = angle / 6.0 - 0.5
mlab.plot3d(x, y, z, color=(0,0,1), tube_radius=0.1)

mlab.axes()
mlab.show()
</snippet></ROW><ROW><id>12242445</id><snippet>__main__</snippet></ROW><ROW><id>12242445</id><snippet>dad</snippet></ROW><ROW><id>12242445</id><snippet>__main__</snippet></ROW><ROW><id>12242445</id><snippet>__name__</snippet></ROW><ROW><id>12242608</id><snippet>driver.execute_script("document.getElementById('id_cv_upload').style.display='block';")
</snippet></ROW><ROW><id>12242608</id><snippet>driver.execute_script</snippet></ROW><ROW><id>12242634</id><snippet>xmpp.Client</snippet></ROW><ROW><id>12242634</id><snippet>import xmpp

jid = xmpp.JID("actual.user@gmail.com")
connection = xmpp.Client(jid.getDomain())
connection.connect()
</snippet></ROW><ROW><id>12242728</id><snippet>&gt;&gt;&gt; t = [[9, 30, '09:30AM', 3, ''],
... [10, 0, '10:00AM', 3, ''],
... [10, 30, '10:30AM', 3, ''],
... [11, 0, '11:00AM', 3, '']]
&gt;&gt;&gt; t.index([10, 30, '10:30AM', 3, ''])
2
</snippet></ROW><ROW><id>12242734</id><snippet>run('adduser -g vpn -c %s %s' % (eid, uid))
</snippet></ROW><ROW><id>12242734</id><snippet>run('adduser -g vpn -c %s %s') % (eid, uid)
</snippet></ROW><ROW><id>12242734</id><snippet>run("echo -e '%s\n' | passwd %s" % (password, uid))
</snippet></ROW><ROW><id>12242734</id><snippet>run("echo -e '%s\n' | passwd %s") % (password, uid)
</snippet></ROW><ROW><id>12242891</id><snippet>89</snippet></ROW><ROW><id>12242891</id><snippet>Y</snippet></ROW><ROW><id>12242891</id><snippet>122</snippet></ROW><ROW><id>12242891</id><snippet>z</snippet></ROW><ROW><id>12242891</id><snippet>98</snippet></ROW><ROW><id>12242891</id><snippet>b</snippet></ROW><ROW><id>12242891</id><snippet>pack</snippet></ROW><ROW><id>12242891</id><snippet>'\x59\x00\x00\x00'</snippet></ROW><ROW><id>12242891</id><snippet>0x00000059</snippet></ROW><ROW><id>12242891</id><snippet>'\x59'</snippet></ROW><ROW><id>12242891</id><snippet>'Y'</snippet></ROW><ROW><id>12242891</id><snippet>'\x7a\x03\x00\x00'</snippet></ROW><ROW><id>12242891</id><snippet>0x0000037a</snippet></ROW><ROW><id>12242891</id><snippet>'\x7a'</snippet></ROW><ROW><id>12242891</id><snippet>'z'</snippet></ROW><ROW><id>12242891</id><snippet>'\x62\x07\x00\x00'</snippet></ROW><ROW><id>12242891</id><snippet>0x00000762</snippet></ROW><ROW><id>12242891</id><snippet>'\x62'</snippet></ROW><ROW><id>12242891</id><snippet>'b'</snippet></ROW><ROW><id>12242943</id><snippet>pickle.load</snippet></ROW><ROW><id>12242943</id><snippet>pickle.loads</snippet></ROW><ROW><id>12242943</id><snippet>with open('test.gz', 'rb') as fp:
    data = zlib.decompress(fp.read())
    successDict = pickle.loads(data)
</snippet></ROW><ROW><id>12243218</id><snippet>$string = 'my string'
$encoded_string = md5($string);
</snippet></ROW><ROW><id>12243437</id><snippet>from lxml import  objectify

class Parser(object):
    def __init__(self, tree, counter_start, counter_interval):
        self.tree = tree
        self.root = tree.getroot()
        self.counter_start = counter_start
        self.counter_interval = counter_interval

    def parse(self):
        counter = self.counter_start
        # for loop to iter voltage items
        # using counter += counter_interval to set the value for example
        # save the tree within the parser class or in the handle function


def handle(file):
    f = open(file)
    tree = objectify.parse(f)
    parser = Parser(tree, 1000, 100)
    parser.parse()
    f.close()

handle("/Desktop/bar.XML")
</snippet></ROW><ROW><id>12243955</id><snippet>range</snippet></ROW><ROW><id>12243955</id><snippet>xrange</snippet></ROW><ROW><id>12243955</id><snippet>for i in range(len(matrix)):
  for j in range(len(matrix[i])):
</snippet></ROW><ROW><id>12243955</id><snippet>newMatrix[i][j]</snippet></ROW><ROW><id>12243955</id><snippet>newMatrix</snippet></ROW><ROW><id>12243955</id><snippet>list</snippet></ROW><ROW><id>12243955</id><snippet>list</snippet></ROW><ROW><id>12243955</id><snippet>newMatrix</snippet></ROW><ROW><id>12244091</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>12244091</id><snippet>def root():
    str='yay&lt;br/&gt;super'
    return str
</snippet></ROW><ROW><id>12244378</id><snippet>dis.dis</snippet></ROW><ROW><id>12244378</id><snippet>&gt;&gt;&gt; def inop():
...     '0' in []
... 
&gt;&gt;&gt; dis.dis(inop)
  2           0 LOAD_CONST               1 ('0')
              3 LOAD_CONST               2 (())
              6 COMPARE_OP               6 (in)
              9 POP_TOP             
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE        
</snippet></ROW><ROW><id>12244378</id><snippet>in</snippet></ROW><ROW><id>12244378</id><snippet>COMPARE_OP</snippet></ROW><ROW><id>12244378</id><snippet>Python/ceval.c</snippet></ROW><ROW><id>12244378</id><snippet>TARGET(COMPARE_OP)
    w = POP();
    v = TOP();
    x = cmp_outcome(oparg, v, w);
    Py_DECREF(v);
    Py_DECREF(w);
    SET_TOP(x);
    if (x == NULL) break;
    PREDICT(POP_JUMP_IF_FALSE);
    PREDICT(POP_JUMP_IF_TRUE);
    DISPATCH();
</snippet></ROW><ROW><id>12244378</id><snippet>cmp_outcome()</snippet></ROW><ROW><id>12244378</id><snippet>in</snippet></ROW><ROW><id>12244378</id><snippet>case PyCmp_IN:
    res = PySequence_Contains(w, v);
    if (res &lt; 0)
         return NULL;
    break;
</snippet></ROW><ROW><id>12244378</id><snippet>PySequence_Contains</snippet></ROW><ROW><id>12244378</id><snippet>int
PySequence_Contains(PyObject *seq, PyObject *ob)
{
    Py_ssize_t result;
    PySequenceMethods *sqm = seq-&gt;ob_type-&gt;tp_as_sequence;
    if (sqm != NULL &amp;&amp; sqm-&gt;sq_contains != NULL)
        return (*sqm-&gt;sq_contains)(seq, ob);
    result = _PySequence_IterSearch(seq, ob, PY_ITERSEARCH_CONTAINS);
    return Py_SAFE_DOWNCAST(result, Py_ssize_t, int);
}
</snippet></ROW><ROW><id>12244378</id><snippet>PySequence_Contains</snippet></ROW><ROW><id>12244378</id><snippet>sq_contains</snippet></ROW><ROW><id>12244378</id><snippet>PyUnicode_Contains</snippet></ROW><ROW><id>12244378</id><snippet>string_contains</snippet></ROW><ROW><id>12244378</id><snippet>sq_contains</snippet></ROW><ROW><id>12244378</id><snippet>__contains__</snippet></ROW><ROW><id>12244555</id><snippet>f2.write(line.replace('12345', str(n)))
</snippet></ROW><ROW><id>12245057</id><snippet>Range: bytes=0-999
</snippet></ROW><ROW><id>12245057</id><snippet>HTTP/1.0 206 Partial Content
Accept-Ranges: bytes
Content-Length: 1000
Content-Range: bytes 0-999/2200

balabalaa....
</snippet></ROW><ROW><id>12245463</id><snippet>def datetime(request):

    datenow = date.today()
    datemonth = date.today().month
    if datemonth == 8:
        date_month="Ağustos"
    elif datemonth == 9:
    date_month = "Eylül"
    elif datemonth == 10:
        date_month = "Ekim"
    elif datemonth == 11:
    date_month ="Kasım"
    elif datemonth == 12:
        date_month ="Aralık"
    elif datemonth == 1:
        date_month ="Ocak"
    elif datemonth == 2:
        date_month ="Şubat"
    elif datemonth == 3:
        date_month ="Mart"
    elif datemonth == 4:
        date_month ="Nisan"
    elif datemonth == 5:
        date_month ="Mayıs"
    elif datemonth == 6:
        date_month ="Haziran"
    elif datemonth == 7:
        date_month ="Temmuz"


context = {'datenow':datenow,'date_month':date_month}
return context
</snippet></ROW><ROW><id>12245463</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.request',
    'django.contrib.auth.context_processors.auth',
    'django.core.context_processors.i18n',
    'django.core.context_processors.media',
    'django.core.context_processors.static',
    'django.contrib.messages.context_processors.messages',
    'django.core.context_processors.csrf',
    # Custom Context Proccessors
    'apps.your-app.context_processor.datetime',


)
</snippet></ROW><ROW><id>12245463</id><snippet>{{ datenow }}</snippet></ROW><ROW><id>12245463</id><snippet>{{ date_month }}</snippet></ROW><ROW><id>12246720</id><snippet>from scipy.sparse import *</snippet></ROW><ROW><id>12246720</id><snippet>numpy.hstack</snippet></ROW><ROW><id>12246720</id><snippet>scipy.sparse.hstack</snippet></ROW><ROW><id>12246720</id><snippet>numpy.hstack</snippet></ROW><ROW><id>12246720</id><snippet>&gt;&gt;&gt; X = np.matrix([[0, 1, 4, 0]]).T
&gt;&gt;&gt; Y = np.matrix([[1, 0, 1, 1]]).T
&gt;&gt;&gt; np.hstack([X, Y])
matrix([[0, 1],
        [1, 0],
        [4, 1],
        [0, 1]])
</snippet></ROW><ROW><id>12246786</id><snippet>A, B, M = np.broadcast_arrays(A, B, M)
</snippet></ROW><ROW><id>12246786</id><snippet>B</snippet></ROW><ROW><id>12246786</id><snippet>A[M] = B[M]</snippet></ROW><ROW><id>12246786</id><snippet>B[M]</snippet></ROW><ROW><id>12246786</id><snippet>M</snippet></ROW><ROW><id>12246786</id><snippet>True</snippet></ROW><ROW><id>12246786</id><snippet>np.putmask(A, M, B)
</snippet></ROW><ROW><id>12246786</id><snippet>B</snippet></ROW><ROW><id>12246786</id><snippet>putmask</snippet></ROW><ROW><id>12246976</id><snippet>binascii</snippet></ROW><ROW><id>12246976</id><snippet>&gt;&gt;&gt; a="73.69.67.6e.61.74.75.72.65"  
&gt;&gt;&gt; "".join(chr(int(e, 16)) for e in a.split('.'))  
'signature'  
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12246976</id><snippet>&gt;&gt;&gt; a="73.69.67.6e.61.74.75.72.65"  
&gt;&gt;&gt; "".join(e.decode('hex') for e in a.split('.'))
</snippet></ROW><ROW><id>12246976</id><snippet>&gt;&gt;&gt; a='.'.join(x.encode('hex') for x in 'Hellö Wörld!')
&gt;&gt;&gt; a
'48.65.6c.6c.94.20.57.94.72.6c.64.21'
&gt;&gt;&gt; print "".join(e.decode('hex') for e in a.split('.'))
Hellö Wörld!
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12246976</id><snippet>a.replace('.', '').decode('hex')
</snippet></ROW><ROW><id>12247021</id><snippet>data = DataStore()

application = web.Application([
        (r'.*', MainHandler, dict(data = data),
        ])
</snippet></ROW><ROW><id>12247021</id><snippet>RequestHandler</snippet></ROW><ROW><id>12247021</id><snippet>def initialize(self, data):
     self.data = data
</snippet></ROW><ROW><id>12247166</id><snippet>class Foo(models.Model):
    # fields...

    def my_task_init(self):
        return mark_safe("&lt;img class='loading' src='/static/img/loading.gif' alt='loading' style='display:none;' /&gt;&lt;a data-identifier='task_%i' class='task'&gt;&lt;img src='/static/img/process.png' style='cursor:pointer;' /&gt;&lt;/a&gt;") % self.id
    my_task_init.allow_tags = True
    my_task_init.short_description = _(u"Execute Task")
</snippet></ROW><ROW><id>12247166</id><snippet>class FooAdmin(admin.ModelAdmin):
    list_display = ['other_field', 'my_task_init']

    class Media:
        js = (
            'https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.js',
            '/static/js/admin_tasks.js',
        )

    def get_urls(self):
        urls = super(FooAdmin, self).get_urls()
        extra_urls = patterns('',
            (r'^my-task/$', self.admin_site.admin_view(self.parse_view))
        )
        return extra_urls + urls

    # optionally decorated by celery
    def task_view(self, request):
        if not request.is_ajax():
            raise Http404
        task_id = request.GET.get('task_id')
        # your logic
        return HttpResponse('Success')
</snippet></ROW><ROW><id>12247166</id><snippet>$(document).ready(function (){
   $('.task').click(function(){
       var image = $(this).find('img'),
           loading = $(this).parent().find('.loading'),
           task_id = $(this).data('identifier').replace('task_', '');
       $.ajax({
           type: "GET",
           data: ({'task_id': task_id}),
           url: "/admin/app/model/my-task/",
           beforeSend: function() {
               image.hide();
               loading.show();
           },
           statusCode: {
               200: function() {
                   loading.hide();
                   image.attr('src', '/static/img/success.png');
                   image.show();
               },
               404: function() {
                   loading.hide();
                   image.attr('src', '/static/img/error.png');
                   image.show();
               },
               500: function() {
                   loading.hide();
                   image.attr('src', '/static/img/error.png');
                   image.show();
               }
           }
       });
   });
});
</snippet></ROW><ROW><id>12247585</id><snippet>User.username</snippet></ROW><ROW><id>12247585</id><snippet>User.username</snippet></ROW><ROW><id>12247644</id><snippet>json</snippet></ROW><ROW><id>12247644</id><snippet>import json
code...
def main():
    user_in = raw_input("Enter a list of numbers seperated by commas: ")
    numbers_as_strings = user_in.replace(' ', '').split(',')
    numbers = [float(x) for x in numbers_as_strings]
    if not user_in:
        return 0
    else:
        print "\nYour inputs: ", user_in, '\n'
        print "   Mean = ", mean(numbers)
        print " Median = ", median(numbers)
        print "   Mode = ", mode(numbers), '\n'
        json.dump([user_in, mean(numbers), median(numbers), mode(numbers)], fp)
</snippet></ROW><ROW><id>12247644</id><snippet>def print(fp):
    user_in, mean, median, mode = json.load(fp)
    print "\nYour inputs: ", user_in, '\n'
    print "   Mean = ", mean
    print " Median = ", median
    print "   Mode = ", mode, '\n'
</snippet></ROW><ROW><id>12247788</id><snippet>protocol.ClientCreator(reactor, OA, SN, PASS, icq=icqMode).connectTCP(*hostport)
</snippet></ROW><ROW><id>12247788</id><snippet>Deferred</snippet></ROW><ROW><id>12247788</id><snippet>oscar_prot = None

def get_B_instance(b_instance):
    global oscar_prot
    oscar_prot = b_instance

d = Deferred()
d.addCallback(get_B_instance)

protocol.ClientCreator(reactor, OA, SN, PASS, deferred=d, icq=icqMode).connectTCP(*hostport)
</snippet></ROW><ROW><id>12247788</id><snippet>get_B_instance</snippet></ROW><ROW><id>12247788</id><snippet>sendMessage</snippet></ROW><ROW><id>12247788</id><snippet>oscar_prot.sendMessage(username, message)
</snippet></ROW><ROW><id>12247791</id><snippet>static, dynamic = line.split(';', 1)
</snippet></ROW><ROW><id>12247791</id><snippet>static = static.split(' ', 4)[-1]
</snippet></ROW><ROW><id>12247791</id><snippet>TYPE</snippet></ROW><ROW><id>12247977</id><snippet>csv</snippet></ROW><ROW><id>12247977</id><snippet>import sys
import numpy as np

try:
    ifile = sys.argv[1]
   #; ofile = sys.argv[2]
except:
    print "Usage:", sys.argv[0], "ifile"; sys.exit(1)   

# Open and read file from std, and assign first four (orbit, time, lat, lon)
# columns to four lists, and last 128 columns (waveforms) to an array.

def remove_bracket(line):
    return float(line.strip("][ '"))

data = np.genfromtxt(ifile, delimiter = ',',
                     dtype = 'float',
                     converters = {i:remove_bracket for i in range(132)}
                     )

orbit = data[:,0]
time = data[:,1]
lat = data[:,2]
lon = data[:,3]
wvf = data[:,4:128]
print(wvf)
</snippet></ROW><ROW><id>12247977</id><snippet>orbit</snippet></ROW><ROW><id>12247977</id><snippet>time</snippet></ROW><ROW><id>12247977</id><snippet>data</snippet></ROW><ROW><id>12247977</id><snippet>data</snippet></ROW><ROW><id>12247977</id><snippet>orbit</snippet></ROW><ROW><id>12247977</id><snippet>data</snippet></ROW><ROW><id>12248040</id><snippet>default_flow_style=False</snippet></ROW><ROW><id>12248040</id><snippet>yaml.dump</snippet></ROW><ROW><id>12248040</id><snippet>&gt;&gt;&gt; x = { "user" : 123 }
&gt;&gt;&gt; output_stream = open("output_file.yml","w")
&gt;&gt;&gt; yaml.dump(x,output_stream,default_flow_style=False)
&gt;&gt;&gt; output_stream.close()
</snippet></ROW><ROW><id>12248040</id><snippet>user : 123
</snippet></ROW><ROW><id>12248040</id><snippet>yaml.dump</snippet></ROW><ROW><id>12248318</id><snippet>class MyDoc(Document):
    name = StringField()
    updated_at = DateTimeField(default=datetime.datetime.now)

    @classmethod
    def pre_save(cls, sender, document, **kwargs):
        document.updated_at = datetime.datetime.now()

signals.pre_save.connect(MyDoc.pre_save, sender=MyDoc)
</snippet></ROW><ROW><id>12248318</id><snippet>update</snippet></ROW><ROW><id>12248318</id><snippet>MyDocs.objects.update(set__name=X)</snippet></ROW><ROW><id>12248668</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>12248668</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>12248668</id><snippet>&lt;/pre&gt;</snippet></ROW><ROW><id>12248724</id><snippet>items</snippet></ROW><ROW><id>12248724</id><snippet>item['trackname']</snippet></ROW><ROW><id>12248724</id><snippet>&gt;&gt;&gt; class C(object):
        # Basic user-defined class
    def __init__(self):
        self.test = None


&gt;&gt;&gt; c = C()
&gt;&gt;&gt; items = []
&gt;&gt;&gt; for x in range (1,3):
    c.test = x
    print c, c.test
    items.append(c)


&lt;__main__.C object at 0x01CEB130&gt; 1
&lt;__main__.C object at 0x01CEB130&gt; 2
&gt;&gt;&gt; items # All objects contained are the same !!!
[&lt;__main__.C object at 0x01CEB130&gt;, &lt;__main__.C object at 0x01CEB130&gt;]
&gt;&gt;&gt; for c in items:
    print c.test


2
2
</snippet></ROW><ROW><id>12248724</id><snippet>&gt;&gt;&gt; items = []
&gt;&gt;&gt; for x in range (1,3):
    c = C()
    c.test = x
    print c, c.test
    items.append(c)


&lt;__main__.C object at 0x01CEB110&gt; 1
&lt;__main__.C object at 0x011F2270&gt; 2
</snippet></ROW><ROW><id>12248724</id><snippet>&gt;&gt;&gt; for c in items:
    print c.test


1
2
</snippet></ROW><ROW><id>12248726</id><snippet>from google.appengine.ext.ndb import prospective_search</snippet></ROW><ROW><id>12248785</id><snippet>lines = []
with open('jag.txt') as f:
    lines = [ line.split('\t') for line in f.read().splitlines() ]
print(lines)
</snippet></ROW><ROW><id>12248785</id><snippet>[ ['A1', 'A2', ...], ['B1', 'B2'], ... ]
</snippet></ROW><ROW><id>12248785</id><snippet>with open('jag.txt') as f: 
    lines = [ line for line in csv.reader(f, delimiter='\t') ]
</snippet></ROW><ROW><id>12249078</id><snippet>runctx</snippet></ROW><ROW><id>12249078</id><snippet>run</snippet></ROW><ROW><id>12249078</id><snippet>cProfile.runctx</snippet></ROW><ROW><id>12249078</id><snippet>cProfile.runctx('my_function()', globals=globals(), locals=locals())
</snippet></ROW><ROW><id>12249111</id><snippet>-i</snippet></ROW><ROW><id>12249111</id><snippet>python -i main.py &lt; tests/1.in
</snippet></ROW><ROW><id>12249280</id><snippet>class Foo(object):
    def __init__(self, name):
        self.name = name

    def __setattr__(self, attrname, value):
        print "Intercepted: " + attrname + " attribute of Foo set to " + value
        super(Foo, self).__setattr__(attrname, value)
</snippet></ROW><ROW><id>12249280</id><snippet>Foo</snippet></ROW><ROW><id>12249280</id><snippet>__setattr__</snippet></ROW><ROW><id>12249280</id><snippet>class Foo(object):
    def __init__(self, name):
        self.__name = name

    def getname(self):
        return self.__name

    def setname(self, name):
        print "Intercepted: name attribute of Foo set to " + name
        self.__name = name

    name = property(getname, setname)
</snippet></ROW><ROW><id>12249280</id><snippet>__setattr__</snippet></ROW><ROW><id>12249412</id><snippet>=s0</snippet></ROW><ROW><id>12249412</id><snippet>=s0</snippet></ROW><ROW><id>12249412</id><snippet>=sxx</snippet></ROW><ROW><id>12249498</id><snippet>scipy.integrate.quad</snippet></ROW><ROW><id>12249498</id><snippet>scipy.stats</snippet></ROW><ROW><id>12249498</id><snippet>&gt;&gt;&gt; from scipy import stats

&gt;&gt;&gt; f = lambda x: x**2

&gt;&gt;&gt; stats.norm.expect(f, loc=0, scale=1)
1.0000000000000011

&gt;&gt;&gt; stats.norm.expect(f, loc=0, scale=np.sqrt(2))
1.9999999999999996
</snippet></ROW><ROW><id>12249498</id><snippet>scipy.integrate.quad</snippet></ROW><ROW><id>12249498</id><snippet>integrate.quad</snippet></ROW><ROW><id>12249529</id><snippet>image_path = 'http://img.hb.aicdn.com/3e32a8b101e515b9e7dbe8f5a2e47afff5ec6bcf4e4a-OTvsuu_fw192'
with open(r'&lt;path_to_file&gt;.jpg', 'wb') as image:
    image.write(urllib2.urlopen(image_path).read())
</snippet></ROW><ROW><id>12249581</id><snippet>RMI</snippet></ROW><ROW><id>12249742</id><snippet>(?:(?:.*?):(?:\w{3}(?: \d{1,2}){2}(?::\d{1,2}){2}))(?:\s+?)(?:(?:(?:(?:TYPE1)|(?:(?:TYPE1)|(?:TYPE3))(?:\s+?)(?:(.+){1};(.+){1}))|(?:\S+(?:\.\S+)+)(?:\s+?)(?:(?:TYPE1)|(?:TYPE1)|(?:TYPE3))(?:\s+?)(?:\S+(?:\.\S+)+)(?:\s+?)(?:(.+){1};(.+){1})))
</snippet></ROW><ROW><id>12249742</id><snippet>(?:(?:.*?):(?:\w{3}(?: \d{1,2}){2}(?::\d{1,2}){2}))(?:\s+?)
</snippet></ROW><ROW><id>12249742</id><snippet>(?:(?:(?:TYPE1)|(?:TYPE1)|(?:TYPE3))(?:\s+?)(?:(.+){1};(.+){1}))
</snippet></ROW><ROW><id>12249742</id><snippet>(:?(?:\S+(?:\.\S+)+)(?:\s+?)(?:(?:TYPE1)|(?:TYPE1)|(?:TYPE3))(?:\s+?)(?:\S+(?:\.\S+)+)(?:\s+?)(?:(.+){1};(.+){1}))
</snippet></ROW><ROW><id>12249742</id><snippet>.*?:\w{3}(?: \d{1,2}){2}(?::\d{2}){2}\s+?(?:(?:(?:TYPE1|TYPE2|TYPE3)\s+?(.+){1};(.+){1})|(?:\S+(‌​?:\.\S+)+\s+?(?:TYPE1|TYPE2|TYPE3)\s+?\S+(?:\.\S+)+\s+?(.+){1};(.+){1}))
</snippet></ROW><ROW><id>12249742</id><snippet>(?:TYPE1|TYPE2|TYPE3)</snippet></ROW><ROW><id>12249742</id><snippet>TYPE(1|T)YPE(2|T)YPE3</snippet></ROW><ROW><id>12249742</id><snippet>.*?:\w{3}(?: \d{1,2}){2}(?::\d{2}){2}\s+?(?:(?:(?:TYPE1|TYPE2|TYPE3))|(?:\S+(?:\.\S+)+\s+?(?:TYPE1|TYPE2|TYPE3)\s+?\S+(?:\.\S+)+))\s+(.*)
</snippet></ROW><ROW><id>12249742</id><snippet>for item in captured:
    parts = item.split(";")
    static = parts[0]
    dynamic = ";".join(parts[1:])
</snippet></ROW><ROW><id>12249962</id><snippet>/home/dir/dir/</snippet></ROW><ROW><id>12249962</id><snippet>/home/dir/dir/dirtoberemoved/foo</snippet></ROW></DATA>