<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>13278450</id><snippet>re</snippet></ROW><ROW><id>13278450</id><snippet>htmllib</snippet></ROW><ROW><id>13278581</id><snippet>a[:,0] = 1
</snippet></ROW><ROW><id>13278581</id><snippet>&gt;&gt;&gt; a = np.zeros((10,10))
&gt;&gt;&gt; a
array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
&gt;&gt;&gt; a[:,0]=1
&gt;&gt;&gt; a
array([[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
</snippet></ROW><ROW><id>13278770</id><snippet>file.seek()</snippet></ROW><ROW><id>13278770</id><snippet>fseek(3)</snippet></ROW><ROW><id>13278998</id><snippet>choices()</snippet></ROW><ROW><id>13278998</id><snippet>self.weapon = weapon
return weapon
</snippet></ROW><ROW><id>13278998</id><snippet>weapon</snippet></ROW><ROW><id>13278998</id><snippet>weapon = self.weapon
return weapon
</snippet></ROW><ROW><id>13278998</id><snippet>return self.weapon
</snippet></ROW><ROW><id>13279160</id><snippet>ast</snippet></ROW><ROW><id>13279160</id><snippet>import ast

x = r'''import sys
sys.stdout.write('foo\n')
sys.stdout.write('bar\n')'''

y = r'''import   sys
sys.stdout.\
    write('foo\n'); sys.stdout.\
    write(

    'bar\n') # This is an unnecessary comment'''

xd = ast.dump(ast.parse(x))
yd = ast.dump(ast.parse(y))
print xd == yd
</snippet></ROW><ROW><id>13279160</id><snippet>compile()</snippet></ROW><ROW><id>13279160</id><snippet>ast</snippet></ROW><ROW><id>13279236</id><snippet>settings = {}
settings['server'] = '172.16.150.106:1433'
settings['user'] = 'pyadmin'
settings['password'] = 'admin'
settings['db'] = 'SQLSERV_2005' 
</snippet></ROW><ROW><id>13279236</id><snippet>In [1]: from config import settings

In [2]: print settings
{'password': 'admin', 'db': 'SQLSERV_2005', 'user': 'pyadmin', 'server': '172.16.150.106:1433'}
</snippet></ROW><ROW><id>13279459</id><snippet>lynx -crawl -dump http://stackoverflow.com/questions/13279364/convert-html-to-plain-text-and-keep-basic-formatting</snippet></ROW><ROW><id>13279459</id><snippet>1. List item 1.
2. List item 2.
</snippet></ROW><ROW><id>13279459</id><snippet>&gt; echo '&lt;p&gt;This is a paragraph.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;List item 1.&lt;/li&gt;
  &lt;li&gt;List item 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is an &lt;a href="http://www.google.com"&gt;anchor&lt;/a&gt;.&lt;/p&gt;' | lynx -stdin -dump
</snippet></ROW><ROW><id>13279459</id><snippet>   This is a paragraph.
    1. List item 1.
    2. List item 2.

   This is an [1]anchor.

References

   1. http://www.google.com/
</snippet></ROW><ROW><id>13279470</id><snippet>struct State</snippet></ROW><ROW><id>13279470</id><snippet>struct State *</snippet></ROW><ROW><id>13279470</id><snippet>(intptr_t)theStatePtr</snippet></ROW><ROW><id>13279470</id><snippet>int</snippet></ROW><ROW><id>13279470</id><snippet>ctypes</snippet></ROW><ROW><id>13279573</id><snippet>myvar =  request.form["myvar"]
</snippet></ROW><ROW><id>13279573</id><snippet>myvar = request.args.get("myvar")
</snippet></ROW><ROW><id>13279595</id><snippet>autocmd BufNewFile *.py 0put =\"#!/usr/bin/python\&lt;nl&gt;\"|$
</snippet></ROW><ROW><id>13279659</id><snippet>data = obj.recv(1024)
if not data:
    return
print data
</snippet></ROW><ROW><id>13279922</id><snippet>Popen</snippet></ROW><ROW><id>13279922</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>13279922</id><snippet>subprocess.check_call(shlex.split(cmd1))
</snippet></ROW><ROW><id>13279922</id><snippet>shlex</snippet></ROW><ROW><id>13279922</id><snippet>cmd1 = ["echo", fn]
subprocess.check_call(cmd1)
</snippet></ROW><ROW><id>13279922</id><snippet>os.getpid()</snippet></ROW><ROW><id>13279922</id><snippet>multiprocessing.Pool.map_async</snippet></ROW><ROW><id>13279922</id><snippet>multiprocessing.Pool.apply_async</snippet></ROW><ROW><id>13279922</id><snippet>RESULT</snippet></ROW><ROW><id>13279922</id><snippet>map_async</snippet></ROW><ROW><id>13279922</id><snippet>multiprocessing</snippet></ROW><ROW><id>13279922</id><snippet>check_call(args(file1))</snippet></ROW><ROW><id>13279922</id><snippet>other_python_function_to_do_something_to_file(file1)</snippet></ROW><ROW><id>13279922</id><snippet>check_call(args(file2))</snippet></ROW><ROW><id>13279922</id><snippet>threading</snippet></ROW><ROW><id>13280001</id><snippet>normaltest</snippet></ROW><ROW><id>13280001</id><snippet>normaltest</snippet></ROW><ROW><id>13280001</id><snippet>def normaltest(a, axis=0):
    a, axis = _chk_asarray(a, axis)
    s,p = skewtest(a,axis)
    k,p = kurtosistest(a,axis)
    k2 = s*s + k*k
    return k2, chisqprob(k2,2)
</snippet></ROW><ROW><id>13280001</id><snippet>scipy.stats</snippet></ROW><ROW><id>13280001</id><snippet>In [67]: import scipy.stats as stats

In [69]: pvals = [stats.normaltest(stats.norm.rvs(size=1000))[1] for i in range(1000)]

In [71]: sum([1 for p in pvals if p &lt; 0.05])/1000.0
Out[71]: 0.053
</snippet></ROW><ROW><id>13280138</id><snippet>valid = operators | numbers
while True:
    expression = introduction()
    if set(expression) - valid:
        print 'not a valid expression, try again'
    else: 
        break
</snippet></ROW><ROW><id>13280138</id><snippet>introduction()</snippet></ROW><ROW><id>13280138</id><snippet>expression</snippet></ROW><ROW><id>13280138</id><snippet>introduction()</snippet></ROW><ROW><id>13280138</id><snippet>expression</snippet></ROW><ROW><id>13280289</id><snippet>11/7/12 11:07:38.858 AM Mail[8820]: -[NSConcreteData data]: unrecognized selector
</snippet></ROW><ROW><id>13280289</id><snippet>-[setWebArchive:]</snippet></ROW><ROW><id>13280289</id><snippet>-[data]</snippet></ROW><ROW><id>13280289</id><snippet>NSData</snippet></ROW><ROW><id>13280289</id><snippet>-[NSData data]</snippet></ROW><ROW><id>13280289</id><snippet>NSData</snippet></ROW><ROW><id>13280289</id><snippet>-[data]</snippet></ROW><ROW><id>13280289</id><snippet>NSData</snippet></ROW><ROW><id>13280289</id><snippet>wds = WebDataSource.alloc().initWithRequest_(NSURLRequest.requestWithURL_(NSURL.URLWithString_('http://...')))
webarchive = wds.webArchive
signature.setWebArchive_(webarchive)
</snippet></ROW><ROW><id>13280289</id><snippet>-[webArchive]</snippet></ROW><ROW><id>13280289</id><snippet>webArchive</snippet></ROW><ROW><id>13280289</id><snippet>wds.webArchive</snippet></ROW><ROW><id>13280289</id><snippet>WebArchive</snippet></ROW><ROW><id>13280289</id><snippet>-[data]</snippet></ROW><ROW><id>13280289</id><snippet>11/7/12 3:26:59.173 PM Mail[16814]: Class OC_PythonObject: no such selector: data
</snippet></ROW><ROW><id>13280289</id><snippet>wds.webArchive()</snippet></ROW><ROW><id>13280289</id><snippet>WebArchive</snippet></ROW><ROW><id>13280289</id><snippet>-[WebArchive data]</snippet></ROW><ROW><id>13280289</id><snippet>NSData</snippet></ROW><ROW><id>13280289</id><snippet>print webArchive
print webArchive.data()
</snippet></ROW><ROW><id>13280789</id><snippet>__init__</snippet></ROW><ROW><id>13280789</id><snippet>__slots__</snippet></ROW><ROW><id>13280789</id><snippet>__new__</snippet></ROW><ROW><id>13280789</id><snippet>__new__</snippet></ROW><ROW><id>13280789</id><snippet>self.__class__ = OtherSubclass</snippet></ROW><ROW><id>13280789</id><snippet>self.member = OtherSubclass(self)</snippet></ROW><ROW><id>13280789</id><snippet>__getattr__</snippet></ROW><ROW><id>13280796</id><snippet>['hallo', 'hello', 'hillo', 'hollo', 'hullo', 'hella', 'helle', 'helli', 'hello', 'hellu']
</snippet></ROW><ROW><id>13280796</id><snippet>import re

VOWELS = "aeiou"
RE_VOWEL = re.compile("[%s]" % VOWELS)

def helper(parts):
    if len(parts) == 1:
        yield parts[0]
    else:
        for vowel in VOWELS:
            for item in helper([vowel.join(parts[:2])] + parts[2:]):
                yield item

def vowels(word):
    parts = re.split(RE_VOWEL, word)
    return list(helper(parts))
</snippet></ROW><ROW><id>13280885</id><snippet>text</snippet></ROW><ROW><id>13280885</id><snippet>for node in root.iter("*"):
    print node.text
    # print node.tail # e.g.: &lt;div&gt; &lt;span&gt; abc &lt;/span&gt; def &lt;/div&gt; =&gt; abc def
</snippet></ROW><ROW><id>13280953</id><snippet># myModule.py
foo = "bar"
</snippet></ROW><ROW><id>13280953</id><snippet># yourModule.py
from myModule import foo
</snippet></ROW><ROW><id>13280987</id><snippet>__init__.py</snippet></ROW><ROW><id>13280987</id><snippet>__all__</snippet></ROW><ROW><id>13280987</id><snippet>from X import *</snippet></ROW><ROW><id>13280987</id><snippet>import</snippet></ROW><ROW><id>13281051</id><snippet>raw_input()</snippet></ROW><ROW><id>13281051</id><snippet>if __name__ == '__main__':
    text = str(raw_input("Enter text to word-wrap: "))
    lineLength = int(raw_input("Enter number of characters per line: "))
    print 
    print insertNewlines(text, lineLength)
    raw_input()
</snippet></ROW><ROW><id>13281091</id><snippet>terrain</snippet></ROW><ROW><id>13281091</id><snippet>__init__</snippet></ROW><ROW><id>13281268</id><snippet>print</snippet></ROW><ROW><id>13281268</id><snippet>fooshell=$(python -c 'import hello; print(hello.hello())')
</snippet></ROW><ROW><id>13281268</id><snippet>hello()</snippet></ROW><ROW><id>13281268</id><snippet>stdout</snippet></ROW><ROW><id>13281292</id><snippet>!!bool</snippet></ROW><ROW><id>13281292</id><snippet>!!int</snippet></ROW><ROW><id>13281292</id><snippet>!!python/tuple</snippet></ROW><ROW><id>13281292</id><snippet>''</snippet></ROW><ROW><id>13281292</id><snippet>&gt;&gt;&gt; def default_ctor(loader, tag_suffix, node):
...     print loader
...     print tag_suffix
...     print node
...     return tag_suffix + ' ' + node.value
...
&gt;&gt;&gt; add_multi_constructor('', default_ctor)
&gt;&gt;&gt; load(y)
&lt;yaml.loader.Loader object at 0xb76ce8ec&gt;
!$uzy
ScalarNode(tag=u'!$uzy', value=u'')
{'world': {'people': {'name': '!$uzy', 'address': 'chez-bob'}}}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13281460</id><snippet>for url in urls:
    line = url
</snippet></ROW><ROW><id>13281460</id><snippet>url</snippet></ROW><ROW><id>13281460</id><snippet>line</snippet></ROW><ROW><id>13281460</id><snippet>size = urlopen(url)</snippet></ROW><ROW><id>13281460</id><snippet>with open('urls.txt') as inf:
    urls = (line.strip() for line in inf)
    for url in urls:
        site = urlopen(url)   
        soup = BeautifulSoup(site)
        for td in soup.find_all('td', {'class': 'subjectCell'}):
            print td.find('a').text
</snippet></ROW><ROW><id>13281490</id><snippet>api/__init__.py
api/apiconsumer/__init__.py
</snippet></ROW><ROW><id>13281490</id><snippet>api/apiconsumer/authenticate.py</snippet></ROW><ROW><id>13281490</id><snippet>api</snippet></ROW><ROW><id>13281490</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>13281490</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>13281490</id><snippet>MIDDLEWARE_CLASSES = (
    ...
    'apiconsumer.authenticate.Authenticate',
)

INSTALLED_APPS = (
    ...
    'courses',
    'apiconsumer',
    'static_content',
    ...
)
</snippet></ROW><ROW><id>13281592</id><snippet>409452  WLAN    656885  Age out RSSI values from buffer in Beacon miss scenario
\r409452  WLAN    656885  Age out RSSI values from buffer in Beacon miss scenario
</snippet></ROW><ROW><id>13281592</id><snippet>re.split</snippet></ROW><ROW><id>13281592</id><snippet>['409452', 'WLAN', '656885', 'Age out RSSI values from buffer in Beacon miss scenario']
['', '409452', 'WLAN', '656885\tAge out RSSI values from buffer in Beacon miss scenario']
</snippet></ROW><ROW><id>13281592</id><snippet>re.split(r'\W+', s.lstrip(), 3)</snippet></ROW><ROW><id>13281592</id><snippet>strip</snippet></ROW><ROW><id>13281592</id><snippet>lstrip</snippet></ROW><ROW><id>13281592</id><snippet>re.split(r'\W+', s.strip(), 3)</snippet></ROW><ROW><id>13281592</id><snippet>s.strip().split(None, 3)</snippet></ROW><ROW><id>13281646</id><snippet>sbs_module = module['klass']
</snippet></ROW><ROW><id>13281646</id><snippet>sbs_module = module.klass
</snippet></ROW><ROW><id>13281646</id><snippet>klass</snippet></ROW><ROW><id>13281646</id><snippet>sbs_module = vars(module)['klass']
</snippet></ROW><ROW><id>13281646</id><snippet>sbs_module = getattr(module, 'klass')
</snippet></ROW><ROW><id>13281800</id><snippet>root_node = doc.find("users")
</snippet></ROW><ROW><id>13281800</id><snippet>root_node = doc.getroot()
</snippet></ROW><ROW><id>13281800</id><snippet>doc</snippet></ROW><ROW><id>13281800</id><snippet>getroot()</snippet></ROW><ROW><id>13281800</id><snippet>doc.find('users')</snippet></ROW><ROW><id>13281800</id><snippet>users</snippet></ROW><ROW><id>13281953</id><snippet>for item in users:
    print item, ":\t", findmutual(item, all_users) # &lt;&lt; That's why it shows None
</snippet></ROW><ROW><id>13281953</id><snippet>result=''
...
result += '' #whatever
...
return result
</snippet></ROW><ROW><id>13281953</id><snippet>all_users = {'1111': set(['5454', '222']),
             '33333': set(['5454']),
             '5454': set(['1111', '33333', '222']),
             '222': set(['1111', '5454'])}

from collections import defaultdict, Counter

def findmutual(user_relation_map):    
    user_list = set(sorted(user_relation_map.keys()))
    user_ranking = defaultdict(int)
    for user in user_list:
        for friend in user_relation_map[user]:
            user_ranking[friend] += 1
    return user_ranking

c=Counter(findmutual(all_users))
print("Ranking : {0}".format(c.most_common()))

&gt;&gt;&gt; Ranking : [('5454', 3), ('1111', 2), ('222', 2), ('33333', 1)]
</snippet></ROW><ROW><id>13281981</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([153, 186, 0, 258])
&gt;&gt;&gt; b = np.array([156, 136, 156, 0])
&gt;&gt;&gt; c = np.array([193, 150, 950, 757])
&gt;&gt;&gt; [np.mean([x for x in s if x]) for s in np.c_[a, b, c]]
[167.33333333333334, 157.33333333333334, 553.0, 507.5]
</snippet></ROW><ROW><id>13281981</id><snippet>&gt;&gt;&gt; A = np.vstack([a,b,c])
&gt;&gt;&gt; np.average(A, axis=0, weights=A.astype(bool))
array([ 167.33333333,  157.33333333,  553.        ,  507.5       ])
</snippet></ROW><ROW><id>13282126</id><snippet>dates = [v[1] for k,v in E.iteritems()]
</snippet></ROW><ROW><id>13282126</id><snippet>dates = [v[1] for v in E.itervalues()] 
</snippet></ROW><ROW><id>13282126</id><snippet>from operator import itemgetter

dates = map(itemgetter(1), E.itervalues())
</snippet></ROW><ROW><id>13282126</id><snippet>from datetime import datetime

def get_dates(filename, A, B):
    with open(filename) as f:
        dates = [datetime.strptime(row.split()[2], format) for row in f.readlines()]
    dates = [dt for dt in dates if dt.year == A and dt.month == B]
    return [(dt, dates.count(dt)) for dt in set(dates)]
</snippet></ROW><ROW><id>13282162</id><snippet>CR=CRlist[i][j],
FA=CRlist[i][j],
CL=CRlist[i][j],
Title=CRlist[i][j],
</snippet></ROW><ROW><id>13282162</id><snippet>TEMPLATE = """
    &lt;tr&gt;
    &lt;td&gt;&lt;a href="{CR}"&gt;{CR}&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;{FA}&lt;/td&gt;
    &lt;td&gt;{CL}&lt;/td&gt;
    &lt;td&gt;{Title}&lt;/td&gt;
    &lt;/tr&gt;
"""

for i, item in enumerate(CRlist):
    if i == 0:
        continue

    CRstring += TEMPLATE.format(
        CR=item[0],
        FA=item[1],
        CL=item[2],
        Title=item[3],
    )

CRstring += "\n&lt;/table&gt;\n"
</snippet></ROW><ROW><id>13282162</id><snippet>i</snippet></ROW><ROW><id>13282162</id><snippet>enumerate</snippet></ROW><ROW><id>13282162</id><snippet>for item in CRList[1:]:
    CRstring += # ...
</snippet></ROW><ROW><id>13282162</id><snippet># near the top of the file:
import cgi

# later...
# ...
CRstring += TEMPLATE.format(
    CR=cgi.escape(item[0]),
    FA=cgi.escape(item[1]),
    # ...
)
</snippet></ROW><ROW><id>13282162</id><snippet>    {%- for item in cr_list[1:] %}
        &lt;tr&gt;
            &lt;td&gt;&lt;a href="{{ item[0] | escape }}"&gt;{{ item[0] | escape }}&lt;/a&gt;&lt;/td&gt;
            &lt;td&gt;{{ item[1] | escape }}&lt;/td&gt;
            &lt;td&gt;{{ item[2] | escape }}&lt;/td&gt;
            &lt;td&gt;{{ item[3] | escape }}&lt;/td&gt;
        &lt;/tr&gt;
    {%- endfor %}
&lt;/table&gt;
</snippet></ROW><ROW><id>13282162</id><snippet>class CREntry(object):
    def __init__(self, cr, fa, cl, title):
        self.cr = cr
        self.fa = fa
        self.cl = cl
        self.title = title
</snippet></ROW><ROW><id>13282162</id><snippet>entries = [CREntry(*entry) for entry in CRlist[1:]]
</snippet></ROW><ROW><id>13282162</id><snippet>entry.title</snippet></ROW><ROW><id>13282162</id><snippet>item[3]</snippet></ROW><ROW><id>13282162</id><snippet>import jinja2

env = jinja2.Environment(autoescape=True)  # no more | escape everywhere!

template = env.from_string(r"""
        {%- for entry in entries %}
            &lt;tr&gt;
                &lt;td&gt;&lt;a href="{{ entry.cr }}"&gt;{{ entry.cr }}&lt;/a&gt;&lt;/td&gt;
                &lt;td&gt;{{ entry.fa }}&lt;/td&gt;
                &lt;td&gt;{{ entry.cl }}&lt;/td&gt;
                &lt;td&gt;{{ entry.title }}&lt;/td&gt;
            &lt;/tr&gt;
        {%- endfor %}
    &lt;/table&gt;
""")

class CREntry(object):
    # ...

# later...
entries = [CREntry(*entry) for entry in cr_list]
cr_string = template.render(entries=entries)
</snippet></ROW><ROW><id>13282281</id><snippet>MerchantDeal</snippet></ROW><ROW><id>13282281</id><snippet>STATE_CHOICES = ((1,'Created'),(2,'Activated'),(3,'Completed'))

class MerchantDeal(models.Model):
    # .. your various other fields
    current_state = models.IntegerField(choices=STATE_CHOICES)
</snippet></ROW><ROW><id>13282281</id><snippet>&lt;td&gt;{{ Item.get_current_state.display }}&lt;/td&gt;
</snippet></ROW><ROW><id>13282384</id><snippet>MyDict = {100001: set([apple]), 100002: set([carrot])}</snippet></ROW><ROW><id>13282384</id><snippet>MyDict[100001].update([fruit])</snippet></ROW><ROW><id>13282384</id><snippet>{100001: set([apple, fruit]), 100002: set([carrot])}</snippet></ROW><ROW><id>13282384</id><snippet>[vegetable,orange]</snippet></ROW><ROW><id>13282384</id><snippet>MyDict[100002].update([vegetable, orange])</snippet></ROW><ROW><id>13282384</id><snippet>{100001: set([apple, fruit]), 100002: set([carrot, vegetable, orange])}</snippet></ROW><ROW><id>13282384</id><snippet>infile = open('MyFile.csv', 'r')
for line in infile.readlines():
    spl_line = line.split(',')
    if int(spl_line[0]) in MyDict.keys():
        MyDict[spl_line[0]].update(spl_line[1:])
</snippet></ROW><ROW><id>13282407</id><snippet>return</snippet></ROW><ROW><id>13282407</id><snippet>return</snippet></ROW><ROW><id>13282407</id><snippet>return</snippet></ROW><ROW><id>13282407</id><snippet>def game():

    isWinner = False
    while isWinner == False:
       # as the user for a guess
       # check the guess
       isWinner = isWon()
    return "You won!"
</snippet></ROW><ROW><id>13282407</id><snippet>isWinner = False</snippet></ROW><ROW><id>13282407</id><snippet>while isWinner == False:</snippet></ROW><ROW><id>13282407</id><snippet>isWon()</snippet></ROW><ROW><id>13282407</id><snippet>True</snippet></ROW><ROW><id>13282407</id><snippet>False</snippet></ROW><ROW><id>13282407</id><snippet>isWinner = isWon()</snippet></ROW><ROW><id>13282407</id><snippet>isLost()</snippet></ROW><ROW><id>13282486</id><snippet>NULL</snippet></ROW><ROW><id>13282505</id><snippet>from folder1 import module_name as mod

for name, cls in mod.__dict__.items():
                if isinstance(cls, type):
                    klass = getattr(mod, name)
</snippet></ROW><ROW><id>13282690</id><snippet>with open("some_png.png","wb") as f:
     f.write(urllib2.urlopen("http://icons-search.com/img/yellowicon/TMNT_lin.zip/lin-png-256x256-Leonardo_256x256.png-256x256.png").read())
</snippet></ROW><ROW><id>13282712</id><snippet>someDict.get('foo')</snippet></ROW><ROW><id>13282712</id><snippet>foo</snippet></ROW><ROW><id>13282712</id><snippet>someDict</snippet></ROW><ROW><id>13282768</id><snippet>from django.db import models</snippet></ROW><ROW><id>13282768</id><snippet>models</snippet></ROW><ROW><id>13282768</id><snippet>models</snippet></ROW><ROW><id>13282768</id><snippet>from django.db.models import Model, CharField</snippet></ROW><ROW><id>13282768</id><snippet>models</snippet></ROW><ROW><id>13282863</id><snippet>elif len(R) &lt; len(degcp):
     main_loop2(deg,R[-1],adj,R)
     return 'wrong'
</snippet></ROW><ROW><id>13282863</id><snippet>main_loop2</snippet></ROW><ROW><id>13282863</id><snippet>return 'wrong'</snippet></ROW><ROW><id>13282863</id><snippet>return main_loop2(...)</snippet></ROW><ROW><id>13282966</id><snippet>--eval</snippet></ROW><ROW><id>13282966</id><snippet>rs.add()</snippet></ROW><ROW><id>13282966</id><snippet>rs.add()</snippet></ROW><ROW><id>13282966</id><snippet>printjson()</snippet></ROW><ROW><id>13282966</id><snippet>node1.replset</snippet></ROW><ROW><id>13282966</id><snippet>node4.replset</snippet></ROW><ROW><id>13282966</id><snippet>mongo --eval "printjson(rs.add('node4.replset:27017'))" node1.replset:27017
</snippet></ROW><ROW><id>13283098</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>13283098</id><snippet>panels</snippet></ROW><ROW><id>13283098</id><snippet>get.__code__.co_varnames</snippet></ROW><ROW><id>13283098</id><snippet>global</snippet></ROW><ROW><id>13283098</id><snippet>nonlocal</snippet></ROW><ROW><id>13283098</id><snippet>global</snippet></ROW><ROW><id>13283125</id><snippet>import cv2

def show_image_and_wait_for_key( image, name="Image" ):
    print "showing",name,"(waiting for input)"
    cv2.imshow('norm',image)
    cv2.waitKey(0)

def draw_segments( image , segments, color=(255,0,0), line_width=1):
        '''draws segments on image'''
        for segment in segments:
            x,y,w,h= segment
            cv2.rectangle(image,(x,y),(x+w,y+h),color,line_width)

original= cv2.imread("ravens.jpg")
image=original
image= cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
image= cv2.GaussianBlur(image,(3,3),0)
_, image= cv2.threshold( image, 140, 255, cv2.THRESH_BINARY )
contours,hierarchy = cv2.findContours(image.copy(),cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)
segments= [cv2.boundingRect(c) for c in contours] 
draw_segments( original, segments )
show_image_and_wait_for_key( original )
</snippet></ROW><ROW><id>13283125</id><snippet>def region_from_segment( image, segment ):
    '''given a segment (rectangle) and an image, returns it's corresponding subimage'''
    x,y,w,h= segment
    return image[y:y+h,x:x+w]
</snippet></ROW><ROW><id>13283125</id><snippet>ndarray</snippet></ROW><ROW><id>13283134</id><snippet>CRlist = [['CR', 'FA', 'CL', 'TITLE'],
          ['', '409452', 'WLAN', '656885\tAge out RSSI values from buffer in Beacon miss scenario'],
          ['', '415560', 'WLAN', '656886\tTo Record SMD Event Logging'],
          ['', '413064', 'wlan', '654661\tTo Record HAL and SLM FW Event Logging'],
          ['', '379104', 'BT', '656928\tCR379104: BT doesn\xe2\x80\x99t work that Riva neither sends HCI Evt for HID ACL data nor response to HCI_INQUIRY after entering into pseudo sniff subrating mode.']]
CRstring = ''
INFO = """
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://data/CR/{CR}"&gt;{CR}&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;{FA}&lt;/td&gt;
&lt;td&gt;{CL}&lt;/td&gt;
&lt;td&gt;{Title}&lt;/td&gt;
&lt;/tr&gt;
"""
for item in CRlist[1:]:
    print item
    CRstring += INFO.format(
        CR=item[0],
        FA=item[1],
        CL=item[2],
        Title=item[3],
        )
print CRstring
</snippet></ROW><ROW><id>13283488</id><snippet>SCRIPT_NAME</snippet></ROW><ROW><id>13283488</id><snippet>location /abc {
    include uwsgi_params;
    uwsgi_pass 127.0.0.1:9000;
    uwsgi_param SCRIPT_NAME /abc;            
}
</snippet></ROW><ROW><id>13283488</id><snippet>/abc</snippet></ROW><ROW><id>13283488</id><snippet>/abc</snippet></ROW><ROW><id>13283520</id><snippet>ops = '+-*/'
operationsCount= sum(expr.count(op) for op in ops)
operandsCount = len(expr) - operationsCount
</snippet></ROW><ROW><id>13283520</id><snippet>def get_cnt(expr):
    ops = '+-*/'
    res = [expr]
    for op in ops:
        tmp = []
        for x in expr:
            tmp.extend(x.split(op))
        res = tmp[:]        
    return len(res), sum(expr.count(op) for op in ops)
</snippet></ROW><ROW><id>13283615</id><snippet>mod_wsgi</snippet></ROW><ROW><id>13283615</id><snippet>uwsgi</snippet></ROW><ROW><id>13283615</id><snippet>myapp.wsgi</snippet></ROW><ROW><id>13283615</id><snippet>def application(environ, start_response):
    status = '200 OK'
    output = 'Hello World!'

    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)

    return [output]
</snippet></ROW><ROW><id>13283721</id><snippet>result = map(sum, a)
</snippet></ROW><ROW><id>13283721</id><snippet>result = [sum(b) for b in a]
</snippet></ROW><ROW><id>13283797</id><snippet>'NoneType' object has no attribute '___getitem___'
</snippet></ROW><ROW><id>13283797</id><snippet>keyCheck = (edit_registry.CheckRegistryKey("machine", r"SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\VC\VCRedist", "x86", "Installed"))[0]
</snippet></ROW><ROW><id>13283797</id><snippet>edit_registry.CheckRegistryKey("machine", r"SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\VC\VCRedist", "x86", "Installed")</snippet></ROW><ROW><id>13283797</id><snippet>None</snippet></ROW><ROW><id>13283797</id><snippet>keyCheck = (None)[0]
</snippet></ROW><ROW><id>13283797</id><snippet>None</snippet></ROW><ROW><id>13283797</id><snippet>CheckRegistryKey</snippet></ROW><ROW><id>13283797</id><snippet>return False</snippet></ROW><ROW><id>13283797</id><snippet>EnvironmentError</snippet></ROW><ROW><id>13283797</id><snippet>try:
    aSubKey=OpenKey(aKey,softwareName)
    val=QueryValueEx(aSubKey, keyName)
    return val
except EnvironmentError:
    return False
</snippet></ROW><ROW><id>13283797</id><snippet>CheckRegistryKey</snippet></ROW><ROW><id>13283797</id><snippet>registryKey = edit_registry.CheckRegistryKey("machine", r"SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0\VC\VCRedist", "x86", "Installed")
if registryKey is not False:
    keyCheck = registryKey[0]
</snippet></ROW><ROW><id>13284161</id><snippet>result</snippet></ROW><ROW><id>13284161</id><snippet>w+</snippet></ROW><ROW><id>13284161</id><snippet>a+</snippet></ROW><ROW><id>13284161</id><snippet>close()</snippet></ROW><ROW><id>13284161</id><snippet>open()</snippet></ROW><ROW><id>13284250</id><snippet>"{{ MEDIA_URL|escapejs }}"
</snippet></ROW><ROW><id>13284394</id><snippet>decimal.InvalidOperation</snippet></ROW><ROW><id>13284394</id><snippet>ValueError</snippet></ROW><ROW><id>13284394</id><snippet>except</snippet></ROW><ROW><id>13284472</id><snippet>[num for num in primes if any(x for x in '024685' in str(num))] # failed: 'bool' object is not iterable
</snippet></ROW><ROW><id>13284472</id><snippet>'024685' in str(num)</snippet></ROW><ROW><id>13284472</id><snippet>for x in True</snippet></ROW><ROW><id>13284472</id><snippet>[num for num in primes if not any(ch in '024685' for ch in str(num)]
</snippet></ROW><ROW><id>13284472</id><snippet>str(num)</snippet></ROW><ROW><id>13284472</id><snippet>'024685'</snippet></ROW><ROW><id>13284472</id><snippet>dict</snippet></ROW><ROW><id>13284472</id><snippet>list</snippet></ROW><ROW><id>13284472</id><snippet>no_zero = [num for num in primes if '0' not in str(num)]
</snippet></ROW><ROW><id>13284472</id><snippet>primes[:] = no_zero
</snippet></ROW><ROW><id>13284472</id><snippet>.remove()</snippet></ROW><ROW><id>13284472</id><snippet>[num for num in primes if not any(num % i == 0 for i in (2, 5)]
</snippet></ROW><ROW><id>13284472</id><snippet>set</snippet></ROW><ROW><id>13284517</id><snippet>import re
import sys

text = sys.stdin.read()

# using str.find()
result = text[:text.find('\n\n') + 1]

# using re
result2 = re.match(r'(.*?)$^$', text, flags=re.DOTALL | re.MULTILINE).group(1)

# check that the result is the same
for r in [result, result2]:
     print(repr(r))
assert result == result2
</snippet></ROW><ROW><id>13284517</id><snippet>'This is a matched string_1.\nThis is a matched string_22.\n'
'This is a matched string_1.\nThis is a matched string_22.\n'
</snippet></ROW><ROW><id>13284770</id><snippet>except Exception as e:</snippet></ROW><ROW><id>13284770</id><snippet>except Exception as e:
    exc_type, exc_obj, exc_tb = sys.exc_info()
    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]      
    print(exc_type, fname, exc_tb.tb_lineno)
</snippet></ROW><ROW><id>13285148</id><snippet>print '%.15f' % a[0]
&gt;&gt; 0.313767818199811
</snippet></ROW><ROW><id>13285185</id><snippet>from django.forms import ModelForm

class CategoryForm(ModelForm):
    class Meta:
        model = Category
        # exclude = ('blah', 'foo') # You can exclude fields from your model, if you dont want all of them appearing on your form.
</snippet></ROW><ROW><id>13285185</id><snippet>get_form_data</snippet></ROW><ROW><id>13285185</id><snippet>from django.template import RequestContext
from django.shortcuts import render_to_response

def create_event(request,..):
    if request.method == 'POST':
        form = CategoryForm(request.POST)
        if form.is_valid():
            # do stuff and redirect the user somewhere

    else:
        # We're in a GET request, we just present the form to the user
        form = CategoryForm()
    return render_to_response('some_template.html', {'form':form}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>13285185</id><snippet>self is not defined</snippet></ROW><ROW><id>13285185</id><snippet>CategoryChoicesForm</snippet></ROW><ROW><id>13285185</id><snippet>    categoryoption = forms.ModelChoiceField(queryset=Category.objects.filter(creator=self.creator),required=False,label='Category')
</snippet></ROW><ROW><id>13285185</id><snippet>self</snippet></ROW><ROW><id>13285185</id><snippet>instance</snippet></ROW><ROW><id>13285185</id><snippet>self</snippet></ROW><ROW><id>13285185</id><snippet>CategoryChoicesForm</snippet></ROW><ROW><id>13285303</id><snippet>commands</snippet></ROW><ROW><id>13285303</id><snippet>r'"C:\Program Files\...\some.exe" /configure'
</snippet></ROW><ROW><id>13285303</id><snippet>commands=r'"%s\msiexec.exe" /i ....msi' % command
</snippet></ROW><ROW><id>13285563</id><snippet>p1 = Session.query(Parent).get(...)
p2 = Session.query(Parent).get(...)

for child in p2.children[:]:
    child.parent = p1

Session.delete(p2)
Session.commit()
</snippet></ROW><ROW><id>13286052</id><snippet>python setup.py develop</snippet></ROW><ROW><id>13286052</id><snippet>pip install chameleon</snippet></ROW><ROW><id>13286215</id><snippet>msg.attach_alternative(t.render(Context({})), "text/html")
</snippet></ROW><ROW><id>13286408</id><snippet>%22</snippet></ROW><ROW><id>13286408</id><snippet>"</snippet></ROW><ROW><id>13286408</id><snippet>"http://example.com/"
</snippet></ROW><ROW><id>13286408</id><snippet>csv</snippet></ROW><ROW><id>13286408</id><snippet>"</snippet></ROW><ROW><id>13286408</id><snippet>'"http://example.com/"'.strip('"')
</snippet></ROW><ROW><id>13286408</id><snippet>import csv
from StringIO import StringIO

c = '"foo"\n"bar"\n"baz"\n'      # Since csv.reader needs a file-like-object,
reader = csv.reader(StringIO(c)) # wrap c into a StringIO.
for line in reader:
    print line[0]
</snippet></ROW><ROW><id>13286408</id><snippet>import csv

with open("links.csv") as f:
    r = csv.reader(f)
    start_urls = [l[0] for l in r]
</snippet></ROW><ROW><id>13286466</id><snippet>modelForm</snippet></ROW><ROW><id>13286466</id><snippet>candidate</snippet></ROW><ROW><id>13286466</id><snippet>form_valid()</snippet></ROW><ROW><id>13286466</id><snippet>class ResumeForm(forms.ModelForm):
    class Meta:
        model = Resume
        exclude = ('candidate',)

class ResumeCreateView(CreateView):
    form_class = ResumeForm
    model = Resume

    def form_valid(self, form):
        form.instance.candidate = Candidate.objects.get(user=self.request.user)
        ....
</snippet></ROW><ROW><id>13287548</id><snippet>from ghost import Ghost
ghost = Ghost()
page, extra_resources = ghost.open("http://jeanphi.fr")
assert page.http_status==200 and 'jeanphix' in ghost.content
</snippet></ROW><ROW><id>13287721</id><snippet>expression = ""
operators= set("*/+-")
numbers= set("0123456789")
while True:
    expression= introduction()  # You should read the next expression here
    for i in expression:
        if i not in numbers and i not in operators:
            print("Please enter valid inputs, please try again.")
            break # You should have a break here
    else:
        break

print expression  # Print if valid
</snippet></ROW><ROW><id>13287721</id><snippet>for loop</snippet></ROW><ROW><id>13287721</id><snippet>while</snippet></ROW><ROW><id>13287721</id><snippet>else block</snippet></ROW><ROW><id>13287721</id><snippet>for-loop</snippet></ROW><ROW><id>13287721</id><snippet>expression</snippet></ROW><ROW><id>13287757</id><snippet>import StringIO

stream = StringIO.StringIO()
writer.write( stream )    # write PDF content

# Open the file and write to it
with files.open(file_name, 'a') as f:
    f.write( stream.getvalue() )
</snippet></ROW><ROW><id>13287922</id><snippet>sentinel = object()

def foo(self, value=sentinel):
    if value is not sentinel:
        print("You passed in something else!")
</snippet></ROW><ROW><id>13287922</id><snippet>object()</snippet></ROW><ROW><id>13287922</id><snippet>is</snippet></ROW><ROW><id>13287922</id><snippet>None</snippet></ROW><ROW><id>13287922</id><snippet>sentinel = []
sentinel = {}
</snippet></ROW><ROW><id>13288095</id><snippet>--no-site-packages</snippet></ROW><ROW><id>13288095</id><snippet>pip</snippet></ROW><ROW><id>13288095</id><snippet>bin/activate</snippet></ROW><ROW><id>13288095</id><snippet>bin/pip</snippet></ROW><ROW><id>13288095</id><snippet>--system-site-package</snippet></ROW><ROW><id>13288184</id><snippet>combine_first</snippet></ROW><ROW><id>13288184</id><snippet>index.union</snippet></ROW><ROW><id>13288184</id><snippet>index.union</snippet></ROW><ROW><id>13288184</id><snippet>combine_first</snippet></ROW><ROW><id>13288184</id><snippet>index.union</snippet></ROW><ROW><id>13288184</id><snippet>index.union</snippet></ROW><ROW><id>13288184</id><snippet>a2.combine_first(a1).sort_index()</snippet></ROW><ROW><id>13288337</id><snippet>|</snippet></ROW><ROW><id>13288337</id><snippet>*</snippet></ROW><ROW><id>13288337</id><snippet>&gt;</snippet></ROW><ROW><id>13288337</id><snippet>2&gt;</snippet></ROW><ROW><id>13288337</id><snippet>&lt;(process substitution)</snippet></ROW><ROW><id>13288368</id><snippet>txt</snippet></ROW><ROW><id>13288368</id><snippet>dictfun = dict()
for txt in ("a", "b", "c"):
    dictfun[txt] = lambda txt=txt: "function " + txt
</snippet></ROW><ROW><id>13288402</id><snippet>w      (1d array):       113
X      (2d array): 113 x   1   
Result (2d array): 113 x 113
</snippet></ROW><ROW><id>13288415</id><snippet>scipy</snippet></ROW><ROW><id>13288415</id><snippet>In [2]: import numpy as np

In [45]: import scipy.stats as stats

In [3]: nan = np.nan

In [43]: A = np.array([1, nan, 8, nan, nan, 4, 6, 1])   
In [44]: B = np.array([8, 5, 8, nan, 5, 9, 5, 3])  
In [46]: C = np.array([A, B])    
In [47]: C
Out[47]: 
array([[  1.,  nan,   8.,  nan,  nan,   4.,   6.,   1.],
       [  8.,   5.,   8.,  nan,   5.,   9.,   5.,   3.]])

In [48]: stats.nanmean(C)
Warning: invalid value encountered in divide
Out[48]: array([ 4.5,  5. ,  8. ,  nan,  5. ,  6.5,  5.5,  2. ])
</snippet></ROW><ROW><id>13288415</id><snippet>In [60]: C = np.array([A, B])    
In [61]: C = np.ma.masked_array(C, np.isnan(C))    
In [62]: C
Out[62]: 
masked_array(data =
 [[1.0 -- 8.0 -- -- 4.0 6.0 1.0]
 [8.0 5.0 8.0 -- 5.0 9.0 5.0 3.0]],
             mask =
 [[False  True False  True  True False False False]
 [False False False  True False False False False]],
       fill_value = 1e+20)

In [63]: np.mean(C, axis = 0)
Out[63]: 
masked_array(data = [4.5 5.0 8.0 -- 5.0 6.5 5.5 2.0],
             mask = [False False False  True False False False False],
       fill_value = 1e+20)

In [66]: np.ma.filled(np.mean(C, axis = 0), nan)
Out[67]: array([ 4.5,  5. ,  8. ,  nan,  5. ,  6.5,  5.5,  2. ])
</snippet></ROW><ROW><id>13288938</id><snippet>target =  open('target.txt', 'w')

for item in xrange(4000000):
    target.write(str(item)+'\n')
    print item
</snippet></ROW><ROW><id>13288938</id><snippet>[gp@imdev1 /tmp]$ time python large.py
real    1m51.690s
user    0m10.531s
sys     0m6.129s

gp@imdev1 /tmp]$ ls -lah target.txt 
-rw-rw-r--. 1 gp gp 30M Nov  8 16:06 target.txt
</snippet></ROW><ROW><id>13288938</id><snippet>gp@imdev1 /tmp]$ time python large.py 
real    0m2.584s
user    0m2.536s
sys     0m0.040s
</snippet></ROW><ROW><id>13289532</id><snippet>y[x[..., 0], x[..., 1], x[..., 2]]
</snippet></ROW><ROW><id>13289532</id><snippet>y[tuple(np.rollaxis(x, -1))]
</snippet></ROW><ROW><id>13289556</id><snippet>sortedspec=[[]]*10
</snippet></ROW><ROW><id>13289556</id><snippet>&gt;&gt;&gt; sortedspec[0].append(1)
&gt;&gt;&gt; sortedspec
[[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]
</snippet></ROW><ROW><id>13289556</id><snippet>sortedspec=[[] for i in range(10)]
</snippet></ROW><ROW><id>13289660</id><snippet>gdb python

//after gdb is running, type the following command
run test_case.py *arguments_of_your_script*
</snippet></ROW><ROW><id>13290546</id><snippet>__enter__()</snippet></ROW><ROW><id>13290546</id><snippet>with</snippet></ROW><ROW><id>13290546</id><snippet>__exit__()</snippet></ROW><ROW><id>13290684</id><snippet>def myfunc(a, b):
    return np.where(a &lt; b*10, a*2, -a)    
</snippet></ROW><ROW><id>13290684</id><snippet>In [48]: a = np.array([1, 5, 50, 500])

In [49]: b = 1

In [50]: myfunc(a, b)
Out[50]: array([   2,   10,  -50, -500])
</snippet></ROW><ROW><id>13290684</id><snippet>def myfunc(a, b):
    return np.where(a &gt; b*10, a*2, -a)
</snippet></ROW><ROW><id>13290684</id><snippet>In [52]: myfunc(a, b)
Out[52]: array([  -1,   -5,  100, 1000])
</snippet></ROW><ROW><id>13290753</id><snippet>if 'cellstyle' in data and data['cellstyle'] == 'outputimage':
exceptions.TypeError: argument of type 'NoneType' is not iterable
</snippet></ROW><ROW><id>13290753</id><snippet>'cellstyle' in data</snippet></ROW><ROW><id>13290753</id><snippet>data</snippet></ROW><ROW><id>13290753</id><snippet>None</snippet></ROW><ROW><id>13291236</id><snippet>numpy.savetext</snippet></ROW><ROW><id>13291236</id><snippet>ndarray.tostring</snippet></ROW><ROW><id>13291236</id><snippet>f.write</snippet></ROW><ROW><id>13291236</id><snippet>tuple</snippet></ROW><ROW><id>13291236</id><snippet>int</snippet></ROW><ROW><id>13291236</id><snippet>struct.pack</snippet></ROW><ROW><id>13291236</id><snippet>f.write(struct.pack('2i',*array.shape))
</snippet></ROW><ROW><id>13291497</id><snippet>class ImageHandler(webapp2.RequestHandler):
    def get(self, image_id):
        image = Image.get(image_id)
        self.response.headers['Content-Type'] = 'image/jpeg'
        self.response.out.write(image.data)
</snippet></ROW><ROW><id>13291497</id><snippet>(r'/images/(.*)', ImageHandler)
</snippet></ROW><ROW><id>13291497</id><snippet>&lt;img src="/images/{{img1.key}}" /&gt;&lt;br /&gt;
&lt;img src="/images/{{img2.key}}" /&gt;&lt;br /&gt;
</snippet></ROW><ROW><id>13291523</id><snippet>input = open("sparse.csv").read().split() # split by newlines and spaces
i = iter(input)
for date in i:
    if date != "nan":
        value = i.next()
        # process pairs
</snippet></ROW><ROW><id>13292140</id><snippet>if not lis.endswith('.zip'):
   print lis
</snippet></ROW><ROW><id>13292140</id><snippet>os.path.splitext</snippet></ROW><ROW><id>13292140</id><snippet>list_without_zip = [ x for x in list_with_zip if not x.endswith('.zip') ]
</snippet></ROW><ROW><id>13292260</id><snippet>import django</snippet></ROW><ROW><id>13292260</id><snippet>$ wget https://raw.github.com/pypa/virtualenv/master/virtualenv.py
$ python virtualenv.py venv
$ cd venv
$ source bin/activate
$ pip install django
</snippet></ROW><ROW><id>13292311</id><snippet>'INCORRECT_KEY_PRESSED' and 'rad_mod_KA_0043-lo-mod' in row</snippet></ROW><ROW><id>13292311</id><snippet>('INCORRECT_KEY_PRESSED') and ('rad_mod_KA_0043-lo-mod' in row)
</snippet></ROW><ROW><id>13292311</id><snippet>if 'INCORRECT_KEY_PRESSED' in row and 'rad_mod_KA_0043-lo-mod' in row:
</snippet></ROW><ROW><id>13292311</id><snippet>if {'INCORRECT_KEY_PRESSED', 'rad_mod_KA_0043-lo-mod'}.intersection(row):
</snippet></ROW><ROW><id>13292475</id><snippet>classList</snippet></ROW><ROW><id>13292475</id><snippet>class AClass(object): pass
class BClass(object): pass
class CClass(object): pass

classList = {'a':AClass, 'b':BClass, 'c':CClass}
</snippet></ROW><ROW><id>13292475</id><snippet>x</snippet></ROW><ROW><id>13292475</id><snippet>obj = classList[x]()
</snippet></ROW><ROW><id>13292591</id><snippet>datetime.date()</snippet></ROW><ROW><id>13292591</id><snippet>import datetime
day, month = map(int, yourvalue.split('/'))
adate = datetime.date.today().replace(month=month, day=day)
</snippet></ROW><ROW><id>13292591</id><snippet>datetime.date.today()</snippet></ROW><ROW><id>13292591</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; somevalue = '31/12'
&gt;&gt;&gt; day, month = map(int, somevalue.split('/'))
&gt;&gt;&gt; datetime.date.today().replace(month=month, day=day)
datetime.date(2012, 12, 31)
&gt;&gt;&gt; someothervalue = '1/1'
&gt;&gt;&gt; day, month = map(int, someothervalue.split('/'))
&gt;&gt;&gt; datetime.date.today().replace(month=month, day=day)
datetime.date(2012, 1, 1)
</snippet></ROW><ROW><id>13292591</id><snippet>datetime.strptime()</snippet></ROW><ROW><id>13292591</id><snippet>adate = datetime.datetime.strptime(yourvalue, '%d/%m').date()
adate = adate.replace(year=datetime.date.today().year)
</snippet></ROW><ROW><id>13293042</id><snippet>name,type,number = i.split(',')
# now name="Adam", type="widgets", number="5769"
</snippet></ROW><ROW><id>13293042</id><snippet>for triplet in sod_hng_hhl_lst:
    name,type,numberString = triplet.split(",")
    # because this is a string and we want a number:
    num_as_integer = int(numberString)
    # do something with num_as_integer
    new_number = num_as_integer * 2
    newtriplet = ','.join([name, type, new_number])
</snippet></ROW><ROW><id>13293042</id><snippet>sod_hng_hhl_lst = [ ('Adam', 'widgets', 5769),
                    #... etc
                  ]
</snippet></ROW><ROW><id>13293042</id><snippet>for idx,triplet in enumerate(sod_hng_hhl_lst):
    name,type,number = triplet
    new_number = number * 2
    # change just the number in the triplet
    sod_hng_hhl_lst[idx][2] = new_number 
</snippet></ROW><ROW><id>13293042</id><snippet>dct = {"Adam": ('widgets', 5769),
       #....
      }
</snippet></ROW><ROW><id>13293042</id><snippet>for person,details in dct.items():
    thing, number = details
    new_num = number * 2
    dct[person][1] = new_num
</snippet></ROW><ROW><id>13293182</id><snippet>import numpy as np
from matplotlib import pyplot as plt

N=1000
x = np.linspace(-.5,1.5,num=N)
xshift = x-0.5
Bz = 30*np.exp(-xshift**8/0.00125)*np.sin(xshift*2.*np.pi)
Np = 30*np.exp(-xshift**10/0.00125)+5
Vx = 200*np.exp(-xshift**10/0.00125)+400

fig = plt.figure()

#list of tuples of the form `(data, label)`    
data_list = [(Bz,"B_z"),(Vx,"V_x"),(Np,"N_p")]

left = .15
height = .2
width = .7
bottom = .0
axes_ticks = []
axes = []
for i,(data,lab) in enumerate(data_list,1):
    ax = fig.add_subplot(len(data_list),1,i)
    bottom += height
    ax.set_position((left, bottom, width, height))

    ax.set_ylabel("$\mathrm{%s}$"%lab)
    axes_ticks.append(ax.get_xaxis().get_ticklocs())
    ax.get_xaxis().set_ticks([])
    ax.plot(x,data)
    axes.append(ax)
else:
    #Reset default tick labels here on ax
    axes[0].get_xaxis().set_ticks(axes_ticks[0])


plt.show()
</snippet></ROW><ROW><id>13293199</id><snippet>from datetime import datetime

start_date = 'Sun Sep 16 16:05:15 +0000 2012'
end_date = 'Sun Sep 17 23:55:20 +0000 2012'


def __datetime(date_str):
    return datetime.strptime(date_str, '%a %b %d %H:%M:%S +0000 %Y')

start = __datetime(start_date)
end = __datetime(end_date)

delta = end - start
print delta  # prints: 1 day, 7:50:05
print delta.total_seconds()  # prints: 114605.0
</snippet></ROW><ROW><id>13293219</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; d = datetime.datetime(2012, 9, 23, 0, 0)
&gt;&gt;&gt; d.strftime('%Y%m%d')
'20120923'
&gt;&gt;&gt; int(d.strftime('%Y%m%d'))
20120923
</snippet></ROW><ROW><id>13293316</id><snippet>import time
timeout = time.time() + 60*5   # 5 minutes from now
while True:
    test = 0
    if test == 5 or time.time() &gt; timeout:
        break
    test = test - 1
</snippet></ROW><ROW><id>13293316</id><snippet>time.sleep(1)</snippet></ROW><ROW><id>13293460</id><snippet>user.following.filter(to_user__status=1)
</snippet></ROW><ROW><id>13293460</id><snippet>user.following</snippet></ROW><ROW><id>13293460</id><snippet>User</snippet></ROW><ROW><id>13293460</id><snippet>__</snippet></ROW><ROW><id>13293460</id><snippet>Follow</snippet></ROW><ROW><id>13293460</id><snippet>from_user</snippet></ROW><ROW><id>13293460</id><snippet>to_user</snippet></ROW><ROW><id>13293460</id><snippet>ForeignKey</snippet></ROW><ROW><id>13293460</id><snippet>User</snippet></ROW><ROW><id>13293460</id><snippet>User()</snippet></ROW><ROW><id>13293460</id><snippet>u</snippet></ROW><ROW><id>13293460</id><snippet>u.following</snippet></ROW><ROW><id>13293460</id><snippet>User()</snippet></ROW><ROW><id>13293460</id><snippet>u</snippet></ROW><ROW><id>13293460</id><snippet>Follow</snippet></ROW><ROW><id>13293460</id><snippet>u.following</snippet></ROW><ROW><id>13293460</id><snippet>ForeignKey</snippet></ROW><ROW><id>13293460</id><snippet>Follow</snippet></ROW><ROW><id>13293460</id><snippet>User</snippet></ROW><ROW><id>13293460</id><snippet>u</snippet></ROW><ROW><id>13293460</id><snippet>Follow</snippet></ROW><ROW><id>13293460</id><snippet>u.following.filter(to_user__status=1)</snippet></ROW><ROW><id>13293460</id><snippet>Follow</snippet></ROW><ROW><id>13293460</id><snippet>from_user</snippet></ROW><ROW><id>13293460</id><snippet>u</snippet></ROW><ROW><id>13293460</id><snippet>to_user</snippet></ROW><ROW><id>13293460</id><snippet>status</snippet></ROW><ROW><id>13293460</id><snippet>1</snippet></ROW><ROW><id>13293460</id><snippet>u.from_user</snippet></ROW><ROW><id>13293460</id><snippet>from_user</snippet></ROW><ROW><id>13293460</id><snippet>u</snippet></ROW><ROW><id>13293460</id><snippet>u.to_user</snippet></ROW><ROW><id>13293460</id><snippet>to_user</snippet></ROW><ROW><id>13293460</id><snippet>u</snippet></ROW><ROW><id>13293460</id><snippet>ForeignKey</snippet></ROW><ROW><id>13293460</id><snippet>from_user</snippet></ROW><ROW><id>13293460</id><snippet>to_user</snippet></ROW><ROW><id>13293460</id><snippet>Follow</snippet></ROW><ROW><id>13293460</id><snippet>User.objects.filter(to_user__from_user=user, to_user__status=1) # user as from_user
User.objects.filter(from_user__to_user=user, from_user__status=1) # user as to_user
User.objects.filter(following=user) # those who are followed by `to_user` user
</snippet></ROW><ROW><id>13293613</id><snippet>scrollregion</snippet></ROW><ROW><id>13293613</id><snippet>__init__</snippet></ROW><ROW><id>13293613</id><snippet>     def __init__(self,name): 
         self.name = name
-        self.frame=tk.Frame.__init__(self,root)

         if name=="BotWin":
+            self.canvas = tk.Canvas(root, borderwidth=0, background="#ffffff")
+            tk.Frame.__init__(self,self.canvas)
             tk.Label(self,text="FirstColBot",width=30).grid(row=0,column=0)            
             tk.Label(self,text="SecndColBot",width=20).grid(row=0,column=1)
-            self.canvas = tk.Canvas(root, borderwidth=0, background="#ffffff")
             self.vsb = tk.Scrollbar(root, orient="vertical", command=self.canvas.yview)
             self.canvas.configure(yscrollcommand=self.vsb.set)

             self.vsb.pack(side="right", fill="y")
             self.canvas.pack(side="left", fill="both", expand=True)
-            self.canvas.create_window((4,4), window=self.frame)
+            self.canvas.create_window((4,4), window=self)
             self.bind("&lt;Configure&gt;", self.OnFrameConfigure)

         elif name=="TopWin":
+            self.frame=tk.Frame.__init__(self,root)
             self.pack()
             tk.Label(self,text="FirstColTop",width=30).grid(row=0,column=0)         
             tk.Label(self,text="SecndColTop",width=20).grid(row=0,column=1)
@@ -41,7 +40,7 @@
         toprow+=1

     def OnFrameConfigure(self, event):
-        self.canvas.configure(scrollregion=self.frame.bbox("all"))
+        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

     def addrowBot(self,stuff,otherstuff):
         global botrow
</snippet></ROW><ROW><id>13293860</id><snippet>ctypes</snippet></ROW><ROW><id>13293860</id><snippet>ctypes.Union</snippet></ROW><ROW><id>13293860</id><snippet>class test(ctypes.Structure):
    # ...
class test2(ctypes.Structure):
    # ...

class tests(ctypes.Union):
    _fields_ = [("a", test),
                ("b", test2)]
</snippet></ROW><ROW><id>13294182</id><snippet>from itertools import groupby

L = [
    { "key" : { "subkey" : "red", "value" : 1 }  },
    { "key" : { "subkey" : "red", "value" : 2 }  },
    { "key" : { "subkey" : "blue", "value" : 1 }  },
    { "key" : { "subkey" : "yellow", "value" : 3 }  },
    { "key" : { "subkey" : "blue", "value" : 5 }  },
    { "key" : { "subkey" : "blue", "value" : 8 }  },
    { "key" : { "subkey" : "red", "value" : 2 }  },
    { "key" : { "subkey" : "red", "value" : 3 }  },
    { "key" : { "subkey" : "red", "value" : 6 }  },
]


def some_event(*args):
    print args, sum(args)


for k, g in groupby(L, key=lambda x:x["key"]["subkey"]):
    g = list(g)
    if len(g) &gt; 1:
        some_event(*(i["key"]["value"] for i in g))
</snippet></ROW><ROW><id>13294299</id><snippet>lil_matrix</snippet></ROW><ROW><id>13294299</id><snippet>dok_matrix</snippet></ROW><ROW><id>13294299</id><snippet>lil_matrix</snippet></ROW><ROW><id>13294299</id><snippet>csr_matrix</snippet></ROW><ROW><id>13294299</id><snippet>tocoo</snippet></ROW><ROW><id>13294299</id><snippet>todok</snippet></ROW><ROW><id>13294299</id><snippet>tocsr</snippet></ROW><ROW><id>13294299</id><snippet>scipy.sparse</snippet></ROW><ROW><id>13294299</id><snippet>CountVectorizer</snippet></ROW><ROW><id>13294299</id><snippet>DictVectorizer</snippet></ROW><ROW><id>13294299</id><snippet>CountVectorizer</snippet></ROW><ROW><id>13294299</id><snippet>&gt;&gt;&gt; from sklearn.feature_extraction.text import CountVectorizer
&gt;&gt;&gt; documents = ["The dog ran", "The boy ran"]
&gt;&gt;&gt; vectorizer = CountVectorizer(min_df=0)
&gt;&gt;&gt; vectorizer = CountVectorizer(min_df=0, stop_words=[])
&gt;&gt;&gt; X = CountVectorizer.fit_transform(documents)
&gt;&gt;&gt; X = vectorizer.fit_transform(documents)
&gt;&gt;&gt; X.toarray()
array([[0, 1, 1, 1],
       [1, 0, 1, 1]])
</snippet></ROW><ROW><id>13294299</id><snippet>DictVectorizer</snippet></ROW><ROW><id>13294299</id><snippet>dict</snippet></ROW><ROW><id>13294299</id><snippet>&gt;&gt;&gt; from sklearn.feature_extraction import DictVectorizer
&gt;&gt;&gt; documents = [{"the":1, "boy":1, "ran":1}, {"the":1, "dog":1, "ran":1}]
&gt;&gt;&gt; X = vectorizer.fit_transform(documents)
&gt;&gt;&gt; X.toarray()
array([[ 1.,  0.,  1.,  1.],
       [ 0.,  1.,  1.,  1.]])
&gt;&gt;&gt; vectorizer.inverse_transform(X[0])
[{'ran': 1.0, 'boy': 1.0, 'the': 1.0}]
</snippet></ROW><ROW><id>13294299</id><snippet>min_df</snippet></ROW><ROW><id>13294299</id><snippet>CountVectorizer</snippet></ROW><ROW><id>13294299</id><snippet>DictVectorizer</snippet></ROW><ROW><id>13294299</id><snippet>CountVectorizer</snippet></ROW><ROW><id>13294534</id><snippet>MyDict</snippet></ROW><ROW><id>13294534</id><snippet>set,</snippet></ROW><ROW><id>13294534</id><snippet>combined_dict = defaultdict(set)

# first add all the values from MyDict
for key, value in MyDict.iteritems():
    combined_dict[int(key)].add(value)

# then add the values from the file
infile = open('FileWithTheData.csv', 'r')
for line in infile.readlines():
    spl_line = line.split(',')
    combined_dict[int(sp_line[0])].update(spl_line[1:])
</snippet></ROW><ROW><id>13295053</id><snippet>from xml.dom.minidom import Document 
import os,datetime
path = "/tmp/"
day_path ="today.xml"
doc = Document()
done = doc.createElement('Printed Orders')

for filename in os.listdir((os.path.join(path))):

    print "here"
    modTime = datetime.datetime.fromtimestamp(os.path.getmtime(path+filename)).strftime('%I:%M:%S %p')
    doc.appendChild(done)
    ordernum = doc.createElement(filename)
    done.appendChild(ordernum)
    #This is where other child elements have been removed

print doc.toprettyxml(indent='  ')
xmlData = open(day_path, 'w')
xmlData.write(doc.toprettyxml(indent='  '))
</snippet></ROW><ROW><id>13295118</id><snippet>descriptors</snippet></ROW><ROW><id>13295118</id><snippet>class Fum(object):
    foo = Foo()
    bar = Bar()

fum = Fum()

class DerivedFum(fum.__class__):
    bar = property(raiser)

fum.__class__ = DerivedFum

fum.bar # --&gt; raise AttributeError
</snippet></ROW><ROW><id>13295176</id><snippet>import numpy as np
from matplotlib import pyplot as plt
from matplotlib import colors as c

X = np.linspace(0,1,100)
Y = np.linspace(0,1,100)
X,Y = np.meshgrid(X,Y)
Z = (X**2 + Y**2) &lt; 1.
Z = Z.astype(int)
Z += (X**2 + Y**2) &lt; .5

cMap = c.ListedColormap(['y','b','m'])

plt.pcolormesh(X,Y,Z,cmap=cMap)
plt.show()
</snippet></ROW><ROW><id>13295287</id><snippet>:</snippet></ROW><ROW><id>13295287</id><snippet>def path_to_tree(p):
    elems = p.split(':')
    head = None
    for elem in reversed(elems):
        head = {'title': elem, 'children': [] if head is None else [head]}
    return head
</snippet></ROW><ROW><id>13295622</id><snippet>from pprint import pprint
from collections import OrderedDict
import re

data = """Police Response: 11/6/2012 1:34:06 AM   Incident Desc: Traffic Stop OFC:    Received: 11/6/2012 1:34:06 AM
Disp: PCHK  Location: CLEAR LAKE RD&amp;GREEN HILL RD
Event Number: LLS121106060941   ID: 60941   Priority: 6 Case No:
Police Response:    Incident Desc: Theft    OFC:    Received: 11/6/2012 1:43:35 AM
Disp: CSR   Location: SCH BLACHLY
Event Number: LLS121106060943   ID: 60943   Priority: 4 Case No:
Police Response: 11/6/2012 1:47:47 AM   Incident Desc: Suspicious Vehicle(s)    OFC:        Received: 11/6/2012 1:47:47 AM
Disp: FI    Location: KIRK RD&amp;CLEAR LAKE RD
Event Number: LLS121106060944   ID: 60944   Priority: 6 Case No: """

lines = data.splitlines()
cases = ['\n'.join(lines[i:i+3]) for i in range(0, len(lines), 3)]
pattern = '(Police Response|Incident Desc|OFC|Received|Disp|Location|Event Number|ID|Priority|Case No):'
rows = []
for case in cases:
    pairs =  re.split(pattern, case)[1:]
    rows.append(OrderedDict((pairs[i*2], pairs[i*2+1]) for i in range(10)))

for i, row in enumerate(rows):
    print '============== {} =============='.format(i)
    pprint(row.items())
</snippet></ROW><ROW><id>13295622</id><snippet>============== 0 ==============
[('Police Response', ' 11/6/2012 1:34:06 AM   '),
 ('Incident Desc', ' Traffic Stop '),
 ('OFC', '    '),
 ('Received', ' 11/6/2012 1:34:06 AM\n'),
 ('Disp', ' PCHK  '),
 ('Location', ' CLEAR LAKE RD&amp;GREEN HILL RD\n'),
 ('Event Number', ' LLS121106060941   '),
 ('ID', ' 60941   '),
 ('Priority', ' 6 '),
 ('Case No', '')]
============== 1 ==============
[('Police Response', '    '),
 ('Incident Desc', ' Theft    '),
 ('OFC', '    '),
 ('Received', ' 11/6/2012 1:43:35 AM\n'),
 ('Disp', ' CSR   '),
 ('Location', ' SCH BLACHLY\n'),
 ('Event Number', ' LLS121106060943   '),
 ('ID', ' 60943   '),
 ('Priority', ' 4 '),
 ('Case No', '')]
============== 2 ==============
[('Police Response', ' 11/6/2012 1:47:47 AM   '),
 ('Incident Desc', ' Suspicious Vehicle(s)    '),
 ('OFC', '        '),
 ('Received', ' 11/6/2012 1:47:47 AM\n'),
 ('Disp', ' FI    '),
 ('Location', ' KIRK RD&amp;CLEAR LAKE RD\n'),
 ('Event Number', ' LLS121106060944   '),
 ('ID', ' 60944   '),
 ('Priority', ' 6 '),
 ('Case No', ' ')]
</snippet></ROW><ROW><id>13295801</id><snippet>DataFrame.fillna()</snippet></ROW><ROW><id>13295801</id><snippet>In [7]: df
Out[7]: 
          0         1
0       NaN       NaN
1 -0.494375  0.570994
2       NaN       NaN
3  1.876360 -0.229738
4       NaN       NaN

In [8]: df.fillna(0)
Out[8]: 
          0         1
0  0.000000  0.000000
1 -0.494375  0.570994
2  0.000000  0.000000
3  1.876360 -0.229738
4  0.000000  0.000000
</snippet></ROW><ROW><id>13295801</id><snippet>In [12]: df[1].fillna(0, inplace=True)
Out[12]: 
0    0.000000
1    0.570994
2    0.000000
3   -0.229738
4    0.000000
Name: 1

In [13]: df
Out[13]: 
          0         1
0       NaN  0.000000
1 -0.494375  0.570994
2       NaN  0.000000
3  1.876360 -0.229738
4       NaN  0.000000
</snippet></ROW><ROW><id>13295924</id><snippet>import numpy as np
a = np.arange(12).reshape((4, 3))
b = np.arange(15).reshape((5, 3))
diff = a[np.newaxis, :, :] - b[:, np.newaxis, :]
diff.shape
# (5, 4, 3)
</snippet></ROW><ROW><id>13296163</id><snippet>runtime "binary"
build 'pip install --install-option="--prefix=`pwd`/pips" boto'
file 'botoworker.py'
exec "botoworker.sh"
</snippet></ROW><ROW><id>13296163</id><snippet>import boto
</snippet></ROW><ROW><id>13296163</id><snippet>PYTHONPATH="$HOME/pips/lib/python2.7/site-packages:$PYTHONPATH" python botoworker.py "$@"
</snippet></ROW><ROW><id>13296601</id><snippet>py33-tkinter</snippet></ROW><ROW><id>13296601</id><snippet>sudo port install py33-tkinter</snippet></ROW><ROW><id>13296644</id><snippet>import sys
print sys.modules
</snippet></ROW><ROW><id>13296783</id><snippet>from collections import OrderedDict

a = {'score':3, 'color':'red'}
b = {'score':1, 'color':'yellow'}
lst = []

for d in [a,b]:
    temp = OrderedDict()
    for k in sorted(d, reverse=True):
        temp.setdefault(k, d[k])
    lst.append(temp)

OUTPUT: [OrderedDict([('score', 3), ('color', 'red')]), OrderedDict([('score', 1), ('color', 'yellow')])]
</snippet></ROW><ROW><id>13296884</id><snippet>firstLine = file.readline()
#extract from first line, the number of lines that next

for x in range(1,number_of_line)
    line = file.readline()
    #process the information for all next lines
</snippet></ROW><ROW><id>13296984</id><snippet>any()</snippet></ROW><ROW><id>13296984</id><snippet>all()</snippet></ROW><ROW><id>13296984</id><snippet>for</snippet></ROW><ROW><id>13296984</id><snippet>any()</snippet></ROW><ROW><id>13296984</id><snippet>all()</snippet></ROW><ROW><id>13296984</id><snippet>any()</snippet></ROW><ROW><id>13296984</id><snippet>None</snippet></ROW><ROW><id>13296984</id><snippet>checkTime = time.time() - 60*30

# use any() as a fast way to run a loop
# The .__delitem__() method always returns `None`, so this runs the whole loop
lst = [k for k in self.keys() if self[k].lastAccess &gt; checkTime]
any(self.__delitem__(k) for k in lst)
</snippet></ROW><ROW><id>13297052</id><snippet>xlwt</snippet></ROW><ROW><id>13297052</id><snippet>SUMPRODUCT</snippet></ROW><ROW><id>13297052</id><snippet>MMULT</snippet></ROW><ROW><id>13297258</id><snippet>ipython</snippet></ROW><ROW><id>13297258</id><snippet>ipython</snippet></ROW><ROW><id>13297468</id><snippet>raw</snippet></ROW><ROW><id>13297468</id><snippet>text = '''
  Heading
  =======
  .. raw:: html

     &lt;p class="jQuery-addThis"&gt;Test&lt;/p&gt;
'''
docutils.core.publish_parts(text, writer_name='html')['html_body'] 
</snippet></ROW><ROW><id>13297537</id><snippet>import glob

listing = glob.glob('C:/foo/bar/foo.log*')
for filename in listing:
    # do stuff
</snippet></ROW><ROW><id>13297573</id><snippet>from sentry.models import Project
project = Project(...)
...
project.save()
</snippet></ROW><ROW><id>13297573</id><snippet>sentry --config=sentry.conf.py dumpdata --indent=2 auth &gt; auth_data.json</snippet></ROW><ROW><id>13297573</id><snippet>sentry --config=sentry.conf.py dumpdata --indent=2 sentry &gt; sentry_data.json</snippet></ROW><ROW><id>13297573</id><snippet>sentry --config=sentry.conf.py syncdb --noinput</snippet></ROW><ROW><id>13297573</id><snippet>sentry --config=sentry.conf.py migrate</snippet></ROW><ROW><id>13297573</id><snippet>sentry --config=sentry.conf.py loaddata auth_data.json</snippet></ROW><ROW><id>13297573</id><snippet>sentry --config=sentry.conf.py loaddata sentry_data.json</snippet></ROW><ROW><id>13297620</id><snippet>list.reverse()</snippet></ROW><ROW><id>13297620</id><snippet>None</snippet></ROW><ROW><id>13297620</id><snippet>reversed(put)</snippet></ROW><ROW><id>13297629</id><snippet>Jacobi(a, n)</snippet></ROW><ROW><id>13297629</id><snippet>self.assertRaises(ValueError, Jacobi, a, n)</snippet></ROW><ROW><id>13297629</id><snippet>assertRaises</snippet></ROW><ROW><id>13297685</id><snippet>else</snippet></ROW><ROW><id>13297685</id><snippet>for loop</snippet></ROW><ROW><id>13297685</id><snippet>for loop</snippet></ROW><ROW><id>13297685</id><snippet>breaking</snippet></ROW><ROW><id>13297685</id><snippet>iteration</snippet></ROW><ROW><id>13297685</id><snippet>if last % p == 0:
      break
</snippet></ROW><ROW><id>13297685</id><snippet>if condition</snippet></ROW><ROW><id>13297733</id><snippet>&gt;&gt;&gt; from lxml import objectify
&gt;&gt;&gt; doc = objectify.E.xml()
&gt;&gt;&gt; doc.append(getattr(objectify.E,'program-id')("$Id: myFile.py 3519 2012-07-17 13:37:20Z $"))
&gt;&gt;&gt; doc.append(getattr(objectify.E,'formatter-text')("basic format"))
&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; print etree.tostring(doc,pretty_print=True)
&lt;xml xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;program-id py:pytype="str"&gt;$Id: myFile.py 3519 2012-07-17 13:37:20Z $&lt;/program-id&gt;
  &lt;formatter-text py:pytype="str"&gt;basic format&lt;/formatter-text&gt;
&lt;/xml&gt;
</snippet></ROW><ROW><id>13297779</id><snippet>super</snippet></ROW><ROW><id>13297779</id><snippet>class A(object):
    def __init__(self, x):
        print "Called A"
        self.a=x

class B(A):
    def __init__(self, x):
        print "Called B"
        super(B,self).__init__(x)
        self.b=x

class C(A):
    def __init__(self, x):
        print "Called C"
        super(C,self).__init__(x)
        self.c=x

class D(B,C):
    def __init__(self, x):
        print "Called D"
        super(D,self).__init__(x)        
        self.d=x


foo = D(10)
</snippet></ROW><ROW><id>13297779</id><snippet>def mymethod(self,*args,**kwargs):
    super(thisclass,self).method(*args,**kwargs)
    ...
</snippet></ROW><ROW><id>13297779</id><snippet>super</snippet></ROW><ROW><id>13297779</id><snippet>super</snippet></ROW><ROW><id>13297779</id><snippet>object</snippet></ROW><ROW><id>13297779</id><snippet>super</snippet></ROW><ROW><id>13297779</id><snippet> super().__init__(*args,**kwargs)
</snippet></ROW><ROW><id>13297779</id><snippet>super()</snippet></ROW><ROW><id>13297779</id><snippet>self</snippet></ROW><ROW><id>13297787</id><snippet>MyModel.objects.filter(email__in=l)
</snippet></ROW><ROW><id>13297794</id><snippet>repr(d)</snippet></ROW><ROW><id>13297794</id><snippet>json.dumps(d)</snippet></ROW><ROW><id>13297794</id><snippet>json.loads(re.sub(r",\s*(\w+)", r", '\1'", re.sub(r"\{(\w+)", r"{'\1'", s)).replace("'", '"'))
</snippet></ROW><ROW><id>13297794</id><snippet>json</snippet></ROW><ROW><id>13297794</id><snippet>pip install simplejson</snippet></ROW><ROW><id>13297794</id><snippet>try:
  import json
except ImportError:
  import simplejson as json
</snippet></ROW><ROW><id>13297794</id><snippet>simplejson</snippet></ROW><ROW><id>13297794</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>13297794</id><snippet>json.loads</snippet></ROW><ROW><id>13297794</id><snippet>1+3j</snippet></ROW><ROW><id>13297794</id><snippet>json</snippet></ROW><ROW><id>13297794</id><snippet>ast</snippet></ROW><ROW><id>13297794</id><snippet>_ast</snippet></ROW><ROW><id>13297794</id><snippet>literal_eval</snippet></ROW><ROW><id>13297794</id><snippet>ast.py</snippet></ROW><ROW><id>13297794</id><snippet>literal_eval</snippet></ROW><ROW><id>13297813</id><snippet>while True:
    try:
        k = float(input("Number? "))
    except ValueError:
        print ("Could not convert string to float")
        break
    try:
        s = math.sqrt(k)
    except ValueError:
        print ("Cannot take the square root of a negative number")
        break
</snippet></ROW><ROW><id>13297948</id><snippet>import mechanize
import re

b = mechanize.Browser()

# Visit search page
url = 'http://www.ebi.ac.uk/intact'
resp = b.open(url)
page = resp.read()

# Fill out and submit form
b.select_form(name="intactForm")
b["queryTxt"] = 'Q9SUE8'
resp = b.submit()
page = resp.read()

# Parse Page
matches = re.findall('&lt;td role="gridcell" class="cellTextCompound"&gt;&lt;div class="ui-dt-c"&gt;&lt;a href=".*?" target="_blank"&gt;(.*?)&lt;/a&gt;', page)

linksB = matches[0]
print linksB
</snippet></ROW><ROW><id>13297948</id><snippet>Q96300
</snippet></ROW><ROW><id>13297948</id><snippet>python-mechanize</snippet></ROW><ROW><id>13298129</id><snippet>etag</snippet></ROW><ROW><id>13298129</id><snippet>etag</snippet></ROW><ROW><id>13298129</id><snippet>parse()</snippet></ROW><ROW><id>13298129</id><snippet>modified</snippet></ROW><ROW><id>13298129</id><snippet>d2=feedparser.parse(feed,modified)
</snippet></ROW><ROW><id>13298129</id><snippet>d2=feedparser.parse(feed,modified=modified)
</snippet></ROW><ROW><id>13298129</id><snippet>etag</snippet></ROW><ROW><id>13298129</id><snippet>modified</snippet></ROW><ROW><id>13298129</id><snippet>parse()</snippet></ROW><ROW><id>13298129</id><snippet>import feedparser
rsslist=["http://skottieyoung.tumblr.com/rss", "http://mrjakeparker.com/feed/"]

def feed_modified_date(feed):
    # this is the last-modified value in the response header
    # do not confuse this with the time that is in each feed as the server
    # may be using a different timezone for last-resposne headers than it 
    # uses for the publish date

    modified = feed.get('modified')
    if modified is not None:
        return modified

    return None

def max_entry_date(feed):
    entry_pub_dates = (e.get('published_parsed') for e in feed.entries)
    entry_pub_dates = tuple(e for e in entry_pub_dates if e is not None)

    if len(entry_pub_dates) &gt; 0:
        return max(entry_pub_dates)    

    return None

def entries_with_dates_after(feed, date):
    response = []

    for entry in feed.entries:
        if entry.get('published_parsed') &gt; date:
            response.append(entry)

    return response            

for feed_url in rsslist:
    print('--------%s-------' % feed_url)
    d = feedparser.parse(feed_url)
    print('feed length %i' % len(d.entries))

    if len(d.entries) &gt; 0:
        etag = d.feed.get('etag', None)
        modified = feed_modified_date(d)
        print('modified at %s' % modified)

        d2 = feedparser.parse(feed_url, etag=etag, modified=modified)
        print('second feed length %i' % len(d2.entries))
        if len(d2.entries) &gt; 0:
            print("server does not support etags or there are new entries")
            # perhaps the server does not support etags or last-modified
            # filter entries ourself

            prev_max_date = max_entry_date(d)

            entries = entries_with_dates_after(d2, prev_max_date)

            print('%i new entries' % len(entries))
        else:
            print('there are no entries')
</snippet></ROW><ROW><id>13298129</id><snippet>--------http://skottieyoung.tumblr.com/rss-------
feed length 20
modified at None
second feed length 20
server does not support etags or there are new entries
0 new entries
--------http://mrjakeparker.com/feed/-------
feed length 10
modified at Wed, 07 Nov 2012 19:27:48 GMT
second feed length 0
there are no entries
</snippet></ROW><ROW><id>13298240</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>13298240</id><snippet>json</snippet></ROW><ROW><id>13298240</id><snippet> jsonValue = '{%s}' % (textValue.split('{', 1)[1].rsplit('}', 1)[0],)
 value = json.loads(jsonValue)
</snippet></ROW><ROW><id>13298240</id><snippet>.split()</snippet></ROW><ROW><id>13298240</id><snippet>.rsplit()</snippet></ROW><ROW><id>13298240</id><snippet>{</snippet></ROW><ROW><id>13298240</id><snippet>}</snippet></ROW><ROW><id>13298240</id><snippet>json.loads()</snippet></ROW><ROW><id>13298240</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; textValue = '''
... var page_data = {
...    "default_sku" : "SKU12345",
...    "get_together" : {
...       "imageLargeURL" : "http://null.null/pictures/large.jpg",
...       "URL" : "http://null.null/index.tmpl",
...       "name" : "Paints",
...       "description" : "Here is a description and it works pretty well",
...       "canFavorite" : 1,
...       "id" : 1234,
...       "type" : 2,
...       "category" : "faded",
...       "imageThumbnailURL" : "http://null.null/small9.jpg"
...    }
... };
... '''
&gt;&gt;&gt; jsonValue = '{%s}' % (textValue.split('{', 1)[1].rsplit('}', 1)[0],)
&gt;&gt;&gt; value = json.loads(jsonValue)
&gt;&gt;&gt; value
{u'default_sku': u'SKU12345', u'get_together': {u'category': u'faded', u'canFavorite': 1, u'name': u'Paints', u'URL': u'http://null.null/index.tmpl', u'imageThumbnailURL': u'http://null.null/small9.jpg', u'imageLargeURL': u'http://null.null/pictures/large.jpg', u'type': 2, u'id': 1234, u'description': u'Here is a description and it works pretty well'}}
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(value)
{u'default_sku': u'SKU12345',
 u'get_together': {u'URL': u'http://null.null/index.tmpl',
                   u'canFavorite': 1,
                   u'category': u'faded',
                   u'description': u'Here is a description and it works pretty well',
                   u'id': 1234,
                   u'imageLargeURL': u'http://null.null/pictures/large.jpg',
                   u'imageThumbnailURL': u'http://null.null/small9.jpg',
                   u'name': u'Paints',
                   u'type': 2}}
</snippet></ROW><ROW><id>13298512</id><snippet>import os
from os.path import join, getsize

file_list = []
for root, dirs, files in os.walk('Test'):
    file_list.extend( join(root,f) for f in files )
    #May be *slightly* faster at the expense of a little readability 
    # and a little memory
    # file_list.extend( [ join(root,f) for f in files ] ) 


print (sorted(file_list, key=getsize))
</snippet></ROW><ROW><id>13298512</id><snippet>dirs</snippet></ROW><ROW><id>13298512</id><snippet>getsize</snippet></ROW><ROW><id>13298538</id><snippet>import subprocess, Image

fps, duration = 24, 100
for i in range(fps * duration):
    im = Image.new("RGB", (300, 300), (i, 1, 1))
    im.save("%07d.jpg" % i)
subprocess.call(["ffmpeg","-y","-r",str(fps),"-i", "%07d.jpg","-vcodec","mpeg4", "-qscale","5", "-r", str(fps), "video.avi"])
</snippet></ROW><ROW><id>13298538</id><snippet>import Image
from subprocess import Popen, PIPE

fps, duration = 24, 100
p = Popen(['ffmpeg', '-y', '-f', 'image2pipe', '-vcodec', 'mjpeg', '-r', '24', '-i', '-', '-vcodec', 'mpeg4', '-qscale', '5', '-r', '24', 'video.avi'], stdin=PIPE)
for i in range(fps * duration):
    im = Image.new("RGB", (300, 300), (i, 1, 1))
    im.save(p.stdin, 'JPEG')
p.stdin.close()
p.wait()
</snippet></ROW><ROW><id>13298538</id><snippet>12.9062321186
12.8965060711
12.9360799789
</snippet></ROW><ROW><id>13298538</id><snippet>8.67797684669
8.57139396667
8.38926696777
</snippet></ROW><ROW><id>13298804</id><snippet>self.event</snippet></ROW><ROW><id>13298804</id><snippet>class MainHandler(tornado.web.RequestHandler):
    event = None
    def get(self):
        self.render('main.html')

    def post(self):
        MainHandler.event = self.get_argument('event')
        print event
        return event
</snippet></ROW><ROW><id>13298804</id><snippet>from module1 import MainHandler
print MainHandler.event
</snippet></ROW><ROW><id>13298933</id><snippet>strip</snippet></ROW><ROW><id>13298933</id><snippet>replace</snippet></ROW><ROW><id>13298933</id><snippet>str2 = str.replace("\n", "")
</snippet></ROW><ROW><id>13299006</id><snippet>!omap setting1:
  name: [item,item]
  name1: text
!omap anothersetting2:
  name: [item,item]
  !omap sub_setting:
      name :[item,item]
</snippet></ROW><ROW><id>13299006</id><snippet>yaml</snippet></ROW><ROW><id>13299006</id><snippet>def omap_constructor(loader, node):
    return loader.construct_pairs(node)
yaml.add_constructor(u'!omap', omap_constructor)
</snippet></ROW><ROW><id>13299006</id><snippet>{'anothersetting2': {'name': ['item', 'item'],
  'sub_setting': 'name :[item,item]'},
 'setting1': {'name': ['item', 'item'], 'name1': 'text'}}
</snippet></ROW><ROW><id>13299006</id><snippet>{('anothersetting2', (('name', ['item', 'item']),
  ('sub_setting', ('name, [item,item]'),),
 ('setting1', (('name', ['item', 'item']), ('name1', 'text'))
</snippet></ROW><ROW><id>13299006</id><snippet>tuple</snippet></ROW><ROW><id>13299006</id><snippet>tuple</snippet></ROW><ROW><id>13299006</id><snippet>OrderedDict</snippet></ROW><ROW><id>13299006</id><snippet>OrdereredDict</snippet></ROW><ROW><id>13299006</id><snippet>!omap</snippet></ROW><ROW><id>13299006</id><snippet>OrderedDict</snippet></ROW><ROW><id>13299006</id><snippet>dict</snippet></ROW><ROW><id>13299083</id><snippet># Gevent monkeypath
from gevent import monkey
monkey.patch_all()

# Gevent imports
import gevent

# Python immports
import functools

# Tornado imports
import tornado.ioloop
import tornado.web
import tornado.httpserver

# Request imports
import requests


# Asynchronous gevent decorator
def gasync(func):
    @tornado.web.asynchronous
    @functools.wraps(func)
    def f(self, *args, **kwargs):
        #self._auto_finish = False
        return gevent.spawn(func, self, *args, **kwargs)
    return f


# Constants
URL_TO_FETCH = 'http://google.co.uk/'

# Global
I = 0


class MainHandler(tornado.web.RequestHandler):
    @gasync
    def get(self):
        global I
        r = requests.get(URL_TO_FETCH)
        I += 1
        print('Got page %d (length=%d)' % (I, len(r.content)))
        self.write("Done")
        self.finish()


# Our URL Mappings
handlers = [
   (r"/", MainHandler),
]


def main():
    # Setup app and HTTP server
    application = tornado.web.Application(handlers)
    http_server = tornado.httpserver.HTTPServer(application)
    http_server.listen(9998)

    # Start ioloop
    tornado.ioloop.IOLoop.instance().start()


if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>13299083</id><snippet>$ ab -n 100 -c 100 http://localhost:9998/
</snippet></ROW><ROW><id>13299083</id><snippet>This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking localhost (be patient).....done


Server Software:        TornadoServer/2.3
Server Hostname:        localhost
Server Port:            9998

Document Path:          /
Document Length:        4 bytes

Concurrency Level:      100
Time taken for tests:   0.754 seconds
Complete requests:      100
Failed requests:        0
Write errors:           0
Total transferred:      15900 bytes
HTML transferred:       400 bytes
Requests per second:    132.67 [#/sec] (mean)
Time per request:       753.773 [ms] (mean)
Time per request:       7.538 [ms] (mean, across all concurrent requests)
Transfer rate:          20.60 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        2    4   0.8      4       5
Processing:   379  572 104.4    593     748
Waiting:      379  572 104.4    593     748
Total:        383  576 104.3    596     752

Percentage of the requests served within a certain time (ms)
  50%    596
  66%    640
  75%    672
  80%    679
  90%    707
  95%    722
  98%    735
  99%    752
 100%    752 (longest request)
</snippet></ROW><ROW><id>13299083</id><snippet>total_time = max(all_individual_times) + n*some_overhead
</snippet></ROW><ROW><id>13299134</id><snippet>Axes.set_xticklabels</snippet></ROW><ROW><id>13299134</id><snippet>plt.gca().set_xticklabels(\
    ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']);
</snippet></ROW><ROW><id>13299197</id><snippet>Chart</snippet></ROW><ROW><id>13299197</id><snippet>Location</snippet></ROW><ROW><id>13299197</id><snippet>Where</snippet></ROW><ROW><id>13299197</id><snippet>xlLocationAsNewSheet</snippet></ROW><ROW><id>13299197</id><snippet>xlLocationAsObject</snippet></ROW><ROW><id>13299197</id><snippet>xlLocationAutomatic</snippet></ROW><ROW><id>13299197</id><snippet>Name</snippet></ROW><ROW><id>13299197</id><snippet>xlLocation = {"AsNewSheet": 1,
              "AsObject": 2,
              "Automatic": 3 }
chart.Location(xlLocation["AsObject"], xlSheet.Name)
</snippet></ROW><ROW><id>13299197</id><snippet>chart.Location(2, xlSheet.Name)
</snippet></ROW><ROW><id>13299279</id><snippet>numpy.linalg.eig</snippet></ROW><ROW><id>13299367</id><snippet>time.time()</snippet></ROW><ROW><id>13299408</id><snippet>range(2)</snippet></ROW><ROW><id>13299408</id><snippet>i, j</snippet></ROW><ROW><id>13299408</id><snippet>for i, j in [0, 1], [0, 1]:
    print i, j
</snippet></ROW><ROW><id>13299408</id><snippet>0 1
0 1
</snippet></ROW><ROW><id>13299408</id><snippet>range(3)</snippet></ROW><ROW><id>13299408</id><snippet>range(3)</snippet></ROW><ROW><id>13299408</id><snippet>two loop variables</snippet></ROW><ROW><id>13299408</id><snippet>for (i, j) in [[0, 1, 2]]:
    print i, j
</snippet></ROW><ROW><id>13299408</id><snippet>zip</snippet></ROW><ROW><id>13299408</id><snippet>&gt;&gt;&gt; for (i, j) in (zip(range(2), range(3))):
    print i, j


0 0
1 1
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13299408</id><snippet>zip</snippet></ROW><ROW><id>13299408</id><snippet>2</snippet></ROW><ROW><id>13299408</id><snippet>&gt;&gt;&gt; zip(range(2), range(3))
[(0, 0), (1, 1)]
</snippet></ROW><ROW><id>13299408</id><snippet>zip</snippet></ROW><ROW><id>13299531</id><snippet>open()</snippet></ROW><ROW><id>13299531</id><snippet>readline()</snippet></ROW><ROW><id>13299531</id><snippet>int()</snippet></ROW><ROW><id>13299531</id><snippet>def read_coords(file_handle):
    try:
        nrecords = int(file_handle.readline())
    except ValueError:
        return False
    return [file_handle.readline() for i in range(nrecords)]

coord_sets = []
with open("some.txt") as f:
   coords = read_coords(f)
   while coords != False:
       coord_sets.append(coords)
       coords = read_coords(f)

print "coord_sets =",coord_sets
</snippet></ROW><ROW><id>13299605</id><snippet>def censor(fileName):
    output_content = ""
    with open(fileName, "r") as input_file:
        with open("censored.txt", "w") as output_file:
            output_content = ""
            for line in input_file:
                output_content += ' '.join([word if len(word) != 4 else "****" for word in line.split(" ")])
            output_file.write(output_content)
</snippet></ROW><ROW><id>13299611</id><snippet>STDOUT</snippet></ROW><ROW><id>13299611</id><snippet>STDERR</snippet></ROW><ROW><id>13299638</id><snippet>@asynchronous
@gen.engine
def get(self):
    response = yield gen.Task(self.dosomething, 'argument')
</snippet></ROW><ROW><id>13299638</id><snippet>response = yield non_blocking_func(**kwargs)
</snippet></ROW><ROW><id>13299949</id><snippet>True</snippet></ROW><ROW><id>13299949</id><snippet>enumerated_set</snippet></ROW><ROW><id>13299949</id><snippet>In [9]: enumerated_set = enumerate(['tic','tac','toe'])

In [10]: enumerated_set.next()
Out[10]: (0, 'tic')

In [11]: enumerated_set.next()
Out[11]: (1, 'tac')

In [12]: enumerated_set.next()
Out[12]: (2, 'toe')

In [13]: enumerated_set.next()
---------------------------------------------------------------------------
StopIteration                             Traceback (most recent call last)
/usr/local/&lt;ipython-input-13-7b0a413e4250&gt; in &lt;module&gt;()
----&gt; 1 enumerated_set.next()

StopIteration: 
</snippet></ROW><ROW><id>13300128</id><snippet>msg</snippet></ROW><ROW><id>13300128</id><snippet>sendmail</snippet></ROW><ROW><id>13300128</id><snippet># Add the From: and To: headers at the start!
msg = ("From: %s\r\nTo: %s\r\n\r\n"
       % (fromaddr, ", ".join(toaddrs)))
</snippet></ROW><ROW><id>13300128</id><snippet>\r\n</snippet></ROW><ROW><id>13300128</id><snippet>\r\n\r\n</snippet></ROW><ROW><id>13300128</id><snippet>\n</snippet></ROW><ROW><id>13300128</id><snippet>\r\n</snippet></ROW><ROW><id>13300128</id><snippet>From:</snippet></ROW><ROW><id>13300128</id><snippet>To:</snippet></ROW><ROW><id>13300128</id><snippet>sendmail</snippet></ROW><ROW><id>13300128</id><snippet>\r\n</snippet></ROW><ROW><id>13300128</id><snippet>\r\n.\r\n</snippet></ROW><ROW><id>13300145</id><snippet>with open('filename') as fp:
    data = [[int(c) for c in line.strip()] for line in fp]
</snippet></ROW><ROW><id>13300246</id><snippet>[f for f in os.listdir('.') if os.path.isdir(f)]
</snippet></ROW><ROW><id>13300253</id><snippet>IMAGE_MAX_SIZE = 800, 800
class Picture(models.Model):
    ...
    image = models.ImageField(upload_to='images/%Y/%m/%d/')

    # img is a InMemoryUploadedFile, received from a post upload
    def set_image(self, img):
        self.image = img
        self.__scale_image(self.image, IMAGE_MAX_SIZE)

    def __scale_image(self, image, size):
        image.file.seek(0) # just in case
        img = Image.open(StringIO(image.file.read()))
        img.thumbnail(size, Image.ANTIALIAS)
        imageString = StringIO()
        img.save(imageString, img.format)

        # for some reason content_type is e.g. 'images/jpeg' instead of 'image/jpeg'
        c_type = image.file.content_type.replace('images', 'image')
        imf = InMemoryUploadedFile(imageString, None, image.name, c_type, imageString.len, None)
        imf.seek(0)
        image.save(
                image.name,
                imf,
                save=False
            )
</snippet></ROW><ROW><id>13300512</id><snippet>'Interrupted system call'</snippet></ROW><ROW><id>13300839</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(3)
&gt;&gt;&gt; a
array([0, 1, 2])
&gt;&gt;&gt; a.dtype
dtype('int32')
&gt;&gt;&gt; a[0] = np.nan
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: cannot convert float NaN to integer
</snippet></ROW><ROW><id>13300839</id><snippet>&gt;&gt;&gt; a = np.arange(3.0)
&gt;&gt;&gt; a
array([ 0.,  1.,  2.])
&gt;&gt;&gt; a[a==0]
array([ 0.])
&gt;&gt;&gt; a[a==0] = np.nan
&gt;&gt;&gt; a
array([ nan,   1.,   2.])
</snippet></ROW><ROW><id>13300839</id><snippet>astype</snippet></ROW><ROW><id>13300839</id><snippet>&gt;&gt;&gt; a = a.astype(float)
&gt;&gt;&gt; a
array([ 0.,  1.,  2.])
&gt;&gt;&gt; a.dtype
dtype('float64')
</snippet></ROW><ROW><id>13301033</id><snippet>from operator import itemgetter
min(enumerate(a), key=itemgetter(1))[0] 
</snippet></ROW><ROW><id>13301106</id><snippet>nextafter(x1, x2[, out])

Return the next representable floating-point value after x1 **in the direction
of x2 element-wise**.
</snippet></ROW><ROW><id>13301106</id><snippet>In [12]: a = 1.15898324042702949299155079643242061138153076171875

In [13]: a
Out[13]: 1.1589832404270295

In [14]: numpy.nextafter(a, 0)
Out[14]: 1.1589832404270293

In [15]: numpy.nextafter(a, 1)
Out[15]: 1.1589832404270293

In [16]: numpy.nextafter(a, 1.16)
Out[16]: 1.1589832404270297

In [17]: numpy.nextafter(a, 2)
Out[17]: 1.1589832404270297
</snippet></ROW><ROW><id>13301220</id><snippet>sum</snippet></ROW><ROW><id>13301220</id><snippet>sum_of_squares=sum([pow(prefs[person1][item]-prefs[person2][item],2)
                      for item in si])
</snippet></ROW><ROW><id>13301220</id><snippet>[pow(prefs[person1][item]-prefs[person2][item],2) for item in si]
</snippet></ROW><ROW><id>13301220</id><snippet>for</snippet></ROW><ROW><id>13301220</id><snippet>result_list = [] # Note that this is implicitly created
for item in si:
    result_list.append(pow(prefs[person1][item]-prefs[person2][item], 2))
</snippet></ROW><ROW><id>13301220</id><snippet>pow</snippet></ROW><ROW><id>13301220</id><snippet>item</snippet></ROW><ROW><id>13301220</id><snippet>si</snippet></ROW><ROW><id>13301220</id><snippet>result_list</snippet></ROW><ROW><id>13301220</id><snippet>[1, 2, 3, 4]</snippet></ROW><ROW><id>13301220</id><snippet>sum</snippet></ROW><ROW><id>13301220</id><snippet>sum</snippet></ROW><ROW><id>13301220</id><snippet>for</snippet></ROW><ROW><id>13301220</id><snippet>sum</snippet></ROW><ROW><id>13301220</id><snippet>start</snippet></ROW><ROW><id>13301277</id><snippet>np.isnan</snippet></ROW><ROW><id>13301277</id><snippet>A[np.isnan(A)] = 0
</snippet></ROW><ROW><id>13301277</id><snippet>nan</snippet></ROW><ROW><id>13301277</id><snippet>np.isinf</snippet></ROW><ROW><id>13301277</id><snippet>np.isfinite</snippet></ROW><ROW><id>13301277</id><snippet>np.isposinf</snippet></ROW><ROW><id>13301277</id><snippet>np.isneginf</snippet></ROW><ROW><id>13301354</id><snippet>names = [item[0] for item in months]
numbers = [item[1] for item in months]
</snippet></ROW><ROW><id>13301354</id><snippet>for</snippet></ROW><ROW><id>13301354</id><snippet>names = []
numbers = []

for item in months:
    names.append(item[0])
    numbers.append(item[1])
</snippet></ROW><ROW><id>13301357</id><snippet>import webbrowser
webbrowser.open("http://www.stackoverflow.com/")
</snippet></ROW><ROW><id>13301357</id><snippet>&gt;&gt;&gt; prompt</snippet></ROW><ROW><id>13301548</id><snippet>'android:text'</snippet></ROW><ROW><id>13301548</id><snippet>'{http://schemas.android.com/apk/res/android}text'</snippet></ROW><ROW><id>13301548</id><snippet>In [23]: s = '''&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:layout_width="fill_parent"
              android:layout_height="fill_parent"&gt;
    &lt;TextView android:id="@+id/version_label"
              android:layout_marginLeft="5sp"
              android:layout_width="fill_parent"
              android:layout_height="wrap_content"
              android:text="version"/&gt; &lt;/LinearLayout&gt;'''

In [24]: tree = etree.XML(s)                                          


In [25]: c = tree.getchildren()[0]

In [26]: c.items()
Out[26]:  [('{http://schemas.android.com/apk/res/android}id', '@+id/version_label'),  ('{http://schemas.android.com/apk/res/android}layout_marginLeft', '5sp'),  ('{http://schemas.android.com/apk/res/android}layout_width', 'fill_parent'),  ('{http://schemas.android.com/apk/res/android}layout_height', 'wrap_content'),  ('{http://schemas.android.com/apk/res/android}text', 'version')]
</snippet></ROW><ROW><id>13301661</id><snippet>def stop_elegantly(self):
    with self.__signal_lock:
        self.__stop_signal = True
</snippet></ROW><ROW><id>13301661</id><snippet>stop()</snippet></ROW><ROW><id>13301661</id><snippet>threading.Thread</snippet></ROW><ROW><id>13301683</id><snippet>import speech

while True:
    phrase = speech.input()
    speech.say("You said %s" % phrase)
    if phrase == "turn off":
        break
</snippet></ROW><ROW><id>13301683</id><snippet>from dragonfly.all import Grammar, CompoundRule

# Voice command rule combining spoken form and recognition processing.
class ExampleRule(CompoundRule):
    spec = "do something computer"                  # Spoken form of command.
    def _process_recognition(self, node, extras):   # Callback when command is spoken.
        print "Voice command spoken."

# Create a grammar which contains and loads the command rule.
grammar = Grammar("example grammar")                # Create a grammar to contain the command rule.
grammar.add_rule(ExampleRule())                     # Add the command rule to the grammar.
grammar.load()      
</snippet></ROW><ROW><id>13301739</id><snippet>MyResource</snippet></ROW><ROW><id>13301739</id><snippet>full=True</snippet></ROW><ROW><id>13301739</id><snippet>MyResource</snippet></ROW><ROW><id>13301739</id><snippet>class RelatedResource(ModelResource):
    class Meta:
        ...


class MyResource(ModelResource):
    related = fields.ForeignKey(RelatedResource, full=True)

    class Meta:
        ...
</snippet></ROW><ROW><id>13301739</id><snippet>?related__field=value</snippet></ROW><ROW><id>13301739</id><snippet>MyResource</snippet></ROW><ROW><id>13301739</id><snippet>__unicode__</snippet></ROW><ROW><id>13301739</id><snippet>class MyResource(ModelResource):    
    city = fields.CharField(attribute="city")

    class Meta:
        ...
</snippet></ROW><ROW><id>13301739</id><snippet>MyData</snippet></ROW><ROW><id>13301781</id><snippet>isEven</snippet></ROW><ROW><id>13301781</id><snippet>n &gt;= 0</snippet></ROW><ROW><id>13301781</id><snippet>def isEven(n):
    if n == 0:
        # Number is even
    elif n == 1:
        # Number is odd
    else:
        # Call the function again, but with a different n
</snippet></ROW><ROW><id>13301801</id><snippet>queryset = models.District.objects.active() 
</snippet></ROW><ROW><id>13301801</id><snippet>queryset = self.model.District.objects.active()
</snippet></ROW><ROW><id>13301801</id><snippet>res_name</snippet></ROW><ROW><id>13301801</id><snippet>class Meta</snippet></ROW><ROW><id>13301801</id><snippet>Meta</snippet></ROW><ROW><id>13301801</id><snippet>Meta</snippet></ROW><ROW><id>13301801</id><snippet>Meta</snippet></ROW><ROW><id>13301932</id><snippet>user32.FindWindowExW</snippet></ROW><ROW><id>13301932</id><snippet>user32.FindWindowExA</snippet></ROW><ROW><id>13301932</id><snippet>HWND WINAPI FindWindowEx(
  _In_opt_  HWND hwndParent,
  _In_opt_  HWND hwndChildAfter,
  _In_opt_  LPCTSTR lpszClass,
  _In_opt_  LPCTSTR lpszWindow
);
</snippet></ROW><ROW><id>13301932</id><snippet>FindWindowEx = ctypes.windll.user32.FindWindowExW
FindWindowEx.argtypes = [
    wintypes.HWND,
    wintypes.HWND,
    wintypes.LPCWSTR,
    wintypes.LPCWSTR,
]
FindWindowEx.restype = wintypes.HWND
</snippet></ROW><ROW><id>13301932</id><snippet>&gt;&gt;&gt; FindWindow = ctypes.windll.user32.FindWindowW
&gt;&gt;&gt; FindWindow.argtypes = [wintypes.LPCWSTR, wintypes.LPCWSTR]
&gt;&gt;&gt; FindWindow.restype = wintypes.HWND
&gt;&gt;&gt; FindWindow('Shell_TrayWnd', '')
65670L
</snippet></ROW><ROW><id>13301946</id><snippet>globals</snippet></ROW><ROW><id>13301946</id><snippet>x = 0
testScoreNumber = 1
while x &lt; 5:
    getNumber_0_100(testScoreNumber)
    x += 1
    testScoreNumber += 1
</snippet></ROW><ROW><id>13301946</id><snippet>results = []
for x in range(5):
    results.append( getNumber_0_100(x+1) )
</snippet></ROW><ROW><id>13301946</id><snippet>results = [ getNumber_0_100(x+1) for x in range(5) ]
</snippet></ROW><ROW><id>13301946</id><snippet>avg = get_ave(results[0],results[1],...)
print(avg)
</snippet></ROW><ROW><id>13301946</id><snippet>avg = get_ave(*results)
print(avg)
</snippet></ROW><ROW><id>13302057</id><snippet>x = numpy.concatenate((x1, x2))</snippet></ROW><ROW><id>13302057</id><snippet>loadtxt</snippet></ROW><ROW><id>13302057</id><snippet>fname</snippet></ROW><ROW><id>13302057</id><snippet>itertools</snippet></ROW><ROW><id>13302057</id><snippet>with open(myfile1, 'rb') as f1, open(myfile2, 'rb') as f2:
  x, y, rho, phi = numpy.loadtxt(itertools.chain(f1, f2))
</snippet></ROW><ROW><id>13302057</id><snippet>unpack=True</snippet></ROW><ROW><id>13302057</id><snippet>unpack</snippet></ROW><ROW><id>13302057</id><snippet>gzip.GzipFile</snippet></ROW><ROW><id>13302057</id><snippet>bz2.BZ2File</snippet></ROW><ROW><id>13302057</id><snippet>open</snippet></ROW><ROW><id>13302057</id><snippet>numpy</snippet></ROW><ROW><id>13302057</id><snippet>open_compressed</snippet></ROW><ROW><id>13302057</id><snippet>numpy.concatenate</snippet></ROW><ROW><id>13302061</id><snippet>play</snippet></ROW><ROW><id>13302061</id><snippet>solitaire</snippet></ROW><ROW><id>13302061</id><snippet>actual</snippet></ROW><ROW><id>13302061</id><snippet> actual = solitaire.play()
</snippet></ROW><ROW><id>13302061</id><snippet>pile</snippet></ROW><ROW><id>13302061</id><snippet>play</snippet></ROW><ROW><id>13302061</id><snippet>expected</snippet></ROW><ROW><id>13302061</id><snippet>solitaire</snippet></ROW><ROW><id>13302061</id><snippet> python test.py
</snippet></ROW><ROW><id>13302061</id><snippet>play</snippet></ROW><ROW><id>13302061</id><snippet>pile</snippet></ROW><ROW><id>13302061</id><snippet>play</snippet></ROW><ROW><id>13302061</id><snippet>actual = solitaire.play()</snippet></ROW><ROW><id>13302061</id><snippet>play</snippet></ROW><ROW><id>13302061</id><snippet>Test</snippet></ROW><ROW><id>13302061</id><snippet>play</snippet></ROW><ROW><id>13302061</id><snippet>Test</snippet></ROW><ROW><id>13302061</id><snippet>import solitaire</snippet></ROW><ROW><id>13302061</id><snippet>actual = solitaire.play()</snippet></ROW><ROW><id>13302061</id><snippet>python test.py</snippet></ROW><ROW><id>13302108</id><snippet> url(r'^links/(?P&lt;object_id&gt;\d+)/(?P&lt;direction&gt;up|down|clear)vote/?$',                                                                                                                
     vote_on_object,                                                                                                                     
     dict(                                                                                                                               
         model=Movie,                                                                                                                     
         template_object_name='link',                                                                                                    
         template_name='movie/link_confirm_vote.html',                                                                                    
         allow_xmlhttprequest=True,                                                                                                      
         ),                                                                                                                              
     name="link_vote",)                                                                                                                  
</snippet></ROW><ROW><id>13302207</id><snippet>&gt;&gt;&gt; s = "a b c d"
&gt;&gt;&gt; w = s.split()
&gt;&gt;&gt; zip(w, w[1:])
[('a', 'b'), ('b', 'c'), ('c', 'd')]
</snippet></ROW><ROW><id>13302207</id><snippet>for</snippet></ROW><ROW><id>13302207</id><snippet>append</snippet></ROW><ROW><id>13302207</id><snippet>zip()</snippet></ROW><ROW><id>13302207</id><snippet>&gt;&gt;&gt; res = []
&gt;&gt;&gt; for i in range(1, len(w)):
...     res.append((w[i-1], w[i]))
... 
&gt;&gt;&gt; res
[('a', 'b'), ('b', 'c'), ('c', 'd')]
</snippet></ROW><ROW><id>13302262</id><snippet>return repr(entries)</snippet></ROW><ROW><id>13302262</id><snippet>TypeError: 'list' object is not callable</snippet></ROW><ROW><id>13302419</id><snippet>&gt;&gt;&gt; l = [[11, 2, 3, 5], [5, 3, 74, 1, 90]]
&gt;&gt;&gt; [[str(j) for j in i] for i in l]
[['11', '2', '3', '5'], ['5', '3', '74', '1', '90']]
</snippet></ROW><ROW><id>13302540</id><snippet>S</snippet></ROW><ROW><id>13302540</id><snippet>s.index</snippet></ROW><ROW><id>13302540</id><snippet>O(N)</snippet></ROW><ROW><id>13302540</id><snippet>O(N**2)</snippet></ROW><ROW><id>13302540</id><snippet>O(N)</snippet></ROW><ROW><id>13302540</id><snippet># initialise the whole list with some value
r = [-1]*N

for j, s_j in enumerate(s):
    r[s_j] = j

# if any element of r is still -1 then you know it did not appear in s
</snippet></ROW><ROW><id>13302658</id><snippet>get_list</snippet></ROW><ROW><id>13302658</id><snippet>import json
from django.http import HttpResponse

...

class MyResource(ModelResource):

    ...

    def get_list(self, request, **kwargs):
        resp = super(MyResource, self).get_list(request, **kwargs)

        data = json.loads(resp.content)

        data['myfields'] = MyDataFields

        data = json.dumps(data)

        return HttpResponse(data, mimetype='application/json', status=200)
</snippet></ROW><ROW><id>13302726</id><snippet>class Worker(QThread):

    alterTable = Signal(dict)

    def __init__(self, parent=None):
        ....
        self.alterTable.emit(parameters)


class GUI(QMainWindow):

    def __init__(self, parent=None):
        WorkerModule.Worker().alterTable.connect(self.myMethod)
</snippet></ROW><ROW><id>13302976</id><snippet>defaultdict</snippet></ROW><ROW><id>13302976</id><snippet>import csv
from collections import defaultdict

d = {100002: "['Apple', 'M', 'R', '500001', 'Fruit', '90']", 100004: "['Banana', 'M', 'Y', '500001', 'Fruit', '75']"}
dd = defaultdict(lambda: defaultdict(int))
with open('test.csv') as fin:
    csvin = csv.reader(fin)
    for row in csvin:
        dd[int(row[0])][row[1]] += 1

for key in (key for key in dd if key in d):
    counts = [0] * 4
    for idx, val in dd[key].iteritems():
        counts[int(idx) - 1] = int(val)
    print key, d[key], counts

# 100002 ['Apple', 'M', 'R', '500001', 'Fruit', '90'] [2, 0, 2, 0]
# 100004 ['Banana', 'M', 'Y', '500001', 'Fruit', '75'] [0, 1, 2, 0]
</snippet></ROW><ROW><id>13302981</id><snippet>__dict__</snippet></ROW><ROW><id>13302981</id><snippet>__conf__</snippet></ROW><ROW><id>13302981</id><snippet>__init__()</snippet></ROW><ROW><id>13302981</id><snippet>dir()</snippet></ROW><ROW><id>13302981</id><snippet>a</snippet></ROW><ROW><id>13302981</id><snippet>b</snippet></ROW><ROW><id>13302981</id><snippet>Test</snippet></ROW><ROW><id>13302981</id><snippet>__init__</snippet></ROW><ROW><id>13302981</id><snippet>Base</snippet></ROW><ROW><id>13302981</id><snippet>__dict__</snippet></ROW><ROW><id>13302981</id><snippet>dir()</snippet></ROW><ROW><id>13302994</id><snippet>endspaceless</snippet></ROW><ROW><id>13302994</id><snippet>{% endspaceless %
    &lt;li id="tab_first"&gt;
        &lt;a href="#"&gt;First Link&lt;/a&gt;
    &lt;/li&gt;
}&lt;/ul&gt;
</snippet></ROW><ROW><id>13302994</id><snippet>{% endspaceless %}
    &lt;li id="tab_first"&gt;
        &lt;a href="#"&gt;First Link&lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt;
</snippet></ROW><ROW><id>13303121</id><snippet>getattr(test, a_string)
</snippet></ROW><ROW><id>13303334</id><snippet>plt.figure(1)
plt.hist(trials, bins=2, align="mid",
         weights=np.zeros_like(trials) + 1. / len(trials))


# ------------------------------
# New lines to add tick marks as requested
tick_locs = [0.25, 0.75]
tick_lbls = ['0','1']
plt.xticks(tick_locs, tick_lbls)
# ------------------------------

plt.ylim(0,1.0)
plt.title("Bernoulli Distribution with p = " + str(p))
plt.xlabel("Outcome")
plt.ylabel("Probability")    
plt.show()
</snippet></ROW><ROW><id>13303607</id><snippet>list(set(list1)-set(list2))
</snippet></ROW><ROW><id>13303715</id><snippet>python  test.py
</snippet></ROW><ROW><id>13303773</id><snippet>import urllib2,cookielib

site= "http://www.nseindia.com/live_market/dynaContent/live_watch/get_quote/getHistoricalData.jsp?symbol=JPASSOCIAT&amp;fromDate=1-JAN-2012&amp;toDate=1-AUG-2012&amp;datePeriod=unselected&amp;hiddDwnld=true"
hdr = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11',
       'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
       'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',
       'Accept-Encoding': 'none',
       'Accept-Language': 'en-US,en;q=0.8',
       'Connection': 'keep-alive'}

req = urllib2.Request(site, headers=hdr)

try:
    page = urllib2.urlopen(req)
except urllib2.HTTPError, e:
    print e.fp.read()

content = page.read()
print content
</snippet></ROW><ROW><id>13303773</id><snippet>'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
</snippet></ROW><ROW><id>13304024</id><snippet>return HttpResponse(data, mimetype='application/json', status=200)
return list
</snippet></ROW><ROW><id>13304024</id><snippet>class Mother(object):
    def makeList(self)
        data['list'] = [2,3,4,5]
        data = json.dumps(data)
        return data

    def getList(self)
        data = self.makeList()
        return HttpResponse(data, mimetype='application/json', status=200)

class Child(Mother)
  def makeList(self)
      my_list = super(Child, self).makeList()
      # do something to it
      return my_list
</snippet></ROW><ROW><id>13304024</id><snippet>makeList</snippet></ROW><ROW><id>13304024</id><snippet>getList</snippet></ROW><ROW><id>13304024</id><snippet>makeList</snippet></ROW><ROW><id>13304024</id><snippet>child.getList()</snippet></ROW><ROW><id>13304024</id><snippet>getList</snippet></ROW><ROW><id>13304222</id><snippet>mylist = ["var"] + [None] * 5
</snippet></ROW><ROW><id>13304222</id><snippet>["var"].extend([None for cnt in range(5)])
</snippet></ROW><ROW><id>13304222</id><snippet>mylist = ["var"]
mylist.extend([None for cnt in range(5)])
</snippet></ROW><ROW><id>13304222</id><snippet>list_2=["var",None for cnt in range(5)]
</snippet></ROW><ROW><id>13304423</id><snippet>class Foo:
</snippet></ROW><ROW><id>13304423</id><snippet>class Foo(object):
</snippet></ROW><ROW><id>13304791</id><snippet>&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; d[1] += 1
&gt;&gt;&gt; d[1]
    1
&gt;&gt;&gt; d[5]
    0
</snippet></ROW><ROW><id>13305164</id><snippet>QPixmap</snippet></ROW><ROW><id>13305164</id><snippet>QByteArray</snippet></ROW><ROW><id>13305164</id><snippet>QBuffer</snippet></ROW><ROW><id>13305164</id><snippet>StringIO</snippet></ROW><ROW><id>13305164</id><snippet>from PyQt4.QtCore import QBuffer, QByteArray, QIODevice
from PyQt4.QtGui import QPixmap, QApplication

import cStringIO as StringIO


if __name__ == '__main__':
    # Create a QApplication so that QPixmaps will work.
    app = QApplication([])

    # Load a PNG into a QPixmap.
    pixmap = QPixmap('c:/in.png')

    # Save QPixmap to QByteArray via QBuffer.
    byte_array = QByteArray()
    buffer = QBuffer(byte_array)
    buffer.open(QIODevice.WriteOnly)
    pixmap.save(buffer, 'PNG')

    # Read QByteArray containing PNG into a StringIO.
    string_io = StringIO.StringIO(byte_array)
    string_io.seek(0)

    # Write the StringIO back to a file to test all is ok.
    with open('c:/out.png', 'wb') as out_file:
        out_file.write(string_io.read())
</snippet></ROW><ROW><id>13305237</id><snippet>INSERT INTO E'my_table'(name, url, id, point_geom, poly_geom) VALUES (E'ST_GeomFromText(''POLYGON(( 52.146542 19.050557, 52.148430 19.045527, 52.149525 19.045831, 52.147400 19.050780, 52.147400 19.050780, 52.146542 19.050557))'',4326)');'
</snippet></ROW><ROW><id>13305237</id><snippet>params = ('POLYGON(( 52.146542 19.050557, 52.148430 19.045527, 52.149525 19.045831, 52.147400 19.050780, 52.147400 19.050780, 52.146542 19.050557))',4326)
escaped_name = name.replace('"",'""')
curs.execute('INSERT INTO "%s"(name, url, id, point_geom, poly_geom) VALUES (ST_GeomFromText(%%s,%%s));' % escaped_name, params)
</snippet></ROW><ROW><id>13305237</id><snippet>INSERT INTO my_table(name, url, id, point_geom, poly_geom) VALUES (ST_GeomFromText(%s,%s));
</snippet></ROW><ROW><id>13305237</id><snippet>%%</snippet></ROW><ROW><id>13305237</id><snippet>%</snippet></ROW><ROW><id>13305237</id><snippet>POLYGON</snippet></ROW><ROW><id>13305237</id><snippet>ST_GeomFromText</snippet></ROW><ROW><id>13305385</id><snippet>import logging
logging.basicConfig(level=logging.DEBUG)
</snippet></ROW><ROW><id>13305609</id><snippet>%</snippet></ROW><ROW><id>13305609</id><snippet>format</snippet></ROW><ROW><id>13305609</id><snippet>def __unicode__(self):
    return u'Unit: {name:s} -- {base.name:s} * {mul:f}'.format(**self.__dict__)
</snippet></ROW><ROW><id>13306136</id><snippet>B</snippet></ROW><ROW><id>13306136</id><snippet>A</snippet></ROW><ROW><id>13306136</id><snippet>&gt;&gt;&gt; from abc import abstractmethod, ABCMeta

&gt;&gt;&gt; class A:
...     __metaclass__=ABCMeta
...     @abstractmethod
...     def a(self):
...         pass

&gt;&gt;&gt; class B:
...     def a(self):
...         return 12

&gt;&gt;&gt; class C(B,A):
...     pass

&gt;&gt;&gt; c = C()
&gt;&gt;&gt; c
&lt;__main__.C object at 0x10e9c40d0&gt;


&gt;&gt;&gt; class D:
...     pass

&gt;&gt;&gt; class E(D, A):
...     pass

&gt;&gt;&gt; e = E()
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
TypeError: Can't instantiate abstract class E with abstract methods a
</snippet></ROW><ROW><id>13306166</id><snippet>import sys
sys.path.append("E:\edX\cs6.00x\week6\ProblemSet6")
</snippet></ROW><ROW><id>13306166</id><snippet>import ps6
</snippet></ROW><ROW><id>13306181</id><snippet>std::complex::real()</snippet></ROW><ROW><id>13306181</id><snippet>  Item&lt;std::complex&lt;double&gt; &gt; &amp;operator+=(Item&lt;std::complex&lt;double&gt; &gt; &amp;rhs)
  {
    val_.real() += rhs().real();
    val_.imag() += rhs().imag();
    return *this;
  }
</snippet></ROW><ROW><id>13306181</id><snippet>val_ += rhs();
</snippet></ROW><ROW><id>13306184</id><snippet>import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.mlab as mlab
import numpy as np

def P(X, Y):
    return mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)      

fig = plt.figure()
ax = fig.gca(projection = '3d')
jet = plt.get_cmap('jet')

x = np.linspace(-2, 2, 60)
y = np.linspace(-2, 2, 60)
X, Y = np.meshgrid(x, y)
Z = P(X, Y)
surf = ax.plot_surface(X, Y, Z, rstride = 1, cstride = 1, cmap = jet, linewidth = 0)
ax.set_zlim3d(0, Z.max())

plt.show()
</snippet></ROW><ROW><id>13306509</id><snippet>login_required</snippet></ROW><ROW><id>13306509</id><snippet>my_view</snippet></ROW><ROW><id>13306549</id><snippet>import doctest
doctest.testfile('test-program.txt', optionflags = doctest.NORMALIZE_WHITESPACE)
</snippet></ROW><ROW><id>13306549</id><snippet>test-program.txt</snippet></ROW><ROW><id>13306549</id><snippet>&gt;&gt;&gt; import my_python_script
&gt;&gt;&gt; whatever_I want_to_test_or_call_goes_here
and_here_I pasted_the_expected_output
</snippet></ROW><ROW><id>13306549</id><snippet>doctest</snippet></ROW><ROW><id>13306549</id><snippet>-v</snippet></ROW><ROW><id>13306549</id><snippet> C:\wherever&gt; python my_python_script test -v
</snippet></ROW><ROW><id>13306599</id><snippet>USERS = {
        1111: {'username': 'iskorum',
                 'points':99999
        },
        2222: {'username': 'sidarcy',
                'points':9444
        },
        3333: {'username': 'joeblogs',
                'points':37
        }
    }</snippet></ROW><ROW><id>13306803</id><snippet>description</snippet></ROW><ROW><id>13306803</id><snippet>type = quality_of_service</snippet></ROW><ROW><id>13306803</id><snippet>messages = """
&lt;alarm-dictionary source="DDD" type="ProxyComponent"&gt;

    &lt;alarm code="402" severity="Alarm" name="DDM_Alarm_402"&gt;
    &lt;message&gt;Database memory usage low threshold crossed&lt;/message&gt;
    &lt;description&gt;dnKinds = database
    type = quality_of_service
    perceived_severity = minor
    probable_cause = thresholdCrossed
    additional_text = Database memory usage low threshold crossed
    &lt;/description&gt;
    &lt;/alarm&gt;

        ...
&lt;/alarm-dictionary&gt;
"""

import xml.etree.ElementTree as ET

# Parse XML
tree = ET.fromstring(messages)

for alarm in tree.getchildren():
    # Get code and severity
    print alarm.get("code")
    print alarm.get("severity")

    # Grab description text
    descr = alarm.find("description").text

    # Parse "thing=other" into dict like {'thing': 'other'}
    info = {}
    for dl in descr.splitlines():
        if len(dl.strip()) &gt; 0:
            key, _, value = dl.partition("=")
            info[key.strip()] = value.strip()
    print info
</snippet></ROW><ROW><id>13306839</id><snippet>counter = len(f.readlines())
</snippet></ROW><ROW><id>13306870</id><snippet>from StringIO import StringIO
import csv

import web

urls = (
  '/retrieve',   'Retrieve',
)

app = web.application(urls, globals())
conn = mdb.connect(user='root', passwd='redhat', db='Merion_dev', host='localhost')

class Retrieve:

    def POST(self):
        cursor = conn.cursor()
        query = "SELECT * FROM adm_facility LIMIT 0,10 "
        cursor.execute(query)
        result = cursor.fetchall() 
        csv_file = StringIO()
        csv_writer = csv.writer(csv_file)
        csv_writer.writerow(['Facility_id', 'Name', 'Account Number', 'Street'])
        for i in result :
            csv_writer.writerow([i[0],i[2],i[3],i[4]])
        web.header('Content-Type','text/csv')
        web.header('Content-disposition', 'attachment; filename=yourfilename.csv')
        return csv_file.getvalue()

if __name__ == "__main__":
    web.internalerror = web.debugerror
    app.run()  
</snippet></ROW><ROW><id>13306887</id><snippet>import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import matplotlib.cbook as cbook
import numpy as np

def fmt(x, y):
    return 'x: {x:0.2f}\ny: {y:0.2f}'.format(x = x, y = y)

class DataCursor(object):
    # http://stackoverflow.com/a/4674445/190597
    """A simple data cursor widget that displays the x,y location of a
    matplotlib artist when it is selected."""
    def __init__(self, artists, x = [], y = [], tolerance = 5, offsets = (-20, 20),
                 formatter = fmt, display_all = False):
        """Create the data cursor and connect it to the relevant figure.
        "artists" is the matplotlib artist or sequence of artists that will be 
            selected. 
        "tolerance" is the radius (in points) that the mouse click must be
            within to select the artist.
        "offsets" is a tuple of (x,y) offsets in points from the selected
            point to the displayed annotation box
        "formatter" is a callback function which takes 2 numeric arguments and
            returns a string
        "display_all" controls whether more than one annotation box will
            be shown if there are multiple axes.  Only one will be shown
            per-axis, regardless. 
        """
        self._points = np.column_stack((x,y))
        self.formatter = formatter
        self.offsets = offsets
        self.display_all = display_all
        if not cbook.iterable(artists):
            artists = [artists]
        self.artists = artists
        self.axes = tuple(set(art.axes for art in self.artists))
        self.figures = tuple(set(ax.figure for ax in self.axes))

        self.annotations = {}
        for ax in self.axes:
            self.annotations[ax] = self.annotate(ax)

        for artist in self.artists:
            artist.set_picker(tolerance)
        for fig in self.figures:
            fig.canvas.mpl_connect('pick_event', self)

    def annotate(self, ax):
        """Draws and hides the annotation box for the given axis "ax"."""
        annotation = ax.annotate(self.formatter, xy = (0, 0), ha = 'right',
                xytext = self.offsets, textcoords = 'offset points', va = 'bottom',
                bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),
                arrowprops = dict(arrowstyle = '-&gt;', connectionstyle = 'arc3,rad=0')
                )
        annotation.set_visible(False)
        return annotation

    def snap(self, x, y):
        """Return the value in self._points closest to (x, y).
        """
        idx = np.nanargmin(((self._points - (x,y))**2).sum(axis = -1))
        return self._points[idx]
    def __call__(self, event):
        """Intended to be called through "mpl_connect"."""
        # Rather than trying to interpolate, just display the clicked coords
        # This will only be called if it's within "tolerance", anyway.
        x, y = event.mouseevent.xdata, event.mouseevent.ydata
        annotation = self.annotations[event.artist.axes]
        if x is not None:
            if not self.display_all:
                # Hide any other annotation boxes...
                for ann in self.annotations.values():
                    ann.set_visible(False)
            # Update the annotation in the current axis..
            x, y = self.snap(x, y)
            annotation.xy = x, y
            annotation.set_text(self.formatter(x, y))
            annotation.set_visible(True)
            event.canvas.draw()

x=[1,2,3,4,5]
y=[6,7,8,9,10]

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
scat = ax.scatter(x, y)
DataCursor(scat, x, y)
plt.show()
</snippet></ROW><ROW><id>13306887</id><snippet>snap</snippet></ROW><ROW><id>13306887</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import scipy.spatial as spatial

def fmt(x, y):
    return 'x: {x:0.2f}\ny: {y:0.2f}'.format(x=x, y=y)

class FollowDotCursor(object):
    """Display the x,y location of the nearest data point."""
    def __init__(self, ax, x, y, tolerance=5, formatter=fmt, offsets=(-20, 20)):
        try:
            x = np.asarray(x, dtype='float')
        except (TypeError, ValueError):
            x = np.asarray(mdates.date2num(x), dtype='float')
        y = np.asarray(y, dtype='float')
        self._points = np.column_stack((x, y))
        self.offsets = offsets
        self.scale = x.ptp()
        self.scale = y.ptp() / self.scale if self.scale else 1
        self.tree = spatial.cKDTree(self.scaled(self._points))
        self.formatter = formatter
        self.tolerance = tolerance
        self.ax = ax
        self.fig = ax.figure
        self.ax.xaxis.set_label_position('top')
        self.dot = ax.scatter(
            [x.min()], [y.min()], s=130, color='green', alpha=0.7)
        self.annotation = self.setup_annotation()
        plt.connect('motion_notify_event', self)

    def scaled(self, points):
        points = np.asarray(points)
        return points * (self.scale, 1)

    def __call__(self, event):
        ax = self.ax
        # event.inaxes is always the current axis. If you use twinx, ax could be
        # a different axis.
        if event.inaxes == ax:
            x, y = event.xdata, event.ydata
        elif event.inaxes is None:
            return
        else:
            inv = ax.transData.inverted()
            x, y = inv.transform([(event.x, event.y)]).ravel()
        annotation = self.annotation
        x, y = self.snap(x, y)
        annotation.xy = x, y
        annotation.set_text(self.formatter(x, y))
        self.dot.set_offsets((x, y))
        bbox = ax.viewLim
        event.canvas.draw()

    def setup_annotation(self):
        """Draw and hide the annotation box."""
        annotation = self.ax.annotate(
            '', xy=(0, 0), ha = 'right',
            xytext = self.offsets, textcoords = 'offset points', va = 'bottom',
            bbox = dict(
                boxstyle='round,pad=0.5', fc='yellow', alpha=0.75),
            arrowprops = dict(
                arrowstyle='-&gt;', connectionstyle='arc3,rad=0'))
        return annotation

    def snap(self, x, y):
        """Return the value in self.tree closest to x, y."""
        dist, idx = self.tree.query(self.scaled((x, y)), k=1, p=1)
        try:
            return self._points[idx]
        except IndexError:
            # IndexError: index out of bounds
            return self._points[0]

x=[1,2,3,4,5]
y=[6,7,8,9,10]

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.scatter(x, y)
cursor = FollowDotCursor(ax, x, y)
plt.show()
</snippet></ROW><ROW><id>13306929</id><snippet>DecInt</snippet></ROW><ROW><id>13306929</id><snippet>import DecInt
bignum = DecInt.DecInt(9999999999999999) ** 999999999999999999999
print str(bignum)
</snippet></ROW><ROW><id>13307071</id><snippet>import datetime as dt
def parse(date, hour):
    return dt.datetime.strptime(date, '%Y-%m-%d').replace(hour = int(hour))

data = [[u'2012-10-31', '20', 9801, '0', '0', '0', '0'], [u'2012-10-31', '21', 9266, '0', '0', '0', '0'], [u'2012-10-31', '22', 10526, '0', '0', '0', '0'], [u'2012-10-31', '23', 9570, '0', '0', '0', '0'], [u'2012-10-31', '1', 5256, '0', '0', '0', '0'], [u'2012-10-31', '0', 5020, '0', '0', '0', '0'], [u'2012-10-31', '3', 6755, '0', '0', '0', '0'], [u'2012-10-31', '2', 5748, '0', '0', '0', '0'], [u'2012-10-31', '5', 7013, '0', '0', '0', '0'], [u'2012-10-31', '4', 7099, '0', '0', '0', '0'], [u'2012-10-31', '7', 6705, '0', '0', '0', '0'], [u'2012-10-31', '6', 7498, '0', '0', '0', '0'], [u'2012-10-31', '9', 7976, '0', '0', '0', '0'], [u'2012-10-31', '8', 7770, '0', '0', '0', '0'], [u'2012-10-31', '11', 7440, '0', '0', '0', '0'], [u'2012-10-31', '10', 7836, '0', '0', '0', '0'], [u'2012-10-31', '13', 8781, '0', '0', '0', '0'], [u'2012-10-31', '12', 7949, '0', '0', '0', '0'], [u'2012-10-31', '15', 13083, '0', '0', '0', '0'], [u'2012-10-31', '14', 10739, '0', '0', '0', '0'], [u'2012-10-31', '17', 16339, '0', '0', '0', '0'], [u'2012-10-31', '16', 15182, '0', '0', '0', '0'], [u'2012-10-31', '19', 12565, '0', '0', '0', '0'], [u'2012-10-31', '18', 16169, '0', '0', '0', '0']]

data.sort(key = lambda row: parse(row[0], row[1]))
for row in data:
    print(row)
</snippet></ROW><ROW><id>13307071</id><snippet>[u'2012-10-31', '0', 5020, '0', '0', '0', '0']
[u'2012-10-31', '1', 5256, '0', '0', '0', '0']
[u'2012-10-31', '2', 5748, '0', '0', '0', '0']
...
[u'2012-10-31', '21', 9266, '0', '0', '0', '0']
[u'2012-10-31', '22', 10526, '0', '0', '0', '0']
[u'2012-10-31', '23', 9570, '0', '0', '0', '0']
</snippet></ROW><ROW><id>13307071</id><snippet>data.sort(key = lambda row: (row[0], int(row[1])))
</snippet></ROW><ROW><id>13307335</id><snippet>from bs4 import BeautifulSoup
parser = BeautifulSoup(remote_data)
link_list = [a['href'] for a in parser.find_all('a')]
</snippet></ROW><ROW><id>13307365</id><snippet>yield</snippet></ROW><ROW><id>13307365</id><snippet>def incorrect_terms(polynomial, terms):
    for index in range(len(polynomial), len(terms)):
        eval = evaluate(polynomial,index)
        if eval != terms[index-1]:
            yield (polynomial, index, eval)
</snippet></ROW><ROW><id>13307365</id><snippet>mismatches = incorrect_terms(polynomial, terms)
first_mismatch = mismatches.next()
</snippet></ROW><ROW><id>13307365</id><snippet>results = (evaluate(polynomial,index) for index in count(0))
pairsToCompare = itertools.izip(results, terms)
mismatches = (pair for pair in pairsToCompare if pair[0] != pair[1])

first_mismatch = mismatches.next()
</snippet></ROW><ROW><id>13307365</id><snippet>evaluate(polynomial, n)</snippet></ROW><ROW><id>13307365</id><snippet>terms</snippet></ROW><ROW><id>13307417</id><snippet>__builtins__</snippet></ROW><ROW><id>13307417</id><snippet>Python 2.7.3 (default, Apr 10 2012, 23:31:26) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; __builtins__ = 0
&gt;&gt;&gt; open
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'open' is not defined
&gt;&gt;&gt; dir
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'dir' is not defined
&gt;&gt;&gt; int
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'int' is not defined
&gt;&gt;&gt; float
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'float' is not defined
&gt;&gt;&gt;
&gt;&gt;&gt; __builtins__ = [t for t in ().__class__.__bases__[0].__subclasses__() if 'warning' in t.__name__][0]()._module.__builtins__
&gt;&gt;&gt;
&gt;&gt;&gt; open
&lt;built-in function open&gt;
&gt;&gt;&gt; int
&lt;type 'int'&gt;
&gt;&gt;&gt; float
&lt;type 'float'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13307477</id><snippet>$ python manage.py shell 
</snippet></ROW><ROW><id>13307477</id><snippet>Error: cannot import name urandom
</snippet></ROW><ROW><id>13307477</id><snippet>virtualenv /path/to/my/virtualenv
</snippet></ROW><ROW><id>13307814</id><snippet>tan(deg_to_rad(27.2))
</snippet></ROW><ROW><id>13307912</id><snippet>textwrap.dedent()</snippet></ROW><ROW><id>13307912</id><snippet>\\</snippet></ROW><ROW><id>13307912</id><snippet>\n \</snippet></ROW><ROW><id>13307912</id><snippet>\\</snippet></ROW><ROW><id>13307912</id><snippet>\</snippet></ROW><ROW><id>13307912</id><snippet>\n \</snippet></ROW><ROW><id>13307912</id><snippet>"..."</snippet></ROW><ROW><id>13307912</id><snippet>&gt;&gt;&gt; code = """
    def foo():
        message = "This is a very long message that will probably need to wrap at the end of the line! \\
    And it actually did!"
"""

&gt;&gt;&gt; print textwrap.dedent(code)

def foo():
    message = "This is a very long message that will probably need to wrap at the e
nd of the line! \
And it actually did!"

&gt;&gt;&gt; ast.parse(textwrap.dedent(code))
&lt;_ast.Module object at 0x10e9e5bd0&gt;
</snippet></ROW><ROW><id>13307912</id><snippet>\</snippet></ROW><ROW><id>13307912</id><snippet>"""My sentence"""</snippet></ROW><ROW><id>13307912</id><snippet>message</snippet></ROW><ROW><id>13307912</id><snippet>def bar</snippet></ROW><ROW><id>13307984</id><snippet>SELECT</snippet></ROW><ROW><id>13307984</id><snippet>VIEW</snippet></ROW><ROW><id>13307984</id><snippet>TABLE</snippet></ROW><ROW><id>13307984</id><snippet>cur.execute("SELECT * from my_view")
</snippet></ROW><ROW><id>13307984</id><snippet>except:</snippet></ROW><ROW><id>13308057</id><snippet>url = 'http://httpbin.org/post'
files = {'file': open('report.xls', 'rb')}
r = requests.post(url, files=files)
</snippet></ROW><ROW><id>13308156</id><snippet>soup.head.append('body {background-color:#b0c4de;}')
</snippet></ROW><ROW><id>13308156</id><snippet>&lt;style&gt;</snippet></ROW><ROW><id>13308156</id><snippet>head = soup.head
head.append(soup.new_tag('style', type='text/css'))
head.style.append('body {background-color:#b0c4de;}')
</snippet></ROW><ROW><id>13308233</id><snippet>np.arange(5).repeat([1,0,3,2,0])</snippet></ROW><ROW><id>13308856</id><snippet>In [31]: arctan2(cos(deg2rad(sal)), cos(deg2rad(oc))*sin(deg2rad(sal)))
Out[31]: 0.0041572064598812417

In [32]: arctan2(cos(deg2rad(oc))*sin(deg2rad(sal)), cos(deg2rad(sal)))
Out[32]: 1.5666391203350154
</snippet></ROW><ROW><id>13309004</id><snippet>WM_COPYDATA</snippet></ROW><ROW><id>13309004</id><snippet>WM_COPYDATA</snippet></ROW><ROW><id>13309004</id><snippet>WM_COPYDATA</snippet></ROW><ROW><id>13309004</id><snippet>WM_COPYDATA</snippet></ROW><ROW><id>13309189</id><snippet>:Dadmin
:Dmodels
:Dtests
:Dviews
:Durls
:Dmanage
</snippet></ROW><ROW><id>13309189</id><snippet>:Dmodels &lt;Tab&gt;
</snippet></ROW><ROW><id>13309531</id><snippet>def get_bad_results(person_results):
    for i in person_results:
        if i[1]&gt;i[3] or i[1]&lt;i[2]:
            yield i[0]
</snippet></ROW><ROW><id>13309531</id><snippet>def get_bad_results(person_results):
    return (i[0] for i in person_results if i[1]&gt;i[3] or i[1]&lt;i[2])
</snippet></ROW><ROW><id>13309531</id><snippet>test_results = [["White blood cells",8.5,2,7],
                ["Neutrophils",5.3,2.5,5],
                ["Red blood cells", 12.4, 9,15]]

for i in get_bad_results(test_results):
    print i
print list(get_bad_results(test_results))
print ", ".join(get_bad_results(test_results))
</snippet></ROW><ROW><id>13309531</id><snippet>White blood cells
Neutrophils
['White blood cells', 'Neutrophils']
White blood cells, Neutrophils
</snippet></ROW><ROW><id>13309531</id><snippet>def count_healthy(all_results):
    counter = 0
    for i in all_results:
        if len(list(get_bad_results(i))) == 0:
            counter += 1
    return counter
</snippet></ROW><ROW><id>13309531</id><snippet>def count_healthy(all_results):
    return sum(1 for i in all_results if len(list(get_bad_results(i))) == 0)
</snippet></ROW><ROW><id>13309531</id><snippet>get_bad_results()</snippet></ROW><ROW><id>13309531</id><snippet>len(list(get_bad_results(i))) == 0</snippet></ROW><ROW><id>13309531</id><snippet>def has_results(it):
    """Returns True if the iterator it yields any items."""
    return next((True for _ in it), False)
</snippet></ROW><ROW><id>13309531</id><snippet>def count_healthy(all_results):
    return sum(1 for i in all_results if not has_results(get_bad_results(i)))
</snippet></ROW><ROW><id>13309559</id><snippet>'w'</snippet></ROW><ROW><id>13309559</id><snippet>open(path, 'r')
</snippet></ROW><ROW><id>13309559</id><snippet>'r'</snippet></ROW><ROW><id>13309559</id><snippet>+</snippet></ROW><ROW><id>13309559</id><snippet>open(path, 'w+')
</snippet></ROW><ROW><id>13309559</id><snippet>w+</snippet></ROW><ROW><id>13309559</id><snippet>r+</snippet></ROW><ROW><id>13309559</id><snippet>r+</snippet></ROW><ROW><id>13309559</id><snippet>w+</snippet></ROW><ROW><id>13309559</id><snippet>.seek()</snippet></ROW><ROW><id>13309559</id><snippet>open()</snippet></ROW><ROW><id>13309570</id><snippet>get</snippet></ROW><ROW><id>13309570</id><snippet>request.POST.get('userType')</snippet></ROW><ROW><id>13309863</id><snippet>movies = [ 'a', 'b', 'c' ]
for movie in movies:
    print movie
</snippet></ROW><ROW><id>13310001</id><snippet>operator.lt
operator.le
</snippet></ROW><ROW><id>13310007</id><snippet>@facebook_authorization_required
@csrf_exempt     
def notify_self(request):

   token = request.facebook.user.oauth_token.token #user token
   token_app=facepy.utils.get_application_access_token('APP_ID','APP_SECRET_ID') 
   graph = GraphAPI(token)
   graph.post(
      path = 'me/notifications',
      template = '#Text of the notification',
      href = 'URL',
      access_token= token_app
   ) 

   return HttpResponse('&lt;script type=\'text/javascript\'&gt;top.location.href = \'URL\'&lt;/script&gt;')
</snippet></ROW><ROW><id>13310109</id><snippet>add_mutually_exclusive_group()</snippet></ROW><ROW><id>13310109</id><snippet>import argparse
parser = argparse.ArgumentParser()
g = parser.add_mutually_exclusive_group()
g.add_argument("--a",help="Argument a")
g.add_argument("--b",help="Argument b")
g.add_argument("--c",help="Argument c")
args= parser.parse_args()
</snippet></ROW><ROW><id>13310326</id><snippet>"$X"</snippet></ROW><ROW><id>13310326</id><snippet>$X</snippet></ROW><ROW><id>13310326</id><snippet>#!/bin/bash
if python -c 'import sys; sys.exit(1 if sys.hexversion&lt;0x03000000 else 0)'
then
    echo "Fine!"
fi
</snippet></ROW><ROW><id>13310326</id><snippet>--version</snippet></ROW><ROW><id>13310326</id><snippet>case "$(python --version 2&gt;&amp;1)" in
    *" 3."*)
        echo "Fine!"
        ;;
    *)
        echo "Wrong Python version!"
        ;;
esac
</snippet></ROW><ROW><id>13310651</id><snippet>check_csrf</snippet></ROW><ROW><id>13310651</id><snippet>view_config</snippet></ROW><ROW><id>13310651</id><snippet>NewRequest</snippet></ROW><ROW><id>13310651</id><snippet>if not request.path_info.startswith('/upload_image_path'):</snippet></ROW><ROW><id>13310651</id><snippet>ContextFound</snippet></ROW><ROW><id>13310651</id><snippet>if request.matched_route.name ~= 'upload_images'</snippet></ROW><ROW><id>13310651</id><snippet>def csrf_check(context, request):
    # do check, return True if passes, or raise some exception if fails

@view_config(..., custom_predicates=[csrf_check])
def not_upload_images(request):
    # ....
</snippet></ROW><ROW><id>13311030</id><snippet>foo = []

def my_list_creator(n):
    '''Makes the nth value in a list n. If the list is not
    long enough, it extends it, initialised with None.
    '''
    global foo

    if len(foo) &lt; n:
        foo.extend([None] * (n - len(foo)))

    foo[n-1] = n

def access_a_global():
    print foo

def another_func():
    my_list_creator(10)
    access_a_global()
    my_list_creator(20)        
    access_a_global()

another_func()
</snippet></ROW><ROW><id>13311030</id><snippet>foo</snippet></ROW><ROW><id>13311139</id><snippet>globals()[variable] = value
</snippet></ROW><ROW><id>13311139</id><snippet>from inspect import currentframe
currentframe(1).f_globals[variable] = name
</snippet></ROW><ROW><id>13311139</id><snippet>names = {}
class Test(object):
    def __init__(self):
        self.dict = {} # used elsewhere to give the inputs for the function below.

    def create_global_var(self, variable, value):
         names[variable] = value
</snippet></ROW><ROW><id>13311152</id><snippet>from PyQt4 import QtGui
import sys

class SubWindow(QtGui.QDialog):
    def __init__(self):
        super(SubWindow , self).__init__()     
        label = QtGui.QLabel("Hey, subwindow here!",self);

class MainWindow(QtGui.QMainWindow):
    def __init__(self):
        super(MainWindow , self).__init__()     
        self.window()

    def window(self):
        Action = QtGui.QAction(QtGui.QIcon('action.png') , 'action' , self)          
        Action.triggered.connect(self.a)

        mb = self.menuBar()
        option = mb.addMenu('File')
        option.addAction(Action)

        self.show()

    def a(self):

        s = SubWindow()
        s.exec_()

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    mw = MainWindow()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13311225</id><snippet>original = numpy.fromfile(filepath, dtype=numpy.uint16).reshape((132, 512, 512))
</snippet></ROW><ROW><id>13311225</id><snippet>slc = original[66]
</snippet></ROW><ROW><id>13311225</id><snippet>f = open('test.raw', 'wb')
</snippet></ROW><ROW><id>13311225</id><snippet>ndarray.tofile()</snippet></ROW><ROW><id>13311225</id><snippet>arr.tofile('test.raw')
</snippet></ROW><ROW><id>13311225</id><snippet>slice</snippet></ROW><ROW><id>13311240</id><snippet>remove_all_elements</snippet></ROW><ROW><id>13311240</id><snippet>contents</snippet></ROW><ROW><id>13311240</id><snippet>to_remove.decompose()</snippet></ROW><ROW><id>13311240</id><snippet>def decompose(self):
    """Recursively destroys the contents of this tree."""
    self.extract()
    i = self
    while i is not None:
        next = i.next_element
        i.__dict__.clear()
        i = next
</snippet></ROW><ROW><id>13311240</id><snippet>&gt;&gt; soup = BeautifulSoup('&lt;div&gt;&lt;p&gt;hi&lt;/p&gt;&lt;/div&gt;')
&gt;&gt;&gt; d0 = soup.find_all('div')[0]
&gt;&gt;&gt; d0
&lt;div&gt;&lt;p&gt;hi&lt;/p&gt;&lt;/div&gt;
&gt;&gt;&gt; d0.decompose()
&gt;&gt;&gt; d0
Traceback (most recent call last):
...
Traceback (most recent call last):
AttributeError: '&lt;class 'bs4.element.Tag'&gt;' object has no attribute 'contents'
</snippet></ROW><ROW><id>13311240</id><snippet>decompose</snippet></ROW><ROW><id>13311240</id><snippet>len(element.__dict__) &gt; 0</snippet></ROW><ROW><id>13311240</id><snippet>trim()</snippet></ROW><ROW><id>13311338</id><snippet>$HOME/.pip/pip.conf</snippet></ROW><ROW><id>13311338</id><snippet>[global]
download_cache = ~/.pip/cache
</snippet></ROW><ROW><id>13311338</id><snippet>~/.pip/cache</snippet></ROW><ROW><id>13311389</id><snippet>getattr(client.service, 'getWeatherInfo')()
</snippet></ROW><ROW><id>13311417</id><snippet>cimport cython

ctypedef fused any:
    string
    cython.int

cpdef bool is_in_vector(string a, vector[any] v)
</snippet></ROW><ROW><id>13311417</id><snippet>ctypedef fused vector_t:
    vector[string]
    vector[cython.int]

cpdef bool is_in_vector(string a, vector_t v)
</snippet></ROW><ROW><id>13311602</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>13311602</id><snippet>N</snippet></ROW><ROW><id>13311602</id><snippet>np.genfromtxt(" ".join(ln.split()[N:]) for ln in f)
</snippet></ROW><ROW><id>13311780</id><snippet>conn.commit()
</snippet></ROW><ROW><id>13311780</id><snippet>commit()</snippet></ROW><ROW><id>13311780</id><snippet>None</snippet></ROW><ROW><id>13311780</id><snippet>conn.isolation_level = None
</snippet></ROW><ROW><id>13311897</id><snippet>import sys
from ConfigParser import SafeConfigParser

parser = SafeConfigParser()
parser.readfp(sys.stdin)

config = dict((section, dict((option, parser.get(section, option))
                             for option in parser.options(section)))
              for section in parser.sections())
print config
</snippet></ROW><ROW><id>13311897</id><snippet>[a]
b = 1
c = 2
[d]
e = 3
</snippet></ROW><ROW><id>13311897</id><snippet>{'a': {'c': '2', 'b': '1'}, 'd': {'e': '3'}}
</snippet></ROW><ROW><id>13311914</id><snippet># What I imagine your plotting looks like so far
fig = plt.figure()
ax1 = fig.add_subplot(111)
ax1.plot(your_data)

# Now adding the colorbar
cbaxes = fig.add_axes([0.8, 0.1, 0.03, 0.8]) 
cb = plt.colorbar(ax1, cax = cbaxes)  
</snippet></ROW><ROW><id>13311979</id><snippet>ValueError: setting an array element with a sequence.
</snippet></ROW><ROW><id>13311979</id><snippet>kOUT[i]=func(TempLake[i],Z)
</snippet></ROW><ROW><id>13311979</id><snippet>ith</snippet></ROW><ROW><id>13311979</id><snippet>kOUT</snippet></ROW><ROW><id>13311979</id><snippet>func(TempLAke[i], Z)</snippet></ROW><ROW><id>13311979</id><snippet>i=0</snippet></ROW><ROW><id>13311979</id><snippet>In [39]: kOUT[0]
Out[39]: 0.0

In [40]: func(TempLake[0], Z)
Out[40]: array([ 0.,  0.,  0.,  0.])
</snippet></ROW><ROW><id>13311979</id><snippet>kOUT[0]</snippet></ROW><ROW><id>13311979</id><snippet>kOUT[i]</snippet></ROW><ROW><id>13311979</id><snippet>func(TempLake[i], Z)</snippet></ROW><ROW><id>13311979</id><snippet>func</snippet></ROW><ROW><id>13312041</id><snippet>ndb.Model</snippet></ROW><ROW><id>13312041</id><snippet>to_dict()</snippet></ROW><ROW><id>13312041</id><snippet>json.dumps([p.to_dict() for p in Pasta.query(Pasta.name == "Ravioli").fetch()])
</snippet></ROW><ROW><id>13312548</id><snippet>&gt;&gt;&gt; a = "hello brown fox"
&gt;&gt;&gt; a.split()
['hello', 'brown', 'fox']
&gt;&gt;&gt; a
'hello brown fox'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13312548</id><snippet>wordList.extend(line.split())
</snippet></ROW><ROW><id>13312723</id><snippet>defaultdict</snippet></ROW><ROW><id>13312723</id><snippet>Counter</snippet></ROW><ROW><id>13312723</id><snippet>from collections import defaultdict

data = defaultdict(float)

for line in lst1+lst2:
    name, code, value = line.split(",")
    data[name, code] += float(value)

newlist = ['{},{},{}'.format(key[0], key[1], val) for key, val in sorted(data.items())]
</snippet></ROW><ROW><id>13312723</id><snippet>&gt;&gt;&gt; data
defaultdict(&lt;type 'float'&gt;, {('company1', 'HHH'): -600.0, ('company1', 'JJJ'): -4631.0,
('company1', 'KKK'): -400.0, ('company1', 'DDD'): 7442.998, ('company1', 'ZZZ'): -2576.0,
('company1', 'CCC'): 6679.999, ('company1', 'AAA'): 2576.0, ('company1', 'FFF'): -600.0,
('company1', 'GGG'): 3822.0, ('company1', 'EEE'): 1640.0, ('company1', 'BBB'): -6659.0})
</snippet></ROW><ROW><id>13312723</id><snippet>&gt;&gt;&gt; newlist
['company1,AAA,2576.0', 'company1,BBB,-6659.0', 'company1,CCC,6679.999',
'company1,DDD,7442.998', 'company1,EEE,1640.0', 'company1,FFF,-600.0', 
'company1,GGG,3822.0', 'company1,HHH,-600.0', 'company1,JJJ,-4631.0', 
'company1,KKK,-400.0', 'company1,ZZZ,-2576.0']
</snippet></ROW><ROW><id>13313027</id><snippet>exec "del strands...", translation.__dict__
</snippet></ROW><ROW><id>13313027</id><snippet>def within(obj, func):
    return func(**obj.__dict__)
</snippet></ROW><ROW><id>13313027</id><snippet>def dostuff(strands, active, locus, **ignored):
    del ...
within(translation, dostuff)
</snippet></ROW><ROW><id>13313242</id><snippet>obj.__dict__</snippet></ROW><ROW><id>13313242</id><snippet>_</snippet></ROW><ROW><id>13313242</id><snippet>obj.__dict__</snippet></ROW><ROW><id>13313242</id><snippet>vars(obj)</snippet></ROW><ROW><id>13313242</id><snippet>class Rectangle(object):
    x = 0
    y = 0
    _width = 0
    height = 0

    @property
    def width(self):
        return self._width

    @width.setter
    def width(self, value):
        if value &lt; 0:
            value = -value
            self.x -= value
        self._width = value

&gt;&gt;&gt; r = Rectangle()
&gt;&gt;&gt; r.__dict__
{}
&gt;&gt;&gt; # this is because everything is class-level properties so far
&gt;&gt;&gt; r.width = 50
&gt;&gt;&gt; r.__dict__
{'_width': 50}
</snippet></ROW><ROW><id>13313359</id><snippet>print()</snippet></ROW><ROW><id>13313359</id><snippet>&gt;&gt;&gt; '''"No, thanks, Mom," I said, "I don't know how long it will take."'''
'"No, thanks, Mom," I said, "I don\'t know how long it will take."'
&gt;&gt;&gt; print('''"No, thanks, Mom," I said, "I don't know how long it will take."''')
"No, thanks, Mom," I said, "I don't know how long it will take."
</snippet></ROW><ROW><id>13313436</id><snippet>1</snippet></ROW><ROW><id>13313436</id><snippet>1</snippet></ROW><ROW><id>13313436</id><snippet>while i &lt; 11:
    print 1
    i += 1
    total += 1
</snippet></ROW><ROW><id>13313436</id><snippet>i</snippet></ROW><ROW><id>13313492</id><snippet>\a</snippet></ROW><ROW><id>13313492</id><snippet>^G</snippet></ROW><ROW><id>13313492</id><snippet>import Cocoa
Cocoa.NSBeep()
</snippet></ROW><ROW><id>13313528</id><snippet>dict</snippet></ROW><ROW><id>13313528</id><snippet>defaultdict</snippet></ROW><ROW><id>13313528</id><snippet>from collections import defaultdict
returns = defaultdict(int)
count = 0
for p in lasfile.File(inFile, None, 'r'):
    count += 1
    returns[p.return_number] += 1
</snippet></ROW><ROW><id>13313528</id><snippet>Counter</snippet></ROW><ROW><id>13313528</id><snippet>Counter</snippet></ROW><ROW><id>13313528</id><snippet>scan_angle</snippet></ROW><ROW><id>13313528</id><snippet>1</snippet></ROW><ROW><id>13313528</id><snippet>2</snippet></ROW><ROW><id>13313528</id><snippet>Counter</snippet></ROW><ROW><id>13313528</id><snippet>Counter</snippet></ROW><ROW><id>13313528</id><snippet>return_number</snippet></ROW><ROW><id>13313528</id><snippet>scan_angle</snippet></ROW><ROW><id>13313528</id><snippet>defaultdict</snippet></ROW><ROW><id>13313528</id><snippet>Counter</snippet></ROW><ROW><id>13313528</id><snippet>from collections import Counter
rnc, sac = map(Counter, 
  zip(*((p.return_number, p.scan_angle) for p in lasfile.File(inFile,None,'r'))))
</snippet></ROW><ROW><id>13313528</id><snippet>defaultdict</snippet></ROW><ROW><id>13313528</id><snippet>returns, angles = defaultdict(int), defaultdict(int)
for p in lasfile.File(inFile, None, 'r'):
     returns[p.return_number] += 1
     angles[p.scan_angle] += 1
     count += 1
</snippet></ROW><ROW><id>13313528</id><snippet>Counter</snippet></ROW><ROW><id>13313528</id><snippet>fp = lasfile.File(inFile, None, 'r')
returns = Counter(p.return_number for p in fp)
fp = lasfile.File(inFile, None, 'r')
angles = Counter(p.scan_angle for p in fp)
</snippet></ROW><ROW><id>13313714</id><snippet>execute()</snippet></ROW><ROW><id>13313714</id><snippet>commit()</snippet></ROW><ROW><id>13313714</id><snippet>commit()</snippet></ROW><ROW><id>13313820</id><snippet>start</snippet></ROW><ROW><id>13313895</id><snippet>import yaml
d = {'bar': {'foo': 'hello', 'supercalifragilisticexpialidocious': 'world'}}


# FIRST STEP:
#   Define a PyYAML dict representer for adding trailing spaces to keys

def dict_representer(dumper, data):
    keyWidth = max(len(k) for k in data))
    aligned = {k+' '*(keyWidth-len(k)):v for k,v in data.iteritems()}
    return dumper.represent_mapping('tag:yaml.org,2002:map', aligned)

yaml.add_representer(dict, dict_representer)


# SECOND STEP:
#   Remove quotes in the rendered string

print yaml.dump(d, default_flow_style=False).replace('\'', '') 
</snippet></ROW><ROW><id>13313900</id><snippet>something</snippet></ROW><ROW><id>13313900</id><snippet>def maybe_replace(word, length=4):
  if len(word) == length:
    return 'something'
  else:
    return word
</snippet></ROW><ROW><id>13313900</id><snippet>split</snippet></ROW><ROW><id>13313900</id><snippet>   split_line = line.split()
</snippet></ROW><ROW><id>13313900</id><snippet>maybe_replace</snippet></ROW><ROW><id>13313900</id><snippet>  new_split_line = [maybe_replace(word) for word in split_line]
</snippet></ROW><ROW><id>13313900</id><snippet>join</snippet></ROW><ROW><id>13313900</id><snippet>  new_line = ' '.join(new_split_line)
</snippet></ROW><ROW><id>13313900</id><snippet>  o.write(new_line + '\n')
</snippet></ROW><ROW><id>13313900</id><snippet>def replacement():  
  o = open("file.txt","a") #file.txt will be the file containing the changed phrase
  for line in open("y.txt"):  #y.txt is the original file
    split_line = line.split()
    new_split_line = [maybe_replace(word) for word in split_line]
    new_line = ' '.join(new_split_line)
    o.write(new_line + '\n')
  o.close()
</snippet></ROW><ROW><id>13314145</id><snippet>DATA = {
    'A' : numpy.array([-0.59145974, -1.30209266, -0.7330651, 1.5703918, -0.14550842]),
    'B' : numpy.array([-1.34267179, 0.46542300, -0.8620345, -1.0200786, -0.25516894]),
    'D' : numpy.array([1.05015062, 0.30242411, -3.6559147, -0.2590236, -3.24176791])
    ...
}
</snippet></ROW><ROW><id>13314145</id><snippet>counters = numpy.array([DATA[letter] for peptide in peptides for letter in peptide])
</snippet></ROW><ROW><id>13314145</id><snippet>counters = counters.reshape( len(peptides), 16, 5 )
</snippet></ROW><ROW><id>13314163</id><snippet>configure:14532: checking for SNDFILE
configure:14540: $PKG_CONFIG --exists --print-errors "sndfile"
Package sndfile was not found in the pkg-config search path.
Perhaps you should add the directory containing `sndfile.pc'
to the PKG_CONFIG_PATH environment variable
No package 'sndfile' found
configure:14543: $? = 1
configure:14558: $PKG_CONFIG --exists --print-errors "sndfile"
Package sndfile was not found in the pkg-config search path.
Perhaps you should add the directory containing `sndfile.pc'
to the PKG_CONFIG_PATH environment variable
No package 'sndfile' found
configure:14561: $? = 1
No package 'sndfile' found
configure:14589: result: no
configure:14603: checking sndfile.h usability
configure:14603: gcc -std=gnu99 -c -g -O2 -Wall  -
I/Library/Frameworks/Python.framework/Versions/7.3/include/python2.7 -
I/Library/Frameworks/Python.framework/Versions/7.3/include/python2.7 conftest.c &gt;&amp;5
configure:14603: $? = 0
configure:14603: result: yes
</snippet></ROW><ROW><id>13314348</id><snippet>def test_signal_registry(self):
    from foo.models import bar_func  # the function i want to register
    from django.db.models import signals
    registered_functions = [r[1]() for r in signals.pre_delete.receivers]
    self.assertIn(bar_func, registered_functions)
</snippet></ROW><ROW><id>13314348</id><snippet>import weakref
def foo():
    pass
w = weakref.ref(foo)
w() == foo
</snippet></ROW><ROW><id>13314410</id><snippet>gWidgets</snippet></ROW><ROW><id>13314410</id><snippet>RGtk2</snippet></ROW><ROW><id>13314410</id><snippet>Qt</snippet></ROW><ROW><id>13314410</id><snippet>library(gWidgets)
options(guiToolkit="RGtk2")
w &lt;- gwindow("test")
pg &lt;- gpanedgroup(cont=w)
fl &lt;- glayout(cont=pg)
gg &lt;- ggraphics(cont=pg)
size(gg) &lt;- c(600, 600)

fl[1,1] &lt;- "No. points"
fl[1,2] &lt;- no_pts &lt;- gedit("10", cont=fl, coerce.with=as.numeric)
fl[2,2] &lt;- gbutton("click me", cont=fl, label="", handler=function(h,...) {
  n &lt;- svalue(no_pts)
  plot(rnorm(n), rnorm(n))
})
</snippet></ROW><ROW><id>13314410</id><snippet>cranvas</snippet></ROW><ROW><id>13314410</id><snippet>rgl</snippet></ROW><ROW><id>13314855</id><snippet>win32api</snippet></ROW><ROW><id>13314855</id><snippet>from win32com.shell import shell

def launch_file_explorer(path, files):
    '''
    Given a absolute base path and names of its children (no path), open
    up one File Explorer window with all the child files selected
    '''
    folder_pidl = shell.SHILCreateFromPath(path,0)[0]
    desktop = shell.SHGetDesktopFolder()
    shell_folder = desktop.BindToObject(folder_pidl, None,shell.IID_IShellFolder)
    name_to_item_mapping = dict([(desktop.GetDisplayNameOf(item, 0), item) for item in shell_folder])
    to_show = []
    for file in files:
        if name_to_item_mapping.has_key(file):
            to_show.append(name_to_item_mapping[file])
        # else:
            # raise Exception('File: "%s" not found in "%s"' % (file, path))

    shell.SHOpenFolderAndSelectItems(folder_pidl, to_show, 0)
launch_file_explorer(r'G:\testing', ['189.mp3'])
</snippet></ROW><ROW><id>13314883</id><snippet>re</snippet></ROW><ROW><id>13314883</id><snippet>grep</snippet></ROW><ROW><id>13314883</id><snippet>import re

with open(filename, 'r') as f:
    for line in f:
        if re.search(regex, line):
            print line,
</snippet></ROW><ROW><id>13314918</id><snippet>N_CORES</snippet></ROW><ROW><id>13314918</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>13314918</id><snippet>import multiprocessing as mp
import subprocess

def process_file(filename):
    try:
        return filename, subprocess.call([cmd, filename], cwd=localdir)
    except OSError:
        return filename, None # failed to start subprocess

if __name__ == "__main__":
    pool = mp.Pool()
    for result in pool.imap_unordered(process_file, filenames):
        # report result here
</snippet></ROW><ROW><id>13314940</id><snippet>#!/bin/python 

import random

#create 40 random grades 
grades = [(float(int(float(20*random.random())))/2)+0.5 for i in xrange(40)]

#count the occurrence of each grade
histogram = []
for i in sorted(set(grades)): histogram.append([int(i*50),grades.count(i)])

#some grid information
gridsize = 500
griddiv = 20
topleft = 50

#graph title
print 'text', '"','Histogram of Grades','"', 220, 25

#x axis title
for i in range(1,21):
    print 'text', '"',float(i)/2,'"', (i+1)*25, 570

#y axix title
for i in range(0,11):
    print 'text', '"',i,'"', 25, 600-(i+1)*50

#grid
print 'grid', topleft, topleft, gridsize, gridsize, griddiv, griddiv

#chart rectangles 
print 'color 0 140 0'
for i in histogram:
    print 'fillrect',i[0]-25+topleft, gridsize-(50*i[1])+topleft,gridsize/griddiv,50*i[1],'b'+str(i[0])
    print 'fillrect', 'color','b'+str(i[0])
</snippet></ROW><ROW><id>13314940</id><snippet>histogram.py</snippet></ROW><ROW><id>13314940</id><snippet>python histogram.py | java -jar quickdraw.jar</snippet></ROW><ROW><id>13314940</id><snippet>matplotlib</snippet></ROW><ROW><id>13314979</id><snippet>t &lt; T</snippet></ROW><ROW><id>13314979</id><snippet>if ... else ...</snippet></ROW><ROW><id>13314979</id><snippet>def func(t, a0, a1, a2, T, tau1, tau2):
    return np.where(
        t &lt; T,
        a0 + a1 * np.exp(-t/tau1) + a2 * np.exp(-t/tau2),
        a0 + a1 * np.exp(-T/tau1) * (1 - t/tau1 + T/tau1) + a2 * np.exp(-T/tau2) * (1 - t/tau2 + T/tau2) )
</snippet></ROW><ROW><id>13315014</id><snippet>import numpy as np
from matplotlib import pyplot

means   = [26.82,26.4,61.17,61.55]           # Mean Data 
stds    = [(0,0,0,0), [4.59,4.39,4.37,4.38]] # Standard deviation Data
peakval = ['26.82','26.4','61.17','61.55']   # String array of means

ind = np.arange(len(means))
width = 0.35
colours = ['red','blue','green','yellow']

pyplot.figure()
pyplot.title('Average Age')
pyplot.bar(ind, means, width, color=colours, align='center', yerr=stds, ecolor='k')
pyplot.ylabel('Age (years)')
pyplot.xticks(ind,('Young Male','Young Female','Elderly Male','Elderly Female'))

def autolabel(bars,peakval):
    for ii,bar in enumerate(bars):
        height = bars[ii]
        pyplot.text(ind[ii], height-5, '%s'% (peakval[ii]), ha='center', va='bottom')
autolabel(means,peakval) 
pyplot.show()
</snippet></ROW><ROW><id>13315014</id><snippet>yerr</snippet></ROW><ROW><id>13315014</id><snippet>2xN</snippet></ROW><ROW><id>13315051</id><snippet>.label()</snippet></ROW><ROW><id>13315051</id><snippet>DBSession.query(func.count(ExtendedCDR.unique_id).label('count'), ...)</snippet></ROW><ROW><id>13315065</id><snippet>@login_required
def do_something():
*    pass
</snippet></ROW><ROW><id>13315065</id><snippet>request</snippet></ROW><ROW><id>13315065</id><snippet>session</snippet></ROW><ROW><id>13315065</id><snippet>def login_required(f):
*    @wraps(f)
*    def decorated_function(*args, **kwargs):
*        if "user" not in session or not session["user"]:
*            return redirect(url_for('login', next=request.url))
*        return f(*args, **kwargs)
*    return decorated_function
</snippet></ROW><ROW><id>13315109</id><snippet>__init__.py</snippet></ROW><ROW><id>13315109</id><snippet>./package_fiddler/data/__init__.py
./package_fiddler/data/stylesheets/__init__.py
</snippet></ROW><ROW><id>13315378</id><snippet>query</snippet></ROW><ROW><id>13315378</id><snippet>string in obj</snippet></ROW><ROW><id>13315378</id><snippet>obj</snippet></ROW><ROW><id>13315378</id><snippet>if query in rowdata</snippet></ROW><ROW><id>13315378</id><snippet>if any(query in field for field in rowdata)</snippet></ROW><ROW><id>13315378</id><snippet>if query in rowdata[name_column]</snippet></ROW><ROW><id>13315378</id><snippet>name_column</snippet></ROW><ROW><id>13315378</id><snippet>name</snippet></ROW><ROW><id>13315649</id><snippet>_</snippet></ROW><ROW><id>13315649</id><snippet>1+1</snippet></ROW><ROW><id>13315649</id><snippet>lsof</snippet></ROW><ROW><id>13315649</id><snippet>with</snippet></ROW><ROW><id>13315649</id><snippet>with open('file') as fp:
    data = fp.read()
</snippet></ROW><ROW><id>13315947</id><snippet>{% for row_index in range(x['date']|count) %}
    &lt;tr&gt;
      &lt;td&gt;{{ x['date'][row_index]|tojson|safe }}&lt;/td&gt;
      &lt;td&gt;{{ x['users'][row_index] }}&lt;/td&gt;
    &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>13315947</id><snippet>x = zip(x['date'], x['users'])
</snippet></ROW><ROW><id>13315947</id><snippet>{% for row in x %}
    &lt;tr&gt;
      &lt;td&gt;{{ row[0]|tojson|safe }}&lt;/td&gt;
      &lt;td&gt;{{ row[1] }}&lt;/td&gt;
    &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>13315947</id><snippet>from itertools import izip
x = [dict(date=d, user=u) for d, u in izip(x['date'], x['users'])]
</snippet></ROW><ROW><id>13315947</id><snippet>{% for row in x %}
    &lt;tr&gt;
      &lt;td&gt;{{ row['date']|tojson|safe }}&lt;/td&gt;
      &lt;td&gt;{{ row['user'] }}&lt;/td&gt;
    &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>13315985</id><snippet>import re
input = 'I like {sushi} and {tempura}.'
regex = re.compile(r'\{([^\}]*)\}')
lst = regex.findall(input)            #['sushi','tempura']
mod_str = regex.sub('*',input)        #I like * and *.
print (lst)
print (mod_str)
</snippet></ROW><ROW><id>13315985</id><snippet>mod_str = input.format(**dict((x,'*') for x in lst))
</snippet></ROW><ROW><id>13315985</id><snippet>r'...'</snippet></ROW><ROW><id>13315985</id><snippet>\{</snippet></ROW><ROW><id>13315985</id><snippet>[^\}]</snippet></ROW><ROW><id>13315985</id><snippet>*</snippet></ROW><ROW><id>13315985</id><snippet>\}</snippet></ROW><ROW><id>13315985</id><snippet>re.findall</snippet></ROW><ROW><id>13315985</id><snippet>r"\{(.*?)\}"
</snippet></ROW><ROW><id>13315985</id><snippet>\{</snippet></ROW><ROW><id>13315985</id><snippet>(.*?)</snippet></ROW><ROW><id>13315985</id><snippet>'\}'</snippet></ROW><ROW><id>13316111</id><snippet>from decimal import Decimal

def fakultaet(x):  # as you have it currently
    if x&gt;1:
        return(x * fakultaet(x-1)) 
    else:
        return(1)

print Decimal(1.0) / fakultaet(200)
</snippet></ROW><ROW><id>13316111</id><snippet>1.267976953480962421753016371E-375
</snippet></ROW><ROW><id>13316111</id><snippet>factorial</snippet></ROW><ROW><id>13316111</id><snippet>math</snippet></ROW><ROW><id>13316111</id><snippet>from math import factorial</snippet></ROW><ROW><id>13316368</id><snippet>str.join()</snippet></ROW><ROW><id>13316368</id><snippet>''.join(process(x) for x in some_input) 
# or
result = []
for x in some_input:
    result.append(process(x))
''.join(result)
</snippet></ROW><ROW><id>13316368</id><snippet>''.join(*(process(x) for x in some_input))
# or
''.join(*result)
</snippet></ROW><ROW><id>13316368</id><snippet>*args</snippet></ROW><ROW><id>13316368</id><snippet>*args</snippet></ROW><ROW><id>13316368</id><snippet>apply(callable, sequence)</snippet></ROW><ROW><id>13316368</id><snippet>**kwargs</snippet></ROW><ROW><id>13316368</id><snippet>*</snippet></ROW><ROW><id>13316368</id><snippet>str.join()</snippet></ROW><ROW><id>13316368</id><snippet>from string import join</snippet></ROW><ROW><id>13316499</id><snippet>conn = MySQLdb.connect('host', 'usr', 'pass', 'db', charset='utf8')
</snippet></ROW><ROW><id>13316499</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>13316516</id><snippet>#non_mem_macs is my dictionary
for idx in non_mem_macs:
    non_mem_macs_len += len(hexlify(idx))
    non_mem_macs_len += len(hexlify(non_mem_macs[idx]))
</snippet></ROW><ROW><id>13316523</id><snippet>groupby</snippet></ROW><ROW><id>13316523</id><snippet>from itertools import groupby

data = getResultFromDatabase()

for id, items in groupby(data, lambda s: s['student_id']):
    lowest_score_entry = min(items, key=lambda i: i['score'])
    print lowest_score_entry['score'], lowest_score_entry['_id']
</snippet></ROW><ROW><id>13316640</id><snippet>import types

try:
    raise Foo()
except (Exception, types.InstanceType) as foo:
    print 'foo %s' % foo
else:
    print 'it\'s all good'
</snippet></ROW><ROW><id>13316640</id><snippet>import sys

try:
    raise Foo()
except:
    etype, foo, traceback = sys.exc_info()
    print 'foo %s' % foo
else:
    print 'it\'s all good'
</snippet></ROW><ROW><id>13316710</id><snippet>curl -H "Content-type: application/json" -X POST http://localhost:5000/location -d '{"lat":5, "long":10, "address":"street", "name":"work"}'
</snippet></ROW><ROW><id>13316710</id><snippet>request.data[0]</snippet></ROW><ROW><id>13316710</id><snippet>{</snippet></ROW><ROW><id>13316710</id><snippet>request.data</snippet></ROW><ROW><id>13316710</id><snippet>echo "CREATE TABLE places (id INTEGER PRIMARY KEY, lat text, long text, address text, name  text);" | sqlite3 places.db
</snippet></ROW><ROW><id>13316710</id><snippet>http://127.0.0.1:5000/location</snippet></ROW><ROW><id>13316710</id><snippet>[(1, u'5', u'10', u'street', u'work')]
</snippet></ROW><ROW><id>13316710</id><snippet>from flask import Flask, request
import json, sqlite3

app = Flask(__name__)
@app.route('/location', methods=['GET', 'POST'])
def hello_world():
    conn = sqlite3.connect("places.db")
    cur = conn.cursor()
    if request.method == 'GET':
        cur.execute('SELECT * FROM places ORDER BY id')
        return repr(cur.fetchall())
    else:
        d = json.loads(request.data)
        row = (d['lat'], d['long'], d['address'], d['name'])
        cur.execute("""INSERT INTO places (lat, long, address, name)
                VALUES (?,?,?,?)""", row)
        conn.commit()
        return 'done\n'

app.run(debug=True)
</snippet></ROW><ROW><id>13316713</id><snippet>(?!(..+)\1+$).{10000}
</snippet></ROW><ROW><id>13316713</id><snippet>'x' * 10007</snippet></ROW><ROW><id>13316713</id><snippet>^(?![\s\S]*(?:^[abcd]d+))
</snippet></ROW><ROW><id>13316713</id><snippet>^[abcd]d+</snippet></ROW><ROW><id>13316713</id><snippet>^[^abcd]|^[abcd][^d]</snippet></ROW><ROW><id>13316721</id><snippet>reviewd</snippet></ROW><ROW><id>13316721</id><snippet>reviewed</snippet></ROW><ROW><id>13316721</id><snippet>/uniprot/</snippet></ROW><ROW><id>13316721</id><snippet>+</snippet></ROW><ROW><id>13316721</id><snippet>import sys
from urllib.parse import urlencode
from urllib.request import urlopen

# parameters
data = {}
data["query"] = "reviewed:yes AND organism:9606"
data["random"] = "yes"

url_values = urlencode(data)
url = "http://www.uniprot.org/uniprot/"
full_url = url + '?' + url_values
data = urlopen(full_url)
out = open("1.html", 'w')
out.write(str(data.read()))
</snippet></ROW><ROW><id>13316721</id><snippet>http://www.uniprot.org/uniprot/?query=reviewed%3Ayes+AND+organism%3A9606&amp;random=yes
</snippet></ROW><ROW><id>13316748</id><snippet>.next()</snippet></ROW><ROW><id>13316748</id><snippet>s = f_obj.next()
</snippet></ROW><ROW><id>13316748</id><snippet>.readline()</snippet></ROW><ROW><id>13316748</id><snippet>.next()</snippet></ROW><ROW><id>13316748</id><snippet>next()</snippet></ROW><ROW><id>13316748</id><snippet>next()</snippet></ROW><ROW><id>13316748</id><snippet>readline()</snippet></ROW><ROW><id>13316748</id><snippet>.next()</snippet></ROW><ROW><id>13316748</id><snippet>.readline()</snippet></ROW><ROW><id>13316828</id><snippet>dict</snippet></ROW><ROW><id>13316828</id><snippet>dict</snippet></ROW><ROW><id>13316828</id><snippet>set</snippet></ROW><ROW><id>13316828</id><snippet>list</snippet></ROW><ROW><id>13316828</id><snippet>string</snippet></ROW><ROW><id>13316828</id><snippet>unicode</snippet></ROW><ROW><id>13316939</id><snippet>myFunction.m</snippet></ROW><ROW><id>13316939</id><snippet>function myFunction(v_input, directory, file_name)

    vid = videoinput(v_input);
    img = getsnapshot(vid);
    location = [directory file_name]
    imwrite(img, location,'png');
</snippet></ROW><ROW><id>13316939</id><snippet>mlabwrap.mlab</snippet></ROW><ROW><id>13316939</id><snippet>mlabwrap.mlab</snippet></ROW><ROW><id>13316939</id><snippet>&gt;&gt;&gt; from mlabwrap import mlab
&gt;&gt;&gt; mlab.myFunction('testadaptor', './', 'image.png')
</snippet></ROW><ROW><id>13316939</id><snippet>AttributeError</snippet></ROW><ROW><id>13316939</id><snippet>&gt;&gt;&gt; mlab.path(mlab.path(), 'C:\function\directory')
</snippet></ROW><ROW><id>13316939</id><snippet>MLabObjectProxy</snippet></ROW><ROW><id>13316967</id><snippet>-F</snippet></ROW><ROW><id>13316967</id><snippet>Content-Type</snippet></ROW><ROW><id>13316967</id><snippet>multipart/form-data</snippet></ROW><ROW><id>13316967</id><snippet>data</snippet></ROW><ROW><id>13316967</id><snippet>Content-Type</snippet></ROW><ROW><id>13316967</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>13316967</id><snippet>Content-Type</snippet></ROW><ROW><id>13317020</id><snippet>getResultsFromDatabase</snippet></ROW><ROW><id>13317095</id><snippet>list.count(element)</snippet></ROW><ROW><id>13317095</id><snippet>my_lists = [[1,2,3,4], [2,3,4,5], [5,6,7,5]]
[l.count(3) for l in my_lists]
&gt;&gt; [1, 1, 0]
</snippet></ROW><ROW><id>13317528</id><snippet>paddle1_pos[1]</snippet></ROW><ROW><id>13317528</id><snippet>class BoundedInt(int):
    def __new__(cls, *args, **kwargs):
        lower, upper = kwargs.pop('bounds')

        val = int.__new__(cls, *args, **kwargs)
        if val &lt; lower:
            val = lower
        elif val &gt; upper:
            val = upper

        val = super(BoundedInt, cls).__new__(cls, val)
        val._bounds = [lower, upper]
        return val

    def __add__(self, other):
        return BoundedInt(int(self)+other, bounds=self._bounds)
    __iadd__ = __add__

    def __sub__(self, other):
        return BoundedInt(int(self)-other, bounds=self._bounds)
    __isub__ = __sub__

    def __mul__(self, other):
        return BoundedInt(int(self)*other, bounds=self._bounds)
    __imul__ = __mul__

    # etc, etc...

if __name__ == '__main__':
    v = BoundedInt(100, bounds=[0,100])
    print type(v), v
    v += 10
    print type(v), v
    w = v + 10
    print type(w), w
    x = v - 110
    print type(x), x
</snippet></ROW><ROW><id>13317528</id><snippet>&lt;class '__main__.BoundedInt'&gt; 100
&lt;class '__main__.BoundedInt'&gt; 100
&lt;class '__main__.BoundedInt'&gt; 100
&lt;class '__main__.BoundedInt'&gt; 0
</snippet></ROW><ROW><id>13317609</id><snippet>.part</snippet></ROW><ROW><id>13317609</id><snippet>ls -t &lt;dirname&gt;</snippet></ROW><ROW><id>13317609</id><snippet>commands</snippet></ROW><ROW><id>13317609</id><snippet># result = output of ls -t
result = result.split('\n')[1].split(' ')[-1]
</snippet></ROW><ROW><id>13317609</id><snippet>while</snippet></ROW><ROW><id>13317609</id><snippet>os.rename</snippet></ROW><ROW><id>13317662</id><snippet>install_name_tool</snippet></ROW><ROW><id>13317662</id><snippet>install_name_tool -change old-lib-path new-lib-path path-to.so
</snippet></ROW><ROW><id>13317662</id><snippet>new-path</snippet></ROW><ROW><id>13317662</id><snippet>old-path</snippet></ROW><ROW><id>13317662</id><snippet>man</snippet></ROW><ROW><id>13317662</id><snippet>install_name_tool</snippet></ROW><ROW><id>13317756</id><snippet>lowest_id = min(items, key=lambda i: i['score'])['_id']
</snippet></ROW><ROW><id>13318186</id><snippet>class MyClass(object):
    def __init__(self, version):
        self.version = version
    def __repr__(self):
        return self.version

myObjs = {}
o = MyClass("1")
myObjs[o] = o
print type(o)                                                                   
print o.__class__                                                               
print myObjs                                                                    
print type(myObjs[o])
</snippet></ROW><ROW><id>13318186</id><snippet>&lt;class '__main__.MyClass'&gt;
&lt;class '__main__.MyClass'&gt;
{1: 1}
&lt;class '__main__.MyClass'&gt;
</snippet></ROW><ROW><id>13318186</id><snippet>__repr__</snippet></ROW><ROW><id>13318186</id><snippet>__str__</snippet></ROW><ROW><id>13318186</id><snippet>__repr__</snippet></ROW><ROW><id>13318186</id><snippet>__repr__</snippet></ROW><ROW><id>13318186</id><snippet>def __repr__(self):
    return '{0}({1})'.format(str(self.__class__.__name__), self.version)
</snippet></ROW><ROW><id>13318186</id><snippet>{MyClass(1): MyClass(1)}
</snippet></ROW><ROW><id>13318186</id><snippet>print type(o)
</snippet></ROW><ROW><id>13318186</id><snippet>&lt;type 'instance'&gt;
</snippet></ROW><ROW><id>13318250</id><snippet>tags = models.ManyToManyField(Tag,related_name='photos')
</snippet></ROW><ROW><id>13318415</id><snippet>app.url_map</snippet></ROW><ROW><id>13318415</id><snippet>werkzeug.routing.Map</snippet></ROW><ROW><id>13318415</id><snippet>Rule</snippet></ROW><ROW><id>13318415</id><snippet>iter_rules</snippet></ROW><ROW><id>13318415</id><snippet>from flask import Flask, render_template, url_for

app = Flask(__name__)

@app.route("/site-map")
def site_map():
    links = []
    for rule in app.url_map.iter_rules():
        # Filter out rules we can't navigate to in a browser
        # and rules that require parameters
        if "GET" in rule.methods and len(rule.defaults) &gt;= len(rule.arguments):
            url = url_for(rule.endpoint)
            links.append((url, rule.endpoint))
    # links is now a list of url, endpoint tuples
</snippet></ROW><ROW><id>13318678</id><snippet>for entry in soup2:
    if entry.findAll(text=re.compile("Today")):
        print entry
</snippet></ROW><ROW><id>13318826</id><snippet>    python 3.2

    #   if you want to find how many rows in your list has 9999
    v=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,90,1,9999,0,0,0,0,0,0,0,00,0]]

    len([i for i in v if 9999 in i])




 #   if any element in your rows is 9999 then all the elements of that row 
 # cannot be 0. then if you want to know how many rows have all the elements 0.


     len([i for i in v if sum(i)==0])
</snippet></ROW><ROW><id>13318839</id><snippet>smallcustdict[custID1] = customerdict[custID1]
smallcustdict[custID2] = customerdict[custID2]
</snippet></ROW><ROW><id>13318839</id><snippet>smallcustdict[custID1] = customerdict[custID1].copy()
smallcustdict[custID2] = customerdict[custID2].copy()
</snippet></ROW><ROW><id>13318839</id><snippet>customerdict</snippet></ROW><ROW><id>13318839</id><snippet>sim_pearson()</snippet></ROW><ROW><id>13318916</id><snippet>i = 0
for files in info['files']:
    if i &lt; max_files:
        # ...
    else:
        break
</snippet></ROW><ROW><id>13318916</id><snippet>for file in info['files'][:max_files]:
    # ...
</snippet></ROW><ROW><id>13318916</id><snippet>Torrent</snippet></ROW><ROW><id>13318916</id><snippet>Piece</snippet></ROW><ROW><id>13318916</id><snippet>File</snippet></ROW><ROW><id>13319084</id><snippet>pyab = sum([y for y in array1 if y&gt;0.9 and y&lt;=1.8])/10000
</snippet></ROW><ROW><id>13319084</id><snippet>pyab = len([y for y in array1 if y&gt;0.9 and y&lt;=1.8])/len(array1)
</snippet></ROW><ROW><id>13319084</id><snippet>len(array1)</snippet></ROW><ROW><id>13319091</id><snippet>%</snippet></ROW><ROW><id>13319091</id><snippet>'...%r...' % (j,)
</snippet></ROW><ROW><id>13319098</id><snippet>reduce</snippet></ROW><ROW><id>13319098</id><snippet>count</snippet></ROW><ROW><id>13319098</id><snippet>1</snippet></ROW><ROW><id>13319098</id><snippet>reduce</snippet></ROW><ROW><id>13319098</id><snippet>reduce</snippet></ROW><ROW><id>13319098</id><snippet>var R = function (key, values) {
  var sum = 0;
  values.forEach(function(x) {
    sum += x.count;
  });
  var result = {
    count : sum 
  };
  return result;
}
</snippet></ROW><ROW><id>13319427</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0,10,31)

fig = plt.figure()
ax = fig.add_subplot(1,1,1)

#Plot analytic solution
ax.plot(x,1*x**2, color='r', label="t = 25")
ax.plot(x,2*x**2, color='b', label="t = 50")
ax.plot(x,3*x**2, color='g', label="t = 500")

#Plot simulation
ax.plot(x,1*x**2, color='r', linestyle='', marker='o')
ax.plot(x,2*x**2, color='b', linestyle='', marker='o')
ax.plot(x,3*x**2, color='g', linestyle='', marker='o')

#Get artists and labels for legend and chose which ones to display
handles, labels = ax.get_legend_handles_labels()
display = (0,1,2)

#Create custom artists
simArtist = plt.Line2D((0,1),(0,0), color='k', marker='o', linestyle='')
anyArtist = plt.Line2D((0,1),(0,0), color='k')

#Create legend from custom artist/label lists
ax.legend([handle for i,handle in enumerate(handles) if i in display]+[simArtist,anyArtist],
          [label for i,label in enumerate(labels) if i in display]+['Simulation', 'Analytic'])

plt.show()
</snippet></ROW><ROW><id>13319479</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>13319479</id><snippet>import itertools
lists = [[1,2,3,4],
         [1,2,3],
         [0,3,4]]
print [sum(x) for x in itertools.izip_longest(*lists, fillvalue=0)]
# prints [2, 7, 10, 4]
</snippet></ROW><ROW><id>13319596</id><snippet>try:
    sender = re.search('&lt;?([^&lt;&gt;]+)&gt;?$',mail.sender).group(1)
except AttributeError:
    ...
</snippet></ROW><ROW><id>13319731</id><snippet>win32file.ReadFile()</snippet></ROW><ROW><id>13319731</id><snippet>data = win32file.ReadFile(fileHandle, 4096)
if data[0] == 0:
  print data[1]
else:
  print 'ERROR', data[0]
</snippet></ROW><ROW><id>13320020</id><snippet>tox.ini</snippet></ROW><ROW><id>13320020</id><snippet>setup.py</snippet></ROW><ROW><id>13320020</id><snippet># content of: tox.ini , put in same dir as setup.py
[tox]
envlist = py26,py27
[testenv]
deps=pytest       # install pytest in the venvs
commands=py.test  # or 'nosetests' or ...
</snippet></ROW><ROW><id>13320020</id><snippet>deps</snippet></ROW><ROW><id>13320020</id><snippet>commands</snippet></ROW><ROW><id>13320020</id><snippet>deps=
    lxml
    psycopg2
    pytest
commands=
    ./some_other_script.sh
    py.test
</snippet></ROW><ROW><id>13320022</id><snippet>from keyword import kwlist

def bad_name(name):
    return name in dir(__builtins__) + kwlist
</snippet></ROW><ROW><id>13320022</id><snippet>abs                 all                 any                 ascii
bin                 bool                bytearray           bytes
callable            chr                 classmethod         compile
complex             copyright           credits             delattr
dict                dir                 divmod              enumerate
eval                exec                exit                filter
float               format              frozenset           getattr
globals             hasattr             hash                help
hex                 id                  input               int
isinstance          issubclass          iter                len
license             list                locals              map
max                 memoryview          min                 next
object              oct                 open                ord
pow                 print               property            quit
range               repr                reversed            round
set                 setattr             slice               sorted
staticmethod        str                 sum                 super
tuple               type                vars                zip
</snippet></ROW><ROW><id>13320022</id><snippet>False               None                True                and
as                  assert              break               class
continue            def                 del                 elif
else                except              finally             for
from                global              if                  import
in                  is                  lambda              nonlocal
not                 or                  pass                raise
return              try                 while               with
yield
</snippet></ROW><ROW><id>13320059</id><snippet>creationdate</snippet></ROW><ROW><id>13320059</id><snippet>request.user</snippet></ROW><ROW><id>13320059</id><snippet>"per-day-entries-{0}-{1}".format(request.user.username, creationdate)
</snippet></ROW><ROW><id>13320504</id><snippet>all([x1,x2,...])</snippet></ROW><ROW><id>13320504</id><snippet>x1 and x2 and ...</snippet></ROW><ROW><id>13320504</id><snippet>x1 or x2 or ...</snippet></ROW><ROW><id>13320504</id><snippet>&gt;&gt;&gt; all([True, True])
True
&gt;&gt;&gt; all([True, False])
False
</snippet></ROW><ROW><id>13320504</id><snippet>any()</snippet></ROW><ROW><id>13320504</id><snippet>&gt;&gt;&gt; any([True,False])
True
</snippet></ROW><ROW><id>13320781</id><snippet>&lt;a class="post-title" href ="{{ permalink }}"&gt;{{ i.content }}&lt;/a&gt;
&lt;img src="/img?img_id={{ i.key.urlsafe() }}"&gt;&lt;/img&gt;
</snippet></ROW><ROW><id>13320781</id><snippet>class ImageHandler(BlogHandler):
def get(self):
    img_key = ndb.Key(urlsafe=self.request.get('img_id'))
    image = img_key.get()
    if image.image:
        self.response.headers['Content-Type'] = 'image/png'
        self.response.out.write(image.image)
    else:
        self.response.out.write('No image')  
</snippet></ROW><ROW><id>13320930</id><snippet>. /etc/rc.d/init.d/functions

. /etc/sysconfig/network

APP_PATH=/path/to/your/app
PYTHON=/usr/local/bin/python
USER=user

start() {
    cd $APP_PATH
    zdaemon -C app.zdconf start
}

stop() {
    cd $APP_PATH
    zdaemon -C app.zdconf stop
}

check_status() {
        cd $APP_PATH
        zdaemon -C app.zdconf status
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        check_status
        ;;
  restart)
        stop
        start
        ;;
  *)

esac
exit 0
</snippet></ROW><ROW><id>13321185</id><snippet>print(Decimal(QUOTIENT)*7)==ORIG_NUM</snippet></ROW><ROW><id>13321185</id><snippet>print</snippet></ROW><ROW><id>13321185</id><snippet>None</snippet></ROW><ROW><id>13321185</id><snippet>Fraction</snippet></ROW><ROW><id>13321185</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; x = 476939688738611836995535477357070857939902076027788232031989775824606225595773435668861833
&gt;&gt;&gt; f = Fraction(x, 7)
&gt;&gt;&gt; print(f)
476939688738611836995535477357070857939902076027788232031989775824606225595773435668861833/7
&gt;&gt;&gt; f * 7 == x
True
</snippet></ROW><ROW><id>13321481</id><snippet>m2m_changed</snippet></ROW><ROW><id>13321694</id><snippet>(graph.builder()
    .push(root)
    .push(n1)
    .arc(arcType) #root-arc-n1 error is there
    .push(n2)
)
</snippet></ROW><ROW><id>13321694</id><snippet>graph.builder(lambda g: g
    .push(root)
    .push(n1)
    .arc(arcType) #root-arc-n1 error is there
    .push(n2)
)
</snippet></ROW><ROW><id>13321722</id><snippet>return some_function()</snippet></ROW><ROW><id>13321722</id><snippet>some_function()</snippet></ROW><ROW><id>13321722</id><snippet>myview()</snippet></ROW><ROW><id>13321722</id><snippet>return HttpResponse("This should not appear")</snippet></ROW><ROW><id>13321722</id><snippet>some_function()</snippet></ROW><ROW><id>13321722</id><snippet>return</snippet></ROW><ROW><id>13321722</id><snippet>myview()</snippet></ROW><ROW><id>13321722</id><snippet>return</snippet></ROW><ROW><id>13321722</id><snippet>def my_view(request):

    if request['x'] == 'a':
        return function_a()
    elif request['x'] == 'b':
        return function_b()

    return some_other_response()
</snippet></ROW><ROW><id>13321722</id><snippet>function_x()</snippet></ROW><ROW><id>13321779</id><snippet>import cherrypy
import os.path
import struct
from auth import AuthController, require, member_of, name_is

class Server(object):
    led_power=0 
    led_switch=1 #Initial LED on

_cp_config = {
    'tools.sessions.on': True,
    'tools.auth.on': True
}   
auth = AuthController()      
@cherrypy.expose
@require()
def index(self,  switch='', power=''):
    if switch:
        self.led_switch = int(switch)
    if power:
        self.led_power = int(power)  

    html = open('led.html','r').read()

    if self.led_switch:
        print "ON"
    else:
        print "OFF"

    if self.led_power:
        print "Logout"
        AuthController().logout()

        return html
    index.exposed = True


conf = {
    'global' : { 
        'server.socket_host': '0.0.0.0', #0.0.0.0 or specific IP
        'server.socket_port': 8080 #server port
    },

    '/images': { #images served as static files
        'tools.staticdir.on': True,
        'tools.staticdir.dir': os.path.abspath('images')
    },

    '/favicon.ico': {  #favorite icon
        'tools.staticfile.on': True,  
        'tools.staticfile.filename': os.path.abspath("images/bulb.ico")
    }
}
cherrypy.quickstart(Server(), config=conf)
</snippet></ROW><ROW><id>13321944</id><snippet>from gevent import monkey; monkey.patch_all()
</snippet></ROW><ROW><id>13321944</id><snippet>class MyHandler(tornado.web.RequestHandler):
     @gasync
     def get(self):
         # Parse the input data in some fashion
         data = get_data_from_request()

         # This could be anything using python sockets, urllib ...
         backend_response = send_data_to_backend(data)

         # Write data to HTTP client
         self.write(backend_response)

         # You have to finish the response yourself since it's asynchronous
         self.finish()
</snippet></ROW><ROW><id>13322071</id><snippet>from array import *

points = [0.5, 1, -0.5]
data = array('f', points)
# data.tostring() - returns packed data with size of len(data.tostring())
</snippet></ROW><ROW><id>13322581</id><snippet>lxml.etree.XMLParser</snippet></ROW><ROW><id>13322581</id><snippet>recover=True</snippet></ROW><ROW><id>13322581</id><snippet>import sys
from lxml import etree

invalid_xml = """
&lt;field name="id"&gt;abcdef&lt;/field&gt;
&lt;field name="intro" &gt; pqrst&lt;/field&gt;
&lt;field name="desc"&gt; this is a test file. We will show 5&gt;2 and 3&lt;5 and
try to remove non xml compatible characters.&lt;/field&gt;
"""
root = etree.fromstring("&lt;root&gt;%s&lt;/root&gt;" % invalid_xml,
                        parser=etree.XMLParser(recover=True))
root.getroottree().write(sys.stdout)
</snippet></ROW><ROW><id>13322581</id><snippet>&lt;root&gt;
&lt;field name="id"&gt;abcdef&lt;/field&gt;
&lt;field name="intro"&gt; pqrst&lt;/field&gt;
&lt;field name="desc"&gt; this is a test file. We will show 5&gt;2 and 35 and
try to remove non xml compatible characters.&lt;/field&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>13322581</id><snippet>&gt;</snippet></ROW><ROW><id>13322581</id><snippet>&gt;</snippet></ROW><ROW><id>13322581</id><snippet>&lt;</snippet></ROW><ROW><id>13322581</id><snippet>re.split()</snippet></ROW><ROW><id>13322581</id><snippet>import re
from itertools import izip_longest
from xml.sax.saxutils import escape  # '&lt;' -&gt; '&lt;'

# assumptions:
#   doc = *( start_tag / end_tag / text )
#   start_tag = '&lt;' name *attr [ '/' ] '&gt;'
#   end_tag = '&lt;' '/' name '&gt;'
ws = r'[ \t\r\n]*'  # allow ws between any token
name = '[a-zA-Z]+'  # note: expand if necessary but the stricter the better
attr = '{name} {ws} = {ws} "[^"]*"'  # note: fragile against missing '"'; no "'"
start_tag = '&lt; {ws} {name} {ws} (?:{attr} {ws})* /? {ws} &gt;'
end_tag = '{ws}'.join(['&lt;', '/', '{name}', '&gt;'])
tag = '{start_tag} | {end_tag}'

assert '{{' not in tag
while '{' in tag: # unwrap definitions
    tag = tag.format(**vars())

tag_regex = re.compile('(%s)' % tag, flags=re.VERBOSE)

# escape &amp;, &lt;, &gt; in the text
iters = [iter(tag_regex.split(invalid_xml))] * 2
pairs = izip_longest(*iters, fillvalue='')  # iterate 2 items at a time
print(''.join(escape(text) + tag for text, tag in pairs))
</snippet></ROW><ROW><id>13322581</id><snippet>'{ws}'</snippet></ROW><ROW><id>13322581</id><snippet>&lt;field name="id"&gt;abcdef&lt;/field&gt;
&lt;field name="intro" &gt; pqrst&lt;/field&gt;
&lt;field name="desc"&gt; this is a test file. We will show 5&gt;2 and 3&lt;5 and
try to remove non xml compatible characters.&lt;/field&gt;
</snippet></ROW><ROW><id>13322581</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>13322581</id><snippet>escape(text)</snippet></ROW><ROW><id>13322581</id><snippet>def escape4human(text):
    return text.replace('&lt;', 'less than').replace('&gt;', 'greater than')
</snippet></ROW><ROW><id>13322646</id><snippet>float.__str__</snippet></ROW><ROW><id>13322646</id><snippet>In [22]: str( 41063625 ** (1.0/3) )
Out[22]: '345.0'
</snippet></ROW><ROW><id>13322646</id><snippet>41063625 ** (1.0/3)</snippet></ROW><ROW><id>13322646</id><snippet>int</snippet></ROW><ROW><id>13322646</id><snippet>In [15]: 41063625 ** (1.0/3)
Out[15]: 344.9999999999999

In [16]: int(345.0)
Out[16]: 345

In [17]: int(41063625 ** (1.0/3))
Out[17]: 344
</snippet></ROW><ROW><id>13322646</id><snippet>In [18]: round(41063625 ** (1.0/3))
Out[18]: 345.0
</snippet></ROW><ROW><id>13322646</id><snippet>int</snippet></ROW><ROW><id>13322646</id><snippet>In [19]: int(round(41063625 ** (1.0/3)))
Out[19]: 345
</snippet></ROW><ROW><id>13322724</id><snippet>def height(node):
    if node is None:
        return 0
    else:
        return max(height(node.left), height(node.right)) + 1
</snippet></ROW><ROW><id>13322855</id><snippet>board</snippet></ROW><ROW><id>13322855</id><snippet>str</snippet></ROW><ROW><id>13322855</id><snippet>board[i]</snippet></ROW><ROW><id>13322855</id><snippet>str</snippet></ROW><ROW><id>13322855</id><snippet>print(board[i])</snippet></ROW><ROW><id>13322855</id><snippet>print(''.join(board[i]))
</snippet></ROW><ROW><id>13322874</id><snippet>import re

if re.search(r'(.)\1\1', mystr):
   print "Has triple letters"
</snippet></ROW><ROW><id>13322932</id><snippet>pix[x, y]
</snippet></ROW><ROW><id>13322932</id><snippet>t = x, y
pix[t]
</snippet></ROW><ROW><id>13322932</id><snippet>t = (x, y)
pix[t]
</snippet></ROW><ROW><id>13322932</id><snippet>pix[(x, y)]
</snippet></ROW><ROW><id>13322932</id><snippet>l[1 if skip else 0]</snippet></ROW><ROW><id>13323100</id><snippet>sys.getsizeof</snippet></ROW><ROW><id>13323100</id><snippet>None</snippet></ROW><ROW><id>13323100</id><snippet>In [26]: import pympler.asizeof as asizeof

In [27]: asizeof.asizeof({'a': None})
Out[27]: 168

In [28]: asizeof.asizeof({})
Out[28]: 136

In [29]: import sys

In [30]: 
In [31]: sys.getsizeof({})
Out[31]: 136

In [34]: sys.getsizeof({'a':None})
Out[34]: 136
</snippet></ROW><ROW><id>13323209</id><snippet>TopLevel</snippet></ROW><ROW><id>13323209</id><snippet>self.transient(parent)</snippet></ROW><ROW><id>13323453</id><snippet>UPDATE CorpData
SET OperationID4Counter =
      (SELECT COUNT(*)
       FROM PlantData JOIN OperationData
                      ON PlantName LIKE '%' || OperationName
       WHERE OperationData.OperationID IN (SELECT OperationID
                                           FROM ServiceData
                                           WHERE ServiceID = 4)
         AND CorpID = CorpData.CorpID)
</snippet></ROW><ROW><id>13323859</id><snippet>__name__</snippet></ROW><ROW><id>13323859</id><snippet>'__main__'</snippet></ROW><ROW><id>13323859</id><snippet>http.server</snippet></ROW><ROW><id>13323859</id><snippet>python3 -m http.server</snippet></ROW><ROW><id>13323859</id><snippet>http.server</snippet></ROW><ROW><id>13323859</id><snippet>__name__ == '__main__</snippet></ROW><ROW><id>13323859</id><snippet>main</snippet></ROW><ROW><id>13323859</id><snippet>main</snippet></ROW><ROW><id>13323859</id><snippet>main()</snippet></ROW><ROW><id>13323859</id><snippet>if __main__ == '__main__':</snippet></ROW><ROW><id>13323859</id><snippet>def main ():
    # doing something
    utilityFunction(...)
    otherUtilityFunction(...)

def utilityFunction (...):
    ...
def otherUtilityFunction (...):
    ...

main()
</snippet></ROW><ROW><id>13323859</id><snippet>main()</snippet></ROW><ROW><id>13323859</id><snippet>main()</snippet></ROW><ROW><id>13323859</id><snippet>main()</snippet></ROW><ROW><id>13323912</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(xml_data, 'xml')
head_datas = [head.get_text() for head in soup.find_all('head')]

head_datas
&gt;&gt;&gt; [' explains ', ' explain ', ' explained ', ' positions ', ' position ']
</snippet></ROW><ROW><id>13323912</id><snippet>.string</snippet></ROW><ROW><id>13323912</id><snippet>&lt;head&gt;</snippet></ROW><ROW><id>13323912</id><snippet>head_datas = [head.string for head in soup.find_all('head')]
</snippet></ROW><ROW><id>13323971</id><snippet>for i in person_results:
    bads = []
    if i[1]&gt;i[3] or i[1]&lt;i[2]:
        bads.append(i[0])
return bads
</snippet></ROW><ROW><id>13324026</id><snippet>&gt;&gt;&gt; p = ['1', '2', '3', '3', '3', '3', '3']
&gt;&gt;&gt; set(p)
set(['1', '2', '3'])
</snippet></ROW><ROW><id>13324026</id><snippet>count</snippet></ROW><ROW><id>13324026</id><snippet>&gt;&gt;&gt; list1 = ['a', 'b', 'c']
&gt;&gt;&gt; list2 = ['a', 'b', 'c', 'c', 'c']
&gt;&gt;&gt; results = {}
&gt;&gt;&gt; for i in list1:
        results[i] = list2.count(i) 
&gt;&gt;&gt; results
{'a': 1, 'c': 3, 'b': 1}
</snippet></ROW><ROW><id>13324026</id><snippet>results</snippet></ROW><ROW><id>13324026</id><snippet>list1</snippet></ROW><ROW><id>13324026</id><snippet>results</snippet></ROW><ROW><id>13324026</id><snippet>list2</snippet></ROW><ROW><id>13324026</id><snippet>&gt;&gt;&gt; words = ['red', 'blue', 'yellow', 'black']
&gt;&gt;&gt; list1 = ['the', 'black', 'dog']
&gt;&gt;&gt; list2 = ['the', 'blue', 'blue', 'dog']
&gt;&gt;&gt; results1 = 0
&gt;&gt;&gt; results2 = 0
&gt;&gt;&gt; for w in words:
        results1 += list1.count(w)
        results2 += list2.count(w)

&gt;&gt;&gt; results1
1
&gt;&gt;&gt; results2
2
</snippet></ROW><ROW><id>13324026</id><snippet>words</snippet></ROW><ROW><id>13324026</id><snippet>list1</snippet></ROW><ROW><id>13324026</id><snippet>results1</snippet></ROW><ROW><id>13324026</id><snippet>list2</snippet></ROW><ROW><id>13324026</id><snippet>results2</snippet></ROW><ROW><id>13324026</id><snippet>Counter</snippet></ROW><ROW><id>13324026</id><snippet>collections</snippet></ROW><ROW><id>13324026</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; results3 = Counter()
&gt;&gt;&gt; for w in words:
        results3[w] = list2.count(w)

&gt;&gt;&gt; results3
Counter({'blue': 2, 'black': 0, 'yellow': 0, 'red': 0})
&gt;&gt;&gt; sum(results3.values())
2
</snippet></ROW><ROW><id>13324123</id><snippet>sklearn.preprocessing</snippet></ROW><ROW><id>13324123</id><snippet>&gt;&gt;&gt; from sklearn import preprocessing
&gt;&gt;&gt; X = [[ 1., -1.,  2.],
...      [ 2.,  0.,  0.],
...      [ 0.,  1., -1.]]
&gt;&gt;&gt; X_scaled = preprocessing.scale(X)

&gt;&gt;&gt; X_scaled                                          
array([[ 0.  ..., -1.22...,  1.33...],
       [ 1.22...,  0.  ..., -0.26...],
       [-1.22...,  1.22..., -1.06...]])
</snippet></ROW><ROW><id>13324128</id><snippet>blogs</snippet></ROW><ROW><id>13324128</id><snippet>blogs</snippet></ROW><ROW><id>13324128</id><snippet>Blog</snippet></ROW><ROW><id>13324128</id><snippet>QuerySet</snippet></ROW><ROW><id>13324128</id><snippet>blogs = Blog.objects.all()
return render_to_response(..., {'blogs':blogs,...} ...}
</snippet></ROW><ROW><id>13324128</id><snippet>render_to_response(template_name[, dictionary][, context_instance][, mimetype])
</snippet></ROW><ROW><id>13324128</id><snippet>{'categories': Category.objects.all(), 'posts': Blog.objects.filter(posted__lte=datetime.now()).order_by('-posted', 'title')}</snippet></ROW><ROW><id>13324128</id><snippet>context_instance=RequestContext(request)</snippet></ROW><ROW><id>13324313</id><snippet>while ip['cp'] != []:
</snippet></ROW><ROW><id>13324313</id><snippet>while ip['cp']:
</snippet></ROW><ROW><id>13324313</id><snippet>ip['cp']</snippet></ROW><ROW><id>13324313</id><snippet>[], None, ''</snippet></ROW><ROW><id>13324313</id><snippet>if   ip['dp'] == '&gt;': ip['cp'].next()
elif ip['dp'] == '&lt;': ip['cp'].prev()
else: raise NameError('incorrect dp-value')
</snippet></ROW><ROW><id>13324313</id><snippet>if ip['dp'] == '&gt;': 
    ip['cp'].next()
elif ip['dp'] == '&lt;':
    ip['cp'].prev()
else: 
    raise NameError('incorrect dp-value')
</snippet></ROW><ROW><id>13324313</id><snippet>  if( cp-&gt;val == '0' )
  { cp-&gt;prev-&gt;next = cp-&gt;next; cp-&gt;next-&gt;prev = cp-&gt;prev; }
  else cp-&gt;val--;
</snippet></ROW><ROW><id>13324313</id><snippet>  if ip['cp'] == '0': ip['cp']  = []
  else:               ip['cp'] -= 1
</snippet></ROW><ROW><id>13324313</id><snippet>0</snippet></ROW><ROW><id>13324313</id><snippet>iter()</snippet></ROW><ROW><id>13324313</id><snippet>iterable = iter('string')
iterable.next() == 's'
iterable.next() == 't'
... Until StopIteration is raised

for i in iter('string'):
</snippet></ROW><ROW><id>13324313</id><snippet>for i in 'string':
</snippet></ROW><ROW><id>13324313</id><snippet>C</snippet></ROW><ROW><id>13324327</id><snippet>__init__</snippet></ROW><ROW><id>13324327</id><snippet>brighten()</snippet></ROW><ROW><id>13324327</id><snippet>from Tkinter import *</snippet></ROW><ROW><id>13324327</id><snippet>from Tkinter import Frame, Tk, Label, Button</snippet></ROW><ROW><id>13324327</id><snippet>Image</snippet></ROW><ROW><id>13324327</id><snippet>from module import *</snippet></ROW><ROW><id>13324327</id><snippet>from Tkinter import Frame, Tk, Label, Button
from PIL import Image, ImageTk, ImageFilter

class Application(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        master.wm_title("Image examples")
        self.pack()
        self.createWidgets()

    def createWidgets(self):
        self.img = Image.open("lineage.jpg")
        self.photo1 = ImageTk.PhotoImage(self.img.convert("RGB"))
        self.label1 = Label(self, image=self.photo1)
        self.label1.grid(row=0, column=0)

        self.photo2 = ImageTk.PhotoImage(self.img.convert("RGB"))
        self.label2 = Label(self, image=self.photo2)
        self.label2.grid(row=0, column=1)

        button = Button(self, text="Brighten", command=self.brighten)
        button.grid(row=0, column=2)

    def brighten(self):
        img2 = self.img.point(lambda p: p * 1.9)
        self.photo2 = ImageTk.PhotoImage(img2)
        self.label2 = Label(self, image=self.photo2)
        self.label2.grid(row=0, column=1)

root = Tk()
app = Application(master=root)
app.mainloop()
root.destroy()
</snippet></ROW><ROW><id>13324381</id><snippet>ndarray</snippet></ROW><ROW><id>13324381</id><snippet>names</snippet></ROW><ROW><id>13324381</id><snippet>train['labels']</snippet></ROW><ROW><id>13324476</id><snippet>import sys

lists = {
    "list1": ["A", "B", "C"],
    "list2": [1, 2, 3],
}

myarg = sys.argv[1]
print len(lists[myarg])
</snippet></ROW><ROW><id>13324570</id><snippet>$ echo -ne "GET /index.php HTTP/1.1\r\nHost: book.libertorrent.com\r\n\r\n" | nc book.libertorrent.com 80 | head -n 10
HTTP/1.1 200 OK
WWW
Date: Sat, 10 Nov 2012 17:41:57 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Content-Language: ru

1f57
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;&lt;html dir="ltr"&gt;
</snippet></ROW><ROW><id>13324609</id><snippet>c.append(b[j])
</snippet></ROW><ROW><id>13324609</id><snippet>c</snippet></ROW><ROW><id>13324609</id><snippet>b[j]</snippet></ROW><ROW><id>13324609</id><snippet>b</snippet></ROW><ROW><id>13324609</id><snippet>c</snippet></ROW><ROW><id>13324609</id><snippet>a</snippet></ROW><ROW><id>13324609</id><snippet>import copy
b = sorted (copy.deepcopy(a), lambda a : a[1])
</snippet></ROW><ROW><id>13324693</id><snippet>names = True</snippet></ROW><ROW><id>13324727</id><snippet>int(a,16)</snippet></ROW><ROW><id>13324727</id><snippet>hex</snippet></ROW><ROW><id>13324727</id><snippet>[2:]</snippet></ROW><ROW><id>13324727</id><snippet>stra = 'abc'
strb = 'abd'
''.join(hex( int(a,16) ^ int(b,16) )[2:] for a,b in zip(stra, strb))
</snippet></ROW><ROW><id>13324730</id><snippet>eval("L[%s]" % S) 
</snippet></ROW><ROW><id>13324738</id><snippet>def identity(lst):
    for i in lst:
        for j in i:
            if i == j and lst[i][j] == 1:
                if i != j and lst[i][j] == 0:
                    return True
    return False
</snippet></ROW><ROW><id>13324738</id><snippet>for i in lst:
    for j in i:
        print "i:", i, "j:", j
    print
</snippet></ROW><ROW><id>13324738</id><snippet>i: [1, 0, 0] j: 1
i: [1, 0, 0] j: 0
i: [1, 0, 0] j: 0

i: [0, 1, 0] j: 0
i: [0, 1, 0] j: 1
i: [0, 1, 0] j: 0

i: [0, 0, 1] j: 0
i: [0, 0, 1] j: 0
i: [0, 0, 1] j: 1
</snippet></ROW><ROW><id>13324738</id><snippet>if i == j and lst[i][j] == 1:
    if i != j and lst[i][j] == 0: # you never reach below here 
        return True               # because i == j is always true in here
                                  # provided by the first conditional
</snippet></ROW><ROW><id>13324738</id><snippet>return True</snippet></ROW><ROW><id>13324738</id><snippet>return False</snippet></ROW><ROW><id>13324738</id><snippet>return True</snippet></ROW><ROW><id>13324805</id><snippet>int</snippet></ROW><ROW><id>13324805</id><snippet>if answer == 1:</snippet></ROW><ROW><id>13324903</id><snippet>In [10]: board
Out[10]: 
[[3, 7, 0, 0, 5, 0, 0, 0, 0],
 [0, 6, 0, 0, 3, 0, 2, 0, 0],
 [0, 2, 9, 4, 0, 0, 0, 7, 8],
 [0, 0, 4, 1, 7, 0, 0, 8, 0],
 [0, 0, 6, 3, 0, 5, 9, 0, 0],
 [0, 5, 0, 0, 8, 4, 1, 0, 0],
 [7, 1, 0, 0, 0, 8, 5, 6, 0],
 [0, 0, 5, 0, 1, 0, 0, 2, 0],
 [0, 0, 0, 0, 9, 0, 0, 1, 3]]

In [11]: board=[[x if x!=0 else " " for x in i] for i in board]

In [12]: board
Out[12]: 
[[3, 7, ' ', ' ', 5, ' ', ' ', ' ', ' '],
 [' ', 6, ' ', ' ', 3, ' ', 2, ' ', ' '],
 [' ', 2, 9, 4, ' ', ' ', ' ', 7, 8],
 [' ', ' ', 4, 1, 7, ' ', ' ', 8, ' '],
 [' ', ' ', 6, 3, ' ', 5, 9, ' ', ' '],
 [' ', 5, ' ', ' ', 8, 4, 1, ' ', ' '],
 [7, 1, ' ', ' ', ' ', 8, 5, 6, ' '],
 [' ', ' ', 5, ' ', 1, ' ', ' ', 2, ' '],
 [' ', ' ', ' ', ' ', 9, ' ', ' ', 1, 3]]
</snippet></ROW><ROW><id>13325038</id><snippet>xmlfile</snippet></ROW><ROW><id>13325038</id><snippet>def xml():
    with open('config\\' + productLine + '.xml','r') as f:
        return f.read()

def table():
     xmlfile = xml()
     parsexml(xmlfile)
</snippet></ROW><ROW><id>13325196</id><snippet>from string import ascii_letters
def foo(st):
    letters = ascii_letters
    letters_nd_term = letters + "?!"
    return not any([set(st[:-1]).difference(letters),st[-1] not in letters_nd_term])
</snippet></ROW><ROW><id>13325441</id><snippet>parallel --max-procs 8 &lt;&lt;EOF
  python run.py $arg1 
  python run.py $arg2 
  python run.py $arg3
  ..
EOF
</snippet></ROW><ROW><id>13325441</id><snippet>cat args.list | parallel --max-procs 8 python run.py
</snippet></ROW><ROW><id>13325468</id><snippet>print player.stats()
</snippet></ROW><ROW><id>13325468</id><snippet>player.stats() == None</snippet></ROW><ROW><id>13325468</id><snippet>player.stats()
</snippet></ROW><ROW><id>13325468</id><snippet>player.printStats()</snippet></ROW><ROW><id>13325468</id><snippet>def stats(self):
    return '\n'.join([
        self.name
        "Strength  : %d" % self.strength,
        "Dexterity : %d" % self.dexterity,
        "Hit Points: %d" % self.hit_points,
        "Aura      : %d" % self.aura,
        "Weapon    : %s" % self.weapon,
        "Spell     : %s" % self.spell,
        "Item      : %s" % self.item,
        "Element   : %s" % self.element,
        "-" * 20
    ])
</snippet></ROW><ROW><id>13325468</id><snippet>print player.stats()</snippet></ROW><ROW><id>13325474</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>13325474</id><snippet>window.blog...</snippet></ROW><ROW><id>13325474</id><snippet>';'</snippet></ROW><ROW><id>13325474</id><snippet>#!/usr/bin/env python
html = """&lt;!doctype html&gt;
&lt;title&gt;extract javascript object as json&lt;/title&gt;
&lt;script&gt;
// ..
window.blog.data = {"activity":{"type":"read"}};
// ..
&lt;/script&gt;
&lt;p&gt;some other html here
"""
import json
import re
from bs4 import BeautifulSoup
soup = BeautifulSoup(html)
script = soup.find('script', text=re.compile('window\.blog\.data'))
json_text = re.search(r'^\s*window\.blog\.data\s*=\s*({.*?})\s*;\s*$',
                      script.string, flags=re.DOTALL | re.MULTILINE).group(1)
data = json.loads(json_text)
assert data['activity']['type'] == 'read'
</snippet></ROW><ROW><id>13326023</id><snippet>import urllib
import cv 

urllib.urlretrieve("http://192.168.0.10:8080/shot.jpg", "foto.jpg")
imagen=cv.LoadImage('foto.jpg')
cv.ShowImage('Image',imagen)
</snippet></ROW><ROW><id>13326037</id><snippet>set</snippet></ROW><ROW><id>13326037</id><snippet># clients listing on the WebSocket
clients = set()

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        return self.render("index.html")

    def post(self):
        global clients

        event = self.get_argument("event")
        print "got event", event
        if not clients:
            print "No WebSockets, no point in querying the database"
            return
        for coordinate in self.get_coordinates(event):
            for client in clients:
                print "sending coordinate", coordinate, "to client", client
                client.write_message(json.dumps(coordinate,
                                                default=json_util.default))

    def get_coordinates(self, event):
        # replace with a real database query
        for coordinate in ("No", "man's", "land"):
            time.sleep(1)
            yield coordinate

class WSHandler(tornado.websocket.WebSocketHandler):
    def open(self):
        global clients
        print "WebSocket opened..."
        clients.add(self)

    def on_close(self):
        global clients
        print "WebSocket closed..."
        clients.remove(self)
</snippet></ROW><ROW><id>13326037</id><snippet>index.html</snippet></ROW><ROW><id>13326037</id><snippet>    &lt;script type="text/javascript"&gt;
        $(document).ready(function() {
            var ws;
            // open WebSocket for getting the results
            ws = new WebSocket("ws://" + location.host + "/ws");
            ws.onmessage = function(evt) {
                $("#display").append(evt.data + "&lt;br&gt;");
            };
            ws.onclose = function(evt) {alert("Server connection terminated");};

            $("#open").click(function(evt) {
                evt.preventDefault();
                $.post("/", $("#eventForm").serialize());
            });
        });
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Event follower&lt;/h1&gt;
    &lt;h2&gt;Enter the event you would like to follow&lt;/h2&gt;
    &lt;form id="eventForm" action="/" method="post"&gt;
        &lt;input type="text" name="event" /&gt;
        &lt;input type="submit" id="open" value="Submit Query" /&gt;
    &lt;/form&gt;
    &lt;h2&gt;Coordinates&lt;/h2&gt;
    &lt;div id="display"&gt;
    &lt;/div&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>13326037</id><snippet>WSHandler</snippet></ROW><ROW><id>13326037</id><snippet>clients</snippet></ROW><ROW><id>13326037</id><snippet>MainHandler.post</snippet></ROW><ROW><id>13326037</id><snippet>div</snippet></ROW><ROW><id>13326129</id><snippet>~/.local/lib64/python2.7/site-packages/usercustomize.py</snippet></ROW><ROW><id>13326129</id><snippet>import sys
import os

PYVER = sys.version_info
PATH = os.path.join(os.environ["HOME"], ".local", "lib", "python%d.%d" % (PYVER.major, PYVER.minor))

sys.path.insert(0, PATH)
</snippet></ROW><ROW><id>13326245</id><snippet>2d_dict</snippet></ROW><ROW><id>13326245</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d2_dict = defaultdict(dict)
&gt;&gt;&gt; d2_dict[('canned_food', 'food')]['spam'] = 'delicious'
&gt;&gt;&gt; d2_dict
defaultdict(&lt;type 'dict'&gt;, {('canned_food', 'food'): {'spam': 'delicious'}})
</snippet></ROW><ROW><id>13326245</id><snippet>&gt;&gt;&gt; d2_dict['fresh_food', 'food']['eggs'] = 'delicious'
&gt;&gt;&gt; d2_dict
defaultdict(&lt;type 'dict'&gt;, {('canned_food', 'food'): {'spam': 'delicious'},
('fresh_food', 'food'): {'eggs': 'delicious'}})
</snippet></ROW><ROW><id>13326245</id><snippet>&gt;&gt;&gt; d3_dict = defaultdict(lambda: defaultdict(dict))
&gt;&gt;&gt; d3_dict['dried_food']['food']['jerky'] = 'chewy'
&gt;&gt;&gt; d3_dict
defaultdict(&lt;function &lt;lambda&gt; at 0x7f20af38a2a8&gt;, 
{'dried_food': defaultdict(&lt;type 'dict'&gt;, {'food': {'jerky': 'chewy'}})})
</snippet></ROW><ROW><id>13326438</id><snippet>open</snippet></ROW><ROW><id>13326438</id><snippet>os.listdir</snippet></ROW><ROW><id>13326438</id><snippet>../myFolder</snippet></ROW><ROW><id>13326438</id><snippet>data = loadFile(os.path.join(inputFolder, aFile))
</snippet></ROW><ROW><id>13326665</id><snippet>recv</snippet></ROW><ROW><id>13326665</id><snippet>socket.error</snippet></ROW><ROW><id>13326707</id><snippet>data = json.loads(request.data)</snippet></ROW><ROW><id>13326707</id><snippet>try</snippet></ROW><ROW><id>13326707</id><snippet>execept</snippet></ROW><ROW><id>13326707</id><snippet>try:
    data = json.loads(request.data)
    row = (data['lat'], data['long'], data['address'], data['name'])
except (ValueError, KeyError, TypeError):
    # Not valid information, bail out and return an error
    return SomeErrorResponse
</snippet></ROW><ROW><id>13326707</id><snippet>request.data</snippet></ROW><ROW><id>13326707</id><snippet>data</snippet></ROW><ROW><id>13326707</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.loads('nonsense')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/json/__init__.py", line 307, in loads
    return _default_decoder.decode(s)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/json/decoder.py", line 319, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/json/decoder.py", line 338, in raw_decode
    raise ValueError("No JSON object could be decoded")
ValueError: No JSON object could be decoded
&gt;&gt;&gt; 'ouea'['abc']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: string indices must be integers, not str
&gt;&gt;&gt; [0]['oue']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: list indices must be integers, not str
&gt;&gt;&gt; {}['oue']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'oue'
</snippet></ROW><ROW><id>13326778</id><snippet>print self.RadIPAddressInfo.GetStringSelection(self) #returns selected item string
</snippet></ROW><ROW><id>13326778</id><snippet>print self.RadIPAddressInfo.GetSelection()  #returns selected index
</snippet></ROW><ROW><id>13326953</id><snippet>app.secret_key</snippet></ROW><ROW><id>13326956</id><snippet>df["group"][df["pc"] &lt; 0.66] = 2
df["group"][df["pc"] &lt; 0.33] = 1
</snippet></ROW><ROW><id>13327083</id><snippet>master.bind('s', self.sharpen)
</snippet></ROW><ROW><id>13327083</id><snippet>__init__</snippet></ROW><ROW><id>13327083</id><snippet>self</snippet></ROW><ROW><id>13327083</id><snippet>self.sharpen(event)</snippet></ROW><ROW><id>13327083</id><snippet>Tkinter.Event</snippet></ROW><ROW><id>13327083</id><snippet>def sharpen(self, event=None):
</snippet></ROW><ROW><id>13327083</id><snippet>event</snippet></ROW><ROW><id>13327083</id><snippet>None</snippet></ROW><ROW><id>13327083</id><snippet>event</snippet></ROW><ROW><id>13327083</id><snippet>Tkinter.Event</snippet></ROW><ROW><id>13327097</id><snippet>base</snippet></ROW><ROW><id>13327097</id><snippet>base : int, default 0
    For frequencies that evenly subdivide 1 day, the "origin" of the
    aggregated intervals. For example, for '5min' frequency, base could
    range from 0 through 4. Defaults to 0
</snippet></ROW><ROW><id>13327097</id><snippet>In [44]: df = pd.DataFrame(np.random.rand(28),
....:           index=pd.DatetimeIndex(start='2012/9/1', periods=28, freq='H'))

In [45]: df
Out[45]: 
                            0
2012-09-01 00:00:00  0.970273
2012-09-01 01:00:00  0.730171
2012-09-01 02:00:00  0.508588
2012-09-01 03:00:00  0.535351
2012-09-01 04:00:00  0.940255
2012-09-01 05:00:00  0.143483
2012-09-01 06:00:00  0.792659
2012-09-01 07:00:00  0.231413
2012-09-01 08:00:00  0.071676
2012-09-01 09:00:00  0.995202
2012-09-01 10:00:00  0.236551
2012-09-01 11:00:00  0.904853
2012-09-01 12:00:00  0.652873
2012-09-01 13:00:00  0.488400
2012-09-01 14:00:00  0.396647
2012-09-01 15:00:00  0.967261
2012-09-01 16:00:00  0.554188
2012-09-01 17:00:00  0.884086
2012-09-01 18:00:00  0.418577
2012-09-01 19:00:00  0.189584
2012-09-01 20:00:00  0.577041
2012-09-01 21:00:00  0.100332
2012-09-01 22:00:00  0.294672
2012-09-01 23:00:00  0.925425
2012-09-02 00:00:00  0.630807
2012-09-02 01:00:00  0.400261
2012-09-02 02:00:00  0.156469
2012-09-02 03:00:00  0.658608
</snippet></ROW><ROW><id>13327097</id><snippet>In [46]: df.resample("24H", how=sum, label='left', closed='left', base=5)
Out[46]: 
                             0
2012-08-31 05:00:00   3.684638
2012-09-01 05:00:00  11.671068

In [47]: df.ix[:5].sum()
Out[47]: 0    3.684638

In [48]: df.ix[5:].sum()
Out[48]: 0    11.671068
</snippet></ROW><ROW><id>13327098</id><snippet> message = '+*794242'
 currentLetters = set()
 currentMessage = ''

 def takeguess(letterGuess):
   if letterGuess in message:
     currentLetters.add(letterGuess)

 while message != currentMessage:
   takeguess(raw_input('Enter guess: '))
   currentMessage = ''.join([l if l in currentLetters else '-' for l in message])
   print currentMessage
</snippet></ROW><ROW><id>13327142</id><snippet>from itertools import groupby

x = [(1,2), (2,3), (0,0), (4,0), (0,1), (3,9), (2,0), (2,4)]

print [l for l in [list(group) for key, group in groupby(x, key=lambda k: k[1]==0)]
             if l[0][1] != 0]

[OUT] [[(1,2), (2,3)], [(0,1), (3,9)], [(2,4)]]
</snippet></ROW><ROW><id>13327180</id><snippet>import BaseHTTPServer, SimpleHTTPServer
import ssl
import socket
import select
import threading

FRONTEND_PORT = 4443
BACKEND_PORT_SSL = 44431
BACKEND_PORT_HTTP = 44432
HOST = 'localhost'

httpd_ssl = BaseHTTPServer.HTTPServer((HOST, BACKEND_PORT_SSL), SimpleHTTPServer.SimpleHTTPRequestHandler)
httpd_ssl.socket = ssl.wrap_socket (httpd_ssl.socket, certfile='key.pem', server_side=True)

httpd_direct = BaseHTTPServer.HTTPServer((HOST, BACKEND_PORT_HTTP), SimpleHTTPServer.SimpleHTTPRequestHandler)

def serve_forever(http_server):
    http_server.serve_forever()

def categorize(sock, addr):
    data = sock.recv(1)
    if data == '\x16':
        port = BACKEND_PORT_SSL
    else:
        port = BACKEND_PORT_HTTP
    other_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    other_sock.connect((HOST, port))
    other_sock.send(data)
    inp = [sock, other_sock]
    select_timeout = 1.0
    try:
        while 1:
            r,w,x = select.select(inp,[],[],select_timeout)
            if not r:
                continue
            for s in r:
                o_s = inp[1] if inp[0]==s else inp[0]
                buf = s.recv(4096)
                if not buf:
                    raise socket.error
                o_s.send(buf)
    except socket.error:
        pass
    finally:
        for s in inp:
            s.close()

threading.Thread(target=serve_forever, args=(httpd_ssl,)).start()
threading.Thread(target=serve_forever, args=(httpd_direct,)).start()

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.bind((HOST, FRONTEND_PORT))
sock.listen(10)

while True:
    conn, addr = sock.accept()
    threading.Thread(target=categorize, args=(conn, addr)).start()
</snippet></ROW><ROW><id>13327321</id><snippet>dateInput = raw_input("Date? (MM/DD/YYYY) ").strip()
amount_re = re.compile(r"(^%s)" % (dateInput,))
cell_list = wks.findall(amount_re)
</snippet></ROW><ROW><id>13327478</id><snippet>def crop(self):
    self.root = Tk()
    self.root.wm_title("Insert Coords")

    self.x0 = Entry(self.root)
    self.x0.grid()

    self.x1 = Entry(self.root)
    self.x1.grid()

    self.y0 = Entry(self.root)
    self.y0.grid()

    self.y1 = Entry(self.root)
    self.y1.grid()

    Button(self.root, text="Crop", command=self.close_crop).grid()

def close_crop(self):        
    self.crop1(self.x0.get(), self.x1.get(), self.y0.get(), self.y1.get())
    self.root.destroy()                

def crop1(self, x0, x1, y0, y1):
    print x0, x1, y0, y1
</snippet></ROW><ROW><id>13327708</id><snippet>root.update()</snippet></ROW><ROW><id>13327708</id><snippet>print</snippet></ROW><ROW><id>13327708</id><snippet>from Tkinter import *

root=Tk()

root.geometry('400x600')

root.update()

print (root.winfo_width())
print (root.winfo_height())
print (root.winfo_geometry())

root.mainloop()
</snippet></ROW><ROW><id>13327761</id><snippet>strtotimesince</snippet></ROW><ROW><id>13327761</id><snippet>from django.utils import timesince

@register.filter(name='strtotimesince')
def strtotimesince(value,format=None):
    if not value:
        return u''

    if not format:
        format = "%a %b %d %H:%M:%S +0000 %Y"
    try:
        convert_to_datetime = datetime.strptime(value, format)
        if convert_to_datetime:
            return "%s ago" % timesince.timesince(convert_to_datetime)
    except:
        return ''
</snippet></ROW><ROW><id>13327816</id><snippet>PARAMETERS = [
    'param1',
    'param2',
    # ...
]

meta = Meta()
for name in PARAMETERS:
    setattr(meta, name, param[name])
</snippet></ROW><ROW><id>13327816</id><snippet>DEFAULTS = {
    'param1': 1,
    'param2': 'something',
}
meta = Meta()
for name, value in DEFAULTS.items():
    setattr(meta, name, param.get(name, value))
</snippet></ROW><ROW><id>13327890</id><snippet>msim.frames[frame_num].page.name</snippet></ROW><ROW><id>13327890</id><snippet>StringVar</snippet></ROW><ROW><id>13328108</id><snippet>from PIL import Image
import subprocess

p = subprocess.Popen(["display", "/tmp/test.png"])
raw_input("Give a name for image:")
p.kill()
</snippet></ROW><ROW><id>13328132</id><snippet>def foo():
    return (1, 2, 3)

a, b, c = foo()
print(a) # prints "1"
print(b) # prints "2"
print(c) # prints "3"
</snippet></ROW><ROW><id>13328218</id><snippet>z = x</snippet></ROW><ROW><id>13328218</id><snippet>z + [6]</snippet></ROW><ROW><id>13328218</id><snippet>z</snippet></ROW><ROW><id>13328218</id><snippet>z</snippet></ROW><ROW><id>13328218</id><snippet>x</snippet></ROW><ROW><id>13328218</id><snippet>z += [6]</snippet></ROW><ROW><id>13328218</id><snippet>z</snippet></ROW><ROW><id>13328218</id><snippet>z = x[:]
z = list(x)
</snippet></ROW><ROW><id>13328237</id><snippet>def gamesplayed(self, team = None, startyear = self._firstseason, endyear = self._lastseason):
</snippet></ROW><ROW><id>13328237</id><snippet>self</snippet></ROW><ROW><id>13328237</id><snippet>self</snippet></ROW><ROW><id>13328237</id><snippet>self</snippet></ROW><ROW><id>13328237</id><snippet>this</snippet></ROW><ROW><id>13328237</id><snippet>None</snippet></ROW><ROW><id>13328255</id><snippet>import gmpy2

def primes():
    n = 2
    while True:
        yield n
        n = gmpy2.next_prime(n)
</snippet></ROW><ROW><id>13328255</id><snippet>import gmpy2

def primes2(table=None):

    def sieve(limit):
        sieve_limit = gmpy2.isqrt(limit) + 1
        limit += 1
        bitmap = gmpy2.xmpz(3)
        bitmap[4 : limit : 2] = -1
        for p in bitmap.iter_clear(3, sieve_limit):
            bitmap[p*p : limit : p+p] = -1
        return bitmap

    table_limit=1000000
    if table is None:
        table = sieve(table_limit)

    for n in table.iter_clear(2, table_limit):
        yield n

    n = table_limit
    while True:
        n = gmpy2.next_prime(n)
        yield n
</snippet></ROW><ROW><id>13328374</id><snippet>#!/usr/bin/env python
from __future__ import print_function
import glob
import shutil
import sys

dstdir = "/Users/Desktop"
for file in glob.glob("/Users/Desktop/spaceOddy/*.jpg")[::260]:
    try:
        shutil.move(file, dstdir)
    except EnvironmentError as e:
        print("can't move {}, error {}".format(file, e), file=sys.stderr)
</snippet></ROW><ROW><id>13328450</id><snippet>lxml</snippet></ROW><ROW><id>13328450</id><snippet>&gt;&gt;&gt; s = """&lt;returnLink&gt;
...     http://wiki.build.com/ca_builds/CIT
...     http://wiki.build.com/ca_builds/1.2_Archive
... &lt;/returnLink&gt;"""
&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; xml_tree = etree.fromstring(s)
&gt;&gt;&gt; links = xml_tree.text.split()
&gt;&gt;&gt; for i in links:
...    print '['+i+']'+i[i.rfind('/')+1:]
...
[http://wiki.build.com/ca_builds/CIT]CIT
[http://wiki.build.com/ca_builds/1.2_Archive]1.2_Archive
</snippet></ROW><ROW><id>13328537</id><snippet>diff --git a/ports/python/setup.py b/ports/python/setup.py
index e1950c3..889f21a 100644
--- a/ports/python/setup.py
+++ b/ports/python/setup.py
@@ -9,7 +9,10 @@ def pkgconfig(*packages, **kw):

 module = Extension('cld',
                    ['pycldmodule.cc'],
-                   **pkgconfig('cld'))
+                   define_macros=[('WIN32', None)],
+                   libraries=['libcld'], 
+                   include_dirs=['..\\..\\'],
+                   library_dirs=['..\\..\\'])

 setup(name='cld',
       version='0.031415',
</snippet></ROW><ROW><id>13328541</id><snippet>urls = tree.xpath('//div[@class="pics"]/a/@href') + 
       tree.xpath('//div[@class="name"]/a/@href')
</snippet></ROW><ROW><id>13328713</id><snippet>$Env:PY_PYTHON = 2
</snippet></ROW><ROW><id>13328840</id><snippet>big = (-1 *( b**3 / 27 * a**3) + (b * c / 6 * a**2) - (d / 2 * a))
</snippet></ROW><ROW><id>13328840</id><snippet>big = (-1 *( b**3 / (27 * a**3)) + (b * c / (6 * a**2)) - (d / (2 * a)))
</snippet></ROW><ROW><id>13328840</id><snippet>27 * a**3</snippet></ROW><ROW><id>13328840</id><snippet>a**3</snippet></ROW><ROW><id>13328840</id><snippet>x * 2 - small</snippet></ROW><ROW><id>13328840</id><snippet>math.sqrt</snippet></ROW><ROW><id>13328993</id><snippet>txt = txt[:tagEnd] + ' '.join(lis) + wikiText + txt[endTag:]
</snippet></ROW><ROW><id>13329118</id><snippet>letters</snippet></ROW><ROW><id>13329118</id><snippet>play_again()</snippet></ROW><ROW><id>13329118</id><snippet>def play_again():
    global numguesses, guesses, partial
    global letters
    letters=set()   # Reset letters to be empty
    if points &lt; 2:
        print "\nYou don't have enough points to play again.\nGames Played: " + str(games) + '\nPoints: ' + str(points)
    else:
        ans = raw_input('Would you like to play again? [y/n] ')
        if ans in ('yY'):
            numguesses = 0
            guesses = ''
            partial = ''
            play()
        elif ans in ('nN'):
            print '\nOkay, goodbye.\nWins: ' + str(wins) + '\nLosses: ' + str(losses) + '\nPoints: ' + str(points)
        else:
            print 'Invalid input.'
            play_again()
</snippet></ROW><ROW><id>13329368</id><snippet>pack</snippet></ROW><ROW><id>13329368</id><snippet>grid</snippet></ROW><ROW><id>13329368</id><snippet>frame</snippet></ROW><ROW><id>13329415</id><snippet>new</snippet></ROW><ROW><id>13329415</id><snippet>sort=new</snippet></ROW><ROW><id>13329415</id><snippet>rising</snippet></ROW><ROW><id>13329415</id><snippet>/new</snippet></ROW><ROW><id>13329415</id><snippet>/rising</snippet></ROW><ROW><id>13329415</id><snippet>new</snippet></ROW><ROW><id>13329415</id><snippet>rising</snippet></ROW><ROW><id>13329415</id><snippet>new</snippet></ROW><ROW><id>13329415</id><snippet>sort=new</snippet></ROW><ROW><id>13329415</id><snippet>import praw
r = praw.Reddit('YOUR DESCRIPTIVE USER AGENT NAME')
listing = list(r.get_subreddit('all').get_new_by_date())
print listing
</snippet></ROW><ROW><id>13329415</id><snippet>list()</snippet></ROW><ROW><id>13329488</id><snippet>yield</snippet></ROW><ROW><id>13329488</id><snippet>gen.Task</snippet></ROW><ROW><id>13329488</id><snippet>customer = yield gen.Task( self.paymentService.charge, email, cardUri )
sub = yield gen.Task( self.paymentService.schedule, customer )
</snippet></ROW><ROW><id>13329488</id><snippet>charge</snippet></ROW><ROW><id>13329488</id><snippet>schedule</snippet></ROW><ROW><id>13329488</id><snippet>subscription</snippet></ROW><ROW><id>13329488</id><snippet>gen.Task</snippet></ROW><ROW><id>13329488</id><snippet>def customer( self, email, cardUri, callback=None ):
</snippet></ROW><ROW><id>13329488</id><snippet>callback</snippet></ROW><ROW><id>13329488</id><snippet>gen.Task</snippet></ROW><ROW><id>13329488</id><snippet>callback</snippet></ROW><ROW><id>13329488</id><snippet>None</snippet></ROW><ROW><id>13329488</id><snippet>None</snippet></ROW><ROW><id>13329488</id><snippet>gen.Tasks</snippet></ROW><ROW><id>13329488</id><snippet>def delete_customer( customer_id, callback ):
    result = customerService.delete( customer_id )

    callback( result )
</snippet></ROW><ROW><id>13329488</id><snippet>gen.Task</snippet></ROW><ROW><id>13329488</id><snippet>@gen.engine
def perform_customer_delete( customer_id )
    result = yield gen.Task( delete_customer, customer_id )
    return result
</snippet></ROW><ROW><id>13329488</id><snippet>delete_customer</snippet></ROW><ROW><id>13329488</id><snippet>customer_id</snippet></ROW><ROW><id>13329488</id><snippet>result</snippet></ROW><ROW><id>13329488</id><snippet>delete_customer</snippet></ROW><ROW><id>13329488</id><snippet>result</snippet></ROW><ROW><id>13329488</id><snippet>self.customerService.delete</snippet></ROW><ROW><id>13329488</id><snippet>callback</snippet></ROW><ROW><id>13329488</id><snippet>gen.Task</snippet></ROW><ROW><id>13329488</id><snippet>result</snippet></ROW><ROW><id>13329488</id><snippet>result</snippet></ROW><ROW><id>13329488</id><snippet>@asynchronous
@gen.engine
def post(self):
    result = yield gen.Task( functionOne )
    foo = yield gen.Task( MyObject )
    bar = yield gen.Task( AnotherObject )
</snippet></ROW><ROW><id>13329488</id><snippet>functionOne</snippet></ROW><ROW><id>13329488</id><snippet>gen.Task</snippet></ROW><ROW><id>13329488</id><snippet>MyObject</snippet></ROW><ROW><id>13329488</id><snippet>callback</snippet></ROW><ROW><id>13329488</id><snippet>gen.Task</snippet></ROW><ROW><id>13329488</id><snippet>gen.Task</snippet></ROW><ROW><id>13329488</id><snippet>def delete_customer( customer_id, callback=None ):
    result = customerService.delete_customer( customer_id )
    if callback:
        callback( result )
    return result
</snippet></ROW><ROW><id>13329708</id><snippet>codecs.open</snippet></ROW><ROW><id>13329708</id><snippet>open</snippet></ROW><ROW><id>13329708</id><snippet>&gt;&gt;&gt; open('unicode.txt').read()    # has utf-8 BOM
'\xef\xbb\xbfa\xc3\xa8io\xe1\x88\xb4 \xe1\x88\xb4'
&gt;&gt;&gt; codecs.open('unicode.txt').read()    #without encoding is the same as open
'\xef\xbb\xbfa\xc3\xa8io\xe1\x88\xb4 \xe1\x88\xb4'
&gt;&gt;&gt; codecs.open('unicode.txt', encoding='utf-8').read()
u'\ufeffa\xe8io\u1234 \u1234'
</snippet></ROW><ROW><id>13329708</id><snippet>Counter</snippet></ROW><ROW><id>13329708</id><snippet>&gt;&gt;&gt; Counter(open('unicode.txt').read())
Counter({'\xe1': 2, '\x88': 2, '\xb4': 2, 'a': 1, '\xc3': 1, ' ': 1, 'i': 1, '\xa8': 1, '\xef': 1, 'o': 1, '\xbb': 1, '\xbf': 1})
&gt;&gt;&gt; Counter(codecs.open('unicode.txt', encoding='utf-8').read())
Counter({u'\u1234': 2, u'a': 1, u' ': 1, u'i': 1, u'\xe8': 1, u'o': 1, u'\ufeff': 1})
</snippet></ROW><ROW><id>13329708</id><snippet>print(freqs)</snippet></ROW><ROW><id>13329708</id><snippet>Counter({'不': 1})</snippet></ROW><ROW><id>13329708</id><snippet>Counter</snippet></ROW><ROW><id>13329708</id><snippet>__str__</snippet></ROW><ROW><id>13329708</id><snippet>__repr__</snippet></ROW><ROW><id>13329708</id><snippet>\u40ed</snippet></ROW><ROW><id>13329708</id><snippet>&gt;&gt;&gt; Counter(u'不')
Counter({u'\u4e0d': 1})
&gt;&gt;&gt; repr(u'不')
"u'\\u4e0d'"
</snippet></ROW><ROW><id>13329708</id><snippet>repr</snippet></ROW><ROW><id>13329708</id><snippet>&gt;&gt;&gt; Counter('不')
Counter({'不': 1})
&gt;&gt;&gt; repr('不')
"'不'"
</snippet></ROW><ROW><id>13329708</id><snippet>str_counter</snippet></ROW><ROW><id>13329708</id><snippet>str</snippet></ROW><ROW><id>13329708</id><snippet>Counter</snippet></ROW><ROW><id>13329708</id><snippet>&gt;&gt;&gt; def str_counter(counter):
...     if sys.version_info.major &gt; 2:
...         # python3, no need to do anything
...         return str(counter)
...     # python2: we manually create a unicode representation.
...     result = u'{%s}'
...     parts = [u'%s: %s' % (unicode(key), unicode(value)) for key, value in counter.items()]
...     return result % u', '.join(parts)
... 
&gt;&gt;&gt; print str_counter(Counter(u'不'))   # python2
{不: 1}
</snippet></ROW><ROW><id>13329780</id><snippet>s.listen(5)</snippet></ROW><ROW><id>13329834</id><snippet>str.join</snippet></ROW><ROW><id>13329834</id><snippet>output = "\n".join(i[0] for i in matches)
g.write(output)
</snippet></ROW><ROW><id>13329834</id><snippet>with</snippet></ROW><ROW><id>13329834</id><snippet>with open('this.txt') as f, open('that.txt', 'w') as g:
    text = f.read()
    matches = re.findall('', text) # do some re matching here
    g.write("\n".join(i[0] for i in matches))
</snippet></ROW><ROW><id>13329834</id><snippet>with open('this.txt') as f:
    text = f.read()
matches = re.findall('', text) # do some re matching here
with open('that.txt', 'w') as g:
    g.write("\n".join(i[0] for i in matches))
</snippet></ROW><ROW><id>13329861</id><snippet>class MyApp(object):
    def __init__(self):
        self.root = Tk()
        self.root.wm_title("ImagePro")

        #Original
        original = Image.open(infile)
        (w, h) = (original.size[0], original.size[1])
        tkpi = ImageTk.PhotoImage(original)
        label = Label(self.root, image=tkpi)
        label.grid(row =0, column=0, padx=5,pady=5)

        img = original.copy().convert("L")
        tkpi2 = ImageTk.PhotoImage(img)
        label = Label(self.root, image=tkpi2)
        label.grid(row =0, column=1, padx=5,pady=5)

        Label(self.root, text = "Original").grid(row=1, column=0)
        Label(self.root, text = "Modified").grid(row=1, column=1)

        self.buttonframe = Frame(self.root)
        self.buttonframe.grid(row=2, column=0, columnspan=2)        
        Button(self.buttonframe, text = "Brighten").grid(row=0, column=0)
        Button(self.buttonframe, text = "Darken").grid(row=0, column=1)
        Button(self.buttonframe, text = "Warm").grid(row=0, column=2)
        Button(self.buttonframe, text = "Cool").grid(row=0, column=3)

        self.root.mainloop()
</snippet></ROW><ROW><id>13329931</id><snippet>SocketServer</snippet></ROW><ROW><id>13329931</id><snippet>socketserver</snippet></ROW><ROW><id>13330020</id><snippet>+</snippet></ROW><ROW><id>13330020</id><snippet>+=</snippet></ROW><ROW><id>13330020</id><snippet>l2 = l1 + x</snippet></ROW><ROW><id>13330020</id><snippet>l2 = l1.__add__(x)</snippet></ROW><ROW><id>13330020</id><snippet>x.__radd__(l1)</snippet></ROW><ROW><id>13330020</id><snippet>l1</snippet></ROW><ROW><id>13330020</id><snippet>l2 += x</snippet></ROW><ROW><id>13330020</id><snippet>l2 = l2.__iadd__(x)</snippet></ROW><ROW><id>13330020</id><snippet>l2 = l2 + x</snippet></ROW><ROW><id>13330020</id><snippet>+=</snippet></ROW><ROW><id>13330020</id><snippet>+</snippet></ROW><ROW><id>13330020</id><snippet>+=</snippet></ROW><ROW><id>13330020</id><snippet>l2</snippet></ROW><ROW><id>13330020</id><snippet>l1</snippet></ROW><ROW><id>13330020</id><snippet>l1</snippet></ROW><ROW><id>13330127</id><snippet># -- coding: utf-8 --</snippet></ROW><ROW><id>13330127</id><snippet>markup = '''
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Övriga fakta&lt;/title&gt;
        &lt;meta charset="latin-1" /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Öhman Företagsobligationsfond&lt;/h1&gt;
        &lt;p&gt;Detta är en svensk sida.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
'''

soup = BeautifulSoup(markup)
print soup.find('h1')

try:
    # Version 4
    soup = BeautifulSoup(markup, from_encoding='utf-8')
except TypeError:
    # Version 3
    soup = BeautifulSoup(markup, fromEncoding='utf-8')

print soup.find('h1')
</snippet></ROW><ROW><id>13330127</id><snippet>&lt;h1&gt;Ãhman FÃ¶retagsobligationsfond&lt;/h1&gt;
&lt;h1&gt;Öhman Företagsobligationsfond&lt;/h1&gt;
</snippet></ROW><ROW><id>13330127</id><snippet>from_encoding</snippet></ROW><ROW><id>13330127</id><snippet>fromEncoding</snippet></ROW><ROW><id>13330196</id><snippet>/e?s=MD5_HASH_OF_FILENAME</snippet></ROW><ROW><id>13330226</id><snippet>t.daemon = True</snippet></ROW><ROW><id>13330226</id><snippet>t.daemon = False</snippet></ROW><ROW><id>13330226</id><snippet>join</snippet></ROW><ROW><id>13330226</id><snippet>threads = []
while len(threads) &lt; threadLimit:
    t=threading.Thread(target=run_command)
    threads.append(t)
    t.daemon = True
    t.start()
[thread.join() for thread in threads]
</snippet></ROW><ROW><id>13330434</id><snippet>self.original_label = Label(self.root, image=tkpi)
self.original_label.grid(row =0, column=0, padx=5,pady=5)
....
self.modified_label = Label(self.root, image=tkpi2)
self.modified_label.image = tkpi2
self.modified_label.grid(row =0, column=1, padx=5,pady=5)
</snippet></ROW><ROW><id>13330434</id><snippet>.configure()</snippet></ROW><ROW><id>13330434</id><snippet>self.modified_label.configure(image=IMAGE_HERE)
self.modified_label.image = IMAGE_HERE
</snippet></ROW><ROW><id>13330440</id><snippet>entries_on_day = cache.get(key)
if entries_on_day  is None:
    entries_on_day  = BlogEntry.objects.filter(...args..)
    cache.set(key,entries_on_day)
</snippet></ROW><ROW><id>13330660</id><snippet>zope.interface.implements()</snippet></ROW><ROW><id>13330660</id><snippet>locals()</snippet></ROW><ROW><id>13330660</id><snippet>dict</snippet></ROW><ROW><id>13330660</id><snippet>class</snippet></ROW><ROW><id>13330660</id><snippet>__implements_advice_data__</snippet></ROW><ROW><id>13330660</id><snippet>classImplements</snippet></ROW><ROW><id>13330660</id><snippet>__metaclass__</snippet></ROW><ROW><id>13330660</id><snippet>__implements_advice_data__</snippet></ROW><ROW><id>13330660</id><snippet>implements()</snippet></ROW><ROW><id>13330660</id><snippet>__metaclass__</snippet></ROW><ROW><id>13330660</id><snippet>__metaclass__</snippet></ROW><ROW><id>13330660</id><snippet>__implements_advice_data__</snippet></ROW><ROW><id>13330660</id><snippet>zope.interface.implements()</snippet></ROW><ROW><id>13330660</id><snippet>__implements_advice_data__</snippet></ROW><ROW><id>13330660</id><snippet>class Foo:
    def __init__(self, x=None):
        self.x = x

    def bar(self, q, r=None):
        return q, r, self.x

    def __repr__(self):
        return "Foo(%s)" % self.x

zope.interface.classImplements(Foo, IFoo)
</snippet></ROW><ROW><id>13330660</id><snippet>Foo</snippet></ROW><ROW><id>13330660</id><snippet>zope.interface</snippet></ROW><ROW><id>13330660</id><snippet>zope.interface.classImplements()</snippet></ROW><ROW><id>13330660</id><snippet>zope.interface.implements()</snippet></ROW><ROW><id>13330660</id><snippet>classImplements()</snippet></ROW><ROW><id>13330660</id><snippet>zope.interface</snippet></ROW><ROW><id>13330660</id><snippet>zope.interface.implements()</snippet></ROW><ROW><id>13330660</id><snippet>zope.interface.implementer</snippet></ROW><ROW><id>13330660</id><snippet>@zope.interface.implementer(IFoo)
class Foo:
    def __init__(self, x=None):
        self.x = x

    def bar(self, q, r=None):
        return q, r, self.x

    def __repr__(self):
        return "Foo(%s)" % self.x
</snippet></ROW><ROW><id>13330841</id><snippet>i &lt; len(BinKey)</snippet></ROW><ROW><id>13330841</id><snippet>BinKey[i]</snippet></ROW><ROW><id>13330841</id><snippet>BinKey[i+1]</snippet></ROW><ROW><id>13330841</id><snippet>BinKey[len(BinKey)]</snippet></ROW><ROW><id>13330841</id><snippet>0</snippet></ROW><ROW><id>13330841</id><snippet>len-1</snippet></ROW><ROW><id>13330841</id><snippet>while BinKeyLength &gt; i+1 and ...:
</snippet></ROW><ROW><id>13331066</id><snippet>reload(module)</snippet></ROW><ROW><id>13331066</id><snippet>main.py</snippet></ROW><ROW><id>13331066</id><snippet>__main__</snippet></ROW><ROW><id>13331066</id><snippet>uvw.__class__.__module__</snippet></ROW><ROW><id>13331066</id><snippet>x</snippet></ROW><ROW><id>13331066</id><snippet>main</snippet></ROW><ROW><id>13331066</id><snippet>main</snippet></ROW><ROW><id>13331066</id><snippet>uvw</snippet></ROW><ROW><id>13331066</id><snippet>x</snippet></ROW><ROW><id>13331066</id><snippet>__main__</snippet></ROW><ROW><id>13331066</id><snippet>x</snippet></ROW><ROW><id>13331301</id><snippet>.getall(key)</snippet></ROW><ROW><id>13331301</id><snippet># All values for a key: ['a', 'b']
check_values = request.POST.getall('check')
</snippet></ROW><ROW><id>13331399</id><snippet>#!/usr/bin/env python

import datetime
import sqlite3

conn = sqlite3.connect(":memory:", detect_types=sqlite3.PARSE_DECLTYPES)
cursor = conn.cursor()
cursor.execute("CREATE TABLE t (dateDefinitionTest DATETIME)")
cursor.execute("INSERT INTO t VALUES (?)", (datetime.datetime.now(),))
query = "SELECT dateDefinitionTest FROM t"
cursor.execute(query)
for row in cursor.fetchall():
    dt = datetime.datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S.%f")
    print(repr(dt))
    print(dt.strftime("%Y-%m-%d %H:%M:%S.%f"))
cursor.close()
</snippet></ROW><ROW><id>13331399</id><snippet>datetime.datetime(2012, 11, 11, 16, 40, 26, 788966)
2012-11-11 16:40:26.788966
</snippet></ROW><ROW><id>13331424</id><snippet>['hello{0}'.format(i) for i in a]
</snippet></ROW><ROW><id>13331424</id><snippet>&gt;&gt;&gt; a = [1,2,3,4]
&gt;&gt;&gt; ['hello{0}'.format(i) for i in a]
['hello1', 'hello2', 'hello3', 'hello4']
</snippet></ROW><ROW><id>13331664</id><snippet>&lt;a href='/'&gt;This&lt;/a&gt;
</snippet></ROW><ROW><id>13331701</id><snippet>constructor</snippet></ROW><ROW><id>13331701</id><snippet>yaml.YAMLObject</snippet></ROW><ROW><id>13331701</id><snippet>YourClass.__new__</snippet></ROW><ROW><id>13331701</id><snippet>instance.__dict__</snippet></ROW><ROW><id>13331701</id><snippet>Step.__new__</snippet></ROW><ROW><id>13331701</id><snippet>**kwargs</snippet></ROW><ROW><id>13331715</id><snippet>os.system()</snippet></ROW><ROW><id>13331715</id><snippet>subprocess</snippet></ROW><ROW><id>13331715</id><snippet>import subprocess

if subprocess.check_output('somecommand') == 'output from command':
</snippet></ROW><ROW><id>13331860</id><snippet>abstract</snippet></ROW><ROW><id>13331922</id><snippet>list()</snippet></ROW><ROW><id>13331922</id><snippet>extend()</snippet></ROW><ROW><id>13331922</id><snippet>items = [list(item.strip()) for item in items]
board_list.extend(items)
</snippet></ROW><ROW><id>13331922</id><snippet>\t</snippet></ROW><ROW><id>13331922</id><snippet>with open("data.txt") as board_file:
    board_list = [list(line) for line in board_file.read().split('\n') if line]
</snippet></ROW><ROW><id>13331999</id><snippet>from collections import defaultdict # a mapping for station number to points

class Point(object):
    # der punkt mit xCoor yCoor
    pass

class SN:
    # the SN object in text file
    node = defaultdict(Point)

# read the text file
textFileContent = open('IDoNotKnowYourTextFileName.txt').read()

# in the next line you need to trust the other person - it executes the textfile 
# but only knowing SN
exec textFileContent in {'SN': SN}

# in the following lines you can output the html file you need:
print '''&lt;head&gt;
&lt;title&gt;MAP&lt;/title&gt;
&lt;style type="text/css"&gt;
#menu{width:2997px;height:1471px;background-image:url(Map.png)}
#menu a{position:absolute;height:10px;width:10px;}'''

for stationNumber, stationPoint in SN.node.items():
    x = stationPoint.xCoor
    y = stationPoint.yCoor
    # sorry, but I could not get how you derive the x,y-positions from yout html
    print 'a#a' + str(stationNumber) + '{left:' + str(x) + 'px;top:' + str(y) + 'px;border:solid 2px #0099cc}'

print '''
#menu a i{ visibility:hidden;}
&lt;/style&gt;&lt;/head&gt;
&lt;body&gt;
&lt;div id="menu"&gt;'''
</snippet></ROW><ROW><id>13332200</id><snippet>1</snippet></ROW><ROW><id>13332200</id><snippet>0</snippet></ROW><ROW><id>13332200</id><snippet>p[i] * (pHit if hit else pMiss)
</snippet></ROW><ROW><id>13332236</id><snippet>urllib2</snippet></ROW><ROW><id>13332236</id><snippet>import urllib2

page = urllib2.urlopen('http://stackoverflow.com')

page_content = page.read()

with open('page_content.html', 'w') as fid:
    fid.write(page_content)
</snippet></ROW><ROW><id>13332262</id><snippet>&gt;&gt;&gt; "rohit"[0]
'r'
&gt;&gt;&gt; "rohit"[-1]
't'
&gt;&gt;&gt; "rohit"[0:2]
'ro'
</snippet></ROW><ROW><id>13332262</id><snippet>lists</snippet></ROW><ROW><id>13332394</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>13332394</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime("2012-11-09-165420", "%Y-%m-%d-%H%M%S")
datetime.datetime(2012, 11, 9, 16, 54, 20)
</snippet></ROW><ROW><id>13332403</id><snippet>HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.py\UserChoice</snippet></ROW><ROW><id>13332403</id><snippet>HKCU\Software\Classes\.py</snippet></ROW><ROW><id>13332403</id><snippet>HKCU\Software\Classes\Python.File</snippet></ROW><ROW><id>13332403</id><snippet>HKCU</snippet></ROW><ROW><id>13332403</id><snippet>cmd</snippet></ROW><ROW><id>13332403</id><snippet>&gt; assoc .PY=Python.File
&gt; ftype Python.File=c:\Program Files\Python\2.7\python.exe "%1" %*
</snippet></ROW><ROW><id>13332403</id><snippet>HKLM\Software\Classes</snippet></ROW><ROW><id>13332403</id><snippet>assoc</snippet></ROW><ROW><id>13332403</id><snippet>ftype</snippet></ROW><ROW><id>13332406</id><snippet>with open('rooms') as f:
    chunks = f.read().split('\n\n')

people_by_id = {}

for chunk in chunks:
    data = dict(row.split('=', 1) for row in chunk.split('\n'))
    people_by_id[data['id']] = data
    del data['id']

def get_person_by_id(id):
    return people_by_id.get(id)
</snippet></ROW><ROW><id>13332584</id><snippet>.localize()</snippet></ROW><ROW><id>13332584</id><snippet>intermdate = brussels_tz.localize(datetime(2012, 07, 15, 8, 0, 0, 0))
utcdate = intermdate.astimezone(utc_tz)
</snippet></ROW><ROW><id>13332584</id><snippet>Brussels time is 2012-07-15 08:00:00+02:00
UTC time is 2012-07-15 06:00:00+00:00
</snippet></ROW><ROW><id>13332584</id><snippet>pytz</snippet></ROW><ROW><id>13332584</id><snippet>&gt;&gt;&gt; datetime(2002, 10, 27, 12, 0, 0, tzinfo=amsterdam).strftime(fmt)
'2002-10-27 12:00:00 AMT+0020'
</snippet></ROW><ROW><id>13332617</id><snippet>&gt;&gt;&gt; dict(DIFFICULTIES)
{1: 'simple', 2: 'medium', 3: 'difficult'}
&gt;&gt;&gt; d = dict(DIFFICULTIES)
&gt;&gt;&gt; d[MEDIUM]
'medium'
</snippet></ROW><ROW><id>13332617</id><snippet>&gt;&gt;&gt; next(v for k,v in DIFFICULTIES if k == MEDIUM)
'medium'
</snippet></ROW><ROW><id>13332682</id><snippet>x = p.Series()
N = 4
for i in xrange(N):
   x = x.set_value(i, i**2)
</snippet></ROW><ROW><id>13332682</id><snippet>0    0
1    1
2    4
3    9
</snippet></ROW><ROW><id>13332734</id><snippet>wget http://curl.haxx.se/ca/cacert.pem
</snippet></ROW><ROW><id>13332734</id><snippet>/usr/local/lib/python2.7/dist-packages/httplib2</snippet></ROW><ROW><id>13332734</id><snippet>cd /usr/local/lib/python2.7/dist-packages/httplib2
</snippet></ROW><ROW><id>13332734</id><snippet>cp cacerts.txt backup_cacerts.txt
</snippet></ROW><ROW><id>13332734</id><snippet>cacerts.txt</snippet></ROW><ROW><id>13332734</id><snippet>mv cacert.pem cacerts.txt
</snippet></ROW><ROW><id>13332825</id><snippet>import re

s = "goooooooooooooood"
print re.sub(r'(.)\1{2,}', r'\1', s)
</snippet></ROW><ROW><id>13332825</id><snippet>print re.sub(r'(.)\1{3,}', r'\1\1', s)
</snippet></ROW><ROW><id>13332994</id><snippet>list +=</snippet></ROW><ROW><id>13332994</id><snippet>list.extend()</snippet></ROW><ROW><id>13332994</id><snippet>points</snippet></ROW><ROW><id>13333058</id><snippet>&gt;&gt;&gt; from numpy import linspace, meshgrid, pi
&gt;&gt;&gt; u = linspace(0, pi, 3)
&gt;&gt;&gt; v = linspace(0, 10, 3)
&gt;&gt;&gt; uu, vv = meshgrid(u, v)
&gt;&gt;&gt; uu
array([[ 0.        ,  1.57079633,  3.14159265],
       [ 0.        ,  1.57079633,  3.14159265],
       [ 0.        ,  1.57079633,  3.14159265]])
&gt;&gt;&gt; vv
array([[  0.,   0.,   0.],
       [  5.,   5.,   5.],
       [ 10.,  10.,  10.]])
&gt;&gt;&gt; z = uu + 1j * vv
&gt;&gt;&gt; z
array([[ 0.00000000 +0.j,  1.57079633 +0.j,  3.14159265 +0.j],
       [ 0.00000000 +5.j,  1.57079633 +5.j,  3.14159265 +5.j],
       [ 0.00000000+10.j,  1.57079633+10.j,  3.14159265+10.j]])
</snippet></ROW><ROW><id>13333060</id><snippet>AttributeError: jobList instance has no attribute 'listOfJobst'
</snippet></ROW><ROW><id>13333060</id><snippet>listOfJobs</snippet></ROW><ROW><id>13333060</id><snippet>t</snippet></ROW><ROW><id>13333060</id><snippet>self . listOfJobs [ j - 1 ], 
self . listOfJobs [ j ] = self . listOfJobs [ j ], 
self . listOfJobs [ j - 1 ]
</snippet></ROW><ROW><id>13333060</id><snippet>listOfJobs[j]</snippet></ROW><ROW><id>13333060</id><snippet>listOfJobs[j - 1]</snippet></ROW><ROW><id>13333060</id><snippet>listOfJobs[j - 1]</snippet></ROW><ROW><id>13333060</id><snippet>listOfJobs[j]</snippet></ROW><ROW><id>13333060</id><snippet>listOfJobs[j]</snippet></ROW><ROW><id>13333060</id><snippet>listOfJobs[j - 1]</snippet></ROW><ROW><id>13333060</id><snippet>self.listOfJobs[j - 1], self.listOfJobs[j] = self.listOfJobs[j], self.listOfJobs[j - 1]
</snippet></ROW><ROW><id>13333060</id><snippet>\</snippet></ROW><ROW><id>13333060</id><snippet>self.listOfJobs[j - 1], \
self.listOfJobs[j] = self.listOfJobs[j], \
self.listOfJobs[j - 1]
</snippet></ROW><ROW><id>13333060</id><snippet>def setFixedPriority (self, priority, listers):
    step = priority / len(listers)
    for lister in listers:
        for job in self.listOfJobs:
            if job.category == lister or job.jobType == lister or job.timeToDo == lister:
                job.priority += priority

        priority -= step

    self.listOfJobs.sort(key=lambda x: x.priority)
</snippet></ROW><ROW><id>13333144</id><snippet>value = repr(v)
</snippet></ROW><ROW><id>13333144</id><snippet>value</snippet></ROW><ROW><id>13333215</id><snippet>def neighbors(point):
    x, y = point
</snippet></ROW><ROW><id>13333246</id><snippet>sphinx-apidoc</snippet></ROW><ROW><id>13333246</id><snippet>.rst</snippet></ROW><ROW><id>13333246</id><snippet>autodoc</snippet></ROW><ROW><id>13333364</id><snippet>     python 3.2
     a=["hello stack overflow community \n", "i like this site \n", "thank you \n"]
     [[list(v) for v in i.split()] for i in a]
</snippet></ROW><ROW><id>13333537</id><snippet>sorted</snippet></ROW><ROW><id>13333537</id><snippet>cost</snippet></ROW><ROW><id>13333537</id><snippet>c</snippet></ROW><ROW><id>13333537</id><snippet>mincost</snippet></ROW><ROW><id>13333537</id><snippet>cost</snippet></ROW><ROW><id>13333537</id><snippet>c</snippet></ROW><ROW><id>13333537</id><snippet>c</snippet></ROW><ROW><id>13333537</id><snippet>0.0</snippet></ROW><ROW><id>13333537</id><snippet>string MinCost (string alg) {
    List&lt;string&gt; parts = alg.split(" ");
    Tuple&lt;string, double&gt; cost1 = Cost(0, parts, "G0 ");
    Tuple&lt;string, double&gt; cost2 = Cost(1, parts, "G1 ");

    if (cost1[1] &lt; cost2[1])
        return cost1[0];
    else
        return cost2[0];
}

Tuple&lt;string, double&gt; Cost (int grip, List&lt;string&gt; alg, string p="", double c=0.0, bool rh=True) {
    if (alg.Count == 0)
        return new Tuple&lt;string, double&gt;(PostProcess(p), c);

    // ... there should be more here
}
</snippet></ROW><ROW><id>13333628</id><snippet>return True</snippet></ROW><ROW><id>13333628</id><snippet>True</snippet></ROW><ROW><id>13333628</id><snippet>False</snippet></ROW><ROW><id>13333628</id><snippet>break</snippet></ROW><ROW><id>13333628</id><snippet>return</snippet></ROW><ROW><id>13333628</id><snippet>board[i][row]</snippet></ROW><ROW><id>13333628</id><snippet>digit in</snippet></ROW><ROW><id>13333628</id><snippet>board[i][row]</snippet></ROW><ROW><id>13333628</id><snippet>board[i][column]</snippet></ROW><ROW><id>13333628</id><snippet># get the first row/column index of a block
blockRow = row // 3 * 3
blockColumn = column // 3 * 3

# check all 8 fields in the block
for r in range(blockRow, blockRow + 3):
    for c in range(blockColumn, blockColumn + 3):
        # skip the field we want to check
        if r == row and c == column:
            continue

        if digit == board[r][c]:
            return False
</snippet></ROW><ROW><id>13333672</id><snippet>feedparser</snippet></ROW><ROW><id>13333701</id><snippet>prefixes = set()
for word in words:
    for i in range(2, len(word)+1)
        prefixes.add(word[:i])
</snippet></ROW><ROW><id>13333701</id><snippet>word[:i]</snippet></ROW><ROW><id>13333701</id><snippet>word</snippet></ROW><ROW><id>13333701</id><snippet>i</snippet></ROW><ROW><id>13333742</id><snippet>__setitem__</snippet></ROW><ROW><id>13333742</id><snippet>Vary</snippet></ROW><ROW><id>13333742</id><snippet>class MonkeyPatchMiddleware(object):

   def __init__(self):
       from django.http import HttpResponse

       original_set_item = HttpResponse.__setitem__

       def __setitem__(self, header, value):
           if header == "Vary":
               raise ValueError
           original_set_item(self, header, value)

       HttpResponse.__setitem__ = __setitem__
</snippet></ROW><ROW><id>13333778</id><snippet>self.multilineCommands</snippet></ROW><ROW><id>13333778</id><snippet>self.multlineCommands = Forward()
</snippet></ROW><ROW><id>13333778</id><snippet>self.multilineCommands</snippet></ROW><ROW><id>13333778</id><snippet>self.multilineCommands</snippet></ROW><ROW><id>13333778</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>13333778</id><snippet>self.multilineCommands &lt;&lt; (test expression 1)
</snippet></ROW><ROW><id>13333778</id><snippet>self.multilineCommands</snippet></ROW><ROW><id>13333778</id><snippet>()</snippet></ROW><ROW><id>13333778</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>13333778</id><snippet>&lt;&lt;=</snippet></ROW><ROW><id>13333778</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>13333778</id><snippet>pi</snippet></ROW><ROW><id>13333778</id><snippet>π</snippet></ROW><ROW><id>13333778</id><snippet>e</snippet></ROW><ROW><id>13333778</id><snippet># coding=UTF-8
from pyparsing import *

class FlexParser(object):
    def __init__(self, fixedPart):
        self._dynamicExpr = Forward()
        self.parser = self._dynamicExpr + fixedPart

    def _set_keywords(self, kw_list):
        # accept a list of words, convert it to a MatchFirst of
        # Keywords defined using those words
        self._dynamicExpr &lt;&lt; (MatchFirst(map(Keyword, kw_list)))
    keywords = property(fset=_set_keywords)

    def parseString(self,s):
        return self.parser.parseString(s)

E  = CaselessKeyword("e").setParseAction(replaceWith(2.71828))
PI = (CaselessKeyword("pi") | "π").setParseAction(replaceWith(3.14159))
numericLiteral = PI | E | Regex(r'[+-]?\d+(\.\d*)?').setParseAction(lambda t:float(t[0]))
fp = FlexParser('(' + numericLiteral + ')')
fp.keywords = "sin cos tan asin acos atan sqrt".split()

print fp.parseString("sin(30)")
print fp.parseString("cos(π)")
print fp.parseString("sqrt(-1)")
</snippet></ROW><ROW><id>13333778</id><snippet>keywords</snippet></ROW><ROW><id>13333778</id><snippet>fp.keywords = "foo bar baz boo".split()
print fp.parseString("foo(1000)")
print fp.parseString("baz(e)")
print fp.parseString("bar(1729)")
print fp.parseString("sin(30)")   # raises a ParseException
</snippet></ROW><ROW><id>13334036</id><snippet>def sim(x_sample, y_sample):

    count = 0
    for i in range(10000):
        if 0.9 &lt;= x_sample[i] + y_sample[i] &lt;= 1.8:
            count += 1

    probability = count/10000.0

    print("P(a &lt; x &lt;= b) : {0:8.4f}".format(probability))
</snippet></ROW><ROW><id>13334036</id><snippet>&gt;&gt;&gt; from random import random
&gt;&gt;&gt; 
&gt;&gt;&gt; sim([random() for i in range(10000)],
...     [random() for i in range(10000)])
P(a &lt; x &lt;= b) :   0.5746
&gt;&gt;&gt;      
... from math import log
&gt;&gt;&gt; 
&gt;&gt;&gt; sim([-0.5*log(1-random()) for i in range(10000)],
...     [-0.5*log(1-random()) for i in range(10000)])
P(a &lt; x &lt;= b) :   0.3405
&gt;&gt;&gt;     
... sim([random() for i in range(10000)],
...     [2*random() for i in range(10000)])
P(a &lt; x &lt;= b) :   0.4479
</snippet></ROW><ROW><id>13334164</id><snippet>&gt;&gt;&gt; help('modules')
</snippet></ROW><ROW><id>13334164</id><snippet>bs4</snippet></ROW><ROW><id>13334164</id><snippet>$ python -c "help('modules')" | grep bs4
</snippet></ROW><ROW><id>13334164</id><snippet>sudo pip install bs4</snippet></ROW><ROW><id>13334164</id><snippet>sudo easy_install pip</snippet></ROW><ROW><id>13334164</id><snippet>pip</snippet></ROW><ROW><id>13334164</id><snippet>sudo</snippet></ROW><ROW><id>13334333</id><snippet>__setstate__</snippet></ROW><ROW><id>13334333</id><snippet>__getstate__</snippet></ROW><ROW><id>13334333</id><snippet>pickle</snippet></ROW><ROW><id>13334333</id><snippet>pickle</snippet></ROW><ROW><id>13334333</id><snippet>dis</snippet></ROW><ROW><id>13334333</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def my_func(a):
...     return a + 2
... 
&gt;&gt;&gt; dis.dis(my_func)
  2           0 LOAD_FAST                0 (a)
              3 LOAD_CONST               1 (2)
              6 BINARY_ADD          
              7 RETURN_VALUE   
</snippet></ROW><ROW><id>13334333</id><snippet>BINARY_ADD</snippet></ROW><ROW><id>13334333</id><snippet>BINARY_ADD</snippet></ROW><ROW><id>13334333</id><snippet>ceval.c</snippet></ROW><ROW><id>13334333</id><snippet>    case BINARY_ADD:
        w = POP();
        v = TOP();
        if (PyInt_CheckExact(v) &amp;&amp; PyInt_CheckExact(w)) {
            /* INLINE: int + int */
            register long a, b, i;
            a = PyInt_AS_LONG(v);
            b = PyInt_AS_LONG(w);
            /* cast to avoid undefined behaviour
               on overflow */
            i = (long)((unsigned long)a + b);
            if ((i^a) &lt; 0 &amp;&amp; (i^b) &lt; 0)
                goto slow_add;
            x = PyInt_FromLong(i);
        }
        else if (PyString_CheckExact(v) &amp;&amp;
                 PyString_CheckExact(w)) {
            x = string_concatenate(v, w, f, next_instr);
            /* string_concatenate consumed the ref to v */
            goto skip_decref_vx;
        }
        else {
          slow_add:
            x = PyNumber_Add(v, w);
        }
        Py_DECREF(v);
      skip_decref_vx:
        Py_DECREF(w);
        SET_TOP(x);
        if (x != NULL) continue;
        break;
</snippet></ROW><ROW><id>13334333</id><snippet>PyNumber_Add</snippet></ROW><ROW><id>13334333</id><snippet>__add__</snippet></ROW><ROW><id>13334333</id><snippet>__radd__</snippet></ROW><ROW><id>13334333</id><snippet>TypeError</snippet></ROW><ROW><id>13334333</id><snippet>dis</snippet></ROW><ROW><id>13334333</id><snippet># python2.7
&gt;&gt;&gt; def my_func():
...     return map((lambda x: x+1), range(5))
... 
&gt;&gt;&gt; dis.dis(my_func)
  2           0 LOAD_GLOBAL              0 (map)
              3 LOAD_CONST               1 (&lt;code object &lt;lambda&gt; at 0x16f8c30, file "&lt;stdin&gt;", line 2&gt;)
              6 MAKE_FUNCTION            0
              9 LOAD_GLOBAL              1 (range)
             12 LOAD_CONST               2 (5)
             15 CALL_FUNCTION            1
             18 CALL_FUNCTION            2
             21 RETURN_VALUE        
# python3
&gt;&gt;&gt; dis.dis(my_func)
  2           0 LOAD_GLOBAL              0 (map) 
              3 LOAD_CONST               1 (&lt;code object &lt;lambda&gt; at 0x7f1161a76930, file "&lt;stdin&gt;", line 2&gt;) 
              6 LOAD_CONST               2 ('my_func.&lt;locals&gt;.&lt;lambda&gt;') 
              9 MAKE_FUNCTION            0 
             12 LOAD_GLOBAL              1 (range) 
             15 LOAD_CONST               3 (5) 
             18 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             21 CALL_FUNCTION            2 (2 positional, 0 keyword pair) 
             24 RETURN_VALUE  
</snippet></ROW><ROW><id>13334362</id><snippet>with open(filname) as f:
   for line in f:
      if "search_term" in line:
           break
</snippet></ROW><ROW><id>13334401</id><snippet>shell=True</snippet></ROW><ROW><id>13334401</id><snippet>Popen()</snippet></ROW><ROW><id>13334401</id><snippet>Popen</snippet></ROW><ROW><id>13334401</id><snippet>shell=True</snippet></ROW><ROW><id>13334401</id><snippet>bashCommand</snippet></ROW><ROW><id>13334401</id><snippet>&gt;&gt;&gt; import subprocess as sp    
&gt;&gt;&gt; cmd = 'echo "test" | cat'
&gt;&gt;&gt; process = sp.Popen(cmd,stdout=sp.PIPE,shell=True)
&gt;&gt;&gt; output = process.communicate()[0]
&gt;&gt;&gt; print output
test
</snippet></ROW><ROW><id>13334529</id><snippet>xml.etree.ElementTree.TreeBuilder</snippet></ROW><ROW><id>13334529</id><snippet>&lt;span&gt;</snippet></ROW><ROW><id>13334529</id><snippet>import sys
from HTMLParser import HTMLParser
from xml.etree import cElementTree as etree

class LinksParser(HTMLParser):
  def __init__(self):
      HTMLParser.__init__(self)
      self.tb = etree.TreeBuilder()

  def handle_starttag(self, tag, attributes):
      self.tb.start(tag, dict(attributes))

  def handle_endtag(self, tag):
      self.tb.end(tag)

  def handle_data(self, data):
      self.tb.data(data)

  def close(self):
      HTMLParser.close(self)
      return self.tb.close()

parser = LinksParser()
parser.feed(sys.stdin.read())
root = parser.close()
span = root.find(".//span[@itemprop='description']")
etree.ElementTree(span).write(sys.stdout)
</snippet></ROW><ROW><id>13334529</id><snippet>&lt;span itemprop="description"&gt;
&lt;h1&gt;My First Heading&lt;/h1&gt;
&lt;p&gt;My first &lt;br /&gt;&lt;br /&gt;paragraph.&lt;/p&gt;
&lt;/span&gt;
</snippet></ROW><ROW><id>13334529</id><snippet>&lt;span&gt;</snippet></ROW><ROW><id>13334529</id><snippet>sys.stdout.write(span.text)
for child in span:
    sys.stdout.write(etree.tostring(child)) # add encoding="unicode" on Python 3
</snippet></ROW><ROW><id>13334530</id><snippet>u[row_col_index[0], row_col_index[1]] = u_pres
</snippet></ROW><ROW><id>13334530</id><snippet>#BAD
from numpy import *
#GOOD
from numpy import array #or whatever it is you need
#GOOD
import numpy as np #if you need lots of things, this is better
</snippet></ROW><ROW><id>13334530</id><snippet>In [18]: u = np.zeros(10)

In [19]: u
Out[19]: array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])

#1D assignment
In [20]: u[0] = 1

In [21]: u[1] = 10

In [22]: u[-1] = 9 #last element

In [23]: u[-2] = np.pi #second last element

In [24]: u
Out[24]: 
array([  1.        ,  10.        ,   0.        ,   0.        ,
         0.        ,   0.        ,   0.        ,   0.        ,
         3.14159265,   9.        ])

In [25]: u.shape
Out[25]: (10,)

In [27]: u[9] #calling
Out[27]: 9.0

#2D case
In [28]: y = np.zeros((4,2))

In [29]: y
Out[29]: 
array([[ 0.,  0.],
       [ 0.,  0.],
       [ 0.,  0.],
       [ 0.,  0.]])

In [30]: y[1] = 10 #this will assign all the second row to be 10

In [31]: y
Out[31]: 
array([[  0.,   0.],
       [ 10.,  10.],
       [  0.,   0.],
       [  0.,   0.]])

In [32]: y[0,1] = 9 #now this is 2D assignment, we use 2 indices!

In [33]: y[3] = np.pi #all 4th row, similar to y[3,:], ':' means all

In [34]: y[2,1] #3rd row, 2nd column
Out[34]: 0.0


In [36]: y[2,1] = 7

In [37]: 

In [37]: y
Out[37]: 
array([[  0.        ,   9.        ],
       [ 10.        ,  10.        ],
       [  0.        ,   7.        ],
       [  3.14159265,   3.14159265]])
</snippet></ROW><ROW><id>13334530</id><snippet>row_col_index</snippet></ROW><ROW><id>13334530</id><snippet>row_col_index[0]</snippet></ROW><ROW><id>13334530</id><snippet>row_col_index[1]</snippet></ROW><ROW><id>13334558</id><snippet>(filename)</snippet></ROW><ROW><id>13334558</id><snippet>(filename,)</snippet></ROW><ROW><id>13334558</id><snippet>filename</snippet></ROW><ROW><id>13334558</id><snippet>for root, dirnames, filenames in os.walk(directory):
    cur.executemany("INSERT INTO filenames (filename) VALUES (?)",
                    [(filename,) for filename in filenames if filename.endswith(".ext")])
    conn.commit()
</snippet></ROW><ROW><id>13334731</id><snippet>In [18]: lis=[[1,2],[3,4],[5,6]]

In [19]: sum(sum(x) for x in lis)
Out[19]: 21
</snippet></ROW><ROW><id>13334731</id><snippet>In [21]: sum(sum(lis,[]))
Out[21]: 21
</snippet></ROW><ROW><id>13334731</id><snippet>timeit</snippet></ROW><ROW><id>13334731</id><snippet>In [49]: %timeit sum(sum(x) for x in lis)
100000 loops, best of 3: 2.56 us per loop

In [50]: %timeit sum(map(sum,lis))
100000 loops, best of 3: 2.39 us per loop

In [51]: %timeit sum(sum(lis,[]))
1000000 loops, best of 3: 2.21 us per loop

In [52]: %timeit sum(chain.from_iterable(lis))       # winner 
100000 loops, best of 3: 1.43 us per loop

In [53]: %timeit sum(chain(*lis))
100000 loops, best of 3: 1.55 us per loop
</snippet></ROW><ROW><id>13335056</id><snippet>allowed = ('0','1','2','3','4','5','6','7','8','9','0','+','*')</snippet></ROW><ROW><id>13335056</id><snippet>import string ; allowed= list(string.digits+'+'+'*')</snippet></ROW><ROW><id>13335056</id><snippet>dir(string)</snippet></ROW><ROW><id>13335056</id><snippet>while (numguesses &lt; maxguesses) and flag==True:</snippet></ROW><ROW><id>13335056</id><snippet>while (numguesses &lt; maxguesses) and flag:</snippet></ROW><ROW><id>13335056</id><snippet>play_again()</snippet></ROW><ROW><id>13335056</id><snippet>s1 = secret[0] ; s2 = secret[1]</snippet></ROW><ROW><id>13335056</id><snippet>s1,s2=secret[:2]</snippet></ROW><ROW><id>13335056</id><snippet>for i in range(max): ; num = num + str(randint(0,9))</snippet></ROW><ROW><id>13335056</id><snippet>"".join([str(randint(0,9)) for i in range(max)])</snippet></ROW><ROW><id>13335056</id><snippet>if (i%2 == 0): 
    evaluated = evaluated + s1
else:
    evaluated = evaluated + s2
</snippet></ROW><ROW><id>13335056</id><snippet>evaluated= (evaluated+s1) if not(i%2) else (evaluated + s2)</snippet></ROW><ROW><id>13335262</id><snippet>while</snippet></ROW><ROW><id>13335262</id><snippet>choice</snippet></ROW><ROW><id>13335262</id><snippet>'1'</snippet></ROW><ROW><id>13335262</id><snippet>choice != '2'</snippet></ROW><ROW><id>13335262</id><snippet>while choice not in {'1', '2', ...}:
</snippet></ROW><ROW><id>13335262</id><snippet>while choice not in set(map(str, range(1, 6))): # a fancier version
</snippet></ROW><ROW><id>13335262</id><snippet>or</snippet></ROW><ROW><id>13335262</id><snippet>and</snippet></ROW><ROW><id>13335368</id><snippet>import ModelClass
ModelClass.associationProperty = association_proxy()
mapper() #etc..
</snippet></ROW><ROW><id>13335437</id><snippet>Employee.Age = int(raw_input("How old are you? "))</snippet></ROW><ROW><id>13335437</id><snippet>#!/usr/bin/python

class Employee:
    def __init__(self, salary, age, name, sex):
            self.salary =   salary
            self.age=       age
            self.name=      name
            self.sex=       sex
            #Employee.empCount += 1 #don't do this. you should count instances OUTSIDE

    def __str__(self):
            return "Employee&lt;Name: {0}, Age: {1}, Sex: {2}, Salary: {3}&gt;".format( self.name, self.age, self.sex, self.salary)



def getAge():
    while True:
        try:
            s=raw_input("How old are you? ")
            age = int(s)
            if age &gt; 100:
                print "Please enter a sensible age"
            elif age&lt;=10:
                print "Please enter an age greater than 10"
            else:
                return age
        except ValueError:
            print "You entered " + s + " Please enter a number"

def getName():
    return raw_input("What is your name? ")


def getSex():
    while True:
        sex = str(raw_input("Are you a man or a woman? "))
        if not sex in ("man", "woman"):
            print "Please enter man or woman "
        else:
            return sex



age= getAge()
name= getName()
sex= getSex()
salary=100000

employee = Employee(salary, age, name, sex)
print employee
</snippet></ROW><ROW><id>13335437</id><snippet>from Employee import Employee</snippet></ROW><ROW><id>13335514</id><snippet>In [126]: lis=[('Knightriders',), ('The Black Knight',), ('Fly by Knight',), ('An Arabian Knight',), ('A Bold, Bad Knight',)]

In [127]: [x[0] for x in lis]
Out[127]: 
['Knightriders',
 'The Black Knight',
 'Fly by Knight',
 'An Arabian Knight',
 'A Bold, Bad Knight']
</snippet></ROW><ROW><id>13335514</id><snippet>itemgetter</snippet></ROW><ROW><id>13335514</id><snippet>In [128]: from operator import itemgetter

In [129]: list(map(itemgetter(0),lis))
Out[129]: 
['Knightriders',
 'The Black Knight',
 'Fly by Knight',
 'An Arabian Knight',
 'A Bold, Bad Knight']
</snippet></ROW><ROW><id>13335514</id><snippet>In [131]: [next(x) for x in map(iter,lis)]
Out[131]: 
['Knightriders',
 'The Black Knight',
 'Fly by Knight',
 'An Arabian Knight',
 'A Bold, Bad Knight']
</snippet></ROW><ROW><id>13335514</id><snippet>zip()</snippet></ROW><ROW><id>13335514</id><snippet>In [132]: zip(*lis)[0]
Out[132]: 
('Knightriders',
 'The Black Knight',
 'Fly by Knight',
 'An Arabian Knight',
 'A Bold, Bad Knight')
</snippet></ROW><ROW><id>13335514</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>13335514</id><snippet>In [148]: from ast import literal_eval

In [149]: literal_eval(repr(lis).replace(",)",")"))
Out[149]: 
['Knightriders',
 'The Black Knight',
 'Fly by Knight',
 'An Arabian Knight',
 'A Bold, Bad Knight']
</snippet></ROW><ROW><id>13336119</id><snippet>import numpy as np
from scipy.interpolate import interp1d

def interpn(*args, **kw):
    """Interpolation on N-D. 

    ai = interpn(x, y, z, ..., a, xi, yi, zi, ...)
    where the arrays x, y, z, ... define a rectangular grid
    and a.shape == (len(x), len(y), len(z), ...)
    """
    method = kw.pop('method', 'cubic')
    if kw:
        raise ValueError("Unknown arguments: " % kw.keys())
    nd = (len(args)-1)//2
    if len(args) != 2*nd+1:
        raise ValueError("Wrong number of arguments")
    q = args[:nd]
    qi = args[nd+1:]
    a = args[nd]
    for j in range(nd):
        a = interp1d(q[j], a, axis=j, kind=method)(qi[j])
    return a

import matplotlib.pyplot as plt

x = np.linspace(0, 1, 6)
y = np.linspace(0, 1, 7)
k = np.array([0, 1])
z = np.cos(2*x[:,None,None] + k[None,None,:]) * np.sin(3*y[None,:,None])

xi = np.linspace(0, 1, 60)
yi = np.linspace(0, 1, 70)
zi = interpn(x, y, z, xi, yi, method='linear')

plt.subplot(221)
plt.imshow(z[:,:,0].T, interpolation='nearest')

plt.subplot(222)
plt.imshow(zi[:,:,0].T, interpolation='nearest')

plt.subplot(223)
plt.imshow(z[:,:,1].T, interpolation='nearest')

plt.subplot(224)
plt.imshow(zi[:,:,1].T, interpolation='nearest')

plt.show()
</snippet></ROW><ROW><id>13336164</id><snippet>AttributeError: 'NoneType' object has no attribute 'get'
</snippet></ROW><ROW><id>13336164</id><snippet>grid</snippet></ROW><ROW><id>13336164</id><snippet>None</snippet></ROW><ROW><id>13336164</id><snippet>a</snippet></ROW><ROW><id>13336164</id><snippet>b</snippet></ROW><ROW><id>13336164</id><snippet>None</snippet></ROW><ROW><id>13336164</id><snippet>grid</snippet></ROW><ROW><id>13336164</id><snippet>self.a = Entry(self.top)
self.b = Entry(self.top)

self.a.grid(row=0, column=1,padx=10)
self.b.grid(row=1, column=1,padx=10)
</snippet></ROW><ROW><id>13336321</id><snippet>gtk.HBox(homogeneous=True)
</snippet></ROW><ROW><id>13336321</id><snippet>import pygtk
pygtk.require20()
import gtk

data = [['1', '!help',    '1', '0', 'blabla'], 
        ['2', '!version', '1', '1', 'blabla'], 
        ['3', '!tp',      '0', '1', 'blabla']]

def main():
    window = gtk.Window()
    window.set_title('Dynamic controls')
    window.connect("delete_event", gtk.main_quit)

    vbox = gtk.VBox()
    window.add(vbox)

    for row in data:
        hbox = gtk.HBox(homogeneous=True)
        hbox.pack_start(gtk.Label(row[1]))
        enabled_checkbox = gtk.CheckButton('Enabled')
        enabled_checkbox.set_active(row[2] is '1')
        hbox.pack_start(enabled_checkbox)
        op_checkbox = gtk.CheckButton('OP')
        op_checkbox.set_active(row[3] is '1')
        hbox.pack_start(op_checkbox)
        hbox.pack_start(gtk.Label(row[4]))
        vbox.pack_start(hbox)


    window.show_all()
    gtk.main()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13336386</id><snippet>with open('input.txt') as input:
    for line in input:
        name, data = line.split(' ', 1)

        with open('{0}.txt'.format(name), 'a') as f:
            f.write(data)
</snippet></ROW><ROW><id>13336443</id><snippet>$ python -mtimeit -s"from scipy.optimize import nnls; m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; b=[1, 2, 3]" "nnls(m, b)"
10000 loops, best of 3: 38.5 usec per loop

$ python -mtimeit -s"import numpy as np; from scipy.optimize import nnls; m = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); b=[1, 2, 3]" "nnls(m, b)"
100000 loops, best of 3: 20 usec per loop

$ python -mtimeit -s"import numpy as np; from scipy.optimize import nnls; m = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]); b=np.array([1, 2, 3])" "nnls(m, b)"
100000 loops, best of 3: 11.4 usec per loop
</snippet></ROW><ROW><id>13336443</id><snippet>nnls</snippet></ROW><ROW><id>13336471</id><snippet>1</snippet></ROW><ROW><id>13336471</id><snippet>10</snippet></ROW><ROW><id>13336471</id><snippet>0 indexed</snippet></ROW><ROW><id>13336471</id><snippet>0</snippet></ROW><ROW><id>13336471</id><snippet>9</snippet></ROW><ROW><id>13336471</id><snippet>sel = randint(0, 9)
</snippet></ROW><ROW><id>13336471</id><snippet>choice()</snippet></ROW><ROW><id>13336471</id><snippet>random_word = random.choice(words)
</snippet></ROW><ROW><id>13336591</id><snippet>with open('cr_fixes.xml') as file: # get some data to process
    xmlfile = file.read()

def CRlistToTable(CRlist):
    cols = CRlist[0] # first item is header-row of col names on the first line

    CRstrings = ['&lt;table cellspacing="1" cellpadding="1" border="1"&gt;']
    # table header row
    CRstrings.append('  &lt;tr&gt;')
    for col in cols:
        CRstrings.append('    &lt;th bgcolor="#67B0F9" scope="col"&gt;{}&lt;/th&gt;'.format(col))
    CRstrings.append('  &lt;/tr&gt;')

    # create a template for each table row
    TR_TEMPLATE = ['  &lt;tr&gt;']
    # 1st col of each row is CR and handled separately since it corresponds to a link
    TR_TEMPLATE.append(
        '    &lt;td&gt;&lt;a href="http://prism/CR/{{{}}}"&gt;{{{}}}&lt;/a&gt;&lt;/td&gt;'.format(*[cols[0]]*2))
    for col in cols[1:]:
        TR_TEMPLATE.append('    &lt;td&gt;{{}}&lt;/td&gt;'.format(col))
    TR_TEMPLATE.append('  &lt;/tr&gt;')
    TR_TEMPLATE = '\n'.join(TR_TEMPLATE)

    # then apply the template to all the non-header rows of CRlist
    for items in CRlist[1:]:
        CRstrings.append(TR_TEMPLATE.format(CR=items[0], *items[1:]))
    CRstrings.append("&lt;/table&gt;")

    return '\n'.join(CRstrings) + '\n'

FIXES_START_TAG, FIXES_END_TAG = '&lt;Fixes&gt;, &lt;/Fixes&gt;'.replace(',', ' ').split()
CRsFixesStart = xmlfile.find(FIXES_START_TAG) + len(FIXES_START_TAG)
CRsFixesEnd = xmlfile.find(FIXES_END_TAG)
info = xmlfile[CRsFixesStart:CRsFixesEnd].strip().splitlines()

# first line of extracted info is a blank-separated list of column names
num_cols = len(info[0].split())

# split non-blank lines of info into list of columnar data
# assuming last col is the variable-length title, comprising reminder of line
CRlist = [line.split(None, num_cols-1) for line in info if line]

# convert list into html table
crInfo = CRlistToTable(CRlist)
print crInfo
</snippet></ROW><ROW><id>13336591</id><snippet>&lt;table cellspacing="1" cellpadding="1" border="1"&gt;
  &lt;tr&gt;
    &lt;th bgcolor="#67B0F9" scope="col"&gt;CR&lt;/th&gt;
    &lt;th bgcolor="#67B0F9" scope="col"&gt;FA&lt;/th&gt;
    &lt;th bgcolor="#67B0F9" scope="col"&gt;CL&lt;/th&gt;
    &lt;th bgcolor="#67B0F9" scope="col"&gt;TITLE&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="http://prism/CR/409452"&gt;409452&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;WLAN&lt;/td&gt;
    &lt;td&gt;656885&lt;/td&gt;
    &lt;td&gt;Age out RSSI values from buffer in Beacon miss scenario&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="http://prism/CR/12345,45678"&gt;12345,45678&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;BT&lt;/td&gt;
    &lt;td&gt;54567,34567&lt;/td&gt;
    &lt;td&gt;Test&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="http://prism/CR/379104"&gt;379104&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;BT&lt;/td&gt;
    &lt;td&gt;656928&lt;/td&gt;
    &lt;td&gt;CR379104: BT doesnt work that Riva neither sends HCI Evt for HID ACL data nor 
        response to HCI_INQUIRY after entering into pseudo sniff subrating mode.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>13336625</id><snippet>This is not all of the code</snippet></ROW><ROW><id>13336625</id><snippet>Image</snippet></ROW><ROW><id>13336625</id><snippet>Image</snippet></ROW><ROW><id>13336625</id><snippet>PIL</snippet></ROW><ROW><id>13336625</id><snippet>PIL</snippet></ROW><ROW><id>13336625</id><snippet>Image</snippet></ROW><ROW><id>13336625</id><snippet>img = PIL.Image.open("majestic creature.jpeg").convert("RGB")
</snippet></ROW><ROW><id>13336686</id><snippet>sorted(student_loan_portfolio.items(), key=lambda (k,v): v['rate'], reverse=True)
</snippet></ROW><ROW><id>13336686</id><snippet>-v['rate']</snippet></ROW><ROW><id>13336686</id><snippet>reverse=True</snippet></ROW><ROW><id>13336686</id><snippet>sorted</snippet></ROW><ROW><id>13336860</id><snippet>def some_function():

    def some_other_function():
        # code that does stuff
        pass

    # code that does stuff
    pass
</snippet></ROW><ROW><id>13336860</id><snippet>some_other_function</snippet></ROW><ROW><id>13336860</id><snippet>some_function</snippet></ROW><ROW><id>13336871</id><snippet>sympy.functions.elementary.trigonometric.cos</snippet></ROW><ROW><id>13336871</id><snippet>cos</snippet></ROW><ROW><id>13336871</id><snippet>from sympy import *
</snippet></ROW><ROW><id>13336871</id><snippet>&lt;ufunc 'cos'&gt;</snippet></ROW><ROW><id>13336871</id><snippet>cos</snippet></ROW><ROW><id>13336871</id><snippet>from scipy import *
</snippet></ROW><ROW><id>13336871</id><snippet>cos</snippet></ROW><ROW><id>13336871</id><snippet>from pylab import *
</snippet></ROW><ROW><id>13336871</id><snippet>&lt;ufunc 'cos'&gt;</snippet></ROW><ROW><id>13336871</id><snippet>np.cos</snippet></ROW><ROW><id>13336871</id><snippet>import numpy as np
</snippet></ROW><ROW><id>13336871</id><snippet>phi</snippet></ROW><ROW><id>13336871</id><snippet>AttributeError</snippet></ROW><ROW><id>13336877</id><snippet>def horrible_class_decorator_factory(mixin):
    def decorator(cls):
        d = cls.__dict__.copy()
        bases = tuple([b for b in cls.__bases__ if b != object] + [mixin])
        return type(cls.__name__, bases, d)
    return decorator
</snippet></ROW><ROW><id>13336877</id><snippet>class Inferer(object):
    @classmethod
    def foo(cls):
        return "bar" + cls.__name__

inferer = horrible_class_decorator_factory(Inferer)

@inferer
class X(object):
    pass

X.foo()
"barX"
</snippet></ROW><ROW><id>13336887</id><snippet>floatformat</snippet></ROW><ROW><id>13336887</id><snippet>localize</snippet></ROW><ROW><id>13336887</id><snippet>floatformat</snippet></ROW><ROW><id>13336887</id><snippet>localize</snippet></ROW><ROW><id>13336940</id><snippet>~/.bashrc</snippet></ROW><ROW><id>13336940</id><snippet> alias python=python3
</snippet></ROW><ROW><id>13336940</id><snippet>python</snippet></ROW><ROW><id>13336944</id><snippet>import matplotlib as mpl</snippet></ROW><ROW><id>13336944</id><snippet>mpl.use('Agg')</snippet></ROW><ROW><id>13336944</id><snippet>import matplotlib.pyplot as plt</snippet></ROW><ROW><id>13337087</id><snippet>(1, 36)</snippet></ROW><ROW><id>13337087</id><snippet>(0, 36)</snippet></ROW><ROW><id>13337087</id><snippet>
fwd_count_sort=sorted(rvs_count.items(), key=lambda x: (x[0][1],-x[0][0]), reverse=True)</snippet></ROW><ROW><id>13337154</id><snippet>fib(int(sys.argv[1]))
</snippet></ROW><ROW><id>13337165</id><snippet>from collections import Iterable

class AliasDefaultDict():
    def __init__(self, default_factory, initial=[]):
        self.aliases = {}
        self.data = {}
        self.factory = default_factory
        for aliases, value in initial:
            self[aliases] = value

    @staticmethod
    def distinguish_keys(key):
        if isinstance(key, Iterable) and not isinstance(key, str):
            return set(key)
        else:
            return {key}

    def __getitem__(self, key):
        keys = self.distinguish_keys(key)
        if keys &amp; self.aliases.keys():
            return self.data[self.aliases[keys.pop()]]
        else:
            value = self.factory()
            self[keys] = value
            return value

    def __setitem__(self, key, value):
        keys = self.distinguish_keys(key)
        if keys &amp; self.aliases.keys():
            self.data[self.aliases[keys.pop()]] = value
        else:
            new_key = object()
            self.data[new_key] = value
            for key in keys:
                self.aliases[key] = new_key
            return value

    def __repr__(self):
        representation = defaultdict(list)
        for alias, value in self.aliases.items():
            representation[value].append(alias)
        return "AliasDefaultDict({}, {})".format(repr(self.factory), repr([(aliases, self.data[value]) for value, aliases in representation.items()]))
</snippet></ROW><ROW><id>13337165</id><snippet>&gt;&gt;&gt; a_dict = AliasDefaultDict(dict)
&gt;&gt;&gt; a_dict['food', 'canned_food']['spam'] = 'delicious'
&gt;&gt;&gt; a_dict['food']
{'spam': 'delicious'}
&gt;&gt;&gt; a_dict['canned_food']
{'spam': 'delicious'}
&gt;&gt; a_dict
AliasDefaultDict(&lt;class 'dict'&gt;, [(['food', 'canned_food'], {'spam': 'delicious'})])
</snippet></ROW><ROW><id>13337165</id><snippet>str</snippet></ROW><ROW><id>13337165</id><snippet>basestring</snippet></ROW><ROW><id>13337165</id><snippet>self.aliases.keys()</snippet></ROW><ROW><id>13337165</id><snippet>self.aliases.viewkeys()</snippet></ROW><ROW><id>13337538</id><snippet>html = open('led.html','r').read()
</snippet></ROW><ROW><id>13337538</id><snippet>import cherrypy
import os.path
import struct
from jinja2 import Template

class Server(object):
    led_switch=1 
    def index(self,  switch=''):
        myText = ''
        if switch:
            self.led_switch = int(switch)             
            myText = "Please Wait"
        html = Template("""
                &lt;html&gt;
                &lt;body onload='setTimeout(function(){document.getElementById("UserMessage").innerHTML = "Ok! it's done"}, 5000)'&gt;
                &lt;br&gt;
                &lt;p id="UserMessage"&gt;{{ htmlText }}&lt;p&gt;
                &lt;a href="?switch=1"&gt;&lt;img src="images/on.png"&gt;&lt;/a&gt;
                &lt;/body&gt;
                &lt;/html&gt;
                """)

        return html.render(htmlText=myText)
    index.exposed = True

    conf = {
        'global' : { 
            'server.socket_host': '0.0.0.0', #0.0.0.0 or specific IP
            'server.socket_port': 8080 #server port
        },

        '/images': { #images served as static files
            'tools.staticdir.on': True,
            'tools.staticdir.dir': os.path.abspath('images')
        },

        '/favicon.ico': {  #favorite icon
            'tools.staticfile.on': True,  
            'tools.staticfile.filename': os.path.abspath("images/bulb.ico")
        }
    }
cherrypy.quickstart(Server(), config=conf)
</snippet></ROW><ROW><id>13337557</id><snippet>os.sep</snippet></ROW><ROW><id>13337557</id><snippet>os.path.join()</snippet></ROW><ROW><id>13337557</id><snippet>&gt;&gt;&gt; os.path.join("data", "foo1")
"data/foo1"
</snippet></ROW><ROW><id>13337623</id><snippet>Series</snippet></ROW><ROW><id>13337623</id><snippet>DataFrame</snippet></ROW><ROW><id>13337623</id><snippet>DatetimeIndex.format()</snippet></ROW><ROW><id>13337623</id><snippet>In [510]: df = pd.DataFrame(data)

In [511]: df['OrigDate'] = df.index.format()

In [513]: df
Out[513]: 
             Price    OrigDate
Date                          
2002-09-09  233.25  2002-09-09
2002-09-11  233.05  2002-09-11
2002-09-16  230.25  2002-09-16
2002-09-18  230.10  2002-09-18
2002-09-19  230.05  2002-09-19
</snippet></ROW><ROW><id>13337623</id><snippet>asfreq()</snippet></ROW><ROW><id>13337623</id><snippet>In [528]: df.asfreq("D", method='bfill')
Out[528]: 
             Price    OrigDate
2002-09-09  233.25  2002-09-09
2002-09-10  233.05  2002-09-11
2002-09-11  233.05  2002-09-11
2002-09-12  230.25  2002-09-16
2002-09-13  230.25  2002-09-16
2002-09-14  230.25  2002-09-16
2002-09-15  230.25  2002-09-16
2002-09-16  230.25  2002-09-16
2002-09-17  230.10  2002-09-18
2002-09-18  230.10  2002-09-18
2002-09-19  230.05  2002-09-19
</snippet></ROW><ROW><id>13337623</id><snippet>last()</snippet></ROW><ROW><id>13337623</id><snippet>DataFrameGroupBy</snippet></ROW><ROW><id>13337623</id><snippet>In [529]: df.resample("D", how='last', fill_method='bfill')
Out[529]: 
             Price    OrigDate
Date                          
2002-09-09  233.25  2002-09-09
2002-09-10  233.05  2002-09-11
2002-09-11  233.05  2002-09-11
2002-09-12  230.25  2002-09-16
2002-09-13  230.25  2002-09-16
2002-09-14  230.25  2002-09-16
2002-09-15  230.25  2002-09-16
2002-09-16  230.25  2002-09-16
2002-09-17  230.10  2002-09-18
2002-09-18  230.10  2002-09-18
2002-09-19  230.05  2002-09-19
</snippet></ROW><ROW><id>13337659</id><snippet>FILE_UPLOAD_PERMISSIONS '0760'
</snippet></ROW><ROW><id>13337659</id><snippet>FILE_UPLOAD_PERMISSIONS = 0760
</snippet></ROW><ROW><id>13337822</id><snippet>isinstance</snippet></ROW><ROW><id>13337822</id><snippet>PyObject_TypeCheck</snippet></ROW><ROW><id>13337822</id><snippet>if (PyObject_TypeCheck(obj, typeobject)) {
     /* obj matches the given type */
}
</snippet></ROW><ROW><id>13337822</id><snippet>if (Py_TYPE(obj) == typeobject) {
    /* obj is an instance of the given type and not a subclass */
}
</snippet></ROW><ROW><id>13337822</id><snippet>&amp;PyLongDoubleArrType_Type</snippet></ROW><ROW><id>13337885</id><snippet>html2text</snippet></ROW><ROW><id>13337885</id><snippet>import html2text
html = open("foobar.html").read()
print html2text.html2text(html)
</snippet></ROW><ROW><id>13337904</id><snippet>fetchall()</snippet></ROW><ROW><id>13337904</id><snippet>for result in events:
    my_instance = SomeClass(result[0], result[1])
    # Do whatever you want to do with the instances, which looks like
    # it may be appending to data
    data.append(my_instance) # Or data.append(SomeClass(result[0], result[1]))
</snippet></ROW><ROW><id>13337960</id><snippet>r</snippet></ROW><ROW><id>13337960</id><snippet>sudo (r' sed -i "/sometext/a textwith\backslash" /home/me/somefile.txt',shell=True)
</snippet></ROW><ROW><id>13338018</id><snippet>crawl</snippet></ROW><ROW><id>13338018</id><snippet>n &lt; 0</snippet></ROW><ROW><id>13338018</id><snippet>n-1</snippet></ROW><ROW><id>13338018</id><snippet>will_visit</snippet></ROW><ROW><id>13338018</id><snippet>analyze</snippet></ROW><ROW><id>13338018</id><snippet># Crawl this page and process its links
child_urls = self.analyze(url)    
for u in child_urls:
    if u in self.visited:
        continue  # Do nothing, because it's already been visited
    self.crawl(u, n-1)
</snippet></ROW><ROW><id>13338018</id><snippet>analyze</snippet></ROW><ROW><id>13338018</id><snippet>def analyze(self, url):
    ...
    urls = collector.getLinks()
    returns urls
</snippet></ROW><ROW><id>13338112</id><snippet>re.findall</snippet></ROW><ROW><id>13338112</id><snippet>email.extend(re.findall(pattern,content))</snippet></ROW><ROW><id>13338219</id><snippet>In [13]: data = np.matrix(np.arange(10)[::-1].reshape(-1,2))

In [14]: data
Out[14]: 
matrix([[9, 8],
        [7, 6],
        [5, 4],
        [3, 2],
        [1, 0]])

In [15]: temp = data.view(np.ndarray)

In [16]: np.lexsort((temp[:, 1], ))
Out[16]: array([4, 3, 2, 1, 0])

In [17]: temp[np.lexsort((temp[:, 1], ))]
Out[17]: 
array([[1, 0],
       [3, 2],
       [5, 4],
       [7, 6],
       [9, 8]])
</snippet></ROW><ROW><id>13338219</id><snippet>np.lexsort</snippet></ROW><ROW><id>13338219</id><snippet>np.lexsort</snippet></ROW><ROW><id>13338219</id><snippet>np.lexsort</snippet></ROW><ROW><id>13338219</id><snippet>temp = data.view(np.ndarray)</snippet></ROW><ROW><id>13338219</id><snippet>data</snippet></ROW><ROW><id>13338219</id><snippet>temp[np.lexsort((temp[:, 1], ))]
</snippet></ROW><ROW><id>13338219</id><snippet>sort</snippet></ROW><ROW><id>13338219</id><snippet>In [65]: data.dtype
Out[65]: dtype('int32')

In [66]: temp2 = data.ravel().view('int32, int32')

In [67]: temp2.sort(order = ['f1', 'f0'])
</snippet></ROW><ROW><id>13338219</id><snippet>temp2</snippet></ROW><ROW><id>13338219</id><snippet>data</snippet></ROW><ROW><id>13338219</id><snippet>temp2</snippet></ROW><ROW><id>13338219</id><snippet>data</snippet></ROW><ROW><id>13338219</id><snippet>In [69]: data
Out[69]: 
matrix([[1, 0],
        [3, 2],
        [5, 4],
        [7, 6],
        [9, 8]])
</snippet></ROW><ROW><id>13338417</id><snippet>self.timer.start()
</snippet></ROW><ROW><id>13338551</id><snippet>{"$date": number-of-milliseconds-since-epoch}</snippet></ROW><ROW><id>13338551</id><snippet>{
   "S": "someString",
   "N": 123,
   "F": 12.3,
   "D": {"$date": 1352540684243}
}
</snippet></ROW><ROW><id>13338551</id><snippet>D</snippet></ROW><ROW><id>13338551</id><snippet>json_util</snippet></ROW><ROW><id>13338551</id><snippet>import json, dateutil.parser, bson.json_util

a = """{
    "mydate": {"$isodate": "2012-11-01T20:19:55.782Z"}
}"""

def my_hook(dct):
    if '$isodate' in dct:
        return dateutil.parser.parse(dct['$isodate'])
    return bson.json_util.object_hook(dct)

obj = json.loads(a, object_hook=my_hook)
</snippet></ROW><ROW><id>13338789</id><snippet>in</snippet></ROW><ROW><id>13338789</id><snippet>&gt;&gt;&gt; 'laughter' in 'slaughter'
True
&gt;&gt;&gt; 1 in [1,6,5]
True
&gt;&gt;&gt; 'eta' in ['e','t','a']
False
&gt;&gt;&gt; 'asd' in ['asdf','jkl;']
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13338789</id><snippet>for</snippet></ROW><ROW><id>13338789</id><snippet>join</snippet></ROW><ROW><id>13338789</id><snippet>in</snippet></ROW><ROW><id>13338789</id><snippet>zip</snippet></ROW><ROW><id>13338979</id><snippet>$(GAE_SDK_ROOT)/google/appengine/tools/dev_appserver.py</snippet></ROW><ROW><id>13338979</id><snippet>def AreModuleFilesModified(self)</snippet></ROW><ROW><id>13338979</id><snippet>self._dirty = True</snippet></ROW><ROW><id>13338979</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>13339236</id><snippet>get_current_user</snippet></ROW><ROW><id>13339236</id><snippet>None</snippet></ROW><ROW><id>13339236</id><snippet>user = users.get_current_user()</snippet></ROW><ROW><id>13339236</id><snippet>if</snippet></ROW><ROW><id>13339236</id><snippet>user = users.get_current_user()
if user:
    greeting = ("Welcome, %s! (&lt;a href=\"%s\"&gt;sign out&lt;/a&gt;)" %
                (user.nickname(), users.create_logout_url("/")))
else:
    greeting = ("&lt;a href=\"%s\"&gt;Sign in or register&lt;/a&gt;." %
                users.create_login_url("/"))

self.response.out.write("&lt;html&gt;&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;" % greeting)
</snippet></ROW><ROW><id>13339236</id><snippet>get_current_user()</snippet></ROW><ROW><id>13339236</id><snippet>None</snippet></ROW><ROW><id>13339236</id><snippet>users.create_login_url()</snippet></ROW><ROW><id>13339236</id><snippet>get_current_user()</snippet></ROW><ROW><id>13339236</id><snippet>User</snippet></ROW><ROW><id>13339245</id><snippet>subprocess</snippet></ROW><ROW><id>13339245</id><snippet>from subprocess import check_output

command = 'pdfkt %s dump_data_fields' % path
output = check_output(command, shell=True)
# do some processing here on output
</snippet></ROW><ROW><id>13339304</id><snippet>nsolve</snippet></ROW><ROW><id>13339304</id><snippet>Solve a nonlinear equation system numerically::

    nsolve(f, [args,] x0, modules=['mpmath'], **kwargs)

f is a vector function of symbolic expressions representing the system.
args are the variables. If there is only one variable, this argument can
be omitted.
x0 is a starting vector close to a solution.
</snippet></ROW><ROW><id>13339304</id><snippet>nsolve(G(phi), 0)</snippet></ROW><ROW><id>13339304</id><snippet>nsolve(G(phi), 3)</snippet></ROW><ROW><id>13339845</id><snippet>...
item['title'] = site.select('a/text()').extract()
item['link'] = site.select('a/@href').extract()
item['desc'] = site.select('text()').extract()
items.append(item)
with open('log.txt', 'a') as f:
  f.write('name: {0}, link: {1}\n'.format(item['title'], item['link']))
</snippet></ROW><ROW><id>13339936</id><snippet>buildLocation</snippet></ROW><ROW><id>13339936</id><snippet>\r</snippet></ROW><ROW><id>13339936</id><snippet>print repr(rPlf)</snippet></ROW><ROW><id>13339936</id><snippet>buildLocation = buildLocation.strip('\r')
</snippet></ROW><ROW><id>13340418</id><snippet>l = [x*x for x in range(0, 10)]
</snippet></ROW><ROW><id>13340552</id><snippet>str.split()</snippet></ROW><ROW><id>13340552</id><snippet>re.split()</snippet></ROW><ROW><id>13340552</id><snippet>import re

re.split(r"[ {=]", "foo bar=baz{qux")
</snippet></ROW><ROW><id>13340552</id><snippet>['foo', 'bar', 'baz', 'qux']
</snippet></ROW><ROW><id>13340585</id><snippet>b[1:6, 1:6] = a
</snippet></ROW><ROW><id>13340614</id><snippet>filter</snippet></ROW><ROW><id>13340614</id><snippet>max_conf = max(x['confidence'] for x in d[0])
filter(lambda x: x['confidence']==max_conf, d[0])
</snippet></ROW><ROW><id>13340614</id><snippet>filter</snippet></ROW><ROW><id>13340614</id><snippet>max_records = [x for x in d[0] if x['confidence'] == max_conf]
</snippet></ROW><ROW><id>13340621</id><snippet>if any(x in line for x in ('SU', 'AU', 'VU', 'rf')) and '/*' not in line and BUILDROOT in line:
    lineMatch = False
</snippet></ROW><ROW><id>13340649</id><snippet>raise</snippet></ROW><ROW><id>13340649</id><snippet>my_function()</snippet></ROW><ROW><id>13340649</id><snippet>IndexError</snippet></ROW><ROW><id>13340649</id><snippet>try:
    content = my_function()
    if 'stuff' not in content:
        raise ValueError('stuff is not in content')
except (ValueError, IndexError):
    exit('Could not complete request.')
</snippet></ROW><ROW><id>13340649</id><snippet>except</snippet></ROW><ROW><id>13340649</id><snippet>MemoryError</snippet></ROW><ROW><id>13340649</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>13340649</id><snippet>SystemExit</snippet></ROW><ROW><id>13340649</id><snippet>sys.exit()</snippet></ROW><ROW><id>13340649</id><snippet>Exception</snippet></ROW><ROW><id>13340649</id><snippet>SyntaxError</snippet></ROW><ROW><id>13340649</id><snippet>Exception</snippet></ROW><ROW><id>13340870</id><snippet>if 'p4port' not in line:
    labels.append(line)
</snippet></ROW><ROW><id>13340870</id><snippet>if '@' in line and line == l and 'p4port' not in line:
    lineMatch = True
    labels.append(line.strip('\n').split('@')[1] + '&lt;br&gt;\n')
</snippet></ROW><ROW><id>13341035</id><snippet>str.isdigit()</snippet></ROW><ROW><id>13341035</id><snippet>In [5]: "123".isdigit()
Out[5]: True

In [7]: "123.3".isdigit()
Out[7]: False

In [8]: "foo".isdigit()
Out[8]: False
</snippet></ROW><ROW><id>13341035</id><snippet>def get(self):
    c = self.a.get()
    d = self.b.get()
    if c.isdigit() and d.isdigit():
        c,d=int(c),int(d)
        if c&gt;255 or c&lt;0 or d&gt;255 or d&lt;0 :
            print c
            tkMessageBox.showerror("Error2", "Please enter a value between 0-255")
            self.clicked_wbbalance()
        elif c&lt;255 and c&gt;0 and d&lt;255 and d&gt;0:
            print "it worked"
            pass
    else:
         print "input is not an integer"
</snippet></ROW><ROW><id>13341130</id><snippet>django.views</snippet></ROW><ROW><id>13341335</id><snippet>from itertools import takewhile, izip_longest
from operator import itemgetter
somezip = lambda *p: list(takewhile(itemgetter(0),izip_longest(*p)))
</snippet></ROW><ROW><id>13341335</id><snippet>somezip = lambda *p: list(takewhile(lambda e: not e[0] is None,izip_longest(*p)))
</snippet></ROW><ROW><id>13341335</id><snippet>&gt;&gt;&gt; from itertools import takewhile, izip_longest
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; b = [5, 6, 7, 8, 9]
&gt;&gt;&gt; c = [10, 11, 12]
&gt;&gt;&gt; somezip(a,b)
[(1, 5), (2, 6), (3, 7), (4, 8)]
&gt;&gt;&gt; somezip(a,c)
[(1, 10), (2, 11), (3, 12), (4, None)]
&gt;&gt;&gt; somezip(b,c)
[(5, 10), (6, 11), (7, 12), (8, None), (9, None)]
</snippet></ROW><ROW><id>13341823</id><snippet>rem</snippet></ROW><ROW><id>13341823</id><snippet>rem</snippet></ROW><ROW><id>13341823</id><snippet>remember</snippet></ROW><ROW><id>13341823</id><snippet>rem ember</snippet></ROW><ROW><id>13341823</id><snippet>&gt;&gt;&gt; line = 'remember_last = True'
&gt;&gt;&gt; line.split(None, 1)[0].lower()
'remember_last'
</snippet></ROW><ROW><id>13342032</id><snippet>import csv
    import os
    import random
    for dirname, dirnames, filenames in os.walk(r"C:/Users/s/Desktop/filme/"):
        for subdirname in dirnames:
        foldere_filme = os.path.join(dirname, subdirname)
        numarul_folderelor = foldere_filme.replace("C:/Users/s/Desktop/filme/", "")
        print numarul_folderelor #1,2,3,4,5...
        root_text = "C:/Users/s/Desktop/text/tags"+numarul_folderelor+".csv"
        fisier_text_tags = csv.writer(open(root_text,'wb'))

        row_test = []

        for filenames in os.listdir(foldere_filme):
            tags = filenames.replace("&lt;SP&gt;", " ").replace(".avi", "")
            test = ['blah '+varible+' test, blah '+varible+' aaaaah clip, blah '+varible+' putlocker, download '+varible+' clip',
                    'blah '+varible+' free tuttiing, blah '+varible+' clip free, blah '+varible+' test clip, download '+varible+' aaaaah clip',
                    'blah '+varible+' 2012, blah '+varible+' test free, download '+varible+' 2012 clip, free tuttiing '+varible+'',
                    'blah '+varible+' free aaaaah clip, blah '+varible+' test 2012, where to blah '+varible+', '+varible+' aaaaah clip test',
                    'strem '+varible+' test free, blah '+varible+' free 2012, blah '+varible+' test for free, '+varible+' aaaaah clip test',
                    'putlocker 2012, blah '+varible+' free, download '+varible+' test, blah test '+varible+' for free, free clip tuttiing']
            random.shuffle(test)

            row_test.append(test[0])

       fisier_text_tags.writerow(row_test)
</snippet></ROW><ROW><id>13342088</id><snippet>os.path.getsizeof</snippet></ROW><ROW><id>13342088</id><snippet>len(some_string)</snippet></ROW><ROW><id>13342355</id><snippet>import csv
from StringIO import StringIO

i = """"Equipment","LNKEQP","METAST","METSER","MODSTA","METEOD"
"HLL_POS_00098",1,1,0,0,0
"TOY_GAT_00003",0,0,0,3,0
"NAT_POS_00010",0,3,0,3,0
"NAT_GAT_00002",0,0,0,0,0
"NAT_GAT_00001",0,0,0,4,0
A machine A is unavailable
"""

# Take only those lines that contain a comma.
j = "".join([line for line in StringIO(i).readlines() if ',' in line])

# Parse the taken lines as CSV.
reader = csv.reader(StringIO(j))
for line in reader:
    print line
</snippet></ROW><ROW><id>13342355</id><snippet>['Equipment', 'LNKEQP', 'METAST', 'METSER', 'MODSTA', 'METEOD']
['HLL_POS_00098', '1', '1', '0', '0', '0']
['TOY_GAT_00003', '0', '0', '0', '3', '0']
['NAT_POS_00010', '0', '3', '0', '3', '0']
['NAT_GAT_00002', '0', '0', '0', '0', '0']
['NAT_GAT_00001', '0', '0', '0', '4', '0']
</snippet></ROW><ROW><id>13342444</id><snippet>lambda</snippet></ROW><ROW><id>13342444</id><snippet>lambda</snippet></ROW><ROW><id>13342444</id><snippet>exec</snippet></ROW><ROW><id>13342444</id><snippet>&gt;&gt;&gt; t=lambda x:exec(x)
&gt;&gt;&gt; t("print('hello')")
hello
</snippet></ROW><ROW><id>13342444</id><snippet>compile()</snippet></ROW><ROW><id>13342444</id><snippet>eval()</snippet></ROW><ROW><id>13342444</id><snippet>&gt;&gt;&gt; t=lambda x:eval(compile(x,'None','single'))
&gt;&gt;&gt; strs="print 'hello'"
&gt;&gt;&gt; t(strs)
hello
</snippet></ROW><ROW><id>13342444</id><snippet>compile()</snippet></ROW><ROW><id>13342444</id><snippet>compile(...)
    compile(source, filename, mode[, flags[, dont_inherit]]) -&gt; code object

    Compile the source string (a Python module, statement or expression)
    into a code object that can be executed by the exec statement or eval().
    The filename will be used for run-time error messages.
    The mode must be 'exec' to compile a module, 'single' to compile a
    single (interactive) statement, or 'eval' to compile an expression.
    The flags argument, if present, controls which future statements influence
    the compilation of the code.
    The dont_inherit argument, if non-zero, stops the compilation inheriting
    the effects of any future statements in effect in the code calling
    compile; if absent or zero these statements do influence the compilation,
    in addition to any features explicitly specified.
</snippet></ROW><ROW><id>13342481</id><snippet>http://[your_app_id_here].appspot.com/listdatasets</snippet></ROW><ROW><id>13343147</id><snippet>def parse_tweet(in_t):
    t = {}
    t["_id"] = get_me_an_int32_id
    t["text"] = in_t["text"]
    t["shape"] = in_t["coordinates"]["coordinates"][0], in_t["coordinates"]["coordinates"][1]
    return t
</snippet></ROW><ROW><id>13343152</id><snippet>#!/usr/bin/env python

import sys
for line in sys.stdin:
        line = line.strip()
        if line.find("&lt;row") != -1 :
            words=line.split(' ')
            campaignID=words[1].split('"')[1]
            adGroupID=words[2].split('"')[1]
            print "%s:%s:"%(campaignID,adGroupID)
</snippet></ROW><ROW><id>13343152</id><snippet>bin/hadoop jar contrib/streaming/hadoop-streaming-1.0.4.jar - file /path/to/mapper.py file -mapper /path/to/mapper.py file -file /path/to/reducer.py file -reducer /path/to/reducer.py file -input /user/input -output /user/output
</snippet></ROW><ROW><id>13343152</id><snippet>create database test;
use test;
create table testtable ( a varchar (100), b varchar(100) );
</snippet></ROW><ROW><id>13343152</id><snippet>./sqoop export --connect jdbc:mysql://localhost/test --username root --table testnow --export-dir /user/output --input-fields-terminated-by ':'
</snippet></ROW><ROW><id>13343195</id><snippet>/@src</snippet></ROW><ROW><id>13343195</id><snippet>imageUrl = xhtml.xpath('//img[@alt="something"]/@src')
</snippet></ROW><ROW><id>13343383</id><snippet>zip()</snippet></ROW><ROW><id>13343383</id><snippet>a = ["Spears", "Adele", "NDubz", "Nicole", "Cristina"]
b = [1, 2, 3, 4, 5]

combined = zip(a, b)
random.shuffle(combined)

a[:], b[:] = zip(*combined)
</snippet></ROW><ROW><id>13343607</id><snippet>TestSuite</snippet></ROW><ROW><id>13343607</id><snippet>unittest.main.TestProgram</snippet></ROW><ROW><id>13343607</id><snippet>unittest.main</snippet></ROW><ROW><id>13343607</id><snippet>main()</snippet></ROW><ROW><id>13343607</id><snippet>sys.argv</snippet></ROW><ROW><id>13344116</id><snippet> def executeQuery(conn, query):
     cur = conn.cursor()
     cur.execute(query)
     cur = executeQuery(smacConn, query)
     rows = cur.fetchall()
     cur.close()
     return rows
</snippet></ROW><ROW><id>13344250</id><snippet>super(MyClass, self).__method__(other)</snippet></ROW><ROW><id>13344250</id><snippet>str</snippet></ROW><ROW><id>13344250</id><snippet>__radd__</snippet></ROW><ROW><id>13344250</id><snippet>str</snippet></ROW><ROW><id>13344250</id><snippet>&gt;&gt;&gt; class MyString(str):
...     def __add__(self, other):
...             print 'called'
...             return MyString(super(MyString, self).__add__(other))
... 
&gt;&gt;&gt; 'test' + MyString('test')
'testtest'
&gt;&gt;&gt; ('test' + MyString('test')).__class__
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>13344250</id><snippet>__radd__</snippet></ROW><ROW><id>13344250</id><snippet>AttributeError</snippet></ROW><ROW><id>13344250</id><snippet>str</snippet></ROW><ROW><id>13344250</id><snippet>__radd__</snippet></ROW><ROW><id>13344250</id><snippet>BINARY_ADD</snippet></ROW><ROW><id>13344250</id><snippet>+</snippet></ROW><ROW><id>13344250</id><snippet>str.__radd__</snippet></ROW><ROW><id>13344250</id><snippet>list</snippet></ROW><ROW><id>13344250</id><snippet>tuple</snippet></ROW><ROW><id>13344250</id><snippet>+</snippet></ROW><ROW><id>13344250</id><snippet>__add__</snippet></ROW><ROW><id>13344250</id><snippet>__radd__</snippet></ROW><ROW><id>13344250</id><snippet>__radd__</snippet></ROW><ROW><id>13344250</id><snippet>MyString.__add__</snippet></ROW><ROW><id>13344250</id><snippet>str</snippet></ROW><ROW><id>13344250</id><snippet>__radd__</snippet></ROW><ROW><id>13344250</id><snippet>&gt;&gt;&gt; class MyString(str):
...     def __add__(self, s):
...             print '__add__'
...             return MyString(str(self) + s)
... 
&gt;&gt;&gt; 'test' + MyString('test')
'testtest'
</snippet></ROW><ROW><id>13344250</id><snippet>MyString.__add__</snippet></ROW><ROW><id>13344250</id><snippet>&gt;&gt;&gt; MyString('test') + 'test'
__add__
'testtest'
</snippet></ROW><ROW><id>13344250</id><snippet>x</snippet></ROW><ROW><id>13344250</id><snippet>y</snippet></ROW><ROW><id>13344250</id><snippet>x.__op__(y)</snippet></ROW><ROW><id>13344250</id><snippet>NotImplemented</snippet></ROW><ROW><id>13344250</id><snippet>y.__rop__(x)</snippet></ROW><ROW><id>13344250</id><snippet>NotImplemented</snippet></ROW><ROW><id>13344250</id><snippet>TypeError</snippet></ROW><ROW><id>13344250</id><snippet>__rop__()</snippet></ROW><ROW><id>13344250</id><snippet>__rop__()</snippet></ROW><ROW><id>13344250</id><snippet>__op__()</snippet></ROW><ROW><id>13344250</id><snippet>__op__()</snippet></ROW><ROW><id>13344250</id><snippet>str</snippet></ROW><ROW><id>13344250</id><snippet>__r*__</snippet></ROW><ROW><id>13344416</id><snippet>JobStatus.objects.filter(status='PRF').values_list('job', flat=True).order_by('job').annotate(count_status=Count('status')).filter(count_status__gt=1).distinct()
</snippet></ROW><ROW><id>13344668</id><snippet>len()</snippet></ROW><ROW><id>13344668</id><snippet>type(obj).__len__(obj)</snippet></ROW><ROW><id>13344668</id><snippet>len()</snippet></ROW><ROW><id>13344668</id><snippet>.length()</snippet></ROW><ROW><id>13344668</id><snippet>.length</snippet></ROW><ROW><id>13344668</id><snippet>len(x)</snippet></ROW><ROW><id>13344668</id><snippet>x.len()</snippet></ROW><ROW><id>13344668</id><snippet>def __len__()</snippet></ROW><ROW><id>13344668</id><snippet>x*(a+b)</snippet></ROW><ROW><id>13344668</id><snippet>x*a + x*b</snippet></ROW><ROW><id>13344668</id><snippet>len(x)</snippet></ROW><ROW><id>13344668</id><snippet>x.len()</snippet></ROW><ROW><id>13344668</id><snippet>len()</snippet></ROW><ROW><id>13344668</id><snippet>get()</snippet></ROW><ROW><id>13344668</id><snippet>keys()</snippet></ROW><ROW><id>13344668</id><snippet>write()</snippet></ROW><ROW><id>13344717</id><snippet>mylibs</snippet></ROW><ROW><id>13344717</id><snippet>site-packages</snippet></ROW><ROW><id>13344717</id><snippet>setup.py</snippet></ROW><ROW><id>13344717</id><snippet>mylib</snippet></ROW><ROW><id>13344717</id><snippet>mylib</snippet></ROW><ROW><id>13344717</id><snippet>mylibs</snippet></ROW><ROW><id>13344717</id><snippet>setup.py</snippet></ROW><ROW><id>13344717</id><snippet>setup.py</snippet></ROW><ROW><id>13344923</id><snippet>try</snippet></ROW><ROW><id>13344923</id><snippet>sys</snippet></ROW><ROW><id>13344923</id><snippet>&gt;&gt;&gt; if sys.version_info.major&gt;=2 and sys.version_info.minor&gt;=7:
...     from unittest import TestCase
... else:
...     from unittest2 import TestCase
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 4, in &lt;module&gt;
ImportError: No module named 'unittest2'
</snippet></ROW><ROW><id>13344923</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; major, minor = sys.version_info.major, sys.version_info.minor
&gt;&gt;&gt; if (major &gt;= 2 and minor &gt;= 7) or (major &gt;= 3 and minor &gt;= 2):
...     from unittest import TestCase
... else:
...     from unittest2 import TestCase
... 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13344923</id><snippet>try</snippet></ROW><ROW><id>13344923</id><snippet>try</snippet></ROW><ROW><id>13344923</id><snippet>try:
    from _accelerated import *
except ImportError:
    pass
</snippet></ROW><ROW><id>13344986</id><snippet>.</snippet></ROW><ROW><id>13344986</id><snippet>{{ feed.playlist.playlist }}</snippet></ROW><ROW><id>13344986</id><snippet>{{ feed.profile.username }}</snippet></ROW><ROW><id>13344986</id><snippet>UserPlaylist</snippet></ROW><ROW><id>13344986</id><snippet>profile</snippet></ROW><ROW><id>13344986</id><snippet>playlist</snippet></ROW><ROW><id>13344986</id><snippet>[model_you_want_to_span]_set.all</snippet></ROW><ROW><id>13344986</id><snippet>vpls = Videoplaylist.objects.filter(playlist__profile=request.user)</snippet></ROW><ROW><id>13344986</id><snippet>{% for feed in playlist %}    
    {{feed}}
    {% for vpl in feed.videoplaylist_set.all %}    
      {{ vpl.video.video_url }}    
    {% endfor %}    
    &lt;br&gt;    
{% endfor %}
</snippet></ROW><ROW><id>13345172</id><snippet>Blueprint</snippet></ROW><ROW><id>13345172</id><snippet>Blueprint</snippet></ROW><ROW><id>13345172</id><snippet>url_for</snippet></ROW><ROW><id>13345172</id><snippet>def dispatch_request(self):
    logging.debug(flask.url_for('.novar'))
    logging.debug(flask.url_for('.novar', _external=True))
    return flask.redirect(flask.url_for('.var', somevar='test'))
</snippet></ROW><ROW><id>13345336</id><snippet>cat /etc/mtab | awk '{ print $2 }'</snippet></ROW><ROW><id>13345337</id><snippet>...</snippet></ROW><ROW><id>13345370</id><snippet>wx.CallAfter</snippet></ROW><ROW><id>13345370</id><snippet>def __init__(...):
    # ...
    self.grid1.Bind(wx.grid.EVT_GRID_EDITOR_CREATED, self.editor_created)
    self.grid1.Bind(wx.grid.EVT_GRID_EDITOR_SHOWN, self.editor_shown)

def editor_created(self, event):
    self.control = event.GetControl()
    event.Skip()

def editor_shown(self, event):
    cursor = event.Row, event.Col
    value = self.grid1.GetCellValue(*cursor)
    if not value:
        self.grid1.SetCellValue(cursor[0], cursor[1], ' ')
        def unfix():
            self.control.SetValue(value)
            self.control.Popup()
            # @todo should set the cell value back to empty value here,
            # but that triggers the bug again.
        wx.CallAfter(unfix)
    event.Skip()
</snippet></ROW><ROW><id>13345443</id><snippet>re.sub(r'_thing_', temp, template)
</snippet></ROW><ROW><id>13345443</id><snippet>_thing_</snippet></ROW><ROW><id>13345443</id><snippet>temp</snippet></ROW><ROW><id>13345443</id><snippet>temp</snippet></ROW><ROW><id>13345443</id><snippet>re.sub</snippet></ROW><ROW><id>13345443</id><snippet>temp</snippet></ROW><ROW><id>13345443</id><snippet>def replacer(match):
    return ...
</snippet></ROW><ROW><id>13345443</id><snippet>iter</snippet></ROW><ROW><id>13345443</id><snippet>In [27]: math6 = ['chapter1', 'chapter2', 'chapter3', 'chapter1-3test']

In [28]: math6 = iter(math6)

In [29]: next(math6)
Out[29]: 'chapter1'

In [30]: next(math6)
Out[30]: 'chapter2'
</snippet></ROW><ROW><id>13345443</id><snippet>def replacer(match):
    return next(data)
</snippet></ROW><ROW><id>13345443</id><snippet>math6</snippet></ROW><ROW><id>13345443</id><snippet>math4</snippet></ROW><ROW><id>13345443</id><snippet>data</snippet></ROW><ROW><id>13345443</id><snippet>def replace_with(data):
    def replacer(match):
        return next(data)
    return replacer
</snippet></ROW><ROW><id>13345443</id><snippet>import re

math6 = iter(['chapter1', 'chapter2', 'chapter3', 'chapter1-3test'])
math4 = iter(['chapter1.1', 'chapter1.2-3', 'chapter2'])

text = r'''
    \begin{tabular}{|p{0.7in}|p{0.8in}|p{2.2in}|p{.9in}|p{2.6in}|p{1.6in}|}
    6${}^{th}$ Math  \newline M\newline  &amp; _math6_&amp; 
    6${}^{th}$ Math  \newline W \newline  &amp; _math6_ &amp; 
    6${}^{th}$ Math  \newline  F \newline  &amp; _math6_ &amp;  
    4${}^{th}$ Math  \newline M\newline  &amp;  &amp; _math4_  &amp;
    4${}^{th}$ Math \newline W\newline  &amp;  &amp; _math4_  &amp; 
    \end{tabular}
'''

def replace_with(data):
    def replacer(match):
        return next(data)
    return replacer

for pat, data in [(r'_math6_', math6), (r'_math4_', math4)]:
    text = re.sub(pat, replace_with(data), text)

print(text)    
</snippet></ROW><ROW><id>13345443</id><snippet>\begin{tabular}{|p{0.7in}|p{0.8in}|p{2.2in}|p{.9in}|p{2.6in}|p{1.6in}|}
6${}^{th}$ Math  \newline M\newline  &amp; chapter1&amp; 
6${}^{th}$ Math  \newline W \newline  &amp; chapter2 &amp; 
6${}^{th}$ Math  \newline  F \newline  &amp; chapter3 &amp;  
4${}^{th}$ Math  \newline M\newline  &amp;  &amp; chapter1.1  &amp;
4${}^{th}$ Math \newline W\newline  &amp;  &amp; chapter1.2-3  &amp; 
\end{tabular}
</snippet></ROW><ROW><id>13345524</id><snippet>solve</snippet></ROW><ROW><id>13345524</id><snippet>solve</snippet></ROW><ROW><id>13345524</id><snippet>nsolve</snippet></ROW><ROW><id>13345524</id><snippet>nsolve</snippet></ROW><ROW><id>13345529</id><snippet>return path(a, row+1, col, weight, list(cumulative)) + 
       path(a, row+1, col+1, weight, list(cumulative))
</snippet></ROW><ROW><id>13345587</id><snippet>echo -n 'First answer\nSecond answer\n' | python script.py
</snippet></ROW><ROW><id>13345730</id><snippet>time.sleep(3)</snippet></ROW><ROW><id>13345730</id><snippet>q.send_keys(Keys.RETURN)</snippet></ROW><ROW><id>13345730</id><snippet>br.get("http://www.google.com/search?q=python")
results = br.find_elements_by_class_name('g')
</snippet></ROW><ROW><id>13346065</id><snippet>localize()</snippet></ROW><ROW><id>13346065</id><snippet>datetime.datetime</snippet></ROW><ROW><id>13346065</id><snippet>.astimezone()</snippet></ROW><ROW><id>13346065</id><snippet>&gt;&gt;&gt; localdt = local_tz.localize(datetime.datetime(year, month, day, hour, min))
&gt;&gt;&gt; localdt.astimezone(pytz.UTC)
datetime.datetime(2012, 12, 2, 12, 1, tzinfo=&lt;UTC&gt;)
</snippet></ROW><ROW><id>13346065</id><snippet>datetime</snippet></ROW><ROW><id>13346065</id><snippet>&gt;&gt;&gt; localdt.astimezone(pytz.UTC) == localdt
True
</snippet></ROW><ROW><id>13346122</id><snippet>repr</snippet></ROW><ROW><id>13346122</id><snippet>eval(repr(f)) == f</snippet></ROW><ROW><id>13346122</id><snippet>True</snippet></ROW><ROW><id>13346122</id><snippet>repr</snippet></ROW><ROW><id>13346122</id><snippet>printf</snippet></ROW><ROW><id>13346122</id><snippet>%.17g</snippet></ROW><ROW><id>13346122</id><snippet>%.17g</snippet></ROW><ROW><id>13346122</id><snippet>repr(0.1 * 0.1)</snippet></ROW><ROW><id>13346122</id><snippet>"0.010000000000000002"</snippet></ROW><ROW><id>13346122</id><snippet>0.1 * 0.1 == 0.01</snippet></ROW><ROW><id>13346122</id><snippet>False</snippet></ROW><ROW><id>13346122</id><snippet>0.1</snippet></ROW><ROW><id>13346122</id><snippet>0.01</snippet></ROW><ROW><id>13346122</id><snippet>&gt;&gt;&gt; 0.1.hex()
'0x1.999999999999ap-4'
&gt;&gt;&gt; (0.1 * 0.1).hex()
'0x1.47ae147ae147cp-7'
&gt;&gt;&gt; 0.01.hex()
'0x1.47ae147ae147bp-7'
                 ^ 1 ulp difference
</snippet></ROW><ROW><id>13346122</id><snippet>repr</snippet></ROW><ROW><id>13346122</id><snippet>str</snippet></ROW><ROW><id>13346122</id><snippet>str</snippet></ROW><ROW><id>13346483</id><snippet>    m=[0,1.51, 2.01, 2.51, 3.01,5.01, 6.01,7.01, 8.01,9.01, 10.01]
    n=[.15, .22, .3, .37, .4, .5, .6, .7, .8, .9, 1]



    def test(x,a,b):
       for i in range(len(a)-1):
             if a[i] &lt; x &lt;a[i+1]:return b[i]

    &gt;&gt;&gt;&gt;test(3,m,n)
    &gt;&gt;&gt;&gt; 0.37
    &gt;&gt;&gt;&gt;test(.32,n,m)
    &gt;&gt;&gt;&gt; 2.01
</snippet></ROW><ROW><id>13346583</id><snippet>|fitness(node, word) = count of word in node text if node is a leaf
|fitness(node, word) = sum(fitness(child, word) for child in children) / 
                         count of overall elements in node tree
</snippet></ROW><ROW><id>13346583</id><snippet>import lxml.html

node = """&lt;html&gt;&lt;body&gt;
    &lt;p&gt;
        Hello &lt;b&gt;foo&lt;/b&gt;, I like foo, because foo is the best.
    &lt;p&gt;
    &lt;div&gt;
        &lt;blockquote&gt;
            &lt;p&gt;&lt;strong&gt;Foo&lt;/strong&gt; said: foo foo!&lt;/p&gt;
            &lt;p&gt;Smurfs ate the last foo and turned blue. Foo!&lt;/p&gt;
            &lt;p&gt;Foo foo.&lt;/p&gt;
        &lt;/blockquote&gt;
    &lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;"""

node = lxml.html.fromstring(node)

def suitability(node, word):
    mx = [0.0, None]
    _suitability(node, word, mx)
    return mx[1]

def _suitability(node, word, mx):

    children = node.getchildren()
    sparsity = 1
    result = float(node.text_content().lower().count(word))
    for child in children:
        res, spars = _suitability(child, word, mx)
        result += res
        sparsity += spars
    result /= sparsity
    current_max, max_node = mx
    if current_max &lt; result:
        mx[0] = result
        mx[1] = node
    return result, sparsity

print suitability(node, 'foo')
</snippet></ROW><ROW><id>13346800</id><snippet>len(a)</snippet></ROW><ROW><id>13346800</id><snippet>enumerate</snippet></ROW><ROW><id>13346800</id><snippet>for col_num, col_val in enumerate(a):
    if col_val.strip():
        xlSheet.Cells(output_row, col_num + 1).Value = col_val.strip()
</snippet></ROW><ROW><id>13347163</id><snippet>new_dict = {
    'tf' : original_dict.get('temp_f', None),
    'rh' : original_dict.get('relative_humidity', None),
     # And so on...
}
</snippet></ROW><ROW><id>13347183</id><snippet>zip()</snippet></ROW><ROW><id>13347183</id><snippet>In [72]: lis=[1, 2, 3, 4, 5, 6]

In [73]: [complex(a,b) for a,b in zip(lis[::2],lis[1::2])]
Out[73]: [(1+2j), (3+4j), (5+6j)]
</snippet></ROW><ROW><id>13347183</id><snippet>In [74]: [complex(lis[i],lis[i+1]) for i in range(0,len(lis),2)]
Out[74]: [(1+2j), (3+4j), (5+6j)]
</snippet></ROW><ROW><id>13347183</id><snippet>In [76]: it=iter(lis)

In [77]: [complex(next(it),next(it)) for _ in range(len(lis)/2)]
Out[77]: [(1+2j), (3+4j), (5+6j)]
</snippet></ROW><ROW><id>13347200</id><snippet>select_related</snippet></ROW><ROW><id>13347200</id><snippet>request.user</snippet></ROW><ROW><id>13347200</id><snippet>split()</snippet></ROW><ROW><id>13347200</id><snippet>request.user</snippet></ROW><ROW><id>13347200</id><snippet>filter</snippet></ROW><ROW><id>13347200</id><snippet>basicdetails = BasicDetails.objects.filter(username=request.user)
</snippet></ROW><ROW><id>13347200</id><snippet>select_related</snippet></ROW><ROW><id>13347200</id><snippet>username</snippet></ROW><ROW><id>13347200</id><snippet>user</snippet></ROW><ROW><id>13347318</id><snippet>print "%x" % (int(a, 16) ^ int(b, 16))
</snippet></ROW><ROW><id>13347318</id><snippet>%</snippet></ROW><ROW><id>13347318</id><snippet>hex()</snippet></ROW><ROW><id>13347318</id><snippet>hex()</snippet></ROW><ROW><id>13347318</id><snippet>0x</snippet></ROW><ROW><id>13347318</id><snippet>L</snippet></ROW><ROW><id>13347318</id><snippet>a=0x5f70a65ac
b=0x58e7e5c36
print "%x" % (a ^ b)
</snippet></ROW><ROW><id>13347510</id><snippet>import sys
sys.path.remove('&lt;path to 2.7&gt;')
sys.path.append('&lt;path to 3.3&gt;')
</snippet></ROW><ROW><id>13347594</id><snippet>last</snippet></ROW><ROW><id>13347594</id><snippet>temp list</snippet></ROW><ROW><id>13347594</id><snippet>first element</snippet></ROW><ROW><id>13347594</id><snippet>def rec_cumsum(numbers):
    if len(numbers) == 0 : return temp

    # You need to check, if `temp` is empty, that means method is called first time.
    if not temp:   
        temp.extend([numbers[0]])   // Just add the first element to it.

    else:
        # Else, get the last element from `temp`, 
        # add it to `first elemt` in `numbers` and add it to `temp`.
        temp.extend([temp[-1] + numbers[0]])

    return rec_cumsum(numbers[1:])

my_list = [2, 2, 2, 3]
temp = []
print rec_cumsum(my_list)
</snippet></ROW><ROW><id>13347614</id><snippet>import numpy as np

matrix = np.zeros((2,3,10))
second_col = np[:,1,:]
</snippet></ROW><ROW><id>13348193</id><snippet>class.name</snippet></ROW><ROW><id>13348193</id><snippet>instance.name</snippet></ROW><ROW><id>13348193</id><snippet>id(C.foo)</snippet></ROW><ROW><id>13348193</id><snippet>id(cobj.foo)</snippet></ROW><ROW><id>13348193</id><snippet>C.foo</snippet></ROW><ROW><id>13348193</id><snippet>cobj.foo</snippet></ROW><ROW><id>13348193</id><snippet>id()</snippet></ROW><ROW><id>13348193</id><snippet>id()</snippet></ROW><ROW><id>13348193</id><snippet>__dict__</snippet></ROW><ROW><id>13348193</id><snippet>__get__</snippet></ROW><ROW><id>13348193</id><snippet>&gt;&gt;&gt; class C(object):
...     def foo(self):
...         pass
... 
&gt;&gt;&gt; C.foo
&lt;unbound method C.foo&gt;
&gt;&gt;&gt; C.__dict__['foo']
&lt;function foo at 0x1088cc488&gt;
&gt;&gt;&gt; C.__dict__['foo'].__get__(None, C)
&lt;unbound method C.foo&gt;
&gt;&gt;&gt; C.__dict__['foo'].__get__(C(), C)
&lt;bound method C.foo of &lt;__main__.C object at 0x1088d6f90&gt;&gt;
</snippet></ROW><ROW><id>13348193</id><snippet>&gt;&gt;&gt; C.foo
&lt;function C.foo at 0x10bc48dd0&gt;
&gt;&gt;&gt; C.foo.__get__(None, C)
&lt;function C.foo at 0x10bc48dd0&gt;
&gt;&gt;&gt; C.foo.__get__(C(), C)
&lt;bound method C.foo of &lt;__main__.C object at 0x10bc65150&gt;&gt;
</snippet></ROW><ROW><id>13348305</id><snippet>itertools.imap</snippet></ROW><ROW><id>13348474</id><snippet>import matplotlib.pyplot as plt
import numpy as np


s = [{1: 1000000, 2: 1000000, 3: 1000000, 4: 1000000, 5:1000000},
     {1: 1000000, 0: 1000000, 8: 1000000, 3: 1000000, 7:1000000}]

def boxplot(data, x=0):

    sorted_data = np.array(data.items())
    sorted_data = np.sort(sorted_data, 0)
    values = sorted_data[:,0]
    freqs = sorted_data[:,1]
    freqs = np.cumsum(freqs)
    freqs = freqs*1./np.max(freqs)

    #get 25%, 50%, 75% percentiles
    idx = np.searchsorted(freqs, [0.25, 0.5, 0.75])
    p25, p50, p75 = values[idx]
    vmin, vmax = values.min(), values.max()

    ax = plt.gca()
    l,r = -0.2+x, 0.2+x
    #plot boxes
    plt.plot([l,r], [p50, p50], 'k')
    plt.plot([l, r, r, l, l], [p25, p25, p75, p75, p25], 'k')
    plt.plot([x,x], [p75, vmax], 'k')
    plt.plot([x,x], [p25, vmin], 'k')

for i in range(len(s)):
    boxplot(s[i],i)
plt.xlim(-0.5,1.5)
plt.show()
</snippet></ROW><ROW><id>13348634</id><snippet>values_list</snippet></ROW><ROW><id>13348634</id><snippet>values</snippet></ROW><ROW><id>13348634</id><snippet>&gt;&gt;&gt; ObjectVersion.objects.filter(...).values('Cabinet__name')
[{'Cabinet__name':'foo'}, {'Cabinet__name':'foo2'}, ...]
</snippet></ROW><ROW><id>13348634</id><snippet>&gt;&gt;&gt; ObjectVersion.objects.filter(...).values_list('Cabinet__name')
[('foo',), ('foo2',), ...]
</snippet></ROW><ROW><id>13348784</id><snippet>_upright</snippet></ROW><ROW><id>13348784</id><snippet>cv</snippet></ROW><ROW><id>13348784</id><snippet>cv2</snippet></ROW><ROW><id>13348784</id><snippet>import cv2
</snippet></ROW><ROW><id>13348784</id><snippet>surf_params = {"_hessianThreshold":1000,
 "_nOctaves":4, 
"_nOctaveLayers":2, 
"_extended":1, 
"_upright":0}
</snippet></ROW><ROW><id>13348784</id><snippet>upright</snippet></ROW><ROW><id>13348784</id><snippet>1</snippet></ROW><ROW><id>13348784</id><snippet>90</snippet></ROW><ROW><id>13348784</id><snippet>surf = cv2.SURF(**surf_params)
image = cv2.imread('img.jpg', cv2.CV_LOAD_IMAGE_GRAYSCALE)
(keypoints, descriptors) = surf.detect(image, mask=None, useProvidedKeypoints=False)

for keypoint in keypoints:
    x,y = keypoint.pt
    size = keypoint.size 
    orientation = keypoint.angle
    response = keypoint.response 
    octave = keypoint.octave
    class_id = keypoint.class_id
    print (x,y), size, orientation
</snippet></ROW><ROW><id>13348784</id><snippet>(523.3077392578125, 933.419189453125) 156.0 199.023590088
(1417.82470703125, 957.7914428710938) 166.0 127.772354126
(1398.8065185546875, 971.0693359375) 165.0 126.83026123
(1009.0242309570312, 1032.0604248046875) 176.0 164.367050171
</snippet></ROW><ROW><id>13348784</id><snippet>cv2</snippet></ROW><ROW><id>13348891</id><snippet>weakref</snippet></ROW><ROW><id>13348891</id><snippet>with ...</snippet></ROW><ROW><id>13348891</id><snippet>import weakref

class FileHandler:
    def __init__(self, dbf, caller = None):
        if caller is not None:
            self._ref = weakref.ref(caller, self.close)
        self.thefile = open(dbf, 'rb')
    def __enter__(self):
        return self
    def __exit__(self, ext_type, exc_value, traceback):
        self.close()
    def close(self, *args):
        print('closing file')
        self.thefile.close()

class Foo:
    def __init__(self):
        self.fh = FileHandler('/tmp/testfile', caller = self)

def autoclosing_file():
    foo = Foo()

def demo_callback():
    with open('/tmp/testfile', 'w'): pass
    autoclosing_file()


if __name__ == '__main__':
    demo_callback()
</snippet></ROW><ROW><id>13348891</id><snippet>closing file
</snippet></ROW><ROW><id>13348913</id><snippet>myresults = db.megas.aggregate( [ { "$unwind": "$items" },  
    {"$group": { '_id':'$_id' , 'minitem': {'$min': "$items.item" } } } ] )
</snippet></ROW><ROW><id>13348913</id><snippet>for result in myresults['result']:
    db.megas.update( { '_id': result['_id'] }, 
        { '$pull': { 'items': { 'item': result['minitem'] } } } )
</snippet></ROW><ROW><id>13348987</id><snippet>for answer in (dictionary, dictionary2):
</snippet></ROW><ROW><id>13348987</id><snippet>for answer in dictionary:
</snippet></ROW><ROW><id>13348987</id><snippet>for answer in (dictionary):
</snippet></ROW><ROW><id>13348987</id><snippet>w.writeheader()
w.writerow(dictionary)
</snippet></ROW><ROW><id>13348987</id><snippet>for answer in (dictionary,):
    w.writerow(answer)
</snippet></ROW><ROW><id>13348987</id><snippet>NameError</snippet></ROW><ROW><id>13348987</id><snippet>"B"</snippet></ROW><ROW><id>13349008</id><snippet>&gt;&gt;&gt; import numpy 
&gt;&gt;&gt; a = numpy.array([1,2,3])
&gt;&gt;&gt; b = numpy.array([1,3])
&gt;&gt;&gt; c = [a,b]
[array([1, 2, 3]), array([1, 3])]
&gt;&gt;&gt; sorted(c,key=len)
[array([1, 3]), array([1, 2, 3])]
</snippet></ROW><ROW><id>13349008</id><snippet>key=numpy.size</snippet></ROW><ROW><id>13349073</id><snippet>console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)
console_handler.setFormatter(formatter)
</snippet></ROW><ROW><id>13349073</id><snippet>logging.getLogger().addHandler(console_handler)
</snippet></ROW><ROW><id>13349073</id><snippet>captureWarnings()</snippet></ROW><ROW><id>13349073</id><snippet>py.warnings</snippet></ROW><ROW><id>13349073</id><snippet>logging.getLogger('py.warnings').addHandler(console_handler)
</snippet></ROW><ROW><id>13349073</id><snippet>basicConfig()</snippet></ROW><ROW><id>13349073</id><snippet>logging.basicConfig(format='%(asctime)s\t%(levelname)s\t%(message)s', level=logging.DEBUG)
</snippet></ROW><ROW><id>13349083</id><snippet>word</snippet></ROW><ROW><id>13349083</id><snippet>1::2</snippet></ROW><ROW><id>13349083</id><snippet>::-2</snippet></ROW><ROW><id>13349083</id><snippet>&gt;&gt;&gt; word = "ballooned"
&gt;&gt;&gt; word[::2]
'blond'
&gt;&gt;&gt; word[1::2]
'aloe'
</snippet></ROW><ROW><id>13349083</id><snippet>s</snippet></ROW><ROW><id>13349083</id><snippet>words</snippet></ROW><ROW><id>13349083</id><snippet>set</snippet></ROW><ROW><id>13349083</id><snippet>words = set(lowers)
[word for word in words if len(word) &gt;= 8
                        and word[::2] in words
                        and word[1::2] in words]
</snippet></ROW><ROW><id>13349131</id><snippet>rot</snippet></ROW><ROW><id>13349351</id><snippet>addr,obj = s.accept()
</snippet></ROW><ROW><id>13349351</id><snippet>obj,addr = s.accept()
</snippet></ROW><ROW><id>13349351</id><snippet>handle</snippet></ROW><ROW><id>13349351</id><snippet>obj.recv</snippet></ROW><ROW><id>13349351</id><snippet>socket.error</snippet></ROW><ROW><id>13349351</id><snippet>obj</snippet></ROW><ROW><id>13349351</id><snippet>client_sock</snippet></ROW><ROW><id>13349351</id><snippet>sock</snippet></ROW><ROW><id>13349351</id><snippet>msg = addr + msg
</snippet></ROW><ROW><id>13349351</id><snippet>msg = repr(addr).encode('utf-8') + msg
</snippet></ROW><ROW><id>13349351</id><snippet>del message
</snippet></ROW><ROW><id>13349351</id><snippet>message</snippet></ROW><ROW><id>13349351</id><snippet>Queue.get</snippet></ROW><ROW><id>13349383</id><snippet>for word in lowers :
   if len(word) &gt;=7 and word[1:-1] == word[1:-1][::-1] and word [0] != word[-1]:
       nonpalindrome.append(word)
</snippet></ROW><ROW><id>13349383</id><snippet>[1:-1]</snippet></ROW><ROW><id>13349383</id><snippet>[::-1]</snippet></ROW><ROW><id>13349383</id><snippet>In [172]: word='ballooned'

In [173]: word[1:-1] 
Out[173]: 'alloone'

In [174]: word[1:-1][::-1]
Out[174]: 'enoolla'

In [175]: word[::-1]
Out[175]: 'denoollab'
</snippet></ROW><ROW><id>13349383</id><snippet>non_palindrome=[x for x lowers if len(x)&gt;=7 and x[1:-1]==x[1:-1][::-1] and x[0] != x[-1] ]
</snippet></ROW><ROW><id>13349577</id><snippet>spectral.lombscargle</snippet></ROW><ROW><id>13349577</id><snippet>Parameters
----------
x : array_like
Sample times.
y : array_like
Measurement values.
freqs : array_like
Angular frequencies for output periodogram.
</snippet></ROW><ROW><id>13349753</id><snippet>myDict = dict(queryDict.iterlists())</snippet></ROW><ROW><id>13349875</id><snippet>[::-1]</snippet></ROW><ROW><id>13349875</id><snippet>list(word).reverse()</snippet></ROW><ROW><id>13349875</id><snippet>None</snippet></ROW><ROW><id>13349875</id><snippet>"".join(reversed(word))</snippet></ROW><ROW><id>13349875</id><snippet>word[::-1]</snippet></ROW><ROW><id>13349875</id><snippet>[word for word in s if word[::-1] in s]</snippet></ROW><ROW><id>13349875</id><snippet>In [193]: word="timer"

In [194]: print list(word).reverse()
None

In [195]: word[::-1]
Out[195]: 'remit'

In [196]: "".join(reversed(word))
Out[196]: 'remit'
</snippet></ROW><ROW><id>13350019</id><snippet>␣\W+</snippet></ROW><ROW><id>13350019</id><snippet>␣,␣</snippet></ROW><ROW><id>13350019</id><snippet>␣</snippet></ROW><ROW><id>13350019</id><snippet>\W</snippet></ROW><ROW><id>13350019</id><snippet>␣\w+</snippet></ROW><ROW><id>13350019</id><snippet>the␣winter␣...</snippet></ROW><ROW><id>13350019</id><snippet>{0,4}</snippet></ROW><ROW><id>13350019</id><snippet>{4}</snippet></ROW><ROW><id>13350019</id><snippet>␣\W+</snippet></ROW><ROW><id>13350019</id><snippet>␣</snippet></ROW><ROW><id>13350019</id><snippet>␣\W+</snippet></ROW><ROW><id>13350019</id><snippet>␣,</snippet></ROW><ROW><id>13350019</id><snippet>␣\w+</snippet></ROW><ROW><id>13350019</id><snippet>␣the␣winter␣...</snippet></ROW><ROW><id>13350019</id><snippet>{4}</snippet></ROW><ROW><id>13350019</id><snippet>([^ ]+ +){0,4}my_word( +[^ ]+){0,4}</snippet></ROW><ROW><id>13350019</id><snippet>(\w+\W+){0,4}my_word(\W+\w+){0,4}</snippet></ROW><ROW><id>13350019</id><snippet>(^|(\w+\W+){1,5})\W*my_word\W*((\W+\w+){1,5}|$)</snippet></ROW><ROW><id>13350019</id><snippet>(\w+\W+){0,5}\w*my_word\w*(\W*\w+){0,5}</snippet></ROW><ROW><id>13350033</id><snippet>Pygame</snippet></ROW><ROW><id>13350033</id><snippet>from datetime import datetime

Time = datetime.now()

print(Time)
</snippet></ROW><ROW><id>13350033</id><snippet>Pyhook</snippet></ROW><ROW><id>13350121</id><snippet>eval</snippet></ROW><ROW><id>13350121</id><snippet>exec</snippet></ROW><ROW><id>13350121</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>13350121</id><snippet>import ast
a = ast.literal_eval("[1,2,3,4]") //evaluate an expression safely.
</snippet></ROW><ROW><id>13350121</id><snippet>import ast
source = '2 + 2'
node = ast.parse(source, mode='eval')
ast.dump(node)
</snippet></ROW><ROW><id>13350121</id><snippet>Expression(body=BinOp(left=Num(n=2), op=Add(), right=Num(n=2)))
</snippet></ROW><ROW><id>13350153</id><snippet>AttributeError: Unable to determine the file's size.</snippet></ROW><ROW><id>13350153</id><snippet>f.name = fn</snippet></ROW><ROW><id>13350153</id><snippet>newfile = File(f,name='python-logo.gif')
r=Image(image=newfile)
r.save()
newfile.close()
</snippet></ROW><ROW><id>13350241</id><snippet>import requests

from bs4 import BeautifulSoup

url = "http://www.aidn.org.au/Industry-ViewCompany.asp?CID=3113"
html = requests.get(url).text
soup = BeautifulSoup(html)

for feature_heading in soup.find_all("td", {"class": "Feature-Heading"}):
    print "\n=== %s ===" % feature_heading.text
    details = feature_heading.find_next_sibling("td")
    for item in details.find_all("td", {"class": ["bodytext", "paraheading"]}):
        print("\t".join([item["class"][0], " ".join(item.text.split())]))
</snippet></ROW><ROW><id>13350241</id><snippet>requests</snippet></ROW><ROW><id>13350241</id><snippet>urllib2</snippet></ROW><ROW><id>13350241</id><snippet>import csv
import requests

from bs4 import BeautifulSoup

columns = ["ACN", "ABN", "Annual Turnover", "QA"]
urls = ["http://www.aidn.org.au/Industry-ViewCompany.asp?CID=3113", ] # ... etc.

with open("data.csv", "w") as csv_file:
    writer = csv.DictWriter(csv_file, columns)
    writer.writeheader()
    for url in urls:
        soup = BeautifulSoup(requests.get(url).text)
        row = {}
        for heading in soup.find_all("td", {"class": "paraheading"}):
            key = " ".join(heading.text.split()).rstrip(":")
            if key in columns:
                next_td = heading.find_next_sibling("td", {"class": "bodytext"})
                value = " ".join(next_td.text.split())
                row[key] = value
        writer.writerow(row)
</snippet></ROW><ROW><id>13350308</id><snippet># of course you should read the file someway
s = """
Row1Iteration1, Row1Iteration2, Row1Iteration3
Row2Iteration1, Row2Iteration2, Row2Iteration3
Row3Iteration1, Row3Iteration2, Row3Iteration3
Row4Iteration1, Row4Iteration2, Row4Iteration3
Row5Iteration1, Row5Iteration2, Row5Iteration3
"""
ncols = 3

iterations = []
for line in s.strip().split('\n'):
    iterations.append([l.strip() for l in line.split(',')])

with open('output.csv', 'w') as out:
    for col in xrange(ncols):
        for it in iterations:
            print it[col]
            out.write(col)
</snippet></ROW><ROW><id>13350611</id><snippet>INSERT INTO...</snippet></ROW><ROW><id>13350611</id><snippet>UPDATE table ...</snippet></ROW><ROW><id>13350611</id><snippet>UPDATE Table SET column = ? WHERE column2 = ?
</snippet></ROW><ROW><id>13350611</id><snippet>column2</snippet></ROW><ROW><id>13350611</id><snippet>cursor.execute('SELECT column2 FROM Table ORDER BY column2')
column2 = [row[0] for row in cursor]
for j, c in zip(lst, column2):
    cursor.execute('UPDATE Table SET column = ? WHERE column2 = ?', [j, c])
</snippet></ROW><ROW><id>13350611</id><snippet>INSERT</snippet></ROW><ROW><id>13350611</id><snippet>INSERT</snippet></ROW><ROW><id>13350611</id><snippet>args</snippet></ROW><ROW><id>13350611</id><snippet>cursor.executemany('INSERT INTO ...', args)
</snippet></ROW><ROW><id>13350611</id><snippet>cursor.execute</snippet></ROW><ROW><id>13350659</id><snippet>ValueError</snippet></ROW><ROW><id>13350659</id><snippet>continue</snippet></ROW><ROW><id>13350659</id><snippet>try:
    temp_C = float(temp_C)
except ValueError:
    continue # skips to next iteration
</snippet></ROW><ROW><id>13350659</id><snippet>try:
    temp_C = float(sensor_reading.split(' ')[4].rstrip('C'))
except (ValueError, IndexError):
    continue
</snippet></ROW><ROW><id>13350740</id><snippet>select aid
from jt
where bid in (&lt;your list&gt;)
group by aid
having count(distinct bid) = 2
</snippet></ROW><ROW><id>13350740</id><snippet>select aid
from jt join
     bids
     on jf.bid = bids.bid
group by aid
having count(distinct jt.bid) = (select count(*) from bids)
</snippet></ROW><ROW><id>13350788</id><snippet>from base64 import b64encode
from reportlab.lib import units
from reportlab.graphics import renderPM
from reportlab.graphics.barcode import createBarcodeDrawing
from reportlab.graphics.shapes import Drawing

def get_barcode(value, width, barWidth = 0.05 * units.inch, fontSize = 30, humanReadable = True):

    barcode = createBarcodeDrawing('Code128', value = value, barWidth = barWidth, fontSize = fontSize, humanReadable = humanReadable)

    drawing_width = width
    barcode_scale = drawing_width / barcode.width
    drawing_height = barcode.height * barcode_scale

    drawing = Drawing(drawing_width, drawing_height)
    drawing.scale(barcode_scale, barcode_scale)
    drawing.add(barcode, name='barcode')

    return drawing

def get_image():

    barcode = get_barcode(value = '01234567890', width = 600)
    data = b64encode(renderPM.drawToString(barcode, fmt = 'PNG'))
    print '&lt;img src="data:image/png;base64,{0}"&gt;'.format(data)
</snippet></ROW><ROW><id>13350788</id><snippet>def get_barcode_rotated(value, width, barWidth = 0.05 * units.inch, fontSize = 30, humanReadable = True):

    barcode = createBarcodeDrawing('Code128', value = value, barWidth = barWidth, fontSize = fontSize, humanReadable = humanReadable)

    drawing_width = width
    barcode_scale = drawing_width / barcode.width
    drawing_height = barcode.height * barcode_scale

    drawing = Drawing(drawing_width, drawing_height)
    drawing.scale(barcode_scale, barcode_scale)
    drawing.add(barcode, name='barcode')

    drawing_rotated = Drawing(drawing_height, drawing_width)
    drawing_rotated.rotate(90)
    drawing_rotated.translate(0, -drawing_height)
    drawing_rotated.add(drawing, name='drawing')

    return drawing_rotated
</snippet></ROW><ROW><id>13350944</id><snippet>datetime</snippet></ROW><ROW><id>13350944</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; fmt1 = '%Y-%m-%d %H:%M:%S.%f'
&gt;&gt;&gt; fmt2 = '%H:%M:%S %a %b %d %Y'
&gt;&gt;&gt; s1 = '2012-11-12 15:16:08.648521'
&gt;&gt;&gt; s2 = '14:44:02 Mon Nov 12 2012'
&gt;&gt;&gt; dt1 = datetime.datetime.strptime(s1, fmt1)
&gt;&gt;&gt; dt2 = datetime.datetime.strptime(s2, fmt2)
&gt;&gt;&gt; cmp(dt1, dt2)
1
&gt;&gt;&gt; dt1
datetime.datetime(2012, 11, 12, 15, 16, 8, 648521)
&gt;&gt;&gt; dt2
datetime.datetime(2012, 11, 12, 14, 44, 2)
</snippet></ROW><ROW><id>13350944</id><snippet>.000000</snippet></ROW><ROW><id>13350944</id><snippet>dt1 = datetime.datetime(dt1.year, dt1.month, dt1.day, 
                        dt1.hour, dt1.minute, 
                        dt1.second + (1 if dt1.microsecond &gt;= 500000 else 0), 0)
</snippet></ROW><ROW><id>13350944</id><snippet>abs(dt2 - dt1) &lt; datetime.timedelta(0, 1)
</snippet></ROW><ROW><id>13350944</id><snippet>datetime</snippet></ROW><ROW><id>13350944</id><snippet>14:44:02 Mon Nov 12 2012</snippet></ROW><ROW><id>13350944</id><snippet>15:44:02 Sun Nov 11 2012</snippet></ROW><ROW><id>13350944</id><snippet>strftime</snippet></ROW><ROW><id>13350944</id><snippet>strptime</snippet></ROW><ROW><id>13350944</id><snippet>&gt;&gt;&gt; datetime.datetime.strftime(dt2, fmt1)
'2012-11-12 14:44:02.00000'
</snippet></ROW><ROW><id>13351038</id><snippet>def update_html_on_client(request):
    language = request.GET.get('language', None)
    #for selected language do something
    cal_1 = ...
    return render_to_response('my_template.html', {'cal':cal_1}, content_instance = template.RequestContent(request))
</snippet></ROW><ROW><id>13351038</id><snippet>function getServerResponse(){
$.ajax({
  url: 'your_url_here',
  data: {language:'German'},
  dataType:'html'
  success : function(data, status, xhr){
               $('#server_response').html(data);
             }
});
}
</snippet></ROW><ROW><id>13351059</id><snippet># we get the country and producer
for txt in product_shop.findAll(text=True):
   get_origin = re.search('Origine',txt,re.I)
   if re.search('Origine',txt,re.I):
       origin = txt.next.strip()
       try:
           country, producer = origin.split(', ')
       except Exception, e:
           pass
       else:
           adm_product.append(country.encode("iso-8859-1"))
           adm_product.append(producer.encode("iso-8859-1"))
</snippet></ROW><ROW><id>13351059</id><snippet>.... 'Burkina Faso', 'Cercle des S\xe9cheurs']
</snippet></ROW><ROW><id>13351059</id><snippet>&lt;div style="text-align: justify;"&gt;Exquis mélange des plus fins cacaos et de l’aromatique sucre bio du Paraguay, CHOKICHOC est composée exclusivement de matières premières cultivées sans additif ni arôme artificiel. Tous les ingrédients proviennent de cultures biologiques. &lt;strong&gt;Légère, fondante, idéale pour le goûter, un vrai délice!&lt;/strong&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>13351059</id><snippet>&lt;div style="text-align: justify;"&gt;Exquis mélange des plus fins cacaos et de l&amp;rsquo;aromatique sucre bio du Paraguay, CHOKICHOC est composée exclusivement de matières premières cultivées sans additif ni arôme artificiel. Tous les ingrédients proviennent de cultures biologiques. &lt;strong&gt;Légère, fondante, idéale pour le goûter, un vrai délice!&lt;/strong&gt;&lt;/div&gt;&lt;br /&gt;
</snippet></ROW><ROW><id>13351062</id><snippet>&lt;form method="get" action="/search1/"&gt;
&lt;p&gt;&lt;label for="id_q"&gt;Search:&lt;/label&gt;
&lt;input type="text" name="q" id="id_q" value="{{ query }}" /&gt;
&lt;select name="category"&gt;
  {% for category in categories %}
    &lt;option value="{{category.id}}"&gt;{{category.name}}&lt;/option&gt;
  {% endfor %}  
&lt;/select&gt;
&lt;input type="submit" value="Submit" /&gt;&lt;/p&gt;
&lt;/form&gt;



 def search(request):
        if 'q' in request.GET:
          #Get the selected category id 
          sel_category = request.GET.get('category', None)
          #If it exists, get the category object
          if sel_category: 
                category = get_object_or_404(Category, pk = sel_category)
          query = request.GET['q']
          results = Adv.objects.filter(title__icontains=query)
          #If category objects exists filter the result set based on that
          if category:
                    results =results.filter(cate__name__icontains=category.name)
       #   print results.query 
        else:
          query = ""
          results = None
          categories = Category.objects.all()
        template = loader.get_template('search/search1.html')
        context = Context({ 'query': query, 'results': results, 'city_list': ChoiceCity.objects.all(), 'categories':categories })
        response = template.render(context)
        return HttpResponse(response) 
</snippet></ROW><ROW><id>13351085</id><snippet>PyObject_IsInstance</snippet></ROW><ROW><id>13351085</id><snippet>PyObject_GetAttr</snippet></ROW><ROW><id>13351085</id><snippet>PyList_GetItem</snippet></ROW><ROW><id>13351085</id><snippet>PyString_FromString</snippet></ROW><ROW><id>13351085</id><snippet>PyList_GetItem</snippet></ROW><ROW><id>13351085</id><snippet>PyObject_GetAttr</snippet></ROW><ROW><id>13351085</id><snippet>PyObject_HasAttr</snippet></ROW><ROW><id>13351085</id><snippet>GetExpressionTreeClass</snippet></ROW><ROW><id>13351085</id><snippet>ExpressionTree</snippet></ROW><ROW><id>13351085</id><snippet>my_module</snippet></ROW><ROW><id>13351085</id><snippet>Guard</snippet></ROW><ROW><id>13351085</id><snippet>boost::python</snippet></ROW><ROW><id>13351085</id><snippet>Python_exception</snippet></ROW><ROW><id>13351085</id><snippet>Python_exception</snippet></ROW><ROW><id>13351085</id><snippet>PyErr_PrintExc</snippet></ROW><ROW><id>13351085</id><snippet>PyErr_Fetch</snippet></ROW><ROW><id>13351085</id><snippet>class Guard {
  PyObject *obj;
public:
  Guard(PyObject *obj_): obj(obj_) {
    if (!obj)
      throw Python_exception("NULL object");
  }
  ~Guard() {
    Py_DECREF(obj);
  }
};

PyObject *GetExpressionTreeClass()
{
  PyObject *module = PyImport_ImportModule("my_module");
  Guard module_guard(module);
  return PyObject_GetAttrString(module, "ExpressionTree");
}

void VisitTree(PyObject* py_tree) throw (Python_exception)
{
  PyObject *cls = GetExpressionTreeClass();
  Guard cls_guard(cls);

  PyObject* list = PyObject_GetAttrString(py_tree, "children");
  if (!list &amp;&amp; PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();  // hasattr does this exact check
    return;
  }
  Guard list_guard(list);

  Py_ssize_t size = PyList_Size(list);
  for (Py_ssize_t i = 0; i &lt; size; i++) {
    PyObject* child = PyList_GetItem(list, i);
    Py_XINCREF(child);
    Guard child_guard(child);

    // check if child is class instance or number (terminal)
    if (PyInt_Check(child) || PyLong_Check(child) || PyString_Check(child)) 
      ; // terminal - do nothing for now
    else if (PyObject_IsInstance(child, cls))
      VisitTree(child);
    else {
      PyErr_Format(PyExc_TypeError, "unrecognized %s object", Py_TYPE(child)-&gt;tp_name);
      throw Python_exception("unrecognized object from python");
    }
  }
}
</snippet></ROW><ROW><id>13351163</id><snippet>wts = {'H': 1.008,
       'O': 15.999 }
weight = sum(wts[element] for element in ['H','H','O'])
</snippet></ROW><ROW><id>13351193</id><snippet>return ''
</snippet></ROW><ROW><id>13351193</id><snippet>None</snippet></ROW><ROW><id>13351193</id><snippet>self.response</snippet></ROW><ROW><id>13351193</id><snippet>return view.toString()
</snippet></ROW><ROW><id>13351305</id><snippet>subscriptions = filters.get(word)
if subscriptions is not None:
    pass # TODO do something with subscriptions
</snippet></ROW><ROW><id>13351305</id><snippet>try:
    subscriptions = filters[word]
    # TODO do something with subscriptions
except:
    pass # probably don't need to do anything if not present
</snippet></ROW><ROW><id>13351366</id><snippet>[element for element in wts if len(element) == 1]
</snippet></ROW><ROW><id>13351366</id><snippet>for</snippet></ROW><ROW><id>13351366</id><snippet>[element.upper() for element in wts if len(element) == 1]
</snippet></ROW><ROW><id>13351366</id><snippet>x</snippet></ROW><ROW><id>13351366</id><snippet>[x for x in wts if len(x) == 1]
</snippet></ROW><ROW><id>13351803</id><snippet>&gt;&gt;&gt; order = ['C','B','W','E','K']
&gt;&gt;&gt; possibilities = ['E','C','W']
&gt;&gt;&gt; possibilities_in_order = sorted(possibilities, key=order.index)
&gt;&gt;&gt; possibilities_in_order
['C', 'W', 'E']
</snippet></ROW><ROW><id>13351803</id><snippet>element</snippet></ROW><ROW><id>13351803</id><snippet>possibilities</snippet></ROW><ROW><id>13351803</id><snippet>order.index(element)</snippet></ROW><ROW><id>13351803</id><snippet>sorted</snippet></ROW><ROW><id>13351896</id><snippet>Queue</snippet></ROW><ROW><id>13351896</id><snippet>threading</snippet></ROW><ROW><id>13351896</id><snippet>import Queue
import threading
import time
import urllib2

my_sites = [
    'http://news.ycombinator.com',
    'http://news.google.com',
    'http://news.yahoo.com',
    'http://www.cnn.com'
    ]

# Create a queue for our processing
queue = Queue.Queue()


class MyThread(threading.Thread):
  """Create a thread to make the url call."""

  def __init__(self, queue):
    super(MyThread, self).__init__()
    self.queue = queue

  def run(self):
    while True:
      # Grab a url from our queue and make the call.
      my_site = self.queue.get()
      url = urllib2.urlopen(my_site)

      # Grab a little data to make sure it is working
      print url.read(1024)

      # Send the signal to indicate the task has completed
      self.queue.task_done()


def main():

  # This will create a 'pool' of threads to use in our calls
  for _ in range(4):
    t = MyThread(queue)

    # A daemon thread runs but does not block our main function from exiting
    t.setDaemon(True)

    # Start the thread
    t.start()

  # Now go through our site list and add each url to the queue
  for site in my_sites:
    queue.put(site)

  # join() ensures that we wait until our queue is empty before exiting
  queue.join()

if __name__ == '__main__':
  start = time.time()
  main()
  print 'Total Time: {0}'.format(time.time() - start)
</snippet></ROW><ROW><id>13351896</id><snippet>threading</snippet></ROW><ROW><id>13351897</id><snippet>Sub Macro3()
'
' Macro3 Macro
'

'
    ActiveChart.Legend.Select
    Selection.Delete
    ActiveSheet.ChartObjects("Chart 1").Activate
End Sub
</snippet></ROW><ROW><id>13351897</id><snippet>chart.Legend.Delete()
</snippet></ROW><ROW><id>13351897</id><snippet>chart.Parent.Height = new_height
chart.Parent.Width = new_width
chart.Parent.Top = v_position
chart.Parent.Left = h_position
</snippet></ROW><ROW><id>13351897</id><snippet>import win32com.client
import re

xl = win32com.client.Dispatch('Excel.Application')
xl.Visible=True
wb = xl.Workbooks.Add()
ws = wb.Sheets(1)
values = [['a','b','c'],
          [ 1,  2,  3 ],
          [ 4,  5,  6 ]]
for nrow, row in enumerate(values):
    for ncol, item in enumerate(row):
        xl.Cells(nrow+1, ncol+1).Value = item

xl.Range("A1:C3").Select()
chart = xl.Charts.Add()

# chart.Legend.Delete only works while it's a chart sheet.
# so get this done before changing the chart location!
chart.Legend.Delete()

# Excel changes the name of the chart when its location is changed.
# The new name inserts a space between letters and numbers.
# 'Chart1' becomes 'Chart 1'
new_chart_name = re.sub(r'(\D)(\d)', r'\1 \2', chart.Name)
chart.Location(2, ws.Name)

# After changing the location the reference to chart is invalid.
# We grab the new chart reference from the Shapes collection using the new name.
# If only one chart is on sheet you can also do: chart = ws.Shapes(1)
chart = ws.Shapes(new_chart_name)

chart.Top = 1
chart.Left = 1
chart.Width = 500
chart.Height = 400
</snippet></ROW><ROW><id>13352003</id><snippet>if len(x)==len(y):
   return min(x,y)
</snippet></ROW><ROW><id>13352109</id><snippet>Generating XPath expressions</snippet></ROW><ROW><id>13352109</id><snippet>&gt;&gt;&gt; a  = etree.Element("a")
&gt;&gt;&gt; b  = etree.SubElement(a, "b")
&gt;&gt;&gt; c  = etree.SubElement(a, "c")
&gt;&gt;&gt; d1 = etree.SubElement(c, "d")
&gt;&gt;&gt; d2 = etree.SubElement(c, "d")

&gt;&gt;&gt; tree = etree.ElementTree(c)
&gt;&gt;&gt; print(tree.getpath(d2))
/c/d[2]
&gt;&gt;&gt; tree.xpath(tree.getpath(d2)) == [d2]
True
</snippet></ROW><ROW><id>13352116</id><snippet>exec</snippet></ROW><ROW><id>13352116</id><snippet>spawn</snippet></ROW><ROW><id>13352116</id><snippet>os.spawnlpe</snippet></ROW><ROW><id>13352143</id><snippet>y</snippet></ROW><ROW><id>13352143</id><snippet>x</snippet></ROW><ROW><id>13352143</id><snippet>y = sorted(x)</snippet></ROW><ROW><id>13352245</id><snippet>payload = (('key1', 'value1'), ('key2', 'value2'))
r = requests.get("http://httpbin.org/get", params=payload)
</snippet></ROW><ROW><id>13352245</id><snippet>requests</snippet></ROW><ROW><id>13352245</id><snippet>&gt;&gt;&gt; payload = (('key1', 'value1'), ('key2', 'value2'), ('key3', 'value3'))
&gt;&gt;&gt; r = requests.get("http://httpbin.org/get", params=payload)
&gt;&gt;&gt; print r.json
{u'url': u'http://httpbin.org/get?key1=value1&amp;key2=value2&amp;key3=value3', u'headers': {u'Content-Length': u'', u'Accept-Encoding': u'gzip, deflate, compress', u'Connection': u'keep-alive', u'Accept': u'*/*', u'User-Agent': u'python-requests/0.14.1 CPython/2.7.3 Darwin/11.4.2', u'Host': u'httpbin.org', u'Content-Type': u''}, u'args': {u'key3': u'value3', u'key2': u'value2', u'key1': u'value1'}, u'origin': u'109.247.40.35'}
</snippet></ROW><ROW><id>13352412</id><snippet>class MyObject(object):
    ID = 0

    def __init__(self):
       self.id = MyObject.ID = MyObject.ID + 1
</snippet></ROW><ROW><id>13352412</id><snippet>&gt;&gt;&gt; class MyObject(object):
...     ID = 0
...     def __init__(self):
...        self.id = MyObject.ID = MyObject.ID + 1
... 
&gt;&gt;&gt; MyObject().id
1
&gt;&gt;&gt; MyObject().id
2
&gt;&gt;&gt; MyObject().id
3
&gt;&gt;&gt; MyObject.ID
3
</snippet></ROW><ROW><id>13352529</id><snippet>In [1]: s = 'generic/html/path/generic/generic/generic'

In [2]: s.split('html/')[1].split('/')[0]
Out[2]: 'path'
</snippet></ROW><ROW><id>13352545</id><snippet>indices = np.where(bool_vect)[0]
out1 = M.tocsc()[:,indices]
out2 = M.tocsr()[indices,:]
</snippet></ROW><ROW><id>13352563</id><snippet>re.sub()</snippet></ROW><ROW><id>13352563</id><snippet>def subCode(text):
    return re.sub('&lt;&lt;&lt;mytag&gt;&gt;&gt;(.+?)&lt;&lt;&lt;/mytag&gt;&gt;&gt;', replaceFunc, text, flags=re.S)

def replaceFunc(match):
    return replaceCode(match.group(1))
</snippet></ROW><ROW><id>13352563</id><snippet>re.sub()</snippet></ROW><ROW><id>13352747</id><snippet>&lt;script type='text/javascript'&gt;
    foobar = 'hello';
&lt;/script&gt;
</snippet></ROW><ROW><id>13352747</id><snippet>&lt;script type='text/javascript'&gt;
   function test() {
       foobar = 'hi';
   }
&lt;/script&gt;
</snippet></ROW><ROW><id>13352747</id><snippet>function test() {
    var foobar = 'world'; 
}
</snippet></ROW><ROW><id>13352837</id><snippet>DEBUG</snippet></ROW><ROW><id>13352837</id><snippet>if (DEBUG == True)</snippet></ROW><ROW><id>13352843</id><snippet>result = [qstat(cluster) for cluster in Vector]</snippet></ROW><ROW><id>13352843</id><snippet>result=() # or declare -a result
for cluster in ${Vector[@]}; do
  result=("${result[@]}" "$(qstat $cluster)") # or result+=($(qstat $cluster))
done
</snippet></ROW><ROW><id>13352843</id><snippet>extend</snippet></ROW><ROW><id>13352843</id><snippet>result=""
for cluster in $Vector; do
  result="${result} $(qstat cluster)"
done
</snippet></ROW><ROW><id>13352877</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'Hello @Simon, I had a great day today. #StackOverflow'
&gt;&gt;&gt; re.sub(r'(?:^|\s)[@#].*?(?=[,;:.!?]|\s|$)', r'', s)
'Hello, I had a great day today.'
</snippet></ROW><ROW><id>13352992</id><snippet>lipo</snippet></ROW><ROW><id>13352992</id><snippet>i386</snippet></ROW><ROW><id>13352992</id><snippet>:; file /usr/bin/python2.7
/usr/bin/python2.7: Mach-O universal binary with 2 architectures
/usr/bin/python2.7 (for architecture i386): Mach-O executable i386
/usr/bin/python2.7 (for architecture x86_64):   Mach-O 64-bit executable x86_64

:; lipo -thin i386 -output python-i386 /usr/bin/python2.7

:; file python-i386 
python-i386: Mach-O executable i386

:; ./python-i386
Python 2.7.2 (default, Jun 20 2012, 16:23:33) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13352992</id><snippet>python-i386</snippet></ROW><ROW><id>13352992</id><snippet>/usr/bin/env</snippet></ROW><ROW><id>13352992</id><snippet>python</snippet></ROW><ROW><id>13352992</id><snippet>PATH</snippet></ROW><ROW><id>13352992</id><snippet>/usr/bin</snippet></ROW><ROW><id>13352992</id><snippet>platform.architecture()</snippet></ROW><ROW><id>13352992</id><snippet>platform.machine()</snippet></ROW><ROW><id>13353158</id><snippet>True</snippet></ROW><ROW><id>13353158</id><snippet>False</snippet></ROW><ROW><id>13353158</id><snippet>def compare(y, x):
    return y == x
</snippet></ROW><ROW><id>13353158</id><snippet>None</snippet></ROW><ROW><id>13353158</id><snippet>0</snippet></ROW><ROW><id>13353158</id><snippet>''</snippet></ROW><ROW><id>13353158</id><snippet>[]</snippet></ROW><ROW><id>13353158</id><snippet>()</snippet></ROW><ROW><id>13353158</id><snippet>{}</snippet></ROW><ROW><id>13353158</id><snippet>__nonzero__</snippet></ROW><ROW><id>13353158</id><snippet>__bool__</snippet></ROW><ROW><id>13353158</id><snippet>__len__</snippet></ROW><ROW><id>13353276</id><snippet>from twill.commands import *
from bs4 import BeautifulSoup
from urllib import urlopen
import urllib2
import urlparse

with open('urls.txt') as inf:
    urls = [line.strip() for line in inf]
    for url in urls:
        try:
            urllib2.urlopen(url)
        except urllib2.HTTPError, e:
            print e
        site = urlopen(url)   
        soup = BeautifulSoup(site)
        for td in soup.find_all('td', {'class': 'subjectCell'}):
            print td.find('a').text

        next_page = soup.find_all('a', {'class': 'nextlink'}):
        if next_page:
            next_page = next_page[0]
            urls.append(urlparse.urljoin(url, next_page['href']))
</snippet></ROW><ROW><id>13353465</id><snippet>MBObject</snippet></ROW><ROW><id>13353465</id><snippet>import MBObject
thing  = getattr(MBObject, type)
</snippet></ROW><ROW><id>13353465</id><snippet>from MBObject import MBObject</snippet></ROW><ROW><id>13353465</id><snippet>from MBObject import MBObject</snippet></ROW><ROW><id>13353465</id><snippet>import MBObject</snippet></ROW><ROW><id>13353465</id><snippet>MBObject.MBObject</snippet></ROW><ROW><id>13353465</id><snippet>import mbobject
from mbobject import MBObject
thing = getattr(mbobject, type)
</snippet></ROW><ROW><id>13353563</id><snippet>random.sample</snippet></ROW><ROW><id>13353563</id><snippet>numpy.random.permutation</snippet></ROW><ROW><id>13353563</id><snippet>numpy.random.shuffle</snippet></ROW><ROW><id>13353563</id><snippet>numpy.random.sample</snippet></ROW><ROW><id>13353563</id><snippet>import timeit
from matplotlib import pyplot as plt

setup = \
"""
import numpy
import random

number_of_members = 20
values = range(50)
"""

number_of_repetitions = 20
array_sizes = (10, 200)

python_random_times = [timeit.timeit(stmt = "[random.sample(values, number_of_members) for index in xrange({0})]".format(array_size),
                                     setup = setup,                      
                                     number = number_of_repetitions)
                                        for array_size in xrange(*array_sizes)]

numpy_permutation_times = [timeit.timeit(stmt = "[numpy.random.permutation(values)[:number_of_members] for index in xrange({0})]".format(array_size),
                               setup = setup,
                               number = number_of_repetitions)
                                    for array_size in xrange(*array_sizes)]

numpy_shuffle_times = [timeit.timeit(stmt = \
                                """
                                random_arrays = []
                                for index in xrange({0}):
                                    numpy.random.shuffle(values)
                                    random_arrays.append(values[:number_of_members])
                                """.format(array_size),
                                setup = setup,
                                number = number_of_repetitions)
                                     for array_size in xrange(*array_sizes)]                                                                    

numpy_sample_times = [timeit.timeit(stmt = \
                                    """
                                    values = numpy.asarray(values)
                                    random_arrays = [values[indices][:number_of_members] 
                                                for indices in (numpy.random.sample(({0}, len(values))) * len(values)).astype(int)]
                                    """.format(array_size),
                                    setup = setup,
                                    number = number_of_repetitions)
                                         for array_size in xrange(*array_sizes)]                                                                                                                                            

line_0 = plt.plot(xrange(*array_sizes),
                             python_random_times,
                             color = 'black',
                             label = 'random.sample')

line_1 = plt.plot(xrange(*array_sizes),
         numpy_permutation_times,
         color = 'red',
         label = 'numpy.random.permutations'
         )

line_2 = plt.plot(xrange(*array_sizes),
                    numpy_shuffle_times,
                    color = 'yellow',
                    label = 'numpy.shuffle')

line_3 = plt.plot(xrange(*array_sizes),
                    numpy_sample_times,
                    color = 'green',
                    label = 'numpy.random.sample')

plt.xlabel('Number of Arrays')
plt.ylabel('Time in (s) for %i rep' % number_of_repetitions)
plt.title('Different ways to sample.')
plt.legend()

plt.show()
</snippet></ROW><ROW><id>13353563</id><snippet>numpy.random.permutation</snippet></ROW><ROW><id>13353563</id><snippet>random.sample</snippet></ROW><ROW><id>13353563</id><snippet>numpy.random.shuffle</snippet></ROW><ROW><id>13353563</id><snippet>numpy.random.sample</snippet></ROW><ROW><id>13353563</id><snippet>numpy.random.sample</snippet></ROW><ROW><id>13353563</id><snippet>numpy.random.sample</snippet></ROW><ROW><id>13353563</id><snippet>$ uname -a
Darwin Kernel Version 10.8.0: Tue Jun  7 16:33:36 PDT 2011; root:xnu-1504.15.3~1/RELEASE_I386 i386

$ python --version
Python 2.6.1

$ python -c "import numpy; print numpy.__version__"
1.6.1
</snippet></ROW><ROW><id>13353563</id><snippet>numpy.random.sample</snippet></ROW><ROW><id>13353563</id><snippet>import numpy as np
values = ['cat', 'popcorn', 'mescaline']
number_of_members = 2
N = 1000000
random_arrays = np.asarray([values] * N)
_ = [np.random.shuffle(array) for array in random_arrays]
subset = random_arrays[:, :number_of_members]
</snippet></ROW><ROW><id>13353758</id><snippet>cursor = coll.find({ $or : [{"coordinates.type" : "Point"},{"location": {$ne :"null" }}]},{"coordinates" :1}, tailable = True, timeout = False)
</snippet></ROW><ROW><id>13353762</id><snippet>netstat -nltp</snippet></ROW><ROW><id>13353762</id><snippet>netstat -ntlb</snippet></ROW><ROW><id>13353837</id><snippet>False &lt; True</snippet></ROW><ROW><id>13353837</id><snippet>False == 0</snippet></ROW><ROW><id>13353837</id><snippet>True == 1</snippet></ROW><ROW><id>13353837</id><snippet>True != 2</snippet></ROW><ROW><id>13354123</id><snippet>frameset</snippet></ROW><ROW><id>13354123</id><snippet>requests</snippet></ROW><ROW><id>13354123</id><snippet>urllib</snippet></ROW><ROW><id>13354123</id><snippet>frameset</snippet></ROW><ROW><id>13354123</id><snippet>frame</snippet></ROW><ROW><id>13354123</id><snippet>frame</snippet></ROW><ROW><id>13354123</id><snippet>frameset</snippet></ROW><ROW><id>13354123</id><snippet>frameset</snippet></ROW><ROW><id>13354123</id><snippet>frame</snippet></ROW><ROW><id>13354123</id><snippet>frameset</snippet></ROW><ROW><id>13354123</id><snippet>frameset</snippet></ROW><ROW><id>13354123</id><snippet>frame</snippet></ROW><ROW><id>13354123</id><snippet>src</snippet></ROW><ROW><id>13354123</id><snippet>frame</snippet></ROW><ROW><id>13354123</id><snippet>#document</snippet></ROW><ROW><id>13354123</id><snippet>src</snippet></ROW><ROW><id>13354123</id><snippet>wget</snippet></ROW><ROW><id>13354123</id><snippet>#document</snippet></ROW><ROW><id>13354123</id><snippet>frame</snippet></ROW><ROW><id>13354123</id><snippet>frame</snippet></ROW><ROW><id>13354124</id><snippet>[^0-9]</snippet></ROW><ROW><id>13354124</id><snippet>^[0-9]</snippet></ROW><ROW><id>13354124</id><snippet>^[0-9]*$</snippet></ROW><ROW><id>13354215</id><snippet>current_combo</snippet></ROW><ROW><id>13354215</id><snippet>all_combos</snippet></ROW><ROW><id>13354215</id><snippet>current_combo</snippet></ROW><ROW><id>13354215</id><snippet>new_current_combo = current_combo[:]
new_current_combo.append({'word': word['word']})
flatten_combinations(word['next'], new_current_combo, all_combos)
</snippet></ROW><ROW><id>13354215</id><snippet>def flatten_combinations(result_tree, current_combo=None, all_combos=None):
    if current_combo is None:
        current_combo = []
    if all_combos is None:
        all_combos = []
    if result_tree is None:
        all_combos.append(current_combo)
        return
    for word in result_tree:
        new_current_combo = current_combo[:]
        new_current_combo.append({'word': word['word']})
        flatten_combinations(word['next'], new_current_combo, all_combos)
    return all_combos 
</snippet></ROW><ROW><id>13354403</id><snippet>ma.zeros</snippet></ROW><ROW><id>13354403</id><snippet>ma.nomask</snippet></ROW><ROW><id>13354403</id><snippet>np.bool_(False)</snippet></ROW><ROW><id>13354403</id><snippet>nomask</snippet></ROW><ROW><id>13354403</id><snippet>np.ma</snippet></ROW><ROW><id>13354403</id><snippet>np.ma</snippet></ROW><ROW><id>13354403</id><snippet>False</snippet></ROW><ROW><id>13354403</id><snippet>np.ma.array(..., mask=False)
</snippet></ROW><ROW><id>13354403</id><snippet>False</snippet></ROW><ROW><id>13354403</id><snippet>np.ma.nomask</snippet></ROW><ROW><id>13354403</id><snippet>mask=True</snippet></ROW><ROW><id>13354403</id><snippet>mask</snippet></ROW><ROW><id>13354403</id><snippet>ndarray</snippet></ROW><ROW><id>13354403</id><snippet>True</snippet></ROW><ROW><id>13354403</id><snippet>data</snippet></ROW><ROW><id>13354403</id><snippet>.mask</snippet></ROW><ROW><id>13354403</id><snippet>np.ma.masked</snippet></ROW><ROW><id>13354403</id><snippet>a[:] = np.ma.masked
</snippet></ROW><ROW><id>13354417</id><snippet>brew link --overwrite python</snippet></ROW><ROW><id>13354512</id><snippet>return</snippet></ROW><ROW><id>13354512</id><snippet>mover</snippet></ROW><ROW><id>13354512</id><snippet>def mover(self, row, col):
    if col + 1 != 9:
        return self.solve_helper(row, (col+1))  # added return
    elif row + 1 != 9:
        print "Moving to row" + str(row + 1)
        return self.solve_helper((row+1),0)     # here too
    else:
        print "SOLUTION FOUND"
        return True
</snippet></ROW><ROW><id>13354512</id><snippet>solve_helper</snippet></ROW><ROW><id>13354512</id><snippet>else:
    return self.mover(row, col)  # added return
return False
</snippet></ROW><ROW><id>13354512</id><snippet>solve_helper</snippet></ROW><ROW><id>13354512</id><snippet>mover</snippet></ROW><ROW><id>13354512</id><snippet>solve_helper</snippet></ROW><ROW><id>13354512</id><snippet>solve_helper</snippet></ROW><ROW><id>13354512</id><snippet>mover</snippet></ROW><ROW><id>13354512</id><snippet>solve_helper</snippet></ROW><ROW><id>13354512</id><snippet>solve_helper</snippet></ROW><ROW><id>13354512</id><snippet>self.set_cell(row, col, 0)</snippet></ROW><ROW><id>13354512</id><snippet>else</snippet></ROW><ROW><id>13354512</id><snippet>return False</snippet></ROW><ROW><id>13354512</id><snippet>for i in range(1,10):
    print("Setting value ") + str (i) + (" at " ) + str(row) + ", " + str(col)
    self.set_cell(row, col, i)
    self.guesses = self.guesses + 1
    if self.check_cell(row, col):
        if self.mover(row, col):
            return True
print "Backtracking"
self.set_cell(row, col, 0)
return False
</snippet></ROW><ROW><id>13354512</id><snippet>set_cell</snippet></ROW><ROW><id>13354512</id><snippet>update_textfield</snippet></ROW><ROW><id>13354512</id><snippet>delete</snippet></ROW><ROW><id>13354512</id><snippet>if</snippet></ROW><ROW><id>13354512</id><snippet>insert</snippet></ROW><ROW><id>13354512</id><snippet>if</snippet></ROW><ROW><id>13354630</id><snippet>file</snippet></ROW><ROW><id>13354630</id><snippet>&gt;&gt;&gt; params = {'file': cStringIO.StringIO('upload test data'), 'name': 'upload test'}
&gt;&gt;&gt; datagen, headers = poster.encode.multipart_encode(params)
&gt;&gt;&gt; headers
{'Content-Length': '317', 'Content-Type': 'multipart/form-data; boundary=0c56082b1e134424a918b2b083391467'}
</snippet></ROW><ROW><id>13354630</id><snippet>StringIO</snippet></ROW><ROW><id>13354630</id><snippet>seek()</snippet></ROW><ROW><id>13354630</id><snippet>tell()</snippet></ROW><ROW><id>13354630</id><snippet>&gt;&gt;&gt; params = {'file': 'upload test data', 'name': 'upload test'}
&gt;&gt;&gt; datagen, headers = poster.encode.multipart_encode(params)
&gt;&gt;&gt; headers
{'Content-Length': '317', 'Content-Type': 'multipart/form-data; boundary=0c56082b1e134424a918b2b083391467'}
</snippet></ROW><ROW><id>13354739</id><snippet>str.split</snippet></ROW><ROW><id>13354739</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>13354739</id><snippet>with open(datafile) as f:
    d = {}
    for line in f:
        key,value = line.split(None,1)
        d[key] = ast.literal_eval(value)
</snippet></ROW><ROW><id>13354739</id><snippet>json</snippet></ROW><ROW><id>13354765</id><snippet>request</snippet></ROW><ROW><id>13354765</id><snippet>from bottle import Bottle, request

app = Bottle()

@app.route('/country')
def hello():
  return request.headers.get('X-AppEngine-Country')
</snippet></ROW><ROW><id>13354884</id><snippet>Mozilla/5.0 (X11; Linux i686; rv:10.0) Gecko/20100101 Firefox/10.0
</snippet></ROW><ROW><id>13355079</id><snippet>score</snippet></ROW><ROW><id>13355079</id><snippet>questions</snippet></ROW><ROW><id>13355079</id><snippet>answers</snippet></ROW><ROW><id>13355158</id><snippet>integers = filter(lambda x: isinstance(x,int), listEx)

strings = filter(lambda x: isinstance(x,str), listEx)
</snippet></ROW><ROW><id>13355291</id><snippet>lambda x: test_fun(n, x)</snippet></ROW><ROW><id>13355291</id><snippet>&gt;&gt;&gt; stuff = [lambda x: n+x for n in [1, 2, 3]]
&gt;&gt;&gt; for f in stuff:
...     print f(1)
4
4
4
&gt;&gt;&gt; stuff = [lambda x, n=n: n+x for n in [1, 2, 3]]
&gt;&gt;&gt; for f in stuff:
...     print f(1)
2
3
4
</snippet></ROW><ROW><id>13355291</id><snippet>n</snippet></ROW><ROW><id>13355362</id><snippet>except (ValueError, KeyError, TypeError):
    resp = Response({"JSON Format Error."}, status=400, mimetype='application/json')
    return resp
</snippet></ROW><ROW><id>13355362</id><snippet>except (ValueError, KeyError, TypeError) as error:
    print error
    resp = Response({"JSON Format Error."}, status=400, mimetype='application/json')
    return resp
</snippet></ROW><ROW><id>13355362</id><snippet>db.execute('SELECT * FROM awesome_table WHERE id=%s', data_id)
</snippet></ROW><ROW><id>13355374</id><snippet>for line in open('file'):
    for word in line.split():
        do_stuff(word)
</snippet></ROW><ROW><id>13355388</id><snippet>&gt;&gt;&gt; items = (
...     (1, ['U', '3']),
...     (2, ['U', 'L', 'O']),
...     (3, ['U', '1', 'C']),
...     (4, ['U', '3', 'C', '1']),
...     (5, ['U', '3', 'C']),
...     (6, ['U', '1', 'L']),
... )
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; locs = zip(*items)[1]
&gt;&gt;&gt; max((len(p), p) for p in itertools.product(*locs) if len(p) == len(set(p)))
(6, ('U', 'O', 'C', '1', '3', 'L'))
</snippet></ROW><ROW><id>13355388</id><snippet>def find_biggest(items):
    for w in reversed(range(len(items)+1)):
        for c in itertools.combinations(items, w):
            indices, slots = zip(*c)
            for p in itertools.product(*slots):
                if len(set(p)) == len(p):
                    return dict(zip(indices, p))

&gt;&gt;&gt; items = ( (1, ['U', '3']), (2, ['U', 'L', 'O']), (3, ['U', '1', 'C']), (4, ['U', '3', 'C', '1']), (5, ['U', '3', 'C']), (6, ['U', '1']), (7, ['U', '1', 'L']), )
&gt;&gt;&gt; find_biggest(items)
{1: 'U', 2: 'O', 3: '1', 4: '3', 5: 'C', 7: 'L'}
</snippet></ROW><ROW><id>13355586</id><snippet>if</snippet></ROW><ROW><id>13355586</id><snippet>np</snippet></ROW><ROW><id>13355586</id><snippet>import numpy as np</snippet></ROW><ROW><id>13355759</id><snippet>sqlite3.Cursor</snippet></ROW><ROW><id>13355759</id><snippet>rowcount</snippet></ROW><ROW><id>13355759</id><snippet>DELETE</snippet></ROW><ROW><id>13355865</id><snippet>import urllib2
import base64

request = urllib2.Request( 'https://stream.twitter.com...' )
request.add_header( 'Authorization', 'Basic ' + base64.b64encode( username + ':' + password ) )
response = urllib2.urlopen( request )
</snippet></ROW><ROW><id>13355870</id><snippet>sys.stdout</snippet></ROW><ROW><id>13355870</id><snippet>sys.stdin</snippet></ROW><ROW><id>13355870</id><snippet>NSTask</snippet></ROW><ROW><id>13355870</id><snippet>openpty</snippet></ROW><ROW><id>13355870</id><snippet>NSTask</snippet></ROW><ROW><id>13355870</id><snippet>@interface NSTask (PTY)

- (NSFileHandle *)masterSideOfPTYOrError:(NSError **)error;

@end
</snippet></ROW><ROW><id>13355870</id><snippet>#import "NSTask+PTY.h"
#import &lt;util.h&gt;

@implementation NSTask (PTY)

- (NSFileHandle *)masterSideOfPTYOrError:(NSError *__autoreleasing *)error {
    int fdMaster, fdSlave;
    int rc = openpty(&amp;fdMaster, &amp;fdSlave, NULL, NULL, NULL);
    if (rc != 0) {
        if (error) {
            *error = [NSError errorWithDomain:NSPOSIXErrorDomain code:errno userInfo:nil];
        }
        return NULL;
    }
    fcntl(fdMaster, F_SETFD, FD_CLOEXEC);
    fcntl(fdSlave, F_SETFD, FD_CLOEXEC);
    NSFileHandle *masterHandle = [[NSFileHandle alloc] initWithFileDescriptor:fdMaster closeOnDealloc:YES];
    NSFileHandle *slaveHandle = [[NSFileHandle alloc] initWithFileDescriptor:fdSlave closeOnDealloc:YES];
    self.standardInput = slaveHandle;
    self.standardOutput = slaveHandle;
    return masterHandle;
}

@end
</snippet></ROW><ROW><id>13355870</id><snippet>NSTask *_currentTask = [[NSTask alloc] init];
_currentTask.launchPath = @"/usr/bin/python";
_currentTask.arguments = @[[[NSBundle mainBundle] pathForResource:@"nameTest" ofType:@"py"]];

NSError *error;
NSFileHandle *masterHandle = [_currentTask masterSideOfPTYOrError:&amp;error];
if (!masterHandle) {
    NSLog(@"error: could not set up PTY for task: %@", error);
    return;
}
</snippet></ROW><ROW><id>13355870</id><snippet>masterHandle</snippet></ROW><ROW><id>13355891</id><snippet>sublist</snippet></ROW><ROW><id>13355891</id><snippet>readline()</snippet></ROW><ROW><id>13355891</id><snippet>def grocery_list(foods):
    with open(foods, 'r') as L:        
        food = []            
        sublist = []            

        while True:
            line = L.readline()
            if len(line) == 0:
                break

            #remove the trailing \n or \r
            line = line.rstrip()

            if len(line) == 0:
                food.append(sublist)
                sublist = []                    
            else:
                sublist.append(line)
        if len(sublist) &gt; 0:
            food.append(sublist)

        return food
</snippet></ROW><ROW><id>13355891</id><snippet>with</snippet></ROW><ROW><id>13356029</id><snippet>from sqlalchemy import event

@event.listens_for(YourModel, "after_insert")
def kick_off_analysis(mapper, connection, your_model):
  # do stuff here
</snippet></ROW><ROW><id>13356129</id><snippet>data = "*****''[[dogs and cats]]''/n"
start = data.find('[')+2
end = data.find(']')
answer = data[start:end].split()

print answer[0]
print answer[1]
print answer[2]
</snippet></ROW><ROW><id>13356369</id><snippet>get_model</snippet></ROW><ROW><id>13356369</id><snippet>from django.db.models.loading import get_model
model = get_model('appname', 'ModelName')
</snippet></ROW><ROW><id>13356369</id><snippet>objects = model.objects.all()
</snippet></ROW><ROW><id>13356697</id><snippet># substitute your format
# the one below is likely to be what's saved by str(datetime)
previousTime = datetime.datetime.strptime(line[x:x+26], "%Y-%m-%d %H:%M:%S.%f") 
</snippet></ROW><ROW><id>13356697</id><snippet>dt.strftime(...)</snippet></ROW><ROW><id>13356697</id><snippet>str(dt)</snippet></ROW><ROW><id>13356697</id><snippet>delta = datetime.datetime.now() - previousTime
</snippet></ROW><ROW><id>13356703</id><snippet>xml.etree.elementTree</snippet></ROW><ROW><id>13356723</id><snippet>struct_time</snippet></ROW><ROW><id>13356723</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.gmtime(1352789792.757637)
time.struct_time(tm_year=2012, tm_mon=11, tm_mday=13, tm_hour=6, tm_min=56, tm_sec=32, tm_wday=1, tm_yday=318, tm_isdst=0)
</snippet></ROW><ROW><id>13356723</id><snippet>floats</snippet></ROW><ROW><id>13356942</id><snippet>def find_all(L, v):
    if not L:
            return []

    result = []
    if L[-1] == v:
            result = [len(L)-1]

    return find_all(L[:-1], v) + result
</snippet></ROW><ROW><id>13356966</id><snippet>import lxml.html as lh

html="""\
&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;My First Heading&lt;/h1&gt;
&lt;td class="banana"&gt;
&lt;a&gt;today&lt;/a&gt;
&lt;a&gt;&lt;/a&gt;
&lt;a&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td class="banana"&gt;
&lt;a&gt;bar&lt;/a&gt;
&lt;a&gt;&lt;/a&gt;
&lt;a&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/body&gt;
&lt;/html&gt;"""

doc=lh.fromstring(html)

doc.xpath('.//td[contains(.,"today") and @class="banana"]/a')
Out[145]: [&lt;Element a at 1c348b8&gt;, &lt;Element a at 1c34ae8&gt;, &lt;Element a at 1c34c00&gt;]
</snippet></ROW><ROW><id>13357357</id><snippet>&lt;principal&gt;</snippet></ROW><ROW><id>13357357</id><snippet>for principal in soup.findAll('principal'):
    login = principal.find('login')
    if login is None:
        continue
    print principal['principal-id'], login.string
</snippet></ROW><ROW><id>13357374</id><snippet>Date</snippet></ROW><ROW><id>13357374</id><snippet>yyyy-mm-dd</snippet></ROW><ROW><id>13357374</id><snippet>SELECT A.Date,
       (SELECT COUNT(*) FROM MyTable AS B
        WHERE B.Date &lt;= A.Date
          AND B.Validity = 'valid') AS valid,
       (SELECT COUNT(*) FROM MyTable AS B
        WHERE B.Date &lt;= A.Date
          AND B.Validity = 'invalid') AS invalid,
       (SELECT COUNT(*) FROM MyTable AS B
        WHERE B.Date &lt;= A.Date
          AND B.Validity = 'notFound') AS notFound
FROM (SELECT DISTINCT Date FROM MyTable
      ORDER BY Date) AS A
</snippet></ROW><ROW><id>13357624</id><snippet>sql = "INSERT INTO " + db + " " + col + " VALUES (%s, %s, %s)"
s.execute(sql, dic.values())
</snippet></ROW><ROW><id>13357624</id><snippet>u</snippet></ROW><ROW><id>13357976</id><snippet>$PIG_HOME/lib/jython.jar</snippet></ROW><ROW><id>13357976</id><snippet>PIG_CLASSPATH</snippet></ROW><ROW><id>13358267</id><snippet>mydatetime</snippet></ROW><ROW><id>13358267</id><snippet>myDateTime = datetime.datetime(2012, 11, 16, 3, 0)
myDatetime.strftime("%Y-%m-%d %H:%M:%S")
</snippet></ROW><ROW><id>13358267</id><snippet>mydatetime</snippet></ROW><ROW><id>13358267</id><snippet>eval</snippet></ROW><ROW><id>13358267</id><snippet>eval</snippet></ROW><ROW><id>13358267</id><snippet>asteval</snippet></ROW><ROW><id>13358304</id><snippet>In [65]: df[pd.Series(df.index.get_level_values('A')).isin(vals[vals['values']].index)]
Out[65]: 
      C
A B    
1 1  10
  2  15
</snippet></ROW><ROW><id>13358304</id><snippet>In [66]: df.xs(1)
Out[66]: 
    C
B    
1  10
2  15
</snippet></ROW><ROW><id>13358381</id><snippet>queryset</snippet></ROW><ROW><id>13358381</id><snippet>list(created_thing.users.all())</snippet></ROW><ROW><id>13358381</id><snippet>queryset</snippet></ROW><ROW><id>13358397</id><snippet>DictWriter</snippet></ROW><ROW><id>13358397</id><snippet>DictReader</snippet></ROW><ROW><id>13358487</id><snippet>import base64

source = '''\
print('Hello World!')
print('Not sure why you'd ever do this though..')
'''
code = base64.b64encode(source)
</snippet></ROW><ROW><id>13358493</id><snippet>smtplib</snippet></ROW><ROW><id>13358493</id><snippet>smtpd</snippet></ROW><ROW><id>13358530</id><snippet>def main():
    n=int(input("how many no.s are we dealing with?"))
    result = 0
    for i in range(n):
        value = float(input('enter next number to add'))
        result += value
    print('the result is {0}'.format(result))
</snippet></ROW><ROW><id>13358530</id><snippet>;</snippet></ROW><ROW><id>13358530</id><snippet>sum_string = input('please enter a sum. for example: "1 + 2 + 10 ..."') #1
result = sum([float(i) for i in sum_string.split('+')])                 #2
print('the result is {0}'.format(result))                               #3
</snippet></ROW><ROW><id>13358530</id><snippet>sum_string.split('+')</snippet></ROW><ROW><id>13358530</id><snippet>1+2+ 45'.split('+') =&gt; ['1','2',' 45']</snippet></ROW><ROW><id>13358530</id><snippet>[float(i) for i in ['1','2',' 45']] =&gt; [1,2,45]</snippet></ROW><ROW><id>13358530</id><snippet>sum([1,2,45</snippet></ROW><ROW><id>13358975</id><snippet>dict</snippet></ROW><ROW><id>13358975</id><snippet>list</snippet></ROW><ROW><id>13359392</id><snippet>return</snippet></ROW><ROW><id>13359392</id><snippet>None</snippet></ROW><ROW><id>13359392</id><snippet>return</snippet></ROW><ROW><id>13359392</id><snippet>&gt;&gt;&gt; def foo(): return
...
&gt;&gt;&gt; foo()
None
&gt;&gt;&gt; def bar(): pass
...
&gt;&gt;&gt; bar()
None
</snippet></ROW><ROW><id>13359519</id><snippet>side_effect</snippet></ROW><ROW><id>13359519</id><snippet>&gt;&gt;&gt; mock_poll = Mock(side_effect=[None, 'data'])
&gt;&gt;&gt; mock_poll()
None
&gt;&gt;&gt; mock_poll()
'data'
</snippet></ROW><ROW><id>13359519</id><snippet>itertools</snippet></ROW><ROW><id>13359519</id><snippet>cycle</snippet></ROW><ROW><id>13359519</id><snippet>chain</snippet></ROW><ROW><id>13359519</id><snippet>&gt;&gt;&gt; mock_poll = Mock(side_effect=chain(['first'], cycle(['others'])))
</snippet></ROW><ROW><id>13359571</id><snippet>table-layout: fixed</snippet></ROW><ROW><id>13359571</id><snippet>em</snippet></ROW><ROW><id>13359571</id><snippet>ch</snippet></ROW><ROW><id>13359571</id><snippet>&amp;minus;</snippet></ROW><ROW><id>13359611</id><snippet>with open("test.txt","w") as fin:
    #izip_longest create consecutive tuples of elements from the list of iterables
    #where if any of the iterable's length is less than the longest length of the
    #iterable, fillvalue is taken as default
    #If you need formatted output, you can use str.format
    #The format specifier here used specifies the length of each column
    #to be five and '^' indicates that the values would be center alligned
    for e in izip_longest(a,b,fillvalue=''):
         print &gt;&gt;fin,"{:^5} {:^5}".format(*e)
         #if you are using Python 3.x
         #fin.write("{:^5} {:^5}\n".format(*e))
</snippet></ROW><ROW><id>13359668</id><snippet>from Tkinter import *
import ttk, threading

class progress():
    def __init__(self, parent):
            toplevel = Toplevel(tk)
            self.progressbar = ttk.Progressbar(toplevel, orient = HORIZONTAL, mode = 'indeterminate')
            self.progressbar.pack()
            self.t = threading.Thread()
            self.t.__init__(target = self.progressbar.start, args = ())
            self.t.start()
            #if self.t.isAlive() == True:
             #       print 'worked'

    def end(self):
            if self.t.isAlive() == False:
                    self.progressbar.stop()
                    self.t.join()


def printmsg():
    print 'proof a new thread is running'


tk = Tk()
new = progress(tk)
but1 = ttk.Button(tk, text= 'stop', command= new.end)
but2 = ttk.Button(tk, text = 'test', command= printmsg)
but1.pack()
but2.pack()
tk.mainloop()
</snippet></ROW><ROW><id>13359790</id><snippet>url(r'^test/report$'

url(r'^test/report/(\d\d?)$
</snippet></ROW><ROW><id>13359914</id><snippet>TemplateDoesNotExist: 500.html
</snippet></ROW><ROW><id>13359914</id><snippet>500.html</snippet></ROW><ROW><id>13359914</id><snippet>500 Internal Server Error</snippet></ROW><ROW><id>13359947</id><snippet>start()</snippet></ROW><ROW><id>13359947</id><snippet>msgpackrpc.Server</snippet></ROW><ROW><id>13359947</id><snippet>Loop</snippet></ROW><ROW><id>13359947</id><snippet>Loop</snippet></ROW><ROW><id>13359947</id><snippet>IOLoop</snippet></ROW><ROW><id>13359947</id><snippet>if __name__ == '__main__':
    io_loop = tornado.ioloop.IOLoop.instance()

    loop = msgpackrpc.Loop(io_loop)
    rpc = msgpackrpc.Server(RPCServer(), loop=loop)

    # ... sockjs-tornado initialisation. No need to call rpc.start()

    io_loop.start()
</snippet></ROW><ROW><id>13360032</id><snippet>from matplotlib.lines import Line2D
Line2D.lineStyles.keys()
&gt;&gt;&gt; ['', ' ', 'None', '--', '-.', '-', ':']
</snippet></ROW><ROW><id>13360045</id><snippet>__init__</snippet></ROW><ROW><id>13360045</id><snippet>init__</snippet></ROW><ROW><id>13360045</id><snippet>__init__</snippet></ROW><ROW><id>13360045</id><snippet>init__</snippet></ROW><ROW><id>13360045</id><snippet>__init__</snippet></ROW><ROW><id>13360045</id><snippet>__this is bold__
</snippet></ROW><ROW><id>13360045</id><snippet>__</snippet></ROW><ROW><id>13360045</id><snippet>__main__</snippet></ROW><ROW><id>13360045</id><snippet>__init__</snippet></ROW><ROW><id>13360045</id><snippet>__init__</snippet></ROW><ROW><id>13360045</id><snippet>init__</snippet></ROW><ROW><id>13360045</id><snippet>__new__</snippet></ROW><ROW><id>13360045</id><snippet>__new__</snippet></ROW><ROW><id>13360045</id><snippet>__init__</snippet></ROW><ROW><id>13360045</id><snippet>namedtuple</snippet></ROW><ROW><id>13360045</id><snippet>tuple</snippet></ROW><ROW><id>13360045</id><snippet>__init__</snippet></ROW><ROW><id>13360045</id><snippet>__new__</snippet></ROW><ROW><id>13360045</id><snippet>namedtuple</snippet></ROW><ROW><id>13360045</id><snippet>Point</snippet></ROW><ROW><id>13360045</id><snippet>x</snippet></ROW><ROW><id>13360045</id><snippet>y</snippet></ROW><ROW><id>13360045</id><snippet>z</snippet></ROW><ROW><id>13360045</id><snippet>__init__</snippet></ROW><ROW><id>13360045</id><snippet>init__</snippet></ROW><ROW><id>13360045</id><snippet>init__</snippet></ROW><ROW><id>13360127</id><snippet>decorated_func = has_permission_from_slug()(func(kwarg=self.kwarg))
</snippet></ROW><ROW><id>13360127</id><snippet>func(kwarg=self.kwarg)</snippet></ROW><ROW><id>13360127</id><snippet>**kwargs_1</snippet></ROW><ROW><id>13360127</id><snippet>func(..)</snippet></ROW><ROW><id>13360127</id><snippet>func</snippet></ROW><ROW><id>13360127</id><snippet>decorated_func = has_permission_from_kwarg()(func)
response = decorated_func(kwarg=self.kwarg)
</snippet></ROW><ROW><id>13360127</id><snippet>kwarg</snippet></ROW><ROW><id>13360127</id><snippet>decorated_func = has_permission_from_kwarg(kwarg=self.kwarg)(func)
response = decorated_func()
</snippet></ROW><ROW><id>13360127</id><snippet>kwargs</snippet></ROW><ROW><id>13360127</id><snippet>kwargs_1</snippet></ROW><ROW><id>13360127</id><snippet>decorator_with_args</snippet></ROW><ROW><id>13360127</id><snippet>class HTTP403Error (Exception):
    pass

def func (*args, **kwargs):
    print('func {}; {}'.format(args, kwargs))

my_kwarg = 'foo'
decorated_func = has_permission_from_kwarg()(func)
decorated_func(kwarg=my_kwarg)
decorated_func(not_kwarg=my_kwarg)
</snippet></ROW><ROW><id>13360127</id><snippet>func (); {'kwarg': 'foo'}</snippet></ROW><ROW><id>13360457</id><snippet>    ast = env.parse(template_text)
    for each in meta.find_referenced_templates(ast) :        # find the (% includes %}
</snippet></ROW><ROW><id>13360792</id><snippet>input()</snippet></ROW><ROW><id>13360792</id><snippet>raw_input()</snippet></ROW><ROW><id>13360792</id><snippet>1.1</snippet></ROW><ROW><id>13360792</id><snippet>raw_input()</snippet></ROW><ROW><id>13360792</id><snippet>input()</snippet></ROW><ROW><id>13360792</id><snippet>input()</snippet></ROW><ROW><id>13361001</id><snippet>dict</snippet></ROW><ROW><id>13361001</id><snippet>OrderedDict</snippet></ROW><ROW><id>13361030</id><snippet>mfile = open(mfile,'rb')

mfile = open(self.add_slash(path)+fname, 'wb+')
</snippet></ROW><ROW><id>13361101</id><snippet>cos(i_)</snippet></ROW><ROW><id>13361101</id><snippet>ci_</snippet></ROW><ROW><id>13361101</id><snippet>sin(i_)**2</snippet></ROW><ROW><id>13361101</id><snippet>1-ci_**2</snippet></ROW><ROW><id>13361101</id><snippet>ci_</snippet></ROW><ROW><id>13361101</id><snippet>from sympy import symbols,solve,sin,cos,pi

[n_,Re_,p_,ci_,J2_,Pe_] = symbols(['n_','Re_','p_','ci_','J2_','Pe_'])

del_ss = -((3*n_*(Re_**2)*J2_/(4*(p_**2)))*(4-5*(1-ci_**2)))-((3*n_*(Re_**2)*J2_/(2*(p_**2)))*ci_)-((2*pi)/Pe_)

pprint(solve(del_ss,ci_))
</snippet></ROW><ROW><id>13361367</id><snippet>create_index = DDL("CREATE INDEX idx_content ON pep USING gin(to_tsvector('english', content));")
event.listen(Pep.__table__, 'after_create', create_index.execute_if(dialect='postgresql'))
</snippet></ROW><ROW><id>13361547</id><snippet>dict.items()</snippet></ROW><ROW><id>13361547</id><snippet>dict_items</snippet></ROW><ROW><id>13361547</id><snippet>list</snippet></ROW><ROW><id>13361547</id><snippet>d = dict1.copy()
d.update(dict2)
</snippet></ROW><ROW><id>13361547</id><snippet>key1</snippet></ROW><ROW><id>13361547</id><snippet>key1</snippet></ROW><ROW><id>13361547</id><snippet>collections</snippet></ROW><ROW><id>13361547</id><snippet>defaultdict</snippet></ROW><ROW><id>13361547</id><snippet>Counter</snippet></ROW><ROW><id>13361687</id><snippet>tox</snippet></ROW><ROW><id>13361687</id><snippet>setup</snippet></ROW><ROW><id>13361687</id><snippet>py.test</snippet></ROW><ROW><id>13361687</id><snippet>nose</snippet></ROW><ROW><id>13361687</id><snippet>unittests</snippet></ROW><ROW><id>13361687</id><snippet>tox</snippet></ROW><ROW><id>13361687</id><snippet>pytest_configure</snippet></ROW><ROW><id>13361687</id><snippet>pytest_unconfigure</snippet></ROW><ROW><id>13361687</id><snippet>conftest.py</snippet></ROW><ROW><id>13362096</id><snippet>dt3 = dt2.groupby(by="file").aggregate("first")
dt3.dtypes
</snippet></ROW><ROW><id>13362096</id><snippet>datetime    float64
atn         float64
</snippet></ROW><ROW><id>13362096</id><snippet>dt3['datetime'] = pd.Series(dt3['datetime'], dtype='datetime64[ns]')
</snippet></ROW><ROW><id>13362101</id><snippet>[^#]</snippet></ROW><ROW><id>13362101</id><snippet>string = re.sub('^#{1}([^#].*)$', '&lt;h1&gt;\\1&lt;/h1&gt;', string, flags=re.MULTILINE)
string = re.sub('^#{2}([^#].*)$', '&lt;h2&gt;\\1&lt;/h2&gt;', string, flags=re.MULTILINE)
</snippet></ROW><ROW><id>13362133</id><snippet>with open(myfile1) as f1: ...</snippet></ROW><ROW><id>13362164</id><snippet>locale</snippet></ROW><ROW><id>13362164</id><snippet>&gt;&gt;&gt; locale.nl_langinfo(locale.RADIXCHAR)
'.'
</snippet></ROW><ROW><id>13362164</id><snippet>&gt;&gt;&gt; locale.localeconv()['decimal_point']
'.'
</snippet></ROW><ROW><id>13362164</id><snippet>import locale
_locale_radix = locale.localeconv()['decimal_point']

def read_float_with_comma(num):
    if _locale_radix != '.':
        num = num.replace(_locale_radix, ".")
    return float(num)
</snippet></ROW><ROW><id>13362164</id><snippet>atof()</snippet></ROW><ROW><id>13362164</id><snippet>import locale

def read_float_with_comma(num):
    return locale.atof(num)
</snippet></ROW><ROW><id>13362407</id><snippet>swig -c++ -python example.i
g++ -fpic -c example_wrap.cxx -I /usr/include/python2.7/
g++ --shared example.o example_wrap.o  -o _example.so
</snippet></ROW><ROW><id>13362407</id><snippet>import example</snippet></ROW><ROW><id>13362479</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>13362479</id><snippet>127.0.0.1:8080</snippet></ROW><ROW><id>13362479</id><snippet>127.0.0.8081</snippet></ROW><ROW><id>13362884</id><snippet>name = globals()['name'] if 'name' in globals() else 'default'
</snippet></ROW><ROW><id>13362884</id><snippet>name = globals().get('name','default')
</snippet></ROW><ROW><id>13362884</id><snippet>locals()</snippet></ROW><ROW><id>13362884</id><snippet>try/except</snippet></ROW><ROW><id>13362884</id><snippet>try:
   name
except NameError:
   name = 'default'
</snippet></ROW><ROW><id>13363338</id><snippet>eval()</snippet></ROW><ROW><id>13363338</id><snippet>exec</snippet></ROW><ROW><id>13363338</id><snippet>setattr()</snippet></ROW><ROW><id>13363338</id><snippet>with open(monstercheck, 'r') as monsterchck:
        print monstercheck.next()
        for stat, value in parse(monstercheck):
            setattr(self, stat, value)
</snippet></ROW><ROW><id>13363620</id><snippet>'t'</snippet></ROW><ROW><id>13363620</id><snippet>(.)</snippet></ROW><ROW><id>13363620</id><snippet>([^'])</snippet></ROW><ROW><id>13363620</id><snippet>line = re.sub(r"(?&lt;!')'t'(?=.)", r"THIS_IS_TRUE", line)
</snippet></ROW><ROW><id>13363648</id><snippet>class Entery(object):
  def __init__(self, str1, str2, str3):
    self.str1 = str1
    self.str2 = str2
    self.str3 = str3
</snippet></ROW><ROW><id>13363648</id><snippet>&gt;&gt;&gt; test = Entery("a", "b", "c")
&gt;&gt;&gt; print test.str1
a
</snippet></ROW><ROW><id>13363648</id><snippet>phonebook.append(Entery("one", "two", "three"))
phonebook.append(Entery("four", "five", "six"))
</snippet></ROW><ROW><id>13363648</id><snippet>phonebook</snippet></ROW><ROW><id>13363648</id><snippet>Entry</snippet></ROW><ROW><id>13363666</id><snippet>dict = {'a': 'one', 'b': 'two', }
qdict = QueryDict('')
qdict = qdict.copy()
qdict.update(dict)
</snippet></ROW><ROW><id>13363880</id><snippet>^</snippet></ROW><ROW><id>13363880</id><snippet>&gt;&gt;&gt; hex(int("123abc", 16) ^ int("def456", 16))
'0xccceea'
</snippet></ROW><ROW><id>13363880</id><snippet>&gt;&gt;&gt; def hexor(hex1, hex2):
...     """XOR two hex strings."""
...     xor = hex(int(hex1, 16) ^ int(hex2, 16))
...     return xor[2:].rstrip("L")  # get rid of "0x" and maybe "L"
... 
&gt;&gt;&gt; import random
&gt;&gt;&gt; a = "".join(random.choice("0123456789abcdef") for i in range(200))
&gt;&gt;&gt; b = "".join(random.choice("0123456789abcdef") for i in range(200))
&gt;&gt;&gt; a
'8db12de2f49f092620f6d79d6601618daab5ec6747266c2eea29c3493278daf82919aae6a72
64d4cf3dffd70cb1b6fde72ba2a04ac354fcb871eb60e088c2167e73006e0275287de6fc6133
56e44d7b0ff8378a0830d9d87151cbf3331382b096f02fd72'
&gt;&gt;&gt; b
'40afe17fa8fbc56153c78f504e50a241df0a35fd204f8190c0591eda9c63502b41611aa9ac2
27fcd1a9faea642d89a3a212885711d024d2c973115eea11ceb6a57a6fa1f478998b94aa7d3e
993c04d24a0e1ac7c10fd834de61caefb97bcb65605f06eae'
&gt;&gt;&gt; hexor(a, b)
'cd1ecc9d5c64cc47733158cd2851c3cc75bfd99a6769edbe2a70dd93ae1b8ad36878b04f0b0
43281e94053d689c3f5e45392af75b13702e7102fa3e0a990ca0db096fcff60db1f672561c0d
cfd849a945f62d4dc93f01ecaf30011c8a6849d5f6af293dc'
</snippet></ROW><ROW><id>13364029</id><snippet>from BeautifulSoup import BeautifulSoup
import urllib2
url="file:///C:/webpage.html"
page=urllib2.urlopen(url)
</snippet></ROW><ROW><id>13364058</id><snippet>message</snippet></ROW><ROW><id>13364058</id><snippet>e.__class__.__name__</snippet></ROW><ROW><id>13364058</id><snippet>ZeroDivisionError'</snippet></ROW><ROW><id>13364058</id><snippet>In [30]: def f(x):
        try:
                return 1/x
        except Exception as e:
            print e.message
   ....:         

In [31]: f(2)
Out[31]: 0

In [32]: f(0)
integer division or modulo by zero
</snippet></ROW><ROW><id>13364058</id><snippet>message</snippet></ROW><ROW><id>13364058</id><snippet>print(e)</snippet></ROW><ROW><id>13364058</id><snippet>e.args[0]</snippet></ROW><ROW><id>13364058</id><snippet>e.__class__.__name__</snippet></ROW><ROW><id>13364253</id><snippet>class MyMixin(object):

    __my_field = Column(Boolean, name='my_field', index=True, default=True)

    def _get_my_field(self):
        return self._my_field

    @declared_attr
    def my_field(cls):  # @NoSelf
        return synonym('_my_field', descriptor=property(cls._get_my_field))    
</snippet></ROW><ROW><id>13364313</id><snippet>import MySQLdb as mdb
import sys

con = mdb.connect('localhost', 'testuser', 'test623', 'testdb');

with con:

    cur = con.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS \
        Writers(Id INT PRIMARY KEY AUTO_INCREMENT, Name VARCHAR(25))")
    cur.execute("INSERT INTO Writers(Name) VALUES('Jack London')")
    cur.execute("INSERT INTO Writers(Name) VALUES('Honore de Balzac')")
    cur.execute("INSERT INTO Writers(Name) VALUES('Lion Feuchtwanger')")
    cur.execute("INSERT INTO Writers(Name) VALUES('Emile Zola')")
    cur.execute("INSERT INTO Writers(Name) VALUES('Truman Capote')")
</snippet></ROW><ROW><id>13364313</id><snippet>import urllib2
f = urllib2.urlopen('http://www.python.org/')
html = f.read()
</snippet></ROW><ROW><id>13364313</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(html)
for a in soup.find_all('a'):
    # add to mysql
</snippet></ROW><ROW><id>13364373</id><snippet>csv</snippet></ROW><ROW><id>13364373</id><snippet>.xls</snippet></ROW><ROW><id>13364373</id><snippet>xlrd</snippet></ROW><ROW><id>13364373</id><snippet>.xls</snippet></ROW><ROW><id>13364373</id><snippet>xlrd.xldate_as_tuple(xldate, datemode)</snippet></ROW><ROW><id>13364373</id><snippet>print xlrd.xldate_as_tuple(0.333333333,0)
</snippet></ROW><ROW><id>13364373</id><snippet>(0, 0, 0, 8, 0, 0)
</snippet></ROW><ROW><id>13364373</id><snippet>for</snippet></ROW><ROW><id>13364373</id><snippet>...
for r_idx in list:
    cells = sh.row(r)
    csv_row = [cells[0]] # the first row value should be ok as just a string
    for col_value in cells[1:]:
        # add the date time column values to the converted csv row
        csv_row.append( datetime.time(xlrd.xldate_as_tuple(col_value, 0)[3:]) )
    ...
</snippet></ROW><ROW><id>13365164</id><snippet>&gt;&gt;&gt; a = "12104c06134e5709140f104f02521b0a0442020c4d070b184f4815541f0800484e1e0241061d064d540b0a020210194510164d4f3a005343004e430e1e1d0a524612171b0117001b0e45431c0c1d160a520d11744e19061a114d0e55174f084e543714050b174353541b48070e000e4d"
&gt;&gt;&gt; bytes = [a[i:i+2] for i in range(0,len(a),2)]
&gt;&gt;&gt; s_decoded = [chr(int(c,16)) for c in bytes]
&gt;&gt;&gt; ''.join(s_decoded)
'\x12\x10L\x06\x13NW\t\x14\x0f\x10O\x02R\x1b\n\x04B\x02\x0cM\x07\x0b\x18OH\x15T\x1f\x08\x00HN\x1e\x02A\x06\x1d\x06MT\x0b\n\x02\x02\x10\x19E\x10\x16MO:\x00SC\x00NC\x0e\x1e\x1d\nRF\x12\x17\x1b\x01\x17\x00\x1b\x0eEC\x1c\x0c\x1d\x16\nR\r\x11tN\x19\x06\x1a\x11M\x0eU\x17O\x08NT7\x14\x05\x0b\x17CST\x1bH\x07\x0e\x00\x0eM'
</snippet></ROW><ROW><id>13365164</id><snippet>&gt;&gt;&gt; a2 = "43616c6562"
&gt;&gt;&gt; bytes2 = [a2[i:i+2] for i in range(0,len(a2),2)]
&gt;&gt;&gt; bytes2
['43', '61', '6c', '65', '62']
&gt;&gt;&gt; ''.join([chr(int(c,16)) for c in bytes2])
'Caleb'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13365225</id><snippet>regexps.append({'left':r'[^\\]%.*', 'right':r''})
</snippet></ROW><ROW><id>13365234</id><snippet>import cherrypy
import os.path
import struct
import time
import subprocess
import commands

class Server(object):
    led_on=1 
    led_off=1 
    def index(self):
        html = """
         &lt;html&gt;
           &lt;body&gt;
           &lt;script language="javascript" type="text/javascript"&gt;
           function Activate(CurrentState)
           {
               // code for IE7+, Firefox, Chrome, Opera, Safari
               if(window.XMLHttpRequest)
                   xmlhttp=new XMLHttpRequest();
               else// code for IE6, IE5
                   xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");

               xmlhttp.onreadystatechange=function()
               {
                   if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)
                   {
                       document.getElementById("UserMessage").innerHTML = xmlhttp.responseText;
                   }
               }

               xmlhttp.open("GET","/Process?on=" + CurrentState, true);
               xmlhttp.send();
           }
           &lt;/script&gt;
             &lt;br&gt;
             &lt;p id="UserMessage"&gt;&lt;p&gt;
             &lt;a onclick="document.getElementById('UserMessage').innerHTML = 'Please wait .....';Activate('1');"&gt;&lt;img src="images/on.png"&gt;&lt;/a&gt;
             &lt;a onclick="document.getElementById('UserMessage').innerHTML = 'Please wait .....';Activate('0');"&gt;&lt;img src="images/off.png"&gt;&lt;/a&gt;
           &lt;/body&gt;
          &lt;/html&gt;
                """
        return html
    index.exposed = True

    def Process(self,  on='0'):
        if on == '1':
            self.led_on = int(on)             
            subprocess.call(['guvcview &amp;'], shell=True)
            time.sleep(2)
            output = commands.getoutput('ps -A')
            if 'guvcview' in output:
                return "guvcview is running"

        if on == '0':
            self.led_off = int(on)
            subprocess.call(['sudo pkill guvcview'], shell=True)
            time.sleep(2)
            output = commands.getoutput('ps -A')
            if 'guvcview' in output:
                return "Please wait ....."
            else:
                return "guvcview closed"

        return "Please wait ....."
    Process.exposed = True

conf = {
        'global' : { 
            'server.socket_host': '0.0.0.0', 
            'server.socket_port': 8085 
        },

        '/images': {
            'tools.staticdir.on': True,
            'tools.staticdir.dir': os.path.abspath('images')
        }
    }
cherrypy.quickstart(Server(), config=conf)
</snippet></ROW><ROW><id>13365445</id><snippet>s[:3]</snippet></ROW><ROW><id>13365445</id><snippet>s[3:]</snippet></ROW><ROW><id>13365445</id><snippet>In [1]: s = 'abcdefg'
</snippet></ROW><ROW><id>13365445</id><snippet>In [2]: s[:3]
Out[2]: 'abc'
</snippet></ROW><ROW><id>13365445</id><snippet>In [3]: s[3:]
Out[3]: 'defg'
</snippet></ROW><ROW><id>13365445</id><snippet>In [4]: s[::-1]
Out[4]: 'gfedcba'
</snippet></ROW><ROW><id>13365445</id><snippet>In [5]: s[::2]
Out[5]: 'aceg'
</snippet></ROW><ROW><id>13365445</id><snippet>s[:2:-2]</snippet></ROW><ROW><id>13365445</id><snippet>In [6]: s[6:2:-2]
Out[6]: 'ge'
</snippet></ROW><ROW><id>13365445</id><snippet>-1</snippet></ROW><ROW><id>13365490</id><snippet>&gt;&gt;&gt; for i in range(3):
...     if i == 5:
...         print(i)
...     else:
...         print('Not 5')
... 
Not 5
Not 5
Not 5
</snippet></ROW><ROW><id>13365490</id><snippet>else:</snippet></ROW><ROW><id>13365490</id><snippet>for</snippet></ROW><ROW><id>13365490</id><snippet>break</snippet></ROW><ROW><id>13365490</id><snippet>for ol_man, kid in paternal_pairs.items():
    if temp_son == kid:
        print("\nThe grandfather of", son, "is", ol_man)
        break
else:
    print("\nNo grandfather listed for", son)
</snippet></ROW><ROW><id>13365490</id><snippet>else:</snippet></ROW><ROW><id>13365490</id><snippet>for</snippet></ROW><ROW><id>13365490</id><snippet>&gt;&gt;&gt; for i in range(3):
...     if i == 1:
...         print(i)
...         break
... else:
...     print('Through')
... 
1
&gt;&gt;&gt; for i in range(3):
...     if i == 5:
...         print(i)
...         break
... else:
...     print('Through')
... 
Through
</snippet></ROW><ROW><id>13365490</id><snippet>break</snippet></ROW><ROW><id>13365490</id><snippet>break</snippet></ROW><ROW><id>13365490</id><snippet>i</snippet></ROW><ROW><id>13365490</id><snippet>5</snippet></ROW><ROW><id>13365490</id><snippet>else:</snippet></ROW><ROW><id>13365490</id><snippet>Through</snippet></ROW><ROW><id>13365501</id><snippet>re.findall()</snippet></ROW><ROW><id>13365501</id><snippet>re.findall(r'\$([^$]*)\$', Sentence)
</snippet></ROW><ROW><id>13365501</id><snippet>&gt;&gt;&gt; Sentence = "The person, $John Doe$, works at $Lan Tech$ as a $Sales Engineer$."
&gt;&gt;&gt; re.findall(r'\$([^$]*)\$', Sentence)
['John Doe', 'Lan Tech', 'Sales Engineer']
</snippet></ROW><ROW><id>13365501</id><snippet>$</snippet></ROW><ROW><id>13365501</id><snippet>$</snippet></ROW><ROW><id>13365501</id><snippet>re.findall()</snippet></ROW><ROW><id>13365501</id><snippet>$</snippet></ROW><ROW><id>13365501</id><snippet>[^$]*</snippet></ROW><ROW><id>13365501</id><snippet>$</snippet></ROW><ROW><id>13365631</id><snippet>/api/records?id=10</snippet></ROW><ROW><id>13365631</id><snippet>/api/records/10</snippet></ROW><ROW><id>13365712</id><snippet>cineslug</snippet></ROW><ROW><id>13365712</id><snippet>def FuncionesByCine(request, id):</snippet></ROW><ROW><id>13365712</id><snippet>def FuncionesByCine(request, cineslug, id):</snippet></ROW><ROW><id>13365712</id><snippet>def FuncionesByCine(request, cineslug, id):</snippet></ROW><ROW><id>13365712</id><snippet>cineslug</snippet></ROW><ROW><id>13365712</id><snippet>url(r'^funciones/(?P&lt;id&gt;.*)/$', views.FuncionesByCine, {'cineslug': None})</snippet></ROW><ROW><id>13365712</id><snippet>def FuncionesByCine(request, cineslug, id):
  if cineslug is None:
     # this is from funciones/{id} 
</snippet></ROW><ROW><id>13365712</id><snippet>Funcion</snippet></ROW><ROW><id>13365712</id><snippet>funciones = Funcion.objects.filter(idcine__slug={{ your slug value here }})</snippet></ROW><ROW><id>13365719</id><snippet>fig, ax = plt.subplots(10, 10)
</snippet></ROW><ROW><id>13365719</id><snippet>Definition: plt.subplots(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, subplot_kw=None, **fig_kw)
Create a figure with a set of subplots already made.

This utility wrapper makes it convenient to create common layouts of
subplots, including the enclosing figure object, in a single call.
</snippet></ROW><ROW><id>13365823</id><snippet>.fetchone()</snippet></ROW><ROW><id>13365823</id><snippet>password</snippet></ROW><ROW><id>13365823</id><snippet>password = cur.fetchone()[0]
</snippet></ROW><ROW><id>13366202</id><snippet>pytz</snippet></ROW><ROW><id>13366202</id><snippet>2012d</snippet></ROW><ROW><id>13366202</id><snippet>&gt;&gt;&gt; import pytz, datetime
&gt;&gt;&gt; pytz.__version__
'2012d'
&gt;&gt;&gt; local_tz = pytz.timezone('Europe/Copenhagen')
&gt;&gt;&gt; local_tz.localize(datetime.datetime(2013, 3, 31, 2, 30), is_dst=None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pytz/tzinfo.py", line 327, in localize
    raise NonExistentTimeError(dt)
pytz.exceptions.NonExistentTimeError: 2013-03-31 02:30:00
</snippet></ROW><ROW><id>13366202</id><snippet>pip install -U pytz</snippet></ROW><ROW><id>13366202</id><snippet>easy_install -U pytz</snippet></ROW><ROW><id>13366218</id><snippet>1</snippet></ROW><ROW><id>13366218</id><snippet>2</snippet></ROW><ROW><id>13366218</id><snippet>if</snippet></ROW><ROW><id>13366262</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

def update_line(num, data, line, img):
    line.set_data(data[...,:num])
    if num == 24:
        img.set_visible(True)
    return line, img

fig1 = plt.figure()

data = np.random.rand(2, 25)
ax1=plt.subplot(211)
l, = plt.plot([], [], 'rx')
plt.xlim(0, 1)
plt.ylim(0, 1)
plt.xlabel('x')
plt.title('test')
ax2=plt.subplot(212)
nhist, xedges, yedges = np.histogram2d(data[0,:], data[1,:])
img = plt.imshow(nhist, aspect='auto', origin='lower')
img.set_visible(False)
line_ani = animation.FuncAnimation(fig1, update_line, 25, 
                                   fargs=(data, l, img),
                                   interval=50, blit=True)
line_ani.repeat = False
plt.show()
</snippet></ROW><ROW><id>13366270</id><snippet>%s</snippet></ROW><ROW><id>13366270</id><snippet>?</snippet></ROW><ROW><id>13366356</id><snippet>def range(*args)</snippet></ROW><ROW><id>13366356</id><snippet>def range(start=0, stop, step=1)</snippet></ROW><ROW><id>13366356</id><snippet>def range(start=0, stop=object(), step=1)</snippet></ROW><ROW><id>13366356</id><snippet>stop</snippet></ROW><ROW><id>13366357</id><snippet>int("7A",16) == 0x7A</snippet></ROW><ROW><id>13366357</id><snippet>0x20 &lt;= a &lt;= 0x7A</snippet></ROW><ROW><id>13366368</id><snippet>soup = BeautifulSoup(html)
</snippet></ROW><ROW><id>13366368</id><snippet>div = soup.div
</snippet></ROW><ROW><id>13366368</id><snippet>lat, lon = div.attrs['data-lat'], div.attrs['data-lon']
</snippet></ROW><ROW><id>13366368</id><snippet>&gt;&gt;&gt; print lat, lon
51.9006 -8.51008
</snippet></ROW><ROW><id>13366368</id><snippet>.attrs</snippet></ROW><ROW><id>13366368</id><snippet>.attrs</snippet></ROW><ROW><id>13366368</id><snippet>div['data-lon']</snippet></ROW><ROW><id>13366368</id><snippet>div</snippet></ROW><ROW><id>13366368</id><snippet>for div in divs:
    print div['data-lon'], div['data-lat']
</snippet></ROW><ROW><id>13366368</id><snippet>[(div['data-lon'], div['data-lat']) for div in divs]
</snippet></ROW><ROW><id>13366672</id><snippet>sys.setrecursionlimit(5000000)</snippet></ROW><ROW><id>13366761</id><snippet>import re

args = {}
args['pythonFile'] =  sys.argv[0]

for arg in sys.argv[1:]:
  variable = re.search('\-\-(.*)\=',arg)
  variable = variable.group(1)
  value = re.search('\=(.*)',arg)
  value = value.group(1)
  args[variable] = value

print args
</snippet></ROW><ROW><id>13366761</id><snippet>$ /opt/python27/bin/python2.7 Test.py --var1=1 --var2="Testing This"
{'var1': '1', 'pythonFile': 'Test.py', 'var2': 'Testing This'}
</snippet></ROW><ROW><id>13366858</id><snippet>x</snippet></ROW><ROW><id>13366858</id><snippet>seq</snippet></ROW><ROW><id>13366858</id><snippet>def collatz_sequence(x):
    seq = [x]
    if x &lt; 1:
       return []
    while x &gt; 1:
       if x % 2 == 0:
         x = x / 2
       else:
         x = 3 * x + 1 
       seq.append(x)    # Added line
    return seq
</snippet></ROW><ROW><id>13366858</id><snippet>~/tmp$ python collatz.py 
[6, 3, 10, 5, 16, 8, 4, 2, 1]
</snippet></ROW><ROW><id>13367057</id><snippet>easygui-docs-0.96.zip</snippet></ROW><ROW><id>13367057</id><snippet>Show a box in which a user can enter an integer.

In addition to arguments for msg and title, this function accepts
integer arguments for "default", "lowerbound", and "upperbound".

The default argument may be None.

When the user enters some text, the text is checked to verify that it
can be converted to an integer between the lowerbound and upperbound.

If it can be, the integer (not the text) is returned.

If it cannot, then an error msg is displayed, and the integerbox is
redisplayed.

If the user cancels the operation, None is returned.

NOTE that the "argLowerBound" and "argUpperBound" arguments are no longer
supported.  They have been replaced by "upperbound" and "lowerbound".
</snippet></ROW><ROW><id>13367057</id><snippet>'integerbox2'</snippet></ROW><ROW><id>13367057</id><snippet>__all__</snippet></ROW><ROW><id>13367057</id><snippet>None</snippet></ROW><ROW><id>13367057</id><snippet>integerbox</snippet></ROW><ROW><id>13367057</id><snippet>#-------------------------------------------------------------------
# integerbox2
#-------------------------------------------------------------------
def integerbox2(msg=""
    , title=" "
    , default=""
    , image = None
    , root  = None
    , **invalidKeywordArguments
    ):
    """
    Show a box in which a user can enter an integer.

    In addition to arguments for msg and title, this function also accepts
    the integer argument "default".

    The default argument may be None.

    When the user enters some text, the text is checked to verify that it
    can be converted to an integer.

    If it can be, the integer (not the text) is returned.

    If it cannot, then an error msg is displayed, and the integerbox is
    redisplayed.

    If the user cancels the operation, None is returned.

    """
    if default is None:
        default = ""
    if default != "":
        if type(default) != type(1):
            raise AssertionError(
                "integerbox2 received a non-integer value for "
                + "default of " + dq(str(default)) , "Error")

    if msg == "":
        msg = ("Enter an integer")

    while 1:
        reply = enterbox(msg, title, str(default), image=image, root=root)
        if reply == None: return None

        try:
            reply = int(reply)
        except:
            msgbox ("The value that you entered:\n\t%s\nis not an integer." % dq(str(reply))
                    , "Error")
            continue

        # reply appears to be a valid integer.
        return reply
</snippet></ROW><ROW><id>13367112</id><snippet>pip install datetime</snippet></ROW><ROW><id>13367343</id><snippet>proportion</snippet></ROW><ROW><id>13367343</id><snippet>sizer.Add(self.tableList, proportion=1, flag=wx.EXPAND)
</snippet></ROW><ROW><id>13367348</id><snippet>/etc/network/if-up.d/</snippet></ROW><ROW><id>13367348</id><snippet>chmod +x</snippet></ROW><ROW><id>13367348</id><snippet>#! /bin/sh
# ntp time-sync manager python daemon starter script

set -e

# ... Some Stuff Omitted Here ...

if [ "$METHOD" = dhcp ]; then
  echo -n "Starting $DESC..."
  start-stop-daemon --start --verbose --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_ARGS
  echo "METHOD: $METHOD"
  echo "IFACE: $IFACE"
fi

echo "Exiting if-up.d/ntp_manager"
exit 0
</snippet></ROW><ROW><id>13367348</id><snippet>run-parts /etc/network/if-up.d</snippet></ROW><ROW><id>13367348</id><snippet>Reconfiguring network interfaces eth0 with DHCP... cat: can't open '/var/run/udh
cpc.eth0.pid': No such file or directory
run-parts /etc/network/if-pre-up.d
ifconfig eth0 up
udhcpc -R -b -p /var/run/udhcpc.eth0.pid -i eth0
udhcpc (v1.13.2) started
Sending discover...
Sending discover...
Sending select for 192.168.1.145...
Lease of 192.168.1.145 obtained, lease time 86400
adding dns 192.168.1.1
run-parts /etc/network/if-up.d
Starting NTP Time Manager...Daemon PID 1059
Redirecting serivice startup output to /home/root/Connect/log/ntp_manager_daemon.log
METHOD: dhcp
IFACE: eth0
Exiting if-up.d/ntp_manager
</snippet></ROW><ROW><id>13367389</id><snippet>from mypackage.pkg import mymodule

reload(mymodule)
</snippet></ROW><ROW><id>13367389</id><snippet>import mypackage.pkg.mymodule
...
reload(mypackage.pkg.mymodule)
</snippet></ROW><ROW><id>13367555</id><snippet>pip</snippet></ROW><ROW><id>13367555</id><snippet>setup.py</snippet></ROW><ROW><id>13367555</id><snippet>dbus-python</snippet></ROW><ROW><id>13367555</id><snippet>PYTHON=python3.3 ./configure --prefix=/tmp/dbus-python
make
make install
</snippet></ROW><ROW><id>13367568</id><snippet>&gt;&gt;&gt; from mock import patch
&gt;&gt;&gt; import exampleModule
&gt;&gt;&gt;    
&gt;&gt;&gt; def func():
...     ls = []
...     exampleModule.send(ls)
... 
&gt;&gt;&gt; with patch('exampleModule.send') as send:
...     func()
...     assert send.called
</snippet></ROW><ROW><id>13367568</id><snippet>patch</snippet></ROW><ROW><id>13367568</id><snippet>mock</snippet></ROW><ROW><id>13367773</id><snippet>writerow</snippet></ROW><ROW><id>13367773</id><snippet>writerows</snippet></ROW><ROW><id>13367773</id><snippet>writerows</snippet></ROW><ROW><id>13367773</id><snippet>writerow(n6s2f0e1)</snippet></ROW><ROW><id>13367902</id><snippet> |  __init__(self, quoteChar, escChar=None, escQuote=None, multiline=False, unquoteResults=True, endQuoteChar=None)
 |      Defined with the following parameters:
 |       - quoteChar - string of one or more characters defining the quote delimiting string
 |       - escChar - character to escape quotes, typically backslash (default=None)
 |       - escQuote - special quote sequence to escape an embedded quote string (such as SQL's "" to escape an embedded ") (default=None)
 |       - multiline - boolean indicating whether quotes can span multiple lines (default=False)
 |       - unquoteResults - boolean indicating whether the matched text should be unquoted (default=True)
 |       - endQuoteChar - string of one or more characters defining the end of the quote delimited string (default=None =&gt; same as quoteChar)
 |  
</snippet></ROW><ROW><id>13367902</id><snippet>&gt;&gt;&gt; import pyparsing
&gt;&gt;&gt; s = r'''"this is an \"example\" of what I want to parse" '''
&gt;&gt;&gt; pyparsing.QuotedString('"').parseString(s)
(['this is an \\'], {})
&gt;&gt;&gt; pyparsing.QuotedString('"', escChar='\\').parseString(s)
(['this is an "example" of what I want to parse'], {})
</snippet></ROW><ROW><id>13367955</id><snippet>configparser</snippet></ROW><ROW><id>13367955</id><snippet>DEFAULT</snippet></ROW><ROW><id>13367955</id><snippet>def retrieve_download_path(feed):
    # Read the config files.
    config = configparser.ConfigParser()
    config.read((CONFIG_FILENAME_GLOBAL, CONFIG_FILENAME_USER))

    # Resolve the section (configparser doesn't fallback to DEFAULT if the entire section is missing).
    section = feed if config.has_section(feed) else config.default_section

    # Extract the download path.
    download_path = config.get(section, 'Download directory', fallback='~/Downloads')

    # Expand the user directory.
    return os.path.expanduser(download_path)
</snippet></ROW><ROW><id>13367955</id><snippet>DEFAULT</snippet></ROW><ROW><id>13368180</id><snippet>rick = Rick()

try:
   rick.roll()
except rick.GaveYouUp:
   never()
except rick.LetYouDown:
   never_ever()
</snippet></ROW><ROW><id>13368180</id><snippet>rick</snippet></ROW><ROW><id>13368180</id><snippet>GoddamStar(object):
   def sing(self,tune):
       raise self.Error()

class Rick(GoddamStar):
    class Error(Error): pass
    class GaveYouUp(Error): pass
    class LetYouDown(Error): pass

class Michael(GoddamStar):
    class Error(Error): pass
    class BlamedItOnTheSunshine(Error): pass
    class BlamedItOnTheMoonlight(Error): pass

rick = Rick()

try:
   rick.sing()
except Rick.GaveYouUp:
   never()
except Michael.Error:
   never_ever()
</snippet></ROW><ROW><id>13368180</id><snippet>rick</snippet></ROW><ROW><id>13368294</id><snippet>result = (lambda array: reduce(lambda a,b: some_function(b,array), array))(original_array[:])
</snippet></ROW><ROW><id>13368304</id><snippet>def build_grocery_list(grocery_file):
    food_list = []
    inner_list = []
    for line in grocery_file:
        if line.strip() == "":
            food_list.append(inner_list)
            inner_list = []            
        if line.strip() != "":
            inner_list.append(line.strip())
    if (inner_list):
        food_list.append(inner_list)

    return food_list
</snippet></ROW><ROW><id>13368320</id><snippet>x[::-1]</snippet></ROW><ROW><id>13368320</id><snippet>def reverse(n):
    return int(str(n)[::-1])

def is_palindrome(n):
    return str(n) == str(n)[::-1]

def alg196(n, return_length=False):
    results = [n]
    while not is_palindrome(results[-1]):
        results.append(n + reverse(n))
        n = results[-1]
    return results[-1] if not return_length else len(results)
</snippet></ROW><ROW><id>13368320</id><snippet>count=0</snippet></ROW><ROW><id>13368320</id><snippet>def alg196(n, return_length=False):
    count = 1
    while not is_palindrome(n):
        n = n + reverse(n)
        count += 1
    return count if return_length else n
</snippet></ROW><ROW><id>13368526</id><snippet>class Foo(object):
    _a = 2

    @property
    def a(self):
        Foo._a += 1
        return Foo._a - 1

    b = 2
</snippet></ROW><ROW><id>13368526</id><snippet>foo_instance.a</snippet></ROW><ROW><id>13368526</id><snippet>_a</snippet></ROW><ROW><id>13368526</id><snippet>b</snippet></ROW><ROW><id>13368526</id><snippet>class Foo(object):
    def __init__(self):
        self._a = 2
        self.b = 2

    @property
    def a(self):
        self._a += 1
        return self._a - 1
</snippet></ROW><ROW><id>13368627</id><snippet>add</snippet></ROW><ROW><id>13368627</id><snippet>put</snippet></ROW><ROW><id>13368753</id><snippet>itertools.groupby</snippet></ROW><ROW><id>13368753</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; mylist = ['sub_0_a', 'sub_0_b', 'sub_1_a', 'sub_1_b']
&gt;&gt;&gt; for k,v in itertools.groupby(mylist,key=lambda x:x[:5]):
...     print k, list(v)
... 
sub_0 ['sub_0_a', 'sub_0_b']
sub_1 ['sub_1_a', 'sub_1_b']
</snippet></ROW><ROW><id>13368753</id><snippet>&gt;&gt;&gt; [list(v) for k,v in itertools.groupby(mylist,key=lambda x:x[:5])]
[['sub_0_a', 'sub_0_b'], ['sub_1_a', 'sub_1_b']]
</snippet></ROW><ROW><id>13368861</id><snippet>lib</snippet></ROW><ROW><id>13368861</id><snippet>packages_dir</snippet></ROW><ROW><id>13368861</id><snippet>package_dir = {'': 'lib'}
</snippet></ROW><ROW><id>13368861</id><snippet>distutils</snippet></ROW><ROW><id>13368861</id><snippet>lib</snippet></ROW><ROW><id>13368861</id><snippet>lib</snippet></ROW><ROW><id>13368861</id><snippet>foo</snippet></ROW><ROW><id>13368861</id><snippet>lib/foo</snippet></ROW><ROW><id>13368861</id><snippet>package_dir = {'': 'lib'}
</snippet></ROW><ROW><id>13368861</id><snippet>packages = ['foo']</snippet></ROW><ROW><id>13368861</id><snippet>lib/foo/__init__.py</snippet></ROW><ROW><id>13368910</id><snippet>string</snippet></ROW><ROW><id>13368910</id><snippet>''</snippet></ROW><ROW><id>13368910</id><snippet>import itertools
choices = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789"
for length in range(len(string), 20):
    itr = itertools.product(choices, repeat = length)
    if string != '' and length == len(string):
        itr = itertools.dropwhile(tuple(string).__ne__, itr)
    for entry in itr:
        string = ''.join(entry)
        print string
</snippet></ROW><ROW><id>13368910</id><snippet>next(itr)</snippet></ROW><ROW><id>13369332</id><snippet>peopleList.append(internal)
</snippet></ROW><ROW><id>13369332</id><snippet>peopleList.extend(internal)
</snippet></ROW><ROW><id>13369395</id><snippet>py4chan.Board</snippet></ROW><ROW><id>13369395</id><snippet>refreshthread</snippet></ROW><ROW><id>13369395</id><snippet>board = py4chan.Board(boardin)
</snippet></ROW><ROW><id>13369395</id><snippet>board = py4chan.Board(base_url, post_url, filesize)
</snippet></ROW><ROW><id>13369645</id><snippet>import os
os.environ['THE_ENVIRONMENT_VARIABLE_NAME']
</snippet></ROW><ROW><id>13369839</id><snippet>Except</snippet></ROW><ROW><id>13369839</id><snippet>OSError: [Errno 2] No such file or directory</snippet></ROW><ROW><id>13369839</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>13369839</id><snippet>shell = true</snippet></ROW><ROW><id>13369839</id><snippet>Popen</snippet></ROW><ROW><id>13369839</id><snippet>shell = True</snippet></ROW><ROW><id>13369839</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>13369839</id><snippet>"ls -ddd 1&gt;&amp;2"</snippet></ROW><ROW><id>13369839</id><snippet>"ls -ddd 1&gt;&amp;2"</snippet></ROW><ROW><id>13369839</id><snippet>ls</snippet></ROW><ROW><id>13369839</id><snippet>-ddd</snippet></ROW><ROW><id>13369839</id><snippet>1&gt;&amp;2</snippet></ROW><ROW><id>13369839</id><snippet>shell = True</snippet></ROW><ROW><id>13369857</id><snippet>/data/db</snippet></ROW><ROW><id>13369857</id><snippet>dbpath</snippet></ROW><ROW><id>13369977</id><snippet>ax.yaxis.set_label_position("right")
</snippet></ROW><ROW><id>13370007</id><snippet>auto_managed</snippet></ROW><ROW><id>13370007</id><snippet>'paused': False</snippet></ROW><ROW><id>13370007</id><snippet>'auto_managed': True</snippet></ROW><ROW><id>13370007</id><snippet>'paused': True</snippet></ROW><ROW><id>13370007</id><snippet>add_magnet_uri()</snippet></ROW><ROW><id>13370007</id><snippet>add_torrent()</snippet></ROW><ROW><id>13370007</id><snippet>url</snippet></ROW><ROW><id>13370198</id><snippet>x</snippet></ROW><ROW><id>13370198</id><snippet>y</snippet></ROW><ROW><id>13370198</id><snippet>x = np.array([40,45,50,55,60])
y = np.array([0.99358851674641158, 0.79779904306220106, 0.60200956937799055, 0.49521531100478472, 0.38842105263157894])
</snippet></ROW><ROW><id>13370267</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.view = View(self)
        self.button = QtGui.QPushButton('Clear View', self)
        self.button.clicked.connect(self.handleClearView)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.view)
        layout.addWidget(self.button)

    def handleClearView(self):
        self.view.scene().clear()

class View(QtGui.QGraphicsView):
    def __init__(self, parent):
        QtGui.QGraphicsView.__init__(self, parent)
        self.setScene(QtGui.QGraphicsScene(self))
        self.setSceneRect(QtCore.QRectF(self.viewport().rect()))

    def mousePressEvent(self, event):
        self._start = event.pos()

    def mouseReleaseEvent(self, event):
        start = QtCore.QPointF(self.mapToScene(self._start))
        end = QtCore.QPointF(self.mapToScene(event.pos()))
        self.scene().addItem(
            QtGui.QGraphicsLineItem(QtCore.QLineF(start, end)))
        for point in (start, end):
            text = self.scene().addSimpleText(
                '(%d, %d)' % (point.x(), point.y()))
            text.setBrush(QtCore.Qt.red)
            text.setPos(point)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.resize(640, 480)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13370292</id><snippet>import pyodbc
def testDB():
    cnxn = pyodbc.connect("DRIVER={SQL Server};SERVER=MyDatabase;DATABASE=TestDB;UID='';PWD=''")
    cursor = cnxn.cursor()
    cursor.execute("select MeasurementValue from TAG_DATA where ItemID=10")
    row = cursor.fetchone()    
    return row
</snippet></ROW><ROW><id>13370382</id><snippet>DateTime</snippet></ROW><ROW><id>13370382</id><snippet>Column</snippet></ROW><ROW><id>13370382</id><snippet>import datetime
from sqlalchemy import Column, Integer
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Test(Base):
    __tablename__ = 'test'

    id = Column(Integer, primary_key=True)
    created_date = Column(DateTime, default=datetime.datetime.utcnow)
</snippet></ROW><ROW><id>13370556</id><snippet>string.replace(string, "")</snippet></ROW><ROW><id>13370556</id><snippet>string = ""</snippet></ROW><ROW><id>13370556</id><snippet>string</snippet></ROW><ROW><id>13370556</id><snippet>string.replace(searchString, "")</snippet></ROW><ROW><id>13370556</id><snippet>string</snippet></ROW><ROW><id>13370556</id><snippet>with</snippet></ROW><ROW><id>13370556</id><snippet>for line in f:</snippet></ROW><ROW><id>13370556</id><snippet>for line in f.readlines()</snippet></ROW><ROW><id>13370556</id><snippet>readlines()</snippet></ROW><ROW><id>13370556</id><snippet>sed</snippet></ROW><ROW><id>13370556</id><snippet>sort</snippet></ROW><ROW><id>13370556</id><snippet>def stderrinput(prompt):
    sys.stderr.write(prompt)
    sys.stderr.flush()
    return input()

def main():
    with open(stderrinput("Enter a file name: "), "r") as infile:
        searchString = stderrinput("Enter the string to be removed: ")
        for line in infile:
            print(infile.replace(searchString, ""))
    sys.stderr.write("Done\n")
</snippet></ROW><ROW><id>13370556</id><snippet>def main():
    inpath = input("Enter an input file: ")
    outpath = input("Enter an output file: ")
    with open(inpath, "r") as infile, open("outpath", "w") as outfile:
        for line in infile:
            outfile.write(line.replace(searchString, "") + "\n")
</snippet></ROW><ROW><id>13370556</id><snippet>def main():
    path = input("Enter an input/output file: ")
    with open(path, "r+") as inoutfile:
        lines = [line.replace(searchString, "") for line in inoutfile]
        inoutfile.seek(0)
        inoutfile.truncate()
        inoutfile.writelines(lines)
</snippet></ROW><ROW><id>13370556</id><snippet>def main():
    path = input("Enter an input/output file: ")
    with open(path, "r") as infile, tempfile.NamedTemporaryFile("w", delete=False) as outfile:
        for line in infile:
            outfile.write(line.replace(searchString, ""))
        shutil.move(outfile.name, pathname)
</snippet></ROW><ROW><id>13370828</id><snippet>def myreduce(func,collection,*args):
    """func takes 3 parameters.  The previous value,
       the current value, and the rest of the collection"""
    def new_func(x,y):
        try:
            return func(x[1],y[1],collection[y[0]:])
        except TypeError:
            return func(x,y[1],collection[y[0]:])
    return reduce(new_func,enumerate(collection),*args)

print myreduce(lambda x,y,rest:x+y+sum(rest),range(30))
</snippet></ROW><ROW><id>13370828</id><snippet>collection = tuple(collection)</snippet></ROW><ROW><id>13370869</id><snippet>for line in file:
    for a in line:
        if is_number(a):
            # do stuff
</snippet></ROW><ROW><id>13370869</id><snippet>line</snippet></ROW><ROW><id>13370869</id><snippet>a</snippet></ROW><ROW><id>13370869</id><snippet>IndexError</snippet></ROW><ROW><id>13370869</id><snippet>for a in line:
</snippet></ROW><ROW><id>13370869</id><snippet>for a in line.split()
</snippet></ROW><ROW><id>13370869</id><snippet>"6 12 4 5"</snippet></ROW><ROW><id>13370869</id><snippet>[6,12,4,5]</snippet></ROW><ROW><id>13370869</id><snippet>if matrix.count(0) &lt; 2:
</snippet></ROW><ROW><id>13370869</id><snippet>if j == len(matrix[0]) - 1:
</snippet></ROW><ROW><id>13371065</id><snippet>Gtk.SeparatorMenuItem.new()</snippet></ROW><ROW><id>13371090</id><snippet>date_index = pd.DatetimeIndex([pd.datetime(2003,6,24), pd.datetime(2003,8,13),
        pd.datetime(2003,8,19), pd.datetime(2003,8,22), pd.datetime(2003,8,24)])

ts = pd.Series([2,1,2,1,5], index=date_index)
</snippet></ROW><ROW><id>13371090</id><snippet>2003-06-24    2
2003-08-13    1
2003-08-19    2
2003-08-22    1
2003-08-24    5
</snippet></ROW><ROW><id>13371090</id><snippet>ts.reindex(pd.date_range(min(date_index), max(date_index)))
</snippet></ROW><ROW><id>13371090</id><snippet>fillna</snippet></ROW><ROW><id>13371090</id><snippet>2003-06-24     2
2003-06-25   NaN
2003-06-26   NaN
2003-06-27   NaN
2003-06-28   NaN
2003-06-29   NaN
2003-06-30   NaN
2003-07-01   NaN
2003-07-02   NaN
2003-07-03   NaN
2003-07-04   NaN
2003-07-05   NaN
2003-07-06   NaN
2003-07-07   NaN
2003-07-08   NaN
2003-07-09   NaN
2003-07-10   NaN
2003-07-11   NaN
2003-07-12   NaN
2003-07-13   NaN
2003-07-14   NaN
2003-07-15   NaN
2003-07-16   NaN
2003-07-17   NaN
2003-07-18   NaN
2003-07-19   NaN
2003-07-20   NaN
2003-07-21   NaN
2003-07-22   NaN
2003-07-23   NaN
2003-07-24   NaN
2003-07-25   NaN
2003-07-26   NaN
2003-07-27   NaN
2003-07-28   NaN
2003-07-29   NaN
2003-07-30   NaN
2003-07-31   NaN
2003-08-01   NaN
2003-08-02   NaN
2003-08-03   NaN
2003-08-04   NaN
2003-08-05   NaN
2003-08-06   NaN
2003-08-07   NaN
2003-08-08   NaN
2003-08-09   NaN
2003-08-10   NaN
2003-08-11   NaN
2003-08-12   NaN
2003-08-13     1
2003-08-14   NaN
2003-08-15   NaN
2003-08-16   NaN
2003-08-17   NaN
2003-08-18   NaN
2003-08-19     2
2003-08-20   NaN
2003-08-21   NaN
2003-08-22     1
2003-08-23   NaN
2003-08-24     5
Freq: D, Length: 62
</snippet></ROW><ROW><id>13371098</id><snippet>scipy.ndimage</snippet></ROW><ROW><id>13371098</id><snippet>skimage</snippet></ROW><ROW><id>13371098</id><snippet>&gt;&gt;&gt; from scipy.ndimage import find_objects,label
&gt;&gt;&gt; import scipy.misc          
&gt;&gt;&gt; img=scipy.misc.imread('filename.jpg')  
&gt;&gt;&gt; labeled,number=label(img) # (label) returns the lebeled objects while  
                              # (number) returns the numer ofthe labeled signs  
&gt;&gt;&gt; signs=find_objects(labeled)  #this will extract the signs in your image  
#once you got that,you can simply determine  
# if two images have the same sign using sum simple math-work.  
</snippet></ROW><ROW><id>13371098</id><snippet>skimage</snippet></ROW><ROW><id>13371098</id><snippet>&gt;&gt;&gt; import skimage.morphology.label  
&gt;&gt;&gt; labeled=skimage.morphology.label(img,8,255) #255 for the white background
                                                #in the gray-scale mode  
#after you label the signs you can use the wonderful method  
#`skimag.measure.regionprops` as this method will surely  
# help you decide which two signs are the same.
</snippet></ROW><ROW><id>13371226</id><snippet>"sensitive"</snippet></ROW><ROW><id>13371226</id><snippet>widget.set_sensitive(False)</snippet></ROW><ROW><id>13371226</id><snippet>n</snippet></ROW><ROW><id>13371226</id><snippet>while gtk.events_pending(): gtk.main_iteration()</snippet></ROW><ROW><id>13371285</id><snippet>except:</snippet></ROW><ROW><id>13371285</id><snippet>except IndexError:</snippet></ROW><ROW><id>13371361</id><snippet>bytes</snippet></ROW><ROW><id>13371361</id><snippet>int</snippet></ROW><ROW><id>13371361</id><snippet>xor</snippet></ROW><ROW><id>13371361</id><snippet>&gt;&gt;&gt; a, b = b'abc', b'def'
&gt;&gt;&gt; c = bytes(x^y for x,y in zip(a, b))
&gt;&gt;&gt; c
b'\x05\x07\x05'
&gt;&gt;&gt; bytes(x^y for x,y in zip(a, c))
b'def'
&gt;&gt;&gt; bytes(x^y for x,y in zip(b, c))
b'abc'
</snippet></ROW><ROW><id>13371361</id><snippet>&gt;&gt;&gt; ''.join(format(x, '08b') for x in c)
'000001010000011100000101'
</snippet></ROW><ROW><id>13371416</id><snippet>sam@blackbird-debian:~
$ cat tmp.ipy
me = !whoami
print me
sam@blackbird-debian:~
$ ipython tmp.ipy
['sam']
</snippet></ROW><ROW><id>13371470</id><snippet>Entry</snippet></ROW><ROW><id>13371470</id><snippet>Entry.string1  
Entry.string2  
Entry.list_of_strings  
</snippet></ROW><ROW><id>13371470</id><snippet>list_of_entries</snippet></ROW><ROW><id>13371470</id><snippet>&gt;&gt;&gt; for entry in list_of_entries:
...     print entry, " : ", entry.string1, entry.string2
...     for s in entry:
...         print s,
...     print ""
</snippet></ROW><ROW><id>13371473</id><snippet>buildid=BuildLocation.split('\')[-1]
</snippet></ROW><ROW><id>13371473</id><snippet>'[-1])
</snippet></ROW><ROW><id>13371473</id><snippet>buildid=BuildLocation.split('\\')[-1]
</snippet></ROW><ROW><id>13371473</id><snippet>\\
</snippet></ROW><ROW><id>13371473</id><snippet>import re
import os.path

build_location= r'\\umor\locations455\INT\A1234ABCDE120083.1'


label = get_build_label(build_location)

# Python prefers function and variable names to be all lowercase with
# underscore separating words.
def get_build_label(build_location):
    build_id = build_location.split('\\')[-1]
    notes_path = os.path.join(build_location, build_id + '_notes.txt')
    # notes_path is the filename (a string)
    try:
        with open(notes_path) as notes:
            # The 'with' keyword will automatically open and close
            # the file for you
            for line in notes:
                if line.find('Engr Label'):
                    label = line.split(':')[-1]
                    return label
    except IOError:
        # No need to do 'os.path.exists' since notes_path doesn't
        # exist, then the IOError exception will be raised.
        pass
print label
</snippet></ROW><ROW><id>13371513</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>13371513</id><snippet>urllib.urlencode({'Agent': UserAgent})
</snippet></ROW><ROW><id>13371542</id><snippet>os.access</snippet></ROW><ROW><id>13371773</id><snippet>..</snippet></ROW><ROW><id>13371773</id><snippet>&lt;segment&gt;/../</snippet></ROW><ROW><id>13371773</id><snippet>..</snippet></ROW><ROW><id>13371773</id><snippet>http://example.com/foo/bar/</snippet></ROW><ROW><id>13371773</id><snippet>../baz/</snippet></ROW><ROW><id>13371773</id><snippet>http://example.com/foo/baz/</snippet></ROW><ROW><id>13371773</id><snippet>http://example.com/foo/bar/../baz</snippet></ROW><ROW><id>13371773</id><snippet>..</snippet></ROW><ROW><id>13371773</id><snippet>..</snippet></ROW><ROW><id>13371773</id><snippet>/../foo</snippet></ROW><ROW><id>13371773</id><snippet>/foo</snippet></ROW><ROW><id>13371773</id><snippet>urllib2</snippet></ROW><ROW><id>13371773</id><snippet>urllib2</snippet></ROW><ROW><id>13371773</id><snippet>urllib2</snippet></ROW><ROW><id>13371773</id><snippet>HTTPRedirectHandler</snippet></ROW><ROW><id>13371773</id><snippet>redirect_request</snippet></ROW><ROW><id>13371773</id><snippet>Request</snippet></ROW><ROW><id>13371773</id><snippet>http://example.com/index.asp?action=news</snippet></ROW><ROW><id>13371773</id><snippet>http://example.com/../index.asp?action=news</snippet></ROW><ROW><id>13371778</id><snippet>for i in clslist:
    if i.str1 == A and i.str2 == B:
        i.strlist.append(whatever)
</snippet></ROW><ROW><id>13371916</id><snippet>enumerate</snippet></ROW><ROW><id>13371916</id><snippet>for c,cell in enumerate(cells):
    ....
</snippet></ROW><ROW><id>13372133</id><snippet>articles = ArticleTracking.objects.filter(date__range=(start_date, end_date))
articles = articles.values('story_id', 'url', 'headline').annotate(count = Count('story_id')).order_by('-count')[:20]
</snippet></ROW><ROW><id>13372199</id><snippet>new_dict = {'datetime': date_dict.keys(), 'observations': date_dict.values()}
</snippet></ROW><ROW><id>13372228</id><snippet>your_string.split(".")[1] 
</snippet></ROW><ROW><id>13372228</id><snippet>In [47]: your_string = "domain.3.bumblebee"

In [48]: your_string.split(".")[1]
Out[48]: '3'
</snippet></ROW><ROW><id>13372228</id><snippet>In [49]: int(your_string.split(".")[1])
Out[49]: 3
</snippet></ROW><ROW><id>13372469</id><snippet>for key in dict1.keys():
    if 'red' in dict1[key]:
        theList = dict1[key]
        # remove 'red' from theList
        # append 'red' to another list in dict1
</snippet></ROW><ROW><id>13372547</id><snippet>thread = threading.Thread(target=MonitorProcess)
thread.daemon = True
thread.start()
</snippet></ROW><ROW><id>13372586</id><snippet>%module Item

%{
#include "Item.h"
%}

%include &lt;std_string.i&gt;
%include &lt;std_complex.i&gt;
%include "Item.h"
%template(Int) Item&lt;int&gt;;
%template(Complex) Item&lt;std::complex&lt;double&gt; &gt;;
</snippet></ROW><ROW><id>13372586</id><snippet>&gt;&gt;&gt; import Item
&gt;&gt;&gt; a=Item.Int('Int1',5)
&gt;&gt;&gt; b=Item.Complex('Cplx1',2+3j)
&gt;&gt;&gt; a.name()
'Int1'
&gt;&gt;&gt; b.name()
'Cplx1'
&gt;&gt;&gt; a.norm()
5.0
&gt;&gt;&gt; b.norm()
3.605551275463989
</snippet></ROW><ROW><id>13372607</id><snippet>def powers(n):
    return [2**i for i in range(1, n+1)]
</snippet></ROW><ROW><id>13372607</id><snippet>def powers(n):
    l = []
    for i in range(1, n+1):
        l.append(2**i)
    return l
</snippet></ROW><ROW><id>13372607</id><snippet>l.append(1**2)</snippet></ROW><ROW><id>13372607</id><snippet>l.append(2**i)</snippet></ROW><ROW><id>13372607</id><snippet>i</snippet></ROW><ROW><id>13372724</id><snippet>hdr1, hdr2 = conts[0:6], conts[10:7:-1]
</snippet></ROW><ROW><id>13372724</id><snippet>-1</snippet></ROW><ROW><id>13372724</id><snippet>reverse = string[::-1]
</snippet></ROW><ROW><id>13372724</id><snippet>[start_index:end_index:step]</snippet></ROW><ROW><id>13372724</id><snippet>hdr1, hdr2 = conts[0:6], conts[10:17]
</snippet></ROW><ROW><id>13372741</id><snippet>read()</snippet></ROW><ROW><id>13372741</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt;
&gt;&gt;&gt; request = urllib2.Request('http://downloads.graboidvideo.com/download_filter
.php?file=GraboidVideoSetup.pkg&amp;platform=Mac')
&gt;&gt;&gt; response = urllib2.urlopen(request)
&gt;&gt;&gt;
&gt;&gt;&gt; print response.info().getheader('Content-Type')
application/octet-stream
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; request = urllib2.Request('http://www.yahoo.com')
&gt;&gt;&gt; response = urllib2.urlopen(request)
&gt;&gt;&gt;
&gt;&gt;&gt; print response.info().getheader('Content-Type')
text/html;charset=utf-8
</snippet></ROW><ROW><id>13372741</id><snippet>Content-Type</snippet></ROW><ROW><id>13372741</id><snippet>text\html</snippet></ROW><ROW><id>13372741</id><snippet>text</snippet></ROW><ROW><id>13372795</id><snippet>session.url = %(redis.host)s:%(redis.port)s</snippet></ROW><ROW><id>13372805</id><snippet>value()</snippet></ROW><ROW><id>13372805</id><snippet>value()</snippet></ROW><ROW><id>13372955</id><snippet>-p</snippet></ROW><ROW><id>13372955</id><snippet>.coverage</snippet></ROW><ROW><id>13372955</id><snippet>coverage.py</snippet></ROW><ROW><id>13372966</id><snippet>uuid</snippet></ROW><ROW><id>13372966</id><snippet>str</snippet></ROW><ROW><id>13372966</id><snippet>&gt;&gt;&gt; import uuid
&gt;&gt;&gt; str(uuid.uuid4()) + ".txt"
'13eb9327-f40e-4ef1-8020-1c36af1b4b70.txt'
</snippet></ROW><ROW><id>13373023</id><snippet>def post(self, request, format=None):
    serializer = SnippetSerializer(data=request.DATA)
    if serializer.is_valid():
        self.pre_save(serializer.object) #pass in serializer.object
        serializer.save()
</snippet></ROW><ROW><id>13373099</id><snippet>eval</snippet></ROW><ROW><id>13373099</id><snippet>
In [1]: a= 10
In [2]: b= 20
In [3]: eval('a + 10*b')
Out[3]: 210
&lt;/pre&gt;</snippet></ROW><ROW><id>13373404</id><snippet>my_list=[]</snippet></ROW><ROW><id>13373404</id><snippet>my_list.append(parsed_value)</snippet></ROW><ROW><id>13373447</id><snippet>from django.utils.datastructures import SortedDict
</snippet></ROW><ROW><id>13373872</id><snippet> variable = defaultdict(lambda : (int(), Counter()))
</snippet></ROW><ROW><id>13373880</id><snippet>def update_string(str_in):
  return str_in + 'd'
</snippet></ROW><ROW><id>13373880</id><snippet>my_string = update_string(my_string)
</snippet></ROW><ROW><id>13373969</id><snippet>count</snippet></ROW><ROW><id>13373969</id><snippet>sqlq = "SELECT COUNT(1) FROM settings WHERE status = '1'"
xcnx.execute(sqlq)
if xcnx.fetchone()[0]:
    # exists
</snippet></ROW><ROW><id>13373969</id><snippet>In [22]: c.execute("select count(1) from settings where status = 1")
Out[22]: 1L  # rows

In [23]: c.fetchone()[0]
Out[23]: 1L  # count found a match

In [24]: c.execute("select count(1) from settings where status = 2")
Out[24]: 1L  # rows

In [25]: c.fetchone()[0]
Out[25]: 0L  # count did not find a match
</snippet></ROW><ROW><id>13373969</id><snippet>count(*)</snippet></ROW><ROW><id>13373969</id><snippet>count(1)</snippet></ROW><ROW><id>13373969</id><snippet>In [15]: if c.execute("select (1) from settings where status = 1 limit 1"): 
            print True
True

In [16]: if c.execute("select (1) from settings where status = 10 limit 1"): 
            print True

In [17]: 
</snippet></ROW><ROW><id>13373969</id><snippet>queryObject.exists()</snippet></ROW><ROW><id>13374118</id><snippet>$("#resume").bind("click",function() {
    $.post("/resume/",
    {
        name: "Resume" //Any example parameter that is to be passed to the view function.
    },
    function(data,textStatus)
    {
    //Callback function on success
    });
});
</snippet></ROW><ROW><id>13374118</id><snippet>@csrf_exempt
def resume(request):
    //Do your search operation.
    return HttpResponse(status=200)
</snippet></ROW><ROW><id>13374250</id><snippet>exclude = ('field1_group', )
</snippet></ROW><ROW><id>13374460</id><snippet>import xml.etree.ElementTree as ET

from StringIO import StringIO
tree = ET.parse(StringIO(xml_data))
root = tree.getroot()

assets = {}

def find_rows(rowset, parent_id):
    for row in rowset.findall("row"):
        singleton = int((row.get('singleton')))
        flag = int((row.get('flag')))
        quantity = int((row.get('quantity')))
        typeID = int((row.get('typeID')))
        locationID = int((row.get('locationID', '0')))
        itemID = int((row.get('itemID')))

        assets[itemID] = {'singleton': singleton,
                          'flag': flag,
                          'quantity': quantity,
                          'typeID': typeID,
                          'locationID': locationID,
                          'parentID': parent_id}
        child_rowset = row.find("rowset")
        if child_rowset is not None:
            find_rows(child_rowset, itemID)

first_rowset = root.find('.//rowset[@name="assets"]')
find_rows(first_rowset, None)
</snippet></ROW><ROW><id>13374633</id><snippet>clicked</snippet></ROW><ROW><id>13374633</id><snippet># handle_click will receive additional url arg along with the button
button.connect('clicked', handle_click, url)
</snippet></ROW><ROW><id>13374633</id><snippet># handle_click will be called with button and can access button.url
button.url = url
button.connect('clicked', handle_click)
</snippet></ROW><ROW><id>13375010</id><snippet>encodeURL</snippet></ROW><ROW><id>13375010</id><snippet>payload = {'u': 'http://www.google.com'}
r = requests.post('http://www.website.com/', data=payload)
</snippet></ROW><ROW><id>13375010</id><snippet>s = requests.session()
s.get('http://speed-limit.info/index.php')  # getting the cookies
response = s.post('http://speed-limit.info/includes/process.php?action=update', 
                  data={'u': 'stackoverflow.com', 'allowCookies': 'on'},
                  allow_redirects=True)
</snippet></ROW><ROW><id>13375010</id><snippet>encodeURL</snippet></ROW><ROW><id>13375323</id><snippet>mydict = {}
mydict[(1, 2)] = 'xxx'
# or more concisely (@JamesHenstridge):
mydict[1,2] = 'xxx'
</snippet></ROW><ROW><id>13375323</id><snippet>def index(a, b, maxB):
    return a*maxB + b

mydict[index(1, 2, max)] = 'xxx'
</snippet></ROW><ROW><id>13375323</id><snippet>mydict[1*max + 2] = 'xxx'
</snippet></ROW><ROW><id>13375323</id><snippet>data[line,field]</snippet></ROW><ROW><id>13375323</id><snippet>data = parseAll(somecsv); print data[7,'date']</snippet></ROW><ROW><id>13375323</id><snippet>dataLines = somecsv.readlines(); print getField(dataLines[7], 'date')</snippet></ROW><ROW><id>13376134</id><snippet>cursor.execute("INSERT INTO User(user_id,username,user) VALUES (%s,%s,%s)", (a,b,c))
</snippet></ROW><ROW><id>13376134</id><snippet>(a,b,c)</snippet></ROW><ROW><id>13376134</id><snippet>execute</snippet></ROW><ROW><id>13376134</id><snippet>'Ellie'</snippet></ROW><ROW><id>13376134</id><snippet>"(%s,)" % (a,)</snippet></ROW><ROW><id>13376134</id><snippet>(Ellie,)</snippet></ROW><ROW><id>13376134</id><snippet>('Ellie',)</snippet></ROW><ROW><id>13376206</id><snippet>set_value</snippet></ROW><ROW><id>13376206</id><snippet>def set_value(self, member, value):
    if member == "a":
        self.a = value
    elif member == "b":
        self.b = value
</snippet></ROW><ROW><id>13376206</id><snippet>set_value</snippet></ROW><ROW><id>13376206</id><snippet>setattr</snippet></ROW><ROW><id>13376206</id><snippet>setattr(myobject, "a", value)
</snippet></ROW><ROW><id>13376206</id><snippet>def set_value(self, member, value):
    setattr(self, member, value)
</snippet></ROW><ROW><id>13376206</id><snippet>def set_value(self, member, value):
    members = {
        "a" : self.a,
        "b" : self.b
    }
    members[member] = value
</snippet></ROW><ROW><id>13376381</id><snippet>import packages.package
</snippet></ROW><ROW><id>13376381</id><snippet>import package
</snippet></ROW><ROW><id>13376667</id><snippet>&gt;&gt;&gt; _R = [0] * 5
&gt;&gt;&gt; R = [_R] * 4
&gt;&gt;&gt; [id(x) for x in R]    #here all objects are acually identical
[36635392, 36635392, 36635392, 36635392]

&gt;&gt;&gt; R[0][1]=1           #changing one element changes all other elements as well
&gt;&gt;&gt; R
[[0, 1, 0, 0, 0], [0, 1, 0, 0, 0], [0, 1, 0, 0, 0], [0, 1, 0, 0, 0]]
</snippet></ROW><ROW><id>13376667</id><snippet>&gt;&gt;&gt; R=[[0]*5 for _ in range(4) ]
&gt;&gt;&gt; [id(x) for x in R]
[37254008, 36635712, 38713784, 38714664]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13376708</id><snippet>from dendropy.interop import paup</snippet></ROW><ROW><id>13376708</id><snippet>p</snippet></ROW><ROW><id>13376708</id><snippet>interpop</snippet></ROW><ROW><id>13376792</id><snippet>@register.filter
def return_item(l, i)
    try:
        return l[i]
    except:
        return None
</snippet></ROW><ROW><id>13376792</id><snippet>{{ bikesProfit|return_item:year }}
</snippet></ROW><ROW><id>13376827</id><snippet>#!/bin/sh
"exec" "python" "-B" "$0" "$@"

# The rest of the Python program follows below:
</snippet></ROW><ROW><id>13377175</id><snippet>members</snippet></ROW><ROW><id>13377175</id><snippet>LocalStructuredProperty</snippet></ROW><ROW><id>13377477</id><snippet>scipy.io.loadmat</snippet></ROW><ROW><id>13377477</id><snippet>variable_names</snippet></ROW><ROW><id>13377477</id><snippet>loadmat</snippet></ROW><ROW><id>13377477</id><snippet>varnames</snippet></ROW><ROW><id>13377477</id><snippet>_varnames</snippet></ROW><ROW><id>13377477</id><snippet>def loadrun(runs, varnames = None):
    for fle in runs:
        _varnames = None if varnames is None else varnames[:]
        yield sio.loadmat(fle, variable_names = _varnames)
</snippet></ROW><ROW><id>13377477</id><snippet>import string
import scipy.io as sio
import numpy as np

letters = string.ascii_lowercase
datafiles = ['/tmp/data{i:d}.mat'.format(i = i) for i in range(3)]

def loadrun(runs, varnames = None):
    for fle in runs:
        _varnames = None if varnames is None else varnames[:]
        yield sio.loadmat(fle, variable_names = _varnames)

def create_datafiles():
    for filename in datafiles:
        arr = np.arange(9).reshape((3, 3))
        mdict = {letter : arr for letter in letters}
        sio.savemat(filename, mdict = mdict)

create_datafiles()
vnames = ['a', 'c', 'd']
trials = loadrun(datafiles, vnames)
for t in trials:
    print(t.keys())
</snippet></ROW><ROW><id>13377477</id><snippet>MatFile4Reader</snippet></ROW><ROW><id>13377477</id><snippet>MatFile5Reader</snippet></ROW><ROW><id>13377477</id><snippet>remove</snippet></ROW><ROW><id>13377477</id><snippet>variable_names</snippet></ROW><ROW><id>13377477</id><snippet>def get_variables(self, variable_names=None):
    while not self.end_of_stream():
        ...
        if variable_names:
            variable_names.remove(name)
            if len(variable_names) == 0:
                break
</snippet></ROW><ROW><id>13377570</id><snippet>function requestData() {
    $.ajax({
        url:  'http://myhost.com/type',
        headers: { 
          Accept : "application/json"
        },
        data: {
            x: 1,
            y: 2,
            z: 3
        },
        type: "GET",
        dataType: "json",
        success: function(data) {
          //do something
        },
        cache: true
    });
}
</snippet></ROW><ROW><id>13378016</id><snippet>data()</snippet></ROW><ROW><id>13378016</id><snippet>beginInsertRows()</snippet></ROW><ROW><id>13378016</id><snippet>endInsertRows()</snippet></ROW><ROW><id>13378016</id><snippet>def appendItem(self, item):
    index = len(self.__items)

    self.beginInsertRows(QtCore.QModelIndex(), index, index)
    self.__items.append(item)
    self.endInsertRows()
</snippet></ROW><ROW><id>13378016</id><snippet>beginInsertRows()</snippet></ROW><ROW><id>13378016</id><snippet>endInsertRows()</snippet></ROW><ROW><id>13378016</id><snippet>ListMode</snippet></ROW><ROW><id>13378171</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(open('AIDNIndustrySearchAll.txt', 'r'))

# create a generator that returns actual href entries
links = (x.get('href') for x in soup.find_all('a'))

# filter the links to only those that contain "V" and store it as a 
# set to remove duplicates
selected = set(a for a in links if "V" in a)

# build output string using selected links
output = "\n".join('http://www.aidn.org.au/{0}'.format(a) for a in selected)

# write the string to file
with open('AIDNurl.txt', 'w') as f:
  f.write(output)

print output
print len(selected)  # print number of selected links
</snippet></ROW><ROW><id>13378233</id><snippet>db.cart.find_one({'cart': {'$elemMatch': { '$elemMatch' : {'id': 1, 'count': {'$gt': 2}}}}})
</snippet></ROW><ROW><id>13378244</id><snippet>import os
import signal

def create_handler(obj):
    def _handler(signum, frame):
        print "obj is availiable here!"
        print obj
        signal.signal(signum, signal.SIG_DFL)
        os.kill(os.getpid(), signum) # Rethrow signal, this time without catching it
    return _handler

def mymethod(*params):
  obj = MyObj(params)
  signal.signal(signal.SIGTSTP, create_handler(obj))
  obj.do_some_long_stuff()   
</snippet></ROW><ROW><id>13378244</id><snippet>create_handler(obj)</snippet></ROW><ROW><id>13378244</id><snippet>obj</snippet></ROW><ROW><id>13378590</id><snippet>def get(self, url, params=params):
    try:
        return requests.get(url, params=params)
    except requests.ConnectionError,e:
        log.exception(e)

res = get(...)
if res is not None:
    #Proccess with data

#or
if res is None:
    #aborting
</snippet></ROW><ROW><id>13378895</id><snippet>execute()</snippet></ROW><ROW><id>13378895</id><snippet>cursor.execute("INSERT INTO table (field1, field2, field3) VALUES(%s, %s, %s)",
               (var1, var2, var3))
</snippet></ROW><ROW><id>13378895</id><snippet>tuple</snippet></ROW><ROW><id>13378895</id><snippet>()</snippet></ROW><ROW><id>13379006</id><snippet>self.response.md5_etag()
</snippet></ROW><ROW><id>13379225</id><snippet>import numpy as np
a = np.ndarray((5,6,7), dtype=int)
</snippet></ROW><ROW><id>13379225</id><snippet>np.zeros</snippet></ROW><ROW><id>13379622</id><snippet>distribute</snippet></ROW><ROW><id>13379622</id><snippet>setuptools</snippet></ROW><ROW><id>13379622</id><snippet>distutils</snippet></ROW><ROW><id>13379622</id><snippet>entry_points = {
    'console_scripts': [
        'foo = my_package.some_module:main_func',
        'bar = other_module:some_func',
    ],
</snippet></ROW><ROW><id>13379622</id><snippet>foo</snippet></ROW><ROW><id>13379622</id><snippet>bar</snippet></ROW><ROW><id>13379622</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>13379767</id><snippet>&lt;form action="https://example.com/auth" method="post"&gt;
    &lt;input type="text" name="Email" id="Email" value=""&gt;
    &lt;input type="password" name="Password" id="Password" value=""&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>13379767</id><snippet>https://example.com/auth</snippet></ROW><ROW><id>13379767</id><snippet>post</snippet></ROW><ROW><id>13379767</id><snippet>POST</snippet></ROW><ROW><id>13379767</id><snippet>https://example.com/auth</snippet></ROW><ROW><id>13379767</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>13379767</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>13379767</id><snippet>from twisted.web.client import getPage

cookies = {}
d = getPage(
    "https://example.com/auth",
    method="POST",
    headers={"content-type": "application/x-www-form-urlencoded"},
    postdata=urllib.urlencode(dict(Email="alice@example.com", Password="secret")),
    cookies=cookies)
</snippet></ROW><ROW><id>13379767</id><snippet>cookie</snippet></ROW><ROW><id>13379767</id><snippet>getPage</snippet></ROW><ROW><id>13379969</id><snippet>temp_dir = tempfile.mkdtemp()
try:
    &lt;some code&gt;
finally:
    shutil.rmtree(temp_dir)
</snippet></ROW><ROW><id>13379969</id><snippet>@contextlib.contextmanager
def make_temp_directory():
    temp_dir = tempfile.mkdtemp()
    yield temp_dir
    shutil.rmtree(temp_dir)
</snippet></ROW><ROW><id>13379969</id><snippet>with make_temp_directory() as temp_dir:
    &lt;some code&gt;
</snippet></ROW><ROW><id>13379969</id><snippet>@contextlib.contextmanager</snippet></ROW><ROW><id>13379969</id><snippet>__enter__</snippet></ROW><ROW><id>13379969</id><snippet>__exit__</snippet></ROW><ROW><id>13379969</id><snippet>__enter__</snippet></ROW><ROW><id>13379969</id><snippet>__exit__</snippet></ROW><ROW><id>13380156</id><snippet>Counter</snippet></ROW><ROW><id>13380156</id><snippet>inv_c = defaultdict(list)
for k, v in c.iteritems():
    inv_c[v].append(k)
</snippet></ROW><ROW><id>13380156</id><snippet>inv_c.iteritems()</snippet></ROW><ROW><id>13380328</id><snippet>functools.partial</snippet></ROW><ROW><id>13380328</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; def my_function(a,b,c,d,e):
...     print (a,b,c,d,e)
... 
&gt;&gt;&gt; func_with_defaults = partial(my_function, 1, 2, e=5)
&gt;&gt;&gt; func_with_defaults(3, 4)
(1, 2, 3, 4, 5)
</snippet></ROW><ROW><id>13380328</id><snippet>partial</snippet></ROW><ROW><id>13380328</id><snippet>lambda</snippet></ROW><ROW><id>13380328</id><snippet>&gt;&gt;&gt; A = lambda x: x + y
&gt;&gt;&gt; def do_something(y):
...     return A(2)    # hope it uses the `y` parameter...
... 
&gt;&gt;&gt; do_something(1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in do_something
  File "&lt;stdin&gt;", line 1, in &lt;lambda&gt;
NameError: global name 'y' is not defined
</snippet></ROW><ROW><id>13380328</id><snippet>global</snippet></ROW><ROW><id>13380328</id><snippet>nonlocal</snippet></ROW><ROW><id>13380328</id><snippet>some_func</snippet></ROW><ROW><id>13380328</id><snippet>inspect</snippet></ROW><ROW><id>13380328</id><snippet>exec</snippet></ROW><ROW><id>13380328</id><snippet>&gt;&gt;&gt; def some_function(a,b,c):
...     print(a,b,c)
... 
&gt;&gt;&gt; code = 'some_function(a+b,c,%s)'
&gt;&gt;&gt; 
&gt;&gt;&gt; def func_one(a,b, c):
...     exec code % 1
... 
&gt;&gt;&gt; def func_two(a,b,c):
...     exec code % 2
... 
&gt;&gt;&gt; func_one(1,2,3)
(3, 3, 1)
&gt;&gt;&gt; func_two(1,2,3)
(3, 3, 2)
</snippet></ROW><ROW><id>13380328</id><snippet>&gt;&gt;&gt; def compute_values(a,b,c):
...     return (a+b, c)
... 
&gt;&gt;&gt; def func_one(a,b,c):
...     some_function(*(compute_values(a,b,c) + (1,)))
... 
&gt;&gt;&gt; def func_two(a,b,c):
...     some_function(*(compute_values(a,b,c) + (2,)))
... 
&gt;&gt;&gt; func_one(1,2,3)
(3, 3, 1)
&gt;&gt;&gt; func_two(1,2,3)
(3, 3, 2)
</snippet></ROW><ROW><id>13380744</id><snippet>class</snippet></ROW><ROW><id>13380744</id><snippet>parameter</snippet></ROW><ROW><id>13380744</id><snippet>def search_list(thedict, thelist):
    return any(x["class"] == thedict["class"]
               and x["parameter"] == thedict["parameter"]
               for x in thelist)
</snippet></ROW><ROW><id>13380744</id><snippet>if not search_list({"class": class, "parameter": parameter}, l):
    #the item was not found - do stuff
</snippet></ROW><ROW><id>13380749</id><snippet>subq = (session.query(
            Structure.type, 
            func.max(Structure.time).label("max_time")
        ).
        group_by(Structure.type)
        ).subquery()

qry = (session.query(Structure).
       join(subq, and_(Structure.type == subq.c.type, Structure.time == subq.c.max_time))
       )

print qry
</snippet></ROW><ROW><id>13380749</id><snippet>SELECT  structure.id AS structure_id, structure.type AS structure_type, structure.content AS structure_content, structure.time AS structure_time
FROM    structure 
JOIN    (SELECT structure.type AS type, max(structure.time) AS max_time
         FROM structure GROUP BY structure.type) AS anon_1 
    ON  structure.type = anon_1.type 
    AND structure.time = anon_1.max_time
</snippet></ROW><ROW><id>13380771</id><snippet>wb = load_workbook(path, use_iterators=True)
sheet = wb.worksheets[0]

row_count = sheet.get_highest_row() - 1
column_count = letter_to_index(sheet.get_highest_column()) + 1
</snippet></ROW><ROW><id>13380771</id><snippet>IterableWorksheet.get_highest_column</snippet></ROW><ROW><id>13380771</id><snippet>def letter_to_index(letter):
    """Converts a column letter, e.g. "A", "B", "AA", "BC" etc. to a zero based
    column index.

    A becomes 0, B becomes 1, Z becomes 25, AA becomes 26 etc.

    Args:
        letter (str): The column index letter.
    Returns:
        The column index as an integer.
    """
    letter = letter.upper()
    result = 0

    for index, char in enumerate(reversed(letter)):
        # Get the ASCII number of the letter and subtract 64 so that A
        # corresponds to 1.
        num = ord(char) - 64

        # Multiply the number with 26 to the power of `index` to get the correct
        # value of the letter based on it's index in the string.
        final_num = (26 ** index) * num

        result += final_num

    # Subtract 1 from the result to make it zero-based before returning.
    return result - 1
</snippet></ROW><ROW><id>13380854</id><snippet>from itertools import product
import string

charSet = string.ascii_letters + string.digits
for wordchars in product(charSet, repeat=4):
    print ''.join(wordchars)
</snippet></ROW><ROW><id>13380883</id><snippet>super(FirstClass, self).__init__()</snippet></ROW><ROW><id>13380883</id><snippet>FirstClass.__init__()</snippet></ROW><ROW><id>13381009</id><snippet>[lst[1] for lst in data]
</snippet></ROW><ROW><id>13381267</id><snippet>dis</snippet></ROW><ROW><id>13381267</id><snippet>&gt;&gt;&gt; def test():
...     print myList.__len__()
...     for i in range(0, myList.__len__()):
...         print i + myList.__len__()
... 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(test)
  2           0 LOAD_GLOBAL              0 (myList)
              3 LOAD_ATTR                1 (__len__)
              6 CALL_FUNCTION            0
              9 PRINT_ITEM          
             10 PRINT_NEWLINE       

  3          11 SETUP_LOOP              44 (to 58)
             14 LOAD_GLOBAL              2 (range)
             17 LOAD_CONST               1 (0)
             20 LOAD_GLOBAL              0 (myList)
             23 LOAD_ATTR                1 (__len__)
             26 CALL_FUNCTION            0
             29 CALL_FUNCTION            2
             32 GET_ITER            
        &gt;&gt;   33 FOR_ITER                21 (to 57)
             36 STORE_FAST               0 (i)

  4          39 LOAD_FAST                0 (i)
             42 LOAD_GLOBAL              0 (myList)
             45 LOAD_ATTR                1 (__len__)
             48 CALL_FUNCTION            0
             51 BINARY_ADD          
             52 PRINT_ITEM          
             53 PRINT_NEWLINE       
             54 JUMP_ABSOLUTE           33
        &gt;&gt;   57 POP_BLOCK           
        &gt;&gt;   58 LOAD_CONST               0 (None)
             61 RETURN_VALUE        
</snippet></ROW><ROW><id>13381267</id><snippet>__len__</snippet></ROW><ROW><id>13381267</id><snippet>__len__</snippet></ROW><ROW><id>13381267</id><snippet>len(myList)</snippet></ROW><ROW><id>13381267</id><snippet>__len__()</snippet></ROW><ROW><id>13381267</id><snippet>print len(myList)
for i in xrange(len(myList):
    print i + len(myList)
</snippet></ROW><ROW><id>13381394</id><snippet>from mako.template import Template

mydata = {'foo': 'bar', 'better foo': 'beach bar'}
working_template = Template("Let's go to the ${foo}")
fail_template = Template("Let's go to the ${mydata['better foo']}")

print working_template.render(**mydata)
print fail_template.render(mydata=mydata)
</snippet></ROW><ROW><id>13381568</id><snippet>django.db.models.base</snippet></ROW><ROW><id>13381568</id><snippet>class Model(object):

    ...

    def __hash__(self):
        return hash(self._get_pk_val())

    ...

    def __eq__(self, other):
        return isinstance(other, self.__class__) and \
               self._get_pk_val() == other._get_pk_val()
</snippet></ROW><ROW><id>13381623</id><snippet>wait()</snippet></ROW><ROW><id>13381623</id><snippet>QThread::wait()</snippet></ROW><ROW><id>13381623</id><snippet>quit()</snippet></ROW><ROW><id>13381623</id><snippet>while(keepRunning) { }</snippet></ROW><ROW><id>13381623</id><snippet>exec()</snippet></ROW><ROW><id>13381623</id><snippet>run()</snippet></ROW><ROW><id>13381623</id><snippet>keepRunning</snippet></ROW><ROW><id>13381623</id><snippet>quit()</snippet></ROW><ROW><id>13381761</id><snippet>ax1.plot(time, temp - 273, color=colors[0], label=temp_axis_label)</snippet></ROW><ROW><id>13381761</id><snippet>colors = np.array([ [(17.0/256.0), (15.0/256.0), (48.0/256.0)],  #Dark blue  (#110F30)
         [(239.0/256.0), (83.0/256.0), (25.0/256.0)]    #Orange     (#EF5319)
         ])
ax1.plot(time, temp - 273, color=colors[0,:], label=temp_axis_label)
</snippet></ROW><ROW><id>13381853</id><snippet>self.update()</snippet></ROW><ROW><id>13381853</id><snippet>fun()</snippet></ROW><ROW><id>13381853</id><snippet>qp.setBrush( Qt::white );  // Or whatever color you want the background to be 
qp.drawRect( rect() );
</snippet></ROW><ROW><id>13381890</id><snippet>pip install boto</snippet></ROW><ROW><id>13381935</id><snippet>display_list = []

with open('closeparams.txt') as data_file:
   for line in data_file:
      display_list.append(line.strip().split(';'))

print(display_list[0][3]) # [i][j]
</snippet></ROW><ROW><id>13381981</id><snippet>dict</snippet></ROW><ROW><id>13381981</id><snippet>__dict__</snippet></ROW><ROW><id>13381981</id><snippet>class</snippet></ROW><ROW><id>13381981</id><snippet>&gt;&gt;&gt; def foo():
...     spam = 'eggs'
...     class Bar(object):
...         def baz(self): return spam
...     return Bar()
... 
&gt;&gt;&gt; foo().baz()
'eggs'
</snippet></ROW><ROW><id>13381981</id><snippet>class</snippet></ROW><ROW><id>13381994</id><snippet>win32api</snippet></ROW><ROW><id>13381994</id><snippet>import win32api
import time

def keyWasUnPressed():
    print "enabling joystick..."
    #enable joystick here

def keyWasPressed():
    print "disabling joystick..."
    #disable joystick here

def isKeyPressed(key):
    #"if the high-order bit is 1, the key is down; otherwise, it is up."
    return (win32api.GetKeyState(key) &amp; (1 &lt;&lt; 7)) != 0


key = ord('A')

wasKeyPressedTheLastTimeWeChecked = False
while True:
    keyIsPressed = isKeyPressed(key)
    if keyIsPressed and not wasKeyPressedTheLastTimeWeChecked:
        keyWasPressed()
    if not keyIsPressed and wasKeyPressedTheLastTimeWeChecked:
        keyWasUnPressed()
    wasKeyPressedTheLastTimeWeChecked = keyIsPressed
    time.sleep(0.01)
</snippet></ROW><ROW><id>13381994</id><snippet>sleep</snippet></ROW><ROW><id>13382058</id><snippet>generateVM</snippet></ROW><ROW><id>13382058</id><snippet>@app.route("/getVM/&lt;int:scId&gt;", methods=['GET']) 
def getVM(scId):
    xmlContent = db.getXML(scId)  
    generatorAddr = sgAdd + "/generateVM"   

xml_str = some_method_to_generate_xml()
data_str = urllib.urlencode({'xml': xml_str})
urllib.urlopen(generatorAddr, data=data_str).read()
return json.dumps(testReturn) 
</snippet></ROW><ROW><id>13382157</id><snippet>In [11]: list1 = [1, 2, 3, 4, 5, 6]

In [12]: list2 = [12, 13, 14]

In [13]: list1[0:0] = list2

In [14]: list1
Out[14]: [12, 13, 14, 1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>13382157</id><snippet>list1</snippet></ROW><ROW><id>13382205</id><snippet>unittest.installHandler()
</snippet></ROW><ROW><id>13382205</id><snippet>unittest.registerResult(result)
</snippet></ROW><ROW><id>13382214</id><snippet>g++ -shared python/swig_wrap.o  -IC:/Python27/include/ -LC:/Python27/libs -lpython27 -o python/_lib.so
</snippet></ROW><ROW><id>13382411</id><snippet>with open("exports.txt",'r') as infile:
    exports = {}
    for line in infile:
        parts = line.partition('\t')
        exports[parts[0]] = parts[-1].strip().split(', ')

for country, exports in exports.iteritems():
    print country
    print exports
</snippet></ROW><ROW><id>13382488</id><snippet>initial</snippet></ROW><ROW><id>13382488</id><snippet>&gt;&gt;&gt; import scipy.integrate as si
&gt;&gt;&gt; si.__file__
'/usr/local/lib/python2.6/dist-packages/scipy/integrate/__init__.pyc'
</snippet></ROW><ROW><id>13382488</id><snippet>quadrature.py</snippet></ROW><ROW><id>13382488</id><snippet> def cumtrapz(y, x=None, dx=1.0, axis=-1):
</snippet></ROW><ROW><id>13382488</id><snippet>&gt;&gt;&gt; scipy.__version__
'0.10.1'
</snippet></ROW><ROW><id>13382743</id><snippet>cursor = coll.find({"place.bounding_box.type" : "Polygon"}, {"place.bounding_box.coordinates" : 1})
</snippet></ROW><ROW><id>13382743</id><snippet>&gt;&gt; cursor.next()
"place" : {"bounding_box" : { "coordinates" : [  [ [     -77.119759,      38.791645 ],   [   -76.909393,     38.791645 ],    [   -76.909393,     38.995548  ],   [   -77.119759,     38.995548 ] ] ]}
</snippet></ROW><ROW><id>13382743</id><snippet>for doc in cursor:
    print doc["place"]["bounding_box"]["coordinates"]
</snippet></ROW><ROW><id>13382773</id><snippet>imp.new_module</snippet></ROW><ROW><id>13382773</id><snippet>sys.path</snippet></ROW><ROW><id>13382773</id><snippet>__import__</snippet></ROW><ROW><id>13382773</id><snippet>modules = ['foo','bar']
for mod in modules:
    try:
        x = reload(__import__(mod))
    except ImportError:
        print "bargh! import error!"
        continue
    try:
        cls = getattr(x,'qux')
    except AttributeError:
        continue

a = cls()
print a.__class__.__name__
</snippet></ROW><ROW><id>13382773</id><snippet>foo.py</snippet></ROW><ROW><id>13382773</id><snippet>bar.py</snippet></ROW><ROW><id>13382773</id><snippet>#foo.py
class foo(object):
    pass
</snippet></ROW><ROW><id>13382773</id><snippet>#bar.py
class qux(object):
    pass
</snippet></ROW><ROW><id>13382790</id><snippet>python program.py 2&gt;&amp;1 | tee out.log
</snippet></ROW><ROW><id>13382804</id><snippet>&gt;&gt;&gt; [False] * 10
[False, False, False, False, False, False, False, False, False, False]
</snippet></ROW><ROW><id>13382804</id><snippet>list</snippet></ROW><ROW><id>13382804</id><snippet>mutable types</snippet></ROW><ROW><id>13382804</id><snippet>&gt;&gt;&gt; my_list = [[10]] * 3
&gt;&gt;&gt; my_list
[[10], [10], [10]]
&gt;&gt;&gt; my_list[0][0] = 5
&gt;&gt;&gt; my_list
[[5], [5], [5]]
</snippet></ROW><ROW><id>13383040</id><snippet>import itertools
import operator

a = {'name' : 'a', 'items': 3}
b = {'name' : 'b', 'items': 4}
c = {'name' : 'c', 'items': 5}

dcts = [a,b,c]

x = itertools.product(range(a['items']), range(b['items']), range(c['items']))
y = itertools.ifilter(lambda i: sum(i)==7, x)
z = (tuple([[dct, operator.setitem(dct, 'picked', vval)][0] \
       for dct,vval in zip(dcts, val)]) for val in y)
for zz in z:
    print zz
</snippet></ROW><ROW><id>13383040</id><snippet>z</snippet></ROW><ROW><id>13383040</id><snippet>z = (tuple([[dct, operator.setitem(dct, 'picked', vval)][0] \
      for dct,vval in zip(map(dict,dcts), val)]) for val in y)
</snippet></ROW><ROW><id>13383382</id><snippet>__iter__</snippet></ROW><ROW><id>13383382</id><snippet>next</snippet></ROW><ROW><id>13383382</id><snippet>class MyIterator:
    def __init__(self):
        self.i = 10
    def next(self):
        self.i -= 1
        if self.i == 0:
            raise StopIteration
        else:
            return self.i
</snippet></ROW><ROW><id>13383382</id><snippet>iter</snippet></ROW><ROW><id>13383382</id><snippet>__iter__</snippet></ROW><ROW><id>13383382</id><snippet>def __iter__(self):
    for i in range(10)
        yield i
</snippet></ROW><ROW><id>13383382</id><snippet>Trie</snippet></ROW><ROW><id>13383382</id><snippet>    def __iter__(self):
        stack = [('', self.root)]
        while stack:
            prefix, d = stack.pop()
            for k, v in d.items():
                if k == 'value':
                    yield prefix, v
                else:
                    stack.append((prefix + k, v))
</snippet></ROW><ROW><id>13383382</id><snippet>itertools.chain</snippet></ROW><ROW><id>13383382</id><snippet>yield from</snippet></ROW><ROW><id>13383438</id><snippet>conn.headers</snippet></ROW><ROW><id>13383438</id><snippet>httplib.HTTPMessage</snippet></ROW><ROW><id>13383438</id><snippet>rfc822.Message</snippet></ROW><ROW><id>13383438</id><snippet>dict</snippet></ROW><ROW><id>13383438</id><snippet>get</snippet></ROW><ROW><id>13383438</id><snippet>contentLen = conn.headers.get('content-length','NULL')
</snippet></ROW><ROW><id>13383534</id><snippet>'\n'.join('{:^80}'.format(s) for s in Message.split('\n'))
</snippet></ROW><ROW><id>13383540</id><snippet>Popen</snippet></ROW><ROW><id>13383540</id><snippet>Popen</snippet></ROW><ROW><id>13383540</id><snippet>class DummyPopen(object):
    def __init__(self, *args, **kw):
        print('Popen({})'.format(
            ', '.join([repr(arg) for arg in args] +
                      ['{}={!r}'.format(*pair) for pair in kw.items()])))
        self.returncode = 1

    def wait(self):
        return 1

    # et cetera
</snippet></ROW><ROW><id>13383540</id><snippet>def Popen(*args, testmode=False, **kw):
    if testmode:
        return DummyPopen(*args, **kw)
    return subprocess.Popen(*args, **kw)
</snippet></ROW><ROW><id>13383540</id><snippet>if testmode:
    Popen = DummyPopen
else:
    Popen = subprocess.Popen
</snippet></ROW><ROW><id>13383540</id><snippet>Popen</snippet></ROW><ROW><id>13383540</id><snippet>Popen</snippet></ROW><ROW><id>13383540</id><snippet>isinstance()</snippet></ROW><ROW><id>13383540</id><snippet>Popen</snippet></ROW><ROW><id>13383540</id><snippet>from mymodule import Popen
</snippet></ROW><ROW><id>13383729</id><snippet>i = 0
print i
class A(object):
    global i
    i = 1
print i
class B(object):
    def Foo(self):
        global i
        i = 2
b = B()
b.Foo()
print i
</snippet></ROW><ROW><id>13383729</id><snippet>0
1
2
</snippet></ROW><ROW><id>13383745</id><snippet>PDB.PDBParser</snippet></ROW><ROW><id>13383745</id><snippet>PDB.PDBParser</snippet></ROW><ROW><id>13383745</id><snippet>Structure</snippet></ROW><ROW><id>13383745</id><snippet>line.split()</snippet></ROW><ROW><id>13383745</id><snippet>structure_builder</snippet></ROW><ROW><id>13383745</id><snippet>init_atom()</snippet></ROW><ROW><id>13383745</id><snippet>PDB.Atom</snippet></ROW><ROW><id>13383745</id><snippet>StructureBuilder</snippet></ROW><ROW><id>13383745</id><snippet>init_pqr_atom()</snippet></ROW><ROW><id>13383745</id><snippet>init_atom()</snippet></ROW><ROW><id>13383745</id><snippet>charge</snippet></ROW><ROW><id>13383745</id><snippet>radius</snippet></ROW><ROW><id>13383745</id><snippet>Atom</snippet></ROW><ROW><id>13383745</id><snippet>PDB.PQRAtom</snippet></ROW><ROW><id>13383745</id><snippet>PDB.Atom</snippet></ROW><ROW><id>13383745</id><snippet>init()</snippet></ROW><ROW><id>13383745</id><snippet>PDBParser</snippet></ROW><ROW><id>13383745</id><snippet>def __init__(self, PERMISSIVE=True, get_header=False,
         structure_builder=None, QUIET=False, is_pqr=False):
</snippet></ROW><ROW><id>13383745</id><snippet>is_pqr</snippet></ROW><ROW><id>13383745</id><snippet>_parse()</snippet></ROW><ROW><id>13383745</id><snippet>_parse_coordinates</snippet></ROW><ROW><id>13383745</id><snippet>_parse_coordinates</snippet></ROW><ROW><id>13383745</id><snippet>str.split()</snippet></ROW><ROW><id>13383745</id><snippet>Atom</snippet></ROW><ROW><id>13383745</id><snippet>PQRAtom</snippet></ROW><ROW><id>13384001</id><snippet>keyring</snippet></ROW><ROW><id>13384001</id><snippet>import keyring

username = # Obtain a stored username or ask the user
password = keyring.get_password('your_application_name', username)

if password is None or verify_password_failed:
    password = # Obtain a password from the user
    keyring.set_password('your_application_name', username, password)
</snippet></ROW><ROW><id>13384001</id><snippet>keyring</snippet></ROW><ROW><id>13384035</id><snippet>z0 = a</snippet></ROW><ROW><id>13384035</id><snippet>z0</snippet></ROW><ROW><id>13384035</id><snippet>a</snippet></ROW><ROW><id>13384035</id><snippet>z0[...] = a
</snippet></ROW><ROW><id>13384035</id><snippet>__setitem__</snippet></ROW><ROW><id>13384035</id><snippet>np.copyto</snippet></ROW><ROW><id>13384050</id><snippet>Python (flask/werkzeug)</snippet></ROW><ROW><id>13384178</id><snippet>set</snippet></ROW><ROW><id>13384178</id><snippet>pop</snippet></ROW><ROW><id>13384178</id><snippet>import random
import ast

def pop(a,accumulated=None):
    print "type q to move on to verification"
    if accumulated is None:
        accumulated = set()
    v = 'I can put any string here, as long as it is not "q" :-)'
    while v.lower() != 'q':
        b = a.pop(0)
        if b &lt;= 15:
            print 'b', b,
        elif b &gt; 15 and b &lt;=30:
            print 'i', b,
        elif b &gt; 30 and b &lt;=45:
            print 'n', b,
        elif b &gt; 45 and b &lt;=60:
            print 'g', b,
        else:
            print 'o', b,
        accumulated.add(b)
        v = raw_input('')
    return accumulated

def verify(numbers):
    new_nums = raw_input("enter numbers separated by ',': ")
    nums = ast.literal_eval(new_nums)
    assert( len(nums) == 5 ) #Need 5 numbers to win
    result = set(nums).issubset(numbers)
    print "Verified? ",result
    return result
    #alternatively, and probably slightly more efficient
    # print numbers.issuperset(nums)
    #I prefer the other though as `subset` is easier for me to remember


def robust_verify(numbers):
   """
   keep trying to verify the numbers until we succeed
   """
   try:
       verify(numbers)
   except (AssertionError,SyntaxError,TypeError):  #other error conditions might go here too, but these are the ones I can think of right now ...
       robust_verify(numbers)


def play_bingo(game_vals=None,accumulated=None):
    if game_vals is None:
        game_vals = list(range(1,76))  #list strictly not necessary here, but why not?
        random.shuffle(game_vals)

    nums = pop(game_vals,accumulated=accumulated)
    if not robust_verify(nums):
        play_bingo(game_vals=game_vals,accumulated=nums)


play_bingo()
</snippet></ROW><ROW><id>13384178</id><snippet>verify</snippet></ROW><ROW><id>13384178</id><snippet>15a,17,22,...</snippet></ROW><ROW><id>13384178</id><snippet>'w'</snippet></ROW><ROW><id>13384178</id><snippet>while</snippet></ROW><ROW><id>13384178</id><snippet>with</snippet></ROW><ROW><id>13384178</id><snippet>'a'</snippet></ROW><ROW><id>13384396</id><snippet>theta</snippet></ROW><ROW><id>13384396</id><snippet>theta</snippet></ROW><ROW><id>13384396</id><snippet>0</snippet></ROW><ROW><id>13384396</id><snippet>theta*1</snippet></ROW><ROW><id>13384396</id><snippet>theta*2</snippet></ROW><ROW><id>13384396</id><snippet>ohm</snippet></ROW><ROW><id>13384396</id><snippet>r</snippet></ROW><ROW><id>13384396</id><snippet>import math
from PIL import Image

def arrangeImagesInCircle(masterImage, imagesToArrange):
    imgWidth, imgHeight = masterImage.size

    #we want the circle to be as large as possible.
    #but the circle shouldn't extend all the way to the edge of the image.
    #If we do that, then when we paste images onto the circle, those images will partially fall over the edge.
    #so we reduce the diameter of the circle by the width/height of the widest/tallest image.
    diameter = min(
        imgWidth  - max(img.size[0] for img in imagesToArrange),
        imgHeight - max(img.size[1] for img in imagesToArrange)
    )
    radius = diameter / 2

    circleCenterX = imgWidth  / 2
    circleCenterY = imgHeight / 2
    theta = 2*math.pi / len(imagesToArrange)
    for i in range(len(imagesToArrange)):
        curImg = imagesToArrange[i]
        angle = i * theta
        dx = int(radius * math.cos(angle))
        dy = int(radius * math.sin(angle))

        #dx and dy give the coordinates of where the center of our images would go.
        #so we must subtract half the height/width of the image to find where their top-left corners should be.
        pos = (
            circleCenterX + dx - curImg.size[0]/2,
            circleCenterY + dy - curImg.size[1]/2
        )
        masterImage.paste(curImg, pos)

img = Image.new("RGB", (500,500), (255,255,255))

#red.png, blue.png, green.png are simple 50x50 pngs of solid color
imageFilenames = ["red.png", "blue.png", "green.png"] * 5
images = [Image.open(filename) for filename in imageFilenames]

arrangeImagesInCircle(img, images)

img.save("output.png")
</snippet></ROW><ROW><id>13384425</id><snippet>val1, val2 = 0.5, 1
a[a&lt;-1]= val1
a[a&gt;1] = val2
ax.imshow(a, interpolation='nearest')
</snippet></ROW><ROW><id>13384425</id><snippet>val1</snippet></ROW><ROW><id>13384425</id><snippet>val2</snippet></ROW><ROW><id>13384425</id><snippet>import matplotlib.pyplot as plt
from matplotlib import colors, cm

a = np.random.randn(10,10)

norm = colors.normalize()
cmap = cm.hsv
a_colors = cmap(norm(a))

col1 = colors.colorConverter.to_rgba('w')
col2 = colors.colorConverter.to_rgba('k')

a_colors[a&lt;-0.1,:] = col1
a_colors[a&gt;0.1,:] = col2
plt.imshow(a_colors, interpolation='nearest')
plt.show()
</snippet></ROW><ROW><id>13384528</id><snippet>screenshot</snippet></ROW><ROW><id>13384528</id><snippet>endomess</snippet></ROW><ROW><id>13384528</id><snippet>screenshot</snippet></ROW><ROW><id>13384528</id><snippet>self.parent().parent()</snippet></ROW><ROW><id>13384528</id><snippet>centralWidget</snippet></ROW><ROW><id>13384528</id><snippet>endomess</snippet></ROW><ROW><id>13385174</id><snippet>GradedComplex</snippet></ROW><ROW><id>13385174</id><snippet>GradedComplex.h</snippet></ROW><ROW><id>13385174</id><snippet>GradedComplex(int n, double *thre);
</snippet></ROW><ROW><id>13385174</id><snippet>GradedComplex</snippet></ROW><ROW><id>13385174</id><snippet>GradedComplex</snippet></ROW><ROW><id>13385174</id><snippet>GradedComplex (a);
</snippet></ROW><ROW><id>13385174</id><snippet>int</snippet></ROW><ROW><id>13385174</id><snippet>int</snippet></ROW><ROW><id>13385174</id><snippet>GradedComplex</snippet></ROW><ROW><id>13385314</id><snippet>deployment/
  __init__.py
  fabric/
    __init__.py
    database.py
    repo.py
    services.py
myproject/
  app1/
  app2/
  appN/
manage.py
fabfile.py
</snippet></ROW><ROW><id>13385314</id><snippet>deployment/fabric/database.py</snippet></ROW><ROW><id>13385314</id><snippet>django.settings_module('myproject.settings.devel')

@task
def syncdb():
    local('python manage.py syncdb --noinput')
</snippet></ROW><ROW><id>13385314</id><snippet>fabfile.py</snippet></ROW><ROW><id>13385314</id><snippet>from deployment.fabric.database import dropdb, createdb, syncdb, createuser
from deployment.fabric.something import blahblah
</snippet></ROW><ROW><id>13385314</id><snippet>fabfile.py</snippet></ROW><ROW><id>13385314</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>13385314</id><snippet>os.environ</snippet></ROW><ROW><id>13385314</id><snippet>local</snippet></ROW><ROW><id>13385314</id><snippet>subprocess.Popen('...', shell=True)</snippet></ROW><ROW><id>13385314</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>13385314</id><snippet>prefix</snippet></ROW><ROW><id>13385314</id><snippet>def syncdb():
    with prefix('export DJANGO_SETTINGS_MODULE=myproject.settings.devel'):
        local('python manage.py syncdb --noinput')
</snippet></ROW><ROW><id>13385314</id><snippet>--settings</snippet></ROW><ROW><id>13385314</id><snippet>local</snippet></ROW><ROW><id>13385314</id><snippet>@task
def syncdb():
    local('python manage.py syncdb --settings=myproject.settings.devel --noinput')
</snippet></ROW><ROW><id>13385314</id><snippet>settings_module</snippet></ROW><ROW><id>13385314</id><snippet>@task
def syncdb():
    django.settings_module('myproject.settings.devel')
    local('python manage.py syncdb --noinput')
</snippet></ROW><ROW><id>13385404</id><snippet>fam</snippet></ROW><ROW><id>13385404</id><snippet>gen</snippet></ROW><ROW><id>13385404</id><snippet>gen = ['A', ('x', 'y'), ('t', 'u'), 'B', ('y', 't'), 'B', ('a', 'z')]

result = []
lastStringSeen = None
for i in gen:
    if isinstance(i, str):
        lastStringSeen = i
    else: #must be a tuple
        result.append((lastStringSeen, i))
print result
</snippet></ROW><ROW><id>13385404</id><snippet>[('A', ('x', 'y')), ('A', ('t', 'u')), ('B', ('y', 't')), ('B', ('a', 'z'))]
</snippet></ROW><ROW><id>13385468</id><snippet>import sys
if sys.version_info.major &lt; 3:
    print("I'm only for 3, please upgrade")
    sys.exit(1)
</snippet></ROW><ROW><id>13385489</id><snippet>activate_this = '/path/to/virtualenv/bin/activate_this.py'
execfile(activate_this, dict(__file__=activate_this)

import sys
sys.path.insert(0, '/path/to/flask/appname')
sys.path.insert(0,'/home/ec2-user/hatemail')
sys.path.insert(1,'/home/ec2-user')

from badassery import app as application
</snippet></ROW><ROW><id>13385489</id><snippet>setuptools</snippet></ROW><ROW><id>13385489</id><snippet>easy_install flask
</snippet></ROW><ROW><id>13385626</id><snippet>__init__</snippet></ROW><ROW><id>13385626</id><snippet>ClassName(params)</snippet></ROW><ROW><id>13385626</id><snippet>self</snippet></ROW><ROW><id>13385626</id><snippet>PATH</snippet></ROW><ROW><id>13385626</id><snippet>ls</snippet></ROW><ROW><id>13385626</id><snippet>instance; class; superclass; superclass; ... and so on
</snippet></ROW><ROW><id>13385626</id><snippet>int i;</snippet></ROW><ROW><id>13385626</id><snippet>int i;</snippet></ROW><ROW><id>13385670</id><snippet>cv2</snippet></ROW><ROW><id>13385670</id><snippet>cv</snippet></ROW><ROW><id>13385670</id><snippet>img = cv2.imread('pic.jpg')
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
</snippet></ROW><ROW><id>13385670</id><snippet>cv</snippet></ROW><ROW><id>13385949</id><snippet>def quickSort(m, left, right):
    if right - left  &lt;= 1:
        return

    pivot = m[left]
    i = left + 1 
    j = left + 1 
    for j in range(j, right):
        if m[j] &lt;= pivot:
            m[j], m[i] = m[i], m[j]
            i += 1
    m[left], m[i-1] = m[i-1], m[left]
    quickSort(m, left, i-1)
    quickSort(m, i, right)
</snippet></ROW><ROW><id>13386025</id><snippet>import pandas as pd

def strip(text):
    try:
        return text.strip()
    except AttributeError:
        return text

def make_int(text):
    return int(text.strip('" '))

table = pd.read_table("data.csv", sep=r',',
                      names=["Year", "Make", "Model", "Description"],
                      converters = {'Description' : strip,
                                    'Model' : strip,
                                    'Make' : strip,
                                    'Year' : make_int})
print(table)
</snippet></ROW><ROW><id>13386025</id><snippet>   Year     Make   Model              Description
0  1997     Ford    E350                     None
1  1997     Ford    E350                     None
2  1997     Ford    E350   Super, luxurious truck
3  1997     Ford    E350  Super "luxurious" truck
4  1997     Ford    E350    Super luxurious truck
5  1997     Ford    E350                     None
6  1997     Ford    E350                     None
7  2000  Mercury  Cougar                     None
</snippet></ROW><ROW><id>13386109</id><snippet>import sys
from PyQt4.QtGui import QApplication
from PyQt4.QtCore import QUrl
from PyQt4.QtWebKit import QWebView


class Browser(QWebView):

    def __init__(self):
        QWebView.__init__(self)
        self.loadFinished.connect(self._result_available)

    def _result_available(self, ok):
        frame = self.page().mainFrame()
        print unicode(frame.toHtml()).encode('utf-8')

if __name__ == '__main__':
    app = QApplication(sys.argv)
    view = Browser()
    view.load(QUrl('http://www.google.com'))
    app.exec_()
</snippet></ROW><ROW><id>13386158</id><snippet>C++</snippet></ROW><ROW><id>13386158</id><snippet>class A:
    def __init__(self):
        self.test = ''
        self.func("test")
        print(self.test)
    def func(self,var):
        setattr(self,var,'foo')
</snippet></ROW><ROW><id>13386158</id><snippet>self.test</snippet></ROW><ROW><id>13386158</id><snippet>def func1(x):
   x.append('foo')
def func2(x):
   x = 'foo'

a = []
func1(a)
print a #['foo']  #mutated a in func1
func2(a)
print a #['foo']  #didn't change a in func2, only created a new local variable named `x` and assigned it to the string 'foo'
</snippet></ROW><ROW><id>13386158</id><snippet>self</snippet></ROW><ROW><id>13386158</id><snippet>var</snippet></ROW><ROW><id>13386158</id><snippet>self</snippet></ROW><ROW><id>13386158</id><snippet>func</snippet></ROW><ROW><id>13386158</id><snippet>setattr</snippet></ROW><ROW><id>13386158</id><snippet>self.test = "foo"
</snippet></ROW><ROW><id>13386158</id><snippet>self.func(self.test)
</snippet></ROW><ROW><id>13386158</id><snippet>_</snippet></ROW><ROW><id>13386158</id><snippet>__</snippet></ROW><ROW><id>13386233</id><snippet>sqlite3.Row</snippet></ROW><ROW><id>13386298</id><snippet>import os
print os.getcwd()
</snippet></ROW><ROW><id>13386298</id><snippet>'config.cfg'</snippet></ROW><ROW><id>13386298</id><snippet># inside of test.py
import os
config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                           'config.cfg')
</snippet></ROW><ROW><id>13386447</id><snippet>find()</snippet></ROW><ROW><id>13386447</id><snippet>if error_code == 554 and error_msg.find('Address blacklisted') &gt;= 0:
    # handle blacklisting
else: 
    ...
</snippet></ROW><ROW><id>13386587</id><snippet>C:\\Program Files (x86)\\Google\\google_appengine
</snippet></ROW><ROW><id>13386678</id><snippet>import dbus

path = '/dev/fd0'

bus = dbus.SystemBus()

if not isinstance(path, dbus.ObjectPath):
    manager_obj = bus.get_object('org.freedesktop.UDisks',
                                 '/org/freedesktop/UDisks')
    manager = dbus.Interface(manager_obj, 'org.freedesktop.UDisks')
    path = manager.FindDeviceByDeviceFile(path)

proxy = bus.get_object('org.freedesktop.UDisks', path)
dev = dbus.Interface(proxy, 'org.freedesktop.UDisks.Device')
dev.FilesystemUnmount('')
</snippet></ROW><ROW><id>13386721</id><snippet>__init__</snippet></ROW><ROW><id>13386738</id><snippet>import datetime
print datetime.timedelta(seconds=5000000)

57 days, 20:53:20
</snippet></ROW><ROW><id>13386784</id><snippet> [k for k, v in dict.items() if all((x in v) for x in b)]
</snippet></ROW><ROW><id>13386784</id><snippet>&gt;&gt;&gt; b=['m','NN']
&gt;&gt;&gt; dict={'b':['NN','m','big'], 'a':['NN', 'q']}
&gt;&gt;&gt; [k for k, v in dict.items() if all((x in v) for x in b)]
['b']
</snippet></ROW><ROW><id>13386784</id><snippet>dict</snippet></ROW><ROW><id>13386784</id><snippet>dict</snippet></ROW><ROW><id>13386844</id><snippet>repr()</snippet></ROW><ROW><id>13386844</id><snippet>list</snippet></ROW><ROW><id>13386844</id><snippet>import itertools
print list(itertools.combinations('12345', 3))
</snippet></ROW><ROW><id>13386869</id><snippet>coll.find(
  { $or : [ 
      { "coordinates.type" : "Point" }, 
      { "place.bounding_box.type" : "Polygon" } 
    ] 
  },
  {"coordinates" :1, "place.bounding_box.coordinates" : 1}
)
</snippet></ROW><ROW><id>13386916</id><snippet>Series.resample()</snippet></ROW><ROW><id>13386916</id><snippet>loffset=</snippet></ROW><ROW><id>13386916</id><snippet>closed=</snippet></ROW><ROW><id>13386916</id><snippet>In [1]: import numpy as np, pandas as pd

In [2]: data = np.arange(1, 13)

In [3]: s = pd.Series(data, pd.date_range(start='1/31/2007', periods=len(data), freq='M'))

In [4]: s.resample('6M', how='sum', closed='left', loffset='-1M')
Out[4]: 
2007-06-30    21
2007-12-31    57
</snippet></ROW><ROW><id>13386916</id><snippet>loffset='-1M'</snippet></ROW><ROW><id>13386916</id><snippet>closed='left'</snippet></ROW><ROW><id>13386916</id><snippet>closed='right'</snippet></ROW><ROW><id>13386916</id><snippet>how='sum'</snippet></ROW><ROW><id>13386916</id><snippet>how</snippet></ROW><ROW><id>13387667</id><snippet>self.path = "/cgi-bin/todolist.cgi"
</snippet></ROW><ROW><id>13387667</id><snippet>self.path = "/cgi-bin/todolist.py"
</snippet></ROW><ROW><id>13388061</id><snippet>0j</snippet></ROW><ROW><id>13388061</id><snippet>complex</snippet></ROW><ROW><id>13388061</id><snippet>&gt;&gt;&gt; 0j
0j
</snippet></ROW><ROW><id>13388061</id><snippet>1j * -1</snippet></ROW><ROW><id>13388061</id><snippet>(1j * -1).real == 0.0</snippet></ROW><ROW><id>13388061</id><snippet>phase</snippet></ROW><ROW><id>13388061</id><snippet>&gt;&gt;&gt; phase(complex(-1.0, 0.0))
3.141592653589793
&gt;&gt;&gt; phase(complex(-1.0, -0.0))
-3.141592653589793
</snippet></ROW><ROW><id>13388219</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; f = urllib2.urlopen('http://www.python.org/')
&gt;&gt;&gt; print f.read(100)
</snippet></ROW><ROW><id>13388374</id><snippet>coroutine.py</snippet></ROW><ROW><id>13388374</id><snippet>grep</snippet></ROW><ROW><id>13388374</id><snippet>grep</snippet></ROW><ROW><id>13388374</id><snippet>yield</snippet></ROW><ROW><id>13388374</id><snippet>yield</snippet></ROW><ROW><id>13388374</id><snippet>send</snippet></ROW><ROW><id>13388374</id><snippet>grep</snippet></ROW><ROW><id>13388374</id><snippet>@coroutine
def someroutine():
    with open('test.txt', 'a') as f:
        yield
        f.write('A')
    while True:
        yield
    yield 0

routine = someroutine()
print 'I am working in parallel!'
routine.send()
print 'But only cooperatively...'
routine.send()
</snippet></ROW><ROW><id>13388374</id><snippet>grep</snippet></ROW><ROW><id>13388374</id><snippet>yield</snippet></ROW><ROW><id>13388374</id><snippet>threading</snippet></ROW><ROW><id>13388374</id><snippet>multiprocessing</snippet></ROW><ROW><id>13388374</id><snippet>yield</snippet></ROW><ROW><id>13388374</id><snippet>def someroutine():
    with open('test.txt', 'a') as f:
        f.write('A')
    while True:
        pass
    return 0

routine = threading.Thread(someroutine)
print 'I am working in parallel!'
</snippet></ROW><ROW><id>13388710</id><snippet>LOGIN_REDIRECT_URL = '/mystartapp/index.html'</snippet></ROW><ROW><id>13388710</id><snippet>contrib.auth</snippet></ROW><ROW><id>13388710</id><snippet>LOGIN_URL</snippet></ROW><ROW><id>13388710</id><snippet>LOGIN_REDIRECT_URL</snippet></ROW><ROW><id>13388710</id><snippet>django-solr</snippet></ROW><ROW><id>13388710</id><snippet>django-registration</snippet></ROW><ROW><id>13388738</id><snippet>print 'string'</snippet></ROW><ROW><id>13388738</id><snippet>print('string')</snippet></ROW><ROW><id>13388915</id><snippet>#!/usr/bin/env python
import itertools
import time
from flask import Flask, Response, redirect, request, url_for

app = Flask(__name__)

@app.route('/')
def index():
    if request.headers.get('accept') == 'text/event-stream':
        def events():
            for i, c in enumerate(itertools.cycle('\|/-')):
                yield "data: %s %d\n\n" % (c, i)
                time.sleep(.1)  # an artificial delay
        return Response(events(), content_type='text/event-stream')
    return redirect(url_for('static', filename='index.html'))

if __name__ == "__main__":
    app.run(host='localhost', port=23423)
</snippet></ROW><ROW><id>13388915</id><snippet>static/index.html</snippet></ROW><ROW><id>13388915</id><snippet>&lt;!doctype html&gt;
&lt;title&gt;Server Send Events Demo&lt;/title&gt;
&lt;style&gt;
  #data {
    text-align: center;
  }
&lt;/style&gt;
&lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
&lt;script&gt;
if (!!window.EventSource) {
  var source = new EventSource('/');
  source.onmessage = function(e) {
    $("#data").text(e.data);
  }
}
&lt;/script&gt;
&lt;div id="data"&gt;nothing received yet&lt;/div&gt;
</snippet></ROW><ROW><id>13388915</id><snippet>'text/event-stream'</snippet></ROW><ROW><id>13388915</id><snippet>source.close()</snippet></ROW><ROW><id>13388915</id><snippet>&lt;iframe&gt;</snippet></ROW><ROW><id>13388915</id><snippet>#!/usr/bin/env python
import time
from flask import Flask, Response

app = Flask(__name__)


@app.route('/')
def index():
    def g():
        yield """&lt;!doctype html&gt;
&lt;title&gt;Send javascript snippets demo&lt;/title&gt;
&lt;style&gt;
  #data {
    text-align: center;
  }
&lt;/style&gt;
&lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
&lt;div id="data"&gt;nothing received yet&lt;/div&gt;
"""

        for i, c in enumerate("hello"):
            yield """
&lt;script&gt;
  $("#data").text("{i} {c}")
&lt;/script&gt;
""".format(i=i, c=c)
            time.sleep(1)  # an artificial delay
    return Response(g())


if __name__ == "__main__":
    app.run(host='localhost', port=23423)
</snippet></ROW><ROW><id>13388915</id><snippet>#!/usr/bin/env python
import time
from flask import Flask, Response

app = Flask(__name__)


def stream_template(template_name, **context):
    # http://flask.pocoo.org/docs/patterns/streaming/#streaming-from-templates
    app.update_template_context(context)
    t = app.jinja_env.get_template(template_name)
    rv = t.stream(context)
    # uncomment if you don't need immediate reaction
    ##rv.enable_buffering(5)
    return rv


@app.route('/')
def index():
    def g():
        for i, c in enumerate("hello"*10):
            time.sleep(.1)  # an artificial delay
            yield i, c
    return Response(stream_template('index.html', data=g()))


if __name__ == "__main__":
    app.run(host='localhost', port=23423)
</snippet></ROW><ROW><id>13388915</id><snippet>templates/index.html</snippet></ROW><ROW><id>13388915</id><snippet>&lt;!doctype html&gt;
&lt;title&gt;Send javascript with template demo&lt;/title&gt;
&lt;style&gt;
  #data {
    text-align: center;
  }
&lt;/style&gt;
&lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt;
&lt;div id="data"&gt;nothing received yet&lt;/div&gt;
{% for i, c in data: %}
&lt;script&gt;
  $("#data").text("{{ i }} {{ c }}")
&lt;/script&gt;
{% endfor %}
</snippet></ROW><ROW><id>13389036</id><snippet>import operator
def eval_prefix(expr):
    d = {'+': operator.add,
         '-': operator.sub,
         '*': operator.mul,
         '/': operator.div, # for 3.x change this to operator.truediv
         '%': operator.mod}
    for n in range(10):
        d[str(n)] = n
    e = list(d.get(e, None) for e in expr)
    i = 0
    while i + 3 &lt;= len(e):
        o, l, r = e[i:i+3]
        if type(o) == type(operator.add) and type(l) == type(r) == type(0):
            e[i:i+3] = [o(l, r)]
            i = 0
        else:
            i += 1
    if len(e) != 1:
        print 'Error in expression:', expr
        return 0
    else:
        return e[0]

def test(s, v):
    r = eval_prefix(s)
    print s, '==', v, r, r == v

test("+34", 7)
test("*-567", -7)
test("-*33+2+11", 5)
test("-+5*+1243", 14)
test("*+35-72", 40)
test("%3/52", 1)
test("****", 0)
test("-5bob", 10)
</snippet></ROW><ROW><id>13389058</id><snippet>def init():
    line.set_ydata(U[1,:])
    return line
</snippet></ROW><ROW><id>13389219</id><snippet>print self.get_argument('ihack')</snippet></ROW><ROW><id>13389219</id><snippet> cursor.execute("SELECT * FROM user_info WHERE email = %s", email)
</snippet></ROW><ROW><id>13389219</id><snippet> cursor.execute("SELECT * FROM user_info WHERE email = %s" % email)   # BAD!
</snippet></ROW><ROW><id>13389297</id><snippet>import ConfigParser
import os
from HTMLParser import HTMLParser

c = imaplib_connect.open_connection()
try:
    config = ConfigParser.ConfigParser()
    config.read([os.path.expanduser('~/reader.config')])
    ML = MLStripper()
    test = ML.strip_tags("&lt;br&gt;testing&lt;/br&gt;")
    print test
</snippet></ROW><ROW><id>13389510</id><snippet>def __init__(self, list = [0,0,0,0,0,0,0,0,0,0])</snippet></ROW><ROW><id>13389510</id><snippet>None</snippet></ROW><ROW><id>13389510</id><snippet>def __init__(self, values=None):
    if values is None:
        values = [0] * 10
</snippet></ROW><ROW><id>13389510</id><snippet>list</snippet></ROW><ROW><id>13389510</id><snippet>list</snippet></ROW><ROW><id>13389580</id><snippet>b = soup.b
results = []
result = str()
while b != None:
    try:
        if b.name == 'b':
            results.append(result)
            result = b.text
    except AttributeError:
        result = result + b
    b = b.nextSibling
results.append(result)
</snippet></ROW><ROW><id>13389580</id><snippet>b.nextSibling</snippet></ROW><ROW><id>13389580</id><snippet>NavigableString</snippet></ROW><ROW><id>13389580</id><snippet>&lt;\br&gt;</snippet></ROW><ROW><id>13389580</id><snippet>Tag</snippet></ROW><ROW><id>13389580</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>13389580</id><snippet>.name</snippet></ROW><ROW><id>13389580</id><snippet>Tag</snippet></ROW><ROW><id>13389580</id><snippet>NavigatableString</snippet></ROW><ROW><id>13389580</id><snippet>b.nextSibling</snippet></ROW><ROW><id>13389580</id><snippet>None</snippet></ROW><ROW><id>13389808</id><snippet>ix</snippet></ROW><ROW><id>13389808</id><snippet>s['b'].ix[1:10]
# 1   -0.713173
# 2    1.280302
# 4   -0.667083
</snippet></ROW><ROW><id>13389808</id><snippet>.ix</snippet></ROW><ROW><id>13389812</id><snippet>lib.client</snippet></ROW><ROW><id>13389812</id><snippet>import lib.client</snippet></ROW><ROW><id>13389812</id><snippet>A = lib.client.client()</snippet></ROW><ROW><id>13389812</id><snippet>from lib.client import client
A = client()
</snippet></ROW><ROW><id>13389979</id><snippet> self.fields['attribute'].queryset = self.instance.attribute.all()
</snippet></ROW><ROW><id>13390014</id><snippet>import os
import re
import urllib
import urllib2

from BeautifulSoup import BeautifulSoup

websites = [
    'http://cdn.superantispyware.com/SUPERAntiSpyware.exe'
    'http://support.kaspersky.com/downloads/utils/tdsskiller.exe'
    'http://www.bleepingcomputer.com/download/malwarebytes-anti-malware/dl/7/?1'
    'http://www.simplysup.com/tremover/download.html'
]

download_links = []

for url in websites:
    connection = urllib2.urlopen(url)
    soup = BeautifulSoup(connection)
    connection.close()

    for link in soup.findAll('a', {href: re.compile(r'\.exe$')}):
        download_links.append(link['href'])

for url in download_links:
    urllib.urlretrieve(url, r'C:\_VirusFixes', os.path.basename(url))
</snippet></ROW><ROW><id>13390023</id><snippet>"%s%d" % (" " * (4 - len(str(y))), y)
</snippet></ROW><ROW><id>13390083</id><snippet>quopri.decodestring()</snippet></ROW><ROW><id>13390083</id><snippet>import quopri

decoded = quopri.decodestring(emailMessage.get_payload())
</snippet></ROW><ROW><id>13390083</id><snippet>&gt;</snippet></ROW><ROW><id>13390083</id><snippet>import re

chevrons = re.compile("(?m)^[&gt; ]*")
stripped = re.sub(chevrons, "", decoded)
</snippet></ROW><ROW><id>13390083</id><snippet>(?m)</snippet></ROW><ROW><id>13390090</id><snippet>    def setUp(self):
        profile = webdriver.firefox.firefox_profile.FirefoxProfile()
        profile.default_preferences["webdriver_assume_untrusted_issuer"] = 'false'
        profile.update_preferences()
        self.driver = webdriver.Firefox(profile)
</snippet></ROW><ROW><id>13390240</id><snippet>@classmethod</snippet></ROW><ROW><id>13390240</id><snippet>self</snippet></ROW><ROW><id>13390240</id><snippet>shout</snippet></ROW><ROW><id>13390240</id><snippet>cls</snippet></ROW><ROW><id>13390240</id><snippet>@classmethod</snippet></ROW><ROW><id>13390240</id><snippet>k.shout()</snippet></ROW><ROW><id>13390240</id><snippet>Kid.shout()</snippet></ROW><ROW><id>13390300</id><snippet>class A(Base):
    __tablename__ = "A"
    id = Column(Integer, primary_key=True)
    word = Column(String)

    def __init__(self):
        self.word = "adefault"

a = A()
print a.word
</snippet></ROW><ROW><id>13390300</id><snippet>__init__</snippet></ROW><ROW><id>13390349</id><snippet>class Project(models.Model):
    name = models.CharField(max_length=100)
    users = models.ManyToManyField(User)

class Task(models.Model):
    project = models.ForeignKey(Project, related_name='project_tasks')
    name = models.CharField(max_length=300)
    assignee = models.ForeignKey(User, related_name='tasks')
</snippet></ROW><ROW><id>13390349</id><snippet>p = Project.objects.get(name='myproject')
users = p.users.all()
</snippet></ROW><ROW><id>13390349</id><snippet>users = p.project_tasks.all()  # Because of `related_name` in Task.project
</snippet></ROW><ROW><id>13390349</id><snippet>u = User.objects.get(username='someuser')
u.tasks.all()  # Because of `related_name` in Task.assignee
</snippet></ROW><ROW><id>13390349</id><snippet>ForeignKey</snippet></ROW><ROW><id>13390349</id><snippet>name</snippet></ROW><ROW><id>13390349</id><snippet>Project_Name</snippet></ROW><ROW><id>13390475</id><snippet>2.</snippet></ROW><ROW><id>13390475</id><snippet>2.__add__</snippet></ROW><ROW><id>13390475</id><snippet>(2).__add__(3)</snippet></ROW><ROW><id>13390475</id><snippet>In [254]: (2).__add__(3)
Out[254]: 5
</snippet></ROW><ROW><id>13390506</id><snippet>outer</snippet></ROW><ROW><id>13390506</id><snippet>In [260]: import numpy as np
In [255]: a = np.arange(1,7)

In [256]: a
Out[256]: array([1, 2, 3, 4, 5, 6])

In [259]: np.add.outer(a,a)
Out[259]: 
array([[ 2,  3,  4,  5,  6,  7],
       [ 3,  4,  5,  6,  7,  8],
       [ 4,  5,  6,  7,  8,  9],
       [ 5,  6,  7,  8,  9, 10],
       [ 6,  7,  8,  9, 10, 11],
       [ 7,  8,  9, 10, 11, 12]])
</snippet></ROW><ROW><id>13390689</id><snippet>[2, 2, 2, 3]</snippet></ROW><ROW><id>13390689</id><snippet>[2] + [2, 2, 3]</snippet></ROW><ROW><id>13390689</id><snippet>[2, 2] + [2, 3]</snippet></ROW><ROW><id>13390689</id><snippet>[2] + [2] + [2, 3]</snippet></ROW><ROW><id>13390689</id><snippet>[3] + [2] + [2, 2]</snippet></ROW><ROW><id>13390689</id><snippet>2 * 12</snippet></ROW><ROW><id>13390689</id><snippet>4 * 6</snippet></ROW><ROW><id>13390689</id><snippet>2 * 2 * 6</snippet></ROW><ROW><id>13390689</id><snippet>3 * 2 * 4</snippet></ROW><ROW><id>13390689</id><snippet>1 * n</snippet></ROW><ROW><id>13390719</id><snippet>cd ~
wget https://raw.github.com/pypa/virtualenv/master/virtualenv.py
python virtualenv.py newenv
cd newenv
source bin/activate
pip install lxml    
</snippet></ROW><ROW><id>13391080</id><snippet>class ModelB(models.Model):
  user = models.ForeignKey(User)
  modelA = models.ForeignKey('ModelA', related_name = 'modelbs')
  other_field = models.CharField(max_length=50)

  def clean(self):
    if (self.modelA.modelbs.all().count() &gt; 2):
        raise ValidationError(
            "ModelA may create may only create 3 modelBs "
        )
    super(ModelB, self).clean()


class ModelA(models.Model):
  user = models.ForeignKey(User, related_name = 'modelas')
  other_field = models.CharField(max_length=50)

  def clean(self):
    if (self.user.modelas.all().count() &gt; 2):
        raise ValidationError(
            "User may create may only create 3 modelAs "
        )
    super(ModelA, self).clean()
</snippet></ROW><ROW><id>13391107</id><snippet>extent</snippet></ROW><ROW><id>13391107</id><snippet>position</snippet></ROW><ROW><id>13391107</id><snippet>extent=[xmin, xmax, ymin, ymax]</snippet></ROW><ROW><id>13391107</id><snippet>extent=[xslice.start, xslice.stop+1, yslice.start, yslice.stop+1]
plt.contour(mask[xslice, yslice], extent=extent)
</snippet></ROW><ROW><id>13391107</id><snippet>origin</snippet></ROW><ROW><id>13391107</id><snippet>x, y = np.mgrid[xslice, yslice]
plt.contour(x, y, mask[xslcie, yslice])
</snippet></ROW><ROW><id>13391107</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm

data = np.random.random((100,100))

xslice, yslice = slice(20, 30), slice(45, 65)

plt.imshow(data, cmap=cm.gray)

x, y = np.mgrid[xslice, yslice]
plt.contour(x, y, data[xslice, yslice])

plt.show()
</snippet></ROW><ROW><id>13391195</id><snippet>isPrime</snippet></ROW><ROW><id>13391195</id><snippet>def primes(n=2): # don't provide a different n value, or you will get odd results
    yield n
    yield from filter(lambda x: x % n, primes(n+1))
</snippet></ROW><ROW><id>13391195</id><snippet>yield from</snippet></ROW><ROW><id>13391195</id><snippet>filter</snippet></ROW><ROW><id>13391195</id><snippet>itertools.ifilter</snippet></ROW><ROW><id>13391195</id><snippet>&gt;&gt;&gt; for p in primes():
    print(p)
    if p &gt; 100:
        break


2
3
5
7
11
13
17
19
23
29
31
37
41
43
47
53
59
61
67
71
73
79
83
89
97
101
</snippet></ROW><ROW><id>13391285</id><snippet>)</snippet></ROW><ROW><id>13391285</id><snippet>*value</snippet></ROW><ROW><id>13391285</id><snippet>cols=</snippet></ROW><ROW><id>13391285</id><snippet>cols=['409452,  12345', '', '', 'This a test python script']

TEMPLATE = ['  &lt;tr&gt;']
for col in cols:
    if "," in col:
        value = col.split(",")
        value[:] = ['&lt;a href=http://data/{0}&gt;{0}&lt;/a&gt;'.format(id.strip()) for id in value]
        col = ','.join(value)
    TEMPLATE.append('    &lt;td&gt;{}&lt;/td&gt;'.format(col))
TEMPLATE.append('  &lt;/tr&gt;')
TEMPLATE = '\n'.join(TEMPLATE)
print TEMPLATE
</snippet></ROW><ROW><id>13391285</id><snippet>  &lt;tr&gt;
    &lt;td&gt;&lt;a href=http://data/409452&gt;409452&lt;/a&gt;,&lt;a href=http://data/12345&gt;12345&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;This a test python script&lt;/td&gt;
 &lt;/tr&gt;
</snippet></ROW><ROW><id>13391319</id><snippet>{"term" : 1} == events
</snippet></ROW><ROW><id>13391409</id><snippet>itertools.zip_longest</snippet></ROW><ROW><id>13391409</id><snippet>itertools.groupby</snippet></ROW><ROW><id>13391409</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>13391409</id><snippet>"a"</snippet></ROW><ROW><id>13391409</id><snippet>"b"</snippet></ROW><ROW><id>13391409</id><snippet>None</snippet></ROW><ROW><id>13391409</id><snippet>&gt;&gt;&gt; [item for item in itertools.chain.from_iterable(itertools.zip_longest(*[list(x) for _, x in itertools.groupby(to_be)])) if item]
['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'b', 'd', 'd']
</snippet></ROW><ROW><id>13391409</id><snippet>&gt;&gt;&gt; groups = itertools.zip_longest(*[list(x) for _, x in itertools.groupby(to_be)])
&gt;&gt;&gt; [item for item in itertools.chain.from_iterable(groups) if item]
['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'b', 'd', 'd']
</snippet></ROW><ROW><id>13391409</id><snippet>izip_longest()</snippet></ROW><ROW><id>13391409</id><snippet>if item is not None</snippet></ROW><ROW><id>13391409</id><snippet>None</snippet></ROW><ROW><id>13391409</id><snippet>roundrobin()</snippet></ROW><ROW><id>13391409</id><snippet>&gt;&gt;&gt; list(roundrobin(*[list(x) for _, x in itertools.groupby(to_be)]))
['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'b', 'd', 'd']
</snippet></ROW><ROW><id>13391409</id><snippet>groupby()</snippet></ROW><ROW><id>13391411</id><snippet>FILTER(?personuri != &lt;"""+imURI+"""&gt;)
</snippet></ROW><ROW><id>13391411</id><snippet>str()</snippet></ROW><ROW><id>13391632</id><snippet>external_c_function(byref(mystruct,MyStruct.data.offset))
</snippet></ROW><ROW><id>13391657</id><snippet>&gt;&gt;&gt; not_macs_buffer=         unhexlify("5ce7e615ff0000000000010202041f0140009e005d006404084c5ce82215ff1d02000000010202041      f013b0097005c005e04777c")
&gt;&gt;&gt; StatusStr = chr(0)
&gt;&gt;&gt; for i in xrange(0,len(not_macs_buffer)):
...     StatusStr +=chr(ord(not_macs_buffer[i]))
</snippet></ROW><ROW><id>13391850</id><snippet>re.findall()</snippet></ROW><ROW><id>13391850</id><snippet>re.findall(r'href="([^"]+).*class="vip" title=\'([^\']+)', lines):
</snippet></ROW><ROW><id>13391850</id><snippet>r</snippet></ROW><ROW><id>13391850</id><snippet>href="([^"]+)
</snippet></ROW><ROW><id>13391850</id><snippet>[^"]+</snippet></ROW><ROW><id>13391850</id><snippet>.*class="vip"
</snippet></ROW><ROW><id>13391850</id><snippet>.*</snippet></ROW><ROW><id>13391850</id><snippet>class="vip"</snippet></ROW><ROW><id>13391850</id><snippet>title=\'([^\']+)', lines):
</snippet></ROW><ROW><id>13391850</id><snippet>title</snippet></ROW><ROW><id>13391850</id><snippet>(my_matched_link, my_matched_title)</snippet></ROW><ROW><id>13391850</id><snippet>for url, title</snippet></ROW><ROW><id>13391858</id><snippet>&gt;&gt;&gt; new = {}
&gt;&gt;&gt; for k,v in tagdictNNS.items():
        new[k] = len(tagdictNNS[k])
&gt;&gt;&gt; new
{'NNS$-TL-HL': 1, 'NNS-HL': 5, 'NNS$-HL': 4, 'NNS-TL': 5, 'NNS-TL-HL': 5, 'NNS+MD': 2,      'NNS$-NC': 1, 'NNS-TL-NC': 1, 'NNS$-TL': 5, 'NNS': 5, 'NNS$': 5, 'NNS-NC': 5}
</snippet></ROW><ROW><id>13391858</id><snippet>&gt;&gt;&gt; sorted(new.items(), key=itemgetter(1), reverse=True)[:2]
[('NNS-HL', 5), ('NNS-TL', 5)]
</snippet></ROW><ROW><id>13392056</id><snippet>set.intersection</snippet></ROW><ROW><id>13392056</id><snippet>g1 = set(['1a', '1b', '1c', '1d'])
g2 = set(['2e', '2f'])
g3 = set(['3g', '3h', '3i'])
g4 = set(['4j', '4k', '4l', '4m', '4n'])

sets = [g1,g2,g3,g4]
test_this = ['1a','2e','3g','4j']

all(len(s.intersection(test_this)) &lt;= 1 for s in sets)
</snippet></ROW><ROW><id>13392056</id><snippet>test_this</snippet></ROW><ROW><id>13392056</id><snippet>g1 = ['1a', '1b', '1c', '1d']
g2 = ['2e', '2f']
g3 = ['3g', '3h', '3i']
g4 = ['4j', '4k', '4l', '4m', '4n']
lists = [g1,g2,g3,g4]
test_this = set(['1a','2e','3g','4j'])

all( len(test_this.intersection(lst)) &lt;= 1 for lst in lists )
</snippet></ROW><ROW><id>13392056</id><snippet>all</snippet></ROW><ROW><id>13392127</id><snippet>sys.path</snippet></ROW><ROW><id>13392127</id><snippet>myModule.py</snippet></ROW><ROW><id>13392127</id><snippet>from myApp.myPackage import myModule
import myApp.myPackage.myModule as sameModule
import myPackage.myModule
print myModule is sameModule
print myModule is myPackage.myModule
</snippet></ROW><ROW><id>13392127</id><snippet>True</snippet></ROW><ROW><id>13392127</id><snippet>False</snippet></ROW><ROW><id>13392127</id><snippet>sys.modules</snippet></ROW><ROW><id>13392127</id><snippet>sys.modules</snippet></ROW><ROW><id>13392127</id><snippet>sys.modules</snippet></ROW><ROW><id>13392668</id><snippet>ISC_status</snippet></ROW><ROW><id>13392668</id><snippet>import wx

class ISC_status(wx.Panel):
    def __init__(self, parent, id=wx.ID_ANY):
        wx.Panel.__init__(self, parent, id, style=wx.SUNKEN_BORDER)
        self.initGUI()
# NOTE: remove next line for 'best fit' instead of 275x200
        self.SetMinSize((275, 200))
        self.Layout()
        self.Show()

    def initGUI(self):
# NOTE: here you created an additional (inner) panel
        #main container panel for all of the ISC status information
        sizer = wx.BoxSizer(wx.VERTICAL)
        #make the three individual checkboxes
        self.superviseCheck = wx.CheckBox(self,-1,'Supervisory Trouble')
        self.pirCheck = wx.CheckBox(self,-1,'PIR Activity')
        self.tamperCheck = wx.CheckBox(self,-1,'Tamper Tripped')
        #make the MAC hbox section
        self.macHbox = wx.BoxSizer(wx.HORIZONTAL)
        self.macLabel = wx.StaticText(self,-1,'MAC ADDR: ')
        macFont1 = wx.Font(10, wx.FONTFAMILY_DEFAULT,wx.FONTSTYLE_NORMAL,wx.FONTWEIGHT_BOLD)
        self.macLabel.SetFont(macFont1)
        macFont2 = wx.Font(10, wx.FONTFAMILY_DEFAULT,wx.FONTSTYLE_NORMAL,wx.FONTWEIGHT_NORMAL)
        self.macAddr = wx.StaticText(self,-1,'001CFAF10009F1EE')
        self.macAddr.SetFont(macFont2)
        self.macHbox.Add(self.macLabel,0,wx.RIGHT,5)
        self.macHbox.Add(self.macAddr,0,0,0)
        #make the low battery hbox section
        self.lowBatCheck = wx.CheckBox(self,-1,'Low Battery Voltage')
        self.batVoltText = wx.StaticText(self,-1, '9.9V')
        self.lowBatHbox = wx.BoxSizer(wx.HORIZONTAL)
        self.lowBatHbox.Add(self.lowBatCheck, 0,wx.RIGHT,20)
        self.lowBatHbox.Add(self.batVoltText, 0,wx.ALL,0)
        #make the pirCount hbox section
        self.pirCountHbox = wx.BoxSizer(wx.HORIZONTAL)
        self.pirCountNumber = 3
        self.pirLabel = wx.StaticText(self,-1,'PIR Count: ')
        self.pirCount = wx.StaticText(self,-1,str(self.pirCountNumber))
        self.pirReset = wx.Button(self,-1,label='Reset PIR Count')
        self.pirCountHbox.Add(self.pirLabel,0,wx.RIGHT,3)
        self.pirCountHbox.Add(self.pirCount,0,wx.RIGHT, 40)
        self.pirCountHbox.Add(self.pirReset,0,wx.ALIGN_RIGHT,0)
        self.pirReset.Bind(wx.EVT_BUTTON,self.resetPIR)
        #add all the parts to the main vbox
        sizer.Add(self.macHbox,0,wx.ALL,5)
        sizer.Add(self.superviseCheck,0,wx.ALL,5)
        sizer.Add(self.lowBatHbox,0,wx.ALL,5)
        sizer.Add(self.tamperCheck,0,wx.ALL,5)
        sizer.Add(self.pirCheck,0,wx.ALL,5)
        sizer.Add(self.pirCountHbox,0,wx.ALL,5)
# NOTE: here you set the sizer to the inner panel but there was
#       no sizer to connect it to ISC_status itself so it was
#       unreachable for the main frame and the layout was ignored
        self.SetSizer(sizer)

    def resetPIR(self,event):
        pass

    def updateOnSerial(self,flags):
        pass

class TestFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        sizer = wx.BoxSizer(wx.VERTICAL)
        row = wx.BoxSizer(wx.HORIZONTAL)
# NOTE: set proportion to 0 if you want them 'fixed size'
        row.Add(ISC_status(self),1,wx.ALL,5)
        row.Add(ISC_status(self),1,wx.ALL,5)
        sizer.Add(row,0,wx.EXPAND)
        self.SetSizerAndFit(sizer)

app = wx.PySimpleApp()
frame = TestFrame().Show()
app.MainLoop()
</snippet></ROW><ROW><id>13392688</id><snippet>|</snippet></ROW><ROW><id>13392688</id><snippet>from mako.template import Template
from rst2pdf.createpdf import RstToPdf

mytext = """This is the first line
Then there is a second
Then a third
    How about an indent?

I'd like it to maintain the formatting."""

template = """
&lt;%!
def wrap(text):
    return text.replace("\\n", "\\n| ")
%&gt;

My PDF Document
===============

It starts with a paragraph, but after this I'd like to insert `mytext`. 
It should keep the formatting intact.

| ${mytext | wrap}

"""

mytemplate = Template(template)
pdf = RstToPdf()
#print mytemplate.render(mytext=mytext)
pdf.createPdf(text=mytemplate.render(mytext=mytext),output='foo.pdf')
</snippet></ROW><ROW><id>13393442</id><snippet>int</snippet></ROW><ROW><id>13393442</id><snippet>numpy</snippet></ROW><ROW><id>13393442</id><snippet>ndarray</snippet></ROW><ROW><id>13393442</id><snippet>numpy.int32</snippet></ROW><ROW><id>13393442</id><snippet>import numpy as np
a = np.zeros(5000,dtype=np.int32)
</snippet></ROW><ROW><id>13393442</id><snippet>4*5000 = 20000</snippet></ROW><ROW><id>13393801</id><snippet>entity.logo.save</snippet></ROW><ROW><id>13393801</id><snippet>django.core.files.File</snippet></ROW><ROW><id>13393801</id><snippet>from django.core.files import File

response = urllib2.urlopen("http://path.to.file/img.jpg")
with open('tmp_img', 'wb') as f:
    f.write(response.read())

with open('tmp_img', 'r') as f:
    image_file = File(f) 
    entity.logo.save(img_filename, img_file, True)
os.remove('tmp_img')
</snippet></ROW><ROW><id>13393801</id><snippet>urlopen</snippet></ROW><ROW><id>13393801</id><snippet>read</snippet></ROW><ROW><id>13394010</id><snippet>int(open(filename, "w"))</snippet></ROW><ROW><id>13394010</id><snippet>outfile = open(filename, "w")
</snippet></ROW><ROW><id>13394010</id><snippet>fileobject[key]</snippet></ROW><ROW><id>13394010</id><snippet>"w"</snippet></ROW><ROW><id>13394010</id><snippet>"r+"</snippet></ROW><ROW><id>13394010</id><snippet>"w"</snippet></ROW><ROW><id>13394010</id><snippet>outfile.write(','.join(str(number) for number in list2))
</snippet></ROW><ROW><id>13394010</id><snippet>str(number)</snippet></ROW><ROW><id>13394010</id><snippet>','.join(iterable)</snippet></ROW><ROW><id>13394010</id><snippet>outfile.write(string)</snippet></ROW><ROW><id>13394010</id><snippet>import tkinter.filedialog

def replace():
    drawfilename = tkinter.filedialog.askopenfilename() 
    # read the contents of the file
    with open(drawfilename, "r") as infile:
        numbers = [int(number) for number in infile.read().split(',')]
        del numbers[-3:]
    # with automatically closes the file after del numbers[-3:]

    input_list = input("Enter three numbers separated by commas: ")
    # you do not have to strip the spaces. int already ignores them
    new_numbers = [int(num) for num in input_list.split(',')]
    numbers = new_numbers + numbers
    #drawfilename = tkinter.filedialog.askopenfilename()  if you want to reask the path
    # delete the old file and write the new content
    with open(drawfilename, "w") as outfile:
        outfile.write(','.join(str(number) for number in numbers))
</snippet></ROW><ROW><id>13394010</id><snippet>import tkinter.filedialog

def replace():
    drawfilename = tkinter.filedialog.askopenfilename() 
    with open(drawfilename, "r") as infile:
        sequences = infile.read().split(None, 2)[:-1]
        # split(None, 2) splits on any whitespace and splits at most 2 times
        # which means that it returns a list of 3 elements:
        # the two sequences and the remaining line not splitted.
        # sequences = infile.read().split() if you want to "parse" all the line

    input_sequences = []
    for sequence in sequences:
        numbers = [int(number) for number in sequence.split(',')]
        del numbers[-3:]

        input_list = input("Enter three numbers separated by commas: ")
        input_sequences.append([int(num) for num in input_list.split(',')])

    #drawfilename = tkinter.filedialog.askopenfilename()  if you want to reask the path
    with open(drawfilename, "w") as outfile:
        out_sequences = []
        for sequence, in_sequence in zip(sequences, input_sequences):
            out_sequences.append(','.join(str(num) for num in (in_sequence + sequence)))
        outfile.write(' '.join(out_sequences)) 
</snippet></ROW><ROW><id>13394083</id><snippet>object.__str__(self)</snippet></ROW><ROW><id>13394083</id><snippet>str()</snippet></ROW><ROW><id>13394083</id><snippet>print</snippet></ROW><ROW><id>13394083</id><snippet>__repr__()</snippet></ROW><ROW><id>13394114</id><snippet>    import pytest
    def func(x): return x + 1
    def test_answer(): assert func(3) == 5
</snippet></ROW><ROW><id>13394114</id><snippet>   pytest.main(args=['-s', os.path.abspath('pytests')])
</snippet></ROW><ROW><id>13394156</id><snippet>@decorate
class MyClass(object):

  @my_decorator(arg1="one", arg2="two")
  def decorated_method(self):
</snippet></ROW><ROW><id>13394156</id><snippet>__dict__</snippet></ROW><ROW><id>13394156</id><snippet>decorated_method</snippet></ROW><ROW><id>13394156</id><snippet>MyClass</snippet></ROW><ROW><id>13394520</id><snippet>str</snippet></ROW><ROW><id>13394520</id><snippet>bytes</snippet></ROW><ROW><id>13394520</id><snippet>bytearray</snippet></ROW><ROW><id>13394822</id><snippet>sqlite3</snippet></ROW><ROW><id>13394822</id><snippet>sqlite3/dump.py</snippet></ROW><ROW><id>13394822</id><snippet>from __future__ import unicode_literals
</snippet></ROW><ROW><id>13394822</id><snippet>python -c 'import sqlite3.dump; print sqlite3.dump.__file__.rstrip("c")'
</snippet></ROW><ROW><id>13394822</id><snippet>.iterdump()</snippet></ROW><ROW><id>13394822</id><snippet>with open('dump.sql', 'w') as f:  
    for line in con.iterdump():
        f.write('%s\n' % line.encode('utf8'))
</snippet></ROW><ROW><id>13394822</id><snippet>def iterdump(connection):
    cu = connection.cursor()
    yield(u'BEGIN TRANSACTION;')

    q = """
        SELECT "name", "type", "sql"
        FROM "sqlite_master"
            WHERE "sql" NOT NULL AND
            "type" == 'table'
        """
    schema_res = cu.execute(q)
    for table_name, type, sql in sorted(schema_res.fetchall()):
        if table_name == 'sqlite_sequence':
            yield(u'DELETE FROM "sqlite_sequence";')
        elif table_name == 'sqlite_stat1':
            yield(u'ANALYZE "sqlite_master";')
        elif table_name.startswith('sqlite_'):
            continue
        else:
            yield(u'{0};'.format(sql))

        table_name_ident = table_name.replace('"', '""')
        res = cu.execute('PRAGMA table_info("{0}")'.format(table_name_ident))
        column_names = [str(table_info[1]) for table_info in res.fetchall()]
        q = """SELECT 'INSERT INTO "{0}" VALUES({1})' FROM "{0}";""".format(
            table_name_ident,
            ",".join("""'||quote("{0}")||'""".format(col.replace('"', '""')) for col in column_names))
        query_res = cu.execute(q)
        for row in query_res:
            yield(u"{0};".format(row[0]))

    q = """
        SELECT "name", "type", "sql"
        FROM "sqlite_master"
            WHERE "sql" NOT NULL AND
            "type" IN ('index', 'trigger', 'view')
        """
    schema_res = cu.execute(q)
    for name, type, sql in schema_res.fetchall():
        yield(u'{0};'.format(sql))

    yield(u'COMMIT;')
</snippet></ROW><ROW><id>13394822</id><snippet>con = sqlite3.connect('database.sqlite')
with open('dump.sql', 'w') as f:  
    for iterdump(con):
        f.write('%s\n' % line.encode('utf8'))
</snippet></ROW><ROW><id>13394990</id><snippet>from smtplib import SMTPRecipientsRefused</snippet></ROW><ROW><id>13395161</id><snippet># chunks is a list of filenames (you'll need to define generate_chunk_files)
chunks = generate_chunk_files('large_dataframe')
for chunk in chunks:
    # stores each chunk in your PiCloud bucket
    cloud.bucket.put(chunk)

def process_chunk(chunk):
    """Runs on PiCloud"""

    # saves chunk object locally
    cloud.bucket.get(chunk)
    f = open(chunk, 'r')
    # process the data however you want

# asynchronously runs process_chunk on the cloud for all chunks
job_ids = cloud.map(process_chunk, chunks)
</snippet></ROW><ROW><id>13395255</id><snippet>__init__</snippet></ROW><ROW><id>13395255</id><snippet>global</snippet></ROW><ROW><id>13395255</id><snippet>&gt;&gt;&gt; def foo():
...     global sys
...     import sys
... 
&gt;&gt;&gt; sys
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'sys' is not defined
&gt;&gt;&gt; foo()
&gt;&gt;&gt; sys
&lt;module 'sys' (built-in)&gt;
</snippet></ROW><ROW><id>13395255</id><snippet>class Foo(object):
    def __init__(self):
        import os
        self.join = os.path.join
</snippet></ROW><ROW><id>13395543</id><snippet>partial</snippet></ROW><ROW><id>13395543</id><snippet>func</snippet></ROW><ROW><id>13395543</id><snippet> myfunc = returnAPartial()
 print myfunc.func # &lt;function mysecond at 0x10c918488&gt;
</snippet></ROW><ROW><id>13395612</id><snippet>def long_string():
    """
    Returns a string which is wider than the recommended PEP8 linewidth

    &gt;&gt;&gt; print long_string()
    01234567890123456789012345678901234567890123456789012345678901234567890\
12345678901234567890123456789

    """
    return '0123456789' * 10
</snippet></ROW><ROW><id>13396408</id><snippet>try{
    Socket s = null;
    try{
    s = new Socket("debian-srv", 2004);
    }catch(UnknownHostException e){
    e.printStackTrace();
    }catch(IOException e){
    e.printStackTrace();
    }
    if (s == null) {
    return -1;
    }


    PyTuple t = new PyTuple(new PyString("Test.brange-debian.mojo"), new PyTuple(new PyInteger(1352975858), new PyInteger(56)));
    PyTuple t2 = new PyTuple(new PyString("Test.brange-debian.mojo"), new PyTuple(new PyInteger(1352975858-60), new PyInteger(43)));
    PyTuple t3 = new PyTuple(new PyString("Test.brange-debian.mojo"), new PyTuple(new PyInteger(1352975858-2*+60), new PyInteger(65)));

    PyList list = new PyList();
    list.append(t);
    list.append(t2);
    list.append(t3);

    PyString payload = cPickle.dumps(list);

    byte[] bytes = ByteBuffer.allocate(4).putInt(payload.__len__()).array();

    s.getOutputStream().write(bytes);
    s.getOutputStream().write(payload.toBytes());
    s.getOutputStream().flush();

    s.close();
}
catch (Exception e) {
    e.printStackTrace();
}
</snippet></ROW><ROW><id>13396810</id><snippet>import random</snippet></ROW><ROW><id>13396810</id><snippet>random</snippet></ROW><ROW><id>13396810</id><snippet>random_str</snippet></ROW><ROW><id>13397021</id><snippet>geog_type = "'POINT(%s %s)'" % (lon, lat)

cursor.execute("INSERT INTO table (field1, x, y, geog) VALUES(%s, %s, %s, %s)", 
(var1 , lat, lon, geog_type))
</snippet></ROW><ROW><id>13397102</id><snippet>x = np.arange(10)
y = np.arange(10)
err = np.ones(10)
ebar = plt.errorbar(x,y, yerr=err)
color = ebar[0].get_color()
</snippet></ROW><ROW><id>13397102</id><snippet>ebar</snippet></ROW><ROW><id>13397102</id><snippet>ebar = plt.errorbar(x,y, yerr=err, ecolor='y')
</snippet></ROW><ROW><id>13397250</id><snippet>python setup.py install
</snippet></ROW><ROW><id>13397267</id><snippet>setParent</snippet></ROW><ROW><id>13397267</id><snippet>QGraphicsItem</snippet></ROW><ROW><id>13397267</id><snippet>setParent</snippet></ROW><ROW><id>13397267</id><snippet>setParentItem</snippet></ROW><ROW><id>13397267</id><snippet>children.setParentItem(None)
</snippet></ROW><ROW><id>13397267</id><snippet>import sys
from PyQt4.QtGui import *
from PyQt4.QtCore import *

POINT_SIZE = 7
class Test_Box(QGraphicsItem):
    # Constants
    WIDTH           = 50 * POINT_SIZE
    HEIGHT          = 13 * POINT_SIZE
    RECT            = QRectF(0, 0, WIDTH, HEIGHT)
    CORNER_RADIUS   = 1.5 * POINT_SIZE


    def __init__(self, position, parent=None):
        super(Test_Box, self).__init__(parent)

        # Settings
        self.setFlags(  self.flags()                            |
                        QGraphicsItem.ItemIsSelectable          |
                        QGraphicsItem.ItemIsMovable             |
                        QGraphicsItem.ItemIsFocusable           |
                        QGraphicsItem.ItemSendsScenePositionChanges )
        self.setPos(position)


    def boundingRect(self):
        return Test_Box.RECT


    def paint(self, painter, option, widget):
        # Draw Box
        brush   = QBrush()
        painter.setBrush(brush) 
        painter.drawRoundedRect(Test_Box.RECT, Test_Box.CORNER_RADIUS, Test_Box.CORNER_RADIUS)



    def itemChange(self, change, variant):
        super(Test_Box, self).itemChange(change, variant)
        if change == QGraphicsItem.ItemScenePositionHasChanged:
            self.setParentItem(None)
        return QGraphicsItem.itemChange(self, change, variant)


class Window(QWidget):
    def __init__(self, parent=None):
        super(Window, self).__init__(parent)

        self.scene = QGraphicsScene()

        self.item1 = Test_Box(QPointF(0, 0))
        self.item2 = Test_Box(QPointF(20, 20))
        self.item11 = Test_Box(QPointF(10, 5), self.item1)

        self.scene.addItem(self.item1)
        self.scene.addItem(self.item2)

        self.view = QGraphicsView(self.scene)

        self.listItems = QPushButton('list')
        self.listItems.clicked.connect(self.printItems)

        layout = QHBoxLayout()
        layout.addWidget(self.view)
        layout.addWidget(self.listItems)
        self.setLayout(layout)

    def printItems(self):
        for item in self.scene.items():
            print item, item.parentItem()


app = QApplication(sys.argv)

w = Window()
w.show()

sys.exit(app.exec_())
</snippet></ROW><ROW><id>13397267</id><snippet>Window</snippet></ROW><ROW><id>13397267</id><snippet>class Window(QWidget):
    def __init__(self, parent=None):
        super(Window, self).__init__(parent)

        self.scene = QGraphicsScene()

        item1 = Test_Box(QPointF(0, 0))
        item2 = Test_Box(QPointF(20, 20))
        item11 = Test_Box(QPointF(10, 5), item1)

        self.scene.addItem(item1)
        self.scene.addItem(item2)

        self.view = QGraphicsView(self.scene)

        self.listItems = QPushButton('list')
        self.listItems.clicked.connect(self.printItems)

        layout = QHBoxLayout()
        layout.addWidget(self.view)
        layout.addWidget(self.listItems)
        self.setLayout(layout)

    def printItems(self):
        for item in self.scene.items():
            print item, item.parentItem()
</snippet></ROW><ROW><id>13397267</id><snippet>addItem</snippet></ROW><ROW><id>13397267</id><snippet>scene</snippet></ROW><ROW><id>13397480</id><snippet>Tkinter</snippet></ROW><ROW><id>13397480</id><snippet>/usr/bin/python.2.7</snippet></ROW><ROW><id>13397480</id><snippet>Tkinter</snippet></ROW><ROW><id>13397480</id><snippet>$ /usr/bin/python2.7
Python 2.7.2 (default, Jun 20 2012, 16:23:33) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from Tkinter import *
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13397480</id><snippet>/Library/Frameworks/EPD64.framework/Versions/7.2/lib/libtcl8.5.dylib
/Library/Frameworks/EPD64.framework/Versions/7.2/lib/libtk8.5.dylib
/Library/Frameworks/EPD64.framework/Versions/7.2/lib/lib-dynload/_tkinter.so
</snippet></ROW><ROW><id>13397480</id><snippet>    /Library/Frameworks/EPD64.framework/Versions/7.2/lib/lib-dynload/_tkinter.so
</snippet></ROW><ROW><id>13397518</id><snippet>itertools.compress()</snippet></ROW><ROW><id>13397518</id><snippet>&gt;&gt;&gt; a=["a", "b", "c", "d", "e"]
&gt;&gt;&gt; b=[1, 2, None, 3, 4]
&gt;&gt;&gt; selectors = [x is not None for x in b]
&gt;&gt;&gt; list(itertools.compress(a, selectors))
['a', 'b', 'd', 'e']
&gt;&gt;&gt; list(itertools.compress(b, selectors))
[1, 2, 3, 4]
</snippet></ROW><ROW><id>13397518</id><snippet>itertools.compress()</snippet></ROW><ROW><id>13397575</id><snippet>def rec_cumsum(numbers):
    if len(numbers) == 0 : return numbers
    if len(numbers) == 1 : return numbers
    return [numbers[0]] + rec_cumsum([numbers[0]+numbers[1]] + numbers[2:])
</snippet></ROW><ROW><id>13397722</id><snippet>from zope.interface import directlyProvides
from Products.MyProduct.browser.promoboardhome import IPromoBoardHome

class TestPromoBoardHome(unittest.TestCase):

    layer = PROD_INTEGRATION_TESTING

    def setUp(self):
        self.portal = self.layer['portal']
        self.request = self.layer['request']
        directlyProvides(self.request, IPromoBoardHome)
</snippet></ROW><ROW><id>13398338</id><snippet>CommonClass</snippet></ROW><ROW><id>13398338</id><snippet>module.submod.utils</snippet></ROW><ROW><id>13398339</id><snippet>shell=True</snippet></ROW><ROW><id>13398339</id><snippet>process = subprocess.Popen(cmd, shell=True,
                           stdout=subprocess.PIPE, 
                           stderr=subprocess.PIPE)

# wait for the process to terminate
out, err = process.communicate()
errcode = process.returncode
</snippet></ROW><ROW><id>13398389</id><snippet>PDT</snippet></ROW><ROW><id>13398389</id><snippet>for line in tweets.splitlines():
    print line.split(' PDT ', 1)[1]
</snippet></ROW><ROW><id>13398389</id><snippet>PDT</snippet></ROW><ROW><id>13398455</id><snippet>if not os.path.exists(&lt;path-to-file&gt;):
    download_file()
</snippet></ROW><ROW><id>13398455</id><snippet>filename = "%s_%s_.exe" % (software.capitalize(),version)
if not os.path.exists(os.path.join(OUTPUT_FOLDER, filename)):
    base_url = urlJoin(LINK, + version + "_multi.exe")
    writeFile(original_filename, httpRequestFile(base_url), "wb")
</snippet></ROW><ROW><id>13398455</id><snippet>requests</snippet></ROW><ROW><id>13398455</id><snippet>httpRequestFile</snippet></ROW><ROW><id>13398455</id><snippet>import requests
from urllib2 import urljoin
filename = "%s_%s_.exe" % (software.capitalize(),version)
if not os.path.exists(os.path.join(OUTPUT_FOLDER, filename)):
    with open(filename, "wb") as fp:
        fp.write(requests.get(urljoin(LINK, version + "_multi.exe")).content)
</snippet></ROW><ROW><id>13398456</id><snippet>for rec in db:
    if not rec.deleted:
        row_tuple = (rec["name"], rec["address"], rec["age"])
        rows_list.append(row_tuple)
</snippet></ROW><ROW><id>13398680</id><snippet>__init__.py</snippet></ROW><ROW><id>13398680</id><snippet>WrapperPackage</snippet></ROW><ROW><id>13398680</id><snippet>from .packageA import * # Ensures that all the modules have been loaded in their new locations *first*.
from . import packageA  # imports WrapperPackage/packageA
import sys
sys.modules['packageA'] = packageA  # creates a packageA entry in sys.modules
</snippet></ROW><ROW><id>13398680</id><snippet>sys.modules['packageA.moduleA'] = moduleA
# etc.
</snippet></ROW><ROW><id>13398680</id><snippet>packageA.moduleA</snippet></ROW><ROW><id>13398680</id><snippet>packageA.moduleB</snippet></ROW><ROW><id>13398680</id><snippet>cPickle</snippet></ROW><ROW><id>13398954</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>13398954</id><snippet>Site.objects.get(id=1)
</snippet></ROW><ROW><id>13398954</id><snippet>DoesNotExist</snippet></ROW><ROW><id>13398954</id><snippet>Site</snippet></ROW><ROW><id>13398954</id><snippet>Site.objects.create(name='example.com', domain='example.com')
</snippet></ROW><ROW><id>13399213</id><snippet>.egg</snippet></ROW><ROW><id>13399213</id><snippet>PK</snippet></ROW><ROW><id>13399213</id><snippet>setuptools</snippet></ROW><ROW><id>13399213</id><snippet>$ head -n8 setuptools-0.6c11-py2.7.egg 
#!/bin/sh
if [ `basename $0` = "setuptools-0.6c11-py2.7.egg" ]
then exec python2.7 -c "import sys, os; sys.path.insert(0, os.path.abspath('$0')); from setuptools.command.easy_install import bootstrap; sys.exit(bootstrap())" "$@"
else
  echo $0 is not the correct name for this egg file.
  echo Please rename it back to setuptools-0.6c11-py2.7.egg and try again.
  exec false
fi
</snippet></ROW><ROW><id>13399213</id><snippet>$ tail -n+9 setuptools-0.6c11-py2.7.egg | file -
/dev/stdin: Zip archive data, at least v2.0 to extract
</snippet></ROW><ROW><id>13399213</id><snippet>sh setuptools-0.6c11-py2.7.egg</snippet></ROW><ROW><id>13399213</id><snippet>$ zipinfo -l setuptools-0.6c11-py2.7.egg 
Archive:  setuptools-0.6c11-py2.7.egg   332005 bytes   78 files
-rw-rw-r--  2.0 unx     1713 b-      995 defN  7-Jul-10 20:26 site.pyc
-rw-rw-r--  2.0 unx    90113 b-    31461 defN  7-Jul-10 20:26 pkg_resources.pyc
-rw-rw-r--  2.0 unx    85435 b-    23537 defN 19-Oct-09 13:35 pkg_resources.py
-rw-rw-r--  2.0 unx     2362 b-      875 defN 20-Sep-06 17:05 site.py
-rw-rw-r--  2.0 unx      309 b-      224 defN  7-Jul-10 20:26 easy_install.pyc
-rw-rw-r--  2.0 unx      126 b-      105 defN 20-Sep-06 17:05 easy_install.py
-rw-rw-r--  2.0 unx       43 b-       43 defN  7-Jul-10 20:26 EGG-INFO/top_level.txt
-rw-rw-r--  2.0 unx     1591 b-      458 defN  7-Jul-10 20:26 EGG-INFO/SOURCES.txt
-rw-rw-r--  2.0 unx        1 b-        3 defN 20-Oct-09 10:07 EGG-INFO/zip-safe
-rw-rw-r--  2.0 unx     9278 b-     3194 defN  7-Jul-10 20:26 EGG-INFO/PKG-INFO
-rwxrwxr-x  2.0 unx     2504 b-      623 defN  7-Jul-10 20:26 EGG-INFO/entry_points.txt
-rw-rw-r--  2.0 unx        1 b-        3 defN  7-Jul-10 20:26 EGG-INFO/dependency_links.txt
-rw-rw-r--  2.0 unx     1567 b-      791 defN  7-Jul-10 20:26 setuptools/extension.pyc
-rw-rw-r--  2.0 unx     1089 b-      424 defN 20-Sep-06 17:05 setuptools/extension.py
-rw-rw-r--  2.0 unx    10796 b-     4050 defN  7-Jul-10 20:26 setuptools/sandbox.pyc
-rw-rw-r--  2.0 unx     8227 b-     2309 defN  6-Jul-10 20:09 setuptools/sandbox.py
-rw-rw-r--  2.0 unx     5677 b-     2499 defN  7-Jul-10 20:26 setuptools/archive_util.pyc
-rw-rw-r--  2.0 unx    26800 b-    11228 defN  7-Jul-10 20:26 setuptools/package_index.pyc
-rw-rw-r--  2.0 unx     6209 b-     2229 defN 19-Oct-09 13:35 setuptools/depends.py
-rw-rw-r--  2.0 unx     6677 b-     3096 defN  7-Jul-10 20:26 setuptools/depends.pyc
-rw-rw-r--  2.0 unx     2816 b-     1159 defN  6-Jul-10 20:09 setuptools/__init__.py
-rw-rw-r--  2.0 unx     3639 b-     1837 defN  7-Jul-10 20:26 setuptools/__init__.pyc
-rw-rw-r--  2.0 unx     5924 b-     1777 defN 19-Oct-09 13:35 setuptools/archive_util.py
-rw-rw-r--  2.0 unx    29972 b-     8156 defN 19-Oct-09 13:35 setuptools/dist.py
-rwxrwxr-x  2.0 unx     7168 b-     3249 defN 19-Oct-09 17:18 setuptools/cli.exe
-rw-rw-r--  2.0 unx    28275 b-     8698 defN  6-Jul-10 20:09 setuptools/package_index.py
-rw-rw-r--  2.0 unx    29786 b-    10953 defN  7-Jul-10 20:26 setuptools/dist.pyc
-rwxrwxr-x  2.0 unx     7168 b-     3244 defN 19-Oct-09 17:18 setuptools/gui.exe
-rw-rw-r--  2.0 unx    22219 b-     7042 defN  7-Jul-10 20:26 setuptools/tests/test_resources.pyc
-rw-rw-r--  2.0 unx    19388 b-     4723 defN 24-Sep-08 13:10 setuptools/tests/test_resources.py
-rw-rw-r--  2.0 unx    12345 b-     2765 defN 24-Sep-08 13:10 setuptools/tests/__init__.py
-rw-rw-r--  2.0 unx    13811 b-     4523 defN  7-Jul-10 20:26 setuptools/tests/__init__.pyc
-rw-rw-r--  2.0 unx     1499 b-      708 defN  7-Jul-10 20:26 setuptools/tests/test_packageindex.pyc
-rw-rw-r--  2.0 unx    81351 b-    27171 defN  7-Jul-10 20:26 setuptools/tests/doctest.pyc
-rw-rw-r--  2.0 unx      759 b-      346 defN 24-Sep-08 13:10 setuptools/tests/test_packageindex.py
-rw-rw-r--  2.0 unx    99714 b-    25663 defN 20-Sep-06 17:05 setuptools/tests/doctest.py
-rw-rw-r--  2.0 unx     2866 b-     1332 defN  7-Jul-10 20:26 setuptools/command/rotate.pyc
-rw-rw-r--  2.0 unx    11520 b-     3127 defN 19-Oct-09 13:35 setuptools/command/build_ext.py
-rw-rw-r--  2.0 unx     6649 b-     2208 defN 24-Sep-08 13:10 setuptools/command/upload.py
-rw-rw-r--  2.0 unx     8162 b-     3538 defN  7-Jul-10 20:26 setuptools/command/sdist.pyc
-rw-rw-r--  2.0 unx     5965 b-     2421 defN  7-Jul-10 20:26 setuptools/command/setopt.pyc
-rw-rw-r--  2.0 unx     2283 b-      695 defN 19-Oct-09 17:50 setuptools/command/bdist_wininst.py
-rw-rw-r--  2.0 unx     7535 b-     3208 defN  7-Jul-10 20:26 setuptools/command/build_py.pyc
-rw-rw-r--  2.0 unx     3690 b-     1528 defN  7-Jul-10 20:26 setuptools/command/install.pyc
-rw-rw-r--  2.0 unx    14205 b-     4465 defN 19-Oct-09 13:35 setuptools/command/egg_info.py
-rw-rw-r--  2.0 unx      626 b-      311 defN 28-Dec-06 19:52 setuptools/command/__init__.py
-rw-rw-r--  2.0 unx      839 b-      494 defN  7-Jul-10 20:26 setuptools/command/__init__.pyc
-rw-rw-r--  2.0 unx     5053 b-     1519 defN 20-Sep-06 17:05 setuptools/command/setopt.py
-rw-rw-r--  2.0 unx      674 b-      329 defN  7-Jul-10 20:26 setuptools/command/register.pyc
-rw-rw-r--  2.0 unx     3724 b-     1292 defN  4-Sep-07 00:11 setuptools/command/install_egg_info.py
-rw-rw-r--  2.0 unx    18005 b-     5444 defN 19-Oct-09 13:35 setuptools/command/bdist_egg.py
-rw-rw-r--  2.0 unx     3984 b-     1385 defN 15-Feb-08 12:29 setuptools/command/install.py
-rw-rw-r--  2.0 unx     2356 b-     1002 defN  7-Jul-10 20:26 setuptools/command/bdist_wininst.pyc
-rw-rw-r--  2.0 unx     2025 b-      774 defN 22-May-07 17:55 setuptools/command/bdist_rpm.py
-rw-rw-r--  2.0 unx     2486 b-      871 defN 20-Sep-06 17:05 setuptools/command/install_lib.py
-rw-rw-r--  2.0 unx      740 b-      357 defN 20-Sep-06 17:05 setuptools/command/saveopts.py
-rw-rw-r--  2.0 unx    56980 b-    23198 defN  7-Jul-10 20:26 setuptools/command/easy_install.pyc
-rw-rw-r--  2.0 unx     3172 b-     1438 defN  7-Jul-10 20:26 setuptools/command/install_lib.pyc
-rw-rw-r--  2.0 unx     2257 b-     1013 defN  7-Jul-10 20:26 setuptools/command/bdist_rpm.pyc
-rw-rw-r--  2.0 unx     5310 b-     1732 defN 15-Feb-08 12:29 setuptools/command/develop.py
-rw-rw-r--  2.0 unx     5091 b-     2222 defN  7-Jul-10 20:26 setuptools/command/test.pyc
-rw-rw-r--  2.0 unx    63580 b-    17507 defN 19-Oct-09 13:35 setuptools/command/easy_install.py
-rw-rw-r--  2.0 unx    16467 b-     6544 defN  7-Jul-10 20:26 setuptools/command/egg_info.pyc
-rw-rw-r--  2.0 unx     4577 b-     1994 defN  7-Jul-10 20:26 setuptools/command/install_egg_info.pyc
-rw-rw-r--  2.0 unx     6275 b-     3108 defN  7-Jul-10 20:26 setuptools/command/upload.pyc
-rw-rw-r--  2.0 unx     7246 b-     2237 defN 20-Sep-06 17:05 setuptools/command/build_py.py
-rw-rw-r--  2.0 unx    10073 b-     4314 defN  7-Jul-10 20:26 setuptools/command/build_ext.pyc
-rw-rw-r--  2.0 unx     3185 b-     1463 defN  7-Jul-10 20:26 setuptools/command/alias.pyc
-rw-rw-r--  2.0 unx     1921 b-      704 defN 15-Feb-08 12:29 setuptools/command/install_scripts.py
-rw-rw-r--  2.0 unx     7327 b-     2380 defN 19-Oct-09 15:46 setuptools/command/sdist.py
-rw-rw-r--  2.0 unx     1249 b-      647 defN  7-Jul-10 20:26 setuptools/command/saveopts.pyc
-rw-rw-r--  2.0 unx     2021 b-      750 defN 20-Sep-06 17:05 setuptools/command/rotate.py
-rw-rw-r--  2.0 unx     2477 b-      848 defN 19-Oct-09 13:35 setuptools/command/alias.py
-rw-rw-r--  2.0 unx    17695 b-     7800 defN  7-Jul-10 20:26 setuptools/command/bdist_egg.pyc
-rw-rw-r--  2.0 unx      277 b-      158 defN 20-Sep-06 17:05 setuptools/command/register.py
-rw-rw-r--  2.0 unx     4442 b-     1424 defN 15-Feb-08 12:29 setuptools/command/test.py
-rw-rw-r--  2.0 unx     2445 b-     1160 defN  7-Jul-10 20:26 setuptools/command/install_scripts.pyc
-rw-rw-r--  2.0 unx     5175 b-     2317 defN  7-Jul-10 20:26 setuptools/command/develop.pyc
78 files, 958981 bytes uncompressed, 321419 bytes compressed:  66.5%
</snippet></ROW><ROW><id>13399354</id><snippet>data = json.dumps([columns for key, columns in crime.get_range()])
</snippet></ROW><ROW><id>13399463</id><snippet>def draw(fig, sub_plot_args,x,y):
    ax = fig.subplot(*sub_plot_args)
    ax.scatter(x,y)
</snippet></ROW><ROW><id>13399463</id><snippet>def draw(ax,x,y):

    ax.scatter(x,y)
</snippet></ROW><ROW><id>13399463</id><snippet>import matplotlib.pyplot as plt
fig = plt.figure()
</snippet></ROW><ROW><id>13399463</id><snippet>fig, ax = plt.subplots()
</snippet></ROW><ROW><id>13399490</id><snippet>def insertInHtml(string, insstr, position):
    ctr=0
    insidetag=False
    for ci in range(len(string)):
        if string[ci]=='&lt;':
            insidetag=True
        elif string[ci]=='&gt;':
            insidetag=False
        else:
            if not insidetag: ctr+=1
        if ctr==position+1:
            HTMLIndex=ci
            break
    return string[0:HTMLIndex] + insstr + string[HTMLIndex:]
</snippet></ROW><ROW><id>13399490</id><snippet>def insertInHtml(string, insstr, position):
    ctr=0
    insidetag=False
    insideattr=False
    for ci in range(len(string)):
        suchar=''
        if not ci==len(string)-1: suchar=string[ci+1]
        if string[ci]=='&lt;' and not insideattr:
            insidetag=True
        elif (string[ci]=='&gt;' and not insideattr) or (string[ci]=='-' and string[ci-2:ci]=='!-'):
            insidetag=False
        elif insidetag and string[ci]+suchar=='="':
            insideattr=True
        elif insideattr and string[ci]=='"':
            insideattr=False
        else:
            if not insidetag: ctr+=1
        if ctr==position+1:
            HTMLIndex=ci
            break
    return string[0:HTMLIndex] + insstr + string[HTMLIndex:]
</snippet></ROW><ROW><id>13399905</id><snippet>lat</snippet></ROW><ROW><id>13399905</id><snippet>lon</snippet></ROW><ROW><id>13399905</id><snippet>soup = BeautifulSoup(results)
takeaways = soup.findAll('node')

for eachtakeaway in takeaways:
    another_tag = eachtakeaway('tag')
    for tag_attrs in another_tag:
        if str(tag_attrs['k']) == 'cuisine':
            print str(tag_attrs['v'])
</snippet></ROW><ROW><id>13399905</id><snippet>name</snippet></ROW><ROW><id>13400112</id><snippet>keyPressEvent</snippet></ROW><ROW><id>13400112</id><snippet>KeyPressEvent</snippet></ROW><ROW><id>13400112</id><snippet>QLineEdit</snippet></ROW><ROW><id>13400112</id><snippet>KeyPress</snippet></ROW><ROW><id>13400112</id><snippet>returnPressed</snippet></ROW><ROW><id>13400112</id><snippet>self.fun</snippet></ROW><ROW><id>13400112</id><snippet>self.text.returnPressed.connect(self.fun)  # in PySide
</snippet></ROW><ROW><id>13400112</id><snippet>keyPressEvent</snippet></ROW><ROW><id>13400112</id><snippet>self.text.returnPressed.connect(self.fun)
self.button.clicked.connect(self.fun)
</snippet></ROW><ROW><id>13400269</id><snippet>self</snippet></ROW><ROW><id>13400269</id><snippet>self</snippet></ROW><ROW><id>13400269</id><snippet>def __init__(self, function=setattr, parameters=None):
    if parameters is None:
       parameters = (self, "togglableAttribute", not self.togglableAttribute)
</snippet></ROW><ROW><id>13400391</id><snippet>scipy.interpolate.splrep</snippet></ROW><ROW><id>13400391</id><snippet>scipy.interpolate.interpolate.spltopp</snippet></ROW><ROW><id>13400391</id><snippet>&gt;&gt;&gt; import scipy.interpolate
&gt;&gt;&gt; x = [0, 1, 2, 3]
&gt;&gt;&gt; y = [0, 1, 4, 0]
&gt;&gt;&gt; tck = scipy.interpolate.splrep(x, y)
&gt;&gt;&gt; tck
Out: 
    (array([ 0.,  0.,  0.,  0.,  3.,  3.,  3.,  3.]),
    array([  3.19142761e-16,  -3.00000000e+00,   1.05000000e+01,
        0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
        0.00000000e+00,   0.00000000e+00]),
    3)

&gt;&gt;&gt; pp = scipy.interpolate.interpolate.spltopp(tck[0][1:-1], tck[1], tck[2])

&gt;&gt;&gt; pp.coeffs.T
Out: 
    array([[ -4.54540394e-322,   0.00000000e+000,   0.00000000e+000,
           0.00000000e+000],
        [ -4.54540394e-322,   0.00000000e+000,   0.00000000e+000,
           0.00000000e+000],
        [ -4.54540394e-322,   0.00000000e+000,   0.00000000e+000,
           0.00000000e+000],
        [  0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
           0.00000000e+000],
        [  0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
           0.00000000e+000]])
</snippet></ROW><ROW><id>13400391</id><snippet>&gt;&gt;&gt; bsbm = array([[-1,  3, -3,  1], [ 3, -6,  3,  0], [-3,  0,  3,  0], 
                 [ 1,  4,  1,  0]]) * 1.0/6
Out: 
    array([[-0.16666667,  0.5       , -0.5       ,  0.16666667],
        [ 0.5       , -1.        ,  0.5       ,  0.        ],
        [-0.5       ,  0.        ,  0.5       ,  0.        ],
        [ 0.16666667,  0.66666667,  0.16666667,  0.        ]])

&gt;&gt;&gt; dot(pp.coeffs.T, bsbm)
Out: 
    array([[  7.41098469e-323,  -2.27270197e-322,   2.27270197e-322,
           -7.41098469e-323],
        [  7.41098469e-323,  -2.27270197e-322,   2.27270197e-322,
           -7.41098469e-323],
        [  7.41098469e-323,  -2.27270197e-322,   2.27270197e-322,
           -7.41098469e-323],
        [  0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
           0.00000000e+000],
        [  0.00000000e+000,   0.00000000e+000,   0.00000000e+000,
           0.00000000e+000]])
</snippet></ROW><ROW><id>13400391</id><snippet>bsplpp</snippet></ROW><ROW><id>13400416</id><snippet>lang = convertStr(lang)
</snippet></ROW><ROW><id>13400416</id><snippet>ret = int(lang)</snippet></ROW><ROW><id>13400416</id><snippet>return lang</snippet></ROW><ROW><id>13400416</id><snippet>def choose_lang():
    lang = None # NOTE: this `lang` has nothing to do with the global `lang`
    while True: 
        try:
            lang = int(input("select (1 or 2)"))
        except ValueError:
            pass
        if lang not in [1, 2]:
            print("\ntry again")
        else:
            break
    return lang

lang = choose_lang()
c = 2 + lang
print(c)
</snippet></ROW><ROW><id>13400459</id><snippet>.getall()</snippet></ROW><ROW><id>13400459</id><snippet>b = request.GET.getall('b')  # ['2', '20', '200']
</snippet></ROW><ROW><id>13400459</id><snippet>.getall()</snippet></ROW><ROW><id>13400459</id><snippet>MultiDict</snippet></ROW><ROW><id>13400459</id><snippet>request</snippet></ROW><ROW><id>13400459</id><snippet>.GET</snippet></ROW><ROW><id>13400459</id><snippet>.POST</snippet></ROW><ROW><id>13400459</id><snippet>.params</snippet></ROW><ROW><id>13400459</id><snippet>MultiDict</snippet></ROW><ROW><id>13400459</id><snippet>WebOb</snippet></ROW><ROW><id>13400472</id><snippet>b'{'</snippet></ROW><ROW><id>13400472</id><snippet>b'\x7b'</snippet></ROW><ROW><id>13400472</id><snippet>&gt;&gt;&gt; b'{' == b'\x7b'
True
</snippet></ROW><ROW><id>13400472</id><snippet>import binascii
def to_byte_escapes(b):
   return ''.join('\\x' + binascii.hexlify(byte) for byte in b)
</snippet></ROW><ROW><id>13400472</id><snippet>&gt;&gt;&gt; print(to_byte_escapes(b'\xde{\x1d\x86\xa0\x81kw\xbc\x8a'))
\xde\x7b\x1d\x86\xa0\x81\x6b\x77\xbc\x8a
</snippet></ROW><ROW><id>13400513</id><snippet>python manage.py shell
</snippet></ROW><ROW><id>13400513</id><snippet>from django.contrib.auth.models import User
u = User(username='admin', is_superuser=True, is_staff=True)
u.set_password('admin')
u.save()
</snippet></ROW><ROW><id>13400812</id><snippet>colorpattern = re.compile(r'color(\d+)')

li = soup.find_all('li', {'class': colorpattern} )
for ele in li:
    print colorpattern.search(ele['class']).group(1)
</snippet></ROW><ROW><id>13400907</id><snippet>max(L,key=len)</snippet></ROW><ROW><id>13400907</id><snippet>[1,2,3]</snippet></ROW><ROW><id>13400907</id><snippet>len(max(L,key=len))</snippet></ROW><ROW><id>13400907</id><snippet>key=function</snippet></ROW><ROW><id>13400907</id><snippet>max</snippet></ROW><ROW><id>13400907</id><snippet>max</snippet></ROW><ROW><id>13400907</id><snippet>min</snippet></ROW><ROW><id>13400907</id><snippet>sorted</snippet></ROW><ROW><id>13400907</id><snippet>itertools.groupby</snippet></ROW><ROW><id>13400937</id><snippet>import multiprocessing
from py.test import raises

class CustomError(Exception):
    pass

def test_mp_expected_fail():
    p = multiprocessing.Process(target=child_expected_fail)
    p.start()
    p.join()
    assert not p.exitcode

def test_mp_success():
    p = multiprocessing.Process(target=child)
    p.start()
    p.join()
    assert not p.exitcode

def test_mp_unexpected_fail():
    p = multiprocessing.Process(target=child_unexpected_fail)
    p.start()
    p.join()
    assert not p.exitcode


def child_expected_fail():
    with raises(CustomError):
        raise CustomError

def child_unexpected_fail():
    raise TypeError

def child():
    pass
</snippet></ROW><ROW><id>13400937</id><snippet>$ py.test pytest_mp_test.py 
================================== test session starts ===================================
platform linux2 -- Python 2.7.3 -- pytest-2.3.3
plugins: cov
collected 3 items 

pytest_mp_test.py ..F

======================================== FAILURES ========================================
________________________________ test_mp_unexpected_fail _________________________________

    def test_mp_unexpected_fail():
        p = multiprocessing.Process(target=child_unexpected_fail)
        p.start()
        p.join()
&gt;       assert not p.exitcode
E       assert not 1
E        +  where 1 = &lt;Process(Process-3, stopped[1])&gt;.exitcode

pytest_mp_test.py:23: AssertionError
------------------------------------ Captured stderr -------------------------------------
Process Process-3:
Traceback (most recent call last):
  File "/apps11/bioinfp/Python-2.7.3/lib/python2.7/multiprocessing/process.py", line 258, in _bootstrap
    self.run()
  File "/apps11/bioinfp/Python-2.7.3/lib/python2.7/multiprocessing/process.py", line 114, in run
    self._target(*self._args, **self._kwargs)
  File "/home/bioinfp/jang/hobbyproggorn/gevent-messagepipe/gevent-messagepipe/pytest_mp_test.py", line 31, in child_unexpected_fail
    raise TypeError
TypeError
=========================== 1 failed, 2 passed in 0.07 seconds ===========================
</snippet></ROW><ROW><id>13401041</id><snippet>.i</snippet></ROW><ROW><id>13401041</id><snippet>%include &lt;std_vector.i&gt;
%template(DoubleVector) std::vector&lt;double&gt;;
%include "GradedComplex.h"
</snippet></ROW><ROW><id>13401041</id><snippet>.h</snippet></ROW><ROW><id>13401041</id><snippet>GradedComplex(const std::vector&lt;double&gt;&amp; dbls);
</snippet></ROW><ROW><id>13401041</id><snippet>.cpp</snippet></ROW><ROW><id>13401041</id><snippet>GradedComplex::GradedComplex(const vector&lt;double&gt;&amp; dbls) : thre_(dbls)
{
}
</snippet></ROW><ROW><id>13401041</id><snippet>n_</snippet></ROW><ROW><id>13401041</id><snippet>thre_.size()</snippet></ROW><ROW><id>13401041</id><snippet>c=Item.GradedComplex([1.2,3.4,5.6])
</snippet></ROW><ROW><id>13401041</id><snippet>avg</snippet></ROW><ROW><id>13401041</id><snippet>std::vector&lt;double&gt; GradedComplex::avg() { ... }
</snippet></ROW><ROW><id>13401567</id><snippet>$pull</snippet></ROW><ROW><id>13401567</id><snippet>value = 150
coll.update({}, 
    {'$pull': {'values': {'value_type': 'type1', 'value': {'$lt': value}}}},
    multi=True)
</snippet></ROW><ROW><id>13401567</id><snippet>multi</snippet></ROW><ROW><id>13401567</id><snippet>True</snippet></ROW><ROW><id>13401798</id><snippet>print("10{}m".format(x//100))
</snippet></ROW><ROW><id>13401939</id><snippet>Expect100Continue</snippet></ROW><ROW><id>13401939</id><snippet>ServicePointManager.Expect100Continue = false;
</snippet></ROW><ROW><id>13401939</id><snippet>HTTP 1.1</snippet></ROW><ROW><id>13401939</id><snippet>100-Continue</snippet></ROW><ROW><id>13401939</id><snippet>true</snippet></ROW><ROW><id>13401939</id><snippet>100-Continue</snippet></ROW><ROW><id>13401939</id><snippet>Fiddler</snippet></ROW><ROW><id>13401939</id><snippet>Python Paste</snippet></ROW><ROW><id>13401964</id><snippet>locale.nl_langinfo</snippet></ROW><ROW><id>13401964</id><snippet>locale.setlocale(locale.LC_ALL, 'english')
</snippet></ROW><ROW><id>13401964</id><snippet>some_date.strftime('%x')</snippet></ROW><ROW><id>13401964</id><snippet>%x</snippet></ROW><ROW><id>13401964</id><snippet>%X</snippet></ROW><ROW><id>13401964</id><snippet>%c</snippet></ROW><ROW><id>13401964</id><snippet>&gt;&gt;&gt; d = datetime.datetime.now()
... for loc in ('english', 'german', 'french'):
...     locale.setlocale(locale.LC_ALL, loc)
...     print loc, d.strftime('%c -- %x -- %X -- %B -- %A')
english 11/15/2012 4:10:56 PM -- 11/15/2012 -- 4:10:56 PM -- November -- Thursday
german 15.11.2012 16:10:56 -- 15.11.2012 -- 16:10:56 -- November -- Donnerstag
french 15/11/2012 16:10:56 -- 15/11/2012 -- 16:10:56 -- novembre -- jeudi
14: 'French_France.1252'
</snippet></ROW><ROW><id>13402053</id><snippet>for k in range(0,len(data)):
    stuff = ClassTwo()
</snippet></ROW><ROW><id>13402064</id><snippet>{"Entries": [], "Groups": [], "Admin": [], "Network": [], "XYZ": [], "Subnets": []}
</snippet></ROW><ROW><id>13402064</id><snippet>for menu in ["Admin", "Groups", "Network", "Subnets", "Entries"]:
    try:
        doWork(my_dataset[menu])
        del my_dataset[menu]
    except KeyError:
        # The user might not have any entries for that menu, so don't worry about it
        pass
for menu in my_dataset.keys():
    doWork(my_dataset[menu])
</snippet></ROW><ROW><id>13402582</id><snippet>()</snippet></ROW><ROW><id>13402582</id><snippet>()</snippet></ROW><ROW><id>13402639</id><snippet>OSError</snippet></ROW><ROW><id>13402639</id><snippet>errno=ESRCH</snippet></ROW><ROW><id>13402639</id><snippet>[jajcus@lolek ~]$ sleep 1000 &amp;
[1] 2405
[jajcus@lolek ~]$ python
Python 2.7.3 (default, May 11 2012, 11:57:22) 
[GCC 4.6.3 20120315 (release)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.kill(2405, 0)
&gt;&gt;&gt; os.kill(2405, 15)
&gt;&gt;&gt; os.kill(2405, 0)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OSError: [Errno 3] No such process
</snippet></ROW><ROW><id>13402639</id><snippet>wait()</snippet></ROW><ROW><id>13402639</id><snippet>Popen</snippet></ROW><ROW><id>13402757</id><snippet>join</snippet></ROW><ROW><id>13402757</id><snippet>'[' + ','.join(list_of_JSON_blobs) + ']'
</snippet></ROW><ROW><id>13403044</id><snippet>In [184]: Y = sparse.csc_matrix(X,dtype=np.uint32)

In [185]: Y.sum(0).sum()
Out[185]: 327746

In [187]: Y.sum(0)
Out[187]: 
matrix([[170726,   1041, 117398,   3526,  13202,   3585,   2355,   1895,   1392,   2189,   2070,   2603,   1676,    496,   1194,    933,    129,
            529,    544,    256,      7,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
              0,      0,      0,      0,      0,      0,      0,      0,      0]], dtype=uint32)
</snippet></ROW><ROW><id>13403266</id><snippet>pdb</snippet></ROW><ROW><id>13403387</id><snippet>&lt;fieldType class="solr.TextField" name="text_en" positionIncrementGap="100"&gt;
  &lt;analyzer type="index"&gt;
    &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
    &lt;filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/&gt;
    &lt;filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/&gt;--&gt;
    &lt;filter catenateAll="0" catenateNumbers="1" catenateWords="1" class="solr.WordDelimiterFilterFactory" generateNumberParts="1" generateWordParts="1" splitOnCaseChange="1"/&gt;
    &lt;filter class="solr.LowerCaseFilterFactory"/&gt;
    &lt;filter class="solr.ASCIIFoldingFilterFactory"/&gt;
  &lt;/analyzer&gt;
 &lt;/fieldType&gt;
</snippet></ROW><ROW><id>13403387</id><snippet>&lt;field indexed="true" name="text_body" stored="false" type="text_en"/&gt;
</snippet></ROW><ROW><id>13403400</id><snippet>from a import x, changeX</snippet></ROW><ROW><id>13403400</id><snippet>import a
x = a.x
changeX = a.changeX
</snippet></ROW><ROW><id>13403400</id><snippet>from a import x</snippet></ROW><ROW><id>13403400</id><snippet>x</snippet></ROW><ROW><id>13403400</id><snippet>a.x</snippet></ROW><ROW><id>13403400</id><snippet>x</snippet></ROW><ROW><id>13403400</id><snippet>b</snippet></ROW><ROW><id>13403400</id><snippet>a.x</snippet></ROW><ROW><id>13403400</id><snippet>a.x</snippet></ROW><ROW><id>13403400</id><snippet>b.x</snippet></ROW><ROW><id>13403400</id><snippet>b.py</snippet></ROW><ROW><id>13403400</id><snippet>import a</snippet></ROW><ROW><id>13403400</id><snippet>import a
a.changeX()
print a.x
</snippet></ROW><ROW><id>13403400</id><snippet>reload</snippet></ROW><ROW><id>13403452</id><snippet>cur = g.db.query('select * from table_name where id=3')
if cur.rowcount &lt;= 0:
*    abort(404)
''Run delete command here''
</snippet></ROW><ROW><id>13403453</id><snippet>done</snippet></ROW><ROW><id>13403453</id><snippet>./done</snippet></ROW><ROW><id>13403453</id><snippet>/path/to/done</snippet></ROW><ROW><id>13403453</id><snippet>python /path/to/done</snippet></ROW><ROW><id>13403662</id><snippet>grid_rowconfigure</snippet></ROW><ROW><id>13403662</id><snippet>grid_columnconfigure</snippet></ROW><ROW><id>13403662</id><snippet>f3.grid_rowconfigure(0, weight=1)
f3.grid_columnconfigure(0, weight=1)
</snippet></ROW><ROW><id>13403761</id><snippet>urlparse.urljoin</snippet></ROW><ROW><id>13403761</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; base_url = "http://example.com/foo/"
&gt;&gt;&gt; urlparse.urljoin(base_url, "../bar")
'http://example.com/bar'
&gt;&gt;&gt; urlparse.urljoin(base_url, "/baz")
'http://example.com/baz'
</snippet></ROW><ROW><id>13403942</id><snippet>enumerate()</snippet></ROW><ROW><id>13403942</id><snippet>str.rstrip()</snippet></ROW><ROW><id>13403942</id><snippet>rstrip('\n')</snippet></ROW><ROW><id>13403942</id><snippet>\n</snippet></ROW><ROW><id>13403942</id><snippet>for i,x in enumerate(t,1):
    print ("{0}. {1}".format(i,x.rstrip()))
</snippet></ROW><ROW><id>13403971</id><snippet>findAll</snippet></ROW><ROW><id>13403971</id><snippet>.get_text()</snippet></ROW><ROW><id>13403971</id><snippet>.contents</snippet></ROW><ROW><id>13403971</id><snippet>.children</snippet></ROW><ROW><id>13403971</id><snippet>.prettify()</snippet></ROW><ROW><id>13404015</id><snippet>class Item(models.Model):
    # some fields
    is_folder = models.BooleanField(default=False)
    some_other_folder = models.ForeignKey('self', null=True, blank=True)
</snippet></ROW><ROW><id>13404015</id><snippet>is_folder==False</snippet></ROW><ROW><id>13404015</id><snippet>some_other_folder</snippet></ROW><ROW><id>13404023</id><snippet>@login_manager.user_loader
def load_user(id):
    return "get the user properly and create the usermixin object"
</snippet></ROW><ROW><id>13404027</id><snippet>none</snippet></ROW><ROW><id>13404027</id><snippet>config_scripts</snippet></ROW><ROW><id>13404027</id><snippet>scenario.dtd</snippet></ROW><ROW><id>13404027</id><snippet>script</snippet></ROW><ROW><id>13404027</id><snippet>config_script</snippet></ROW><ROW><id>13404027</id><snippet>user</snippet></ROW><ROW><id>13404027</id><snippet>full_name</snippet></ROW><ROW><id>13404027</id><snippet>password</snippet></ROW><ROW><id>13404027</id><snippet>groups</snippet></ROW><ROW><id>13404027</id><snippet>&lt;!DOCTYPE config_scripts [
&lt;!ELEMENT scenario (name, description, config_script*)&gt;
&lt;!ELEMENT name (#PCDATA)&gt;
&lt;!ELEMENT description (#PCDATA)&gt;
&lt;!ELEMENT config_scripts (script)&gt;

&lt;!ELEMENT script (param)&gt;
&lt;!ATTLIST script 
           name CDATA #REQUIRED
           repository CDATA #REQUIRED&gt; 

&lt;!ELEMENT param ANY&gt;

&lt;!ELEMENT user (name,full_name,password,groups)&gt;
&lt;!ELEMENT full_name (#PCDATA)&gt;
&lt;!ELEMENT password (#PCDATA)&gt;
&lt;!ELEMENT groups (#PCDATA)&gt;

&lt;!ATTLIST scenario target (win32|win64|linux32|linux64) "win32"&gt;
]&gt;
</snippet></ROW><ROW><id>13404035</id><snippet>import csv
sh = [u'T\xe9l\xe9vista S.A.', u'T\xe9l\xe9vista S.A.', 'Python']

f = open('listwrite.txt', 'wb') # binary mode
writer = csv.writer(f)
writer.writerow([item.encode('latin-1') for item in sh])
f.close()
</snippet></ROW><ROW><id>13404035</id><snippet>$ cat listwrite.txt | iconv -f latin1
Télévista S.A.,Télévista S.A.,Python
$ file listwrite.txt 
listwrite.txt: ISO-8859 text, with CRLF line terminators
</snippet></ROW><ROW><id>13404188</id><snippet>b = a[::2,:] + a[1::2,:]
</snippet></ROW><ROW><id>13404188</id><snippet>&gt;&gt;&gt; from numpy import *
&gt;&gt;&gt; a=array([[ 0,  1,  2,  3],
...        [ 4,  5,  6,  7],
...        [ 8,  9, 10, 11],
...        [12, 13, 14, 15]])
&gt;&gt;&gt;
&gt;&gt;&gt; a[::2,:]
array([[ 0,  1,  2,  3],
       [ 8,  9, 10, 11]])
&gt;&gt;&gt;
&gt;&gt;&gt; a[1::2,:]
array([[ 4,  5,  6,  7],
       [12, 13, 14, 15]])
&gt;&gt;&gt;
&gt;&gt;&gt; a[::2,:] + a[1::2,:]
array([[ 4,  6,  8, 10],
       [20, 22, 24, 26]])
</snippet></ROW><ROW><id>13404227</id><snippet>import math
def sqrt(S, p):
    p -= int(math.log(S,10)/2)))
    x = int(S**0.5)*(10**p)
    S *= 10**(p*2)
    while True:
        x_new = (x + S/x) / 2
        if x == x_new: return x
        x = x_new

print sqrt(2, 10)
print sqrt(11, 42)
print sqrt(2, 500)
</snippet></ROW><ROW><id>13404327</id><snippet>LC_ALL</snippet></ROW><ROW><id>13404327</id><snippet>LC_CTYPE</snippet></ROW><ROW><id>13404327</id><snippet>LANG</snippet></ROW><ROW><id>13404327</id><snippet>new_env = dict(os.environ)  # Copy current environment
new_env['LANG'] = 'en_US.UTF-8'
p = subprocess.Popen(..., env=new_env)
</snippet></ROW><ROW><id>13404345</id><snippet>rates = []</snippet></ROW><ROW><id>13404345</id><snippet>InterestRateCurve</snippet></ROW><ROW><id>13404345</id><snippet>InterestRateCurve</snippet></ROW><ROW><id>13404345</id><snippet>InterestRateCurve.rates</snippet></ROW><ROW><id>13404345</id><snippet>InterestRateCurve.save()</snippet></ROW><ROW><id>13404345</id><snippet>except</snippet></ROW><ROW><id>13404345</id><snippet>for rate in self.rates:
    rate.curve = curve
    rate.save()
</snippet></ROW><ROW><id>13404345</id><snippet>self.rates</snippet></ROW><ROW><id>13404345</id><snippet>InterestRateCurve.rates</snippet></ROW><ROW><id>13404345</id><snippet>InterestRate</snippet></ROW><ROW><id>13404345</id><snippet>class Meta:
    unique_together = ('type', 'term', 'numTerms', 'curve')
</snippet></ROW><ROW><id>13404345</id><snippet>pdb</snippet></ROW><ROW><id>13404365</id><snippet>sudo apt-get install python-mysqldb</snippet></ROW><ROW><id>13404365</id><snippet>libmysqlclient</snippet></ROW><ROW><id>13404365</id><snippet>libmysqlclient18 - MySQL database client library</snippet></ROW><ROW><id>13404365</id><snippet>pip install MySQL-python</snippet></ROW><ROW><id>13404365</id><snippet>MySQLdb</snippet></ROW><ROW><id>13404365</id><snippet>pip install</snippet></ROW><ROW><id>13404365</id><snippet>aptitude</snippet></ROW><ROW><id>13404365</id><snippet>pip install &lt;pacakge_name&gt;</snippet></ROW><ROW><id>13404459</id><snippet>print_html</snippet></ROW><ROW><id>13404459</id><snippet> def print_load_finished(self):
        print 'Load Finished'
        self.print_html()
</snippet></ROW><ROW><id>13404459</id><snippet>()</snippet></ROW><ROW><id>13404459</id><snippet>print_html</snippet></ROW><ROW><id>13404459</id><snippet>__init__</snippet></ROW><ROW><id>13404459</id><snippet>from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *
import sys

class Browser(QWebView):
    def __init__(self):
        super(Browser, self).__init__()
        self.loadFinished.connect(self.print_load_finished)
        self.loadProgress.connect(self.print_percent)

    def print_percent(self, percent):
        print percent

    def print_load_finished(self):
        print 'Load Finished'
        self.print_html()

    def print_html(self):
        frame = self.page().mainFrame()
        print unicode(frame.toHtml()).encode('utf-8')

if __name__=='__main__':
    app = QApplication(sys.argv)
    br = Browser()
    url = QUrl('http://python.org')
    br.load(url)
    br.show()
    app.exec_()
</snippet></ROW><ROW><id>13404537</id><snippet>class Child(Parent):
    foobar = Parent.foobar + ['world']
</snippet></ROW><ROW><id>13404736</id><snippet>csv.reader(fh, delimiter='|')
</snippet></ROW><ROW><id>13404866</id><snippet>'line'</snippet></ROW><ROW><id>13404866</id><snippet>traceback.format_stack</snippet></ROW><ROW><id>13404866</id><snippet>watcher.prev_st</snippet></ROW><ROW><id>13404866</id><snippet>trace_command</snippet></ROW><ROW><id>13404866</id><snippet>include</snippet></ROW><ROW><id>13404866</id><snippet>import traceback

class Watcher(object):
    def __init__(self, obj=None, attr=None, log_file='log.txt', include=[], enabled=False):
        """
            Debugger that watches for changes in object attributes
            obj - object to be watched
            attr - string, name of attribute
            log_file - string, where to write output
            include - list of strings, debug files only in these directories.
               Set it to path of your project otherwise it will take long time
               to run on big libraries import and usage.
        """

        self.log_file=log_file
        with open(self.log_file, 'wb'): pass
        self.prev_st = None
        self.include = [incl.replace('\\','/') for incl in include]
        if obj:
            self.value = getattr(obj, attr)
        self.obj = obj
        self.attr = attr
        self.enabled = enabled # Important, must be last line on __init__.

    def __call__(self, *args, **kwargs):
        kwargs['enabled'] = True
        self.__init__(*args, **kwargs)

    def check_condition(self):
        tmp = getattr(self.obj, self.attr)
        result = tmp != self.value
        self.value = tmp
        return result

    def trace_command(self, frame, event, arg):
        if event!='line' or not self.enabled:
            return self.trace_command
        if self.check_condition():
            if self.prev_st:
                with open(self.log_file, 'ab') as f:
                    print &gt;&gt;f, "Value of",self.obj,".",self.attr,"changed!"
                    print &gt;&gt;f,"###### Line:"
                    print &gt;&gt;f,''.join(self.prev_st)
        if self.include:
            fname = frame.f_code.co_filename.replace('\\','/')
            to_include = False
            for incl in self.include:
                if fname.startswith(incl):
                    to_include = True
                    break
            if not to_include:
                return self.trace_command
        self.prev_st = traceback.format_stack(frame)
        return self.trace_command
import sys
watcher = Watcher()
sys.settrace(watcher.trace_command)
</snippet></ROW><ROW><id>13404866</id><snippet>from watcher import watcher
import numpy as np
import urllib2
class X(object):
    def __init__(self, foo):
        self.foo = foo

class Y(object):
    def __init__(self, x):
        self.xoo = x

    def boom(self):
        self.xoo.foo = "xoo foo!"
def main():
    x = X(50)
    watcher(x, 'foo', log_file='log.txt', include =['C:/Users/j/PycharmProjects/hello'])
    x.foo = 500
    x.goo = 300
    y = Y(x)
    y.boom()
    arr = np.arange(0,100,0.1)
    arr = arr**2
    for i in xrange(3):
        print 'a'
        x.foo = i

    for i in xrange(1):
        i = i+1

main()
</snippet></ROW><ROW><id>13404886</id><snippet>ECONNREFUSED</snippet></ROW><ROW><id>13404886</id><snippet>ETIMEOUT</snippet></ROW><ROW><id>13404886</id><snippet>socket.recv()</snippet></ROW><ROW><id>13404886</id><snippet>EPOLLIN</snippet></ROW><ROW><id>13404886</id><snippet>recv</snippet></ROW><ROW><id>13405331</id><snippet>import re

def get_matcher(word, minchars):
    reg = '|'.join([word[0:i] for i in range(len(word), minchars - 1, -1)])
    return re.compile('(%s)$' % (reg))

matcher = get_matcher('potato', 4)
for s in ["this is a sentence about a potato", "this is a sentence about a potat", "this is another sentence about a pota"]:
    print matcher.search(s).groups()
</snippet></ROW><ROW><id>13405331</id><snippet>('potato',)
('potat',)
('pota',)
</snippet></ROW><ROW><id>13405531</id><snippet>f_set = inlineformset_factory(ModelB, ModelA, extra=1)
</snippet></ROW><ROW><id>13405531</id><snippet>div</snippet></ROW><ROW><id>13405531</id><snippet>one_to_many</snippet></ROW><ROW><id>13405531</id><snippet>&lt;form&gt;
   &lt;div id="one_to_many"&gt;
       {{f_set.as_table}}
   &lt;/div&gt;
&lt;/form&gt;

#This will render some thing like this
&lt;form&gt;
    &lt;div id="one_to_many"&gt;
        &lt;table&gt;
            &lt;tr&gt;
               &lt;th&gt;
                   &lt;label for="id_form-0-field_name"&gt;Field Name:&lt;/label&gt;
               &lt;/th&gt;
               &lt;td&gt;
                  &lt;input id="id_form-0-field_name" type="text" name="form-0-field_name" value="" maxlength="100" /&gt;
                  &lt;input type="hidden" name="form-0-id" value="1" id="id_form-0-id" /&gt;  
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
        &lt;input type="button" value="Add More Field" id="add_more"&gt;
    &lt;/div&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>13405531</id><snippet>jquery</snippet></ROW><ROW><id>13405531</id><snippet>$(document).ready(function(){
        $('#add_more').click(function(){
            var tbl = $('#one_to_many').children('table');
            var last_id = parseInt(tbl.find('input[type=hidden]').last().val());
            var next_id = last_id + 1;
            htm = '&lt;tr&gt;&lt;th&gt;&lt;label for="id_form-'+last_id+'-field_name"&gt;Field Name:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input id="id_form-'+last_id+'-field_name" type="text" name="form-'+last_id+'-field_name" value="" maxlength="100" /&gt;&lt;input type="hidden" name="form-'+last_id+'-id" value="'+next_id+'" id="id_form-'+last_id+'-id" /&gt;&lt;/td&gt;&lt;/tr&gt;'
            tbl.find('tr').last().after(htm);

        });    
    });
</snippet></ROW><ROW><id>13405531</id><snippet>as_table</snippet></ROW><ROW><id>13405562</id><snippet>itertools.izip</snippet></ROW><ROW><id>13405562</id><snippet>for line1, line2 in itertools.izip(f1, f2):
    # do whatever
</snippet></ROW><ROW><id>13405562</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>13405562</id><snippet>for line1, line2 in f1, f2</snippet></ROW><ROW><id>13405562</id><snippet>(f1, f2)</snippet></ROW><ROW><id>13405601</id><snippet>ifile = open('example.csv', 'r')
reader = csv.reader(ifile, delimiter = ';')
print reader.next()
</snippet></ROW><ROW><id>13405601</id><snippet>['Cat', 'Mouse', 'Dog']
</snippet></ROW><ROW><id>13405910</id><snippet>bitarray</snippet></ROW><ROW><id>13405935</id><snippet>logging</snippet></ROW><ROW><id>13405935</id><snippet>RotatingFileHandler</snippet></ROW><ROW><id>13405935</id><snippet>RotatingFileHandler.doRollover()</snippet></ROW><ROW><id>13406203</id><snippet>if currentHour &lt; startHour:
   currentHour += 24
if endHour &lt; startHour:
   endHour += 24

if currentHour &gt;= startHour and currentHour &lt;= endHour:
   //...code
</snippet></ROW><ROW><id>13406215</id><snippet>Tkinter.Toplevel(master, class_='ClassName')</snippet></ROW><ROW><id>13406215</id><snippet>def _createTag(tag, **attributes):
    out = "&lt;" + tag
    if attributes:
        for attr, value in attributes.items():
            out += " " + attr.rstrip('_') + "=\"" + value + "\""
    out += "&gt;"
    return out
</snippet></ROW><ROW><id>13406215</id><snippet>&gt;&gt;&gt; h2('contents', class_='myh2tag', id_='contenttag')
'&lt;h2 class="myh2tag" id="contenttag"&gt;contents&lt;/h2&gt;'
</snippet></ROW><ROW><id>13406367</id><snippet>setup.cfg</snippet></ROW><ROW><id>13406367</id><snippet>setup.py</snippet></ROW><ROW><id>13406367</id><snippet>[easy_install]
allow_hosts = local.mirror
</snippet></ROW><ROW><id>13406617</id><snippet>db.zips.aggregate([ {$group:{_id:{state:"$state"},numberOfzipcodes:{$sum:1}}}, {$sort:{numberOfzipcodes:-1}}, {$limit:4}])
</snippet></ROW><ROW><id>13406659</id><snippet> for i in range(len(M)):
     for j in range(len(N[0])):
         for k in range(len(N)):
             P[i][j] += M[i][k] * N[k][j]
</snippet></ROW><ROW><id>13406659</id><snippet>T = 1  # eval('T') will be 1
F = 0  # eval('F') will be 0
</snippet></ROW><ROW><id>13406659</id><snippet>P[i][j] += eval(M[i][k]) * eval(N[k][j])
</snippet></ROW><ROW><id>13406659</id><snippet>M = [['T', 'T'], ['F', 'F'], ['T', 'T']]             #sample values
N = [['F', 'F', 'F', 'F'], ['T', 'T', 'T', 'T']]

T = 1
F = 0

P = [] 

for i in range(len(M)):                              #result matrix creation
    P.append([None] * len(N[0]))

for i in range(len(M)):
    for j in range(len(N[0])):
        P[i][j] = 0                                  #initialization
        for k in range(len(N)):
            P[i][j] |= eval(M[i][k]) &amp; eval(N[k][j]) #logical operators
        P[i][j] = 'T' if P[i][j] else 'F'            #conversion back to 'T' and 'F'

print P
</snippet></ROW><ROW><id>13406659</id><snippet>[['T', 'T', 'T', 'T'], ['F', 'F', 'F', 'F'], ['T', 'T', 'T', 'T']]
</snippet></ROW><ROW><id>13406715</id><snippet>eval('turtle.{0}'.format(t))
</snippet></ROW><ROW><id>13406715</id><snippet>t = 'forward(90) or __import__("os").system("rm -rf ~")'
</snippet></ROW><ROW><id>13406715</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>13406715</id><snippet>import ast

#...
funcname,args = t.split('(',1)
args = ast_literal_eval('('+args)
if hasattr(args,'__iter__'):
    getattr(turtle,funcname)(*args)
else:
    getattr(turtle,funcname)(args)
</snippet></ROW><ROW><id>13406881</id><snippet>$fields = array(
    'METHOD'      =&gt; 'createuser',
    'FirstName'   =&gt; 'Jon',
    'LastName'    =&gt; 'Snow',
    'Password'    =&gt; 'test',
    'PrincipalID' =&gt; '3a1c8128-908f-4455-8157-66c96a46f75e');

$curl = curl_init("http://localhost:8003/accounts");
curl_setopt($curl, CURLOPT_POST, true);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_POSTFIELDS, $fields);

echo curl_exec($curl);
</snippet></ROW><ROW><id>13406889</id><snippet>for roll in range(amount):
        rolls += roll(dice)
</snippet></ROW><ROW><id>13406889</id><snippet>roll(dice)</snippet></ROW><ROW><id>13406889</id><snippet>roll</snippet></ROW><ROW><id>13406889</id><snippet>for</snippet></ROW><ROW><id>13406889</id><snippet>for number in range(amount):
    rolls += roll(dice) 
</snippet></ROW><ROW><id>13406974</id><snippet>import shapefile as sf
import os

filename2 = 'test/point16'

lis = [(33.21, -122.15, 'france'), (35.31, -122.15, 'germany'), (35.41, -123.15, 'Hawaii'), (30.51, -122.15, 'Philippines'),(32.30, -122.15, 'Texas')]

w = sf.Writer(sf.POINT)
w.field('location')

for l in lis:
    w.point(l[0], l[1])
    w.record(l[2], 'Point')
w.save(filename2)

# create the PRJ file
prj = open("%s.prj" % filename2, "w")
epsg = 'GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433]]'
prj.write(epsg)
prj.close()
</snippet></ROW><ROW><id>13407128</id><snippet>help()</snippet></ROW><ROW><id>13407128</id><snippet>help(string.join)</snippet></ROW><ROW><id>13407128</id><snippet>string</snippet></ROW><ROW><id>13407128</id><snippet>.join()</snippet></ROW><ROW><id>13407128</id><snippet>col_list = '&lt;br /&gt;'.join('&lt;input type="checkbox" name="..." /&gt;%s' % filename
                         for filename in listfiles)
</snippet></ROW><ROW><id>13407146</id><snippet>my_list</snippet></ROW><ROW><id>13407146</id><snippet>def simple(my_list):
    return [third_transformation(second_transformation(first_transformation(e)))
            for e in my_list]
</snippet></ROW><ROW><id>13407146</id><snippet>one_pass: 0.839533090591
multi_pass: 0.840938806534
simple: 0.569097995758
</snippet></ROW><ROW><id>13407171</id><snippet>yhat = fftpack.rfft(yReal)
idx = (yhat**2).argmax()
freqs = fftpack.rfftfreq(N, d = (xReal[1]-xReal[0])/(2*pi))
frequency = freqs[idx]
</snippet></ROW><ROW><id>13407171</id><snippet>amplitude = yReal.max()
</snippet></ROW><ROW><id>13407171</id><snippet>import numpy as np
import scipy.optimize as optimize
import scipy.fftpack as fftpack
import matplotlib.pyplot as plt
pi = np.pi
plt.figure(figsize = (15, 5))

# generate a perfect data set (my real data have tiny error)
def mysine(x, a1, a2, a3):
    return a1 * np.sin(a2 * x + a3)

N = 5000
xmax = 10
xReal = np.linspace(0, xmax, N)
a1 = 200.
a2 = 2*pi/10.5  # omega, 10.5 is the period
a3 = np.deg2rad(10.) # 10 degree phase offset
print(a1, a2, a3)
yReal = mysine(xReal, a1, a2, a3) + 0.2*np.random.normal(size=len(xReal))

yhat = fftpack.rfft(yReal)
idx = (yhat**2).argmax()
freqs = fftpack.rfftfreq(N, d = (xReal[1]-xReal[0])/(2*pi))
frequency = freqs[idx]

amplitude = yReal.max()
guess = [amplitude, frequency, 0.]
print(guess)
(amplitude, frequency, phase), pcov = optimize.curve_fit(
    mysine, xReal, yReal, guess)

period = 2*pi/frequency
print(amplitude, frequency, phase)

xx = xReal
yy = mysine(xx, amplitude, frequency, phase)
# plot the real data
plt.plot(xReal, yReal, 'r', label = 'Real Values')
plt.plot(xx, yy , label = 'fit')
plt.legend(shadow = True, fancybox = True)
plt.show()
</snippet></ROW><ROW><id>13407171</id><snippet>(200.0, 0.5983986006837702, 0.17453292519943295)   # (a1, a2, a3)
[199.61981404516041, 0.61575216010359946, 0.0]     # guess
(200.06145097308041, 0.59841420869261097, 0.17487141943703263) # fitted parameters
</snippet></ROW><ROW><id>13407171</id><snippet>optimize.curve_fit</snippet></ROW><ROW><id>13407284</id><snippet>dict.fromkeys((tuple(i) for i in [[1,2],[3,4]]), 0)
</snippet></ROW><ROW><id>13407284</id><snippet>{tuple(i): 0 for i in [[1,2], [3,4]]}
</snippet></ROW><ROW><id>13407284</id><snippet>&gt;&gt;&gt; collections.Counter(tuple(i) for i in [[1,2], [1,2], [3,4]])
Counter({(1, 2): 2, (3, 4): 1})
</snippet></ROW><ROW><id>13407328</id><snippet>    size_t SIZEOF_FOO = sizeof(foo_t);
</snippet></ROW><ROW><id>13407328</id><snippet>foosizes.so</snippet></ROW><ROW><id>13407328</id><snippet>    from ctypes import *
    foosizeslib = CDLL('foosizes.so')
    sizeof_foo = c_ulong.in_dll(foosizeslib, 'SIZEOF_FOO')
</snippet></ROW><ROW><id>13407575</id><snippet>C = numpy.sum(A * B, -1)
</snippet></ROW><ROW><id>13407575</id><snippet>C = numpy.einsum("...i,...i-&gt;...", A, B)
</snippet></ROW><ROW><id>13407713</id><snippet>EnemyTank = allgroup
</snippet></ROW><ROW><id>13407713</id><snippet>allgroup pygame.sprite.Group()
e_tank = EnemyTank()
allgroup.add(e_tank)
# Or..
e_tank.add(allgroup)
</snippet></ROW><ROW><id>13407845</id><snippet>from math import log10
def rev(num):
    if num &lt; 10:
        return num
    else:
        ones = num % 10
        rest = num // 10
        #print ones, rest, int(log10(rest) + 1), ones * 10 ** int(log10(rest) + 1)
        return ones * 10 ** int(log10(rest) + 1) + rev(rest)
print rev(9000), rev(1234), rev(1234567890123456789)
</snippet></ROW><ROW><id>13407845</id><snippet>log10</snippet></ROW><ROW><id>13407845</id><snippet>def rev(num):
    def rec(num, tens):
        if num &lt; 10:
            return num        
        else:
            return num % 10 * tens + rec(num // 10, tens // 10)
    return rec(num, 10 ** int(log10(num)))
</snippet></ROW><ROW><id>13407861</id><snippet>save</snippet></ROW><ROW><id>13407861</id><snippet>size</snippet></ROW><ROW><id>13407861</id><snippet>class file_counter(object):
    def __init__(self):
        self.position = self.size = 0

    def seek(self, offset, whence=0):
        if whence == 1:
            offset += self.position
        elif whence == 2:
            offset += self.size
        self.position = min(offset, self.size)
        self.size = max(self.size, self.position)

    def tell(self):
        return self.position

    def write(self, string):
        self.position += len(string)
        self.size = max(self.size, self.position)
</snippet></ROW><ROW><id>13407890</id><snippet>coolmod = __import__('coolm')
coolm.someproperty
</snippet></ROW><ROW><id>13407890</id><snippet>import importlib
coolmod = importlib.import_module('coolm', 'cool')
</snippet></ROW><ROW><id>13408250</id><snippet>l = [1,2,3,3,4]

print sorted(set(itertools.permutations(l,3)))
</snippet></ROW><ROW><id>13408250</id><snippet>[(1, 2, 3), (1, 2, 4), (1, 3, 2), (1, 3, 3), (1, 3, 4), ..., (4, 3, 3)]
</snippet></ROW><ROW><id>13408250</id><snippet>gen = itertools.permutations(l,3)
s = set()

for i in gen:
    if i not in s:
        print i  # or do anything else
    # if some_cond: break
    s.add(i)
</snippet></ROW><ROW><id>13408250</id><snippet>gen</snippet></ROW><ROW><id>13408270</id><snippet>from tempfile import mktemp
from os import path
from os import remove as delfile
class excel:
    def __init__( self):
        self.app = DispatchEx( "Excel.Application" )
        self.dct =     {51:'xlsx',
                        52:'xlsm',
                        50:'xlsb',
                        56:'xls'
                        }

    def saveas_default_ext_format( self, workbook, filename):
        # filename - file name with path but without extension


        fullname = '.'.join((filename, self.dct[self.app.DefaultSaveFormat]))
        workbook.SaveAs( fullname)

        return fullname
</snippet></ROW><ROW><id>13408415</id><snippet>class URLOpener():      
    def opener(self,user_agent):
        cj=cookielib.CookieJar()
        #Process Hadlers
        opener=urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
        opener.addheaders=[
                        ('User-Agent', user_agent),
                        ('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'),
                        ('Accept-Language', 'en-gb,en;q=0.5'),
                        ('Accept-Charset', 'ISO-8859-1,utf-8;q=0.7,*;q=0.7'),
                        ('Keep-Alive', '115'),
                        ('Connection', 'keep-alive'),
                        ('Cache-Control', 'max-age=0'),
                    ]
        return opener

    #Openers with different User-Agents
    def opener_list(self,f_path):
        #f_path is a path to the file that contains browsers
        f=open(f_path, 'r+')
        count=0
        user_agent_list=list()
        for line in f.xreadlines():
            count+=1
            user_agent_list.append(line[:-1])
        openers=[self.opener(user_agent) for user_agent in user_agent_list]
        return openers
</snippet></ROW><ROW><id>13408415</id><snippet>Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30
Mozilla/5.0 (Linux; U; Android 4.0.3; de-ch; HTC Sensation Build/IML74K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30
Mozilla/5.0 (Linux; U; Android 2.3; en-us) AppleWebKit/999+ (KHTML, like Gecko) Safari/999.9
Mozilla/5.0 (Linux; U; Android 2.3.5; zh-cn; HTC_IncredibleS_S710e Build/GRJ90) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
Mozilla/5.0 (Linux; U; Android 2.3.5; en-us; HTC Vision Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
Mozilla/5.0 (Linux; U; Android 2.3.4; fr-fr; HTC Desire Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; T-Mobile myTouch 3G Slide Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC_Pyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC_Pyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari
Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC Pyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1
</snippet></ROW><ROW><id>13408568</id><snippet>True</snippet></ROW><ROW><id>13408568</id><snippet>from PyQt4 import QtCore, QtGui, QtWebKit

class WebViewCreator(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.view = QtWebKit.QWebView(self)
        self.view.loadFinished.connect(self.load_finished)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.view)
        self.view.load(QtCore.QUrl('http://stackoverflow.com/'))

    def load_finished(self, ok):
        print ok

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = WebViewCreator()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13408739</id><snippet>def game():</snippet></ROW><ROW><id>13408739</id><snippet>global strawsNumber
strawsNumber=random.randint(10,20)
</snippet></ROW><ROW><id>13408739</id><snippet>answer=input("Do you want to play again?(y/n)")</snippet></ROW><ROW><id>13408739</id><snippet>while answer=="y":</snippet></ROW><ROW><id>13408893</id><snippet>def get_spans(angle):
    spans = Spans.objects.values_list('span', flat=True).filter(
        max_roof_angle=angle,
    )
    max_span = max(spans)
    return max_span
</snippet></ROW><ROW><id>13408941</id><snippet>sorted</snippet></ROW><ROW><id>13408941</id><snippet>key</snippet></ROW><ROW><id>13408941</id><snippet>order</snippet></ROW><ROW><id>13408941</id><snippet>&gt;&gt;&gt; sorted(mylist,key=lambda x: order.index(x[1]))

[('object', 'w'), ('object', 'x'), ('object', 'a'), ('object', 'a'), ('object', 'z')]
</snippet></ROW><ROW><id>13408941</id><snippet>order</snippet></ROW><ROW><id>13408941</id><snippet>sorted(mylist,key=lambda x: x[1] in order and order.index(x[1]) or len(order)+1)
</snippet></ROW><ROW><id>13408941</id><snippet>order</snippet></ROW><ROW><id>13409002</id><snippet>1.4142135623260401189327239990234375
</snippet></ROW><ROW><id>13409002</id><snippet>float</snippet></ROW><ROW><id>13409096</id><snippet>hide()</snippet></ROW><ROW><id>13409096</id><snippet>show()</snippet></ROW><ROW><id>13409096</id><snippet>from PySide import QtGui, QtCore, QtWebKit

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.view = QtWebKit.QWebView(self)
        self.view.settings().setAttribute(
            QtWebKit.QWebSettings.WebAttribute.DeveloperExtrasEnabled, True)
        self.inspector = QtWebKit.QWebInspector(self)
        self.inspector.setPage(self.view.page())
        self.inspector.hide()
        self.splitter = QtGui.QSplitter(self)
        self.splitter.addWidget(self.view)
        self.splitter.addWidget(self.inspector)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.splitter)
        QtGui.QShortcut(QtGui.QKeySequence('F7'), self,
            self.handleShowInspector)

    def handleShowInspector(self):
        self.inspector.setShown(self.inspector.isHidden())

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.view.load(QtCore.QUrl('http://www.google.com'))
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13409100</id><snippet>*</snippet></ROW><ROW><id>13409100</id><snippet>i = [0] * 5
</snippet></ROW><ROW><id>13409100</id><snippet>&gt;&gt;&gt; i = [0] * 5
&gt;&gt;&gt; i
[0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>13409100</id><snippet>i</snippet></ROW><ROW><id>13409100</id><snippet>i</snippet></ROW><ROW><id>13409103</id><snippet>rings=rings.rstrip('\n')
rings_int = int(rings)
sum_of_rings += rings_int
</snippet></ROW><ROW><id>13409103</id><snippet>import re

m = re.search('\d+', rings)
if m:
    rings_int_str = m.group()
    rings_int = int( rings_int_str )
    sum_of_rings += rings_int
</snippet></ROW><ROW><id>13409103</id><snippet>sum_of_rings += int( text_file.readline() )
</snippet></ROW><ROW><id>13409103</id><snippet>avg=score_sum/5.0
print "%f" % (avg)
print str(avg)
</snippet></ROW><ROW><id>13409117</id><snippet>r'T.{18}(?:TT|AA|CC|GG)'
</snippet></ROW><ROW><id>13409238</id><snippet>import numpy as np
import matplotlib.pyplot as plt

class Pendulum:

    def __init__(self):
        self.fig = plt.figure()

    def plot1(self):
        ax = self.fig.add_subplot(211)
        ax.plot([1,2],[3,4])

    def plot2(self):
        ax = self.fig.add_subplot(212)
        ax.plot([1,2],[4,3])

p = Pendulum()
p.plot1()
p.plot2()
plt.show()
</snippet></ROW><ROW><id>13409383</id><snippet>crypt.METHOD_CRYPT</snippet></ROW><ROW><id>13409383</id><snippet>crypt.METHOD_CRYPT</snippet></ROW><ROW><id>13409383</id><snippet>crypt.crypt()</snippet></ROW><ROW><id>13409383</id><snippet>wordchars</snippet></ROW><ROW><id>13409383</id><snippet>crypt.crypt()</snippet></ROW><ROW><id>13409383</id><snippet>from crypt import crypt
from itertools import product
from string import ascii_letters, digits

def decrypt(crypted, charset=ascii_letters + digits):
    # find hash for all 4-char strings from the charset
    # and compare with the given hash
    for candidate in map(''.join, product(charset, repeat=4)):
        if crypted == crypt(candidate, crypted):
            return candidate
</snippet></ROW><ROW><id>13409383</id><snippet>salt, hashed = 'qb', '1Y.qWr.DHs6'
print(decrypt(salt + hashed))
# -&gt; e2e4
assert crypt('e2e4', 'qb') == (salt + hashed)
</snippet></ROW><ROW><id>13409383</id><snippet>crypt</snippet></ROW><ROW><id>13409383</id><snippet>e2e4</snippet></ROW><ROW><id>13409383</id><snippet>qb</snippet></ROW><ROW><id>13409383</id><snippet>qb1Y.qWr.DHs6</snippet></ROW><ROW><id>13409383</id><snippet>qb</snippet></ROW><ROW><id>13409450</id><snippet>with open('some_file.dat', 'w') as f:
    for x in xrange(10):  # assume 10 cycles
        line = []
        # ... (here is your code, appending data to line) ...
        f.write('%r\n' % line)  # here you write representation to separate line
</snippet></ROW><ROW><id>13409450</id><snippet>[[],[],[]]</snippet></ROW><ROW><id>13409450</id><snippet>[]</snippet></ROW><ROW><id>13409450</id><snippet>['n1','n2','n3']</snippet></ROW><ROW><id>13409450</id><snippet>lines = []  # container for a list of lines
for x in xrange(10):  # assume 10 cycles
    line = []
    # ... (here is your code, appending data to line) ...
    lines.append('%r\n' % line)  # here you add line to the list of lines
# here "lines" is your list of cycle results
with open('some_file.dat', 'w') as f:
    f.writelines(lines)
</snippet></ROW><ROW><id>13409450</id><snippet>csv</snippet></ROW><ROW><id>13409546</id><snippet>$type</snippet></ROW><ROW><id>13409546</id><snippet>$match</snippet></ROW><ROW><id>13409546</id><snippet>db.zips.aggregate([
    {$project : {city:{$substr:["$city",0,1]}}},
    {$sort : {city : 1}}, 
    {$match: {city: {$type: 16}}}      // city is a 32-bit integer
]);
</snippet></ROW><ROW><id>13409546</id><snippet>32-bit integer   16
64-bit integer   18
Double           1
</snippet></ROW><ROW><id>13409546</id><snippet>$or</snippet></ROW><ROW><id>13409546</id><snippet>db.zips.aggregate([
    {$project : {city:{$substr:["$city",0,1]}}},
    {$sort : {city : 1}}, 
    {$match: {$or: [{city: {$type: 1}}, {city: {$type: 16}}, {city: {$type: 18}}]}}
]);
</snippet></ROW><ROW><id>13409546</id><snippet>$not</snippet></ROW><ROW><id>13409546</id><snippet>city</snippet></ROW><ROW><id>13409546</id><snippet>db.zips.aggregate([
    {$project : {city:{$substr:["$city",0,1]}}},
    {$sort : {city : 1}}, 
    {$match: {city: {$not: {$type: 2}}}}      // city is not a string
]);
</snippet></ROW><ROW><id>13409546</id><snippet>city</snippet></ROW><ROW><id>13409546</id><snippet>db.zips.aggregate([
    {$project : {city:{$substr:["$city",0,1]}}},
    {$sort : {city : 1}}, 
    {$match: {city: /^\d.*$/}}      // city is all digits
]);
</snippet></ROW><ROW><id>13409613</id><snippet>r</snippet></ROW><ROW><id>13409613</id><snippet>In [19]: s = r"{ 'name': 'Skrillex', 'Genre':'Dubstep', 'Bass': 'Heavy', 'thoughts': 'this\'s ahmazing'}"
In [20]: s.replace("\\'", 'REPLACEMEOHYEAH').replace("'", '"').replace('REPLACEMEOHYEAH', "\\'")
Out[20]: '{ "name": "Skrillex", "Genre":"Dubstep", "Bass": "Heavy", "thoughts": "this\'s ahmazing"}'
</snippet></ROW><ROW><id>13409613</id><snippet>REPLACEMEOHYEAH</snippet></ROW><ROW><id>13409786</id><snippet>from pyparsing import *

class InvalidArgumentException(ParseFatalException):
    def __init__(self, s, loc, msg):
        super(InvalidArgumentException, self).__init__(
                s, loc, "invalid argument '%s'" % msg)

class InvalidFunctionException(ParseFatalException): 
    def __init__(self, s, loc, msg):
        super(InvalidFunctionException, self).__init__(
                s, loc, "invalid function '%s'" % msg)

def error(exceptionClass):
    def raise_exception(s,l,t):
        raise exceptionClass(s,l,t[0])
    return Word(alphas,alphanums).setParseAction(raise_exception)

LPAR,RPAR = map(Suppress, "()")
valid_arguments = ['abc', 'bcd', 'efg']
valid_functions = ['avg', 'min', 'max']
argument = oneOf(valid_arguments) | error(InvalidArgumentException)
function_name = oneOf(valid_functions)  | error(InvalidFunctionException)
# add some results names to make it easier to get at the parsed data
function_call = Group(function_name('fname') + LPAR + argument('arg') + RPAR)

tests = """\
    avg(abc)
    sum(abc)
    avg(xyz)
    """.splitlines()
for test in tests:
    if not test.strip(): continue
    try:
        print test.strip()
        result = function_call.parseString(test)
    except ParseBaseException as pe:
        print pe
    else:
        print result[0].dump()
    print
</snippet></ROW><ROW><id>13409786</id><snippet>avg(abc)
['avg', 'abc']
- arg: abc
- fname: avg

sum(abc)
invalid function 'sum' (at char 4), (line:1, col:5)

avg(xyz)
invalid argument 'xyz' (at char 8), (line:1, col:9)
</snippet></ROW><ROW><id>13409902</id><snippet>from collections import Counter
Counter( ['a','b','a','c','b','a','c'] )
</snippet></ROW><ROW><id>13409902</id><snippet>from collections import defaultdict
d = defaultdict(int)
for x in lVals:
    d[x] += 1
</snippet></ROW><ROW><id>13409902</id><snippet>def get_cnt(lVals):
    d = dict(zip(lVals, [0]*len(lVals)))
    for x in lVals:
        d[x] += 1
    return d   
</snippet></ROW><ROW><id>13409909</id><snippet>getattr()</snippet></ROW><ROW><id>13409909</id><snippet>[getattr(A, attr).name for attr in ["sample", "species", "factor", "cell", "population"]
</snippet></ROW><ROW><id>13410195</id><snippet>read()</snippet></ROW><ROW><id>13410195</id><snippet>def pagesubs(N, *subs):
    assert type(N)==str
    with open(N,'r') as F:
        content = F.read()
    return content.format(subs)
</snippet></ROW><ROW><id>13410311</id><snippet>import os
from datetime import datetime
from calendar import timegm
import sys
st_info = os.stat('foo.py')
st_info.st_atime #acces time
st_info.st_mtime #modified time
mtime = st_info.st_mtime
atime = st_info.st_atime
# send over the wire
os.utime('foo.py', (atime, mtime))
</snippet></ROW><ROW><id>13410565</id><snippet> &gt;&gt;&gt; range(10) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 &gt;&gt;&gt; range(1, 11) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
 &gt;&gt;&gt; range(0, 30, 5) [0, 5, 10, 15, 20, 25]
 &gt;&gt;&gt; range(0, 10, 3) [0, 3, 6, 9]
 &gt;&gt;&gt; range(0, -10, -1) [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
 &gt;&gt;&gt; range(0) []
 &gt;&gt;&gt; range(1, 0) []
</snippet></ROW><ROW><id>13410565</id><snippet>range(0,6,2)
</snippet></ROW><ROW><id>13410565</id><snippet>idx = None
for i in range(len(str1)):
    if idx and i &lt; idx:
        continue
    for j in range(len(str2)):
        if str1[i+j] != str2[j]:
            break
    else:
        idx = i+j
</snippet></ROW><ROW><id>13410702</id><snippet>__getitem__()</snippet></ROW><ROW><id>13410702</id><snippet>None</snippet></ROW><ROW><id>13410702</id><snippet>__getitem__</snippet></ROW><ROW><id>13410702</id><snippet>list</snippet></ROW><ROW><id>13410702</id><snippet>dict</snippet></ROW><ROW><id>13410702</id><snippet>list</snippet></ROW><ROW><id>13410702</id><snippet>__getitem__()</snippet></ROW><ROW><id>13410702</id><snippet>import types

class NoWrap(object):

    def __init__(self, obj, default=None):
        self._obj = obj 
        self._default = default

    def __getitem__(self, key):
        if type(key) is types.IntType:
            if key &lt; 0:
                return self._default

        return self._obj.__getitem__(key)

In [12]: x = range(-10,10)
In [13]: x_wrapped = NoWrap(x)
In [14]: print x_wrapped[5]
-5
In [15]: print x_wrapped[-1]
None 
In [16]: x_wrapped = NoWrap(x, 'FOO')
In [17]: print x_wrapped[-1]
FOO
</snippet></ROW><ROW><id>13410751</id><snippet>def printValue(self, value):
</snippet></ROW><ROW><id>13411003</id><snippet>set</snippet></ROW><ROW><id>13411003</id><snippet>set</snippet></ROW><ROW><id>13411003</id><snippet>In [1]: r1 = [9,3,2,5,4,8,1,7,6]

In [2]: r2 = [1,8,7,9,2,6,5,4,3]

In [3]: r3 = [5,4,6,3,7,1,2,8,9]

# Continues....
</snippet></ROW><ROW><id>13411003</id><snippet>In [4]: sec1 = [r1, r2, r3]

In [5]: nums = set(range(1, 10))

In [6]: nums == set(n for row in sec1 for n in row[:3])
Out[6]: True
</snippet></ROW><ROW><id>13411003</id><snippet>for</snippet></ROW><ROW><id>13411003</id><snippet>result = set()
for row in sec1:
    for n in row[:3]:
      result.add(n)
</snippet></ROW><ROW><id>13411003</id><snippet>row[:3]</snippet></ROW><ROW><id>13411003</id><snippet>row[3:6]</snippet></ROW><ROW><id>13411003</id><snippet>row[6:9]</snippet></ROW><ROW><id>13411048</id><snippet>exclude</snippet></ROW><ROW><id>13411048</id><snippet>distinct</snippet></ROW><ROW><id>13411048</id><snippet>CharField</snippet></ROW><ROW><id>13411048</id><snippet>NULL</snippet></ROW><ROW><id>13411048</id><snippet>null=True</snippet></ROW><ROW><id>13411048</id><snippet>blank=True</snippet></ROW><ROW><id>13411048</id><snippet>Q</snippet></ROW><ROW><id>13411048</id><snippet> everything = Everything.objects.exclude(Q(playlist=None) | Q(playlist='')).distinct()
</snippet></ROW><ROW><id>13411048</id><snippet>null=True</snippet></ROW><ROW><id>13411048</id><snippet> everything = Everything.objects.exclude(playlist=None).distinct()
</snippet></ROW><ROW><id>13411070</id><snippet>Bundle</snippet></ROW><ROW><id>13411070</id><snippet>def __init__(self, *contents, **options):
</snippet></ROW><ROW><id>13411070</id><snippet>Bundle('common/inheritance.js', 'portal/js/common.js',
   'portal/js/plot.js', 'portal/js/ticker.js',
   filters='jsmin',
   output='gen/packed.js')
</snippet></ROW><ROW><id>13411070</id><snippet>files = ['common/inheritance.js', 'portal/js/common.js', 
         'portal/js/plot.js', 'portal/js/ticker.js']
Bundle(*files, filters='jsmin', output='gen/packed.js')
</snippet></ROW><ROW><id>13411245</id><snippet>in</snippet></ROW><ROW><id>13411245</id><snippet>index</snippet></ROW><ROW><id>13411245</id><snippet>&gt;&gt;&gt; [1, 2, 5, 8, -1, 2].index(2)
1
</snippet></ROW><ROW><id>13411273</id><snippet>zip</snippet></ROW><ROW><id>13411273</id><snippet>for num, name in zip(numbers, names):
    print('{0}, {1}'.format(num, name))
</snippet></ROW><ROW><id>13411358</id><snippet>Cursor.execute</snippet></ROW><ROW><id>13411358</id><snippet>fetchall</snippet></ROW><ROW><id>13411358</id><snippet>cursor = g.db.cursor()
cursor.execute(sql)
user = cursor.fetchall()
</snippet></ROW><ROW><id>13411641</id><snippet>upload_file</snippet></ROW><ROW><id>13411641</id><snippet>globalsource</snippet></ROW><ROW><id>13411641</id><snippet>global globalsource</snippet></ROW><ROW><id>13411641</id><snippet>upload_file</snippet></ROW><ROW><id>13411641</id><snippet>global</snippet></ROW><ROW><id>13411641</id><snippet>global globalsource
globalsource = str(username) + "@" + str(url)
</snippet></ROW><ROW><id>13411724</id><snippet>items</snippet></ROW><ROW><id>13411724</id><snippet>additem</snippet></ROW><ROW><id>13411724</id><snippet>items = {}</snippet></ROW><ROW><id>13411724</id><snippet>self.item = str(item)</snippet></ROW><ROW><id>13411724</id><snippet>self.item</snippet></ROW><ROW><id>13411724</id><snippet>items</snippet></ROW><ROW><id>13411724</id><snippet>class Store:

    def __init__(self, name, email):
        self.name = name
        self.email = email
        self.items = {}

    # rest of your code here. . .

    def additem(self, item, price):
        self.items[str(item)] = float(price)

    def delitem(self, item):
        del self.items[str(item)]

    def displayinventory(self):
        return self.items
</snippet></ROW><ROW><id>13411724</id><snippet>items</snippet></ROW><ROW><id>13411810</id><snippet>__builtin__</snippet></ROW><ROW><id>13411810</id><snippet>bltinmodule.c</snippet></ROW><ROW><id>13412377</id><snippet>hash()</snippet></ROW><ROW><id>13412377</id><snippet> with open("data1.txt") as f:
    lis=[x.split(",") for x in f]
    items=[map(lambda y:hash(y.strip()),x) for x in lis]
    for x in items:
        print ",".join(map(str,x))
   ....:         


-1319295970,1155173045
-1319295970,-1963774321
-1963774321,-1499251772
-1499251772,1155173045
</snippet></ROW><ROW><id>13412377</id><snippet>iterools.count</snippet></ROW><ROW><id>13412377</id><snippet>In [80]: c=count(1)

In [81]: with open("data1.txt") as f:
    lis=[map(str.strip,x.split(",")) for x in f]
    dic={}
    for x in set(chain(*lis)):
        dic.setdefault(x.strip(),next(c))
    for x in lis:    
        print ",".join(str(dic[y.strip()]) for y in x)
   ....:         
3,2
3,4
4,1
1,2
</snippet></ROW><ROW><id>13412377</id><snippet>unique_everseen</snippet></ROW><ROW><id>13412377</id><snippet>In [84]: c=count(1)

In [85]: def unique_everseen(iterable, key=None):
        seen = set()
        seen_add = seen.add
        if key is None:
                for element in ifilterfalse(seen.__contains__, iterable):
                        seen_add(element)
                        yield element
                else:
                        for element in iterable:
                                k = key(element)
                                if k not in seen:
                                        seen_add(k)
                                        yield element
   ....:                         

In [86]: with open("data1.txt") as f:
    lis=[map(str.strip,x.split(",")) for x in f]
    dic={}
    for x in unique_everseen(chain(*lis)):
        dic.setdefault(x.strip(),next(c))
    for x in lis:    
        print ",".join(str(dic[y.strip()]) for y in x)
   ....:         
1,2
1,3
3,4
4,2
</snippet></ROW><ROW><id>13412511</id><snippet>import xml.etree.ElementTree as ET

root = ET.fromstring(doc)  # doc is a string containing the example file
body = root.find('body')
desired = ' '.join([ET.tostring(c).strip() for c in body.getchildren()])
</snippet></ROW><ROW><id>13412511</id><snippet>&gt;&gt;&gt; desired
'&lt;p&gt;hello this is first paragraph &lt;/p&gt; &lt;p&gt; hello this is second paragraph&lt;/p&gt;'
</snippet></ROW><ROW><id>13412537</id><snippet>with open('out.log', 'a') as f:
    f.write('output is ')
    # some work
    s = 'OK.'
    f.write(s)
    f.write('\n')

# some other work
with open('out.log', 'a') as f:
    f.write('done\n')
</snippet></ROW><ROW><id>13412638</id><snippet>import numpy as np

def is_less(a, b):
    # this ugliness is needed because we want to compare lexicographically same as np.lexsort(), from the last column backward
    for i in range(len(a)-1, -1, -1):
        if a[i]&lt;b[i]: return True
        elif a[i]&gt;b[i]: return False
    return False

def is_equal(a, b):
    for i in range(len(a)):
        if a[i] != b[i]: return False
    return True

# lat1 = np.array(([48.78,47.45],[38.56,39.53]))
# lat2 = np.array(([7.78,5.45],[48.78,47.45],[7.56,5.53]))
lat1 = np.load('arr.npy')
lat2 = np.load('refarr.npy')

idx1 = np.lexsort( lat1.transpose() )
idx2 = np.lexsort( lat2.transpose() )
ii = 0
jj = 0
while ii &lt; len(idx1) and jj &lt; len(idx2):
    a = lat1[ idx1[ii] , : ]
    b = lat2[ idx2[jj] , : ]
    if is_equal( a, b ):
        # do stuff with match
        print "match found: lat1=%s lat2=%s %d and %d" % ( repr(a), repr(b), idx1[ii], idx2[jj] )
        ii += 1
        jj += 1
    elif is_less( a, b ):
        ii += 1
    else:
        jj += 1
</snippet></ROW><ROW><id>13412890</id><snippet>                                # The module holding XMLSchema bindings
                                # does not have a CreateFromDOM method,
                                # and shouldn't since we need to convert
                                # schema instances to DOM more carefully.
                                # Other namespaces won't have a module if
                                # the bindings were not imported; this is
                                # probably worth a warning.
</snippet></ROW><ROW><id>13413339</id><snippet>from socket import gethostbyname, gaierror
</snippet></ROW><ROW><id>13413598</id><snippet>return L[calc1]</snippet></ROW><ROW><id>13413753</id><snippet>soup('table', {'class': "views-table sticky-enabled cols-20"})
</snippet></ROW><ROW><id>13413753</id><snippet>soup('table', {'class': lambda L: 'views-table' in L.split()})
</snippet></ROW><ROW><id>13413774</id><snippet>row</snippet></ROW><ROW><id>13413774</id><snippet>row[1]</snippet></ROW><ROW><id>13413774</id><snippet>0:NB_CARAC_MSG</snippet></ROW><ROW><id>13413774</id><snippet>NB_CARAC_MSG-1</snippet></ROW><ROW><id>13413842</id><snippet>from scipy.stats import ttest_ind

cat1 = my_data[my_data['Category']=='cat1']
cat2 = my_data[my_data['Category']=='cat2']

ttest_ind(cat1['values'], cat2['values'])
&gt;&gt;&gt; (1.4927289925706944, 0.16970867501294376)
</snippet></ROW><ROW><id>13413845</id><snippet>drop</snippet></ROW><ROW><id>13413845</id><snippet>EPS</snippet></ROW><ROW><id>13413845</id><snippet>df = df[np.isfinite(df['EPS'])]
</snippet></ROW><ROW><id>13414032</id><snippet>timeit</snippet></ROW><ROW><id>13414032</id><snippet>timeit.timeit()</snippet></ROW><ROW><id>13414032</id><snippet>2*math.pi</snippet></ROW><ROW><id>13414032</id><snippet>PI2</snippet></ROW><ROW><id>13414032</id><snippet>PI2 = 2*math.pi
def jkl(l): return PI2 / l
</snippet></ROW><ROW><id>13414032</id><snippet>asd()</snippet></ROW><ROW><id>13414032</id><snippet>asd()</snippet></ROW><ROW><id>13414799</id><snippet>class POINT(Structure):
    _fields_ = [("x", c_int),
               ("y", c_int)]
</snippet></ROW><ROW><id>13414835</id><snippet>def flatten_all(iterable):
    for elem in iterable:
        if not isinstance(elem, list):
            yield elem
        else:
            for x in flatten_all(elem):
                yield x
            # in Python 3.3 just: yield from flatten_all(elem)
</snippet></ROW><ROW><id>13414835</id><snippet>for x in flatten_all([1, [2, [3]]]):
    print(x)

# or if you need a list:
my_lst = list(flatten_all([1, [2, [3]]])
assert my_lst == [1, 2, 3]
</snippet></ROW><ROW><id>13414835</id><snippet>def flatten_all(iterable):
    stack = [iter(iterable)]
    while stack:
        try:
            elem  = stack[-1].next()
            if not isinstance(elem, list):
                yield elem
            else:
                stack.append(iter(elem))
        except StopIteration:
            stack.pop()
</snippet></ROW><ROW><id>13415003</id><snippet>{% for week_info in week_infos %}
    &lt;td row="{{ forloop.counter0 }}" col="{{ i|add:6 }}"&gt;
        {{ week_info }}
</snippet></ROW><ROW><id>13415463</id><snippet>store_true</snippet></ROW><ROW><id>13415463</id><snippet>parser.add_argument('--debug', action='store_true', help='print debug messages to stderr')
</snippet></ROW><ROW><id>13415463</id><snippet>nargs='?'</snippet></ROW><ROW><id>13415761</id><snippet>staticmethod</snippet></ROW><ROW><id>13415761</id><snippet>classmethod</snippet></ROW><ROW><id>13415761</id><snippet>def to_class(func):
    """ returns a decorator
    aimed to force the result to be of class cls. """
    def wrapper(cls, *args, **kwargs):
        return cls(func(*args, **kwargs))
    return classmethod(wrapper)
</snippet></ROW><ROW><id>13415761</id><snippet>class TestClass(object):
    def __init__(self, value):
        self._value = (value, value)

    def __str__(self):
        return str(self._value)

    @to_class
    def test_func(value):
        return value
</snippet></ROW><ROW><id>13415761</id><snippet>&gt;&gt;&gt; def to_class(func):
...     """ returns a decorator
...     aimed to force the result to be of class cls. """
...     def wrapper(cls, *args, **kwargs):
...         return cls(func(*args, **kwargs))
...     return classmethod(wrapper)
... 
&gt;&gt;&gt; class TestClass(object):
...     def __init__(self, value):
...         self._value = (value, value)
...     def __str__(self):
...         return str(self._value)
...     @to_class
...     def test_func(value):
...         return value
... 
&gt;&gt;&gt; TestClass.test_func('foo')
&lt;__main__.TestClass object at 0x102a77210&gt;
&gt;&gt;&gt; print TestClass.test_func('foo')
('foo', 'foo')
</snippet></ROW><ROW><id>13415853</id><snippet>itertools.islice</snippet></ROW><ROW><id>13415853</id><snippet>In [12]: a = range(10)

In [13]: b=iter(a)

In [14]: from itertools import islice

In [15]: l = [3, 5, 2]

In [16]: [list(islice(b,x)) for x in l]
Out[16]: [[0, 1, 2], [3, 4, 5, 6, 7], [8, 9]]
</snippet></ROW><ROW><id>13415853</id><snippet>In [17]: b=iter(a)

In [18]: [[next(b) for _ in range(x)] for x in l]
Out[18]: [[0, 1, 2], [3, 4, 5, 6, 7], [8, 9]]
</snippet></ROW><ROW><id>13416312</id><snippet>lzop</snippet></ROW><ROW><id>13416312</id><snippet>-c</snippet></ROW><ROW><id>13416414</id><snippet>import numpy as np
import matplotlib.pyplot as plt

bins = np.arange(-512, 512)
x = 2000.*bins/1024
plt.plot(x, fft_data)
</snippet></ROW><ROW><id>13416414</id><snippet>plt.xlim</snippet></ROW><ROW><id>13416457</id><snippet>outpath="images\\ts\\"
fp = open(outpath + 'trainingset.dump','wb');
dirList = os.listdir(path)
for fname in dirList:
if '.jpg' in fname:
    im = array(Image.open(path + "\\" + fname).convert('L'))
    pickle.dump(im,fp)
    pickle.dump(1,fp)
fp.close()
</snippet></ROW><ROW><id>13416457</id><snippet>path="images\\ts\\trainingset.dump"
fp = open(path, "r")
im = pickle.load(fp)
label = pickle.load(fp)
imlist = im.tolist()
imlist = [item for sublist in imlist for item in sublist]
y.append(label)
x.append(imlist)

print "Setting up the SVM problem"
prob = svm_problem(y, x)

param = svm_parameter('-t 2 -g 0.00001')
param.C = 1

print "Starting the training process"
m=svm_train(prob, param)

print "Storing the model"

svm_save_model(model, m)
</snippet></ROW><ROW><id>13416457</id><snippet>im = array(Image.open(path + "\\" + fname).convert('L'))
</snippet></ROW><ROW><id>13416457</id><snippet>im = array(Image.open(path + "\\" + fname))
</snippet></ROW><ROW><id>13416469</id><snippet>lib/Target/CBackend</snippet></ROW><ROW><id>13416577</id><snippet>input</snippet></ROW><ROW><id>13416577</id><snippet>['car', 'house', 't-shirt', 'bicycle', 'images']</snippet></ROW><ROW><id>13416577</id><snippet>str_x = input('Please enter a list of strings: '))
x = [s.strip() for s in str_x[1:-1].split(',')]   # String to List conversion
</snippet></ROW><ROW><id>13416687</id><snippet>&gt;&gt;&gt; url = 'http://httpbin.org/post'
&gt;&gt;&gt; files = {'file': open('report.xls', 'rb')}   
&gt;&gt;&gt; r = requests.post(url, files=files)
</snippet></ROW><ROW><id>13416687</id><snippet>&gt;&gt;&gt; r = requests.get(url1)
&gt;&gt;&gt; files = {'image': r.content}   
&gt;&gt;&gt; r = requests.post(url2, files=files)
</snippet></ROW><ROW><id>13417019</id><snippet>findNextSibling</snippet></ROW><ROW><id>13417019</id><snippet>target_div</snippet></ROW><ROW><id>13417019</id><snippet>.find()</snippet></ROW><ROW><id>13417019</id><snippet>target_div = soup.find('div', {'id' : 'left'})
target_table = target_div.find('table')
</snippet></ROW><ROW><id>13417019</id><snippet>target_div = soup.find('div', {'id' : 'left'})
target_table = target_div.table
</snippet></ROW><ROW><id>13417019</id><snippet>.find_all()</snippet></ROW><ROW><id>13417019</id><snippet>.find_all()</snippet></ROW><ROW><id>13417019</id><snippet>.find()</snippet></ROW><ROW><id>13417019</id><snippet>.find_all()</snippet></ROW><ROW><id>13417019</id><snippet>for element in soup.find_all('div')
    contained_table = element.find('table')
</snippet></ROW><ROW><id>13417019</id><snippet>second_match = soup.find_all('div')[1]
</snippet></ROW><ROW><id>13417175</id><snippet>lookups.py</snippet></ROW><ROW><id>13417175</id><snippet>from ajax_select import LookupChannel
from django.utils.html import escape
from django.db.models import Q
from yourapp.models import *

class AlphaLookup(LookupChannel):

    model = Alpha

    def get_query(self,q,request):
        # The real query
        # Here the filter will select only non-submitted entries
        return Alpha.objects.filter(Q(name__icontains = q) &amp; Q(submitted = false)).order_by('name')

    def get_result(self,obj):
        u""" result is the simple text that is the completion of what the person typed """
        return obj.name

    def format_match(self,obj):
        """ (HTML) formatted item for display in the dropdown """
        return escape(obj.name)

    def format_item_display(self,obj):
        """ (HTML) formatted item for displaying item in the selected deck area """
        return escape(obj.name)
</snippet></ROW><ROW><id>13417175</id><snippet>escape()</snippet></ROW><ROW><id>13417175</id><snippet>format_match</snippet></ROW><ROW><id>13417175</id><snippet>format_item_display</snippet></ROW><ROW><id>13417175</id><snippet>get_query</snippet></ROW><ROW><id>13417175</id><snippet>Alpha.objects</snippet></ROW><ROW><id>13417175</id><snippet>settings.py</snippet></ROW><ROW><id>13417175</id><snippet>AJAX_LOOKUP_CHANNELS = {
    'alpha' : ('yoursite.yourapp.lookups', 'AlphaLookup'),
}
</snippet></ROW><ROW><id>13417306</id><snippet>case CURLINFO_CONNECT_TIME: // other cases [snip]ped
        /* Return PyFloat as result */
        double d_res = 0.0;

        res = curl_easy_getinfo(self-&gt;handle, (CURLINFO)option, &amp;d_res);
        if (res != CURLE_OK) {
            CURLERROR_RETVAL();
        }
        return PyFloat_FromDouble(d_res);
    }
</snippet></ROW><ROW><id>13417306</id><snippet>case CURLINFO_CONNECT_TIME:
    *param_doublep = data-&gt;progress.t_connect;
    break;
</snippet></ROW><ROW><id>13417306</id><snippet>t_connect</snippet></ROW><ROW><id>13417306</id><snippet>data-&gt;progress.t_connect = Curl_tvdiff_secs(now, data-&gt;progress.t_startsingle);
</snippet></ROW><ROW><id>13417306</id><snippet>t_startsingle</snippet></ROW><ROW><id>13417306</id><snippet>Curl_tvnow</snippet></ROW><ROW><id>13417306</id><snippet>struct timeval curlx_tvnow(void)
{
  /*
  ** GetTickCount() is available on _all_ Windows versions from W95 up
  ** to nowadays. Returns milliseconds elapsed since last system boot,
  ** increases monotonically and wraps once 49.7 days have elapsed.
  */
  struct timeval now;
  DWORD milliseconds = GetTickCount();
  now.tv_sec = milliseconds / 1000;
  now.tv_usec = (milliseconds % 1000) * 1000;
  return now;
}
</snippet></ROW><ROW><id>13417356</id><snippet>&gt;&gt;&gt; start_points = numpy.array([[1, 0, 0], [0, 1, 0]])
&gt;&gt;&gt; end_points = numpy.array([[10, 0, 0], [0, 10, 0]])
&gt;&gt;&gt; steps = numpy.arange(10)/9.0
&gt;&gt;&gt; start_points.shape
(2, 3)
&gt;&gt;&gt; steps.shape
(10,)
&gt;&gt;&gt; steps[:,numpy.newaxis,numpy.newaxis].shape
(10, 1, 1)
&gt;&gt;&gt; (steps[:,numpy.newaxis,numpy.newaxis] * start_points).shape
(10, 2, 3)
&gt;&gt;&gt; (steps[:,numpy.newaxis,numpy.newaxis] * (end_points - start_points)) + start_points
array([[[  1.,   0.,   0.],
        [  0.,   1.,   0.]],
       [[  2.,   0.,   0.],
        [  0.,   2.,   0.]],
       [[  3.,   0.,   0.],
        [  0.,   3.,   0.]],
       [[  4.,   0.,   0.],
        [  0.,   4.,   0.]],
       [[  5.,   0.,   0.],
        [  0.,   5.,   0.]],
       [[  6.,   0.,   0.],
        [  0.,   6.,   0.]],
       [[  7.,   0.,   0.],
        [  0.,   7.,   0.]],
       [[  8.,   0.,   0.],
        [  0.,   8.,   0.]],
       [[  9.,   0.,   0.],
        [  0.,   9.,   0.]],
       [[ 10.,   0.,   0.],
        [  0.,  10.,   0.]]])
</snippet></ROW><ROW><id>13417356</id><snippet>line_dist = numpy.sqrt( numpy.sum( (end_point - start_point) ** 2, axis=1 )
</snippet></ROW><ROW><id>13417391</id><snippet>"öçÇşŞükrÜ".decode("UTF-8")
</snippet></ROW><ROW><id>13417391</id><snippet>print "öçÇşŞükrÜ".decode("UTF-8").encode("UTF-8")
</snippet></ROW><ROW><id>13417391</id><snippet>print</snippet></ROW><ROW><id>13417391</id><snippet>öçÇşŞükrÜ</snippet></ROW><ROW><id>13417878</id><snippet>[False if i !=2 else 2 for i in test]
</snippet></ROW><ROW><id>13418029</id><snippet>a = 'aBcD'
a.swapcase()
&gt;&gt; AbCd
</snippet></ROW><ROW><id>13418029</id><snippet>a = 'aBcD'
''.join(map(str.swapcase, a))
&gt;&gt; AbCd
</snippet></ROW><ROW><id>13418029</id><snippet>str.swapcase()</snippet></ROW><ROW><id>13418029</id><snippet>a</snippet></ROW><ROW><id>13418029</id><snippet>''.join()</snippet></ROW><ROW><id>13418196</id><snippet>http://localhost:8080/data/?test=2&amp;query=SELECT+%2B+%3B
</snippet></ROW><ROW><id>13418196</id><snippet>urls = (
    '/query', 'query',
    '/data/', 'data'
)

[...] 

class data:
    def GET(self):
        data = web.input()
        print "dict:", data
        print "element:", data['query']

        if ( re.match('SELECT [^;]+ ;', data['query'])):
            return 'good::'+data['query']
        else:
            return 'Bad::'+data['query']
</snippet></ROW><ROW><id>13418196</id><snippet>dict: &lt;Storage {'test': u'2', 'query': u'SELECT + ;'}&gt;
element: SELECT + ;
127.0.0.1:44761 - - [16/Nov/2012 15:06:06] "HTTP/1.1 GET /data/" - 200 OK
</snippet></ROW><ROW><id>13418200</id><snippet>Import datetime
class timeCalc(object):
    def nextTime(self, time, minutestoadd):
        base_time = datetime.datetime.strptime(time, "%H:%M")
        minutesobj = datetime.timedelta(minutes = minutestoadd)
        newtime = basetime + minutesobj
        print newtime.time()
</snippet></ROW><ROW><id>13418243</id><snippet>ValidatorException</snippet></ROW><ROW><id>13418243</id><snippet>except</snippet></ROW><ROW><id>13418243</id><snippet>except ValidatorException as ve:
    print(ve)
</snippet></ROW><ROW><id>13418339</id><snippet>plt.axvline(10)
plt.text(10.1,0,'blah',rotation=90)
</snippet></ROW><ROW><id>13418339</id><snippet>text</snippet></ROW><ROW><id>13418366</id><snippet>def serve_forever(self, poll_interval=0.5):
        """Handle one request at a time until shutdown.

        Polls for shutdown every poll_interval seconds. Ignores
        self.timeout. If you need to do periodic tasks, do them in
        another thread.
        """
        self.__is_shut_down.clear()
        try:
            while not self.__shutdown_request:
                # XXX: Consider using another file descriptor or
                # connecting to the socket to wake this up instead of
                # polling. Polling reduces our responsiveness to a
                # shutdown request and wastes cpu at all other times.
                try:
                        r, w, e = select.select([self], [], [], poll_interval)
                except select.error  as ex:
                        #print ex
                        if ex[0] == 4:
                                continue
                        else:
                                raise  
                if self in r:
                    self._handle_request_noblock()
        finally:
            self.__shutdown_request = False
            self.__is_shut_down.set()
</snippet></ROW><ROW><id>13418457</id><snippet>[object Object]</snippet></ROW><ROW><id>13418457</id><snippet>$.post</snippet></ROW><ROW><id>13418457</id><snippet>$.ajax</snippet></ROW><ROW><id>13418457</id><snippet>$.post</snippet></ROW><ROW><id>13418457</id><snippet>$.post('/ajaxtest/', serializedData, function(response) {
   alert(response);
});
</snippet></ROW><ROW><id>13419091</id><snippet>CustomPK._meta.pk.name
</snippet></ROW><ROW><id>13419260</id><snippet>import base64
from M2Crypto import SMIME, X509, BIO

raw_sig = """base64 PKCS7 envelop"""
msg = "challenge message to verify"

sm_obj = SMIME.SMIME()
x509 = X509.load_cert('ISSUER.crt') # public key cert used by the remote
                                             # client when signing the message
sk = X509.X509_Stack()
sk.push(x509)
sm_obj.set_x509_stack(sk)

st = X509.X509_Store()
st.load_info('ROOT.crt') # Public cert for the CA which signed
                                    # the above certificate
sm_obj.set_x509_store(st)

# re-wrap signature so that it fits base64 standards
cooked_sig = '\n'.join(raw_sig[pos:pos+76] for pos in xrange(0, len(raw_sig), 76))

# now, wrap the signature in a PKCS7 block
sig = """
-----BEGIN PKCS7-----
%s
-----END PKCS7-----
""" % cooked_sig

# print sig

# and load it into an SMIME p7 object through the BIO I/O buffer:
buf = BIO.MemoryBuffer(sig)
p7 = SMIME.load_pkcs7_bio(buf)

signers = p7.get0_signers(sk)
certificat = signers[0]
</snippet></ROW><ROW><id>13419260</id><snippet>from os.path import basename
import re
from tempfile import NamedTemporaryFile

try:
    from subprocess import check_output, CalledProcessError, STDOUT
except ImportError:  # check_output new in 2.7, so use a backport for &lt;=2.6
    from subprocess32 import check_output, CalledProcessError, STDOUT

class OpenSSLError(Exception):
    pass

def info_extension_cert(cert):
    """
    This function take a certificate and return the extensions in dict.

    @type cert : M2Crypto.X509
    @param cert : Certificate
    """
    certificateExtensions = {}

    for index in range(cert.get_ext_count()):
        ext = cert.get_ext_at(index)
        certificateExtensions[ext.get_name()] = ext.get_value()
    return certificateExtensions


def get_cert_url_ocsp(cert):
    """
    Get the OCSP url of a certificate

    @type cert : M2Crypto.X509
    @parm cert : Certificat

    @rtype : string
    @return : The OSCP url
    """

    infos = [x.strip() for x in info_extension_cert(cert)["authorityInfoAccess"].split('\n')]
    ocsp_url = None
    for info in infos:
        if re.match(r"^OCSP - URI:", info):
            ocsp_url = info.replace("OCSP - URI:","")
            break
    return ocsp_url.strip()


def is_revoked(cert, cert_parent):
    """
    Check if the certificate has been revoked.

    @type cert : M2Crypto.X509
    @param cert : The certificate

    @type cert_parent : string
    @param cert_parent : Issuer certificate file path

    @rtype : boolean
    @return : True if revoked or False
    """
    ocsp_url = get_cert_url_ocsp(cert)
    if re.match(r"^http", ocsp_url) is None:
        return False

    data = {'cert_parent': cert_parent,
            'ocsp_url': ocsp_url,
            'serial': cert.get_serial_number()}

    cmd = "openssl ocsp -issuer %(cert_parent)s -CAfile %(cert_parent)s -url %(ocsp_url)s -serial %(serial)s" % data
    print cmd
    try:
        output = check_output(cmd, shell=True, stderr=STDOUT).lower()
    except CalledProcessError, e:
        msg = u"[OpenSSL] Error while checking ocsp %s: %s. Output: %r" % (
                    cmd, e, e.output)
        raise OpenSSLError(msg)
    return not ('response verify ok' in output and '%s: good' % data['serial'] in output)


def is_revoked_crl(cert, cert_parent_with_crl):
    """
    Check if the certificate as been revoked with the crl.

    @type cert : M2Crypto.X509
    @param cert : The certificate

    @type cert_parent : string
    @param cert_parent : Issuer certificate file path

    @rtype : boolean
    @return : True if revoked or False
    """
    tmp_file = NamedTemporaryFile(prefix='cert')
    cert.save(tmp_file.name)
    data = {'cert': tmp_file.name,
            'cert_parent_with_crl': cert_parent_with_crl}
    cmd = "openssl verify -crl_check -CAfile %(cert_parent_with_crl)s %(cert)s" % data
    print cmd
    try:
        output = check_output(cmd, shell=True, stderr=STDOUT).lower()
    except CalledProcessError, e:
        msg = u"[OpenSSL] Error while checking ocsp %s: %s. Output: %r" % (
                    cmd, e, e.output)
        raise OpenSSLError(msg)
    print output
    return '%s: ok' % data['cert'] not in output


def get_cert_url_crl(cert):
    """
    Return the crl url from the certificate

    @type cert : M2Crypto.X509
    @parm cert : Certificate

    @rtype : string
    @return : CRL url
    """

    infos = [x.strip() for x in info_extension_cert(cert)["crlDistributionPoints"].split('\n')]
    crl_url = None
    for info in infos:
        print info
        if re.match(r"^URI:", info):
            crl_url = info.replace("URI:","")
            break
    return crl_url.strip()
</snippet></ROW><ROW><id>13419260</id><snippet>cert_parent</snippet></ROW><ROW><id>13419260</id><snippet>cert_parent_crl</snippet></ROW><ROW><id>13419260</id><snippet>rm FILE.crl
wget http://URL/FILE.crl
cat ROOT_ISSUER.crt &gt; ROOT_ISSUER_CRL.crt
echo "-----BEGIN X509 CRL-----" &gt;&gt; ROOT_ISSUER_CRL.crt
openssl enc -base64 -in FILE.crl &gt;&gt; ROOT_ISSUER_CRL.crt
echo "-----END X509 CRL-----" &gt;&gt; ROOT_ISSUER_CRL.crt
</snippet></ROW><ROW><id>13419371</id><snippet>__new__()</snippet></ROW><ROW><id>13419371</id><snippet>__init__()</snippet></ROW><ROW><id>13419371</id><snippet>__new__()</snippet></ROW><ROW><id>13419371</id><snippet>def __new__(cls, x):
    if isinstance(x, A):
        return x
    else:
        return object.__new__(cls, x)
</snippet></ROW><ROW><id>13419371</id><snippet>__init__()</snippet></ROW><ROW><id>13419371</id><snippet>self</snippet></ROW><ROW><id>13419371</id><snippet>list()</snippet></ROW><ROW><id>13419371</id><snippet>dict()</snippet></ROW><ROW><id>13419371</id><snippet>list(some_list)</snippet></ROW><ROW><id>13419371</id><snippet>some_list</snippet></ROW><ROW><id>13419371</id><snippet>some_list</snippet></ROW><ROW><id>13419371</id><snippet>dict()</snippet></ROW><ROW><id>13419371</id><snippet>&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; list(x) is x
False 
</snippet></ROW><ROW><id>13419371</id><snippet>A(some_a)</snippet></ROW><ROW><id>13419371</id><snippet>some_a</snippet></ROW><ROW><id>13419371</id><snippet>A(some_a) is some_a</snippet></ROW><ROW><id>13419671</id><snippet>def dehydrate(self, bundle):
    bundle.data['entry'] = bundle.obj.entry.id
    return bundle

def hydrate(self, bundle):
    bundle.data['entry'] = Entry.objects.get(id=bundle.data['entry'])
    return bundle
</snippet></ROW><ROW><id>13419674</id><snippet>xdg-open</snippet></ROW><ROW><id>13419674</id><snippet>open</snippet></ROW><ROW><id>13419674</id><snippet>subprocess.Popen(['xdg-open','/home/me/otherdir'])
</snippet></ROW><ROW><id>13419674</id><snippet>subprocess.Popen(['open','/home/me/otherdir'])
</snippet></ROW><ROW><id>13419916</id><snippet>from operator import itemgetter
with open('file.csv') as fin:
    csvin = csv.reader(fin)
    print max(csvin, key=itemgetter(1))
</snippet></ROW><ROW><id>13420016</id><snippet>new_frame = frame.copy()</snippet></ROW><ROW><id>13420585</id><snippet>setA = set(listA)
setB = set(listB)
new_list = list(setB - setA)
</snippet></ROW><ROW><id>13420913</id><snippet>sfdp -x -Goverlap=scale -Tpng data.dot &gt; data.png
</snippet></ROW><ROW><id>13420913</id><snippet>-Goverlap</snippet></ROW><ROW><id>13421127</id><snippet>n &gt;= k</snippet></ROW><ROW><id>13421127</id><snippet>n</snippet></ROW><ROW><id>13421127</id><snippet>n</snippet></ROW><ROW><id>13421127</id><snippet>n</snippet></ROW><ROW><id>13421127</id><snippet>n</snippet></ROW><ROW><id>13421127</id><snippet>k</snippet></ROW><ROW><id>13421127</id><snippet>k &gt; n</snippet></ROW><ROW><id>13421127</id><snippet>class Node(object):
    def __init__(self, idx):
        self.idx = idx     # not needed but nice for prints 
        self.parent = None # edge to parent or None
        self.childs = []   # list of edges

    def get_deepest(self, k = 2):
        max_value = -1
        max_node = None
        for edge in self.childs:
            r = edge.n2.get_deepest()
            if r is None: continue # leaf
            value, node = r
            value += len(edge.s)
            if value &gt; max_value: # new best result
                max_value = value
                max_node = node
        if max_node is None:
            # we are either a leaf (no edge connected) or 
            # the last non-leaf.
            # The number of childs have to be k to be valid.
            return (0, self) if len(self.childs) == k else None
        else:
            return (max_value, max_node)

    def get_string_to_root(self):
        if self.parent is None: return "" 
        return self.parent.n1.get_string_to_root() + self.parent.s

class Edge(object):
    # creating the edge also sets the correspondending
    # values in the nodes
    def __init__(self, n1, n2, s):
        #print "Edge %d -&gt; %d [ %s]" % (n1.idx, n2.idx, s)
        self.n1, self.n2, self.s = n1, n2, s
        n1.childs.append(self)
        n2.parent = self

nodes = {1 : Node(1)} # root-node
string = sys.stdin.readline()
k = int(sys.stdin.readline())
for line in sys.stdin:
    parent_idx, child_idx, start, length = [int(x) for x in line.split()]
    s = string[start-1:start-1+length]
    # every edge constructs a Node
    nodes[child_idx] = Node(child_idx)
    Edge(nodes[parent_idx], nodes[child_idx], s)

(depth, node) = nodes[1].get_deepest(k)
print node.get_string_to_root()
</snippet></ROW><ROW><id>13421193</id><snippet>globals()</snippet></ROW><ROW><id>13421193</id><snippet>g()</snippet></ROW><ROW><id>13421193</id><snippet>f</snippet></ROW><ROW><id>13421193</id><snippet>def f():print "hello"

def g(f):
    def call_global_f():
        global f
        f()
    call_global_f()      #calls the global f
    print f              #prints the local f

g('foo')
</snippet></ROW><ROW><id>13421193</id><snippet>hello
foo
</snippet></ROW><ROW><id>13421377</id><snippet>import posh

l = posh.share(range(3))
if posh.fork():
    #parent process
    l.append(3)
    posh.waitall()
else:
    # child process
    l.append(4)
    posh.exit(0)
print l

-- Output --
[0, 1, 2, 3, 4]
  -- OR --
[0, 1, 2, 4, 3]
</snippet></ROW><ROW><id>13421617</id><snippet>extent</snippet></ROW><ROW><id>13421617</id><snippet>matplotlib</snippet></ROW><ROW><id>13421617</id><snippet>data = np.array([range(10),range(10,20)])
fig = plt.figure(figsize=(3,5))
ax = fig.add_subplot(111)
ax.imshow(data,aspect='auto',extent=[10000,10010,0,1])  
</snippet></ROW><ROW><id>13421617</id><snippet>formatter</snippet></ROW><ROW><id>13421617</id><snippet>locator</snippet></ROW><ROW><id>13421617</id><snippet>axis</snippet></ROW><ROW><id>13421617</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def scale_xaxis(number):
    return(number+1001)

def my_form(x,pos):
    return '%d'%scale_xaxis(x)

data = np.array([range(10),range(10,20)])
fig = plt.figure(figsize=(3,5))
ax = fig.add_subplot(111)
ax.imshow(data,aspect='auto')
ax.autoscale(False)
ax.xaxis.set_major_locator(matplotlib.ticker.MultipleLocator(int(2)))
ax.xaxis.set_major_formatter(matplotlib.ticker.FuncFormatter(my_form))
</snippet></ROW><ROW><id>13421619</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.request', 
)
</snippet></ROW><ROW><id>13421619</id><snippet>from django.template import RequestContext
</snippet></ROW><ROW><id>13421619</id><snippet>return render_to_response('something.html', context_instance=RequestContext(request))
</snippet></ROW><ROW><id>13421619</id><snippet>request</snippet></ROW><ROW><id>13421704</id><snippet>app = webapp2.WSGIApplication([('/path', MyHandler),
                              config=config,
                              debug=True)
</snippet></ROW><ROW><id>13421775</id><snippet>parse_complex</snippet></ROW><ROW><id>13421775</id><snippet>class DateParser(object):
    """parse dates according to the custom rules here:

    &gt;&gt;&gt; DateParser("Sat 1 Dec - 11h + 14h / Sun 2 Dec - 12h30").parse()
    ("Sat 1 Dec 11h", "Sat 1 Dec 14h", "Sun 2 Dec 12h30")
    &gt;&gt;&gt; DateParser("Tue 27 + Wed 28 Nov - 20h30").parse()
    ("Tue 27 Nov 20h30", "Wed 28 Nov 20h30")
    &gt;&gt;&gt; DateParser("Fri 4 + Sat 5 Jan - 20h30").parse()
    ("Fri 4 Jan 20h30", "Sat 5 Jan 20h30")
    &gt;&gt;&gt; DateParser("Wed 23 Jan - 20h").parse()
    ("Wed 23 Jan 20h")
    &gt;&gt;&gt; DateParser("Sat 26 Jan - 11h + 14h / Sun 27 Jan - 11h").parse()
    ("Sat 26 Jan 11h", "Sat 26 Jan 14h", "Sun 27 Jan 11h")
    &gt;&gt;&gt; DateParser("Fri 8 and Sat 9 Feb - 20h30 + thu 1 feb - 15h").parse()
    ("Fri 8 Feb 20h30", "Sat 9 Feb 20h30", "Thu 1 feb 15h")
    &gt;&gt;&gt; DateParse("Sat 2 Mar - 11h + 14h / Sun 3 Mar - 11h").parse()
    ("Sat 2 Mar 11h", "Sat 2 Mar 14h", "Sun 3 Mar 11h")
    &gt;&gt;&gt; DateParser("Wed 12, Thu 13, Fri 14 and Sat 15 Jun - 19h + Sun 16 Jun - 12h30").parse()
    ("Wed 12 Jun 19h", "Thu 13 Jun 19h", "Fri 14 Jun 19h", "Sat 15 Jun 19h", "Sun 16 Jun 12h30")
    """

    def __init__(self, line):
        self.date  = line
        self.dates = self.split_dates(line)
        self.final = []

        self.days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
        self.mons = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']

    def parse(self):
        if self.is_complex():
            self.parse_complex()
        else:
            self.parse_simple()

        return tuple(self.final)

    def parse_simple(self):
        """typical formats: 
        Day 00 + Day 01 Mon - 00h00
        Day 00 Mon - 00h00 + 01h00
        Day 00 Mon - 00h00 / Day 02 Mon - 00h00
        """

        for date in self.dates:
            mods = self.split_modifiers(date)

            date_mods = []
            for mod in mods:
                if self.is_complete(mod):
                    #only *one* base_date
                    base_date, time = self.split_time(mod)
                    date_mods.append(time)
                else:
                    date_mods.append(mod)

            for mod in date_mods:
                if self.is_hour(mod):
                    #Sat 1 Dec - 11h + 14h
                    self.final.append(' '.join([base_date, mod]))
                else:
                    #Fri 4 + Sat 5 Jan - 20h30
                    self.final.append(' '.join([mod, self.extract_month(base_date), time]))

    def parse_complex(self):
        """typical format:
        Day 00, Day 01 and Day 02 Mon - 00h00 + Day 03 Mon 01h00
        """
        raise NotImplementedError()


    def is_complex(self):
        """presence of the complex date attribute requires special parsing"""
        return self.date.find(' and ') &gt; -1

    def is_complete(self, section):
        """section has format `Day 00 Mon - 00h00`
        must have no modifiers to determine completeness
        """
        sections = map(lambda x: x.lower(), section.split())

        try:
            dow, dom, moy, dash, time = sections
        except ValueError, e:
            return False

        return all([dow in self.days, moy in self.mons])


    def is_hour(self, section):
        return section[0].isdigit()

    def is_day(self, section):
        return section[:3].lower() in self.days


    def extract_month(self, section):
        """return the month present in the string, if any"""
        for mon in self.mons:
            if section.lower().find(mon) &gt; -1:
                found = section.lower().index(mon)
                return section[found : found + 3]
        return None


    def split_dates(self, section):
        """split individual dates from a list of dates"""
        return section.split(' / ')

    def split_time(self, section):
        """split individual times from a complete date"""
        return section.split(' - ')

    def split_modifiers(self, section):
        """extend a date by implying that they share a date or a time
        modifiers change their meaning when parsing a complex date
        """
        return section.split(' + ')

&gt;&gt;&gt; DateParser("Fri 4 + Sat 5 Jan - 20h30 / Sat 1 Dec - 11h + 14h + 16h / Sun 2 Dec - 12h30").parse()
('Fri 4 Jan 20h30', 'Sat 5 Jan 20h30', 'Sat 1 Dec 11h', 'Sat 1 Dec 14h', 'Sat 1 Dec 16h', 'Sun 2 Dec 12h30')
</snippet></ROW><ROW><id>13421804</id><snippet>inc1 in primes and inc2 in primes</snippet></ROW><ROW><id>13421804</id><snippet>primes</snippet></ROW><ROW><id>13421804</id><snippet>for</snippet></ROW><ROW><id>13421884</id><snippet>from random import shuffle
women = ['Jane', 'Jill', 'Jade']
shuffle(women)
print women[-1] + ' to ' + women[0]
for i in range(len(women) - 1):
    print women[i] + ' to ' + women[i+1]
</snippet></ROW><ROW><id>13422056</id><snippet>oops=317
</snippet></ROW><ROW><id>13422246</id><snippet>sys.path</snippet></ROW><ROW><id>13422246</id><snippet>./call multiply multiply 5 6
</snippet></ROW><ROW><id>13422246</id><snippet>sys.path</snippet></ROW><ROW><id>13422246</id><snippet>Py_Initialize();
PyRun_SimpleString("import sys");
PyRun_SimpleString("sys.path.append(\".\")");
</snippet></ROW><ROW><id>13422246</id><snippet>./call multiply multiply 5 6
('Will compute', 5, 'times', 6)
Result of call: 30
</snippet></ROW><ROW><id>13422246</id><snippet>PySys_SetArgv</snippet></ROW><ROW><id>13422246</id><snippet>Py_Initialize();
PySys_SetArgv(argc, argv);
</snippet></ROW><ROW><id>13422460</id><snippet>import threading,time
def play1():
    while time.time() &lt;= start_time:
        pass
    threading.Thread(target=listen_to_audio).start()
def play2():
    while time.time() &lt;= start_time:
        pass
    threading.Thread(target=play_audio).start()
start_time=time.time()+20
threading.Thread(target=play1).start()
threading.Thread(target=play2).start()
</snippet></ROW><ROW><id>13422490</id><snippet>&gt;&gt;&gt; from werkzeug.security import generate_password_hash
&gt;&gt;&gt; generate_password_hash("test")
'sha1$lYmusy7y$8fc97f79a9809ab4eaee4de08d1e182d04f3dc07'
&gt;&gt;&gt; len(generate_password_hash("test"))
54
</snippet></ROW><ROW><id>13422576</id><snippet>yield</snippet></ROW><ROW><id>13422576</id><snippet>def fibonacci(previous=0,current=1):
    if previous &gt; current:
        previous,current = current, previous
    yield previous
    yield current
    while True:
        current,previous = previous+current,current
        yield current

n = int(input("Calculate fibonacci sequence value up to: "))
x = fibonacci()    
for i in range(n):
    print(next(x))
</snippet></ROW><ROW><id>13422598</id><snippet>def __RecursiveBinding(self, parent):
    try:
        parent.Bind(wx.EVT_CHAR, self.CharInputCallback)
        parent.SetWindowStyleFlag(wx.WANTS_CHARS)
        parent.Refresh()

        children = parent.GetChildren()

        if(children):
            for child in children:
                self.__RecursiveBinding(child)
</snippet></ROW><ROW><id>13422624</id><snippet>&gt;&gt;&gt; def foo(bar): pass
... 
&gt;&gt;&gt; foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: foo() missing 1 required positional argument: 'bar'
</snippet></ROW><ROW><id>13422738</id><snippet>news = News.objects.order_by("-date")[:10]
</snippet></ROW><ROW><id>13422884</id><snippet>&amp;</snippet></ROW><ROW><id>13422884</id><snippet>+</snippet></ROW><ROW><id>13422884</id><snippet>str</snippet></ROW><ROW><id>13422884</id><snippet>int</snippet></ROW><ROW><id>13422884</id><snippet>print 'Total Sheets:', total_Sheets, 'sheets'
</snippet></ROW><ROW><id>13422884</id><snippet>print ('Total Sheets:', total_Sheets, 'sheets')
</snippet></ROW><ROW><id>13422884</id><snippet>print 'Total Sheets: {0} sheets'.format(total_Sheets)
</snippet></ROW><ROW><id>13422884</id><snippet>{}</snippet></ROW><ROW><id>13422925</id><snippet>def cumulative_sum(lst,prev=0):
    if not lst:
        return []
    else:
        elem = prev+lst[0]
        return [elem] + cumulative_sum(lst[1:],prev=elem)

print cumulative_sum([2,2,2,3])
</snippet></ROW><ROW><id>13422925</id><snippet>newlist[k+1] == newlist[k+1] + newlist[k]
</snippet></ROW><ROW><id>13422925</id><snippet>newlist = [0]*len(lst)
</snippet></ROW><ROW><id>13422925</id><snippet>k = k + 1
</snippet></ROW><ROW><id>13422925</id><snippet>k</snippet></ROW><ROW><id>13422925</id><snippet>k</snippet></ROW><ROW><id>13422925</id><snippet>k == 2</snippet></ROW><ROW><id>13422925</id><snippet>k</snippet></ROW><ROW><id>13422925</id><snippet>k</snippet></ROW><ROW><id>13422925</id><snippet>global k</snippet></ROW><ROW><id>13422925</id><snippet>k</snippet></ROW><ROW><id>13422972</id><snippet>#From http://www.ariel.com.au/a/python-point-int-poly.html
# Modified by Nick ODell
from collections import namedtuple

def point_in_polygon(target, poly):
    """x,y is the point to test. poly is a list of tuples comprising the polygon."""
    point = namedtuple("Point", ("x", "y"))
    line = namedtuple("Line", ("p1", "p2"))
    target = point(*target)

    inside = False
    # Build list of coordinate pairs
    # First, turn it into named tuples

    poly = map(lambda p: point(*p), poly)

    # Make two lists, with list2 shifted forward by one and wrapped around
    list1 = poly
    list2 = poly[1:] + [poly[0]]
    poly = map(line, list1, list2)

    for l in poly:
        p1 = l.p1
        p2 = l.p2

        if p1.y == p2.y:
            # This line is horizontal and thus not relevant.
            continue
        if max(p1.y, p2.y) &lt; target.y &lt;= min(p1.y, p2.y):
            # This line is too high or low
            continue
        if target.x &lt; max(p1.x, p2.x):
            # Ignore this line because it's to the right of our point
            continue
        # Now, the line still might be to the right of our target point, but 
        # still to the right of one of the line endpoints.
        rise = p1.y - p2.y
        run =  p1.x - p2.x
        try:
            slope = rise/float(run)
        except ZeroDivisionError:
            slope = float('inf')

        # Find the x-intercept, that is, the place where the line we are
        # testing equals the y value of our target point.

        # Pick one of the line points, and figure out what the run between it
        # and the target point is.
        run_to_intercept = target.x - p1.x
        x_intercept = p1.x + run_to_intercept / slope
        if target.x &lt; x_intercept:
            # We almost crossed the line.
            continue

        inside = not inside

    return inside

if __name__ == "__main__":
    poly = [(2,2), (1,-1), (-1,-1), (-1, 1)]
    print point_in_polygon((1.5, 0), poly)
</snippet></ROW><ROW><id>13422992</id><snippet>def deleteGridWidget(self, index):
    item = self.sa_grid.itemAt(index)
    if item is not None:
        widget = item.widget()
        if widget is not None:
            self.sa_grid.removeWidget(widget)
            widget.deleteLater()
</snippet></ROW><ROW><id>13423632</id><snippet>np.argsort</snippet></ROW><ROW><id>13423632</id><snippet>reduceat</snippet></ROW><ROW><id>13423632</id><snippet>ufunc</snippet></ROW><ROW><id>13423632</id><snippet># you could do the group_changes somewhat faster if you care a lot
group_changes = np.concatenate(([0], np.where(groups[:-1] != groups[1:])[0] + 1))
Vprods = np.multiply.reduceat(values, group_changes)
</snippet></ROW><ROW><id>13423632</id><snippet>prod</snippet></ROW><ROW><id>13423632</id><snippet>multiply</snippet></ROW><ROW><id>13423632</id><snippet>ufunc</snippet></ROW><ROW><id>13423687</id><snippet>match</snippet></ROW><ROW><id>13423687</id><snippet>search</snippet></ROW><ROW><id>13423687</id><snippet>m = re.search(r"//([^/]*)", str)
print m.group(1)
</snippet></ROW><ROW><id>13423687</id><snippet>/</snippet></ROW><ROW><id>13423687</id><snippet>m = re.search(r"(?&lt;=//)[^/]*", str)
print m.group()
</snippet></ROW><ROW><id>13423687</id><snippet>.</snippet></ROW><ROW><id>13423687</id><snippet>m = re.search(r"(?&lt;=//)[^/]*", str)
host = m.group()
cleanedHost = host.replace(".", "")
</snippet></ROW><ROW><id>13423687</id><snippet>www.regular-expressions.info</snippet></ROW><ROW><id>13423687</id><snippet>wwwregularexpressionsinfo</snippet></ROW><ROW><id>13423687</id><snippet>replace</snippet></ROW><ROW><id>13423687</id><snippet>cleanedHost = re.sub(r"[^a-zA-Z0-9]+", "", host)
</snippet></ROW><ROW><id>13423814</id><snippet>originalList.sort()
newList = originalList[int(len(originalList) * .05) : int(len(originalList) * .95)]
</snippet></ROW><ROW><id>13423931</id><snippet>import threading

#...

def playSound():
    global start
    start = time.clock()

    def func(): 
        winsound.PlaySound('SystemAsterisk', winsound.SND_ALIAS)

    threading.Thread(target=func).start()
</snippet></ROW><ROW><id>13423946</id><snippet>one = open("sample-r1.txt",'r')
two = open("sample-r2.txt",'r')
k=[]
h=[]
for line in one:
    tmp=line.rstrip().split('\t')
    if len(tmp)&gt;1:
        k.append ( tmp )
for record in two:
    tmp=record.rstrip().split('\t')
    if len(tmp)&gt;1:
        h.append ( tmp )
i=0
j=0
newList=[]
while i &lt; len(k) and j &lt; len(h):
    if k[i][1] &lt;= h[j][1]:
        newList.append(k[i])
        i+=1
    else:
        newList.append(h[j])
        j+=1
while i &lt; len(k):
    newList.append(k[i])
    i+=1
while j &lt; len(h):
    newList.append(h[j])
    j+=1
for row in newList:
    print("\t".join(row))
</snippet></ROW><ROW><id>13423989</id><snippet>from skimage import io, color
rgb = io.imread(filename)
lab = color.rgb2lab(rgb)
</snippet></ROW><ROW><id>13423989</id><snippet>(0,0,255)</snippet></ROW><ROW><id>13424002</id><snippet>x = "a b c d"</snippet></ROW><ROW><id>13424002</id><snippet>def ngrams(input, n):
  input = input.split(' ')
  output = []
  for i in range(len(input)-n+1):
    output.append(input[i:i+n])
  return output

ngrams('a b c d', 2) # [['a', 'b'], ['b', 'c'], ['c', 'd']]
</snippet></ROW><ROW><id>13424002</id><snippet>[' '.join(x) for x in ngrams('a b c d', 2)] # ['a b', 'b c', 'c d']
</snippet></ROW><ROW><id>13424002</id><snippet>'a a a a'</snippet></ROW><ROW><id>13424002</id><snippet>for g in (' '.join(x) for x in ngrams(input, 2)):
   grams.setdefault(g, 0)
   grams[g] += 1
</snippet></ROW><ROW><id>13424002</id><snippet>def ngrams(input, n):
  input = input.split(' ')
  output = {}
  for i in range(len(input)-n+1):
    g = ' '.join(input[i:i+n])
    output.setdefault(g, 0)
    output[g] += 1
  return output

ngrams('a a a a', 2) # {'a a': 3}
</snippet></ROW><ROW><id>13424007</id><snippet>PySys_SetArgv(int argc, char **argv, int updatepath)</snippet></ROW><ROW><id>13424007</id><snippet>sys.path</snippet></ROW><ROW><id>13424007</id><snippet>updatepath</snippet></ROW><ROW><id>13424007</id><snippet>0</snippet></ROW><ROW><id>13424007</id><snippet>#include &lt;Python.h&gt;

int
main(int argc, char *argv[])
{
  Py_SetProgramName(argv[0]);  /* optional but recommended */
  Py_Initialize();
  PySys_SetArgv(argc, argv); // must call this to get sys.argv and relative imports
  PyRun_SimpleString("import os, sys\n"
                     "print sys.argv, \"\\n\".join(sys.path)\n"
                     "print os.getcwd()\n"
                     "import thing\n" // import a relative module
                     "thing.printer()\n");
  Py_Finalize();
  return 0;
}
</snippet></ROW><ROW><id>13424095</id><snippet>crop</snippet></ROW><ROW><id>13424095</id><snippet>save</snippet></ROW><ROW><id>13424095</id><snippet>load</snippet></ROW><ROW><id>13424095</id><snippet>&gt;&gt;&gt; im = im.crop(points)
&gt;&gt;&gt; im
&lt;PIL.Image._ImageCrop image mode=CMYK size=32x85 at 02630B48&gt;
&gt;&gt;&gt; im.load()
&lt;PixelAccess at 0x108d2ba70&gt;
&gt;&gt;&gt; im.save("new_image.tif")
</snippet></ROW><ROW><id>13424095</id><snippet>load</snippet></ROW><ROW><id>13424095</id><snippet>load</snippet></ROW><ROW><id>13424095</id><snippet>save</snippet></ROW><ROW><id>13424095</id><snippet>save</snippet></ROW><ROW><id>13424349</id><snippet>import networkx as nx
tree = (((((((((8953L, 3409L), (8334L, 7375L)), ((7375L, 7220L), (8420L, 8556L))), (((7375L, 7220L), (8420L, 8556L)), ((8420L, 8556L), (8556L, 10089L)))), ((((11021L, 11462L), (6778L, 6854L)), ((10691L, 6652L), (11061L, 11230L))), (((6652L, 5660L), (10691L, 6652L)), ((8390L, 6032L), (10984L, 11061L))))), (((((7406L, 11878L), (8398L, 7493L)), ((10419L, 10235L), (6377L, 6439L))), (((8367L, 6199L), (7263L, 7406L)), ((6199L, 7900L), (8367L, 6199L)))), ((((8667L, 9142L), (6491L, 7771L)), ((10391L, 8808L), (8667L, 9142L))), (((10391L, 8808L), (8667L, 9142L)), ((5882L, 9575L), (7008L, 6048L)))))), ((((((11087L, 9623L), (9013L, 9969L)), ((11294L, 9923L), (8390L, 6032L))), (((10656L, 11087L), (11087L, 9623L)), ((11087L, 9623L), (9013L, 9969L)))), ((((6590L, 10794L), (12483L, 6590L)), ((10794L, 8997L), (6590L, 10794L))), (((12386L, 12544L), (8196L, 11139L)), ((11266L, 11269L), (10751L, 12192L))))), (((((11266L, 11269L), (10751L, 12192L)), ((6905L, 8811L), (11180L, 9732L))), (((12338L, 12701L), (12474L, 12569L)), ((9948L, 10073L), (8577L, 10217L)))),((((8997L, 11091L), (11091L, 11210L)), ((10751L, 12192L), (12543L, 12143L))), (((961L, 12029L), (9262L, 11900L)), ((3825L, 7779L), (10500L, 11781L))))))), (((((((11318L, 10181L), (12334L, 12414L)), ((12292L, 11221L), (11221L, 9262L))), (((12721L, 961L), (11245L, 5132L)), ((12414L, 11245L), (12721L, 961L)))), ((((11248L, 12034L), (9972L, 11248L)), ((10948L, 12013L), (10823L, 5602L))), (((10839L, 10948L), (6673L, 10839L)), ((10729L, 9687L), (1300L, 12274L))))), (((((11087L, 9623L), (9013L, 9969L)), ((11294L, 9923L), (8390L, 6032L))),  (((10656L, 11087L), (11087L, 9623L)), ((11087L, 9623L), (9013L, 9969L)))), ((((6590L, 10794L), (12483L, 6590L)), ((10794L, 8997L), (6590L, 10794L))), (((12386L, 12544L), (8196L, 11139L)), ((11266L, 11269L), (10751L, 12192L)))))), ((((((11162L, 9208L), (6992L, 5965L)), ((9208L, 11317L), (10834L, 11318L))), (((12705L, 12769L), (3825L, 7779L)), ((12334L, 12414L), (12769L, 7059L)))), ((((11318L, 10181L), (12334L, 12414L)), ((12292L, 11221L), (11221L, 9262L))), (((12721L, 961L), (11245L, 5132L)), ((12414L, 11245L), (12721L, 961L))))), (((((11318L, 10181L), (12334L, 12414L)), ((12292L, 11221L), (11221L, 9262L))), (((12721L, 961L), (11245L, 5132L)), ((12414L, 11245L), (12721L, 961L)))), ((((11248L, 12034L), (9972L, 11248L)), ((10948L, 12013L), (10823L, 5602L))), (((10839L, 10948L), (6673L, 10839L)), ((10729L, 9687L), (1300L, 12274L)))))))), ((((((((9386L, 8168L), (8876L, 7622L)), ((6311L, 5727L), (7174L, 3611L))), (((8225L, 8804L), (8804L, 6369L)), ((8289L, 8953L), (8225L, 8804L)))), ((((9380L, 7698L), (6450L, 8876L)), ((9386L, 8168L), (8876L, 7622L))), (((9386L, 8168L), (8876L, 7622L)), ((6311L, 5727L), (7174L, 3611L))))), (((((9225L, 9777L), (6895L, 8167L)), ((10686L, 5395L), (12384L, 6816L))), (((5395L, 10211L), (10686L, 5395L)), ((10891L, 10127L), (6816L, 5622L)))), ((((9175L, 7918L), (6780L, 8004L)), ((6780L, 8004L), (10831L, 9175L))), (((6908L, 11020L), (10419L, 10235L)), ((11200L, 9756L), (11021L, 11462L)))))), ((((((10031L, 8445L), (6165L, 8329L)), ((8445L, 12689L), (10031L, 8445L))), (((5350L, 6189L), (7374L, 5782L)), ((8355L, 7054L), (6536L, 9380L)))), ((((5395L, 10211L), (10686L, 5395L)), ((10891L, 10127L), (6816L, 5622L))), (((8355L, 7054L), (6536L, 9380L)), ((9380L, 7698L), (6450L, 8876L))))), (((((7613L, 11184L), (11184L, 5673L)), ((8929L, 5318L), (8378L, 8929L))), (((10419L, 10235L), (6377L, 6439L)), ((8378L, 8929L), (5363L, 5910L)))), ((((7406L, 11878L), (8398L, 7493L)), ((10419L, 10235L), (6377L, 6439L))), (((8367L, 6199L), (7263L, 7406L)), ((6199L, 7900L), (8367L, 6199L))))))), (((((((8953L, 3409L), (8334L, 7375L)), ((7375L, 7220L), (8420L, 8556L))), (((7375L, 7220L), (8420L, 8556L)), ((8420L, 8556L), (8556L, 10089L)))), ((((11021L, 11462L), (6778L, 6854L)), ((10691L, 6652L), (11061L, 11230L))), (((6652L, 5660L), (10691L, 6652L)), ((8390L, 6032L), (10984L, 11061L))))), (((((7406L, 11878L), (8398L, 7493L)), ((10419L, 10235L), (6377L, 6439L))), (((8367L, 6199L), (7263L, 7406L)), ((6199L, 7900L), (8367L, 6199L)))), ((((8667L, 9142L), (6491L, 7771L)), ((10391L, 8808L), (8667L, 9142L))), (((10391L, 8808L), (8667L, 9142L)), ((5882L, 9575L), (7008L, 6048L)))))), ((((((11087L, 9623L), (9013L, 9969L)), ((11294L, 9923L), (8390L, 6032L))), (((10656L, 11087L), (11087L, 9623L)), ((11087L, 9623L), (9013L, 9969L)))), ((((6590L, 10794L), (12483L, 6590L)), ((10794L, 8997L), (6590L, 10794L))), (((12386L, 12544L), (8196L, 11139L)), ((11266L, 11269L), (10751L, 12192L))))), (((((11266L, 11269L), (10751L, 12192L)), ((6905L, 8811L), (11180L, 9732L))), (((12338L, 12701L), (12474L, 12569L)), ((9948L, 10073L), (8577L, 10217L)))),  ((((8997L, 11091L), (11091L, 11210L)), ((10751L, 12192L), (12543L, 12143L))), (((961L, 12029L), (9262L, 11900L)), ((3825L, 7779L), (10500L, 11781L)))))))))


graph = nx.Graph()

def create_graph(id,tree,graph):
    if id!=0:
        parent = (id-1)/2
        graph.add_edge(parent,id)
    if isinstance(tree[0],tuple) and isinstance(tree[1],tuple):
        create_graph(id*2+1,tree[0],graph)
        create_graph(id*2+2,tree[1],graph)
    else:
        graph.add_edge(id,tree[0])
        graph.add_edge(id,tree[1])
        graph.add_edge(tree[0],tree[1])

create_graph(0,tree,graph)
</snippet></ROW><ROW><id>13424359</id><snippet>prova_clip*mask
</snippet></ROW><ROW><id>13424359</id><snippet>&gt;&gt;&gt; a = np.arange(10,dtype=np.uint16)
&gt;&gt;&gt; mask = np.ones(10,dtype=np.uint8)
&gt;&gt;&gt; mask[1:3] = 0
&gt;&gt;&gt; a*mask
array([0, 0, 0, 3, 4, 5, 6, 7, 8, 9], dtype=uint16)
</snippet></ROW><ROW><id>13424359</id><snippet>&gt;&gt;&gt; b = np.arange(10,dypte=np.uint16)
&gt;&gt;&gt; b[~mask.astype(bool)] = 0
&gt;&gt;&gt; b
array([0, 0, 0, 3, 4, 5, 6, 7, 8, 9], dtype=uint16)
</snippet></ROW><ROW><id>13424359</id><snippet>numpy.where</snippet></ROW><ROW><id>13424359</id><snippet>&gt;&gt;&gt; c = np.arange(10,dtype=np.uint8)
&gt;&gt;&gt; np.where(mask==0,0,c)
array([0, 0, 0, 3, 4, 5, 6, 7, 8, 9], dtype=uint16)
</snippet></ROW><ROW><id>13424387</id><snippet>object</snippet></ROW><ROW><id>13424387</id><snippet>mro</snippet></ROW><ROW><id>13424387</id><snippet>In [288]: class Foo: pass
In [289]: dir(Foo) 
Out[289]: ['__doc__', '__module__']

In [290]: class Bar(object): pass
In [291]: dir(Bar) 
Out[291]:  ['__class__',  '__delattr__',     '__dict__',  '__doc__',  '__format__',  '__getattribute__',     '__hash__',  '__init__',  '__module__',  '__new__',  '__reduce__',     '__reduce_ex__',  '__repr__',  '__setattr__',  '__sizeof__',     '__str__',  '__subclasshook__',  '__weakref__']
</snippet></ROW><ROW><id>13424494</id><snippet>doc = yield motor.Op(cursor.next_object)
if doc:
    print doc
    self.write_message(json.dumps(doc, default = json_util.default))
</snippet></ROW><ROW><id>13424658</id><snippet>intersect(*d)
</snippet></ROW><ROW><id>13424658</id><snippet>*d</snippet></ROW><ROW><id>13424658</id><snippet>d</snippet></ROW><ROW><id>13424658</id><snippet>d</snippet></ROW><ROW><id>13424788</id><snippet>requests.head('http://httpbin.org/get').status_code
</snippet></ROW><ROW><id>13424820</id><snippet>Persistent</snippet></ROW><ROW><id>13424820</id><snippet>__parent__</snippet></ROW><ROW><id>13424820</id><snippet>__resource_url__()</snippet></ROW><ROW><id>13424820</id><snippet>_v_</snippet></ROW><ROW><id>13424992</id><snippet>TR_TEMPLATE.append('    &lt;td&gt;{}&lt;/td&gt;'.format(cols[0]))
TR_TEMPLATE = '\n'.join(TR_TEMPLATE)       #&lt;--converts TR_TEMPLATE to a string
</snippet></ROW><ROW><id>13424992</id><snippet>TR_TEMPLATE</snippet></ROW><ROW><id>13424992</id><snippet>.append</snippet></ROW><ROW><id>13424992</id><snippet>join</snippet></ROW><ROW><id>13425279</id><snippet>sys.exit(1)</snippet></ROW><ROW><id>13425279</id><snippet>return</snippet></ROW><ROW><id>13425279</id><snippet>def main():
    try:
        file = open('file.txt', 'r')
    except IOError:
        print('There was an error opening the file!')
        return

    # More code...

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13425279</id><snippet>__name__</snippet></ROW><ROW><id>13425279</id><snippet>return</snippet></ROW><ROW><id>13425515</id><snippet>ephem</snippet></ROW><ROW><id>13425515</id><snippet>sidereal_time()</snippet></ROW><ROW><id>13425515</id><snippet>import ephem # pip install pyephem (on Python 2)
             # pip install ephem   (on Python 3)

def solartime(observer, sun=ephem.Sun()):
    sun.compute(observer)
    # sidereal time == ra (right ascension) is the highest point (noon)
    hour_angle = observer.sidereal_time() - sun.ra
    return ephem.hours(hour_angle + ephem.hours('12:00')).norm  # norm for 24h
</snippet></ROW><ROW><id>13425515</id><snippet>ephem.hours</snippet></ROW><ROW><id>13425515</id><snippet>import math
from datetime import timedelta

def ul_time(observer):
    utc_dt = observer.date.datetime()
    longitude = observer.long
    return utc_dt + timedelta(hours=longitude / math.pi * 12)
</snippet></ROW><ROW><id>13425515</id><snippet>from datetime import datetime

# "solar time" for some other cities
for name in ['Los Angeles', 'New York', 'London',
             'Paris', 'Moscow', 'Beijing', 'Tokyo']:
    city = ephem.city(name)
    print("%-11s %11s %s" % (name, solartime(city),
                             ul_time(city).strftime('%T')))

# set date, longitude manually
o = ephem.Observer()
o.date = datetime(2012, 4, 15, 1, 0, 2) # some utc time
o.long = '00:00:00.0' # longitude (you could also use a float (radians) here)
print("%s %s" % (solartime(o), ul_time(o).strftime('%T')))
</snippet></ROW><ROW><id>13425515</id><snippet>Los Angeles 14:59:34.11 14:44:30
New York    17:56:31.27 17:41:27
London      22:52:02.04 22:36:58
Paris       23:01:56.56 22:46:53
Moscow       1:23:00.33 01:07:57
Beijing      6:38:09.53 06:23:06
Tokyo        8:11:17.81 07:56:15
1:00:00.10 01:00:01
</snippet></ROW><ROW><id>13425609</id><snippet>import lxml.html as LH

content = '''
&lt;a href="http://site1.com/"&gt;Hello&lt;/a&gt; &lt;a href="http://site2.com/"&gt;Hello2&lt;/a&gt;
&lt;a href="http://site3.com"&gt;Hello3&lt;/a&gt;
&lt;a href="/"&gt;go &lt;b&gt;home&lt;/b&gt;, dude!&lt;/a&gt;
'''

doc = LH.fromstring(content)
texts = [elt.text_content() for elt in doc.xpath('//a')]
print(texts)
</snippet></ROW><ROW><id>13425609</id><snippet>['Hello', 'Hello2', 'Hello3', 'go home, dude!']
</snippet></ROW><ROW><id>13425801</id><snippet>'\b'</snippet></ROW><ROW><id>13425801</id><snippet>re.compile(r'\b(?:#|@|)[0-9]*%s[0-9]*\b' % re.escape(term), re.IGNORECASE)
</snippet></ROW><ROW><id>13425832</id><snippet>dict3 = dict((dict1[key], dict2[key]) for key in dict1 if key in dict2)
</snippet></ROW><ROW><id>13425832</id><snippet>dict3 = {}
for key in dict1:
    if key in dict2:
        dict3[dict1[key]] = dict2[key]
</snippet></ROW><ROW><id>13425900</id><snippet>pyplot</snippet></ROW><ROW><id>13425900</id><snippet>exit()</snippet></ROW><ROW><id>13425900</id><snippet>TK</snippet></ROW><ROW><id>13425962</id><snippet>content = html.read()
</snippet></ROW><ROW><id>13426003</id><snippet>.get()</snippet></ROW><ROW><id>13426003</id><snippet>get</snippet></ROW><ROW><id>13426003</id><snippet>.filter()</snippet></ROW><ROW><id>13426003</id><snippet>Library.objects.filter(id=5)</snippet></ROW><ROW><id>13426003</id><snippet>Library.objects.get(id=5)</snippet></ROW><ROW><id>13426003</id><snippet>repr()</snippet></ROW><ROW><id>13426003</id><snippet>len()</snippet></ROW><ROW><id>13426003</id><snippet>list()</snippet></ROW><ROW><id>13426003</id><snippet>bool()</snippet></ROW><ROW><id>13426040</id><snippet>#!/usr/bin/env python
import wx
import thread
import Queue
from time import sleep

class MyFrame1 ( wx.Frame ):

        def __init__( self, parent ):
                wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = wx.DefaultPosition, size = wx.Size( 500,300 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )

                self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )

                bSizer1 = wx.BoxSizer( wx.VERTICAL )

                self.m_panel1 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
                bSizer2 = wx.BoxSizer( wx.VERTICAL )

                self.m_button1 = wx.Button( self.m_panel1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
                bSizer2.Add( self.m_button1, 0, wx.ALL, 5 )

                self.m_panel1.SetSizer( bSizer2 )
                self.m_panel1.Layout()
                bSizer2.Fit( self.m_panel1 )
                bSizer1.Add( self.m_panel1, 1, wx.EXPAND |wx.ALL, 5 )

                self.m_panel2 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
                bSizer3 = wx.BoxSizer( wx.VERTICAL )

                self.m_textCtrl1 = wx.TextCtrl( self.m_panel2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.TE_MULTILINE )
                bSizer3.Add( self.m_textCtrl1, 1, wx.ALL|wx.EXPAND, 5 )

                self.m_panel2.SetSizer( bSizer3 )
                self.m_panel2.Layout()
                bSizer3.Fit( self.m_panel2 )
                bSizer1.Add( self.m_panel2, 1, wx.EXPAND |wx.ALL, 5 )

                self.SetSizer( bSizer1 )
                self.Layout()

                self.Centre( wx.BOTH )

                # Connect Events
                self.m_button1.Bind( wx.EVT_BUTTON, self.do_something )

        def __del__( self ):
                pass


        # Virtual event handlers, overide them in your derived class
        def do_something( self, event ):
                event.Skip()



class MyFrame( MyFrame1 ):
    def __init__( self, parent ):
        MyFrame1.__init__( self, parent )

    def do_something(self, event):
        thread.start_new_thread(self.do_something_thread, ())

    def do_something_thread(self):
        self.Result = Queue.Queue()
        thread.start_new_thread(self.do_loop, ())
        self.m_textCtrl1.AppendText("searching for something... ")
        self.found= 0
        for character in self.cursor():
            self.m_textCtrl1.AppendText(character)
            self.Update()
            sleep(0.1)
            self.m_textCtrl1.Undo()
            if (self.found == 1):
                self.m_textCtrl1.AppendText('\n')
                break
        num = self.Result.get()
        print num

    def cursor(self):
        characters='.oOo'
        i = 0
        while 1:
            yield characters[i]
            i = (i + 1) % len(characters)

    def do_loop(self):
        x = 0
        while (x &lt; 20007):
            print x
            x = x + 1
            if x == 20000:
                self.Result.put(x)
                self.found = 1
                break

class threadtest(wx.App):
    def OnInit(self):
        self.m_frame = MyFrame(None)
        self.m_frame.Show()
        self.SetTopWindow(self.m_frame)
        return True

app = threadtest(0)
app.MainLoop()
</snippet></ROW><ROW><id>13426080</id><snippet>=</snippet></ROW><ROW><id>13426080</id><snippet>:</snippet></ROW><ROW><id>13426080</id><snippet>new_variable</snippet></ROW><ROW><id>13426080</id><snippet>my_dictionary = {'foo' : 10, 'bar' : 20}

variable = my_dictionary['foo']
new_variable = 0 # Get the value from another place
new_variable += variable
my_dictionary['foo'] = new_variable
</snippet></ROW><ROW><id>13426080</id><snippet>new_variable</snippet></ROW><ROW><id>13426080</id><snippet>my_dictionary = {'foo' : 10, 'bar' : 20}

variable = my_dictionary['foo']
new_variable = 0 # Get the value from another place
my_dictionary['foo'] += new_variable
</snippet></ROW><ROW><id>13426171</id><snippet>dtypes = {
    "GDT_Unknown": gdal.GDT_Unknown,
    "GDT_Byte": gdal.GDT_Byte, 
    # etc
}

target_ds = gdal.GetDriverByName('GTiff').Create(outFile, nx,ny, 1, dtypes[dtype])
</snippet></ROW><ROW><id>13426670</id><snippet>TR_TEMPLATE = '\n'.join(TR_TEMPLATE)
</snippet></ROW><ROW><id>13426670</id><snippet>TR_TEMPLATE = ['\n'.join(TR_TEMPLATE)]
</snippet></ROW><ROW><id>13426670</id><snippet>TR_TEMPLATE</snippet></ROW><ROW><id>13426670</id><snippet>TR_TEMPLATE.append(foo)</snippet></ROW><ROW><id>13426670</id><snippet>TR_TEMPLATE += foo + '\n'</snippet></ROW><ROW><id>13426670</id><snippet>TR_TEMPLATE</snippet></ROW><ROW><id>13426670</id><snippet>append</snippet></ROW><ROW><id>13426797</id><snippet>set</snippet></ROW><ROW><id>13426797</id><snippet>import cPickle as pickle

primes_set = set([2,3,5])

pickle.dump(primes_set, open('primes_set.pkl', 'wb')) 

my_primes = pickle.load(open('primes_set.pkl', 'rb')) # to load the object
</snippet></ROW><ROW><id>13426797</id><snippet>def get_primes(my_nums):
    '''
    Return only prime numbers from inputted list.
    '''
    my_primes = pickle.load(open('primes_set.pkl', 'rb'))
    return [num for num in my_nums if num in my_primes]
</snippet></ROW><ROW><id>13426839</id><snippet>\\?\</snippet></ROW><ROW><id>13426839</id><snippet>\\?\</snippet></ROW><ROW><id>13426839</id><snippet>'\\\\?\\' + file_name
</snippet></ROW><ROW><id>13426839</id><snippet>'\\\\?\\' + os.path.abspath(file_name)
</snippet></ROW><ROW><id>13426839</id><snippet>r'\\?\\'</snippet></ROW><ROW><id>13426839</id><snippet>C:\foo</snippet></ROW><ROW><id>13426839</id><snippet>\\server\share\bar</snippet></ROW><ROW><id>13427033</id><snippet>@decorator
def foo(x):
    return x + 1
</snippet></ROW><ROW><id>13427033</id><snippet>def foo(x):
    return x + 1
foo = oauth_machine.auth(foo)
</snippet></ROW><ROW><id>13427033</id><snippet>@oauth_machine.auth</snippet></ROW><ROW><id>13427033</id><snippet>get</snippet></ROW><ROW><id>13427033</id><snippet>inner</snippet></ROW><ROW><id>13427033</id><snippet>fn</snippet></ROW><ROW><id>13427033</id><snippet>def auth(fn):
    def inner(self):
        res = get_user_by_credentials(self, fn, callback=done_auth)
    return inner
</snippet></ROW><ROW><id>13427033</id><snippet>get_user_by_credentials</snippet></ROW><ROW><id>13427033</id><snippet>fn</snippet></ROW><ROW><id>13427033</id><snippet>fn</snippet></ROW><ROW><id>13427033</id><snippet>callback</snippet></ROW><ROW><id>13427033</id><snippet>def get_user_by_credentials(self, fn, callback):

    def onFetchUserCredentials(result, error):
        self.user = result
        callback(self, fn)
</snippet></ROW><ROW><id>13427033</id><snippet>callback</snippet></ROW><ROW><id>13427033</id><snippet>done_auth</snippet></ROW><ROW><id>13427033</id><snippet>inner</snippet></ROW><ROW><id>13427033</id><snippet>fn</snippet></ROW><ROW><id>13427033</id><snippet>get</snippet></ROW><ROW><id>13427033</id><snippet>result</snippet></ROW><ROW><id>13427033</id><snippet>def done_auth(result, fn):
    return fn(result)
</snippet></ROW><ROW><id>13427033</id><snippet>fn</snippet></ROW><ROW><id>13427033</id><snippet>get</snippet></ROW><ROW><id>13427310</id><snippet>import itertools
import functools
@functools.total_ordering
class DryDescriptor(object):
    _order_gen = itertools.count()
    def __init__(self, alias=None):
        self.alias = alias
        self.order = next(self._order_gen)

    def __lt__(self, other):
        return self.order &lt; other.order
</snippet></ROW><ROW><id>13427310</id><snippet>class slot(DryDescriptor):
    def annotate(self, attr, attrs):
        del attrs[attr]
        self.attr = attr
        slots = attrs.setdefault('__slots__', []).append(attr)

    def annotate_class(self, cls):
        if self.alias is not None:
            setattr(cls, self.alias, getattr(self.attr))
</snippet></ROW><ROW><id>13427310</id><snippet>import weakref
class memo(DryDescriptor):
    _memo = None
    def __call__(self, method):
        self.getter = method
        return self

    def annotate(self, attr, attrs):
        if self.alias is not None:
            attrs[self.alias] = self

    def annotate_class(self, cls): pass

    def __get__(self, instance, owner):
        if instance is None:
            return self
        if self._memo is None:
            self._memo = weakref.WeakKeyDictionary()
        try:
            return self._memo[instance]
        except KeyError:
            return self._memo.setdefault(instance, self.getter(instance))
</snippet></ROW><ROW><id>13427310</id><snippet>__init__</snippet></ROW><ROW><id>13427310</id><snippet>class DryMeta(type):
    def __new__(mcls, name, bases, attrs):
        descriptors = sorted((value, key) 
                             for key, value 
                             in attrs.iteritems() 
                             if isinstance(value, DryDescriptor))

        for descriptor, attr in descriptors:
            descriptor.annotate(attr, attrs)

        cls = type.__new__(mcls, name, bases, attrs)
        for descriptor, attr in descriptors:
            descriptor.annotate_class(cls)

        cls._header_descriptors = [getattr(cls, attr) for descriptor, attr in descriptors]
        return cls
</snippet></ROW><ROW><id>13427310</id><snippet>to_row</snippet></ROW><ROW><id>13427310</id><snippet>__get__</snippet></ROW><ROW><id>13427310</id><snippet>class DryBase(object):
    __metaclass__ = DryMeta

    def to_row(self):
        cls = type(self)
        return [desc.__get__(self, cls) for desc in cls._header_descriptors]
</snippet></ROW><ROW><id>13427310</id><snippet>alias</snippet></ROW><ROW><id>13427310</id><snippet>'seeds?'</snippet></ROW><ROW><id>13427310</id><snippet>has_seeds</snippet></ROW><ROW><id>13427310</id><snippet>class ADryRow(DryBase):
    __slots__ = ['seeds']

    ripeness = slot()
    colour = slot()
    juiciness = slot()

    @memo(alias='seeds?')
    def has_seeds(self):
        print "Expensive!!!"
        return self.seeds &gt; 0
</snippet></ROW><ROW><id>13427310</id><snippet>&gt;&gt;&gt; my_row = ADryRow()
&gt;&gt;&gt; my_row.ripeness = "tart"
&gt;&gt;&gt; my_row.colour = "#8C2"
&gt;&gt;&gt; my_row.juiciness = 0.3479
&gt;&gt;&gt; my_row.seeds = 19
&gt;&gt;&gt;
&gt;&gt;&gt; print my_row.to_row()
Expensive!!!
['tart', '#8C2', 0.3479, True]
&gt;&gt;&gt; print my_row.to_row()
['tart', '#8C2', 0.3479, True]
</snippet></ROW><ROW><id>13427335</id><snippet>timeit</snippet></ROW><ROW><id>13427335</id><snippet>setup = """
import random
l1 = [random.randrange(100) for _ in xrange(100)]
l2 = [random.randrange(100) for _ in xrange(10)]
"""
</snippet></ROW><ROW><id>13427335</id><snippet>time = min(timeit.repeat(statements, setup=setup, repeat=R, number=N))
</snippet></ROW><ROW><id>13427335</id><snippet>R = 3</snippet></ROW><ROW><id>13427470</id><snippet>def maximize(a, b, lim):
    a.sort(reverse=True)
    b.sort()
    found = False
    best = 0
    j = 0
    for i in xrange(len(a)):
        while j &lt; len(b) and a[i] * b[j] &lt; lim:
            found = True
            if a[i]*b[j] &gt; best:
                best, n1, n2 = a[i] * b[j], a[i], b[j]
            j += 1
    return found and (best, n1, n2)
</snippet></ROW><ROW><id>13427470</id><snippet>False</snippet></ROW><ROW><id>13427470</id><snippet>a = [2, 5, 4, 3, 6]
b = [8, 1, 5, 4]
maximize(a, b, 2)   # False
maximize(a, b, 3)   # (2, 2, 1)
maximize(a, b, 10)  # (8, 2, 4)
maximize(a, b, 100) # (48, 6, 8)
</snippet></ROW><ROW><id>13427499</id><snippet>GET</snippet></ROW><ROW><id>13427499</id><snippet>POST</snippet></ROW><ROW><id>13427499</id><snippet>method="POST"</snippet></ROW><ROW><id>13427674</id><snippet>In [1]: with open("data1.txt") as f:
   ...:     dic={}
   ...:     for line in f:
   ...:         spl=line.split()
   ...:         dic.setdefault(spl[2],[]).append(int(spl[0]))
   ...:     for name in dic :    
   ...:         print (name,dic[name])
   ...:       

Roger [1961, 1962, 1963]
Jessica [1963, 1964, 1965, 1966]
</snippet></ROW><ROW><id>13427674</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>13427674</id><snippet>In [2]: from collections import defaultdict

In [3]: with open("data1.txt") as f:
   ...:     dic=defaultdict(list)
   ...:     for line in f:
   ...:         
   ...:         spl=line.split()
   ...:         dic[spl[2]].append(int(spl[0]))
   ...:     for name in dic:    
   ...:         print name,dic[name]
   ...:         
Roger [1961, 1962, 1963]
Jessica [1963, 1964, 1965, 1966]
</snippet></ROW><ROW><id>13427860</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy import interpolate
data = np.array([[-1452.18133319 , 3285.44737438, -7075.49516676],
                 [-1452.20175668 , 3285.29632734, -7075.49110863],
                 [-1452.32645025 , 3284.37412457, -7075.46633213],
                 [-1452.38226151 , 3283.96135828, -7075.45524248]])

distance=np.array([0., 0.15247556, 1.0834, 1.50007])

data = data.T
tck,u = interpolate.splprep(data, u=distance, s=0)
yderv = interpolate.splev(u,tck,der=1)
</snippet></ROW><ROW><id>13427860</id><snippet>(-0.13394599723751408, -0.99063114953803189, 0.026614957159932656)
(-0.13394598523149195, -0.99063115868512985, 0.026614950816003666)
(-0.13394595055068903, -0.99063117647357712, 0.026614941718878599)
(-0.13394595652952143, -0.9906311632471152, 0.026614954146007865)
</snippet></ROW><ROW><id>13428061</id><snippet>def all_primes(start,end):
    list_primes = []

    for i in range(2,end):
        for a in list_primes:
            if i % a == 0:
                break
        else:
            list_primes.append(i)

    return [x for x in list_primes if x &gt;= start]
</snippet></ROW><ROW><id>13428061</id><snippet>for...else</snippet></ROW><ROW><id>13428061</id><snippet>for</snippet></ROW><ROW><id>13428061</id><snippet>else</snippet></ROW><ROW><id>13428061</id><snippet>break</snippet></ROW><ROW><id>13428143</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; s = "Mon, 26 Dec 2011 20:42:08 +0200"
&gt;&gt;&gt; t = datetime.datetime.strptime(s, "%a, %d %b %Y %H:%M:%S %z")
&gt;&gt;&gt; t
datetime.datetime(2011, 12, 26, 20, 42, 8, tzinfo=datetime.timezone(datetime.timedelta(0, 7200)))
</snippet></ROW><ROW><id>13428353</id><snippet>easy_install</snippet></ROW><ROW><id>13428353</id><snippet>pip</snippet></ROW><ROW><id>13428353</id><snippet>easy_install</snippet></ROW><ROW><id>13428353</id><snippet>#!/bin/bash -e

# Setup
sudo aptitude install build-essential
mkdir -p ${HOME}/.local
mkdir build-python
cd build-python

# Get sources

### Tcl/Tk &lt;http://www.tcl.tk/software/tcltk/download.html&gt;
wget "http://downloads.sourceforge.net/project/tcl/Tcl/8.5.13/tcl8.5.13-src.tar.gz"
wget "http://downloads.sourceforge.net/project/tcl/Tcl/8.5.13/tk8.5.13-src.tar.gz"

### Berkeley DB &lt;http://www.oracle.com/technetwork/products/berkeleydb/downloads/index-082944.html&gt;
wget "http://download.oracle.com/berkeley-db/db-4.8.30.tar.gz"

### Python &lt;http://www.python.org/download/&gt;
wget "http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz"

# Build Tcl
tar xzf tcl8.5.13-src.tar.gz
cd tcl8.5.13/unix
./configure --prefix=${HOME}/.local
make
make install
cd ../..

# Build Tk
tar xzf tk8.5.13-src.tar.gz
cd tk8.5.13/unix
./configure --prefix=${HOME}/.local
make
make install
cd ../..

# Build Berkeley DB 4.8
tar xzf db-4.8.30.tar.gz
cd db-4.8.30/build_unix
../dist/configure --prefix=${HOME}/.local/opt/BerkeleyDB.4.8 --enable-tcl --with-tcl=${HOME}/.local/lib
make
make install
cd ../..

# Set compile flags
export LDFLAGS="-L${HOME}/.local/lib -L${HOME}/.local/opt/BerkeleyDB.4.8/lib"
export CPPFLAGS="-I${HOME}/.local/include -I${HOME}/.local/opt/BerkeleyDB.4.8/include"
export CXXFLAGS=${CPPFLAGS}
export CFLAGS=${CPPFLAGS}
export LD_LIBRARY_PATH=${HOME}/.local/lib:${HOME}/.local/opt/BerkeleyDB.4.8/lib
export LD_RUN_PATH=${LD_LIBRARY_PATH}

# Build Python 2.7
tar xzf Python-2.7.3.tgz
cd Python-2.7.3
./configure --prefix=${HOME}/.local
make
make altinstall
cd ..

# Install virtualenv, pip and virtualenvwrapper
curl http://python-distribute.org/distribute_setup.py | ${HOME}/.local/bin/python2.7
curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | ${HOME}/.local/bin/python2.7
${HOME}/.local/bin/pip install virtualenvwrapper

# Update ~/.bashrc
echo 'export PATH="${HOME}/.local/bin:${PATH}"' &gt;&gt; ${HOME}/.bashrc
echo 'export WORKON_HOME="${HOME}/.local/virtualenv"' &gt;&gt; ${HOME}/.bashrc
echo 'export VIRTUALENVWRAPPER_PYTHON="${HOME}/.local/bin/python2.7"' &gt;&gt; ${HOME}/.bashrc
echo 'export VIRTUALENVWRAPPER_VIRTUALENV="${HOME}/.local/bin/virtualenv"' &gt;&gt; ${HOME}/.bashrc
echo 'export VIRTUALENVWRAPPER_VIRTUALENV_ARGS="--python=python2.7"' &gt;&gt; ${HOME}/.bashrc
echo 'source ${HOME}/.local/bin/virtualenvwrapper.sh' &gt;&gt; ${HOME}/.bashrc

# Finish ...
cd ..
echo -e "\n\n ... Done!"
</snippet></ROW><ROW><id>13428353</id><snippet>Python build finished, but the necessary bits to build these modules were not found:
bsddb185           dl                 imageop         
sunaudiodev                                           
To find the necessary bits, look in setup.py in detect_modules() for the module's name.
</snippet></ROW><ROW><id>13428353</id><snippet>.bashrc</snippet></ROW><ROW><id>13428353</id><snippet>$ source ~/.bashrc
</snippet></ROW><ROW><id>13428353</id><snippet>$ python2.7
Python 2.7.3 (default, Nov 17 2012, 02:00:26) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13428353</id><snippet>$ mkvirtualenv my_env
$ python
Python 2.7.3 (default, Nov 17 2012, 02:00:26) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13428353</id><snippet>$ pip install beautifulsoup4
</snippet></ROW><ROW><id>13428353</id><snippet>$ deactivate
</snippet></ROW><ROW><id>13428353</id><snippet>$ workon my_env
</snippet></ROW><ROW><id>13428507</id><snippet>In [30]: with open("data1.txt") as f:
    lis=[line.split() for line in f]        # create a list of lists
    for i,x in enumerate(lis):              #print the list items 
        print "line{0} = {1}".format(i,x)
   ....:         
line0 = ['Year:', 'Dec:', 'Jan:']
line1 = ['1', '50', '60']
line2 = ['2', '25', '50']
line3 = ['3', '30', '30']
line4 = ['4', '40', '20']
line5 = ['5', '10', '10']
</snippet></ROW><ROW><id>13428507</id><snippet>In [39]: with open("data1.txt") as f:
    for i,line in enumerate(f):             
        print "line {0} = {1}".format(i,line.split())
   ....:         
line 0 = ['Year:', 'Dec:', 'Jan:']
line 1 = ['1', '50', '60']
line 2 = ['2', '25', '50']
line 3 = ['3', '30', '30']
line 4 = ['4', '40', '20']
line 5 = ['5', '10', '10']
</snippet></ROW><ROW><id>13428507</id><snippet>In [5]: with open('data1.txt') as f:
        print "{0}".format(f.readline().split())
        for x in f:
                x=x.split()
                print "{0} = {1}".format(x[0],sum(map(int,x[1:])))
   ...:         
['Year:', 'Dec:', 'Jan:']
1 = 110
2 = 75
3 = 60
4 = 60
5 = 20
</snippet></ROW><ROW><id>13428943</id><snippet>root.geometry()</snippet></ROW><ROW><id>13429005</id><snippet>set()</snippet></ROW><ROW><id>13429005</id><snippet>In [40]: d='banttnay'

In [41]: for x in set(d):
   ....:     print x,d.count(x)
   ....:     
a 2
y 1
b 1
t 2
n 2
</snippet></ROW><ROW><id>13429005</id><snippet>OrderedDict</snippet></ROW><ROW><id>13429005</id><snippet>collections</snippet></ROW><ROW><id>13429005</id><snippet>In [67]: from collections import *

In [68]: c=OrderedDict()

In [69]: for x in d:
    c[x]=c.get(x,0)+1
In [71]: for x in c:
   ....:     print x,c[x]
   ....:     
b 1
a 2
n 2
t 2
y 1
</snippet></ROW><ROW><id>13429005</id><snippet>unique_everseen</snippet></ROW><ROW><id>13429005</id><snippet>itertools Recipes</snippet></ROW><ROW><id>13429005</id><snippet>&gt;&gt;&gt; d='banttnay'
&gt;&gt;&gt; from itertools import *
&gt;&gt;&gt; def unique_everseen(iterable, key=None):
...     seen = set()
...     seen_add = seen.add
...     if key is None:
...         for element in ifilterfalse(seen.__contains__, iterable):
...             seen_add(element)
...             yield element
...     else:
...         for element in iterable:
...             k = key(element)
...             if k not in seen:
...                 seen_add(k)
...                 yield element
... 
&gt;&gt;&gt; for x in unique_everseen(d):
...     print x,d.count(x)
... 
b 1
a 2
n 2
t 2
y 1
</snippet></ROW><ROW><id>13429023</id><snippet>QRect</snippet></ROW><ROW><id>13429023</id><snippet>self.rect</snippet></ROW><ROW><id>13429023</id><snippet>class Test_Box(QGraphicsItem):
    """ Group box that groups the various stages """
    # Constants
    WIDTH               = 70 * POINT_SIZE
    HEIGHT              = 100 * POINT_SIZE
    RECT                = QRectF(0, 0, WIDTH, HEIGHT)
    CORNER_RADIUS       = 1.5 * POINT_SIZE
    FONT_SIZE           = 4 * POINT_SIZE
    BORDERRECT_PAD      = 4 * POINT_SIZE

    def __init__(self, position, parent=None):
        super(Test_Box, self).__init__(parent)

        # Vars
        self.resize_sections= None
        self.resize_pos     = None
        self.rect           = QRectF(Test_Box.RECT)    #use a copy!

        # Settings
        self.setFlags(  self.flags()                    |
                        QGraphicsItem.ItemIsSelectable  |
                        QGraphicsItem.ItemIsMovable     |
                        QGraphicsItem.ItemIsFocusable   )
</snippet></ROW><ROW><id>13429023</id><snippet>boundingRect()</snippet></ROW><ROW><id>13429023</id><snippet>self.rect</snippet></ROW><ROW><id>13429143</id><snippet>pip install selenium</snippet></ROW><ROW><id>13429143</id><snippet>from selenium import webdriver
driver = webdriver.Firefox()
driver.get("http://google.com")
print driver.title
driver.close()
</snippet></ROW><ROW><id>13429146</id><snippet>s1=sets.Set(['0','1','1','0','1'])
</snippet></ROW><ROW><id>13429146</id><snippet>print s1
----&gt;Set(['1', '0'])
</snippet></ROW><ROW><id>13429402</id><snippet>newdict = {
    (key.year, key.month): sum(
        v[0] for k, v in olddict.iteritems()
        if (key.year, key.month) == (k.year, k.month)
    )
    for key in olddict
}
</snippet></ROW><ROW><id>13429402</id><snippet>&gt;&gt;&gt; newdict
{(2000, 1): 10, (2005, 1): 8}
</snippet></ROW><ROW><id>13429402</id><snippet>from collections import defaultdict

newdict = defaultdict(lambda: [0])
for key in olddict:
    newdict[(key.year, key.month)][0] += olddict[key][0]
</snippet></ROW><ROW><id>13429406</id><snippet>from itertools import groupby
from operator import itemgetter
[(k , sum(e for _,e in v)) for k,v in groupby(zip(EmpID, TotDur), itemgetter(0))]
[(u'1046', 4.5), (u'8008', 2.7), (u'8011', 1.2)]
</snippet></ROW><ROW><id>13429406</id><snippet>Emp_TotDur = Assign.objects.select_related().filter(pName=selProject).filter()
    .order_by('laEmpNum').values_list('laEmpNum', 'duration')

[(k , sum(e for _,e in v)) for k,v in groupby(Emp_TotDur, itemgetter(0))]
</snippet></ROW><ROW><id>13430249</id><snippet>distribute_setup.py</snippet></ROW><ROW><id>13430416</id><snippet>test1 = A 
print test1 #return : &lt;class '__main__.A'&gt;
</snippet></ROW><ROW><id>13430416</id><snippet>test2 = A() 
print test2 #return : &lt;__main__.A object at 0x0126DF90&gt;
</snippet></ROW><ROW><id>13430416</id><snippet>print test1().a
</snippet></ROW><ROW><id>13430416</id><snippet>A().a</snippet></ROW><ROW><id>13430416</id><snippet>print test2().a # == [A()]().a</snippet></ROW><ROW><id>13430416</id><snippet>__call__</snippet></ROW><ROW><id>13430416</id><snippet>class State(object):
    " Dummy Finite state machine "

    def __init__(self)
         self.count = 0

    @property
    def state(self):
        return self.count % 4

    def __call__(self):
        return self.state

    def next(self):
        self.count +=1

s = State() # State object
print s() # return 0
s.next() # count = 1
s.next() # count = 2
s.next() # count = 3
s.next() # count = 4
s.next() # count = 5
print s() # return 5 % 4 =1
</snippet></ROW><ROW><id>13430652</id><snippet>@QtCore.Slot('QString')
def printText(self,text):
    print text
</snippet></ROW><ROW><id>13430732</id><snippet>BadFileDescriptor</snippet></ROW><ROW><id>13430732</id><snippet>stdout</snippet></ROW><ROW><id>13430732</id><snippet>stdout</snippet></ROW><ROW><id>13430732</id><snippet>print</snippet></ROW><ROW><id>13430732</id><snippet>sys.stdout</snippet></ROW><ROW><id>13430732</id><snippet>stdout</snippet></ROW><ROW><id>13430732</id><snippet>logging</snippet></ROW><ROW><id>13430732</id><snippet>stdout</snippet></ROW><ROW><id>13430732</id><snippet>logging</snippet></ROW><ROW><id>13430732</id><snippet>stdout</snippet></ROW><ROW><id>13430732</id><snippet>import sys
import tempfile
sys.stdout = tempfile.TemporaryFile()
sys.stderr = tempfile.TemporaryFile()
</snippet></ROW><ROW><id>13430732</id><snippet>logging</snippet></ROW><ROW><id>13430732</id><snippet>import sys
import logging

debug_logger = logging.getLogger('debug')
debug_logger.write = debug_logger.debug    #consider all prints as debug information
#debug_logger.setLevel(logging.DEBUG)      #activate debug logger output
sys.stdout = debug_logger
</snippet></ROW><ROW><id>13430732</id><snippet>print</snippet></ROW><ROW><id>13430732</id><snippet>stdout.write</snippet></ROW><ROW><id>13430732</id><snippet>&gt;&gt;&gt; print 'test'
DEBUG:debug:test
DEBUG:debug:
</snippet></ROW><ROW><id>13430732</id><snippet>write</snippet></ROW><ROW><id>13430732</id><snippet>the_logger.debug</snippet></ROW><ROW><id>13430732</id><snippet>print</snippet></ROW><ROW><id>13430732</id><snippet>logging.debug</snippet></ROW><ROW><id>13430732</id><snippet>stdout</snippet></ROW><ROW><id>13430822</id><snippet>row[1] = finishSend</snippet></ROW><ROW><id>13430822</id><snippet>row.insert(2, row[1]) 
</snippet></ROW><ROW><id>13431213</id><snippet>[]</snippet></ROW><ROW><id>13431213</id><snippet>&gt;&gt;&gt; def bad(default=[]):
...     default.append(1)
...     print default
... 
&gt;&gt;&gt; bad()
[1]
&gt;&gt;&gt; bad()
[1, 1]
&gt;&gt;&gt; bad()
[1, 1, 1]
&gt;&gt;&gt; def good(default=None):
...     if default is None:
...             default = []
...     default.append(1)
...     print default
... 
&gt;&gt;&gt; good()
[1]
&gt;&gt;&gt; good()
[1]
</snippet></ROW><ROW><id>13431213</id><snippet>None</snippet></ROW><ROW><id>13431333</id><snippet>0</snippet></ROW><ROW><id>13431333</id><snippet>print 1
print 10
print 100
print 1000
</snippet></ROW><ROW><id>13431422</id><snippet>'Content-Type'</snippet></ROW><ROW><id>13431422</id><snippet>import urllib2
url = 'http://stackoverflow.com/questions/13431060/python-html-parsing'
req = urllib2.Request(url)
req.get_method = lambda : 'HEAD'    
response = urllib2.urlopen(req)
content_type = response.headers.getheader('Content-Type')
print(content_type)
</snippet></ROW><ROW><id>13431422</id><snippet>text/html; charset=utf-8
</snippet></ROW><ROW><id>13431422</id><snippet>req.get_method = lambda : 'HEAD'</snippet></ROW><ROW><id>13431963</id><snippet>time.sleep(0.5)</snippet></ROW><ROW><id>13431963</id><snippet>while time.clock()-t0&lt;0.5:
    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            t1 = time.clock()
            print t1-t0
</snippet></ROW><ROW><id>13431997</id><snippet>def find_all(haystack, needle):
    if not haystack:
        # no occurences can happen
        return []
</snippet></ROW><ROW><id>13431997</id><snippet>    if haystack[0] == needle:
        occurences = [0] # the index of the first element is always 0
    else:
        occurences = []
</snippet></ROW><ROW><id>13431997</id><snippet>    recursive_occurences = find_all(haystack[1:], needle)
</snippet></ROW><ROW><id>13431997</id><snippet>0</snippet></ROW><ROW><id>13431997</id><snippet>1</snippet></ROW><ROW><id>13431997</id><snippet>    for x in recursive_occurences:
        occurences.append(x+1)
</snippet></ROW><ROW><id>13431997</id><snippet>    return occurences
</snippet></ROW><ROW><id>13432102</id><snippet>#!/usr/bin/env python
import wx
import wx.grid

class ExampleFrame ( wx.Frame ):

    def __init__( self, parent ):
        wx.Frame.__init__ ( self, parent)

        self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )

        bSizer1 = wx.BoxSizer( wx.VERTICAL )

        self.Panel = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
        bSizer2 = wx.BoxSizer( wx.VERTICAL )

        self.nb = wx.Notebook( self.Panel, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0 )

        bSizer2.Add( self.nb, 1, wx.EXPAND |wx.ALL, 5 )

        self.Panel.SetSizer( bSizer2 )
        self.Panel.Layout()
        bSizer2.Fit( self.Panel )
        bSizer1.Add( self.Panel, 1, wx.EXPAND |wx.ALL, 0 )

        self.SetSizer( bSizer1 )
        self.Layout()
        self.menuBar = wx.MenuBar( 0 )
        self.filemenu = wx.Menu()
        self.menuAbout = wx.MenuItem( self.filemenu, wx.ID_ANY, u"&amp;About", u" Information about this program", wx.ITEM_NORMAL )
        self.filemenu.AppendItem( self.menuAbout )

        self.menuExit = wx.MenuItem( self.filemenu, wx.ID_ANY, u"E&amp;xit", u" Terminate the program", wx.ITEM_NORMAL )
        self.filemenu.AppendItem( self.menuExit )

        self.menuBar.Append( self.filemenu, u"&amp;miP3" )

        self.SetMenuBar( self.menuBar )

        self.statusBar = self.CreateStatusBar( 1, wx.ST_SIZEGRIP, wx.ID_ANY )

        self.Centre( wx.BOTH )

        self.Bind( wx.EVT_MENU, self.OnAbout, id = self.menuAbout.GetId() )
        self.Bind( wx.EVT_MENU, self.OnExit, id = self.menuExit.GetId() )

    def __del__( self ):
            pass

    def OnAbout( self, event ):
        event.Skip()

    def OnExit( self, event ):
        event.Skip()

class ExamplePanel ( wx.Panel ):

    def __init__( self, parent ):
        wx.Panel.__init__ ( self, parent )

        # whatever you want on your panel goes here, for example a grid
        bSizer3 = wx.BoxSizer( wx.VERTICAL )
        self.m_grid1 = wx.grid.Grid( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, 0 )
        self.m_grid1.CreateGrid( 5, 3 )
        self.m_grid1.EnableEditing( True )
        self.m_grid1.EnableGridLines( True )
        self.m_grid1.EnableDragGridSize( False )
        self.m_grid1.SetMargins( 0, 0 )
        self.m_grid1.EnableDragColMove( False )
        self.m_grid1.EnableDragColSize( True )
        self.m_grid1.SetColLabelSize( 30 )
        self.m_grid1.SetColLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )
        self.m_grid1.EnableDragRowSize( True )
        self.m_grid1.SetRowLabelSize( 80 )
        self.m_grid1.SetRowLabelAlignment( wx.ALIGN_CENTRE, wx.ALIGN_CENTRE )
        self.m_grid1.SetDefaultCellAlignment( wx.ALIGN_LEFT, wx.ALIGN_TOP )
        bSizer3.Add( self.m_grid1, 1, wx.ALL|wx.EXPAND, 5 )
        self.SetSizer( bSizer3 )
        self.Layout()

    def __del__( self ):
        pass

class MyFrame( ExampleFrame ):
    def __init__( self, parent ):
        ExampleFrame.__init__( self, parent )

        self.title = "Demo with Notebook"
        self.SetTitle(self.title)

        self.nb.AddPage(ExamplePanel(self.nb), "Absolute Positioning")
        self.nb.AddPage(ExamplePanel(self.nb), "Page Two")
        self.nb.AddPage(ExamplePanel(self.nb), "Page Three")

    def OnAbout(self, event):
        # A message dialoge box with an OK button. wx.OK is a sandard ID in wxWidgets
        dlg = wx.MessageDialog(self, "Author: Niek de Klein", "About miP3")
        dlg.ShowModal() # show it
        dlg.Destroy() # finally destroy it when finished

    def OnExit(self, eevent):
        self.Close(True) # close the frame

class testapp(wx.App):
    def OnInit(self):
        self.m_frame = MyFrame(None)
        self.m_frame.Show()
        self.SetTopWindow(self.m_frame)
        return True

app = testapp(0)
app.MainLoop()
</snippet></ROW><ROW><id>13432359</id><snippet>Gtk.Statusbar</snippet></ROW><ROW><id>13432359</id><snippet>remove</snippet></ROW><ROW><id>13432359</id><snippet>Gtk.Container.remove(statusbar, widget)</snippet></ROW><ROW><id>13432697</id><snippet>@pytest.fixture()
def myfixture():
    """ """
    return A('BigDave')

def test_validateA(myfixture):
    result = myfixture().make_request('male')
    assert result =='result'
</snippet></ROW><ROW><id>13432697</id><snippet>myfixture</snippet></ROW><ROW><id>13432697</id><snippet>myfixture()</snippet></ROW><ROW><id>13432697</id><snippet>myfixture()</snippet></ROW><ROW><id>13432697</id><snippet>return A</snippet></ROW><ROW><id>13432697</id><snippet>instance</snippet></ROW><ROW><id>13432697</id><snippet>A()</snippet></ROW><ROW><id>13432697</id><snippet>A('BigDave')</snippet></ROW><ROW><id>13432697</id><snippet>test_validateA</snippet></ROW><ROW><id>13432697</id><snippet>A</snippet></ROW><ROW><id>13432697</id><snippet>myfixture</snippet></ROW><ROW><id>13432697</id><snippet>self</snippet></ROW><ROW><id>13432766</id><snippet>&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; doc = lxml.html.parse('http://stackoverflow.com/questions/13432626/split-a-s
tring-in-python-taking-care-of-quotes')
&gt;&gt;&gt; form = doc.xpath('//form')[0]
&gt;&gt;&gt; form
&lt;Element form at 0xbb1870&gt;
&gt;&gt;&gt; form.attrib
{'action': '/search', 'autocomplete': 'off', 'id': 'search', 'method': 'get'}
</snippet></ROW><ROW><id>13433069</id><snippet>print()</snippet></ROW><ROW><id>13433069</id><snippet>__future__</snippet></ROW><ROW><id>13433069</id><snippet>sep='\t'</snippet></ROW><ROW><id>13433069</id><snippet>print()</snippet></ROW><ROW><id>13433069</id><snippet>print</snippet></ROW><ROW><id>13433069</id><snippet>In [1]: from __future__ import print_function

In [2]: print('a','b',sep='\t')
a   b
</snippet></ROW><ROW><id>13433069</id><snippet>print()</snippet></ROW><ROW><id>13433069</id><snippet>print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout)
</snippet></ROW><ROW><id>13433069</id><snippet>Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file: a file-like object (stream); defaults to the current sys.stdout.
sep:  string inserted between values, default a space.
end:  string appended after the last value, default a newline.
</snippet></ROW><ROW><id>13433133</id><snippet>function pixsolve(A, b) result(x)
    implicit none
    real*8    :: A(:,:,:), b(:,:), x(size(b,1),size(b,2))
    integer*4 :: i, n, m, piv(size(b,1)), err
    n = size(A,3); m = size(A,1)
    x = b
    do i = 1, n
        call dgesv(m, 1, A(:,:,i), m, piv, x(:,i), m, err)
    end do
end function
</snippet></ROW><ROW><id>13433133</id><snippet>f2py -c -m foo{,.f90} -llapack -lblas
</snippet></ROW><ROW><id>13433133</id><snippet>x = foo.pixsolve(A.T, b.T).T
</snippet></ROW><ROW><id>13433133</id><snippet>.T</snippet></ROW><ROW><id>13433133</id><snippet>.T</snippet></ROW><ROW><id>13433297</id><snippet>delta_Array = np.array([0.01,0.02,0.03, 0.04, 0.05, 0.06,0.07, 0.08, 0.09, 0.10])
theta_Matrix = []

for i in range(N):
     t = Ridge(Xtrain, ytrain, .3)
     theta_Matrix.append(t)
theta_Matrix = np.array(theta_Matrix)
</snippet></ROW><ROW><id>13433297</id><snippet>theta_Matrix</snippet></ROW><ROW><id>13433297</id><snippet>delta_Array = np.array([0.01,0.02,0.03, 0.04, 0.05, 0.06,0.07, 0.08, 0.09, 0.10])
theta_Matrix = np.zeros((N, 8))

for i in range(N):
     t = Ridge(Xtrain, ytrain, .3)
     theta_Matrix[i] = t
</snippet></ROW><ROW><id>13433330</id><snippet>&lt;4%</snippet></ROW><ROW><id>13433330</id><snippet>penalty = [maximum time taken in Python - minimum time taken in C++]/minimum time taken in C++</snippet></ROW><ROW><id>13433330</id><snippet>C = A+B</snippet></ROW><ROW><id>13433339</id><snippet>tree</snippet></ROW><ROW><id>13433339</id><snippet>def _recurse_tree(parent, depth, source, tree=None):
    if tree is None:
        tree = {}

    last_line = source.readline().rstrip()
    while last_line:
        if last_line.startswith('-'):
            tabs = len( re.match(PATTERN, last_line).group() )
        else:
            tabs = 0
        if tabs &lt; depth:
            break
        node = re.sub(PATTERN, '', last_line.strip())
        if tabs &gt;= depth:
            if parent is not None:
                print "%s: %s" %(parent, node)
                if parent in tree:
                    tree[parent].append(node)
                else:
                    tree[parent] = [ node, ]
            last_line = _recurse_tree(node, tabs+1, source, tree)
    return last_line
</snippet></ROW><ROW><id>13433339</id><snippet>class TreeBuilder(object):
    _PATTERN = re.compile('^[-]+')

    def __init__(self, source):
        self.tree = {}
        self.source = source
        self._recurse_tree()

    def _recurse_tree(self, parent=None, depth=0):
         last_line = self.source.readline().rstrip()
         while last_line:
             if last_line.startswith('-'):
                 tabs = len( self._PATTERN.match(last_line).group() )
             else:
                 tabs = 0
             if tabs &lt; depth:
                 break
             node = self._PATTERN.sub('', last_line.strip())
             if tabs &gt;= depth:
                 if parent is not None:
                     print "%s: %s" %(parent, node)
                     if parent in self.tree:
                         self.tree[parent].append(node)
                     else:
                         self.tree[parent] = [ node, ]
                 last_line = self._recurse_tree(node, tabs+1)
         return last_line
</snippet></ROW><ROW><id>13433339</id><snippet>def main():
    inFile = open("data.txt")
    builder = TreeBuilder(inFile)
    pprint.pprint(builder.tree)
</snippet></ROW><ROW><id>13433457</id><snippet>range(len(ct)-1)</snippet></ROW><ROW><id>13433457</id><snippet>i</snippet></ROW><ROW><id>13433457</id><snippet>i+1</snippet></ROW><ROW><id>13433457</id><snippet>ct</snippet></ROW><ROW><id>13433457</id><snippet>In [30]: ct=range(5)     #ct =[0,1,2,3,4]

In [31]: for i in range(len(ct)-1):
    print(ct[i]+ct[i+1])
   ....:     
1
3
5
7
</snippet></ROW><ROW><id>13433457</id><snippet>zip()</snippet></ROW><ROW><id>13433457</id><snippet>In [32]: for x,y in zip(ct,ct[1:]):
    print (x+y)
   ....:     
1
3
5
7
</snippet></ROW><ROW><id>13433496</id><snippet>import primenum
primenum.isPrime(5)
</snippet></ROW><ROW><id>13433496</id><snippet>import os.path

HOME_DIR = os.path.expanduser('~')
</snippet></ROW><ROW><id>13433496</id><snippet>open(os.path.join(HOME_DIR, 'primes.pkl')
</snippet></ROW><ROW><id>13433517</id><snippet> try :
     #your code
 except IndexError:
    print "Game Over"
</snippet></ROW><ROW><id>13433616</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "`...```.....``...`....`````...`"
&gt;&gt;&gt; re.sub(r'((?&lt;!`)(``)*`(?!`))', r'\1\1', s)
'``...``````.....``...``....``````````...``'
</snippet></ROW><ROW><id>13433617</id><snippet>&gt;&gt;&gt; k
array([[   0,    0, 4863, 1464]])
&gt;&gt;&gt; k.dtype
dtype('int64')
&gt;&gt;&gt; k[0][0] = 10
&gt;&gt;&gt; k
array([[  10,    0, 4863, 1464]])
&gt;&gt;&gt; k[0][0] = 1e-3
&gt;&gt;&gt; k
array([[   0,    0, 4863, 1464]])
</snippet></ROW><ROW><id>13433617</id><snippet>&gt;&gt;&gt; k
array([[  0,    0, 4863, 1464]])
&gt;&gt;&gt; k[0][0] = 10.2
&gt;&gt;&gt; k
array([[  10,    0, 4863, 1464]])
</snippet></ROW><ROW><id>13433617</id><snippet>&gt;&gt;&gt; f = k.astype(float)
&gt;&gt;&gt; f
array([[    0.,     0.,  4863.,  1464.]])
&gt;&gt;&gt; f[0][0] = 1e-3
&gt;&gt;&gt; f
array([[  1.00000000e-03,   0.00000000e+00,   4.86300000e+03,
          1.46400000e+03]])
</snippet></ROW><ROW><id>13433617</id><snippet>.</snippet></ROW><ROW><id>13433617</id><snippet>&gt;&gt;&gt; k = numpy.zeros((1,4))
&gt;&gt;&gt; k
array([[ 0.,  0.,  0.,  0.]])
</snippet></ROW><ROW><id>13433617</id><snippet>float</snippet></ROW><ROW><id>13433631</id><snippet>df.groupby(df.col1 == df.col2).apply(f)
</snippet></ROW><ROW><id>13433659</id><snippet>...</snippet></ROW><ROW><id>13433659</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>13433720</id><snippet>class ClassificationMain(QDialog, Ui_Dialog):

    def __init__(self, parent = None):

        QDialog.__init__(self, parent)
        self.setupUi(self)
        self.chooseWidget=choosePatient.ChoosePatient()
        self.stackedWidget.addWidget(self.chooseWidget)
        self.stackedWidget.setCurrentWidget(self.chooseWidget)

    def reloadPatients(self):
        # whatever your operation should be on the ChoosePatient
        self.chooseWidget.reload()


# MAIN WINDOW
def __init__(self, parent = None):
    ...
    self.classification=classificationMain.ClassificationMain()
    self.stackedWidget.addWidget(self.classification)
    ...
    #connections
    menu.pushButton.clicked.connect(self.showClassification)

def showClassification(self ):
    self.stackedWidget.setCurrentIndex(3)
    self.classification.reloadPatients()
</snippet></ROW><ROW><id>13433720</id><snippet>reloadPatients</snippet></ROW><ROW><id>13433720</id><snippet>ChoosePatient</snippet></ROW><ROW><id>13433720</id><snippet>def showClassification(self ):
    self.stackedWidget.setCurrentIndex(3)
    self.classification.chooseWidget.reload()
</snippet></ROW><ROW><id>13433894</id><snippet>def end_other(s1, s2):
    s1 = s1.upper()
    s2 = s2.upper()
    return s1.endswith(s2) or s2.endswith(s1)
</snippet></ROW><ROW><id>13434001</id><snippet>/Users/mark/Python-2.7.3/python2.7.3 script.py
</snippet></ROW><ROW><id>13434001</id><snippet>#!/Users/mark/Python-2.7.3/python2.7.3
</snippet></ROW><ROW><id>13434001</id><snippet>PATH</snippet></ROW><ROW><id>13434001</id><snippet>export PATH=/Users/mark/Python-2.7.3/:$PATH
</snippet></ROW><ROW><id>13434084</id><snippet>def on_html_page_context(app, pagename, templatename, context, doctree):
    if doctree:
        print doctree.attributes['source'] # Path to .rst file

def setup(app):
    app.connect('html-page-context', on_html_page_context)    
</snippet></ROW><ROW><id>13434096</id><snippet>infotext</snippet></ROW><ROW><id>13434096</id><snippet>&gt;&gt;&gt; m = re.findall(r'"info":"([^"]+)', str)
&gt;&gt;&gt; m
['infotext', 'infotext2', 'infotext3']
</snippet></ROW><ROW><id>13434096</id><snippet>"info":"</snippet></ROW><ROW><id>13434096</id><snippet>"</snippet></ROW><ROW><id>13434105</id><snippet>outfile = open("file_path", "w")
print &gt;&gt; outfile, "\n".join(str(i) for i in your_list)
outfile.close()
</snippet></ROW><ROW><id>13434115</id><snippet>eric@hum:():~$ python3
Python 3.2.3 (default, Jun 25 2012, 23:10:56) 
[GCC 4.7.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from gi.repository import Gdk
&gt;&gt;&gt; "get_scroll_deltas" in dir(Gdk.Event)
True
</snippet></ROW><ROW><id>13434298</id><snippet>default</snippet></ROW><ROW><id>13434298</id><snippet>import json

class CustomEncoder(json.JSONEncoder):
    def default(self, givenObject):
        obj = {"id":0,"name":"Peter"}
        return obj

class AnyClass(object):
    pass

encoder = CustomEncoder()
dummyClass = AnyClass()

print encoder.encode(dummyClass) # {"id": 0, "name": "Peter"}
</snippet></ROW><ROW><id>13434310</id><snippet>def are_lengths_of_strs(L1, L2):
    result = True
    for i in range(len(L1)):
        if L1[i] != len(L2[i]):
            result = False
    return result
</snippet></ROW><ROW><id>13434310</id><snippet>def are_lengths_of_strs(L1, L2):
    result = True
    for i, l in zip(L1, L2)
        if i != len(l):
            result = False
    return result
</snippet></ROW><ROW><id>13434310</id><snippet>def are_lengths_of_strs(L1, L2):
    return all(i == len(l)
        for i, l in zip(L1, L2))
</snippet></ROW><ROW><id>13434368</id><snippet>Constructs an object managing a reference</snippet></ROW><ROW><id>13434445</id><snippet>join()</snippet></ROW><ROW><id>13434445</id><snippet>,</snippet></ROW><ROW><id>13434445</id><snippet>print</snippet></ROW><ROW><id>13434445</id><snippet>'\n'</snippet></ROW><ROW><id>13434445</id><snippet>print</snippet></ROW><ROW><id>13434445</id><snippet>In [24]: for x in board:
    print " ".join(map(str,x))
   ....:     
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 3 2 1 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
</snippet></ROW><ROW><id>13434539</id><snippet>import numpy as np
import matplotlib.pyplot as plt

delta_Array = np.array([0.01,0.02,0.03, 0.04, 0.05,
                        0.06,0.07, 0.08, 0.09, 0.10])
#Initialized to 0s. Actual values will be appended to matrix by function
theta_Matrix = np.random.random() * np.random.rand(delta_Array.size, 8) 

fig = plt.figure()
p1 = plt.plot(delta_Array, theta_Matrix)
# make a legend for both plots
leg = plt.legend(p1, '', loc=1)

plt.show()
</snippet></ROW><ROW><id>13434659</id><snippet>samples = {
    "sample1": Sample(),
    "sample2": Sample()
}
samples['sample3'] = Sample()
</snippet></ROW><ROW><id>13434659</id><snippet>for i in xrange(1,4):
    sample_list.append(samples["sample" + str(i)])
</snippet></ROW><ROW><id>13434659</id><snippet>getattr</snippet></ROW><ROW><id>13434659</id><snippet>class Sampler(object):
    pass

sampler = Sampler()
sampler.sample1 = Sample()
sampler.sample2 = Sample()
sampler.sample3 = Sample()
</snippet></ROW><ROW><id>13434659</id><snippet>getattr(sampler, "sample1")</snippet></ROW><ROW><id>13434659</id><snippet>samples = {
    "bang1": Sample(),
    "bang2": Sample(),
    "bang3": Sample(),
    "shot1": Sample(),
    "shot2": Sample(),
    ...
}
</snippet></ROW><ROW><id>13434780</id><snippet>inputData</snippet></ROW><ROW><id>13434780</id><snippet>$.ajax()</snippet></ROW><ROW><id>13434780</id><snippet>data</snippet></ROW><ROW><id>13434780</id><snippet>data: { inputData: vdata },
</snippet></ROW><ROW><id>13434808</id><snippet>weights</snippet></ROW><ROW><id>13434808</id><snippet>mean</snippet></ROW><ROW><id>13434808</id><snippet>&gt;&gt;&gt;&gt; import numpypy as np
&gt;&gt;&gt;&gt; a = np.arange(2*3).reshape(2,3)
&gt;&gt;&gt;&gt; a
array([[0, 1, 2],
       [3, 4, 5]])
&gt;&gt;&gt;&gt; np.mean(a, axis=0)
array([ 1.5,  2.5,  3.5])
&gt;&gt;&gt;&gt; np.mean(a, axis=1)
array([ 1.,  4.])
&gt;&gt;&gt;&gt; a.mean(axis=0)
array([ 1.5,  2.5,  3.5])
&gt;&gt;&gt;&gt; a.mean(axis=1)
array([ 1.,  4.])
</snippet></ROW><ROW><id>13434946</id><snippet>0</snippet></ROW><ROW><id>13434946</id><snippet>1</snippet></ROW><ROW><id>13434946</id><snippet>2</snippet></ROW><ROW><id>13434946</id><snippet>g = [[1,1,1,0],
     [1,0,0,0],
     [1,0,0,0],
     [1,0,1,0],
     [1,1,1,1]]

width = len(g[0])
height = len(g)

for i in range(height):
    for j in range(width):
        if g[i][j] != 0:
            continue
        around = [(i-1,j),(i+1,j),(i,j-1),(i,j+1)]
        walls = 0
        for (x,y) in around:
            if x &lt; 0 or x &gt;= height or y &lt; 0 or y &gt;= width:
                #Outside, count as wall
                walls += 1
            elif g[x][y] == 1:
                walls += 1
        if walls in [2,3]: # 4 would be inaccessible  
            g[i][j] = 2
</snippet></ROW><ROW><id>13434946</id><snippet>[1, 1, 1, 2]
[1, 2, 0, 0]
[1, 0, 0, 0]
[1, 2, 1, 2]
[1, 1, 1, 1]
</snippet></ROW><ROW><id>13435090</id><snippet>for y in</snippet></ROW><ROW><id>13435090</id><snippet>c4 = sum(1 for i in y if 0.9 &lt; i &lt;= 1.8) / 10000.0
</snippet></ROW><ROW><id>13435090</id><snippet>count = 0
for i in y:
    if 0.9 &lt; i &lt;= 1.8:
        count += 1
c4 = count / 10000.0
</snippet></ROW><ROW><id>13435090</id><snippet>10000.0</snippet></ROW><ROW><id>13435090</id><snippet>float(len(y))</snippet></ROW><ROW><id>13435090</id><snippet>1000.0</snippet></ROW><ROW><id>13435090</id><snippet>float(len(y))</snippet></ROW><ROW><id>13435090</id><snippet>0</snippet></ROW><ROW><id>13435090</id><snippet>from __future__ import division</snippet></ROW><ROW><id>13435090</id><snippet>/</snippet></ROW><ROW><id>13435182</id><snippet>NO_dict = {x[0]: x[1] for x in ISO3166_CountryCodes_NO}
EN_dict = {x[0]: x[1] for x in ISO3166_CountryCodes_EN}
</snippet></ROW><ROW><id>13435182</id><snippet>{'GR': 'Hellas', 'NO': 'Norge', 'SE': 'Sverige'}
{'GR': 'Greece', 'NO': 'Norway', 'SE': 'Sweden'}
</snippet></ROW><ROW><id>13435182</id><snippet>final_list = [[k, NO_dict[k], EN_dict[k]] for k in NO_dict]
</snippet></ROW><ROW><id>13435182</id><snippet>[['GR', 'Hellas', 'Greece'],
 ['SE', 'Sverige', 'Sweden'],
 ['NO', 'Norge', 'Norway']]
</snippet></ROW><ROW><id>13435182</id><snippet>final_dict = {k:(NO_dict[k], EN_dict[k]) for k in NO_dict}
</snippet></ROW><ROW><id>13435182</id><snippet>final_dict['NO']</snippet></ROW><ROW><id>13435182</id><snippet>('Norge', 'Norway')</snippet></ROW><ROW><id>13435182</id><snippet>OrderedDict</snippet></ROW><ROW><id>13435182</id><snippet>from collections import OrderedDict

# A list of lists can be used as input for an OrderedDict, so don't need to loop
NO_dict = OrderedDict(ISO3166_CountryCodes_NO)
EN_dict = OrderedDict(ISO3166_CountryCodes_EN)

# Assumes you want the result in the same order as the Norwegian list
# Iterate over the English list if it has a preferred order

final_dict = OrderedDict([(k, (NO_dict[k], EN_dict[k])) for k in NO_dict])
</snippet></ROW><ROW><id>13435313</id><snippet>class SomeClass:
    def __init__(self):
        self.value = None
        ...
        someTextView = build_textview("some text")
        ...
        tree_selection = someTreeView.get_child().get_selection()
        tree_selection.connect("changed", self.selection_changed)
        ...

    def selection_changed(self, widget, data=None):
        (model, pathlist) = widget.get_selected_rows()
        for path in pathlist :
            tree_iter = model.get_iter(path)
            value = model.get_value(tree_iter,0)
            this.value = value
            return
</snippet></ROW><ROW><id>13435313</id><snippet>__init__</snippet></ROW><ROW><id>13435313</id><snippet>self.selection_changed()</snippet></ROW><ROW><id>13435313</id><snippet>self.selection_changed</snippet></ROW><ROW><id>13435313</id><snippet>selection_changed</snippet></ROW><ROW><id>13435313</id><snippet>def __init__(self):
    self.value = None
    ...
    someTextView = build_textview("some text")
    ...
    def selection_changed_handler(widget, data):
        value = self.selection_changed(widget, data)

    tree_selection = someTreeView.get_child().get_selection()
    tree_selection.connect("changed", selection_changed_handler)
    ...
</snippet></ROW><ROW><id>13435402</id><snippet>django.db.backends.postgresql_psycopg2.base</snippet></ROW><ROW><id>13435402</id><snippet>print query</snippet></ROW><ROW><id>13435402</id><snippet>CursorWrapper</snippet></ROW><ROW><id>13435402</id><snippet>class CursorWrapper:
    ...
    def execute(self, query, args=None):
        print query # New print statement here
        try:
            return self.cursor.execute(query, args)
</snippet></ROW><ROW><id>13435402</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>13435448</id><snippet>self.name = 'myData' + str(self.k)</snippet></ROW><ROW><id>13435448</id><snippet>self.name = myBase()</snippet></ROW><ROW><id>13435448</id><snippet>myBase()</snippet></ROW><ROW><id>13435448</id><snippet>self.name</snippet></ROW><ROW><id>13435448</id><snippet>myBase</snippet></ROW><ROW><id>13435448</id><snippet>    self.name = 'myData' + str(self.k)
    self.base= myBase() 
    self.base.iteratedValue = s 
    print '%s name is %s for k = %i' % (self.name, self.baseiteratedValue, self.k)
</snippet></ROW><ROW><id>13435448</id><snippet>self.name</snippet></ROW><ROW><id>13435448</id><snippet>self.base</snippet></ROW><ROW><id>13435448</id><snippet>myBase</snippet></ROW><ROW><id>13435448</id><snippet>__str__</snippet></ROW><ROW><id>13435448</id><snippet>print</snippet></ROW><ROW><id>13435448</id><snippet>myBase</snippet></ROW><ROW><id>13435448</id><snippet>myBase</snippet></ROW><ROW><id>13435448</id><snippet>class myBase(object):
    def __init__(self, name, iteratedValue):
        self.name = name
        iteratedValue = iteratedValue
    def __str__(self):
        return self.name

class myIterator(object):
    def __init__(self):
        self.k = 0
    def __call__(self, s):
        self.k += 1
        name = 'myData' + str(self.k)
        self.name = myBase(name, s) 
        print '%s name is %s for k = %i' % (self.name, self.name.iteratedValue, self.k)

        # return object named myData1 type of myBase
        return self.name
</snippet></ROW><ROW><id>13435448</id><snippet>myBase</snippet></ROW><ROW><id>13435448</id><snippet>class someClass(object)</snippet></ROW><ROW><id>13435448</id><snippet>object</snippet></ROW><ROW><id>13435448</id><snippet>myData1</snippet></ROW><ROW><id>13435448</id><snippet>myData('Alice')</snippet></ROW><ROW><id>13435448</id><snippet>myData1</snippet></ROW><ROW><id>13435595</id><snippet>gc</snippet></ROW><ROW><id>13435595</id><snippet>gc.garbage</snippet></ROW><ROW><id>13435632</id><snippet>#app/conf/users/sites.mysite.conf:
name: mysite.com
owner:
   name: My Name
   phone: My Phone Number
   address: My Address


#app/conf/admin/root.conf:
server:
   version: 0.3a
sites:
   admin:
      name: admin.site.com
      owner:
         name: Admin Name
         phone: Admin Phone Number
         address: Admin Address

#app/conf/admin/server.conf:
host: 0.0.0.0
port: 80

#../other_path/../special.conf:
licence_file: /path/to/file
log_file: /path/to/file

#app/src/builtin_config.py:
_builtin_config={
   'server':{'name':'Power Server'}
}

OR:

_builtin_config="""
    server:
       name: Power Server
"""
</snippet></ROW><ROW><id>13435632</id><snippet>from pymlconf import ConfigManager
from app.builtin_config import _builtin_config

config_root = ConfigManager(
   _builtin_config,
   ['app/conf/admin','app/conf/users'],
   '../other_path/../special.conf')
</snippet></ROW><ROW><id>13435632</id><snippet># All from app/conf/users/sites.mysite.conf
print config_root.sites.mysite.name
print config_root.sites.mysite.owner.name
print config_root.sites.mysite.owner.address
print config_root.sites.mysite.owner.phone

# All from app/conf/admin/root.conf
print config_root.sites.admin.name
print config_root.sites.admin.owner.name
print config_root.sites.admin.owner.address
print config_root.sites.admin.owner.phone

print config_root.server.name       # from _builtin_config
print config_root.server.version    # from app/conf/admin/root.conf
print config_root.server.host       # from app/conf/admin/server.conf
print config_root.server.port       # from app/conf/admin/server.conf

print config_root.licence_file      # from ../other_path/../special.conf
print config_root.log_file          # from ../other_path/../special.conf
</snippet></ROW><ROW><id>13435964</id><snippet>getCurPoint()</snippet></ROW><ROW><id>13435964</id><snippet>0</snippet></ROW><ROW><id>13435964</id><snippet>1</snippet></ROW><ROW><id>13435964</id><snippet>(1, 5)</snippet></ROW><ROW><id>13435964</id><snippet>(1, 7)</snippet></ROW><ROW><id>13435964</id><snippet>(1, 6)</snippet></ROW><ROW><id>13435964</id><snippet>(1, 5)</snippet></ROW><ROW><id>13435964</id><snippet>6</snippet></ROW><ROW><id>13435964</id><snippet>3</snippet></ROW><ROW><id>13435964</id><snippet>7</snippet></ROW><ROW><id>13435964</id><snippet>(1, 5)</snippet></ROW><ROW><id>13435964</id><snippet>(1, 7)</snippet></ROW><ROW><id>13435964</id><snippet>for x in range(len(graph)):</snippet></ROW><ROW><id>13435964</id><snippet>graph[x]</snippet></ROW><ROW><id>13435964</id><snippet>for edge in graph:</snippet></ROW><ROW><id>13435964</id><snippet>for i, edge in enumerate(graph):</snippet></ROW><ROW><id>13435964</id><snippet>if</snippet></ROW><ROW><id>13435964</id><snippet>for</snippet></ROW><ROW><id>13435964</id><snippet>for x in criticals[1]:
    if x != point:
        stops.append(x)
</snippet></ROW><ROW><id>13435964</id><snippet>node_a, node_b = critical_edges[1] 
stops += [node_a] if node_b == node else [node_b]
</snippet></ROW><ROW><id>13435964</id><snippet>getCurPoint</snippet></ROW><ROW><id>13435964</id><snippet>get_next_nodes</snippet></ROW><ROW><id>13435964</id><snippet>Point</snippet></ROW><ROW><id>13435964</id><snippet>nodes</snippet></ROW><ROW><id>13435964</id><snippet>get_next_nodes()</snippet></ROW><ROW><id>13435964</id><snippet>def get_next_nodes(edges, cur_node):
    connected_edges = [x for x in edges
                       if cur_node in x]
    if connected_edges:
        a, b = connected_edges[0]
        next_node = b if a == cur_node else a
        edges.remove(connected_edges[0])
        return [cur_node] + get_next_nodes(edges, next_node)
    return []

def take_tour(graph):
    start_node = graph[0][0]
    critical_edges = []
    nodes = []
    for edge in graph:
        if start_node in edge and len(critical_edges) &lt; 2:
            critical_edges.append(edge)
        else:
            nodes.append(edge)

    second_node = critical_edges[0][1]
    stops = [start_node] + get_next_nodes(nodes, second_node)

    a, b = critical_edges[1]
    stops += [a] if b == start_node else [b]
    return stops + [start_node]
</snippet></ROW><ROW><id>13435964</id><snippet>[(0, 1), (0, 3)]</snippet></ROW><ROW><id>13435964</id><snippet>[(0, 0)]</snippet></ROW><ROW><id>13435964</id><snippet>[]</snippet></ROW><ROW><id>13435964</id><snippet>take_tour</snippet></ROW><ROW><id>13435964</id><snippet>take_tour</snippet></ROW><ROW><id>13435964</id><snippet>[(0, 1), (0, 1), (0, 2), (0, 2)]</snippet></ROW><ROW><id>13435964</id><snippet>[0, 1, 0, 2, 0]</snippet></ROW><ROW><id>13435964</id><snippet>getCurPoint</snippet></ROW><ROW><id>13435964</id><snippet>for</snippet></ROW><ROW><id>13435964</id><snippet>False</snippet></ROW><ROW><id>13435964</id><snippet>False</snippet></ROW><ROW><id>13435964</id><snippet>for</snippet></ROW><ROW><id>13435964</id><snippet>getCurPoint</snippet></ROW><ROW><id>13435964</id><snippet>take_tour</snippet></ROW><ROW><id>13435964</id><snippet>take_tour</snippet></ROW><ROW><id>13435964</id><snippet>def take_tour(graph, node_start=None, cycle_only=True):
    if len(graph) == 0:
        if node_start is None:
            return []
        return [node_start]

    node_start = graph[0][0] if node_start is None else node_start

    for chosen_edge in [x for x in graph if node_start in x]:
        (node_a, node_b) = chosen_edge
        path = take_tour([e for e in graph if e != chosen_edge],
                         node_b if node_start == node_a else node_a,
                         cycle_only=False)
        if path is not False and (not cycle_only or node_start == path[-1]):
            return [node_start] + path
    return False
</snippet></ROW><ROW><id>13435964</id><snippet>take_tour</snippet></ROW><ROW><id>13435964</id><snippet>take_tour</snippet></ROW><ROW><id>13436081</id><snippet>&gt;&gt;&gt; print(u'\u2013')
–
</snippet></ROW><ROW><id>13436081</id><snippet>&gt;&gt;&gt; print("\u2013")
\u2013 
</snippet></ROW><ROW><id>13436446</id><snippet>lambda</snippet></ROW><ROW><id>13436446</id><snippet>self.Scraper.GetSubUrls(url, lambda url: self.UI.addLink(url[0], url[1]))
</snippet></ROW><ROW><id>13436446</id><snippet>def addLink(url):
    self.UI.addLink(url[0], url[1])

self.Scraper.GetSubUrls(url, addLink)
</snippet></ROW><ROW><id>13436490</id><snippet>id="ctl00_ContentPlaceHolder1_RestRatings_Next"</snippet></ROW><ROW><id>13436562</id><snippet>pySerial</snippet></ROW><ROW><id>13436562</id><snippet># Connect to Xbee
self.ser = serial.Serial(port, baud, timeout=timeout)

# Send data (a string)
self.ser.write(packet)

# Read data
self.data += self.ser.read()
</snippet></ROW><ROW><id>13436602</id><snippet>float()</snippet></ROW><ROW><id>13436602</id><snippet>numeric</snippet></ROW><ROW><id>13436602</id><snippet>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.numeric('½')
0.5
&gt;&gt;&gt; unicodedata.numeric('12')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: need a single Unicode character as parameter
</snippet></ROW><ROW><id>13436602</id><snippet>float</snippet></ROW><ROW><id>13436602</id><snippet>float()</snippet></ROW><ROW><id>13436602</id><snippet>&gt;&gt;&gt; float('12')
12.0
</snippet></ROW><ROW><id>13436602</id><snippet>&gt;&gt;&gt; float('½')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: could not convert string to float: '½'
</snippet></ROW><ROW><id>13436653</id><snippet>csv</snippet></ROW><ROW><id>13436653</id><snippet>dict</snippet></ROW><ROW><id>13436653</id><snippet>data = {}

with open("data.csv") as f:
    reader = csv.reader(f, delimiter="\t")
    reader.next() # Skip header
    for row in reader:
        row = list(map(int, row))
        data[row[0]] = row[1:]
</snippet></ROW><ROW><id>13436653</id><snippet>sum</snippet></ROW><ROW><id>13436677</id><snippet>import ctypes as C

lib = C.CDLL("libfoo.so")

l = [[1],[1,2],[1,2,3]]
entrylist = []
lengths = []

for sub_l in l:
    entrylist.append((C.c_int*len(sub_l))(*sub_l))
    lengths.append(C.c_int(len(sub_l)))

c_l = (C.POINTER(C.c_int) * len(entrylist))(*entrylist)
c_lengths = ( C.c_int * len(l))(*lengths)

lib.test(c_l, c_lengths, len(l))  #here we also pass the sizes of all the arrays
</snippet></ROW><ROW><id>13436677</id><snippet>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

int test(int **ar,int *lens,int n_ar){
    int ii,jj,kk;
    for (ii=0;ii&lt;n_ar;ii++){
        for (jj=0;jj&lt;lens[ii];jj++){
            printf("%d\t",ar[ii][jj]);
        }  
        printf("\n");
        fflush(stdout);
    }
    return 0;
}
</snippet></ROW><ROW><id>13436834</id><snippet>while</snippet></ROW><ROW><id>13436834</id><snippet>def</snippet></ROW><ROW><id>13436834</id><snippet>class</snippet></ROW><ROW><id>13436834</id><snippet>if True:
    while 1:
        for x in range(1):
            z = 1
        break

def function():
    print(z)

function() # prints 1
</snippet></ROW><ROW><id>13436834</id><snippet>def function():
    while True:
        x = 5
        break
    def nested():
        print(x)
    nested() # prints 5
    x = 10
    nested() # prints 10
</snippet></ROW><ROW><id>13436916</id><snippet>self.response.out.write(''.join([hex(z)[2:].zfill(2) for z in bytearray(puzzleset_instance.img)]))
</snippet></ROW><ROW><id>13436933</id><snippet>sqlautocode mysql://&lt;dbuser&gt;:&lt;pass&gt;@localhost:3306/&lt;dbname&gt; -o alchemy_models.py</snippet></ROW><ROW><id>13436977</id><snippet>def CRlistToTable(CRlist):
    """ Create HTML table from CRlist data """
    CRstrings = ['&lt;table cellspacing="1" cellpadding="1" border="1"&gt;']

    # create table's header row from the first row of CRlist
    BGCOLOR = '#67B0F9' # column header cells background color
    cols = CRlist[0]  # column names given in first row
    CRstrings += ['  &lt;tr&gt;', '\n'.join(
                  '    &lt;th bgcolor="{}" scope="col"&gt;{}&lt;/th&gt;'.format(BGCOLOR, col_name)
                     for col_name in cols),
                  '  &lt;/tr&gt;']

    # create a template for remaining non-header table rows
    TR_TEMPLATE = ['  &lt;tr&gt;',
                   '    &lt;td&gt;',
                   '      {}',  # for dynamically generated CR links
                   '    &lt;/td&gt;', '\n'.join(
                  ['    &lt;td&gt;{}&lt;/td&gt;'] * (len(cols)-1)), # one per remaining cols
                   '  &lt;/tr&gt;']
    TR_TEMPLATE = '\n'.join(TR_TEMPLATE) # convert to a string

    # apply the row template created to remaining CRlist rows
    CR_LINK_TEMPLATE = '&lt;a href=http://data/{0}&gt;{0}&lt;/a&gt;'
    for row in CRlist[1:]:
        if ',' not in row[0]:  # no comma-delimited items in first column?
            links = CR_LINK_TEMPLATE.format(row[0])
        else:
            CRs = row[0].replace(',', ' ').split()
            links = ',\n      '.join(CR_LINK_TEMPLATE.format(cr) for cr in CRs)
        row[0] = links
        CRstrings += [TR_TEMPLATE.format(*row)]

    CRstrings += ["&lt;/table&gt;"]

    # return string list merged to a single long newline-delimited string
    return '\n'.join(CRstrings) + '\n'


with open('cr_fixes_tabbed.xml') as file:
    xmldata = file.read()  # read entire file into memory

FIXES_START_TAG, FIXES_END_TAG = '&lt;Fixes&gt;, &lt;/Fixes&gt;'.replace(',', ' ').split()
# embedded fixes info starts right after the tag itself within the xml data
xmlFixesStart = xmldata.find(FIXES_START_TAG) + len(FIXES_START_TAG)
xmlFixesEnd = xmldata.find(FIXES_END_TAG)

# extract portion of file data within the FIXES tags into a list of lines
info = xmldata[xmlFixesStart:xmlFixesEnd].strip().splitlines()

# split non-blank lines of tab-delimited data into list of rows of column data
CRlist = [line.split('\t') for line in info if line] # skips blank lines

crInfo = CRlistToTable(CRlist) # convert list into html table
print crInfo
</snippet></ROW><ROW><id>13436977</id><snippet>&lt;table cellspacing="1" cellpadding="1" border="1"&gt;
  &lt;tr&gt;
    &lt;th bgcolor="#67B0F9" scope="col"&gt;CR&lt;/th&gt;
    &lt;th bgcolor="#67B0F9" scope="col"&gt;FA&lt;/th&gt;
    &lt;th bgcolor="#67B0F9" scope="col"&gt;CL&lt;/th&gt;
    &lt;th bgcolor="#67B0F9" scope="col"&gt;Title&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=http://data/409452&gt;409452&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;WLAN&lt;/td&gt;
    &lt;td&gt;656885&lt;/td&gt;
    &lt;td&gt;Age out RSSI values from buffer&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;a href=http://data/409452&gt;409452&lt;/a&gt;,
      &lt;a href=http://data/12345&gt;12345&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;To Record HAL and SLM FW Event Logging&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>13437019</id><snippet>-*\d+\.*\d+</snippet></ROW><ROW><id>13437019</id><snippet>re.split</snippet></ROW><ROW><id>13437019</id><snippet>import re
text = u"Hello this is a string.\uf8ff-2.34 This is an example1 string."
print(re.split(u'\uf8ff(-*\d+\.*\d+)', text))
</snippet></ROW><ROW><id>13437019</id><snippet>[u'Hello this is a string.', u'-2.34', u' This is an example1 string.']
</snippet></ROW><ROW><id>13437087</id><snippet>def test(num,v=None):
    if v is None:
        v = []
    ....
</snippet></ROW><ROW><id>13437137</id><snippet>def changeWord(word):
    for letter in word:
        if letter != "i":
            word = word.replace(letter,"!")
    return word
</snippet></ROW><ROW><id>13437270</id><snippet>from jinja2 import *

def show_all_attrs(value):
    res = []
    for k in dir(value):
        res.append('%r %r\n' % (k, getattr(value, k)))
    return '\n'.join(res)

env = Environment()
env.filters['show_all_attrs'] = show_all_attrs

# using the filter
tmpl = env.from_string('''{{v|show_all_attrs}}''')
class Myobj(object):
    a = 1
    b = 2

print tmpl.render(v=Myobj())
</snippet></ROW><ROW><id>13437407</id><snippet>.delete_vertives()</snippet></ROW><ROW><id>13437407</id><snippet>%paste</snippet></ROW><ROW><id>13437407</id><snippet>%cpaste</snippet></ROW><ROW><id>13437407</id><snippet>sage: def num_matchings(G):
....:         if min(G.degree_sequence())== 0 or G.num_edges()==0:
....:             return 0
....:     elif G.num_edges()==1:
------------------------------------------------------------
   File "&lt;ipython console&gt;", line 4
     ==Integer(1):
      ^
SyntaxError: invalid syntax

sage:         if G.edges()[0][2] ==None:
....:                 return 1
------------------------------------------------------------
   File "&lt;ipython console&gt;", line 2
SyntaxError: 'return' outside function (&lt;ipython console&gt;, line 2)
</snippet></ROW><ROW><id>13437407</id><snippet>%cpaste</snippet></ROW><ROW><id>13437407</id><snippet>%paste</snippet></ROW><ROW><id>13437407</id><snippet>sage: %cpaste
Pasting code; enter '--' alone on the line to stop.
:
:def num_matchings(G):
:    if min(G.degree_sequence())== 0 or G.num_edges()==0:
:        return 0

[etc.]

:        K.delete_vertices([e[0],e[1]])
:        return num_matchings(H) + w*num_matchings(K)
:--
sage: num_matchings(graphs.LadderGraph(5))
8
</snippet></ROW><ROW><id>13437437</id><snippet>from BeautifulSoup import BeautifulSoup
text = '&lt;span id="foo"&gt;&lt;/span&gt; &lt;div id="bar"&gt;&lt;/div&gt;'
pool = BeautifulSoup(text)
result = []
for tag in pool.findAll(True,{'id':True}) :
    result.append(tag['id'])
</snippet></ROW><ROW><id>13437437</id><snippet>&gt;&gt;&gt; result
[u'foo', u'bar']
</snippet></ROW><ROW><id>13437562</id><snippet>registration/registration_form.html</snippet></ROW><ROW><id>13437562</id><snippet>registration/activate.html</snippet></ROW><ROW><id>13437562</id><snippet>registration/activation_complete.html</snippet></ROW><ROW><id>13437562</id><snippet>registration/registration_complete.html</snippet></ROW><ROW><id>13437562</id><snippet>registration/registration_closed.html</snippet></ROW><ROW><id>13437562</id><snippet>&lt;form action="/accounts/register/" method="post"&gt;
  {% csrf_token %}
  {{ form.as_p }}
  &lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>13437609</id><snippet>math.pi</snippet></ROW><ROW><id>13437609</id><snippet>&gt;&gt;&gt; from __future__ import division # not necessary if using python 3
&gt;&gt;&gt; 4/3*math.pi*5**3
523.59877559829886
</snippet></ROW><ROW><id>13437609</id><snippet>&gt;&gt;&gt; 4//3*math.pi*5**3
392.69908169872411
</snippet></ROW><ROW><id>13437624</id><snippet>&gt;&gt;&gt; eval("12+15+12")
39
&gt;&gt;&gt; eval("12+15/12")
13
</snippet></ROW><ROW><id>13437649</id><snippet>home/santoshvm/Documents/IMDB DataBase/SQLite Database File/IMDB.sqlite
</snippet></ROW><ROW><id>13437649</id><snippet>home/santoshvm/Documents/IMDB\ DataBase/SQLite\ Database\ File/IMDB.sqlite
</snippet></ROW><ROW><id>13437733</id><snippet>nltk.Text.generate_with_ngrams= my_generation_function</snippet></ROW><ROW><id>13437772</id><snippet>import xlwt

def output(filename, sheet, list1, list2, x, y, z):
    book = xlwt.Workbook()
    sh = book.add_sheet(sheet)

    variables = [x, y, z]
    x_desc = 'Display'
    y_desc = 'Dominance'
    z_desc = 'Test'
    desc = [x_desc, y_desc, z_desc]

    col1_name = 'Stimulus Time'
    col2_name = 'Reaction Time'

    for n, v_desc, v in enumerate(zip(desc, variables)):
        sh.write(n, 0, v_desc)
        sh.write(n, 1, v)

    n+=1

    sh.write(n, 0, col1_name)
    sh.write(n, 1, col2_name)

    for m, e1 in enumerate(list1, n+1):
        sh.write(m, 0, e1)

    for m, e2 in enumerate(list2, n+1):
        sh.write(m, 1, e2)

    book.save(filename)
</snippet></ROW><ROW><id>13437804</id><snippet>fractions</snippet></ROW><ROW><id>13437804</id><snippet>    # Algorithm notes: For any real number x, define a *best upper
    # approximation* to x to be a rational number p/q such that:
    #
    #   (1) p/q &gt;= x, and
    #   (2) if p/q &gt; r/s &gt;= x then s &gt; q, for any rational r/s.
    #
    # Define *best lower approximation* similarly.  Then it can be
    # proved that a rational number is a best upper or lower
    # approximation to x if, and only if, it is a convergent or
    # semiconvergent of the (unique shortest) continued fraction
    # associated to x.
    #
    # To find a best rational approximation with denominator &lt;= M,
    # we find the best upper and lower approximations with
    # denominator &lt;= M and take whichever of these is closer to x.
    # In the event of a tie, the bound with smaller denominator is
    # chosen.  If both denominators are equal (which can happen
    # only when max_denominator == 1 and self is midway between
    # two integers) the lower bound---i.e., the floor of self, is
    # taken.
</snippet></ROW><ROW><id>13437954</id><snippet>def f_1d(x):
    return (x,x)
d = numpy.column_stack(numpy.vectorize(f_1d)(a))
</snippet></ROW><ROW><id>13437954</id><snippet>array([[1, 1],
       [2, 2],
       [3, 3]])
</snippet></ROW><ROW><id>13438092</id><snippet>os.listdir('.')</snippet></ROW><ROW><id>13438092</id><snippet>.</snippet></ROW><ROW><id>13438092</id><snippet>.</snippet></ROW><ROW><id>13438092</id><snippet>filename</snippet></ROW><ROW><id>13438092</id><snippet>TARGET_DIR = '/home/me/projects/data/'
n = sum(1 for f in os.listdir(TARGET_DIR) if os.path.isfile(os.path.join(TARGET_DIR, f)))
new_name = "{}Trial_{}.xls".format(TARGET_DIR,n+1)
</snippet></ROW><ROW><id>13438433</id><snippet>data = urllib2.urlopen(link)
content = data.read()
# replace the script and style tags with html comments, so the bs4 just skips them
content = content.replace("&lt;script", "&lt;!--")
content = content.replace("&lt;/script&gt;", "--&gt;")
content = content.replace("&lt;style", "&lt;!--")
content = content.replace("&lt;/style&gt;", "--&gt;")
soup = BeautifulSoup(content, "lxml") # assuming you've imported lxml and bs4
comments = soup.findAll(text=lambda text:isinstance(text, Comment))
Comments = [comment.extract() for comment in comments] # remove the commenys
words = []
for i in soup.stripped_strings:
    print i
# i will print most of the text of the page line by line
</snippet></ROW><ROW><id>13438666</id><snippet>#filter  json_object['results']  first, as some of the items are missing the key 'year'

In [33]: results=[x for x in json_object['results'] if 'year' in x]

In [34]: sorted(results,key=lambda x:x['year'])
</snippet></ROW><ROW><id>13438666</id><snippet>In [80]: sorted(results,key=itemgetter('year'))
</snippet></ROW><ROW><id>13438698</id><snippet>In [63]: d=list('aabbcc')

In [64]: a='a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'.split(",")

In [65]: for i,x in enumerate(d):
    d[i]=a[(a.index(x)+3)%26]

In [66]: d
Out[66]: ['d', 'd', 'e', 'e', 'f', 'f']
</snippet></ROW><ROW><id>13438995</id><snippet>sys.setdefaultencoding</snippet></ROW><ROW><id>13438995</id><snippet>site</snippet></ROW><ROW><id>13438995</id><snippet>reload(sys)</snippet></ROW><ROW><id>13438995</id><snippet>chcp</snippet></ROW><ROW><id>13438995</id><snippet>$ python
Python 2.7.3 (default, Sep 26 2012, 21:51:14) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; import os
&gt;&gt;&gt; sys.stdout.encoding
'UTF-8'
&gt;&gt;&gt; os.environ["LANG"]
'pl_PL.UTF-8'
&gt;&gt;&gt; print u"\xabtest\xbb"
«test»
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13438995</id><snippet>$ LANG=C python
Python 2.7.3 (default, Sep 26 2012, 21:51:14) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; import os
&gt;&gt;&gt; sys.stdout.encoding
'ANSI_X3.4-1968'
&gt;&gt;&gt; os.environ["LANG"]
'C'
&gt;&gt;&gt; print u"\xabtest\xbb"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xab' in position 0: ordinal not in range(128)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13438995</id><snippet>chcp 65001</snippet></ROW><ROW><id>13438995</id><snippet>stdio.h</snippet></ROW><ROW><id>13438995</id><snippet>cmd.exe</snippet></ROW><ROW><id>13438995</id><snippet>WriteConsoleW()</snippet></ROW><ROW><id>13439243</id><snippet>post_save</snippet></ROW><ROW><id>13439243</id><snippet>from django.db.models.signals import post_save

def create_group_links(instance, created, **kwargs):
    if created:
        Link.objects.create(name='FOO', slug='BAR', location='LOC' + instance.slug)
post_save.connect(create_group_links, sender=Group)
</snippet></ROW><ROW><id>13439467</id><snippet>class MyChoiceField(forms.ModelChoiceField):
    def label_from_instance(self, obj):
        return my_fun(obj)

class MyModelAdmin(admin.ModelAdmin):
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        if db_field.name == "my_field":
            kwargs["form_class"] = MyChoiceField
            return db_field.formfield(**kwargs)
        return super(MyModelAdmin, self).formfield_for_foreignkey(
            db_field, request, **kwargs)
</snippet></ROW><ROW><id>13439512</id><snippet>In [1]: l = [0, 1, 2, 3, 4, 5]

In [2]: l[::3]
Out[2]: [0, 3]
</snippet></ROW><ROW><id>13439512</id><snippet>i = i + 3</snippet></ROW><ROW><id>13439512</id><snippet>i += 3</snippet></ROW><ROW><id>13439596</id><snippet>ModelForm</snippet></ROW><ROW><id>13439596</id><snippet>alias</snippet></ROW><ROW><id>13439596</id><snippet>alias</snippet></ROW><ROW><id>13439596</id><snippet>class BookForm(ModelForm):

    class Meta:
        model = Book
        fields = ('name', 'description')
        # NOTE: you can also use excludes, but many consider it a bad practice
</snippet></ROW><ROW><id>13439723</id><snippet>colname()</snippet></ROW><ROW><id>13439723</id><snippet>wb = xlrd.open_workbook(sys.argv[2])

sheet = wb.sheet_by_index(0)
for row in sheet.col(2):
        print amazon.ItemLookup(ItemId="row", ResponseGroup="Offer Summaries", SearchIndex="Books", IdType="ISBN")
</snippet></ROW><ROW><id>13439723</id><snippet>amazon.ItemLookup()</snippet></ROW><ROW><id>13439723</id><snippet>row</snippet></ROW><ROW><id>13439723</id><snippet>"row"</snippet></ROW><ROW><id>13439723</id><snippet>row</snippet></ROW><ROW><id>13439988</id><snippet>PATH</snippet></ROW><ROW><id>13439988</id><snippet>sys.argv</snippet></ROW><ROW><id>13439988</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>13440101</id><snippet>ls -l</snippet></ROW><ROW><id>13440101</id><snippet>/srv/site/images/my_pony.jpg</snippet></ROW><ROW><id>13440101</id><snippet>/srv/site/images</snippet></ROW><ROW><id>13440101</id><snippet>my_pony.jpg</snippet></ROW><ROW><id>13440326</id><snippet>","</snippet></ROW><ROW><id>13440326</id><snippet>"".join()</snippet></ROW><ROW><id>13440326</id><snippet>In [32]: strs="11,000.233"

In [33]: float("".join(strs.split(",")))
Out[33]: 11000.233

In [34]: strs="14,798.24"

In [35]: float("".join(strs.split(",")))
Out[35]: 14798.24
</snippet></ROW><ROW><id>13440326</id><snippet>4.00</snippet></ROW><ROW><id>13440326</id><snippet>In [36]: strs="4.00"

In [37]: float(strs)
Out[37]: 4.0

In [39]: format(float(strs),".2f")
Out[39]: '4.00'

In [40]: "{0:.2f}".format(float(strs))
Out[40]: '4.00'
</snippet></ROW><ROW><id>13440349</id><snippet>False</snippet></ROW><ROW><id>13440349</id><snippet>class Reg(models.Model):
    # ...

    def clean(self):
        from django.core.exceptions import ValidationError
        if not self.personal:
            raise ValidationError('CUSTOM ERROR HERE')
</snippet></ROW><ROW><id>13440349</id><snippet>class GenForm11(ModelForm):
    class Meta:
        model = Reg
        exclude = ('event')

    def clean_personal(self):
        personal = self.cleaned_data['personal']

        if not personal:
            raise ValidationError('CUSTOM ERROR HERE')

        return personal
</snippet></ROW><ROW><id>13440436</id><snippet>requests</snippet></ROW><ROW><id>13440436</id><snippet>text/javascript</snippet></ROW><ROW><id>13440436</id><snippet>import requests
import json

headers = {'Content-Type': 'text/javascript;charset=utf-8')
data = json.dumps({'mod': 'calendar.field', 'action': 'mini', 'vars': {"current": 0}})
r = requests.post('http://www.kavka.be/xhttp.mod', data=data, headers=headers)
</snippet></ROW><ROW><id>13440436</id><snippet>data</snippet></ROW><ROW><id>13440436</id><snippet>urllib2</snippet></ROW><ROW><id>13440436</id><snippet>import urllib2
import json

headers = {'Content-Type': 'text/javascript;charset=utf-8')
data = json.dumps({'mod': 'calendar.field', 'action': 'mini', 'vars': {"current": 0}})
req = urllib2.Request('http://www.kavka.be/xhttp.mod', data, headers)
r = urllib2.urlopen(req)
</snippet></ROW><ROW><id>13440501</id><snippet>def right_justify(s):
    print "%70s" % s
</snippet></ROW><ROW><id>13440507</id><snippet>tests = [[],         # Desired answer: []
         [1],        # [1]
         [1,2],      # [1, 3] 
         [1,2,3],    # [1, 3, 6]
         [1,2,1,3]]  # [1, 3, 4, 7]
for t in tests:
    print(rec_cumsum(t))
</snippet></ROW><ROW><id>13440507</id><snippet>    last=new_list[-1]
IndexError: list index out of range
</snippet></ROW><ROW><id>13440507</id><snippet>new_list</snippet></ROW><ROW><id>13440507</id><snippet>new_list</snippet></ROW><ROW><id>13440507</id><snippet>if len(numbers) &lt;= 1:
     return numbers
</snippet></ROW><ROW><id>13440507</id><snippet>def rec_cumsum(numbers):
    ''' Input: numbers - a list of numbers,
            Output: a list of cumulative sums of the numbers'''
    if len(numbers) &lt;= 1:
         return numbers
    new_list=numbers
    last=new_list[-1]
    new_list.remove(last)
    rec = rec_cumsum(new_list)
    new_list.append(rec[-1]+last)
    return last+rec
</snippet></ROW><ROW><id>13440507</id><snippet>    return last+rec
TypeError: unsupported operand type(s) for +: 'int' and 'list'
</snippet></ROW><ROW><id>13440507</id><snippet>last</snippet></ROW><ROW><id>13440507</id><snippet>int</snippet></ROW><ROW><id>13440507</id><snippet>rec</snippet></ROW><ROW><id>13440507</id><snippet>list</snippet></ROW><ROW><id>13440507</id><snippet>rec</snippet></ROW><ROW><id>13440507</id><snippet>rec_cumsum(new_list)</snippet></ROW><ROW><id>13440507</id><snippet>last+rec</snippet></ROW><ROW><id>13440507</id><snippet>rec</snippet></ROW><ROW><id>13440507</id><snippet>[a, a+b]</snippet></ROW><ROW><id>13440507</id><snippet>[a, a+b, a+b+c]</snippet></ROW><ROW><id>13440507</id><snippet>a+b+c</snippet></ROW><ROW><id>13440507</id><snippet>rec</snippet></ROW><ROW><id>13440507</id><snippet>numbers</snippet></ROW><ROW><id>13440507</id><snippet>rec[-1]+last
</snippet></ROW><ROW><id>13440507</id><snippet>rec</snippet></ROW><ROW><id>13440507</id><snippet>rec.append(rec[-1]+last)
</snippet></ROW><ROW><id>13440507</id><snippet>new_list.append(rec[-1]+last)</snippet></ROW><ROW><id>13440507</id><snippet>def rec_cumsum(numbers):
    ''' Input: numbers - a list of numbers,
            Output: a list of cumulative sums of the numbers'''
    if len(numbers) &lt;= 1:
         return numbers
    new_list=numbers
    last=new_list[-1]
    new_list.remove(last)
    rec = rec_cumsum(new_list)
    rec.append(rec[-1]+last)
    return rec
</snippet></ROW><ROW><id>13440507</id><snippet>[]
[1]
[1, 3]
[1, 3, 6]
[2, 3, 4, 7]
</snippet></ROW><ROW><id>13440507</id><snippet>rec_cumsum([1,2,1,3])</snippet></ROW><ROW><id>13440507</id><snippet>[2,3,4,7]</snippet></ROW><ROW><id>13440507</id><snippet>[1,3,4,7]</snippet></ROW><ROW><id>13440507</id><snippet>new_list.remove(last)</snippet></ROW><ROW><id>13440507</id><snippet>last</snippet></ROW><ROW><id>13440507</id><snippet>new_list</snippet></ROW><ROW><id>13440507</id><snippet>new_list = numbers[:-1]
</snippet></ROW><ROW><id>13440507</id><snippet>def rec_cumsum(numbers):
    ''' Input: numbers - a list of numbers,
            Output: a list of cumulative sums of the numbers'''
    if len(numbers) &lt;= 1:
         return numbers
    new_list=numbers[:-1]
    last=numbers[-1]
    rec = rec_cumsum(new_list)
    rec.append(rec[-1]+last)
    return rec
</snippet></ROW><ROW><id>13440507</id><snippet>new_list</snippet></ROW><ROW><id>13440507</id><snippet>last</snippet></ROW><ROW><id>13440507</id><snippet>def rec_cumsum(numbers):
    if len(numbers)&lt;=1:
        return numbers
    result = rec_cumsum(numbers[:-1])
    result.append(result[-1]+numbers[-1])
    return result
</snippet></ROW><ROW><id>13440786</id><snippet>with open('numbers.txt') as file:
    lst = [line.strip() for line in file]
</snippet></ROW><ROW><id>13440928</id><snippet>try:
   f = open(path, 'rb')
except IOError:
   # Handle exception

with f:
    # other code, `f` will be closed at the end.
</snippet></ROW><ROW><id>13440991</id><snippet>db_conn = mdb.connect(
    host="localhost", user="username", passwd="password", db="db_name",
    charset='utf8', cursorclass=mdb.cursors.DictCursor)
</snippet></ROW><ROW><id>13441224</id><snippet>user.email = Email.as_unique('foo@bar.com')
</snippet></ROW><ROW><id>13441356</id><snippet>import re

s = "reverse 45"
output = re.sub(r'reverse (\d+)', r'reverse(\1)', s)
</snippet></ROW><ROW><id>13441600</id><snippet>theModel.objects.filter(theString__in=[1,4,7])
</snippet></ROW><ROW><id>13441699</id><snippet>getText</snippet></ROW><ROW><id>13441699</id><snippet>for td in soup_result:
    print td.getText()
</snippet></ROW><ROW><id>13441699</id><snippet>bs4</snippet></ROW><ROW><id>13441699</id><snippet>.get_text()</snippet></ROW><ROW><id>13441743</id><snippet>self.word</snippet></ROW><ROW><id>13441743</id><snippet>word</snippet></ROW><ROW><id>13441743</id><snippet>self.word</snippet></ROW><ROW><id>13441888</id><snippet>def __init__(self, str_list=[]):
    self.str_list = str_list
</snippet></ROW><ROW><id>13441888</id><snippet>def __init__(self, str_list=None):
    self.str_list = [] if str_list is None else str_list
</snippet></ROW><ROW><id>13441888</id><snippet>1</snippet></ROW><ROW><id>13441888</id><snippet>'foo'</snippet></ROW><ROW><id>13441888</id><snippet>int</snippet></ROW><ROW><id>13441888</id><snippet>str</snippet></ROW><ROW><id>13441888</id><snippet>tuple</snippet></ROW><ROW><id>13441888</id><snippet>[]</snippet></ROW><ROW><id>13441888</id><snippet>list</snippet></ROW><ROW><id>13441896</id><snippet>class Foo(object):
    pass

# This works perfectly fine now.
print(Foo.__subclasses__())
</snippet></ROW><ROW><id>13441907</id><snippet>class datapoint</snippet></ROW><ROW><id>13441907</id><snippet>__hash__(self)</snippet></ROW><ROW><id>13441907</id><snippet>__eq__(self)</snippet></ROW><ROW><id>13441907</id><snippet>__hash__</snippet></ROW><ROW><id>13441907</id><snippet>__eq__</snippet></ROW><ROW><id>13441955</id><snippet>'a'</snippet></ROW><ROW><id>13441955</id><snippet>'w'</snippet></ROW><ROW><id>13441970</id><snippet>inpt = "go 30,45"
output = re.sub(r'go (\d+,\d+)', r'go(\1)', inpt)  # 'go(30,45)'
</snippet></ROW><ROW><id>13441970</id><snippet>input</snippet></ROW><ROW><id>13441977</id><snippet>class MyBaseTestCase(unittest.TestCase):
    def setUp(self):
        self.patcher_stdout = mock.patch('sys.stdout', StringIO())
        self.patcher_stdout.start()

    # Do **nothing**

    def tearDown(self):
        self.patcher_stdout.stop()

class StdoutOutputTestCase(MyBaseTestCase):
    """Tests whether the stuff is printed correctly."""

    def setUp(self):
        super(StdoutOutputTestCase, self).setUp()

        # StdoutOutputTestCase specific set up code

    # Do testing

    def tearDown(self):
        super(StdoutOutputTestCase, self).tearDown()

        # StdoutOutputTestCase specific tear down code

class UserInteractionTestCase(MyBaseTestCase):
     # Same pattern as StdoutOutputTestCase
</snippet></ROW><ROW><id>13442078</id><snippet>local</snippet></ROW><ROW><id>13442078</id><snippet>local</snippet></ROW><ROW><id>13442078</id><snippet>run</snippet></ROW><ROW><id>13442078</id><snippet>sudo</snippet></ROW><ROW><id>13442078</id><snippet>run</snippet></ROW><ROW><id>13442078</id><snippet>sudo</snippet></ROW><ROW><id>13442078</id><snippet>local</snippet></ROW><ROW><id>13442078</id><snippet>fabfile.py</snippet></ROW><ROW><id>13442078</id><snippet>local</snippet></ROW><ROW><id>13442095</id><snippet>.txt</snippet></ROW><ROW><id>13442095</id><snippet>This is &lt;b&gt;bold&lt;/b&gt; text. This is &lt;u&gt;underlined&lt;/u&gt;.
</snippet></ROW><ROW><id>13442185</id><snippet>from collections import defaultdict
dir_dict = defaultdict(lambda: defaultdict(set))
for x in objects:
     dir_dict[x.state][x.city].add(x.address)

dir_list = dir_dict.keys()
</snippet></ROW><ROW><id>13442246</id><snippet>0.9</snippet></ROW><ROW><id>13442246</id><snippet>1.1.3</snippet></ROW><ROW><id>13442246</id><snippet>0.9</snippet></ROW><ROW><id>13442494</id><snippet>&gt;&gt;&gt; from urllib.parse import parse_qs
&gt;&gt;&gt; query = parse_qs(str[1:])
&gt;&gt;&gt; query
{'q': ['salvia'], 'geocode': ['39.862712,-75.33958,10mi'], 'since_id': ['261042755432763393']}
&gt;&gt;&gt; query['q']
['salvia']
&gt;&gt;&gt; query['geocode']
['39.862712,-75.33958,10mi']
</snippet></ROW><ROW><id>13442494</id><snippet>str</snippet></ROW><ROW><id>13442494</id><snippet>from urlparse import parse_qs
</snippet></ROW><ROW><id>13442494</id><snippet>from cgi import parse_qs
</snippet></ROW><ROW><id>13442670</id><snippet>struct SCIP {};

void SCIPcreate(struct SCIP **s) {
  *s = malloc(sizeof **s);
}
</snippet></ROW><ROW><id>13442670</id><snippet>%module test
%{
#include "test.h"
%}

%typemap(in,numinputs=0) struct SCIP **s (struct SCIP *temp) {
  $1 = &amp;temp;
}

%typemap(argout) struct SCIP **s {
  %set_output(SWIG_NewPointerObj(SWIG_as_voidptr(*$1), $*1_descriptor, SWIG_POINTER_OWN));
}

%include "test.h"
</snippet></ROW><ROW><id>13442670</id><snippet>%inline</snippet></ROW><ROW><id>13442670</id><snippet>%newobject SCIPcreate;
%inline %{
  struct SCIP *SCIPcreate() {
    struct SICP *temp;
    SCIPcreate(&amp;temp);
    return temp;
  }
%}
</snippet></ROW><ROW><id>13442728</id><snippet>itertools.cycle</snippet></ROW><ROW><id>13442728</id><snippet>patches</snippet></ROW><ROW><id>13442728</id><snippet>import itertools
colors = ['red','blue','green','yellow']
patches = ['a','b','c','d','e','f','g','h','i','j']

for patch, color in itertools.izip(patches, itertools.cycle(colors)):
    # color a patch
    print 'Colour', patch, 'as', color 
</snippet></ROW><ROW><id>13442728</id><snippet>Colour a as red
Colour b as blue
Colour c as green
Colour d as yellow
Colour e as red
Colour f as blue
Colour g as green
Colour h as yellow
Colour i as red
Colour j as blue
</snippet></ROW><ROW><id>13442742</id><snippet>C-coded Python extension modules that support fast multiple-precision arithmetic</snippet></ROW><ROW><id>13442825</id><snippet>(skip)</snippet></ROW><ROW><id>13442825</id><snippet>data</snippet></ROW><ROW><id>13442825</id><snippet>unsigned short *</snippet></ROW><ROW><id>13442825</id><snippet>unsigned char *</snippet></ROW><ROW><id>13442825</id><snippet>unsigned long *</snippet></ROW><ROW><id>13442825</id><snippet>unsigned char *</snippet></ROW><ROW><id>13442866</id><snippet>numpy.delete</snippet></ROW><ROW><id>13442866</id><snippet>import numpy as np
data = np.arange(1000).reshape((10,10,10))

# Delete the third slice along the first axis 
# (note that you can delete multiple slices at once)
data = np.delete(data, [2], axis=0)

print data.shape
</snippet></ROW><ROW><id>13442866</id><snippet>numpy.dstack</snippet></ROW><ROW><id>13442866</id><snippet>numpy.delete</snippet></ROW><ROW><id>13442866</id><snippet>im.set_data(next_slice)</snippet></ROW><ROW><id>13442866</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider

def main():
    # Set up 3D coordinates from -10 to 10 over a 200x100x100 "open" grid
    x, y, z = np.ogrid[-10:10:200j, -10:10:100j, -10:10:100j]

    # Generate a cube of interesting data
    data= np.sin(x*y*z) / (x*y*z)

    # Visualize it
    viewer = VolumeViewer(data)
    viewer.show()

class VolumeViewer(object):
    def __init__(self, data):
        self.data = data
        self.nframes = self.data.shape[0]

        # Setup the axes.
        self.fig, self.ax = plt.subplots()
        self.slider_ax = self.fig.add_axes([0.2, 0.03, 0.65, 0.03])

        # Make the slider
        self.slider = Slider(self.slider_ax, 'Frame', 1, self.nframes, 
                            valinit=1, valfmt='%1d/{}'.format(self.nframes))
        self.slider.on_changed(self.update)

        # Plot the first slice of the image
        self.im = self.ax.imshow(data[0,:,:])

    def update(self, value):
        frame = int(np.round(value - 1))

        # Update the image data
        dat = self.data[frame,:,:]
        self.im.set_data(dat)

        # Reset the image scaling bounds (this may not be necessary for you)
        self.im.set_clim([dat.min(), dat.max()])

        # Redraw the plot
        self.fig.canvas.draw()

    def show(self):
        plt.show()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13442969</id><snippet>maus_x</snippet></ROW><ROW><id>13442969</id><snippet>0</snippet></ROW><ROW><id>13442969</id><snippet>while not done:
    for event in pygame.event.get():
        if event.type == pygame.MOUSEMOTION:      
            mousex, mousey = pygame.mouse.get_pos()   
            if mousex &lt; wx_coord:
                angle += 10
</snippet></ROW><ROW><id>13442969</id><snippet>while not done:
    for event in pygame.event.get():
        if event.type == pygame.MOUSEMOTION:      
            mousex, mousey = event.pos   
            if mousex &lt; wx_coord:
                angle += 10
</snippet></ROW><ROW><id>13442969</id><snippet>while not done:
    for event in pygame.event.get():
        if event.type == pygame.MOUSEMOTION:      
            relx, rely = event.rel   
            if relx != 0:  # x movement
                angle += 10
</snippet></ROW><ROW><id>13443003</id><snippet>intersection</snippet></ROW><ROW><id>13443003</id><snippet>def in_both(s1, s2):
    s1 = s1.lower()
    s2 = s2.lower()
    s1_chars = set(s1)
    s2_chars = set(s2)
    result = sorted(s1_chars.intersection(s2_chars))
    return result
</snippet></ROW><ROW><id>13443424</id><snippet>stat</snippet></ROW><ROW><id>13443424</id><snippet>import os, stat

mode = os.fstat(0).st_mode
if stat.S_ISFIFO(mode):
     print "stdin is piped"
elif stat.S_ISREG(mode):
     print "stdin is redirected"
else:
     print "stdin is terminal"
</snippet></ROW><ROW><id>13443473</id><snippet>subset['Month'] = pd.PeriodIndex(subset['Created On'],freq='M').asobject
</snippet></ROW><ROW><id>13443608</id><snippet>&gt;&gt;&gt; mylist = ['10', '12', '14']
&gt;&gt;&gt; for elem in mylist:
        print elem 

10
12
14
</snippet></ROW><ROW><id>13443905</id><snippet>func.now()</snippet></ROW><ROW><id>13443905</id><snippet>"now()"</snippet></ROW><ROW><id>13443934</id><snippet>class Something(object):
    UNINITIALIZED = object()
    LAZY_ATTRS = ('x','y','z')
    def __init__(self):
        for attr in self.LAZY_ATTRS:
            setattr(self, '_'+attr, self.UNINITIALIZED)
    def _get_x(self):
        if self._x is self.UNINITIALIZED:
            self._x = self.doExpensiveInitStuff('x')
        return self._x
</snippet></ROW><ROW><id>13443934</id><snippet>return self._x</snippet></ROW><ROW><id>13443966</id><snippet>time.clock</snippet></ROW><ROW><id>13443966</id><snippet>time.time</snippet></ROW><ROW><id>13444256</id><snippet>np.random.randint(2, size=(3, 3))
</snippet></ROW><ROW><id>13444256</id><snippet>import numpy as np
print np.random.randint(2, size=(3, 3))
</snippet></ROW><ROW><id>13444276</id><snippet>dot</snippet></ROW><ROW><id>13444276</id><snippet>.todense().item()</snippet></ROW><ROW><id>13444276</id><snippet>Njc.append((np.dot(row, row.transpose())).todense().item())
</snippet></ROW><ROW><id>13444455</id><snippet>numpy.sum(a[:,1:] != a[:,:-1]) + numpy.sum(a[1:,:] != a[:-1,:])</snippet></ROW><ROW><id>13444522</id><snippet>alist</snippet></ROW><ROW><id>13444535</id><snippet>/</snippet></ROW><ROW><id>13444535</id><snippet>href</snippet></ROW><ROW><id>13444535</id><snippet>&lt;a href="/home.html"&gt;home&lt;/a&gt;
</snippet></ROW><ROW><id>13444535</id><snippet>url</snippet></ROW><ROW><id>13444535</id><snippet>&lt;a href="{% url index %}"&gt;home&lt;/a&gt;
</snippet></ROW><ROW><id>13444535</id><snippet>*.html</snippet></ROW><ROW><id>13444614</id><snippet>ax.twinx</snippet></ROW><ROW><id>13444614</id><snippet>import matplotlib.pyplot as plt
import numpy as np

delta_Array = np.array([1000,2000,3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000])

error_matrix = np.array(
    [[ 24.22468454, 24.22570421, 24.22589308, 24.22595919, 24.22598979, 24.22600641, 24.22601644, 24.22602294, 24.2260274, 24.22603059],
     [ 28.54275713, 28.54503017, 28.54545119, 28.54559855, 28.54566676, 28.54570381, 28.54572615, 28.54574065, 28.5457506, 28.54575771]])


fig = plt.figure()
ax = []
ax.append(fig.add_subplot(1, 1, 1))
ax.append(ax[0].twinx())
colors = ('red', 'blue')

for i,c in zip(range(error_matrix.shape[0]), colors):
    ax[i].plot(delta_Array, error_matrix[i,:], color = c)
plt.show()
</snippet></ROW><ROW><id>13444614</id><snippet>error_matrix[0, :]</snippet></ROW><ROW><id>13444614</id><snippet>error_matrix[1, :]</snippet></ROW><ROW><id>13444614</id><snippet>error_matrix[0, :]/error_matrix[1, :]</snippet></ROW><ROW><id>13444653</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; [(x, y, 0) for x, y in product(range(5), repeat=2)]
[(0, 0, 0), (0, 1, 0), (0, 2, 0), (0, 3, 0), (0, 4, 0), (1, 0, 0), (1, 1, 0), (1, 2, 0), (1, 3, 0), (1, 4, 0), (2, 0, 0), (2, 1, 0), (2, 2, 0), (2, 3, 0), (2, 4, 0), (3, 0, 0), (3, 1, 0), (3, 2, 0), (3, 3, 0), (3, 4, 0), (4, 0, 0), (4, 1, 0), (4, 2, 0), (4, 3, 0), (4, 4, 0)]
</snippet></ROW><ROW><id>13444653</id><snippet>[(x,y,func(x,y)) for x</snippet></ROW><ROW><id>13444709</id><snippet>re.search</snippet></ROW><ROW><id>13444709</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; m = re.search(r"[a-z]*\(([a-z]*), ([a-z]*), ([a-z]*)\)", string)
&gt;&gt;&gt; m.group(0)
'bunch(oranges, bananas, apples)'
&gt;&gt;&gt; m.group(1)
'oranges'
&gt;&gt;&gt; m.group(2)
'bananas'
&gt;&gt;&gt; m.group(3)
'apples'
</snippet></ROW><ROW><id>13444709</id><snippet>bunch</snippet></ROW><ROW><id>13444709</id><snippet>&gt;&gt;&gt; m = re.search(r"[a-z]*\(([a-z, ]*)\)", string)
&gt;&gt;&gt; m.group(1)
'oranges, bananas, apples'
&gt;&gt;&gt; m.group(1).split(', ')
['oranges', 'bananas', 'apples']
</snippet></ROW><ROW><id>13444961</id><snippet>urlCmd='http://{0}:{1}{2}/dataimport?command={3}'.format(hostName,portnum, SOLRPATH, SOLRCMD)
#or
urlCmd='http://%s:%s%s/dataimport?command=%s' % (hostName,portnum, SOLRPATH, SOLRCMD)
</snippet></ROW><ROW><id>13444961</id><snippet>urllib2</snippet></ROW><ROW><id>13444961</id><snippet>import urllib2
req = urllib2.urlopen(urlCmd)
</snippet></ROW><ROW><id>13444961</id><snippet>req.close      req.fileno     req.getcode    req.headers    req.msg  
req.read       req.readlines  req.code       req.fp         req.geturl   
req.info       req.next       req.readline   req.url
</snippet></ROW><ROW><id>13444962</id><snippet>GA.py</snippet></ROW><ROW><id>13444962</id><snippet>settings</snippet></ROW><ROW><id>13444962</id><snippet>settings.py</snippet></ROW><ROW><id>13444962</id><snippet>GA</snippet></ROW><ROW><id>13444962</id><snippet>GA</snippet></ROW><ROW><id>13444962</id><snippet>GA.py</snippet></ROW><ROW><id>13444962</id><snippet>settings</snippet></ROW><ROW><id>13444962</id><snippet>GA</snippet></ROW><ROW><id>13444962</id><snippet>settings</snippet></ROW><ROW><id>13444962</id><snippet>GA</snippet></ROW><ROW><id>13444962</id><snippet>GA</snippet></ROW><ROW><id>13444962</id><snippet>GA.py</snippet></ROW><ROW><id>13444962</id><snippet>settings.py</snippet></ROW><ROW><id>13444962</id><snippet>import Foo

class Baz:
    top_level_variable = Foo.bar
</snippet></ROW><ROW><id>13444962</id><snippet>import Foo

class Baz:
    def __init__(self):
        self.instance_variable = Foo.bar
</snippet></ROW><ROW><id>13444962</id><snippet>from Foo import bar</snippet></ROW><ROW><id>13444962</id><snippet>Foo</snippet></ROW><ROW><id>13445046</id><snippet>BZ2Compressor</snippet></ROW><ROW><id>13445046</id><snippet>compress()</snippet></ROW><ROW><id>13445046</id><snippet>flush()</snippet></ROW><ROW><id>13445046</id><snippet>def compressFile(file_name, new_name):      
    comp = bz2.BZ2Compressor()
    comFile = open(new_name, "wb")
    oldFile = open(file_name, "rb")
    while True:
        data = oldFile.read(1024*1024)
        if(len(data) == 0):
            break
        comFile.write(comp.compress(data))
    comFile.write(comp.flush())
    comFile.close()
</snippet></ROW><ROW><id>13445079</id><snippet>namedtuple</snippet></ROW><ROW><id>13445079</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; Point = collections.namedtuple('Point', ['x', 'y'])
&gt;&gt;&gt; p = Point(1, 2)
&gt;&gt;&gt; p
Point(x=1, y=2)
</snippet></ROW><ROW><id>13445079</id><snippet>list</snippet></ROW><ROW><id>13445079</id><snippet>p</snippet></ROW><ROW><id>13445079</id><snippet>Point</snippet></ROW><ROW><id>13445079</id><snippet>&gt;&gt;&gt; list(p)
[1, 2]
</snippet></ROW><ROW><id>13445079</id><snippet>Point</snippet></ROW><ROW><id>13445079</id><snippet>namedtuple</snippet></ROW><ROW><id>13445079</id><snippet>abc.Sequence</snippet></ROW><ROW><id>13445280</id><snippet>curList = items
if curList:
    largest = items[0]
    while curList is not None:
        if (curList[0] &gt; largest):
            largest = curList[0]
        curList = curList[1]
    print largest
</snippet></ROW><ROW><id>13445347</id><snippet>import random

def A(object):
    def __init__(self):
        self.state = random.random()
</snippet></ROW><ROW><id>13445347</id><snippet>__getnewargs__</snippet></ROW><ROW><id>13445347</id><snippet>__repr__</snippet></ROW><ROW><id>13445347</id><snippet>pickle</snippet></ROW><ROW><id>13445347</id><snippet>__reduce__</snippet></ROW><ROW><id>13445347</id><snippet>object</snippet></ROW><ROW><id>13445347</id><snippet>__repr__</snippet></ROW><ROW><id>13445347</id><snippet>__repr__</snippet></ROW><ROW><id>13445347</id><snippet>__repr__</snippet></ROW><ROW><id>13445347</id><snippet>def __repr__(self):
    return "&lt;A object with state=%f&gt;" % self.state
</snippet></ROW><ROW><id>13445421</id><snippet># this returns a list of all Elements that have the tag "to"
toemail=dom.getElementsByTagName('to')

# Here we take the first node returned with tag 'to', then it's first child node
textnode = toemail[0].childNodes[0]

# print the data in the textnode
print textnode.data
</snippet></ROW><ROW><id>13445421</id><snippet>for address in textnode.data.split(';'):
    if address == '':
        # Catch empty entries as a result of trailing ;
        continue
    email = i.strip().strip('\n')
    print email
</snippet></ROW><ROW><id>13445443</id><snippet>print</snippet></ROW><ROW><id>13445443</id><snippet>test()</snippet></ROW><ROW><id>13445443</id><snippet>theList.append(x)</snippet></ROW><ROW><id>13445566</id><snippet>execfile()</snippet></ROW><ROW><id>13445566</id><snippet>imp.load_module()</snippet></ROW><ROW><id>13445566</id><snippet>sys.executable</snippet></ROW><ROW><id>13445630</id><snippet>d = d.applymap(lambda x: np.nan if isinstance(x, basestring) and x.isspace() else x)
</snippet></ROW><ROW><id>13445630</id><snippet>applymap</snippet></ROW><ROW><id>13445670</id><snippet>ConnectableObjectInstance.__class__</snippet></ROW><ROW><id>13445670</id><snippet>NewConnection</snippet></ROW><ROW><id>13445670</id><snippet>self</snippet></ROW><ROW><id>13445670</id><snippet>&gt;&gt;&gt; class Connection(object):
...  def __init__(self, parent):
...   self.parent = parent
...
&gt;&gt;&gt; class ConnectableObject(object):
...  def __init__(self):
...   pass
...  def connect(self):
...   return Connection(self)
...
&gt;&gt;&gt; conobj = ConnectableObject()
&gt;&gt;&gt; con = conobj.connect()
&gt;&gt;&gt; con.parent
&lt;__main__.ConnectableObject object at 0x01FDEC70&gt;
</snippet></ROW><ROW><id>13445823</id><snippet>body = part.get_payload(decode=True).decode(part.get_content_charset())
</snippet></ROW><ROW><id>13445899</id><snippet>with open('myfile.txt', 'r') as infile:
    items = [line.lower() for line in infile]
</snippet></ROW><ROW><id>13445899</id><snippet>with open('myfile.txt', 'r') as infile:
    items = infile.read().lower().splitlines()
</snippet></ROW><ROW><id>13445899</id><snippet>file</snippet></ROW><ROW><id>13445899</id><snippet>file</snippet></ROW><ROW><id>13446172</id><snippet>response.read()</snippet></ROW><ROW><id>13446322</id><snippet>&gt;&gt;&gt; d
         City      Borough
0   Brooklyn     Brooklyn
1    Astoria       Queens
2    Astoria  Unspecified
3  Ridgewood  Unspecified
4  Ridgewood       Queens
&gt;&gt;&gt; realData = d[d.Borough != "Unspecified"]
&gt;&gt;&gt; realData = pandas.Series(data=realData.Borough.values, index=realData.City)
&gt;&gt;&gt; d['Borough'] = d.City.map(realData)
&gt;&gt;&gt; d
         City   Borough
0   Brooklyn  Brooklyn
1    Astoria    Queens
2    Astoria    Queens
3  Ridgewood    Queens
4  Ridgewood    Queens
</snippet></ROW><ROW><id>13446322</id><snippet>d['Borough'] = d.City.map(paired['Borough'])</snippet></ROW><ROW><id>13446322</id><snippet>map</snippet></ROW><ROW><id>13446519</id><snippet>ObjectListView</snippet></ROW><ROW><id>13446519</id><snippet>stringConverter</snippet></ROW><ROW><id>13446519</id><snippet>None</snippet></ROW><ROW><id>13446519</id><snippet>ObjectListView.py</snippet></ROW><ROW><id>13446519</id><snippet>ColumnDefn</snippet></ROW><ROW><id>13446519</id><snippet>def _StringToValue(self, value, converter):
    """
    Convert the given value to a string, using the given converter
    """
    try:
        return converter(value)
    except TypeError:
        pass

    if converter and isinstance(value, (datetime.datetime, datetime.date, datetime.time)):
        return value.strftime(self.stringConverter)

    # By default, None is changed to an empty string.
    if not converter and not value:                # THE ERROR IS HERE!!!!
        return ""

    fmt = converter or "%s"
    try:
        return fmt % value
    except UnicodeError:
        return unicode(fmt) % value
</snippet></ROW><ROW><id>13446519</id><snippet>if not converter and value is None:
</snippet></ROW><ROW><id>13446661</id><snippet>static</snippet></ROW><ROW><id>13446661</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>13446661</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>13446661</id><snippet>$ python manage.py collectstatic
</snippet></ROW><ROW><id>13446661</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>13446661</id><snippet>from django.contrib.staticfiles.urls import staticfiles_urlpatterns

urlpatterns = ...

urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>13446661</id><snippet>DEBUG = True</snippet></ROW><ROW><id>13446661</id><snippet>STATIC_URL</snippet></ROW><ROW><id>13446701</id><snippet>return render_template('template.html', params**)</snippet></ROW><ROW><id>13446701</id><snippet>r = Response()
    r.headers['Content-Type'] = 'text/html; charset=windows-1251'
    r.data = render_template('template.html', param1 = data).encode('cp1251')
</snippet></ROW><ROW><id>13446753</id><snippet>ba[i] = version &lt;&lt; 6 | padding &lt;&lt; 5 | extension &lt;&lt; 4 | cc
</snippet></ROW><ROW><id>13446773</id><snippet>my_list = [None for _ in range(10)]
</snippet></ROW><ROW><id>13446773</id><snippet>&gt;&gt;&gt; new_list = ['one', 'two', 'three']
&gt;&gt;&gt; my_list[:len(new_list)] = new_list
&gt;&gt;&gt; my_list
['one', 'two', 'three', None, None, None, None, None, None, None]
</snippet></ROW><ROW><id>13446773</id><snippet>my_list</snippet></ROW><ROW><id>13446773</id><snippet>&lt;form action=... method="post"&gt;
      {% for item in my_list %}
        {% if item %}
           &lt;input type="text" name="name" value="item.name"&gt;
        {% else %}
           &lt;input type="text" name="&lt;your_blank_value&gt;" value="&lt;your_blank&gt;"&gt;
        {% endif %}
      {% endfor %}
      &lt;input type="submit"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>13446854</id><snippet>open</snippet></ROW><ROW><id>13446854</id><snippet>def ReadAndMerge():
    library1filename = input("Enter 1st filename to read and merge:")
    with open(library1filename, 'r') as library1:
        library1contents = library1.read()

    library2filename = input("Enter 2nd filename to read and merge:")
    with open(library2, 'r') as library2:
        library2contents = namelibrary2.read()

    print(library1contents)
    print(library2contents)

    combined_contents = library1contents + library2contents  # concatenate text

    print(combined_contents)

    combined_filename = "combined.txt"    # ask user for name here?
    with open(combined_filename, "w") as combined_file:
        combined_file.write(combined_contents)
</snippet></ROW><ROW><id>13446854</id><snippet>with</snippet></ROW><ROW><id>13446854</id><snippet>return combined_contents</snippet></ROW><ROW><id>13446955</id><snippet>subcategory</snippet></ROW><ROW><id>13447176</id><snippet>data[data.groupby('tag').pid.transform(len) &gt; 1]
</snippet></ROW><ROW><id>13447176</id><snippet>import pandas
import numpy as np
data = pandas.DataFrame(
    {'pid' : [1,1,1,2,2,3,3,3],
     'tag' : [23,45,62,24,45,34,25,62],
     })

bytag = data.groupby('tag').aggregate(np.count_nonzero)
tags = bytag[bytag.pid &gt;= 2].index
print(data[data['tag'].isin(tags)])
</snippet></ROW><ROW><id>13447176</id><snippet>   pid  tag
1    1   45
2    1   62
4    2   45
7    3   62
</snippet></ROW><ROW><id>13447232</id><snippet>list</snippet></ROW><ROW><id>13447232</id><snippet>set()</snippet></ROW><ROW><id>13447232</id><snippet>list</snippet></ROW><ROW><id>13447232</id><snippet>list()</snippet></ROW><ROW><id>13447232</id><snippet>[]</snippet></ROW><ROW><id>13447232</id><snippet>#List will be empty since for loop has not ran yet</snippet></ROW><ROW><id>13447232</id><snippet>import os
import shutil

srcpath = "E:\\Learning Python\\Testing out\\thunderstorm stuff"
srcfiles = os.listdir(srcpath)

destpath = "E:\\Learning Python\\Testing out\\test folder"

# extract the three letters from filenames and filter out duplicates
destdirs = list(set([filename[12:15] for filename in srcfiles]))


def create(dirname, destpath):
    full_path = os.path.join(destpath, dirname)
    os.mkdir(full_path)
    return full_path

def move(filename, dirpath):
    shutil.move(os.path.join(srcpath, filename)
                ,dirpath)

# create destination directories and store their names along with full paths
targets = [
    (folder, create(folder, destpath)) for folder in destdirs
]

for dirname, full_path in targets:
    for filename in srcfile:
        if dirname == filename[12:15]:
            move(filename, full_path)
</snippet></ROW><ROW><id>13447291</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = { (1,2):3, (1,3):5, (2,1):6 }
&gt;&gt;&gt; 
&gt;&gt;&gt; Counter(j for k in a for j in k)
Counter({1: 3, 2: 2, 3: 1})
</snippet></ROW><ROW><id>13448022</id><snippet>&gt;&gt;&gt; y = [[[] for i in range(n)] for i in range(n)]
&gt;&gt;&gt; print y
[[[], [], [], []], [[], [], [], []], [[], [], [], []], [[], [], [], []]]
</snippet></ROW><ROW><id>13448040</id><snippet>class Player(object):     
    # ... snip ...

    def fire(self):
        bullet = Bullet()
        bullet.owner = self
        bullet_list.append(bullet)
</snippet></ROW><ROW><id>13448098</id><snippet>c[k] = a[k+0]*b[0] + a[k+1]*b[1] + a[k+2]*b[2]</snippet></ROW><ROW><id>13448098</id><snippet>&gt;&gt;&gt; c = [sum(i*j for i,j in zip(a[k:], b)) for k in range(4)]
&gt;&gt;&gt; c
[120, 86, 75, 84]
</snippet></ROW><ROW><id>13448195</id><snippet>None</snippet></ROW><ROW><id>13448195</id><snippet>def doSomething():
    """
    doSomething will return a string value 
    If there is no value available, None will be returned
    """
    if check_something():
        return "a string"

    # this is being explicit. If you did not do this,
    # None would still be returned. But it is nice
    # to be verbose so it reads properly with intent.   
    return None
</snippet></ROW><ROW><id>13448195</id><snippet>def doSomething():
    """
    doSomething will return a string value 
    If there is no value available, and empty string 
    will be returned
    """
    if check_something():
        return "a string"

    return ""
</snippet></ROW><ROW><id>13448195</id><snippet>def doSomething():
    if foo:
        if bar:
            if biz:
                return "value"
    return ""
</snippet></ROW><ROW><id>13448452</id><snippet>Combine</snippet></ROW><ROW><id>13448452</id><snippet>Combine</snippet></ROW><ROW><id>13448452</id><snippet>''.join</snippet></ROW><ROW><id>13448654</id><snippet>open(URL,data)
</snippet></ROW><ROW><id>13448654</id><snippet>geturl()
</snippet></ROW><ROW><id>13448833</id><snippet>    def get_table(service, project_number, dataset_id, table_id):
      """Get Table information.

      Args:
        service: Authorized BigQuery API client.
        project_number: The current Project number.
        dataset_id: The name of the dataset.
        table_id: Id of the relevant table.
      """
      tables = service.tables()

      try:
        table_info = tables.get(projectId=project_number,
                                datasetId=dataset_id,
                                tableId=table_id).execute()
        print 'Table information:\n'
        print 'Table name: %s' % table_info['id']
        print 'Table creation time: %s' % table_info['creationTime']

      except errors.HttpError, error:
        print 'Could not get Table information: %s' % error


def list_table_data(service, project_number, dataset_id, table_id):
  """Returns table data from a specific set of rows.

  Args:
    service: Authorized BigQuery API client.
    project_number: The current Project number.
    dataset_id: The name of the dataset.
    table_id: The name of the table.
  """

  try:
    table = service.tabledata()
    table_data = table.list(projectId=project_number,
                       datasetId=dataset_id,
                       tableId=table_id,
                       maxResults=10).execute(http)

    print 'Total Rows: %s' % table_data['totalRows']
    for row in table_data['rows']:
      data = []
      for values in row['f']:
        value = values['v'] if values['v'] is not None else ''
        data.append(value)
      print '  '.join(data)

  except HttpError, error:
    print 'Could not list Table data. %s' % error
</snippet></ROW><ROW><id>13449064</id><snippet>recvPacket</snippet></ROW><ROW><id>13449064</id><snippet>pktFormat = 'bbHHhd'
pktSize = struct.calcsize(pktFormat)
... = struct.unpack(pktFormat, recvPacket[:pktSize])
</snippet></ROW><ROW><id>13449587</id><snippet>## {{{ http://code.activestate.com/recipes/578019/ (r15)
#!/usr/bin/env python

"""
Bytes-to-human / human-to-bytes converter.
Based on: http://goo.gl/kTQMs
Working with Python 2.x and 3.x.

Author: Giampaolo Rodola' &lt;g.rodola [AT] gmail [DOT] com&gt;
License: MIT
"""

# see: http://goo.gl/kTQMs
SYMBOLS = {
    'customary'     : ('B', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'),
    'customary_ext' : ('byte', 'kilo', 'mega', 'giga', 'tera', 'peta', 'exa',
                       'zetta', 'iotta'),
    'iec'           : ('Bi', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi', 'Yi'),
    'iec_ext'       : ('byte', 'kibi', 'mebi', 'gibi', 'tebi', 'pebi', 'exbi',
                       'zebi', 'yobi'),
}

def bytes2human(n, format='%(value).1f %(symbol)s', symbols='customary'):
    """
    Convert n bytes into a human readable string based on format.
    symbols can be either "customary", "customary_ext", "iec" or "iec_ext",
    see: http://goo.gl/kTQMs

      &gt;&gt;&gt; bytes2human(0)
      '0.0 B'
      &gt;&gt;&gt; bytes2human(0.9)
      '0.0 B'
      &gt;&gt;&gt; bytes2human(1)
      '1.0 B'
      &gt;&gt;&gt; bytes2human(1.9)
      '1.0 B'
      &gt;&gt;&gt; bytes2human(1024)
      '1.0 K'
      &gt;&gt;&gt; bytes2human(1048576)
      '1.0 M'
      &gt;&gt;&gt; bytes2human(1099511627776127398123789121)
      '909.5 Y'

      &gt;&gt;&gt; bytes2human(9856, symbols="customary")
      '9.6 K'
      &gt;&gt;&gt; bytes2human(9856, symbols="customary_ext")
      '9.6 kilo'
      &gt;&gt;&gt; bytes2human(9856, symbols="iec")
      '9.6 Ki'
      &gt;&gt;&gt; bytes2human(9856, symbols="iec_ext")
      '9.6 kibi'

      &gt;&gt;&gt; bytes2human(10000, "%(value).1f %(symbol)s/sec")
      '9.8 K/sec'

      &gt;&gt;&gt; # precision can be adjusted by playing with %f operator
      &gt;&gt;&gt; bytes2human(10000, format="%(value).5f %(symbol)s")
      '9.76562 K'
    """
    n = int(n)
    if n &lt; 0:
        raise ValueError("n &lt; 0")
    symbols = SYMBOLS[symbols]
    prefix = {}
    for i, s in enumerate(symbols[1:]):
        prefix[s] = 1 &lt;&lt; (i+1)*10
    for symbol in reversed(symbols[1:]):
        if n &gt;= prefix[symbol]:
            value = float(n) / prefix[symbol]
            return format % locals()
    return format % dict(symbol=symbols[0], value=n)

def human2bytes(s):
    """
    Attempts to guess the string format based on default symbols
    set and return the corresponding bytes as an integer.
    When unable to recognize the format ValueError is raised.

      &gt;&gt;&gt; human2bytes('0 B')
      0
      &gt;&gt;&gt; human2bytes('1 K')
      1024
      &gt;&gt;&gt; human2bytes('1 M')
      1048576
      &gt;&gt;&gt; human2bytes('1 Gi')
      1073741824
      &gt;&gt;&gt; human2bytes('1 tera')
      1099511627776

      &gt;&gt;&gt; human2bytes('0.5kilo')
      512
      &gt;&gt;&gt; human2bytes('0.1  byte')
      0
      &gt;&gt;&gt; human2bytes('1 k')  # k is an alias for K
      1024
      &gt;&gt;&gt; human2bytes('12 foo')
      Traceback (most recent call last):
          ...
      ValueError: can't interpret '12 foo'
    """
    init = s
    num = ""
    while s and s[0:1].isdigit() or s[0:1] == '.':
        num += s[0]
        s = s[1:]
    num = float(num)
    letter = s.strip()
    for name, sset in SYMBOLS.items():
        if letter in sset:
            break
    else:
        if letter == 'k':
            # treat 'k' as an alias for 'K' as per: http://goo.gl/kTQMs
            sset = SYMBOLS['customary']
            letter = letter.upper()
        else:
            raise ValueError("can't interpret %r" % init)
    prefix = {sset[0]:1}
    for i, s in enumerate(sset[1:]):
        prefix[s] = 1 &lt;&lt; (i+1)*10
    return int(num * prefix[letter])


if __name__ == "__main__":
    import doctest
    doctest.testmod()
## end of http://code.activestate.com/recipes/578019/ }}}
</snippet></ROW><ROW><id>13449944</id><snippet>self.label_lang.values = map(str, result2)
</snippet></ROW><ROW><id>13450346</id><snippet>splitlines()</snippet></ROW><ROW><id>13450346</id><snippet>def myview(request):
    result = subprocess.Popen(['ls', '/home/zurelsoft/R'], stdout=subprocess.PIPE).communicate()[0].splitlines()
    return render_to_response('thanks.html', {'res':result, 'res1':command}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>13450346</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>13450346</id><snippet>&lt;td&gt;{{ res|join:"&lt;br/&gt;" }}&lt;/td&gt;
</snippet></ROW><ROW><id>13450367</id><snippet>@decorator
def foo(...):
    ...
</snippet></ROW><ROW><id>13450367</id><snippet>def foo(...):
    ...
foo = decorator(foo)
</snippet></ROW><ROW><id>13450367</id><snippet>functools.lru_cache</snippet></ROW><ROW><id>13450367</id><snippet>property</snippet></ROW><ROW><id>13450367</id><snippet>staticmethod</snippet></ROW><ROW><id>13450387</id><snippet>Login normally in browser
export cookies to file
use that file in script
</snippet></ROW><ROW><id>13450387</id><snippet>fanatic</snippet></ROW><ROW><id>13450797</id><snippet>-W</snippet></ROW><ROW><id>13450797</id><snippet>ssh ssh_host -W host:port
</snippet></ROW><ROW><id>13450797</id><snippet>use Net::OpenSSH;
my $ssh = Net::OpenSSH-&gt;new($host);
my $out = $ssh-&gt;capture({tunnel =&gt; 1,
                         stdin_data =&gt; "GET / HTTP/1.0\n\n" },
                        'www.google.com', 80);

print $out;
</snippet></ROW><ROW><id>13450807</id><snippet>try:
    current_value = float(html_content[temperature_pos_begin:temperature_pos_end])
except ValueError:
    print "Failed to convert %r to a float"%html_content[temperature_pos_begin:temperature_pos_end]
    current_value = None # or something that makes sense
</snippet></ROW><ROW><id>13451118</id><snippet>pip install uwsgi</snippet></ROW><ROW><id>13451233</id><snippet>before_request</snippet></ROW><ROW><id>13451233</id><snippet>@app.before_request
def check_valid_login():
    login_valid = 'user' in session # or whatever you use to check valid login

    if (request.endpoint and 
        'static' not in request.endpoint and 
        not login_valid and 
        not getattr(app.view_functions[request.endpoint], 'is_public', False) ) :
        return render_template('login.html', next=request.endpoint)
</snippet></ROW><ROW><id>13451233</id><snippet>is_public()</snippet></ROW><ROW><id>13451233</id><snippet>def public_endpoint(function):
    function.is_public = True
    return function
</snippet></ROW><ROW><id>13451304</id><snippet>{% for user in users %}
    &lt;tr&gt;
        &lt;td&gt;{{ forloop.counter }}&lt;/td&gt;
        &lt;td&gt;{{ user.last_name }}&lt;/td&gt;
        &lt;td&gt;{{ user.first_name }}&lt;/td&gt;
        &lt;td&gt;
            {% for group in user.groups.all %}
                {{ group }}
                {% if not forloop.last %},{% endif %} 
            {% endfor %}
        &lt;/td&gt;
    &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>13451420</id><snippet>.match()</snippet></ROW><ROW><id>13451420</id><snippet>.search()</snippet></ROW><ROW><id>13451420</id><snippet>.findall()</snippet></ROW><ROW><id>13451420</id><snippet>regex = re.compile(r'&lt;errorcode&gt;(\d+)&lt;/errorcode&gt;')
</snippet></ROW><ROW><id>13451420</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>13451658</id><snippet>split()</snippet></ROW><ROW><id>13451658</id><snippet>import re
retval = subprocess.Popen(['rsync', '--list-only', source],
                           stdout=subprocess.PIPE, 
                           env={'RSYNC_PASSWORD': password}).communicate()[0]
retval = re.sub('^.+?\d+:\d+:\d+\s+(\S+.+)', '\g&lt;1&gt;', retval)
</snippet></ROW><ROW><id>13451658</id><snippet>retval = subprocess.Popen(['rsync', '--list-only', source],
                           stdout=subprocess.PIPE, 
                           env={'RSYNC_PASSWORD': password}).communicate()[0]
retval = retval.split(' ')[-1]
</snippet></ROW><ROW><id>13451666</id><snippet>input</snippet></ROW><ROW><id>13451666</id><snippet>exec</snippet></ROW><ROW><id>13451758</id><snippet>pipe = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>13451758</id><snippet>import subprocess
cmd = ['/home/user/workspace/vmlinkedclone.pl', '--server', '192.168.20.2', '--username', 'root', '--password', 'root' ,'--vmbase_id', '2', '--vm_destination_id', '41', '--vmname_destination', 'clone-41-snapname', '--snapname', 'Snapname']
pipe = subprocess.Popen(cmd, shell = True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
out, err = pipe.communicate()
result = out.decode()
print "Result : ",result 
</snippet></ROW><ROW><id>13451780</id><snippet>args=i</snippet></ROW><ROW><id>13451780</id><snippet>i</snippet></ROW><ROW><id>13451780</id><snippet>args</snippet></ROW><ROW><id>13451780</id><snippet>i</snippet></ROW><ROW><id>13451824</id><snippet>import os
import MySQLdb as mdb
import csv

def read_file():
    file_path = "/home/local/user/Main/Module-1.0.4/file_processing/part-00000.txt"
    with open('part-00000','r') as infile:
        file_open= csv.reader(infile, delimiter='\t')
        cache = []
        for line in file_open:
            cache.append(line)
            if len(cache) &gt; 500:
                yield cache
                cache = []
        yield cache 

conn = mdb.connect(user='root', passwd='redhat', db='Xml_Data', host='localhost', charset="utf8")
cursor = conn.cursor()
query = "insert into PerformaceReport (campaignID, keywordID, keyword, avgPosition) VALUES (%s,%s,%s,%s)"
for rows in read_file():
    try:
        cursor.executemany(query, rows)
    except mdb.Error:
        conn.rollback()
    else:
        conn.commit()
</snippet></ROW><ROW><id>13451824</id><snippet>LOAD DATA INFILE</snippet></ROW><ROW><id>13451958</id><snippet>def form_handling_view(request):
    if request.POST:
    form = MyForm(request.POST)
        if form.is_valid():
            ... handle the form ...
            request.session['form_posted'] = True
            return redirect('thank_you')

def thank_you(request):
    if not request.session.pop('form_posted', False):
        return HttpResponseForbidden('not permitted')
    ... render thank_you page ...
</snippet></ROW><ROW><id>13451958</id><snippet>pop</snippet></ROW><ROW><id>13452101</id><snippet>import numpy as np
</snippet></ROW><ROW><id>13452101</id><snippet>&gt;&gt;&gt; mat = np.random.randn(2,3)
&gt;&gt;&gt; mat
array([[ 1.02063865, 1.52885147, 0.45588211],
       [-0.82198131, 0.20995583, 0.31997462]])
</snippet></ROW><ROW><id>13452101</id><snippet>&gt;&gt;&gt; mat.T
array([[ 1.02063865, -0.82198131],
       [ 1.52885147, 0.20995583],
       [ 0.45588211, 0.31997462]])
</snippet></ROW><ROW><id>13452101</id><snippet>&gt;&gt;&gt; mat = np.random.randn(3,6)
array([[ 2.01139326, 1.33267072, 1.2947112 , 0.07492725, 0.49765694,
         0.01757505],
       [ 0.42309629, 0.95921276, 0.55840131, -1.22253606, -0.91811118,
         0.59646987],
       [ 0.19714104, -1.59446001, 1.43990671, -0.98266887, -0.42292461,
        -1.2378431 ]])
&gt;&gt;&gt; mat.reshape(2,9)
array([[ 2.01139326, 1.33267072, 1.2947112 , 0.07492725, 0.49765694,
         0.01757505, 0.42309629, 0.95921276, 0.55840131],
       [-1.22253606, -0.91811118, 0.59646987, 0.19714104, -1.59446001,
         1.43990671, -0.98266887, -0.42292461, -1.2378431 ]])
</snippet></ROW><ROW><id>13452101</id><snippet>&gt;&gt;&gt; mat = np.random.randn(4,3)
&gt;&gt;&gt; mat.shape
(4, 3)
&gt;&gt;&gt; mat
array([[-1.47446507, -0.46316836, 0.44047531],
       [-0.21275495, -1.16089705, -1.14349478],
       [-0.83299338, 0.20336677, 0.13460515],
       [-1.73323076, -0.66500491, 1.13514327]])
&gt;&gt;&gt; mat.shape = 2,6
&gt;&gt;&gt; mat.shape
(2, 6)

&gt;&gt;&gt; mat
array([[-1.47446507, -0.46316836, 0.44047531, -0.21275495, -1.16089705,
        -1.14349478],
       [-0.83299338, 0.20336677, 0.13460515, -1.73323076, -0.66500491,
         1.13514327]])
</snippet></ROW><ROW><id>13452168</id><snippet>list = [1, 2]
m(*list)
</snippet></ROW><ROW><id>13452168</id><snippet>map = [a: 1, b: 2]
paramsList = map.values().toList()
m(*paramsList)
</snippet></ROW><ROW><id>13452277</id><snippet>{% for obj in dict.values %}
    {% for item in obj %}
        {{ item }}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>13452277</id><snippet>items</snippet></ROW><ROW><id>13452277</id><snippet>{% for key, value in dict.items %}
</snippet></ROW><ROW><id>13452357</id><snippet>.format()</snippet></ROW><ROW><id>13452357</id><snippet>%</snippet></ROW><ROW><id>13452357</id><snippet>%</snippet></ROW><ROW><id>13452357</id><snippet>%</snippet></ROW><ROW><id>13452357</id><snippet>"{greeting}, {0}".format(world, greeting='Hello')
</snippet></ROW><ROW><id>13452357</id><snippet>%</snippet></ROW><ROW><id>13452357</id><snippet>Template</snippet></ROW><ROW><id>13452357</id><snippet>Formatter</snippet></ROW><ROW><id>13452473</id><snippet>c_char_p</snippet></ROW><ROW><id>13452473</id><snippet>void *</snippet></ROW><ROW><id>13452473</id><snippet>#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

char *get(void)
{
    char *buf = "Hello World";
    char *new_buf = strdup(buf);
    printf("allocated address: %p\n", new_buf);
    return new_buf;
}

void freeme(char *ptr)
{
    printf("freeing address: %p\n", ptr);
    free(ptr);
}
</snippet></ROW><ROW><id>13452473</id><snippet>from ctypes import *

lib = cdll.LoadLibrary('./string.so')
lib.freeme.argtypes = c_void_p,
lib.freeme.restype = None
lib.get.argtypes = []
lib.get.restype = c_void_p

&gt;&gt;&gt; ptr = lib.get()
allocated address: 0x9facad8
&gt;&gt;&gt; hex(ptr)
'0x9facad8'
&gt;&gt;&gt; cast(ptr, c_char_p).value
'Hello World'
&gt;&gt;&gt; lib.freeme(ptr)
freeing address: 0x9facad8
</snippet></ROW><ROW><id>13452473</id><snippet>c_char_p</snippet></ROW><ROW><id>13452473</id><snippet>getfunc</snippet></ROW><ROW><id>13452473</id><snippet>class c_char_p_sub(c_char_p):
    pass

lib.get.restype = c_char_p_sub
</snippet></ROW><ROW><id>13452473</id><snippet>value</snippet></ROW><ROW><id>13452473</id><snippet>freeme</snippet></ROW><ROW><id>13452473</id><snippet>c_void_p</snippet></ROW><ROW><id>13452526</id><snippet>result</snippet></ROW><ROW><id>13452526</id><snippet>forloop.counter0</snippet></ROW><ROW><id>13452550</id><snippet>&gt;&gt;&gt; dtype = [('name', 'S10'), ('height', float), ('age', int)]
&gt;&gt;&gt; values = [('Arthur', 1.8, 41), ('Lancelot', 1.9, 38),
...           ('Galahad', 1.7, 38)]
&gt;&gt;&gt; a = np.array(values, dtype=dtype)       # create a structured array
&gt;&gt;&gt; np.sort(a, order='height')                        
array([('Galahad', 1.7, 38), ('Arthur', 1.8, 41),
       ('Lancelot', 1.8999999999999999, 38)],
      dtype=[('name', '|S10'), ('height', '&lt;f8'), ('age', '&lt;i4')])
</snippet></ROW><ROW><id>13452550</id><snippet>np.sort(csvdata, order=['year', 'month', 'day'])
</snippet></ROW><ROW><id>13452718</id><snippet>&lt;tag&gt;</snippet></ROW><ROW><id>13452718</id><snippet>&lt;a href="where/you/want/the/link/to/go"&gt;text of the link&lt;/a&gt;
</snippet></ROW><ROW><id>13452718</id><snippet>something.html</snippet></ROW><ROW><id>13452718</id><snippet>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</snippet></ROW><ROW><id>13452884</id><snippet>from django.conf import settings

text = u'&lt;img src="%simages/%s"&gt; %s' % (settings.STATIC_URL, ball_file, val)
</snippet></ROW><ROW><id>13452884</id><snippet>STATIC_URL</snippet></ROW><ROW><id>13452884</id><snippet>%simages</snippet></ROW><ROW><id>13452884</id><snippet>%s/images</snippet></ROW><ROW><id>13453153</id><snippet>df[df.index.map(lambda x: x[0] in stk_list)]
</snippet></ROW><ROW><id>13453153</id><snippet>In : stk_list
Out: ['600106', '300204', '300113']

In : df
Out:
                STK_Name   ROIC   mg_r
STK_ID RPT_Date
002410 20111231      ???  0.401  0.956
300204 20111231      ???  0.375  0.881
300295 20111231     ????  2.370  0.867
300288 20111231     ????  1.195  0.861
600106 20111231     ????  1.214  0.857
300113 20111231     ????  0.837  0.852

In : df[df.index.map(lambda x: x[0] in stk_list)]
Out:
                STK_Name   ROIC   mg_r
STK_ID RPT_Date
300204 20111231      ???  0.375  0.881
600106 20111231     ????  1.214  0.857
300113 20111231     ????  0.837  0.852
</snippet></ROW><ROW><id>13453176</id><snippet>ic_next_td</snippet></ROW><ROW><id>13453176</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>13453176</id><snippet>for value in ic_next_td.strings:
    print value
</snippet></ROW><ROW><id>13453176</id><snippet>Aerospace
Land (Vehicles, etc)
Logistics
Marine
Procurement
</snippet></ROW><ROW><id>13453176</id><snippet>list()</snippet></ROW><ROW><id>13453176</id><snippet>.strings</snippet></ROW><ROW><id>13453176</id><snippet>values = list(ic_next_td.strings)
</snippet></ROW><ROW><id>13453694</id><snippet>python -tt yourscript.py</snippet></ROW><ROW><id>13453944</id><snippet>from django import template
register = template.Library()

@register.filter
def getitem(mylist, index):
    return mylist[index]
</snippet></ROW><ROW><id>13453944</id><snippet>{% load myfilters %}
{% regroup DBShots1 by laEmpNum as eachScList %}
{% for eachScGrp in eachScList %}
    {% for eachSc in eachScGrp.list %}
    &lt;tr&gt;
      &lt;td bgcolor="#FFFACD" width="1%"&gt;{{ forloop.counter }} &lt;/td&gt; 
      &lt;td bgcolor="#CCFACD" width="1%"&gt;{{ eachSc.sName }}&lt;/td&gt;
      &lt;td bgcolor="#CCF0F5" width="1%"&gt;{{ eachSc.duration }}&lt;/td&gt;
      &lt;td bgcolor="#CCFACD" width="1%"&gt;{{ eachSc.frames }}&lt;/td&gt;
      &lt;td bgcolor="#CCFACD" width="5%"&gt;{{ GetEmpDept }} - {{ getEmpName.emp_name }} - {{ eachSc.laEmpNum }}&lt;/td&gt;
     &lt;/tr&gt;
    {% endfor %}
    &lt;tr&gt;
        &lt;td&gt; &lt;/td&gt;&lt;td&gt; &lt;/td&gt;
        &lt;td bgcolor="#FFFACD" width="1%"&gt;Tot={{ result|getitem:forloop.counter0 }}&lt;/td&gt;
    &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>13453981</id><snippet>array = [[] for x in range(n)]
</snippet></ROW><ROW><id>13454077</id><snippet>result = re.sub(
    r"""(?x) # verbose regex
    \b    # Start of word
    (?=   # Look ahead to ensure that this word contains...
     \w*  # (after any number of alphanumeric characters)
     \d   # ...at least one digit.
    )     # End of lookahead
    \w+   # Match the alphanumeric word
    \s*   # Match any following whitespace""", 
    "", subject)
</snippet></ROW><ROW><id>13454267</id><snippet>os.walk()</snippet></ROW><ROW><id>13454267</id><snippet>for root, dirs, files in os.walk(path):
    files = [f for f in files if not f[0] == '.']
    dirs[:] = [d for d in dirs if not d[0] == '.']
    # use files and dirs
</snippet></ROW><ROW><id>13454267</id><snippet>dirs[:] =</snippet></ROW><ROW><id>13454267</id><snippet>dirs</snippet></ROW><ROW><id>13454267</id><snippet>dirs</snippet></ROW><ROW><id>13454267</id><snippet>os.walk()</snippet></ROW><ROW><id>13454267</id><snippet>topdown</snippet></ROW><ROW><id>13454267</id><snippet>True</snippet></ROW><ROW><id>13454267</id><snippet>os.walk()</snippet></ROW><ROW><id>13454267</id><snippet>topdown</snippet></ROW><ROW><id>13454267</id><snippet>True</snippet></ROW><ROW><id>13454267</id><snippet>del</snippet></ROW><ROW><id>13454267</id><snippet>walk()</snippet></ROW><ROW><id>13454267</id><snippet>walk()</snippet></ROW><ROW><id>13454267</id><snippet>walk()</snippet></ROW><ROW><id>13454458</id><snippet>pip install Django
</snippet></ROW><ROW><id>13454778</id><snippet>coverage</snippet></ROW><ROW><id>13454778</id><snippet>pip install -U coverage</snippet></ROW><ROW><id>13454778</id><snippet>sudo pip install -U coverage</snippet></ROW><ROW><id>13455059</id><snippet>ABCMeta</snippet></ROW><ROW><id>13455059</id><snippet>import abc

class Model(object):
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def foo(self):
        pass

    @abc.abstractmethod
    def bar(self):
        pass

    @abc.abstractmethod
    def baz(self):
        pass

class MyClass(Model):
    pass
</snippet></ROW><ROW><id>13455059</id><snippet>&gt;&gt;&gt; import abc
&gt;&gt;&gt; class Model(object):
...     __metaclass__ = abc.ABCMeta
...     @abc.abstractmethod
...     def foo(self):
...         pass
...     @abc.abstractmethod
...     def bar(self):
...         pass
...     @abc.abstractmethod
...     def baz(self):
...         pass
... 
&gt;&gt;&gt; class MyClass(Model):
...     pass
... 
&gt;&gt;&gt; myclass = MyClass()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Can't instantiate abstract class MyClass with abstract methods bar, baz, foo
</snippet></ROW><ROW><id>13455059</id><snippet>MyClass</snippet></ROW><ROW><id>13455059</id><snippet>&gt;&gt;&gt; class MyClass(Model):
...     def foo(self): pass
...     def bar(self): pass
...     def baz(self): pass
... 
&gt;&gt;&gt; myclass = MyClass()
</snippet></ROW><ROW><id>13455095</id><snippet>mongo</snippet></ROW><ROW><id>13455095</id><snippet>db.students.aggregate(
    // Initial document match (uses index, if a suitable one is available)
    { $match: {
        _id : 1
    }},

    // Expand the scores array into a stream of documents
    { $unwind: '$scores' },

    // Filter to 'homework' scores 
    { $match: {
        'scores.type': 'homework'
    }},

    // Sort in descending order
    { $sort: {
        'scores.score': -1
    }}
)
</snippet></ROW><ROW><id>13455095</id><snippet>{
    "result" : [
        {
            "_id" : 1,
            "name" : "Aurelia Menendez",
            "scores" : {
                "type" : "homework",
                "score" : 71.76133439165544
            }
        },
        {
            "_id" : 1,
            "name" : "Aurelia Menendez",
            "scores" : {
                "type" : "homework",
                "score" : 34.85718117893772
            }
        }
    ],
    "ok" : 1
}
</snippet></ROW><ROW><id>13455175</id><snippet>a_instance.z  #instance variable 'z'
A.z           #class variable 'z'
</snippet></ROW><ROW><id>13455175</id><snippet>Func1</snippet></ROW><ROW><id>13455175</id><snippet>Func2</snippet></ROW><ROW><id>13455175</id><snippet>Func2</snippet></ROW><ROW><id>13455175</id><snippet>classmethod</snippet></ROW><ROW><id>13455175</id><snippet>@classmethod
def Func2(cls):
    return cls.z
</snippet></ROW><ROW><id>13455175</id><snippet>self.z</snippet></ROW><ROW><id>13455175</id><snippet>A.z</snippet></ROW><ROW><id>13455175</id><snippet>cls.z</snippet></ROW><ROW><id>13455175</id><snippet>classmethod</snippet></ROW><ROW><id>13455175</id><snippet>A.z</snippet></ROW><ROW><id>13455175</id><snippet>z</snippet></ROW><ROW><id>13455175</id><snippet>self.z</snippet></ROW><ROW><id>13455175</id><snippet>A.z</snippet></ROW><ROW><id>13455175</id><snippet>self</snippet></ROW><ROW><id>13455291</id><snippet>return path.append((x))</snippet></ROW><ROW><id>13455291</id><snippet>path</snippet></ROW><ROW><id>13455291</id><snippet>None</snippet></ROW><ROW><id>13455291</id><snippet>path</snippet></ROW><ROW><id>13455291</id><snippet>path.append((x)) 
return path
</snippet></ROW><ROW><id>13455302</id><snippet>$ dotcloud create -f sandbox  &lt;app_name&gt;
</snippet></ROW><ROW><id>13455302</id><snippet>$ dotcloud push
</snippet></ROW><ROW><id>13455302</id><snippet>dotcloud.yml</snippet></ROW><ROW><id>13455302</id><snippet>dotcloud env</snippet></ROW><ROW><id>13455302</id><snippet>dotcloud env</snippet></ROW><ROW><id>13455302</id><snippet>dotcloud.yml</snippet></ROW><ROW><id>13455302</id><snippet>$ dotcloud env set NEW_RELIC_APP_NAME='Test Application Name'
</snippet></ROW><ROW><id>13455302</id><snippet>$ dotcloud env set \
'NEW_RELIC_APP_NAME="Test Application Name"' \
'NEW_RELIC_LOG_LEVEL=debug'
</snippet></ROW><ROW><id>13455302</id><snippet>$ dotcloud env list
</snippet></ROW><ROW><id>13455711</id><snippet>.get_extension</snippet></ROW><ROW><id>13455711</id><snippet>class File(models.Model):
    name = models.CharField(max_length=45)
    description = models.CharField(max_length=100, blank=True)
    file = models.FileField(upload_to='files')

    def extension(self):
        name, extension = os.path.splitext(self.file.name)
        return extension
</snippet></ROW><ROW><id>13455711</id><snippet>.extension()</snippet></ROW><ROW><id>13455711</id><snippet>.get_extension()</snippet></ROW><ROW><id>13455711</id><snippet>class File(models.Model):
    ...
    def css_class(self):
        name, extension = os.path.splitext(self.file.name)
        if extension == 'pdf':
            return 'pdf'
        if extension == 'doc':
            return 'word'
        return 'other'
</snippet></ROW><ROW><id>13455711</id><snippet>{% for file in files %}
  &lt;a class="{{ file.css_class }}"&gt;link&lt;/a&gt;
{% endfor %}
</snippet></ROW><ROW><id>13455861</id><snippet>recommend.py</snippet></ROW><ROW><id>13455861</id><snippet>recommend . py</snippet></ROW><ROW><id>13455861</id><snippet>recommend</snippet></ROW><ROW><id>13455861</id><snippet>py</snippet></ROW><ROW><id>13455861</id><snippet>recommend</snippet></ROW><ROW><id>13455861</id><snippet>py</snippet></ROW><ROW><id>13455861</id><snippet>reload</snippet></ROW><ROW><id>13455861</id><snippet>import recommend
reload(recommend)
</snippet></ROW><ROW><id>13455914</id><snippet>__table_args__</snippet></ROW><ROW><id>13455914</id><snippet>class Tempo(Base):
    """
    Class for temporary table used to process data coming from xlsx
    @param Base Declarative Base
    """

    # TODO: make it completely temporary

    __tablename__ = 'tempo'
    __table_args__ = {'prefixes': ['TEMPORARY']}

    drw = alc.Column(alc.String)
    date = alc.Column(alc.Date)
    check_number = alc.Column(alc.Integer)
</snippet></ROW><ROW><id>13455978</id><snippet>view.run_command("delete_current_file")</snippet></ROW><ROW><id>13455978</id><snippet>view.run_command("DeleteCurrentFile")</snippet></ROW><ROW><id>13456177</id><snippet>.prettify()</snippet></ROW><ROW><id>13456208</id><snippet>findAll</snippet></ROW><ROW><id>13456208</id><snippet>"class":"green center"</snippet></ROW><ROW><id>13456208</id><snippet>print soup.findAll('td',{'class':'green center'})[0].text
print soup.findAll('td',{'class':'green center'})[1].text
</snippet></ROW><ROW><id>13456208</id><snippet>for td in soup.findAll('td',{'class':'green center'}):
    print td.text
</snippet></ROW><ROW><id>13456208</id><snippet>td_list = []
for td in soup.findAll('td',{'class':'green center'}):
    td_list.append(td.text)
print ' '.join(str(x) for x in td_list)
</snippet></ROW><ROW><id>13456354</id><snippet>hh = iter(h)
for row in range(a.getHeight()):
    for col in range(a.getWidth()):
         a[row][col] = next(hh)
</snippet></ROW><ROW><id>13456354</id><snippet>a</snippet></ROW><ROW><id>13456354</id><snippet>a</snippet></ROW><ROW><id>13456354</id><snippet>a = [[None]*ncol]*nrow
</snippet></ROW><ROW><id>13456354</id><snippet>a</snippet></ROW><ROW><id>13456354</id><snippet>a</snippet></ROW><ROW><id>13456354</id><snippet>getHeight</snippet></ROW><ROW><id>13456354</id><snippet>getWidth</snippet></ROW><ROW><id>13456354</id><snippet>numpy</snippet></ROW><ROW><id>13456354</id><snippet>h = np.array(['H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'T'])
a = h.reshape((3,3)) 
</snippet></ROW><ROW><id>13456406</id><snippet>.plist</snippet></ROW><ROW><id>13456406</id><snippet>plistlib</snippet></ROW><ROW><id>13456406</id><snippet>import plistlib

result = plistlib.readPlist(filename)
print result['Entry Text']
</snippet></ROW><ROW><id>13456421</id><snippet>-m</snippet></ROW><ROW><id>13456421</id><snippet>-m</snippet></ROW><ROW><id>13456421</id><snippet>sys.argv</snippet></ROW><ROW><id>13456421</id><snippet>a.py</snippet></ROW><ROW><id>13456421</id><snippet>b.py</snippet></ROW><ROW><id>13456421</id><snippet>a.py</snippet></ROW><ROW><id>13456421</id><snippet>print 'a'
import sys
print sys.argv
</snippet></ROW><ROW><id>13456421</id><snippet>b.py</snippet></ROW><ROW><id>13456421</id><snippet>print 'b'
</snippet></ROW><ROW><id>13456421</id><snippet>-m</snippet></ROW><ROW><id>13456421</id><snippet>$ python -m a -m b
</snippet></ROW><ROW><id>13456421</id><snippet>a
['/home/lesmana/tmp/a.py', '-m', 'b']
</snippet></ROW><ROW><id>13456421</id><snippet>-m</snippet></ROW><ROW><id>13456584</id><snippet>time</snippet></ROW><ROW><id>13456584</id><snippet>func_globals</snippet></ROW><ROW><id>13456584</id><snippet>func_closure</snippet></ROW><ROW><id>13456584</id><snippet>None</snippet></ROW><ROW><id>13456584</id><snippet>def foo(spam):
    def bar():
        return spam
    return bar

afunc = foo('eggs')
</snippet></ROW><ROW><id>13456584</id><snippet>foo()</snippet></ROW><ROW><id>13456727</id><snippet>string</snippet></ROW><ROW><id>13456727</id><snippet>Console.WriteLine(new string('.', 10));
</snippet></ROW><ROW><id>13456863</id><snippet>self.encode = Button(frame,command=lambda : rsa.encode (self.parameter) )
</snippet></ROW><ROW><id>13456951</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>13456951</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>13456951</id><snippet>In [7]: s = '&lt;html&gt;&lt;head&gt;More stuff&lt;/head&gt;&lt;body&gt;Text inside of the body&lt;/body&gt;Random text&lt;/html&gt;'

In [8]: s.split('&lt;body&gt;')[1].split('&lt;/body&gt;')[0]
Out[8]: 'Text inside of the body'
</snippet></ROW><ROW><id>13456951</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>13456951</id><snippet>In [1]: s = '&lt;html&gt;&lt;head&gt;More stuff&lt;/head&gt;&lt;body&gt;Text inside of the body&lt;body&gt;more sample text&lt;/body&gt;and then more text and then another&lt;body&gt; and then another &lt;/body&gt; and then end&lt;/body&gt;Random text&lt;/html&gt;'

In [2]: '&lt;/body&gt;'.join('&lt;body&gt;'.join(s.split('&lt;body&gt;')[1:]).split('&lt;/body&gt;')[:-1])
Out[2]: 'Text inside of the body&lt;body&gt;more sample text&lt;/body&gt;and then more text and then another&lt;body&gt; and then another &lt;/body&gt; and then end'
</snippet></ROW><ROW><id>13457066</id><snippet>is</snippet></ROW><ROW><id>13457066</id><snippet>==</snippet></ROW><ROW><id>13457066</id><snippet>In [1]: s1 = "Hello World"
In [2]: s2 = "Hello World"

In [3]: s1 == s2
Out[3]: True

In [4]: s1 is s2
Out[4]: False
</snippet></ROW><ROW><id>13457066</id><snippet>sorted</snippet></ROW><ROW><id>13457066</id><snippet>if ''.join(s2) == s1:
</snippet></ROW><ROW><id>13457066</id><snippet>if ''.join(sorted(s2)) == s1:
</snippet></ROW><ROW><id>13457344</id><snippet>if (v-&gt;ob_type == w-&gt;ob_type) {
    /* When comparing these pointers, they must be cast to
     * integer types (i.e. Py_uintptr_t, our spelling of C9X's
     * uintptr_t).  ANSI specifies that pointer compares other
     * than == and != to non-related structures are undefined.
     */
    Py_uintptr_t vv = (Py_uintptr_t)v;
    Py_uintptr_t ww = (Py_uintptr_t)w;
    return (vv &lt; ww) ? -1 : (vv &gt; ww) ? 1 : 0;
}
</snippet></ROW><ROW><id>13457344</id><snippet>id()</snippet></ROW><ROW><id>13457344</id><snippet>repr()</snippet></ROW><ROW><id>13457344</id><snippet>repr()</snippet></ROW><ROW><id>13457344</id><snippet>&lt;</snippet></ROW><ROW><id>13457344</id><snippet>&lt;=</snippet></ROW><ROW><id>13457344</id><snippet>&gt;=</snippet></ROW><ROW><id>13457344</id><snippet>&gt;</snippet></ROW><ROW><id>13457344</id><snippet>TypeError</snippet></ROW><ROW><id>13457344</id><snippet>&gt;&gt;&gt; class Foo(): pass
... 
&gt;&gt;&gt; Foo() &lt; Foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: Foo() &lt; Foo()
</snippet></ROW><ROW><id>13457436</id><snippet>cur.execute("""select * from table where sub_date %s '%s' order by sub_date asc limit %s""" % (oper, date, limit)) 
</snippet></ROW><ROW><id>13457566</id><snippet>char *</snippet></ROW><ROW><id>13457566</id><snippet>value</snippet></ROW><ROW><id>13457566</id><snippet>&gt;&gt;&gt; class Person(Structure): _fields_ = [("name", c_ubyte * 8), ('age', c_ubyte)]
... 
&gt;&gt;&gt; smith = Person((c_ubyte * 8)(*bytearray('Mr Smith')), 9)
&gt;&gt;&gt; smith.age
9
&gt;&gt;&gt; cast(smith.name, c_char_p).value
'Mr Smith\t'
</snippet></ROW><ROW><id>13457566</id><snippet>c_char_p</snippet></ROW><ROW><id>13457566</id><snippet>join</snippet></ROW><ROW><id>13457566</id><snippet>&gt;&gt;&gt; ''.join(map(chr, smith.name))
'Mr Smith'
</snippet></ROW><ROW><id>13457566</id><snippet>&gt;&gt;&gt; bytearray(smith.name)
bytearray(b'Mr Smith')
</snippet></ROW><ROW><id>13457566</id><snippet>&gt;&gt;&gt; smith = Person((c_ubyte * 8)(*b'Mr Smith'), 9)
&gt;&gt;&gt; bytes(smith.name).decode('ascii')
'Mr Smith'
</snippet></ROW><ROW><id>13457584</id><snippet>import Image, StringIO
from cairo import PDFSurface, Context, ImageSurface

pdf = PDFSurface("out.pdf", 1000, 1000)
cr = Context(pdf)
im = Image.open("/home/seif/Pictures/prw.jpg")
buffer = StringIO.StringIO()
im.save(buffer, format="PNG")
buffer.seek(0)
cr.save()
cr.set_source_surface(ImageSurface.create_from_png(buffer))
cr.paint()
</snippet></ROW><ROW><id>13457869</id><snippet>\d+</snippet></ROW><ROW><id>13457869</id><snippet>[^\d\s]+</snippet></ROW><ROW><id>13457869</id><snippet>&gt;&gt;&gt; string = '123ab4 5'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall('\d+|[^\d\s]+', string)
['123', 'ab', '4', '5']
</snippet></ROW><ROW><id>13457869</id><snippet>&gt;&gt;&gt; re.findall('\d+|\S', string)
['123', 'a', 'b', '4', '5']
</snippet></ROW><ROW><id>13458518</id><snippet>downloadMe.rst</snippet></ROW><ROW><id>13458518</id><snippet>make html</snippet></ROW><ROW><id>13458518</id><snippet>downloadMe.html</snippet></ROW><ROW><id>13458518</id><snippet>_build/html/static</snippet></ROW><ROW><id>13458518</id><snippet>sed</snippet></ROW><ROW><id>13458518</id><snippet>downloadMe.html</snippet></ROW><ROW><id>13458518</id><snippet>_build/html/_static</snippet></ROW><ROW><id>13458518</id><snippet>Makefile</snippet></ROW><ROW><id>13458518</id><snippet>html:
        @echo "Making LaTeX"
        make latex
        ( cd _build/latex/; make ) # the LaTeX needs to be built separately. This can be done in a subshell
        @echo "Done making LaTeX"
        @echo "Copying PDF to Static"
        cp _build/latex/Genetic.pdf _build/html/_static/
        @echo "Copy PDF to Static... DONE"
        @echo "Adding PDF to HTML"
        sed -i '' 's/lorem\ ipsum/\&lt;a href="_static\/Genetic.pdf"\&gt;Download\ Me\&lt;\/a\&gt;/g' _build/html/downloadPDF.html
        @echo "Done adding PDF to HTML"
        @echo "Removing LaTeX dir"
        rm -rf _build/latex
        @echo "Done removing LaTeX dir"

        $(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html
        @echo
        @echo "Build finished. The HTML pages are in $(BUILDDIR)/html."
</snippet></ROW><ROW><id>13458518</id><snippet>make html</snippet></ROW><ROW><id>13458518</id><snippet>make</snippet></ROW><ROW><id>13458531</id><snippet>FIN</snippet></ROW><ROW><id>13458635</id><snippet>import ahocorasick

# build a match structure
print 'init empty tree'
tree = ahocorasick.KeywordTree()

cur.execute('select distinct user_id from users')

print 'add usernames to tree'
for result in cur.fetchall():
   tree.add(str(result[0]))

print 'build fsa'
tree.make()

for line in f:
     scanned += 1
     if tree.search(line) != None:
         print "got one!"
</snippet></ROW><ROW><id>13458720</id><snippet>while</snippet></ROW><ROW><id>13458720</id><snippet>raw_input()</snippet></ROW><ROW><id>13458720</id><snippet>import random

while True:

    first_num = random.randint(1,500)
    second_num = random.randint(1,500)

    print (first_num)
    print (second_num)

    answer = int(input('Entrer la somme des deux nombres: '))

    if answer == first_num + second_num:
        print("It's correct!")
        break
    else:
        print("It's wrong!")
        tryAgain = raw_input('Try again? [(y)/n] ')
        if tryAgain.lower() == 'n':
            break
</snippet></ROW><ROW><id>13458885</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>13458885</id><snippet>Element</snippet></ROW><ROW><id>13458885</id><snippet>find</snippet></ROW><ROW><id>13458885</id><snippet>findall</snippet></ROW><ROW><id>13458885</id><snippet>findtext</snippet></ROW><ROW><id>13458885</id><snippet>xpath</snippet></ROW><ROW><id>13458885</id><snippet>clear()</snippet></ROW><ROW><id>13458885</id><snippet>for event, elem in context:
    for child in elem.findall(".//key"):
        # process child
    elem.clear()
    root.clear()
</snippet></ROW><ROW><id>13458896</id><snippet>with open("malenames.txt") as f:
   for line in f:
      print (line.split()[0])
</snippet></ROW><ROW><id>13459091</id><snippet>cycle</snippet></ROW><ROW><id>13459091</id><snippet>from itertools import cycle
li = range(1, n+1) + range(n, 0, -1) # e.g. [1, 2, 3, 4, 4, 3, 2, 1]
it = cycle(li)

[next(it) for _ in xrange(10)] # [1, 2, 3, 4, 4, 3, 2, 1, 1, 2]
</snippet></ROW><ROW><id>13459091</id><snippet>it = cycle(range(1, n+1) + range(n, 0, -1)) #e.g. [1, 2, 3, 4, 3, 2, 1, 2, 3, ...]
</snippet></ROW><ROW><id>13459453</id><snippet>awk '$NF != prev {print} {prev=$NF}'
</snippet></ROW><ROW><id>13459453</id><snippet>awk '{
    if (NF == 1) 
        value = $1
    else {
        key =  $1 SUBSEP $2 SUBSEP $3
        value = $4
    }
    if ((key SUBSEP value) in val) 
        next
    print
    val[key, value] = 1
}' input
</snippet></ROW><ROW><id>13459662</id><snippet>from module2 import *</snippet></ROW><ROW><id>13459662</id><snippet>module2</snippet></ROW><ROW><id>13459662</id><snippet>import module2 as m2</snippet></ROW><ROW><id>13459662</id><snippet>reload(m2)</snippet></ROW><ROW><id>13460087</id><snippet>if element.find('location') is not None:
  locations = [events.text for events in element.findall('location')]
</snippet></ROW><ROW><id>13460087</id><snippet>locations</snippet></ROW><ROW><id>13460087</id><snippet>tree = ElementTree.fromstring(myXML)
for node in tree.findall('.//project'):
  for element in node.findall('event'):
    event_name=element.attrib.get('name')
    print event_name
    if element.find('location') is not None:
      locations = [events.text for events in element.findall('location')]

print locations
</snippet></ROW><ROW><id>13460087</id><snippet>location</snippet></ROW><ROW><id>13460087</id><snippet>NameError</snippet></ROW><ROW><id>13460087</id><snippet>locations = []</snippet></ROW><ROW><id>13460142</id><snippet>locs, labels = plt.xticks()
</snippet></ROW><ROW><id>13460142</id><snippet>plt.xticks(locs, max_distance, size='small')
</snippet></ROW><ROW><id>13460142</id><snippet>import matplotlib.pyplot as plt

list_of_lists_of_lengths = [range(1000),range(500,2000)]
plt.subplot(1,1,1)    
plt.boxplot(list_of_lists_of_lengths)
plt.xlabel('max gap')
plt.ylabel('cluster lengths')
max_distance = (0, 100)
locs, labels = plt.xticks()
plt.xticks(locs, max_distance, size='small')
plt.show()
</snippet></ROW><ROW><id>13460282</id><snippet> /usr/lib/jvm/java-7-openjdk-i386/bin/java 
   -classpath /usr/local/lib/jython2.5.3/jython.jar:... 
   org.python.util.jython 
   -Dpython.path=... 
   myScript.py
</snippet></ROW><ROW><id>13460305</id><snippet>MLabObjectProxy</snippet></ROW><ROW><id>13460305</id><snippet>matlab_struct</snippet></ROW><ROW><id>13460305</id><snippet>matlab_struct.label</snippet></ROW><ROW><id>13460305</id><snippet># place matlab_struct into the Matlab workspace 
mlab._set('matlab_struct', matlab_struct) 
# convert the labels into a cell array
matlab_struct_labels = mlab.eval('{matlab_struct.labels}')
</snippet></ROW><ROW><id>13460305</id><snippet>mlab._set('variable_name', variable)</snippet></ROW><ROW><id>13460305</id><snippet>mlab.eval('command string')</snippet></ROW><ROW><id>13460305</id><snippet>mlab.get('variable_name')</snippet></ROW><ROW><id>13460383</id><snippet>xpath</snippet></ROW><ROW><id>13460383</id><snippet>import libxml2
data = """
&lt;bundles&gt;
  &lt;bundle&gt;
    &lt;bitstreams&gt;
      &lt;bitstream&gt;
        &lt;id&gt;1234&lt;/id&gt;
      &lt;/bitstream&gt;
    &lt;/bitstreams&gt;
    &lt;name&gt;FOO&lt;/name&gt;
  &lt;/bundle&gt;
&lt;/bundles&gt;
"""
doc = xmllib2.parseDoc(data)
for node in doc.xpathEval('/bundles/bundle/name[.="FOO"]/../bitstreams/bitstream/id'):
    print node
</snippet></ROW><ROW><id>13460383</id><snippet>lxml</snippet></ROW><ROW><id>13460383</id><snippet>data</snippet></ROW><ROW><id>13460383</id><snippet>from lxml import etree

bundles = etree.fromstring(data)

for node in bundles.xpath('bundle/name[.="FOO"]/../bitstreams/bitstream/id'):
    print(node.text)
</snippet></ROW><ROW><id>13460383</id><snippet>1234
</snippet></ROW><ROW><id>13460383</id><snippet>&lt;bitstreams&gt;</snippet></ROW><ROW><id>13460383</id><snippet>&lt;name&gt;</snippet></ROW><ROW><id>13460383</id><snippet>'bundle/name[.="FOO"]/preceding-sibling::bitstreams/bitstream/id'
</snippet></ROW><ROW><id>13460488</id><snippet>.cacheMinimize()</snippet></ROW><ROW><id>13460767</id><snippet>Xlib.Display.Window</snippet></ROW><ROW><id>13460767</id><snippet>d.create_resource_object("window", xid)</snippet></ROW><ROW><id>13460767</id><snippet>d</snippet></ROW><ROW><id>13460767</id><snippet>Xlib.display.Display</snippet></ROW><ROW><id>13460819</id><snippet>models.py</snippet></ROW><ROW><id>13460819</id><snippet>from django.contrib.auth.models import User

class UserProfile(models.Model):
    # This field is required.
    user = models.OneToOneField(User)

    # Other fields here
    accepted_eula = models.BooleanField()
    favorite_animal = models.CharField(max_length=20, default="Dragons.")
</snippet></ROW><ROW><id>13460819</id><snippet>UserProfile</snippet></ROW><ROW><id>13460819</id><snippet>AUTH_PROFILE_MODULE</snippet></ROW><ROW><id>13460819</id><snippet>settings.py</snippet></ROW><ROW><id>13460819</id><snippet>...
AUTH_PROFILE_MODULE = 'accounts.UserProfile'
...
</snippet></ROW><ROW><id>13460819</id><snippet>accounts</snippet></ROW><ROW><id>13460819</id><snippet>User</snippet></ROW><ROW><id>13460819</id><snippet>post_save</snippet></ROW><ROW><id>13460819</id><snippet>from django.contrib.auth.models import User

class UserProfile(models.Model):
    # This field is required.
    user = models.OneToOneField(User)

    # Other fields here
    accepted_eula = models.BooleanField()
    favorite_animal = models.CharField(max_length=20, default="Dragons.")


def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)

post_save.connect(create_user_profile, sender=User)
</snippet></ROW><ROW><id>13460819</id><snippet>User</snippet></ROW><ROW><id>13460819</id><snippet>def your_view(request):
    profile = request.user.get_profile()
    ...
    # Your code
</snippet></ROW><ROW><id>13460896</id><snippet>os.path.join("c:", "foo")</snippet></ROW><ROW><id>13460896</id><snippet>os.path.splitdrive</snippet></ROW><ROW><id>13460939</id><snippet>xdim,ydim = data.shape
k = 2
a, b = np.meshgrid(range(ydim),range(xdim))
mask = (b - a -k) &lt; 0

new_data = data[mask]

new_data2 = np.array(data) # to force a copy
new_data2[~mask] = 0
</snippet></ROW><ROW><id>13460939</id><snippet>new_data</snippet></ROW><ROW><id>13461165</id><snippet>new_list = [None]*nbr
</snippet></ROW><ROW><id>13461165</id><snippet>new_list = [ mutable_object_factory() for _ in range(nbr) ]
</snippet></ROW><ROW><id>13461288</id><snippet>args = (const_a, const_b, const_c)
ExternalLibrary.open(*args)
</snippet></ROW><ROW><id>13461288</id><snippet>*</snippet></ROW><ROW><id>13461288</id><snippet>**</snippet></ROW><ROW><id>13461288</id><snippet>kwargs = {'foo': 1, 'bar': 2}
func(**kwargs) # same as func(foo=1, bar=2)
</snippet></ROW><ROW><id>13461288</id><snippet>func(*args, **kwargs)</snippet></ROW><ROW><id>13461345</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; arr = np.array(img)
&gt;&gt;&gt; arr[arr &lt; 10] = 0
&gt;&gt;&gt; img.putdata(arr)
</snippet></ROW><ROW><id>13461345</id><snippet>&gt;&gt;&gt; arr[:arr.shape[0] / 2,:] = 0
</snippet></ROW><ROW><id>13461345</id><snippet>&gt;&gt;&gt; arr = np.ones((10,4,4)) # 10 all-white frames
&gt;&gt;&gt; arr[:,:2,:] = 0         # black out the top half of every frame
&gt;&gt;&gt; a
array([[[ 0.,  0.,  0.,  0.],
    [ 0.,  0.,  0.,  0.],
    [ 1.,  1.,  1.,  1.],
    [ 1.,  1.,  1.,  1.]],

   [[ 0.,  0.,  0.,  0.],
    [ 0.,  0.,  0.,  0.],
    [ 1.,  1.,  1.,  1.],
    [ 1.,  1.,  1.,  1.]],
...
</snippet></ROW><ROW><id>13461352</id><snippet>&gt;&gt;&gt; a = numpy.zeros( (5, 5) )
&gt;&gt;&gt; a[0,0] = numpy.NaN
&gt;&gt;&gt; a[3,3:5] = numpy.NaN
&gt;&gt;&gt; a
array([[ nan,   0.,   0.,   0.,   0.],
       [  0.,   0.,   0.,   0.,   0.],
       [  0.,   0.,   0.,   0.,   0.],
       [  0.,   0.,   0.,  nan,  nan],
       [  0.,   0.,   0.,   0.,   0.]])
&gt;&gt;&gt; labels, num_labels = scipy.ndimage.measurements.label ( numpy.isnan( a ) )
&gt;&gt;&gt; labels
array([[1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 0, 0, 2, 2],
       [0, 0, 0, 0, 0]])
&gt;&gt;&gt; num_labels
2
</snippet></ROW><ROW><id>13461391</id><snippet>def locked_iter(it):
    it = iter(it)
    lock = threading.Lock()
    while 1:
        try:
            with lock:
                value = it.next()
        except StopIteration:
            return
        yield value
</snippet></ROW><ROW><id>13461552</id><snippet>def interlock(s1, s2):

    r = 1
    l1 = list(s1)
    l2 = list(s2)
    inters = ''
    if len(s2) == len(s1):        
        for i in range(len(s1)):
            inters += s1[i]
            inters += s2[i]

    elif len(s1) &lt; len(s2):
        for i in range(len(s1)):
            inters += s2[i]
            inters += s1[i]
            r = i+1
        inters += s2[r]

    elif len(s2) &lt; len(s1):
        for i in range(len(s2)):
            inters += s1[i]
            inters += s2[i]
            r = i+1

        inters += s1[r]

    else:
        pass

    return inters


a = interlock('abalone','hammer')
print (a)
print (a[::2])
print (a[1::2])
a = interlock('hammer','abalone')
print (a)
print (a[::2])
print (a[1::2])
a = interlock('ab','siy')
print (a)
</snippet></ROW><ROW><id>13461552</id><snippet>str.join</snippet></ROW><ROW><id>13461651</id><snippet>os.path.commonprefix</snippet></ROW><ROW><id>13461651</id><snippet>titles = ['art gallery - museum and visits | expand knowledge',
 'lasergame - entertainment | expand knowledge',
 'coffee shop - confort and food | expand knowledge',
]

# Find the longest common suffix by reversing the strings and using a 
# library function to find the common "prefix".
common_suffix = os.path.commonprefix([title[::-1] for title in titles])[::-1]

# Strips all titles from the number of characters in the common suffix.
stripped_titles = [title[:-len(common_suffix)] for title in titles]
</snippet></ROW><ROW><id>13461669</id><snippet>app.add_url_rule</snippet></ROW><ROW><id>13461744</id><snippet>room_a2</snippet></ROW><ROW><id>13461744</id><snippet>object_room_a2</snippet></ROW><ROW><id>13462055</id><snippet>def mmatrix(rows, cols):
    return [[None for i in range(cols)] for j in range(rows)]
</snippet></ROW><ROW><id>13462055</id><snippet>test = mmatrix(3,3)
for row in test:
    print row
</snippet></ROW><ROW><id>13462244</id><snippet>DataFrame</snippet></ROW><ROW><id>13462244</id><snippet>DataFrame</snippet></ROW><ROW><id>13462244</id><snippet>DataFrame</snippet></ROW><ROW><id>13462244</id><snippet>Container</snippet></ROW><ROW><id>13462244</id><snippet>DataFrame</snippet></ROW><ROW><id>13462244</id><snippet>Series</snippet></ROW><ROW><id>13462244</id><snippet>Container.__getattr__</snippet></ROW><ROW><id>13462244</id><snippet>__getitem__</snippet></ROW><ROW><id>13462244</id><snippet>__setattr__</snippet></ROW><ROW><id>13462244</id><snippet>__setitem__</snippet></ROW><ROW><id>13462244</id><snippet>__iter__</snippet></ROW><ROW><id>13462244</id><snippet>__len__</snippet></ROW><ROW><id>13462244</id><snippet>DataFrames</snippet></ROW><ROW><id>13462244</id><snippet>Container</snippet></ROW><ROW><id>13462244</id><snippet>__getattr__</snippet></ROW><ROW><id>13462244</id><snippet>self.__dict__</snippet></ROW><ROW><id>13462244</id><snippet>if item in self.__dict__</snippet></ROW><ROW><id>13462244</id><snippet>__getattr__</snippet></ROW><ROW><id>13462244</id><snippet>self.contained.__getattr__(item)</snippet></ROW><ROW><id>13462244</id><snippet>self.contained</snippet></ROW><ROW><id>13462244</id><snippet>__getattr__</snippet></ROW><ROW><id>13462244</id><snippet>self.contained.__dict__</snippet></ROW><ROW><id>13462244</id><snippet>__dict__</snippet></ROW><ROW><id>13462244</id><snippet>self.contained.__class__</snippet></ROW><ROW><id>13462244</id><snippet>item</snippet></ROW><ROW><id>13462244</id><snippet>getattr(self.contained, item)</snippet></ROW><ROW><id>13462244</id><snippet>import pandas
import numpy as np

def tocontainer(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        return Container(result)
    return wrapper

class Container(object):
   def __init__(self, df):
       self.contained = df
   def __getitem__(self, item):
       result = self.contained[item]
       if isinstance(result, type(self.contained)):
           result = Container(result)
       return result
   def __getattr__(self, item):
       result = getattr(self.contained, item)
       if callable(result):
           result = tocontainer(result)
       return result
   def __repr__(self):
       return repr(self.contained)
</snippet></ROW><ROW><id>13462244</id><snippet>Container</snippet></ROW><ROW><id>13462244</id><snippet>DataFrame</snippet></ROW><ROW><id>13462244</id><snippet>Containers</snippet></ROW><ROW><id>13462244</id><snippet>df = pandas.DataFrame(
    [(1, 2), (1, 3), (1, 4), (2, 1),(2,2,)], columns=['col1', 'col2'])
df = Container(df)
df['col1'][3] = 0
print(df)
#    col1  col2
# 0     1     2
# 1     1     3
# 2     1     4
# 3     2     1
# 4     2     2
gp = df.groupby('col1').aggregate(np.count_nonzero)
print(gp)
#       col2
# col1      
# 1        3
# 2        2
print(type(gp))
# &lt;class '__main__.Container'&gt;

print(type(gp[gp.col2 &gt; 2]))
# &lt;class '__main__.Container'&gt;

tf = gp[gp.col2 &gt; 2].reset_index()
print(type(tf))
# &lt;class '__main__.Container'&gt;

result = df[df.col1 == tf.col1]
print(type(result))
# &lt;class '__main__.Container'&gt;
</snippet></ROW><ROW><id>13462321</id><snippet>^A</snippet></ROW><ROW><id>13462321</id><snippet>split('^A')</snippet></ROW><ROW><id>13462321</id><snippet>split('\u001')</snippet></ROW><ROW><id>13462321</id><snippet>split('\\u001')</snippet></ROW><ROW><id>13462321</id><snippet>\u001</snippet></ROW><ROW><id>13462321</id><snippet>^A</snippet></ROW><ROW><id>13462321</id><snippet>A</snippet></ROW><ROW><id>13462321</id><snippet>split('^A')</snippet></ROW><ROW><id>13462351</id><snippet>from flask import current_app

def test():
  return current_app.config.get('some_config_value')
</snippet></ROW><ROW><id>13462397</id><snippet>sum(d.values())
</snippet></ROW><ROW><id>13462397</id><snippet>True</snippet></ROW><ROW><id>13462397</id><snippet>False</snippet></ROW><ROW><id>13462397</id><snippet>len(d) - sum(d.values())</snippet></ROW><ROW><id>13462397</id><snippet>sum(1 for x in d.values() if some_condition(x))
</snippet></ROW><ROW><id>13462397</id><snippet>if x</snippet></ROW><ROW><id>13462397</id><snippet>if some_condition(x)</snippet></ROW><ROW><id>13462397</id><snippet>sum( x == chosen_value for x in d.values() )
</snippet></ROW><ROW><id>13462397</id><snippet>True + True == 2</snippet></ROW><ROW><id>13462450</id><snippet>from lib import noun</snippet></ROW><ROW><id>13462450</id><snippet>n = noun(id)</snippet></ROW><ROW><id>13462450</id><snippet>noun</snippet></ROW><ROW><id>13462450</id><snippet>from lib import noun
n = noun.noun(id)
</snippet></ROW><ROW><id>13462450</id><snippet>from lib.noun import noun
n = noun(id)
</snippet></ROW><ROW><id>13462450</id><snippet>noun</snippet></ROW><ROW><id>13462450</id><snippet>Noun</snippet></ROW><ROW><id>13462450</id><snippet>get_output</snippet></ROW><ROW><id>13462450</id><snippet>get_stem_used</snippet></ROW><ROW><id>13462450</id><snippet>wordBase</snippet></ROW><ROW><id>13462450</id><snippet>stemBase</snippet></ROW><ROW><id>13462450</id><snippet>if n.get_stem_used() == "Another value"</snippet></ROW><ROW><id>13462495</id><snippet>QFileDialog</snippet></ROW><ROW><id>13462495</id><snippet>getSaveFileName</snippet></ROW><ROW><id>13462495</id><snippet>True</snippet></ROW><ROW><id>13462632</id><snippet>re.findall</snippet></ROW><ROW><id>13462632</id><snippet>re.split</snippet></ROW><ROW><id>13462632</id><snippet>In [1]: import re

In [2]: s = "10.23, 10.13.21; 10.1 10.5 and 10.23.32"

In [3]: re.split(r'[^\d\.]+', s)
Out[3]: ['10.23', '10.13.21', '10.1', '10.5', '10.23.32']
</snippet></ROW><ROW><id>13462640</id><snippet>out_x</snippet></ROW><ROW><id>13462640</id><snippet>intent(out)</snippet></ROW><ROW><id>13462640</id><snippet>in_x</snippet></ROW><ROW><id>13462640</id><snippet>intent(in)</snippet></ROW><ROW><id>13462640</id><snippet>subroutine pow2(in_x, out_x)
  implicit none
  real, intent(in)   :: in_x
  !f2py real, intent(in) :: in_x
  real, intent(out)     :: out_x
  !f2py real, intent(out) :: out_x
  out_x = in_x ** 2
  return
end subroutine pow2
</snippet></ROW><ROW><id>13462640</id><snippet>f2py -m test -c test.f90
</snippet></ROW><ROW><id>13462640</id><snippet>&gt;&gt;&gt; import test
&gt;&gt;&gt; test.pow2(3)   #only need to pass intent(in) parameters :-)
9.0
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13462640</id><snippet>f2py</snippet></ROW><ROW><id>13462640</id><snippet>!f2py</snippet></ROW><ROW><id>13462640</id><snippet>!test2.f90
subroutine pow2(in_x, out_x)
  implicit none
  real, intent(in)   :: in_x
  real, intent(out)     :: out_x
  out_x = in_x ** 2
  return
end subroutine pow2
</snippet></ROW><ROW><id>13462640</id><snippet>f2py -m test2 -c test2.f90
</snippet></ROW><ROW><id>13462640</id><snippet>&gt;&gt;&gt; import test2
&gt;&gt;&gt; test2.pow2(3)   #only need to pass intent(in) parameters :-)
9.0
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13462677</id><snippet>public void setLocale(Locale locale, Instrumentation inst){
    Locale.setDefault(locale);
    Configuration config = new Configuration();
    config.locale = locale;
    inst.getTargetContext().getResources().updateConfiguration(config, inst.getTargetContext().getResources().getDisplayMetrics());
}
</snippet></ROW><ROW><id>13462677</id><snippet>class myThread (threading.Thread):
    def __init__(self, device):
        self.device = device
        threading.Thread.__init__(self)

    def run(self):
        packagename = "com.android.settings"
        classname = "com.android.settings.DisplaySettings"
        componentname = packagename + "/" + classname
        self.device.startActivity(component=componentname)
        maml.click(self.device, 1088, 300)
        MonkeyRunner.sleep(0.4)
        maml.click(self.device, 864, 361)
        MonkeyRunner.sleep(0.4)
        maml.click(self.device, 612, 621)
        MonkeyRunner.sleep(0.5)
        self.device.press('KEYCODE_HOME', 'DOWN_AND_UP')


def main():
    connected_devices = util.get_connected_devices()
    count = 0
    devices = []
    for deviceId in connected_devices:
        devices[count] = MonkeyRunner.waitForConnection(10.0, deviceId[0])
        count = count + 1
    for device in devices:
        thread = myThread(device)
        thread.start()


if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>13462940</id><snippet>QSqlRelationalTableModel</snippet></ROW><ROW><id>13462940</id><snippet>headerData</snippet></ROW><ROW><id>13462940</id><snippet>class MyModel(QtSql.QSqlRelationalTableModel):
    def headerData(self, section, orientation, role=QtCore.Qt.DisplayRole):
        if orientation == QtCore.Qt.Vertical:
            index = self.index(section, 0) # assuming ID is the first column
            return self.data(index, role)
        else:
            # return original headers for horizontal orientation
            return super(MyModel, self).headerData(section, orientation, role)
</snippet></ROW><ROW><id>13462940</id><snippet>QSqlRelationalTableModel</snippet></ROW><ROW><id>13462940</id><snippet>ID</snippet></ROW><ROW><id>13462940</id><snippet>QTableView</snippet></ROW><ROW><id>13462940</id><snippet>setColumnHidden</snippet></ROW><ROW><id>13462940</id><snippet>myTableView.setColumnHidden(0, True) # again assuming ID is the first column
</snippet></ROW><ROW><id>13463189</id><snippet>pycuda.driver.TextureReference.set_array()</snippet></ROW><ROW><id>13463189</id><snippet>cuTexRefSetArray</snippet></ROW><ROW><id>13463189</id><snippet>cudaBindTextureToArray</snippet></ROW><ROW><id>13463436</id><snippet>sorted(L, reverse=True)
</snippet></ROW><ROW><id>13463482</id><snippet>zip = zipfile.ZipFile('%s/%s.zip' % (temp_dir, now), 'w', zipfile.ZIP_DEFLATED)
</snippet></ROW><ROW><id>13463482</id><snippet>%</snippet></ROW><ROW><id>13463482</id><snippet>os.path.join</snippet></ROW><ROW><id>13463482</id><snippet>zip = zipfile.ZipFile(os.path.join(temp_dir, now+".zip"), 'w', zipfile.ZIP_DEFLATED)
</snippet></ROW><ROW><id>13463482</id><snippet>\</snippet></ROW><ROW><id>13463482</id><snippet>/</snippet></ROW><ROW><id>13463482</id><snippet>+</snippet></ROW><ROW><id>13463482</id><snippet>.zip</snippet></ROW><ROW><id>13463482</id><snippet>now</snippet></ROW><ROW><id>13463482</id><snippet>now+".zip"</snippet></ROW><ROW><id>13463564</id><snippet>__slots__</snippet></ROW><ROW><id>13463564</id><snippet>class Base(object):
    def __init__(self, *args, **kw):
        for k,v in zip(self.__slots__, args):
            setattr(self, k, v)

        for k,v in kw.items():
            setattr(self, k, v)

class ChildA(Base):
    __slots__ = 'a', 'b', 'c'

class ChildB(Base):
    __slots__ = 'x', 'y', 'z'
</snippet></ROW><ROW><id>13463564</id><snippet>def autoargs(l):
    self = l.pop('self')
    for k,v in l.items():
        setattr(self, k, v)

class Base(object):
    def __init__(self, a, b, c):
        autoargs(locals())
</snippet></ROW><ROW><id>13463634</id><snippet>print("6 Month Cost: %.2fUSD" % (cost * .6))
</snippet></ROW><ROW><id>13463634</id><snippet>decimal</snippet></ROW><ROW><id>13463634</id><snippet>from decimal import Decimal
def round_decimal(x):
  return x.quantize(Decimal(".01"), rounding=ROUND_HALF_UP)

cost = Decimal(input("Enter 12 month cost: "))
print("6 Month Cost: ", round_decimal(cost * Decimal(".6")))
</snippet></ROW><ROW><id>13463794</id><snippet>Data.Map</snippet></ROW><ROW><id>13464010</id><snippet>time.strftime('%Z')</snippet></ROW><ROW><id>13464010</id><snippet>tm_isdst=-1</snippet></ROW><ROW><id>13464010</id><snippet>&gt;&gt;&gt; time1 = time.strptime("2012-06-01 12:00:00", "%Y-%m-%d %H:%M:%S")
&gt;&gt;&gt; time1
time.struct_time(tm_year=2012, tm_mon=6, tm_mday=1, tm_hour=12, tm_min=0,
tm_sec=0, tm_wday=4, tm_yday=153, tm_isdst=-1)
</snippet></ROW><ROW><id>13464010</id><snippet>-1</snippet></ROW><ROW><id>13464010</id><snippet>time()</snippet></ROW><ROW><id>13464010</id><snippet>&gt;&gt;&gt; time.mktime([previous value]) # my timezone is US Eastern
1338566400.0
</snippet></ROW><ROW><id>13464010</id><snippet>&gt;&gt;&gt; time.localtime(1338566400).tm_isdst
1
</snippet></ROW><ROW><id>13464010</id><snippet>&gt;&gt;&gt; time.mktime((2012,6,1,12,0,0,-1,-1,-1))
1338566400.0
</snippet></ROW><ROW><id>13464150</id><snippet>itertools.product</snippet></ROW><ROW><id>13464194</id><snippet>def uniq(lst):
    last = object()
    for item in lst:
        if item == last:
            continue
        yield item
        last = item

def sort_and_deduplicate(l):
    return list(uniq(sorted(l, reverse=True)))
</snippet></ROW><ROW><id>13464253</id><snippet>dict.get</snippet></ROW><ROW><id>13464253</id><snippet>&gt;&gt;&gt; ub_tries = 20
&gt;&gt;&gt; tries_dict = {1:'first', 2:'second', 3:'third', 4:'fourth', ub_tries:'last'}
&gt;&gt;&gt; tries_dict.get(1, 'next')
'first'
&gt;&gt;&gt; tries_dict.get(4, 'next')
'fourth'
&gt;&gt;&gt; tries_dict.get(5, 'next')
'next'
&gt;&gt;&gt; tries_dict.get(20, 'next')
'last'
&gt;&gt;&gt; tries_dict.get(21, 'next')
'next'
</snippet></ROW><ROW><id>13464253</id><snippet>def name_try(try_number, ub_tries):
    tries_dict = {1:'first', 2:'second', 3:'third', 4:'fourth', ub_tries:'last'}
    return tries_dict.get(try_number, 'next')
</snippet></ROW><ROW><id>13464253</id><snippet>dict.get(key, default=None)</snippet></ROW><ROW><id>13464253</id><snippet>dict[key]</snippet></ROW><ROW><id>13464253</id><snippet>key</snippet></ROW><ROW><id>13464253</id><snippet>KeyError</snippet></ROW><ROW><id>13464253</id><snippet>default</snippet></ROW><ROW><id>13464253</id><snippet>xrange</snippet></ROW><ROW><id>13464253</id><snippet>range</snippet></ROW><ROW><id>13464253</id><snippet>d = { range(1, 5): '???', 
      range(5, ub_tries): 'next', 
      range(ub_tries, ub_tries + 1): 'last' }
</snippet></ROW><ROW><id>13464253</id><snippet>d[6]</snippet></ROW><ROW><id>13464253</id><snippet>KeyError</snippet></ROW><ROW><id>13464253</id><snippet>6</snippet></ROW><ROW><id>13464253</id><snippet>range(5, ub_tries)</snippet></ROW><ROW><id>13464253</id><snippet>RangeDictionary</snippet></ROW><ROW><id>13464253</id><snippet>class RangeDictionary(dict):
    def __getitem__(self, key):
        for r in self.keys():
            if key in r:
                return super().__getitem__(r)
        return super().__getitem__(key)
</snippet></ROW><ROW><id>13464253</id><snippet>&gt;&gt;&gt; ub_tries = 8
&gt;&gt;&gt; tries_dict = {1:'first', 2:'second', 3:'third', 4:'fourth', ub_tries:'last'}
&gt;&gt;&gt; tries_dict.update({i: 'next' for i in range(5, ub_tries)})
&gt;&gt;&gt; tries_dict
{1: 'first', 2: 'second', 3: 'third', 4: 'fourth', 5: 'next', 6: 'next', 7: 'next', 8: 'last'}
&gt;&gt;&gt; tries_dict[6]
'next'
</snippet></ROW><ROW><id>13464253</id><snippet>defaultdict</snippet></ROW><ROW><id>13464253</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; tries_dict = defaultdict(lambda: 'next', 
...                          {1:'first', 2:'second', 3:'third', 4:'fourth', ub_tries:'last'})
&gt;&gt;&gt; tries_dict
defaultdict(&lt;function &lt;lambda&gt; at 0x10272fef0&gt;, {8: 'last', 1: 'first', 2: 'second', 3: 'third', 4: 'fourth'})
&gt;&gt;&gt; tries_dict[5]
'next'
&gt;&gt;&gt; tries_dict
defaultdict(&lt;function &lt;lambda&gt; at 0x10272fef0&gt;, {1: 'first', 2: 'second', 3: 'third', 4: 'fourth', 5: 'next', 8: 'last'})
</snippet></ROW><ROW><id>13464431</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; (m, n) = (4, 5)
&gt;&gt;&gt; a = np.zeros((m, n))
&gt;&gt;&gt; a[2, 3] = 1.
&gt;&gt;&gt;
&gt;&gt;&gt; a_eq_1 = a == 1
&gt;&gt;&gt; repetitions = a_eq_1.sum(axis=0)
&gt;&gt;&gt; np.argmax(repetitions)
3
</snippet></ROW><ROW><id>13464431</id><snippet>&gt;&gt;&gt; np.argmax((a == 1).sum(axis=0))
3
</snippet></ROW><ROW><id>13464436</id><snippet>bucket = conn.get_bucket(bucket_name)
k = Key(bucket)
</snippet></ROW><ROW><id>13464518</id><snippet>/usr/lib/python</snippet></ROW><ROW><id>13464518</id><snippet>cd ~</snippet></ROW><ROW><id>13464518</id><snippet>src/</snippet></ROW><ROW><id>13464518</id><snippet>mkdir</snippet></ROW><ROW><id>13464518</id><snippet>mdkir src/lpthw</snippet></ROW><ROW><id>13464518</id><snippet>python &lt;path/to/py/file&gt;</snippet></ROW><ROW><id>13464518</id><snippet>cd ~/src/lpthw</snippet></ROW><ROW><id>13464600</id><snippet>os.remove(os.path.join(temp_dir, now + ".zip"))</snippet></ROW><ROW><id>13464600</id><snippet>create it
try:
    work with it
finally:
    remove it
</snippet></ROW><ROW><id>13464600</id><snippet>tempfile</snippet></ROW><ROW><id>13464600</id><snippet>import tempfile
with tempfile.NamedTemporaryFile(suffix='.zip') as t:
    z = zipfile.ZipFile(t.name, 'w') # re-create it
    do stuff with z
# after the with clause, the file is gone.
</snippet></ROW><ROW><id>13464600</id><snippet>os.remove(os.path.join(temp_dir, now+".zip"))</snippet></ROW><ROW><id>13464600</id><snippet>try:
    do_stuff
except VerySpecialException:
    os.remove(os.path.join(temp_dir, now+".zip")) # do that here for a special exception?
    raise # re-raise
except: # only use a bare except if you intend to re-raise
    os.remove(os.path.join(temp_dir, now+".zip")) # or here for all exceptions?
    raise # re-raise
else:
    os.remove(os.path.join(temp_dir, now+".zip")) # or here for success?
</snippet></ROW><ROW><id>13464655</id><snippet>if liquid in test_tube:
    test_tube[liquid] += milliliters
else: 
    test_tube[liquid] = milliliters
</snippet></ROW><ROW><id>13464655</id><snippet>test_tube[liquid] = test_tube.get(liquid, 0) + milliliters
</snippet></ROW><ROW><id>13464738</id><snippet>label_text_property</snippet></ROW><ROW><id>13464738</id><snippet>axes.label_text_property.font_family = 'courier'
axes.label_text_property.font_size = 10
</snippet></ROW><ROW><id>13464738</id><snippet>axes.title_text_property.font_family = 'times'
axes.title_text_property.font_size = 14
</snippet></ROW><ROW><id>13465005</id><snippet>    action = raw_input("&gt; ")

    if "sneak" in action:
        print "You throw a ninja star at a near by tree to distract the warlord,"
        print "you take out his legs, get him on the ground and have your blade to his neck"
        print "You take off his mask to stare into his eyes as he dies, and realise, it's your father."
        return 'the_choice'
    elif "assasinate" in action:
        print "You throw a ninja star at a near by tree to distract the warlord,"
        print "you take out his legs, get him on the ground and have your blade to his neck"
        print "You take off his mask to stare into his eyes as he dies, and realise, it's your father."
        return 'the_choice'
    elif "stealth" in action:
        print "You throw a ninja star at a near by tree to distract the warlord,"
        print "you take out his legs, get him on the ground and have your blade to his neck"
        print "You take off his mask to stare into his eyes as he dies, and realise, it's your father."
        return 'the_choice'
    else:
        print"...cmon, you're a ninja! you can't just attack!"
        print "STEALTH, SNEAK ATTACKS, ASSASINATIONS!"
        print "The gods decide that you have come too close to loose now."
        print "they give you another chance"
        return 'woods'
</snippet></ROW><ROW><id>13465044</id><snippet>samples = {:d}\\n</snippet></ROW><ROW><id>13465044</id><snippet>import re

def sampleRounder(match):
    return str(int(float(match.group(1)))) #base=10

s = "this is v = 2342.2\n and another v = 231.003\n and some stuff..."

print(re.sub("v = ([0-9]*\.[0-9]+|[0-9]+)\\n", sampleRounder, s))
</snippet></ROW><ROW><id>13465061</id><snippet>AttributeError: 'file' object has no attribute 'find'
</snippet></ROW><ROW><id>13465061</id><snippet>main()</snippet></ROW><ROW><id>13465061</id><snippet>open('results.xml', 'r')</snippet></ROW><ROW><id>13465061</id><snippet>getsanityresults</snippet></ROW><ROW><id>13465061</id><snippet>open(...)</snippet></ROW><ROW><id>13465061</id><snippet>getsanityresults</snippet></ROW><ROW><id>13465061</id><snippet>xmlfile</snippet></ROW><ROW><id>13465061</id><snippet>xmlfile</snippet></ROW><ROW><id>13465061</id><snippet>getsanityresults</snippet></ROW><ROW><id>13465061</id><snippet>xmlfile = open('results.xml', 'r')
contents = xmlfile.read() # &lt;-- this is a string
testresults = getsanityresults(contents) # &lt;-- feed a string into getsanityresults
# ... rest of code
</snippet></ROW><ROW><id>13465097</id><snippet>reLink = re.compile(r'.*\/boards\/916373-pc\/\d+$')
if reLink.match(link)
</snippet></ROW><ROW><id>13465097</id><snippet>reLink = re.compile(r'.*\/boards\/\d+-[^/]+\/\d+$')
if reLink.match(link)
</snippet></ROW><ROW><id>13465097</id><snippet>import re
reLink = re.compile(r'.*\/boards\/\d+-[^/]+\/\d+$')

def parse(self, response):
    hxs = HtmlXPathSelector(response)
    sites = hxs.select('//a')
    items = []
    for site in sites:
        link = site.select('a/@href').extract()
        if reLink.match(link)
            item = DmozItem()
            item['link'] = link
            item['desc'] = site.select('text()').extract()
            items.append(item)
    return items
</snippet></ROW><ROW><id>13465097</id><snippet>reLink = re.compile(r'.*\/boards\/(?P&lt;area&gt;\d+-[^/]+)\/(?P&lt;id&gt;\d+)$')
m = reLink.match(link)
if m:
    areaStr = m.groupdict()['area']
    idStr = m.groupdict()['id']
</snippet></ROW><ROW><id>13465097</id><snippet>isStr</snippet></ROW><ROW><id>13465097</id><snippet>idInt = int(idStr)
</snippet></ROW><ROW><id>13465278</id><snippet>In [42]: import numpy as np

In [43]: a = np.zeros((6,6), dtype=np.int) 
a[1:5, 1:5] = 1;
a[3,3] = 0;
a[2,2] = 2

In [48]: s = ndimage.generate_binary_structure(2,2) # Binary structure

In [49]: ndimage.convolve(a,s)
Out[49]: 
array([[1, 2, 3, 3, 2, 1],
       [2, 5, 7, 7, 4, 2],
       [3, 7, 9, 9, 5, 3],
       [3, 7, 9, 9, 5, 3],
       [2, 4, 5, 5, 3, 2],
       [1, 2, 3, 3, 2, 1]])
</snippet></ROW><ROW><id>13465278</id><snippet>log(a*b) = log(a)+log(b)</snippet></ROW><ROW><id>13465278</id><snippet>b</snippet></ROW><ROW><id>13465278</id><snippet>b = a[1:-1, 1:-1]
print(b)
# [[1 1 1 1]
#  [1 2 1 1]
#  [1 1 0 1]
#  [1 1 1 1]]
</snippet></ROW><ROW><id>13465278</id><snippet>print(np.exp(ndimage.convolve(np.log(b), s, mode = 'constant')))
# [[ 2.  2.  2.  1.]
#  [ 2.  0.  0.  0.]
#  [ 2.  0.  0.  0.]
#  [ 1.  0.  0.  0.]]
</snippet></ROW><ROW><id>13465278</id><snippet>b</snippet></ROW><ROW><id>13465278</id><snippet>b[0,1] = -1
print(b)
# [[ 1 -1  1  1]
#  [ 1  2  1  1]
#  [ 1  1  0  1]
#  [ 1  1  1  1]]
</snippet></ROW><ROW><id>13465278</id><snippet>logb = np.log(b.astype('complex'))
real, imag = logb.real, logb.imag
print(np.real_if_close(
    np.exp(
        sum(j * ndimage.convolve(x, s, mode = 'constant')
            for x,j in zip((real, imag),(1,1j))))))
# [[-2. -2. -2.  1.]
#  [-2. -0. -0.  0.]
#  [ 2.  0.  0.  0.]
#  [ 1.  0.  0.  0.]]
</snippet></ROW><ROW><id>13465508</id><snippet>line = re.sub(r'(http://[^\s]+)', r'&lt;a href&gt;\1&lt;/a&gt;', line)
</snippet></ROW><ROW><id>13465508</id><snippet>http://</snippet></ROW><ROW><id>13465508</id><snippet>line = re.sub(r'(http://[^\s]+|//[^\s]+|\\\\[^\s]+)', r'&lt;a href&gt;\1&lt;/a&gt;', line)
</snippet></ROW><ROW><id>13465508</id><snippet>&lt;a href&gt;http://foo/bar&lt;/a&gt;
</snippet></ROW><ROW><id>13465508</id><snippet>&lt;a href="http://foo/bar"&gt;http://foo/bar&lt;/a&gt;
</snippet></ROW><ROW><id>13465508</id><snippet>sub</snippet></ROW><ROW><id>13465508</id><snippet>r'&lt;a href="\1"&gt;\1&lt;/a&gt;'</snippet></ROW><ROW><id>13465508</id><snippet>index = 0
while index is not None:
    index = min(line.find(pattern, index) for pattern in ('http:', '//', '\\\\'))
    if index == -1:
        break
    space = line.find(' ', index)
    if space == -1:
        space = None
    line = line[:index] + '&lt;a href&gt;' + line[index:space] + '&lt;/a&gt;' + line[space:]
    index = space
</snippet></ROW><ROW><id>13465597</id><snippet>'/home/user/templates/'</snippet></ROW><ROW><id>13465597</id><snippet>user</snippet></ROW><ROW><id>13465597</id><snippet>index</snippet></ROW><ROW><id>13465597</id><snippet>rhpt</snippet></ROW><ROW><id>13465597</id><snippet>'/home/rhpt/templates/'</snippet></ROW><ROW><id>13465597</id><snippet>os.path.expanduser('~/templates/')</snippet></ROW><ROW><id>13465745</id><snippet>&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; d['a'] += 1
&gt;&gt;&gt; d
defaultdict(&lt;type 'int'&gt;, {'a': 1})
&gt;&gt;&gt; d.default_factory = None
&gt;&gt;&gt; d['b'] += 2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'b'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13465754</id><snippet>global</snippet></ROW><ROW><id>13465754</id><snippet>def MyFunc():
    l1 = ['my', 'first', 'list']
    l2 = ['another', 'list']
    return l1, l2

main_list, second_list = MyFunc()

print(main_list)
print(second_list)
</snippet></ROW><ROW><id>13465754</id><snippet>['my', 'first', 'list']
['another', 'list']
</snippet></ROW><ROW><id>13465754</id><snippet>global</snippet></ROW><ROW><id>13465754</id><snippet>main_list = []
second_list = []

def MyFunc():
    global main_list
    global second_list
    main_list = ['more', 'good', 'stuff']
    second_list = ['another', 'list']


MyFunc()

print(main_list) # ['more', 'good', 'stuff']
print(second_list) # ['another', 'list']
</snippet></ROW><ROW><id>13465764</id><snippet>return false;</snippet></ROW><ROW><id>13465764</id><snippet>.submit()</snippet></ROW><ROW><id>13465764</id><snippet>$(document).ready(function() {
       $("#test").submit(function(event){
            $.ajax({
                 type:"POST",
                 url:"/edit_favorites/",
                 data: {
                        'video': $('#test').val() // from form
                        },
                 success: function(){
                     $('#message').html("&lt;h2&gt;Contact Form Submitted!&lt;/h2&gt;") 
                 }
            });
            return false; //&lt;---- move it here
       });

});
</snippet></ROW><ROW><id>13465764</id><snippet>POST /edit_favorites/ HTTP/1.1" 403 2294</snippet></ROW><ROW><id>13465826</id><snippet>&gt;&gt;&gt; def f(x,y):
        solution = x+y
        return solution

&gt;&gt;&gt; f(2,2)
4
</snippet></ROW><ROW><id>13465836</id><snippet>ObjectId('502e232ca7919d27990001e4')</snippet></ROW><ROW><id>13465836</id><snippet>!=</snippet></ROW><ROW><id>13465836</id><snippet>class Obj:
    def __init__(self, value):
        self.value = value

print Obj(1234) == Obj(1234) # False
</snippet></ROW><ROW><id>13465836</id><snippet>class Obj:
    def __init__(self, value):
        self.value = value

    def __eq__(self, other):
        return self.value == other.value

print Obj(1234) == Obj(1234) # True
</snippet></ROW><ROW><id>13465836</id><snippet>class Obj:
    def __init__(self, value):
        self.value = value

print Obj(1234) == Obj(1234) # False

Obj.__eq__ = lambda a, b: a.value == b.value

print Obj(1234) == Obj(1234) # True
</snippet></ROW><ROW><id>13465836</id><snippet>print Obj(1234).value == Obj(1234).value
</snippet></ROW><ROW><id>13465984</id><snippet>    import xml.etree.ElementTree as ET
    tree = ET.parse(filename)
    root = tree.getroot()
    for child in root:  
      child.tag, child.attrib
</snippet></ROW><ROW><id>13465984</id><snippet>for child in root:</snippet></ROW><ROW><id>13466034</id><snippet>def main():

    print("Last, \tFirst")
    print

    name_list = get_names()
    print_list(name_list)
    new_file(name_list)
    search_list(name_list)

def get_names():
    # open the data file
    infile = open('names.txt', 'r')

    # read all the lines from the file
    name_list = infile.read().split('\n')

    #close the input file
    infile.close()

    #print data read into memory
    print(name_list)

    return(name_list)

#def print list
def print_list(name_list):
    #print the data
    for name in name_list:
        print (name)
    return(name)

#def new_file
def new_file(name_list):
    outfile = open('sorted_names.txt' ,'w')
    for item in name_list:
        outfile.write(item + '\n')

    outfile.close()

#def search_list
def search_list(name_list):
    again = 'Y'
    while again.upper()== 'Y':
        name = raw_input("What name would you like to look for? :")
        try:
            name_index = name_list.index(name)
            print (name), (" was found in the list at index point: "), name_index

        except ValueError as err:
            print (name), (" was not found in the list.")

            print ("Would you like to search for another name?")
            again = raw_input("Would you like to run the program again? [y/n]") == 'y'


# execute the main function
main()
</snippet></ROW><ROW><id>13466034</id><snippet>.split('\n')</snippet></ROW><ROW><id>13466087</id><snippet>heapq</snippet></ROW><ROW><id>13466087</id><snippet>heapq</snippet></ROW><ROW><id>13466087</id><snippet>heapq</snippet></ROW><ROW><id>13466087</id><snippet>list</snippet></ROW><ROW><id>13466087</id><snippet>&gt;&gt;&gt; I = (20,37,70,2,5778,543,667,17,43,34,776,230999,56,12,11,4,33,55677,4,3,2,2,1,2,3,4,5,6,7,8,9,0,9,8,7,6,5,4,4,3,22,)
&gt;&gt;&gt; import heapq
&gt;&gt;&gt; i = list(I)
&gt;&gt;&gt; heapq.heapify(i)
&gt;&gt;&gt; heapq.nlargest(10, i)
[230999, 55677, 5778, 776, 667, 543, 70, 56, 43, 37]
</snippet></ROW><ROW><id>13466087</id><snippet>I</snippet></ROW><ROW><id>13466087</id><snippet>I</snippet></ROW><ROW><id>13466087</id><snippet>&gt;&gt;&gt; i = list((j,i) for i,j in enumerate(I))
&gt;&gt;&gt; heapq.heapify(i)
&gt;&gt;&gt; heapq.nlargest(10, i)
[(230999, 11), (55677, 17), (5778, 4), (776, 10), (667, 6), (543, 5), (70, 2), (56, 12), (43, 8), (37, 1)]
</snippet></ROW><ROW><id>13466087</id><snippet>&gt;&gt;&gt; [idx for value, idx in heapq.nlargest(10, i)]
[11, 17, 4, 10, 6, 5, 2, 12, 8, 1]
</snippet></ROW><ROW><id>13466344</id><snippet>alpha</snippet></ROW><ROW><id>13466344</id><snippet>import time

def fade():
    DURATION = 2.0 # seconds
    start_time = time.clock()
    ratio = 0.0 # alpha as a float [0.0 .. 1.0]
    while ratio &lt; 1.0:
        current_time = time.clock()
        ratio = (current_time - start_time) / DURATION
        if ratio &gt; 1.0: # we're a bit late
            ratio = 1.0
        # all your drawing details go in the following call
        drawRectangle(coordinates, alpha = 255 * ratio)
        fpsClock.tick(FPS)
</snippet></ROW><ROW><id>13466344</id><snippet>tick</snippet></ROW><ROW><id>13466701</id><snippet>import mod_wsgi

process_group = mod_wsgi.process_group
</snippet></ROW><ROW><id>13467104</id><snippet>print</snippet></ROW><ROW><id>13467104</id><snippet>.lon</snippet></ROW><ROW><id>13467104</id><snippet>.lat</snippet></ROW><ROW><id>13467104</id><snippet>Observer</snippet></ROW><ROW><id>13467104</id><snippet>print observer.lon  #--&gt; -7005:32:16.0
print observer.lat  #--&gt;  2166:01:57.2
</snippet></ROW><ROW><id>13467104</id><snippet>float()</snippet></ROW><ROW><id>13467104</id><snippet>argv[3]</snippet></ROW><ROW><id>13467104</id><snippet>argv[4]</snippet></ROW><ROW><id>13467104</id><snippet>$ python tmp11.py 2012/11/16 20:34:56 -122.2697 37.8044 3.0
12:40:55.59
</snippet></ROW><ROW><id>13467375</id><snippet>zip</snippet></ROW><ROW><id>13467375</id><snippet>for d, field in zip(dat, new_fields):
    feature.SetField(field, d)
    layer.CreateFeature(feature)
</snippet></ROW><ROW><id>13467438</id><snippet>def exportMesh(filepath):

    # Only one mesh per scene
    objList = [object for object in bpy.context.scene.objects if object.type == 'MESH']

    if len(objList) == 0:
        return
    elif len(objList) &gt; 1:
        return
    #raise exepction? dialog box?


    # Process the single mesh object:
    mesh = objList[0]

    # File name is same as the mesh's name in Blender
    meshFilePath = filepath[0 : filepath.rindex('/') + 1] + mesh.name + ".mesh"
    file = open(meshFilePath, 'w')

    WorldTransform = Matrix().Identity(4)
    WorldTransform *= Matrix.Rotation(radians(90), 4, "X")
    file.write('World Transform:\n')
    for rcol in WorldTransform_T.row:
        file.write('{:9f} {:9f} {:9f} {:9f}\n'.format(row[0], row[1], row[2], row[3]))
    file.write('\n')

    # Mesh (local) transform matrix
    file.write('Mesh Transform:\n')
    localTransform_T = mesh.matrix_local.copy()
    localTransform_T.transpose()
    for row in localTransform_T.row:
        file.write('{:9f} {:9f} {:9f} {:9f}\n'.format(row[0], row[1], row[2], row[3]))
    file.write('\n')

    vertexAttributeList = []
    for triangle in mesh.data.polygons:
        vertices = list(triangle.vertices)
        i = 0
        for vertex in vertices:
            vertexAttribute = list(mesh.data.vertices[vertex].co)

            if triangle.use_smooth:
                vertexAttribute.extend(list(mesh.data.vertices[vertex].normal))
            else:
                vertexAttribute.extend(list(triangle.normal))

            for uv_layer in mesh.data.uv_layers:
                uvCoord = uv_layer.data[triangle.loop_indices[i]].uv
                vertexAttribute.extend([uvCoord[0], 1 - uvCoord[1]])

            totalVertexWeight = 0
            jointWeights = [group.weight for group in mesh.data.vertices[vertex].groups]
            jointIndices = [group.group for group in mesh.data.vertices[vertex].groups]
            for weight in jointWeights:
                totalVertexWeight += weight

            vgNum = len(mesh.vertex_groups)
            jointWeightsAttribute = []
            jointIndicesAttribute = []
            for vgIndex in range(4):
                if vgIndex &lt; len(jointIndices):
                    jointWeightsAttribute.append(jointWeights[vgIndex] / totalVertexWeight)
                    jointIndicesAttribute.append(jointIndices[vgIndex])
                else:
                    jointWeightsAttribute.append(0)
                    jointIndicesAttribute.append(0)

            vertexAttribute.extend(jointWeightsAttribute)
            vertexAttribute.extend(jointIndicesAttribute)

            vertexAttributeList.append(vertexAttribute)
            i += 1

    # VBO
    vNum = len(vertexAttributeList)
    tNum = len(mesh.data.uv_layers)
    file.write('VBO Length: {:d}\n'.format(vNum))
    for vertexAttribute in vertexAttributeList:
        file.write('{:9f} {:9f} {:9f} {:9f} {:9f} {:9f} {:9f} {:9f} {:9f} {:9f} {:9f} {:9f} {:d} {:d} {:d} {:d}\n'.format(vertexAttribute[0],
                                                                                                                          vertexAttribute[1],
                                                                                                                          vertexAttribute[2],
                                                                                                                          vertexAttribute[3],
                                                                                                                          vertexAttribute[4],
                                                                                                                          vertexAttribute[5],
                                                                                                                          vertexAttribute[6],
                                                                                                                          vertexAttribute[7],
                                                                                                                          vertexAttribute[8],
                                                                                                                          vertexAttribute[9],
                                                                                                                          vertexAttribute[10],
                                                                                                                          vertexAttribute[11],
                                                                                                                          vertexAttribute[12],
                                                                                                                          vertexAttribute[13],
                                                                                                                          vertexAttribute[14],
                                                                                                                          vertexAttribute[15]))
    file.write('\n')


    # Done writing mesh file
    file.close()
</snippet></ROW><ROW><id>13467640</id><snippet>import datetime
myhour= '4'
mytime= datetime.time( hour= int(myhour) )
</snippet></ROW><ROW><id>13467880</id><snippet>wrapper</snippet></ROW><ROW><id>13467880</id><snippet>login_required</snippet></ROW><ROW><id>13467880</id><snippet>return wrapper</snippet></ROW><ROW><id>13467880</id><snippet>wrapper</snippet></ROW><ROW><id>13468161</id><snippet>datetime.datetime.strptime(a, '%Y-%m-%d').date()       # 8.87us

datetime.date(*map(int, a.split('-')))                 # 1.28us
</snippet></ROW><ROW><id>13468161</id><snippet>datetime.date(int(a[:4]), int(a[5:7]), int(a[8:10]))   # 1.06us
</snippet></ROW><ROW><id>13468275</id><snippet>dict</snippet></ROW><ROW><id>13468275</id><snippet>set</snippet></ROW><ROW><id>13468490</id><snippet>In [101]: d = {"one":1, "two":2, "a":1}

In [102]: answer = collections.defaultdict(list)

In [103]: for k,v in d.iteritems():
   .....:     answer[v].append(k)

   .....:     

In [104]: answer
Out[104]: defaultdict(&lt;type 'list'&gt;, {1: ['a', 'one'], 2: ['two']})

In [105]: dict(answer)
Out[105]: {1: ['a', 'one'], 2: ['two']}

In [106]: dict((k, tuple(v)) for k,v in answer.iteritems())
Out[106]: {1: ('a', 'one'), 2: ('two',)}
</snippet></ROW><ROW><id>13468490</id><snippet>In [110]: d
Out[110]: {'a': 1, 'one': 1, 'two': 2}

In [111]: dict((v, tuple([key for key in d if d[key]==v])) for k,v in d.iteritems())
Out[111]: {1: ('a', 'one'), 2: ('two',)}
</snippet></ROW><ROW><id>13468640</id><snippet>cur.execute(stmt, v)
</snippet></ROW><ROW><id>13468640</id><snippet>cur.execute(stmt % v)
</snippet></ROW><ROW><id>13468640</id><snippet>"INSERT INTO tab (col1, col2) VALUES (%s, %s)"
</snippet></ROW><ROW><id>13468640</id><snippet>('val1', 'val2')</snippet></ROW><ROW><id>13468640</id><snippet>%</snippet></ROW><ROW><id>13468640</id><snippet>"INSERT INTO tab (col1, col2) VALUES (val1, val2)"
</snippet></ROW><ROW><id>13468640</id><snippet>cur.execute(stmt, v)
</snippet></ROW><ROW><id>13468640</id><snippet>"INSERT INTO tab (col1, col2) VALUES ('val1', 'val2')"
</snippet></ROW><ROW><id>13468640</id><snippet>print cur.mogrify(stmt, v)
</snippet></ROW><ROW><id>13468913</id><snippet>from pyvirtualdisplay import Display
from selenium import webdriver
display = Display(visible=0, size=(1024, 768))
display.start()
browser = webdriver.Chrome()
</snippet></ROW><ROW><id>13469005</id><snippet>request_with_cookies = Request(url="http://www.example.com",
                           cookies={'currency': 'USD', 'country': 'UY'})
</snippet></ROW><ROW><id>13469111</id><snippet>twitter = OAuth1Service(
    name='twitter',
    consumer_key='YOUR_CONSUMER_KEY',
    consumer_secret='YOUR_CONSUMER_SECRET',
    request_token_url='https://api.twitter.com/oauth/request_token',
    access_token_url='https://api.twitter.com/oauth/access_token',
    authorize_url='https://api.twitter.com/oauth/authorize',
    header_auth=True)

params = {'include_rts': 1,  # Include retweets
          'count': 10}       # 10 tweets

response = twitter.get('https://api.twitter.com/1/statuses/home_timeline.json',
                       params=params,
                       access_token=access_token,
                       access_token_secret=access_token_secret,
                       header_auth=True)
</snippet></ROW><ROW><id>13469279</id><snippet>first = {'x':1, 'y':100, 'foo':'bar'}
second = dict(first, x=2, y=200) # {'y': 200, 'x': 2, 'foo': 'bar'}
</snippet></ROW><ROW><id>13469279</id><snippet>dict</snippet></ROW><ROW><id>13469393</id><snippet>idkt</snippet></ROW><ROW><id>13469393</id><snippet>'None'</snippet></ROW><ROW><id>13469393</id><snippet>idkt = str(row[2]).strip()
</snippet></ROW><ROW><id>13469393</id><snippet>row[2]</snippet></ROW><ROW><id>13469393</id><snippet>None</snippet></ROW><ROW><id>13469393</id><snippet>'None'</snippet></ROW><ROW><id>13469393</id><snippet>str</snippet></ROW><ROW><id>13469393</id><snippet>if idkt == 'None': print 'yay!'
</snippet></ROW><ROW><id>13469393</id><snippet>idkt = str(row[2]).strip() if row[2] else None
</snippet></ROW><ROW><id>13469933</id><snippet>&gt;&gt;&gt; import codecs
&gt;&gt;&gt; codecs.BOM_UTF32
b'\xff\xfe\x00\x00'
</snippet></ROW><ROW><id>13469933</id><snippet>&gt;&gt;&gt; codecs.BOM_UTF32_LE
b'\xff\xfe\x00\x00'
&gt;&gt;&gt; codecs.BOM_UTF32_BE
b'\x00\x00\xfe\xff'
</snippet></ROW><ROW><id>13469933</id><snippet>&gt;&gt;&gt; codecs.BOM_UTF16
b'\xff\xfe'
&gt;&gt;&gt; codecs.BOM_UTF16_LE
b'\xff\xfe'
&gt;&gt;&gt; codecs.BOM_UTF16_BE
b'\xfe\xff'
</snippet></ROW><ROW><id>13470067</id><snippet>FluentHandler</snippet></ROW><ROW><id>13470067</id><snippet>NotSet</snippet></ROW><ROW><id>13470067</id><snippet>NotSet</snippet></ROW><ROW><id>13470067</id><snippet>def get_fluentd_logger(name):
    import logging
    from fluent import handler

    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger(name)
    logger.level = logging.INFO
    handler = handler.FluentHandler(name, host='localhost', port=24224)
    handler.level = logging.INFO
    logger.addHandler(handler)
    return logger
</snippet></ROW><ROW><id>13470705</id><snippet>&gt;&gt;&gt; sorted(['1999-01-30__10-30', '2012-10-10__11-22', '2011-01-30__22-11'])
['1999-01-30__10-30', '2011-01-30__22-11', '2012-10-10__11-22']
</snippet></ROW><ROW><id>13471670</id><snippet>x = np.sort(np.hstack((orig, extra)))
</snippet></ROW><ROW><id>13471670</id><snippet>hstack()</snippet></ROW><ROW><id>13471670</id><snippet>sort()</snippet></ROW><ROW><id>13471753</id><snippet>boolobject.c</snippet></ROW><ROW><id>13471753</id><snippet>PyTypeObject PyBool_Type = {
    ...stuff...

    bool_repr,                                  /* tp_repr */

    ...stuff...

    bool_repr,                                  /* tp_str */
</snippet></ROW><ROW><id>13471753</id><snippet>float_repr</snippet></ROW><ROW><id>13471753</id><snippet>float_str</snippet></ROW><ROW><id>13471753</id><snippet>sys.float_repr_style</snippet></ROW><ROW><id>13471787</id><snippet>lst = foo.split("|")
lst[0]
lst[1]
...
</snippet></ROW><ROW><id>13471946</id><snippet>dc:</snippet></ROW><ROW><id>13471946</id><snippet>dc</snippet></ROW><ROW><id>13471946</id><snippet>DCNS = 'http://purl.org/dc/elements/1.1/'
creator = article_node.xpath('.//{{{0}}}creator'.format(DCNS))
</snippet></ROW><ROW><id>13471946</id><snippet>http://purl.org/dc/elements/1.1/</snippet></ROW><ROW><id>13471946</id><snippet>.nsmap</snippet></ROW><ROW><id>13471946</id><snippet>.nsmap</snippet></ROW><ROW><id>13471946</id><snippet>{'dc': 'http://purl.org/dc/elements/1.1/'}
</snippet></ROW><ROW><id>13471946</id><snippet>creator = article_node.xpath('.//{{{0}}}creator'.format(article_node.nsmap['dc']))
</snippet></ROW><ROW><id>13471946</id><snippet>nsmap</snippet></ROW><ROW><id>13471946</id><snippet>xpath()</snippet></ROW><ROW><id>13471946</id><snippet>namespaces</snippet></ROW><ROW><id>13471946</id><snippet>creator = article_node.xpath('.//dc:creator', namespaces=article_node.nsmap)
</snippet></ROW><ROW><id>13471986</id><snippet>dben.put(bytes(3, "iso8859-1"),bytes(2, "iso8859-1"))

&gt;&gt;&gt; dben.exists(bytes(2, "iso8859-1"))
False
&gt;&gt;&gt; dben.exists(bytes(3, "iso8859-1"))
True 
</snippet></ROW><ROW><id>13471986</id><snippet>bytes(1, "iso8859-1")</snippet></ROW><ROW><id>13472006</id><snippet>eval()</snippet></ROW><ROW><id>13472006</id><snippet>&gt;&gt;&gt; eval("a + b", {"a": 2, "b": 3})
5
</snippet></ROW><ROW><id>13472006</id><snippet>self.__dict__</snippet></ROW><ROW><id>13472006</id><snippet>&gt;&gt;&gt; class MyClass(object):
...     def __init__(self):
...             self.a = 2
...             self.b = 3
... 
&gt;&gt;&gt; obj = MyClass()
&gt;&gt;&gt; obj.__dict__
{'a': 2, 'b': 3}
&gt;&gt;&gt; eval("a + b", obj.__dict__)
5
</snippet></ROW><ROW><id>13472006</id><snippet>__dict__</snippet></ROW><ROW><id>13472077</id><snippet>python2.7 setup.py build</snippet></ROW><ROW><id>13472186</id><snippet>frozenset</snippet></ROW><ROW><id>13472186</id><snippet>hash</snippet></ROW><ROW><id>13472186</id><snippet>x = hash(frozenset([a, b]))
</snippet></ROW><ROW><id>13472191</id><snippet>PhotoImage</snippet></ROW><ROW><id>13472191</id><snippet>GIF</snippet></ROW><ROW><id>13472191</id><snippet>PGM</snippet></ROW><ROW><id>13472191</id><snippet>PPM</snippet></ROW><ROW><id>13472191</id><snippet>base64</snippet></ROW><ROW><id>13472191</id><snippet>import pygame
from PIL import Image
import ImageTk
import Tkinter

# load image in pygame
pygame.init()
surf = pygame.image.load('bridge.png')

# export as string / import to PIL
image_str = pygame.image.tostring(surf, 'RGB')         # use 'RGB' to export
w, h      = surf.get_rect()[2:]
image     = Image.fromstring('RGB', (w, h), image_str) # use 'RGB' to import

# create Tk window/widgets
root         = Tkinter.Tk()
tkimage      = ImageTk.PhotoImage(image) # use ImageTk.PhotoImage class instead
canvas       = Tkinter.Canvas(root)

canvas.create_image(0, 0, image=tkimage)
canvas.pack()
root.mainloop()
</snippet></ROW><ROW><id>13472276</id><snippet>NgramModel</snippet></ROW><ROW><id>13472276</id><snippet>from nltk.model.ngram import NgramModel
</snippet></ROW><ROW><id>13472940</id><snippet>import csv

records = []
reader = csv.reader(open('source.csv', 'rb'))

for record in reader:
    print record
    records.append(record)
</snippet></ROW><ROW><id>13473174</id><snippet>import pickle 
import numpy
</snippet></ROW><ROW><id>13473174</id><snippet>outfile1 = open(r'C:\pythontmp\numpyArray.pkl', 'w+b')
pickle.dump(numpyArray.tolist(), outfile1)
outfile1.close()
</snippet></ROW><ROW><id>13473174</id><snippet>infile1 = open(r'C:\pythontmp\numpyArray.pkl', 'r+b')
file1 = pickle.load(infile1)                           # This is a list
infile1.close()

numpyArray = numpy.array(file1)                        # This is a numpy array
</snippet></ROW><ROW><id>13473225</id><snippet> cv.DrawContours(image3,contourmov,cv.CV_RGB(0,255,0),cv.CV_RGB(0,255,0),1,cv.CV_FILLED) 
</snippet></ROW><ROW><id>13473229</id><snippet>use strict "vars";
use strict "refs";
use strict "subs";
use warnings;
</snippet></ROW><ROW><id>13473229</id><snippet>use strict "vars"</snippet></ROW><ROW><id>13473229</id><snippet>strict</snippet></ROW><ROW><id>13473229</id><snippet>$ perl -c -e 'use strict "vars"; $foo = 1'
Global symbol "$foo" requires explicit package name at -e line 1.
-e had compilation errors.

$ perl -c -e 'no strict "vars"; $foo = 1'
-e syntax OK
</snippet></ROW><ROW><id>13473229</id><snippet>use strict "refs"</snippet></ROW><ROW><id>13473229</id><snippet>$ perl -e 'use strict "refs"; ${"message"} = "hello"; print $message'
Can't use string ("message") as a SCALAR ref while "strict refs" in use at -e line 1.

$ perl -e 'no strict "refs"; ${"message"} = "hello"; print $message'
hello
</snippet></ROW><ROW><id>13473229</id><snippet>use strict "subs"</snippet></ROW><ROW><id>13473229</id><snippet>$ perl -c -e 'use strict "subs"; foo'
Bareword "foo" not allowed while "strict subs" in use at -e line 1.
-e had compilation errors.

$ perl -c -e 'no strict "subs"; foo'
-e syntax OK
</snippet></ROW><ROW><id>13473229</id><snippet>use warnings</snippet></ROW><ROW><id>13473229</id><snippet>$ perl -e 'use warnings; my $u; print 2 + $u'
Use of uninitialized value $u in addition (+) at -e line 1.
2

$ perl -e 'no warnings; my $u; print 2 + $u'
2
</snippet></ROW><ROW><id>13473229</id><snippet>__future__</snippet></ROW><ROW><id>13473229</id><snippet>__future__</snippet></ROW><ROW><id>13473229</id><snippet>use strict;
use warnings;

my $total;

$total += count_things($_) for @list;

{
   no warnings 'uninitialised';
   printf "The total is %d\n", $total;
}
</snippet></ROW><ROW><id>13473229</id><snippet>no warnings 'uninitialised'</snippet></ROW><ROW><id>13473229</id><snippet>printf</snippet></ROW><ROW><id>13473229</id><snippet>use strict</snippet></ROW><ROW><id>13473229</id><snippet>use warnings</snippet></ROW><ROW><id>13473270</id><snippet>school_records = db.school.find()
for i in school_records:
    for teacher in i['teachers']:
        db.individual.insert(teacher)
</snippet></ROW><ROW><id>13473318</id><snippet>from datetime import datetime
from pytz import timezone

fmt = "%Y-%m-%d %H:%M:%S"

# Current time in UTC
now_utc = datetime.now(timezone('UTC'))
print now_utc.strftime(fmt)

# Convert to US/Pacific time zone
now_pacific = now_utc.astimezone(timezone('US/Pacific'))
print now_pacific.strftime(fmt)

# Convert to Europe/Berlin time zone
now_berlin = now_pacific.astimezone(timezone('Europe/Berlin'))
print now_berlin.strftime(fmt)
</snippet></ROW><ROW><id>13473598</id><snippet>def p(xs1, xs2):
    if not empty(tail(xs1)):
        xs2 = p(tail(xs1), xs2)
    return xs2 + [head(xs1)]

def p05(xs):
    return p(xs, [])
</snippet></ROW><ROW><id>13473598</id><snippet>head()</snippet></ROW><ROW><id>13473598</id><snippet>def head(xs):
    return xs[:1]

def tail(xs):
    return xs[1:]
</snippet></ROW><ROW><id>13473598</id><snippet>[]</snippet></ROW><ROW><id>13473598</id><snippet>False</snippet></ROW><ROW><id>13473598</id><snippet>p()</snippet></ROW><ROW><id>13473598</id><snippet>def p(xs1, xs2):
    if tail(xs1):
        xs2 = p(tail(xs1), xs2)
    return xs2 + head(xs1)
</snippet></ROW><ROW><id>13473598</id><snippet>&gt;&gt;&gt; p(range(5), [])
[4, 3, 2, 1, 0]
</snippet></ROW><ROW><id>13473649</id><snippet>from flask import Flask
app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello World!"

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>13473649</id><snippet>jinja</snippet></ROW><ROW><id>13473649</id><snippet>mako</snippet></ROW><ROW><id>13473657</id><snippet>virtualenv -p PYTHON_EXE VIRTUALENV_DIR</snippet></ROW><ROW><id>13473657</id><snippet>source VIRTUALENV_DIR/bin/activate</snippet></ROW><ROW><id>13473657</id><snippet>pip</snippet></ROW><ROW><id>13473740</id><snippet>import difflib

def diff_indices(a, b):
    sm = difflib.SequenceMatcher(a=a, b=b)
    res = []
    for tag, i1, i2, j1, j2 in sm.get_opcodes():
        if tag == 'replace':
            res.append([range(i1,i2), range(j1,j2)])
    return res

print diff_indices(
    a="node1 ip up ether 40  46 server low".split(),
    b="node1 ip &lt;down&gt; ether &lt;number(s)&gt; server &lt;status&gt;".split())
#[[[2], [2]], [[4, 5], [4]], [[7], [6]]]
print diff_indices(
    a=' label 0 12000 '.split(),
    b=' label  &lt;number&gt;  &lt;number&gt;'.split())
#[[[1, 2], [1, 2]]]
</snippet></ROW><ROW><id>13473740</id><snippet>a = "node1 ip up ether 40  46 server low".split()
b = "node1 ip &lt;down&gt; ether server &lt;status&gt;".split()
</snippet></ROW><ROW><id>13473800</id><snippet>request.POST['video']</snippet></ROW><ROW><id>13473841</id><snippet>from config import *
</snippet></ROW><ROW><id>13473841</id><snippet>from config import foo, bar, baz
</snippet></ROW><ROW><id>13473841</id><snippet>import config
...
x = config.foo
</snippet></ROW><ROW><id>13473841</id><snippet>from ... import config
</snippet></ROW><ROW><id>13474140</id><snippet>u'</snippet></ROW><ROW><id>13474140</id><snippet>{}</snippet></ROW><ROW><id>13474140</id><snippet>{u}'</snippet></ROW><ROW><id>13474140</id><snippet>&gt;&gt;&gt; some_function(a=1, b=2) == {'id': '123', 'name': 'abc'}
True
</snippet></ROW><ROW><id>13474140</id><snippet>u'abþ'</snippet></ROW><ROW><id>13474140</id><snippet>2to3</snippet></ROW><ROW><id>13474594</id><snippet>import pexpect
def fun():
    #import pexpect you've already imported pexpect you don't need to import it again 
    fail = pexpect.spawn('touch /tmp/no.txt')
    fail.wait()

fun()
succeed = pexpect.spawn('touch /tmp/yes.txt')
succeed.wait()
</snippet></ROW><ROW><id>13475196</id><snippet>M_D1 = {" foo bar ":1, " a bc":2, " ":3}
</snippet></ROW><ROW><id>13475270</id><snippet>In [42]: lst = [[1, 2], [3, 4], [1, 2], [5, 6], [8, 3], [2, 7]]

In [43]: sublst = [[1, 2], [8, 3]]

In [44]: [x for x in lst if x not in sublst]
Out[44]: [[3, 4], [5, 6], [2, 7]]
</snippet></ROW><ROW><id>13475270</id><snippet>filter()</snippet></ROW><ROW><id>13475270</id><snippet>In [45]: filter(lambda x:x not in sublst,lst)
Out[45]: [[3, 4], [5, 6], [2, 7]]
</snippet></ROW><ROW><id>13475740</id><snippet>data = sorted(rand(10))
new_data = rand(5)
pvals = searchsorted(data,new_data)*1./len(data)
print pvals
#array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])
</snippet></ROW><ROW><id>13475925</id><snippet>s = pd.read_csv('test', header=None, index_col=0, parse_dates=True)
d = s.groupby(lambda x: x.date()).aggregate(lambda x: sum(x) if len(x) &gt;= 40 else np.nan)

             X.2
2012-01-01  1128
</snippet></ROW><ROW><id>13476036</id><snippet>def test1():
    print("test1")

def test2():
    print("test2")

def caller(name, fn):
    print("calling function with name: {}".format(name))
    fn()

class Driver(object):
    def __init__(self):

        self.signals = []

    def connect_to_signal(self, name, what_to_call):
        self.signals.append((name, what_to_call))

    def run(self):
        for name, signal in self.signals:
            signal(1)



def main():
    signals = {'test1':test1, 'test2':test2}

    d = Driver()

    for signal, callback in signals.items():
        cb = lambda x: caller(signal, callback)
        #cb = lambda x,s=signal,c=callback: caller(s, c)  # TRY THIS INSTEAD!
        d.connect_to_signal(signal, cb)

    d.run()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13476036</id><snippet>calling function with name: test2
test2
calling function with name: test2
test2
</snippet></ROW><ROW><id>13476036</id><snippet>calling function with name: test1
test1
calling function with name: test2
test2
</snippet></ROW><ROW><id>13476036</id><snippet>capture</snippet></ROW><ROW><id>13476103</id><snippet>type(instance_with_descriptor_attr).descriptor_attr
</snippet></ROW><ROW><id>13476103</id><snippet>&gt;&gt;&gt; class Foo():
...     @property
...     def bar(self): return 'bar'
... 
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.bar
'bar'
&gt;&gt;&gt; type(foo).bar
&lt;property object at 0x109f24310&gt;
</snippet></ROW><ROW><id>13476478</id><snippet>concert</snippet></ROW><ROW><id>13476478</id><snippet>@property
def as_child_class(self):
    """Casts this object to its subclass, if possible"""

    if hasattr(self, 'concert'):
        return self.concert
    elif hasattr(self, 'party'):
        return self.party
    else:
        return self
</snippet></ROW><ROW><id>13476478</id><snippet>for event in Event.objects.all()
    event.as_child_class.do_specific_stuff()
</snippet></ROW><ROW><id>13476575</id><snippet>bounds = array([[0, 50], [0, 200]], dtype=float)</snippet></ROW><ROW><id>13476623</id><snippet>import subprocess
sp = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE)
output, _ = sp.communicate()
print "Status:", sp.wait()
print "Output:"
print output
</snippet></ROW><ROW><id>13476844</id><snippet>numpy</snippet></ROW><ROW><id>13476844</id><snippet>ctypes</snippet></ROW><ROW><id>13476844</id><snippet>(a+b).ctypes.data_as(ctypes.c_void_p)</snippet></ROW><ROW><id>13476844</id><snippet>(a+b)</snippet></ROW><ROW><id>13476844</id><snippet>c=a+b</snippet></ROW><ROW><id>13476844</id><snippet>ct=(a+b).ctypes</snippet></ROW><ROW><id>13476844</id><snippet>ct</snippet></ROW><ROW><id>13476844</id><snippet>ct</snippet></ROW><ROW><id>13477017</id><snippet>grep -f file1.txt file2.txt
</snippet></ROW><ROW><id>13477077</id><snippet>animation</snippet></ROW><ROW><id>13477077</id><snippet>from matplotlib import animation

fig = figure()
N = 10
r = random.randint(-100,100,2*N).reshape(N,2)
line, = plt.plot(r[:,0], r[:,1],'o')


lag_len = 10
history_x = np.zeros((N,lag_len))
history_y = np.zeros((N,lag_len))
trails = [plot(hx,hy)[0] for hx,hy in zip(history_x,history_y)]

def update_frame(i):
    frame_num = i
    newdatax = r[:,0] + random.rand(N)
    newdatay = r[:,1] + random.rand(N)
    line.set_ydata(newdatay)
    line.set_xdata(newdatax)
    history_x[:,frame_num%lag_len] = newdatax
    history_y[:,frame_num%lag_len] = newdatay
    for hx,hy,ln_h in zip(history_x,history_y,trails):
         ln_h.set_xdata(hx)
         ln_h.set_ydata(hy)

    plt.title("At timestep: %d" %i)
    plt.hold(True)
    return (line,) + tuple(trails)

anim = animation.FuncAnimation(fig, update_frame, 
                           frames=100, interval=20)
</snippet></ROW><ROW><id>13477077</id><snippet>FuncAnimation</snippet></ROW></DATA>