<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>11222361</id><snippet>list.index</snippet></ROW><ROW><id>11222361</id><snippet>&gt;&gt;&gt; data = [[1, .45, 0], [2, .49, 2], [3, .98, 0], [4, .82, 1],
            [5, .77, 1], [6, .98, 2]]
&gt;&gt;&gt; List_1 = [2, 0, 1]
&gt;&gt;&gt; sorted(data, key=lambda e: (List_1.index(e[2]), -e[1]))
[[6, 0.98, 2], [2, 0.49, 2], [3, 0.98, 0], [1, 0.45, 0],
 [4, 0.82, 1], [5, 0.77, 1]]
</snippet></ROW><ROW><id>11222799</id><snippet>self.update</snippet></ROW><ROW><id>11222799</id><snippet>self.update</snippet></ROW><ROW><id>11222799</id><snippet>__init__()</snippet></ROW><ROW><id>11222799</id><snippet>pyglet.clock.schedule_interval(func = self.update, interval = 1/60.)
</snippet></ROW><ROW><id>11222835</id><snippet>class Reference:
    def __init__(self, val):
        self._value = val # just refers to val, no copy

    def get(self):
        return self._value

    def set(self, val):
        self._value = val
</snippet></ROW><ROW><id>11222835</id><snippet>Reference</snippet></ROW><ROW><id>11222835</id><snippet>.get()</snippet></ROW><ROW><id>11222835</id><snippet>.set()</snippet></ROW><ROW><id>11222835</id><snippet>[0]</snippet></ROW><ROW><id>11223017</id><snippet>i = 0
def foo ():
    global i
    i += 1
    print i
    try :
        foo()
    except RuntimeError :
        # This call recursively goes off toward infinity, apparently.
        foo()
    finally:
        i -= 1
        print i

foo()
</snippet></ROW><ROW><id>11223017</id><snippet>RuntimeError</snippet></ROW><ROW><id>11223017</id><snippet>foo()</snippet></ROW><ROW><id>11223017</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>11223017</id><snippet>foo()</snippet></ROW><ROW><id>11223017</id><snippet>try ... except</snippet></ROW><ROW><id>11223017</id><snippet>sys.setrecursionlimit(3)</snippet></ROW><ROW><id>11223017</id><snippet>$ python test.py
1
2
1
2
1
0
Traceback (most recent call last):
  File "test.py", line 19, in &lt;module&gt;
    foo()
  File "test.py", line 14, in foo
    foo()
  File "test.py", line 14, in foo
    foo()
RuntimeError
</snippet></ROW><ROW><id>11223190</id><snippet>conn.execute(RAW_SQL).execution_options(autocommit=True))
</snippet></ROW><ROW><id>11223190</id><snippet>t = conn.begin()
try:
    conn.execute(RAW_SQL)
    t.commit()
except:
    t.rollback()
</snippet></ROW><ROW><id>11223369</id><snippet>driver.find_element[s]</snippet></ROW><ROW><id>11223369</id><snippet>driver.find_element</snippet></ROW><ROW><id>11223369</id><snippet>driver.find_elements_by_link_text</snippet></ROW><ROW><id>11223456</id><snippet>def makeA(d, default=0):
    """Converts a dictionary to a list. Pads with a default element

    Examples:

    &gt;&gt;&gt; makeA({0: 1, 2: 1, 4: 2, 6: 1, 9: 1})
    [1, 0, 1, 0, 2, 0, 1, 0, 0, 1]

    &gt;&gt;&gt; makeA({3: 'kos'},'')
    ['', '', '', 'kos']

    """
    maxElem = max(d)
    return [d.get(x, default) for x in range(maxElem+1)]
</snippet></ROW><ROW><id>11223456</id><snippet>dict</snippet></ROW><ROW><id>11223456</id><snippet>0 .. maxElem</snippet></ROW><ROW><id>11223456</id><snippet>d</snippet></ROW><ROW><id>11224373</id><snippet>myString = r'''_  __     _ _           _         ____            _               _                 
 | |/ /__ _| | | __ _  __| | __ _  |  _ \ __ _  ___| | ____ _  __ _(_)_ __   __ _ ___ 
 | ' // _` | | |/ _` |/ _` |/ _` | | |_) / _` |/ __| |/ / _` |/ _` | | '_ \ / _` / __|
 | . \ (_| | | | (_| | (_| | (_| | |  __/ (_| | (__|   &lt; (_| | (_| | | | | | (_| \__ \
 |_|\_\__,_|_|_|\__,_|\__,_|\__,_| |_|   \__,_|\___|_|\_\__,_|\__, |_|_| |_|\__, |___/
                                                          |___/         |___/'''
# note the r before the string starts
</snippet></ROW><ROW><id>11224373</id><snippet>print '\tHello, world!'</snippet></ROW><ROW><id>11224373</id><snippet>print r'\tHello, World!'</snippet></ROW><ROW><id>11224767</id><snippet>&gt;&gt;&gt; from SortedCollection import SortedCollection
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; s = SortedCollection(key=itemgetter(0))
&gt;&gt;&gt; s.insert((1,2,'a'))
&gt;&gt;&gt; s.insert((10,20,'b'))
&gt;&gt;&gt; s.insert((20,30,'c'))
&gt;&gt;&gt; s.find_le(10)
(10, 20, 'b')
</snippet></ROW><ROW><id>11225056</id><snippet>from datetime import timedelta
import datetime

hinfo = [['C148', 'W29', '08 August 2001'], ['Q964', 'R72', '21 May 2003']]

for i, h in enumerate(hinfo):
    if h[2] == '': # error checking
        del hinfo[i]
        continue
    d = datetime.datetime.strptime(h[2], '%d %B %Y')
    d += timedelta(days=14)
    h.append(d.strftime('%d %B %Y'))

print hinfo
</snippet></ROW><ROW><id>11225056</id><snippet>[['C148', 'W29', '08 August 2001', '22 August 2001'], ['Q964', 'R72', '21 May 20
03', '04 June 2003']]</snippet></ROW><ROW><id>11225231</id><snippet>"DataLoad"</snippet></ROW><ROW><id>11225786</id><snippet>UserResource</snippet></ROW><ROW><id>11225786</id><snippet>class UserResource(ModelResource):
   class Meta:
       queryset = User.objects.all()
       resource_name = 'user'
       excludes = ['id','email', 'password', 'is_active', 'is_staff', 'is_superuser']
       list_allowed_methods = ['post']
       detail_allowed_methods = ['get']
       default_format = "application/json"
       filtering = {
           'username': ALL,
       }
       authorization= Authorization()

def obj_create(self, bundle, request = None, **kwargs):
    bundle.obj = self._meta.object_class()
    for key, value in kwargs.items():
        setattr(bundle.obj, key, value)
    bundle = self.full_hydrate(bundle)

    self.is_valid(bundle,request)

    if bundle.errors:
        self.error_response(bundle.errors, request)

    # Save FKs just in case.
    self.save_related(bundle)

    obj = None
    try:
        obj = self.obj_get(request, username=bundle.obj.username) # here it checks withe username is already exists or not
    except self._meta.object_class.DoesNotExist:
        pass

    # if user already found then just build the bundle else it will create the new user
    if obj:
        bundle = self.build_bundle(obj=obj, request=request)
    else:
        # Save parent
        bundle.obj.save()
        # Now pick up the M2M bits.
        m2m_bundle = self.hydrate_m2m(bundle)
        self.save_m2m(m2m_bundle)

    return bundle
</snippet></ROW><ROW><id>11225790</id><snippet>set.update()</snippet></ROW><ROW><id>11225790</id><snippet>set.union()</snippet></ROW><ROW><id>11225790</id><snippet>objs = [list-of-objects]
used = set()
for obj in objs:
    used.update(obj.callSomeFunc(used))
</snippet></ROW><ROW><id>11225790</id><snippet>reduce()</snippet></ROW><ROW><id>11225790</id><snippet>reduce()</snippet></ROW><ROW><id>11225790</id><snippet>used = reduce(lambda used, obj: used.union(obj.callSomeFunc(used)), objs, set())
</snippet></ROW><ROW><id>11225917</id><snippet>getLogger()</snippet></ROW><ROW><id>11225917</id><snippet>info()</snippet></ROW><ROW><id>11226095</id><snippet>find_element_by*</snippet></ROW><ROW><id>11226095</id><snippet>selenium.webdriver.support.ui.WebDriverWait</snippet></ROW><ROW><id>11226298</id><snippet>&gt;&gt;&gt; yaml.dump({'foo': u'τί ἐστίν; 統一碼!!! ✢✪✺'})
'{foo: "\\u03C4\\u1F77 \\u1F10\\u03C3\\u03C4\\u1F77\\u03BD; \\u7D71\\u4E00\\u78BC!!! \\u2722\\u272A\\\n    \\u273A"}\n'
</snippet></ROW><ROW><id>11226298</id><snippet>&gt;&gt;&gt; json.dumps({'foo': u'τί ἐστίν; 統一碼!!! ✢✪✺'})
'{"foo": "\\u03c4\\u1f77 \\u1f10\\u03c3\\u03c4\\u1f77\\u03bd; \\u7d71\\u4e00\\u78bc!!! \\u2722\\u272a\\u273a"}'
</snippet></ROW><ROW><id>11226397</id><snippet>python -c $'import subprocess\nwhile True: subprocess.call(["ls"])'
</snippet></ROW><ROW><id>11226397</id><snippet>$'...'</snippet></ROW><ROW><id>11226397</id><snippet>\n</snippet></ROW><ROW><id>11226656</id><snippet>class Item(Base):
    __tablename__ =  "item"

    id = Column(Integer, primary_key=True)
    name = Column(String(255), nullable=False)

    # relationships
    related = relationship('Item', 
            secondary = t_links,
            primaryjoin = (id == t_links.c.from_id),
            secondaryjoin = (id == t_links.c.to_id),
    )

_OTHER_SIDE = set()
from sqlalchemy import event
def Item_related_append_listener(target, value, initiator):
    global _OTHER_SIDE
    if not((target, value) in _OTHER_SIDE):
        _OTHER_SIDE.add((value, target))
        if not target in value.related:
            value.related.append(target)
    else:
        _OTHER_SIDE.remove((target, value))

event.listen(Item.related, 'append', Item_related_append_listener)

# ...
a = Item()
b = Item()
a.related.append(b)
assert a in b.related # True
</snippet></ROW><ROW><id>11226687</id><snippet>tornado.gen</snippet></ROW><ROW><id>11226687</id><snippet>@tornado.web.asynchronous
@gen.engine
def get(self):
    ...
    response = yield gen.Task(some_async_call(...))
    ...
    response = yield gen.Task(some_async_call(...))
    ...
    response = yield gen.Task(some_async_call(...))
    ...
    self.write(something)
    self.finish()
</snippet></ROW><ROW><id>11226716</id><snippet>&gt;&gt;&gt;help(hash)
    Help on built-in function hash in module builtins:

    hash(...)
        hash(object) -&gt; integer

        Return a hash value for the object.  Two objects with the same value have
        the same hash value.  The reverse is not necessarily true, but likely.
</snippet></ROW><ROW><id>11226805</id><snippet>myString = "Hi im Natsume, check out my site http://www.mysite.com/"
&gt;&gt;&gt; a = re.search("(?P&lt;url&gt;https?://[^\s]+)", myString) or re.search("(?P&lt;url&gt;www[^\s]+)", myString)
&gt;&gt;&gt; a.group("url")
'http://www.mysite.com/'
&gt;&gt;&gt; myString = "Hi im Natsume, check out my site www.mysite.com/"
&gt;&gt;&gt; a = re.search("(?P&lt;url&gt;https?://[^\s]+)", myString) or re.search("(?P&lt;url&gt;www[^\s]+)", myString)
&gt;&gt;&gt; a.group("url")
'www.mysite.com/'
</snippet></ROW><ROW><id>11227055</id><snippet>echo -n "test" | openssl md5 -sign privkey.pem &gt; sig_openssel
</snippet></ROW><ROW><id>11227055</id><snippet>-n</snippet></ROW><ROW><id>11227055</id><snippet>import M2Crypto
import hashlib
rsa = M2Crypto.RSA.load_key("privkey.pem")
digest = hashlib.new('md5', 'test').digest()
open("sig_m2crypto", "w").write(rsa.sign(digest, "md5"))
</snippet></ROW><ROW><id>11227055</id><snippet>openssl rsautl -inkey privkey.pem -verify -in sig_m2crypto -asn1parse
</snippet></ROW><ROW><id>11227055</id><snippet>openssl rsautl -inkey privkey.pem -verify -in sig_m2crypto -raw -hexdump
</snippet></ROW><ROW><id>11227055</id><snippet>openssl rsautl -sign ...</snippet></ROW><ROW><id>11227253</id><snippet>text=StringVar</snippet></ROW><ROW><id>11227253</id><snippet>StringVar</snippet></ROW><ROW><id>11227253</id><snippet>StringVar</snippet></ROW><ROW><id>11227253</id><snippet>StringVar</snippet></ROW><ROW><id>11227253</id><snippet>tkinter</snippet></ROW><ROW><id>11227253</id><snippet>stringvar</snippet></ROW><ROW><id>11227304</id><snippet>def get_element_by_tag(element, tag):
    if element.tag.endswith(tag):
        yield element
    for child in element:
        for g in get_element_by_tag(child, tag):
            yield g
</snippet></ROW><ROW><id>11227304</id><snippet>tag</snippet></ROW><ROW><id>11227304</id><snippet>for item in get_element_by_tag(elemettree, 'technicalContact'):
    ...
</snippet></ROW><ROW><id>11227304</id><snippet>&gt;&gt;&gt; xml_str = """&lt;root xmlns="http://www.example.com"&gt;
... &lt;technicalContact&gt;Test1&lt;/technicalContact&gt;
... &lt;technicalContact&gt;Test2&lt;/technicalContact&gt;
... &lt;/root&gt;
... """

xml_etree = etree.fromstring(xml_str)

&gt;&gt;&gt; for item in get_element_by_tag(xml_etree, 'technicalContact')
...     print item.tag, item.text
... 
{http://www.example.com}technicalContact Test1
{http://www.example.com}technicalContact Test2
</snippet></ROW><ROW><id>11227878</id><snippet>.rstrip('0').rstrip('.')</snippet></ROW><ROW><id>11227878</id><snippet>&gt;&gt;&gt; s = str(Decimal('2.5') * 10)
&gt;&gt;&gt; print s.rstrip('0').rstrip('.') if '.' in s else s
25
&gt;&gt;&gt; s = str(Decimal('2.5678') * 1000)
&gt;&gt;&gt; print s.rstrip('0').rstrip('.') if '.' in s else s
2567.8
</snippet></ROW><ROW><id>11227878</id><snippet>&gt;&gt;&gt; s = str(Decimal('1500'))
&gt;&gt;&gt; print s.rstrip('0').rstrip('.') if '.' in s else s
1500
</snippet></ROW><ROW><id>11228033</id><snippet>diskutil(8)</snippet></ROW><ROW><id>11228033</id><snippet>hdiutil(1)</snippet></ROW><ROW><id>11228128</id><snippet>.split('\t')</snippet></ROW><ROW><id>11228128</id><snippet>[:4]</snippet></ROW><ROW><id>11228128</id><snippet>'\t'.join</snippet></ROW><ROW><id>11228128</id><snippet>for line in infile:
     columns = line.split('\t')
     columns = columns[:4]
     outfile.write('\t'.join(columns))
</snippet></ROW><ROW><id>11228128</id><snippet>for line in infile:
     outfile.write('\t'.join(line.split('\t')[:4]))
</snippet></ROW><ROW><id>11228246</id><snippet>handle = subprocess.Popen(...)</snippet></ROW><ROW><id>11228246</id><snippet>handle.wait()</snippet></ROW><ROW><id>11228246</id><snippet>returncode</snippet></ROW><ROW><id>11228246</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call("kill -ABRT $$", shell=True)
-6
&gt;&gt;&gt; a = subprocess.Popen("kill -ABRT $$", shell=True)
&gt;&gt;&gt; a.wait()
-6
&gt;&gt;&gt; subprocess.call("kill -SEGV $$", shell=True)
-11
</snippet></ROW><ROW><id>11228246</id><snippet>#include &lt;assert.h&gt;

int main() {
    assert(0);
}
</snippet></ROW><ROW><id>11228246</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call(["./ass"])
ass: ass.c:4: main: Assertion `0' failed.
-6
</snippet></ROW><ROW><id>11228413</id><snippet>    ffmpeg_command = ["avconv", "-i", self.absolute_path]
    p = Popen(ffmpeg_command, stdout=PIPE, stderr=PIPE)
    stdout, stderr = p.communicate()
</snippet></ROW><ROW><id>11228706</id><snippet>img-ipv6.flixcart.com</snippet></ROW><ROW><id>11228706</id><snippet>2001:df0:23e:9002::17</snippet></ROW><ROW><id>11228865</id><snippet>ln -s -T /opt/appname/main.py /usr/bin/appname.py
</snippet></ROW><ROW><id>11228969</id><snippet>mysql -u username -ppassword
</snippet></ROW><ROW><id>11228969</id><snippet>db=MySQLdb.connect(host="localhost",user="youruser",passwd="yourpwd",db="yourdb")
db.query("select * from your_table")
result = db.store_result()
rows = []
for row in result.fetch_row(0):
    rows.append(row)
</snippet></ROW><ROW><id>11228998</id><snippet>for row in square:
    if len(row) != len(square):
        return False
</snippet></ROW><ROW><id>11228998</id><snippet>if not all(len(square) == len(row) for row in square): return False
</snippet></ROW><ROW><id>11229060</id><snippet>mount</snippet></ROW><ROW><id>11229060</id><snippet>/mnt/usb1/</snippet></ROW><ROW><id>11229060</id><snippet>mount /dev/sdb1 /mnt/usb1 -o noauto,users,rw,umask=0
</snippet></ROW><ROW><id>11229116</id><snippet>d = { "a":4, "c":3, "b":12 }
d_view = [ (v,k) for k,v in d.iteritems() ]
d_view.sort(reverse=True) # natively sort tuples by first element
for v,k in d_view:
    print "%s: %d" % (k,v)
</snippet></ROW><ROW><id>11229116</id><snippet>b: 12
a: 4
c: 3
</snippet></ROW><ROW><id>11229116</id><snippet>sorted( ((v,k) for k,v in d.iteritems()), reverse=True)
</snippet></ROW><ROW><id>11229116</id><snippet>[(12, 'b'), (4, 'a'), (3, 'c')]
</snippet></ROW><ROW><id>11229427</id><snippet>setuptools</snippet></ROW><ROW><id>11229427</id><snippet>distribute</snippet></ROW><ROW><id>11229427</id><snippet>easy_install</snippet></ROW><ROW><id>11229427</id><snippet>-Z</snippet></ROW><ROW><id>11229427</id><snippet>python setup.py easy_install -Z
</snippet></ROW><ROW><id>11229696</id><snippet>requests</snippet></ROW><ROW><id>11229696</id><snippet>pprint</snippet></ROW><ROW><id>11229696</id><snippet>json</snippet></ROW><ROW><id>11229696</id><snippet>import requests, json
from pprint import pprint as pp2

#----------------------------------------------------------------------
def login(username, password):
    """logs into reddit, saves cookie"""

    print 'begin log in'
    #username and password
    UP = {'user': username, 'passwd': password, 'api_type': 'json',}
    headers = {'user-agent': '/u/STACKOVERFLOW\'s API python bot', }

    #POST with user/pwd
    client = requests.session()
    r = client.post('http://www.reddit.com/api/login', data=UP)

    #if you want to see what you've got so far
    #print r.text
    #print r.cookies

    #gets and saves the modhash
    j = json.loads(r.text)
    client.modhash = j['json']['data']['modhash']
    print '{USER}\'s modhash is: {mh}'.format(USER=username, mh=client.modhash)

    #pp2(j)

    return client


client = login(USER, PASSWORD)

#mod mail url
url = r'http://www.reddit.com/r/mod/about/message/inbox/'
r = client.get(url)

#here's the HTML of the page
pp2(r.text)
</snippet></ROW><ROW><id>11229971</id><snippet>mouse_event</snippet></ROW><ROW><id>11229971</id><snippet>MOUSE_LEFTDOWN = 0x0002     # left button down 
MOUSE_LEFTUP = 0x0004       # left button up 
MOUSE_RIGHTDOWN = 0x0008    # right button down 
MOUSE_RIGHTUP = 0x0010      # right button up 
MOUSE_MIDDLEDOWN = 0x0020   # middle button down 
MOUSE_MIDDLEUP = 0x0040     # middle button up 
</snippet></ROW><ROW><id>11229971</id><snippet>MOUSE_LEFTDOWN</snippet></ROW><ROW><id>11229971</id><snippet>MOUSE_LEFTUP</snippet></ROW><ROW><id>11229971</id><snippet>MOUSE_RIGHTDOWN</snippet></ROW><ROW><id>11229971</id><snippet>MOUSE_RIGHTUP</snippet></ROW><ROW><id>11230427</id><snippet>Thing</snippet></ROW><ROW><id>11230427</id><snippet>thing.py</snippet></ROW><ROW><id>11230427</id><snippet>game.py</snippet></ROW><ROW><id>11230427</id><snippet>levels.py</snippet></ROW><ROW><id>11230427</id><snippet>from thing import Thing</snippet></ROW><ROW><id>11231200</id><snippet>&gt;&gt;&gt; a = [(1,2)] * 4
&gt;&gt;&gt; [t[0] for t in a]
[1, 1, 1, 1]
</snippet></ROW><ROW><id>11231200</id><snippet>&gt;&gt;&gt; [first for first,second in a]
[1, 1, 1, 1]
</snippet></ROW><ROW><id>11231200</id><snippet>map</snippet></ROW><ROW><id>11231200</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>11231200</id><snippet>list</snippet></ROW><ROW><id>11231200</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; map(operator.itemgetter(0), a)
&lt;map object at 0x7f3971029290&gt;
&gt;&gt;&gt; list(map(operator.itemgetter(0), a))
[1, 1, 1, 1]
</snippet></ROW><ROW><id>11231241</id><snippet>protovis/protovis.js</snippet></ROW><ROW><id>11231241</id><snippet>&lt;script type="text/javascript" src="protovis/protovis.js"&gt;&lt;/script&gt;</snippet></ROW><ROW><id>11231241</id><snippet>SimpleHTTPRequestHandler</snippet></ROW><ROW><id>11231241</id><snippet>do_GET()</snippet></ROW><ROW><id>11231241</id><snippet>protovis/protovis.js</snippet></ROW><ROW><id>11231241</id><snippet>self.path</snippet></ROW><ROW><id>11231241</id><snippet>protovis/protovis.js</snippet></ROW><ROW><id>11231344</id><snippet>mkstemp()</snippet></ROW><ROW><id>11231344</id><snippet>os.open())</snippet></ROW><ROW><id>11231344</id><snippet>close()</snippet></ROW><ROW><id>11231434</id><snippet>def js_to_py_re(rx):
    query, params = rx[1:].rsplit('/', 1)
    if 'g' in params:
        obj = re.findall
    else:
        obj = re.search

    # May need to make flags= smarter, but just an example...    
    return lambda L: obj(query, L, flags=re.I if 'i' in params else 0)

print js_to_py_re('/o/i')('school')
# &lt;_sre.SRE_Match object at 0x2d8fe68&gt;

print js_to_py_re('/O/ig')('school')
# ['o', 'o']

print js_to_py_re('/O/g')('school')
# []
</snippet></ROW><ROW><id>11231499</id><snippet>from itertools import imap, islice
with open('c:/file.sql') as inf, open('c:/file.txt','w') as outf:
    for line in imap(str.strip, islice(inf, 47, None)):
        data = line.split(',')
        if len(data) &gt; 35:
            hash = data[13]
            select = hash[3:-1]
            outf.write(select+'\n')
</snippet></ROW><ROW><id>11232093</id><snippet>if (test==(['Pop'] or 'Pop')):
</snippet></ROW><ROW><id>11232093</id><snippet>or</snippet></ROW><ROW><id>11232093</id><snippet>['Pop'] or 'Pop'
</snippet></ROW><ROW><id>11232093</id><snippet>if (test==['Pop']):
</snippet></ROW><ROW><id>11232093</id><snippet>test</snippet></ROW><ROW><id>11232093</id><snippet>['Pop']</snippet></ROW><ROW><id>11232093</id><snippet>(test == ['Pop']) or (test == 'Pop')
</snippet></ROW><ROW><id>11232093</id><snippet> test == (['Pop'] or 'Pop')
</snippet></ROW><ROW><id>11232097</id><snippet>re.search(r'(?&lt;!function) Foo\(', line)
</snippet></ROW><ROW><id>11232097</id><snippet>function</snippet></ROW><ROW><id>11232097</id><snippet>Foo</snippet></ROW><ROW><id>11232112</id><snippet>db.collection_name.stats()</snippet></ROW><ROW><id>11232288</id><snippet>n_clusters</snippet></ROW><ROW><id>11232288</id><snippet>k</snippet></ROW><ROW><id>11232288</id><snippet>k</snippet></ROW><ROW><id>11232369</id><snippet>grid_propagate</snippet></ROW><ROW><id>11232369</id><snippet>Frame</snippet></ROW><ROW><id>11232369</id><snippet>grid</snippet></ROW><ROW><id>11232369</id><snippet>grid</snippet></ROW><ROW><id>11232441</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; day = 1; month = 2; year = 2003
&gt;&gt;&gt; hour = 4; minute = 5
&gt;&gt;&gt; date = day + month * 32 + (year - 2000) * 512
&gt;&gt;&gt; time = 100 * hour + minute
&gt;&gt;&gt; data = struct.pack(b'HH', date, time)
&gt;&gt;&gt; data
'A\x06\x95\x01'
&gt;&gt;&gt; data.encode("hex")
'41069501'
</snippet></ROW><ROW><id>11232441</id><snippet>&gt;&gt;&gt; data2 = chr(date &amp; 0xFF) + chr((date &gt;&gt; 8) &amp; 0xFF) + chr(time &amp; 0xFF) + chr((time &gt;&gt; 8) &amp; 0xFF)
&gt;&gt;&gt; data2
'A\x06\x95\x01'
&gt;&gt;&gt; data2.encode("hex")
'41069501'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>11232508</id><snippet>class Node(object):
    def __init__(self, globalIndex, coordinates):

        #Useful things to record
        self.globalIndex = globalIndex
        self.coordinates = coordinates # now self.coordinates is just another name for your array
</snippet></ROW><ROW><id>11232508</id><snippet>n = Node(some_index, numpy_coordinate_array_name)</snippet></ROW><ROW><id>11232512</id><snippet>_digits = re.compile('\d')
def contains_digits(d):
    return bool(_digits.search(d))
</snippet></ROW><ROW><id>11232512</id><snippet>&gt;&gt;&gt; _digits = re.compile('\d')
&gt;&gt;&gt; def contains_digits(d):
...     return bool(_digits.search(d))
... 
&gt;&gt;&gt; contains_digits('0798237 sh 523-123-asdjlh')
True
&gt;&gt;&gt; contains_digits('sh asdjlh')
False
</snippet></ROW><ROW><id>11232512</id><snippet>any</snippet></ROW><ROW><id>11232512</id><snippet>.isdigit()</snippet></ROW><ROW><id>11232512</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit("contains_digits('0798237 sh 523-123-asdjlh')", 'from __main__ import contains_digits')
0.77181887626647949
&gt;&gt;&gt; timeit.timeit("contains_digits_any('0798237 sh 523-123-asdjlh')", 'from __main__ import contains_digits_any')
1.7796030044555664
</snippet></ROW><ROW><id>11232512</id><snippet>if</snippet></ROW><ROW><id>11232512</id><snippet>&gt;&gt;&gt; timeit.timeit("contains_digits_if('0798237 sh 523-123-asdjlh')", 'from __main__ import contains_digits_if')
0.87261390686035156
</snippet></ROW><ROW><id>11232512</id><snippet>&gt;&gt;&gt; timeit.timeit("contains_digits('asdjlhtaheoahueoaea 11 thou')", 'from __main__ import contains_digits')
1.202538013458252
&gt;&gt;&gt; timeit.timeit("contains_digits_any('asdjlhtaheoahueoaea 11 thou')", 'from __main__ import contains_digits_any')
5.0348429679870605
&gt;&gt;&gt; timeit.timeit("contains_digits_if('asdjlhtaheoahueoaea 11 thou')", 'from __main__ import contains_digits_if')
3.707183837890625
</snippet></ROW><ROW><id>11232979</id><snippet>UserSocialAuth</snippet></ROW><ROW><id>11232979</id><snippet>user.social_auth.filter(provider="...")
</snippet></ROW><ROW><id>11232979</id><snippet>user</snippet></ROW><ROW><id>11232979</id><snippet>request.user</snippet></ROW><ROW><id>11232979</id><snippet>provider</snippet></ROW><ROW><id>11232979</id><snippet>UserSocialAuth</snippet></ROW><ROW><id>11232979</id><snippet>print user_social_auth.tokens
{...}
</snippet></ROW><ROW><id>11233160</id><snippet>&gt;&gt;&gt; def f():
...     f()
... 
&gt;&gt;&gt; try:
...     f()
... except RuntimeError as re:
...     print re.args, re.message
... 
('maximum recursion depth exceeded',) maximum recursion depth exceeded
</snippet></ROW><ROW><id>11233160</id><snippet>message</snippet></ROW><ROW><id>11233160</id><snippet>args</snippet></ROW><ROW><id>11233168</id><snippet>In [2]: a = np.arange(10)

In [3]: b = 'git push'

In [5]: np.savez('file',a=a,b=b)

In [7]: data = np.load('file.npz')

In [8]: data.keys()
Out[8]: ['a', 'b']

In [9]: data['a']
Out[9]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [10]: str(data['b'])
Out[10]: 'git push'
</snippet></ROW><ROW><id>11233256</id><snippet>itertools.product('0123456789AB...Z', repeat = 5)
</snippet></ROW><ROW><id>11233256</id><snippet>''.join</snippet></ROW><ROW><id>11233293</id><snippet>import logging
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')

# first file logger
logger_1 = logging.getLogger('simple_logger')
hdlr_1 = logging.FileHandler('simplefile_1.log')
hdlr_1.setFormatter(formatter)
logger_1.addHandler(hdlr_1)

# second file logger
logger_2 = logging.getLogger('simple_logger_2')
hdlr_2 = logging.FileHandler('simplefile_2.log')    
hdlr_2.setFormatter(formatter)
logger_2.addHandler(hdlr_2)

logger_1.info('message 1')
logger_2.error('error foo')
</snippet></ROW><ROW><id>11233332</id><snippet>sudo add-apt-repository ppa:jon-severinsson/ffmpeg
</snippet></ROW><ROW><id>11233332</id><snippet>sudo apt-get remove ffmpeg
sudo apt-get autoremove
sudo apt-get update
sudo apt-get install ffmpeg
</snippet></ROW><ROW><id>11233356</id><snippet>list</snippet></ROW><ROW><id>11233356</id><snippet>y = [item * 2 for item in x]</snippet></ROW><ROW><id>11233356</id><snippet>x</snippet></ROW><ROW><id>11233356</id><snippet>from random import random

class PointSet(object):
    def __init__(self, numpoints):
        self.points = [Point(random(), random()) for _ in xrange(numpoints)]

    def update(self):
        for point in self.points:
            point.x += random() - 0.5
            point.y += random() - 0.5

class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y

points = PointSet(100000)
point = points.points[10]

for _ in xrange(1000):
    points.update()
    print 'Position of one point out of 100000:', point.x, point.y
</snippet></ROW><ROW><id>11233356</id><snippet>import numpy as np

class PointSet(object):
    def __init__(self, numpoints):
        self.coords = np.random.random((numpoints, 2))
        self.points = [Point(i, self.coords) for i in xrange(numpoints)]

    def update(self):
        """Update along a random walk."""
        # The "+=" is crucial here... We have to update "coords" in-place, in
        # this case. 
        self.coords += np.random.random(self.coords.shape) - 0.5

class Point(object):
    def __init__(self, i, coords):
        self.i = i
        self.coords = coords

    @property
    def x(self):
        return self.coords[self.i,0]

    @property
    def y(self):
        return self.coords[self.i,1]


points = PointSet(100000)
point = points.points[10]

for _ in xrange(1000):
    points.update()
    print 'Position of one point out of 100000:', point.x, point.y
</snippet></ROW><ROW><id>11233356</id><snippet>point</snippet></ROW><ROW><id>11233461</id><snippet>return redirect('/add/?c='+str(rm.id))

return redirect('/add/?success')
</snippet></ROW><ROW><id>11233461</id><snippet>?</snippet></ROW><ROW><id>11233461</id><snippet>rewrite  ^/users/(.*)$  /show?user=$1?  last;</snippet></ROW><ROW><id>11233461</id><snippet>location / {
    rewrite ^ https://****.com$request_uri? permanent;
}
</snippet></ROW><ROW><id>11233461</id><snippet>server {
        server_name www.foo.com foo.com;
        rewrite ^ https://$host$request_uri? permanent; 
}

server {
        listen 443 default_server ssl;
        ...
}
</snippet></ROW><ROW><id>11233485</id><snippet>E</snippet></ROW><ROW><id>11233485</id><snippet>alpha</snippet></ROW><ROW><id>11233485</id><snippet>beta</snippet></ROW><ROW><id>11233485</id><snippet>text(0.25, 0.5, r'$E^{\alpha}_{\beta}$', size=200)
</snippet></ROW><ROW><id>11233560</id><snippet>BTrees</snippet></ROW><ROW><id>11233730</id><snippet>@classmethod</snippet></ROW><ROW><id>11233730</id><snippet>@staticmethod</snippet></ROW><ROW><id>11233805</id><snippet>import zlib

with open("MyImage.jpg", "rb") as in_file:
    compressed = zlib.compress(in_file.read(), 9)

with open("MyCompressedFile", "wb") as out_file:
    out_file.write(compressed)
</snippet></ROW><ROW><id>11233915</id><snippet>OrderedDict</snippet></ROW><ROW><id>11233915</id><snippet>collections</snippet></ROW><ROW><id>11233915</id><snippet>OrderedDict</snippet></ROW><ROW><id>11234102</id><snippet> for line in nlines and linel in nlinesl:           
</snippet></ROW><ROW><id>11234102</id><snippet> for line, line1 in zip(nlines, nlines1):
</snippet></ROW><ROW><id>11234102</id><snippet>a = range(20, 26)
b = range(200, 226)

#for i in a and j in b:  # causes 
#   print i, j           # error

for i, j in zip(a, b):
   print i, j
</snippet></ROW><ROW><id>11234102</id><snippet>20 200
21 201
22 202
23 203
24 204
25 205
</snippet></ROW><ROW><id>11234141</id><snippet>with open(fname, "r") as fo:
    content_as_string = fo.read()
    match = re.search('Num_row_labels=(\d+)', content_as_string)
    # do want you want to the matchings
</snippet></ROW><ROW><id>11234195</id><snippet>autoload=True</snippet></ROW><ROW><id>11234195</id><snippet>MetaData.sorted_tables</snippet></ROW><ROW><id>11234195</id><snippet>for tbl in reversed(meta.sorted_tables):
    engine.execute(tbl.delete())
</snippet></ROW><ROW><id>11234195</id><snippet>drop_all/create_all</snippet></ROW><ROW><id>11234195</id><snippet>TRUNCATE</snippet></ROW><ROW><id>11234284</id><snippet>    {% extends 'template_name.html' %}
</snippet></ROW><ROW><id>11234284</id><snippet>    {% extends 'folder_name/template_name.html' %}
</snippet></ROW><ROW><id>11234619</id><snippet>{{ buttons() }}</snippet></ROW><ROW><id>11234619</id><snippet>buttons</snippet></ROW><ROW><id>11234619</id><snippet>buttons</snippet></ROW><ROW><id>11234619</id><snippet>{{ buttons }}</snippet></ROW><ROW><id>11234619</id><snippet>buttons=buttons()</snippet></ROW><ROW><id>11234619</id><snippet>render_template()</snippet></ROW><ROW><id>11234619</id><snippet>render_template()</snippet></ROW><ROW><id>11234987</id><snippet>with open('data.txt') as f:
    data = f.readlines()
    for i in range(len(data)):
        result = float(data[i])
        print result
</snippet></ROW><ROW><id>11234987</id><snippet>data.txt</snippet></ROW><ROW><id>11234987</id><snippet>100
200 
59
78
590
13
</snippet></ROW><ROW><id>11234987</id><snippet>data</snippet></ROW><ROW><id>11235005</id><snippet>for ul in soup.findAll('p') :
    print(ul)
</snippet></ROW><ROW><id>11235005</id><snippet>i</snippet></ROW><ROW><id>11235005</id><snippet>i</snippet></ROW><ROW><id>11235005</id><snippet>vi</snippet></ROW><ROW><id>11235005</id><snippet>&lt;p class="i"&gt;
    &lt;span class="i"&gt;Tytuł............................................&lt;/span&gt;
    &lt;span class="vi"&gt;: La mer à boire&lt;/span&gt;
&lt;/p&gt;
</snippet></ROW><ROW><id>11235005</id><snippet>&gt;&gt;&gt; ps = soup.findAll('p', {'class': 'i'})
&gt;&gt;&gt; ps
[&lt;p class="i"&gt;&lt;span class="i"&gt;Tytuł... &lt;LOTS OF STUFF&gt; ...pan&gt;&lt;/p&gt;]
</snippet></ROW><ROW><id>11235005</id><snippet>&gt;&gt;&gt; spans = [(p.find('span', {'class': 'i'}), p.find('span', {'class': 'vi'})) for p in ps]
&gt;&gt;&gt; spans
[(&lt;span class="i"&gt;Tyt... ...&lt;/span&gt;, &lt;span class="vi"&gt;: La mer à boire&lt;/span&gt;), 
 (&lt;span class="i"&gt;Ocena... ...&lt;/span&gt;, &lt;span class="vi"&gt;: IMDB - 6.3/10 (24)&lt;/span&gt;),
 (&lt;span class="i"&gt;Produkcja.. ...&lt;/span&gt;, &lt;span class="vi"&gt;: Francja&lt;/span&gt;),
 # and so on
]
</snippet></ROW><ROW><id>11235005</id><snippet>&gt;&gt;&gt; texts = [(span_i.text, span_vi.text) for span_i, span_vi in spans]
&gt;&gt;&gt; texts
[(u'Tytu\u0142............................................', u': La mer \xe0 boire'),
 (u'Ocena.............................................', u': IMDB - 6.3/10 (24)'),
 (u'Produkcja.........................................', u': Francja'), 
  # and so on
]
</snippet></ROW><ROW><id>11235005</id><snippet>rstrip()</snippet></ROW><ROW><id>11235005</id><snippet>&gt;&gt;&gt; u'Produkcja.........................................'.rstrip('.')
u'Produkcja'
</snippet></ROW><ROW><id>11235005</id><snippet>:</snippet></ROW><ROW><id>11235005</id><snippet>lstrip()</snippet></ROW><ROW><id>11235005</id><snippet>&gt;&gt;&gt; u': Francja'.lstrip(': ')
u'Francja'
</snippet></ROW><ROW><id>11235005</id><snippet>&gt;&gt;&gt; result = [(text_i.rstrip('.'), text_vi.replace(': ', '')) for text_i, text_vi in texts]
&gt;&gt;&gt; result
[(u'Tytu\u0142', u'La mer \xe0 boire'),
 (u'Ocena', u'IMDB - 6.3/10 (24)'),
 (u'Produkcja', u'Francja'),
 (u'Gatunek', u'Dramat'),
 (u'Czas trwania', u'98 min.'),
 (u'Premiera', u'22.02.2012 - \u015awiat'),
 (u'Re\u017cyseria', u'Jacques Maillot'),
 (u'Scenariusz', u'Pierre Chosson, Jacques Maillot'),
 (u'Aktorzy', u'Daniel Auteuil, Maud Wyler, Yann Trégouët, Alain Beigel'),
 (u'Wi\u0119cej na', u':'),
 (u'Trailer', u':Obejrzyj zwiastun')]
</snippet></ROW><ROW><id>11235048</id><snippet>pandas</snippet></ROW><ROW><id>11235048</id><snippet>Panel</snippet></ROW><ROW><id>11235048</id><snippet>DataFrame</snippet></ROW><ROW><id>11235048</id><snippet>import numpy as np
import pandas

d = np.array(np.arange(3*2*6).reshape(3,2,6))

dat = pandas.Panel(d, items=['temp', 'precip', 'humidity'], 
                      major_axis=['yr1', 'yr2'], 
                      minor_axis=['jan', 'feb', 'mar', 'apr', 'may', 'jun'])

print dat['temp']
print dat.major_xs('yr1')
print dat.minor_xs('may')
</snippet></ROW><ROW><id>11235106</id><snippet>app = webapp2.WSGIApplication([('/post/(.*)/.*', PostPage)</snippet></ROW><ROW><id>11235227</id><snippet>l[-n]</snippet></ROW><ROW><id>11235227</id><snippet>l[len(l)-n]</snippet></ROW><ROW><id>11235227</id><snippet>index = get_some_index()
if index &lt; 0:
    raise IndexError("negative list indices are considered out of range")
do_something(l[index])
</snippet></ROW><ROW><id>11235639</id><snippet>result = commands.getoutput("/usr/lib/cgi-bin/test.sh %s" % name)
</snippet></ROW><ROW><id>11235921</id><snippet>webbrowser</snippet></ROW><ROW><id>11235921</id><snippet>csv</snippet></ROW><ROW><id>11235921</id><snippet>xlrd</snippet></ROW><ROW><id>11235921</id><snippet>xlrd</snippet></ROW><ROW><id>11235921</id><snippet>import xlrd, webbrowser

workbook = xlrd.open_workbook('websites.xls')
sheet = workbook.sheet_by_name('Sheet1')

# Suppose your URLs are in column 5, rows 2 to 30
url_column = 5
for row in range(2, 31):
    url = sheet.cell_value(row, url_column)
    webbrowser.open_new_tab(url)
</snippet></ROW><ROW><id>11235957</id><snippet>__cause__</snippet></ROW><ROW><id>11235957</id><snippet>__context__</snippet></ROW><ROW><id>11235957</id><snippet>__traceback__</snippet></ROW><ROW><id>11235957</id><snippet>__context__</snippet></ROW><ROW><id>11236000</id><snippet>In [10]: a = operator.itemgetter(0)
Out[10]: copy.copy(a)
TypeError: itemgetter expected 1 arguments, got 0

In [10]: a = operator.itemgetter(0)
Out[10]: copy.deepcopy(a)
TypeError: itemgetter expected 1 arguments, got 0

In [10]: a = operator.itemgetter(0)
Out[10]: pickle.dumps(a)
TypeError: can't pickle itemgetter objects

# etc.
</snippet></ROW><ROW><id>11236042</id><snippet>mylist.count()</snippet></ROW><ROW><id>11236042</id><snippet>mylist</snippet></ROW><ROW><id>11236042</id><snippet>from collections import Counter
mylist = [20, 30, 25, 20]
[k for k,v in Counter(mylist).items() if v&gt;1]
</snippet></ROW><ROW><id>11236042</id><snippet>from collections import defaultdict
D = defaultdict(list)
for i,item in enumerate(mylist):
    D[item].append(i)
D = {k:v for k,v in D.items() if len(v)&gt;1}
</snippet></ROW><ROW><id>11236166</id><snippet>data_files   = [ ("my_module",  ["local/lib/python2.7/dist-package/my_module/data1",
                                 "local/lib/python2.7/dist-package/my_module/data2"])]
</snippet></ROW><ROW><id>11236166</id><snippet>data_dir = os.path.join(sys.prefix, "local/lib/python2.7/dist-package/my_module")
data_files   = [ ("my_module",  [os.path.join(data_dir, "data1"),
                                 os.path.join(data_dir, "data2")])]
</snippet></ROW><ROW><id>11236171</id><snippet>e</snippet></ROW><ROW><id>11236585</id><snippet>$ dd if=/dev/urandom count=80 bs=1 
</snippet></ROW><ROW><id>11236821</id><snippet>import threading
import random
import time
from openpyxl import Workbook

wb = Workbook()
ws = wb.get_active_sheet()
testcell = ws.cell('B9')
counter = 1

class openpyxlworker ( threading.Thread):

    def run ( self ):

        global wb     
        global testcell
        global counter

        for a in range(1000):
            time.sleep(random.random()/100)
            writing = random.randrange(1, 1000)
            testcell.value = writing
            time.sleep(random.random()/100)
            reading = testcell.value          
            print "Thread " + str(counter) + " wrote " + str(writing) + " and read " + str(reading)
            time.sleep(random.random()/100)
            wb.save('test.xlsx')

        counter = counter + 1

for b in range(100):
    openpyxlworker().start()
</snippet></ROW><ROW><id>11236972</id><snippet>{'results': results, 'form': form}</snippet></ROW><ROW><id>11236993</id><snippet>&gt;&gt;&gt; data = np.array([2.02, 2.33, 2.99, 6.85, 9.20, 8.80, 7.50, 6.00, 5.85, 3.85, 4.85, 3.85, 2.22, 1.45, 1.34])
&gt;&gt;&gt; data -= data.mean()
&gt;&gt;&gt; data /= data.std()
&gt;&gt;&gt; data
array([-1.01406602, -0.89253491, -0.63379126,  0.87946705,  1.80075126,
        1.64393692,  1.13429034,  0.54623659,  0.48743122, -0.29664045,
        0.09539539, -0.29664045, -0.93565885, -1.23752644, -1.28065039])
</snippet></ROW><ROW><id>11236993</id><snippet>r</snippet></ROW><ROW><id>11236993</id><snippet>&gt;&gt;&gt; r / data
array([ 0.96609173,  0.96609173,  0.96609173,  0.96609179,  0.96609179, 0.96609181,  0.9660918 ,  0.96609181,
        0.96609179,  0.96609179,        0.9660918 ,  0.96609179,  0.96609175,  0.96609176,  0.96609177])
</snippet></ROW><ROW><id>11236993</id><snippet>N</snippet></ROW><ROW><id>11236993</id><snippet>N-1</snippet></ROW><ROW><id>11236993</id><snippet>N</snippet></ROW><ROW><id>11237018</id><snippet>import</snippet></ROW><ROW><id>11237018</id><snippet>ImportError</snippet></ROW><ROW><id>11237018</id><snippet>try:
    import modulename
except ImportError:
    print 'importing modulename failed'
</snippet></ROW><ROW><id>11237018</id><snippet>ImportError</snippet></ROW><ROW><id>11237018</id><snippet>require</snippet></ROW><ROW><id>11237018</id><snippet>include_once</snippet></ROW><ROW><id>11237018</id><snippet>require_once</snippet></ROW><ROW><id>11237144</id><snippet>def show_class_a_objects(request):
    class_b_objects = ClassB.objects.all().order_by('name')
    class_a_objects = ClassA.objects.all().order_by('name')
</snippet></ROW><ROW><id>11237144</id><snippet>def show_class_a_objects(request):
    class_b_objects = ClassB.objects.all().order_by('name')
    return render_to_response('show_objects.html', {
        'class_b_objects': class_b_objects, 
    })
</snippet></ROW><ROW><id>11237144</id><snippet>{% for b in class_b_objects %}
    &lt;tr&gt;
    &lt;td&gt;{{b.name}}&lt;/td&gt;
    &lt;/tr&gt;
    {% for a in b.classa_set.all %}
        &lt;tr&gt;
        &lt;td&gt;&lt;a href="{{ a.get_absolute_url }}"&gt;{{a.name}}&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>11237144</id><snippet>def show_class_a_objects(request):
    class_b = ClassB.objects.all().order_by('name')
    class_b_objects = [(b, b.classa_set.all().order_by('name')) for b in class_b]
    return render_to_response('show_objects.html', {
        'class_b_objects': class_b_objects
    })
</snippet></ROW><ROW><id>11237144</id><snippet>{% for b, a_list in class_b_objects %}
    &lt;tr&gt;
    &lt;td&gt;{{b.name}}&lt;/td&gt;
    &lt;/tr&gt;
    {% for a in a_list %}
        &lt;tr&gt;
        &lt;td&gt;&lt;a href="{{ a.get_absolute_url }}"&gt;{{a.name}}&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>11237144</id><snippet>1 + num_of_classb_objects</snippet></ROW><ROW><id>11237144</id><snippet>b.classa_set.all()</snippet></ROW><ROW><id>11237144</id><snippet>qs = ClassB.objects.all()
obj_dict = dict([(obj.id, obj) for obj in qs])
objects = ClassA.objects.filter(classb__in=qs)
relation_dict = {}
for obj in objects:
    relation_dict.setdefault(obj.classb_id, []).append(obj)
for id, related_items in relation_dict.items():
    obj_dict[id]._related_items = related_items
</snippet></ROW><ROW><id>11237144</id><snippet>prefetch_related</snippet></ROW><ROW><id>11237144</id><snippet>n+1</snippet></ROW><ROW><id>11237151</id><snippet>webbrowser.open()</snippet></ROW><ROW><id>11237254</id><snippet>numpy.ctypes</snippet></ROW><ROW><id>11237254</id><snippet>g++ -Wall -fPIC -O2 -c Utils.cpp
g++ -shared -Wl -o libUTILS.so Utils.o
</snippet></ROW><ROW><id>11237254</id><snippet>extern "C" double addTwoNumber(double x, double y)
{
    return x + y;
}
</snippet></ROW><ROW><id>11237254</id><snippet>import os
import ctypes as c

libUTILS = c.cdll.LoadLibrary('libUTILS.so')

prototype = c.CFUNCTYPE(    
    c.c_double,                
    c.c_double,                
    c.c_double                
)
addTwoNumber = prototype(('addTwoNumber', libUTILS))

res = addTwoNumber(c.c_double(2.3), c.c_double(3.5) )
print res
</snippet></ROW><ROW><id>11237254</id><snippet>$ python test.py
5.8
</snippet></ROW><ROW><id>11237254</id><snippet>extern</snippet></ROW><ROW><id>11237348</id><snippet>match = re.search(r'{0}'.format(trimtemp), modeltrim, re.IGNORECASE)
</snippet></ROW><ROW><id>11237348</id><snippet>format(trimtemp)</snippet></ROW><ROW><id>11237348</id><snippet>print format(trimtemp)
</snippet></ROW><ROW><id>11237348</id><snippet>(</snippet></ROW><ROW><id>11237348</id><snippet>)</snippet></ROW><ROW><id>11237348</id><snippet>re</snippet></ROW><ROW><id>11237348</id><snippet>re.escape(format(trimtemp))</snippet></ROW><ROW><id>11237762</id><snippet>subprocess</snippet></ROW><ROW><id>11237957</id><snippet>   //td[translate(substring(text()[1], string-length(text()[1]) - 9),
                  'COUNTRY :',
                  'country'
                  )
        =
         'country'
       ]
        /span/text()
</snippet></ROW><ROW><id>11237957</id><snippet>&lt;xsl:stylesheet version="1.0"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
 &lt;xsl:output omit-xml-declaration="yes" indent="yes"/&gt;

 &lt;xsl:template match="/"&gt;
  &lt;xsl:copy-of select=
  "//td[translate(substring(text()[1], string-length(text()[1]) - 9),
                  'COUNTRY :',
                  'country'
                  )
        =
         'country'
       ]
        /span/text()
       "/&gt;
 &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</snippet></ROW><ROW><id>11237957</id><snippet>&lt;html&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    Name of the Country : &lt;span&gt; USA &lt;/span&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    Name of the country : &lt;span&gt; UK &lt;/span&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>11237957</id><snippet> USA  UK 
</snippet></ROW><ROW><id>11237957</id><snippet>ends-with($text, $s)</snippet></ROW><ROW><id>11237957</id><snippet>$s = substring($text, string-length($text) - string-length($s) +1)
</snippet></ROW><ROW><id>11237957</id><snippet>translate()</snippet></ROW><ROW><id>11237957</id><snippet>span</snippet></ROW><ROW><id>11237957</id><snippet>td</snippet></ROW><ROW><id>11237990</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.nxutils import points_inside_poly
from itertools import product, compress

pv = [(1,1),(5,1),(5,9),(3,2),(1,1)]

x, y = np.meshgrid(np.arange(10),np.arange(10))
x, y = x.flatten(), y.flatten()

xy = np.vstack((x,y)).T

grid = points_inside_poly(xy,pv)

xv, yv = zip(*pv)
xp, yp = zip(*compress(xy,grid))

plt.plot(xp,yp,'o',color='red',label='points')
plt.plot(xv,yv,'o',color='blue',label='vertices')
plt.xlim((0,10))
plt.ylim((0,10))
plt.legend()
plt.show()
</snippet></ROW><ROW><id>11238062</id><snippet>def Loop(Classroom1, m_count, h_count, t_count, l_count, loopsize):
    for i in range(0, loopsize):
        Loop(Classroom1.Mutate(), m_count, h_count, t_count, l_count, loopsize)
</snippet></ROW><ROW><id>11238062</id><snippet>h_count + 1
</snippet></ROW><ROW><id>11238112</id><snippet>set</snippet></ROW><ROW><id>11238112</id><snippet>a = 0
while prime &gt;= pool[a]:
   a = a + 1
   prime = pool[a]
</snippet></ROW><ROW><id>11238112</id><snippet>for el in pool:
   if prime &gt;= el:
       prime = el
       break
</snippet></ROW><ROW><id>11238319</id><snippet>class Convert(object):
    def __init__(self):
        self.A = packageA.get_the_entirety_of_A_expensively()
        self.B = getB() # or put get_B's code in here
    def AB(self, input):
        return self.A[self.B[input]]

converter = Convert()
converter.AB('blah')
</snippet></ROW><ROW><id>11238481</id><snippet>def post(self):     
  category = self.request.get('category')      
  if category:         
    user = users.get_current_user()         
    if user:
      logout = users.create_logout_url(self.request.uri)         
      global visits          
      category = self.request.get('category')                         
      posts = db.GqlQuery("select * from Post where category=:1 order by created desc limit 30", category)         
      self.render("home.html", posts=posts, user=user, visits=visits, logout=logout) 
    else:
      self.redirect(users.create_login_url(self.request.uri)) 
</snippet></ROW><ROW><id>11239692</id><snippet>k = [x for x in range(3)]
w = [n for n in range(4)]
i=0
j=0

def countt(pitch):
    global i
    global j
    if pitch == 'strike':

        if i==len(k)-1:
            i=0
        else:i=i+1
        return k[i],w[j]

    elif pitch =='ball':
        if j==len(w)-1:
            j=0
        else:j=j+1    
        return w[j],k[i]    
</snippet></ROW><ROW><id>11239692</id><snippet>&gt;&gt;&gt; countt('strike')
(1, 0)
&gt;&gt;&gt; countt('strike')
(2, 0)
&gt;&gt;&gt; countt('ball')
(1, 2)
&gt;&gt;&gt; countt('ball')
(2, 2)
&gt;&gt;&gt; countt('ball')
(3, 2)
&gt;&gt;&gt; countt('strike')
(0, 3)
</snippet></ROW><ROW><id>11239806</id><snippet>Python</snippet></ROW><ROW><id>11239806</id><snippet>sudo apt-get install python</snippet></ROW><ROW><id>11239899</id><snippet>with open('data.txt') as f:
    next(f)
    d=dict()
    for x in f:
        if x.split()[0] not in d:
            d[x.split()[0]]=float(x.split()[2])
        else:
            d[x.split()[0]]+=float(x.split()[2])
</snippet></ROW><ROW><id>11239899</id><snippet>{'11': 9.7756, '10': 9.791699999999999, '12': 9.7925}
</snippet></ROW><ROW><id>11240425</id><snippet>xmpp</snippet></ROW><ROW><id>11240425</id><snippet>from protocol import *
</snippet></ROW><ROW><id>11240425</id><snippet>xmpp.Message</snippet></ROW><ROW><id>11240425</id><snippet>xmpp.protocol.Message</snippet></ROW><ROW><id>11240425</id><snippet>xmpp.Message is xmpp.protocol.Message</snippet></ROW><ROW><id>11240739</id><snippet>CLOSE_WAIT</snippet></ROW><ROW><id>11240739</id><snippet>EOF</snippet></ROW><ROW><id>11240739</id><snippet>not request</snippet></ROW><ROW><id>11240828</id><snippet>for list in dirlist:
        get_file = os.path.join(absolute_path, list)
        zip_name = zipfile.ZipFile(filepath, 'w')
        zip_name.write(get_file, 'Project2b\\' + list)
</snippet></ROW><ROW><id>11240828</id><snippet>"w"</snippet></ROW><ROW><id>11240828</id><snippet>zip_name = zipfile.ZipFile(filepath, 'w')
for list in dirlist:
        get_file = os.path.join(absolute_path, list)
        zip_name.write(get_file, 'Project2b\\' + list)
</snippet></ROW><ROW><id>11240828</id><snippet>for list in dirlist:
        get_file = os.path.join(absolute_path, list)
        zip_name = zipfile.ZipFile(filepath, 'a')
        zip_name.write(get_file, 'Project2b\\' + list)
</snippet></ROW><ROW><id>11241629</id><snippet>json.loads</snippet></ROW><ROW><id>11241629</id><snippet>{</snippet></ROW><ROW><id>11241629</id><snippet>info = json.loads(json.loads(get_info()))
</snippet></ROW><ROW><id>11241629</id><snippet>&gt;&gt;&gt; result = json.loads(output)
&gt;&gt;&gt; print result
{u'streams': [{u'pix_fmt': u'yuv422p', u'index': 0, u'start_time': u'0.945411', u'codec_tag': u'0x0000', u'sample_aspect_ratio': u'1:1', u'level': 2, u'r_frame_rate': u'24000/1001', u'id': u'0x1e0', u'time_base': u'1/90000', u'codec_tag_string': u'[0][0][0][0]', u'codec_type': u'video', u'has_b_frames': 1, u'width': 1920, u'codec_long_name': u'MPEG-2 video', u'display_aspect_ratio': u'16:9', u'codec_name': u'mpeg2video', u'timecode': u'00:59:59:00', u'height': 1080, u'codec_time_base': u'1001/48000', u'avg_frame_rate': u'10000/417'}, {u'index': 1, u'sample_fmt': u's32', u'codec_tag': u'0x0000', u'bits_per_sample': 0, u'r_frame_rate': u'0/0', u'start_time': u'0.945411', u'time_base': u'1/90000', u'codec_tag_string': u'[0][0][0][0]', u'codec_type': u'audio', u'channels': 2, u'duration': u'600.595000', u'codec_long_name': u'PCM signed 20|24-bit big-endian', u'codec_name': u'pcm_dvd', u'id': u'0xa0', u'sample_rate': u'48000', u'codec_time_base': u'1/48000', u'avg_frame_rate': u'0/0'}], u'format': {u'nb_streams': 2, u'start_time': u'0.945411', u'format_long_name': u'MPEG-PS format', u'format_name': u'mpeg', u'filename': u'/home/richard/projects/hello-python/tests/test_1.mpg', u'bit_rate': u'53723272', u'duration': u'600.595000', u'size': u'4033241092'}}
</snippet></ROW><ROW><id>11241629</id><snippet>&gt;&gt;&gt; result['streams']
[{u'pix_fmt': u'yuv422p', u'index': 0, u'start_time': u'0.945411', u'codec_tag': u'0x0000', u'sample_aspect_ratio': u'1:1', u'level': 2, u'r_frame_rate': u'24000/1001', u'id': u'0x1e0', u'time_base': u'1/90000', u'codec_tag_string': u'[0][0][0][0]', u'codec_type': u'video', u'has_b_frames': 1, u'width': 1920, u'codec_long_name': u'MPEG-2 video', u'display_aspect_ratio': u'16:9', u'codec_name': u'mpeg2video', u'timecode': u'00:59:59:00', u'height': 1080, u'codec_time_base': u'1001/48000', u'avg_frame_rate': u'10000/417'}, {u'index': 1, u'sample_fmt': u's32', u'codec_tag': u'0x0000', u'bits_per_sample': 0, u'r_frame_rate': u'0/0', u'start_time': u'0.945411', u'time_base': u'1/90000', u'codec_tag_string': u'[0][0][0][0]', u'codec_type': u'audio', u'channels': 2, u'duration': u'600.595000', u'codec_long_name': u'PCM signed 20|24-bit big-endian', u'codec_name': u'pcm_dvd', u'id': u'0xa0', u'sample_rate': u'48000', u'codec_time_base': u'1/48000', u'avg_frame_rate': u'0/0'}]
</snippet></ROW><ROW><id>11241629</id><snippet>pprint</snippet></ROW><ROW><id>11241629</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; print pprint(result)
&gt;&gt;&gt; pprint(result)
{u'format': {u'bit_rate': u'53723272',
             u'duration': u'600.595000',
             u'filename': u'/home/richard/projects/hello-python/tests/test_1.mpg',
             u'format_long_name': u'MPEG-PS format',
             u'format_name': u'mpeg',
             u'nb_streams': 2,
             u'size': u'4033241092',
             u'start_time': u'0.945411'},
 u'streams': [{u'avg_frame_rate': u'10000/417',
               u'codec_long_name': u'MPEG-2 video',
               u'codec_name': u'mpeg2video',
               u'codec_tag': u'0x0000',
               u'codec_tag_string': u'[0][0][0][0]',
               u'codec_time_base': u'1001/48000',
               u'codec_type': u'video',
               u'display_aspect_ratio': u'16:9',
               u'has_b_frames': 1,
               u'height': 1080,
               u'id': u'0x1e0',
               u'index': 0,
               u'level': 2,
               u'pix_fmt': u'yuv422p',
               u'r_frame_rate': u'24000/1001',
               u'sample_aspect_ratio': u'1:1',
               u'start_time': u'0.945411',
               u'time_base': u'1/90000',
               u'timecode': u'00:59:59:00',
               u'width': 1920},
              {u'avg_frame_rate': u'0/0',
               u'bits_per_sample': 0,
               u'channels': 2,
               u'codec_long_name': u'PCM signed 20|24-bit big-endian',
               u'codec_name': u'pcm_dvd',
               u'codec_tag': u'0x0000',
               u'codec_tag_string': u'[0][0][0][0]',
               u'codec_time_base': u'1/48000',
               u'codec_type': u'audio',
               u'duration': u'600.595000',
               u'id': u'0xa0',
               u'index': 1,
               u'r_frame_rate': u'0/0',
               u'sample_fmt': u's32',
               u'sample_rate': u'48000',
               u'start_time': u'0.945411',
               u'time_base': u'1/90000'}]}
</snippet></ROW><ROW><id>11241708</id><snippet>  2           0 SETUP_LOOP              20 (to 23)
              3 LOAD_GLOBAL              0 (xrange)
              6 LOAD_CONST               3 (100000000)
              9 CALL_FUNCTION            1
             12 GET_ITER            
        &gt;&gt;   13 FOR_ITER                 6 (to 22)
             16 STORE_FAST               0 (i)

  3          19 JUMP_ABSOLUTE           13
        &gt;&gt;   22 POP_BLOCK           
        &gt;&gt;   23 LOAD_CONST               0 (None)
             26 RETURN_VALUE        
</snippet></ROW><ROW><id>11241708</id><snippet>  1           0 SETUP_LOOP              20 (to 23)
              3 LOAD_NAME                0 (xrange)
              6 LOAD_CONST               3 (100000000)
              9 CALL_FUNCTION            1
             12 GET_ITER            
        &gt;&gt;   13 FOR_ITER                 6 (to 22)
             16 STORE_NAME               1 (i)

  2          19 JUMP_ABSOLUTE           13
        &gt;&gt;   22 POP_BLOCK           
        &gt;&gt;   23 LOAD_CONST               2 (None)
             26 RETURN_VALUE        
</snippet></ROW><ROW><id>11241708</id><snippet>STORE_FAST</snippet></ROW><ROW><id>11241708</id><snippet>STORE_NAME</snippet></ROW><ROW><id>11241708</id><snippet>i</snippet></ROW><ROW><id>11241708</id><snippet>dis</snippet></ROW><ROW><id>11241708</id><snippet>compile</snippet></ROW><ROW><id>11241951</id><snippet>if data=="":
    break
</snippet></ROW><ROW><id>11241951</id><snippet>break</snippet></ROW><ROW><id>11241951</id><snippet>&gt;&gt;&gt; b"" == ""
False
</snippet></ROW><ROW><id>11241951</id><snippet>data</snippet></ROW><ROW><id>11241951</id><snippet>bytes</snippet></ROW><ROW><id>11241951</id><snippet>if data==b"":
    break
</snippet></ROW><ROW><id>11241951</id><snippet>match_str = b"sape"
with open(exe_filePath,'rb') as file_obj: 
    while True:
        data = file_obj.readline(100)
        if data.count(match_str) &gt; 0:
            # This will overwrite any previous "out" from the last match!
            # Do you really want that?
            out = data.strip()[9:13]
        if data==b"":
            break
return out
</snippet></ROW><ROW><id>11242002</id><snippet>mystdErr.reset()
mystdErr.truncate()
</snippet></ROW><ROW><id>11242002</id><snippet>reset</snippet></ROW><ROW><id>11242002</id><snippet>truncate</snippet></ROW><ROW><id>11242266</id><snippet>1.1</snippet></ROW><ROW><id>11242266</id><snippet>float('1.1')</snippet></ROW><ROW><id>11242266</id><snippet>0x1.199999999999ap+0</snippet></ROW><ROW><id>11242266</id><snippet>1.100000000000000088817841970012523233890533447265625</snippet></ROW><ROW><id>11242266</id><snippet>repr(1.1)</snippet></ROW><ROW><id>11242266</id><snippet>format(1.1,
  '.17g')</snippet></ROW><ROW><id>11242266</id><snippet>'1.1000000000000001'</snippet></ROW><ROW><id>11242266</id><snippet>eval(repr(1.1))</snippet></ROW><ROW><id>11242266</id><snippet>repr(1.1)</snippet></ROW><ROW><id>11242266</id><snippet>'1.1'</snippet></ROW><ROW><id>11242266</id><snippet>1.1 + 2.2 != 3.3</snippet></ROW><ROW><id>11242428</id><snippet>from itertools import combinations

def apply_pairwise(func, a):
    "For each row, call func with every possible combination of two values"

    stack = []
    for col_a, col_b in combinations(range(a.shape[0]), 2):
        stack.append(np.hstack([a[col_a], a[col_b]]))

    combined = np.vstack(stack)

    def unpack_row(row):
        "Calls func with the values of a given numpy array as arguments"
        return func(*row.tolist())

    return np.apply_along_axis(unpack_row, 1, combined)
</snippet></ROW><ROW><id>11242428</id><snippet>a</snippet></ROW><ROW><id>11242428</id><snippet>&gt;&gt;&gt; f = lambda x, y: x + y
&gt;&gt;&gt; print apply_pairwise(f, a)
['diaadgegec' 'iaadfehecf' 'aadfegecfc' 'hedbbgadff' 'edbbbadfef'
'dbbbbdffgc' 'diaadddddj' 'iaadfdddjd' 'aadfeddjdd' 'hedbbjfffd'
'edbbbfgfdb' 'dbbbbggdbb' 'gegecddddj' 'ehecfdddjd' 'gecfcddjdd'
'gadffjfffd' 'adfeffgfdb' 'dffgcggdbb']
</snippet></ROW><ROW><id>11242570</id><snippet>__bar</snippet></ROW><ROW><id>11242570</id><snippet>A</snippet></ROW><ROW><id>11242570</id><snippet>_classname</snippet></ROW><ROW><id>11242654</id><snippet>system()</snippet></ROW><ROW><id>11242656</id><snippet>urlparse()</snippet></ROW><ROW><id>11242656</id><snippet>&gt;&gt;&gt; domain = 'http://www.example.com/'
&gt;&gt;&gt; re.match(r'(?:\w*://)?(?:.*\.)?([a-zA-Z-1-9]*\.[a-zA-Z]{1,}).*', domain).groups()[0]
example.com
</snippet></ROW><ROW><id>11242656</id><snippet>&gt;&gt;&gt; p = re.compile(r'(?:\w*://)?(?:.*?\.)?(?:([a-zA-Z-1-9]*)\.)?([a-zA-Z-1-9]*\.[a-zA-Z]{1,}).*')
&gt;&gt;&gt; p.match(domain).groups()
</snippet></ROW><ROW><id>11242656</id><snippet>&gt;&gt;&gt; domain = 'http://www.example.com/'
&gt;&gt;&gt; '.'.join(domain.replace('http://','').split('/')[0].split('.')[-2:])
</snippet></ROW><ROW><id>11242806</id><snippet>import cgi
# escape special HTML characters
body = cgi.escape(body)
# use HTML line breaks
body = body.replace("\r\n", "\n").replace("\n", "&lt;br /&gt;\n")
</snippet></ROW><ROW><id>11242806</id><snippet>smtplib.SMTP.sendmail</snippet></ROW><ROW><id>11242806</id><snippet>headers = (('From', gmailUser), 
           ('To', to_addr), 
           ('Subject', subject))

# normalize newlines to CR+LF, as required by SMTP
body = body.replace("\r\n", "\n").replace("\n", "\r\n")

msg = '\r\n'.join("%s: %s" % kv for kv in headers) + '\r\n'*2 + body

mailServer.sendmail(gmailUser, [to_addr], msg)
</snippet></ROW><ROW><id>11242806</id><snippet>python ... &lt; /tmp/alert.txt</snippet></ROW><ROW><id>11242806</id><snippet>import sys
body = sys.stdin.read()
</snippet></ROW><ROW><id>11242838</id><snippet>line = re.compile(r'("[^"]*")\s*=\s*("[^"]*");')
result = line.sub(r'\1: \2,', result)
</snippet></ROW><ROW><id>11242838</id><snippet>trailingcomma = re.compile(r',(\s*})')
result = trailingcomma.sub(r'\1', result)
</snippet></ROW><ROW><id>11242838</id><snippet>&gt;&gt;&gt; import json, re
&gt;&gt;&gt; line = re.compile('("[^"]*")\s*=\s*("[^"]*");')
&gt;&gt;&gt; result = '''\
... {
...     "original-purchase-date-pst" = "2012-06-28 02:46:02 America/Los_Angeles";
...     "original-transaction-id" = "1000000051960431";
...     "bvrs" = "1.0";
...     "transaction-id" = "1000000051960431";
...     "quantity" = "1";
...     "original-purchase-date-ms" = "1340876762450";
...     "product-id" = "com.x";
...     "item-id" = "523404215";
...     "bid" = "com.x";
...     "purchase-date-ms" = "1340876762450";
...     "purchase-date" = "2012-06-28 09:46:02 Etc/GMT";
...     "purchase-date-pst" = "2012-06-28 02:46:02 America/Los_Angeles";
...     "original-purchase-date" = "2012-06-28 09:46:02 Etc/GMT";
... }
... '''
&gt;&gt;&gt; line = re.compile(r'("[^"]*")\s*=\s*("[^"]*");')
&gt;&gt;&gt; trailingcomma = re.compile(r',(\s*})')
&gt;&gt;&gt; corrected = trailingcomma.sub(r'\1', line.sub(r'\1: \2,', result))
&gt;&gt;&gt; json.loads(corrected)
{u'product-id': u'com.x', u'purchase-date-pst': u'2012-06-28 02:46:02 America/Los_Angeles', u'transaction-id': u'1000000051960431', u'original-purchase-date-pst': u'2012-06-28 02:46:02 America/Los_Angeles', u'bid': u'com.x', u'purchase-date-ms': u'1340876762450', u'original-transaction-id': u'1000000051960431', u'bvrs': u'1.0', u'original-purchase-date-ms': u'1340876762450', u'purchase-date': u'2012-06-28 09:46:02 Etc/GMT', u'original-purchase-date': u'2012-06-28 09:46:02 Etc/GMT', u'item-id': u'523404215', u'quantity': u'1'}
</snippet></ROW><ROW><id>11242838</id><snippet>"</snippet></ROW><ROW><id>11243416</id><snippet>/usr/share/doc/python2.7/examples/Tools/scripts/diff.py
</snippet></ROW><ROW><id>11243416</id><snippet>locate diff.py | grep Tools
</snippet></ROW><ROW><id>11243416</id><snippet>/usr/share/doc/python2.7/examples/Tools/scripts/diff.py
/usr/share/doc/python2.7/examples/Tools/scripts/ndiff.py
/usr/share/doc/python3.1/examples/Tools/scripts/diff.py
/usr/share/doc/python3.1/examples/Tools/scripts/ndiff.py
</snippet></ROW><ROW><id>11243416</id><snippet>sudo updatedb
</snippet></ROW><ROW><id>11244376</id><snippet>Tkinter</snippet></ROW><ROW><id>11244376</id><snippet>tkinter</snippet></ROW><ROW><id>11244376</id><snippet>from Tkinter import *
import time

class MyLoop():
    def __init__(self, root):
        self.running = True
        self.aboutToQuit = False
        self.root = root
        self.someVar = 0
        self.root.bind("&lt;space&gt;", self.switch)
        self.root.bind("&lt;Escape&gt;", self.exit) 

        while not self.aboutToQuit:
            self.root.update() # always process new events

            if self.running:
                # do stuff
                self.someVar += 1
                print(self.someVar)
                time.sleep(.1)

            else: # If paused, don't do anything
                time.sleep(.1)

    def switch(self, event):
        print(['Unpausing','Pausing'][self.running])
        self.running = not(self.running)

    def exit(self, event):
        self.aboutToQuit = True
        self.root.destroy()

if __name__ == "__main__":
    root = Tk()
    root.withdraw() # don't show the tkinter window
    MyLoop(root)
    root.mainloop()
</snippet></ROW><ROW><id>11244376</id><snippet>1
2
3
4
5
6
7
Pausing
Unpausing
8
9
10
11
12
13
14
15
16
Pausing
Unpausing
17
18
19
20
21
22
23
24
25
</snippet></ROW><ROW><id>11244503</id><snippet>self</snippet></ROW><ROW><id>11244503</id><snippet>self</snippet></ROW><ROW><id>11244503</id><snippet>with open("data.dat") as f:
    a = pickle.load(f)
</snippet></ROW><ROW><id>11244503</id><snippet>__init__()</snippet></ROW><ROW><id>11244503</id><snippet>__new__()</snippet></ROW><ROW><id>11244503</id><snippet>__init__()</snippet></ROW><ROW><id>11244503</id><snippet>__new__()</snippet></ROW><ROW><id>11244505</id><snippet>do_</snippet></ROW><ROW><id>11244505</id><snippet>process_cmd</snippet></ROW><ROW><id>11244505</id><snippet>input</snippet></ROW><ROW><id>11244823</id><snippet>if</snippet></ROW><ROW><id>11244823</id><snippet>'yes'</snippet></ROW><ROW><id>11244823</id><snippet>'no'</snippet></ROW><ROW><id>11244823</id><snippet>def deleteme():
    result = tkMessageBox.askquestion("Delete", "Are You Sure?", icon='warning')
    if result == 'yes':
        print "Deleted"
    else:
        print "I'm Not Deleted Yet"
</snippet></ROW><ROW><id>11244823</id><snippet>arr = [10, 10]
if arr:
    print "arr is non-empty"
else:
    print "arr is empty"
</snippet></ROW><ROW><id>11244823</id><snippet>True</snippet></ROW><ROW><id>11244823</id><snippet>False</snippet></ROW><ROW><id>11244823</id><snippet>if 'yes':</snippet></ROW><ROW><id>11244869</id><snippet>import os
folder1={x for x in os.listdir('some_directory') if os.path.isfile(x)}
folder2={x for x in os.listdir('some_other_directory') if os.path.isfile(x)}
common_files=folder1.intersection(folder2)
</snippet></ROW><ROW><id>11245443</id><snippet>__lt__</snippet></ROW><ROW><id>11245443</id><snippet>__cmp__</snippet></ROW><ROW><id>11245443</id><snippet>Range</snippet></ROW><ROW><id>11245443</id><snippet>import bisect
position = bisect.bisect_left(range_list, your_input)
if position &gt; 0:    
    nearest_range = range_list[position - 1]
else:
    nearest_range = None
</snippet></ROW><ROW><id>11245718</id><snippet>'r+'</snippet></ROW><ROW><id>11245718</id><snippet>f = open('file.txt', 'r+')
f.seek(-2, 2) # last character in file
if f.read(2) == '\n\n':
   f.seek(-1, 1) # wow, we really did find a newline! rewind again!
f.write('orange')
f.close()
</snippet></ROW><ROW><id>11245781</id><snippet>%45s</snippet></ROW><ROW><id>11245781</id><snippet>%-45s</snippet></ROW><ROW><id>11245781</id><snippet># fake setup 
PASS = ["foo.exe", "bar.exe", "really_long_filename.exe"]
FAILED = ["failed.exe"]
types = ["32-bit", "64-bit", "64-bit"]
arch64 = '64'
arch32 = '32'

# your code
def print_row(filename, status, file_type):
    print " %-45s %-15s %15s" % (filename, status, file_type)

print_row('FileName', 'Status', 'Binary Type')

for files in PASS:
    log = types.pop()
    if arch64 in log:
        print_row(files, 'PASSED', '64-bit')
    elif arch32 in log:
        print_row(files, 'PASSED', '32-bit')
print"\n"   

for files in FAILED:
        print_row(files, 'FAILED', '')

print "\n\n"
</snippet></ROW><ROW><id>11245822</id><snippet>deferred.defer</snippet></ROW><ROW><id>11245822</id><snippet>class1</snippet></ROW><ROW><id>11245822</id><snippet>defer</snippet></ROW><ROW><id>11245822</id><snippet>def deferred_method_call(*args, **kwargs):
    class1.method1(*args, **kwargs)

deferred.defer(deferred_method_call, ...)
</snippet></ROW><ROW><id>11245822</id><snippet>class1</snippet></ROW><ROW><id>11245822</id><snippet>def deferred_method_call(class_, *args, **kwargs):
    class_.method1(*args, **kwargs)

deferred.defer(deferred_method_call, class1, ...)
</snippet></ROW><ROW><id>11245822</id><snippet>type</snippet></ROW><ROW><id>11245822</id><snippet>defer</snippet></ROW><ROW><id>11246025</id><snippet>from scrapy.xlib.pydispatch import dispatcher
from scrapy import signals
from scrapy.stats import stats
from datetime import datetime

def handle_spider_closed(spider, reason):
    print 'Spider closed:', spider.name, stats.get_stats(spider)
    print 'Work time:', datetime.now() - stats.get_stats(spider)['start_time']


dispatcher.connect(handle_spider_closed, signals.spider_closed)
</snippet></ROW><ROW><id>11246063</id><snippet>list1</snippet></ROW><ROW><id>11246063</id><snippet>list1.append(row)</snippet></ROW><ROW><id>11246063</id><snippet>print row</snippet></ROW><ROW><id>11246063</id><snippet># open lines as list, using read().split('\n') instead of readlines(),
# because readlines() leaves '\n' after the lines.
csv = open(r'c:\Users\***\Desktop\prvi.csv', 'r').read().split('\n')
csv2 = open(r'c:\Users\***\Desktop\drugi.csv', 'r').read().split('\n')
list1 = []    

while True:
    # never use input(), unless you are using python 3
    choice = int(raw_input('Odaberite zeljenu funkciju: \n'
                           '1) Usporedi Book1 sa Book2\n'
                           '2) Usporedi Book2 sa Book1 \n'
                           '3) Print Book1 \n'
                           '4) Print Book2 \n'
                           '5) Izlaz \nOdabir: '))
    if choice == 1:
        for row in csv:
            if not row in csv2:
                list1.append(row)
                print row
        save_file()
    elif choice == 2:
        for row in csv2:
            if not row in csv:
                list1.append(row)
                print row
        save_file()
    elif choice == 3:
        for row in csv:
            print row
    elif choice == 4:
        for row in csv2:
            print row
    elif choice == 5:
        break

def save_file():
    with open('output.txt', 'w') as f:
        f.write('\n'.join(list1))
</snippet></ROW><ROW><id>11246084</id><snippet>self.Bind(wx.EVT_BUTTON, lambda event, args=args: self.do_something(event, args), self.button) 

self.do_something(self,event,arguments):
    """do something with arguments"""
    pass
</snippet></ROW><ROW><id>11246087</id><snippet>In [4]: df.pivot('name', 'id', 'x')
Out[4]: 
id    1  2
name      
john  0  0
mike  1  0
</snippet></ROW><ROW><id>11246173</id><snippet>oracle-instantclient-basic-10.2.0.4-1.i386.rpm</snippet></ROW><ROW><id>11246173</id><snippet>oracle-instantclient-sqlplus-10.2.0.4-1.i386.rpm</snippet></ROW><ROW><id>11246173</id><snippet>sudo alien -i oracle-instantclient-basic-10.2.0.4-1.i386.rpm</snippet></ROW><ROW><id>11246173</id><snippet>/etc/ld.so.conf.d/oracle-instantclient10.2-basic.conf</snippet></ROW><ROW><id>11246173</id><snippet>/lib</snippet></ROW><ROW><id>11246173</id><snippet>/usr/lib/oracle/10.2/client/lib</snippet></ROW><ROW><id>11246173</id><snippet>sudo ldconfig</snippet></ROW><ROW><id>11246173</id><snippet>sudo alien -i cx_Oracle-5.0-10g-py25-1.x86.rpm</snippet></ROW><ROW><id>11246173</id><snippet>python -c 'import cx_Oracle'</snippet></ROW><ROW><id>11246261</id><snippet># generation code - for cut and paste

import operator
def fixtures(teams):
    if len(teams) % 2:
        teams.append('Day off')  # if team number is odd - use 'day off' as fake team     

    rotation = list(teams)       # copy the list

    fixtures = []
    for i in range(0, len(teams)-1):
        fixtures.append(rotation)
        rotation = [rotation[0]] + [rotation[-1]] + rotation[1:-1]

    return fixtures

# demo code
teams = ["Team1", "Team2", "Team3", "Team4", "Team5"]

# for one match each - use this block only
matches = fixtures(teams)
for f in matches:    
    print f

# if you want return matches 
reverse_teams =  [list(x) for x in zip(teams[1::2], teams[::2])]
reverse_teams = reduce(operator.add,  reverse_teams)    # swap team1 with team2, and so on ....

#then run the fixtures again
matches = fixtures(reverse_teams)

print "return matches"
for f in matches:    
    print f
</snippet></ROW><ROW><id>11246261</id><snippet>[('Team1', 'Day off'), ('Team2', 'Team5'), ('Team3', 'Team4')]
[('Team1', 'Team5'), ('Day off', 'Team4'), ('Team2', 'Team3')]
[('Team1', 'Team4'), ('Team5', 'Team3'), ('Day off', 'Team2')]
[('Team1', 'Team3'), ('Team4', 'Team2'), ('Team5', 'Day off')]
[('Team1', 'Team2'), ('Team3', 'Day off'), ('Team4', 'Team5')]
</snippet></ROW><ROW><id>11246524</id><snippet>function ping($host, $port, $timeout)
{ 
  $tB = microtime(true); 
  $fP = fSockOpen($host, $port, $errno, $errstr, $timeout); 
  if (!$fP) { return "down"; } 
  $tA = microtime(true); 
  return round((($tA - $tB) * 1000), 0)." ms"; 
}
</snippet></ROW><ROW><id>11246620</id><snippet>LastItemNum = int(lineList[-1][0:1]) +1
</snippet></ROW><ROW><id>11246620</id><snippet>LastItemNum</snippet></ROW><ROW><id>11246620</id><snippet>LastItemNum=str(LastItemNum)</snippet></ROW><ROW><id>11246757</id><snippet>&gt;&gt;&gt; A = ('A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5')
&gt;&gt;&gt; B = [12 ,13, 14 ,15, 16, 17, 18, 19 ,20 ,21, 22, 23]
&gt;&gt;&gt; C=[A[x] for x in B]
&gt;&gt;&gt; C
['(', 'C', ':', '0', '.', '3', ',', 'D', ':', '0', '.', '4']
</snippet></ROW><ROW><id>11246757</id><snippet>&gt;&gt;&gt; A = ('A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5')
&gt;&gt;&gt; C=A[A.find('('):A.find(')')+1]
&gt;&gt;&gt; C
'(C:0.3,D:0.4)'
</snippet></ROW><ROW><id>11246987</id><snippet>isinstance</snippet></ROW><ROW><id>11246987</id><snippet>def __init__(self,movie_instance):
    if(not isinstance(movie_instance, Movie)):
         raise ValueError("movie_instance must be an instance of class Movie")
</snippet></ROW><ROW><id>11246987</id><snippet>Movie</snippet></ROW><ROW><id>11246987</id><snippet>Movie</snippet></ROW><ROW><id>11247146</id><snippet>import whatever

def main(arg1):
    # routine to be run

if __name__=='__main__':
    sys.exit(main(sys.argv[1]))
</snippet></ROW><ROW><id>11247146</id><snippet>import otherfile

for i in xrange(1000):
    otherfile.main(arg1)
</snippet></ROW><ROW><id>11247446</id><snippet>from kdtree import KDTree

data = [(1,2,3),(4,0,1),(5,3,1),(10,5,4),(9,8,9),(4,2,4)]

tree = KDTree.construct_from_data(data)
nearest = tree.query(query_point=(5,4,3), t=1)
</snippet></ROW><ROW><id>11247639</id><snippet>.py</snippet></ROW><ROW><id>11247639</id><snippet>.py</snippet></ROW><ROW><id>11247639</id><snippet>python</snippet></ROW><ROW><id>11247639</id><snippet>#/usr/bin/env python</snippet></ROW><ROW><id>11247726</id><snippet>import Queue

q = Queue.Queue()

try:
    task = q.get(False)
except Queue.Empty:
    # Handle empty queue here
    pass
else:
    # Handle task here and call q.task_done()
</snippet></ROW><ROW><id>11247776</id><snippet>from scipy.optimize import fmin_l_bfgs_b
import math

def weibull_mu(k, lmda):
    return lmda*math.gamma(1+1/k)
def weibull_var(k, lmda):
    return lmda**2*math.gamma(1+2/k)-weibull_mu(k, lmda)**2

def min_function(arggs):
    actual_mean = 4.                    # specific to this example
    actual_var = 8.                     # specific to this example
    k = arggs[0]
    lmda = arggs[1]
    extracted_var = weibull_var(k, lmda)
    extracted_mean = weibull_mu(k, lmda)
    output = (extracted_var - actual_var)**2 + (extracted_mean - actual_mean)**2
    return output

print fmin_l_bfgs_b(min_function, best_guess, approx_grad = True, bounds = [(.0000001,None),(.0000001,None)], disp = False)
</snippet></ROW><ROW><id>11247923</id><snippet>s = set(x[0] for x in amm)
amv = [x for x in data if x[4] in s]
</snippet></ROW><ROW><id>11248551</id><snippet>gr = {'A': {'C': 2, 'B': 10},
      'C': {'B': 7, 'D': 2},
      'B': {'E': 2},
      'D': {'A': 5, 'B': 4, 'E': 3}
      'E': {}}

def paths(gr, frm, to, path_len=0, visited=None):

    if frm == to:
        return [[to, path_len]]

    visited = visited or []
    result = []
    for point, length in gr[frm].iteritems():
        if point in visited:
            continue
        visited.append(point)
        for sub_path in paths(gr, point, to, path_len + length, visited[:]):
            result.append([frm] + sub_path)

    return result

&gt;&gt;&gt; print paths(gr, 'A', 'E')
[['A', 'C', 'B', 'E', 11], ['A', 'C', 'D', 'E', 7], ['A', 'B', 'E', 12]]
</snippet></ROW><ROW><id>11248659</id><snippet>__new__</snippet></ROW><ROW><id>11248659</id><snippet>__init__</snippet></ROW><ROW><id>11248659</id><snippet>__init__</snippet></ROW><ROW><id>11248659</id><snippet>__new__</snippet></ROW><ROW><id>11248687</id><snippet>def dicList():
    dictList = csv.reader(open('C:/Python/data.txt', 'rb'), delimiter="|")
    for row in dictList:
       #the data should now be pre-separated into a list
       print row
</snippet></ROW><ROW><id>11248687</id><snippet>output = []
for row in dictList:
  one_entity = {row[0]:row[1],row[2]:row[3]}
  output.append(one_entity)
</snippet></ROW><ROW><id>11248687</id><snippet>key1|val1|key2|val2</snippet></ROW><ROW><id>11248687</id><snippet>data_dictionary = dict()
line_no = 0

fields = 0
output = []

csv_data = csv.reader('C:\filepath')
for line in csv_data:
  if line_no == 0:
    #read the first line as the keys for the final dict
    fields = line
    line_no+=1
    continue

  field_index = 0
  one_entity = {}
  for answer in line:
    one_entity[fields[field_index]] = answer.strip()
  output.append(one_entity)
  line_no+=1
</snippet></ROW><ROW><id>11248687</id><snippet>csv.dictReader</snippet></ROW><ROW><id>11248687</id><snippet>fieldnames</snippet></ROW><ROW><id>11249116</id><snippet>$ wget -q -O - https://api.github.com/repos/smarnach/pyexiftool/git/refs/heads/master 
{
  "ref": "refs/heads/master",
  "url": "https://api.github.com/repos/smarnach/pyexiftool/git/refs/heads/master",
  "object": {
    "type": "commit",
    "url": "https://api.github.com/repos/smarnach/pyexiftool/git/commits/7be4b9bb680521369f2ae3310b1f6de5d14d1f8b",
    "sha": "7be4b9bb680521369f2ae3310b1f6de5d14d1f8b"
  }
}
</snippet></ROW><ROW><id>11249274</id><snippet>from os import path
import sys

PACKAGE_NAMESPACE = ["project_name", "ext"]
VIRTUAL_PACKAGE = '.'.join(PACKAGE_NAMESPACE)
__import__(VIRTUAL_PACKAGE)
local_package = path.abspath(path.join(*PACKAGE_NAMESPACE))
sys.modules[VIRTUAL_PACKAGE].__dict__["__path__"].insert(0, local_package)
</snippet></ROW><ROW><id>11249276</id><snippet>for run_test_spider in condition:
</snippet></ROW><ROW><id>11249276</id><snippet>condition</snippet></ROW><ROW><id>11249276</id><snippet>condition = [1, 'yes' 'y']

def spiders():

    if run_test_spider.lower() in condition:
        test.main()
        print 'gotcha!'
</snippet></ROW><ROW><id>11249383</id><snippet>close()</snippet></ROW><ROW><id>11249383</id><snippet>&gt;&gt;&gt; file1
&lt;closed file 'file2.txt', mode 'w' at 0x10045e930&gt;
&gt;&gt;&gt; file2
&lt;closed file 'file2.txt', mode 'w' at 0x10045e930&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11249383</id><snippet>file1 = file2</snippet></ROW><ROW><id>11249383</id><snippet>file1</snippet></ROW><ROW><id>11249450</id><snippet>SSS</snippet></ROW><ROW><id>11249450</id><snippet>999499</snippet></ROW><ROW><id>11249450</id><snippet>9995</snippet></ROW><ROW><id>11249459</id><snippet>&gt;&gt;&gt; m, n, k = 5, 7, 3
&gt;&gt;&gt; tuple(n if i == k else 1 for i in range(m))
(1, 1, 1, 7, 1)
</snippet></ROW><ROW><id>11249521</id><snippet># Store the variables that represent the slice in a list/tuple
# Make a slice with the unzipped tuple using the slice() command
# Use the slice on your array
</snippet></ROW><ROW><id>11249521</id><snippet>&gt;&gt;&gt; from numpy import *
&gt;&gt;&gt; a = (1, 2, 3)
&gt;&gt;&gt; b = arange(27).reshape(3, 3, 3)
&gt;&gt;&gt; s = slice(*a)
&gt;&gt;&gt; b[s]
array([[[ 9, 10, 11],
        [12, 13, 14],
        [15, 16, 17]]])
</snippet></ROW><ROW><id>11249521</id><snippet>&gt;&gt;&gt; b[1:2:3]
array([[[ 9, 10, 11],
        [12, 13, 14],
        [15, 16, 17]]])
</snippet></ROW><ROW><id>11249521</id><snippet>:</snippet></ROW><ROW><id>11249521</id><snippet>None</snippet></ROW><ROW><id>11249560</id><snippet>users.get_current_user()</snippet></ROW><ROW><id>11249601</id><snippet>date.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
</snippet></ROW><ROW><id>11249601</id><snippet>&gt;&gt;&gt; '123456'[:-3]
'123'
&gt;&gt;&gt; '123456'[3:]
'456'
&gt;&gt;&gt; '123456'[1:-1]
'2345'
&gt;&gt;&gt; '123456'[::2]
'135'
&gt;&gt;&gt; '123456'[::-1]
'654321'
&gt;&gt;&gt; '123456'[-2::]
'56'
</snippet></ROW><ROW><id>11249874</id><snippet>list1 = [...]
tmpSet = set(list1)
haveDuplicates = len(list1) != len(tmpSet)
</snippet></ROW><ROW><id>11250100</id><snippet>def Update_Past_Moves():
    past_moves.popleft()
</snippet></ROW><ROW><id>11250100</id><snippet>def Print_Snake_Body():
    for i in range(len(past_moves)):
        # No moves left
</snippet></ROW><ROW><id>11250192</id><snippet>import os    
os.path.expanduser(path)
</snippet></ROW><ROW><id>11250205</id><snippet>def DeleteToDo():
    print ("Which Item Do You Want To Delete?")
    DeleteItem = raw_input("&gt;") #select a line number to delete
    print ("Are You Sure You Want To Delete Number" + DeleteItem + "(y/n)")
    DeleteItem=int(DeleteItem) 
    VerifyDelete = str.lower(raw_input("&gt;"))
    if VerifyDelete == "y":
        FILE = open('data.txt',"r") #open the file (tried w+ as well, entire file is deleted)
        lines=[x.strip() for x in FILE if int(x[:x.index('.')])!=DeleteItem] #read all the lines first except the line which matches the line number to be deleted
        FILE.close()
        FILE = open('data.txt',"w")#open the file again
        for x in lines:FILE.write(x+'\n')    #write the data to the file

    else:
        print ("Nothing Deleted")
DeleteToDo()
</snippet></ROW><ROW><id>11250526</id><snippet>MyDBClass</snippet></ROW><ROW><id>11250526</id><snippet>__init__</snippet></ROW><ROW><id>11250526</id><snippet>QueryFunction</snippet></ROW><ROW><id>11250526</id><snippet>updateFunction</snippet></ROW><ROW><id>11250556</id><snippet>//namespace:*</snippet></ROW><ROW><id>11250556</id><snippet>doc_root.xpath('//ds:*', namespaces={'ds': 'http://www.w3.org/2000/09/xmldsig#'})
</snippet></ROW><ROW><id>11250556</id><snippet>def strip_dsig(doc_root):
    nsmap={'ds': 'http://www.w3.org/2000/09/xmldsig#'}
    for element in doc_root.xpath('//ds:*', namespaces=nsmap):
        element.getparent().remove(element)
    return doc_root
</snippet></ROW><ROW><id>11250668</id><snippet>&gt;&gt;&gt; l = lambda a, b: None
&gt;&gt;&gt; l.func_code.co_argcount
2
</snippet></ROW><ROW><id>11250668</id><snippet>&gt;&gt;&gt; l.__code__.co_argcount
2
</snippet></ROW><ROW><id>11250782</id><snippet>import cv2
import numpy as np

img = cv2.imread('image.jpg')
gaussian_blur = cv2.GaussianBlur(img,(5,5),0)
</snippet></ROW><ROW><id>11250821</id><snippet>pip freeze | xargs pip uninstall -y
</snippet></ROW><ROW><id>11250884</id><snippet>1.1.0</snippet></ROW><ROW><id>11250884</id><snippet>import matplotlib.pyplot as plt

fig, ax = plt.subplots()

# We need to draw the canvas, otherwise the labels won't be positioned and 
# won't have values yet.
fig.canvas.draw()

labels = [item.get_text() for item in ax.get_xticklabels()]
labels[1] = 'Testing'

ax.set_xticklabels(labels)

plt.show()
</snippet></ROW><ROW><id>11250884</id><snippet>FixedLocator</snippet></ROW><ROW><id>11250884</id><snippet>FixedFormatter</snippet></ROW><ROW><id>11250884</id><snippet>set_*ticklabels</snippet></ROW><ROW><id>11250884</id><snippet>ax.*axis.set_ticklabels</snippet></ROW><ROW><id>11250884</id><snippet>annotate</snippet></ROW><ROW><id>11251165</id><snippet>None</snippet></ROW><ROW><id>11251165</id><snippet>def foo(a=None):
    if a is None:
        a = 10
        # no value for a provided
</snippet></ROW><ROW><id>11251330</id><snippet>__init__</snippet></ROW><ROW><id>11251330</id><snippet>apple</snippet></ROW><ROW><id>11251330</id><snippet>pear</snippet></ROW><ROW><id>11251330</id><snippet>x = Complex(3.0, -4.5)
</snippet></ROW><ROW><id>11251330</id><snippet>__init__</snippet></ROW><ROW><id>11251330</id><snippet>def __init__(self, realpart, imagpart):
</snippet></ROW><ROW><id>11251330</id><snippet>self</snippet></ROW><ROW><id>11251330</id><snippet>self.r</snippet></ROW><ROW><id>11251330</id><snippet>self.i</snippet></ROW><ROW><id>11251412</id><snippet>class User(ndb.Model):
  unique_identifier = ndb.StringProperty()
  ...

class ProfilePage(webapp2.RequestHandler):
  def get(self, profile_id):
    #profile_id = key name of user
    user = User.get_by_id(profile_id)
    #profile_id = some unique field
    #user = User.query(User.unique_identifier == profile_id).get()
    if user:
       #Get all posts for that user and render....


app = webapp2.WSGIApplication([('/', MainPage),
                               ('/profile/&lt;profile_id&gt;', ProfilePage),])
</snippet></ROW><ROW><id>11251429</id><snippet>with open('C:\Python27\Fake1.txt', 'r') as f:
    data = [map(float, line.split()) for line in f]

num_rows = len(data)
num_cols = len(data[0])

totals = num_cols * [0.0]
for line in data:
    for index in xrange(num_cols):
        totals[index] += line[index]

averages = [total / num_rows for total in totals]
print averages
</snippet></ROW><ROW><id>11251429</id><snippet>import numpy as np
data = np.loadtxt('C:\Python27\Fake1.txt')
print data.mean(0)
</snippet></ROW><ROW><id>11251695</id><snippet>$ python -m timeit -n 1 -c 'from xml.etree.cElementTree import iterparse
count = 0
for event, elem in iterparse("..../QT20060217_S_18mix23-2500_01.mzML"):
    if elem.tag.endswith("spectrum"): count += 1
    elem.clear()
print count'
6126
6126
6126
1 loops, best of 3: 950 msec per loop
</snippet></ROW><ROW><id>11251695</id><snippet>timeit</snippet></ROW><ROW><id>11251695</id><snippet>1 loops, best of 3: 22.3 sec per loop
</snippet></ROW><ROW><id>11251695</id><snippet>lxml</snippet></ROW><ROW><id>11251695</id><snippet>xml.etree.cElementTree</snippet></ROW><ROW><id>11251695</id><snippet>lxml.etree</snippet></ROW><ROW><id>11251695</id><snippet>730 msec per loop</snippet></ROW><ROW><id>11251695</id><snippet>11.4 sec per loop</snippet></ROW><ROW><id>11251732</id><snippet>if item in my_list:
    # whatever
</snippet></ROW><ROW><id>11251869</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>11251869</id><snippet>if __name__ == '__main__':
    processes = create_processes(2, time.sleep, 4)
    start_all(processes, 0)
</snippet></ROW><ROW><id>11251872</id><snippet>&gt;&gt;&gt; from pyzipcode import ZipCodeDatabase
&gt;&gt;&gt; zcdb = ZipCodeDatabase()
&gt;&gt;&gt; zipcode = zcdb[54115]
&gt;&gt;&gt; zipcode.zip
u'54115'
&gt;&gt;&gt; zipcode.city
u'De Pere'
&gt;&gt;&gt; zipcode.state
u'WI'
&gt;&gt;&gt; zipcode.longitude
-88.078959999999995
&gt;&gt;&gt; zipcode.latitude
44.42042
&gt;&gt;&gt; zipcode.timezone
-6
</snippet></ROW><ROW><id>11251977</id><snippet>set_markup</snippet></ROW><ROW><id>11251977</id><snippet>pango.Layout</snippet></ROW><ROW><id>11251977</id><snippet>set_alignment</snippet></ROW><ROW><id>11251977</id><snippet>pango.Layout</snippet></ROW><ROW><id>11252020</id><snippet>#x.py
import y
y.lol = 1
y.func()
</snippet></ROW><ROW><id>11252020</id><snippet>#y.py
def func():
    print(lol)
</snippet></ROW><ROW><id>11252020</id><snippet>#a.py
import sys
sys._getframe(1).f_globals['lol'] = 1
</snippet></ROW><ROW><id>11252020</id><snippet>a.py</snippet></ROW><ROW><id>11252020</id><snippet>lol</snippet></ROW><ROW><id>11252020</id><snippet>#b.py
import a
print(lol)
</snippet></ROW><ROW><id>11252374</id><snippet>&gt;&gt;&gt; string = 'WWF'
&gt;&gt;&gt; num = 0.0
&gt;&gt;&gt; print ("{0}:{1}".format(string[-1],num))
F:0.0
</snippet></ROW><ROW><id>11252374</id><snippet>"%s:%s" % (string[-1], num)
</snippet></ROW><ROW><id>11252374</id><snippet>"{0}:{1}".format(string[-1],num)
</snippet></ROW><ROW><id>11252670</id><snippet>0</snippet></ROW><ROW><id>11252670</id><snippet>def permshift(n, k):
    lst = range(1, n)
    lst.insert(k, 0)
    return lst
</snippet></ROW><ROW><id>11252861</id><snippet>url_for</snippet></ROW><ROW><id>11252861</id><snippet>_external=True</snippet></ROW><ROW><id>11252861</id><snippet>url_for('handle_contact_form', _external=True)
</snippet></ROW><ROW><id>11252861</id><snippet>http://localhost:5000/contact-us</snippet></ROW><ROW><id>11252861</id><snippet>:5000/contact-us</snippet></ROW><ROW><id>11252990</id><snippet>import ast
mystr  = 'myString={"name", "age", "address", "contacts", "Email"}'

tree   = ast.parse(mystr)
name   = tree.body[0].targets[0].id
values = [val.s for val in tree.body[0].value.elts]

print name, values
# prints: myString ['name', 'age', 'address', 'contacts', 'Email']
</snippet></ROW><ROW><id>11252990</id><snippet>import re
block_re = re.compile(r'v_dims=\{(.*?)\}', re.S)

with open("C:\XXXX\nemo\Test.mrk") as f:
    doc = f.read()

block = block_re.search(doc)
[s.strip().strip('"') for s in block.group(1).split(',')]
</snippet></ROW><ROW><id>11252990</id><snippet>import ast
import re

with open("C:\XXXX\nemo\Test.mrk") as f:
    doc = f.read()

block_re = re.compile(r'v_dims=\{.*?\}', re.S)
tree     = ast.parse(block_re.search(doc).group(0))

print [val.s for val in tree.body[0].value.elts]
# ['name', 'age', 'address', 'contacts', 'Email']
</snippet></ROW><ROW><id>11253013</id><snippet>sort_big_text_file('C:/Python/','com_data.txt', 100000)

if __name__=="__main__":
    dirname = sys.argv[1]
    filename = sys.argv[2]
    slicesize = int(sys.argv[3])
    sort_big_text_file(dirname,filename,slicesize)
</snippet></ROW><ROW><id>11253080</id><snippet>import curses

if __name__ == '__main__':
    curses.initscr()

    window = curses.newwin(15, 40, 7, 20)
    window.box()
    window.refresh()

    subwindow = window.derwin(5, 10, 2, 2)  # &lt;- here is the change
    subwindow.box()
    subwindow.refresh()

    subwindow.getkey()

    curses.endwin()
</snippet></ROW><ROW><id>11253314</id><snippet>sudo apt-get install python-rpy2
</snippet></ROW><ROW><id>11253416</id><snippet>True</snippet></ROW><ROW><id>11253416</id><snippet>False</snippet></ROW><ROW><id>11253525</id><snippet>(r"^(\d+)/$", "main"),
(r"", "main"),
</snippet></ROW><ROW><id>11253525</id><snippet>/project
    /app
        views.py
        urls.py
</snippet></ROW><ROW><id>11253525</id><snippet>urlpatterns = patterns('app.views',
    (r"^(\d+)/$", "main"),
    (r"", "main"),
)
</snippet></ROW><ROW><id>11253525</id><snippet>from app.views import main

urlpatterns = patterns('',
    (r"^(\d+)/$", main),
    (r"", main),
)
</snippet></ROW><ROW><id>11253528</id><snippet>cube.dtype</snippet></ROW><ROW><id>11253528</id><snippet>int64</snippet></ROW><ROW><id>11253528</id><snippet>1000000 * 64 / 8 = 8,000,000</snippet></ROW><ROW><id>11253528</id><snippet>cube</snippet></ROW><ROW><id>11253528</id><snippet>element = matrix</snippet></ROW><ROW><id>11253528</id><snippet>element</snippet></ROW><ROW><id>11253528</id><snippet>cube</snippet></ROW><ROW><id>11253528</id><snippet>entry = random.rand() * 100</snippet></ROW><ROW><id>11253625</id><snippet># attempt to find java
if [ -z "$JAVA_HOME" ]; then
  for candidate in \
    /usr/lib/jvm/java-6-sun \
    /usr/lib/jvm/java-1.6.0-sun-1.6.0.*/jre/ \
    /usr/lib/jvm/java-1.6.0-sun-1.6.0.* \
    /usr/lib/j2sdk1.6-sun \
    /usr/java/jdk1.6* \
    /usr/java/jre1.6* \
    /Library/Java/Home \
    /usr/java/default \
    /usr/lib/jvm/default-java ; do
    if [ -e $candidate/bin/java ]; then
      export JAVA_HOME=$candidate
      break
    fi
  done
</snippet></ROW><ROW><id>11253625</id><snippet>echo $JAVA_HOME</snippet></ROW><ROW><id>11253625</id><snippet>/usr/lib/jvm/java-6-sun/</snippet></ROW><ROW><id>11253625</id><snippet>vi ~/.bashrc</snippet></ROW><ROW><id>11253625</id><snippet>vi ~/.bash_profile</snippet></ROW><ROW><id>11253625</id><snippet>export JAVA_HOME=/usr/lib/jvm/java-6-sun/</snippet></ROW><ROW><id>11253721</id><snippet>userlib_grab_device_file_descriptor()</snippet></ROW><ROW><id>11253721</id><snippet>...
with daemonContext:
    try:
        userlib_grab_device_file_descriptor()   # open fd here
        run(host = '0.0.0.0', port = '80', debug = True)
    except:
        print "(E) Bottle web-service was stopped.\n";
</snippet></ROW><ROW><id>11253721</id><snippet>files_preserve</snippet></ROW><ROW><id>11253931</id><snippet>import numpy as np
axis = 0
index = list(np.ix_(*[np.arange(i) for i in z2.shape]))
index[axis] = z2.argsort(axis)
z2[index]

# Or if you only need the 3d case you can use np.ogrid.

axis = 0
index = np.ogrid[:z2.shape[0], :z2.shape[1], :z2.shape[2]]
index[axis] = z2.argsort(axis)
z2[index]
</snippet></ROW><ROW><id>11254043</id><snippet>inspect.getfile</snippet></ROW><ROW><id>11254043</id><snippet>inspect.getsourcefile</snippet></ROW><ROW><id>11254043</id><snippet>TypeError</snippet></ROW><ROW><id>11254043</id><snippet>isdigit</snippet></ROW><ROW><id>11254043</id><snippet>stringobject.c</snippet></ROW><ROW><id>11254043</id><snippet>Objects</snippet></ROW><ROW><id>11254043</id><snippet>isdigits</snippet></ROW><ROW><id>11254081</id><snippet>http://stackoverflow.com/posts?foo=bar&amp;baz=qux</snippet></ROW><ROW><id>11254081</id><snippet>foo = bar
baz = qux
</snippet></ROW><ROW><id>11254088</id><snippet>ro.r.assign('val', val)
ro.r.assign('exp', exp)
ro.r.assign('tiempo', tiempo)
ro.r('anova &lt;- aov(val ~ tiempo + exp)')
ro.r('s.anova &lt;- summary(anova)')
ro.r('spHoc &lt;- summary(glht(anova, linfct=mcp(tiempo="Dunnet")))')
print ro.r('s.anova')
print ro.r('spHoc')
ro.r('capture.output(s.anova, file = "anova.txt", append = TRUE)')
ro.r('capture.output(spHoc, file = "anova.txt", append = TRUE)')
</snippet></ROW><ROW><id>11254088</id><snippet>            Df Sum Sq Mean Sq F value   Pr(&gt;F)    
tiempo       5  91172   18234   8.788 0.000464 ***
exp          3  49402   16467   7.936 0.002108 ** 
Residuals   15  31125    2075                     
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 


     Simultaneous Tests for General Linear Hypotheses

Multiple Comparisons of Means: Dunnett Contrasts


Fit: aov(formula = val ~ tiempo + exp)

Linear Hypotheses:
            Estimate Std. Error t value Pr(&gt;|t|)    
2 - 0 == 0     78.10      32.21   2.425  0.10306    
5 - 0 == 0    152.39      32.21   4.731  0.00110 ** 
10 - 0 == 0   140.06      32.21   4.348  0.00246 ** 
15 - 0 == 0   158.90      32.21   4.933  &lt; 0.001 ***
30 - 0 == 0   180.73      32.21   5.611  &lt; 0.001 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 
(Adjusted p values reported -- single-step method)
</snippet></ROW><ROW><id>11254089</id><snippet>except</snippet></ROW><ROW><id>11254089</id><snippet>sys.exit(0)</snippet></ROW><ROW><id>11254089</id><snippet>try</snippet></ROW><ROW><id>11254089</id><snippet>D:\Download\htmlString.p</snippet></ROW><ROW><id>11254089</id><snippet>IOError</snippet></ROW><ROW><id>11254089</id><snippet>except IOError:</snippet></ROW><ROW><id>11254089</id><snippet>except</snippet></ROW><ROW><id>11254089</id><snippet>import sys
import pickle
import urllib2

request = urllib2.Request('http://www.iana.org/domains/example/')
response = urllib2.urlopen(request) # Make the request
htmlString = response.read()

try: 
    file = pickle.load( open( 'D:\\Download\\htmlString.p', 'rb'))
    if pickle.load( open( 'D:\\Download\\htmlString.p', 'rb')) == htmlString:
        print("Values haven't changed!")
        sys.exit(0)
    else:
        pickle.dump( htmlString, open( 'D:\\Download\\htmlString.p', "wb" ) )  
        print('Saving')
except IOError: 
    pickle.dump( htmlString, open( 'D:\\Download\\htmlString.p', "wb" ) )
    print('Created new file.')
</snippet></ROW><ROW><id>11254089</id><snippet>os.path</snippet></ROW><ROW><id>11254089</id><snippet>import sys
import pickle
import urllib2

request = urllib2.Request('http://ecal.forexpros.com/e_cal.php?duration=weekly')
response = urllib2.urlopen(request) # Make the request
# Grab everything before the dynabic double-click link
htmlString = response.read().split('&lt;iframe src="http://fls.doubleclick')[0]

try: 
    file = pickle.load( open( 'D:\\Download\\htmlString.p', 'r'))
    if pickle.load( open( 'D:\\Download\\htmlString.p', 'r')) == htmlString:
        print("Values haven't changed!")
        sys.exit(0)
    else:
        pickle.dump( htmlString, open( 'D:\\Download\\htmlString.p', "w" ) )  
        print('Saving')
except IOError: 
    pickle.dump( htmlString, open( 'D:\\Download\\htmlString.p', "w" ) )
    print('Created new file.')
</snippet></ROW><ROW><id>11254089</id><snippet>Last-Modified</snippet></ROW><ROW><id>11254089</id><snippet>HEAD</snippet></ROW><ROW><id>11254089</id><snippet>If-Modified-Since</snippet></ROW><ROW><id>11254089</id><snippet>import sys
import os.path
import urllib2

url = 'http://www.iana.org/domains/example/'
saved_time_file = 'last time check.txt'

request = urllib2.Request(url)
if os.path.exists(saved_time_file):
    """ If we've previously stored a time, get it and add it to the request"""
    last_time = open(saved_time_file, 'r').read()
    request.add_header("If-Modified-Since", last_time)

try:
    response = urllib2.urlopen(request) # Make the request
except urllib2.HTTPError, err:
    if err.code == 304:
        print "Nothing new."
        sys.exit(0)
    raise   # some other http error (like 404 not found etc); re-raise it.

last_modified = response.info().get('Last-Modified', False)
if last_modified:
    open(saved_time_file, 'w').write(last_modified)
else:
    print("Server did not provide a last-modified property. Continuing...")
    """
    Alternately, you could save the current time in HTTP-date format here:
    http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3
    This might work for some servers that don't provide Last-Modified, but do
    respect If-Modified-Since.
    """

"""
You should get here if the server won't confirm the content is old.
Hopefully that means it's new.
HTML should be in response.read().
"""
</snippet></ROW><ROW><id>11254089</id><snippet>ETags</snippet></ROW><ROW><id>11254104</id><snippet>bs = BeautifulSoup.BeautifulSoup(html)

parent_stack = [None]
res = []
for span in bs.findAll('span', {'style':'white-space:nowrap;display:inline-block'}):
    indent = 1 + span.previousSibling.count(' ') / 5
    id = int(span.find('input')['value'])
    name = span.find('a').text.strip()

    # warning! this assumes that indent-level only ever
    #   increases by 1 level at a time!
    parent_stack = parent_stack[:indent] + [id]
    res.append(parent_stack[-2:])
</snippet></ROW><ROW><id>11254104</id><snippet>[[None, 11669],
 [11669, 19807],
 [11669, 19808],
 [11669, 18923],
 [11669, 29411],
 [11669, 19806],
 [19806, 29412],
 [11669, 11665],
 [11665, 27877],
 [11665, 50713],
 [11665, 27879],
 [11665, 27878],
 [11669, 11394]]
</snippet></ROW><ROW><id>11254465</id><snippet>q</snippet></ROW><ROW><id>11254465</id><snippet>Q</snippet></ROW><ROW><id>11254465</id><snippet>perl</snippet></ROW><ROW><id>11254465</id><snippet>Q</snippet></ROW><ROW><id>11254465</id><snippet>#!/usr/bin/env perl

use strict; use warnings;
use autodie;

use Fcntl qw(:seek);
use List::Util qw( sum );

my ($input_file) = @ARGV;
die "Need input file\n" unless defined $input_file;

my $HEADER_SIZE = 4_096;

my @typedef = (
    {
        fields =&gt; [
            qw(
                TS_INCR_LO
                TS_INCR_HI
                SEQID
                OP
                LUN
                NBLKS
                LBA_LO
                LBA_HI
            )
        ],
        tmpl =&gt; 'LLLSSLLL',
        start =&gt; 0,
        size =&gt; 28,
    },
    {
        fields =&gt; [
            qw(
                TS_INCR_LO
                TS_INCR_HI
                SEQID
                OP
                LUN
                LATENCY_TICKS
                HOST_ID
                HOST_LUN
            )
        ],
        tmpl =&gt; 'LLLSSLSS',
        start =&gt; 28,
        size =&gt; 24,
    },
);

open my $input, '&lt;:raw', $input_file;

seek $input, $HEADER_SIZE, SEEK_SET;

my $BLOCK_SIZE = sum map $_-&gt;{size}, @typedef;
read $input, my($buffer), $BLOCK_SIZE;

my @structs;

for my $t ( @typedef ) {
    my %struct;
    @struct{ @{ $t-&gt;{fields}} } = unpack(
        $t-&gt;{tmpl},
        substr($buffer, $t-&gt;{start}, $t-&gt;{size})
    );
    push @structs, \%struct;
}

use Data::Dumper;
print Dumper \@structs;
</snippet></ROW><ROW><id>11254863</id><snippet>h = '2f'
h_int = int(h, 16)
h_int += 0x90000
</snippet></ROW><ROW><id>11254863</id><snippet>"%x" % h_int
</snippet></ROW><ROW><id>11254902</id><snippet>#</snippet></ROW><ROW><id>11254902</id><snippet>-</snippet></ROW><ROW><id>11254902</id><snippet>2</snippet></ROW><ROW><id>11254902</id><snippet>--#--###-##---#####---#-#</snippet></ROW><ROW><id>11254902</id><snippet>------###-------#####-------</snippet></ROW><ROW><id>11254902</id><snippet>import PIL.Image
import sys

# python chop.py [chop-factor] [in-file] [out-file]

chop = int(sys.argv[1])
image = PIL.Image.open(sys.argv[2]).convert('1')
width, height = image.size
data = image.load()

# Iterate through the rows.
for y in range(height):
    for x in range(width):

        # Make sure we're on a dark pixel.
        if data[x, y] &gt; 128:
            continue

        # Keep a total of non-white contiguous pixels.
        total = 0

        # Check a sequence ranging from x to image.width.
        for c in range(x, width):

            # If the pixel is dark, add it to the total.
            if data[c, y] &lt; 128:
                total += 1

            # If the pixel is light, stop the sequence.
            else:
                break

        # If the total is less than the chop, replace everything with white.
        if total &lt;= chop:
            for c in range(total):
                data[x + c, y] = 255

        # Skip this sequence we just altered.
        x += total


# Iterate through the columns.
for x in range(width):
    for y in range(height):

        # Make sure we're on a dark pixel.
        if data[x, y] &gt; 128:
            continue

        # Keep a total of non-white contiguous pixels.
        total = 0

        # Check a sequence ranging from y to image.height.
        for c in range(y, height):

            # If the pixel is dark, add it to the total.
            if data[x, c] &lt; 128:
                total += 1

            # If the pixel is light, stop the sequence.
            else:
                break

        # If the total is less than the chop, replace everything with white.
        if total &lt;= chop:
            for c in range(total):
                data[x, y + c] = 255

        # Skip this sequence we just altered.
        y += total

image.save(sys.argv[3])
</snippet></ROW><ROW><id>11254951</id><snippet>self.html_element</snippet></ROW><ROW><id>11254951</id><snippet>self.css_selector</snippet></ROW><ROW><id>11254951</id><snippet>article.find</snippet></ROW><ROW><id>11254951</id><snippet>None</snippet></ROW><ROW><id>11255160</id><snippet>void foo(int a[], int n) {
    for (int i = 0; i &lt; n; i++)
        a[i] = n * 100;
}
</snippet></ROW><ROW><id>11255160</id><snippet>n * 100</snippet></ROW><ROW><id>11255160</id><snippet>def foo(a, n):
    for i in xrange(len(a)):
        a[i] = n * 100
</snippet></ROW><ROW><id>11255160</id><snippet>n * 100</snippet></ROW><ROW><id>11255160</id><snippet>__mul__</snippet></ROW><ROW><id>11255409</id><snippet>site_info = Makesite.objects.get(sitename=site).siteinfo.get(description=name)
site_info.description = "new description"
site_info.save()
</snippet></ROW><ROW><id>11255409</id><snippet>site_info = Siteinfo.objects.get(makesite__sitename=site, description=name) # only 1 query
site_info.description = "new description"
site_info.save()
</snippet></ROW><ROW><id>11255422</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; mylist = [20, 30, 25, 20, 30]
&gt;&gt;&gt; max(k for k,v in Counter(mylist).items() if v&gt;1)
30
</snippet></ROW><ROW><id>11255674</id><snippet>Windows, winDows, windows, windowS</snippet></ROW><ROW><id>11255674</id><snippet>templateDir = os.path.join(os.path.join(os.path.split(currDir)[0], "templates"), "Templates")
</snippet></ROW><ROW><id>11255674</id><snippet>templateDir = os.path.join(os.path.join(os.path.split(currDir)[0], "templates"), "templates")
</snippet></ROW><ROW><id>11256546</id><snippet>join</snippet></ROW><ROW><id>11256841</id><snippet>def metest(name, bases, dict):
    print name, bases, dict
    dict['__doc__'] = """New Doc"""
    cls = type(name+"_meta", bases, dict)
    return cls

class Test(object):
    "Old doc"
    __metaclass__ = metest

print Test
print Test.__doc__

t = Test()

print t.__doc__
</snippet></ROW><ROW><id>11256841</id><snippet>cls</snippet></ROW><ROW><id>11257635</id><snippet>DESCRIBE</snippet></ROW><ROW><id>11257635</id><snippet>.schema TEST</snippet></ROW><ROW><id>11258020</id><snippet>import simplejson as json
</snippet></ROW><ROW><id>11258020</id><snippet>try:
    import json
except:
    import simplejson as json
url = "http://maps.googleapis.com/maps/api/distancematrix/json?origins=Vancouver+BC|Seattle&amp;destinations=San+Francisco|Victoria+BC&amp;mode=bicycling&amp;language=fr-FR&amp;sensor=false"
contents = urllib2.urlopen(url).read()
json_array = json.loads(contents)
print repr(json_array)
</snippet></ROW><ROW><id>11258135</id><snippet>a = [x for x in "abyffgh fg99"]
b = [x for x in "999aby99ff9h9"]
c = a[:]

s = SequenceMatcher(None, a, b)

i = 0
for tag, i1, i2, j1, j2 in s.get_opcodes():
    print ("%7s a[%d:%d] (%s) b[%d:%d] (%s) c[%d:%d] (%s)" % 
    (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2], i1, i2, c[i1 + i:i2 + i]))
    if tag == "delete":
        del c[i1 + i:i2 + i]
        i -= i2 - i1
    elif tag == "replace":
        c[i1 + i:i2 + i] = b[j1:j2]
        i -= i2 - i1 - j2 + j1
    elif tag == "insert":
        c[i1 + i:i2 + i] = b[j1:j2]
        i += j2 - j1
    print c
    print i
print c
print b
print c == b
a == b
</snippet></ROW><ROW><id>11258135</id><snippet>['9', '9', '9', 'a', 'b', 'y', '9', '9', 'f', 'f', '9', 'h', ' ', 'f', 'g', '9', '9']
5
 delete a[7:10] ([' ', 'f', 'g']) b[12:12] ([]) c[7:10] ([' ', 'f', 'g'])
['9', '9', '9', 'a', 'b', 'y', '9', '9', 'f', 'f', '9', 'h', '9', '9']
1
  equal a[10:11] (['9']) b[12:13] (['9']) c[10:11] (['h'])
['9', '9', '9', 'a', 'b', 'y', '9', '9', 'f', 'f', '9', 'h', '9', '9']
1
 delete a[11:12] (['9']) b[13:13] ([]) c[11:12] (['9'])
['9', '9', '9', 'a', 'b', 'y', '9', '9', 'f', 'f', '9', 'h', '9']
-1
['9', '9', '9', 'a', 'b', 'y', '9', '9', 'f', 'f', '9', 'h', '9']
['9', '9', '9', 'a', 'b', 'y', '9', '9', 'f', 'f', '9', 'h', '9']
True
</snippet></ROW><ROW><id>11258181</id><snippet>from pyramid.view import view_config

@view_config(name='javascript', renderer='templates/javascript.mako')
def my_js_view(request):
    request.response.content_type = 'application/javascript'
    return {... params ...}
</snippet></ROW><ROW><id>11258250</id><snippet>   def save(self, *args, **kwargs):
       # test the truth value of the builtin "id" function
       if(id):  
           # create a local variable "full_cost" 
           full_cost = self.calculate_full_cost()
       # call on super with a wrong base class
       super(Banquet, self).save(*args, **kwargs)
       # and exit, discarding the value of "full_cost"
</snippet></ROW><ROW><id>11258451</id><snippet>Python 2.6.6 (r266:84292, Sep 15 2010, 15:52:39) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; word = ["answer:42"]
&gt;&gt;&gt; def split1(word=word):
...     tag = word[0].split(":")[0].decode("utf-8")
...     value = int(word[0].split(":")[1])
... 
&gt;&gt;&gt; def split2(word=word):
...     tokens = word[0].split(":") 
...     tag = tokens[0].decode("utf-8")
...     value = int(tokens[1])
... 
&gt;&gt;&gt; t2 = timeit.Timer("split2()", "from __main__ import split2")
&gt;&gt;&gt; t2.timeit()
2.5862038135528564
&gt;&gt;&gt; t1 = timeit.Timer("split1()", "from __main__ import split1")
&gt;&gt;&gt; t1.timeit()
2.8647868633270264
</snippet></ROW><ROW><id>11258525</id><snippet>import threading, urllib2
import Queue

def read_url(url, queue):
    data = urllib2.urlopen(url).read()
    print('Fetched %s from %s' % (len(data), url))
    queue.put(data)

def fetch_parallel():
    result = Queue.Queue()
    threads = [threading.Thread(target=read_url, args = (url,result)) for url in urls_to_load]
    for t in threads:
        t.start()
    for t in threads:
        t.join()
    return result

def fetch_sequencial():
    result = Queue.Queue()
    for i in xrange(1, 20):
        read_url("http://www.stackoverflow.com", result)
    return result
</snippet></ROW><ROW><id>11258525</id><snippet>xrange</snippet></ROW><ROW><id>11258525</id><snippet>range</snippet></ROW><ROW><id>11258917</id><snippet>environ</snippet></ROW><ROW><id>11258917</id><snippet>start_response</snippet></ROW><ROW><id>11258917</id><snippet>def my_index(environ):
    response_headers = [('Content-type', 'text/plain')]
    return response_headers, environ['PATH_INFO']

def application(env, st):
    response = None
    data = None
    if environ['PATH_INFO'] == '/index':
        response, data = my_index(environ)

    st('200 ok', response)

    return [data]
</snippet></ROW><ROW><id>11258927</id><snippet>apt-cache search libcairo2
apt-get install libcairo2
</snippet></ROW><ROW><id>11259376</id><snippet>'id'</snippet></ROW><ROW><id>11259376</id><snippet>post=Meekme.objects.get(id='id')
</snippet></ROW><ROW><id>11259376</id><snippet>def cribdetail(request, meekme_id):
    post=Meekme.objects.get(id=meekme_id)
    return render_to_response('postdetail.html',{'post':post, 'Meekme':Meekme},context_instance=RequestContext(request))
</snippet></ROW><ROW><id>11259376</id><snippet>meekme_id</snippet></ROW><ROW><id>11259376</id><snippet>url(r'^example/(?P&lt;meekme_id&gt;\d+)/$', 'example.views.cribdetail'),
</snippet></ROW><ROW><id>11259376</id><snippet>example/3/</snippet></ROW><ROW><id>11259376</id><snippet>cribdetail</snippet></ROW><ROW><id>11259376</id><snippet>meekme_id</snippet></ROW><ROW><id>11259429</id><snippet>"delete-event"</snippet></ROW><ROW><id>11259429</id><snippet>gtk.Widget</snippet></ROW><ROW><id>11259429</id><snippet>"destory"</snippet></ROW><ROW><id>11259429</id><snippet>gtk.Object</snippet></ROW><ROW><id>11259429</id><snippet>#!/usr/bin/env python

import gtk

def on_addName_destroy(gtkobject, data=None):
    print "This is called later after delete-event callback has been called"
    print "Indication that the reference of this object should be destroyed"
    print "============================================"

def on_addName_delete(widget, event, data=None):
    print "This is called on delete request"
    print "Propagation of this event further can be controlled by return value"
    print "--------------------------------------------"
    return False

def show_popup(widget, data=None):
    dialog = gtk.Window(gtk.WINDOW_TOPLEVEL)
    dialog.set_size_request(100, 100)
    label = gtk.Label("Hello!")
    dialog.add(label)
    dialog.connect("delete-event", on_addName_delete)
    dialog.connect("destroy", on_addName_destroy)
    dialog.show_all()

window = gtk.Window(gtk.WINDOW_TOPLEVEL)
window.set_size_request(100, 100)
button = gtk.Button("Popup")
button.connect("clicked", show_popup)
window.add(button)
window.connect("destroy", lambda x: gtk.main_quit())
window.show_all()

gtk.main()
</snippet></ROW><ROW><id>11259935</id><snippet>import cutils_ext
import cutils_ext.cutils_ext
</snippet></ROW><ROW><id>11259935</id><snippet>upper_folder (a folder)
    cutils_ext (folder)
        __init__.py (file)
        cutils_ext.so (obviously file)
</snippet></ROW><ROW><id>11260221</id><snippet>TkInter</snippet></ROW><ROW><id>11260221</id><snippet>Label</snippet></ROW><ROW><id>11260221</id><snippet>ImageTk.PhotoImage</snippet></ROW><ROW><id>11260221</id><snippet>image</snippet></ROW><ROW><id>11260221</id><snippet>PhotoImage</snippet></ROW><ROW><id>11260221</id><snippet>import Tkinter
import Image, ImageTk
root = Tkinter.Tk()
label = Tkinter.Label(root)
def change_image(image):
    photoimage = ImageTk.PhotoImage(image)
    label.config(image=photoimage)
root.mainloop()
</snippet></ROW><ROW><id>11260221</id><snippet>change_image()</snippet></ROW><ROW><id>11260273</id><snippet>if postsport == "sailing" or "diving" or "surfing" or "kite boarding" or "kayaking" or "general sea":
        postelement ="sea"
</snippet></ROW><ROW><id>11260273</id><snippet>test = ("sailing" or "diving" or "surfing" or "kite boarding" or "kayaking" or "general sea")
if postport == test:
    postelement ="sea"
</snippet></ROW><ROW><id>11260273</id><snippet>Python 2.6.6 (r266:84292, Sep 15 2010, 15:52:39) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; "a" or "b" or "c"
'a'
&gt;&gt;&gt; "" or "b" or ""
'b'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11260273</id><snippet>if postsport in ("sailing", "diving", "surfing", "kite boarding", "kayaking", "general sea"):
    postelement ="sea"
</snippet></ROW><ROW><id>11260273</id><snippet>sportelements = {
    "sailing" : "sea",
    "diving" : "sea",
    # etc
    }
postelement = sportelements.get(postport, "general")
</snippet></ROW><ROW><id>11260520</id><snippet>nvcc -cubin</snippet></ROW><ROW><id>11260520</id><snippet>driver.module_from_file()</snippet></ROW><ROW><id>11260581</id><snippet>persistence.Persistent</snippet></ROW><ROW><id>11260581</id><snippet>BTrees</snippet></ROW><ROW><id>11260581</id><snippet>PeristentList</snippet></ROW><ROW><id>11260581</id><snippet>Persistent</snippet></ROW><ROW><id>11260581</id><snippet>PersistentList</snippet></ROW><ROW><id>11260581</id><snippet>BTrees</snippet></ROW><ROW><id>11260581</id><snippet>Data.fs</snippet></ROW><ROW><id>11260581</id><snippet>Data.fs</snippet></ROW><ROW><id>11260581</id><snippet>PersistentList</snippet></ROW><ROW><id>11260581</id><snippet>VACUUM</snippet></ROW><ROW><id>11260581</id><snippet>.pack()</snippet></ROW><ROW><id>11260581</id><snippet>db</snippet></ROW><ROW><id>11260581</id><snippet>t</snippet></ROW><ROW><id>11260581</id><snippet>days</snippet></ROW><ROW><id>11260581</id><snippet>time.time()</snippet></ROW><ROW><id>11260581</id><snippet>days</snippet></ROW><ROW><id>11260581</id><snippet>t</snippet></ROW><ROW><id>11260581</id><snippet>.savepoint</snippet></ROW><ROW><id>11260581</id><snippet>for Gnodes in G.nodes():      # Gnodes iterates over 10000 values 
    Gvalue = someoperation(Gnodes)
    for Hnodes in H.nodes():  # Hnodes iterates over 10000 values 
        Hvalue =someoperation(Hnodes)
        score = SomeOperation on (Gvalue,Hvalue)
        btree_container.setdefault(Gnodes, PersistentList()).append(
            [Hnodes, score, -1 ])
    transaction.savepoint(True)
transaction.commit()
</snippet></ROW><ROW><id>11260581</id><snippet>optimistic</snippet></ROW><ROW><id>11260581</id><snippet>transaction.commit()</snippet></ROW><ROW><id>11260581</id><snippet>HNodes</snippet></ROW><ROW><id>11260581</id><snippet>GNodes</snippet></ROW><ROW><id>11260581</id><snippet>GNodes</snippet></ROW><ROW><id>11260581</id><snippet>H.nodes()</snippet></ROW><ROW><id>11260581</id><snippet>BTrees.OOBTree.TreeSet</snippet></ROW><ROW><id>11260581</id><snippet>BTrees.IOBTree.BTree</snippet></ROW><ROW><id>11260581</id><snippet>PersistentList</snippet></ROW><ROW><id>11260581</id><snippet>TreeSet</snippet></ROW><ROW><id>11260581</id><snippet>BTree</snippet></ROW><ROW><id>11260581</id><snippet>for i, Hnodes in enumerate(H.nodes()):
    ...
    btree_container.setdefault(Gnodes, IOBTree())[i] = [Hnodes, score, -1]
    if i % 100 == 0:
        transaction.savepoint(True)
</snippet></ROW><ROW><id>11260581</id><snippet>HNodes</snippet></ROW><ROW><id>11260581</id><snippet>H.nodes()</snippet></ROW><ROW><id>11260671</id><snippet>import cv2.cv as cv
import urllib2
from cStringIO import StringIO
import PIL.Image as pil
url="some_url"

img_file = urllib2.urlopen(url)
im = StringIO(img_file.read())
source = pil.open(im).convert("RGB")
bitmap = cv.CreateImageHeader(source.size, cv.IPL_DEPTH_8U, 3)
cv.SetData(bitmap, source.tostring())
cv.CvtColor(bitmap, bitmap, cv.CV_RGB2BGR)
</snippet></ROW><ROW><id>11260819</id><snippet>a=[('a','k1'),('b','k2'),('a','k2'),('a','k1'),('b','k2'),('a','k1'),('b','k2'),('c','k3'),('c','k4')]
from collections import defaultdict
b = defaultdict(int)
for item in a:
    b[item] += 1

print b
defaultdict(&lt;type 'int'&gt;, {('a', 'k2'): 1, ('c', 'k3'): 1, ('b', 'k2'): 3, ('a', 'k1'): 3, ('c', 'k4'): 1})
</snippet></ROW><ROW><id>11260819</id><snippet>for key, value in b.iteritems():
    print '%s %s %s' % (key[0], key[1], value)
</snippet></ROW><ROW><id>11261014</id><snippet>win1</snippet></ROW><ROW><id>11261014</id><snippet>win1</snippet></ROW><ROW><id>11261014</id><snippet>win1.pack(side="top", fill="both", expand=True)
</snippet></ROW><ROW><id>11261014</id><snippet>win</snippet></ROW><ROW><id>11261014</id><snippet>frame_table</snippet></ROW><ROW><id>11261014</id><snippet>win1</snippet></ROW><ROW><id>11261035</id><snippet>import xml.sax

class MyXsdHandler(xml.sax.handler.ContentHandler):
    def parse(self, f):
        self.result = {}
        s = open(f, "r").read()
        xml.sax.parseString(s, self)
        return self.result

    def startElement(self, name, attrs):
        if name == "xsd:element":
            d = dict(attrs)
            self.result[attrs["name"]] = d

results = MyXsdHandler().parse("myfile.xsd")
</snippet></ROW><ROW><id>11261035</id><snippet>interestingAttrs = ["type", ...] #all attributes you need
#inside the if in startElement
#python 2:
d = dict()
for a in interestingAttrs: d[a] = attrs[a]

#python 3:
d = {a: attrs[a] for a in interestingAttrs}
</snippet></ROW><ROW><id>11261062</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; l = [('admincases', 'test_case_6'), ('admincases', 'test_case_8'),('admincases1', 'test_case_8'),('admincases1', 'test_case_9'),('admincases1', 'test_case_10')]
&gt;&gt;&gt; for k,v in l:
...    d[k].append(v)
... 
&gt;&gt;&gt; d['admincases']
['test_case_6', 'test_case_8']
</snippet></ROW><ROW><id>11261181</id><snippet>x</snippet></ROW><ROW><id>11261181</id><snippet>[week_array[:] for _ in range(4)]
</snippet></ROW><ROW><id>11261512</id><snippet>&gt;&gt;&gt; a = [["hello", "hi"], ["hello", "hi"], ["how", "what"], ["hello", "hi"], ["how", "what"]]
&gt;&gt;&gt; set(map(tuple, a))
set([('how', 'what'), ('hello', 'hi')])
</snippet></ROW><ROW><id>11261535</id><snippet>logging</snippet></ROW><ROW><id>11261535</id><snippet>logging.currentframe</snippet></ROW><ROW><id>11261535</id><snippet>from inspect import getframeinfo
from logging import currentframe
from datetime import datetime

def callingFrame():
    return getframeinfo(currentframe())

def gTime():
    position = "%s [%s] - " % (str(datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f").rstrip('0')), callingFrame().lineno)
    return position 

print gTime()
</snippet></ROW><ROW><id>11262060</id><snippet>&gt;&gt;&gt; def f():
...     x = [1,2,3,4,5,6,7]
...     return x
... 
&gt;&gt;&gt; def g():
...     x = (1,2,3,4,5,6,7)
...     return x
... 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_CONST               1 (1)
              3 LOAD_CONST               2 (2)
              6 LOAD_CONST               3 (3)
              9 LOAD_CONST               4 (4)
             12 LOAD_CONST               5 (5)
             15 LOAD_CONST               6 (6)
             18 LOAD_CONST               7 (7)
             21 BUILD_LIST               7
             24 STORE_FAST               0 (x)

  3          27 LOAD_FAST                0 (x)
             30 RETURN_VALUE     
&gt;&gt;&gt;
&gt;&gt;&gt;   
&gt;&gt;&gt; dis.dis(g)
  2           0 LOAD_CONST               8 ((1, 2, 3, 4, 5, 6, 7))
              3 STORE_FAST               0 (x)

  3           6 LOAD_FAST                0 (x)
              9 RETURN_VALUE   
</snippet></ROW><ROW><id>11262079</id><snippet>def query(self, query):
    lock = QMutexLocker(self.mutex)
    reply = self.conn.query(query)
    if re.search("error", reply):
        lock.unlock()
        raise GeneralError("Query error")
</snippet></ROW><ROW><id>11262079</id><snippet>lock</snippet></ROW><ROW><id>11262079</id><snippet>self.conn.query</snippet></ROW><ROW><id>11262079</id><snippet>auto</snippet></ROW><ROW><id>11262092</id><snippet>__unicode__</snippet></ROW><ROW><id>11262092</id><snippet>def __unicode__(self):
    return unicode(self.person)
</snippet></ROW><ROW><id>11262200</id><snippet>HtmlFormatter</snippet></ROW><ROW><id>11262200</id><snippet>linenos</snippet></ROW><ROW><id>11262222</id><snippet>deferred.defer(func, key=key, _target='1.backend1')
</snippet></ROW><ROW><id>11262463</id><snippet>with open('file1.txt') as f1,open('file2.txt','w') as f2:
 for line in f1: 
   x=line.split()   #now x is ['AlphaforBravo007', '102000000010170000000001', 'SusanaForCharlie', '1000', 'end']
   f2.write('\n'.join((x[1],x[3]))+'\n')
</snippet></ROW><ROW><id>11262463</id><snippet>file2.txt</snippet></ROW><ROW><id>11262463</id><snippet>102000000010170000000001
1000
</snippet></ROW><ROW><id>11262479</id><snippet>&gt;&gt;&gt; from urllib.parse import urlparse
&gt;&gt;&gt; url = 'http://example.com/random/folder/path.html'
&gt;&gt;&gt; parse_object = urlparse(url)
&gt;&gt;&gt; parse_object.netloc
'example.com'
&gt;&gt;&gt; parse_object.path
'/random/folder/path.html'
&gt;&gt;&gt; parse_object.scheme
'http'
</snippet></ROW><ROW><id>11262479</id><snippet>parse_object.netloc</snippet></ROW><ROW><id>11262479</id><snippet>parse_object.path</snippet></ROW><ROW><id>11262479</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("sstatic.net")
&gt;&gt;&gt; conn.request("HEAD", "/stackoverflow/img/favicon.ico")
&gt;&gt;&gt; res = conn.getresponse()
&gt;&gt;&gt; print res.getheaders()
[('content-length', '1150'), ('x-powered-by', 'ASP.NET'), ('accept-ranges', 'bytes'),         ('last-modified', 'Mon, 02 Aug 2010 06:04:04 GMT'), ('etag', '"2187d82832cb1:0"'), ('cache-control', 'max-age=604800'), ('date', 'Sun, 12 Sep 2010 13:39:26 GMT'), ('content-type', 'image/x-icon')]
</snippet></ROW><ROW><id>11262479</id><snippet>http://goo.gl/IwruD</snippet></ROW><ROW><id>11262479</id><snippet>http://ubuntu.icafebusiness.com/images/ubuntugui2.jpg</snippet></ROW><ROW><id>11262479</id><snippet>'location'</snippet></ROW><ROW><id>11262479</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("goo.gl")
&gt;&gt;&gt; conn.request("HEAD", "/IwruD")
&gt;&gt;&gt; res = conn.getresponse()
&gt;&gt;&gt; print res.getheaders()
[('x-xss-protection', '1; mode=block'),
 ('x-content-type-options', 'nosniff'),
 ('transfer-encoding', 'chunked'),
 ('age', '64'),
 ('expires', 'Mon, 01 Jan 1990 00:00:00 GMT'),
 ('server', 'GSE'),
 ('location', 'http://ubuntu.icafebusiness.com/images/ubuntugui2.jpg'),
 ('pragma', 'no-cache'),
 ('cache-control', 'no-cache, no-store, max-age=0, must-revalidate'),
 ('date', 'Sat, 30 Jun 2012 08:52:15 GMT'),
 ('x-frame-options', 'SAMEORIGIN'),
 ('content-type', 'text/html; charset=UTF-8')]
</snippet></ROW><ROW><id>11262479</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("ubuntu.icafebusiness.com")
&gt;&gt;&gt; conn.request("HEAD", "/images/ubuntugui2.jpg")
&gt;&gt;&gt; res = conn.getresponse()
&gt;&gt;&gt; print res.getheaders()
[('content-length', '78603'), ('accept-ranges', 'bytes'), ('server', 'Apache'), ('last-modified', 'Sat, 16 Aug 2008 01:36:17 GMT'), ('etag', '"1fb8277-1330b-45489c3ad2640"'), ('date', 'Sat, 30 Jun 2012 08:55:46 GMT'), ('content-type', 'image/jpeg')]
</snippet></ROW><ROW><id>11262479</id><snippet>&gt;&gt;&gt; r = res.getheaders()
&gt;&gt;&gt; redirected = False
&gt;&gt;&gt; for e in r:
&gt;&gt;&gt;     if(e[0] == 'location'):
&gt;&gt;&gt;         redirected = e
&gt;&gt;&gt;
&gt;&gt;&gt; if(redirected != False):
&gt;&gt;&gt;     print redirected[1]
'http://ubuntu.icafebusiness.com/images/ubuntugui2.jpg'
</snippet></ROW><ROW><id>11262492</id><snippet>str = 'If you do not know where you are going, any road will get you there.'
info = {'you': [(3, 3), (25, 3)], 'get you': [(54, 7)], 'know': [(14, 4)]}
replacer = [('you', '&lt;b&gt;you&lt;/b&gt;'), ('know', '&lt;i&gt;know&lt;/i&gt;')]

info2 = {}
replacer2 = {}

for original, replacement in replacer:
    replacer2[original] = replacement

for k, v in info.items():
    for start, length in v:
        replacement = None
        if k in replacer2:
            replacement = replacer2[k]
        info2[start] = (k, length, replacement)

for position in sorted(info2.iterkeys(), reverse=True):
    original, length, replacement = info2[position]
    if replacement is not None:
        str[:position] + replacement + str[position + length]

print str
</snippet></ROW><ROW><id>11262593</id><snippet>xrange</snippet></ROW><ROW><id>11262593</id><snippet>range</snippet></ROW><ROW><id>11262593</id><snippet>isprime</snippet></ROW><ROW><id>11262593</id><snippet>for x in xrange(3, int(n**0.5)+1, 2):
</snippet></ROW><ROW><id>11262593</id><snippet>xrange</snippet></ROW><ROW><id>11262593</id><snippet>isprime(n)</snippet></ROW><ROW><id>11262593</id><snippet>True</snippet></ROW><ROW><id>11262593</id><snippet>if</snippet></ROW><ROW><id>11262593</id><snippet>if isprime(number):  # Only works if isprime(number) is boolean True
    ...
</snippet></ROW><ROW><id>11262764</id><snippet>/uploads/foo.jpg</snippet></ROW><ROW><id>11262764</id><snippet>/uploads/foo.jpg</snippet></ROW><ROW><id>11262764</id><snippet>/show/foo.jpg</snippet></ROW><ROW><id>11262764</id><snippet>/uploads/foo.jpg</snippet></ROW><ROW><id>11262764</id><snippet>@app.route('/show/&lt;filename&gt;')
def uploaded_file(filename):
    filename = 'http://127.0.0.1:5000/uploads/' + filename
    return render_template('template.html', filename=filename)

@app.route('/uploads/&lt;filename&gt;')
def send_file(filename):
    return send_from_directory(UPLOAD_FOLDER, filename)
</snippet></ROW><ROW><id>11262869</id><snippet>public</snippet></ROW><ROW><id>11262869</id><snippet>client</snippet></ROW><ROW><id>11262869</id><snippet>JdClient</snippet></ROW><ROW><id>11262869</id><snippet>DefaultJdClient</snippet></ROW><ROW><id>11262869</id><snippet>java.lang.System.out.println('hello world')</snippet></ROW><ROW><id>11262869</id><snippet>from jpype import *
startJVM("d:/tools/j2sdk/jre/bin/client/jvm.dll", "-ea")
client = DefaultJdClient("hello world")
shutdownJVM() 
</snippet></ROW><ROW><id>11262934</id><snippet>grid</snippet></ROW><ROW><id>11263061</id><snippet>import csv
with open('some.csv', 'rb') as f:
    reader = csv.reader(f)
    for row in reader:
        print row
</snippet></ROW><ROW><id>11263061</id><snippet>,</snippet></ROW><ROW><id>11263061</id><snippet>s = """HST_9578_02_ACS_WFC_F775W 245.8976441 -26.5255957 4339.570 1882.364,
HST_10615_03_ACS_WFC_F435W 245.8976450 -26.5255138 2084.978 2101.122,
HST_10120_02_ACS_WFC_F658N 245.8976758 -26.5255024 1778.055 1752.193,
HST_10775_64_ACS_WFC_F606W 245.8977532 -26.5255296 2586.612 2603.519,
HST_10775_64_ACS_WFC_F814W 245.8977532 -26.5255296 2586.612 2603.519,
HST_9578_02_ACS_WFC_F775W 245.8978148 -26.5255491 4328.571 1885.712,
HST_10120_02_ACS_WFC_F625W 245.8978053 -26.5254741 1769.711 1754.229,
HST_10353_02_ACS_WFC_F435W 245.8976003 -26.5257784 3758.430 985.125,
HST_10775_64_ACS_WFC_F606W 245.8979115 -26.5254936 2576.410 2606.114
"""

bl = [[],[],[],[],[]]
for r in s.split(','):
    for c in range(5):
        bl[c].append(r.split()[c])
</snippet></ROW><ROW><id>11263061</id><snippet>bl[0]
['HST_9578_02_ACS_WFC_F775W', 'HST_10615_03_ACS_WFC_F435W', 'HST_10120_02_ACS_WFC_F658N', 'HST_10775_64_ACS_WFC_F606W', 'HST_10775_64_ACS_WFC_F814W', 'HST_9578_02_ACS_WFC_F775W', 'HST_10120_02_ACS_WFC_F625W', 'HST_10353_02_ACS_WFC_F435W', 'HST_10775_64_ACS_WFC_F606W']

bl[1]
['245.8976441', '245.897645', '245.8976758', '245.8977532', '245.8977532', '245.8978148', '245.8978053', '245.8976003', '245.8979115']

bl[2]
['-26.5255957', '-26.5255138', '-26.5255024', '-26.5255296', '-26.5255296', '-26.5255491', '-26.5254741', '-26.5257784', '-26.5254936']

bl[3]
['4339.57', '2084.978', '1778.055', '2586.612', '2586.612', '4328.571', '1769.711', '3758.43', '2576.41']

bl[4]
['1882.364', '2101.122', '1752.193', '2603.519', '2603.519', '1885.712', '1754.229', '985.125', '2606.114']
</snippet></ROW><ROW><id>11263061</id><snippet>import csv

with open('so.csv') as f:
    bl = [[],[],[],[],[]]
    reader = csv.reader(f)
    for row in reader:
        for col in range(5):
            bl[col].append(row[col])
</snippet></ROW><ROW><id>11263061</id><snippet>with</snippet></ROW><ROW><id>11263077</id><snippet>__import__()</snippet></ROW><ROW><id>11263077</id><snippet>import foo
</snippet></ROW><ROW><id>11263077</id><snippet>foo = __import__("foo")
</snippet></ROW><ROW><id>11263077</id><snippet>import foo as bar
</snippet></ROW><ROW><id>11263077</id><snippet>bar = __import__("foo")
</snippet></ROW><ROW><id>11263077</id><snippet>__import__()</snippet></ROW><ROW><id>11263077</id><snippet>&gt;&gt;&gt; dis.dis(compile("import foo", "", "exec"))
  1           0 LOAD_CONST               0 (-1)
              3 LOAD_CONST               1 (None)
              6 IMPORT_NAME              0 (foo)
              9 STORE_NAME               0 (foo)
             12 LOAD_CONST               1 (None)
             15 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(compile("import foo as bar", "", "exec"))
  1           0 LOAD_CONST               0 (-1)
              3 LOAD_CONST               1 (None)
              6 IMPORT_NAME              0 (foo)
              9 STORE_NAME               1 (bar)
             12 LOAD_CONST               1 (None)
             15 RETURN_VALUE        
</snippet></ROW><ROW><id>11263077</id><snippet>IMPORT_NAME</snippet></ROW><ROW><id>11263077</id><snippet>__import__()</snippet></ROW><ROW><id>11263077</id><snippet>STORE_NAME</snippet></ROW><ROW><id>11263241</id><snippet>AF_UNIX</snippet></ROW><ROW><id>11263241</id><snippet>unix(7)</snippet></ROW><ROW><id>11263241</id><snippet>sockets</snippet></ROW><ROW><id>11263241</id><snippet>AF_INET6</snippet></ROW><ROW><id>11263241</id><snippet>struct</snippet></ROW><ROW><id>11263241</id><snippet>Struct</snippet></ROW><ROW><id>11263534</id><snippet>list</snippet></ROW><ROW><id>11263534</id><snippet>list</snippet></ROW><ROW><id>11263534</id><snippet>__builtin__.list</snippet></ROW><ROW><id>11263534</id><snippet>__builtin__.list</snippet></ROW><ROW><id>11263534</id><snippet>list</snippet></ROW><ROW><id>11263559</id><snippet>d = {}
with open("input") as f:
    for line in f:
        key, dummy, dummy, value, dummy = line.split()
        d[key] = float(value)
</snippet></ROW><ROW><id>11263791</id><snippet>def common_count(t0, t1):
  "returns the length of the longest common prefix"
  for i, pair in enumerate(zip(t0, t1)):
    if pair[0] != pair[1]:
      return i
  return i

def group_by_longest_prefix(iterable):
  "given a sorted list of strings, group by longest common prefix"
  longest = 0
  out = []

  for t in iterable:
    if out: # if there are previous entries 

      # determine length of prefix in common with previous line
      common = common_count(t, out[-1])

      # if the current entry has a shorted prefix, output previous 
      # entries as a group then start a new group
      if common &lt; longest:
        yield out
        longest = 0
        out = []
      # otherwise, just update the target prefix length
      else:
        longest = common

    # add the current entry to the group
    out.append(t)

  # return remaining entries as the last group
  if out:
    yield out
</snippet></ROW><ROW><id>11263791</id><snippet>text = """
TOKYO-BLING.1 H02-AVAILABLE
TOKYO-BLING.1 H02-MIDDLING
TOKYO-BLING.1 H02-TOP
TOKYO-BLING.2 H04-USED
TOKYO-BLING.2 H04-AVAILABLE
TOKYO-BLING.2 H04-CANCELLED
WAY-VERING.1 H03-TOP
WAY-VERING.2 H03-USED
WAY-VERING.2 H03-AVAILABLE
WAY-VERING.1 H03-CANCELLED
"""

T = sorted(t.strip() for t in text.split("\n") if t)

for L in group_by_longest_prefix(T):
  print L
</snippet></ROW><ROW><id>11263791</id><snippet>['TOKYO-BLING.1 H02-AVAILABLE', 'TOKYO-BLING.1 H02-MIDDLING', 'TOKYO-BLING.1 H02-TOP']
['TOKYO-BLING.2 H04-AVAILABLE', 'TOKYO-BLING.2 H04-CANCELLED', 'TOKYO-BLING.2 H04-USED']
['WAY-VERING.1 H03-CANCELLED', 'WAY-VERING.1 H03-TOP']
['WAY-VERING.2 H03-AVAILABLE', 'WAY-VERING.2 H03-USED']
</snippet></ROW><ROW><id>11263822</id><snippet>newl = [ n for n in l if all([ m % 3 == 0  for m in n.memList]) ]
</snippet></ROW><ROW><id>11263863</id><snippet>from itertools import takewhile,izip

x = [[3,2,1], [3,2,1,4,5], [3,2,1,8,9], [3,2,1,5,7,8,9]]

def allsame(x):
    return len(set(x)) == 1

r = [i[0] for i in takewhile(allsame ,izip(*x))]
</snippet></ROW><ROW><id>11264043</id><snippet>&lt;link rel="alternate" type="application/atom+xml" title="Feed of questions tagged python" href="/feeds/tag/python" /&gt;
</snippet></ROW><ROW><id>11264043</id><snippet>&lt;link rel="alternate"&gt;</snippet></ROW><ROW><id>11264043</id><snippet>application/atom+xml</snippet></ROW><ROW><id>11264043</id><snippet>application/rss+xml</snippet></ROW><ROW><id>11264056</id><snippet>pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
</snippet></ROW><ROW><id>11264056</id><snippet>.</snippet></ROW><ROW><id>11264203</id><snippet>import threading
import Queue

q = Queue.Queue()

def worker():
    item = q.get(block=True)  # sleeps forever for now
    do_work(item)
    q.task_done()

# create infinite number of workers threads and fails
# after some time with "error: can't start new thread"
while True:
    t = threading.Thread(target=worker)
    t.start()
q.join() # newer reached this
</snippet></ROW><ROW><id>11264203</id><snippet>q = Queue()

def worker():
    while True:
        item = q.get()
        do_work(item)
        q.task_done()

for i in range(num_worker_threads):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

for item in source():
    q.put(item)

q.join()       # block until all tasks are done
</snippet></ROW><ROW><id>11264203</id><snippet>while</snippet></ROW><ROW><id>11264203</id><snippet>class Worker(Thread):
    break_msg = object() # just uniq mark sign

    def __init__(self):
        self.continue = True

    def run():
        while self.continue:  # can stop and destroy thread, (var 1)
            msg = queue.get(block=True)
            if msg == self.break_msg:
                return  # will stop and destroy thread (var 2)
            do_work()
            queue.task_done()

workers = [Worker() for _ in xrange(num_workers)]
for w in workers:
    w.start()
for task in tasks:
    queue.put(task)

for _ in xrange(num_workers):
    queue.put(Worker.break_msg) # stop thread after all tasks done. Need as many messages as many threads you have
OR
queue.join() # wait until all tasks done
for w in workers:
    w.continue = False
    w.put(None)
</snippet></ROW><ROW><id>11264402</id><snippet>datetime</snippet></ROW><ROW><id>11264402</id><snippet>today_start</snippet></ROW><ROW><id>11264402</id><snippet>today_end</snippet></ROW><ROW><id>11264402</id><snippet>from datetime import datetime, timedelta, time

today = datetime.now.date()
tomorrow = today + timedelta(1)
today_start = datetime.combine(today, time())
today_end = datetime.combine(tomorrow, time())
</snippet></ROW><ROW><id>11264402</id><snippet>today_end</snippet></ROW><ROW><id>11264402</id><snippet>today_start</snippet></ROW><ROW><id>11264402</id><snippet>class EventManager(models.Manager):
    def bookings_today(self, location_id):
        # Construction of today_end / today_start as above, omitted for brevity
        return self.filter(location=location_id, start__lte=today_end, end__gte=today_start)
</snippet></ROW><ROW><id>11264402</id><snippet>DateTimeField</snippet></ROW><ROW><id>11264402</id><snippet>DateField</snippet></ROW><ROW><id>11264402</id><snippet>foo_date</snippet></ROW><ROW><id>11264402</id><snippet>start</snippet></ROW><ROW><id>11264402</id><snippet>end</snippet></ROW><ROW><id>11264682</id><snippet>import select, sys
r, w, x = select.select([sys.stdin], [], [], 3)
</snippet></ROW><ROW><id>11264682</id><snippet>r</snippet></ROW><ROW><id>11264717</id><snippet>url(r'^cribme/(?P&lt;meekme_id&gt;\d+)/$', 'meebapp.views.cribdetail', name='cribdetail'),
</snippet></ROW><ROW><id>11264717</id><snippet>url(r'^cribme/(?P&lt;meekme_id&gt;)\d+/$', 'meebapp.views.cribdetail', name='cribdetail'),
</snippet></ROW><ROW><id>11264717</id><snippet>?P&lt;meekme_id&gt;</snippet></ROW><ROW><id>11264717</id><snippet>''</snippet></ROW><ROW><id>11264717</id><snippet>\d+</snippet></ROW><ROW><id>11265050</id><snippet>self</snippet></ROW><ROW><id>11265050</id><snippet>__mul__()</snippet></ROW><ROW><id>11265050</id><snippet>other</snippet></ROW><ROW><id>11265050</id><snippet>__rmul__()</snippet></ROW><ROW><id>11265050</id><snippet>__mul__</snippet></ROW><ROW><id>11265050</id><snippet>__rmul__</snippet></ROW><ROW><id>11265050</id><snippet>class Vector(object):
    def __mul__(self, other):
        pass

    __rmul__ = __mul__
</snippet></ROW><ROW><id>11265401</id><snippet># untested
from itertools import count
rows = len(csvList)
pctn = rows // 100
perc = count()
for rowno, row in enumerate(csvList):
    if rowno % pctn == 0:
        print '{}%'.format(next(perc))
</snippet></ROW><ROW><id>11265413</id><snippet>~/coding$ cat colgroup.dat
A_1,A_2,A_3,B_1,B_2,B_3
1,2,3,4,5,6
7,8,9,10,11,12
13,14,15,16,17,18
~/coding$ python
Python 2.7.3 (default, Apr 20 2012, 22:44:07) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import pandas
&gt;&gt;&gt; df = pandas.read_csv("colgroup.dat")
&gt;&gt;&gt; df
   A_1  A_2  A_3  B_1  B_2  B_3
0    1    2    3    4    5    6
1    7    8    9   10   11   12
2   13   14   15   16   17   18
&gt;&gt;&gt; grouped = df.groupby(lambda x: x[0], axis=1)
&gt;&gt;&gt; for i, group in grouped:
...     print i, group
... 
A    A_1  A_2  A_3
0    1    2    3
1    7    8    9
2   13   14   15
B    B_1  B_2  B_3
0    4    5    6
1   10   11   12
2   16   17   18
&gt;&gt;&gt; grouped.mean()
key_0   A   B
0       2   5
1       8  11
2      14  17
</snippet></ROW><ROW><id>11265413</id><snippet>lambda x: x.split('_')[0]</snippet></ROW><ROW><id>11265642</id><snippet>np.einsum</snippet></ROW><ROW><id>11265642</id><snippet>np.einsum('im,jm,km-&gt;ijk',x,y,z)
</snippet></ROW><ROW><id>11265753</id><snippet>foo \
.bar \
.baz

(foo
.bar
.baz)
</snippet></ROW><ROW><id>11265806</id><snippet>shutdown</snippet></ROW><ROW><id>11265806</id><snippet>Deferred</snippet></ROW><ROW><id>11265806</id><snippet>IService</snippet></ROW><ROW><id>11265806</id><snippet>reactor.addSystemEventTrigger('before', 'shutdown', myService.stopService)</snippet></ROW><ROW><id>11265806</id><snippet>twistd</snippet></ROW><ROW><id>11265806</id><snippet>Deferred</snippet></ROW><ROW><id>11265851</id><snippet>pylab.seed</snippet></ROW><ROW><id>11265851</id><snippet>&gt;&gt;&gt; pylab.seed(0)
&gt;&gt;&gt; pylab.weibull(2)
0.89211799004566095
&gt;&gt;&gt; pylab.seed(0)
&gt;&gt;&gt; pylab.weibull(2)
0.89211799004566095
</snippet></ROW><ROW><id>11265981</id><snippet>time.sleep(0)</snippet></ROW><ROW><id>11265981</id><snippet>time.sleep(0)</snippet></ROW><ROW><id>11266018</id><snippet>import sys
import pydoc

def output_help_to_file(filepath, request):
    f = file(filepath, 'w')
    sys.stdout = f
    pydoc.help(request)
    f.close()
    sys.stdout = sys.__stdout__
    return
</snippet></ROW><ROW><id>11266018</id><snippet>&gt;&gt;&gt; output_help_to_file(r'test.txt', 're')
</snippet></ROW><ROW><id>11266091</id><snippet>print "this should be",
print "on the same line"
</snippet></ROW><ROW><id>11266091</id><snippet>print "Nope, that is not a two. That is a", x
</snippet></ROW><ROW><id>11266091</id><snippet>print("Nope, that is not a two. That is a", x)
</snippet></ROW><ROW><id>11266096</id><snippet>def time_range(start, end, duration):
    dt = start
    while dt &lt; end: #note: `end` is not included in the range
        yield dt
        dt += duration
</snippet></ROW><ROW><id>11266096</id><snippet>from datetime import datetime, timedelta

# dummy data
duration = timedelta(minutes=10)
start = datetime.utcnow()
end = start + timedelta(hours=16)

# use list instead of tee(), islice() for simplicity 
lst = [dt.strftime('%H:%M') for dt in time_range(start, end, duration)] 
for interval in zip(lst, lst[1:]):
    print "%s-%s," % interval,
print
</snippet></ROW><ROW><id>11266170</id><snippet>ndarray.__array_interface__</snippet></ROW><ROW><id>11266170</id><snippet>pointer, read_only_flag = a.__array_interface__['data']
</snippet></ROW><ROW><id>11266184</id><snippet>AES.new(key, AES.MODE_CBC, iv)</snippet></ROW><ROW><id>11266184</id><snippet>Crypto/Random/OSRNG/__init__.py</snippet></ROW><ROW><id>11266184</id><snippet>if hasattr(os, 'urandom'):
    from Crypto.Random.OSRNG.fallback import new
</snippet></ROW><ROW><id>11266384</id><snippet>$&gt;firefox -print http://www.example.com/index.html
$&gt;firefox -print http://www.example.com/index.html -printmode pdf -printfile foobar.pdf
$&gt;firefox -print http://www.example.com/index.html -printmode PNG
</snippet></ROW><ROW><id>11266420</id><snippet>In [1]: from scipy.sparse import csr_matrix

In [2]: def sum_sparse(m):
   ...:     x = np.zeros(m[0].shape)
   ...:     for a in m:
   ...:         ri = np.repeat(np.arange(a.shape[0]),np.diff(a.indptr))
   ...:         x[ri,a.indices] += a.data
   ...:     return x
   ...: 

In [6]: m = [np.zeros((100,100)) for i in range(1000)]

In [7]: for x in m:
   ...:     x.ravel()[np.random.randint(0,x.size,10)] = 1.0
   ...:     

        m = [csr_matrix(x) for x in m]

In [17]: (sum(m[1:],m[0]).todense() == sum_sparse(m)).all()
Out[17]: True

In [18]: %timeit sum(m[1:],m[0]).todense()
10 loops, best of 3: 145 ms per loop

In [19]: %timeit sum_sparse(m)
100 loops, best of 3: 18.5 ms per loop
</snippet></ROW><ROW><id>11266706</id><snippet>{32 char hex key}|{text1}|{text2}|{text3}
</snippet></ROW><ROW><id>11266706</id><snippet>{32 char hex key}|{text11}|{text12}|{text13}|{text21}|{text22}|{text23}
</snippet></ROW><ROW><id>11266706</id><snippet>import csv

def getnext(csvfile, key=lambda row: int(row[0], 16)):
    row = csvfile.next()
    return key(row),row

with open('file1.dat','rb') as inf1, open('file2.dat','rb') as inf2, open('merged.dat','wb') as outf:
    a = csv.reader(inf1, delimiter='|')
    b = csv.reader(inf2, delimiter='|')
    res = csv.writer(outf, delimiter='|')

    a_key, b_key = -1, 0
    try:
        while True:
            while a_key &lt; b_key:
                a_key, a_row = getnext(a)
            while b_key &lt; a_key:
                b_key, b_row = getnext(b)
            if a_key==b_key:
                res.writerow(a_row + b_row[1:])
    except StopIteration:
        # reached the end of an input file
        pass
</snippet></ROW><ROW><id>11266734</id><snippet>def g(n):
    if n &lt;= 3:
        return n
    a, b, c = 1, 2, 3
    for i in range(3, n):
        a, b, c = b, c, (a * 3 + b * 2 + c)
    return c
</snippet></ROW><ROW><id>11266828</id><snippet>.execute()</snippet></ROW><ROW><id>11266828</id><snippet>def add_record(self, tablename, values):
    the_query = "INSERT INTO {:s} VALUES (?,?);".format(tablename)
    self.sql.execute(the_query, values)
</snippet></ROW><ROW><id>11267125</id><snippet>for line in sys.stdin:
  if line.lower().strip() == 'bye':
    break
  sys.stdout.write(do_something(line))
  sys.stdout.flush()
</snippet></ROW><ROW><id>11267152</id><snippet>from StringIO import StringIO
import csv
import sqlite3 as sq3
from operator import methodcaller, itemgetter
from itertools import groupby

data1 = """068D556A1A665123A6DD2073A36C1CAF
A76EEAF6D310D4FD2F0BD610FAC02C04DFE6EB67
D7C970DFE09687F1732C568AE1CFF9235B2CBB3673EA98DAA8E4507CC8B9A881"""

data2 = """00000040f2213a27ff74019b8bf3cfd1|index.docbook|Redhat 7.3 (32bit)|Linux
00000040f69413a27ff7401b8bf3cfd1|index.docbook|Redhat 8.0 (32bit)|Linux
00000965b3f00c92a18b2b31e75d702c|Localizable.strings|Mac OS X 10.4|OSX
0000162d57845b6512e87db4473c58ea|SYSTEM|Windows 7 Home Premium (32bit)|Windows
000011b20f3cefd491dbc4eff949cf45|totem.devhelp|Linux Ubuntu Desktop 9.10 (32bit)|Linux"""

file1 = StringIO(data1)
file2 = StringIO(data2)

db = sq3.connect(':memory:')
db.execute('create table keys (key)')
db.execute('create table details (key, f1, f2, f3)')

for f1data in file1:
    db.execute('insert into keys values(?)', (f1data.strip(),))

for f2data in file2:
    row = map(methodcaller('strip'), f2data.split('|'))
    db.execute('insert into details values (?,?,?,?)', row)

results = db.execute('select * from keys natural join details')

for key, val in groupby(results, itemgetter(0)):
    print key, list(val)
</snippet></ROW><ROW><id>11267227</id><snippet>#!/usr/bin/env python
import bjsonrpc
from SRPSocket import SRPSocket
import SocketServer
from bjsonrpc.handlers import BaseHandler
import time

class handler(BaseHandler):
    def time(self):
        return time.time()

class SecureServer(SRPSocket.SRPHost):
    def auth_socket(self, socket):
        server = bjsonrpc.server.Server(socket, handler_factory=handler)
        server.serve()

s = SocketServer.ForkingTCPServer(('', 1337), SecureServer)
s.serve_forever()
</snippet></ROW><ROW><id>11267227</id><snippet>#! /usr/bin/env python
import bjsonrpc
from bjsonrpc.handlers import BaseHandler
from SRPSocket import SRPSocket
import time

class handler(BaseHandler):
    def time(self):
        return time.time()

socket, key = SRPSocket.SRPSocket('localhost', 1337, 'dht', 'testpass')

connection = bjsonrpc.connection.Connection(socket, handler_factory=handler)

test = connection.call.time()
print test
time.sleep(1)
</snippet></ROW><ROW><id>11267739</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; matrix = np.random.randint(100, size=(4000, 5000))
&gt;&gt;&gt; rows, cols = np.indices(matrix.shape)
</snippet></ROW><ROW><id>11267739</id><snippet>argsort</snippet></ROW><ROW><id>11267739</id><snippet>&gt;&gt;&gt; reindex = np.argsort(matrix.flatten())
</snippet></ROW><ROW><id>11267739</id><snippet>&gt;&gt;&gt; matrix.flat[reindex]
array([ 0,  0,  0, ..., 99, 99, 99])
</snippet></ROW><ROW><id>11267739</id><snippet>&gt;&gt;&gt; rows.flat[reindex]
array([2455, 2870, 1196, ...,   56,   56, 3618])
&gt;&gt;&gt; cols.flat[reindex]
array([ 863, 1091, 4966, ..., 3959, 3887, 4833])
</snippet></ROW><ROW><id>11267739</id><snippet>0</snippet></ROW><ROW><id>11267739</id><snippet>99</snippet></ROW><ROW><id>11267739</id><snippet>&gt;&gt;&gt; r = rows.flat[reindex]
&gt;&gt;&gt; c = cols.flat[reindex]
&gt;&gt;&gt; matrix[r[0], c[0]]
0
&gt;&gt;&gt; matrix[r[-1], c[-1]]
99
</snippet></ROW><ROW><id>11267739</id><snippet>reindex</snippet></ROW><ROW><id>11267739</id><snippet>&gt;&gt;&gt; r, c = divmod(reindex, matrix.shape[1])
</snippet></ROW><ROW><id>11267778</id><snippet>def get_payload(ldict):
    return {k:v for k,v in ldict.iteritems() if k != 'self' and v is not None}

class fred(object):
    some_class_var = 17
    def method(self, a, b=2):
        payload = get_payload(locals())
        print payload
</snippet></ROW><ROW><id>11267778</id><snippet>&gt;&gt;&gt; f = fred()
&gt;&gt;&gt; f.method()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: method() takes at least 2 arguments (1 given)
&gt;&gt;&gt; f.method(2)
{'a': 2, 'b': 2}
&gt;&gt;&gt; f.method(2, b=3)
{'a': 2, 'b': 3}
&gt;&gt;&gt; f.method(5, b=None)
{'a': 5}
&gt;&gt;&gt; f.method(2, b=3, c=19)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: method() got an unexpected keyword argument 'c'
&gt;&gt;&gt; help(f.method)

Help on method method in module __main__:

method(self, a, b=2) method of __main__.fred instance
</snippet></ROW><ROW><id>11267778</id><snippet>@payload</snippet></ROW><ROW><id>11267778</id><snippet>payload = get_payload(locals())</snippet></ROW><ROW><id>11267778</id><snippet>locals()</snippet></ROW><ROW><id>11267808</id><snippet>&gt;&gt;&gt; re.sub(r'\\[a-zA-z0-9]{2}', lambda L: str(int(L.group()[2:], 16)), text)
'28-06-20101238212210008:48 PM'
</snippet></ROW><ROW><id>11267820</id><snippet>__main__</snippet></ROW><ROW><id>11267820</id><snippet>__main__</snippet></ROW><ROW><id>11267820</id><snippet>if __name__=="__main__"</snippet></ROW><ROW><id>11267820</id><snippet>if __name__=="__main__"</snippet></ROW><ROW><id>11267820</id><snippet>main()</snippet></ROW><ROW><id>11267820</id><snippet>__main__</snippet></ROW><ROW><id>11267820</id><snippet>main</snippet></ROW><ROW><id>11267820</id><snippet>def snicklefritz():
    # This function will be run when you run the program
    print "You ran the program!"

if __name__ == "__main__":
    snicklefritz()
</snippet></ROW><ROW><id>11267820</id><snippet>python snicklefritz.py</snippet></ROW><ROW><id>11267820</id><snippet>import snicklefritz</snippet></ROW><ROW><id>11267820</id><snippet>print "This will always be printed!"

if __name__ == "__main__":
    print "This will only be printed if you run the file as a program!"
</snippet></ROW><ROW><id>11267820</id><snippet>if __name__=="__main__"</snippet></ROW><ROW><id>11267820</id><snippet>if __name__=="__main__"</snippet></ROW><ROW><id>11267820</id><snippet>def otherFunc(x):
    # Return x squared
    return x**2

def snicklefritz():
    # This function will be run when you run the program
    print "You ran the program!"

if __name__ == "__main__":
    snicklefritz()
</snippet></ROW><ROW><id>11267820</id><snippet>otherFunc</snippet></ROW><ROW><id>11267820</id><snippet>otherFunc</snippet></ROW><ROW><id>11267820</id><snippet>if __name__=="__main__"</snippet></ROW><ROW><id>11267832</id><snippet>system('C:\\Python26\\ArcGIS10.0\\python.exe Checkpythonverion.py')
</snippet></ROW><ROW><id>11267832</id><snippet>2.6.5 (r265:79096, Mar 19 2010, 21:48:26) [MSC v.1500 32 bit (Intel)]
</snippet></ROW><ROW><id>11267872</id><snippet>def listen(self, buffsize):
    self.sock.listen(5)

    while True:
        # Listen for a new client.
        clisock, (remhost, remport) = self.sock.accept()

        # Start listening to the new client.
        t = threading.Thread(target=self._handle_client, args=(clisock, buffsize))
        t.start()

def _handle_client(self, clisock, buffsize):
    while True:
        received = clisock.recv(buffsize)
        if not received:
            # The client has closed the connection.
            break

        print received
</snippet></ROW><ROW><id>11267973</id><snippet>except</snippet></ROW><ROW><id>11268004</id><snippet>import</snippet></ROW><ROW><id>11268004</id><snippet>sys</snippet></ROW><ROW><id>11268004</id><snippet>site.py</snippet></ROW><ROW><id>11268106</id><snippet>tk.Tk.__init__</snippet></ROW><ROW><id>11268106</id><snippet>class MAIN(object):</snippet></ROW><ROW><id>11268106</id><snippet>class MAIN(tk.Tk):</snippet></ROW><ROW><id>11268270</id><snippet>K = "Dog    .0001    1\n  Dog    .00003   1\n  Dog    .0001    2\n  Cat    .0004   1\n  Cat    .0002    1\n  Cat    .0003    2\n  Cat    .0002    2"
dict1 = {}
for line in K.split("\n"):
    sp = line.split()
    name = sp[0]
    unid = "_".join([sp[0] , sp[2][-2:]])
    num = float(sp[1])
    if not dict1.has_key(unid):
        dict1[unid] = [num,]
    else :
        dict1[unid].append(num)
print(dict1)
dictTot = sum([sum(x) for x in dict1.values()])
print(dictTot)
</snippet></ROW><ROW><id>11268270</id><snippet>{'Dog_2': [0.0001], 
 'Dog_1': [0.0001, 3e-05], 
 'Cat_1': [0.0004, 0.0002], 
 'Cat_2': [0.0003, 0.0002]}
</snippet></ROW><ROW><id>11268270</id><snippet>0.00133
</snippet></ROW><ROW><id>11268270</id><snippet>dict1</snippet></ROW><ROW><id>11268270</id><snippet>for key in dict1.iterkeys():
    dict1[key] = sum(dict1[key])
</snippet></ROW><ROW><id>11268270</id><snippet>dict1</snippet></ROW><ROW><id>11268270</id><snippet>{'Dog_2': 0.0001, 
 'Dog_1': 0.00013, 
 'Cat_1': 0.0006, 
 'Cat_2': 0.0005}
</snippet></ROW><ROW><id>11268356</id><snippet>dx = ndimage.sobel(preSobel, 0)  # horizontal derivative
dy = ndimage.sobel(preSobel, 1)  # vertical derivative
</snippet></ROW><ROW><id>11268356</id><snippet>dx = ndimage.sobel(your3Dmatrix, 0)  # x derivative
dy = ndimage.sobel(your3Dmatrix, 1)  # y derivative
dz = ndimage.sobel(your3Dmatrix, 2)  # z derivative
</snippet></ROW><ROW><id>11268356</id><snippet> mag = generic_gradient_magnitude(your3Dmatrix, sobel)
</snippet></ROW><ROW><id>11268492</id><snippet>    x=i[0](x)  #here i is a function so you can't perform indexing operation on it      


    x=i(x) #here i is a list so you can't call it as a function
</snippet></ROW><ROW><id>11268492</id><snippet>i</snippet></ROW><ROW><id>11268492</id><snippet>expr</snippet></ROW><ROW><id>11268492</id><snippet>expr</snippet></ROW><ROW><id>11268823</id><snippet>re_str = r"\?engine=(?P&lt;eng&gt;[\w-]*?)&amp;query=(?P&lt;query&gt;[=\d\+\w-]*?)&amp;subegine=(?P&lt;sub&gt;\w*)\s"
reg = re.compile(re_str)
for line in file:
  m = reg.search(line)
  print "Engine", m.group("eng")
  print "Query", m.group("query")
  print "Sub", m.group("sub")
</snippet></ROW><ROW><id>11268835</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>11268835</id><snippet>href</snippet></ROW><ROW><id>11268835</id><snippet>Client-</snippet></ROW><ROW><id>11268835</id><snippet>.txt</snippet></ROW><ROW><id>11268848</id><snippet>truncate</snippet></ROW><ROW><id>11268848</id><snippet>struct</snippet></ROW><ROW><id>11268848</id><snippet>memoryview</snippet></ROW><ROW><id>11268848</id><snippet>memoryview</snippet></ROW><ROW><id>11268848</id><snippet>struct</snippet></ROW><ROW><id>11268848</id><snippet>pack_into</snippet></ROW><ROW><id>11268848</id><snippet>memoryview</snippet></ROW><ROW><id>11268848</id><snippet>import struct
import mmap

with open('test.bin', 'wb') as f:
    f.truncate(100)

with open('test.bin', 'r+b') as f:
    m = mmap.mmap(f.fileno(), 0)
    mv = memoryview(m)
    for ind in range(25):
        struct.pack_into('&gt;l', mv, ind * 4, ind)
</snippet></ROW><ROW><id>11268848</id><snippet>pack_into</snippet></ROW><ROW><id>11269128</id><snippet>fractions</snippet></ROW><ROW><id>11269128</id><snippet>16*target_number</snippet></ROW><ROW><id>11269128</id><snippet>Fraction</snippet></ROW><ROW><id>11269128</id><snippet>Fraction(int(round(16*target_number)),16)
</snippet></ROW><ROW><id>11269128</id><snippet>int()</snippet></ROW><ROW><id>11269187</id><snippet>d['dict1'] = [('value1', '1'), ('value2', '2')]
d['dict2'] = [('value1', '3'), ('value2', '4')]
</snippet></ROW><ROW><id>11269187</id><snippet>result = [('value1', '1', '3'), ('value2', '2', '4')]
</snippet></ROW><ROW><id>11269187</id><snippet>{% for name, v1, v2 in result %}
{{ v1 }}
{{ v2 }}
{% endfor %}
</snippet></ROW><ROW><id>11269228</id><snippet>archive = tarfile.open(filepath, mode='r')
print os.path.commonprefix(archive.getnames())
</snippet></ROW><ROW><id>11269228</id><snippet>.</snippet></ROW><ROW><id>11269250</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>11269325</id><snippet>plt.xticks(rotation=70)
avail_plot(axs[0], dates, s1, 'testing', 'green')
avail_plot(axs[1], dates, s1, 'testing2', 'red')
</snippet></ROW><ROW><id>11269325</id><snippet>plt.setp( axs[1].xaxis.get_majorticklabels(), rotation=70 )
</snippet></ROW><ROW><id>11269415</id><snippet>*args</snippet></ROW><ROW><id>11269415</id><snippet>def myFunc(arg1, arg2=None):
  if arg2 is not None: 
     #do this
  else:
     #do that
</snippet></ROW><ROW><id>11269562</id><snippet>node.tag</snippet></ROW><ROW><id>11269626</id><snippet>requests</snippet></ROW><ROW><id>11269626</id><snippet>&gt;&gt;&gt; r = requests.get('http://example.com')
&gt;&gt;&gt; r.status_code
200
</snippet></ROW><ROW><id>11269626</id><snippet>status_code</snippet></ROW><ROW><id>11269626</id><snippet>requests.exceptions.Timeout</snippet></ROW><ROW><id>11269627</id><snippet>import os
import subprocess

FNULL = open(os.devnull, 'w')
retcode = subprocess.call(['echo', 'foo'], stdout=FNULL, stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>11269627</id><snippet>retcode = os.system("echo 'foo' &amp;&gt; /dev/null")
</snippet></ROW><ROW><id>11269720</id><snippet>query = {'x': 1}
if checkbox == 'checked':
    query['y'] = 2

results = db.collection.find(query)
</snippet></ROW><ROW><id>11269720</id><snippet>OR</snippet></ROW><ROW><id>11269720</id><snippet>query = [{'x': 1}]
if checkbox == 'checked':
    query.append({'y': 2})

results = db.collection.find({'$or': query})
</snippet></ROW><ROW><id>11269878</id><snippet>create table Topics (
    TopicId int identity(1,1), -- SQL Server for auto increment column
    TopicName varchar(255),
    CreatedBy varchar(255) default system_user,
    CreatedAt datetime default getdate()
</snippet></ROW><ROW><id>11269878</id><snippet>create table DocumentTopics (
    DocumentTopicId int identity(1,1), -- SQL Server for auto increment column
    TopicId int,
    DocumentID int,
    CreatedBy varchar(255) default system_user,
    CreatedAt datetime default getdate()
</snippet></ROW><ROW><id>11269878</id><snippet>create table DocumentView (
    DocumentViewId int identity(1,1), -- SQL Server for auto increment column
    DocumentId int,
    ViewedAt datetime,
    viewedBy int, -- some sort of user id
    CreatedBy varchar(255) default system_user,
    CreatedAt datetime default getdate()
</snippet></ROW><ROW><id>11269878</id><snippet>select t.TopicId, t.TopicName, count(*) as cnt
from DocumentUsage du join
     DocumentTopics dt
     on du.DocumentId = dt.DocumentId join
     Topics t
     on dt.TopicsId = t.TopicsId
where du.ViewedAt between &lt;date1&gt; and &lt;date2&gt;
group by t.TopicId, t.TopicName
order by 3 desc
</snippet></ROW><ROW><id>11270064</id><snippet>float('-')</snippet></ROW><ROW><id>11270064</id><snippet>list2 = map(float, list1)
</snippet></ROW><ROW><id>11270064</id><snippet>print list1</snippet></ROW><ROW><id>11270147</id><snippet>DJANGO_SETTINGS_MODULE=my_settings python /path/to/your/script.py
</snippet></ROW><ROW><id>11270147</id><snippet>PYTHONPATH="/Users/david542/Desktop/project" DJANGO_SETTINGS_MODULE=my_settings python /path/to/your/script.py
</snippet></ROW><ROW><id>11270629</id><snippet>titles = node.xpath("//Title")
for title in titles:
    hd_vendor_id = title.xpath(
        "./EST/EST_Version[Master_Type_HD_SD='HD']/Vendor_ID)")
</snippet></ROW><ROW><id>11270629</id><snippet>node.xpath("//Title/EST/EST_Version[Master_Type_HD_SD='HD']/Vendor_ID/text()")
</snippet></ROW><ROW><id>11270629</id><snippet>titles = node.xpath("//Title")
for title in titles:
    est=title.find('EST')
    hd_vendor_id = est.xpath("./EST_Version[Master_Type_HD_SD='HD']/Vendor_ID)"
</snippet></ROW><ROW><id>11270629</id><snippet>ests = node.xpath("//Title/EST")
for est in ests:
    hd_vendor_id = est.xpath("./EST_Version[Master_Type_HD_SD='HD']/Vendor_ID)"
</snippet></ROW><ROW><id>11270672</id><snippet>my_ascii = my_uni_string.encode('ascii', 'ignore')
</snippet></ROW><ROW><id>11270672</id><snippet>my_uni_string = my_byte_string.decode('utf8')
</snippet></ROW><ROW><id>11270686</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; mylist = [20, 20, 25, 25, 30, 30]
&gt;&gt;&gt; D = defaultdict(list)
&gt;&gt;&gt; for i,x in enumerate(mylist):
        D[x].append(i)


&gt;&gt;&gt; D[max(k for k,v in D.items() if len(v)&gt;1)]
[4, 5]
</snippet></ROW><ROW><id>11270736</id><snippet>u'...'</snippet></ROW><ROW><id>11270736</id><snippet>print</snippet></ROW><ROW><id>11270736</id><snippet>&gt;&gt;&gt; x = b"Best places to eat in D\xfcsseldorf"
&gt;&gt;&gt; x.decode('latin-1')
u'Best places to eat in D\xfcsseldorf'
&gt;&gt;&gt; print x.decode('latin-1')
Best places to eat in Düsseldorf
</snippet></ROW><ROW><id>11270736</id><snippet>&gt;&gt;&gt; x = b"Best places to eat in D\\xfcsseldorf"
&gt;&gt;&gt; print x
Best places to eat in D\xfcsseldorf
&gt;&gt;&gt; print x.decode('unicode-escape')
Best places to eat in Düsseldorf
</snippet></ROW><ROW><id>11270791</id><snippet>ax.set_xlim(-0.5, 5.5)
p.subplots_adjust(bottom=0.2)
</snippet></ROW><ROW><id>11270861</id><snippet>def refreshFigure(self,x,y):
    self.line1.set_data(x,y)
    ax = self.canvas.figure.axes[0]
    ax.set_xlim(x.min(), x.max())
    ax.set_ylim(y.min(), y.max())        
    self.canvas.draw()
</snippet></ROW><ROW><id>11271334</id><snippet>makeRecord</snippet></ROW><ROW><id>11271334</id><snippet>def makeRecord(self, name, level, fn, lno, msg, args, exc_info, func=None, extra=None):
    """
    A factory method which can be overridden in subclasses to create
    specialized LogRecords.
    """
    rv = LogRecord(name, level, fn, lno, msg, args, exc_info, func)
    if extra is not None:
        for key in extra:
            if (key in ["message", "asctime"]) or (key in rv.__dict__):
                raise KeyError("Attempt to overwrite %r in LogRecord" % key)
            rv.__dict__[key] = extra[key]
    return rv
</snippet></ROW><ROW><id>11271334</id><snippet>extra</snippet></ROW><ROW><id>11271334</id><snippet>LogRecord</snippet></ROW><ROW><id>11271334</id><snippet>LogRecord.__init__</snippet></ROW><ROW><id>11271334</id><snippet>makeRecord</snippet></ROW><ROW><id>11271334</id><snippet>LoggerAdapter</snippet></ROW><ROW><id>11271334</id><snippet># Common log info to be added to all logs reported with `log_adapter`
context = {'host': 'localhost'}

log = logging.getLogger('testing')
log.addHandler(logging.StreamHandler())
d = {'host': '192.168.0.1'}

log_adapter = logging.LoggerAdapter(log, context)
log_adapter.warning('Hi', d)
</snippet></ROW><ROW><id>11271334</id><snippet>context</snippet></ROW><ROW><id>11271334</id><snippet>class LogContext(object):

    def __getitem__(self, key):
        if key == 'host':
            return 'localhost'
        raise KeyError(key)

    def __iter__(self):
        return iter(['host'])

log_adapter = logging.LoggerAdapter(log, LogContext())
log_adapter.warning('Hi', d)
</snippet></ROW><ROW><id>11271334</id><snippet>LoggingAdapter</snippet></ROW><ROW><id>11271334</id><snippet>warning</snippet></ROW><ROW><id>11271334</id><snippet>warn</snippet></ROW><ROW><id>11271334</id><snippet>LoggingAdapter</snippet></ROW><ROW><id>11271334</id><snippet>MyLogHandler</snippet></ROW><ROW><id>11271334</id><snippet>MyLogFormatter</snippet></ROW><ROW><id>11271334</id><snippet>MongoLogger</snippet></ROW><ROW><id>11271350</id><snippet>key()</snippet></ROW><ROW><id>11271350</id><snippet>Key</snippet></ROW><ROW><id>11271350</id><snippet>User</snippet></ROW><ROW><id>11271350</id><snippet>profile_id = profile_user.user_id()
profile_nick = profile_user.nickname()
</snippet></ROW><ROW><id>11271350</id><snippet>key</snippet></ROW><ROW><id>11271350</id><snippet>print type(profile_user.key)
print dir(profile_user.key)
</snippet></ROW><ROW><id>11271350</id><snippet>NDB</snippet></ROW><ROW><id>11271350</id><snippet>id_or_name()</snippet></ROW><ROW><id>11271663</id><snippet>def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>11271663</id><snippet>for line in grouper(3, my_list):
    print ', '.join(filter(None, line))
</snippet></ROW><ROW><id>11271726</id><snippet>def short_caption(someitem):
    return len(someitem) &lt; 60
</snippet></ROW><ROW><id>11271726</id><snippet>your_environment.tests["short_caption"] = short_caption
</snippet></ROW><ROW><id>11271726</id><snippet>{% if item[0] is short_caption %}
{# do something here #}
{% endif %}
</snippet></ROW><ROW><id>11271726</id><snippet>import jinja2

environment = jinja2.Environment() # you can define characteristics here, like telling it to load templates, etc
environment.tests["short_caption"] = short_caption
</snippet></ROW><ROW><id>11271726</id><snippet>template = environment.from_string("""your template text here""")
template.render(items=links).encode('utf-8')
</snippet></ROW><ROW><id>11271893</id><snippet>div</snippet></ROW><ROW><id>11271893</id><snippet>b</snippet></ROW><ROW><id>11271893</id><snippet>div = soup.find_all('div', {"class":"b"})[0]
items = div.find_all('a', href="google.com")
</snippet></ROW><ROW><id>11271973</id><snippet>r'/air'</snippet></ROW><ROW><id>11271973</id><snippet>webapp2.Route(r'/sea/', handler=Sea)</snippet></ROW><ROW><id>11271973</id><snippet>&lt;KEYWORDNAME:REGULAREXPRESSION&gt;</snippet></ROW><ROW><id>11271973</id><snippet>&lt;:/?&gt;</snippet></ROW><ROW><id>11271973</id><snippet>webapp2.Route(r'/sea&lt;:/?&gt;&lt;activity:[a-zA-Z]*?&gt;', defaults={"activity":""}, handler=Sea, name="sea")
</snippet></ROW><ROW><id>11271973</id><snippet>&lt;a href="/sea/sailing"&gt;Sailing&lt;/a&gt;
</snippet></ROW><ROW><id>11271973</id><snippet>get(self, *args, **kwargs):
    activity = kwargs.get("activity")
    if activity in ("sailing", "kayaking", "hiking", "kiteboarding", "surfing", "diving")
       posts = db.GqlQuery("select * from Post where sport=:1 order by created desc limit 30", activity)
    elif activity:
       self.error(404)
    else:
       posts = db.GqlQuery ... etc
</snippet></ROW><ROW><id>11272034</id><snippet>x=x+x</snippet></ROW><ROW><id>11272034</id><snippet>x</snippet></ROW><ROW><id>11272072</id><snippet>FigureCanvasQTAgg</snippet></ROW><ROW><id>11272072</id><snippet>backend_qt4agg</snippet></ROW><ROW><id>11272072</id><snippet>from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
</snippet></ROW><ROW><id>11272072</id><snippet>Figure</snippet></ROW><ROW><id>11272072</id><snippet>figure</snippet></ROW><ROW><id>11272072</id><snippet>  File "/usr/lib/pymodules/python2.6/matplotlib/backends/backend_qt4agg.py", line 9, in &lt;module&gt;
    from matplotlib.figure import Figure
</snippet></ROW><ROW><id>11272072</id><snippet>axes</snippet></ROW><ROW><id>11272072</id><snippet>  File "/usr/lib/pymodules/python2.6/matplotlib/figure.py", line 18, in &lt;module&gt;
    from axes import Axes, SubplotBase, subplot_class_factory
</snippet></ROW><ROW><id>11272072</id><snippet>new</snippet></ROW><ROW><id>11272072</id><snippet>  File "/usr/lib/pymodules/python2.6/matplotlib/axes.py", line 2, in &lt;module&gt;
    import math, sys, warnings, datetime, new
</snippet></ROW><ROW><id>11272072</id><snippet>  File "/home/kasa/Desktop/new.py", line 25, in &lt;module&gt;
</snippet></ROW><ROW><id>11272072</id><snippet>    from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
</snippet></ROW><ROW><id>11272072</id><snippet>FigureCanvasQTAgg</snippet></ROW><ROW><id>11272072</id><snippet>ImportError: cannot import name FigureCanvasQTAgg
</snippet></ROW><ROW><id>11272072</id><snippet>new</snippet></ROW><ROW><id>11272072</id><snippet>new.pyc</snippet></ROW><ROW><id>11272109</id><snippet>get_by_id()</snippet></ROW><ROW><id>11272291</id><snippet>PIL</snippet></ROW><ROW><id>11272291</id><snippet>pip uninstall PIL</snippet></ROW><ROW><id>11272291</id><snippet>pip install pillow</snippet></ROW><ROW><id>11272467</id><snippet>mode</snippet></ROW><ROW><id>11272481</id><snippet>vec</snippet></ROW><ROW><id>11272481</id><snippet>sca</snippet></ROW><ROW><id>11272756</id><snippet>@page {     
    size: 21cm 29.7cm;
    margin: 1.5cm;
}
</snippet></ROW><ROW><id>11272820</id><snippet>formatter_class</snippet></ROW><ROW><id>11272820</id><snippet>choices</snippet></ROW><ROW><id>11272820</id><snippet>_metavar_formatter</snippet></ROW><ROW><id>11272820</id><snippet>{1, 2, ..., 65535}</snippet></ROW><ROW><id>11272820</id><snippet>class RangeChoiceHelpFormatter(HelpFormatter):
    def _metavar_formatter(self, action, default_metavar):
         if action.metavar is not None:
             result = action.metavar
         elif action.choices is not None:
             result = '{%s .. %s}' % (min(action.choices), max(action.choices])
         else:
             result = default_metavar

          def format(tuple_size):
              if isinstance(result, tuple):
                  return result
              else:
                  return (result, ) * tuple_size
          return format
</snippet></ROW><ROW><id>11272820</id><snippet>choices</snippet></ROW><ROW><id>11272820</id><snippet>argparse.ArgumentTypeError</snippet></ROW><ROW><id>11272820</id><snippet>TypeError</snippet></ROW><ROW><id>11272820</id><snippet>ValueError</snippet></ROW><ROW><id>11272820</id><snippet>class IntRange(object):
    def __init__(self, start, stop=None):
        if stop is None:
            start, stop = 0, start
        self.start, self.stop = start, stop

    def __call__(self, value):
        value = int(value)
        if value &lt; self.start or value &gt;= self.stop:
            raise argparse.ArgumentTypeError('value outside of range')
        return value
</snippet></ROW><ROW><id>11272820</id><snippet>parser.add_argument('foo', type=IntRange(1, 65536))
</snippet></ROW><ROW><id>11273385</id><snippet>QMetaObject.invokeMethod</snippet></ROW><ROW><id>11273510</id><snippet>csv</snippet></ROW><ROW><id>11273510</id><snippet>csv.DictReader</snippet></ROW><ROW><id>11273547</id><snippet>for subdict in dictionary.values():
    for key, val in subdict.items():
        if key.startswith('option-'):
            del subdict[key]
            subdict[' '.join(key.split('-', 1))] = val
</snippet></ROW><ROW><id>11273547</id><snippet>option-</snippet></ROW><ROW><id>11273547</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; dictionary = {'subnet 10.5.5.0 netmask 255.255.255.224': {'option-domain-name': '"internal.example.org"', 'option-domain-name-servers': 'ns1.internal.example.org', 'range': '10.5.5.26 10.5.5.30', 'max-lease-time': '7200', 'default-lease-time': '600', 'option-routers': '10.5.5.1', 'option-broadcast-address': '10.5.5.31'}, 'subnet 10.254.239.32 netmask 255.255.255.224': {'range': 'dynamic-bootp 10.254.239.40 10.254.239.60', 'option-routers': 'rtr-239-32-1.example.org', 'option-broadcast-address': '10.254.239.31'}, 'subnet 10.254.239.0 netmask 255.255.255.224': {'range': '10.254.239.10 10.254.239.20', 'option-routers': 'rtr-239-0-1.example.org, rtr-239-0-2.example.org'}, 'host fantasia': {'hardware': 'ethernet 08:00:07:26:c0:a5', 'fixed-address': 'fantasia.fugue.com'}, 'host passacaglia': {'hardware': 'ethernet 0:0:c0:5d:bd:95', 'server-name': '"toccata.fugue.com"', 'filename': '"vmunix.passacaglia"'}}
&gt;&gt;&gt; for subdict in dictionary.values():
...     for key, val in subdict.items():
...         if key.startswith('option-'):
...             del subdict[key]
...             subdict[' '.join(key.split('-', 1))] = val
... 
&gt;&gt;&gt; pprint(dictionary)
{'host fantasia': {'fixed-address': 'fantasia.fugue.com',
                   'hardware': 'ethernet 08:00:07:26:c0:a5'},
 'host passacaglia': {'filename': '"vmunix.passacaglia"',
                      'hardware': 'ethernet 0:0:c0:5d:bd:95',
                      'server-name': '"toccata.fugue.com"'},
 'subnet 10.254.239.0 netmask 255.255.255.224': {'option routers': 'rtr-239-0-1.example.org, rtr-239-0-2.example.org',
                                                 'range': '10.254.239.10 10.254.239.20'},
 'subnet 10.254.239.32 netmask 255.255.255.224': {'option broadcast-address': '10.254.239.31',
                                                  'option routers': 'rtr-239-32-1.example.org',
                                                  'range': 'dynamic-bootp 10.254.239.40 10.254.239.60'},
 'subnet 10.5.5.0 netmask 255.255.255.224': {'default-lease-time': '600',
                                             'max-lease-time': '7200',
                                             'option broadcast-address': '10.5.5.31',
                                             'option domain-name': '"internal.example.org"',
                                             'option domain-name-servers': 'ns1.internal.example.org',
                                             'option routers': '10.5.5.1',
                                             'range': '10.5.5.26 10.5.5.30'}}
</snippet></ROW><ROW><id>11273694</id><snippet>sys.exit</snippet></ROW><ROW><id>11274226</id><snippet>os.getcwd()</snippet></ROW><ROW><id>11274226</id><snippet>os.getcwd()</snippet></ROW><ROW><id>11274226</id><snippet>/home/user</snippet></ROW><ROW><id>11274226</id><snippet>python manage.py</snippet></ROW><ROW><id>11274226</id><snippet>os.getcwd()</snippet></ROW><ROW><id>11274226</id><snippet>/home/user</snippet></ROW><ROW><id>11274226</id><snippet>/home/</snippet></ROW><ROW><id>11274226</id><snippet>python user/manage.py</snippet></ROW><ROW><id>11274226</id><snippet>os.getcwd()</snippet></ROW><ROW><id>11274226</id><snippet>/home</snippet></ROW><ROW><id>11274226</id><snippet>os.chdir()</snippet></ROW><ROW><id>11274226</id><snippet>cd</snippet></ROW><ROW><id>11274226</id><snippet>os.getcwd()</snippet></ROW><ROW><id>11274226</id><snippet>__file__</snippet></ROW><ROW><id>11274226</id><snippet>__file__</snippet></ROW><ROW><id>11274394</id><snippet>import numpy as np
from matplotlib import pyplot as plt

dataset = [{'A':19, 'B':39, 'C':61, 'D':70},
           {'A':34, 'B':68, 'C':32, 'D':38},
           {'A':35, 'B':45, 'C':66, 'D':50},
           {'A':23, 'B':23, 'C':21, 'D':16},
           {'A':35, 'B':45, 'C':66, 'D':50}]
data_orders = [['A', 'B', 'C', 'D'], 
               ['B', 'A', 'C', 'D'], 
               ['A', 'B', 'D', 'C'], 
               ['B', 'A', 'C', 'D'],
               ['A', 'B', 'C', 'D']]
colors = ["r","g","b","y"]
names = sorted(dataset[0].keys())
values = np.array([[data[name] for name in order] for data,order in zip(dataset, data_orders)])
lefts = np.insert(np.cumsum(values, axis=1),0,0, axis=1)[:, :-1]
orders = np.array(data_orders)
bottoms = np.arange(len(data_orders))

for name, color in zip(names, colors):
    idx = np.where(orders == name)
    value = values[idx]
    left = lefts[idx]
    plt.bar(left=left, height=0.8, width=value, bottom=bottoms, 
            color=color, orientation="horizontal", label=name)
plt.yticks(bottoms+0.4, ["data %d" % (t+1) for t in bottoms])
plt.legend(loc="best", bbox_to_anchor=(1.0, 1.00))
plt.subplots_adjust(right=0.85)
plt.show()
</snippet></ROW><ROW><id>11274586</id><snippet>_LOCALE_</snippet></ROW><ROW><id>11274586</id><snippet>NewRequest</snippet></ROW><ROW><id>11274586</id><snippet>accept_language</snippet></ROW><ROW><id>11274586</id><snippet>Accept</snippet></ROW><ROW><id>11274586</id><snippet>from pyramid.events import NewRequest
from pyramid.events import subscriber

@subscriber(NewRequest)
def setAcceptedLanguagesLocale(event):
    if not event.request.accept_language:
        return
    accepted = event.request.accept_language
    event.request._LOCALE_ = accepted.best_match(('en', 'fr', 'de'), 'en')
</snippet></ROW><ROW><id>11275174</id><snippet>django-facebook</snippet></ROW><ROW><id>11275174</id><snippet>django-social-auth</snippet></ROW><ROW><id>11275269</id><snippet>Wan</snippet></ROW><ROW><id>11275269</id><snippet>Lan</snippet></ROW><ROW><id>11275269</id><snippet>Category</snippet></ROW><ROW><id>11275269</id><snippet>...ip</snippet></ROW><ROW><id>11275269</id><snippet>_get_property</snippet></ROW><ROW><id>11275269</id><snippet>dict</snippet></ROW><ROW><id>11275269</id><snippet>class Category(object):
    def __init__(self, parent, prefix):
        self.parent = parent
        self.prefix = prefix
    @property
    def ip(self):
        self.parent.data[self.prefix + "ip"]

class Router(object):
    def __init__(self, data):
        self.lan = Category(self, 'lan')
        self.wan = Category(self, 'wan')
        self.data = data
</snippet></ROW><ROW><id>11275269</id><snippet>router = {'wan': {'ip': '1.2.3.4'}, 'lan': {'ip': '2.3.4.5'}}
</snippet></ROW><ROW><id>11275464</id><snippet>set</snippet></ROW><ROW><id>11275464</id><snippet>&gt;&gt;&gt; l = ['Bafra Pide','Bafra Pide','Deneme Restoran','Bafra Pide']
&gt;&gt;&gt; s = set(l)
&gt;&gt;&gt; for i in s:
...    print i
...
Bafra Pide
Deneme Restoran
</snippet></ROW><ROW><id>11275634</id><snippet>login: admin</snippet></ROW><ROW><id>11275634</id><snippet>whatever@myapplication.appspotmail.com</snippet></ROW><ROW><id>11275634</id><snippet>whatever@myapplication.appspot.com</snippet></ROW><ROW><id>11275862</id><snippet>&gt;&gt;&gt; def f(match):
        return chr(ord(match.group(0)[0]) + 1) + match.group(0)[1:]

&gt;&gt;&gt; re.sub(r'\b[aA]word\b', f, 'aword Aword')
'bword Bword'
</snippet></ROW><ROW><id>11276152</id><snippet>PySys_SetPath()</snippet></ROW><ROW><id>11276152</id><snippet>sys.path</snippet></ROW><ROW><id>11276561</id><snippet># your code:    
d={}
for word in words:
   if word[0].lower() in 'aeiou':
       d.setdefault(word[0].lower(),[]).append(word)        

# a side effect set comprehension:  
index={}   
r={index.setdefault(word[0].lower(),[]).append(word) for word in words 
        if word[0].lower() in 'aeiou'}     

print r
print [(k, len(d[k])) for k in sorted(d.keys())]  
print [(k, len(index[k])) for k in sorted(index.keys())]
</snippet></ROW><ROW><id>11276561</id><snippet>set([None])
[('a', 17094), ('e', 8734), ('i', 8797), ('o', 7847), ('u', 16385)]
[('a', 17094), ('e', 8734), ('i', 8797), ('o', 7847), ('u', 16385)]
</snippet></ROW><ROW><id>11276561</id><snippet>setdefault()</snippet></ROW><ROW><id>11276561</id><snippet>words</snippet></ROW><ROW><id>11276561</id><snippet>set([None])</snippet></ROW><ROW><id>11276682</id><snippet>def getCats(request):
    cats=Category.objects.filter(parent=None)
    s=u'&lt;ul id="red" class="treeview-red"&gt;'
    for cat in cats:
        s += hiararchy(cat,True)
    s+=u'&lt;/ul&gt;'
    return HttpResponse(simplejson.dumps(s),mimetype='application/json')

def hiararchy(cat,flag):
    if cat.parent and flag:
        return hiararchy(cat.parent,True)
    else:
        if cat.children.count()&gt;0:
            s=u'&lt;li&gt;&lt;a href="#" id="'+str(cat.pk)+'" class="cat"&gt;%s&lt;/a&gt;'%(cat.name)
            for child in cat.children.all():
                s+=u'&lt;ul&gt;%s&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;'%(hiararchy(child,False))
            return s
        else:
            return u'&lt;li&gt;&lt;a href="#" id="'+str(cat.pk)+'" class="cat"&gt;%s&lt;/a&gt;&lt;/li&gt;'%(cat.name) 
</snippet></ROW><ROW><id>11276813</id><snippet>r'/profile/&lt;profile_id&gt;'
</snippet></ROW><ROW><id>11276813</id><snippet>r'/profile/(.+)'
</snippet></ROW><ROW><id>11276876</id><snippet>self.first</snippet></ROW><ROW><id>11276876</id><snippet>self.last</snippet></ROW><ROW><id>11276876</id><snippet>self.list[0]</snippet></ROW><ROW><id>11276876</id><snippet>self.list[-1]</snippet></ROW><ROW><id>11276876</id><snippet>self.data[0], self.data[-1] = self.data[-1], self.data[0]
</snippet></ROW><ROW><id>11276876</id><snippet>data</snippet></ROW><ROW><id>11276876</id><snippet>list</snippet></ROW><ROW><id>11276876</id><snippet>list</snippet></ROW><ROW><id>11276938</id><snippet>order = db.Column(db.Integer)</snippet></ROW><ROW><id>11276938</id><snippet>item.children.sort(key=operator.attrgetter('order'))
</snippet></ROW><ROW><id>11277002</id><snippet>try</snippet></ROW><ROW><id>11277002</id><snippet>except</snippet></ROW><ROW><id>11277002</id><snippet>import socket

hostIP=sys.argv[1]

try:
    socket.inet_aton(hostIP)
except socket.error as e:
    print "Error:", e
else:
    # Do something with valid ip address
</snippet></ROW><ROW><id>11277002</id><snippet>socket.inet_aton(hostIP)</snippet></ROW><ROW><id>11277002</id><snippet>else</snippet></ROW><ROW><id>11277002</id><snippet>else</snippet></ROW><ROW><id>11277002</id><snippet>try</snippet></ROW><ROW><id>11277002</id><snippet>import platform
import subprocess
import re
import socket

hostsFile = "hosts.txt"
hostsLookFile = "hosts.csv"
hostsURLFileLoc = "urls.conf"
plat = platform.system()
currentDir = "C:/Program Files/Splunk/etc/apps/gtvm/bin"
hostsFileLoc = currentDir + "/" + hostsFile
hostsLookFileLoc = currentDir + "/../lookups/" + hostsLookFile
hostsURLFileLoc = currentDir + "/../default/" + hostsURLFileLoc
hostIP = sys.argv[1]
hostName = sys.argv[2]
hostURL = sys.argv[3]
hostMan = sys.argv[4]
hostModel = sys.argv[5]
hostType = sys.argv[6]
hostDC = sys.argv[7]

#pat = re.compile("\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}")

#test = pat.match(hostIP)
#if test:
#   print "Acceptable ip address"
#else:
#   print "Unacceptable ip address"


try:
    socket.inet_aton(hostIP)
except socket.error as e:
    print "Unacceptable ip address", e
else:
    print "Acceptable ip address, proceeding..."
    print "Checking host if " + hostIP + " exists..."
    if not hostIP in open(hostsFileLoc).read():
        print hostIP + " does not yet exist, checking valid required input..."
        if hostName != "*" and hostIP != "*":
            print "...processing..."
            with open(hostsFileLoc,'a+') as hostsFilePython, open(hostsLookFileLoc, 'a+') as hostsLookFileCSV, open(hostsURLFileLoc, 'a+') as hostsURLPython:
                print "..host IP adddress for ping testing.."
                hostsFilePython.write(hostIP + "\n")
                print "..and, all values for referencing.."
                hostsLookFileCSV.write(hostIP + "," + hostName + "," + hostURL + "," + hostMan + "," + hostModel + "," + hostType + "," + hostDC + "," + "\n")
                if hostURL != "*": 
                    "..adding URL for webping testing.."
                    hostsURLPython.write("[" + hostName + "]\n" + "url = " + hostURL + "\n" + "sleep = 60" + "\n" + "\n")
                    print "done!"

        else:
            print "..failed! - Both host IP address and host name required"
    else:
        print hostIP + " already exists, please review lookups."
</snippet></ROW><ROW><id>11277041</id><snippet>result.read()
</snippet></ROW><ROW><id>11277041</id><snippet>result</snippet></ROW><ROW><id>11277052</id><snippet>(?&lt;![0-9.])(\d+)(?![0-9.])
</snippet></ROW><ROW><id>11277052</id><snippet>abc123def</snippet></ROW><ROW><id>11277052</id><snippet>(?&lt;!\S)\d+(?!\S)
</snippet></ROW><ROW><id>11277284</id><snippet>tzinfo</snippet></ROW><ROW><id>11277439</id><snippet>dict.pop()</snippet></ROW><ROW><id>11277439</id><snippet>my_dict.pop("key", None)
</snippet></ROW><ROW><id>11277638</id><snippet>user = users.get_current_user()
if user:
  # user is logged in, see if a profile exists ...
  profile = UserProfile.gql('WHERE user = :1', user).get()
  if not profile:
    # no profile exists - create it
    profile = UserProfile(user=user)
    profile.put()
  # do something with profile
else:
  # rediect to login
  self.redirect(users.create_login_url("/")))
</snippet></ROW><ROW><id>11277710</id><snippet>Treeview</snippet></ROW><ROW><id>11277710</id><snippet>list.selection_set( items[ 0 ] )
list.focus_set()
list.focus( items[ 0 ] ) # this fixes a problem.
</snippet></ROW><ROW><id>11277768</id><snippet>SyntaxError</snippet></ROW><ROW><id>11277768</id><snippet>import sys
if sys.version_info &gt;= (3, 0):
    sys.stdout.write("Sorry, requires Python 2.x, not Python 3.x\n")
    sys.exit(1)

import the_real_thing
if __name__ == "__main__":
    the_real_thing.main()
</snippet></ROW><ROW><id>11277768</id><snippet>import the_real_thing</snippet></ROW><ROW><id>11277768</id><snippet>if</snippet></ROW><ROW><id>11277829</id><snippet>def validate_phone(target, value, oldvalue, initiator):
    "Strip non-numeric characters from a phone number"

    return re.sub(r'(?![0-9])', '', value)

# setup listener on UserContact.phone attribute, instructing
# it to use the return value 
listen(UserContact.phone, 'set', validate_phone, retval=True)
</snippet></ROW><ROW><id>11277829</id><snippet>ValueError</snippet></ROW><ROW><id>11278072</id><snippet>import json

# Rest of your code

headers, response = h.request(apiUrl, "POST", json.dumps(data), headers)
</snippet></ROW><ROW><id>11278116</id><snippet>shutil.copyfile</snippet></ROW><ROW><id>11278116</id><snippet>shutil.copy</snippet></ROW><ROW><id>11278116</id><snippet>des</snippet></ROW><ROW><id>11278116</id><snippet>des = os.path.join(des, x[1])
</snippet></ROW><ROW><id>11278145</id><snippet>Q_TYPE</snippet></ROW><ROW><id>11278145</id><snippet>context = {'Q_TYPE': Q_TYPE}
return render(request, 'mytemplate.html', context)
</snippet></ROW><ROW><id>11278145</id><snippet>{% for id, value in Q_TYPE %}
    {{ value }} &lt;input type="radio" name="{{ id }}" id="" value="" /&gt;&lt;br /&gt;
{% endfor %}
</snippet></ROW><ROW><id>11278145</id><snippet>{% for item in Q_TYPE %}
    {{ item.1 }} &lt;input type="radio" name="{{ item.0 }}" id="" value="" /&gt;&lt;br /&gt;
{% endfor %}
</snippet></ROW><ROW><id>11278145</id><snippet>ModelForm</snippet></ROW><ROW><id>11278240</id><snippet>with open("J:\\python\\.data", "rb") as data:
    self.data=pickle.load(data)
</snippet></ROW><ROW><id>11278240</id><snippet>pickle</snippet></ROW><ROW><id>11278240</id><snippet>"rb"</snippet></ROW><ROW><id>11278383</id><snippet>pat.search</snippet></ROW><ROW><id>11278383</id><snippet>In [9]: p = pat.search(test_string)

In [10]: p
Out[10]: &lt;_sre.SRE_Match at 0x3cfa608&gt;

In [11]: type(p)
Out[11]: _sre.SRE_Match
</snippet></ROW><ROW><id>11278687</id><snippet>object</snippet></ROW><ROW><id>11278687</id><snippet>class Foo(object):
    pass
</snippet></ROW><ROW><id>11278688</id><snippet>mahotas.imread('d:/normal.jpg', as_grey = True)
</snippet></ROW><ROW><id>11278766</id><snippet>os.path.expandvars()</snippet></ROW><ROW><id>11278766</id><snippet>f = open(os.path.expandvars(HTMLFILE), 'w')
</snippet></ROW><ROW><id>11278766</id><snippet>open</snippet></ROW><ROW><id>11278766</id><snippet>expandvars</snippet></ROW><ROW><id>11278797</id><snippet>if requests_made &gt;= max_requests:
    return '429 error', 429
</snippet></ROW><ROW><id>11279075</id><snippet>keep-alive</snippet></ROW><ROW><id>11279075</id><snippet>False</snippet></ROW><ROW><id>11279075</id><snippet>True</snippet></ROW><ROW><id>11279075</id><snippet>r = requests.post('https://stream.twitter.com/1/statuses/filter.json',
               data={'track': keyword}, auth=(USER,PW),
               config={'keep_alive':False})
</snippet></ROW><ROW><id>11279131</id><snippet>itertools.product</snippet></ROW><ROW><id>11279131</id><snippet>from itertools import product
abGenerator = product(range(minA, maxA, stepA), range(minB, maxB, stepB))
abArray = (i for i in abGenerator if i[0] &lt; i[1])
</snippet></ROW><ROW><id>11279248</id><snippet>unicode_literals</snippet></ROW><ROW><id>11279248</id><snippet>'red'</snippet></ROW><ROW><id>11279248</id><snippet>unicode</snippet></ROW><ROW><id>11279248</id><snippet>str</snippet></ROW><ROW><id>11279248</id><snippet>b'red'</snippet></ROW><ROW><id>11279248</id><snippet>str</snippet></ROW><ROW><id>11279248</id><snippet>bytes</snippet></ROW><ROW><id>11279248</id><snippet>bytes</snippet></ROW><ROW><id>11279248</id><snippet>pygame.Color</snippet></ROW><ROW><id>11279248</id><snippet>b'red'</snippet></ROW><ROW><id>11279269</id><snippet>import urllib2
import requests

# note the single quotes surrounding the query 
URL = "https://api.datamarket.azure.com/Data.ashx/Bing/SearchWeb/Web?Query='%(query)s'&amp;$top=50&amp;$format=json"

query = 'affirmative+action'

# query == 'affirmative%2Baction'
r = requests.get(URL % {'query': urllib2.quote(query)}, auth=('', API_KEY))
print r.json['d']['results']
</snippet></ROW><ROW><id>11279269</id><snippet>request</snippet></ROW><ROW><id>11279269</id><snippet>list</snippet></ROW><ROW><id>11279269</id><snippet>status_code</snippet></ROW><ROW><id>11279428</id><snippet>&gt;&gt;&gt; u'foo'
u'foo'
&gt;&gt;&gt; unicode('foo')
u'foo'
</snippet></ROW><ROW><id>11279428</id><snippet>&gt;&gt;&gt; val = u'Ознакомьтесь с документацией'
&gt;&gt;&gt; val
u'\u041e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439'
&gt;&gt;&gt; print val
Ознакомьтесь с документацией
</snippet></ROW><ROW><id>11279428</id><snippet>&gt;&gt;&gt; 'foo\"'
'foo"'
&gt;&gt;&gt; r'foo\"'
'foo\\"'
</snippet></ROW><ROW><id>11279451</id><snippet>sys.argv</snippet></ROW><ROW><id>11279451</id><snippet>sys.argv</snippet></ROW><ROW><id>11279451</id><snippet>condition</snippet></ROW><ROW><id>11279451</id><snippet>import argparse
import sys
import copy
import os

def split_list(lst,condition):
    current=[]
    out=[current]
    for arg in lst:
        current.append(arg)
        if(condition(arg)):
            current=[]
            out.append(current)

    return out


parser=argparse.ArgumentParser()
parser.add_argument('-m',action='store')
parser.add_argument('-r',default='0',action='store')
#pieces=split_list(sys.argv[1:],os.path.isfile)
pieces=split_list(sys.argv[1:],lambda x: x in ('foo','bar','baz','quux'))
options={} #use collections.OrderedDict if order matters -- or some more suitable data structure.
default=argparse.Namespace()
for args in pieces:
    if(not args):
        continue
    ns=copy.deepcopy(default)
    default=parser.parse_args(args[:-1],namespace=ns)
    options[args[-1]]=default

print (options)
</snippet></ROW><ROW><id>11279529</id><snippet>urllib2.urlopen(someurl, somedata, sometimeout)
urllib2.urlopen(someurl)
urllib2.urlopen(someurl, somedata)
urllib2.urlopen(someurl, timeout=sometimeout)

urllib2.build_opener()
urllib2.build_opener(handler1)
urllib2.build_opener(handler1, handler2)
urllib2.build_opener(handler1, handler2, handler3)
</snippet></ROW><ROW><id>11279548</id><snippet>Henry = Person()
</snippet></ROW><ROW><id>11279548</id><snippet>__repr__()</snippet></ROW><ROW><id>11279548</id><snippet>Class Person:
    def __repr__(self):
        return self.height
</snippet></ROW><ROW><id>11279548</id><snippet>Class Person:
    def __init__(self):
        self.height = "6' 0\""
</snippet></ROW><ROW><id>11279626</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; txt = """&lt;bookstore&gt;
...     &lt;book category="COOKING"&gt;
...         &lt;title lang="english"&gt;Everyday Italian&lt;/title&gt;
...         &lt;author&gt;Giada De Laurentiis&lt;/author&gt;
...         &lt;year&gt;2005&lt;/year&gt;
...         &lt;price&gt;300.00&lt;/price&gt;
...     &lt;/book&gt;
...
...     &lt;book category="CHILDREN"&gt;
...         &lt;title lang="english"&gt;Harry Potter&lt;/title&gt;
...         &lt;author&gt;J K. Rowling &lt;/author&gt;
...         &lt;year&gt;2005&lt;/year&gt;
...         &lt;price&gt;625.00&lt;/price&gt;
...     &lt;/book&gt;
... &lt;/bookstore&gt;"""
&gt;&gt;&gt; exp = re.compile(r'&lt;.*?&gt;')
&gt;&gt;&gt; text_only = exp.sub('',txt).strip()
&gt;&gt;&gt; text_only
'Everyday Italian\n        Giada De Laurentiis\n        2005\n        300.00\n
  \n\n    \n        Harry Potter\n        J K. Rowling \n        2005\n        6
25.00'
</snippet></ROW><ROW><id>11279626</id><snippet>grep</snippet></ROW><ROW><id>11279626</id><snippet>burhan@sandbox:~$ grep "Harry Potter" file.xml
        &lt;title lang="english"&gt;Harry Potter&lt;/title&gt;
</snippet></ROW><ROW><id>11279626</id><snippet>grep</snippet></ROW><ROW><id>11279626</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; exp = re.compile(r'&lt;.*?&gt;')
&gt;&gt;&gt; with open('file.xml') as f:
...     lines = ''.join(line for line in f.readlines())
...     text_only = exp.sub('',lines).strip()
...
&gt;&gt;&gt; if 'Harry Potter' in text_only:
...    print 'It exists'
... else:
...    print 'It does not'
...
It exists
</snippet></ROW><ROW><id>11280164</id><snippet>class A:
    def __init__( self ):
        pass

a = A()
a.description = "whyyy"

print a.description

b = A()

print b.description # Should return an error
</snippet></ROW><ROW><id>11280202</id><snippet>input()</snippet></ROW><ROW><id>11280202</id><snippet>eval(raw_input())</snippet></ROW><ROW><id>11280202</id><snippet>input(...)
    input([prompt]) -&gt; value

    Equivalent to eval(raw_input(prompt)).
</snippet></ROW><ROW><id>11280202</id><snippet>raw_input()</snippet></ROW><ROW><id>11280227</id><snippet>gid = [0] # list - mutable object

def incremented(gid):
    gid[0] += 1
    return gid[0]

groups[m][n] = groups[m - 1][n] or incremented(gid)
</snippet></ROW><ROW><id>11280227</id><snippet>class C(object):
    ...
    def __add__(self, other):
        self.i += other
        return self.__class__(self.i)
    def __radd__(self, other):
        cpy = self.__class__(self.i)
        self.i += other
        return cpy

&gt;&gt;&gt; print Int(2) + 1 # pre
3
&gt;&gt;&gt; i = Int(2)
&gt;&gt;&gt; print 1 + i # post
2
&gt;&gt;&gt; print i
3
</snippet></ROW><ROW><id>11280329</id><snippet>line = line.rstrip('\n')
</snippet></ROW><ROW><id>11280329</id><snippet>readline</snippet></ROW><ROW><id>11280473</id><snippet>all(map(lambda x: x.pop(which_column), triangle))
</snippet></ROW><ROW><id>11280473</id><snippet>sum(map(lambda x: x.pop(which_column), triangle))
</snippet></ROW><ROW><id>11280473</id><snippet>map</snippet></ROW><ROW><id>11280473</id><snippet>map(lambda x: x.pop(1), triangle)
</snippet></ROW><ROW><id>11280473</id><snippet>deleted_column = list(map(lambda x: x.pop(which_column), triangle))
</snippet></ROW><ROW><id>11280473</id><snippet>sum(i.pop(which_column) for i in triangle)
</snippet></ROW><ROW><id>11280473</id><snippet>deleted_column = [i.pop(which_column) for i in triangle]
</snippet></ROW><ROW><id>11280473</id><snippet>collections.deque(map(lambda x: x.pop(which_column), triangle), maxlen=0)
</snippet></ROW><ROW><id>11280521</id><snippet>env.py</snippet></ROW><ROW><id>11280521</id><snippet>import os, sys
sys.path.append(os.getcwd())
</snippet></ROW><ROW><id>11280534</id><snippet>SELECT rating, COUNT(rating) AS rc, COUNT(DISTINCT userid) FROM rating_tbl GROUP BY rating ORDER BY rc DESC;
</snippet></ROW><ROW><id>11280545</id><snippet>&gt;&gt;&gt; map(sum, zip(*lists))
[6, 9, 12, 15, 18]
</snippet></ROW><ROW><id>11280545</id><snippet>zip</snippet></ROW><ROW><id>11280545</id><snippet>&gt;&gt;&gt; zip(*lists)
[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]
</snippet></ROW><ROW><id>11280545</id><snippet>sum</snippet></ROW><ROW><id>11280545</id><snippet>map</snippet></ROW><ROW><id>11280545</id><snippet>map</snippet></ROW><ROW><id>11280545</id><snippet>list</snippet></ROW><ROW><id>11280633</id><snippet>if not hostIP in open(hostsFileLoc).read().split():
    # Script to add if the string is not in file
else:
    # Print message
</snippet></ROW><ROW><id>11280690</id><snippet>count()</snippet></ROW><ROW><id>11280690</id><snippet>&gt;&gt;&gt; str1="ABCD"
&gt;&gt;&gt; str2="ABCD is ABCD"
&gt;&gt;&gt; str2.count(str1)
2
</snippet></ROW><ROW><id>11280832</id><snippet>__file__</snippet></ROW><ROW><id>11280832</id><snippet>.py</snippet></ROW><ROW><id>11280832</id><snippet>.pyc</snippet></ROW><ROW><id>11280832</id><snippet>.pyd</snippet></ROW><ROW><id>11280832</id><snippet>.so</snippet></ROW><ROW><id>11280832</id><snippet>.dll</snippet></ROW><ROW><id>11280884</id><snippet>from abc import xyz
from my_stuff import *
</snippet></ROW><ROW><id>11280884</id><snippet>from all_my_imports import * 
</snippet></ROW><ROW><id>11280919</id><snippet>&gt;&gt;&gt; status = client.status()
&gt;&gt;&gt; status['state']
'play'
# or
'pause'
# or
'stop'
</snippet></ROW><ROW><id>11280919</id><snippet>if client.status()['state'] in ('play', 'pause'):
    #playing
else:
    #stopped
</snippet></ROW><ROW><id>11281053</id><snippet>minihiveosc.py</snippet></ROW><ROW><id>11281090</id><snippet>app = webapp2.WSGIApplication([('/', MainPage), debug=True)
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>11281323</id><snippet>YEAR</snippet></ROW><ROW><id>11281323</id><snippet>from sqlalchemy.sql import func
...
# add another group_by to your existing query:
rows = ...
group_by(func.year(Download.time), 
         60 * func.HOUR(Download.time) + func.MINUTE(Download.time)
)
</snippet></ROW><ROW><id>11281362</id><snippet>request.GET.urlencode()
</snippet></ROW><ROW><id>11281409</id><snippet>&lt;xml&gt;&lt;hive name="myprojectname"&gt;
</snippet></ROW><ROW><id>11281409</id><snippet>&lt;xml&gt;&lt;hive name="myprojectname"/&gt;&lt;/xml&gt;
</snippet></ROW><ROW><id>11281579</id><snippet>Sndfile.frames / Sndfile.samplerate</snippet></ROW><ROW><id>11281579</id><snippet>import time

start_time = time.time()
duration_s = sndfile.frames / sndfile.samplerate

while 1:
    elapsed_time = time.time() - start_time
    current_location = elapsed_time / float(duration_s)
    if current_location &gt;= 1:
         break
    time.sleep(.01)
</snippet></ROW><ROW><id>11281579</id><snippet>scikits.audiolab.play()</snippet></ROW><ROW><id>11281579</id><snippet>threading.Event</snippet></ROW><ROW><id>11281579</id><snippet>event.isSet()</snippet></ROW><ROW><id>11281579</id><snippet>if current_location &gt;= 1 or fail_event.isSet():
    break
</snippet></ROW><ROW><id>11281661</id><snippet>workers = 1</snippet></ROW><ROW><id>11281661</id><snippet>worker_class = eventlet</snippet></ROW><ROW><id>11281661</id><snippet>yield</snippet></ROW><ROW><id>11281744</id><snippet>__getattr__</snippet></ROW><ROW><id>11281744</id><snippet>class DefaultClassMethods(type):
    def __getattr__(cls, attr):
        def _defaultClassMethod(cls):
            print 'Hi, I am the default class method!'
        setattr(cls, attr, classmethod(_defaultClassMethod))
        return getattr(cls, attr)
</snippet></ROW><ROW><id>11281744</id><snippet>&gt;&gt;&gt; class DefaultClassMethods(type):
...     def __getattr__(cls, attr):
...         def _defaultClassMethod(cls):
...             print 'Hi, I am the default class method!'
...         setattr(cls, attr, classmethod(_defaultClassMethod))
...         return getattr(cls, attr)
... 
&gt;&gt;&gt; class A(object):
...     __metaclass__ = DefaultClassMethods
... 
&gt;&gt;&gt; A.spam
&lt;bound method DefaultClassMethods._defaultClassMethod of &lt;class '__main__.A'&gt;&gt;
&gt;&gt;&gt; A.spam()
Hi, I am the default class method!
</snippet></ROW><ROW><id>11281744</id><snippet>classmethod</snippet></ROW><ROW><id>11281744</id><snippet>cls.__metaclass__</snippet></ROW><ROW><id>11281744</id><snippet>from types import MethodType

class DefaultClassMethods(type):
    def __getattr__(cls, attr):
        def _defaultClassMethod(cls):
            print 'Hi, I am the default class method!'
        return MethodType(_defaultClassMethod, cls, cls.__metaclass__)
</snippet></ROW><ROW><id>11281744</id><snippet>staticmethod</snippet></ROW><ROW><id>11281744</id><snippet>types.MethodType</snippet></ROW><ROW><id>11281829</id><snippet>import codecs
f = codecs.open('unicode.rst', encoding='utf-8')
for line in f:
    print repr(line)
</snippet></ROW><ROW><id>11282094</id><snippet>python setup.py nosetests</snippet></ROW><ROW><id>11282094</id><snippet>nosetests</snippet></ROW><ROW><id>11282094</id><snippet>nosetests</snippet></ROW><ROW><id>11282109</id><snippet>DEBUGFUNCTION</snippet></ROW><ROW><id>11282109</id><snippet>sent_headers = []
received_headers = []
def collect_headers(debug_type, debug_msg):
    if debug_type == pycurl.INFOTYPE_HEADER_OUT:
            sent_headers.append(debug_msg)
    if debug_type == pycurl.INFOTYPE_HEADER_IN:
            received_headers.append(debug_msg)

# somewhere later in the code

c = pycurl.Curl()
c.setopt(pycurl.URL, 'http://www.google.com/')
c.setopt(pycurl.DEBUGFUNCTION, collect_headers)
c.perform()
</snippet></ROW><ROW><id>11282671</id><snippet>x = []
for i in range(3):
    kcopy = k[:]
    random.shuffle(kcopy)
    x.append(kcopy)
</snippet></ROW><ROW><id>11282671</id><snippet>for i in range(3)</snippet></ROW><ROW><id>11282671</id><snippet>def create_random_chromosomes(genes):
    temp_chromosomes = []
    chromosomes = []
    for i in range(2000):
        print(genes)
        randomgenes = genes[:]
        random.shuffle(randomgenes)
        temp_chromosomes.append(randomgenes)
    print(temp_chromosomes)
    for element in temp_chromosomes:
        if element not in chromosomes:
            chromosomes.append(element)
    return chromosomes
</snippet></ROW><ROW><id>11282671</id><snippet>set</snippet></ROW><ROW><id>11282671</id><snippet>def create_random_chromosomes(genes):
    chromosomes = set()
    randomgenes = genes[:]
    for i in range(2000):
        random.shuffle(randomgenes)
        chromosomes.add(tuple(randomgenes))
    return list(chromosomes)
</snippet></ROW><ROW><id>11282671</id><snippet>def create_random_chromosomes(genes):
    chromosomes = set()
    randomgenes = genes[:]
    while len(chromosomes) &lt; 2000:
        random.shuffle(randomgenes)
        chromosomes.add(tuple(randomgenes))
    return list(chromosomes)
</snippet></ROW><ROW><id>11283173</id><snippet>&gt;&gt;&gt;
&gt;&gt;&gt; mock = Mock(spec=SomeClass)
&gt;&gt;&gt; isinstance(mock, SomeClass)
True
&gt;&gt;&gt; mock = Mock(spec_set=SomeClass())
&gt;&gt;&gt; isinstance(mock, SomeClass)
True
</snippet></ROW><ROW><id>11283173</id><snippet>m = mock.MagicMock(spec=bpgsql.Connection)
isinstance(m, bpgsql.Connection) 
</snippet></ROW><ROW><id>11283321</id><snippet>verify</snippet></ROW><ROW><id>11283425</id><snippet>SIGCHLD</snippet></ROW><ROW><id>11283425</id><snippet>multiprocessing</snippet></ROW><ROW><id>11283425</id><snippet>SIGCHLD</snippet></ROW><ROW><id>11283425</id><snippet>multiprocessing</snippet></ROW><ROW><id>11283425</id><snippet>deferToThread</snippet></ROW><ROW><id>11283425</id><snippet>deferToThread</snippet></ROW><ROW><id>11283425</id><snippet>multiprocessing</snippet></ROW><ROW><id>11283439</id><snippet>while True:
    newPoints = dict([(c,[]) for c in clusters])
    for p in points:
        cluster = min(clusters, key = lambda c:getDistance(p, c.centroid))
        newPoints[cluster].append(p)

    biggest_shift = 0.0

    for c in clusters:
        if newPoints[c]:
            shift = c.update(newPoints[c])
            biggest_shift = max(biggest_shift, shift)

    if biggest_shift &lt; cutoff:
        break
</snippet></ROW><ROW><id>11283449</id><snippet>raise cherrypy.HTTPRedirect("www.newsite.com")
</snippet></ROW><ROW><id>11283629</id><snippet>res[0][1]['charName'][0]
</snippet></ROW><ROW><id>11284016</id><snippet>__init__.py</snippet></ROW><ROW><id>11284016</id><snippet>pages</snippet></ROW><ROW><id>11284016</id><snippet>import pages</snippet></ROW><ROW><id>11284016</id><snippet>pages.py</snippet></ROW><ROW><id>11284016</id><snippet>from base import *</snippet></ROW><ROW><id>11284016</id><snippet>base</snippet></ROW><ROW><id>11284016</id><snippet>sub</snippet></ROW><ROW><id>11284016</id><snippet>blog.py</snippet></ROW><ROW><id>11284016</id><snippet>from sub import *</snippet></ROW><ROW><id>11284026</id><snippet>import string

class FormatDict(dict):
    def __missing__(self, key):
        return "{" + key + "}"

s = '{foo} {bar}'
formatter = string.Formatter()
mapping = FormatDict(foo='FOO')
print(formatter.vformat(s, (), mapping))
</snippet></ROW><ROW><id>11284026</id><snippet>FOO {bar}
</snippet></ROW><ROW><id>11284250</id><snippet>- url: /hello
  script: hello/hello.py
</snippet></ROW><ROW><id>11284250</id><snippet>script</snippet></ROW><ROW><id>11284254</id><snippet>from operator import itemgetter
distances = ((k, abs(v - value)) for k, v in bucketed_items_dict.items())
return min(distances, key=itemgetter(1))[0]
</snippet></ROW><ROW><id>11284254</id><snippet>distances = ((k, abs(v - value)) for k, v in bucketed_items_dict.items())
return min(distances, key=lambda x:x[1])[0]
</snippet></ROW><ROW><id>11284324</id><snippet>range*</snippet></ROW><ROW><id>11284324</id><snippet>class Likelihood():
    def __init__(self, x, y):
        self.range = [{} for i in range(x)] # without default values
        # if you need default values, use this code or numpy.zeros(shape=(x,y))
        #self.range = [[0 for j in range(y)] for i in range(x)]

class MyDataType():
    def __init__(self, dimension_1, dimension_2):
        self.likelihood = Likelihood(dimension_1, dimension_2)

ocd = [0, 1, MyDataType(100, 100)]

# copy-paste your code here:
ocd[2].likelihood.range[1][0]=[-5219, -5191, 11.7];
ocd[2].likelihood.range[1][1]=[-5180, -5057, 56.5];

print(ocd[2].likelihood.range[1][0])
</snippet></ROW><ROW><id>11284324</id><snippet>range10</snippet></ROW><ROW><id>11284324</id><snippet>ocd[2].likelihood.range[1][0]</snippet></ROW><ROW><id>11284324</id><snippet>Find what:    range(\d)(\d)
Replace with: ocd[2].likelihood.range[\1][\2]

i.e. from code: print(range10)
to code:        print(ocd[2].likelihood.range[1][0])
</snippet></ROW><ROW><id>11284642</id><snippet>s = raw_input()
a=len(s)
for i in xrange(0, a):
    for j in xrange(0, a):
        if j &gt;= i:
            if len(s[i:j+1]) &gt; 0:
                sub_strings.append(s[i:j+1])
</snippet></ROW><ROW><id>11284642</id><snippet>for i in xrange(0, a):
    for j in xrange(i, a): # ensures that j &gt;= i, no test required
        part = buffer(s, i, j+1-i) # don't duplicate data
        if len(part) &gt; 0:
            sub_Strings.append(part)
</snippet></ROW><ROW><id>11284642</id><snippet>l</snippet></ROW><ROW><id>11284642</id><snippet>l*l/2</snippet></ROW><ROW><id>11284642</id><snippet>l/2</snippet></ROW><ROW><id>11284642</id><snippet>l*l*l/4</snippet></ROW><ROW><id>11284642</id><snippet>buffer()</snippet></ROW><ROW><id>11284642</id><snippet>memoryview()</snippet></ROW><ROW><id>11284803</id><snippet>curses</snippet></ROW><ROW><id>11284803</id><snippet>ncurses</snippet></ROW><ROW><id>11284803</id><snippet>\r</snippet></ROW><ROW><id>11284803</id><snippet>curses</snippet></ROW><ROW><id>11284803</id><snippet>curses</snippet></ROW><ROW><id>11285088</id><snippet>import itertools
existing_sets = set(frozenset(x) for x in setslist)
new_sets = set(frozenset(x) for x in itertools.combinations(uniquenumbers, 2))
setslist = list(existing_sets | new_sets)
</snippet></ROW><ROW><id>11285464</id><snippet>for line in fileinput.input(hostsFileLoc,inplace =1):
    line = line.strip()
    if line != hostIP:
        print line
</snippet></ROW><ROW><id>11285464</id><snippet>for line in fileinput.input(hostsFileLoc,inplace =1):
    elements = line.split(",")
    first = elements[0].strip()
    if first != hostIP:
        print line
</snippet></ROW><ROW><id>11285562</id><snippet>except ValueError:
    _, err, _ = sys.exc_info()
    #.. use err...
</snippet></ROW><ROW><id>11285562</id><snippet>except ValueError as err:
    #.. use err...
</snippet></ROW><ROW><id>11285606</id><snippet>productphoto_set</snippet></ROW><ROW><id>11285606</id><snippet>product = Product.objects.get(pk=1)
photos = product.productphoto_set.all()
</snippet></ROW><ROW><id>11285616</id><snippet>__dict__</snippet></ROW><ROW><id>11285616</id><snippet>__dict__</snippet></ROW><ROW><id>11285616</id><snippet>vars()</snippet></ROW><ROW><id>11285667</id><snippet>parts = (1, 'a', 'b', 2, 'c', 'd', None, 'f')
# parts = (self.house, self.suf, self.unit, 
#           self.stex, self.stdir, self.stname, 
#           self.stdes, self.stdessuf)
' '.join(str(part) for part in parts if part is not None)
# '1 a b 2 c d e f'
</snippet></ROW><ROW><id>11286062</id><snippet>wx.GetMousePosition</snippet></ROW><ROW><id>11286062</id><snippet>panel.ScreenToClient(wx.GetMousePosition())</snippet></ROW><ROW><id>11286259</id><snippet>db.units.find()</snippet></ROW><ROW><id>11286259</id><snippet>response</snippet></ROW><ROW><id>11286259</id><snippet>pymongo.cursor.Cursor</snippet></ROW><ROW><id>11286259</id><snippet>json.dumps</snippet></ROW><ROW><id>11286259</id><snippet>json.dumps</snippet></ROW><ROW><id>11286259</id><snippet>[doc for doc in db.units.find()]
</snippet></ROW><ROW><id>11286414</id><snippet>[str(u) for u in [(u'one'),(u'one'),(u'three')]]
</snippet></ROW><ROW><id>11286414</id><snippet>str</snippet></ROW><ROW><id>11286414</id><snippet>['one','two','three']</snippet></ROW><ROW><id>11286634</id><snippet>subprocess</snippet></ROW><ROW><id>11286634</id><snippet>stdout=PIPE</snippet></ROW><ROW><id>11286634</id><snippet>stderr=PIPE</snippet></ROW><ROW><id>11286634</id><snippet>communicate()</snippet></ROW><ROW><id>11286814</id><snippet>pip install PIL
</snippet></ROW><ROW><id>11286814</id><snippet>try:
    import Image
    if PIL_WARNINGS: warnOnce('Python Imaging Library not available as package; upgrade   your installation!')
except ImportError, errMsg:
    _checkImportError(errMsg)
    Image = None
</snippet></ROW><ROW><id>11286909</id><snippet>def are_anagrams(s1, s2):
    return sorted(s1)==sorted(s2)
</snippet></ROW><ROW><id>11286929</id><snippet>stories = data.get('stories', [])
</snippet></ROW><ROW><id>11286929</id><snippet>if len(stories) &gt;= 2:
    print stories[1]['title']
</snippet></ROW><ROW><id>11286929</id><snippet>i = 1
try:
    print stories[i]['title']
except IndexError:
    print "Story does not exist at index %d" % i
</snippet></ROW><ROW><id>11286929</id><snippet>imgs = set()
for img in stories[1].get('images', []):
    for variant in img.get('variants', []):
        if variant.get('layout') == '1024 Landscape':
            imgs.add(variant['src'])
print imgs
set([u'http://static.stuff.co.nz/1341147692/827/7202827.jpg'])
</snippet></ROW><ROW><id>11287086</id><snippet>scipy.stats.hypergeom.pmf(k, M, n, N)
</snippet></ROW><ROW><id>11287086</id><snippet>def pick_Q(N, M, Q):
    """
    Given a deck of N cards, where M are marked,
    and Q cards are taken randomly without replacement,
    return the probability that at least one marked card is taken.
    """
    return sum(scipy.stats.hypergeom.pmf(k, N, M, Q) for k in xrange(1,Q+1))
</snippet></ROW><ROW><id>11287086</id><snippet>def pick_Q(N, M, Q):
    """
    Given a deck of N cards, where M are marked,
    and Q cards are taken randomly without replacement,
    return the probability that at least one marked card is taken.
    """
    return 1. - scipy.stats.hypergeom.pmf(0, N, M, Q)
</snippet></ROW><ROW><id>11287086</id><snippet>def how_many_to_pick(N, M, prob):
    """
    Given a deck of N cards, M of which are marked,
    how many do you have to pick randomly without replacement
    to have at least prob probability of picking at least one marked card?
    """
    for q in xrange(1, M+1):
        if pick_Q(N, M, q) &gt;= prob:
            return q
    raise ValueError("Could not find a value for q")
</snippet></ROW><ROW><id>11287086</id><snippet>scipy.stats.hypergeom.cdf(k, M, n, N)
</snippet></ROW><ROW><id>11287086</id><snippet> k      pmf(k,52,13,4)   cdf(k,52,13,4)   sf(k,52,13,4)
     (exactly k picked)  ( &lt;= k picked)   ( &gt; k picked)
---  -----------------  ---------------  --------------
 0       0.303817527      0.303817527      0.696182473
 1       0.438847539      0.742665066      0.257334934
 2       0.213493397      0.956158463      0.043841537
 3       0.041200480      0.997358944      0.002641056
 4       0.002641056      1.000000000      0.000000000
</snippet></ROW><ROW><id>11287086</id><snippet>def pick_Q(N, M, Q):
    """
    Given a deck of N cards, where M are marked,
    and Q cards are taken randomly without replacement,
    return the probability that at least one marked card is taken.
    """
    return scipy.stats.hypergeom.sf(0, N, M, Q)
</snippet></ROW><ROW><id>11287440</id><snippet>def byte_offset(a):
    """Returns a 1-d array of the byte offset of every element in `a`.
    Note that these will not in general be in order."""
    stride_offset = np.ix_(*map(range,a.shape))
    element_offset = sum(i*s for i, s in zip(stride_offset,a.strides))
    element_offset = np.asarray(element_offset).ravel()
    return np.concatenate([element_offset + x for x in range(a.itemsize)])

def share_memory(a, b):
    """Returns the number of shared bytes between arrays `a` and `b`."""
    a_low, a_high = np.byte_bounds(a)
    b_low, b_high = np.byte_bounds(b)

    beg, end = max(a_low,b_low), min(a_high,b_high)

    if end - beg &gt; 0:
        # memory overlaps
        amem = a_low + byte_offset(a)
        bmem = b_low + byte_offset(b)

        return np.intersect1d(amem,bmem).size
    else:
        return 0
</snippet></ROW><ROW><id>11287440</id><snippet>&gt;&gt;&gt; a = np.arange(10)
&gt;&gt;&gt; b = a.reshape((5,2))
&gt;&gt;&gt; c = a[::2]
&gt;&gt;&gt; d = a[1::2]
&gt;&gt;&gt; e = a[0:1]
&gt;&gt;&gt; f = a[0:1]
&gt;&gt;&gt; f = f.reshape(())
&gt;&gt;&gt; share_memory(a,b)
80
&gt;&gt;&gt; share_memory(a,c)
40
&gt;&gt;&gt; share_memory(a,d)
40
&gt;&gt;&gt; share_memory(c,d)
0
&gt;&gt;&gt; share_memory(a,e)
8
&gt;&gt;&gt; share_memory(a,f)
8
</snippet></ROW><ROW><id>11287440</id><snippet>share_memory(a,a[::2])</snippet></ROW><ROW><id>11287440</id><snippet>a</snippet></ROW><ROW><id>11287630</id><snippet># Import smtplib for the actual sending function
import smtplib

# Import the email modules we'll need
from email.mime.text import MIMEText

# Open a plain text file for reading.  For this example, assume that
# the text file contains only ASCII characters.
fp = open(textfile, 'rb')
# Create a text/plain message
msg = MIMEText(fp.read())
fp.close()

# me == the sender's email address
# you == the recipient's email address
msg['Subject'] = 'The contents of %s' % textfile
msg['From'] = me
msg['To'] = you

# Send the message via our own SMTP server, but don't include the
# envelope header.
s = smtplib.SMTP('localhost')
s.sendmail(me, [you], msg.as_string())
s.quit()
</snippet></ROW><ROW><id>11287630</id><snippet>from google.appengine.api import mail

mail.send_mail(sender="Example.com Support &lt;support@example.com&gt;",
              to="Albert Johnson &lt;Albert.Johnson@example.com&gt;",
              subject="Your account has been approved",
              body="""
Dear Albert:

Your example.com account has been approved.  You can now visit
http://www.example.com/ and sign in using your Google Account to
access new features.

Please let us know if you have any questions.

The example.com Team
""")
</snippet></ROW><ROW><id>11287634</id><snippet>Path</snippet></ROW><ROW><id>11287643</id><snippet>cv.CreateImageHeader()
cv.SetData()
</snippet></ROW><ROW><id>11287643</id><snippet>#include "opencv2/opencv.hpp"

extern "C"  //Tells the compile to use C-linkage for the next scope.
{
    // Returns image loaded from location
    __declspec(dllexport) IplImage* Load(char* dir);

    // Show image
    __declspec(dllexport) void Show(IplImage* img);

    // Auxiliary functions
    __declspec(dllexport) void aux_cvSetData(CvArr* arr, void* data, int step);
    __declspec(dllexport) IplImage* aux_cvCreateImageHeader(int width, int height, int depth, int channels);
    __declspec(dllexport) IplImage* aux_cvCvtColor(const IplImage* src, int code);
    __declspec(dllexport) void aux_cvCopy(const CvArr* src, CvArr* dst);
    __declspec(dllexport) void aux_cvReleaseImage(IplImage** image);
    __declspec(dllexport) void aux_cvReleaseImageHeader(IplImage** image);
}
</snippet></ROW><ROW><id>11287643</id><snippet>#include "ImageDll.h"

using namespace std;

extern "C"  //Tells the compile to use C-linkage for the next scope.
{
    IplImage* Load(char* dir)
    {
        return cvLoadImage(dir, CV_LOAD_IMAGE_COLOR);
    }

    void Show(IplImage* img)
    {
        cvShowImage("image", img);
        cvWaitKey(5);
    }

    void aux_cvSetData(CvArr* arr, void* data, int step)
    {
        cvSetData(arr,data,step);
    }

    IplImage* aux_cvCreateImageHeader(int width, int height, int depth, int channels)
    {
        return cvCreateImageHeader(cvSize(width,height), depth, channels);
    }

    IplImage* aux_cvCvtColor(const IplImage* src, int code)
    {
        IplImage* dst = cvCreateImage(cvSize(src-&gt;width,src-&gt;height),src-&gt;depth,src-&gt;nChannels);
        cvCvtColor(src, dst, code);
        return dst;
    }

    void aux_cvCopy(const CvArr* src, CvArr* dst)
    {
        cvCopy(src, dst, NULL);
    }

    void aux_cvReleaseImage(IplImage** image)
    {
        cvReleaseImage(image);
    }

    void aux_cvReleaseImageHeader(IplImage** image)
    {
        cvReleaseImageHeader(image);
    }
}
</snippet></ROW><ROW><id>11287643</id><snippet># This Python file uses the following encoding: utf-8

from time import sleep
from ctypes import *
from modules.acquisition import InitCamera, GetImage
from modules.utils import struct
import cv2.cv as cv
from modules.ipl import *

# load DLL containing image functions
print "Loading shared library with C functions...",
image_lib = cdll.LoadLibrary("OpenCV_test_DLL.dll")
print "Done."
# get function handles
print "Loading functions of library...",
image_load = image_lib.Load
image_show = image_lib.Show
cvReleaseImage = image_lib.aux_cvReleaseImage
# set return type for functions (because ctypes default is int)
image_load.restype = c_void_p
image_show.restype = None
cvReleaseImage.restype = None
print "Done."

# initialize source
print "Initializing camera",
source = struct()
InitCamera(source)
print "Done."

# show video
while (1):
    # get image as PIL image
    img = GetImage(source)
    # transform image to OpenCV IplImage
    cv_img = PIL2Ipl(img)
    # show image using OpenCV highgui lib
    image_show(cv_img)
    # release memory
    cvReleaseImage(byref(cv_img))
</snippet></ROW><ROW><id>11287643</id><snippet>from ctypes import *
from cv2 import cv

# ctypes IplImage
class cIplImage(Structure):
    _fields_ = [("nSize", c_int),
                ("ID", c_int),
                ("nChannels", c_int),
                ("alphaChannel", c_int),
                ("depth", c_int),
                ("colorModel", c_char * 4),
                ("channelSeq", c_char * 4),
                ("dataOrder", c_int),
                ("origin", c_int),
                ("align", c_int),
                ("width", c_int),
                ("height", c_int),
                ("roi", c_void_p),
                ("maskROI", c_void_p),
                ("imageID", c_void_p),
                ("tileInfo", c_void_p),
                ("imageSize", c_int),
                ("imageData", POINTER(c_char)),
                ("widthStep", c_int),
                ("BorderMode", c_int * 4),
                ("BorderConst", c_int * 4),
                ("imageDataOrigin", c_char_p)]

# load DLL containing needed OpenCV functions
libr = cdll.LoadLibrary("OpenCV_test_DLL.dll")
cvSetData = libr.aux_cvSetData
cvCreateImageHeader = libr.aux_cvCreateImageHeader
cvCvtColor = libr.aux_cvCvtColor
cvCopy = libr.aux_cvCopy
cvReleaseImage = libr.aux_cvReleaseImage
cvReleaseImageHeader = libr.aux_cvReleaseImageHeader
# set return types for library functions
cvSetData.restype = None
cvCreateImageHeader.restype = POINTER(cIplImage)
cvCvtColor.restype = POINTER(cIplImage)
cvCopy.restype = None
cvReleaseImage.restype = None
cvReleaseImageHeader.restype = None
#print "auxlib loaded"

# convert Python PIL to ctypes Ipl
def PIL2Ipl(pil_img):
    """Converts a PIL image to the OpenCV/IplImage data format.

    Supported input image formats are:
        RGB
        L
        F
    """

    # mode dictionary:
    # (pil_mode : (ipl_depth, ipl_channels)
    mode_list = {
        "RGB" : (cv.IPL_DEPTH_8U, 3),
        "L"   : (cv.IPL_DEPTH_8U, 1),
        "F"   : (cv.IPL_DEPTH_32F, 1)
        }

    if not mode_list.has_key(pil_img.mode):
        raise ValueError, 'unknown or unsupported input mode'

    depth = c_int(mode_list[pil_img.mode][0])
    channels = c_int(mode_list[pil_img.mode][1])
    height = c_int(pil_img.size[1])
    width = c_int(pil_img.size[0])
    data = pil_img.tostring()

    ipl_img = cvCreateImageHeader(width, height, depth, channels);
    cvSetData(ipl_img, create_string_buffer(data,len(data)), c_int(width.value * channels.value))
    brg_img = cvCvtColor(ipl_img,cv.CV_RGB2BGR)
    cvReleaseImageHeader(byref(ipl_img))
    return brg_img
</snippet></ROW><ROW><id>11287846</id><snippet>with open('infile.txt') as infile, open('outfile.txt', 'w') as outfile:
    outfile.write(', '.join(infile.read().split('\n')) + '\n')
</snippet></ROW><ROW><id>11287999</id><snippet>def methodName(parameter):
    Class_Name.CONSTANT_VARIABLE = parameter
methodName = some_decorator(methodName)
</snippet></ROW><ROW><id>11287999</id><snippet>@some_decorator
def methodName(parameter):
    Class_Name.CONSTANT_VARIABLE = parameter
</snippet></ROW><ROW><id>11288171</id><snippet>obj.increasePermanence()
</snippet></ROW><ROW><id>11288195</id><snippet>.lower()</snippet></ROW><ROW><id>11288195</id><snippet>&gt;&gt;&gt; "Harry Potter".lower() == "harry potter".lower()
True
</snippet></ROW><ROW><id>11288252</id><snippet>DU0Q0U08gAc</snippet></ROW><ROW><id>11288252</id><snippet>&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/DU0Q0U08gAc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
</snippet></ROW><ROW><id>11288252</id><snippet>youtu.be</snippet></ROW><ROW><id>11288252</id><snippet>youtube.com</snippet></ROW><ROW><id>11288495</id><snippet>:!python3 %</snippet></ROW><ROW><id>11288495</id><snippet>noremap &lt;D-r&gt; &lt;esc&gt;:w&lt;CR&gt;:!python3 %&lt;CR&gt;</snippet></ROW><ROW><id>11288495</id><snippet>Command+r</snippet></ROW><ROW><id>11288503</id><snippet>from Queue import Queue

class IterableQueue(Queue): 

    _sentinel = object()

    def __iter__(self):
        return iter(self.get, self._sentinel)

    def close(self):
        self.put(self._sentinel)
</snippet></ROW><ROW><id>11289315</id><snippet>isinstance()</snippet></ROW><ROW><id>11289315</id><snippet>if</snippet></ROW><ROW><id>11289315</id><snippet>elem</snippet></ROW><ROW><id>11289315</id><snippet>def count_occurrences(p,letter):
    count = 0
    for elem in p:
        if isinstance(elem,str) and elem[0]==letter: #if the first condition is true then
                                                     # only it'll check the next condition
            count = count+1
    return count
</snippet></ROW><ROW><id>11289492</id><snippet>if</snippet></ROW><ROW><id>11289492</id><snippet> if not line.startswith(r'//'):
     #then do something here
</snippet></ROW><ROW><id>11289649</id><snippet>cwd</snippet></ROW><ROW><id>11289649</id><snippet>pexpect.run("pwd", cwd="/home")
</snippet></ROW><ROW><id>11289649</id><snippet>os.chdir()</snippet></ROW><ROW><id>11289649</id><snippet>run</snippet></ROW><ROW><id>11289649</id><snippet>os.chdir("/home")
pexpect.run("pwd")
</snippet></ROW><ROW><id>11289726</id><snippet>xml.parsers.expat.ParserCreate</snippet></ROW><ROW><id>11289726</id><snippet>UTF-8</snippet></ROW><ROW><id>11289726</id><snippet>UTF-16</snippet></ROW><ROW><id>11289726</id><snippet>ISO-8859-1</snippet></ROW><ROW><id>11289726</id><snippet>Latin1</snippet></ROW><ROW><id>11289726</id><snippet>ASCII</snippet></ROW><ROW><id>11289726</id><snippet>ElementTree.parse</snippet></ROW><ROW><id>11289726</id><snippet>from xml.parsers import expat
tree = ElementTree()
root = tree.parse(xml_file, parser=expat.ParserCreate('UTF-8') )
root = tree.parse(xml_file, parser=expat.ParserCreate('UTF-16') )
root = tree.parse(xml_file, parser=expat.ParserCreate('ISO-8859-1') )
root = tree.parse(xml_file, parser=expat.ParserCreate('ASCII') )
</snippet></ROW><ROW><id>11289931</id><snippet>re.sub('[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}','CENSORED_IP',data)
</snippet></ROW><ROW><id>11289931</id><snippet>re.sub('(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)','CENSORED_IP',data)
</snippet></ROW><ROW><id>11289968</id><snippet>jsondata = {"create_method" : "file","title":"s9fsdf"}
data = {"data" : json.dumps(jsondata)}
data = urllib.urlencode(data)
req = urllib2.Request(url)
req.add_data(data)
</snippet></ROW><ROW><id>11290471</id><snippet>a=[("13.5",100)]
b=[("14.5",100), ("15.5", 100)]
c=[("15.5",100), ("16.5", 100)]
input=[a,b,c]

from collections import Counter

print sum(
    (Counter(dict(x)) for x in input),
    Counter())
</snippet></ROW><ROW><id>11290471</id><snippet>Counter</snippet></ROW><ROW><id>11290471</id><snippet>from collections import Counter
from operator import add

print reduce(add, (Counter(dict(x)) for x in input))
</snippet></ROW><ROW><id>11290471</id><snippet>reduce(add, seq)</snippet></ROW><ROW><id>11290471</id><snippet>sum(seq, initialValue)</snippet></ROW><ROW><id>11290471</id><snippet>operator.and_</snippet></ROW><ROW><id>11290471</id><snippet>Counter+Counter</snippet></ROW><ROW><id>11290471</id><snippet>Counter</snippet></ROW><ROW><id>11290471</id><snippet>Counter.update</snippet></ROW><ROW><id>11290471</id><snippet>reduce</snippet></ROW><ROW><id>11290471</id><snippet>def updateInPlace(a,b):
    a.update(b)
    return a

print reduce(updateInPlace, (Counter(dict(x)) for x in input))
</snippet></ROW><ROW><id>11290471</id><snippet>updateInPlace</snippet></ROW><ROW><id>11290471</id><snippet>lambda x,y: x.update(y) or x</snippet></ROW><ROW><id>11290560</id><snippet>.fileConfig</snippet></ROW><ROW><id>11290560</id><snippet>import logging

DEFAULT_LOG_CONFIG = 'somepath/logging.conf'

def main(args):
    ...
    # parse command line arguments or similar
    log_config = options.logconfig or DEFAULT_LOG_CONFIG
    logging.fileConfig(DEFAULT_LOG_CONFIG)
</snippet></ROW><ROW><id>11290736</id><snippet>SublimeCodeIntel/libs/codeintel2/catalogs/</snippet></ROW><ROW><id>11290736</id><snippet>Preferences</snippet></ROW><ROW><id>11290736</id><snippet>Browse Packages...</snippet></ROW><ROW><id>11290793</id><snippet>bisect.bisect</snippet></ROW><ROW><id>11290980</id><snippet>qry = Article.query().get(projection=[Article.author, Article.tags])
</snippet></ROW><ROW><id>11290980</id><snippet>get</snippet></ROW><ROW><id>11291174</id><snippet>&lt;p&gt;123&lt;/p&gt;</snippet></ROW><ROW><id>11291174</id><snippet>find_all(text=True)</snippet></ROW><ROW><id>11291174</id><snippet>['123']</snippet></ROW><ROW><id>11291174</id><snippet>&lt;p&gt;12&lt;b&gt;3&lt;/b&gt;&lt;/p&gt;</snippet></ROW><ROW><id>11291174</id><snippet>['12','3']</snippet></ROW><ROW><id>11291174</id><snippet>['123']</snippet></ROW><ROW><id>11291174</id><snippet>import re
html='&lt;p&gt;12&lt;b&gt;3&lt;/b&gt;&lt;/p&gt;'
reExp='&lt;[\/\!]?b[^&lt;&gt;]*?&gt;'
print re.sub(reExp,'',html)
</snippet></ROW><ROW><id>11291174</id><snippet>import re
patterns = '&lt;TD align=center&gt;(?P&lt;VALUES_TO_FIND&gt;.*?)&lt;\/TD&gt;'
print re.findall(patterns, your_html)
</snippet></ROW><ROW><id>11291227</id><snippet>(?&lt;!^|\d)\d+(?!$|\d)
</snippet></ROW><ROW><id>11291227</id><snippet>X</snippet></ROW><ROW><id>11291227</id><snippet>"  5 ddds"</snippet></ROW><ROW><id>11291227</id><snippet>"  X ddds"</snippet></ROW><ROW><id>11291345</id><snippet>webapp2.redirect(self.request.referer)
</snippet></ROW><ROW><id>11291419</id><snippet>PNG</snippet></ROW><ROW><id>11291419</id><snippet>JPG</snippet></ROW><ROW><id>11291419</id><snippet>rad</snippet></ROW><ROW><id>11291419</id><snippet>draw.ellipse()</snippet></ROW><ROW><id>11291419</id><snippet>putalpha()</snippet></ROW><ROW><id>11291419</id><snippet>png</snippet></ROW><ROW><id>11291419</id><snippet>import Image, ImageDraw

def add_corners(im, rad):
    circle = Image.new('L', (rad * 2, rad * 2), 0)
    draw = ImageDraw.Draw(circle)
    draw.ellipse((0, 0, rad * 2, rad * 2), fill=255)
    alpha = Image.new('L', im.size, 255)
    w, h = im.size
    alpha.paste(circle.crop((0, 0, rad, rad)), (0, 0))
    alpha.paste(circle.crop((0, rad, rad, rad * 2)), (0, h - rad))
    alpha.paste(circle.crop((rad, 0, rad * 2, rad)), (w - rad, 0))
    alpha.paste(circle.crop((rad, rad, rad * 2, rad * 2)), (w - rad, h - rad))
    im.putalpha(alpha)
    return im

im = Image.open('tiger.jpg')
im = add_corners(im, 100)
im.save('tiger.png')
</snippet></ROW><ROW><id>11291552</id><snippet>import os
import zipfile
import ConfigParser
import ftputil
import shutil
import time
import tempfile
import logging



def dl_function(source_folder, target_folder):
    logging.trace("Running dl_function")
    dirlist = ftp.listdir(source_folder)
    logging.trace("Got a dirlist")
    for list in dirlist:
        logging.trace("Running running for item " + list + " in dirlist")
        source = os.path.join(source_folder, list)
        logging.trace("Setting source to " + source)
        target = os.path.join(target_folder, list)
        logging.trace("Setting target to " + source)
        logging.trace("Attempting FTP download from " + source + " to " + target)
        ftp.download(source, target)
        logging.info("File downloaded from FTP")

...
...
...

if __name__ == '__main__':
    logging.info("Starting downloading application")
    main()
</snippet></ROW><ROW><id>11291552</id><snippet>Debug</snippet></ROW><ROW><id>11291552</id><snippet>Info</snippet></ROW><ROW><id>11291552</id><snippet>Warning</snippet></ROW><ROW><id>11291552</id><snippet>Error</snippet></ROW><ROW><id>11291552</id><snippet>Critical</snippet></ROW><ROW><id>11291894</id><snippet>&gt;&gt;&gt; union
[2.0, 10.0) U [20.0, 30.0) U {1.0, 15.0, 17.0, 40.0}
&gt;&gt;&gt; union.args
([2.0, 10.0), [20.0, 30.0), {1.0, 15.0, 17.0, 40.0})
</snippet></ROW><ROW><id>11291934</id><snippet>move()</snippet></ROW><ROW><id>11291934</id><snippet>None</snippet></ROW><ROW><id>11291934</id><snippet>class Assassin(pyglet.sprite.Sprite):
    (...)


    def move(self, batch, img):
        self.batch = batch
        self.img = img      
</snippet></ROW><ROW><id>11291934</id><snippet>self.player</snippet></ROW><ROW><id>11291934</id><snippet>player.move()</snippet></ROW><ROW><id>11291934</id><snippet>None</snippet></ROW><ROW><id>11291934</id><snippet>self.player = self.player.move(batch = self.batch_draw, img = sprite_type("moving-forward"))
</snippet></ROW><ROW><id>11291934</id><snippet>AttributeError: 'NoneType' object has no attribute 'draw'</snippet></ROW><ROW><id>11291934</id><snippet>self.player</snippet></ROW><ROW><id>11291934</id><snippet>None</snippet></ROW><ROW><id>11291934</id><snippet>draw()</snippet></ROW><ROW><id>11292055</id><snippet>InputVec = np.array([2, 3, 4])
InputVariable[0,:] = InputVec
</snippet></ROW><ROW><id>11292172</id><snippet>os.walk</snippet></ROW><ROW><id>11292172</id><snippet>&gt;&gt;&gt; path = r'D:\DATA\FP12210\My Documents\Temp\Python'
&gt;&gt;&gt; import os
&gt;&gt;&gt; files1 = []
&gt;&gt;&gt; for root, dirs, files in os.walk(os.path.join(path, 'Folder 1')):
    files1.extend(files)


&gt;&gt;&gt; files1
['c.txt', 'd.txt', 'a.txt', 'b.txt']
&gt;&gt;&gt; files2 = []
&gt;&gt;&gt; for root, dirs, files in os.walk(os.path.join(path, 'Folder 2')):
    files2.extend(files)


&gt;&gt;&gt; files2
['new1.txt', 'new2.txt', 'a.txt', 'b.txt', 'c.txt', 'd.txt']
</snippet></ROW><ROW><id>11292172</id><snippet>&gt;&gt;&gt; print [f for f in files2 if f not in files1]
['new1.txt', 'new2.txt']
</snippet></ROW><ROW><id>11292652</id><snippet>nvcc</snippet></ROW><ROW><id>11292652</id><snippet>extern "C" { }</snippet></ROW><ROW><id>11292652</id><snippet>#include</snippet></ROW><ROW><id>11292652</id><snippet>include_dirs</snippet></ROW><ROW><id>11292652</id><snippet>from pycuda import driver, gpuarray 
from pycuda.compiler import SourceModule 
import pycuda.autoinit 
kernel_code_template="""

#include "adoublecuda.h" 
__global__ void myfunction(float* inx, float* outy, float* outderiv) 
{ 
    //defining thread index 
    ... 
    //declare dependent and independet variables as adoubles 
    //this is a part of my question 
    adtl::adouble y[3]; 
    adtl::adouble x[3]; 
    // ...  
}

""" 

module = SourceModule(kernel_code_template, include_dirs=['path/to/adoublecuda'])
</snippet></ROW><ROW><id>11293286</id><snippet>def split_sequence(seq, chunks):
    for splits in itertools.combinations(range(1, len(seq)), chunks - 1):
        left = (None,) + splits
        right = splits + (None,)
        yield [seq[l:r] for l, r in zip(left, right)]
</snippet></ROW><ROW><id>11293286</id><snippet>&gt;&gt;&gt; list(split_sequence(range(7), 4))
[[[0], [1], [2], [3, 4, 5, 6]],
 [[0], [1], [2, 3], [4, 5, 6]],
 [[0], [1], [2, 3, 4], [5, 6]],
 [[0], [1], [2, 3, 4, 5], [6]],
 [[0], [1, 2], [3], [4, 5, 6]],
 [[0], [1, 2], [3, 4], [5, 6]],
 [[0], [1, 2], [3, 4, 5], [6]],
 [[0], [1, 2, 3], [4], [5, 6]],
 [[0], [1, 2, 3], [4, 5], [6]],
 [[0], [1, 2, 3, 4], [5], [6]],
 [[0, 1], [2], [3], [4, 5, 6]],
 [[0, 1], [2], [3, 4], [5, 6]],
 [[0, 1], [2], [3, 4, 5], [6]],
 [[0, 1], [2, 3], [4], [5, 6]],
 [[0, 1], [2, 3], [4, 5], [6]],
 [[0, 1], [2, 3, 4], [5], [6]],
 [[0, 1, 2], [3], [4], [5, 6]],
 [[0, 1, 2], [3], [4, 5], [6]],
 [[0, 1, 2], [3, 4], [5], [6]],
 [[0, 1, 2, 3], [4], [5], [6]]]
</snippet></ROW><ROW><id>11293478</id><snippet>~/.virtualenvs/myapp/bin/pip install -r requirements.txt
</snippet></ROW><ROW><id>11293478</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>11293720</id><snippet>sql = "INSERT INTO tbltemplate (template_name) VALUES (%s)"
for template in dir_template_list:
    conn.query(sql, (template,))
</snippet></ROW><ROW><id>11293754</id><snippet>b=np.ravel(a).reshape(tuple(reversed(a.shape)),order='F')
</snippet></ROW><ROW><id>11293754</id><snippet>b=a.T
</snippet></ROW><ROW><id>11293754</id><snippet>b.flags</snippet></ROW><ROW><id>11293754</id><snippet>a.flags</snippet></ROW><ROW><id>11293754</id><snippet>b.flags</snippet></ROW><ROW><id>11293802</id><snippet>dict_index_mylists[i]</snippet></ROW><ROW><id>11293924</id><snippet>{% sidebar_snippets appname %}</snippet></ROW><ROW><id>11294090</id><snippet>import os
import fnmatch

directory = "/Users/Desktop/TESTME"
for file in os.listdir(directory):
    if fnmatch.fnmatch(file, 'MISC*'):
        path = os.path.join(directory, file)
        target = os.path.join(directory, file[4:12] + '-13-Misc.jpg'
        os.rename(path, target)
</snippet></ROW><ROW><id>11294090</id><snippet>os.path.join</snippet></ROW><ROW><id>11294186</id><snippet>from collections import Counter
a = dict()
a['cat'] =      1
a['fish'] =     1
a['dog'] =      2  
a['bat'] =      3
a['aardvark'] = 3
a['lion'] =    4  
a['wallaby'] =  5
a['badger'] =   5

print Counter(a.values())    
</snippet></ROW><ROW><id>11294186</id><snippet>Counter({1: 2, 3: 2, 5: 2, 2: 1, 4: 1})</snippet></ROW><ROW><id>11294186</id><snippet>for key, value in Counter(a.values()).most_common():
    print key, value
</snippet></ROW><ROW><id>11294186</id><snippet>1 2
3 2
5 2
2 1
4 1
</snippet></ROW><ROW><id>11294186</id><snippet>for key, value in sorted(Counter(a.values()).items()):
    print key, value
</snippet></ROW><ROW><id>11294266</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.expanduser('~/.mozilla/firefox/dh4ytbdj.default/bookmarkbackups')
'/home/username/.mozilla/firefox/dh4ytbdj.default/bookmarkbackups'
</snippet></ROW><ROW><id>11294266</id><snippet>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('/home/*/.mozilla/firefox/*.default/bookmarkbackups')
</snippet></ROW><ROW><id>11294266</id><snippet>import os, glob
next(glob.iglob(os.path.expanduser('~/.mozilla/firefox/*.default/bookmarkbackups')))
</snippet></ROW><ROW><id>11294312</id><snippet>umask</snippet></ROW><ROW><id>11294312</id><snippet>chmod</snippet></ROW><ROW><id>11294312</id><snippet>umask</snippet></ROW><ROW><id>11294312</id><snippet>chmod</snippet></ROW><ROW><id>11294312</id><snippet>022</snippet></ROW><ROW><id>11294312</id><snippet>umask</snippet></ROW><ROW><id>11294312</id><snippet>755</snippet></ROW><ROW><id>11294312</id><snippet>7 - 0 = 7</snippet></ROW><ROW><id>11294312</id><snippet>7 - 2 = 5</snippet></ROW><ROW><id>11294312</id><snippet>umask 777</snippet></ROW><ROW><id>11294312</id><snippet>chmod 000</snippet></ROW><ROW><id>11294312</id><snippet>umask 112</snippet></ROW><ROW><id>11294312</id><snippet>chmod 664</snippet></ROW><ROW><id>11294312</id><snippet>umask</snippet></ROW><ROW><id>11294312</id><snippet>chmod</snippet></ROW><ROW><id>11294312</id><snippet>7</snippet></ROW><ROW><id>11294312</id><snippet>umask</snippet></ROW><ROW><id>11294312</id><snippet>umask</snippet></ROW><ROW><id>11294312</id><snippet>umask</snippet></ROW><ROW><id>11294312</id><snippet>os.chmod()</snippet></ROW><ROW><id>11294370</id><snippet>Trajectory()</snippet></ROW><ROW><id>11294370</id><snippet>Trajectory</snippet></ROW><ROW><id>11294370</id><snippet>print inspect.isclass(Trajectory)
</snippet></ROW><ROW><id>11294370</id><snippet>True</snippet></ROW><ROW><id>11295054</id><snippet>objc</snippet></ROW><ROW><id>11295054</id><snippet>objc</snippet></ROW><ROW><id>11295232</id><snippet>from itertools import izip

with open("textfile1") as textfile1, open("textfile2") as textfile2: 
    for x, y in izip(textfile1, textfile2):
        x = x.strip()
        y = y.strip()
        print("{0}\t{1}".format(x, y))
</snippet></ROW><ROW><id>11295232</id><snippet>itertools.izip</snippet></ROW><ROW><id>11295232</id><snippet>zip</snippet></ROW><ROW><id>11295365</id><snippet>re.findall(r'&lt;HR&gt;\s*&lt;font size="\+1"&gt;(.*?)&lt;/font&gt;&lt;BR&gt;', html, re.DOTALL)
</snippet></ROW><ROW><id>11295365</id><snippet>findall</snippet></ROW><ROW><id>11295365</id><snippet>\s*</snippet></ROW><ROW><id>11295705</id><snippet>try / except</snippet></ROW><ROW><id>11295705</id><snippet>if</snippet></ROW><ROW><id>11295811</id><snippet>print re.findall(r'^(.+?)((.)\3+)$', '446642126666')[0][:-1] # ('44664212', '6666')
</snippet></ROW><ROW><id>11295811</id><snippet>print re.findall(r'^(.+?)((.)\3+)?$', '12333')[0][:-1] # ('12', '333')
print re.findall(r'^(.+?)((.)\3+)?$', '123')[0][:-1]   # ('123', '')
</snippet></ROW><ROW><id>11295857</id><snippet>.size</snippet></ROW><ROW><id>11295857</id><snippet>import numpy as np
a = np.array([])
print a.size # 0
</snippet></ROW><ROW><id>11296040</id><snippet>h1 = Host("hostName1")  #After __init__:h1.filelist -&gt; Host.filelist
h1.AddInfo("h1")        #After AddInfo: h1.filelist -&gt; Host.filelist
h1.Cleanup()            #After Cleanup: h1.filelist is a new list

h2 = Host("hostName2")  #After __init__:h2.filelist -&gt; Host.filelist (which already has 'h1' inserted)
h2.AddInfo("h2")        #After AddInfo: h2.filelist -&gt; Host.filelist
</snippet></ROW><ROW><id>11296040</id><snippet>self.filelist</snippet></ROW><ROW><id>11296040</id><snippet>filelist</snippet></ROW><ROW><id>11296040</id><snippet>self.filelist=[]</snippet></ROW><ROW><id>11296040</id><snippet>Cleanup</snippet></ROW><ROW><id>11296040</id><snippet>filelist</snippet></ROW><ROW><id>11296120</id><snippet>looking_for = iter(when_to_change_the_mode)
current = next(looking_for)
for l in listA:
    do_something(current)
    if l == current:
        current = next(looking_for)
</snippet></ROW><ROW><id>11296120</id><snippet>next</snippet></ROW><ROW><id>11296171</id><snippet>tkFileDialog.askdirectory</snippet></ROW><ROW><id>11296201</id><snippet>if bl[4][c]!='HST_10775_64_ACS_WFC_F814W_F606W':
    print bl[0][c] 
</snippet></ROW><ROW><id>11296356</id><snippet>import re

s="""
&lt;TR&gt;
    &lt;TD align=center&gt;Reissue of:&lt;/TD&gt;
    &lt;TD align=center&gt; **VALUES_TO_FIND** &lt;/TD&gt;
    &lt;TD&gt; &lt;/TD&gt; 
&lt;/TR&gt;
"""

p="""
&lt;TR&gt;
    &lt;TD align=center&gt;Reissue of:&lt;/TD&gt;
    &lt;TD align=center&gt;(.*)&lt;/TD&gt;
    &lt;TD&gt; &lt;/TD&gt; 
&lt;/TR&gt;
"""

m=re.search(p, s)
print m.group(1)
</snippet></ROW><ROW><id>11296541</id><snippet>if q%100==0: 
    self.progress['value']=float(q)/100
    self.progress.update_idletasks()
</snippet></ROW><ROW><id>11296541</id><snippet>self.progress.configure(value=q)
self.progress.update_idletasks()
</snippet></ROW><ROW><id>11296541</id><snippet>update_idletasks()</snippet></ROW><ROW><id>11296541</id><snippet>file.tell</snippet></ROW><ROW><id>11296541</id><snippet>fsize=os.path.getsize(filename)
...
q=f.tell()/fsize
</snippet></ROW><ROW><id>11296541</id><snippet>self.progress = ttk.Progressbar(frame, orient='horizontal',
                                length =200, mode='determinate',maximum=1.)
</snippet></ROW><ROW><id>11296541</id><snippet>for i,row in enumerate(read):
    q=f.tell()/fsize
    if i%100==0: 
        self.progress['value']=q
        self.progress.update_idletasks()
    #do stuff
else:
    self.progress['value']=q
    self.progress.update_idletasks()
</snippet></ROW><ROW><id>11296541</id><snippet>try/except</snippet></ROW><ROW><id>11296541</id><snippet>try:
   #something
except SomeError: #IOError?  OSError? some combination of the two of them?
   #something else.
</snippet></ROW><ROW><id>11296549</id><snippet>class OrderedMeta(type):
    @classmethod
    def __prepare__(metacls, name, bases): 
        return OrderedDict()

    def __new__(cls, name, bases, clsdict):
        c = type.__new__(cls, name, bases, clsdict)
        c._orderedKeys = clsdict.keys()
        return c

class Person(metaclass=OrderedMeta):
    name = None
    date_of_birth = None
    nationality = None
    gender = None
    address = None
    comment = None

for member in Person._orderedKeys:
    if not getattr(Person, member):
        print(member)
</snippet></ROW><ROW><id>11296618</id><snippet>corelist = [m.group(1) for m in
            re.finditer(r"\b([0-9]+)ProcessorsRequested\b", output)]
</snippet></ROW><ROW><id>11296821</id><snippet>tell()</snippet></ROW><ROW><id>11296821</id><snippet>ftell()</snippet></ROW><ROW><id>11296821</id><snippet>0</snippet></ROW><ROW><id>11296821</id><snippet>0</snippet></ROW><ROW><id>11296821</id><snippet>5</snippet></ROW><ROW><id>11296821</id><snippet>&gt;&gt;&gt; with open('test.txt', 'w') as fh:
    fh.write('12345')
    fh.tell()

5L 
</snippet></ROW><ROW><id>11296821</id><snippet>0</snippet></ROW><ROW><id>11296821</id><snippet>read()</snippet></ROW><ROW><id>11296821</id><snippet>0</snippet></ROW><ROW><id>11296821</id><snippet>5</snippet></ROW><ROW><id>11296821</id><snippet>&gt;&gt;&gt; with open('test.txt', 'a+') as fh:
    fh.tell()
    fh.read()
    fh.tell()

0L
'12345'
5L
</snippet></ROW><ROW><id>11296821</id><snippet>0</snippet></ROW><ROW><id>11296821</id><snippet>&gt;&gt;&gt; with open('test.txt', 'a+') as fh:
    fh.tell()
    fh.write('abc')
    fh.tell()
    fh.seek(0)
    fh.read()

0L
8L
'12345abc'
</snippet></ROW><ROW><id>11296821</id><snippet>seek()</snippet></ROW><ROW><id>11296830</id><snippet>path=%PATH$;c:\Python27</snippet></ROW><ROW><id>11296830</id><snippet>c:\python27\python.exe</snippet></ROW><ROW><id>11296970</id><snippet>np.diff</snippet></ROW><ROW><id>11296970</id><snippet>concatenate</snippet></ROW><ROW><id>11296970</id><snippet>import numpy as np
myarray = np.array([[1,2,4,7,9,15], [3, 4,3,5,10,2], [5,6,56,7,20,1]])
#your differences appears to be wraparound, so we repeat the last row at the top:
myarray_wrap = np.vstack((myarray[-1],myarray))
#this gets the diffs for all columns:
column_diffs = np.diff(myarray_wrap, axis=0)
#now we add in only the the column_diff that we want, at the end:
print np.hstack((myarray, column_diffs[:,3].reshape(-1,1)))
#Output:
[[ 1  2  4  7  9 15  0]
 [ 3  4  3  5 10  2 -2]
 [ 5  6 56  7 20  1  2]]
</snippet></ROW><ROW><id>11297077</id><snippet>document.getElementById('&lt;the id of your checkbox here&gt;').disabled = true;
</snippet></ROW><ROW><id>11297077</id><snippet>print "&lt;blockquote&gt;&lt;strong&gt;Labels:&lt;/strong&gt;&lt;br/&gt;"

for elem in output_list:
    if elem not in non_delete_list:
        print "&lt;div id=\"listBox\" &gt;"
        print "&lt;input type=\"checkbox\" name=\"remove_cd\" value=\"" + elem + "\" onclick=\"if(this.checked){myFunction("upperChkBoxes")}\" /&gt;" + elem + "&lt;br/&gt;"
        print "&lt;/div&gt;"
print "&lt;input type=\"checkbox\" name=\"remove_cd\" value=\"r_on\"  onclick=\"if(this.checked){myFunction("NA")}\"  /&gt;N/A:"
print_reason_list()
print "&lt;font color=\"#cc0000\"&gt;Reason Required&lt;/font&gt;&lt;hr/&gt;"


function myFunction(par){
// put your logic of add/remove here based on par value as "upperChkBoxes" or "NA"
}
</snippet></ROW><ROW><id>11297228</id><snippet>print 'Content-type: text/html\n\n'</snippet></ROW><ROW><id>11297257</id><snippet>i = p.expect(['password:','Already up-to-date.',pexpect.EOF])
</snippet></ROW><ROW><id>11297257</id><snippet>output = p.expect('Permission denied')
</snippet></ROW><ROW><id>11297257</id><snippet>i = p.expect(['password:','Already up-to-date.','Permission denied', pexpect.EOF])
if i == 0:
   .... send password
   i = p.expect(['password:','Already up-to-date.','Permission denied', pexpect.EOF])
if i == 2:
   .... send password
   i = p.expect(['password:','Already up-to-date.','Permission denied', pexpect.EOF])
if i == 1:
   .... print "already updated"
   i = p.expect(['password:','Already up-to-date.','Permission denied', pexpect.EOF])
if i == 3:
   .... print output
</snippet></ROW><ROW><id>11297263</id><snippet>@action(name='ftp', renderer='templates/ftp.pt')
@action(xhr=True, renderer='json', name='ftp')
def ftp_ajax(self):
    log.debug('View: %s', 'ftp (ajax)')

    # CODE

    if request.is_xhr:
        return JSON
    else:
        return something for template
</snippet></ROW><ROW><id>11297263</id><snippet>@action(name='ftp', renderer='templates/ftp.pt')
@action(xhr=True, renderer='json', name='ftp')
def ftp_ajax(self):
    log.debug('View: %s', 'ftp (ajax)')
    my_values = dict()

    # Code

    return my_values
</snippet></ROW><ROW><id>11297263</id><snippet>@action</snippet></ROW><ROW><id>11297548</id><snippet>global  bilbodog
print bilbodog
</snippet></ROW><ROW><id>11297548</id><snippet>Traceback (most recent call last):
  File "D:\Documents and Settings\My Documents\StackOverflow\test.py", line 2, in &lt;module&gt;
    print bilbodog
NameError: global name 'bilbodog' is not defined
</snippet></ROW><ROW><id>11297548</id><snippet>global  bilbodog
bilbodog = 15 #Here you give a value to bilbodog (even None)
print bilbodog
</snippet></ROW><ROW><id>11297548</id><snippet>def definition():
    global bilbodog
    bilbodog = 15 #Here you give a value to bilbodog (even None)

def test():
    print bilbodog

if __name__ == '__main__':
    definition()
    test()
</snippet></ROW><ROW><id>11297548</id><snippet>bilbodog.menuselect = bilbodogscript</snippet></ROW><ROW><id>11297548</id><snippet>bilbodogscript()</snippet></ROW><ROW><id>11297548</id><snippet>bilbodog</snippet></ROW><ROW><id>11297548</id><snippet>Traceback (most recent call last):
  File "D:\Documents and Settings\My Documents\StackOverflow\test.py", line 3, in &lt;module&gt;
    bilbodog.menuselect = bilbodogscript
NameError: name 'bilbodogscript' is not defined
</snippet></ROW><ROW><id>11297560</id><snippet>fmin(e,teta,args=(s0,t,s),maxiter=10000,maxfun=10000)
</snippet></ROW><ROW><id>11297560</id><snippet>fmin(e,teta,args=(t,s),maxiter=10000,maxfun=10000)
</snippet></ROW><ROW><id>11297560</id><snippet>s0</snippet></ROW><ROW><id>11297560</id><snippet>lambda</snippet></ROW><ROW><id>11297560</id><snippet>myllsq</snippet></ROW><ROW><id>11297560</id><snippet>e</snippet></ROW><ROW><id>11297560</id><snippet>myllsq</snippet></ROW><ROW><id>11297568</id><snippet>plot</snippet></ROW><ROW><id>11297568</id><snippet>from matplotlib import pyplot
import numpy as np

#sample data:
x = np.arange(30)
y = np.cumsum(np.arange(30))
#offset the x for horizontal, repeat the y for vertical:
x = np.ravel(zip(x,x+1))
y = np.ravel(zip(y,y))

pyplot.plot(x,y)
pyplot.savefig('plt.png')
</snippet></ROW><ROW><id>11297642</id><snippet>pandas.DataFrame</snippet></ROW><ROW><id>11297642</id><snippet>np.putmask</snippet></ROW><ROW><id>11297642</id><snippet>&gt;&gt;&gt; df = pandas.DataFrame(np.linspace(0.0, 1.0, 10).reshape(5, 2))
&gt;&gt;&gt; df[df &gt; 0.5] = -df
&gt;&gt;&gt; df
          0         1
0  0.000000  0.111111
1  0.222222  0.333333
2  0.444444 -0.555556
3 -0.666667 -0.777778
4 -0.888889 -1.000000
</snippet></ROW><ROW><id>11297805</id><snippet>c[:]=a</snippet></ROW><ROW><id>11297805</id><snippet>&gt;&gt;&gt; l = [1,2,3,4,5]
&gt;&gt;&gt; l[::2] = [0, 0, 0] #you can also replace only particular elements using this 
&gt;&gt;&gt; l
[0, 2, 0, 4, 0]

&gt;&gt;&gt; k=[1,2,3,4,5]
&gt;&gt;&gt; g=['a','b','c','d']
&gt;&gt;&gt; g[:2]=k[:2] # only replace first 2 elements
&gt;&gt;&gt; g
[1, 2, 'c', 'd']

&gt;&gt;&gt; a=[[1,2,3],[4,5,6],[7,8,9]]
&gt;&gt;&gt; c[:]=a      #creates a shallow copy
&gt;&gt;&gt; a[0].append('foo') #changing a mutable object inside a changes it in c too
&gt;&gt;&gt; a
[[1, 2, 3, 'foo'], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; c
[[1, 2, 3, 'foo'], [4, 5, 6], [7, 8, 9]]
</snippet></ROW><ROW><id>11297805</id><snippet>d=b[:]</snippet></ROW><ROW><id>11297805</id><snippet>d=list(b)</snippet></ROW><ROW><id>11297805</id><snippet>&gt;&gt;&gt; l = [1,2,3,4,5]
&gt;&gt;&gt; m = [1,2,3]
&gt;&gt;&gt; l = m[::-1] 
&gt;&gt;&gt; l
[3,2,1]

&gt;&gt;&gt; l=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; m=l[:] #creates a shallow copy 
&gt;&gt;&gt; l[0].pop(1) # a mutable object inside l is changed, it affects both l and m
2
&gt;&gt;&gt; l
[[1, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; m
[[1, 3], [4, 5, 6], [7, 8, 9]]
</snippet></ROW><ROW><id>11297893</id><snippet>import numpy as np
myarray = np.array([[1,2,4,7,9,15,0.0], [3, 4,3,5,10,2,-2], [5,6,56,7,20,1,2]])
#the division:
column_divs = myarray[:,-1][1:] / myarray[:,3][:-1]
#adds a 'placeholder' zero value, as the first element:
column_divs = np.hstack(([0], column_divs))
#adds the required column to the end of the array:
print np.hstack((myarray, column_divs.reshape(-1,1)))
#output:
[[  1.      2.       4.       7.       9.      15.      0.       0.        ]
 [  3.      4.       3.       5.      10.       2.     -2.      -0.28571429]
 [  5.      6.      56.       7.      20.       1.      2.      0.4        ]]
</snippet></ROW><ROW><id>11297894</id><snippet>CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
   }
}
</snippet></ROW><ROW><id>11298025</id><snippet>#!/bin/sh
# This file is called ~/script.sh

python script1.py
python script2.py
</snippet></ROW><ROW><id>11298025</id><snippet>chmod +x ~/script.sh
</snippet></ROW><ROW><id>11298025</id><snippet>~/script.sh
</snippet></ROW><ROW><id>11298279</id><snippet>PYTHON=/opt/local/my/path/to/python2.7/bin/python</snippet></ROW><ROW><id>11298279</id><snippet>PYTHONHOME</snippet></ROW><ROW><id>11298279</id><snippet>./configure</snippet></ROW><ROW><id>11298448</id><snippet>0000001</snippet></ROW><ROW><id>11298448</id><snippet>0o</snippet></ROW><ROW><id>11298448</id><snippet>0o0000001</snippet></ROW><ROW><id>11298448</id><snippet>0o1</snippet></ROW><ROW><id>11298448</id><snippet>1</snippet></ROW><ROW><id>11299012</id><snippet>FinalPrice</snippet></ROW><ROW><id>11299012</id><snippet>&gt;&gt;&gt; import urllib2, json
&gt;&gt;&gt; data = json.load(urllib2.urlopen('http://www.ows.newegg.com/Products.egg/N82E16822148992'))
&gt;&gt;&gt; print data[u'FinalPrice']
$79.99
</snippet></ROW><ROW><id>11299012</id><snippet>pprint.pprint</snippet></ROW><ROW><id>11299012</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(data)
{u'AddToCartButtonText': u'Add to Cart',
 u'AddToCartButtonType': u'AD',
 u'AverageRating': 0,
 u'BrandInfo': None,
 u'CanAddToCart': False,
 u'ComboCount': 5,
 u'CoremetricsInfo': {u'Brand': u'Seagate',
                      u'CategoryID': u'IPS380',
                      u'PageID': u'PRODUCT: NBHD 320G|ST ST320LT014 7K SATA3G %_22-148-992 (22-148-992)',
                      u'ProductName': u'NBHD 320G|ST ST320LT014 7K SATA3G %_22-148-992'},
 u'Discount': u'You Save: $10.00',
 u'ETA': u'/Date(-62135568000000)/',
 u'EmailFriendImageInfo': {u'FullPath': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S35$',
                           u'ItemNumber': None,
                           u'PathSize100': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S100$',
                           u'PathSize125': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S125$',
                           u'PathSize180': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S180$',
                           u'PathSize300': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S300$',
                           u'PathSize35': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S35$',
                           u'PathSize60': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S60$',
                           u'PathSize640': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S640$',
                           u'SmallImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S125$',
                           u'ThumbnailImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S60$',
                           u'Title': None},
 u'EnergyStarText': None,
 u'FinalPrice': u'$79.99',
 u'FreeShippingFlag': True,
 u'HasMappingPrice': False,
 u'Image': {u'FullPath': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S180$',
            u'ItemNumber': None,
            u'PathSize100': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S100$',
            u'PathSize125': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S125$',
            u'PathSize180': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S180$',
            u'PathSize300': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S300$',
            u'PathSize35': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S35$',
            u'PathSize60': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S60$',
            u'PathSize640': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S640$',
            u'SmallImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S100$',
            u'ThumbnailImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S60$',
            u'Title': None},
 u'InstantSaving': 0,
 u'Instock': True,
 u'InstockForCombo': False,
 u'IronEggDescription': None,
 u'IsActivated': True,
 u'IsCellPhoneItem': False,
 u'IsComboBundle': False,
 u'IsFeaturedItem': False,
 u'IsHot': False,
 u'IsInPMCC': False,
 u'IsPreLaunch': False,
 u'IsShellShockerItem': False,
 u'IsShipByNewegg': True,
 u'IsShowEnergyStarSection': False,
 u'IsShowSoldOutText': False,
 u'ItemGroupID': 0,
 u'ItemMapPriceMarkType': 0,
 u'ItemNumber': u'22-148-992',
 u'ItemOwnerType': 0,
 u'LimitQuantity': -1,
 u'MailInRebateInfo': None,
 u'MailInRebateText': None,
 u'MappingFinalPrice': None,
 u'Model': u'ST320LT014',
 u'NeweggItemNumber': None,
 u'NumberOfReviews': 0,
 u'OriginalPrice': u'$89.99',
 u'ParentItem': None,
 u'ProductProperties': None,
 u'ProductStockType': 0,
 u'PromotionInfo': None,
 u'PromotionText': u'',
 u'ReturnPolicyInfo': {u'HtmlContent': None,
                       u'ID': u'44',
                       u'Name': u'Standard Return Policy'},
 u'ReviewSummary': {u'Rating': 0, u'TotalReviews': u'[]'},
 u'SellerId': None,
 u'SellerItemPropertyList': None,
 u'SellerName': None,
 u'ShipByNewegg': 0,
 u'ShippingInfo': {u'NormalShippingText': u'Free Shipping*',
                   u'RestrictedShippingText': u' Additional fees may apply for shipments to APO/FPO, AK, HI and PR.',
                   u'RestrictedShippingTitle': u'Shipping Restrictions',
                   u'SpecialShippingText': u' Additional fees may apply for shipments to APO/FPO, AK, HI and PR.'},
 u'ShippingPromotionInfo': None,
 u'ShoppingInsight': {u'Description': u'See what other informed Newegg customers purchased after viewing this product',
                      u'PromotionItems': [{u'AfterRebate': None,
                                           u'FinalPrice': u'$149.99',
                                           u'Instock': True,
                                           u'IsCurrentItem': False,
                                           u'IsFreeShipping': True,
                                           u'IsShowOriginalPrice': False,
                                           u'ItemBrand': {u'BrandId': 1305,
                                                          u'BrandImage': u'http://images10.newegg.com/brandimage/Brand1305.gif',
                                                          u'Code': 0,
                                                          u'Description': u'Seagate',
                                                          u'HasManfactoryLogo': True,
                                                          u'ManufactoryWeb': u'http://www.seagate.com',
                                                          u'WebSiteURL': None},
                                           u'ItemImage': {u'FullPath': u'http://images17.newegg.com/is/image/newegg/22-148-591-TS?$S180W$',
                                                          u'ItemNumber': None,
                                                          u'PathSize100': u'http://images17.newegg.com/is/image/newegg/22-148-591-TS?$S100$',
                                                          u'PathSize125': u'http://images17.newegg.com/is/image/newegg/22-148-591-TS?$S125W$',
                                                          u'PathSize180': u'http://images17.newegg.com/is/image/newegg/22-148-591-TS?$S180W$',
                                                          u'PathSize300': u'http://images17.newegg.com/is/image/newegg/22-148-591-TS?$S300W$',
                                                          u'PathSize35': u'http://images17.newegg.com/is/image/newegg/22-148-591-TS?$S35$',
                                                          u'PathSize60': u'http://images17.newegg.com/is/image/newegg/22-148-591-TS?$S60$',
                                                          u'PathSize640': u'http://images17.newegg.com/is/image/newegg/22-148-591-TS?$S640W$',
                                                          u'SmallImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-591-TS?$S125W$',
                                                          u'ThumbnailImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-591-TS?$S60$',
                                                          u'Title': None},
                                           u'ItemMapPriceMarkType': 0,
                                           u'ItemNumber': u'22-148-591',
                                           u'MappingFinalPrice': None,
                                           u'OriginalPrice': u'$149.99',
                                           u'Percentage': u'22',
                                           u'ReviewSummary': {u'Rating': 4,
                                                              u'TotalReviews': u'[829]'},
                                           u'Title': u'Seagate Momentus XT ST95005620AS 500GB 7200 RPM 32MB Cache 2.5" SATA 3.0Gb/s with NCQ Solid State Hybrid Drive -Bare Drive'},
                                          {u'AfterRebate': None,
                                           u'FinalPrice': u'$79.99',
                                           u'Instock': True,
                                           u'IsCurrentItem': True,
                                           u'IsFreeShipping': True,
                                           u'IsShowOriginalPrice': True,
                                           u'ItemBrand': {u'BrandId': 1305,
                                                          u'BrandImage': u'http://images10.newegg.com/brandimage/Brand1305.gif',
                                                          u'Code': 0,
                                                          u'Description': u'Seagate',
                                                          u'HasManfactoryLogo': True,
                                                          u'ManufactoryWeb': u'http://www.seagate.com',
                                                          u'WebSiteURL': None},
                                           u'ItemImage': {u'FullPath': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S180$',
                                                          u'ItemNumber': None,
                                                          u'PathSize100': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S100$',
                                                          u'PathSize125': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S125$',
                                                          u'PathSize180': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S180$',
                                                          u'PathSize300': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S300$',
                                                          u'PathSize35': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S35$',
                                                          u'PathSize60': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S60$',
                                                          u'PathSize640': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S640$',
                                                          u'SmallImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S125$',
                                                          u'ThumbnailImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-TS?$S60$',
                                                          u'Title': None},
                                           u'ItemMapPriceMarkType': 0,
                                           u'ItemNumber': u'22-148-992',
                                           u'MappingFinalPrice': None,
                                           u'OriginalPrice': u'$89.99',
                                           u'Percentage': u'16',
                                           u'ReviewSummary': {u'Rating': 0,
                                                              u'TotalReviews': u'[]'},
                                           u'Title': u'Seagate Momentus Thin ST320LT014 320GB 7200 RPM 16MB Cache 2.5" SATA 3.0Gb/s Internal Notebook Hard Drive -Bare Drive'},
                                          {u'AfterRebate': None,
                                           u'FinalPrice': u'$69.99',
                                           u'Instock': True,
                                           u'IsCurrentItem': False,
                                           u'IsFreeShipping': False,
                                           u'IsShowOriginalPrice': True,
                                           u'ItemBrand': {u'BrandId': 1306,
                                                          u'BrandImage': u'http://images10.newegg.com/brandimage/Brand1306.gif',
                                                          u'Code': 0,
                                                          u'Description': u'Western Digital',
                                                          u'HasManfactoryLogo': True,
                                                          u'ManufactoryWeb': u'http://www.wdc.com/en/',
                                                          u'WebSiteURL': None},
                                           u'ItemImage': {u'FullPath': u'http://images17.newegg.com/is/image/newegg/22-136-280-TS?$S180W$',
                                                          u'ItemNumber': None,
                                                          u'PathSize100': u'http://images17.newegg.com/is/image/newegg/22-136-280-TS?$S100$',
                                                          u'PathSize125': u'http://images17.newegg.com/is/image/newegg/22-136-280-TS?$S125W$',
                                                          u'PathSize180': u'http://images17.newegg.com/is/image/newegg/22-136-280-TS?$S180W$',
                                                          u'PathSize300': u'http://images17.newegg.com/is/image/newegg/22-136-280-TS?$S300W$',
                                                          u'PathSize35': u'http://images17.newegg.com/is/image/newegg/22-136-280-TS?$S35$',
                                                          u'PathSize60': u'http://images17.newegg.com/is/image/newegg/22-136-280-TS?$S60$',
                                                          u'PathSize640': u'http://images17.newegg.com/is/image/newegg/22-136-280-TS?$S640W$',
                                                          u'SmallImagePath': u'http://images17.newegg.com/is/image/newegg/22-136-280-TS?$S125W$',
                                                          u'ThumbnailImagePath': u'http://images17.newegg.com/is/image/newegg/22-136-280-TS?$S60$',
                                                          u'Title': None},
                                           u'ItemMapPriceMarkType': 0,
                                           u'ItemNumber': u'22-136-280',
                                           u'MappingFinalPrice': None,
                                           u'OriginalPrice': u'$89.99',
                                           u'Percentage': u'16',
                                           u'ReviewSummary': {u'Rating': 5,
                                                              u'TotalReviews': u'[1,299]'},
                                           u'Title': u'Western Digital Scorpio Black WD3200BEKT 320GB 7200 RPM 16MB Cache 2.5" SATA 3.0Gb/s Internal Notebook Hard Drive -Bare Drive'},
                                          {u'AfterRebate': None,
                                           u'FinalPrice': u'$59.99',
                                           u'Instock': True,
                                           u'IsCurrentItem': False,
                                           u'IsFreeShipping': True,
                                           u'IsShowOriginalPrice': True,
                                           u'ItemBrand': {u'BrandId': 1305,
                                                          u'BrandImage': u'http://images10.newegg.com/brandimage/Brand1305.gif',
                                                          u'Code': 0,
                                                          u'Description': u'Seagate',
                                                          u'HasManfactoryLogo': True,
                                                          u'ManufactoryWeb': u'http://www.seagate.com',
                                                          u'WebSiteURL': None},
                                           u'ItemImage': {u'FullPath': u'http://images17.newegg.com/is/image/newegg/22-148-906-TS?$S180$',
                                                          u'ItemNumber': None,
                                                          u'PathSize100': u'http://images17.newegg.com/is/image/newegg/22-148-906-TS?$S100$',
                                                          u'PathSize125': u'http://images17.newegg.com/is/image/newegg/22-148-906-TS?$S125$',
                                                          u'PathSize180': u'http://images17.newegg.com/is/image/newegg/22-148-906-TS?$S180$',
                                                          u'PathSize300': u'http://images17.newegg.com/is/image/newegg/22-148-906-TS?$S300$',
                                                          u'PathSize35': u'http://images17.newegg.com/is/image/newegg/22-148-906-TS?$S35$',
                                                          u'PathSize60': u'http://images17.newegg.com/is/image/newegg/22-148-906-TS?$S60$',
                                                          u'PathSize640': u'http://images17.newegg.com/is/image/newegg/22-148-906-TS?$S640$',
                                                          u'SmallImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-906-TS?$S125$',
                                                          u'ThumbnailImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-906-TS?$S60$',
                                                          u'Title': None},
                                           u'ItemMapPriceMarkType': 0,
                                           u'ItemNumber': u'22-148-906',
                                           u'MappingFinalPrice': None,
                                           u'OriginalPrice': u'$69.99',
                                           u'Percentage': u'11',
                                           u'ReviewSummary': {u'Rating': 5,
                                                              u'TotalReviews': u'[1]'},
                                           u'Title': u'Seagate Momentus Thin ST250LT003 250GB 5400 RPM 16MB Cache 2.5" SATA 3.0Gb/s Internal Notebook Hard Drive -Bare Drive'}]},
 u'ShowOriginalPrice': True,
 u'StaticText': None,
 u'StrAddItem': None,
 u'StrAlt': None,
 u'StrCartImg': None,
 u'SubCategoryId': 380,
 u'SubCategoryName': u'Laptop Hard Drives',
 u'Title': u'Seagate Momentus Thin ST320LT014 320GB 7200 RPM 16MB Cache 2.5" SATA 3.0Gb/s Internal Notebook Hard Drive -Bare Drive',
 u'UnitPrice': 0,
 u'Warnings': None,
 u'WarrantyInfo': None,
 u'XmlSpec': None,
 u'imageGallery': [{u'FullPath': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z01?$S640$',
                    u'ItemNumber': None,
                    u'PathSize100': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z01?$S100$',
                    u'PathSize125': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z01?$S125$',
                    u'PathSize180': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z01?$S180$',
                    u'PathSize300': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z01?$S300$',
                    u'PathSize35': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z01?$S35$',
                    u'PathSize60': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z01?$S60$',
                    u'PathSize640': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z01?$S640$',
                    u'SmallImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z01?$S100$',
                    u'ThumbnailImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z01?$S60$',
                    u'Title': None},
                   {u'FullPath': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z02?$S640$',
                    u'ItemNumber': None,
                    u'PathSize100': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z02?$S100$',
                    u'PathSize125': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z02?$S125$',
                    u'PathSize180': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z02?$S180$',
                    u'PathSize300': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z02?$S300$',
                    u'PathSize35': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z02?$S35$',
                    u'PathSize60': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z02?$S60$',
                    u'PathSize640': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z02?$S640$',
                    u'SmallImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z02?$S100$',
                    u'ThumbnailImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z02?$S60$',
                    u'Title': None},
                   {u'FullPath': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z03?$S640$',
                    u'ItemNumber': None,
                    u'PathSize100': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z03?$S100$',
                    u'PathSize125': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z03?$S125$',
                    u'PathSize180': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z03?$S180$',
                    u'PathSize300': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z03?$S300$',
                    u'PathSize35': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z03?$S35$',
                    u'PathSize60': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z03?$S60$',
                    u'PathSize640': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z03?$S640$',
                    u'SmallImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z03?$S100$',
                    u'ThumbnailImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z03?$S60$',
                    u'Title': None},
                   {u'FullPath': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z04?$S640$',
                    u'ItemNumber': None,
                    u'PathSize100': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z04?$S100$',
                    u'PathSize125': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z04?$S125$',
                    u'PathSize180': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z04?$S180$',
                    u'PathSize300': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z04?$S300$',
                    u'PathSize35': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z04?$S35$',
                    u'PathSize60': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z04?$S60$',
                    u'PathSize640': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z04?$S640$',
                    u'SmallImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z04?$S100$',
                    u'ThumbnailImagePath': u'http://images17.newegg.com/is/image/newegg/22-148-992-Z04?$S60$',
                    u'Title': None}]}
</snippet></ROW><ROW><id>11299012</id><snippet>FinalPrice</snippet></ROW><ROW><id>11299012</id><snippet>ShoppingInsight</snippet></ROW><ROW><id>11299012</id><snippet>PromotionItems</snippet></ROW><ROW><id>11299012</id><snippet>&gt;&gt;&gt; print data[u'ShoppingInsight'][u'PromotionItems'][0][u'FinalPrice']
$149.99
&gt;&gt;&gt; print data[u'ShoppingInsight'][u'PromotionItems'][0][u'Title']
Seagate Momentus XT ST95005620AS 500GB 7200 RPM 32MB Cache 2.5" SATA 3.0Gb/s with NCQ Solid State Hybrid Drive -Bare Drive
</snippet></ROW><ROW><id>11299047</id><snippet>&gt;&gt;&gt; dic={'1':100,'2':200,'3':300,'4':400,'5':500,'6':600,'7':700}

&gt;&gt;&gt; print [[str(key), dic[str(key)]]for key in sorted(map(int,dic.iterkeys()))[-5:] ]
[['3', 300], ['4', 400], ['5', 500], ['6', 600], ['7', 700]]
</snippet></ROW><ROW><id>11299149</id><snippet>In [1]: import csv

In [2]: from itertools import product

In [3]: csvfile = csv.reader(open('filename', 'rb'), delimiter=',')

In [4]: list(product(*zip(*list(csvfile))))
Out[4]: 
[('asparagus', 'pineapple'),
 ('asparagus', 'orange'),
 ('asparagus', 'apple'),
 ('asparagus', 'raspberry'),
 ('asparagus', 'blueberry'),
 ('beets', 'pineapple'),
 ('beets', 'orange'),
 ('beets', 'apple'),
 ('beets', 'raspberry'),
 ('beets', 'blueberry'),
 ('corn', 'pineapple'),
 ('corn', 'orange'),
 ('corn', 'apple'),
 ('corn', 'raspberry'),
 ('corn', 'blueberry'),
 ('cucumbers', 'pineapple'),
 ('cucumbers', 'orange'),
 ('cucumbers', 'apple'),
 ('cucumbers', 'raspberry'),
 ('cucumbers', 'blueberry'),
 ('tomatoes', 'pineapple'),
 ('tomatoes', 'orange'),
 ('tomatoes', 'apple'),
 ('tomatoes', 'raspberry'),
 ('tomatoes', 'blueberry')]
</snippet></ROW><ROW><id>11299241</id><snippet>import sys
with open(sys.argv[1],'r+') as f1:
    lines=[x.strip() for x in f1]
    f1.truncate(0)
    f1.seek(0)
    for x in lines:
       if x:
         f1.write(x+'\n')
       else:
         f1.write("{0}:{1}\n\n".format(sys.argv[2],sys.argv[3]))
    f1.write("{0}:{1}\n\n".format(sys.argv[2],sys.argv[3])) 
</snippet></ROW><ROW><id>11299258</id><snippet>from itertools import product
a = [[1,2,3],[4,5,6],[7,8,9]]
b = [['a','b'],['c','d'],['e','f']]

print [x+y for (x,y) in product(a,b)]
</snippet></ROW><ROW><id>11299462</id><snippet>books</snippet></ROW><ROW><id>11299462</id><snippet>contact</snippet></ROW><ROW><id>11299462</id><snippet>settings.INSTALLED_APPS</snippet></ROW><ROW><id>11299538</id><snippet>struct</snippet></ROW><ROW><id>11299538</id><snippet>struct.unpack</snippet></ROW><ROW><id>11299538</id><snippet>value, = unpack("q", string)</snippet></ROW><ROW><id>11299645</id><snippet>'uint8'</snippet></ROW><ROW><id>11299645</id><snippet>dtype='int'</snippet></ROW><ROW><id>11299645</id><snippet>'int64'</snippet></ROW><ROW><id>11299645</id><snippet>'int8'</snippet></ROW><ROW><id>11299645</id><snippet>'uint8'</snippet></ROW><ROW><id>11299645</id><snippet>binary_image = np.zeros(image.shape,dtype='uint8')

kernel = np.ones((11,11),'uint8')
</snippet></ROW><ROW><id>11299645</id><snippet>EUREKA</snippet></ROW><ROW><id>11299692</id><snippet>route53 add_record Z1J8BS4AFAKE12 foo.example.com. A 1.2.3.4 60 first 1
route53 add_record Z1J8BS4AFAKE12 foo.example.com. A 5.6.7.8 60 second 2
</snippet></ROW><ROW><id>11299692</id><snippet>change.add_change("CREATE", 'foo', 'A', ttl=60, weight=1, identifier='first')
change.add_change("CREATE", 'foo', 'A', ttl=60, weight=2, identifier='second')
</snippet></ROW><ROW><id>11299721</id><snippet>sendcontrol()</snippet></ROW><ROW><id>11299721</id><snippet>    id.sendline('')
</snippet></ROW><ROW><id>11299721</id><snippet>send()</snippet></ROW><ROW><id>11299721</id><snippet>    id.send('\003')
</snippet></ROW><ROW><id>11299721</id><snippet>    id.send(chr(3))
</snippet></ROW><ROW><id>11299721</id><snippet>sendcontrol()</snippet></ROW><ROW><id>11299721</id><snippet>sendcontrol('c')</snippet></ROW><ROW><id>11299721</id><snippet>sendcontrol()</snippet></ROW><ROW><id>11299721</id><snippet>send()</snippet></ROW><ROW><id>11299721</id><snippet>sendcontrol()</snippet></ROW><ROW><id>11299721</id><snippet>id.sendline('')</snippet></ROW><ROW><id>11299721</id><snippet>sendcontrol()</snippet></ROW><ROW><id>11299721</id><snippet>    id.sendcontrol('j')
</snippet></ROW><ROW><id>11299721</id><snippet>    id.sendcontrol('m')
</snippet></ROW><ROW><id>11299761</id><snippet>Pair</snippet></ROW><ROW><id>11299761</id><snippet>Pair</snippet></ROW><ROW><id>11299761</id><snippet>Pair</snippet></ROW><ROW><id>11299761</id><snippet>self.pairs</snippet></ROW><ROW><id>11299761</id><snippet>class Sequence(Pair):
    def __init__(self, pairs):
        if not isinstance(pairs[0], Pair):
            self.pairs = [Pair(pos, val) for pos, val in enumerate(pairs)]
        else:
            self.pairs = pairs
        self.cseg = [pair.value for pair in self.pairs]
        self.positions = [pair.position for pair in self.pairs]
</snippet></ROW><ROW><id>11299761</id><snippet>pairs</snippet></ROW><ROW><id>11299761</id><snippet>self.pairs</snippet></ROW><ROW><id>11299761</id><snippet>class Sequence(Pair):
    def __init__(self, pairs):
        # the following code will run when you're passing a list of integers
        if not isinstance(pairs[0], Pair):
            self = Sequence([Pair(pos, val) for pos, val in enumerate(pairs)])
        # but the next line will also run
        # which means self.pairs` is now a list of integers
        self.pairs = pairs
        # and that means pair in the following line is an int, not a Pair:
        self.cseg = [pair.value for pair in pairs]
        self.positions = [pair.position for pair in pairs]
</snippet></ROW><ROW><id>11299761</id><snippet>self</snippet></ROW><ROW><id>11299761</id><snippet>self = Sequence([Pair(pos, val) for pos, val in enumerate(pairs)])
</snippet></ROW><ROW><id>11299761</id><snippet>self</snippet></ROW><ROW><id>11299761</id><snippet>Sequence</snippet></ROW><ROW><id>11299761</id><snippet>Sequence</snippet></ROW><ROW><id>11299917</id><snippet>def poly(x,y,n):
    counter = 0
    for nc in range(n+1):
        for i in range(nc+1):
            print "c[", counter, "]",
            print " * ", x, "**", i,
            print " * ", y, "**", nc-i,
            print " + ",
            counter += 1
</snippet></ROW><ROW><id>11299917</id><snippet>poly("x", "y", 2)
</snippet></ROW><ROW><id>11299917</id><snippet>c[ 0 ]  *  x ** 0  *  y ** 0  +  c[ 1 ]  *  x ** 0  *  y ** 1  +  c[ 2 ]  *  x ** 1  *  y ** 0  +  c[ 3 ]  *  x ** 0  *  y ** 2  +  c[ 4 ]  *  x ** 1  *  y ** 1  +  c[ 5 ]  *  x ** 2  *  y ** 0  + 
</snippet></ROW><ROW><id>11299917</id><snippet>if</snippet></ROW><ROW><id>11300132</id><snippet>with open('data.txt') as f:
    for line in f:
        value = int(line)
</snippet></ROW><ROW><id>11300132</id><snippet>with</snippet></ROW><ROW><id>11300197</id><snippet>import md5
import base64

def obfuscate(s):
    return base64.b64encode( md5.new(s).digest())

def obfuscate2(s):
    return base64.b16encode( md5.new(s).digest())

# returns alphanumeric string but strings can also include slash, plus or equal i.e. /+=
print obfuscate('Tag 1')
print obfuscate('Tag 2')
print obfuscate('Tag 3')

# return hex string
print obfuscate2('Tag 1')
</snippet></ROW><ROW><id>11300197</id><snippet>import hashlib

def obfuscate(s):
    m = hashlib.sha256()
    m.update(s)
    return m.hexdigest()

print obfuscate('Tag 1')
print obfuscate('Tag 2')
print obfuscate('Tag 3')
</snippet></ROW><ROW><id>11300197</id><snippet>import hashlib
import base64

def obfuscate(s):
    m = hashlib.sha256()
    m.update(s)
    hash = base64.b64encode(m.digest(), altchars="ZZ")  # make one way base64 encode, to fit characters into alphanum space only
    return hash[:16]    # cut of hash at 16 chars - gives about 96 bits which should 
    # 96 bits means 1 in billion chance of collision if you have 1 billion tags (or much lower chance with fewer tags)
    # http://en.wikipedia.org/wiki/Birthday_attack

print obfuscate('Tag 1')
print obfuscate('Tag 2')
print obfuscate('Tag 3')
</snippet></ROW><ROW><id>11300197</id><snippet>&gt;&gt;&gt; math.log(62**16,2)
95.26714096618998
</snippet></ROW><ROW><id>11300241</id><snippet>import sqlite3

con = sqlite3.connect('database')
cur = con.Cursor()

cur.execute('select table1.column, table2.column, table3.column from table1, table2, table3')
# result should look like ((25, 30, 20), (30,)), if I remember correctly
results = cur.fetchall()

output = '\n'.join(','.join(str(i) for i in line) for line in results)
</snippet></ROW><ROW><id>11300241</id><snippet>import sqlite3
conn = sqlite3.connect('database.db')

cur = conn.cursor()

tables = ('table1', 'table2', 'table3')
results = [list(cur.execute('select column from %s' % table)) for table in tables]

def try_list(lst, i):
    try:
        return lst[i]
    except IndexError:
        return ('',)

maxlen = max(len(i) for i in results)
results2 = [[try_list(line, i) for line in results] for i in xrange(maxlen)]

output = '\n'.join(','.join(str(i[0]) for i in line) for line in results2)
print output
</snippet></ROW><ROW><id>11300241</id><snippet>25,30,20
30,,
</snippet></ROW><ROW><id>11300289</id><snippet>cut</snippet></ROW><ROW><id>11300289</id><snippet># adjust the plot limits
cut = 1.05
xmax= cut*max(xx for xx,yy in pos.values())
ymax= cut*max(yy for xx,yy in pos.values())
plt.xlim(0,xmax)
plt.ylim(0,ymax)
</snippet></ROW><ROW><id>11300419</id><snippet>count</snippet></ROW><ROW><id>11300419</id><snippet>input_string.count("Hello")
</snippet></ROW><ROW><id>11300419</id><snippet>collections.Counter</snippet></ROW><ROW><id>11300419</id><snippet>split()</snippet></ROW><ROW><id>11300419</id><snippet>from collections import Counter

words = input_string.split()
wordCount = Counter(words)
</snippet></ROW><ROW><id>11300451</id><snippet>import webapp2

import copy
import decimal
import logging
import random
import string

from google.appengine.api import datastore_errors
from google.appengine.datastore import entity_pb
from google.appengine.ext import deferred
from google.appengine.ext import ndb


TEST_BATCH_SIZE = 250
TEST_NAME_LEN = 12


class DecimalProperty(ndb.Property):
    """A Property whose value is a decimal.Decimal object."""

    def _datastore_type(self, value):
      return str(value)

    def _validate(self, value):
      if not isinstance(value, decimal.Decimal):
        raise datastore_errors.BadValueError('Expected decimal.Decimal, got %r'
                                             % (value,))
      return value

    def _db_set_value(self, v, p, value):
        value = str(value)
        v.set_stringvalue(value)
        if not self._indexed:
            p.set_meaning(entity_pb.Property.TEXT)

    def _db_get_value(self, v, _):
        if not v.has_stringvalue():
            return None
        value = v.stringvalue()
        return decimal.Decimal(value)

class BatchInProgress(ndb.Model):
    """Use a scheduler to delete batches in progress after a certain time"""

    started = ndb.DateTimeProperty(auto_now=True)

    def clean_up(self):
        qry = Shard.query().filter(Shard.batch_key == self.key)
        keys = qry.fetch(keys_only=True)
        while keys:
            ndb.delete_multi(keys)
            keys = qry.fetch(keys_only=True)

def cleanup_failed_batch(batch_key):
    batch = batch_key.get()

    if batch:
        batch.clean_up()
        batch.delete()

class Shard(ndb.Model):
    """Shards for each named counter"""

    counter_key = ndb.KeyProperty(name='c')
    batch_key = ndb.KeyProperty(name='b')
    count = DecimalProperty(name='v', default=decimal.Decimal('0.00'),
                            indexed=False)

class Counter(ndb.Model):
    """Tracks the number of shards for each named counter"""

    @property
    def shards(self):
        qry = Shard.query().filter(Shard.counter_key == self.key)
        results = qry.fetch(use_cache=False, use_memcache=False)
        return filter(None, results)

    @property
    def total(self):
        count = decimal.Decimal('0.00') # Use initial value if no shards

        for shard in self.shards:
            count += shard.count

        return count

    @ndb.tasklet
    def incr_async(self, value, batch_key):
        index = batch_key.id()
        name = self.key.id() + str(index)

        shard = Shard(id=name, count=value,
                      counter_key=self.key, batch_key=batch_key)

        yield shard.put_async(use_cache=False, use_memcache=False)

    def incr(self, *args, **kwargs):
        return self.incr_async(*args, **kwargs).get_result()

@ndb.tasklet
def increment_batch(data_set):
    batch_key = yield BatchInProgress().put_async()
    deferred.defer(cleanup_failed_batch, batch_key, _countdown=3600)

    # NOTE: mapping is modified in place, hence copying
    mapping = copy.copy(data_set)

    # (1/3) filter and fire off counter gets
    #       so the futures can autobatch
    counters = {}
    ctr_futs = {}
    ctr_put_futs = []
    zero_values = set()
    for name, value in mapping.iteritems():
        if value != decimal.Decimal('0.00'):
            ctr_fut = Counter.get_by_id_async(name) # Use cache(s)
            ctr_futs[name] = ctr_fut
        else:
            # Skip zero values because...
            zero_values.add(name)
            continue

    for name in zero_values:
        del mapping[name] # Remove all zero values from the mapping
    del zero_values

    while mapping: # Repeat until all transactions succeed

        # (2/3) wait on counter gets and fire off increment transactions
        #       this way autobatchers should fill time
        incr_futs = {}
        for name, value in mapping.iteritems():
            counter = counters.get(name)
            if not counter:
                counter = counters[name] = yield ctr_futs.pop(name)
            if not counter:
                logging.info('Creating new counter %s', name)
                counter = counters[name] = Counter(id=name)
                ctr_put_futs.append(counter.put_async())
            else:
                logging.debug('Reusing counter %s', name)
            incr_fut = counter.incr_async(value, batch_key)
            incr_futs[(name, value)] = incr_fut

        # (3/3) wait on increments and handle errors
        #       by using a tuple key for variable access
        for (name, value), incr_fut in incr_futs.iteritems():
            counter = counters[name]
            try:
                yield incr_fut
            except:
                pass
            else:
                del mapping[name]

        if mapping:
            logging.warning('%i increments failed this batch.' % len(mapping))

    yield batch_key.delete_async(), ctr_put_futs

    raise ndb.Return(counters.values())

class ShardTestHandler(webapp2.RequestHandler):

    @ndb.synctasklet
    def get(self):
        if self.request.GET.get('delete'):
            ndb.delete_multi_async(Shard.query().fetch(keys_only=True))
            ndb.delete_multi_async(Counter.query().fetch(keys_only=True))
            ndb.delete_multi_async(BatchInProgress.query().fetch(keys_only=True))
        else:
            data_set_test = {}
            for _ in xrange(TEST_BATCH_SIZE):
                name = ''
                for _ in xrange(TEST_NAME_LEN):
                    name += random.choice(string.letters)
                value = decimal.Decimal('{0:.2f}'.format(random.random() * 100))
                data_set_test[name] = value
            yield increment_batch(data_set_test)
        self.response.out.write("Done!")

app = webapp2.WSGIApplication([('/shard_test/', ShardTestHandler)], debug=True)
app = ndb.toplevel(app.__call__)
</snippet></ROW><ROW><id>11300758</id><snippet>from mpl_toolkits.mplot3d import Axes3D
plt.clf()
fig = pylab.figure()
ax = Axes3D(fig)
ax.set_xlim3d(0, 1000)
ax.set_ylim3d(0,1000)
ax.set_zlim3d(0,1000)
</snippet></ROW><ROW><id>11300934</id><snippet>loop = True</snippet></ROW><ROW><id>11300934</id><snippet>loop = "yes"</snippet></ROW><ROW><id>11300934</id><snippet>import pygame
pygame.init()

screen = pygame.display.set_mode((400, 300))
loop = True

# No need to re-make these again each loop.
font1 = pygame.font.SysFont("calibri",40)
font2 = pygame.font.SysFont("calibri",20)

fps = 30 
clock = pygame.time.Clock()

while loop:
    screen.fill((0, 0, 0), (0, 0, 400, 300))

    text = font1.render("TextA", True,(255,255,255))
    screen.blit(text,(0,0))

    text = font2.render("Begin", True,(255,255,255))
    screen.blit(text,(50,50))

    pygame.display.update()   # Call this only once per loop
    clock.tick(fps)     # forces the program to run at 30 fps.
</snippet></ROW><ROW><id>11301340</id><snippet>make</snippet></ROW><ROW><id>11301340</id><snippet>.../libsvm-3.12/python,</snippet></ROW><ROW><id>11301340</id><snippet>&gt;&gt;&gt; import svmutil
</snippet></ROW><ROW><id>11301340</id><snippet>&gt;&gt;&gt; import svmulti
</snippet></ROW><ROW><id>11301392</id><snippet>from six import string_types
isinstance(s, string_types)
</snippet></ROW><ROW><id>11301418</id><snippet>*</snippet></ROW><ROW><id>11301418</id><snippet>*?</snippet></ROW><ROW><id>11301418</id><snippet>q=http://.*?\.doc
</snippet></ROW><ROW><id>11302038</id><snippet>def send(sockfd, message):
    string_message = cPickle.dumps(message)
    write_int(sockfd, len(string_message))
    write(sockfd, string_message)

def write_int(sockfd, integer):
    integer_buf = struct.pack('&gt;i', integer)       
    write(sockfd, integer_buf)

def write(sockfd, data):
    data_len = len(data)
    offset = 0
    while offset != data_len:
        offset += sockfd.send(data[offset:])
</snippet></ROW><ROW><id>11302038</id><snippet>def receive(self):
    message_size = read_int(self.sockfd)
    if message_size == None:
        return None
    data = read(self.sockfd, message_size)
    if data == None:
        return None
    message = cPickle.loads(data)
    return message

def read_int(sockfd):
    int_size = struct.calcsize('&gt;i')
    intbuf = read(sockfd, int_size)
    if intbuf == None:
        return None
    return struct.unpack('&gt;i', intbuf)[0]

def read(sockfd, size):
    data = ""
    while len(data) != size:
        newdata = sockfd.recv(size - len(data))
        if len(newdata) == 0:
           return None
        data = data + newdata
    return data
</snippet></ROW><ROW><id>11302167</id><snippet># A function to generate the divisions list
def divisions(l, v):
    l.append(l[-1] * v)
    return l

# A function to reduce the divisions list
def reduction(l, v):
    q, r = divmod(l[-1], v)
    l[-1] = q
    l.append(r)
    return l

TIME_STEPS = (60, 60, 24, 7, 30, 12)
DIVISIONS = reduce(divisions, TIME_STEPS, [1])[1:]
DIVISIONS.reverse()

# The "seconds" variable holds the time interval in seconds
seconds = 6000
fragments = reduce(reduction, DIVISIONS, [seconds])

# Fragments is a list: [years, months, weeks, days, hours, minutes, seconds]
# In this example: [0, 0, 0, 0, 1, 40, 0]

# And here's the readability part
NAMES = ("years", "months", "weeks", "days", "hours", "minutes", "seconds")
readable = " ".join("%d %s" % (v, n) for v, n in zip(fragments, NAMES) if v &gt; 0)

# Final result: readable = "1 hours 40 minutes"
</snippet></ROW><ROW><id>11302167</id><snippet>DIVISIONS</snippet></ROW><ROW><id>11302233</id><snippet>def wrapper(func):
    def wrapped():
        print 'Enter'
        result = func()
        print 'Exit'
        return result
    return wrapped
</snippet></ROW><ROW><id>11302233</id><snippet>&gt;&gt;&gt; def say_hello():
...     print 'Hello'
... 
&gt;&gt;&gt; say_hello()  # behavior before wrapping
Hello
&gt;&gt;&gt; say_hello = wrapper(say_hello)
&gt;&gt;&gt; say_hello()  # behavior after wrapping
Enter
Hello
Exit
</snippet></ROW><ROW><id>11302233</id><snippet>&gt;&gt;&gt; @wrapper
... def say_hello():
...     print 'Hello'
... 
&gt;&gt;&gt; say_hello()
Enter
Hello
Exit
</snippet></ROW><ROW><id>11302249</id><snippet>f</snippet></ROW><ROW><id>11302249</id><snippet>d</snippet></ROW><ROW><id>11302249</id><snippet>struct</snippet></ROW><ROW><id>11302718</id><snippet>class Person(db.Model):
  name = db.StringProperty(required = True)
  profession = db.StringProperty(required = True)
  driverLicense = db.IntegerProperty(required = True)
  address = db.PostalAdressProperty(required = True)

class Contract(db.Model):
  idContract = db.IntegerProperty(required = True)
  contractType = db.StringProperty(required = True, choices=set(["Purchase Agreement",        "Rental House", "Rental Car"]))
  contractDate =  db.DateProperty (required = True, auto_now = True, auto_now_add = True)
  place = db.StringProperty(required = True)

class ContractingParty(db.Model):
  person = db.ReferenceProperty(People, required=True, collection_name="party_to_contracts")
  condition = db.StringProperty(required = False, choices=set(["buyer", "seller", "renter", "owner", "witness"]))
</snippet></ROW><ROW><id>11302718</id><snippet>&lt;someperson&gt;.party_to_contracts.run()</snippet></ROW><ROW><id>11302718</id><snippet>parent()</snippet></ROW><ROW><id>11302718</id><snippet>ContractingParty.all().ancestor(thecontract).run()</snippet></ROW><ROW><id>11302725</id><snippet>&lt;input type="text"&gt;</snippet></ROW><ROW><id>11302762</id><snippet>.__init__()</snippet></ROW><ROW><id>11302762</id><snippet>None</snippet></ROW><ROW><id>11302762</id><snippet>.__init__()</snippet></ROW><ROW><id>11302762</id><snippet>None</snippet></ROW><ROW><id>11302762</id><snippet>.__init__()</snippet></ROW><ROW><id>11302762</id><snippet>head is None</snippet></ROW><ROW><id>11302762</id><snippet>.next</snippet></ROW><ROW><id>11302762</id><snippet>None</snippet></ROW><ROW><id>11302762</id><snippet>.__init__()</snippet></ROW><ROW><id>11302762</id><snippet>class link_list(object):
    """a link list class"""
    def __init__(self, lst):
        super(link_list, self).__init__()
        pdb.set_trace()
        if len(lst) &gt; 1:
            self.value = lst[0]
            self.next = link_list(lst[1:])
            print "id == %d, linked in %d" % (id(self), id(self.next))
        elif len(lst) == 1:
            self.value = lst[0]
            self.next = None
            print "length-one case: id == %d" % id(self)
        else:
            self.value = None
            self.next = None
            print "length-zero case: id == %d" % id(self)

l=link_list([1,2,3])
print l.next.next.next is None
</snippet></ROW><ROW><id>11302762</id><snippet>lst</snippet></ROW><ROW><id>11302762</id><snippet>list</snippet></ROW><ROW><id>11302762</id><snippet>list</snippet></ROW><ROW><id>11302762</id><snippet>for</snippet></ROW><ROW><id>11302762</id><snippet>class link_list_val(object):
    """one value for a linked list"""
    def __init__(self, value):
        self.value = value
        self.next = None

class link_list(object):
    """a link list class"""
    def __init__(self, seq):
        self.head = None

        for value in seq:
            x = link_list_val(value)
            if self.head is None:
                self.head = x;
                cur = x
            else:
                cur.next = x
                cur = x

l=link_list([1,2,3])
print l.head.next.next.next is None
</snippet></ROW><ROW><id>11302762</id><snippet>.__init__()</snippet></ROW><ROW><id>11302762</id><snippet>seq is None</snippet></ROW><ROW><id>11302762</id><snippet>.__init__()</snippet></ROW><ROW><id>11302762</id><snippet>class link_list(object):
    """a link list class"""
    def __init__(self, seq=None):
        super(link_list, self).__init__()
        if seq is None:
            return
        pdb.set_trace()
        itr = iter(seq)
        try:
            self.value = next(itr)
        except StopIteration:
            self.value = None
            self.next = None
            return
        cur = self
        for value in itr:
            cur.next = link_list()
            cur = cur.next
            cur.value = value
        cur.next = None

l=link_list([])
print l.next is None
l=link_list([1,2,3])
print l.next.next.next is None
</snippet></ROW><ROW><id>11302762</id><snippet>next()</snippet></ROW><ROW><id>11302889</id><snippet>cv2.HoughLinesP</snippet></ROW><ROW><id>11302889</id><snippet>None</snippet></ROW><ROW><id>11302889</id><snippet>lines[0]</snippet></ROW><ROW><id>11302889</id><snippet>lines.__getitem__</snippet></ROW><ROW><id>11302889</id><snippet>lines</snippet></ROW><ROW><id>11302889</id><snippet>NoneType</snippet></ROW><ROW><id>11302889</id><snippet>__getitem__</snippet></ROW><ROW><id>11302889</id><snippet>is not None</snippet></ROW><ROW><id>11302889</id><snippet>if lines:
    for line in lines[0]
        [...]
</snippet></ROW><ROW><id>11303260</id><snippet>+</snippet></ROW><ROW><id>11303260</id><snippet>.</snippet></ROW><ROW><id>11303260</id><snippet>&gt;&gt;&gt; re.findall(r'^(.+?)((.+)\3+)$', '42344343434' )[0][:-1]
('42344', '343434')
</snippet></ROW><ROW><id>11303486</id><snippet>from Tkinter import *
import time
root=Tk()

variable=StringVar()

def update_label():
    i=0
    while 1:
        i=i+1
        variable.set(str(i))
        root.update()

your_label=Label(root,textvariable=variable)
your_label.pack()
start_button=Button(root,text="start",command=update_label)
start_button.pack()
root.mainloop()
</snippet></ROW><ROW><id>11303486</id><snippet>root.update()</snippet></ROW><ROW><id>11303486</id><snippet>update_label()</snippet></ROW><ROW><id>11303486</id><snippet>Tkinter</snippet></ROW><ROW><id>11303486</id><snippet>mainloop()</snippet></ROW><ROW><id>11303486</id><snippet>Tkinter</snippet></ROW><ROW><id>11303486</id><snippet>.after()</snippet></ROW><ROW><id>11303486</id><snippet>class App (object):
    def __init__(self):
        self.root=Tk()
        self.variable=StringVar()
        self.i=0
        self.your_label=Label(self.root,textvariable=self.variable)
    def grid(self):
        self.your_label.pack()
    def update_label(self):
        self.i=self.i+1
        self.variable.set(str(self.i))
        self.root.after(20,self.update_label)
    def run(self):
        self.grid()
        self.root.after(20,self.update_label)
        self.root.mainloop()

if __name__=='__main__':
    App().run()
</snippet></ROW><ROW><id>11303663</id><snippet>tmp = mydict[mykey] = myfunc()
return tmp
</snippet></ROW><ROW><id>11304047</id><snippet>def mycmp(a, b):
    return cmp(a[10:], b[10:])

lots_list.sort(mycmp)
</snippet></ROW><ROW><id>11304423</id><snippet>sum</snippet></ROW><ROW><id>11304423</id><snippet>from numpy import sum</snippet></ROW><ROW><id>11304423</id><snippet>localhost-2:coding $ time python sumtime.py 
0.5106
2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 15:22:34) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]

real    0m20.313s
user    0m19.955s
sys 0m0.247s
localhost-2:coding $ time python sumtime_with_np_sum.py 
0.5118
2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 15:22:34) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]

real    0m0.572s
user    0m0.345s
sys 0m0.220s
</snippet></ROW><ROW><id>11304423</id><snippet>sum is np.sum</snippet></ROW><ROW><id>11304951</id><snippet>(mean(model)-mean(test))**2</snippet></ROW><ROW><id>11305039</id><snippet>$('body').delegate('a.deletebutton','click',function(e){
            if(!confirm("Do you really want to delete it?")){
                e.preventDefault();
            }
        });
</snippet></ROW><ROW><id>11305263</id><snippet>&lt;tr class="required"&gt;</snippet></ROW><ROW><id>11305511</id><snippet>class RedirectMiddleware:
    def process_request(self, request):
        if 'c' in request.GET:
            # return a HttpResponseRedirect here
</snippet></ROW><ROW><id>11305631</id><snippet>import pstats
</snippet></ROW><ROW><id>11305993</id><snippet>class PoolTable(tables.Table):
    class Meta:
        model = Simple 
        attrs = {'class': 'paleblue','width':'200%'}
</snippet></ROW><ROW><id>11306898</id><snippet>Serial.write()</snippet></ROW><ROW><id>11306898</id><snippet>Serial.println()</snippet></ROW><ROW><id>11306898</id><snippet>readline()</snippet></ROW><ROW><id>11307035</id><snippet>with open(hostsFile, 'r') as f:
    for line in f:
        line = line.strip()
        if not line:
            continue

        epoch = str(time.time())

        try:
            conn = urllib.urlopen(line)
            print epoch + ": Connection successful, status code for " + line + " is " + str(conn.code) + "\n"
        except IOError:
            print epoch + ": Connection unsuccessful, unable to connect to server, potential routing issues\n"
</snippet></ROW><ROW><id>11307826</id><snippet>MyPanel</snippet></ROW><ROW><id>11307826</id><snippet>self</snippet></ROW><ROW><id>11307826</id><snippet>def __init__(self, ...)
    ...
    self.pt1 = None
    self.pt2 = None
    self.rects = []

def onDown(self, evt):
    self.pt1 = evt.GetPosition() # new start position

def onMove(self, evt):
    self.pt2 = evt.GetPosition() # end position

def onUp(self, evt):
    # if mouse is released, store the points in the list
    self.rects.append((self.pt1, self.pt2))
    self.pt1 = self.pt2 = None

def onDraw(self, evt):
    dc = wx.PaintDC(self)

    # if we are currently creating a new rect, draw it
    if self.pt1 and self.pt2:
        self.drawRect(dc, self.pt1, self.pt2)

    # draw all finished rects
    for p1, p2 in self.rects:
        self.drawRect(dc, p1, p2)
</snippet></ROW><ROW><id>11308029</id><snippet>no such table: search_keywords</snippet></ROW><ROW><id>11308029</id><snippet>settings.py</snippet></ROW><ROW><id>11308029</id><snippet>manage.py syncdb</snippet></ROW><ROW><id>11308157</id><snippet>dot(A,B)</snippet></ROW><ROW><id>11308157</id><snippet>A</snippet></ROW><ROW><id>11308157</id><snippet>B</snippet></ROW><ROW><id>11308157</id><snippet>sum(conj(A).*B)
</snippet></ROW><ROW><id>11308157</id><snippet>np.sum(A.conj()*B, axis=0)
</snippet></ROW><ROW><id>11308254</id><snippet>def statistics(it):
    """Returns number of elements, sum, max, min"""

    it = iter(it)

    x0 = next(it)
    maximum = minimum = total = x0
    n = 1

    for x in it:
        maximum = max(maximum, x)
        minimum = min(minimum, x)
        total += x
        n += 1

    return n, total, maximum, minimum
</snippet></ROW><ROW><id>11308254</id><snippet>namedtuple</snippet></ROW><ROW><id>11308254</id><snippet>class Summer(object):
    def __init__(self, x0=0):
        self.value = x0

    def add(self, x):
        self.value += x

class SquareSummer(Summer):
    def add(self, x):
        super(SquareSummer, self).add(x ** 2)

class Maxer(object):
    def __init__(self, x0):
        self.value = x0

    def add(self, x):
        self.value = max(self.value, x)

# example usage: collect([Maxer, Summer], iterable)
def collect(collectors, it):
    it = iter(it)

    x0 = next(it)
    collectors = [c(x0) for c in collectors]

    for x in it:
        for c in collectors:
            c.add(x)

    return [c.value for c in collectors]
</snippet></ROW><ROW><id>11308354</id><snippet>skip</snippet></ROW><ROW><id>11308354</id><snippet>import unittest

class Base: pass
class Derived1(Base): pass

class BaseTest(object):
    cls = None

    def setUp(self):
        self.instance = self.cls()

    def test_Method1(self):
        print("run test_Method1, cls={}".format(self.cls))

class TestParent(BaseTest, unittest.TestCase):
    cls = Base

class TestDerived1(BaseTest, unittest.TestCase):
    cls = Derived1

unittest.main()
</snippet></ROW><ROW><id>11308453</id><snippet>method_wrapper</snippet></ROW><ROW><id>11308453</id><snippet>return method</snippet></ROW><ROW><id>11308453</id><snippet>return method(*args, **kwargs)</snippet></ROW><ROW><id>11309147</id><snippet>&gt;&gt;&gt; list(product(iter('AB'), iter('CD')))
[('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D')]
&gt;&gt;&gt; list(product2(iter('AB'), iter('CD')))
[('A', 'C'), ('A', 'D')]
&gt;&gt;&gt; list(product(iter('AB'), iter('CD'))) == list(product2(iter('AB'), iter('CD')))
False
</snippet></ROW><ROW><id>11309147</id><snippet>&gt;&gt;&gt; list(product(iter('ABC'), repeat=2))
[('A', 'A'), ('A', 'B'), ('A', 'C'), ('B', 'A'), ('B', 'B'), ('B', 'C'), ('C', 'A'), ('C', 'B'), ('C', 'C')]
&gt;&gt;&gt; list(product2(iter('ABC'), repeat=2))
[]
</snippet></ROW><ROW><id>11309252</id><snippet>import</snippet></ROW><ROW><id>11309252</id><snippet>from A import B
from A.B import C
</snippet></ROW><ROW><id>11309422</id><snippet>while</snippet></ROW><ROW><id>11309422</id><snippet>  while True:
       # do stuff
</snippet></ROW><ROW><id>11309422</id><snippet>  for(;;)
      /* do stuff */
</snippet></ROW><ROW><id>11309422</id><snippet>break</snippet></ROW><ROW><id>11309509</id><snippet>QApplication app(argc, argv);
// phonon initialization, and play
app.exec()
</snippet></ROW><ROW><id>11309567</id><snippet>echo '06/28/12 14:17:10.754117 :R: INFO  [6] X10.cpp:4042 |xevent 35932825 1 0 0' | 
awk '{$2 = substr($2, 1, length($2) - 3) " " substr($2, length($2) - 2); print}'
</snippet></ROW><ROW><id>11309567</id><snippet>06/28/12 14:17:10.754 117 :R: INFO [6] X10.cpp:4042 |xevent 35932825 1 0 0
</snippet></ROW><ROW><id>11309567</id><snippet>awk '{$2 = substr($2, 1, 12) " " substr($2, 13); print}'
</snippet></ROW><ROW><id>11309864</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>11309864</id><snippet>&gt;&gt;&gt; p=Popen(["cat", "-n", "file1", "file2"])
</snippet></ROW><ROW><id>11309864</id><snippet>&gt;&gt;&gt; p=Popen("cat -n file1 file2")
</snippet></ROW><ROW><id>11309864</id><snippet>cmd="gnome-terminal -x sudo git clone git://github.com/pererinha/gedit-snippet-jquery.git &amp;&amp; sudo cp -f gedit-snippet-jquery/js.xml /usr/share/gedit/plugins/snippets/js.xml &amp;&amp; sudo rm -rf gedit-snippet-jquery"
p=Popen(cmd.split(), shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT,
        close_fds=False)
</snippet></ROW><ROW><id>11309864</id><snippet>os</snippet></ROW><ROW><id>11309864</id><snippet>rm</snippet></ROW><ROW><id>11309864</id><snippet>cp</snippet></ROW><ROW><id>11309864</id><snippet>gnome-terminal</snippet></ROW><ROW><id>11309864</id><snippet>sudo</snippet></ROW><ROW><id>11309864</id><snippet>sudo</snippet></ROW><ROW><id>11309864</id><snippet>sudo</snippet></ROW><ROW><id>11309864</id><snippet>sudoers</snippet></ROW><ROW><id>11309864</id><snippet>x-terminal-emulator</snippet></ROW><ROW><id>11309864</id><snippet>gnome-terminal</snippet></ROW><ROW><id>11309864</id><snippet>xfce4-terminal</snippet></ROW><ROW><id>11309964</id><snippet>from docutils.core import publish_string
import jinja2

html = publish_string(source=text, writer_name='html')
node = jinja2.Markup(html)
</snippet></ROW><ROW><id>11309964</id><snippet>node</snippet></ROW><ROW><id>11310036</id><snippet>Notify.uninit</snippet></ROW><ROW><id>11310036</id><snippet>import time
from gi.repository import Notify

Notify.init('myapp')

# optionally set an icon as the last argument
n = Notify.Notification.new('summary text', 'body text', None)
n.show()

# do whatever your application is doing
time.sleep(10)

n.close()
Notify.uninit()
</snippet></ROW><ROW><id>11310089</id><snippet>self.img = pyglet.image.load(...
</snippet></ROW><ROW><id>11310089</id><snippet>self.image</snippet></ROW><ROW><id>11310089</id><snippet>self.img</snippet></ROW><ROW><id>11310089</id><snippet>self.image = pyglet.image.load(...
</snippet></ROW><ROW><id>11310158</id><snippet>&gt;&gt;&gt; a = numpy.array(['a', 'b', 'c', 'd', 'e'])
&gt;&gt;&gt; b = numpy.arange(5)
&gt;&gt;&gt; records = numpy.rec.fromarrays((a, b), names=('keys', 'data'))
&gt;&gt;&gt; records
rec.array([('a', 0), ('b', 1), ('c', 2), ('d', 3), ('e', 4)], 
      dtype=[('keys', '|S1'), ('data', '&lt;i8')])
&gt;&gt;&gt; records['keys']
rec.array(['a', 'b', 'c', 'd', 'e'], 
      dtype='|S1')
&gt;&gt;&gt; records['data']
array([0, 1, 2, 3, 4])
</snippet></ROW><ROW><id>11310158</id><snippet>&gt;&gt;&gt; arr = numpy.array([('a', 0), ('b', 1)], 
                      dtype=([('keys', '|S1'), ('data', 'i8')]))
&gt;&gt;&gt; arr
array([('a', 0), ('b', 1)], 
      dtype=[('keys', '|S1'), ('data', '&lt;i8')])
</snippet></ROW><ROW><id>11310158</id><snippet>&gt;&gt;&gt; records.keys
chararray(['a', 'b', 'c', 'd', 'e'], 
      dtype='|S1')
&gt;&gt;&gt; arr.keys
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'numpy.ndarray' object has no attribute 'keys'
</snippet></ROW><ROW><id>11310329</id><snippet>reader1, reader2 = itertools.tee(csv.reader(f,delimiter=d))
columns = len(next(reader1))
del reader1
for row in reader2:
    ...
</snippet></ROW><ROW><id>11310329</id><snippet>reader1</snippet></ROW><ROW><id>11310329</id><snippet>tee</snippet></ROW><ROW><id>11310329</id><snippet>next(reader1)</snippet></ROW><ROW><id>11310708</id><snippet>re.match</snippet></ROW><ROW><id>11310708</id><snippet>0D</snippet></ROW><ROW><id>11310708</id><snippet>&gt;&gt;&gt; p_number = re.compile(r'(0D[\S]{13}|\d{15})')
&gt;&gt;&gt; for s in ['0Dfannawhoopowe foo', 
              'foo 012345678901234', 
              '012345678901234 foo']:
...     match = p_number.match(s)
...     if match:
...         print match.groups()
... 
('0Dfannawhoopowe',)
('012345678901234',)
</snippet></ROW><ROW><id>11310708</id><snippet>match</snippet></ROW><ROW><id>11310708</id><snippet>search</snippet></ROW><ROW><id>11310708</id><snippet>findall</snippet></ROW><ROW><id>11310708</id><snippet>findall</snippet></ROW><ROW><id>11310708</id><snippet>&gt;&gt;&gt; for s in ['0Dfannawhoopowe foo', 
              'foo 012345678901234', 
              '012345678901234 foo']:
...     match = p_number.findall(s)
...     if match:
...         print match
... 
['0Dfannawhoopowe']
['012345678901234']
['012345678901234']
</snippet></ROW><ROW><id>11310708</id><snippet>search</snippet></ROW><ROW><id>11310708</id><snippet>&gt;&gt;&gt; for s in ['0Dfannawhoopowe foo', 
              'foo 012345678901234', 
              '012345678901234 foo']:
...     match = p_number.search(s)
...     if match:
...         print match.groups()
... 
('0Dfannawhoopowe',)
('012345678901234',)
('012345678901234',)
</snippet></ROW><ROW><id>11310717</id><snippet>argparse</snippet></ROW><ROW><id>11310717</id><snippet>argparse</snippet></ROW><ROW><id>11310717</id><snippet>parser.add_argument('FILES',nargs='*')
options=parser.parse_args()
file1,optional_files=options.FILES[0],options.FILES[1:]
</snippet></ROW><ROW><id>11310717</id><snippet>file1</snippet></ROW><ROW><id>11310717</id><snippet>file2</snippet></ROW><ROW><id>11310717</id><snippet>sys.argv</snippet></ROW><ROW><id>11310717</id><snippet>import argparse
import sys

mangle_args=('file1','file2')
arguments=['--'+arg if arg in mangle_args else arg for arg in sys.argv[1:]]

parser=argparse.ArgumentParser()
parser.add_argument('--file1')
parser.add_argument('--file2')
options=parser.parse_args(arguments)
</snippet></ROW><ROW><id>11310847</id><snippet>canvasx</snippet></ROW><ROW><id>11310847</id><snippet>canvasy</snippet></ROW><ROW><id>11310847</id><snippet>find_closest()</snippet></ROW><ROW><id>11310847</id><snippet>def callback(event):
    canvas = event.widget
    x = canvas.canvasx(event.x)
    y = canvas.canvasy(event.y)
    print canvas.find_closest(x, y)
</snippet></ROW><ROW><id>11310848</id><snippet>class CachedProperties(object):
    @property
    def expensiveValue(self):
        cacheKey = (self.var1, self.var2)
        if cacheKey in self._expensiveValueCache:
            return self._expensiveValueCache[cacheKey]

        # No cached value available, calculate it now
        res = self._expensiveValueCache[cacheKey] = calculation(self.var1, self.var2)
        return res
</snippet></ROW><ROW><id>11310905</id><snippet> # To skip first line, see later
 cat endday.txt | while read line; do
     # Careful with backslashes here - they're not quote signs
     # If supported, use:
     # symbol=$( echo "$line" | cut -f1 -d, )
     symbol=`echo "$line" | cut -f1 -d,`

     # If file is not there, create it with a header
     # if [ ! -r $symbol.txt ]; then
     #    head -n 1 endday.txt &gt; $symbol.txt
     # fi
     echo "$line" &gt;&gt; $symbol.txt
 done
</snippet></ROW><ROW><id>11310905</id><snippet> for file in *.txt; do
    echo "Now processing $file..."
    # A quick and dirty way of ignoring line number 1 --- start at line 2.
    tail -n +2 $file | while read line; do
       # Careful with backslashes here - they're not quote signs
       # If supported, use:
       # symbol=$( echo "$line" | cut -f1 -d, )
       symbol=`echo "$line" | cut -f1 -d,`

       # If file is not there, create it with a header
       # if [ ! -r $symbol.txt ]; then
       #    head -n 1 $file &gt; $symbol.csv
       # fi
       # Output file is named .CSV so as not to create new .txt files
       # which this script might find
       echo "$line" &gt;&gt; $symbol.csv
    done
    # Change the name from .txt to .txt.ok, so it won't be found again
    mv $file $file.ok
    # or better move it elsewhere to avoid clogging this directory
    # mv $file /var/data/files/already-processed
 done
</snippet></ROW><ROW><id>11311005</id><snippet>import numpy as np

N = 8
M = 4
b = np.array([0, 1, 2, 0, 2, 3, 1, 1])
c = np.array([ 0.15517108,  0.84717734,  0.86019899,  0.62413489,  0.24357903, 0.86015187,  0.85813481,  0.7071174 ])

a = ((np.mgrid[:M,:N] == b)[0] * c).sum(axis=1)
</snippet></ROW><ROW><id>11311005</id><snippet>array([ 0.77930597,  2.41242955,  1.10377802,  0.86015187])
</snippet></ROW><ROW><id>11311082</id><snippet>__file__</snippet></ROW><ROW><id>11311082</id><snippet>import os
f = open(os.path.join(os.path.dirname(__file__), "filename.txt"))
</snippet></ROW><ROW><id>11311352</id><snippet>NameValue = unicode(Item.getElementsByTagName("Name")[0].childNodes[0].data.encode("latin-1"), "utf-8")
</snippet></ROW><ROW><id>11311568</id><snippet>def show_actuals(request):

    Account_Number_in = request.session['account_number']
    Year_in = request.session['year']
    count = request.session['count']
    actuals_data = request.session['actuals_to_show']
    months = request.session['months']
    show_actuals_formset = formset_factory(FetchActualsBox, extra=0)
    initial_list = []
    for data in actuals_data:
       initial_list.append({'value': data})
    formset = show_actuals_formset(initial=initial_list)
</snippet></ROW><ROW><id>11311634</id><snippet>address = "http://www.blekko.com/?q='%(query)s'+/html&amp;auth=&lt;mykey&gt;" % dict(query=request.vars.query)
</snippet></ROW><ROW><id>11311862</id><snippet>d = {1: [1]}
for v in d.itervalues():
    v[0] += 1
</snippet></ROW><ROW><id>11311862</id><snippet>dict</snippet></ROW><ROW><id>11311862</id><snippet>dict</snippet></ROW><ROW><id>11312707</id><snippet>val</snippet></ROW><ROW><id>11312707</id><snippet>var</snippet></ROW><ROW><id>11312707</id><snippet>a</snippet></ROW><ROW><id>11312707</id><snippet>&gt;&gt;&gt; a, b, c = None, None, None
&gt;&gt;&gt; print(zip((a,b,c), [1,2,3]))
[(None, 1), (None, 2), (None, 3)]
</snippet></ROW><ROW><id>11312707</id><snippet>zip</snippet></ROW><ROW><id>11312707</id><snippet>a</snippet></ROW><ROW><id>11312707</id><snippet>b</snippet></ROW><ROW><id>11312707</id><snippet>c</snippet></ROW><ROW><id>11312707</id><snippet>vars = (lst + [None] * 3)[:3]
</snippet></ROW><ROW><id>11312707</id><snippet>vars[0]</snippet></ROW><ROW><id>11312707</id><snippet>x, y, z = (lst + [None] * 3)[:3]
</snippet></ROW><ROW><id>11312799</id><snippet>json.dumps([dict(mpn=pn) for pn in lst])
</snippet></ROW><ROW><id>11312916</id><snippet>datetime</snippet></ROW><ROW><id>11312916</id><snippet>import datetime

a = 20120628061533.0

dt = datetime.datetime.strptime(str(int(a)), '%Y%m%d%H%M%S')
dt -= datetime.timedelta(minutes=1)

print dt.strftime('%Y%m%d%H%M%S')
</snippet></ROW><ROW><id>11312916</id><snippet>20120628061433
</snippet></ROW><ROW><id>11312916</id><snippet>datetime</snippet></ROW><ROW><id>11312948</id><snippet>Pool</snippet></ROW><ROW><id>11312948</id><snippet>import multiprocessing
import time
import signal
import sys

def init_worker():
    signal.signal(signal.SIGINT, signal.SIG_IGN)

def worker():
    while(True):
        time.sleep(1.1234)
        print "Working..."

if __name__ == "__main__":
    pool = multiprocessing.Pool(50, init_worker)
    try:
        for i in range(50):
            pool.apply_async(worker)

        time.sleep(10)
        pool.close()
        pool.join()

    except KeyboardInterrupt:
        print "Caught KeyboardInterrupt, terminating workers"
        pool.terminate()
        pool.join()
</snippet></ROW><ROW><id>11313022</id><snippet>from multiprocessing.pool import ThreadPool
</snippet></ROW><ROW><id>11313074</id><snippet>for x in wordlist:
    " ".join(x)
</snippet></ROW><ROW><id>11313074</id><snippet>!= ""</snippet></ROW><ROW><id>11313074</id><snippet>for row in csvfile:
    if row[0]:
        rowa.append(row[0])
    if row[1]:
        rowb.append(row[1])
</snippet></ROW><ROW><id>11313074</id><snippet>wordlist = [" ".join(x) for x in product(rowa, rowb)]
</snippet></ROW><ROW><id>11313223</id><snippet>task_name</snippet></ROW><ROW><id>11313223</id><snippet>eta</snippet></ROW><ROW><id>11313223</id><snippet>Task.add()</snippet></ROW><ROW><id>11313282</id><snippet>a, b, c = (mylist + [None] * 3)[:3]
</snippet></ROW><ROW><id>11313282</id><snippet>&gt;&gt;&gt; mylist = [1, 2]
&gt;&gt;&gt; a, b, c = (mylist + [None] * 3)[:3]
&gt;&gt;&gt; print a, b, c
1 2 None
&gt;&gt;&gt; mylist = [1, 2, 3, 4]
&gt;&gt;&gt; a, b, c = (mylist + [None] * 3)[:3]
&gt;&gt;&gt; print a, b, c
1 2 3
</snippet></ROW><ROW><id>11313282</id><snippet>try:
    a, b, c = (mylist + [None])[:3]
except ValueError:
    print "You mast specify at least 2 values"
    sys.exit(1)
</snippet></ROW><ROW><id>11313317</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>11313317</id><snippet>Table = namedtuple('Table', ['up', 'down', 'left', 'right'])
</snippet></ROW><ROW><id>11313317</id><snippet>table = Table(up=["img1.png","img2.png"], down=..., left=..., right=...)
</snippet></ROW><ROW><id>11313317</id><snippet>table.up</snippet></ROW><ROW><id>11313317</id><snippet>table_r</snippet></ROW><ROW><id>11313317</id><snippet>for i in range(len(table)):
    for j in range(len(table[i])):
       ...
</snippet></ROW><ROW><id>11313317</id><snippet>range(len(iterable))</snippet></ROW><ROW><id>11313317</id><snippet>enumerate</snippet></ROW><ROW><id>11313317</id><snippet>zip</snippet></ROW><ROW><id>11313317</id><snippet>for row, row_r in zip(table, table_r):
    for i, (val, val_r) in enumerate(zip(row, row_r)):
       row[i] = pygame.image.load(os.path.join(str(val)))
       row_r[i] = pygame.image.load(os.path.join(str(val_r)))
</snippet></ROW><ROW><id>11313317</id><snippet>val</snippet></ROW><ROW><id>11313317</id><snippet>val_r</snippet></ROW><ROW><id>11313317</id><snippet>j</snippet></ROW><ROW><id>11313317</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Point = namedtuple('Point', ['x', 'y'])
&gt;&gt;&gt; p = Point(1, 2)
&gt;&gt;&gt; p.x = 2
Traceback (most recent call last):
  File "&lt;pyshell#3&gt;", line 1, in &lt;module&gt;
    p.x = 2
AttributeError: can't set attribute
</snippet></ROW><ROW><id>11313317</id><snippet>table.up</snippet></ROW><ROW><id>11313509</id><snippet>if request.method in ['GET', 'POST']:
    // allowed
else:
    // not allowed
</snippet></ROW><ROW><id>11313622</id><snippet>dictAB = {k: [dictA[k], dictB[k]] for k in dictA.viewkeys() &amp; dictB.viewkeys()}
</snippet></ROW><ROW><id>11313622</id><snippet>dictAB = dict((k, [dictA[k], dictB[k]]) for k in set(dictA) &amp; set(dictB))
</snippet></ROW><ROW><id>11313622</id><snippet>.keys</snippet></ROW><ROW><id>11313622</id><snippet>dictAB = {k: [dictA[k], dictB[k]] for k in dictA.keys() &amp; dictB.keys()}
</snippet></ROW><ROW><id>11313622</id><snippet>&gt;&gt;&gt; dictA = {'key1':'Joe', 'key2':'Bob'}
&gt;&gt;&gt; dictB = {'key1':'Smith', 'key2':'Johnson'}
&gt;&gt;&gt; dictAB = {k: [dictA[k], dictB[k]] for k in dictA.viewkeys() &amp; dictB.viewkeys()}
&gt;&gt;&gt; print dictAB
{'key2': ['Bob', 'Johnson'], 'key1': ['Joe', 'Smith']}
</snippet></ROW><ROW><id>11313622</id><snippet>&amp;</snippet></ROW><ROW><id>11313622</id><snippet>dictAB = {k: [dictA[k], dictB[k]] for k in dictA}
</snippet></ROW><ROW><id>11313712</id><snippet>#forms.py
class AuthorForm(forms.ModelForm):
    class Meta:
        model = Author

    def __init__(self, *args, **kwargs):
        super(AuthorForm, self).__init__(*args, **kwargs)
        if self.instance.id:
            self.fields['weight'].widget.attrs['readonly'] = True

#views.py
AuthorFormSet = modelformset_factory(Author, extra=2, form=AuthorForm)
</snippet></ROW><ROW><id>11314028</id><snippet>math</snippet></ROW><ROW><id>11314160</id><snippet>Foo</snippet></ROW><ROW><id>11314160</id><snippet>import imp
import sys

def my_import(module_name, globals):
    if module_name in sys.modules:
        return sys.modules[module_name]
    module = imp.new_module(module_name)
    vars(module).update(globals)
    f, module.__file__, options = imp.find_module(module_name)
    exec f.read() in vars(module)
    f.close()
    sys.modules[module_name] = module
    return module
</snippet></ROW><ROW><id>11314265</id><snippet>{"title": "The "Star Wars Kid": Where is he now?"}
</snippet></ROW><ROW><id>11314487</id><snippet>yChannel = 4*[[]]
</snippet></ROW><ROW><id>11314487</id><snippet>yChannel = [[] for dummy in range(4)]
</snippet></ROW><ROW><id>11314516</id><snippet>if request.session.get('trying_to_publish', False):
    form = FinalForm({}, instance=project)  
    form.is_valid()
</snippet></ROW><ROW><id>11314571</id><snippet>import os

class View:
    def __init__(self, f, offset, length):
        self.f = f
        self.f_offset = offset
        self.offset = 0
        self.length = length

    def seek(self, offset, whence=0):
        if whence == os.SEEK_SET:
            self.offset = offset
        elif whence == os.SEEK_CUR:
            self.offset += offset
        elif whence == os.SEEK_END:
            self.offset = self.length+offset
        else:
            # Other values of whence should raise an IOError
            return self.f.seek(offset, whence)
        return self.f.seek(self.offset+self.f_offset, os.SEEK_SET)

    def tell(self):
        return self.offset

    def read(self, size=-1):
        self.seek(self.offset)
        if size&lt;0:
            size = self.length-self.offset
        size = max(0, min(size, self.length-self.offset))
        self.offset += size
        return self.f.read(size)

if __name__ == "__main__":
    f = open('test.txt', 'r')

    views = []
    offsets = [i*11 for i in range(10)]

    for o in offsets:
        f.seek(o+1)
        length = int(f.read(1))
        views.append(View(f, o+2, length))

    f.seek(0)

    completes = {}
    for v in views:
        completes[v.f_offset] = v.read()
        v.seek(0)

    import collections
    strs = collections.defaultdict(str)
    for i in range(3):
        for v in views:
            strs[v.f_offset] += v.read(3)
    strs = dict(strs) # We want it to raise KeyErrors after that.

    for offset, s in completes.iteritems():
        print offset, strs[offset], completes[offset]
        assert strs[offset] == completes[offset], "Something went wrong!"
</snippet></ROW><ROW><id>11314571</id><snippet>import string, random

f = open('test.txt', 'w')

for i in range(10):
    rand_list = list(string.ascii_letters)
    random.shuffle(rand_list)
    rand_str = "".join(rand_list[:9])
    f.write(".%d%s" % (len(rand_str), rand_str))
</snippet></ROW><ROW><id>11314602</id><snippet>import pickle
import gzip
import numpy

with open('mnist.pkl', 'rb') as f:
    u = pickle._Unpickler(f)
    u.encoding = 'latin1'
    p = u.load()
    print(p)
</snippet></ROW><ROW><id>11314609</id><snippet>a, b, c = 10, 10, 1    #default values
mylist = [int(x) for x in input.split(',')]
a, b, c = mylist + [a, b, c][len(mylist):]
</snippet></ROW><ROW><id>11314679</id><snippet>return 2011 - "%d" % (f)
         ^      ^
         |      |
     integer   string
</snippet></ROW><ROW><id>11314679</id><snippet>TypeError: int argument required</snippet></ROW><ROW><id>11314679</id><snippet>def age_calc(yr):
    print "To calculate your age, I will subtract the current year from your birthyear!"
    return 2011 - yr

year = int(raw_input("What year were you born?: ")) # convert string to int
age = age_calc(year)

print age
</snippet></ROW><ROW><id>11314679</id><snippet>int</snippet></ROW><ROW><id>11314679</id><snippet>age_calc()</snippet></ROW><ROW><id>11314679</id><snippet>age_calc()</snippet></ROW><ROW><id>11314679</id><snippet>yr</snippet></ROW><ROW><id>11314679</id><snippet>f</snippet></ROW><ROW><id>11314767</id><snippet>    class TestListCtrl(wx.ListCtrl, listmix.ListCtrlAutoWidthMixin):
    def __init__(self, parent, ID, pos=wx.DefaultPosition,
                 size=wx.DefaultSize, style=0):
        wx.ListCtrl.__init__(self, parent, ID, pos, size, style)
        listmix.ListCtrlAutoWidthMixin.__init__(self)
        self.setResizeColumn(0)
</snippet></ROW><ROW><id>11315061</id><snippet>*</snippet></ROW><ROW><id>11315061</id><snippet>**</snippet></ROW><ROW><id>11315061</id><snippet>&gt;&gt;&gt; def functionA(*a, **kw):
       print(a)
       print(kw)


&gt;&gt;&gt; functionA(1,2,3,4,5,6,a=2,b=3,c=5)
(1, 2, 3, 4, 5, 6)
{'a': 2, 'c': 5, 'b': 3}
</snippet></ROW><ROW><id>11315061</id><snippet>*</snippet></ROW><ROW><id>11315061</id><snippet>**</snippet></ROW><ROW><id>11315061</id><snippet>&gt;&gt;&gt; lis=[1,2,3,4]
&gt;&gt;&gt; dic={'a':10,'b':20}
&gt;&gt;&gt; functionA(*lis,**dic)  #it is similar to functionA(1,2,3,4,a=10,b=20)
(1, 2, 3, 4)
{'a': 10, 'b': 20}
</snippet></ROW><ROW><id>11315281</id><snippet>import copy
order = [['yhjK', 'F'], 'gap', ['bcsA', 'F'], ['bcsB', 'F'], ['bcsZ', 'F'], 
'gap', ['yhjK', 'R']]
order_1 = copy.deepcopy(order)

# Now changing order_1 will not change order
order_1[1] = ['TEST LIST']
print order[1] # Prints 'gap'
print order_1[1] # Prints '['TEST LIST']
</snippet></ROW><ROW><id>11315508</id><snippet>subprocess.Popen.communicate</snippet></ROW><ROW><id>11315508</id><snippet>command = ['ffmpeg', '-y', '-i', '-', output_file.name]
process = subprocess.Popen(command, stdin=subprocess.PIPE)
process.communicate(recording_wav)
</snippet></ROW><ROW><id>11315508</id><snippet>command = ['ffmpeg', '-y', '-i', '-', '-f', 'mp3', '-']
process = subprocess.Popen(command, stdin=subprocess.PIPE)
recording_mp3, errordata = process.communicate(recording_wav)
</snippet></ROW><ROW><id>11315548</id><snippet>docutils.core.publish_doctree</snippet></ROW><ROW><id>11315548</id><snippet>:param x: Some parameter
</snippet></ROW><ROW><id>11315548</id><snippet>&lt;field_list&gt;
    &lt;field&gt;
        &lt;field_name&gt;
            param x
        &lt;/field_name&gt;
        &lt;field_body&gt;
            &lt;paragraph&gt;
                Some parameter
            &lt;/paragraph&gt;
        &lt;/field_body&gt;
    &lt;/field&gt;
&lt;/field_list&gt;
</snippet></ROW><ROW><id>11315548</id><snippet>field_list</snippet></ROW><ROW><id>11315548</id><snippet>field/field_name</snippet></ROW><ROW><id>11315548</id><snippet>field/field_body/paragraph</snippet></ROW><ROW><id>11315548</id><snippet>from docutils.core import publish_doctree
import xml.etree.ElementTree as etree

source = """Some help text

:param x: some parameter
:type x: and it's type

:return: Some text
:rtype: Return type

Some trailing text. I have no idea if the above is valid Sphinx
documentation!
"""

doctree = publish_doctree(source).asdom()

# Convert to etree.ElementTree since this is easier to work with than
# xml.minidom
doctree = etree.fromstring(doctree.toxml())

# Get all field lists in the document.
field_lists = doctree.findall('field_list')

fields = [f for field_list in field_lists \
    for f in field_list.findall('field')]

field_names = [name.text for field in fields \
    for name in field.findall('field_name')]

field_text = [etree.tostring(element) for field in fields \
    for element in field.findall('field_body')]

print zip(field_names, field_text)
</snippet></ROW><ROW><id>11315548</id><snippet>[('param x', '&lt;field_body&gt;&lt;paragraph&gt;some parameter&lt;/paragraph&gt;&lt;/field_body&gt;'),
 ('type x', "&lt;field_body&gt;&lt;paragraph&gt;and it's type&lt;/paragraph&gt;&lt;/field_body&gt;"), 
 ('return', '&lt;field_body&gt;&lt;paragraph&gt;Some text&lt;/paragraph&gt;&lt;/field_body&gt;'), 
 ('rtype', '&lt;field_body&gt;&lt;paragraph&gt;Return type&lt;/paragraph&gt;&lt;/field_body&gt;')]
</snippet></ROW><ROW><id>11315548</id><snippet>:return:</snippet></ROW><ROW><id>11315548</id><snippet>:param x:</snippet></ROW><ROW><id>11315674</id><snippet>request.user</snippet></ROW><ROW><id>11315674</id><snippet>User</snippet></ROW><ROW><id>11315674</id><snippet>AnonymousUser</snippet></ROW><ROW><id>11315674</id><snippet>__class__</snippet></ROW><ROW><id>11315674</id><snippet>SimpleLazyObject</snippet></ROW><ROW><id>11315674</id><snippet>User</snippet></ROW><ROW><id>11315674</id><snippet>AnonymousUser</snippet></ROW><ROW><id>11315674</id><snippet>User</snippet></ROW><ROW><id>11315674</id><snippet>AnonymousUser</snippet></ROW><ROW><id>11315674</id><snippet>request.user.is_authenticated()</snippet></ROW><ROW><id>11315674</id><snippet>User</snippet></ROW><ROW><id>11315674</id><snippet>UserSubClass</snippet></ROW><ROW><id>11315679</id><snippet>start % step_size</snippet></ROW><ROW><id>11315679</id><snippet>&gt;&gt;&gt; end = 78
&gt;&gt;&gt; start = -1 * end
&gt;&gt;&gt; step_size = 16
&gt;&gt;&gt; range(start-(start%step_size), end+step_size, step_size)
[-80, -64, -48, -32, -16, 0, 16, 32, 48, 64, 80]
</snippet></ROW><ROW><id>11315679</id><snippet>def get_range(end, step_size):
    start = -1 * end
    return range(start-(start%step_size), end+step_size, step_size)

&gt;&gt;&gt; get_range(23, 4)
[-24, -20, -16, -12, -8, -4, 0, 4, 8, 12, 16, 20, 24]
&gt;&gt;&gt; get_range(19, 11)
[-22, -11, 0, 11, 22]
&gt;&gt;&gt; get_range(103, 32)
[-128, -96, -64, -32, 0, 32, 64, 96, 128]
</snippet></ROW><ROW><id>11315680</id><snippet>def max_number(n):
    s = str(n)
    digits = sorted(s, reverse=n&gt;0)
    return int(''.join(digits))

print max_number(231)    
print max_number(-231)    
print max_number(+231)    
</snippet></ROW><ROW><id>11315680</id><snippet>from math import *

def max_number(n):
    digit_count = int(log(abs(n+1),10)) + 1 
    digits = sorted([(n / 10 ** (x - 1) % 10)  for x in range(digit_count,0,-1) ], reverse=True)
    return reduce(lambda x, y:10*x + y, digits)

print max_number(1000)
print max_number(999)
print max_number(2345128)
print max_number(231) 
</snippet></ROW><ROW><id>11315806</id><snippet>while k!=1:
    if(k%2==0):
        k //= 2
    else:
        k=3*k+1
</snippet></ROW><ROW><id>11316086</id><snippet>ZopeTransactionExtension</snippet></ROW><ROW><id>11316086</id><snippet>flush</snippet></ROW><ROW><id>11316086</id><snippet>DBSession.flush()</snippet></ROW><ROW><id>11316086</id><snippet>add(...)</snippet></ROW><ROW><id>11316086</id><snippet>def create_unique_object(db, max_attempts=3):
    while True:
        sp = transaction.savepoint()
        try:
            obj = MyObject()
            obj.identifier = uuid.uuid4().hex
            db.add(obj)
            db.flush()
        except IntegrityError:
            sp.rollback()
            max_attempts -= 1
            if max_attempts &lt; 1:
                raise
        else:
            return obj
</snippet></ROW><ROW><id>11316298</id><snippet>import scipy.stats as ss
import numpy as np
import matplotlib.pyplot as plt
alpha, loc, beta=5, 100, 22
data=ss.gamma.rvs(alpha,loc=loc,scale=beta,size=5000)
myHist = plt.hist(data, 100, normed=True)
rv = ss.gamma(alpha,loc,beta)
x = np.linspace(0,600) 
h = plt.plot(x, rv.pdf(x), lw=2)
plt.show()
</snippet></ROW><ROW><id>11316298</id><snippet>figure</snippet></ROW><ROW><id>11316298</id><snippet>import scipy.stats as ss
import numpy as np
import matplotlib.pyplot as plt
# setting up the axes
fig = plt.figure(figsize=(8,8))
ax  = fig.add_subplot(111)
# now plot
alpha, loc, beta=5, 100, 22
data=ss.gamma.rvs(alpha,loc=loc,scale=beta,size=5000)
myHist = ax.hist(data, 100, normed=True)
rv = ss.gamma(alpha,loc,beta)
x = np.linspace(0,600)
h = ax.plot(x, rv.pdf(x), lw=2)
# show
plt.show()
</snippet></ROW><ROW><id>11316367</id><snippet>@action(name='ftp', renderer='templates/ftp.pt')
@action(xhr=True, renderer='json', name='ftp')
def ftp_ajax(self):
    log.debug('View: %s', 'ftp (ajax)')

    if 'form.submitted' in self.params:
        try:
            self.config.save(self.params)
        except:
            request.response.status = 500
            return {'status': 'error', 'error_msg': 'some error'}
        else:
            return {'status': 'success'}

    request.response.status = 400
    return {'status': 'error', 'error_msg': 'invalid request'}
</snippet></ROW><ROW><id>11316764</id><snippet>{% macro render_class(class) -%}
class {{ class.name }}
{
{% for field in class.fields %}
    int {{ field }};
{% endfor %}
{% for subclass in class.subclasses %}
{{ render_class(subclass) }}
{% endfor %}
}
{%- endmacro %}

{% for class in classes %}
{{ render_class(class) }}
{% endfor %}
</snippet></ROW><ROW><id>11316764</id><snippet>class Bar
{
    int meow;
    int bark;

class SubBar
{
    int joe;
    int pete;
}
}
</snippet></ROW><ROW><id>11316969</id><snippet>private_key_string</snippet></ROW><ROW><id>11316969</id><snippet>my_signed_url = my_distro.create_signed_url(OBJECT_URL, KEYPAIR_ID,
        expire_time=time.time() + SECS, private_key_file=KEYPAIR_FILE)
</snippet></ROW><ROW><id>11316969</id><snippet>private_key_file</snippet></ROW><ROW><id>11316969</id><snippet>private_key_string</snippet></ROW><ROW><id>11316969</id><snippet>None</snippet></ROW><ROW><id>11316969</id><snippet>None</snippet></ROW><ROW><id>11317088</id><snippet>html_types = ["text/html"]
</snippet></ROW><ROW><id>11317088</id><snippet>html_types = ["text/html", "application/json"]
</snippet></ROW><ROW><id>11317288</id><snippet>writeDoc()</snippet></ROW><ROW><id>11317288</id><snippet>openfile = open("numbers.txt", w)
                               ^
</snippet></ROW><ROW><id>11317288</id><snippet>w</snippet></ROW><ROW><id>11317288</id><snippet>openfile = open("numbers.txt", "w")
                                ^
</snippet></ROW><ROW><id>11317288</id><snippet>'r'</snippet></ROW><ROW><id>11317327</id><snippet>__eq__</snippet></ROW><ROW><id>11317327</id><snippet>==</snippet></ROW><ROW><id>11317327</id><snippet>__nonzero__</snippet></ROW><ROW><id>11317327</id><snippet>__bool__</snippet></ROW><ROW><id>11317327</id><snippet>__nonzero__</snippet></ROW><ROW><id>11317327</id><snippet>True</snippet></ROW><ROW><id>11317327</id><snippet>5 + 5</snippet></ROW><ROW><id>11317327</id><snippet>8 + 2</snippet></ROW><ROW><id>11317327</id><snippet>__eq__</snippet></ROW><ROW><id>11317327</id><snippet>__eq__</snippet></ROW><ROW><id>11317327</id><snippet>5 + 5</snippet></ROW><ROW><id>11317327</id><snippet>8 + 2</snippet></ROW><ROW><id>11317327</id><snippet>__hash__</snippet></ROW><ROW><id>11317327</id><snippet>__eq__</snippet></ROW><ROW><id>11317327</id><snippet>True</snippet></ROW><ROW><id>11317327</id><snippet>__eq__</snippet></ROW><ROW><id>11317327</id><snippet>__eq__</snippet></ROW><ROW><id>11317327</id><snippet>__eq__</snippet></ROW><ROW><id>11317428</id><snippet>from dateutil import rrule
from datetime import datetime

a = '20120525'
b = '20120627'

for dt in rrule.rrule(rrule.DAILY,
                      dtstart=datetime.strptime(a, '%Y%m%d'),
                      until=datetime.strptime(b, '%Y%m%d')):
    print dt.strftime('%Y%m%d')
</snippet></ROW><ROW><id>11317428</id><snippet>20120525
20120526
20120527
…
20120625
20120626
20120627
</snippet></ROW><ROW><id>11317480</id><snippet>cv_image = cv_image[:,:,::-1]
</snippet></ROW><ROW><id>11317564</id><snippet>import urllib

class AHandler(webapp2.RequestHandler):
  def get(self):
    name = 'Some name'
    redirect('b?%s' % urllib.urlencode({'name': name}))

class BHandler(webapp2.RequestHandler):
  def get(self):
    name = self.request.get('name')
    # do something with name
</snippet></ROW><ROW><id>11317653</id><snippet>__str__()</snippet></ROW><ROW><id>11317653</id><snippet>__repr__()</snippet></ROW><ROW><id>11317653</id><snippet>print obj</snippet></ROW><ROW><id>11317653</id><snippet>__str__()</snippet></ROW><ROW><id>11317653</id><snippet>def __str__(self):
    return self.__repr__().encode(stdout.encoding)
</snippet></ROW><ROW><id>11317653</id><snippet>print obj.__str__()</snippet></ROW><ROW><id>11317653</id><snippet>print obj</snippet></ROW><ROW><id>11317653</id><snippet>__repr__()</snippet></ROW><ROW><id>11317674</id><snippet>&gt;&gt;&gt; u = urlencode(params)
&gt;&gt;&gt; u.replace('%7C', '|')
'p=1+2+3+4+5%266&amp;l=ab|cd|ef'  
</snippet></ROW><ROW><id>11317917</id><snippet>class TestClass:

  def __init__(self, adir=None, alist=None, avar=None):
    if alist is None:
      alist = []
    if adir is None:
      adir = {}
</snippet></ROW><ROW><id>11318057</id><snippet>sys.exit()</snippet></ROW><ROW><id>11318057</id><snippet>raise SystemExit</snippet></ROW><ROW><id>11318057</id><snippet>import sys
for trial in range(3):
    if input('Password:') == 'password':
        break
else:
    sys.exit()
print ("Welcome in"))
</snippet></ROW><ROW><id>11318057</id><snippet>try-except</snippet></ROW><ROW><id>11318057</id><snippet>try:
    import sys
    for trial in range(1):
        if raw_input('Password:') == 'password':
            break
    else:
        raise SystemExit #or just sys.exit()
    print ("Welcome in")
except SystemExit:
    pass  #when the program throws SysExit do nothing here,i.e end silently
</snippet></ROW><ROW><id>11318240</id><snippet>python -Sc "import numpy"
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
ImportError: No module named numpy
</snippet></ROW><ROW><id>11318240</id><snippet>site.py</snippet></ROW><ROW><id>11318240</id><snippet>quit</snippet></ROW><ROW><id>11318240</id><snippet>help</snippet></ROW><ROW><id>11318263</id><snippet>process = Popen('mysql %s -u%s' % (db, "root"), stdout=PIPE, stdin=PIPE, shell=True) output = process.communicate('source' + file)[0] 
</snippet></ROW><ROW><id>11318541</id><snippet>myNum = int(raw_input("Enter a number: "))
print(myNum + 1)
</snippet></ROW><ROW><id>11318541</id><snippet>myNum = int(input("Enter a number: "))
print(myNum + 1)
</snippet></ROW><ROW><id>11318614</id><snippet>In [1]: def list_cons(*args):
   ...:     return list(args)
   ...: 

In [2]: list_cons(1,2,3,4)
Out[2]: [1, 2, 3, 4]
</snippet></ROW><ROW><id>11318759</id><snippet>perl -MPOSIX=floor -anE'push@{$f{floor($F[0]/50)}},$F[1]}{$,=" ";for(sort{$a&lt;=&gt;$b}keys%f){$i=$_*50;say"$i -",$i+49,": @{$f{$_}}"}'
</snippet></ROW><ROW><id>11318759</id><snippet>-23350 - -23301 : MIR198
-19750 - -19701 : PRPS2
-12150 - -12101 : SLC7A5
-11650 - -11601 : CAMK2G
-9050 - -9001 : KIR3DX1
-300 - -251 : ARAP1
-100 - -51 : SLC12A6 CCDC88A
8000 - 8049 : C14orf79
10000 - 10049 : LOC100506172
12150 - 12199 : MMP14
65950 - 65999 : EFNB1
</snippet></ROW><ROW><id>11318765</id><snippet>system("export PYTHONPATH=../lib/python/ &amp;&amp; python ../reporter/src/reporter.py")</snippet></ROW><ROW><id>11319002</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>11319002</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [9,10]
&gt;&gt;&gt; for i in itertools.izip_longest(a,b): print i
... 
(1, 9)
(2, 10)
(3, None)
</snippet></ROW><ROW><id>11319002</id><snippet>None</snippet></ROW><ROW><id>11319002</id><snippet>&gt;&gt;&gt; for i in (filter(None, pair) for pair in itertools.izip_longest(a,b)): print i
(1, 9)
(2, 10)
(3,)
</snippet></ROW><ROW><id>11319002</id><snippet>filter(lambda p: p is not None, pair) for pair in itertools.izip_longest(a,b)
</snippet></ROW><ROW><id>11319070</id><snippet>form.process(..., onvalidation=some_func)
</snippet></ROW><ROW><id>11319070</id><snippet>def display_form():
    form = FORM('Your name:',
            INPUT(_name='name', requires=IS_NOT_EMPTY()),
            INPUT(_type='submit'))
    if form.process().accepted:
        session.flash = 'form accepted'
        redirect(URL('next'))
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill the form'
    return dict(form=form)
</snippet></ROW><ROW><id>11319070</id><snippet>def process_form():
   validated_data = dict()
   for k,v in request.vars.values(): # I think this works...
      if k == 'some_key':
         do_some_processing()
      ...
      validated_data[k] = some_func(v)
      ...
   # now everyhing is validated and ok, send the data on
   redirect('next_page', vars=validated_data)
</snippet></ROW><ROW><id>11319070</id><snippet>execfile(os.path.join(request.folder, 'private', 'script.py'))
</snippet></ROW><ROW><id>11319070</id><snippet>form = SQLFORM(db.some_table)
</snippet></ROW><ROW><id>11319070</id><snippet>db.define_table('news_item',
  Field('title', 'string', label='Title', requires=IS_NOT_EMPTY()),
  Field('type', 'string', label='Type', requires=IS_IN_SET(news_types)),
  Field('pub_date', 'date', default=request.now),
  Field('post_date', 'date', default=request.now), # Set date defaults 
  Field('link', 'string', label='News Link', requires=IS_EMPTY_OR(IS_URL())),
  Field('img', 'upload', uploadfield='img_file', label='Story Title Image'),
  Field('img_file', 'blob', label='Story Title Image'),
  Field('tagline', 'text', label='Tagline', requires=IS_NOT_EMPTY()),
  Field('published', 'boolean', label='Published?', notnull=True, required=True),
)
</snippet></ROW><ROW><id>11319186</id><snippet>()</snippet></ROW><ROW><id>11319186</id><snippet>import re
line = '4.20    AENC    [#sec4.20 Audio encryption]'
full_match = re.search(r'^\S+\s+(\S+)\s+\[#\S+ (.*?)\]', line)
dict_key = full_match.group(1)   # 'AENC'
id3v2_tag = full_match.group(2)  # 'Audio encryption'
</snippet></ROW><ROW><id>11319481</id><snippet>fp</snippet></ROW><ROW><id>11319481</id><snippet>"(u'297',)"
</snippet></ROW><ROW><id>11319481</id><snippet>int()</snippet></ROW><ROW><id>11319481</id><snippet>geted_numFinalPage</snippet></ROW><ROW><id>11319481</id><snippet>self.request.get("numFinalPage")</snippet></ROW><ROW><id>11319495</id><snippet>len(entitylist)</snippet></ROW><ROW><id>11319495</id><snippet>prefetch_refprops(entitylist, ChildModel.parent_program)</snippet></ROW><ROW><id>11319562</id><snippet>team_id = 1
query = session.query(User.id).filter(~User.memberteams.any(Team.id == team_id))
</snippet></ROW><ROW><id>11319562</id><snippet>SELECT users.id AS users_id, users.name AS users_name 
FROM users 
WHERE NOT (EXISTS (SELECT 1 
FROM team_user, teams 
WHERE users.id = team_user.user_id AND teams.id = team_user.team_id AND teams.id = %s))
</snippet></ROW><ROW><id>11319562</id><snippet>team_user</snippet></ROW><ROW><id>11319626</id><snippet>import datetime
dt = datetime.datetime(2004, 3, 8)

ax.annotate('A bad day at the office', xy=(dt, 24), xytext=(dt, 25),
            arrowprops=dict(facecolor='black', shrink=0.05),
           )
</snippet></ROW><ROW><id>11319866</id><snippet>digits.product(chars).select{ |d, ch| d &gt;= 2 &amp;&amp; ch == 'a' }.map(&amp;:join)
</snippet></ROW><ROW><id>11319953</id><snippet>dictionaries</snippet></ROW><ROW><id>11319953</id><snippet>&gt;&gt;&gt; name = ['mike', 'john', 'steve']   

&gt;&gt;&gt; age = [20, 32, 19] 

&gt;&gt;&gt; dic=dict(zip(name,age))

&gt;&gt;&gt; dic['mike']
20
&gt;&gt;&gt; dic['john']
32
</snippet></ROW><ROW><id>11319953</id><snippet>globals()[]</snippet></ROW><ROW><id>11319953</id><snippet>&gt;&gt;&gt; for x,y in zip(name,age):
    globals()[x]=y


&gt;&gt;&gt; mike
20
&gt;&gt;&gt; steve
19
&gt;&gt;&gt; john
32
</snippet></ROW><ROW><id>11320015</id><snippet>#!/bin/env python2.7
</snippet></ROW><ROW><id>11320015</id><snippet>python2.7</snippet></ROW><ROW><id>11320015</id><snippet>python</snippet></ROW><ROW><id>11320015</id><snippet>pythonX</snippet></ROW><ROW><id>11320015</id><snippet>pythonX.Y</snippet></ROW><ROW><id>11320015</id><snippet>python -&gt; python2 -&gt; python2.7</snippet></ROW><ROW><id>11320015</id><snippet>python2.7</snippet></ROW><ROW><id>11320015</id><snippet>subprocess.Popen(['pythonX.Y', SCRIPT_NAME])
</snippet></ROW><ROW><id>11320015</id><snippet>subprocess.Popen([SCRIPT_NAME])
</snippet></ROW><ROW><id>11320015</id><snippet>subprocess.Popen([sys.executable, SCRIPT_NAME])
</snippet></ROW><ROW><id>11320015</id><snippet>import sys
print(sys.hexversion)
</snippet></ROW><ROW><id>11320161</id><snippet>fork</snippet></ROW><ROW><id>11320161</id><snippet>exec</snippet></ROW><ROW><id>11320161</id><snippet>fork</snippet></ROW><ROW><id>11320161</id><snippet>fork</snippet></ROW><ROW><id>11320161</id><snippet>fork</snippet></ROW><ROW><id>11320161</id><snippet>man</snippet></ROW><ROW><id>11320161</id><snippet>pipe</snippet></ROW><ROW><id>11320170</id><snippet>from collections import defaultdict, Counter

users = defaultdict(Counter)

users['Tom']['Count'] += 1
users['Tom']['New'] += 1
</snippet></ROW><ROW><id>11320170</id><snippet>type</snippet></ROW><ROW><id>11320207</id><snippet>obj</snippet></ROW><ROW><id>11320207</id><snippet>obj</snippet></ROW><ROW><id>11320207</id><snippet>unicode</snippet></ROW><ROW><id>11320207</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>11320207</id><snippet>obj</snippet></ROW><ROW><id>11320207</id><snippet>str</snippet></ROW><ROW><id>11320207</id><snippet>obj</snippet></ROW><ROW><id>11320207</id><snippet>str(obj)</snippet></ROW><ROW><id>11320207</id><snippet>print obj.__str__()</snippet></ROW><ROW><id>11320207</id><snippet>str(obj)</snippet></ROW><ROW><id>11320207</id><snippet>obj.__str__()</snippet></ROW><ROW><id>11320207</id><snippet>str</snippet></ROW><ROW><id>11320207</id><snippet>unicode</snippet></ROW><ROW><id>11320207</id><snippet>"ascii"</snippet></ROW><ROW><id>11320207</id><snippet>obj.__str__()</snippet></ROW><ROW><id>11320207</id><snippet>print</snippet></ROW><ROW><id>11320207</id><snippet>str()</snippet></ROW><ROW><id>11320207</id><snippet>str()</snippet></ROW><ROW><id>11320207</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>11320207</id><snippet>ascii</snippet></ROW><ROW><id>11320207</id><snippet>str</snippet></ROW><ROW><id>11320207</id><snippet>__str__()</snippet></ROW><ROW><id>11320207</id><snippet>class Foo():
    def __unicode__(self):
        return u'whatever'
    def __str__(self):
        return unicode(self).encode(sys.stdout.encoding)
</snippet></ROW><ROW><id>11320207</id><snippet>str()</snippet></ROW><ROW><id>11320285</id><snippet>re.split(r'((?&lt;=\w)\.(?!\..)|!)', a)
</snippet></ROW><ROW><id>11320285</id><snippet>None</snippet></ROW><ROW><id>11320285</id><snippet>re.split()</snippet></ROW><ROW><id>11320285</id><snippet>.</snippet></ROW><ROW><id>11320285</id><snippet>None</snippet></ROW><ROW><id>11320285</id><snippet>!</snippet></ROW><ROW><id>11320285</id><snippet>None</snippet></ROW><ROW><id>11320285</id><snippet>['This is my text...I want it to split by periods',
 '.',
 ' I also want it to split by exclamation marks',
 '!',
 ' Is that so much to ask?']
</snippet></ROW><ROW><id>11320285</id><snippet>'.'</snippet></ROW><ROW><id>11320285</id><snippet>'!'</snippet></ROW><ROW><id>11320285</id><snippet>r'(?&lt;=\w)\.(?!\..)|!'</snippet></ROW><ROW><id>11320355</id><snippet>import numpy as np
import scipy.fftpack

data = np.arange(0.0, 12.8, 0.1)
fft = scipy.fftpack.fft(data)
</snippet></ROW><ROW><id>11320816</id><snippet>wexpect</snippet></ROW><ROW><id>11320816</id><snippet>from subprocess import check_call as x

x(r'c:\myfiles\evapo.exe inputs.prj')
</snippet></ROW><ROW><id>11321125</id><snippet>id="_253"</snippet></ROW><ROW><id>11321125</id><snippet>struct EmptyClass {};

int a_function(float f, EmptyClass e)
{
}

int main(void)
{
  return 0;
}
</snippet></ROW><ROW><id>11321125</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;GCC_XML&gt;
  &lt;Namespace id="_1" name="::" members="_2 _3 _4 "/&gt;
  &lt;Function id="_2" name="main" returns="_5" context="_1" location="f0:8"/&gt;
  &lt;Function id="_3" name="a_function" returns="_5" context="_1" location="f0:4"&gt;
    &lt;Argument name="f" type="_6"/&gt;
    &lt;Argument name="e" type="_4"/&gt;
  &lt;/Function&gt;
  &lt;Struct id="_4" name="EmptyClass" context="_1" location="f0:1" members="_7 _8 " bases=""/&gt;
  &lt;FundamentalType id="_5" name="int"/&gt;
  &lt;FundamentalType id="_6" name="float"/&gt;
  &lt;Constructor id="_7" name="EmptyClass" context="_4" location="f0:1"&gt;
    &lt;Argument name="_ctor_arg" type="_9"/&gt;
  &lt;/Constructor&gt;
  &lt;Constructor id="_8" name="EmptyClass" context="_4" location="f0:1"/&gt;
  &lt;ReferenceType id="_9" type="_4c"/&gt;
  &lt;File id="f0" name="example1.cxx"/&gt;
&lt;/GCC_XML&gt;
</snippet></ROW><ROW><id>11321125</id><snippet>main</snippet></ROW><ROW><id>11321125</id><snippet>  &lt;Function id="_2" name="main" returns="_5" context="_1" location="f0:8"/&gt;
</snippet></ROW><ROW><id>11321125</id><snippet>returns="_5"</snippet></ROW><ROW><id>11321125</id><snippet>id="_5"</snippet></ROW><ROW><id>11321125</id><snippet>&lt;FundamentalType id="_5" name="int"/&gt;
</snippet></ROW><ROW><id>11321125</id><snippet>_5</snippet></ROW><ROW><id>11321125</id><snippet>int</snippet></ROW><ROW><id>11321125</id><snippet>main</snippet></ROW><ROW><id>11321125</id><snippet>int</snippet></ROW><ROW><id>11321125</id><snippet>&lt;ReferenceType id="_9" type="_4c"/&gt;
</snippet></ROW><ROW><id>11321125</id><snippet>id="_4c"</snippet></ROW><ROW><id>11321125</id><snippet>const</snippet></ROW><ROW><id>11321125</id><snippet>c</snippet></ROW><ROW><id>11321125</id><snippet>id="_4"</snippet></ROW><ROW><id>11321125</id><snippet>&lt;Struct id="_4" name="EmptyClass" context="_1" location="f0:1" members="_7 _8 " bases=""/&gt;
</snippet></ROW><ROW><id>11321125</id><snippet>id="_9"</snippet></ROW><ROW><id>11321125</id><snippet>const EmptyClass &amp;</snippet></ROW><ROW><id>11321291</id><snippet>a = [{'entity': 'first entity', 'place': ['first', 'second', 'abc']}, {'entity': 'second entity', 'place': ['awe', 'ert']}]
for x in a:
    print '-', x['entity']
    print '-', ','.join(x['place'])
</snippet></ROW><ROW><id>11321291</id><snippet>&lt;p&gt;
{% for x in a %}
    {{x.entity}} &lt;br/&gt;
    {% for y in x.place %}
        {{y}}
    {% endfor %} 
    &lt;br/&gt;
{% endfor %}
&lt;/p&gt;
</snippet></ROW><ROW><id>11321591</id><snippet>&gt;&gt;&gt; s = '$1,300'
&gt;&gt;&gt; ''.join([x for x in s if x.isdigit()])
'1300'
</snippet></ROW><ROW><id>11321591</id><snippet>$13.95 -&gt; 13</snippet></ROW><ROW><id>11321727</id><snippet>import csv
with open('names.txt','rb') as f:
    for line in csv.reader(f):
        print line
</snippet></ROW><ROW><id>11321727</id><snippet>['TABITHA', 'OLLIE', 'JAIME', 'WINIFRED']
</snippet></ROW><ROW><id>11321747</id><snippet>"::"</snippet></ROW><ROW><id>11321747</id><snippet>":"</snippet></ROW><ROW><id>11321747</id><snippet>:</snippet></ROW><ROW><id>11321747</id><snippet>with open(infile) as inf, open(outfile,"w") as outf:
    for line in inf:
        splits = line.split(":")
        user, hash = splits[0], ":".join(splits[2:4])
        outf.write(hash + '\n')
</snippet></ROW><ROW><id>11321783</id><snippet>gpg = gnupg.GPG(gnupghome="/home/myname")</snippet></ROW><ROW><id>11321783</id><snippet>gpg = gnupg.GPG(gnupghome="/home/myname/.gnupg")</snippet></ROW><ROW><id>11321783</id><snippet>verify_file(stream)</snippet></ROW><ROW><id>11321783</id><snippet>verify_file()</snippet></ROW><ROW><id>11321783</id><snippet>sign_file</snippet></ROW><ROW><id>11321783</id><snippet>signed_data.stderr</snippet></ROW><ROW><id>11321783</id><snippet>verify_file</snippet></ROW><ROW><id>11321783</id><snippet>import gnupg

gpg = gnupg.GPG(gnupghome="/home/myname/.gnupg")

stream = open("example.txt", "rb")

signed_data = gpg.sign_file(stream)

verified = gpg.verify(signed_data.data)

print "Verified" if verified else "Unverified"
</snippet></ROW><ROW><id>11321807</id><snippet>SELECT last_insert_rowid()
</snippet></ROW><ROW><id>11321950</id><snippet>In [35]: testDF.aggregate(lambda x: st.sem(x, axis=None))
Out[35]:
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 600 entries, 0 to 599
Data columns:
A    600  non-null values
B    600  non-null values
C    600  non-null values
D    600  non-null values
E    600  non-null values
F    600  non-null values
G    600  non-null values
H    600  non-null values
I    600  non-null values
J    600  non-null values
dtypes: float64(10)
</snippet></ROW><ROW><id>11321950</id><snippet>sem()</snippet></ROW><ROW><id>11321950</id><snippet>axis=None</snippet></ROW><ROW><id>11321950</id><snippet>In [37]: testDF.aggregate(lambda x: st.sem(x, axis=1))
Out[37]:
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 600 entries, 0 to 599
Data columns:
A    600  non-null values
B    600  non-null values
C    600  non-null values
D    600  non-null values
E    600  non-null values
F    600  non-null values
G    600  non-null values
H    600  non-null values
I    600  non-null values
J    600  non-null values
dtypes: float64(10)
</snippet></ROW><ROW><id>11321950</id><snippet>from scipy import stats as st</snippet></ROW><ROW><id>11321950</id><snippet>import scipy.stats</snippet></ROW><ROW><id>11321950</id><snippet>import scipy; scipy.stats.sem</snippet></ROW><ROW><id>11321950</id><snippet>&gt;&gt;&gt; from scipy import stats as st
&gt;&gt;&gt; import pandas
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; df_list = []
&gt;&gt;&gt; for ii in range(10):
...     df_list.append(pandas.DataFrame(np.random.rand(10,3), 
...     columns = ['A', 'B', 'C']))
... 
&gt;&gt;&gt; df_list
# Suppressed the output cause it was big.

&gt;&gt;&gt; testDF = (pandas.concat(df_list, axis=1, keys=range(len(df_list)))
...     .swaplevel(0, 1, axis=1)
...     .sortlevel(axis=1)
...     .groupby(level=0, axis=1))
&gt;&gt;&gt; testDF
&lt;pandas.core.groupby.DataFrameGroupBy object at 0x38524d0&gt;
&gt;&gt;&gt; testDF.aggregate(np.mean)
key_0         A         B         C
0      0.660324  0.408377  0.374681
1      0.459768  0.345093  0.432542
2      0.498985  0.443794  0.524327
3      0.605572  0.563768  0.558702
4      0.561849  0.488395  0.592399
5      0.466505  0.433560  0.408804
6      0.561591  0.630218  0.543970
7      0.423443  0.413819  0.486188
8      0.514279  0.479214  0.534309
9      0.479820  0.506666  0.449543
&gt;&gt;&gt; testDF.aggregate(np.var)
key_0         A         B         C
0      0.093908  0.095746  0.055405
1      0.075834  0.077010  0.053406
2      0.094680  0.092272  0.095552
3      0.105740  0.126101  0.099316
4      0.087073  0.087461  0.111522
5      0.105696  0.110915  0.096959
6      0.082860  0.026521  0.075242
7      0.100512  0.051899  0.060778
8      0.105198  0.100027  0.097651
9      0.082184  0.060460  0.121344
&gt;&gt;&gt; testDF.aggregate(st.sem)
          A         B         C
0  0.089278  0.087590  0.095891
1  0.088552  0.081365  0.098071
2  0.087968  0.116361  0.076837
3  0.110369  0.087563  0.096460
4  0.101328  0.111676  0.046567
5  0.085044  0.099631  0.091284
6  0.113337  0.076880  0.097620
7  0.087243  0.087664  0.118925
8  0.080569  0.068447  0.106481
9  0.110658  0.071082  0.084928
</snippet></ROW><ROW><id>11322099</id><snippet>dims = []
while isinstance(matrix, list) and matrix is not None:
    dims.append(len(matrix))
    matrix = matrix[0]
number_of_dimensions = len(dims)
</snippet></ROW><ROW><id>11322148</id><snippet>operator.attrgetter</snippet></ROW><ROW><id>11322148</id><snippet>class Foo: pass
f = Foo()
f.bar = Foo()
f.bar.baz = Foo()
f.bar.baz.quux = "Found me!"

import operator
print operator.attrgetter("bar.baz.quux")(f)     # prints "Found me!"
</snippet></ROW><ROW><id>11322239</id><snippet>class widget1(QtGui.QWidget):
    def __init__(self):
        super(widget1, self).__init__()

    def foo(self): pass
    def bar(self): pass

class widget2(widget1):
    def __init__(self):
        super(widget2, self).__init__()

    def foo(self): print "foo"
    def baz(self): pass
</snippet></ROW><ROW><id>11322239</id><snippet>class widget2(QtGui.QWidget):
    def __init__(self):
        super(widget2, self).__init__()
        self.widget1 = widget1()
</snippet></ROW><ROW><id>11322239</id><snippet>class widget1(QtGui.QWidget):
    def __init__(self):
        super(widget1, self).__init__()

    def foo(self): print "foo"
    def bar(self): pass

class MixinClass(object):
    def someMethod(self):
        print "FOO"

class widget2(widget1, MixinClass):
    def __init__(self):
        super(widget2, self).__init__()

    def bar(self): self.foo()
    def baz(self): self.someMethod()
</snippet></ROW><ROW><id>11323187</id><snippet>ar_view = ar.view((ar.dtype[0], len(ar.dtype.names)))
</snippet></ROW><ROW><id>11323187</id><snippet>print ar_view.min(axis=0)  # Or whatever…
</snippet></ROW><ROW><id>11323187</id><snippet>ar_view</snippet></ROW><ROW><id>11323187</id><snippet>ar</snippet></ROW><ROW><id>11323187</id><snippet>axis=0</snippet></ROW><ROW><id>11323372</id><snippet>numBook = self.request.get("numBook"),
numInitialPage = self.request.get("numInitialPage"),
numFinalPage = self.request.get("numFinalPage"),
</snippet></ROW><ROW><id>11323664</id><snippet>ValueError: Item type ReferenceProperty is not acceptable</snippet></ROW><ROW><id>11323664</id><snippet>influencedBy = db.ListProperty(db.Key)</snippet></ROW><ROW><id>11323664</id><snippet>influencedBy = ndb.KeyProperty(kind=Author,repeated=True)</snippet></ROW><ROW><id>11323664</id><snippet>influencedBy</snippet></ROW><ROW><id>11323664</id><snippet>influenced</snippet></ROW><ROW><id>11323704</id><snippet>import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse

fig=plt.figure(1)
ax1=fig.add_subplot(111)
plt.xlim([0,5])
plt.ylim([0,10])
ax1.errorbar([2.5], [5], yerr=[1], fmt="o", color="black", ms=0.1, zorder=1)
ax1.add_artist(Ellipse((2.5, 5), 1, 1, facecolor="green", edgecolor="black",zorder=2))

plt.show()

exit(0)
</snippet></ROW><ROW><id>11323950</id><snippet>sprintf</snippet></ROW><ROW><id>11323950</id><snippet>%</snippet></ROW><ROW><id>11323950</id><snippet>.format</snippet></ROW><ROW><id>11323950</id><snippet>headerInfo = '%d' % packetLength
# or,
headerInfo = '{0:d}'.format(packetLength)
# or even
headerInfo = str(packetLength)
</snippet></ROW><ROW><id>11323950</id><snippet>memset</snippet></ROW><ROW><id>11323950</id><snippet>headerInfo = '\0' * 32
</snippet></ROW><ROW><id>11323950</id><snippet>headerInfo = str(packetLength)
headerInfo += '\0' * (32 - len(headerInfo)) # pad the string
dataBuffer = headerInfo + data
</snippet></ROW><ROW><id>11323950</id><snippet>struct</snippet></ROW><ROW><id>11323950</id><snippet>import struct
dataBuffer = struct.pack('32ss', str(packetLength), data)
</snippet></ROW><ROW><id>11323950</id><snippet>32s</snippet></ROW><ROW><id>11324414</id><snippet>//</snippet></ROW><ROW><id>11324414</id><snippet>re</snippet></ROW><ROW><id>11324414</id><snippet>import re
if re.match('(exp_last_activity|exp_tracker|ci_session)', header_string):
  # do something
</snippet></ROW><ROW><id>11324491</id><snippet>{% for post in posts %}
    {% if user in post.likes.distinct %}
        You like this post
    {% else %}
        &lt;a&gt;Click here to like this post&lt;/a&gt;
    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>11324549</id><snippet>download_files()</snippet></ROW><ROW><id>11324549</id><snippet>downloads</snippet></ROW><ROW><id>11324549</id><snippet>temp_path</snippet></ROW><ROW><id>11324553</id><snippet>class GoldRoom(Room):

    # here the user will be asked with question on how much Gold he wants

    print"This room is full of gold. How much do you take!"
</snippet></ROW><ROW><id>11324553</id><snippet>class GoldRoom(Room):

    # here the user will be asked with question on how much Gold he wants
    def gold_room(self):
        print"This room is full of gold. How much do you take!"

        next = raw_input("&gt; ")

        if "0" in next or "1" in next:
            how_much = int(next)
            print how_much
        else:
            dead("Man, learn to type some number")

        if how_much &lt; 50:
            print "Nice, you are not greedy, you win!"
            exit(0)

        else:
            dead("You greedy bastard!")
</snippet></ROW><ROW><id>11324675</id><snippet>tree</snippet></ROW><ROW><id>11324675</id><snippet>tree.render()</snippet></ROW><ROW><id>11324675</id><snippet>Tree</snippet></ROW><ROW><id>11324771</id><snippet>hash()</snippet></ROW><ROW><id>11324771</id><snippet>id()</snippet></ROW><ROW><id>11324771</id><snippet>hash()</snippet></ROW><ROW><id>11324771</id><snippet>hash(x)==id(x)/16</snippet></ROW><ROW><id>11325249</id><snippet>import sys

class Tee(object):
    def __init__(self, *files):
        self.files = files
    def write(self, obj):
        for f in self.files:
            f.write(obj)

f = open('out.txt', 'w')
original = sys.stdout
sys.stdout = Tee(sys.stdout, f)
print "test"  # This will go to stdout and the file out.txt

#use the original
sys.stdout = original
print "This won't appear on file"  # Only on stdout
f.close()
</snippet></ROW><ROW><id>11325249</id><snippet>print&gt;&gt;xyz</snippet></ROW><ROW><id>11325249</id><snippet>write()</snippet></ROW><ROW><id>11325249</id><snippet>xyz</snippet></ROW><ROW><id>11325249</id><snippet>&gt;&gt;xyz</snippet></ROW><ROW><id>11325275</id><snippet>import itertools
def commons(exprs):
    groups = []
    for n in range(2, len(exprs)+1):
        for comb in itertools.combinations(exprs, n):
            common = set.intersection(*map(set, comb))
            if common:
                groups.append(
                            (len(common), n, comb, ''.join(common)))
    return sorted(groups, reverse=True)

&gt;&gt;&gt; exprs
['ABC', 'BCD', 'DE', 'ABCE']

&gt;&gt;&gt; commons(exprs)
[(3, 2, ('ABC', 'ABCE'), 'ACB'),
 (2, 3, ('ABC', 'BCD', 'ABCE'), 'CB'),
 (2, 2, ('BCD', 'ABCE'), 'CB'),
 (2, 2, ('ABC', 'BCD'), 'CB'),
 (1, 2, ('DE', 'ABCE'), 'E'),
 (1, 2, ('BCD', 'DE'), 'D')]
</snippet></ROW><ROW><id>11325707</id><snippet>import pylab as pl
data = pl.random((25,25)) # 25x25 matrix of values
pl.pcolor(data)
pl.colorbar()
pl.show()
</snippet></ROW><ROW><id>11325738</id><snippet>totals</snippet></ROW><ROW><id>11325738</id><snippet>totals = [[0]*3]*len(target_category_set) 
</snippet></ROW><ROW><id>11325738</id><snippet>In [1]: l = [[1, 2]]*3

In [2]: l
Out[2]: [[1, 2], [1, 2], [1, 2]]

In [3]: l[0].append(3)

In [4]: l
Out[4]: [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
</snippet></ROW><ROW><id>11325738</id><snippet>In [5]: l = [[1, 2] for _ in range(3)]

In [6]: l[0].append(3)

In [7]: l
Out[7]: [[1, 2, 3], [1, 2], [1, 2]]
</snippet></ROW><ROW><id>11325771</id><snippet>diff</snippet></ROW><ROW><id>11325926</id><snippet>__init__.py</snippet></ROW><ROW><id>11325926</id><snippet>from bar import spam</snippet></ROW><ROW><id>11326258</id><snippet>chunkFromFile</snippet></ROW><ROW><id>11326258</id><snippet>bytes</snippet></ROW><ROW><id>11326258</id><snippet>bytes</snippet></ROW><ROW><id>11326258</id><snippet>.split()</snippet></ROW><ROW><id>11326258</id><snippet>mylist = chunkFromFile.split(b'\x00')
</snippet></ROW><ROW><id>11326258</id><snippet>&gt;&gt;&gt; chunkFromFile = bytes((123,45,0,67,89))
&gt;&gt;&gt; chunkFromFile
b'{-\x00CY'
&gt;&gt;&gt; chunkFromFile.split(b'\x00')
[b'{-', b'CY']
&gt;&gt;&gt; chunkFromFile.split('\x00')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Type str doesn't support the buffer API
</snippet></ROW><ROW><id>11326367</id><snippet>if not href.startswith('http://'</snippet></ROW><ROW><id>11326367</id><snippet>if not href.startswith('http://'):</snippet></ROW><ROW><id>11326537</id><snippet>$http_proxy</snippet></ROW><ROW><id>11326537</id><snippet>unset http_proxy</snippet></ROW><ROW><id>11326763</id><snippet>g2 = [elem[:12] for elem in g]
</snippet></ROW><ROW><id>11326763</id><snippet>g</snippet></ROW><ROW><id>11326763</id><snippet>g[:] = (elem[:12] for elem in g)
</snippet></ROW><ROW><id>11326763</id><snippet>&gt;&gt;&gt; g = ['abc', 'defg', 'lolololol']
&gt;&gt;&gt; g[:] = (elem[:2] for elem in g)
&gt;&gt;&gt; g
['ab', 'de', 'lo']
</snippet></ROW><ROW><id>11326858</id><snippet>forloop.counter</snippet></ROW><ROW><id>11326858</id><snippet>def filteriternum(seq):
    num = 0
    for item in seq:
        if not item:
            continue
        num += 1
        yield num, item
</snippet></ROW><ROW><id>11327077</id><snippet>class</snippet></ROW><ROW><id>11327077</id><snippet>type</snippet></ROW><ROW><id>11327077</id><snippet>class</snippet></ROW><ROW><id>11327077</id><snippet>class</snippet></ROW><ROW><id>11327077</id><snippet>class MyInfoForm(forms.Form):
    firstname = forms.CharField(label=u' First name :', max_length=30)
    def __init__(self, *args,**kwargs):
        self.flag= kwargs.pop('flag', None)
        super(MyInfoForm, self).__init__(*args, **kwargs)
        if self.flag:
            # XXX IMPORTANT : 
            # you want to access self.fields['fieldname']                
            # NOT self.fieldname
            self.fields["firstname"].label = "Yadda"
</snippet></ROW><ROW><id>11328093</id><snippet>    s = line.split()  # there's a tab at the start of the line
    array.append( s[0] )  # spaces at the start of the line
</snippet></ROW><ROW><id>11328093</id><snippet>with</snippet></ROW><ROW><id>11328093</id><snippet>close()</snippet></ROW><ROW><id>11328093</id><snippet>array = []
with open( sys.argv[1], "r" ) as ins:  # "r" really not needed, it's the default.
   for line in ins:
      s = line.split()
      # etc...
</snippet></ROW><ROW><id>11328109</id><snippet>countries = [
    {'name': 'Australia', 'population': 21, 'tz': 'UTC +10', 'visits': 1},
    {'name': 'Germany', 'population': 81, 'tz': 'UTC +1', 'visits': 2},
    {'name': 'Mexico', 'population': 107, 'tz': 'UTC -6', 'visits': 0},
]

template = """
&lt;select&gt;
&lt;option{% if record.visits = 0%} selected {% endif %}&gt;0
&lt;option{% if record.visits = 1%} selected {% endif %}&gt;1
&lt;option{% if record.visits = 2%} selected {% endif %}&gt;2
&lt;/select&gt;
"""

class CountryTable(tables.Table):
    name = tables.Column()
    population = tables.Column()
    tz = tables.Column(verbose_name='time zone')
    visits = tables.TemplateColumn(template)
</snippet></ROW><ROW><id>11328269</id><snippet>sip</snippet></ROW><ROW><id>11328269</id><snippet>sip</snippet></ROW><ROW><id>11328269</id><snippet>import sip

a = QProgressBar()
sip.isdeleted(a)
False

sip.delete(a)
a
&lt;PyQt4.QtCore.QObject object at 0x017CCA98&gt;

sip.isdeleted(a)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
RuntimeError: underlying C/C++ object has been deleted
</snippet></ROW><ROW><id>11328385</id><snippet>"""\\"Axis of Awesome\\""""
</snippet></ROW><ROW><id>11328385</id><snippet>"""</snippet></ROW><ROW><id>11328385</id><snippet>"</snippet></ROW><ROW><id>11328385</id><snippet>&gt;&gt;&gt; """foo""""bar"
'foobar'
&gt;&gt;&gt; """foo""" "bar"
'foobar'
</snippet></ROW><ROW><id>11328385</id><snippet>"""</snippet></ROW><ROW><id>11328385</id><snippet>r'</snippet></ROW><ROW><id>11328385</id><snippet>"</snippet></ROW><ROW><id>11328385</id><snippet>&gt;&gt;&gt; """\\"Axis of Awesome\\\""""
'\\"Axis of Awesome\\"'
&gt;&gt;&gt; r'\"Axis of Awesome\"'
'\\"Axis of Awesome\\"'
</snippet></ROW><ROW><id>11328422</id><snippet>foo = lambda xy: (xy[1],xy[0])
</snippet></ROW><ROW><id>11328422</id><snippet>def foo(xy):
    x,y = xy
    return (y,x)
</snippet></ROW><ROW><id>11328980</id><snippet>bob = 1
bob = "bob"
</snippet></ROW><ROW><id>11328980</id><snippet>bob=1</snippet></ROW><ROW><id>11328980</id><snippet>type(bob)</snippet></ROW><ROW><id>11328980</id><snippet>int</snippet></ROW><ROW><id>11328980</id><snippet>bob="bob"</snippet></ROW><ROW><id>11328980</id><snippet>str</snippet></ROW><ROW><id>11328980</id><snippet>type</snippet></ROW><ROW><id>11328980</id><snippet>+</snippet></ROW><ROW><id>11328980</id><snippet>+</snippet></ROW><ROW><id>11328980</id><snippet>+</snippet></ROW><ROW><id>11328980</id><snippet>def to_number(x):
    """Try to convert x to a number."""
    if x is None:
        return 0
    # more special cases here
    else:
        return float(x)  # works for numbers and strings

class Foo(object):
    def __add__(self, other):
        other = to_number(other)
        # now do the addition
</snippet></ROW><ROW><id>11329138</id><snippet>def plotGraph(X,Y):
     fignum = random.randint(0,sys.maxint)
     fig = plt.figure(fignum)
     ### Plotting arrangements ###
     return fig
</snippet></ROW><ROW><id>11329138</id><snippet> import matplotlib.pyplot as plt
 ### tempDLStats, tempDLlabels are the argument
 plot1 = plotGraph(tempDLstats, tempDLlabels)
 plot2 = plotGraph(tempDLstats_1, tempDLlabels_1)
 plot3 = plotGraph(tempDLstats_2, tempDLlabels_2)
 plt.show()
 plot1.savefig('plot1.png')
 plot2.savefig('plot2.png')
 plot3.savefig('plot3.png')
</snippet></ROW><ROW><id>11329240</id><snippet>y = [float(i) for i in line.split()]
</snippet></ROW><ROW><id>11329240</id><snippet>float()</snippet></ROW><ROW><id>11329240</id><snippet> float_val = float(string_val)
</snippet></ROW><ROW><id>11329240</id><snippet>string_val</snippet></ROW><ROW><id>11329240</id><snippet>&gt;&gt;&gt; float('3.5')
3.5

&gt;&gt;&gt; float('apple')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for float(): apple
</snippet></ROW><ROW><id>11329425</id><snippet>repr</snippet></ROW><ROW><id>11329425</id><snippet>python-mysql</snippet></ROW><ROW><id>11329425</id><snippet>MySQLdb</snippet></ROW><ROW><id>11329425</id><snippet>&gt;&gt;&gt; print a
Hi I'm XXX . "435"  'sdfsd' 
&gt;&gt;&gt; import MySQLdb
&gt;&gt;&gt; encoded_a = MySQLdb.escape_string(a)
&gt;&gt;&gt; print encoded_a
Hi I\'m XXX . \"435\"  \'sdfsd\' 
</snippet></ROW><ROW><id>11329425</id><snippet>MySQLdb.escape_string</snippet></ROW><ROW><id>11329522</id><snippet>bad</snippet></ROW><ROW><id>11329522</id><snippet>&gt;&gt;&gt; my_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456', 'def-111', 'qwe-111']
&gt;&gt;&gt; bad = ['abc', 'def']
&gt;&gt;&gt; [e for e in bad if e in '\n'.join(my_list)]
['abc', 'def']
</snippet></ROW><ROW><id>11329522</id><snippet>&gt;&gt;&gt; [i for e in bad for i in my_list if e in i]
['abc-123', 'abc-456', 'def-456', 'def-111']
</snippet></ROW><ROW><id>11329522</id><snippet>&gt;&gt;&gt; def f1():
...    [item for item in my_list if any(x in item for x in bad)]
... 
&gt;&gt;&gt; def f2():
...    [i for e in bad for i in my_list if e in i]
... 
&gt;&gt;&gt; timeit.Timer(f1).timeit()
5.062238931655884
&gt;&gt;&gt; timeit.Timer(f2).timeit()
1.35371994972229
</snippet></ROW><ROW><id>11329522</id><snippet>&gt;&gt;&gt; set(my_list)-{i for e in bad for i in my_list if e in i}
{'ghi-789', 'qwe-111'}
</snippet></ROW><ROW><id>11329577</id><snippet>if int(figure) &gt; 18 and d == '1-18' or '1 - 18' or '1- 18' or '1 -18':
</snippet></ROW><ROW><id>11329577</id><snippet>'1 - 18' or '1- 18' or '1 -18'</snippet></ROW><ROW><id>11329577</id><snippet>int(figure)</snippet></ROW><ROW><id>11329577</id><snippet>d</snippet></ROW><ROW><id>11329577</id><snippet>if something or True</snippet></ROW><ROW><id>11329577</id><snippet>in</snippet></ROW><ROW><id>11329577</id><snippet>d</snippet></ROW><ROW><id>11329577</id><snippet>if int(figure) &gt; 18 and d in ('1-18', '1 - 18', '1- 18', '1 -18'):
</snippet></ROW><ROW><id>11329577</id><snippet>elif</snippet></ROW><ROW><id>11329932</id><snippet>objects = {}
a = A(1234)
if a.hash in objects:
    a = objects[a.hash]
objects[a.hash] = a
</snippet></ROW><ROW><id>11329938</id><snippet>pathh='/home/pooja/Desktop/'      #set the base path       
fo = open("/home/pooja/Desktop/xml.txt")
for i in range(len(count)):     #use len(count)
    file = fo.readline()
    file = file.strip()          #use strip()
    find_root_tags(pathh+file,str1,i) #base path+file
    mylist.append((file,count[i]))   #using 'list' as a variable name is not good
</snippet></ROW><ROW><id>11329970</id><snippet>os.exec*()</snippet></ROW><ROW><id>11330044</id><snippet>import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
G = nx.dodecahedral_graph()
pos = nx.spring_layout(G)
ax = plt.gca()
for u,v in G.edges():
    x = [pos[u][0],pos[v][0]]
    y = [pos[u][1],pos[v][1]]
    l = Line2D(x,y,linewidth=8,solid_capstyle='round')
    ax.add_line(l)
ax.autoscale()
plt.show()
</snippet></ROW><ROW><id>11330247</id><snippet>sqlite</snippet></ROW><ROW><id>11330247</id><snippet>write_frame</snippet></ROW><ROW><id>11330247</id><snippet>def write_frame(frame, name=None, con=None, flavor='sqlite'):
    """
    Write records stored in a DataFrame to SQLite. The index will currently be
    dropped
    """
    if flavor == 'sqlite':
        schema = get_sqlite_schema(frame, name)
    else:
        raise NotImplementedError
</snippet></ROW><ROW><id>11330247</id><snippet>write_frame</snippet></ROW><ROW><id>11330247</id><snippet>import pymssql                                                        
conn = pymssql.connect(host='SQL01', user='user', password='password', database='mydatabase')
cur = conn.cursor()                                                   

# frame is your dataframe                                             
wildcards = ','.join(['?'] * len(frame.columns))                      
data = [tuple(x) for x in frame.values]
table_name = 'Table' 

cur.executemany("INSERT INTO %s VALUES(%s)" % (table_name, wildcards), data)
conn.commit()
</snippet></ROW><ROW><id>11330299</id><snippet>import datetime
import pytz

d = datetime.datetime(2012, 1, 1, 0, 0, 0, tzinfo=pytz.utc)
In [54]: d
Out[54]: datetime.datetime(2012, 1, 1, 0, 0, tzinfo=&lt;UTC&gt;)
</snippet></ROW><ROW><id>11330299</id><snippet>ams = pytz.timezone('Europe/Amsterdam')

In [55]: d.astimezone(ams)
Out[55]: datetime.datetime(2012, 1, 1, 1, 0, tzinfo=&lt;DstTzInfo 'Europe/Amsterdam' CET+1:00:00 STD&gt;)

pst = timezone('US/Pacific')
In [118]: d.astimezone(pst)
Out[118]: datetime.datetime(2011, 12, 31, 16, 0, tzinfo=&lt;DstTzInfo 'US/Pacific' PST-1 day, 16:00:00 STD&gt;)
</snippet></ROW><ROW><id>11330299</id><snippet>dd = datetime.datetime(2012, 2, 2, 0, 0)
ams.localize(naive_dt).astimezone(pst)  # set it as 'ams' first, then convert to pst
Out[131]: datetime.datetime(2012, 2, 1, 15, 0, tzinfo=&lt;DstTzInfo 'US/Pacific' PST-1 day, 16:00:00 STD&gt;)
</snippet></ROW><ROW><id>11330299</id><snippet>In [137]: ams.utcoffset(datetime.datetime(2012,1,1))
Out[137]: datetime.timedelta(0, 3600)

In [138]: pst.utcoffset(datetime.datetime(2012,1,1))
Out[138]: datetime.timedelta(-1, 57600)
</snippet></ROW><ROW><id>11330299</id><snippet>datetime(2002, 10, 27, 12, 0, 0, tzinfo=amsterdam)
</snippet></ROW><ROW><id>11330437</id><snippet>profiel.meetings[0].code</snippet></ROW><ROW><id>11330631</id><snippet>pytz.FixedOffset(-8*60)</snippet></ROW><ROW><id>11330977</id><snippet>cmd ='/usr/bin/rcssserver'
#                ^^^ Too many s's
</snippet></ROW><ROW><id>11330977</id><snippet>cron</snippet></ROW><ROW><id>11330977</id><snippet>0,15,30,45</snippet></ROW><ROW><id>11330977</id><snippet>*/15</snippet></ROW><ROW><id>11330977</id><snippet>*/1</snippet></ROW><ROW><id>11330977</id><snippet>*</snippet></ROW><ROW><id>11331108</id><snippet>b1 = wx.Button(self.panel, label="TEXT1")
</snippet></ROW><ROW><id>11331130</id><snippet>((?&lt;![a-z\'\"])|(?&lt;=\'{3}))foo((?![a-z\'\"])|(?=\'{3}))
</snippet></ROW><ROW><id>11331137</id><snippet>subprocess.call([cmd1, cmd2], cwd=path)
</snippet></ROW><ROW><id>11331137</id><snippet>communicate</snippet></ROW><ROW><id>11331137</id><snippet>proc = subprocess.Popen([cmd1, cmd2], stdout=subprocess.PIPE, cwd=path)
for ln in proc.stdout:
    process(ln)
</snippet></ROW><ROW><id>11331282</id><snippet>abarnert</snippet></ROW><ROW><id>11331360</id><snippet>Network</snippet></ROW><ROW><id>11331360</id><snippet>/json/browse/music?g=Dance%2FElectronic&amp;select=n7</snippet></ROW><ROW><id>11331360</id><snippet>Network</snippet></ROW><ROW><id>11331512</id><snippet>short_name</snippet></ROW><ROW><id>11331512</id><snippet>&lt;dl&gt;
{% for field in form %}
&lt;dt&gt;{{field.label}}&lt;/dt&gt;
&lt;dd&gt;{{field(class_=field.short_name)}}&lt;/dd&gt;
{% endfor %}
&lt;/dl&gt;
</snippet></ROW><ROW><id>11331512</id><snippet>class ClassedWidgetMixin(object):
    """Adds the field's name as a class 
    when subclassed with any WTForms Field type.

    Has not been tested - may not work."""
    def __init__(self, *args, **kwargs):
        super(ClassedWidgetMixin, self).__init__(*args, **kwargs)

    def __call__(self, field, **kwargs):
        c = kwargs.pop('class', '') or kwargs.pop('class_', '')
        kwargs['class'] = u'%s %s' % (field.short_name, c)
        return super(ClassedWidgetMixin, self).__call__(field, **kwargs)

# An example
class ClassedTextField(TextField, ClassedWidgetMixin):
    pass

class Company(Form):
    companyName = ClassedTextField('Company Name', [validators.Length(min=3, max=60)])
</snippet></ROW><ROW><id>11331560</id><snippet>(name, price, expiryDate)</snippet></ROW><ROW><id>11331560</id><snippet>(name, price, expiryDate)</snippet></ROW><ROW><id>11331750</id><snippet>ad_medium.id = int( parts[0] )</snippet></ROW><ROW><id>11331750</id><snippet>class Ad_Medium(object):
    def __init__(self):
        self.id = 0
        self.categories = { 1:0.0, 2:0.0, 3:0.0, 4:0.0, 5:0.0, 6:0.0, 7:0.0 }
        self.impressions = { 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0  } 
</snippet></ROW><ROW><id>11331784</id><snippet>def match_class(target):
    target = target.split()
    def do_match(tag):
        try:
            classes = dict(tag.attrs)["class"]
        except KeyError:
            classes = ""
        classes = classes.split()
        return all(c in classes for c in target)
    return do_match

html = """&lt;div class="feeditemcontent cxfeeditemcontent"&gt;
&lt;div class="feeditembodyandfooter"&gt;
&lt;div class="feeditembody"&gt;
&lt;span&gt;The actual data is some where here&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;"""

from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(html)

matches = soup.findAll(match_class("feeditemcontent cxfeeditemcontent"))
for m in matches:
    print m
    print "-"*10

matches = soup.findAll(match_class("feeditembody"))
for m in matches:
    print m
    print "-"*10
</snippet></ROW><ROW><id>11331808</id><snippet>s = "\\"
</snippet></ROW><ROW><id>11331957</id><snippet>return super(Test, cls).__new__(cls, *args, **kwargs)
</snippet></ROW><ROW><id>11331957</id><snippet>super</snippet></ROW><ROW><id>11331957</id><snippet>object</snippet></ROW><ROW><id>11331957</id><snippet>super</snippet></ROW><ROW><id>11331965</id><snippet>lss = reduce(lambda acc, ele : acc + ele, [[1],[2]], [])

lss
&gt; [1, 2]
</snippet></ROW><ROW><id>11331965</id><snippet>extend()</snippet></ROW><ROW><id>11331965</id><snippet>None</snippet></ROW><ROW><id>11331965</id><snippet>NoneType</snippet></ROW><ROW><id>11331965</id><snippet>reduce()</snippet></ROW><ROW><id>11332078</id><snippet>build</snippet></ROW><ROW><id>11332078</id><snippet>class my_build(build):
    def run(self):
        self.run_command("build_qt")
        build.run(self)

cmdclass['build'] = my_build
</snippet></ROW><ROW><id>11332129</id><snippet>cv2</snippet></ROW><ROW><id>11332129</id><snippet>cv2.CV_64F</snippet></ROW><ROW><id>11332129</id><snippet>cv2.IPL_DEPTH_64F</snippet></ROW><ROW><id>11332129</id><snippet>cv2.CV_32F</snippet></ROW><ROW><id>11332129</id><snippet>cv2.IPL_DEPTH_32F</snippet></ROW><ROW><id>11332129</id><snippet>cv2.CV_32S</snippet></ROW><ROW><id>11332129</id><snippet>cv2.IPL_DEPTH_32S</snippet></ROW><ROW><id>11332129</id><snippet>cv2.CV_16S</snippet></ROW><ROW><id>11332129</id><snippet>cv2.IPL_DEPTH_16S</snippet></ROW><ROW><id>11332129</id><snippet>cv2.CV_16U</snippet></ROW><ROW><id>11332129</id><snippet>cv2.IPL_DEPTH_16U</snippet></ROW><ROW><id>11332129</id><snippet>cv2.CV_8S</snippet></ROW><ROW><id>11332129</id><snippet>cv2.IPL_DEPTH_8S</snippet></ROW><ROW><id>11332129</id><snippet>cv2.CV_8U</snippet></ROW><ROW><id>11332129</id><snippet>cv2.IPL_DEPTH_8U</snippet></ROW><ROW><id>11332150</id><snippet>from django.db import models
from datetime import datetime
from time import strftime
#
# Custom field types in here.
#
class UnixTimestampField(models.DateTimeField):
    """UnixTimestampField: creates a DateTimeField that is represented on the
    database as a TIMESTAMP field rather than the usual DATETIME field.
    """
    def __init__(self, null=False, blank=False, **kwargs):
        super(UnixTimestampField, self).__init__(**kwargs)
        # default for TIMESTAMP is NOT NULL unlike most fields, so we have to
        # cheat a little:
        self.blank, self.isnull = blank, null
        self.null = True # To prevent the framework from shoving in "not null".

    def db_type(self, connection):
        typ=['TIMESTAMP']
        # See above!
        if self.isnull:
            typ += ['NULL']
        if self.auto_created:
            typ += ['default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP']
        return ' '.join(typ)

    def to_python(self, value):
        return datetime.from_timestamp(value)

    def get_db_prep_value(self, value, connection, prepared=False):
        if value==None:
            return None
        return strftime('%Y%m%d%H%M%S',value.timetuple())

    def to_python(self, value):
        return value
</snippet></ROW><ROW><id>11332150</id><snippet>timestamp = UnixTimestampField(auto_created=True)</snippet></ROW><ROW><id>11332150</id><snippet>'timestamp' timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</snippet></ROW><ROW><id>11332245</id><snippet>from urllib2 import urlopen
f = urlopen('http://localhost:8000')
for line in f:
    print line
</snippet></ROW><ROW><id>11332375</id><snippet>(t) -&gt; (x,y)</snippet></ROW><ROW><id>11332375</id><snippet>t</snippet></ROW><ROW><id>11332375</id><snippet>0..2pi</snippet></ROW><ROW><id>11332375</id><snippet>from numpy import cos,sin,arccos
import numpy as np

def parametric_circle(t,xc,yc,R):
    x = xc + R*cos(t)
    y = yc + R*sin(t)
    return x,y

def inv_parametric_circle(x,xc,R):
    t = arccos((x-xc)/R)
    return t

N = 30
R = 3
xc = 1.0
yc = 3.0

start_point = (xc + R*cos(.3), yc + R*sin(.3))
end_point   = (xc + R*cos(2.2), yc + R*sin(2.2))


start_t = inv_parametric_circle(start_point[0], xc, R)
end_t   = inv_parametric_circle(end_point[0], xc, R)

arc_T = np.linspace(start_t, end_t, N)

from pylab import *
X,Y = parametric_circle(arc_T, xc, yc, R)
plot(X,Y)
scatter(X,Y)
scatter([xc],[yc],color='r',s=100)
axis('equal')
show()
</snippet></ROW><ROW><id>11332387</id><snippet>itertools.chain.from_iterable(itertools.starmap(open, itertools.repeat(("filename",))))
</snippet></ROW><ROW><id>11332387</id><snippet>itertools.chain.from_iterable(itertools.starmap(lambda: open("filename"), itertools.repeat(())))
</snippet></ROW><ROW><id>11332387</id><snippet>(line for _ in itertools.repeat(()) for line in open("filename"))
</snippet></ROW><ROW><id>11332387</id><snippet>def cycle_file(filename):
    while True:
        for line in open(filename):
            yield line
</snippet></ROW><ROW><id>11332387</id><snippet>def cycle_file(filename):
    while True:
        yield from open(filename)
</snippet></ROW><ROW><id>11332387</id><snippet>close</snippet></ROW><ROW><id>11332387</id><snippet>with</snippet></ROW><ROW><id>11332387</id><snippet>def cycle_file(filename):
    while True:
        with open(filename) as f:
            for line in f:
                yield line
</snippet></ROW><ROW><id>11332387</id><snippet>def cycle_file(filename):
    while True:
        with open(filename) as f:
            yield from f
</snippet></ROW><ROW><id>11332387</id><snippet>(line for f in (itertools.chain(f, (f for f in (f,) if f.close() and False))
                for f in (open("filename") for _ in itertools.repeat(())))
 for line in f)
</snippet></ROW><ROW><id>11332387</id><snippet>open</snippet></ROW><ROW><id>11332387</id><snippet>StopIteration</snippet></ROW><ROW><id>11332580</id><snippet>import re
text = re.sub(r'^https?:\/\/.*[\r\n]*', '', text, flags=re.MULTILINE)
</snippet></ROW><ROW><id>11332580</id><snippet>text1
text2
text3
text4
text5
text6
</snippet></ROW><ROW><id>11332581</id><snippet>np.argmax(np.max(x, axis=1))
</snippet></ROW><ROW><id>11332581</id><snippet>np.argmax(np.max(x, axis=0))
</snippet></ROW><ROW><id>11332613</id><snippet>&gt;&gt;&gt; import twitter
&gt;&gt;&gt; api = twitter.Api(
            consumer_key='yourConsumerKey',
            consumer_secret='consumerSecret',
            access_token_key='accessToken',
            access_token_secret='accessTokenSecret')
&gt;&gt;&gt; api.PostUpdate('Blah blah lbah!')
</snippet></ROW><ROW><id>11332613</id><snippet>User-Agent</snippet></ROW><ROW><id>11332640</id><snippet>0  1  2  3  4  5  6  7  8  9 -1 -2 -3 -4 -5 -6 -7 -8 -9
</snippet></ROW><ROW><id>11332640</id><snippet>0</snippet></ROW><ROW><id>11332640</id><snippet>n/2</snippet></ROW><ROW><id>11332640</id><snippet>n</snippet></ROW><ROW><id>11332640</id><snippet>0  _  1  _  2  _  3  _  4  _  4  _  3  _  2  _  1  _  0
</snippet></ROW><ROW><id>11332640</id><snippet>0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
</snippet></ROW><ROW><id>11332640</id><snippet>9</snippet></ROW><ROW><id>11332688</id><snippet>from django.db.models import Count
most_common = Ingredient.objects.annotate(num_recipes=Count('recipe')).order_by('-num_recipes')[0]
print most_common.name
</snippet></ROW><ROW><id>11332699</id><snippet>from lxml import objectify

root = objectify.fromstring("""
 &lt;root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
   &lt;a attr1="foo" attr2="bar"&gt;1&lt;/a&gt;
   &lt;a&gt;1.2&lt;/a&gt;
   &lt;b&gt;1&lt;/b&gt;
   &lt;b&gt;true&lt;/b&gt;
   &lt;c&gt;what?&lt;/c&gt;
   &lt;d xsi:nil="true"/&gt;
 &lt;/root&gt;
""")

print objectify.dump(root)
</snippet></ROW><ROW><id>11332699</id><snippet>root = None [ObjectifiedElement]
    a = 1 [IntElement]
      * attr1 = 'foo'
      * attr2 = 'bar'
    a = 1.2 [FloatElement]
    b = 1 [IntElement]
    b = True [BoolElement]
    c = 'what?' [StringElement]
    d = None [NoneElement]
      * xsi:nil = 'true'
</snippet></ROW><ROW><id>11332901</id><snippet>Entrez.read()</snippet></ROW><ROW><id>11332901</id><snippet>ListElement</snippet></ROW><ROW><id>11332901</id><snippet>DictionaryElement</snippet></ROW><ROW><id>11332901</id><snippet>read</snippet></ROW><ROW><id>11332901</id><snippet>def read(handle, validate=True):

This function parses an XML file created by NCBI's Entrez Utilities,
returning a multilevel data structure of Python lists and dictionaries.
...
the[se] data structure[s] seem to consist of generic Python lists,
dictionaries, strings, and so on, [but] each of these is actually a class
derived from the base type. This allows us to store the attributes
(if any) of each element in a dictionary my_element.attributes, and
the tag name in my_element.tag.
</snippet></ROW><ROW><id>11332901</id><snippet>Parser.py</snippet></ROW><ROW><id>11332901</id><snippet>ListElement</snippet></ROW><ROW><id>11332901</id><snippet>DictionaryElement</snippet></ROW><ROW><id>11332901</id><snippet>Entrez</snippet></ROW><ROW><id>11332901</id><snippet>ListElement</snippet></ROW><ROW><id>11332901</id><snippet>DictionaryElement</snippet></ROW><ROW><id>11332901</id><snippet>StructureElement</snippet></ROW><ROW><id>11332901</id><snippet>attributes</snippet></ROW><ROW><id>11332901</id><snippet>read</snippet></ROW><ROW><id>11332901</id><snippet>DictionaryElement</snippet></ROW><ROW><id>11332901</id><snippet>&gt;&gt;&gt; d
DictElement({'first_name': 'Russell', 'last_name': 'Jones'}, attributes={'occupation': 'entertainer'})
</snippet></ROW><ROW><id>11332901</id><snippet>first_name</snippet></ROW><ROW><id>11332901</id><snippet>&gt;&gt;&gt; d['first_name']
'Russell'
&gt;&gt;&gt; d.get('first_name')
'Russell'
&gt;&gt;&gt; d.get('middle_name', 'No Middle Name')
'No Middle Name'
</snippet></ROW><ROW><id>11332940</id><snippet>message = ''
if 'form.submitted' in request.params:#form.submitted being the name of the submit of the form
    #check if email exists
    if exists:
         message = 'email already registered'
    else:
         message = 'success'
return dict(message = message)
</snippet></ROW><ROW><id>11332994</id><snippet>__str__</snippet></ROW><ROW><id>11332994</id><snippet>__repr__</snippet></ROW><ROW><id>11332994</id><snippet>&gt;&gt;&gt; class Foo():
...     def __init__(self, name):
...          self.name = name
...     def __str__(self):
...          return '&lt;Foo name=%s&gt;' % self.name
...     def __repr__(self):
...          return str(self)
... 
&gt;&gt;&gt; f = Foo('bar')
&gt;&gt;&gt; f
&lt;Foo name=bar&gt;
</snippet></ROW><ROW><id>11333058</id><snippet>except (OSError, IOError):
    #some code
</snippet></ROW><ROW><id>11333263</id><snippet>C:\Program Files\OpenLibraries\python;C:\opus\src;C:\PopGen;C:\QGIS\python;
C:\Python25\Lib\site-packages\django
</snippet></ROW><ROW><id>11333263</id><snippet>C:\Program Files\OpenLibraries\python;C:\opus\src;C:\PopGen;
C:\Python25\Lib\site-packages\django
</snippet></ROW><ROW><id>11333276</id><snippet>RequestConfig</snippet></ROW><ROW><id>11333276</id><snippet>RequestConfig</snippet></ROW><ROW><id>11333276</id><snippet>request.GET</snippet></ROW><ROW><id>11333276</id><snippet>from django_tables2 import RequestConfig

def show_mymodels(request):
    table = MyModelTable(MyModel.objects.all())
    RequestConfig(request).configure(table)
    return render(request, 'mymodel.html', {'table': table})
</snippet></ROW><ROW><id>11333470</id><snippet>return json.dumps(return_info)</snippet></ROW><ROW><id>11333470</id><snippet> return_info = [record.file_id, record.filename, record.links_to]
</snippet></ROW><ROW><id>11333470</id><snippet>json.dumps({'file_id': record.file_id, 'filename': record.filename , 'links_to' : record.links_to})
</snippet></ROW><ROW><id>11333470</id><snippet>[object Object]</snippet></ROW><ROW><id>11333470</id><snippet>alert(data)</snippet></ROW><ROW><id>11333470</id><snippet>alert(data.file_id);</snippet></ROW><ROW><id>11333593</id><snippet>{ % for l in list1 %}
</snippet></ROW><ROW><id>11333593</id><snippet>{% for l in list1 %}
</snippet></ROW><ROW><id>11333593</id><snippet>{ % endfor %}
</snippet></ROW><ROW><id>11333593</id><snippet>{% endfor %}
</snippet></ROW><ROW><id>11333702</id><snippet>input.csv</snippet></ROW><ROW><id>11333702</id><snippet>x1, y1, y2, y3, y4
A, 3, 6, 7, 1
B, 4, 5, 9, 0
X, 7, 2, 8, 5
C, 4, 3, 2, 1
</snippet></ROW><ROW><id>11333702</id><snippet>import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('input.csv', delimiter=',', index_col='x1')
df.plot(marker='s')
plt.show()
</snippet></ROW><ROW><id>11333853</id><snippet>&lt;form  method="post" action=""&gt;
</snippet></ROW><ROW><id>11333853</id><snippet>import urlparse

...

    def do_POST(self):
        length = int(self.headers.getheader('content-length'))
        postvars = urlparse.parse_qs(self.rfile.read(length), keep_blank_values=1)
        self.send_response(200)
        self.end_headers()
        self.wfile.write(postvars)
</snippet></ROW><ROW><id>11334100</id><snippet>    elif population == 2 or 3:
</snippet></ROW><ROW><id>11334100</id><snippet>    elif (population == 2) or (3 != 0):
</snippet></ROW><ROW><id>11334100</id><snippet>    elif population == 2 or population == 3:
</snippet></ROW><ROW><id>11334100</id><snippet>    elif population in (2,3):
</snippet></ROW><ROW><id>11334100</id><snippet>EMPTY = '-'
FULL = '*'
if cells_copy[coord] == EMPTY:
    if population == 3:
        cells[coord] = FULL
else:
    if population not in set([2,3]):
        cells[coord] = EMPTY
</snippet></ROW><ROW><id>11334100</id><snippet># Make sure everything in `cells` is a string
ESC = chr(27)

for y in xrange(20):
    outp = (cells['x{}y{}'.format(x,y)] for x in xrange(60))
    print('{}[{};{}f{}'.format(ESC, y, x, ''.join(outp)), end='')
</snippet></ROW><ROW><id>11334100</id><snippet>cells</snippet></ROW><ROW><id>11334100</id><snippet>dict</snippet></ROW><ROW><id>11334100</id><snippet>WIDTH = 60
HEIGHT = 20
cells = [[EMPTY]*WIDTH for y in xrange(HEIGHT)]
</snippet></ROW><ROW><id>11334188</id><snippet>@register.filter
def is_string(val):
    return isinstance(val, basestring)
</snippet></ROW><ROW><id>11334188</id><snippet>&lt;ul&gt; 
{% for whatever in something %}
  &lt;li&gt;
    {% if whatever|is_string %} 
      {{ whatever }}
    {% else %}
    &lt;ul&gt;
      {{ whatever|unordered_list }}
    &lt;/ul&gt;
    {% endif %}
  &lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>11334388</id><snippet>from itertools import izip
import csv

with open('data.txt') as inf, open('data.csv','wb') as outf:
    lines = (line[2:].rstrip() for line in inf)
    rows = (data[1:89] for data in izip(*([lines]*92)))
    csv.writer(outf).writerows(rows)
</snippet></ROW><ROW><id>11334491</id><snippet>&gt;&gt;&gt; [[w for w in L if len(w) == num] for num in set(len(i) for i in L)]
[['a', 'b'], ['ab'], ['abc']]
</snippet></ROW><ROW><id>11334491</id><snippet>itertools</snippet></ROW><ROW><id>11334531</id><snippet>import urllib
from bs4 import BeautifulSoup
import re

url = 'https://thewebsitedownload.com' 

text = urllib.urlopen(url).read()

soup = BeautifulSoup(text)
link = soup.find_all(href=re.compile("dropbox"))[0]['href']
print link
filename = 'filetobedownloaded.exe'
urllib.urlretrieve(link, filename)
</snippet></ROW><ROW><id>11334599</id><snippet>CREATE TABLE whitelist_domain_data(
  id SERIAL PRIMARY KEY,
  url TEXT NOT NULL
);

CREATE INDEX domain_index
  ON whitelist_domain_data (substring(url from 'https?\:\/\/([a-z0-9\.]+)'));

INSERT into whitelist_domain_data (url) VALUES
  ('http://www.dailystrength.org/c/Hidradenitis_Suppurativa/forum/8870995-solodyn-135-mg-works'),
  ('http://au.answers.yahoo.com/question/index?qid=20090325215905AA6UVOa'),
  ('http://navaspot.wordpress.com');

SELECT * FROM whitelist_domain_data WHERE substring(url from 'https?\:\/\/([a-z0-9\.]+)') = 'www.dailystrength.org';
</snippet></ROW><ROW><id>11334599</id><snippet>CREATE FUNCTION get_domain(text) RETURNS text
LANGUAGE SQL
AS $$
  SELECT substring($1 from 'https?\:\/\/([a-z0-9\.]+)');
$$;
</snippet></ROW><ROW><id>11334599</id><snippet>CREATE INDEX domain_index
  ON whitelist_domain_data (get_domain(url));

SELECT * FROM whitelist_domain_data WHERE get_domain(url) = 'www.dailystrength.org';
</snippet></ROW><ROW><id>11334631</id><snippet>Lock</snippet></ROW><ROW><id>11334631</id><snippet>with</snippet></ROW><ROW><id>11334631</id><snippet>...
lock = Lock()
...
with (lock):
  # This code will only be executed by one single thread at a time
  # the lock is released when the thread exits the 'with' block
  ...
</snippet></ROW><ROW><id>11334631</id><snippet>synchronized</snippet></ROW><ROW><id>11334949</id><snippet>self.a</snippet></ROW><ROW><id>11334949</id><snippet>None</snippet></ROW><ROW><id>11334949</id><snippet>def __init__(self, num):
    self.a = self.func(num)  # return value of function is None
    print self.a             # self.a is now None

def func(self, num):
    self.a = range(num)      # sets self.a to [0..19]
    print self.a             # prints [0..19]
    # implicit "return None"
</snippet></ROW><ROW><id>11334950</id><snippet>numpy.array</snippet></ROW><ROW><id>11334950</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>11334950</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.ndarray
&lt;type 'numpy.ndarray'&gt;
&gt;&gt;&gt; numpy.array
&lt;built-in function array&gt;
&gt;&gt;&gt; numpy.array([])
array([], dtype=float64)
&gt;&gt;&gt; isinstance(numpy.array([]), numpy.ndarray)
True
</snippet></ROW><ROW><id>11334985</id><snippet>models.py</snippet></ROW><ROW><id>11334985</id><snippet>DBSession</snippet></ROW><ROW><id>11334985</id><snippet>from pyramid.view import view_config

from .models import (
    DBSession,
    MyModel,
    )

@view_config(route_name='home', renderer='templates/mytemplate.pt')
def my_view(request):
    one = DBSession.query(MyModel).filter(MyModel.name=='one').first()
    return {'one':one, 'project':'tutorial'}
</snippet></ROW><ROW><id>11334985</id><snippet>models.py</snippet></ROW><ROW><id>11334985</id><snippet>from sqlalchemy.orm import (
    scoped_session,
    sessionmaker,
    )

from zope.sqlalchemy import ZopeTransactionExtension

DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))
</snippet></ROW><ROW><id>11334985</id><snippet>ZopeTransactionExtension</snippet></ROW><ROW><id>11334985</id><snippet>.flush</snippet></ROW><ROW><id>11335177</id><snippet>DataFrame['Date']</snippet></ROW><ROW><id>11335177</id><snippet>&gt;&gt;&gt; import numpy as np; import pandas; import datetime

&gt;&gt;&gt; dfrm = pandas.DataFrame(np.random.rand(10,3), 
... columns=['A','B','C'], 
... index = pandas.Index(
... [datetime.date(2012,6,elem) for elem in range(1,11)],
... name="Date"))

&gt;&gt;&gt; dfrm
                   A         B         C
Date                                    
2012-06-01  0.283724  0.863012  0.798891
2012-06-02  0.097231  0.277564  0.872306
2012-06-03  0.821461  0.499485  0.126441
2012-06-04  0.887782  0.389486  0.374118
2012-06-05  0.248065  0.032287  0.850939
2012-06-06  0.101917  0.121171  0.577643
2012-06-07  0.225278  0.161301  0.708996
2012-06-08  0.906042  0.828814  0.247564
2012-06-09  0.733363  0.924076  0.393353
2012-06-10  0.273837  0.318013  0.754807

&gt;&gt;&gt; dfrm['Date']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python2.7/dist-packages/pandas/core/frame.py", line 1458, in __getitem__
    return self._get_item_cache(key)
  File "/usr/local/lib/python2.7/dist-packages/pandas/core/generic.py", line 294, in _get_item_cache
    values = self._data.get(item)
  File "/usr/local/lib/python2.7/dist-packages/pandas/core/internals.py", line 625, in get
    _, block = self._find_block(item)
  File "/usr/local/lib/python2.7/dist-packages/pandas/core/internals.py", line 715, in _find_block
    self._check_have(item)
  File "/usr/local/lib/python2.7/dist-packages/pandas/core/internals.py", line 722, in _check_have
    raise KeyError('no item named %s' % str(item))
KeyError: 'no item named Date'
</snippet></ROW><ROW><id>11335177</id><snippet>&gt;&gt;&gt; dfrm['Date'] = dfrm.index

&gt;&gt;&gt; dfrm
                   A         B         C        Date
Date                                                
2012-06-01  0.283724  0.863012  0.798891  2012-06-01
2012-06-02  0.097231  0.277564  0.872306  2012-06-02
2012-06-03  0.821461  0.499485  0.126441  2012-06-03
2012-06-04  0.887782  0.389486  0.374118  2012-06-04
2012-06-05  0.248065  0.032287  0.850939  2012-06-05
2012-06-06  0.101917  0.121171  0.577643  2012-06-06
2012-06-07  0.225278  0.161301  0.708996  2012-06-07
2012-06-08  0.906042  0.828814  0.247564  2012-06-08
2012-06-09  0.733363  0.924076  0.393353  2012-06-09
2012-06-10  0.273837  0.318013  0.754807  2012-06-10
</snippet></ROW><ROW><id>11335177</id><snippet>&gt;&gt;&gt; dfrm.reindex(pandas.Series(dfrm.index.values, name=''))
                   A         B         C        Date

2012-06-01  0.283724  0.863012  0.798891  2012-06-01
2012-06-02  0.097231  0.277564  0.872306  2012-06-02
2012-06-03  0.821461  0.499485  0.126441  2012-06-03
2012-06-04  0.887782  0.389486  0.374118  2012-06-04
2012-06-05  0.248065  0.032287  0.850939  2012-06-05
2012-06-06  0.101917  0.121171  0.577643  2012-06-06
2012-06-07  0.225278  0.161301  0.708996  2012-06-07
2012-06-08  0.906042  0.828814  0.247564  2012-06-08
2012-06-09  0.733363  0.924076  0.393353  2012-06-09
2012-06-10  0.273837  0.318013  0.754807  2012-06-10
</snippet></ROW><ROW><id>11335177</id><snippet>&gt;&gt;&gt; dfrm.reset_index()
</snippet></ROW><ROW><id>11335177</id><snippet>&gt;&gt;&gt; dfrm.index = range(len(dfrm))

&gt;&gt;&gt; dfrm
          A         B         C        Date
0  0.283724  0.863012  0.798891  2012-06-01
1  0.097231  0.277564  0.872306  2012-06-02
2  0.821461  0.499485  0.126441  2012-06-03
3  0.887782  0.389486  0.374118  2012-06-04
4  0.248065  0.032287  0.850939  2012-06-05
5  0.101917  0.121171  0.577643  2012-06-06
6  0.225278  0.161301  0.708996  2012-06-07
7  0.906042  0.828814  0.247564  2012-06-08
8  0.733363  0.924076  0.393353  2012-06-09
9  0.273837  0.318013  0.754807  2012-06-10
</snippet></ROW><ROW><id>11335177</id><snippet>&gt;&gt;&gt; dfrm.ix[:,[-1]+range(len(dfrm.columns)-1)]
         Date         A         B         C
0  2012-06-01  0.283724  0.863012  0.798891
1  2012-06-02  0.097231  0.277564  0.872306
2  2012-06-03  0.821461  0.499485  0.126441
3  2012-06-04  0.887782  0.389486  0.374118
4  2012-06-05  0.248065  0.032287  0.850939
5  2012-06-06  0.101917  0.121171  0.577643
6  2012-06-07  0.225278  0.161301  0.708996
7  2012-06-08  0.906042  0.828814  0.247564
8  2012-06-09  0.733363  0.924076  0.393353
9  2012-06-10  0.273837  0.318013  0.754807
</snippet></ROW><ROW><id>11335177</id><snippet>###########
# Imports #
###########
import pandas
import datetime
import numpy as np
from dateutil import relativedelta
from pandas.io import data as pdata


############################################
# Functions to retrieve Yahoo finance data #
############################################

# Utility to get generic stock symbol data from Yahoo finance.
# Starts two days prior to present (or most recent business day)
# and goes back a specified number of days.
def getStockSymbolData(sym_list, end_date=datetime.date.today()+relativedelta.relativedelta(days=-1), num_dates = 30):

    dReader = pdata.DataReader
    start_date = end_date + relativedelta.relativedelta(days=-num_dates)
    return dict( (sym, dReader(sym, "yahoo", start=start_date, end=end_date)) for sym in sym_list )                     
###

# Utility function to get some AAPL data when needed
# for testing.
def getAAPL(end_date=datetime.date.today()+relativedelta.relativedelta(days=-1), num_dates = 30):

    dReader = pdata.DataReader
    return getStockSymbolData(['AAPL'], end_date=end_date, num_dates=num_dates)
###
</snippet></ROW><ROW><id>11335177</id><snippet>#####
# Define a 'Stock' class that can hold simple info
# about a security, like SEDOL and CUSIP info. This
# is mainly for debugging things and quickly getting
# info for a single security.
class MyStock():

    def __init__(self, ticker='None', sedol='None', country='None'):
        self.ticker = ticker
        self.sedol=sedol
        self.country = country
    ###


    def getData(self, end_date=datetime.date.today()+relativedelta.relativedelta(days=-1), num_dates = 30):
        return pandas.DataFrame(getStockSymbolData([self.ticker], end_date=end_date, num_dates=num_dates)[self.ticker])
    ###


#####
# Make some default stock objects for common stocks.
AAPL = MyStock(ticker='AAPL', sedol='03783310', country='US')
SAP  = MyStock(ticker='SAP',  sedol='484628',   country='DE')
</snippet></ROW><ROW><id>11335420</id><snippet>__init__.py</snippet></ROW><ROW><id>11335420</id><snippet>from app.models import Result

optionResult = someTestsThatRuns
reverseResult = someOtherTestThatRuns
c = Result()
c.options = optionResult 
c.reverse = reverseResult
c.save()
</snippet></ROW><ROW><id>11335893</id><snippet>&gt;&gt;&gt; rx = regex.compile(r"(?&lt;!#\d{0,3})c99")
&gt;&gt;&gt; rx.findall("#000c99")
[]
&gt;&gt;&gt; rx.findall("/mysite.com/c99.php")
[u'c99']
&gt;&gt;&gt; rx.findall("%20c99.php")
[u'c99']
&gt;&gt;&gt; rx.findall("c99?hi=moo")
[u'c99']
</snippet></ROW><ROW><id>11335940</id><snippet>Game</snippet></ROW><ROW><id>11335940</id><snippet>__init__.py</snippet></ROW><ROW><id>11335940</id><snippet>Game</snippet></ROW><ROW><id>11335940</id><snippet>from ..bin.physics.physics1 import function</snippet></ROW><ROW><id>11335940</id><snippet>resource.py</snippet></ROW><ROW><id>11335940</id><snippet>__main__</snippet></ROW><ROW><id>11335940</id><snippet>__package__</snippet></ROW><ROW><id>11336127</id><snippet>my_list = []
with open('path/to/my/file.txt') as f:
    for line in f:
        words = line.split()
        my_list.append(words[1] + words[3])
print mylist
</snippet></ROW><ROW><id>11336204</id><snippet>file_line</snippet></ROW><ROW><id>11336204</id><snippet>vim -p new main.py:10 module.py:20 another.py:30
</snippet></ROW><ROW><id>11336367</id><snippet>x    y  label
1   12    A
2   13    A
3   15    A
4   29    A
5   23    B
6   23    B
7   23    B
8   90    C
9   83    C
</snippet></ROW><ROW><id>11336367</id><snippet>from itertools import groupby
import matplotlib.pyplot as plt

data = [
    ('A', 12),
    ('A', 13),
    ('A', 15), 
    ('A', 29),
    ('B', 23),
    ('B', 23),
    ('B', 23),
    ('C', 90),
    ('C', 83)
]

labels,ys = zip(*data)
xs = range(len(ys))

def centered(val, ln, empty=''):
    half = (ln - 1) // 2
    return (val if i==half else empty for i in xrange(ln))

def centered_labels(labels):
    return [v for val,grp in groupby(labels) for v in centered(val, len(list(grp)))]

fig = plt.figure()
ax = fig.add_subplot(111)
ax.set_xticklabels(centered_labels(labels))
ax.plot(xs, ys, 'b-', linewidth=3)
</snippet></ROW><ROW><id>11336382</id><snippet>get_close_matches()</snippet></ROW><ROW><id>11336382</id><snippet>def get_target_match(target, targets):
    '''
    Approximates a match for a target from a sequence of targets,
    if a match exists.
    '''
    source, targets = targets, map(str.lower, targets)
    target = target.lower()

    matches = get_close_matches(target, targets, n=1, cutoff=0.25)

    if matches:
        match = matches[0]
        return source[targets.index(match)]
    else:
        return None

target = 'Z'
targets = ['Joe', 'Bob', 'zombie', 'Susan', 'kobold', 'Bill']
match = get_target_match(target, targets)
print "Going nom on %s" % match # IT'S A ZOMBIE!!!
</snippet></ROW><ROW><id>11336554</id><snippet>[[0] * 1005] * 1005</snippet></ROW><ROW><id>11336554</id><snippet>matrix = [[0] * 1005 for _ in range(1005)]
</snippet></ROW><ROW><id>11336580</id><snippet>&lt;input type="hidden" name="title" value="{{ source.title }}"&gt;
</snippet></ROW><ROW><id>11336580</id><snippet>request.POST.get("title", "")
</snippet></ROW><ROW><id>11336619</id><snippet>self</snippet></ROW><ROW><id>11336619</id><snippet>class Test(object):
    def say_hello(self):
        print "Hi there"
</snippet></ROW><ROW><id>11336619</id><snippet>self</snippet></ROW><ROW><id>11336619</id><snippet>class Test(object):
    def say_hello(self, name):
        print "Hi %s" % name
</snippet></ROW><ROW><id>11336619</id><snippet>self</snippet></ROW><ROW><id>11336619</id><snippet>this</snippet></ROW><ROW><id>11336619</id><snippet>my_instance.method()</snippet></ROW><ROW><id>11336619</id><snippet>TheObject.method(my_instance)</snippet></ROW><ROW><id>11336619</id><snippet>my_instance</snippet></ROW><ROW><id>11336619</id><snippet>my_parser = Parser()
my_parser.method()
</snippet></ROW><ROW><id>11336619</id><snippet>import parser
parser.do_this()
</snippet></ROW><ROW><id>11336778</id><snippet>None</snippet></ROW><ROW><id>11336778</id><snippet>def __init__(self, created=None):
    self.created = created or datetime.now()
</snippet></ROW><ROW><id>11336778</id><snippet>def __init__(self):
    self.created = datetime.now()
</snippet></ROW><ROW><id>11336863</id><snippet>new google.maps.LatLng(38.4397984,061.1720742)
</snippet></ROW><ROW><id>11336863</id><snippet>strip('0')</snippet></ROW><ROW><id>11336863</id><snippet>'061.172000'.strip('0')</snippet></ROW><ROW><id>11336875</id><snippet>cgi</snippet></ROW><ROW><id>11336875</id><snippet>escape</snippet></ROW><ROW><id>11336926</id><snippet>&gt;&gt;&gt; re.match(r'(.{,100})\W', text).group(1)
"Have you managed to get your hands on Nikon's elusive D4 full-frame DSLR? It should be smooth"
</snippet></ROW><ROW><id>11336926</id><snippet>re.match(r'(.{,100})(\W|$)', text).group(1)
</snippet></ROW><ROW><id>11336990</id><snippet>insert</snippet></ROW><ROW><id>11336990</id><snippet>deque</snippet></ROW><ROW><id>11336990</id><snippet>append</snippet></ROW><ROW><id>11337012</id><snippet>def __contains__(self, e):
    return e in self.segments or any(e in x for x in self.segments)
</snippet></ROW><ROW><id>11337012</id><snippet>any</snippet></ROW><ROW><id>11337012</id><snippet>True</snippet></ROW><ROW><id>11337033</id><snippet>max(xrange(1, 10001), key=chain_length)
</snippet></ROW><ROW><id>11337275</id><snippet>&lt;script type="text/javascript"&gt;
    var googleCode = 'czEuYWRkVmFyaWFibGUoImZpbGUiLCJodHRwOi8vd2lsbGlhbS5yaWtlci53aW1wLmNvbS9sb2FkdmlkZW8vMDA5YzUwMzNkZmYyMDQ3MmJiYzBjMjk2NmJjNzI2MjIvNGZmNGQ2ZDYvd2ViLXZpZGVvcy9iZTVjYWI2YjcxNmU0OWExZjFiYzc3NGNlMjVlZDg0Yl93YWtlci5mbHYiKTs=';
    eval(lxUTILsign.decode(googleCode));
&lt;/script&gt;
</snippet></ROW><ROW><id>11337275</id><snippet>lxUTILsign.decode(googleCode);</snippet></ROW><ROW><id>11337275</id><snippet>"s1.addVariable(\"file\",\"http://worf.wimp.com/loadvideo/2e368b70f8577ad167087530fc73748d/4ff4f5df/web-videos/35e78d1932b24f80ae3a9210fce008c4_titanic.flv\");"
</snippet></ROW><ROW><id>11337275</id><snippet>import base64
import urllib2
import re

def get_video_url(page_url):
    html = urllib2.urlopen(url).read()
    match = re.search("googleCode = '(.*?)'", html)
    if match is None:
        raise ValueError('googleCode not found')
    googleString = base64.b64decode(match.group(1))
    match = re.search('","(.*?)"', googleString)
    if match is None:
        raise ValueError("didn't find video url")
    return match.group(1)

url = 'http://www.wimp.com/titanicpiano/'
print get_video_url(url)
</snippet></ROW><ROW><id>11337275</id><snippet>http://worf.wimp.com/loadvideo/8656607f77689f759d54b4ec7207152d/4ff4ff9c/web-videos/35e78d1932b24f80ae3a9210fce008c4_titanic.flv
</snippet></ROW><ROW><id>11337407</id><snippet>time.time()</snippet></ROW><ROW><id>11337407</id><snippet>import os
import time

dirname = MEDIA_ROOT+my_folder
filenames = os.listdir(dirname)
filenames = [os.path.join(dirname,filename) for filename in filenames]
for filename in filenames:
    last_access = os.stat(filename).st_mtime #secs since epoch
    timediff = time.gmtime() - last_access
    print filename+'----'+timediff
    if timediff &gt; 24*60*60:
        print 'older than a day'
        # do your thing
</snippet></ROW><ROW><id>11337703</id><snippet>Entry</snippet></ROW><ROW><id>11337703</id><snippet>insert()</snippet></ROW><ROW><id>11337703</id><snippet>box.insert(0, "Value 1")    # Set default text at cursor position 0.
</snippet></ROW><ROW><id>11337703</id><snippet>box</snippet></ROW><ROW><id>11337703</id><snippet>Entry</snippet></ROW><ROW><id>11337703</id><snippet>clicked</snippet></ROW><ROW><id>11337703</id><snippet>from tkinter import Tk, Entry, END    # Python3. For Python2.x, import Tkinter.

# Use this as a flag to indicate if the box was clicked.
global clicked   
clicked = False

# Delete the contents of the Entry widget. Use the flag
# so that this only happens the first time.
def callback(event):
    global clicked
    if (clicked == False):
        box[0].delete(0, END)         #  
        box[0].config(fg = "black")   # Change the colour of the text here.
        clicked = True

root = Tk()
box = []                              # Declare a list for the Entry widgets.

box.append(Entry(fg = "gray"))        # Create an Entry box with gray text.
box[0].bind("&lt;Button-1&gt;", callback)   # Bind a mouse-click to the callback function.
box[0].insert(0, "Value 1")           # Set default text at cursor position 0.

box.append(Entry(fg = "gray"))        # Make a 2nd Entry; store a reference to it in box.
box[1].insert(0, "Value 2")

box[0].pack()                         #
box[1].pack()

if __name__ == "__main__":
    root.mainloop()
</snippet></ROW><ROW><id>11337989</id><snippet>L[-2:]</snippet></ROW><ROW><id>11337989</id><snippet>L[len(L)-2:]</snippet></ROW><ROW><id>11337989</id><snippet>&gt;&gt;&gt; L = [1,2,3,4,5]
&gt;&gt;&gt; L[len(L)-2:]
[4, 5]
&gt;&gt;&gt; L[len(L)-0:]
[]
</snippet></ROW><ROW><id>11338017</id><snippet>monkeyrunner</snippet></ROW><ROW><id>11338017</id><snippet>#! /usr/bin/env monkeyrunner

from com.android.monkeyrunner import MonkeyRunner

cmd = 'ls /'
print cmd+':', MonkeyRunner.waitForConnection().shell(cmd)
</snippet></ROW><ROW><id>11338197</id><snippet>&gt;&gt;&gt; L = ['Q 0006 005C 0078 0030 0030 0033 0034 ONE_OF 0002 ']
&gt;&gt;&gt; [' '.join(el.split()[1:-1]) for el in L]
['0006 005C 0078 0030 0030 0033 0034 ONE_OF']
</snippet></ROW><ROW><id>11338443</id><snippet>echo $?
</snippet></ROW><ROW><id>11338443</id><snippet>32</snippet></ROW><ROW><id>11338443</id><snippet>return 0;</snippet></ROW><ROW><id>11338443</id><snippet>return EXIT_SUCCESS;</snippet></ROW><ROW><id>11338443</id><snippet>main()</snippet></ROW><ROW><id>11338536</id><snippet>ForeignKey</snippet></ROW><ROW><id>11338536</id><snippet>users</snippet></ROW><ROW><id>11338536</id><snippet>sqlalchemy</snippet></ROW><ROW><id>11338536</id><snippet>drop_all</snippet></ROW><ROW><id>11338536</id><snippet>sqlalchemy</snippet></ROW><ROW><id>11338536</id><snippet>addresses</snippet></ROW><ROW><id>11338536</id><snippet>ForeignKey</snippet></ROW><ROW><id>11338536</id><snippet>users</snippet></ROW><ROW><id>11338536</id><snippet>Address</snippet></ROW><ROW><id>11338536</id><snippet>Address</snippet></ROW><ROW><id>11338536</id><snippet>drop_all</snippet></ROW><ROW><id>11338536</id><snippet>sqlalchemy</snippet></ROW><ROW><id>11338536</id><snippet>users</snippet></ROW><ROW><id>11339112</id><snippet>for x in sim_sorted.iterkeys():
    for y in sim_sorted[x]:
        y[3] = 1
    sim_sorted[x].sort(key=lambda y: -y[1])
    transaction.savepoint()
</snippet></ROW><ROW><id>11339214</id><snippet>from pysnmp.entity.rfc3413.oneliner import cmdgen
from pysnmp.carrier.asynsock.dgram import udp6
import socket

class Udp6TransportTarget(cmdgen.UdpTransportTarget):
    transportDomain = udp6.domainName

    def __init__(self, transportAddr, timeout=1, retries=5):
        self.transportAddr = (
            socket.getaddrinfo(transportAddr[0], transportAddr[1],
                               socket.AF_INET6,
                               socket.SOCK_DGRAM,
                               socket.IPPROTO_UDP)[0][4]
            )
        self.timeout = timeout
        self.retries = retries

    def openClientMode(self):
        self.transport = udp6.Udp6SocketTransport().openClientMode()
        return self.transport

print cmdgen.CommandGenerator().getCmd(
        cmdgen.CommunityData('public'),
        Udp6TransportTarget(('::1', 161)),
        '1.3.6.1.2.1.1.1.0')
</snippet></ROW><ROW><id>11339230</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; string1 = "498results should get"
&gt;&gt;&gt; int(re.match(r'\d+', string1).group())
498
</snippet></ROW><ROW><id>11339230</id><snippet>&gt;&gt;&gt; map(int, re.findall(r'\d+', string1))
[498]
</snippet></ROW><ROW><id>11339311</id><snippet>from django.shortcuts import render_to_response</snippet></ROW><ROW><id>11339311</id><snippet>return render_to_response('base.html', {'has_sidebar': has_sidebar})
</snippet></ROW><ROW><id>11339612</id><snippet>import re
bad = ['abc', 'qwe']

with open('a') as f:
    print [line.strip() 
           for line in f
           if not re.search('|'.join(bad), line.partition('@')[2]]
</snippet></ROW><ROW><id>11339612</id><snippet>'a|b'</snippet></ROW><ROW><id>11339826</id><snippet>vr, vl = map(op.GetTangent(id).get, ('vr', 'vl'))
</snippet></ROW><ROW><id>11339950</id><snippet>blocktrans</snippet></ROW><ROW><id>11339995</id><snippet>unicode</snippet></ROW><ROW><id>11339995</id><snippet>str</snippet></ROW><ROW><id>11340612</id><snippet>dict</snippet></ROW><ROW><id>11340612</id><snippet>&gt;&gt;&gt; id(config)
31143152
&gt;&gt;&gt; def showKeywordArgs(**kwargs):
...     print(kwargs, type(kwargs), id(kwargs))
...
&gt;&gt;&gt; showKeywordArgs(**config)
({'foo': '/test', 'bar': '$foo/directory'}, &lt;type 'dict'&gt;, 35738944)
</snippet></ROW><ROW><id>11340612</id><snippet>&gt;&gt;&gt; expandedConfig = {k: config[k] for k in config}
&gt;&gt;&gt; '{bar}'.format(**expandedConfig)
'/test/directory'
</snippet></ROW><ROW><id>11340612</id><snippet>import string
fmt = string.Formatter()
fmt.vformat("{bar}", None, config)
</snippet></ROW><ROW><id>11340797</id><snippet>{% for record in result %}
&lt;textarea name="remark{{ loop.index }}"&gt;{{ record.remark }}&lt;/textarea&gt;
&lt;input type="submit" name="approve" value="{{ loop.index }}" /&gt;
{% endfor %}
</snippet></ROW><ROW><id>11340797</id><snippet>&lt;textarea name="remark1"&gt;first record remark&lt;/textarea&gt;
&lt;input type="submit" name="approve" value="1" /&gt;
&lt;textarea name="remark2"&gt;second record remark&lt;/textarea&gt;
&lt;input type="submit" name="approve" value="2" /&gt;
&lt;textarea name="remark2"&gt;third record remark&lt;/textarea&gt;
&lt;input type="submit" name="approve" value="3" /&gt;
</snippet></ROW><ROW><id>11340797</id><snippet>def post(self):
    if self.request.get('approve'):
        updated_remark = self.request.get('remark' + self.request.get('approve'))
        record.remark = db.Text(updated_remark)
        record.put()
</snippet></ROW><ROW><id>11340797</id><snippet>{% for record in result %}
    &lt;form&gt;
        &lt;textarea name="remark"&gt;{{ record.remark }}&lt;/textarea&gt;
        &lt;input type="submit" name="approve" value="Approve" /&gt;
   &lt;/form&gt;
{% endfor %}
</snippet></ROW><ROW><id>11340877</id><snippet>name</snippet></ROW><ROW><id>11340877</id><snippet>read_group()</snippet></ROW><ROW><id>11340877</id><snippet>GROUP BY</snippet></ROW><ROW><id>11340877</id><snippet>read_group</snippet></ROW><ROW><id>11340877</id><snippet>search()</snippet></ROW><ROW><id>11340877</id><snippet>read()</snippet></ROW><ROW><id>11340877</id><snippet>&lt;grouped_field&gt;_count</snippet></ROW><ROW><id>11340877</id><snippet>name</snippet></ROW><ROW><id>11340877</id><snippet>def duplicate_names(self, cr, uid, context=None):
    # Note: context not propagated for brevity of example
    groups = self.read_group(cr, uid, [], ['name'], ['name'])
    duplicate_names = [g['name'] for g in groups if g['name_count'] &gt; 1]
    print "Duplicates names:", duplicate_names

    if duplicate_names:
        # It's easy to find out the IDs of duplicate records for each name,
        # here is for the first one
        duplicate_ids = self.search(cr, uid, [('name', '=', duplicate_names[0])])
        print "Duplicate IDs for %r: %s" % (duplicate_names[0], duplicate_ids)
</snippet></ROW><ROW><id>11342171</id><snippet>$.postJSON</snippet></ROW><ROW><id>11342171</id><snippet>$.getJSON</snippet></ROW><ROW><id>11342481</id><snippet>import Tkinter

mycolor = '#%02x%02x%02x' % (64, 204, 208)  # set your favourite rgb color
mycolor2 = '#40E0D0'  # or use hex if you prefer 
root = Tkinter.Tk()
root.configure(bg=mycolor)
Tkinter.Button(root, text="Press me!", bg=mycolor, fg='black',
               activebackground='black', activeforeground=mycolor2).pack()
root.mainloop()
</snippet></ROW><ROW><id>11342481</id><snippet>cget</snippet></ROW><ROW><id>11342481</id><snippet>import Tkinter

root = Tkinter.Tk()
defaultbg = root.cget('bg')
Tkinter.Button(root,text="Press me!", bg=defaultbg).pack()
root.mainloop()
</snippet></ROW><ROW><id>11342481</id><snippet>tk_setPalette(self, *args, **kw)</snippet></ROW><ROW><id>11342481</id><snippet>root.tk_setPalette(background='#40E0D0', foreground='black',
               activeBackground='black', activeForeground=mycolor2)
Tkinter.Button(root, text="Press me!").pack()
</snippet></ROW><ROW><id>11342481</id><snippet>import Tkinter; help(Tkinter.Tk)</snippet></ROW><ROW><id>11342482</id><snippet>{% test_something %}</snippet></ROW><ROW><id>11342482</id><snippet>test.html</snippet></ROW><ROW><id>11342482</id><snippet>{% test_something %}</snippet></ROW><ROW><id>11342513</id><snippet>regular: "/&lt;title [^&gt;]*lang=("\x7C')wo("\x7C')&gt;/" 
</snippet></ROW><ROW><id>11342513</id><snippet>regular: "/&lt;title [^&gt;]*lang=("\u007C')wo("\u007C')&gt;/"
</snippet></ROW><ROW><id>11342615</id><snippet>@deco
def do():
    ...
</snippet></ROW><ROW><id>11342615</id><snippet>do = deco(do)
</snippet></ROW><ROW><id>11342615</id><snippet>def deco(func):
    def inner(letter):
        return func(letter).upper()  #upper
    return inner

#This
@deco
def do(number):
    return chr(number)  # number to letter
#end

# is eqivalent to this
def do2(number):
    return chr(number)

do2 = deco(do2)
#end


#65 &lt;=&gt; 'a'
print(do(65))
print(do2(65))
&gt;&gt;&gt; B
&gt;&gt;&gt; B
</snippet></ROW><ROW><id>11342779</id><snippet>&gt;&gt;&gt; x=['Q 0006 005C 0078 0030 0030 0033 0034 ONE_OF 0002 ']
&gt;&gt;&gt; x[0].split()[-1].strip()
'0002'
</snippet></ROW><ROW><id>11342779</id><snippet>&gt;&gt;&gt; x="['Q 0006 005C 0078 0030 0030 0033 0034 ONE_OF 0002 ']"
&gt;&gt;&gt; x.split()[-2].strip()
'0002'
</snippet></ROW><ROW><id>11342826</id><snippet>whole = open('my_file','r').read()
for x in whole.split('\n'):
    buf = x[10:28] + x[34:49] # adjust these values accordingly

open('out_file','w').write(buf)
</snippet></ROW><ROW><id>11343022</id><snippet>polynomial.py</snippet></ROW><ROW><id>11343022</id><snippet>lib/polynomial.py</snippet></ROW><ROW><id>11343022</id><snippet>polynomial/polynomial.py</snippet></ROW><ROW><id>11343093</id><snippet>nonlocal</snippet></ROW><ROW><id>11343093</id><snippet>def cap_sentence(y):  
    caps = "on"  

    def func(x):  
        nonlocal caps 
        if caps == "on":
            caps = "off"
            return x.capitalize()
        elif "." in x:
            caps = "on"

    return tuple(map(func, y))
</snippet></ROW><ROW><id>11343093</id><snippet>def cap_sentence(y):  
    cap_sentence.caps = "on"  

    def func(x):  
        if cap_sentence.caps == "on":
            cap_sentence.caps = "off"
            return x.capitalize()
        elif "." in x:
            cap_sentence.caps = "on"

    return tuple(map(func, y))
</snippet></ROW><ROW><id>11343286</id><snippet>from mod_python import Cookie, apache
import time

def handler(req):
    # read a cookie
    spam_cookie = get_cookie(req, 'spam')

    # set a cookie
    egg_cookie = Cookie.Cookie('eggs', 'spam')
    egg_cookie.expires = time.time() + 300
    Cookie.add_cookie(req, egg_cookie)

    req.write('&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;There's a cookie&lt;/body&gt;&lt;/html&gt;')
    return apache.OK
</snippet></ROW><ROW><id>11343477</id><snippet>convert -white-threshold 80% with-grid.png without-grid.png
</snippet></ROW><ROW><id>11343477</id><snippet>convert -resize 200% -white-threshold 80% -resize 50% with-grid.png without-grid.png
</snippet></ROW><ROW><id>11343579</id><snippet>import os
SETTINGS_MODULE = os.path.abspath(__file__)
</snippet></ROW><ROW><id>11343622</id><snippet>requests.get('https://api.github.com/user', auth=('user', 'pass'))
</snippet></ROW><ROW><id>11343622</id><snippet>sudo pip install requests
</snippet></ROW><ROW><id>11343622</id><snippet>sudo</snippet></ROW><ROW><id>11343884</id><snippet>:</snippet></ROW><ROW><id>11343884</id><snippet>else if X</snippet></ROW><ROW><id>11343884</id><snippet>elif X:</snippet></ROW><ROW><id>11343884</id><snippet>raw_input</snippet></ROW><ROW><id>11343884</id><snippet>input</snippet></ROW><ROW><id>11343884</id><snippet>eval</snippet></ROW><ROW><id>11343884</id><snippet>return</snippet></ROW><ROW><id>11343884</id><snippet>()</snippet></ROW><ROW><id>11344071</id><snippet>_recompute_transform</snippet></ROW><ROW><id>11344071</id><snippet>from matplotlib import transforms

class TransformedEllipse(Ellipse):

    def __init__(self, xy, width, height, angle=0.0, fix_x = 1.0, **kwargs):
        Ellipse.__init__(self, xy, width, height, angle, **kwargs)

        self.fix_x = fix_x

    def _recompute_transform(self):

        center = (self.convert_xunits(self.center[0]),
                  self.convert_yunits(self.center[1]))
        width = self.convert_xunits(self.width)
        height = self.convert_yunits(self.height)
        self._patch_transform = transforms.Affine2D() \
            .scale(width * 0.5, height * 0.5) \
            .rotate_deg(self.angle) \
            .scale(self.fix_x, 1) \
            .translate(*center)
</snippet></ROW><ROW><id>11344071</id><snippet>fix_x = DefSize[1]/DefSize[0]/ax_ratio

ellipse = TransformedEllipse((x_lim/2.0, x_lim/2.0), maj_ax, min_ax, angle=theta, facecolor="green", edgecolor="black",zorder=2, alpha=0.5, fix_x = fix_x)
</snippet></ROW><ROW><id>11344071</id><snippet>ax_ratio</snippet></ROW><ROW><id>11344071</id><snippet>y_lim / x_lim</snippet></ROW><ROW><id>11344205</id><snippet>readline</snippet></ROW><ROW><id>11344205</id><snippet>import readline</snippet></ROW><ROW><id>11344205</id><snippet>raw_input</snippet></ROW><ROW><id>11344205</id><snippet>import readline    
# I am using Ctrl+K to insert line break 
# (dont know what symbol is for shift+enter)
readline.parse_and_bind('C-k: "#\n"')
text = []
line = "#"
while line and line[-1]=='#':
  line = raw_input("&gt; ")
  if line.endswith("#"):
    text.append(line[:-1])
  else:
    text.append(line)

# all lines are in "text" list variable
print "\n".join(text)
</snippet></ROW><ROW><id>11344285</id><snippet>q = "today(Thursday)^05^*07*[2012]"
import re
print re.findall(r'\w+', q) # ['today', 'Thursday', '05', '07', '2012']
</snippet></ROW><ROW><id>11344294</id><snippet>pg_hba.conf</snippet></ROW><ROW><id>11344294</id><snippet>md5</snippet></ROW><ROW><id>11344765</id><snippet>import urllib2
import urllib
import os
import subprocess
import json

from websocket import create_connection

def refresh_page(url):
    data = json.load(urllib2.urlopen('http://localhost:9222/json'))

    found_page = False
    for page in data:
        if page['url'].lower() == url.lower():
            found_page = True
            websocketURL = page['webSocketDebuggerUrl']
            ws = create_connection(websocketURL)

            obj = {  "id": 0,
                     "method": "Page.reload",
                     "params":
                     {
                       "ignoreCache": True,
                       "scriptToEvaluateOnLoad": ""
                     }
                  }

            dev_request = json.dumps(obj)
            ws.send(dev_request)
            result =  ws.recv()
            ws.close()
    if not found_page:
        raise Exception("No pageFound")

def open_or_refresh(file_name):
    file_name = "".join ( [f if f in r'\/:*?"&lt;&gt;|' else  urllib.quote(f) for f in file_name] )
    file_name = 'file:///' + file_name.replace('\\', '/')
    file_name = file_name.encode('ascii', 'ignore')
    try:
        refresh_page(file_name)
    except:
        cmd = (r'"%(LOCALAPPDATA)s\Google\Chrome\Application\chrome.exe"'%os.environ
               + r' --remote-debugging-port=9222  "%s"' % file_name)
        subprocess.Popen(cmd)

open_or_refresh(r"C:\test.html")
open_or_refresh(r"C:\test.html")
</snippet></ROW><ROW><id>11344839</id><snippet>sum(your_list)
</snippet></ROW><ROW><id>11344839</id><snippet>my_list = range(10, 17)
my_list
[10, 11, 12, 13, 14, 15, 16]

sum(my_list)
91
</snippet></ROW><ROW><id>11344839</id><snippet>int</snippet></ROW><ROW><id>11344839</id><snippet>data = ['5', '4', '9']

sum(int(i) for i in data)
18
</snippet></ROW><ROW><id>11345122</id><snippet>import importlib
def allImports(globals):
    mod = importlib.import_module('Test', globals['__name__'])

    try:
        keys = mod.__all__
    except AttributeError:
        keys = dir(mod)

    for key in keys:
        if not key.startswith('_'):
            globals[key] = getattr(mod, key)

# …

allImports(globals())
Test # should work, you can also look into dir(Test) to find the class.
</snippet></ROW><ROW><id>11345122</id><snippet>__all__</snippet></ROW><ROW><id>11345122</id><snippet>__all__</snippet></ROW><ROW><id>11345122</id><snippet>allImports()</snippet></ROW><ROW><id>11345241</id><snippet>python myscript.py FolderName
</snippet></ROW><ROW><id>11345241</id><snippet>myscript.py</snippet></ROW><ROW><id>11345241</id><snippet>import sys
print sys.argv[1]
</snippet></ROW><ROW><id>11345241</id><snippet>sys.argv</snippet></ROW><ROW><id>11345326</id><snippet>TfidfVectorizer.inverse_transform</snippet></ROW><ROW><id>11345445</id><snippet>if</snippet></ROW><ROW><id>11345445</id><snippet>if theInput == 'Acceptable Statement' or theInput == 'Another acceptable statement':
    if theSecondInput == 'Acceptable Statement' or theInput == 'Another acceptable statement':
        doThings()
        break
</snippet></ROW><ROW><id>11345445</id><snippet>continue</snippet></ROW><ROW><id>11345519</id><snippet>git config core.editor "emacs -nw"
</snippet></ROW><ROW><id>11345887</id><snippet>callback=self.parse</snippet></ROW><ROW><id>11346017</id><snippet>commands.getstatusoutput</snippet></ROW><ROW><id>11346017</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>11346017</id><snippet>subprocess</snippet></ROW><ROW><id>11346017</id><snippet>def get_status_output(*args, **kwargs):
    p = subprocess.Popen(*args, **kwargs)
    stdout, stderr = p.communicate()
    return p.returncode, stdout, stderr
</snippet></ROW><ROW><id>11346017</id><snippet>stdout</snippet></ROW><ROW><id>11346017</id><snippet>stderr</snippet></ROW><ROW><id>11346017</id><snippet>stderr=subprocess.STDOUT</snippet></ROW><ROW><id>11346243</id><snippet>dicts = [{k: v} for (k,v) in myDict.items()]
dicts.sort(key=lambda d: (d.values()[0]['site_location'], d.values()[0]['serial_num'],))
</snippet></ROW><ROW><id>11346243</id><snippet>import pprint
pprint.pprint(dicts)
</snippet></ROW><ROW><id>11346243</id><snippet>[{'ABC12346': {'serial_num': 'ABC12346', 'site_location': 'Europe'}},
 {'SER12345': {'serial_num': 'SER12345', 'site_location': 'North America'}},
 {'SER12346': {'serial_num': 'SER12346', 'site_location': 'North America'}},
 {'ABC12345': {'serial_num': 'ABC12345', 'site_location': 'South America'}},
 {'SER12347': {'serial_num': 'SER12347', 'site_location': 'South America'}}]
</snippet></ROW><ROW><id>11346243</id><snippet>dicts = myDict.items()
dicts.sort(key=lambda (k,d): (d['site_location'], d['serial_num'],))
</snippet></ROW><ROW><id>11346243</id><snippet>[('ABC12346', {'serial_num': 'ABC12346', 'site_location': 'Europe'}),
 ('SER12345', {'serial_num': 'SER12345', 'site_location': 'North America'}),
 ('SER12346', {'serial_num': 'SER12346', 'site_location': 'North America'}),
 ('ABC12345', {'serial_num': 'ABC12345', 'site_location': 'South America'}),
 ('SER12347', {'serial_num': 'SER12347', 'site_location': 'South America'})]
</snippet></ROW><ROW><id>11346337</id><snippet>.columns</snippet></ROW><ROW><id>11346337</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'$a':[1,2], '$b': [10,20]})
&gt;&gt;&gt; df.columns = ['a', 'b']
&gt;&gt;&gt; df
   a   b
0  1  10
1  2  20
</snippet></ROW><ROW><id>11346454</id><snippet>__getattr__</snippet></ROW><ROW><id>11346454</id><snippet>class DbQuery(object):
  def __init__(self,query):
        self.query = query

class DbResultSet(object):
  def __init__(self, dbquery):
        self.result = []
        self.dbquery = dbquery
  def __getattr__(self, name):
        return getattr(self.dbquery,name)
</snippet></ROW><ROW><id>11346531</id><snippet>[(k, len(v)) for k, v in G['a'].items()]
</snippet></ROW><ROW><id>11346599</id><snippet>with</snippet></ROW><ROW><id>11346599</id><snippet>import mutagen
from flask import make_response
import os

music_dir = 'c:/www/music'

@app.route('/cover')
def cover_art():
    fname = 'music.mp3'
    mp3 = mutagen.File(os.path.join(music_dir, fname))
    art = mp3.tags['APIC:'].data
    def wsgi_app(environ, start_response):
        start_response('200 OK', [('Content-type', 'image/jpeg')])
        return art
    return make_response(wsgi_app)
</snippet></ROW><ROW><id>11346688</id><snippet>Extra Flags</snippet></ROW><ROW><id>11347141</id><snippet>cv2.convertScaleAbs</snippet></ROW><ROW><id>11347141</id><snippet>&gt;&gt;&gt; img = np.empty((100,100,1),dtype = np.uint16)
&gt;&gt;&gt; image = cv2.cvtColor(img,cv2.COLOR_GRAY2BGR)

&gt;&gt;&gt; cvuint8 = cv2.convertScaleAbs(image)

&gt;&gt;&gt; cvuint8.dtype
dtype('uint8')
</snippet></ROW><ROW><id>11347473</id><snippet>numpy</snippet></ROW><ROW><id>11347473</id><snippet>&gt;&gt;&gt; a = numpy.array([[ 1, 2.0, "three"],
...                  [ 4, 5.0, "six"  ]], dtype=object)
&gt;&gt;&gt; funcs = [lambda x: x + 10, lambda x: x / 2, lambda x: x + '!']
&gt;&gt;&gt; apply_vectorized = numpy.vectorize(lambda f, x: f(x), otypes=[object])
&gt;&gt;&gt; apply_vectorized(funcs, a)
array([[11, 1.0, three!],
       [14, 2.5, six!]], dtype=object)
</snippet></ROW><ROW><id>11347473</id><snippet>rec.array([(1, 2.0, 'three'), (4, 5.0, 'six')], 
      dtype=[('int', '&lt;i8'), ('float', '&lt;f8'), ('str', '|S10')])
&gt;&gt;&gt; a['int']
array([1, 4])
&gt;&gt;&gt; a['float']
array([ 2.,  5.])
&gt;&gt;&gt; a['str']
rec.array(['three', 'six'], 
      dtype='|S10')
&gt;&gt;&gt; a['int'] += 10
&gt;&gt;&gt; a['int']
array([11, 14])
</snippet></ROW><ROW><id>11347701</id><snippet>min()</snippet></ROW><ROW><id>11347701</id><snippet>import csv

with open('myfile.csv', 'rb') as inf:
    incsv = csv.reader(inf)
    column = 1                # the second column (Python counts from 0, per @MRAB's comment)
    datatype = float          # or int, as appropriate (per MvG)
    data = (datatype(row[column]) for row in incsv)    # NB: a generator expression, not a list
    least_value = min(data)
</snippet></ROW><ROW><id>11348023</id><snippet>profile</snippet></ROW><ROW><id>11348023</id><snippet>self</snippet></ROW><ROW><id>11348023</id><snippet>self.__dict__.update(profile)
</snippet></ROW><ROW><id>11348023</id><snippet>profile</snippet></ROW><ROW><id>11348023</id><snippet>for attr in ("video_codec", "resolution_width", "resolution_height", "video_bitrate", 
             "ratio", "profile", "audio_codec", "audio_channels", "audio_bitrate"):
    if attr in profile: 
        setattr(self, attr, profile[attr])
</snippet></ROW><ROW><id>11348386</id><snippet>set</snippet></ROW><ROW><id>11348386</id><snippet>&gt;&gt;&gt; set([1,2,3]) ^ set([3,4,5])
set([1, 2, 4, 5])
</snippet></ROW><ROW><id>11348626</id><snippet>import turtle</snippet></ROW><ROW><id>11348805</id><snippet>scipy.interpolate.griddata</snippet></ROW><ROW><id>11348805</id><snippet># griddata expects an ndarray for the interpolant coordinates
interpolants = numpy.array([xnew, ynew])

# defaults to linear interpolation
znew = scipy.interpolate.griddata((x, y), z, interpolants) 
</snippet></ROW><ROW><id>11349005</id><snippet>CGEventTapCreate</snippet></ROW><ROW><id>11349005</id><snippet>import Quartz
from AppKit import NSKeyUp, NSSystemDefined, NSEvent

# Set up a tap, with type of tap, location, options and event mask
tap = Quartz.CGEventTapCreate(
    Quartz.kCGSessionEventTap, # Session level is enough for our needs
    Quartz.kCGHeadInsertEventTap, # Insert wherever, we do not filter
    Quartz.kCGEventTapOptionListenOnly, # Listening is enough
    Quartz.CGEventMaskBit(NSSystemDefined), # NSSystemDefined for media keys
    keyboardTapCallback,
    None
)

runLoopSource = Quartz.CFMachPortCreateRunLoopSource(None, tap, 0)
Quartz.CFRunLoopAddSource(
    Quartz.CFRunLoopGetCurrent(),
    runLoopSource,
    Quartz.kCFRunLoopDefaultMode
)
# Enable the tap
Quartz.CGEventTapEnable(tap, True)
# and run! This won't return until we exit or are terminated.
Quartz.CFRunLoopRun()
</snippet></ROW><ROW><id>11349005</id><snippet>CGEventMaskBit</snippet></ROW><ROW><id>11349005</id><snippet>Quartz.CGEventMaskBit(Quartz.kCGEventKeyUp)</snippet></ROW><ROW><id>11349005</id><snippet>CGEventTapCallBack</snippet></ROW><ROW><id>11349005</id><snippet>def keyboardTapCallback(proxy, type_, event, refcon):
    # Convert the Quartz CGEvent into something more useful
    keyEvent = NSEvent.eventWithCGEvent_(event)
</snippet></ROW><ROW><id>11349005</id><snippet>NSEvent</snippet></ROW><ROW><id>11349041</id><snippet>os.utime</snippet></ROW><ROW><id>11349501</id><snippet>f=open('test1.txt', 'w')
for i in range(1000):
    f.write('\n')
f.close()
</snippet></ROW><ROW><id>11349501</id><snippet>for i in range(1000):
    f=open('test2.txt', 'a')
    f.write('\n')
    f.close()
</snippet></ROW><ROW><id>11349766</id><snippet>pygame.transform.scale(screenPrescaled, (1920, 1080), window)
</snippet></ROW><ROW><id>11350061</id><snippet>&gt;&gt;&gt; DOC = """&lt;sbml xmlns="http://www.sbml.org/sbml/level2/version4" xmlns:celldesigner="http://www.sbml.org/2001/ns/celldesigner" level="2" version="4"&gt;
...   &lt;model metaid="untitled" id="untitled"&gt;
...     &lt;annotation&gt;...&lt;/annotation&gt;
...     &lt;listOfUnitDefinitions&gt;...&lt;/listOfUnitDefinitions&gt;
...     &lt;listOfCompartments&gt;...&lt;/listOfCompartments&gt;
...     &lt;listOfSpecies&gt;
...       &lt;species metaid="s1" id="s1" name="GenA" compartment="default" initialAmount="0"&gt;
...         &lt;annotation&gt;
...           &lt;celldesigner:extension&gt;...&lt;/celldesigner:extension&gt;
...         &lt;/annotation&gt;
...       &lt;/species&gt;
...       &lt;species metaid="s2" id="s2" name="s2" compartment="default" initialAmount="0"&gt;
...         &lt;annotation&gt;
...            &lt;celldesigner:extension&gt;...&lt;/celldesigner:extension&gt;
...         &lt;/annotation&gt;
...       &lt;/species&gt;
...     &lt;/listOfSpecies&gt;
...     &lt;listOfReactions&gt;...&lt;/listOfReactions&gt;
...   &lt;/model&gt;
... &lt;/sbml&gt;"""
&gt;&gt;&gt; 
&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; NS = "http://this.is.some/custom_namespace"
&gt;&gt;&gt; tree = etree.ElementTree(element=None, file=StringIO(DOC))
&gt;&gt;&gt; root = tree.getroot()
&gt;&gt;&gt; nsmap = root.nsmap
&gt;&gt;&gt; nsmap['kjw'] = NS
&gt;&gt;&gt; new_root = etree.Element(root.tag, nsmap=nsmap)
&gt;&gt;&gt; new_root[:] = root[:]
&gt;&gt;&gt; new_root.append(etree.Element('{%s}%s' % (NS, 'test')))
&gt;&gt;&gt; new_root.append(etree.Element('{%s}%s' % (NS, 'test')))

&gt;&gt;&gt; print etree.tostring(new_root, pretty_print=True)
&lt;sbml xmlns:celldesigner="http://www.sbml.org/2001/ns/celldesigner" xmlns:kjw="http://this.is.some/custom_namespace" xmlns="http://www.sbml.org/sbml/level2/version4"&gt;&lt;model metaid="untitled" id="untitled"&gt;
    &lt;annotation&gt;...&lt;/annotation&gt;
    &lt;listOfUnitDefinitions&gt;...&lt;/listOfUnitDefinitions&gt;
    &lt;listOfCompartments&gt;...&lt;/listOfCompartments&gt;
    &lt;listOfSpecies&gt;
      &lt;species metaid="s1" id="s1" name="GenA" compartment="default" initialAmount="0"&gt;
        &lt;annotation&gt;
          &lt;celldesigner:extension&gt;...&lt;/celldesigner:extension&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
      &lt;species metaid="s2" id="s2" name="s2" compartment="default" initialAmount="0"&gt;
        &lt;annotation&gt;
           &lt;celldesigner:extension&gt;...&lt;/celldesigner:extension&gt;
        &lt;/annotation&gt;
      &lt;/species&gt;
    &lt;/listOfSpecies&gt;
    &lt;listOfReactions&gt;...&lt;/listOfReactions&gt;
  &lt;/model&gt;
&lt;kjw:test/&gt;&lt;kjw:test/&gt;&lt;/sbml&gt;
</snippet></ROW><ROW><id>11350095</id><snippet>csv</snippet></ROW><ROW><id>11350095</id><snippet>Sniffer</snippet></ROW><ROW><id>11350095</id><snippet>next()</snippet></ROW><ROW><id>11350095</id><snippet>import csv

with open('all16.csv', 'rb') as inf:
    has_header = csv.Sniffer().has_header(inf.read(1024))
    inf.seek(0)
    incsv = csv.reader(inf)
    column = 1
    datatype = float
    if has_header:
        next(incsv)  # skip header row
    data = (datatype(row[column]) for row in incsv)
    least_value = min(data)

print least_value
</snippet></ROW><ROW><id>11350095</id><snippet>incsv.next()</snippet></ROW><ROW><id>11350095</id><snippet>datatype</snippet></ROW><ROW><id>11350095</id><snippet>column</snippet></ROW><ROW><id>11350095</id><snippet>data</snippet></ROW><ROW><id>11350095</id><snippet>    data = (float(row[1]) for row in incsv)
</snippet></ROW><ROW><id>11350246</id><snippet>&gt;&gt;&gt; fruit = {'apple','banana','orange','pear'}
&gt;&gt;&gt; d = {'fruit': 'apple'}
&gt;&gt;&gt; d['fruit'] if 'fruit' in d and d['fruit'] in fruit else ''
'apple'
&gt;&gt;&gt; d['fruit'] = 'watermellon'
&gt;&gt;&gt; d['fruit'] if 'fruit' in d and d['fruit'] in fruit else ''
''
</snippet></ROW><ROW><id>11350303</id><snippet>\B</snippet></ROW><ROW><id>11350303</id><snippet>In [7]: print x
AAL000007200100000787777388300000

In [8]: print re.sub("^(\D+)0+", r"\1", x)
AAL7200100000787777388300000
</snippet></ROW><ROW><id>11350303</id><snippet>re.sub("^(\D+)0+", r"\1", x)</snippet></ROW><ROW><id>11350314</id><snippet>mapping = {
    'A': 'Adam',
    'B': 'Bale',
    'Z': 'Talking'
    # etc...
}

name = mapping[your_string[0]]
</snippet></ROW><ROW><id>11350430</id><snippet>zip()</snippet></ROW><ROW><id>11350430</id><snippet>connections = cmds.listConnections()
for destination, source in zip(*[iter(connections)]*2):
    print source, destination
</snippet></ROW><ROW><id>11350430</id><snippet>def grouper(n, iterable, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>11350487</id><snippet>from types import FunctionType

def wrapper(func):
    def wrapped(*args, **kwrds):
        ... &lt;do something to/with "func" or the result of calling it&gt;
    return wrapped

class MetaClass(type):
    def __new__(meta, classname, bases, classDict):
        newClassDict = {}
        for attributeName, attribute in classDict.items():
            if type(attribute) == FunctionType:
                attribute = wrapper(attribute)  # replace with a wrapped version of method
            newClassDict[attributeName] = attribute
        return type.__new__(meta, classname, bases, newClassDict)

class MyClass(object):
    __metaclass__ = MetaClass  # wrap all the methods
    def method1(self, ...)
    ... and so on ...
</snippet></ROW><ROW><id>11350615</id><snippet>preinst</snippet></ROW><ROW><id>11350615</id><snippet>postrm</snippet></ROW><ROW><id>11350615</id><snippet>Pre-Depends</snippet></ROW><ROW><id>11350615</id><snippet>Depends</snippet></ROW><ROW><id>11350643</id><snippet>&gt;&gt;&gt; data = [('hey', 'stuff', '3'),
            ('table', 'row', 'something'),
            ('xy', 'z', 'abc')]
&gt;&gt;&gt; numcolumns = len(data[0])
&gt;&gt;&gt; colsizes = [max(len(r[i]) for r in data) for i in range(numcolumns)]
&gt;&gt;&gt; formatter = ' '.join('{:&lt;%d}' % c for c in colsizes)
&gt;&gt;&gt; rowsformatted = [formatter.format(*row) for row in data]
&gt;&gt;&gt; header = formatter.format(*['=' * c for c in colsizes])
&gt;&gt;&gt; output = header + '\n' + '\n'.join(rowsformatted) + '\n' + header
&gt;&gt;&gt; print output
===== ===== =========
hey   stuff 3        
table row   something
xy    z     abc      
===== ===== =========
</snippet></ROW><ROW><id>11350935</id><snippet>is</snippet></ROW><ROW><id>11350935</id><snippet>is</snippet></ROW><ROW><id>11350935</id><snippet>char* == char*</snippet></ROW><ROW><id>11350935</id><snippet>==</snippet></ROW><ROW><id>11350935</id><snippet>string == string</snippet></ROW><ROW><id>11350935</id><snippet>is not</snippet></ROW><ROW><id>11350935</id><snippet>!=</snippet></ROW><ROW><id>11350935</id><snippet>if</snippet></ROW><ROW><id>11350935</id><snippet>links.add(frozenset(tuple(u | v))) if u in links or v in links else None
</snippet></ROW><ROW><id>11350977</id><snippet>statements = [ ... ]

obj = open( "some.py", "w+" )

for s in statements:
    obj.write( s.to_str() )

obj.close()
</snippet></ROW><ROW><id>11351045</id><snippet>import urllib, re

source = urllib.urlopen('http://www.cbssports.com/nba/draft/mock-draft').read()

## every image name is an abbreviation composed by capital letters, so...
for link in re.findall('http://sports.cbsimg.net/images/nba/logos/30x30/[A-Z]*.png', source):
    print link


    ## the code above just prints the link;
    ## if you want to actually download, set the flag below to True

    actually_download = False
    if actually_download:
        filename = link.split('/')[-1]
        urllib.urlretrieve(link, filename)
</snippet></ROW><ROW><id>11351115</id><snippet>term = urllib.quote("'" + term + "'")
</snippet></ROW><ROW><id>11351115</id><snippet>term = urllib.quote("'%s'" % (term,))
</snippet></ROW><ROW><id>11351115</id><snippet>term = urllib.quote("'{}'".format(term))
</snippet></ROW><ROW><id>11351266</id><snippet>Counter</snippet></ROW><ROW><id>11351266</id><snippet>collections</snippet></ROW><ROW><id>11351266</id><snippet>from collections import Counter
x = ['ab', 'ab', 'ac']
counts = Counter(x)
</snippet></ROW><ROW><id>11351266</id><snippet>counts</snippet></ROW><ROW><id>11351266</id><snippet>counts</snippet></ROW><ROW><id>11351266</id><snippet>counts['ab']
&gt;&gt;&gt; 2
</snippet></ROW><ROW><id>11351312</id><snippet>soup = BeautifulSoup('your_XML_string')
print soup.find('text').string
</snippet></ROW><ROW><id>11351511</id><snippet>__main__</snippet></ROW><ROW><id>11351511</id><snippet>from mock import patch
from collections import defaultdict

with patch('__main__.defaultdict'):
    d = defaultdict()
    print 'd:', d
</snippet></ROW><ROW><id>11351511</id><snippet># foo.py

from collections import defaultdict

def bar():
    return defaultdict()


# foo_test.py    

from mock import patch
from foo import bar

with patch('foo.defaultdict'):
    print bar()
</snippet></ROW><ROW><id>11351511</id><snippet>__main__</snippet></ROW><ROW><id>11351589</id><snippet>my_list[i:end] = [1]*(end-i)
</snippet></ROW><ROW><id>11351589</id><snippet>&gt;&gt;&gt; def test(my_list, i, end):
...     my_list[i:end] = [1]*(end-i)
...     return my_list
&gt;&gt;&gt; test(range(10), 0, 5)
[1, 1, 1, 1, 1, 5, 6, 7, 8, 9]
&gt;&gt;&gt; test(range(10), 5, 10)
[0, 1, 2, 3, 4, 1, 1, 1, 1, 1]
&gt;&gt;&gt; test(range(10), 3, 8)
[0, 1, 2, 1, 1, 1, 1, 1, 8, 9]
</snippet></ROW><ROW><id>11351690</id><snippet>blank=True</snippet></ROW><ROW><id>11351690</id><snippet>null=True</snippet></ROW><ROW><id>11351777</id><snippet>def translation(seq):
    return [(x[0], sorted(seq, key=lambda t: t[1]).index(x)) for x in seq]
</snippet></ROW><ROW><id>11351777</id><snippet>&gt;&gt;&gt; translation([(0, 34), (1, 77), (2, 6), (3, 60), (6, 2), (7, 5), (9, 13)])
[(0, 4), (1, 6), (2, 2), (3, 5), (6, 0), (7, 1), (9, 3)]
</snippet></ROW><ROW><id>11351777</id><snippet>lambda t: t[1]</snippet></ROW><ROW><id>11351777</id><snippet>translation([(1, 8), (4, 9), (12, 8)])</snippet></ROW><ROW><id>11351777</id><snippet>[(1, 0), (4, 1), (12, 0)]</snippet></ROW><ROW><id>11351777</id><snippet>def translation(seq):
    l = list(set(sorted([x[1] for x in seq])))
    return [(x[0], l.index(x[1])) for x in seq]
</snippet></ROW><ROW><id>11351913</id><snippet>[y for x in dict.items() for y in x]
</snippet></ROW><ROW><id>11351913</id><snippet>dict = {'one': 1, 'two': 2}

print([y for x in dict.items() for y in x])
</snippet></ROW><ROW><id>11351913</id><snippet>['two', 2, 'one', 1]
</snippet></ROW><ROW><id>11351919</id><snippet>os.listdir</snippet></ROW><ROW><id>11351919</id><snippet>os.path.join</snippet></ROW><ROW><id>11351919</id><snippet>listing = os.listdir(self.Parent.userTempFolderPath)
for infile in listing:
    if 'Thumbs.db' not in infile and 'DS' not in infile:
        path = os.path.join(self.Parent.userTempFolderPath, infile)

        fileMover.moveFile(path, self.Parent.userTempFolderPath, self.Parent.currentProjectObject.Watchfolder, True)
</snippet></ROW><ROW><id>11351919</id><snippet>.find(..) == -1</snippet></ROW><ROW><id>11351919</id><snippet>not in</snippet></ROW><ROW><id>11351935</id><snippet>def rt_iterator(depth, other-args):
    # store whatever info you need from this point in the tree
    if depth&gt;= MAX_DEPTH:
        return
    # look at the nodes you want to expand from here
    for each node, in the order you want them expanded:
        rt_iterator(depth+1, other-args)
</snippet></ROW><ROW><id>11352013</id><snippet>subprocess.call(["boto-rsync", "..."], env={"PATH":"/Library/Frameworks/Python.framework/Versions/2.7/bin/"})
</snippet></ROW><ROW><id>11352119</id><snippet>else</snippet></ROW><ROW><id>11352119</id><snippet>else</snippet></ROW><ROW><id>11352119</id><snippet>break</snippet></ROW><ROW><id>11352119</id><snippet>data = [1, 2, 3]

for item in data:
    try:
        do_stuff(item)
        break # we just need to do stuff with the first successful item
    except Exception:
        handle_errors(item) # in case of no success, handle and skip to next item
else:
    raise Exception("All items weren't successful")
</snippet></ROW><ROW><id>11352119</id><snippet>for</snippet></ROW><ROW><id>11352119</id><snippet>for_stmt ::=  "for" target_list "in" expression_list ":" suite
              ["else" ":" suite]
</snippet></ROW><ROW><id>11352119</id><snippet>break</snippet></ROW><ROW><id>11352119</id><snippet>else</snippet></ROW><ROW><id>11352216</id><snippet>numpy.convolve()</snippet></ROW><ROW><id>11352216</id><snippet>def movingaverage(interval, window_size):
    window = numpy.ones(int(window_size))/float(window_size)
    return numpy.convolve(interval, window, 'same')
</snippet></ROW><ROW><id>11352216</id><snippet>x</snippet></ROW><ROW><id>11352216</id><snippet>window_size</snippet></ROW><ROW><id>11352216</id><snippet>plot(x,y)
xlim(0,1000)

x_av = movingaverage(interval, r)
plot(x_av, y)

xlabel("Months since Jan 1749.")
ylabel("No. of Sun spots")
show()
</snippet></ROW><ROW><id>11352253</id><snippet>binascii.hexlify()</snippet></ROW><ROW><id>11352253</id><snippet>import base64
mymodelinstance.key = base64.b64encode(raw_key_value)
</snippet></ROW><ROW><id>11352253</id><snippet>raw_key_value = base64.b64decode(mymodelinstance.key)
</snippet></ROW><ROW><id>11352253</id><snippet>BLOCK_SIZE * 2</snippet></ROW><ROW><id>11352253</id><snippet>4 * ( BLOCK_SIZE / 3)</snippet></ROW><ROW><id>11352375</id><snippet>now = datetime.datetime.utcnow()
    if now.month &lt; 12:
        expire_date = now.replace(year=now.year + 1, month=now.month + 1)
    else:
        expire_date = now.replace(year=now.year + 2, month=0)
</snippet></ROW><ROW><id>11352375</id><snippet>now = datetime.datetime.utcnow()
exp_year = now.year + 1
exp_month = now.month
exp_day = now.day

if exp_month == 2 and exp_day == 29:
    exp_month += 1
    exp_day = 1

exp_date = now.replace(year=exp_year, month=exp_month, day=exp_day)
</snippet></ROW><ROW><id>11352531</id><snippet>user = User.objects.get(username='user1')
last_login = user.last_login
</snippet></ROW><ROW><id>11352613</id><snippet>f = open('raw_data.txt', 'rt')
data = f.read()

students = data.split('Start\n')[1:]

for s in students:
    lines = s.split('\n')
    id = lines[0]
    name = lines[1]

    nrcourses = int(lines[2])

    line = 2
    courses = []
    for n in range(nrcourses):
        number = lines[line+1]
        credit = lines[line+2]
        score = lines[line+3]
        courses.append((number, credit, score))
        line += 3

    print 'id: %s; name %s; course list %s' % (id, name, courses)

f.close()
</snippet></ROW><ROW><id>11352777</id><snippet>&gt;&gt;&gt; gList = ["094G.016", "094G.019", "094G.005", "194G.015"]
&gt;&gt;&gt; [x.lstrip('0') for x in gList]
['94G.016', '94G.019', '94G.005', '194G.015']
</snippet></ROW><ROW><id>11352777</id><snippet>lstrip()</snippet></ROW><ROW><id>11352777</id><snippet>gList</snippet></ROW><ROW><id>11352777</id><snippet>for x in gList:  
    x.lstrip("0") 
</snippet></ROW><ROW><id>11352777</id><snippet>for index in xrange(len(gList)):   #xrange() or(range() in python 3.x) returns a iterable which contains values from 0 to len(gList)-1 
    gList[index].lstrip("0")
</snippet></ROW><ROW><id>11352835</id><snippet>input_date_formats</snippet></ROW><ROW><id>11352835</id><snippet>input_time_formats</snippet></ROW><ROW><id>11352835</id><snippet>start = SplitDateTimeField(
    input_date_formats=('%m/%d/%Y',),
    input_time_formats=('%I:%M %p',),
    initial= lambda: dt.datetime.now(),
    required=True
)
end = SplitDateTimeField(
    input_date_formats=('%m/%d/%Y',),
    input_time_formats=('%I:%M %p',),
    initial= lambda: dt.datetime.now() + dt.timedelta(days=30),
    required=True
)
</snippet></ROW><ROW><id>11352983</id><snippet>for</snippet></ROW><ROW><id>11353039</id><snippet>Content-Type: application/json</snippet></ROW><ROW><id>11353039</id><snippet>r = requests.post(gUrl, data, headers={'Content-Type': 'application/json'}</snippet></ROW><ROW><id>11353039</id><snippet>print r.json</snippet></ROW><ROW><id>11353039</id><snippet>{u'kind': u'urlshortener#url', u'id': u'http://goo.gl/5Af0', u'longUrl': u'http://www.google.es/'}
</snippet></ROW><ROW><id>11353058</id><snippet>SERVER_IP   = '127.0.0.1'
</snippet></ROW><ROW><id>11353058</id><snippet>...

import time

mySocket = socket( AF_INET, SOCK_DGRAM )
mySocket.connect((SERVER_IP,PORT_NUMBER))

while True:
        mySocket.send('cool')
        time.sleep(.5)
</snippet></ROW><ROW><id>11353058</id><snippet>ifconfig</snippet></ROW><ROW><id>11353058</id><snippet>ipconfig /all</snippet></ROW><ROW><id>11353065</id><snippet>UdfManagerPython.dll</snippet></ROW><ROW><id>11353065</id><snippet>python22.dll</snippet></ROW><ROW><id>11353065</id><snippet>ctypes</snippet></ROW><ROW><id>11353065</id><snippet>ctypes</snippet></ROW><ROW><id>11353065</id><snippet>init...</snippet></ROW><ROW><id>11353445</id><snippet>j+=1</snippet></ROW><ROW><id>11353445</id><snippet>int(len(i))</snippet></ROW><ROW><id>11353445</id><snippet>len(i)</snippet></ROW><ROW><id>11353445</id><snippet>len()</snippet></ROW><ROW><id>11353445</id><snippet>int()</snippet></ROW><ROW><id>11353445</id><snippet>for rownum,i in enumerate(matrix_reader):</snippet></ROW><ROW><id>11353445</id><snippet>rownum</snippet></ROW><ROW><id>11353445</id><snippet>while</snippet></ROW><ROW><id>11353445</id><snippet>for</snippet></ROW><ROW><id>11353445</id><snippet>import csv
matrix_file = open('data1.csv')
matrix_reader = csv.reader(matrix_file, delimiter="\t")
header=matrix_reader.next()[0].split() #now header is ['WHO', 'THING1', 'THING2']

for i in matrix_reader:
        line=i[0].split()
        print line[0], "\t",header[1], "\t",line[1]
        print line[0], "\t",header[2], "\t",line[2]
</snippet></ROW><ROW><id>11353692</id><snippet>pytz</snippet></ROW><ROW><id>11353692</id><snippet>datetime</snippet></ROW><ROW><id>11353692</id><snippet>tzinfo</snippet></ROW><ROW><id>11353706</id><snippet>app.debug = True
app.run()
</snippet></ROW><ROW><id>11353706</id><snippet>app.run(debug=True)
</snippet></ROW><ROW><id>11353706</id><snippet>use_reloader=True</snippet></ROW><ROW><id>11353844</id><snippet>import scipy.stats

print scipy.stats.f.isf(0.2, 1, 2)  # =&gt; 3.5555555555555576
</snippet></ROW><ROW><id>11354007</id><snippet>$ python -m timeit "sum(1 for x in xrange(100000))"
10 loops, best of 3: 34.8 msec per loop
$ python -m timeit "sum([1 for x in xrange(100000)])"
10 loops, best of 3: 20.8 msec per loop
$ python -m timeit "sum(1 for x in xrange(1000000))"
10 loops, best of 3: 315 msec per loop
$ python -m timeit "sum([1 for x in xrange(1000000)])"
10 loops, best of 3: 469 msec per loop
</snippet></ROW><ROW><id>11354099</id><snippet>q = db.GqlQuery("SELECT * FROM Act ORDER BY date DESC")
act = q.get() # return only the first entity
a = act.book_number
b = act.initial_page
c = act.final_page
</snippet></ROW><ROW><id>11354104</id><snippet>python hello.py
</snippet></ROW><ROW><id>11354133</id><snippet>jobs.sort(key=lambda x:x.type=="Delete")
</snippet></ROW><ROW><id>11354133</id><snippet>False</snippet></ROW><ROW><id>11354133</id><snippet>True</snippet></ROW><ROW><id>11354133</id><snippet>True</snippet></ROW><ROW><id>11354133</id><snippet>False</snippet></ROW><ROW><id>11354319</id><snippet>for line in infile:
    if line.startswith("Class"):
        temp,class_var = line.split(' ')
        class_var = class_var.replace(':','')   
    elif line.startswith("Subject"):
        temp,subject = line.split(' ')
        subject = subject.replace(':','')
</snippet></ROW><ROW><id>11354319</id><snippet>try</snippet></ROW><ROW><id>11354319</id><snippet>    else:
        line = line.split(" ")
        try:
            keys = ['posX','posY','posZ','x_perc','y_perc']
            values = [int(item) for item in line]
            entry = dict(zip(keys,values))
            entry['class'] = class_var
            entry['subject'] = subject
            outputList.append(entry)
        except ValueError:
            pass
</snippet></ROW><ROW><id>11354319</id><snippet>[{'posX': 0, 'x_perc': 81, 'posZ': 0, 'y_perc': 72, 'posY': 2, 'class': '1', 'subject': 'A'},
{'posX': 0, 'x_perc': 63, 'posZ': 180, 'y_perc': 38, 'posY': 2, 'class': '1', 'subject': 'A'}, ...]
</snippet></ROW><ROW><id>11354319</id><snippet>classes = ['1','2']
print "By Class:"
print "Class","Avg X","Avg Y","X SD","Y SD"
for class_var in classes:   

    x_m = np.mean([item['x_perc'] for item in output if item['class'] == class_var and item['posZ'] != 180])
    y_m = np.mean([item['y_perc'] for item in output if item['class'] == class_var and item['posZ'] != 180])
    x_sd = np.std([item['x_perc'] for item in output if item['class'] == class_var and item['posZ'] != 180])
    y_sd = np.std([item['y_perc'] for item in output if item['class'] == class_var and item['posZ'] != 180])

    print class_var,x_m,y_m,x_sd,y_sd
</snippet></ROW><ROW><id>11354551</id><snippet>int</snippet></ROW><ROW><id>11354551</id><snippet>line =['3', '4', '1\r\n']
</snippet></ROW><ROW><id>11354551</id><snippet>int_list = [int(i) for i in line]
</snippet></ROW><ROW><id>11354551</id><snippet>[3, 4, 1]
</snippet></ROW><ROW><id>11354551</id><snippet>int_list[0]</snippet></ROW><ROW><id>11354551</id><snippet>3</snippet></ROW><ROW><id>11354551</id><snippet>int_list[1]</snippet></ROW><ROW><id>11354551</id><snippet>4</snippet></ROW><ROW><id>11354551</id><snippet>with open('data.txt') as f:
    for line in f:
        int_list = [int(i) for i in line.split()]
        print int_list
</snippet></ROW><ROW><id>11354551</id><snippet>with</snippet></ROW><ROW><id>11354551</id><snippet>a</snippet></ROW><ROW><id>11354551</id><snippet>b</snippet></ROW><ROW><id>11354551</id><snippet>c</snippet></ROW><ROW><id>11354551</id><snippet>   for line in f:
       a, b, c = [int(i) for i in line.split()]
       print 'a = %d, b = %d, c = %d\n' %(a, b, c)
</snippet></ROW><ROW><id>11354551</id><snippet>    a = 9, b = 8, c = 1
</snippet></ROW><ROW><id>11354551</id><snippet>    a, b, c = (int(i) for i in line.split())
</snippet></ROW><ROW><id>11354623</id><snippet>self.box[i].bind("&lt;Button-1&gt;", lambda self, event,i : self.callback(event, data))
</snippet></ROW><ROW><id>11354623</id><snippet>self.box[i].bind("&lt;Button-1&gt;", lambda event, index=i: self.callback(event, index))
</snippet></ROW><ROW><id>11354623</id><snippet>index</snippet></ROW><ROW><id>11354623</id><snippet>i</snippet></ROW><ROW><id>11354623</id><snippet>i</snippet></ROW><ROW><id>11354623</id><snippet>self</snippet></ROW><ROW><id>11354623</id><snippet>self.callback()</snippet></ROW><ROW><id>11354623</id><snippet>clicked</snippet></ROW><ROW><id>11354623</id><snippet>box</snippet></ROW><ROW><id>11354623</id><snippet>clicked</snippet></ROW><ROW><id>11354623</id><snippet># Create an empty list based on the number of boxes created 
# above. This could go in your class's __init__ function, 
# or it could be declared globally, depending on the scope
# of self.box and the loop which determines its length.
self.clicked = ([False] * len(self.box))

# Finally, in your callback, check one member of the list,
# depending on which box was clicked.
def cb(self, event, index):
    if not self.clicked[index]:
        self.box[index].delete(0, END)
        self.box[index].config(fg='black')
        self.clicked[index] = True
    # Print the value of each of the widgets stored in the box list.
    for i, j in enumerate(self.box):
        print("%ith element: %s" % (i, j.get()))  
</snippet></ROW><ROW><id>11354821</id><snippet>super()</snippet></ROW><ROW><id>11354821</id><snippet>super()</snippet></ROW><ROW><id>11354825</id><snippet>conll2002</snippet></ROW><ROW><id>11354825</id><snippet>fileids</snippet></ROW><ROW><id>11354825</id><snippet>python train_chunker.py conll2002 --fileids ned.train</snippet></ROW><ROW><id>11354825</id><snippet>python train_chunker.py conll2002 --fileids ned.train --classifier NaiveBayes --filename ~/nltk_data/chunkers/conll2002_ned_NaiveBayes.pickle</snippet></ROW><ROW><id>11354957</id><snippet>from bs4 import BeautifulSoup</snippet></ROW><ROW><id>11354957</id><snippet>from BeautifulSoup import BeautifulSoup</snippet></ROW><ROW><id>11354957</id><snippet>prettify</snippet></ROW><ROW><id>11354957</id><snippet>soup</snippet></ROW><ROW><id>11355105</id><snippet>def openB(s, l, t):
    global count
    count += 1
def closeB(s, l, t):
    global count
    count -= 1

opener = Literal("[").setParseAction(openB)
closer = Literal("]").setParseAction(closeB)

nestedBrackets = nestedExpr(opener, closer, content=grammar) 
</snippet></ROW><ROW><id>11355105</id><snippet>count</snippet></ROW><ROW><id>11355146</id><snippet>a = dict.fromkeys(range(n))
</snippet></ROW><ROW><id>11355166</id><snippet>.gif</snippet></ROW><ROW><id>11355166</id><snippet>import Image

im = Image.open('image.gif')
rgb_im = im.convert('RGB')
r, g, b = rgb_im.getpixel((1, 1))

print r, g, b
(65, 100, 137)
</snippet></ROW><ROW><id>11355183</id><snippet>eval()</snippet></ROW><ROW><id>11355235</id><snippet>'ER'</snippet></ROW><ROW><id>11355235</id><snippet>IndexError</snippet></ROW><ROW><id>11355235</id><snippet>while not line.startswith('PT J'):
</snippet></ROW><ROW><id>11355235</id><snippet>line[1] + line[2] + line[3] + line[4] == line[1:5] 
</snippet></ROW><ROW><id>11355401</id><snippet>shuffle(names)</snippet></ROW><ROW><id>11355401</id><snippet>None</snippet></ROW><ROW><id>11355401</id><snippet>TypeError: object of type 'NoneType' has no len()
</snippet></ROW><ROW><id>11355422</id><snippet>getattr</snippet></ROW><ROW><id>11355422</id><snippet>repr</snippet></ROW><ROW><id>11355422</id><snippet>&gt;&gt;&gt; getattr(proxy, "is_even")
Traceback (most recent call last):
(...)

xmlrpclib.Fault: &lt;Fault 1: '&lt;type \'exceptions.Exception\'&gt;:method "is_even.__repr__" is not supported'&gt;
</snippet></ROW><ROW><id>11355422</id><snippet>&gt;&gt;&gt; a = getattr(proxy, "is_even")
&gt;&gt;&gt; a(5)
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11355447</id><snippet>after</snippet></ROW><ROW><id>11355447</id><snippet>self.runBackup</snippet></ROW><ROW><id>11355447</id><snippet>self.backupCB.destroy()</snippet></ROW><ROW><id>11355447</id><snippet>os.system('.\\src\\backup.bat %s' % name)</snippet></ROW><ROW><id>11355447</id><snippet>backupCallBack</snippet></ROW><ROW><id>11355447</id><snippet>after</snippet></ROW><ROW><id>11355447</id><snippet>if batch == done</snippet></ROW><ROW><id>11355754</id><snippet>from lxml import etree as ET

calendar = ET.ElementTree()
calendar.parse("calendar-week.xml")

elem_list = calendar.xpath('//div[contains(concat(" ", @class, " "), " day ")]')
</snippet></ROW><ROW><id>11356458</id><snippet>from xml.dom.minidom import parse
from xml.dom.minidom import Node

domData = parse("XMLFile.xml")
lanes = domData.getElementsByTagName("lane")
for lane in lanes:
    #print lane id
    laneId = lane.getAttribute("id")
    print "LaneID: " + laneId

    #print vehicle id, position and speed
    vehicles = lane.getElementsByTagName("vehicle")
    for vehicle in vehicles:
        vehicleId = vehicle.getAttribute("id")
        vehiclePos = vehicle.getAttribute("pos")
        vehicleSpeed = vehicle.getAttribute("speed")
        print "\tVehicleID: " + vehicleId, "VehiclePos: " + vehiclePos, "VehicleSpeed: " + vehicleSpeed

domData.unlink()
</snippet></ROW><ROW><id>11356653</id><snippet>inven</snippet></ROW><ROW><id>11356653</id><snippet>inven</snippet></ROW><ROW><id>11356653</id><snippet>class player:
    def __init__(self):
        self.level = 1
        self.exp = 0
        self.inven = []
</snippet></ROW><ROW><id>11356653</id><snippet>level</snippet></ROW><ROW><id>11356653</id><snippet>self.level += 1
</snippet></ROW><ROW><id>11356653</id><snippet>obj</snippet></ROW><ROW><id>11356653</id><snippet>obj,attr = ...</snippet></ROW><ROW><id>11356653</id><snippet>self.inven.append(...)</snippet></ROW><ROW><id>11356659</id><snippet>nnz</snippet></ROW><ROW><id>11356659</id><snippet>csr_matrix</snippet></ROW><ROW><id>11356659</id><snippet>&gt;&gt;&gt; from scipy.sparse import csr_matrix
&gt;&gt;&gt; A = csr_matrix((5, 5))
&gt;&gt;&gt; A.nnz
0
&gt;&gt;&gt; A[0, 0] = 0
&gt;&gt;&gt; A.nnz
1
&gt;&gt;&gt; A[1,1] = 0
&gt;&gt;&gt; A.nnz
2
</snippet></ROW><ROW><id>11356659</id><snippet>&gt;&gt;&gt; B = A + A
&gt;&gt;&gt; B.nnz
0
</snippet></ROW><ROW><id>11356790</id><snippet>re.sub</snippet></ROW><ROW><id>11356790</id><snippet>s = "/MyString/My#^/Blah/"
import re
print re.sub(r'[^\w/\\]', lambda m: '\\x%x' % ord(m.group(0)), s)
#/MyString/My\x23\x5e/Blah/
</snippet></ROW><ROW><id>11356945</id><snippet>q = "D\:/imagesequence/thumbnail.jpg"
task = "movie= '%s'[watermark]; [in][watermark] overlay=(main_w-overlay_w)/2:(main_h-overlay_h)/3 [out]" % q

c = subprocess.check_call(["ffmpeg", "-i", "D:/imagesequence/background222.jpg", "-vf", task, "D:/imagesequence/fwtm106.jpg"],shell=True)
</snippet></ROW><ROW><id>11357274</id><snippet>try:
    with open("/tmp/foo.txt") as foo:
        print foo.read()
except:
    try:
        with open("./foo.txt") as foo:
            print foo.read()
    except:
        print "No foo'ing files!"
</snippet></ROW><ROW><id>11357274</id><snippet>for f in ["/tmp/foo.txt", "./foo.txt"]:
    try:
        foo = open(f)
    except:
        pass
    else:
        print foo.read()
</snippet></ROW><ROW><id>11357652</id><snippet>execfile("B.py", {'__name__': '__main__'}</snippet></ROW><ROW><id>11357652</id><snippet>warnings.warn("blah", stacklevel=2)</snippet></ROW><ROW><id>11357652</id><snippet>stacklevel=2</snippet></ROW><ROW><id>11357652</id><snippet>stacklevel</snippet></ROW><ROW><id>11357743</id><snippet>'ccgcag' = codons.index('ccg') * 64 + codons.index('cag') = 23 * 64 + 27 = 1499</snippet></ROW><ROW><id>11357743</id><snippet>cggcag</snippet></ROW><ROW><id>11357754</id><snippet>def nrofleadingchars(stringtotest, testchar='\t'):
    count = 0
    for c in stringtotest:
        if c != testchar:
            break
        count += 1
    return count
</snippet></ROW><ROW><id>11357765</id><snippet>type1cm</snippet></ROW><ROW><id>11357765</id><snippet>texlive-latex-extra</snippet></ROW><ROW><id>11357972</id><snippet>/</snippet></ROW><ROW><id>11357972</id><snippet>[A-Za-z0-9+/]</snippet></ROW><ROW><id>11358350</id><snippet>input = [{1: 2}, {2: 2}, {1: 3}, {2: 1}, {1: 3}]

r = {}
for d in input:
    # (assumes just one key/value per dict)
    ((x, y),) = d.items() 
    r.setdefault(x, []).append(y)

print [ {k: v} for (k, v) in r.items() ]
</snippet></ROW><ROW><id>11358350</id><snippet>[{1: [2, 3, 3]}, {2: [2, 1]}]
</snippet></ROW><ROW><id>11358350</id><snippet>((x, y),) = d.items()</snippet></ROW><ROW><id>11358350</id><snippet>r.setdefault(x, []).append(y)</snippet></ROW><ROW><id>11358350</id><snippet>((x, y),) = d.items()</snippet></ROW><ROW><id>11358350</id><snippet>input</snippet></ROW><ROW><id>11358350</id><snippet>{1: 2}</snippet></ROW><ROW><id>11358350</id><snippet>d.items()</snippet></ROW><ROW><id>11358350</id><snippet>[(1, 2)]</snippet></ROW><ROW><id>11358350</id><snippet>,</snippet></ROW><ROW><id>11358350</id><snippet>r.setdefault(x, []).append(y)</snippet></ROW><ROW><id>11358350</id><snippet>if not r.has_key(x):
     r[x] = []
r[x].append(y)
</snippet></ROW><ROW><id>11358445</id><snippet>dict</snippet></ROW><ROW><id>11358445</id><snippet>m = { 
  "-" : '"expanded":true, ',
  "+" : '"expanded":false, ',
}

if aline[0] in m:
  extraval = m[aline[0]]
  aline = aline[1:]
</snippet></ROW><ROW><id>11358525</id><snippet>d.pop("", None)
d.pop(None, None)
</snippet></ROW><ROW><id>11358672</id><snippet>nb</snippet></ROW><ROW><id>11358672</id><snippet>'([0-9,E.+-]+)'</snippet></ROW><ROW><id>11358672</id><snippet>nb</snippet></ROW><ROW><id>11359174</id><snippet>from itertools import tee, izip
def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)

with open(filename) as f: # Remember to use a with block so the file is safely closed after
    for line, next_line in pairwise(f):
        # do stuff
</snippet></ROW><ROW><id>11359280</id><snippet>profile</snippet></ROW><ROW><id>11359280</id><snippet>class myApp(object):
    @do_profile(DO_PROFILE)
    def foo_method(self, arg1):
        pass

    @do_profile(DO_PROFILE)
    def bar_method(self, arg2):
        pass
</snippet></ROW><ROW><id>11359280</id><snippet>profile</snippet></ROW><ROW><id>11359280</id><snippet>@do_profile_all_methods(DO_PROFILE)
class myApp(object):
    def foo_method(self):
        pass
</snippet></ROW><ROW><id>11359280</id><snippet>import types

def do_profile_all_methods(cond):
    if not cond:
        return lambda c: c # Do nothing with the class; the 'null' decorator
    def profile_all_methods(klass):
        for name, attr in klass.__dict__.items():
            if isinstance(attr, types.UnboundMethodType):
                klass[name] = profile(attr)
        return klass
    return profile_all_methods
</snippet></ROW><ROW><id>11359280</id><snippet>profile</snippet></ROW><ROW><id>11359345</id><snippet>:help :command-completion-custom</snippet></ROW><ROW><id>11359345</id><snippet>:edit</snippet></ROW><ROW><id>11359345</id><snippet>:Edit</snippet></ROW><ROW><id>11359345</id><snippet>:help ins-completion-menu</snippet></ROW><ROW><id>11359345</id><snippet>import</snippet></ROW><ROW><id>11359403</id><snippet>Gtk.TextBuffer</snippet></ROW><ROW><id>11359403</id><snippet>GtkSource.Buffer</snippet></ROW><ROW><id>11359403</id><snippet>View</snippet></ROW><ROW><id>11359403</id><snippet> self.buffer_html = GtkSource.Buffer()
 self.sourceview_html = GtkSource.View.new_with_buffer(self.buffer_html)
</snippet></ROW><ROW><id>11359577</id><snippet>\w</snippet></ROW><ROW><id>11359577</id><snippet>/w</snippet></ROW><ROW><id>11359647</id><snippet>def test():
    fn = 'users.txt.txt'
    f = open(fn)
    output = []
    changeuser = 'peterpeter'
    userinfo = 'HeIsTall'
    for line in f:
        if line.strip().split(':')[0]!=changeuser:
            output.append(line)
        else:
            output.append(changeuser + ":" + userinfo+"\n")

    f.close()
    f = open(fn, 'w')
    f.writelines(output)
    f.close()

test()
</snippet></ROW><ROW><id>11359647</id><snippet>mark:stuffabouthim
anthony:stuffabouthim
peter:stuffabouthim
peterpeter:HeIsTall
peterpeterpeter:stuffabouthim
peterpeterpeterpeter:stuffabouthim
</snippet></ROW><ROW><id>11359883</id><snippet>rle_walk</snippet></ROW><ROW><id>11359883</id><snippet>gen</snippet></ROW><ROW><id>11359883</id><snippet>data</snippet></ROW><ROW><id>11359883</id><snippet>rle_walk</snippet></ROW><ROW><id>11359883</id><snippet>rle_list</snippet></ROW><ROW><id>11359883</id><snippet>def rle_walk(data):
    return [(k, sum(1 for _ in g)) for k, g in groupby(data)]

def rle_list(data):
    return [(k, len(list(g))) for k, g in groupby(data)]
</snippet></ROW><ROW><id>11359883</id><snippet>data_block = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccccccccccccccccccccc"
data_random = "abbbccacabbbccacabbbccacabbbccacabbbccacabbbccacabbbccacabbbccacabbbccacabbbccacabbbccacabbbccacabbbccacabbbccacabbbccacabbbccac"
print [[Timer('r("{data}")'.format(data=data),
              "from __main__ import {r} as r; gc.enable()".format(r=r)).timeit(1000)
        for r in ['rle_walk', 'rle_list']]
        for data in (data_block, data_random)]
</snippet></ROW><ROW><id>11359883</id><snippet>[[0.02709507942199707, 0.022060155868530273],
 [0.12022995948791504, 0.16360306739807129]]
</snippet></ROW><ROW><id>11359883</id><snippet>walk</snippet></ROW><ROW><id>11359883</id><snippet>list</snippet></ROW><ROW><id>11359883</id><snippet>&gt;&gt;&gt; dis.dis(lambda g: (1 for _ in g))
  1           0 LOAD_CONST               0 (&lt;code object &lt;genexpr&gt; at 0x2b9202a6fe40, file "&lt;stdin&gt;", line 1&gt;)
              3 MAKE_FUNCTION            0
              6 LOAD_FAST                0 (g)
              9 GET_ITER            
             10 CALL_FUNCTION            1
             13 RETURN_VALUE        
&gt;&gt;&gt; dis.dis((lambda g: (1 for _ in g)).func_code.co_consts[0])
  1           0 SETUP_LOOP              18 (to 21)
              3 LOAD_FAST                0 (.0)
        &gt;&gt;    6 FOR_ITER                11 (to 20)
              9 STORE_FAST               1 (_)
             12 LOAD_CONST               0 (1)
             15 YIELD_VALUE         
             16 POP_TOP             
             17 JUMP_ABSOLUTE            6
        &gt;&gt;   20 POP_BLOCK           
        &gt;&gt;   21 LOAD_CONST               1 (None)
             24 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(lambda g: len(list(g)))
  1           0 LOAD_GLOBAL              0 (len)
              3 LOAD_GLOBAL              1 (list)
              6 LOAD_FAST                0 (g)
              9 CALL_FUNCTION            1
             12 CALL_FUNCTION            1
             15 RETURN_VALUE        
</snippet></ROW><ROW><id>11359928</id><snippet>irc = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
irc.connect ( ( irc_network, irc_port ) )
</snippet></ROW><ROW><id>11359928</id><snippet>irc = socket.create_connection( ( irc_network, irc_port ) )
</snippet></ROW><ROW><id>11360068</id><snippet>doSomethingComplex()</snippet></ROW><ROW><id>11360134</id><snippet>handle.exe</snippet></ROW><ROW><id>11360134</id><snippet>psutil</snippet></ROW><ROW><id>11360134</id><snippet>import psutil

for proc in psutil.process_iter():
    try:
        flist = proc.get_open_files()
        if flist:
            print(proc.pid,proc.name)
            for nt in flist:
                print("\t",nt.path)

    except psutil.NoSuchProcess as err:
        print("****",err) 
</snippet></ROW><ROW><id>11360201</id><snippet>pyramid_celery</snippet></ROW><ROW><id>11360201</id><snippet>pyramid_celery</snippet></ROW><ROW><id>11360201</id><snippet>CELERYBEAT_SCHEDULE = "{'key': 'value', 'another_key': 'another_value'}"
</snippet></ROW><ROW><id>11360507</id><snippet>s</snippet></ROW><ROW><id>11360507</id><snippet>print</snippet></ROW><ROW><id>11360584</id><snippet>def run(self):
        while True:                
            try: #yourThread
            except Exception, e: print e
</snippet></ROW><ROW><id>11360589</id><snippet>KeyError</snippet></ROW><ROW><id>11360589</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d[2]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 2
&gt;&gt;&gt; d["a"]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'a'
</snippet></ROW><ROW><id>11360589</id><snippet>self.assertEquals("%s" % cm.exception, "'aaa'")
</snippet></ROW><ROW><id>11360589</id><snippet>self.assertEquals(str(cm.exception), "'aaa'")
</snippet></ROW><ROW><id>11360620</id><snippet>User.query.filter(User.id.in_([1, 5, 12, 4]))</snippet></ROW><ROW><id>11360648</id><snippet>obj_1 = {u'd':{u'results': [{u'Desc':u'This is a description...',
                            u'Title':u'This is a title...'},

                            {u'Desc':u'This is a description...', 
                            u'Title':u'This is a title...'}]
        }}
</snippet></ROW><ROW><id>11360648</id><snippet>titles = [d['Title'] for d in obj_1['d']['results']]
</snippet></ROW><ROW><id>11360711</id><snippet>listofobjs = []
for x in data:
    d = {
      'a_data': x.a,
      'b_data':model_obj.address,
      'c_data':x.c,
      'd_data':x.d,
    }
    listofobjs.append(d)
</snippet></ROW><ROW><id>11360770</id><snippet>pixmap.scaled</snippet></ROW><ROW><id>11360770</id><snippet> pixmap = QtGui.QPixmap(filename)
 # FIXED:
 scaled_pixmap = pixmap.scaled(QtCore.QSize(30,30), QtCore.Qt.KeepAspectRatio, QtCore.Qt.FastTransformation)
 self.L.append(scaled_pixmap) # FIXED
 lbl = QtGui.QLabel(self)
 lbl.setPixmap(pixmap)
 lbl.setScaledContents(True)
 column=len(self.L)
 self.ui.gridLayout.addWidget(lbl,0,column,Qt.AlignLeft | Qt.AlignTop)
</snippet></ROW><ROW><id>11360785</id><snippet>"shop_product_categories"."category_id"</snippet></ROW><ROW><id>11360785</id><snippet>Product.objects.filter(categories__in=c[0:2])
               .filter(categories=c[2])
               .filter(categories=c[3])
               .distinct()
</snippet></ROW><ROW><id>11360785</id><snippet>SELECT DISTINCT "test1_product"."id" FROM "test1_product" INNER JOIN "test1_product_categories" ON ("test1_product"."id" = "test1_product_categories"."product_id") 
    INNER JOIN "test1_product_categories" T4 
        ON ("test1_product"."id" = T4."product_id")
    INNER JOIN "test1_product_categories" T6 
        ON ("test1_product"."id" = T6."product_id") 
WHERE ("test1_product_categories"."category_id" IN (1, 2) 
    AND T4."category_id" = 3 
    AND T6."category_id" = 4 )
</snippet></ROW><ROW><id>11360870</id><snippet>def save(self, *args, **kwargs):
    ...

    self.instance.gravatar = (self.cleaned_data['gravatar'] == 'True')
    profile = super(ProfileForm, self).save(*args,**kwargs)
    return profile
</snippet></ROW><ROW><id>11360870</id><snippet>'True'</snippet></ROW><ROW><id>11360870</id><snippet>True</snippet></ROW><ROW><id>11360870</id><snippet>save()</snippet></ROW><ROW><id>11360870</id><snippet>ModelForm</snippet></ROW><ROW><id>11360870</id><snippet>self.instance.gravatar</snippet></ROW><ROW><id>11360870</id><snippet>cleaned_data</snippet></ROW><ROW><id>11360870</id><snippet>__init__</snippet></ROW><ROW><id>11360870</id><snippet>self.fields['gravatar'].initial = self.instance.usesGravatar
</snippet></ROW><ROW><id>11360870</id><snippet>UserProfile</snippet></ROW><ROW><id>11360870</id><snippet>Meta</snippet></ROW><ROW><id>11360870</id><snippet>excludes</snippet></ROW><ROW><id>11360870</id><snippet>fields</snippet></ROW><ROW><id>11360880</id><snippet>try</snippet></ROW><ROW><id>11360880</id><snippet>except</snippet></ROW><ROW><id>11360880</id><snippet>try:
    x = my_dict["key"]
except KeyError:
    # handle missing key
</snippet></ROW><ROW><id>11360880</id><snippet>if "key" in my_dict:
    x = my_dict["key"]
else:
    # handle missing key
</snippet></ROW><ROW><id>11361031</id><snippet>'</snippet></ROW><ROW><id>11361031</id><snippet>"</snippet></ROW><ROW><id>11361031</id><snippet>{% for l in list1 %}
    ['{{ l.file_name }}', {{ l.frequency_count }}], 
{% endfor %}
</snippet></ROW><ROW><id>11361031</id><snippet>var data = google.visualization.arrayToDataTable([
        ['FileName', 'Frequency'],
            ['this', 100],
            ['that', 200]
        ]);
</snippet></ROW><ROW><id>11361048</id><snippet>from itertools import chain

def rle(seq):
    ret = []
    sentinel = object()
    enum = enumerate(chain(seq,[sentinel]))
    start,last = next(enum)
    for i,c in enum:
        if c != last:
            ret.append((last,i-start))
            start,last = i,c
    return ret
</snippet></ROW><ROW><id>11361209</id><snippet>def spider_opened(self, spider):
    spider.started_on = datetime.now()
    ...

def spider_closed(self, spider):
    work_time = datetime.now() - spider.started_on
    ...
</snippet></ROW><ROW><id>11361429</id><snippet>    if Number % Test == 0:
        Number = Number + 1
        Test = 2 # you'll need to reset Test here
    else:
</snippet></ROW><ROW><id>11361823</id><snippet>first_query = db.GqlQuery("SELECT * FROM Contract ORDER BY date DESC").get()
</snippet></ROW><ROW><id>11361914</id><snippet>Sprite</snippet></ROW><ROW><id>11361914</id><snippet>self.player1 = Assassin(batch = self.batch_draw, img = pyglet.image.load("assassin1.png"), x = self.a_space.body.position.x ,y = self.a_space.body.position.y )

class Assassin(pyglet.sprite.Sprite):
  def __init__(self, batch, img, x, y):
      pyglet.sprite.Sprite.__init__(self, img, x , y )
</snippet></ROW><ROW><id>11361914</id><snippet>space.step(1/50.0)</snippet></ROW><ROW><id>11361914</id><snippet>space.step</snippet></ROW><ROW><id>11361914</id><snippet>clock</snippet></ROW><ROW><id>11361914</id><snippet>class Game(pyglet.window.Window):
    def __init__(self):
        ...
        pyglet.clock.schedule(self.update)

    def on_draw(self):
        self.clear()
        self.batch_draw.draw()
        self.player1.draw()

    def update(self, dt):
        space.step(dt)
</snippet></ROW><ROW><id>11361914</id><snippet>class Assassin(pyglet.sprite.Sprite):
    def __init__(self, batch, img, space):
        self.space = space
        pyglet.sprite.Sprite.__init__(self, img, self.space.body.position.x , self.space.body.position.y)

    def update(self):
        self.x = self.space.body.position.x
        self.y = self.space.body.position.y
</snippet></ROW><ROW><id>11361914</id><snippet>class Game(pyglet.window.Window):
    def __init__(self):
        pyglet.window.Window.__init__(self, width = 315, height = 220)
        self.batch_draw = pyglet.graphics.Batch()
        self.a_space = PymunkSpace().assassin_space(space)
        self.player1 = Assassin(batch = self.batch_draw, img = pyglet.image.load("assassin1.png"), space = self.a_space)
        pyglet.clock.schedule(self.update)
</snippet></ROW><ROW><id>11361914</id><snippet>self.player1.update()</snippet></ROW><ROW><id>11361914</id><snippet>update</snippet></ROW><ROW><id>11361914</id><snippet>class Game(pyglet.window.Window):
    def __init__(self):
        ...

    def on_draw(self):
        ...

    def update(self, dt):
        self.player1.update()
        space.step(dt)
</snippet></ROW><ROW><id>11361986</id><snippet>{% verbatim %}</snippet></ROW><ROW><id>11361986</id><snippet>{% load my_custom_tags %}  &lt;-- this is needed to load the 'verbatim' and 'mycustomtag' tags
{% verbatim %}
&lt;html&gt;
&lt;title&gt;{% block title%}{% endblock %}&lt;/title&gt;
&lt;body&gt;
{% block content %}
{% endverbatim %}

{% mycustomtag "args" %}

{% verbatim %}
{% endblock content %}
&lt;/body&gt;
&lt;/html&gt;
{% endverbatim %}
</snippet></ROW><ROW><id>11361986</id><snippet>@register.simple_tag
def mycustomtag(a):
    return "&lt;p&gt;%s&lt;/p&gt;" % a

....

from django.template import loader, Context
print loader.get_template("test.html").render(Context({}))
</snippet></ROW><ROW><id>11361986</id><snippet>&lt;html&gt;
&lt;title&gt;{%block title%}{%endblock%}&lt;/title&gt;
&lt;body&gt;
{%block content%}

&lt;p&gt;args&lt;/p&gt;

{%endblock content%}
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>11362033</id><snippet>EXTENSIONS = {
    'project_name.myextension.MyExtension': 1000,
}
</snippet></ROW><ROW><id>11362056</id><snippet>print paramdata.values
</snippet></ROW><ROW><id>11362056</id><snippet>paramdata.columns
</snippet></ROW><ROW><id>11362056</id><snippet>paramdata.index
</snippet></ROW><ROW><id>11362198</id><snippet>import sys</snippet></ROW><ROW><id>11362198</id><snippet>sys.foo</snippet></ROW><ROW><id>11362198</id><snippet>sys.bar()</snippet></ROW><ROW><id>11362198</id><snippet>django.contrib.auth.models.User</snippet></ROW><ROW><id>11362198</id><snippet>from os.path import exists</snippet></ROW><ROW><id>11362198</id><snippet>exists()</snippet></ROW><ROW><id>11362198</id><snippet>os.path.</snippet></ROW><ROW><id>11362198</id><snippet>from os.path import foo, bar</snippet></ROW><ROW><id>11362198</id><snippet>from os.path import *</snippet></ROW><ROW><id>11362449</id><snippet>Event</snippet></ROW><ROW><id>11362449</id><snippet>pygame</snippet></ROW><ROW><id>11362449</id><snippet>import socket
import pygame

pygame.init()

class UdpToPygame():

    def __init__(self):
        UDP_IP="127.0.0.1"
        UDP_PORT=15006
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.sock.setblocking(0)
        self.sock.bind((UDP_IP,UDP_PORT))

    def update(self):
        try:
            data, addr = self.sock.recvfrom(1024)
            ev = pygame.event.Event(pygame.USEREVENT, {'data': data, 'addr': addr})
            pygame.event.post(ev)
        except socket.error:
            pass    
</snippet></ROW><ROW><id>11362449</id><snippet>pygame</snippet></ROW><ROW><id>11362449</id><snippet>update</snippet></ROW><ROW><id>11362449</id><snippet>UdpToPygame</snippet></ROW><ROW><id>11362449</id><snippet>def main():
    dispatcher = UdpToPygame()
    screen = pygame.display.set_mode((800, 600))
    l = 0
    r = True
    while r:
        for ev in pygame.event.get():
            if ev.type == pygame.QUIT:
                r = False
            if ev.type == pygame.USEREVENT:
                t = pygame.font.SysFont('', 40).render(ev.data, True, (255,255,255))
                screen.blit(t, (0, l*20))
                l += 1
        dispatcher.update()        
        pygame.display.flip()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>11362449</id><snippet>&gt;&gt;&gt; import socket
&gt;&gt;&gt; sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
&gt;&gt;&gt; while True:
...     sock.sendto(raw_input(), ("127.0.0.1", 15006))
...
hallo
5
pygame....
10
</snippet></ROW><ROW><id>11362449</id><snippet>pygame.error: video system not initialized</snippet></ROW><ROW><id>11362449</id><snippet>pygame.init()</snippet></ROW><ROW><id>11362973</id><snippet>import csv

content = open("GeoIPCountryWhois.csv", "r").read().replace('\r\n','\n')

with open("GeoIPCountryWhois2.csv", "w") as g:
    g.write(content)
</snippet></ROW><ROW><id>11362973</id><snippet>for num,row in enumerate(csv.reader(f,lineterminator='\n'))
</snippet></ROW><ROW><id>11363021</id><snippet>class index</snippet></ROW><ROW><id>11363021</id><snippet>GET</snippet></ROW><ROW><id>11363273</id><snippet>template="""
   &lt;select&gt;
   &lt;option {%% if record.views = '%s' %%} selected {%% endif %%}&gt;'%s'
   &lt;/select&gt;
   """%(pop, pop)
</snippet></ROW><ROW><id>11363273</id><snippet>&lt;select&gt;
&lt;option {% if record.views = '1' %} selected {% endif %}&gt;'1'
&lt;/select&gt;
</snippet></ROW><ROW><id>11363336</id><snippet>(add-to-list 'load-path "~/.emacs.d/plugins")
(require 'python-mode)
</snippet></ROW><ROW><id>11363426</id><snippet>keyword_statuses =  DBSession.query(KeywordStatus).filter(KeywordStatus.status==0).options(joinedload(KeywordStatus.keyword)).with_lockmode("update").limit(1)

for kw_status in keyword_statuses:
    kw_status.status = 1
DBSession.commit() 
</snippet></ROW><ROW><id>11363426</id><snippet>keyword_statuses =  DBSession.query(KeywordStatus).filter(KeywordStatus.status==0).options(joinedload(KeywordStatus.keyword)).with_lockmode("update").limit(1).all()
</snippet></ROW><ROW><id>11363439</id><snippet>import inspect
import weakref
class Value(object):
    def __init__(self, val):
        self.val = val
    def __get__(self, instance, owner):
        return self.val

def get_value_from_proxy(obj, inst):
    if isinstance(obj, Value):
        return obj.__get__(inst, inst.__class__)
    else:
        return obj 

class ValueList(list):
    def __init__(self, instance, *args, **kwargs):
        list.__init__(self, *args, **kwargs)
        self.instance = weakref.ref(instance)
    def __getitem__(self, idx):
        return get_value_from_proxy(list.__getitem__(self, idx), self.instance() )

class ValueDict(dict):
    def __init__(self, instance, *args, **kwargs):
        dict.__init__(self, *args, **kwargs)
        self.instance = weakref.ref(instance)
    def __getitem__(self, key):
        return get_value_from_proxy(dict.__getitem__(self, key), self.instance() )

class BaseContainer(object):
    def __init__(self):
        for el in inspect.getmembers(self):
            if isinstance(el[1],list):
                setattr(self, el[0], ValueList(self, el[1]))
            elif isinstance(el[1],dict):
                setattr(self, el[0], ValueDict(self, el[1]))


class Container(BaseContainer):
    x = Value(1)
    y = [ Value(2), Value(3) ]
    z = {"test":Value(4)}

c = Container()
assert c.x == 1
assert c.y[0] == 2
assert c.z["test"] == 4 
</snippet></ROW><ROW><id>11363516</id><snippet>set(email.to)</snippet></ROW><ROW><id>11363516</id><snippet>.union(email.from)</snippet></ROW><ROW><id>11363516</id><snippet>email.from</snippet></ROW><ROW><id>11363516</id><snippet>email.from</snippet></ROW><ROW><id>11363516</id><snippet>Address</snippet></ROW><ROW><id>11363516</id><snippet>blah = set(email.to).union([email.from])</snippet></ROW><ROW><id>11363516</id><snippet>from</snippet></ROW><ROW><id>11363516</id><snippet>sender</snippet></ROW><ROW><id>11363516</id><snippet>Query.get</snippet></ROW><ROW><id>11363516</id><snippet>email = session.query(Email).get(message_id)
</snippet></ROW><ROW><id>11363916</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>11363916</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>11364137</id><snippet>sort</snippet></ROW><ROW><id>11364137</id><snippet>key</snippet></ROW><ROW><id>11364137</id><snippet>def sortOnFloat(sublist):
    return [v for v in sublist if isinstance(v, float)]
</snippet></ROW><ROW><id>11364137</id><snippet>list</snippet></ROW><ROW><id>11364137</id><snippet>listed.sort(key=sortOnFloat)
</snippet></ROW><ROW><id>11364137</id><snippet>['1 BW', '1AW AS', '3E FZ', '1BWAK', 'POK', 'TESTK', '1-2EHZ', '2E AK', 1.0]
['1 NWZ', '1 RWZ', '2 NWZ', '2 RWZ', '1E HZ', '1W HZ', '1-2EHZ', 2.0, '2W HZ']
['1 NWZ', '1W HZ', '3E FZ', 'SNOK', 'POK', 3.0, '1-2EHZ', '2E AK', '2W HZ']
</snippet></ROW><ROW><id>11364137</id><snippet>.sort()</snippet></ROW><ROW><id>11364137</id><snippet>sorted()</snippet></ROW><ROW><id>11364137</id><snippet>orderedlist = sorted(listed, key=sortOnFloat)
</snippet></ROW><ROW><id>11364193</id><snippet>self._pagination_label.setAlignment(Qt.AlignCenter)
</snippet></ROW><ROW><id>11364193</id><snippet>QSpacerItem</snippet></ROW><ROW><id>11364193</id><snippet>addStretch</snippet></ROW><ROW><id>11364193</id><snippet>self._layout.addWidget(self._header_buttons_prev)
self._layout.addStretch()
self._layout.addWidget(self._pagination_label)
self._layout.addStretch()
self._layout.addWidget(self._header_buttons_next)
</snippet></ROW><ROW><id>11364417</id><snippet>Python Eggs</snippet></ROW><ROW><id>11364422</id><snippet>import dbus
session_bus = dbus.SessionBus()
purple_obj = session_bus.get_object("im.pidgin.purple.PurpleService",
                                    "/im/pidgin/purple/PurpleObject")
purple_int = dbus.Interface(purple_obj, 
                            "im.pidgin.purple.PurpleInterface")
my_account_id = purple_int.PurpleAccountsGetAllActive()[0] # or some other account from yours
conv = purple_int.PurpleConversationNew(1, my_account_id, "recipient's email")
conv_im = purple_int.PurpleConvIm(conv)
purple_int.PurpleConvImSend(conv_im, "This is your message")
</snippet></ROW><ROW><id>11364534</id><snippet>num_lines = sum(1 for line1 in open('C:/tmp/tmp1.txt'))
</snippet></ROW><ROW><id>11364534</id><snippet>len(open(filename, 'rb').readlines())</snippet></ROW><ROW><id>11364534</id><snippet>while (count &lt; num_lines):
    ...
    count = count + 1
</snippet></ROW><ROW><id>11364534</id><snippet>for i in range(num_lines):
    ...
</snippet></ROW><ROW><id>11364534</id><snippet>i</snippet></ROW><ROW><id>11364534</id><snippet>range</snippet></ROW><ROW><id>11364534</id><snippet>for</snippet></ROW><ROW><id>11364534</id><snippet>f</snippet></ROW><ROW><id>11364534</id><snippet>for line2[count] in f:</snippet></ROW><ROW><id>11364534</id><snippet>line2[count]</snippet></ROW><ROW><id>11364534</id><snippet>for</snippet></ROW><ROW><id>11364534</id><snippet>from itertools import islice

start_line = 0 # change this
filename = "foobar" # also this

with open(filename, 'rb') as f:
    for line in islice(f, start_line, None):
        print(line)
</snippet></ROW><ROW><id>11364643</id><snippet>['Monday 9am-10am', 'Monday 10am-11am', ...]</snippet></ROW><ROW><id>11364643</id><snippet>class Professor(object):
    def __init__(self, name, id):
        self.name = name
        self.id = id

class Course(object):
    def __init__(self, professor_ids, periods):
        self.professors = set(professor_ids)
        self.periods = periods  # where 'period' is an enum of all teaching periods in a week

from collections import Counter

def is_professor_double_booked(professor, all_courses):
    # find all courses taught by this professor
    pcourses = [course in all_courses if professor.id in course.professor_ids]
    # count how many times each period is booked
    period_bookings = Counter(p for course in pcourses for p in course.periods)
    # return (any period booked twice?)
    return len(period_bookings) and (period_bookings.most_common()[0][1] &gt; 1)

def professors_who_are_double_booked(professors, courses):
    for prof in professors:
        if is_professor_double_booked(prof, courses):
            print(prof.name)
</snippet></ROW><ROW><id>11364655</id><snippet>EditRecordHandler</snippet></ROW><ROW><id>11364655</id><snippet>get</snippet></ROW><ROW><id>11364655</id><snippet>class EditRecordHandler(webapp.RequestHandler):    
    def get(self):
        myid = self.request.get('id')
        self.response.out.write(myid)
</snippet></ROW><ROW><id>11364711</id><snippet>word[:2]    # The first two characters
word[2:]    # Everything except the first two characters
</snippet></ROW><ROW><id>11364711</id><snippet>s[:i] + s[i:]</snippet></ROW><ROW><id>11364711</id><snippet>s</snippet></ROW><ROW><id>11364711</id><snippet>word[1:3]</snippet></ROW><ROW><id>11364711</id><snippet>2</snippet></ROW><ROW><id>11364829</id><snippet>Photo</snippet></ROW><ROW><id>11364829</id><snippet>Gallery</snippet></ROW><ROW><id>11364829</id><snippet>python manage.py syncdb
</snippet></ROW><ROW><id>11364829</id><snippet>python manage.py sqlall yourapp
</snippet></ROW><ROW><id>11364829</id><snippet>woek_gallery_photos</snippet></ROW><ROW><id>11364829</id><snippet>python manage.py dbshell
</snippet></ROW><ROW><id>11364923</id><snippet>import pyproj
sat = pyproj.Proj('+proj=geos +lon_0 +h=035785831.0 +x_0=0 +y_0=0')
x,y =  sat( 81.299, 0, radians = False, errcheck = True)
print (x * 2.0 / 3712.0 ) / 1000.0
</snippet></ROW><ROW><id>11365005</id><snippet>*</snippet></ROW><ROW><id>11365005</id><snippet>ls /dev/tty.usbmodem*</snippet></ROW><ROW><id>11365005</id><snippet>import glob

print(glob.glob("/dev/tty.usbmodem*"))
</snippet></ROW><ROW><id>11365443</id><snippet>from collections import defaultdict

grid = ['094G.016', '094G.019', '194P.005', '194P.015', '093T.021', '093T.102', '094G.032']
d = defaultdict(list)

for item in grid:
    k,v = item.split('.')
    d[k].append(v)

result = ['%s.%s' % (k, '/'.join(v)) for k, v in d.items()]
</snippet></ROW><ROW><id>11365443</id><snippet>result</snippet></ROW><ROW><id>11365443</id><snippet>['093T.021/102', '194P.005/015', '094G.016/019/032']
</snippet></ROW><ROW><id>11365523</id><snippet>order_by('?')</snippet></ROW><ROW><id>11365656</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>11365656</id><snippet>from BeautifulSoup import BeautifulSoup
text = '''&lt;protein id="Q11" name="HUMAN" length="655" crc64="30E1C1D138"&gt;
    &lt;match id="G3DSA:3.30.160.60" name="ZC2f_H2/iegse_NA-bd" dbname="GE3D" status="T" evd="HMPfm"&gt;
      &lt;ipr id="IPR013087" name="Zinc finger, H2-type/inrase, D-bindg" tpe="Dain" /&gt;
      &lt;ln stt="114" end="142" sc="1.0E-8" /&gt;
    &lt;/match&gt;'''

soup= BeautifulSoup(text)

res=soup.findAll(dbname='GE3D')
</snippet></ROW><ROW><id>11365656</id><snippet>stt</snippet></ROW><ROW><id>11365656</id><snippet>ln</snippet></ROW><ROW><id>11365656</id><snippet>stt</snippet></ROW><ROW><id>11365656</id><snippet>stt_value = soup.findAll('ln')[0]['stt'] # u'114'
end_value = soup.findAll('ln')[0]['end'] # u'142'
</snippet></ROW><ROW><id>11365799</id><snippet>import sys
from shutil import copy
from subprocess import Popen

if __name__ == '__main__':
    try:
        copy('sdflsdk')
    except:
        pass
    print("here")
    try:
        Popen('sdflkjdklsdj')
    except:
        pass
</snippet></ROW><ROW><id>11365893</id><snippet>sqlalchemy.py</snippet></ROW><ROW><id>11365893</id><snippet>__main__</snippet></ROW><ROW><id>11365893</id><snippet>sqlalchemy.py</snippet></ROW><ROW><id>11365893</id><snippet>sqlalchemy</snippet></ROW><ROW><id>11365893</id><snippet>sqlalchemy</snippet></ROW><ROW><id>11365893</id><snippet>sys.modules</snippet></ROW><ROW><id>11365893</id><snippet>engine</snippet></ROW><ROW><id>11365932</id><snippet>*</snippet></ROW><ROW><id>11366139</id><snippet>&gt;&gt;&gt; def f():
...     yield 1
...     raise Exception
...     yield 2
... 
&gt;&gt;&gt; g = f()
&gt;&gt;&gt; next(g)
1
&gt;&gt;&gt; next(g)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in f
Exception
&gt;&gt;&gt; next(g)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</snippet></ROW><ROW><id>11366286</id><snippet>def rem0(data):
    for x in data:
        yield x.lstrip('0').replace(".0", ".")
</snippet></ROW><ROW><id>11366424</id><snippet>x</snippet></ROW><ROW><id>11366424</id><snippet>var</snippet></ROW><ROW><id>11366424</id><snippet>closures = []
for x in [1, 2, 3]:
    closures.append(lambda var=x: var)

for c in closures:
    print(c())
</snippet></ROW><ROW><id>11366424</id><snippet>make_closure = lambda var: lambda: var
closures = []
for x in [1, 2, 3]:
    closures.append(make_closure(x))

for c in closures:
    print(c())
</snippet></ROW><ROW><id>11366424</id><snippet>make_closure()</snippet></ROW><ROW><id>11366424</id><snippet>def make_closure(var):
    return lambda: var
</snippet></ROW><ROW><id>11367304</id><snippet>subcategory</snippet></ROW><ROW><id>11367304</id><snippet>Ad</snippet></ROW><ROW><id>11367304</id><snippet>ad.subcategory.add(*subcategory)</snippet></ROW><ROW><id>11367374</id><snippet>start = lcn.get("start")
end = lcn.get("end")
</snippet></ROW><ROW><id>11367374</id><snippet>start = int(lcn.get("start"))
end = int(lcn.get("end"))
</snippet></ROW><ROW><id>11367374</id><snippet>lcn.get</snippet></ROW><ROW><id>11367374</id><snippet>start = int(start+1)</snippet></ROW><ROW><id>11367374</id><snippet>start += 1</snippet></ROW><ROW><id>11367374</id><snippet>start += 1</snippet></ROW><ROW><id>11367374</id><snippet>start = start + 1</snippet></ROW><ROW><id>11367374</id><snippet>print "%s, %s" % (start, end,)</snippet></ROW><ROW><id>11367374</id><snippet>print "%d, %d" % (start, end)</snippet></ROW><ROW><id>11367374</id><snippet>start</snippet></ROW><ROW><id>11367374</id><snippet>end</snippet></ROW><ROW><id>11367374</id><snippet>%d</snippet></ROW><ROW><id>11367374</id><snippet>%s</snippet></ROW><ROW><id>11367374</id><snippet>while start &lt;= end:
    inRange = makeList.append[start]
    start += 1
    print inRange
</snippet></ROW><ROW><id>11367374</id><snippet>for i in range(start, end):
    makeList.append(i)
    print(i)
</snippet></ROW><ROW><id>11367374</id><snippet>for i in xrange(start, end):
    makeList.append(i)
    print i
</snippet></ROW><ROW><id>11367393</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; grid = np.random.random((5,5)) * 100
&gt;&gt;&gt; z = np.array([0, 10, 20, 60, 100.])
&gt;&gt;&gt; replace_value = np.array([np.nan, 5., 15., 40., 80.])

&gt;&gt;&gt; grid = replace_value[z.searchsorted(grid)]
&gt;&gt;&gt; print grid
[[ 15.  40.  80.  80.  15.]
[ 80.  40.  15.  80.  80.]
[ 15.  80.   5.  15.  40.]
[ 40.  80.   5.   5.  80.]
[ 40.   5.  80.   5.  40.]]
</snippet></ROW><ROW><id>11367397</id><snippet>Form</snippet></ROW><ROW><id>11367397</id><snippet>ModelForm</snippet></ROW><ROW><id>11367397</id><snippet>&lt;form class="well" action="{% url member-profile %}" method="POST" enctype="multipart/form-data"&gt;{% csrf_token %}
    &lt;fieldset&gt;
        {{ form.non_field_errors }}

        {{ form.display_name.label_tag }}
        &lt;span class="help-block"&gt;{{ form.display_name.help_text }}&lt;/span&gt;
        {{ form.display_name }}
        &lt;span class="error"&gt;{{ form.display_name.errors }}&lt;/span&gt;

        {{ form.biography.label_tag }}
        &lt;span class="help-block"&gt;{{ form.biography.help_text }}&lt;/span&gt;
        {{ form.biography }}
        &lt;span class="error"&gt;{{ form.biography.errors }}&lt;/span&gt;

        &lt;input type="submit" class="button primary" value="Save" /&gt;
    &lt;/fieldset&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>11367397</id><snippet>ModelForm</snippet></ROW><ROW><id>11367397</id><snippet>class ProfileForm(forms.ModelForm):
    """Profile form"""      
    class Meta:
        model = Profile
        exclude = ('user',)
</snippet></ROW><ROW><id>11367397</id><snippet>def profile(request):
    """Manage Account"""
    if request.user.is_anonymous() :
        # user isn't logged in
        messages.info(request, _(u'You are not logged in!'))
        return redirect('member-login')

    # get the currently logged in user's profile
    profile = request.user.profile

    # check to see if this request is a post
    if request.method == "POST":
        # Bind the post to the form w/ profile as initial
        form = ProfileForm(request.POST, instance=profile)
        if form.is_valid() :
            # if the form is valid
            form.save()
            messages.success(request, _(u'Success! You have updated your profile.'))
        else :
            # if the form is invalid
            messages.error(request, _(u'Error! Correct all errors in the form below and resubmit.'))
    else:
        # set the initial form values to the current user's profile's values
        form = ProfileForm(instance=profile)

    return render(
        request, 
        'membership/manage/profile.html', 
        {
            'form': form, 
        }
    )
</snippet></ROW><ROW><id>11367397</id><snippet>else</snippet></ROW><ROW><id>11367397</id><snippet>form = ProfileForm(instance=profile)</snippet></ROW><ROW><id>11367397</id><snippet>form = ProfileForm(request.POST, instance=profile)</snippet></ROW><ROW><id>11367444</id><snippet>np.hstack(b)
</snippet></ROW><ROW><id>11367708</id><snippet>else ' '</snippet></ROW><ROW><id>11367708</id><snippet>new = ''.join(c if c not in blacklist else ' ' for c in text)
</snippet></ROW><ROW><id>11367708</id><snippet>new = ''.join(' ' if c in blacklist else c for c in text)
</snippet></ROW><ROW><id>11367847</id><snippet>cp = ax.imshow(H.transpose()[::-1], interpolation='nearest', extent=extent, cmap=cm.jet)
</snippet></ROW><ROW><id>11367858</id><snippet>DOWNLOADER_MIDDLEWARES = { 'myproject.middlewares.TestDownloader': 400 }
</snippet></ROW><ROW><id>11367858</id><snippet>middlewares.py</snippet></ROW><ROW><id>11367858</id><snippet>myproject</snippet></ROW><ROW><id>11367858</id><snippet>TestDownloader</snippet></ROW><ROW><id>11367936</id><snippet>list[-1]</snippet></ROW><ROW><id>11367936</id><snippet>list[-2]</snippet></ROW><ROW><id>11367998</id><snippet>multi.start()</snippet></ROW><ROW><id>11367998</id><snippet>if __name__=="__main__"</snippet></ROW><ROW><id>11367998</id><snippet>multi.py</snippet></ROW><ROW><id>11367998</id><snippet>multi.start()</snippet></ROW><ROW><id>11367998</id><snippet>import multi
if __name__=="__main__":
    multi.start()
</snippet></ROW><ROW><id>11368158</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;kml xmlns="http://www.opengis.net/kml/2.2"&gt;
&lt;GroundOverlay&gt;
   &lt;name&gt;GroundOverlay.kml&lt;/name&gt;
   &lt;color&gt;7fffffff&lt;/color&gt;
   &lt;drawOrder&gt;1&lt;/drawOrder&gt;
   &lt;Icon&gt;
      &lt;href&gt;http://www.google.com/intl/en/images/logo.gif&lt;/href&gt;
      &lt;refreshMode&gt;onInterval&lt;/refreshMode&gt;
      &lt;refreshInterval&gt;86400&lt;/refreshInterval&gt;
      &lt;viewBoundScale&gt;0.75&lt;/viewBoundScale&gt;
   &lt;/Icon&gt;
   &lt;LatLonBox&gt;
      &lt;north&gt;37.83234&lt;/north&gt;
      &lt;south&gt;37.832122&lt;/south&gt;
      &lt;east&gt;-122.373033&lt;/east&gt;
      &lt;west&gt;-122.373724&lt;/west&gt;
      &lt;rotation&gt;45&lt;/rotation&gt;
   &lt;/LatLonBox&gt;
&lt;/GroundOverlay&gt;
&lt;/kml&gt;
</snippet></ROW><ROW><id>11368158</id><snippet>&lt;color&gt;</snippet></ROW><ROW><id>11368158</id><snippet>&lt;Icon&gt;</snippet></ROW><ROW><id>11368158</id><snippet>&lt;LatLonBox&gt;</snippet></ROW><ROW><id>11368186</id><snippet>&gt;&gt;&gt; seq = [(0, 1), (1, 2), (2, 2), (3, 2), (4, 1), (5, 3), (6, 3), (7, 2)]
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; [list(items) for key,items in groupby(seq,key=itemgetter(1))]
[[(0, 1)], [(1, 2), (2, 2), (3, 2)], [(4, 1)], [(5, 3), (6, 3)], [(7, 2)]]
</snippet></ROW><ROW><id>11368272</id><snippet>import shutil
shutil.move("%~dp0itself.py", "C:\\folder\\folder2")
</snippet></ROW><ROW><id>11368272</id><snippet>import subprocess
process = subprocess.Popen("move /-y %~dp0sarpedon.py C:\\Utility\\Config\\",
                           shell=True, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>11368307</id><snippet>reverse</snippet></ROW><ROW><id>11368307</id><snippet>complement</snippet></ROW><ROW><id>11368307</id><snippet>sequence = reverse(sequence)
sequence = complement(sequence)
return sequence
</snippet></ROW><ROW><id>11368376</id><snippet>from pylab import *
import matplotlib.colors

figure(figsize=(3,9))
Z = rand(6,10)

subplot(3,1,1)
c = pcolor(Z)
title('default: no edges')

subplot(3,1,2)
c = pcolor(Z, edgecolors='k', linewidths=4)
title('thick edges')
# use Z values greater than 0.5 as an example
Zbool = Z &gt; 0.5

subplot(3,1,3)
cmap = matplotlib.colors.ListedColormap(['red','grey'])
c = pcolor(Zbool, edgecolors='k', linewidths=4, cmap=cmap)
title('thick boolean edges gray')

show()
</snippet></ROW><ROW><id>11369280</id><snippet>PYTHONPATHDIR/utils</snippet></ROW><ROW><id>11369280</id><snippet>PYTHONPATHDIR/App1/utils.py</snippet></ROW><ROW><id>11369280</id><snippet>PYTHONPATHDIR</snippet></ROW><ROW><id>11369280</id><snippet>utils.hasClassIWantToImport</snippet></ROW><ROW><id>11369280</id><snippet>utils.py</snippet></ROW><ROW><id>11369280</id><snippet>App1</snippet></ROW><ROW><id>11369280</id><snippet>__init__.py</snippet></ROW><ROW><id>11369280</id><snippet>/path/to/utils</snippet></ROW><ROW><id>11369280</id><snippet>sys.path</snippet></ROW><ROW><id>11369280</id><snippet>utils.hasClassIWantToImport</snippet></ROW><ROW><id>11369280</id><snippet>from utils.hasClassIWantToImport import ClassIWant
</snippet></ROW><ROW><id>11369280</id><snippet>utils.py</snippet></ROW><ROW><id>11369280</id><snippet>from App1.utils import ClassIWantFromApp1
</snippet></ROW><ROW><id>11369280</id><snippet>utils.py</snippet></ROW><ROW><id>11369405</id><snippet>re.findall()</snippet></ROW><ROW><id>11369405</id><snippet>\(([^()]*)\)
</snippet></ROW><ROW><id>11369405</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'W:1.0,X:1.1(A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5,(F:0.6,G:0.7)H:0.8)Y:0.9'
&gt;&gt;&gt; re.findall(r'\(([^()]*)\)', s)
['C:0.3,D:0.4', 'F:0.6,G:0.7']
</snippet></ROW><ROW><id>11369405</id><snippet>\(        # literal '('
(         # start capturing group
  [^()]*    # any characters except '(' and ')', any number
)         # end capturing group
\)        # literal ')'
</snippet></ROW><ROW><id>11369405</id><snippet>re.findall()</snippet></ROW><ROW><id>11369694</id><snippet>from Tkinter import *
import tkFileDialog
import csv

class Application(Frame):
    def __init__(self, master = None):
        Frame.__init__(self,master)
        self.grid()
        self.createWidgets()

    def createWidgets(self):
        top = self.winfo_toplevel()
        self.menuBar = Menu(top)
        top["menu"] = self.menuBar
        self.subMenu = Menu(self.menuBar)
        self.menuBar.add_cascade(label = "File", menu = self.subMenu)
        self.subMenu.add_command( label = "Read Data",command = self.readCSV)


    def readCSV(self):
        self.filename = tkFileDialog.askopenfilename()
        f = open(self.filename,"rb")
        read = csv.reader(f, delimiter = ",")
        buttons = read.next()
        print
        for btn in buttons:
            new_btn = Button(self, text=btn, command=self.btnClick)
            new_btn.pack()

    def btnClick(self):
        pass

app = Application()
app.master.title("test")
app.mainloop()
</snippet></ROW><ROW><id>11369832</id><snippet>json</snippet></ROW><ROW><id>11369832</id><snippet>&gt;&gt;&gt; import json                                                                                                                                                                                                                                                                           
&gt;&gt;&gt; print json.__file__                                                                                                                                                                                                                                                                   
/home/areynolds/opt/lib/python2.5/site-packages/json.pyc
</snippet></ROW><ROW><id>11369888</id><snippet>messages</snippet></ROW><ROW><id>11369888</id><snippet>from twisted.internet.protocol import DatagramProtocol
from twisted.internet import reactor

class UdpListener(DatagramProtocol):
    callingLater = False

    messages = []

    def process(self):
        doSomethingWithMessages(self.messages)
        self.messages = []
        self.callingLater = False

    def datagramReceived(self, data, (host, port)):
        self.messages.append(data)
        if not self.callingLater:
            reactor.callLater(1.0, self.process)
            self.callingLater = True

listener = UdpListener()

reactor.listenUDP(5556, listener)
reactor.run()
</snippet></ROW><ROW><id>11369888</id><snippet>UdpListener</snippet></ROW><ROW><id>11369888</id><snippet>from twisted.internet.protocol import DatagramProtocol
from twisted.internet import reactor
import threading
import time

class UdpListener(DatagramProtocol):
    message_lock = threading.Lock()
    messages = []

    def datagramReceived(self, data, (host, port)):
        with self.message_lock:
            self.messages.append(data)

    def getAndClearMessages(self):
        with self.message_lock:
            res = self.messages
            self.messages = []
        return res

class Messenger(threading.Thread):

    listener = None

    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        while True:
            time.sleep(1)
            recivedMessages = self.listener.getAndClearMessages()
            length = len(recivedMessages)
            #doSomethingWithMessages(recivedMessages)
            print(length)

listener = UdpListener()

messenger = Messenger()
messenger.listener = listener
messenger.start()

reactor.listenUDP(5556, listener)
reactor.run()
</snippet></ROW><ROW><id>11370027</id><snippet>bisect</snippet></ROW><ROW><id>11370027</id><snippet>def reverse_binary_search(a, x, lo=0, hi=None):
    if lo &lt; 0:
        raise ValueError('lo must be non-negative')
    if hi is None:
        hi = len(a)
    while lo &lt; hi: 
        mid = (lo+hi)/2
        if x &gt; a[mid][4]:
            hi = mid 
        else:
            lo = mid+1
    return lo

my_list = [[3,0.99,1], [2,0.98,54], [10,.85,4], [1,0.7,10], [12,0.69,31], [12,0.65,43], [1.56,0]]
threshold = [0.97, 0.90, 0.83, 0.6]

index_list = []
last_index = 0
for t in threshold:
    last_index = reverse_binary_search(my_list, t, last_index) # next time start search from last_index
    index_list.append(last_index)
</snippet></ROW><ROW><id>11370027</id><snippet>def reverse_binary_search(a, threshold):
    lo = 0
    for t in threshold:
        if lo &lt; 0:
            raise ValueError('lo must be non-negative')
        hi = len(a)
        while lo &lt; hi: 
            mid = (lo+hi)/2
            if t &gt; a[mid][6]:
                hi = mid 
            else:
                lo = mid+1
        yield lo

my_list = [[3,0.99,1], [2,0.98,54], [10,.85,4], [1,0.7,10], [12,0.69,31], [12,0.65,43], [1.56,0]]
threshold = [0.97, 0.90, 0.83, 0.6]

index_list = list(reverse_binary_search(my_list, threshold))
</snippet></ROW><ROW><id>11370431</id><snippet>os.walk()</snippet></ROW><ROW><id>11370431</id><snippet>import os
import shutil

BASE = '.'
for root, dirs, files in os.walk(BASE):
    n = 0
    head = root
    while head and head != BASE:
        head, _ = os.path.split(head)
        n += 1
    if n == 3:
        for dir in dirs:
            shutil.rmtree(os.path.join(root, dir))
        del dirs[:]      # clear dirs so os.walk() doesn't look for subdirectories
</snippet></ROW><ROW><id>11370498</id><snippet>upload_url = blobstore.create_upload_url('/upload_handler', gs_bucket_name='my_bucket')
</snippet></ROW><ROW><id>11370662</id><snippet>def _gpg_pipe(args, data, passphrase):
    '''Pipe things through gpg.

    With the right args, this can be either an encryption or a decryption
    operation.

    For safety, we give the passphrase to gpg via a file descriptor.
    The argument list is modified to include the relevant options for that.

    The data is fed to gpg via a temporary file, readable only by
    the owner, to avoid congested pipes.

    '''

    # Open pipe for passphrase, and write it there. If passphrase is
    # very long (more than 4 KiB by default), this might block. A better
    # implementation would be to have a loop around select(2) to do pipe
    # I/O when it can be done without blocking. Patches most welcome.

    keypipe = os.pipe()
    os.write(keypipe[1], passphrase + '\n')
    os.close(keypipe[1])

    # Actually run gpg.

    argv = ['gpg', '--passphrase-fd', str(keypipe[0]), '-q', '--batch'] + args
    tracing.trace('argv=%s', repr(argv))
    p = subprocess.Popen(argv, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    out, err = p.communicate(data)

    os.close(keypipe[0])

    # Return output data, or deal with errors.
    if p.returncode: # pragma: no cover
        raise obnamlib.Error(err)

    return out


def encrypt_symmetric(cleartext, key):
    '''Encrypt data with symmetric encryption.'''
    return _gpg_pipe(['-c'], cleartext, key)


def decrypt_symmetric(encrypted, key):
    '''Decrypt encrypted data with symmetric encryption.'''
    return _gpg_pipe(['-d'], encrypted, key)
</snippet></ROW><ROW><id>11370674</id><snippet>dict1 = {data[u'dispURL']:int(data[u'number'])   for data in dict1[u'd'][u'results']}
dict2 = {data[u'url']:int(data[u'pos'])          for data in dict2[u'result_page']}
dict3 = {data[u'displayurl']:int(data[u'index']) for data in dict3[u'hits']}
</snippet></ROW><ROW><id>11370674</id><snippet>dict1 = {u'www.othersite.com': 2, u'www.site.com': 1}
dict2 = {u'www.greatsite.com': 1, u'www.site.com': 2}
dict3 = {u'www.othersite.com': 1, u'www.site.com': 2}
</snippet></ROW><ROW><id>11370674</id><snippet>for url in dict1:
    if dict1[url] &gt; dict2[url]:
        # do something
</snippet></ROW><ROW><id>11370821</id><snippet>plt.xlim([1,2**14])</snippet></ROW><ROW><id>11370930</id><snippet>for a in listofobs:
    print str( a['timestamp'] ), a['ip'], a['user']
</snippet></ROW><ROW><id>11370945</id><snippet>*</snippet></ROW><ROW><id>11370945</id><snippet>&gt;&gt;&gt; s="This is a regular sentence."
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'\w+\s?', s)
['This ', 'is ', 'a ', 'regular ', 'sentence']
</snippet></ROW><ROW><id>11370945</id><snippet>\b</snippet></ROW><ROW><id>11370945</id><snippet>&gt;&gt;&gt; re.findall(r'\w+\b', s)
['This', 'is', 'a', 'regular', 'sentence']
</snippet></ROW><ROW><id>11370945</id><snippet>re.match</snippet></ROW><ROW><id>11370945</id><snippet>re.group(0)</snippet></ROW><ROW><id>11370945</id><snippet>&gt;&gt;&gt; r = r"((\w+)(\s?))*"
&gt;&gt;&gt; s = "This is a regular sentence."
&gt;&gt;&gt; import re
&gt;&gt;&gt; m = re.match(r, s)
&gt;&gt;&gt; m.group(0)
'This is a regular sentence'
</snippet></ROW><ROW><id>11370981</id><snippet>cur.execute(
...     """INSERT INTO some_table (an_int, a_date, a_string)
...         VALUES (%s, %s, %s);""",
...     (10, datetime.date(2005, 11, 18), "O'Reilly"))
</snippet></ROW><ROW><id>11371197</id><snippet>python setup.py py2app --resources foo
</snippet></ROW><ROW><id>11371197</id><snippet>import Foundation
# ...
bundle = Foundation.NSBundle.mainBundle()
path = bundle.pathForResource_ofType_('foo', None)
</snippet></ROW><ROW><id>11371230</id><snippet>&gt;&gt;&gt; a, b, *rest = 1, 2, 3, 4, 5, 6, 7
&gt;&gt;&gt; a
1
&gt;&gt;&gt; rest
[3, 4, 5, 6, 7]
</snippet></ROW><ROW><id>11371384</id><snippet>raw_input</snippet></ROW><ROW><id>11371432</id><snippet>def isKeeper( duration ):
    if (duration &gt; (mean_duration + (devs * std_dev_one_test))) or \
            (duration &lt; (mean_duration - (devs * std_dev_one_test))):
        return False
    return True

durations = [duration for duration in durations if isKeeper(duration)]
</snippet></ROW><ROW><id>11371434</id><snippet>my_plist = plistlib.readPlist()
settings = my_plist["settings"]
for d in settings:
    if "scope" in d:
        if "comment" not in d["scope"]:
            print "A scope with no comment!"
    else:
        print "A dict with no scope!"
</snippet></ROW><ROW><id>11371666</id><snippet>&gt;&gt;&gt; Example = namedtuple('Example', ['list', 'tuple', 'property'])
&gt;&gt;&gt; e.list
[10, 20, 30]
&gt;&gt;&gt; e.tuple
(40, 50, 60)
&gt;&gt;&gt; e.property
'Boardwalk'
</snippet></ROW><ROW><id>11371684</id><snippet>#!/usr/bin/env python

import time
from pylab import *

ion() # turn interactive mode on

# initial data
x = arange(-8, 8, 0.1);
y1 = sin(x)
y2 = cos(x)

# initial plot
line1, line2, = plot(x, y1, 'r', x, y2, 'b')
line1.axes.set_xlim(-10, 10)
line1.axes.set_ylim(-2, 2)
line1.set_label("line1")
line2.set_label("line2")
legend()
grid()
draw()

# update line 1
for i in xrange(50):
    time.sleep(0.1)

    # update data
    y1 = sin(x + float(i) / 10)

    # update plot
    line1.set_ydata(y1)
    draw()

# update line 2
for i in xrange(50):
    time.sleep(0.1)

    # update data
    y2 = cos(x + float(i) / 10)

    # update plot
    line2.set_ydata(y2)
    draw()
</snippet></ROW><ROW><id>11371802</id><snippet>mydict</snippet></ROW><ROW><id>11371802</id><snippet>dictlist = [{'key1':'value1','key2':'value2'},
            {'key1':'value3','key2':'value4'}]
resultdict = {'result':dictlist}
mydict = {'a':resultdict}
</snippet></ROW><ROW><id>11371802</id><snippet>mydict['a'] 
</snippet></ROW><ROW><id>11371802</id><snippet>resultdict</snippet></ROW><ROW><id>11371802</id><snippet>mydict['a']['result']
</snippet></ROW><ROW><id>11371802</id><snippet>dictlist</snippet></ROW><ROW><id>11371802</id><snippet>mydict['a']['result'][0]
</snippet></ROW><ROW><id>11371802</id><snippet>dictlist</snippet></ROW><ROW><id>11371802</id><snippet>mydict['a']['result'][0]['key1']
</snippet></ROW><ROW><id>11371802</id><snippet>'value1'</snippet></ROW><ROW><id>11371802</id><snippet>for</snippet></ROW><ROW><id>11371802</id><snippet>mydict</snippet></ROW><ROW><id>11371802</id><snippet>for inner_dict in mydict['a']['result']: # remember that this returns `dictlist`
    for key in inner_dict:
        do_something(inner_dict, key)
</snippet></ROW><ROW><id>11371814</id><snippet>    if not self.e.get().isdigit():
        #take the string currently in the widget, all the way up to the last character
        txt = self.e.get()[:-1]
        #clear the widget of text
        self.e.delete(0, tk.END)
        #insert the new string, sans the last character
        self.e.insert(0, txt)
</snippet></ROW><ROW><id>11371814</id><snippet>if not self.e.get().isdigit():
     #get the length of the string in the widget, and subtract one, and delete everything up to the end
     self.e.delete(len(self.e.get)-1, tk.END)
</snippet></ROW><ROW><id>11371835</id><snippet>EOF</snippet></ROW><ROW><id>11371835</id><snippet>process.stdout.read(1)</snippet></ROW><ROW><id>11371835</id><snippet>EOF</snippet></ROW><ROW><id>11371835</id><snippet>select</snippet></ROW><ROW><id>11371835</id><snippet>process.stdout.readline().rstrip()</snippet></ROW><ROW><id>11371899</id><snippet>with self.assertRaises(CartDoesNotExist):
    Order.objects.create_order(member=self.member2, member_slot=self.memslot, order_type="Normal"))
</snippet></ROW><ROW><id>11371899</id><snippet>self.assertRaises(CartDoesNotExist, Order.objects.create_order, member=self.member2, member_slot=self.memslot, order_type="Normal")
</snippet></ROW><ROW><id>11371951</id><snippet>for key, value in Terrain.__dict__.items():
    if not key.startswith("__"):
        print(...)
</snippet></ROW><ROW><id>11372059</id><snippet>import shutil, random, os

filenames = random.sample(os.listdir(dirpath), 100)
for fname in filenames:
    srcpath = os.path.join(dirpath, fname))
    shutil.copyfile(srcpath, destDirectory)
</snippet></ROW><ROW><id>11372073</id><snippet>class Movie(models.Model):
    format = models.ForeignKey(MovieFormat)
    region = models.ForeignKey(Region)
    date = models.Datefield()
    ... other fields you want, like title for instance
</snippet></ROW><ROW><id>11372073</id><snippet>class Movie(models.Model):
    ... fields that you want for a movie, like foreing key to a producer for instance

class MovieEdition(models.Model):
    movie = models.ForeignKey(Movie)
    format = models.ForeignKey(MovieFormat)
    region = models.ForeignKey(Region)
    date = models.Datefield()
    ... other fields, like movie title for that region (the related region)
</snippet></ROW><ROW><id>11372206</id><snippet>var createTimer = function(fn) {
    return function() {
        var start = new Date();
        var result = fn.apply(this, arguments);
        console.log("Took " + (new Date() - start) + " ms.");
        return result;
    }
};

var test = function(a, b, c) {
    return a * b + c;
}

test = createTimer(test);

console.log(test(3, 4, 5));

// Took 0 ms.
// 17
</snippet></ROW><ROW><id>11372206</id><snippet>runTimerAround(test, 3, 4, 5);
</snippet></ROW><ROW><id>11372467</id><snippet>In [1]: import scipy.stats as st

In [9]: st.mstats.mquantiles([23,56,67,123,99,17],prob=[0.5],alphap=0.5,betap=.5)
Out[9]: array([ 61.5])

In [10]: st.mstats.mquantiles([23,56,67,123,99,17],prob=[0.33,0.66],alphap=0.5,betap=.5)
Out[10]: array([ 38.84,  81.72])

In [11]: st.mstats.mquantiles([23,56,67,123,99,17],prob=[0.25,0.5,0.75],alphap=0.5,betap=.5)
Out[11]: array([ 23. ,  61.5,  99. ])
</snippet></ROW><ROW><id>11372633</id><snippet>__init__</snippet></ROW><ROW><id>11372633</id><snippet>class BookForm(forms.ModelForm):

    class Meta:
        model = Book
        # exclude the owner and set it in the view
        exclude = ('owner',) 

    def __init__(self, *args, **kwargs):
        super(BookForm, self).__init__(*args, **kwargs)
        if self.instance.owner:
            self.fields['author'].queryset = Author.objects.filter(owner=self.instance.owner)
</snippet></ROW><ROW><id>11372633</id><snippet>def add_book(request):
    book = Book(owner=request.owner)
    form = BookForm(data=request.POST or None, instance=book)
    if form.is_valid():
        book.save()
        return HttpResponseRedirect('/success-url/')
    return render(request, "my_template.html", {'form': form})
</snippet></ROW><ROW><id>11372740</id><snippet>QTreeWidgetItem ( const QStringList &amp; strings, int type = Type )</snippet></ROW><ROW><id>11372740</id><snippet>row[0]</snippet></ROW><ROW><id>11372740</id><snippet>QStringList</snippet></ROW><ROW><id>11372740</id><snippet>self.treeWidget.setColumnCount(10)</snippet></ROW><ROW><id>11372740</id><snippet>item = QTreeWidgetItem()
item.setText(0, unicode(row[0]))
self.treeWidget.insertTopLevelItem(0, item)
</snippet></ROW><ROW><id>11372740</id><snippet>items = []
for row in c.fetchall():
    item = QTreeWidgetItem()
    item.setText(0, unicode(row[0]))
    items.append(item)
self.treeWidget.insertTopLevelItems(0, items)
</snippet></ROW><ROW><id>11372810</id><snippet>if k == 0x63 or k == 0x43:
    print 'capturing!'
    cv.SaveImage("test.jpg",frame) 
</snippet></ROW><ROW><id>11372897</id><snippet>s = load_up_users_dictionary()

for word in text_to_check:
    if word not in s:
        new_words = s.suggest( word )
        replace_incorrect_word( word, new_words[0] )#Pick the first word from the returned list.
</snippet></ROW><ROW><id>11372994</id><snippet>self.__notifier.process_events()</snippet></ROW><ROW><id>11372994</id><snippet>self.__loop</snippet></ROW><ROW><id>11372994</id><snippet>pyinotify.ThreadedNotifier</snippet></ROW><ROW><id>11372994</id><snippet>class NotificationService():
    def __init__(self, path, callback):
        self.path = path
        self.callback = callback

    def start(self):
        mask = pyinotify.IN_CREATE | pyinotify.IN_DELETE \
            | pyinotify.IN_MODIFY
        w = pyinotify.WatchManager()
        wdd = w.add_watch(self.path, mask, rec=True, auto_add=True)
        self.__notifier = pyinotify.ThreadedNotifier(w, fs_event_handler(self.callback))
        self.__notifier.start()
        print 'Service Running...'

    def run(self):
        self.start()

    def stop(self):
        self.__notifier.stop()
        print 'Service Stopped'
</snippet></ROW><ROW><id>11373075</id><snippet>var user = [{% for i in user %}{{ i }}{% if forloop.last %} {%else%} , {%endif%} {% endfor %}];</snippet></ROW><ROW><id>11373467</id><snippet>Run, ID, Var
1, 1, 7
1, 2, 9
1, 3, 4
2, 1, 3
2, 2, 4
2, 3, 8
</snippet></ROW><ROW><id>11373467</id><snippet>ID, Var2, Var3
1, 0.89, 0.10
2, 0.45, 0.98
3, 0.27, 0.05
8, 0.4, 0.5
</snippet></ROW><ROW><id>11373467</id><snippet>import csv
from pprint import pprint 

data = dict([(row['ID'], row) for row in csv.DictReader(open('data.csv', 'rb'), skipinitialspace = True)])
values = []
for row in csv.DictReader(open('output.csv', 'rb'), skipinitialspace = True):
    values.append(row)
    values[-1].update(data[row['ID']])

&gt;&gt;&gt; pprint(values)
[{'ID': '1', 'Run': '1', 'Var': '7', 'Var2': '0.89', 'Var3': '0.10'},
 {'ID': '2', 'Run': '1', 'Var': '9', 'Var2': '0.45', 'Var3': '0.98'},
 {'ID': '3', 'Run': '1', 'Var': '4', 'Var2': '0.27', 'Var3': '0.05'},
 {'ID': '1', 'Run': '2', 'Var': '3', 'Var2': '0.89', 'Var3': '0.10'},
 {'ID': '2', 'Run': '2', 'Var': '4', 'Var2': '0.45', 'Var3': '0.98'},
 {'ID': '3', 'Run': '2', 'Var': '8', 'Var2': '0.27', 'Var3': '0.05'}]
&gt;&gt;&gt;    
</snippet></ROW><ROW><id>11373467</id><snippet>fieldnames = ['Run', 'ID', 'Var', 'Var2', 'Var3']
f = open('combined.csv', 'wb')
csvwriter = csv.DictWriter(f, fieldnames = fieldnames)
csvwriter.writerow(dict((fn,fn) for fn in fieldnames)) # 2.7 has writeheader, which is cleaner
[csvwriter.writerow(row) for row in values]
f.close()


$ cat combined.csv 
Run,ID,Var,Var2,Var3
1,1,7,0.89,0.10
1,2,9,0.45,0.98
1,3,4,0.27,0.05
2,1,3,0.89,0.10
2,2,4,0.45,0.98
2,3,8,0.27,0.05
</snippet></ROW><ROW><id>11373472</id><snippet>document.onkeydown = function(e) {
    if (e.ctrlKey &amp;&amp; e.keyCode === 65) {
        alert('not allowed');
    }
     if (e.ctrlKey &amp;&amp; e.keyCode === 67) {
        alert('not allowed');
    }
     if (e.ctrlKey &amp;&amp; e.keyCode === 86) {
        alert('not allowed');
    }

    return false;
};​
</snippet></ROW><ROW><id>11373472</id><snippet>&lt;SCRIPT TYPE="text/javascript"&gt; 
&lt;!-- 
//Disable right click script 
//visit http://www.rainbow.arch.scriptmania.com/scripts/ 
var message="Sorry, right-click has been disabled"; 
/////////////////////////////////// 
function clickIE() {if (document.all) {(message);return false;}} 
function clickNS(e) {if 
(document.layers||(document.getElementById&amp;&amp;!document.all)) { 
if (e.which==2||e.which==3) {(message);return false;}}} 
if (document.layers) 
{document.captureEvents(Event.MOUSEDOWN);document.onmousedown=clickNS;} 
else{document.onmouseup=clickNS;document.oncontextmenu=clickIE;} 
document.oncontextmenu=new Function("return false") 
// --&gt; 
&lt;/SCRIPT&gt; 
</snippet></ROW><ROW><id>11373587</id><snippet>c = lambda v: self.cost(x, y_vals, v)
g = lambda v: self.cost(x, y_vals, v); self.back_prop(y_vals, v)
#             ------------------------
</snippet></ROW><ROW><id>11373605</id><snippet>&gt;&gt;&gt; bs = [(1, 2, 3), (1, 2, 4), (1, 2, 5)]

&gt;&gt;&gt; ["".join(map(str, b)) for b in bs]
['123', '124', '125']
</snippet></ROW><ROW><id>11373605</id><snippet>int()</snippet></ROW><ROW><id>11373819</id><snippet>PIPE</snippet></ROW><ROW><id>11373819</id><snippet>SOCKET</snippet></ROW><ROW><id>11373819</id><snippet>SOCKET</snippet></ROW><ROW><id>11373929</id><snippet>digitize</snippet></ROW><ROW><id>11373929</id><snippet>accumulate</snippet></ROW><ROW><id>11373929</id><snippet>random_sample</snippet></ROW><ROW><id>11373929</id><snippet>import numpy as np
from numpy.random import random_sample

def weighted_values(values, probabilities, size):
    bins = np.add.accumulate(probabilities)
    return values[np.digitize(random_sample(size), bins)]

values = np.array([1.1, 2.2, 3.3])
probabilities = np.array([0.2, 0.5, 0.3])

print weighted_values(values, probabilities, 10)
#Sample output:
[ 2.2  2.2  1.1  2.2  2.2  3.3  3.3  2.2  3.3  3.3]
</snippet></ROW><ROW><id>11373929</id><snippet>accumulate</snippet></ROW><ROW><id>11373929</id><snippet>0</snippet></ROW><ROW><id>11373929</id><snippet>1</snippet></ROW><ROW><id>11373929</id><snippet>random_sample</snippet></ROW><ROW><id>11373929</id><snippet>digitize</snippet></ROW><ROW><id>11374198</id><snippet>&lt;pre&gt;&lt;/pre&gt;</snippet></ROW><ROW><id>11374198</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>11374198</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>11374198</id><snippet>&gt;&gt;&gt; s
'hello\nthere\r\nthis\n\ris a test'
&gt;&gt;&gt; r = '&lt;br /&gt;'
&gt;&gt;&gt; s.replace('\r\n',r).replace('\n\r',r).replace('\r',r).replace('\n',r)
'hello&lt;br /&gt;there&lt;br /&gt;this&lt;br /&gt;is a test'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11374542</id><snippet>import random

def get_record(line):
  num = random.randint(0, 3)
  if num == 3:
    raise Exception("3 means danger")
  return line


def parsefunc(stream):
  for line in stream:
    try:
      rec = get_record(line)
    except Exception as e:
      yield (None, e)
    else:
      yield (rec, None)

if __name__ == '__main__':
  with open('temp.txt') as f:
    for rec, e in parsefunc(f):
      if e:
        print "Got an exception %s" % e
      else:
        print "Got a record %s" % rec
</snippet></ROW><ROW><id>11374732</id><snippet>from visual import sphere,color

count = 3
R=0.3

for x in range(-count,count+1):
    for y in range(-count,count+1):
        for z in range(-count,count+1):
            if ((x+y+z+3*count)%2) == 0:
                sphere(pos=[x,y,z],radius=R,color=color.green)
            else:
                sphere(pos=[x,y,z],radius=R,color=color.yellow)
</snippet></ROW><ROW><id>11374884</id><snippet>app.yaml</snippet></ROW><ROW><id>11374884</id><snippet>- url: /blog(/.*)*
  script: blog.app
</snippet></ROW><ROW><id>11374884</id><snippet>/blog</snippet></ROW><ROW><id>11374884</id><snippet>/blog/</snippet></ROW><ROW><id>11374884</id><snippet>/blog/signup</snippet></ROW><ROW><id>11374884</id><snippet>/blog/signin</snippet></ROW><ROW><id>11375688</id><snippet>
python3 test.py
</snippet></ROW><ROW><id>11375688</id><snippet>file &lt;code&gt;which python</snippet></ROW><ROW><id>11375732</id><snippet>\d{4}\s?\d{6}</snippet></ROW><ROW><id>11375732</id><snippet>.</snippet></ROW><ROW><id>11375903</id><snippet>property</snippet></ROW><ROW><id>11375903</id><snippet>class XsiDescriptor(object):
    def __init__(self, xsi):
        self.xsi = xsi

    def __get__(self, instance, cls=None):
        if instance is None:
            return self
        key = "%s.%s" % (instance.object, self.xsi)
        return xsi.getValue(key)

    def __set__(self, instance, value):
        key = "%s.%s" % (instance.object, self.xsi)
        xsi.setValue(key, value)


  class Transform(object):
      # your init etc here

      tx = XsiDescriptor("kine.local.posx")
      ty = XsiDescriptor("kine.local.posy")

      # etc
</snippet></ROW><ROW><id>11376003</id><snippet>csv.writer</snippet></ROW><ROW><id>11376003</id><snippet>row[1][0:3]</snippet></ROW><ROW><id>11376028</id><snippet>listdata1.insert(1, raw_input("Enter first thing into DB: ")
</snippet></ROW><ROW><id>11376028</id><snippet>listdata1</snippet></ROW><ROW><id>11376028</id><snippet>listdata.append( raw_input("Enter first thing into DB: ") )</snippet></ROW><ROW><id>11376028</id><snippet>listdata[0]</snippet></ROW><ROW><id>11376030</id><snippet>0.2 = 1/5</snippet></ROW><ROW><id>11376030</id><snippet>1/3</snippet></ROW><ROW><id>11376030</id><snippet>decimal</snippet></ROW><ROW><id>11376030</id><snippet>def drange(start, step):
    r = start
    while r &gt;= 0:
        yield r
        r += step
print list(drange(2, -0.2))
</snippet></ROW><ROW><id>11376030</id><snippet>drange</snippet></ROW><ROW><id>11376115</id><snippet>plot_date(timeSeries, data)
</snippet></ROW><ROW><id>11376192</id><snippet>obj = json.loads(Json)
print("DomainCount: %d" % obj['domainCount'])
print("DomainArray: %s" % '\n'.join(e[0] for e in obj['domainArray'])
# etc
</snippet></ROW><ROW><id>11376479</id><snippet>True</snippet></ROW><ROW><id>11376479</id><snippet>False</snippet></ROW><ROW><id>11376479</id><snippet>False</snippet></ROW><ROW><id>11376479</id><snippet>from gi.repository import Gtk
from gi.repository import GObject

class MyWindow(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title="Hello World")
        vbox = Gtk.VBox()
        self.add(vbox)
        self.connect("destroy", lambda x: Gtk.main_quit())
        button = Gtk.Button(label="Click Here")
        vbox.pack_start(button, True, True, 0)
        button = Gtk.Button(label="Or There")
        vbox.pack_start(button, True, True, 0)
        self.show_all()

class Foo:
    def __init__(self):
        self.hook_id = GObject.add_emission_hook(Gtk.Button, "button-press-event", self.on_button_press)
        GObject.add_emission_hook(Gtk.Button, "button-release-event", self.on_button_rel)

    def on_button_press(self, *args):
        print "Press signal received"
        return False # Hook is removed

    def on_button_rel(self, *args):
        print "Release signal received"
        # This will result in a warning
        GObject.remove_emission_hook(Gtk.Button, "button-press-event",self.hook_id)
        return True


win = MyWindow()
foo = Foo()
Gtk.main()
</snippet></ROW><ROW><id>11376768</id><snippet>import urllib2
import urllib
import urlparse

# this was the header and data strings you already had
headers = 'baz=3&amp;foo=1&amp;bar=2'
data = 'baz=3&amp;foo=1&amp;bar=2'

header_dict = dict(urlparse.parse_qsl(headers))

r = urllib2.Request('http://www.foo.com', data, headers)
resp = urllib2.urlopen(r)
</snippet></ROW><ROW><id>11376768</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>11376768</id><snippet>Key: Value</snippet></ROW><ROW><id>11376802</id><snippet>#!/usr/bin/python
import csv

def navigation(iterable):
    iterator = iter(iterable)
    prev = None
    item = iterator.next()

    for next in iterator:
        yield (prev, item, next)
        prev = item
        item = next

    yield (prev, item, None)

with open('input.csv') as csv_input:
    with open('output.csv', 'w') as csv_output:
        old_data = []
        new_data = []

        for row in csv.reader(csv_input):
            old_data += row

        for index, (_prev, item, _next) in enumerate(navigation(old_data)):
            if _next != item:
                if _prev != item:
                    row = [item, 'missing value']
                    new_data.append(row if index % 2 == 0 else row[::-1])
            else:
                new_data.append([item, _next])

        writer = csv.writer(csv_output, delimiter=',', lineterminator='\n')
        writer.writerows(new_data)
</snippet></ROW><ROW><id>11376817</id><snippet>with</snippet></ROW><ROW><id>11376817</id><snippet>try/finally</snippet></ROW><ROW><id>11376817</id><snippet>with</snippet></ROW><ROW><id>11376817</id><snippet>nested()</snippet></ROW><ROW><id>11376817</id><snippet>with a as x:
    with b as y:
        with c as z:
            # Perform operation
</snippet></ROW><ROW><id>11376817</id><snippet>with nested(a, b, c) as (x, y, z):
             # Perform operation
</snippet></ROW><ROW><id>11376817</id><snippet>nested()</snippet></ROW><ROW><id>11376817</id><snippet>with a as x, b as y, c as z:
             # Perform operation
</snippet></ROW><ROW><id>11376817</id><snippet>with</snippet></ROW><ROW><id>11376817</id><snippet>from itertools import izip
with open("/etc/passwd") as a, open("/etc/group") as b, open("/etc/shadow") as c:
    for lines in izip(a,b,c):
        print map(lambda x: x.split(':')[0], lines)
</snippet></ROW><ROW><id>11376817</id><snippet>ziptogether.py</snippet></ROW><ROW><id>11376817</id><snippet>python ziptogether.py</snippet></ROW><ROW><id>11376817</id><snippet>/etc/shadow</snippet></ROW><ROW><id>11376817</id><snippet>sudo python ziptogether.py</snippet></ROW><ROW><id>11376851</id><snippet>&gt;&gt;&gt; s='\u6b22\u8fce\u63d0\u4ea4\u5fae\u535a\u641c\u7d22\u4f7f\u7528\u53cd\u9988\uff0c\u8bf7\u76f4\u63a5'
&gt;&gt;&gt; print s.decode('unicode-escape')
欢迎提交微博搜索使用反馈，请直接
</snippet></ROW><ROW><id>11376851</id><snippet>&gt;&gt;&gt; s.decode('unicode-escape').encode('utf8')
</snippet></ROW><ROW><id>11377159</id><snippet>print cat.findNext().findAll('li')
</snippet></ROW><ROW><id>11377216</id><snippet>    form.jobs[0].company.choices = company_list
</snippet></ROW><ROW><id>11377216</id><snippet>    from wtforms.ext.sqlalchemy.fields import QuerySelectField

    def fill_field():
         return Model.query

    myfield = QuerySelectField(query_factory=fill_field)
</snippet></ROW><ROW><id>11377216</id><snippet>    def your_view():
        form = YourForm()
        form.fieldname.choices = choice_list
        # Here comes your code for GET and POST request both
</snippet></ROW><ROW><id>11377271</id><snippet>    from flaskext.principal
</snippet></ROW><ROW><id>11377271</id><snippet>    from flask.ext.principal
</snippet></ROW><ROW><id>11377278</id><snippet>o_airodump, unused_stderr = airodump.communicate(timeout=15)
airodump.kill()
</snippet></ROW><ROW><id>11377304</id><snippet>def flatten(nested, depth=0):
    try:
        print("{}Iterate on {}".format('  '*depth, nested))
        for sublist in nested:
            for element in flatten(sublist, depth+1):
                print("{}got back {}".format('  '*depth, element))
                yield element
    except TypeError:
        print('{}not iterable - return {}'.format('  '*depth, nested))
        yield nested
</snippet></ROW><ROW><id>11377304</id><snippet>list(flatten([[1,2],3]))
</snippet></ROW><ROW><id>11377304</id><snippet>Iterate on [[1, 2], 3]
  Iterate on [1, 2]
    Iterate on 1
    not iterable - return 1
  got back 1
got back 1
    Iterate on 2
    not iterable - return 2
  got back 2
got back 2
  Iterate on 3
  not iterable - return 3
got back 3
</snippet></ROW><ROW><id>11377437</id><snippet>numpy.where</snippet></ROW><ROW><id>11377437</id><snippet>numpy.argmax</snippet></ROW><ROW><id>11377437</id><snippet>peakIndex = numpy.argmax(myArray)
</snippet></ROW><ROW><id>11377437</id><snippet>numpy.argmax</snippet></ROW><ROW><id>11377437</id><snippet>myArray</snippet></ROW><ROW><id>11377437</id><snippet>peakIndexTuple = numpy.unravel_index(numpy.argmax(myArray), myArray.shape)
</snippet></ROW><ROW><id>11377533</id><snippet>re.findall(r'.+?(?=\d\d\/|$)',s,re.DOTALL)
</snippet></ROW><ROW><id>11377533</id><snippet>re.DOTALL</snippet></ROW><ROW><id>11377533</id><snippet>.</snippet></ROW><ROW><id>11377533</id><snippet>r</snippet></ROW><ROW><id>11377533</id><snippet>list(zip(*[iter(s.splitlines())]*4))
</snippet></ROW><ROW><id>11377603</id><snippet>pip install --upgrade GitPython
</snippet></ROW><ROW><id>11377887</id><snippet>extra</snippet></ROW><ROW><id>11377940</id><snippet>var + [4]</snippet></ROW><ROW><id>11377940</id><snippet>var</snippet></ROW><ROW><id>11377940</id><snippet>4</snippet></ROW><ROW><id>11377940</id><snippet>var</snippet></ROW><ROW><id>11377940</id><snippet>var.append(4)</snippet></ROW><ROW><id>11377940</id><snippet>var=[0]</snippet></ROW><ROW><id>11377940</id><snippet>append</snippet></ROW><ROW><id>11377940</id><snippet>def foo(var=None):
    if var is None: var = [0]
</snippet></ROW><ROW><id>11377990</id><snippet>len(userdesigns)</snippet></ROW><ROW><id>11377990</id><snippet>userdesigns.count()</snippet></ROW><ROW><id>11377990</id><snippet>userdesigns</snippet></ROW><ROW><id>11377990</id><snippet>&gt;&gt;&gt; m = Model1.objects.filter(desadder=1)
&gt;&gt;&gt; len(m)
(0.000) SELECT "app1_model1"."id", "app1_model1"."desadder", "app1_model1"."test" FROM "app1_model1" WHERE "app1_model1"."desadder" = 1 ; args=(1,)
2
&gt;&gt;&gt; m[0]
&lt;Model1: Model1 object&gt;
&gt;&gt;&gt; m = Model1.objects.filter(desadder=1)
&gt;&gt;&gt; len(m)
(0.000) SELECT "app1_model1"."id", "app1_model1"."desadder", "app1_model1"."test" FROM "app1_model1" WHERE "app1_model1"."desadder" = 1 ; args=(1,)
2
&gt;&gt;&gt; m[0]
&lt;Model1: Model1 object&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11378260</id><snippet>def isCellNeighbor(c1, c2):
   if abs(c1.x - c2.x) == 1: return True
   if abs(c1.y - c2.y) == 1: return True
   return False
</snippet></ROW><ROW><id>11378288</id><snippet>def sortedfilter(in_fname, filter_fname, out_fname):
    with open(in_fname) as inf, open(filter_fname) as fil, open(out_fname, 'w') as outf:
        ins = inf.next()
        try:
            for fs in fil:
                while ins &lt; fs:
                    outf.write(ins)
                    ins = inf.next()
                while ins == fs:
                    ins = inf.next()
        except StopIteration:
            # reached end of inf before end of fil
            pass
        else:
            # reached end of fil first, pass rest of inf through
            file_output.writelines(file_input.readlines())
</snippet></ROW><ROW><id>11378732</id><snippet>WebView</snippet></ROW><ROW><id>11378732</id><snippet>navigation-policy-decision-requested</snippet></ROW><ROW><id>11378732</id><snippet>policy_decision.ignore()</snippet></ROW><ROW><id>11378810</id><snippet>@tornado.web.asynchronous
def get(self):
    self.friends = []
    self.facebook_request("/me/friends", access_token=user["access_token"], callback=self.async_callback(self._save_user_profile))

@tornado.web.asynchronous
def _save_user_profile(self, stream):
    self.friends += stream['data']
    if stream['paging'].get('next', None) != None:
        next_url = stream['paging']['next']
        #THIS WOULD BE WHERE YOU GET THE NEXT REQUEST

    else:
        #THIS WOULD BE WHERE YOU DO WHATEVER YOU WANT WITH THE FRIENDS LIST
</snippet></ROW><ROW><id>11378873</id><snippet>x = self.megacity.resourceloader.sound.mcintro
x.play()
</snippet></ROW><ROW><id>11378994</id><snippet>from abc import ABCMeta, abstractmethod

class Polygon(object):

    __metaclass__ = ABCMeta

    @abstractmethod
    def compute_area(self): 
        pass


    def __init__(self):
        self._width = None
        self._height = None

    @property
    def width(self):
        getting_variable_value()
        return self._width

    @width.setter
    def width(self, width):
        setting_variable_value()
        self._width = width

    @property
    def height(self):
        getting_variable_value()
        return self._height

    @height.setter
    def height(self, height):
        setting_variable_value()
        self._height = height



class Triangle(Polygon):
    def compute_area(self):
        return 0.5 * self.width * self.height


if __name__ == "__main__":
    tri = Triangle()
    tri.height = 20
    tri.width = 30
    print "Area of the triangle = ", tri.compute_area()
</snippet></ROW><ROW><id>11379165</id><snippet>Overload</snippet></ROW><ROW><id>11379165</id><snippet>__get__</snippet></ROW><ROW><id>11379165</id><snippet>def __get__(self, obj, cls):
    # Called on access of MyClass.print_first_item.
    # We return a wrapper which calls our 
    print "get", self, obj, cls
    if obj is None:
        # a function would do some checks here, but we leave that.
        return self
    else:
        return lambda *a, **k: self(obj, *a, **k)
</snippet></ROW><ROW><id>11379165</id><snippet>Overload</snippet></ROW><ROW><id>11379165</id><snippet>object.meth(1, 2)
</snippet></ROW><ROW><id>11379165</id><snippet>object.__dict__['meth'].__get__(object, type(object))(1, 2)
</snippet></ROW><ROW><id>11379165</id><snippet>__get__()</snippet></ROW><ROW><id>11379165</id><snippet>self</snippet></ROW><ROW><id>11379165</id><snippet>realmethod = object.__dict__['meth'].__get__(object, type(object))
realmethod(1, 2)
</snippet></ROW><ROW><id>11379165</id><snippet>realmethod</snippet></ROW><ROW><id>11379165</id><snippet>self</snippet></ROW><ROW><id>11379165</id><snippet>meth(object, 1, 2)
</snippet></ROW><ROW><id>11379165</id><snippet>__get__</snippet></ROW><ROW><id>11379332</id><snippet>import json

params = json.dumps({"id":11111,"lastname":"oojamalip"})
# then
response, content = http.request(url, 'POST', body=params, headers={'Content-type':'application/json'})
</snippet></ROW><ROW><id>11379350</id><snippet>twitsearch['results']
</snippet></ROW><ROW><id>11379350</id><snippet>text</snippet></ROW><ROW><id>11379350</id><snippet>text_list = [x['text'] for x in twitsearch['results']]
</snippet></ROW><ROW><id>11379429</id><snippet>sudo pip install qrcode</snippet></ROW><ROW><id>11379429</id><snippet>qrcode</snippet></ROW><ROW><id>11379429</id><snippet>pyqrcode-0.2.1/qrcode</snippet></ROW><ROW><id>11379429</id><snippet>~/sys/pyqrcode-0.2.1$ python
Python 2.7.3 (default, Apr 20 2012, 22:44:07) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import qrcode
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "qrcode/__init__.py", line 6, in &lt;module&gt;
    from qrcode import _qrcode
ImportError: cannot import name _qrcode
&gt;&gt;&gt; 
~/sys/pyqrcode-0.2.1$ cd ~
~$ python
Python 2.7.3 (default, Apr 20 2012, 22:44:07) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import qrcode
&gt;&gt;&gt; qrcode
&lt;module 'qrcode' from '/usr/local/lib/python2.7/dist-packages/qrcode/__init__.pyc'&gt;
</snippet></ROW><ROW><id>11379511</id><snippet>regex = re.compile(...)
new_list = [s for s in old_list if regex.match(s)]
</snippet></ROW><ROW><id>11379511</id><snippet>filter()</snippet></ROW><ROW><id>11379511</id><snippet>new_list = filter(regex.match, old_list)
</snippet></ROW><ROW><id>11379550</id><snippet>writer</snippet></ROW><ROW><id>11379564</id><snippet>Update `var user = [{% for i in user_list %}{{ i }}{% if forloop.last %}{%else%},{%endif%}{% endfor %}];
</snippet></ROW><ROW><id>11379564</id><snippet>var user = [{% for i in user_list %}"{{ i }}"{% if forloop.last %}{%else%},{%endif%}{% endfor %}];`
</snippet></ROW><ROW><id>11379573</id><snippet>from visual import *

box(pos=(-1,-1,-2), length=2, height=2, width=4, material=materials.wood)
</snippet></ROW><ROW><id>11379573</id><snippet>from visual import *
import Image

im = Image.open('flower.jpg')  # size must be power of 2, ie 128 x 128
tex = materials.texture(data=im, mapping='rectangular')

box(material=tex)
</snippet></ROW><ROW><id>11379573</id><snippet>box(material=materials.loadTGA(filename))
</snippet></ROW><ROW><id>11379573</id><snippet>tex = materials.texture(data=loadTGA(filename), mapping='rectangular')
box(material=tex)
</snippet></ROW><ROW><id>11379606</id><snippet>.emit()</snippet></ROW><ROW><id>11379606</id><snippet>Logging.getLogger(__name__)</snippet></ROW><ROW><id>11379606</id><snippet>.error(logText)</snippet></ROW><ROW><id>11379606</id><snippet>logging.basicConfig()</snippet></ROW><ROW><id>11380027</id><snippet>from matplotlib import pyplot
import math

def setLabelExample():
    fig = pyplot.figure() 
    x = [i for i in range(200)]
    y = [xi**2 for xi in x]

    ax = fig.add_subplot(1,1,1)
    ax.plot(x, y) 
    ax.tick_params(axis='x', labelsize=30)
    fig.suptitle('Matplotlib xticklabels Example')
    pyplot.show()

if __name__ == '__main__':
    setLabelExample()
</snippet></ROW><ROW><id>11380069</id><snippet>from hachoir_core.error import HachoirError
from hachoir_core.stream import InputIOStream
from hachoir_parser import guessParser
from hachoir_metadata import extractMetadata


def metadata_for_filelike(filelike):
    try:
        filelike.seek(0)
    except (AttributeError, IOError):
        return None

    stream = InputIOStream(filelike, None, tags=[])
    parser = guessParser(stream)

    if not parser:
        return None

    try:
        metadata = extractMetadata(parser)
    except HachoirError:
        return None

    return metadata
</snippet></ROW><ROW><id>11380366</id><snippet>try:
    cache
except NameError:
    cache = {}
</snippet></ROW><ROW><id>11380366</id><snippet>hashlib</snippet></ROW><ROW><id>11380366</id><snippet>import hashlib

for attr in dir(hashlib):
    if attr not in ('__name__', '__file__'):
        delattr(hashlib, attr)

hashlib = imp.reload(hashlib)
</snippet></ROW><ROW><id>11380366</id><snippet>hashlib</snippet></ROW><ROW><id>11380395</id><snippet>def FlipCoins(num_flips):
    heads_rounds_won = 0
    tails_rounds_won = 0
    tied_rounds = 0
    for i in range(10000):
        heads = 0
        tails = 0
        for j in range(num_flips):
            dice = random.randint(0,1)
            if dice==1: heads += 1
            else: tails += 1
        if heads &gt; tails: heads_rounds_won += 1
        elif heads &lt; tails: tails_rounds_won+= 1
        else: tied_rounds += 1
    return heads_rounds_won, tails_rounds_won, tied_rounds
</snippet></ROW><ROW><id>11380395</id><snippet>&gt;&gt;&gt; FlipCoins(2)
(2506, 2503, 4991)
</snippet></ROW><ROW><id>11380833</id><snippet>http://www.google.com/recaptcha/api/challenge?k={API_KEY}</snippet></ROW><ROW><id>11380833</id><snippet>challenge : '{CHALLENGE}'</snippet></ROW><ROW><id>11380833</id><snippet>http://www.google.com/recaptcha/api/image?c={CHALLENGE}</snippet></ROW><ROW><id>11380833</id><snippet>captcha.jpg</snippet></ROW><ROW><id>11380881</id><snippet>[deploy:scrapyd2]
url = http://scrapyd.mydomain.com/api/scrapyd/
username = john
password = secret
</snippet></ROW><ROW><id>11380881</id><snippet>scrapy deploy default -p project_name
</snippet></ROW><ROW><id>11380891</id><snippet>class Widget(QtGui.QWidget):
    def __init__(self):
        super(Widget, self).__init__()
        self.resize(600,400)

        layout = QtGui.QVBoxLayout(self)
        self.table = QtGui.QTableWidget(20,10)
        self.vBar = self.table.verticalScrollBar()
        self._vBar_lastVal = self.vBar.value()

        layout.addWidget(self.table)

        self.vBar.valueChanged.connect(self.scrollbarChanged)

    def scrollbarChanged(self, val):
        bar = self.vBar
        minVal, maxVal = bar.minimum(), bar.maximum()
        avg = (minVal+maxVal)/2
        rowCount = self.table.rowCount()

        # scrolling down
        if val &gt; self._vBar_lastVal and val &gt;= avg:
            self.table.insertRow(rowCount)

        # scrolling up
        elif val &lt; self._vBar_lastVal:
            lastRow = rowCount-1
            empty = True
            for col in xrange(self.table.columnCount()):
                item = self.table.item(lastRow, col)
                if item and item.text():
                    empty=False
                    break
            if empty:
                self.table.removeRow(lastRow)

        self._vBar_lastVal = val
</snippet></ROW><ROW><id>11380891</id><snippet>valueChanged(int)</snippet></ROW><ROW><id>11380891</id><snippet>scrollbarChanged</snippet></ROW><ROW><id>11380964</id><snippet>mod_wsgi</snippet></ROW><ROW><id>11380964</id><snippet>url('', my_home_view),
</snippet></ROW><ROW><id>11380964</id><snippet>url('^$' my_home_view),
</snippet></ROW><ROW><id>11381159</id><snippet>import urllib2
import urllib

url = 'http://nomads.ncep.noaa.gov/cgi-bin/filter_gfs_hd.pl'

forecast_time = '06' #What time the forecast is (00, 06, 12, 18)
forecast_hours = '09' #How many hours ahead to forecast (2 or 3 digits)
forecast_date = '20120705' #What date the forecast is for yyyymmdd

get_parameters = {
    'subregion':'',
    'toplat':90, #Top of bounding box (North)
    'bottomlat':-90, #Bottom of bounding box (South)
    'leftlon':-90, #Left of bounding box (West)
    'rightlon':90, #Right of bounding box (East)
}

get_parameters['file'] = 'gfs.t' + forecast_time + 'z.mastergrb2f' + forecast_hours

on_variables = [
    'lev_1000_mb',
    'lev_975_mb',
    'lev_950_mb',
    'lev_925_mb',
    'lev_900_mb',
    'lev_850_mb',
    'lev_800_mb',
    'lev_750_mb',
    'lev_700_mb',
    'lev_650_mb',
    'lev_600_mb',
    'lev_550_mb',
    'lev_500_mb',
    'lev_450_mb',
    'lev_400_mb',
    'lev_350_mb',
    'lev_300_mb',
    'lev_250_mb',
    'lev_200_mb',
    'lev_150_mb',
    'lev_100_mb',
    'lev_70_mb',
    'lev_30_mb',
    'lev_20_mb',
    'lev_10_mb',

    'var_HGT',  #Height (geopotential m)
    'var_RH',  #Relative humidity (%)
    'var_TMP', #Temperature (K)
    'var_UGRD', #East-West component of wind (m/s)
    'var_VGRD', #North-South component of wind (m/s)
    'var_VVEL' #Vertical Windspeed (Pa/s)
]

get_parameters.update(dict((param, 'on') for param in on_variables))

#Select date and time
get_parameters['dir'] = '/gfs.' + forecast_date + forecast_time + '/master'

print('Downloading GRIB file for date '+forecast_date+' time ' +forecast_time + ',    forecasting '+forecast_hours+' hours ahead...')

req = urllib2.urlopen(url + '?' + urllib.urlencode(get_parameters), timeout = 300) # Theres bug in apache for non-used GET varaibles so we have to manually add them to the url ...
local_filename = forecast_date + '_' + forecast_time + '_' + forecast_hours + '.grib'
local_file = open('/home/dantayaga/bovine_aerospace/grib/data/' + local_filename, 'wb')

local_file.write(req.read())
local_file.close()

print('Requested grib data written to file ' + local_filename)
</snippet></ROW><ROW><id>11381159</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>11381159</id><snippet>data</snippet></ROW><ROW><id>11381159</id><snippet>raise IncompleteRead(value)</snippet></ROW><ROW><id>11381583</id><snippet>DEBUG</snippet></ROW><ROW><id>11381583</id><snippet>true</snippet></ROW><ROW><id>11381633</id><snippet>paste</snippet></ROW><ROW><id>11381633</id><snippet>for (file in filenames) {
  file &lt;- paste('/home/yyy/xx', file, sep='/')
  system(paste('python', 'pylib/filefunction.py', file, 'divide'))
}
</snippet></ROW><ROW><id>11381633</id><snippet>sprintf</snippet></ROW><ROW><id>11381633</id><snippet>for (file in filenames) {
  system(sprintf('python pylib/filefunction.py /home/yyy/xx/%s divide', file))
}
</snippet></ROW><ROW><id>11382152</id><snippet>None</snippet></ROW><ROW><id>11382152</id><snippet>__init__</snippet></ROW><ROW><id>11382152</id><snippet>class SpamTest(object):

    def __init__(self, numlist=None):
        if numlist is None:
            numlist = []         # this is the new instance -- the empty list
        self.__numlist = numlist
</snippet></ROW><ROW><id>11382156</id><snippet>algo</snippet></ROW><ROW><id>11382156</id><snippet>deepcopy</snippet></ROW><ROW><id>11382156</id><snippet>copy</snippet></ROW><ROW><id>11382156</id><snippet>list</snippet></ROW><ROW><id>11382156</id><snippet>from copy import deepcopy

def algo (X):
    X = deepcopy(X)
    ...
</snippet></ROW><ROW><id>11382243</id><snippet>&gt;&gt;&gt; my_list = [False, False, False, True, True, True]
&gt;&gt;&gt; def contains_true(seq, bounds):
        start, end = bounds
        return any(seq[start:end+1])

&gt;&gt;&gt; contains_true(my_list, (0,0))
False
&gt;&gt;&gt; contains_true(my_list, (0,2))
False
&gt;&gt;&gt; contains_true(my_list, (0,3))
True
&gt;&gt;&gt; contains_true(my_list, (3,5))
True
&gt;&gt;&gt; contains_true(my_list, (5,5))
True
</snippet></ROW><ROW><id>11382749</id><snippet>NSDate</snippet></ROW><ROW><id>11382749</id><snippet>timeIntervalSinceReferenceDate</snippet></ROW><ROW><id>11382749</id><snippet>mktime</snippet></ROW><ROW><id>11382749</id><snippet>import time
from datetime import datetime

ref = time.mktime(datetime(2001, 1, 1, 0, 0, 0).timetuple())
now = time.time() - ref
</snippet></ROW><ROW><id>11382770</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>11382770</id><snippet>app_name_model_name</snippet></ROW><ROW><id>11382770</id><snippet>your_app/context_processors.py</snippet></ROW><ROW><id>11382957</id><snippet>.seek()</snippet></ROW><ROW><id>11382957</id><snippet>from lxml import  etree

def parseAndObjectifyXml(xmlPath, xsdPath):
    xsdFile = open(xsdPath)
    schema = etree.XMLSchema(file=xsdFile)
    xmlinput = open(xmlPath)
    xmlContent = xmlinput.read()
    xmlinput.seek(0)
    myxml = etree.parse(xmlinput)
    schema.assertValid(myxml)
</snippet></ROW><ROW><id>11382957</id><snippet>xmlContent</snippet></ROW><ROW><id>11382957</id><snippet>.parse()</snippet></ROW><ROW><id>11382957</id><snippet>StringIO</snippet></ROW><ROW><id>11382957</id><snippet>from lxml import  etree
from cStringIO import StringIO

def parseAndObjectifyXml(xmlPath, xsdPath):
    xsdFile = open(xsdPath)
    schema = etree.XMLSchema(file=xsdFile)
    xmlinput = open(xmlPath)
    xmlContent = xmlinput.read()
    myxml = etree.parse(StringIO(xmlContent))
    schema.assertValid(myxml)
</snippet></ROW><ROW><id>11382957</id><snippet>xmlContent</snippet></ROW><ROW><id>11382957</id><snippet>.read()</snippet></ROW><ROW><id>11382957</id><snippet>from lxml import  etree

def parseAndObjectifyXml(xmlPath, xsdPath):
    xsdFile = open(xsdPath)
    schema = etree.XMLSchema(file=xsdFile)
    xmlinput = open(xmlPath)
    myxml = etree.parse(xmlinput)
    schema.assertValid(myxml)
</snippet></ROW><ROW><id>11382957</id><snippet>.seek()</snippet></ROW><ROW><id>11382957</id><snippet>.tell()</snippet></ROW><ROW><id>11383213</id><snippet>from peak_o_mat.project import Project
from peak_o_mat.fit import Fit
from copy import deepcopy

p = Project()
p.Read('in.lpj')

base = p[2][0]    # this is the set which has been fit already

for data in p[2][1:]: # all remaining sets of plot number 2

    mod = deepcopy(base.mod)
    data.mod = mod

    f = Fit(data, data.mod)
    res = f.run()

    pars = res[0]
    err = res[1]

    data.mod._newpars(pars, err)

    print data.mod.parameters_as_table()

p.Write('out')
</snippet></ROW><ROW><id>11383289</id><snippet>ssh-agent</snippet></ROW><ROW><id>11383358</id><snippet>Tournament.get_total_rounds</snippet></ROW><ROW><id>11383358</id><snippet>range(get_total_rounds_count)</snippet></ROW><ROW><id>11383366</id><snippet>#!/usr/bin/python
# coding: utf-8

import facebook
import urllib 
import urlparse

access_token_page='X'
FACEBOOK_APP_ID = 'Y'
FACEBOOK_APP_SECRET = 'Z'
FACEBOOK_PROFILE_ID = 'W'

oauth_args = dict(client_id     = FACEBOOK_APP_ID,
                  client_secret = FACEBOOK_APP_SECRET,
                  grant_type    = 'client_credentials')

oauth_response = urllib.urlopen('https://graph.facebook.com/oauth/access_token?' + urllib.urlencode(oauth_args)).read()                                  

attach = {
  "name": 'Hello world',
  "link": 'http://www.example.com',
  "caption": 'test post',
  "description": 'some test',
  "picture" : 'http://www.example.com/picture.jpg',
}


facebook_graph = facebook.GraphAPI(access_token_page)
try:
    response = facebook_graph.put_wall_post('', attachment=attach)
except facebook.GraphAPIError as e:
    print e
</snippet></ROW><ROW><id>11383509</id><snippet>import re
with open('data.txt') as inf:
    salary = 0
    for line in inf:
        line = line.split('=')
        line[0] = line[0].strip()
        if line[0] == 'employee':
            employee = re.sub(r'[]\[\' ]','', line[1].strip()).split(',')
        elif line[0] == 'salary':
            salary = float(line[1])
        elif line[0] == 'managers':
            managers = re.sub(r'[]\[\' ]','', line[1].strip()).split(',')

print employee
print salary
print managers
</snippet></ROW><ROW><id>11383509</id><snippet>['Tom', 'Bob', 'Anny']
200.0
['Saly', 'Alice']
</snippet></ROW><ROW><id>11383533</id><snippet>import itertools

l = range(20)

for i in itertools.islice(l,10,15):
    print i

10
11
12
13
14
</snippet></ROW><ROW><id>11383656</id><snippet>__add__</snippet></ROW><ROW><id>11383656</id><snippet>class oObject (object):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return str(self.value)
    def __repr__(self):
        return str(self.value)
    def __add__(self,val):
        return str(self.value)+val

new = oObject(50)
'''if I use print it's Okay'''
print new
'''But if i try to do something like that ...'''
print new + '.kine'   #prints 50.kine
</snippet></ROW><ROW><id>11384464</id><snippet>(ur'^company/(?P&lt;key&gt;.*)/doclist/$','CompanyHub.views.docList')
</snippet></ROW><ROW><id>11384532</id><snippet>u</snippet></ROW><ROW><id>11384532</id><snippet>r</snippet></ROW><ROW><id>11384550</id><snippet>
colors = ["red", "blue" , "green", "orange", "purple"]
ncolor = 0
for file in a:
    plt.semilogx(T[T_sort], m_abs[T_sort], 'o-', color=colors[ncolor])
    ncolor+=1
&lt;/pre&gt;</snippet></ROW><ROW><id>11384599</id><snippet>bytes.decode()</snippet></ROW><ROW><id>11384599</id><snippet>codecs</snippet></ROW><ROW><id>11384599</id><snippet>codecs.getdecoder()</snippet></ROW><ROW><id>11384599</id><snippet>codecs.decode()</snippet></ROW><ROW><id>11384599</id><snippet>bytes</snippet></ROW><ROW><id>11384599</id><snippet>bytes</snippet></ROW><ROW><id>11384599</id><snippet>&gt;&gt;&gt; codecs.decode(b"4f6c6567", "hex_codec")
b'Oleg'
&gt;&gt;&gt; codecs.getdecoder("hex_codec")(b"4f6c6567")
(b'Oleg', 8)
</snippet></ROW><ROW><id>11384599</id><snippet>binascii.unhexlify()</snippet></ROW><ROW><id>11384621</id><snippet>import re
uuid4hex = re.compile('[0-9a-f]{32}\Z', re.I)
</snippet></ROW><ROW><id>11384621</id><snippet>.match()</snippet></ROW><ROW><id>11384621</id><snippet>.search()</snippet></ROW><ROW><id>11384621</id><snippet>.match()</snippet></ROW><ROW><id>11384621</id><snippet>\Z</snippet></ROW><ROW><id>11384621</id><snippet>$</snippet></ROW><ROW><id>11384667</id><snippet>In [17]: ax = x.plot(kind='bar', legend=False)

In [18]: patches, labels = ax.get_legend_handles_labels()

In [19]: ax.legend(patches, labels, loc='best')
Out[19]: &lt;matplotlib.legend.Legend at 0x10b292ad0&gt;
</snippet></ROW><ROW><id>11384667</id><snippet>plt.legend(loc='best')</snippet></ROW><ROW><id>11384667</id><snippet>ax.legend(loc='best')</snippet></ROW><ROW><id>11384667</id><snippet>ax = ...</snippet></ROW><ROW><id>11384667</id><snippet>plt.gca()</snippet></ROW><ROW><id>11384768</id><snippet>&gt;&gt;&gt; phrases = ["I'm so happy with myself lately!", "Johnny, im so sad, so very sad, call me", "i feel like crap. SO ANGRY!!!!"]
&gt;&gt;&gt; words = ["happy", "sad", "angry", "jumpy"]
&gt;&gt;&gt; 
&gt;&gt;&gt; for phrase in phrases:
...     print phrase
...     print {word: phrase.count(word) for word in words}
... 
I'm so happy with myself lately!
{'jumpy': 0, 'angry': 0, 'sad': 0, 'happy': 1}
Johnny, im so sad, so very sad, call me
{'jumpy': 0, 'angry': 0, 'sad': 2, 'happy': 0}
i feel like crap. SO ANGRY!!!!
{'jumpy': 0, 'angry': 0, 'sad': 0, 'happy': 0}
</snippet></ROW><ROW><id>11384821</id><snippet>fparser.py</snippet></ROW><ROW><id>11384821</id><snippet>from profile import website_feed_address</snippet></ROW><ROW><id>11384821</id><snippet>sys.path.append('d:/code/projects-dev/project')
sys.path.append('d:/code/projects-dev/project/project')
</snippet></ROW><ROW><id>11384821</id><snippet># or wherever you decide to create the virtualenv
WSGIPythonHome d:/code/projects-dev/project/project
</snippet></ROW><ROW><id>11384821</id><snippet>WSGIPythonPath "d:/code/projects-dev/project/project"
</snippet></ROW><ROW><id>11384821</id><snippet>profile</snippet></ROW><ROW><id>11384821</id><snippet>WEBSITE_FEED_ADDRESS = "http://foo.com"
</snippet></ROW><ROW><id>11384821</id><snippet>from django.conf import settings

...
    self.pFeed = feedparser.parse(settings.WEBSITE_FEED_ADDRESS)
</snippet></ROW><ROW><id>11384914</id><snippet>data.txt</snippet></ROW><ROW><id>11384914</id><snippet>1 1
2 2
3 3
4 4
</snippet></ROW><ROW><id>11384914</id><snippet>with open('data.txt') as inf:
    ysum = 0
    for line in inf:
        line = line.split()
        x, y = [float(i) for i in line]
        ysum += y
        print x, ysum
</snippet></ROW><ROW><id>11384914</id><snippet>float()</snippet></ROW><ROW><id>11384914</id><snippet>1.0 1.0
2.0 3.0
3.0 6.0
4.0 10.0
</snippet></ROW><ROW><id>11384914</id><snippet>+</snippet></ROW><ROW><id>11384914</id><snippet>with open('data.txt') as inf:
    yline = []
    for line in inf:
        line = line.split()
        x = int(line[0])
        yline = '+'.join(yline + [(line[1])])
        print x, yline
        yline = [yline]
</snippet></ROW><ROW><id>11384914</id><snippet>int()</snippet></ROW><ROW><id>11384914</id><snippet>1 1
2 1+2
3 1+2+3
4 1+2+3+4
</snippet></ROW><ROW><id>11384914</id><snippet>float</snippet></ROW><ROW><id>11384914</id><snippet>int</snippet></ROW><ROW><id>11385055</id><snippet>&lt;li&gt;</snippet></ROW><ROW><id>11385055</id><snippet>r = re.compile(r'(&lt;li&gt;.*?&lt;/li&gt;\n(?!\s*&lt;li&gt;))', re.DOTALL)
r.sub('&lt;ul&gt;\\1&lt;/ul&gt;', string_with_li_tags)
</snippet></ROW><ROW><id>11385055</id><snippet>&lt;li&gt;</snippet></ROW><ROW><id>11385055</id><snippet>&lt;/li&gt;\n</snippet></ROW><ROW><id>11385055</id><snippet>&lt;li&gt;</snippet></ROW><ROW><id>11385055</id><snippet>&lt;ul&gt;</snippet></ROW><ROW><id>11385098</id><snippet>{m,n}</snippet></ROW><ROW><id>11385098</id><snippet>\d</snippet></ROW><ROW><id>11385098</id><snippet>\S</snippet></ROW><ROW><id>11385098</id><snippet>re.compile(r'\d{2,3}\.\d{2,3}-A\d-\S*\Z')
</snippet></ROW><ROW><id>11385098</id><snippet>\Z</snippet></ROW><ROW><id>11385098</id><snippet>\S*</snippet></ROW><ROW><id>11385098</id><snippet>.match()</snippet></ROW><ROW><id>11385098</id><snippet>search()</snippet></ROW><ROW><id>11385098</id><snippet>match()</snippet></ROW><ROW><id>11385098</id><snippet>.match()</snippet></ROW><ROW><id>11385098</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile(r'\d{2,3}\.\d{2,3}-A\d-\S*\Z')
&gt;&gt;&gt; pattern.match('87.98-A1-help')
&lt;_sre.SRE_Match object at 0x1026905e0&gt;
&gt;&gt;&gt; pattern.match('123.45-A6-no whitespace allowed')
&gt;&gt;&gt; pattern.match('123.45-A6-everything_else_is_allowed')
&lt;_sre.SRE_Match object at 0x1026905e0&gt;
</snippet></ROW><ROW><id>11385138</id><snippet>gcc</snippet></ROW><ROW><id>11385138</id><snippet>slib.dll</snippet></ROW><ROW><id>11385138</id><snippet>#include &lt;stdio.h&gt;

typedef struct TestStruct {
    int     a;
    float   array[30][4];
} TestStruct;

extern void print_struct(TestStruct *ts) {
    int i,j;
    for (j = 0; j &lt; 30; ++j) {
        for (i = 0; i &lt; 4; ++i) {
            printf("%g ", ts-&gt;array[j][i]);
        }
        printf("\n");
    }
}
</snippet></ROW><ROW><id>11385138</id><snippet>from ctypes import *

class TestStruct(Structure):
    _fields_ = [("a", c_int),
                ("array", (c_float * 4) * 30)]

slib = CDLL("slib.dll")
slib.print_struct.argtypes = [POINTER(TestStruct)]
slib.print_struct.restype = None

t = TestStruct()

for i in range(30):
    for j in range(4):
        t.array[i][j] = i + 0.1*j

slib.print_struct(byref(t))
</snippet></ROW><ROW><id>11385138</id><snippet>C:\&gt;slib.py
0.1 0.2 0.3 0.4
1.1 1.2 1.3 1.4
2.1 2.2 2.3 2.4
3.1 3.2 3.3 3.4
4.1 4.2 4.3 4.4
5.1 5.2 5.3 5.4
... rest of output omitted
</snippet></ROW><ROW><id>11385346</id><snippet>request.GET</snippet></ROW><ROW><id>11385346</id><snippet>baz=1&amp;baz=2</snippet></ROW><ROW><id>11385346</id><snippet>exercises = addworkout.getlist('exercisename')
numsets = addworkout.getlist('numsets')
</snippet></ROW><ROW><id>11385346</id><snippet>workout(dict(request.GET))
</snippet></ROW><ROW><id>11385508</id><snippet># -*- coding: utf-8 --

# Now, my string literals in this source file will
#    be str objects encoded in utf-8.

# In Python3, they will be unicode objects.
#    Below examples show the Python2 way.

s = 'ş'
print type(s) # prints &lt;type 'str'&gt;

u = s.decode('utf-8')
# Here, we create a unicode object from a string
#    which was encoded in utf-8.

print type(u) # prints &lt;type 'unicode'&gt;
</snippet></ROW><ROW><id>11385508</id><snippet>.encode() --&gt; str
.decode() --&gt; unicode
</snippet></ROW><ROW><id>11385508</id><snippet>lxml.etree.parse()</snippet></ROW><ROW><id>11385508</id><snippet>lxml.etree.fromstring()</snippet></ROW><ROW><id>11385537</id><snippet>def func():
    global x

    if 'x' not in globals():
        x = 0

    x += 10

    print(x)
</snippet></ROW><ROW><id>11385583</id><snippet>token = gdata.gauth.OAuth2Token(client_id, client_secret, scope, ua)
session.token = pickle.dumps(token)                   
redirect(token.generate_authorize_url(redirect_uri='http://127.0.0.1:8000/Test/default/oauth2callback'))
</snippet></ROW><ROW><id>11385583</id><snippet>def oauth2callback():
    token = pickle.loads(session.token)
    token.redirect_uri='http://127.0.0.1:8000/Test/default/oauth2callback'
    token.get_access_token(request.vars.code)
    gc = gdata.contacts.client.ContactsClient(source='')
    gc = token.authorize(gc)
    feed = gc.GetContacts()
</snippet></ROW><ROW><id>11385592</id><snippet>Modules/</snippet></ROW><ROW><id>11385592</id><snippet>Lib/</snippet></ROW><ROW><id>11385592</id><snippet>json</snippet></ROW><ROW><id>11385641</id><snippet>oObject</snippet></ROW><ROW><id>11385641</id><snippet>key</snippet></ROW><ROW><id>11385641</id><snippet>Variant</snippet></ROW><ROW><id>11385641</id><snippet>class oObject(object):
    def __init__(self, x = 0, y = 0, z = 0):
        self.x = Variant(x)
        self.y = Variant(y)
        self.z = Variant(z)

class Variant(object):
    def __init__(self, obj):
        self._obj = obj

    def __repr__(self):
        return '&lt;%s: %s&gt;' % (self.__class__.__name__, self.asString())

    def __str__(self):
        return self.asString()

    def asString(self):
        return str(self._obj)

    def value(self):
        return self._obj
</snippet></ROW><ROW><id>11385797</id><snippet>def guess_seq_len(seq):
    guess = 1
    max_len = len(seq) / 2
    for x in range(2, max_len):
        if seq[0:x] == seq[x:2*x] :
            return x

    return guess

list_a = [111,0,3,1,111,0,3,1,111,0,3,1] 
list_b = [67,4,67,4,67,4,67,4,2,9,0]
list_c = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,23,18,10]

print guess_seq_len(list_a)
print guess_seq_len(list_b)
print guess_seq_len(list_c)
print guess_seq_len(range(500))   # test of no repetition
</snippet></ROW><ROW><id>11385797</id><snippet>4
2
10
1
</snippet></ROW><ROW><id>11385797</id><snippet>guess = x</snippet></ROW><ROW><id>11385797</id><snippet>return x</snippet></ROW><ROW><id>11385797</id><snippet>def guess_seq_len(seq):
    guess = 1
    max_len = len(seq) / 2
    for x in range(2, max_len):
        if seq[0:x] == seq[x:2*x] :
            guess = x

    return guess
</snippet></ROW><ROW><id>11385854</id><snippet>def clean(self): 
    super(MyUserAdminForm, self).clean()
    # more cleaning
</snippet></ROW><ROW><id>11385912</id><snippet>import numpy as np

def get_difference(x,y):
    return sum(ele_x != ele_y for ele_x, ele_y in zip(x,y))

my_list = ['abcde','abcwe','zbfwe']
n = len(my_list)

my_array = np.zeros((n,n))
#
for i, ele_1 in enumerate(my_list):
    for j, ele_2 in enumerate(my_list):
        if j &gt;= i:
            break # Since the matrix is symmetrical we don't need to
                  # calculate everything
        difference = get_difference(ele_1, ele_2)  
        my_array[i, j] = difference
        my_array[j, i] = difference
</snippet></ROW><ROW><id>11385912</id><snippet>&gt;&gt;&gt; my_array
array([[ 0.,  1.,  3.],
       [ 1.,  0.,  2.],
       [ 3.,  2.,  0.]])
</snippet></ROW><ROW><id>11385937</id><snippet>new_args = (10,20)

def process(func):
    def new_func(*args, **kw):
        func_defaults = func.func_defaults
        func.func_defaults = new_args
        result = func(*args, **kw)
        func.func_defaults = func_defaults
        return result
    return new_func

@process
def foo(x=1, y =2):
    print x + y
</snippet></ROW><ROW><id>11385937</id><snippet>&gt;&gt;&gt; foo()
30
</snippet></ROW><ROW><id>11385937</id><snippet>from types import FunctionType

new_args = {"x":10, "y":20} 

def process(func):
    def new_func(*args, **kw):
        temp_func = FunctionType(func.func_code,
                                 new_args,
                                 func.func_name, 
                                 func.func_defaults,
                                 func.func_closure)
        return temp_func(*args, **kw)
    return new_func


@process
def foo():
    global x, y
    print x + y
</snippet></ROW><ROW><id>11385937</id><snippet>def foo(x=1,y=2):
   z= 3
   w = 4
</snippet></ROW><ROW><id>11385937</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; def a():
...    b = 1
...    f = sys._getframe()
...    print f.f_locals
...    f.f_locals["b"] = 2
...    print b
... 
&gt;&gt;&gt; a()
{'b': 1, 'f': &lt;frame object at 0x1038cd0&gt;}
1
</snippet></ROW><ROW><id>11386003</id><snippet>model=Person</snippet></ROW><ROW><id>11386003</id><snippet>queryset=Person.objects.all</snippet></ROW><ROW><id>11386003</id><snippet>ListView</snippet></ROW><ROW><id>11386003</id><snippet>def get_queryset(self):
    """
    Get the list of items for this view. This must be an interable, and may
    be a queryset (in which qs-specific behavior will be enabled).
    """
    if self.queryset is not None:
        queryset = self.queryset
        if hasattr(queryset, '_clone'):
            queryset = queryset._clone()
    elif self.model is not None:
        queryset = self.model._default_manager.all()
    else:
        raise ImproperlyConfigured(u"'%s' must define 'queryset' or 'model'"
                                   % self.__class__.__name__)
    return queryset
</snippet></ROW><ROW><id>11386003</id><snippet>self.queryset</snippet></ROW><ROW><id>11386003</id><snippet>self.model</snippet></ROW><ROW><id>11386003</id><snippet>all()</snippet></ROW><ROW><id>11386003</id><snippet>objects</snippet></ROW><ROW><id>11386003</id><snippet>model</snippet></ROW><ROW><id>11386003</id><snippet>queryset</snippet></ROW><ROW><id>11386003</id><snippet>Person.objects.children()</snippet></ROW><ROW><id>11386003</id><snippet>age &lt;= 12</snippet></ROW><ROW><id>11386048</id><snippet>http://127.0.0.1:8000/call/add/1/foo/2</snippet></ROW><ROW><id>11386048</id><snippet>(r'^call/add/(?P&lt;call_id&gt;\d+)/foo/(?P&lt;foo_id&gt;\d+)$', call_view),</snippet></ROW><ROW><id>11386048</id><snippet>def call_view(request, call_id, foo_id):</snippet></ROW><ROW><id>11386204</id><snippet>set_over</snippet></ROW><ROW><id>11386204</id><snippet>set_under</snippet></ROW><ROW><id>11386204</id><snippet>cs = pyplot.contourf(x,y,z,levels=np.arange(50, 220, 20), cmap=pyplot.cm.jet, extend="both")
cs.cmap.set_under('k')
cs.set_clim(50, 210)
cb = pyplot.colorbar(cs)
</snippet></ROW><ROW><id>11386204</id><snippet>cs.set_clim</snippet></ROW><ROW><id>11386204</id><snippet>extend</snippet></ROW><ROW><id>11386204</id><snippet>Colormap.set_under(cmap,color='k')</snippet></ROW><ROW><id>11386204</id><snippet>cmap.set_under(color="k")</snippet></ROW><ROW><id>11386270</id><snippet>convert</snippet></ROW><ROW><id>11386270</id><snippet>Sprite</snippet></ROW><ROW><id>11386270</id><snippet>import pygame

pygame.init()
screen = pygame.display.set_mode((400, 400))
image = pygame.image.load('1.png')

sprite = pygame.sprite.Sprite()
sprite.image = image
sprite.rect = image.get_rect()

font = pygame.font.SysFont('Sans', 50)
text = font.render('This is a text', True, (255, 0, 0))

sprite.image.blit(text, sprite.rect)

group = pygame.sprite.Group()
group.add(sprite)
group.draw(screen)

pygame.display.flip()

print 'bits per pixel:'
print 'image', image.get_bitsize()
print 'screen', screen.get_bitsize()
</snippet></ROW><ROW><id>11386270</id><snippet>bits per pixel
image 8
screen 32
</snippet></ROW><ROW><id>11386270</id><snippet>image = pygame.image.load('1.png')
</snippet></ROW><ROW><id>11386270</id><snippet>image = pygame.image.load('1.png').convert()
</snippet></ROW><ROW><id>11386270</id><snippet>bits per pixel
image 32
screen 32
</snippet></ROW><ROW><id>11386289</id><snippet>def accumulate_by_category(word_values, cat_sums, cats):
    """ modify the category sums by adding the values of the given words """
    for word, value in word_values.items():
        for cat in cats[word]:
            cat_sums[cat] += value
</snippet></ROW><ROW><id>11386289</id><snippet>worddict = {'example1': 1, 'example2': 0, 'example3': 7}
seconddict = {'firstitem': 1, 'seconditem': 1, 'thirditem':9}

categories = {'example1': ['firstitem', 'thirditem'],
              'example2': ['seconditem', 'thirditem'],
              'example3': ['thirditem']}

accumulate_by_category(worddict, seconddict, categories)
print(seconddict) # {'seconditem': 1, 'firstitem': 2, 'thirditem': 17}
</snippet></ROW><ROW><id>11386413</id><snippet>local = dict(page=page, name=name, save_url=save_url, title='add new',
     url='/new', points=points, num_badges=badges)
local.update(retrieve_common_information(request))
return local
</snippet></ROW><ROW><id>11386413</id><snippet>pyramid_viewgroup</snippet></ROW><ROW><id>11386487</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; set(m.group(0) for m in re.finditer(r'([0-9]{1,3}\.){3}[0-9]{1,3}', s))
{'81.196.122.86', '94.126.17.68', '89.105.247.13'}
</snippet></ROW><ROW><id>11386487</id><snippet># IPv4, common format
(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}
(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9])|
# IPv4, dotted hexadecimal
(?:0x[0-9a-fA-F]{2}\.){3}0x[0-9a-fA-F]{2}|
# IPv4, dotted octal
0[0-7]{3}\.){3}0[0-7]{3}|
# IPv4, one number, hexadecimal
0x[0-9a-fA-F]{1,8})|
# IPv4, one number, octal
0[0-7]{1,11})|
# IPv4, one number, hexadecimal
[1-4][0-9]{9}|0|[1-9][0-9]{0,7}|
# IPv6, preferred form (RFC 4291 2.2.1)
(?:[0-9a-fA-F]{1,4}){7}[0-9a-fA-F]{1,4}|
# IPv6, compressed syntax (RFC 4291 2.2.2)
(?:
  [0-9a-fA-F]{0,4}::(?:[0-9a-fA-F]{1,4}:){,6}|
  [0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{1,4}){1}::(?:[0-9a-fA-F]{1,4}:){,4}[0-9a-fA-F]{0,4}|
  [0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{1,4}){2}::(?:[0-9a-fA-F]{1,4}:){,3}[0-9a-fA-F]{0,4}|
  [0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{1,4}){3}::(?:[0-9a-fA-F]{1,4}:){,2}[0-9a-fA-F]{0,4}|
  [0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{1,4}){4}::(?:[0-9a-fA-F]{1,4}:){,1}[0-9a-fA-F]{0,4}|
  [0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{1,4}){5}::[0-9a-fA-F]{0,4}
)|
# IPv6, alternative form (RFC 4291 2.2.3, uncompressed)
(?:[0-9a-fA-F]{1,4}){6}|(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}
(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]))|
# IPv6, alternative form (RFC 4291 2.2.3, compressed)
(?:
  [0-9a-fA-F]{0,4}::(?:[0-9a-fA-F]{1,4}:){,4}|
  [0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{1,4}){1}::(?:[0-9a-fA-F]{1,4}:){,3}|
  [0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{1,4}){2}::(?:[0-9a-fA-F]{1,4}:){,2}|
  [0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{1,4}){3}::(?:[0-9a-fA-F]{1,4}:){,1}|
  [0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{1,4}){4}::
)
(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}
(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]))
</snippet></ROW><ROW><id>11386487</id><snippet>ipaddress</snippet></ROW><ROW><id>11386487</id><snippet>1</snippet></ROW><ROW><id>11386579</id><snippet>&lt;div class="fb-comments" data-href="[your site url]/post[post id]" data-num-posts="2" data-width="470"&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>11386667</id><snippet>nr</snippet></ROW><ROW><id>11386667</id><snippet>nr</snippet></ROW><ROW><id>11386667</id><snippet>nr</snippet></ROW><ROW><id>11386667</id><snippet>nr</snippet></ROW><ROW><id>11386667</id><snippet>get_data</snippet></ROW><ROW><id>11386667</id><snippet>nr</snippet></ROW><ROW><id>11386667</id><snippet>def get_data(self, repeat):
    nr = 0
    for x in xrange(repeat):
        time.sleep(0.001)
        nr += 1
        yield x
</snippet></ROW><ROW><id>11386667</id><snippet>self.nr</snippet></ROW><ROW><id>11386804</id><snippet>68 c3 a5
h |  å

68 c3 6f 70 65
h |  |o |p |e
</snippet></ROW><ROW><id>11386804</id><snippet>c3</snippet></ROW><ROW><id>11386985</id><snippet>class SpinEndEventManager(object):
    def __init__(self):
        self._controls = []
        self._event_handlers = []
        self._has_spinned = False

    def add(self, control, event_handler):
        self._controls.append(control)
        self._event_handlers.append(event_handler)
        control.Bind(wx.EVT_SPINCTRL, self._on_event)
        control.Bind(wx.EVT_LEFT_UP, self._on_event)
        control.Bind(wx.EVT_KEY_DOWN, self._on_event)
        control.Bind(wx.EVT_KEY_UP, self._on_event)

    def _on_event(self, event):
        is_spin_end_event = False
        event_type = event.GetEventType()
        control = event.GetEventObject()
        if event_type == wx.wxEVT_COMMAND_SPINCTRL_UPDATED:
            self._has_spinned = True
        elif event_type == wx.wxEVT_LEFT_UP:
            if self._has_spinned:
                is_spin_end_event = True
            event.Skip()
        elif event_type == wx.wxEVT_KEY_DOWN:
            key = event.GetKeyCode()
            old_value = control.GetValue()
            if key == wx.WXK_UP:
                value = old_value + 1
            elif key == wx.WXK_DOWN:
                value = old_value - 1
            control.SetValue(value)
            value = control.GetValue()
            if value != old_value:
                self._has_spinned = True
            if key == wx.WXK_DOWN:
                value_string_length = len(str(value))
                control.SetSelection(value_length, value_string_length)
        elif event_type == wx.wxEVT_KEY_UP:
            if self._has_spinned:
                is_spin_end_event = True
        if is_spin_end_event:
            self._has_spinned = False
            index = self._controls.index(control)
            self._event_handlers[index](event)
</snippet></ROW><ROW><id>11387281</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; class A:
...     def __init__(self, values):
...         self.partposit = values
... 
&gt;&gt;&gt; PARTS = dict((index, A(np.zeros((50000, 12)))) for index in xrange(163))
&gt;&gt;&gt; p1 = np.dstack((PARTS[k].partposit for k in sorted(PARTS.keys())))
&gt;&gt;&gt; p1.shape
(50000, 12, 163)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11387281</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.Timer('p1 = np.dstack((PARTS[k].partposit for k in sorted(PARTS.keys())))', "from __main__ import np, PARTS").timeit(number = 1)
2.1245520114898682
</snippet></ROW><ROW><id>11387281</id><snippet>numpy.dstack</snippet></ROW><ROW><id>11387281</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; setup = """
... import numpy as np
... #PARTS is my dictionary
... #the .partposit is the attribute that is an array of shape (50000, 12)
... 
... class A:
...     def __init__(self, values):
...         self.partposit = values
... 
... PARTS = dict((index, A(np.zeros((50000, 12)))) for index in xrange(163))
... ks = sorted(PARTS.keys())
... """
&gt;&gt;&gt; stack = """
... p1 = PARTS[ks[0]].partposit
... for k in ks[1:]:
...     p1 = np.dstack((p1, PARTS[k].partposit))
... """
&gt;&gt;&gt; timeit.Timer(stack, setup).timeit(number = 1)
67.69684886932373
</snippet></ROW><ROW><id>11387281</id><snippet>&gt;&gt;&gt; numpy.__version__
'1.6.1'

$ python --version
Python 2.6.1
</snippet></ROW><ROW><id>11387448</id><snippet>def __eq__(self, other):
    if not isinstance(other, Point):
        return False
    try:
        return self.x == other.x and self.y == other.y
    except AttributeError:
        return False
</snippet></ROW><ROW><id>11387448</id><snippet>x</snippet></ROW><ROW><id>11387448</id><snippet>y</snippet></ROW><ROW><id>11387512</id><snippet>number = int(string)
</snippet></ROW><ROW><id>11387512</id><snippet>p=get_object_or_404(Poll, pk=poll_id)</snippet></ROW><ROW><id>11387512</id><snippet>request.POST['choice']</snippet></ROW><ROW><id>11387512</id><snippet>if request.method=="POST":
    choice = request.POST.get('choice', None)
    if choice is not None:
        selected_choice = p.choice_set.get(pk=choice)
...
</snippet></ROW><ROW><id>11387545</id><snippet>"%s"</snippet></ROW><ROW><id>11387545</id><snippet>INSERT</snippet></ROW><ROW><id>11387820</id><snippet>self.sendAMail</snippet></ROW><ROW><id>11387820</id><snippet>&lt;bound method SecondLife.sendAMail of &lt;__main__.SecondLife instance at 0x101d91e18&gt;&gt;
</snippet></ROW><ROW><id>11387820</id><snippet>In [20]: [line for line in d if 'def' in line]
Out[20]: 
['        def __init__(self, usernames, password):\n',
 '    \tdef sendAMail(self, smtp_server, user, password, listener, subject, text):\n',
 '        def login(self):\n',
 '        def friends_online(self):\n']
</snippet></ROW><ROW><id>11387820</id><snippet>\t</snippet></ROW><ROW><id>11387820</id><snippet>def sendAMail</snippet></ROW><ROW><id>11387820</id><snippet>python -tt scriptname.py</snippet></ROW><ROW><id>11387821</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>11387821</id><snippet>from subprocess import Popen, PIPE

def getBPM():
    cmd = "arch -i386 osascript -e " + """'tell application "iTunes" to return bpm of current track'"""
    bpm, tError = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE).communicate()
    if bpm &gt; 250:
        return = 200
    return int(bpm)
</snippet></ROW><ROW><id>11387862</id><snippet>for word in wordStr</snippet></ROW><ROW><id>11387862</id><snippet>\n</snippet></ROW><ROW><id>11387862</id><snippet>print repr(word)</snippet></ROW><ROW><id>11387862</id><snippet>for word in wordStr:
    print repr(word)
    word = word.strip()
    [etc]
</snippet></ROW><ROW><id>11387994</id><snippet>example.com/request/distribution?acct=123&amp;date=20030102&amp;distcode=1A;1B;1C</snippet></ROW><ROW><id>11387994</id><snippet>example.com/accounts/123/distributions/20030102/1A;1B;1C</snippet></ROW><ROW><id>11387995</id><snippet>&gt;&gt;&gt; help(numpy.random.random)
Help on built-in function random_sample:

random_sample(...)
    random_sample(size=None)

    Return random floats in the half-open interval [0.0, 1.0).

    Results are from the "continuous uniform" distribution over the
    stated interval.  To sample :math:`Unif[a, b), b &gt; a` multiply
    the output of `random_sample` by `(b-a)` and add `a`::

      (b - a) * random_sample() + a
    ...
</snippet></ROW><ROW><id>11387995</id><snippet>numpy.random.random()</snippet></ROW><ROW><id>11387995</id><snippet>numpy.random.normal()</snippet></ROW><ROW><id>11388156</id><snippet>ord()</snippet></ROW><ROW><id>11388156</id><snippet>&gt;&gt;&gt; "a" &gt; "b"
False

&gt;&gt;&gt; "b" &gt; "a"
True
</snippet></ROW><ROW><id>11388156</id><snippet>&gt;&gt;&gt; "C" &gt; "b"
False
</snippet></ROW><ROW><id>11388156</id><snippet>def isAlphabetical(word):
    for i in xrange(len(word) - 1):
        if word[i] &gt; word[i+1]:
            return False
    return True
</snippet></ROW><ROW><id>11388212</id><snippet>print(("\n{:-&lt;{}}").format("abc", padded_length))
</snippet></ROW><ROW><id>11388212</id><snippet>print(("{{:-&lt;{padded_length}}}".format(padded_length=10)).format("abc"))
</snippet></ROW><ROW><id>11388273</id><snippet>os.walk</snippet></ROW><ROW><id>11388273</id><snippet>q.put</snippet></ROW><ROW><id>11388273</id><snippet>import os
import threading
import multiprocessing


def finder(path, q, done):
    for root, dirs, files in os.walk(unicode(path)):
        for dirname in dirs:
            if target in dirname.lower():
                q.put(os.path.join(root,dirname))
        for name in files:
            if target in name.lower():
                q.put(os.path.join(root,name))

    # print "Leaving thread", threading.current_thread()
    done.put(1)

def printer(q,done,worker_count):
    total = 0
    while 1:
        try: done.get_nowait()
        except: pass
        else: total += 1

        if total == worker_count:
            break

        try: tmp=q.get(timeout=1)
        except: pass

        print tmp

if __name__ =="__main__":

    results = multiprocessing.Queue()
    done = multiprocessing.Queue()
    root, dirs, files = os.walk(u"C:\\").next()
    thnum=len(dirs)
    target=raw_input("what you wanna get\n")

    p=multiprocessing.Process(target=printer,args=(results,done,thnum))
    p.start()

    for i in xrange(thnum):
        full_path = os.path.join(root, dirs[i])
        t=threading.Thread(target=finder,args=(full_path, results, done))
        t.start()

    p.join()
</snippet></ROW><ROW><id>11388273</id><snippet>JoinableQueue</snippet></ROW><ROW><id>11388555</id><snippet>from django.db.models import Count
...
last_names = Person.objects.values('last_name').annotate(Count('last_name')) # This will return all the unique last_names
values = dict( ((last_name['last_name'], Person.objects.all().filter(last_name = last_name['last_name'])) for last_name in last_names if last_name['last_name__count']) )
# This will create a dictionary where the keys are all the unique names and the values are querysect of all the values that have that lastname
</snippet></ROW><ROW><id>11388555</id><snippet>from collections import defaultdict
values = defaultdict(list)
_ = map(lambda person: values[person.last_name].append(person), Person.objects.all())
</snippet></ROW><ROW><id>11388555</id><snippet>_ = ...</snippet></ROW><ROW><id>11388555</id><snippet>None</snippet></ROW><ROW><id>11388614</id><snippet>authorization</snippet></ROW><ROW><id>11388614</id><snippet>import urllib3

http = urllib3.PoolManager()
url = '...'
headers = urllib3.util.make_headers(basic_auth='abc:xyz')
r = http.request('GET', url, headers=headers)
</snippet></ROW><ROW><id>11388712</id><snippet>from django.db import connection, transaction
cursor = connection.cursor()

# Data modifying operation - commit required
cursor.execute("vacuum my_table")
transaction.commit_unless_managed()
</snippet></ROW><ROW><id>11388712</id><snippet>cursor.execute("PRAGMA auto_vacuum=FULL")
</snippet></ROW><ROW><id>11389133</id><snippet>report_picking_list</snippet></ROW><ROW><id>11389133</id><snippet>./stock/stock_report.xml:5:        
         &lt;report id="report_picking_list" model="stock.picking" name="stock.picking.list" string="Packing list" rml="stock/report/picking.rml"/&gt;
</snippet></ROW><ROW><id>11389133</id><snippet>ir_model_data</snippet></ROW><ROW><id>11389310</id><snippet>&lt;items&gt;&lt;/items&gt;</snippet></ROW><ROW><id>11389310</id><snippet>&lt;desc/&gt;</snippet></ROW><ROW><id>11389310</id><snippet>description</snippet></ROW><ROW><id>11389310</id><snippet>&lt;items&gt;
  &lt;item&gt;
    &lt;title&gt;Item 1&lt;/title&gt;
    &lt;description&gt;Description 1&lt;/description&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;title&gt;Item 2&lt;/title&gt;
    &lt;description&gt;Description 2&lt;/description&gt;
  &lt;/item&gt;
&lt;/items&gt;
</snippet></ROW><ROW><id>11390162</id><snippet>&gt;&gt;&gt; q1 = Employee.query()
&gt;&gt;&gt; q1
Query(kind='Employee')
&gt;&gt;&gt; q2 = gql('SELECT * FROM Employee')
&gt;&gt;&gt; q2
Query(kind='Employee', default_options=QueryOptions(offset=0))
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11390257</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>11390257</id><snippet>&gt;&gt;&gt; import copy
&gt;&gt;&gt; alist = [[0], [1], [2], [3]]
&gt;&gt;&gt; blist = copy.deepcopy(alist)
&gt;&gt;&gt; blist[0].append(1)
&gt;&gt;&gt; alist
[[0], [1], [2], [3]]
&gt;&gt;&gt; blist
[[0, 1], [1], [2], [3]]
</snippet></ROW><ROW><id>11390399</id><snippet>/usr/bin/python2 -&gt; (the real one)</snippet></ROW><ROW><id>11390399</id><snippet>$PATH</snippet></ROW><ROW><id>11390598</id><snippet>if version is f:
      APP_VER = 'APP_FREE'
elif version is p:
      APP_VER = 'APP_PAID'
</snippet></ROW><ROW><id>11390598</id><snippet>version</snippet></ROW><ROW><id>11390598</id><snippet>f</snippet></ROW><ROW><id>11390598</id><snippet>p</snippet></ROW><ROW><id>11390598</id><snippet>else</snippet></ROW><ROW><id>11390598</id><snippet>==</snippet></ROW><ROW><id>11390598</id><snippet>is</snippet></ROW><ROW><id>11390598</id><snippet>if version == f:
      APP_VER = 'APP_FREE'
elif version == p:
      APP_VER = 'APP_PAID'
else:
    print 'version &lt;{0}&gt; unknown'.format(version)
    exit()
    # or raise an exception here
</snippet></ROW><ROW><id>11390598</id><snippet>app_name = {'free': 'APP_FREE',
            'paid': 'APP_PAID'} # this can be extended if needed
APP_VER = app_name.get(version)
# APP_VER is None if version unknown
</snippet></ROW><ROW><id>11390788</id><snippet>pygame.display.flip()
</snippet></ROW><ROW><id>11390788</id><snippet>time.sleep</snippet></ROW><ROW><id>11390788</id><snippet>from VideoCapture import Device
import pygame
import time
In=1
pygame.init()
w = 640
h = 480
size=(w,h)
screen = pygame.display.set_mode(size) 
c = pygame.time.Clock() # create a clock object for timing

while True:
    cam = Device()
    filename = str(In)+".jpg" # ensure filename is correct
    cam.saveSnapshot(filename) 
    img=pygame.image.load(filename) 
    screen.blit(img,(0,0))
    pygame.display.flip() # update the display
    c.tick(3) # only three images per second
    In += 1
</snippet></ROW><ROW><id>11390790</id><snippet>IDLE</snippet></ROW><ROW><id>11390790</id><snippet>IDLE</snippet></ROW><ROW><id>11390848</id><snippet>jinja_environment = jinja2.Environment(
  loader=jinja2.FileSystemLoader(['templates', 'templates\blog'])
</snippet></ROW><ROW><id>11390858</id><snippet>defaultdict</snippet></ROW><ROW><id>11390858</id><snippet>re</snippet></ROW><ROW><id>11390858</id><snippet>split</snippet></ROW><ROW><id>11390858</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; import re
&gt;&gt;&gt; pat = r'(\d+)(?:_\d+)?_(\w+?)[\._].*'
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dict_date = defaultdict(lambda : defaultdict(list))
&gt;&gt;&gt; for fil in os.listdir(path):
    if os.path.isfile(os.path.join(path, fil)):
        date, animal = re.match(pat, fil).groups()
        dict_date[date][animal].append(fil)


&gt;&gt;&gt; dict_date['20120807']
defaultdict(&lt;type 'list'&gt;, {'first': ['20120807_first_day_pic.jpg', '20120807_first_day_sheet.jpg', '20120807_first_day_sheet2.jpg']})
</snippet></ROW><ROW><id>11390858</id><snippet>&gt;&gt;&gt; from shutil import copyfile
&gt;&gt;&gt; for date in dict_date:
        for animal in dict_date[date]:
        try:
            os.makedirs(os.path.join(path, date, animal))
        except os.error:
            pass
        for fil in dict_date[date][animal]:
            copyfile(os.path.join(path, fil), os.path.join(path, date, animal, fil))
</snippet></ROW><ROW><id>11390872</id><snippet>.iter()</snippet></ROW><ROW><id>11390872</id><snippet>.getiterator()</snippet></ROW><ROW><id>11390872</id><snippet>root</snippet></ROW><ROW><id>11390872</id><snippet>import elementtree.ElementTree as ET
tree = ET.parse('XML_file.xml')
root = tree.getroot()
for elem in root.getiterator():
    print elem.tag, elem.attrib
</snippet></ROW><ROW><id>11390872</id><snippet>.iter()</snippet></ROW><ROW><id>11390872</id><snippet>import xml.etree.ElementTree as ET
tree = ET.parse('XML_file.xml')
root = tree.getroot()
for elem in root.iter():
    print elem.tag, elem.attrib
</snippet></ROW><ROW><id>11390872</id><snippet>.iter()</snippet></ROW><ROW><id>11390872</id><snippet>for elem in root:</snippet></ROW><ROW><id>11390872</id><snippet>.iter()</snippet></ROW><ROW><id>11390872</id><snippet>.getchildren()</snippet></ROW><ROW><id>11391109</id><snippet>__add__</snippet></ROW><ROW><id>11391109</id><snippet>kron</snippet></ROW><ROW><id>11391109</id><snippet>__kron__</snippet></ROW><ROW><id>11391109</id><snippet>__rkron__</snippet></ROW><ROW><id>11391109</id><snippet>def kron(a, b):
    if hasattr(a, '__kron__'):
        return a.__kron__(b)
    if hasattr(b, '__rkron__'):
        return b.__rkron__(a)
    # Default kron implementation here
    return complex_operation_on_a_and_b(a, b)
</snippet></ROW><ROW><id>11391756</id><snippet>date</snippet></ROW><ROW><id>11391756</id><snippet>put()</snippet></ROW><ROW><id>11391901</id><snippet>cv.acquire()
while not an_item_is_available():
    cv.wait()
get_an_available_item()
cv.release()
</snippet></ROW><ROW><id>11391901</id><snippet>Event</snippet></ROW><ROW><id>11391901</id><snippet>.wait(timeout)</snippet></ROW><ROW><id>11391901</id><snippet>Event</snippet></ROW><ROW><id>11391901</id><snippet>None</snippet></ROW><ROW><id>11391959</id><snippet>tidylib.BASE_OPTIONS</snippet></ROW><ROW><id>11392041</id><snippet>return redirect(index)</snippet></ROW><ROW><id>11392041</id><snippet>redirect_url = '/images/45/'
return HttpResponseRedirect(redirect_url)
</snippet></ROW><ROW><id>11392041</id><snippet>redirect_url</snippet></ROW><ROW><id>11392041</id><snippet>Image</snippet></ROW><ROW><id>11392041</id><snippet>reverse</snippet></ROW><ROW><id>11392041</id><snippet>Image</snippet></ROW><ROW><id>11392201</id><snippet>def foo():
        foo = ('String', 'Tuple', 'From', 'Python' )
        return foo
</snippet></ROW><ROW><id>11392201</id><snippet>#!/bin/bash
FOO=`python -c 'from foo import *; print " ".join(foo())'`
for x in $FOO:
do
        echo "This is foo.sh: $x"
done
</snippet></ROW><ROW><id>11392201</id><snippet>import os
import subprocess

foo = ('String', 'Tuple', 'From', 'Python' )

os.putenv('FOO', ' '.join(foo))

subprocess.call('./foo.sh')
</snippet></ROW><ROW><id>11392201</id><snippet>#!/bin/bash
for x in $FOO
do
        echo "This is foo.sh: $x"
done
</snippet></ROW><ROW><id>11392760</id><snippet>supervisorctl help tail</snippet></ROW><ROW><id>11392760</id><snippet>tail</snippet></ROW><ROW><id>11392760</id><snippet>stdout_logfile</snippet></ROW><ROW><id>11392760</id><snippet>[program:x]</snippet></ROW><ROW><id>11392760</id><snippet>stderr_logfile</snippet></ROW><ROW><id>11392760</id><snippet>AUTO</snippet></ROW><ROW><id>11392760</id><snippet>[supervisord]</snippet></ROW><ROW><id>11392760</id><snippet>childlogdir</snippet></ROW><ROW><id>11392760</id><snippet>TMP</snippet></ROW><ROW><id>11392760</id><snippet>&lt;program-name&gt;-&lt;stdout|stderr&gt;---&lt;supervisor-identifier&gt;-&lt;6-random-characters&gt;.log</snippet></ROW><ROW><id>11392760</id><snippet>varnish-stdout---supervisor-AqY52e.log</snippet></ROW><ROW><id>11392760</id><snippet>childlogdir</snippet></ROW><ROW><id>11392778</id><snippet>(user, dbpasswd, account, user)</snippet></ROW><ROW><id>11393130</id><snippet>class MyClassAdmin(admin.ModelAdmin):

    list_display = ('my_own_method')

    def my_own_method(self, obj):
        if [condition]:       
            return True
        else: 
            return False
    my_own_method.boolean = True
</snippet></ROW><ROW><id>11393130</id><snippet>list_display</snippet></ROW><ROW><id>11393202</id><snippet>from scipy.weave import inline

code = r'''
    py::list ret; 
    for(int i = 0; i &lt; N; i++) {
        py::list item;
        for(int j = 0; j &lt; i; j++) {
            item.append(j);
        }
        ret.append(item);
    }
    return_val = ret;
    '''
N  = 5 
R = inline(code,['N'])
print R
</snippet></ROW><ROW><id>11393262</id><snippet>T = T.right</snippet></ROW><ROW><id>11393262</id><snippet>T = T.left</snippet></ROW><ROW><id>11393262</id><snippet>else:</snippet></ROW><ROW><id>11393262</id><snippet>delete(x,T):</snippet></ROW><ROW><id>11393586</id><snippet>TestApp/
TestApp/README
TestApp/LICENSE
TestApp/setup.py
TestApp/run_test.py
TestApp/testapp/__init__.py
TestApp/testapp/testmsg.py
TestApp/testapp/sub/
TestApp/testapp/sub/__init__.py
TestApp/testapp/sub/testprinter.py
</snippet></ROW><ROW><id>11393586</id><snippet>TestApp/run_test.py</snippet></ROW><ROW><id>11393586</id><snippet>from testapp.sub.testprinter import functest ; functest()
</snippet></ROW><ROW><id>11393586</id><snippet>TestApp/testapp/sub/testprinter.py</snippet></ROW><ROW><id>11393586</id><snippet>from testapp.testmsg import MSG
print("The message is: {0}".format(testmsg.MSG))
</snippet></ROW><ROW><id>11394124</id><snippet>#!/usr/bin/env python
import hashlib
import random

password = str(random.getrandbits(8000))
print hashlib.sha512(password).hexdigest()
</snippet></ROW><ROW><id>11394124</id><snippet>#!/usr/bin/env python
import hashlib
import random

password = str(random.getrandbits(8000))
salt = str(random.getrandbits(256))
print hashlib.sha512(password + salt).hexdigest()
</snippet></ROW><ROW><id>11394124</id><snippet>#!/usr/bin/env python
import bcrypt
import random

password = str(random.getrandbits(8000))
print bcrypt.hashpw(password,bcrypt.gensalt())
</snippet></ROW><ROW><id>11394124</id><snippet>$ time ./bcrypt_test.py 
$2a$12$Om3a3zKsCNAM/SLB3hq5w.HYukFwn4CJ73rjXYNUPgqckUx2uLEmG

real    0m0.401s
user    0m0.313s
sys 0m0.013s
</snippet></ROW><ROW><id>11394124</id><snippet>$ time ./hashlib_test.py 
9e37eb4f164bbb1808833297d0244327e4faac109cd92729228f6e36d75d23044ac13a7a1907515cd6db44474b244678779e3ae4e97d8355c2069332aae52d61

real    0m0.032s
user    0m0.021s
sys 0m0.010s
$ 
</snippet></ROW><ROW><id>11394352</id><snippet>readonly_fields</snippet></ROW><ROW><id>11394352</id><snippet>ModelAdmin</snippet></ROW><ROW><id>11394352</id><snippet>readonly_fields = ("title",)
</snippet></ROW><ROW><id>11394617</id><snippet>load-path</snippet></ROW><ROW><id>11394617</id><snippet>python-mode</snippet></ROW><ROW><id>11394629</id><snippet>def get_bad_apple_time():
    # create a bad apple every 5 to 15 seconds
    # assuming your FPS is 60 
    return random.randrange(5, 16) * 60 

#  all bad apple coordinates go here
bad_apples = []  

# timeout until the next bad apple shows up
next_bad_apple = get_bad_apple_time()
</snippet></ROW><ROW><id>11394629</id><snippet>0</snippet></ROW><ROW><id>11394629</id><snippet>while True:
    ...
    next_bad_apple -= 1
    if not next_bad_apple:
        pos = getRandomLocation()

        # if there's already a bad apple on this position
        # create a new position
        while pos in bad_apples:
            pos = getRandomLocation()

        bad_apples.append(pos)
        next_bad_apple = get_bad_apple_time()
</snippet></ROW><ROW><id>11394692</id><snippet>views.task_status</snippet></ROW><ROW><id>11394692</id><snippet>views.is_task_successful</snippet></ROW><ROW><id>11394692</id><snippet>urls.py</snippet></ROW><ROW><id>11394692</id><snippet>urlpatterns += patterns('djcelery.views',
    url(r'^task/status/(?P&lt;task_id&gt;.+)/$', 'task_status',
    name='task-status')
)
</snippet></ROW><ROW><id>11394873</id><snippet>push = Writer.Push  
def appPush(self):
    push(self)
    dumpRow(self)
Writer.Push=appPush
</snippet></ROW><ROW><id>11394873</id><snippet>push</snippet></ROW><ROW><id>11394873</id><snippet>appPush</snippet></ROW><ROW><id>11394873</id><snippet>def appPushCreator(func):
    def appPush(self):
        func(self)
        dumpRow(self)
    return appPush

Writer.Push = appPushCreator(Writer.Push)
</snippet></ROW><ROW><id>11394873</id><snippet>dumpRow</snippet></ROW><ROW><id>11394873</id><snippet>Writer.Push</snippet></ROW><ROW><id>11394967</id><snippet>if re.match(r'[^0-9a-f]', my_string):
    # This is a u'Brauers, A.' kind of string
else:
    # This is a u'0d7a6b6b37682bab6d8eda97cda4bad7' kind of string
</snippet></ROW><ROW><id>11395108</id><snippet>my_list[bounds[0]:bounds[1] + 1] = ['foo'] * ((bounds[1] + 1) - bounds[0])
</snippet></ROW><ROW><id>11395108</id><snippet>+ 1</snippet></ROW><ROW><id>11395108</id><snippet>lower, upper = bounds
upper += 1
my_list[lower:upper] = ['foo'] * (upper - lower)
</snippet></ROW><ROW><id>11395108</id><snippet>+ 1</snippet></ROW><ROW><id>11395108</id><snippet>&gt;&gt;&gt; my_list = range(10)
&gt;&gt;&gt; bounds = (2, 5)
&gt;&gt;&gt; my_list[bounds[0]:bounds[1] + 1] = ['foo'] * ((bounds[1] + 1) - bounds[0])
&gt;&gt;&gt; my_list
[0, 1, 'foo', 'foo', 'foo', 'foo', 6, 7, 8, 9]
</snippet></ROW><ROW><id>11395311</id><snippet>&lt;init&gt;</snippet></ROW><ROW><id>11395779</id><snippet>&gt;&gt;&gt; for date in dict_date:
with ZipFile(os.path.join(path, date, '{0}.zip'.format(date)), 'w') as myzip:
    for animal in dict_date[date]:
        for fil in os.listdir(os.path.join(path, date, animal)):
            if fil.endswith('.jpg'):
                myzip.write(os.path.join(path, date, animal, fil))
</snippet></ROW><ROW><id>11395779</id><snippet>directory = src</snippet></ROW><ROW><id>11395830</id><snippet>sys.path</snippet></ROW><ROW><id>11395830</id><snippet>SCRIPT_DIR=/somepath/to/scripts/folder
cd $SCRIPT_DIR/eod

export PYTHONPATH=$SCRIPT_DIR
python_cmd='import settings as st; 
            print " ".join(st.foo())'
</snippet></ROW><ROW><id>11395994</id><snippet>run('mysql -u %s -p%s -e "grant all on %s.* to \'%s\'@\'localhost\' identified by \'PASSWORD\'"' % (user, dbpasswd, account, account))
</snippet></ROW><ROW><id>11396043</id><snippet>from pyparsing import *
ParserElement.enablePackrat()
import string

name = Word(alphanums)

filter = (Combine(oneOf(list(string.ascii_lowercase)) + Optional('~')) +
          dblQuotedString.setParseAction(removeQuotes))
# convert parsed filter to dict
filter.setParseAction(lambda t:{t[0]:t[1]})

expr = operatorPrecedence(filter | name, 
            [
            (oneOf('. % -'), 2, opAssoc.LEFT),
            ('+', 2, opAssoc.LEFT),
            ])

test = r'foo . bar - (a"hello \"world\"" % (b~"foo" + bar) . (fooZ.(bar2+(c"foo bar".d"bar foo"))))'

print expr.parseString(test, parseAll=True).asList()
</snippet></ROW><ROW><id>11396043</id><snippet>[['foo',
  '.',
  'bar',
  '-',
  [{'a': 'hello \\"world\\"'},
   '%',
   [{'b~': 'foo'}, '+', 'bar'],
   '.',
   ['fooZ', '.', ['bar2', '+', [{'c': 'foo bar'}, '.', {'d': 'bar foo'}]]]]]]
</snippet></ROW><ROW><id>11396229</id><snippet>with</snippet></ROW><ROW><id>11396229</id><snippet>with open('of', 'w') as f:
    f.write("Stuff")

# f.close() will be called automatically upon leaving the with-scope
</snippet></ROW><ROW><id>11396288</id><snippet>mimetypes.guess_extension</snippet></ROW><ROW><id>11396288</id><snippet>mimetypes</snippet></ROW><ROW><id>11396288</id><snippet>&gt;&gt;&gt; mimetypes.guess_all_extensions('image/jpeg', strict=False)
['.jpe', '.jpg', '.jpeg']
</snippet></ROW><ROW><id>11396288</id><snippet>.jpe</snippet></ROW><ROW><id>11396393</id><snippet>'$[contract_key]'</snippet></ROW><ROW><id>11396393</id><snippet>%s</snippet></ROW><ROW><id>11396393</id><snippet>get</snippet></ROW><ROW><id>11396393</id><snippet>contract = db.get(contract_key)
</snippet></ROW><ROW><id>11396393</id><snippet>contract = Contract.get_by_id(id)
</snippet></ROW><ROW><id>11396599</id><snippet>event</snippet></ROW><ROW><id>11396599</id><snippet>widget</snippet></ROW><ROW><id>11396599</id><snippet>cget</snippet></ROW><ROW><id>11396599</id><snippet>def browseFile(event):
    buttonText = event.widget.cget("text")
    if buttonText == "OK":
        doSomeStuff()
</snippet></ROW><ROW><id>11396741</id><snippet>csv</snippet></ROW><ROW><id>11396741</id><snippet>writer = csv.writer(fd_out)
writer.writerows((obj["name"],obj["count"],obj["age"],obj["params"]["country"]))
</snippet></ROW><ROW><id>11396741</id><snippet>writerows</snippet></ROW><ROW><id>11396868</id><snippet>data = """Name\tHour\tLocation
A\t4\tSan Fransisco
B\t2\tNew York
C\t4\tNew York
D\t7\tDenton
E\t8\tBoston
F\t1\tBoston
"""

import csv
import StringIO
from collections import Counter


input_stream = StringIO.StringIO(data)
reader = csv.reader(input_stream, delimiter='\t')

reader.next() #skip header
cities = [row[2] for row in reader]

for (k,v) in Counter(cities).iteritems():
    print "%s appears %d times" % (k, v)
</snippet></ROW><ROW><id>11396868</id><snippet>San Fransisco appears 1 times
Denton appears 1 times
New York appears 2 times
Boston appears 2 times
</snippet></ROW><ROW><id>11397052</id><snippet>data.groupby(data['date'].map(lambda x: x.year))
</snippet></ROW><ROW><id>11397409</id><snippet>&gt;&gt;&gt; a = np.empty((0,4))
&gt;&gt;&gt; for con in cont:
        rect = np.array(cv2.boundingRect(con)).reshape(1,4)
        a = np.append(a,rect,0)
</snippet></ROW><ROW><id>11397409</id><snippet>a</snippet></ROW><ROW><id>11397409</id><snippet>(166,4)</snippet></ROW><ROW><id>11397556</id><snippet>j == i == len(n_dup)-1</snippet></ROW><ROW><id>11397556</id><snippet>n_dup[i] == n_dup[j]</snippet></ROW><ROW><id>11397556</id><snippet>n_dub[len(n_dup)-1]</snippet></ROW><ROW><id>11397556</id><snippet>class Notification:
    def __init__(self, id, url, action):
        self.id = id
        self.url = url
        self.action = action

    def __eq__(self, other):
        return self.url == other.url and self.action == other.action

    def __hash__(self):
        return hash(self.url) ^ hash(self.action)


unique_notifications = {Notification(n.id, n.url, n.action) for n in nots}
</snippet></ROW><ROW><id>11397556</id><snippet>out_n = set(Notification.objects.filter(...))
</snippet></ROW><ROW><id>11397821</id><snippet>open(filename)</snippet></ROW><ROW><id>11397821</id><snippet>filename</snippet></ROW><ROW><id>11397821</id><snippet>\r\n</snippet></ROW><ROW><id>11397821</id><snippet>\n</snippet></ROW><ROW><id>11398280</id><snippet>bind_class</snippet></ROW><ROW><id>11398280</id><snippet>'Entry'</snippet></ROW><ROW><id>11398678</id><snippet>with</snippet></ROW><ROW><id>11398678</id><snippet>with open('out.7.9.12.txt','a+') as out:
   # the rest of your code indented under here
   # ....
   score_dict={}
   Max=245
</snippet></ROW><ROW><id>11398756</id><snippet>#!/bin/bash

mkdir merged
shopt -s extglob

d1=$1
d2=$(date -d "$d1 +1 day")

for f in result-@($d1-@(0[2-9]|[1-2][0-9])|$d2-0[01])*.csv.gz ; do
  gzip -cd $f
  mv $f merged/$f
done | gzip &gt; $d1-result.csv.gz
</snippet></ROW><ROW><id>11398756</id><snippet>.sh</snippet></ROW><ROW><id>11398756</id><snippet>chmod +x myscript.sh
</snippet></ROW><ROW><id>11398756</id><snippet>./myscript.sh 20120705
</snippet></ROW><ROW><id>11398756</id><snippet>/etc/crontab</snippet></ROW><ROW><id>11398756</id><snippet>2 2 * * * root ./myscript.sh 
</snippet></ROW><ROW><id>11398756</id><snippet>d1=$(date +%Y%m%d -d "now -1 day")
d2=$(date +%Y%m%d)
</snippet></ROW><ROW><id>11398807</id><snippet>key</snippet></ROW><ROW><id>11398807</id><snippet>unicode</snippet></ROW><ROW><id>11398807</id><snippet>str</snippet></ROW><ROW><id>11398807</id><snippet>key</snippet></ROW><ROW><id>11398807</id><snippet>dropbox.auth.Authenticator</snippet></ROW><ROW><id>11398807</id><snippet>self.consumer.secret</snippet></ROW><ROW><id>11398807</id><snippet>token.secret</snippet></ROW><ROW><id>11398807</id><snippet>dropbox_auth_callback</snippet></ROW><ROW><id>11398807</id><snippet>config</snippet></ROW><ROW><id>11398807</id><snippet>Authenticator</snippet></ROW><ROW><id>11398807</id><snippet>Authenticator.load_config</snippet></ROW><ROW><id>11398807</id><snippet>siteinadropbox/models/site.py</snippet></ROW><ROW><id>11398807</id><snippet>test/dbtools.py</snippet></ROW><ROW><id>11398873</id><snippet>double</snippet></ROW><ROW><id>11398873</id><snippet>float</snippet></ROW><ROW><id>11398873</id><snippet>myfunc</snippet></ROW><ROW><id>11398873</id><snippet>myfunc</snippet></ROW><ROW><id>11398873</id><snippet>int</snippet></ROW><ROW><id>11398873</id><snippet>#include &lt;stdlib.h&gt;

int myfunc(int n);

int main() {
  printf("%d\n", myfunc(3));   
  return 0;
}
</snippet></ROW><ROW><id>11398873</id><snippet>myfunc</snippet></ROW><ROW><id>11398873</id><snippet>float</snippet></ROW><ROW><id>11398873</id><snippet>int</snippet></ROW><ROW><id>11398873</id><snippet>float</snippet></ROW><ROW><id>11398873</id><snippet>%module mfuncs
%{
extern float myfunc(int n);
%}

extern float myfunc(int n);
</snippet></ROW><ROW><id>11398873</id><snippet>%{</snippet></ROW><ROW><id>11398873</id><snippet>%}</snippet></ROW><ROW><id>11398873</id><snippet>myfunc</snippet></ROW><ROW><id>11398873</id><snippet>%module mfuncs
%{
#include "myfunc.h"
%}

%include "myfunc.h"
</snippet></ROW><ROW><id>11398873</id><snippet>#include "myfunc.h"</snippet></ROW><ROW><id>11398894</id><snippet>line.split(",")</snippet></ROW><ROW><id>11398894</id><snippet>&gt;&gt;&gt; line = '"190","Windows 2000","2000","609"'
&gt;&gt;&gt; sliced = line.split(',')
&gt;&gt;&gt; print sliced
['"190"', '"Windows 2000"', '"2000"', '"609"']
&gt;&gt;&gt; first_item = sliced[0][1:-1]
&gt;&gt;&gt; print first_item
190
</snippet></ROW><ROW><id>11398894</id><snippet>def get_item(line, index):
    return line.split(',')[index][1:-1]
</snippet></ROW><ROW><id>11398894</id><snippet>item.strip()</snippet></ROW><ROW><id>11398954</id><snippet>-q</snippet></ROW><ROW><id>11398954</id><snippet>grep</snippet></ROW><ROW><id>11398954</id><snippet>$ python
Python 2.7.3rc2 (default, Apr  5 2012, 18:58:12) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.system("grep -iq igor /etc/passwd")
0
&gt;&gt;&gt; os.system("grep -iq oleg /etc/passwd")
256
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11398954</id><snippet>-q</snippet></ROW><ROW><id>11398954</id><snippet>grep</snippet></ROW><ROW><id>11398954</id><snippet>popen</snippet></ROW><ROW><id>11398954</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>11398954</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; null = open(os.devnull, "w")
&gt;&gt;&gt; grep = subprocess.Popen(shlex.split("grep -i oleg /etc/passwd"), stderr = null, stdout = null)
&gt;&gt;&gt; grep.communicate()
(None, None)
&gt;&gt;&gt; print grep.returncode
1
&gt;&gt;&gt; grep = subprocess.Popen(shlex.split("grep -i igor /etc/passwd"), stderr = null, stdout = null)
&gt;&gt;&gt; grep.communicate()
(None, None)
&gt;&gt;&gt; print grep.returncode
0
</snippet></ROW><ROW><id>11399048</id><snippet>&gt;&gt;&gt; {}[tuple()] = 1
&gt;&gt;&gt; {}[list()] = 1 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</snippet></ROW><ROW><id>11399048</id><snippet>tuple</snippet></ROW><ROW><id>11399048</id><snippet>list</snippet></ROW><ROW><id>11399048</id><snippet>&gt;&gt;&gt; hash(list())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
&gt;&gt;&gt; hash(tuple())
3527539
</snippet></ROW><ROW><id>11399087</id><snippet>/Library/Python/2.7</snippet></ROW><ROW><id>11399087</id><snippet>idle3.2</snippet></ROW><ROW><id>11399087</id><snippet>/Applications/Python 3.2/IDLE.app</snippet></ROW><ROW><id>11399087</id><snippet>/Developer</snippet></ROW><ROW><id>11399087</id><snippet># for Xcode 4.3+ only
$ [ ! -e /Developer ] &amp;&amp; sudo ln -s Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer /Developer


$ tar xf ./pycrypto-2.6.tar.gz
$ cd ./pycrypto-2.6
$ python3.2 setup.py install
$ cd
$ python3.2
Python 3.2.3 (v3.2.3:3d0686d90f55, Apr 10 2012, 11:25:50) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import Crypto.Cipher.AES
&gt;&gt;&gt; Crypto.Cipher.AES.__file__
'/Library/Frameworks/Python.framework/Versions/3.2/lib/python3.2/site-packages/Crypto/Cipher/AES.py'
</snippet></ROW><ROW><id>11399210</id><snippet>CssTests</snippet></ROW><ROW><id>11399210</id><snippet>css.getCssUriList</snippet></ROW><ROW><id>11399210</id><snippet>import unittest

class CssListTestCase(unittest.TestCase):

    def setUp(self):
        self.css = core.Css()

    def test_css_list_should_return_css_url_list_from_html(self):
        # Setup your test
        sample_html = """
        &lt;html&gt;
            &lt;head&gt;
                &lt;title&gt;Some web page&lt;/title&gt;
                &lt;link rel='stylesheet' type='text/css' media='screen'
                      href='http://example.com/styles/full_url_style.css' /&gt;
                &lt;link rel='stylesheet' type='text/css' media='screen'
                      href='/styles/relative_url_style.css' /&gt;
            &lt;/head&gt;
            &lt;body&gt;&lt;div&gt;This is a div&lt;/div&gt;&lt;/body&gt;
        &lt;/html&gt;
        """
        base_url = "http://example.com/"

        # Exercise your System Under Test (SUT)
        css_urls = self.css.get_css_uri_list(sample_html, base_url)

        # Verify the output
        expected_urls = [
            "http://example.com/styles/full_url_style.css",
            "http://example.com/styles/relative_url_style.css"
        ]
        self.assertListEqual(expected_urls, css_urls)    
</snippet></ROW><ROW><id>11399210</id><snippet>getContent()</snippet></ROW><ROW><id>11399210</id><snippet>core.HttpRequests</snippet></ROW><ROW><id>11399210</id><snippet>HttpRequests.__init__</snippet></ROW><ROW><id>11399210</id><snippet>HttpClient</snippet></ROW><ROW><id>11399210</id><snippet>get()</snippet></ROW><ROW><id>11399210</id><snippet>class HttpRequests(object):

    def __init__(self, http_client):
        self.http_client = http_client

   def get_content(self, url):
        # You could imagine doing more complicated stuff here, like checking the
        # response code, or wrapping your library exceptions or whatever
        return self.http_client.get(url)
</snippet></ROW><ROW><id>11399210</id><snippet>HttpRequests</snippet></ROW><ROW><id>11399210</id><snippet>core.HttpRequests</snippet></ROW><ROW><id>11399210</id><snippet>import core

class HttpRequestsTestCase(unittest.TestCase):

    def test_get_content_should_use_get_properly(self):
        # Setup

        url = "http://example.com"

        # We create an object that is not a real HttpClient but that will have
        # the same interface (see the `spec` argument). This mock object will
        # also have some nice methods and attributes to help us test how it was used.
        mock_http_client = Mock(spec=somehttplib.HttpClient) 

        # Exercise

        http_requests = core.HttpRequests(mock_http_client)
        content = http_requests.get_content(url)

        # Here, the `http_client` attribute of `http_requests` is the mock object we
        # have passed it, so the method that is called is `mock.get()`, and the call
        # stops in the mock framework, without a real HTTP request being sent.

        # Verify

        # We expect our get_content method to have called our http library.
        # Let's check!
        mock_http_client.get.assert_called_with(url)

        # We can find out what our mock object has returned when get() was
        # called on it
        expected_content = mock_http_client.get.return_value
        # Since our get_content returns the same result without modification,
        # we should have received it
        self.assertEqual(content, expected_content)
</snippet></ROW><ROW><id>11399210</id><snippet>get_content</snippet></ROW><ROW><id>11399210</id><snippet>HttpRequests</snippet></ROW><ROW><id>11399210</id><snippet>get</snippet></ROW><ROW><id>11399210</id><snippet>HttpRequests</snippet></ROW><ROW><id>11399210</id><snippet>core.py</snippet></ROW><ROW><id>11399210</id><snippet>import requests

class HttpRequests(object):

    # No more DI in __init__

    def get_content(self, url):
        # We simply delegate the HTTP work to the `requests` module
        return requests.get(url)
</snippet></ROW><ROW><id>11399210</id><snippet>requests</snippet></ROW><ROW><id>11399210</id><snippet>requests</snippet></ROW><ROW><id>11399210</id><snippet>import core

class HttpRequestsTestCase(unittest.TestCase):

    def setUp(self):
        # We create a mock to replace the `requests` module
        self.mock_requests = Mock()

        # We keep a reference to the current, real, module
        self.old_requests = core.requests

        # We replace the module with our mock
        core.requests = self.mock_requests

    def tearDown(self):
        # It is very important that each unit test be isolated, so we need
        # to be good citizen and clean up after ourselves. This means that
        # we need to put back the correct `requests` module where it was
        core.requests = self.old_requests

    def test_get_content_should_use_get_properly(self):
        # Setup

        url = "http://example.com"

        # Exercise
        http_client = core.HttpRequests()
        content = http_client.get_content(url)

        # Verify

        # We expect our get_content method to have called our http library.
        # Let's check!
        self.mock_requests.get.assert_called_with(url)

        # We can find out what our mock object has returned when get() was
        # called on it
        expected_content = self.mock_requests.get.return_value
        # Since our get_content returns the same result without modification,
        # we should have received
        self.assertEqual(content, expected_content)
</snippet></ROW><ROW><id>11399210</id><snippet>mock</snippet></ROW><ROW><id>11399210</id><snippet>patch</snippet></ROW><ROW><id>11399210</id><snippet>import core

class HttpRequestsTestCase(unittest.TestCase):

    @patch("core.requests")
    def test_get_content_should_use_get_properly(self, mock_requests):
        # Notice the extra param in the test. This is the instance of `Mock` that the
        # decorator has substituted for us and it is populated automatically.

        ...

        # The param is now the object we need to make our assertions against
        expected_content = mock_requests.get.return_value
</snippet></ROW><ROW><id>11399232</id><snippet>Foo().target</snippet></ROW><ROW><id>11399232</id><snippet>None</snippet></ROW><ROW><id>11399232</id><snippet>foo_id</snippet></ROW><ROW><id>11399232</id><snippet>target_id</snippet></ROW><ROW><id>11399339</id><snippet>s = 'W:1.0,X:1.1(A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5,(F:0.6,G:0.7)H:0.8)Y:0.9'

def max_depth(s, start_ch='(', end_ch=')'):
    depth = 0
    best = 0
    for ch in s:
        if ch == start_ch:
            depth += 1
            best = max(depth, best)
        elif ch == end_ch:
            depth -= 1
            if depth &lt; 0:
                raise ValueError('illegal string - unmatched close-paren')
    if depth:
        raise ValueError('illegal string - unmatched open-paren')
    return best

print max_depth(s)    # =&gt; 2
</snippet></ROW><ROW><id>11399424</id><snippet>all_keys = set().union(*(d.keys() for d in mylist))
</snippet></ROW><ROW><id>11399466</id><snippet>writer.writerow(("%.6f" % obj["time"], ))
</snippet></ROW><ROW><id>11399624</id><snippet>sendMessage = function(path, opt_param) {
  /* path variable is part of a URL being maintained */
  path += '?g=' + state.game_key;  /* Saving game key in URL */
  if (opt_param) {
    path += '&amp;' + opt_param; /* Adding optional parameters to the path */
  }
  var xhr = new XMLHttpRequest(); /* Used for Ajax in Javascript */
  xhr.open('POST', path, true); /* Asynchronously POST, via HTTP, the path */
  xhr.send(); /* Start the POST above */
};

onOpened = function() {
  connected = true; /* Set boolean value, which lets us know we're connected */
  sendMessage('opened'); /* We can now send messages to the server */
  updateBoard(); /* Update user interface to reflect that socket is open */
};
</snippet></ROW><ROW><id>11399624</id><snippet>sendMessage()</snippet></ROW><ROW><id>11399635</id><snippet>tags</snippet></ROW><ROW><id>11399635</id><snippet>tag</snippet></ROW><ROW><id>11399635</id><snippet>for related_tag in tags:
</snippet></ROW><ROW><id>11399635</id><snippet>tag.weight = ...</snippet></ROW><ROW><id>11399635</id><snippet>tag</snippet></ROW><ROW><id>11399635</id><snippet>related_tag</snippet></ROW><ROW><id>11399953</id><snippet>with()</snippet></ROW><ROW><id>11399953</id><snippet>def checkOS():
    with open("C:/Python/NSRLOS.txt") as fid1,open("C:/Python/sha_sub_hashes.out") as fid2,open("osMatches.txt", 'w') as outdata:
        for xline,yline in zip(fid1,fid2):  #zip fetches lines from both files one by one                                           
            xline= xline.split(',')[1]      #use itertools.izip instead of zip if you're on python 2.x
            yline = yline.split("|")[3]
            zline = xline.replace('"','')
            if yline == zline:                
                outdata.write("{0}{1}\n".format(yline , zline)) #use write to write the data back

if __name__=="__main__":
checkOS()
</snippet></ROW><ROW><id>11400018</id><snippet>twisted.web._newclient._WrapperException</snippet></ROW><ROW><id>11400018</id><snippet>reasons</snippet></ROW><ROW><id>11400018</id><snippet>__str__</snippet></ROW><ROW><id>11400018</id><snippet>failure.value.reasons[0].printTraceback()
</snippet></ROW><ROW><id>11400018</id><snippet>Agent.request()</snippet></ROW><ROW><id>11400018</id><snippet>IBodyProducer</snippet></ROW><ROW><id>11400197</id><snippet>list[-1]</snippet></ROW><ROW><id>11400547</id><snippet>for line in getReference:
</snippet></ROW><ROW><id>11400547</id><snippet>with open(''+line.strip()+'.txt') as f: pass
</snippet></ROW><ROW><id>11400632</id><snippet>projectView = QtGui.QTableView() #THIS part is wrong if the GUI is designed through Designer
projectView.setModel(projectModel)
projectView.show()
</snippet></ROW><ROW><id>11400632</id><snippet>projectView = self.ui.myList #or some other name, which is the SAME AS that object name in   Designer
projectView.setModel(projectModel)
projectView.show()
</snippet></ROW><ROW><id>11400832</id><snippet>if os.system("/usr/libexec/oah/translate &gt; /dev/null 2&gt;&amp;1"):
  print "Not installed"
else:
  print "Installed"
</snippet></ROW><ROW><id>11400873</id><snippet>[e['key3']['sub_key'] for e in x['hits']['results']]
</snippet></ROW><ROW><id>11400873</id><snippet>for e in x['hits']['results']:
 e['key3']['sub_key'] = 1
</snippet></ROW><ROW><id>11400878</id><snippet>10x</snippet></ROW><ROW><id>11400878</id><snippet>repeat=10</snippet></ROW><ROW><id>11400878</id><snippet> 1. 0.52/0.53 Lion 2.6
 2. 0.49/0.50 Lion 2.7
 3. 0.48/0.48 MacPorts 2.7
 4. 0.39/0.49 MacPorts 3.2
 5. 0.39/0.48 HomeBrew 3.2
</snippet></ROW><ROW><id>11400878</id><snippet>[99]</snippet></ROW><ROW><id>11400878</id><snippet>[-1]</snippet></ROW><ROW><id>11400878</id><snippet> 1. 0.98/1.02 MacPorts 2.6
 2. 1.47/1.59 MacPorts 3.2
</snippet></ROW><ROW><id>11400878</id><snippet> 1. 0.50/0.48 Homebrew 2.7
 2. 0.75/0.82 Homebrew 3.2
</snippet></ROW><ROW><id>11401142</id><snippet>_read()</snippet></ROW><ROW><id>11401142</id><snippet>.doc</snippet></ROW><ROW><id>11401142</id><snippet>'test.ini'</snippet></ROW><ROW><id>11401142</id><snippet>[EG SECTION]&lt;br&gt;
EG=&lt;br&gt;
  item 1,&lt;br&gt;
  item 2,&lt;br&gt;
  item 3&lt;br&gt;
</snippet></ROW><ROW><id>11401142</id><snippet>EG</snippet></ROW><ROW><id>11401142</id><snippet>EG SECTION</snippet></ROW><ROW><id>11401142</id><snippet>import ConfigParser

cp = ConfigParser.ConfigParser()
cp.read('test.ini')

ret = cp.get('EG SECTION', 'EG')
print repr(ret)  # '\nitem 1,\nitem 2,\nitem 3'

cleaned = ''.join(ch for ch in ret if ch != '\n')  # remove newlines
print cleaned.split(',')  # ['item 1', 'item 2', 'item 3']
</snippet></ROW><ROW><id>11401142</id><snippet>cleaned = [item.strip() for item in ret.split(',')]
</snippet></ROW><ROW><id>11401349</id><snippet>msg=s.recv(100)
</snippet></ROW><ROW><id>11401349</id><snippet>msg = s.recv(1024)
broadcast(msg,s)
</snippet></ROW><ROW><id>11401349</id><snippet>#!/usr/bin/python

import socket
import select
import sys

port = 11222
serverSocket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
serverSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1024)
serverSocket.bind(('',port))
serverSocket.listen(5)

sockets=[serverSocket]
print 'Server is started on port' , port,'\n'

def acceptConn():
    newsock, addr = serverSocket.accept()
    sockets.append(newsock)
    newsock.send('You are now connected to the chat server\n')
    msg = 'Client joined: %s:%d\n' % addr
    broadcast(msg, newsock)

def broadcast(msg, sourceSocket):
    for s in sockets:
        if (s != serverSocket and s != sourceSocket):
            s.send(msg)
    sys.stdout.write(msg)
    sys.stdout.flush()


while True:
    (sread, swrite, sexec)=select.select(sockets,[],[])
    for s in sread:
        if s == serverSocket:
            acceptConn()
        else:
            msg=s.recv(100)
            if not msg or msg.rstrip() == "quit":
                host,port=s.getpeername()
                msg = 'Client left: %s:%d\n' % (host,port)
                broadcast(msg,s)
                s.close()
                sockets.remove(s)
                del s
            else:
                host,port=s.getpeername()
                broadcast(msg,s)
                continue
</snippet></ROW><ROW><id>11401349</id><snippet>buffers[s] += msg
if '\nquit\n' in buffers[s]:
   # do quit stuff
lines = buffers[s].split('\n')[-1]
buffers[s] = ('\n' if len(lines) &gt; 1 else '') + lines[-1]
</snippet></ROW><ROW><id>11401362</id><snippet>s_regs = sorted(regexes,key=lambda x:len(x))
s_regs.reverse()
regex = '|'.join(s_regs)
</snippet></ROW><ROW><id>11401446</id><snippet>plt.axis()</snippet></ROW><ROW><id>11401446</id><snippet>plt.axis([xmin,xmax,ymin,ymax])
</snippet></ROW><ROW><id>11401446</id><snippet>x(y)min/max</snippet></ROW><ROW><id>11401472</id><snippet>import os

print ("Hello")
print ("Press any key to exit")
ex = raw_input ("")
os._exit(0)
</snippet></ROW><ROW><id>11401593</id><snippet>ss</snippet></ROW><ROW><id>11401593</id><snippet>&gt;&gt;&gt; def apple():
    if not hasattr(apple, 'ss'):  # This way it'll only be set inside the function once
        apple.ss = 'nil'
    return apple.ss

&gt;&gt;&gt; apple()
'nil'
&gt;&gt;&gt; apple.ss
'nil'
&gt;&gt;&gt; apple.ss = 'kk'
&gt;&gt;&gt; apple.ss
'kk'
&gt;&gt;&gt; apple()
'kk'
</snippet></ROW><ROW><id>11401798</id><snippet>for-in</snippet></ROW><ROW><id>11401798</id><snippet>result=[]
for item in POINTS:
    res=DISTANCE(*item)  
    result.append(res)
print(sum(result))
</snippet></ROW><ROW><id>11401798</id><snippet>*</snippet></ROW><ROW><id>11401816</id><snippet>\x</snippet></ROW><ROW><id>11401816</id><snippet>&gt;&gt;&gt; '123456789abc'.decode('hex')
'\x124Vx\x9a\xbc'
</snippet></ROW><ROW><id>11401883</id><snippet>HttpResponse</snippet></ROW><ROW><id>11401883</id><snippet>return render(request, 'main.html', { 'header_title': 'my text' })
</snippet></ROW><ROW><id>11401883</id><snippet>return render_to_response('main.html', { 'header_title': 'my_text' }, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>11401913</id><snippet>AES_stream=AES.new(key,AES.MODE_CFB,IV)</snippet></ROW><ROW><id>11401961</id><snippet>d[groupIndex] = list[i]
</snippet></ROW><ROW><id>11401961</id><snippet>Element</snippet></ROW><ROW><id>11401961</id><snippet>Element</snippet></ROW><ROW><id>11401961</id><snippet>d[groupIndex] = [list[i]]
</snippet></ROW><ROW><id>11401961</id><snippet>d[groupIndex] = list[i:i+1]
</snippet></ROW><ROW><id>11401961</id><snippet>if</snippet></ROW><ROW><id>11401961</id><snippet>d.setdefault(groupIndex, []).append(list[i])</snippet></ROW><ROW><id>11401961</id><snippet>collections.defaultdict(list)</snippet></ROW><ROW><id>11402186</id><snippet>request.POST</snippet></ROW><ROW><id>11402330</id><snippet>env TZ=/usr/share/zoneinfo/US/Central</snippet></ROW><ROW><id>11402618</id><snippet>var xhr = new XMLHttpRequest();
xhr.open('POST', url, false);  # third param is sync/async
xhr.send(data);
var response = xhr.responseText;
</snippet></ROW><ROW><id>11402642</id><snippet>itertools.starmap</snippet></ROW><ROW><id>11402642</id><snippet>itertools.starmap(afunc, aniter)
</snippet></ROW><ROW><id>11402642</id><snippet>def starmap(function, iterable):
   # starmap(pow, [(2,5), (3,2), (10,3)]) --&gt; 32 9 1000
   for args in iterable:
       yield function(*args)
</snippet></ROW><ROW><id>11402642</id><snippet>itertools</snippet></ROW><ROW><id>11402642</id><snippet>itertools</snippet></ROW><ROW><id>11402817</id><snippet> (@[\w\d\.]*\s[\w\d\.]*\s?[\w\d\.]\s?[\w\d\.]*?\s+?\w+(?:\s\w+)?)
</snippet></ROW><ROW><id>11402817</id><snippet>(?:\s\w+)?
</snippet></ROW><ROW><id>11402817</id><snippet>((@[\w]+?\s)((?:(?:[\w]+?)\s){1,2})((?:[\w]+?\s){2}))
</snippet></ROW><ROW><id>11402817</id><snippet>(@[\w]+?\s)
</snippet></ROW><ROW><id>11402817</id><snippet>((?:(?:[\w]+?)\s){1,2})
</snippet></ROW><ROW><id>11402817</id><snippet>((?:[\w]+?\s){2})
</snippet></ROW><ROW><id>11402840</id><snippet>accumulate</snippet></ROW><ROW><id>11402840</id><snippet>&gt;&gt;&gt; numpy.maximum.accumulate(a, axis=1)
array([[ 2,  2,  5],
       [-1, -1,  4],
       [ 4,  4,  4],
       [ 2,  3,  4]])
</snippet></ROW><ROW><id>11403123</id><snippet>data = {
    "A": {"value": 0.2, "children": {
            "D": {"value": 0.3, "children": {}},
            "E": {"value": 0.4, "children": {
                    "H": {"value": 0.5, "children": {}},
                    "I": {"value": 0.6, "children": {}}
                }
            }
        }
    },
    "B": {"value": 0.7, "children": {
            "C": {"value": 0.8, "children": {}},
            "D": {"value": 0.9, "children": {}}
        }
    }
}
</snippet></ROW><ROW><id>11403123</id><snippet>from operator import itemgetter

def display(tree, depth=0):
    prepend = "\t" * depth
    for key, val in sorted(tree.items()):
        print "{0}{1}: {2}".format(prepend, key, val['value'])
        if val['children']:
            display(val['children'], depth + 1)
</snippet></ROW><ROW><id>11403123</id><snippet>&gt;&gt;&gt; display(data)
A: 0.2
    D: 0.3
    E: 0.4
        H: 0.5
        I: 0.6
B: 0.7
    C: 0.8
    D: 0.9
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11403126</id><snippet>str</snippet></ROW><ROW><id>11403126</id><snippet>string</snippet></ROW><ROW><id>11403126</id><snippet>append</snippet></ROW><ROW><id>11403126</id><snippet>l[0] = x</snippet></ROW><ROW><id>11403320</id><snippet>NewRequest</snippet></ROW><ROW><id>11403320</id><snippet>pyramid.threadlocal.get_current_request()</snippet></ROW><ROW><id>11403320</id><snippet>WebError#error_catcher</snippet></ROW><ROW><id>11403320</id><snippet>Paste#error_catcher</snippet></ROW><ROW><id>11403320</id><snippet>if int(request.POST['donation_amount']) &gt;= 1000000:
   send_email("Wake up, we're rich!", authenticated_userid(request))
</snippet></ROW><ROW><id>11403492</id><snippet>&gt;&gt;&gt; import sys, types
&gt;&gt;&gt; isinstance(sys, types.ModuleType)
True
</snippet></ROW><ROW><id>11403492</id><snippet>types</snippet></ROW><ROW><id>11403492</id><snippet>&gt;&gt;&gt; dir(types)
['BooleanType', 'BufferType', 'BuiltinFunctionType', 'BuiltinMethodType', 'ClassType', 'CodeType', 'ComplexType', 'DictProxyType', 'DictType', 'DictionaryType', 'EllipsisType', 'FileType', 'FloatType', 'FrameType', 'FunctionType', 'GeneratorType', 'GetSetDescriptorType', 'InstanceType', 'IntType', 'LambdaType', 'ListType', 'LongType', 'MemberDescriptorType', 'MethodType', 'ModuleType', 'NoneType', 'NotImplementedType', 'ObjectType', 'SliceType', 'StringType', 'StringTypes', 'TracebackType', 'TupleType', 'TypeType', 'UnboundMethodType', 'UnicodeType', 'XRangeType', '__builtins__', '__doc__', '__file__', '__name__', '__package__']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11403532</id><snippet>tuple</snippet></ROW><ROW><id>11403532</id><snippet>t = Thread(target = do_something, args = arguments + (the_queue, ))
</snippet></ROW><ROW><id>11403663</id><snippet>&gt;&gt;&gt; pattern=re.compile("[^\w']")
&gt;&gt;&gt; pattern.sub(' ', "doesn't it rain today?")
"doesn't it rain today "
</snippet></ROW><ROW><id>11403663</id><snippet>&gt;&gt;&gt; re.compile("[^\w']|_").sub(" ","doesn't this _technically_ means it works? naïve I am ...")
"doesn't this  technically  means it works  naïve I am    "
</snippet></ROW><ROW><id>11403732</id><snippet>Foo()
</snippet></ROW><ROW><id>11403732</id><snippet>Foo.__dict__.get('__init__')(None)
</snippet></ROW><ROW><id>11403732</id><snippet>None</snippet></ROW><ROW><id>11403732</id><snippet>self</snippet></ROW><ROW><id>11403732</id><snippet>__init__</snippet></ROW><ROW><id>11403732</id><snippet>self</snippet></ROW><ROW><id>11403732</id><snippet>None</snippet></ROW><ROW><id>11403732</id><snippet>In [32]: class Foo(object):
   ....:     @staticmethod
   ....:     def __init__():
   ....:         print "Foo init"
   ....:

In [33]: Foo()
Foo init
Out[33]: &lt;django.core.management.commands.shell.Foo at 0x46d49b0&gt;

In [34]: Foo.__init__()
Foo init
</snippet></ROW><ROW><id>11403821</id><snippet>pack</snippet></ROW><ROW><id>11403821</id><snippet>None</snippet></ROW><ROW><id>11403821</id><snippet>checkbox_1</snippet></ROW><ROW><id>11403821</id><snippet>None</snippet></ROW><ROW><id>11403821</id><snippet>checkbox_1 = Checkbutton(root, text='1   ', command=checkbutton_value)
checkbox_1.pack()
</snippet></ROW><ROW><id>11403821</id><snippet>def checkbutton_value1():
    if(var1.get()):
       var2.set(0)

def checkbutton_value2():
    if(var2.get()):
       var1.set(0)

var1=IntVar()
checkbox_1 = Checkbutton(root, text='1   ', variable=var1, command=checkbutton_value1)
checkbox_1.pack()
var2=IntVar()
checkbox_2 = Checkbutton(root, text='2   ', variable=var2, command=checkbutton_value2)
checkbox_2.pack()
</snippet></ROW><ROW><id>11403821</id><snippet>class MyCheckButton(CheckButton):
    def __init__(self,*args,**kwargs):
        self.var=kwargs.get('variable',IntVar())
        kwargs['variable']=self.var
        Checkbutton.__init__(self,*args,**kwargs)

    def is_checked(self):
        return self.var.get()
</snippet></ROW><ROW><id>11403999</id><snippet>def show_other(evt):
    f2 = wx.Frame(None,-1)
    c = wx.Choice(f2,-1,choices=['red','blue','green'])
    f2.Show()

a = wx.App(redirect = False)


f = wx.Frame(None,-1)
b = wx.Button(f,wx.ID_OK)
b.Bind(wx.EVT_BUTTON,show_other)
f.Show()
a.MainLoop()
</snippet></ROW><ROW><id>11404052</id><snippet>from serial import serial</snippet></ROW><ROW><id>11404208</id><snippet>/usr/lib/python2.5/site-packages/sitecustomize.py</snippet></ROW><ROW><id>11404354</id><snippet>city = "Houston"
coordinates = {"Houston": (26.35, 57.12),
          "Las Vegas": (27.34, 35.23),
          etc...}
coords = coordinates[city]
</snippet></ROW><ROW><id>11404385</id><snippet>&gt;&gt;&gt; seq_l = [
...  [1,1,1,1,1,1],
...  [4,1,4,1,4,1],
...  [1,2,10,1,2,10],
...  [1,1,1,1,1,4,1,4,1,20,9,8,1,1,1,1,1,4,1,4,1,20,9,8],
...  [2,2,2,4,2,2,2,4,2,2,2,4,2,2,2,4],
...  [1,1,1,13,21,45,3,3,1,16,4,1,4,1,1,1,24,15,1,1,1,13,21,45,3,3,1,16,4,1,4,1,1,1,24,15],
...  [1,1,1,3,28,1,1,1,3,28,67,25,1,1,1,3,28,1,1,1,3,28,67,25]
... ]
&gt;&gt;&gt; 
&gt;&gt;&gt; def rep_len(seq):
...     s_len = len(seq)
...     for i in range(1,s_len-1):
...         if s_len%i == 0:
...             j = s_len/i
...             if seq == j*seq[:i]:
...                 return i
...                 
... 
&gt;&gt;&gt; [rep_len(seq) for seq in seq_l]
[1, 2, 3, 12, 4, 18, 12]
</snippet></ROW><ROW><id>11404577</id><snippet>my_MIDIParentFrame.SetBackgroundColour("black") ?
</snippet></ROW><ROW><id>11404577</id><snippet>wx.Frame.SetBackgroundColour(my_MIDI_PARENT_FRAME,"black")
</snippet></ROW><ROW><id>11404945</id><snippet>from time import sleep
# Assume proc is the Popen object
wait_time = 1 # 1 second, same delay as `tail -f`
while True: # Or whatever condition you need
    line = proc.stdout.readline()
    if line != '' and line != '\n':
        parse_line_do_stuff()

    sleep(wait_time)
</snippet></ROW><ROW><id>11404958</id><snippet>s = raw_input("Please enter your numbers: ")

mynums = [int(i) for i in s.split()]
# OR
mynums = map(int, s.split())
</snippet></ROW><ROW><id>11405092</id><snippet>import datetime
import os
dt=os.path.getmtime('/home/me/.bashrc')
print (datetime.datetime.fromtimestamp(dt))
print (datetime.datetime.utcfromtimestamp(dt))
</snippet></ROW><ROW><id>11405136</id><snippet>process = __import__('gateway_interface.'+gateway_file,fromlist=['foo']).process
</snippet></ROW><ROW><id>11405136</id><snippet>__import__</snippet></ROW><ROW><id>11405136</id><snippet>import importlib
process = importlib.import_module('gateway_interface.'+gateway_file).process
</snippet></ROW><ROW><id>11405136</id><snippet>from pkg_resources import iter_entry_points</snippet></ROW><ROW><id>11405136</id><snippet>__import__</snippet></ROW><ROW><id>11405397</id><snippet>getlist</snippet></ROW><ROW><id>11405397</id><snippet>request.GET</snippet></ROW><ROW><id>11405397</id><snippet>sum(map(float, request.GET.getlist('weightinputboxes')))</snippet></ROW><ROW><id>11405597</id><snippet>time.sleep</snippet></ROW><ROW><id>11405597</id><snippet>spider.main</snippet></ROW><ROW><id>11405597</id><snippet>app.run</snippet></ROW><ROW><id>11405597</id><snippet>spider.main</snippet></ROW><ROW><id>11405597</id><snippet>spider</snippet></ROW><ROW><id>11405597</id><snippet>def main():
    # Start the scheduler
    filename = os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..', 'tmp')) + '\\' + 'spider.log'
    logging.basicConfig(filename=filename, level=logging.DEBUG,format='%(levelname)s[%(asctime)s]: %(message)s')
    sched = Scheduler()
    sched.start()
    sched.add_interval_job(run_job, minutes=30)
</snippet></ROW><ROW><id>11405647</id><snippet>class CameraDisplay(QtGui.QLabel):
  def __init__(self):
    super(CameraDisplay, self).__init__()

  def updateFrame(self, image):
    self.setPixmap(QtGui.QPixmap.fromImage(image))

class ControlCenter(QtGui.QWidget):
  up_camera_signal = QtCore.Signal(QtGui.QImage)
  up_camera = None

  def __init__(self):
    super(ControlCenter, self).__init__()
    self.up_camera = CameraDisplay()
    self.up_camera_signal.connect(self.up_camera.updateFrame)

    grid = QtGui.QGridLayout()
    grid.setSpacing(10)

    grid.addWidget(self.up_camera, 0, 0)

    self.setLayout(grid)

    self.setGeometry(300, 300, 350, 300)
    self.setWindowTitle('Control Center')
    self.show()

  def up_camera_callback(self, data):
    '''This function gets called by an external thread'''
    try:
      image = QtGui.QImage(data.data, data.width, data.height, QtGui.QImage.Format_RGB888)
      self.up_camera_signal.emit(image)

    except Exception, e:
      print(e)

if __name__ == "__main__":
  app = QtGui.QApplication(sys.argv)
  ex = ControlCenter()
  sys.exit(app.exec_())
</snippet></ROW><ROW><id>11405888</id><snippet>[andre@hp ~]$ time python snippet.py
what you wanna get
test.txt
... results removed ...

real        9m39.083s
user        0m30.368s
sys         0m22.664s
[andre@hp ~]$
</snippet></ROW><ROW><id>11405896</id><snippet>import re

s = r'lololol \r asdfasdf r\ gfhfgr'
pattern = re.compile('\\\\r (.*?) r\\\\')

print pattern.findall(s)
</snippet></ROW><ROW><id>11405896</id><snippet>['asdfasdf']</snippet></ROW><ROW><id>11405896</id><snippet>pattern = re.compile('\\\\r(.*?)r\\\\')
</snippet></ROW><ROW><id>11405896</id><snippet>[' asdfasdf ']</snippet></ROW><ROW><id>11405896</id><snippet>\n</snippet></ROW><ROW><id>11405896</id><snippet>\\</snippet></ROW><ROW><id>11405896</id><snippet>print('\\')</snippet></ROW><ROW><id>11405896</id><snippet>'\\\\'</snippet></ROW><ROW><id>11405896</id><snippet>\\</snippet></ROW><ROW><id>11405896</id><snippet>\</snippet></ROW><ROW><id>11405896</id><snippet>'\m'</snippet></ROW><ROW><id>11405896</id><snippet>\m</snippet></ROW><ROW><id>11405896</id><snippet>print('\m')</snippet></ROW><ROW><id>11405896</id><snippet>print('\'')</snippet></ROW><ROW><id>11405896</id><snippet>'</snippet></ROW><ROW><id>11405896</id><snippet>r'abc'</snippet></ROW><ROW><id>11405896</id><snippet>pattern = re.compile(r'\\r(.*?)r\\')
</snippet></ROW><ROW><id>11406019</id><snippet>urllib.urlencode()</snippet></ROW><ROW><id>11406019</id><snippet>#-*- encoding: UTF-8 -*-
import urllib

pastebin_vars = {'api_dev_key':'57fe1369d02477a235057557cbeabaa1','api_option':'paste','api_paste_code':'testing pastebin right now'}
response = urllib.urlopen('http://pastebin.com/api/api_post.php', urllib.urlencode(pastebin_vars))
url = response.read()

&gt;&gt;&gt; print url
http://pastebin.com/4wfzATQR
</snippet></ROW><ROW><id>11406041</id><snippet>from HTMLParser import HTMLParser
parser = HTMLParser()
html_decoded_string = parser.unescape(html_encoded_string)
</snippet></ROW><ROW><id>11406041</id><snippet>from BeautifulSoup import BeautifulSoup
html_decoded_string = BeautifulSoup(html_encoded_string, convertEntities=BeautifulSoup.HTML_ENTITIES)
</snippet></ROW><ROW><id>11406100</id><snippet>&lt;form method="POST" action="http://ryushare.com/" name="FL"&gt;
</snippet></ROW><ROW><id>11406100</id><snippet>opener.open('http://ryushare.com/", login_data)
# Now you can interact with site
</snippet></ROW><ROW><id>11406100</id><snippet>&lt;input type="submit" /&gt;</snippet></ROW><ROW><id>11406100</id><snippet>&lt;form name="input" action="html_form_action.asp" method="get"&gt;
Username: &lt;input type="text" name="user" /&gt; &lt;input type="submit"
value="Submit" /&gt; &lt;/form&gt;
</snippet></ROW><ROW><id>11406670</id><snippet>&gt;&gt;&gt; rt = [1,2,3]
&gt;&gt;&gt; dp = [1,2]
</snippet></ROW><ROW><id>11406670</id><snippet>&gt;&gt;&gt; set(rt) - set(dp)
set([3])
</snippet></ROW><ROW><id>11406670</id><snippet>&gt;&gt;&gt; [x for x in rt if x not in dp]
&gt;&gt;&gt; [3]
</snippet></ROW><ROW><id>11406670</id><snippet>&gt;&gt;&gt; dp_set = set(dp)
&gt;&gt;&gt; [x for x in rt if x not in dp_set]
&gt;&gt;&gt; [3]
</snippet></ROW><ROW><id>11406782</id><snippet>parent_h = browser.current_window_handle
# click on the link that opens a new window
handles = browser.window_handles # before the pop-up window closes
handles.remove(parent_h)
browser.switch_to_window(handles.pop())
# do stuff in the popup
# popup window closes
browser.switch_to_window(parent_h)
# and you're back
</snippet></ROW><ROW><id>11406918</id><snippet>re</snippet></ROW><ROW><id>11406918</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; testinput = '#define ATTR_A          (HELLO +1L)     /*FSDSDF*/'
&gt;&gt;&gt; r = re.split(r'#define (\w*)(\s*)(\(.*\))', testinput)
&gt;&gt;&gt; print '%s = %s' %(r[1], r[3])
ATTR_A = (HELLO +1L)
</snippet></ROW><ROW><id>11406918</id><snippet>(\w*)</snippet></ROW><ROW><id>11406918</id><snippet>(\s*)</snippet></ROW><ROW><id>11406918</id><snippet>(\(.*\))</snippet></ROW><ROW><id>11406918</id><snippet>\(</snippet></ROW><ROW><id>11406918</id><snippet>(</snippet></ROW><ROW><id>11406918</id><snippet>\)</snippet></ROW><ROW><id>11406918</id><snippet>)</snippet></ROW><ROW><id>11406918</id><snippet>.*</snippet></ROW><ROW><id>11406918</id><snippet>split</snippet></ROW><ROW><id>11406918</id><snippet>r= ['', 'ATTR_A', '          ', '(HELLO +1L)', '     /*FSDSDF*/']</snippet></ROW><ROW><id>11407511</id><snippet>mainfolder/
    subfolder1/
        script.py
    subfolder2/
        1.bmp
</snippet></ROW><ROW><id>11407511</id><snippet>script.py</snippet></ROW><ROW><id>11407511</id><snippet>import os
scriptDir = os.path.dirname(__file__)
impath = os.path.join(scriptDir, '../subfolder2/1.bmp')
</snippet></ROW><ROW><id>11407511</id><snippet>__file__</snippet></ROW><ROW><id>11408601</id><snippet>i</snippet></ROW><ROW><id>11408601</id><snippet>i</snippet></ROW><ROW><id>11408601</id><snippet>i</snippet></ROW><ROW><id>11408601</id><snippet># avoid closures and use default args which copy on function definition
for i in xrange(3):
    def func(x, i=i):
        return x*i
    flist.append(func)

# or introduce an extra scope to close the value you want to keep around:
for i in xrange(3):
    def makefunc(i):
        def func(x):
            return x*i
        return func
    flist.append(makefunc(i))

# the second can be simplified to use a single makefunc():
def makefunc(i):
    def func(x):
        return x*i
    return func
for i in xrange(3):
    flist.append(makefunc(i))

# if your inner function is simple enough, lambda works as well for either option:
for i in xrange(3):
    flist.append(lambda x, i=i: x*i)

def makefunc(i):
    return lambda x: x*i
for i in xrange(3):
    flist.append(makefunc(i))
</snippet></ROW><ROW><id>11408658</id><snippet>#define FOO 1
#define my_macro_fun(args) my_fun(args,FOO)

void my_fun(int a, int b);
</snippet></ROW><ROW><id>11408658</id><snippet>%module test
%{
#include "test.h"
%}

%include "test.h"
</snippet></ROW><ROW><id>11408658</id><snippet>my_macro_fun</snippet></ROW><ROW><id>11408658</id><snippet>%module test
%{
#include "test.h"
%}

// Lie! Tell SWIG that it should be wrapped like any other function.
void my_macro_fun(int);

// This is entirely optional: it will cause my_fun to be wrapped as well
%include "test.h"
</snippet></ROW><ROW><id>11408658</id><snippet>my_macro_fun(int)</snippet></ROW><ROW><id>11408658</id><snippet>%include</snippet></ROW><ROW><id>11408658</id><snippet>%include</snippet></ROW><ROW><id>11408658</id><snippet>%ignore</snippet></ROW><ROW><id>11408658</id><snippet>my_fun</snippet></ROW><ROW><id>11408658</id><snippet>%module test
%{
#include "test.h"
%}

%typemap(default) int b {
  $1 = FOO;
}

%include "test.h"
</snippet></ROW><ROW><id>11409065</id><snippet>import calendar
import datetime
import pytz

d = datetime.datetime.now(pytz.timezone('America/Los_Angeles'))
# d == datetime.datetime(2012, 7, 10, 1, 6, 36, 37542, tzinfo=&lt;DstTzInfo 'America/Los_Angeles' PDT-1 day, 17:00:00 DST&gt;)

ts = calendar.timegm(d.utctimetuple())
# ts == 1341907596

# test with UTC epoch:

d = datetime.datetime(1969, 12, 31, 16, 0, 0, 0, pytz.timezone('America/Los_Angeles'))
# d == datetime.datetime(1969, 12, 31, 16, 0, tzinfo=&lt;DstTzInfo 'America/Los_Angeles' PST-1 day, 16:00:00 STD&gt;)

ts = calendar.timegm(d.utctimetuple())
# ts == 0
</snippet></ROW><ROW><id>11409169</id><snippet>import urllib2
import base64

# make a string with the request type in it:
method = "POST"
# create a handler. you can specify different handlers here (file uploads etc)
# but we go for the default
handler = urllib2.HTTPSHandler()
# create an openerdirector instance
opener = urllib2.build_opener(handler)
# build a request
url = 'https://localhost/api/sessions'
request = urllib2.Request(url)
# add any other information you want
base64string = base64.encodestring('%s:%s' % ('abc@MyOrg', 'abc123'))[:-1]
authheader =  "Basic %s" % base64string
request.add_header("Authorization", authheader)
request.add_header("Accept",'application/*+xml;version=1.5')

# overload the get method function with a small anonymous function...
request.get_method = lambda: method
# try it; don't forget to catch the result
try:
    connection = opener.open(request)
except urllib2.HTTPError,e:
    connection = e

# check. Substitute with appropriate HTTP code.
if connection.code == 200:
    data = connection.read()
    print "Data :", data
else:
    print "ERRROR", connection.code
</snippet></ROW><ROW><id>11409368</id><snippet>gtk.TreeView.get_selection</snippet></ROW><ROW><id>11409368</id><snippet>gtk.TreeSelection</snippet></ROW><ROW><id>11409368</id><snippet>gtk.TreeSelection.get_selected</snippet></ROW><ROW><id>11409368</id><snippet>gtk.TreeModel</snippet></ROW><ROW><id>11409368</id><snippet>gtk.TreeView.get_model</snippet></ROW><ROW><id>11409368</id><snippet>gtk.TreeModel.get_value</snippet></ROW><ROW><id>11409388</id><snippet>with</snippet></ROW><ROW><id>11409388</id><snippet>gc</snippet></ROW><ROW><id>11409391</id><snippet>from pylab import *

t = arange(0.0, 2.0, 0.01)
s = sin(2*pi*t)
p1, = plot(t, s, linewidth=1.0, label="Graph1")
grid(True)
s = sin(4*pi*t)
p2, = plot(t, s, color='r',linewidth=1.0, label="Graph2")

l1 = legend([p1], ["Graph1"], loc=1)
l2 = legend([p2], ["Graph2"], loc=4)
gca().add_artist(l1)

show() 
</snippet></ROW><ROW><id>11409423</id><snippet>&lt;html&gt;
  &lt;head&gt;
    &lt;title tal:content="here/Title"&gt;&lt;/title&gt;
    &lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8" /&gt;
    &lt;script type="text/javascript"&gt;
    document.onkeydown = function(e) {
      if (e.ctrlKey &amp;&amp; e.keyCode === 65) {
          return false;
      }
      if (e.ctrlKey &amp;&amp; e.keyCode === 67) {
         return false;
      }
      if (e.ctrlKey &amp;&amp; e.keyCode === 86) {
         return false;
      }

    return true;
}
   document.oncontextmenu = function(){
        return false;
    }

  &lt;/script&gt;
  &lt;/head&gt;
  &lt;body tal:content="structure view/getPreview" &gt;

&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>11409449</id><snippet>driver.find_element_by_xpath("//li/label/input[contains(..,'polishpottery')]")
</snippet></ROW><ROW><id>11409647</id><snippet>print '7\xe6\x9c\x8810\xe6\x97\xa5'.decode('utf-8')
</snippet></ROW><ROW><id>11409743</id><snippet>config['tg.app_globals']</snippet></ROW><ROW><id>11409743</id><snippet>config['pylons.app_globals']</snippet></ROW><ROW><id>11409795</id><snippet>my_str = "foofoofoofoo"
pattern = "foo"
result = re.findall(pattern, my_str)
</snippet></ROW><ROW><id>11409795</id><snippet>['foo', 'foo', 'foo', 'foo']</snippet></ROW><ROW><id>11410061</id><snippet>show()</snippet></ROW><ROW><id>11410061</id><snippet>savefig("foo.ps")</snippet></ROW><ROW><id>11410061</id><snippet>savefig("foo")</snippet></ROW><ROW><id>11410618</id><snippet>import matplotlib
matplotlib.use("AGG")
import pyplot
# continue as usual
</snippet></ROW><ROW><id>11410874</id><snippet>site</snippet></ROW><ROW><id>11410874</id><snippet>http://hg.python.org/cpython/file/*major*.*minor*/Lib/site.py</snippet></ROW><ROW><id>11410874</id><snippet>raw</snippet></ROW><ROW><id>11410935</id><snippet>None</snippet></ROW><ROW><id>11410935</id><snippet>None</snippet></ROW><ROW><id>11410935</id><snippet>''</snippet></ROW><ROW><id>11410935</id><snippet>import copy

def scrub(x):
    ret = copy.deepcopy(x)
    # Handle dictionaries. Scrub all values
    if isinstance(x, dict):
        for k,v in ret.items():
            ret[k] = scrub(v)
    # Handle None
    if x == None:
        ret = ''
    # Finished scrubbing
    return ret
</snippet></ROW><ROW><id>11411162</id><snippet>from scrapy.mail import MailSender

mailer = MailSender()
mailer.send(to=["someone@example.com"], subject="Some subject", body="Some body", cc=["another@example.com"])
</snippet></ROW><ROW><id>11411162</id><snippet>def send_mail(self, message, title):
    print "Sending mail..........."
    import smtplib
    from email.MIMEMultipart import MIMEMultipart
    from email.MIMEText import MIMEText
    gmailUser = 'mail_you_send_from@gmail.com'
    gmailPassword = 'password'
    recipient = 'mail_to_send_to'

    msg = MIMEMultipart()
    msg['From'] = gmailUser
    msg['To'] = recipient
    msg['Subject'] = title
    msg.attach(MIMEText(message))

    mailServer = smtplib.SMTP('smtp.gmail.com', 587)
    mailServer.ehlo()
    mailServer.starttls()
    mailServer.ehlo()
    mailServer.login(gmailUser, gmailPassword)
    mailServer.sendmail(gmailUser, recipient, msg.as_string())
    mailServer.close()
    print "Mail sent"
</snippet></ROW><ROW><id>11411162</id><snippet>send_mail("some message", "Scraper Report")
</snippet></ROW><ROW><id>11412020</id><snippet>"pay_forms/"|add:pay_gw.name|add:".html"
</snippet></ROW><ROW><id>11412198</id><snippet>frontLinks</snippet></ROW><ROW><id>11412198</id><snippet>frontLinks.extend(getCurlink)
</snippet></ROW><ROW><id>11412513</id><snippet>input([prompt]) -&gt; value
Equivalent to eval(raw_input(prompt)).
</snippet></ROW><ROW><id>11412513</id><snippet>eval</snippet></ROW><ROW><id>11412513</id><snippet>In [38]: l =  input("enter filename: ")
enter filename: dummy_file
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
C:\Python27\&lt;ipython-input-37-b74d50e2a058&gt; in &lt;module&gt;()
----&gt; 1 l =  input("enter filename: ")

C:\Python27\&lt;string&gt; in &lt;module&gt;()

NameError: name 'dummy_file' is not defined


In [39]: input /?
Type:       builtin_function_or_method
Base Class: &lt;type 'builtin_function_or_method'&gt;
String Form:&lt;built-in function input&gt;
Namespace:  Python builtin
Docstring:
input([prompt]) -&gt; value

Equivalent to eval(raw_input(prompt)).

In [40]: file = raw_input("filename: ")
filename: dummy_file

In [41]: file
Out[41]: 'dummy_file'
</snippet></ROW><ROW><id>11412513</id><snippet>raw_input</snippet></ROW><ROW><id>11412967</id><snippet>for loop</snippet></ROW><ROW><id>11412967</id><snippet>dictionary</snippet></ROW><ROW><id>11412967</id><snippet>import glob
import datetime

dic={}

for f in glob.glob('*-*.txt'):
    d = datetime.datetime.strptime(f, '%Y%m%d-%H%M%S.txt')
    if d.hour &lt; 2:
        continue
    if not d.day in dic or dic[d.day][0] &gt; d.time:
        dic[d.day] = (d.time, f)

for t, f in dic.values():
    print f
</snippet></ROW><ROW><id>11412967</id><snippet>20120706-015923.txt
20120706-015934.txt 
20120706-020008.txt
20120706-020030.txt
20120707-015934.txt
20120707-020005.txt
20120707-020015.txt
</snippet></ROW><ROW><id>11412967</id><snippet>20120706-020008.txt
20120707-020005.txt
</snippet></ROW><ROW><id>11413275</id><snippet>&lt;code&gt;</snippet></ROW><ROW><id>11413316</id><snippet>func</snippet></ROW><ROW><id>11413316</id><snippet>compress()</snippet></ROW><ROW><id>11413316</id><snippet>from sqlalchemy.orm import column_property

class Demo(...):
    data_uncompressed = column_property(func.uncompress(data))
</snippet></ROW><ROW><id>11413316</id><snippet>SELECT ..., UNCOMPRESS(demotable.data), ... FROM demotable</snippet></ROW><ROW><id>11413586</id><snippet>curl --dump-header - -H "Content-Type: application/json" -X POST --data '{"body": "This will prbbly be my lst post.", "pub_date": "2011-05-22T00:46:38", "slug": "another-post", "title": "Another Post", "user": "/api/v1/user/1/"}' http://localhost:8000/api/v1/entry/
</snippet></ROW><ROW><id>11413586</id><snippet>curl --dump-header - -H "Content-Type: application/json" -X POST --data "{\"body\": \"This will prbbly be my lst post.\", \"pub_date\": \"2011-05-22T00:46:38\", \"slug\": \"another-post\", \"title\": \"Another Post\", \"user\": \"/api/v1/user/1/\"}" http://localhost:8000/api/v1/entry/
</snippet></ROW><ROW><id>11413603</id><snippet>TreeItemId</snippet></ROW><ROW><id>11413603</id><snippet>GetID</snippet></ROW><ROW><id>11413603</id><snippet>item= self.tree.GetSelection()
self.tree.SetPyData(item,{"Source":"C:\hi.png","Opacity":1})
print self.tree.GetPyData(item)
</snippet></ROW><ROW><id>11413694</id><snippet>for i in xrange(self.number_boxes):

    self.box[i].grid_remove()
    self.choice_title.grid_remove()
</snippet></ROW><ROW><id>11413694</id><snippet>self.number_boxes</snippet></ROW><ROW><id>11413694</id><snippet>for box in self.boxes:
    box.grid_remove()
else:
    self.choice_title.grid_remove()
</snippet></ROW><ROW><id>11413798</id><snippet>def DrawGLScene():
    global frame, testvar, my_texture1,my_texture2
    glEnable(GL_TEXTURE_2D)
    glBindTexture(GL_TEXTURE_2D, 0)
    [...]
</snippet></ROW><ROW><id>11413798</id><snippet>my_texture1</snippet></ROW><ROW><id>11413798</id><snippet>my_texture2</snippet></ROW><ROW><id>11413798</id><snippet>glBindTexture(GL_TEXTURE_2D, 0)</snippet></ROW><ROW><id>11413798</id><snippet>def DrawGLScene():
    global frame, testvar, my_texture1,my_texture2
    glActiveTexture(GL_TEXTURE1)
    glBindTexture(GL_TEXTURE_2D, my_texture1) 
    glActiveTexture(GL_TEXTURE2)
    glBindTexture(GL_TEXTURE_2D, my_texture2)
    [...]
</snippet></ROW><ROW><id>11413798</id><snippet>global frame, testvar, my_texture1,my_texture2</snippet></ROW><ROW><id>11413832</id><snippet>example_string = "Test"
example_list = list(example_string)
</snippet></ROW><ROW><id>11413832</id><snippet>example_list = ["T","e","s","t"]
</snippet></ROW><ROW><id>11413832</id><snippet>tuple()</snippet></ROW><ROW><id>11413832</id><snippet>list()</snippet></ROW><ROW><id>11413881</id><snippet>import ldap

# connect to your ldap server

some_dn = '...' # Your base dn
some_lookup = '...' # your lookup attr

result = conn.search_s(some_dn,ldap.SCOPE_SUBTREE,some_lookup)
result[0][1].keys()
</snippet></ROW><ROW><id>11413881</id><snippet>['mailNickname',
 'publicDelegatesBL',
 'logonCount',
 'cn',
 'countryCode',
 'dSCorePropagationData',
 'objectClass',
 # ... many many more
'telephoneNumber',
'physicalDeliveryOfficeName',
'name',
'memberOf',
'codePage',
'userAccountControl',
'msExchMDBRulesQuota',
'lastLogon',
'protocolSettings',
'uSNChanged',
'sn',
'msExchVersion',
'mDBUseDefaults',
'givenName',
'msExchMailboxGuid',
'lastLogoff']
</snippet></ROW><ROW><id>11413905</id><snippet>ssh</snippet></ROW><ROW><id>11413905</id><snippet>fabric</snippet></ROW><ROW><id>11413905</id><snippet>foo_worker</snippet></ROW><ROW><id>11413905</id><snippet>$ fab all_hosts start:foo_worker
</snippet></ROW><ROW><id>11413905</id><snippet>bar_worker</snippet></ROW><ROW><id>11413905</id><snippet>$ fab -H host1,host2 stop:bar_worker
</snippet></ROW><ROW><id>11413905</id><snippet>fabfile.py</snippet></ROW><ROW><id>11413905</id><snippet>from fabric.api import env, run, hide # pip install fabric

def all_hosts():
    env.hosts = ['host1', 'host2', 'host3']

def start(daemon):
    run("twistd --pid %s.pid %s" % (daemon, daemon))

def stop(daemon):
    run("kill %s" % getpid(daemon))

def getpid(daemon):
    with hide('stdout'):
        return run("cat %s.pid" % daemon)

def ps(daemon):
    """Get process info for the `daemon`."""
    run("ps --pid %s" % getpid(daemon))
</snippet></ROW><ROW><id>11413905</id><snippet>service daemon_name start/stop/restart</snippet></ROW><ROW><id>11413905</id><snippet>supervisord</snippet></ROW><ROW><id>11413905</id><snippet>supervisorctl</snippet></ROW><ROW><id>11413905</id><snippet>supervisorctl stop all</snippet></ROW><ROW><id>11413905</id><snippet>puppet</snippet></ROW><ROW><id>11414185</id><snippet>pack</snippet></ROW><ROW><id>11414185</id><snippet>pack_propagate</snippet></ROW><ROW><id>11414185</id><snippet>grid_propagate</snippet></ROW><ROW><id>11414185</id><snippet>False</snippet></ROW><ROW><id>11414185</id><snippet>page1.pack_propagate(False)
</snippet></ROW><ROW><id>11414222</id><snippet>VAR1</snippet></ROW><ROW><id>11414222</id><snippet>VAR1::VALUE_X</snippet></ROW><ROW><id>11414222</id><snippet>string = re.sub(r'VAR\d(?!\:\:)', lambda m: var_dict[m.group(0)], string)
</snippet></ROW><ROW><id>11414283</id><snippet>import numpy as np
from scipy.spatial import distance

A = np.array([[1,23,2,5,6,2,2,6,2],[12,4,5,5],[1,2,4],[1],[2],[2]], dtype=object )
B = np.array([[1,23,2,5,6,2,2,6,2],[12,4,5,5],[1,2,4],[1],[2],[2]], dtype=object )

Aflat = np.hstack( A )
Bflat = np.hstack( B )

dist = distance.cosine( Aflat, Bflat )
</snippet></ROW><ROW><id>11414283</id><snippet>dist = 1.10e-16</snippet></ROW><ROW><id>11414283</id><snippet>dtype=object</snippet></ROW><ROW><id>11414283</id><snippet>hstack()</snippet></ROW><ROW><id>11414283</id><snippet>flatten()</snippet></ROW><ROW><id>11414311</id><snippet>groupby</snippet></ROW><ROW><id>11414311</id><snippet>def by_4h(d):
    dt = datetime.datetime.strptime(d["Date[G]"]+"-"+d["Time[G]"], "%d-%b-%Y-%H:%M:%S.%f")
    return (dt.year, dt.month, dt.day, dt.hour // 4)
</snippet></ROW><ROW><id>11414311</id><snippet>hour // 4</snippet></ROW><ROW><id>11414311</id><snippet>def by_30m(d):
    dt = datetime.datetime.strptime(d["Date[G]"]+"-"+d["Time[G]"], "%d-%b-%Y-%H:%M:%S.%f")
    return (dt.year, dt.month, dt.day, dt.hour, dt.minute // 30)
</snippet></ROW><ROW><id>11414311</id><snippet>//</snippet></ROW><ROW><id>11414425</id><snippet>datetime.datetime</snippet></ROW><ROW><id>11414425</id><snippet>from datetime import datetime

cursor.execute('INSERT INTO "TEST" (COL1) values(?)',
    datetime(2011, 9, 13, 10, 47, 54, 795658))
</snippet></ROW><ROW><id>11414827</id><snippet>df.ix[:-1]
</snippet></ROW><ROW><id>11414864</id><snippet>gettext</snippet></ROW><ROW><id>11414920</id><snippet>train_maxent_classifier_with_gis</snippet></ROW><ROW><id>11414920</id><snippet>train_maxent_classifier_with_iis</snippet></ROW><ROW><id>11415006</id><snippet>guess</snippet></ROW><ROW><id>11415006</id><snippet>guess(a, b)
</snippet></ROW><ROW><id>11415006</id><snippet>guess</snippet></ROW><ROW><id>11415006</id><snippet>def guess(a, b):
    # your code here
</snippet></ROW><ROW><id>11415006</id><snippet>a</snippet></ROW><ROW><id>11415006</id><snippet>b</snippet></ROW><ROW><id>11415006</id><snippet>guess</snippet></ROW><ROW><id>11415006</id><snippet>a</snippet></ROW><ROW><id>11415006</id><snippet>b</snippet></ROW><ROW><id>11415006</id><snippet>guess</snippet></ROW><ROW><id>11415006</id><snippet>import random

def guess(a):
    b = raw_input("Guess a number between 1 and 2000 ")
    if a == b:
        print "Correct!"
    else:
        print "Wrong! "
        n = raw_input("Press 0 to quit or 1 to try again.")
        if n == "0":
            print ""
        if n == "1":
            guess(a)

a = random.randint(1, 2000)
guess(a)
</snippet></ROW><ROW><id>11415006</id><snippet>guess</snippet></ROW><ROW><id>11415006</id><snippet>b</snippet></ROW><ROW><id>11415006</id><snippet>guess</snippet></ROW><ROW><id>11415006</id><snippet>if n == "0":</snippet></ROW><ROW><id>11415006</id><snippet>if n == 0:</snippet></ROW><ROW><id>11415006</id><snippet>n</snippet></ROW><ROW><id>11415006</id><snippet>1</snippet></ROW><ROW><id>11415006</id><snippet>guess</snippet></ROW><ROW><id>11415006</id><snippet>a</snippet></ROW><ROW><id>11415140</id><snippet>except</snippet></ROW><ROW><id>11415140</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>11415140</id><snippet>traceback</snippet></ROW><ROW><id>11415140</id><snippet>&gt;&gt;&gt; import sys, traceback
&gt;&gt;&gt; def raise_exception():
...     try:
...         raise Exception
...     except Exception:
...         ex_type, ex, tb = sys.exc_info()
...         traceback.print_tb(tb)
...     finally:
...         del tb
... 
&gt;&gt;&gt; raise_exception()
  File "&lt;stdin&gt;", line 3, in raise_exception
</snippet></ROW><ROW><id>11415140</id><snippet>try/except</snippet></ROW><ROW><id>11415140</id><snippet>&gt;&gt;&gt; def view_traceback():
...     ex_type, ex, tb = sys.exc_info()
...     traceback.print_tb(tb)
...     del tb
... 
&gt;&gt;&gt; try:
...     raise Exception
... except Exception:
...     view_traceback()
... 
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
</snippet></ROW><ROW><id>11415140</id><snippet>sys.exc_info</snippet></ROW><ROW><id>11415140</id><snippet>sys.exc_info</snippet></ROW><ROW><id>11415140</id><snippet>(None, None, None)</snippet></ROW><ROW><id>11415140</id><snippet>sys</snippet></ROW><ROW><id>11415140</id><snippet>sys.exc_traceback</snippet></ROW><ROW><id>11415140</id><snippet>sys.last_traceback</snippet></ROW><ROW><id>11415140</id><snippet>inspect</snippet></ROW><ROW><id>11415140</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>11415721</id><snippet>three</snippet></ROW><ROW><id>11415721</id><snippet>import Tkinter as tk

# data for the example
info = (
    ("1.1","1.2","1.3"),
    ("2.1","2.2","2,3"),
    ("3.1","3.2","3.3"),
)

class SampleApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.status = tk.Label(self, anchor="w")
        self.frame_table = tk.Frame(self, background="black")
        self.frame_table.grid_columnconfigure(1, weight=1)
        self.frame_table.grid_columnconfigure(2, weight=1)
        self.frame_table.grid_columnconfigure(3, weight=1)

        self.status.pack(side="bottom", fill="x")
        self.frame_table.pack(side="top", fill="x", padx=10, pady=10)

        for row_number, row_data in enumerate(info):
            no_1, code, value = row_data
            label = tk.Label(self.frame_table, text="row %d" % row_number, background="gray")
            col1  = tk.Label(self.frame_table, text=no_1)
            col2  = tk.Label(self.frame_table, text=code)
            col3  = tk.Label(self.frame_table, text=value)

            # N.B. 'value' is automatically passed to
            # the command by tkinter; we're adding
            # an extra parameter, 'row' 
            command=lambda value, row=row_number: self.ChoiceBox(value, row)
            stringvar = tk.StringVar(self.frame_table)
            stringvar.set("Fixed")
            option_menu = tk.OptionMenu(self.frame_table, stringvar, 
                                        "Fixed","List","Min","Max", 
                                        command=command)
            label.grid(row=row_number, column=0, sticky="nsew", padx=1, pady=1)
            col1.grid(row=row_number, column=1, sticky="nsew", padx=1, pady=1)
            col2.grid(row=row_number, column=2, sticky="nsew", padx=1, pady=1)
            col3.grid(row=row_number, column=3, sticky="nsew", padx=1, pady=1)
            option_menu.grid(row=row_number, column=6, sticky="nsew", 
                             padx=1, pady=1)

    def ChoiceBox(self, value, row_number):
        self.status.config(text="you set row %d to '%s'" % (row_number, value))

app = SampleApp()
app.mainloop()
</snippet></ROW><ROW><id>11415816</id><snippet>import argparse
import os
import tempfile
import shutil
import atexit

class readable_dir(argparse.Action):
    def __call__(self,parser, namespace, values, option_string=None):
        prospective_dir=values
        if not os.path.isdir(prospective_dir):
            raise argparse.ArgumentTypeError("readable_dir:{0} is not a valid path".format(prospective_dir))
        if os.access(prospective_dir, os.R_OK):
            setattr(namespace,self.dest,prospective_dir)
        else:
            raise argparse.ArgumentTypeError("readable_dir:{0} is not a readable dir".format(prospective_dir))

ldir = tempfile.mkdtemp()
atexit.register(lambda dir=ldir: shutil.rmtree(ldir))

parser = argparse.ArgumentParser(description='test', fromfile_prefix_chars="@")
parser.add_argument('-l', '--launch_directory', action=readable_dir, default=ldir)
args = parser.parse_args()
print (args)
</snippet></ROW><ROW><id>11415816</id><snippet>tempfile</snippet></ROW><ROW><id>11415816</id><snippet>tempfile</snippet></ROW><ROW><id>11415882</id><snippet>pandas.DataFrame(initialload, columns=list_of_column_names)
</snippet></ROW><ROW><id>11416625</id><snippet>In [16]: ''.join(str(i) for i in data)
Out[16]: '861310001020001200'
</snippet></ROW><ROW><id>11416625</id><snippet>chr()</snippet></ROW><ROW><id>11416625</id><snippet>str()</snippet></ROW><ROW><id>11416625</id><snippet>In [25]: ''.join(chr(i) for i in data)
Out[25]: 'V\r\x01\x00\x00\x00\x01\x00\x02\x00\x00\x00\x01\x02\x00\x00'
</snippet></ROW><ROW><id>11416629</id><snippet>def __unicode__(self):
    return "{} ({})".format(self.translation, self.word.lang.abbr)
</snippet></ROW><ROW><id>11416629</id><snippet>def __unicode__(self):
    return u"{} ({})".format(self.translation, self.word.lang.abbr)
</snippet></ROW><ROW><id>11416644</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>11416644</id><snippet>^</snippet></ROW><ROW><id>11416644</id><snippet>re.search(re.compile('^1', re.MULTILINE), f.read())
</snippet></ROW><ROW><id>11416644</id><snippet>1</snippet></ROW><ROW><id>11416644</id><snippet>has_1 = any(line == "1" for line in f)
</snippet></ROW><ROW><id>11416698</id><snippet>append</snippet></ROW><ROW><id>11416698</id><snippet>save</snippet></ROW><ROW><id>11416698</id><snippet>i.update(add_to_set__parents=i2)
i.update(add_to_set__parents=i3)
i.update(add_to_set__parents=i2)
</snippet></ROW><ROW><id>11416698</id><snippet>addToSet</snippet></ROW><ROW><id>11416698</id><snippet>each</snippet></ROW><ROW><id>11416813</id><snippet>codecs.open('filename', encoding='utf-16-le')</snippet></ROW><ROW><id>11416976</id><snippet>csv.reader</snippet></ROW><ROW><id>11416976</id><snippet>PyErr_BadArgument</snippet></ROW><ROW><id>11416976</id><snippet>PyErr_BadArgument</snippet></ROW><ROW><id>11417222</id><snippet>ax.xaxis.set_ticks_position</snippet></ROW><ROW><id>11417222</id><snippet>ax.yaxis.set_ticks_position</snippet></ROW><ROW><id>11417222</id><snippet>none</snippet></ROW><ROW><id>11417222</id><snippet>ax.spines[spine].set_color</snippet></ROW><ROW><id>11417222</id><snippet>none</snippet></ROW><ROW><id>11417222</id><snippet>linewidth</snippet></ROW><ROW><id>11417222</id><snippet>fontsize</snippet></ROW><ROW><id>11417222</id><snippet>pad</snippet></ROW><ROW><id>11417222</id><snippet>def customaxis(ax, c_left='k', c_bottom='k', c_right='none', c_top='none',
               lw=3, size=12, pad=8):

    for c_spine, spine in zip([c_left, c_bottom, c_right, c_top],
                              ['left', 'bottom', 'right', 'top']):
        if c_spine != 'none':
            ax.spines[spine].set_color(c_spine)
            ax.spines[spine].set_linewidth(lw)
        else:
            ax.spines[spine].set_color('none')
    if (c_bottom == 'none') &amp; (c_top == 'none'): # no bottom and no top
        ax.xaxis.set_ticks_position('none')
    elif (c_bottom != 'none') &amp; (c_top != 'none'): # bottom and top
        ax.tick_params(axis='x', direction='out', width=lw, length=7,
                      color=c_bottom, labelsize=size, pad=pad)
    elif (c_bottom != 'none') &amp; (c_top == 'none'): # bottom but not top
        ax.xaxis.set_ticks_position('bottom')
        ax.tick_params(axis='x', direction='out', width=lw, length=7,
                       color=c_bottom, labelsize=size, pad=pad)
    elif (c_bottom == 'none') &amp; (c_top != 'none'): # no bottom but top
        ax.xaxis.set_ticks_position('top')
        ax.tick_params(axis='x', direction='out', width=lw, length=7,
                       color=c_top, labelsize=size, pad=pad)
    if (c_left == 'none') &amp; (c_right == 'none'): # no left and no right
        ax.yaxis.set_ticks_position('none')
    elif (c_left != 'none') &amp; (c_right != 'none'): # left and right
        ax.tick_params(axis='y', direction='out', width=lw, length=7,
                       color=c_left, labelsize=size, pad=pad)
    elif (c_left != 'none') &amp; (c_right == 'none'): # left but not right
        ax.yaxis.set_ticks_position('left')
        ax.tick_params(axis='y', direction='out', width=lw, length=7,
                       color=c_left, labelsize=size, pad=pad)
    elif (c_left == 'none') &amp; (c_right != 'none'): # no left but right
        ax.yaxis.set_ticks_position('right')
        ax.tick_params(axis='y', direction='out', width=lw, length=7,
                       color=c_right, labelsize=size, pad=pad)
</snippet></ROW><ROW><id>11417222</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig, ([ax1, ax2], [ax3, ax4]) = plt.subplots(nrows=2, ncols=2)

for ax in [ax1, ax2, ax3, ax4]:
    ax.plot(np.random.randn(10), lw=2)

customaxis(ax1) #default: no right and top axis
customaxis(ax2, c_left='none', c_bottom='none', c_right='k', c_top='k')
customaxis(ax3, c_left='none', c_bottom='k', c_right='k', c_top='none')
customaxis(ax4, c_left='k', c_bottom='none', c_right='none', c_top='k')

plt.show()
</snippet></ROW><ROW><id>11417491</id><snippet>ViewDoesNotExist</snippet></ROW><ROW><id>11417491</id><snippet>ImportError</snippet></ROW><ROW><id>11417491</id><snippet>views.py</snippet></ROW><ROW><id>11417491</id><snippet>from EPM.forms import *</snippet></ROW><ROW><id>11417491</id><snippet>ImportError</snippet></ROW><ROW><id>11417491</id><snippet>ViewDoesNotExist</snippet></ROW><ROW><id>11417491</id><snippet>from EPM.views import *
</snippet></ROW><ROW><id>11417491</id><snippet>./manage.py shell</snippet></ROW><ROW><id>11417570</id><snippet>dict</snippet></ROW><ROW><id>11417570</id><snippet>globaldict = globals() # don't do this - it's just to reflect the question
globaldict.update({'a':1,'b':2,'c':3}) # loop eliminated
</snippet></ROW><ROW><id>11417570</id><snippet>global</snippet></ROW><ROW><id>11417570</id><snippet>a</snippet></ROW><ROW><id>11417570</id><snippet>locals()</snippet></ROW><ROW><id>11417570</id><snippet>dict</snippet></ROW><ROW><id>11417570</id><snippet>In [35]: def func(name,a=None,b=None,c=None):
   ....:         if (a is None) or (b is None) or (c is None):
   ....:                 for k,v in {'a':1,'b':2,'c':3}: # actually a dict return from another function
   ....:                         locals()[k] = v
   ....:                 print a
   ....:

In [36]: func('foo')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
C:\Users\Marcin\Documents\oneclickcos\lib\site-packages\django\core\management\commands\shell.pyc in &lt;module&gt;()
----&gt; 1 func('foo')

C:\Users\Marcin\Documents\oneclickcos\lib\site-packages\django\core\management\commands\shell.pyc in func(name, a, b, c)
      1 def func(name,a=None,b=None,c=None):
      2         if (a is None) or (b is None) or (c is None):
----&gt; 3                 for k,v in {'a':1,'b':2,'c':3}: # actually a dict return from another function
      4                         locals()[k] = v
      5                 print a

ValueError: need more than 1 value to unpack

In [37]:
</snippet></ROW><ROW><id>11417609</id><snippet>    ya = axes.get_yaxis()

    ya.set_major_locator(MaxNLocator(integer=True))
</snippet></ROW><ROW><id>11417814</id><snippet>0000000          20202020        20202020        30303237        20202020
0000020          20202020        30363320        4f4d2030        0000414c
0000036
</snippet></ROW><ROW><id>11417814</id><snippet>0000000          20 20 20 20 20 20 20 20 37 32 30 30 20 20 20 20
                  _  _  _  _  _  _  _  _  7  2  0  0  _  _  _  _
0000020          20 20 20 20 20 33 36 30 30 20 4d 4f 4c 41
                  _  _  _  _  _  3  6  0  0  _  M  O  L  A
</snippet></ROW><ROW><id>11417814</id><snippet>0034100          0e970e93        0ea50e9d        0ea50ea5        0ea50ea5
0034120          0ea50ea5        0ea40ea4        0ea20ea3        00000ea2
</snippet></ROW><ROW><id>11417814</id><snippet>int</snippet></ROW><ROW><id>11417814</id><snippet>7200 x 3600 x 4</snippet></ROW><ROW><id>11417814</id><snippet>od</snippet></ROW><ROW><id>11417814</id><snippet>0e970e93</snippet></ROW><ROW><id>11417814</id><snippet>0e97</snippet></ROW><ROW><id>11417814</id><snippet>0e93</snippet></ROW><ROW><id>11417814</id><snippet>short int: [-32768, 32767]</snippet></ROW><ROW><id>11417814</id><snippet>0034100          0e93  0e97  0e9d  0ea5  0ea5  0ea5  0ea5  0ea5
                +3731 +3735 +3741 +3749 +3749 +3749 +3749 +3749
0034120          0ea5  0ea5  0ea4  0ea4  0ea3  0ea2  0ea2
                +3749 +3749 +3748 +3748 +3747 +3746 +3746
</snippet></ROW><ROW><id>11417814</id><snippet>DATA(X,Y)</snippet></ROW><ROW><id>11417814</id><snippet>DATA(1,Y)</snippet></ROW><ROW><id>11417814</id><snippet>DATA(2,Y)</snippet></ROW><ROW><id>11417814</id><snippet>DATA(3,Y)</snippet></ROW><ROW><id>11417814</id><snippet>DATA(1,Y+1)</snippet></ROW><ROW><id>11417814</id><snippet>DATA(2,Y+1)</snippet></ROW><ROW><id>11417814</id><snippet>struct.unpack()</snippet></ROW><ROW><id>11417814</id><snippet>h</snippet></ROW><ROW><id>11417814</id><snippet>data = struct.unpack('%dh' % (7200*3600), f.read(7200*3600*2))
</snippet></ROW><ROW><id>11417926</id><snippet>from apiclient import errors
from apiclient.http import MediaFileUpload
# ...

def insert_file(service, title, description, parent_id, mime_type, filename):
  """Insert new file.

  Args:
    service: Drive API service instance.
    title: Title of the file to insert, including the extension.
    description: Description of the file to insert.
    parent_id: Parent folder's ID.
    mime_type: MIME type of the file to insert.
    filename: Filename of the file to insert.
  Returns:
    Inserted file metadata if successful, None otherwise.
  """
  media_body = MediaFileUpload(filename, mimetype=mime_type, resumable=True)
  body = {
    'title': title,
    'description': description,
    'mimeType': mime_type
  }
  # Set the parent folder.
  if parent_id:
    body['parents'] = [{'id': parent_id}]

  try:
    file = service.files().insert(
        body=body,
        media_body=media_body).execute()

    return file
  except errors.HttpError, error:
    print 'An error occured: %s' % error
    return None
</snippet></ROW><ROW><id>11418018</id><snippet>def last_feature(line):
    start = line.rfind(' ') + 1
    end = line.rfind(':')
    return int(line[start:end])

with open(...) as file1:
    largest = max(last_feature(line) for line in file1)
</snippet></ROW><ROW><id>11418040</id><snippet>»</snippet></ROW><ROW><id>11418040</id><snippet>»</snippet></ROW><ROW><id>11418098</id><snippet>q1 = session.\
     query(beard.person.label('person'),
           beard.beardID.label('beardID'),
           beard.beardStyle.label('beardStyle'),
           sqlalchemy.sql.null().label('moustachID'),
           sqlalchemy.sql.null().label('moustachStyle'),
     ).\
     filter(beard.person == 'bob')

q2 = session.\
     query(moustache.person.label('person'),
           sqlalchemy.sql.null().label('beardID'), 
           sqlalchemy.sql.null().label('beardStyle'),
           moustache.moustachID,
           moustache.moustachStyle,
     ).\
     filter(moustache.person == 'bob')

result = q1.union(q2).all()
</snippet></ROW><ROW><id>11418098</id><snippet>RIGHT OUTER JOIN</snippet></ROW><ROW><id>11418563</id><snippet>list1 = ['a', 'b', 'c', 'd', 'e']
list2 = [1, 2, 3, 4, 5]

zip(list1, list2)
</snippet></ROW><ROW><id>11418563</id><snippet>[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]
</snippet></ROW><ROW><id>11418563</id><snippet>for i,j in zip(list1, list2):
    print '%s%d' %(i,j)
</snippet></ROW><ROW><id>11418563</id><snippet>a1
b2
c3
d4
e5
</snippet></ROW><ROW><id>11418563</id><snippet>import itertools
list1 = ['a', 'b', 'c', 'd', 'e']
list2 = [1, 2, 3]

for i,j in itertools.izip_longest(list1, list2): 
    if i: sys.stdout.write('%s' %i)
    if j: sys.stdout.write('%d' %j)
    sys.stdout.write('\n')
</snippet></ROW><ROW><id>11418563</id><snippet>a1
b2
c3
d
e 
</snippet></ROW><ROW><id>11418563</id><snippet>print()</snippet></ROW><ROW><id>11418563</id><snippet>write()</snippet></ROW><ROW><id>11418620</id><snippet># "easier to get forgiveness than permission" approach
try:
    print(info.precision)
except AttributeError:
    pass

# "look before you leap" approach
if hasattr(info, "precision"):
    print(info.precision)
</snippet></ROW><ROW><id>11418620</id><snippet>in</snippet></ROW><ROW><id>11418620</id><snippet>in</snippet></ROW><ROW><id>11418620</id><snippet>dict</snippet></ROW><ROW><id>11418620</id><snippet>set</snippet></ROW><ROW><id>11418620</id><snippet>info</snippet></ROW><ROW><id>11418620</id><snippet># alternate "look before you leap"
if "precision" in info.__dict__:
    print(info.precision)
</snippet></ROW><ROW><id>11418620</id><snippet>dict</snippet></ROW><ROW><id>11418620</id><snippet>.__dict__</snippet></ROW><ROW><id>11418620</id><snippet>vars()</snippet></ROW><ROW><id>11418620</id><snippet>.__dict__</snippet></ROW><ROW><id>11418620</id><snippet># nicer alternate "look before you leap"
if "precision" in vars(info):
    print(info.precision)
</snippet></ROW><ROW><id>11418665</id><snippet>def sort_key(data):
    title, size, format, provider = data
    return p_dict[provider], f_dict[format], -size 

print sorted( mydata, key = sort_key)
</snippet></ROW><ROW><id>11418828</id><snippet>*.typelib</snippet></ROW><ROW><id>11418828</id><snippet>gi.repository</snippet></ROW><ROW><id>11419033</id><snippet>limit = 10
q1 = User.objects.filter(first__iexact=token).order_by('last')[:limit]
limit -= len(q1)
if limit:
    q2 = User.objects.exclude(pk__in=q1).filter(first__istartswith=token).order_by('last')[:limit]
else:
    q2 = []
users = list(q1) + list(q2)
</snippet></ROW><ROW><id>11419033</id><snippet>query = User.objects.filter(first__istartswith=token).order_by('last')
exacts = [user for user in query if user.first == token]
others = [user for user in query if user.first != token]
users = exacts + others
</snippet></ROW><ROW><id>11419038</id><snippet>import csv
import re

csv_data = list(csv.reader(open('/home/jon/tmp/data.csv'))) # (1)
csv_text = '\n' + '\n'.join('{0} : {1}'.format(*row) for row in csv_data) # (2)

with open('/home/jon/tmp/other.ldif') as f:
    contents = f.read() # (3)
    print re.sub(r'(\n\n)|(\n$)', csv_text + '\n\n', contents) # (4)
</snippet></ROW><ROW><id>11419038</id><snippet>dn: Aziz
cn: Aziz_09
KEY : VALUE
abc : def
foo : bar
qwop : flop

dn: Carl
cn: Carl_04
KEY : VALUE
abc : def
foo : bar
qwop : flop
</snippet></ROW><ROW><id>11419126</id><snippet>ls</snippet></ROW><ROW><id>11419126</id><snippet>~/Desktop/Austin/Tweets/</snippet></ROW><ROW><id>11419237</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub('[0-9.]*', '', 'Diablo Lord of Destruction 9.2')[:-1]
'Diablo Lord of Destruction'
&gt;&gt;&gt; re.sub('[\d.]*', '', 'Diablo Lord of Destruction 9.2')[:-1]
'Diablo Lord of Destruction'
</snippet></ROW><ROW><id>11419411</id><snippet>Counter.most_common()</snippet></ROW><ROW><id>11419411</id><snippet>&gt;&gt;&gt; counts = Counter({'foo': 10, 'baz': 5, 'biff': 3, 'bonk': 1})
&gt;&gt;&gt; for k, v in counts.most_common():
    print k, v
foo 10
baz 5
biff 3
bonk 1
</snippet></ROW><ROW><id>11419593</id><snippet>get(key, None)</snippet></ROW><ROW><id>11419593</id><snippet>locals()[key]</snippet></ROW><ROW><id>11419593</id><snippet>import math</snippet></ROW><ROW><id>11419593</id><snippet>from math import *</snippet></ROW><ROW><id>11419593</id><snippet>safe_dict = dict((k, getattr(math, k)) for k in safe_list)</snippet></ROW><ROW><id>11419671</id><snippet>CGIHTTPRequestHandler</snippet></ROW><ROW><id>11419671</id><snippet>os.chdir()</snippet></ROW><ROW><id>11419727</id><snippet>cwd</snippet></ROW><ROW><id>11419727</id><snippet>Popen</snippet></ROW><ROW><id>11419727</id><snippet>call</snippet></ROW><ROW><id>11419727</id><snippet>check_call</snippet></ROW><ROW><id>11419727</id><snippet>check_output</snippet></ROW><ROW><id>11419727</id><snippet>subprocess.check_output(["make", "run_pci"],
                        cwd="/home/ecorbett/hello_world_pthread")
</snippet></ROW><ROW><id>11419727</id><snippet>p = subprocess.Popen(["make", "run_pci"],
                     stdout=subprocess.PIPE,
                     cwd="/home/ecorbett/hello_world_pthread")
for ln in p.stdout:
    # do processing
</snippet></ROW><ROW><id>11419899</id><snippet>import os

path = os.environ['PATH_INFO']
</snippet></ROW><ROW><id>11419973</id><snippet>#!/usr/bin/python

import re, sys

pat_incomplete = re.compile(r'\\\s*$')
pat_indented = re.compile(r'^\t')

try:
    _, fname_in, fname_out = sys.argv
except ValueError:
    print("Usage: python line_joiner.py &lt;input_filename&gt; &lt;output_filename&gt;")
    sys.exit(1)

with open(fname_in) as in_f, open(fname_out, "w") as out_f:
    lines = iter(in_f)
    try:
        line = next(lines)
        s = pat_incomplete.sub('', line)
    except StopIteration:
        print("Input file did not contain any data")
        sys.exit(2)

    for line in lines:
        line = pat_incomplete.sub('', line)
        if pat_indented.match(line):
            s += pat_indented.sub('',line)
        else:
            out_f.write(s)
            s = line
    out_f.write(s)
</snippet></ROW><ROW><id>11419973</id><snippet>sys.argv</snippet></ROW><ROW><id>11419973</id><snippet>_</snippet></ROW><ROW><id>11419973</id><snippet>next()</snippet></ROW><ROW><id>11419973</id><snippet>s</snippet></ROW><ROW><id>11419973</id><snippet>None</snippet></ROW><ROW><id>11419973</id><snippet>if lastLine:</snippet></ROW><ROW><id>11419973</id><snippet>None</snippet></ROW><ROW><id>11419973</id><snippet>lastLine</snippet></ROW><ROW><id>11419973</id><snippet>with</snippet></ROW><ROW><id>11419973</id><snippet>open()</snippet></ROW><ROW><id>11419973</id><snippet>with</snippet></ROW><ROW><id>11419973</id><snippet>open()</snippet></ROW><ROW><id>11420278</id><snippet>python -vv</snippet></ROW><ROW><id>11420278</id><snippet>faulthandler</snippet></ROW><ROW><id>11420467</id><snippet>class Machine(object):
    lst = []
    def __init__(self, name):
        self.name = name
        self.id = len(Machine.lst)
        Machine.lst.append(self)

m0 = Machine("zero")
m1 = Machine("one")

print(Machine.lst[1].name)  # prints "one"
</snippet></ROW><ROW><id>11420660</id><snippet>comp = Company.objects.all()[0]
info = {"name": comp.name, "url": comp.url, "created_on": datetime.strftime(comp.created_on, "%d-%m-%Y")}
return HttpResponse(json.dumps(info))
</snippet></ROW><ROW><id>11420660</id><snippet>obj = JSON.parse(response)</snippet></ROW><ROW><id>11420660</id><snippet>from django.template import Context, loader

context = Context({'user': UserObject, 'company': CompanyObject})
html_t = loader.get_template(HTML_TEMPLATE_PATH)
html = html_t.render(context)

return HttpResponse(html)
</snippet></ROW><ROW><id>11420680</id><snippet>import functools

def catch_exception(f):
    @functools.wraps(f)
    def func(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            print 'Caught an exception in', f.__name__
    return func

class Test(object):
    def __init__(self, val):
        self.val = val

    @catch_exception
    def calc():
        return self.val / 0

t = Test(3)
t.calc()
</snippet></ROW><ROW><id>11420680</id><snippet>classmethod's</snippet></ROW><ROW><id>11420680</id><snippet>staticmethod's</snippet></ROW><ROW><id>11420680</id><snippet>properties</snippet></ROW><ROW><id>11421053</id><snippet>from ctypes import *
buf = create_unicode_buffer(500)
WinPath = windll.kernel32.GetLongPathNameW
WinPath(unicode(tempDir), buf, 500)
print buf.value
</snippet></ROW><ROW><id>11421429</id><snippet>dictOfLists[x][y]=dictOfLists[x][y].remove('**')</snippet></ROW><ROW><id>11421429</id><snippet>remove</snippet></ROW><ROW><id>11421429</id><snippet>dictOfLists[x][y].remove('**')</snippet></ROW><ROW><id>11421536</id><snippet>myModule</snippet></ROW><ROW><id>11421536</id><snippet>import myModule
pValue = myModule.doSomething()
print pValue
</snippet></ROW><ROW><id>11421536</id><snippet>#include &lt;Python.h&gt;

- (void)example {

    PyObject *pName, *pModule, *pDict, *pFunc, *pArgs, *pValue;
    NSString *nsString;

    // Initialize the Python Interpreter
    Py_Initialize();

    // Build the name object
    pName = PyString_FromString("myModule");

    // Load the module object
    pModule = PyImport_Import(pName);

    // pDict is a borrowed reference 
    pDict = PyModule_GetDict(pModule);

    // pFunc is also a borrowed reference 
    pFunc = PyDict_GetItemString(pDict, "doSomething");

    if (PyCallable_Check(pFunc)) {
        pValue = PyObject_CallObject(pFunc, NULL);
        if (pValue != NULL) {
            if (PyObject_IsInstance(pValue, (PyObject *)&amp;PyUnicode_Type)) {
                    nsString = [NSString stringWithCharacters:((PyUnicodeObject *)pValue)-&gt;str length:((PyUnicodeObject *) pValue)-&gt;length];
            } else if (PyObject_IsInstance(pValue, (PyObject *)&amp;PyBytes_Type)) {
                    nsString = [NSString stringWithUTF8String:((PyBytesObject *)pValue)-&gt;ob_sval];
            } else {
                    /* Handle a return value that is neither a PyUnicode_Type nor a PyBytes_Type */
            }
            Py_XDECREF(pValue);
        } else {
            PyErr_Print();
        }
    } else {
        PyErr_Print();
    }

    // Clean up
    Py_XDECREF(pModule);
    Py_XDECREF(pName);

    // Finish the Python Interpreter
    Py_Finalize();

    NSLog(@"%@", nsString);
}
</snippet></ROW><ROW><id>11421593</id><snippet>width</snippet></ROW><ROW><id>11421593</id><snippet>&gt;&gt;&gt; bin(255 &amp; ~(1 &lt;&lt; 3))
'0b11110111'
&gt;&gt;&gt; bin(65535 &amp; ~(1 &lt;&lt; 3))
'0b1111111111110111'
&gt;&gt;&gt; bin(75557863725914323419135 &amp; ~(1 &lt;&lt; 3))
'0b1111111111111111111111111111111111111111111111111111111111111111111111110111'
</snippet></ROW><ROW><id>11421593</id><snippet>-(x + 1)</snippet></ROW><ROW><id>11421593</id><snippet>bin</snippet></ROW><ROW><id>11421593</id><snippet>unset_mask</snippet></ROW><ROW><id>11421593</id><snippet>def unset_mask(index):
    return ~(1 &lt;&lt; index)

x = 0b11111111
x &amp;= unset_mask(3)
print x == 0b11110111  # prints True
</snippet></ROW><ROW><id>11421627</id><snippet>    class YourForm(Form):
         your_field1 = TextField()
         ....
         your_fieldn = SubmitField()


   @app.route('/')
   def view():
       form=YourForm()
       return render_template('your.html', form=form)

   In your.html
   &lt;form &gt;
     {{ form.your_field1 }}
     ....
     {{ form.your_fieldn }}
   &lt;/form&gt;
</snippet></ROW><ROW><id>11421627</id><snippet>   app.jinja_env.globals.update({'variable':1})
</snippet></ROW><ROW><id>11421627</id><snippet>@app.context_processor
def inject_variable():
    return dict(variable=1)
</snippet></ROW><ROW><id>11421627</id><snippet>variable</snippet></ROW><ROW><id>11421803</id><snippet>int</snippet></ROW><ROW><id>11421803</id><snippet>struct</snippet></ROW><ROW><id>11421803</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack('&gt;i', 257)
'\x00\x00\x01\x01'
&gt;&gt;&gt; struct.pack('&lt;i', 257)
'\x01\x01\x00\x00'
&gt;&gt;&gt; struct.unpack('&lt;i', '\x01\x01\x00\x00')
(257,)
&gt;&gt;&gt; struct.unpack('&gt;i', '\x00\x00\x01\x01')
(257,)
</snippet></ROW><ROW><id>11421803</id><snippet>ms4py</snippet></ROW><ROW><id>11421803</id><snippet>&gt;&gt;&gt; struct.pack('&gt;h', 257)
'\x01\x01'
&gt;&gt;&gt; struct.unpack('&gt;h', '\x01\x01')
(257,)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11421803</id><snippet>&gt;&gt;&gt; struct.unpack('&gt;h', '\x10\x00')
(4096,)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>11421962</id><snippet>class Foo           (object):
      #^class name   #^ inherits from object

      bar = "Bar" #Class attribute.

      def __init__(self):
          #        #^ The first variable is the class instance in methods.  
          #        #  This is called "self" by convention, but could be any name you want.
          #^ double underscore methods are usually special.  This one 
          #  gets called immediately after a new instance is created.

          self.variable="Foo" #instance attribute.
          print self.variable, self.bar  #&lt;---self.bar references class attribute
          self.bar = " Bar is now Baz"   #&lt;---self.bar is now an instance attribute
          print self.variable, self.bar  

      def method(self,arg1,arg2):
          #This method has arguments.  You would call it like this:  instance.method(1,2)
          print "in method (args):",arg1,arg2
          print "in method (attributes):", self.variable, self.bar


a=Foo() # this calls __init__ (indirectly), output:
                 # Foo bar
                 # Foo  Bar is now Baz
print a.variable # Foo
a.variable="bar"
a.method(1,2) # output:
                 # in method (args): 1 2
                 # in method (attributes): bar  Bar is now Baz
Foo.method(a,1,2) #&lt;--- Same as a.method(1,2).  This makes it a little more explicit what the argument "self" actually is.

class Bar(object):
     def __init__(self,arg):
          self.arg=arg
          self.Foo=Foo()

b=Bar(a)
b.arg.variable="something"
print a.variable # something
print b.Foo.variable # Foo
</snippet></ROW><ROW><id>11422060</id><snippet>fig = plt.figure()
ax2 = fig.add_axes([0.9, 0.1, 0.05, 0.9])
fig.colorbar(z1, cax=ax2) #specifies to put the colorbar in ax2
</snippet></ROW><ROW><id>11422077</id><snippet>if type(val) is list</snippet></ROW><ROW><id>11422077</id><snippet>isinstance(val, list)</snippet></ROW><ROW><id>11422077</id><snippet>def feetToMeters(feet):
    meters = np.asarray(feet) * 0.3048
    return list(meters) if isinstance(feet, list) else meters
</snippet></ROW><ROW><id>11422077</id><snippet>list</snippet></ROW><ROW><id>11422077</id><snippet>list</snippet></ROW><ROW><id>11422081</id><snippet>def a_code():
    print "a"
def b_code():
    print "b"

d={'a':a_code,'b':b_code}
test=raw_input("enter a or b")
d[test]()
</snippet></ROW><ROW><id>11422081</id><snippet>if test in ('a', 'b', 'c', 'd'): #tuple
   do_something()
</snippet></ROW><ROW><id>11422081</id><snippet>if test in ['a', 'b', 'c', 'd']: #list slower than tuple -- ('a', 'b', 'c', 'd')
   do_something()
</snippet></ROW><ROW><id>11422081</id><snippet>if test in 'abcd': # string
   do_something()
</snippet></ROW><ROW><id>11422147</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>11422147</id><snippet>which python
</snippet></ROW><ROW><id>11422147</id><snippet>ln -s /usr/local/bin/python /usr/bin/python
</snippet></ROW><ROW><id>11422481</id><snippet>fmt=raw_input("what is the form? &gt;&gt;&gt;")
nargs=fmt.count('{') #Very simple counting to figure out how many parameters to ask about
args=[]
for i in xrange(nargs):
    args.append(raw_input("What is the value for parameter {0} &gt;&gt;&gt;".format(i)))

fmt.format(*args)
          #^ unpacking operator (sometimes called star operator or splat operator)
</snippet></ROW><ROW><id>11422485</id><snippet> def mylist(x):
    if isinstance(x,(list,tuple)):
        return x
    else:
        return [x]


&gt;&gt;&gt; mylist(5)
[5]
&gt;&gt;&gt; mylist([10])
[10]
</snippet></ROW><ROW><id>11422487</id><snippet>invalid_xml = re.compile(u'[\x00-\x08\x0B-\x0C\x0E-\x1F\x7F]')
</snippet></ROW><ROW><id>11422487</id><snippet>conn = urllib2.urlopen(xmlfeed)
xmlfile = open('output', 'w')

while True:
    data = conn.read(4096)
    if data:
        newdata, count = invalid_xml.subn('', data)
        if count &gt; 0 :
            print 'Removed %s illegal characters from XML feed' % count
        xmlfile.write(newdata)

    else:
        break

xmlfile.close()
</snippet></ROW><ROW><id>11422723</id><snippet>dom.getElementsByTagName('file')</snippet></ROW><ROW><id>11422723</id><snippet>&lt;file&gt;</snippet></ROW><ROW><id>11422723</id><snippet>urls = []
for file_node in dom.getElementsByTagName('file'):
    url = file_node.getAttribute('url')
    if url.endswith('.txt'):
        urls.append(url)
</snippet></ROW><ROW><id>11422723</id><snippet>mylist = ['a', 'b', 'c']
for i, value in enumerate(mylist):
    print i, value
</snippet></ROW><ROW><id>11422774</id><snippet>title="The Three Little Pigs"
</snippet></ROW><ROW><id>11422878</id><snippet>module.function</snippet></ROW><ROW><id>11422878</id><snippet>from module import function</snippet></ROW><ROW><id>11422901</id><snippet>fib()</snippet></ROW><ROW><id>11422901</id><snippet>package main

import "fmt"

func fib(n int) chan int {
    c := make(chan int)

    go func() {
        x, y := 0, 1

        for x &lt; n {
            c &lt;- x
            x, y = y, x+y
        }

        close(c)
    }()

    return c
}

func main() {
    // Print the Fibonacci numbers less than 500
    for i := range fib(500) {
        fmt.Println(i)
    }
}
</snippet></ROW><ROW><id>11422901</id><snippet>func fib(wanted func (int, int) bool) chan int {
    c := make(chan int)

    go func() {
        x, y := 0, 1

        for i := 0; wanted(i, x); i++{
            c &lt;- x
            x, y = y, x+y
        }

        close(c)
    }()

    return c
}

func main() {
    // Print the first 10 Fibonacci numbers
    for n := range fib(func(i, x int) bool { return i &lt; 10 }) {
        fmt.Println(n)
    }

    // Print the Fibonacci numbers less than 500
    for n := range fib(func(i, x int) bool { return x &lt; 500 }) {
        fmt.Println(n)
    }
}
</snippet></ROW><ROW><id>11422901</id><snippet>make (chan int, 100)</snippet></ROW><ROW><id>11422901</id><snippet>fibonacci</snippet></ROW><ROW><id>11422901</id><snippet>c &lt;- x</snippet></ROW><ROW><id>11422901</id><snippet>c</snippet></ROW><ROW><id>11422923</id><snippet>list2</snippet></ROW><ROW><id>11422923</id><snippet>dic2 = dict((item,i) for i,item in enumerate(list2))
</snippet></ROW><ROW><id>11422923</id><snippet>x in dic2 and y in dic2</snippet></ROW><ROW><id>11422923</id><snippet>dic2[x]</snippet></ROW><ROW><id>11422923</id><snippet>enumerate</snippet></ROW><ROW><id>11422923</id><snippet>Names = ['John', 'James', 'Barry', 'Greg', 'Jenny']
Results1 = ['James', 'Barry', 'Jenny', 'Greg', 'John']
Results2 = ['Barry', 'Jenny', 'Greg', 'James', 'John']

Order1 = dict((name,order) for order,name in enumerate(Results1))
Order2 = dict((name,order) for order,name in enumerate(Results2))

score = [[0]*len(Names) for y in range(len(Names))]

for i,name1 in enumerate(Names):
    for j,name2 in enumerate(Names):
        if name1 in Order1 and name2 in Order1 and Order1[name1] &gt; Order1[name2] and name1 in Order2 and name2 in Order2 and Order2[name1] &gt; Order2[name2]:
            score[i][j] = 1
</snippet></ROW><ROW><id>11423057</id><snippet>ifdef WORDS_BIGENDIAN</snippet></ROW><ROW><id>11423057</id><snippet>ifndef WORDS_BIGENDIAN</snippet></ROW><ROW><id>11423180</id><snippet>np.put</snippet></ROW><ROW><id>11423180</id><snippet>&gt;&gt;&gt; np.put([1,2,3],[0,1],[2,1])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/dist-packages/numpy/core/fromnumeric.py", line 394, in put
    return a.put(ind, v, mode)
AttributeError: 'list' object has no attribute 'put'
</snippet></ROW><ROW><id>11423189</id><snippet>itertools.product()</snippet></ROW><ROW><id>11423189</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; test = {'a': [1, 2], 'b': ['x', 'y', 'z']}
&gt;&gt;&gt; [dict(zip(test.keys(), part)) for part in product(*test.values())]
[{'a': 1, 'b': 'x'}, {'a': 1, 'b': 'y'}, {'a': 1, 'b': 'z'}, 
 {'a': 2, 'b': 'x'}, {'a': 2, 'b': 'y'}, {'a': 2, 'b': 'z'}]
</snippet></ROW><ROW><id>11423189</id><snippet>dict()</snippet></ROW><ROW><id>11423227</id><snippet>start</snippet></ROW><ROW><id>11423227</id><snippet>end</snippet></ROW><ROW><id>11423227</id><snippet>def searchM():
    fileAddress = '/database/pro/data/%s.txt' % ID
    start = None
    end = None
    with open(fileAddress,'rb') as f:
        root = etree.parse(f)
        for lcn in root.xpath("/protein/match[@dbname='M']/lcn"):
            start = int(lcn.get("start")) #if it is PFAM then look for start value
            end = int(lcn.get("end")) #if it is PFAM then also look for end value
    return start, end

(start, end) = searchM()  
</snippet></ROW><ROW><id>11423302</id><snippet>/usr/bin/ruby -e "$(/usr/bin/curl -fsSL https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)"
</snippet></ROW><ROW><id>11423302</id><snippet>brew doctor</snippet></ROW><ROW><id>11423302</id><snippet>~/.profile</snippet></ROW><ROW><id>11423302</id><snippet>/etc/paths</snippet></ROW><ROW><id>11423302</id><snippet>export PATH=/usr/local/bin:$PATH</snippet></ROW><ROW><id>11423302</id><snippet>$PATH</snippet></ROW><ROW><id>11423302</id><snippet>/etc/paths</snippet></ROW><ROW><id>11423302</id><snippet>/usr/local/share/python</snippet></ROW><ROW><id>11423302</id><snippet>brew install readline sqlite gdbm pkg-config
brew install python --framework --universal
</snippet></ROW><ROW><id>11423302</id><snippet>which</snippet></ROW><ROW><id>11423302</id><snippet>whereis</snippet></ROW><ROW><id>11423302</id><snippet>cd /Library/Frameworks/Python.framework/Versions
sudo rm Current
sudo ln -s /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/Current
# following might not be needed or advised (see discussion below).
cd /System/Library/Frameworks/Python.framework/Versions
sudo rm Current
sudo ln -s /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/Current
</snippet></ROW><ROW><id>11423302</id><snippet>brew install pydev</snippet></ROW><ROW><id>11423302</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>11423302</id><snippet>PySide</snippet></ROW><ROW><id>11423302</id><snippet>easy_install install pip</snippet></ROW><ROW><id>11423302</id><snippet>pip</snippet></ROW><ROW><id>11423302</id><snippet>brew</snippet></ROW><ROW><id>11423337</id><snippet>./script.py '../Testdata/*indels.ss' -m 5 | awk 'NR &gt;= 3 {exit} 1'
</snippet></ROW><ROW><id>11423337</id><snippet>head -2</snippet></ROW><ROW><id>11423337</id><snippet>SIGPIPE</snippet></ROW><ROW><id>11423337</id><snippet>import signal
signal.signal(signal.SIGPIPE, signal.SIG_DFL)
</snippet></ROW><ROW><id>11423622</id><snippet>from threading import  Thread                                                                                       

def take_data():
    while 1:                                                                            
        data = go_fetch_more_data()

data_thread = Thread(target=take_data)
data_thread.start()

while 1: 
    sleep_seconds = random.randint(0, 60)        
    time.sleep(sleep_seconds)
    toggle_power()
</snippet></ROW><ROW><id>11423731</id><snippet>def button():
  global number
  print number

number = 1

button() 
&gt;&gt;&gt; 1           &lt;----------------↰
number = 'A STRING NOW'          ↑
#now the printed string doesn't above change, so you'd have to call button again for it to change:
button()
&gt;&gt;&gt; A STRING NOW # &lt;-- BAM
</snippet></ROW><ROW><id>11424018</id><snippet>outputFile = open('out'+uniprotID+'.txt','w')#file for result output
</snippet></ROW><ROW><id>11424018</id><snippet>def printOutput(start, end, makeList):
  if start == end == None:
      return
  else:
      outputFile = open('out'+uniprotID+'.txt','w')#file for result output
      while start &lt;= end:
          print start
          print end
          inRange = makeList[start]
          start += 1
          outputFile.write(inRange) 
</snippet></ROW><ROW><id>11424018</id><snippet>def printOutput(start, end, makeList):
  if start == end == None:
      return
  else:
      outputFile = open('out'+uniprotID+'.txt','w')#file for result output
      for inRange in makeList[start:end+1]:
          outputFile.write(inRange)
</snippet></ROW><ROW><id>11424054</id><snippet>d = {'a':['2', 'ova', 'no'], 'b':['23', 'movie', 'yes'], 'c':['5', 'show', 'yes'], 'd':['17', 'ova', 'yes'], 'e':['1', 'movie', 'no']}
sorted_items = sorted(d.items(), key=itemgetter(1))
for i,v in sorted_items:
    print i, v
</snippet></ROW><ROW><id>11424819</id><snippet>count(start=0, step=1)</snippet></ROW><ROW><id>11424819</id><snippet>n</snippet></ROW><ROW><id>11424819</id><snippet>def count(start=0, step=1):
    # count(10) --&gt; 10 11 12 13 14 ...
    # count(2.5, 0.5) -&gt; 2.5 3.0 3.5 ...
    n = start
    while True:
        yield n
        n += step
</snippet></ROW><ROW><id>11424819</id><snippet>import itertools

for i in itertools.count(13):
   print(i)
</snippet></ROW><ROW><id>11424819</id><snippet>for i in itertools.count(100, -5):
    print(i)
</snippet></ROW><ROW><id>11424877</id><snippet>raise Exception('Boo!')</snippet></ROW><ROW><id>11424877</id><snippet>serial.Serial</snippet></ROW><ROW><id>11424991</id><snippet>foo,bar,baz,qux</snippet></ROW><ROW><id>11425137</id><snippet>number_to_send = (sequence_number &lt;&lt; 4) + fragment_number
bytes_to_send = struct.pack("!H", number_to_send)
</snippet></ROW><ROW><id>11425137</id><snippet>sequence_number = struct.unpack("!H", bytes_to_send)[0] &gt;&gt; 4
</snippet></ROW><ROW><id>11425347</id><snippet>self.ui.lstStudents.currentItemChanged.connect(self.PrintClick)
</snippet></ROW><ROW><id>11425476</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; data = np.arange(20).reshape(10, 2)
&gt;&gt;&gt; data
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15],
       [16, 17],
       [18, 19]])
</snippet></ROW><ROW><id>11425476</id><snippet>&gt;&gt;&gt; ts = data[:,0] 
&gt;&gt;&gt; ts
array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])
</snippet></ROW><ROW><id>11425476</id><snippet>&gt;&gt;&gt; (ts &gt;= 2) &amp; (ts &lt;= 6)
array([False,  True,  True,  True, False, False, False, False, False, False], dtype=bool)
</snippet></ROW><ROW><id>11425476</id><snippet>&gt;&gt;&gt; data[:,1][(ts &gt;= 2) &amp; (ts &lt;= 6)]
array([3, 5, 7])
</snippet></ROW><ROW><id>11425476</id><snippet>&gt;&gt;&gt; np.mean(data[:,1][(ts &gt;= 2) &amp; (ts &lt;= 6)])
5.0
</snippet></ROW><ROW><id>11425476</id><snippet>&gt;&gt;&gt; np.mean(data[:,1][(data[:,0] &gt;= 2) &amp; (data[:,0] &lt;= 6)])
5.0
</snippet></ROW><ROW><id>11425476</id><snippet>data[:,1][(data[:,0] &gt;= 2) &amp; (data[:,0] &lt;= 6)].mean()</snippet></ROW><ROW><id>11425587</id><snippet>information</snippet></ROW><ROW><id>11425587</id><snippet>stuff</snippet></ROW><ROW><id>11425587</id><snippet>stuff</snippet></ROW><ROW><id>11425587</id><snippet>class Things(models.Model):
    name = models.CharField(max_length=20)

class Stuff(models.Model):
    name = models.CharField(max_length=20)
    information = models.ManyToManyField('Information')
    things = models.ForeignKey('Things')

class Information(models.Model):
    name = models.CharField(max_length=20)
</snippet></ROW><ROW><id>11425587</id><snippet>information</snippet></ROW><ROW><id>11425587</id><snippet>stuff</snippet></ROW><ROW><id>11425587</id><snippet>X</snippet></ROW><ROW><id>11425587</id><snippet>stuff</snippet></ROW><ROW><id>11425587</id><snippet>Y</snippet></ROW><ROW><id>11425587</id><snippet>information</snippet></ROW><ROW><id>11425587</id><snippet>stuff</snippet></ROW><ROW><id>11425587</id><snippet>information</snippet></ROW><ROW><id>11425587</id><snippet>thing</snippet></ROW><ROW><id>11425587</id><snippet>Z</snippet></ROW><ROW><id>11425587</id><snippet>information</snippet></ROW><ROW><id>11425587</id><snippet>stuff</snippet></ROW><ROW><id>11425587</id><snippet>stuff</snippet></ROW><ROW><id>11425587</id><snippet>thing</snippet></ROW><ROW><id>11425617</id><snippet>import os, shutil

for i in files:
  os.mkdir(os.path.join(dir_name , i.split(".")[0]))
  shutil.copy(os.path.join(dir_name , i), os.path.join(dir_name , i.split(".")[0]))
</snippet></ROW><ROW><id>11425830</id><snippet>egg_info</snippet></ROW><ROW><id>11425830</id><snippet>pip install Distribute</snippet></ROW><ROW><id>11425830</id><snippet>pip install --upgrade setuptools</snippet></ROW><ROW><id>11425830</id><snippet>easy_install -U</snippet></ROW><ROW><id>11425869</id><snippet>is None</snippet></ROW><ROW><id>11425869</id><snippet>== None</snippet></ROW><ROW><id>11425869</id><snippet>==</snippet></ROW><ROW><id>11425869</id><snippet>None</snippet></ROW><ROW><id>11426101</id><snippet>toreplace = "&lt;span class='highlight' STYLE='background-color:yellow'&gt;\g&lt;0&gt;&lt;/span&gt;"
</snippet></ROW><ROW><id>11426223</id><snippet>%include "stl.i"
%template(_string_list) std::vector&lt; std::string &gt;;
</snippet></ROW><ROW><id>11426343</id><snippet>all</snippet></ROW><ROW><id>11426343</id><snippet>[word for word in good_words if all(letter in word for letter in letters)]
</snippet></ROW><ROW><id>11426343</id><snippet>break</snippet></ROW></DATA>