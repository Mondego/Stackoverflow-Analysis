<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>16759913</id><snippet>f = open(filename, "a")
</snippet></ROW><ROW><id>16759959</id><snippet>import re

s = """
585
00:59:59,237 --&gt; 01:00:01,105
- It's all right. - He saw us!

586
01:00:01,139 --&gt; 01:00:03,408
I heard you the first time.
"""

for line in re.findall(r'(\d+:)(\d+:\d+)(?:.*\n)(.*)', s):
    if line[0] == '00:':
        print ' '.join(line[1:])
    else:
        print ' '.join([''.join(line[0:2]), line[2]])
</snippet></ROW><ROW><id>16759959</id><snippet># 59:59 - It's all right. - He saw us!
# 01:00:01 I heard you the first time.
</snippet></ROW><ROW><id>16760190</id><snippet>sqlite3</snippet></ROW><ROW><id>16760190</id><snippet>3</snippet></ROW><ROW><id>16760190</id><snippet>Python 2.7.3 (default, Oct 22 2012, 06:12:32) 
[GCC 4.2.1 Compatible Apple Clang 3.1 (tags/Apple/clang-318.0.58)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; sqlite3.connect(':memory:')
&lt;sqlite3.Connection object at 0x105354200&gt;
</snippet></ROW><ROW><id>16760190</id><snippet>brew rm sqlite python
brew install python
</snippet></ROW><ROW><id>16760245</id><snippet>def attack(self, target):
    self.e_attack.fire()
    target.hurt(self.damage)
</snippet></ROW><ROW><id>16760245</id><snippet>self</snippet></ROW><ROW><id>16760245</id><snippet>target</snippet></ROW><ROW><id>16760511</id><snippet>rdiff-backup.exe</snippet></ROW><ROW><id>16760511</id><snippet>C:\Windows\SysWOW64</snippet></ROW><ROW><id>16760705</id><snippet>import os
def test():
    if os.path.exists('text.txt'):
        print 'yes'
</snippet></ROW><ROW><id>16760797</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split(r'(?u)\W+', u'Les Misérables')
[u'Les', u'Mis\xe9rables']
&gt;&gt;&gt; re.split(ur'\W+', u'Les Misérables', 0, re.U)
[u'Les', u'Mis\xe9rables']
</snippet></ROW><ROW><id>16760797</id><snippet>(?u)</snippet></ROW><ROW><id>16760802</id><snippet>;;</snippet></ROW><ROW><id>16760802</id><snippet>;E</snippet></ROW><ROW><id>16760979</id><snippet>strdata</snippet></ROW><ROW><id>16760979</id><snippet>strdata = []
</snippet></ROW><ROW><id>16760979</id><snippet>strdata.append(json.dumps(data, default=lambda o: o.__dict__))
</snippet></ROW><ROW><id>16760979</id><snippet>json.dump(strdata, f)
</snippet></ROW><ROW><id>16760979</id><snippet>strdata = json.load(f)
</snippet></ROW><ROW><id>16760979</id><snippet>data.__dict__</snippet></ROW><ROW><id>16760979</id><snippet>strdata</snippet></ROW><ROW><id>16760979</id><snippet>[json.loads(item) for item in strdata]
</snippet></ROW><ROW><id>16760979</id><snippet>cls=CustomEncoder</snippet></ROW><ROW><id>16760979</id><snippet>object_hook=custom_decoder</snippet></ROW><ROW><id>16760979</id><snippet>import json

class Foo(object):
    def __init__(self, x=1, y='bar'):
        self.x = x
        self.y = y

class CustomEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Foo):
            return obj.__dict__
        else:
            return json.JSONEncoder.default(self, obj)

filename = '/tmp/test.json'
with open(filename, 'w') as f:
    json.dump(
        [Foo(1, 'manchego'), Foo(2, 'stilton'), [{'brie': Foo(3,'gruyere')}]],
        f, cls=CustomEncoder)

def custom_decoder(dct):
    try:
        return Foo(**dct)
    except TypeError:
        return dct

with open(filename, 'r') as f:
    newfoo = json.load(f, object_hook=custom_decoder)
print(newfoo)
# [{"y": "manchego", "x": 1}, {"y": "stilton", "x": 2}, [{"brie": {"y": "gruyere", "x": 3}}]]
</snippet></ROW><ROW><id>16760979</id><snippet>json.dump</snippet></ROW><ROW><id>16760979</id><snippet>json.load</snippet></ROW><ROW><id>16761017</id><snippet>urllib.urlretrieve</snippet></ROW><ROW><id>16761017</id><snippet>urlretrieve(your_url, your_zip_path)
</snippet></ROW><ROW><id>16761057</id><snippet>timeLS1 = 0.1
timeLS2 = 0.2
timeLS3 = 0.15
timeLS4 = 0.5
timeLS5 = 0.4
timeLS6 = 0.3

data = {key: value for key, value in locals().iteritems() if 'timeLS' in key}

key, value = max(data.iteritems(), key=lambda x: x[1])
print key, value  # prints 'timeLS4 0.5'
</snippet></ROW><ROW><id>16761057</id><snippet>data</snippet></ROW><ROW><id>16761459</id><snippet>from hashlib import md5
from Crypto.Cipher import AES
from Crypto import Random

def derive_key_and_iv(password, salt, key_length, iv_length):
    d = d_i = ''
    while len(d) &lt; key_length + iv_length:
        d_i = md5(d_i + password + salt).digest()
        d += d_i
    return d[:key_length], d[key_length:key_length+iv_length]

def encrypt(in_file, out_file, password, key_length=32):
    bs = AES.block_size
    salt = Random.new().read(bs - len('Salted__'))
    key, iv = derive_key_and_iv(password, salt, key_length, bs)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    out_file.write('Salted__' + salt)
    finished = False
    while not finished:
        chunk = in_file.read(1024 * bs)
        if len(chunk) == 0 or len(chunk) % bs != 0:
            padding_length = (bs - len(chunk) % bs) or bs
            chunk += padding_length * chr(padding_length)
            finished = True
        out_file.write(cipher.encrypt(chunk))

def decrypt(in_file, out_file, password, key_length=32):
    bs = AES.block_size
    salt = in_file.read(bs)[len('Salted__'):]
    key, iv = derive_key_and_iv(password, salt, key_length, bs)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    next_chunk = ''
    finished = False
    while not finished:
        chunk, next_chunk = next_chunk, cipher.decrypt(in_file.read(1024 * bs))
        if len(next_chunk) == 0:
            padding_length = ord(chunk[-1])
            chunk = chunk[:-padding_length]
            finished = True
        out_file.write(chunk)
</snippet></ROW><ROW><id>16761459</id><snippet>with open(in_filename, 'rb') as in_file, open(out_filename, 'wb') as out_file:
    encrypt(in_file, out_file, password)
with open(in_filename, 'rb') as in_file, open(out_filename, 'wb') as out_file:
    decrypt(in_file, out_file, password)
</snippet></ROW><ROW><id>16761483</id><snippet>for k in myDict:
    myDict[k] /= 2
</snippet></ROW><ROW><id>16761598</id><snippet>ad-image-wrapper</snippet></ROW><ROW><id>16761598</id><snippet>response.body</snippet></ROW><ROW><id>16761598</id><snippet>parse</snippet></ROW><ROW><id>16761598</id><snippet>ad-thumb-list</snippet></ROW><ROW><id>16761598</id><snippet>image_relative_url = site.select('//ul[@class="ad-thumb-list"]/li[@class="first_item"]/a/@href').extract()
if image_relative_url:
    image_relative_url = image_relative_url[0]
</snippet></ROW><ROW><id>16761684</id><snippet>class FootnoteNumbers(object):
    def __init__(self, start=1):
        self.count = start - 1

    def __call__(self, match):
        self.count += 1
        return "&lt;sup&gt;{}&lt;/sup&gt;".format(self.count)


new_body_text = re.sub(pattern, FootnoteNumbers(), text)
</snippet></ROW><ROW><id>16761684</id><snippet>FootnoteNumbers()</snippet></ROW><ROW><id>16761684</id><snippet>self.count</snippet></ROW><ROW><id>16761684</id><snippet>re.sub()</snippet></ROW><ROW><id>16761768</id><snippet>matplotlib</snippet></ROW><ROW><id>16761768</id><snippet>pyplot</snippet></ROW><ROW><id>16761768</id><snippet>MATLAB</snippet></ROW><ROW><id>16761768</id><snippet>OO</snippet></ROW><ROW><id>16761768</id><snippet>pyplot</snippet></ROW><ROW><id>16761768</id><snippet>OO</snippet></ROW><ROW><id>16761768</id><snippet>canvas</snippet></ROW><ROW><id>16761768</id><snippet>canvas</snippet></ROW><ROW><id>16761768</id><snippet>GTKAgg</snippet></ROW><ROW><id>16761768</id><snippet>TKAgg</snippet></ROW><ROW><id>16761768</id><snippet>import matplotlib
matplotlib.use('PDF')
</snippet></ROW><ROW><id>16761768</id><snippet>pyplot</snippet></ROW><ROW><id>16761815</id><snippet>textwrap.fill()</snippet></ROW><ROW><id>16761815</id><snippet>import textwrap

labeltext = textwrap.fill(labeltext, width=30)
</snippet></ROW><ROW><id>16761918</id><snippet>&gt;&gt;&gt; def myfunc():
...     """This is a docstring."""
...     pass
&gt;&gt;&gt; myfunc.__doc__
'This is a docstring.'
&gt;&gt;&gt; help(myfunc)
Help on function myfunc in module __main__:

myfunc()
    This is a docstring.
</snippet></ROW><ROW><id>16761918</id><snippet># This is my comment line 1
# ...line 2
# etc.
def myfunc():
    pass
</snippet></ROW><ROW><id>16761919</id><snippet>data = {x['name']: x for x in original_data}
</snippet></ROW><ROW><id>16761919</id><snippet>data['Dave']
data['Bill']
</snippet></ROW><ROW><id>16761919</id><snippet>data = dict((x['name'], x) for x in original_data)
</snippet></ROW><ROW><id>16761979</id><snippet>&gt;&gt;&gt; strs = 'States, Total Score, Critical Reading, Mathematics, Writing, Participation (%)\nWashington,1564,524,532,508,41.2000\nNewHampshire,1554,520,524,510,64.0000\nMassachusetts,1547,512,526,509,72.1000\nOregon,1546,523,524,499,37.1000\nVermont,1546,519,512,506,64.0000\nArizona,1544,519,525,500,22.4000\nConnecticut,1536,509,514,513,71.2000\nAlaska,1524,518,515,491,32.7000\nVirginia,1521,512,512,497,56.0000\nCalifornia,1517,501,516,500,37.5000\nNewJersey,1506,495,514,497,69.0000\nMaryland,1502,501,506,495,56.7000\nNorthCarolina,1485,497,511,477,45.5000\nRhodeIsland,1477,494,495,488,60.8000\nIndiana,1476,494,505,477,52.0000\nFlorida,1473,496,498,479,44.7000\nPennsylvania,1473,492,501,480,62.3000\nNevada,1470,496,501,473,25.9000\nDelaware,1469,493,495,481,59.2000\nTexas,1462,484,505,473,41.5000\nNewYork,1461,484,499,478,59.6000\nHawaii,1458,483,505,470,47.1000\nGeorgia,1453,488,490,475,46.5000\nSouthCarolina,1447,484,495,468,40.7000\nMaine,1389,468,467,454,87.1000\nIowa,1798,603,613,582,2.7000\nMinnesota,1781,594,607,580,6.0000\nWisconsin,1778,595,604,579,3.8000\nMissouri,1768,593,595,580,3.6000\nMichigan,1766,585,605,576,3.8000\nSouthDakota,1766,592,603,571,2.0000\nIllinois,1762,585,600,577,4.6700\nKansas,1752,590,595,567,4.7000\nNebraska,1746,585,593,568,3.9000\nNorthDakota,1733,580,594,559,3.4000\nKentucky,1713,575,575,563,5.0000\nTennessee,1712,576,571,565,6.4000\nColorado,1695,568,572,555,14.1000\nArkansas,1684,566,566,552,3.5000\nOklahoma,1684,569,568,547,3.8000\nWyoming,1683,570,567,546,3.6000\nUtah,1674,568,559,547,4.5000\nMississippi,1666,566,548,552,2.2000\nLouisiana,1652,555,550,547,4.0000\nAlabama,1650,556,550,544,5.4000\nNewMexico,1636,553,549,534,7.1000\nOhio,1609,538,548,522,17.2000\nIdaho,1601,543,541,517,14.6000\nMontana,1593,538,538,517,20.0000\nWest Virginia,1522,515,507,500,13.2000\n'
&gt;&gt;&gt; [ y for x in strs.splitlines() for y in x.split(",")]
['States', ' Total Score', ' Critical Reading', ' Mathematics', ' Writing', ' Participation (%)', 'Washington', '1564', '524', '532', '508', '41.2000', 'NewHampshire', '1554', '520', '524', '510', '64.0000', 'Massachusetts', '1547', '512', '526', '509', '72.1000', 'Oregon', '1546', '523', '524', '499', '37.1000', 'Vermont', '1546', '519', '512', '506', '64.0000', 'Arizona', '1544', '519', '525', '500', '22.4000', 'Connecticut', '1536', '509', '514', '513', '71.2000', 'Alaska', '1524', '518', '515', '491', '32.7000', 'Virginia', '1521', '512', '512', '497', '56.0000', 'California', '1517', '501', '516', '500', '37.5000', 'NewJersey', '1506', '495', '514', '497', '69.0000', 'Maryland', '1502', '501', '506', '495', '56.7000', 'NorthCarolina', '1485', '497', '511', '477', '45.5000', 'RhodeIsland', '1477', '494', '495', '488', '60.8000', 'Indiana', '1476', '494', '505', '477', '52.0000', 'Florida', '1473', '496', '498', '479', '44.7000', 'Pennsylvania', '1473', '492', '501', '480', '62.3000', 'Nevada', '1470', '496', '501', '473', '25.9000', 'Delaware', '1469', '493', '495', '481', '59.2000', 'Texas', '1462', '484', '505', '473', '41.5000', 'NewYork', '1461', '484', '499', '478', '59.6000', 'Hawaii', '1458', '483', '505', '470', '47.1000', 'Georgia', '1453', '488', '490', '475', '46.5000', 'SouthCarolina', '1447', '484', '495', '468', '40.7000', 'Maine', '1389', '468', '467', '454', '87.1000', 'Iowa', '1798', '603', '613', '582', '2.7000', 'Minnesota', '1781', '594', '607', '580', '6.0000', 'Wisconsin', '1778', '595', '604', '579', '3.8000', 'Missouri', '1768', '593', '595', '580', '3.6000', 'Michigan', '1766', '585', '605', '576', '3.8000', 'SouthDakota', '1766', '592', '603', '571', '2.0000', 'Illinois', '1762', '585', '600', '577', '4.6700', 'Kansas', '1752', '590', '595', '567', '4.7000', 'Nebraska', '1746', '585', '593', '568', '3.9000', 'NorthDakota', '1733', '580', '594', '559', '3.4000', 'Kentucky', '1713', '575', '575', '563', '5.0000', 'Tennessee', '1712', '576', '571', '565', '6.4000', 'Colorado', '1695', '568', '572', '555', '14.1000', 'Arkansas', '1684', '566', '566', '552', '3.5000', 'Oklahoma', '1684', '569', '568', '547', '3.8000', 'Wyoming', '1683', '570', '567', '546', '3.6000', 'Utah', '1674', '568', '559', '547', '4.5000', 'Mississippi', '1666', '566', '548', '552', '2.2000', 'Louisiana', '1652', '555', '550', '547', '4.0000', 'Alabama', '1650', '556', '550', '544', '5.4000', 'NewMexico', '1636', '553', '549', '534', '7.1000', 'Ohio', '1609', '538', '548', '522', '17.2000', 'Idaho', '1601', '543', '541', '517', '14.6000', 'Montana', '1593', '538', '538', '517', '20.0000', 'West Virginia', '1522', '515', '507', '500', '13.2000']
</snippet></ROW><ROW><id>16761979</id><snippet>,</snippet></ROW><ROW><id>16761979</id><snippet>&gt;&gt;&gt; [x.split(",") for x in strs.splitlines()]
[['States', ' Total Score', ' Critical Reading', ' Mathematics', ' Writing', ' Participation (%)'], ['Washington', '1564', '524', '532', '508', '41.2000'], ['NewHampshire', '1554', '520', '524', '510', '64.0000'], ['Massachusetts', '1547', '512', '526', '509', '72.1000'], ['Oregon', '1546', '523', '524', '499', '37.1000'], ['Vermont', '1546', '519', '512', '506', '64.0000'], ['Arizona', '1544', '519', '525', '500', '22.4000'], ['Connecticut', '1536', '509', '514', '513', '71.2000'], ['Alaska', '1524', '518', '515', '491', '32.7000'], ['Virginia', '1521', '512', '512', '497', '56.0000'], ['California', '1517', '501', '516', '500', '37.5000'], ['NewJersey', '1506', '495', '514', '497', '69.0000'], ['Maryland', '1502', '501', '506', '495', '56.7000'], ['NorthCarolina', '1485', '497', '511', '477', '45.5000'], ['RhodeIsland', '1477', '494', '495', '488', '60.8000'], ['Indiana', '1476', '494', '505', '477', '52.0000'], ['Florida', '1473', '496', '498', '479', '44.7000'], ['Pennsylvania', '1473', '492', '501', '480', '62.3000'], ['Nevada', '1470', '496', '501', '473', '25.9000'], ['Delaware', '1469', '493', '495', '481', '59.2000'], ['Texas', '1462', '484', '505', '473', '41.5000'], ['NewYork', '1461', '484', '499', '478', '59.6000'], ['Hawaii', '1458', '483', '505', '470', '47.1000'], ['Georgia', '1453', '488', '490', '475', '46.5000'], ['SouthCarolina', '1447', '484', '495', '468', '40.7000'], ['Maine', '1389', '468', '467', '454', '87.1000'], ['Iowa', '1798', '603', '613', '582', '2.7000'], ['Minnesota', '1781', '594', '607', '580', '6.0000'], ['Wisconsin', '1778', '595', '604', '579', '3.8000'], ['Missouri', '1768', '593', '595', '580', '3.6000'], ['Michigan', '1766', '585', '605', '576', '3.8000'], ['SouthDakota', '1766', '592', '603', '571', '2.0000'], ['Illinois', '1762', '585', '600', '577', '4.6700'], ['Kansas', '1752', '590', '595', '567', '4.7000'], ['Nebraska', '1746', '585', '593', '568', '3.9000'], ['NorthDakota', '1733', '580', '594', '559', '3.4000'], ['Kentucky', '1713', '575', '575', '563', '5.0000'], ['Tennessee', '1712', '576', '571', '565', '6.4000'], ['Colorado', '1695', '568', '572', '555', '14.1000'], ['Arkansas', '1684', '566', '566', '552', '3.5000'], ['Oklahoma', '1684', '569', '568', '547', '3.8000'], ['Wyoming', '1683', '570', '567', '546', '3.6000'], ['Utah', '1674', '568', '559', '547', '4.5000'], ['Mississippi', '1666', '566', '548', '552', '2.2000'], ['Louisiana', '1652', '555', '550', '547', '4.0000'], ['Alabama', '1650', '556', '550', '544', '5.4000'], ['NewMexico', '1636', '553', '549', '534', '7.1000'], ['Ohio', '1609', '538', '548', '522', '17.2000'], ['Idaho', '1601', '543', '541', '517', '14.6000'], ['Montana', '1593', '538', '538', '517', '20.0000'], ['West Virginia', '1522', '515', '507', '500', '13.2000']]
</snippet></ROW><ROW><id>16761979</id><snippet>itertools.chain</snippet></ROW><ROW><id>16761979</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; for elem in chain(*(x.split(",") for x in strs.splitlines())):
...     print elem
...     
States
 Total Score
 Critical Reading
 Mathematics
 Writing
 Participation (%)
Washington
...
</snippet></ROW><ROW><id>16762308</id><snippet>i</snippet></ROW><ROW><id>16762308</id><snippet>command=lambda i=i: self.buttoncall(i)
</snippet></ROW><ROW><id>16762308</id><snippet>i</snippet></ROW><ROW><id>16762308</id><snippet>i</snippet></ROW><ROW><id>16762308</id><snippet>i</snippet></ROW><ROW><id>16762308</id><snippet>i</snippet></ROW><ROW><id>16762308</id><snippet>i</snippet></ROW><ROW><id>16762308</id><snippet>i</snippet></ROW><ROW><id>16762308</id><snippet>for-loop</snippet></ROW><ROW><id>16762308</id><snippet>i</snippet></ROW><ROW><id>16762308</id><snippet>len(mylist)-1</snippet></ROW><ROW><id>16762308</id><snippet>i</snippet></ROW><ROW><id>16762496</id><snippet>settings.py</snippet></ROW><ROW><id>16762496</id><snippet>LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            '()': 'logutils.colorize.ColorizingStreamHandler',
            'formatter': 'standard',
            'stream': sys.stdout
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },

    },
    'loggers': {
        'django': {
            'handlers': ['mail_admins'],
            'propagate': True,
            'level': 'ERROR',
        },
        'mymodule': {
            'handlers': ['console', 'mail_admins'],
            'propagate': True,
            'level': 'DEBUG'

        },
    }
}
</snippet></ROW><ROW><id>16762496</id><snippet>./manage.py celeryd --event --beat --settings=dev
</snippet></ROW><ROW><id>16762625</id><snippet>dict</snippet></ROW><ROW><id>16762625</id><snippet>dict</snippet></ROW><ROW><id>16762625</id><snippet>class AmazonDataType(dict):
    """
    Base for all Amazon datatypes.
    """

    def __init__(self, *args, **kwargs):
        self._prefix = kwargs.pop('prefix', self.__class__.__name__)

        super(AmazonDataType, self).__init__(*args, **kwargs)

    def __getattr__(self, key):
        return self.__getitem__(key)

    def __setattr__(self, key, value):
        return self.__setitem__(key, value)

    def dict(self):
        result = {}

        for key, value in self.items():
            if key.startswith('_'):
                continue

            key = self.fields.get(key, key)

            if isinstance(value, AmazonDataType):
                for skey, svalue in value.dict().items():
                    result['%s.%s' % (self._prefix, skey)] = svalue
            else:
                result['%s.%s' % (self._prefix, key)] = value

        return result
</snippet></ROW><ROW><id>16762625</id><snippet>class InboundShipmentHeader(AmazonDataType):
    fields = {
        'name': 'ShipmentName',
        'address': 'ShipFromAddress',
        'fulfillment_center_id': 'DestinationFulfillmentCenterId',
        'label_preference': 'LabelPrepPreference',
        'cases_required': 'AreCasesRequired',
        'shipment_status': 'ShipmentStatus',
    }

class Address(AmazonDataType):
    fields = {
        'name': 'Name',
        'address': 'AddressLine1',
        'city': 'City'
    }

address = Address(prefix='ShipFromAddress')
address.name = 'Foo'

header = InboundShipmentHeader()
header.name = 'somevalue'
header.address = address
header.fulfillment_center_id = 'somevalue'
header.label_preference = 'somevalue'
header.cases_required = 'somevalue'
header.shipment_status = 'somevalue'
</snippet></ROW><ROW><id>16762625</id><snippet>header.dict()</snippet></ROW><ROW><id>16762625</id><snippet>{'InboundShipmentHeader.AreCasesRequired': 'somevalue',
 'InboundShipmentHeader.DestinationFulfillmentCenterId': 'somevalue',
 'InboundShipmentHeader.LabelPrepPreference': 'somevalue',
 'InboundShipmentHeader.ShipFromAddress.Name': 'Foo',
 'InboundShipmentHeader.ShipmentName': 'somevalue',
 'InboundShipmentHeader.ShipmentStatus': 'somevalue'}
</snippet></ROW><ROW><id>16762673</id><snippet> </snippet></ROW><ROW><id>16762673</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>16762762</id><snippet>[v for i, (j, k) in set_list[:1] for v in k]
</snippet></ROW><ROW><id>16762762</id><snippet>k</snippet></ROW><ROW><id>16762762</id><snippet>set_list</snippet></ROW><ROW><id>16762762</id><snippet>[[v for v in k] for i, (j, k) in set_list[:1]]
</snippet></ROW><ROW><id>16762762</id><snippet>v for v in k</snippet></ROW><ROW><id>16762762</id><snippet>for</snippet></ROW><ROW><id>16762963</id><snippet>oder.customer           = customer.key
</snippet></ROW><ROW><id>16762967</id><snippet>load_company_by_id()</snippet></ROW><ROW><id>16762967</id><snippet>classmethod</snippet></ROW><ROW><id>16762967</id><snippet>@classmethod
def load_company_by_id(cls, id):
    # Class itself is passed as the first argument.
    return cls.query.get(int(id))
</snippet></ROW><ROW><id>16762967</id><snippet>Company.query.get()</snippet></ROW><ROW><id>16762967</id><snippet># Note the route (&lt;int:id&gt; part), not only it makes sure that id is an integer,
# it also returns an int.
@app.route('/company/edit/&lt;int:id&gt;', methods=['GET','POST'])
def company_edit(id):
    company = Company.query.get(id)
    form = CompanyForm(obj=company)
    return render_template('company_form.html', form=form)
</snippet></ROW><ROW><id>16763233</id><snippet>email_entry</snippet></ROW><ROW><id>16763233</id><snippet>class mainWindow(Frame):
        # ...

    def initUI(self):
        # ...

        # note self here
        self.email_entry = Entry(self, exportselection = 0, width = 200).pack()
        # ...

    def send(self):
        # note self here
        body = self.email_entry.get()
        # ...
</snippet></ROW><ROW><id>16763233</id><snippet>email_entry</snippet></ROW><ROW><id>16763233</id><snippet>initUI</snippet></ROW><ROW><id>16763338</id><snippet>self.on_button</snippet></ROW><ROW><id>16763338</id><snippet>button1.clicked.connect(partial(self.on_button, 1))
</snippet></ROW><ROW><id>16763338</id><snippet>button1.clicked.connect(lambda: self.on_button(1))
</snippet></ROW><ROW><id>16763341</id><snippet>int()</snippet></ROW><ROW><id>16763341</id><snippet>&gt;&gt;&gt; value = 10.01
&gt;&gt;&gt; int(round(value))
10
&gt;&gt;&gt; value = 10.55
&gt;&gt;&gt; int(round(value))
11
</snippet></ROW><ROW><id>16763473</id><snippet>fileinput</snippet></ROW><ROW><id>16763473</id><snippet>inplace</snippet></ROW><ROW><id>16763473</id><snippet>import sys
import fileinput

for line in fileinput.input('my_text_file.txt', inplace=True):
    x = process_result(line)
    if x:
        line = line.replace('something', x)

    sys.stdout.write(line)
</snippet></ROW><ROW><id>16763473</id><snippet>inplace</snippet></ROW><ROW><id>16763473</id><snippet>sys.stdout</snippet></ROW><ROW><id>16763492</id><snippet>itertools.izip()</snippet></ROW><ROW><id>16763492</id><snippet>import itertools

reader1 = csv.reader(file1)
reader2 = csv.reader(file2)

for row1, row2 in itertools.izip(reader1, reader2):
    # process row1 and row2 together.
</snippet></ROW><ROW><id>16763492</id><snippet>izip()</snippet></ROW><ROW><id>16763492</id><snippet>zip()</snippet></ROW><ROW><id>16763492</id><snippet>def function_for_list1(inputfilename):
    with open(inputfilename, 'rb') as f:
        reader = csv.reader(f)
        for row in reader:
            # process row
            yield row

def function_for_list2(inputfilename):
    with open(inputfilename, 'rb') as f:
        reader = csv.reader(f)
        for row in reader:
            # process row
            yield row

for row1, row2 in itertools.izip(function_for_list1(somename), function_for_list2(someothername)):
    # process row1 and row2 together
</snippet></ROW><ROW><id>16763511</id><snippet>data={}
ss=((0,19),(20,41),(42,80))
with open('/tmp/p.txt','r') as f:
    for n,line in enumerate(f):
        fields={}
        for i,j in ss:
            field=line[i:j]
            t=field.split(':')
            fields[t[0].strip()]=t[1].strip()
        data[n]=fields    

print data  
</snippet></ROW><ROW><id>16763511</id><snippet>{0: {'comment': 'outstanding', 'field 2': 'first', 'field 1': 'dog'}, 1: {'comment': 'some comment about the cat', 'field 2': '', 'field 1': 'cat'}}
</snippet></ROW><ROW><id>16763511</id><snippet>data=[]
ss=((0,19),(20,41),(42,80))
with open('/tmp/p.txt','r') as f:
    for n,line in enumerate(f):
        fields={}
        for i,j in ss:
            field=line[i:j]
            t=field.split(':')
            fields[t[0].strip()]=t[1].strip()
        data.append(fields)   
</snippet></ROW><ROW><id>16763511</id><snippet>&gt;&gt;&gt; data[0]['comment']
'outstanding'                 
</snippet></ROW><ROW><id>16763536</id><snippet>i</snippet></ROW><ROW><id>16763536</id><snippet>&gt;&gt;&gt; i = 0
&gt;&gt;&gt; x=lambda z = i : c[z]() #assign the current value of `i` to a local variable inside lambda
&gt;&gt;&gt; i+=1
&gt;&gt;&gt; y =lambda z = i : c[z]()
&gt;&gt;&gt; x()
f
&gt;&gt;&gt; y()
g
</snippet></ROW><ROW><id>16763604</id><snippet>import pandas as pd
import datetime as DT

df = pd.DataFrame({
    'Trader': 'Carl Mark Carl Joe Mark Carl Max Max'.split(),
    'Quantity': [5, 2, 5, 10, 1, 5, 2, 1],
    'Date': [
        DT.datetime(2013, 1, 1, 13, 0),
        DT.datetime(2013, 1, 1, 13, 5),
        DT.datetime(2013, 2, 5, 20, 0),
        DT.datetime(2013, 2, 6, 10, 0),
        DT.datetime(2013, 2, 8, 12, 0),
        DT.datetime(2013, 3, 7, 14, 0),
        DT.datetime(2013, 6, 4, 14, 0),
        DT.datetime(2013, 7, 4, 14, 0),
        ]})

df.index = [df.Date, df.Trader]
df2 = df.unstack('Trader').resample('1W', how='mean').fillna(0)
print(pd.ewma(df2, span=7))
</snippet></ROW><ROW><id>16763604</id><snippet>            Quantity                              
Trader          Carl       Joe      Mark       Max
Date                                              
2013-01-06  5.000000  0.000000  2.000000  0.000000
2013-01-13  2.142857  0.000000  0.857143  0.000000
2013-01-20  1.216216  0.000000  0.486486  0.000000
2013-01-27  0.771429  0.000000  0.308571  0.000000
2013-02-03  0.518566  0.000000  0.207426  0.000000
2013-02-10  1.881497  3.041283  0.448470  0.000000
2013-02-17  1.338663  2.163837  0.319081  0.000000
2013-02-24  0.966766  1.562696  0.230437  0.000000
2013-03-03  0.705454  1.140307  0.168151  0.000000
2013-03-10  1.843158  0.838219  0.123605  0.000000
2013-03-17  1.362049  0.619423  0.091341  0.000000
2013-03-24  1.010398  0.459502  0.067759  0.000000
2013-03-31  0.751651  0.341831  0.050407  0.000000
2013-04-07  0.560329  0.254823  0.037576  0.000000
2013-04-14  0.418350  0.190254  0.028055  0.000000
2013-04-21  0.312703  0.142209  0.020970  0.000000
2013-04-28  0.233936  0.106388  0.015688  0.000000
2013-05-05  0.175120  0.079640  0.011744  0.000000
2013-05-12  0.131154  0.059645  0.008795  0.000000
2013-05-19  0.098261  0.044687  0.006590  0.000000
2013-05-26  0.073637  0.033488  0.004938  0.000000
2013-06-02  0.055195  0.025101  0.003701  0.000000
2013-06-09  0.041378  0.018818  0.002775  0.500670
2013-06-16  0.031023  0.014108  0.002080  0.375377
2013-06-23  0.023261  0.010579  0.001560  0.281462
2013-06-30  0.017443  0.007933  0.001170  0.211057
2013-07-07  0.013080  0.005949  0.000877  0.408376
</snippet></ROW><ROW><id>16763604</id><snippet>df2</snippet></ROW><ROW><id>16763604</id><snippet>df3 = pd.ewma(df2, span=7)
df3.columns = pd.MultiIndex.from_tuples([('EWMA', item[1]) for item in df3.columns])
df2 = pd.concat([df2, df3], axis=1) 

print(df2)
</snippet></ROW><ROW><id>16763604</id><snippet>            Quantity                      EWMA                              
Trader          Carl  Joe  Mark  Max      Carl       Joe      Mark       Max
Date                                                                        
2013-01-06         5    0     2    0  5.000000  0.000000  2.000000  0.000000
2013-01-13         0    0     0    0  2.142857  0.000000  0.857143  0.000000
2013-01-20         0    0     0    0  1.216216  0.000000  0.486486  0.000000
2013-01-27         0    0     0    0  0.771429  0.000000  0.308571  0.000000
2013-02-03         0    0     0    0  0.518566  0.000000  0.207426  0.000000
2013-02-10         5   10     1    0  1.881497  3.041283  0.448470  0.000000
2013-02-17         0    0     0    0  1.338663  2.163837  0.319081  0.000000
2013-02-24         0    0     0    0  0.966766  1.562696  0.230437  0.000000
2013-03-03         0    0     0    0  0.705454  1.140307  0.168151  0.000000
2013-03-10         5    0     0    0  1.843158  0.838219  0.123605  0.000000
2013-03-17         0    0     0    0  1.362049  0.619423  0.091341  0.000000
2013-03-24         0    0     0    0  1.010398  0.459502  0.067759  0.000000
2013-03-31         0    0     0    0  0.751651  0.341831  0.050407  0.000000
2013-04-07         0    0     0    0  0.560329  0.254823  0.037576  0.000000
2013-04-14         0    0     0    0  0.418350  0.190254  0.028055  0.000000
2013-04-21         0    0     0    0  0.312703  0.142209  0.020970  0.000000
2013-04-28         0    0     0    0  0.233936  0.106388  0.015688  0.000000
2013-05-05         0    0     0    0  0.175120  0.079640  0.011744  0.000000
2013-05-12         0    0     0    0  0.131154  0.059645  0.008795  0.000000
2013-05-19         0    0     0    0  0.098261  0.044687  0.006590  0.000000
2013-05-26         0    0     0    0  0.073637  0.033488  0.004938  0.000000
2013-06-02         0    0     0    0  0.055195  0.025101  0.003701  0.000000
2013-06-09         0    0     0    2  0.041378  0.018818  0.002775  0.500670
2013-06-16         0    0     0    0  0.031023  0.014108  0.002080  0.375377
2013-06-23         0    0     0    0  0.023261  0.010579  0.001560  0.281462
2013-06-30         0    0     0    0  0.017443  0.007933  0.001170  0.211057
2013-07-07         0    0     0    1  0.013080  0.005949  0.000877  0.408376
</snippet></ROW><ROW><id>16763697</id><snippet>im = x*(256./np.max(x))      
</snippet></ROW><ROW><id>16763993</id><snippet>command=lambda: f(params)
</snippet></ROW><ROW><id>16763993</id><snippet>def make_callback(params):
    def callback():
        print(params)
    return callback
params = 1,2,3
button = tk.Button(master, text='Boink', command=make_callback(params))
</snippet></ROW><ROW><id>16763993</id><snippet>self</snippet></ROW><ROW><id>16763993</id><snippet>import Tkinter as tk
class SimpleApp(object):
    def __init__(self, master, **kwargs):
        self.master = master
        self.params = (1,2,3)
        self.button = tk.Button(master, text='Boink', command=self.boink)
        self.button.pack()
    def boink(self):
        print(self.params)

root = tk.Tk()
app = SimpleApp(root)
root.mainloop()
</snippet></ROW><ROW><id>16764096</id><snippet>import curses, time

def start(stdscr):
    curses.start_color()
    try:
        curses.curs_set(0)
    except curses.error:
        pass
    movement = curses.newpad(10, 10)

    movement.addstr(8, 9, '+')
    movement.addstr(9, 8, '+')
    try:
        movement.addstr(9, 9, '+')
    except curses.error:
        movement.addstr(0, 0, 'CAUGHT')
    movement.refresh(0, 0, 0, 0, 9, 9)
    curses.doupdate()
    time.sleep(1)

if __name__ == '__main__':
    curses.wrapper(start)
</snippet></ROW><ROW><id>16764096</id><snippet>movement.scrollok(True)</snippet></ROW><ROW><id>16764096</id><snippet>refresh</snippet></ROW><ROW><id>16764096</id><snippet>import curses, sys, time

def start(stdscr):
    curses.start_color()
    try:
        curses.curs_set(0)
    except curses.error:
        pass
    movement = curses.newpad(11, 10)

    movement.addstr(8, 9, '+')
    movement.addstr(9, 8, '+')
    text = sys.argv[1] if len(sys.argv) &gt; 1 else '+'
    try:
        movement.addstr(9, 9, text)
        y, x = movement.getyx()
    except curses.error:
        y, x = movement.getyx()
        movement.addstr(0, 0, 'CAUGHT')
    if y &gt;= 10 and x &gt; 0:
        movement.addstr(1, 0, 'toolong')
    movement.refresh(0, 0, 0, 0, 9, 9)
    curses.doupdate()
    time.sleep(1)

if __name__ == '__main__':
    curses.wrapper(start)
</snippet></ROW><ROW><id>16764096</id><snippet>python cursesx.py</snippet></ROW><ROW><id>16764096</id><snippet>python cursesx.py foo</snippet></ROW><ROW><id>16764096</id><snippet>f</snippet></ROW><ROW><id>16764096</id><snippet>toolong</snippet></ROW><ROW><id>16764096</id><snippet>python cursesx.py waytoolongtofit</snippet></ROW><ROW><id>16764096</id><snippet>w</snippet></ROW><ROW><id>16764096</id><snippet>CAUGHT</snippet></ROW><ROW><id>16764096</id><snippet>toolong</snippet></ROW><ROW><id>16764262</id><snippet>menu()</snippet></ROW><ROW><id>16764262</id><snippet>None</snippet></ROW><ROW><id>16764262</id><snippet>&gt;&gt;&gt; def func():pass
&gt;&gt;&gt; print func()  #use `print` only if you want to print the returned value
None
</snippet></ROW><ROW><id>16764262</id><snippet>menu() #no need of print as you're already printing inside the function body.
</snippet></ROW><ROW><id>16764262</id><snippet>sys()</snippet></ROW><ROW><id>16764262</id><snippet>return menu()</snippet></ROW><ROW><id>16764262</id><snippet>add()</snippet></ROW><ROW><id>16764262</id><snippet>sub()</snippet></ROW><ROW><id>16764262</id><snippet>return menu()</snippet></ROW><ROW><id>16764262</id><snippet>menu()</snippet></ROW><ROW><id>16764262</id><snippet>while loop</snippet></ROW><ROW><id>16764262</id><snippet>def sys():
    while True:
        a = input("please choose")
        if a == 1:
            add()    # call add(), no need of print as you're printing inside add() itself
        elif a==2: 
            sub()  
        menu()       # call menu() at the end of the loop
</snippet></ROW><ROW><id>16764262</id><snippet>while loop==2</snippet></ROW><ROW><id>16764262</id><snippet>loop==2</snippet></ROW><ROW><id>16764262</id><snippet>True</snippet></ROW><ROW><id>16764262</id><snippet>while loop</snippet></ROW><ROW><id>16764262</id><snippet>loop</snippet></ROW><ROW><id>16764262</id><snippet>while True</snippet></ROW><ROW><id>16764262</id><snippet>&gt;&gt;&gt; loop = 2
&gt;&gt;&gt; loop == 2
True
</snippet></ROW><ROW><id>16764582</id><snippet>cron(8)</snippet></ROW><ROW><id>16764582</id><snippet>logging</snippet></ROW><ROW><id>16764582</id><snippet>INFO</snippet></ROW><ROW><id>16764582</id><snippet>class NoRunningFilter(logging.Filter):
    def filter(self, record):
        return not record.msg.startswith('Running job')

my_filter = NoRunningFilter()
logging.getLogger("apscheduler.scheduler").addFilter(my_filter)
</snippet></ROW><ROW><id>16764583</id><snippet>&gt;&gt;&gt; strs = '+CMGL: 1,"REC READ","+111111111111","13/05/25,05:15:16+04",25-05-13,05:15:20, 0.668'
&gt;&gt;&gt; ", ".join( x for x in strs.split(",")[5:] )
'25-05-13, 05:15:20,  0.668'
</snippet></ROW><ROW><id>16764583</id><snippet>&gt;&gt;&gt; ", ".join( strs.split(",",5)[-1].split(",") )
'25-05-13, 05:15:20,  0.668'
</snippet></ROW><ROW><id>16764583</id><snippet>&gt;&gt;&gt; strs = """+CMGL: 1,"REC READ","+111111111111","13/05/25,05:15:16+04",25-05-13,05:15:20, 0.668                                              
+CMGL: 2,"REC READ","+111111111111","13/05/25,12:15:14+04",25-05-13,12:15:20, 0.875
+CMGL: 3,"REC READ","+111111111111","13/05/25,10:15:15+04",25-05-13,10:15:20, 0.679"""
&gt;&gt;&gt; 
&gt;&gt;&gt; for line in strs.splitlines():     
...     print ", ".join( line.split(",",5)[-1].split(","))

25-05-13, 05:15:20,  0.668
25-05-13, 12:15:20,  0.875
25-05-13, 10:15:20,  0.679
</snippet></ROW><ROW><id>16764731</id><snippet>pd.Period</snippet></ROW><ROW><id>16764731</id><snippet>date_parser</snippet></ROW><ROW><id>16764731</id><snippet>map</snippet></ROW><ROW><id>16764731</id><snippet>end_time</snippet></ROW><ROW><id>16764731</id><snippet>import pandas as pd

text = '''\
date    val
2013Q2 100
2013Q3 120
'''

filename = '/tmp/data'
with open(filename, 'w') as f:
    f.write(text)
df = pd.read_table(filename, sep='\s+', date_parser=pd.Period, parse_dates=[0])
df['date'] = df['date'].map(lambda x: x.end_time.date())

print(df)
#          date  val
# 0  2013-06-30  100
# 1  2013-09-30  120
</snippet></ROW><ROW><id>16764748</id><snippet>List of &lt;em&gt;Show Name&lt;/em&gt; episodes</snippet></ROW><ROW><id>16764795</id><snippet>db().select(db.tbl_profile.name)</snippet></ROW><ROW><id>16764795</id><snippet>Rows</snippet></ROW><ROW><id>16764795</id><snippet>Row</snippet></ROW><ROW><id>16764795</id><snippet>db().select(db.tbl_profile.name)[0]
</snippet></ROW><ROW><id>16764795</id><snippet>db().select(db.tbl_profile.name).first()
</snippet></ROW><ROW><id>16764795</id><snippet>None</snippet></ROW><ROW><id>16764795</id><snippet>Row</snippet></ROW><ROW><id>16764795</id><snippet>Row</snippet></ROW><ROW><id>16764795</id><snippet>return dict(test=db().select(db.tbl_profile.name).first().name)
</snippet></ROW><ROW><id>16764802</id><snippet>enum</snippet></ROW><ROW><id>16764802</id><snippet>a, b, *_ = thing()
</snippet></ROW><ROW><id>16764802</id><snippet>_</snippet></ROW><ROW><id>16764874</id><snippet>#!/usr/bin/env python3

import os
import sys
import psycopg2
import argparse

db_conn_str = "dbname=regress user=craig"

create_table_stm = """
CREATE TABLE files (
    id serial primary key,
    orig_filename text not null,
    file_data bytea not null
)
"""

def main(argv):
    parser = argparse.ArgumentParser()
    parser_action = parser.add_mutually_exclusive_group(required=True)
    parser_action.add_argument("--store", action='store_const', const=True, help="Load an image from the named file and save it in the DB")
    parser_action.add_argument("--fetch", type=int, help="Fetch an image from the DB and store it in the named file, overwriting it if it exists. Takes the database file identifier as an argument.", metavar='42')
    parser.add_argument("filename", help="Name of file to write to / fetch from")

    args = parser.parse_args(argv[1:])

    conn = psycopg2.connect(db_conn_str)
    curs = conn.cursor()

    # Ensure DB structure is present
    curs.execute("SELECT 1 FROM information_schema.tables WHERE table_schema = %s AND table_name = %s", ('public','files'))
    result = curs.fetchall()
    if len(result) == 0:
        curs.execute(create_table_stm)

    # and run the command
    if args.store:
        # Reads the whole file into memory. If you want to avoid that,
        # use large object storage instead of bytea; see the psycopg2
        # and postgresql documentation.
        f = open(args.filename,'rb')
        curs.execute("INSERT INTO files(id, orig_filename, file_data) VALUES (DEFAULT,%s,%s) RETURNING id", (args.filename, f.read()))
        returned_id = curs.fetchone()[0]
        f.close()
        conn.commit()
        print("Stored {0} into DB record {1}".format(args.filename, returned_id))

    elif args.fetch is not None:
        # Fetches the file from the DB into memory then writes it out.
        # Same as for store, to avoid that use a large object.
        f = open(args.filename,'wb')
        curs.execute("SELECT file_data, orig_filename FROM files WHERE id = %s", (int(args.fetch),))
        (file_data, orig_filename) = curs.fetchone()
        f.write(file_data)
        f.close()
        print("Fetched {0} into file {1}; original filename was {2}".format(args.fetch, args.filename, orig_filename))

    conn.close()

if __name__ == '__main__':
    main(sys.argv)
</snippet></ROW><ROW><id>16764874</id><snippet>buffer</snippet></ROW><ROW><id>16764874</id><snippet>bytea</snippet></ROW><ROW><id>16764874</id><snippet>lo_import</snippet></ROW><ROW><id>16764874</id><snippet>lo_export</snippet></ROW><ROW><id>16764979</id><snippet>ast</snippet></ROW><ROW><id>16764979</id><snippet>import ast
from collections import Counter

tree = ast.parse('''
"""
Author: Nobody
"""

def foo(*args, **kwargs):
    for i in range(10):
        if i != 2**2:
            print(i * 2 * 3 * 2)

def bar():
    pass
''')

counts = Counter(node.__class__ for node in ast.walk(tree))

print('The docstring says:', repr(ast.get_docstring(tree)))
print('You have', counts[ast.Mult], 'multiplication signs.')
print('You have', counts[ast.FunctionDef], 'function definitions.')
print('You have', counts[ast.If], 'if statements.')
</snippet></ROW><ROW><id>16764979</id><snippet>The docstring says: 'Author: Nobody'
You have 3 multiplication signs.
You have 2 function definitions.
You have 1 if statements.
</snippet></ROW><ROW><id>16764982</id><snippet>abstract</snippet></ROW><ROW><id>16764982</id><snippet>class A(BaseParentTask):
    abstract = True
    def run(self, a, b, c, d):
        pass
</snippet></ROW><ROW><id>16764982</id><snippet>@celery.task</snippet></ROW><ROW><id>16765261</id><snippet>INSERT ... ON DUPLICATE KEY UPDATE</snippet></ROW><ROW><id>16765261</id><snippet>INSERT INTO table (`a`, `b`, `c`) 
VALUES (1, 2, 3)
    ON DUPLICATE KEY UPDATE `c` = `c` + 1;
</snippet></ROW><ROW><id>16765261</id><snippet>camp_id = %s</snippet></ROW><ROW><id>16765261</id><snippet>camp_id = VALUES(%s)</snippet></ROW><ROW><id>16765261</id><snippet>INSERT INTO `pb_ya_camps` (`camp_id`, `camp_name`) 
VALUES (%s,%s) 
    ON DUPLICATE KEY UPDATE `camp_id` = VALUES(%s), `camp_name` = VALUES(%s)
</snippet></ROW><ROW><id>16765293</id><snippet>
return s.count('cat') == s.count('dog')
</snippet></ROW><ROW><id>16765862</id><snippet>subprocess.call([sys.executable, "manage.py", "celeryd"])
</snippet></ROW><ROW><id>16766121</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>16766121</id><snippet>names=True</snippet></ROW><ROW><id>16766121</id><snippet>&gt;&gt;&gt; s = """# a, b, c
... 0.1 0 0
... 0.2 0.4 0.5
... 4 5 0.9
... 0.3 0 10
... """
&gt;&gt;&gt; data = np.genfromtxt(StringIO(s),names=True)
&gt;&gt;&gt; data['a']
array([ 0.1,  0.2,  4. ,  0.3])
&gt;&gt;&gt; data['b']
array([ 0. ,  0.4,  5. ,  0. ])
&gt;&gt;&gt; data['c']
array([  0. ,   0.5,   0.9,  10. ])
</snippet></ROW><ROW><id>16766287</id><snippet>stdscr.refresh()
</snippet></ROW><ROW><id>16766287</id><snippet>pad.refresh()</snippet></ROW><ROW><id>16766287</id><snippet>start()</snippet></ROW><ROW><id>16766287</id><snippet>stdscr</snippet></ROW><ROW><id>16766287</id><snippet>def start(stdscr):
    stdscr.refresh()
    curses.curs_set(0)
    …
</snippet></ROW><ROW><id>16766413</id><snippet>class Parser():

    def __init__(self, uri):
        self.uri = uri
        self.soup = self.createSoup()

    def createSoup(self):
        htmlPage = urlopen(self.uri)
        htmlText = htmlPage.read()
        return BeautifulSoup(htmlText)
</snippet></ROW><ROW><id>16766545</id><snippet>Feed</snippet></ROW><ROW><id>16766545</id><snippet>Feed</snippet></ROW><ROW><id>16766545</id><snippet>dict</snippet></ROW><ROW><id>16766545</id><snippet>dict</snippet></ROW><ROW><id>16766545</id><snippet>dict</snippet></ROW><ROW><id>16766545</id><snippet>lambda</snippet></ROW><ROW><id>16766545</id><snippet>msg.Feed = lambda: {"A": 1}
</snippet></ROW><ROW><id>16766750</id><snippet>strptime and strftime</snippet></ROW><ROW><id>16766750</id><snippet>datetime</snippet></ROW><ROW><id>16766750</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%A')
'Monday'
</snippet></ROW><ROW><id>16766750</id><snippet>'Mon'</snippet></ROW><ROW><id>16766750</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')
'Mon'
</snippet></ROW><ROW><id>16767046</id><snippet>django-mothertongue</snippet></ROW><ROW><id>16767046</id><snippet>django-i18</snippet></ROW><ROW><id>16767656</id><snippet>most_common([n])</snippet></ROW><ROW><id>16767656</id><snippet>&gt;&gt;&gt; Counter('abracadabra').most_common(3)
[('a', 5), ('r', 2), ('b', 2)]
</snippet></ROW><ROW><id>16767656</id><snippet>from collections import Counter
c = Counter(most_used_words)
msg = "Here is your breakdown of your most used words:\n\nWords | Times Used\n:--:|:--:\n"
msg += '\n'.join('%s|%s' % (k.capitalize(), v) for (k, v) in c.most_common(10))
r.send_message(user, 'Most Used Words', msg)
</snippet></ROW><ROW><id>16768403</id><snippet>import string as st

trans = st.maketrans(st.punctuation, ' '*len(st.punctuation))
with open('question5.txt', 'r') as f:
    for line in f:
        print line.translate(trans)
</snippet></ROW><ROW><id>16768514</id><snippet>str()</snippet></ROW><ROW><id>16768514</id><snippet>toString()</snippet></ROW><ROW><id>16768514</id><snippet>__str__()</snippet></ROW><ROW><id>16768514</id><snippet>UserProperty</snippet></ROW><ROW><id>16768514</id><snippet>users.User</snippet></ROW><ROW><id>16768514</id><snippet>nickname</snippet></ROW><ROW><id>16768514</id><snippet>todo.author.nickname</snippet></ROW><ROW><id>16768668</id><snippet>mydict = {'spam': "Hello, world!"}
mydict['eggs'] = "Good-bye!"
variable_name = 'spam'
print mydict[variable_name]  # ==&gt; Hello, world!
mydict[variable_name] = "some new value"
print mydict['spam']  # ==&gt; some new value
print mydict['eggs']  # ==&gt; "Good-bye!"
</snippet></ROW><ROW><id>16768673</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>16768673</id><snippet>subprocess.call</snippet></ROW><ROW><id>16768673</id><snippet>log = subprocess.check_call(["program_name", "arguments"])
...   # use log
</snippet></ROW><ROW><id>16768673</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>16768673</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>16768673</id><snippet>stdout</snippet></ROW><ROW><id>16768673</id><snippet>p = subprocess.Popen(["program_name", "arguments"], stdout=subprocess.PIPE)
log = subprocess.stdout.read()
...   # use log
</snippet></ROW><ROW><id>16768673</id><snippet>QProcess</snippet></ROW><ROW><id>16769010</id><snippet>print ('\"',the_tuple[1],'\"', sep='')
                               ^^^^^^
</snippet></ROW><ROW><id>16769010</id><snippet>print ('"', the_tuple[1], '"', sep='')
</snippet></ROW><ROW><id>16769010</id><snippet>print ('"{}"'.format(the_tuple[1]))
</snippet></ROW><ROW><id>16769145</id><snippet>def mul(self,e,f):
    ret = matrix()
    ret.a=(e.a*f.a)+(e.b*f.c)
    ret.b=(e.a*f.b)+(e.b*f.d)
    ret.c=(e.c*f.a)+(e.d*f.c)
    ret.d=(e.c*f.b)+(e.d*f.d)
    return ret
</snippet></ROW><ROW><id>16769145</id><snippet>return s.d</snippet></ROW><ROW><id>16769145</id><snippet>s.b</snippet></ROW><ROW><id>16769145</id><snippet>s.c</snippet></ROW><ROW><id>16769145</id><snippet>temp.a=temp.b=temp.c=temp.d=1</snippet></ROW><ROW><id>16769145</id><snippet>d</snippet></ROW><ROW><id>16769145</id><snippet>0</snippet></ROW><ROW><id>16769145</id><snippet>mul</snippet></ROW><ROW><id>16769145</id><snippet>exp</snippet></ROW><ROW><id>16769145</id><snippet>self</snippet></ROW><ROW><id>16769145</id><snippet>@staticmethod</snippet></ROW><ROW><id>16769145</id><snippet>    return matrix.mul(a,matrix.exp(a, p-1))
</snippet></ROW><ROW><id>16769208</id><snippet>int</snippet></ROW><ROW><id>16769208</id><snippet>included = {'d{:03d}'.format(i) for i in range(15, 26)}  # a set

binary = sorted(f for f in glob.glob('C:/Users/Desktop/bin/*.bin') if f[21:25] in included) 
</snippet></ROW><ROW><id>16769208</id><snippet>'d015'</snippet></ROW><ROW><id>16769208</id><snippet>'d025'</snippet></ROW><ROW><id>16769208</id><snippet>glob()</snippet></ROW><ROW><id>16769208</id><snippet>pattern = 'C:/Users/Desktop/bin/*.bin'
included = {'d{:03d}'.format(i) for i in range(15, 26)}  # a set
offset = len(os.path.dirname(pattern)) + 1

binary = sorted(f for f in glob.glob(pattern) if f[offset:offset + 4] in included) 
</snippet></ROW><ROW><id>16769208</id><snippet>$ mkdir test
$ touch test/d014-recomb.bin
$ touch test/d015-recomb.bin
$ touch test/d017-recomb.bin
$ touch test/d018-recomb.bin
$ fg
bin/python2.7
&gt;&gt;&gt; import os, glob
&gt;&gt;&gt; pattern = '/tmp/stackoverflow/test/*.bin'
&gt;&gt;&gt; included = {'d{:03d}'.format(i) for i in range(15, 26)}  # a set
&gt;&gt;&gt; offset = len(os.path.dirname(pattern)) + 1
&gt;&gt;&gt; sorted(f for f in glob.glob(pattern) if f[offset:offset + 4] in included)
['/tmp/stackoverflow/test/d015-recomb.bin', '/tmp/stackoverflow/test/d017-recomb.bin', '/tmp/stackoverflow/test/d018-recomb.bin']
</snippet></ROW><ROW><id>16769296</id><snippet>pip</snippet></ROW><ROW><id>16769296</id><snippet>pip</snippet></ROW><ROW><id>16769296</id><snippet>pip install python</snippet></ROW><ROW><id>16769633</id><snippet>def first_saturday(year):
     candidate = dt.datetime(year, 1, 4)
     day = dt.timedelta(days=1)
     while candidate.weekday() != 6:
         candidate += day
     return candidate
</snippet></ROW><ROW><id>16769633</id><snippet>datecount</snippet></ROW><ROW><id>16769633</id><snippet>itertools.count</snippet></ROW><ROW><id>16769633</id><snippet>first_saturday = next(day for day in 
   datecount(datetime(year, 1, 4), timedelta(days=1)) 
   if day.weekday() == 6)
</snippet></ROW><ROW><id>16769633</id><snippet>(arbitrary_day - first_sunday) // timedelta(days=7)
</snippet></ROW><ROW><id>16769633</id><snippet>first_sunday(year) &lt;= arbitrary_date</snippet></ROW><ROW><id>16769836</id><snippet>from random import randrange

def choose(colors, numselections, maxrun):
    'Repeatedly choose colors.  Gradually reduce selection probability to avoid runs.'
    colors = list(colors)
    n = len(colors)
    total = n * maxrun
    current_run = 0
    for _ in range(numselections):
        i = randrange(total - current_run) // maxrun
        yield colors[i]
        colors[i], colors[-1] = colors[-1], colors[i]
        current_run = current_run + 1 if i==n-1 else 1

if __name__ == '__main__':
    colors = ['red', 'blue', 'green', 'yellow']
    for color in choose(colors, 100, maxrun=4):
        print color
</snippet></ROW><ROW><id>16769938</id><snippet>namedtuple</snippet></ROW><ROW><id>16769938</id><snippet>with open(filename, 'rb') as h:
    data = csv.reader(h)
    headers = next(data)
    RowTuple = namedtuple('RowTuple', headers)
    for row in data:
        row = RowTuple(row)
</snippet></ROW><ROW><id>16769938</id><snippet>DictReader()</snippet></ROW><ROW><id>16769938</id><snippet>DictReader()</snippet></ROW><ROW><id>16769938</id><snippet>dict(zip(self.fieldnames, row))</snippet></ROW><ROW><id>16769938</id><snippet>dict</snippet></ROW><ROW><id>16769938</id><snippet>namedtuple</snippet></ROW><ROW><id>16769938</id><snippet>__slots__</snippet></ROW><ROW><id>16770228</id><snippet>In [9]: df.set_index(['Start', 'Trader', 'Product'])
Out[9]: 
                                    Quantity
Start               Trader Product          
2013-01-01 09:00:00 Carl   A               5
2013-01-01 08:05:00 Mark   A               2
2013-02-05 14:00:00 Carl   A               5
2013-02-05 16:00:00 Joe    A              10
2013-02-08 20:00:00 Joe    B               1
2013-02-08 16:50:00 Carl   B               5
2013-02-08 07:00:00 Joe    A               2
2013-07-04 08:00:00 Carl   A               3
</snippet></ROW><ROW><id>16770353</id><snippet>os_list = ['osxx', 'centos', 'windowsx']    
df.rename(columns=lambda x: x+'x' if x in os_list else x)
</snippet></ROW><ROW><id>16770371</id><snippet>.communicate()</snippet></ROW><ROW><id>16770371</id><snippet>raw_input()</snippet></ROW><ROW><id>16770371</id><snippet>p.stdout.read()</snippet></ROW><ROW><id>16770371</id><snippet>raw_input()</snippet></ROW><ROW><id>16770371</id><snippet>from subprocess import PIPE, Popen

p = Popen(["python", "-u", "1st.py"], stdin=PIPE, stdout=PIPE, bufsize=1)
print p.stdout.readline(), # read the first line
for i in range(10): # repeat several times to show that it works
    print &gt;&gt;p.stdin, i # write input
    p.stdin.flush() # not necessary in this case
    print p.stdout.readline(), # read output

print p.communicate("n\n")[0], # signal the child to exit,
                               # read the rest of the output, 
                               # wait for the child to exit
</snippet></ROW><ROW><id>16770371</id><snippet>bufsize=1</snippet></ROW><ROW><id>16770463</id><snippet>&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; d = datetime.strptime('2013-05-27', '%Y-%m-%d') # Monday
&gt;&gt;&gt; t = timedelta((12 - d.weekday()) % 7)
&gt;&gt;&gt; d + t
datetime.datetime(2013, 6, 1, 0, 0)
&gt;&gt;&gt; (d + t).strftime('%Y-%m-%d')
'2013-06-01'
</snippet></ROW><ROW><id>16770463</id><snippet>(12 - d.weekday()) % 7</snippet></ROW><ROW><id>16770463</id><snippet>weekday</snippet></ROW><ROW><id>16770463</id><snippet>12 - d.weekday()</snippet></ROW><ROW><id>16770463</id><snippet>5 - d.weekday()</snippet></ROW><ROW><id>16770463</id><snippet>&gt;&gt;&gt; def get_next_weekday(startdate, weekday):
    """
    @startdate: given date, in format '2013-05-25'
    @weekday: week day as a integer, between 0 (Monday) to 6 (Sunday)
    """
    d = datetime.strptime(startdate, '%Y-%m-%d')
    t = timedelta((7 + weekday - d.weekday()) % 7)
    return (d + t).strftime('%Y-%m-%d')

&gt;&gt;&gt; get_next_weekday('2013-05-27', 5) # 5 = Saturday
'2013-06-01'
</snippet></ROW><ROW><id>16770556</id><snippet>import numpy
from StringIO import StringIO

a = StringIO("""family\tid\tmum\tdad\trs1\trs2\trs3\trs4\trs5\trs6\trs7\trs8\trs9\trs10\trs11\trs12
1\t1\t4\t6\tA T\tA A\tT T\tC C\tG G\tA T\tA G\tA A\tG A\tT A\tG G\tC C 
2\t2\t7\t9\tT A\tG A\tC T\tC T\tG A\tT T\tA A\tA C\tG G\tT A\tC C\tC T 
3\t3\t2\t8\tT T\tG G\tC T\tC T\tG G\tA T\tA G\tA C\tG G\tT T\tC C\tC C 
4\t4\t5\t1\tA A\tA A\tT T\tC C\tG A\tT T\tA A\tA A\tG A\tT A\tG C\tC T""")

dt = 'int,int,int,int,S3,S3,S3,S3,S3,S3,S3,S3,S3,S3,S3,S3'
A = numpy.genfromtxt(a, delimiter='\t', names=True, dtype=dt)
</snippet></ROW><ROW><id>16770556</id><snippet>b = StringIO("""1\trs1\t2345
1\trs5\t2346
2\trs6\t2348
4\trs8\t2351
4\trs12\t2360
3\trs2\t2456
2\trs3\t2453
3\trs10\t5672
1\trs9\t78923
5\trs7\t5738
2\trs4\t3546
6\trs11\t6354""")

B = numpy.genfromtxt(b, usecols=[1], dtype='S10')
</snippet></ROW><ROW><id>16770556</id><snippet>rs</snippet></ROW><ROW><id>16770556</id><snippet>B</snippet></ROW><ROW><id>16770556</id><snippet>A[B]</snippet></ROW><ROW><id>16770556</id><snippet>A[['family','id','mum','dad']+list(B)]
</snippet></ROW><ROW><id>16770556</id><snippet>cols = ['family','id','mum','dad']+list(B)
result = A[cols]

for line in [cols]+list(result):
  print '\t'.join([str(col) for col in line])
</snippet></ROW><ROW><id>16770621</id><snippet>UPDATE scrapedDataTable  SET productDesc='', 
                            moreProductImages='full/545521_1363869251%20copy-500x500.jpg,full/545521_1363869251%20copy-275x275.jpg,full/545522_1363869309%20copy-500x500.jpg,full/545522_1363869309%20copy-74x74.jpg, ',productCategory='Clothing', 
                            productSubCategory='NA'  WHERE Server='http://1click1call.com/Jeans-Shirts-Tshirts-Trousers/W-for-Woman-Kurta-54552'
</snippet></ROW><ROW><id>16770621</id><snippet>cursor.execute("UPDATE scrapedDataTable  SET productDesc='%s',moreProductImages='%s', ,productCategory='%s', productSubCategory='%s'  WHERE productURL='%s'" %(productDesc,image_paths,productCategory,productSubCategory,productURL))
</snippet></ROW><ROW><id>16770633</id><snippet>with open('filename') as f:

   def lineValue(line):
     parts = line.split('\t')
     return float(parts[5]) * float(parts[6])

   def lineKey(line):
     parts = line.split('\t')
     return parts[0]

   for match, lines in groupby(
       line for line in f if "Fam" in line and "TK" in line,
       lineKey):
     yield sum(lineValue(line) for line in lines)
</snippet></ROW><ROW><id>16770633</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>16770633</id><snippet>defaultdict</snippet></ROW><ROW><id>16770633</id><snippet>result = defaultdict(float)
with open('filename') as f:

   def lineValue(line):
     parts = line.split('\t')
     return float(parts[5]) * float(parts[6])

   def lineKey(line):
     parts = line.split('\t')
     return parts[0]

   for line in f:
     if "Fam" in line and "TK" in line:
       result[lineKey(line)] += lineValue(line)
</snippet></ROW><ROW><id>16770778</id><snippet>def median(li):
    if not len(li)%2:
        i = (((len(li)/2) + (len(li)/2 + 1)) / 2)
        return i, li[i]
    else:
        return i, li[len(li)/2 - 1]

def binarysearch(target, tosearch):    
    while True:
        idx, med = median(tosearch)
        if med == target:
            return True
        elif med &lt; target:
            tosearch = tosearch[idx:]
        elif med &gt; target:
            tosearch = tosearch[:idx]

l = [1, 3, 5, 60, 72, 83, 120, 180]
print binarysearch(5, l)
</snippet></ROW><ROW><id>16770778</id><snippet>&gt;&gt;&gt;
True
</snippet></ROW><ROW><id>16770904</id><snippet>zorder</snippet></ROW><ROW><id>16770904</id><snippet>zorder</snippet></ROW><ROW><id>16770904</id><snippet>errorbar</snippet></ROW><ROW><id>16770904</id><snippet>zorder=2</snippet></ROW><ROW><id>16770904</id><snippet>scatter</snippet></ROW><ROW><id>16770904</id><snippet>zorder=1</snippet></ROW><ROW><id>16770904</id><snippet>errorbar</snippet></ROW><ROW><id>16770904</id><snippet>zorder=99</snippet></ROW><ROW><id>16770904</id><snippet>scatter</snippet></ROW><ROW><id>16770904</id><snippet>zorder=100</snippet></ROW><ROW><id>16770904</id><snippet>plot</snippet></ROW><ROW><id>16770904</id><snippet>zorder=101</snippet></ROW><ROW><id>16770904</id><snippet>legend</snippet></ROW><ROW><id>16770904</id><snippet>zorder</snippet></ROW><ROW><id>16770904</id><snippet>P.legend(loc="center").set_zorder(102)</snippet></ROW><ROW><id>16770904</id><snippet>zorder</snippet></ROW><ROW><id>16770991</id><snippet>from suds import null

Int1 = client.factory.create('ns2:IntersectingRoad')
Int1.RoadName = null()
Int1.RoadType = null()
</snippet></ROW><ROW><id>16771152</id><snippet>print()</snippet></ROW><ROW><id>16771152</id><snippet>ls</snippet></ROW><ROW><id>16771152</id><snippet>\n</snippet></ROW><ROW><id>16771152</id><snippet>print(out.decode('utf8'))
</snippet></ROW><ROW><id>16771165</id><snippet>l</snippet></ROW><ROW><id>16771165</id><snippet>l[0].update(new_dict)</snippet></ROW><ROW><id>16771165</id><snippet>l = [{u'123456': {'name': "Bill"}}]
l[0].update({u'234567': {'name': "Dave"}})
print(l)
</snippet></ROW><ROW><id>16771165</id><snippet>[
    {
       u'123456': {'name': 'Bill'}, 
       u'234567': {'name': 'Dave'}
    }
]
</snippet></ROW><ROW><id>16771487</id><snippet>main()</snippet></ROW><ROW><id>16771487</id><snippet>def main():
    condition = True
    if condition:
        do_stuff()

def do_stuff():
    it_worked = True

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16771487</id><snippet>if..main</snippet></ROW><ROW><id>16771487</id><snippet>main()</snippet></ROW><ROW><id>16771487</id><snippet>main()</snippet></ROW><ROW><id>16771551</id><snippet>The current production versions are 2.7.5 and 3.3.2.</snippet></ROW><ROW><id>16771553</id><snippet>built_database = env.Command(target, sources, 
                             Action('mySqlite3', 'Generating $TARGET with sqlite3'))
</snippet></ROW><ROW><id>16771553</id><snippet>env['SQLITE3COMSTR'] = 'Generating $TARGET from $SOURCES with sqlite3'
...
built_database = env.Command(target, sources, Action('mySqlite3', '$SQLITE3COMSTR'))
</snippet></ROW><ROW><id>16771564</id><snippet>import praw
print praw.__path__
</snippet></ROW><ROW><id>16771564</id><snippet>/usr/local/lib/python2.7/dist-packages/praw</snippet></ROW><ROW><id>16771564</id><snippet>praw.ini</snippet></ROW><ROW><id>16771564</id><snippet>$ l /usr/local/lib/python2.7/dist-packages/praw/praw.ini
-rw-rw-r-- 1 staff 2380 May 27 12:55 /usr/local/lib/python2.7/dist-packages/praw/praw.ini
</snippet></ROW><ROW><id>16771687</id><snippet>username = "domain\\user"
connection_string = "DRIVER={FreeTDS};SERVER=xxxx;PORT=xx;DATABASE=xxxx;UID=%s;PWD=xxx;CHARSET=UTF8;TDS_Version=8.0" % username
</snippet></ROW><ROW><id>16772347</id><snippet>finally</snippet></ROW><ROW><id>16772347</id><snippet>def run(self):
    while True:
        #grabs host from queue
        host = self.queue.get()

        #grabs urls of hosts and prints first 1024 bytes of page
        try:
            url = urllib2.urlopen(host)
            print "connected"
        except urllib2.URLError:
            print "couldn't connect to %s" % host

        finally:
            #signals to queue job is done
            self.queue.task_done()
</snippet></ROW><ROW><id>16772373</id><snippet>X = 1
if var =='with_flag':
    ws.write(0, X, 'Country Flag')
    X += 1
ws.write(0, X, 'Country Name')
</snippet></ROW><ROW><id>16772452</id><snippet>QAbstractTablemodel</snippet></ROW><ROW><id>16772452</id><snippet>QDataWidgetmapper.revert()</snippet></ROW><ROW><id>16772452</id><snippet>QDataWidgetmapper.submit()</snippet></ROW><ROW><id>16772452</id><snippet>QDataWidgetmapper.submitPolicy</snippet></ROW><ROW><id>16772492</id><snippet>&gt;&gt;&gt; statements = """
... DROP TABLE IF EXISTS `tableA`;
...
... CREATE TABLE `tableA`(
... some_code
... ) ENGINE=MyISAM DEFAULT CHARSET=latin1;
...
... DROP TABLE IF EXISTS `tableB`;
...
... CREATE TABLE `tableB`(
... some_code
... ) ENGINE=MyISAM DEFAULT CHARSET=latin1;
...
... DROP TABLE IF EXISTS `tableC`;
...
... CREATE TABLE `tableC`(
... some_code
... ) ENGINE=MyISAM DEFAULT CHARSET=latin1;
... """
&gt;&gt;&gt; regex = r"((?:CREATE|DROP) TABLE (?:IF (?:NOT )?EXISTS )?`tableB`(?:[^;]|(?:'.*?'))*;)"
&gt;&gt;&gt; re.findall(regex, statements, re.I)
['DROP TABLE IF EXISTS `tableB`;', 'CREATE TABLE `tableB`(\nsome_code\n) ENGINE=MyISAM DEFAULT CHARSET=latin1;']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16772492</id><snippet>`(?:[^;]|(?:'.*?'))*`
</snippet></ROW><ROW><id>16772492</id><snippet>;</snippet></ROW><ROW><id>16772492</id><snippet>;</snippet></ROW><ROW><id>16772492</id><snippet>'this is a ;value; for a varchar field'</snippet></ROW><ROW><id>16772520</id><snippet>sockets</snippet></ROW><ROW><id>16772520</id><snippet>contextlib.contextmanager</snippet></ROW><ROW><id>16772520</id><snippet>from contextlib import contextmanager

@contextmanager
def socketcontext(*args, **kw):
    s = socket(*args, **kw)
    yield s
    s.close()

with socketcontext(socket.AF_INET, socket.SOCK_DGRAM) as s:
</snippet></ROW><ROW><id>16772520</id><snippet>contextlib.closing()</snippet></ROW><ROW><id>16772520</id><snippet>from contextlib import closing

with closing(socket(socket.AF_INET, socket.SOCK_DGRAM)) as s:
</snippet></ROW><ROW><id>16772520</id><snippet>contextmanager()</snippet></ROW><ROW><id>16772520</id><snippet>socket()</snippet></ROW><ROW><id>16772520</id><snippet>socket</snippet></ROW><ROW><id>16772520</id><snippet>__enter__</snippet></ROW><ROW><id>16772520</id><snippet>__exit__</snippet></ROW><ROW><id>16772553</id><snippet>QTreeWidgetItem</snippet></ROW><ROW><id>16772553</id><snippet>tree = your_qtreewidget  # replace every 'tree' with your QTreeWidget
strings = list_of_strings
l = []  # list of QTreeWidgetItem to add
for i in strings:
    l.append(QTreeWidgetItem(i))  # create QTreeWidgetItem's and append them
tree.addTopLevelItems(l)  # add everything to the tree
</snippet></ROW><ROW><id>16772701</id><snippet>    # Set query options
    options = search.QueryOptions(
        number_found_accuracy=2000
     )
</snippet></ROW><ROW><id>16772909</id><snippet>In [2]: df2 = DataFrame({'ISO':['DE','CH','AT','FR','US'],
   ...:                  'Country': ['Germany','Switzerland','Austria','France','United States']},
   ...:                  columns=['ISO', 'Country'])

In [3]: df2
Out[3]:
  ISO        Country
0  DE        Germany
1  CH    Switzerland
2  AT        Austria
3  FR         France
4  US  United States
</snippet></ROW><ROW><id>16773276</id><snippet>a = 10</snippet></ROW><ROW><id>16773276</id><snippet>a = 1</snippet></ROW><ROW><id>16773276</id><snippet>1</snippet></ROW><ROW><id>16773276</id><snippet>0</snippet></ROW><ROW><id>16773276</id><snippet>10</snippet></ROW><ROW><id>16773276</id><snippet>42</snippet></ROW><ROW><id>16773381</id><snippet>.py</snippet></ROW><ROW><id>16773381</id><snippet>.pyc</snippet></ROW><ROW><id>16773381</id><snippet>code = load(path)
if path.endswith(".py"):
    code = compile(code)
run(code)
</snippet></ROW><ROW><id>16773492</id><snippet>.process()</snippet></ROW><ROW><id>16773492</id><snippet>form1 = SQLFORM.factory(Field('cards',
    requires=IS_IN_DB(db, 'tbl_card.id', '%(name)s')))
form1.process(formname='form1')
</snippet></ROW><ROW><id>16773492</id><snippet>LOAD()</snippet></ROW><ROW><id>16773492</id><snippet>{{=LOAD('default', 'myform1', ajax=True)}}
</snippet></ROW><ROW><id>16773758</id><snippet>with open("input.txt") as input, open("output.txt", "w") as output:
    for line in input:
        if line.startswith("pqr="):
            output.write("pqr=xyz\n")
        else:
            output.write(line)
</snippet></ROW><ROW><id>16773765</id><snippet>self.inLink = False</snippet></ROW><ROW><id>16773765</id><snippet>handle_starttag</snippet></ROW><ROW><id>16773765</id><snippet>from HTMLParser import HTMLParser


class AllLanguages(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.inLink = False
        self.dataArray = []
        self.countLanguages = 0
        self.lasttag = None
        self.lastname = None
        self.lastvalue = None

    def handle_starttag(self, tag, attrs):
        self.inLink = False
        if tag == 'a':
            for name, value in attrs:
                if name == 'class' and value == 'Vocabulary':
                    self.countLanguages += 1
                    self.inLink = True
                    self.lasttag = tag

    def handle_endtag(self, tag):
        if tag == "a":
            self.inlink = False

    def handle_data(self, data):
        if self.lasttag == 'a' and self.inLink and data.strip():
            print data


parser = AllLanguages()
parser.feed("""
&lt;html&gt;
&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;a href="http://wold.livingsources.org/vocabulary/1" title="Swahili" class="Vocabulary"&gt;Swahili&lt;/a&gt;
&lt;a href="http://wold.livingsources.org/contributor#schadebergthilo" title="Thilo Schadeberg" class="Contributor"&gt;Thilo Schadeberg&lt;/a&gt;
&lt;a href="http://wold.livingsources.org/vocabulary/2" title="English" class="Vocabulary"&gt;English&lt;/a&gt;
&lt;a href="http://wold.livingsources.org/vocabulary/2" title="Russian" class="Vocabulary"&gt;Russian&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;""")
</snippet></ROW><ROW><id>16773765</id><snippet>Swahili
English
Russian
</snippet></ROW><ROW><id>16773792</id><snippet>,</snippet></ROW><ROW><id>16773792</id><snippet>Thread</snippet></ROW><ROW><id>16773792</id><snippet>(5)</snippet></ROW><ROW><id>16773792</id><snippet>5</snippet></ROW><ROW><id>16773792</id><snippet>(5,)</snippet></ROW><ROW><id>16773792</id><snippet>5</snippet></ROW><ROW><id>16773792</id><snippet>args=(outage)</snippet></ROW><ROW><id>16773792</id><snippet>args=(outage,)</snippet></ROW><ROW><id>16773821</id><snippet>In [1]: 'INSERT INTO INDICATORS(INDICATORNAME, \
            , INDICATORCODE)' \
            'VALUES(%s, %s)'
Out[1]: 'INSERT INTO INDICATORS(INDICATORNAME,             , INDICATORCODE)VALUES(%s, %s)'
</snippet></ROW><ROW><id>16773821</id><snippet>INDICATORNAME</snippet></ROW><ROW><id>16773821</id><snippet>cursor.execute('''INSERT INTO INDICATORS (INDICATORNAME, INDICATORCODE)
                  VALUES (%s, %s)''', row)
</snippet></ROW><ROW><id>16773821</id><snippet>insert_indicators = '''INSERT INTO INDICATORS (INDICATORNAME, INDICATORCODE)
                       VALUES (%s, %s)'''
insert_foo = 'INSERT INTO FOO (...) VALUES (%s)' % (','.join(['%s']*10))
insert_bar = 'INSERT INTO BAR (...) VALUES (%s)' % (','.join(['%s']*10))

for row in csv_data:
    cursor.execute(insert_indicators, row[:2])
    cursor.execute(insert_foo, row[2:12])
    cursor.execute(insert_bar, row[12:22])
</snippet></ROW><ROW><id>16774152</id><snippet>import tkinter as tk

root = tk.Tk()
root.title("Radio Button Example")    
button = tk.Radiobutton(root)  # Make a radio button
button.pack()  # Pack it to the screen
button.select()  #This is the bit that makes it checked
root.mainloop()
</snippet></ROW><ROW><id>16774198</id><snippet>r"(?&lt;![-.])\b[0-9]+\b(?!\.[0-9])"
</snippet></ROW><ROW><id>16774198</id><snippet>(?&lt;![-.])   # Assert that the previous character isn't a minus sign or a dot.
\b          # Anchor the match to the start of a number.
[0-9]+      # Match a number.
\b          # Anchor the match to the end of the number.
(?!\.[0-9]) # Assert that no decimal part follows.
</snippet></ROW><ROW><id>16774198</id><snippet>r"[+-]?(?&lt;!\.)\b[0-9]+\b(?!\.[0-9])"
</snippet></ROW><ROW><id>16774198</id><snippet>\b</snippet></ROW><ROW><id>16774289</id><snippet>help(plt.plot)</snippet></ROW><ROW><id>16774289</id><snippet>  markersize or ms: float         
</snippet></ROW><ROW><id>16774289</id><snippet>plt.plot</snippet></ROW><ROW><id>16774289</id><snippet>plt.scatter</snippet></ROW><ROW><id>16774289</id><snippet>ax1.scatter(data[0], data[1], marker='o', c='b', s=data[2], label='the data')
</snippet></ROW><ROW><id>16774289</id><snippet>plt.plot</snippet></ROW><ROW><id>16774289</id><snippet>markersize</snippet></ROW><ROW><id>16774471</id><snippet>import sched
import time

def print_something(x):
    print(x)

s = sched.scheduler()

s.enter(1, 0, print_something, ['first'])
s.enter(2, 0, print_something, ['second'])
s.run()
</snippet></ROW><ROW><id>16774471</id><snippet>import sched
import time

def print_something(x):
    print(x)

def busy_wait(target):
    while time.monotonic() &lt; target:
        pass

s = sched.scheduler(delayfunc=busy_wait)

s.enter(1, 0, print_something, ['first'])
s.enter(2, 0, print_something, ['second'])
s.run()
</snippet></ROW><ROW><id>16774601</id><snippet>&gt;&gt;&gt; firstList = ['a','b','c']
&gt;&gt;&gt; secondList = [1,2,3,4]
&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; list(product(firstList, secondList))
[('a', 1), ('a', 2), ('a', 3), ('a', 4), ('b', 1), ('b', 2), ('b', 3), ('b', 4), ('c', 1), ('c', 2), ('c', 3), ('c', 4)]
</snippet></ROW><ROW><id>16774601</id><snippet>&gt;&gt;&gt; [(i, j) for i in firstList for j in secondList]
[('a', 1), ('a', 2), ('a', 3), ('a', 4), ('b', 1), ('b', 2), ('b', 3), ('b', 4), ('c', 1), ('c', 2), ('c', 3), ('c', 4)]
</snippet></ROW><ROW><id>16774724</id><snippet>result = longSentence.parseString(text.lower()).asXML()
</snippet></ROW><ROW><id>16774762</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.random.rand(100)
y = np.random.rand(100)
category = np.random.random_integers(0, 3, 100)

markers = ['s', 'o', 'h', '+']
for k, m in enumerate(markers):
    i = (category == k)
    plt.scatter(x[i], y[i], marker=m)

plt.show()
</snippet></ROW><ROW><id>16774963</id><snippet>with</snippet></ROW><ROW><id>16774963</id><snippet>__enter__</snippet></ROW><ROW><id>16774963</id><snippet>as</snippet></ROW><ROW><id>16774963</id><snippet>with</snippet></ROW><ROW><id>16774963</id><snippet>for</snippet></ROW><ROW><id>16774963</id><snippet>as</snippet></ROW><ROW><id>16774963</id><snippet>with</snippet></ROW><ROW><id>16774963</id><snippet>return myobj</snippet></ROW><ROW><id>16774963</id><snippet>with</snippet></ROW><ROW><id>16774963</id><snippet>with</snippet></ROW><ROW><id>16774963</id><snippet>something().__exit__()</snippet></ROW><ROW><id>16774963</id><snippet>continue</snippet></ROW><ROW><id>16774963</id><snippet>break</snippet></ROW><ROW><id>16774963</id><snippet>return</snippet></ROW><ROW><id>16774963</id><snippet>with</snippet></ROW><ROW><id>16774963</id><snippet>with something() as myobj:
    logger.info('I got an obj!')
    return myobj
</snippet></ROW><ROW><id>16774963</id><snippet>with dbengine.connect(**details) as db:
    cur = db.exec(sql_string)
    return cur.fetchall()
</snippet></ROW><ROW><id>16774963</id><snippet>return</snippet></ROW><ROW><id>16774963</id><snippet>with</snippet></ROW><ROW><id>16774963</id><snippet>something().__exit__()</snippet></ROW><ROW><id>16774963</id><snippet>with</snippet></ROW><ROW><id>16774981</id><snippet>grid[:]</snippet></ROW><ROW><id>16774981</id><snippet>deepcopy</snippet></ROW><ROW><id>16774981</id><snippet>copy</snippet></ROW><ROW><id>16775051</id><snippet>...
database_connection = conn.my_database
# Here is the magic:
print database_connection.system_js.my_func(['a', 'b'], ['c', 'd'])
</snippet></ROW><ROW><id>16775051</id><snippet>system_js</snippet></ROW><ROW><id>16775130</id><snippet>import zerorpc

class HelloRPC(object):
    def send(self, message):
        url = ("https://testserver.com/socket?message=%s") % (message)
        req = urllib2.Request(url, None, None)
        response = urllib2.urlopen(req).read()
        return response    
s = zerorpc.Server(HelloRPC())
s.bind("tcp://0.0.0.0:4242")
s.run()
</snippet></ROW><ROW><id>16775130</id><snippet>import zerorpc

c = zerorpc.Client()
c.connect("tcp://127.0.0.1:4242")
print c.send("RPC TEST!")
</snippet></ROW><ROW><id>16775214</id><snippet>.idxmax</snippet></ROW><ROW><id>16775214</id><snippet>max</snippet></ROW><ROW><id>16775214</id><snippet>&gt;&gt;&gt; w = df[['minor','major']].abs().idxmax(axis=1)
&gt;&gt;&gt; w
10    minor
20    major
30    minor
dtype: object
</snippet></ROW><ROW><id>16775214</id><snippet>lookup</snippet></ROW><ROW><id>16775214</id><snippet>&gt;&gt;&gt; df.lookup(df.index, w)
array([ -6. ,   3. ,  19.2])
</snippet></ROW><ROW><id>16775214</id><snippet>&gt;&gt;&gt; df['critic_vector'] = df[['minor','major']].abs().idxmax(axis=1)
&gt;&gt;&gt; df['critic'] = abs(df.lookup(df.index, df.critic_vector))
&gt;&gt;&gt; df
    major  minor critic_vector  critic
10    2.0   -6.0         minor     6.0
20    3.0   -2.3         major     3.0
30    7.4   19.2         minor    19.2
</snippet></ROW><ROW><id>16775214</id><snippet>lookup</snippet></ROW><ROW><id>16775214</id><snippet>max</snippet></ROW><ROW><id>16775214</id><snippet>idxmax</snippet></ROW><ROW><id>16775394</id><snippet>a = [6, 3, 0, 0, 1, 0]
b = [1 if i else 0 for i in a]
print b
&gt;&gt;&gt; 
[1, 1, 0, 0, 1, 0]
</snippet></ROW><ROW><id>16775394</id><snippet>$ python3 -m timeit -s "a = [6, 3, 0, 0, 1, 0]" "[1 if i else 0 for i in a]"
1000000 loops, best of 3: 0.838 usec per loop
$ python3 -m timeit -s "a = [6, 3, 0, 0, 1, 0]" "[int(i != 0) for i in a]"
100000 loops, best of 3: 2.15 usec per loop
$ python3 -m timeit -s "a = [6, 3, 0, 0, 1, 0]" "[i != 0 for i in a]"
1000000 loops, best of 3: 0.794 usec per loop
</snippet></ROW><ROW><id>16775394</id><snippet>int()</snippet></ROW><ROW><id>16775394</id><snippet>Booleans</snippet></ROW><ROW><id>16775394</id><snippet>Integers</snippet></ROW><ROW><id>16775567</id><snippet>from collections import Counter

A = [[1,2], [2,1], [3,1], [1,2]]
print Counter(tuple(i) for i in A)

&gt;&gt;&gt; 
Counter({(1, 2): 2, (3, 1): 1, (2, 1): 1})
</snippet></ROW><ROW><id>16775731</id><snippet>start_response()</snippet></ROW><ROW><id>16775731</id><snippet>start_response()</snippet></ROW><ROW><id>16775731</id><snippet>mod_wsgi</snippet></ROW><ROW><id>16775731</id><snippet>mod_wgsi.c</snippet></ROW><ROW><id>16775731</id><snippet>PEP3333</snippet></ROW><ROW><id>16775731</id><snippet>def application(environ, start_response):
    write = start_response(status, headers)
    write('content block 1')
    write('content block 2')
    write('content block 3')
    return None
</snippet></ROW><ROW><id>16775731</id><snippet>def application(environ, start_response):
    start_response(status, headers)
    return ['content block 1',
            'content block 2',
            'content block 3']
</snippet></ROW><ROW><id>16775731</id><snippet>def application(environ, start_response):
    write = start_response(status, headers)
    write('content block 1')
    return ['content block 2',
            'content block 3']
</snippet></ROW><ROW><id>16775731</id><snippet>def application(environ):
    return (status,
            headers,
            ['content block 1',
             'content block 2',
             'content block 3'])
</snippet></ROW><ROW><id>16775731</id><snippet>start_response()</snippet></ROW><ROW><id>16775731</id><snippet>write()</snippet></ROW><ROW><id>16775746</id><snippet>foo = ['MAR', 'TFFVGGNFK', 'LNGSK', 'QSIK', 'EIVER', 'LNTASIPENVEVVICPPATYLDYSVSLVK']

count = 0
for bar in foo:
    newcount = count + len(bar)
    print count, '-', newcount-1, bar
    count = newcount
</snippet></ROW><ROW><id>16775849</id><snippet>tr = { 'critic' : '8_critic', 'foo' : 'bar' }
</snippet></ROW><ROW><id>16775849</id><snippet>nfs = { tr[k]:fs[k] for k in fs }
</snippet></ROW><ROW><id>16775849</id><snippet>nfs = cgi.FieldStorage()
for k in fs:
  nfs[ tr[k] ] = fs[k]
</snippet></ROW><ROW><id>16776312</id><snippet>p.soup</snippet></ROW><ROW><id>16776312</id><snippet>self.assertIsInstance(p.soup, BeautifulSoup)</snippet></ROW><ROW><id>16776514</id><snippet>()</snippet></ROW><ROW><id>16776514</id><snippet>random.shuffle()</snippet></ROW><ROW><id>16776514</id><snippet>to_call = [function1, function2, function3]
random.shuffle(to_call)
for f in to_call:
    f()
</snippet></ROW><ROW><id>16776514</id><snippet>returned_values = [f() for f in to_call]
</snippet></ROW><ROW><id>16776825</id><snippet>l = [("255-255-255", 450),
    ("255-255-255", 345),
    ("250-250-255", 184),
    ("125-130-200", 3)]

from collections import defaultdict
D = defaultdict(int)

for k,v in l:
    D[k] += v

print D # display the dict.

&gt;&gt;&gt; 
defaultdict(&lt;type 'int'&gt;, {'125-130-200': 3, '250-250-255': 184, '255-255-255': 795})
</snippet></ROW><ROW><id>16776900</id><snippet>answer = raw_input("Say something.")
output = []
if "ok" in answer.lower():
    output.append("Yay!")
if "poo" in answer.lower():
    output.append("That's very childish")
if not output:
    output.append("I'm not very talkative.")
for o in output:
  print o
</snippet></ROW><ROW><id>16776952</id><snippet>ctypes</snippet></ROW><ROW><id>16776952</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; ctypes.c_ubyte * 3
&lt;class '__main__.c_ubyte_Array_3'&gt;
</snippet></ROW><ROW><id>16776952</id><snippet>&gt;&gt;&gt; (ctypes.c_ubyte * 3)(0, 1, 2)
&lt;__main__.c_ubyte_Array_3 object at 0x7fe51e0fa710&gt;
</snippet></ROW><ROW><id>16776952</id><snippet>*</snippet></ROW><ROW><id>16776952</id><snippet>&gt;&gt;&gt; (ctypes.c_ubyte * 3)(*range(3))
&lt;__main__.c_ubyte_Array_3 object at 0x7fe51e0fa7a0&gt;
</snippet></ROW><ROW><id>16776952</id><snippet>import ctypes

my_c_library = ctypes.CDLL('my_c_library.dll')

def call_my_func(input_list):
    length = len(input_list)
    array = (ctypes.c_ubyte * length)(*input_list)
    return my_c_library.func(array, length)

my_list = [0, 1, 2]
print call_my_func(my_list)
</snippet></ROW><ROW><id>16777095</id><snippet>__unicode__</snippet></ROW><ROW><id>16777095</id><snippet>tuple</snippet></ROW><ROW><id>16777095</id><snippet>def __unicode__(self):
    # note the tralining comma
    #return self.name,
    #should be like this (no comma)
    return self.name
</snippet></ROW><ROW><id>16777153</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>16777153</id><snippet>from collections import OrderedDict
D1 = {(10,12): 23, (8,14): 45, (12, 9): 29}
D1_sorted = OrderedDict(sorted(D1.items()))
</snippet></ROW><ROW><id>16777153</id><snippet>print(D1)</snippet></ROW><ROW><id>16777153</id><snippet>total = 0
for x, y in D1.keys():
    try:
        total = total + D1[(x, y)] * D2[(y, x)]
    except KeyError:
        pass
print total
</snippet></ROW><ROW><id>16777165</id><snippet>string.replace</snippet></ROW><ROW><id>16777165</id><snippet>string.replace(your_string, '\b', ' ')
</snippet></ROW><ROW><id>16777165</id><snippet>your_string</snippet></ROW><ROW><id>16777183</id><snippet>axes[0].errorbar(x1, y1, yerr=yerr1, ecolor="r")
axes[0].errorbar(x2, y2, yerr=yerr2, ecolor="b")
</snippet></ROW><ROW><id>16777188</id><snippet>int</snippet></ROW><ROW><id>16777188</id><snippet>def valid_year(year):
  if year and year.isdigit():
    if int(year) &gt;=1900 and int(year) &lt;=2020:
      return year

def valid_year_uda(year):
  if year and year.isdigit():
    year = int(year)
    if year &gt;=1900 and year &lt;=2020:
      return year

print valid_year('1970') == valid_year_uda('1970')
print type(valid_year('1970')), type(valid_year_uda('1970'))
</snippet></ROW><ROW><id>16777188</id><snippet>False
&lt;type 'str'&gt; &lt;type 'int'&gt;
</snippet></ROW><ROW><id>16777188</id><snippet>return year</snippet></ROW><ROW><id>16777188</id><snippet>return int(year)</snippet></ROW><ROW><id>16777188</id><snippet>def valid_year(year):
  if year and year.isdigit():
    if int(year) &gt;=1900 and int(year) &lt;=2020:
      return int(year)  #return an integer

print valid_year('1970')
</snippet></ROW><ROW><id>16777446</id><snippet>None</snippet></ROW><ROW><id>16777523</id><snippet>keyboardButtons</snippet></ROW><ROW><id>16777523</id><snippet>def countryCommand():
    for button in keyboardButtons:
        button['state']=tk.NORMAL

keyboardButtons = []
for k in kybrd_list:
    ...
    keyboardButtons.append(tk.Button(root, text=k, width=5, relief=rel2, command=cmd2, state=tk.DISABLED))
    ...
</snippet></ROW><ROW><id>16777523</id><snippet>import Tkinter as tk
kybrd_list = ['q','w','e','r','t','y','...']
def onclick(k):
    def click():
        print(k)
    return click

class SimpleGridApp(object):
    def __init__(self, master, **kwargs):
        self.keyboardButtons = []
        for i, k in enumerate(kybrd_list):
            button = tk.Button(root, text=k, width=5, relief='raised',
                               command=onclick(k), state=tk.DISABLED)
            button.grid(row=i, column=0)
            self.keyboardButtons.append(button)

        self.enterCountryBtn = tk.Button(
            root, width=30, text="enter Country", command=self.countryCommand)
        self.enterCountryBtn.grid(row=7, column=0)            
    def countryCommand(self):
        for button in self.keyboardButtons:
            button['state']=tk.NORMAL

root = tk.Tk()
app = SimpleGridApp(root, title='Hello, world')
root.mainloop()
</snippet></ROW><ROW><id>16777629</id><snippet>from contextlib import closing

if hero.colliderect(finishline):
    starttimer = running = 0
    with closing(shelve.open('highscores.txt')) as d:
        highscore = d['highscore']
        if time &lt; highscore:
            d['highscore'] = time
            player = easygui.enterbox(msg=("Congratulations you have set a new highscore of {0}. Please enter your name: ".format(time)))
            d['player'] = player
        else:
            player = d['player']
            easygui.msgbox(msg=("Congratulations you have finished with a time of {0}. The highscore is {1} set by {2}".format(time, highscore, player)))
</snippet></ROW><ROW><id>16777682</id><snippet>from django.core.exceptions import PermissionDenied
def cars(request, car_id):
    ...
    if request.user != car.owner:
        raise PermissionDenied
    ...
</snippet></ROW><ROW><id>16777682</id><snippet>import</snippet></ROW><ROW><id>16777682</id><snippet># custom middleware

class CustomMiddleware(object):

    def process_view(self, request, view_func, view_args, view_kwargs):
        # get the car param passed to the view (not sure if it is with kwargs or args
        car_id = view_kwargs['car_id']
        car = # retrieve car from the db
        if request.user != car.owner:
            raise PermissionDenied
</snippet></ROW><ROW><id>16777682</id><snippet>settings.py</snippet></ROW><ROW><id>16777713</id><snippet>if x[i][0] &gt; y[i][0]:
</snippet></ROW><ROW><id>16777726</id><snippet>&gt;&gt;&gt; lis = ('Bob', 11, 333, 453.3, 'Ted', 15, 999, 345.5, 'Jeff', 22, 122, 434.7)
&gt;&gt;&gt; dic = { lis[i]: list(lis[i+1:i+4]) for i in xrange(0,len(lis),4)}
&gt;&gt;&gt; dic
{'Bob':  [11, 333, 453.3],
 'Ted':  [15, 999, 345.5],
 'Jeff': [22, 122, 434.7]}

&gt;&gt;&gt; sorted(dic,key = dic.get,reverse = True)
['Jeff', 'Ted', 'Bob']

# To get keys as well as values use dict.items()
&gt;&gt;&gt; for k,v in sorted(dic.items(), key =lambda x:x[1] , reverse = True):
    print k,v[0]
...     
Jeff 22
Ted 15
Bob 11
</snippet></ROW><ROW><id>16778026</id><snippet>from cpython.exc cimport PyErr_CheckSignals

cdef Run(self):
    while True:
        # do some work
        PyErr_CheckSignals()
</snippet></ROW><ROW><id>16778026</id><snippet>PyErr_CheckSignals</snippet></ROW><ROW><id>16778026</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>16778026</id><snippet>PyErr_CheckSignals</snippet></ROW><ROW><id>16778240</id><snippet>strona</snippet></ROW><ROW><id>16778240</id><snippet>self</snippet></ROW><ROW><id>16778240</id><snippet>strona</snippet></ROW><ROW><id>16778240</id><snippet>types.MethodType(funkcje.strona, self, MyForm)</snippet></ROW><ROW><id>16778240</id><snippet>__init__</snippet></ROW><ROW><id>16778240</id><snippet>class MyForm(QtGui.QMainWindow):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        types.MethodType(strona, self, MyForm) 
        QtCore.QObject.connect(self.ui.pushButton,QtCore.SIGNAL("clicked()"), strona)
</snippet></ROW><ROW><id>16778363</id><snippet>&gt;&gt; [(i,i) for i  in xrange(1,6)]
[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]
</snippet></ROW><ROW><id>16778388</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>16778388</id><snippet>from collections import OrderedDict

data = {'r': [4,3],'t': [4,5,6], 'n': [1,6]}
tuples = data.items()
tuples.sort(key=lambda pair: len(pair[1]), reverse=True)

ordered = OrderedDict(tuples)
</snippet></ROW><ROW><id>16778388</id><snippet>OrderedDict([('t', [4, 5, 6]), ('r', [4, 3]), ('n', [1, 6])])
</snippet></ROW><ROW><id>16778388</id><snippet>lambda pair: len(pair[1])</snippet></ROW><ROW><id>16778388</id><snippet>(key, value)</snippet></ROW><ROW><id>16778388</id><snippet>(len(pair[1]), key)</snippet></ROW><ROW><id>16778473</id><snippet>import httplib
c = httplib.HTTPConnection('www.abc.com')
c.request("HEAD", '')
if c.getresponse().status == 200:
   print('web site exists')
</snippet></ROW><ROW><id>16778473</id><snippet>urllib2</snippet></ROW><ROW><id>16778473</id><snippet>import urllib2
try:
    urllib2.urlopen('http://www.abc.com/some_page')
except urllib2.HTTPError, e:
    print(e.code)
except urllib2.URLError, e:
    print(e.args)
</snippet></ROW><ROW><id>16778536</id><snippet>Checkbox</snippet></ROW><ROW><id>16778536</id><snippet>is_checked = IntVar()
check = Checkbutton(window, text="Add both", onvalue=1, offvalue=0, variable=is_checked)
</snippet></ROW><ROW><id>16778536</id><snippet>if is_checked:
    # do something
</snippet></ROW><ROW><id>16778596</id><snippet>import MySQLdb

db = MySQLdb.connect("xxx","xxx","xxx","xxx")
c = db.cursor()
row = 2
while Cell(row,1).value is not None:
    c.execute("INSERT INTO users (id, username, password, \
    userid, fname, lname) \
    VALUES (%s, %s, %s, %s, %s, %s) \
    ON DUPLICATE KEY UPDATE \
    id=VALUES(id), username=VALUES(username), password=VALUES(password), \
    userid=VALUES(userid), fname=VALUES(fname), lname=VALUES(lname);",
    (CellRange((row,1),(row,6)).value))

    row = row + 1

db.commit()   
db.close()
</snippet></ROW><ROW><id>16779030</id><snippet>&gt;&gt;&gt; from scipy.io.wavfile import read
&gt;&gt;&gt; a = read("adios.wav")
&gt;&gt;&gt; numpy.array(a[1],dtype=float)
array([ 128.,  128.,  128., ...,  128.,  128.,  128.])
</snippet></ROW><ROW><id>16779171</id><snippet>xlink</snippet></ROW><ROW><id>16779171</id><snippet>fromstring</snippet></ROW><ROW><id>16779171</id><snippet>link = ET.fromstring('&lt;a xmlns:xlink="http://www.w3.org/1999/xlink" '
                     'xlink:href="http://www.mysite.com/"&gt;&lt;/a&gt;')
</snippet></ROW><ROW><id>16779293</id><snippet>output = []
with open('input.txt', 'r') as f:
    for line in f:
        if line == '&lt;&lt;eof&gt;&gt;':
            break
        elif not line.startswith('&lt;&lt;row&gt;&gt;'):
            continue
        else:
            output.append(line.strip()[7:-8].split('|'))
</snippet></ROW><ROW><id>16779293</id><snippet>&lt;&lt;row&gt;&gt;</snippet></ROW><ROW><id>16779293</id><snippet>&lt;&lt;eof&gt;&gt;</snippet></ROW><ROW><id>16779443</id><snippet>sp.jv(n * e, M)</snippet></ROW><ROW><id>16779443</id><snippet>sp.jv(n , n * e)</snippet></ROW><ROW><id>16779496</id><snippet>solve</snippet></ROW><ROW><id>16779496</id><snippet>d1</snippet></ROW><ROW><id>16779496</id><snippet>d2</snippet></ROW><ROW><id>16779496</id><snippet>nonlocal</snippet></ROW><ROW><id>16779496</id><snippet>def solve():
    nonlocal d1, d2, d3, d4, d5
</snippet></ROW><ROW><id>16779496</id><snippet>d = ['n'] * 5
t = ['Incomplete' if x == 'n' else 'Complete' for x in d]
for i, x in enumerate(t, 1):
    print('{} is {}'.format(i, x)
</snippet></ROW><ROW><id>16779496</id><snippet>if tasknumber == '1':
    print('Fill in the blanks: P_tho_ i_ a c_d_ng lan_u_ge. (No spaces. Ex: ldkjfonv)')
    answer = input().lower()
    if answer == 'ysoinga':
        d[0] = 'y'
    solve()
</snippet></ROW><ROW><id>16779496</id><snippet>nonlocal</snippet></ROW><ROW><id>16779496</id><snippet>d</snippet></ROW><ROW><id>16779496</id><snippet>d</snippet></ROW><ROW><id>16779496</id><snippet>d</snippet></ROW><ROW><id>16779496</id><snippet>if d1 and d2 and d3 and d4 and d5 in ['y']:
</snippet></ROW><ROW><id>16779496</id><snippet>if d1 == 'y' and d2 == 'y' and d3 == 'y' and d4 == 'y' and d5 == 'y':
</snippet></ROW><ROW><id>16779496</id><snippet>if all(x == 'y' for x in d):
</snippet></ROW><ROW><id>16779496</id><snippet>if d == ['y'] * 5:
</snippet></ROW><ROW><id>16779496</id><snippet>== 'value to test for'</snippet></ROW><ROW><id>16779496</id><snippet>in ['value to test for']</snippet></ROW><ROW><id>16779496</id><snippet>==</snippet></ROW><ROW><id>16779524</id><snippet>&gt;&gt;&gt; lis = [0,1,1,2,2,2,4,4,5,5,6,6,6,8,8,8]
&gt;&gt;&gt; maxx,minn = max(lis),min(lis)
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter(lis)
&gt;&gt;&gt; [c[i] for i in xrange(minn,maxx+1)]
[1, 2, 3, 0, 2, 2, 3, 0, 3]
</snippet></ROW><ROW><id>16779524</id><snippet>min</snippet></ROW><ROW><id>16779524</id><snippet>max</snippet></ROW><ROW><id>16779524</id><snippet>dict</snippet></ROW><ROW><id>16779524</id><snippet>&gt;&gt;&gt; [c[i] for i in xrange( min(c) , max(c)+1)]
[1, 2, 3, 0, 2, 2, 3, 0, 3]
</snippet></ROW><ROW><id>16779670</id><snippet>O(1)</snippet></ROW><ROW><id>16779670</id><snippet>any(d['Name'] == 'Dave' for d in dicts)
</snippet></ROW><ROW><id>16779670</id><snippet>any</snippet></ROW><ROW><id>16779670</id><snippet>from collections import defaultdict

total = defaultdict(set)

for d in dicts:
    for key, value in d.items():
        total[key].add(value)
</snippet></ROW><ROW><id>16779670</id><snippet>O(1)</snippet></ROW><ROW><id>16779670</id><snippet>'Dave' in total['Name']
</snippet></ROW><ROW><id>16779920</id><snippet>print</snippet></ROW><ROW><id>16779964</id><snippet>class Wiki(models.Model):
   word = models.TextField() 
   definition = models.TextField()
</snippet></ROW><ROW><id>16779964</id><snippet>my_words = Wiki.objects.order_by('word')
</snippet></ROW><ROW><id>16779964</id><snippet>word</snippet></ROW><ROW><id>16779964</id><snippet>TextField</snippet></ROW><ROW><id>16779964</id><snippet>word</snippet></ROW><ROW><id>16779964</id><snippet>class Wiki(models.Model):
   word = models.CharField(max_length=255, unique=True) 
   definition = models.TextField()
</snippet></ROW><ROW><id>16779964</id><snippet>word</snippet></ROW><ROW><id>16780113</id><snippet>return</snippet></ROW><ROW><id>16780113</id><snippet>raise StopIteration()</snippet></ROW><ROW><id>16780113</id><snippet>return &lt;something&gt;</snippet></ROW><ROW><id>16780113</id><snippet>raise StopIteration(&lt;something&gt;)</snippet></ROW><ROW><id>16780113</id><snippet>StopException: 3</snippet></ROW><ROW><id>16780113</id><snippet>value</snippet></ROW><ROW><id>16780113</id><snippet>yield from</snippet></ROW><ROW><id>16780113</id><snippet>def f():
    return 1
    yield 2

def g():
    x = yield from f()
    print(x)

g() # prints 1
</snippet></ROW><ROW><id>16780196</id><snippet>find_all</snippet></ROW><ROW><id>16780196</id><snippet>div = soup.find('div', id='cmeProductSlatePaginiationTop')
lis = div.find_all('li')
num_lis = len(lis)
</snippet></ROW><ROW><id>16780222</id><snippet>while q.full:
</snippet></ROW><ROW><id>16780222</id><snippet>while q.full():
</snippet></ROW><ROW><id>16780222</id><snippet>q.empty()</snippet></ROW><ROW><id>16780222</id><snippet>range(threads)</snippet></ROW><ROW><id>16780222</id><snippet>q</snippet></ROW><ROW><id>16780222</id><snippet>q.get()</snippet></ROW><ROW><id>16780222</id><snippet>while</snippet></ROW><ROW><id>16780222</id><snippet>4</snippet></ROW><ROW><id>16780222</id><snippet>q.get()</snippet></ROW><ROW><id>16780222</id><snippet>q.put()</snippet></ROW><ROW><id>16780222</id><snippet>s.close</snippet></ROW><ROW><id>16780222</id><snippet>s.close()</snippet></ROW><ROW><id>16780222</id><snippet>multiprocessing</snippet></ROW><ROW><id>16780222</id><snippet>multiprocessing</snippet></ROW><ROW><id>16780324</id><snippet>for offset in ...
    gradColor = '#%02x%02x%02x' % ( x * 10, x * 10, x * 10 )
</snippet></ROW><ROW><id>16780324</id><snippet>gradColor</snippet></ROW><ROW><id>16780324</id><snippet>offset</snippet></ROW><ROW><id>16780324</id><snippet>def drawGradient(self, canvas, x, y, w, h):
    factor = 255./w
    for offset in range(0, w):
        gradColor = '#%02x%02x%02x' % (offset*factor, offset*factor, offset*factor)
        canvas.create_line(x + offset, y, x + offset, y + h, fill=gradColor)
</snippet></ROW><ROW><id>16780335</id><snippet>.unwrap()</snippet></ROW><ROW><id>16780335</id><snippet>for elem in soup.find_all('li'):
    for para in elem.find_all('p'):
        para.unwrap()
</snippet></ROW><ROW><id>16780418</id><snippet>from importlib import import_module
import_module(str("." + market), 'market')
</snippet></ROW><ROW><id>16780452</id><snippet>yield</snippet></ROW><ROW><id>16780452</id><snippet>yield</snippet></ROW><ROW><id>16780452</id><snippet>yield</snippet></ROW><ROW><id>16780452</id><snippet>return</snippet></ROW><ROW><id>16780452</id><snippet>return</snippet></ROW><ROW><id>16780452</id><snippet>StopIteration</snippet></ROW><ROW><id>16780452</id><snippet>.__next__()</snippet></ROW><ROW><id>16780452</id><snippet>.send()</snippet></ROW><ROW><id>16780452</id><snippet>.throw()</snippet></ROW><ROW><id>16780452</id><snippet>.close()</snippet></ROW><ROW><id>16780452</id><snippet>f()</snippet></ROW><ROW><id>16780452</id><snippet>return 3</snippet></ROW><ROW><id>16780452</id><snippet>&gt;&gt;&gt; (i for i in range(10))
&lt;generator object &lt;genexpr&gt; at 0x101472730&gt;
</snippet></ROW><ROW><id>16780452</id><snippet>yield</snippet></ROW><ROW><id>16780452</id><snippet>g()</snippet></ROW><ROW><id>16780452</id><snippet>f()</snippet></ROW><ROW><id>16780452</id><snippet>def f():
    return 3
    return g()
</snippet></ROW><ROW><id>16780452</id><snippet>g()</snippet></ROW><ROW><id>16780452</id><snippet>f()</snippet></ROW><ROW><id>16780452</id><snippet>f()</snippet></ROW><ROW><id>16780452</id><snippet>yield</snippet></ROW><ROW><id>16780522</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; L = [np.array([1, 2]), np.array([3, 4]), np.array([5, 6])]
&gt;&gt;&gt; X = [a[0] for a in L]
&gt;&gt;&gt; Y = [a[1] for a in L]
&gt;&gt;&gt; X
[1, 3, 5]
&gt;&gt;&gt; Y
[2, 4, 6]
</snippet></ROW><ROW><id>16780522</id><snippet>&gt;&gt;&gt; X, Y = map(list, zip(*L))
&gt;&gt;&gt; X
[1, 3, 5]
&gt;&gt;&gt; Y
[2, 4, 6]
</snippet></ROW><ROW><id>16780536</id><snippet># ...
def add_tab():
    text = "Tab {}".format(len(notebook.tabs()))
    frame = Frame(notebook, width=100, height=100)
    notebook.add(frame, text=text)

menu=MyMenu()
menu.add_command(label="Add tab", command=add_tab)
tk.config(menu=menu)
</snippet></ROW><ROW><id>16780536</id><snippet>import *</snippet></ROW><ROW><id>16780536</id><snippet>import Tkinter as tk
import ttk

class MyMenu(tk.Menu):
    pass

class MyNotebook(ttk.Notebook):
    pass

class App(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.frame = ttk.Frame(self)
        self.notebook = MyNotebook(self.frame)
        self.frame.pack()
        self.notebook.pack()
        self.add_tab()

        menu = MyMenu()
        menu.add_command(label="Add tab", command=self.add_tab)
        self.config(menu=menu)

    def add_tab(self):
        text = "Tab {}".format(len(self.notebook.tabs()))
        frame = ttk.Frame(self.notebook, width=100, height=100)
        self.notebook.add(frame, text=text)

app = App()
app.mainloop()
</snippet></ROW><ROW><id>16780543</id><snippet>import</snippet></ROW><ROW><id>16780543</id><snippet>other_file.py</snippet></ROW><ROW><id>16780543</id><snippet>from other_file import findTheRange
</snippet></ROW><ROW><id>16780543</id><snippet>from findTheRange import findTheRange
</snippet></ROW><ROW><id>16780543</id><snippet>random</snippet></ROW><ROW><id>16780543</id><snippet>import findTheRange
operator = findTheRange.findTheRange()
</snippet></ROW><ROW><id>16780543</id><snippet>  randomList = [random.randint(0, 100) for i in range(5)]
</snippet></ROW><ROW><id>16780543</id><snippet>largestInList = operator.findLargest(randomList)
smallestInList = operator.findSmallest(randomList)
</snippet></ROW><ROW><id>16780543</id><snippet>largestInList = max(randomList)
smallestInList = min(randomList)
</snippet></ROW><ROW><id>16780543</id><snippet>self</snippet></ROW><ROW><id>16780543</id><snippet>@staticmethod</snippet></ROW><ROW><id>16780543</id><snippet>class findTheRange():
    @staticmethod
    def findLargest(_list):
        #stuff...
</snippet></ROW><ROW><id>16780683</id><snippet>pyparsing</snippet></ROW><ROW><id>16780789</id><snippet>requests.post('http://some.url/chunked', data=''.join(gen()))
</snippet></ROW><ROW><id>16780789</id><snippet>gen()</snippet></ROW><ROW><id>16780826</id><snippet>soup.find_all('a', text=['revoked', 'active', 'default'])
</snippet></ROW><ROW><id>16780826</id><snippet>&lt;a …&gt;</snippet></ROW><ROW><id>16780930</id><snippet>import cssutils


data = """
p{font-family:"Verdana"}

p{font-family:"Comic Sans"}

p{font-family:"Times New Roman", Times, serif}
"""

sheet = cssutils.parseString(data)

for rule in sheet:
    if rule.type == rule.STYLE_RULE:
        # find property
        for property in rule.style:
            if property.name == 'font-family':
                print property.value
</snippet></ROW><ROW><id>16780930</id><snippet>"Verdana"
"Comic Sans"
"Times New Roman", Times, serif
</snippet></ROW><ROW><id>16781173</id><snippet>timeit</snippet></ROW><ROW><id>16781173</id><snippet>timeit</snippet></ROW><ROW><id>16781173</id><snippet>''.join()</snippet></ROW><ROW><id>16781173</id><snippet>&gt;&gt;&gt; s = 1000 * string
&gt;&gt;&gt; timeit.timeit('f(s)', 'from __main__ import s, strip_spaces as f', number=100)
1.3209099769592285
&gt;&gt;&gt; timeit.timeit('f(s)', 'from __main__ import s, strip_spaces_join as f', number=100)
1.2893600463867188
&gt;&gt;&gt; s = 10000 * string
&gt;&gt;&gt; timeit.timeit('f(s)', 'from __main__ import s, strip_spaces as f', number=100)
14.545105934143066
&gt;&gt;&gt; timeit.timeit('f(s)', 'from __main__ import s, strip_spaces_join as f', number=100)
14.43651008605957
</snippet></ROW><ROW><id>16781173</id><snippet>''.join()</snippet></ROW><ROW><id>16781173</id><snippet>+=</snippet></ROW><ROW><id>16781173</id><snippet>''.join()</snippet></ROW><ROW><id>16781173</id><snippet>def inplace_add_concatenation(s):
    res = ''
    for c in s:
        res += c

def str_join_concatenation(s):
    ''.join(s)
</snippet></ROW><ROW><id>16781173</id><snippet>&gt;&gt;&gt; s = list(1000 * string)
&gt;&gt;&gt; timeit.timeit('f(s)', 'from __main__ import s, inplace_add_concatenation as f', number=1000)
6.113742113113403
&gt;&gt;&gt; timeit.timeit('f(s)', 'from __main__ import s, str_join_concatenation as f', number=1000)
0.6616439819335938
</snippet></ROW><ROW><id>16781173</id><snippet>''.join()</snippet></ROW><ROW><id>16781173</id><snippet>+=</snippet></ROW><ROW><id>16781173</id><snippet>s</snippet></ROW><ROW><id>16781173</id><snippet>''.join()</snippet></ROW><ROW><id>16781369</id><snippet>&gt;&gt;&gt; def func(seq):
        for x in seq:
            try:
                yield float(x)
            except ValueError:
                yield x
...             
&gt;&gt;&gt; a = ['Total', '1', '4', '5', '2']
&gt;&gt;&gt; list(func(a))
['Total', 1.0, 4.0, 5.0, 2.0]
</snippet></ROW><ROW><id>16781466</id><snippet>import scipy.optimize as opt
import scipy
from numpy import *
def f(x):
    print x
    return -x**(2)

max_x = opt.fmin_l_bfgs_b(lambda x: -f(x), 1.0, bounds=[(-9,9)],approx_grad=True)
</snippet></ROW><ROW><id>16781466</id><snippet>[ 1.]
[ 1.]
[ 1.00000001]
[-0.99999999]
[-0.99999999]
[-0.99999998]
[ 0.001]
[ 0.001]
[ 0.00100001]
[ -5.01108742e-09]
[ -5.01108742e-09]
[  4.98891258e-09]
</snippet></ROW><ROW><id>16781466</id><snippet>(array([ -5.01108742e-09]),
 array([  2.51109971e-17]),
 {'funcalls': 4,
  'grad': array([ -2.21748344e-11]),
  'task': 'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_&lt;=_PGTOL',
  'warnflag': 0})
</snippet></ROW><ROW><id>16781610</id><snippet>User-Agent</snippet></ROW><ROW><id>16781610</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("twiki.org")
&gt;&gt;&gt; conn.request("GET", "/cgi-bin/view/", headers={"User-Agent": "foo"})
&gt;&gt;&gt; r1 = conn.getresponse()
&gt;&gt;&gt; print r1.status, r1.reason
200 OK
</snippet></ROW><ROW><id>16781610</id><snippet>User-Agent</snippet></ROW><ROW><id>16781610</id><snippet>BrowserMatchNoCase</snippet></ROW><ROW><id>16781610</id><snippet>blockAccess</snippet></ROW><ROW><id>16781610</id><snippet>403 Forbidden</snippet></ROW><ROW><id>16781610</id><snippet>User-Agent</snippet></ROW><ROW><id>16781610</id><snippet>$ GET -Ssed -H "User-Agent: some-random-name" http://twiki.org/cgi-bin/view/
GET http://twiki.org/cgi-bin/view/
200 OK
[...]
$ GET -Ssed -H "User-Agent: FAST" http://twiki.org/cgi-bin/view/
GET http://twiki.org/cgi-bin/view/
403 Forbidden
[...]
</snippet></ROW><ROW><id>16781633</id><snippet>dev_appserver</snippet></ROW><ROW><id>16781659</id><snippet>''.join()</snippet></ROW><ROW><id>16781659</id><snippet>''.join()</snippet></ROW><ROW><id>16781659</id><snippet>&gt;&gt;&gt; ','.join('Hello world')
'H,e,l,l,o, ,w,o,r,l,d'
&gt;&gt;&gt; ','.join(['Hello', 'world'])
'Hello,world'
</snippet></ROW><ROW><id>16781989</id><snippet>for</snippet></ROW><ROW><id>16781989</id><snippet>data = "AAABAABAAABIAABIAABAA"

result, count = [], 0
for s in data.split('B'):
    result.append([(count, count+len(s)), s])
    count += len(s)
print(result)
</snippet></ROW><ROW><id>16781989</id><snippet>[[(0, 3), 'AAA'], [(3, 5), 'AA'], 
 [(5, 8), 'AAA'], [(8, 11), 'IAA'], 
 [(11, 14), 'IAA'], [(14, 16), 'AA']]
</snippet></ROW><ROW><id>16781989</id><snippet>\n</snippet></ROW><ROW><id>16781989</id><snippet>list_of_strings = map(lambda l: '{}{}'.format(*l), result)
print('\n'.join(list_of_strings))
</snippet></ROW><ROW><id>16781989</id><snippet>(0, 3)AAA
(3, 5)AA
(5, 8)AAA
(8, 11)IAA
(11, 14)IAA
(14, 16)AA
</snippet></ROW><ROW><id>16781989</id><snippet>string</snippet></ROW><ROW><id>16781989</id><snippet>string</snippet></ROW><ROW><id>16782017</id><snippet>reply = requests.get(url + "?t=" + get_timecode(), stream=True)
session_id = reply.text.split(':')[0]
main = requests.Session()

print "Session ID:", session_id

reply = main.get(url + "xhr-polling/" + session_id + "?t=" + get_timecode(),  
                 stream=True)
reply = main.post(url + "xhr-polling/" + session_id + "?t=" + get_timecode(),
                  data=subscribe, stream=True)

print "Successfully subscribed."

while 1:
    reply = main.get(url + "xhr-polling/" + session_id + "?t=" + get_timecode(),
                     stream=True)
</snippet></ROW><ROW><id>16782282</id><snippet>OrderedDict</snippet></ROW><ROW><id>16782282</id><snippet>from collections import OrderedDict

class UnsortableList(list):
    def sort(self, *args, **kwargs):
        pass

class UnsortableOrderedDict(OrderedDict):
    def items(self, *args, **kwargs):
        return UnsortableList(OrderedDict.items(self, *args, **kwargs))

yaml.add_representer(UnsortableOrderedDict, yaml.representer.SafeRepresenter.represent_dict)
</snippet></ROW><ROW><id>16782282</id><snippet>&gt;&gt;&gt; d = UnsortableOrderedDict([
...     ('z', 0),
...     ('y', 0),
...     ('x', 0)
... ])
&gt;&gt;&gt; yaml.dump(d, default_flow_style=False)
'z: 0\ny: 0\nx: 0\n'
</snippet></ROW><ROW><id>16782282</id><snippet>import yaml

from collections import OrderedDict

def represent_ordereddict(dumper, data):
    value = []

    for item_key, item_value in data.items():
        node_key = dumper.represent_data(item_key)
        node_value = dumper.represent_data(item_value)

        value.append((node_key, node_value))

    return yaml.nodes.MappingNode(u'tag:yaml.org,2002:map', value)

yaml.add_representer(OrderedDict, represent_ordereddict)
</snippet></ROW><ROW><id>16782282</id><snippet>OrderedDict</snippet></ROW><ROW><id>16782383</id><snippet>user</snippet></ROW><ROW><id>16782383</id><snippet>smart_str(unicode(t.user), encoding=encoding)
</snippet></ROW><ROW><id>16782570</id><snippet>&gt;&gt;&gt; data = [['Knight', '500', '500', '0', '0'],
            ['Mage', '0', '0', '500', '500'],
            ['Mage', '0', '0', '500', '500'],
            ['Mage', '0', '0', '500', '500'],
            ['Mage', '0', '0', '500', '500']]

&gt;&gt;&gt; frmt = '{:10s}' + 4 * '{:&gt;12s}'
&gt;&gt;&gt; for line in data::
        print(frmt.format(*line))
</snippet></ROW><ROW><id>16782570</id><snippet>Knight             500         500           0           0
Mage                 0           0         500         500
Mage                 0           0         500         500
Mage                 0           0         500         500
Mage                 0           0         500         500
</snippet></ROW><ROW><id>16782655</id><snippet>&gt;&gt;&gt; a = [ 1, 2, 3, 'a', 'aa']
&gt;&gt;&gt; a[3:3] = ['b','a']
&gt;&gt;&gt; a
[1, 2, 3, 'b', 'a', 'a', 'aa']
</snippet></ROW><ROW><id>16782657</id><snippet>0</snippet></ROW><ROW><id>16782657</id><snippet>None</snippet></ROW><ROW><id>16782657</id><snippet>False</snippet></ROW><ROW><id>16782657</id><snippet>""</snippet></ROW><ROW><id>16782657</id><snippet>&gt;&gt;&gt; int("0")
0
</snippet></ROW><ROW><id>16782657</id><snippet>False</snippet></ROW><ROW><id>16782657</id><snippet>True</snippet></ROW><ROW><id>16782657</id><snippet>type</snippet></ROW><ROW><id>16782657</id><snippet>bool</snippet></ROW><ROW><id>16782657</id><snippet>&gt;&gt;&gt; 0==False
True
</snippet></ROW><ROW><id>16782697</id><snippet>from datetime import timedelta
</snippet></ROW><ROW><id>16782697</id><snippet>subtract = datetime.timedelta(hours=options.goback)
</snippet></ROW><ROW><id>16782697</id><snippet>type</snippet></ROW><ROW><id>16782697</id><snippet>int</snippet></ROW><ROW><id>16782766</id><snippet>notes.Note</snippet></ROW><ROW><id>16782766</id><snippet>Note</snippet></ROW><ROW><id>16782766</id><snippet>note.path.to.module.Note</snippet></ROW><ROW><id>16782766</id><snippet>notes</snippet></ROW><ROW><id>16782928</id><snippet>nice</snippet></ROW><ROW><id>16782928</id><snippet>nice</snippet></ROW><ROW><id>16782928</id><snippet>START</snippet></ROW><ROW><id>16782981</id><snippet>0</snippet></ROW><ROW><id>16782981</id><snippet>8</snippet></ROW><ROW><id>16782981</id><snippet>8</snippet></ROW><ROW><id>16782981</id><snippet>&gt;&gt;&gt; 07
7
&gt;&gt;&gt; 08
SyntaxError: invalid token
&gt;&gt;&gt; 010
8
</snippet></ROW><ROW><id>16782981</id><snippet>0o</snippet></ROW><ROW><id>16782981</id><snippet>2.7</snippet></ROW><ROW><id>16783069</id><snippet>response = Response()
response.response = fileObj.read()
</snippet></ROW><ROW><id>16783069</id><snippet>response = Response( response=fileObj.read() )
</snippet></ROW><ROW><id>16783069</id><snippet>response.response = fileObj.read()</snippet></ROW><ROW><id>16783069</id><snippet>response.response = [ fileObj.read() ]
</snippet></ROW><ROW><id>16783266</id><snippet>__init__()</snippet></ROW><ROW><id>16783266</id><snippet>&gt;&gt;&gt; class MyBoringClass(object):
    def __init__(self):
        print 'Being initialised!'

&gt;&gt;&gt; b = MyBoringClass()
Being initialised!
</snippet></ROW><ROW><id>16783266</id><snippet>&gt;&gt;&gt; class MyInterestingClass(object):
    def __init__(self, name):
        print 'Initialised as {}'.format(name)
        self.name = name

&gt;&gt;&gt; i = MyInterestingClass('Mona')
Initialised as Mona
&gt;&gt;&gt; i.name 
Mona
</snippet></ROW><ROW><id>16783266</id><snippet>__init()__</snippet></ROW><ROW><id>16783313</id><snippet>or</snippet></ROW><ROW><id>16783313</id><snippet>if</snippet></ROW><ROW><id>16783313</id><snippet>if</snippet></ROW><ROW><id>16783313</id><snippet>if (counts[straightrunfaces[i]] and 
    counts[straightrunfaces[i+1]] and 
    counts[straightrunfaces[i+2]] and 
    counts[straightrunfaces[i+3]]) or \
   (counts[straightrunfaces[i+1]] and 
    counts[straightrunfaces[i+2]] and 
    counts[straightrunfaces[i+3]] and 
    counts[straightrunfaces[i+4]]):
</snippet></ROW><ROW><id>16783313</id><snippet>if ((counts[straightrunfaces[i]] and 
     counts[straightrunfaces[i+1]] and 
     counts[straightrunfaces[i+2]] and 
     counts[straightrunfaces[i+3]]) or
    (counts[straightrunfaces[i+1]] and 
     counts[straightrunfaces[i+2]] and 
     counts[straightrunfaces[i+3]] and 
     counts[straightrunfaces[i+4]])):
</snippet></ROW><ROW><id>16783334</id><snippet>from random import randint

dice = [0]*11
for i in range(100000):
    dice[randint(1,6)+randint(1,6)-2] += 1

total = sum(dice) #it is 100000, of course
for i, v in enumerate(dice, 2):
    print('{0}: {1}%'.format(i, v*100.0/total))
</snippet></ROW><ROW><id>16783819</id><snippet>&gt;&gt;&gt; data = [('field', 'var1'), ('save', 'stringA'), ('field', 'var2'), ('save', ''), ('field', 'var3'), ('save', 'stringC')]
&gt;&gt;&gt; [(field[1], save[1]) for field, save in zip(*[iter(data)]*2)]
[('var1', 'stringA'), ('var2', ''), ('var3', 'stringC')]
</snippet></ROW><ROW><id>16783819</id><snippet>zip(*[iter(s)]*n)</snippet></ROW><ROW><id>16783819</id><snippet>&gt;&gt;&gt; items = (x[1] for x in data)
&gt;&gt;&gt; list(zip(*[items]*2))
[('var1', 'stringA'), ('var2', ''), ('var3', 'stringC')]
</snippet></ROW><ROW><id>16783873</id><snippet>time</snippet></ROW><ROW><id>16783873</id><snippet>time</snippet></ROW><ROW><id>16784085</id><snippet>   &lt;field name="product_id" domain="[('type','=','consu')]"/&gt;
</snippet></ROW><ROW><id>16784316</id><snippet>def login(request):
  url = 'main.login.html'
  state = ''
  if request.POST:
    user = authenticate(username=username,password=password)
    if user is not None:
        if user.is_active:
            auth_login(request, user)
            state = 'You are logged in'
            url = 'main.home.html'
        else:
            state = 'You are not logged in due to error'
    else:
        state = 'Incorrect username or password'

 return render_to_response(url,{'state':state,'username':username},context_instance=RequestContext(request)
</snippet></ROW><ROW><id>16784318</id><snippet>[(x, y) | x &lt;- [1..3], y &lt;- [4..6]]
</snippet></ROW><ROW><id>16784318</id><snippet>concatMap (\x -&gt; concatMap (\y -&gt; [(x, y)]) [4..6]) [1..3]
</snippet></ROW><ROW><id>16784318</id><snippet>[(x, y) | x &lt;- [1..3], y &lt;- [4..6], x + y /= 5]
</snippet></ROW><ROW><id>16784318</id><snippet>concatMap (\x -&gt; concatMap (\y -&gt; if (x + y) == 5 then [(x, y)] else []) [4..6]) [1..3]
</snippet></ROW><ROW><id>16784527</id><snippet>dictionaries = {i:[] for i in instruments}
</snippet></ROW><ROW><id>16784527</id><snippet>dictionaries['apd']
dictionaries['dd']
dictionaries['dow']
dictionaries['ecl']
</snippet></ROW><ROW><id>16784527</id><snippet>apd.append</snippet></ROW><ROW><id>16784527</id><snippet>eval</snippet></ROW><ROW><id>16784527</id><snippet>locals</snippet></ROW><ROW><id>16784527</id><snippet>eval('apd').append</snippet></ROW><ROW><id>16784527</id><snippet>locals()['apd'].append</snippet></ROW><ROW><id>16784527</id><snippet>dictionaries['&lt;some name can be set programatically or using a constant&gt;'].append</snippet></ROW><ROW><id>16784595</id><snippet>class A(object): # subclass object for newstyle class
    def func(self, rules=[]):
        if not rules:
            rules[:] = [8, 7, 6]        
        rules.append(4)
        return rules
</snippet></ROW><ROW><id>16784595</id><snippet>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; for x in range(5):
        print a.func()


[8, 7, 6, 4]
[8, 7, 6, 4, 4]
[8, 7, 6, 4, 4, 4]
[8, 7, 6, 4, 4, 4, 4]
[8, 7, 6, 4, 4, 4, 4, 4]
</snippet></ROW><ROW><id>16784656</id><snippet>-u module_name</snippet></ROW><ROW><id>16784854</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dd = defaultdict(list)
&gt;&gt;&gt; foo = [
      {'host': 'localhost', 'db_name': 'test', 'table': 'partners'},
      {'host': 'localhost', 'db_name': 'test', 'table': 'users'},
      {'host': 'localhost', 'db_name': 'test', 'table': 'sales'},
      {'host': 'localhost', 'db_name': 'new', 'table': 'partners'},
      {'host': 'localhost', 'db_name': 'new', 'table': 'users'},
      {'host': 'localhost', 'db_name': 'new', 'table': 'sales'},
]
&gt;&gt;&gt; for d in foo:
        dd[(d['host'], d['db_name'])].append(d)
</snippet></ROW><ROW><id>16784854</id><snippet>&gt;&gt;&gt; dd.values()
[[{'table': 'partners', 'host': 'localhost', 'db_name': 'new'}, {'table': 'users', 'host': 'localhost', 'db_name': 'new'}, {'table': 'sales', 'host': 'localhost', 'db_name': 'new'}], [{'table': 'partners', 'host': 'localhost', 'db_name': 'test'}, {'table': 'users', 'host': 'localhost', 'db_name': 'test'}, {'table': 'sales', 'host': 'localhost', 'db_name': 'test'}]]
</snippet></ROW><ROW><id>16785016</id><snippet>html = urllib.urlopen("http://yoursite.com")
soup = BeautifulSoup(html) 
prodisc_div = soup.findAll('div', attrs={class:"prodisc"})
for each in prodisc_div:
  print each.get("title")
</snippet></ROW><ROW><id>16785788</id><snippet>print sys.argv[1] # $test.py 'D:\\'
print argMock
</snippet></ROW><ROW><id>16785788</id><snippet>'D:\\'
D:\
</snippet></ROW><ROW><id>16785825</id><snippet>wx.TE_READONLY</snippet></ROW><ROW><id>16785825</id><snippet>import wx

class Frame(wx.Frame):
    def __init__(self, title):
        wx.Frame.__init__(self, None, title=title, size=(350,200))
        self.text = wx.TextCtrl(self, -1, style=wx.TE_READONLY)
        self.btn1 = wx.Button(self, -1, "Right button")
        self.btn2 = wx.Button(self, -1, "Wrong button")
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.text, 1, wx.ALL | wx.EXPAND, 5)
        sizer.Add(self.btn1, 1, wx.ALL | wx.EXPAND, 5)
        sizer.Add(self.btn2, 1, wx.ALL | wx.EXPAND, 5)
        self.SetSizer(sizer)
        self.Fit()

        self.Bind(wx.EVT_BUTTON, self.RightButtonPress, self.btn1)
        self.Bind(wx.EVT_BUTTON, self.WrongButtonPress, self.btn2)

    def RightButtonPress(self, evt):
        self.text.AppendText("Right!")

    def WrongButtonPress(self, evt):
        self.text.Clear()
        self.text.AppendText("Press again!")

app = wx.App()
top = Frame("Hello World")
top.Center()
top.Show()
app.MainLoop()
</snippet></ROW><ROW><id>16785830</id><snippet>yahoo.finance.option_contracts</snippet></ROW><ROW><id>16785830</id><snippet>env=...</snippet></ROW><ROW><id>16785830</id><snippet>use</snippet></ROW><ROW><id>16785830</id><snippet>execute()</snippet></ROW><ROW><id>16785830</id><snippet>import yql
y = yql.Public()
query = 'SELECT * FROM yahoo.finance.option_contracts WHERE symbol="SPY"'
y.execute(query, env="store://datatables.org/alltableswithkeys")
</snippet></ROW><ROW><id>16785830</id><snippet>yql.Public</snippet></ROW><ROW><id>16785830</id><snippet>class MyYql(yql.Public):

    def __init__(self, api_key=None, shared_secret=None, httplib2_inst=None, env=None):
        super(MyYql, self).__init__(api_key, shared_secret, httplib2_inst)
        self.env = env if env else None

    def execute(self, query, params=None, **kwargs):
        kwargs["env"] = kwargs.get("env", self.env)
        return super(MyYql, self).execute(query, params, **kwargs);
</snippet></ROW><ROW><id>16785830</id><snippet>y = MyYql(env="store://datatables.org/alltableswithkeys")
query = 'SELECT * FROM yahoo.finance.option_contracts WHERE symbol="SPY"'
r = y.execute(query)
</snippet></ROW><ROW><id>16785830</id><snippet>env</snippet></ROW><ROW><id>16785830</id><snippet>y.execute()</snippet></ROW><ROW><id>16785998</id><snippet>print '%-2s'%i, ''.join('%-2s ' % v[1] for v in self.gameBoard.Matrix[i] if v[0] == 'S')
</snippet></ROW><ROW><id>16785998</id><snippet>print '%-2s'%i, ''.join('%-2s ' % ((v[1] if v[0] == 'S' else 'H') for v in self.gameBoard.Matrix[i]))
</snippet></ROW><ROW><id>16786141</id><snippet>def pickSubs(self, subjects, maxWork, maxLottery):
    from itertools import chain, combinations

    validcombinations = []

    for comb in chain.from_iterable(combinations(subjects, n) 
                                    for n in range(1, len(subjects)+1):
        sumWork = sum(s.getWork() for s in comb)
        sumLottery = sum(s.getLottery() for s in comb)

        if sumWork &lt;= maxWork and sumLottery &lt;= maxLottery:
            validcombinations.append(comb)
    return validcombinations
</snippet></ROW><ROW><id>16786562</id><snippet>In [23]: classifier.prob_classify({'unknown_words': True}).prob('spam')
Out[23]: 0.40000333322222587
</snippet></ROW><ROW><id>16786710</id><snippet>&lt;tbody&gt;</snippet></ROW><ROW><id>16786710</id><snippet>&lt;tbody&gt;</snippet></ROW><ROW><id>16786710</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>16786710</id><snippet>for row in soup('table')[4]('tr'):
</snippet></ROW><ROW><id>16786934</id><snippet>import time
from scrapy.item import Item, Field

from selenium import webdriver

from scrapy.spider import BaseSpider


class ElyseAvenueItem(Item):
    name = Field()


class ElyseAvenueSpider(BaseSpider):
    name = "elyse"
    allowed_domains = ["ehealthinsurance.com"]
    start_urls = [
    'http://www.ehealthinsurance.com/individual-family-health-insurance?action=changeCensus&amp;census.zipCode=48341&amp;census.primary.gender=MALE&amp;census.requestEffectiveDate=06/01/2013&amp;census.primary.month=12&amp;census.primary.day=01&amp;census.primary.year=1971']

    def __init__(self):
        self.driver = webdriver.Firefox()

    def parse(self, response):
        self.driver.get(response.url)
        el = self.driver.find_element_by_xpath("//input[contains(@class,'btn go-btn')]")
        if el:
            el.click()

        time.sleep(10)

        plans = self.driver.find_elements_by_class_name("plan-info")
        for plan in plans:
            item = ElyseAvenueItem()
            item['name'] = plan.find_element_by_class_name('primary').text
            yield item

        self.driver.close()
</snippet></ROW><ROW><id>16786934</id><snippet>from scrapy.http import FormRequest
from scrapy.item import Item, Field
from scrapy.selector import HtmlXPathSelector

from scrapy.spider import BaseSpider


class AcrisItem(Item):
    borough = Field()
    block = Field()
    doc_type_name = Field()


class AcrisSpider(BaseSpider):
    name = "acris"
    allowed_domains = ["a836-acris.nyc.gov"]
    start_urls = ['http://a836-acris.nyc.gov/DS/DocumentSearch/DocumentType']


    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        document_classes = hxs.select('//select[@name="combox_doc_doctype"]/option')

        form_token = hxs.select('//input[@name="__RequestVerificationToken"]/@value').extract()[0]
        for document_class in document_classes:
            if document_class:
                doc_type = document_class.select('.//@value').extract()[0]
                doc_type_name = document_class.select('.//text()').extract()[0]
                formdata = {'__RequestVerificationToken': form_token,
                            'hid_selectdate': '7',
                            'hid_doctype': doc_type,
                            'hid_doctype_name': doc_type_name,
                            'hid_max_rows': '10',
                            'hid_ISIntranet': 'N',
                            'hid_SearchType': 'DOCTYPE',
                            'hid_page': '1',
                            'hid_borough': '0',
                            'hid_borough_name': 'ALL BOROUGHS',
                            'hid_ReqID': '',
                            'hid_sort': '',
                            'hid_datefromm': '',
                            'hid_datefromd': '',
                            'hid_datefromy': '',
                            'hid_datetom': '',
                            'hid_datetod': '',
                            'hid_datetoy': '', }
                yield FormRequest(url="http://a836-acris.nyc.gov/DS/DocumentSearch/DocumentTypeResult",
                                  method="POST",
                                  formdata=formdata,
                                  callback=self.parse_page,
                                  meta={'doc_type_name': doc_type_name})

    def parse_page(self, response):
        hxs = HtmlXPathSelector(response)

        rows = hxs.select('//form[@name="DATA"]/table/tbody/tr[2]/td/table/tr')
        for row in rows:
            item = AcrisItem()
            borough = row.select('.//td[2]/div/font/text()').extract()
            block = row.select('.//td[3]/div/font/text()').extract()

            if borough and block:
                item['borough'] = borough[0]
                item['block'] = block[0]
                item['doc_type_name'] = response.meta['doc_type_name']

                yield item
</snippet></ROW><ROW><id>16786934</id><snippet>spider.py</snippet></ROW><ROW><id>16786934</id><snippet>scrapy runspider spider.py -o output.json</snippet></ROW><ROW><id>16786934</id><snippet>output.json</snippet></ROW><ROW><id>16786934</id><snippet>{"doc_type_name": "CONDEMNATION PROCEEDINGS ", "borough": "Borough", "block": "Block"}
{"doc_type_name": "CERTIFICATE OF REDUCTION ", "borough": "Borough", "block": "Block"}
{"doc_type_name": "COLLATERAL MORTGAGE ", "borough": "Borough", "block": "Block"}
{"doc_type_name": "CERTIFIED COPY OF WILL ", "borough": "Borough", "block": "Block"}
{"doc_type_name": "CONFIRMATORY DEED ", "borough": "Borough", "block": "Block"}
{"doc_type_name": "CERT NONATTCHMENT FED TAX LIEN ", "borough": "Borough", "block": "Block"}
...
</snippet></ROW><ROW><id>16786993</id><snippet>app/server.py</snippet></ROW><ROW><id>16786993</id><snippet>app</snippet></ROW><ROW><id>16786993</id><snippet>sys.path()</snippet></ROW><ROW><id>16786993</id><snippet>app</snippet></ROW><ROW><id>16786993</id><snippet>server.py</snippet></ROW><ROW><id>16786993</id><snippet>app</snippet></ROW><ROW><id>16786993</id><snippet>app</snippet></ROW><ROW><id>16786993</id><snippet>from app import server
server.main()
</snippet></ROW><ROW><id>16786993</id><snippet>server.py</snippet></ROW><ROW><id>16786993</id><snippet>sys.path</snippet></ROW><ROW><id>16786993</id><snippet>import os.path
import sys

parent = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, parent)
</snippet></ROW><ROW><id>16787080</id><snippet>accept</snippet></ROW><ROW><id>16787080</id><snippet>accept</snippet></ROW><ROW><id>16787080</id><snippet>accept</snippet></ROW><ROW><id>16787080</id><snippet>conn, adr = s.accept()
print 'connected with' + adr[0] + ':' + str(adr[1])
while True:
    data = conn.recv(50)
    print data
    if not data:
        break
    conn.sendall(data)
conn.close()
s.close()
</snippet></ROW><ROW><id>16787080</id><snippet>while True:
    conn, adr = s.accept()
    print 'connected with' + adr[0] + ':' + str(adr[1])
    while True:
        data = conn.recv(50)
        print data
        if not data:
            break
        conn.sendall(data)
    conn.close()
s.close()
</snippet></ROW><ROW><id>16787080</id><snippet>select</snippet></ROW><ROW><id>16787080</id><snippet>gevent</snippet></ROW><ROW><id>16787080</id><snippet>def handle_client(conn, addr):
    print 'connected with' + adr[0] + ':' + str(adr[1])
    while True:
        data = conn.recv(50)
        print data
        if not data:
            break
        conn.sendall(data)
    conn.close()

client_threads = []
try:
    while True:
        conn, adr = s.accept()
        client_thread = threading.Thread(target=handle_client, args=[conn, addr])
        client_thread.start()
        client_threads.append(client_thread)
finally:
    s.close()
    for client_thread in client_threads:
        client_thread.join()
</snippet></ROW><ROW><id>16787080</id><snippet>with</snippet></ROW><ROW><id>16787080</id><snippet>close</snippet></ROW><ROW><id>16787080</id><snippet>try</snippet></ROW><ROW><id>16787080</id><snippet>finally</snippet></ROW><ROW><id>16787098</id><snippet>en("abcd" * 16)
</snippet></ROW><ROW><id>16787098</id><snippet>e1 = ACR4.new('0123456789123456').encrypt
e2 = ACR4.new('0123456789123456').encrypt

assert e1("abcd") == e2("abcd")
</snippet></ROW><ROW><id>16787359</id><snippet>theano.function()</snippet></ROW><ROW><id>16787359</id><snippet>f2 = th.function(outputs=z)</snippet></ROW><ROW><id>16787359</id><snippet>f2 = th.function([], outputs=z)</snippet></ROW><ROW><id>16787426</id><snippet>with open('large_file.txt') as f:
    pairs = (line.split()[:2] for line in f)
    processed_pairs = ((pair[0].split(':')[1], float(pair[1])) for pair in pairs)
    top_10_pairs = heapq.nlargest(10, processed_pairs, key=operator.itemgetter(1))
</snippet></ROW><ROW><id>16787426</id><snippet>list</snippet></ROW><ROW><id>16787426</id><snippet>name</snippet></ROW><ROW><id>16787426</id><snippet>score</snippet></ROW><ROW><id>16787426</id><snippet>for name, score in top_10_pairs:
    print('{} {}'.format(name, score))
</snippet></ROW><ROW><id>16787426</id><snippet>heapq.nlargest</snippet></ROW><ROW><id>16787426</id><snippet>n</snippet></ROW><ROW><id>16787884</id><snippet>text</snippet></ROW><ROW><id>16787884</id><snippet>string</snippet></ROW><ROW><id>16787884</id><snippet>for row in soup('table')[4]('tr'):
  tds = row('td')
  print tds[0].text, tds[1].text
</snippet></ROW><ROW><id>16787884</id><snippet>S.No:  1635925
Name:  Alex
Dog's Name:  Tiger
Cat's Name: Pussy
</snippet></ROW><ROW><id>16787884</id><snippet>string</snippet></ROW><ROW><id>16787884</id><snippet>None</snippet></ROW><ROW><id>16788072</id><snippet>from nltk import word_tokenize

with open('file_path') as f:
    content = f.read()
# we will use your text example instead:
content = "A professional is a person who is engaged in a certain activity, or occupation, for gain or compensation as means of livelihood; such as a permanent career, not as an amateur or pastime. Due to the personal and confidential nature of many professional services, and thus the necessity to place a great deal of trust in them, most professionals are subject to strict codes of conduct enshrining rigorous ethical and moral obligations."

def Count_Word(word, data):
    c = 0
    tokens = word_tokenize(data)
    for token in tokens:
        token = token.lower()
        # this plural check is dangerous, if trying to find a word that ends with an 's'
        token = token[:-1] if token[-1] == 's' else token
        if token == word:
            c += 1
    return c

print Count_Word('professional', content)
&gt;&gt;&gt;
3
</snippet></ROW><ROW><id>16788072</id><snippet>def Count_Word(word, data, leading=[], trailing=["'s", "s"]):
    c = 0
    tokens = word_tokenize(data)
    for token in tokens:
        token = token.lower()
        for lead in leading:
            if token.startswith(lead):
                token = token.partition(lead)[2]
        for trail in trailing:
            if token.endswith(trail):
                token = token.rpartition(trail)[0]
        if token == word:
            c += 1
    return c
</snippet></ROW><ROW><id>16788072</id><snippet>'s</snippet></ROW><ROW><id>16788072</id><snippet>s</snippet></ROW><ROW><id>16788135</id><snippet>@classmethod
def defer_cancel_supervisor(cls,contract_key):

    contract = qtrack.models.Contract.get(db.Key(contract_key))
    contract.cancel_supervisor('contract cancelled')
</snippet></ROW><ROW><id>16788200</id><snippet>sleep(1)</snippet></ROW><ROW><id>16788200</id><snippet>stdout</snippet></ROW><ROW><id>16788200</id><snippet>stdout</snippet></ROW><ROW><id>16788200</id><snippet>stderr</snippet></ROW><ROW><id>16788200</id><snippet>ctypes</snippet></ROW><ROW><id>16788200</id><snippet>PyPy</snippet></ROW><ROW><id>16788303</id><snippet>b</snippet></ROW><ROW><id>16788303</id><snippet>datetime</snippet></ROW><ROW><id>16788303</id><snippet>subtime</snippet></ROW><ROW><id>16788303</id><snippet>def subtime(a,b):
    subtract = datetime.timedelta(hours=b)
    difference = a - subtract
    return difference
</snippet></ROW><ROW><id>16788303</id><snippet>datetime</snippet></ROW><ROW><id>16788303</id><snippet>now</snippet></ROW><ROW><id>16788303</id><snippet>subtime(datetime.datetime(2013,11,11,11,0),10)</snippet></ROW><ROW><id>16788303</id><snippet>subtime(datetime.datetime(2013,11,11,11,0),24)</snippet></ROW><ROW><id>16788303</id><snippet>subtime(datetime.datetime(2013,11,11,11,0),30)</snippet></ROW><ROW><id>16788303</id><snippet>subtime(datetime.datetime(2013,11,11,11,0),0)</snippet></ROW><ROW><id>16788303</id><snippet>subtime(datetime.datetime(2013,11,11,11,0),-5)</snippet></ROW><ROW><id>16788303</id><snippet>datetime.datetime(2013, 11, 11, 1, 0)</snippet></ROW><ROW><id>16788303</id><snippet>datetime.datetime(2013, 11, 10, 11, 0)</snippet></ROW><ROW><id>16788303</id><snippet>datetime.datetime(2013, 11, 10, 5, 0)</snippet></ROW><ROW><id>16788303</id><snippet>datetime.datetime(2013, 11, 11, 11, 0)</snippet></ROW><ROW><id>16788303</id><snippet>datetime.datetime(2013, 11, 11, 16, 0)</snippet></ROW><ROW><id>16788303</id><snippet>""" """</snippet></ROW><ROW><id>16788303</id><snippet>def subtime(a,b):
    """ (datetime,int) -&gt; datetime 
    Subtract b hours from a datetime.datetime and return the new datetime object

    &gt;&gt;&gt; subtime(datetime.datetime(2013,11,11,11,0),10)
    datetime.datetime(2013, 11, 11, 1, 0)

    &gt;&gt;&gt; subtime(datetime.datetime(2013,11,11,11,0),24)
    datetime.datetime(2013, 11, 10, 11, 0)

    &gt;&gt;&gt; subtime(datetime.datetime(2013,11,11,11,0),30)
    datetime.datetime(2013, 11, 10, 5, 0)

    &gt;&gt;&gt; subtime(datetime.datetime(2013,11,11,11,0),0)
    datetime.datetime(2013, 11, 11, 11, 0)

    &gt;&gt;&gt; subtime(datetime.datetime(2013,11,11,11,0),-5)
    datetime.datetime(2013, 11, 11, 16, 0)

    """
    subtract = datetime.timedelta(hours=b)
    difference = now - subtract
    return difference
</snippet></ROW><ROW><id>16788303</id><snippet>import datetime
import doctest
import os

def parseOptions():

    import optparse
    parser = optparse.OptionParser(usage= '-h')
    parser.add_option('-d', '--difference', \
                      type= 'int')
    (options, args) = parser.parse_args()
    return options
now = datetime.datetime.now()

def subtime(a,b):
    """ (datetime,int) -&gt; datetime 
    Subtract b hours from a datetime.datetime and return the new datetime object

    &gt;&gt;&gt; subtime(datetime.datetime(2013,11,11,11,0),10)
    datetime.datetime(2013, 11, 11, 1, 0)

    &gt;&gt;&gt; subtime(datetime.datetime(2013,11,11,11,0),24)
    datetime.datetime(2013, 11, 10, 11, 0)

    &gt;&gt;&gt; subtime(datetime.datetime(2013,11,11,11,0),30)
    datetime.datetime(2013, 11, 10, 5, 0)

    &gt;&gt;&gt; subtime(datetime.datetime(2013,11,11,11,0),0)
    datetime.datetime(2013, 11, 11, 11, 0)

    &gt;&gt;&gt; subtime(datetime.datetime(2013,11,11,11,0),-5)
    datetime.datetime(2013, 11, 11, 16, 0)

    """
    subtract = datetime.timedelta(hours=b)
    difference = a - subtract
    return difference

if __name__== "__main__":
    doctest.testmod()    

print
print 'This is the time now -', now.strftime("%I:%M:%S %p %a, %B %d %Y")
difference=subtime(now,10)
print 'This is the time minus the difference -', difference.strftime("%I:%M:%S %p %a, %B %d %Y")
print
</snippet></ROW><ROW><id>16788303</id><snippet>$ python try.py 

This is the time now - 02:40:57 PM Tue, May 28 2013
This is the time minus the difference - 04:40:57 AM Tue, May 28 2013
</snippet></ROW><ROW><id>16788387</id><snippet>\1</snippet></ROW><ROW><id>16788387</id><snippet>translation = re.sub(r"'''([a-zA-Z0-9].*?)'''", r"&lt;b&gt;\1&lt;/b&gt;", translation)
</snippet></ROW><ROW><id>16788656</id><snippet>struct net_device</snippet></ROW><ROW><id>16788656</id><snippet>struct pci_dev</snippet></ROW><ROW><id>16788656</id><snippet>make headers_install</snippet></ROW><ROW><id>16788656</id><snippet>struct net_device</snippet></ROW><ROW><id>16788656</id><snippet>struct pci_dev</snippet></ROW><ROW><id>16788656</id><snippet>struct my_struct</snippet></ROW><ROW><id>16788656</id><snippet>$ gdb /usr/lib/debug/lib/modules/3.9.4-200.fc18.x86_64/vmlinux vmcore
(gdb) add-symbol-file MY-DRIVER.ko TEXT-ADDR -s .data DATA-ADDR -s .bss BSS-ADDR
</snippet></ROW><ROW><id>16788656</id><snippet>struct *my_struct</snippet></ROW><ROW><id>16788656</id><snippet>import gdb

def is_container(v):
    c = v.type.code
    return (c == gdb.TYPE_CODE_STRUCT or c == gdb.TYPE_CODE_UNION)

def is_pointer(v):
    return (v.type.code == gdb.TYPE_CODE_PTR)

def print_struct_follow_pointers(s, level_limit = 3, level = 0):
    indent = ' ' * level

    if not is_container(s):
        gdb.write('%s\n' % (s,))
        return

    if level &gt;= level_limit:
        gdb.write('%s { ... },\n' % (s.type,))
        return

    gdb.write('%s {\n' % (s.type,))
    for k in s.type.keys():
        v = s[k]
        if is_pointer(v):
            gdb.write('%s %s: %s' % (indent, k, v))
            try:
                v1 = v.dereference()
                v1.fetch_lazy()
            except gdb.error:
                gdb.write(',\n')
                continue
            else:
                gdb.write(' -&gt; ')
            print_struct_follow_pointers(v1, level_limit, level + 1)
        elif is_container(v):
            gdb.write('%s %s: ' % (indent, k))
            print_struct_follow_pointers(v, level_limit, level + 1)
        else:
            gdb.write('%s %s: %s,\n' % (indent, k, v))
    gdb.write('%s},\n' % (indent,))

class PrintStructFollowPointers(gdb.Command):
    '''
    print-struct-follow-pointers [/LEVEL_LIMIT] STRUCT-VALUE
    '''
    def __init__(self): 
        super(PrintStructFollowPointers, self).__init__(
            'print-struct-follow-pointers',
            gdb.COMMAND_DATA, gdb.COMPLETE_SYMBOL, False)

    def invoke(self, arg, from_tty):
        s = arg.find('/')
        if s == -1:
            (expr, limit) = (arg, 3)
        else:
            if arg[:s].strip():
                (expr, limit) = (arg, 3)
            else:
                i = s + 1
                for (i, c) in enumerate(arg[s+1:], s + 1):
                    if not c.isdigit():
                        break
                end = i
                digits = arg[s+1:end]
                try:
                    limit = int(digits)
                except ValueError:
                    raise gdb.GdbError(PrintStructFollowPointers.__doc__)
                (expr, limit) = (arg[end:], limit)
        try:
            v = gdb.parse_and_eval(expr)
        except gdb.error, e:
            raise gdb.GdbError(e.message)

        print_struct_follow_pointers(v, limit)

PrintStructFollowPointers()
</snippet></ROW><ROW><id>16788656</id><snippet>(gdb) source print-struct-follow-pointers.py
(gdb) print-struct-follow-pointers *p
</snippet></ROW><ROW><id>16788656</id><snippet>(gdb) print-struct-follow-pointers/4 *p
</snippet></ROW><ROW><id>16788912</id><snippet>os.listdir</snippet></ROW><ROW><id>16788912</id><snippet>os.walk</snippet></ROW><ROW><id>16788912</id><snippet>importlib</snippet></ROW><ROW><id>16788912</id><snippet>imp</snippet></ROW><ROW><id>16788912</id><snippet>__init__.py</snippet></ROW><ROW><id>16788912</id><snippet>os.path.dirname(__file__)</snippet></ROW><ROW><id>16788912</id><snippet>from foo import *</snippet></ROW><ROW><id>16788912</id><snippet>import foo</snippet></ROW><ROW><id>16788912</id><snippet>execfile</snippet></ROW><ROW><id>16789005</id><snippet>&lt;img src="/media/img/600X160_1.png"&gt;
</snippet></ROW><ROW><id>16789005</id><snippet>&lt;img src="/media/img/600X160.png"&gt;
</snippet></ROW><ROW><id>16789066</id><snippet>sqlite3</snippet></ROW><ROW><id>16789066</id><snippet>INTEGER</snippet></ROW><ROW><id>16789066</id><snippet>VARCHAR</snippet></ROW><ROW><id>16789066</id><snippet>NUMERIC</snippet></ROW><ROW><id>16789066</id><snippet>str</snippet></ROW><ROW><id>16789066</id><snippet>bytes</snippet></ROW><ROW><id>16789066</id><snippet>buffer</snippet></ROW><ROW><id>16789066</id><snippet>integet</snippet></ROW><ROW><id>16789066</id><snippet>INTEGER</snippet></ROW><ROW><id>16789066</id><snippet>'abc'</snippet></ROW><ROW><id>16789066</id><snippet>INTEGER</snippet></ROW><ROW><id>16789066</id><snippet>int</snippet></ROW><ROW><id>16789066</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>16789066</id><snippet>CREATE TABLE yyy(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, num INTEGER)
INSERT INTO yyy SELECT * FROM xxx
DROP TABLE xxx
ALTER TABLE yyy RENAME TO xxx
</snippet></ROW><ROW><id>16789066</id><snippet>INTEGER</snippet></ROW><ROW><id>16789066</id><snippet>int</snippet></ROW><ROW><id>16789066</id><snippet>bytes</snippet></ROW><ROW><id>16789066</id><snippet>str</snippet></ROW><ROW><id>16789183</id><snippet>__init__</snippet></ROW><ROW><id>16789183</id><snippet>__str__</snippet></ROW><ROW><id>16789183</id><snippet>class DataCollectorError(Exception):
    def __init__(self, msg=''):
        self.msg = msg
        log(msg)  # use your logging things here

    def __str__(self):
        return self.msg
</snippet></ROW><ROW><id>16789183</id><snippet>msg=''</snippet></ROW><ROW><id>16789204</id><snippet>filter(None, (r[0].value for r in sheet.range(USERROLELIST)))
</snippet></ROW><ROW><id>16789221</id><snippet>tempfile = open(tempFilePath, 'wb')
</snippet></ROW><ROW><id>16789254</id><snippet>In [10]: df = pd.DataFrame([[1, 2], [3, 4]], columns=['A', 'B'])

In [11]: df
Out[11]:
   A  B
0  1  2
1  3  4

In [12]: df[['A']]

In [13]: df[[0]]

In [14]: df.loc[:, ['A']]

In [15]: df.iloc[:, [0]]

Out[12-15]:  # they all return the same thing:
   A
0  1
1  3
</snippet></ROW><ROW><id>16789254</id><snippet>In [16]: df = pd.DataFrame([[1, 2], [3, 4]], columns=['A', 0])

In [17]: df
Out[17]:
   A  0
0  1  2
1  3  4

In [18]: df[[0]]  # ambiguous
Out[18]:
   A
0  1
1  3
</snippet></ROW><ROW><id>16789308</id><snippet>query = 'select * from test where data in ({})'.format(','.join(['?']*len(my_list)))
curr.execute(query, my_list)
</snippet></ROW><ROW><id>16789326</id><snippet>\n</snippet></ROW><ROW><id>16789326</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>16789326</id><snippet>\r\n</snippet></ROW><ROW><id>16789326</id><snippet>\n</snippet></ROW><ROW><id>16789326</id><snippet>'\r\n'.join(mail_body)
</snippet></ROW><ROW><id>16789326</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>16789326</id><snippet>'&lt;br&gt;'.join(mail_body)
</snippet></ROW><ROW><id>16789326</id><snippet>'\r\n&lt;br&gt;'.join(mail_body) 
</snippet></ROW><ROW><id>16789456</id><snippet>ir.sequence</snippet></ROW><ROW><id>16789790</id><snippet>os.path.join(path1[, path2[, ...]])</snippet></ROW><ROW><id>16789790</id><snippet>path1</snippet></ROW><ROW><id>16789790</id><snippet>path2</snippet></ROW><ROW><id>16789790</id><snippet>os.sep</snippet></ROW><ROW><id>16789790</id><snippet>os.path.join("c:", "foo")</snippet></ROW><ROW><id>16789790</id><snippet>C:</snippet></ROW><ROW><id>16789790</id><snippet>c:foo</snippet></ROW><ROW><id>16789790</id><snippet>c:\foo</snippet></ROW><ROW><id>16789790</id><snippet>os.path.join</snippet></ROW><ROW><id>16789790</id><snippet>&gt;&gt;&gt; os.path.join("/home/", "/home/foo")
'/home/foo'
&gt;&gt;&gt; "/home/" + os.sep + "/home/foo"
'/home///home/foo'
</snippet></ROW><ROW><id>16789790</id><snippet>os.path.join</snippet></ROW><ROW><id>16789799</id><snippet>Map</snippet></ROW><ROW><id>16789799</id><snippet>Map&lt;String, String&gt; map = new HashMap&lt;String,String&gt;();
map.put("cat_id", "12345");
</snippet></ROW><ROW><id>16789799</id><snippet>Gson gson = new Gson();
method.getParams().setParameter("q", gson.toJson(map));
</snippet></ROW><ROW><id>16789844</id><snippet>import numpy as np
si, se = np.where(~x.mask)
x = x[si.min():si.max() + 1, se.min():se.max() + 1]
</snippet></ROW><ROW><id>16790065</id><snippet>csrfmiddlewaretoken</snippet></ROW><ROW><id>16790065</id><snippet>&lt;script&gt;
$(function () {
    function getCookie(name) {
        var cookieValue = null;
        if (document.cookie &amp;&amp; document.cookie != '') {
            var cookies = document.cookie.split(';');
            for (var i = 0; i &lt; cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                // Does this cookie string begin with the name we want?
                if (cookie.substring(0, name.length + 1) == (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }
    var csrftoken = getCookie('csrftoken');

    $("button")
        .button()
        .click(function (event) {
            var postdata = {
                'value1': 7,
                'value2': 5,
                'csrfmiddlewaretoken': csrftoken
            };
            $.post('', postdata); // POST request to the same view I am now
            window.alert("Hello world!"); // To know it is working
        });
});
&lt;/script&gt;
</snippet></ROW><ROW><id>16790119</id><snippet>form.Form</snippet></ROW><ROW><id>16790119</id><snippet>class Profile(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    email = models.EmailField()
    phone = models.IntegerField()
    profile_summary = models.TextField()
    # .. some more fields ..
</snippet></ROW><ROW><id>16790119</id><snippet>&lt;form id="profile-form"&gt;
    &lt;div&gt;
        &lt;label&gt;First Name&lt;/label&gt;
        &lt;input name="first_name" type="text" /&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;label&gt;Last Name&lt;/label&gt;
        &lt;input name="last_name" type="text" /&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;label&gt;Email&lt;/label&gt;
        &lt;input name="email" type="text" /&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;label&gt;Phone Number&lt;/label&gt;
        &lt;input name="phone" type="text" /&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;label&gt;Profile Summary&lt;/label&gt;
        &lt;textarea name="profile_summary"&gt;&lt;/textarea&gt;
    &lt;/div&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>16790119</id><snippet>def update_profile(request):
    if request.method == 'POST'
        first_name = request.POST.get('first_name')
        # Do this for all the fields and validate them 
        # manually
</snippet></ROW><ROW><id>16790119</id><snippet>django.forms.Form</snippet></ROW><ROW><id>16790119</id><snippet>from django import forms

class ProfileForm(forms.Form):
    first_name = forms.CharField()
    last_name = forms.CharField()
    email = forms.EmailField()
    phone = forms.IntegerField()
    summary = forms.TextField()
    # Notice the code duplication here
    # we already have this defined in our models.
</snippet></ROW><ROW><id>16790119</id><snippet>from django import forms

class ProfileForm(forms.ModelForm)
    class Meta:
        model = models.Profile
</snippet></ROW><ROW><id>16790119</id><snippet>ModelForm</snippet></ROW><ROW><id>16790119</id><snippet>exclude</snippet></ROW><ROW><id>16790119</id><snippet>fields</snippet></ROW><ROW><id>16790119</id><snippet>from django import forms

class ProfileForm(forms.ModelForm)
    class Meta:
        model = models.Profile
        exclude = ('phone',)
</snippet></ROW><ROW><id>16790119</id><snippet>from django import forms

class ProfileForm(forms.ModelForm)
    class Meta:
        model = models.Profile
        fields = ('first_name', 'last_name', 'email', 'profile_summary')
</snippet></ROW><ROW><id>16790119</id><snippet>original attributes are not supposed to be changed</snippet></ROW><ROW><id>16790180</id><snippet>os.chmod</snippet></ROW><ROW><id>16790180</id><snippet>chmod</snippet></ROW><ROW><id>16790180</id><snippet>chmod</snippet></ROW><ROW><id>16790180</id><snippet>chmod 2770 test
</snippet></ROW><ROW><id>16790180</id><snippet>os.chmod('test', 0o2770)
</snippet></ROW><ROW><id>16790180</id><snippet>os.chmod('test', 2770)</snippet></ROW><ROW><id>16790180</id><snippet>5322</snippet></ROW><ROW><id>16790455</id><snippet>simplejson</snippet></ROW><ROW><id>16790455</id><snippet>json</snippet></ROW><ROW><id>16790455</id><snippet>data = serializers.serialize('json', self.get_queryset())
return HttpResponse(data, mimetype="application/json")
</snippet></ROW><ROW><id>16790455</id><snippet>self.get_queryset()</snippet></ROW><ROW><id>16790455</id><snippet>self.get_queryset()</snippet></ROW><ROW><id>16790455</id><snippet>model_to_dict</snippet></ROW><ROW><id>16790455</id><snippet>from django.forms.models import model_to_dict

data = self.get_queryset()

for item in data:
   item['product'] = model_to_dict(item['product'])

return HttpResponse(json.simplejson.dumps(data), mimetype="application/json")
</snippet></ROW><ROW><id>16790860</id><snippet>)</snippet></ROW><ROW><id>16790860</id><snippet>population -= (random.randint(1, 3))
                                   ^
                                   |
</snippet></ROW><ROW><id>16790934</id><snippet>__lock</snippet></ROW><ROW><id>16790967</id><snippet>requests</snippet></ROW><ROW><id>16790967</id><snippet>dict</snippet></ROW><ROW><id>16790967</id><snippet>requests</snippet></ROW><ROW><id>16791199</id><snippet>ax = Axes3D(plt.gcf())
ax.scatter( Xc[l], Yc[l], Zc[l], c=(i/nbodies,i/nbodies,i/nbodies))
</snippet></ROW><ROW><id>16791199</id><snippet>fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter( Xc[l], Yc[l], Zc[l], c=(i/nbodies,i/nbodies,i/nbodies))
</snippet></ROW><ROW><id>16791502</id><snippet>CTRL-@</snippet></ROW><ROW><id>16791502</id><snippet>&lt;NL&gt;</snippet></ROW><ROW><id>16791502</id><snippet>CTRL-J</snippet></ROW><ROW><id>16791502</id><snippet>append()</snippet></ROW><ROW><id>16791502</id><snippet>CTRL-@</snippet></ROW><ROW><id>16791502</id><snippet>split()</snippet></ROW><ROW><id>16791502</id><snippet>function! Test()
python &lt;&lt; EOF
import vim
str = "\n"
vim.command("let rs = append(line('$'), split('%s', '\\n', 1))"%str)
EOF
endfunction
</snippet></ROW><ROW><id>16791727</id><snippet>askopenfilenames</snippet></ROW><ROW><id>16791727</id><snippet>splitlist</snippet></ROW><ROW><id>16791727</id><snippet>import Tkinter,tkFileDialog

root = Tkinter.Tk()
filez = tkFileDialog.askopenfilenames(parent=root,title='Choose a file')
print root.tk.splitlist(filez)
</snippet></ROW><ROW><id>16792496</id><snippet>from main import bodies
def fun_name():
    # ...
</snippet></ROW><ROW><id>16792496</id><snippet>main.py</snippet></ROW><ROW><id>16792496</id><snippet>submodule.py</snippet></ROW><ROW><id>16792618</id><snippet>SomeParam</snippet></ROW><ROW><id>16792618</id><snippet>Param</snippet></ROW><ROW><id>16792618</id><snippet>ParamMeta</snippet></ROW><ROW><id>16792618</id><snippet>type()</snippet></ROW><ROW><id>16792618</id><snippet>SomeParam</snippet></ROW><ROW><id>16792618</id><snippet>Param</snippet></ROW><ROW><id>16792618</id><snippet>SomeParam</snippet></ROW><ROW><id>16792618</id><snippet>Param</snippet></ROW><ROW><id>16792618</id><snippet>Param</snippet></ROW><ROW><id>16792618</id><snippet>issubclass()</snippet></ROW><ROW><id>16792618</id><snippet>isinstance</snippet></ROW><ROW><id>16792618</id><snippet>issubclass(SomeParam, Param)</snippet></ROW><ROW><id>16792618</id><snippet>type(SomeParam)</snippet></ROW><ROW><id>16792618</id><snippet>Param</snippet></ROW><ROW><id>16792618</id><snippet>type</snippet></ROW><ROW><id>16792766</id><snippet>iterparse()</snippet></ROW><ROW><id>16792766</id><snippet>for event, element in et.iterparse(f):
    if element.tag == 'interesting_part':
        # `element` is the complete &lt;interesting_part&gt; element, with children
        # process it
        break  # ends parsing.
</snippet></ROW><ROW><id>16792809</id><snippet>at</snippet></ROW><ROW><id>16792809</id><snippet>In [24]: p = Panel(randn(1,1,1))

In [25]: %timeit p.at[0,0,0]
100000 loops, best of 3: 5.33 us per loop

In [26]: p = Panel(randn(10,10,10))

In [27]: %timeit p.at[0,0,0]
100000 loops, best of 3: 5.34 us per loop

In [28]: p = Panel(randn(100,100,100))

In [29]: %timeit p.at[0,0,0]
100000 loops, best of 3: 5.28 us per loop

In [30]: p = Panel(randn(1000,1000,1000))

In [31]: %timeit p.at[0,0,0]
100000 loops, best of 3: 5.36 us per loop
</snippet></ROW><ROW><id>16793387</id><snippet>SetEnv</snippet></ROW><ROW><id>16793711</id><snippet>reversedict</snippet></ROW><ROW><id>16793711</id><snippet>reversedict</snippet></ROW><ROW><id>16793711</id><snippet>reversedict</snippet></ROW><ROW><id>16793711</id><snippet>~</snippet></ROW><ROW><id>16793938</id><snippet>myArray = [j,i,z,w]
</snippet></ROW><ROW><id>16793938</id><snippet>myArray = numpy.array([j,i,z,w])
</snippet></ROW><ROW><id>16794085</id><snippet>&gt;&gt;&gt; [x for x in k if x.data in f]
[&lt;__main__.A instance at 0x92b1c0c&gt;, &lt;__main__.A instance at 0x92b1c4c&gt;]
</snippet></ROW><ROW><id>16794199</id><snippet>CrawlSpider</snippet></ROW><ROW><id>16794199</id><snippet>BaseSpider</snippet></ROW><ROW><id>16794199</id><snippet>for</snippet></ROW><ROW><id>16794199</id><snippet>for site in sites:
</snippet></ROW><ROW><id>16794199</id><snippet>yield</snippet></ROW><ROW><id>16794199</id><snippet>return</snippet></ROW><ROW><id>16794199</id><snippet>yield request
</snippet></ROW><ROW><id>16794199</id><snippet>item</snippet></ROW><ROW><id>16794199</id><snippet>response.request.meta</snippet></ROW><ROW><id>16794199</id><snippet>response.meta</snippet></ROW><ROW><id>16794199</id><snippet>item = response.request.meta['item']
</snippet></ROW><ROW><id>16794199</id><snippet>from scrapy.http import Request
from eScraper.items import EscraperItem
from scrapy.selector import HtmlXPathSelector

#------------------------------------------------------------------------------ 
from scrapy.spider import BaseSpider


class ESpider(BaseSpider):
    name = "atisundarSpider"

    allowed_domains = ["atisundar.com"]

    URLSList = []

    for n in range (1,20):

        URLSList.append('http://atisundar.com/collections/sarees?page=' + str(n))
        URLSList.append('http://atisundar.com/collections/salwar-suits?page=' + str(n))

    start_urls = URLSList

def parse(self, response):
    item = EscraperItem()
    hxs = HtmlXPathSelector(response)
    sites = hxs.select('//div[@class="block product size-medium"]')
    for site in sites:
        item = EscraperItem()
        item['productDesc'] = "" 
        item['productSite'] = ["http://atisundar.com/"]
        item['productTitle'] = site.select('.//div[@class="main"]/a/@title').extract()
        item['productURL'] = ["http://atisundar.com" + site.select('.//div[@class="main"]/a/@href').extract()[0].encode('utf-8')]
        item['productPrice'] = site.select('.//p[@class="pricearea"]//span[@class="was-price"]/text()').extract() + site.select('.//p[@class="pricearea"]//span[@class="price"]/text()').extract() 
        item['productImage'] = [site.select('.//div[@class="main"]/a/img/@src').extract()[0].split('?')[0]] + [site.select('.//div[@class="main"]/a/img/@src').extract()[0].split('?')[0].replace("medium","grande")]
        item['image_urls'] = item['productImage']
        secondURL = "http://admin.atisundar.com/store/skuDetails?product_id=" + site.select('.//div[@class="main"]/a/text()').extract()[1].strip().split("#")[-1]
        request = Request(secondURL,
                  callback=self.parse_page2)
        request.meta['item'] = item 
        yield request

def parse_page2(self, response):

    item = response.request.meta['item']
    #item['other_url'] = response.url
    return item
</snippet></ROW><ROW><id>16794432</id><snippet>list</snippet></ROW><ROW><id>16794432</id><snippet>list</snippet></ROW><ROW><id>16794432</id><snippet>from collections import Sequence  # ABC for lists and tuples

def tosequence(it):
    """Convert iterable to sequence, avoiding unnecessary copies."""
    return it if isinstance(it, Sequence) else list(it)
</snippet></ROW><ROW><id>16794432</id><snippet>map</snippet></ROW><ROW><id>16794432</id><snippet>lambda</snippet></ROW><ROW><id>16794803</id><snippet>(?|(?:#|//)</snippet></ROW><ROW><id>16794803</id><snippet>(</snippet></ROW><ROW><id>16794803</id><snippet>('(?'
 '|'
 '(?:#|//)([^\r\n]*)'
 '|'
 '/\*([\s\S]*?)\*/)'
 )
</snippet></ROW><ROW><id>16794803</id><snippet>re.compile('(?|a')</snippet></ROW><ROW><id>16794803</id><snippet>unexpected end of pattern</snippet></ROW><ROW><id>16794803</id><snippet>[\s\S]</snippet></ROW><ROW><id>16794803</id><snippet>\n</snippet></ROW><ROW><id>16794803</id><snippet>.</snippet></ROW><ROW><id>16794803</id><snippet>re.DOTALL</snippet></ROW><ROW><id>16794833</id><snippet>test_.*[1].*</snippet></ROW><ROW><id>16794833</id><snippet>test_</snippet></ROW><ROW><id>16794833</id><snippet>.*</snippet></ROW><ROW><id>16794833</id><snippet>.</snippet></ROW><ROW><id>16794833</id><snippet>*</snippet></ROW><ROW><id>16794833</id><snippet>[1]</snippet></ROW><ROW><id>16794833</id><snippet>1</snippet></ROW><ROW><id>16794833</id><snippet>.*</snippet></ROW><ROW><id>16794833</id><snippet>.</snippet></ROW><ROW><id>16794833</id><snippet>*</snippet></ROW><ROW><id>16794833</id><snippet>test_input_1</snippet></ROW><ROW><id>16794833</id><snippet>test_input_10</snippet></ROW><ROW><id>16794833</id><snippet>test_input_11</snippet></ROW><ROW><id>16794833</id><snippet>test_input_1</snippet></ROW><ROW><id>16794833</id><snippet>test_input_1</snippet></ROW><ROW><id>16794833</id><snippet>for item in list1:
    if item == 'test_input_1':
        # you found it!
        print ("Found: test_input_1")
</snippet></ROW><ROW><id>16794833</id><snippet>for idx, item in enumerate(list1):
    if item == 'test_input_1':
        print ('Found "test_input_1" at index %s' % idx)
</snippet></ROW><ROW><id>16794833</id><snippet>import re

def find_pattern(pattern, lst):
    regex = re.compile(pattern)
    for idx, item in enumerate(lst):
        match = regex.match(item)
        if not match:
            continue
        yield match.group(1), idx

list1=['test_input_1','test_input_2','test_input_3','test_input_10','test_input_11']
pat = r'(test_.*_1)\b'

for r in find_pattern(pat, list1):
    print 'found %s at index %s' % r

&gt;&gt;&gt; 
found test_input_1 at index 0
</snippet></ROW><ROW><id>16794922</id><snippet>csv.DictWriter()</snippet></ROW><ROW><id>16794922</id><snippet>writer.row([value for key, value in sorted(row.items())])
</snippet></ROW><ROW><id>16794922</id><snippet>DictWriter</snippet></ROW><ROW><id>16794922</id><snippet>writer = csv.DictWriter(open('dict.csv','wb'), fieldnames=reader.fieldnames)
</snippet></ROW><ROW><id>16794922</id><snippet>DictReader()</snippet></ROW><ROW><id>16795081</id><snippet>template_folder</snippet></ROW><ROW><id>16795081</id><snippet>app = Flask(__name__, template_folder='../templates')
</snippet></ROW><ROW><id>16795081</id><snippet>create_app</snippet></ROW><ROW><id>16795081</id><snippet>def create_app(conf_obj=BaseSettings, conf_file='/etc/mysettings.cfg'):
    app = Flask(__name__)
    app.config.from_object(conf_obj)
    app.config.from_pyfile(conf_file, silent=True)
    .... blueprints etc
    return app
</snippet></ROW><ROW><id>16795081</id><snippet>class TestFoo(unittest.TestCase):

    def setUp(self):
        self.app = create_app(TestSettings)
        ....
</snippet></ROW><ROW><id>16795106</id><snippet>list comprehension</snippet></ROW><ROW><id>16795106</id><snippet>str.join()</snippet></ROW><ROW><id>16795106</id><snippet>&gt;&gt;&gt; lis = [[0, 3], [1, 2], [2, 1], [3, 0]]
&gt;&gt;&gt; ["x" + "".join(map(str,x))  for x in lis]
['x03', 'x12', 'x21', 'x30']

&gt;&gt;&gt; lis = [[0, 0, 3], [0, 1, 2], [0, 2, 1], [0, 3, 0], [1, 0, 2], [1, 1, 1], [1, 2, 0], [2, 0, 1], [2, 1, 0], [3, 0, 0]]
&gt;&gt;&gt; ["x" + "".join(map(str,x))  for x in lis]
['x003', 'x012', 'x021', 'x030', 'x102', 'x111', 'x120', 'x201', 'x210', 'x300']
</snippet></ROW><ROW><id>16795106</id><snippet>map(str, sequence)</snippet></ROW><ROW><id>16795106</id><snippet>str</snippet></ROW><ROW><id>16795106</id><snippet>str.join</snippet></ROW><ROW><id>16795106</id><snippet>&gt;&gt;&gt; map(str, [1,2,3])
['1', '2', '3']
</snippet></ROW><ROW><id>16795184</id><snippet>Y.tail(1).plot(style='rx')
</snippet></ROW><ROW><id>16795897</id><snippet>re.match()</snippet></ROW><ROW><id>16795897</id><snippet>CMord01</snippet></ROW><ROW><id>16795897</id><snippet>C</snippet></ROW><ROW><id>16795897</id><snippet>O</snippet></ROW><ROW><id>16795897</id><snippet>re.search()</snippet></ROW><ROW><id>16796132</id><snippet>ndb.Key('Modelclass', str(&lt;id&gt;))
</snippet></ROW><ROW><id>16796207</id><snippet>plt.clf()
</snippet></ROW><ROW><id>16796207</id><snippet>plt.close()
</snippet></ROW><ROW><id>16796207</id><snippet>after the for j in range(0,len(bodies[0][2])-1,10):</snippet></ROW><ROW><id>16796520</id><snippet>datetime</snippet></ROW><ROW><id>16796520</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; def parsedate(s):
...     return datetime.strptime(s, '%M-%d-%Y')
&gt;&gt;&gt; keys = [parsedate(x[0]) for x in A]
</snippet></ROW><ROW><id>16796520</id><snippet>&gt;&gt;&gt; from bisect import bisect_left, bisect_right
&gt;&gt;&gt; left = bisect_left(keys, parsedate('05-22-2013'))
&gt;&gt;&gt; right = bisect_right(keys, parsedate('05-24-2013'))
</snippet></ROW><ROW><id>16796520</id><snippet>A[left:right]</snippet></ROW><ROW><id>16796654</id><snippet>def checkPlayerCardInput(answer):
    while True:
        for x in range(len(player1Cards)):
            if answer.lower() == player1Cards[x]:
                return player1[x]
        answer = raw_input('incorrect answer!')
</snippet></ROW><ROW><id>16796717</id><snippet>def digits(n):
    return max(0,-n.as_tuple().exponent)
</snippet></ROW><ROW><id>16796750</id><snippet>for arg in sys.argv[1:]:
    print arg
    s=meanarr(arg)
</snippet></ROW><ROW><id>16796990</id><snippet>&gt;&gt;&gt; re.compile(r"\[([^\]]*)\]").sub("&lt;ol&gt;\\1&lt;/ol&gt;", "b[#a]c")
'b&lt;ol&gt;#a&lt;/ol&gt;c'
</snippet></ROW><ROW><id>16796990</id><snippet>[^\]]</snippet></ROW><ROW><id>16796990</id><snippet>\[</snippet></ROW><ROW><id>16796990</id><snippet>#</snippet></ROW><ROW><id>16796990</id><snippet>&gt;&gt;&gt; re.compile(r"\[([^\]]*#[^\]]*)\]").sub("&lt;ol&gt;\\1&lt;/ol&gt;", "b[#a]c")
'b&lt;ol&gt;#a&lt;/ol&gt;c'
&gt;&gt;&gt; re.compile(r"\[([^\]]*#[^\]]*)\]").sub("&lt;ol&gt;\\1&lt;/ol&gt;", "b[gggg]c")
'b[gggg]c'
</snippet></ROW><ROW><id>16796990</id><snippet>.</snippet></ROW><ROW><id>16797041</id><snippet>f()</snippet></ROW><ROW><id>16797041</id><snippet>m</snippet></ROW><ROW><id>16797041</id><snippet>m</snippet></ROW><ROW><id>16797041</id><snippet>x = m</snippet></ROW><ROW><id>16797041</id><snippet>m</snippet></ROW><ROW><id>16797041</id><snippet>f()</snippet></ROW><ROW><id>16797041</id><snippet>m</snippet></ROW><ROW><id>16797041</id><snippet>g()</snippet></ROW><ROW><id>16797041</id><snippet>m</snippet></ROW><ROW><id>16797041</id><snippet>x = m</snippet></ROW><ROW><id>16797041</id><snippet>m</snippet></ROW><ROW><id>16797041</id><snippet>g()</snippet></ROW><ROW><id>16797041</id><snippet>global</snippet></ROW><ROW><id>16797041</id><snippet>nonlocal</snippet></ROW><ROW><id>16797041</id><snippet>nonlocal</snippet></ROW><ROW><id>16797128</id><snippet>dummy.next is dummy</snippet></ROW><ROW><id>16797160</id><snippet>class Weapon:
  def __init__( self, name = 'Stick', high = 1, low = 0 ):
    self.name = name
    self.high = high
    self.low = low

wepstats = ( 'Sword', 5, 55 )

sword = Weapon( *wepstats )
</snippet></ROW><ROW><id>16797160</id><snippet>&gt;&gt;&gt; sword.name
'Sword'

&gt;&gt;&gt; sword.high
5

&gt;&gt;&gt; sword.low
55
</snippet></ROW><ROW><id>16797160</id><snippet>*wepstats</snippet></ROW><ROW><id>16797263</id><snippet>/dev/null</snippet></ROW><ROW><id>16797263</id><snippet>&gt;/dev/null 2&gt;&amp;1</snippet></ROW><ROW><id>16797263</id><snippet>/dev/null</snippet></ROW><ROW><id>16797263</id><snippet>&amp;&gt;/dev/null</snippet></ROW><ROW><id>16797779</id><snippet>urllib</snippet></ROW><ROW><id>16797779</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>16797779</id><snippet>subprocess</snippet></ROW><ROW><id>16797779</id><snippet>convert -quality 100 *.png maps.mov
</snippet></ROW><ROW><id>16797779</id><snippet>convert -set delay 3 -loop 0 -scale 50% *.png maps.gif
</snippet></ROW><ROW><id>16797795</id><snippet>preference_type=daily</snippet></ROW><ROW><id>16797930</id><snippet>with open(r'C:\path\to\logons.txt', 'r') as f:
    for line in f:
        data = line.split()    # Splits on whitespace
        print '{0[0]:&lt;15}{0[1]:&lt;15}{0[2]:&lt;5}{0[3]:&lt;15}{0[4]:&gt;15}'.format(data)
</snippet></ROW><ROW><id>16797973</id><snippet>stringobject.h</snippet></ROW><ROW><id>16797973</id><snippet>typedef struct {
    PyObject_VAR_HEAD
    long ob_shash;
    int ob_sstate;
    char ob_sval[1];

    /* Invariants:
     *     ob_sval contains space for 'ob_size+1' elements.
     *     ob_sval[ob_size] == 0.
     *     ob_shash is the hash of the string or -1 if not computed yet.
     *     ob_sstate != 0 iff the string object is in stringobject.c's
     *       'interned' dictionary; in this case the two references
     *       from 'interned' to this object are *not counted* in ob_refcnt.
     */
} PyStringObject;
</snippet></ROW><ROW><id>16797973</id><snippet>len(str)+1</snippet></ROW><ROW><id>16798266</id><snippet>import psycopg2

query = """
    select array(select * from (values (1), (2)) s);
"""

conn = psycopg2.connect('dbname=cpn user=cpn')
cursor = conn.cursor()
cursor.execute(query)
rs = cursor.fetchall()

for l in rs:
    print l[0]

cursor.close()
conn.close()
</snippet></ROW><ROW><id>16798266</id><snippet>$ python stackoverflow_select_array.py 
[1, 2]
</snippet></ROW><ROW><id>16798266</id><snippet>import psycopg2, psycopg2.extras

query = """
    select array(
        select *
        from (values
            ('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11'::uuid),
            ('A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11'::uuid)
        )s
    );
"""

psycopg2.extras.register_uuid()

conn = psycopg2.connect('dbname=cpn user=cpn')
cursor = conn.cursor()
cursor.execute(query)
rs = cursor.fetchall()

for l in rs:
    print l[0]

cursor.close()
conn.close()
</snippet></ROW><ROW><id>16798266</id><snippet>$ python stackoverflow_select_array.py 
[UUID('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'), UUID('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11')]
</snippet></ROW><ROW><id>16798314</id><snippet>matplotlib.dates.datestr2num</snippet></ROW><ROW><id>16798314</id><snippet>import numpy as np

def calc_hour( str ):
    hour, min, sec = [float(i) for i in str.split(':')]
    min += sec/60.
    hour += min/60.
    return hour

calc_hour = np.vectorize( calc_hour )

def calc_deg( str ):
    deg, min, sec = [float(i) for i in str.split(':')]
    min += sec/60.
    deg += min/60.
    return deg

calc_deg = np.vectorize( calc_deg )
</snippet></ROW><ROW><id>16798314</id><snippet>values = np.loadtxt('tmp.txt', dtype=str)
hours= calc_hour( values[:,0] )
degs =  calc_deg( values[:,1] )
</snippet></ROW><ROW><id>16798314</id><snippet>hours = array([ 0.10133333,  0.11713889,  0.23825   ,  0.38333333,  0.39730556,
                0.39844444,  0.39983333,  0.40102778,  0.40105556,  0.40108333,
                0.50836111])    

degs = array([-70., -66., -59., -52., -49., -29., -28., -26., -14.,  25.,  30.])
</snippet></ROW><ROW><id>16798314</id><snippet>import matplotlib.pyplot as plt
plt.plot(hours,degs)
</snippet></ROW><ROW><id>16798403</id><snippet>list.append</snippet></ROW><ROW><id>16798403</id><snippet>None</snippet></ROW><ROW><id>16798403</id><snippet>y = y.append(n)</snippet></ROW><ROW><id>16798403</id><snippet>y</snippet></ROW><ROW><id>16798403</id><snippet>None</snippet></ROW><ROW><id>16798403</id><snippet>for-loop</snippet></ROW><ROW><id>16798403</id><snippet>None</snippet></ROW><ROW><id>16798403</id><snippet>if n not in y
</snippet></ROW><ROW><id>16798403</id><snippet>TypeError: argument of type 'NoneType' is not iterable
</snippet></ROW><ROW><id>16798403</id><snippet>x</snippet></ROW><ROW><id>16798403</id><snippet>def unique_hashable(seq):
    # Not order preserving. Use this if the items in seq are hashable, 
    # and you don't care about preserving order.
    return list(set(seq))

def unique_hashable_order_preserving(seq): 
    # http://www.peterbe.com/plog/uniqifiers-benchmark (Dave Kirby)
    # Use this if the items in seq are hashable and you want to preserve the
    # order in which unique items in seq appear.
    seen = set()
    return [x for x in seq if x not in seen and not seen.add(x)]

def unique_unhashable_orderable(seq):
    # Author: Tim Peters
    # http://code.activestate.com/recipes/52560-remove-duplicates-from-a-sequence/
    # Use this if the items in seq are unhashable, but seq is sortable
    # (i.e. orderable). Note the result does not preserve order because of
    # the sort.
    # 
    # We can't hash all the elements.  Second fastest is to sort,
    # which brings the equal elements together; then duplicates are
    # easy to weed out in a single pass.
    # NOTE:  Python's list.sort() was designed to be efficient in the
    # presence of many duplicate elements.  This isn't true of all
    # sort functions in all languages or libraries, so this approach
    # is more effective in Python than it may be elsewhere.
    try:    
        t = list(seq)
        t.sort()
    except TypeError:
        del t
    else:
        last = t[0]
        lasti = i = 1
        while i &lt; len(seq):
            if t[i] != last:
                t[lasti] = last = t[i]
                lasti += 1
            i += 1
    return t[:lasti]

def unique_unhashable_nonorderable(seq):
    # Use this (your Method1) if the items in seq are unhashable and unorderable.
    # This method is order preserving.
    u = []
    for x in seq:
        if x not in u:
            u.append(x)
    return u
</snippet></ROW><ROW><id>16798403</id><snippet>import numpy as np
def unique_order_preserving_numpy(seq):
    u, ind = np.unique(seq, return_index=True)
    return u[np.argsort(ind)] 
</snippet></ROW><ROW><id>16798509</id><snippet>Room</snippet></ROW><ROW><id>16798509</id><snippet>generic_death[rn]</snippet></ROW><ROW><id>16798509</id><snippet>Room</snippet></ROW><ROW><id>16798509</id><snippet>def go(self, direction):
    return self.paths.get(direction, self)
</snippet></ROW><ROW><id>16798509</id><snippet>dict</snippet></ROW><ROW><id>16798509</id><snippet>'*'</snippet></ROW><ROW><id>16798509</id><snippet>def go(self, direction):
    return self.paths.get(direction, self.paths.get('*', self))
</snippet></ROW><ROW><id>16798509</id><snippet>direction</snippet></ROW><ROW><id>16798509</id><snippet>'*'</snippet></ROW><ROW><id>16798509</id><snippet>Room</snippet></ROW><ROW><id>16798509</id><snippet>'*'</snippet></ROW><ROW><id>16798509</id><snippet>None</snippet></ROW><ROW><id>16798640</id><snippet>while error2==True:
    try:
        vending=input("Select a Option: ")
        if vending &gt;= 7:
            print"Enter a number between 1-6. Please try again."
        elif vending==0:
            print"Enter a number between 1-6. Please try again."
            error2=False
        else:
            #do something
            # Set error2 to False to break out of the while loop.
    except NameError:
        print"Enter a number between 1-6. Please try again."
        time.sleep(1)
    except SyntaxError:
        print"Enter a number between 1-6. Please try again."
        time.sleep(1)
</snippet></ROW><ROW><id>16798664</id><snippet>.stripped_strings</snippet></ROW><ROW><id>16798664</id><snippet>print list(linescoreA.stripped_strings)
</snippet></ROW><ROW><id>16798788</id><snippet>&gt;&gt;&gt; sorted(set(dir(f)) - set(dir(len)))
['__annotations__', '__closure__', '__code__', '__defaults__', '__dict__', '__get__', '__globals__', '__kwdefaults__']
</snippet></ROW><ROW><id>16798788</id><snippet>__annotations__</snippet></ROW><ROW><id>16798788</id><snippet>__closure__</snippet></ROW><ROW><id>16798788</id><snippet>__code__</snippet></ROW><ROW><id>16798788</id><snippet>__defaults__</snippet></ROW><ROW><id>16798788</id><snippet>__dict__</snippet></ROW><ROW><id>16798788</id><snippet>__get__</snippet></ROW><ROW><id>16798788</id><snippet>__globals__</snippet></ROW><ROW><id>16798788</id><snippet>__kwdefaults__</snippet></ROW><ROW><id>16798788</id><snippet>__defaults__</snippet></ROW><ROW><id>16798892</id><snippet>print(string1
      string2
      string3)
</snippet></ROW><ROW><id>16798892</id><snippet>\</snippet></ROW><ROW><id>16799069</id><snippet>def group(ix):
    if ix &lt; 2:
        return "Red"
    elif 2 &lt;= ix &lt; 4:
        return "Blue"
    else:
        return "Green"

&gt;&gt;&gt; print d
    a   b   c
0   0   1   2
1   3   4   5
2   6   7   8
3   9  10  11
4  12  13  14
5  15  16  17
&gt;&gt;&gt; print d.append(d.groupby(d.index.to_series().map(group)).sum())
        a   b   c
0       0   1   2
1       3   4   5
2       6   7   8
3       9  10  11
4      12  13  14
5      15  16  17
Blue   15  17  19
Green  27  29  31
Red     3   5   7
</snippet></ROW><ROW><id>16799069</id><snippet>groupby</snippet></ROW><ROW><id>16799274</id><snippet>__str__</snippet></ROW><ROW><id>16799274</id><snippet>__str__</snippet></ROW><ROW><id>16799274</id><snippet>[]</snippet></ROW><ROW><id>16799274</id><snippet>__repr__</snippet></ROW><ROW><id>16799274</id><snippet>__str__</snippet></ROW><ROW><id>16799274</id><snippet>__repr__</snippet></ROW><ROW><id>16799274</id><snippet>print '[' + ','.join("'" + str(x) + "'" for x in s) + ']'
</snippet></ROW><ROW><id>16799274</id><snippet>print u'[' + u','.join(u"'" + unicode(x) + u"'" for x in s) + u']'
</snippet></ROW><ROW><id>16799284</id><snippet>'format': '%(name).5s'  
</snippet></ROW><ROW><id>16799566</id><snippet>hashlib.algorithms_guaranteed</snippet></ROW><ROW><id>16799566</id><snippet>hashlib_algorithms_available</snippet></ROW><ROW><id>16799566</id><snippet>bytes</snippet></ROW><ROW><id>16799566</id><snippet>In [173]: md4 = hashlib.new('md4')
In [174]: md5 = hashlib.new('md5')
In [175]: sha1 = hashlib.new('sha1')
In [180]: %timeit md4.update(data)
1000 loops, best of 3: 1.54 ms per loop
In [181]: %timeit md5.update(data)
100 loops, best of 3: 2.52 ms per loop
In [182]: %timeit sha1.update(data)
100 loops, best of 3: 2.94 ms per loop
</snippet></ROW><ROW><id>16799566</id><snippet>md4</snippet></ROW><ROW><id>16799566</id><snippet>hashlib.md5()</snippet></ROW><ROW><id>16799566</id><snippet>hashlib.new('md5')</snippet></ROW><ROW><id>16799566</id><snippet>bytes</snippet></ROW><ROW><id>16799566</id><snippet>string.ascii_letters</snippet></ROW><ROW><id>16799566</id><snippet>for x in hashlib.algorithms_available:
    h = hashlib.new(x)
    print(x, timeit.timeit(lambda: h.update(data), number=100))
</snippet></ROW><ROW><id>16799566</id><snippet>zlib.adler32</snippet></ROW><ROW><id>16799566</id><snippet>def hash_file(path, algorithm='md5', bufsize=8192):
    h = hashlib.new(algorithm)
    with open(path, 'rb') as f:
        block = f.read(bufsize)
        if not block:
            break
        h.update(block)
    return h.digest()
</snippet></ROW><ROW><id>16799566</id><snippet>bufsize</snippet></ROW><ROW><id>16799566</id><snippet>os.open</snippet></ROW><ROW><id>16799566</id><snippet>os.read</snippet></ROW><ROW><id>16799847</id><snippet>import time

def testFor(w, fn):
    n = 0
    start = time.time()
    while (time.time() - start) &lt; w:
        fn()
        n = n + 1
    return n

window = 10

while True:
    n = testFor(window, test)
    print "n: %s" % n
</snippet></ROW><ROW><id>16799905</id><snippet>from google.appengine.ext import ndb
import webapp2
import json

class User(ndb.Model):
  company_              = ndb.KeyProperty(repeated=True)

  @property
  def company(self):
    return {} if not self.company_ else self.company_

  @company.setter
  def company(self, value):
    if value:
      # self.company_ = self.company_.expand(value) if self.company_ else [value]
      # Lists mutate when expanded. Code above was returning None
      self.company_ = self.company_ + [value] if self.company_ else [value]
    else:
      self.company_ = []
    self.put()

class Company(ndb.Model):
  administrator         = ndb.KeyProperty(kind=User, repeated=True)
  manager               = ndb.KeyProperty(kind=User, repeated=True)

class BaseHandler(webapp2.RequestHandler):
  def jwrite(self, **kw):
    return self.response.out.write( json.dumps(kw) )

class require(BaseHandler):
  @staticmethod
  def login(handler):
    def check_requirements(self, *a, **kw):
      if not self.auth.get_user_by_session():
        self.redirect('/', abort=True)
      else:
        return handler(self, *a, **kw)
    return check_requirements

class role(BaseHandler):
  @staticmethod
  def administrator(handler):
    def check_requirements(self, *a, **kw):
      # I didn't care much about optimizing queries
      # since this isn't frequent operation.
      # For more frequent calls, I'd consider projections.
      companies = ndb.get_multi( *a )
      # Next lines checks if current user is administrator 
      # for all companies passed to the function
      if not self.user.key in reduce(lambda x, y: x if x != y else y, map(lambda c: c.administrator, companies)):
        return self.jwrite( error = 'Permission denied. Administrator required.' )
      else:
        return handler(self, *a, **kw)
    return check_requirements

  @staticmethod
  def manager(handler):
    def check_requirements(self, *a, **kw):
      companies = ndb.get_multi( *a )
      # Next lines checks if current user is manager
      # or administrator (since admin has higher privileges) 
      # for all companies passed to the function
      if not self.user.key in reduce(lambda x, y: x if x != y else y, map(lambda c: c.manager + c.administrator, companies)):
        return self.jwrite( error = 'Permission denied. Manager or Administrator required.' )
      else:
        return handler(self, *a, **kw)
    return check_requirements

class ApiHandler(BaseHandler):
  @require.login
  def post(self, model, action, key=''):
    method = '_post_%s' % model
    try:
      getattr(self, method)(action, key)
    except Exception as error:
      return self.jwrite( error = error)

  def _post_company(self, action, key):

    if action == 'create':
      data = dict(self.request.POST)
      """ Company.create( data ) method:
          Populates Company instance with POST data.
          Assigns first user that created the company
            both administrator and manager roles.
      """
      key_ = Company.create( data ) 
      if key_:
        self.user.company = key_
      return

    elif action == 'delete':

      @role.administrator
      def delete_all_user_companies(self, *a):
        ndb.delete_multi( *a )
        self.user.company = None
        return

      delete_all_user_companies( self, self.user.company )

    elif action == 'update':

      @role.manager
      def update_company(self, *a ):
        data = dict(self.request.POST)
        """ Company.update( key, data ) method:
            Populates Company instance with POST data
        """
        key_ = Company.update( key, data )
        if key_:
          return

      update_company(self, ndb.Key(Company, key))
</snippet></ROW><ROW><id>16799965</id><snippet>%load_ext autoreload</snippet></ROW><ROW><id>16799965</id><snippet>%autoreload?</snippet></ROW><ROW><id>16799965</id><snippet>InteractiveShellApp.extensions</snippet></ROW><ROW><id>16799965</id><snippet>InteractiveShellApp.extra_extension</snippet></ROW><ROW><id>16799965</id><snippet>.py</snippet></ROW><ROW><id>16799965</id><snippet>$ ipython locate</snippet></ROW><ROW><id>16799965</id><snippet>startup</snippet></ROW><ROW><id>16800364</id><snippet>Lib</snippet></ROW><ROW><id>16800364</id><snippet>Scripts</snippet></ROW><ROW><id>16800364</id><snippet>Include</snippet></ROW><ROW><id>16800364</id><snippet>virtualenv .</snippet></ROW><ROW><id>16800364</id><snippet>site-packages</snippet></ROW><ROW><id>16800364</id><snippet>requirements.txt</snippet></ROW><ROW><id>16800433</id><snippet>python setup.py build</snippet></ROW><ROW><id>16800446</id><snippet>\</snippet></ROW><ROW><id>16800446</id><snippet>\[</snippet></ROW><ROW><id>16800446</id><snippet>\(</snippet></ROW><ROW><id>16800446</id><snippet>\)</snippet></ROW><ROW><id>16800446</id><snippet>\[^\&lt;]</snippet></ROW><ROW><id>16800446</id><snippet>\[</snippet></ROW><ROW><id>16800446</id><snippet>]</snippet></ROW><ROW><id>16800446</id><snippet>&gt;&gt;&gt; re.compile('([^&lt;/td *&gt;([^&lt;]*)&lt;/td *&gt;[^&lt;]*&lt;/td *&gt;([^&lt;]*)&lt;/td *&gt;([^&lt;]*)&lt;/td *&gt;([^&lt;]*)&lt;/td *&gt;&lt;/tr *&gt;')
&lt;_sre.SRE_Pattern object at 0x7f8c61c76d50&gt;
</snippet></ROW><ROW><id>16800446</id><snippet>[^</snippet></ROW><ROW><id>16800446</id><snippet>\[</snippet></ROW><ROW><id>16800446</id><snippet>{'&lt;', '/', 't', 'd', ' ', '*', '(', '[', '^', '&lt;'}</snippet></ROW><ROW><id>16800481</id><snippet>import numpy as np
test = [[1,0],[0,2]]
f = lambda i, j: sum(test[i])
matrix = np.fromfunction(np.vectorize(f), (len(test), len(test)), dtype=int)
</snippet></ROW><ROW><id>16800481</id><snippet>np.vectorize</snippet></ROW><ROW><id>16800642</id><snippet>Foo</snippet></ROW><ROW><id>16800642</id><snippet>Foo.aMethod = deco(Foo.aMethod)
</snippet></ROW><ROW><id>16800642</id><snippet>deco</snippet></ROW><ROW><id>16800642</id><snippet>@deco
def aMethod(...):
    ....
</snippet></ROW><ROW><id>16800642</id><snippet>def aMethod(....):
    ...
aMethod = deco(aMethod)
</snippet></ROW><ROW><id>16800642</id><snippet>class Bar(Foo):
    aMethod = deco(Foo.aMethod)
</snippet></ROW><ROW><id>16800642</id><snippet>Foo.aMethod = deco(Foo.aMethod.im_func)
</snippet></ROW><ROW><id>16800742</id><snippet>testtools</snippet></ROW><ROW><id>16800742</id><snippet>unittest</snippet></ROW><ROW><id>16800742</id><snippet>unittest</snippet></ROW><ROW><id>16800742</id><snippet>nose</snippet></ROW><ROW><id>16800742</id><snippet>testtools.TestCase</snippet></ROW><ROW><id>16800742</id><snippet>unittest.main()</snippet></ROW><ROW><id>16800742</id><snippet>import testtools
import unittest

class SampleTestCase(testtools.TestCase):
    def test_it(self):
        self.assertTrue(True)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>16800855</id><snippet>itertools</snippet></ROW><ROW><id>16800855</id><snippet>consume</snippet></ROW><ROW><id>16800855</id><snippet>n</snippet></ROW><ROW><id>16800855</id><snippet>def consume(iterator, n):
    "Advance the iterator n-steps ahead. If n is none, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)
</snippet></ROW><ROW><id>16800855</id><snippet>islice()</snippet></ROW><ROW><id>16800855</id><snippet>n, n</snippet></ROW><ROW><id>16800855</id><snippet>next()</snippet></ROW><ROW><id>16800855</id><snippet>return next(islice(permutations(range(10)), 999999, 1000000))
</snippet></ROW><ROW><id>16800855</id><snippet>islice()</snippet></ROW><ROW><id>16800855</id><snippet>&gt;&gt;&gt; from itertools import islice, permutations
&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; def list_index():
...     return list(permutations(range(10)))[999999]
... 
&gt;&gt;&gt; def for_loop():
...     p = permutations(range(10))
...     for i in xrange(999999): p.next()
...     return p.next()
... 
&gt;&gt;&gt; def enumerate_loop():
...     p = permutations(range(10))
...     for i, element in enumerate(p):
...         if i == 999999:
...             return element
... 
&gt;&gt;&gt; def islice_next():
...     return next(islice(permutations(range(10)), 999999, 1000000))
... 
&gt;&gt;&gt; timeit('f()', 'from __main__ import list_index as f', number=10)
5.550895929336548
&gt;&gt;&gt; timeit('f()', 'from __main__ import for_loop as f', number=10)
1.6166789531707764
&gt;&gt;&gt; timeit('f()', 'from __main__ import enumerate_loop as f', number=10)
1.2498459815979004
&gt;&gt;&gt; timeit('f()', 'from __main__ import islice_next as f', number=10)
0.18969106674194336
</snippet></ROW><ROW><id>16800855</id><snippet>islice()</snippet></ROW><ROW><id>16800962</id><snippet>&gt;&gt;&gt; soup = bs4.BeautifulSoup(test)
&gt;&gt;&gt; matches = soup.find_all(lambda x: x.text.lower() == 'here is some silly text'):
&gt;&gt;&gt; for match in matches:
...     match.wrap(soup.new_tag('mark'))
&gt;&gt;&gt; soup
&lt;html&gt;&lt;body&gt;&lt;h1&gt;oh hey&lt;/h1&gt;&lt;mark&gt;&lt;div&gt;here is some &lt;b&gt;SILLY&lt;/b&gt; text&lt;/div&gt;&lt;/mark&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>16800962</id><snippet>name</snippet></ROW><ROW><id>16800962</id><snippet>find_all</snippet></ROW><ROW><id>16800962</id><snippet>x.text.lower()</snippet></ROW><ROW><id>16800962</id><snippet>text</snippet></ROW><ROW><id>16800962</id><snippet>x.lower()</snippet></ROW><ROW><id>16800962</id><snippet>wrap</snippet></ROW><ROW><id>16800962</id><snippet>enumerate(matches)</snippet></ROW><ROW><id>16800962</id><snippet>matches[i] = match.wrap(soup.new_tag('mark'))</snippet></ROW><ROW><id>16800962</id><snippet>replace_with</snippet></ROW><ROW><id>16800962</id><snippet>'here is some silly text'</snippet></ROW><ROW><id>16800962</id><snippet>lower()</snippet></ROW><ROW><id>16800962</id><snippet>str.casefold()</snippet></ROW><ROW><id>16800962</id><snippet>locale.strxfrm(s)</snippet></ROW><ROW><id>16800962</id><snippet>locale.strcoll(s, t)</snippet></ROW><ROW><id>16800962</id><snippet>==</snippet></ROW><ROW><id>16800993</id><snippet>google-api-python-client-1.1</snippet></ROW><ROW><id>16800993</id><snippet>google-api-python-client</snippet></ROW><ROW><id>16800993</id><snippet>appcfg.py</snippet></ROW><ROW><id>16800993</id><snippet>google-api-python-client</snippet></ROW><ROW><id>16800993</id><snippet>routes = [
    ('/update', UpdatePage),
    (decorator.callback_path, decorator.callback_handler()),
]
update = webapp2.WSGIApplication(routes, debug=True)
</snippet></ROW><ROW><id>16800993</id><snippet>app.yaml</snippet></ROW><ROW><id>16800993</id><snippet>decorator.callback_path</snippet></ROW><ROW><id>16800993</id><snippet>- url: /oauth2callback
  script: myapp.update
</snippet></ROW><ROW><id>16800993</id><snippet>- url: /.*
  script: myapp.update
</snippet></ROW><ROW><id>16801022</id><snippet>/migrations</snippet></ROW><ROW><id>16801022</id><snippet>syncdb</snippet></ROW><ROW><id>16801043</id><snippet>test</snippet></ROW><ROW><id>16801043</id><snippet>.py</snippet></ROW><ROW><id>16801043</id><snippet>robots.py</snippet></ROW><ROW><id>16801144</id><snippet>kwarg</snippet></ROW><ROW><id>16801144</id><snippet>super</snippet></ROW><ROW><id>16801144</id><snippet>obj = super(SimpleImageForm, self).save(commit=False)
</snippet></ROW><ROW><id>16801144</id><snippet>ModelForm</snippet></ROW><ROW><id>16801144</id><snippet>save</snippet></ROW><ROW><id>16801144</id><snippet>def save(self, commit=True):
</snippet></ROW><ROW><id>16801193</id><snippet>time.sleep</snippet></ROW><ROW><id>16801193</id><snippet>QTimer</snippet></ROW><ROW><id>16801193</id><snippet>timeout</snippet></ROW><ROW><id>16801193</id><snippet>singleShot</snippet></ROW><ROW><id>16801193</id><snippet>from PyQt4 import QtGui, QtCore

class Ventana(QtGui.QWidget):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.setLayout(QtGui.QVBoxLayout())
        self.lineEdit = QtGui.QLineEdit(self)
        self.button = QtGui.QPushButton('clickme', self)
        self.layout().addWidget(self.lineEdit)
        self.layout().addWidget(self.button)
        self.button.clicked.connect(self.testSleep)

    def testSleep(self):
        self.lineEdit.setText('Start')
        QtCore.QTimer.singleShot(2000, lambda: self.lineEdit.setText('End'))

    def mainLoop(self, app ):
        sys.exit( app.exec_())

if __name__ == '__main__':
    import sys
    app = QtGui.QApplication(sys.argv)
    window = Ventana()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>16801197</id><snippet>asker</snippet></ROW><ROW><id>16801197</id><snippet>answerer</snippet></ROW><ROW><id>16801197</id><snippet>&gt;&gt;&gt; asker = ['Jack','Jack','Jack','Jill']
&gt;&gt;&gt; answerer = ['Jill','John','Jason','John']
&gt;&gt;&gt; finalList = zip(asker, answerer)
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; finalList
[('Jack', 'Jill'), ('Jack', 'John'), ('Jack', 'Jason'), ('Jill', 'John')]
</snippet></ROW><ROW><id>16801219</id><snippet>You might be looking for zip. Try that :  

data = [['a','b','c','d'], ['a','b','c','d'], ['a','b','c','d'], ['a','b','c','d']]

print data
print zip(*data)
</snippet></ROW><ROW><id>16801446</id><snippet>assert_raises(ZeroDivisionError, operator.div,  1, 0)
</snippet></ROW><ROW><id>16801509</id><snippet>for curfile in files:
    with open(curfile, 'r+') as infile:
        content = infile.read()
        processed_content = processContent(content)
        infile.truncate(0)   # truncate the file to 0 bytes
        infile.seek(0)       # move the pointer to the start of the file
        infile.write(processed_content)
</snippet></ROW><ROW><id>16801509</id><snippet>import os
for curfile in files:
    with open(curfile) as infile:
        with open("temp_file", 'w') as outfile:
            content = infile.read()
            processed_content = processContent(content)
            outfile.write(processed_content)
    os.remove(curfile) # For windows only
    os.rename("temp_file", curfile)
</snippet></ROW><ROW><id>16801509</id><snippet>fileinput</snippet></ROW><ROW><id>16801614</id><snippet>def parseWikiTitles(x):
    counter = 1

    while '===' in x:
        if counter == 1:
            x = x.replace('===','&lt;i&gt;',1)
            counter = 2

        else:
            x = x.replace('===',r'&lt;/i&gt;',1)
            counter = 1

    counter = 1

    while '==' in x:
        if counter == 1:
            x = x.replace('==','&lt;b&gt;',1)
            counter = 2

        else:
            x = x.replace('==',r'&lt;/b&gt;',1)
            counter = 1


    x = x.replace('&lt;b&gt; ', '&lt;b&gt;', 50)
    x = x.replace(r' &lt;/b&gt;', r'&lt;/b&gt;', 50)
    x = x.replace('&lt;i&gt; ', '&lt;i&gt;', 50)
    x = x.replace(r' &lt;/i&gt;', r'&lt;i&gt;', 50)

    return x
</snippet></ROW><ROW><id>16801614</id><snippet>== title ==</snippet></ROW><ROW><id>16801614</id><snippet>&lt;b&gt;title&lt;/b&gt;</snippet></ROW><ROW><id>16801614</id><snippet>&lt;b&gt; title &lt;/b&gt;</snippet></ROW><ROW><id>16801638</id><snippet>def only1(l):
    true_found = False
    for v in l:
        if v:
            # a True was found!
            if true_found:
                # found too many True's
                return False 
            else:
                # found the first True
                true_found = True
    # found just one True in total
    return true_found
</snippet></ROW><ROW><id>16801638</id><snippet># file: test.py
from itertools import ifilter, islice

def OP(l):
    true_found = False
    for v in l:
        if v and not true_found:
            true_found=True
        elif v and true_found:
             return False #"Too Many Trues"
    return true_found

def DavidRobinson(l):
    return l.count(True) == 1

def FJ(l):
    return len(list(islice(ifilter(None, l), 2))) == 1

def JonClements(iterable):
    i = iter(iterable)
    return any(i) and not any(i)

def moooeeeep(l):
    true_found = False
    for v in l:
        if v:
            if true_found:
                # found too many True's
                return False 
            else:
                # found the first True
                true_found = True
    # found just one True in total
    return true_found
</snippet></ROW><ROW><id>16801638</id><snippet>$ python -mtimeit -s 'import test; l=[True]*100000' 'test.OP(l)' 
1000000 loops, best of 3: 0.523 usec per loop
$ python -mtimeit -s 'import test; l=[True]*100000' 'test.DavidRobinson(l)' 
1000 loops, best of 3: 516 usec per loop
$ python -mtimeit -s 'import test; l=[True]*100000' 'test.FJ(l)' 
100000 loops, best of 3: 2.31 usec per loop
$ python -mtimeit -s 'import test; l=[True]*100000' 'test.JonClements(l)' 
1000000 loops, best of 3: 0.446 usec per loop
$ python -mtimeit -s 'import test; l=[True]*100000' 'test.moooeeeep(l)' 
1000000 loops, best of 3: 0.449 usec per loop
</snippet></ROW><ROW><id>16801638</id><snippet>True</snippet></ROW><ROW><id>16801638</id><snippet>True</snippet></ROW><ROW><id>16801638</id><snippet>$ python -mtimeit -s 'import test; l=[False]*100000' 'test.OP(l)' 
100 loops, best of 3: 4.26 msec per loop
$ python -mtimeit -s 'import test; l=[False]*100000' 'test.DavidRobinson(l)' 
100 loops, best of 3: 2.09 msec per loop
$ python -mtimeit -s 'import test; l=[False]*100000' 'test.FJ(l)' 
1000 loops, best of 3: 725 usec per loop
$ python -mtimeit -s 'import test; l=[False]*100000' 'test.JonClements(l)' 
1000 loops, best of 3: 617 usec per loop
$ python -mtimeit -s 'import test; l=[False]*100000' 'test.moooeeeep(l)' 
100 loops, best of 3: 1.85 msec per loop
</snippet></ROW><ROW><id>16801762</id><snippet>testdb</snippet></ROW><ROW><id>16801762</id><snippet>Writers</snippet></ROW><ROW><id>16801762</id><snippet>con = mdb.connect('localhost', 'testuser', 'test623', 'testdb')
                                                       ^^^^^^^--- default DB
</snippet></ROW><ROW><id>16801762</id><snippet>SELECT * FROM testdb.Writers
</snippet></ROW><ROW><id>16801762</id><snippet>use testdb;
SELECT * FROM Writers
</snippet></ROW><ROW><id>16801899</id><snippet>r'static PyObject*\npy_\0(void)\n{'
</snippet></ROW><ROW><id>16801899</id><snippet>r'static PyObject*\npy_\1(void)\n{'
</snippet></ROW><ROW><id>16801899</id><snippet>\0</snippet></ROW><ROW><id>16801899</id><snippet>\x00</snippet></ROW><ROW><id>16801899</id><snippet>\g&lt;0&gt;</snippet></ROW><ROW><id>16801902</id><snippet>def italic(predecessor):
    x = predecessor
    def successor():
        return "&lt;italic/&gt;" + x() + "&lt;/italic&gt;"
    return successor
</snippet></ROW><ROW><id>16801902</id><snippet>def italic(predecessor):
    x = predecessor
    x2 = x
    def successor():
        return "&lt;italic/&gt;" + x2() + "&lt;/italic&gt;"
    return successor
</snippet></ROW><ROW><id>16801902</id><snippet>def italic(predecessor):
    x = predecessor
    x2 = x
    x3 = x2
    def successor():
        return "&lt;italic/&gt;" + x3() + "&lt;/italic&gt;"
    return successor
</snippet></ROW><ROW><id>16801902</id><snippet>functools.wraps</snippet></ROW><ROW><id>16801902</id><snippet>from functools import wraps

def italic(f):
    @wraps(f)
    def decorated():
        return "&lt;italic/&gt;" + f() + "&lt;/italic&gt;"
    return decorated
</snippet></ROW><ROW><id>16801902</id><snippet>import functools

def italic(f):
    return functools.update_wrapper(lambda: "&lt;italic/&gt;" + f() + "&lt;/italic&gt;", f)
</snippet></ROW><ROW><id>16802350</id><snippet>import re
with open("input") as f:
    for line in f:
        mo=re.match(r'[^\d]*(\d+).*?(tons|feet|lbs)', line)
        if mo: print mo.group(1), mo.group(2)
</snippet></ROW><ROW><id>16802350</id><snippet>1023 lbs
1023 tons
1023 feet
</snippet></ROW><ROW><id>16802350</id><snippet>$100 money is too much for 100 lbs</snippet></ROW><ROW><id>16802350</id><snippet>import re
with open("input") as f:
    for line in f:
        mo=re.match(r'.*?(?&lt;![$\d])(\d+).*?(tons|feet|lbs)', line)
        if mo: print mo.group(1), mo.group(2)
</snippet></ROW><ROW><id>16802350</id><snippet>import re
with open("input") as f:
    for line in f:
        mo=re.match(r'.*?(\d+).*?(mega|kilo|metric|) (tons|feet|lbs)', line)
        if mo: print mo.group(1), mo.group(2), mo.group(3)
</snippet></ROW><ROW><id>16802350</id><snippet>1023 mega lbs
1023 kilo tons
1023  feet
100  lbs
</snippet></ROW><ROW><id>16802350</id><snippet>|</snippet></ROW><ROW><id>16802350</id><snippet>import re
with open("input") as f:
    for line in f:
        mo=re.match(r'[^\d]*(\d+).*?(\S*)\s*(tons|feet|lbs)', line)
        if mo: print "'{}' '{}' '{}'".format(mo.group(1), mo.group(2), 
                       mo.group(3))
</snippet></ROW><ROW><id>16802350</id><snippet>'1023' 'mega' 'lbs'
'1023' 'kilo' 'tons'
'1023' '' 'feet'
</snippet></ROW><ROW><id>16802472</id><snippet>joinedload</snippet></ROW><ROW><id>16802472</id><snippet>from sqlalchemy.orm import joinedload
</snippet></ROW><ROW><id>16802645</id><snippet>re.sub(r'(abc){.*}', r'\1{replacement}', 'mylongstring-abc{def}')
</snippet></ROW><ROW><id>16802645</id><snippet>re.sub(r'abc{.*}', r'abc{replacement}', 'mylongstring-abc{def}')
</snippet></ROW><ROW><id>16802645</id><snippet>.*</snippet></ROW><ROW><id>16802645</id><snippet>r"(abc){[^}]*}"</snippet></ROW><ROW><id>16802645</id><snippet>r"(abc){.*?}"</snippet></ROW><ROW><id>16802832</id><snippet>while-else</snippet></ROW><ROW><id>16802832</id><snippet>def pseudocode():
    while some condition is true:
        do some stuff
        if a condition is met:
            break out of the while loop
    else:
        now do a thing once, but only if you never broke out of the loop above 
</snippet></ROW><ROW><id>16802832</id><snippet>while_stmt ::=  "while" expression ":" suite
                ["else" ":" suite]
</snippet></ROW><ROW><id>16802832</id><snippet>break</snippet></ROW><ROW><id>16802832</id><snippet>else</snippet></ROW><ROW><id>16802884</id><snippet>with open('C:\BG\BG.txt') as bgfile:
    background = bgfile.read()

background = 'BGMATRIX.bmp' if background == 'mod_bg.bmp' else 'mod_bg.bmp'

with open('C:\BG\BG.txt', 'w') as bgfile:
    bgfile.write(background)

SPI_SETDESKWALLPAPER = 20  
ctypes.windll.user32.SystemParametersInfoA(SPI_SETDESKWALLPAPER, 0, background, 0)
</snippet></ROW><ROW><id>16802884</id><snippet>with open('C:\BG\BG.txt', 'r+') as bgfile:
    background = bgfile.read()

    background = 'BGMATRIX.bmp' if background == 'mod_bg.bmp' else 'mod_bg.bmp'

    bgfile.seek(0)
    bgfile.truncate() 
    bgfile.write(background)

SPI_SETDESKWALLPAPER = 20  
ctypes.windll.user32.SystemParametersInfoA(SPI_SETDESKWALLPAPER, 0, background, 0)
</snippet></ROW><ROW><id>16802970</id><snippet>defaultdict</snippet></ROW><ROW><id>16802970</id><snippet>from collections import defaultdict
D = defaultdict(list)
D[somekey].append(auxfield)
</snippet></ROW><ROW><id>16802970</id><snippet>D = {}
for something in yourthings:
    if something.key in D:
        D[something.key] = something.auxfield
    else:
        D[something.key] = merge(D[something.key], something.auxfield)
</snippet></ROW><ROW><id>16803258</id><snippet>in_protocol=HttpRpc</snippet></ROW><ROW><id>16803258</id><snippet>in_protocol=Soap11</snippet></ROW><ROW><id>16803258</id><snippet>HttpRpc</snippet></ROW><ROW><id>16803258</id><snippet>/</snippet></ROW><ROW><id>16803258</id><snippet>Notify</snippet></ROW><ROW><id>16803258</id><snippet>Notify</snippet></ROW><ROW><id>16803258</id><snippet>NotificationType</snippet></ROW><ROW><id>16803258</id><snippet>http.server.HTTPServer</snippet></ROW><ROW><id>16803258</id><snippet>NotificationEvent</snippet></ROW><ROW><id>16803258</id><snippet>from xml.etree import ElementTree as ET

def handle_location(nevent):
    clocation = nevent.find('ComputerLocation')
    changed_on = clocation.attrib['changedOn']
    location = clocation.text
    # do something with this info

def handle_other_thing(nevent):
    # whatever

handlers = {'Location': handle_location,
            'OtherThing': handle_other_thing }

et = ET.fromstring(body)
for notification in et.iter('notification'):
    message = ET.fromstring(notification.attrib['message'])
    for nevent in message.iter('NotificationEvent'):
        ntype = nevent.attrib['NotificationType']
        handlers[ntype](nevent)
</snippet></ROW><ROW><id>16803258</id><snippet>NotificationEvent</snippet></ROW><ROW><id>16803258</id><snippet>suds</snippet></ROW><ROW><id>16803320</id><snippet>import json
json_data = json.loads(result)
stuff = json_data['result']['_raw']
</snippet></ROW><ROW><id>16803338</id><snippet>fetch</snippet></ROW><ROW><id>16803338</id><snippet>fetch</snippet></ROW><ROW><id>16803338</id><snippet>run</snippet></ROW><ROW><id>16803338</id><snippet>list</snippet></ROW><ROW><id>16803338</id><snippet>list</snippet></ROW><ROW><id>16803338</id><snippet>fetch</snippet></ROW><ROW><id>16803338</id><snippet>run</snippet></ROW><ROW><id>16803338</id><snippet>list</snippet></ROW><ROW><id>16803338</id><snippet>run</snippet></ROW><ROW><id>16803338</id><snippet>fetch</snippet></ROW><ROW><id>16803338</id><snippet>list(run(…))</snippet></ROW><ROW><id>16803338</id><snippet>fetch</snippet></ROW><ROW><id>16803405</id><snippet>keys</snippet></ROW><ROW><id>16803405</id><snippet>values.append(dict[keys])
</snippet></ROW><ROW><id>16803405</id><snippet>dict[key]</snippet></ROW><ROW><id>16803405</id><snippet>list</snippet></ROW><ROW><id>16803405</id><snippet>.items()</snippet></ROW><ROW><id>16803405</id><snippet>for key, value in dct.items():
    keys.append(key)
    values.append(value)
</snippet></ROW><ROW><id>16803405</id><snippet>dict</snippet></ROW><ROW><id>16803818</id><snippet>.*</snippet></ROW><ROW><id>16803818</id><snippet>/index.html</snippet></ROW><ROW><id>16803818</id><snippet>[^/]*</snippet></ROW><ROW><id>16803818</id><snippet>*</snippet></ROW><ROW><id>16803818</id><snippet>.*</snippet></ROW><ROW><id>16803818</id><snippet>.*</snippet></ROW><ROW><id>16803818</id><snippet>us</snippet></ROW><ROW><id>16803818</id><snippet>&gt;&gt;&gt; pattern = r'(\url{).*/([^/]*/[^/]*})'
&gt;&gt;&gt; re.sub(pattern, prefix, '\url{www.mywebsite.com/home/us/index.html}')
'\\url{www.example.com/us/index.html}'
</snippet></ROW><ROW><id>16803899</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'blah"(\d+)"','"0" blah"11" "0" blah"3" "0" blah"6" "0" blah"600" "0"')
['11', '3', '6', '600']
</snippet></ROW><ROW><id>16803976</id><snippet>snpp.__file__
</snippet></ROW><ROW><id>16803976</id><snippet>import snpp</snippet></ROW><ROW><id>16804034</id><snippet>readlines</snippet></ROW><ROW><id>16804034</id><snippet>str</snippet></ROW><ROW><id>16804034</id><snippet>repr</snippet></ROW><ROW><id>16804034</id><snippet>DICT_ = (dic)</snippet></ROW><ROW><id>16804034</id><snippet>DICT_</snippet></ROW><ROW><id>16804034</id><snippet>while</snippet></ROW><ROW><id>16804034</id><snippet>while</snippet></ROW><ROW><id>16804034</id><snippet>'while</snippet></ROW><ROW><id>16804034</id><snippet>WHILE_</snippet></ROW><ROW><id>16804034</id><snippet>import collections

filename = input("Enter file: ")
counts = collections.Counter()
with open(filename) as f:
    for line in f:
        counts.update(line.strip().lower().split())
print('while_loops {0:&gt;12}'.format(counts['while']))
</snippet></ROW><ROW><id>16804034</id><snippet>2</snippet></ROW><ROW><id>16804034</id><snippet>if</snippet></ROW><ROW><id>16804034</id><snippet>for</snippet></ROW><ROW><id>16804034</id><snippet>if</snippet></ROW><ROW><id>16804034</id><snippet>for</snippet></ROW><ROW><id>16804034</id><snippet>line.partition('#')[0]</snippet></ROW><ROW><id>16804034</id><snippet>if</snippet></ROW><ROW><id>16804034</id><snippet>"foo" if x else "bar"</snippet></ROW><ROW><id>16804034</id><snippet>ast</snippet></ROW><ROW><id>16804034</id><snippet>pyparsing</snippet></ROW><ROW><id>16804034</id><snippet>import ast

filename = input("Enter file: ")
with open(filename) as f:
    tree = ast.parse(f.read())
while_loops = sum(1 for node in ast.walk(tree) if isinstance(node, ast.While))
print('while_loops {0:&gt;12}'.format(while_loops))
</snippet></ROW><ROW><id>16804034</id><snippet>import ast
import collections

filename = input("Enter file: ")
with open(filename) as f:
    tree = ast.parse(f.read())
counts = collections.Counter(type(node).__name__ for node in ast.walk(tree))    
print('while_loops {0:&gt;12}'.format(counts['While']))
print('for_loops {0:&gt;14}'.format(counts['For']))
print('if_statements {0:&gt;10}'.format(counts['If']))
</snippet></ROW><ROW><id>16804110</id><snippet>log.html</snippet></ROW><ROW><id>16804110</id><snippet>assert not os.path.isabs('log.html')
dstdir =  os.path.join(dstroot, os.path.dirname('log.html'))
shutil.copy('log.html', dstdir)
</snippet></ROW><ROW><id>16804110</id><snippet>srcfile</snippet></ROW><ROW><id>16804110</id><snippet>+</snippet></ROW><ROW><id>16804110</id><snippet>timestr + 'lognew.html'
</snippet></ROW><ROW><id>16804164</id><snippet>struct.error</snippet></ROW><ROW><id>16804213</id><snippet>int</snippet></ROW><ROW><id>16804213</id><snippet>cost</snippet></ROW><ROW><id>16804213</id><snippet>cost</snippet></ROW><ROW><id>16804213</id><snippet>int</snippet></ROW><ROW><id>16804213</id><snippet>#get input from user, the returned value will be saved in the variable cost.
cost = raw_input('What is the cost:  ')  

# convert cost to a float as raw_input returns a string, float 
# is going to be more appropriate for money related calculations than an integer
cost_fl = float(cost)  

#use string formatting 
print 'list = {}$'.format(cost_fl /.65)
</snippet></ROW><ROW><id>16804245</id><snippet>sub()</snippet></ROW><ROW><id>16804245</id><snippet>match()</snippet></ROW><ROW><id>16804245</id><snippet>search()</snippet></ROW><ROW><id>16804245</id><snippet>subn()</snippet></ROW><ROW><id>16804250</id><snippet>try:
    iter(obj)
except TypeError, te:
    obj = list(obj)
</snippet></ROW><ROW><id>16804250</id><snippet>if not hasattr(obj, "__iter__"): #returns True if type of iterable - same problem with strings
    obj = list(obj)
return obj
</snippet></ROW><ROW><id>16804250</id><snippet>import types
if not isinstance(obj, types.StringTypes) and hasattr(obj, "__iter__"):
    obj = list(obj)
return obj
</snippet></ROW><ROW><id>16804401</id><snippet>&gt;&gt;&gt; a + b + c
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>16804401</id><snippet>&gt;&gt;&gt; [y for x in (a,b,c) for y in x]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>16804401</id><snippet>itertools.chain</snippet></ROW><ROW><id>16804401</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain(a,b,c))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>16804550</id><snippet>wordlist = [':)', ':(', 'happy', 'sad']
tweets = ['I find python cool, it makes me happy :)', 'today is a sad day :(']
for tweet in tweets:
    print(' '.join(['1' if word in tweet else '0' for word in wordlist]))
</snippet></ROW><ROW><id>16804550</id><snippet>1 0 1 0
0 1 0 1
</snippet></ROW><ROW><id>16804599</id><snippet>if int(binaryDigits[1]) == 1:
</snippet></ROW><ROW><id>16804599</id><snippet>if binaryDigits[1] == '1':
</snippet></ROW><ROW><id>16804791</id><snippet>def distance(self, other):
    dist = math.hypot(self.x - other.x, self.y - other.y)
    return dist
</snippet></ROW><ROW><id>16804791</id><snippet>import math</snippet></ROW><ROW><id>16804791</id><snippet>setx</snippet></ROW><ROW><id>16804791</id><snippet>sety</snippet></ROW><ROW><id>16804791</id><snippet>c.x = 0</snippet></ROW><ROW><id>16805008</id><snippet>line 1
2013:10:15
line 3
line 4
2010:8:15
line 6 
</snippet></ROW><ROW><id>16805008</id><snippet>&gt;&gt;&gt; import linecache
&gt;&gt;&gt; linecache.getline('/tmp/lines.txt', 2)
'2013:10:15\n'
</snippet></ROW><ROW><id>16805008</id><snippet>&gt;&gt;&gt; import datetime as dt
&gt;&gt;&gt;dt.datetime.strptime(linecache.getline('/tmp/lines.txt',2).strip(),'%Y:%m:%d')
datetime.datetime(2013, 10, 15, 0, 0)
</snippet></ROW><ROW><id>16805008</id><snippet>&gt;&gt;&gt; li=[]
&gt;&gt;&gt; for i in (2,5):
...    li.append(linecache.getline('/tmp/lines.txt', i).strip())
... 
&gt;&gt;&gt; li
['2013:10:15', '2010:8:15']
</snippet></ROW><ROW><id>16805008</id><snippet>&gt;&gt;&gt; lines={}
&gt;&gt;&gt; for i in (2,5):
...    lines[i]=linecache.getline('/tmp/lines.txt', i).strip()
... 
&gt;&gt;&gt; lines
{2: '2013:10:15', 5: '2010:8:15'}
</snippet></ROW><ROW><id>16805008</id><snippet>&gt;&gt;&gt; lines={}
&gt;&gt;&gt; for i in range(2,6):
...    lines[i]=linecache.getline('/tmp/lines.txt', i).strip()
... 
&gt;&gt;&gt; lines
{2: '2013:10:15', 3: 'line 3', 4: 'line 4', 5: '2010:8:15'}
</snippet></ROW><ROW><id>16805382</id><snippet>class Table(models.Model):
    #more fields

    @property
    def unoccupied_count(self):
        return self.seat_set.filter(occupied=False).count()
</snippet></ROW><ROW><id>16805382</id><snippet>{{ table.unoccupied_count }}
</snippet></ROW><ROW><id>16805426</id><snippet>/</snippet></ROW><ROW><id>16805426</id><snippet>/a</snippet></ROW><ROW><id>16805426</id><snippet>/b</snippet></ROW><ROW><id>16805426</id><snippet>/c</snippet></ROW><ROW><id>16805426</id><snippet>/aa</snippet></ROW><ROW><id>16805426</id><snippet>http://example.com</snippet></ROW><ROW><id>16805426</id><snippet>http://subdomain.example.com</snippet></ROW><ROW><id>16805426</id><snippet>http://example.com/page/</snippet></ROW><ROW><id>16805426</id><snippet>http://example.com/page/.*</snippet></ROW><ROW><id>16805426</id><snippet>Hello World.</snippet></ROW><ROW><id>16805426</id><snippet>http://example.com/secret/path/no/one/knows/about/.*</snippet></ROW><ROW><id>16805426</id><snippet>.*</snippet></ROW><ROW><id>16805426</id><snippet>/path/.*</snippet></ROW><ROW><id>16805426</id><snippet>/path/that/is/long/and/explicit/.*</snippet></ROW><ROW><id>16805513</id><snippet>DecimalField</snippet></ROW><ROW><id>16805513</id><snippet>FloatField</snippet></ROW><ROW><id>16805513</id><snippet>area = forms.DecimalField(max_digits=20)
</snippet></ROW><ROW><id>16805520</id><snippet>my_dict = {'a1':2,'a2':3,'b1':1,'b2':5,'b3':8}

def filtered(d):
    for key in d:
        if not key.startswith('a'):
            continue

        b_key = "b" + key[1:]

        if b_key not in d:
            continue

        yield d[key], d[b_key]

sum(a * b for a, b in filtered(my_dict))
</snippet></ROW><ROW><id>16805569</id><snippet>d=d.split(None, 1)[0]</snippet></ROW><ROW><id>16805699</id><snippet>Foo.a</snippet></ROW><ROW><id>16805699</id><snippet>self.a</snippet></ROW><ROW><id>16805699</id><snippet>Foo.a</snippet></ROW><ROW><id>16805699</id><snippet>Foo</snippet></ROW><ROW><id>16805699</id><snippet>self.n</snippet></ROW><ROW><id>16805699</id><snippet>+=</snippet></ROW><ROW><id>16805699</id><snippet>self</snippet></ROW><ROW><id>16805699</id><snippet>Foo.n</snippet></ROW><ROW><id>16805699</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(Foo.bar)
  5           0 LOAD_FAST                0 (self)
              3 LOAD_ATTR                0 (a)
              6 LOAD_ATTR                1 (append)
              9 LOAD_CONST               1 ('foo')
             12 CALL_FUNCTION            1
             15 POP_TOP             

  6          16 LOAD_FAST                0 (self)
             19 DUP_TOP             
             20 LOAD_ATTR                2 (n)
             23 LOAD_CONST               2 (1)
             26 INPLACE_ADD         
             27 ROT_TWO             
             28 STORE_ATTR               2 (n)
             31 LOAD_CONST               0 (None)
             34 RETURN_VALUE    
</snippet></ROW><ROW><id>16805699</id><snippet>self.a.append('some value')</snippet></ROW><ROW><id>16805699</id><snippet>a</snippet></ROW><ROW><id>16805699</id><snippet>Foo</snippet></ROW><ROW><id>16805699</id><snippet>Foo.a</snippet></ROW><ROW><id>16805699</id><snippet>self.n += 1</snippet></ROW><ROW><id>16805699</id><snippet>n</snippet></ROW><ROW><id>16805699</id><snippet>Foo</snippet></ROW><ROW><id>16805699</id><snippet>n</snippet></ROW><ROW><id>16805699</id><snippet>self</snippet></ROW><ROW><id>16805699</id><snippet>n + 1</snippet></ROW><ROW><id>16805699</id><snippet>n</snippet></ROW><ROW><id>16805699</id><snippet>self</snippet></ROW><ROW><id>16805778</id><snippet>raise</snippet></ROW><ROW><id>16805778</id><snippet>ValueError</snippet></ROW><ROW><id>16805778</id><snippet>None</snippet></ROW><ROW><id>16805778</id><snippet>class Foo(object):
    def __init__(self, apple=None, orange=None):
        super(Foo, self).__init__()
        if None is apple and None is orange:
            raise ValueError('apple and orange cannot both be None')
        if None is not apple and None is not orange:
            raise ValueError('apple and orange cannot both be set')

        self._apple = apple
        self._orange = orange

    @property
    def apple(self):
        return self._apple

    @property
    def orange(self):
        return self._orange

    def setAppleClearOrange(self, value):
        if (value is None):
            raise ValueError('Cannot set both to None')
        self._orange = None
        self._apple = value

    def setOrangeClearApple(self, value):
        if (value is None):
            raise ValueError('Cannot set both to None')
        self._apple = None
        self._orange = value
</snippet></ROW><ROW><id>16805805</id><snippet>SESSION_COOKIE_AGE</snippet></ROW><ROW><id>16805805</id><snippet>SESSION_COOKIE_AGE = 18 * 24 * 60 * 60
</snippet></ROW><ROW><id>16805996</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.random.rand(50)
y = np.random.rand(50)

c = np.array([1, 1, 0])  # base color, set for each point (here, yellow)
z = x/max(x)   # the darkness for each point (here, scale along x-axis)

plt.scatter(x,y, s=300, c=c[np.newaxis,:]*z[:, np.newaxis], marker="&gt;")
plt.show()
</snippet></ROW><ROW><id>16806261</id><snippet>CPROJECT</snippet></ROW><ROW><id>16806261</id><snippet>libcproject.so</snippet></ROW><ROW><id>16806261</id><snippet>CYPROJECT</snippet></ROW><ROW><id>16806261</id><snippet>cyproject.so</snippet></ROW><ROW><id>16806261</id><snippet>DEPENDENCIES</snippet></ROW><ROW><id>16806261</id><snippet>-shared</snippet></ROW><ROW><id>16806261</id><snippet>-fPIC</snippet></ROW><ROW><id>16806261</id><snippet>CYPROJECT</snippet></ROW><ROW><id>16806261</id><snippet>.so</snippet></ROW><ROW><id>16806261</id><snippet>DEPENDENCIES/libcproject/</snippet></ROW><ROW><id>16806261</id><snippet>include</snippet></ROW><ROW><id>16806261</id><snippet>adapters</snippet></ROW><ROW><id>16806261</id><snippet>libcproject.so</snippet></ROW><ROW><id>16806261</id><snippet>PyObject *</snippet></ROW><ROW><id>16806261</id><snippet>object</snippet></ROW><ROW><id>16806261</id><snippet>Py_XINCREF</snippet></ROW><ROW><id>16806261</id><snippet>Py_DECREF</snippet></ROW><ROW><id>16806261</id><snippet>pyext</snippet></ROW><ROW><id>16806261</id><snippet>.pyx</snippet></ROW><ROW><id>16806261</id><snippet>setup</snippet></ROW><ROW><id>16806261</id><snippet>setup.sh</snippet></ROW><ROW><id>16806261</id><snippet>python setup.py build_ext --inplace</snippet></ROW><ROW><id>16806261</id><snippet>cyproject.so</snippet></ROW><ROW><id>16806261</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16806261</id><snippet>cyproject.pyx</snippet></ROW><ROW><id>16806261</id><snippet>setup</snippet></ROW><ROW><id>16806261</id><snippet>setup.sh</snippet></ROW><ROW><id>16806261</id><snippet>export PYTHONPATH=$PYTHONPATH:../../../DEPENDENCIES/Cython-0.18
export PATH=$PATH:../../../DEPENDENCIES/libcproject:../../../DEPENDENCIES/Cython-0.18/bin

# Note the `../../../DEPENDENCIES/libcproject`...

CC="gcc"   \
CXX="g++"   \
    python setup.py build_ext --inplace
</snippet></ROW><ROW><id>16806261</id><snippet>setup.py</snippet></ROW><ROW><id>16806261</id><snippet>adapters</snippet></ROW><ROW><id>16806261</id><snippet>import sys
import os
import shutil

from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

# Cleaning
for root, dirs, files in os.walk(".", topdown=False):
    for name in files:
        if (name.startswith("cyproject") and not(name.endswith(".pyx"))):
            os.remove(os.path.join(root, name))
    for name in dirs:
        if (name == "build"):
            shutil.rmtree(name)

# Building
setup(
    cmdclass = {'build_ext': build_ext},
    ext_modules = [
    Extension("cyproject", 
              sources=["cyproject.pyx", \
                       "adapter/ALabSimulatorBase.cpp", \
                       "adapter/ALabSimulatorTime.cpp", \
                       "adapter/ALabNetBinding.cpp", \
                       "adapter/AValueArg.cpp", \
                       "adapter/ALabSiteSetsManager.cpp", \
                       "adapter/ALabSite.cpp", \
                       ],
              libraries=["cproject"],
              language="c++",
              extra_compile_args=["-I../inc", "-I../../../DEPENDENCIES/python2.7/inc", "-I../../../DEPENDENCIES/gsl-1.8/include"], 
              extra_link_args=["-L../lib"]
              extra_compile_args=["-fopenmp", "-O3"],
              extra_link_args=[]
              )
    ]
)                   
</snippet></ROW><ROW><id>16806261</id><snippet>.pyx</snippet></ROW><ROW><id>16806261</id><snippet>.pyx</snippet></ROW><ROW><id>16806261</id><snippet>cyproject.pyx</snippet></ROW><ROW><id>16806261</id><snippet>include "pyext/Utils.pyx" 
include "pyext/TCLAP.pyx" 
include "pyext/LabSimulatorBase.pyx"
include "pyext/LabBinding.pyx"
include "pyext/LabSimulatorTime.pyx"
...
</snippet></ROW><ROW><id>16806261</id><snippet>setup</snippet></ROW><ROW><id>16806261</id><snippet>adapters</snippet></ROW><ROW><id>16806261</id><snippet>pyext</snippet></ROW><ROW><id>16806261</id><snippet>DEPENDENCIES</snippet></ROW><ROW><id>16806261</id><snippet>CYPROJECT</snippet></ROW><ROW><id>16806339</id><snippet>sudo add-apt-repository ppa:kivy-team/kivy
sudo apt-get update
sudo apt-get install python-kivy
</snippet></ROW><ROW><id>16806506</id><snippet>repr</snippet></ROW><ROW><id>16806506</id><snippet>import subprocess
import sys

def tst():
    proc = subprocess.Popen(["cat", "/dev/random"],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    print("Process started.")
    for line in iter(p.stdout.readline, ''):
        strLine = str(line).rstrip()
        print("&gt;&gt;&gt; " + repr(strLine))
        sys.stdout.flush

tst()
</snippet></ROW><ROW><id>16806506</id><snippet>Process started.
Traceback (most recent call last):
  File "foo.py", line 13, in &lt;module&gt;
    tst()
  File "foo.py", line 8, in tst
    for line in iter(p.stdout.readline, ''):
NameError: global name 'p' is not defined
</snippet></ROW><ROW><id>16806506</id><snippet>p</snippet></ROW><ROW><id>16806506</id><snippet>proc</snippet></ROW><ROW><id>16806506</id><snippet>proc.communicate()</snippet></ROW><ROW><id>16806506</id><snippet>cat /dev/random</snippet></ROW><ROW><id>16806506</id><snippet>subprocess</snippet></ROW><ROW><id>16806511</id><snippet>def close_far(a, b, c):
  x, y, z = sorted([a, b, c])
  delta_close, delta_far = sorted([y - x, z - y])
  return delta_close &lt;= 1 and delta_far &gt;= 2
</snippet></ROW><ROW><id>16806820</id><snippet>yield</snippet></ROW><ROW><id>16806820</id><snippet>itertools.permutations</snippet></ROW><ROW><id>16806930</id><snippet>len(string.digits + string.letters) = 62.
</snippet></ROW><ROW><id>16807050</id><snippet>&gt;&gt;&gt; isinstance([0, 10, 20, 30], list)
True
&gt;&gt;&gt; isinstance(50, list)
False
</snippet></ROW><ROW><id>16807050</id><snippet>collections.Sequence</snippet></ROW><ROW><id>16807050</id><snippet>list</snippet></ROW><ROW><id>16807050</id><snippet>isinstance</snippet></ROW><ROW><id>16807050</id><snippet>type(x) in (..., ...)</snippet></ROW><ROW><id>16807496</id><snippet>&lt;form&gt;
&lt;input type="text" value="asd"&gt;
&lt;input  type="reset"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>16807529</id><snippet>photo  = request.files.get('photo')
</snippet></ROW><ROW><id>16807529</id><snippet>photo_data = photo.file.read()
</snippet></ROW><ROW><id>16807529</id><snippet>base64.b64encode(photo_data)
</snippet></ROW><ROW><id>16807579</id><snippet>with open(fname) as f:
    lines = f.readlines()
    for line in lines:
        if not line.strip().endswith(':'):
            print line
</snippet></ROW><ROW><id>16807579</id><snippet>fname</snippet></ROW><ROW><id>16807963</id><snippet>yield</snippet></ROW><ROW><id>16807963</id><snippet>def unlist(l):
    if isinstance(l, unicode) or isinstance(l, str):
        print "This should be printed at least !"
        yield l
    if isinstance(l, list):
        for elem in l:
            for res in unlist(elem):
                yield res
</snippet></ROW><ROW><id>16807963</id><snippet>yield</snippet></ROW><ROW><id>16807963</id><snippet>unlist(elem)</snippet></ROW><ROW><id>16807963</id><snippet>&gt;&gt;&gt; def unlist(l):
...     if isinstance(l, unicode) or isinstance(l, str):
...         print "This should be printed at least !"
...         yield l
...     if isinstance(l, list):
...         for elem in l:
...             for res in unlist(elem):
...                 yield res
... 
&gt;&gt;&gt; l = ['a', u'b', 1]
&gt;&gt;&gt; for each in unlist(l): print each
... 
This should be printed at least !
a
This should be printed at least !
b
</snippet></ROW><ROW><id>16807963</id><snippet>yield from</snippet></ROW><ROW><id>16807963</id><snippet>def unlist(l):
    if isinstance(l, unicode) or isinstance(l, str):
        print "This should be printed at least !"
        yield l
    if isinstance(l, list):
        for elem in l:
            yield from unlist(elem)
</snippet></ROW><ROW><id>16807963</id><snippet>basestring</snippet></ROW><ROW><id>16807963</id><snippet>str</snippet></ROW><ROW><id>16807963</id><snippet>unicode</snippet></ROW><ROW><id>16807963</id><snippet>if isinstance(l, basestring):
    # either a str or a unicode value
</snippet></ROW><ROW><id>16808248</id><snippet>def function_1():
    with open('input.txt') as f:
        for line in f:
            number, rest = line.split(None, 1)
            print '{} : {}'.format(number, rest.rstrip())
</snippet></ROW><ROW><id>16808248</id><snippet>.split(None, 1)</snippet></ROW><ROW><id>16808300</id><snippet>fft.fftfreq</snippet></ROW><ROW><id>16808300</id><snippet>d</snippet></ROW><ROW><id>16808359</id><snippet>str</snippet></ROW><ROW><id>16808359</id><snippet>str</snippet></ROW><ROW><id>16808359</id><snippet>unicode()</snippet></ROW><ROW><id>16808359</id><snippet>str</snippet></ROW><ROW><id>16808359</id><snippet>bytes</snippet></ROW><ROW><id>16808359</id><snippet>a2b_hex</snippet></ROW><ROW><id>16808359</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.a2b_hex('48656c6c6f20576f726c6421')
b'Hello World!'
</snippet></ROW><ROW><id>16808448</id><snippet>NaN</snippet></ROW><ROW><id>16808448</id><snippet>In [36]: def _sum(x):
   ....:     if len(x) == 0: return 0
   ....:     else: return sum(x)
   ....:     

In [37]: s.resample('M', how=_sum)
Out[37]: 
2013-01-31    3   
2013-02-28    0   
2013-03-31    3   
Freq: M, dtype: int64
</snippet></ROW><ROW><id>16808518</id><snippet>enumerate()</snippet></ROW><ROW><id>16808518</id><snippet>int</snippet></ROW><ROW><id>16808518</id><snippet>enumobject.c</snippet></ROW><ROW><id>16808518</id><snippet>def enumerate(iterable, start=0):
    count = start
    for elem in iterable:
        yield count, elem
        count += 1
</snippet></ROW><ROW><id>16808518</id><snippet>yield</snippet></ROW><ROW><id>16808518</id><snippet>next()</snippet></ROW><ROW><id>16808518</id><snippet>yield</snippet></ROW><ROW><id>16808518</id><snippet>int</snippet></ROW><ROW><id>16808518</id><snippet>int</snippet></ROW><ROW><id>16808536</id><snippet>gem install pry-doc
</snippet></ROW><ROW><id>16808536</id><snippet>show-doc</snippet></ROW><ROW><id>16808536</id><snippet>pry&gt; x = 'potato'
=&gt; "potato"
pry&gt; show-doc x.strip

From: string.c (C Method):
Owner: String
Visibility: public
Signature: strip()
Number of lines: 4

Returns a copy of str with leading and trailing whitespace removed.

   "    hello    ".strip   #=&gt; "hello"
   "\tgoodbye\r\n".strip   #=&gt; "goodbye"
</snippet></ROW><ROW><id>16808536</id><snippet>show-source</snippet></ROW><ROW><id>16808536</id><snippet>pry&gt; show-source x.strip

From: string.c (C Method):
Owner: String
Visibility: public
Number of lines: 7

static VALUE
rb_str_strip(VALUE str)
{
    str = rb_str_dup(str);
    rb_str_strip_bang(str);
    return str;
}
</snippet></ROW><ROW><id>16808536</id><snippet>pry&gt; class Foo
pry*   def bar
pry*     puts 'hello'
pry*   end
pry* end
=&gt; nil
</snippet></ROW><ROW><id>16808536</id><snippet>pry&gt; show-source Foo

From: (pry) @ line 2:
Class name: Foo
Number of lines: 5

class Foo
  def bar
    puts 'hello'
  end
end
</snippet></ROW><ROW><id>16808536</id><snippet>pry&gt; show-source Foo#bar

From: (pry) @ line 3:
Owner: Foo
Visibility: public
Number of lines: 3

def bar
  puts 'hello'
end
</snippet></ROW><ROW><id>16808536</id><snippet>Pry.commands.command</snippet></ROW><ROW><id>16808536</id><snippet>?</snippet></ROW><ROW><id>16808536</id><snippet>??</snippet></ROW><ROW><id>16808536</id><snippet>~/.pryrc</snippet></ROW><ROW><id>16808536</id><snippet>Pry.commands.command /(.+) \?\z/ do |a|
  run "show-doc", a
end

Pry.commands.command /(.+) \?\?\z/ do |a|
  run "show-source", a
end
</snippet></ROW><ROW><id>16808536</id><snippet>?</snippet></ROW><ROW><id>16808536</id><snippet>?</snippet></ROW><ROW><id>16808536</id><snippet>Fixnum#zero?</snippet></ROW><ROW><id>16808536</id><snippet>pry&gt; puts ?

From: io.c (C Method):
Owner: Kernel
Visibility: private
Signature: puts(*arg1)
Number of lines: 3

Equivalent to

    $stdout.puts(obj, ...)
</snippet></ROW><ROW><id>16808536</id><snippet>pry&gt; puts ??

From: io.c (C Method):
Owner: Kernel
Visibility: private
Number of lines: 8

static VALUE
rb_f_puts(int argc, VALUE *argv, VALUE recv)
{
    if (recv == rb_stdout) {
        return rb_io_puts(argc, argv, recv);
    }
    return rb_funcall2(rb_stdout, rb_intern("puts"), argc, argv);
}
</snippet></ROW><ROW><id>16808536</id><snippet>pry&gt; 0.zero?     # still works!
=&gt; true

pry&gt; 0.zero? ?

From: numeric.c (C Method):
Owner: Fixnum
Visibility: public
Signature: zero?()
Number of lines: 1

Returns true if fix is zero.
</snippet></ROW><ROW><id>16809079</id><snippet>(?&lt;!\\)%.*</snippet></ROW><ROW><id>16809079</id><snippet>\verb!%!</snippet></ROW><ROW><id>16809088</id><snippet>self.Bind(wx.EVT_CHAR_HOOK, self.OnKeyDown)</snippet></ROW><ROW><id>16809441</id><snippet>\</snippet></ROW><ROW><id>16809441</id><snippet>os.listdir(r"\\MachineX\Projects\EFP\INT\VPM\.")
</snippet></ROW><ROW><id>16809441</id><snippet>/</snippet></ROW><ROW><id>16809441</id><snippet>\</snippet></ROW><ROW><id>16809478</id><snippet>@classmethod</snippet></ROW><ROW><id>16809478</id><snippet>@classmethod</snippet></ROW><ROW><id>16809478</id><snippet>__unicode__</snippet></ROW><ROW><id>16809478</id><snippet>@classmethod</snippet></ROW><ROW><id>16809478</id><snippet>region</snippet></ROW><ROW><id>16809478</id><snippet>classmethod</snippet></ROW><ROW><id>16809478</id><snippet>staticmethod</snippet></ROW><ROW><id>16809666</id><snippet>ast</snippet></ROW><ROW><id>16809666</id><snippet>def</snippet></ROW><ROW><id>16809666</id><snippet>import ast
with open('mymodule.py') as f:
    tree = ast.parse(f.read())
for node in ast.walk(tree):
    if isinstance(node, ast.FunctionDef):
        print node.lineno, node.col_offset
</snippet></ROW><ROW><id>16809869</id><snippet>--something</snippet></ROW><ROW><id>16809869</id><snippet>--something foo</snippet></ROW><ROW><id>16809869</id><snippet>wc -l myfile.txt</snippet></ROW><ROW><id>16809869</id><snippet>['wc', '-l', 'myfile.txt']</snippet></ROW><ROW><id>16809869</id><snippet>subprocess</snippet></ROW><ROW><id>16809869</id><snippet>['wc -l myfile.txt']
</snippet></ROW><ROW><id>16809869</id><snippet>['wc', '-l myfile.txt']
</snippet></ROW><ROW><id>16809869</id><snippet>['wc', '-l', 'myfile.txt']
</snippet></ROW><ROW><id>16809869</id><snippet>-l</snippet></ROW><ROW><id>16809869</id><snippet>myfile.txt</snippet></ROW><ROW><id>16809869</id><snippet>'-sOutputFile={0}'</snippet></ROW><ROW><id>16809869</id><snippet>grep</snippet></ROW><ROW><id>16809869</id><snippet>--context=3
-C3
</snippet></ROW><ROW><id>16809869</id><snippet>-sOutputFile=foo
</snippet></ROW><ROW><id>16810321</id><snippet>regex = re.compile(r"[^\W\d_]", re.UNICODE)
</snippet></ROW><ROW><id>16810321</id><snippet>\p{L}</snippet></ROW><ROW><id>16810321</id><snippet>\w</snippet></ROW><ROW><id>16810321</id><snippet>[^\W]</snippet></ROW><ROW><id>16810321</id><snippet>[^\W\d_]</snippet></ROW><ROW><id>16810321</id><snippet>\w</snippet></ROW><ROW><id>16810321</id><snippet>\d</snippet></ROW><ROW><id>16810321</id><snippet>_</snippet></ROW><ROW><id>16810321</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile(r"[^\W\d_]", re.UNICODE)
&gt;&gt;&gt; regex.findall("aä12_")
['a', 'ä']
</snippet></ROW><ROW><id>16810524</id><snippet>\1</snippet></ROW><ROW><id>16810524</id><snippet># replace all twin digits by zeroes, but retain whitespace in between
re.sub(r"\d(?P&lt;whitespace&gt;\s*)\d", r"0\g&lt;whitespace&gt;0", "0 1")
&gt;&gt;&gt; '0 0'
</snippet></ROW><ROW><id>16810678</id><snippet>defaultdict</snippet></ROW><ROW><id>16810678</id><snippet>from collections import defaultdict
trail = defaultdict(list)
</snippet></ROW><ROW><id>16810678</id><snippet>trail[i].append(j)
</snippet></ROW><ROW><id>16810678</id><snippet>trail = {[]}
</snippet></ROW><ROW><id>16810678</id><snippet>{'a': 1, 'b': 2}
</snippet></ROW><ROW><id>16810678</id><snippet>{[]}</snippet></ROW><ROW><id>16810678</id><snippet>set</snippet></ROW><ROW><id>16810678</id><snippet>&gt;&gt;&gt; {1}
set([1])
</snippet></ROW><ROW><id>16810728</id><snippet>&gt;&gt;&gt; from string import Template
&gt;&gt;&gt; msg = Template("Hi $name")
&gt;&gt;&gt; msg.substitute(name='World')
'Hi World'
</snippet></ROW><ROW><id>16810728</id><snippet>&gt;&gt;&gt; header = '&lt;html&gt;&lt;head&gt;&lt;title&gt;Sample&lt;/title&gt;&lt;/head&gt;&lt;body&gt;'
&gt;&gt;&gt; body = '&lt;p&gt;Hello &lt;strong&gt;$name&lt;/strong&gt;&lt;/p&gt;'
&gt;&gt;&gt; footer = '&lt;/body&gt;&lt;/html&gt;'
&gt;&gt;&gt; html = Template(header+body+footer)
&gt;&gt;&gt; html.substitute(name='World')
'&lt;html&gt;&lt;head&gt;&lt;title&gt;Sample&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Hello &lt;strong&gt;World&lt;/strong&gt;&lt;/
p&gt;&lt;/body&gt;&lt;/html&gt;'
</snippet></ROW><ROW><id>16810804</id><snippet>from glob import iglob

level3 = iglob('/home/backups/mysql/*/*/*')
</snippet></ROW><ROW><id>16810804</id><snippet>.</snippet></ROW><ROW><id>16810804</id><snippet>from itertools import ifilter
import os.path

l3_dirs = ifilter(os.path.isdir, level3)
</snippet></ROW><ROW><id>16810804</id><snippet>filter</snippet></ROW><ROW><id>16810804</id><snippet>ifilter</snippet></ROW><ROW><id>16811228</id><snippet>read_data</snippet></ROW><ROW><id>16811228</id><snippet>[['Country', 'Year', 'GDP ($US)', 'Population'],
 ['Angola', '2002', '11431738368', '10760510'],
 ['Angola', '2005', '32810672128', '11706954'],
 ['Antigua and Barbuda', '2002', '714677760', '67448'],
 ['Antigua and Barbuda', '2005', '875751360', '68722'],
 ['Argentina', '2002', '1.02E+11', '38331121'],
 ['Argentina', '2005', '1.83E+11', '39537943'],
 ['Armenia', '2002', '2376335104', '3013818'],
 ['Armenia', '2005', '4902779392', '2982904']]
</snippet></ROW><ROW><id>16811228</id><snippet>read_data = read_data[1:]
</snippet></ROW><ROW><id>16811228</id><snippet>csv.read</snippet></ROW><ROW><id>16811228</id><snippet>read_data</snippet></ROW><ROW><id>16811228</id><snippet>next(read_data)
</snippet></ROW><ROW><id>16811228</id><snippet>'GDP ($US)'</snippet></ROW><ROW><id>16811228</id><snippet>'Population'</snippet></ROW><ROW><id>16811228</id><snippet>defaultdict</snippet></ROW><ROW><id>16811228</id><snippet>import collections
data = collections.defaultdict(dict)

for line in read_data:
    try:
        gdp = float(line[2]) / float(line[3])
    # Make sure this exception catches what you want.
    except (ValueError, ZeroDivisionError):
        continue
    data[line[0]][line[1]] = gdp
</snippet></ROW><ROW><id>16811228</id><snippet>data</snippet></ROW><ROW><id>16811228</id><snippet>{'Angola': {'2002': 1062.3788619684383, '2005': 2802.6651619200006},
 'Antigua and Barbuda': {'2002': 10595.981496856837,
                         '2005': 12743.391635866245},
 'Argentina': {'2002': 2661.023140961622, '2005': 4628.465370593508},
 'Armenia': {'2002': 788.4799626254804, '2005': 1643.6262756025671}}
</snippet></ROW><ROW><id>16811228</id><snippet>list_data = []
for key, value in data.items():
    list_data.append([key] + [value[year] for year in sorted(value.keys())])
</snippet></ROW><ROW><id>16811228</id><snippet>[['Antigua and Barbuda', 10595.981496856837, 12743.391635866245],
 ['Argentina', 2661.023140961622, 4628.465370593508],
 ['Angola', 1062.3788619684383, 2802.6651619200006],
 ['Armenia', 788.4799626254804, 1643.6262756025671]]
</snippet></ROW><ROW><id>16811228</id><snippet>list_data = []
for key, value in data.items():
    list_data.append([key] + [value[year] for year in ('2002', '2005')])
</snippet></ROW><ROW><id>16811228</id><snippet>list_data = []
for key, value in data.items():
    list_data.append([key] + [value.get(year, 0) for year in ('2002', '2005')])
</snippet></ROW><ROW><id>16811228</id><snippet>0</snippet></ROW><ROW><id>16811228</id><snippet>list_data = []
for key, value in data.items():
    list_data.append([key] + [value.get(year) for year in ('2002', '2005')
                              if value.get(year) is not None])
</snippet></ROW><ROW><id>16811517</id><snippet>.</snippet></ROW><ROW><id>16811517</id><snippet>.data</snippet></ROW><ROW><id>16811517</id><snippet>/tmp</snippet></ROW><ROW><id>16811517</id><snippet>passwords.txt</snippet></ROW><ROW><id>16811517</id><snippet>time.time()</snippet></ROW><ROW><id>16811517</id><snippet>os.chmod(file, '022')</snippet></ROW><ROW><id>16811517</id><snippet>os.remove(file)</snippet></ROW><ROW><id>16811914</id><snippet>import Tkinter as tk</snippet></ROW><ROW><id>16811914</id><snippet>from Tkinter import *</snippet></ROW><ROW><id>16811914</id><snippet>Q_and_A</snippet></ROW><ROW><id>16811914</id><snippet>tk.Frame</snippet></ROW><ROW><id>16811914</id><snippet>import Tkinter as tk

class Q_and_A(tk.Frame):
    def __init__(self, master):
        tk.Frame.__init__(self, master, borderwidth=1, relief="sunken")
        self.label = tk.Label(self)
        self.results_txtbx = tk.Text(self, width=20, height=4, wrap="none",
                                     borderwidth=0, highlightthickness=0)
        self.results_scrbr = tk.Scrollbar(self, orient="vertical", 
                                          command=self.results_txtbx.yview)
        self.results_txtbx.configure(yscrollcommand=self.results_scrbr.set)

        self.label.grid(row=1, columnspan=2)
        self.results_scrbr.grid(row=0, column=1, sticky="ns")
        self.results_txtbx.grid(row=0, column=0, sticky="nsew")
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

root = tk.Tk()
root.wm_title("Question And Answer")

app = Q_and_A(root)
app.pack(side="top", fill="both", expand=True)
root.mainloop()
</snippet></ROW><ROW><id>16812028</id><snippet>&gt;&gt;&gt; class K1(object):
...     def __init__(self):
...         self.attr = 'value'
... 
&gt;&gt;&gt; x = K1()
&gt;&gt;&gt; x.__dict__
{'attr': 'value'}
&gt;&gt;&gt; class K2(object):
...     attr = 'value'
...     def __init__(self):
...         self.another = 'value2'
... 
&gt;&gt;&gt; y = K2()
&gt;&gt;&gt; y.__dict__
{'another': 'value2'}
</snippet></ROW><ROW><id>16812028</id><snippet>x</snippet></ROW><ROW><id>16812028</id><snippet>attr</snippet></ROW><ROW><id>16812028</id><snippet>y</snippet></ROW><ROW><id>16812028</id><snippet>another</snippet></ROW><ROW><id>16812028</id><snippet>&gt;&gt;&gt; y.attr
'value'
</snippet></ROW><ROW><id>16812028</id><snippet>&gt;&gt;&gt; y.__class__.__dict__
dict_proxy({'__module__': '__main__', 'attr': 'value',
'__dict__': &lt;attribute '__dict__' of 'K2' objects&gt;,
'__weakref__': &lt;attribute '__weakref__' of 'K2' objects&gt;,
'__doc__': None, '__init__': &lt;function __init__ at 0x80185b9b0&gt;})
</snippet></ROW><ROW><id>16812028</id><snippet>attr</snippet></ROW><ROW><id>16812028</id><snippet>x.__class__.__dict__</snippet></ROW><ROW><id>16812028</id><snippet>attr</snippet></ROW><ROW><id>16812028</id><snippet>&gt;&gt;&gt; x.__class__.__dict__
dict_proxy({'__dict__': &lt;attribute '__dict__' of 'K1' objects&gt;,
'__module__': '__main__',
'__weakref__': &lt;attribute '__weakref__' of 'K1' objects&gt;,
'__doc__': None, '__init__': &lt;function __init__ at 0x80185b938&gt;})
</snippet></ROW><ROW><id>16812028</id><snippet>x.attr</snippet></ROW><ROW><id>16812028</id><snippet>y.attr</snippet></ROW><ROW><id>16812028</id><snippet>attr</snippet></ROW><ROW><id>16812028</id><snippet>y.attr</snippet></ROW><ROW><id>16812028</id><snippet>&gt;&gt;&gt; K2.attr = 'newvalue'
&gt;&gt;&gt; y.attr
'newvalue'
</snippet></ROW><ROW><id>16812028</id><snippet>&gt;&gt;&gt; z = K2()
&gt;&gt;&gt; z.attr
'newvalue'
</snippet></ROW><ROW><id>16812028</id><snippet>attr</snippet></ROW><ROW><id>16812028</id><snippet>&gt;&gt;&gt; w = K1()
&gt;&gt;&gt; w.attr = 'private to w'
&gt;&gt;&gt; w.attr
'private to w'
&gt;&gt;&gt; x.attr
'value'
</snippet></ROW><ROW><id>16812028</id><snippet>w.attr</snippet></ROW><ROW><id>16812028</id><snippet>w.__dict__['attr']</snippet></ROW><ROW><id>16812028</id><snippet>x.attr</snippet></ROW><ROW><id>16812028</id><snippet>x.__dict__['attr']</snippet></ROW><ROW><id>16812028</id><snippet>y.attr</snippet></ROW><ROW><id>16812028</id><snippet>z.attr</snippet></ROW><ROW><id>16812028</id><snippet>y.__class__.__dict__['attr']</snippet></ROW><ROW><id>16812028</id><snippet>z.__class__.__dict__['attr']</snippet></ROW><ROW><id>16812028</id><snippet>y.__class__</snippet></ROW><ROW><id>16812028</id><snippet>z.__class__</snippet></ROW><ROW><id>16812028</id><snippet>K2</snippet></ROW><ROW><id>16812028</id><snippet>K2.attr</snippet></ROW><ROW><id>16812128</id><snippet>print</snippet></ROW><ROW><id>16812128</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.sqrt(33)
5.744562646538029
&gt;&gt;&gt; print math.sqrt(33)
5.74456264654
</snippet></ROW><ROW><id>16812318</id><snippet>......
if  credentials is None:
    #step 1
    auth_uri = flow.step1_get_authorize_url() # Redirect the user to auth_uri
    print 'Go to the following link in your browser: ' + auth_uri
    code = raw_input('Enter verification code: ').strip()
    #step 2
    credentials = flow.step2_exchange(code)
else:
    print 'GDrive credentials are still current'

#authorise
http = httplib2.Http()
http = credentials.authorize(http)
print 'Authorisation successfully completed'
......etc
</snippet></ROW><ROW><id>16812783</id><snippet>PyObject *args = Py_BuildValue("(s)", "blahdy blah");    
PyObject *keywords = PyDict_New();
PyDict_SetItemString(keywords, "somearg", Py_True);

PyObject_Call(PyObject_GetAttrString(myobject, "do something"), args, keywords);
Py_DECREF(args);
Py_DECREF(keywords);
</snippet></ROW><ROW><id>16812967</id><snippet>def are_int(iterable):
    return all(isinstance(i, int) for i in iterable)

def matrix_dimensions(matrix):
    col = len(matrix[0])
    if not all(len(l) == col and are_int(l) for l in matrix):
        return 'This is not a valid matrix'
    else:
        return len(matrix), col

m = [[1,4,3], [4,0,21], [3,4,[5,7]], [1,2,3], [1,2,3]]
l = [[1,4,3], [4,0,21], [3,4,7], [1,2,3], [1,2,3]]

print(matrix_dimensions(m))
print(matrix_dimensions(l))
</snippet></ROW><ROW><id>16812967</id><snippet>This is not a valid matrix
(5, 3)
</snippet></ROW><ROW><id>16812982</id><snippet>gc</snippet></ROW><ROW><id>16813152</id><snippet>*</snippet></ROW><ROW><id>16813152</id><snippet>args</snippet></ROW><ROW><id>16813164</id><snippet>a = array([[5.97561615e-06, 0.055617379], 0.119262253938, [], 0.21321, []], dtype=object)

In [110]: a.nonzero()
Out[110]: (array([0, 1, 3]),)

non_empty= set(a.nonzero()[0])
complete_index = set(range(len(a)))
empty = list(complete - non_empty)
a[empty]= 0
In [130]: a
Out[130]: array([[5.97561615e-06, 0.055617379], 0.119262253938, 0, 0.21321, 0], dtype=object)
</snippet></ROW><ROW><id>16813240</id><snippet>def media_checks(f): 
  ...
  return pass

def text_checks(f): 
  ...
  return pass

_dispatch = {}
_dispatch['media'] = media_checks
_dispatch['text'] = text_checks

dispatch_func = _dispatch[key]
check_pass = dispatch_func(your_file)
</snippet></ROW><ROW><id>16813345</id><snippet>x=int(a,2)
num_bits = 10
print x - (1 &lt;&lt; num_bits)
</snippet></ROW><ROW><id>16813521</id><snippet>abs(max - min)</snippet></ROW><ROW><id>16813521</id><snippet>max - min</snippet></ROW><ROW><id>16814086</id><snippet>SELECT FOR UPDATE</snippet></ROW><ROW><id>16814086</id><snippet>SELECT FOR UPDATE</snippet></ROW><ROW><id>16814253</id><snippet>def _has22_iter(it):
    for x in it:
        yield x == 2 and x == next(it)

def has22(nums):
    it = iter(nums)
    return any(_has22_iter(it))
</snippet></ROW><ROW><id>16814253</id><snippet>StopIteration</snippet></ROW><ROW><id>16814253</id><snippet>return</snippet></ROW><ROW><id>16814253</id><snippet>raise StopIteration</snippet></ROW><ROW><id>16814253</id><snippet>def testgen(x):
    if x == 0:
        next(iter([])) # implicitly raise
    if x == 1:
        raise StopIteration
    if x == 2:
        return
</snippet></ROW><ROW><id>16814253</id><snippet>list(testgen(0)) # --&gt; []
list(testgen(1)) # --&gt; []
list(testgen(2)) # --&gt; []
list(testgen(3)) # --&gt; []
</snippet></ROW><ROW><id>16814498</id><snippet>raw_data = [
['975676924', '1345207523', '-1953633084', '-2041119774', '587903155'],
['1619201613', '-1384105381', '1433106581', '1445361759', '587903155'],
['-1470352544', '-1068707556', '-1002282042', '-563691616', '587903155'],
['-1958275692', '-739953679', '69580355', '-481818422', '587903155'],
['1619201613', '-739953679', '-1002282042', '-481818422', '587903155']
]

import collections
data = collections.defaultdict(list)

for line in raw_data:
    data[line[0]].extend(line[1:])
</snippet></ROW><ROW><id>16814498</id><snippet>defaultdict(&lt;type 'list'&gt;, {
'1619201613': 
         ['-1384105381', '1433106581', '1445361759', '587903155',
          '-739953679', '-1002282042', '-481818422', '587903155'],  
'-1470352544': 
         ['-1068707556', '-1002282042', '-563691616', '587903155'], 
 '975676924': 
        ['1345207523', '-1953633084', '-2041119774', '587903155'],
 '-1958275692':
         ['-739953679', '69580355', '-481818422', '587903155']})  
</snippet></ROW><ROW><id>16814498</id><snippet>data_list = [[key] + value for key, value in data.items()]
</snippet></ROW><ROW><id>16814612</id><snippet>prop()</snippet></ROW><ROW><id>16814612</id><snippet>$('.myselector').prop('readonly', true);
</snippet></ROW><ROW><id>16814612</id><snippet>.myselector</snippet></ROW><ROW><id>16814771</id><snippet>1</snippet></ROW><ROW><id>16814771</id><snippet>?</snippet></ROW><ROW><id>16814771</id><snippet>0</snippet></ROW><ROW><id>16814771</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.match(r'(\d+).*?', '123').group()
'123'
&gt;&gt;&gt; re.match(r'(\d+).*?', '123abc').group()
'123'
</snippet></ROW><ROW><id>16814771</id><snippet>(\d+)</snippet></ROW><ROW><id>16814771</id><snippet>[\d]+</snippet></ROW><ROW><id>16814771</id><snippet>([\d]+)</snippet></ROW><ROW><id>16814771</id><snippet>&gt;&gt;&gt; re.match(r'(\d+)', '123abc').groups()
('123',)
&gt;&gt;&gt; re.match(r'[\d]+', '123abc').groups()
()
</snippet></ROW><ROW><id>16815056</id><snippet>next()</snippet></ROW><ROW><id>16815056</id><snippet>&gt;&gt;&gt; a = iter(list(range(10)))
&gt;&gt;&gt; for i in a:
...    print(i)
...    next(a)
... 
0
1
2
3
4
5
6
7
8
9
</snippet></ROW><ROW><id>16815056</id><snippet>next()</snippet></ROW><ROW><id>16815056</id><snippet>&gt;&gt;&gt; a = iter(list(range(10)))
&gt;&gt;&gt; for i in a:
...    print(i)
...    _ = next(a)
... 
0
2
4
6
8
</snippet></ROW><ROW><id>16815056</id><snippet>&gt;&gt;&gt; a = iter(list(range(10)))
&gt;&gt;&gt; for i in a:
...    print('Printing: {}'.format(i))
...    next(a)
... 
Printing: 0
1
Printing: 2
3
Printing: 4
5
Printing: 6
7
Printing: 8
9
</snippet></ROW><ROW><id>16815056</id><snippet>next()</snippet></ROW><ROW><id>16815458</id><snippet>class A(Document):
    meta = {
        'abstract': True
    }
    pass

class B(Document):
    meta = {
        'abstract': True
    }
    pass

class C(A, B):
    specific_field_1 = ...
    specific_field_2 = ...

    meta = {
        'collection': 'class_c',
    }
</snippet></ROW><ROW><id>16815840</id><snippet>minidom.py</snippet></ROW><ROW><id>16815840</id><snippet>writexml()</snippet></ROW><ROW><id>16815840</id><snippet>class Element</snippet></ROW><ROW><id>16815840</id><snippet>from xml.dom import minidom

t = minidom.parseString('&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;')

def patcher(method):
  def patching(self, *args, **kwargs):
    old = self.childNodes
    try:
      if not self.childNodes:
        class Dummy(list):
          def __nonzero__(self):  # Python2
            return True
          def __bool__(self):  # Python3
            return True
        old, self.childNodes = self.childNodes, Dummy([])
      return method(self, *args, **kwargs)
    finally:
      self.childNodes = old
  return patching

t.firstChild.__class__.writexml = patcher(t.firstChild.__class__.writexml)

print t.toprettyxml()
</snippet></ROW><ROW><id>16815923</id><snippet>&gt;&gt;&gt; lis = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]
&gt;&gt;&gt; [ x[1] for x in lis]
[2, 5, 8, 11]
</snippet></ROW><ROW><id>16815923</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>16815923</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; map( itemgetter(1), lis)
[2, 5, 8, 11]
</snippet></ROW><ROW><id>16816142</id><snippet>[:, :]</snippet></ROW><ROW><id>16816142</id><snippet>:</snippet></ROW><ROW><id>16816142</id><snippet>:</snippet></ROW><ROW><id>16816142</id><snippet>a = numpy.zeros((3, 3))

In [132]: a
Out[132]: 
array([[ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 0.,  0.,  0.]])
</snippet></ROW><ROW><id>16816142</id><snippet>In [133]: a[1, :] = 3

In [134]: a
Out[134]: 
array([[ 0.,  0.,  0.],
       [ 3.,  3.,  3.],
       [ 0.,  0.,  0.]])
</snippet></ROW><ROW><id>16816142</id><snippet>In [135]: a[:, 1] = 4

In [136]: a
Out[136]: 
array([[ 0.,  4.,  0.],
       [ 3.,  4.,  3.],
       [ 0.,  4.,  0.]])
</snippet></ROW><ROW><id>16816142</id><snippet>In [137]: a[:] = 10

In [138]: a
Out[138]: 
array([[ 10.,  10.,  10.],
       [ 10.,  10.,  10.],
       [ 10.,  10.,  10.]])
</snippet></ROW><ROW><id>16816153</id><snippet>self.deck = self.getDeck(deck)
</snippet></ROW><ROW><id>16816153</id><snippet>deck</snippet></ROW><ROW><id>16816153</id><snippet>__init__</snippet></ROW><ROW><id>16816153</id><snippet>print playerDeck.deck
</snippet></ROW><ROW><id>16816161</id><snippet>nameWindow</snippet></ROW><ROW><id>16816161</id><snippet>cv2.resize</snippet></ROW><ROW><id>16816161</id><snippet>cv2.namedWindow("main", CV_WINDOW_NORMAL)</snippet></ROW><ROW><id>16816287</id><snippet>import sys,os
sys.path.append(os.path.abspath('..'))
from myproj.logger import LOG
</snippet></ROW><ROW><id>16816523</id><snippet>"</snippet></ROW><ROW><id>16816523</id><snippet>spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
</snippet></ROW><ROW><id>16816523</id><snippet>newline=''</snippet></ROW><ROW><id>16816571</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.basename('/home/abc/xyz/12345_993456_pqr')
'12345_993456_pqr'

&gt;&gt;&gt; os.path.basename('/home/abc/xyz/12345_993456_pqr').split('_')
['12345', '993456', 'pqr']

&gt;&gt;&gt; os.path.basename('/home/abc/xyz/12345_993456_pqr').split('_')[1]
'993456'

&gt;&gt;&gt; os.path.basename('/home/abc/xyz/12345_993456_pqr').split('_')[1][:2]
'99'
</snippet></ROW><ROW><id>16816719</id><snippet>A = ones(1,5);
B = 2*ones(1,5);
C = 3*ones(1,5);

load('set1.mat');
</snippet></ROW><ROW><id>16816719</id><snippet>D = [abc1];
</snippet></ROW><ROW><id>16816719</id><snippet>abc1 = 'A B C'</snippet></ROW><ROW><id>16816719</id><snippet>[A B C]</snippet></ROW><ROW><id>16816719</id><snippet>D = eval(['[' abc1 ']']);
</snippet></ROW><ROW><id>16816719</id><snippet>foo.A = ones(1,5);
foo.B = 2*ones(1,5);
foo.C = 3*ones(1,5);

load('set1.mat'); 

D = [foo.(abc1(1,1)) foo.(abc1(1,2)) foo.(abc1(1,3))];
</snippet></ROW><ROW><id>16816719</id><snippet>cat</snippet></ROW><ROW><id>16816719</id><snippet>D = [];
for idx = 1:3
    D = cat(2, D, foo.(abc1(1,idx)));
end
</snippet></ROW><ROW><id>16816719</id><snippet>D = zeros(1, num_elements);
ins_idx = 1;
for idx = 1:3
    temp_num = length(foo.(abc1(1,idx)));
    D(ins_idx:(ins_idx+temp_num-1)) = foo.(abc1(1,idx));
    ins_idx = ins_idx + temp_num;
end
</snippet></ROW><ROW><id>16816830</id><snippet>def __handle_originate_failure(self, reason):
    print "Originate failure: %s" % reason
    return reason  

df = ami.originate(
    channel = "Local/222@users",
    exten = "111",
    priority = "1",
    context = "users")
df.addErrback(__handle_originate_failure)
</snippet></ROW><ROW><id>16816856</id><snippet>&amp;</snippet></ROW><ROW><id>16816856</id><snippet>string</snippet></ROW><ROW><id>16816856</id><snippet>long</snippet></ROW><ROW><id>16816856</id><snippet># at this moment ut data type is string
ut=line.split()[8] #grabs the value 0xd2d32103800600
# convert string to long data type, set base 16
ut = long(ut, 16)
</snippet></ROW><ROW><id>16816856</id><snippet>x   = ut &amp; 0xFFFFFFFF
y   = (ut&gt;&gt;32) &amp; 0xFFFFFF
</snippet></ROW><ROW><id>16816856</id><snippet>f=open('utinfo', 'rb')
for line in f:
    if line.startswith("REVA"):
        ut=line.split()[8] #grabs the value 0xd2d32103800600 
        ut=long(ut,16)
    x   = ut &amp; 0xFFFFFFFF
    y   = (ut&gt;&gt;32) &amp; 0xFFFFFF
</snippet></ROW><ROW><id>16816874</id><snippet>&gt;&gt;&gt; print("\x1b[31m\"red\"\x1b[0m")
"red"
</snippet></ROW><ROW><id>16816874</id><snippet>In [28]: print("\x1b[31m\"red\"\x1b[0m")
         "red"
</snippet></ROW><ROW><id>16817200</id><snippet>subeta</snippet></ROW><ROW><id>16817200</id><snippet>array = subeta['data']
</snippet></ROW><ROW><id>16817200</id><snippet>array</snippet></ROW><ROW><id>16817200</id><snippet>ndarray</snippet></ROW><ROW><id>16817200</id><snippet>float32</snippet></ROW><ROW><id>16817200</id><snippet>ndarray</snippet></ROW><ROW><id>16817200</id><snippet>dtype=float32</snippet></ROW><ROW><id>16817200</id><snippet>.dtype</snippet></ROW><ROW><id>16817200</id><snippet>shape</snippet></ROW><ROW><id>16817283</id><snippet>month</snippet></ROW><ROW><id>16817283</id><snippet>year</snippet></ROW><ROW><id>16817283</id><snippet>hour</snippet></ROW><ROW><id>16817283</id><snippet>minute</snippet></ROW><ROW><id>16817283</id><snippet>second</snippet></ROW><ROW><id>16817283</id><snippet>sys.stdout.write (month(hex) + " " + day(hex) + ", " + year(hex) + " " + hour(hex) + ":" + minute(hex) + ":" + second(hex))
</snippet></ROW><ROW><id>16817283</id><snippet>sys.argv</snippet></ROW><ROW><id>16817283</id><snippet>hex</snippet></ROW><ROW><id>16817283</id><snippet>hex</snippet></ROW><ROW><id>16817283</id><snippet>hex( int(sys.argv[1]) )</snippet></ROW><ROW><id>16817283</id><snippet>&gt;&gt;&gt; lis = ['foo.py', '12']
&gt;&gt;&gt; hex( int(lis[1]) )    #use `int()` as hex expects a number
'0xc'
</snippet></ROW><ROW><id>16817334</id><snippet>In [13]: tennis_sets
Out[13]:
       date  player_A  player_B
0  27/05/13         6         4
1  27/05/13         6         3
2  28/05/13         2         6
3  28/05/13         6         7
4  28/05/13         7         6
5  29/05/13         6         1
6  29/05/13         6         0

In [14]: tennis_sets["pA_wins"] = tennis_sets["player_A"] &gt; tennis_sets["player_B"]

In [15]: tennis_sets["pB_wins"] = tennis_sets["player_B"] &gt; tennis_sets["player_A"]

In [18]: tennis_sets
Out[18]:
       date  player_A  player_B pA_wins pB_wins
0  27/05/13         6         4    True   False
1  27/05/13         6         3    True   False
2  28/05/13         2         6   False    True
3  28/05/13         6         7   False    True
4  28/05/13         7         6    True   False
5  29/05/13         6         1    True   False
6  29/05/13         6         0    True   False

In [21]: matches = tennis_sets.groupby("date").sum()

In [22]: matches[["pA_wins", "pB_wins"]]
Out[22]:
          pA_wins  pB_wins
date
27/05/13        2        0
28/05/13        1        2
29/05/13        2        0
</snippet></ROW><ROW><id>16817788</id><snippet>from matplotlib import rc
rc('text', usetex=True)
</snippet></ROW><ROW><id>16817788</id><snippet>\makebox</snippet></ROW><ROW><id>16817788</id><snippet>\hfill</snippet></ROW><ROW><id>16817788</id><snippet>label=r"\makebox[4cm]{$t^2$ \hfill $0 \leq t \leq 1$}"
label=r"\makebox[4cm]{$1$ \hfill $1 &lt; t \leq 2$}"
label=r"\makebox[4cm]{$3 - t$ \hfill $2 &lt; t \leq 3$}"
</snippet></ROW><ROW><id>16817788</id><snippet>\makebox</snippet></ROW><ROW><id>16817835</id><snippet>def some_method(request):
    ClassificationFormset = formset_factory(ClassificationForm)
    classification_formset = ClassificationFormset(prefix='habitat_fs')
    for form in classification_formset:
        form.initial = {"habitat": "some value"}
</snippet></ROW><ROW><id>16817897</id><snippet>dbshell</snippet></ROW><ROW><id>16817897</id><snippet>&gt; ./manage.py dbshell #opens the database command line.
</snippet></ROW><ROW><id>16817897</id><snippet>$&gt; UPDATE django_content_type SET app_label='&lt;new_label&gt;' WHERE app_label='&lt;old_label&gt;'
$&gt; &lt;ctrl&gt;-D
</snippet></ROW><ROW><id>16818047</id><snippet>arr.argsort()[:3]
</snippet></ROW><ROW><id>16818047</id><snippet>array([0, 2, 1], dtype=int64)
</snippet></ROW><ROW><id>16818047</id><snippet>n</snippet></ROW><ROW><id>16818047</id><snippet>arr.argsort()[:n]
</snippet></ROW><ROW><id>16818223</id><snippet>img</snippet></ROW><ROW><id>16818223</id><snippet>css</snippet></ROW><ROW><id>16818223</id><snippet>js</snippet></ROW><ROW><id>16818223</id><snippet>fonts</snippet></ROW><ROW><id>16818223</id><snippet>MyProject/
|-- Python/
|   |-- bin
|   |   |-- app.py
|   |-- docs
|   |-- sessions
|   |-- tests
|   |   |-- project_tests.py
|   
|-- static/
|   |-- css/
|   |   |-- bootstrap.css
|   |   |-- bootstrap.min.css
|   |   |-- my_custom_styles.css
|   |-- js/
|   |   |-- bootstrap.js
|   |   |-- bootstrap.min.js
|   |-- img/
|   |   |-- glyphicon-halflings.png
|   |   |-- glyphicon-halflings.png
|   |-- fonts/
|   |   |-- cool_font
</snippet></ROW><ROW><id>16818223</id><snippet>/static/</snippet></ROW><ROW><id>16818223</id><snippet>/static/</snippet></ROW><ROW><id>16818223</id><snippet>location ~ ^/static/  {
      alias    /path/to/static/;
      expires 30d;
    }
</snippet></ROW><ROW><id>16818223</id><snippet>www.yoururl.com/static/img/glyphicon-halflings.png</snippet></ROW><ROW><id>16818223</id><snippet>static-min</snippet></ROW><ROW><id>16818223</id><snippet>static-min</snippet></ROW><ROW><id>16818223</id><snippet>|-- static-min/
|   |-- css/
|   |   |-- all_css_concatenated_minimised-723974hgjsf.css
|   |   |-- all_css_concatenated_minimised-723974hgjsf.css.gz
|   |-- js/
|   |   |-- all_js_concatenated_minimised-djad7rhea8f.js
|   |   |-- all_js_concatenated_minimised-djad7rhea8f.js.gz
</snippet></ROW><ROW><id>16818223</id><snippet>expires max</snippet></ROW><ROW><id>16818223</id><snippet>location ~ ^/static-min/  {
      alias    /path/to/static-min/;
      expires  max;
    }
</snippet></ROW><ROW><id>16818229</id><snippet>rows = [row.split() for row in your_tuple]
</snippet></ROW><ROW><id>16818229</id><snippet>.rstrip()</snippet></ROW><ROW><id>16818229</id><snippet>.split()</snippet></ROW><ROW><id>16818229</id><snippet>&gt;&gt;&gt; '    a    b  c \t\n\n   '.split()
['a', 'b', 'c']
</snippet></ROW><ROW><id>16818317</id><snippet> for arg in sys.argv[1:]:
        a=pyfits.getdata(arg).MAG_AUTO
        arr=numpy.array(a)
        indices = heapq.nlargest(10,xrange(len(arr)),key=arr.__getitem__)
        print indices
</snippet></ROW><ROW><id>16818366</id><snippet>re.match(pattern, string, flags=0)</snippet></ROW><ROW><id>16818366</id><snippet>MatchObject</snippet></ROW><ROW><id>16818366</id><snippet>re.search</snippet></ROW><ROW><id>16818366</id><snippet>re.findall</snippet></ROW><ROW><id>16818385</id><snippet>from bs4 import BeautifulSoup
# or `from BeautifulSoup import BeautifulSoup` if you are using BeautifulSoup 3

text = "&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;"
soup = BeautifulSoup(text)
spans = soup.findAll('span')
total = sum(int(span.string) for span in spans)
print(total)
# 3
</snippet></ROW><ROW><id>16818538</id><snippet>struct</snippet></ROW><ROW><id>16818538</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack('&gt;f', 1.23)
'?\x9dp\xa4'
&gt;&gt;&gt; len(struct.pack('&gt;f', 1.23))
4
</snippet></ROW><ROW><id>16818623</id><snippet>grab_set</snippet></ROW><ROW><id>16818623</id><snippet>grab_set_global</snippet></ROW><ROW><id>16818721</id><snippet>&gt;&gt;&gt; print '{0:.32f}'.format(0.02)
0.02000000000000000041633363423443
</snippet></ROW><ROW><id>16818721</id><snippet>&gt;&gt;&gt; x = 1.0
&gt;&gt;&gt; for i in range(49):
...     x -= 0.02
...
&gt;&gt;&gt; x
0.019999999999999383
&gt;&gt;&gt; x / 0.02 &gt;= 1
False
</snippet></ROW><ROW><id>16818721</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; x = Decimal('1.0')
&gt;&gt;&gt; for i in range(49):
...     x -= Decimal('0.02')
...
&gt;&gt;&gt; x
Decimal('0.02')
&gt;&gt;&gt; x / Decimal('0.02') &gt;= 1
True
</snippet></ROW><ROW><id>16818955</id><snippet>ConfigParser</snippet></ROW><ROW><id>16818955</id><snippet>ConfigParser.ConfigParser</snippet></ROW><ROW><id>16818955</id><snippet>class FormulaConfigParser(ConfigParser)</snippet></ROW><ROW><id>16818955</id><snippet>ConfigParser.get()</snippet></ROW><ROW><id>16818955</id><snippet>.getformula()</snippet></ROW><ROW><id>16818992</id><snippet>AWS_QUERYSTRING_AUTH</snippet></ROW><ROW><id>16818992</id><snippet>S3BotoStorage</snippet></ROW><ROW><id>16818992</id><snippet>S3BotoStorage(bucket="foo", querystring_auth=False)
</snippet></ROW><ROW><id>16818992</id><snippet>querystring_auth</snippet></ROW><ROW><id>16819152</id><snippet>zip.write(p.join(path,shape), shape)</snippet></ROW><ROW><id>16819215</id><snippet>knight = Card(**dict_of_properties)
</snippet></ROW><ROW><id>16819215</id><snippet>dict_of_properties</snippet></ROW><ROW><id>16819215</id><snippet>knight = Card(name='foo', stuff='bar')
</snippet></ROW><ROW><id>16819215</id><snippet>dict_of_properties</snippet></ROW><ROW><id>16819215</id><snippet>dict_of_properties = {
    'name': 'foo',
    'stuff': 'bar'
}
</snippet></ROW><ROW><id>16819246</id><snippet>endswith(suffix[, start[, end]])</snippet></ROW><ROW><id>16819246</id><snippet>TLD = ('.com', '.info', '.org', '.net')
if raw_input("Please enter a hostname").endswith(TLD):
    # blah blah
</snippet></ROW><ROW><id>16819334</id><snippet>decimal</snippet></ROW><ROW><id>16819334</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; obj = Decimal('3.1415926535897932384626433832795028841971')
&gt;&gt;&gt; +obj != obj  # The __pos__ function rounds back to normal precision
True
&gt;&gt;&gt; obj
Decimal('3.1415926535897932384626433832795028841971')
&gt;&gt;&gt; +obj
Decimal('3.141592653589793238462643383')
</snippet></ROW><ROW><id>16819357</id><snippet>A.__dict__ {'paramA': 2, '_messenger': &lt;__main__.Messenger instance at 0x100468cf8&gt;}
A._messenger.__dict__ {'subA': &lt;__main__.SubClassA instance at 0x100468d40&gt;, 
                       'subB': &lt;__main__.SubClassB instance at 0x100468d88&gt;, 
                       'paramA': 6, 'param1': 1, 'paramB': 3}
</snippet></ROW><ROW><id>16819357</id><snippet>'paramA'</snippet></ROW><ROW><id>16819357</id><snippet>A.__dict__</snippet></ROW><ROW><id>16819357</id><snippet>__getattr__</snippet></ROW><ROW><id>16819357</id><snippet>__getattribute__</snippet></ROW><ROW><id>16819357</id><snippet>self.paramA = total</snippet></ROW><ROW><id>16819357</id><snippet> def __setattr__(self,attr,val):
     if attr == '_messenger':
         self.__dict__[attr] = val
     #otherwise, set the attribute and sync the messenger
     else:
         setattr(self._messenger,attr,val)
         # comment out the following line to get your 6
         self.__dict__[attr] = val
</snippet></ROW><ROW><id>16819357</id><snippet>self.__dict__[attr] = val</snippet></ROW><ROW><id>16819392</id><snippet>validate</snippet></ROW><ROW><id>16819392</id><snippet>from flask import Flask, render_template_string
from flaskext.wtf import Form, SelectField

app = Flask(__name__)
app.debug = True
app.secret_key = 's3cr3t'


class AddToReportForm(Form):
    selectReportField = SelectField(u'Reports', choices=[('test1', 'test')])


@app.route('/test', methods=['GET', 'POST'])
def test():
    form = AddToReportForm()
    if form.validate_on_submit():
        print 'OK'
    return render_template_string('''\
&lt;form method=post name="test"&gt;
{{ form.hidden_tag()}}
{{ form.selectReportField }}
&lt;input type="submit"&gt;
&lt;/form&gt;
''', form=form)


app.run(host='0.0.0.0')
</snippet></ROW><ROW><id>16819530</id><snippet>get_resource_uri</snippet></ROW><ROW><id>16819530</id><snippet>dehydrate_resource_uri</snippet></ROW><ROW><id>16819530</id><snippet>def dehydrate_resource_uri(self, bundle):
"""
For the automatically included ``resource_uri`` field, dehydrate
the URI for the given bundle.

Returns empty string if no URI can be generated.
"""

try:
    uri=  self.get_resource_uri(bundle)
    return uri[0]

except NotImplementedError:
    return ''
except NoReverseMatch:
    return ''
</snippet></ROW><ROW><id>16819530</id><snippet>    def dehydrate_resource_uri(self, bundle):


        try:
            uri=  self.get_resource_uri(bundle)
            return uri[0] #return only uri

        except NotImplementedError:
            return ''
        except NoReverseMatch:
            return ''
</snippet></ROW><ROW><id>16819530</id><snippet>UserResource</snippet></ROW><ROW><id>16819530</id><snippet>dehydrate_resource_uri</snippet></ROW><ROW><id>16819542</id><snippet>super</snippet></ROW><ROW><id>16819542</id><snippet>PublishedPostsMixin</snippet></ROW><ROW><id>16819542</id><snippet>object</snippet></ROW><ROW><id>16819542</id><snippet>super</snippet></ROW><ROW><id>16820040</id><snippet>def __init__(self,*args,**kwargs):

    default_values = {a:{},b:34,c:"generic string"}
    for k,v in kwargs.iteritems():
        try:
            if not v is False:
                setattr(self,k,default_values[k])
        except Exception, e:
            print "Argument has no default value.",e
</snippet></ROW><ROW><id>16820308</id><snippet>x = np.linspace(min(aSample), 
                max(aSample),
                int((max(aSample) - min(aSample)) / step))
</snippet></ROW><ROW><id>16820308</id><snippet>np.arange</snippet></ROW><ROW><id>16820314</id><snippet>cardNames</snippet></ROW><ROW><id>16820314</id><snippet>Card</snippet></ROW><ROW><id>16820314</id><snippet>new_cards = [Card(**card) for card in card_list]  # make new card objects
cards = {card.name: card for card in new_cards}  # dict to ref cards by name 
print cards['Knight'].name
</snippet></ROW><ROW><id>16820314</id><snippet>cards = {card['name']: Card(**card) for card in card_list}
</snippet></ROW><ROW><id>16820314</id><snippet>namesOfCards</snippet></ROW><ROW><id>16820314</id><snippet>cards = {card['name']: Card(**card) for card in card_list if card['name'] in names_of_cards}
</snippet></ROW><ROW><id>16820314</id><snippet>locals().update(cards)
print Knight.name
</snippet></ROW><ROW><id>16820434</id><snippet>NFFT</snippet></ROW><ROW><id>16820511</id><snippet>file.truncate</snippet></ROW><ROW><id>16820511</id><snippet>text_file.truncate(0)
</snippet></ROW><ROW><id>16820511</id><snippet>file.truncate</snippet></ROW><ROW><id>16820511</id><snippet>&gt;&gt;&gt; print file.truncate.__doc__
truncate([size]) -&gt; None.  Truncate the file to at most size bytes.

Size defaults to the current file position, as returned by tell().
</snippet></ROW><ROW><id>16820567</id><snippet>pygame.quit()</snippet></ROW><ROW><id>16820567</id><snippet>import pygame
from pygame.locals import *

Clock = pygame.time.Clock()
Display = pygame.display.set_mode((100,100))

Running = True

while Running:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            Running = False
            sys.exit()
            break

    Clock.tick(30)
</snippet></ROW><ROW><id>16820642</id><snippet>L</snippet></ROW><ROW><id>16820642</id><snippet>In [1]: a = "ffffffff723b8640"

In [2]: int(a, 16)
Out[2]: 18446744071331087936L

In [3]: str(int(a, 16))
Out[3]: '18446744071331087936'
</snippet></ROW><ROW><id>16820642</id><snippet>__repr__</snippet></ROW><ROW><id>16820642</id><snippet>In [4]: repr(int(a, 16))
Out[4]: '18446744071331087936L'

In [5]: repr(int(a, 16))[:-1]
Out[5]: '18446744071331087936'
</snippet></ROW><ROW><id>16820670</id><snippet>def create_entry(key1, key2, value, shelf):
    shelf[(key1, key2)] = value
</snippet></ROW><ROW><id>16820670</id><snippet>key1</snippet></ROW><ROW><id>16820670</id><snippet>(key2 for key1, key2 in shelf if key1 == key)</snippet></ROW><ROW><id>16820704</id><snippet>f()</snippet></ROW><ROW><id>16820704</id><snippet>g()</snippet></ROW><ROW><id>16820704</id><snippet>vars()</snippet></ROW><ROW><id>16820704</id><snippet>main</snippet></ROW><ROW><id>16820704</id><snippet>vars(a)</snippet></ROW><ROW><id>16820704</id><snippet>a</snippet></ROW><ROW><id>16820704</id><snippet>print(sorted(vars(a).keys() - vars()))
# prints ['__initializing__', 'f'], only `a` has `f` defined, the `__initializing__` value is a flag used by the import machinery
print(sorted(vars().keys() - vars(a)))
# prints ['a', 'g'], only `main` has imported `a` and defined function `g`
</snippet></ROW><ROW><id>16820704</id><snippet>globals()</snippet></ROW><ROW><id>16820704</id><snippet>__globals__</snippet></ROW><ROW><id>16820704</id><snippet>__globals__</snippet></ROW><ROW><id>16820704</id><snippet>__builtins__</snippet></ROW><ROW><id>16820704</id><snippet>__builtins__</snippet></ROW><ROW><id>16820800</id><snippet>subject</snippet></ROW><ROW><id>16820800</id><snippet>chars</snippet></ROW><ROW><id>16820800</id><snippet>subject</snippet></ROW><ROW><id>16820800</id><snippet>chars</snippet></ROW><ROW><id>16820800</id><snippet>subject</snippet></ROW><ROW><id>16820800</id><snippet>chars</snippet></ROW><ROW><id>16820800</id><snippet>for item in subject:
  if item in chars:
    print item
</snippet></ROW><ROW><id>16820800</id><snippet>for e in chars:
  for i in subject:
    if e in i: # This should really be e == i
      print i
</snippet></ROW><ROW><id>16820851</id><snippet>com</snippet></ROW><ROW><id>16820851</id><snippet>org</snippet></ROW><ROW><id>16820851</id><snippet>[a-zA-Z0-9][\w\.]{4}[\w\.]*@[a-zA-Z0-9]+[.](?:com|co\.in|org|edu)
                                            ^^
</snippet></ROW><ROW><id>16821054</id><snippet>self.yArray[x+y]</snippet></ROW><ROW><id>16821054</id><snippet>self.yArray</snippet></ROW><ROW><id>16821054</id><snippet>yArray</snippet></ROW><ROW><id>16821054</id><snippet>summation = sum(self.yArray[x:y])
</snippet></ROW><ROW><id>16821054</id><snippet>sum</snippet></ROW><ROW><id>16821275</id><snippet>self._canvas</snippet></ROW><ROW><id>16821275</id><snippet>&lt;Configure&gt;</snippet></ROW><ROW><id>16821275</id><snippet>itemconfig</snippet></ROW><ROW><id>16821275</id><snippet>def __init__(self, rows, cols, master=None):
    # ...
    self._frame_id = self._canvas.create_window(0, 0, window=self._tableFrame, anchor=N+W)
    self._canvas.pack(side=LEFT, fill=BOTH, expand=True)
    self._canvas.bind("&lt;Configure&gt;", self.resize_frame)

def resize_frame(self, e):
    self._canvas.itemconfig(self._frame_id, height=e.height, width=e.width)
</snippet></ROW><ROW><id>16821275</id><snippet>import</snippet></ROW><ROW><id>16821275</id><snippet>import Tkinter as tk
# Use tk.Tk, tk.Canvas, etc.
</snippet></ROW><ROW><id>16821286</id><snippet>&lt;link rel="stylesheet" href="../assets/bootstrap/css/bootstrap.min.css" /&gt;
</snippet></ROW><ROW><id>16821560</id><snippet>Cast(Sum(col1) as Number(22,3))
</snippet></ROW><ROW><id>16821560</id><snippet>ORA-01438: value larger than specified precision allowed for this column
</snippet></ROW><ROW><id>16821875</id><snippet>while True:
    variables are set - Each loop the variables are different.         
    data = variables - adding to data on each loop

sql = sql statement + data
send sql as a batch 
</snippet></ROW><ROW><id>16821887</id><snippet>functions.MM()
</snippet></ROW><ROW><id>16821887</id><snippet>&gt;&gt;&gt; def func():
         return 42
&gt;&gt;&gt; func
&lt;function __main__.func&gt;

&gt;&gt;&gt; func()
42
</snippet></ROW><ROW><id>16821984</id><snippet>setup.py</snippet></ROW><ROW><id>16821984</id><snippet>python setup.py install --prefix=${HOME}/usr/
</snippet></ROW><ROW><id>16821984</id><snippet>python setup.py install --user
</snippet></ROW><ROW><id>16821984</id><snippet>'${HOME}/.local/lib/pythonX.Y/site-packages'</snippet></ROW><ROW><id>16822067</id><snippet>%</snippet></ROW><ROW><id>16822067</id><snippet>f.write("%s %s\n" % (int("0xFF" ,16), int("0xAA", 16)))
</snippet></ROW><ROW><id>16822222</id><snippet>TLD = ('.com', '.info', '.org', '.net')
hostName = raw_input(":").lower()
while not hostName.endswith(TLD):
    print "Incorrect input, Try again!"
    hostName = raw_input(":").lower()
</snippet></ROW><ROW><id>16822222</id><snippet>:foo.bar
Incorrect input, Try again!
:google.in
Incorrect input, Try again!
:yahoo.com
</snippet></ROW><ROW><id>16822409</id><snippet>updateui</snippet></ROW><ROW><id>16822409</id><snippet>updatelcd</snippet></ROW><ROW><id>16822409</id><snippet>b</snippet></ROW><ROW><id>16822409</id><snippet>updateui</snippet></ROW><ROW><id>16822409</id><snippet>a</snippet></ROW><ROW><id>16822409</id><snippet>NameError</snippet></ROW><ROW><id>16822409</id><snippet>lcd1</snippet></ROW><ROW><id>16822409</id><snippet>from</snippet></ROW><ROW><id>16822409</id><snippet>in</snippet></ROW><ROW><id>16822409</id><snippet>and including</snippet></ROW><ROW><id>16822409</id><snippet>in</snippet></ROW><ROW><id>16822409</id><snippet>interface.Ui_MainWindow()</snippet></ROW><ROW><id>16822409</id><snippet>class B:
  __init__(self, mainWindow):
    self.mainWindow = mainWindow

  def updatelcd(self):
    for i in range(0, 100):
      self.mainWindow.lcd1.setProperty("value", i)
</snippet></ROW><ROW><id>16822409</id><snippet>import testui as interface
import sys
import b
from PyQt4 import QtCore,  QtGui

ui= interface.Ui_MainWindow()
thing = b.B(ui) 

if __name__ == "__main__":
 app = QtGui.QApplication(sys.argv)
 test = QtGui.QMainWindow()
 ui.setupUi(test)
 ui.lcd1.setProperty("value", 1)
 ui.button1.clicked.connect(thing.updatelcd())
 test.show()
 app.exec_()
</snippet></ROW><ROW><id>16822516</id><snippet>with open('amazing.txt', 'a') as f:
    pl(cat, indent=True, fh=f)
</snippet></ROW><ROW><id>16822516</id><snippet>print(..., file='amazing.txt')</snippet></ROW><ROW><id>16822516</id><snippet>'amazing.txt'.write(...)</snippet></ROW><ROW><id>16822516</id><snippet>'a'</snippet></ROW><ROW><id>16822516</id><snippet>'w'</snippet></ROW><ROW><id>16822686</id><snippet>str(Something.objects.all().query)
</snippet></ROW><ROW><id>16822828</id><snippet>idx = list(H.flatten()).index(H.max())
x, y = idx / H.shape[1], idx % H.shape[1]
</snippet></ROW><ROW><id>16822828</id><snippet>numpy.argwhere(H == H.max())
</snippet></ROW><ROW><id>16822828</id><snippet>H, xedges, yedges = np.histogram2d(x, y, range=rang, bins=binsxy)
</snippet></ROW><ROW><id>16822828</id><snippet>H</snippet></ROW><ROW><id>16822828</id><snippet>xedges, yedges</snippet></ROW><ROW><id>16822828</id><snippet>edges</snippet></ROW><ROW><id>16822828</id><snippet>H</snippet></ROW><ROW><id>16822828</id><snippet>for x, y in numpy.argwhere(H == H.max()):
    # center is between x and x+1
    print numpy.average(xedges[x:x + 2]), numpy.average(yedges[y:y + 2])
</snippet></ROW><ROW><id>16822852</id><snippet>n &lt; k</snippet></ROW><ROW><id>16822852</id><snippet>&gt;&gt;&gt; c(2, 1)
2
&gt;&gt;&gt; c(5, 2)
10
</snippet></ROW><ROW><id>16822868</id><snippet>for line in iter(raw_input, ''):
    if 'BEER' in line:
        print('Drink up!')


foo
bar
aBEERc
Drink up!
***blank line***
</snippet></ROW><ROW><id>16823062</id><snippet>python3-matplotlib</snippet></ROW><ROW><id>16823062</id><snippet>python3-numpy</snippet></ROW><ROW><id>16823062</id><snippet>python-matlab</snippet></ROW><ROW><id>16823182</id><snippet>if __name__ == '__main__':
    if sys.argv[0] == 'useImplementation1'
        import implementations.implementation1 as implementation
    elif sys.argv[1] == 'useImplementation2':
        import implementations.implementation2 as implementation

    b = implementation.B(cls=implementation)
    b.buildAndCallA()
</snippet></ROW><ROW><id>16823182</id><snippet>A = cls.A</snippet></ROW><ROW><id>16823182</id><snippet>class A(object):
    var = 0 #place holder

    def printTheVar(self):
        print self.var


class B(object):
    def __init__(self,cls):
        global A
        A = cls.A

    def buildAndCallA(self):
        a = A()
        a.printTheVar()
</snippet></ROW><ROW><id>16823182</id><snippet>from basefile import *

class A(A):
    var = 10
</snippet></ROW><ROW><id>16823185</id><snippet>generator = (item for item in a if item &gt; 10)
for item in generator:
    ...
</snippet></ROW><ROW><id>16823273</id><snippet>with open('A.txt') as file_a:
    words = {line.strip() for line in file_a}
</snippet></ROW><ROW><id>16823273</id><snippet>words</snippet></ROW><ROW><id>16823273</id><snippet>if second_word in words:
    # ....
</snippet></ROW><ROW><id>16823273</id><snippet>csv</snippet></ROW><ROW><id>16823273</id><snippet>sqlite3</snippet></ROW><ROW><id>16823273</id><snippet>import sqlite3

conn = sqlite3.connect(':memory:')
conn.execute('CREATE TABLE words (word UNIQUE)')

with open('A.txt') as file_a, conn:
    cursor = conn.cursor()
    for line in file_a:
        cursor.execute('INSERT OR IGNORE INTO words VALUES (?)', (line.strip(),))
</snippet></ROW><ROW><id>16823273</id><snippet>cursor = conn.cursor()
for line in second_file:
    second_word = hand_waving
    cursor.execute('SELECT 1 from words where word=?', (second_word,))
    if cursor.fetchone():
         # ....
</snippet></ROW><ROW><id>16823273</id><snippet>:memory:</snippet></ROW><ROW><id>16823273</id><snippet>:memory:</snippet></ROW><ROW><id>16823278</id><snippet>(driver.page_source).encode('ascii', 'ignore')</snippet></ROW><ROW><id>16823278</id><snippet>(driver.page_source).encode('utf-8')</snippet></ROW><ROW><id>16823559</id><snippet>from bs4 import BeautifulSoup

page = open('file.html')
soupPage = BeautifulSoup(page)
findId = soupPage.find(id='url')
findId.contents[0].replace_with('NewString')
print soupPage
</snippet></ROW><ROW><id>16823559</id><snippet>&lt;html&gt;&lt;body&gt;&lt;p id="paragraph"&gt;
Here is the paragraph &lt;a href="/" id="url"&gt;NewString&lt;/a&gt; the paragraph continues.
&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>16823717</id><snippet>def fib(n):
    def fib(n):
        return n if n &lt;= 1 else fib(n-1)+fib(n-2)
    return fib(n)
</snippet></ROW><ROW><id>16823763</id><snippet>struct.unpack</snippet></ROW><ROW><id>16823763</id><snippet>import struct
data = struct.pack('&lt;?3h3h', True, 1,2,3,4,5,6)
result = struct.unpack('&lt;?3h3h', data)
is_enabled = result[0]
cmd_speed = result[1:4]
tach_speed = result[4:7]

print(is_enabled, cmd_speed, tach_speed)
</snippet></ROW><ROW><id>16823763</id><snippet>(True, (1, 2, 3), (4, 5, 6))
</snippet></ROW><ROW><id>16823763</id><snippet>import struct
import itertools as IT

def unpack_formats(fmts, data):
    data = iter(data)
    return [struct.unpack(fmt, ''.join(IT.islice(data, struct.calcsize(fmt))))
            for fmt in fmts]

data = struct.pack('&lt;?3h3h', True, 1,2,3,4,5,6)
fmts = ('&lt;?', '&lt;3h', '&lt;3h')
(is_enabled,), cmd_speed, tach_speed = unpack_formats(fmts, data)
print(is_enabled, cmd_speed, tach_speed)
</snippet></ROW><ROW><id>16823763</id><snippet>(True, (1, 2, 3), (4, 5, 6))
</snippet></ROW><ROW><id>16823763</id><snippet>unpack_formats</snippet></ROW><ROW><id>16823763</id><snippet>''.join</snippet></ROW><ROW><id>16823763</id><snippet>def unpack_formats2(fmts, data):
    result = []
    i = 0
    for fmt in fmts:
        size = struct.calcsize(fmt)
        j = i+size
        result.append(struct.unpack(fmt, data[i:j]))
        i = j
    return result

In [80]: %timeit unpack_formats(fmts, data)
100000 loops, best of 3: 3.51 us per loop

In [81]: %timeit unpack_formats2(fmts, data)
1000000 loops, best of 3: 1.61 us per loop
</snippet></ROW><ROW><id>16823925</id><snippet>submitGuess = Button( master = main, text = "Submit Guess", command = makeAGuess )
</snippet></ROW><ROW><id>16823957</id><snippet>rsplit</snippet></ROW><ROW><id>16823957</id><snippet>print FileName.rsplit('_', 1)[0]
</snippet></ROW><ROW><id>16823965</id><snippet>dict3 = {k: [dict2[i] for i in v] for k, v in dict1.items()}
</snippet></ROW><ROW><id>16823965</id><snippet>k/v</snippet></ROW><ROW><id>16823965</id><snippet>k</snippet></ROW><ROW><id>16823965</id><snippet>v</snippet></ROW><ROW><id>16823965</id><snippet>dict2</snippet></ROW><ROW><id>16823965</id><snippet>v</snippet></ROW><ROW><id>16823965</id><snippet>dict2</snippet></ROW><ROW><id>16824040</id><snippet>testList = [9, 9, 9, 8, 4, 5]</snippet></ROW><ROW><id>16824040</id><snippet>&gt;&gt;&gt; maxListLen = 10
&gt;&gt;&gt; testList = testList+[0]*(maxListLen-len(testList))
[9, 9, 9, 8, 4, 5, 0, 0, 0, 0]
</snippet></ROW><ROW><id>16824040</id><snippet>numpy</snippet></ROW><ROW><id>16824040</id><snippet>&gt;&gt;&gt; testArray = numpy.array([1, 2, 3, 4])
&gt;&gt;&gt; testArray = numpy.append(testArray, [0]*(maxListLen-len(testArray)))
&gt;&gt;&gt; testArray
array([1, 2, 3, 4, 0, 0, 0, 0, 0, 0])
</snippet></ROW><ROW><id>16824280</id><snippet>from sys

sys.getsizeof(obj[, default]) #returns size of a python object.
</snippet></ROW><ROW><id>16824328</id><snippet>- url: /(.*\.(gif|png|jpg|css|js|ico))
  static_files: \1
  upload: (.*\.(gif|png|jpg|css|js|ico))
</snippet></ROW><ROW><id>16824328</id><snippet>- url: /(.*\.(gif|png|jpg|css|js|ico)$)
  static_files: \1
  upload: (.*\.(gif|png|jpg|css|js|ico)$)
</snippet></ROW><ROW><id>16824337</id><snippet>from django.shortcuts import redirect

def login_success(request):
    """
    Redirects users based on whether they are in the admins group
    """
    if request.user.groups.filter(name="admins").exists():
        # user is an admin
        return redirect("admin_list")
    else:
        return redirect("other_view")
</snippet></ROW><ROW><id>16824337</id><snippet>urls.py</snippet></ROW><ROW><id>16824337</id><snippet>url(r'login_success/$', views.login_success, name='login_success')
</snippet></ROW><ROW><id>16824337</id><snippet>LOGIN_REDIRECT_VIEW</snippet></ROW><ROW><id>16824337</id><snippet>LOGIN_REDIRECT_VIEW = 'login_success'
</snippet></ROW><ROW><id>16824489</id><snippet>range_string</snippet></ROW><ROW><id>16824489</id><snippet>iter_rows</snippet></ROW><ROW><id>16824489</id><snippet>row_offset</snippet></ROW><ROW><id>16824489</id><snippet>range_string</snippet></ROW><ROW><id>16824489</id><snippet>from openpyxl import load_workbook

wb = load_workbook('test.xlsx', use_iterators=True)
ws = wb.get_sheet_by_name('Sheet1')


# printing coordinates of all rows and cols
for row in ws.iter_rows(row_offset=2):
    for cell in row:
        print cell.coordinate


# printing coordinates from "A3:E5" range
for row in ws.iter_rows(range_string="A1:E3", row_offset=2):
    for cell in row:
        print cell.coordinate
</snippet></ROW><ROW><id>16824539</id><snippet>[^$]*</snippet></ROW><ROW><id>16824539</id><snippet>[\$|\d]</snippet></ROW><ROW><id>16824539</id><snippet>(199 cents</snippet></ROW><ROW><id>16824539</id><snippet>9</snippet></ROW><ROW><id>16824539</id><snippet>[^$]*?</snippet></ROW><ROW><id>16824539</id><snippet>r'.*?\([^$]*?([\$|\d][^)]* per contract)\)'
</snippet></ROW><ROW><id>16824547</id><snippet>vocab_counter = {vocabLine.strip().lower(): 0 for vocabLine in vocabOutFile}
</snippet></ROW><ROW><id>16824547</id><snippet>for line in testFile:
    for word in re.findall(r'\w+', line.lower()):
        if word in vocab_counter:
            vocab_counter[word] += 1
</snippet></ROW><ROW><id>16824696</id><snippet>name</snippet></ROW><ROW><id>16824696</id><snippet>index</snippet></ROW><ROW><id>16824696</id><snippet>In [99]: df = pd.DataFrame(np.random.randn(8, 4), columns=['A','B','C','D'])

In [100]: s = df.xs(3)

In [101]: s.name = 10

In [102]: df.append(s)
Out[102]: 
           A         B         C         D
0  -2.083321 -0.153749  0.174436  1.081056
1  -1.026692  1.495850 -0.025245 -0.171046
2   0.072272  1.218376  1.433281  0.747815
3  -0.940552  0.853073 -0.134842 -0.277135
4   0.478302 -0.599752 -0.080577  0.468618
5   2.609004 -1.679299 -1.593016  1.172298
6  -0.201605  0.406925  1.983177  0.012030
7   1.158530 -2.240124  0.851323 -0.240378
10 -0.940552  0.853073 -0.134842 -0.277135
</snippet></ROW><ROW><id>16824710</id><snippet>zip()</snippet></ROW><ROW><id>16824710</id><snippet>*</snippet></ROW><ROW><id>16824710</id><snippet>&gt;&gt;&gt; lis = [['a','b','c'],[3,5,0],[3,1,0]] 
&gt;&gt;&gt; for x,y,z in zip(*lis):
    print x,y,z
...     
a 3 3
b 5 1
c 0 0
</snippet></ROW><ROW><id>16824710</id><snippet>&gt;&gt;&gt; zipp = [x for x in zip(*lis) if any(y != 0 for y in x \
                                             if isinstance (y,(int,float)) ) ]
&gt;&gt;&gt; zip(*zipp)
[('a', 'b'), (3, 5), (3, 1)]
</snippet></ROW><ROW><id>16824799</id><snippet>base.html</snippet></ROW><ROW><id>16824799</id><snippet>base.html</snippet></ROW><ROW><id>16824799</id><snippet>base.html</snippet></ROW><ROW><id>16824799</id><snippet>yourbase.html</snippet></ROW><ROW><id>16824825</id><snippet>from tkinter import Tk, Canvas, Frame, BOTH
from time import sleep

class Example(Frame):

def __init__(self, parent):
    Frame.__init__(self, parent)
    self.parent = parent
    self.parent.title("Board")
    self.pack(fill=BOTH, expand=1)
    self.canvas = Canvas(self)
    self.ctr = 10


def initUI(self):
    print(self.ctr)
    #The first four parameters are the x,y coordinates of the two bounding points.
    #The top-left and the bottom-right.
    r = self.canvas.create_rectangle((self.ctr * 10), 0, (self.ctr * 10 + 50), 50,
        outline="#fb0", fill="#fb0")
    '''
    canvas.create_rectangle(50, 0, 100, 50,
        outline="#f50", fill="#f50")
    canvas.create_rectangle(100, 0, 150, 50,
        outline="#05f", fill="#05f")
    '''
    self.canvas.pack(fill=BOTH, expand=1)

    self.ctr += 1
    if self.ctr &gt; 0:
        self.parent.after(1000, self.initUI)

def main():

root = Tk()
ex = Example(root)
root.geometry("400x100+300+300")
root.after(1000, ex.initUI)
root.mainloop()

if __name__ == '__main__':
main()
</snippet></ROW><ROW><id>16824894</id><snippet>def calc_checksum(s):
    sum = 0
    for c in s:
        sum += ord(c)
    sum = -(sum % 256)
    return '%2X' % (sum &amp; 0xFF)

print calc_checksum('00300005000')
</snippet></ROW><ROW><id>16824894</id><snippet>E8</snippet></ROW><ROW><id>16824894</id><snippet>74</snippet></ROW><ROW><id>16824894</id><snippet>E8</snippet></ROW><ROW><id>16824894</id><snippet>#inverse</snippet></ROW><ROW><id>16824894</id><snippet>hex()</snippet></ROW><ROW><id>16824894</id><snippet>-24</snippet></ROW><ROW><id>16824894</id><snippet>-0x18</snippet></ROW><ROW><id>16824894</id><snippet>0xffe8</snippet></ROW><ROW><id>16824894</id><snippet>%</snippet></ROW><ROW><id>16824894</id><snippet>def calc_checksum (string):
    '''
    Calculates checksum for sending commands to the ELKM1.
    Sums the ASCII character values mod256 and takes
    the Twos complement
    '''
    sum= 0

    for i in range(len(string)) :
        sum = sum + ord(string[i])

    temp = sum % 256  #mod256
#    rem = (temp ^ 0xFF) + 1 #two's complement, hard way (one's complement + 1)
    rem = -temp  #two's complement, easier way
    return '%2X' % (rem &amp; 0xFF)
</snippet></ROW><ROW><id>16824894</id><snippet>sum()</snippet></ROW><ROW><id>16824894</id><snippet>    def calc_checksum(s):
        """
        Calculates checksum for sending commands to the ELKM1.
        Sums the ASCII character values mod256 and takes
        the lower byte of the two's complement of that value.
        """
        return '%2X' % (-(sum(ord(c) for c in s) % 256) &amp; 0xFF)
</snippet></ROW><ROW><id>16824937</id><snippet>import csv
workingdir = "C:\Mer\Ven\sample"
csvfile = workingdir+"\test3.csv"
f=open(csvfile,'wb') # opens file for writing (erases contents)
csv.writer(f, delimiter =' ',quotechar =',',quoting=csv.QUOTE_MINIMAL)
</snippet></ROW><ROW><id>16824937</id><snippet>import csv
workingdir = "C:\Mer\Ven\sample"
csvfile = workingdir+"\test3.csv"
f=open(csvfile,'rb') # opens file for reading
reader = csv.reader(f)
for line in reader:
    print line
</snippet></ROW><ROW><id>16824938</id><snippet>C:\Python27</snippet></ROW><ROW><id>16824939</id><snippet>return [Polynomial(0), Polynomial(f)]
</snippet></ROW><ROW><id>16824939</id><snippet>while</snippet></ROW><ROW><id>16824939</id><snippet>return</snippet></ROW><ROW><id>16824939</id><snippet>mod(f[len(f)-1], mf) &lt; mod(s[len(s)-1], ms)</snippet></ROW><ROW><id>16824939</id><snippet>True</snippet></ROW><ROW><id>16825794</id><snippet>Fist</snippet></ROW><ROW><id>16825794</id><snippet>update</snippet></ROW><ROW><id>16825794</id><snippet>class Fist(pygame.sprite.Sprite):
    """moves a clenched fist on the screen, following the mouse"""

    def update(self):
        "move the fist based on the mouse position"
        pos = pygame.mouse.get_pos()
        self.rect.midtop = pos
        if self.punching:
            self.rect.move_ip(5, 10)
</snippet></ROW><ROW><id>16825794</id><snippet>In [112]: import pygame.examples.chimp

In [113]: pygame.examples.chimp.main()
</snippet></ROW><ROW><id>16825794</id><snippet>In [114]: pygame.examples.chimp.main?
Type:       function
String Form:&lt;function main at 0xb14dae4&gt;
File:       /usr/lib/python2.7/dist-packages/pygame/examples/chimp.py
</snippet></ROW><ROW><id>16825794</id><snippet>&gt;&gt;&gt; import inspect

&gt;&gt;&gt; inspect.getabsfile(pygame.examples.chimp.main)
Out[116]: '/usr/lib/python2.7/dist-packages/pygame/examples/chimp.py'
</snippet></ROW><ROW><id>16825866</id><snippet>text</snippet></ROW><ROW><id>16825866</id><snippet>import re
data = re.search(r'.*:([^:]*):', text, re.DOTALL).group(1)
</snippet></ROW><ROW><id>16825866</id><snippet>.*</snippet></ROW><ROW><id>16825866</id><snippet>:</snippet></ROW><ROW><id>16825866</id><snippet>re.DOTALL</snippet></ROW><ROW><id>16825866</id><snippet>.*</snippet></ROW><ROW><id>16825866</id><snippet>:([^:]*):</snippet></ROW><ROW><id>16825866</id><snippet>[^:]*</snippet></ROW><ROW><id>16825866</id><snippet>:</snippet></ROW><ROW><id>16825866</id><snippet>group(1)</snippet></ROW><ROW><id>16825869</id><snippet>from PySide import QtGui, QtCore
import pylab as plt
import numpy as np

N_SAMPLES = 1e6

def test_plot():
    time = np.arange(N_SAMPLES)*1e-3
    sample = np.random.randn(N_SAMPLES)
    plt.plot(time, sample, label="Gaussian noise")
    plt.legend(fancybox=True)
    plt.title("Use the slider to scroll and the spin-box to set the width")
    q = ScrollingToolQT(plt.gcf())
    return q   # WARNING: it's important to return this object otherwise
               # python will delete the reference and the GUI will not respond!


class ScrollingToolQT(object):
    def __init__(self, fig):
        # Setup data range variables for scrolling
        self.fig = fig
        self.xmin, self.xmax = fig.axes[0].get_xlim()
        self.step = 1 # axis units

        self.scale = 1e3 # conversion betweeen scrolling units and axis units

        # Retrive the QMainWindow used by current figure and add a toolbar
        # to host the new widgets
        QMainWin = fig.canvas.parent()
        toolbar = QtGui.QToolBar(QMainWin)
        QMainWin.addToolBar(QtCore.Qt.BottomToolBarArea, toolbar)

        # Create the slider and spinbox for x-axis scrolling in toolbar
        self.set_slider(toolbar)
        self.set_spinbox(toolbar)

        # Set the initial xlimits coherently with values in slider and spinbox
        self.set_xlim = self.fig.axes[0].set_xlim
        self.draw_idle = self.fig.canvas.draw_idle
        self.ax = self.fig.axes[0]
        self.set_xlim(0, self.step)
        self.fig.canvas.draw()

    def set_slider(self, parent):
        # Slider only support integer ranges so use ms as base unit
        smin, smax = self.xmin*self.scale, self.xmax*self.scale

        self.slider = QtGui.QSlider(QtCore.Qt.Horizontal, parent=parent)
        self.slider.setTickPosition(QtGui.QSlider.TicksAbove)
        self.slider.setTickInterval((smax-smin)/10.)
        self.slider.setMinimum(smin)
        self.slider.setMaximum(smax-self.step*self.scale)
        self.slider.setSingleStep(self.step*self.scale/5.)
        self.slider.setPageStep(self.step*self.scale)
        self.slider.setValue(0)  # set the initial position
        self.slider.valueChanged.connect(self.xpos_changed)
        parent.addWidget(self.slider)

    def set_spinbox(self, parent):
        self.spinb = QtGui.QDoubleSpinBox(parent=parent)
        self.spinb.setDecimals(3)
        self.spinb.setRange(0.001, 3600.)
        self.spinb.setSuffix(" s")
        self.spinb.setValue(self.step)   # set the initial width
        self.spinb.valueChanged.connect(self.xwidth_changed)
        parent.addWidget(self.spinb)

    def xpos_changed(self, pos):
        #pprint("Position (in scroll units) %f\n" %pos)
        #        self.pos = pos/self.scale
        pos /= self.scale
        self.set_xlim(pos, pos + self.step)
        self.draw_idle()

    def xwidth_changed(self, xwidth):
        #pprint("Width (axis units) %f\n" % step)
        if xwidth &lt;= 0: return
        self.step = xwidth
        self.slider.setSingleStep(self.step*self.scale/5.)
        self.slider.setPageStep(self.step*self.scale)
        old_xlim = self.ax.get_xlim()
        self.xpos_changed(old_xlim[0] * self.scale)
#        self.set_xlim(self.pos,self.pos+self.step)
 #       self.fig.canvas.draw()

if __name__ == "__main__":
    q = test_plot()
    plt.show()
</snippet></ROW><ROW><id>16825874</id><snippet>list.append</snippet></ROW><ROW><id>16825874</id><snippet>None</snippet></ROW><ROW><id>16825874</id><snippet>totalFlowers = flowers.append(seedList[each] * flower[each])
</snippet></ROW><ROW><id>16825874</id><snippet>x = sum(None)
</snippet></ROW><ROW><id>16825874</id><snippet>def garden(seedList):
  flower = [2, 5, 12]
  flowers = []
  for each in range(len(seedList)):
      flowers.append(seedList[each] * flower[each])

  return sum(flowers)
</snippet></ROW><ROW><id>16825874</id><snippet>zip</snippet></ROW><ROW><id>16825874</id><snippet>def garden(seedList):
  flower = [2, 5, 12]
  totalFlowers = sum ( x*y for x,y in zip(flower, seedList) )
  return totalFlowers
</snippet></ROW><ROW><id>16826170</id><snippet>conf_int = results.conf_int()
print conf_int[0]
print conf_int[1]
</snippet></ROW><ROW><id>16826316</id><snippet>class UploadFileForm(forms.Form):
</snippet></ROW><ROW><id>16826316</id><snippet>UploadFileForm</snippet></ROW><ROW><id>16826316</id><snippet>forms.Form</snippet></ROW><ROW><id>16826316</id><snippet>form = UploadFileForm(request.POST, request.FILES)
</snippet></ROW><ROW><id>16826316</id><snippet>form = make new UploadFileForm
form.__init__(request.POST, request.FILES)
</snippet></ROW><ROW><id>16826316</id><snippet>__init__</snippet></ROW><ROW><id>16826316</id><snippet>form</snippet></ROW><ROW><id>16826316</id><snippet>request.POST</snippet></ROW><ROW><id>16826316</id><snippet>request.FILES</snippet></ROW><ROW><id>16826316</id><snippet>__init__</snippet></ROW><ROW><id>16826316</id><snippet>class UploadFileForm extends forms.Form {
    static forms.CharField title = forms.CharField(50);
    static forms.FileField file = forms.FileField();
};

UploadFileForm form = new UploadFileForm(request.POST, request.FILES);
</snippet></ROW><ROW><id>16826316</id><snippet>Form</snippet></ROW><ROW><id>16826316</id><snippet>public Form(int verb, int obj) {
    // blah blah
}
</snippet></ROW><ROW><id>16826316</id><snippet>def __init__(self, verb, obj):
    # blah blah
</snippet></ROW><ROW><id>16826316</id><snippet>self</snippet></ROW><ROW><id>16826316</id><snippet>__init__</snippet></ROW><ROW><id>16826316</id><snippet>self.title</snippet></ROW><ROW><id>16826316</id><snippet>Form</snippet></ROW><ROW><id>16826316</id><snippet>MyForm() # creates an unbound form
MyForm(data) # creates a bound form
MyForm(data, files) # creates a bound file or image form
MyForm(initial=initial_data) # creates an unbound form with initial data
</snippet></ROW><ROW><id>16826316</id><snippet>def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
             initial=None, error_class=ErrorList, label_suffix=':',
             empty_permitted=False):
</snippet></ROW><ROW><id>16826316</id><snippet>Form</snippet></ROW><ROW><id>16826695</id><snippet>(number*multiples)+1</snippet></ROW><ROW><id>16826695</id><snippet>range</snippet></ROW><ROW><id>16826695</id><snippet>&gt;&gt;&gt; def multipleList(number, multiples):
      mult = range(number, (number*multiples)+1 , number)
      return mult
...     
&gt;&gt;&gt; print multipleList(2,9)
[2, 4, 6, 8, 10, 12, 14, 16, 18]
&gt;&gt;&gt; print multipleList(3, 7)
[3, 6, 9, 12, 15, 18, 21]
</snippet></ROW><ROW><id>16826695</id><snippet>None</snippet></ROW><ROW><id>16826695</id><snippet>None</snippet></ROW><ROW><id>16826695</id><snippet>mult</snippet></ROW><ROW><id>16826695</id><snippet>&gt;&gt;&gt; def f():pass
&gt;&gt;&gt; print f()      
None            #default return value
</snippet></ROW><ROW><id>16826775</id><snippet>&gt;&gt;&gt; print re.search("(\w+) vs (\w+) \(\s?(\w+)",my_string).groups()
(u'Hibbert', u'Bosh', u'Chalmers')
</snippet></ROW><ROW><id>16826847</id><snippet>distance((lat1, lon1), (lat2, lon2))
</snippet></ROW><ROW><id>16826847</id><snippet>origin = (lat1, lon1)
destination = (lat2, lon2)
distance(origin, destination)
</snippet></ROW><ROW><id>16827055</id><snippet>APILoggingMixin.finalize_response</snippet></ROW><ROW><id>16827055</id><snippet>self</snippet></ROW><ROW><id>16827055</id><snippet>CategoryDetail</snippet></ROW><ROW><id>16827055</id><snippet>class CategoryDetail(...):
    logger = logger

class APILoggingMixin(object):
    def finalize_response(self, ...):
        self.logger.info('Some message.')

# Or through get_logger()
class CategoryDetail(...):
    def get_logger(self):
        return logger

class APILoggingMixin(object):
    def finalize_response(self, ...):
        self.get_logger().info('Some message.')

    def get_logger(self):
        raise NotImplementedError

# Or take advantage of the fact that `self.__module__` equals to `__name__` in the module of `CategoryDetail`
class APILoggingMixin(object):
    def finalize_response(self, ...):
        logger = logging.getLogger(self.__module__)
        logger.info('Some message.')
</snippet></ROW><ROW><id>16827130</id><snippet>def countFruits(crops):
  count = 0
  for fruit in crops:
    count = count + 1
  return count
</snippet></ROW><ROW><id>16827130</id><snippet>1</snippet></ROW><ROW><id>16827130</id><snippet>fruit</snippet></ROW><ROW><id>16827130</id><snippet>count += 1
</snippet></ROW><ROW><id>16827130</id><snippet>fruit</snippet></ROW><ROW><id>16827130</id><snippet>for</snippet></ROW><ROW><id>16827130</id><snippet>for _ in crops:
</snippet></ROW><ROW><id>16827130</id><snippet>def countFruits(crops):
    count = 0
    for _ in crops:
        count += 1
    return count
</snippet></ROW><ROW><id>16827214</id><snippet>[np.r_[a, np.zeros((N - a.shape[0], m), dtype=a.dtype)] for a in your_arrays]
</snippet></ROW><ROW><id>16827214</id><snippet>for i,a in enumerate(your_arrays):
  rows, cols = a.shape
  if rows != N:
    your_arrays[i] = np.vstack([a, np.zeros((N - rows, cols), dtype=a.dtype)])
</snippet></ROW><ROW><id>16827257</id><snippet>ax.legend()</snippet></ROW><ROW><id>16827257</id><snippet>matplotlib.patches.Rectangle</snippet></ROW><ROW><id>16827257</id><snippet>import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
fig = plt.figure()
ax = fig.add_subplot(111)
bar_0_10 = ax.bar(np.arange(0,10), np.arange(1,11), color="k")
bar_10_100 = ax.bar(np.arange(0,10), np.arange(30,40), bottom=np.arange(1,11), color="g")
# create blank rectangle
extra = Rectangle((0, 0), 1, 1, fc="w", fill=False, edgecolor='none', linewidth=0)
ax.legend([extra, bar_0_10, bar_10_100], ("My explanatory text", "0-10", "10-100"))
plt.show()
</snippet></ROW><ROW><id>16827381</id><snippet>def sellFruits(fruits):
  a = fruits[0] * .25
  o = fruits[1] * .50
  b = fruits[2] * .75
  s = fruits[3] * .35
  totalFruitProfit = a + o + b + s
  return totalFruitProfit
</snippet></ROW><ROW><id>16827381</id><snippet>fruits</snippet></ROW><ROW><id>16827381</id><snippet>fruitL = []</snippet></ROW><ROW><id>16827381</id><snippet>[0] * .25</snippet></ROW><ROW><id>16827381</id><snippet>fruits</snippet></ROW><ROW><id>16827381</id><snippet>0</snippet></ROW><ROW><id>16827381</id><snippet>1</snippet></ROW><ROW><id>16827381</id><snippet>fruits</snippet></ROW><ROW><id>16827381</id><snippet>sellFruits</snippet></ROW><ROW><id>16827381</id><snippet>[0]</snippet></ROW><ROW><id>16827381</id><snippet>0</snippet></ROW><ROW><id>16827381</id><snippet>fruits[0]</snippet></ROW><ROW><id>16827381</id><snippet>fruits</snippet></ROW><ROW><id>16827381</id><snippet>[0] * 4</snippet></ROW><ROW><id>16827381</id><snippet>[0,0,0,0]</snippet></ROW><ROW><id>16827396</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; items = ([4,1,2],[1,2,3],[4,1,2])
&gt;&gt;&gt; OrderedDict((tuple(x), x) for x in items).values()
[[4, 1, 2], [1, 2, 3]]
</snippet></ROW><ROW><id>16827396</id><snippet>&gt;&gt;&gt; set(map(tuple, items))
set([(4, 1, 2), (1, 2, 3)])
</snippet></ROW><ROW><id>16827405</id><snippet>&gt;&gt;&gt; HASH_PASSWORD = HASH_PASSWORD.replace("$","\\$")
&gt;&gt;&gt; print HASH_PASSWORD
\$1\$AMWteFb7\$pD/0oisRcD.6lSvtrjNmb1
</snippet></ROW><ROW><id>16827536</id><snippet>import glob
import collections

counter = collections.Counter()
for py_filename in glob.glob('*.py'):
  with open(py_filename) as f:
    linecount = sum(1 for line in f)
  counter[linecount//10] += 1

for i,n in sorted(counter.items()):
  print('{}-{}: {}'.format(i * 10, (i + 1) * 10 - 1, n))
</snippet></ROW><ROW><id>16827612</id><snippet>import ast

def guess(s):
    try:
        return ast.literal_eval(s)
    except ValueError:
        return s    

s = "a:1 b:2 c:x d:2.13e-5"
print dict(map(guess, x.split(':')) for x in s.split())
</snippet></ROW><ROW><id>16827612</id><snippet>{'a': 1, 'c': 'x', 'b': 2, 'd': 2.13e-05}
</snippet></ROW><ROW><id>16827656</id><snippet>import re
s="""Sigma 0.10 index = $5.00
beta .05=$25.00
.35 index (or $12.5)
Gamma 0.07"""
print re.findall(r'[0-9$.]+', s)
</snippet></ROW><ROW><id>16827656</id><snippet>['0.10', '$5.00', '.05', '$25.00', '.35', '$12.5', '0.07']
</snippet></ROW><ROW><id>16827656</id><snippet>print re.findall(r'[$]?\d+(?:\.\d+)?', s)
</snippet></ROW><ROW><id>16827656</id><snippet>['0.10', '$5.00', '$25.00', '$12.5', '0.07']
</snippet></ROW><ROW><id>16827656</id><snippet>.05</snippet></ROW><ROW><id>16827656</id><snippet>print re.findall(r'[$]?(?:\d*\.\d+)|\d+', s)
</snippet></ROW><ROW><id>16827656</id><snippet>['0.10', '$5.00', '.05', '$25.00', '.35', '$12.5', '0.07']
</snippet></ROW><ROW><id>16827742</id><snippet>inner_qs = Blog.objects.filter(writer__name__icontains='John')
</snippet></ROW><ROW><id>16827822</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = 'school.department.classes[cost=15.00].name'
&gt;&gt;&gt; re.split(r'\.(?!\d)', text)
['school', 'department', 'classes[cost=15.00]', 'name']
</snippet></ROW><ROW><id>16827822</id><snippet>&gt;&gt;&gt; re.findall(r'([^.\[]+(?:\[[^\]]+\])?)(?:\.|$)', text)
['school', 'department', 'classes[cost=15.00]', 'name']
</snippet></ROW><ROW><id>16827822</id><snippet>&gt;&gt;&gt; re.findall(r'''(                      # main group
                    [^  .  \[    ]+       # 1 or more of anything except . or [
                    (?:                   # (non-capture) opitional [x=y,...]
                       \[                 # start [
                       [^   \]   ]+       # 1 or more of any non ]
                       \]                 # end ]
                    )?                    # this group [x=y,...] is optional
                   )                      # end main group
                   (?:\.|$)               # find a dot or the end of string
                ''', text, flags=re.VERBOSE)
['school', 'department', 'classes[cost=15.00]', 'name']
</snippet></ROW><ROW><id>16828059</id><snippet>return {m.name: [func(g, m) for g in groups] for m in messages}
</snippet></ROW><ROW><id>16828192</id><snippet>faceRegions</snippet></ROW><ROW><id>16828192</id><snippet>x,y,width,height</snippet></ROW><ROW><id>16828192</id><snippet>face1 = imgg[y:y+height, x:x+width]
</snippet></ROW><ROW><id>16828192</id><snippet>face1</snippet></ROW><ROW><id>16828220</id><snippet>In [1]: class A(object):
   ...:     def __init__(self, n):
   ...:         self.n = n
   ...:     def get_n(self):
   ...:         return self.n
   ...:     

In [2]: a = A(5)

In [3]: a.get_n
Out[3]: &lt;bound method A.get_n of &lt;__main__.A object at 0xa56516c&gt;&gt;

In [4]: a.get_n()
Out[4]: 5
</snippet></ROW><ROW><id>16828220</id><snippet>print(Person.getFname())
print(Person.getLname())
print(Person.getCompany())
print(Person.getState())
print(Person.getEmail())
</snippet></ROW><ROW><id>16828549</id><snippet>exclude()</snippet></ROW><ROW><id>16828549</id><snippet>set1= book.objects.filter(name='Python')
set2= book.objects.filter(author_name='Mona')
non_common = set1.exclude(id__in=[o.id for o in set2])
</snippet></ROW><ROW><id>16828583</id><snippet>for i in range(NSUBSETS-1, -1, -1):
    for j in range(T-1, -1, -1):
        if (x[(i*T)+j] &lt; 100):
            s.insert(((i+1)*T), s[(i*T)+j])
            x.insert(((i+1)*T), x[(i*T)+j])
</snippet></ROW><ROW><id>16828740</id><snippet>timesince</snippet></ROW><ROW><id>16828740</id><snippet>def someview(request):
   objs = Some.object.filter()
   ctx = {}
   ctx['objs'] = []  # hold your objects
   for i in objs:
      ctx['objs'].append((i,i.date_field &lt; someother_obj.date_field))

   return render(request, 'template.html', ctx)
</snippet></ROW><ROW><id>16828740</id><snippet>{% for obj,flag in objs %}
    &lt;tr&gt;&lt;td {% if flag %}class="marked"{% endif %}&gt;{{ obj }}&lt;/td&gt;&lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>16828811</id><snippet>for i,n in sorted(counter.items()):
    binrange='{}-{}'.format(i*10, (i + 1) * 10 - 1)
    print('{:&lt;12}{:&lt;4}'.format(binrange, n))
</snippet></ROW><ROW><id>16828813</id><snippet>result1[:] = [x for x in map(func, l) if x is not None]
</snippet></ROW><ROW><id>16828813</id><snippet>itertools.imap</snippet></ROW><ROW><id>16828813</id><snippet>filter(None, map(func, l))</snippet></ROW><ROW><id>16828813</id><snippet>0</snippet></ROW><ROW><id>16829027</id><snippet>             foo

   &lt;foo&gt;something1&lt;/foo&gt;
   &lt;foo&gt;something3&lt;/foo&gt;
</snippet></ROW><ROW><id>16829027</id><snippet>&lt;xsl:template match="product"&gt;
    &lt;foo&gt;
        &lt;xsl:value-of select="../header/h1" /&gt;
    &lt;/foo&gt;
&lt;/xsl:template&gt;
</snippet></ROW><ROW><id>16829027</id><snippet>            foo

    &lt;foo&gt;foo&lt;/foo&gt;
    &lt;foo&gt;foo&lt;/foo&gt;
</snippet></ROW><ROW><id>16829027</id><snippet>&lt;xsl:template match="/*" &gt;
    &lt;xsl:apply-templates select="product" /&gt;
&lt;/xsl:template&gt;
&lt;xsl:template match="product"&gt;
    &lt;foo&gt;
        &lt;xsl:value-of select="../header/h1" /&gt;
    &lt;/foo&gt;
&lt;/xsl:template&gt;
</snippet></ROW><ROW><id>16829027</id><snippet>for product in root.iterfind('product'):</snippet></ROW><ROW><id>16829027</id><snippet>xslt_xml = etree.XML('''\
    &lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
     &lt;xsl:template match="/" &gt;
     &lt;root&gt;
        &lt;xsl:apply-templates select="//product" /&gt;
     &lt;/root&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="product"&gt;
            foo&gt;&lt;xsl:value-of select="../header/h1/text()" /&gt;,&lt;xsl:value-of select="a" /&gt;&lt;/foo&gt;
        &lt;/xsl:template&gt;
    &lt;/xsl:stylesheet&gt;
    ''')
</snippet></ROW><ROW><id>16829027</id><snippet>transform = etree.XSLT(xslt_xml)
doc = etree.parse(StringIO(example_xml))
root = doc.getroot()
result = transform(root)
# print (str(result ))

for foo in result.iterfind('foo'):
    print (foo.text)
</snippet></ROW><ROW><id>16829027</id><snippet>foo,something1
foo,something3
</snippet></ROW><ROW><id>16829240</id><snippet>networkx</snippet></ROW><ROW><id>16829240</id><snippet>G</snippet></ROW><ROW><id>16829240</id><snippet>G = nx.MultiGraph()
</snippet></ROW><ROW><id>16829324</id><snippet>html = urllib.urlopen('http://www.website.com').read()
soup = BeautifulSoup.BeautifulSoup(html)
texts = soup.findAll(text=True)

def get_stuff(element):
    if element.parent.name in ['style', 'script', '[document]', 'head', 'title']:
        return False
    elif re.match('&lt;!--.*--&gt;', str(element)):
        return False
    return True

visible_texts = filter(get_stuff, texts)
</snippet></ROW><ROW><id>16829673</id><snippet>import serial.tools.list_ports_windows
devices = serial.tools.list_ports_windows.comports()
</snippet></ROW><ROW><id>16829673</id><snippet>import serial.tools.list_ports_posix
devices = serial.tools.list_ports_posix.comports()
</snippet></ROW><ROW><id>16829721</id><snippet>    message = """\
    From: %s
    To: %s
    Subject: %s

    %s
    """ % (FROM, ", ".join(TO), SUBJECT, TEXT)
</snippet></ROW><ROW><id>16829721</id><snippet>From</snippet></ROW><ROW><id>16829721</id><snippet>To</snippet></ROW><ROW><id>16829721</id><snippet>Subject</snippet></ROW><ROW><id>16829721</id><snippet>    message = """\
From: %s
To: %s
Subject: %s

%s
""" % (FROM, ", ".join(TO), SUBJECT, TEXT)
</snippet></ROW><ROW><id>16829721</id><snippet>import textwrap
if X == 1:
    message = textwrap.dedent("""\
        From: %s
        To: %s
        Subject: %s

        %s
        """ % (FROM, ", ".join(TO), SUBJECT, TEXT))
</snippet></ROW><ROW><id>16829794</id><snippet>import itertools

def Compare(file1, file2):
    with open(file1+'.txt', 'r') as f1, open(file2+'.txt', 'r') as f2:
        for line in itertools.product(f1, f2): # line equals tuple of (f1[0],f2[0]), (f1[0], f2[1]), etc.
          # lines = [[int(col) for col  in row.split()] for row in line]
          # the tuple only contains 2 elements; first element should go to dict1, second to dict2. Why worry about that with list comprehensions?
          dict1 = {'key': [int(col) for col in line[0].split() ]}
          dict2 = {'key': [int(col) for col in line[1].split() ]}
          print(dict1, dict2)
</snippet></ROW><ROW><id>16829847</id><snippet>RequestContext</snippet></ROW><ROW><id>16829847</id><snippet>RequestContext</snippet></ROW><ROW><id>16829847</id><snippet>HttpRequest</snippet></ROW><ROW><id>16829847</id><snippet>def test_display(request):
    book = book.objects.all()[0]
    return render_to_response('display.html', {'book': book})
</snippet></ROW><ROW><id>16829847</id><snippet>&lt;ul&gt;
  &lt;li&gt;{{ book.title }}&lt;/li&gt;
  &lt;li&gt;{{ book.author }}&lt;/li&gt;
&lt;/ul&gt;
</snippet></ROW><ROW><id>16830140</id><snippet>for x in ([foo] if isinstance(foo, basestring) else foo)
</snippet></ROW><ROW><id>16830140</id><snippet>isinstance(foo, basestring)</snippet></ROW><ROW><id>16830140</id><snippet>type(foo) is list</snippet></ROW><ROW><id>16830140</id><snippet>isinstance</snippet></ROW><ROW><id>16830626</id><snippet>return</snippet></ROW><ROW><id>16830626</id><snippet>def author_name(lines):
    '''Finds the authors name within the docstring'''
    for line in lines:
        name = 'Unknown'
        if line.startswith("Author"):
            line = line.strip('\n')
            line = line.strip('\'')
            author_line = line.split(': ')
            if len(author_line[1]) &gt;=4:   
                name = author_line[1]
            return "{0:21}{1}".format("Author", name)  # ends the function, we found an author

    return "{0:21}{1}".format("Author", name)

print(author_name(some_docstring.splitlines()))
</snippet></ROW><ROW><id>16830626</id><snippet>return</snippet></ROW><ROW><id>16830626</id><snippet>Author</snippet></ROW><ROW><id>16830626</id><snippet>name</snippet></ROW><ROW><id>16830626</id><snippet>Unknown</snippet></ROW><ROW><id>16830626</id><snippet>break</snippet></ROW><ROW><id>16830626</id><snippet>def author_name(lines):
    '''Finds the authors name within the docstring'''
    for line in lines:
        name = 'Unknown'
        if line.startswith("Author"):
            line = line.strip('\n')
            line = line.strip('\'')
            author_line = line.split(': ')
            if len(author_line[1]) &gt;=4:   
                name = author_line[1]
            break  # ends the `for` loop, we found an author.

    return "{0:21}{1}".format("Author", name)
</snippet></ROW><ROW><id>16830763</id><snippet>plt.xticks([1, 3, 10, 30, 100, 300], [1, 3, 10, 30, 100, 300])
</snippet></ROW><ROW><id>16830790</id><snippet>lessthan = [v for v in ab if v &lt; knowndistance]
greaterthan = [v for v in ab if v &gt;= knowndistance]
</snippet></ROW><ROW><id>16830790</id><snippet>lessthan, greaterthan = [], []
for v in ab:
    if v &lt; knowndistance:
        lessthan.append(v)
    else:
        greaterthan.append(v)
</snippet></ROW><ROW><id>16830790</id><snippet>greaterthan</snippet></ROW><ROW><id>16830790</id><snippet>greater then or equal to</snippet></ROW><ROW><id>16830790</id><snippet>knowndistance</snippet></ROW><ROW><id>16831052</id><snippet>&gt;&gt;&gt; eq=3.2*cos(x+.2)+1.7
&gt;&gt;&gt; [w.n(3,chop=True) for w in solve(expand(eq.rewrite(exp)))]
[-2.33, 1.93]
</snippet></ROW><ROW><id>16831256</id><snippet>page_key = ndb.Key(Book, bookId, Chapter, chapterId, Page, pageId)
page = page_key.get()
</snippet></ROW><ROW><id>16831334</id><snippet>a b c d e f
g h i j k l
m n o p q r

1 b/a    c/a    d/a    e/a    f/a     (that's I/a)
0 h-bg/a i-cg/a j-dg/a k-eg/a l-fg/a  (that's II - I*g/a))
0 n-bm/a o-cm/a p-dm/a q-em/a r-fm/a  (that's III - I*m/a)

etc.
</snippet></ROW><ROW><id>16831347</id><snippet>request.DATA</snippet></ROW><ROW><id>16831347</id><snippet>request.REQUEST</snippet></ROW><ROW><id>16831347</id><snippet>QueryDict</snippet></ROW><ROW><id>16831435</id><snippet>&lt;meta http-equiv="refresh" content="0; url=http://example.com/"&gt;</snippet></ROW><ROW><id>16831442</id><snippet>ExtraTreesRegressor</snippet></ROW><ROW><id>16831442</id><snippet>GradientBoostedTreeRegressor</snippet></ROW><ROW><id>16831448</id><snippet>time.sleep(n)</snippet></ROW><ROW><id>16831448</id><snippet>WebDriverWait</snippet></ROW><ROW><id>16831448</id><snippet>execute_script</snippet></ROW><ROW><id>16831448</id><snippet>driver.execute_script('$("span.info").click();')
</snippet></ROW><ROW><id>16831877</id><snippet>import sys
import os
from qgis.core import *
import matplotlib.pyplot as plt
from matplotlib.path import Path
import matplotlib.patches as patches

LATITUDE = 1.29306
LONGITUDE = 103.856

QgsApplication.setPrefixPath("/usr", True)
QgsApplication.initQgis()

layer=QgsVectorLayer("/home/shubham/SMART/zones/mtz1092p.shp", "mtz1092p", "ogr")
if not layer.isValid():
    print "Layer failed to load!"
provider = layer.dataProvider()

def findFeatureId(point):
    feat = QgsFeature()
    allAttrs = provider.attributeIndexes()
    provider.select(allAttrs)
    while provider.nextFeature(feat):
        geom = feat.geometry()
        x = geom.asPolygon()
        if len(x) == 0:
            print "Feature ID %d has no ring" % feat.id()
        else:
            codes = []
            codes.append(Path.MOVETO)
            for i in range (0, len(x[0]) - 2):
                codes.append(Path.LINETO)
            codes.append(Path.CLOSEPOLY)
            path = Path(x[0], codes)
            if (path.contains_point(point, None, 0.0)):
                print "Point contained in feature ID %d" %feat.id()

if __name__ == "__main__":
    crsSrc = QgsCoordinateReferenceSystem(4326) # WGS84
    crsDest = QgsCoordinateReferenceSystem(3414)# SVY21
    xform = QgsCoordinateTransform(crsSrc, crsDest)
    pt = xform.transform(QgsPoint(LONGITUDE, LATITUDE))
    findFeatureId(pt)
</snippet></ROW><ROW><id>16832271</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig, axs = plt.subplots(1,1,figsize=(15,10))

axs.imshow(np.random.rand(50,100) ,cmap='gray', interpolation='none', alpha=0.3)

nplots = 50

fig.canvas.draw()

box = axs._position.bounds
height = box[3] / nplots

for i in arange(nplots):

    tmpax = fig.add_axes([box[0], box[1] + i * height, box[2], height])
    tmpax.set_axis_off()

    tmpax.plot(np.sin(np.linspace(0,np.random.randint(20,1000),1000))*0.4)
    tmpax.set_ylim(-1,1)
</snippet></ROW><ROW><id>16832355</id><snippet>safe</snippet></ROW><ROW><id>16832363</id><snippet>Subject.course_set.all()</snippet></ROW><ROW><id>16832363</id><snippet>subject = Subject.objects.all()[0]
#^ this is instance
subject.course_set.all()
</snippet></ROW><ROW><id>16832415</id><snippet>python myscript.py path/to/files/*.CSV
</snippet></ROW><ROW><id>16832415</id><snippet>[...]
for filename in sys.argv[1:]:
    # do stuff...
</snippet></ROW><ROW><id>16832891</id><snippet>class MyTestCase(unittest.TestCase):

    def generic_test(self, func):
        result = func()
        ... assertions about result....

    def test_func_one(self):
        self.generic_test(func_one)

    def test_func_two(self):
        self.generic_test(func_two)
</snippet></ROW><ROW><id>16832981</id><snippet>class MyButton(QPushButton):

    BigSwitch = SomeQObjectThatDefinesTheSignal()

    def __init__(self, ...):
        ...
        BigSwitch.the_signal.connect(self.some_slot)

    def some_slot(self, ...):
        #handle the change of the property

    @classmethod
    def enable(cls):
        cls.BigSwitch.the_signal.emit(...)
</snippet></ROW><ROW><id>16832981</id><snippet>staticmethod</snippet></ROW><ROW><id>16832981</id><snippet>MyButton.BigSwitch</snippet></ROW><ROW><id>16833286</id><snippet>QUOTE_NONE</snippet></ROW><ROW><id>16833286</id><snippet>quoting</snippet></ROW><ROW><id>16833286</id><snippet>quotechar</snippet></ROW><ROW><id>16833286</id><snippet>taxiDataReader = csv.reader(csvfile, delimiter=',', quoting=csv.QUOTE_NONE)
</snippet></ROW><ROW><id>16833286</id><snippet>quotechar</snippet></ROW><ROW><id>16833286</id><snippet>[1, "hello", "1,2,3", "hi\nthere"]</snippet></ROW><ROW><id>16833286</id><snippet>1,hello,1,2,3,hi
there
</snippet></ROW><ROW><id>16833286</id><snippet>1,hello,"1,2,3","hi\nthere"
</snippet></ROW><ROW><id>16833286</id><snippet>quoting</snippet></ROW><ROW><id>16833286</id><snippet>QUOTE_MINIMAL</snippet></ROW><ROW><id>16833286</id><snippet>QUOTE_NONE</snippet></ROW><ROW><id>16833286</id><snippet>quotechar</snippet></ROW><ROW><id>16833287</id><snippet>del</snippet></ROW><ROW><id>16833287</id><snippet>new_a = [v for i, v in enumerate(a) if i not in aleaindex]
</snippet></ROW><ROW><id>16833287</id><snippet>a</snippet></ROW><ROW><id>16833287</id><snippet>a[:] = ...</snippet></ROW><ROW><id>16833287</id><snippet>aleaindex</snippet></ROW><ROW><id>16833287</id><snippet>aleaindex = {random.randint(0, T-1) for _ in range(K)}
</snippet></ROW><ROW><id>16833366</id><snippet>&gt;&gt;&gt; D = {'key': [1, 2130, 0, 279, 90, 92, 193, 1]}
&gt;&gt;&gt; D[D.pop('key')[2]] = D['key']
&gt;&gt;&gt; D
{0: [1, 2130, 0, 279, 90, 92, 193, 1]}
</snippet></ROW><ROW><id>16833376</id><snippet>[('{}:{:02}'.format(h, q), '{:02}:{:02}'.format(h, q)) for h in range(11) for q in (0, 15, 30, 45)]
</snippet></ROW><ROW><id>16833376</id><snippet>res = []
for hour in range(11):
    for quarter in (0, 15, 30, 45):
        res.append(('{}:{:02}'.format(hour, quarter), '{:02}:{:02}'.format(hour, quarter)))
</snippet></ROW><ROW><id>16833376</id><snippet>&gt;&gt;&gt; [('{}:{:02}'.format(h, q), '{:02}:{:02}'.format(h, q)) for h in range(11) for q in (0, 15, 30, 45)]
[('0:00', '00:00'), ('0:15', '00:15'), ('0:30', '00:30'), ('0:45', '00:45'), ('1:00', '01:00'), ('1:15', '01:15'), ('1:30', '01:30'), ('1:45', '01:45'), ('2:00', '02:00'), ('2:15', '02:15'), ('2:30', '02:30'), ('2:45', '02:45'), ('3:00', '03:00'), ('3:15', '03:15'), ('3:30', '03:30'), ('3:45', '03:45'), ('4:00', '04:00'), ('4:15', '04:15'), ('4:30', '04:30'), ('4:45', '04:45'), ('5:00', '05:00'), ('5:15', '05:15'), ('5:30', '05:30'), ('5:45', '05:45'), ('6:00', '06:00'), ('6:15', '06:15'), ('6:30', '06:30'), ('6:45', '06:45'), ('7:00', '07:00'), ('7:15', '07:15'), ('7:30', '07:30'), ('7:45', '07:45'), ('8:00', '08:00'), ('8:15', '08:15'), ('8:30', '08:30'), ('8:45', '08:45'), ('9:00', '09:00'), ('9:15', '09:15'), ('9:30', '09:30'), ('9:45', '09:45'), ('10:00', '10:00'), ('10:15', '10:15'), ('10:30', '10:30'), ('10:45', '10:45')]
</snippet></ROW><ROW><id>16833475</id><snippet>done()</snippet></ROW><ROW><id>16833475</id><snippet>done()</snippet></ROW><ROW><id>16833475</id><snippet>def done(self, form_list, **kwargs):

    #you can access form as
    form1 = form_list[0]
    obj1 = form1.save(commit=False)

    #now set fields from 2nd form
    form2 = form_list[1]
    obj1.user = self.request.user
    obj1.address = form2.cleaned_data['address']
    ...

    obj1.save()

    return HttpResponseRedirect('/view_list/')
</snippet></ROW><ROW><id>16833485</id><snippet>print("download: " + ", ".join(down_url))
</snippet></ROW><ROW><id>16833485</id><snippet>"sep".join(iterable)</snippet></ROW><ROW><id>16833485</id><snippet>iterable</snippet></ROW><ROW><id>16833485</id><snippet>sep</snippet></ROW><ROW><id>16833485</id><snippet>&gt;&gt;&gt; "".join(("a", "b", "c"))
'abc'
&gt;&gt;&gt; ", ".join(("a", "b", "c"))
'a, b, c'
</snippet></ROW><ROW><id>16833485</id><snippet>.join()</snippet></ROW><ROW><id>16833485</id><snippet>&gt;&gt;&gt; ", ".join(map(str, ("a", 2, "c")))
'a, 2, c'
</snippet></ROW><ROW><id>16833510</id><snippet>self._find_product()</snippet></ROW><ROW><id>16833510</id><snippet>None</snippet></ROW><ROW><id>16833510</id><snippet>str(product.id) against</snippet></ROW><ROW><id>16833510</id><snippet>but against the</snippet></ROW><ROW><id>16833510</id><snippet>if str(product.id) == product_id:
</snippet></ROW><ROW><id>16833510</id><snippet>None</snippet></ROW><ROW><id>16833510</id><snippet>return</snippet></ROW><ROW><id>16833510</id><snippet>return</snippet></ROW><ROW><id>16833510</id><snippet>None</snippet></ROW><ROW><id>16833510</id><snippet>def _find_product(self, product_id):
    for product in self.products:
        if str(product.id) == product_id:
            return product
</snippet></ROW><ROW><id>16833510</id><snippet>def _find_product(self, product_id):
    return next((p for p in self.products if str(p.id) == product_id), None)
</snippet></ROW><ROW><id>16833537</id><snippet>geometry</snippet></ROW><ROW><id>16833537</id><snippet>self.main = tkinter.Tk()
self.main.geometry("400x200")
</snippet></ROW><ROW><id>16833863</id><snippet>itertools.product</snippet></ROW><ROW><id>16833863</id><snippet>a</snippet></ROW><ROW><id>16833863</id><snippet>b</snippet></ROW><ROW><id>16833863</id><snippet>itertools.izip</snippet></ROW><ROW><id>16833863</id><snippet>from itertools import product, izip
from pprint import pprint

a = ['a_one', 'a_two', 'a_three']
b = ['b_one', 'b_two', 'b_three']

pprint(list(product(a, b)))
[('a_one', 'b_one'),
 ('a_one', 'b_two'),
 ('a_one', 'b_three'),
 ('a_two', 'b_one'),
 ('a_two', 'b_two'),
 ('a_two', 'b_three'),
 ('a_three', 'b_one'),
 ('a_three', 'b_two'),
 ('a_three', 'b_three')]

pprint(list(izip(a, b)))
[('a_one', 'b_one'), ('a_two', 'b_two'), ('a_three', 'b_three')]
</snippet></ROW><ROW><id>16834211</id><snippet>self.mapLBox</snippet></ROW><ROW><id>16834211</id><snippet>self.mapLBox</snippet></ROW><ROW><id>16834211</id><snippet>mapLBox</snippet></ROW><ROW><id>16834211</id><snippet>mapLBox = Tkinter.Listbox(...)
</snippet></ROW><ROW><id>16834211</id><snippet>self.mapLBox = Tkinter.Listbox(...)
</snippet></ROW><ROW><id>16834211</id><snippet>mapLBox</snippet></ROW><ROW><id>16834676</id><snippet>contextlib.ExitStack</snippet></ROW><ROW><id>16834676</id><snippet>with contextlib.ExitStack() as stack:
    inputs = [stack.enter_context(fileinput.input(files=filename))
              for filename in input_filenames]
    outputs = [stack.enter_context(open(filename, "w"))
               for filename in output_filenames]

    # do stuff with inputs and outputs here
</snippet></ROW><ROW><id>16834790</id><snippet>from django.db.models import Q
list_countries = Country.objects.filter(~Q(country_name='')).values_list('country_name', flat=True).distinct()
</snippet></ROW><ROW><id>16834871</id><snippet>from collections import namedtuple
import csv

location_info = namedtuple('location_info', 'LCID,CID,LAC,NET,LAT,LON')
input_filename = "input.csv"

def write_header(output_file):
    pass  # left as an excercise

def write_footer(output_file):
    pass  # also left as an exercise

def get_kml(location_info):
    return """    &lt;Placemark&gt;
        &lt;ExtendedData&gt;
            &lt;Data name='CID'&gt;
                &lt;value&gt;
                    {CID}
                &lt;/value&gt;
            &lt;/Data&gt;
            &lt;Data name='LAC'&gt;
                &lt;value&gt;
                    {LAC}
                &lt;/value&gt;
            &lt;/Data&gt;
        &lt;/ExtendedData&gt;
        &lt;Point&gt;
            &lt;coordinates&gt;{LON},{LAT}&lt;/coordinates&gt;
        &lt;/Point&gt;
    &lt;/Placemark&gt;""".format(**location_info._asdict())

with open(input_filename, 'r') as input_file:
    csv_reader = csv.reader(input_file, delimiter=';')
    print next(csv_reader)  # gets rid of the header line
    all_locations = (location_info(*line[0:6]) for line in csv_reader)  # the slicing is due to the trailing ;

    with open(output_filename, 'w') as output_file:
        write_header(output_file)
        for location in all_locations:
            output_file.write(get_kml(location))
        write_footer(output_file)
</snippet></ROW><ROW><id>16834949</id><snippet>In [12]: df = pd.DataFrame(randn(6, 3), index=arrays, columns=['A', 'B', 'C'])

In [13]: df
Out[13]: 
                  A         B         C
bar one 0 -0.694240  0.725163  0.131891
    two 1 -0.729186  0.244860  0.530870
baz one 2  0.757816  1.129989  0.893080
qux one 3 -2.275694  0.680023 -1.054816
    two 4  0.291889 -0.409024 -0.307302
bar one 5  1.697974 -1.828872 -1.004187

In [14]: df = df.sortlevel(0)

In [15]: df
Out[15]: 
                  A         B         C
bar one 0 -0.694240  0.725163  0.131891
        5  1.697974 -1.828872 -1.004187
    two 1 -0.729186  0.244860  0.530870
baz one 2  0.757816  1.129989  0.893080
qux one 3 -2.275694  0.680023 -1.054816
    two 4  0.291889 -0.409024 -0.307302

In [16]: df.loc[('bar','two'),'A'] = 9999

In [17]: df
Out[17]: 
                     A         B         C
bar one 0    -0.694240  0.725163  0.131891
        5     1.697974 -1.828872 -1.004187
    two 1  9999.000000  0.244860  0.530870
baz one 2     0.757816  1.129989  0.893080
qux one 3    -2.275694  0.680023 -1.054816
    two 4     0.291889 -0.409024 -0.307302
</snippet></ROW><ROW><id>16834949</id><snippet>In [23]: df.loc[('bar','two',1),'A'] = 999

In [24]: df
Out[24]: 
                    A         B         C
bar one 0   -0.113216  0.878715 -0.183941
    two 1  999.000000 -1.405693  0.253388
baz one 2    0.441543  0.470768  1.155103
qux one 3   -0.008763  0.917800 -0.699279
    two 4    0.061586  0.537913  0.380175
bar one 5    0.857231  1.144246 -2.369694
</snippet></ROW><ROW><id>16834949</id><snippet>In [27]: df.index.lexsort_depth
Out[27]: 0

In [28]: df.sortlevel(0).index.lexsort_depth
Out[28]: 3
</snippet></ROW><ROW><id>16834949</id><snippet>In [12]: df.loc[('bar','one'),'A'] = [999,888]

In [13]: df
Out[13]: 
                    A         B         C
bar one 0  999.000000 -0.645641  0.369443
        5  888.000000 -0.990632 -0.577401
    two 1   -1.071410  2.308711  2.018476
baz one 2    1.211887  1.516925  0.064023
qux one 3   -0.862670 -0.770585 -0.843773
    two 4   -0.644855 -1.431962  0.232528
</snippet></ROW><ROW><id>16835332</id><snippet>itertools.groupby</snippet></ROW><ROW><id>16835332</id><snippet>from itertools import groupby

data = """0.0 99.13 0.11
0.5 19.67 0.59
0.5 22.23 1.22
1.0 9.67  0.08""".split('\n')

result = [list(j) for i, j in groupby(data, lambda x: x.split(' ', 1)[0])]

files_num = 0
for e in result:
    files_num = max(files_num, len(e))

for i in range(files_num):
    with open('{}.txt'.format(i), 'w+') as f:
        for line in result:
            min_index = min(i, len(line)-1)
            f.write('{}\n'.format(line[min_index]))
</snippet></ROW><ROW><id>16835332</id><snippet>0.0 99.13 0.11
0.5 19.67 0.59
1.0 9.67  0.08
</snippet></ROW><ROW><id>16835332</id><snippet>0.0 99.13 0.11
0.5 22.23 1.22
1.0 9.67  0.08
</snippet></ROW><ROW><id>16835332</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>16835332</id><snippet>from collections import OrderedDict

data = """0.0 99.13 0.11
0.5 19.67 0.59
1.0 9.67  0.08
0.5 22.23 1.22""".split('\n')

d = OrderedDict()
for line in data:
    split = line.split(' ', 1)
    d.setdefault(split[0], []).extend(split[1:])

print(d)
</snippet></ROW><ROW><id>16835332</id><snippet>OrderedDict([ ('0.0', ['99.13 0.11']), 
              ('0.5', ['19.67 0.59', '22.23 1.22']), 
              ('1.0', ['9.67  0.08']) ])
</snippet></ROW><ROW><id>16835346</id><snippet>from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA

message = 'To be encrypted'
h = SHA.new(message)

key = RSA.importKey(open('pubkey.der').read())
cipher = PKCS1_v1_5.new(key)
ciphertext = cipher.encrypt(message+h.digest())
</snippet></ROW><ROW><id>16835346</id><snippet>from Crypto.Hash import SHA
from Crypto import Random

key = RSA.importKey(open('privkey.der').read())

dsize = SHA.digest_size
sentinel = Random.new().read(15+dsize)      # Let's assume that average data length is 15

cipher = PKCS1_v1_5.new(key)
message = cipher.decrypt(ciphertext, sentinel)

digest = SHA.new(message[:-dsize]).digest()
if digest==message[-dsize:]:                # Note how we DO NOT look for the sentinel
     print "Encryption was correct."
else:
     print "Encryption was not correct."
</snippet></ROW><ROW><id>16835381</id><snippet>&gt;&gt;&gt; divs = x.xpath("//div[@class='content'][preceding-sibling::p]")
&gt;&gt;&gt; [d.xpath("string((preceding-sibling::p)[last()])")
...  for d in divs]
['some date 1', 'some date 1', 'some date 2', 'some date 2', 'some date 2', 'some date 3', 'some date 3', 'some date 3', 'some date 3']
</snippet></ROW><ROW><id>16835381</id><snippet>preceding-sibling::p
</snippet></ROW><ROW><id>16835381</id><snippet>div</snippet></ROW><ROW><id>16835381</id><snippet>p</snippet></ROW><ROW><id>16835381</id><snippet>(preceding-sibling::p)[last()]
</snippet></ROW><ROW><id>16835381</id><snippet>[]</snippet></ROW><ROW><id>16835381</id><snippet>::</snippet></ROW><ROW><id>16835381</id><snippet>string()</snippet></ROW><ROW><id>16835381</id><snippet>text()</snippet></ROW><ROW><id>16835734</id><snippet>User_nutrition = get_data()   # one argument self
# and
def __init__(self, calorie_deficit): # two arguments
</snippet></ROW><ROW><id>16835734</id><snippet>User_nutrition = get_data(5) # add one argument
# or
def __init__(self, calorie_deficit = 0): # make one argument default
</snippet></ROW><ROW><id>16835810</id><snippet>glob</snippet></ROW><ROW><id>16835810</id><snippet>import os
import glob
import re

inputPath = '.' # the directory where your files are stored
num = 5         # the fixed parameter, n

# first obtain all the data*.txt files in the directory
for inputName in glob.glob(os.path.join(inputPath,'data*.txt')):

  # attempt to extract the file number from the input name
  fileNum = re.findall(r'data([0-9]+)\.txt',inputName)
  # if not successful, skip this file
  if not fileNum: continue

  # create the output filename using the fle number and the fixed parameter
  outputName = 'output_data{0}_{1}.txt'.format(fileNum[0],num)
  # add the input path to the filename, or use a different path if necessary
  outputName = os.path.join(inputPath,outputName)

  # process the file
  x,y = genfromtxt(inputName).T
  with open(outputName,'wb') as file: 
    # do the rest of your code here
    pass
</snippet></ROW><ROW><id>16836182</id><snippet>cdict</snippet></ROW><ROW><id>16836182</id><snippet>cdict</snippet></ROW><ROW><id>16836182</id><snippet>cdict = {'red':   ((0.0, 1.0, 1.0), 
                   (0.1, 1.0, 1.0),  # red 
                   (0.4, 1.0, 1.0),  # violet
                   (1.0, 0.0, 0.0)), # blue

         'green': ((0.0, 0.0, 0.0),
                   (1.0, 0.0, 0.0)),

         'blue':  ((0.0, 0.0, 0.0),
                   (0.1, 0.0, 0.0),  # red
                   (0.4, 1.0, 1.0),  # violet
                   (1.0, 1.0, 0.0))  # blue
          }
</snippet></ROW><ROW><id>16836182</id><snippet>cdict</snippet></ROW><ROW><id>16836182</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors


def make_colormap(seq):
    """Return a LinearSegmentedColormap
    seq: a sequence of floats and RGB-tuples. The floats should be increasing
    and in the interval (0,1).
    """
    seq = [(None,) * 3, 0.0] + list(seq) + [1.0, (None,) * 3]
    cdict = {'red': [], 'green': [], 'blue': []}
    for i, item in enumerate(seq):
        if isinstance(item, float):
            r1, g1, b1 = seq[i - 1]
            r2, g2, b2 = seq[i + 1]
            cdict['red'].append([item, r1, r2])
            cdict['green'].append([item, g1, g2])
            cdict['blue'].append([item, b1, b2])
    return mcolors.LinearSegmentedColormap('CustomMap', cdict)


c = mcolors.ColorConverter().to_rgb
rvb = make_colormap(
    [c('red'), c('violet'), 0.33, c('violet'), c('blue'), 0.66, c('blue')])
N = 1000
array_dg = np.random.uniform(0, 10, size=(N, 2))
colors = np.random.uniform(-2, 2, size=(N,))
plt.scatter(array_dg[:, 0], array_dg[:, 1], c=colors, cmap=rvb)
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>16836182</id><snippet>for-loop</snippet></ROW><ROW><id>16836182</id><snippet>for i in range(0, len(array_dg)):
  plt.plot(array_dg[i], markers.next(),alpha=alpha[i], c=colors.next())
</snippet></ROW><ROW><id>16836182</id><snippet>plt.plot</snippet></ROW><ROW><id>16836182</id><snippet>plt.plot</snippet></ROW><ROW><id>16836182</id><snippet>plt.scatter</snippet></ROW><ROW><id>16836182</id><snippet>plt.scatter</snippet></ROW><ROW><id>16836235</id><snippet>ndarray</snippet></ROW><ROW><id>16836235</id><snippet>cPickle</snippet></ROW><ROW><id>16836235</id><snippet>pickle</snippet></ROW><ROW><id>16836235</id><snippet>pickle</snippet></ROW><ROW><id>16836235</id><snippet>cPickle</snippet></ROW><ROW><id>16836355</id><snippet>base</snippet></ROW><ROW><id>16836355</id><snippet>a = np.arange(50)
b = a[10:20]
print (b.base is a)
</snippet></ROW><ROW><id>16836355</id><snippet>a</snippet></ROW><ROW><id>16836573</id><snippet>np.datetime64</snippet></ROW><ROW><id>16836573</id><snippet>In [1]: import numpy as np

In [2]: import datetime as dt

In [3]: t = np.array([dt.date(2012,12,1) + dt.timedelta(n)
                        for n in np.arange(0,31,0.00001)])

In [4]: t = t.astype(np.datetime64)

In [5]: daterange = np.arange(t[0], t[-1], dtype='datetime64[D]')

In [6]: np.bincount(daterange.searchsorted(t))
Out[6]: 
array([100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
       100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
       100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
       100000, 100000, 100000, 100000, 100000, 100000, 100000])

In [7]: %timeit np.bincount(daterange.searchsorted(t))
1 loops, best of 3: 241 ms per loop
</snippet></ROW><ROW><id>16836635</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>16836635</id><snippet>word_getter = operator.itemgetter(*nextWordIndices)
nextWord = word_getter(allWords)
</snippet></ROW><ROW><id>16836635</id><snippet>word_getter</snippet></ROW><ROW><id>16836635</id><snippet>tuple</snippet></ROW><ROW><id>16836635</id><snippet>python -m timeit -s "allWords = range(7000); nextWordIndices = range(7000)" "[allWords[i] for i in nextWordIndices]"
1000 loops, best of 3: 415 usec per loop
python -m timeit -s "allWords = range(7000); nextWordIndices = range(7000)" "map(allWords.__getitem__, nextWordIndices)"
1000 loops, best of 3: 614 usec per loop
python -m timeit -s "allWords = range(7000); nextWordIndices = range(7000); from operator import itemgetter" "itemgetter(*nextWordIndices)(allWords)"
1000 loops, best of 3: 292 usec per loop
</snippet></ROW><ROW><id>16836828</id><snippet>text</snippet></ROW><ROW><id>16836828</id><snippet>for plural in text:</snippet></ROW><ROW><id>16836828</id><snippet>text</snippet></ROW><ROW><id>16836828</id><snippet>plural</snippet></ROW><ROW><id>16836828</id><snippet>for plural in text.split():</snippet></ROW><ROW><id>16836828</id><snippet>def stemming_text_1():
    with open('test.txt', 'r') as f:
        for line in f:
            print line
            singles = []

            stemmer = PorterStemmer() #problem from HERE
            for plural in line.split():
                singles.append(stemmer.stem(plural))
            print ' '.join(singles)
</snippet></ROW><ROW><id>16836872</id><snippet>from foo import *</snippet></ROW><ROW><id>16836872</id><snippet>PLACES</snippet></ROW><ROW><id>16836874</id><snippet>~/.ipython/profile_default/startup/</snippet></ROW><ROW><id>16836874</id><snippet>import matplotlib.pylab as plt
import brewer2mpl
cmap=brewer2mpl.get_map('RdBu', 'diverging', 7).mpl_colormap
plt.rcParams['image.cmap'] = cmap.name
</snippet></ROW><ROW><id>16837009</id><snippet>xl = Dispatch( 'Excel.Application' )

xl.Visible = False

xlFile = "C:/tab_colour.xls"

wkb = xl.Workbooks.Open(xlFile)

sheet = xl.Worksheets.Item('SVP INFO')

sheet.Tab.Color = 255

wkb.Save()

wkb.Close()

xl.Quit()

xl = None
</snippet></ROW><ROW><id>16837101</id><snippet>chapter_key = ndb.Key('Book', long(bookId), 'Chapter', long(chapterId))
page = Page.query(Page.pageNumber==pageNumber, ancestor=chapter_key)
</snippet></ROW><ROW><id>16837157</id><snippet>"exe"</snippet></ROW><ROW><id>16837157</id><snippet>fnmatch.filter</snippet></ROW><ROW><id>16837157</id><snippet>" ".join(exe)</snippet></ROW><ROW><id>16837157</id><snippet>os.system(command)</snippet></ROW><ROW><id>16837157</id><snippet>os.system(command)</snippet></ROW><ROW><id>16837157</id><snippet>os.walk</snippet></ROW><ROW><id>16837157</id><snippet>os.walk</snippet></ROW><ROW><id>16837157</id><snippet>MC01 = 'WKST01*.bat'
MC02 = 'WKST02*.bat'

def collect_files(folder, pattern):
    for basedir, dirs, files in os.walk(folder):
        for file in fnmatch.filter(files, pattern):
                yield os.path.join(folder, basedir, file)


MC01_CMD = collect_files(FOLDER, MC01)
MC01_CSV = "MC01.csv"

command = "reporter.exe /rptcsv "+ MC01_CSV + " " + " ".join(MC01_CMD)
os.chdir("C:\Program Files (x86)\Reporter")
os.system(command)
</snippet></ROW><ROW><id>16837594</id><snippet>base64</snippet></ROW><ROW><id>16837819</id><snippet>-</snippet></ROW><ROW><id>16837819</id><snippet>if not (a == '-' and b == '-'):
</snippet></ROW><ROW><id>16837819</id><snippet>if not (a == b == '-'):
</snippet></ROW><ROW><id>16837819</id><snippet>or</snippet></ROW><ROW><id>16837819</id><snippet>and</snippet></ROW><ROW><id>16837819</id><snippet>not</snippet></ROW><ROW><id>16837819</id><snippet>if a != '-' or b != '-':
</snippet></ROW><ROW><id>16837819</id><snippet>def normalized(seq1, seq2):
    return [''.join(v) for v in zip(*[(a, b) 
                for a, b in zip(seq1, seq2) if not (a == b == '-')])]
</snippet></ROW><ROW><id>16837819</id><snippet>map()</snippet></ROW><ROW><id>16837819</id><snippet>def normalized(seq1, seq2):
    return map(''.join, zip(*[(a, b) for a, b in zip(seq1, seq2) if not (a == b == '-')]))
</snippet></ROW><ROW><id>16837842</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; testSetting = r"C:\Users\bgb\Documents\Brent\Code\Variable\Visual Studio\Local.testsettings"
&gt;&gt;&gt; os.path.basename(testSetting)
'Local.testsettings'
</snippet></ROW><ROW><id>16837842</id><snippet>&gt;&gt;&gt; os.path.dirname(testSetting)
'C:\\Users\\bgb\\Documents\\Brent\\Code\\Variable\\Visual Studio'
</snippet></ROW><ROW><id>16837987</id><snippet>&gt;&gt;&gt; a
array([ 2.76533441,  3.30956328])

&gt;&gt;&gt; a[:,None]
array([[ 2.76533441],
       [ 3.30956328]])

&gt;&gt;&gt; b=np.arange(5)[:,None]
&gt;&gt;&gt; b
array([[0],
       [1],
       [2],
       [3],
       [4]])
&gt;&gt;&gt; np.savetxt('something.npz',b)
&gt;&gt;&gt; np.loadtxt('something.npz')
array([ 0.,  1.,  2.,  3.,  4.])
&gt;&gt;&gt; np.loadtxt('something.npz').reshape(-1,1) #Another way of doing it
array([[ 0.],
       [ 1.],
       [ 2.],
       [ 3.],
       [ 4.]])
</snippet></ROW><ROW><id>16837987</id><snippet>data=np.loadtxt('data.npz')
if data.ndim==1: data=data[:,None]
</snippet></ROW><ROW><id>16837987</id><snippet>np.loadtxt('something.npz',ndmin=2) #Always gives at at least a 2D array.
</snippet></ROW><ROW><id>16838252</id><snippet>shell=True</snippet></ROW><ROW><id>16838252</id><snippet>log = subprocess.Popen(mycmd, 
                       stdin = subprocess.PIPE, stdout = subprocess.PIPE,
                       stderr = subprocess.PIPE)
</snippet></ROW><ROW><id>16838378</id><snippet>if type(d) == int or type(d) == float
</snippet></ROW><ROW><id>16838378</id><snippet>if type(d) == int</snippet></ROW><ROW><id>16838378</id><snippet>type(d) == float</snippet></ROW><ROW><id>16838378</id><snippet>or</snippet></ROW><ROW><id>16838485</id><snippet>json</snippet></ROW><ROW><id>16838558</id><snippet>print ui</snippet></ROW><ROW><id>16838558</id><snippet>ui</snippet></ROW><ROW><id>16838558</id><snippet>N1</snippet></ROW><ROW><id>16838558</id><snippet>res = []
for n in range(0, N1):

   for i in range(0,1):
      u[i] = 2*Coefficient*(ui[i+1]+bi*toutside)+(1-2*Coefficient-2*bi*Coefficient)*ui[i]
   for i in range(1,Nx):
      u[i] = Coefficient*(ui[i+1]+ui[i-1])+(1-2*Coefficient)*ui[i]
   for i in range(Nx,Nx+1):
      u[i] = 2*Coefficient*(ui[i-1])+(1-2*Coefficient)*ui[i]
      ui[:]= u #updates matrix for next loop
   print ui
   res.append(ui.copy())

print res
</snippet></ROW><ROW><id>16838558</id><snippet>[array([ 41.5625,  50.    ,  50.    ,  50.    ]),
 array([ 37.87109375,  48.41796875,  50.        ,  50.        ]),
 array([ 35.6628418 ,  46.73706055,  49.70336914,  50.        ]),
 array([ 34.06639099,  45.21682739,  49.20280457,  49.88876343]),
 array([ 32.79785633,  43.87349129,  48.58405113,  49.63152885])]
</snippet></ROW><ROW><id>16839109</id><snippet>from itertools import imap

class OpenUpperCase(object):
    def __init__(self, *args, **kwargs):
        self.file = open(*args, **kwargs)
    def __enter__(self):
        return imap(lambda s: s.upper(), self.file)
    def __exit__( self, type, value, tb ):
        self.file.close()
        return False  # allow any exceptions to be processed normally

if __name__ == '__main__':
    from itertools import islice

    filename1 = 'file1.txt'
    with OpenUpperCase(filename1, "r") as file1:
        for line in islice(file1, 20, None):
            print line,  # will be uppercased
</snippet></ROW><ROW><id>16839508</id><snippet>Artist</snippet></ROW><ROW><id>16839508</id><snippet>img = plt.imshow(...)
img.set_rasterized(True)
</snippet></ROW><ROW><id>16839648</id><snippet>menu</snippet></ROW><ROW><id>16839648</id><snippet>input</snippet></ROW><ROW><id>16839648</id><snippet>menu</snippet></ROW><ROW><id>16839648</id><snippet>def menu():
    print 'options...'
    return int(raw_input())
</snippet></ROW><ROW><id>16839648</id><snippet>def menu():
    return int(raw_input('options...'))
</snippet></ROW><ROW><id>16839648</id><snippet>menu()</snippet></ROW><ROW><id>16839648</id><snippet>while loop == 1:
    menu()
    choice = int(raw_input())
</snippet></ROW><ROW><id>16839648</id><snippet>input()</snippet></ROW><ROW><id>16839648</id><snippet>int(raw_input())</snippet></ROW><ROW><id>16839648</id><snippet>loop</snippet></ROW><ROW><id>16839648</id><snippet>loop = 1
while loop: # !
    #do stuff
</snippet></ROW><ROW><id>16839648</id><snippet>break</snippet></ROW><ROW><id>16839648</id><snippet>while True:
    # Do stuff
    if choice == 5: #Or whatever end condition
        break
</snippet></ROW><ROW><id>16839676</id><snippet>^/tv$</snippet></ROW><ROW><id>16839676</id><snippet>^/giftfordad$</snippet></ROW><ROW><id>16839676</id><snippet>&gt;&gt;&gt; s = 'RewriteRule ^/tv$ /home/sathya?id=123 [R=301,L]'
&gt;&gt;&gt; parts = s.split()
&gt;&gt;&gt; parts
['RewriteRule', '^/tv$', '/home/sathya?id=123', '[R=301,L]']
&gt;&gt;&gt; if len(parts) &gt; 1:
    part = parts[1]
    if not "^/giftfordad$" in part:
        print ' '.join([parts[0]] + ["^/giftfordad$"] +  parts[2:])
    else:
        print s    

RewriteRule ^/giftfordad$ /home/sathya?id=123 [R=301,L]
</snippet></ROW><ROW><id>16839676</id><snippet>join</snippet></ROW><ROW><id>16839676</id><snippet>^/giftfordad$</snippet></ROW><ROW><id>16839676</id><snippet>join</snippet></ROW><ROW><id>16839686</id><snippet>y = x.get(v, None)
</snippet></ROW><ROW><id>16839686</id><snippet>None</snippet></ROW><ROW><id>16839686</id><snippet>y</snippet></ROW><ROW><id>16839686</id><snippet>None</snippet></ROW><ROW><id>16839686</id><snippet>y(*args, **kwargs)
</snippet></ROW><ROW><id>16839686</id><snippet>{'a': self.f1, 'b': self.f2, 'c': self.f3, 'd': self.f4}.get(v)()
</snippet></ROW><ROW><id>16839686</id><snippet>TypeError</snippet></ROW><ROW><id>16839688</id><snippet>./manager.py syncdb</snippet></ROW><ROW><id>16839811</id><snippet>sum()</snippet></ROW><ROW><id>16839811</id><snippet>from itertools import islice
sum(islice(somelist, k))
</snippet></ROW><ROW><id>16839811</id><snippet>sum(somelist[:k])</snippet></ROW><ROW><id>16839811</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; somelist = range(10000)
&gt;&gt;&gt; k = 1
&gt;&gt;&gt; timeit.timeit('sum(somelist[:k])', 'from __main__ import somelist, k')
0.5250287180097075
&gt;&gt;&gt; timeit.timeit('sum(islice(somelist, k))', 'from __main__ import somelist, k; from itertools import islice')
0.3054035940003814
&gt;&gt;&gt; k = len(somelist) // 2
&gt;&gt;&gt; k = len(somelist) // 2
&gt;&gt;&gt; timeit.timeit('sum(somelist[:k])', 'from __main__ import somelist, k')
1.6815436409960967
&gt;&gt;&gt; timeit.timeit('sum(islice(somelist, k))', 'from __main__ import somelist, k; from itertools import islice')
1.8633333330071764
</snippet></ROW><ROW><id>16839811</id><snippet>k</snippet></ROW><ROW><id>16839894</id><snippet>df_no_tz = df.copy()
df_no_tz.index.tz = None
</snippet></ROW><ROW><id>16839894</id><snippet>pandas</snippet></ROW><ROW><id>16839894</id><snippet>pandas</snippet></ROW><ROW><id>16840125</id><snippet>@app.before_request
def before_request():
    if 'api' == request.host[:-len(app.config['SERVER_NAME'])].rstrip('.'):
        redirect(url_for('api'))


@app.route('/', defaults={'path': ''}, subdomain='api')
@app.route('/&lt;path:path&gt;', subdomain='api')
def api(path):
    return "hello"
</snippet></ROW><ROW><id>16840143</id><snippet>order_of_3rd = [3,0,1,2]
My_table.sort(key=lambda a: (a[0], order_of_3rd.index(a[2])))
</snippet></ROW><ROW><id>16840350</id><snippet>dtype = np.dtype((np.void, (p_a_colors.shape[1] * 
                            p_a_colors.dtype.itemsize)))
mask = np.in1d(p_a_colors.view(dtype), p_rem.view(dtype))
p_r_colors = p_a_colors[~mask]

&gt;&gt;&gt; p_r_colors
array([[0, 0, 0],
       [0, 2, 0],
       [3, 2, 4]])
</snippet></ROW><ROW><id>16840382</id><snippet>add_output()</snippet></ROW><ROW><id>16840382</id><snippet>collections</snippet></ROW><ROW><id>16840382</id><snippet>import collections

def add_output(fct, value):
    def wrapped(*args, **kwargs):
        result = fct(*args, **kwargs)
        if isinstance(result, collections.Sequence):
            return tuple(result) + (value,)
        elif result is None:
            return value
        else: # non-None and non-sequence
            return (result, value)
    return wrapped

def f1(a): return a,a+1
def f2(a): pass
g1 = add_output(f1, 42)
g2 = add_output(f2, 42)
print g1(12)            # (12,13,42)
print g2(12)            # 42
</snippet></ROW><ROW><id>16840382</id><snippet>collections.Iterable</snippet></ROW><ROW><id>16840382</id><snippet>collections.Sequence</snippet></ROW><ROW><id>16840445</id><snippet>int(float(value))</snippet></ROW><ROW><id>16840445</id><snippet>float</snippet></ROW><ROW><id>16840445</id><snippet>int</snippet></ROW><ROW><id>16840445</id><snippet>0.05</snippet></ROW><ROW><id>16840445</id><snippet>0</snippet></ROW><ROW><id>16840445</id><snippet>float(value)</snippet></ROW><ROW><id>16840747</id><snippet>file</snippet></ROW><ROW><id>16840747</id><snippet>seek</snippet></ROW><ROW><id>16840747</id><snippet>tell</snippet></ROW><ROW><id>16840747</id><snippet>tell</snippet></ROW><ROW><id>16840747</id><snippet>read</snippet></ROW><ROW><id>16840747</id><snippet>write</snippet></ROW><ROW><id>16840747</id><snippet>seek</snippet></ROW><ROW><id>16840747</id><snippet>def peek_line(f):
    pos = f.tell()
    line = f.readline()
    f.seek(pos)
    return line

print peek_line(f) # cat1
print peek_line(f) # cat1
</snippet></ROW><ROW><id>16840747</id><snippet>read</snippet></ROW><ROW><id>16840747</id><snippet>file.read</snippet></ROW><ROW><id>16840747</id><snippet>def peek(f, length=1):
    pos = f.tell()
    data = f.read(length) # Might try/except this line, and finally: f.seek(pos)
    f.seek(pos)
    return data

print peek(f, 4) # cat1
print peek(f, 4) # cat1
</snippet></ROW><ROW><id>16840854</id><snippet>instance.__dict__[attr] = value</snippet></ROW><ROW><id>16840854</id><snippet>object.__setattr__(instance,attr,value)</snippet></ROW><ROW><id>16840854</id><snippet>__dict__[attr] = whatever</snippet></ROW><ROW><id>16840854</id><snippet>__setattr__</snippet></ROW><ROW><id>16840854</id><snippet>__setitem__</snippet></ROW><ROW><id>16841075</id><snippet>re.split()</snippet></ROW><ROW><id>16841075</id><snippet>groups()</snippet></ROW><ROW><id>16841075</id><snippet>Match</snippet></ROW><ROW><id>16841075</id><snippet>SRE_Match</snippet></ROW><ROW><id>16841075</id><snippet>&gt;&gt;&gt; f = '000014_L_20111007T084734-20111008T023142.txt'
&gt;&gt;&gt; time_info = re.search(r'[LU]_(\w+)-(\w+)\.', f).groups()
&gt;&gt;&gt; time_info
('20111007T084734', '20111008T023142')
</snippet></ROW><ROW><id>16841075</id><snippet>groupdict()</snippet></ROW><ROW><id>16841075</id><snippet>groups()</snippet></ROW><ROW><id>16841075</id><snippet>r'[LU]_(?P&lt;groupA&gt;\w+)-(?P&lt;groupB&gt;\w+)\.'</snippet></ROW><ROW><id>16841258</id><snippet>to_datetime</snippet></ROW><ROW><id>16841258</id><snippet>data.time = pd.to_datetime(data.time)

df = data.set_index('time')
</snippet></ROW><ROW><id>16841258</id><snippet>In [2]: pd.to_datetime('2011-12-16 08:09:07')
Out[2]: datetime.datetime(2011, 12, 16, 8, 9, 7)

In [3]: s = pd.Series(['2011-12-16 08:09:07'])

In [4]: pd.to_datetime(s)
Out[4]:
0   2011-12-16 08:09:07
dtype: datetime64[ns]
</snippet></ROW><ROW><id>16841691</id><snippet>__get__()</snippet></ROW><ROW><id>16841691</id><snippet>__set__()</snippet></ROW><ROW><id>16841691</id><snippet>__delete__()</snippet></ROW><ROW><id>16841691</id><snippet>__get__</snippet></ROW><ROW><id>16841691</id><snippet>&gt;&gt;&gt; class Descriptor(object):
...     def __get__(self, obj, type=None):
...         print '__get__(%r, %r)' % (obj, type)
...
&gt;&gt;&gt; class A(object):
...     desc = Descriptor()
...
&gt;&gt;&gt; A.desc
__get__(None, &lt;class '__main__.A'&gt;)
&gt;&gt;&gt; A().desc
__get__(&lt;__main__.A object at 0x020F5B50&gt;, &lt;class '__main__.A'&gt;)
</snippet></ROW><ROW><id>16841691</id><snippet>__get__</snippet></ROW><ROW><id>16841691</id><snippet>obj</snippet></ROW><ROW><id>16841691</id><snippet>&gt;&gt;&gt; class A:
...     def f(self):
...             pass
...
&gt;&gt;&gt; A.f.__get__(None, A)
&lt;unbound method A.f&gt;
&gt;&gt;&gt; A.f.__get__(A(), A)
&lt;bound method A.f of &lt;__main__.A instance at 0x022082D8&gt;&gt;
</snippet></ROW><ROW><id>16841832</id><snippet>$ pip install lxml
$ python
Python &lt;big version string specific to your python installation...&gt;
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import lxml
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16841851</id><snippet>a</snippet></ROW><ROW><id>16841851</id><snippet>a_dict = dict((v, i) for i, v in enumerate(a))
</snippet></ROW><ROW><id>16841851</id><snippet>float('inf')</snippet></ROW><ROW><id>16841851</id><snippet>sorted(b, key=lambda v: a_dict.get(v, float('inf')))
</snippet></ROW><ROW><id>16841851</id><snippet>&gt;&gt;&gt; a = ['a','b','c','d','e']
&gt;&gt;&gt; b = ['c','a','dog']
&gt;&gt;&gt; a_dict = dict((v, i) for i, v in enumerate(a))
&gt;&gt;&gt; sorted(b, key=lambda v: a_dict.get(v, float('inf')))
['a', 'c', 'dog']
</snippet></ROW><ROW><id>16841851</id><snippet>dict</snippet></ROW><ROW><id>16841851</id><snippet>.index()</snippet></ROW><ROW><id>16841851</id><snippet>O(n)</snippet></ROW><ROW><id>16841851</id><snippet>a</snippet></ROW><ROW><id>16841851</id><snippet>b</snippet></ROW><ROW><id>16841851</id><snippet>a</snippet></ROW><ROW><id>16841851</id><snippet>dict</snippet></ROW><ROW><id>16841851</id><snippet>.index()</snippet></ROW><ROW><id>16841948</id><snippet>import sys
from PyQt4 import QtGui
from mainwindow import Ui_MainWindow
from dialog import Ui_Dialog

class MainWindow(QtGui.QMainWindow, Ui_MainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        self.setupUi(self)
        self.pushButton.clicked.connect(self.show_dialog)
    def show_dialog(self):
        dialog = Dialog()
        ret = dialog.exec_()
        if ret == QtGui.QDialog.Accepted:
            self.textEdit.append('accepted')
        else:
            self.textEdit.append('rejected')

class Dialog(QtGui.QDialog, Ui_Dialog):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        self.setupUi(self)

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    mw = MainWindow()
    mw.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>16841948</id><snippet>mainwindow.py</snippet></ROW><ROW><id>16841948</id><snippet>dialog.py</snippet></ROW><ROW><id>16841948</id><snippet>Ui_MainWindow</snippet></ROW><ROW><id>16841948</id><snippet>Ui_Dialog</snippet></ROW><ROW><id>16841948</id><snippet>setupUi(self)</snippet></ROW><ROW><id>16841948</id><snippet>if __name__ ...</snippet></ROW><ROW><id>16841948</id><snippet>show()</snippet></ROW><ROW><id>16841948</id><snippet>.ui</snippet></ROW><ROW><id>16841948</id><snippet>from hi import Ui_Dialog</snippet></ROW><ROW><id>16841948</id><snippet>def open(self):</snippet></ROW><ROW><id>16841948</id><snippet>open</snippet></ROW><ROW><id>16841948</id><snippet>open</snippet></ROW><ROW><id>16841948</id><snippet>exec_</snippet></ROW><ROW><id>16841948</id><snippet>clicked</snippet></ROW><ROW><id>16841948</id><snippet>show_dialog</snippet></ROW><ROW><id>16841960</id><snippet>dict([(x, func(y)) for x, y in l])
</snippet></ROW><ROW><id>16841960</id><snippet>{x: func(y) for x, y in l if isinstance(func(y), int)}
</snippet></ROW><ROW><id>16841960</id><snippet>{key: value for key, value in ((x, func(y)) for x, y in l) if isinstance(value, int)}
</snippet></ROW><ROW><id>16841960</id><snippet>dict((key, value) for key, value in ((x, func(y)) for x, y in l) if isinstance(value, int))
</snippet></ROW><ROW><id>16841960</id><snippet>func_l = ((x, func(y)) for x, y in l)
result = dict((key, value) for key, value in func_l if isinstance(value, int))
</snippet></ROW><ROW><id>16842238</id><snippet>Model.get_by_id</snippet></ROW><ROW><id>16842238</id><snippet>Key.get</snippet></ROW><ROW><id>16842243</id><snippet>prjDir</snippet></ROW><ROW><id>16842243</id><snippet>prjDir</snippet></ROW><ROW><id>16842243</id><snippet>os.listdir</snippet></ROW><ROW><id>16842243</id><snippet>prjDir</snippet></ROW><ROW><id>16842243</id><snippet>os.listdir</snippet></ROW><ROW><id>16842243</id><snippet>os.path.join(prjDir,d)</snippet></ROW><ROW><id>16842243</id><snippet>import os
def mk_prjDir():
    print "Checking to see if", prjDir, "exists.."
    dirList = os.listdir(prjDir)
    for d in dirList:
        if os.path.isdir(os.path.join(prjDir,d)):
            print (prjDir, "exists!")
        else:
            print (prjDir, "does not exist!")
mk_prjDir()
</snippet></ROW><ROW><id>16842243</id><snippet>def mk_prjDir():
    print "Checking to see if", prjDir, "exists.."
    if os.path.isdir(prjDir):
        print (prjDir, "exists!")
    else:
        print (prjDir, "does not exist!")
</snippet></ROW><ROW><id>16842304</id><snippet>widget=float</snippet></ROW><ROW><id>16842304</id><snippet>char</snippet></ROW><ROW><id>16842304</id><snippet>widget=float</snippet></ROW><ROW><id>16842535</id><snippet>Product</snippet></ROW><ROW><id>16842535</id><snippet>from django.utils import timezone

def available(self):
    return not self.purchases_set.filter(data=timezone.now().date()).exists()
</snippet></ROW><ROW><id>16842535</id><snippet>{% for product in products %}
    {{ product }} -
    {% if product.available %}
        [buy]
    {% else %}
        ALREADY BOUGHT TODAY!
    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>16842601</id><snippet>st</snippet></ROW><ROW><id>16842601</id><snippet>st = u" человека... Смотреть телесериал на тернет. "
print re.search(ur'(?P&lt;match&gt;(?&lt;=\s)%s(?=[\s\.]))' % u'смотреть', st, re.I | re.U).groupdict()
#  {u'match': u'\u0421\u043c\u043e\u0442\u0440\u0435\u0442\u044c'}
</snippet></ROW><ROW><id>16842672</id><snippet>def print_last_word(words):
        """prints the last word after popping it off"""
    word = words.pop(-1)
    print word
</snippet></ROW><ROW><id>16842672</id><snippet>IndentationError: unindent does not match any outer indentation level
</snippet></ROW><ROW><id>16842672</id><snippet>print</snippet></ROW><ROW><id>16842672</id><snippet>print</snippet></ROW><ROW><id>16842686</id><snippet>list[list.index('foo')] = None
</snippet></ROW><ROW><id>16842873</id><snippet>url</snippet></ROW><ROW><id>16842873</id><snippet>url(r'^(?P&lt;detail_type&gt;\w+)/(?P&lt;link_item&gt;\w+)/detail$', get_details, name='details')
</snippet></ROW><ROW><id>16842873</id><snippet>{% url 'details' 'publications' publication.title %}
</snippet></ROW><ROW><id>16842873</id><snippet>SlugField</snippet></ROW><ROW><id>16842873</id><snippet>CharField</snippet></ROW><ROW><id>16842873</id><snippet>url(r'^(?P&lt;detail_type&gt;\w+)/(?P&lt;pk&gt;\w+)/detail$', get_details, name='details')
</snippet></ROW><ROW><id>16842873</id><snippet>{% url 'details' 'publications' publication.pk %}
</snippet></ROW><ROW><id>16842873</id><snippet>def get_details(request, detail_type=None, pk=None):
    if detail_type == "publications":
        publication = Publication.objects.get(pk=pk)
        return render(request, 'publication_detail.html', {'detail_type' : detail_type, 'publication' : publication})
    elif ....
</snippet></ROW><ROW><id>16842873</id><snippet>SlugField</snippet></ROW><ROW><id>16842970</id><snippet>namer</snippet></ROW><ROW><id>16842970</id><snippet>x = regex.sub(r'\1', namer(name), line)
</snippet></ROW><ROW><id>16842970</id><snippet>name</snippet></ROW><ROW><id>16842970</id><snippet>x = regex.sub(r'\1', namer[name], line)
</snippet></ROW><ROW><id>16842970</id><snippet>with open(infilename, 'r') as infile, open(outfilename, 'w') as outfile:
    for line in infile:
        # Need to get the ID for the bacteria in question. If we don't, everything
        # will end up with the same name in our output file.
        _, name = line.split(" ", 1)

        # Strip the newline character
        name = name.strip()

        x = regex.sub(r'\1', namer[name], line)
        outfile.write(x) 
</snippet></ROW><ROW><id>16843119</id><snippet>doSomeDestruction</snippet></ROW><ROW><id>16843119</id><snippet>At the point destroyed() is emitted, the widget isn't a QWidget anymore, just a QObject (as destroyed() is emitted from ~QObject)</snippet></ROW><ROW><id>16843119</id><snippet>Ok , I am sorry for stupid question. The signal is emitted, but the slot is not called for the obvious reason, that is because object is already deleted.
</snippet></ROW><ROW><id>16843119</id><snippet>del window</snippet></ROW><ROW><id>16843119</id><snippet>ret = app.exec_()</snippet></ROW><ROW><id>16843119</id><snippet>WA_DeleteOnClose</snippet></ROW><ROW><id>16843119</id><snippet>from PyQt4 import QtCore
</snippet></ROW><ROW><id>16843119</id><snippet>__init__</snippet></ROW><ROW><id>16843119</id><snippet>class MyWindow(QtGui.QMainWindow):
    def __init__(self):
        super(MyWindow, self).__init__()
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose, True)
        self.widget = MyWidget(self)
</snippet></ROW><ROW><id>16843289</id><snippet>object</snippet></ROW><ROW><id>16843289</id><snippet>fromiter</snippet></ROW><ROW><id>16843289</id><snippet>with open(myfile) as f:
    iv = binascii.unhexlify(f.readline().strip())
    key = binascii.unhexlify(f.readline().strip())
    count = int(f.readline())
    a = np.fromiter((binascii.unhexlify(line.strip()) for line in f), dtype='|S16')
</snippet></ROW><ROW><id>16843289</id><snippet>array</snippet></ROW><ROW><id>16843289</id><snippet>object</snippet></ROW><ROW><id>16843289</id><snippet>In [514]: %timeit [aes.encrypt(x) for x in a]
10 loops, best of 3: 166 ms per loop
In [515]: %timeit np.vectorize(aes.encrypt)(a)
10 loops, best of 3: 126 ms per loop
</snippet></ROW><ROW><id>16843289</id><snippet>grouper</snippet></ROW><ROW><id>16843289</id><snippet>itertools</snippet></ROW><ROW><id>16843289</id><snippet>pool.imap</snippet></ROW><ROW><id>16843289</id><snippet>numpy</snippet></ROW><ROW><id>16843333</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.compile('[^\d]*(\d+)[^\d]*').findall('12345 hdjhdjf dfdfd "dfd".')
['12345']
&gt;&gt;&gt; re.compile('[^\d]*(\d+)[^\d]*').findall('ansd: 12345,43556')
['12345'] 
</snippet></ROW><ROW><id>16843333</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.compile('([^\d]*([0-9]+)[^\d]*)+').findall('12345 hdjhdjf dfdfd "dfd" 12333.')
[('12333', '12333')]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16843333</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub('[^\d]', ' ', '12345 hdjhdjf dfdfd "dfd" 12333.')
'12345                     12333 '
</snippet></ROW><ROW><id>16843333</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub('[0-9]', ' ', '12345 hdjhdjf dfdfd "dfd" 12333.')
'      hdjhdjf dfdfd "dfd"      .'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16843349</id><snippet>SUDO[:-1] 
#prints '/usr/bin/sudo'
</snippet></ROW><ROW><id>16843349</id><snippet>SUDO=SUDO.strip()
</snippet></ROW><ROW><id>16843502</id><snippet>remove()</snippet></ROW><ROW><id>16843502</id><snippet>#</snippet></ROW><ROW><id>16843502</id><snippet>#</snippet></ROW><ROW><id>16843502</id><snippet>remove()</snippet></ROW><ROW><id>16843502</id><snippet>#</snippet></ROW><ROW><id>16843502</id><snippet>funds_U = [x for x in funds_U if x != u'#']
</snippet></ROW><ROW><id>16843502</id><snippet>funds_U</snippet></ROW><ROW><id>16843502</id><snippet>u'#'</snippet></ROW><ROW><id>16843530</id><snippet>def solve(r1, r2):
     # sort the two ranges such that the range with smaller first element
     # is assigned to x and the bigger one is assigned to y
     x, y = sorted((r1, r2))

     #now if x[1] lies between x[0] and y[0](x[1] != y[0] but can be equal to x[0])
     #then the ranges are not overlapping and return the differnce of y[0] and x[1]
     #otherwise return 0 
     if x[0] &lt;= x[1] &lt; y[0] and all( y[0] &lt;= y[1] for y in (r1,r2)):
        return y[0] - x[1]
     return 0
... 
&gt;&gt;&gt; solve([0,10],[12,20])
2
&gt;&gt;&gt; solve([5,10],[1,5])
0
&gt;&gt;&gt; solve([5,10],[1,4])
1
</snippet></ROW><ROW><id>16843701</id><snippet>c = list(b)</snippet></ROW><ROW><id>16843701</id><snippet>a = {1:'a', 2:'b', 3:'c'}
b = bytearray(str(a), 'ASCII')
c = list(b)

print(c)
</snippet></ROW><ROW><id>16843701</id><snippet>[123, 49, 58, 32, 39, 97, 39, 44, 
 32, 50, 58, 32, 39, 98, 39, 44, 
 32, 51, 58, 32, 39, 99, 39, 125]
</snippet></ROW><ROW><id>16843793</id><snippet>any</snippet></ROW><ROW><id>16843793</id><snippet>if any(isInvalid(x) for x in myList):
   #reject
</snippet></ROW><ROW><id>16843868</id><snippet>%</snippet></ROW><ROW><id>16843868</id><snippet>print "Print-1\t: %s" % sts
</snippet></ROW><ROW><id>16843868</id><snippet>str(sts[0])</snippet></ROW><ROW><id>16843868</id><snippet>TypeError</snippet></ROW><ROW><id>16843868</id><snippet>str(sts)</snippet></ROW><ROW><id>16843868</id><snippet>Exception</snippet></ROW><ROW><id>16843868</id><snippet>print "Print-2\t:", sts
print "{0}\t: {1}".format('Print-3',sts)
print "Print-4\t: %s  %s" % (url, sts)
</snippet></ROW><ROW><id>16843868</id><snippet>str(sts)</snippet></ROW><ROW><id>16843868</id><snippet>sts</snippet></ROW><ROW><id>16843868</id><snippet>str(sts[0])</snippet></ROW><ROW><id>16843868</id><snippet>str(sts)</snippet></ROW><ROW><id>16843868</id><snippet>'(' + repr(sts[0]) + ',)'</snippet></ROW><ROW><id>16843868</id><snippet>Print-1</snippet></ROW><ROW><id>16843868</id><snippet>er.args</snippet></ROW><ROW><id>16843868</id><snippet>%</snippet></ROW><ROW><id>16843868</id><snippet>print "Print-0\t: %s" % (sts,)</snippet></ROW><ROW><id>16843868</id><snippet>%</snippet></ROW><ROW><id>16843903</id><snippet>with chef.ChefAPI('http://example.com:4000', '/root/.chef/client.pem', 'client'):
    for node in chef.Node.list():
        if "auto" in node.lower():
            print "deleting node " + node
            nodeObj = chef.Node(node)
            nodeObj.delete()
</snippet></ROW><ROW><id>16843952</id><snippet>$</snippet></ROW><ROW><id>16843952</id><snippet>match</snippet></ROW><ROW><id>16843952</id><snippet>user/</snippet></ROW><ROW><id>16843952</id><snippet>user/3</snippet></ROW><ROW><id>16843952</id><snippet>r'^blog/.*/'</snippet></ROW><ROW><id>16843952</id><snippet>[blog/user/]</snippet></ROW><ROW><id>16843952</id><snippet>[blog/user/]3</snippet></ROW><ROW><id>16843952</id><snippet>r'^blog/.*/$'</snippet></ROW><ROW><id>16843952</id><snippet>blog/user/3</snippet></ROW><ROW><id>16843958</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; input_string = "Access-Concentrator: xxxx Service-Name: xxxx Got a cookie: de 58 08 d0 66 c8 58 15 a0 66 9b b1 02 3f 7c 95 1f 42 00 00 -------------------------------------------------- AC-Ethernet-Address: 00:14:5e:6b:4b:ee –"
&gt;&gt;&gt; mac = re.search(r'([0-9A-F]{2}[:-]){5}([0-9A-F]{2})', input_string, re.I).group()
&gt;&gt;&gt; mac
'00:14:5e:6b:4b:ee'
</snippet></ROW><ROW><id>16843958</id><snippet>&gt;&gt;&gt; my_macs = ['00:14:5e:6b:4b:ee','00:14:5e:6b:4b:eb','00:14:5e:6b:4b:ec']
&gt;&gt;&gt; mac in my_macs
True
</snippet></ROW><ROW><id>16843958</id><snippet>import re

my_macs = ['00:14:5e:6b:4b:ea','00:14:5e:6b:4b:eb','00:14:5e:6b:4b:ec']
mac = ''

strToFind = re.compile(r'([0-9A-F]{2}[:-]){5}([0-9A-F]{2})', re.I)

for line in output.split('\n'):
    results = re.search(strToFind, line)
    if results:
        mac = results.group()
    if mac not in my_macs:
        print mac
</snippet></ROW><ROW><id>16844372</id><snippet>sys.path</snippet></ROW><ROW><id>16844453</id><snippet>os.system('wget http://somewebsite.net/shared/fshared_%s.7z'%i)
</snippet></ROW><ROW><id>16844453</id><snippet>%s</snippet></ROW><ROW><id>16844453</id><snippet>,</snippet></ROW><ROW><id>16844517</id><snippet>from BeautifulSoup import BeautifulSoup
import urllib2
import re

url="http://m.harveynorman.com.au/tv-audio/portable-audio/ipods"
page=urllib2.urlopen(url)
soup = BeautifulSoup(page.read())
A = soup.findAll('strong',{'class':'name fn'})[0]
print(A.renderContents())
</snippet></ROW><ROW><id>16844517</id><snippet>iPod touch 16GB - White
</snippet></ROW><ROW><id>16844517</id><snippet>for B in A:
    print B.renderContents()[0]
</snippet></ROW><ROW><id>16844517</id><snippet>iPod touch 16GB - White
iPod touch 4th Gen 32GB
Apple iPod Shuffle 2GB
iPod touch 16GB - Black
iPod nano 16GB
iPod touch 32GB
</snippet></ROW><ROW><id>16844714</id><snippet>with open('some_namespace.belns', 'w') as fp:
    for key in sorted(hgnc_ns_dict):
        fp.write('    {0}|{1}\n'.format(key, hgnc_ns_dict[key]))
</snippet></ROW><ROW><id>16844741</id><snippet> "AskClass": "A fine name %s. What is your class? " % self.herodict['Name'],
</snippet></ROW><ROW><id>16844741</id><snippet>self.herodict['Name']</snippet></ROW><ROW><id>16844741</id><snippet>'Jimmy'</snippet></ROW><ROW><id>16844741</id><snippet>lambda</snippet></ROW><ROW><id>16844741</id><snippet>self.herotext = {
    "Welcome": lambda self: "Greetings, hero. What is thine name? ",
    "AskClass": lambda self: "A fine name %s. What is your class? " % self.herodict['Name'],
}
</snippet></ROW><ROW><id>16844741</id><snippet>self</snippet></ROW><ROW><id>16844741</id><snippet>n = raw_input(self.herotext[textkey](self))
</snippet></ROW><ROW><id>16844812</id><snippet>def lev(n):
    if n == 0:
        return "F"
    else:
        symbols = lev(n-1)
        return symbols.replace("F", "LFRRFL")

for i in range(4):
    print lev(i)
</snippet></ROW><ROW><id>16844812</id><snippet>F
LFRRFL
LLFRRFLRRLFRRFLL
LLLFRRFLRRLFRRFLLRRLLFRRFLRRLFRRFLLL
</snippet></ROW><ROW><id>16844822</id><snippet>itertools.chain()</snippet></ROW><ROW><id>16844822</id><snippet>from itertools import chain</snippet></ROW><ROW><id>16844822</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; for item in chain('abc', 'def'):
...     print(item)
... 
a
b
c
d
e
f
</snippet></ROW><ROW><id>16844822</id><snippet>list()</snippet></ROW><ROW><id>16844822</id><snippet>&gt;&gt;&gt; list(chain('abc', 'def'))
['a', 'b', 'c', 'd', 'e', 'f']
</snippet></ROW><ROW><id>16844876</id><snippet>exec("print('Hello')")
</snippet></ROW><ROW><id>16844876</id><snippet>exec("print('Hello')", None, None)
</snippet></ROW><ROW><id>16844896</id><snippet>qualsin = [0, 2, 3, 2, 3, 1, 2, 3, 5, 3, 3, 2, 4]</snippet></ROW><ROW><id>16844896</id><snippet>set_quals = set(qualsin) # This is set([0, 1, 2, 3, 4, 5])
for quals in set_quals: # Iterate over the values in the set, not the list
    d = [quals, qualsin.count(quals) # count the values from the list, not the set
    wrtr.writerow(d)
</snippet></ROW><ROW><id>16844896</id><snippet>import collections

...
set_quals = set(qualsin) # This is set([0, 1, 2, 3, 4, 5])
counts = collections.Counter(qualsin) # This is Counter({3: 5, 2: 4, 0: 1, 1: 1, 4: 1, 5: 1}) which acts like a dictionary
for quals in set_quals:
    d = [quals, counts[quals]] # use the name from the set and the value from the Counter
    wrtr.writerow(d)
</snippet></ROW><ROW><id>16844896</id><snippet>counts = collections.defaultdict(int) # Available since 2.5
for quals in qualsin:
    counts[quals] += 1
</snippet></ROW><ROW><id>16844896</id><snippet>list.count</snippet></ROW><ROW><id>16844896</id><snippet>ordered_deduped_quals = sorted(set(qualsin))
for quals in ordered_deduped_quals:
    ...
</snippet></ROW><ROW><id>16845062</id><snippet>DictReader</snippet></ROW><ROW><id>16845062</id><snippet>fields = next(open('file_data.txt')).strip().split('\t')
</snippet></ROW><ROW><id>16845062</id><snippet>open()</snippet></ROW><ROW><id>16845062</id><snippet>next(open('file_data.txt'))</snippet></ROW><ROW><id>16845062</id><snippet>DictReader</snippet></ROW><ROW><id>16845062</id><snippet>Popen</snippet></ROW><ROW><id>16845327</id><snippet>CREATE TABLE CME_Equities('Contract Size' TEXT, 'Contract Months' TEXT)
</snippet></ROW><ROW><id>16845327</id><snippet>sqlite3</snippet></ROW><ROW><id>16845327</id><snippet>$ sqlite3 :memory:
SQLite version 3.7.16.1 2013-03-29 13:44:34
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; CREATE TABLE CME_Equities('Contract Size' TEXT, 'Contract Months' TEXT);
sqlite&gt; .schema
CREATE TABLE CME_Equities('Contract Size' TEXT, 'Contract Months' TEXT);
</snippet></ROW><ROW><id>16845327</id><snippet>querycurs.execute("CREATE TABLE CME_Equities('Contract Size' TEXT, 'Contract Months' TEXT)")
</snippet></ROW><ROW><id>16845480</id><snippet>egg_info</snippet></ROW><ROW><id>16845480</id><snippet>Running setup.py egg_info for package mercurial
</snippet></ROW><ROW><id>16845480</id><snippet>Command python setup.py egg_info failed with error code 1 in /var/folders/fl/kgrflrj92pv1yjr_918x0t800000gq/T/pip-build/mercurial
</snippet></ROW><ROW><id>16845874</id><snippet>discriminator_on_association.py</snippet></ROW><ROW><id>16845923</id><snippet>\t</snippet></ROW><ROW><id>16845923</id><snippet>ValueError</snippet></ROW><ROW><id>16845923</id><snippet>for line in sent_file:
    try:
        term, score = line.split("\t")
        scores[term] = int(score)
    except ValueError:
        pass
</snippet></ROW><ROW><id>16845923</id><snippet>'abilities 2\n'</snippet></ROW><ROW><id>16845923</id><snippet>\t</snippet></ROW><ROW><id>16845923</id><snippet>for line in sent_file:
    try:
        term, score = line.rsplit(None, 1)  # split on last whitespace separator
        scores[term] = int(score)
    except ValueError:
        pass
</snippet></ROW><ROW><id>16845923</id><snippet>\t</snippet></ROW><ROW><id>16845923</id><snippet>csv</snippet></ROW><ROW><id>16845923</id><snippet>import csv

with open(sys.argv[1], 'rb') as sent_file:
    reader = csv.reader(sent_file, delimiter='\t')
    scores = {term: int(score) for term, score in reader}
</snippet></ROW><ROW><id>16845964</id><snippet>csv</snippet></ROW><ROW><id>16845964</id><snippet>import csv

with open("test.csv") as file, open("test_tab.csv", "w") as out:
    reader = csv.reader(file)
    writer = csv.writer(out, dialect=csv.excel_tab)
    for row in reader:
        writer.writerow(row)
</snippet></ROW><ROW><id>16845964</id><snippet>with</snippet></ROW><ROW><id>16845964</id><snippet>csv</snippet></ROW><ROW><id>16845964</id><snippet>DictReader</snippet></ROW><ROW><id>16845964</id><snippet>import csv

with open("test.csv") as file, open("test_tab.csv", "w") as out:
    reader = csv.DictReader(file)
    writer = csv.writer(out, dialect=csv.excel_tab)
    for row in reader:
        writer.writerow([row["name"], row["order_num"], ...])
</snippet></ROW><ROW><id>16845964</id><snippet>csv.writerows()</snippet></ROW><ROW><id>16845964</id><snippet>writer.writerows([row["name"], row["order_num"], ...] for row in reader)
</snippet></ROW><ROW><id>16846213</id><snippet>x[0] = x[7] = x[9] = 0
</snippet></ROW><ROW><id>16846213</id><snippet>numpy</snippet></ROW><ROW><id>16846213</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.array([1,2,3,4,5,6,7,8,9,10])
&gt;&gt;&gt; indices = [0,7,9]
&gt;&gt;&gt; x[indices] = 0  # or just x[[0,7,9]] = 0
&gt;&gt;&gt; x
array([0, 2, 3, 4, 5, 6, 7, 0, 9, 0])
</snippet></ROW><ROW><id>16846281</id><snippet>html_log:</snippet></ROW><ROW><id>16846281</id><snippet>s = "html_log:jeff 1153.3 1.84 625:54 1 2 71 3 2 10 7:58 499 3 5 616:36 241 36 html_log:fred 28.7 1.04 27:34 -10 18 13 0:48 37 18 8 -3.63 html_log:bob 1217.1 1.75 696:48 1 538 6 109 61 14:42 633 223 25 435:36 182 34"
pattern = re.compile("html_log:(?P&lt;name&gt;[^ ]*) (?P&lt;score&gt;[^ ]*)")
print sorted(pattern.findall(s), key=lambda x: float(x[1]), reverse=True)

# [('bob', '1217.1'), ('jeff', '1153.3'), ('fred', '28.7')]
</snippet></ROW><ROW><id>16846412</id><snippet>export PYTHONPATH=$PATH_TO_MODULE:$PYTHONPATH
</snippet></ROW><ROW><id>16846466</id><snippet>response.request.meta['redirect_urls']</snippet></ROW><ROW><id>16846511</id><snippet>def skip_last(iterator):
    prev = next(iterator)
    for item in iterator:
        yield prev
        prev = item
</snippet></ROW><ROW><id>16846511</id><snippet>CSV_raw</snippet></ROW><ROW><id>16846511</id><snippet>for row in skip_last(CSV_raw):
</snippet></ROW><ROW><id>16846511</id><snippet>n</snippet></ROW><ROW><id>16846511</id><snippet>from collections import deque
from itertools import islice

def skip_last_n(iterator, n=1):
    it = iter(iterator)
    prev = deque(islice(it, n), n)
    for item in it:
        yield prev.popleft()
        prev.append(item)
</snippet></ROW><ROW><id>16846545</id><snippet>self.background</snippet></ROW><ROW><id>16846545</id><snippet>c.background</snippet></ROW><ROW><id>16846545</id><snippet>    c = Canvas(frame2)
    c.pack(expand=YES,fill=BOTH)
    c.background = PhotoImage(file='Board.gif')
    c.create_image(100,100,image=c.background,anchor='nw')
</snippet></ROW><ROW><id>16846574</id><snippet>http://</snippet></ROW><ROW><id>16846574</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>16846574</id><snippet>Graph</snippet></ROW><ROW><id>16846574</id><snippet>ConjunctiveGraph</snippet></ROW><ROW><id>16846574</id><snippet>Graph.serialize</snippet></ROW><ROW><id>16846574</id><snippet>Graph.parse</snippet></ROW><ROW><id>16846574</id><snippet>import rdflib

g = rdflib.Graph()
has_border_with = rdflib.URIRef('http://www.example.org/has_border_with')
located_in = rdflib.URIRef('http://www.example.org/located_in')

germany = rdflib.URIRef('http://www.example.org/country1')
france = rdflib.URIRef('http://www.example.org/country2')
china = rdflib.URIRef('http://www.example.org/country3')
mongolia = rdflib.URIRef('http://www.example.org/country4')

europa = rdflib.URIRef('http://www.example.org/part1')
asia = rdflib.URIRef('http://www.example.org/part2')

g.add((germany,has_border_with,france))
g.add((china,has_border_with,mongolia))
g.add((germany,located_in,europa))
g.add((france,located_in,europa))
g.add((china,located_in,asia))
g.add((mongolia,located_in,asia))

q = "select ?country where { ?country &lt;http://www.example.org/located_in&gt; &lt;http://www.example.org/part1&gt; }"
x = g.query(q)
print list(x)
# write graph to file, re-read it and query the newly created graph
g.serialize("graph.rdf")
g1 = rdflib.Graph()
g1.parse("graph.rdf", format="xml")
x1 = g1.query(q)
print list(x1)
</snippet></ROW><ROW><id>16846698</id><snippet>import Tkinter as tk

class App(object):
    def __init__(self, master, **kwargs):
        frame = tk.Frame(master)
        self.variables = {}
        s = {'WZ':1,'ZB':2,'RS':3,'CC':4,'CL':5}
        for k, v in s.iteritems():
             self.variables[k] = tk.IntVar()
             cb = tk.Checkbutton(
                 frame, text=k, onvalue=v, offvalue=0,
                 variable=self.variables[k],
                 command=self.oncheck(k),
                 anchor='w')
             cb.pack(side='top',fill='x')
        frame.pack()
    def oncheck(self, key):
        def _oncheck():
            print('{l} =&gt; {v}'.format(l=key, v=self.variables[key].get()))
        return _oncheck

root = tk.Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>16846878</id><snippet>from collections import defaultdict

item_dict = defaultdict(list)

for item in value_list:
    item_dict[item.value].append(item)

# do some calculations base on values

new_data # some dictionary created by computation
# new data is stored new_data[value] = new_value

for value, new_value in new_data.items():
    for item in item_dict[value]:
        item.value = new_value
</snippet></ROW><ROW><id>16846879</id><snippet>from collections import OrderedDict as od
with open("abc") as f:
   dic = od()
   for line in f:
       row  = map(int,line.split())
       idx, num  = row[2], row[0]
       val = [num] + [row[3:-1]]
       dic.setdefault(idx,[]).append(val)

for k,v in dic.items():
    for val in v:
        print k,val
</snippet></ROW><ROW><id>16846879</id><snippet>548 [1772, [340, 303, 20, 37]]
551 [1772, [337, 306, 22, 37]]
551 [1772, [337, 306, 22, 37]]
551 [1772, [337, 306, 22, 37]]
552 [1772, [336, 307, 22, 37]]
553 [1772, [335, 308, 22, 37]]
554 [1772, [335, 309, 20, 37]]
438 [1783, [31, 436, 40, 36]]
439 [1783, [33, 434, 40, 36]]
440 [1783, [35, 432, 40, 36]]
441 [1783, [38, 430, 40, 36]]
442 [1783, [39, 431, 40, 36]]
443 [1783, [41, 429, 40, 36]]
444 [1783, [44, 428, 40, 36]]
</snippet></ROW><ROW><id>16846991</id><snippet>In [5]: for l in (list1, list2, list3):
   ...:     print l.count(2)
   ...:     
1
0
1
</snippet></ROW><ROW><id>16846991</id><snippet>In [6]: lists = [list1, list2, list3]

In [7]: next(l for l in lists if 9 in l)
Out[7]: [4, 5, 9, 3]
</snippet></ROW><ROW><id>16847004</id><snippet>ordered = models.Study.objects.order_by('arrived', '-priority__priority')
</snippet></ROW><ROW><id>16847169</id><snippet>## adapted from http://stackoverflow.com/questions/16824718/python-matplotlib-pyside-fast-timetrace-scrolling

from PySide import QtGui, QtCore
import numpy as np
import pyqtgraph as pg

N_SAMPLES = 1e6

def test_plot():
    time = np.arange(N_SAMPLES)*1e-3
    sample = np.random.randn(N_SAMPLES)

    plt = pg.PlotWidget(title="Use the slider to scroll and the spin-box to set the width")
    plt.addLegend()
    plt.plot(time, sample, name="Gaussian noise")
    q = ScrollingToolQT(plt)
    return q   # WARNING: it's important to return this object otherwise
            # python will delete the reference and the GUI will not respond!


class ScrollingToolQT(object):
    def __init__(self, fig):
        # Setup data range variables for scrolling
        self.fig = fig
        self.xmin, self.xmax = fig.plotItem.vb.childrenBounds()[0]
        self.step = 1 # axis units

        self.scale = 1e3 # conversion betweeen scrolling units and axis units

        # Retrive the QMainWindow used by current figure and add a toolbar
        # to host the new widgets
        self.win = QtGui.QMainWindow()
        self.win.show()
        self.win.resize(800,600)
        self.win.setCentralWidget(fig)
        self.toolbar = QtGui.QToolBar()
        self.win.addToolBar(QtCore.Qt.BottomToolBarArea, self.toolbar)

        # Create the slider and spinbox for x-axis scrolling in toolbar
        self.set_slider(self.toolbar)
        self.set_spinbox(self.toolbar)

        # Set the initial xlimits coherently with values in slider and spinbox
        self.set_xlim = self.fig.setXRange
        self.set_xlim(0, self.step)

    def set_slider(self, parent):
        # Slider only support integer ranges so use ms as base unit
        smin, smax = self.xmin*self.scale, self.xmax*self.scale

        self.slider = QtGui.QSlider(QtCore.Qt.Horizontal, parent=parent)
        self.slider.setTickPosition(QtGui.QSlider.TicksAbove)
        self.slider.setTickInterval((smax-smin)/10.)
        self.slider.setMinimum(smin)
        self.slider.setMaximum(smax-self.step*self.scale)
        self.slider.setSingleStep(self.step*self.scale/5.)
        self.slider.setPageStep(self.step*self.scale)
        self.slider.setValue(0)  # set the initial position
        self.slider.valueChanged.connect(self.xpos_changed)
        parent.addWidget(self.slider)

    def set_spinbox(self, parent):
        self.spinb = QtGui.QDoubleSpinBox(parent=parent)
        self.spinb.setDecimals(3)
        self.spinb.setRange(0.001, 3600.)
        self.spinb.setSuffix(" s")
        self.spinb.setValue(self.step)   # set the initial width
        self.spinb.valueChanged.connect(self.xwidth_changed)
        parent.addWidget(self.spinb)

    def xpos_changed(self, pos):
        #pprint("Position (in scroll units) %f\n" %pos)
        #        self.pos = pos/self.scale
        pos /= self.scale
        self.set_xlim(pos, pos + self.step, padding=0)

    def xwidth_changed(self, xwidth):
        #pprint("Width (axis units) %f\n" % step)
        if xwidth &lt;= 0: return
        self.step = xwidth
        self.slider.setSingleStep(self.step*self.scale/5.)
        self.slider.setPageStep(self.step*self.scale)
        old_xlim = self.fig.plotItem.vb.viewRange()[0]
        self.xpos_changed(old_xlim[0] * self.scale)

if __name__ == "__main__":
    app = pg.mkQApp()
    q = test_plot()
    app.exec_()
</snippet></ROW><ROW><id>16847578</id><snippet>select_related</snippet></ROW><ROW><id>16847578</id><snippet>prefetch_related</snippet></ROW><ROW><id>16847578</id><snippet>select_related</snippet></ROW><ROW><id>16847578</id><snippet># Hits the database
foo = Foo.objects.prefetch_related('bars').latest()

# Doesn't hit the database
[x.value for x in foo.bars.all()]
</snippet></ROW><ROW><id>16847634</id><snippet>n</snippet></ROW><ROW><id>16847634</id><snippet>from random import shuffle

def remove_percentage(list_a, percentage):
    shuffle(list_a)
    count = int(len(list_a) * percentage)
    if not count: return []  # edge case, no elements removed
    list_a[-count:], list_b = [], list_a[-count:]
    return list_b
</snippet></ROW><ROW><id>16847634</id><snippet>percentage</snippet></ROW><ROW><id>16847634</id><snippet>0.0</snippet></ROW><ROW><id>16847634</id><snippet>1.0</snippet></ROW><ROW><id>16847634</id><snippet>&gt;&gt;&gt; list_a = range(100)
&gt;&gt;&gt; list_b = remove_percentage(list_a, 0.25)
&gt;&gt;&gt; len(list_a), len(list_b)
(75, 25)
&gt;&gt;&gt; list_b
[1, 94, 13, 81, 23, 84, 41, 92, 74, 82, 42, 28, 75, 33, 35, 62, 2, 58, 90, 52, 96, 68, 72, 73, 47]
</snippet></ROW><ROW><id>16847739</id><snippet>Cookies</snippet></ROW><ROW><id>16847739</id><snippet>SACSID</snippet></ROW><ROW><id>16847739</id><snippet>SACSID</snippet></ROW><ROW><id>16847739</id><snippet>decorator.oauth_required</snippet></ROW><ROW><id>16847739</id><snippet>302</snippet></ROW><ROW><id>16847739</id><snippet>from google.appengine.api import users
# Guaranteed not to be None by the decorator
current_user = users.get_current_user()
</snippet></ROW><ROW><id>16847739</id><snippet>import urllib
query_string = urllib.urlencode({'user_id': current_user.user_id()})
taskqueue.add(url='/updateworker?' + query_string)
</snippet></ROW><ROW><id>16847739</id><snippet>user_id</snippet></ROW><ROW><id>16847739</id><snippet># This is the 'user_id' you appended in the query string
user_id = self.request.get('user_id')
</snippet></ROW><ROW><id>16847739</id><snippet>from oauth2client.appengine import CredentialsModel
from oauth2client.appengine import StorageByKeyName
# This assumes you are using the defaults for OAuth2Decorator,
# which your above code is
credentials = StorageByKeyName(
    CredentialsModel, user_id, 'credentials').get()
</snippet></ROW><ROW><id>16847914</id><snippet>if</snippet></ROW><ROW><id>16847914</id><snippet>False</snippet></ROW><ROW><id>16847914</id><snippet>for</snippet></ROW><ROW><id>16847914</id><snippet>i</snippet></ROW><ROW><id>16847914</id><snippet>i+1</snippet></ROW><ROW><id>16847914</id><snippet>i</snippet></ROW><ROW><id>16847914</id><snippet>i+2</snippet></ROW><ROW><id>16847914</id><snippet>for n in numbers[:]:   #iterate over a shallow copy of list
    if n % results[-1] == 0:
        print "If statement", numbers
        numbers.remove(n)
    else:
        print "Else statement", numbers
        numbers.remove(n)
</snippet></ROW><ROW><id>16847914</id><snippet>&gt;&gt;&gt; lis  = range(3,15)
&gt;&gt;&gt; for x in lis:
...     print x
...     lis.remove(x)
...     
3
5
7
9
11
13
</snippet></ROW><ROW><id>16847940</id><snippet>import base.dir2.b as b
</snippet></ROW><ROW><id>16847980</id><snippet>class Character(object):
    def __init__(self, name="DEFAULT"):
        self.name = name

pc = Character("Bob")

def print_name(character):
    print character.name

def run():
    print_name(pc)

run()

import shelve
mysave = shelve.open("save1")
# save all Character instances without the default name
mysave["all characters"] = {varname:value for varname,value in
                                globals().iteritems() if
                                    isinstance(value, Character) and
                                    value.name != "DEFAULT"}
mysave.close()

del pc

mysave = shelve.open("save1")
globals().update(mysave["all characters"])
mysave.close()

run()
</snippet></ROW><ROW><id>16848069</id><snippet>re.sub()</snippet></ROW><ROW><id>16848069</id><snippet>import re

s = "some string ['foo'] [b a r] [baz] [] extra stuff"

pat0 = re.compile(r'\[([^]]*)\]')

lst0 = pat0.findall(s)

lst1 = [s.replace(' ', '') for s in lst0]
lst2 = [s.replace("'", '') for s in lst1]

print(lst2) # prints: ['foo', 'bar', 'baz', '']
</snippet></ROW><ROW><id>16848107</id><snippet>for each in productname1:
x = each.contents[0].strip()
    x = re.sub(r'\[[\w\s-]*\][\xc2]',"",x)
    print x
</snippet></ROW><ROW><id>16848107</id><snippet> Apple iPad mini 16GB Wi-Fi (Black) 
 Apple iPad mini 16GB Wi-Fi (White) 
 Apple iPad mini 16GB Wi-Fi + Cellular (Black) 
</snippet></ROW><ROW><id>16848108</id><snippet>keys = [key for key, value in dict1.items() if not value]

if len(keys) != len(dict1):
    # Do something about the mis-match
</snippet></ROW><ROW><id>16848149</id><snippet>x = [None]*5
board = [x for i in range(5)]
</snippet></ROW><ROW><id>16848149</id><snippet>board = [[None]*5 for i in range(5)]
</snippet></ROW><ROW><id>16848245</id><snippet>#your old code:
while player.isAlive() == True and opponent.isAlive() == True:
    print(player)
    print(opponent)
    player.attack(opponent) #called once here
    player.isAlive()
    opponent.isAlive()
    if not player.attack(opponent):#called 2nd time here
        print("You lost")
    else:
        print("You won")
print("Game Over")
</snippet></ROW><ROW><id>16848245</id><snippet>while player.isAlive() and opponent.isAlive():
    print(player)
    print(opponent)
    player_attack_was_successful = player.attack(opponent)
    #player.isAlive() #(does this line even do anything?)
    #opponent.isAlive()
    if player_attack_was_successful:
        print("You won")
    else:
        print("You lost")
print("Game Over")
</snippet></ROW><ROW><id>16848344</id><snippet>def chooseBest(s):
    if not s:
        return None
    best = chooseBest(s[1:])
    return s[0] if s[0] &gt; best else best
</snippet></ROW><ROW><id>16848344</id><snippet>def chooseBest(s):
    return max(s[0], chooseBest(s[1:])) if s else None
</snippet></ROW><ROW><id>16848344</id><snippet>None</snippet></ROW><ROW><id>16848344</id><snippet>chooseBest([1, 2, 5, 3, 4])
=&gt; 5

chooseBest(['a', 'b', 'z', 'c', 'd'])
=&gt; 'z'
</snippet></ROW><ROW><id>16848410</id><snippet>Keep Directory Synced to Editor</snippet></ROW><ROW><id>16848422</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>16848422</id><snippet>&gt;&gt;&gt; strs = "log:A 22 log:B 44 log:C 74 log:D 24 log:B 10"
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dic = defaultdict(int)
&gt;&gt;&gt; it = iter(strs.split())
&gt;&gt;&gt; for k in it:
...     dic[k] += int(next(it)) 
...     
&gt;&gt;&gt; for k,v in sorted(dic.items(), key = lambda x: x[1], reverse = True):
...     print k,v
...     
log:C 74
log:B 54
log:D 24
log:A 22
</snippet></ROW><ROW><id>16848422</id><snippet>&gt;&gt;&gt; sorted(dic.items(), key = lambda x: x[1], reverse = True)
[('log:C', 74), ('log:B', 54), ('log:D', 24), ('log:A', 22)]
</snippet></ROW><ROW><id>16848422</id><snippet>&gt;&gt;&gt; mylist = [('log:A', '1009.2'), ('log:B', '938.1'), ('log:C', '925.7'), ('log:C', '925.7')]
&gt;&gt;&gt; dic = defaultdict(int)
&gt;&gt;&gt; for k,v in mylist:                                                                        
       dic[k] += float(v)
...     
&gt;&gt;&gt; sorted(dic.items(), key = lambda x: x[1], reverse = True)
[('log:C', 1851.4), ('log:A', 1009.2), ('log:B', 938.1)]
</snippet></ROW><ROW><id>16848694</id><snippet>if n &gt;= 720 and n &lt; 1000:
    gt = 2*(( n - 720 ) / 20) + 41
elif n &gt;= 1000 and n &lt; 2000:
    gt = 3*(( n - 1000 ) / 20) + 67
</snippet></ROW><ROW><id>16848978</id><snippet>PyQT</snippet></ROW><ROW><id>16848978</id><snippet>QtDesigner</snippet></ROW><ROW><id>16848978</id><snippet>c++</snippet></ROW><ROW><id>16848978</id><snippet>python</snippet></ROW><ROW><id>16848978</id><snippet>PyQWT</snippet></ROW><ROW><id>16848978</id><snippet>python</snippet></ROW><ROW><id>16848978</id><snippet>c++</snippet></ROW><ROW><id>16848978</id><snippet>PyQt4</snippet></ROW><ROW><id>16849025</id><snippet>GList</snippet></ROW><ROW><id>16849025</id><snippet>%module MyModule

%inline %{
#include "Glist.h"
#include "functions.h"
%}
</snippet></ROW><ROW><id>16849025</id><snippet>&gt;&gt;&gt; import MyModule
&gt;&gt;&gt; glist = MyModule.GList()
&gt;&gt;&gt; glist.some_field = some_value
&gt;&gt;&gt; glist.some_other_field = some_value
&gt;&gt;&gt; MyModule.some_function(glist)
</snippet></ROW><ROW><id>16849025</id><snippet>GList</snippet></ROW><ROW><id>16849025</id><snippet>typemap</snippet></ROW><ROW><id>16849293</id><snippet>del self.scheduler
</snippet></ROW><ROW><id>16849293</id><snippet>if self.depth &lt; 5:
</snippet></ROW><ROW><id>16849427</id><snippet>In [1]: import pandas as pd

In [2]: df = pd.DataFrame({'bookId': [1,1,2,2,3,3,3,4,4,4,4,4],
   ...:                  'readerId': [1,2,1,3,1,3,4,1,3,4,5,6]})

In [3]: res = pd.DataFrame(np.unique(df.readerId)).reset_index(drop=True)

In [4]: def get_readers(reader, df=df):
    ...:     return len(set(df.readerId[df.bookId.isin(df.bookId[
    ...:                                     df.readerId==reader])]))-1

In [5]: res['Count'] = res.readerId.apply(get_readers)

In [6]: res
Out[6]: 
   readerId  Count
0         1      5
1         2      1
2         3      4
3         4      4
4         5      4
5         6      4

In [7]: timeit get_readers(1)
1000 loops, best of 3: 387 us per loop
</snippet></ROW><ROW><id>16849455</id><snippet>def traverse(path):
    for root, dirs, files in os.walk(path):
        print(root)

        # if you want files too: 
        for f in files: 
            print(os.path.join(root, f))
</snippet></ROW><ROW><id>16849456</id><snippet>chardet</snippet></ROW><ROW><id>16849456</id><snippet>sudo apt-get install python3-chardet
</snippet></ROW><ROW><id>16849456</id><snippet>pip install chardet2 
</snippet></ROW><ROW><id>16849747</id><snippet>re.compile('(?:&lt;[^&gt;]*&gt;\s*)+(.+?)(?:&lt;[^&gt;]*&gt;\s*)+',re.I|re.S)
</snippet></ROW><ROW><id>16849850</id><snippet>next</snippet></ROW><ROW><id>16849850</id><snippet>prev</snippet></ROW><ROW><id>16849850</id><snippet>eventNode</snippet></ROW><ROW><id>16849850</id><snippet>next</snippet></ROW><ROW><id>16849850</id><snippet>NULL</snippet></ROW><ROW><id>16849850</id><snippet>prev</snippet></ROW><ROW><id>16849850</id><snippet>LP_eventNode</snippet></ROW><ROW><id>16849850</id><snippet>Structure</snippet></ROW><ROW><id>16849850</id><snippet>from ctypes import *

class eventNode(Structure):
    pass

eventNode._fields_ = [
    ("channels", c_int),
    ("samples", c_int),
    ("event", POINTER(POINTER(c_uint16))),
    ("next", POINTER(eventNode)),
    ("prev", POINTER(eventNode)),
]
</snippet></ROW><ROW><id>16849850</id><snippet>_fields_</snippet></ROW><ROW><id>16849850</id><snippet>tuple</snippet></ROW><ROW><id>16849850</id><snippet>list</snippet></ROW><ROW><id>16849850</id><snippet>CField</snippet></ROW><ROW><id>16850053</id><snippet>main()</snippet></ROW><ROW><id>16850053</id><snippet>main()</snippet></ROW><ROW><id>16850053</id><snippet>while</snippet></ROW><ROW><id>16850053</id><snippet>def main():
  while True:
      print "*******Welcome to the MACRONUTRIENT CALCULATOR********"
      calorie_deficit = float(input("Enter your calorie deficit: "))
      Percent_protein = float(input("Percentage of Protein: "))
      Percent_carb = float(input("Percent of Carbohydrates: "))
      Percent_fat = float(input("Percentage of Fats: "))
      Macro_dict = {'Protein': Percent_protein, 'Carbohydrate': Percent_carb, 'Fats': Percent_fat}
      Macro_sum = Percent_protein + Percent_carb + Percent_fat
      if not Total_Macro_Check(Macro_sum):
          continue
      Macro_percentage_to_calorie(calorie_deficit, Percent_protein, Percent_carb, Percent_fat)


def Total_Macro_Check(total_val):
  if total_val &gt; 100:
    print "Total percentages surpassed 100! Please reenter percentages."
    return False
  if total_val &lt; 100:
    print "Total precentages is less than 100! Please reenter precentages."
    return False
  return True
</snippet></ROW><ROW><id>16850292</id><snippet>imp.load_source</snippet></ROW><ROW><id>16850292</id><snippet>&gt;&gt;&gt; import imp
&gt;&gt;&gt; mod = imp.load_source("test", "test")
hello world
&gt;&gt;&gt; mod.a
1
</snippet></ROW><ROW><id>16850292</id><snippet>print "hello world"
a = 1 
</snippet></ROW><ROW><id>16850375</id><snippet>def getMessageAuthor():
    author_id = []
    # get a list of ids and author_ids for every message
    for author in coll_message.find():
        author_id.append( (author['_id'], author['author_id']))
    # iterate through every author_ids to find the corresponding username
    for id, item in author_id:
        message = coll_message.find_one({"_id": id}, {"text": 1, "pub_date": 1})
        author = coll_user.find_one({"_id": item}, {"username": 1})
        merged = dict(chain((message.items() + author.items())))
</snippet></ROW><ROW><id>16850415</id><snippet>sudo</snippet></ROW><ROW><id>16850415</id><snippet>./uireplace</snippet></ROW><ROW><id>16850428</id><snippet>,</snippet></ROW><ROW><id>16850428</id><snippet>0</snippet></ROW><ROW><id>16850428</id><snippet>chicago = growth(chicago, 0.0065)
</snippet></ROW><ROW><id>16850717</id><snippet>class ModelUtils(object):
    def to_dict(self):
        result = super(ModelUtils,self).to_dict()
        result['key'] = self.key
        return result
</snippet></ROW><ROW><id>16850717</id><snippet>class MyModel(ModelUtils,ndb.Model):
    # some properties etc...
</snippet></ROW><ROW><id>16851079</id><snippet>d = {'_exp': -3, '_is_special': False, '_int': '3000', '_sign': 0}
</snippet></ROW><ROW><id>16851079</id><snippet>k[0]['unitweight']
</snippet></ROW><ROW><id>16851079</id><snippet>import math  
math.copysign(int(d['_int']) ** d['_exp'], d['_sign'] * -1)
</snippet></ROW><ROW><id>16851079</id><snippet>3.7037037037037036e-11
</snippet></ROW><ROW><id>16851079</id><snippet>'_is_special'</snippet></ROW><ROW><id>16851328</id><snippet>In [128]: L
Out[128]: [9, 8, 7, 6, 5, 4, 3, 2, 1]
</snippet></ROW><ROW><id>16851328</id><snippet>In [129]: L.sort()    
In [130]: L
Out[130]: [1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>16851328</id><snippet>In [131]: for lower, upper in zip(L[:-1], L[1:]):
   .....:     if lower &lt;= 2.44 &lt;= upper:
   .....:         print(lower, upper)
   .....:         break
   .....:         
2 3
</snippet></ROW><ROW><id>16851328</id><snippet>if lower &lt;= 2.44 &lt;= upper</snippet></ROW><ROW><id>16851499</id><snippet>input()</snippet></ROW><ROW><id>16851499</id><snippet>raw_input()</snippet></ROW><ROW><id>16851499</id><snippet>answer = raw_input("Are you done using the calculator?(y/n)")
</snippet></ROW><ROW><id>16851499</id><snippet>input()</snippet></ROW><ROW><id>16851499</id><snippet>eval()</snippet></ROW><ROW><id>16851499</id><snippet>y</snippet></ROW><ROW><id>16851499</id><snippet>&gt;&gt;&gt; input('Enter a python expression: ')
Enter a python expression: 1 + 1
2
&gt;&gt;&gt; input('Enter a python expression: ')
Enter a python expression: y
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1, in &lt;module&gt;
NameError: name 'y' is not defined
&gt;&gt;&gt; input('Enter a python expression: ')
Enter a python expression: 'y'
'y'
</snippet></ROW><ROW><id>16851499</id><snippet>'y'</snippet></ROW><ROW><id>16851499</id><snippet>raw_input()</snippet></ROW><ROW><id>16851499</id><snippet>&gt;&gt;&gt; raw_input('Enter the second-last letter of the alphabet: ')
Enter the second-last letter of the alphabet: y
'y'
</snippet></ROW><ROW><id>16851992</id><snippet>adb shell sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from 'system' where name = 'volume_alarm';"
</snippet></ROW><ROW><id>16851992</id><snippet>adb shell sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select name, value from 'system';"
</snippet></ROW><ROW><id>16852570</id><snippet>missing_value</snippet></ROW><ROW><id>16852570</id><snippet>missing_value</snippet></ROW><ROW><id>16852570</id><snippet>import numpy as np
value = precipitationVariable[:]
mask = (value &lt; -99999.98) &amp; (value &gt; -100000.00) 
value = np.ma.MaskedArray(value, mask=mask)
</snippet></ROW><ROW><id>16852961</id><snippet>def filtering(a_list):
    results = []
    for i, item in enumerate(a_list):
        if re.search(r'\d{0,1}\s+Contacts;\s*', item) is not None:
            results.extend(a_list[i+1:i+6])
</snippet></ROW><ROW><id>16853161</id><snippet>In [31]: df
Out[31]: 
   a        time
0  1  2013-01-01
1  2  2013-01-02
2  3  2013-01-03

In [32]: df['time'] = df['time'].astype('datetime64[ns]')

In [33]: df
Out[33]: 
   a                time
0  1 2013-01-01 00:00:00
1  2 2013-01-02 00:00:00
2  3 2013-01-03 00:00:00
</snippet></ROW><ROW><id>16853487</id><snippet>my_modules</snippet></ROW><ROW><id>16853487</id><snippet>__init__.py</snippet></ROW><ROW><id>16853487</id><snippet>__init__.py</snippet></ROW><ROW><id>16853487</id><snippet>__all__</snippet></ROW><ROW><id>16853487</id><snippet>__all__ = []

import pkgutil
import inspect

for loader, name, is_pkg in pkgutil.walk_packages(__path__):
    module = loader.find_module(name).load_module(name)

    for name, value in inspect.getmembers(module):
        if name.startswith('__'):
            continue

        globals()[name] = value
        __all__.append(name)
</snippet></ROW><ROW><id>16853487</id><snippet>from my_modules.class1 import Stuff
</snippet></ROW><ROW><id>16853487</id><snippet>from my_modules import Stuff
</snippet></ROW><ROW><id>16853487</id><snippet>from my_modules import *
</snippet></ROW><ROW><id>16853487</id><snippet>Foo</snippet></ROW><ROW><id>16853491</id><snippet>&gt;&gt;&gt; myList = [(1,2,3,4,5,6),(4,5,6,7,8)]
&gt;&gt;&gt; dic = {1:3}
&gt;&gt;&gt; [ (dic.get(x[0],x[0]),) + x[1:] for x in myList]
[(3, 2, 3, 4, 5, 6), (4, 5, 6, 7, 8)]
</snippet></ROW><ROW><id>16853491</id><snippet>myList</snippet></ROW><ROW><id>16853491</id><snippet>&gt;&gt;&gt; myList = [[1,2,3,4,5,6],[4,5,6,7,8]]
&gt;&gt;&gt; [ [dic.get(x[0],x[0]) ] + x[1:] for x in myList]
[[3, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8]]
</snippet></ROW><ROW><id>16853491</id><snippet>&gt;&gt;&gt; myList[:] = [(dic.get(x[0],x[0]),) + x[1:] for x in myList]
&gt;&gt;&gt; myList
[(3, 2, 3, 4, 5, 6), (4, 5, 6, 7, 8)]
</snippet></ROW><ROW><id>16853799</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>16853799</id><snippet>&lt;</snippet></ROW><ROW><id>16853799</id><snippet>$ ./manage.py shell &lt; myscript.py
</snippet></ROW><ROW><id>16853799</id><snippet>$ ./manage.py shell
...
&gt;&gt;&gt; execfile('myscript.py')
</snippet></ROW><ROW><id>16853810</id><snippet>printf</snippet></ROW><ROW><id>16853810</id><snippet>print</snippet></ROW><ROW><id>16853962</id><snippet>with open("testseqs.fasta", "r") as fasta, open("cleanseqs.tax", "w") as tax:
    while True:
        ...
</snippet></ROW><ROW><id>16854161</id><snippet>df.index.month</snippet></ROW><ROW><id>16854161</id><snippet>df[np.in1d(df.index.month, [1, 2, 3, 10, 11, 12])]
</snippet></ROW><ROW><id>16854225</id><snippet>_createHash()</snippet></ROW><ROW><id>16854225</id><snippet>hash_1 = models.CharField(max_length=10,default=_createHash,unique=True)
</snippet></ROW><ROW><id>16854252</id><snippet>$ ./configure
$ make
$ sudo make install
</snippet></ROW><ROW><id>16854457</id><snippet>int()</snippet></ROW><ROW><id>16854457</id><snippet>ValueError</snippet></ROW><ROW><id>16854457</id><snippet>try/except</snippet></ROW><ROW><id>16854457</id><snippet>for lines in luku:
    split = lines.split("\t")
    if "c-sarja" in split and "F" in split[2]:
        try:
            age = int(split[8])
        except ValueError:
            continue          # Skip to the next iteration
       if age &gt;= 50:
            old_lady = lines
            print split[0], ": OLD," " AGE:", age, "years"
</snippet></ROW><ROW><id>16854594</id><snippet>set_major_locator</snippet></ROW><ROW><id>16854594</id><snippet>my_xaxis.set_major_locator(FixedLocator([x * 1E13 for x in range(1,10)]))
</snippet></ROW><ROW><id>16854594</id><snippet>labels = FixedFormatter(['{:5.2e}'.format(x * 1E13) for x in range(1,10)])
my_xaxis.set_major_formatter(labels)
</snippet></ROW><ROW><id>16854644</id><snippet>print '{myvariable} {another}'.format(**locals())
</snippet></ROW><ROW><id>16854644</id><snippet>def f(s, *args, **kwargs):
    frame = sys._getframe(1)
    d = {}
    d.update(frame.f_globals)
    d.update(frame.f_locals)    
    d.update(kwargs)
    return Formatter().vformat(s, args, d)    
</snippet></ROW><ROW><id>16854644</id><snippet>myvariable = 'whatever'
another = 'something else'

print f('{myvariable} {another}')
</snippet></ROW><ROW><id>16854868</id><snippet>class ReportForm(forms.ModelForm):   
    manual_date = forms.DateField(input_formats=['%m/%d/%Y','%d/%m/%Y'],
                      widget=forms.DateInput(attrs={'size':'15','id':'datepicker'},format=["%m/%d/%Y","%d/%m/%Y"]))
    manual_time = forms.TimeField(input_formats=['%H:%M','%I:%M %p'],
                      widget=forms.TimeInput(attrs={'size':'8','class':'time_field'},format=["%H:%M","%I:%M %p"]))
</snippet></ROW><ROW><id>16854953</id><snippet>defer</snippet></ROW><ROW><id>16854953</id><snippet>select</snippet></ROW><ROW><id>16854953</id><snippet>Videos.objects.filter(...).defer('duration')
</snippet></ROW><ROW><id>16855093</id><snippet>models.py</snippet></ROW><ROW><id>16855449</id><snippet>myvar1</snippet></ROW><ROW><id>16855449</id><snippet>mydict</snippet></ROW><ROW><id>16855449</id><snippet>myvar1</snippet></ROW><ROW><id>16855449</id><snippet>myvar1 = 1
mydict = {1: ['apple', 20, 80, 40],
          2: ['orange', 81, 400, 100]}
</snippet></ROW><ROW><id>16855581</id><snippet>class First(object):
    def __init__(self):
        super(First, self).__init__()
        print "first"

class Second(object):
    def __init__(self):
        super(Second, self).__init__()
        print "second"

class Third(First, Second):
    def __init__(self):
        super(Third, self).__init__()
        print "that's it"
</snippet></ROW><ROW><id>16855609</id><snippet>with open('.htaccess') as fin, open('.htaccess-new', 'w') as fout:
    for line in fin:
        if line.strip() == '&lt;/IfModule&gt;':
            fout.write('some stuff before the line\n')
        fout.write(line)
</snippet></ROW><ROW><id>16855609</id><snippet>import fileinput

for line in fileinput.input('.htaccess', inplace=True):
    if line.strip() == '&lt;/IfModule&gt;':
        print 'some stuff before the line'
    print line,
</snippet></ROW><ROW><id>16855784</id><snippet>x = np.array([2,3,6,100,2,3,5,8,100,100,5])
y = np.array([2,3,4,5,5,5,2,1,0,2,4])
</snippet></ROW><ROW><id>16856289</id><snippet>gen()</snippet></ROW><ROW><id>16856289</id><snippet>g = gen()
a, b = next(g)
</snippet></ROW><ROW><id>16856289</id><snippet>list</snippet></ROW><ROW><id>16856289</id><snippet>g = gen();
def yield_g():
    yield g.next();
    k1,k2 = yield_g();
</snippet></ROW><ROW><id>16856289</id><snippet>list(k1)</snippet></ROW><ROW><id>16856289</id><snippet>[0,1,2,3,4]</snippet></ROW><ROW><id>16856289</id><snippet>list(k2)</snippet></ROW><ROW><id>16856289</id><snippet>[1,2,3,4,5]</snippet></ROW><ROW><id>16856289</id><snippet>izip</snippet></ROW><ROW><id>16856289</id><snippet>from itertools import izip
k1, k2 = izip(*gen())
</snippet></ROW><ROW><id>16856730</id><snippet>cursor.execute('INSERT INTO images VALUES(?)', (img,))
</snippet></ROW><ROW><id>16856730</id><snippet>(img)</snippet></ROW><ROW><id>16856730</id><snippet>img</snippet></ROW><ROW><id>16856730</id><snippet>&gt;&gt;&gt; len(img)
74
&gt;&gt;&gt; len((img,))
1
</snippet></ROW><ROW><id>16856767</id><snippet>wordCheck = raw_input("please enter the word you would like to check the spelling of: ")
with open("words.txt", "r") as f:
    found = False    
    for line in f:
        if line.strip() == wordCheck:
            print ('That is the correct spelling for '+ wordCheck)
            found = True
            break
    if not found:
        print ( wordCheck+ " is not in our dictionary")
</snippet></ROW><ROW><id>16856768</id><snippet>split_line = line.split('\x1c')
</snippet></ROW><ROW><id>16856977</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>16856977</id><snippet>&gt;&gt;&gt; literal_eval('''\
... {
...     "list": [
...         "this_keyword_in_ascii",
...         u"\u0627\u0644\u0623\u0633\u062f",                  # unicoded arabic
...         u"\u0633\u0648\u0631\u064a\u0627",
...         u"\u0627\u0644\u0625\u0631\u0647\u0627\u0628"
...     ]
... }
... ''')
{'list': ['this_keyword_in_ascii', u'\u0627\u0644\u0623\u0633\u062f', u'\u0633\u0648\u0631\u064a\u0627', u'\u0627\u0644\u0625\u0631\u0647\u0627\u0628']}
</snippet></ROW><ROW><id>16856977</id><snippet>u""</snippet></ROW><ROW><id>16856977</id><snippet>json.dumps()</snippet></ROW><ROW><id>16856977</id><snippet>print</snippet></ROW><ROW><id>16856977</id><snippet>str()</snippet></ROW><ROW><id>16856977</id><snippet>repr()</snippet></ROW><ROW><id>16857067</id><snippet>__subclassess__</snippet></ROW><ROW><id>16857067</id><snippet>__subclassess__</snippet></ROW><ROW><id>16857193</id><snippet>hex()</snippet></ROW><ROW><id>16857193</id><snippet>&gt;&gt;&gt; sample="MyTest1234"
&gt;&gt;&gt; print hex(len(sample))
0xa
&gt;&gt;&gt; sample="MyTest1234"*26
&gt;&gt;&gt; print hex(len(sample))
0x104
</snippet></ROW><ROW><id>16857193</id><snippet>0x</snippet></ROW><ROW><id>16857193</id><snippet>&gt;&gt;&gt; print hex(len(sample))[2:]
a
</snippet></ROW><ROW><id>16857239</id><snippet>lambda</snippet></ROW><ROW><id>16857239</id><snippet>p = lambda x: (lambda x: x%2)(x)/2
</snippet></ROW><ROW><id>16857239</id><snippet>0</snippet></ROW><ROW><id>16857239</id><snippet>2</snippet></ROW><ROW><id>16857239</id><snippet>0</snippet></ROW><ROW><id>16857239</id><snippet>1</snippet></ROW><ROW><id>16857239</id><snippet>2</snippet></ROW><ROW><id>16857239</id><snippet>0</snippet></ROW><ROW><id>16857402</id><snippet>object()</snippet></ROW><ROW><id>16857402</id><snippet>object</snippet></ROW><ROW><id>16857402</id><snippet># Python 2.7
&gt;&gt;&gt; class A(object): pass
&gt;&gt;&gt; r = A()
&gt;&gt;&gt; d = {1: r}
&gt;&gt;&gt; del r
&gt;&gt;&gt; gc.get_referrers(d[1])
[{1: &lt;__main__.A instance at 0x0000000002663708&gt;}]
</snippet></ROW><ROW><id>16857575</id><snippet>tax2 = int( input("How Much Will You Tax Per Person In Dollars? ") )
</snippet></ROW><ROW><id>16857575</id><snippet>tax2 = float( input("How Much Will You Tax Per Person In Dollars? ") )
</snippet></ROW><ROW><id>16857575</id><snippet>taxf = round( float( input("How Much Will You Tax Per Person In Dollars? ") ) )
tax2 = int( taxf )
</snippet></ROW><ROW><id>16857755</id><snippet>np.bincount</snippet></ROW><ROW><id>16857755</id><snippet>weights</snippet></ROW><ROW><id>16857755</id><snippet>np.bincount(accmap, weights=a)
</snippet></ROW><ROW><id>16857854</id><snippet>import pandas as pd
import numpy as np
import itertools

a = pd.Series([1, 2, 3, np.nan, 4, np.nan, np.nan, np.nan, 5, np.nan, np.nan])
len_holes = [len(list(g)) for k, g in itertools.groupby(a, lambda x: np.isnan(x)) if k]
print len_holes
</snippet></ROW><ROW><id>16857854</id><snippet>[1, 3, 2]
</snippet></ROW><ROW><id>16857861</id><snippet>myFile = open('/tmp/result.file', 'w') # or 'a' to add text instead of truncate
myFile.write('whatever')
myFile.close()
</snippet></ROW><ROW><id>16857861</id><snippet>myFile = open($prjFile, 'a') # 'a' because you want to add to the existing file
myFile.write('ServerName www.{hostname}'.format(hostname=hostname))
myFile.close()
</snippet></ROW><ROW><id>16857901</id><snippet>.pfx</snippet></ROW><ROW><id>16858257</id><snippet>coverage run /the/test/runner options to test runner
</snippet></ROW><ROW><id>16858257</id><snippet>--source=thepackage</snippet></ROW><ROW><id>16858283</id><snippet>reshape</snippet></ROW><ROW><id>16858283</id><snippet>swapaxes</snippet></ROW><ROW><id>16858283</id><snippet>import numpy as np
def blockshaped(arr, nrows, ncols):
    """
    Return an array of shape (n, nrows, ncols) where
    n * nrows * ncols = arr.size

    If arr is a 2D array, the returned array should look like n subblocks with
    each subblock preserving the "physical" layout of arr.
    """
    h, w = arr.shape
    return (arr.reshape(h//nrows, nrows, -1, ncols)
               .swapaxes(1,2)
               .reshape(-1, nrows, ncols))
</snippet></ROW><ROW><id>16858283</id><snippet>c</snippet></ROW><ROW><id>16858283</id><snippet>c = np.arange(24).reshape((4,6))
print(c)
# [[ 0  1  2  3  4  5]
#  [ 6  7  8  9 10 11]
#  [12 13 14 15 16 17]
#  [18 19 20 21 22 23]]
</snippet></ROW><ROW><id>16858283</id><snippet>print(blockshaped(c, 2, 3))
# [[[ 0  1  2]
#   [ 6  7  8]]

#  [[ 3  4  5]
#   [ 9 10 11]]

#  [[12 13 14]
#   [18 19 20]]

#  [[15 16 17]
#   [21 22 23]]]
</snippet></ROW><ROW><id>16858283</id><snippet>unblockshaped</snippet></ROW><ROW><id>16858500</id><snippet>get_absolute_url</snippet></ROW><ROW><id>16858500</id><snippet>None</snippet></ROW><ROW><id>16858500</id><snippet>view</snippet></ROW><ROW><id>16858547</id><snippet>LOCALE_PATHS</snippet></ROW><ROW><id>16858628</id><snippet>join</snippet></ROW><ROW><id>16858628</id><snippet>', '.join(str(x) for x in iterable)
</snippet></ROW><ROW><id>16858628</id><snippet>', '.join(map(str,iterable))
', '.join([str(x) for x in iterable])
</snippet></ROW><ROW><id>16858628</id><snippet>str.join</snippet></ROW><ROW><id>16859091</id><snippet>.classes_</snippet></ROW><ROW><id>16859091</id><snippet>&gt;&gt;&gt; clf.classes_
array(['one', 'three', 'two'], 
      dtype='|S5')
</snippet></ROW><ROW><id>16859319</id><snippet>class XMLMenu(Menu):
    def __init__(self,master,text, **kw):
        Menu.__init__(self, master, kw)
        master.config(menu=self)
        # ...
</snippet></ROW><ROW><id>16859403</id><snippet>_target</snippet></ROW><ROW><id>16859403</id><snippet>&lt;a href="/path/to/download/file" target="downloadIframe"&gt;Download file&lt;/a&gt;
&lt;iframe id="downloadIframe"&gt;&lt;/iframe&gt;
</snippet></ROW><ROW><id>16859403</id><snippet>var slice = Array.prototype.slice;

var links = document.querySelectorAll("[target='downloadIframe']"),
    iframe = document.getElementById("downloadIframe");
slice.call(links).forEach(function(link) {
    link.addEventListener("click", reloadPageOnIframeLoad);
});

function reloadPageOnIframeLoad() {
    // Reset this for each click on a download link
    // rather than adding another event listener each time.
    iframe.onload = function() { window.location.reload(); };
}
</snippet></ROW><ROW><id>16859479</id><snippet>Content-Encoding: gzip</snippet></ROW><ROW><id>16859479</id><snippet>zlib</snippet></ROW><ROW><id>16859479</id><snippet>import zlib

decomp = zlib.decompressobj(16 + zlib.MAX_WBITS)
data = decomp.decompress(val)
</snippet></ROW><ROW><id>16859479</id><snippet>requests</snippet></ROW><ROW><id>16859568</id><snippet>http</snippet></ROW><ROW><id>16859568</id><snippet>http.client</snippet></ROW><ROW><id>16859568</id><snippet>__init__.py</snippet></ROW><ROW><id>16859587</id><snippet>def delPage(self, pageTitle):
    for index in range(self.dataNoteBook.GetPageCount()):
        if self.dataNoteBook.GetPageText(index) == pageTitle:
            self.dataNoteBook.DeletePage(index)
            self.dataNoteBook.SendSizeEvent()
            break
</snippet></ROW><ROW><id>16859944</id><snippet>from time import sleep
from threading import Thread
from Queue import Queue

class DispatcherThread(Thread):

   def __init__(self, *args, **kwargs):
       super(DispatcherThread, self).__init__(*args, **kwargs)
       self.interested_threads = []

   def run(self):
       while 1:
           if some_condition:
               self.dispatch_message(some_message)
           else:
               sleep(0.1)

   def register_interest(self, thread):
       self.interested_threads.append(thread)

   def dispatch_message(self, message):
       for thread in self.interested_threads:
           thread.put_message(message)



class WorkerThread(Thread):

   def __init__(self, *args, **kwargs):
       super(WorkerThread, self).__init__(*args, **kwargs)
       self.queue = Queue()


   def run(self):

       # Tell the dispatcher thread we want messages
       dispatcher_thread.register_interest(self)

       while 1:
           # Wait for next message
           message = self.queue.get()

           # Process message
           # ...

   def put_message(self, message):
       self.queue.put(message)


dispatcher_thread = DispatcherThread()
dispatcher_thread.start()

worker_threads = []
for i in range(10):
    worker_thread = WorkerThread()
    worker_thread.start()
    worker_threads.append(worker_thread)

dispatcher_thread.join()
</snippet></ROW><ROW><id>16859991</id><snippet>L = [(1,0,0), (1,1,0)]

def make_vars(L):
    for i, item in enumerate(L, start=1):
        globals()['t{0}'.format(i)] = item

make_vars(L)
print(t1)
# (1, 0, 0)
</snippet></ROW><ROW><id>16859991</id><snippet>t1</snippet></ROW><ROW><id>16859991</id><snippet>t10</snippet></ROW><ROW><id>16859991</id><snippet>def make_vars2(L):
    return dict(enumerate(L, start=1))

t = make_vars2(L)
print(t[1])
# (1, 0, 0)
</snippet></ROW><ROW><id>16859991</id><snippet>dict</snippet></ROW><ROW><id>16859991</id><snippet>t</snippet></ROW><ROW><id>16859991</id><snippet>t</snippet></ROW><ROW><id>16859991</id><snippet>t.keys()</snippet></ROW><ROW><id>16859991</id><snippet>dict</snippet></ROW><ROW><id>16859991</id><snippet>L</snippet></ROW><ROW><id>16859991</id><snippet>L</snippet></ROW><ROW><id>16859991</id><snippet>L[i]</snippet></ROW><ROW><id>16859991</id><snippet>t[i+1]</snippet></ROW><ROW><id>16859991</id><snippet>In [3]: %timeit t[1]
10000000 loops, best of 3: 66.1 ns per loop

In [4]: %timeit L[0]
10000000 loops, best of 3: 42.8 ns per loop
</snippet></ROW><ROW><id>16860024</id><snippet>values_list</snippet></ROW><ROW><id>16860024</id><snippet>user_dict = dict((d[0], [d[1], d[2]]) for d in 
                 user_data.values_list('id', 'name', 'reporting_time'))
</snippet></ROW><ROW><id>16860115</id><snippet>&gt;&gt;&gt; that[~(that&gt;=5).nonzero()].max().eval()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: bad operand type for unary ~: 'tuple'
</snippet></ROW><ROW><id>16860115</id><snippet>&gt;&gt;&gt; that[(~(that&gt;=5)).nonzero()].max().eval()
array(9, dtype=int32)
</snippet></ROW><ROW><id>16860115</id><snippet>&gt;&gt;&gt; (that&gt;=5).eval()
array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1], dtype=int8)
&gt;&gt;&gt; (~(that&gt;=5)).eval()
array([-1, -1, -1, -1, -1, -2, -2, -2, -2, -2], dtype=int8)
</snippet></ROW><ROW><id>16860115</id><snippet>&gt;&gt;&gt; that[(that&lt;5).nonzero()].max().eval()
array(4, dtype=int32)
</snippet></ROW><ROW><id>16860192</id><snippet>"City, State"</snippet></ROW><ROW><id>16860192</id><snippet>INSERT INTO test VALUES (My String);
</snippet></ROW><ROW><id>16860192</id><snippet>INSERT INTO test VALUES ('My String');
</snippet></ROW><ROW><id>16860192</id><snippet>'My String'</snippet></ROW><ROW><id>16860192</id><snippet>loc = "City, State"
sql = "INSERT INTO test VALUES ('" + loc + "');"
</snippet></ROW><ROW><id>16860192</id><snippet>"'); DROP DATABASE test; -- "</snippet></ROW><ROW><id>16860192</id><snippet>INSERT INTO test VALUES(''); DROP DATABASE test; -- ');
</snippet></ROW><ROW><id>16860192</id><snippet>MySQLdb.escape_string(str)</snippet></ROW><ROW><id>16860192</id><snippet>loc = "'); DROP DATABASE test; -- "
loc = MySQLdb.escape_string(loc);
sql = "INSERT INTO test VALUES ('" + loc + "');"
</snippet></ROW><ROW><id>16860192</id><snippet>INSERT INTO test VALUES ('\'); DROP DATABASE test; -- ');
</snippet></ROW><ROW><id>16860755</id><snippet>with open('your/file') as file:
    line = file.readline()
    while line:
        rows = line.split('|')
        with open(rows[1].strip() + '.txt', 'a') as out:
            out.write(line)
        line = file.readline()
</snippet></ROW><ROW><id>16860884</id><snippet>t</snippet></ROW><ROW><id>16860884</id><snippet>sage: t
{1: (1, 0, 0, 0, 0, 0, 0, 0, 0), 2: (1, 1, 1, 1, 1, 1, 1, 1, 0)}
sage: map(type, t)
[int, int]
sage: map(type, t.values())
[sage.combinat.root_system.ambient_space.AmbientSpace_with_category.element_class,
 sage.combinat.root_system.ambient_space.AmbientSpace_with_category.element_class]
sage: parent(t[1])
Ambient space of the Root system of type ['A', 8]
</snippet></ROW><ROW><id>16860884</id><snippet>.to_vector()</snippet></ROW><ROW><id>16860884</id><snippet>sage: t[1]
(1, 0, 0, 0, 0, 0, 0, 0, 0)
sage: type(t[1])
&lt;class 'sage.combinat.root_system.ambient_space.AmbientSpace_with_category.element_class'&gt;
sage: list(t[1])
[(0, 1)]
</snippet></ROW><ROW><id>16860884</id><snippet>sage: t[1].to_vector()
(1, 0, 0, 0, 0, 0, 0, 0, 0)
sage: type(t[1].to_vector())
&lt;type 'sage.modules.vector_rational_dense.Vector_rational_dense'&gt;
sage: list(t[1].to_vector())
[1, 0, 0, 0, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>16860951</id><snippet>with open('firstfile.txt') as f:
    file1 = f.read().splitlines()

with open('secondfile.txt') as f:
    file2 = f.read().splitlines()

for x in file1:
    for y in file2:
        if x == y:
            print "Found matching: " + x
            #do what you want here
</snippet></ROW><ROW><id>16860959</id><snippet>In [28]: df = df.reset_index()

In [29]: df['b'] = df['b'].fillna('dummy')

In [30]: df['dummy'] = np.nan

In [31]: df
Out[31]: 
   a      b       c    d   e  dummy
0  a      b   12.00   12  12    NaN
1  a  dummy   12.30  233  12    NaN
2  b      a  123.23  123   1    NaN
3  a      b    1.00    1   1    NaN

In [32]: df.pivot_table(rows=['a', 'b'], values=['c', 'd', 'e'], aggfunc=sum)
Out[32]: 
              c    d   e
a b                     
a b       13.00   13  13
  dummy   12.30  233  12
b a      123.23  123   1

In [33]: df.pivot_table(rows=['a', 'b'], values=['c', 'd', 'e'], aggfunc=sum).reset_index().replace('dummy',np.nan).set_index(['a','b'])
Out[33]: 
            c    d   e
a b                   
a b     13.00   13  13
  NaN   12.30  233  12
b a    123.23  123   1
</snippet></ROW><ROW><id>16861078</id><snippet>time.sleep(3)
multi = threading.Thread(target=multithreading)
multi.start()
</snippet></ROW><ROW><id>16861078</id><snippet>import threading
import Queue
import time

def f(q):
    while True:
        print q.get() #block thread until something shows up

q = Queue.Queue()
t = threading.Thread(target=f,args=[q])
t.daemon = True #if parent dies, kill thread
t.start()
for x in range(0,1000):
    q.put(x)
    time.sleep(1)
</snippet></ROW><ROW><id>16861226</id><snippet>__init__</snippet></ROW><ROW><id>16861226</id><snippet>Bar</snippet></ROW><ROW><id>16861226</id><snippet>__init__</snippet></ROW><ROW><id>16861226</id><snippet>class Bar(foo.Foo):
    def __init__(self):
        super(Bar,self).__init__()
</snippet></ROW><ROW><id>16861226</id><snippet>Bar</snippet></ROW><ROW><id>16861226</id><snippet>Foo</snippet></ROW><ROW><id>16861342</id><snippet>get_group</snippet></ROW><ROW><id>16861342</id><snippet>In [1]: df = pd.DataFrame([[2, 4, 1], [2, 4, 2], [3, 4, 1]], columns=['A', 'B', 'C'])

In [2]: df
Out[2]:
   A  B  C
0  2  4  1
1  2  4  2
2  3  4  1

In [3]: g = df.groupby(['A', 'B'])

In [4]: g.get_group((2,4))
Out[4]:
   A  B  C
0  2  4  1
1  2  4  2
</snippet></ROW><ROW><id>16861488</id><snippet>marker</snippet></ROW><ROW><id>16861488</id><snippet>caretdown</snippet></ROW><ROW><id>16861488</id><snippet>Path</snippet></ROW><ROW><id>16861488</id><snippet>marker</snippet></ROW><ROW><id>16861488</id><snippet>$…$</snippet></ROW><ROW><id>16861488</id><snippet>…</snippet></ROW><ROW><id>16861488</id><snippet>\u2193</snippet></ROW><ROW><id>16861488</id><snippet>$\u2193$</snippet></ROW><ROW><id>16861488</id><snippet>Arrow</snippet></ROW><ROW><id>16861719</id><snippet># create default list dictionary:
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; data = defaultdict(list)
# Read your data into it:
&gt;&gt;&gt; from glob import glob
&gt;&gt;&gt; import csv
&gt;&gt;&gt; for filename in glob("my_directory/*csv"):
...    reader = csv.reader(open(filename))
...    # throw away header row:
...    reader.readrow()
...    for name, value in reader:
...       data[name].append(value)
... 
&gt;&gt;&gt; # and record everything down in another file:
... 
&gt;&gt;&gt; mydata = open("mydata.csv", "wt")
&gt;&gt;&gt; writer = csv.writer(mydata)
&gt;&gt;&gt; for name, values in sorted(data.items()):
...    writer.writerow([name] + values)
... 
&gt;&gt;&gt; mydata.close()
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16861846</id><snippet>render_to_response(template)</snippet></ROW><ROW><id>16861846</id><snippet>render_to_response(req)</snippet></ROW><ROW><id>16861846</id><snippet>return render_to_response('my_template.html',
                          my_data_dictionary,
                          context_instance=RequestContext(request))
</snippet></ROW><ROW><id>16861846</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>16861846</id><snippet>/home/damon/...</snippet></ROW><ROW><id>16861846</id><snippet>filesystem.Loader</snippet></ROW><ROW><id>16861846</id><snippet>TemplateResponse</snippet></ROW><ROW><id>16861846</id><snippet>render_to_response</snippet></ROW><ROW><id>16861928</id><snippet>{% for i,v in dest %}
</snippet></ROW><ROW><id>16861928</id><snippet>{% for i,v in dest.items %}
</snippet></ROW><ROW><id>16861989</id><snippet>global i</snippet></ROW><ROW><id>16861989</id><snippet>global</snippet></ROW><ROW><id>16861989</id><snippet>paste</snippet></ROW><ROW><id>16861992</id><snippet>import itertools as it
data = ['IND', 'MIA', '06:37 AM', '103', 'LA', 'SUN', '06:49 AM', '-150', '120']
g = it.groupby(data, str.isalpha)
[tuple(v)+tuple(next(g)[1]) for _, v in g]
</snippet></ROW><ROW><id>16862042</id><snippet>http://localhost:48392</snippet></ROW><ROW><id>16862042</id><snippet>http://localhost:8080</snippet></ROW><ROW><id>16862042</id><snippet>http://localhost:8000</snippet></ROW><ROW><id>16862128</id><snippet>unique_val</snippet></ROW><ROW><id>16862128</id><snippet>list_1</snippet></ROW><ROW><id>16862128</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dic = defaultdict(list)
&gt;&gt;&gt; nested_list = [['name1',1],['name2',1],['name3',3],['name4',2],['name5',2],['name6',3]]
&gt;&gt;&gt; unique_val = [1,2,3]     #better make this a set to get O(1) lookup
&gt;&gt;&gt; for v,k in nested_list:
        if k in unique_val:
            dic['list_'+str(k)].append(v)

#now access those lists:

&gt;&gt;&gt; dic['list_1']
['name1', 'name2']
&gt;&gt;&gt; dic['list_2']
['name4', 'name5']
&gt;&gt;&gt; dic['list_3']
['name3', 'name6']
</snippet></ROW><ROW><id>16862128</id><snippet>unique_val</snippet></ROW><ROW><id>16862128</id><snippet>list_4</snippet></ROW><ROW><id>16862128</id><snippet>defaultdict</snippet></ROW><ROW><id>16862128</id><snippet>&gt;&gt;&gt; dic['list_4']
[]
</snippet></ROW><ROW><id>16862129</id><snippet>xlwt.Worksheet.write(self, r, c, label='', style=&lt;xlwt.Style.XFStyle object at 0x053AEA10&gt;)
</snippet></ROW><ROW><id>16862129</id><snippet>write</snippet></ROW><ROW><id>16862129</id><snippet>style</snippet></ROW><ROW><id>16862129</id><snippet>Pattern</snippet></ROW><ROW><id>16862129</id><snippet>style</snippet></ROW><ROW><id>16862129</id><snippet>style</snippet></ROW><ROW><id>16862129</id><snippet>style.pattern = pattern
newSheet.write(row, col, values[row - 1][col], style)
</snippet></ROW><ROW><id>16862129</id><snippet>xlwt</snippet></ROW><ROW><id>16862189</id><snippet>import subprocess

hosts_file = open("hosts.txt","r")
lines = hosts_file.readlines()
hosts_file.close()

for line in lines:
    ping = subprocess.Popen(["ping", "-n", "3",line.strip()], stdout=subprocess.PIPE, stderr=subprocess.POPEN)
    with open('PingResults.txt', 'ab') as fh:
        for line in ping.stdout.readlines():
            fh.write(line)
    ping.stdout.close()
</snippet></ROW><ROW><id>16862189</id><snippet>[torxed@faparch ~]$ python test.py &amp;&amp; cat PingResults.txt 
PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.016 ms
64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.023 ms
64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.035 ms

--- 127.0.0.1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1999ms
rtt min/avg/max/mdev = 0.016/0.024/0.035/0.009 ms
PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.

--- 192.168.0.1 ping statistics ---
3 packets transmitted, 0 received, 100% packet loss, time 2008ms
</snippet></ROW><ROW><id>16862234</id><snippet>try...except</snippet></ROW><ROW><id>16862234</id><snippet>def makeInt(val, default=0):
    try: 
        return int(val)
    except ValueError:
        return default
</snippet></ROW><ROW><id>16862234</id><snippet>mic[k] += re.sub(' ^\d*:\d*','0',v)</snippet></ROW><ROW><id>16862234</id><snippet>mic[k] += makeInt(v)
</snippet></ROW><ROW><id>16862234</id><snippet>0</snippet></ROW><ROW><id>16862234</id><snippet>mic[k] += makeInt(v, 1)
</snippet></ROW><ROW><id>16862342</id><snippet>#!/usr/bin/python
import io
import re
f = open('/etc/ssh/sshd_config','r')

strings = re.search(r"^\s*[^#]*IgnoreRhosts\s+yes", f.read(), flags=re.MULTILINE)
print(strings.group(0))
</snippet></ROW><ROW><id>16862342</id><snippet>^</snippet></ROW><ROW><id>16862342</id><snippet>\n</snippet></ROW><ROW><id>16862342</id><snippet>^IgnoreRhosts\s+yes
</snippet></ROW><ROW><id>16862537</id><snippet>char</snippet></ROW><ROW><id>16862537</id><snippet>void largeNumToKeyboard(int num)</snippet></ROW><ROW><id>16862537</id><snippet>char</snippet></ROW><ROW><id>16862537</id><snippet>int</snippet></ROW><ROW><id>16862537</id><snippet>void largeNumToKeyboard(int num) {
    int a = num / 1296;
    int ar = num % 1296;
    int b = ar / 36;
    char c = ar % 36;

    a = numToKey(a);
    b = numToKey(b);
    c = numToKey(c);
    char newb = b;
    if(a == b){
        newb = 0x2D;
    }
    if(c == b){
        c = 0x2E;
    }
    printf("%d ",a);
    printf("%d ",newb);
    printf("%d\r\n",c);

}
</snippet></ROW><ROW><id>16862537</id><snippet>4 45 46
4 9 24
</snippet></ROW><ROW><id>16862592</id><snippet>&gt;&gt;&gt; b'\x12\x41\x42'
b'\x12AB'
</snippet></ROW><ROW><id>16862821</id><snippet>data[['b' + str(j) for j in range(10)]]
</snippet></ROW><ROW><id>16862913</id><snippet>myFile.write("""&lt;VirtualHost 192.168.75.100:80&gt;
               ServerName www.{hostName}
               ServerAlias {hostNameshort}.* www.{hostNameshort}.*
               DocumentRoot {prjDir}/html
               CustomLog "\"|/usr/sbin/cronolog /var/log/httpd/class/{prjCode}/\{hostName}.log.%Y%m%d\" urchin"
             &lt;/VirtualHost&gt;""".format(hostName=hn, hostNameshort=hns, prjDir=prjd, prjCode=prjc))
</snippet></ROW><ROW><id>16863071</id><snippet>import baseclass</snippet></ROW><ROW><id>16863071</id><snippet>import baseclass</snippet></ROW><ROW><id>16863071</id><snippet>baseclass.py</snippet></ROW><ROW><id>16863071</id><snippet>import</snippet></ROW><ROW><id>16863071</id><snippet>__name__ = "SubClass"</snippet></ROW><ROW><id>16863150</id><snippet>with open("test.fasta", "r") as fasta, open("test.tax", "w") as tax:
    for line in fasta:
        if line.startswith('&gt;'):
            line = line[1:]                   # remove the '&gt;' from start of line
            line = line.replace(' ', '\t', 1) # replace first space with a tab
            line = line.replace(' ', '_')     # replace remaining spaces with '_'
            line = line.strip() + ';\n'       # add ';' to the end
            tax.write(line)                   # write to the output file
</snippet></ROW><ROW><id>16863218</id><snippet>engine</snippet></ROW><ROW><id>16863218</id><snippet>custom_db_api</snippet></ROW><ROW><id>16863218</id><snippet>Base = declarative_base()

class Something(Base):
    pass

def initialize(engine):
    Something.__table__ = Table('something', Base.metadata, autoload_with=engine)
</snippet></ROW><ROW><id>16863218</id><snippet>sys.argv</snippet></ROW><ROW><id>16863218</id><snippet>import sys

Base = declarative_base()
if len(sys.argv) &gt; 1 and sys.argv[1] == '--use-alt-db':
    engine = create_engine('mysql://user:pass@alt_host/db_name')
else:
    engine = create_engine('mysql://user:pass@main_host/db_name')

table = Table('something', Base.metadata, autoload_with=engine)

class Something(Base):
    __table__ = table
</snippet></ROW><ROW><id>16863252</id><snippet>abs()</snippet></ROW><ROW><id>16863252</id><snippet>math.abs</snippet></ROW><ROW><id>16863252</id><snippet>abs</snippet></ROW><ROW><id>16863252</id><snippet>isinstance()</snippet></ROW><ROW><id>16863252</id><snippet>type()</snippet></ROW><ROW><id>16863252</id><snippet>def distance_from_zero(num):
    if isinstance(num, (int, float)):
        return abs(num)
    else:
        return "Not an integer or float!"
</snippet></ROW><ROW><id>16863252</id><snippet>long</snippet></ROW><ROW><id>16863252</id><snippet>complex</snippet></ROW><ROW><id>16863254</id><snippet>import numpy as np
import matplotlib.pyplot as plt

mu, sigma = 100, 15
x = mu + sigma * np.random.randn(10000)
fig = plt.figure()
ax = fig.add_subplot(111)
bins, edges = np.histogram(x, 50, normed=1)
ax.step(edges[:-1], bins, where='post')
plt.ylim(-.005, plt.ylim()[1])
plt.show()
</snippet></ROW><ROW><id>16863254</id><snippet>where=post</snippet></ROW><ROW><id>16863254</id><snippet>[left_edege_0, left_edge_1, ..., left_edge_(n-1), right_edge_(n-1)]</snippet></ROW><ROW><id>16863396</id><snippet>$(ipython locate profile)/startup/log_history.py</snippet></ROW><ROW><id>16863396</id><snippet>import atexit
import os

ip = get_ipython()
LIMIT = 1000 # limit the size of the history

def save_history():
    """save the IPython history to a plaintext file"""
    histfile = os.path.join(ip.profile_dir.location, "history.txt")
    print("Saving plaintext history to %s" % histfile)
    lines = []
    # get previous lines
    # this is only necessary because we truncate the history,
    # otherwise we chould just open with mode='a'
    if os.path.exists(histfile):
        with open(histfile, 'r') as f:
            lines = f.readlines()

    # add any new lines from this session
    lines.extend(record[2] + '\n' for record in ip.history_manager.get_range())

    with open(histfile, 'w') as f:
        # limit to LIMIT entries
        f.writelines(lines[-LIMIT:])

# do the save at exit
atexit.register(save_history)
</snippet></ROW><ROW><id>16863396</id><snippet>import os

ip = get_ipython()

favfile = "readline_favorites"

def load_readline_favorites():
    """load profile_dir/readline_favorites into the readline history"""
    path = os.path.join(ip.profile_dir.location, favfile)
    if not os.path.exists(path):
        return

    with open(path) as f:
        for line in f:
            ip.readline.add_history(line.rstrip('\n'))

if ip.has_readline:
    load_readline_favorites()
</snippet></ROW><ROW><id>16863396</id><snippet>profile_default/startup/</snippet></ROW><ROW><id>16863396</id><snippet>profile_default/readline_favorites</snippet></ROW><ROW><id>16863908</id><snippet>%</snippet></ROW><ROW><id>16863908</id><snippet>float(value.strip(' \t\n\r%'))
</snippet></ROW><ROW><id>16863908</id><snippet>.strip()</snippet></ROW><ROW><id>16863908</id><snippet>%</snippet></ROW><ROW><id>16863908</id><snippet>&gt;&gt;&gt; float('5.265%  '.strip(' \t\n\r%'))
5.265
&gt;&gt;&gt; float('2.1545%'.strip(' \t\n\r%'))
2.1545
</snippet></ROW><ROW><id>16863908</id><snippet>float()</snippet></ROW><ROW><id>16863908</id><snippet>%</snippet></ROW><ROW><id>16863968</id><snippet>def main():
    app = QtGui.QApplication(sys.argv)
    w = AuthWindow()
    w.exec_()
    w.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>16864047</id><snippet>u''</snippet></ROW><ROW><id>16864047</id><snippet>&gt;&gt;&gt; print u'Hello World!'
Hello World!
&gt;&gt;&gt; print (u'Hello World',)
(u'Hello World',)
</snippet></ROW><ROW><id>16864047</id><snippet>print u' {:&lt;15} {:&lt;8} {:&lt;6}'.format(*row)
</snippet></ROW><ROW><id>16864047</id><snippet>str.format()</snippet></ROW><ROW><id>16864047</id><snippet>&gt;&gt;&gt; row = (u'31/05/2013', u'11:10', u'$487')
&gt;&gt;&gt; print u' {:&lt;15} {:&lt;8} {:&lt;6}'.format(*row)
 31/05/2013      11:10    $487  
</snippet></ROW><ROW><id>16864047</id><snippet>&gt;&gt;&gt; rows = [
... (u'31/05/2013', u'11:10', u'$487'),
... (u'31/05/2013', u'11:11', u'$487'),
... (u'31/05/2013', u'11:13', u'$487'),
... (u'31/05/2013', u'11:19', u'$487'),
... ]
&gt;&gt;&gt; for row in rows:
...     print u' {:&lt;15} {:&lt;8} {:&lt;6}'.format(*row)
... 
 31/05/2013      11:10    $487  
 31/05/2013      11:11    $487  
 31/05/2013      11:13    $487  
 31/05/2013      11:19    $487  
</snippet></ROW><ROW><id>16864140</id><snippet>write()</snippet></ROW><ROW><id>16864140</id><snippet>flush()</snippet></ROW><ROW><id>16864140</id><snippet>file = open("file.txt", "w")
while True:
    file.write( DATA )
    flle.flush()
</snippet></ROW><ROW><id>16864140</id><snippet>os.fsync()</snippet></ROW><ROW><id>16864183</id><snippet>login: admin</snippet></ROW><ROW><id>16864183</id><snippet>login: required</snippet></ROW><ROW><id>16864183</id><snippet>GET</snippet></ROW><ROW><id>16864183</id><snippet>GET</snippet></ROW><ROW><id>16864183</id><snippet>GET</snippet></ROW><ROW><id>16864368</id><snippet>def previous_quarter(ref):
    if ref.month &lt; 4:
        return datetime.date(ref.year - 1, 12, 31)
    elif ref.month &lt; 7:
        return datetime.date(ref.year, 3, 31)
    elif ref.month &lt; 10:
        return datetime.date(ref.year, 6, 30)
    return datetime.date(ref.year, 9, 30)
</snippet></ROW><ROW><id>16864777</id><snippet>import csv

filereader = csv.reader(open("tests.csv", "r"), delimiter=",")
filewriter = csv.writer(open("test_step1.csv", "wb"), delimiter=",", newline="")
#Delete header
for row in filereader:
    if row[0].isdigit():
        filewriter.writerow(row)
</snippet></ROW><ROW><id>16864777</id><snippet>newline=""</snippet></ROW><ROW><id>16864811</id><snippet>for dir, dirnames, files in os.walk(base_directory):
</snippet></ROW><ROW><id>16864811</id><snippet>line</snippet></ROW><ROW><id>16864811</id><snippet>  for line in f:
    #reads in the second line
    if line==1:
      a_list.append(line)
      break
</snippet></ROW><ROW><id>16864811</id><snippet>  for i, line in enumerate(f):
    #reads in the second line
    if i==1:
      a_list.append(line)
      break
</snippet></ROW><ROW><id>16864811</id><snippet>  import os
  a_list = []
  for dirpath, dirnames, files in os.walk(base_directory):
    for file in files:
      with open(os.path.join(dirpath, file), 'r') as f:
        next(f)                 # skip the first line
        a_list.append(next(f))  # store the second line
</snippet></ROW><ROW><id>16864953</id><snippet>sum()</snippet></ROW><ROW><id>16864953</id><snippet>count = sum(len(v) for v in d.itervalues())
</snippet></ROW><ROW><id>16864953</id><snippet>d.values()</snippet></ROW><ROW><id>16864953</id><snippet>&gt;&gt;&gt; d = {'T1': ['eggs', 'bacon', 'sausage']}
&gt;&gt;&gt; sum(len(v) for v in d.itervalues())
3
&gt;&gt;&gt; d = {'T1': ['eggs', 'bacon', 'sausage'], 'T2': ['spam', 'ham', 'monty', 'python']}
&gt;&gt;&gt; sum(len(v) for v in d.itervalues())
7
</snippet></ROW><ROW><id>16864953</id><snippet>Counter</snippet></ROW><ROW><id>16864983</id><snippet>os.walk()</snippet></ROW><ROW><id>16864983</id><snippet>filecount = len([name for name in os.listdir('.') if os.path.isfile(name)])
</snippet></ROW><ROW><id>16864983</id><snippet>os.walk()</snippet></ROW><ROW><id>16864983</id><snippet>len(files)</snippet></ROW><ROW><id>16864983</id><snippet>import os, os.path, sys

rootdir = 'q:'

documentedcount = 0

for root, subFolders, files in os.walk(rootdir):
    filecount = len(files)
    print "Filecount = %s" % filecount
    if filecount &gt;= 3:
        documentedcount =+1
        print "Documented in the loop is %s" % documentedcount

print "Documented = %s" % documentedcount
</snippet></ROW><ROW><id>16865251</id><snippet>global</snippet></ROW><ROW><id>16865251</id><snippet>global &lt;varName&gt;</snippet></ROW><ROW><id>16865251</id><snippet>testVar = 0

def testFunc():
    global testVar
    testVar += 1

print testVar
testFunc()
print testVar
</snippet></ROW><ROW><id>16865251</id><snippet>&gt;&gt;&gt; 
0
1
</snippet></ROW><ROW><id>16865251</id><snippet>global</snippet></ROW><ROW><id>16865251</id><snippet>global</snippet></ROW><ROW><id>16865251</id><snippet>def testFunc2():
    print testVar
</snippet></ROW><ROW><id>16865251</id><snippet>global</snippet></ROW><ROW><id>16865251</id><snippet>list</snippet></ROW><ROW><id>16865251</id><snippet>list</snippet></ROW><ROW><id>16865251</id><snippet>global</snippet></ROW><ROW><id>16865251</id><snippet>testVar = []
def testFunc1():
    testVar = [2] # Will create a local testVar and assign it [2], but will not change the global variable.

def testFunc2():
    global testVar
    testVar = [2] # Will change the global variable.

def testFunc3():
    testVar.append(2) # Will change the global variable.
</snippet></ROW><ROW><id>16865309</id><snippet>inp = [('IND', 'MIA', '05/30'), ('ND', '07/30'), ('UNA', 'ONA', '100'), \
       ('LAA', 'SUN', '05/30'), ('AA', 'SN', '07/29'), ('UAA', 'AAN')]

result = {}
for i in range(0, len(inp), 3):
    item = inp[i]
    result[item[0]+","+item[1]] = inp[i:i+3]

print (result)
</snippet></ROW><ROW><id>16865309</id><snippet>result[item[0]+ ...</snippet></ROW><ROW><id>16865309</id><snippet>result[item[0]+","+item[1]] = [item[2:]]+inp[i+1:i+3]
</snippet></ROW><ROW><id>16865309</id><snippet>rslt = {
    inp[i][0]+", "+inp[i][1]: inp[i:i+3]
    for i in range(0, len(inp), 3)
}
</snippet></ROW><ROW><id>16865405</id><snippet>key=lambda row: (searchdict.get(row[11], 5), row[other_column]))
</snippet></ROW><ROW><id>16865440</id><snippet>sum(1 for line in file)
</snippet></ROW><ROW><id>16865440</id><snippet>os.stat</snippet></ROW><ROW><id>16865440</id><snippet>os.stat(filename).st_size
</snippet></ROW><ROW><id>16865467</id><snippet>load_tests</snippet></ROW><ROW><id>16865467</id><snippet>test_prog.py</snippet></ROW><ROW><id>16865467</id><snippet>prog.py</snippet></ROW><ROW><id>16865467</id><snippet>import unittest
import test.test_prog
suite = unittest.TestLoader().loadTestsFromModule(test.test_prog)
unittest.TextTestRunner().run(suite)
</snippet></ROW><ROW><id>16865761</id><snippet>return redirect(reverse('user_dashboard', args=(2,)))
</snippet></ROW><ROW><id>16865761</id><snippet>return redirect('user_dashboard')
</snippet></ROW><ROW><id>16865761</id><snippet>url(r'u/dashboard/(?P&lt;list_id&gt;\d+)/$', views.user_dashboard, name='user_dashboard'),
</snippet></ROW><ROW><id>16865761</id><snippet>list_id</snippet></ROW><ROW><id>16865814</id><snippet>numpy.linspace()</snippet></ROW><ROW><id>16865814</id><snippet>&gt;&gt;&gt; my_array = numpy.linspace(1, 10, 10)
&gt;&gt;&gt; my_array
array([  1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.])
</snippet></ROW><ROW><id>16865814</id><snippet>for index,point in my_array
</snippet></ROW><ROW><id>16865814</id><snippet>&gt;&gt;&gt; two_d = numpy.array([[1, 2], [4, 5]])
&gt;&gt;&gt; two_d
array([[1, 2], [4, 5]])
</snippet></ROW><ROW><id>16865814</id><snippet>&gt;&gt;&gt; for x, y in two_d:
    print(x, y)

1 2
4 5
</snippet></ROW><ROW><id>16865839</id><snippet>def tblData(l, w):
    table=[]
    for x in range(l):
        table.append([' '] * w)
    return table
</snippet></ROW><ROW><id>16865839</id><snippet>def tblData(l, w):
    return [[' '] * w for x in range(l)]
</snippet></ROW><ROW><id>16865839</id><snippet>[' '] * 3</snippet></ROW><ROW><id>16865839</id><snippet>[' ', ' ', ' ']</snippet></ROW><ROW><id>16865839</id><snippet>[' '] * w</snippet></ROW><ROW><id>16865839</id><snippet>[' ' for x in range(w)]</snippet></ROW><ROW><id>16865839</id><snippet>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; table = [[' '] * 4 for x in range(5)]
&gt;&gt;&gt; pprint.pprint(table)
[[' ', ' ', ' ', ' '],
 [' ', ' ', ' ', ' '],
 [' ', ' ', ' ', ' '],
 [' ', ' ', ' ', ' '],
 [' ', ' ', ' ', ' ']]
&gt;&gt;&gt; table[3][1] = 'O'
&gt;&gt;&gt; pprint.pprint(table)
[[' ', ' ', ' ', ' '],
 [' ', ' ', ' ', ' '],
 [' ', ' ', ' ', ' '],
 [' ', 'O', ' ', ' '],
 [' ', ' ', ' ', ' ']]
</snippet></ROW><ROW><id>16865965</id><snippet>[True,False,False,True]</snippet></ROW><ROW><id>16865965</id><snippet>def checkSwitches():
     return [EHbox.isChecked(),AHbox.isChecked(),DHbox.isChecked(),L1box.isChecked()]
</snippet></ROW><ROW><id>16865965</id><snippet>def clickGo():
    buttons = ['geh,','DAT,','GDH,','gl1,']
    for item in xrange[4]: #&lt;4 is total number of switches
        if checkSwitches()[item]: #checking for Trues ( which im assuming 'isChecked()' returns)
             doButtonJunk(buttons[item])
</snippet></ROW><ROW><id>16865965</id><snippet>def doButtonJunk(THEDIFFERENCEBETWEENYOUR8THINGS)
        tn.write(THEDIFFERENCEBETWEENYOUR8THINGS.encode('ascii') + b"\n\r")
        out_file = open(self.linePATH.text(), "wt")
        out_file.write(tn.read_until(b"EOF").replace(b'\r\n',b'\n').replace(b'ACK',b'').replace(b'EOF',b'').strip().decode())
        out_file.close()
</snippet></ROW><ROW><id>16865965</id><snippet>doButtonJunk()</snippet></ROW><ROW><id>16865965</id><snippet>def doButtonJunk(THEDIFFERENCEBETWEENYOUR8THINGS)
        wt = 'wt' # made new placeholder for it
        if THEDIFFERENCEBETWEENYOUR8THINGS in ['gl2,','GDH,'......]: #i diddnt finish this list, because im lazy.. either way its gonna check to see if it needs the date+ part, and then modify the 'wt' to be what it suppsoed to be.
             wt = date+'_001.csv'+wt 
        tn.write(THEDIFFERENCEBETWEENYOUR8THINGS.encode('ascii') + b"\n\r")
        out_file = open(self.linePATH.text(), wt) #inserted wt instead of 'wt' because we defined it now
        out_file.write(tn.read_until(b"EOF").replace(b'\r\n',b'\n').replace(b'ACK',b'').replace(b'EOF',b'').strip().decode())
        out_file.close()
</snippet></ROW><ROW><id>16865988</id><snippet>.__init__()</snippet></ROW><ROW><id>16865988</id><snippet>class Something(object):
    def __init__(self):
        self.our_random = Something.random_thing()
</snippet></ROW><ROW><id>16865988</id><snippet>__func__</snippet></ROW><ROW><id>16865988</id><snippet>class Something(object):
    @staticmethod
    def random_thing():
        return 4

    our_random = random_thing.__func__()
</snippet></ROW><ROW><id>16865988</id><snippet>class Something(object):
    @staticmethod
    def random_thing():
        return 4

    our_random = random_thing   # our_random as an alias for random_thing
</snippet></ROW><ROW><id>16866126</id><snippet>import bottle
bottle.BaseRequest.MEMFILE_MAX = 1024 * 1024 # (or whatever you want)
</snippet></ROW><ROW><id>16866150</id><snippet>BLUR.filterargs</snippet></ROW><ROW><id>16866150</id><snippet>BLUR</snippet></ROW><ROW><id>16866150</id><snippet>filterargs</snippet></ROW><ROW><id>16866462</id><snippet>r</snippet></ROW><ROW><id>16866462</id><snippet>r = re.compile(r"\\.") # Slash followed by anything
</snippet></ROW><ROW><id>16866462</id><snippet>re</snippet></ROW><ROW><id>16866462</id><snippet>\</snippet></ROW><ROW><id>16866462</id><snippet>re.compile()</snippet></ROW><ROW><id>16866462</id><snippet>re</snippet></ROW><ROW><id>16866462</id><snippet>\.</snippet></ROW><ROW><id>16866462</id><snippet>&gt;&gt;&gt; print """\\."""
\.
</snippet></ROW><ROW><id>16866462</id><snippet>r''</snippet></ROW><ROW><id>16866462</id><snippet>re</snippet></ROW><ROW><id>16866462</id><snippet>\\.</snippet></ROW><ROW><id>16866462</id><snippet>&gt;&gt;&gt; print r"""\\."""
\\.
</snippet></ROW><ROW><id>16866462</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "test \\* \\! test * !! **"
&gt;&gt;&gt; r = re.compile(r"\\.") # Slash followed by anything
&gt;&gt;&gt; r.sub("-", s)
'test - - test * !! **'
</snippet></ROW><ROW><id>16866462</id><snippet>r''</snippet></ROW><ROW><id>16866462</id><snippet>re.sub()</snippet></ROW><ROW><id>16866462</id><snippet>r = re.compile(r"\\(.)") # Note the parethesis, that's a capturing group
r.sub(r'\1', s)          # \1 means: replace with value of first capturing group
</snippet></ROW><ROW><id>16866462</id><snippet>&gt;&gt;&gt; r = re.compile(r"\\(.)") # Note the parethesis, that's a capturing group
&gt;&gt;&gt; r.sub(r'\1', s) 
'test * ! test * !! **'
</snippet></ROW><ROW><id>16866549</id><snippet>import mock

from mymodule import my_method_under_test

class MyTest(TestCase):

    def test_request_get(self):
        with patch('requests.get') as patched_get:
            my_method_under_test()
            # Ensure patched get was called, called only once and with exactly these params.
            patched_get.assert_called_once_with("https://ec2.amazonaws.com/", params={'Action': 'GetConsoleOutput', 'InstanceId': 'i-123456'})
</snippet></ROW><ROW><id>16866680</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>16866712</id><snippet>self</snippet></ROW><ROW><id>16866712</id><snippet>class Board(Frame):
    def __init__(self,parent):
        # ...
        self.c = Canvas(frame2,width=480,height=480)
        self.c.pack(expand=YES,fill=BOTH)
        # ...

    def place_player_down(self):
        # Use 'self.c', not just 'c'
</snippet></ROW><ROW><id>16866712</id><snippet>number</snippet></ROW><ROW><id>16866712</id><snippet>place_player_down</snippet></ROW><ROW><id>16866712</id><snippet>def roll(self):
    number=randint(2,12)
    if b==0:
        self.place_player_down(number)
    return number  # Keep in mind that this value is returned but not used anymore

def place_player_down(self, number):
    # Use 'number'
</snippet></ROW><ROW><id>16866796</id><snippet>[^ ]+(?:: [^ ]+| \{[^}]+\})
</snippet></ROW><ROW><id>16866796</id><snippet>import re
test = "a: 1 b: 2 c { d: 3 e: 4 } f: 5"
pattern = re.compile(r"[^ ]+(?:: [^ ]+| \{[^}]+\})")
for match in pattern.findall(test):
    print match
</snippet></ROW><ROW><id>16867170</id><snippet>metadata.create_all()</snippet></ROW><ROW><id>16867170</id><snippet>Base = declarative_base()
SCHEMA = {'schema' : 'SIATDESV'}

class Pgdasd(Base):
    __tablename__ = 'PGDASD'
    __table_args__ = SCHEMA

    PGDASD_00000_ID_DECLARACAO    = Column(String(17), primary_key = True)

class Pgdasd_01000(Base):
    __tablename__ = 'pgdasd_01000'
    __table_args__ = SCHEMA

    PGDASD_00000_ID_DECLARACAO  = Column(String, ForeignKey('SIATDESV.PGDASD.PGDASD_00000_ID_DECLARACAO'))   
    PGDASD_01000_NRPAGTO        = Column(String, primary_key = True)
</snippet></ROW><ROW><id>16867170</id><snippet>    PGDASD_00000_ID_DECLARACAO  = Column(String, ForeignKey(SCHEMA['schema']+'.PGDASD.PGDASD_00000_ID_DECLARACAO'))   
</snippet></ROW><ROW><id>16867225</id><snippet>sys.stdout</snippet></ROW><ROW><id>16867225</id><snippet># override.py
import sys
class LimitedWriter:

    def __init__(self, limit):
            self.limit = limit
            self.old_stdout = sys.stdout
            self.active = True
    def toggle(self, flag):
            self.active = flag

    def write(self, value):
            if len(value) &gt; self.limit and self.active:
                    value = value[:self.limit] + "..."
            self.old_stdout.write(value)

__lw__ = LimitedWriter(15) # limit to 15 characters
sys.stdout = __lw__
</snippet></ROW><ROW><id>16867225</id><snippet>&gt;&gt;&gt; import override
&gt;&gt;&gt; print "(o.o)" * 10
(o.o)(o.o)(o.o)...
&gt;&gt;&gt;
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.toggle(False)
&gt;&gt;&gt; print "(o.o)" * 10
(o.o)(o.o)(o.o)(o.o)(o.o)(o.o)(o.o)(o.o)(o.o)(o.o)
</snippet></ROW><ROW><id>16867242</id><snippet>start</snippet></ROW><ROW><id>16867242</id><snippet>running</snippet></ROW><ROW><id>16867242</id><snippet>True</snippet></ROW><ROW><id>16867242</id><snippet>False</snippet></ROW><ROW><id>16867242</id><snippet>queue</snippet></ROW><ROW><id>16867314</id><snippet>a = float(input('a=?'))
</snippet></ROW><ROW><id>16867424</id><snippet>bin()</snippet></ROW><ROW><id>16867424</id><snippet>&gt;&gt;&gt; bin('10')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object cannot be interpreted as an index
</snippet></ROW><ROW><id>16867424</id><snippet>&gt;&gt;&gt; bin(10)
'0b1010'
</snippet></ROW><ROW><id>16867424</id><snippet>raw_input()</snippet></ROW><ROW><id>16867424</id><snippet>int()</snippet></ROW><ROW><id>16867424</id><snippet>n = int(raw_input())
</snippet></ROW><ROW><id>16867424</id><snippet>&gt;&gt;&gt; 'forward'[::-1]
'drawrof'
</snippet></ROW><ROW><id>16867424</id><snippet>def reversebinary():
    n = int(raw_input())
    bin_n = bin(n)[2:]
    revbin = bin_n[::-1]
    return int(revbin, 2)
</snippet></ROW><ROW><id>16867424</id><snippet>def reversebinary():
    n = int(raw_input())
    return int(bin(n)[:1:-1], 2)
</snippet></ROW><ROW><id>16867495</id><snippet>import xml.etree.ElementTree as etree
document = etree.parse(open("your.xml"))

secondIdentifier = document.find(".//product/identifier[2]")
firstContributor = document.find(".//product/contributor[1]")
print secondIdentifier, firstContributor
</snippet></ROW><ROW><id>16867495</id><snippet>'ab', 'Alex'
</snippet></ROW><ROW><id>16867495</id><snippet>1</snippet></ROW><ROW><id>16867495</id><snippet>0</snippet></ROW><ROW><id>16867495</id><snippet>find</snippet></ROW><ROW><id>16867495</id><snippet>findall</snippet></ROW><ROW><id>16867495</id><snippet>import lxml.etree as etree
document = etree.parse(open("your.xml"))

secondIdentifier = document.xpath(".//product/identifier[2]")[0]
firstContributor = document.xpath(".//product/contributor[1]")[0]
print secondIdentifier, firstContributor
</snippet></ROW><ROW><id>16867539</id><snippet>return_value</snippet></ROW><ROW><id>16867539</id><snippet>PropertyMock</snippet></ROW><ROW><id>16867539</id><snippet>with patch('requests.post') as patched_post:
    type(patched_post.return_value).ok = PropertyMock(return_value=True)
</snippet></ROW><ROW><id>16867539</id><snippet>requests.post</snippet></ROW><ROW><id>16867539</id><snippet>PropertyMock</snippet></ROW><ROW><id>16867539</id><snippet>ok</snippet></ROW><ROW><id>16867539</id><snippet>True</snippet></ROW><ROW><id>16867574</id><snippet>class MyMethod(models.Model):
    def method(self, user):
        # do something with user
        return result    # true or false

def my_method(request):
    obj = MyModel.all().filter(...).get()
    result = obj.method(request.user)
    # pass "result" to template
</snippet></ROW><ROW><id>16867574</id><snippet>def my_method(request):
    user = request.user
    objects = MyModel.all()
    # pass "user" and "objects" to template

(inside your template):
{% for obj in objects %}{{ obj.method.user||yesno:"yeah,no,maybe" }}{% endfor %}
</snippet></ROW><ROW><id>16867604</id><snippet>%precision %.4g
</snippet></ROW><ROW><id>16867604</id><snippet>%precision</snippet></ROW><ROW><id>16867723</id><snippet>File "./pyrig.py", line 30, in main
  print [str(x) for x in submissions]
</snippet></ROW><ROW><id>16867723</id><snippet>get_subreddit</snippet></ROW><ROW><id>16867723</id><snippet>get_hot</snippet></ROW><ROW><id>16867723</id><snippet>Subreddit</snippet></ROW><ROW><id>16867833</id><snippet>apt-get install python-rsvg python-cairo</snippet></ROW><ROW><id>16867833</id><snippet>import cairo
import rsvg
import gtk

class Viewer(object):
    def __init__(self):
        self.string = """&lt;svg width="800" height="600"&gt;&lt;/svg&gt;"""
        self.svg = rsvg.Handle(data=self.string)
        self.win = gtk.Window()
        self.da = gtk.DrawingArea()
        self.win.add(self.da)
        self.da.set_size_request(800, 600)
        self.da.connect("expose-event", self._expose_cairo)
        self.win.connect("destroy", self._destroy)
        self.win.show_all()
        self.win.present()

    def _expose_cairo(self, win, event):
        self.svg = rsvg.Handle(data=self.string)
        cr = self.da.window.cairo_create()
        self.svg.render_cairo(cr)

    def _destroy(self, widget, data=None):
        gtk.main_quit()

    def renderSVG(self, text):
        x, y, w, h = self.win.allocation
        self.da.window.invalidate_rect((0,0,w,h), False)
        self.string = text
</snippet></ROW><ROW><id>16867833</id><snippet>viewer = Viewer()    # pops up a window
import lxml.etree as etree
from lxml.builder import E as svg

rectangle = svg.rect(x="10", y="10", width="80", height="80", style="fill: yellow; stroke: black; stroke-width: 2;")
circle = svg.circle(cx="70", cy="70", r="30", style="fill: red; fill-opacity: 0.5; stroke: black; stroke-width: 2;")

document = svg.svg(rectangle, circle, width="100", height="100")

viewer.renderSVG(etree.tostring(document))   # draws the image in the window
</snippet></ROW><ROW><id>16867833</id><snippet>open("outputFile.svg", "w").write(etree.tostring(document))
</snippet></ROW><ROW><id>16867833</id><snippet>href:data</snippet></ROW><ROW><id>16867907</id><snippet>subprocess</snippet></ROW><ROW><id>16867907</id><snippet>Popen</snippet></ROW><ROW><id>16867907</id><snippet>import subprocess
shellscript = subprocess.Popen(["shellscript.sh"], stdin=subprocess.PIPE)
</snippet></ROW><ROW><id>16867907</id><snippet>shellscript.stdin</snippet></ROW><ROW><id>16867907</id><snippet>write</snippet></ROW><ROW><id>16867907</id><snippet>shellscript.stdin.write("yes\n")
shellscript.stdin.close()
returncode = shellscript.wait()   # blocks until shellscript is done
</snippet></ROW><ROW><id>16867907</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>16867907</id><snippet>stderr=subprocess.PIPE</snippet></ROW><ROW><id>16867907</id><snippet>PIPEs</snippet></ROW><ROW><id>16867907</id><snippet>communicate</snippet></ROW><ROW><id>16867907</id><snippet>shellscript = subprocess.Popen(["shellscript.sh"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = shellscript.communicate("yes\n")   # blocks until shellscript is done
returncode = shellscript.returncode
</snippet></ROW><ROW><id>16868030</id><snippet>higher_order_conversion = {
    ('apple', 'pear', 'kiwi'): 'fruit',   #the keys must be tuples, not lists 
    ('X', 'Y', 'Z'): 'letter', # (because tuples are immutable and therefore hashable)
    ('loafers', 'sneakers', 'high heels'): 'shoes'
}

data_set = [[125, 'apple'], #these numbers are id numbers, or whatever extra information you might have packaged with your data
            [126, 'Y'],
            [127, 'loafers'],
            [103, 'kiwi']
            ]

print 'before', data_set

for data in data_set:
    for lower_order_list in higher_order_conversion.keys():
        if data[1] in lower_order_list:
            data[1] = higher_order_conversion[lower_order_list]

print 'after', data_set
</snippet></ROW><ROW><id>16868030</id><snippet>before [[125, 'apple'], [126, 'Y'], [127, 'loafers'], [103, 'kiwi']]
after [[125, 'fruit'], [126, 'letter'], [127, 'shoes'], [103, 'fruit']]
</snippet></ROW><ROW><id>16868150</id><snippet>&lt;data&gt;</snippet></ROW><ROW><id>16868281</id><snippet>'\xff'</snippet></ROW><ROW><id>16868281</id><snippet>b'\xc3\xbf'</snippet></ROW><ROW><id>16868281</id><snippet>b'\xff\x0a\x82'</snippet></ROW><ROW><id>16868281</id><snippet>PyBytes</snippet></ROW><ROW><id>16868281</id><snippet>char*</snippet></ROW><ROW><id>16868281</id><snippet>%typemap(in) (char* data,int size) (Py_ssize_t len) %{
    if(PyBytes_AsStringAndSize($input,&amp;$1,&amp;len) == -1)
        return NULL;
    $2 = (int)len;
%}
</snippet></ROW><ROW><id>16868281</id><snippet>Py_ssize_t</snippet></ROW><ROW><id>16868307</id><snippet>set</snippet></ROW><ROW><id>16868307</id><snippet>idPOS</snippet></ROW><ROW><id>16868307</id><snippet>idxml</snippet></ROW><ROW><id>16868307</id><snippet>POSval</snippet></ROW><ROW><id>16868307</id><snippet>w</snippet></ROW><ROW><id>16868307</id><snippet>&lt;w&gt;</snippet></ROW><ROW><id>16868307</id><snippet>POSfile</snippet></ROW><ROW><id>16868307</id><snippet># load all "pos" attributes into a dictionary for fast lookup
posDict = {}
for w in rootPOS.iter("w"):
    if w.get("pos") is not None:
        posDict[w.text] = w.get("pos")

# if we see any matching words in the xmlfile, set their "pos" attrbute
for w in root.iter("w"):
    if w.text in posDict:
        w.set("pos", posDict[w.text])
</snippet></ROW><ROW><id>16868358</id><snippet>class MyForm(forms.Form):
    my_field = forms.ChoiceField(choices=CHOICES) #choices can be a tuple
</snippet></ROW><ROW><id>16868358</id><snippet>class MyForm(forms.Form):
    my_field = forms.ChoiceField(widget=forms.RadioSelect, choices=CHOICES)
</snippet></ROW><ROW><id>16868358</id><snippet>ModelForms</snippet></ROW><ROW><id>16868364</id><snippet>class hero():
    def __init__(self, name="Jimmy", prof="Warrior", weapon="Sword"):
        """Constructor for hero"""
        self.name = name
        self.prof = prof
        self.weapon = weapon
        self.herodict = {
            "Name": self.name,
            "Class": self.prof,
            "Weapon": self.weapon
        }
        self.herotext = {
            "Welcome": "Greetings, hero. What is thine name? ",
            "AskClass": "A fine name {Name}. What is thine class? ",
            "AskWeapon": "A {Class}? What shalt thy weapon be? ",
        }

    def setHeroDict(self, textkey, herokey):
        n = raw_input(self.herotext[textkey].format(**self.herodict))
        self.herodict[herokey] = n
        print self.herodict[herokey]


h = hero("Tommy", "Mage", "Staff")
h.setHeroDict("Welcome", "Name")
h.setHeroDict("AskClass", "Class")
</snippet></ROW><ROW><id>16868364</id><snippet>"Hello, {foo}".format(**{'foo': 'bar'})
"Hello, %(foo)s!" % {'foo': 'bar'}
</snippet></ROW><ROW><id>16868364</id><snippet>&gt;&gt;&gt; print 5 * 10
50
&gt;&gt;&gt; # the five, ten, and the 50 are now gone.
&gt;&gt;&gt; template = "meow {}"
&gt;&gt;&gt; template.format('splat!')
'meow splat!'
&gt;&gt;&gt; # 'splat!' and 'meow splat!' are both gone, but your template still exists.
&gt;&gt;&gt; template
'meow {}'
&gt;&gt;&gt; template = template % 'hiss!'  # this evaluates to "template = 'meow hiss!'"
&gt;&gt;&gt; template  # our template is now gone, replaced with 'meow hiss!' 
'meow hiss!'
</snippet></ROW><ROW><id>16868391</id><snippet>first = set(open('firstFile').readlines())
second = set(open('secondFile').readlines())

diff = second - first
</snippet></ROW><ROW><id>16868391</id><snippet>first = open('firstfile').readlines()
second = open('secondFile').readlines()

diff = [line for line in second if line not in first]
</snippet></ROW><ROW><id>16868391</id><snippet>secondFile = open('secondFile')
diffFile = open('diffFile')

for secondLine in secondFile:
    match = False
    firstFile = open('firstFile')
    for firstLine in firstFile:
        if firstLine == secondLine:
            match = True
            break
    firstfile.close()
    if not match:
        print &gt;&gt;diffFile, secondLine

secondFile.close()
</snippet></ROW><ROW><id>16868406</id><snippet>defaultdict</snippet></ROW><ROW><id>16868406</id><snippet>Counters</snippet></ROW><ROW><id>16868406</id><snippet>blue1       05/30/2013  06:37 PM
green1      05/30/2013  06:37 PM
green2      05/30/2013  06:37 PM
purple1     05/30/2013  06:37 PM
purple2     05/30/2013  06:37 PM
purple3     05/30/2013  06:37 PM
purple4     05/30/2013  06:37 PM
purple5     05/30/2013  06:37 PM
red1        05/31/2013  06:38 PM
red2        05/31/2013  06:38 PM
red3        05/31/2013  06:38 PM
red4        05/31/2013  06:38 PM
yellow1     05/31/2013  06:38 PM
yellow2     05/31/2013  06:38 PM
yellow3     05/31/2013  06:38 PM
</snippet></ROW><ROW><id>16868406</id><snippet>from collections import defaultdict, Counter
from datetime import date
from operator import itemgetter
import os

COLORS = ('blue', 'green', 'yellow', 'red', 'purple')
NUM_LETTERS = 2
path = 'testdir'

date_counters = defaultdict(Counter)

for filename, filepath in ((name, os.path.join(path, name))
                                for name in os.listdir(path)):
    if (os.path.isfile(filepath) and any(color in filename for color in COLORS)):
        mod_date = date.fromtimestamp(os.stat(filepath).st_mtime)
        date_counters[mod_date].update((filename[:NUM_LETTERS],))

for mod_date in sorted(date_counters):  # sort by file group's modification date
    print mod_date.day
    for initials, count in sorted(date_counters[mod_date].iteritems(),
                                  key=itemgetter(1)):
        print initials, count
</snippet></ROW><ROW><id>16868406</id><snippet>30
bl 1
gr 2
pu 5
31
ye 3
re 4
</snippet></ROW><ROW><id>16868417</id><snippet>nest = [['prefix'],['line 1'],['line 2']]
for part in nest[1:]:
    list = [] + nest[0]
    list += part
    print list
</snippet></ROW><ROW><id>16868417</id><snippet>myobj = Deck(). 
</snippet></ROW><ROW><id>16868417</id><snippet>myobj2 = myobj, 
</snippet></ROW><ROW><id>16868417</id><snippet>myobj3 = Deck() 
</snippet></ROW><ROW><id>16868417</id><snippet>myobj.shuffle #we're shuffling one deck, that two people are looking at
</snippet></ROW><ROW><id>16868476</id><snippet>&gt;&gt;&gt; d = {"one": [(1,3),(1,4)], "two": [(1,2),(1,2),(1,3)], "three": [(1,1)]}
&gt;&gt;&gt; for k in sorted(d, key=lambda k: len(d[k]), reverse=True):
        print k,


two one three
</snippet></ROW><ROW><id>16868476</id><snippet>&gt;&gt;&gt; print ' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True))
two one three
</snippet></ROW><ROW><id>16868513</id><snippet>vm_obj.__class__</snippet></ROW><ROW><id>16868513</id><snippet>self</snippet></ROW><ROW><id>16868513</id><snippet>new</snippet></ROW><ROW><id>16868513</id><snippet>vm_obj.set_config_x = new.instancemethod(callableFunction, vm_obj, vm_obj.__class__)
</snippet></ROW><ROW><id>16868513</id><snippet>callableFunction</snippet></ROW><ROW><id>16868513</id><snippet>self</snippet></ROW><ROW><id>16868513</id><snippet>vm_obj</snippet></ROW><ROW><id>16868528</id><snippet>matplotlib</snippet></ROW><ROW><id>16868528</id><snippet>numpy</snippet></ROW><ROW><id>16868528</id><snippet>numpy</snippet></ROW><ROW><id>16868528</id><snippet>matplotlib</snippet></ROW><ROW><id>16868528</id><snippet>numpy</snippet></ROW><ROW><id>16868528</id><snippet>matplotlib</snippet></ROW><ROW><id>16868661</id><snippet>0xc3</snippet></ROW><ROW><id>16868661</id><snippet>äöå</snippet></ROW><ROW><id>16868661</id><snippet>0xc3.</snippet></ROW><ROW><id>16868661</id><snippet>a</snippet></ROW><ROW><id>16868661</id><snippet>&gt;&gt;&gt; a = 'change these letters äöå'
&gt;&gt;&gt; b = map( (lambda x: a.replace(x, "{0}.".format(x))), 'å ä ö'.split())
&gt;&gt;&gt; for c in b:
...   print c
... 
change these letters äöå.
change these letters ä.öå
change these letters äö.å
</snippet></ROW><ROW><id>16868994</id><snippet>all( d1.get(x) == d2.get(x) for x in l )
</snippet></ROW><ROW><id>16868994</id><snippet>sentinel = object()     #a new object, guaranteed not in dictionary
all( d1.get(x, sentinel) == d2.get(x, sentinel) for x in l )
</snippet></ROW><ROW><id>16869026</id><snippet>hash = {
  "abc" =&gt; 1,
  "def" =&gt; 2,
}

str = "abcdef"

str.downcase.each_char do |char|
  hash.each_pair do |key, val|
    puts val if key.include?(char)
  end
end


--output:--
1
1
1
2
2
2
</snippet></ROW><ROW><id>16869026</id><snippet>hash = {
  "abc" =&gt; 1,
  "def" =&gt; 2,
}

new_hash = {}

hash.each_pair do |key, val|
  key.each_char do |char|
    new_hash[char] = val
  end
end

p new_hash

--output:--
{"a"=&gt;1, "b"=&gt;1, "c"=&gt;1, "d"=&gt;2, "e"=&gt;2, "f"=&gt;2}
</snippet></ROW><ROW><id>16869125</id><snippet>direction('forward')</snippet></ROW><ROW><id>16869125</id><snippet>print direction('forward')</snippet></ROW><ROW><id>16869125</id><snippet>direction</snippet></ROW><ROW><id>16869125</id><snippet>print</snippet></ROW><ROW><id>16869125</id><snippet>print direction('forward')</snippet></ROW><ROW><id>16869125</id><snippet>direction('forward')</snippet></ROW><ROW><id>16869125</id><snippet>w</snippet></ROW><ROW><id>16869125</id><snippet>wo</snippet></ROW><ROW><id>16869125</id><snippet>direction('forward')</snippet></ROW><ROW><id>16869125</id><snippet>None</snippet></ROW><ROW><id>16869313</id><snippet>or</snippet></ROW><ROW><id>16869313</id><snippet>and</snippet></ROW><ROW><id>16869313</id><snippet>or</snippet></ROW><ROW><id>16869313</id><snippet>(self.list[L][0] == operand.list[R][0]) and op == '*' or op == '**' or op == '+' or op == '-' or (op == '/' and operand.list[R][1] != 0)
</snippet></ROW><ROW><id>16869313</id><snippet>((self.list[L][0] == operand.list[R][0]) and op == '*') or op == '**' or op == '+' or op == '-' or (op == '/' and operand.list[R][1] != 0)
</snippet></ROW><ROW><id>16869313</id><snippet>(self.list[L][0] == operand.list[R][0]) and (op == '*' or op == '**' or op == '+' or op == '-' or (op == '/' and operand.list[R][1] != 0))
</snippet></ROW><ROW><id>16869313</id><snippet>op</snippet></ROW><ROW><id>16869313</id><snippet>(self.list[L][0] == operand.list[R][0]) and (op != '/' or operand.list[R][1] != 0)
</snippet></ROW><ROW><id>16869313</id><snippet>op</snippet></ROW><ROW><id>16869313</id><snippet>div</snippet></ROW><ROW><id>16869313</id><snippet>from operator import div, mul, pow, add, sub
</snippet></ROW><ROW><id>16869313</id><snippet>(self.list[L][0] == operand.list[R][0]) and (op == mul or op == pow or op == add or op == sub or (op == div and operand.list[R][1] != 0))
</snippet></ROW><ROW><id>16869313</id><snippet>(self.list[L][0] == operand.list[R][0]) and (op != div or operand.list[R][1] != 0)
</snippet></ROW><ROW><id>16869550</id><snippet>import sys
print(sys.path)
</snippet></ROW><ROW><id>16869803</id><snippet>format</snippet></ROW><ROW><id>16869803</id><snippet>def format_row(row):
    result = row[:]   #make a copy of the row
    # format should be preferred over %.
    # Also, you don't have to escape the %.
    result[1] = "USD {:.2f}".format(result[1])
    result[2] = "USD {:.2f}".format(result[2])
    # do whatever else you have to do for a single row
    return result
</snippet></ROW><ROW><id>16869803</id><snippet>sorted_values = sorted(the_values, key=lambda x: x[1])   #sort by second column
formatted_lines = (format_row(row) for row in sorted_values[:10])
for line in formatted_lines:
    writer.writerow(line)

#[-10:] -&gt; take last 10 elements, [::-1] reverse the order
other_lines = (format_row(row) for row in sorted_values[-10:][::-1])
for line in other_lines:
    writer.writerow(line)
</snippet></ROW><ROW><id>16869803</id><snippet>sorted</snippet></ROW><ROW><id>16869803</id><snippet>compareout</snippet></ROW><ROW><id>16869803</id><snippet>sorted_values[-10:][::-1]</snippet></ROW><ROW><id>16869803</id><snippet>sorted_values = sorted(the_values, key=lambda x: x[1])   #sort by second column
# ...
#use sorted_values, instead of the_values
sorted_values.sort(key=lambda x: x[1], reverse=True)
# ...
</snippet></ROW><ROW><id>16869803</id><snippet>.sort</snippet></ROW><ROW><id>16869803</id><snippet>O(nlogn)</snippet></ROW><ROW><id>16869803</id><snippet>O(n)</snippet></ROW><ROW><id>16869803</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; L = [random.randint(0, 1000) for _ in range(10000)]
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('sorted(L)', 'from __main__ import L', number=100)
0.2509651184082031
&gt;&gt;&gt; timeit.timeit('sorted(L)', 'from __main__ import L', number=100)
0.2547318935394287
&gt;&gt;&gt; L.sort()
&gt;&gt;&gt; timeit.timeit('sorted(L, reverse=True)', 'from __main__ import L', number=100)
0.11794304847717285
&gt;&gt;&gt; timeit.timeit('sorted(L, reverse=True)', 'from __main__ import L', number=100)
0.11488604545593262
</snippet></ROW><ROW><id>16869803</id><snippet>reversed(L)</snippet></ROW><ROW><id>16869992</id><snippet>import numpy
import glob

for f in glob.glob("*.csv"):
    print f

    r = numpy.recfromcsv(f)
    print numpy.interp(5, r.depth, r.temp)
</snippet></ROW><ROW><id>16870162</id><snippet>data.astype(float)</snippet></ROW><ROW><id>16870162</id><snippet>float('True')</snippet></ROW><ROW><id>16870162</id><snippet>'True'</snippet></ROW><ROW><id>16870162</id><snippet>def boolstr_to_floatstr(v):
    if v == 'True':
        return '1'
    elif v == 'False':
        return '0'
    else:
        return v
</snippet></ROW><ROW><id>16870162</id><snippet>new_data = np.vectorize(boolstr_to_floatstr)(data).astype(float)
</snippet></ROW><ROW><id>16870651</id><snippet>("the value of x is ",x)</snippet></ROW><ROW><id>16870651</id><snippet>&gt;&gt;&gt; type(('hello'))
&lt;type 'str'&gt;
&gt;&gt;&gt; type(('hello',))  # notice the trailing `,` 
&lt;type 'tuple'&gt;
</snippet></ROW><ROW><id>16870651</id><snippet>()</snippet></ROW><ROW><id>16870651</id><snippet>&gt;&gt;&gt; print "the value of x is","foo" 
the value of x is foo
</snippet></ROW><ROW><id>16870651</id><snippet>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; print ("the value of x is","foo")
the value of x is foo
</snippet></ROW><ROW><id>16870677</id><snippet>for line in data:
    print line
</snippet></ROW><ROW><id>16870677</id><snippet>.readline()</snippet></ROW><ROW><id>16870677</id><snippet>.readlines()</snippet></ROW><ROW><id>16870677</id><snippet>requests</snippet></ROW><ROW><id>16870677</id><snippet>import requests

r = requests.get(url, stream=True)

for line in r.iter_lines():
    if line: print line
</snippet></ROW><ROW><id>16870699</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; def validate(date_text):
    try:
        datetime.datetime.strptime(date_text, '%Y-%m-%d')
    except ValueError:
        raise ValueError("Incorrect data format, should be YYYY-MM-DD")


&gt;&gt;&gt; validate('2003-12-23')
&gt;&gt;&gt; validate('2003-12-32')

Traceback (most recent call last):
  File "&lt;pyshell#20&gt;", line 1, in &lt;module&gt;
    validate('2003-12-32')
  File "&lt;pyshell#18&gt;", line 5, in validate
    raise ValueError("Incorrect data format, should be YYYY-MM-DD")
ValueError: Incorrect data format, should be YYYY-MM-DD
</snippet></ROW><ROW><id>16871085</id><snippet>import sys
from distutils.core import setup
from distutils.command.build_clib import build_clib
from distutils.extension import Extension
from Cython.Distutils import build_ext

libhello = ('hello', {'sources': ['hello.c']})

ext_modules=[
    Extension("demo", ["demo.pyx"])
]

def main():
    setup(
        name = 'demo',
        libraries = [libhello],
        cmdclass = {'build_clib': build_clib, 'build_ext': build_ext},
        ext_modules = ext_modules
    )

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16871085</id><snippet>int hello(void) { return 42; }
</snippet></ROW><ROW><id>16871085</id><snippet>int hello(void);
</snippet></ROW><ROW><id>16871085</id><snippet>cimport demo
cpdef test():
    return hello()
</snippet></ROW><ROW><id>16871085</id><snippet>cdef extern from "hello.h":
    int hello()
</snippet></ROW><ROW><id>16871229</id><snippet>import itertools as IT

def count_regular():
     if not hasattr(count_regular,"c"):
         count_regular.c = -1
     count_regular.c +=1
     return count_regular.c

def counter_gen():
    c = 0
    while True:
        yield c
        c += 1

def using_count_regular(N):
    return [count_regular() for i in range(N)]

def using_counter_gen(N):
    counter = counter_gen()
    return [next(counter) for i in range(N)]    

def using_itertools(N):
    count = IT.count()
    return [next(count) for i in range(N)]    
</snippet></ROW><ROW><id>16871229</id><snippet>% python -mtimeit -s'import test as t' 't.using_count_regular(1000)'
1000 loops, best of 3: 336 usec per loop
% python -mtimeit -s'import test as t' 't.using_counter_gen(1000)'
10000 loops, best of 3: 172 usec per loop
% python -mtimeit -s'import test as t' 't.using_itertools(1000)'
10000 loops, best of 3: 105 usec per loop
</snippet></ROW><ROW><id>16871229</id><snippet>N</snippet></ROW><ROW><id>16871229</id><snippet>itertools.count</snippet></ROW><ROW><id>16871229</id><snippet>count_regular</snippet></ROW><ROW><id>16871229</id><snippet>counter_gen</snippet></ROW><ROW><id>16871307</id><snippet>status_list</snippet></ROW><ROW><id>16871307</id><snippet>callRemote</snippet></ROW><ROW><id>16871392</id><snippet>threading</snippet></ROW><ROW><id>16871392</id><snippet>thread</snippet></ROW><ROW><id>16871392</id><snippet>threading.Thread</snippet></ROW><ROW><id>16871392</id><snippet>sendmail()</snippet></ROW><ROW><id>16871392</id><snippet>threading.Thread(target=sendmail).start()
</snippet></ROW><ROW><id>16871392</id><snippet>import threading
</snippet></ROW><ROW><id>16871465</id><snippet>csv</snippet></ROW><ROW><id>16871465</id><snippet>pickle.dumps()</snippet></ROW><ROW><id>16871465</id><snippet>import csv

with open(outputfilename, 'wb') as out:
    writer = csv.writer(out, delimiter='\t')
    writer.writerow(['20120305', 'xxxxx', pickle.dumps(result)])
</snippet></ROW><ROW><id>16871465</id><snippet>csv</snippet></ROW><ROW><id>16871465</id><snippet>csv.reader()</snippet></ROW><ROW><id>16871465</id><snippet>pickle.loads()</snippet></ROW><ROW><id>16871709</id><snippet>id</snippet></ROW><ROW><id>16871709</id><snippet>from collections import defaultdict

def load(fileIn, fileOut):
    with open(fileIn+'.txt') as fin:
        frame_rects = defaultdict(list)

        for row in (map(int, line.split()) for line in fin):
            frame, rect = row[2], [row[3],row[4],row[5],row[6]]
            frame_rects[frame].append(rect)
        fin.close()
        with open(fileOut+'.txt', 'w') as fout:
            for frame, rects in sorted(frame_rects.iteritems()):
                fout.write('{{{}:{}}}\n'.format(frame, rects))

load('filein', 'fileout')
</snippet></ROW><ROW><id>16871709</id><snippet>{1:[[561, 1, 20, 28], [101, 549, 40, 28]]}
{2:[[557, 1, 24, 32], [100, 549, 40, 28]]}
{3:[[557, 5, 24, 32], [98, 549, 40, 28]]}
{4:[[553, 5, 28, 32], [91, 551, 40, 28]]}
{5:[[553, 1, 36, 40], [93, 549, 40, 28]]}
</snippet></ROW><ROW><id>16871776</id><snippet>.renderContents()</snippet></ROW><ROW><id>16871776</id><snippet>&gt;&gt;&gt; Item0.contents[0]
u'Apple iPod Classic 160GB (Black)\xc2\xa0\r\n\t\t\t\t\t\t\t\t\t\t\t'
&gt;&gt;&gt; Item0.contents[0].strip()
u'Apple iPod Classic 160GB (Black)\xc2'
</snippet></ROW><ROW><id>16871776</id><snippet>&gt;&gt;&gt; soup.originalEncoding
'iso-8859-1'
</snippet></ROW><ROW><id>16871776</id><snippet>&gt;&gt;&gt; page.info().getparam('charset')
'utf-8'
&gt;&gt;&gt; page=urllib2.urlopen(url)
&gt;&gt;&gt; soup = BeautifulSoup(page.read(), fromEncoding=page.info().getparam('charset'))
&gt;&gt;&gt; Item0=soup.findAll('td',{'class':'check_title'})[0]
&gt;&gt;&gt; Item0.contents[0].strip()
u'Apple iPod Classic 160GB (Black)'
</snippet></ROW><ROW><id>16871776</id><snippet>fromEncoding</snippet></ROW><ROW><id>16872055</id><snippet>unicode</snippet></ROW><ROW><id>16872069</id><snippet>os.system("xfce4-terminal -e 'bash -c \"echo hello ; /bin/bash ; exit 0\"'")
</snippet></ROW><ROW><id>16872069</id><snippet>/usr/bin/usb-devices</snippet></ROW><ROW><id>16872069</id><snippet>os.system("xfce4-terminal -e /usr/bin/usb-devices")
</snippet></ROW><ROW><id>16872078</id><snippet>'symlog'</snippet></ROW><ROW><id>16872078</id><snippet>ax.set_xscale</snippet></ROW><ROW><id>16872078</id><snippet>lintreshx</snippet></ROW><ROW><id>16872078</id><snippet>lintreshy</snippet></ROW><ROW><id>16872078</id><snippet>ax.set_yscale</snippet></ROW><ROW><id>16872078</id><snippet>lintreshx=(-lintresh,lintresh)</snippet></ROW><ROW><id>16872078</id><snippet>ax.set_xscale('symlog')
ax.set_yscale('symlog')
ax.axis([-10,45,-10,45])
</snippet></ROW><ROW><id>16872104</id><snippet>g=0
def smooth(self, a, b):
</snippet></ROW><ROW><id>16872104</id><snippet>smooth</snippet></ROW><ROW><id>16872104</id><snippet>g</snippet></ROW><ROW><id>16872104</id><snippet>global</snippet></ROW><ROW><id>16872104</id><snippet>MyClass.g</snippet></ROW><ROW><id>16872104</id><snippet>__class__.g</snippet></ROW><ROW><id>16872179</id><snippet>magic</snippet></ROW><ROW><id>16872179</id><snippet>mimetypes.guess_extension()</snippet></ROW><ROW><id>16872245</id><snippet>__getattr__</snippet></ROW><ROW><id>16872245</id><snippet>__delattr__</snippet></ROW><ROW><id>16872245</id><snippet>__setattr__</snippet></ROW><ROW><id>16872245</id><snippet>hasattr</snippet></ROW><ROW><id>16872245</id><snippet>getattr</snippet></ROW><ROW><id>16872245</id><snippet>delattr</snippet></ROW><ROW><id>16872245</id><snippet>setattr</snippet></ROW><ROW><id>16872245</id><snippet>&gt;&gt;&gt; def foo():
...     if not hasattr(Singleton, "_instance"):
...         with Singleton._instance_lock:
...             if not hasattr(Singleton, "_instance"):
...                 Singleton._instance = Singleton()
...     return Singleton._instance
... 
&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_GLOBAL              0 (hasattr)
              3 LOAD_GLOBAL              1 (Singleton)
              6 LOAD_CONST               1 ('_instance')
              9 CALL_FUNCTION            2
             12 POP_JUMP_IF_TRUE        64

  3          15 LOAD_GLOBAL              1 (Singleton)
             18 LOAD_ATTR                2 (_instance_lock)
             21 SETUP_WITH              35 (to 59)
             24 POP_TOP             

  4          25 LOAD_GLOBAL              0 (hasattr)
             28 LOAD_GLOBAL              1 (Singleton)
             31 LOAD_CONST               1 ('_instance')
             34 CALL_FUNCTION            2
             37 POP_JUMP_IF_TRUE        55

  5          40 LOAD_GLOBAL              1 (Singleton)
             43 CALL_FUNCTION            0
             46 LOAD_GLOBAL              1 (Singleton)
             49 STORE_ATTR               3 (_instance)
             52 JUMP_FORWARD             0 (to 55)
        &gt;&gt;   55 POP_BLOCK           
             56 LOAD_CONST               0 (None)
        &gt;&gt;   59 WITH_CLEANUP        
             60 END_FINALLY         
             61 JUMP_FORWARD             0 (to 64)

  6     &gt;&gt;   64 LOAD_GLOBAL              1 (Singleton)
             67 LOAD_ATTR                3 (_instance)
             70 RETURN_VALUE        
</snippet></ROW><ROW><id>16872245</id><snippet>hasattr</snippet></ROW><ROW><id>16872245</id><snippet>getattr()</snippet></ROW><ROW><id>16872245</id><snippet>__getattr__</snippet></ROW><ROW><id>16872245</id><snippet>STORE_ATTR</snippet></ROW><ROW><id>16872245</id><snippet>__setattr__</snippet></ROW><ROW><id>16872245</id><snippet>Singleton</snippet></ROW><ROW><id>16872272</id><snippet>null</snippet></ROW><ROW><id>16872272</id><snippet>None</snippet></ROW><ROW><id>16872272</id><snippet>ans = foo()
if ans is None:
     # blablabla
</snippet></ROW><ROW><id>16872272</id><snippet>ans = foo()
if ans:
     # blablabla
</snippet></ROW><ROW><id>16872649</id><snippet>$ ffmpeg -s 352x288 -i foreman_cif_frame_0.yuv f.png
ffmpeg version N-46810-g7750c48 Copyright (c) 2000-2012 the FFmpeg developers
  built on Apr 21 2013 11:12:24 with gcc 4.6 (Ubuntu/Linaro 4.6.3-1ubuntu5)
  configuration: --enable-gpl --enable-libx264 --enable-libmp3lame
  libavutil      52.  7.100 / 52.  7.100
  libavcodec     54. 71.100 / 54. 71.100
  libavformat    54. 36.100 / 54. 36.100
  libavdevice    54.  3.100 / 54.  3.100
  libavfilter     3. 23.100 /  3. 23.100
  libswscale      2.  1.102 /  2.  1.102
  libswresample   0. 16.100 /  0. 16.100
  libpostproc    52.  1.100 / 52.  1.100
[rawvideo @ 0x18a1320] Estimating duration from bitrate, this may be inaccurate
Input #0, rawvideo, from 'foreman_cif_frame_0.yuv':
  Duration: N/A, start: 0.000000, bitrate: N/A
    Stream #0:0: Video: rawvideo (I420 / 0x30323449), yuv420p, 352x288, 25 tbr, 25 tbn, 25 tbc
Output #0, image2, to 'f.png':
  Metadata:
    encoder         : Lavf54.36.100
    Stream #0:0: Video: png, rgb24, 352x288, q=2-31, 200 kb/s, 90k tbn, 25 tbc
Stream mapping:
  Stream #0:0 -&gt; #0:0 (rawvideo -&gt; png)
Press [q] to stop, [?] for help
frame=    1 fps=0.0 q=0.0 Lsize=       0kB time=00:00:00.04 bitrate=   0.0kbits/s    
video:201kB audio:0kB subtitle:0 global headers:0kB muxing overhead -100.000000%
</snippet></ROW><ROW><id>16872649</id><snippet>$ convert -size 352x288 -depth 8 foreman_cif_frame_0.yuv f2.png 
</snippet></ROW><ROW><id>16872649</id><snippet>$ compare -compose src f.png f2.png diff.png
</snippet></ROW><ROW><id>16872649</id><snippet># Here I'm assuming you get the data from the drone into parameter raw
# 1 frame contains 640*480*3/2 = 460800 bytes
import numpy as np

# turn raw into a numpy array
raw = np.array(raw)

# calculate where each plane starts and stops
wh = 640 * 480
p = (0, wh, wh, wh/4*5, wh/4*5, wh/2*3)

# Now use slizing to extract the different planes
yy = np.empty(640*480, dtype=np.uint8)
cb = np.empty(640*480/4, dtype=np.uint8)
cb = np.empty(640*480/4, dtype=np.uint8)

yy = raw[p[0]:p[1]]
cb = raw[p[2]:p[3]]
cr = raw[p[4]:p[5]]
</snippet></ROW><ROW><id>16872649</id><snippet>yy.reshape([480, 640])
cb.reshape([480 / 2, 640 / 2])
cr.reshape([480 / 2, 640 / 2])
</snippet></ROW><ROW><id>16872904</id><snippet>try:
    if idx1 &lt; 0 or idx2 &lt; 0: raise IndexError()
    array[idx1][idx2]
except IndexError:
    # do stuff
</snippet></ROW><ROW><id>16873347</id><snippet>re.search(r"[ ]+((\d+)d)?.*left &lt;br /&gt;", text).groups()
</snippet></ROW><ROW><id>16873347</id><snippet>re.search(r"((\d+)d)?.*left &lt;br /&gt;", text.strip()).groups()
</snippet></ROW><ROW><id>16873383</id><snippet>A</snippet></ROW><ROW><id>16873383</id><snippet>&gt;&gt;&gt; s = "DFDAXDJSDSJDAFGCJASDJASAGXCJAD"
&gt;&gt;&gt; s.split('A')
['DFD', 'XDJSDSJD', 'FGCJ', 'SDJ', 'S', 'GXCJ', 'D']

# add a leading `A` to each match 'on the fly'
&gt;&gt;&gt; [ 'A%s' % s for s in  s.split('A') ]
['ADFD', 'AXDJSDSJD', 'AFGCJ', 'ASDJ', 'AS', 'AGXCJ', 'AD']
</snippet></ROW><ROW><id>16873383</id><snippet>&gt;&gt;&gt; re.findall('(A[^A]+(?=A)?)', s, re.IGNORECASE | re.MULTILINE)
['AXDJSDSJD', 'AFGCJ', 'ASDJ', 'AS', 'AGXCJ', 'AD']
</snippet></ROW><ROW><id>16873383</id><snippet>&gt;&gt;&gt; re.findall('(A[^A]+)', s, re.IGNORECASE | re.MULTILINE)
['AXDJSDSJD', 'AFGCJ', 'ASDJ', 'AS', 'AGXCJ', 'AD']
</snippet></ROW><ROW><id>16873411</id><snippet>MCD</snippet></ROW><ROW><id>16873411</id><snippet>Frazione</snippet></ROW><ROW><id>16873411</id><snippet>def MCD(m, n):
    if m % n == 0:
        return n
    else:
        return MCD(n, m % n)

class Frazione:
    # as before but without MCD
</snippet></ROW><ROW><id>16873411</id><snippet>self.MCD</snippet></ROW><ROW><id>16873411</id><snippet>__init__</snippet></ROW><ROW><id>16873675</id><snippet>&gt;&gt;&gt; LL = ["this","is","a","sample","list"]
&gt;&gt;&gt; dict(enumerate(LL))
{0: 'this', 1: 'is', 2: 'a', 3: 'sample', 4: 'list'}
</snippet></ROW><ROW><id>16873680</id><snippet>a=new_a[:]
</snippet></ROW><ROW><id>16873680</id><snippet>a</snippet></ROW><ROW><id>16873680</id><snippet>a</snippet></ROW><ROW><id>16873680</id><snippet>new_a = [v for i, v in enumerate(a) if i not in aleaindex]
while a:
    a.pop()
    a[:] = new_a[:]
</snippet></ROW><ROW><id>16873680</id><snippet>&gt;&gt;&gt; a = [1,2,3,4]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; print b
[1, 2, 3, 4]
&gt;&gt;&gt; a[:] = [2,3]
&gt;&gt;&gt; print b
[2, 3]
&gt;&gt;&gt; a = [5]
&gt;&gt;&gt; print b
[2, 3]
</snippet></ROW><ROW><id>16873680</id><snippet>&gt;&gt;&gt; def f(a):
...     a[0] = 2
&gt;&gt;&gt; b = [3]
&gt;&gt;&gt; f(b)
&gt;&gt;&gt; print b
[2]
</snippet></ROW><ROW><id>16873737</id><snippet>"Your new price is: $"(float(price) * 0.1)
</snippet></ROW><ROW><id>16873737</id><snippet>(..)</snippet></ROW><ROW><id>16873737</id><snippet>&gt;&gt;&gt; "Hello World!"(42)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object is not callable
</snippet></ROW><ROW><id>16873737</id><snippet>str()</snippet></ROW><ROW><id>16873737</id><snippet>easygui.msgbox("Your new price is: $" + str(float(price) * 0.1))
</snippet></ROW><ROW><id>16873737</id><snippet>easygui.msgbox("Your new price is: $" + str(float(price) * 0.2))
</snippet></ROW><ROW><id>16873737</id><snippet>str.format()</snippet></ROW><ROW><id>16873737</id><snippet>easygui.msgbox("Your new price is: ${:.2f}".format(float(price) * 0.1))
easygui.msgbox("Your new price is: ${:.2f}".format(float(price) * 0.2))
</snippet></ROW><ROW><id>16873737</id><snippet>{:02.2f}</snippet></ROW><ROW><id>16873755</id><snippet>import numpy as np
def blockshaped(arr, nrows, ncols):
    """
    Return an array of shape (n, nrows, ncols) where
    n * nrows * ncols = arr.size

    If arr is a 2D array, the returned array looks like n subblocks with
    each subblock preserving the "physical" layout of arr.
    """
    h, w = arr.shape
    return (arr.reshape(h//nrows, nrows, -1, ncols)
               .swapaxes(1,2)
               .reshape(-1, nrows, ncols))


def unblockshaped(arr, h, w):
    """
    Return an array of shape (h, w) where
    h * w = arr.size

    If arr is of shape (n, nrows, ncols), n sublocks of shape (nrows, ncols),
    then the returned array preserves the "physical" layout of the sublocks.
    """
    n, nrows, ncols = arr.shape
    return (arr.reshape(h//nrows, -1, nrows, ncols)
               .swapaxes(1,2)
               .reshape(h, w))
</snippet></ROW><ROW><id>16873755</id><snippet>c = np.arange(24).reshape((4,6))
print(c)
# [[ 0  1  2  3  4  5]
#  [ 6  7  8  9 10 11]
#  [12 13 14 15 16 17]
#  [18 19 20 21 22 23]]

print(blockshaped(c, 2, 3))
# [[[ 0  1  2]
#   [ 6  7  8]]

#  [[ 3  4  5]
#   [ 9 10 11]]

#  [[12 13 14]
#   [18 19 20]]

#  [[15 16 17]
#   [21 22 23]]]

print(unblockshaped(blockshaped(c, 2, 3), 4, 6))
# [[ 0  1  2  3  4  5]
#  [ 6  7  8  9 10 11]
#  [12 13 14 15 16 17]
#  [18 19 20 21 22 23]]
</snippet></ROW><ROW><id>16873881</id><snippet>__import__</snippet></ROW><ROW><id>16873881</id><snippet>traceback</snippet></ROW><ROW><id>16873881</id><snippet>import sys
from pprint import pprint

try:
    __import__(sys.argv[1])
except Exception as e:
    my_traceback = sys.exc_info()[2]

# Print locals for my stack frame
#pprint(my_traceback.tb_frame.f_locals)

# Print locals for other stack frame
other_traceback = my_traceback.tb_next
pprint(other_traceback.tb_frame.f_locals)
</snippet></ROW><ROW><id>16873881</id><snippet>traceback</snippet></ROW><ROW><id>16873881</id><snippet>frame</snippet></ROW><ROW><id>16873881</id><snippet>inspect.getargvalues(callee_named_tuple[0])</snippet></ROW><ROW><id>16873881</id><snippet>inspect</snippet></ROW><ROW><id>16873881</id><snippet>traceback</snippet></ROW><ROW><id>16873881</id><snippet>i</snippet></ROW><ROW><id>16873881</id><snippet>i=None</snippet></ROW><ROW><id>16873881</id><snippet>__import__</snippet></ROW><ROW><id>16873881</id><snippet>execfile()</snippet></ROW><ROW><id>16873881</id><snippet>import sys

try:
    execfile(sys.argv[1])
except Exception as e:
    the_value_of_i = sys.exc_info()[2].tb_next.tb_frame.f_locals['i']
    print 'The value of "i" was "%r"' % the_value_of_i
</snippet></ROW><ROW><id>16873881</id><snippet>The value of "i" was "6"
</snippet></ROW><ROW><id>16873895</id><snippet>%r</snippet></ROW><ROW><id>16873895</id><snippet>repr()</snippet></ROW><ROW><id>16873895</id><snippet>y</snippet></ROW><ROW><id>16873895</id><snippet>&gt;&gt;&gt; "Hello World!"
'Hello World!'
&gt;&gt;&gt; '\'Hello World!\', he said'
"'Hello World!', he said"
&gt;&gt;&gt; "\"Hello World!\", he said"
'"Hello World!", he said'
&gt;&gt;&gt; '"Hello World!", doesn\'t cut it anymore'
'"Hello World!", doesn\'t cut it anymore'
</snippet></ROW><ROW><id>16873895</id><snippet>\'</snippet></ROW><ROW><id>16873928</id><snippet>any()</snippet></ROW><ROW><id>16873928</id><snippet>print any("sangamesh" in a for a in lst)
</snippet></ROW><ROW><id>16873928</id><snippet>True</snippet></ROW><ROW><id>16873928</id><snippet>a</snippet></ROW><ROW><id>16873928</id><snippet>True</snippet></ROW><ROW><id>16873928</id><snippet>break</snippet></ROW><ROW><id>16873928</id><snippet>for a in lst:
    if "sangamesh" in a:
        print True
        break
else:
    print False
</snippet></ROW><ROW><id>16873928</id><snippet>else</snippet></ROW><ROW><id>16873928</id><snippet>for</snippet></ROW><ROW><id>16873928</id><snippet>else</snippet></ROW><ROW><id>16873928</id><snippet>break</snippet></ROW><ROW><id>16873928</id><snippet>else</snippet></ROW><ROW><id>16873968</id><snippet>len(max(inputsentence, key=len))</snippet></ROW><ROW><id>16873968</id><snippet>for</snippet></ROW><ROW><id>16873968</id><snippet>inputcorpus</snippet></ROW><ROW><id>16873968</id><snippet>maxlength = 0
maxwords = [ ]  # unnecessary: will be re-initialized below
for word in inputcorpus:
    if len(word) &gt; maxlength:
        maxlength = len(word)
        maxwords = [ word ]
    elif len(word) == maxlength:
        maxwords.append(word)
</snippet></ROW><ROW><id>16873968</id><snippet>set( )</snippet></ROW><ROW><id>16874261</id><snippet>map(lambda a: function(a[0], **a[1]), arguments)
</snippet></ROW><ROW><id>16874261</id><snippet>(function(a, **k) for a, k in arguments)
[function(a, **k) for a, k in arguments]
</snippet></ROW><ROW><id>16874261</id><snippet>map()</snippet></ROW><ROW><id>16874261</id><snippet>map()</snippet></ROW><ROW><id>16874494</id><snippet>multiprocessing</snippet></ROW><ROW><id>16874494</id><snippet>threading</snippet></ROW><ROW><id>16874649</id><snippet>scatter</snippet></ROW><ROW><id>16874649</id><snippet>fig = plt.figure()
ax = fig.add_subplot(111, aspect='equal')

# initialize a plot to determine the distance between the data points in pixel:    
x = [1, 2, 3, 4, 2, 3, 3]
y = [0, 0, 0, 0, 1, 1, 2]
s = 0.0
points = ax.scatter(x,y,s=s,marker='s')
ax.axis([min(x)-1., max(x)+1., min(y)-1., max(y)+1.])

# retrieve the pixel information:
xy_pixels = ax.transData.transform(np.vstack([x,y]).T)
xpix, ypix = xy_pixels.T

# In matplotlib, 0,0 is the lower left corner, whereas it's usually the upper 
# right for most image software, so we'll flip the y-coords
width, height = fig.canvas.get_width_height()
ypix = height - ypix

# this assumes that your data-points are equally spaced
s1 = xpix[1]-xpix[0]

points = ax.scatter(x,y,s=s1**2.,marker='s',edgecolors='none')
ax.axis([min(x)-1., max(x)+1., min(y)-1., max(y)+1.])

fig.savefig('test.png', dpi=fig.dpi)
</snippet></ROW><ROW><id>16874649</id><snippet>s1</snippet></ROW><ROW><id>16874649</id><snippet>s1 = xpix[1]-xpix[0] - 13. 
</snippet></ROW><ROW><id>16874649</id><snippet>13.</snippet></ROW><ROW><id>16874649</id><snippet>patches</snippet></ROW><ROW><id>16874649</id><snippet>scatter</snippet></ROW><ROW><id>16874649</id><snippet>from matplotlib.patches import Rectangle  
</snippet></ROW><ROW><id>16874649</id><snippet>x = [1, 2, 3, 4, 2, 3, 3]
y = [0, 0, 0, 0, 1, 1, 2]
z = ['b', 'g', 'r', 'c', 'm', 'y', 'k'] # in your case, this is data
dx = [x[1]-x[0]]*len(x)   # assuming equally spaced data-points

# you can use the colormap like this in your case:
# cmap = plt.cm.hot 

fig = plt.figure()
ax = fig.add_subplot(111, aspect='equal')
ax.axis([min(x)-1., max(x)+1., min(y)-1., max(y)+1.])

for x, y, c, h in zip(x, y, z, dx):
    ax.add_artist(Rectangle(xy=(x-h/2., y-h/2.), 
                  color=c,             # or, in your case: color=cmap(c)                  
                  width=h, height=h))  # Gives a square of area h*h

fig.savefig('test.png')
</snippet></ROW><ROW><id>16874649</id><snippet>Rectangle</snippet></ROW><ROW><id>16874649</id><snippet>x-h/2.</snippet></ROW><ROW><id>16874755</id><snippet>datetime.replace()</snippet></ROW><ROW><id>16874755</id><snippet>from_date = today.replace(day=day)
</snippet></ROW><ROW><id>16874801</id><snippet>fat_cat = """ &lt;-- here?
I'll do a list:
</snippet></ROW><ROW><id>16874801</id><snippet>fat_cat = """I'll do a list:
...
</snippet></ROW><ROW><id>16874982</id><snippet>dump</snippet></ROW><ROW><id>16874982</id><snippet>dumps</snippet></ROW><ROW><id>16874982</id><snippet>&gt;&gt;&gt; str_obj = pickle.dumps([1,2,3])
&gt;&gt;&gt; str_obj
'(lp0\nI1\naI2\naI3\na.'
</snippet></ROW><ROW><id>16875160</id><snippet>psycopg2</snippet></ROW><ROW><id>16875160</id><snippet>psqlODBC</snippet></ROW><ROW><id>16875160</id><snippet>psycopg2</snippet></ROW><ROW><id>16875160</id><snippet>libpq</snippet></ROW><ROW><id>16875443</id><snippet>.findall()</snippet></ROW><ROW><id>16875443</id><snippet>L = re.findall(r"(?:http|https)://[^/\"]+/", site_str)
</snippet></ROW><ROW><id>16875443</id><snippet>s</snippet></ROW><ROW><id>16875443</id><snippet>s?</snippet></ROW><ROW><id>16875443</id><snippet>L = re.findall(r'https?://[^/"]+/', site_str)
</snippet></ROW><ROW><id>16875443</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; example = '''
... "http://someserver.com/"
... "https://anotherserver.com/with/path"
... '''
&gt;&gt;&gt; re.findall(r'https?://[^/"]+/', example)
['http://someserver.com/', 'https://anotherserver.com/']
</snippet></ROW><ROW><id>16875728</id><snippet>names</snippet></ROW><ROW><id>16875728</id><snippet>tree.findAll()</snippet></ROW><ROW><id>16875728</id><snippet>names</snippet></ROW><ROW><id>16875728</id><snippet>names = []
for item in tree.findAll('item'):
    names.append({
      'id': item.id.string,
      'title': __decodefunction(item.entitle.string)
    })
</snippet></ROW><ROW><id>16875874</id><snippet>setattr</snippet></ROW><ROW><id>16875874</id><snippet>objects</snippet></ROW><ROW><id>16875874</id><snippet>globals</snippet></ROW><ROW><id>16875874</id><snippet>__init__.py</snippet></ROW><ROW><id>16875874</id><snippet>objDict = {obj[0]: Place(*obj) for obj in objdict['places']}
globals().update(objDict)
</snippet></ROW><ROW><id>16875874</id><snippet>object.Moon</snippet></ROW><ROW><id>16875874</id><snippet>objects</snippet></ROW><ROW><id>16875874</id><snippet>objects</snippet></ROW><ROW><id>16875874</id><snippet>myFunc</snippet></ROW><ROW><id>16875874</id><snippet>myFunc</snippet></ROW><ROW><id>16875874</id><snippet>__init__.py</snippet></ROW><ROW><id>16875874</id><snippet>initGlobals</snippet></ROW><ROW><id>16875916</id><snippet>pygame.PixelArray</snippet></ROW><ROW><id>16875916</id><snippet>pygame.PixelArray.replace()</snippet></ROW><ROW><id>16876010</id><snippet>spmatrix</snippet></ROW><ROW><id>16876010</id><snippet>__mul__()</snippet></ROW><ROW><id>16876010</id><snippet>class spmatrix(object):
    ...
    def __mul__(self, other):
        ...
        M,N = self.shape
        if other.__class__ is np.ndarray:
            # Fast path for the most common case
            if other.shape == (N,):
                return self._mul_vector(other)
            elif other.shape == (N, 1):
                return self._mul_vector(other.ravel()).reshape(M, 1)
            elif other.ndim == 2  and other.shape[0] == N:
                return self._mul_multivector(other)
</snippet></ROW><ROW><id>16876010</id><snippet>_mul_vector()</snippet></ROW><ROW><id>16876010</id><snippet>compressed.py</snippet></ROW><ROW><id>16876010</id><snippet>_cs_matrix</snippet></ROW><ROW><id>16876010</id><snippet>def _mul_vector(self, other):
    M,N = self.shape

    # output array
    result = np.zeros(M, dtype=upcast_char(self.dtype.char,
                                           other.dtype.char))

    # csr_matvec or csc_matvec
    fn = getattr(sparsetools,self.format + '_matvec')
    fn(M, N, self.indptr, self.indices, self.data, other, result)

    return result
</snippet></ROW><ROW><id>16876010</id><snippet>ndim==2</snippet></ROW><ROW><id>16876010</id><snippet>vec = np.array([[1,2,3,4],
                [1,2,3,4]])
</snippet></ROW><ROW><id>16876010</id><snippet>A * vec.T</snippet></ROW><ROW><id>16876010</id><snippet>A * mat(vec)
#ValueError: dimension mismatch
</snippet></ROW><ROW><id>16876010</id><snippet>A * mat(vec).T</snippet></ROW><ROW><id>16876028</id><snippet>"additionalProperties": False</snippet></ROW><ROW><id>16876028</id><snippet>type_one = {
    "type": "object",
    "additionalProperties": False,
    "properties": {
        "one": {"type": "string"}
    }
}

type_two = {
    "type": "object",
    "additionalProperties": False,
    "properties": {
        "one": {"type": "string"},
        "two": {"type": "string"}
    }
}

general_type = {
    "type": [type_one, type_two]
}
</snippet></ROW><ROW><id>16876028</id><snippet>"one": "string"</snippet></ROW><ROW><id>16876028</id><snippet>"one": {"type": "string"}</snippet></ROW><ROW><id>16876028</id><snippet>data_one = {
    "one": "blablabla"
}

data_two = {
    "one": "blablabla",
    "two": "blablabla"
}
</snippet></ROW><ROW><id>16876028</id><snippet>import validictory

# additional property 'two' not defined by 'properties' are not allowed
validictory.validate(data_two, type_one)

# Required field 'two' is missing
validictory.validate(data_one, type_two)

# All valid
validictory.validate(data_one, type_one)
validictory.validate(data_two, type_two)

validictory.validate(data_one, general_type)
validictory.validate(data_two, general_type)
</snippet></ROW><ROW><id>16876123</id><snippet>No</snippet></ROW><ROW><id>16876123</id><snippet>start_requests</snippet></ROW><ROW><id>16876123</id><snippet>def start_requests(self):
    for url in self.start_urls:
        yield self.make_requests_from_url(url)

def make_requests_from_url(self, url):
    return Request(url, dont_filter=True)
</snippet></ROW><ROW><id>16876123</id><snippet>Requests</snippet></ROW><ROW><id>16876123</id><snippet>make_requests_from_url</snippet></ROW><ROW><id>16876123</id><snippet>start_requests</snippet></ROW><ROW><id>16876123</id><snippet>Requests</snippet></ROW><ROW><id>16876123</id><snippet>priority</snippet></ROW><ROW><id>16876123</id><snippet>yield Request(url, meta={'priority': 0})</snippet></ROW><ROW><id>16876123</id><snippet>priority</snippet></ROW><ROW><id>16876123</id><snippet>start_requests</snippet></ROW><ROW><id>16876123</id><snippet>def start_requests(self):
    with codecs.open(self.file_path, u"r", encoding=u"GB18030") as f:
        for index, line in enumerate(f):
            try:
                url = line.strip()
                yield Request(url, meta={'priority': index})
            except:
                continue
</snippet></ROW><ROW><id>16876288</id><snippet>%</snippet></ROW><ROW><id>16876288</id><snippet>%run</snippet></ROW><ROW><id>16876288</id><snippet>%debug</snippet></ROW><ROW><id>16876383</id><snippet>t.w.x.withRequest</snippet></ROW><ROW><id>16876383</id><snippet>request</snippet></ROW><ROW><id>16876501</id><snippet>http://localhost:9082/images/4762397176758272
</snippet></ROW><ROW><id>16876501</id><snippet>enctype="multipart/form-data"</snippet></ROW><ROW><id>16876501</id><snippet>{{app.key().id()}}</snippet></ROW><ROW><id>16876501</id><snippet>{{app.key.id}}</snippet></ROW><ROW><id>16876636</id><snippet>sensor_name</snippet></ROW><ROW><id>16876636</id><snippet>serial_number</snippet></ROW><ROW><id>16876636</id><snippet>"""
struct PicamCameraID {
  PicamModel             model;
  PicamComputerInterface computer_interface;
  pichar                 sensor_name[PicamStringSize_SensorName];
  pichar                 serial_number[PicamStringSize_SerialNumber]; 
};
"""
import ctypes as c

PicamStringSize_SensorName = PicamStringSize_SerialNumber = 64
PicamModel = PicamComputerInterface = c.c_int
pichar = c.c_char

class PicamCameraID(c.Structure):
    _fields_ = [("model", PicamModel),
                ("computer_interface", PicamComputerInterface),
                ("sensor_name", pichar * PicamStringSize_SensorName),
                ("serial_number", pichar * PicamStringSize_SerialNumber)]
</snippet></ROW><ROW><id>16876636</id><snippet>pointer()</snippet></ROW><ROW><id>16876636</id><snippet>ctypes</snippet></ROW><ROW><id>16876636</id><snippet>Picam_ConnectDemoCamera()</snippet></ROW><ROW><id>16876636</id><snippet>"""
Picam_ConnectDemoCamera(PicamModel model, const pichar* serial_number,
                        PicamCameraID* id)
"""
pichar_p = c.c_char_p # assume '\0'-terminated C strings
Picam_ConnectDemoCamera.argtypes = [PicamModel, pichar_p,
                                    c.POINTER(PicamCameraID)]
Picam_ConnectDemoCamera.restype = c.c_int # assume it returns C int
</snippet></ROW><ROW><id>16876636</id><snippet>picam_id = PicamCameraID()
rc = Picam_ConnectDemoCamera(2, "serial number here", c.byref(picam_id))
print(rc)
print(picam_id.sensor_name.value) # C string
print(picam_id.sensor_name.raw)   # raw memory
</snippet></ROW><ROW><id>16876713</id><snippet>from matplotlib import pyplot as plt
import numpy as np

plt.plot(np.arange(10))
plt.show()
</snippet></ROW><ROW><id>16876713</id><snippet>ipython notebook
</snippet></ROW><ROW><id>16876794</id><snippet>dictonary.update( s = b.string, i = b.integer )
</snippet></ROW><ROW><id>16876794</id><snippet>s</snippet></ROW><ROW><id>16876794</id><snippet>i</snippet></ROW><ROW><id>16876794</id><snippet>b.string</snippet></ROW><ROW><id>16876794</id><snippet>b.integer</snippet></ROW><ROW><id>16876794</id><snippet>dictonary.update((b.string, b.integer))
</snippet></ROW><ROW><id>16876794</id><snippet>dictonary[b.string] = b.integer
</snippet></ROW><ROW><id>16876794</id><snippet>dictionary = {b.string: b.integer for b in boogeyman}
</snippet></ROW><ROW><id>16876794</id><snippet>enumerate()</snippet></ROW><ROW><id>16876794</id><snippet>1</snippet></ROW><ROW><id>16876794</id><snippet>boogeyman = [Dict_ator(char, i)) for i, char in enumerate("boogeyman", 1)]
</snippet></ROW><ROW><id>16876794</id><snippet>Dict_ator</snippet></ROW><ROW><id>16876794</id><snippet>enumerate()</snippet></ROW><ROW><id>16876794</id><snippet>dictionary = {char: i for i, char in enumerate('boogeyman', 1)}
</snippet></ROW><ROW><id>16876990</id><snippet>global img</snippet></ROW><ROW><id>16876990</id><snippet>picture()</snippet></ROW><ROW><id>16876990</id><snippet>PhotoImage</snippet></ROW><ROW><id>16876990</id><snippet>Canvas.create_image()</snippet></ROW><ROW><id>16876990</id><snippet>image</snippet></ROW><ROW><id>16876990</id><snippet>can.img = img</snippet></ROW><ROW><id>16876990</id><snippet>can = Canvas(root)</snippet></ROW><ROW><id>16876990</id><snippet>picture()</snippet></ROW><ROW><id>16876990</id><snippet>img</snippet></ROW><ROW><id>16876994</id><snippet>mkvirtualenv --python=python3 mynewenv
</snippet></ROW><ROW><id>16877102</id><snippet>import twitter</snippet></ROW><ROW><id>16877102</id><snippet>twitter.Twitter</snippet></ROW><ROW><id>16877102</id><snippet>twitter.Twitter</snippet></ROW><ROW><id>16877102</id><snippet>twitter.Api</snippet></ROW><ROW><id>16877135</id><snippet>lis = [['00553', ['01', '3.4']], ['00553', ['02', '2.1']],
      ['00551', ['02', '5.3']], ['00551', ['01', '5.3']],['00551', ['04', '5.3']]]
import operator
sorted = sorted(lis, key=operator.itemgetter(1))
</snippet></ROW><ROW><id>16877135</id><snippet>&gt;&gt;&gt; sorted
[['00553', ['01', '3.4']], ['00551', ['01', '5.3']], 
      ['00553', ['02', '2.1']], ['00551', ['02', '5.3']], ['00551', ['04', '5.3']]]
</snippet></ROW><ROW><id>16877354</id><snippet>7.</snippet></ROW><ROW><id>16877354</id><snippet>sort()</snippet></ROW><ROW><id>16877354</id><snippet>reverse()</snippet></ROW><ROW><id>16877354</id><snippet>sorted()</snippet></ROW><ROW><id>16877354</id><snippet>list_sorted = list(sorted(list_of_strings))
</snippet></ROW><ROW><id>16877393</id><snippet>return_color</snippet></ROW><ROW><id>16877393</id><snippet>return_color</snippet></ROW><ROW><id>16877393</id><snippet>get_color</snippet></ROW><ROW><id>16877393</id><snippet>def get_color()
    # Initialize the attributes with a default value
    self.r = ''
    self.g = ''
    self.b = ''
    # ...
    root.mainloop()
    return self.r, self.g, self.b

def return_color(self):
    # Entry.get returns a string, don't need to call to str()
    self.r = self.enter1.get()
    self.g = self.enter2.get()
    self.b = self.enter3.get()
    root.destroy()
</snippet></ROW><ROW><id>16877439</id><snippet>json.loads</snippet></ROW><ROW><id>16877439</id><snippet>import json
import requests

response = requests.get(...)
json_data = json.loads(response.text)
</snippet></ROW><ROW><id>16877808</id><snippet>paralist = []</snippet></ROW><ROW><id>16877808</id><snippet>master = Tk() # since Tk() is already assigned to root this will make a new window
a = Entry(master) # a is already assigned to canvas
a.pack() # this is already declare under a=canvas
a.focus_set()
def callback():
    print (a.get())
</snippet></ROW><ROW><id>16877808</id><snippet>import random
from tkinter import *

root = Tk()

a = Canvas(root, width = 400, height = 400)
a.pack()
e = Entry(root)
e.pack()

paralist = []

x = random.randint(1,10)

file = open("teste.txt")
line = file.readline()

for line in file:
    paralist.append(line.replace("\n", ""));

a.create_text(200,50, text = "Typing Fun", width = 700, font = "Verdana", fill = "purple")
a.create_text(200,300, text = paralist[x], width = 700, font = "Times", fill = "purple")

b = Entry(root)
b.pack()
b.focus_set()

def callback():
    print (a.get()) 

root.mainloop()
</snippet></ROW><ROW><id>16877808</id><snippet>test0
test1
test2
test3
test4
test5
test6
test7
test8
test9
test10
</snippet></ROW><ROW><id>16877819</id><snippet>slugify</snippet></ROW><ROW><id>16877819</id><snippet>def myslugify(value):
    return slugify(value.replace(":", "-"))
</snippet></ROW><ROW><id>16877819</id><snippet>save()</snippet></ROW><ROW><id>16877819</id><snippet>slugify</snippet></ROW><ROW><id>16877842</id><snippet>sum</snippet></ROW><ROW><id>16877842</id><snippet>&gt;&gt;&gt; p = {'A' : 1, 'B' : 2, 'C' : 3}
&gt;&gt;&gt; q = ['A','B']
#using generator expression
&gt;&gt;&gt; sum(p.get(x,0) for x in q)
3
#using list comprehension, not memory efficient
&gt;&gt;&gt; sum( [p.get(x,0) for x in q] )
3
</snippet></ROW><ROW><id>16877842</id><snippet>q</snippet></ROW><ROW><id>16877842</id><snippet>p</snippet></ROW><ROW><id>16877842</id><snippet>dict.get</snippet></ROW><ROW><id>16877842</id><snippet>0</snippet></ROW><ROW><id>16877842</id><snippet>dict.get</snippet></ROW><ROW><id>16877842</id><snippet>&gt;&gt;&gt; print dict.get.__doc__
D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.
</snippet></ROW><ROW><id>16877842</id><snippet>sums = []
for x in q:                  #loop over each item in q            
    sums.append(p.get(x,0))  #fetch the value of item from p and append it to sums  
print sum(sums)              # sum the list sums
</snippet></ROW><ROW><id>16877842</id><snippet>(p.get(x,0) for x in q)</snippet></ROW><ROW><id>16877842</id><snippet>summ = 0
for x in q:
    summ += p.get(x,0)
print summ
</snippet></ROW><ROW><id>16877902</id><snippet>xlrd.__VERSION__</snippet></ROW><ROW><id>16877902</id><snippet>dir(xlrd)</snippet></ROW><ROW><id>16877923</id><snippet>f = open('kitten.jpeg', 'wb')
</snippet></ROW><ROW><id>16877923</id><snippet>open()</snippet></ROW><ROW><id>16877923</id><snippet>'\n'</snippet></ROW><ROW><id>16877923</id><snippet>'b'</snippet></ROW><ROW><id>16877923</id><snippet>shutil.copyfileob()</snippet></ROW><ROW><id>16877923</id><snippet>from shutil import copyfileobj

im = urllib2.urlopen(url)
with open('kitten.jpeg', 'wb') as out:
    copyfileobj(im, out)
</snippet></ROW><ROW><id>16877923</id><snippet>with</snippet></ROW><ROW><id>16878124</id><snippet>b_li = set()
output_list = []
b_li_add = b_li.add
output_list_append = output_list.append
for x in li:
    s = (x[0], x[2])
    if s not in b_li:
        b_li_add(s)
        output_list_append(x)
</snippet></ROW><ROW><id>16878124</id><snippet>set()</snippet></ROW><ROW><id>16878124</id><snippet>b_li</snippet></ROW><ROW><id>16878124</id><snippet>s</snippet></ROW><ROW><id>16878177</id><snippet>JsonResponse</snippet></ROW><ROW><id>16878177</id><snippet>super</snippet></ROW><ROW><id>16878177</id><snippet>HttpResponseBase</snippet></ROW><ROW><id>16878177</id><snippet>class JsonResponse(HttpResponse):
    def __init__(self, obj):
        super(JsonResponse, self).__init__(jsonpickle.encode(obj, unpicklable=False), 'application/json')
</snippet></ROW><ROW><id>16878337</id><snippet>from urllib import request
filename = '/Users/kyle/Desktop/html_test.html'

u = request.urlopen('http://www.ebay.com')
with open(filename, 'wb') as f: #notice the 'b' here
    f.write(u.read())

import webbrowser
webbrowser.open_new(filename)
</snippet></ROW><ROW><id>16878356</id><snippet>Parsers</snippet></ROW><ROW><id>16878356</id><snippet>FileParser</snippet></ROW><ROW><id>16878356</id><snippet>__init__.py</snippet></ROW><ROW><id>16878356</id><snippet>ctd.py</snippet></ROW><ROW><id>16878356</id><snippet>ctd.py</snippet></ROW><ROW><id>16878356</id><snippet>from ..Parsers import ctd</snippet></ROW><ROW><id>16878356</id><snippet>FileParser</snippet></ROW><ROW><id>16878356</id><snippet>sys.path</snippet></ROW><ROW><id>16878356</id><snippet>from Parsers import ctd</snippet></ROW><ROW><id>16878356</id><snippet>FileParser</snippet></ROW><ROW><id>16878356</id><snippet>sys.path</snippet></ROW><ROW><id>16878356</id><snippet>from FileParser.Parsers import ctd</snippet></ROW><ROW><id>16878384</id><snippet>login()</snippet></ROW><ROW><id>16878384</id><snippet>login(request, form.get_user())
</snippet></ROW><ROW><id>16878384</id><snippet>login</snippet></ROW><ROW><id>16878384</id><snippet>form.is_valid()</snippet></ROW><ROW><id>16878384</id><snippet>auth</snippet></ROW><ROW><id>16878384</id><snippet>login()</snippet></ROW><ROW><id>16878384</id><snippet>login()</snippet></ROW><ROW><id>16878384</id><snippet>login()</snippet></ROW><ROW><id>16878384</id><snippet>authenticate()</snippet></ROW><ROW><id>16878384</id><snippet>login()</snippet></ROW><ROW><id>16878384</id><snippet>from django.contrib.auth import authenticate, login

def my_view(request):
    username = request.POST['username']
    password = request.POST['password']
    user = authenticate(username=username, password=password)
    if user is not None:
        if user.is_active:
            login(request, user)
            # Redirect to a success page.
        else:
            # Return a 'disabled account' error message
    else:
        # Return an 'invalid login' error message.
</snippet></ROW><ROW><id>16878384</id><snippet>AuthenticationForm</snippet></ROW><ROW><id>16878389</id><snippet>where</snippet></ROW><ROW><id>16878389</id><snippet>"select a.b from a join b \nwhere a.id is not null"</snippet></ROW><ROW><id>16878389</id><snippet>(?is)select (.*) from (.*) where (?P&lt;where&gt;.*)</snippet></ROW><ROW><id>16878389</id><snippet>from re import *

x = "select a.b from a join b \nwhere a.id is not null"
y = match("select\s+(.*?)\s+from\s+(.*?)\s+where\s+(?P&lt;where&gt;.*)",
                                                            x, DOTALL)
print(y.groups())
print(y.groupdict())
</snippet></ROW><ROW><id>16878389</id><snippet>('a.b', 'a join b', 'a.id is not null')
{'where': 'a.id is not null'}
</snippet></ROW><ROW><id>16878411</id><snippet>iface = 'wlan0'
mac_addr = open('/sys/class/net/%s/address' % iface).read().rstrip()
</snippet></ROW><ROW><id>16878411</id><snippet>re</snippet></ROW><ROW><id>16878411</id><snippet>import subprocess, re

RE_MAC = re.compile(r'\bHWaddr\s+(((?(2):|)[\dA-Fa-f]{2}){6})\b')
match = RE_MAC.search(subprocess.check_output(["ifconfig", "wlan0"]))
if match:
    mac_addr = match.group(1)
</snippet></ROW><ROW><id>16878411</id><snippet>ether</snippet></ROW><ROW><id>16878411</id><snippet>HWaddr</snippet></ROW><ROW><id>16878435</id><snippet>fig = pylab.figure()
ax = fig.add_subplot(111)
ax.plot(freqs,modfreqp,color='black')
ax.plot(freqs1,modfreqp1,color='blue')
ax.plot(freqs2,modfreqp2,color='red')
show()
</snippet></ROW><ROW><id>16878567</id><snippet>&lt;span class="b"&gt;</snippet></ROW><ROW><id>16878567</id><snippet>import bs4 as bs


content = '''&lt;span class="number"&gt;5&lt;/span&gt;
&lt;span class="b"&gt;xxx&lt;/span&gt;&lt;span class "number"&gt;10&lt;/span&gt;'''

soup = bs.BeautifulSoup(content)
print(soup('span', {'class': 'b'})[0].next_sibling)
# &lt;span class=""&gt;10&lt;/span&gt;

print(soup('span', {'class': 'b'})[0].next_sibling.string)
# 10
</snippet></ROW><ROW><id>16878580</id><snippet>all</snippet></ROW><ROW><id>16878580</id><snippet>all(key in dict_obj for key in properties_to_check_for)
</snippet></ROW><ROW><id>16878580</id><snippet>for</snippet></ROW><ROW><id>16878580</id><snippet>all(dict_obj.get(key) is not None for key in properties_to_check_for)
</snippet></ROW><ROW><id>16878580</id><snippet>d.get(key)</snippet></ROW><ROW><id>16878580</id><snippet>None</snippet></ROW><ROW><id>16878754</id><snippet>import pygame
import sys

from pygame.locals import *


bif="bg.jpg"
mif="pkmn.png"


pygame.init()
FPS = 30  # changed for FPS
FPSCLOCK = pygame.time.Clock()  # changed for FPS

screen = pygame.display.set_mode ((600,375),0,32)
background = pygame.image.load(bif).convert()
mouse_c = pygame.image.load(mif).convert_alpha()

move_speed = 5  # changed for FPS
x, y = 0, 0

while True:

    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()

    pressed = pygame.key.get_pressed()
    if pressed[K_LEFT]:
        x -= move_speed
    if pressed[K_RIGHT]:
        x += move_speed
    if pressed[K_UP]:
        y -= move_speed
    if pressed[K_DOWN]:
        y += move_speed

    screen.blit(background,(0,0))
    screen.blit(mouse_c,(x,y))

    pygame.display.update()
    FPSCLOCK.tick(FPS)  # changed for FPS
</snippet></ROW><ROW><id>16878812</id><snippet>&gt;&gt;&gt; K
[4, 5, 1, 6, 2, 5, 2, 10]
&gt;&gt;&gt; sorted(range(len(K)), key=lambda x: K[x])
[2, 4, 6, 0, 1, 5, 3, 7]
&gt;&gt;&gt; sorted(range(len(K)), key=lambda x: K[x])[-5:]
[0, 1, 5, 3, 7]
</snippet></ROW><ROW><id>16878812</id><snippet>numpy</snippet></ROW><ROW><id>16878812</id><snippet>argsort</snippet></ROW><ROW><id>16878812</id><snippet>&gt;&gt;&gt; np.argsort(K)[-5:]
array([0, 1, 5, 3, 7])
</snippet></ROW><ROW><id>16878812</id><snippet>argsort</snippet></ROW><ROW><id>16878812</id><snippet>&gt;&gt;&gt; K = np.array(K)
&gt;&gt;&gt; K.argsort()[-5:]
array([0, 1, 5, 3, 7])
&gt;&gt;&gt; K[K.argsort()[-5:]]
array([ 4,  5,  5,  6, 10])
</snippet></ROW><ROW><id>16878914</id><snippet>for operator in ["+-", "*/"]:</snippet></ROW><ROW><id>16878914</id><snippet>"+-"</snippet></ROW><ROW><id>16878914</id><snippet>"*/"</snippet></ROW><ROW><id>16878914</id><snippet>strinput[p] in operator</snippet></ROW><ROW><id>16878914</id><snippet>strinput[p]</snippet></ROW><ROW><id>16878914</id><snippet>"+"</snippet></ROW><ROW><id>16878914</id><snippet>"-"</snippet></ROW><ROW><id>16878914</id><snippet>"*"</snippet></ROW><ROW><id>16878914</id><snippet>"/"</snippet></ROW><ROW><id>16878914</id><snippet>"+"</snippet></ROW><ROW><id>16878914</id><snippet>"-"</snippet></ROW><ROW><id>16878914</id><snippet>"*"</snippet></ROW><ROW><id>16878914</id><snippet>"/"</snippet></ROW><ROW><id>16878924</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; L = [3,5,0,6,8,9,7,0,1,0]
&gt;&gt;&gt; [list(g) for k, g in groupby(L, key=bool) if k]
[[3, 5], [6, 8, 9, 7], [1]]
</snippet></ROW><ROW><id>16878924</id><snippet>key=bool</snippet></ROW><ROW><id>16878924</id><snippet>0</snippet></ROW><ROW><id>16878924</id><snippet>key</snippet></ROW><ROW><id>16878924</id><snippet>0</snippet></ROW><ROW><id>16878924</id><snippet>2</snippet></ROW><ROW><id>16878924</id><snippet>key=lambda x: x != 2
</snippet></ROW><ROW><id>16878924</id><snippet>key</snippet></ROW><ROW><id>16878924</id><snippet>&gt;&gt;&gt; bool(3), bool(5)
(True, True)
&gt;&gt;&gt; bool(0)
False
</snippet></ROW><ROW><id>16878924</id><snippet>True</snippet></ROW><ROW><id>16878924</id><snippet>False</snippet></ROW><ROW><id>16878924</id><snippet>False</snippet></ROW><ROW><id>16878924</id><snippet>0</snippet></ROW><ROW><id>16878924</id><snippet>True</snippet></ROW><ROW><id>16878924</id><snippet>bool('')</snippet></ROW><ROW><id>16878924</id><snippet>bool([])</snippet></ROW><ROW><id>16878924</id><snippet>False</snippet></ROW><ROW><id>16878924</id><snippet>groupby</snippet></ROW><ROW><id>16878924</id><snippet>key</snippet></ROW><ROW><id>16878924</id><snippet>0</snippet></ROW><ROW><id>16878924</id><snippet>1</snippet></ROW><ROW><id>16878924</id><snippet>&gt;&gt;&gt; [(key, group) for key, group in groupby(L, key=bool)]
[(True, &lt;itertools._grouper object at 0xb6fc1dac&gt;), (False, &lt;itertools._grouper object at 0xb6fc432c&gt;), (True, &lt;itertools._grouper object at 0xb6fc422c&gt;), (False, &lt;itertools._grouper object at 0xb6fc4c2c&gt;), (True, &lt;itertools._grouper object at 0xb6fc428c&gt;), (False, &lt;itertools._grouper object at 0xb6fc476c&gt;)]
</snippet></ROW><ROW><id>16878924</id><snippet>itertools._grouper</snippet></ROW><ROW><id>16878924</id><snippet>itertools</snippet></ROW><ROW><id>16878924</id><snippet>list</snippet></ROW><ROW><id>16878924</id><snippet>&gt;&gt;&gt; [(key, list(group)) for key, group in groupby(L, key=bool)]
[(True, [3, 5]), (False, [0]), (True, [6, 8, 9, 7]), (False, [0]), (True, [1]), (False, [0])]
</snippet></ROW><ROW><id>16878924</id><snippet>key</snippet></ROW><ROW><id>16878924</id><snippet>True</snippet></ROW><ROW><id>16878924</id><snippet>&gt;&gt;&gt; [list(group) for key, group in groupby(L, key=bool) if key]
[[3, 5], [6, 8, 9, 7], [1]]
</snippet></ROW><ROW><id>16879109</id><snippet>from sympy.abc import a,b,c,p,q
from sympy import collect, expand
e = p * ( a + b ) + q * ( a + c )

print e
print expand(e)
print collect(expand(e),a)
</snippet></ROW><ROW><id>16879198</id><snippet>from sched import scheduler
from time import time, sleep

s = scheduler(time, sleep)

def run_periodically(start, end, interval, func):
    event_time = start
    while event_time &lt; end:
        s.enterabs(event_time, 0, func, ())
        event_time += interval
    s.run()

if __name__ == '__main__':

    def say_hello():
        print 'hello'    

    run_periodically(time()+5, time()+10, 1, say_hello)
</snippet></ROW><ROW><id>16879319</id><snippet>os</snippet></ROW><ROW><id>16879319</id><snippet>request</snippet></ROW><ROW><id>16879319</id><snippet>environ</snippet></ROW><ROW><id>16879319</id><snippet>start_response</snippet></ROW><ROW><id>16879319</id><snippet>environ</snippet></ROW><ROW><id>16879319</id><snippet>os.environ</snippet></ROW><ROW><id>16879319</id><snippet>CGI</snippet></ROW><ROW><id>16879319</id><snippet>request</snippet></ROW><ROW><id>16879319</id><snippet>request.META</snippet></ROW><ROW><id>16879319</id><snippet>environ</snippet></ROW><ROW><id>16879319</id><snippet>REMOTE_ADDR</snippet></ROW><ROW><id>16879319</id><snippet>mod_wsgi</snippet></ROW><ROW><id>16879358</id><snippet>list.insert</snippet></ROW><ROW><id>16879358</id><snippet>with open('input.txt', 'r+') as f:
   lines = f.readlines()
   for i, line in enumerate(lines):
       if 'string' in line:
          lines.insert(i,"somedata")  # inserts "somedata" above the current line
   f.truncate(0)         # truncates the file
   f.seek(0)             # moves the pointer to the start of the file
   f.writelines(lines)   # write the new data to the file
</snippet></ROW><ROW><id>16879358</id><snippet>import os
with open('input.txt', 'r') as f, open("new_file",'w') as f1:
   for line in f:
       if 'string' in line:
          f1.write("somedate\n")  # Move f1.write(line) above, to write above instead
       f1.write(line)
os.remove('input.txt')  # For windows only 
os.rename("newfile", 'input.txt')  # Rename the new file  
</snippet></ROW><ROW><id>16879444</id><snippet>scipy.sparse</snippet></ROW><ROW><id>16879444</id><snippet>hstack</snippet></ROW><ROW><id>16879444</id><snippet>vstack</snippet></ROW><ROW><id>16879444</id><snippet>In [44]: import scipy.sparse as sp

In [45]: c1 = sp.csr_matrix([[0,0,1,0],
    ...:                     [2,0,0,0],
    ...:                     [0,0,0,0]])

In [46]: c2 = sp.csr_matrix([[0,3,4,0],
    ...:                     [0,0,0,5],
    ...:                     [6,7,0,8]])

In [47]: h = sp.hstack((c1, c2), format='csr')

In [48]: h
Out[48]: 
&lt;3x8 sparse matrix of type '&lt;type 'numpy.int64'&gt;'
    with 8 stored elements in Compressed Sparse Row format&gt;

In [49]: h.A
Out[49]: 
array([[0, 0, 1, 0, 0, 3, 4, 0],
       [2, 0, 0, 0, 0, 0, 0, 5],
       [0, 0, 0, 0, 6, 7, 0, 8]])

In [50]: v = sp.vstack((c1, c2), format='csr')

In [51]: v
Out[51]: 
&lt;6x4 sparse matrix of type '&lt;type 'numpy.int64'&gt;'
    with 8 stored elements in Compressed Sparse Row format&gt;

In [52]: v.A
Out[52]: 
array([[0, 0, 1, 0],
       [2, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 3, 4, 0],
       [0, 0, 0, 5],
       [6, 7, 0, 8]])
</snippet></ROW><ROW><id>16879488</id><snippet>Stars</snippet></ROW><ROW><id>16879488</id><snippet>satellites = []</snippet></ROW><ROW><id>16879488</id><snippet>__init__</snippet></ROW><ROW><id>16879488</id><snippet>class Star(object):
    # ...
    def __init__(self, last_distance):
        self.satellites = []  # this creates an instance variable
        #...
</snippet></ROW><ROW><id>16879488</id><snippet>name</snippet></ROW><ROW><id>16879488</id><snippet>distance_from_earth</snippet></ROW><ROW><id>16879488</id><snippet>kind</snippet></ROW><ROW><id>16879489</id><snippet>c = np.array([[0,1,1],[2,1,0]])  # note that this data has dupes for max in row 1
d = np.array([[0,10,10],[20,10,0]]) # data to be chaged
c_argmax = np.argmax(c,axis=1)[:,np.newaxis]
b_map1 = c_argmax == np.arange(c.shape[1])
# now use the bool map as you described
d[b_map1] += 1
d
[out]
array([[ 0, 11, 10],
       [21, 10,  0]])
</snippet></ROW><ROW><id>16879489</id><snippet>c_max = np.max(c,axis=1)[:,np.newaxis]
b_map2 = c_max == c
d[b_map2] += 1
d
[out]
array([[ 0, 12, 11],
       [22, 10,  0]])
</snippet></ROW><ROW><id>16879937</id><snippet>UUID</snippet></ROW><ROW><id>16879937</id><snippet>In [58]: uuid.UUID("{00000000-0000-0000-0000-000000000000}")
Out[58]: UUID('00000000-0000-0000-0000-000000000000')
In [59]: uuid.UUID('{FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF}')
Out[59]: UUID('ffffffff-ffff-ffff-ffff-ffffffffffff')
</snippet></ROW><ROW><id>16879937</id><snippet>clk_seq_hi_res</snippet></ROW><ROW><id>16879937</id><snippet>clock_sequence_hi_and_reserved</snippet></ROW><ROW><id>16879937</id><snippet>(8, 9, a, b)</snippet></ROW><ROW><id>16879937</id><snippet>(1, 5, 9, d)</snippet></ROW><ROW><id>16879937</id><snippet>00000000-0000-1000-8000-000000000000
ffffffff-ffff-1fff-bfff-ffffffffffff
</snippet></ROW><ROW><id>16879970</id><snippet>xmlload1['rows']</snippet></ROW><ROW><id>16879970</id><snippet>xmlload1 = {
   "rows": [{"cell": {"username": "one", "race_horse":"b"}}, {"cell": {"username": "two", "race_horse": "c"}}]
}
</snippet></ROW><ROW><id>16879970</id><snippet>for row in xmlload1['rows']:
    cell = row["cell"]
    print cell["username"]
    print cell["race_horse"]
</snippet></ROW><ROW><id>16879970</id><snippet>xmlload1['rows']</snippet></ROW><ROW><id>16879970</id><snippet>lists</snippet></ROW><ROW><id>16879970</id><snippet>tuples</snippet></ROW><ROW><id>16879970</id><snippet>dicts</snippet></ROW><ROW><id>16879970</id><snippet>generators</snippet></ROW><ROW><id>16879970</id><snippet>xmlload1['rows']</snippet></ROW><ROW><id>16879970</id><snippet>def get_data(rp=8, page=1):
    parameters = {'page' : str(page),
              'rp' : str(rp),
              'sortname' : 'roi',
              'sortorder' : 'desc'
             }
    data = urllib.urlencode(parameters)
    trans_array = browser.open(post_url,data).read().decode('UTF-8')
    return json.loads(trans_array)
</snippet></ROW><ROW><id>16879970</id><snippet>get_data(rp=5)</snippet></ROW><ROW><id>16879970</id><snippet>get_data(rp=8)</snippet></ROW><ROW><id>16879970</id><snippet>get_data(rp=8, page=3)</snippet></ROW><ROW><id>16879970</id><snippet>parameters</snippet></ROW><ROW><id>16879994</id><snippet>while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT: sys.exit()
        # any other event handling you need
    # all the idle-time stuff you want to do each frame
    # usually ending with pygame.display.update() or .flip()
</snippet></ROW><ROW><id>16879994</id><snippet>SDL_VIDEODRIVER</snippet></ROW><ROW><id>16879994</id><snippet>'fbcon'</snippet></ROW><ROW><id>16879994</id><snippet>found</snippet></ROW><ROW><id>16879994</id><snippet>else</snippet></ROW><ROW><id>16880113</id><snippet>soup.findAll("table", {"width": "585"})
</snippet></ROW><ROW><id>16880113</id><snippet>findAll('table')</snippet></ROW><ROW><id>16880244</id><snippet>image[np.where((hue2==[0,0,0]).all(axis=2))]=[0,0,0]
</snippet></ROW><ROW><id>16880448</id><snippet>import openpyxl

wb = openpyxl.load_workbook(filename = r'test108.xlsx')
ws = wb.worksheets[0]

wb_out = openpyxl.Workbook()
ws_out = wb_out.worksheets[0]

n = 1

for x in range (0, 1000):
    if ws.cell(row=x, column=27).value == '7.image2.jpg':
        ws_out.cell(row=n, column=1).value = ws.cell(row=x, column=26).value #x changed
        ws_out.cell(row=n, column=2).value = ws.cell(row=x, column=10).value #x changed
        ws_out.cell(row=n, column=3).value = ws.cell(row=x, column=17).value #x changed
        n += 1

wb_out.save('output108.xlsx')
</snippet></ROW><ROW><id>16880469</id><snippet>_foo</snippet></ROW><ROW><id>16880469</id><snippet>foo</snippet></ROW><ROW><id>16880469</id><snippet>dir</snippet></ROW><ROW><id>16880533</id><snippet>#myusers/models.py
from django.contrib.auth.models import AbstractUser
from django.db import models

class MyUser(AbstractUser):
    dob = models.DateField()
    favorite_color = models.CharField(max_length=32, default='Blue')
</snippet></ROW><ROW><id>16880533</id><snippet>myusers</snippet></ROW><ROW><id>16880533</id><snippet>#settings.py
AUTH_USER_MODEL = 'myusers.MyUser'
</snippet></ROW><ROW><id>16880688</id><snippet>__future__</snippet></ROW><ROW><id>16880688</id><snippet>file1.py</snippet></ROW><ROW><id>16880688</id><snippet>sys._getframe</snippet></ROW><ROW><id>16880688</id><snippet>obj.div(2)</snippet></ROW><ROW><id>16880688</id><snippet>obj / 2</snippet></ROW><ROW><id>16880688</id><snippet>obj.__div__</snippet></ROW><ROW><id>16880688</id><snippet>obj.__truediv__</snippet></ROW><ROW><id>16880688</id><snippet>if sys._getframe(1).f_code.co_flags | __future__.CO_FUTURE_DIVISION:
</snippet></ROW><ROW><id>16880688</id><snippet>from __future__ import division</snippet></ROW><ROW><id>16880688</id><snippet>file3</snippet></ROW><ROW><id>16880688</id><snippet>__future__</snippet></ROW><ROW><id>16880688</id><snippet>file2</snippet></ROW><ROW><id>16880688</id><snippet>__future__</snippet></ROW><ROW><id>16880688</id><snippet>div</snippet></ROW><ROW><id>16880688</id><snippet>import file1</snippet></ROW><ROW><id>16880688</id><snippet>file2</snippet></ROW><ROW><id>16880688</id><snippet>division</snippet></ROW><ROW><id>16880688</id><snippet>file3</snippet></ROW><ROW><id>16880688</id><snippet>file1</snippet></ROW><ROW><id>16880688</id><snippet>file2</snippet></ROW><ROW><id>16880688</id><snippet>file3</snippet></ROW><ROW><id>16880688</id><snippet>file1</snippet></ROW><ROW><id>16880688</id><snippet>sys.modules</snippet></ROW><ROW><id>16880757</id><snippet>https://api.dropbox.com/1/shares/&lt;root&gt;/&lt;path&gt;</snippet></ROW><ROW><id>16880757</id><snippet>root</snippet></ROW><ROW><id>16880757</id><snippet>dropbox</snippet></ROW><ROW><id>16880757</id><snippet>sandbox</snippet></ROW><ROW><id>16880757</id><snippet>path</snippet></ROW><ROW><id>16880757</id><snippet>share()</snippet></ROW><ROW><id>16880757</id><snippet>path = "/shares/%s%s" % (self.session.root, format_path(path))
</snippet></ROW><ROW><id>16880757</id><snippet>self.session.root</snippet></ROW><ROW><id>16880757</id><snippet>access_type</snippet></ROW><ROW><id>16880757</id><snippet>self.root = 'sandbox' if access_type == 'app_folder' else 'dropbox'
</snippet></ROW><ROW><id>16880757</id><snippet>access_type</snippet></ROW><ROW><id>16880757</id><snippet>path</snippet></ROW><ROW><id>16880873</id><snippet>Entry</snippet></ROW><ROW><id>16880873</id><snippet>def close(self):
    self.r = int(self.enter1.get())
    self.g = int(self.enter2.get())
    self.b = int(self.enter3.get())
    self.root.destroy()

def return_color(self):
    return (self.r,self.g,self.b)
</snippet></ROW><ROW><id>16880873</id><snippet>get_color</snippet></ROW><ROW><id>16880873</id><snippet>self.root.mainloop</snippet></ROW><ROW><id>16880873</id><snippet>close</snippet></ROW><ROW><id>16880873</id><snippet>self.root.destroy</snippet></ROW><ROW><id>16880873</id><snippet>return_color</snippet></ROW><ROW><id>16881016</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>16881016</id><snippet>install_opener</snippet></ROW><ROW><id>16881016</id><snippet>urllib2.open</snippet></ROW><ROW><id>16881016</id><snippet>my_opener.open</snippet></ROW><ROW><id>16881016</id><snippet>urllib2.open</snippet></ROW><ROW><id>16881016</id><snippet>foomodule.urllib2 = my_opener</snippet></ROW><ROW><id>16881016</id><snippet>my_opener.urlopen = my_opener.open</snippet></ROW><ROW><id>16881101</id><snippet>zip</snippet></ROW><ROW><id>16881101</id><snippet>&gt;&gt;&gt; a = ['x','y','z']
&gt;&gt;&gt; b = [1,2,3]
&gt;&gt;&gt; [[x]*y for x,y in zip(a,b)]
[['x'], ['y', 'y'], ['z', 'z', 'z']]
</snippet></ROW><ROW><id>16881101</id><snippet>&gt;&gt;&gt; [[x for _ in xrange(y)] for x,y in zip(a,b)]
[['x'], ['y', 'y'], ['z', 'z', 'z']]
</snippet></ROW><ROW><id>16881101</id><snippet>zip</snippet></ROW><ROW><id>16881101</id><snippet>itertools.izip</snippet></ROW><ROW><id>16881101</id><snippet>a</snippet></ROW><ROW><id>16881101</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>16881101</id><snippet>&gt;&gt;&gt; from copy import deepcopy as dc
&gt;&gt;&gt; a = [[1 ,4],[2, 5],[3, 6, 9]]
&gt;&gt;&gt; f = [[dc(x) for _ in xrange(y)] for x,y in zip(a,b)]

#now all objects are unique
&gt;&gt;&gt; [[id(z) for z in x] for x in f]
[[172880236], [172880268, 172880364], [172880332, 172880492, 172880428]]
</snippet></ROW><ROW><id>16881101</id><snippet>timeit</snippet></ROW><ROW><id>16881101</id><snippet>&gt;&gt;&gt; a = ['x','y','z']*10**4
&gt;&gt;&gt; b = [100,200,300]*10**4

&gt;&gt;&gt; %timeit [[x]*y for x,y in zip(a,b)]
1 loops, best of 3: 104 ms per loop

&gt;&gt;&gt; %timeit [[x]*y for x,y in izip(a,b)]
1 loops, best of 3: 98.8 ms per loop

&gt;&gt;&gt; %timeit map(lambda v: [v[0]]*v[1], zip(a,b))
1 loops, best of 3: 114 ms per loop

&gt;&gt;&gt; %timeit map(list, map(repeat, a, b))
1 loops, best of 3: 192 ms per loop

&gt;&gt;&gt; %timeit map(list, imap(repeat, a, b))
1 loops, best of 3: 211 ms per loop

&gt;&gt;&gt; %timeit map(mul, [[x] for x in a], b)
1 loops, best of 3: 107 ms per loop

&gt;&gt;&gt; %timeit [[x for _ in xrange(y)] for x,y in zip(a,b)]
1 loops, best of 3: 645 ms per loop

&gt;&gt;&gt; %timeit [[x for _ in xrange(y)] for x,y in izip(a,b)]
1 loops, best of 3: 680 ms per loop
</snippet></ROW><ROW><id>16881307</id><snippet>for line in file:
    output.write(line) # save as is
    if 'SAMPLE' in line or 'RUNS' in line:
       line = next(file, "") # move to the next line
       output.write(line.replace('AB', 'XX')) # save replacing AB with XX
</snippet></ROW><ROW><id>16881307</id><snippet>SAMPLE
SAMPLE
AB
</snippet></ROW><ROW><id>16881307</id><snippet>for line in file:
    output.write(line) # save as is
    while 'SAMPLE' in line or 'RUNS' in line:
       line = next(file, "") # move to the next line
       output.write(line.replace('AB', 'XX')) # save replacing AB with XX
</snippet></ROW><ROW><id>16881625</id><snippet>(\w*)</snippet></ROW><ROW><id>16881625</id><snippet>(c|r|u|d)</snippet></ROW><ROW><id>16881625</id><snippet>(.*)</snippet></ROW><ROW><id>16881625</id><snippet>self</snippet></ROW><ROW><id>16881625</id><snippet>GET</snippet></ROW><ROW><id>16881625</id><snippet>def GET(self, param1, operation, id_):
</snippet></ROW><ROW><id>16881776</id><snippet>$foo = 'bar';</snippet></ROW><ROW><id>16881776</id><snippet>$_GET</snippet></ROW><ROW><id>16881776</id><snippet>$foo['bar']</snippet></ROW><ROW><id>16881776</id><snippet>$</snippet></ROW><ROW><id>16881776</id><snippet>\$</snippet></ROW><ROW><id>16881776</id><snippet>$</snippet></ROW><ROW><id>16881776</id><snippet>\$[a-z]</snippet></ROW><ROW><id>16881776</id><snippet>\$[a-z]\w*</snippet></ROW><ROW><id>16881776</id><snippet>\$([a-z]\w*)</snippet></ROW><ROW><id>16881776</id><snippet>\$([a-z]\w*)\s*=\s*</snippet></ROW><ROW><id>16881776</id><snippet>;</snippet></ROW><ROW><id>16881776</id><snippet>\$([a-z]\w*)\s*=\s*(.*?);$</snippet></ROW><ROW><id>16881776</id><snippet>m</snippet></ROW><ROW><id>16881776</id><snippet>^$</snippet></ROW><ROW><id>16881931</id><snippet>flush()</snippet></ROW><ROW><id>16881931</id><snippet>In [10]: from PyQt4 import QtCore

In [11]: fileTemp = QtCore.QTemporaryFile()

In [12]: fileTemp.open()
Out[12]: True

In [13]: fileTemp.fileName()
Out[13]: PyQt4.QtCore.QString(u'/tmp/qt_temp.XM5599')

In [14]: fileTemp.writeData('foobar')
Out[14]: 6L

In [15]: with open(fileTemp.fileName(), 'r') as f:
   ....:     print(f.read())
   ....:     


In [16]: fileTemp.flush()
Out[16]: True

In [17]: with open(fileTemp.fileName(), 'r') as f:
    print(f.read())
   ....:     
foobar
</snippet></ROW><ROW><id>16881931</id><snippet>size()</snippet></ROW><ROW><id>16881948</id><snippet>after</snippet></ROW><ROW><id>16881948</id><snippet>runSim</snippet></ROW><ROW><id>16881948</id><snippet>import random
from Tkinter import *

c = Canvas()
c.pack()
circle = c.create_oval(100,100,110,110, fill="red")

def simulate():
    #one step of simulation
    c.move(circle, random.normalvariate(0,3),random.normalvariate(0,3))
    c.after(100, simulate)

c.after(100, simulate)
c.mainloop()
</snippet></ROW><ROW><id>16881963</id><snippet>raw_input()</snippet></ROW><ROW><id>16881963</id><snippet>print("Enter two Numbers\n")
a = int(raw_input('A='))
b = int(raw_input('B='))
c=a+b
print ('C= %s' %c)
raw_input() # waits for you to press enter 
</snippet></ROW><ROW><id>16881963</id><snippet>IDLE</snippet></ROW><ROW><id>16882135</id><snippet>your_task_func</snippet></ROW><ROW><id>16882135</id><snippet>def callback(future):
    # here you want to do some stuff with the value future.result()

EXECUTOR.submit(
        your_task_func
        ).add_done_callback(
            lambda future: tornado.ioloop.IOLoop.instance().add_callback(
                partial(callback, future)))
</snippet></ROW><ROW><id>16882176</id><snippet>Popen()</snippet></ROW><ROW><id>16882176</id><snippet>.call()</snippet></ROW><ROW><id>16882176</id><snippet>Popen()</snippet></ROW><ROW><id>16882176</id><snippet>stdin</snippet></ROW><ROW><id>16882176</id><snippet>stdout</snippet></ROW><ROW><id>16882176</id><snippet>stderr</snippet></ROW><ROW><id>16882176</id><snippet>stderr</snippet></ROW><ROW><id>16882176</id><snippet>stdout</snippet></ROW><ROW><id>16882176</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>16882176</id><snippet>airodump-ng wlan0</snippet></ROW><ROW><id>16882176</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>16882176</id><snippet>PIPE</snippet></ROW><ROW><id>16882176</id><snippet>scanned_networks = subprocess.check_output(["airodump-ng", "wlan0"])
</snippet></ROW><ROW><id>16882176</id><snippet>output</snippet></ROW><ROW><id>16882176</id><snippet>airodump-ng</snippet></ROW><ROW><id>16882176</id><snippet>stdout</snippet></ROW><ROW><id>16882176</id><snippet>Popen()</snippet></ROW><ROW><id>16882176</id><snippet>proc = subprocess.Popen(["airodump-ng", "wlan0"], stdout=subprocess.PIPE)
for line in proc.stdout:
    # do something with line
proc.terminate()
</snippet></ROW><ROW><id>16882462</id><snippet>linestyle</snippet></ROW><ROW><id>16882462</id><snippet>marker</snippet></ROW><ROW><id>16882462</id><snippet>plot.py</snippet></ROW><ROW><id>16882462</id><snippet>input.txt</snippet></ROW><ROW><id>16882462</id><snippet>linewidth</snippet></ROW><ROW><id>16882462</id><snippet>label</snippet></ROW><ROW><id>16882462</id><snippet>matplotlibrc</snippet></ROW><ROW><id>16882462</id><snippet>matplotlibrc</snippet></ROW><ROW><id>16882602</id><snippet>path = sys.path + ["app"]
</snippet></ROW><ROW><id>16882602</id><snippet>path = ["app"] + sys.path
</snippet></ROW><ROW><id>16882671</id><snippet>proto = {
  "orc" : (200, 300, 0)
  "troll" : (500, 300, 0)
  "wolf" : (100, 100, 0)
  ...
}

class Creature:
    def __init__(self, name):
        self.name = name
        self.hp = proto[name][0]
        ...
</snippet></ROW><ROW><id>16882680</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

##IMPORTS
import cv2.cv as cv
import numpy as np

##VARIABLES
#colors
green=[0,255,0]

##MAIN
#start video stream analysis
frames = raw_input('Please enter video file:')
if not frames:
   print "This program requires a file as input!"
   sys.exit(1)


# first, create the necessary windows
cv.NamedWindow ('image', cv.CV_WINDOW_AUTOSIZE)


#File capture
vidFile = cv.CaptureFromFile(frames)
nFrames = int(  cv.GetCaptureProperty( vidFile, cv.CV_CAP_PROP_FRAME_COUNT ) )
fps = cv.GetCaptureProperty( vidFile, cv.CV_CAP_PROP_FPS )
waitPerFrameInMillisec = int( 1/fps * 1000/1 )


for f in xrange( nFrames ):
   #time adjustment, frame capture
   sec = f/fps
   frame = cv.QueryFrame( vidFile )

   # create the images we need
   image = cv.CreateImage (cv.GetSize (frame), 8, 3)


   # copy the frame, so we can draw on it
   if not frame:
      break
   else:
      cv.Copy (frame, image)

   #Replace pixel colors
   rows,cols=cv.GetSize(frame)
   image=np.asarray(image[:,:])
   image[np.where((image==[0,0,0]).all(axis=2))]=green
   image=cv.fromarray(image[:,:])

   #show the image
   cv.ShowImage("image", image)

   #quit command ESC
   if cv.WaitKey(waitPerFrameInMillisec)==27:
      break
   else:
      cv.WaitKey(waitPerFrameInMillisec) % 0x100

cv.DestroyAllWindows()
</snippet></ROW><ROW><id>16882869</id><snippet>import another_module

result = another_module.some_function(args)
</snippet></ROW><ROW><id>16882869</id><snippet>namespace = {'args': [1,2,3]} # define __name__, __file__ if necessary
execfile('some_script.py', namespace)
result = namespace['result']
</snippet></ROW><ROW><id>16882869</id><snippet>execfile()</snippet></ROW><ROW><id>16882869</id><snippet>setup.py</snippet></ROW><ROW><id>16882869</id><snippet>pip</snippet></ROW><ROW><id>16882869</id><snippet>easy_install</snippet></ROW><ROW><id>16882869</id><snippet>runpy</snippet></ROW><ROW><id>16882869</id><snippet>import json
import sys
from subprocess import Popen, PIPE

marshal, unmarshal = json.dumps, json.loads

p = Popen([sys.executable, 'some_script.py'], stdin=PIPE, stdout=PIPE)
result = unmarshal(p.communicate(marshal(args))[0])
</snippet></ROW><ROW><id>16882869</id><snippet>some_script.py</snippet></ROW><ROW><id>16882869</id><snippet>#!/usr/bin/env python
import json
import sys

args = json.load(sys.stdin)   # read input data from stdin
result = [x*x for x in args]  # compute result
json.dump(result, sys.stdout) # write result to stdout
</snippet></ROW><ROW><id>16882975</id><snippet>pch</snippet></ROW><ROW><id>16882976</id><snippet>uv['response']</snippet></ROW><ROW><id>16882976</id><snippet>uv</snippet></ROW><ROW><id>16882976</id><snippet>print uv['response'][0].get('uv')
</snippet></ROW><ROW><id>16882977</id><snippet>import sys 

@GET("/some/path/extensions/:module/:func/:params")
def callmodule(module, func, params):
    D = dict(params)
    # Pull module instance from systems stack
    moduleInstance = sys.modules[module]
    # Grab method from module
    functionInstance = getattr(moduleInstance,func)
    # Pass "D" variable to function instance
    functionInstance(D)
</snippet></ROW><ROW><id>16883236</id><snippet>cc = [('us', .2), ('gb', .2), ('de', .1), ('fr', .05), ('it', .05)]
distribution = n / sum(dist for c, dist in cc)
countries = []
for c, dist in cc:
    countries.extend([c] * int(round(distribution * dist)))
# rounding errors may mean we have too few, add until we have enough
while len(countries) &lt; n:
    countries.append(random.choice(cc)[0])
random.shuffle(countries)
</snippet></ROW><ROW><id>16883267</id><snippet>import re

soup.find_all(text=re.compile('http://'))
</snippet></ROW><ROW><id>16883267</id><snippet>table = soup.find('table', id='ctl00_MainContent_GridView1')
for row in table.find_all('tr'):
    cells = row.find_all('td')
    if not cells or len(cells) &lt; 4:
        continue
    if cells[3].string.startswith('http://'):
        print cells[3].string
</snippet></ROW><ROW><id>16883267</id><snippet>http://46.254.16.170:80/9.exe
http://thewebblocker.com/TheWebBlocker.exe
http://zenerx.product-truths.com/ebook/freetrialzenerx.exe
http://www.suportersteaua.net/archive/index.php/t-2339.html%3Flogin%3D3d1
http://pad.okozo.com/installers/digital-alarm-clock.exe
http://educacionfinanciera.fovissste.gob.mx/elearning/materiales/install_flashplayer.exe
http://d6.05sun.com/books/ping3gb.exe
http://www.bigticketreview.com/software/bttw02/makemoneyonlinebigticketreviewDropDown.exe
http://www.kv-dinklage.de/oben.html
http://udegdogale.rbcmail.ru/28/zxc.js
http://inet-tr.org.tr/inetconf6/inet-forum/Oct/
http://thebabycub.com/wp-includes/js/jquery/jquery.jsver=1.7.2
http://apstudio-pc.it
http://rocketdock.com/addon/37092/download
http://gameguru.ru/files/5142/download.html
http://irojtumy.ru/shem001.exe
http://tamasu.org/css.js
http://www.goldenyachtcharters.com/templates/yacht-charters/js/css_browser_selector.js
http://rolmlecz.republika.pl/
http://www.buzz-fr.com/ppl/68a3b67202e532e0352556e48599c2e3/
http://www.wadel.com/clients/cite.exe
http://accf.fantasygames.to/LauncherCFFGnew.exe?random=3324
http://down.power-pc.co.kr/pwtray.exe
http://www.iefloating.com/update/ddn/instt2.exe
http://pad.okozo.com/installers/ml-silver.exe
http://testing.keywordclicker.com/downloads/setmeup.exe
http://utilityport.net/templates/atomic/images/prorate.exe
http://www.naturacoiffure.com/images/svchost.exe
http://bbs.jysq.net/forum.php?mod=attachment&amp;aid=NDkwNDI1fGI2OTQ4NTJhfDEzNjc2MzYxNTh8MHwxMjY4OTU1
http://download.77169.com/soft/hacrktools/control/hyhd.zip
http://www.daohaowang.com/forum.php?mod=attachment&amp;aid=NnxhNWEwYzA0OXwxMzY3NDg4MTg0fDB8MzA%3D
http://29.duote.org/dashidingshidshuen.zip
http://21.duote.org:8080/qqlsbldq.zip
http://down2.btfw.org/Temporary/%E6%9E%81%E8%99%8E%E7%97%85%E6%AF%92%E6%A0%B7%E6%9C%AC.rar
http://anhui.jz5u.com/dpin/0000000559244910218/1367634317/b095dfc04e5f1f130d0237d12733c698/soft-2013-02/qqckq.rar
http://c.uzzf.com/lyl/voteHelp_fr.zip
http://58.duote.org/ajzs.zip
http://down4.cr173.com/soft3/ddtsssmzqpj.zip
http://down.signkey.co.kr/olive/signkey.exe
http://176.74.218.47/winAPI.exe
http://cdn.bubbledock.es/cl/inst/bundles/Lollipop/2013_02_05/setup__1730.exe
http://www.ezlifeinc.org/easylifeshop/product_detail.aspx?CID=4&amp;PID=28&amp;rev=y
http://testing.keywordclicker.com/downloads/driverpackage.exe
http://kola.by/DISKaeznemezis.htm
http://rinylagarde.nl/
http://sky.ru/SkyInform/update.zip
http://cozyflames.com/wp-content/themes/MyProduct/epanel/shortcodes/js/et_shortcodes_frontend.js?ver=2.0
http://a.coughstuffs.com/ic/gplhblite63/45645/0/a13f3ada-8639-4a33-adbf-85a5e28bccc5/emulesetup.exe
http://www.mak.web.kg/
http://brunoraineri.it/links/siti1.htm
http://b20.uzzf.com/cl/iisserver_gr.zip
http://jses40813.ibbt.tw/bbs/forum.php?mod=attachment&amp;aid=MTcyMXw5M2NmYTFiZXwxMzY1MzE0MjI4fDEwMDYyfDM5MjM=
http://w1.hackhome.com/h1/-dnfdjlfcxxz.zip
http://wt.wxdown.net:8083/soft/18X%20TV.rar?11102975449718x1365252622x11103022167864-52b5fa9d39168668d78cc7af5ba59563
http://wt7.52z.com/QQSSV.zip
http://c5.cr173.com/soft1/winbox3.30.zip
http://a.coughstuffs.com/ic/gplcplite69/44593/0/f57aaf9d-3aca-417d-b3a4-684d724359ab/xvidsetup.exe
http://a.coughstuffs.com/ic/gplcplite69/44593/0/c1a29cca-a36a-42f0-9d4f-52cc1d111dca/xvidsetup.exe
http://a.coughstuffs.com/ic/gplcplite69/44593/0/ba076324-2a70-4f98-9c0f-89c8ebd857fc/xvidsetup.exe
http://arnika.ua/index.php?Itemid=23
http://forum.szczytno.org/cron.php?amp;amp;
http://www.chdr.org/bamp/buyafricanmangoplus.exe
http://jahbob3.free.fr/server.exe
http://win.olisistemi.com/servizio/PRTbox.exe
http://sv80.de/Material/bilder/Schuetzenfest%202007/pages/DSC00250-1.html
http://js.users.51.la/5988624.js
http://picasa.com.awisshipping.com/bot.txt???
http://a.coughstuffs.com/ic/gplhblite63/45645/0/692b2591-65e9-44a6-b65e-81c29ff729af/applicationsetup.exe
http://www.trovaconcorsi.com/concorsi/2009/04/concorso-geometra-ato-di-im=peria/
http://www.trovaconcorsi.com/concorsi/2009/05/2-assegni-di-ricerca-univer=sita-politecnica-delle-marche-di-ancona/
http://www.exploringecuador.com/deutsch/index.htm
http://databanksurat.com/
http://files.download-at.de/cheats_einsendungen/1344264504-GTAIVsupertrainer.rar
http://files.download-at.de/dl/bws-0457.rar
http://files.download-at.de/dl/ru-w2p2t.rar
http://www.gratisgames24.de/fred/nfsmwXXLv1.rar
http://www.gratisgames24.de/fred/pdrtw15t.zip
http://www.gratisgames24.de/trainer/kq160403/fl.rar
http://www.farida.cn/company/flash/guitarsflash/d1612/d-16%2012n%281%29.html
http://mirror02.cheaters-heaven.com/FileDB/Thundagav1.02InclSourceCode.zip
http://www.yekalonhardware.com/webapp/product.asp?catalog_id=498
http://johnnyglazner.com/%3Ffeed%3Drss2%26
http://e-fashionpoint.pl/kategoria/1/strona/1
http://bowen-enterprises.com/index.html
http://www.ww.wilei.pl--www.ilei.pl/includes/jquery.js
http://casasxavier.com.br/site/public_html/frontend/~~filemanager~~/bot.exe
http://mega-boom.3dn.ru/news/1-0-7
http://maylamsuadaunanh.com/?ncl=dfdSPTf-Feax0MM
http://lemonstudio.ro/blog/?m=200905
http://www.volcanwines.gr/eshop/product_reviews.php?products_id=81&amp;osCsid=85a32fd2814155ec8b1c21eaa47e17d0
http://mamaijawroclaw.home.pl/1/cerveza-preparada
http://lemonstudio.ro/blog/?m=200909
http://lemonstudio.ro/blog/?m=200910
http://maylamsuadaunanh.com/dau-nanh-gao-sua-maker-de-nghi.html
http://mamaijawroclaw.home.pl/1/clown-gang
http://malahidegroup.com/acne-marks-treatment
http://mamaijawroclaw.home.pl/1/chinese-thermos
http://lemonstudio.ro/blog/?m=200911
http://lemonstudio.ro/blog/?m=200912
http://mamaijawroclaw.home.pl/1/corak-binatang
http://mamaijawroclaw.home.pl/1/couture-outfits
http://lemonstudio.ro/blog/?m=201005
http://lemonstudio.ro/blog/?m=200901
http://malahidegroup.com/adizero-star
http://lemonstudio.ro/blog/?m=201007
http://mamaijawroclaw.home.pl/1/crazy-fun-photography
http://lemonstudio.ro/blog/?m=200902
http://lemonstudio.ro/blog/?m=200903
http://malahidegroup.com/aerox-parts
http://lemonstudio.ro/blog/?p=447
http://mamaijawroclaw.home.pl/1/croatia-photography
http://lemonstudio.ro/blog/?m=201008
http://mega-boom.3dn.ru/news/1-0-1
http://mamaijawroclaw.home.pl/1/creede-simpson
http://malahidegroup.com/amazona-loewe
http://mega-boom.3dn.ru/index/3
http://malahidegroup.com/apple-pie-liquor
http://lemonstudio.ro/blog/?p=457
http://lenworlbook.narod.ru/
http://malahidegroup.com/a-shetland-pony
http://malahidegroup.com/aviator-vector
http://malahidegroup.com/beer-with-straw
http://mcdz.euweb.cz/
http://malahidegroup.com/bare-pool-mirage
http://mega-boom.3dn.ru/news/1-0-11
http://mega-boom.3dn.ru/news/1-0-10
http://malahidegroup.com/bat-orchid
http://t.co/j0kVzOPGBi
http://kumaran.narbhavee.org/2011/03/enterprise-architecture-books/
http://www.asuspoint-shop.com/index.php?cPath=29...
http://iznikteml.k12.tr/indian-turnip
http://iznikteml.k12.tr/ipsos-beach
http://iznikteml.k12.tr/lisa-hollenbeck
http://iznikteml.k12.tr/mask-of-japan
http://iznikteml.k12.tr/marlboro-lite
http://iznikteml.k12.tr/love-couple-gif
http://indianoyster.com/otherprofile.php?user=75
http://kumaran.narbhavee.org/2011/03/enterprise-architecture-web-links/
http://iznikteml.k12.tr/mudkip-face
http://www.asuspoint-shop.com/password_forgotten.php?ac...
http://www.asuspoint-shop.com/reviews.php?osCsid=4eeb9ba56cdbb6f19df45cb18c8784ab
http://iznikteml.k12.tr/melanie-adler
http://kumaran.narbhavee.org/2011/03/zachman-enterprise-architecture-framework-fundamentals/
http://iznikteml.k12.tr/michele-allen
http://indianoysters.com/otherprofile.php?user=73
http://imalles.narod.ru/
http://iznikteml.k12.tr/old-butterfly
http://iamacustodian.com/
http://iamacustodian.com/?page_id=10
http://iznikteml.k12.tr/okami-moegami
http://kumaran.narbhavee.org/2011/03/a-comparison-of-the-top-four-enterprise-architecture-methodologies/
http://indianoysters.com/otherprofile.php?user=18
http://iznikteml.k12.tr/paul-zimmermann
http://iamacustodian.com/?page_id=2
http://iamacustodian.com/?page_id=39
http://kumaran.narbhavee.org/2011/03/enterprise-architecture-roadmap-for-modernization/
http://iznikteml.k12.tr/pacman-new-game
http://indianoysters.com/otherprofile.php?user=37
http://iznikteml.k12.tr/satanic-signs
http://iznikteml.k12.tr/shamsul-safie
http://in-china.cn/_notes/abote.asp?/list_(b_11.htm
http://indianoysters.com/otherprofile.php?user=40
http://insacci.narod.ru/
http://yourcareerplan.org/BbAEKD.exe
http://www.5th3rd.com/rTxD0.exe
http://hiltonheadrealestatemlstoday.com/aS8.exe
http://brennstoffegehling.de/mv3EYAbG.exe
http://www.tjgjhb.com/product.asp?bigclassname=gjqf%D0%A0%D1%94%D0%A0%C2%AD%D0%A0%C2%98%D0%A0%D1%92
http://www.in-china.cn/_notes/abote.asp?/list_%D0%A7%C2%B0%D0%95%C2%B7_1.htm
http://www.in-china.cn/_notes/abote.asp?/list_%D0%91%D1%87%D0%A0%D0%8E_1.htm
http://mochelek.republika.pl/
http://autopflege-chemnitz.de/
http://550788.com/
http://iznikteml.k12.tr/second-fiddle
http://iznikteml.k12.tr/sks-bullpup
http://kk-cocoon.eu/de/component/content/article/1-design-effect-wrapping-films-for-individualists
http://janessafari.com/index.php/category/11-in-11-by-111111/page/3/
http://indianoysters.com/otherprofile.php?user=42
http://in-china.cn/_notes/abote.asp?/list_(b_13.htm
http://kumaran.narbhavee.org/2011/05/startup-resources-updated-for-2011/
http://in-china.cn/_notes/abote.asp?/list_(b_18.htm
http://jeffemanuel.net/weblog/?p=93
http://kk-cocoon.eu/en/component/content/article/1-design-effect-wrapping-films-for-individualists
http://indianoysters.com/otherprofile.php?user=41
http://in-china.cn/_notes/abote.asp?/list_(b_19.htm
http://malahidegroup.com/brisca-f2-photos
http://indianoysters.com/otherprofile.php?user=43
http://klet2school.hut.ru/doklad.php
http://malahidegroup.com/broccoli-means
http://indianoysters.com/otherprofile.php?user=45
http://maylamsuadaunanh.com/11-bi-quyet-pha-sinh-to-ngon-24-gio.html
http://indianoysters.com/otherprofile.php?user=68
http://malahidegroup.com/bull-terrier-pics
http://inenten.narod.ru/
http://indianoysters.com/otherprofile.php?user=69
http://malahidegroup.com/canvasback-hen
http://maylamsuadaunanh.com/ban-da-nhin-thay-dieu-nay-may-lam-sua-dau-nanh.html
http://www.delcentralacasa.com.ar/mercadocentral/index.php?osCsid=9ba27ad9b41572939686a090dcdef97d
http://malahidegroup.com/carens-car
http://in-china.cn/_notes/abote.asp?/list_(b_20.htm
http://minimal.ca/wp/?tag=kuji
http://mamaijawroclaw.home.pl/1/ac-green-wife
http://mamaijawroclaw.home.pl/1/aluminum-chemical-properties
http://mamaijawroclaw.home.pl/1/anjani-kumar-mishra
http://misagbue.narod.ru/
http://www.vib-design.de/shop/catalog/login.php?osCsid=7a00165c647b5a29ce30b741b6e1a533
http://mamaijawroclaw.home.pl/1/black-tungsten
http://mamaijawroclaw.home.pl/1/bmw-318ti-red
http://lemonstudio.ro/blog/?m=200907
http://mamaijawroclaw.home.pl/1/brezi-i-ri
http://lemonstudio.ro/blog/?m=200908
http://mamaijawroclaw.home.pl/1/byron-burger-islington
http://lemonstudio.ro/blog/?m=200906
http://marrakechomaha.com/wp-login.php?redirect_to=http%3A%2F%2Fmarrakechomaha.com%2Fwp-admin%2F&amp;reauth=1
http://kumaran.narbhavee.org/2011/03/facebook-powertools-150-apps-scripts-and-add-ons-for-facebook/feed/
http://kumaran.narbhavee.org/2011/03/extended-enterprise-portfolio-management-e2pm-methods/feed/
http://marrakechomaha.com/?p=68
http://kochampolske.com.pl/wp-login.php
http://kumaran.narbhavee.org/2011/03/enterprise-business-architecture/feed/
http://jxltyey.com/xueyuan.asp?page=5
http://kumaran.narbhavee.org/2011/03/enterprise-architecture-web-links/feed/
http://kumaran.narbhavee.org/2011/03/enterprise-architecture-security/feed/
http://kumaran.narbhavee.org/2011/03/enterprise-architecture-roadmap-for-modernization/feed/
http://kumaran.narbhavee.org/2011/03/enterprise-architecture-books/feed/
http://kumaran.narbhavee.org/2011/03/a-comparison-of-the-top-four-enterprise-architecture-methodologies/feed/
http://kumaran.narbhavee.org/2010/12/sap-ecohub-hot-topics/feed/
http://kumaran.narbhavee.org/2010/12/sap-ecohub-hot-topics/
http://kumaran.narbhavee.org/2011/06/evaluation-of-sap-and-sap-architecture/
http://janessafari.com/index.php/tag/cormac-mccarthy/feed/
http://kumaran.narbhavee.org/2011/05/ea-phases/
http://freekniga.ru/SPRAVOCHNAJA-LITERATURA-c-580.html
http://halo-4-download.com/halo-4-xbox-live-rewards-288
http://foto.mindfighter.net/?m=201202
http://almoltakans.org/
http://freekniga.ru/STARINNYE-KNIGI-c-584.html
http://amar.travel/
http://foto.mindfighter.net/?m=20120305
http://fbcmedina.net/why-we-worship-2/
http://halo-4-download.com/master-chief-will-lead-mechem-243
http://freekniga.ru/TEHNIKA-c-581.html
http://facelighteningcream.org/
http://freekniga.ru/login.php?osCsid=1a53a38dcd39337351a950712b75ce9b
http://autoserwiskobra.pl/
http://halo-4-download.com/halo-4-forward-scenes-unto-dawn-video-165
http://floridavideoconferencing.com/lease/
http://gtr-r35-interior-news.blogspot.de/2011/09/19-inch-rims-3000gtstealth.html
http://floridavideoconferencing.com/product-review-2/
http://www.hotboxhookahs.com/shopping_cart.php?osCsid=10b59261cafd612f42bc130909845bd5
http://biosagentplus.com/scan/biosagentplus_36.exe?PHPSESSID=7mc2himn832kgc9cfkckbi0ru4
http://www.volcanwines.gr/eshop/product_reviews.php?products_id=81&amp;osCsid=c1b0b6d24099f747990531b79338b143
</snippet></ROW><ROW><id>16883459</id><snippet>open()</snippet></ROW><ROW><id>16883459</id><snippet>codecs.open('myfile', 'r', 'iso-8859-1').read()
</snippet></ROW><ROW><id>16883459</id><snippet>codecs</snippet></ROW><ROW><id>16883459</id><snippet>file</snippet></ROW><ROW><id>16883659</id><snippet>&gt;&gt;&gt; a=np.arange(12).reshape(4,3)
&gt;&gt;&gt; a
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
&gt;&gt;&gt; b=np.array([a[:,0:2].tolist(),a[:,2:3].tolist()])
&gt;&gt;&gt; b
array([[[0, 1], [3, 4], [6, 7], [9, 10]],
       [[2], [5], [8], [11]]], dtype=object)
&gt;&gt;&gt; b[0][0][0],b[0][0][1],b[1][0][0]
(0, 1, 2)
</snippet></ROW><ROW><id>16883659</id><snippet>.tolist()</snippet></ROW><ROW><id>16883659</id><snippet>a</snippet></ROW><ROW><id>16883659</id><snippet>b</snippet></ROW><ROW><id>16883659</id><snippet>a</snippet></ROW><ROW><id>16883659</id><snippet>&gt;&gt;&gt; b=np.array([a[:,0:2],a[:,2:3]])
&gt;&gt;&gt; b
array([[[0 1], [3 4], [6 7], [ 9 10]],
       [[2], [5], [8], [11]]], dtype=object)
&gt;&gt;&gt; b[0][0][0],b[0][0][1],b[1][0][0]
(0, 1, 2)
</snippet></ROW><ROW><id>16883659</id><snippet>b</snippet></ROW><ROW><id>16883659</id><snippet>a</snippet></ROW><ROW><id>16883659</id><snippet>&gt;&gt;&gt; a[0][0]=23
&gt;&gt;&gt; a
array([[23,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
&gt;&gt;&gt; b
array([[[23  1], [3 4], [6 7], [ 9 10]],
       [[2], [5], [8], [11]]], dtype=object)
&gt;&gt;&gt; b[0][0].flags['OWNDATA']
False
</snippet></ROW><ROW><id>16883771</id><snippet>StringVar</snippet></ROW><ROW><id>16883771</id><snippet>StringVar</snippet></ROW><ROW><id>16883771</id><snippet>...
a = Entry(root, width = 100)
a_var = StringVar()
a["textvariable"] = a_var
...
</snippet></ROW><ROW><id>16883771</id><snippet>get()</snippet></ROW><ROW><id>16883771</id><snippet>a_var</snippet></ROW><ROW><id>16883771</id><snippet>set()</snippet></ROW><ROW><id>16883771</id><snippet>callback</snippet></ROW><ROW><id>16883771</id><snippet>a_var.trace_variable("w", callback)
</snippet></ROW><ROW><id>16883820</id><snippet>nnoremap &lt;M-,&gt; k:call search('^'. matchstr(getline(line('.')+1), '\(\s*\)') .'\S', 'b')&lt;CR&gt;^
nnoremap &lt;M-.&gt; :call search('^'. matchstr(getline(line('.')), '\(\s*\)') .'\S')&lt;CR&gt;^
</snippet></ROW><ROW><id>16883820</id><snippet>" Jump to the next or previous line that has the same level or a lower
" level of indentation than the current line.
"
" exclusive (bool): true: Motion is exclusive
" false: Motion is inclusive
" fwd (bool): true: Go to next line
" false: Go to previous line
" lowerlevel (bool): true: Go to line with lower indentation level
" false: Go to line with the same indentation level
" skipblanks (bool): true: Skip blank lines
" false: Don't skip blank lines
function! NextIndent(exclusive, fwd, lowerlevel, skipblanks)
  let line = line('.')
  let column = col('.')
  let lastline = line('$')
  let indent = indent(line)
  let stepvalue = a:fwd ? 1 : -1
  while (line &gt; 0 &amp;&amp; line &lt;= lastline)
    let line = line + stepvalue
    if ( ! a:lowerlevel &amp;&amp; indent(line) == indent ||
          \ a:lowerlevel &amp;&amp; indent(line) &lt; indent)
      if (! a:skipblanks || strlen(getline(line)) &gt; 0)
        if (a:exclusive)
          let line = line - stepvalue
        endif
        exe line
        exe "normal " column . "|"
        return
      endif
    endif
  endwhile
endfunction

" Moving back and forth between lines of same or lower indentation.
nnoremap &lt;silent&gt; [l :call NextIndent(0, 0, 0, 1)&lt;CR&gt;
nnoremap &lt;silent&gt; ]l :call NextIndent(0, 1, 0, 1)&lt;CR&gt;
nnoremap &lt;silent&gt; [L :call NextIndent(0, 0, 1, 1)&lt;CR&gt;
nnoremap &lt;silent&gt; ]L :call NextIndent(0, 1, 1, 1)&lt;CR&gt;
vnoremap &lt;silent&gt; [l &lt;Esc&gt;:call NextIndent(0, 0, 0, 1)&lt;CR&gt;m'gv''
vnoremap &lt;silent&gt; ]l &lt;Esc&gt;:call NextIndent(0, 1, 0, 1)&lt;CR&gt;m'gv''
vnoremap &lt;silent&gt; [L &lt;Esc&gt;:call NextIndent(0, 0, 1, 1)&lt;CR&gt;m'gv''
vnoremap &lt;silent&gt; ]L &lt;Esc&gt;:call NextIndent(0, 1, 1, 1)&lt;CR&gt;m'gv''
onoremap &lt;silent&gt; [l :call NextIndent(0, 0, 0, 1)&lt;CR&gt;
onoremap &lt;silent&gt; ]l :call NextIndent(0, 1, 0, 1)&lt;CR&gt;
onoremap &lt;silent&gt; [L :call NextIndent(1, 0, 1, 1)&lt;CR&gt;
onoremap &lt;silent&gt; ]L :call NextIndent(1, 1, 1, 1)&lt;CR&gt;
</snippet></ROW><ROW><id>16883820</id><snippet>[l</snippet></ROW><ROW><id>16883820</id><snippet>]l</snippet></ROW><ROW><id>16883820</id><snippet>[L</snippet></ROW><ROW><id>16883820</id><snippet>]L</snippet></ROW><ROW><id>16883823</id><snippet>.readlines()</snippet></ROW><ROW><id>16883823</id><snippet>for file in files:
    with open(file, "r") as currentfile, open(file[:-4]+"_RGB_moved.pts", "w") as out:
        firstline = next(currentFile)
        out.write(firstline.split(None, 1)[0])

        for line in currentfile:
            out.write('\n')
            words = line.split()
            newwords = [str(float(words[0])+offsetx), str(float(words[1])+offsety), words[2], str((int(words[3]) + 2050) / 2)]              
            out.write(" ".join(newwords))
</snippet></ROW><ROW><id>16883823</id><snippet>words[2]</snippet></ROW><ROW><id>16883823</id><snippet>csv</snippet></ROW><ROW><id>16883823</id><snippet>import csv

for file in files:
    with open(file, "rb") as currentfile, open(file[:-4]+"_RGB_moved.pts", "wb") as out:
        reader = csv.reader(currentfile, delimiter=' ', quoting=csv.QUOTE_NONE)
        writer = csv.writer(out, delimiter=' ', quoting=csv.QUOTE_NONE)

        out.writerow(next(reader)[0])

        for row in reader:
            newrow = [str(float(row[0])+offsetx), str(float(row[1])+offsety), row[2], str((int(row[3]) + 2050) / 2)]              
            out.writerow(newrow)
</snippet></ROW><ROW><id>16883904</id><snippet>os.path.join</snippet></ROW><ROW><id>16883904</id><snippet>def relocate_path(new_root, path):
    return os.path.join(new_root, path.lstrip('/'))
</snippet></ROW><ROW><id>16883904</id><snippet>&gt;&gt;&gt; os.path.relpath('/absolute/path', '/')
'absolute/path'
</snippet></ROW><ROW><id>16883904</id><snippet>relpath</snippet></ROW><ROW><id>16884025</id><snippet>def clone(self):
    return self.thisptr.clone()
</snippet></ROW><ROW><id>16884025</id><snippet>cdef _Object clone(self) except *:
    return self.thisptr.clone()
</snippet></ROW><ROW><id>16884025</id><snippet>cdef class Object:
    cdef _Object thisobj
    cdef _Object *thisptr    

    def __cinit__(self, Object obj=None):
        if obj:
            self.thisobj = obj.thisobj.clone()
        self.thisptr = &amp;self.thisobj

    def __dealloc__(self):
        pass

    def clone(self):
        return Object(self)
</snippet></ROW><ROW><id>16884057</id><snippet>collections</snippet></ROW><ROW><id>16884084</id><snippet>hstack</snippet></ROW><ROW><id>16884084</id><snippet>a = np.array(([1,2], [5,6], [9,10]))
b = np.array(([3,4], [7,8], [11,12], [13,14], [17,18]))
end = min(a.shape[0], b.shape[0])
np.hstack((a[:end], b[:end]))
</snippet></ROW><ROW><id>16884084</id><snippet>array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])
</snippet></ROW><ROW><id>16884084</id><snippet>a_list = [[1,2], [5,6], [9,10]]
b_list = [[3,4], [7,8], [11,12], [13,14], [17,18]]
</snippet></ROW><ROW><id>16884084</id><snippet>[x + y for x, y in zip(a_list, b_list)]
</snippet></ROW><ROW><id>16884084</id><snippet>[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
</snippet></ROW><ROW><id>16884191</id><snippet>itertools.chain</snippet></ROW><ROW><id>16884191</id><snippet>for i in itertools.chain(ctd.main(), ctd.test1(), ctd.test2()):
    print i
</snippet></ROW><ROW><id>16884584</id><snippet>time</snippet></ROW><ROW><id>16884584</id><snippet>for number in a:
    h = number // 10000
    m = (number // 100) - (h * 100)
    s = number % 100
    t = time(h,m,s)
    # then do whatever you want with t
</snippet></ROW><ROW><id>16884586</id><snippet>L = {'A': {'C':2, 'D':6}, 'B': {'D':8, 'A':3},
   'C': {'D':7, 'E':5}, 'D': {'E':-2}, 'E': {}}
</snippet></ROW><ROW><id>16884617</id><snippet>parent_directory</snippet></ROW><ROW><id>16884617</id><snippet>import sys
sys.path.append('/full/path/to/parent_directory')
</snippet></ROW><ROW><id>16884617</id><snippet>parent_directory</snippet></ROW><ROW><id>16884617</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16884738</id><snippet>float()</snippet></ROW><ROW><id>16884738</id><snippet>for line in content:
    number = float(line)
    if number &gt; 0:
        print(number)
</snippet></ROW><ROW><id>16884738</id><snippet>def getPositive(filename):
    with open(filename, 'r') as infile:
        for line in infile:
            number = float(line)
            if number &gt; 0:
                print(line.rstrip())
</snippet></ROW><ROW><id>16884738</id><snippet>with</snippet></ROW><ROW><id>16884738</id><snippet>&gt;&gt;&gt; getPositive('/tmp/test.txt')
59
12.99
45.3
20
</snippet></ROW><ROW><id>16884773</id><snippet>random.sample()</snippet></ROW><ROW><id>16884773</id><snippet>from random import sample
picked = sample(randomnumbers, 5)
</snippet></ROW><ROW><id>16884773</id><snippet>random.choice</snippet></ROW><ROW><id>16884773</id><snippet>from random import choice
picked = [choice(randomnumbers) for _ in range(5)]
</snippet></ROW><ROW><id>16884773</id><snippet>&gt;&gt;&gt; from random import sample, choice
&gt;&gt;&gt; sample(randomnumbers, 5)
[1, 0, 9, 3, 2]
&gt;&gt;&gt; [choice(randomnumbers) for _ in range(5)]
[1, 6, 5, 5, 0]
</snippet></ROW><ROW><id>16884792</id><snippet>raspberry-gpio-python</snippet></ROW><ROW><id>16884935</id><snippet>from collections import OrderedDict

&gt;&gt;&gt; L = [[1, 2], [4, 5], [1,2], [2, 1]]
&gt;&gt;&gt; [[x, y] for x, y in OrderedDict.fromkeys(frozenset(x) for x in L)]
[[1, 2], [4, 5]]
</snippet></ROW><ROW><id>16884935</id><snippet>&gt;&gt;&gt; [[x, y] for x, y in set(frozenset(x) for x in L)]
[[1, 2], [4, 5]]
</snippet></ROW><ROW><id>16884935</id><snippet>[list(entry) for entry in set(frozenset(x) for x in L)]
[list(entry) for entry in OrderedDict.fromkeys(frozenset(x) for x in L)]
</snippet></ROW><ROW><id>16884985</id><snippet>def antilog(x):
    return 10 ** x
</snippet></ROW><ROW><id>16884985</id><snippet>&gt;&gt;&gt; antilog(0.1)
1.2589254117941673
&gt;&gt;&gt; antilog(3)
1000
&gt;&gt;&gt; inputs = [0.1, 1.0, 1.1, 7.9, 21.5]
&gt;&gt;&gt; outputs = [antilog(x) for x in inputs]
&gt;&gt;&gt; print outputs
[1.2589254117941673, 10.0, 12.589254117941675, 79432823.47242822, 3.1622776601683794e+21]
</snippet></ROW><ROW><id>16885313</id><snippet>def double(filename):
    seen = set()
    with open(filename, 'r') as infile:
        for line in l:
            for word in line.split():
                if word in seen:
                     return True
                seen.add(word)
    return False
</snippet></ROW><ROW><id>16885313</id><snippet>def double(filename):
    seen = set()
    with open(filename, 'r') as infile:
        return any(word in seen or seen.add(word) for line in l for word in line.split())
</snippet></ROW><ROW><id>16885313</id><snippet>True</snippet></ROW><ROW><id>16885313</id><snippet>False</snippet></ROW><ROW><id>16885372</id><snippet>GetSearch</snippet></ROW><ROW><id>16885372</id><snippet>test_module.py</snippet></ROW><ROW><id>16885372</id><snippet>import twitter


def get_tweets(hashtag):
    api = twitter.Api(consumer_key='consumer_key',
                      consumer_secret='consumer_secret',
                      access_token_key='access_token',
                      access_token_secret='access_token_secret')
    api.VerifyCredentials()
    results = api.GetSearch(hashtag)
    return results
</snippet></ROW><ROW><id>16885372</id><snippet>test_my_module.py</snippet></ROW><ROW><id>16885372</id><snippet>from unittest import TestCase
from mock import patch
import twitter
from my_module import get_tweets


class MyTestCase(TestCase):
    def test_ok(self):
        with patch.object(twitter.Api, 'GetSearch') as search_method:
            search_method.return_value = [{'tweet1', 'tweet2'}]

            self.assertEqual(get_tweets('blabla'), [{'tweet1', 'tweet2'}])
</snippet></ROW><ROW><id>16885372</id><snippet>Api</snippet></ROW><ROW><id>16885372</id><snippet>unit tests</snippet></ROW><ROW><id>16885497</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>16885497</id><snippet>#!/usr/bin/env python -u
</snippet></ROW><ROW><id>16885671</id><snippet>app_label = 'djutils'</snippet></ROW><ROW><id>16885671</id><snippet>Meta</snippet></ROW><ROW><id>16885671</id><snippet>app_label</snippet></ROW><ROW><id>16885769</id><snippet>class</snippet></ROW><ROW><id>16885769</id><snippet>print "Hi"</snippet></ROW><ROW><id>16885806</id><snippet>re.match</snippet></ROW><ROW><id>16885806</id><snippet>m = re.match(r'[%s]+' % ch_, str_)
return m.end() if m else 0
</snippet></ROW><ROW><id>16885806</id><snippet>max(len(x) for x in re.findall(r'[%s]+' % ch_, str_))
</snippet></ROW><ROW><id>16885882</id><snippet>import re
def change(filename):
    with open(filename) as infile, open("changed.txt", "w") as outfile:
        text = infile.read()
        outfile.write(re.sub(r"\b\w{4}\b", "XXXX", text))
</snippet></ROW><ROW><id>16885882</id><snippet>2001</snippet></ROW><ROW><id>16885882</id><snippet>böse</snippet></ROW><ROW><id>16885882</id><snippet>they're</snippet></ROW><ROW><id>16885882</id><snippet>XXXX're</snippet></ROW><ROW><id>16885882</id><snippet>\b\w{4}\b</snippet></ROW><ROW><id>16885942</id><snippet>while difflen &gt; 0 or b != 0:
        b = b^c 
        lendif = abs(len(str(bin(b))) - len(str(bin(c))))
        c = c&gt;&gt;lendif
        difflen = difflen - 1
</snippet></ROW><ROW><id>16885942</id><snippet> while difflen &gt; 0 and b != 0:
</snippet></ROW><ROW><id>16885942</id><snippet>  difflen -= lendif
</snippet></ROW><ROW><id>16885942</id><snippet>  while difflen &gt;= 0 and b != 0:
</snippet></ROW><ROW><id>16885942</id><snippet>while difflen &gt;= 0 and b != 0:
        b = b^c 
        lendif = abs(len(str(bin(b))) - len(str(bin(c))))
        c = c&gt;&gt;lendif
        difflen -= lendif
</snippet></ROW><ROW><id>16886004</id><snippet>In [1]: mylist = ["Wednesday_A_20", "Tuesday_C_22", "Thursday_A_30"]

In [2]: key = lambda s: s.split('_')[1]

In [3]: from itertools import groupby

In [4]: [next(g) for k, g in groupby(sorted(mylist, key=key), key=key)]
Out[4]: ['Wednesday_A_20', 'Tuesday_C_22']
</snippet></ROW><ROW><id>16886083</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16886083</id><snippet>sys.path</snippet></ROW><ROW><id>16886083</id><snippet>sys.path.append("/root/stratum-mining/mining")
</snippet></ROW><ROW><id>16886083</id><snippet>sys.path.append("/root/stratum-mining")
</snippet></ROW><ROW><id>16886083</id><snippet>import mining</snippet></ROW><ROW><id>16886083</id><snippet>/root/stratum-mining/mining</snippet></ROW><ROW><id>16886083</id><snippet>__init__.py</snippet></ROW><ROW><id>16886089</id><snippet>geohash</snippet></ROW><ROW><id>16886089</id><snippet>Geohash</snippet></ROW><ROW><id>16886089</id><snippet>ebc8ycq</snippet></ROW><ROW><id>16886089</id><snippet>ebc8yc*</snippet></ROW><ROW><id>16886120</id><snippet>from modulename import *</snippet></ROW><ROW><id>16886120</id><snippet>import modulename</snippet></ROW><ROW><id>16886120</id><snippet>modulename.</snippet></ROW><ROW><id>16886120</id><snippet>from modulename import *</snippet></ROW><ROW><id>16886120</id><snippet># mainflow.py
import ui # interpreter stops reading mainflow and starts reading ui

class Foo:
    ...

theUI = ui.UI()
</snippet></ROW><ROW><id>16886120</id><snippet># ui.py
import mainflow # mainflow already being loaded; interpretation of ui continues uninterrupted

def dosomething():
    myfoo = mainflow.Foo() # so far so good, not interpreted until the function is called

class Bar(mainflow.Foo): # mainflow.Foo not reached yet, error here
    ...

class UI:
    ...
</snippet></ROW><ROW><id>16886120</id><snippet>theUI = ui.UI()</snippet></ROW><ROW><id>16886120</id><snippet>import mainflow</snippet></ROW><ROW><id>16886120</id><snippet># mainflow.py
import ui
...

theUI = None

def initialize():
    global theUI
    theUI = ui.UI()
</snippet></ROW><ROW><id>16886120</id><snippet># mainflow.py
...

theUI = None

def initialize():
    global theUI
    theUI = ui.UI()

import ui # Waht!? Crazy! Import at the bottom of a file. Now all of mainflow's names are guaranteed to exist and ui can access them.
</snippet></ROW><ROW><id>16886120</id><snippet>module.</snippet></ROW><ROW><id>16886354</id><snippet>//th/data()
</snippet></ROW><ROW><id>16886354</id><snippet>/data()</snippet></ROW><ROW><id>16886354</id><snippet>/data(.)</snippet></ROW><ROW><id>16886354</id><snippet>data()</snippet></ROW><ROW><id>16886354</id><snippet>text()</snippet></ROW><ROW><id>16886354</id><snippet>text()</snippet></ROW><ROW><id>16886354</id><snippet>//text()</snippet></ROW><ROW><id>16886354</id><snippet>data()</snippet></ROW><ROW><id>16886354</id><snippet>&lt;th/&gt;</snippet></ROW><ROW><id>16886368</id><snippet>{% load compress %}

{% compress js inline %}
&lt;script src="/static/js/one.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script type="text/javascript" charset="utf-8"&gt;obj.value = "value";&lt;/script&gt;
{% endcompress %}
</snippet></ROW><ROW><id>16886368</id><snippet>&lt;script type="text/javascript" charset="utf-8"&gt;
obj = {};
obj.value = "value";
&lt;/script&gt;
</snippet></ROW><ROW><id>16886390</id><snippet>math.log(x, [base])</snippet></ROW><ROW><id>16886390</id><snippet>base</snippet></ROW><ROW><id>16886390</id><snippet>math.log(x, base)
</snippet></ROW><ROW><id>16886390</id><snippet>float</snippet></ROW><ROW><id>16886390</id><snippet>x = 40.0

math.log(x, 10)
</snippet></ROW><ROW><id>16886465</id><snippet>enumerate</snippet></ROW><ROW><id>16886465</id><snippet>for n, item in enumerate(player_hand):
    screen.blit(pygame.image.load(os.path.join('Images',item.name+'.png')), (100+n*10, 100))
</snippet></ROW><ROW><id>16886659</id><snippet>while</snippet></ROW><ROW><id>16886659</id><snippet>sleep 1</snippet></ROW><ROW><id>16886659</id><snippet>mpstat</snippet></ROW><ROW><id>16886659</id><snippet>import subprocess
import os
import time

CPU = "mpstat -P ALL | awk 'NR==4 { print $3 }'"
MEM = "free -m | awk 'NR==3 { print $4 }'"

def runCommands():
    count = 0
    f = open('cpu_usage.txt', 'a')
    while True:
         t = str(int(time.time()))
         cpu = subprocess.check_output(CPU, shell = True).strip()
         mem = subprocess.check_output(MEM, shell = True).strip()

         f.write(' '.join([t, cpu, mem]))
         f.write('\n')
         f.flush()

         time.sleep(1)

runCommands()
</snippet></ROW><ROW><id>16886820</id><snippet>from Tkinter import *

list1 = ['001 aaa', '002 bbb', '003 ccc']
status = ["On", "Off", "Unknown"]
master = Tk()

def create_option(r, x):
    x = x.split(" ", 2)
    variable = StringVar(master)
    Label(master, text=x[0], relief=RIDGE, anchor=W).grid(row=r, column=0, sticky=W+E)
    Label(master, text=x[1], relief=RIDGE, anchor=W).grid(row=r, column=1, sticky=W+E)
    OptionMenu(master, variable, *status).grid(row=r, column=2, sticky=W+E)
    return variable

variables = [create_option(r,x) for r, x in enumerate(list1)]
root.mainloop()
</snippet></ROW><ROW><id>16887004</id><snippet>result = []
for line in open('test.txt'):
    result.append(line.count('NA'))
</snippet></ROW><ROW><id>16887004</id><snippet>std::vector</snippet></ROW><ROW><id>16887004</id><snippet>// hack.c

#include &lt;python2.7/Python.h&gt;

PyObject* foo(const char* filename)
{
    PyObject* result = PyList_New(0);
    int i;

    for (i = 0; i &lt; 100; ++i)
    {
        PyList_Append(result, PyInt_FromLong(i));
    }

    return result;
}
</snippet></ROW><ROW><id>16887004</id><snippet>$ gcc -c hack.c -fPIC
$ ld -o hack.so -shared hack.o -lpython2.7
</snippet></ROW><ROW><id>16887004</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; dll = CDLL('./hack.so')
&gt;&gt;&gt; dll.foo.restype = py_object
&gt;&gt;&gt; dll.foo('foo')
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...]
</snippet></ROW><ROW><id>16887295</id><snippet>c = np.array([np.linspace(i,j,5) for i,j in zip(a,b)])

#array([[ 1.  ,  1.25,  1.5 ,  1.75,  2.  ],
#       [ 2.  ,  2.25,  2.5 ,  2.75,  3.  ],
#       [ 3.  ,  3.25,  3.5 ,  3.75,  4.  ],
#       [ 4.  ,  4.25,  4.5 ,  4.75,  5.  ],
#       [ 5.  ,  5.25,  5.5 ,  5.75,  6.  ]])
</snippet></ROW><ROW><id>16887329</id><snippet>verifyCallback</snippet></ROW><ROW><id>16887329</id><snippet>getContext</snippet></ROW><ROW><id>16887861</id><snippet>get</snippet></ROW><ROW><id>16887861</id><snippet> # Count primes in each segment
 processes = [] 
 for start in xrange(2, n+1, segment_size+1):
     end = start+segment_size
     if end&gt;n:
         end = n
     processes.append(pool.apply_async(countprimes, [start, end]))
 for process in processes:
     count += process.get()
</snippet></ROW><ROW><id>16887880</id><snippet>datetime</snippet></ROW><ROW><id>16887880</id><snippet>from</snippet></ROW><ROW><id>16888133</id><snippet>if item in path</snippet></ROW><ROW><id>16888133</id><snippet>path.endswith(item)</snippet></ROW><ROW><id>16888133</id><snippet>from os.path import basename
orderedpaths = [ ... if basename(path) == item]
</snippet></ROW><ROW><id>16888133</id><snippet>re.escape()</snippet></ROW><ROW><id>16888133</id><snippet>orderedpaths = [path for item in target for path in filenames
                 if re.search(re.escape(item), path)]
</snippet></ROW><ROW><id>16888281</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>16888281</id><snippet>^</snippet></ROW><ROW><id>16888281</id><snippet>$</snippet></ROW><ROW><id>16888281</id><snippet>m</snippet></ROW><ROW><id>16888298</id><snippet>tofile()</snippet></ROW><ROW><id>16888298</id><snippet>from array import *

bin_array = array('B')

bin_array.append(int('011',2))
bin_array.append(int('010',2))
bin_array.append(int('110',2))

f = file('binary.mydata','wb')
bin_array.tofile(f)
f.close()
</snippet></ROW><ROW><id>16888405</id><snippet>ndmin</snippet></ROW><ROW><id>16888405</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>16888420</id><snippet>def function(data,time,n):
</snippet></ROW><ROW><id>16888420</id><snippet>for n in xrange(len(data)):
   r = function(data,time,n)
</snippet></ROW><ROW><id>16888424</id><snippet>def outFormat(raw):
</snippet></ROW><ROW><id>16888424</id><snippet>def outFormat(self, raw):
</snippet></ROW><ROW><id>16888424</id><snippet>@staticmethod
def outFormat(raw):
</snippet></ROW><ROW><id>16888424</id><snippet>self</snippet></ROW><ROW><id>16888424</id><snippet>outFormat()</snippet></ROW><ROW><id>16888497</id><snippet>import Cookie

# The function that receives the request
def application(environ, start_response):
    cookie = Cookie.SimpleCookie()
    cookie.load(environ['HTTP_COOKIE'])
    some_value   = cookies['some_key'].value
</snippet></ROW><ROW><id>16888673</id><snippet>import pprint

def my_safe_repr(object, context, maxlevels, level):
    typ = pprint._type(object)
    if typ is unicode:
        object = str(object)
    return pprint._safe_repr(object, context, maxlevels, level)

printer = pprint.PrettyPrinter()
printer.format = my_safe_repr
printer.pprint({u'foo': u'bar', u'baz': [u'apple', u'orange', u'pear', u'guava', u'banana'], u'hello': u'world'})
</snippet></ROW><ROW><id>16888673</id><snippet>{'baz': ['apple', 'orange', 'pear', 'guava', 'banana'],
 'foo': 'bar',
 'hello': 'world'}
</snippet></ROW><ROW><id>16888907</id><snippet>l</snippet></ROW><ROW><id>16888907</id><snippet>1</snippet></ROW><ROW><id>16888907</id><snippet>l1</snippet></ROW><ROW><id>16888907</id><snippet>l1 = [1,2,3,4,5,6,7,8]
l2 = []
for number in l1:
    calc = number*10
    print calc
    l2.append(calc)
</snippet></ROW><ROW><id>16888907</id><snippet>l2 = [ number*10 for number in l1 ]
</snippet></ROW><ROW><id>16889032</id><snippet>objc_object</snippet></ROW><ROW><id>16889032</id><snippet>view = objc.objc_object(c_void_p=ptr)
</snippet></ROW><ROW><id>16889032</id><snippet>wxPython</snippet></ROW><ROW><id>16889032</id><snippet>ctypes.c_void_p</snippet></ROW><ROW><id>16889032</id><snippet>int</snippet></ROW><ROW><id>16889032</id><snippet>view = objc.objc_object(c_void_p=ctypes.c_void_p(ptr))
</snippet></ROW><ROW><id>16889032</id><snippet>objc.version</snippet></ROW><ROW><id>16889032</id><snippet>view = NSView.objectWithSomethingOrOther_(ptr)
</snippet></ROW><ROW><id>16889032</id><snippet>arg = _C_PTR + "NSInt" + "1776"
</snippet></ROW><ROW><id>16889032</id><snippet>_C_PTR</snippet></ROW><ROW><id>16889032</id><snippet>NSInt</snippet></ROW><ROW><id>16889032</id><snippet>NSNumber</snippet></ROW><ROW><id>16889032</id><snippet>_C_ID</snippet></ROW><ROW><id>16889032</id><snippet>id</snippet></ROW><ROW><id>16889032</id><snippet>NSNumber *</snippet></ROW><ROW><id>16889032</id><snippet>NSInteger</snippet></ROW><ROW><id>16889032</id><snippet>_C_PTR + _C_NSInteger</snippet></ROW><ROW><id>16889032</id><snippet>_C_PTR + _C_LNG</snippet></ROW><ROW><id>16889032</id><snippet>NSInteger *</snippet></ROW><ROW><id>16889032</id><snippet>1776</snippet></ROW><ROW><id>16889032</id><snippet>0x000000007a6e5c90</snippet></ROW><ROW><id>16889032</id><snippet>NSView</snippet></ROW><ROW><id>16889032</id><snippet>NSView</snippet></ROW><ROW><id>16889118</id><snippet>sum</snippet></ROW><ROW><id>16889118</id><snippet>SELECT sum(a - b) FROM the_table;
</snippet></ROW><ROW><id>16889118</id><snippet>sum</snippet></ROW><ROW><id>16889118</id><snippet>SELECT a - sum(b) FROM the_table;
</snippet></ROW><ROW><id>16889118</id><snippet>b - a</snippet></ROW><ROW><id>16889118</id><snippet>(-a) + b</snippet></ROW><ROW><id>16889140</id><snippet>sum</snippet></ROW><ROW><id>16889140</id><snippet>import numpy as np
array = numpy.array((matrix))
answer = np.apply_along_axis(sum,0,array[1::])
my_dict = dict(zip(matrix[0],answer))
</snippet></ROW><ROW><id>16889322</id><snippet>def buildProtocol(self, address):
    proto = protocol.ClientFactory.buildProtocol(self, address, 12)
</snippet></ROW><ROW><id>16889322</id><snippet>ClientFactory.buildProtocol</snippet></ROW><ROW><id>16889322</id><snippet>__init__</snippet></ROW><ROW><id>16889322</id><snippet>IProtocol</snippet></ROW><ROW><id>16889322</id><snippet>factory</snippet></ROW><ROW><id>16889322</id><snippet>class MyClientProtocol(protocol.Protocol):
    def connectionMade(self):
        # use self.factory here:
        self.transport.write(self.factory.arg)

class MyClientFactory(protocol.ClientFactory):
    protocol = MyClientProtocol

    def __init__(self, arg):
        self.arg = arg
</snippet></ROW><ROW><id>16889322</id><snippet>Protocol</snippet></ROW><ROW><id>16889322</id><snippet>IProtocol</snippet></ROW><ROW><id>16889322</id><snippet>IProtocolFactory</snippet></ROW><ROW><id>16889428</id><snippet>class A(object): 
    name = ''                      # these are class
    children = []                  # attributes
</snippet></ROW><ROW><id>16889428</id><snippet>class A(object):
    def __init__(self):
        self.name = ''             # these are instance
        self.children = []         # attributes
</snippet></ROW><ROW><id>16889631</id><snippet>heromake</snippet></ROW><ROW><id>16889631</id><snippet>h</snippet></ROW><ROW><id>16889631</id><snippet>self</snippet></ROW><ROW><id>16889631</id><snippet>setHeroDicts</snippet></ROW><ROW><id>16889631</id><snippet>def heromake(self):
    self.setHeroDicts("Welcome", "Name")
    self.setHeroDicts("AskClass", "Class")
    self.setHeroDicts("AskWeapon", "Weapon")
</snippet></ROW><ROW><id>16889631</id><snippet>h = hero()</snippet></ROW><ROW><id>16889631</id><snippet>hero</snippet></ROW><ROW><id>16889631</id><snippet>class Hero</snippet></ROW><ROW><id>16889631</id><snippet>class Hero(object)</snippet></ROW><ROW><id>16889631</id><snippet>herodict</snippet></ROW><ROW><id>16889631</id><snippet>herodict</snippet></ROW><ROW><id>16889631</id><snippet>h.herodict["Class"]</snippet></ROW><ROW><id>16889631</id><snippet>h.prof</snippet></ROW><ROW><id>16889776</id><snippet>db.mycollection.ensureIndex({_id:1, date1:1, date2:1, number:1, type:1}, {unique: true});
</snippet></ROW><ROW><id>16889936</id><snippet>True and "asdf" or absolutely_anything_here_or_following
</snippet></ROW><ROW><id>16889936</id><snippet>False and "asdf" or absolutely_anything_here
</snippet></ROW><ROW><id>16890218</id><snippet>18</snippet></ROW><ROW><id>16890218</id><snippet>&gt;&gt;&gt; d = {1:2, 3:4}
&gt;&gt;&gt; d[18]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 18
</snippet></ROW><ROW><id>16890218</id><snippet>try:
    del self.imageCache[self.imageId]
except KeyError:
    pass
</snippet></ROW><ROW><id>16890581</id><snippet>try</snippet></ROW><ROW><id>16890581</id><snippet>try:
    a = np.genfromtext("filename.txt")
except IOError:
    a = np.array([]) # Or np.empty or np.zeros...
</snippet></ROW><ROW><id>16890771</id><snippet>questions = forms.MultipleChoiceField(
    required=False,
    label='',
    widget=forms.CheckboxSelectMultiple(attrs={'class': 'my-class'}),
    choices=CHOICES,
)
</snippet></ROW><ROW><id>16890771</id><snippet>my-class</snippet></ROW><ROW><id>16890771</id><snippet>label</snippet></ROW><ROW><id>16890771</id><snippet>forms.RadioSelect</snippet></ROW><ROW><id>16890776</id><snippet>import numpy as np

def perpendicular( a ) :
    b = np.empty_like(a)
    b[0] = -a[1]
    b[1] = a[0]
    return b

def normalize(a):
    a = np.array(a)
    return a/np.linalg.norm(a)

if __name__ == "__main__":    
    a = [1,2]
    print perpendicular(normalize(a))
    b = (4,-6)
    print perpendicular(normalize(b))
</snippet></ROW><ROW><id>16890776</id><snippet>[-0.89442719  0.4472136 ]
[ 0.83205029  0.5547002 ]
</snippet></ROW><ROW><id>16890776</id><snippet>normalize</snippet></ROW><ROW><id>16890810</id><snippet>subprocess.call()</snippet></ROW><ROW><id>16890810</id><snippet>subprocess.check_call()</snippet></ROW><ROW><id>16891158</id><snippet>setTimeout(function() {
     $.get("{% url 'ABC' %}") // Do something after 5 seconds
}, 5000);
</snippet></ROW><ROW><id>16891161</id><snippet>def test_executor_future(self):
    class Executor():
        def __init__(self, io_loop=None):
            self.io_loop = io_loop or IOLoop.instance()
            self.executor = ThreadPoolExecutor(2)

        @tornado.concurrent.run_on_executor
        def wait_and_return_a_value(self):
            return 20

        def destroy(self):
            self.executor.shutdown(1)

    @tornado.gen.coroutine
    def async_compare(callback):
        executor = Executor()
        val = yield executor.wait_and_return_a_value()
        assert_that(val, equal_to(20))

        executor.destroy()
        callback()

    async_compare(self.stop)
    self.wait()
</snippet></ROW><ROW><id>16891225</id><snippet>user_id</snippet></ROW><ROW><id>16891225</id><snippet>request.user.id</snippet></ROW><ROW><id>16891225</id><snippet>int</snippet></ROW><ROW><id>16891333</id><snippet>class ThisIsDecorator(object):
    def __init__(self, param):
        self.param = param   # Parameter may vary with the function being decorated
    def __call__(self, fn):
        wraps(fn) # [1]
        def wrapper(fn, fn_self, *args): # [2] fn_self refers to original self param from function fn (test_a_lot) [2]
            with fn_self.baz as fn_self.magic: # I pass magic to fn_self to make magic accesible in function fn (test_a_lot)
                with fn_self.magic.fooz as more_magic:
                    blah = self.param.much_more_magic() # repetative bleh
            return fn(fn_self, *args)
        return decorator.decorator(wrapper, fn) 
</snippet></ROW><ROW><id>16891333</id><snippet>wraps</snippet></ROW><ROW><id>16891333</id><snippet>fn</snippet></ROW><ROW><id>16891333</id><snippet>__name__</snippet></ROW><ROW><id>16891333</id><snippet>__module__</snippet></ROW><ROW><id>16891333</id><snippet>__doc__</snippet></ROW><ROW><id>16891333</id><snippet>wrapper</snippet></ROW><ROW><id>16891333</id><snippet>self = &lt;function test_a_lot at 0x24820c8&gt; args = (&lt;TestSomething object at 0x29c77d0&gt;, None, None, None, None), kw = {}</snippet></ROW><ROW><id>16891333</id><snippet>args[0]</snippet></ROW><ROW><id>16891333</id><snippet>fn_self</snippet></ROW><ROW><id>16891333</id><snippet> @classmethod
 def this_is_decorator(cls, fn):
     @wraps(fn)
     def wrapper(fn, fn_self, *args):
         with fn_self.baz as fn_self.magic:
             with fn_self.magic.fooz as more_magic:
                 blah = more_magic.much_more_magic() # repetative bleh
             return fn(fn_self, *args)
     return decorator.decorator(wrapper,fn)
</snippet></ROW><ROW><id>16891418</id><snippet>def remove_prefix(text, prefix):
    if text.startswith(prefix):
        return text[len(prefix):]
    return text #or whatever
</snippet></ROW><ROW><id>16891660</id><snippet>my_library = __import__("my_module")
</snippet></ROW><ROW><id>16891660</id><snippet>mock.patch</snippet></ROW><ROW><id>16891660</id><snippet>from mock import patch
import my_module as my_library

class MyTest(TestCase):
    def test_add(self):
        acronym = 'TEST'
        with patch.object(my_library, 'add') as add_method:   
            m = MyModel(acronym=acronym)
            m.save()
            add_method.assert_called_with(acronym=acronym)
</snippet></ROW><ROW><id>16891660</id><snippet>from mock import patch

class MyTest(TestCase):
    def test_add(self):
        acronym = 'TEST'
        with patch('my_module.add') as add_method:   
            m = MyModel(acronym=acronym)
            m.save()
            add_method.assert_called_with(acronym=acronym)
</snippet></ROW><ROW><id>16891681</id><snippet>import os
import pprint
P= ["E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin" , "E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BCAS_BD_Infrastructure"]
Cld1 = ['BGD_4_new_district', 'BGD_3_old_district', 'BGD_2_division', 'BGD_1_all', 'BGD_5_Upazilla', 'BGD_4_old_district', 'BGD_6_Union_court', 'BGD_6_Union', 'BD_exposed_coastal_area','BD_drought', 'BGD_1_River', 'BGD_1_River_detail', 'BD_international_bnd', 'BGD_1_River_1', 'BGD_7_Mauza', 'test', 'BGD_5_UpazillaAnno', 'BGD_4_new_districtAnno', 'BGD_4_new_districtAnno2']
Cld2 = ['BD_Health_Infrastructures_1', 'BD_Railway_Establishments_1', 'BGD_roads_1']

lis1 = [os.path.join(x, y) for x in P for y in Cld1]
lis2 = [os.path.join(x, y) for x in P for y in Cld2]

My_Full_Path = lis1 + lis2

pprint.pprint(My_Full_Path)
</snippet></ROW><ROW><id>16891681</id><snippet>['E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_4_new_district',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_3_old_district',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_2_division',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_1_all',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_5_Upazilla',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_4_old_district',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_6_Union_court',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_6_Union',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BD_exposed_coastal_area',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BD_drought',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_1_River',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_1_River_detail',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BD_international_bnd',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_1_River_1',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_7_Mauza',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\test',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_5_UpazillaAnno',
 'E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin\\BGD_4_new_districtAn
  ...
  ...
</snippet></ROW><ROW><id>16891858</id><snippet>artist_name</snippet></ROW><ROW><id>16891858</id><snippet>cur.execute("INSERT INTO AmazonSalesRank(Artist_Name) VALUES(%s)", [artist_name])
</snippet></ROW><ROW><id>16891869</id><snippet>from itertools import chain
d1={'A': [], 'C': ['SUV'], 'B': []}
print list(chain.from_iterable(d1.itervalues()))
</snippet></ROW><ROW><id>16891941</id><snippet>http</snippet></ROW><ROW><id>16891941</id><snippet>proxies={'https': 'http://IP:PORT'}</snippet></ROW><ROW><id>16892286</id><snippet>import pytz
from pytz import timezone

query = GuestMessage.all().get()
current = query.date
user_tz = timezone('Asia/Singapore')
current = current.replace(tzinfo=pytz.utc).astimezone(user_tz)
self.response.write(current.strftime('%Y-%m-%d %H:%M:%S %z')) # 2013-05-22 19:54:14 +0800
self.response.write(current.strftime('%Y-%m-%d %H:%M:%S %Z')) # 2013-05-22 19:54:14 SGT
</snippet></ROW><ROW><id>16892286</id><snippet>county_code = self.request.headers['X-Appengine-Country'] # Return County code like SG, IN etc.
tz = pytz.country_timezones(county_code)
</snippet></ROW><ROW><id>16892286</id><snippet>ImportError: No module named pytz</snippet></ROW><ROW><id>16892410</id><snippet>model.save()</snippet></ROW><ROW><id>16892410</id><snippet>request.user</snippet></ROW><ROW><id>16892410</id><snippet>from django.contrib.auth.models import Permission

def myview(request):
    model = Model(...)
    model.save()
    permission = Permission.objects.get(codename="...")
    request.user.user_permissions.add(permission)
</snippet></ROW><ROW><id>16892410</id><snippet>def myview(request):
    ...
    form = SomeForm(...)
    form.request = request
</snippet></ROW><ROW><id>16892410</id><snippet>self.request</snippet></ROW><ROW><id>16892410</id><snippet>class SomeForm(...):
    def clean_somefield(self):
        data = self.cleaned_data["somefield"]
        if self.request.user....:
             raise ValidationError()
</snippet></ROW><ROW><id>16892451</id><snippet>Decimal(2).sqrt()</snippet></ROW><ROW><id>16892451</id><snippet>Decimal(sqrt(2))</snippet></ROW><ROW><id>16892607</id><snippet>os.path.relpath</snippet></ROW><ROW><id>16892607</id><snippet>print(os.path.relpath(os.path.join(root, subFile), directory))
</snippet></ROW><ROW><id>16892805</id><snippet>print root11.__repr__()</snippet></ROW><ROW><id>16893056</id><snippet>import pylab as pl
import numpy as np

d = {'CLOVER':4,'SPADE':6,'DIAMOND':7,'HEART':2}
X = np.arange(len(d))
pl.bar(X, d.values(), align='center', width=0.5)
pl.xticks(X, d.keys())
ymax = max(d.values()) + 1
pl.ylim(0, ymax)
pl.show()
</snippet></ROW><ROW><id>16893649</id><snippet>Array</snippet></ROW><ROW><id>16893649</id><snippet>class Array(object):

    def __init__(self):
        #self.__lib = ...
        self.np_array = numpy.array(self._lib.get_arr())

    def __getitem__(self, key): 
        self.np_array = numpy.array(self._lib.get_arr())
        return self.np_array.__getitem__(key)

    def __setitem__(self, key, value):
        self.np_array.__setitem__(key, value)
        self._lib.set_arr(new_arr.ctypes)

    def __getattr__(self, name):
        """Delegate to NumPy array."""
        try:
            return getattr(self.np_array, name)
        except AttributeError:
            raise AttributeError(
                 "'Array' object has no attribute {}".format(name))
</snippet></ROW><ROW><id>16893649</id><snippet>&gt;&gt;&gt; a = Array()
&gt;&gt;&gt; a[1]
1
&gt;&gt;&gt; a[1] = 10
&gt;&gt;&gt; a[1]
10
</snippet></ROW><ROW><id>16893649</id><snippet>10</snippet></ROW><ROW><id>16893662</id><snippet>pubsub</snippet></ROW><ROW><id>16893662</id><snippet>subscribe</snippet></ROW><ROW><id>16893662</id><snippet>chatroom</snippet></ROW><ROW><id>16893662</id><snippet>chatroom</snippet></ROW><ROW><id>16893818</id><snippet>Renderer</snippet></ROW><ROW><id>16893818</id><snippet>missing_tags="strict"</snippet></ROW><ROW><id>16893818</id><snippet>&gt;&gt;&gt; import pystache
&gt;&gt;&gt; pystache.Renderer(missing_tags="strict").render("I say {{MSG}} {{THIS_IS_UNDEFINED}}", d)
KeyNotFoundError: Key u'THIS_IS_UNDEFINED' not found: first part
</snippet></ROW><ROW><id>16893818</id><snippet>strictrender</snippet></ROW><ROW><id>16893818</id><snippet>def strictrender(s, d):
    renderer = pystache.Renderer(missing_tags='strict')
    return renderer.render(s, d)
</snippet></ROW><ROW><id>16893850</id><snippet>import decimal
# set the precision to double that of float64.. or whatever you want.
decimal.setcontext(decimal.Context(prec=34))
def foo(x, y, z)
    x,y,z = [decimal.Decimal(v) for v in (x,y,z)] 
    a = x + y * z
    return a  # you forgot this line in the original code.
</snippet></ROW><ROW><id>16894102</id><snippet>from datetime import datetime, timedelta
Example.objects.filter(date_created__lte=datetime.utcnow() - 
                          timedelta(days=6*30)).delete()
</snippet></ROW><ROW><id>16894204</id><snippet>is</snippet></ROW><ROW><id>16894204</id><snippet>_sentinel = object()
def get_value(key, default=_sentinel):
    if default is _sentinel:
         # no other value provided
</snippet></ROW><ROW><id>16894303</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; diffs = defaultdict(list)
&gt;&gt;&gt; for line in s.split('\n'):
    d = eval(line) # We have a dict
    for k in d: # Only one value, k is the frame
        # Only get even values for ids
        for i in range(0, len(d[k]), 2):
            diffs[d[k][i]].append(k)


&gt;&gt;&gt; diffs # We now have a dict with ids as keys :
defaultdict(&lt;type 'list'&gt;, {10: [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], 2: [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], 3: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], 29: [31, 32, 33, 34, 35, 36]})
</snippet></ROW><ROW><id>16894303</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; for id_ in diffs:
    diffs[id_].sort()
    for k, g in groupby(enumerate(diffs[id_]), lambda (i, x): i - x):
        group = map(itemgetter(1), g)
        print 'id {0} : {1} -&gt; {2}'.format(id_, group[0], group[-1])


id 10 : 23 -&gt; 36
id 2 : 17 -&gt; 33
id 3 : 16 -&gt; 36
id 29 : 31 -&gt; 36
</snippet></ROW><ROW><id>16894303</id><snippet>&gt;&gt;&gt; def compare(f1, f2):
    # 2 embedded 'with' because I'm on Python 2.5 :-)
    with open(f1+'.txt', 'r') as fin1:
        with open(f2+'.txt', 'r') as fin2:
            lines1 = fin1.readlines()
            lines2 = fin2.readlines()
                    # Do not forget the strip function to remove unnecessary '\n'
            diff_lines = [l.strip() for l in lines1 if l not in lines2]
                    # Ok, we have our differences (very basic)
            diffs = defaultdict(list)
            for line in diff_lines:
                d = eval(line) # We have a dict
                for k in d:
                    list_ids = d[k] # Only one value, k is the frame
                    for i in range(0, len(d[k]), 2):
                        diffs[d[k][i]].append(k)
            for id_ in diffs:
                diffs[id_].sort()
                for k, g in groupby(enumerate(diffs[id_]), lambda (i, x): i - x):
                    group = map(itemgetter(1), g)
                    print 'id {0} : {1} -&gt; {2}'.format(id_, group[0], group[-1])

&gt;&gt;&gt; compare(r'E:\CFM\Dev\Python\test\f1', r'E:\CFM\Dev\Python\test\f2')
id 2 : 17 -&gt; 24
id 2 : 26 -&gt; 26
id 3 : 16 -&gt; 24
id 3 : 26 -&gt; 26
id 10 : 23 -&gt; 24
id 10 : 26 -&gt; 26
</snippet></ROW><ROW><id>16894546</id><snippet>class Sessioning(Thread):
    def __init__(self, p_number):
         Thread.__init__(self)
         self._pn = p_number

    def run(self):
        print(self._pn)

p_number = 50885
for i in xrange(30):
    Sessioning(p_number).start()
    p_number += 1
</snippet></ROW><ROW><id>16895054</id><snippet>object</snippet></ROW><ROW><id>16895054</id><snippet>__dict__</snippet></ROW><ROW><id>16895054</id><snippet>__dict__</snippet></ROW><ROW><id>16895864</id><snippet>dict</snippet></ROW><ROW><id>16895864</id><snippet>d['missing']</snippet></ROW><ROW><id>16895864</id><snippet>KeyError</snippet></ROW><ROW><id>16895864</id><snippet>d.get('missing')</snippet></ROW><ROW><id>16896091</id><snippet>DataFrame</snippet></ROW><ROW><id>16896091</id><snippet>xl_file = pd.ExcelFile(file_name)

dfs = {sheet_name: xl_file.parse(sheet_name) 
          for sheet_name in xl_file.sheet_names}
</snippet></ROW><ROW><id>16896094</id><snippet>iptables -I INPUT -p tcp --dport $PORT -i eth0 -m state --state NEW -m recent --set

iptables -I INPUT -p tcp --dport $PORT -i eth0 -m state --state NEW -m recent --update --seconds 600 --hitcount 2 -j DROP
</snippet></ROW><ROW><id>16896291</id><snippet>soup2=BeautifulSoup(file.encode('utf8'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 17: ordinal not in range(128)
</snippet></ROW><ROW><id>16896291</id><snippet>soup2=BeautifulSoup(file.decode('utf-8'))
soup2.find('p')
&lt;p&gt;£
&lt;/p&gt;
</snippet></ROW><ROW><id>16896353</id><snippet>fobj_in = io.StringIO("""Name1, Surname1  Team1
                  Team2
                  Team3
Name2, Surname2  Team2
                  Team4
Name3, Surname3  Team1
                  Team5""")

fobj_out = io.StringIO()

from collections import defaultdict

teams = defaultdict(list)

for line in fobj_in:
    items = line.split()
    if len(items) == 3:
        name = items[:2]
        team = items[2]
    else:
        team = items[0]
    teams[team].append(name)

for team_name in sorted(teams.keys()):
    fobj_out.write(team_name + ', ')
    for name in teams[team_name][:-1]:
        fobj_out.write('{} {}, '.format(name[0], name[1]))
    name = teams[team_name][-1]
    fobj_out.write('{} {}\n'.format(name[0], name[1]))


fobj_out.seek(0)
print(fobj_out.read())
</snippet></ROW><ROW><id>16896353</id><snippet>Team1, Name1, Surname1, Name3, Surname3
Team2, Name1, Surname1, Name2, Surname2
Team3, Name1, Surname1
Team4, Name2, Surname2
Team5, Name3, Surname3
</snippet></ROW><ROW><id>16896353</id><snippet>fobj_in = open('in_file.txt')
fobj_out = open('out_file.txt', 'w')
</snippet></ROW><ROW><id>16896353</id><snippet>from collections import defaultdict
teams = defaultdict(list)
for line in fobj_in:
    if not line.strip():
        continue
    items = [entry.strip() for entry in line.split('\t') if entry]
    if len(items) == 2:
        name = items[0]
        team = items[1]
    else:
        team = items[0]
    teams[team].append(name)
for team_name in sorted(teams.keys()):
    fobj_out.write(team_name + ', ')
    for name in teams[team_name][:-1]:
        fobj_out.write('{}, '.format(name))
    name = teams[team_name][-1]
    fobj_out.write('{}\n'.format(name))
</snippet></ROW><ROW><id>16896353</id><snippet>"Décore ta vie" (2003), Boilard, Naggy
"Mouki" (2010), Boileau, Sonia
A chacun sa place (2011), Boinem, Victor Emmanuel
Absence (2009) (V), Boillat, Patricia
C.A.L.L.E. (2005), Boillat, Patricia
Comment devenir un trou de cul et enfin plaire aux femmes (2004), Boire, Roger
Couleur de peau: Miel (2012), Boileau, Laurent
Hergé:Les aventures de Tintin (2004), Boillot, Olivier
Isola, là dove si parla la lingua di Bacco (2011)  (co-director), Boillat, Patricia
L'île (2011), Boillot, Olivier
La beauté fatale et féroce... (1996), Boire, Roger
Last Call Indian (2010), Boileau, Sonia
Le Temple Oublié (2005), Boillot, Olivier
Le pied tendre (1988), Boire, Roger
Legit (2006), Boinski, James W.
Nubes (2010), Boira, Francisco
Questions nationales (2009), Boire, Roger
Reconciling Rwanda (2007), Boiko, Patricia
Soviet Gymnasts (1955), Boikov, Vladimir
The Corporal's Diary (2008) (V)  (head director), Boiko, Patricia
Un gars ben chanceux (1977), Boire, Roger
</snippet></ROW><ROW><id>16896460</id><snippet>$ mount | grep shm
tmpfs on /dev/shm type tmpfs (ro)
</snippet></ROW><ROW><id>16896460</id><snippet>sudo mount -v -o remount,rw /dev/shm
</snippet></ROW><ROW><id>16896623</id><snippet>bubble(self.l)
</snippet></ROW><ROW><id>16896623</id><snippet>bubble</snippet></ROW><ROW><id>16896623</id><snippet>bubble.func(self.l)</snippet></ROW><ROW><id>16896623</id><snippet>func</snippet></ROW><ROW><id>16896769</id><snippet>origin=-1</snippet></ROW><ROW><id>16896769</id><snippet>origin=(-1,-1,-1)</snippet></ROW><ROW><id>16896769</id><snippet>convolveim</snippet></ROW><ROW><id>16896769</id><snippet>In [46]: a = random.random((100,100,100))

In [47]: b = random.random((10,10,10))

In [48]: c1 = convolveim(a, b, mode='constant', origin=-1)

In [49]: c2 = convolvesig(a, b, mode='same')

In [50]: allclose(c1,c2)
Out[50]: True
</snippet></ROW><ROW><id>16896769</id><snippet>b</snippet></ROW><ROW><id>16896769</id><snippet>origin=0</snippet></ROW><ROW><id>16896769</id><snippet>In [88]: b = random.random((11,11,11))

In [89]: c1 = convolveim(a, b, mode='constant')

In [90]: c2 = convolvesig(a, b, mode='same')

In [91]: allclose(c1,c2)
Out[91]: True
</snippet></ROW><ROW><id>16896912</id><snippet>pip</snippet></ROW><ROW><id>16897220</id><snippet>open('1.txt', 'r').read()</snippet></ROW><ROW><id>16897220</id><snippet>&gt;&gt;&gt; print file.read.__doc__
read([size]) -&gt; read at most size bytes, returned as a string.
</snippet></ROW><ROW><id>16897220</id><snippet>1.txt</snippet></ROW><ROW><id>16897220</id><snippet>'alba':'barba', 'raim':'uva'
</snippet></ROW><ROW><id>16897220</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>16897220</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; with open("1.txt") as f:
       dic = literal_eval('{' + f.read() +'}')
       print dic
...     
{'alba': 'barba', 'raim': 'uva'}
</snippet></ROW><ROW><id>16897220</id><snippet>str.replace</snippet></ROW><ROW><id>16897220</id><snippet>regex</snippet></ROW><ROW><id>16897220</id><snippet>str.replace('alba','barba')</snippet></ROW><ROW><id>16897220</id><snippet>'albaa'</snippet></ROW><ROW><id>16897220</id><snippet>'balba'</snippet></ROW><ROW><id>16897220</id><snippet>import re
def replace_all(text, dic):
    for i, j in dic.iteritems():
        text = re.sub(r"'{}'".format(i), "'{}'".format(j), text)
    return text
</snippet></ROW><ROW><id>16897282</id><snippet>for element in COMMONGEMS:
    if item.name == element[0]:
        item.value = random.range(4, 17)
</snippet></ROW><ROW><id>16897282</id><snippet>==</snippet></ROW><ROW><id>16897282</id><snippet>in</snippet></ROW><ROW><id>16897282</id><snippet>in</snippet></ROW><ROW><id>16897282</id><snippet>ruby</snippet></ROW><ROW><id>16897282</id><snippet>star ruby</snippet></ROW><ROW><id>16897322</id><snippet>icoord</snippet></ROW><ROW><id>16897322</id><snippet>dcoord</snippet></ROW><ROW><id>16897322</id><snippet>def plot_tree( P, pos=None ):
    icoord = scipy.array( P['icoord'] )
    dcoord = scipy.array( P['dcoord'] )
    color_list = scipy.array( P['color_list'] )
    xmin, xmax = icoord.min(), icoord.max()
    ymin, ymax = dcoord.min(), dcoord.max()
    if pos:
        icoord = icoord[pos]
        dcoord = dcoord[pos]
        color_list = color_list[pos]
    for xs, ys, color in zip(icoord, dcoord, color_list):
        plt.plot(xs, ys,  color)
    plt.xlim( xmin-10, xmax + 0.1*abs(xmax) )
    plt.ylim( ymin, ymax + 0.1*abs(ymax) )
    plt.show()
</snippet></ROW><ROW><id>16897322</id><snippet>plot_tree(P)</snippet></ROW><ROW><id>16897322</id><snippet>plot_tree(P, range(10))
</snippet></ROW><ROW><id>16897322</id><snippet>fcluster()</snippet></ROW><ROW><id>16897322</id><snippet>linkage()</snippet></ROW><ROW><id>16897322</id><snippet>Z</snippet></ROW><ROW><id>16897322</id><snippet>dmin = 0.2
dmax = 0.3
pos = scipy.all( (Z[:,2] &gt;= dmin, Z[:,2] &lt;= dmax), axis=0 ).nonzero()
plot_tree( P, pos )
</snippet></ROW><ROW><id>16897363</id><snippet>urllib</snippet></ROW><ROW><id>16897363</id><snippet>from minimocktest import MockTestCase
from django.test import TestCase
from django.test.client import Client

class DjangoTestCase(TestCase, MockTestCase):
    '''
    A TestCase class that combines minimocktest and django.test.TestCase
    '''

    def _pre_setup(self):
        MockTestCase.setUp(self)
        TestCase._pre_setup(self)
        # optional: shortcut client handle for quick testing
        self.client = Client()

    def _post_teardown(self):
        TestCase._post_teardown(self)
        MockTestCase.tearDown(self)
</snippet></ROW><ROW><id>16897363</id><snippet>class MySimpleTestCase(DjangoTestCase):
    def setUp(self):
        self.file = StringIO.StringIO('MiniMockTest')
        self.file.close = self.Mock('file_close_function')
    def test_urldump_dumpsContentProperly(self):
        self.mock('urllib2.urlopen', returns=self.file)
        self.assertEquals(urldump('http://pykler.github.com'), 'MiniMockTest')
        self.assertSameTrace('\n'.join([
            "Called urllib2.urlopen('http://pykler.github.com')",
            "Called file_close_function()",
        ]))
        urllib2.urlopen('anything')
        self.mock('urllib2.urlopen', returns=self.file, tracker=None)
        urllib2.urlopen('this is not tracked')
        self.assertTrace("Called urllib2.urlopen('anything')")
        self.assertTrace("Called urllib2.urlopen('this is mocked but not tracked')", includes=False)
        self.assertSameTrace('\n'.join([
            "Called urllib2.urlopen('http://pykler.github.com')",
            "Called file_close_function()",
            "Called urllib2.urlopen('anything')",
        ]))
</snippet></ROW><ROW><id>16897735</id><snippet>self.secondFrame = MySecondFrame()
</snippet></ROW><ROW><id>16897735</id><snippet>self.secondFrame.Close()
</snippet></ROW><ROW><id>16897848</id><snippet>facecolor</snippet></ROW><ROW><id>16897848</id><snippet>figure()</snippet></ROW><ROW><id>16897848</id><snippet>from pylab import *
ion()
figure(facecolor='white') # Or any other color
axes(frameon = 0, aspect = 1, polar = 1)
grid(True)
</snippet></ROW><ROW><id>16897861</id><snippet>#!/usr/bin/python

import gtk

class app(gtk.Window):

  def __init__(self):
    super(app, self).__init__()

    self.set_position(gtk.WIN_POS_CENTER)
    self.set_title("Window Position Test")
    self.set_decorated(True)
    self.set_has_frame(False)
    self.set_resizable(False)
    self.set_default_size(320, 50)
    self.connect("destroy", gtk.main_quit)
    vbox = gtk.VBox(spacing=4)
    hbox = gtk.HBox(spacing=4)

    self.pos_label = gtk.Label()
    vbox.add(self.pos_label)

    self.add(vbox)

    self.update_pos()
    self.show_all()

    self.connect("configure-event", self.update_pos)


  def update_pos(self, *args):
    ''' Get window position, display + log '''
    pos = str( self.get_position() )
    print( pos )
    self.pos_label.set_label( pos )


app()
gtk.main()
</snippet></ROW><ROW><id>16897906</id><snippet>flag = False</snippet></ROW><ROW><id>16897906</id><snippet>else:
    print "Error, only numbers are allowed"
    flag = False  &lt;--- remove this
</snippet></ROW><ROW><id>16897906</id><snippet>while True:
    numInput = raw_input("Enter your first number: ")
    if is_number(numInput):
        numInput = float(numInput)
        break
    else:
        print "Error, only numbers are allowed"
</snippet></ROW><ROW><id>16897906</id><snippet>Enter your first number: foo
Error, only numbers are allowed
Enter your first number: bar
Error, only numbers are allowed
Enter your first number: 123
</snippet></ROW><ROW><id>16898361</id><snippet>Unicode</snippet></ROW><ROW><id>16898361</id><snippet>ç</snippet></ROW><ROW><id>16898361</id><snippet>encode</snippet></ROW><ROW><id>16898361</id><snippet>x.decode('utf-8')
</snippet></ROW><ROW><id>16898547</id><snippet>idle_add</snippet></ROW><ROW><id>16898547</id><snippet>    def on_button_clicked(self, widget):
        cnt = 10000
        task = self.iters(cnt)
        def gui_iter():
            for i, ignore in enumerate(task, 1):
                self.progressbar.set_fraction(i / cnt)
                yield True
            yield False
        gobject.idle_add(gui_iter().next)
</snippet></ROW><ROW><id>16898826</id><snippet>div//text()[not(parent::footer or parent::header)]
</snippet></ROW><ROW><id>16899063</id><snippet>user_create</snippet></ROW><ROW><id>16899063</id><snippet>def user_create(request):
    if request.method == 'POST':
        list_form = forms.ListForm(request.POST)
        if list_form.is_valid():
            list_create = list_form.save()
            messages.success(request, 'List {0} created'.format(list_create.list_id))
            up, _ = UserProfile.objects.get_or_create(user=request.user, list_id=list_create)
            return redirect(reverse('user_dashboard', args=(2,))) # 2 is just an example

    #rest of the code
</snippet></ROW><ROW><id>16899071</id><snippet>d = {}
for x in xs:
    d[x.tag] = x
</snippet></ROW><ROW><id>16899071</id><snippet>d</snippet></ROW><ROW><id>16899071</id><snippet>x</snippet></ROW><ROW><id>16899071</id><snippet>tag</snippet></ROW><ROW><id>16899071</id><snippet>d.values()</snippet></ROW><ROW><id>16899071</id><snippet>d.itervalues()</snippet></ROW><ROW><id>16899071</id><snippet>xs</snippet></ROW><ROW><id>16899174</id><snippet>url(r"^search_engine/ajax_form/$", ajax_form, name='ajax-search')
</snippet></ROW><ROW><id>16899174</id><snippet>&lt;form method="post" action="{% url 'ajax-search' %}" id="search-form"&gt;
</snippet></ROW><ROW><id>16899174</id><snippet>var form = $('#search-form');

$.ajax({
  type: 'POST',
  url: $(form).attr('action'),
  dataType: 'json',
  data : form.serialize(),
  success: function(data) {
    /*stuff*/
  }
});
</snippet></ROW><ROW><id>16899230</id><snippet>s += str(a[i,j,k].imag) + ' '
</snippet></ROW><ROW><id>16899230</id><snippet>s += ' '.join(str(a[i,j,k].imag))
</snippet></ROW><ROW><id>16899230</id><snippet>s = ' '.join(' '.join(str(a[i,j,k].real) for j in range(a.shape[1]) for i in range(a.shape[0])) + ' ' + ' '.join(str(a[i,j,k].imag) for j in range(a.shape[1]) for i in range(a.shape[0])) for k in range(a.shape[2]))
</snippet></ROW><ROW><id>16899230</id><snippet>s = ''
for k in range(a.shape[2]):
    s += ' '.join(str(a[i,j,k].real) for j in range(a.shape[1]) for i in range(a.shape[0]))
    s += ' '
    s += ' '.join(str(a[i,j,k].imag) for j in range(a.shape[1]) for i in range(a.shape[0]))
    s += ' '
</snippet></ROW><ROW><id>16899230</id><snippet>b = [numpy.vstack((a.real.T[i], a.imag.T[i])) for i in range(a.shape[2])]
s = ' '.join(str(d) for x in b for d in x.flat)
</snippet></ROW><ROW><id>16899230</id><snippet>' '.join([str(x) for x in np.hstack((a.T.real, a.T.imag)).flat])
</snippet></ROW><ROW><id>16899305</id><snippet>data = np.array(data)</snippet></ROW><ROW><id>16899305</id><snippet>data.append(row)</snippet></ROW><ROW><id>16899305</id><snippet>data</snippet></ROW><ROW><id>16899305</id><snippet>append()</snippet></ROW><ROW><id>16899305</id><snippet>data = [] # Make data a list 
for row in csv_file_object: #iterate through rows in the csv and append them to the list
    data.append(row)

# Turn the list into an array. Notice this is NOT indented! If it is, the data
# list will be overwritten!
data = np.array(data)
</snippet></ROW><ROW><id>16899406</id><snippet>a</snippet></ROW><ROW><id>16899406</id><snippet>xrange</snippet></ROW><ROW><id>16899406</id><snippet>__next__</snippet></ROW><ROW><id>16899406</id><snippet>xrange</snippet></ROW><ROW><id>16899406</id><snippet>StopIteration</snippet></ROW><ROW><id>16899406</id><snippet>__next__</snippet></ROW><ROW><id>16899406</id><snippet>C</snippet></ROW><ROW><id>16899406</id><snippet>__next__</snippet></ROW><ROW><id>16899406</id><snippet>scipy</snippet></ROW><ROW><id>16899406</id><snippet>numpy</snippet></ROW><ROW><id>16899406</id><snippet>pypy</snippet></ROW><ROW><id>16899645</id><snippet>ssl</snippet></ROW><ROW><id>16899645</id><snippet>pyopenssl</snippet></ROW><ROW><id>16899645</id><snippet>import subprocess
cert_txt = subprocess.check_output(["openssl", "x509", "-text", "-noout", 
                                    "-in", certificate])
</snippet></ROW><ROW><id>16899645</id><snippet>cert_txt</snippet></ROW><ROW><id>16899668</id><snippet>whatever.py</snippet></ROW><ROW><id>16899668</id><snippet>imports</snippet></ROW><ROW><id>16899749</id><snippet>    self.outliner = QWidget()
    self.outliner.setObjectName("outliner")
    self.outLayout = QGridLayout()
    self.outLayout.setContentsMargins(0, 0, 0, 0)
    self.outLayout.setObjectName("outLayout")
    self.outliner.setLayout(self.outLayout)
</snippet></ROW><ROW><id>16899749</id><snippet>    panel = mui.MQtUtil.fullName(long(sip.unwrapinstance(self.outLayout)))
    cmds.setParent(panel)
    if cmds.modelPanel("outL", exists=True):
        cmds.deleteUI("outL")
    outL = cmds.outlinerPanel(mbv=False)
    cmds.control(outL, edit=True, visible=True, p=panel)
    ptr = mui.MQtUtil.findControl(outL)
</snippet></ROW><ROW><id>16899749</id><snippet>    self.outPanel = sip.wrapinstance(long(ptr), QObject)
</snippet></ROW><ROW><id>16899749</id><snippet>    self.outLayout.addWidget(self.outPanel)
</snippet></ROW><ROW><id>16899872</id><snippet>all()</snippet></ROW><ROW><id>16899872</id><snippet>import numpy

a = numpy.array([-1, -2, 1, 2, 3])
print(numpy.all(a &gt; 0))
print(numpy.all(abs(a) &gt; 0))
</snippet></ROW><ROW><id>16899872</id><snippet>C:\Documents and Settings\XXX\Desktop&gt;python test.py
False
True
</snippet></ROW><ROW><id>16899872</id><snippet>import numpy</snippet></ROW><ROW><id>16899872</id><snippet>if numpy.all(abs(x) &lt; a) and numpy.all(abs(y) &lt; a): 
    return #something 1
</snippet></ROW><ROW><id>16899903</id><snippet>firstel</snippet></ROW><ROW><id>16899903</id><snippet>self.firstel = q[0]  # and stays this value once and for all
</snippet></ROW><ROW><id>16899903</id><snippet>secontel</snippet></ROW><ROW><id>16899903</id><snippet>self.secondel = q[1:2]
</snippet></ROW><ROW><id>16899903</id><snippet>firstel</snippet></ROW><ROW><id>16899903</id><snippet>def firstel(self):
    return self.q[0]
</snippet></ROW><ROW><id>16899903</id><snippet>secondel</snippet></ROW><ROW><id>16899920</id><snippet>y = np.array([[17, 19,  5, 16, 22, 20,  9, 31, 39,  8],
              [46, 18, 37, 27, 29,  6,  5, 23, 22,  5],
              [15, 46, 33, 36, 11, 13, 39, 17, 49, 17]])
</snippet></ROW><ROW><id>16899920</id><snippet>y</snippet></ROW><ROW><id>16899920</id><snippet>y1</snippet></ROW><ROW><id>16899920</id><snippet>y2</snippet></ROW><ROW><id>16899920</id><snippet>import numpy as np
from matplotlib import pyplot as plt

fnx = lambda : np.random.randint(5, 50, 10)
y = np.row_stack((fnx(), fnx(), fnx()))
x = np.arange(10)

# Make new array consisting of fractions of column-totals,
# using .astype(float) to avoid integer division
percent = y /  y.sum(axis=0).astype(float) * 100 

fig = plt.figure()
ax = fig.add_subplot(111)

ax.stackplot(x, percent)
ax.set_title('100 % stacked area chart')
ax.set_ylabel('Percent (%)')
ax.margins(0, 0) # Set margins to avoid "whitespace"

plt.show()
</snippet></ROW><ROW><id>16899989</id><snippet>Talker</snippet></ROW><ROW><id>16899989</id><snippet>Calculator</snippet></ROW><ROW><id>16899989</id><snippet>Calculator</snippet></ROW><ROW><id>16899989</id><snippet>Talker</snippet></ROW><ROW><id>16899989</id><snippet>Calculator</snippet></ROW><ROW><id>16899989</id><snippet>TalkingCalculator</snippet></ROW><ROW><id>16899989</id><snippet>Calculator</snippet></ROW><ROW><id>16899989</id><snippet>Talker</snippet></ROW><ROW><id>16899989</id><snippet>&gt;&gt;&gt; class Calculator(object):
...     def calculate(self,evaluate):
...         self.value=eval(expression)
...
&gt;&gt;&gt; class Talker(object):
...     def talk(self):
...         print 'Hi, my value is ', self.value
...
&gt;&gt;&gt; class TalkingCalculator(Calculator, Talker):
...     pass
</snippet></ROW><ROW><id>16900130</id><snippet>alsasink</snippet></ROW><ROW><id>16900130</id><snippet>cardname0</snippet></ROW><ROW><id>16900130</id><snippet>device</snippet></ROW><ROW><id>16900130</id><snippet>cardname0</snippet></ROW><ROW><id>16900130</id><snippet>alsa_card0.set_property("device", "cardname0")
</snippet></ROW><ROW><id>16900178</id><snippet>&gt;&gt;&gt; import sys;print((sys.maxunicode&lt;66000)and'UCS2'or'UCS4')
UCS2
</snippet></ROW><ROW><id>16900178</id><snippet>--enable-unicode=ucs4</snippet></ROW><ROW><id>16900230</id><snippet>not</snippet></ROW><ROW><id>16900230</id><snippet>in</snippet></ROW><ROW><id>16900230</id><snippet>if any(item not in row[4] for item in lisst):
</snippet></ROW><ROW><id>16900230</id><snippet>for item lisst</snippet></ROW><ROW><id>16900230</id><snippet>lisst</snippet></ROW><ROW><id>16900230</id><snippet>row[4]</snippet></ROW><ROW><id>16900230</id><snippet>whitelist = set(lisst)

if whitelist.intersection(row[4].split()):
    # True if any whitespace separated value in `row[4]` is a member of whitelist too
</snippet></ROW><ROW><id>16900464</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16900632</id><snippet>&gt;&gt;&gt; strs = """0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0"""

&gt;&gt;&gt; for x in strs.splitlines():                                                              
    print " ".join("{}:{}".format(i,1) for i,y in enumerate(x.split(), 1) if y=='1')
...     
34:1
27:1 33:1 36:1
20:1 32:1
</snippet></ROW><ROW><id>16900632</id><snippet>&gt;&gt;&gt; with open("abc") as f:
    for line in f:
        strs =  " ".join("{}:{}".format(i,1) for i,y in enumerate(line.split(), 1) if y=='1')
        if strs:
            print strs
...             
34:1
27:1 33:1 36:1
20:1 32:1
</snippet></ROW><ROW><id>16900632</id><snippet>abc</snippet></ROW><ROW><id>16900632</id><snippet>0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0
</snippet></ROW><ROW><id>16900729</id><snippet>matplotlib</snippet></ROW><ROW><id>16900743</id><snippet>class UserNode(StructuredNode):                                                                                                                                                                        
    user_id = IntegerProperty(required=True, index=True)
    follow = RelationshipTo('UserNode', 'FOLLOW')

    def get_followers(self):
        results, metadata = self.cypher("START a=node({self}) MATCH a&lt;-[:FOLLOW]-(b) RETURN b")
        return [self.__class__.inflate(row[0]) for row in results]

    def get_following(self):
        results, metadata = self.cypher("START a=node({self}) MATCH b-[:FOLLOW]-&gt;(a) RETURN b")
        return [self.__class__.inflate(row[0]) for row in results]

    def follow_person(self, user_id):
        followed_user = self.index.get(user_id=user_id)
        self.follow.connect(followed_user, {'time': str(datetime.datetime.utcnow())})

u1 = UserNode(user_id=1).save()
u2 = UserNode(user_id=2).save()

u1.follow_person(2)
u2.follow_person(1)
print "User 1 follows {}".format(u1.get_following())
print "User 1's followers {}".format(u1.get_followers())
</snippet></ROW><ROW><id>16900743</id><snippet>class UserNode(StructuredNode):
    user_id = IntegerProperty(required=True, index=True)
    following = RelationshipTo('UserNode', 'FOLLOW')
    followers = RelationshipFrom('UserNode', 'FOLLOW')

    def follow_person(self, user_id):
        followed_user = self.index.get(user_id=user_id)
        self.follow.connect(followed_user, {'time': str(datetime.datetime.utcnow())})

print "User 1 follows {}".format(u1.following.all())
print "User 1's followers {}".format(u1.followers.all())
</snippet></ROW><ROW><id>16900967</id><snippet>import os
import sys
from PySide import QtGui, QtCore

class Example(QtGui.QWidget):

    def __init__(self):
        super(Example, self).__init__()
        self.initUI()

    def initUI(self):
        self.img_fold = r"C:\Users\abhishek.garg\Desktop\New folder"

        self.widget_layout = QtGui.QVBoxLayout(self)
        self.scrollarea = QtGui.QScrollArea()
        self.scrollarea.setWidgetResizable(True)
        self.widget_layout.addWidget(self.scrollarea)
        self.widget = QtGui.QWidget()
        self.layout = QtGui.QVBoxLayout(self.widget)
        self.scrollarea.setWidget(self.widget)

        self.layout.setAlignment(QtCore.Qt.AlignHCenter)

        for img in os.listdir(self.img_fold):
            img_path = os.path.join(self.img_fold, img)

            pixmap = QtGui.QPixmap(img_path)
            lbl = QtGui.QLabel(self)
            lbl.setPixmap(pixmap)

            self.layout.addWidget(lbl)


        self.setGeometry(300, 300, 280, 170)
        self.setWindowTitle('Image viewer')
        self.show()

def main():

    app = QtGui.QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16901173</id><snippet>sub_menu.add_command(label="Print", command=self.print_, accelerator="Command-P")
</snippet></ROW><ROW><id>16901173</id><snippet>Print ⌘P
</snippet></ROW><ROW><id>16901403</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; d = datetime.datetime.strptime("01-01-1904", "%m-%d-%Y")
&gt;&gt;&gt; d
datetime.datetime(1904, 1, 1, 0, 0)
&gt;&gt;&gt; d + datetime.timedelta(seconds=3453120824)
datetime.datetime(2013, 6, 3, 16, 13, 44) 
&gt;&gt;&gt; (d + datetime.timedelta(seconds=3453120824)).strftime("%a, %d %b %Y %H:%M:%S GMT")
'Mon, 03 Jun 2013 16:13:44 GMT'
</snippet></ROW><ROW><id>16901792</id><snippet>fieldnames = ["one", "three", "ten"]
dictlist = [{"one": "bob", "two": "bill", "three":"cat"},
            {"one": "john", "two": "jack", "ten":"dog"}]

res = [[item.get(key, '') for key in fieldnames] for item in dictlist]
res.insert(0, fieldnames)
print(res)
</snippet></ROW><ROW><id>16901792</id><snippet>[['one', 'three', 'ten'], ['bob', 'cat', ''], ['john', '', 'dog']]
</snippet></ROW><ROW><id>16902011</id><snippet>dict</snippet></ROW><ROW><id>16902011</id><snippet>list</snippet></ROW><ROW><id>16902120</id><snippet>Content-Type</snippet></ROW><ROW><id>16902120</id><snippet>ContentType</snippet></ROW><ROW><id>16902281</id><snippet>for</snippet></ROW><ROW><id>16902281</id><snippet>x</snippet></ROW><ROW><id>16902281</id><snippet>d</snippet></ROW><ROW><id>16902281</id><snippet>def code_scram(x):
    c = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z'}
    scram = ""
    for i in x:
        if i in c:
            scram += c[i]
    return scram

print code_scram([1,2,3,4])
</snippet></ROW><ROW><id>16902281</id><snippet>abcd
</snippet></ROW><ROW><id>16902281</id><snippet>d</snippet></ROW><ROW><id>16902281</id><snippet>d = [1]
print code_scram(d)
</snippet></ROW><ROW><id>16902281</id><snippet>def code_scram(x):
    if isinstance(x, int):
        x = [x]
    c = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z'}
    scram = ""
    for i in x:
        if i in c:
            scram += c[i]
    return scram

d = 1
print code_scram(d)
</snippet></ROW><ROW><id>16902281</id><snippet>a
</snippet></ROW><ROW><id>16902597</id><snippet>exclude()</snippet></ROW><ROW><id>16902597</id><snippet>filter()</snippet></ROW><ROW><id>16902597</id><snippet>git log</snippet></ROW><ROW><id>16902597</id><snippet>django/db/models/query.py</snippet></ROW><ROW><id>16902597</id><snippet>clone</snippet></ROW><ROW><id>16902603</id><snippet>def all_keys(dictlist):
    return set().union(*dictlist)
</snippet></ROW><ROW><id>16902603</id><snippet>set</snippet></ROW><ROW><id>16902636</id><snippet>(c.T+(y.T-m[:,t]*yw.T)*z[:,t]*(np.cos(sl.T)**2)*np.tan(fa.T))/(y.T*z[:,t]*np.sin(sl.T)*np.cos(sl.T))
</snippet></ROW><ROW><id>16902636</id><snippet>c, y, m, yw, sl, fa</snippet></ROW><ROW><id>16902636</id><snippet>sl = radians(40)
fa = radians(35)
c = 4.4
y = 17.6
yw = 9.81
</snippet></ROW><ROW><id>16902636</id><snippet>A = cos(sl)**2 * tan(fa) * (y - m*yw)
B = y*sin(sl)*cos(sl)

for t in xrange(0, nt-1):
    fs[:,t] = (c + A[:,t]*z[:,t]) / (B*z[:,t])
    less = fs[:,t]&lt;=1
    more = np.logical_not(less)
    reset[less,t+1] = 1
    z[less,t+1] = 0
    z[more,t+1] = z[more,t]+(ir/hw[0,more]).T
</snippet></ROW><ROW><id>16902787</id><snippet>from itertools import izip
print heapq.nlargest(3, izip(frq, 20*np.log10(abs(Y))), key=lambda x: x[1])
</snippet></ROW><ROW><id>16902787</id><snippet>print heapq.nlargest(3, izip(20*np.log10(abs(Y)), frq))
</snippet></ROW><ROW><id>16902871</id><snippet>numpy.gradient</snippet></ROW><ROW><id>16902871</id><snippet>dx, dy = np.gradient(zi)
</snippet></ROW><ROW><id>16902871</id><snippet>dy, dx = np.gradient(zi)
</snippet></ROW><ROW><id>16902871</id><snippet>dy, dx = np.gradient(-zi)
</snippet></ROW><ROW><id>16902871</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.mlab import griddata

# Generate some reproducible but random data
np.random.seed(1981)
width, height = 200, 300
x, y, z = np.random.random((3,10))
x *= width
y *= height

#create a list of x, y coordinate tuples
points = zip(x, y)

#create a grid on which to interpolate data
xi, yi = np.linspace(0, width, width), np.linspace(0, height, height)
xi, yi = np.meshgrid(xi, yi)

#interpolate the data with the matlab griddata function
zi = griddata(x, y, z, xi, yi, interp='nn')

#create a matplotlib figure and adjust the width and heights
fig = plt.figure()

#create a single subplot, just takes over the whole figure if only one is specified
ax = fig.add_subplot(111, frameon=False, xticks=[], yticks=[])

#create the contours
CS = plt.contour(xi, yi, zi, linewidths=1, colors='b')

#add a streamplot
dx, dy = np.gradient(zi)
plt.streamplot(xi, yi, dx, dy, color='c', density=1, arrowsize=3)

plt.show()
</snippet></ROW><ROW><id>16902871</id><snippet>dx, dy = np.gradient(zi)
</snippet></ROW><ROW><id>16902871</id><snippet>dy, dx = np.gradient(zi)
</snippet></ROW><ROW><id>16902871</id><snippet>griddata</snippet></ROW><ROW><id>16902871</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import Rbf

# Generate data
np.random.seed(1981)
width, height = 200, 300
x, y, z = np.random.random((3,10))
x *= width
y *= height

#create a grid on which to interpolate data
xi, yi = np.mgrid[0:width:1j*width, 0:height:1j*height]

#interpolate the data with the matlab griddata function
interp = Rbf(x, y, z, function='linear')
zi = interp(xi, yi)

#create a matplotlib figure and adjust the width and heights
fig, ax = plt.subplots(subplot_kw=dict(frameon=False, xticks=[], yticks=[]))

#create the contours and streamplot
CS = plt.contour(xi, yi, zi, linewidths=1, colors='b')
dy, dx = np.gradient(zi.T)
plt.streamplot(xi[:,0], yi[0,:], dx, dy, color='c', density=1, arrowsize=3)

plt.show()
</snippet></ROW><ROW><id>16903122</id><snippet>secure_filename</snippet></ROW><ROW><id>16903122</id><snippet>@app.route('/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        file = request.files['file']
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename) #Sanitised here
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            return redirect(url_for('uploaded_file',
                                    filename=filename))
</snippet></ROW><ROW><id>16903181</id><snippet>decorator.oauth_required</snippet></ROW><ROW><id>16903181</id><snippet>import httplib2
http = credentials.authorize(httplib2.Http())
</snippet></ROW><ROW><id>16903181</id><snippet>access_token</snippet></ROW><ROW><id>16903181</id><snippet>401</snippet></ROW><ROW><id>16903181</id><snippet>credentials</snippet></ROW><ROW><id>16903181</id><snippet>refresh_token</snippet></ROW><ROW><id>16903181</id><snippet>access_token</snippet></ROW><ROW><id>16903181</id><snippet>credentials</snippet></ROW><ROW><id>16903181</id><snippet>from oauth2client.appengine import CredentialsModel
from oauth2client.appengine import StorageByKeyName
credentials = StorageByKeyName(
     CredentialsModel, user_id, 'credentials').get()
</snippet></ROW><ROW><id>16903181</id><snippet>approval_prompt=force</snippet></ROW><ROW><id>16903181</id><snippet>OAuth2Decorator</snippet></ROW><ROW><id>16903181</id><snippet>SACSID</snippet></ROW><ROW><id>16903181</id><snippet>credentials</snippet></ROW><ROW><id>16903228</id><snippet>0x</snippet></ROW><ROW><id>16903228</id><snippet>"\x"</snippet></ROW><ROW><id>16903228</id><snippet>&gt;&gt;&gt; 0x41
65
&gt;&gt;&gt; "\x41"
'A'

&gt;&gt;&gt; "\x01" # a non printable character
'\x01'
</snippet></ROW><ROW><id>16903322</id><snippet>list1 = [0] * 5
</snippet></ROW><ROW><id>16903363</id><snippet>User._meta.get_field_names()</snippet></ROW><ROW><id>16903402</id><snippet>with</snippet></ROW><ROW><id>16903402</id><snippet>with open('file.txt', 'r') as f:
    # do stuff with f

# Do some other stuff - we dropped down a level of indentation, so the file is closed
</snippet></ROW><ROW><id>16903402</id><snippet>__enter__</snippet></ROW><ROW><id>16903402</id><snippet>__enter__</snippet></ROW><ROW><id>16903402</id><snippet>as</snippet></ROW><ROW><id>16903402</id><snippet>self</snippet></ROW><ROW><id>16903402</id><snippet>f</snippet></ROW><ROW><id>16903402</id><snippet>with</snippet></ROW><ROW><id>16903402</id><snippet>__exit__</snippet></ROW><ROW><id>16903402</id><snippet>finally</snippet></ROW><ROW><id>16903402</id><snippet>with</snippet></ROW><ROW><id>16903402</id><snippet>__exit__</snippet></ROW><ROW><id>16903402</id><snippet>ValueError</snippet></ROW><ROW><id>16903402</id><snippet>try...catch</snippet></ROW><ROW><id>16903402</id><snippet>with</snippet></ROW><ROW><id>16903402</id><snippet>try...catch...finally</snippet></ROW><ROW><id>16903402</id><snippet>BufferedReader reader = null;
try {
    reader = new BufferedReader(new File("file.txt"));
    // Read in data and do stuff
} catch (Exception e) {
    // Shouldn't be this generic, but you get the idea
    e.printStackTrace();
} finally {
    // Always executes
    if (reader != null) reader.close();
}
</snippet></ROW><ROW><id>16903590</id><snippet>from subprocess import Popen, PIPE, STDOUT
soxCall = '/usr/local/bin/sox ' + infileName + \
                 ' ' + outfileName + ' rate 8k'
p = Popen(soxCall, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
</snippet></ROW><ROW><id>16903701</id><snippet>regex = re.compile(r'"(?:[^"]|"")*"')
</snippet></ROW><ROW><id>16904372</id><snippet>css_files = soup.findAll('link',{'rel':'stylesheet', 'media': lambda L: L != 'print'})
# [&lt;link href="/assets/application-b275a30a2c6726e3fabb10517f7cb812.css" media="all" rel="stylesheet" type="text/css"/&gt;]
</snippet></ROW><ROW><id>16904572</id><snippet>-&gt; request comes in with /contact
|  /contact is in the routes
&lt;- return call to contact function

-&gt; request comes in with /foo-bar
|  /foo-bar matches the "postPage" route's regexp
&lt;- return call to `postPage` function
</snippet></ROW><ROW><id>16904576</id><snippet>if list2.get("key1", &lt;-1,0 or any sensible default, e.g. None&gt;) == 5:
    print "correct"
</snippet></ROW><ROW><id>16904576</id><snippet>dict.get</snippet></ROW><ROW><id>16904601</id><snippet>while game==True:
    #your game code goes here
    charArray,collideArray = [],[]
</snippet></ROW><ROW><id>16904735</id><snippet>pip install tweepy --upgrade
</snippet></ROW><ROW><id>16904735</id><snippet>pip uninstall tweepy
pip install tweepy
</snippet></ROW><ROW><id>16904796</id><snippet>rotateY</snippet></ROW><ROW><id>16904796</id><snippet>x</snippet></ROW><ROW><id>16904796</id><snippet>x</snippet></ROW><ROW><id>16904796</id><snippet>z</snippet></ROW><ROW><id>16904796</id><snippet>x</snippet></ROW><ROW><id>16904796</id><snippet>z</snippet></ROW><ROW><id>16904796</id><snippet>x</snippet></ROW><ROW><id>16904796</id><snippet>def rotateY(self, amount):
    '''Rotates a vertex on the Y axis around the origin by a given amount (in radians)'''
    temp_x = self.x
    self.x = self.x * math.cos(amount) + self.z * math.sin(amount)
    self.z = temp_x * (-math.sin(amount)) + self.z * math.cos(amount)
</snippet></ROW><ROW><id>16904878</id><snippet>import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.plot([0,1,2],[10,10,100],marker='o',linestyle='-')
ax.set_yscale('symlog')
ax.set_xscale('symlog')
plt.show()
</snippet></ROW><ROW><id>16904878</id><snippet>log(x)</snippet></ROW><ROW><id>16905065</id><snippet>bytes</snippet></ROW><ROW><id>16905065</id><snippet>print(name,"wrote:".format(self.client_address[0]))
</snippet></ROW><ROW><id>16905065</id><snippet>b'Bob' wrote:</snippet></ROW><ROW><id>16905065</id><snippet>Bob wrote:</snippet></ROW><ROW><id>16905065</id><snippet>bytes</snippet></ROW><ROW><id>16905065</id><snippet>decode</snippet></ROW><ROW><id>16905065</id><snippet>encode</snippet></ROW><ROW><id>16905065</id><snippet>str</snippet></ROW><ROW><id>16905065</id><snippet>bytes</snippet></ROW><ROW><id>16905065</id><snippet>format</snippet></ROW><ROW><id>16905065</id><snippet>print(str(name, "utf-8"), "wrote:".format(self.client_address[0]))
</snippet></ROW><ROW><id>16905065</id><snippet>format</snippet></ROW><ROW><id>16905065</id><snippet>print</snippet></ROW><ROW><id>16905065</id><snippet>format</snippet></ROW><ROW><id>16905065</id><snippet>self.client_address[0]</snippet></ROW><ROW><id>16905065</id><snippet>format</snippet></ROW><ROW><id>16905065</id><snippet>{}</snippet></ROW><ROW><id>16905065</id><snippet>client_address[0]</snippet></ROW><ROW><id>16905065</id><snippet>name</snippet></ROW><ROW><id>16905065</id><snippet>data</snippet></ROW><ROW><id>16905065</id><snippet>data = self.request[0].strip()
name = self.request[0].strip()
</snippet></ROW><ROW><id>16905065</id><snippet>print(data)
</snippet></ROW><ROW><id>16905065</id><snippet>name</snippet></ROW><ROW><id>16905065</id><snippet>Bob wrote:
Bob
</snippet></ROW><ROW><id>16905065</id><snippet>Bob wrote:
</snippet></ROW><ROW><id>16905065</id><snippet>data</snippet></ROW><ROW><id>16905065</id><snippet>print(data)</snippet></ROW><ROW><id>16905065</id><snippet>name</snippet></ROW><ROW><id>16905065</id><snippet>data</snippet></ROW><ROW><id>16905065</id><snippet>Bob</snippet></ROW><ROW><id>16905065</id><snippet>hello my name is bob</snippet></ROW><ROW><id>16905065</id><snippet>Bob wrote:
hello my name is bob wrote:
</snippet></ROW><ROW><id>16905065</id><snippet>class MyUDPHandler(socketserver.BaseRequestHandler):
    def __init__(self, *args, **kw):
        self.seen = set()
        super().__init__(*args, **kw)

    def handle(self):
        data = self.request[0].strip()
        addr = self.client_address[0]
        if not addr in self.seen:
            print(str(data, "utf-8"), "wrote:")
            self.seen.add(addr)
        else:
            print(str(data, "utf-8"))
        socket.sendto(data.upper(), self.client_address)
</snippet></ROW><ROW><id>16905065</id><snippet>class MyUDPHandler(socketserver.BaseRequestHandler):
    def __init__(self, *args, **kw):
        self.clients = {}
        super().__init__(*args, **kw)

    def handle(self):
        data = str(self.request[0].strip(), 'utf-8')
        addr = self.client_address[0]
        if not addr in self.clients:                
            print(data, "joined!")
            self.clients[addr] = data
        else:
            print(self.clients[addr], 'wrote:', data)
        socket.sendto(data.upper(), self.client_address)
</snippet></ROW><ROW><id>16905090</id><snippet>def main():
    inFile=open('3weightcalc.in','r')
    i=0
    for line in inFile.readlines():
        items=line.split()

        listEleVP=items[1]
        listEleVS=items[3]
        valP=float(listEleVP)
        valS=float(listEleVS)
        FinVal=float(valP*valS)
        txtA=items [0]
        txtB=items [2]
        print("On ",txtB,txtA,"would weigh ",FinVal,"pounds.")
    inFile.close()
main()
</snippet></ROW><ROW><id>16905090</id><snippet>split</snippet></ROW><ROW><id>16905097</id><snippet>sv = map(sum, v)
</snippet></ROW><ROW><id>16905097</id><snippet>sv</snippet></ROW><ROW><id>16905097</id><snippet>v</snippet></ROW><ROW><id>16905365</id><snippet>fund</snippet></ROW><ROW><id>16905365</id><snippet>from scrapy.http import Request
from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
from fundPrice.items import FundPriceItem


class PruSpider(BaseSpider):
    name = "prufunds"
    allowed_domains = ["prudential.com.hk"]
    start_urls = ["http://www.prudential.com.hk/PruServlet?module=fund&amp;purpose=searchHistFund&amp;fundCd=MMFU_U"]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        funds_U = hxs.select('//table//table//table//table//select[@class="fundDropdown"]//option//@value').extract()
        funds_U = [x for x in funds_U if x != (u"#" and u"MMFU_U")]

        for fund_U in funds_U:
            yield Request(
                url="http://www.prudential.com.hk/PruServlet?module=fund&amp;purpose=searchHistFund&amp;fundCd=" + fund_U,
                callback=self.parse_fund,
                meta={'fund': fund_U})

    def parse_fund(self, response):
        hxs = HtmlXPathSelector(response)
        item = FundPriceItem()
        item['fund'] = response.meta['fund']
        item['data'] = hxs.select(
            '//table//table//table//table//td[@class="fundPriceCell1" or @class="fundPriceCell2"]//text()').extract()
        return item
</snippet></ROW><ROW><id>16905442</id><snippet>from itertools import groupby
from operator import itemgetter
from collections import deque

with open('/home/jon/testdata.txt') as fin:
    lines = (line.split() for line in fin)
    for k, g in groupby(lines, itemgetter(0)):
        fst = next(g)
        lst = next(iter(deque(g, 1)), fst)
        with open(k + '.txt', 'w') as fout:
            fout.write(fst[1] + ' ' + lst[2])
</snippet></ROW><ROW><id>16905600</id><snippet>def noop(*args, **kw): pass
</snippet></ROW><ROW><id>16905600</id><snippet>pass</snippet></ROW><ROW><id>16905600</id><snippet>block</snippet></ROW><ROW><id>16905600</id><snippet>if</snippet></ROW><ROW><id>16905600</id><snippet>try</snippet></ROW><ROW><id>16905600</id><snippet>None</snippet></ROW><ROW><id>16905600</id><snippet>*</snippet></ROW><ROW><id>16905600</id><snippet>**</snippet></ROW><ROW><id>16905600</id><snippet>args</snippet></ROW><ROW><id>16905600</id><snippet>kw</snippet></ROW><ROW><id>16905600</id><snippet>*identifier</snippet></ROW><ROW><id>16905600</id><snippet>**identifier</snippet></ROW><ROW><id>16905600</id><snippet>*</snippet></ROW><ROW><id>16905600</id><snippet>**</snippet></ROW><ROW><id>16905600</id><snippet>&gt;&gt;&gt; def f(*args, **kw): return (args, kw)
... 
&gt;&gt;&gt; f('foo', 'bar', spam='eggs', monty='python')
(('foo', 'bar'), {'monty': 'python', 'spam': 'eggs'})
</snippet></ROW><ROW><id>16905600</id><snippet>def identity(arg): return arg

def plural_identity(*args): return args
</snippet></ROW><ROW><id>16905600</id><snippet>&gt;&gt;&gt; identity('foobar')
'foobar'
&gt;&gt;&gt; plural_identity('spam', 'eggs')
('spam', 'eggs')
</snippet></ROW><ROW><id>16905779</id><snippet>from contextlib import contextmanager
from functools import wraps

_within_special_context = False

@contextmanager
def flag():
    global _within_special_context
    _within_special_context = True
    try:
        yield
    finally:
        _within_special_context = False


#I'd argue this would be best replaced by just checking the variable, but
#included for completeness.
def within_special_wrapper():
    return _within_special_context


def my_special_wrapper(f):
    @wraps(f)
    def internal(*args, **kwargs):
        if not _within_special_context:
            with flag():
                ...
                f(*args, **kwargs)
        else:
            raise Exception("No nested calls!")
    return internal

@my_special_wrapper
def foo():
    print(within_special_wrapper())
    bar()
    print('Success!')

@my_special_wrapper
def bar():
    pass

foo()
</snippet></ROW><ROW><id>16905779</id><snippet>True
Traceback (most recent call last):
  File "/Users/gareth/Development/so/test.py", line 39, in &lt;module&gt;
    foo()
  File "/Users/gareth/Development/so/test.py", line 24, in internal
    f(*args, **kwargs)
  File "/Users/gareth/Development/so/test.py", line 32, in foo
    bar()
  File "/Users/gareth/Development/so/test.py", line 26, in internal
    raise Exception("No nested calls!")
Exception: No nested calls!
</snippet></ROW><ROW><id>16905779</id><snippet>try/finally</snippet></ROW><ROW><id>16905829</id><snippet>import sympy as sy
import numpy as np    
from sympy.abc import x, y

z = ((x+y)**2).expand()
print(z)
# x**2 + 2*x*y + y**2
X = np.arange(6).reshape(2,3)
Y = np.arange(1,7).reshape(2,3)    

f = sy.lambdify((x, y), z, 'numpy')
print(f(X, Y))
# [[  1   9  25]
#  [ 49  81 121]]

assert np.allclose(f(X, Y), (X**2 + 2*X*Y + Y**2))
</snippet></ROW><ROW><id>16905934</id><snippet>sites-packages</snippet></ROW><ROW><id>16905934</id><snippet>&gt;&gt;&gt; import flask
&gt;&gt;&gt; flask.__file__
</snippet></ROW><ROW><id>16905934</id><snippet>flask</snippet></ROW><ROW><id>16905934</id><snippet>Flask-0.9-py2.7.egg-info</snippet></ROW><ROW><id>16905969</id><snippet>buff_list</snippet></ROW><ROW><id>16905969</id><snippet>append</snippet></ROW><ROW><id>16905969</id><snippet>pop</snippet></ROW><ROW><id>16905969</id><snippet>pop</snippet></ROW><ROW><id>16905969</id><snippet>append</snippet></ROW><ROW><id>16905969</id><snippet>Queue</snippet></ROW><ROW><id>16905969</id><snippet>buff_list = Queue.Queue()
</snippet></ROW><ROW><id>16905969</id><snippet>put</snippet></ROW><ROW><id>16905969</id><snippet>append</snippet></ROW><ROW><id>16905969</id><snippet>get</snippet></ROW><ROW><id>16905969</id><snippet>pop</snippet></ROW><ROW><id>16905969</id><snippet>Lock</snippet></ROW><ROW><id>16905969</id><snippet>RLock</snippet></ROW><ROW><id>16905969</id><snippet>buff_list</snippet></ROW><ROW><id>16905969</id><snippet>buff_lock = threading.Lock()
buff_list = []
</snippet></ROW><ROW><id>16905969</id><snippet>with buff_lock:
    buff_list.append("C")

with buff_lock:
    val = buff_list.pop()
</snippet></ROW><ROW><id>16905969</id><snippet>Condition</snippet></ROW><ROW><id>16905969</id><snippet>buff_cond = threading.Condition()
</snippet></ROW><ROW><id>16905969</id><snippet>with buff_cond:
    buff_list.append("C")
    buff_cond.notify()

with buff_cond:
    while not buff_list:
        buff_cond.wait()
    value = buff_list.pop()
</snippet></ROW><ROW><id>16905969</id><snippet>sys.stdin</snippet></ROW><ROW><id>16905969</id><snippet>raw_input</snippet></ROW><ROW><id>16905969</id><snippet>C</snippet></ROW><ROW><id>16905969</id><snippet>Queue</snippet></ROW><ROW><id>16905969</id><snippet>put</snippet></ROW><ROW><id>16905969</id><snippet>get</snippet></ROW><ROW><id>16906061</id><snippet>django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module … Library not loaded: libmysqlclient.18.dylib
Reason: image not found
</snippet></ROW><ROW><id>16906159</id><snippet>#Bad Code:

a = range(6)
print a
for i in range(len(a)):
    try:
        del a[i]
    except IndexError:
        print 'Bad index', i
print a
</snippet></ROW><ROW><id>16906159</id><snippet>[0, 1, 2, 3, 4, 5]
Bad index 3
Bad index 4
Bad index 5
[1, 3, 5]
</snippet></ROW><ROW><id>16906159</id><snippet>a = range(6)
print a
for i in range(len(a))[::-1]: #the only difference is this reversal
    try:
        del a[i]
    except IndexError:
        print 'Bad index', i
print a
</snippet></ROW><ROW><id>16906159</id><snippet>[0, 1, 2, 3, 4, 5]
[]
</snippet></ROW><ROW><id>16906367</id><snippet>my_list = [l[0] for l in list]
</snippet></ROW><ROW><id>16906404</id><snippet>string         = doubleString / singleString
doubleString   = ~'"([^"]|(\"))*"'
singleString   = ~"'([^']|(\'))*'"
</snippet></ROW><ROW><id>16906407</id><snippet>__init__.py</snippet></ROW><ROW><id>16906407</id><snippet>__init__.py</snippet></ROW><ROW><id>16906407</id><snippet>app = Flask(__name__)
db = SQLAlchemy(app)
import myproject.views
import myproject.models
</snippet></ROW><ROW><id>16906407</id><snippet>models.py</snippet></ROW><ROW><id>16906407</id><snippet>from myproject import app
from myproject import db

class User(db.Model):
</snippet></ROW><ROW><id>16906407</id><snippet>runserver.py</snippet></ROW><ROW><id>16906407</id><snippet>from myproject import app
app.run(debug=True)
</snippet></ROW><ROW><id>16906524</id><snippet>ax.xaxis_date()</snippet></ROW><ROW><id>16906524</id><snippet>fig.autofmt_xdate()</snippet></ROW><ROW><id>16906524</id><snippet>import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt

# Generate some data
x = mdates.drange(dt.datetime(2012, 01, 01), dt.datetime(2013, 01, 01),
                  dt.timedelta(weeks=2))
y = np.linspace(1, 10, 20)
data = np.random.random((y.size, x.size))

# Plot
fig = plt.figure()
ax = fig.add_subplot(111)
qmesh = ax.pcolormesh(x, y, data)
fig.colorbar(qmesh,ax=ax)
ax.axis('tight')

# Set up as dates
ax.xaxis_date()
fig.autofmt_xdate()

plt.show()
</snippet></ROW><ROW><id>16906549</id><snippet>i</snippet></ROW><ROW><id>16906549</id><snippet>lambda</snippet></ROW><ROW><id>16906549</id><snippet>i</snippet></ROW><ROW><id>16906549</id><snippet>i</snippet></ROW><ROW><id>16906549</id><snippet>i</snippet></ROW><ROW><id>16906549</id><snippet>i</snippet></ROW><ROW><id>16906549</id><snippet>0</snippet></ROW><ROW><id>16906549</id><snippet>1</snippet></ROW><ROW><id>16906549</id><snippet>2</snippet></ROW><ROW><id>16906549</id><snippet>0</snippet></ROW><ROW><id>16906549</id><snippet>i</snippet></ROW><ROW><id>16906549</id><snippet>i</snippet></ROW><ROW><id>16906549</id><snippet>1</snippet></ROW><ROW><id>16906549</id><snippet>2</snippet></ROW><ROW><id>16906549</id><snippet>i</snippet></ROW><ROW><id>16906549</id><snippet>2</snippet></ROW><ROW><id>16906549</id><snippet>0</snippet></ROW><ROW><id>16906549</id><snippet>i</snippet></ROW><ROW><id>16906549</id><snippet>i</snippet></ROW><ROW><id>16906549</id><snippet>0</snippet></ROW><ROW><id>16906549</id><snippet>1</snippet></ROW><ROW><id>16906549</id><snippet>2</snippet></ROW><ROW><id>16906549</id><snippet>i</snippet></ROW><ROW><id>16906549</id><snippet>i</snippet></ROW><ROW><id>16906704</id><snippet>&gt;&gt;&gt; s = "{u'x': u'somevalue', u'y': u'someothervalue'}"
&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; literal_eval(s)
{u'y': u'someothervalue', u'x': u'somevalue'}
</snippet></ROW><ROW><id>16906814</id><snippet>&gt;&gt;&gt; RED = ('x234114','z8765667')
&gt;&gt;&gt; locals()["RED"]
('x234114', 'z8765667')
</snippet></ROW><ROW><id>16906814</id><snippet>&gt;&gt;&gt; select_data = {"RED" :('x234114','z8765667'),"BLUE":('x934587','z943657')}
&gt;&gt;&gt; select_data["RED"]

('x234114','z8765667')
</snippet></ROW><ROW><id>16907187</id><snippet>params</snippet></ROW><ROW><id>16907187</id><snippet>data</snippet></ROW><ROW><id>16907187</id><snippet>p = requests.post(token_url, params = data)
</snippet></ROW><ROW><id>16907187</id><snippet>params</snippet></ROW><ROW><id>16907187</id><snippet>requests</snippet></ROW><ROW><id>16907187</id><snippet>data</snippet></ROW><ROW><id>16907187</id><snippet>requests</snippet></ROW><ROW><id>16907187</id><snippet>-F</snippet></ROW><ROW><id>16907187</id><snippet>print(p.url)</snippet></ROW><ROW><id>16907187</id><snippet>http://api.instagram.com/oauth/access_token?client_id=xxxxxx&amp;client_secret=xxxxx&amp;…</snippet></ROW><ROW><id>16907187</id><snippet>curl</snippet></ROW><ROW><id>16907187</id><snippet>requests</snippet></ROW><ROW><id>16907187</id><snippet>nc -kl 8123</snippet></ROW><ROW><id>16907187</id><snippet>curl</snippet></ROW><ROW><id>16907187</id><snippet>http://localhost:8123/oauth/access_token</snippet></ROW><ROW><id>16907187</id><snippet>requests</snippet></ROW><ROW><id>16907187</id><snippet>http://localhost:8123/oauth/access_token</snippet></ROW><ROW><id>16907362</id><snippet>importlib</snippet></ROW><ROW><id>16907362</id><snippet>import glob
import importlib
module = glob.glob(prefix_?.py)
module.sort()
for m in module:      #iterate over list itself, why range?
    mod = importlib.import_module(m[:-3]) #strip off .py        
</snippet></ROW><ROW><id>16907631</id><snippet>run</snippet></ROW><ROW><id>16907631</id><snippet>from fabric.api import env, run
from fabric.tasks import execute


def serv_foo():
    return ['bla@example.com']


def serv_bar():
    return ['bla@example2.com']


def get_all_servers():
    return {(k, v) for k, v in globals().items() if k.startswith("serv_")}


def get_hostname():
    return run("hostname")


def get_hostnames():
    for serv_name, serv_fptr in get_all_servers():
        print(env.hosts)
        hostname = execute(get_hostname, hosts=serv_fptr())
        print(hostname)
</snippet></ROW><ROW><id>16907631</id><snippet>from fabric.api import run
from fabric.context_managers import settings


def serv_foo():
    return 'bla@example.com'


def serv_bar():
    return 'bla@example2.com'


def get_all_servers():
    return {(k, v) for k, v in globals().items() if k.startswith("serv_")}


def get_hostnames():
    for serv_name, serv_fptr in get_all_servers():
        with settings(host_string=serv_fptr()):
            hostname = run("hostname")
            print(hostname)
</snippet></ROW><ROW><id>16907775</id><snippet>installed</snippet></ROW><ROW><id>16907775</id><snippet>friends = facebook.users.getInfo(friends[0:], ['name', 'birthday','installed'])
for friend in friends:
    if 'birthday' in friend:
        if 'installed' in friend:
            print friend
</snippet></ROW><ROW><id>16907813</id><snippet>mylist = [item for item in mylist if item % 2 == 0]
</snippet></ROW><ROW><id>16907813</id><snippet>mylist[:] = ...</snippet></ROW><ROW><id>16907901</id><snippet>foo.__dict__</snippet></ROW><ROW><id>16907901</id><snippet>expire_on_commit=False</snippet></ROW><ROW><id>16907901</id><snippet>Session</snippet></ROW><ROW><id>16907901</id><snippet>session.refresh(foo)</snippet></ROW><ROW><id>16907901</id><snippet>bar</snippet></ROW><ROW><id>16907901</id><snippet>foo.bar</snippet></ROW><ROW><id>16907901</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Foo(Base):
    __tablename__ = 'foo'
    id = Column(Integer, primary_key=True)
    status = Column(String)
    barId = Column(Integer, ForeignKey("bar.id"))
    bar = relationship("Bar", lazy="joined")

class Bar(Base):
    __tablename__ = 'bar'
    id = Column(Integer, primary_key=True)

e = create_engine("sqlite://", echo=True)
Base.metadata.create_all(e)

s = Session(e)

s.add(Foo(id=1, bar=Bar()))
s.commit()

f1 = s.query(Foo).get(1)
f1.status = 'done'
s.commit()

assert 'bar' not in f1.__dict__
s.refresh(f1)
assert 'bar' in f1.__dict__
s.close()

assert f1.bar.id == 1
</snippet></ROW><ROW><id>16907907</id><snippet># drewk's answer, optimized by using from_iterable instead of *
def double_chain(s):
    return ''.join(chain.from_iterable(zip(s, s)))

# Ashwini Chaudhary's answer
def double_mult(s):
    return ''.join([x*2 for x in s])

# Jon Clements' answer, but optimized to take the re.compile and *2 out of the loop.
r = re.compile('(.)')
def double_re(s):
    return r.sub(r'\1\1', s)
</snippet></ROW><ROW><id>16907907</id><snippet>In [499]: %timeit double_chain('abcd')
1000000 loops, best of 3: 1.99 us per loop
In [500]: %timeit double_mult('abcd')
1000000 loops, best of 3: 1.25 us per loop
In [501]: %timeit double_re('abcd')
10000 loops, best of 3: 22.2 us per loop
</snippet></ROW><ROW><id>16907907</id><snippet>itertools</snippet></ROW><ROW><id>16907907</id><snippet>In [504]: %timeit double_chain('abcd' * 10000)
100 loops, best of 3: 4.92 ms per loop
In [505]: %timeit double_mult('abcd' * 10000)
100 loops, best of 3: 5.57 ms per loop
In [506]: %timeit double_re('abcd' * 10000)
10 loops, best of 3: 91.5 ms per loop
</snippet></ROW><ROW><id>16907907</id><snippet>itertools</snippet></ROW><ROW><id>16908200</id><snippet>mynewlist = [s for s in mylist if s.isdigit()]
</snippet></ROW><ROW><id>16908200</id><snippet>str.isdigit()</snippet></ROW><ROW><id>16908200</id><snippet>isdigit()</snippet></ROW><ROW><id>16908200</id><snippet>True</snippet></ROW><ROW><id>16908200</id><snippet>int()</snippet></ROW><ROW><id>16908200</id><snippet>False</snippet></ROW><ROW><id>16908265</id><snippet>python -c 'print "Hi"'
Hi
</snippet></ROW><ROW><id>16908373</id><snippet>while done == False:
for event in pygame.event.get():
    if event.type == pygame.QUIT:
        done = True
keys = pygame.key.get_pressed()
if (keys[K_KP6]):
    square.spd_x=5
else:
    square.spd_x=0
if (keys[K_KP4]):
    square.spd_x-=5
if (keys[K_KP8]):
    square.spd_y=-5
else:
    square.spd_y=0
if (keys[K_KP2]):
    square.spd_y +=5
</snippet></ROW><ROW><id>16908680</id><snippet>with</snippet></ROW><ROW><id>16908680</id><snippet>file.read</snippet></ROW><ROW><id>16908680</id><snippet>import sys
with open(sys.argv[1]) as f, open('out.txt', 'w') as out:
    for line in f:
       if line.strip():                     #checks if line is not empty
           out.write(line.split()[0]+'\n')
</snippet></ROW><ROW><id>16908743</id><snippet>goal/pypy-c</snippet></ROW><ROW><id>16908743</id><snippet>bin/pypy</snippet></ROW><ROW><id>16908743</id><snippet>bin/pypy</snippet></ROW><ROW><id>16908743</id><snippet>goal/pypy-c</snippet></ROW><ROW><id>16908775</id><snippet>Host</snippet></ROW><ROW><id>16908775</id><snippet>@route('/file')
def getAFileLink():
    host = bottle.request.get_header('host')
    return {'url': 'http://{}/some/file.abc'.format(host)}
</snippet></ROW><ROW><id>16908844</id><snippet>import playfaircrack
</snippet></ROW><ROW><id>16908844</id><snippet>playfair.py</snippet></ROW><ROW><id>16908844</id><snippet>playfaircrack.so</snippet></ROW><ROW><id>16908844</id><snippet>playfaircrack.py</snippet></ROW><ROW><id>16908844</id><snippet>playfaircrack.so</snippet></ROW><ROW><id>16908844</id><snippet>playfaircrack.so</snippet></ROW><ROW><id>16908844</id><snippet>playfaircrack.py</snippet></ROW><ROW><id>16908941</id><snippet>except ImportError, ex:</snippet></ROW><ROW><id>16908941</id><snippet>except Exception as ex:</snippet></ROW><ROW><id>16908941</id><snippet>gevent</snippet></ROW><ROW><id>16909091</id><snippet>import random
random.seed()

def run_periodically(start, end, interval, func):
    event_time = start
    while event_time &lt; end:
        s.enterabs(event_time, 0, func, ())
        event_time += interval + random.random(-60, 60)
    s.run()
</snippet></ROW><ROW><id>16909332</id><snippet>print("%d.%d.%d"%(mj.value,mn.value,pt.value))
</snippet></ROW><ROW><id>16909453</id><snippet>n</snippet></ROW><ROW><id>16909453</id><snippet>sqrt(n)</snippet></ROW><ROW><id>16909453</id><snippet>n</snippet></ROW><ROW><id>16909453</id><snippet>sqrt(n)</snippet></ROW><ROW><id>16909453</id><snippet>hIndex</snippet></ROW><ROW><id>16909453</id><snippet>n</snippet></ROW><ROW><id>16909453</id><snippet>divisors[hIndex]</snippet></ROW><ROW><id>16909453</id><snippet>wIndex = hIndex + 1</snippet></ROW><ROW><id>16909453</id><snippet>divisors[wIndex]</snippet></ROW><ROW><id>16909453</id><snippet>import numbers
from math import sqrt

def get_dimensions(n):
    tempSqrt = sqrt(n)
    divisors = []
    currentDiv = 1
    for currentDiv in range(n):
        if n % float(currentDiv + 1) == 0:
         divisors.append(currentDiv+1)
    #print divisors this is to ensure that we're choosing well
    hIndex = min(range(len(divisors)), key=lambda i: abs(divisors[i]-sqrt(n)))
    wIndex = hIndex + 1

   return divisors[hIndex], divisors[wIndex]
</snippet></ROW><ROW><id>16909488</id><snippet>irb(main):001:0&gt; class C
irb(main):002:1&gt; end
=&gt; nil
irb(main):003:0&gt; a = C.new
=&gt; #&lt;C:0xb73aac70&gt;
irb(main):004:0&gt; b = C.new
=&gt; #&lt;C:0xb73a5838&gt;
irb(main):005:0&gt; a.instance_variable_set(:@a, 1)
=&gt; 1
irb(main):006:0&gt; a.instance_variable_set(:@b, 2)
=&gt; 2
irb(main):007:0&gt; b.instance_variable_set(:@test1, 11)
=&gt; 11
irb(main):008:0&gt; a
=&gt; #&lt;C:0xb73aac70 @b=2, @a=1&gt;
irb(main):009:0&gt; b
=&gt; #&lt;C:0xb73a5838 @test1=11&gt;
</snippet></ROW><ROW><id>16909558</id><snippet>apex.no_csrf</snippet></ROW><ROW><id>16909558</id><snippet>config.add_jsonrpc_endpoint('foo', '/foo/jsonrpc')</snippet></ROW><ROW><id>16909558</id><snippet>apex.no_csrf = apex:callback,foo</snippet></ROW><ROW><id>16909570</id><snippet>Num::set</snippet></ROW><ROW><id>16909570</id><snippet>Num</snippet></ROW><ROW><id>16909570</id><snippet>struct Num
{
    Num():internal_value(){}
    float get() const
    {
        return internal_value;
    }
    void set(float value)
    {
        internal_value=value;
    }
private:
    float internal_value;
};
</snippet></ROW><ROW><id>16909663</id><snippet>for x in self.candidates:
  if x is not None:
    db.delete(x.path())    
</snippet></ROW><ROW><id>16909663</id><snippet>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; import collections
&gt;&gt;&gt; g = (print(x) for x in 'potato')
&gt;&gt;&gt; _ = collections.deque(g, maxlen=0)
p
o
t
a
t
o
</snippet></ROW><ROW><id>16909738</id><snippet>datetime</snippet></ROW><ROW><id>16909738</id><snippet>datetime.time()</snippet></ROW><ROW><id>16909738</id><snippet>import datetime
timestamp = datetime.datetime(2013, 6, 4, 6, 18, 1).time()
</snippet></ROW><ROW><id>16909738</id><snippet>timestamp</snippet></ROW><ROW><id>16909738</id><snippet>run_periodically</snippet></ROW><ROW><id>16909738</id><snippet>datetime.fromtimestamp(time.time())</snippet></ROW><ROW><id>16909744</id><snippet>if self.star_r.y &gt; 640:
    self.star_r.y = 0
    ran_x = new random number
</snippet></ROW><ROW><id>16909920</id><snippet>import math

a=float(input('a=?'))
b=float(input('b=?'))
c=float(input('c=?'))
d=float(input('d=?'))

critical_point_n=((-2*b)-math.sqrt(abs((4*(math.pow(b, 2)))-(12*a*c))))/(6*a)

first_root=critical_point_n-1

if first_root==0 and c==0:
    first_root+=(-0.01)

for x in range(10):
    f = a*first_root**3 + b*first_root**2 + c*first_root + d
    fp = 3*a*first_root**2 + 2*b*first_root + c
    first_root = first_root - (f/fp)
    #first_root=first_root-(((a*(math.pow(first_root, 3)))+(b*(math.pow(first_root, 2))+(c*first_root)+d)))/((3*(a*(math.pow(first_root, 2))))+(2*(b*first_root))+c)
    print(first_root)
</snippet></ROW><ROW><id>16910147</id><snippet>focus_set</snippet></ROW><ROW><id>16910147</id><snippet>import Tkinter as tk
...
entry1 = tk.Entry(...)
entry1.focus_set()
</snippet></ROW><ROW><id>16910179</id><snippet>PYTHON_EGG_CACHE</snippet></ROW><ROW><id>16910434</id><snippet>NULL</snippet></ROW><ROW><id>16910434</id><snippet>NULL</snippet></ROW><ROW><id>16910434</id><snippet>NULL || 'test_add'
</snippet></ROW><ROW><id>16910434</id><snippet>cup</snippet></ROW><ROW><id>16910434</id><snippet>cup IS NULL</snippet></ROW><ROW><id>16910434</id><snippet>cup || 'test_add'</snippet></ROW><ROW><id>16910434</id><snippet>NULL || any_string_you_want</snippet></ROW><ROW><id>16910434</id><snippet>NULL</snippet></ROW><ROW><id>16910434</id><snippet>NULL</snippet></ROW><ROW><id>16910434</id><snippet>COALESCE</snippet></ROW><ROW><id>16910434</id><snippet>update coffee set cup = coalesce(cup, '') || 'test_add'
</snippet></ROW><ROW><id>16910434</id><snippet>None</snippet></ROW><ROW><id>16910434</id><snippet>NULL</snippet></ROW><ROW><id>16910434</id><snippet>NULL</snippet></ROW><ROW><id>16910808</id><snippet>&gt;&gt;&gt; input = "12345678abcdeafa"
&gt;&gt;&gt; input[7::-1]+input[:7:-1]
'87654321afaedcba'
</snippet></ROW><ROW><id>16910929</id><snippet>&gt;&gt;&gt; re.search('\d\d?', "test 1981").group()
'19'
</snippet></ROW><ROW><id>16911242</id><snippet>import imaplib
import socket

class IMAP4(imaplib.IMAP4):
""" Change imaplib to get a timeout """

    def __init__(self, host, port, timeout):
        # Override first. Open() gets called in Constructor
        self.timeout = timeout
        imaplib.IMAP4.__init__(self, host, port)


    def open(self, host = '', port = imaplib.IMAP4_PORT):
        """Setup connection to remote server on "host:port"
            (default: localhost:standard IMAP4 port).
        This connection will be used by the routines:
            read, readline, send, shutdown.
        """
        self.host = host
        self.port = port
        # New Socket with timeout. 
        self.sock = socket.create_connection((host, port), self.timeout)
        self.file = self.sock.makefile('rb')


def new_stuff():
    host = "some-page.com"
    port = 143
    timeout = 10
    try:
        imapcon = IMAP4(host, port, timeout)
        header = imapcon.welcome
    except Exception as e:  # Timeout or something else
        header = "Something went wrong here: " + str(e)
    return header


print new_stuff()
</snippet></ROW><ROW><id>16911282</id><snippet>with open('niktoscan.txt') as f:
    content = f.readlines()

foundone = False
print type(content)

cleanedContent = []
for line in content:
    print line

    foundnik = line.find('&lt;niktoscan')
    if not (foundnik != -1 and foundone):
        cleanedContent.append(line)

    if foundnik != -1:
        foundone = True
print "\n\n ########### cleaned content ########### \n\n"

for line in cleanedContent:
    print line
</snippet></ROW><ROW><id>16911801</id><snippet>models</snippet></ROW><ROW><id>16911801</id><snippet>from my_module.my_file import my_function</snippet></ROW><ROW><id>16911801</id><snippet>my_function</snippet></ROW><ROW><id>16911801</id><snippet>models</snippet></ROW><ROW><id>16911801</id><snippet>my_files</snippet></ROW><ROW><id>16911801</id><snippet>models.my_function</snippet></ROW><ROW><id>16911801</id><snippet>with patch('models.my_function') as add_method:
    m = MyModel(name=name)
    m.save()
</snippet></ROW><ROW><id>16911801</id><snippet>my_file.my_function</snippet></ROW><ROW><id>16911801</id><snippet>models</snippet></ROW><ROW><id>16912080</id><snippet>output.write(''.join(m.groups()) + '\n')
</snippet></ROW><ROW><id>16912080</id><snippet>m = re.search(r'((?:\S+\s+){0,8})facility((?:\s+\S+){0,8})', line)
</snippet></ROW><ROW><id>16912080</id><snippet>(?:...)</snippet></ROW><ROW><id>16912080</id><snippet>{0,8}</snippet></ROW><ROW><id>16912080</id><snippet>re.findall()</snippet></ROW><ROW><id>16912080</id><snippet>re.finditer()</snippet></ROW><ROW><id>16912080</id><snippet>context = re.findall(r'((?:\S+\s+){0,8})facility((?:\s+\S+){0,8})', line)
</snippet></ROW><ROW><id>16912080</id><snippet>context</snippet></ROW><ROW><id>16912080</id><snippet>re.findall()</snippet></ROW><ROW><id>16912334</id><snippet>from collections import defaultdict

tr = {'critic' : '2_critic', 
      'major' : '3_major',
      'all' : ['2_critic','3_major']}

scnd_dict = {'severity': ['all']}

third_dict = {}

for k, v in scnd_dict.iteritems():
    vals = []
    if isinstance(v, list):
        for i in v:
            vals.append(tr.get(i))
    else:
        vals.append(tr.get(v))
    if not vals:
        continue
    third_dict[k] = vals

print third_dict
</snippet></ROW><ROW><id>16912334</id><snippet>&gt;&gt;&gt; 
{'severity': [['2_critic', '3_major']]}
</snippet></ROW><ROW><id>16912334</id><snippet>scnd_dict</snippet></ROW><ROW><id>16912334</id><snippet>scnd_dict</snippet></ROW><ROW><id>16912334</id><snippet>scnd_dict = {'severity': 'all'}</snippet></ROW><ROW><id>16912334</id><snippet>d = dict((k, tr.get(v)) for k, v in scnd_dict.items())
# {'severity': ['2_critic', '3_major']}
</snippet></ROW><ROW><id>16912340</id><snippet>batches</snippet></ROW><ROW><id>16912340</id><snippet>cnumbers =    ( Subscribers
                .objects
                .filter(foo='bar')
                .values_list('customer__number', flat=True)
                .distinct()
               )
</snippet></ROW><ROW><id>16912340</id><snippet>batches = [
           [cnumbers[x:x+batch_size] 
           for x in xrange(0, len(cnumbers), batch_size)]
          ]
</snippet></ROW><ROW><id>16912356</id><snippet>from xlsxwriter.workbook import Workbook

workbook = Workbook('chart_point.xlsx')

worksheet = workbook.add_worksheet()
chart = workbook.add_chart({'type': 'line'})

data = [
    [1, 2, 3, 4, 5],
    [2, 4, 6, 8, 10],
    [3, 6, 9, 12, 15],

]

# Write the data for the chart.
worksheet.write_column('A1', data[0])
worksheet.write_column('B1', data[1])
worksheet.write_column('C1', data[2])

# Add a chart series with markers but turn some off.
chart.add_series({
    'categories': '=Sheet1!$A$1:$A$5',
    'values': '=Sheet1!$B$1:$B$5',
    'marker': {'type': 'automatic'},
    'points': [
            {'fill': {'none': True}, 'line': {'none': True}},
            {'fill': {'none': True}, 'line': {'none': True}},
            {'fill': {'none': True}, 'line': {'none': True}},
            {'fill': {'none': True}, 'line': {'none': True}},
    ],
})

# Add a second chart series.
chart.add_series({
    'categories': '=Sheet1!$A$1:$A$5',
    'values': '=Sheet1!$C$1:$C$5',
    'marker': {'type': 'automatic'},
    'points': [
            {'fill': {'none': True}, 'line': {'none': True}},
            {},
            {'fill': {'none': True}, 'line': {'none': True}},
            {'fill': {'none': True}, 'line': {'none': True}},
            {'fill': {'none': True}, 'line': {'none': True}},
    ],
})

worksheet.insert_chart('E9', chart)

workbook.close()
</snippet></ROW><ROW><id>16912368</id><snippet>words = ['happy', 'sad', 'is', ':(', 'i', 'the', 'day', 'am', 'today', ':)']
d = {w: i for i, w in enumerate(words, start=1)}
tweets =['i am happy today :)','is today the sad day :(']
for tweet in tweets:
    print ' '.join(['{0}:1'.format(d[w]) for w in tweet.split() if w in d])


5:1 8:1 1:1 9:1 10:1
3:1 9:1 6:1 2:1 7:1 4:1
</snippet></ROW><ROW><id>16912368</id><snippet>file</snippet></ROW><ROW><id>16912368</id><snippet>.rstrip('\n')</snippet></ROW><ROW><id>16912368</id><snippet>with open('words.txt', 'rU') as f:
    d = {w.rstrip('\n'): i for i, w in enumerate(f, start=1)}
</snippet></ROW><ROW><id>16912562</id><snippet>"//a:pPr[@lvl=2 and not(@marL)]"
</snippet></ROW><ROW><id>16913180</id><snippet>.bash_profile</snippet></ROW><ROW><id>16913180</id><snippet>PYTHON_PATH=$PYTHON_PATH:new_dir
EXPORT $PYTHON_PATH
</snippet></ROW><ROW><id>16913180</id><snippet>if [ -d "new_dir" ] ; then
  PYTHON_PATH="$PYTHON_PATH:new_dir"
fi
EXPORT $PYTHON_PATH
</snippet></ROW><ROW><id>16913180</id><snippet>.bash_profile</snippet></ROW><ROW><id>16913180</id><snippet>source</snippet></ROW><ROW><id>16913713</id><snippet>testlist = ["a","b",["aa","bb",["aaa","bbb"]]]

def printList(the_list, level):

    for each_item in the_list:
        if isinstance(each_item, list):
            printList(each_item, level + 1)
        else:
            for numbers in range(level):
                print("\t",end="")
            print(each_item)


printList(testlist,0)
</snippet></ROW><ROW><id>16913764</id><snippet>match</snippet></ROW><ROW><id>16913764</id><snippet>MatchObject</snippet></ROW><ROW><id>16913764</id><snippet>search()</snippet></ROW><ROW><id>16914434</id><snippet>&gt;&gt;&gt; from string import ascii_uppercase as alphabet
&gt;&gt;&gt; "".join([str(i) for i, c in enumerate("aAaEaaUA") if c in alphabet])
'1367'
</snippet></ROW><ROW><id>16914434</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; "".join([str(m.start()) for m in re.finditer(r'[A-Z]', "aAaEaaUA")])
'1367'
</snippet></ROW><ROW><id>16914551</id><snippet>mock_user</snippet></ROW><ROW><id>16914551</id><snippet>mock_pymongo</snippet></ROW><ROW><id>16914551</id><snippet>@patch('arounded.userv2.views.User')
@patch('arounded.userv2.views.pymongo')
def test_valid_prelogin(self, mock_pymongo, mock_user):
</snippet></ROW><ROW><id>16914691</id><snippet>from fractions import Fraction
&gt;&gt;&gt; print float( Fraction(2**54343) / Fraction( 2**54347 + 1 ) )
0.0625
&gt;&gt;&gt; print Fraction(2**54343) / Fraction( 2**54347 + 1 )
# ... very long exact answer expressed as a fraction ...
</snippet></ROW><ROW><id>16914727</id><snippet>insert_db()</snippet></ROW><ROW><id>16914727</id><snippet>def insert_db(sql, data):
    ...
    cursor.execute(sql, data)
</snippet></ROW><ROW><id>16914727</id><snippet>sql = "insert into pvcs (date,name,size) values (%s,%s,%s)"
data = (modtime, filename, fsize)
insert_db(sql, data)
</snippet></ROW><ROW><id>16914734</id><snippet>from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

class Unsubscription(models.Model):
    name = ...

    # These two fields allow you to manage the model &amp; instance of object that 
    # this unsubscribe model instance is related to
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    # This gives you an easy way to get access to the actual instance of the 
    # instance above
    content_object = generic.GenericForeignKey('content_type', 'object_id')


# On the reverse end of the relationship you can add a Generic relation to 
# easily get access to all unsubscriptions related to this contact via the GFK
from myapp.models import Unsubscription
class Contact(models.Model):
    name = ...

    unsubscribtions = generic.GenericRelation(Unsubscribtion)
</snippet></ROW><ROW><id>16914966</id><snippet>importlib</snippet></ROW><ROW><id>16914966</id><snippet>&gt;&gt;&gt; import importlib
&gt;&gt;&gt; mod = importlib.import_module('sys')
&gt;&gt;&gt; mod
&lt;module 'sys' (built-in)&gt;
</snippet></ROW><ROW><id>16915035</id><snippet>&gt;&gt;&gt; G = nx.DiGraph(((source, target, attr) for source, target, attr in my_network.edges_iter(data=True) if attr['weight'] &gt; threshold))
</snippet></ROW><ROW><id>16915133</id><snippet>N</snippet></ROW><ROW><id>16915133</id><snippet>N-1</snippet></ROW><ROW><id>16915133</id><snippet>octave:1&gt; N=1024;
octave:2&gt; X=1;
octave:3&gt; dx=2*X/(N-1);
octave:4&gt; dx
dx =  0.0019550
</snippet></ROW><ROW><id>16915133</id><snippet>&gt;&gt;&gt; N = 1024
&gt;&gt;&gt; X = 1
&gt;&gt;&gt; dx = 2. * X / N
&gt;&gt;&gt; dx
0.001953125
</snippet></ROW><ROW><id>16915133</id><snippet>&gt;&gt;&gt; dx = 2. * X / (N - 1)
&gt;&gt;&gt; x = r_[-X:X+dx:dx]
&gt;&gt;&gt; x
array([-1.        , -0.99804497, -0.99608993, ...,  0.99608993,
        0.99804497,  1.        ])
&gt;&gt;&gt; x.shape
(1024,)
</snippet></ROW><ROW><id>16915133</id><snippet>linspace</snippet></ROW><ROW><id>16915164</id><snippet>def count(list):
    answer = 0
    for item in list:
        if item is not a list:
            answer += 1
        else:
            answer += number of items in the sublist (recursion will be useful here)
</snippet></ROW><ROW><id>16915676</id><snippet>import win32com.client, sys
Application = win32com.client.Dispatch("PowerPoint.Application")
Application.Visible = True
Presentation = Application.Presentations.Open(sys.argv[1])
for Slide in Presentation.Slides:
    for Shape in Slide.Shapes:
        try:
            Shape.TextFrame.TextRange.Font.Name = "Arial"
            Shape.TextFrame.TextRange.Font.Size = "12"
            Shape.TextFrame.TextRange.Font.Color.RGB = "000000"
        except:
            pass
Presentation.Save()
Application.Quit()  
</snippet></ROW><ROW><id>16915928</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = u'LastName FirstName (Department / Subdepartment)'
&gt;&gt;&gt; print re.sub(r'([()])', r'\\\1', s)
LastName FirstName \(Department / Subdepartment\)
</snippet></ROW><ROW><id>16916325</id><snippet>string_escape</snippet></ROW><ROW><id>16916325</id><snippet>with open('test.txt') as f:
    for line in f:
        for word in line.split():
            print(word.decode('string_escape').decode('utf-8'))


Bézier
</snippet></ROW><ROW><id>16916369</id><snippet>from PyQt4  import QtGui
from PyQt4  import QtCore
from PyQt4  import uic
import sys

FORM_1, BASE_1 = uic.loadUiType(r"C:/mydesign.ui")

APP = QtGui.QApplication(sys.argv)

class MyApp(FORM_1, BASE_1):
    def __init__(self, parent=None):
        super(MyApp, self).__init__(parent)
        self.setupUi(self)

        self.connect(self.btn_add, QtCore.SIGNAL("released()"), self.do_something)

    def do_something(self):
        print "working"


FORM = MyApp()
FORM.show()
APP.exec_()
</snippet></ROW><ROW><id>16916462</id><snippet>.localize()</snippet></ROW><ROW><id>16916462</id><snippet>ChengduTZ = pytz.timezone('Asia/Chongqing')
MidnightInChengdu = ChengduTZ.localize(datetime.datetime(2013, 6, 5, 0, 0, 0, 0))
MidnightInNewYork = NewYorkTZ.localize(datetime.datetime(2013, 6, 5, 0, 0, 0, 0))
</snippet></ROW><ROW><id>16916462</id><snippet>pytz</snippet></ROW><ROW><id>16916462</id><snippet>When it's midnight in Chengdu it's:
2013-06-05 00:00:00+08:00
2013-06-04 17:00:00+01:00
2013-06-04 18:00:00+02:00
2013-06-04 12:00:00-04:00

When it's midnight in New York it's:
2013-06-05 00:00:00-04:00
2013-06-05 05:00:00+01:00
2013-06-05 06:00:00+02:00
2013-06-05 12:00:00+08:00
</snippet></ROW><ROW><id>16916611</id><snippet>grouped</snippet></ROW><ROW><id>16916611</id><snippet>df.drop(grouped.get_group(group_name).index)
</snippet></ROW><ROW><id>16916611</id><snippet>df[grouped[0].transform(lambda x: x.name != group_name).astype('bool')]
</snippet></ROW><ROW><id>16916879</id><snippet>findAll()</snippet></ROW><ROW><id>16916879</id><snippet>&gt;&gt;&gt; for i in soup.find('div',{'id':'content'}).findAll('a'):
...     print i['href']
... 
afghanistan/
albania/
algeria/
american-samoa/
andorra/
angola/
anguilla/
antigua/
argentina/
armenia/
aruba/
ascension/
australia/
austria/
azerbaijan/
</snippet></ROW><ROW><id>16916879</id><snippet>soup.find('div',{'id':'content'})</snippet></ROW><ROW><id>16916879</id><snippet>id</snippet></ROW><ROW><id>16916879</id><snippet>content</snippet></ROW><ROW><id>16916879</id><snippet>&lt;div id="content"&gt;</snippet></ROW><ROW><id>16916879</id><snippet>.findAll()</snippet></ROW><ROW><id>16916879</id><snippet>'a'</snippet></ROW><ROW><id>16916879</id><snippet>href</snippet></ROW><ROW><id>16916992</id><snippet>if __name__ == "__main__":</snippet></ROW><ROW><id>16916992</id><snippet>import</snippet></ROW><ROW><id>16916992</id><snippet>nose</snippet></ROW><ROW><id>16916992</id><snippet>#!/usr/bin/env python

import sys


def main(args):
    try:
        output(plus_one(get_number(args)))
    except (IndexError, ValueError), e:
        print e
        return 1
    return 0


def get_number(args):
    return int(args[1])


def plus_one(number):
    return number + 1


def output(some_text):
    print some_text


if __name__ == '__main__':
    sys.exit(main(sys.argv))
</snippet></ROW><ROW><id>16916992</id><snippet>#!/usr/bin/env python

from StringIO import StringIO
import plus_one
import unittest


class TestPlusOne(unittest.TestCase):

    def test_main_returns_zero_on_success(self):
        self.assertEquals(plus_one.main(['test', '1']), 0)

    def test_main_returns_nonzero_on_error(self):
        self.assertNotEqual(plus_one.main(['test']), 0)

    def test_get_number_returns_second_list_element_as_integer(self):
        self.assertEquals(plus_one.get_number(['anything', 42]), 42)

    def test_get_number_raises_value_error_with_string(self):
        self.assertRaises(ValueError, plus_one.get_number, ['something',
                                                            'forty-two'])

    def test_get_number_raises_index_error_with_too_few_arguments(self):
        self.assertRaises(IndexError, plus_one.get_number, ['nothing'])

    def test_plus_one_adds_one_to_number(self):
        self.assertEquals(plus_one.plus_one(1), 2)

    def test_output_prints_input(self):
        saved_stdout, plus_one.sys.stdout = plus_one.sys.stdout, StringIO('_')
        plus_one.output('some_text')
        self.assertEquals(plus_one.sys.stdout.getvalue(), 'some_text\n')
        plus_one.sys.stdout = saved_stdout

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>16916992</id><snippet>python plus_one.py 41</snippet></ROW><ROW><id>16916992</id><snippet>42
</snippet></ROW><ROW><id>16916992</id><snippet>nosetests -v t_plus_one.py</snippet></ROW><ROW><id>16916992</id><snippet>test_get_number_raises_index_error_with_too_few_arguments (t_plus_one.TestPlusOne) ... ok
test_get_number_raises_value_error_with_string (t_plus_one.TestPlusOne) ... ok
test_get_number_returns_second_list_element_as_integer (t_plus_one.TestPlusOne) ... ok
test_main_returns_nonzero_on_error (t_plus_one.TestPlusOne) ... ok
test_main_returns_zero_on_success (t_plus_one.TestPlusOne) ... ok
test_output_prints_input (t_plus_one.TestPlusOne) ... ok
test_plus_one_adds_one_to_number (t_plus_one.TestPlusOne) ... ok

----------------------------------------------------------------------
Ran 7 tests in 0.002s

OK
</snippet></ROW><ROW><id>16917098</id><snippet>from poster.encode import MultipartParam

files["image"]= MultipartParam("image", filename=memfile.name, filetype=memfile.content_type, fileobj=memfile.file)
</snippet></ROW><ROW><id>16917619</id><snippet>{"$push": {"homework.bio", 92}})
</snippet></ROW><ROW><id>16917619</id><snippet>:</snippet></ROW><ROW><id>16917619</id><snippet>,</snippet></ROW><ROW><id>16917619</id><snippet>{'a', 1}</snippet></ROW><ROW><id>16917669</id><snippet>awk</snippet></ROW><ROW><id>16917669</id><snippet>awk 'FNR==NR { a[ "\\[ " $1 " \\]" ]; next } /^\[/ { f=0 } { for (i in a) if ($0 ~ i) f=1 } f' file1 file2
</snippet></ROW><ROW><id>16917777</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-
from django.db.backends import BaseDatabaseWrapper
def raise_exception(self):
    raise Exception('Do not execute SQL during importing Python code!')

BaseDatabaseWrapper.cursor=raise_exception

import celeryconfig
for module in celeryconfig.CELERY_IMPORTS:
    __import__(module)
</snippet></ROW><ROW><id>16918032</id><snippet>with open(filename) as f:
    for line in f:
        if not 'e' in line: print line.strip()
</snippet></ROW><ROW><id>16918032</id><snippet>word = line.strip()</snippet></ROW><ROW><id>16918032</id><snippet>line = line.strip()</snippet></ROW><ROW><id>16918032</id><snippet>line</snippet></ROW><ROW><id>16918032</id><snippet>word</snippet></ROW><ROW><id>16918032</id><snippet>for letter in word:
    if letter == 'e':
        continue
    print word
</snippet></ROW><ROW><id>16918032</id><snippet>e</snippet></ROW><ROW><id>16918032</id><snippet>hasE = False
for letter in word:
    if letter == 'e':
        hasE = True
        break
if not hasE: print word
</snippet></ROW><ROW><id>16918032</id><snippet>for letter in word:
    if letter == 'e': break
else:
    print word
</snippet></ROW><ROW><id>16918131</id><snippet>type</snippet></ROW><ROW><id>16918131</id><snippet>'__init__'</snippet></ROW><ROW><id>16918131</id><snippet>def func(self,*args,**kwargs):
    self.args = args
    for k,v in kwargs.items():
        setattr(self,k,v)

MyClass = type('Employee',(object,),{'__init__':func})
e = MyClass(name='john')
print (e.name) #'john'
</snippet></ROW><ROW><id>16918131</id><snippet>func</snippet></ROW><ROW><id>16918131</id><snippet>MyClass = type('Employee',(object,),{'__init__':func})
#clean up, clean up, everybody everywhere, clean up clean up, everybody do your share ...
del func
</snippet></ROW><ROW><id>16918132</id><snippet>namedtuple</snippet></ROW><ROW><id>16918132</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Point = namedtuple('Point', 'x y')
&gt;&gt;&gt; def my_func():
        return Point(1, 9)

&gt;&gt;&gt; my_func().x
1
</snippet></ROW><ROW><id>16918528</id><snippet>plt.plot(x, y, marker='.', lw=1)
d = scipy.zeros(len(y))
ax.fill_between(xs, ys, where=ys&gt;=d, interpolate=True, color='blue')
ax.fill_between(xs, ys, where=ys&lt;=d, interpolate=True, color='red')
</snippet></ROW><ROW><id>16918528</id><snippet>fill_between</snippet></ROW><ROW><id>16918528</id><snippet>x</snippet></ROW><ROW><id>16918528</id><snippet>y1</snippet></ROW><ROW><id>16918528</id><snippet>y2</snippet></ROW><ROW><id>16918528</id><snippet>y1</snippet></ROW><ROW><id>16918528</id><snippet>y2</snippet></ROW><ROW><id>16918528</id><snippet>x</snippet></ROW><ROW><id>16918528</id><snippet>fill_between</snippet></ROW><ROW><id>16918528</id><snippet>y1=0</snippet></ROW><ROW><id>16918528</id><snippet>y2=0</snippet></ROW><ROW><id>16918528</id><snippet>y1</snippet></ROW><ROW><id>16918528</id><snippet>y2</snippet></ROW><ROW><id>16918528</id><snippet>interpolate=True</snippet></ROW><ROW><id>16918939</id><snippet>','</snippet></ROW><ROW><id>16918939</id><snippet>"""</snippet></ROW><ROW><id>16918939</id><snippet>import random

with open('mytextfile.txt', 'r') as file_obj:
    str_list = [s.strip('\r\n\t "') for s in file_obj.read().split(',')]

print random.choice(str_list)
</snippet></ROW><ROW><id>16919126</id><snippet>for fname in files:
    filename = unicode(fname)
</snippet></ROW><ROW><id>16919126</id><snippet>fname</snippet></ROW><ROW><id>16919126</id><snippet>unicode(fname)</snippet></ROW><ROW><id>16919126</id><snippet>fname.decode('&lt;the encoding here&gt;</snippet></ROW><ROW><id>16919126</id><snippet>\xab</snippet></ROW><ROW><id>16919126</id><snippet>.link</snippet></ROW><ROW><id>16919126</id><snippet>for fname in files:
    filename = fname.decode('&lt;encoding&gt;')
</snippet></ROW><ROW><id>16919126</id><snippet>for fname in files:
    filename = fname.decode('latin1') #which is synonym to #ISO-8859-1
</snippet></ROW><ROW><id>16919183</id><snippet>i += 1 # don't forget to initialize it before the loop, though
with open ("c://Extract" + str(i/700) + ".bat","a+") as infile:
</snippet></ROW><ROW><id>16919444</id><snippet>module.__version__</snippet></ROW><ROW><id>16919457</id><snippet>with open('input.txt') as f, open('output.txt', 'w') as out:
    for line in f:
        line = line.split()  #splits the line on whitespaces and returns a list
        #sort the list based on the integer value of the item on the left side of the `:`
        line.sort(key = lambda x: int(x.split(':')[0]))
        out.write(" ".join(line) + '\n')
</snippet></ROW><ROW><id>16919457</id><snippet>1076:1 1378:1 2561:1 2956:1 4118:1
1039:1 1662:1
894:1 1662:1 1797:1 1948:1
</snippet></ROW><ROW><id>16919461</id><snippet>&gt;&gt;&gt; b[tuple(c.T)]
array([ 90,  91,  92, 100, 101, 102, 110, 111, 112])
</snippet></ROW><ROW><id>16919461</id><snippet>c</snippet></ROW><ROW><id>16919461</id><snippet>column_stack</snippet></ROW><ROW><id>16919461</id><snippet>&gt;&gt;&gt; np.column_stack((c,b[tuple(c.T)]))
array([[  5,   5,  90],
       [  5,   6,  91],
       [  5,   7,  92],
       [  6,   5, 100],
       [  6,   6, 101],
       [  6,   7, 102],
       [  7,   5, 110],
       [  7,   6, 111],
       [  7,   7, 112]])
</snippet></ROW><ROW><id>16919485</id><snippet>sudo apt-get clean 
</snippet></ROW><ROW><id>16919485</id><snippet>/var/cache/apt/archives/</snippet></ROW><ROW><id>16919485</id><snippet>sudo apt-get -d build-dep &lt;package_name&gt;
</snippet></ROW><ROW><id>16919485</id><snippet>-d</snippet></ROW><ROW><id>16919485</id><snippet>build-dep</snippet></ROW><ROW><id>16919485</id><snippet>/var/cache/apt/archives/</snippet></ROW><ROW><id>16919485</id><snippet>sudo apt-get remove &lt;package name&gt;</snippet></ROW><ROW><id>16919485</id><snippet>sudo dpkg -i *.deb
</snippet></ROW><ROW><id>16919775</id><snippet>matrix</snippet></ROW><ROW><id>16919775</id><snippet>UPDATE places SET name='room', matrix='[['bob', False, False], [False, False, False], [False, False, False]]'
</snippet></ROW><ROW><id>16919775</id><snippet>'[['bob'</snippet></ROW><ROW><id>16919775</id><snippet>"""UPDATE places SET name="room", matrix="[['bob', False, False]..."""
</snippet></ROW><ROW><id>16919775</id><snippet>"UPDATE places SET name=?, matrix=?, bans=?, pop=? WHERE name=?", (place.name,place.matrix,place.bans,place.pop,name)
</snippet></ROW><ROW><id>16919997</id><snippet>import sys
sys.path.append("C:/sympy-0.7.2")
import sympy
</snippet></ROW><ROW><id>16920019</id><snippet>first_selected_option</snippet></ROW><ROW><id>16920019</id><snippet>first_selected_option()</snippet></ROW><ROW><id>16920535</id><snippet>sum</snippet></ROW><ROW><id>16920535</id><snippet>sum(user.waitTime for user in self.done)/float(len(self.done))
</snippet></ROW><ROW><id>16920535</id><snippet>float</snippet></ROW><ROW><id>16920535</id><snippet>user.waitTime</snippet></ROW><ROW><id>16920654</id><snippet>float32</snippet></ROW><ROW><id>16920654</id><snippet>my_file = open('float_test.bin', 'rb')
raw_data = ConstBitStream(my_file)
float_num_ = raw_data.readlist('floatle:32')

print float_num
print float_num_
</snippet></ROW><ROW><id>16920654</id><snippet>3.4353
3.43530011177
</snippet></ROW><ROW><id>16920780</id><snippet>import os
import your_module

# Get directory of your module
print os.path.dirname(your_module.__file__)
</snippet></ROW><ROW><id>16920780</id><snippet>import os
import re

print os.path.dirname(re.__file__)
</snippet></ROW><ROW><id>16920780</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7
</snippet></ROW><ROW><id>16920847</id><snippet>bisect</snippet></ROW><ROW><id>16920847</id><snippet>bisect</snippet></ROW><ROW><id>16920847</id><snippet>import bisect

qtys = [50, 100, 200, 500, 1000]

def sack(amt, qtys=qtys):
  res = set()
  while amt &gt; 0:
    pivot = bisect.bisect(qtys, amt)
    if sum(qtys[:pivot]) &gt;= amt:
      amt -= qtys[pivot - 1]
      res.add(pivot - 1)
    else:
      if sum(qtys[:pivot + 1]) &lt; amt:
        raise ValueError('Not enough items to fill the sack')
      res.add(pivot)
      amt -= qtys[pivot]
  return res

print sack(150)
print sack(210)
print sack(1777)
print sack(530)
</snippet></ROW><ROW><id>16920926</id><snippet>sqlite3</snippet></ROW><ROW><id>16920926</id><snippet>ctypes</snippet></ROW><ROW><id>16920926</id><snippet>ctypes</snippet></ROW><ROW><id>16920926</id><snippet>from ctypes import *

# Define some symbols
SQLITE_DELETE =  9
SQLITE_INSERT = 18
SQLITE_UPDATE = 23

# Define our callback function
#
# 'user_data' will be the third param passed to sqlite3_update_hook
# 'operation' will be one of: SQLITE_DELETE, SQLITE_INSERT, or SQLITE_UPDATE
# 'db name' will be the name of the affected database
# 'table_name' will be the name of the affected table
# 'row_id' will be the ID of the affected row
def callback(user_data, operation, db_name, table_name, row_id):
    if operation == SQLITE_DELETE:
        optext = 'Deleted row'
    elif operation == SQLITE_INSERT:
        optext = 'Inserted row'
    elif operation == SQLITE_UPDATE:
        optext = 'Updated row'
    else:
        optext = 'Unknown operation on row'
    s = '%s %ld of table "%s" in database "%s"' % (optext, row_id, table_name, db_name)
    print s

# Translate into a ctypes callback
c_callback = CFUNCTYPE(c_void_p, c_void_p, c_int, c_char_p, c_char_p, c_int64)(callback)

# Load sqlite3
dll = CDLL('libsqlite3.so')

# Holds a pointer to the database connection
db = c_void_p()

# Open a connection to 'test.db'
dll.sqlite3_open('test.db', byref(db))

# Register callback
dll.sqlite3_update_hook(db, c_callback, None)

# Create a variable to hold error messages
err = c_char_p()

# Now execute some SQL
dll.sqlite3_exec(db, 'create table foo (id int, name varchar(255))', None, None, byref(err))
if err:
    print err.value
dll.sqlite3_exec(db, 'insert into foo values (1, "Bob")', None, None, byref(err))
if err:
    print err.value
</snippet></ROW><ROW><id>16920926</id><snippet>Inserted row 1 of table "foo" in database "main"
</snippet></ROW><ROW><id>16920926</id><snippet>table foo already exists
Inserted row 2 of table "foo" in database "main"
</snippet></ROW><ROW><id>16921264</id><snippet>xlwt</snippet></ROW><ROW><id>16921264</id><snippet>xlrd</snippet></ROW><ROW><id>16921631</id><snippet>tuple</snippet></ROW><ROW><id>16921631</id><snippet>__mod__</snippet></ROW><ROW><id>16921631</id><snippet>dict</snippet></ROW><ROW><id>16921631</id><snippet>print """&lt;VirtualHost 192.168.75.100:80&gt;
    ServerName www.%(hostName)s
    ServerAlias %(hostNameshort)s.* www.%(hostNameshort)s.*
    DocumentRoot %(prjDir)s/html
    CustomLog \\|/usr/sbin/cronolog /var/log/httpd/class/prjCode}/\%(hostName)s.log.%%Y%%m%%d\" urchin"
&lt;/VirtualHost&gt;""" % dict(hostName='foo',hostNameshort='bar',prjDir='baz')
</snippet></ROW><ROW><id>16921631</id><snippet>s</snippet></ROW><ROW><id>16921631</id><snippet>ServerAlias %(hostNameshort).* www.%(hostNameshort)s.*
</snippet></ROW><ROW><id>16921631</id><snippet>%</snippet></ROW><ROW><id>16921631</id><snippet>'%Y%m%d'</snippet></ROW><ROW><id>16921671</id><snippet>dropbox.py</snippet></ROW><ROW><id>16921671</id><snippet>dropbox.py</snippet></ROW><ROW><id>16921694</id><snippet>&gt;&gt;&gt; from django.contrib.gis.geos import Polygon, Point, MultiPoint, GeometryCollection
&gt;&gt;&gt;
&gt;&gt;&gt; poly = Polygon( ((0, 0), (0, 1), (1, 1), (0, 0)) )
&gt;&gt;&gt; gc = GeometryCollection(Point(0, 0), MultiPoint(Point(0, 0), Point(1, 1)), poly)
&gt;&gt;&gt; gc.geojson
u'{ "type": "GeometryCollection", "geometries": [ { "type": "Point", "coordinates": [ 0.0, 0.0 ] }, { "type": "MultiPoint", "coordinates": [ [ 0.0, 0.0 ], [ 1.0, 1.0 ] ] }, { "type": "Polygon", "coordinates": [ [ [ 0.0, 0.0 ], [ 0.0, 1.0 ], [ 1.0, 1.0 ], [ 0.0, 0.0 ] ] ] } ] }'
</snippet></ROW><ROW><id>16921694</id><snippet>&gt;&gt;&gt; polys = []
&gt;&gt;&gt; for i in range(5):
...     poly = Polygon( ((0, 0), (0, 1), (1, 1), (0, 0)) )
...     polys.append(poly)
...
&gt;&gt;&gt; gc = GeometryCollection(polys)
</snippet></ROW><ROW><id>16921770</id><snippet>a</snippet></ROW><ROW><id>16921770</id><snippet>actuals</snippet></ROW><ROW><id>16921770</id><snippet>list</snippet></ROW><ROW><id>16921932</id><snippet>dy</snippet></ROW><ROW><id>16921932</id><snippet>self</snippet></ROW><ROW><id>16921932</id><snippet>dy</snippet></ROW><ROW><id>16921932</id><snippet>class WrapODE(object):
    def __init__(self):
        self.y_0 = 0.
        self.L_x = []
        self.timestep = 0
        self.times = np.arange(0., 1., 0.1)

    def run(self):
        self.L_y = odeint(
            self.dy,
            self.y_0, self.times,
            args=(self,))

    @staticmethod
    def dy(y, t, self):
        """"
        Discretized application of dudt

        Watch out! Because this is a staticmethod, as required by odeint, self
        is the third argument
        """
        x = np.random.rand(3,1)
        if t &gt;= self.times[self.timestep]:
            self.timestep += 1
            self.L_x.append(x)
        else:
            self.L_x[-1] = x
        return y + x.sum()
</snippet></ROW><ROW><id>16921932</id><snippet>x</snippet></ROW><ROW><id>16921932</id><snippet>y</snippet></ROW><ROW><id>16921932</id><snippet>if t &gt;= self.times[self.timestep]:</snippet></ROW><ROW><id>16921932</id><snippet>times</snippet></ROW><ROW><id>16922173</id><snippet>chunks = []      // used to store the smaller chunks
maxlen = 30000   // maximum chunk size

while True:
    if len(myString) &lt;= maxlen:    
        chunks.append(myString)   // add the last chunk
        break                     // done

    sepIndex = myString.rfind(delim, 0, maxlen)  // find last delimiter &lt; maxlen
    chunks.append(myString[:sepIndex])           // add it to chunks
    myString = myString[sepIndex + 1:]           // remove it and delimiter
</snippet></ROW><ROW><id>16922287</id><snippet>var objects = [];

{% for model in models %}
    objects[] = {
        name: {{ model.name }},
        date: {{ model.date }},
        // etc.
    };
{% endfor %}
</snippet></ROW><ROW><id>16922328</id><snippet>with open('words.txt','r') as f:
    for line in f:
        for word in line.split():
           print(word)      
</snippet></ROW><ROW><id>16922395</id><snippet>{% for type in typeList%}
  {% if type.parent_type_id == None %} 
  &lt;h1&gt;{{type.title}}&lt;/h1&gt;
  {% else %}
  {% if type.title in checked_ones %}
  &lt;label&gt;&lt;input type="checkbox"  checked="True" value="{{ type.title }}" name="key"&gt;{{ type.title }}&lt;/label&gt;&lt;br /&gt; 
  {% else %}
  &lt;label&gt;&lt;input type="checkbox"  value="{{ type.title }}" name="key"&gt;{{ type.title }}&lt;/label&gt;&lt;br /&gt; 
{% endif %}
 {% endif %}
  {% endfor %}
</snippet></ROW><ROW><id>16922458</id><snippet>__init__.py</snippet></ROW><ROW><id>16922458</id><snippet>/myapp/__init__.py</snippet></ROW><ROW><id>16922458</id><snippet>from flask import Flask, render_template, abort
from flask.ext.mongokit import MongoKit, Document

from .home.views import mod as home_blueprint
from .users.views import mod as user_blueprint
from .forums.views import mod as forum_blueprint

def create_app():
    app = Flask(__name__)
    app.config.from_object('config')

    # Register blueprints
    app.register_blueprint(home_blueprint)
    app.register_blueprint(user_blueprint, url_prefix="/users")
    app.register_blueprint(forum_blueprint, url_prefix="/forums")

    db = MongoKit(app)

    @app.errorhandler(404)
    def not_found(error):
        return render_template('404.html')

    @app.errorhandler(500)
    def internal_error(exception):
        return "Some internal error has taken place.  Alert somebody!"

    return app,db

# Make sure you are calling create_app func below:
(app,db) = create_app()
</snippet></ROW><ROW><id>16922458</id><snippet>from flask.ext.mongokit import MongoKit, Document

# import db below like this
from myapp import db

class User(Document):
    structure = {
    'name': unicode,
    'email': unicode,
}
use_dot_notation = True

# ok to do this below
db.register([User])
</snippet></ROW><ROW><id>16922562</id><snippet>delimiter=' '</snippet></ROW><ROW><id>16922562</id><snippet>import Tkinter, tkFileDialog
import csv 

#Choose the file that you want to read from
root = Tkinter.Tk()
root.withdraw()

file_path = tkFileDialog.askopenfilename()
with open(file_path , 'rb') as current_file:
    reader = csv.reader(current_file, delimiter= ' ', 
                        skipinitialspace=True)
    with open('newdata.txt','wb') as output_file:
        out = csv.writer(output_file)
        for row in reader:
            out.writerow(row)
            print row
            #print row[0::1]
</snippet></ROW><ROW><id>16922801</id><snippet>compile</snippet></ROW><ROW><id>16922801</id><snippet>exec</snippet></ROW><ROW><id>16922801</id><snippet>chroot</snippet></ROW><ROW><id>16922801</id><snippet>ulimit</snippet></ROW><ROW><id>16923068</id><snippet>json.dumps([u"čeština", u"maďarština", u"francouština"])</snippet></ROW><ROW><id>16923068</id><snippet>'["\\u010de\u0161tina", "ma\\u010far\u0161tina", "francou\\u0161tina"]'</snippet></ROW><ROW><id>16923068</id><snippet>\u</snippet></ROW><ROW><id>16923068</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>16923068</id><snippet>json.dumps()</snippet></ROW><ROW><id>16923068</id><snippet>&gt;&gt;&gt; json.dumps(lst)
'["\\u010de\\u0161tina", "ma\\u010far\\u0161tina", "francou\\u0161tina"]'
&gt;&gt;&gt; print json.dumps(lst)
["\u010de\u0161tina", "ma\u010far\u0161tina", "francou\u0161tina"]
</snippet></ROW><ROW><id>16923068</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>16923068</id><snippet>&gt;&gt;&gt; json.dumps(lst, ensure_ascii=False)
u'["\u010de\u0161tina", "ma\u010far\u0161tina", "francou\u0161tina"]'
&gt;&gt;&gt; print json.dumps(lst, ensure_ascii=False)
["čeština", "maďarština", "francouština"]
</snippet></ROW><ROW><id>16923068</id><snippet>import codecs, json
lst = [u"čeština", u"maďarština", u"francouština"]
json.dump(lst, codecs.open('file.txt', 'w', 'utf-8'), ensure_ascii=False)
</snippet></ROW><ROW><id>16923068</id><snippet>json.dump()</snippet></ROW><ROW><id>16923068</id><snippet>json.dumps()</snippet></ROW><ROW><id>16923187</id><snippet>'cat new.txt | tr -d "s/,[]''*//g" &gt;meantenbri.txt2'</snippet></ROW><ROW><id>16923187</id><snippet>&gt;&gt;&gt; print 'cat new.txt | tr -d "s/,[]''*//g" &gt;meantenbri.txt2'
cat new.txt | tr -d "s/,[]*//g" &gt;meantenbri.txt2
</snippet></ROW><ROW><id>16923187</id><snippet>'cat new.txt | tr -d "s/,[]'</snippet></ROW><ROW><id>16923187</id><snippet>'*//g" &gt;meantenbri.txt2'</snippet></ROW><ROW><id>16923187</id><snippet>    com = """cat new.txt | tr -d "s/,[]''*//g" &gt;meantenbri.txt2"""
</snippet></ROW><ROW><id>16923187</id><snippet>com = 'cat new.txt | tr -d "s/,[]\'\'*//g" &gt;meantenbri.txt2'
</snippet></ROW><ROW><id>16923187</id><snippet>com = [...]</snippet></ROW><ROW><id>16923187</id><snippet>s0 = ''</snippet></ROW><ROW><id>16923187</id><snippet>com = ''.join(com)</snippet></ROW><ROW><id>16923187</id><snippet>com</snippet></ROW><ROW><id>16923187</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>16923187</id><snippet>os.system()</snippet></ROW><ROW><id>16923187</id><snippet>import subprocess
cmd = ['tr', '-d', "s/,[]''*//g"]
p = subprocess.Popen(cmd, stdin=open('new.txt'),
                     stdout=open('meantenbri.txt2', 'w'))
p.communicate()
res = p.returncode
</snippet></ROW><ROW><id>16923367</id><snippet>sep</snippet></ROW><ROW><id>16923367</id><snippet>to_csv</snippet></ROW><ROW><id>16923367</id><snippet>df.to_csv(file_name, sep='\t')
</snippet></ROW><ROW><id>16923367</id><snippet>encoding</snippet></ROW><ROW><id>16923367</id><snippet>df.to_csv(file_name, sep='\t', encoding='utf-8')
</snippet></ROW><ROW><id>16923436</id><snippet>f.write(u'Río Negro'.encode('utf-8'))
</snippet></ROW><ROW><id>16923538</id><snippet>frame1.focus_set()</snippet></ROW><ROW><id>16923562</id><snippet>ElementTree</snippet></ROW><ROW><id>16923562</id><snippet>xmlns</snippet></ROW><ROW><id>16923562</id><snippet>feed</snippet></ROW><ROW><id>16923564</id><snippet>def alter_list_data_to_serialize(self, request, data):
    #call external procedure here
    return data
</snippet></ROW><ROW><id>16923602</id><snippet>using System.Diagnostics;

Process.Start([string]);
</snippet></ROW><ROW><id>16923602</id><snippet>Process p = new Process();
p.StartInfo.FileName = "cmd.exe";
p.StartInfo.Arguments = "/c dir *.cs";
p.StartInfo.UseShellExecute = false;
p.StartInfo.RedirectStandardOutput = true;
p.Start();
</snippet></ROW><ROW><id>16923602</id><snippet>&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Process.aspx.cs" Inherits="com.gnld.web.promote.Process" %&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Test Process&lt;/title&gt;
    &lt;style&gt;
        textarea { width: 100%; height: 600px }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;form id="form1" runat="server"&gt;
      &lt;asp:Button ID="RunCommand" runat="server" Text="Run Dir" onclick="RunCommand_Click" /&gt;
      &lt;h1&gt;Output&lt;/h1&gt;
      &lt;asp:TextBox ID="CommandOutput" runat="server" ReadOnly="true" TextMode="MultiLine" /&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>16923602</id><snippet>using System;

namespace com.gnld.web.promote
{
    public partial class Process : System.Web.UI.Page
    {
        protected void RunCommand_Click(object sender, EventArgs e)
        {
            using (var cmd = new System.Diagnostics.Process()
            {
                StartInfo = new System.Diagnostics.ProcessStartInfo()
                {
                    FileName = "cmd.exe",
                    Arguments = "/c dir *.*",
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    RedirectStandardOutput = true
                }
            })
            {
                cmd.Start();
                CommandOutput.Text = cmd.StandardOutput.ReadToEnd();
            };
        }
    }
}
</snippet></ROW><ROW><id>16923733</id><snippet>import networkx as nx
import matplotlib.pyplot as plt
import random

# Set up a graph with random edges and weights

G = nx.barabasi_albert_graph(6, 2, seed= 3214562)
for u,v in G.edges_iter():
    G[u][v]['weight'] = int(random.random() * 10)

pos = nx.spring_layout(G)

nx.draw(G, pos)
nx.draw_networkx_edge_labels(G,pos)
plt.show()
</snippet></ROW><ROW><id>16923733</id><snippet>for n in G.nodes_iter():
    total = sum([ attr['weight']
                  for u,v,attr in G.edges(n, data=True) ])
    total = float(total)
    weights = dict([(nb, G[n][nb]['weight']/total)
                    for nb in G.neighbors(n)])
    G[n]['adj_weights'] = weights

# Print out the adjusted weights

for n in G.nodes_iter():
    for nb,w in G[n]['adj_weights'].iteritems():
        w = int(w*1000)/1000.
        print '{} to {}: {}'.format(n, nb, w)
</snippet></ROW><ROW><id>16923733</id><snippet>0 to 2: 0.272
0 to 3: 0.727
1 to 2: 0.818
1 to 4: 0.181
2 to 0: 0.081
2 to 1: 0.243
2 to 3: 0.243
2 to 4: 0.216
2 to 5: 0.216
3 to 0: 0.363
3 to 2: 0.409
3 to 5: 0.227
4 to 1: 0.2
4 to 2: 0.8
5 to 2: 0.615
5 to 3: 0.384
</snippet></ROW><ROW><id>16923889</id><snippet>&gt;&gt;&gt; atom_indices = [0, 4, 5, 8]
&gt;&gt;&gt; coords = [3*a+k for a in atom_indices for k in range(3)]
&gt;&gt;&gt; coords
[0, 1, 2, 12, 13, 14, 15, 16, 17, 24, 25, 26]
</snippet></ROW><ROW><id>16923889</id><snippet>coords = []
for a in atom_indices: 
    for k in range(3): 
        coords.append(3*a+k)
</snippet></ROW><ROW><id>16923889</id><snippet>for</snippet></ROW><ROW><id>16923893</id><snippet>dTime=[]
dvalue=[]
for df in root.xpath('//channel/Time'):
    ## Iterate over attributes of channel
    for attrib in df.attrib:
    dTime.append(df.attrib[attrib])
    ## value is a child of time, and iterate
    subfields = df.getchildren()
    for subfield in subfields:
    dvalue.append(subfield.text)
pef=DataFrame({'Time':dTime,'values':dvalue})

pef

&amp;ltclass 'pandas.core.frame.DataFrame'&amp;gt
Int64Index: 12960 entries, 0 to 12959
Data columns (total 2 columns):
Time     12960  non-null values
value    12960  non-null values
dtypes: object(2) 

pef[:5]

    Time                    value
0    2013-05-01 00:00:00    258
1    2013-05-01 00:01:00    259
2    2013-05-01 00:02:00    258
3    2013-05-01 00:03:00    257
4    2013-05-01 00:04:00    257
</snippet></ROW><ROW><id>16923974</id><snippet>while True:
    for event in pygame.event.get():    
        amntTuple = pygame.mouse.get_pos()
        print (amntTuple)
</snippet></ROW><ROW><id>16923999</id><snippet>def manhattan(x,y):
    'int,int==&gt;nonetype'
    import random
    res=[]
    for i in range(x):
        res.append([])
    for i in res:
        for j in range(y):
            i.append(0)
    position=(x//2+1,y//2+1)
    z=position[0]
    v=position[1]

    while z!=-1 and z!=x and v!=-1 and v!=y:
        res[z][v] += 1
        direction=random.randrange(1,5)
        if direction==1:
            v+=1
        elif direction==2:
            z+=1
        elif direction==3:
            v-=1
        else:
            z-=1
    for i in res:
        print(i)
</snippet></ROW><ROW><id>16923999</id><snippet>while</snippet></ROW><ROW><id>16923999</id><snippet>and</snippet></ROW><ROW><id>16923999</id><snippet>or</snippet></ROW><ROW><id>16923999</id><snippet>for</snippet></ROW><ROW><id>16923999</id><snippet>while</snippet></ROW><ROW><id>16923999</id><snippet>res[z][v] += 1</snippet></ROW><ROW><id>16923999</id><snippet>z</snippet></ROW><ROW><id>16923999</id><snippet>v</snippet></ROW><ROW><id>16923999</id><snippet>res</snippet></ROW><ROW><id>16923999</id><snippet>res</snippet></ROW><ROW><id>16924193</id><snippet>m00</snippet></ROW><ROW><id>16924193</id><snippet>m01</snippet></ROW><ROW><id>16924193</id><snippet>m10</snippet></ROW><ROW><id>16924193</id><snippet>cv2</snippet></ROW><ROW><id>16924193</id><snippet>moments = cv2.moments(thresholded_img) 
area = moments['m00'] 

#there can be noise in the video so ignore objects with small areas 
if(area &gt; 100000): 
    #determine the x and y coordinates of the center of the object 
    #we are tracking by dividing the 1, 0 and 0, 1 moments by the area 
    x = moments['m10'] / area
    y = moments['m01'] / area
</snippet></ROW><ROW><id>16924225</id><snippet>requests.get</snippet></ROW><ROW><id>16924225</id><snippet>raw</snippet></ROW><ROW><id>16924225</id><snippet>requests</snippet></ROW><ROW><id>16924225</id><snippet>&gt;&gt;&gt; r = requests.get('https://github.com/timeline.json', stream=True)
&gt;&gt;&gt; r.raw
&lt;requests.packages.urllib3.response.HTTPResponse object at 0x101194810&gt;
&gt;&gt;&gt; r.raw.read(10)
'\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03'
</snippet></ROW><ROW><id>16924324</id><snippet>if any(s.lower() == "ds" for s in x):
    print "Yes"
</snippet></ROW><ROW><id>16924324</id><snippet>s.upper() == "DS"</snippet></ROW><ROW><id>16924464</id><snippet>cv.SaveImage(diff, cv.LoadImage(diff))</snippet></ROW><ROW><id>16924464</id><snippet>cv.SaveImage(diff, cv.LoadImage(diff))
cv.ShowImage('box name', diff)
</snippet></ROW><ROW><id>16924614</id><snippet>range</snippet></ROW><ROW><id>16924614</id><snippet>def func(g,h,i):
    return i*(g+h)

print map(functools.partial(func, 2,3), range(20))

# [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]
</snippet></ROW><ROW><id>16924923</id><snippet>__all__</snippet></ROW><ROW><id>16924923</id><snippet>from package import *</snippet></ROW><ROW><id>16924923</id><snippet>python __all__</snippet></ROW><ROW><id>16924946</id><snippet>for rx in range (sh.nrows):
    if(sh.cell_value(rowx=rx, colx=3)!=''):
        s = sh.cell_value(rowx=rx, colx=3)
        print filter(unicode.isdigit, s)
        print int(filter(unicode.isdigit, s))
        total += int(filter(unicode.isdigit, s))
</snippet></ROW><ROW><id>16924946</id><snippet>for rx in range (sh.nrows):
    if(sh.cell_value(rowx=rx, colx=3)!=''):
        s = sh.cell_value(rowx=rx, colx=3)
    print filter(unicode.isdigit, s)    # THIS IS NOT INSIDE IF
    print int(filter(unicode.isdigit, s))
    total += int(filter(unicode.isdigit, s))
</snippet></ROW><ROW><id>16924946</id><snippet>&gt;&gt;&gt; s = u"      "
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; filter(unicode.isdigit, s)
u''
&gt;&gt;&gt; int(filter(unicode.isdigit, s))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: ''
</snippet></ROW><ROW><id>16925164</id><snippet>#note the uuid without parenthesis
eyw_transactionref=models.CharField(max_length=100, blank=True, unique=True, default=uuid.uuid4)
</snippet></ROW><ROW><id>16925164</id><snippet>class Paid(models.Model):
     user=models.ForeignKey(User)
     eyw_transactionref=models.CharField(max_length=100, null=True, blank=True, unique=True)

     def __init__(self):
         super(Paid, self).__init__()
         self.eyw_transactionref = str(uuid.uuid4())

     def __unicode__(self):
        return self.user
</snippet></ROW><ROW><id>16925190</id><snippet>new = old.rstrip('\n').rsplit('\n', 1)[0] + '\nNew line to be added with line break included.'
</snippet></ROW><ROW><id>16925190</id><snippet>&gt;&gt;&gt; old = '''The quick
... brown fox jumps
... over the lazy
... dog
... '''
&gt;&gt;&gt; old.rstrip('\n').rsplit('\n', 1)[0] + '\nhorse and rider'
'The quick\nbrown fox jumps\nover the lazy\nhorse and rider'
</snippet></ROW><ROW><id>16925190</id><snippet>\n</snippet></ROW><ROW><id>16925190</id><snippet>os.linesep</snippet></ROW><ROW><id>16925205</id><snippet>def load_and_compare(self, input_file1, input_file2, output_file1, output_file2, result_file):
    self.load(input_file1, input_file2, output_file1, output_file2)
    self.compare(output_file1, output_file2)
    self.final(result_file)
</snippet></ROW><ROW><id>16925239</id><snippet>&gt;&gt;&gt; slice(4,5).start
4
&gt;&gt;&gt; slice(4,5).stop
5
&gt;&gt;&gt; slice(4,5).step  #None
</snippet></ROW><ROW><id>16925239</id><snippet>indices</snippet></ROW><ROW><id>16925239</id><snippet>&gt;&gt;&gt; slice(4,5).indices(12)
(4, 5, 1)
</snippet></ROW><ROW><id>16925239</id><snippet> for i in range(*my_slice.indices(len(self))):
     print self[i]
</snippet></ROW><ROW><id>16925239</id><snippet>&gt;&gt;&gt; slice(4,-5).indices(12)
(4, 7, 1)
&gt;&gt;&gt; print range(*slice(None,None,-1).indices(12))
[11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
</snippet></ROW><ROW><id>16925334</id><snippet>  global bar
  bar = []
  def foobar():
    bar.append('X')
</snippet></ROW><ROW><id>16925334</id><snippet>In [1]: global bar

In [2]: bar = []

In [3]: def foo():
   ...:     bar.append(3)
   ...:     

In [4]: foo()

In [5]: foo()

In [6]: foo()

In [7]: bar
Out[7]: [3, 3, 3]
</snippet></ROW><ROW><id>16925334</id><snippet>In [2]: def foo():
   ...:     global bar
   ...:     bar = []
   ...:     

In [3]: def oof():
   ...:     bar.append('x')
   ...:     

In [4]: foo()

In [5]: oof()

In [6]: oof()

In [7]: oof()

In [8]: oof()

In [9]: bar
Out[9]: ['x', 'x', 'x', 'x']
</snippet></ROW><ROW><id>16925532</id><snippet>for i_t in range(0, np.shape(t)[1]):
    ax.clear()
    plt.hold(True)
    #    plot limits
    ax.set_xlim(-(max(q0) + bodies[-1].L), +(max(q0) + bodies[-1].L))
    ax.set_ylim(-(max(q0) + bodies[-1].L), +(max(q0) + bodies[-1].L))
    for i in range(0, N):
        ax.plot(x_matrix[i_t, i], y_matrix[i_t, i], 's', color=colors[0, i])

    plt.pause(0.0001)
</snippet></ROW><ROW><id>16925726</id><snippet>.color</snippet></ROW><ROW><id>16925726</id><snippet>block</snippet></ROW><ROW><id>16925726</id><snippet>screen.blit(Surface(unervise[(b,a)].color()))
</snippet></ROW><ROW><id>16925726</id><snippet>()</snippet></ROW><ROW><id>16925726</id><snippet>screen.blit(Surface(unervise[(b,a)].color))
</snippet></ROW><ROW><id>16925788</id><snippet>.save()</snippet></ROW><ROW><id>16925788</id><snippet>list_form = forms.ListForm(instance=list_create)</snippet></ROW><ROW><id>16925788</id><snippet>{{list_form.instance.id}}</snippet></ROW><ROW><id>16925910</id><snippet>__eq__</snippet></ROW><ROW><id>16925910</id><snippet>class Barn(object):
    def __init__(self, i,j):
        self.i = i
        self.j = j
    def __eq__(self, other):
        return self.i == other.i and self.j == other.j
</snippet></ROW><ROW><id>16925999</id><snippet>C:\&gt; py -2.7 bar.py
</snippet></ROW><ROW><id>16925999</id><snippet>#! python2.7
</snippet></ROW><ROW><id>16925999</id><snippet>C:\&gt; py bar.py
</snippet></ROW><ROW><id>16925999</id><snippet>C:\&gt; bar.py
</snippet></ROW><ROW><id>16925999</id><snippet>C:\&gt; bar
</snippet></ROW><ROW><id>16926079</id><snippet>bin/fst2r2c</snippet></ROW><ROW><id>16926079</id><snippet>bin/fst2r2c</snippet></ROW><ROW><id>16926079</id><snippet>#!</snippet></ROW><ROW><id>16926079</id><snippet>\r</snippet></ROW><ROW><id>16926079</id><snippet>/usr/bin</snippet></ROW><ROW><id>16926079</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>16926277</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>16926277</id><snippet>import csv
import os
from itertools import groupby
from operator import itemgetter

new_file = os.path.join(export_dir, os.path.basename(import_dir))

with open(import_dir) as import, open(new_file, 'ab') as tab_file:
    data = csv.reader(import)
    writer = csv.writer(tab_file, delimiter='\t')

    fields = next(data)
    for customer, rows in groupby(data, key=itemgetter(0)):
        first_row = next(rows)
        item = {f: v.strip() for f, v in zip(fields, first_row)}
        writer.writerow([1, customer, item['Order Number'], item['Product Description'], item['Due Date'])
        writer.writerow([2, item['Item Line Number'], item['Quantity'], ...])
        for i, row in enumerate(rows, 3):
            item = {f: v.strip() for f, v in zip(fields, row)}
            writer.writerow([i, item['Item Line Number'], item['Quantity'], ...])
</snippet></ROW><ROW><id>16926277</id><snippet>groupby()</snippet></ROW><ROW><id>16926277</id><snippet>key</snippet></ROW><ROW><id>16926277</id><snippet>with</snippet></ROW><ROW><id>16926277</id><snippet>os.path.join()</snippet></ROW><ROW><id>16926277</id><snippet>csv.writer(..., delimiter='\t')</snippet></ROW><ROW><id>16926277</id><snippet>csv.DictReader()</snippet></ROW><ROW><id>16926357</id><snippet>format()</snippet></ROW><ROW><id>16926357</id><snippet>&gt;&gt;&gt; format(14, '#010b')
'0b00001110'
</snippet></ROW><ROW><id>16926357</id><snippet>format()</snippet></ROW><ROW><id>16926357</id><snippet>#</snippet></ROW><ROW><id>16926357</id><snippet>0b</snippet></ROW><ROW><id>16926357</id><snippet>010</snippet></ROW><ROW><id>16926357</id><snippet>0</snippet></ROW><ROW><id>16926357</id><snippet>0b</snippet></ROW><ROW><id>16926429</id><snippet>O(1)</snippet></ROW><ROW><id>16926429</id><snippet>O(n)</snippet></ROW><ROW><id>16926429</id><snippet>n</snippet></ROW><ROW><id>16926429</id><snippet>dictionary</snippet></ROW><ROW><id>16926476</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.fromtimestamp(1368805100576/1000)
datetime.datetime(2013, 5, 17, 8, 38, 20)
</snippet></ROW><ROW><id>16926516</id><snippet>out</snippet></ROW><ROW><id>16926516</id><snippet>distances</snippet></ROW><ROW><id>16926516</id><snippet>indices</snippet></ROW><ROW><id>16926516</id><snippet>distance</snippet></ROW><ROW><id>16926516</id><snippet>distances</snippet></ROW><ROW><id>16926516</id><snippet>input</snippet></ROW><ROW><id>16926516</id><snippet>input</snippet></ROW><ROW><id>16926829</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>16926829</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>16926899</id><snippet>multiprocessing</snippet></ROW><ROW><id>16926952</id><snippet>replace</snippet></ROW><ROW><id>16926952</id><snippet>mystr.replace('-', ' ').split(' ')
</snippet></ROW><ROW><id>16927232</id><snippet>execute()</snippet></ROW><ROW><id>16927232</id><snippet>print()</snippet></ROW><ROW><id>16927232</id><snippet>print(execute())
input('Press any key')
</snippet></ROW><ROW><id>16927232</id><snippet>input()</snippet></ROW><ROW><id>16927444</id><snippet>def putfile(file=file, site=site, dir=dir, user=())
    upFile = open(file, 'rb')
    handle = ftplib.FTP(site)
    apply(handle.login, user)
    print "Upload started"
    handle.storbinary('STOR ' + file, upFile, 262144)
    print "Upload completed"
    handle.quit()
    upFile.close()
</snippet></ROW><ROW><id>16927552</id><snippet>import contextlib
import selenium.webdriver as webdriver
import selenium.webdriver.support.ui as ui
with contextlib.closing(webdriver.Firefox()) as driver:
    driver.get('http://www.google.com')
    wait = ui.WebDriverWait(driver, 10) # timeout after 10 seconds
    inputElement = driver.find_element_by_name('q')
    inputElement.send_keys('python')
    inputElement.submit()
    results = wait.until(lambda driver: driver.find_elements_by_class_name('g'))
    for result in results:
        print(result.text)
        print('-'*80)
</snippet></ROW><ROW><id>16927552</id><snippet>wait.until</snippet></ROW><ROW><id>16927552</id><snippet>selenium.common.exceptions.TimeoutException</snippet></ROW><ROW><id>16927552</id><snippet>WebDriverWait</snippet></ROW><ROW><id>16927663</id><snippet>django.utils.formats</snippet></ROW><ROW><id>16927663</id><snippet>from django.utils import formats
date_format = get_format('DATE_FORMAT')
</snippet></ROW><ROW><id>16927663</id><snippet>get_format(format_type, lang=None, use_l10n=None)</snippet></ROW><ROW><id>16927663</id><snippet>use_l10n</snippet></ROW><ROW><id>16927663</id><snippet>settings.USE_L10N</snippet></ROW><ROW><id>16927663</id><snippet>lang</snippet></ROW><ROW><id>16927663</id><snippet>&gt;&gt;&gt; from django.utils import formats
&gt;&gt;&gt; formats.get_format('DATE_FORMAT')
'N j, Y'
&gt;&gt;&gt; formats.get_format('DATE_FORMAT', lang='de')
'j. F Y'
</snippet></ROW><ROW><id>16927663</id><snippet>get_format()</snippet></ROW><ROW><id>16927663</id><snippet>. strfdate()</snippet></ROW><ROW><id>16927663</id><snippet>Date</snippet></ROW><ROW><id>16927663</id><snippet>.strfdate()</snippet></ROW><ROW><id>16927939</id><snippet>qty</snippet></ROW><ROW><id>16927939</id><snippet>total_price</snippet></ROW><ROW><id>16927939</id><snippet>total_price = float(item['Item Price'][1:])
qty = float(item['Quantity'])
</snippet></ROW><ROW><id>16927939</id><snippet>int</snippet></ROW><ROW><id>16928053</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>16928126</id><snippet>list1 = ilist()</snippet></ROW><ROW><id>16928126</id><snippet>list2 = ilist</snippet></ROW><ROW><id>16928146</id><snippet>root</snippet></ROW><ROW><id>16928286</id><snippet>self.move_1(i)</snippet></ROW><ROW><id>16928286</id><snippet>self.c.after(1000, self.move_1, i) #note: no parentheses
</snippet></ROW><ROW><id>16928286</id><snippet>.after</snippet></ROW><ROW><id>16928286</id><snippet>self.move_1</snippet></ROW><ROW><id>16928286</id><snippet>def place_player_1(self,start_turn_pos_1,number):
    self.c.after(1000, self.move_1, start_turn_pos_1, number) # call in a sec

def move_1(self,i, limit):
    e1=streets_x[i]
    g1=streets_y[i]
    self.label_player1.place(x=e1,y=g1)
    if i &lt; limit: # schedule the next call
       self.c.after(1000, self.move_1, i + 1, limit)
</snippet></ROW><ROW><id>16928386</id><snippet>z = za.reshape(za.shape + (1,)*z0.ndim) + z0
</snippet></ROW><ROW><id>16928386</id><snippet>import numpy as np
z0 = np.ones((2, 3, 4, 5))
za = np.ones(6)

z = za.reshape(za.shape + (1,)*z0.ndim) + z0

print z.shape
# (6, 2, 3, 4, 5)
</snippet></ROW><ROW><id>16928430</id><snippet>doConfigSubmit()</snippet></ROW><ROW><id>16928430</id><snippet>jenkins_url/user/{username}/configSubmit</snippet></ROW><ROW><id>16928430</id><snippet>import urllib2, urllib
import json 

root = jenkins_url
username = username
user_url = root +'/user/{username}/api/json'.format(username=username)
config_url = root + '/user/{username}/configSubmit'.format(username=username)

d = json.loads((urllib2.urlopen(user_url).read()))

fullname = d['fullName']
description = d['description']
new_email = 'new_user_email'

post_d = {"userProperty1": {"address": new_email}}

request = urllib2.Request(config_url)
values = {'json': json.dumps(post_d),
          'fullName': fullname,
          'email.address': new_email,
          'description': description}

data = urllib.urlencode(values)

response = urllib2.urlopen(request, data).read()
</snippet></ROW><ROW><id>16928431</id><snippet>str.split()</snippet></ROW><ROW><id>16928431</id><snippet>output = [sub.split('\t') for sub in my_list]
</snippet></ROW><ROW><id>16928431</id><snippet>\</snippet></ROW><ROW><id>16928431</id><snippet>\t</snippet></ROW><ROW><id>16928431</id><snippet>&gt;&gt;&gt; my_list = ['1\tMelkor\tMorgoth\tSauronAtDolGoldul','2\tThingols\tHeirIsDior\tSilmaril','3\tArkenstone\tIsProbablyA\tSilmaril']
&gt;&gt;&gt; [sub.split('\t') for sub in my_list]
[['1', 'Melkor', 'Morgoth', 'SauronAtDolGoldul'], ['2', 'Thingols', 'HeirIsDior', 'Silmaril'], ['3', 'Arkenstone', 'IsProbablyA', 'Silmaril']]
</snippet></ROW><ROW><id>16928478</id><snippet>dtype</snippet></ROW><ROW><id>16928511</id><snippet>csv_data.next() #throw away first row
for row in csv_data:
    if len(row) &gt;= 10:
        cursor.execute("INSERT ..." ...)
</snippet></ROW><ROW><id>16928511</id><snippet>row</snippet></ROW><ROW><id>16928511</id><snippet>if len(row) &gt;= 10: #use first ten values in row, if there are at least ten
    cursor.execute("INSERT ...", row[:10])
</snippet></ROW><ROW><id>16928575</id><snippet>getDemos = picam.Picam_GetAvailableDemoCameraModels
getDemos.argtypes = [ctypes.POINTER(ctypes.POINTER(PicamCameraID)) , ctypes.POINTER(piint)]
mem = ctypes.POINTER(PicamCameraID)()
size = ctypes.c_int(0)
getDemos(ctypes.byref(mem), ctypes.byref(size))
print size.value
</snippet></ROW><ROW><id>16928624</id><snippet>import urllib,re
siteContent  = urllib.urlopen("http://site.com").read()
GetBoldWords = re.findall(r"&lt;b&gt;[\w\d ]+",siteContent)
print "Bold Words are :"
print getBoldWords
</snippet></ROW><ROW><id>16928624</id><snippet>(regular expression)</snippet></ROW><ROW><id>16928624</id><snippet>javascript</snippet></ROW><ROW><id>16928624</id><snippet>alert</snippet></ROW><ROW><id>16928624</id><snippet>javascript</snippet></ROW><ROW><id>16928624</id><snippet>Selenium</snippet></ROW><ROW><id>16928917</id><snippet>re.sub()</snippet></ROW><ROW><id>16928917</id><snippet>def linkify(match):
    link = match.group(1)
    http_link = link if re.match('https?://', link) else 'http://' + link
    return '&lt;a href="{}"&gt;{}&lt;/a&gt;'.format(http_link, link)

links = re.compile(r'(https?://[^\s]+|w{3}\.[^\s]+|[^\s]+\.[^\s]{2,})')
string = links.sub(linkify, string)
</snippet></ROW><ROW><id>16928917</id><snippet>http://firstlink.com</snippet></ROW><ROW><id>16928917</id><snippet>firstlink.com</snippet></ROW><ROW><id>16928917</id><snippet>&gt;&gt;&gt; string = 'firstlink.com and www.secondlink.com'
&gt;&gt;&gt; links.sub(linkify, string)
'&lt;a href="http://firstlink.com"&gt;firstlink.com&lt;/a&gt; and &lt;a href="http://www.secondlink.com"&gt;www.secondlink.com&lt;/a&gt;'
&gt;&gt;&gt; string = 'firstlink.com and http://firstlink.com'
&gt;&gt;&gt; links.sub(linkify, string)
'&lt;a href="http://firstlink.com"&gt;firstlink.com&lt;/a&gt; and &lt;a href="http://firstlink.com"&gt;http://firstlink.com&lt;/a&gt;'
</snippet></ROW><ROW><id>16929099</id><snippet>ES(server=[('http', 'localhost', 9200)])
</snippet></ROW><ROW><id>16929268</id><snippet>join</snippet></ROW><ROW><id>16929268</id><snippet>join</snippet></ROW><ROW><id>16929268</id><snippet>_MainThread._exitfunc</snippet></ROW><ROW><id>16929268</id><snippet>_MainThread._exitfunc</snippet></ROW><ROW><id>16929268</id><snippet>join</snippet></ROW><ROW><id>16929268</id><snippet>atexit</snippet></ROW><ROW><id>16929268</id><snippet>thread</snippet></ROW><ROW><id>16929268</id><snippet>_thread</snippet></ROW><ROW><id>16929268</id><snippet>Thread</snippet></ROW><ROW><id>16929268</id><snippet>threading</snippet></ROW><ROW><id>16929268</id><snippet>thread</snippet></ROW><ROW><id>16929268</id><snippet>_thread</snippet></ROW><ROW><id>16929268</id><snippet>join</snippet></ROW><ROW><id>16929268</id><snippet>__del__</snippet></ROW><ROW><id>16929268</id><snippet>flush</snippet></ROW><ROW><id>16929268</id><snippet>FILE*</snippet></ROW><ROW><id>16929268</id><snippet>close</snippet></ROW><ROW><id>16929268</id><snippet>__del__</snippet></ROW><ROW><id>16929268</id><snippet>with</snippet></ROW><ROW><id>16929268</id><snippet>atexit</snippet></ROW><ROW><id>16929282</id><snippet>xlist</snippet></ROW><ROW><id>16929282</id><snippet>In [38]: popt, pcov = curve_fit(func, array(xlist, dtype=float), ylist)

In [39]: popt
Out[39]: array([  7.83722896e-03,  -3.94023294e-05])
</snippet></ROW><ROW><id>16929282</id><snippet>xdata</snippet></ROW><ROW><id>16929282</id><snippet>a + b*x</snippet></ROW><ROW><id>16929282</id><snippet>x</snippet></ROW><ROW><id>16929282</id><snippet>b*x</snippet></ROW><ROW><id>16929282</id><snippet>func</snippet></ROW><ROW><id>16929282</id><snippet>xdata</snippet></ROW><ROW><id>16929282</id><snippet>func</snippet></ROW><ROW><id>16929282</id><snippet>def func(x, a, b):
    return a + b*np.asarray(x)
</snippet></ROW><ROW><id>16929374</id><snippet>myDic = {}
for list in lists:
  myDic[list[0]] = list[:]
</snippet></ROW><ROW><id>16929550</id><snippet>object.__getitem__(self, key)</snippet></ROW><ROW><id>16929550</id><snippet>self[key]</snippet></ROW><ROW><id>16929550</id><snippet>__getitem__</snippet></ROW><ROW><id>16929550</id><snippet>s[2]
</snippet></ROW><ROW><id>16929550</id><snippet>__getitem__</snippet></ROW><ROW><id>16929550</id><snippet>s.__geitem__(2)
</snippet></ROW><ROW><id>16929557</id><snippet>dict.update()</snippet></ROW><ROW><id>16929557</id><snippet>(key, value)</snippet></ROW><ROW><id>16929557</id><snippet>sub.BACKENDS.items()</snippet></ROW><ROW><id>16929557</id><snippet>val.enabled()</snippet></ROW><ROW><id>16929557</id><snippet>True</snippet></ROW><ROW><id>16929557</id><snippet>for key, value in sub.BACKENDS.items():
    if value.enabled():
        backends[key] = value
</snippet></ROW><ROW><id>16929557</id><snippet>dict.get()</snippet></ROW><ROW><id>16929557</id><snippet>lambda</snippet></ROW><ROW><id>16929557</id><snippet>BACKEND</snippet></ROW><ROW><id>16929557</id><snippet>name</snippet></ROW><ROW><id>16929557</id><snippet>.get()</snippet></ROW><ROW><id>16929557</id><snippet>&gt;&gt;&gt; def foo(): print 'bar'
... 
&gt;&gt;&gt; somedict = {'howdy': foo}
&gt;&gt;&gt; somedict['howdy']()
bar
&gt;&gt;&gt; somedict['howdy']
&lt;function foo at 0x109ab9320&gt;
&gt;&gt;&gt; somedict.get('non-existent', 'not found')
'not found'
&gt;&gt;&gt; somedict.get('howdy', 'not found')
&lt;function foo at 0x109ab9320&gt;
&gt;&gt;&gt; somedict.get('howdy', 'not found')()
bar
</snippet></ROW><ROW><id>16929557</id><snippet>()</snippet></ROW><ROW><id>16929557</id><snippet>.get()</snippet></ROW><ROW><id>16929557</id><snippet>.get()</snippet></ROW><ROW><id>16929557</id><snippet>def functionname()</snippet></ROW><ROW><id>16929557</id><snippet>&gt;&gt;&gt; somedict = {'howdy': lambda: 'bar'}
&gt;&gt;&gt; print somedict['howdy']()
bar
</snippet></ROW><ROW><id>16929729</id><snippet>fileLogger</snippet></ROW><ROW><id>16929729</id><snippet>consoleLogger</snippet></ROW><ROW><id>16929729</id><snippet>getLogger()</snippet></ROW><ROW><id>16929729</id><snippet>fileLogger</snippet></ROW><ROW><id>16929729</id><snippet>consoleLogger</snippet></ROW><ROW><id>16929729</id><snippet>LoggingInit</snippet></ROW><ROW><id>16929729</id><snippet>fileLogger</snippet></ROW><ROW><id>16929729</id><snippet>addHandler</snippet></ROW><ROW><id>16929729</id><snippet>print_screen=True</snippet></ROW><ROW><id>16929729</id><snippet>print_screen=False</snippet></ROW><ROW><id>16929729</id><snippet>getLogger()</snippet></ROW><ROW><id>16929729</id><snippet>"a &lt; b"</snippet></ROW><ROW><id>16929729</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>16929729</id><snippet>&lt;body&gt;</snippet></ROW><ROW><id>16929729</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>16929729</id><snippet>FileHandler</snippet></ROW><ROW><id>16929729</id><snippet>__init__</snippet></ROW><ROW><id>16929729</id><snippet>close</snippet></ROW><ROW><id>16929729</id><snippet>createLock</snippet></ROW><ROW><id>16929729</id><snippet>acquire</snippet></ROW><ROW><id>16929729</id><snippet>release</snippet></ROW><ROW><id>16929729</id><snippet>StreamHandler</snippet></ROW><ROW><id>16929729</id><snippet>FileHandler</snippet></ROW><ROW><id>16929729</id><snippet>logging.Handler</snippet></ROW><ROW><id>16929729</id><snippet>flush</snippet></ROW><ROW><id>16929729</id><snippet>close</snippet></ROW><ROW><id>16929729</id><snippet>StreamHandler.flush()</snippet></ROW><ROW><id>16929729</id><snippet>FileHandler.flush()</snippet></ROW><ROW><id>16929729</id><snippet>FileHandler.close()</snippet></ROW><ROW><id>16929729</id><snippet>StreamHandler.close()</snippet></ROW><ROW><id>16929729</id><snippet>close()</snippet></ROW><ROW><id>16929729</id><snippet>Handler</snippet></ROW><ROW><id>16929729</id><snippet>flush()</snippet></ROW><ROW><id>16929729</id><snippet>class ClosingStreamHandler(logging.StreamHandler):
    def close(self):
        self.flush()
        super().close()
</snippet></ROW><ROW><id>16929729</id><snippet>ClosingStreamHandler()</snippet></ROW><ROW><id>16929729</id><snippet>StreamHandler()</snippet></ROW><ROW><id>16929729</id><snippet>FileHandler</snippet></ROW><ROW><id>16929729</id><snippet>console_logging_level_switch</snippet></ROW><ROW><id>16929729</id><snippet>file_logging_level_switch</snippet></ROW><ROW><id>16929729</id><snippet>Logger.debug(msg)</snippet></ROW><ROW><id>16929729</id><snippet>Logger.log(DEBUG, msg)</snippet></ROW><ROW><id>16929729</id><snippet>debug</snippet></ROW><ROW><id>16929729</id><snippet>DEBUG</snippet></ROW><ROW><id>16929729</id><snippet>FileHandler</snippet></ROW><ROW><id>16929729</id><snippet>ConsoleHandler</snippet></ROW><ROW><id>16929729</id><snippet>console</snippet></ROW><ROW><id>16929729</id><snippet>'console' if print_screen else ''</snippet></ROW><ROW><id>16929729</id><snippet>WriteLog</snippet></ROW><ROW><id>16929729</id><snippet>WriteLog</snippet></ROW><ROW><id>16929782</id><snippet>os.walk</snippet></ROW><ROW><id>16929782</id><snippet>import os
for dirpath, dirnames, filenames in os.walk('.'):
    for f in filenames:
        print os.path.join(dirpath, f)
</snippet></ROW><ROW><id>16929782</id><snippet>for filename in (os.path.join(dp, f) for dp, dn, fn in os.walk('.') for f in fn):
    # do something with filename
</snippet></ROW><ROW><id>16929877</id><snippet>INITIALIZE</snippet></ROW><ROW><id>16929877</id><snippet> INITIALIZE = os.environ.get('DO_TERRIBLE_INITIALIZE', False)
 if INITIALIZE:
     ....
</snippet></ROW><ROW><id>16929877</id><snippet> export DO_TERRIBLE_INITIALIZE=ohgodwhy
</snippet></ROW><ROW><id>16930108</id><snippet>level = root.replace(startpath, '').count(os.sep)</snippet></ROW><ROW><id>16930108</id><snippet>print('{0}{1}/'.format(indent, os.path.basename(root)))</snippet></ROW><ROW><id>16930209</id><snippet>BLEND_RGBA_MULT</snippet></ROW><ROW><id>16930209</id><snippet>convert_alpha()</snippet></ROW><ROW><id>16930209</id><snippet>background = pygame.image.load("leaves.png").convert_alpha()
mask = pygame.image.load("mask-fuzzy.png").convert_alpha()
</snippet></ROW><ROW><id>16930209</id><snippet>masked = background.copy()
</snippet></ROW><ROW><id>16930209</id><snippet>BLEND_RGBA_MULT</snippet></ROW><ROW><id>16930209</id><snippet>masked.blit(mask, (0, 0), None, pygame.BLEND_RGBA_MULT)
</snippet></ROW><ROW><id>16930209</id><snippet>display.blit(masked, (0, 0))
</snippet></ROW><ROW><id>16930209</id><snippet>import pygame
from pygame.locals import *

pygame.init()
display = pygame.display.set_mode((320, 240))

background = pygame.image.load("leaves.png").convert_alpha()
mask = pygame.image.load("mask-fuzzy.png").convert_alpha()

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    # draw
    display.fill(Color(255, 0, 255))
    masked = background.copy()
    masked.blit(mask, (0, 0), None, pygame.BLEND_RGBA_MULT)
    display.blit(masked, (0, 0))
    pygame.display.flip()
</snippet></ROW><ROW><id>16930209</id><snippet>mask = pygame.Surface((320, 240), pygame.SRCALPHA)
for y in range(0, 240):
    for x in range(0, 320):
        if (x/16 + y/16) % 2 == 0:
            mask.set_at((x, y), Color("white"))
</snippet></ROW><ROW><id>16930241</id><snippet>text='dsads [QUOTE]test[/QUOTE]&lt;br&gt;&lt;br&gt;[URL=http://test.com]what[/URL] dsadkd [B]TEST[/B]'

def replacement(match):
  return "["+match.group(1).lower()+"]"

&gt;&gt;&gt; re.sub(r'\[(.*?)\]', replacement, text)
RESULT: 'dsads [quote]test[/quote]&lt;br&gt;&lt;br&gt;[url=http://test.com]what[/url] dsadkd [b]TEST[/b]'
</snippet></ROW><ROW><id>16930292</id><snippet>help(random.random)</snippet></ROW><ROW><id>16930292</id><snippet>random.random??</snippet></ROW><ROW><id>16930292</id><snippet>random() -&gt; x in the interval [0, 1).</snippet></ROW><ROW><id>16930292</id><snippet>random.randint</snippet></ROW><ROW><id>16930292</id><snippet>random.randrange</snippet></ROW><ROW><id>16930292</id><snippet>random.randint(-5,45)</snippet></ROW><ROW><id>16930440</id><snippet>audioop</snippet></ROW><ROW><id>16930440</id><snippet>import binascii

a = open('/Users/kyle/Desktop/untitled folder/unix commands.txt', 'r')
c = a.read()
b = bin(int(binascii.hexlify(c), 16))

sample_stream = []
high_note = (b'\xFF'*100 + b'\0'*100) * 50
low_note = (b'\xFF'*50 + b'\0'*50) * 100
for bit in b[2:]:
    if bit == '1':
        sample_stream.extend(high_note)
    else:
        sample_stream.extend(low_note)

sample_buffer = b''.join(sample_stream)

p = pyaudio.PyAudio()
stream = p.open(format=p.get_format_from_width(8),
                channels=1,
                rate=44100,
                output=True)
stream.write(sample_buffer)
</snippet></ROW><ROW><id>16930628</id><snippet>print</snippet></ROW><ROW><id>16930628</id><snippet>def description(self):
    print(self.name)
    print(self.age)
</snippet></ROW><ROW><id>16930679</id><snippet>continue</snippet></ROW><ROW><id>16930679</id><snippet>user_numberofwinners = float(re.findall(pattern5, user_delimiter)[0])

# if the number of winners is 0, go to the next row to avoid division by 0
if user_numberofwinners == 0.0 : continue;
</snippet></ROW><ROW><id>16930890</id><snippet>clubs</snippet></ROW><ROW><id>16930890</id><snippet># Instead of:
#dict_writer.writerow([unicode(s).encode("utf-8") for s in clubs])

# Do this:
for c in clubs:
    # Encode each field: name, address, ...
    for k in c.keys():
        c[k] = c[k].encode('utf-8').strip()

    # Write to file
    dict_writer.writerow(c)
</snippet></ROW><ROW><id>16930890</id><snippet>\n</snippet></ROW><ROW><id>16931362</id><snippet>ping</snippet></ROW><ROW><id>16931511</id><snippet>while</snippet></ROW><ROW><id>16931511</id><snippet>while</snippet></ROW><ROW><id>16931511</id><snippet>break</snippet></ROW><ROW><id>16931511</id><snippet>while</snippet></ROW><ROW><id>16931511</id><snippet>[x for x in {1,2,3} while x!=2]
</snippet></ROW><ROW><id>16931511</id><snippet>for</snippet></ROW><ROW><id>16931511</id><snippet>takewhile</snippet></ROW><ROW><id>16931511</id><snippet>dropwhile</snippet></ROW><ROW><id>16931511</id><snippet>[x for x in my_list from x != 'potato']
</snippet></ROW><ROW><id>16931511</id><snippet>for</snippet></ROW><ROW><id>16931511</id><snippet>my_list</snippet></ROW><ROW><id>16931592</id><snippet>def</snippet></ROW><ROW><id>16931592</id><snippet>is_alive = True</snippet></ROW><ROW><id>16931592</id><snippet>&gt;&gt;&gt; class Animal(object):
...     """Makes cute animals."""
...     is_alive = True
...     def __init__(self, name, age):
...         self.name = name
...         self.age = age
...     def description(self):
...         print(self.name)
...         print(self.age)
...
&gt;&gt;&gt; hippo = Animal("2312", 21)
&gt;&gt;&gt; hippo.description()
2312
21
</snippet></ROW><ROW><id>16931592</id><snippet>:</snippet></ROW><ROW><id>16931592</id><snippet>if 'a' == 'b':
    print('This will never print')
else:
    print('Of course a is not equal to b!')
</snippet></ROW><ROW><id>16931592</id><snippet>if 'a' == 'b':
print('This will never print')
else:
print('Of course a is not equal to b!')
</snippet></ROW><ROW><id>16931735</id><snippet>enumerate</snippet></ROW><ROW><id>16931735</id><snippet>&gt;&gt;&gt; gen = enumerate(['a','b','c','d'])
&gt;&gt;&gt; for i, line in gen:
...     print str(i) + ', ' + line
...     if (i == 1):
...         print 'saw 1'
...         print 'next: ' + gen.next()[1]
...
0, a
1, b
saw 1
next: c
3, d
</snippet></ROW><ROW><id>16931735</id><snippet>next</snippet></ROW><ROW><id>16931735</id><snippet>iter</snippet></ROW><ROW><id>16931735</id><snippet>iter</snippet></ROW><ROW><id>16931735</id><snippet>enumerate</snippet></ROW><ROW><id>16931735</id><snippet>&gt;&gt;&gt; gen = iter(enumerate(['a','b','c','d']))
</snippet></ROW><ROW><id>16931927</id><snippet>def roomSetup():
    roomsfile = "roomsfile.txt"
    infile = open(roomsfile, 'r')
    rooms = {}
    for line in infile:
        newroom = makeRooms(line)
        rooms[newroom.roomName] = newroom
    infile.close()
    return rooms
</snippet></ROW><ROW><id>16931927</id><snippet>exits = rooms['bedroom'].roomExits
</snippet></ROW><ROW><id>16932054</id><snippet>letter = 'X' if (strikeratecalc2 &gt;= 0.20 and strikeratecalc2 &lt; 0.30) else 'Y' if \
 (strikeratecalc2 &gt;=  0.30 and strikeratecalc2 &lt;  0.40) \
 else 'Z' if (strikeratecalc2 &gt;= 0.40 and strikeratecalc2 &lt; \
 0.50 and user_numberofselections &gt; 100) else 'ZA' if \
 (strikeratecalc2 &gt;= 0.50 and user_numberofselections  &gt; 100) \
 else 'Default value here'

print letter, 'Strike rate = ' ,strikeratecalc2, '%'
</snippet></ROW><ROW><id>16932131</id><snippet>findAll()</snippet></ROW><ROW><id>16932131</id><snippet>&gt;&gt;&gt; areatable = soup.find('table',{'id':'codes'})
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; def chunks(l, n):
...     return [l[i:i+n] for i in range(0, len(l), n)]
&gt;&gt;&gt; dict(chunks([i.text for i in areatable.findAll('td')], 2))
{u'Chunan': u'36', u'Penghu': u'69', u'Wufeng': u'4', u'Fengyuan': u'4', u'Kaohsiung': u'7', u'Changhua': u'47', u'Pingtung': u'8', u'Keelung': u'2', u'Hsinying': u'66', u'Chungli': u'34', u'Suao': u'39', u'Yuanlin': u'48', u'Yungching': u'48', u'Panchiao': u'2', u'Taipei': u'2', u'Tainan': u'62', u'Peikang': u'5', u'Taichung': u'4', u'Yungho': u'2', u'Hsinchu': u'35', u'Tsoying': u'7', u'Hualien': u'38', u'Lukang': u'47', u'Talin': u'5', u'Chiaochi': u'39', u'Fengshan': u'7', u'Sanchung': u'2', u'Tungkang': u'88', u'Taoyuan': u'33', u'Hukou': u'36'}
</snippet></ROW><ROW><id>16932131</id><snippet>.find()</snippet></ROW><ROW><id>16932131</id><snippet>codes</snippet></ROW><ROW><id>16932131</id><snippet>chunks</snippet></ROW><ROW><id>16932131</id><snippet>findAll</snippet></ROW><ROW><id>16932131</id><snippet>[[u'Changhua', u'47'], [u'Keelung', u'2'], etc]
</snippet></ROW><ROW><id>16932131</id><snippet>i.text for i in...</snippet></ROW><ROW><id>16932131</id><snippet>td</snippet></ROW><ROW><id>16932131</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>16932131</id><snippet>&lt;/td&gt;</snippet></ROW><ROW><id>16932131</id><snippet>dict()</snippet></ROW><ROW><id>16932331</id><snippet>uploaded</snippet></ROW><ROW><id>16933079</id><snippet>every 10 minutes from 07:00 to 23:00</snippet></ROW><ROW><id>16933079</id><snippet>every mon,tue,wed,thu,fri 07:00</snippet></ROW><ROW><id>16933079</id><snippet>every 10 minutes from 08:00 to 16:00</snippet></ROW><ROW><id>16933518</id><snippet>import win32com.client
import sys # &lt;- obsolete not used
import os
import glob # style guide one import per line


Application = win32com.client.Dispatch("PowerPoint.Application")
Application.Visible = True

ppt_files = glob.glob('*.ppt')

for file in ppt_files:
    file = os.path.abspath(file)
    Presentation = Application.Presentations.Open(file)
    for Slide in Presentation.Slides:
        for Shape in Slide.Shapes:
            try:
                Shape.TextFrame.TextRange.Font.Name = "Arial"
                Shape.TextFrame.TextRange.Font.Size = "12"
                Shape.TextFrame.TextRange.Font.Color.RGB = "000000"
            except:
                pass
    Presentation.Save()
    Presentation.Close()

Application.Quit()
</snippet></ROW><ROW><id>16933624</id><snippet>SyntaxError</snippet></ROW><ROW><id>16933624</id><snippet>def fun1(a="who is you", b="True", x, y):
...     print a,b,x,y
</snippet></ROW><ROW><id>16933624</id><snippet>func1("ok a", "ok b", 1)  # Is 1 assigned to x or ?
func1(1)                  # Is 1 assigned to a or ?
func1(1, 2)               # ?
</snippet></ROW><ROW><id>16933624</id><snippet>&gt;&gt;&gt; def fun1(x, y, a="who is you", b="True"):
...     print a,b,x,y
... 
</snippet></ROW><ROW><id>16933729</id><snippet>requests</snippet></ROW><ROW><id>16933729</id><snippet>r = requests.get(url, stream=True)
ET.parse(r.raw)
</snippet></ROW><ROW><id>16933729</id><snippet>.raw</snippet></ROW><ROW><id>16933729</id><snippet>ElementTree.parse()</snippet></ROW><ROW><id>16933729</id><snippet>urllib2</snippet></ROW><ROW><id>16933729</id><snippet>&gt;&gt;&gt; r = requests.get('http://www.enetpulse.com/wp-content/uploads/sample_xml_feed_enetpulse_soccer.xml', stream=True)
&gt;&gt;&gt; tree = ET.parse(r.raw)
&gt;&gt;&gt; tree
&lt;xml.etree.ElementTree.ElementTree object at 0x109dadc50&gt;
&gt;&gt;&gt; tree.getroot().tag
'spocosy'
</snippet></ROW><ROW><id>16933729</id><snippet>urllib2</snippet></ROW><ROW><id>16933729</id><snippet>ET.fromstring()</snippet></ROW><ROW><id>16933729</id><snippet>r = requests.get(url)
ET.fromstring(r.content)
</snippet></ROW><ROW><id>16933971</id><snippet>def start_av(t):
  if t == 0: return 0, 0
  acc, vel = start_av(t-1)
  thr = 10
  c = -0.1
  fric = c*vel
  acc = thr + fric
  return (acc, vel + acc)

def given_av(t, acc=0, vel=0):
  if t == 0: return acc, vel
  thr = 10
  c = -0.1
  fric = c*vel
  acc = thr + fric
  return given_av(t-1, acc, vel + acc)    

print start_av(10)
print given_av(10)
</snippet></ROW><ROW><id>16934271</id><snippet>myObjects.objects.filter(Q(a = 1) | Q( a = 2) | Q( a = 3))
</snippet></ROW><ROW><id>16934271</id><snippet>myObjects.objects.filter(Q(a__in=[1,2,3])
</snippet></ROW><ROW><id>16934486</id><snippet>csv</snippet></ROW><ROW><id>16934486</id><snippet>import csv

with open('test.txt','rb') as myfile:
    mylist = list(csv.reader(myfile, delimiter='|'))
</snippet></ROW><ROW><id>16934486</id><snippet>with open('test.txt','r') as myfile:
    mylist = [line.strip().split('|') for line in myfile]
</snippet></ROW><ROW><id>16934486</id><snippet>&gt;&gt;&gt; with open('test.txt','rb') as myfile:
...     mylist = list(csv.reader(myfile, delimiter='|'))
... 
&gt;&gt;&gt; mylist
[['a', 'b', 'c', 'd'], ['a1', 'b1', 'c1', 'd1'], ['a2', 'b2', 'c2', 'd2'], ['a3', 'b3', 'c3', 'd3']]
&gt;&gt;&gt; with open('test.txt','r') as myfile:
...     mylist = [line.strip().split('|') for line in myfile]
... 
&gt;&gt;&gt; mylist
[['a', 'b', 'c', 'd'], ['a1', 'b1', 'c1', 'd1'], ['a2', 'b2', 'c2', 'd2'], ['a3', 'b3', 'c3', 'd3']]
</snippet></ROW><ROW><id>16935330</id><snippet>self.__template</snippet></ROW><ROW><id>16935330</id><snippet>self.__template_list</snippet></ROW><ROW><id>16935330</id><snippet>self.__answer</snippet></ROW><ROW><id>16935330</id><snippet>__str__()</snippet></ROW><ROW><id>16935330</id><snippet>__init__()</snippet></ROW><ROW><id>16935330</id><snippet>__str__()</snippet></ROW><ROW><id>16935330</id><snippet>dir()</snippet></ROW><ROW><id>16935330</id><snippet>class Grid:
    '''The grid for the soduku game.'''

    def __init__(self, puzzle):
        '''Constructs the soduku puzzle from the file.'''

        self.grid = []

        with open(puzzle, "r") as f:
            for line in f:
                # strip CR/LF, replace . by space, make a list of chars
                self.grid.append([" " if char in " ." else char for char in line.rstrip("\r\n")])

    def __str__(self):
        '''Prints the soduku puzzle nicely.'''

        lines = []

        for i, row in enumerate(self.grid):
            if i != 0 and i % 3 == 0:
                # add a separator every 3 lines
                lines.append("+".join(["-" * 3] * 3))

            # add a separator every 3 chars
            line = "|".join(map("".join, zip(*([iter(row)] * 3))))
            lines.append(line)

        lines.append("")

        return "\n".join(lines)
</snippet></ROW><ROW><id>16935330</id><snippet>self.grid</snippet></ROW><ROW><id>16935397</id><snippet>class FiniteField11:
   def __init__(self, element):
       self.elt = element
FiniteField11.generator = FiniteField11(2)
</snippet></ROW><ROW><id>16935397</id><snippet>FiniteField11</snippet></ROW><ROW><id>16935408</id><snippet>sudo("python test.py  2&gt;/dev/null &gt;/dev/null &amp;")</snippet></ROW><ROW><id>16935412</id><snippet>../dirDinA</snippet></ROW><ROW><id>16935412</id><snippet>os.mkdir("../dirDinA/anotherDir")
</snippet></ROW><ROW><id>16935412</id><snippet>OSError: No such file or directory</snippet></ROW><ROW><id>16935412</id><snippet>os.mkdir("../dirDinA")
os.mkdir("../dirDinA/anotherDir")
</snippet></ROW><ROW><id>16935412</id><snippet>../dirDinA</snippet></ROW><ROW><id>16935412</id><snippet>anotherDir</snippet></ROW><ROW><id>16935414</id><snippet>.append()</snippet></ROW><ROW><id>16935414</id><snippet>None</snippet></ROW><ROW><id>16935414</id><snippet>dict.setdefault()</snippet></ROW><ROW><id>16935414</id><snippet>&gt;&gt;&gt; hash = {}
&gt;&gt;&gt; hash.setdefault('a', []).append('A')
&gt;&gt;&gt; hash
{'a': ['A']}
</snippet></ROW><ROW><id>16935414</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>16935414</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; hash = defaultdict(list)
&gt;&gt;&gt; hash['a'].append('A')
&gt;&gt;&gt; hash
defaultdict(&lt;type 'list'&gt;, {'a': ['A']})
</snippet></ROW><ROW><id>16935414</id><snippet>lst = lst + ['val']
</snippet></ROW><ROW><id>16935487</id><snippet>file_list = os.listdir(trainDir)
file_list.sort(key=lambda s: int(os.path.splitext(s)[0]))
</snippet></ROW><ROW><id>16935487</id><snippet>img = imread("%d.EXT" % i)
</snippet></ROW><ROW><id>16935487</id><snippet>EXT</snippet></ROW><ROW><id>16935487</id><snippet>jpg</snippet></ROW><ROW><id>16935525</id><snippet>starts-with</snippet></ROW><ROW><id>16935525</id><snippet>@id</snippet></ROW><ROW><id>16935525</id><snippet>-</snippet></ROW><ROW><id>16935525</id><snippet>id</snippet></ROW><ROW><id>16935525</id><snippet>post--</snippet></ROW><ROW><id>16936010</id><snippet>from itertools import chain
def my_range(*args):
    args = map(int,args)                                                               
    if len(args) == 1:
        return args
    return range(args[0], args[1]+1)

def func(strs):
    return list(chain.from_iterable(my_range(*x.split('-')) for x in strs.split(', ')))
strs = "1, 3-4, 7-9"
print func(strs)
#[1, 3, 4, 7, 8, 9]
</snippet></ROW><ROW><id>16936254</id><snippet>place</snippet></ROW><ROW><id>16936254</id><snippet>address</snippet></ROW><ROW><id>16936254</id><snippet>yield</snippet></ROW><ROW><id>16936254</id><snippet>return</snippet></ROW><ROW><id>16936254</id><snippet>return pd.DataFrame([{'address_ property': place.cssselect("li a")[0].text,
                      'house_type': place.cssselect("li")[1].text,
                      'house_sell_price': place.cssselect("li")[2].text,
                      'house_sell_date': place.cssselect("li")[3].text}
                          for place in address],
                    index=address)
</snippet></ROW><ROW><id>16936709</id><snippet>%timeit</snippet></ROW><ROW><id>16936709</id><snippet>%timeit</snippet></ROW><ROW><id>16936709</id><snippet>%timeit</snippet></ROW><ROW><id>16936992</id><snippet>register_adapter</snippet></ROW><ROW><id>16936992</id><snippet>register_converter</snippet></ROW><ROW><id>16936992</id><snippet>sqlite3.register_adapter(bool, int)
sqlite3.register_converter("BOOLEAN", lambda v: bool(int(v)))
</snippet></ROW><ROW><id>16936992</id><snippet>0</snippet></ROW><ROW><id>16936992</id><snippet>sqlite3.register_converter("BOOLEAN", lambda v: v != '0')
</snippet></ROW><ROW><id>16936992</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; db = sqlite3.connect(':memory:', detect_types=sqlite3.PARSE_DECLTYPES)
&gt;&gt;&gt; sqlite3.register_adapter(bool, int)
&gt;&gt;&gt; sqlite3.register_converter("BOOLEAN", lambda v: bool(int(v)))
&gt;&gt;&gt; db.execute('CREATE TABLE foo (bar BOOLEAN)')
&lt;sqlite3.Cursor object at 0x10a17a340&gt;
&gt;&gt;&gt; db.execute('INSERT INTO foo VALUES (?)', (True,))
&lt;sqlite3.Cursor object at 0x10a17a3b0&gt;
&gt;&gt;&gt; db.execute('INSERT INTO foo VALUES (?)', (False,))
&lt;sqlite3.Cursor object at 0x10a17a340&gt;
&gt;&gt;&gt; for row in db.execute('SELECT * FROM foo'):
...     print row
... 
(True,)
(False,)
</snippet></ROW><ROW><id>16937198</id><snippet>df = robjects.DataFrame(obs[0])
for ob in obs[1:]:
    df = df.rbind(robjects.DataFrame(ob))
</snippet></ROW><ROW><id>16937293</id><snippet>collections.Counter</snippet></ROW><ROW><id>16937671</id><snippet>.tar.gz</snippet></ROW><ROW><id>16937671</id><snippet>.tar.gz</snippet></ROW><ROW><id>16937671</id><snippet>tar</snippet></ROW><ROW><id>16937671</id><snippet>.tar</snippet></ROW><ROW><id>16937671</id><snippet>gzip</snippet></ROW><ROW><id>16937671</id><snippet>.tar</snippet></ROW><ROW><id>16937671</id><snippet>tar</snippet></ROW><ROW><id>16937671</id><snippet>tar</snippet></ROW><ROW><id>16937671</id><snippet>lseek()</snippet></ROW><ROW><id>16937671</id><snippet>gzip</snippet></ROW><ROW><id>16937671</id><snippet>.tar</snippet></ROW><ROW><id>16937671</id><snippet>.tar.bz2</snippet></ROW><ROW><id>16937671</id><snippet>.tar.xz</snippet></ROW><ROW><id>16937671</id><snippet>zip</snippet></ROW><ROW><id>16937671</id><snippet>zip</snippet></ROW><ROW><id>16937671</id><snippet>.tar.gz</snippet></ROW><ROW><id>16937671</id><snippet>.tar.gz</snippet></ROW><ROW><id>16937800</id><snippet>#include &lt;frameobject.h&gt;

static PyObject* get_caller_info(PyObject *self, PyObject *args) {
    PyCodeObject* code = PyEval_GetFrame()-&gt;f_code;
    return Py_BuildValue("(OO)", code-&gt;co_filename, code-&gt;co_name)
}
</snippet></ROW><ROW><id>16937800</id><snippet>import traceback

def get_caller_info():
    filename, _, function_name, _ = traceback.extract_stack(limit=2)[1]
    return filename, function_name
</snippet></ROW><ROW><id>16937800</id><snippet>&lt;lambda&gt;</snippet></ROW><ROW><id>16937800</id><snippet>_filename_to_module = {os.path.realpath(module.__file__): module
                       for module in sys.modules.itervalues()
                       if hasattr(module, '__file__')}
module = _filename_to_module.get(filename)
if module is None:
    # refresh the cache and retry
</snippet></ROW><ROW><id>16937916</id><snippet>Series</snippet></ROW><ROW><id>16937916</id><snippet>pd.Series(df['author_id'].unique()).apply(some_function)
</snippet></ROW><ROW><id>16938485</id><snippet>import time

l = [1,2,4,5,3]

print "Run 1"
t1 = time.time()
print "Min =", min(l)
print "Max =", max(l)
print "time =", time.time() - t1
print ""
print "l =", l
print ""


l = [1,2,4,5,3]
l1 = list(l)

print "Run 2"
t1 = time.time()
l1.sort()
print "Min =", l1[0]
print "Max =", l1[-1]
print "time =", time.time() - t1
print ""
print "l =", l
print "l1 =", l1
print ""


l = [1,2,4,5,3]

print "Run 3"
minimum = float('inf')
maximum = float('-inf')
for item in l:
    if item &lt; minimum:
        minimum = item
    if item &gt; maximum:
        maximum = item
print "Min =", minimum
print "Max =", maximum
print "time =", time.time() - t1
print ""
print "l =", l
</snippet></ROW><ROW><id>16938485</id><snippet>import timeit
from random import shuffle

l = range(10000)
shuffle(l)

def Run_1():
    #print "Min =", min(l)
    #print "Max =", max(l)
    return min(l), max(l)

def Run_2():
    l1 = list(l)
    l1.sort()
    #print "Min =", l1[0]
    #print "Max =", l1[-1]
    return l1[0], l1[-1]


def Run_3():
    minimum = float('inf')
    maximum = float('-inf')
    for item in l:
        if item &lt; minimum:
            minimum = item
        if item &gt; maximum:
            maximum = item
    #print "Min =", minimum
    #print "Max =", maximum
    return minimum, maximum


if __name__ == '__main__':
    num_runs = 10000
    print "Run 1"
    run1 = timeit.Timer(Run_1)
    time_run1 = run1.repeat(3, num_runs)
    print ""
    print "Run 2"
    run2 = timeit.Timer(Run_2)
    time_run2 = run2.repeat(3,num_runs)
    print ""
    print "Run 3"
    run3 = timeit.Timer(Run_3)
    time_run3 = run3.repeat(3,num_runs)
    print ""

    print "Run 1"
    for each_time in time_run1:
        print "time =", each_time
    print ""
    print "Run 2"
    for each_time in time_run2:
        print "time =", each_time
    print ""
    print "Run 3"
    for each_time in time_run3:
        print "time =", each_time
    print ""
</snippet></ROW><ROW><id>16938874</id><snippet>&gt;&gt;&gt; L = "09807754 18 n 03 aristocrat 0 blue_blood 0 patrician".split()
&gt;&gt;&gt; L[0], L[4::2]
('09807754', ['aristocrat', 'blue_blood', 'patrician'])

&gt;&gt;&gt; D = {}
&gt;&gt;&gt; D.update({L[0]: L[4::2]})
&gt;&gt;&gt; D
{'09807754': ['aristocrat', 'blue_blood', 'patrician']}
</snippet></ROW><ROW><id>16938874</id><snippet>&gt;&gt;&gt; L = "09827177 18 n 03 aristocrat 0 blue_blood 0 patrician 0 013 @ 09646208 n 0000".split()
&gt;&gt;&gt; D.update({L[0]: L[4:4 + 2 * int(L[3]):2]})
&gt;&gt;&gt; D
{'09807754': ['aristocrat', 'blue_blood', 'patrician'], '09827177': ['aristocrat', 'blue_blood', 'patrician']}
</snippet></ROW><ROW><id>16939016</id><snippet>a:rPr</snippet></ROW><ROW><id>16939016</id><snippet>test.xml</snippet></ROW><ROW><id>16939016</id><snippet>&lt;body xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"
      xmlns:p="http://schemas.openxmlformats.org/presentationml/2006/main"&gt;
    &lt;a:p&gt;
        -
        &lt;a:pPr lvl="2"&gt;
            -
            &lt;a:spcBef&gt;
                &lt;a:spcPts val="200"/&gt;
            &lt;/a:spcBef&gt;
        &lt;/a:pPr&gt;
        -
        &lt;a:r&gt;
            &lt;a:rPr lang="en-US" sz="1400" dirty="0" smtClean="0"/&gt;
            &lt;a:t&gt;The&lt;/a:t&gt;
        &lt;/a:r&gt;
        -
        &lt;a:r&gt;
            &lt;a:rPr lang="en-US" sz="1400" dirty="0"/&gt;
            &lt;a:t&gt;world&lt;/a:t&gt;
        &lt;/a:r&gt;
        -
        &lt;a:r&gt;
            &lt;a:rPr lang="en-US" sz="1400" dirty="0" smtClean="0"/&gt;
            &lt;a:t&gt;is small&lt;/a:t&gt;
        &lt;/a:r&gt;
    &lt;/a:p&gt;
    &lt;a:p&gt;
        -
        &lt;a:pPr lvl="2"&gt;
            -
            &lt;a:spcBef&gt;
                &lt;a:spcPts val="200"/&gt;
            &lt;/a:spcBef&gt;
        &lt;/a:pPr&gt;
        -
        &lt;a:r&gt;
            &lt;a:rPr lang="en-US" sz="1400" dirty="0" smtClean="0" b="0"/&gt;
            &lt;a:t&gt;The&lt;/a:t&gt;
        &lt;/a:r&gt;
        -
        &lt;a:r&gt;
            &lt;a:rPr lang="en-US" sz="1400" dirty="0" b="0"/&gt;
            &lt;a:t&gt;world&lt;/a:t&gt;
        &lt;/a:r&gt;
        -
        &lt;a:r&gt;
            &lt;a:rPr lang="en-US" sz="1400" dirty="0" smtClean="0" b="0"/&gt;
            &lt;a:t&gt;is too big&lt;/a:t&gt;
        &lt;/a:r&gt;
    &lt;/a:p&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>16939016</id><snippet>test.py</snippet></ROW><ROW><id>16939016</id><snippet>from lxml import etree


tree = etree.parse('test.xml')
NAMESPACES = {'p': 'http://schemas.openxmlformats.org/presentationml/2006/main',
              'a': 'http://schemas.openxmlformats.org/drawingml/2006/main'}

path = tree.xpath('/body/a:p', namespaces=NAMESPACES)

for outer_item in path:
    parts = []
    for item in outer_item.xpath('./a:r/a:rPr', namespaces=NAMESPACES):
        parts.append(item.getparent().xpath('./a:t/text()', namespaces=NAMESPACES)[0])

    print " ".join(parts)
</snippet></ROW><ROW><id>16939016</id><snippet>a:p</snippet></ROW><ROW><id>16939016</id><snippet>parts</snippet></ROW><ROW><id>16939016</id><snippet>a:p</snippet></ROW><ROW><id>16939538</id><snippet>set.update</snippet></ROW><ROW><id>16939538</id><snippet>set.union</snippet></ROW><ROW><id>16939538</id><snippet>&gt;&gt;&gt; s = set(range(3))
&gt;&gt;&gt; s.update(range(4))
&gt;&gt;&gt; s
set([0, 1, 2, 3])
</snippet></ROW><ROW><id>16939538</id><snippet>masterSet = set()
for setA in iterable:
    masterSet = masterSet.union(setA)
</snippet></ROW><ROW><id>16939538</id><snippet>masterSet = set().union(*iterable)
</snippet></ROW><ROW><id>16939577</id><snippet>import scipy
from scipy import ndimage
import matplotlib.pyplot as plt

fname='index.png'
blur_radius = 1.0
threshold = 50

img = scipy.misc.imread(fname) # gray-scale image
print(img.shape)

# smooth the image (to remove small objects)
imgf = ndimage.gaussian_filter(img, blur_radius)
threshold = 50

# find connected components
labeled, nr_objects = ndimage.label(imgf &gt; threshold) 
print "Number of objects is %d " % nr_objects

plt.imsave('/tmp/out.png', labeled)
plt.imshow(labeled)

plt.show()
</snippet></ROW><ROW><id>16939577</id><snippet>blur_radius = 1.0</snippet></ROW><ROW><id>16939577</id><snippet>blur_radius = 0.5</snippet></ROW><ROW><id>16939619</id><snippet>stringIO</snippet></ROW><ROW><id>16939619</id><snippet>file1 = io.StringIO("""Salt, William (old user)
Wilds, Tony
Smith, William (Old User)
JONES,Steven (Old User)""")

file2 = io.StringIO("""Salt, Bill
Wilds, Tony (SALES)
Smith,Will (OLD USER)
JONES,STEVEN (ACCOUNTS)""")
</snippet></ROW><ROW><id>16939619</id><snippet>def read_file(fobj):
    names = set()
    for line in fobj:
        split_line = line.lower().split(',')
        names.add((split_line[0], split_line[1].split()[0]))
    return names
</snippet></ROW><ROW><id>16939619</id><snippet>data1 = read_file(file1)
data2 = read_file(file2)
</snippet></ROW><ROW><id>16939619</id><snippet>data1.intersection(data2)
</snippet></ROW><ROW><id>16939619</id><snippet>set([('wilds', 'tony'), ('jones', 'steven')])
</snippet></ROW><ROW><id>16939726</id><snippet>var bindMultiselects = function () {
    $(".multiselect").multiselect();
};

$(function() {
    bindMultiselects();
    // any other page load code, etc.
});
</snippet></ROW><ROW><id>16939726</id><snippet>function inline_modal_form(href, data) {
    url = '.';
    modal_link = '#' + String(href);
    $(modal_link).load(url, data, bindMultiselects);
}
</snippet></ROW><ROW><id>16939726</id><snippet>".multiselect"</snippet></ROW><ROW><id>16939971</id><snippet>Sources</snippet></ROW><ROW><id>16939971</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16939984</id><snippet>from collections import OrderedDict
lis =  [['a','x','y',2], ['b','xx','yy',2], ['c','xxx','yyy',3],['a','yx','yx',2]]
dic = OrderedDict()
for x in lis:
   key = (x[0],x[-1])
   if key not in dic:
      dic[key] = x[1:-1]
   else:
      val =  dic[key]
      dic[key] = [a+b for a,b in zip(val,x[1:-1])]

print [[k[0]] + v + [k[1]] for k,v in dic.items()]
</snippet></ROW><ROW><id>16939984</id><snippet>[['a', 'xyx', 'yyx', 2], ['b', 'xx', 'yy', 2], ['c', 'xxx', 'yyy', 3]]
</snippet></ROW><ROW><id>16940351</id><snippet>tuple(i for i in (1, 2, 3))
</snippet></ROW><ROW><id>16940365</id><snippet>from Tkinter import *
import sys
master = Tk()    
def callback():
    master.destroy()
    sys.exit()    
b = Button(master, text="Click to close", command=callback)
b.pack()    
mainloop()
</snippet></ROW><ROW><id>16940834</id><snippet>exec()</snippet></ROW><ROW><id>16940834</id><snippet>eval()</snippet></ROW><ROW><id>16940834</id><snippet>#define</snippet></ROW><ROW><id>16940834</id><snippet>#define foo 1
#if foo == 1
this line is true!
#endif
#define foo 0
</snippet></ROW><ROW><id>16940834</id><snippet>#include</snippet></ROW><ROW><id>16940834</id><snippet># ... file opening not shown ...

for line in file:
    includematch = re.match("#include\\s+\\"(.*)\\"", line)
    if match:
        # deal with an include statement by calling a function to process it
        read_file(includematch.group(1), definedict)

    definematch = re.match("#define\\s+(\\w+)\\s+(.*)")
    if definematch:
        # deal with define statements by saving it in a dict
        definedict[match.group(1)] = definedict[match.group(2)]

    #....
</snippet></ROW><ROW><id>16941004</id><snippet>mask = np.ones(a.shape,dtype=bool) #np.ones_like(a,dtype=bool)
mask[indices] = False
a[~mask] = 999
a[mask] = 888
</snippet></ROW><ROW><id>16941004</id><snippet>dtype=np.bool_</snippet></ROW><ROW><id>16941101</id><snippet>def per_section(it):
    section = []
    for line in it:
        if line.strip():
            section.append(line)
        else:
            yield ''.join(section)
            section = []
    # yield any remaining lines as a section too
    if section:
       yield ''.join(section)
</snippet></ROW><ROW><id>16941101</id><snippet>with open(sectionedfile, 'r') as inputfile:
    for section in per_section(inputfile):
        print section
</snippet></ROW><ROW><id>16941218</id><snippet>def correct_value(selection=None):
     if selection is None:  # note that You should check this before  
                            # You wil check whether it is list or not
        objs = cmds.ls ('*_control')    
        return objs

    if not isinstance(selection, list):
        selection = [selection]
        objs = selection
        return objs
</snippet></ROW><ROW><id>16941542</id><snippet>val = something['fieldname']
</snippet></ROW><ROW><id>16941626</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; id(1)
4297261152
&gt;&gt;&gt; a += 1
&gt;&gt;&gt; id(a)
4297261184
</snippet></ROW><ROW><id>16941626</id><snippet>id</snippet></ROW><ROW><id>16941626</id><snippet>&gt;&gt;&gt; arr = np.arange(5)
&gt;&gt;&gt; d(arr)
4331954736
&gt;&gt;&gt; arr += 10
&gt;&gt;&gt; id(arr)
4331954736
&gt;&gt;&gt; arr
array([10, 11, 12, 13, 14])
</snippet></ROW><ROW><id>16941626</id><snippet>id</snippet></ROW><ROW><id>16941626</id><snippet>a = test.get_attr1()</snippet></ROW><ROW><id>16941626</id><snippet>a = test.attribute2</snippet></ROW><ROW><id>16941626</id><snippet>a</snippet></ROW><ROW><id>16941626</id><snippet>a</snippet></ROW><ROW><id>16941626</id><snippet>a = 1</snippet></ROW><ROW><id>16941626</id><snippet>a = test.get_attr1()</snippet></ROW><ROW><id>16941626</id><snippet>a</snippet></ROW><ROW><id>16941626</id><snippet>+=</snippet></ROW><ROW><id>16941626</id><snippet>copy</snippet></ROW><ROW><id>16941626</id><snippet>&gt;&gt;&gt; arr2  = arr.copy()
&gt;&gt;&gt; arr
array([10, 11, 12, 13, 14])
&gt;&gt;&gt; arr2 += 100
&gt;&gt;&gt; arr2
array([110, 111, 112, 113, 114])
&gt;&gt;&gt;  arr
array([10, 11, 12, 13, 14]) 
</snippet></ROW><ROW><id>16941648</id><snippet>print g2.node_labels
{'a': 0, 'b': 1}
</snippet></ROW><ROW><id>16941815</id><snippet>filter</snippet></ROW><ROW><id>16941815</id><snippet>scipy.signal.lfilter</snippet></ROW><ROW><id>16941815</id><snippet>data</snippet></ROW><ROW><id>16941815</id><snippet>lfilter</snippet></ROW><ROW><id>16941815</id><snippet>axis=-1</snippet></ROW><ROW><id>16941815</id><snippet>out = lfilter(b, a, data, axis=0)
out = lfilter(b, a, np.squeeze(data))
</snippet></ROW><ROW><id>16941815</id><snippet>[ 0.09505519
 -0.08298293
 -0.180851
 -0.09045846
 -0.00479434
 -0.04911579
  0.1836602
 -0.06142895
  0.18555065
 -0.07059774
 -0.04452408
 -0.19503684
  0.08298322
 -0.13317581
  0.49901232]
</snippet></ROW><ROW><id>16942144</id><snippet>customer_country_code</snippet></ROW><ROW><id>16942144</id><snippet>from scrapy.http import Request
from scrapy.selector import HtmlXPathSelector
from scrapy.spider import BaseSpider


class ExampleSpider(BaseSpider):
    name = 'example'
    allowed_domains = ['jadopado.com']

    def start_requests(self):
        yield Request(url='http://jadopado.com/', cookies={'customer_country_code': 'AE'})

    def parse(self, response):
        hxs = HtmlXPathSelector(response)

        print hxs.select("//div[@class='country_code']/text()").extract()[0]
</snippet></ROW><ROW><id>16942297</id><snippet>np.array([])</snippet></ROW><ROW><id>16942297</id><snippet>hstack</snippet></ROW><ROW><id>16942297</id><snippet>In [11]: a = array([], dtype=int)

In [12]: b = array([10, 20])

In [13]: c = array([30, 40])

In [14]: a = hstack((a,b))

In [15]: a
Out[15]: array([10, 20])

In [16]: a = hstack((a,c))

In [17]: a
Out[17]: array([10, 20, 30, 40])
</snippet></ROW><ROW><id>16942297</id><snippet>vstack</snippet></ROW><ROW><id>16942297</id><snippet>a</snippet></ROW><ROW><id>16942297</id><snippet>In [22]: a = array([], dtype=int).reshape(-1,2)

In [23]: a
Out[23]: array([], shape=(0, 2), dtype=int64)

In [24]: b
Out[24]: array([10, 20])

In [25]: c
Out[25]: array([30, 40])

In [26]: a = vstack((a,b))

In [27]: a
Out[27]: array([[10, 20]])

In [28]: a = vstack((a,c))

In [29]: a
Out[29]: 
array([[10, 20],
       [30, 40]])
</snippet></ROW><ROW><id>16942297</id><snippet>dtype=int</snippet></ROW><ROW><id>16942297</id><snippet>a</snippet></ROW><ROW><id>16942297</id><snippet>float</snippet></ROW><ROW><id>16942297</id><snippet>a</snippet></ROW><ROW><id>16942297</id><snippet>hstack</snippet></ROW><ROW><id>16942297</id><snippet>vstack</snippet></ROW><ROW><id>16942297</id><snippet>b</snippet></ROW><ROW><id>16942405</id><snippet>ax = gca()
h1, h2 = ax.plot(range(5), range(5), range(5), arange(5)**2)

r = matplotlib.patches.Rectangle((0,0), 1, 1, fill=False, edgecolor='none',
                                 visible=False)
ax.legend([h1, h2, r], ['a', 'b', 'c'], loc=0, title='test')
plt.draw()
</snippet></ROW><ROW><id>16942446</id><snippet>print "\x1b[8;40;80t"

print "ok"
</snippet></ROW><ROW><id>16942446</id><snippet>SIGWINCH</snippet></ROW><ROW><id>16942446</id><snippet>def resizeHandler(signum, frame):
    print "resize-window signal caught"

signal.signal(signal.SIGWINCH, resizeHandler)
</snippet></ROW><ROW><id>16942660</id><snippet>os.stat(path).st_mtime</snippet></ROW><ROW><id>16942660</id><snippet>if mtime != _times[path]:
</snippet></ROW><ROW><id>16942660</id><snippet>if int(mtime) != int(_times[path]):
</snippet></ROW><ROW><id>16942788</id><snippet># this is important
from thread import start_new_thread, allocate_lock

# this is for show
from time import sleep
from random import randint

# global receiver
myresults = []
counter = 0

# lock that protects "myresults"
lock = allocate_lock()

#lock that protects "counter"
lock2 = allocate_lock()

# this does the url processing
def retrieve(url):
    # sleep for 4-10s to simulate processing time
    sleep(randint(4,10))
    print "Done handling %s" % url

# thread safe retrieve
def retrieveLocking(url):
    // global variables
    global myresults, counter

    // random processing time
    sleep(randint(4,10))
    print "[LOCKING] Done handling %s" % url

    // request access to myresults' lock
    lock.acquire()
    myresults.append(url)
    lock.release() // release lock!

    // request access to counter's lock
    lock2.acquire()
    counter += 1
    lock2.release() // release lock!

# here goes your main loop
start_new_thread(retrieve, ("A",))
start_new_thread(retrieve, ("B",))
start_new_thread(retrieve, ("C",))

# using locking
start_new_thread(retrieveLocking, ("A",))
start_new_thread(retrieveLocking, ("B",))
start_new_thread(retrieveLocking, ("C",))
</snippet></ROW><ROW><id>16942788</id><snippet>while True:
    lock2.acquire()
    if counter == totalthreads: # in this case 3
        lock2.release()
        break
    lock2.release()
print "Done! %r" % myresults
</snippet></ROW><ROW><id>16942810</id><snippet>PlayerId</snippet></ROW><ROW><id>16942810</id><snippet>C</snippet></ROW><ROW><id>16942810</id><snippet>\x00</snippet></ROW><ROW><id>16942810</id><snippet>type(playerId)</snippet></ROW><ROW><id>16942810</id><snippet>PyString_FromString</snippet></ROW><ROW><id>16942831</id><snippet>heroku pg:psql</snippet></ROW><ROW><id>16942831</id><snippet>\dt</snippet></ROW><ROW><id>16942831</id><snippet>\d &lt;tablename&gt;</snippet></ROW><ROW><id>16942885</id><snippet>&gt;&gt;&gt; L = [['x','y',1], ['x','y',1], ['x','y',2]]
&gt;&gt;&gt; sum(entry[-1] for entry in L) / float(len(L))
1.3333333333333333
</snippet></ROW><ROW><id>16942885</id><snippet>&gt;&gt;&gt; sum(entry[2] for entry in L) / float(len(L))
</snippet></ROW><ROW><id>16942885</id><snippet>2</snippet></ROW><ROW><id>16943220</id><snippet>list</snippet></ROW><ROW><id>16943220</id><snippet>i</snippet></ROW><ROW><id>16943220</id><snippet>list</snippet></ROW><ROW><id>16943220</id><snippet>if i % 2 == 0</snippet></ROW><ROW><id>16943220</id><snippet>set</snippet></ROW><ROW><id>16943220</id><snippet>keep = {1, 5, 888, 20203} 
</snippet></ROW><ROW><id>16943220</id><snippet>if i in keep:
</snippet></ROW><ROW><id>16943326</id><snippet>name['foo']</snippet></ROW><ROW><id>16943326</id><snippet>name</snippet></ROW><ROW><id>16943326</id><snippet>False</snippet></ROW><ROW><id>16943326</id><snippet>name = {}
name['foo'] 
</snippet></ROW><ROW><id>16943326</id><snippet>KeyError</snippet></ROW><ROW><id>16943326</id><snippet>except:</snippet></ROW><ROW><id>16943326</id><snippet>IndexError</snippet></ROW><ROW><id>16943431</id><snippet>D = {}
for line in f:
    L = line.split()
    L2 = line.split('|')
    D.update({L[0]: (L[4:4 + 2 * int(L[3]):2][0], L2[1].split('\n')[0])})
</snippet></ROW><ROW><id>16943431</id><snippet>'|'</snippet></ROW><ROW><id>16943571</id><snippet>heroku run python manage.py schemamigration django_app --auto
</snippet></ROW><ROW><id>16943571</id><snippet>heroku run python manage.py migrate django_app
</snippet></ROW><ROW><id>16943571</id><snippet>south_migrationhistory</snippet></ROW><ROW><id>16943571</id><snippet>app_name</snippet></ROW><ROW><id>16943571</id><snippet>migrations/</snippet></ROW><ROW><id>16943571</id><snippet>./manage.py schemamigration app_name --initial</snippet></ROW><ROW><id>16943571</id><snippet>./manage.py migrate app_name</snippet></ROW><ROW><id>16943735</id><snippet>baseMatch = re.compile('123A[A-Z]{6}')
baseMatch.findall('123AABCDEFxyz123AAABCDExyz')
['123AABCDEF', '123AAABCDE']
</snippet></ROW><ROW><id>16943771</id><snippet>a = np.arange(30).reshape(5, 6)
b = np.zeros((a.shape[0], a.shape[1]+2), dtype=a.dtype)
b[:, 1:-1] = a
&gt;&gt;&gt; b
array([[ 0,  0,  1,  2,  3,  4,  5,  0],
       [ 0,  6,  7,  8,  9, 10, 11,  0],
       [ 0, 12, 13, 14, 15, 16, 17,  0],
       [ 0, 18, 19, 20, 21, 22, 23,  0],
       [ 0, 24, 25, 26, 27, 28, 29,  0]])
</snippet></ROW><ROW><id>16943812</id><snippet># pass all the variables that __init__ requires to create a new instance
such_and_such = SuchAndSuch(pos, vel, ang, ang_vel, image, info)

# now call the method!
such_and_such.update()
</snippet></ROW><ROW><id>16943812</id><snippet>self</snippet></ROW><ROW><id>16943812</id><snippet>such_and_such</snippet></ROW><ROW><id>16943812</id><snippet># Initialize the object with some default values (I'm guessing here)
such_and_such = SuchAndSuch((0, 0), (0, 0), 0, 0, None, '')

# Define keydown to make use of the such_and_such object
def keydown(key):
    if key == simplegui.KEY_MAP['up']:
        such_and_such.update()
        # (Perhaps your update method should take another argument?)
</snippet></ROW><ROW><id>16943812</id><snippet>class</snippet></ROW><ROW><id>16943812</id><snippet>class SuchAndSuch(object):
    @classmethod
    def update(cls):
        pass # do stuff
</snippet></ROW><ROW><id>16943812</id><snippet>SuchAndSuch.update()
</snippet></ROW><ROW><id>16943852</id><snippet>hosts[serv['host']]['services'][serv['id']] = serv
</snippet></ROW><ROW><id>16943852</id><snippet>hosts[serv['host']]</snippet></ROW><ROW><id>16943852</id><snippet>a=hosts[serv['host']]
b=a['services']
c=b[serv['id']]
c=serv
</snippet></ROW><ROW><id>16943852</id><snippet>hosts[serv['host']]</snippet></ROW><ROW><id>16943852</id><snippet>hosts[serv['host']]</snippet></ROW><ROW><id>16943852</id><snippet>try except</snippet></ROW><ROW><id>16943852</id><snippet>get()</snippet></ROW><ROW><id>16944158</id><snippet>class Factory (list):
    def append(self, cls):
        super(Factory, self).append(cls)
        return cls

factory = Factory()

@factory.append
class Base (object):
    pass

@factory.append
class A (Base):
    pass

@factory.append
class B (Base):
    pass
print factory
</snippet></ROW><ROW><id>16944158</id><snippet>[&lt;class '__main__.Base'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;]
</snippet></ROW><ROW><id>16944489</id><snippet>print epass.split("_")[-1].split(".")[0]


&gt;&gt;&gt; timeit.timeit("epass.split(\"_\")[-1].split(\".\")[0]",setup="from __main__
import epass")
0.57268652953933608

&gt;&gt;&gt; timeit.timeit("regex.findall(epass)",setup="from __main__ import epass,regex
0.59134766185007948
</snippet></ROW><ROW><id>16944489</id><snippet>print epass.rsplit("_",1)[-1].split(".")[0]
</snippet></ROW><ROW><id>16944489</id><snippet>epass.split("_",2)[-1].split(".")  
</snippet></ROW><ROW><id>16944610</id><snippet>from collections import Counter

numbers = { 
    word: iter([""] if count == 1 else xrange(1, count + 1)) 
    for word, count in Counter(sample).items()
}

result = [
    word + str(next(numbers[word])) 
    for word in sample
]
</snippet></ROW><ROW><id>16944610</id><snippet>Counter(sample)</snippet></ROW><ROW><id>16944610</id><snippet>numbers</snippet></ROW><ROW><id>16944610</id><snippet>iter(...)</snippet></ROW><ROW><id>16944610</id><snippet>count==1</snippet></ROW><ROW><id>16944610</id><snippet>[""] if count == 1 else xrange(1, count + 1)</snippet></ROW><ROW><id>16944610</id><snippet>next(numbers[word])</snippet></ROW><ROW><id>16944610</id><snippet>str(...)</snippet></ROW><ROW><id>16944618</id><snippet>line = line.split()
line = list(set(line))
</snippet></ROW><ROW><id>16944618</id><snippet>set</snippet></ROW><ROW><id>16944618</id><snippet>line = line.split()
line = list(set(line))
out.write(" ".join(sorted(line, x: (int(x.split(':')[0]), int(x.split(':')[1])))) + '\n')
</snippet></ROW><ROW><id>16944734</id><snippet>def parseSentence(sentence):
    cfrom, cto, incfrom, incto = 0, 0, 0, 0
    place = '' #to keep track of where we are

    for i in range(len(sentence)):
        c = sentence[i]
        if (c == '&lt;'):
            #check for 'cfrom'
            if (sentence[i : i + 4] == '&lt;tag'):
                cfrom = i
                place = 'botag' #begin-open-tag
            #check for 'incfrom'
            elif (sentence[i + 1] == '/' and place == 'intag'):
                incfrom = i
                place = 'bctag' #begin-close-tag
        elif (c == '&gt;'):
            #check for 'cto'
            if (place == 'botag'): #just after '&lt;tag...'
                cto = i
                place = 'intag' #now within the XML tag
            #check for 'incto'
            elif (place == 'bctag'):
                incto = i
                place = ''
                yield (cfrom, cto, incfrom, incto)
</snippet></ROW><ROW><id>16944734</id><snippet>&lt;tag&gt;...&lt;/&gt;</snippet></ROW><ROW><id>16944734</id><snippet>&lt;tag&gt;...&lt;/&gt;</snippet></ROW><ROW><id>16944734</id><snippet>yield</snippet></ROW><ROW><id>16944734</id><snippet>&lt;tag&gt;...&lt;/&gt;</snippet></ROW><ROW><id>16944753</id><snippet>a = np.genfromtxt('meanvals2.txt').T[1] 
b = np.std(a)
c = np.mean(a)

#step 1, values lower than 1 std from mean
ok = a &gt; (c - b)
a[~ok] = c - b

#step 2, values higher than 1 std from mean
ok = a &lt; (c + b)
a[~ok] = c + b

print a
</snippet></ROW><ROW><id>16944753</id><snippet>h</snippet></ROW><ROW><id>16944753</id><snippet>h = a.copy()</snippet></ROW><ROW><id>16944753</id><snippet>h</snippet></ROW><ROW><id>16944753</id><snippet>a</snippet></ROW><ROW><id>16944753</id><snippet>&gt;&gt;&gt; a = np.array([1,2,3,4,5,20],dtype=np.float32)
&gt;&gt;&gt; b = np.std(a)
&gt;&gt;&gt; c = np.mean(a)
&gt;&gt;&gt; print b
6.46572151487
&gt;&gt;&gt; print c
5.83333333333
&gt;&gt;&gt; ok = a &gt; (c - b)
&gt;&gt;&gt; a[~ok] = c - b
&gt;&gt;&gt; ok = a &lt; (c + b)
&gt;&gt;&gt; a[~ok] = c + b
&gt;&gt;&gt; print a
[  1.          2.          3.          4.          5.         12.2990551]
</snippet></ROW><ROW><id>16944926</id><snippet>dtype</snippet></ROW><ROW><id>16944926</id><snippet>object</snippet></ROW><ROW><id>16944926</id><snippet>&gt;&gt;&gt; a = np.array(['True', 'False', 'True', 'False'])
&gt;&gt;&gt; a
array(['True', 'False', 'True', 'False'], 
      dtype='|S5')
&gt;&gt;&gt; a == "True"
array([ True, False,  True, False], dtype=bool)
</snippet></ROW><ROW><id>16944926</id><snippet>&gt;&gt;&gt; a = np.array(['True', 'False', 'True', 'False'], dtype=object)
&gt;&gt;&gt; a
array(['True', 'False', 'True', 'False'], dtype=object)
&gt;&gt;&gt; a == "True"
array([ True, False,  True, False], dtype=bool)
</snippet></ROW><ROW><id>16945012</id><snippet>Add(x, y, b, c, x, y, evaluate=False)</snippet></ROW><ROW><id>16945135</id><snippet>row[1]</snippet></ROW><ROW><id>16945135</id><snippet>datetime</snippet></ROW><ROW><id>16945135</id><snippet>len(times)</snippet></ROW><ROW><id>16945135</id><snippet>for i in range(len(times) - 1)</snippet></ROW><ROW><id>16945135</id><snippet>range(0)</snippet></ROW><ROW><id>16945135</id><snippet>for row in reader:</snippet></ROW><ROW><id>16945135</id><snippet>reader = csv.reader(f, delimiter='\t')
times = [datetime.datetime.strptime(timestamp, "%H:%M:%S.%f") for _, timestamp in reader]

for i in range(len(times) - 1):
    delta = times[i + 1] - times[i]
    print ((delta.days * 24 * 60 * 60 + delta.seconds) * 1000 + delta.microseconds / 1000)
</snippet></ROW><ROW><id>16945135</id><snippet>for</snippet></ROW><ROW><id>16945135</id><snippet>range()</snippet></ROW><ROW><id>16945135</id><snippet>datetime</snippet></ROW><ROW><id>16945135</id><snippet>zip()</snippet></ROW><ROW><id>16945135</id><snippet>reader = csv.reader(f, delimiter='\t')
times = [datetime.datetime.strptime(timestamp, "%H:%M:%S.%f") for _, timestamp in reader]

for time1, time2 in zip(times, times[1:]):
    delta = time2 - time1
    print ((delta.days * 24 * 60 * 60 + delta.seconds) * 1000 + delta.microseconds / 1000)
</snippet></ROW><ROW><id>16945135</id><snippet>timedelta</snippet></ROW><ROW><id>16945135</id><snippet>total_seconds()</snippet></ROW><ROW><id>16945135</id><snippet>round()</snippet></ROW><ROW><id>16945135</id><snippet>int()</snippet></ROW><ROW><id>16945135</id><snippet>    print(delta.total_seconds() * 1000)
</snippet></ROW><ROW><id>16945135</id><snippet>    print(int(delta.total_seconds() * 1000))
</snippet></ROW><ROW><id>16945395</id><snippet>class A():
    def __init__(self):
        self.a = 0
    def __eq__(self,other): #this overrides the equality check
        if isinstance(other,A):
           return self.a==other.a
    def print(self):
        print(self.a)

l = [0, 0, A(), 0, A(), 0]
print(l.index(A()))#now this should work
print A() in l

a1 = A()
a2 = A()
a1 == a2 #True
a1.a = 2
a1 == a2 #False
a2.a = 2
a1 == a2 #True
a2.a = 5
a1 &lt; a2 #Error we would need to overload __cmp__ or __lt__ methods for this to work
</snippet></ROW><ROW><id>16945410</id><snippet>combine_first</snippet></ROW><ROW><id>16945410</id><snippet>In [11]: s1.combine_first(s2)
Out[11]:
2008-09-15    100.00
2008-10-15    101.00
2008-11-15    102.02
dtype: float64
</snippet></ROW><ROW><id>16945540</id><snippet>UserCreationForm</snippet></ROW><ROW><id>16945540</id><snippet>auth.User</snippet></ROW><ROW><id>16945553</id><snippet>domain.co.uk</snippet></ROW><ROW><id>16945553</id><snippet>tldextract</snippet></ROW><ROW><id>16945553</id><snippet>pip install tldextract</snippet></ROW><ROW><id>16945553</id><snippet>import tldextract

def get_domain(url):
    result = tldextract.extract(url)

    return result.domain + '.' + result.tld
</snippet></ROW><ROW><id>16945699</id><snippet>import multiprocessing as mp
import random

workers_count = 5
# Probability of failure, change to simulate failures
fail_init_p = 0.5
fail_job_p = 0.4


#========= Worker =========
def do_work(job_state, arg):
    if random.random() &lt; fail_job_p:
        raise Exception("Job failed")
    return "job %d processed %d" % (job_state, arg)

def init(args):
    if random.random() &lt; fail_init_p:
        raise Exception("Worker init failed")
    return args

def worker_function(args, jobs_queue, result_queue):
    # INIT
    # What to do when init() fails?
    try:
        state = init(args)
    except:
        print "!Worker %d init fail" % args
        result_queue.put('init failed')
        return
    # DO WORK
    # Process data in the jobs queue
    for job in iter(jobs_queue.get, None):
        try:
            # Can throw an exception!
            result = do_work(state, job)
            result_queue.put(result)
        except:
            print "!Job %d failed, skip..." % job
            result_queue.put('job failed')


#========= Parent =========
jobs = mp.Queue()
results = mp.Queue()
for i in range(workers_count):
    mp.Process(target=worker_function, args=(i, jobs, results)).start()

# Populate jobs queue
results_to_expect = 0
for j in range(30):
    jobs.put(j)
    results_to_expect += 1

init_failures = 0
job_failures = 0
successes = 0
while job_failures + successes &lt; 30 and init_failures &lt; workers_count:
    result = results.get()
    init_failures += int(result == 'init failed')
    job_failures += int(result == 'job failed')
    successes += int(result != 'init failed' and result != 'job failed')
    #print init_failures, job_failures, successes

for ii in range(workers_count):
    jobs.put(None)
</snippet></ROW><ROW><id>16945699</id><snippet>jobs</snippet></ROW><ROW><id>16945699</id><snippet>Queue</snippet></ROW><ROW><id>16945699</id><snippet>JoinableQueue</snippet></ROW><ROW><id>16945699</id><snippet>None</snippet></ROW><ROW><id>16945791</id><snippet>ScrollView:
    size_hint: None, None
    size: 500, 320
    pos_hint: {'center_x': .5, 'center_y': .5}

    GridLayout:
        cols: 1
        padding: 10
        spacing: 10
        height: self.minimum_height
        do_scroll_x: False

        ScrollButton:
            text: '1'
        ScrollButton:
            text: '2'
        ScrollButton:
            text: '3'
        ScrollButton:
            text: '4'
        ScrollButton:
            text: '5'
        ScrollButton:
            text: '6'

&lt;ScrollButton@Button&gt;
    size_hint: None, None
    size: 480, 40
</snippet></ROW><ROW><id>16945791</id><snippet>ScreenManager:
    Screen:
        ScrollView:
            size_hint: None, None
            size: 500, 320
            pos_hint: {'center_x': .5, 'center_y': .5}

            GridLayout:
                cols: 1
                padding: 10
                spacing: 10
                height: self.minimum_height
                size_hint: None, None
                do_scroll_x: False
                id: container

&lt;ScrollButton&gt;
    size_hint: None, None
    size: 480, 40
</snippet></ROW><ROW><id>16945791</id><snippet>from kivy.app import App
from kivy.uix.button import Button

class ScrollButton(Button):
    pass

class ScrollApp(App):
    def build(self):
        root = super(ScrollApp, self).build()
        container = root.ids.container
        for i in range(30):
            container.add_widget(ScrollButton(text=str(i)))
        return root

if __name__ == '__main__':
    ScrollApp().run()
</snippet></ROW><ROW><id>16945866</id><snippet>L</snippet></ROW><ROW><id>16945866</id><snippet>sys.maxint.bit_length()</snippet></ROW><ROW><id>16946049</id><snippet>init() 
While(True):
    draw()
    update()
    checkInput()
</snippet></ROW><ROW><id>16946049</id><snippet>__init__()</snippet></ROW><ROW><id>16946049</id><snippet>def draw(self,surface):
    surface.blit (self.space, self.spaceRect)

def move(self):
    self.spaceRect.left += self.xMoveAmt
    if self.spaceRect.right &gt;= winW:
        self.kill()
    elif self.spaceRect.left &lt;= 0:
        self.kill()
</snippet></ROW><ROW><id>16946068</id><snippet>import myapp
from pyramid.paster import get_appsettings
from webtest import TestApp
app, conf = myapp.init(get_appsettings('settings.ini#appsection'))
rend = conf.testing_add_renderer('template.pt')
test_app = TestApp(app)
resp = test_app.get('/my/view/url')
rend.assert_(key='val')
</snippet></ROW><ROW><id>16946068</id><snippet>myapp.init</snippet></ROW><ROW><id>16946068</id><snippet>pserve</snippet></ROW><ROW><id>16946068</id><snippet>main</snippet></ROW><ROW><id>16946068</id><snippet>myapp.init</snippet></ROW><ROW><id>16946068</id><snippet>main(global_config, **settings)</snippet></ROW><ROW><id>16946068</id><snippet>conf.make_wsgi_app()</snippet></ROW><ROW><id>16946068</id><snippet>conf</snippet></ROW><ROW><id>16946068</id><snippet>pyramid.config.Configurator</snippet></ROW><ROW><id>16946068</id><snippet>rend</snippet></ROW><ROW><id>16946068</id><snippet>pyramid.testing.DummyTemplateRenderer</snippet></ROW><ROW><id>16946068</id><snippet>rend</snippet></ROW><ROW><id>16946068</id><snippet>_received</snippet></ROW><ROW><id>16946184</id><snippet>&gt;&gt;&gt; orig = "bla bla"
&gt;&gt;&gt; str(map(ord, orig))
'[98, 108, 97, 32, 98, 108, 97]'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16946227</id><snippet>theFile = open('thefile.txt','r')
FILE = theFile.readlines()
theFile.close()
printList = []
for line in FILE:
    if ('TestName' in line) or ('Totals' in line):
         # here you may want to do some splitting/concatenation/formatting to your string
         printList.append(line)

for item in printList:
    print item    # or write it to anotehr file... or whatever
</snippet></ROW><ROW><id>16946248</id><snippet>n = musicDir + str(x[i])
pygame.mixer.music.load(n) # so you load the song...
pygame.mixer.music.play()  # then you play it....
pygame.mixer.music.queue(musicDir + str(x[i])) # i hasn't changed, this is the same song 
                                               #  you just loaded and started playing
</snippet></ROW><ROW><id>16946248</id><snippet>for</snippet></ROW><ROW><id>16946248</id><snippet>n = musicDir + str[0]   # let's load and play the first song
pygame.mixer.music.load(n)
pygame.mixer.music.play()
for song in x: 
    pygame.mixer.music.queue(musicDir + str(song)) # loop over and queue the rest
</snippet></ROW><ROW><id>16946252</id><snippet>by_index = ([sub_index, list_index] for list_index, list_item in
             enumerate(items) for sub_index in list_item[0])
[item[1] for item in sorted(by_index)]
</snippet></ROW><ROW><id>16946252</id><snippet>[0, 1, 0, 1, 1]
</snippet></ROW><ROW><id>16946252</id><snippet>by_index = ([sub_index, list_index] for list_index, list_item in
             enumerate(items) for sub_index in list_item[0])
list(by_index)    
[[[0, 1], 0], [[2, 20], 0], [[1, 3], 1], [[5, 29], 1], [[50, 500], 1]]
</snippet></ROW><ROW><id>16946252</id><snippet>[item[1] for item in sorted(by_index)]
</snippet></ROW><ROW><id>16946499</id><snippet>father[son][1] = description
</snippet></ROW><ROW><id>16946499</id><snippet>father</snippet></ROW><ROW><id>16946499</id><snippet>son</snippet></ROW><ROW><id>16946499</id><snippet>son[father]</snippet></ROW><ROW><id>16946499</id><snippet>AttributeError</snippet></ROW><ROW><id>16946499</id><snippet>description</snippet></ROW><ROW><id>16946499</id><snippet>description[1]</snippet></ROW><ROW><id>16946499</id><snippet>father[son]</snippet></ROW><ROW><id>16946553</id><snippet>sorted(l, key=lambda x: int(re.sub('\D', '', x)))
</snippet></ROW><ROW><id>16946553</id><snippet>In [1]: import re

In [2]: l = ['asdas2', 'asdas1', 'asds3ssd']

In [3]: sorted(l, key=lambda x: int(re.sub('\D', '', x)))
Out[3]: ['asdas1', 'asdas2', 'asds3ssd']
</snippet></ROW><ROW><id>16946553</id><snippet>re.sub('\D', '', x)</snippet></ROW><ROW><id>16946710</id><snippet>u</snippet></ROW><ROW><id>16946710</id><snippet>mypath</snippet></ROW><ROW><id>16946710</id><snippet>with open(join(mypath, myfile)) as f:</snippet></ROW><ROW><id>16946794</id><snippet>text = BeautifulSoup(f).get_text()
</snippet></ROW><ROW><id>16947215</id><snippet>__getattr__</snippet></ROW><ROW><id>16947215</id><snippet>__getitem__</snippet></ROW><ROW><id>16947215</id><snippet>a</snippet></ROW><ROW><id>16947215</id><snippet>b</snippet></ROW><ROW><id>16947215</id><snippet>c</snippet></ROW><ROW><id>16947215</id><snippet>class DictCollcetion(object):
    def __init__(self, dict_):
        self.dict = dict_
    def __getattr__(self, name):
        return {k: k.name for k in self.dict}
    def __getitem__(self, key):
        return {k: k.key for k in self.dict}
</snippet></ROW><ROW><id>16947229</id><snippet>shlex.split</snippet></ROW><ROW><id>16947229</id><snippet>&gt;&gt;&gt; s = '2013-06-05T11:01:02.955 LASTNAME=Jone FIRSTNAME=Jason PERSONNELID=salalm QID=231412 READER_NAME="CAZ.1 LOBBY LEFT TURNSTYLE OUT" ACCESS_TYPE="Access Granted" EVENT_TIME_UTC=1370480141.000 REGION=UTAH'
&gt;&gt;&gt; split = shlex.split(s)
&gt;&gt;&gt; split
['2013-06-05T11:01:02.955', 'LASTNAME=Jone', 'FIRSTNAME=Jason', 
'PERSONNELID=salalm', 'QID=231412', 'READER_NAME=CAZ.1 LOBBY LEFT TURNSTYLE OUT',
'ACCESS_TYPE=Access Granted', 'EVENT_TIME_UTC=1370480141.000', 'REGION=UTAH']
</snippet></ROW><ROW><id>16947229</id><snippet>&gt;&gt;&gt; parsed = dict(k.split("=", 1) for k in split if '=' in k)
&gt;&gt;&gt; parsed
{'EVENT_TIME_UTC': '1370480141.000', 'FIRSTNAME': 'Jason', 
'LASTNAME': 'Jone', 'REGION': 'UTAH', 'ACCESS_TYPE': 'Access Granted', 
'PERSONNELID': 'salalm', 'QID': '231412', 
'READER_NAME': 'CAZ.1 LOBBY LEFT TURNSTYLE OUT'}
</snippet></ROW><ROW><id>16947229</id><snippet>&gt;&gt;&gt; dict(k.partition('=')[::2] for k in split)
{'2013-06-05T11:01:02.955': '', 'EVENT_TIME_UTC': '1370480141.000', 'FIRSTNAME': 'Jason', 'LASTNAME': 'Jone', 'REGION': 'UTAH', 'ACCESS_TYPE': 'Access Granted', 'PERSONNELID': 'salalm', 'QID': '231412', 'READER_NAME': 'CAZ.1 LOBBY LEFT TURNSTYLE OUT'}
</snippet></ROW><ROW><id>16947229</id><snippet>shlex</snippet></ROW><ROW><id>16947313</id><snippet>__init__</snippet></ROW><ROW><id>16947313</id><snippet>class MyModel(models.Model):
    def __init__(self, *args, **kwargs):
        # Don't do any extra looping or anything in here because this gets called
        # at least once for every row in each query of this table
        self._meta.fields[2].model_instance = self
        super(MyModel, self).__init__(*args, **kwargs)
    field1 = models.TextField()
    field2 = models.PickleField()
    field3 = models.DateTimeField()
</snippet></ROW><ROW><id>16947313</id><snippet>def to_python(self, value):
    # logic and unpickling, then right before your return:
    if hasattr(self, 'model_instance'): # avoid AttributeError if list, dict, etc.
        value.model_instance = self.model_instance
    return value
</snippet></ROW><ROW><id>16947317</id><snippet>hlines</snippet></ROW><ROW><id>16947317</id><snippet>vlines</snippet></ROW><ROW><id>16947317</id><snippet>axhline</snippet></ROW><ROW><id>16947317</id><snippet>axvline</snippet></ROW><ROW><id>16947317</id><snippet>hlines</snippet></ROW><ROW><id>16947317</id><snippet>vlines</snippet></ROW><ROW><id>16947317</id><snippet>import matplotlib.pyplot as plt

horiz_line = 0.0005
vert_line = 110
x_data = [10, 30, 50, 70, 90, 110, 130, 150, 170, 190, 210, 230, 250, 270, 290, 310, 330, 350, 370, 390, 410, 430, 450, 470, 490]
y_data = [0.0074999999999999997, 0.011875, 0.0057812499999999999, 0.0036458333333333334, 0.0020312500000000001, 0.0013125000000000001, 0.00098958333333333342, 0.00089285714285714283, 0.00074218750000000001, 0.00093749999999999997, 0.00071874999999999999, 0.00088068181818181821, 0.00078125000000000004, 0.0004807692307692308, 0.00055803571428571425, 0.00083333333333333339, 0.00066406250000000005, 0.00069852941176470592, 0.00059027777777777778, 0.00059210526315789478, 0.00062500000000000001, 0.0007291666666666667, 0.00068181818181818187, 0.00059782608695652171, 0.00053385416666666663]

fig = plt.figure() # create the top-level container

# horizontal line
plt.hlines(y=horiz_line, xmin=0, xmax=max(x_data), color='red', zorder=1)

# vertical line
plt.vlines(x=vert_line, ymin=0, ymax=max(y_data), color='red', zorder=2)

plt.scatter(x_data, y_data, s=150, color='blue', zorder=3)

plt.show()
</snippet></ROW><ROW><id>16947462</id><snippet># myapp.py
import logging
import mylib

def main():
    logging.basicConfig(filename='myapp.log', level=logging.INFO)
    logging.info('Started')
    mylib.do_something()
    logging.info('Finished')

if __name__ == '__main__':
    main()

# mylib.py
import logging

def do_something():
    logging.info('Doing something')
</snippet></ROW><ROW><id>16947462</id><snippet>INFO:root:Started
INFO:root:Doing something
INFO:root:Finished
</snippet></ROW><ROW><id>16947462</id><snippet>logger = logging.getLogger(__name__)</snippet></ROW><ROW><id>16947462</id><snippet>NOTSET</snippet></ROW><ROW><id>16947493</id><snippet>line</snippet></ROW><ROW><id>16947493</id><snippet>float</snippet></ROW><ROW><id>16947493</id><snippet>float(line)</snippet></ROW><ROW><id>16947493</id><snippet>for line in infile:
    i = float(line.strip())
    # ... count
</snippet></ROW><ROW><id>16947496</id><snippet>" | Added on "</snippet></ROW><ROW><id>16947496</id><snippet>|</snippet></ROW><ROW><id>16947496</id><snippet>" \| Added on "</snippet></ROW><ROW><id>16947506</id><snippet>insert()</snippet></ROW><ROW><id>16947506</id><snippet>0</snippet></ROW><ROW><id>16947506</id><snippet>[0]</snippet></ROW><ROW><id>16947506</id><snippet>values = insert(values, [0], (1,2,3))
</snippet></ROW><ROW><id>16947506</id><snippet>array([(0, 1, 3), (0, 0, 0), (0, 0, 4), ..., (255, 255, 251), (255, 255, 253), (255, 255, 255)],
       dtype=[('R', 'u1'), ('G', 'u1'), ('B', 'u1')])
</snippet></ROW><ROW><id>16947506</id><snippet>if</snippet></ROW><ROW><id>16947506</id><snippet>str(values[0]) == str((0,0,0))
</snippet></ROW><ROW><id>16947506</id><snippet>eval(str(values[0])) == eval(str(0,0,0))
</snippet></ROW><ROW><id>16947562</id><snippet>customer = Customers.query.filter_by(cat_id = page).first()
customer_dict = dict((col, getattr(customer, col)) for col in customer.__table__.columns.keys())
return render_template('test.html',
customer_dict = customer_dict
)
</snippet></ROW><ROW><id>16947562</id><snippet>{% for key, value in customer_dict.iteritems() %}

   {{ key }} , {{ value }}

{% endfor %}  
</snippet></ROW><ROW><id>16947791</id><snippet>$ cd ~
$ ~/Documents/.../OrbitalMechanics/OrbitalNotes/stumpff.py
</snippet></ROW><ROW><id>16947791</id><snippet>~</snippet></ROW><ROW><id>16947791</id><snippet>~/Documents/.../OrbitalMechanics/OrbitalNotes/</snippet></ROW><ROW><id>16947791</id><snippet>~</snippet></ROW><ROW><id>16947791</id><snippet>foo.data</snippet></ROW><ROW><id>16947791</id><snippet>~/foo.data</snippet></ROW><ROW><id>16947791</id><snippet>~/Documents/.../OrbitalMechanics/OrbitalNotes/foo.data</snippet></ROW><ROW><id>16947791</id><snippet>cd</snippet></ROW><ROW><id>16947791</id><snippet>$(cd $(dirname $1) ./$(basename $1))
</snippet></ROW><ROW><id>16947791</id><snippet>python  ~/Documents/.../OrbitalMechanics/OrbitalNotes/stumpff.py</snippet></ROW><ROW><id>16947791</id><snippet>~/Documents/.../OrbitalMechanics/OrbitalNotes/stumpff.py</snippet></ROW><ROW><id>16947791</id><snippet>$2</snippet></ROW><ROW><id>16947791</id><snippet>import os
import sys

scriptpath = os.path.dirname(__file__)
os.chdir(scriptpath)
</snippet></ROW><ROW><id>16947791</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>16947791</id><snippet>__file__</snippet></ROW><ROW><id>16947791</id><snippet>__file__</snippet></ROW><ROW><id>16947791</id><snippet>scriptpath</snippet></ROW><ROW><id>16947791</id><snippet>chdir</snippet></ROW><ROW><id>16947791</id><snippet>import os
import sys

scriptpath = os.path.abspath(os.dirname(__file__))

# ...

datapath = os.path.join(scriptpath, 'foo.data')
with open(datapath, 'w') as datafile:
    # ...
</snippet></ROW><ROW><id>16947840</id><snippet>with</snippet></ROW><ROW><id>16947920</id><snippet>Parent</snippet></ROW><ROW><id>16947920</id><snippet>test2.py</snippet></ROW><ROW><id>16947920</id><snippet>from test1 import Parent

class Child(Parent):
    def eggs(self):
        print "something else"
</snippet></ROW><ROW><id>16948011</id><snippet>"4%"</snippet></ROW><ROW><id>16948011</id><snippet>20.0</snippet></ROW><ROW><id>16948011</id><snippet>TypeError</snippet></ROW><ROW><id>16948011</id><snippet>20.0</snippet></ROW><ROW><id>16948011</id><snippet>"%"</snippet></ROW><ROW><id>16948011</id><snippet>4%</snippet></ROW><ROW><id>16948011</id><snippet>4</snippet></ROW><ROW><id>16948011</id><snippet>rstrip</snippet></ROW><ROW><id>16948011</id><snippet>"%"</snippet></ROW><ROW><id>16948011</id><snippet>float</snippet></ROW><ROW><id>16948011</id><snippet>cell = float(row["cell"].rstrip("%"))
</snippet></ROW><ROW><id>16948203</id><snippet>stderr</snippet></ROW><ROW><id>16948203</id><snippet>stderr</snippet></ROW><ROW><id>16948203</id><snippet>subprocess</snippet></ROW><ROW><id>16948203</id><snippet>subprocess</snippet></ROW><ROW><id>16948203</id><snippet>multiprocessing</snippet></ROW><ROW><id>16948203</id><snippet>concurrent.futures</snippet></ROW><ROW><id>16948203</id><snippet>Exception</snippet></ROW><ROW><id>16948203</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>16948203</id><snippet>check_call</snippet></ROW><ROW><id>16948203</id><snippet>Popen</snippet></ROW><ROW><id>16948203</id><snippet>output, errors = p.communicate()
</snippet></ROW><ROW><id>16948203</id><snippet>output, errors = p.communicate()
if p.returncode:
    raise subprocess.CalledProcessError(p.returncode, 'description')
</snippet></ROW><ROW><id>16948263</id><snippet>python -i my.py
</snippet></ROW><ROW><id>16948263</id><snippet>ArithmeticSequence</snippet></ROW><ROW><id>16948263</id><snippet>&gt;&gt;&gt; s=ArithmeticSequence(1,2)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16948271</id><snippet>for image in soup.findAll("img"):
        print "Old Image Path: %(src)s" % image
        #Get file name
        filename = image["src"].split("/")[-1]
        #Get full path name if url has to be parsed
        parsedURL[2] = image["src"]
        image["src"] = '%s\%s' % (phonepath,filename)
        #Old File path (local to computer)
        #image["src"] = '%s\%s' % (out,filename)
        print 'New Path: %s' % image["src"]
        #       print image
        outpath = os.path.join(out, filename)

        #retrieve images
        if parsedURL[2].lower().startswith("http"):
            #urlretrieve(image["src"], outpath)
            urlretrieve(parsedURL[2], outpath)
            print image["src"].lower()
        else:
            print "HTTP INFO " + urlparse.urlunparse(parsedURL)
            print "HTTP INFO " + image["src"].lower()
            urlretrieve(urlparse.urlunparse(parsedURL), outpath) #Constructs URL from tuple (parsedURL)
            #print image["src"].lower()
</snippet></ROW><ROW><id>16948405</id><snippet>import random

def random_group(d, size=10):
    keys = list(d.keys())
    random.shuffle(keys)
    for i in range(0, len(keys), size):
         yield [(key, d[key]) for key in keys[i:i + size]]
</snippet></ROW><ROW><id>16948405</id><snippet>(key, value)</snippet></ROW><ROW><id>16948405</id><snippet>for group in random_group(your_dictionary):
    print group
</snippet></ROW><ROW><id>16948405</id><snippet>yield keys[i:i + size]                          # list of keys
yield [d[key] for key in keys[i:i + size]]      # list of values
yield {key: d[key] for key in keys[i:i + size]} # dictionary
</snippet></ROW><ROW><id>16948675</id><snippet>re.match</snippet></ROW><ROW><id>16948675</id><snippet>^[0-9]{8}</snippet></ROW><ROW><id>16948675</id><snippet>[0-9]{8}</snippet></ROW><ROW><id>16948675</id><snippet>re.search</snippet></ROW><ROW><id>16948675</id><snippet>re.search(r'[0-9]{8}', a)  # results in a match
</snippet></ROW><ROW><id>16948852</id><snippet>allow_redirects=False</snippet></ROW><ROW><id>16948852</id><snippet>.resolve_redirects()</snippet></ROW><ROW><id>16948852</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; url = 'http://httpbin.org/redirect/5'  # redirects 5 times
&gt;&gt;&gt; session = requests.session()
&gt;&gt;&gt; r = session.get(url, allow_redirects=False)
&gt;&gt;&gt; r.headers.get('location')
'/redirect/4'
&gt;&gt;&gt; for redirect in session.resolve_redirects(r, r.request):
...     print redirect.headers.get('location')
... 
/redirect/3
/redirect/2
/redirect/1
/get
None
</snippet></ROW><ROW><id>16948852</id><snippet>redirect</snippet></ROW><ROW><id>16948858</id><snippet>Ti.Process.createProcess()</snippet></ROW><ROW><id>16948885</id><snippet>class Worker(object):
    payme = False
    period = None
    def __init__(self, name, sal):
        self.name = name
        self.sal = sal

    def pay(self, period=None):
        if not self.payme:
            print 'Not Implemented'
            return
        if self.period:
            return self.period*self.sal
        elif not period:
            print 'Please, give a period'
            return
        elif period:
            return period*self.sal

    def __add__(self, other):
        # here adding the salary (sal), but you can add whatever you wish...
        return self.sal + other.sal

class SalariedWorker( Worker ):
    payme = True
    period = 40

class HourlyWorker( Worker ):
    payme = True
</snippet></ROW><ROW><id>16948935</id><snippet>self.getSessID(args.sessId)

if self.getSessID:
    print('\tI will get the logfiles for session ID "{}".'.format(self.sessId))            
</snippet></ROW><ROW><id>16948935</id><snippet>session_id = self.getSessID(args.sessId)

if session_id:
    print('\tI will get the logfiles for session ID "{}".'.format(session_id))     
</snippet></ROW><ROW><id>16948935</id><snippet>self.sessId</snippet></ROW><ROW><id>16948935</id><snippet>self.getSessID()</snippet></ROW><ROW><id>16948943</id><snippet>pip-3.3 install hg+https://bitbucket.org/mjs0/imapclient
</snippet></ROW><ROW><id>16948943</id><snippet>pip-3.3 install .</snippet></ROW><ROW><id>16948943</id><snippet>python3.3 setup.py install</snippet></ROW><ROW><id>16948943</id><snippet>IMAPClient</snippet></ROW><ROW><id>16948983</id><snippet>(?P&lt;poll_id&gt;...)</snippet></ROW><ROW><id>16948983</id><snippet>\d</snippet></ROW><ROW><id>16948983</id><snippet>0</snippet></ROW><ROW><id>16948983</id><snippet>9</snippet></ROW><ROW><id>16948983</id><snippet>+</snippet></ROW><ROW><id>16948983</id><snippet>name='detail'</snippet></ROW><ROW><id>16948983</id><snippet>/</snippet></ROW><ROW><id>16948983</id><snippet>views.detail</snippet></ROW><ROW><id>16948983</id><snippet>poll_id</snippet></ROW><ROW><id>16948983</id><snippet>name</snippet></ROW><ROW><id>16948983</id><snippet>{% url 'name' poll.id %}
</snippet></ROW><ROW><id>16948983</id><snippet>http://yourserver/[digits of poll.id]/</snippet></ROW><ROW><id>16949015</id><snippet>class PublicationAdmin(admin.ModelAdmin):
    list_display = ('title',)
    search_fields = ('tags__title',)
</snippet></ROW><ROW><id>16949044</id><snippet>from sympy import solve
from sympy.abc import x, y

e = 2*x+3-y

solve(e,x)
#[y/2 - 3/2]
solve(e,y)
#[2*x + 3]
</snippet></ROW><ROW><id>16949044</id><snippet>inverse()</snippet></ROW><ROW><id>16949044</id><snippet>def inverse(string, left_string=None):
    from sympy import solve, Symbol, sympify
    string = '-' + string
    e = sympify(string.replace('=','+'))
    if left_string:
        ans = left_string + ' = ' + str(solve(e, sympify(left_string))[0])
    else:
        left = sympify(string.split('=')[0].strip().replace('-',''))
        symbols = e.free_symbols
        symbols.remove( left )
        right = list(symbols)[0]
        ans = str(right) + ' = ' + str(solve(e, right)[0])
    return ans
</snippet></ROW><ROW><id>16949044</id><snippet>inverse(' x = 4*y/2')
#'y = x/2'

inverse(' y = 100/x + x**2')
#'x = -y/(3*(sqrt(-y**3/27 + 2500) + 50)**(1/3)) - (sqrt(-y**3/27 + 2500) + 50)**(1/3)'

inverse("screeny = (isox+isoy)*29/2.0344827586206895", "isoy")
#'isoy = -isox + 0.0701545778834721*screeny'
</snippet></ROW><ROW><id>16949065</id><snippet>gobject.idle_add()</snippet></ROW><ROW><id>16949065</id><snippet>gobject.idle_add</snippet></ROW><ROW><id>16949065</id><snippet>threading.Thread</snippet></ROW><ROW><id>16949065</id><snippet>run()</snippet></ROW><ROW><id>16949065</id><snippet>thread.start()</snippet></ROW><ROW><id>16949065</id><snippet>threads_enter()</snippet></ROW><ROW><id>16949065</id><snippet>threads_leave()</snippet></ROW><ROW><id>16949065</id><snippet>    def working1(self):
        self.label.set_text('working1')
        self.work_thread = threading.Thread(self.run_thread)
        self.running = True
        gobject.timeout_add(200, self.update_progress)
        self.work_thread.start()
        # the GUI thread now returns to the mainloop

    # this will get periodically called in the GUI thread
    def update_progress(self):
        if self.running:
            self.progressbar.pulse()   # or set_fraction, etc.
        return self.running

    # this will get run in a separate thread
    def run_thread(self):
        Process.heavyworks1()      # or however you're starting your calculation
        gobject.idle_add(self.stop_progress)

    # this will get run in the GUI thread when the worker thread is done
    def stop_progress(self):
        self.running = False
        self.work_thread.join()
        self.label.set_text('idle')
</snippet></ROW><ROW><id>16949183</id><snippet>read_csv</snippet></ROW><ROW><id>16949183</id><snippet>import pandas
my_file = 'example.csv'
df = pandas.read_csv(my_file)
</snippet></ROW><ROW><id>16949183</id><snippet>strings</snippet></ROW><ROW><id>16949183</id><snippet>count = 0
dfs = []
for my_str in strings:
    str_split = my_str.split()
    data = dict(zip(cols,str_split))
    panda_frame = pandas.DataFrame(data,index=[count],columns = cols)
    dfs.append(panda_frame)
    count += 1
df = pandas.concat(dfs)
</snippet></ROW><ROW><id>16949266</id><snippet>csv</snippet></ROW><ROW><id>16949266</id><snippet>StringIO.StringIO</snippet></ROW><ROW><id>16949266</id><snippet>cStringIO</snippet></ROW><ROW><id>16949266</id><snippet>cStringIO.StringIO</snippet></ROW><ROW><id>16949266</id><snippet>txt</snippet></ROW><ROW><id>16949266</id><snippet>txt = txt.encode()
</snippet></ROW></DATA>