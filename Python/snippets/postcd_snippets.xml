<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>12665367</id><snippet>import hl7
</snippet></ROW><ROW><id>12665367</id><snippet>with hl7.client.MLLPClient(host, port) as client:
    client.send_message('test1')
</snippet></ROW><ROW><id>12665367</id><snippet>from hl7.client import MLLPClient
</snippet></ROW><ROW><id>12665596</id><snippet>global</snippet></ROW><ROW><id>12665596</id><snippet>global x
x = 0

def increment_x():
    x += 1
    return x
</snippet></ROW><ROW><id>12665596</id><snippet>x = 0

def increment_x():
    global x
    x += 1
    return x
</snippet></ROW><ROW><id>12665613</id><snippet>__repr__</snippet></ROW><ROW><id>12665613</id><snippet>__str__</snippet></ROW><ROW><id>12665613</id><snippet>class MyList(object):
    def __repr__(self):
        # iterate over elements and add each one to resulting string
</snippet></ROW><ROW><id>12665613</id><snippet>str()</snippet></ROW><ROW><id>12665613</id><snippet>__repr__</snippet></ROW><ROW><id>12665613</id><snippet>__str__</snippet></ROW><ROW><id>12665613</id><snippet>repr()</snippet></ROW><ROW><id>12665613</id><snippet>__str__</snippet></ROW><ROW><id>12665613</id><snippet>__repr__</snippet></ROW><ROW><id>12665999</id><snippet>class Foo(Document):
    structure = {
        'location': {
            'lat': float,
            'lon': float
        }
    }
    indexes = [
        {
            'fields': [('location', '2d'), ],
        }
    ]
</snippet></ROW><ROW><id>12666008</id><snippet>done</snippet></ROW><ROW><id>12666008</id><snippet>done</snippet></ROW><ROW><id>12666008</id><snippet>global done</snippet></ROW><ROW><id>12666008</id><snippet>done</snippet></ROW><ROW><id>12666008</id><snippet>def function():
    global done
    for loop:
        code
        if not comply:
            done = True
</snippet></ROW><ROW><id>12666008</id><snippet>global</snippet></ROW><ROW><id>12666030</id><snippet># define module_name somewhere
import types
module = types.ModuleType(module_name)
</snippet></ROW><ROW><id>12666030</id><snippet>import sys
sys.modules[module_name] = module
</snippet></ROW><ROW><id>12666030</id><snippet># source should the code to execute
# filename should be a pseudo-filename that the code's from
# (it doesn't actually have to exist; it's used for error messages)
code_object = compile(source, filename, 'exec')
</snippet></ROW><ROW><id>12666030</id><snippet>exec code_object in module.__dict__
</snippet></ROW><ROW><id>12666292</id><snippet>import urllib.request
import urllib.parse

data = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
data = data.encode('utf-8')
request = urllib.request.Request("http://requestb.in/xrbl82xr")

# adding charset parameter to the Content-Type header.
request.add_header("Content-Type","application/x-www-form-urlencoded;charset=utf-8")

f = urllib.request.urlopen(request, data)
print(f.read().decode('utf-8'))
</snippet></ROW><ROW><id>12666401</id><snippet>Invite.objects.values('email_address')</snippet></ROW><ROW><id>12666401</id><snippet>send_mail</snippet></ROW><ROW><id>12666401</id><snippet>Invite.objects.values_list('email_address', flat=True)</snippet></ROW><ROW><id>12666401</id><snippet>[]</snippet></ROW><ROW><id>12666401</id><snippet>send_mail('foo', 'bar', 'baz@example.com', Invite.objects.values_list(...))</snippet></ROW><ROW><id>12666466</id><snippet>root.iterchildren</snippet></ROW><ROW><id>12666466</id><snippet>order.iterchildren</snippet></ROW><ROW><id>12666466</id><snippet>order</snippet></ROW><ROW><id>12666466</id><snippet>&lt;order&gt;</snippet></ROW><ROW><id>12666466</id><snippet>for order in root.xpath('//order'):
    modlist = []
    for element in order.iterchildren('carType'):
        modlist.append ("%s" % (element.get('value')))

    for element in order.iter('upgrade'):
        modlist.append ("%s" % str.upper((element.get('type'))))
    # report grand total for order
</snippet></ROW><ROW><id>12666724</id><snippet>import sys
import traceback

try:
    do_something()
except:
    ex, val, tb = sys.exc_info()
    traceback.print_exception(ex, val, tb)
</snippet></ROW><ROW><id>12666750</id><snippet>self.response.out.write(template.render(initial_city = initial_city))</snippet></ROW><ROW><id>12666827</id><snippet> fib(2*n) = fib(n)^2 + fib(n-1)^2
 fib(2*n-1) = fib(n)*(2*fib(n-1)+fib(n))
</snippet></ROW><ROW><id>12666827</id><snippet> [ F_n     F_{n-1} ]      [ 1   1 ] ^N 
 [                 ]  =   [       ]
 [ F_{n-1} F_{n-2} ]      [ 1   0 ]
</snippet></ROW><ROW><id>12666827</id><snippet>O(log(N))</snippet></ROW><ROW><id>12666827</id><snippet>O(N)</snippet></ROW><ROW><id>12666827</id><snippet>def fib(n):                                                                                                            
    return round( ((1+math.sqrt(5))/2)**n / math.sqrt(5) )
</snippet></ROW><ROW><id>12666861</id><snippet>[word for word in lowers if len(word)&gt;=5 and sorted(word)==list(word)]
</snippet></ROW><ROW><id>12666861</id><snippet>#Lambda function to test condition
test = lambda x: len(x)&gt;=5 and ''.join(sorted(x))==x
#Returns list of elements for which test is True
filter(test, lowers)
</snippet></ROW><ROW><id>12666861</id><snippet>def filterwords(lst):
    for word in lst:
        if len(word)&gt;=5 and sorted(word)==list(word):
            yield word
</snippet></ROW><ROW><id>12666861</id><snippet>list(word).sort()</snippet></ROW><ROW><id>12666861</id><snippet>sorted(word)</snippet></ROW><ROW><id>12666861</id><snippet>&gt;&gt;&gt; lst = [1,100,10]
&gt;&gt;&gt; sorted(lst) #returns sorted list
[1, 10, 100]
&gt;&gt;&gt; lst #is still the same
[1, 100, 10]
&gt;&gt;&gt; lst.sort() #returns nothing
&gt;&gt;&gt; lst #has updated
[1, 10, 100]
</snippet></ROW><ROW><id>12666901</id><snippet>mask = diff&gt;1
</snippet></ROW><ROW><id>12666901</id><snippet>mask.shape = mask.shape + (1,)
mask = np.broadcast_arrays(img1Array, mask)[1]
</snippet></ROW><ROW><id>12666901</id><snippet>img1Array[mask] += img2Array[mask]
</snippet></ROW><ROW><id>12666901</id><snippet>imgResult=img1Array+img2Array[mask]
</snippet></ROW><ROW><id>12666912</id><snippet>&gt;&gt;&gt; [x for x in sents if not x.startswith('@$\t') and not x.startswith('#')]
['this doesnt', 'this shouldnt', 'this isnt', 'this musnt']
</snippet></ROW><ROW><id>12667032</id><snippet>list.(word)(1:len(word)/2:)</snippet></ROW><ROW><id>12667032</id><snippet>list.(word)</snippet></ROW><ROW><id>12667032</id><snippet>word[start:stop]</snippet></ROW><ROW><id>12667032</id><snippet>[word for word in lowers if word[:len(word)//2]==word[len(word)//2:]]</snippet></ROW><ROW><id>12667520</id><snippet>category, created = user.category_set.get_or_create(
    title__iexact=category_title,
    defaults={'title': category_title, 'description': category_title}
)
</snippet></ROW><ROW><id>12667576</id><snippet>globals</snippet></ROW><ROW><id>12667576</id><snippet>globals()[func_name]()
</snippet></ROW><ROW><id>12667576</id><snippet>sys.modules</snippet></ROW><ROW><id>12667576</id><snippet>getattr(sys.modules[__name__], func_name)()
</snippet></ROW><ROW><id>12667651</id><snippet>def freqCount(y_list):
        x =array(y_list)
        y = bincount(x)
        ii = nonzero(y)[0]
        freq = zip(ii,y[ii])
        f = open(fn_freq,'w')
        f.write('Distribution:\n')
        print 
        print "Distribution:"
        freq_dict={}
        for ff in freq:
            temp = "%s %s\n" % (ff[0],ff[1])
            f.write(temp)
            print ff[0],ff[1]
            freq_dict[ff[0]]=ff[1]
        f.close()
        return freq_dict
</snippet></ROW><ROW><id>12667986</id><snippet>cx_freeze</snippet></ROW><ROW><id>12667986</id><snippet>py2exe</snippet></ROW><ROW><id>12667986</id><snippet>py2app</snippet></ROW><ROW><id>12667986</id><snippet>python</snippet></ROW><ROW><id>12668172</id><snippet>r_</snippet></ROW><ROW><id>12668172</id><snippet>c_</snippet></ROW><ROW><id>12668172</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[1, 2], [3, 4]])
&gt;&gt;&gt; z = np.zeros((2, 3), dtype=a.dtype)
&gt;&gt;&gt; np.c_[a, z]
array([[1, 2, 0, 0, 0],
       [3, 4, 0, 0, 0]])
</snippet></ROW><ROW><id>12668172</id><snippet>np.concatenate</snippet></ROW><ROW><id>12668172</id><snippet>&gt;&gt;&gt; np.concatenate((a,z), axis=1)
array([[1, 2, 0, 0, 0],
       [3, 4, 0, 0, 0]])
</snippet></ROW><ROW><id>12668172</id><snippet>np.resize</snippet></ROW><ROW><id>12668172</id><snippet>np.ndarray.resize</snippet></ROW><ROW><id>12668427</id><snippet>\w</snippet></ROW><ROW><id>12668427</id><snippet>name = forms.RegexField(regex=r'(?u)\w+$', label=u'Name', required=True)
</snippet></ROW><ROW><id>12669066</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; del collections.OrderedDict.__del__
</snippet></ROW><ROW><id>12669676</id><snippet>category = post['category']</snippet></ROW><ROW><id>12669676</id><snippet>post['category']</snippet></ROW><ROW><id>12669676</id><snippet>id</snippet></ROW><ROW><id>12669676</id><snippet>category = Category.objects.get(id=post['category'])
</snippet></ROW><ROW><id>12669724</id><snippet>&gt;&gt;&gt; text = """&lt;Root&gt;
    &lt;Child name="child1" /&gt;
    &lt;Child name="child2" /&gt;
    &lt;Child name="child3" /&gt;
    &lt;Child name="child4" /&gt;
    &lt;Child name="child5" /&gt;
&lt;/Root&gt;"""
&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; root = etree.fromstring(text)
&gt;&gt;&gt; last_tag = root.xpath('/Root/Child[last()]')[0]
&gt;&gt;&gt; last_tag.attrib['name']
'child5'
</snippet></ROW><ROW><id>12669724</id><snippet>&gt;&gt;&gt; tag3 = root.xpath('/Root/Child[3]')[0]
&gt;&gt;&gt; tag3.attrib['name']
'child3'
</snippet></ROW><ROW><id>12670269</id><snippet>&gt;&gt;&gt; from nltk.stem import SnowballStemmer as SS
&gt;&gt;&gt; stemmer = SS('english')
&gt;&gt;&gt; stemmer.stem('dance')
u'danc'
&gt;&gt;&gt; stemmer.stem('danced')
u'danc'
&gt;&gt;&gt; stemmer.stem('dancing')
u'danc'
&gt;&gt;&gt; stemmer.stem('dancer')
u'dancer'
&gt;&gt;&gt; stemmer.stem('accordance')
u'accord'
</snippet></ROW><ROW><id>12670269</id><snippet>stem: (word, count)</snippet></ROW><ROW><id>12670269</id><snippet>So ['dancing', 'danced', 'dances', 'dance', 'dancer'] converts to {'danc': ('dance', 4), 'dancer': ('dancer', 1)}</snippet></ROW><ROW><id>12670269</id><snippet>import re
from nltk.stem import SnowballStemmer as SS

text = """Dancing has evolved many styles. African dance is interpretative.
Ballet, ballroom (such as the waltz), and tango are classical styles of dance
while square dancing and the electric slide are forms of step dances.
More recently evolved are breakdancing and other forms of street dance,
often associated with hip hop culture.
Every dance, no matter what style, has something in common.
It not only involves flexibility and body movement, but also physics.
If the proper physics are not taken into consideration, injuries may occur."""
#extract words
words = [word.lower() for word in re.findall(r'\w+',text)]

stemmer = SS('english')
counts = dict()

#count stems and extract shortest words possible
for word in words:
    stem = stemmer.stem(word)
    if stem in counts:
        shortest,count = counts[stem]
        if len(word) &lt; len(shortest):
            shortest = word
        counts[stem] = (shortest,count+1)
    else:
        counts[stem]=(word,1)

#convert {key: (word, count)} to [(word, count, key)] for convenient sort and print
output = [wordcount + (root,) for root,wordcount in counts.items()]
#trick to sort output by count (descending) &amp; word (alphabetically)
output.sort(key=lambda x: (-x[1],x[0]))
for item in output:
    print '%s:%d (Root: %s)' % item
</snippet></ROW><ROW><id>12670269</id><snippet>dance:7 (Root: danc)
and:4 (Root: and)
are:4 (Root: are)
of:3 (Root: of)
style:3 (Root: style)
the:3 (Root: the)
evolved:2 (Root: evolv)
forms:2 (Root: form)
has:2 (Root: has)
not:2 (Root: not)
physics:2 (Root: physic)
african:1 (Root: african)
also:1 (Root: also)
as:1 (Root: as)
associated:1 (Root: associ)
ballet:1 (Root: ballet)
ballroom:1 (Root: ballroom)
body:1 (Root: bodi)
breakdancing:1 (Root: breakdanc)
---truncated---
</snippet></ROW><ROW><id>12670269</id><snippet>&gt;&gt;&gt; from nltk.stem.wordnet import WordNetLemmatizer
&gt;&gt;&gt; lmtzr = WordNetLemmatizer()
&gt;&gt;&gt; lmtzr.lemmatize('dance')
'dance'
&gt;&gt;&gt; lmtzr.lemmatize('dancer')
'dancer'
&gt;&gt;&gt; lmtzr.lemmatize('dancing')
'dancing'
&gt;&gt;&gt; lmtzr.lemmatize('dances')
'dance'
&gt;&gt;&gt; lmtzr.lemmatize('danced')
'danced'
</snippet></ROW><ROW><id>12670269</id><snippet>&gt;&gt;&gt; stemmer.stem('dancitization')
u'dancit'
&gt;&gt;&gt; stemmer.stem('dancendence')
u'dancend'
&gt;&gt;&gt; #since dancitization gives us dancit, let's try dancization to get danc
&gt;&gt;&gt; stemmer.stem('dancization')
u'dancize'
&gt;&gt;&gt; stemmer.stem('dancation')
u'dancat'
</snippet></ROW><ROW><id>12670278</id><snippet>closing</snippet></ROW><ROW><id>12670278</id><snippet>contextlib</snippet></ROW><ROW><id>12670278</id><snippet>with</snippet></ROW><ROW><id>12670278</id><snippet>from contextlib import closing

def save_sql_stat(self, file_n, mode='w'):
    try:
        return closing(open(file_n, mode))
    except IOError as e:
        print e.message

sql = SqlBuilder()
with sql.save_sql_stat('testing.sql') as sql_out:
    pass # whatever
</snippet></ROW><ROW><id>12671299</id><snippet>urllib2</snippet></ROW><ROW><id>12671299</id><snippet>import requests
url = 'http://www.content.alternative.ac.nz/index.php/alternative/login/signIn'
r = requests.post(url, data={'username': 'username', 'password': 'password', 'remember': '1'})
</snippet></ROW><ROW><id>12671299</id><snippet>r.cookies</snippet></ROW><ROW><id>12671299</id><snippet>cookies = r.cookies
r = requests.get('http://www.content.alternative.ac.nz/index.php/alternative/article/view/176/202', cookies=cookies)
</snippet></ROW><ROW><id>12671357</id><snippet>cat /proc/${pid}/cmdline | tr '\0' ' '
</snippet></ROW><ROW><id>12671357</id><snippet>cmdline</snippet></ROW><ROW><id>12671357</id><snippet>tr</snippet></ROW><ROW><id>12671650</id><snippet>import xml.dom.minidom as  md

def print_node(root):
    if root.childNodes:
        for node in root.childNodes:
           if node.nodeType == node.ELEMENT_NODE:
               print node.tagName,"has value:",  node.nodeValue, "and is child of:", node.parentNode.tagName
               print_node(node)

dom = md.parse("ASL.xml")
root = dom.documentElement
print_node(root)
</snippet></ROW><ROW><id>12671778</id><snippet>from django.http import HttpResponseRedirect

def add_product(request)
    ...........................
    ...........................
    return HttpResponseRedirect('/')
</snippet></ROW><ROW><id>12671810</id><snippet>p[i][j]=max(0,vertical_score,horizontal_score,diagonal_score);
</snippet></ROW><ROW><id>12671810</id><snippet>import numpy

DELETION, INSERTION, MATCH = range(3)

def smith_waterman(seq1, seq2, insertion_penalty = -1, deletion_penalty = -1,
                   mismatch_penalty = -1, match_score = 2):
    """
    Find the optimum local sequence alignment for the sequences `seq1`
    and `seq2` using the Smith-Waterman algorithm. Optional keyword
    arguments give the gap-scoring scheme:

    `insertion_penalty` penalty for an insertion (default: -1)
    `deletion_penalty`  penalty for a deletion (default: -1)
    `mismatch_penalty`  penalty for a mismatch (default: -1)
    `match_score`       score for a match (default: 2)

    See &lt;http://en.wikipedia.org/wiki/Smith-Waterman_algorithm&gt;.

    &gt;&gt;&gt; for s in smith_waterman('AGCAGACT', 'ACACACTA'): print s
    ... 
    AGCAGACT-
    A-CACACTA
    """
    m, n = len(seq1), len(seq2)

    # Construct the similarity matrix in p[i][j], and remember how
    # we constructed it -- insertion, deletion or (mis)match -- in
    # q[i][j].
    p = numpy.zeros((m + 1, n + 1))
    q = numpy.zeros((m + 1, n + 1))
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            deletion = (p[i - 1][j] + deletion_penalty, DELETION)
            insertion = (p[i][j - 1] + insertion_penalty, INSERTION)
            if seq1[i - 1] == seq2[j - 1]:
                match = (p[i - 1][j - 1] + match_score, MATCH)
            else:
                match = (p[i - 1][j - 1] + mismatch_penalty, MATCH)
            p[i][j], q[i][j] = max((0, 0), deletion, insertion, match)

    # Yield the aligned sequences one character at a time in reverse
    # order.
    def backtrack():
        i, j = m, n
        while i &gt; 0 or j &gt; 0:
            assert i &gt;= 0 and j &gt;= 0
            if q[i][j] == MATCH:
                i -= 1
                j -= 1
                yield seq1[i], seq2[j]
            elif q[i][j] == INSERTION:
                j -= 1
                yield '-', seq2[j]
            elif q[i][j] == DELETION:
                i -= 1
                yield seq1[i], '-'
            else:
                assert(False)

    return [''.join(reversed(s)) for s in zip(*backtrack())]
</snippet></ROW><ROW><id>12672018</id><snippet>.pyc</snippet></ROW><ROW><id>12672018</id><snippet>.pyc</snippet></ROW><ROW><id>12672018</id><snippet>.pyc</snippet></ROW><ROW><id>12672018</id><snippet>PYTHONDONTWRITEBYTECODE</snippet></ROW><ROW><id>12672018</id><snippet>.pyc</snippet></ROW><ROW><id>12672018</id><snippet>apache2ctl -k graceful</snippet></ROW><ROW><id>12672018</id><snippet>mod_wsgi</snippet></ROW><ROW><id>12672071</id><snippet>Article</snippet></ROW><ROW><id>12672071</id><snippet>Article</snippet></ROW><ROW><id>12672071</id><snippet>select_related([depth=2])</snippet></ROW><ROW><id>12672071</id><snippet>Article</snippet></ROW><ROW><id>12672245</id><snippet>ssh -l foo 192.168.0.1 "echo '`cat my_script.py`' | python"
</snippet></ROW><ROW><id>12672245</id><snippet>ssh -l foo 192.168.0.1 "echo '`cat my_script.py`' | python -testSwitch -arg 0"
</snippet></ROW><ROW><id>12672618</id><snippet>http://localhost:8001/submit/?json=[]</snippet></ROW><ROW><id>12672689</id><snippet>None</snippet></ROW><ROW><id>12672689</id><snippet>for ids in Idlist:
    Loci = None
    Itag = None
    Ncbi = None  

    try:
        Loci = Locus.objects.get(Gen_ID=ids)

    except:
        #no locus info found
        pass
    ....
    #your for loop 
    ....
    # use attributes if objects found, else use ''
    writer.writerow([Itag.Gen_ID if Itag else '',
                   Itag.Solyc if Itag else '', 
                   Ncbi.defname if Ncbi else '', 
                   Loci.Lociname if Loci else ''])
</snippet></ROW><ROW><id>12672713</id><snippet>datetime.strptime</snippet></ROW><ROW><id>12672713</id><snippet>import datetime
datetime.datetime.strptime(your_string, "%Y-%m-%dT%H:%M:%S.%f")
</snippet></ROW><ROW><id>12672713</id><snippet>[0,999999]</snippet></ROW><ROW><id>12672713</id><snippet>ValueError</snippet></ROW><ROW><id>12672856</id><snippet>request = urllib2.Request(query)
request.add_header('Accept-encoding', 'gzip')
response = urllib2.urlopen(request)
if response.info().get('Content-Encoding') == 'gzip':
    buf = StringIO( response.read())
    f = gzip.GzipFile(fileobj=buf)
    data = f.read()
    result = json.loads(data)
</snippet></ROW><ROW><id>12672979</id><snippet>image = np.zeros((max_x, max_y))
image[coordinates] = 1
</snippet></ROW><ROW><id>12673076</id><snippet>Multiple of 3 &amp; 5  = (multiple of 3 + multiple of 5 - multiple of 15)
</snippet></ROW><ROW><id>12673076</id><snippet>Set</snippet></ROW><ROW><id>12673085</id><snippet>import datetime
import thread
import threading

def foo():
     print datetime.datetime.now()
     print threading.active_count()

for x in range(0,300): 
     t = threading.Timer(x + 1, foo)
     t.start()
</snippet></ROW><ROW><id>12673085</id><snippet>2012-10-01 13:21:07.328029
301
2012-10-01 13:21:08.328281
300
2012-10-01 13:21:09.328449
299
2012-10-01 13:21:10.328615
298
2012-10-01 13:21:11.328768
297
2012-10-01 13:21:12.329006
296
2012-10-01 13:21:13.329289
295
2012-10-01 13:21:14.329369
294
2012-10-01 13:21:15.329580
293
2012-10-01 13:21:16.329793
292
2012-10-01 13:21:17.329958
291
2012-10-01 13:21:18.330138
290
2012-10-01 13:21:19.330300                                                                                                                                                                                                                         
289                         
...
</snippet></ROW><ROW><id>12673195</id><snippet>dis.dis</snippet></ROW><ROW><id>12673195</id><snippet>disassemble_string</snippet></ROW><ROW><id>12673195</id><snippet>dis.py</snippet></ROW><ROW><id>12673195</id><snippet>dis.dis</snippet></ROW><ROW><id>12673195</id><snippet>Python 3.2.3 (default, Aug 13 2012, 22:28:10) 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis('heapq.nlargest(d,3)')
  1           0 LOAD_NAME                0 (heapq) 
              3 LOAD_ATTR                1 (nlargest) 
              6 LOAD_NAME                2 (d) 
              9 LOAD_CONST               0 (3) 
             12 CALL_FUNCTION            2 
             15 RETURN_VALUE         
</snippet></ROW><ROW><id>12673195</id><snippet>dis.dis</snippet></ROW><ROW><id>12673195</id><snippet>Python 2.7.3 (default, Aug 13 2012, 18:25:43) 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(compile('heapq.nlargest(d,3)', '&lt;none&gt;', 'eval'))
  1           0 LOAD_NAME                0 (heapq)
              3 LOAD_ATTR                1 (nlargest)
              6 LOAD_NAME                2 (d)
              9 LOAD_CONST               0 (3)
             12 CALL_FUNCTION            2
             15 RETURN_VALUE        
</snippet></ROW><ROW><id>12673195</id><snippet>1</snippet></ROW><ROW><id>12673195</id><snippet>&gt;&gt;&gt; co = compile('heapq.nlargest(d,3)', '&lt;none&gt;', 'eval')
&gt;&gt;&gt; co.co_code.encode('hex')
'6500006a010065020064000083020053'
</snippet></ROW><ROW><id>12673195</id><snippet>65</snippet></ROW><ROW><id>12673195</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>12673195</id><snippet>0000</snippet></ROW><ROW><id>12673195</id><snippet>6a</snippet></ROW><ROW><id>12673195</id><snippet>LOAD_ATTR</snippet></ROW><ROW><id>12673195</id><snippet>0100</snippet></ROW><ROW><id>12673195</id><snippet>0100</snippet></ROW><ROW><id>12673195</id><snippet>opcode</snippet></ROW><ROW><id>12673195</id><snippet>opname</snippet></ROW><ROW><id>12673195</id><snippet>opmap</snippet></ROW><ROW><id>12673195</id><snippet>&gt;&gt;&gt; opcode.opname[0x65]
'LOAD_NAME'
</snippet></ROW><ROW><id>12673195</id><snippet>ceval.c</snippet></ROW><ROW><id>12673195</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>12673195</id><snippet>LOAD_ATTR</snippet></ROW><ROW><id>12673195</id><snippet>co_names</snippet></ROW><ROW><id>12673195</id><snippet>&gt;&gt;&gt; co.co_names
('heapq', 'nlargest', 'd')
</snippet></ROW><ROW><id>12673195</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>12673195</id><snippet>co_consts</snippet></ROW><ROW><id>12673195</id><snippet>&gt;&gt;&gt; co.co_consts
(3,)
</snippet></ROW><ROW><id>12673195</id><snippet>CALL_FUNCTION</snippet></ROW><ROW><id>12673589</id><snippet>import subprocess
import sys

#on windows
#Get the fixed drives
#wmic logicaldisk get name,description
if 'win' in sys.platfrom:
    drivelist = subprocess.Popen('wmic logicaldisk get name,description', shell=True, stdout=subprocess.PIPE)
    drivelisto, err = drivelist.communicate()
    driveLines = drivelisto.split('\n')
elif 'linux' in sys.platform:
     listdrives=subprocess.Popen('mount', shell=True, stdout=subprocess.PIPE)
     listdrivesout, err=listdrives.communicate()
     for idx,drive in enumerate(filter(None,listdrivesout)):
         listdrivesout[idx]=drive.split()[2]
# guess how it should be on mac os, similar to linux , the mount command should 
# work, but I can't verify it...
elif 'macosx' ...
     do the rest....
</snippet></ROW><ROW><id>12673589</id><snippet>sys</snippet></ROW><ROW><id>12673589</id><snippet>procfs</snippet></ROW><ROW><id>12673589</id><snippet>python-dbus</snippet></ROW><ROW><id>12673816</id><snippet>threading.current_thread().name</snippet></ROW><ROW><id>12673816</id><snippet>threadName</snippet></ROW><ROW><id>12673816</id><snippet>threading.current_thread</snippet></ROW><ROW><id>12673816</id><snippet>threading.current_thread</snippet></ROW><ROW><id>12673816</id><snippet>extra</snippet></ROW><ROW><id>12673816</id><snippet>logging.Formatter('%(levelname)-8s %(asctime)s %(qthreadname)-15s %(message)s')
...
extras = {'qthreadname': get_qthreadname()}
logging.warning(message, extra=extras)
</snippet></ROW><ROW><id>12674343</id><snippet>class MyTableWidgetItem(QtGui.QTableWidgetItem):
    def __init__(self, text, sortKey):
            QtGui.QTableWidgetItem.__init__(self, text, QtGui.QTableWidgetItem.UserType)
            self.sortKey = sortKey

    #Qt uses a simple &lt; check for sorting items, override this to use the sortKey
    def __lt__(self, other):
            return self.sortKey &lt; other.sortKey 
</snippet></ROW><ROW><id>12674343</id><snippet>for i in range(0, self.rows):
    item = MyTableWidgetItem("Row: %s" %(i), i)
    self.ui.tableWidget.setItem(i, 1, item)
</snippet></ROW><ROW><id>12674358</id><snippet>__init__.py</snippet></ROW><ROW><id>12674358</id><snippet>import</snippet></ROW><ROW><id>12674358</id><snippet>module</snippet></ROW><ROW><id>12674446</id><snippet>\b\w\b</snippet></ROW><ROW><id>12674446</id><snippet>sw = r'\w+,\s+\w\b'
</snippet></ROW><ROW><id>12674446</id><snippet>\w</snippet></ROW><ROW><id>12674446</id><snippet>\s</snippet></ROW><ROW><id>12674446</id><snippet>\b</snippet></ROW><ROW><id>12674446</id><snippet>&gt;&gt;&gt; sw = r'\w+,\s+\w\b'
&gt;&gt;&gt; print re.match(sw,'Herb, A')
&lt;_sre.SRE_Match object at 0xb7242058&gt;
&gt;&gt;&gt; print re.match(sw,'Herb, Abc')
None
</snippet></ROW><ROW><id>12674475</id><snippet>x*y</snippet></ROW><ROW><id>12674475</id><snippet>x</snippet></ROW><ROW><id>12674475</id><snippet>x</snippet></ROW><ROW><id>12674475</id><snippet>y</snippet></ROW><ROW><id>12674604</id><snippet>headers['Content-Type'] = 'text/html'</snippet></ROW><ROW><id>12674609</id><snippet>class Person():
    people={}
    @classmethod
    def create(cls,name):
        person=Person(name)
        cls.people[name]=person
        return person
    def __init__(self, name):
        self.name = name
</snippet></ROW><ROW><id>12674906</id><snippet>v6 = re.findall(r'(?s)----------\s*LOW VOLTAGE SUMMARY BY AREA.*?\r(ACTIVITY|\(VFSCAN\)).+?',wholefile)
</snippet></ROW><ROW><id>12674947</id><snippet>chmod 0755</snippet></ROW><ROW><id>12675436</id><snippet>getFeedback</snippet></ROW><ROW><id>12675436</id><snippet>self.guess</snippet></ROW><ROW><id>12675436</id><snippet>makeGuess</snippet></ROW><ROW><id>12675436</id><snippet>common</snippet></ROW><ROW><id>12675436</id><snippet>self.common</snippet></ROW><ROW><id>12675436</id><snippet>class CodeBreaker:
    def __init__(self):
        self.guess_count = 0
        self.guess = 'ABCD'
        self.common = []

    def makeGuess(self):
        return self.guess

    def getFeedback(self, feedback):
        self.guess_count += 1
        if self.guess_count == 1:
            # ... your code here ...
            self.guess = 'BCDE'
        elif self.guess_count == 2:
            # ... your code here ...
            self.guess = 'CDEF'
        elif self.guess_count == 3:
            # ... your code here ...
        # ... and so on ...
</snippet></ROW><ROW><id>12675436</id><snippet>itertools.product</snippet></ROW><ROW><id>12675436</id><snippet>product</snippet></ROW><ROW><id>12675436</id><snippet>common</snippet></ROW><ROW><id>12675436</id><snippet>if guesscount &gt;= 4:</snippet></ROW><ROW><id>12675436</id><snippet>from itertools import product
from random import choice
from copy import copy

class CodeBreaker(object):
    all_codes = [''.join(c) for c in product(*['ABCDEF'] * 4)]

    def __init__(self):
        self.codes = copy(self.all_codes)
        self.guess = 'AABB'     # Best first guess!

    def makeGuess(self):
        return self.guess

    def getFeedback(self, feedback):
        self.codes = [c for c in self.codes if computeFeedback(c, self.guess) == feedback]
        self.guess = choice(self.codes)
</snippet></ROW><ROW><id>12675436</id><snippet>    def getFeedback(self, feedback):
        self.codes = [c for c in self.codes if computeFeedback(c, self.guess) == feedback]
        def key(g): return max(Counter(computeFeedback(c, g) for c in self.codes).values())
        self.guess = min(self.codes, key = key)
</snippet></ROW><ROW><id>12675436</id><snippet>    def getFeedback(self, feedback):
        self.codes = [c for c in self.codes if computeFeedback(c, self.guess) == feedback]
        if len(self.codes) == 1:
            self.guess = self.codes[0]
        else:
            def key(g): return max(Counter(computeFeedback(c, g) for c in self.codes).values())
            self.guess = min(self.all_codes, key = key)
</snippet></ROW><ROW><id>12675436</id><snippet>collections.Counter</snippet></ROW><ROW><id>12675436</id><snippet>from collections import Counter

def computeFeedback(code, guess):
    """
    Return the string `{white}w{black}b` where `black` is a count of the
    characters in `guess` that appear at the same position in `code`
    and `white` is a count of the characters in `guess` that appear at
    a different position in `code`.

    &gt;&gt;&gt; computeFeedback('ABCD', 'ACAD')
    '1w2b'
    &gt;&gt;&gt; computeFeedback('ABAB', 'AABB')
    '2w2b'
    &gt;&gt;&gt; computeFeedback('ABCD', 'DCBA')
    '4w0b'
    """
    w = sum((Counter(code) &amp; Counter(guess)).values())
    b = sum(c == g for c, g in zip(code, guess))
    return '{}w{}b'.format(w - b, b)
</snippet></ROW><ROW><id>12675587</id><snippet>Board</snippet></ROW><ROW><id>12675587</id><snippet>screen_to_board()</snippet></ROW><ROW><id>12675587</id><snippet>Board.move()</snippet></ROW><ROW><id>12675662</id><snippet>from collections import defaultdict

def count_chars(s):
    res = defaultdict(int)
    for char in s:
        res[char] += 1
    return res
</snippet></ROW><ROW><id>12675662</id><snippet>from collections import Counter, defaultdict

def test_counter(s):
    return Counter(s)

def test_get(s):
    res = {}
    for char in s:
        res[char] = res.get(char, 0) + 1
    return res

def test_in(s):
    res = {}
    for char in s:
        if char in res:
            res[char] += 1
        else:
            res[char] = 1
    return res

def test_defaultdict(s):
    res = defaultdict(int)
    for char in s:
        res[char] += 1
    return res


s = open('/usr/share/dict/words').read()
#eof

import timeit

test = lambda f: timeit.timeit(f + '(s)', setup, number=10)
setup = open(__file__).read().split("#eof")[0]
results = ['%.4f %s' % (test(f), f) for f in dir() if f.startswith('test_')]
print  '\n'.join(sorted(results))
</snippet></ROW><ROW><id>12675662</id><snippet>0.8053 test_defaultdict
1.3628 test_in
1.6773 test_get
2.3877 test_counter
</snippet></ROW><ROW><id>12676003</id><snippet>4, 16, 37, 58, 89, 145, 42, 20, 4</snippet></ROW><ROW><id>12676003</id><snippet>def isHappy(x):
    while True:
        if x == 1:
            return True
        if x == 4:
            return False
        x = nextNumberInSequence(x)
</snippet></ROW><ROW><id>12676382</id><snippet>def get_diagonal(t, x, y, length=4):
    rays = []
    diagonal_directions = [(1,1),(1,-1),(-1,1),(-1,-1)]
    for dx, dy in diagonal_directions:
        if not ((0 &lt;= (x+dx*(length-1)) &lt; len(t[0])) and
                (0 &lt;= (y+dy*(length-1)) &lt; len(t))):
            ray = []
        else:
            ray = [t[y+dy*i][x+dx*i] for i in range(length)]
        rays.append(ray)
    return rays
</snippet></ROW><ROW><id>12676382</id><snippet>rays</snippet></ROW><ROW><id>12676382</id><snippet>yield</snippet></ROW><ROW><id>12676382</id><snippet>x</snippet></ROW><ROW><id>12676382</id><snippet>y</snippet></ROW><ROW><id>12676382</id><snippet>In [48]: get_diagonal(t, 0, 0)
Out[48]: [[8, 49, 31, 23], [], [], []]

In [49]: get_diagonal(t, 19, 19)
Out[49]: [[], [], [], [48, 5, 4, 40]]

In [50]: get_diagonal(t, 5, 5)
Out[50]: [[3, 67, 20, 97], [3, 63, 42, 93], [3, 64, 68, 58], [3, 51, 23, 31]]

In [51]: get_diagonal(t, 5, 5, 3)
Out[51]: [[3, 67, 20], [3, 63, 42], [3, 64, 68], [3, 51, 23]]
</snippet></ROW><ROW><id>12676382</id><snippet>diagonal_directions</snippet></ROW><ROW><id>12676382</id><snippet>[]</snippet></ROW><ROW><id>12676382</id><snippet>[0,0,0,0]</snippet></ROW><ROW><id>12676382</id><snippet>[0,0,0,0]</snippet></ROW><ROW><id>12676410</id><snippet>doubleClicked</snippet></ROW><ROW><id>12676410</id><snippet>class TreeView(QtGui.QTreeView):    
    def edit(self, index, trigger, event):
        if trigger == QtGui.QAbstractItemView.DoubleClicked:
            print 'DoubleClick Killed!'
            return False
        return QtGui.QTreeView.edit(self, index, trigger, event)
</snippet></ROW><ROW><id>12676525</id><snippet>attributes</snippet></ROW><ROW><id>12676525</id><snippet>items</snippet></ROW><ROW><id>12676525</id><snippet>import xml.dom.minidom
n = xml.dom.minidom.parseString('&lt;n a="1" b="2" /&gt;').documentElement
attrs = dict(n.attributes.items())
assert attrs == {'a': '1', 'b': '2'}
</snippet></ROW><ROW><id>12676593</id><snippet>#initial data 
ln, = ax.plot(x,y)
#...some loop code
    ln.set_xdata(new_x)
    ln.set_ydata(new_y)
</snippet></ROW><ROW><id>12676622</id><snippet>fout</snippet></ROW><ROW><id>12676622</id><snippet>.write()</snippet></ROW><ROW><id>12676622</id><snippet>fout = [sys + " Weekly Summary.csv"]
</snippet></ROW><ROW><id>12676622</id><snippet>with open(sys+" Weekly Summary.csv", "w") as fout:
</snippet></ROW><ROW><id>12676622</id><snippet>&lt;snip&gt;
import glob
with open(sys + " Weekly Summary.csv", "w") as fout:
    for filename in glob.glob("*.nmap"):
        with open(filename, "rU") as f:
            for line in f:
                if not line.strip():
                    continue
                for t in tag:
                    if t in line:
                        fout.write(line)
                    else:
                       continue
</snippet></ROW><ROW><id>12676653</id><snippet># open file and parse values
with open('values.csv') as f:                                               
    searches = [x.split(',')[1] for x in f.read().splitlines()]

# function to check string
def checkString(text):
    # iterate over searches and check each one
    for search in searches:
        if search in text:
            return True
    return False
</snippet></ROW><ROW><id>12676670</id><snippet>json</snippet></ROW><ROW><id>12676670</id><snippet>import json
import urllib2
r = urllib2.urlopen('https://github.com/timeline.json')

with open("a.txt", "w") as f:
    for item in json.load(r) or []:
        try:
            f.write(item['repository']['name'] + "\n") 
        except KeyError:
            pass 
</snippet></ROW><ROW><id>12676817</id><snippet>globals().__builtins__</snippet></ROW><ROW><id>12677044</id><snippet>graph</snippet></ROW><ROW><id>12677044</id><snippet>get_extended_access_token</snippet></ROW><ROW><id>12677044</id><snippet>get_extended_access_token</snippet></ROW><ROW><id>12677044</id><snippet>$ pip install git+git://github.com/jgorset/facepy.git@b5153f460f2f52cef9a5e49a3b48b3fb8742356c
</snippet></ROW><ROW><id>12677044</id><snippet>GraphAPI</snippet></ROW><ROW><id>12677044</id><snippet>from facepy.utils import get_extended_access_token
from facepy import GraphAPI

long_lived_access_token, expires_at = get_extended_access_token(short_lived_access_token, application_id, application_secret_key)

graph = GraphAPI(long_lived_access_token)
graph.get('/me')
</snippet></ROW><ROW><id>12677145</id><snippet>ChoiceField</snippet></ROW><ROW><id>12677145</id><snippet>class SurveyForm(forms.Form):
    questions = _create_questions('How is my restaurant?',
                                  'How is the Food?',
                                  'How is the service?')

    def __init__(self, *args, **kwargs):
        # Create the form as usual
        super(SurveyForm, self).__init__(*args, **kwargs)

        # Add custom form fields dynamically
        for question in questions:
             self.fields[question[0]] = forms.ChoiceField(label=question[1],
                                                          widget=forms.RadioSelect(),
                                                          choices=answers_select)
    @classmethod
    def _create_questions(cls, *questions):
        return [(str(index), question) for index, question in enumerate(questions)]
</snippet></ROW><ROW><id>12677311</id><snippet>i=0
offset = 1
while i &lt;len(str_numbers):
    if offset&gt;1:
        int_number = int(str_numbers[i:i+offset])
    else:
        int_number = int(str_numbers[i])
    if i==5:
        offset=2
    i+=offset
</snippet></ROW><ROW><id>12677311</id><snippet>offset=1
i=0
while i&lt;len(str_numbers):
    if i==5:
        offset=2
    int_number = int(str_numbers[i:i+offset])
    i+=offset
</snippet></ROW><ROW><id>12677377</id><snippet>static PyObject *PyWin_DosDateTimeToTime(PyObject *self, PyObject *args)
{ 
    WORD wFatDate, wFatTime;
    if (!PyArg_ParseTuple(args, "hh", (WORD *)&amp;wFatDate, (WORD *)&amp;wFatTime))
        return NULL;
    FILETIME fd;
    If (!DosDateTimeToFileTime(wFatDate, wFatTime, &amp;fd))
      return PyWin_SetAPIError("DosDateTimeToFileTime");
}
</snippet></ROW><ROW><id>12677377</id><snippet>wFatDate [in]
The MS-DOS date. The date is a packed value with the following format.
    Bits    Description
    0-4     Day of the month (1–31)
    5-8     Month (1 = January, 2 = February, and so on)
    9-15    Year offset from 1980 (add 1980 to get actual year)

wFatTime [in]
The MS-DOS time. The time is a packed value with the following format.
    Bits    Description
    0-4     Second divided by 2
    5-10    Minute (0–59)
   11-15    Hour (0–23 on a 24-hour clock)
</snippet></ROW><ROW><id>12677967</id><snippet>static</snippet></ROW><ROW><id>12677967</id><snippet>static</snippet></ROW><ROW><id>12678070</id><snippet>while(s[j]!=''):
    a=a+s[j]
    j+=1
</snippet></ROW><ROW><id>12678070</id><snippet>j</snippet></ROW><ROW><id>12678070</id><snippet>s</snippet></ROW><ROW><id>12678070</id><snippet>while j &lt; len(s) and s[j] != '':
    a=a+s[j]
    j+=1
</snippet></ROW><ROW><id>12678252</id><snippet>os.path.realpath</snippet></ROW><ROW><id>12678252</id><snippet>import os

# ./foo -&gt; ./bar
filepath = "./foo"

if (os.path.realpath(filepath) != filepath):
    targetpath = os.path.realpath(filepath)

os.remove(filepath)
if (targetpath):
     os.remove(targetpath)
</snippet></ROW><ROW><id>12678409</id><snippet>Microsoft.CSharp.dll</snippet></ROW><ROW><id>12678409</id><snippet>dynamic</snippet></ROW><ROW><id>12679139</id><snippet>def run(self):
    if self.FLAG == True:
        pass
    else:
        print str(self.myName) + " is running."
</snippet></ROW><ROW><id>12679147</id><snippet>wins = {"player1": 0, "player2": 0}
this, other = "player1", "player2"
for i in range(rounds_count): # really, variable i don't use
    this, other = other, this # swap players
    if end_game():
        wins[this] +=1
    else:
        wins[other] += 1  
</snippet></ROW><ROW><id>12679494</id><snippet>poster.encode.MultipartParam</snippet></ROW><ROW><id>12679494</id><snippet>filetype</snippet></ROW><ROW><id>12679494</id><snippet>params = {'restore': open("Config.cfg", "rb"), 'upload': 'PC ==&gt;; Unit'}
</snippet></ROW><ROW><id>12679494</id><snippet>params = [MultipartParam('restore', open("Config.cfg", "rb"),
                         filetype = 'application/octet-stream'),
          ('upload', 'PC ==&gt;; Unit')]
</snippet></ROW><ROW><id>12679865</id><snippet>import sys
import time

while 1:
    print 'someoutput'
    sys.stdout.flush()
    time.sleep(1)
</snippet></ROW><ROW><id>12680276</id><snippet>my_array = np.ones((100,3), dtype=float)
</snippet></ROW><ROW><id>12680276</id><snippet>(x, y, z) = my_array.T
</snippet></ROW><ROW><id>12680276</id><snippet>.T</snippet></ROW><ROW><id>12680276</id><snippet>.transpose</snippet></ROW><ROW><id>12680276</id><snippet>my_array[:,0] **=2
my_array[:,1] *=2
my_array[:,2] **=0.5
</snippet></ROW><ROW><id>12680592</id><snippet>from pylab import *

import time

ion()

tstart = time.time()               # for profiling
x = arange(0,2*pi,0.01)            # x-array
line, = plot(x,sin(x))

for i in arange(1,200):
    line.set_ydata(sin(x+i/10.0))  # update the data
    draw()                         # redraw the canvas


print 'FPS:' , 200/(time.time()-tstart)
</snippet></ROW><ROW><id>12680719</id><snippet>{% for obj in list reversed %}</snippet></ROW><ROW><id>12681106</id><snippet>def getLoc(matrix, elem):
    row , col = 0 , 0
    for a in [j for i in matrix for j in i]:
        if a == elem:
            return row / len(matrix), col % len(matrix)
        col += 1
        row += 1
</snippet></ROW><ROW><id>12681178</id><snippet>{{ '%04d' % 42 }}

{{ 'Number: %d' % variable }}
</snippet></ROW><ROW><id>12681178</id><snippet>{{ '%d' | format(42) }}
</snippet></ROW><ROW><id>12681217</id><snippet>In [55]: pd.concat([Series(row['var2'], row['var1'].split(','))              
                    for _, row in a.iterrows()]).reset_index()
Out[55]: 
  index  0
0     a  1
1     b  1
2     c  1
3     d  2
4     e  2
5     f  2
</snippet></ROW><ROW><id>12681256</id><snippet>if(ans[wickets][balls][reqRuns]!=0)
    return ans[wickets][balls][reqRuns];
</snippet></ROW><ROW><id>12681256</id><snippet>f in saved</snippet></ROW><ROW><id>12681256</id><snippet>ans</snippet></ROW><ROW><id>12681256</id><snippet>memset(ans, 0x80, sizeof ans);</snippet></ROW><ROW><id>12681256</id><snippet>if (ans[wickets][balls][reqRuns] &gt;= 0)
</snippet></ROW><ROW><id>12681256</id><snippet>$ time ./a.out  &lt; spoj_inp.txt 
overs = 0.000000
18.03

real    0m0.023s
user    0m0.020s
sys     0m0.002s
</snippet></ROW><ROW><id>12681627</id><snippet>enumerate</snippet></ROW><ROW><id>12681627</id><snippet>for name, score in players.items():
      print name, " : ", score
</snippet></ROW><ROW><id>12681627</id><snippet>for index, (name, score) in enumerate(players.items()):
      print index, " : ", name, " : ", score
</snippet></ROW><ROW><id>12681627</id><snippet>for name in players: # or players.keys()
    print name
</snippet></ROW><ROW><id>12681627</id><snippet>for score in players.values():
    print score
</snippet></ROW><ROW><id>12681677</id><snippet>import csv
import numpy as np

data1 = np.arange(10)
data2 = np.arange(10)*2
data3 = np.arange(10)*3

writefile = '../test.csv'
fieldnames = ['data1','data2', 'data3']
with open( writefile, 'w' ) as f:
    writer = csv.writer(f)
    writer.writerow(fieldnames)
    writer.writerows(zip(data1, data2, data3))
</snippet></ROW><ROW><id>12681739</id><snippet>def find_char(key, row, col):
    return key[row][col]
</snippet></ROW><ROW><id>12681879</id><snippet>from collections import OrderedDict
t = "never gonna give you up"
OrderedDict.fromkeys(t).keys()
</snippet></ROW><ROW><id>12681879</id><snippet>['n', 'e', 'v', 'r', ' ', 'g', 'o', 'a', 'i', 'y', 'u', 'p']
</snippet></ROW><ROW><id>12682003</id><snippet>int('{:08b}'.format(n)[::-1], 2)
</snippet></ROW><ROW><id>12682003</id><snippet>b = '{:0{width}b}'.format(n, width=width)
int(b[::-1], 2)
</snippet></ROW><ROW><id>12682153</id><snippet>import functools

@functools.total_ordering
class ReverseCompare(object):
    def __init__(self, obj):
        self.obj = obj
    def __eq__(self, other):
        return isinstance(other, ReverseCompare) and self.obj == other.obj
    def __le__(self, other):
        return isinstance(other, ReverseCompare) and self.obj &gt;= other.obj
    def __str__(self):
        return str(self.obj)
    def __repr__(self):
        return '%s(%r)' % (self.__class__.__name__, self.obj)
</snippet></ROW><ROW><id>12682153</id><snippet>import heapq
letters = 'axuebizjmf'
heap = map(ReverseCompare, letters)
heapq.heapify(heap)
print heapq.heappop(heap) # prints z
</snippet></ROW><ROW><id>12682265</id><snippet>Model1</snippet></ROW><ROW><id>12682265</id><snippet>Model2</snippet></ROW><ROW><id>12682265</id><snippet>extra</snippet></ROW><ROW><id>12682265</id><snippet>Model1.objects.extra(where = ['field in (SELECT field from myapp_model2 WHERE ...)'])
</snippet></ROW><ROW><id>12682265</id><snippet>Model1.objects.raw('''SELECT * from myapp_model1
                   INNER JOIN myapp_model2
                   ON myapp_model1.field = myapp_model2.field
                   AND ...''')
</snippet></ROW><ROW><id>12682265</id><snippet>enumerate</snippet></ROW><ROW><id>12682265</id><snippet>enumerate(Model1.objects.all())
</snippet></ROW><ROW><id>12682265</id><snippet>Model1.objects.raw('''SELECT *, @row := @row + 1 AS row
                   FROM myapp_model1
                   JOIN (SELECT @row := 0) rowtable
                   INNER JOIN myapp_model2
                   ON myapp_model1.field = myapp_model2.field
                   AND ...''')
</snippet></ROW><ROW><id>12682379</id><snippet>BlackListEntry.objects.create(user_banned_id=int(user_id),user_banning_id=int(banning_id))
</snippet></ROW><ROW><id>12682379</id><snippet>BlackListEntry.objects.filter(user_banned__id=int(user_id),user_banning__id=int(banning_id))
</snippet></ROW><ROW><id>12682379</id><snippet>user_banned</snippet></ROW><ROW><id>12682379</id><snippet>user_banning</snippet></ROW><ROW><id>12682387</id><snippet>ctypes</snippet></ROW><ROW><id>12682387</id><snippet>POINTER</snippet></ROW><ROW><id>12682387</id><snippet>_type_</snippet></ROW><ROW><id>12682387</id><snippet>pc_int = POINTER(c_int)
class PInt(pc_int):
    _type_ = c_int # not pc_int
    ...
</snippet></ROW><ROW><id>12682585</id><snippet>import sys
try:
    ...
except Exception:
    t, e = sys.exc_info()[:2]
    print(e)
</snippet></ROW><ROW><id>12682691</id><snippet>def foo(m):

  for i in range(0, len(m), 2):

    for j in range(len(m[i])-1):
      current = tuple(m[i][j:(j+2)])
      mm = m[i+1]
      if(len(mm) % 2 != 0 or (len(mm) &gt; 1 and not type(mm[1][0]) is types.ListType)):
        currentl = mm[j]
        for k in range(0, len(currentl)-1):
          yield current, tuple(currentl[k:(k+2)])

      else:
        for res in foo(mm[2*j:2*j+2]):
          # this is for pretty print only
          if type(res) is types.TupleType and len(res)&gt;1 and not type(res[0]) is types.TupleType:
            yield current, res
          else:
            # pretty print again
            c = [current]
            c+= res
            yield tuple(c)
</snippet></ROW><ROW><id>12682691</id><snippet>tuple</snippet></ROW><ROW><id>12682691</id><snippet>arr = [
    [ 0. ,  4.5,  9. ],
    [
        [100.,  120.,  140.],
        [
            [ 1000.,  1100.,  1200.], 
            [ 1200.,  1300.,  1400.]
        ],
        [ 150.,  170.,  190.],
        [
            [ 1500.,  1600.,  1700.], 
            [ 1700.,  1800.]
        ]
    ]
]
</snippet></ROW><ROW><id>12682867</id><snippet>echo</snippet></ROW><ROW><id>12682987</id><snippet>plt.pause(1)</snippet></ROW><ROW><id>12682987</id><snippet>matplotlib.animate</snippet></ROW><ROW><id>12683000</id><snippet>for d in directories:
    if os.fork():
        # parent
        continue
    else:
        # child
        # handle d...
        break # don't keep going
</snippet></ROW><ROW><id>12683000</id><snippet>fork</snippet></ROW><ROW><id>12683127</id><snippet>write()</snippet></ROW><ROW><id>12683127</id><snippet>close()</snippet></ROW><ROW><id>12683127</id><snippet>data = [1,2,3,4,5,6]

out = open("output.txt", "w")

for i in data:
    out.write(str(i) + "\n")

out.close()
</snippet></ROW><ROW><id>12683250</id><snippet>&gt; s = "one two 3.4 5,6 seven.eight nine,ten"
&gt; parts = re.split('\s|(?&lt;!\d)[,.](?!\d)', s)
['one', 'two', '3.4', '5,6', 'seven', 'eight', 'nine', 'ten']
</snippet></ROW><ROW><id>12683250</id><snippet>\s</snippet></ROW><ROW><id>12683250</id><snippet>(?!\d)</snippet></ROW><ROW><id>12683250</id><snippet>(?&lt;!\d)</snippet></ROW><ROW><id>12683250</id><snippet>&gt; s = "one two 3.4 5,6 seven.eight nine,ten,1.2,a,5"
&gt; print re.split('\s|(?&lt;!\d)[,.]|[,.](?!\d)', s)
['one', 'two', '3.4', '5,6', 'seven', 'eight', 'nine', 'ten', '1.2', 'a', '5']
</snippet></ROW><ROW><id>12683250</id><snippet>"1.2,a,5"</snippet></ROW><ROW><id>12683250</id><snippet>["1.2", "a", "5"]</snippet></ROW><ROW><id>12683371</id><snippet>sys.stdout.write(re.sub(r'{0}','{1}',line.format(search,replace)))
</snippet></ROW><ROW><id>12683371</id><snippet>sys.stdout.write(re.sub('{0}'.format(search), '{0}'.format(replace), line))
</snippet></ROW><ROW><id>12683371</id><snippet>sys.stdout.write(re.sub(search, replace, line))
</snippet></ROW><ROW><id>12683458</id><snippet>select default_schema_name
, type_desc
, name
, create_date
from sys.database_principals
order by default_schema_name
, type_desc
, name
</snippet></ROW><ROW><id>12683458</id><snippet>create myschema.mytable as...
</snippet></ROW><ROW><id>12683575</id><snippet>python myscript.py ./mycommand "&gt;" myoutput.txt
</snippet></ROW><ROW><id>12683575</id><snippet>Popen</snippet></ROW><ROW><id>12683575</id><snippet>shell=True</snippet></ROW><ROW><id>12683575</id><snippet>shell=False</snippet></ROW><ROW><id>12683575</id><snippet>subprocess</snippet></ROW><ROW><id>12683697</id><snippet>scipy.stats.f_oneway(*archive.values())
</snippet></ROW><ROW><id>12683857</id><snippet>with open('youtube-dl', 'rb') as f:
    header = f.readline()
    zipfile = f.read()

with open('youtube-dl-new', 'wb') as f:
    print &gt;&gt; f, '#!/your/new/hashbang/line'
    f.write(zipfile)
</snippet></ROW><ROW><id>12683857</id><snippet>with open('youtube-dl', 'rb') as f:
    header = f.readline()
    zipfile = f.read()

with open('youtube-dl-new', 'wb') as f:
    print('#!/your/new/hashbang/line', file=f)
    f.write(zipfile)
</snippet></ROW><ROW><id>12683877</id><snippet>grepResults = subprocess.call([grepCmd], shell=true)</snippet></ROW><ROW><id>12683877</id><snippet>grepResults = subprocess.check_output([grepCmd], shell=true)</snippet></ROW><ROW><id>12683877</id><snippet>pid = int(grepResults.split()[1])'</snippet></ROW><ROW><id>12683877</id><snippet>grepResults = subprocess.check_output([grepCmd], shell=true).split()
for i in range(1, len(grepResults), 9):
  pid = grepResults[i]
  killPidCmd = "kill -9 " + pid
  subprocess.call([killPidCmd], shell=true)
</snippet></ROW><ROW><id>12683926</id><snippet>include</snippet></ROW><ROW><id>12683926</id><snippet>include</snippet></ROW><ROW><id>12683926</id><snippet>## urls.py
nested2 = patterns('',
   url(r'^index/$', 'index', name='index'),
)

nested1 = patterns('',
   url(r'^nested2/', include(nested2, namespace="nested2"),
   url(r'^index/$', 'index', name='index'),
)   

urlpatterns = patterns('',
   (r'^nested1/', include(nested1, namespace="nested1"),
)

reverse('nested1:nested2:index') # should output /nested1/nested2/index/
reverse('nested1:index') # should output /nested1/index/
</snippet></ROW><ROW><id>12683926</id><snippet>include</snippet></ROW><ROW><id>12683926</id><snippet>patterns</snippet></ROW><ROW><id>12683926</id><snippet>urls.py</snippet></ROW><ROW><id>12683930</id><snippet>json.dumps</snippet></ROW><ROW><id>12683930</id><snippet>serializers.py</snippet></ROW><ROW><id>12684156</id><snippet>mylist=[1,2,3,4] 
print("Orginal list L=", mylist)
n=len(mylist) 
l1=[] 
l2=[] 

for i in range(1, n+1):
    l1.append(mylist[0:i])
    l2.append(mylist[-i:])
print("L1=", l1)
print("L2=", l2)
</snippet></ROW><ROW><id>12684218</id><snippet>output</snippet></ROW><ROW><id>12684218</id><snippet>else</snippet></ROW><ROW><id>12684218</id><snippet>for</snippet></ROW><ROW><id>12684218</id><snippet>output</snippet></ROW><ROW><id>12684218</id><snippet>else</snippet></ROW><ROW><id>12684218</id><snippet>for</snippet></ROW><ROW><id>12684218</id><snippet>def algorithm(input):
    print input
    p = PorterStemmer()
    while 1:
        output = ''
        word = ''
        if input == '':
            break
        for c in input:
            if c.isalpha():
                word += c.lower()
            elif word:
                output += p.stem(word, 0,len(word)-1)
                word = ''
                output += c.lower()
        else:
            output += p.stem(word, 0, len(word)-1)  
        print output
        return output
</snippet></ROW><ROW><id>12684221</id><snippet>tuple</snippet></ROW><ROW><id>12684221</id><snippet>my_map[tuple(coords.T)]
</snippet></ROW><ROW><id>12684524</id><snippet>sys.stdout.write("{:&lt;7}{:&lt;51}{:&lt;25}\n".format(code, name, industry))
</snippet></ROW><ROW><id>12684524</id><snippet>sys.stdout.write("{0:&lt;7}{1:&lt;51}{2:&lt;25}\n".format(code, name, industry))
</snippet></ROW><ROW><id>12684542</id><snippet>import re
center_part = GPSLocation.split("/")[1]
N,W = centerpart.split()
N,W = N.split("\xb0")[0],W.split("\xb0")[0]
tpl = (N,W)
print tpl
</snippet></ROW><ROW><id>12684697</id><snippet>def index(request):
    latest_apps_list = list(App.objects.all().exclude(approved=False).order_by('name')[:20])
    app_images = Image.objects.filter(app__in=latest_apps_list).order_by('app__name')[:20]
    t = loader.get_template('apps/index.html')
    c = Context({
        'zipped_app_list': zip(latest_apps_list, list(app_images))
    })
    return HttpResponse(t.render(c))
</snippet></ROW><ROW><id>12684697</id><snippet>{% for app, image in zipped_app_list %}
    {{ app }}
    {{ image}}
{% endfor %}
</snippet></ROW><ROW><id>12685345</id><snippet>def view_function(request):
    if request.method == 'POST':
        if data_is_valid(request.POST):
            save_data(request.POST)
            return HttpResponseRedirect('/somewhere/good')
        else:
            return render('template', {'errors': what_went_wrong}
    else:
        return render('template')
</snippet></ROW><ROW><id>12685496</id><snippet>with open("data.txt") as infile:
    text = infile.read()
</snippet></ROW><ROW><id>12685496</id><snippet>import re
regex = re.compile(
    r"""^(?P&lt;device&gt;\S*)           # Match non-whitespace device name
    \suptime\sis\s                 # Match " uptime is "
    (?P&lt;uptime&gt;[^\r\n]*)           # Match until end of line --&gt; uptime
    .*?^System\simage\sfile\sis\s  # Match intervening text
    "[^:]*:                        # Match from quote to colon
    (?P&lt;sifilename&gt;[^"]*)          # Match everything until quote --&gt; filename
    .*?^cisco\s                    # Match intervening text
    (?P&lt;model&gt;\S*)                 # Match non-whitespace model name
    .*?^Processor\sboard\sID\s     # Match intervening text
    (?P&lt;serialno&gt;[^\r\n]*)         # Match until end of line --&gt; serial no""", 
    re.DOTALL | re.MULTILINE | re.VERBOSE)
match = regex.search(text)
</snippet></ROW><ROW><id>12685496</id><snippet>match.groups()</snippet></ROW><ROW><id>12685496</id><snippet>&gt;&gt;&gt; match.groups()
('core-router', '2 years, 5 weeks, 1 day, 5 hours, 47 minutes', 
's72033-advipservicesk9_wan-mz.122-33.SXI4.bin', 'WS-C6509-E', 'XXXXXXXXXX')
</snippet></ROW><ROW><id>12685496</id><snippet>import csv
with open("results.txt", "a") as outfile:
    outcsv = csv.Writer(outfile)
    outcsv.writerow(match.groups())
</snippet></ROW><ROW><id>12685696</id><snippet>import gzip

# your code as posted

zdir = { 'files':filestat, 'dirs':dirstat}
string_out = json.dumps(zdir, separators=(',',':'))    
f = gzip.open( '/root/test/json'+pa+'gz', 'wb')
f.write(string_out)
</snippet></ROW><ROW><id>12686150</id><snippet>registration_complete</snippet></ROW><ROW><id>12686150</id><snippet>registration_register</snippet></ROW><ROW><id>12686150</id><snippet>url(r'^accounts/register/$', register, {'backend': 'registration.backends.default.DefaultBackend','form_class': RegistrationFormEx}, name='registration_register'),
</snippet></ROW><ROW><id>12686150</id><snippet>name=registration_complete</snippet></ROW><ROW><id>12686419</id><snippet>self.data()</snippet></ROW><ROW><id>12686419</id><snippet>None</snippet></ROW><ROW><id>12686419</id><snippet>&gt;&gt;&gt; (code, resp) = None
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'NoneType' object is not iterable
</snippet></ROW><ROW><id>12686419</id><snippet>self.data()</snippet></ROW><ROW><id>12686419</id><snippet>(code, repl) = self.getreply()</snippet></ROW><ROW><id>12686419</id><snippet>None</snippet></ROW><ROW><id>12686419</id><snippet>self.data()</snippet></ROW><ROW><id>12686419</id><snippet>self.data()</snippet></ROW><ROW><id>12686419</id><snippet>sendmail()</snippet></ROW><ROW><id>12686419</id><snippet>if code != 354:
            #raise SMTPDataError(code, repl)
            print "Err"
else:
    ...
</snippet></ROW><ROW><id>12686419</id><snippet>raise</snippet></ROW><ROW><id>12686483</id><snippet>from PIL</snippet></ROW><ROW><id>12686483</id><snippet>from PIL import Image, ImageDraw, ImageChops
</snippet></ROW><ROW><id>12686557</id><snippet>distutils.dir_util.copy_tree</snippet></ROW><ROW><id>12686557</id><snippet>src</snippet></ROW><ROW><id>12686557</id><snippet>dst</snippet></ROW><ROW><id>12686557</id><snippet>shutil.copytree</snippet></ROW><ROW><id>12686557</id><snippet>cp</snippet></ROW><ROW><id>12686557</id><snippet>subprocess</snippet></ROW><ROW><id>12686855</id><snippet>test = datetime.datetime.now().replace(hour=17,minute=0,second=0,microsecond=0)
if datetime.datetime.now() &lt; test:
    test = test - datetime.timedelta(days=1)
</snippet></ROW><ROW><id>12686939</id><snippet>#!/usr/bin/env python

from collections import deque
from threading import Thread,Condition

QUEUE = deque()

def an_item_is_available():
    return bool(QUEUE)

def get_an_available_item():
    return QUEUE.popleft()

def make_an_item_available(item):
    QUEUE.append(item)

def consume(cv):
    cv.acquire()
    while not an_item_is_available():
        cv.wait()
    print 'We got an available item', get_an_available_item()
    cv.release()

def produce(cv):
    cv.acquire()
    make_an_item_available('an item to be processed')
    cv.notify()
    cv.release()

def main():
    cv = Condition()
    Thread(target=consume, args=(cv,)).start()    
    Thread(target=produce, args=(cv,)).start()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>12687081</id><snippet>datetime.date</snippet></ROW><ROW><id>12687081</id><snippet>datetime.datetime</snippet></ROW><ROW><id>12687081</id><snippet>datetime.datetime</snippet></ROW><ROW><id>12687081</id><snippet>datetime.datetime.combine()</snippet></ROW><ROW><id>12687081</id><snippet>import datetime

current_time = datetime.datetime.now()

# get friday, one week ago, at 16 o'clock
last_friday = (current_time.date()
    - datetime.timedelta(days=current_time.weekday())
    + datetime.timedelta(days=4, weeks=-1))
last_friday_at_16 = datetime.datetime.combine(last_friday, datetime.time(16))

# if today is also friday, and after 16 o'clock, change to the current date
one_week = datetime.timedelta(weeks=1)
if current_time - last_friday_at_16 &gt;= one_week:
    last_friday_at_16 += one_week
</snippet></ROW><ROW><id>12687304</id><snippet>def createManySomethings(Names, sizes):
    for (name, number) in zip(Names, sizes):
        createSomething([name], [number])
</snippet></ROW><ROW><id>12687312</id><snippet>TypeError</snippet></ROW><ROW><id>12687312</id><snippet>func</snippet></ROW><ROW><id>12687312</id><snippet>NoneType</snippet></ROW><ROW><id>12687312</id><snippet>subfunc</snippet></ROW><ROW><id>12687312</id><snippet>&gt;&gt;&gt; def superfunc(X):
...     def func(Y):
...             def subfunc(Z):
...                     return X + Y + Z
...             return subfunc
...     return func
... 
</snippet></ROW><ROW><id>12688208</id><snippet>DISTINCT</snippet></ROW><ROW><id>12688208</id><snippet>rating_category</snippet></ROW><ROW><id>12688208</id><snippet>from django.db.models import Max
entries = (UserRating.objects.filter(for_user = for_user, by_user = by_user)
           .values('rating_category')
           .annotate(last_created = Max('created'))
           .order_by('-last_created'))[:5]
</snippet></ROW><ROW><id>12688208</id><snippet>rating_category</snippet></ROW><ROW><id>12688208</id><snippet>last_created</snippet></ROW><ROW><id>12688408</id><snippet>In [52]: s1.align(s2, join='inner')
Out[52]:
(2012-08-10    1.1
2012-08-11    1.2
2012-08-15    1.7
2012-08-17    1.6
2012-08-18    1.1,
 2012-08-10    1.1
2012-08-11    1.2
2012-08-15    1.3
2012-08-17    1.2
2012-08-18    1.1)
</snippet></ROW><ROW><id>12688547</id><snippet>class ListProxy(object):
    def __init__(self, l):
        self.list = l
    def __getitem__(self, i):
        return self.list[i]
</snippet></ROW><ROW><id>12688547</id><snippet>@classmethod
def cmd(cls, argv=ListProxy(sys.argv)):
    " Executes the command. "
</snippet></ROW><ROW><id>12688547</id><snippet>@classmethod
def cmd(cls, argv=None):
    " Executes the command. "
    if argv is None:
        argv = sys.argv
</snippet></ROW><ROW><id>12688615</id><snippet>import itertools

L = 3
d = 1
counter = 0
with open("question1.xyz","w") as text_file:
    text_file.write("\ncomment goes here\n")
    for x,y,z in itertools.product(range(L),repeat = 3):
        text_file.write('H %f %f %f\n' % (x, y, z))
        counter=counter+1
</snippet></ROW><ROW><id>12689077</id><snippet>for i in range(1, len(grepResults), 9):
    pid = grepResults[i]
    killPidCmd = "kill -9 " + pid
    subprocess.call([killPidCmd], shell=True)
</snippet></ROW><ROW><id>12689077</id><snippet>kill</snippet></ROW><ROW><id>12689077</id><snippet>grepResults = subprocess.check_output([grepCmd], shell=True)
</snippet></ROW><ROW><id>12689077</id><snippet>pid</snippet></ROW><ROW><id>12689077</id><snippet>if 'grep' in line</snippet></ROW><ROW><id>12689077</id><snippet>import subprocess
grepCmd = "ps -aef | grep tomcat"
grepResults = subprocess.check_output([grepCmd], shell=True)
for line in grepResults.strip().split('\n'):
    if 'grep' in line: 
        continue
    pid = line.split()[1]
else:
    pid = None
# print pid
</snippet></ROW><ROW><id>12689077</id><snippet>pid</snippet></ROW><ROW><id>12689077</id><snippet>None</snippet></ROW><ROW><id>12689077</id><snippet>pid</snippet></ROW><ROW><id>12689253</id><snippet>%typemap(in) void* = char*;
</snippet></ROW><ROW><id>12689275</id><snippet>\s+</snippet></ROW><ROW><id>12689275</id><snippet>\s</snippet></ROW><ROW><id>12689275</id><snippet>[A-Z]</snippet></ROW><ROW><id>12689275</id><snippet>A-Z</snippet></ROW><ROW><id>12689275</id><snippet>A-Z</snippet></ROW><ROW><id>12689275</id><snippet>\. [A-Z]</snippet></ROW><ROW><id>12689275</id><snippet>Abs</snippet></ROW><ROW><id>12689275</id><snippet>S</snippet></ROW><ROW><id>12689275</id><snippet>S</snippet></ROW><ROW><id>12689275</id><snippet>Abs</snippet></ROW><ROW><id>12689275</id><snippet>Abs</snippet></ROW><ROW><id>12689275</id><snippet>S</snippet></ROW><ROW><id>12689275</id><snippet>Abs</snippet></ROW><ROW><id>12689275</id><snippet>S</snippet></ROW><ROW><id>12689275</id><snippet>(?&lt;!Abs)(?&lt;!S)(\. [A-Z])
</snippet></ROW><ROW><id>12689275</id><snippet>(?&lt;!Abs)(?&lt;!S)(\.\s+[A-Z])
</snippet></ROW><ROW><id>12689275</id><snippet>|</snippet></ROW><ROW><id>12689275</id><snippet>(?&lt;!Abs)(?&lt;!S)(\.\s+)(?!January|February|March)[A-Z]
</snippet></ROW><ROW><id>12689392</id><snippet>libdc1394</snippet></ROW><ROW><id>12689392</id><snippet>/dev/raw1394</snippet></ROW><ROW><id>12689626</id><snippet>&gt;&gt;&gt; def f(a,b,c,d,e):
...  print a,b,c,d,e
...
&gt;&gt;&gt; my_tuple = (1,2,3)
&gt;&gt;&gt; def apply(f, mid, *args, **kwargs):
...  return f(*args+mid, **kwargs)
...
&gt;&gt;&gt; apply(f, my_tuple, 0, e=4)
0 1 2 3 4
&gt;&gt;&gt;
&gt;&gt;&gt; apply(f, ('a', 'b'), '_', d='c', e='d')
_ a b c d
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12689662</id><snippet>pip</snippet></ROW><ROW><id>12689662</id><snippet>numpy</snippet></ROW><ROW><id>12689715</id><snippet>self.filter = 'keyword'</snippet></ROW><ROW><id>12689715</id><snippet>for dict in self.connections:
    if dict['id'] == self:
        dict['keyword'] = 'updated'
</snippet></ROW><ROW><id>12689715</id><snippet>for dict in [dict for dict in self.connections if dict['id'] == self]:
    dict['keyword'] == 'updated'
</snippet></ROW><ROW><id>12689715</id><snippet>for dict in self.connections:
    if dict['id'] == self:
        self.connections.remove(dict)
</snippet></ROW><ROW><id>12689808</id><snippet>admin.py</snippet></ROW><ROW><id>12689808</id><snippet>CommentsAdmin</snippet></ROW><ROW><id>12689808</id><snippet>from django.contrib import admin
from django.utils.translation import ugettext_lazy as _, ungettext
from django.contrib.comments.admin import CommentsAdmin
from django.contrib.comments import get_model

from comments_app.models import CommentWithAddedFields

class MyCommentsAdmin(CommentsAdmin):
    # Same fieldsets as parent admin, but include 'company'
    fieldsets = (
        (None,
           {'fields': ('content_type', 'object_pk', 'site')}
        ),
        (_('Content'),
           {'fields': ('user', 'user_name', 'user_email', 'user_url', 'company', 'comment')}
        ),
        (_('Metadata'),
           {'fields': ('submit_date', 'ip_address', 'is_public', 'is_removed')}
        ),
     )

# Only register the admin if the comments model is CommentWithAddedFields
# The equivalent section in django.contrib.comments.admin is what prevents 
# the admin from being registered when you set COMMENTS_APP = 'comments_app' 
# in your settings file
if get_model() is CommentWithAddedFields:
    admin.site.register(CommentWithAddedFields, MyCommentsAdmin)
</snippet></ROW><ROW><id>12689936</id><snippet>from celery import Celery
from celery.bin import Option
from celery.bootsteps import ConsumerStep
from kombu import Consumer, Exchange, Queue

class CustomConsumer(ConsumerStep):
   queue = Queue('custom', Exchange('custom'), routing_key='custom')

   def __init__(self, c, enable_custom_consumer=False, **kwargs):
       self.enable = self.enable_custom_consumer

   def get_consumers(self, connection):
       return [
           Consumer(connection.channel(),
               queues=[self.queue],
               callbacks=[self.on_message]),
       ]

   def on_message(self, body, message):
       print('GOT MESSAGE: %r' % (body, ))
       message.ack()


celery = Celery(broker='amqp://localhost//')
celery.steps['consumer'].add(CustomConsumer)
celery.user_options['worker'].add(
    Option('--enable-custom-consumer', action='store_true',
           help='Enable our custom consumer.'),
)
</snippet></ROW><ROW><id>12689936</id><snippet>get_consumer(connection)</snippet></ROW><ROW><id>12690144</id><snippet>urandom</snippet></ROW><ROW><id>12690144</id><snippet>pydev</snippet></ROW><ROW><id>12690198</id><snippet>c:\path\to\python1.5.2\python.exe your_python_script.py
</snippet></ROW><ROW><id>12690225</id><snippet>def fun(**args):
  param1 = args.get('param1', 'default_value')
  param2 = ... # etc

fun(param1='val1', param2 = 'val2')
</snippet></ROW><ROW><id>12690225</id><snippet>def main():
  #initialization 
  import access_tool
  con = database_connection()
  servers = query_database_for_servers()

  for server in servers:
    #assume server is a dict of values
    access_tool.add_user ( **server )
</snippet></ROW><ROW><id>12690225</id><snippet>add_user</snippet></ROW><ROW><id>12690225</id><snippet>def add_user ( **params ):
   # connect to params['server'] using params['env']
   # and add user with other params[]
</snippet></ROW><ROW><id>12690439</id><snippet>os.stat()</snippet></ROW><ROW><id>12690439</id><snippet>os.stat()</snippet></ROW><ROW><id>12690559</id><snippet>hg update --clean -r tip</snippet></ROW><ROW><id>12690559</id><snippet>[mpenning@host1 login]$ hg update --clean -r tip
resolving manifests
getting Protocol.py
getting Session.py
getting mp_getconf.py
getting mp_runcmd.py
4 files updated, 0 files merged, 0 files removed, 0 files unresolved
[mpenning@host1 login]$ hg up
resolving manifests
0 files updated, 0 files merged, 0 files removed, 0 files unresolved
[mpenning@host1 login]$
</snippet></ROW><ROW><id>12690625</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>12690625</id><snippet>#!/usr/bin/env python
import csv
import sys
import urllib2
from bs4 import BeautifulSoup # $ pip install beautifulsoup4

soup = BeautifulSoup(urllib2.urlopen('http://poj.org/status'))

writer = csv.writer(sys.stdout)
for tr in soup.find('table', 'a')('tr'):
    writer.writerow([td.get_text() for td in tr('td')])
</snippet></ROW><ROW><id>12690625</id><snippet>Run ID,User,Problem,Result,Memory,Time,Language,Code Length,Submit Time
10876151,yangfanhit,3155,Accepted,344K,219MS,C++,3940B,2012-10-02 16:42:45
10876150,BandBandRock,2503,Accepted,16348K,2750MS,G++,840B,2012-10-02 16:42:25
</snippet></ROW><ROW><id>12690824</id><snippet>buildNetwork(INPUTS, HIDDEN, OUTPUTS, hiddenclass=LSTMLayer, outclass=SigmoidLayer, recurrent=True, bias=True)
</snippet></ROW><ROW><id>12691465</id><snippet>data</snippet></ROW><ROW><id>12691465</id><snippet>ndarray</snippet></ROW><ROW><id>12691465</id><snippet>t1=data[:,0]</snippet></ROW><ROW><id>12691465</id><snippet>ndarray</snippet></ROW><ROW><id>12691465</id><snippet>t1</snippet></ROW><ROW><id>12691465</id><snippet>.shape</snippet></ROW><ROW><id>12691465</id><snippet>t1</snippet></ROW><ROW><id>12691465</id><snippet>ndarray</snippet></ROW><ROW><id>12691465</id><snippet>t1=np.asarray(data[:,0])</snippet></ROW><ROW><id>12691465</id><snippet>(1/1000)</snippet></ROW><ROW><id>12691465</id><snippet>(1./1000)</snippet></ROW><ROW><id>12691465</id><snippet>(1/1000)</snippet></ROW><ROW><id>12691465</id><snippet>0</snippet></ROW><ROW><id>12691719</id><snippet>cd /tmp
git clone https://github.com/einars/js-beautify.git
cd js-beautify/python
python setup.py install
</snippet></ROW><ROW><id>12691719</id><snippet>js-beautify /path/to/filename.js</snippet></ROW><ROW><id>12691993</id><snippet>import datetime
def date_by_adding_business_days(from_date, add_days):
    business_days_to_add = add_days
    current_date = from_date
    while business_days_to_add &gt; 0:
        current_date += datetime.timedelta(days=1)
        weekday = current_date.weekday()
        if weekday &gt;= 5: # sunday = 6
            continue
        business_days_to_add -= 1
    return current_date

#demo:
print '10 business days from today:'
print date_by_adding_business_days(datetime.date.today(), 10)
</snippet></ROW><ROW><id>12692068</id><snippet>def rk4(diff,  # accept an argument of the function to call
        x, dt)
    k1=diff(x)*dt
    k2=diff(x+k1/2)*dt
    k3=diff(x+k2/2)*dt
    k4=diff(x+k3)*dt
    return x+(k1+2*k2+2*k3+k4)/6
</snippet></ROW><ROW><id>12692068</id><snippet>rk4</snippet></ROW><ROW><id>12692068</id><snippet>from rk4 import rk4
import numpy as np

def diff(x):
    return x

def mercury(u0,phi0,dphi):
    x=np.array([u0,phi0])
    dt=2
    x=rk4(diff,  # here we send the function to rk4
          x, dt)
    return x
mercury(1,1,2)
</snippet></ROW><ROW><id>12692068</id><snippet>mercury</snippet></ROW><ROW><id>12692068</id><snippet>diff</snippet></ROW><ROW><id>12692068</id><snippet>mercury</snippet></ROW><ROW><id>12692068</id><snippet>mercury(diff, 1, 1, 2)</snippet></ROW><ROW><id>12692669</id><snippet>ab = [any(x) for x in zip(cd, ca, cp)]
</snippet></ROW><ROW><id>12692703</id><snippet>def grouper(n, iterable, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>12692703</id><snippet>detail</snippet></ROW><ROW><id>12692703</id><snippet>2</snippet></ROW><ROW><id>12692703</id><snippet>&gt;&gt;&gt; groups = grouper(len(header),detail)
&gt;&gt;&gt; list(groups)
[('Joe', 22), ('Dave', 43), ('Herb', 32)]
</snippet></ROW><ROW><id>12692703</id><snippet>&gt;&gt;&gt; [dict(zip(header,group)) for group in groups]
[{'Age': 22, 'Name': 'Joe'}, {'Age': 43, 'Name': 'Dave'}, {'Age': 32, 'Name': 'Herb'}]
</snippet></ROW><ROW><id>12692703</id><snippet>zip(header,group)</snippet></ROW><ROW><id>12692703</id><snippet>&gt;&gt;&gt; zip(["Name", "Age"],('Joe', 22))
[('Name', 'Joe'), ('Age', 22)]
</snippet></ROW><ROW><id>12692703</id><snippet>dict</snippet></ROW><ROW><id>12692703</id><snippet>&gt;&gt;&gt; dict([('Name', 'Joe'), ('Age', 22)])
{'Age': 22, 'Name': 'Joe'}
</snippet></ROW><ROW><id>12692765</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; sstr = 'uniprotkb:HIST1H3D(gene name)|uniprotkb:HIST1H3A(gene name)|uniprotkb:HIST1H3B(gene name)|uniprotkb:HIST1H3C(gene name)|uniprotkb:HIST1H3E(gene name)|uniprotkb:HIST1H3F(gene name)|uniprotkb:HIST1H3G(gene name)|uniprotkb:HIST1H3H(gene name)|uniprotkb:HIST1H3I(gene name)|uniprotkb:HIST1H3J(gene name)' 
&gt;&gt;&gt; re.findall(r'uniprotkb:([^(]*)\(gene name\)', sstr)

['HIST1H3D', 'HIST1H3A', 'HIST1H3B', 'HIST1H3C', 'HIST1H3E', 'HIST1H3F', 'HIST1H3G', 'HIST1H3H', 'HIST1H3I', 'HIST1H3J']
</snippet></ROW><ROW><id>12692910</id><snippet>from datetime import datetime
import pytz

st_tz = pytz.timezone('Europe/Stockholm')

utc_dt = datetime.utcfromtimestamp(posix_timestamp).replace(tzinfo=pytz.utc)
st_dt = st_tz.normalize(utc_dt.astimezone(st_tz))
print(st_dt.strftime('%Y-%m-%d %H:%M:%S %Z%z'))
</snippet></ROW><ROW><id>12692963</id><snippet>ii = 0
NNCat = []
NNCatelogue = []
while ii &lt;= len(lines):

    NNCat = (ev_id[ii], nn1[ii], nn2[ii], nn3[ii], nn4[ii], nn5[ii], nn6[ii], nn7[ii], nn8[ii], nn9[ii], nn10[ii], nn11[ii])
    NNCatelogue.append(NNCat)
    ii = ii + 1
</snippet></ROW><ROW><id>12692963</id><snippet>NNCat = []
NNCatelogue = []
for ii, line in enumerate(lines):

    NNCat = (ev_id[ii], nn1[ii], nn2[ii], nn3[ii], nn4[ii], nn5[ii], nn6[ii],
             nn7[ii], nn8[ii], nn9[ii], nn10[ii], nn11[ii])
    NNCatelogue.append(NNCat)
</snippet></ROW><ROW><id>12692963</id><snippet>ii</snippet></ROW><ROW><id>12692963</id><snippet>line</snippet></ROW><ROW><id>12692963</id><snippet>None</snippet></ROW><ROW><id>12692963</id><snippet>nn1</snippet></ROW><ROW><id>12692963</id><snippet>nn2</snippet></ROW><ROW><id>12692963</id><snippet>nn11</snippet></ROW><ROW><id>12692963</id><snippet>None</snippet></ROW><ROW><id>12693209</id><snippet>(.*)</snippet></ROW><ROW><id>12693209</id><snippet>?</snippet></ROW><ROW><id>12693209</id><snippet>=</snippet></ROW><ROW><id>12693209</id><snippet>\b(?:float\s+)?([a-zA-Z0-9]+)\s*(?:(\+|-|\*|\\)? =)
</snippet></ROW><ROW><id>12693354</id><snippet>with self.canvas</snippet></ROW><ROW><id>12693354</id><snippet>Color</snippet></ROW><ROW><id>12693354</id><snippet>Ellipse</snippet></ROW><ROW><id>12693354</id><snippet>with</snippet></ROW><ROW><id>12693354</id><snippet>with thing [as foo]:
</snippet></ROW><ROW><id>12693354</id><snippet>thing</snippet></ROW><ROW><id>12693354</id><snippet>contextlib.contextmanager</snippet></ROW><ROW><id>12693354</id><snippet>thing</snippet></ROW><ROW><id>12693354</id><snippet>as foo</snippet></ROW><ROW><id>12693354</id><snippet>Color</snippet></ROW><ROW><id>12693354</id><snippet>Ellipse</snippet></ROW><ROW><id>12693354</id><snippet>with self.canvas</snippet></ROW><ROW><id>12693354</id><snippet>kivy.graphics.instructions.Canvas</snippet></ROW><ROW><id>12693354</id><snippet>Color</snippet></ROW><ROW><id>12693354</id><snippet>Ellipse</snippet></ROW><ROW><id>12693354</id><snippet>self.canvas</snippet></ROW><ROW><id>12693354</id><snippet>def class CanvasBase(InstructionGroup):
    def __enter__(self):
        pushActiveCanvas(self)

    def __exit__(self, *largs):
        popActiveCanvas()
</snippet></ROW><ROW><id>12693354</id><snippet>__enter__</snippet></ROW><ROW><id>12693354</id><snippet>__exit__</snippet></ROW><ROW><id>12693354</id><snippet>with</snippet></ROW><ROW><id>12693354</id><snippet>kivy.graphics.instructions.Instruction</snippet></ROW><ROW><id>12693354</id><snippet>self.parent = getActiveCanvas()
</snippet></ROW><ROW><id>12693477</id><snippet>subprocess.getoutput</snippet></ROW><ROW><id>12693477</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>12693497</id><snippet>cam = Camera(0)
cam1 = Camera(1)
while True:
    i1 = cam.getImage()
    i2 = cam1.getImage()
    i1.sideBySide(i2).show()
</snippet></ROW><ROW><id>12693497</id><snippet>cam = Camera(0)
cam1 = Camera(1)
js = JPegStreamer()
js1 = JPegStreamer(8081)

while True:
    js.save(cam.getImage())
    js1.save(cam1.getImage())
</snippet></ROW><ROW><id>12693507</id><snippet>QObject</snippet></ROW><ROW><id>12693507</id><snippet>destroyed(QObject*)</snippet></ROW><ROW><id>12693507</id><snippet>__del__()</snippet></ROW><ROW><id>12693507</id><snippet>app.setQuitOnLastWindowClosed</snippet></ROW><ROW><id>12693507</id><snippet>Qt.WA_DeleteOnClose</snippet></ROW><ROW><id>12693507</id><snippet>False</snippet></ROW><ROW><id>12693507</id><snippet>closeEvent</snippet></ROW><ROW><id>12693507</id><snippet>Actually_Close()</snippet></ROW><ROW><id>12693507</id><snippet>destroyed</snippet></ROW><ROW><id>12693507</id><snippet>Connection Opened
Actually Close
Bye bye
</snippet></ROW><ROW><id>12693533</id><snippet>/usr/share/java</snippet></ROW><ROW><id>12693533</id><snippet>java</snippet></ROW><ROW><id>12693533</id><snippet>/usr/bin/java</snippet></ROW><ROW><id>12693533</id><snippet>/usr/share/</snippet></ROW><ROW><id>12693675</id><snippet>AES.new(...)</snippet></ROW><ROW><id>12693675</id><snippet>crypto.en(de)crypt("abcd")==crypto.en(de)crypt("abcd")</snippet></ROW><ROW><id>12693675</id><snippet>counter callback</snippet></ROW><ROW><id>12693675</id><snippet>secret</snippet></ROW><ROW><id>12693675</id><snippet>"secret"</snippet></ROW><ROW><id>12693675</id><snippet>secret</snippet></ROW><ROW><id>12693675</id><snippet>import os
import hashlib
import Crypto.Cipher.AES as AES

class Cipher:

        @staticmethod
        def md5sum( raw ):
                m = hashlib.md5()
                m.update(raw)
                return m.hexdigest()

        BS = AES.block_size

        @staticmethod 
        def pad( s ):
                """note that the padding is no necessary"""
                """return s + (Cipher.BS - len(s) % Cipher.BS) * chr(Cipher.BS - len(s) % Cipher.BS)"""
                return s

        @staticmethod
        def unpad( s ):
                """return s[0:-ord(s[-1])]"""
                return s

        def __init__(self, key):
                self.key = Cipher.md5sum(key)
                #the state of the counter callback 
                self.cnter_cb_called = 0 
                self.secret = None

        def _reset_counter_callback_state( self, secret ):
                self.cnter_cb_called = 0
                self.secret = secret

        def _counter_callback( self ):
                """
                this function should be stateful
                """
                self.cnter_cb_called += 1
                return self.secret[self.cnter_cb_called % Cipher.BS] * Cipher.BS


        def encrypt(self, raw):
                secret = os.urandom( Cipher.BS ) #random choose a "secret" which is not secret
                self._reset_counter_callback_state( secret )
                cipher = AES.new( self.key, AES.MODE_CTR, counter = self._counter_callback )
                raw_padded = Cipher.pad( raw )
                enc_padded = cipher.encrypt( raw_padded )
                return secret+enc_padded #yes, it is not secret

        def decrypt(self, enc):
                secret = enc[:Cipher.BS]
                self._reset_counter_callback_state( secret )
                cipher = AES.new( self.key, AES.MODE_CTR, counter = self._counter_callback )
                enc_padded = enc[Cipher.BS:] #we didn't encrypt the secret, so don't decrypt it
                raw_padded = cipher.decrypt( enc_padded )
                return Cipher.unpad( raw_padded )
</snippet></ROW><ROW><id>12693675</id><snippet>&gt;&gt;&gt; from Cipher import Cipher
&gt;&gt;&gt; x = Cipher("this is key")
&gt;&gt;&gt; "a"==x.decrypt(x.encrypt("a"))
True
&gt;&gt;&gt; "b"==x.decrypt(x.encrypt("b"))
True
&gt;&gt;&gt; "c"==x.decrypt(x.encrypt("c"))
True
&gt;&gt;&gt; x.encrypt("a")==x.encrypt("a")
False #though the input is same, the outputs are different
</snippet></ROW><ROW><id>12693702</id><snippet>https://sites.google.com/site/(your site name)/system/feeds/sitemap
</snippet></ROW><ROW><id>12693702</id><snippet>fields</snippet></ROW><ROW><id>12693714</id><snippet>namespace Hello
{
    void func()
    {
        printf("Hello World");
    }
}
</snippet></ROW><ROW><id>12693714</id><snippet>#! /usr/bin/env python

import sys
import os

import pybindgen
from pybindgen.typehandlers import base as typehandlers
from pybindgen import (ReturnValue, Parameter, Module, param, Function, FileCodeSink)
from pybindgen import (CppMethod, CppConstructor, CppClass, Enum)
from pybindgen.gccxmlparser import ModuleParser
from pybindgen.function import CustomFunctionWrapper
from pybindgen.cppmethod import CustomCppMethodWrapper

import generator_common

def my_module_gen():
    out = FileCodeSink(sys.stdout)
    pygen_file = open(sys.argv[2], "wt")

    #setup the module
    module = Module('eyon', cpp_namespace='::')
    module.add_include('"file.hpp"')
    module.add_include('"boost/lexical_cast.hpp"')

    module_parser = ModuleParser('eyon', '::')
    module_parser.enable_anonymous_containers = True

    module = module_parser.parse([sys.argv[1]], includes=['"file.hpp"'], pygen_sink=FileCodeSink(pygen_file),
                                 include_paths=["C:\\Users\\Richard\\Desktop\\code\\boost_1_51_0"])
    pygen_file.close()

    module.generate(out)


def main():
    if sys.argv[1] == '-d':
        del sys.argv[1]
        import pdb
        pdb.set_trace()
        my_module_gen()
    else:
        import os
        if "PYBINDGEN_ENABLE_PROFILING" in os.environ:
            try:
                import cProfile as profile
            except ImportError:
                my_module_gen()
            else:
                print &gt;&gt; sys.stderr, "** running under profiler"
                profile.run('my_module_gen()', 'foomodulegen-auto.pstat')
        else:
            my_module_gen()            

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>12693773</id><snippet>start</snippet></ROW><ROW><id>12693773</id><snippet>join</snippet></ROW><ROW><id>12693773</id><snippet>run</snippet></ROW><ROW><id>12693773</id><snippet>import multiprocessing, sys, time

def f(icount, _sleepTime = 1):
    for i in range(icount):
        time.sleep(_sleepTime)
        print(_sleepTime)

def main(args):
    m = multiprocessing.Process(target = f, args=(4, ))
    m.start()
    # f should be sleeping for 1 second so this print statement should come first
    print(m.is_alive())
    m.join()


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
</snippet></ROW><ROW><id>12693773</id><snippet>start</snippet></ROW><ROW><id>12693773</id><snippet>join</snippet></ROW><ROW><id>12693773</id><snippet>run</snippet></ROW><ROW><id>12693773</id><snippet>import multiprocessing, sys, time

def f(icount, _sleepTime = 1):
    for i in range(icount):
        time.sleep(_sleepTime)
        print(_sleepTime)

def create_process():
    return multiprocessing.Process(target = f, args=(4, ))

def main(args):
    m = create_process()
    m.start()
    for i in range(15):
        time.sleep(.5)
        if not m.is_alive():
            # m.start throws an error after first run
            print("restarting")
            m.join()
            m = create_process()
            m.start()
        print("{}".format(m.is_alive()))
    m.join()


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
</snippet></ROW><ROW><id>12693882</id><snippet>coord_mask = (x_coords &lt; 799) &amp; (y_coords &lt; 799)
for i in xrange(len(coord_mask)):
    distance = 0
    row_mask = coord_mask[i]
    row_x = x_coords[i, row_mask]
    row_y = y_coords[i, row_mask]
    mapvals = self.map[row_x, row_y] # advanced indexing
    ray_values, = (mapvals &lt;= 0).nonzero()
    ...
</snippet></ROW><ROW><id>12693985</id><snippet>app.yaml</snippet></ROW><ROW><id>12693985</id><snippet>admin_console:
  pages:
  - name: Interactive Console
    url: /admin/interactive
</snippet></ROW><ROW><id>12693985</id><snippet>handlers:
- url: /admin/interactive|/admin/interactive/execute
  script: google.appengine.ext.admin.application
  login: admin
</snippet></ROW><ROW><id>12694065</id><snippet>globals()</snippet></ROW><ROW><id>12694065</id><snippet>locals()</snippet></ROW><ROW><id>12694065</id><snippet>dir</snippet></ROW><ROW><id>12694271</id><snippet>def dfs(initial, goal, capacity):
    # These three variables form the "stack".
    closed_set = {initial}
    stack = [initial]
    gens = [_generate_states(initial, capacity)]

    while stack:
        cur = stack[-1]
        gen = gens[-1]
        try:
            state = next(gen)
        except StopIteration:
            # This node is done
            closed_set.discard(cur)
            gens.pop()
            stack.pop()
            continue

        if state == goal:
            return stack

        if state not in closed_set:
            closed_set.add(state)
            stack.append(state)
            gens.append(_generate_states(state, capacity))

    return None
</snippet></ROW><ROW><id>12694486</id><snippet>command</snippet></ROW><ROW><id>12694486</id><snippet>bind</snippet></ROW><ROW><id>12694486</id><snippet>&lt;Button-1&gt;</snippet></ROW><ROW><id>12694486</id><snippet>from Tkinter import *

def buttonClicked(e):
    e.widget["bg"] = "red"

root = Tk()

for x in range(5):
    for y in range(5):
        newButton = Button(root, width=10, height=2, bg="blue")
        newButton.bind("&lt;Button-1&gt;", buttonClicked)
        newButton.grid(row=y, column=x)

root.mainloop()
</snippet></ROW><ROW><id>12694486</id><snippet>from Tkinter import *

coords = {}

def buttonClicked(e):
    x,y = coords[e.widget]
    print "{},{} clicked".format(x,y)
    if x == 4 and y == 3:
        e.widget["bg"] = "red"

root = Tk()

for x in range(5):
    for y in range(5):
        newButton = Button(root, width=10, height=2, bg="blue")
        newButton.bind("&lt;Button-1&gt;", buttonClicked)
        newButton.grid(row=y, column=x)
        coords[newButton] = (x,y)

root.mainloop()
</snippet></ROW><ROW><id>12694486</id><snippet>from Tkinter import *

class ButtonGrid:
    def __init__(self, root):
        self.coords = {}
        for x in range(5):
            for y in range(5):
                newButton = Button(root, width=10, height=2, bg="blue")
                newButton.bind("&lt;Button-1&gt;", self.buttonClicked)
                newButton.grid(row=y, column=x)
                self.coords[newButton] = (x,y)

    def buttonClicked(self, e):
        x,y = self.coords[e.widget]
        print "{},{} clicked".format(x,y)
        if x == 4 and y == 3:
            e.widget["bg"] = "red"

root = Tk()
b = ButtonGrid(root)
root.mainloop()
</snippet></ROW><ROW><id>12694486</id><snippet>command</snippet></ROW><ROW><id>12694486</id><snippet>functools.partial</snippet></ROW><ROW><id>12694486</id><snippet>from Tkinter import *
import functools

def buttonClicked(widget, x, y):
    print "{},{} clicked".format(x,y)
    if x == 4 and y == 3:
        widget["bg"] = "red"

root = Tk()

for x in range(5):
    for y in range(5):
        newButton = Button(root, width=10, height=2, bg="blue")
        newButton["command"] = functools.partial(buttonClicked, newButton, x, y) 
        newButton.grid(row=y, column=x)

root.mainloop()
</snippet></ROW><ROW><id>12694493</id><snippet>png</snippet></ROW><ROW><id>12694493</id><snippet>frombuffer</snippet></ROW><ROW><id>12694493</id><snippet>StringIO</snippet></ROW><ROW><id>12694493</id><snippet>Image.open</snippet></ROW><ROW><id>12694493</id><snippet>img = Image.open(StringIO.StringIO(png))
</snippet></ROW><ROW><id>12694586</id><snippet>QObject</snippet></ROW><ROW><id>12694586</id><snippet>class vis(QtCore.QObject):
    def __init__(self, parent=None):
        super(vis, self).__init__(parent) # you are missing this line
                                          # also the `parent` arg
        self._oreList = []

        self._w = window.window()
        self._w.scanStarted.connect(self._scanOre)

    def _scanOre(self, rawText):
        print "main -&gt;", rawText
</snippet></ROW><ROW><id>12694730</id><snippet>customers</snippet></ROW><ROW><id>12694730</id><snippet>govIds</snippet></ROW><ROW><id>12694730</id><snippet>govId</snippet></ROW><ROW><id>12694730</id><snippet>for</snippet></ROW><ROW><id>12694730</id><snippet>def recursively_empty(e):
   if e.text:
       return False
   return all((recursively_empty(c) for c in e.iterchildren()))
</snippet></ROW><ROW><id>12694730</id><snippet>all()</snippet></ROW><ROW><id>12694730</id><snippet># Walk over all elements in the tree and remove all
# nodes that are recursively empty
context = etree.iterwalk(root)
for action, elem in context:
    parent = elem.getparent()
    if recursively_empty(elem):
        parent.remove(elem)
</snippet></ROW><ROW><id>12694730</id><snippet>&lt;customer&gt;
  &lt;govId&gt;
    &lt;id&gt;@&lt;/id&gt;
    &lt;idType&gt;SSN&lt;/idType&gt;
  &lt;/govId&gt;
&lt;/customer&gt;
</snippet></ROW><ROW><id>12694730</id><snippet>if e.text:</snippet></ROW><ROW><id>12694730</id><snippet>None</snippet></ROW><ROW><id>12694730</id><snippet>str.strip()</snippet></ROW><ROW><id>12694730</id><snippet>return all((recursively_empty(c) for c in e.getchildren()))
</snippet></ROW><ROW><id>12694730</id><snippet>recursively_empty(c)</snippet></ROW><ROW><id>12694730</id><snippet>all()</snippet></ROW><ROW><id>12694730</id><snippet>False</snippet></ROW><ROW><id>12694730</id><snippet>e.iterchildren()</snippet></ROW><ROW><id>12694730</id><snippet>e.getchildren()</snippet></ROW><ROW><id>12694856</id><snippet>c = np.r_[:100]
xi = c.reshape((100, 1, 1))
yi = c.reshape((1, 100, 1))
zi = np.empty((100, 100, 25), dtype=int)
for x in xrange(100):
    for y in xrange(100):
        zi[x,y] = np.arange(x*25/100, x*25/100+25) # or whatever other function

newarray = oldarray[xi, yi, zi]
</snippet></ROW><ROW><id>12694856</id><snippet>oldarray</snippet></ROW><ROW><id>12694856</id><snippet>xi</snippet></ROW><ROW><id>12694856</id><snippet>yi</snippet></ROW><ROW><id>12694856</id><snippet>zi</snippet></ROW><ROW><id>12694856</id><snippet>xi</snippet></ROW><ROW><id>12694856</id><snippet>yi</snippet></ROW><ROW><id>12694856</id><snippet>zi</snippet></ROW><ROW><id>12694856</id><snippet>xi</snippet></ROW><ROW><id>12694856</id><snippet>yi</snippet></ROW><ROW><id>12694856</id><snippet>zi</snippet></ROW><ROW><id>12694856</id><snippet>xi</snippet></ROW><ROW><id>12694856</id><snippet>yi</snippet></ROW><ROW><id>12694856</id><snippet>zi</snippet></ROW><ROW><id>12694856</id><snippet>newarray[i, j, k] = oldarray[xi[i, 0, 0], yi[0, j, 0], zi[i, j, k]]</snippet></ROW><ROW><id>12695344</id><snippet>/var/www</snippet></ROW><ROW><id>12695344</id><snippet>daniel@daniel:/var/www$ ls -la
total 12
drwxr-xr-x  2 root root 4096 Sep 15 11:43 .
drwxr-xr-x 14 root root 4096 Oct  2 08:54 ..
-rw-r--r--  1 root root  177 Sep 15 11:43 index.html
</snippet></ROW><ROW><id>12695344</id><snippet>www-data</snippet></ROW><ROW><id>12695344</id><snippet>www-data</snippet></ROW><ROW><id>12695344</id><snippet>/var/www</snippet></ROW><ROW><id>12695452</id><snippet>class MyList(object):
    def __init__(self, *xs):
        self._x = xs if all(xs) else tuple()
        self.head = xs[0] if xs else None

    @property
    def is_empty(self):
        return not self._x

    @property
    def tail(self):
        return MyList(self._x[1:]) if self._x[1:] else MyList([])

s = MyList(1, 2)
print s.tail.tail.tail.tail.tail.tail
</snippet></ROW><ROW><id>12695798</id><snippet>[Image.open][1]</snippet></ROW><ROW><id>12695798</id><snippet>Image.frombuffer</snippet></ROW><ROW><id>12695798</id><snippet>Image.fromstring</snippet></ROW><ROW><id>12695798</id><snippet>blob_reader = blobstore.BlobReader(key)
text_img = Image.open(blob_reader)
.........
</snippet></ROW><ROW><id>12696114</id><snippet>authors = []
directors = []
for persons in movie_json.get('results').get('authors'):
    for person in person:
        if person.get('person'):
            if person.get('key')=='author':
                authors.append(person.get('person'))
            elif person.get('key')=='director':
                directors.append(person.get('person'))
authors = None if authors == [] else ', '.join(authors)
directors = None if directors == [] else ', '.join(directors)
</snippet></ROW><ROW><id>12696287</id><snippet>db</snippet></ROW><ROW><id>12696287</id><snippet>ndb</snippet></ROW><ROW><id>12696287</id><snippet>setUp</snippet></ROW><ROW><id>12696287</id><snippet># Create a consistency policy that will simulate the High Replication consistency model.
self.policy = datastore_stub_util.PseudoRandomHRConsistencyPolicy(probability=0)

# Initialize the datastore stub with this policy.
self.testbed.init_datastore_v3_stub(consistency_policy=self.policy)
</snippet></ROW><ROW><id>12696386</id><snippet>IProtocol</snippet></ROW><ROW><id>12696386</id><snippet>ITransport</snippet></ROW><ROW><id>12696386</id><snippet>IProtocol</snippet></ROW><ROW><id>12696386</id><snippet>dataReceived</snippet></ROW><ROW><id>12696386</id><snippet>ITransport.write()</snippet></ROW><ROW><id>12696386</id><snippet>dataReceived</snippet></ROW><ROW><id>12696386</id><snippet>lineReceived</snippet></ROW><ROW><id>12696702</id><snippet>def example():
    Hand = [[1],[2],[3],[3],[4],[5],[2],[2],[1]]
    x = 0 
    sameRank = 0 

    while x &lt; len(Hand):
        y = 0
        while y &lt; len(Hand):
            if Hand[x][0] == Hand[y][0] and y != x:
                sameRank += 1
            y += 1
        x += 1

if __name__ == "__main__":
    example()
</snippet></ROW><ROW><id>12696702</id><snippet>def example():
    Hand = [[1],[2],[3],[3],[4],[5],[2],[2],[1]]
    sameRank = 0 

    for x in Hand:
        for y in Hand:
            if x[0] == y[0] and y != x:
                sameRank += 1

if __name__ == "__main__":
    example()
</snippet></ROW><ROW><id>12696702</id><snippet>Hand</snippet></ROW><ROW><id>12696702</id><snippet>x += 1</snippet></ROW><ROW><id>12696702</id><snippet>def example():
    Hand = [[1],[2],[3],[3],[4],[5],[2],[2],[1]]
    sameRank = sum(1 for x in Hand for y in Hand if x[0] == y[0] and y!=x)

if __name__ == "__main__":
    example()
</snippet></ROW><ROW><id>12696702</id><snippet>sum</snippet></ROW><ROW><id>12696702</id><snippet>1 for x in Hand for y in Hand if x[0] == y[0] and y!=x</snippet></ROW><ROW><id>12696702</id><snippet>sameRank</snippet></ROW><ROW><id>12696809</id><snippet>|</snippet></ROW><ROW><id>12696809</id><snippet>${}</snippet></ROW><ROW><id>12696809</id><snippet>unicode</snippet></ROW><ROW><id>12696809</id><snippet>default_filters</snippet></ROW><ROW><id>12696809</id><snippet>n</snippet></ROW><ROW><id>12696809</id><snippet>${"None"}</snippet></ROW><ROW><id>12696809</id><snippet>None</snippet></ROW><ROW><id>12696809</id><snippet>n</snippet></ROW><ROW><id>12696809</id><snippet>default_filters</snippet></ROW><ROW><id>12696809</id><snippet>None</snippet></ROW><ROW><id>12696809</id><snippet>n</snippet></ROW><ROW><id>12696809</id><snippet>default_filters</snippet></ROW><ROW><id>12696809</id><snippet>n</snippet></ROW><ROW><id>12697090</id><snippet>def distance(tup1,tup2):
    """
        This question is unanswerable unless you can specify this

        examples for 2d (you can write more general N-dimensional code if you need):
        cartesian: math.sqrt((tup2[0]-tup1[0])**2 + (tup2[1]-tup1[1])**2)
        manhattan: (tup2[0]-tup1[0]) + (tup2[1]-tup1[1])
    """
    return # YOUR CODE HERE

min(values, key=lambda x:distance(target,x))
</snippet></ROW><ROW><id>12697380</id><snippet>True</snippet></ROW><ROW><id>12697380</id><snippet>False</snippet></ROW><ROW><id>12697380</id><snippet>None</snippet></ROW><ROW><id>12697409</id><snippet>from Queue import Empty
from multiprocessing import Process, Queue
import time
import hashlib


class FillQueue(object):
    def __init__(self, q): 
        self.q = q 

    def run(self):
        i = 0 
        while i &lt; 5:
            print 'putting'
            self.q.put('foo %d' % i ) 
            i+=1
            time.sleep(.5)
        self.q.put('|STOP|')

class ConsumeQueue(object):
    def __init__(self, q): 
        self.q = q 

    def run(self):
        while True:
            try:
                value =  self.q.get(False)
                print value
                if value == '|STOP|':
                    print 'done'
                    break;
            except Empty:
                print 'Nothing to process atm'
                time.sleep(.2)


if __name__ == '__main__':
    q = Queue()
    f = FillQueue(q)
    c = ConsumeQueue(q)

    p1 = Process(target=f.run)
    p1.start()

    p2 = Process(target=c.run)
    p2.start()

    p1.join()
    p2.join()
</snippet></ROW><ROW><id>12697417</id><snippet>YAHOO.Finance.SymbolSuggest.ssCallback()</snippet></ROW><ROW><id>12697417</id><snippet>import urllib.request, json, re

# Y!F url
yf = 'http://d.yimg.com/autoc.finance.yahoo.com/autoc'

# Mock lookup
data = urllib.parse.urlencode({'query': 'Ford', 'callback': 'YAHOO.Finance.SymbolSuggest.ssCallback'})
data = data.encode('utf-8')
request = urllib.request.Request(yf)
response = urllib.request.urlopen(request, data)
j = json.loads(re.search(r'{.*}',response.readall().decode('utf-8')).group())
</snippet></ROW><ROW><id>12697550</id><snippet>list = ['a', 'b']
t = tuple(list)
print t
&gt;&gt; ('a', 'b')
</snippet></ROW><ROW><id>12697550</id><snippet>list = ['a', 'b']
s = ', '.join(list)
print s
&gt;&gt; a, b
</snippet></ROW><ROW><id>12697645</id><snippet>from threading import Thread
import time
import gtk, gobject, urllib

URL = 'http://releases.ubuntu.com//precise/ubuntu-12.04.1-desktop-i386.iso'

def download(url):
    filename = url.split('/')[-1]
    out = open(filename, 'wb')
    gobject.idle_add(label.set_text, "connecting...")
    f = urllib.urlopen(url)
    buffer = f.read(1024)
    counter = 0
    while buffer:
        counter += len(buffer)
        out.write(buffer)
        msg = "downloaded {0:,} bytes".format(counter)
        gobject.idle_add(label.set_text, msg)
        buffer = f.read(1024)
    out.close()
    gobject.idle_add(label.set_text, "download complete")

def clicked(button):
    url = entry.get_text()
    Thread(target=download, args=(url,)).start()


gtk.gdk.threads_init()
win = gtk.Window()
win.set_default_size(400, 100)
entry = gtk.Entry()
entry.set_text(URL)
label = gtk.Label("Press the button")
button = gtk.Button(label="Download")
button.connect('clicked', clicked)

box = gtk.VBox()
box.pack_start(entry)
box.pack_start(label)
box.pack_start(button)
win.add(box)

win.show_all()

gtk.main()
</snippet></ROW><ROW><id>12697654</id><snippet>geopy</snippet></ROW><ROW><id>12697654</id><snippet>from geopy import geocoders

g = geocoders.Google()
place, (lat, lng) = g.geocode("10900 Euclid Ave in Cleveland")
print "%s: %.5f, %.5f" % (place, lat, lng)
</snippet></ROW><ROW><id>12697732</id><snippet>--initial</snippet></ROW><ROW><id>12697732</id><snippet>--initial</snippet></ROW><ROW><id>12697777</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>12697777</id><snippet>from multiprocessing import Pool
def upload(file): 
    ftp = ftplib.FTP('domainname.com')
    ftp.login("username","password")
    f = open(x,'rb')
    ftp.storbinary('STOR %s' %x, f)
    f.close()
    ftp.quit()


infiles = [file1,file2,file3.....filen]

pool = Pool(10) # submit 10 at once
pool.map(upload,infiles)
</snippet></ROW><ROW><id>12697777</id><snippet>map</snippet></ROW><ROW><id>12697777</id><snippet>pool.map</snippet></ROW><ROW><id>12697777</id><snippet>map</snippet></ROW><ROW><id>12698063</id><snippet>from collections import defaultdict
from collections import Counter
from itertools import chain

L = [[['A', 'uni'], [['B', 'uni'], ['C', 'uni'], ['D', 'uni'], ['E', 'uni']]], [['E', 'uni'], [['A', 'uni'], ['F', 'uni'], ['G', 'uni']]]]

d = defaultdict(Counter)
for publication in L:
    authors = [tuple(a) for a in chain([publication[0]], publication[1])]
    for author in authors:
        d[author].update(authors)

for k, v in d.iteritems():
    print k, [(author[0], author[1], counter)
              for author, counter in v.iteritems() if author[0] != k[0]]
</snippet></ROW><ROW><id>12698063</id><snippet>('B', 'uni') [('A', 'uni', 1), ('D', 'uni', 1), ('E', 'uni', 1), ('C', 'uni', 1)]
('A', 'uni') [('B', 'uni', 1), ('F', 'uni', 1), ('D', 'uni', 1), ('G', 'uni', 1), ('E', 'uni', 2), ('C', 'uni', 1)]
('F', 'uni') [('A', 'uni', 1), ('G', 'uni', 1), ('E', 'uni', 1)]
('D', 'uni') [('A', 'uni', 1), ('B', 'uni', 1), ('E', 'uni', 1), ('C', 'uni', 1)]
('G', 'uni') [('A', 'uni', 1), ('E', 'uni', 1), ('F', 'uni', 1)]
('E', 'uni') [('B', 'uni', 1), ('A', 'uni', 2), ('F', 'uni', 1), ('D', 'uni', 1), ('G', 'uni', 1), ('C', 'uni', 1)]
('C', 'uni') [('A', 'uni', 1), ('D', 'uni', 1), ('B', 'uni', 1), ('E', 'uni', 1)]
</snippet></ROW><ROW><id>12698118</id><snippet>from django import forms
from django.forms import ModelForm
from django.db import models

class Poll(models.Model):
    RATING_CHOICES = [(i,i) for i in range(1,6)]
    question = models.TextField()
    rating = models.PositiveSmallIntegerField(choices=RATING_CHOICES)


class PollForm(ModelForm):
    class Meta:
        model = Poll
        fields = ('question', 'rating')
        widgets = {'rating': forms.RadioSelect}
</snippet></ROW><ROW><id>12698118</id><snippet>import csv

from django.http import render_to_response, HttpResponseRedirect
from myproject.forms import PollForm

def myview(request):
    context = {}
    if request.method == 'POST'
        form = PollForm(request.POST)
        if form.is_valid():
            obj = form.save()
            with open('foo.csv', 'ab') as f:  # Shamelessly stolen from Yuji
                writer = csv.writer(f)
                writer.writerow([obj.question, obj.rating])
            return HttpResponseRedirect('somesuccesspage')
    # More boring code here to handle the GET requests and stuff..
    context['form'] = form
    return render_to_response('somepath/mytempplate.html', context)
</snippet></ROW><ROW><id>12698195</id><snippet>import threading, subprocess, random, time, pprint
from subprocess import check_output

class WorkerThread(threading.Thread):
    def __init__(self, user, host, script, runner):
        super(WorkerThread, self).__init__()
        self.user = user
        self.host = host
        self.script = script
        self.runner = runner

    def run(self):
        cmd = "ssh {user}@{host} 'bash -s' &lt; {script}".format(**self.__dict__)
        self.runner.complete(check_output(cmd, shell=True))

class Runner(object):
    def complete(self, output):
        print 'output:\n', output

WorkerThread('marwan', 'homebox', 'local_script.sh', Runner()).start()
</snippet></ROW><ROW><id>12698195</id><snippet>from fabric.api import run

def anonymous():
    run("uname -a")
</snippet></ROW><ROW><id>12698726</id><snippet>pynotify</snippet></ROW><ROW><id>12698873</id><snippet>sys.path</snippet></ROW><ROW><id>12698873</id><snippet>import bar</snippet></ROW><ROW><id>12698873</id><snippet>from bar import app
</snippet></ROW><ROW><id>12698873</id><snippet>sys.path</snippet></ROW><ROW><id>12698873</id><snippet>foo</snippet></ROW><ROW><id>12698873</id><snippet>import foo.XXX</snippet></ROW><ROW><id>12698873</id><snippet>from foo import XXX</snippet></ROW><ROW><id>12698873</id><snippet>from foo.XXX import YYY</snippet></ROW><ROW><id>12698990</id><snippet>for virus in viruses[:]:
    # do stuff
    viruses.remove(virus)  # remove "virus" from the original list
</snippet></ROW><ROW><id>12698990</id><snippet>viruses[:]</snippet></ROW><ROW><id>12698990</id><snippet>viruses</snippet></ROW><ROW><id>12698990</id><snippet>list(oldlist)</snippet></ROW><ROW><id>12699065</id><snippet>def set_properties(names_to_docs):
    def decorator(cls):
        for name, doc in names_to_docs.items():
            prop = property((lambda self: getattr(self, '_{}'.format(name))),
                            (lambda self, val: setattr(self, '_{}'.format(name), val),
                            doc=doc)
            setattr(cls, name, prop)
        return cls
    return decorator
</snippet></ROW><ROW><id>12699065</id><snippet>&gt;&gt;&gt; @set_properties({'a': 'This is a', 'b': 'This is b'})
&gt;&gt;&gt; class Test:
...     def __init__(self):
...         self._a = 1
...         self._b = 2
... 
&gt;&gt;&gt; print(Test.a.__doc__)
This is a
&gt;&gt;&gt; Test().a
1
</snippet></ROW><ROW><id>12699099</id><snippet>OrderedDict</snippet></ROW><ROW><id>12699099</id><snippet>from collections import OrderedDict

tmp = OrderedDict()
for point in zip(x, y, z):
    tmp.setdefault(point[:2], point)

mypoints = tmp.values()
</snippet></ROW><ROW><id>12699099</id><snippet>from itertools import groupby

keyfunc = lambda p: p[:2]
mypoints = []
for k, g in groupby(sorted(zip(x, y, z), key=keyfunc), keyfunc):
    mypoints.append(list(g)[0])
</snippet></ROW><ROW><id>12699104</id><snippet>msg=EmailMessage(Subject, message.render(Context()),
    from_email, Invite.objects.values_list('email_address', flat=True))
</snippet></ROW><ROW><id>12699163</id><snippet>import random
api = ['login', 'createOrder', 'scanBarCode', 'addLine', 'checkout']
numberOfLines = random.randint(1, 10)   # replace 10 with your desired maximum
for apiName in api:
    if apiName == 'scanBarCode':
        for i in range(numberOfLines):
            # call API and addLine
    else:
        # call API
</snippet></ROW><ROW><id>12699412</id><snippet>D</snippet></ROW><ROW><id>12699412</id><snippet>R</snippet></ROW><ROW><id>12699412</id><snippet>D</snippet></ROW><ROW><id>12699412</id><snippet>R</snippet></ROW><ROW><id>12699412</id><snippet>40!/(20!*(40-20)!)
</snippet></ROW><ROW><id>12699412</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.factorial(40) / (math.factorial(20) * math.factorial(40-20))
137846528820L
</snippet></ROW><ROW><id>12699412</id><snippet>D</snippet></ROW><ROW><id>12699412</id><snippet>R</snippet></ROW><ROW><id>12699412</id><snippet>itertools.combinations(range(40), 20)</snippet></ROW><ROW><id>12699412</id><snippet>D</snippet></ROW><ROW><id>12699462</id><snippet>import numpy as np

class AutoArray2(np.ndarray):
    def __new__(cls, input_array):
        # Input array is an already formed ndarray instance
        # We first cast to be our class type
        obj = np.asarray(input_array).view(cls)
        return obj
    def __array_finalize__(self, obj):
        if obj is None: return
    def __setitem__(self, coords, value):
        print("HERE")

a = np.array([[1,2],[2,3]])
b = AutoArray2(a)
b[0,0] = 1
</snippet></ROW><ROW><id>12699462</id><snippet>HERE
</snippet></ROW><ROW><id>12699462</id><snippet>view(cls)</snippet></ROW><ROW><id>12699462</id><snippet>ndarray</snippet></ROW><ROW><id>12699462</id><snippet>a[0,0] = 1</snippet></ROW><ROW><id>12699462</id><snippet>a</snippet></ROW><ROW><id>12699462</id><snippet>ndarray</snippet></ROW><ROW><id>12699462</id><snippet>b</snippet></ROW><ROW><id>12699462</id><snippet>__setitem__</snippet></ROW><ROW><id>12699462</id><snippet>b[0,0] = 1</snippet></ROW><ROW><id>12699884</id><snippet>3&gt;&gt; print(bytes((219,)).decode('cp437'))
█
3&gt;&gt; ord(bytes((219,)).decode('cp437'))
9608
3&gt;&gt; hex(9608)
'0x2588'
3&gt;&gt; print('\u2588')
█
</snippet></ROW><ROW><id>12699981</id><snippet>ElementTree</snippet></ROW><ROW><id>12700049</id><snippet>m += m
</snippet></ROW><ROW><id>12700049</id><snippet>m</snippet></ROW><ROW><id>12700049</id><snippet>m</snippet></ROW><ROW><id>12700049</id><snippet>0</snippet></ROW><ROW><id>12700049</id><snippet>0</snippet></ROW><ROW><id>12700049</id><snippet>m += i
</snippet></ROW><ROW><id>12700216</id><snippet>prices = [30.4, 32.5, 31.7, 31.2, 32.7, 34.1, 35.8, 37.8, 36.3, 36.3, 35.6]

for a, b in zip(prices[::1], prices[1::1]):
    print 100 * (b - a) / a
</snippet></ROW><ROW><id>12700216</id><snippet>print [100 * (b - a) / a for a, b in zip(prices[::1], prices[1::1])]
</snippet></ROW><ROW><id>12700373</id><snippet>In [38]: a.levels
Out[38]: Index([mixed, read, write], dtype=object)

In [39]: a.labels
Out[39]: array([1, 0, 2])
</snippet></ROW><ROW><id>12700646</id><snippet>weakref</snippet></ROW><ROW><id>12700646</id><snippet>None</snippet></ROW><ROW><id>12700646</id><snippet>&gt;&gt;&gt; import weakref
&gt;&gt;&gt; class Cursor: pass
... 
&gt;&gt;&gt; _ = None # suppress special _ variable
&gt;&gt;&gt; a = Cursor()
&gt;&gt;&gt; r = weakref.ref(a)
&gt;&gt;&gt; print r()
&lt;__main__.Cursor instance at 0x1004a2bd8&gt;
&gt;&gt;&gt; del a
&gt;&gt;&gt; print r()
None
</snippet></ROW><ROW><id>12700646</id><snippet>WeakKeyDictionary</snippet></ROW><ROW><id>12700646</id><snippet>WeakValueDictionary</snippet></ROW><ROW><id>12700646</id><snippet>WeakSet</snippet></ROW><ROW><id>12700737</id><snippet>&gt;&gt;&gt; dict.fromkeys('abcd',None)
{'a': None, 'c': None, 'b': None, 'd': None}
&gt;&gt;&gt; dict.fromkeys(['first','last'],None)
{'last': None, 'first': None}
</snippet></ROW><ROW><id>12700774</id><snippet>import gdata.docs.service
import gdata.docs.data
from google.appengine.api import urlfetch

# get file from url
result = urlfetch.fetch('http://example.com/test.docx')
headers = result.headers
data = result.content

# authenticate client object
client = gdata.docs.service.DocsService()
client.ClientLogin('gmail', 'password')

# create MediaSource file wrapper
ms = gdata.MediaSource(file_handle=result.content, 
content_type=headers['content-type'], 
content_length=int(headers['content-length']))

# upload specific folder, return URL of doc
google_doc_name = 'title'
folder_uri = '/feeds/folders/private/full/folder:j7XO8SJj...'
entry = client.Upload(ms, google_doc_name, folder_or_uri=secret.G_FOLDER_URI)
edit_url = entry.GetAlternateLink().href
</snippet></ROW><ROW><id>12700958</id><snippet>.strip()</snippet></ROW><ROW><id>12700958</id><snippet>&gt;&gt;&gt; str1 = "string1"
&gt;&gt;&gt; str2 = "string2"
&gt;&gt;&gt;
&gt;&gt;&gt; results = [["string1 ", " string2"]]
&gt;&gt;&gt; for row in results:
...   if((row[0].strip() == str1) and (row[1].strip() == str2)):
...      print "We found the match....."
...
We found the match.....
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12700971</id><snippet>keyword</snippet></ROW><ROW><id>12700971</id><snippet>&gt;&gt;&gt; import keyword
&gt;&gt;&gt; keyword.iskeyword("in")
True
&gt;&gt;&gt; keyword.kwlist
['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try', 'while', 'with', 'yield']
</snippet></ROW><ROW><id>12700971</id><snippet>__builtins__</snippet></ROW><ROW><id>12700971</id><snippet>&gt;&gt;&gt; dir(__builtins__)
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__', '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']
</snippet></ROW><ROW><id>12700971</id><snippet>copyright</snippet></ROW><ROW><id>12700971</id><snippet>True</snippet></ROW><ROW><id>12700971</id><snippet>False</snippet></ROW><ROW><id>12700971</id><snippet>None</snippet></ROW><ROW><id>12700971</id><snippet>None</snippet></ROW><ROW><id>12700971</id><snippet>True</snippet></ROW><ROW><id>12700971</id><snippet>False</snippet></ROW><ROW><id>12701172</id><snippet>if 'propname' in ent._properties:
  del ent._properties['propname']
  ent.put()
</snippet></ROW><ROW><id>12701199</id><snippet>UserProfile.objects.get(user=user)</snippet></ROW><ROW><id>12701228</id><snippet>__init__</snippet></ROW><ROW><id>12701228</id><snippet>super</snippet></ROW><ROW><id>12701228</id><snippet>__init__</snippet></ROW><ROW><id>12701228</id><snippet>class SubThing(Thing):
    def __init__(self, *args, **kwargs):
        super(SubThing, self).__init__(*args, **kwargs)
        self.time = datetime.now()
</snippet></ROW><ROW><id>12701228</id><snippet>object</snippet></ROW><ROW><id>12701228</id><snippet>super</snippet></ROW><ROW><id>12701228</id><snippet>class Thing(object):
    ...
</snippet></ROW><ROW><id>12701237</id><snippet>CarModel.objects.extra(where = ['carfield IN (SELECT gasfield FROM\
    gas_gasmodel WHERE anothergasfield = carmodel.another_field_from_car_carmodel)'])
      .order_by(...)
</snippet></ROW><ROW><id>12701237</id><snippet>carmodel</snippet></ROW><ROW><id>12701237</id><snippet>CarModel</snippet></ROW><ROW><id>12701237</id><snippet>{{ app_name }}_{{ model_name }}</snippet></ROW><ROW><id>12701237</id><snippet>select</snippet></ROW><ROW><id>12701237</id><snippet>gas_gasmodel</snippet></ROW><ROW><id>12701237</id><snippet>carmodel</snippet></ROW><ROW><id>12701433</id><snippet>localhost-2:coding $ python3 dierand.py
  File "dierand.py", line 7
    print dietotal
                 ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>12701433</id><snippet>localhost-2:coding $ python2.7 dierand.py
10
</snippet></ROW><ROW><id>12701433</id><snippet>print</snippet></ROW><ROW><id>12701433</id><snippet>print(dietotal)
</snippet></ROW><ROW><id>12701459</id><snippet>if</snippet></ROW><ROW><id>12701459</id><snippet>teen</snippet></ROW><ROW><id>12701459</id><snippet>placement</snippet></ROW><ROW><id>12701459</id><snippet>def teen(n):
    n = int(n)
    if n//10 == 1:
        return ["ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen"][n-10]
    else:
        return ""

def placement(n,p):
    n = int(n)
    if n &lt; 1:
        return ""
    if p == 1:
        return ["one","two","three","four","five","six","seven","eight","nine"][n-1]
    if p == 2:
        return ["ten","twenty","thirty","forty","fifty","sixty","seventy","eighty","ninety"][n-1]
    if p == 3:
        return placement(n,1) + "hundred"
    if p == 4:
        return placement(n,1) + "thousand"
</snippet></ROW><ROW><id>12701459</id><snippet>convert</snippet></ROW><ROW><id>12701459</id><snippet>def convert(n):
    if n &lt; 10:
        return placement(n,1)
    if n &lt; 20:
        return teen(n)
    if n &lt; 100:
</snippet></ROW><ROW><id>12701474</id><snippet>updatePos_coordinates[8]</snippet></ROW><ROW><id>12701474</id><snippet>updatePos_coordinates = []</snippet></ROW><ROW><id>12701474</id><snippet>updatePos_coordinates</snippet></ROW><ROW><id>12701474</id><snippet>updatePos_coordinates = ['' for _ in range(16)]
# replace 16 with length of pos_coordinates
</snippet></ROW><ROW><id>12701474</id><snippet>if len(updatePos_coordinates) &lt; 16:
    updatePos_coordinates = pos_coordinates[:]

elif pos_coordinates != updatePos_coordinates:
    ...
</snippet></ROW><ROW><id>12701571</id><snippet>import re

# Replace multiple consecutive spaces with a single space
# Example: "One Two  Three    Four!" -&gt; "One Two Three Four!"
sentence = re.sub(' +', ' ', sentence)    

# Surround each instance ; : ( ) ‘ and " with spaces
# Example: '"Hello;(w)o:r‘ld"' -&gt; " Hello ;  ( w ) o : r ‘ ld "
sentence = re.sub('([;:()‘"])', ' \\1 ', sentence)

# Insert a space before each instance of , 's 're and 'll
# Example: "you'll they're, we're" -&gt; "you 'll they 're , we 're"
sentence = re.sub("(,|'s|'re|'ll)", ' \\1', sentence)

return sentence
</snippet></ROW><ROW><id>12701677</id><snippet>np.ptp</snippet></ROW><ROW><id>12701677</id><snippet>r = np.ptp(a,axis=1)
</snippet></ROW><ROW><id>12701677</id><snippet>r</snippet></ROW><ROW><id>12701817</id><snippet>csrf_enabled=True</snippet></ROW><ROW><id>12701817</id><snippet>SecureForm</snippet></ROW><ROW><id>12701817</id><snippet>csrf_enabled=True</snippet></ROW><ROW><id>12701817</id><snippet>SecureForm</snippet></ROW><ROW><id>12701817</id><snippet>generate_csrf_token</snippet></ROW><ROW><id>12701817</id><snippet>validate_csrf_token</snippet></ROW><ROW><id>12701817</id><snippet>{{ form.csrf_token }}</snippet></ROW><ROW><id>12701901</id><snippet>easy_install</snippet></ROW><ROW><id>12701901</id><snippet>/usr/lib/python2.6</snippet></ROW><ROW><id>12701901</id><snippet>python2.6</snippet></ROW><ROW><id>12701901</id><snippet>python26</snippet></ROW><ROW><id>12701901</id><snippet>python -m easy_install uuid</snippet></ROW><ROW><id>12702152</id><snippet>unittest</snippet></ROW><ROW><id>12702152</id><snippet>assertNotRegexpMatches</snippet></ROW><ROW><id>12702152</id><snippet>assertRegexpMatches</snippet></ROW><ROW><id>12702152</id><snippet>assertNotRegex</snippet></ROW><ROW><id>12702334</id><snippet>x</snippet></ROW><ROW><id>12702334</id><snippet>y</snippet></ROW><ROW><id>12702334</id><snippet>def subtract(x, y):
</snippet></ROW><ROW><id>12702334</id><snippet>def subtract(x, y):
    return x - y
</snippet></ROW><ROW><id>12702334</id><snippet>subtract</snippet></ROW><ROW><id>12702334</id><snippet>x</snippet></ROW><ROW><id>12702334</id><snippet>y</snippet></ROW><ROW><id>12702334</id><snippet>x</snippet></ROW><ROW><id>12702334</id><snippet>y</snippet></ROW><ROW><id>12702334</id><snippet>subtract</snippet></ROW><ROW><id>12702334</id><snippet>first</snippet></ROW><ROW><id>12702334</id><snippet>second</snippet></ROW><ROW><id>12702334</id><snippet>def subtract(first, second):
    return first - second
</snippet></ROW><ROW><id>12702334</id><snippet>x</snippet></ROW><ROW><id>12702334</id><snippet>y</snippet></ROW><ROW><id>12702334</id><snippet>length</snippet></ROW><ROW><id>12702334</id><snippet>draw_rectangle</snippet></ROW><ROW><id>12702334</id><snippet>length</snippet></ROW><ROW><id>12702541</id><snippet>bisect</snippet></ROW><ROW><id>12702541</id><snippet>import bisect

def quantize(num, quant):
    mids = [(quant[i] + quant[i + 1]) / 2.0
            for i in xrange(len(quant) - 1)]
    ind = bisect.bisect_right(mids, num)
    return quant[ind]

quantnum = [5, 10, 30, 60, 120, 180]

inputnum = [10, 20, 60, 120]

for n in inputnum:
    print quantize(2 * n, quantnum)

# Output:
#30
#30
#120
#180
</snippet></ROW><ROW><id>12702541</id><snippet>bisect_right</snippet></ROW><ROW><id>12702541</id><snippet>bisect_left</snippet></ROW><ROW><id>12702541</id><snippet>mids</snippet></ROW><ROW><id>12702541</id><snippet>O(log n)</snippet></ROW><ROW><id>12702578</id><snippet>map()</snippet></ROW><ROW><id>12702578</id><snippet>python -mtimeit -s'xs=xrange(1000)' 'map(int,"1234567890")'
10000 loops, best of 3: 18.3 usec per loop

python -mtimeit -s'xs=xrange(1000)' '[int(x) for x in "1234567890"]'
100000 loops, best of 3: 20 usec per loop
</snippet></ROW><ROW><id>12702578</id><snippet>lambda</snippet></ROW><ROW><id>12702578</id><snippet>map()</snippet></ROW><ROW><id>12702578</id><snippet>python -mtimeit -s'xs=xrange(1000)' '[x*10 for x in "1234567890"]'
100000 loops, best of 3: 6.11 usec per loop

python -mtimeit -s'xs=xrange(1000)' 'map(lambda x:x*10,"1234567890")'
100000 loops, best of 3: 11.2 usec per loop
</snippet></ROW><ROW><id>12702578</id><snippet>map()</snippet></ROW><ROW><id>12703194</id><snippet>month = int(input("Which numeric month of the year were you born in?\n"))
while((month &lt;=0) or (month &gt;12)):
    print("The Month must be within the range 12&gt;= Month &gt;0. Please enter the value again.")
    print("\n")
    month = int(input("Which numeric month of the year were you born in?\n"))
if (month == 4 or month == 6 or month == 9 or month == 11) # short
    maxdays = 30
else if month != 2 # not February -&gt; long
    maxdays = 31
else:
    # Here we could ask for the year, determine if the year is divisible by 4, by 100 and by 400 and with this information determie if we have a leap year, but...
    # we are tolerant for now and accept the 29 as well.
    maxdays = 29
</snippet></ROW><ROW><id>12703194</id><snippet>day = int(input("Which numeric day of the month were you born in?\n"))
if(day &lt;= 0) or (day &gt; maxdays):
    print("For your selected month, the value for day must be within the range {0} &gt;= Day &gt; 0. Please enter the value again.".format(maxdays))
    print("\n")
    day = int(input("Which numeric day of the month were you born in?\n"))
</snippet></ROW><ROW><id>12703194</id><snippet>format()</snippet></ROW><ROW><id>12703194</id><snippet>    print("For your selected month, the value for day must be within the range " + str(maxdays) + " &gt;= Day &gt; 0. Please enter the value again.")
</snippet></ROW><ROW><id>12703194</id><snippet>    print("For your selected month, the value for day is wrong. Please enter the value again.")
</snippet></ROW><ROW><id>12703324</id><snippet>open()</snippet></ROW><ROW><id>12703324</id><snippet>open()</snippet></ROW><ROW><id>12703324</id><snippet>with</snippet></ROW><ROW><id>12703324</id><snippet>with</snippet></ROW><ROW><id>12703324</id><snippet>with open(filename, 'r') as f:
    # Do things with f

# f is automatically closed
</snippet></ROW><ROW><id>12703620</id><snippet>x</snippet></ROW><ROW><id>12703620</id><snippet>filter</snippet></ROW><ROW><id>12703620</id><snippet>u_list = [word for word in u_list if word not in stopwords.words('english')] 
</snippet></ROW><ROW><id>12703707</id><snippet>QLCDNumber</snippet></ROW><ROW><id>12703707</id><snippet>QLCDNumber.digitCount</snippet></ROW><ROW><id>12703707</id><snippet>5</snippet></ROW><ROW><id>12703707</id><snippet>import sys
from PySide import QtGui, QtCore

class Example(QtGui.QWidget):

    def __init__(self):
        super(Example, self).__init__()
        self.initUI()
        timer = QtCore.QTimer(self)
        timer.timeout.connect(self.showlcd)
        timer.start(1000)
        self.showlcd()

    def initUI(self):

        self.lcd = QtGui.QLCDNumber(self)
        self.lcd.setDigitCount(8)          # change the number of digits displayed
        self.setGeometry(30, 30, 800, 600)
        self.setWindowTitle('Time')

        vbox = QtGui.QVBoxLayout()
        vbox.addWidget(self.lcd)
        self.setLayout(vbox)

        self.show()

    def showlcd(self):
        time = QtCore.QTime.currentTime()
        text = time.toString('hh:mm:ss')
        self.lcd.display(text)


def main():

    app = QtGui.QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>12704261</id><snippet>django.db.models.Q</snippet></ROW><ROW><id>12704261</id><snippet>__in</snippet></ROW><ROW><id>12704261</id><snippet>sqs.filter(Q(category=i) | Q(category=j))
</snippet></ROW><ROW><id>12704261</id><snippet>filter</snippet></ROW><ROW><id>12704261</id><snippet>sqs.filter(category__in=catlist)
</snippet></ROW><ROW><id>12704261</id><snippet>import ipdb; ipdb.set_trace()
</snippet></ROW><ROW><id>12704261</id><snippet>h</snippet></ROW><ROW><id>12704261</id><snippet>help</snippet></ROW><ROW><id>12704261</id><snippet>manage.py shell_plus
</snippet></ROW><ROW><id>12704261</id><snippet>q = Q()
title = request.GET.get('title'):
if title:
    q |= Q(title__contains=title)  # q = q | Q(...)

if request.GET.get('category'):
    for cat in request.GET.getlist('category'):
        q |= Q(category=cat)

sqs = SearchQuerySet.filter(q)
</snippet></ROW><ROW><id>12704283</id><snippet>a</snippet></ROW><ROW><id>12704283</id><snippet>(N,4)</snippet></ROW><ROW><id>12704283</id><snippet>B,G,R,A</snippet></ROW><ROW><id>12704283</id><snippet>(N,4)</snippet></ROW><ROW><id>12704283</id><snippet>R,G,B,A</snippet></ROW><ROW><id>12704283</id><snippet>a = np.frombuffer(data, dtype=np.uint8)
a.shape = (-1, 4)
rearranged = a[:,[2,1,0,3]]
</snippet></ROW><ROW><id>12704580</id><snippet>tuple(im.mean(axis=0))
</snippet></ROW><ROW><id>12704580</id><snippet>(r,g,b)</snippet></ROW><ROW><id>12704580</id><snippet>getAverageRGBN</snippet></ROW><ROW><id>12704611</id><snippet>import xmlrpclib

# some code
if not ok:
  # throw fault:
  raise xmlrpclib.Fault(11, "some message")
</snippet></ROW><ROW><id>12704623</id><snippet>f = urllib2.urlopen("http://gulasidorna.eniro.se/hitta:svenska+kyrkan/")
htmlcode = f.read()
print htmlcode
</snippet></ROW><ROW><id>12704661</id><snippet>import win32com.client
olMailItem = 0x0
obj = win32com.client.Dispatch("Outlook.Application")
newMail = obj.CreateItem(olMailItem)
newMail.Subject = "I AM SUBJECT!!"
newMail.Body = "I AM IN THE BODY\nSO AM I!!!"
newMail.To = "who_to_send_to@example.com"
#newMail.CC = "moreaddresses here"
#newMail.BCC = "address"
#attachment1 = "Path to attachment no. 1"
#attachment2 = "Path to attachment no. 2"
#newMail.Attachments.Add(attachment1)
#newMail.Attachments.Add(attachment2)
#newMail.display()
newMail.Send()
</snippet></ROW><ROW><id>12704810</id><snippet>DictVectorizer</snippet></ROW><ROW><id>12704810</id><snippet>X = DictVectorizer().fit_transform(X)
</snippet></ROW><ROW><id>12704810</id><snippet>X = DictVectorizer().fit_transform(X).tocsr()
</snippet></ROW><ROW><id>12704828</id><snippet>def to_the_number(n):
    digits=list(map(int,n))
    assert(len(digits))==10
    done = False
    while not done:
        done = True
        for i in range(10):
            if digits[i]!=digits.count(i):
                digits[i]=digits.count(i)
                print(digits)
                done = False
    return ''.join(map(str, digits))
</snippet></ROW><ROW><id>12704828</id><snippet>&gt;&gt;&gt; to_the_number('1234567890')
[1, 1, 3, 4, 5, 6, 7, 8, 9, 0]
[1, 1, 0, 4, 5, 6, 7, 8, 9, 0]
[1, 1, 0, 0, 5, 6, 7, 8, 9, 0]
[1, 1, 0, 0, 0, 6, 7, 8, 9, 0]
[1, 1, 0, 0, 0, 0, 7, 8, 9, 0]
[1, 1, 0, 0, 0, 0, 0, 8, 9, 0]
[1, 1, 0, 0, 0, 0, 0, 0, 9, 0]
[1, 1, 0, 0, 0, 0, 0, 0, 0, 0]
[8, 1, 0, 0, 0, 0, 0, 0, 0, 0]
[8, 1, 0, 0, 0, 0, 0, 0, 1, 0]
[7, 1, 0, 0, 0, 0, 0, 0, 1, 0]
[7, 2, 0, 0, 0, 0, 0, 0, 1, 0]
[7, 2, 1, 0, 0, 0, 0, 0, 1, 0]
[7, 2, 1, 0, 0, 0, 0, 1, 1, 0]
[7, 2, 1, 0, 0, 0, 0, 1, 0, 0]
[6, 2, 1, 0, 0, 0, 0, 1, 0, 0]
[6, 2, 1, 0, 0, 0, 1, 1, 0, 0]
[6, 2, 1, 0, 0, 0, 1, 0, 0, 0]
'6210001000'
</snippet></ROW><ROW><id>12705178</id><snippet>fileobj</snippet></ROW><ROW><id>12705178</id><snippet>tarfile.open</snippet></ROW><ROW><id>12705178</id><snippet># t.py
import tarfile
import StringIO

tarf = open('test.tar', 'rb')
tarstrio = StringIO.StringIO(tarf.read())
tar = tarfile.open(fileobj=tarstrio)

tar.list()
</snippet></ROW><ROW><id>12705241</id><snippet>super(SyncableMixin, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>12705347</id><snippet>request_params = { 'name_regex' : '', 'format' : 'json' }
r = requests.get( 'http://localhost:8000/api/v1/host/', params = request_params )
</snippet></ROW><ROW><id>12705408</id><snippet>is</snippet></ROW><ROW><id>12705513</id><snippet>to_be_removed = ".,:!" # all characters to be removed
s = "John's mom went there, but he wasn't there. So she said: 'Where are you!!'"

for c in to_be_removed:
    s = s.replace(c, '')
s.split()
</snippet></ROW><ROW><id>12705513</id><snippet>John's</snippet></ROW><ROW><id>12705513</id><snippet>you!!'</snippet></ROW><ROW><id>12705513</id><snippet>(\w[\w']*)
</snippet></ROW><ROW><id>12705513</id><snippet>(\w[\w']*\w)
</snippet></ROW><ROW><id>12705513</id><snippet>you'</snippet></ROW><ROW><id>12705513</id><snippet>Moss' mom</snippet></ROW><ROW><id>12705513</id><snippet>rgx = re.compile("([\w][\w']*\w)")
s = "John's mom went there, but he wasn't there. So she said: 'Where are you!!'"
rgx.findall(s)

["John's", 'mom', 'went', 'there', 'but', 'he', "wasn't", 'there', 'So', 'she', 'said', 'Where', 'are', 'you']
</snippet></ROW><ROW><id>12705513</id><snippet>A'</snippet></ROW><ROW><id>12705513</id><snippet>(\w[\w']*\w|\w)

rgx = re.compile("(\w[\w']*\w|\w)")
s = "John's mom went there, but he wasn't there. So she said: 'Where are you!!' 'A a'"
rgx.findall(s)

["John's", 'mom', 'went', 'there', 'but', 'he', "wasn't", 'there', 'So', 'she', 'said', 'Where', 'are', 'you', 'A', 'a']
</snippet></ROW><ROW><id>12705695</id><snippet>&gt;&gt;&gt; l = [1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; n = 4
&gt;&gt;&gt; [l[i::n] for i in xrange(n)]
[[1, 5, 9], [2, 6, 10], [3, 7], [4, 8]]
</snippet></ROW><ROW><id>12706119</id><snippet>size = asksize() #store the data on to variable called size
#then just call your check move
checkmove(x)
</snippet></ROW><ROW><id>12706119</id><snippet>#definitions
def asksize():
    #your code here
def checkmove(move, size):
    #your code here


#game set up here
size = asksize()
#more set up stuff
#end of game set up
#Game Main code

while True: #main game bucle
#Game stuff here
checkmove(move, size)
#more game stuff
</snippet></ROW><ROW><id>12706197</id><snippet>   if self.__dict__ in (name):
</snippet></ROW><ROW><id>12706197</id><snippet>   if name in self.__dict__:
</snippet></ROW><ROW><id>12706377</id><snippet>distutils.sysconfig</snippet></ROW><ROW><id>12706377</id><snippet>setup.py</snippet></ROW><ROW><id>12706377</id><snippet>cythonize()</snippet></ROW><ROW><id>12706377</id><snippet>.pyx</snippet></ROW><ROW><id>12706377</id><snippet>build()</snippet></ROW><ROW><id>12706377</id><snippet>install</snippet></ROW><ROW><id>12706377</id><snippet>build</snippet></ROW><ROW><id>12706377</id><snippet>/</snippet></ROW><ROW><id>12706377</id><snippet>os.path.sep</snippet></ROW><ROW><id>12706377</id><snippet>from distutils.core import setup
from distutils.sysconfig import get_python_inc
from Cython.Build import cythonize
import sys, os, shutil

cythonize('delaunay/sphere.pyx')

target = 'build/lib/delaunay/sphere.so'

def build():
  fortran_compiler = 'gfortran'
  c_compiler = 'gcc'
  architecture = 'x86_64'
  python_h_location = get_python_inc()
  build_temp = 'build/custom_temp'
  global target

  try:
    shutil.rmtree(build_temp)
  except OSError:
    pass

  os.makedirs(build_temp) # if you get an error here, please ensure the build/ ...
  # folder is writable by this user.

  c_files = ['delaunay/sphere.c']
  fortran_files = ['delaunay/stripack.f90']

  c_compile_commands = []

  for cf in c_files:
    # use the path (sans /s), without the extension, as the object file name:
    components = os.path.split(cf)
    name = components[0].replace('/', '') + '.'.join(components[1].split('.')[:-1])
    c_compile_commands.append(
      c_compiler + ' -arch ' + architecture + ' -I' + python_h_location + ' -o ' +
      build_temp + '/' + name + '.o -c ' + cf
    )

  fortran_compile_commands = []

  for ff in fortran_files:
    # prefix with f in case of name collisions with c files:
    components = os.path.split(ff)
    name = components[0].replace('/', '') + 'f' + '.'.join(components[1].split('.')[:-1])
    fortran_compile_commands.append(
      fortran_compiler + ' -arch ' + architecture + ' -o ' + build_temp + 
      '/' + name + '.o -c ' + ff
    )

  commands = c_compile_commands + fortran_compile_commands + [
    fortran_compiler + ' -arch ' + architecture + 
    ' -bundle -undefined dynamic_lookup ' + build_temp + '/*.o -o ' + target
  ]

  for c in commands:
    os.system(c)


if 'install' in sys.argv and not os.path.exists(target):
  try:
    os.makedirs('build/lib/delaunay')
  except OSError:
    # we don't care if the containing folder already exists.
    pass
  build()

setup(
  name="delaunay",
  version="0.1",
  ...
  packages=["delaunay"]
)

if 'build' in sys.argv:
  build()
</snippet></ROW><ROW><id>12706377</id><snippet>Extension</snippet></ROW><ROW><id>12706377</id><snippet>build_ext</snippet></ROW><ROW><id>12706425</id><snippet>with open("C:/search.txt") as inp:
    for line in inp:
        if line.strip() == search_string:
            print line
</snippet></ROW><ROW><id>12707035</id><snippet>scipy.optimize.curve_fit</snippet></ROW><ROW><id>12707035</id><snippet>polyfit</snippet></ROW><ROW><id>12707035</id><snippet>sigma</snippet></ROW><ROW><id>12707035</id><snippet>yerror</snippet></ROW><ROW><id>12707035</id><snippet>yerror</snippet></ROW><ROW><id>12707035</id><snippet>y_d</snippet></ROW><ROW><id>12707035</id><snippet>polycoef, _ = scipy.optimize.curve_fit(lambda x, a, b: a*x+b, x_d, y_d, sigma=yerror)
</snippet></ROW><ROW><id>12707553</id><snippet># add to your Client model    
def get_fields(self):
    fields_display = []
    for f in Client._meta.fields:
        name = f.name        
        if len(f.choices) == 0:
            fields_display.append([name, f.value_to_string(self)])
        else:
            fields_display.append([name, getattr(self,"get_%s_display" % name)()])

   return fields_display
</snippet></ROW><ROW><id>12707673</id><snippet>import urllib2

def check(url):
    try:
        urllib2.urlopen(url).read()
    except EnvironmentError:
        return False
    else:
        return True
</snippet></ROW><ROW><id>12708065</id><snippet>self.beta()</snippet></ROW><ROW><id>12708065</id><snippet>self</snippet></ROW><ROW><id>12708065</id><snippet>alpha</snippet></ROW><ROW><id>12708108</id><snippet>import threading
build = threading.Thread(target = start_rebuild)
build.start()
progress()
build.join()  # wait for build thread to end
</snippet></ROW><ROW><id>12708108</id><snippet>progress</snippet></ROW><ROW><id>12708108</id><snippet>global t</snippet></ROW><ROW><id>12708108</id><snippet>t.cancel</snippet></ROW><ROW><id>12708108</id><snippet>def progress():
    # This prints out the time left until rebuild is done.
    loudEchoCMD("storage::rebuild-eta")
    # This prints out the % of the rebuild that is done.
    rebuildProgress = loudEchoCMD("storage::rebuild-progress") 
    print rebuildProgress 
    if rebuildProgress != '100%':
        t = threading.Timer(5.0, progress)
        t.start()
</snippet></ROW><ROW><id>12708612</id><snippet>return ( self.staff_job_categories.all()[2] 
         if self.staff_job_categories.count() &gt;= 3 
         else None
       )
</snippet></ROW><ROW><id>12708612</id><snippet>return ( self.staff_job_categories.all()[2] 
         if len( self.staff_job_categories.all()[:3] ) &gt;= 3 
         else None
       )
</snippet></ROW><ROW><id>12708928</id><snippet>board[0] is board[1]</snippet></ROW><ROW><id>12708928</id><snippet>board = [["O"]*cols for y in range(rows)]
</snippet></ROW><ROW><id>12709152</id><snippet>lambda x: x if (x&lt;3)</snippet></ROW><ROW><id>12709152</id><snippet>x&lt;3</snippet></ROW><ROW><id>12709152</id><snippet>None</snippet></ROW><ROW><id>12709152</id><snippet>lambda x: x if (x&lt;3) else None
</snippet></ROW><ROW><id>12709152</id><snippet>if</snippet></ROW><ROW><id>12709152</id><snippet>In [21]: data = [1, 2, 5, 10, -1]

In [22]: [x for x in data if x &lt; 3]
Out[22]: [1, 2, -1]
</snippet></ROW><ROW><id>12709228</id><snippet>ncols = 4781
nrows = 4405
xllcorner = 682373.533843
yllcorner = 205266.898604
cellsize = 1.25
grid = np.zeros((nrows,ncols))

with open(file) as f:
    for line in f:
        item = line.split() # fill with whatever is separating the values 
        idx = (item[0]-xllcorner)/cellsize
        idy = (item[1]-yllcorner)/cellsize
        #...
</snippet></ROW><ROW><id>12709725</id><snippet>help("or")</snippet></ROW><ROW><id>12709725</id><snippet>x or y</snippet></ROW><ROW><id>12709725</id><snippet>None or False</snippet></ROW><ROW><id>12709725</id><snippet>False or None</snippet></ROW><ROW><id>12709934</id><snippet>In [42]: lis=[1,2,3,4,5,6,7,8,9,10,11,12]

In [43]: w=3       #window size

In [44]: [sum(lis[i-(w-1):i+1]) if i&gt;(w-1) else sum(lis[:i+1])  for i in range(len(lis))]
Out[44]: [1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33]

In [45]: w=4

In [46]: [sum(lis[i-(w-1):i+1]) if i&gt;(w-1) else sum(lis[:i+1])  for i in range(len(lis))]
Out[46]: [1, 3, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42]
</snippet></ROW><ROW><id>12709934</id><snippet>(falseValue, trueValue)[condition]</snippet></ROW><ROW><id>12709934</id><snippet>trueValue if condition else falseValue</snippet></ROW><ROW><id>12709934</id><snippet>[(sum(lis[:i+1]),sum(lis[i-(w-1):i+1]))[i&gt;(w-1)]  for i in range(len(lis))]
</snippet></ROW><ROW><id>12710597</id><snippet>&gt;&gt;&gt; a = [(1,2,3),(4,5,6)]
&gt;&gt;&gt; b = [7,8]
&gt;&gt;&gt; c = zip(*a)+[b] #c looks like [(1,4),(2,5),(3,6),(7,8)]
&gt;&gt;&gt; print zip(*c) #zip it back together
[(1, 2, 3, 7), (4, 5, 6, 8)]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12710762</id><snippet>words</snippet></ROW><ROW><id>12710762</id><snippet>$</snippet></ROW><ROW><id>12710762</id><snippet>&gt;&gt;&gt; line = "abc search"
&gt;&gt;&gt; if re.search('(\\b(search)\\b)$', line):
          print "true"


true

&gt;&gt;&gt; line1 = "search asdf"
&gt;&gt;&gt; if re.search('(\\b(search)\\b)$', line):
          print "true"
&gt;&gt;&gt; else:
          print "false"

false
</snippet></ROW><ROW><id>12710767</id><snippet>import numpy as np
import pylab as plt

# Create some test data
secret_data_X1 = np.linspace(0,1,100)
secret_data_Y1 = secret_data_X1**2
secret_data_X2 = np.linspace(1,2,100)
secret_data_Y2 = secret_data_X2**2

# Show the secret data
plt.subplot(2,1,1)
plt.plot(secret_data_X1,secret_data_Y1,'r')
plt.plot(secret_data_X2,secret_data_Y2,'b')

# Loop through the plots created and find the x,y values
X,Y = [], []   
for lines in plt.gca().get_lines():
    for x,y in lines.get_xydata():
        X.append(x)
        Y.append(y)

# If you are doing a line plot, we don't know if the x values are
# sequential, we sort based off the x-values
idx = np.argsort(X)
X = np.array(X)[idx]
Y = np.array(Y)[idx]

plt.subplot(2,1,2)
plt.plot(X,Y,'g')
plt.show()
</snippet></ROW><ROW><id>12710974</id><snippet>def</snippet></ROW><ROW><id>12710974</id><snippet>return</snippet></ROW><ROW><id>12711200</id><snippet>def get_item(self,ID):
  result = []
  for x in range(0, len(self.itemID)):
      if (self.itemID[x] == ID):
          result.append(self.itemlist[x])
  return result
</snippet></ROW><ROW><id>12711200</id><snippet>def get_item(self, ID):
   return [self.itemlist[x] for x in range(0, len(self.itemID) if self.itemID[x] == ID]
</snippet></ROW><ROW><id>12711200</id><snippet>class A:
   def __init__(self):
       self.content  = {}

   def add(self, ID, object):
       list = self.get_item(ID)
       list.append(object)
       content[ID] = list

   def get_item(self, ID):
       return content.get(ID, [])
</snippet></ROW><ROW><id>12711422</id><snippet>In [604]: d = {'dates' : mydates, 'prices': prices, 'mylist': mylist}

In [605]: df= DataFrame(d)

In [606]: print df
   dates    mylist  prices
0      0  6.907895    30.4
1      6 -2.461538    32.5
2     15 -1.577287    31.7
3     21  4.807692    31.2
4     30  4.281346    32.7
5     37  4.985337    34.1
6     45  5.586592    35.8
7     53 -3.968254    37.8
</snippet></ROW><ROW><id>12711422</id><snippet>DataFrame({'prices': prices, 'mylist': mylist}, index=columnanme)</snippet></ROW><ROW><id>12711477</id><snippet>else</snippet></ROW><ROW><id>12711477</id><snippet>if</snippet></ROW><ROW><id>12711477</id><snippet>else</snippet></ROW><ROW><id>12711477</id><snippet>if</snippet></ROW><ROW><id>12711477</id><snippet>def Max(list):
    if len(list) == 1:
        return list[0]
    else:
        m = Max(list[1:])
        return m if m &gt; list[0] else list[0]

def main():
    list = eval(raw_input(" please enter a list of numbers: "))
    print("the largest number is: ", Max(list))

main()
</snippet></ROW><ROW><id>12711803</id><snippet>__init__.py</snippet></ROW><ROW><id>12712331</id><snippet>user = User.objects.get(username="jamie")
sorted(Task.objects.all(), key = lambda task, user=user: task.date_for_display(user))
</snippet></ROW><ROW><id>12712362</id><snippet>QtSingleApplication</snippet></ROW><ROW><id>12712362</id><snippet>python.exe</snippet></ROW><ROW><id>12712362</id><snippet>from PySide.QtCore import *
from PySide.QtGui import *
from PySide.QtNetwork import *

class QtSingleApplication(QApplication):

    messageReceived = Signal(unicode)

    def __init__(self, id, *argv):

        super(QtSingleApplication, self).__init__(*argv)
        self._id = id
        self._activationWindow = None
        self._activateOnMessage = False

        # Is there another instance running?
        self._outSocket = QLocalSocket()
        self._outSocket.connectToServer(self._id)
        self._isRunning = self._outSocket.waitForConnected()

        if self._isRunning:
            # Yes, there is.
            self._outStream = QTextStream(self._outSocket)
            self._outStream.setCodec('UTF-8')
        else:
            # No, there isn't.
            self._outSocket = None
            self._outStream = None
            self._inSocket = None
            self._inStream = None
            self._server = QLocalServer()
            self._server.listen(self._id)
            self._server.newConnection.connect(self._onNewConnection)

    def isRunning(self):
        return self._isRunning

    def id(self):
        return self._id

    def activationWindow(self):
        return self._activationWindow

    def setActivationWindow(self, activationWindow, activateOnMessage = True):
        self._activationWindow = activationWindow
        self._activateOnMessage = activateOnMessage

    def activateWindow(self):
        if not self._activationWindow:
            return
        self._activationWindow.setWindowState(
            self._activationWindow.windowState() &amp; ~Qt.WindowMinimized)
        self._activationWindow.raise_()
        self._activationWindow.activateWindow()

    def sendMessage(self, msg):
        if not self._outStream:
            return False
        self._outStream &lt;&lt; msg &lt;&lt; '\n'
        self._outStream.flush()
        return self._outSocket.waitForBytesWritten()

    def _onNewConnection(self):
        if self._inSocket:
            self._inSocket.readyRead.disconnect(self._onReadyRead)
        self._inSocket = self._server.nextPendingConnection()
        if not self._inSocket:
            return
        self._inStream = QTextStream(self._inSocket)
        self._inStream.setCodec('UTF-8')
        self._inSocket.readyRead.connect(self._onReadyRead)
        if self._activateOnMessage:
            self.activateWindow()

    def _onReadyRead(self):
        while True:
            msg = self._inStream.readLine()
            if not msg: break
            self.messageReceived.emit(msg)
</snippet></ROW><ROW><id>12712362</id><snippet>import sys
from PySide.QtGui import *
from QtSingleApplication import QtSingleApplication

appGuid = 'F3FF80BA-BA05-4277-8063-82A6DB9245A2'
app = QtSingleApplication(appGuid, sys.argv)
if app.isRunning(): sys.exit(0)

w = QWidget()
w.show()
app.setActivationWindow(w)
sys.exit(app.exec_())
</snippet></ROW><ROW><id>12712513</id><snippet>cipher = M2Crypto.EVP.Cipher(alg="aes_128_cbc", key = aes_key, iv = aes_iv, op = 1)
encrypted_contents_file = open(outfile_name, "w")

while True:
    buf = fin.read(1024)
    if not buf:
        break
    encrypted_contents_file.write(cipher.update(buf))

encrypted_contents_file.write( cipher.final() )
</snippet></ROW><ROW><id>12712572</id><snippet>dbResult # this is (('78ff0103440dcea01f36438a71bdf28f',),)
dbResult[0][0] # this is '78ff0103440dcea01f36438a71bdf28f'
</snippet></ROW><ROW><id>12712572</id><snippet>len(dbResult)</snippet></ROW><ROW><id>12713053</id><snippet>join</snippet></ROW><ROW><id>12713053</id><snippet>stra = ' '.join(Lista).rstrip(',')
</snippet></ROW><ROW><id>12713053</id><snippet>stra = ' '.join(s.rstrip(',') for s in lista)
</snippet></ROW><ROW><id>12713216</id><snippet>from obj.dbObject import dbObject
</snippet></ROW><ROW><id>12713216</id><snippet>dbObject</snippet></ROW><ROW><id>12713216</id><snippet>import obj.dbObject</snippet></ROW><ROW><id>12713216</id><snippet>obj</snippet></ROW><ROW><id>12713216</id><snippet>db = obj.dbObject.dbObject()
</snippet></ROW><ROW><id>12713216</id><snippet>obj.dbObject</snippet></ROW><ROW><id>12713216</id><snippet>dbObject.py</snippet></ROW><ROW><id>12713216</id><snippet>obj</snippet></ROW><ROW><id>12713686</id><snippet>print("Hello, World!")
</snippet></ROW><ROW><id>12713717</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>12713717</id><snippet>/</snippet></ROW><ROW><id>12713717</id><snippet>/home...</snippet></ROW><ROW><id>12713717</id><snippet>home...</snippet></ROW><ROW><id>12713717</id><snippet>static</snippet></ROW><ROW><id>12713717</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>12713717</id><snippet>static</snippet></ROW><ROW><id>12713717</id><snippet>python manage.py collectstatic</snippet></ROW><ROW><id>12713717</id><snippet>static</snippet></ROW><ROW><id>12713717</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>12713717</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>12713717</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>12713717</id><snippet>{% static %}</snippet></ROW><ROW><id>12713717</id><snippet>{% load static from staticfiles %}
&lt;img src="{% static "images/hi.jpg" %}" alt="Hi!" /&gt;
</snippet></ROW><ROW><id>12713717</id><snippet>STATIC_URL</snippet></ROW><ROW><id>12713717</id><snippet>{{ STATIC_URL }}</snippet></ROW><ROW><id>12713717</id><snippet>'django.core.context_processors.static'</snippet></ROW><ROW><id>12713717</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>12713717</id><snippet>RequestContext</snippet></ROW><ROW><id>12713717</id><snippet>render</snippet></ROW><ROW><id>12713717</id><snippet>context_instance=RequestContext(request)</snippet></ROW><ROW><id>12713717</id><snippet>render_to_response</snippet></ROW><ROW><id>12713717</id><snippet>urls.py</snippet></ROW><ROW><id>12713717</id><snippet>from django.contrib.staticfiles.urls import staticfiles_urlpatterns
urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>12713717</id><snippet>DEBUG=False</snippet></ROW><ROW><id>12713717</id><snippet>python manage.py collectstatic</snippet></ROW><ROW><id>12713717</id><snippet>STATIC_URL</snippet></ROW><ROW><id>12713961</id><snippet>Data</snippet></ROW><ROW><id>12713961</id><snippet>foo</snippet></ROW><ROW><id>12713961</id><snippet>foo</snippet></ROW><ROW><id>12713961</id><snippet>bar</snippet></ROW><ROW><id>12713961</id><snippet>foo.Data</snippet></ROW><ROW><id>12713961</id><snippet>bar.get_data()</snippet></ROW><ROW><id>12713961</id><snippet>test</snippet></ROW><ROW><id>12713961</id><snippet>foo.Data</snippet></ROW><ROW><id>12713961</id><snippet>bar</snippet></ROW><ROW><id>12713961</id><snippet>foo</snippet></ROW><ROW><id>12713961</id><snippet>foo.bar</snippet></ROW><ROW><id>12713961</id><snippet>def get_data():
    return 'bar'
</snippet></ROW><ROW><id>12713961</id><snippet>import bar

class Data(object):
    def __init__(self):
        self.val = bar.get_data()

if __name__ == '__main__':
    d = Data()
    print d.val    # prints 'bar'
</snippet></ROW><ROW><id>12713961</id><snippet>import foo

class bar_mock(object):
    @staticmethod
    def get_data():
        return 'test'

if __name__ == '__main__':
    foo.bar = bar_mock
    d = foo.Data()
    print d.val    # prints 'test'
</snippet></ROW><ROW><id>12714089</id><snippet>.iteritems()</snippet></ROW><ROW><id>12714089</id><snippet>.items()</snippet></ROW><ROW><id>12714089</id><snippet>&gt;&gt;&gt; a = {"a":1, "b":2, "c":3, "d":4}
&gt;&gt;&gt; b = {"a":10, "b":20}
&gt;&gt;&gt; c = {"p":100, "q":200, "c":300}
&gt;&gt;&gt; d = {"a":1000, "x":2000, "c":3}
&gt;&gt;&gt; p_dict = {k:v for k,v in a.items() 
...               if not any(k in dicts for dicts in (b,c,d))}
&gt;&gt;&gt; p_dict
{'d': 4}
&gt;&gt;&gt; q_dict = {k:v for k,v in a.items()
...               if any(k in dicts for dicts in (b,c,d))
...               and not any(dicts.get(k)==v for dicts in (b,c,d))}
&gt;&gt;&gt; q_dict
{'a': 1, 'b': 2}
</snippet></ROW><ROW><id>12714089</id><snippet>None</snippet></ROW><ROW><id>12714195</id><snippet>setup.py</snippet></ROW><ROW><id>12714195</id><snippet>setup(
    entry_points = {
        "console_scripts": [
            "script_name": "your.module.name:main",
        ],
    }
)
</snippet></ROW><ROW><id>12714195</id><snippet>script_name</snippet></ROW><ROW><id>12714516</id><snippet>parser = argparse.ArgumentParser()
args = parser.parse_args()
</snippet></ROW><ROW><id>12714516</id><snippet>args.filename</snippet></ROW><ROW><id>12714623</id><snippet>serversocket</snippet></ROW><ROW><id>12714623</id><snippet>clientsocket, addr = serversocket.accept()
</snippet></ROW><ROW><id>12714623</id><snippet>serversocket</snippet></ROW><ROW><id>12714623</id><snippet>clientsocket</snippet></ROW><ROW><id>12714937</id><snippet>def files2df(colnames, ext):
    files = sorted(glob.glob(ext))
    frames = [read_csv(inf, sep='\t', skiprows=1, names=colnames) for inf in files]
    return concat(frames, ignore_index=True)
</snippet></ROW><ROW><id>12715112</id><snippet>subqueryload_all(...)</snippet></ROW><ROW><id>12715112</id><snippet># option-1:
subqueryload_all(
    'orders.details', # @note: this will load both *orders* and their *details*
    )

# option-2:
subqueryload_all(
    Purchase.orders,       # @note: this will load orders
    PurchaseOrder.details, # @note: this will load orders' details
    )
</snippet></ROW><ROW><id>12715112</id><snippet>sqlalchemy.orm.subqueryload_all</snippet></ROW><ROW><id>12715226</id><snippet>None</snippet></ROW><ROW><id>12715226</id><snippet>append()</snippet></ROW><ROW><id>12715226</id><snippet>None</snippet></ROW><ROW><id>12715226</id><snippet> item_to_bucket_list_map[i] = (item_to_bucket_list_map.get(i)).append(j)
</snippet></ROW><ROW><id>12715226</id><snippet>In [42]: lis=[1,2,3]

In [43]: print lis.append(4)
None

In [44]: lis
Out[44]: [1, 2, 3, 4]
</snippet></ROW><ROW><id>12715227</id><snippet>current_ids = set(soldier.id for soldier in user.soldiers)
for soldier_class in soldierlist:
    if soldier_class.id not in current_ids:
         user.soldiers.append( soldier_class() )
</snippet></ROW><ROW><id>12715320</id><snippet>os.listdir</snippet></ROW><ROW><id>12715320</id><snippet>os.path.join</snippet></ROW><ROW><id>12715320</id><snippet>allConfigs = sorted(os.listdir(CONFIGS),
    key=lambda p: os.path.getctime(os.path.join(CONFIGS, p))
</snippet></ROW><ROW><id>12715495</id><snippet>yahoo.finance.historicaldata</snippet></ROW><ROW><id>12715495</id><snippet>select * from yahoo.finance.historicaldata where symbol = "IBM" and startDate = "2012-01-01" and endDate = "2012-01-11"
</snippet></ROW><ROW><id>12715519</id><snippet>x</snippet></ROW><ROW><id>12715519</id><snippet>positiverootsht</snippet></ROW><ROW><id>12715519</id><snippet>positiveroots</snippet></ROW><ROW><id>12715519</id><snippet>simpleroots</snippet></ROW><ROW><id>12715519</id><snippet>x</snippet></ROW><ROW><id>12715519</id><snippet>y</snippet></ROW><ROW><id>12715519</id><snippet>x</snippet></ROW><ROW><id>12715519</id><snippet>for x in positiverootsht:
    for y in simplerootsht:
</snippet></ROW><ROW><id>12715761</id><snippet>send</snippet></ROW><ROW><id>12715761</id><snippet>recv()</snippet></ROW><ROW><id>12715761</id><snippet>recv()</snippet></ROW><ROW><id>12715761</id><snippet>recv()</snippet></ROW><ROW><id>12715761</id><snippet>send()</snippet></ROW><ROW><id>12715761</id><snippet>recv()</snippet></ROW><ROW><id>12715761</id><snippet>nc -kl 6000</snippet></ROW><ROW><id>12715854</id><snippet>import string

keys = string.ascii_uppercase
values = # make list of the values

variables = {keys[i]: val for i, val in enumerate(values)}
</snippet></ROW><ROW><id>12715854</id><snippet>V 1 3 4</snippet></ROW><ROW><id>12715854</id><snippet>variables['A']</snippet></ROW><ROW><id>12715854</id><snippet>variables['B']</snippet></ROW><ROW><id>12715896</id><snippet>@app.route("/")</snippet></ROW><ROW><id>12715896</id><snippet>@</snippet></ROW><ROW><id>12715918</id><snippet>e-6</snippet></ROW><ROW><id>12715918</id><snippet>1e-6</snippet></ROW><ROW><id>12715918</id><snippet>x</snippet></ROW><ROW><id>12715918</id><snippet>y</snippet></ROW><ROW><id>12715918</id><snippet>y * 1e-6 == x</snippet></ROW><ROW><id>12715918</id><snippet>e-6</snippet></ROW><ROW><id>12715918</id><snippet>def e6(x):
  return '%fe-6' % (1e6 * x,)
</snippet></ROW><ROW><id>12716129</id><snippet>txaws.s3.client</snippet></ROW><ROW><id>12716129</id><snippet>create_bucket</snippet></ROW><ROW><id>12716129</id><snippet>put_object</snippet></ROW><ROW><id>12716129</id><snippet>twisted.web.client.Agent</snippet></ROW><ROW><id>12716207</id><snippet>conch</snippet></ROW><ROW><id>12716207</id><snippet>localForwards</snippet></ROW><ROW><id>12716572</id><snippet>namedtuples</snippet></ROW><ROW><id>12716572</id><snippet>namedtuples</snippet></ROW><ROW><id>12716572</id><snippet>[11:35 - 26:00]</snippet></ROW><ROW><id>12716674</id><snippet>np.sum</snippet></ROW><ROW><id>12716674</id><snippet>int32</snippet></ROW><ROW><id>12716674</id><snippet>np.int32</snippet></ROW><ROW><id>12716674</id><snippet>np.int64</snippet></ROW><ROW><id>12716674</id><snippet>np.int128</snippet></ROW><ROW><id>12716674</id><snippet>dtype</snippet></ROW><ROW><id>12716674</id><snippet>x.view(np.int64).sum()
</snippet></ROW><ROW><id>12716674</id><snippet>from numpy import *</snippet></ROW><ROW><id>12716674</id><snippet>from ... import *</snippet></ROW><ROW><id>12716674</id><snippet>sum</snippet></ROW><ROW><id>12716674</id><snippet>max</snippet></ROW><ROW><id>12716831</id><snippet>mycollection.options()</snippet></ROW><ROW><id>12716831</id><snippet>'capped': True</snippet></ROW><ROW><id>12716864</id><snippet>time.time</snippet></ROW><ROW><id>12716864</id><snippet>import time
t0 = time.time()
print 'Starting download now!'
urllib2.urlopen('http://some.site.com/100mb')
t = time.time()
print 'Downloaded 100mb in ' + str(t - t0) + '!'
</snippet></ROW><ROW><id>12716864</id><snippet>timeit</snippet></ROW><ROW><id>12716864</id><snippet>import timeit
timeit.timeit("urllib2.urlopen('http://some.site.com/100mb')", 
              setup="import urllib2", 
              number=1)
</snippet></ROW><ROW><id>12716864</id><snippet>timeit</snippet></ROW><ROW><id>12716864</id><snippet>number=1</snippet></ROW><ROW><id>12716962</id><snippet>&gt;&gt;&gt; someString = 'Hello\nthere\npeople\nof\nEarth'
&gt;&gt;&gt; someList = someString.splitlines()
&gt;&gt;&gt; aNewString = someList[1]
&gt;&gt;&gt; print aNewString
there
</snippet></ROW><ROW><id>12717061</id><snippet>sklearn.preprocessing.MinMaxScaler</snippet></ROW><ROW><id>12717061</id><snippet>sklearn.preprocessing.Scaler</snippet></ROW><ROW><id>12717061</id><snippet>StandardScaler</snippet></ROW><ROW><id>12717061</id><snippet>sklearn.preprocessing.Normalizer</snippet></ROW><ROW><id>12717061</id><snippet>TfidfVectorizer</snippet></ROW><ROW><id>12717061</id><snippet>Pipeline</snippet></ROW><ROW><id>12717061</id><snippet>clf = Pipeline([('scale', Scaler()),
                ('svm', SVC())])
</snippet></ROW><ROW><id>12717098</id><snippet>In [1] import urlparse
In [2] foo = "abc=foo.bazz; defg=6cab; rando=random; token=foobar"
In [3]: urlparse.parse_qs('abc=foo.bazz; defg=6cab; rando=random; token=foobar')
Out[3]: 
     {' defg': ['6cab'],
      ' rando': ['random'],
      ' token': ['foobar'],
      'abc': ['foo.bazz']}

In [4]: dict(urlparse.parse_qsl('abc=foo.bazz; defg=6cab; rando=random; token=foobar'))
Out[4]: {' defg': '6cab', ' rando': 'random', ' token': 'foobar', 'abc': 'foo.bazz'}
</snippet></ROW><ROW><id>12717183</id><snippet>val1</snippet></ROW><ROW><id>12717183</id><snippet>val2</snippet></ROW><ROW><id>12717183</id><snippet>test</snippet></ROW><ROW><id>12717183</id><snippet>val1 = 1
val2 = 3.141592653

class test(object):
    def __init__(self, param1=val1, param2=val2):
        self.x = param1
        self.y = param2
</snippet></ROW><ROW><id>12717183</id><snippet>val1</snippet></ROW><ROW><id>12717183</id><snippet>val2</snippet></ROW><ROW><id>12717183</id><snippet>class test(object):
    def __init__(self, param1=None, param2=None):
        if param1 is None:
            self.x = val1
        else: 
            self.x = val2
</snippet></ROW><ROW><id>12717183</id><snippet>val1</snippet></ROW><ROW><id>12717183</id><snippet>val2</snippet></ROW><ROW><id>12717183</id><snippet>test</snippet></ROW><ROW><id>12717390</id><snippet>doctest</snippet></ROW><ROW><id>12717390</id><snippet>def fill_q(histq=deque([]))</snippet></ROW><ROW><id>12717390</id><snippet>&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; 
&gt;&gt;&gt; def fill_q(data=deque([])):
...     data.append(1)
...     return data
... 
&gt;&gt;&gt; fill_q()
deque([1])
&gt;&gt;&gt; fill_q()
deque([1, 1])
&gt;&gt;&gt; fill_q()
deque([1, 1, 1])
</snippet></ROW><ROW><id>12717390</id><snippet>&gt;&gt;&gt; id(fill_q())
4485636624
&gt;&gt;&gt; id(fill_q())
4485636624
&gt;&gt;&gt; id(fill_q())
4485636624
</snippet></ROW><ROW><id>12717390</id><snippet>def</snippet></ROW><ROW><id>12717390</id><snippet>None</snippet></ROW><ROW><id>12717390</id><snippet>my_obj = object()
def sample_func(value=my_obj):
    if value is my_obj:
        value = expression
    # then modify value 
</snippet></ROW><ROW><id>12717390</id><snippet>import math

def fast_func(sin=math.sin, cos=math.cos):
</snippet></ROW><ROW><id>12717497</id><snippet>def files():
    n = 0
    while True:
        n += 1
        yield open('/output/dir/%d.part' % n, 'w')


pat = '&lt;?xml'
fs = files()
outfile = next(fs) 

with open(filename) as infile:
    for line in infile:
        if pat not in line:
            outfile.write(line)
        else:
            items = line.split(pat)
            outfile.write(items[0])
            for item in items[1:]:
                outfile = next(fs)
                outfile.write(pat + item)
</snippet></ROW><ROW><id>12717765</id><snippet>update</snippet></ROW><ROW><id>12717765</id><snippet>b.update(d)
</snippet></ROW><ROW><id>12717765</id><snippet>d</snippet></ROW><ROW><id>12717765</id><snippet>b</snippet></ROW><ROW><id>12717765</id><snippet>b1 = dict( (parser.parse(k),v) for k,v for b.iteritems() )
d1 = dict( (parser.parse(k),v) for k,v for d.iteritems() )

d1.update(b1) # update d1 with the values from b1
</snippet></ROW><ROW><id>12717765</id><snippet>for k_d1 in d1:
    if k_d1 in b1:
        d1[k_d1] = b1[k_d1]
</snippet></ROW><ROW><id>12717904</id><snippet>parsedatetime</snippet></ROW><ROW><id>12717904</id><snippet>dateutil</snippet></ROW><ROW><id>12717922</id><snippet>$ python2.4 -c "'a' * (2**31-1)"
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in ?
MemoryError
$ python2.5 -c "'a' * (2**31-1)"
$
</snippet></ROW><ROW><id>12717922</id><snippet>import hashlib
# ...
for line in f:
    s, cnt = line[:-1].split("\t")
    idx = hashlib.md5(s).digest()
    count[idx] = count.get(idx, 0) + int(cnt)
# ...
</snippet></ROW><ROW><id>12718272</id><snippet>staticmethod</snippet></ROW><ROW><id>12718272</id><snippet>__func__</snippet></ROW><ROW><id>12718272</id><snippet>class Klass(object):

    @staticmethod  # use as decorator
    def stat_func():
        return 42

    _ANS = stat_func.__func__()  # call the staticmethod

    def method(self):
        ret = Klass.stat_func()
        return ret
</snippet></ROW><ROW><id>12718272</id><snippet>&gt;&gt;&gt; class Foo(object):
    @staticmethod
    def foo():
        return 3
    global z
    z = foo

&gt;&gt;&gt; z
&lt;staticmethod object at 0x0000000002E40558&gt;
&gt;&gt;&gt; Foo.foo
&lt;function foo at 0x0000000002E3CBA8&gt;
&gt;&gt;&gt; dir(z)
['__class__', '__delattr__', '__doc__', '__format__', '__func__', '__get__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
&gt;&gt;&gt; z.__func__
&lt;function foo at 0x0000000002E3CBA8&gt;
</snippet></ROW><ROW><id>12718272</id><snippet>dir</snippet></ROW><ROW><id>12718818</id><snippet>http://www.domain.com/some-slug-here/person/1234?q=some+search+string
http://www.domain.com/person/3456?q=some+search+string
http://www.domain.com/some-slug-here/person/5678
http://www.domain.com/person/7890
</snippet></ROW><ROW><id>12718818</id><snippet>person\/(\d{1,})
</snippet></ROW><ROW><id>12718818</id><snippet>&gt;&gt;&gt; regex.findall(string)
[u'1234', u'3456', u'5678', u'7890']
</snippet></ROW><ROW><id>12718824</id><snippet>def convertsmall(text):
    return ' '.join(smallnr(int(word)) if word.isdigit() else word for word in text.split())
</snippet></ROW><ROW><id>12718824</id><snippet>&gt;&gt;&gt; convertsmall('I have 5 brothers and 2 sisters, 7 siblings altogether.')
'I have five brothers and two sisters, 7 siblings altogether.'
</snippet></ROW><ROW><id>12718824</id><snippet>list</snippet></ROW><ROW><id>12718824</id><snippet>text.split()</snippet></ROW><ROW><id>12718824</id><snippet>' '</snippet></ROW><ROW><id>12718824</id><snippet>smallnr(int(word)) if word.isdigit() else word</snippet></ROW><ROW><id>12718824</id><snippet>smallnr()</snippet></ROW><ROW><id>12718824</id><snippet>word</snippet></ROW><ROW><id>12718824</id><snippet>word</snippet></ROW><ROW><id>12718824</id><snippet>word</snippet></ROW><ROW><id>12718824</id><snippet>int(word)</snippet></ROW><ROW><id>12718824</id><snippet>x</snippet></ROW><ROW><id>12718824</id><snippet>word</snippet></ROW><ROW><id>12718824</id><snippet>text.split()</snippet></ROW><ROW><id>12718824</id><snippet>word</snippet></ROW><ROW><id>12718906</id><snippet>a</snippet></ROW><ROW><id>12718906</id><snippet>b</snippet></ROW><ROW><id>12718906</id><snippet>c</snippet></ROW><ROW><id>12718906</id><snippet>$2 == "a" { a = $0; aLine = NR; }
$2 == "b" { b = $0; bLine = NR; }
$2 == "c" &amp;&amp; !keepPrinting {
    if ((bLine == (NR - 1)) &amp;&amp; (aLine == (NR - 2))) {
        print a;
        print b;
        keepPrinting = 1;
    }
}
keepPrinting { print; }
</snippet></ROW><ROW><id>12718906</id><snippet>JUNK UP HERE NOT STARTING WITH NUMBER
1     a           0.110     0.069
2     a           0.062     0.088
3     a           0.062     0.121
4     b           0.062     0.121
5     c           0.032     0.100
6     d           0.032     0.100
7     e           0.032     0.100
8     a           0.099     0.121
9     b           0.098     0.121
10    c           0.097     0.100
11    x           0.000     0.200
</snippet></ROW><ROW><id>12718906</id><snippet>$ awk -f blort.awk blort.txt
3     a           0.062     0.121
4     b           0.062     0.121
5     c           0.032     0.100
6     d           0.032     0.100
7     e           0.032     0.100
8     a           0.099     0.121
9     b           0.098     0.121
10    c           0.097     0.100
11    x           0.000     0.200
</snippet></ROW><ROW><id>12719002</id><snippet>"SELECT interest FROM User"
</snippet></ROW><ROW><id>12719506</id><snippet>__init__.py</snippet></ROW><ROW><id>12719506</id><snippet>import file1
import file2
reload(file1)
reload(file2)

func1, func2 = file1.func1, file1.func2
func3 = file2.func3
</snippet></ROW><ROW><id>12719506</id><snippet>reload()</snippet></ROW><ROW><id>12719613</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>12719613</id><snippet>#!</snippet></ROW><ROW><id>12719613</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>12719613</id><snippet>menu="&lt;Image&gt;/Image/Blender-Gimp"</snippet></ROW><ROW><id>12719624</id><snippet>in</snippet></ROW><ROW><id>12719624</id><snippet>in</snippet></ROW><ROW><id>12719624</id><snippet>==</snippet></ROW><ROW><id>12719624</id><snippet>in</snippet></ROW><ROW><id>12719624</id><snippet>1 in [1,2,3] # True
1 in [2,3,4] # False
'a' in ['a','e','i','o','u'] # True
'a' in 'aeiou' # Also True
</snippet></ROW><ROW><id>12719624</id><snippet>in</snippet></ROW><ROW><id>12719624</id><snippet>set</snippet></ROW><ROW><id>12719624</id><snippet>vowels = set(['a','e','i','o','u'])
</snippet></ROW><ROW><id>12719624</id><snippet>dict</snippet></ROW><ROW><id>12719624</id><snippet>in</snippet></ROW><ROW><id>12719624</id><snippet>for character in my_string:
    if character in vowels:
        # ...
</snippet></ROW><ROW><id>12719624</id><snippet>set()</snippet></ROW><ROW><id>12719624</id><snippet>set()</snippet></ROW><ROW><id>12719624</id><snippet>set_from_string = set('aeiou')
set_from_list = set(['a','e','i','o','u'])
</snippet></ROW><ROW><id>12719624</id><snippet>set_with_one_string = set(['cat'])
set_with_three_characters = set('cat')
</snippet></ROW><ROW><id>12719624</id><snippet>'cat' in set_with_one_string # True
'c' in set_with_one_string # False
</snippet></ROW><ROW><id>12719624</id><snippet>'c' in set_with_three_characters` # True
'cat' in set_with_three_characters # False
</snippet></ROW><ROW><id>12719624</id><snippet>'a' == 'A'</snippet></ROW><ROW><id>12719624</id><snippet>'A' in 'aeiou'</snippet></ROW><ROW><id>12719624</id><snippet>lowercase_string = input_string.lower()
</snippet></ROW><ROW><id>12719778</id><snippet>    def __makeDict(c):
    for item in c:
        if isinstance(c[item], MutableMapping):
            Configuration.__makeDict(c[item])
            c[item] = dict(c[item])

    return dict(c)
</snippet></ROW><ROW><id>12720024</id><snippet>tr</snippet></ROW><ROW><id>12720024</id><snippet>xterm</snippet></ROW><ROW><id>12720024</id><snippet>xterm</snippet></ROW><ROW><id>12720188</id><snippet>use_last_error</snippet></ROW><ROW><id>12720188</id><snippet>ctypes</snippet></ROW><ROW><id>12720188</id><snippet>GetLastError()</snippet></ROW><ROW><id>12720188</id><snippet>...
from ctypes import wintypes
...
rPM = ctypes.WinDLL('kernel32',use_last_error=True).ReadProcessMemory
rPM.argtypes = [wintypes.HANDLE,wintypes.LPCVOID,wintypes.LPVOID,ctypes.c_size_t,ctypes.POINTER(ctypes.c_size_t)]
rPM.restype = wintypes.BOOL
wPM = ctypes.WinDLL('kernel32',use_last_error=True).WriteProcessMemory
wPM.argtypes = [wintypes.HANDLE,wintypes.LPVOID,wintypes.LPCVOID,ctypes.c_size_t,ctypes.POINTER(ctypes.c_size_t)]
wPM.restype = wintypes.BOOL

ADDRESS1 = 0x00E97074
ADDRESS2 = ctypes.create_string_buffer(64)
bytes_read = ctypes.c_size_t()
print(rPM(PROCESS,ADDRESS1,ADDRESS2,64,ctypes.byref(bytes_read)))
print(ctypes.get_last_error())
</snippet></ROW><ROW><id>12720188</id><snippet>SE_DEBUG_NAME</snippet></ROW><ROW><id>12720188</id><snippet>PROCESS = win32api.OpenProcess(PROCESS_ALL_ACCESS,0,PID).handle
</snippet></ROW><ROW><id>12720188</id><snippet>win32api.OpenProcess</snippet></ROW><ROW><id>12720188</id><snippet>PyHANDLE</snippet></ROW><ROW><id>12720188</id><snippet>PROCESS = win32api.OpenProcess(PROCESS_ALL_ACCESS,0,PID)
...
rPM(PROCESS.handle,ADDRESS1,ADDRESS2,64,0)
</snippet></ROW><ROW><id>12720188</id><snippet>PROCESS</snippet></ROW><ROW><id>12720188</id><snippet>PyHANDLE</snippet></ROW><ROW><id>12720386</id><snippet>itertools</snippet></ROW><ROW><id>12720386</id><snippet>accumulate</snippet></ROW><ROW><id>12720386</id><snippet>from collections import defaultdict

def partition(seq, key):
    d = defaultdict(list)
    for x in seq:
        d[key(x)].append(x)
    return d
</snippet></ROW><ROW><id>12720535</id><snippet>  def retrieveTemps(self) :
        filehandle = urllib.urlopen(self.url)
        lines = filehandle.read() # modified

        position1 = lines.rfind('#f2')
        if position1 &gt; 0 :
                self.high0 = lines[position1:].split('&amp;')[0].split('&gt;')[1] # next line: high
                self.low0 = lines[position1+10:].split('&amp;')[0].split('&gt;')[1] # next line:low
        elif position1 &lt; 0 :
                position1 = lines.rfind('&gt;Overnight')
                if position1 &gt; 0 :
                        self.high0 = lines[position1+9:].split('&amp;')[0].split(':')[1] # next line: high
                        self.low0 = lines[position1+15:].split('&amp;')[0].split(':')[1] # next line:low
</snippet></ROW><ROW><id>12720578</id><snippet>string1 = "Likes %s."
string2 = "Likes %s and %s."
string3 = "Likes %s, %s, and %s."

def findveg(row):
    veggies = []
    if DF['cucumber_lover'][row] == 1:
        veggies.append('cucumber')
    if DF['carrot_lover'][row] == 1:
        veggies.append('carrot')
    if DF['spinach_lover'][row] == 1:
        veggies.append('spinach')
    return tuple(veggies)

flist['msg'] = ''
for row in DF.index:
        veggies = findfac(row)
        if len(veggies) == 1:
            findveg['msg'][row] = string1 % veggies
        if len(veggies) == 2:
            findveg['msg'][row] = string2 % veggies
        if len(veggies) == 3:
            findveg['msg'][row] = string3 % veggies
</snippet></ROW><ROW><id>12720646</id><snippet>with open('file.txt', 'r') as handle:
    for index, line in enumerate(handle, 1):
        if line.strip() == 'google talk':
            print 'Match found on line', index
</snippet></ROW><ROW><id>12721041</id><snippet>dayStringSum</snippet></ROW><ROW><id>12721041</id><snippet>dayStringSum[n]</snippet></ROW><ROW><id>12721041</id><snippet>while</snippet></ROW><ROW><id>12721041</id><snippet>daySum = int(day)  # Ensure that day is an int before we start.

while(daySum &gt;= 10):
    newString = str(daySum)
    dayIntA = int(newString[0])
    dayIntB = int(newString[1])
    daySum = dayIntA + dayIntB  # Will be checked on next iteration.

print(daySum)
</snippet></ROW><ROW><id>12721142</id><snippet>get_deals</snippet></ROW><ROW><id>12721142</id><snippet>get_deals()</snippet></ROW><ROW><id>12721142</id><snippet>get()</snippet></ROW><ROW><id>12721142</id><snippet>self.response.out.write(template.render(initial_city = initial_city, get_deals =self.get_deals(choose_city)))
</snippet></ROW><ROW><id>12721142</id><snippet>self.get_deals()</snippet></ROW><ROW><id>12721142</id><snippet>deals</snippet></ROW><ROW><id>12721142</id><snippet>{% for deal in get_deals %}    
    {{ deal }}  
{% endfor %}
</snippet></ROW><ROW><id>12721703</id><snippet> Cinnas-MacBook-Pro:thawing-temple-4323 cinna$ heroku config
 === thawing-temple-4323 Config Vars
 FACEBOOK_APP_ID:  ***
 FACEBOOK_SECRET:  ***
 PATH:             bin:/usr/local/bin:/usr/bin:/bin
 PYTHONUNBUFFERED: true
</snippet></ROW><ROW><id>12721703</id><snippet> 2012-10-04T04:20:04+00:00 heroku[api]: Add PYTHONUNBUFFERED, PYTHONPATH, PYTHONHOME, LANG, LD_LIBRARY_PATH, PATH, PYTHONHASHSEED, LIBRARY_PATH config by ***@***
</snippet></ROW><ROW><id>12721703</id><snippet> Cinnas-MacBook-Pro:infinite-fortress-4866 cinna$ heroku config
 === infinite-fortress-4866 Config Vars
 LANG:             en_US.UTF-8 
 LD_LIBRARY_PATH:  /app/.heroku/vendor/lib
 LIBRARY_PATH:     /app/.heroku/vendor/lib
 PATH:             /app/.heroku/venv/bin:/bin:/usr/local/bin:/usr/bin   
 PYTHONHASHSEED:   random
 PYTHONHOME:       /app/.heroku/venv/
 PYTHONPATH:       /app/
 PYTHONUNBUFFERED: true
</snippet></ROW><ROW><id>12721703</id><snippet> heroku config:remove PYTHONPATH PYTHONHOME LANG LD_LIBRARY_PATH PYTHONHASHSEED LIBRARY_PATH
</snippet></ROW><ROW><id>12721712</id><snippet>&gt;&gt;&gt; isinstance(True, int)
True
&gt;&gt;&gt; issubclass(bool, int)
True
</snippet></ROW><ROW><id>12721712</id><snippet>&gt;&gt;&gt; help(True)
Help on bool object:

class bool(int)
 |  bool(x) -&gt; bool
 |  
 |  Returns True when the argument x is true, False otherwise.
 |  The builtins True and False are the only two instances of the class bool.
 |  The class bool is a subclass of the class int, and cannot be subclassed.
</snippet></ROW><ROW><id>12721877</id><snippet>with open('file.txt', 'r') as handle:
    for index, line in enumerate(handle, 1):
        if line.rstrip().endswith("// google talk") # or .endswith("talk")
            print 'Match found on line', index
</snippet></ROW><ROW><id>12722194</id><snippet>with open('input.txt', 'r') as input_handle:
    with open('output.txt', 'w') as output_handle:
        for line in input_handle:
            output_handle.write(line[:10])
</snippet></ROW><ROW><id>12722206</id><snippet>new_document</snippet></ROW><ROW><id>12722670</id><snippet>myproject</snippet></ROW><ROW><id>12722670</id><snippet>sys.path.append('workspace/myproject/src/')
</snippet></ROW><ROW><id>12722899</id><snippet>def count_letters(word):
    return count_vowels(word) + count_consonants(word)
</snippet></ROW><ROW><id>12722899</id><snippet>count_vowels</snippet></ROW><ROW><id>12722899</id><snippet>count_consonants</snippet></ROW><ROW><id>12723302</id><snippet>export PATH=/opt/python2.7.1/bin:$PATH
export LD_LIBRARY_PATH=/opt/python2.7.1/lib:$LD_LIBRARY_PATH
</snippet></ROW><ROW><id>12723448</id><snippet>import socket
import os,sys
import time
from threading import Thread

HOST = '59.191.193.59'
PORT = 5555

COORDINATES = []

def connect():   
    globals()['client_socket'] = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((HOST,PORT))

def update_coordinates():
    connect()
    screen_width = 0
    screen_height = 0
    while True:
        try:
            client_socket.send("loc\n")
            data = client_socket.recv(8192)
        exept:
            connect();
            continue;

        globals()['COORDINATES'] = data.split()

        if(not(COORDINATES[-1] == "eom" and COORDINATES[0] == "start")):
            continue

            if (screen_width != int(COORDINATES[2])):
                screen_width = int(COORDINATES[2])
                screen_height = int(COORDINATES[3])            

Thread(target=update_coordinates).start()

// Run your controlling app here. COORDINATES will be available in the global scope and will be updated constantly
</snippet></ROW><ROW><id>12723454</id><snippet>*.?</snippet></ROW><ROW><id>12723454</id><snippet>.*?</snippet></ROW><ROW><id>12723454</id><snippet>re.split("&lt;!--pagebreak.*?--&gt;", str)
</snippet></ROW><ROW><id>12723454</id><snippet>k</snippet></ROW><ROW><id>12723454</id><snippet>r"..."</snippet></ROW><ROW><id>12723638</id><snippet>dict</snippet></ROW><ROW><id>12723638</id><snippet>map</snippet></ROW><ROW><id>12723638</id><snippet>main()</snippet></ROW><ROW><id>12723638</id><snippet>std::string</snippet></ROW><ROW><id>12723785</id><snippet>.replace()</snippet></ROW><ROW><id>12723785</id><snippet>line = line.replace(';', ':')
</snippet></ROW><ROW><id>12723785</id><snippet>line = line[:10].replace(';', ':') + line[10:]
</snippet></ROW><ROW><id>12723975</id><snippet>parse()</snippet></ROW><ROW><id>12723975</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>12724232</id><snippet>try:
    if not check():
        raise MyNewException()
except ExceptionRaisedByCheck:
    raise MyNewException()
</snippet></ROW><ROW><id>12724232</id><snippet>if not check():
    raise TheSameException()
</snippet></ROW><ROW><id>12724375</id><snippet>FeatureUnion</snippet></ROW><ROW><id>12724444</id><snippet>class ProductForm(ModelForm):
    class Meta:
        model = Product
</snippet></ROW><ROW><id>12724444</id><snippet>from django import forms
from models import Category

class ProductForm(forms.Form):
    # Put all my Categories into a select option
    category = forms.ModelChoiceField(queryset=Category.objects.all())
    product = forms.CharField()
    quantity = forms.IntegerField()
    price = forms.FloatField()  
</snippet></ROW><ROW><id>12724444</id><snippet>def add_product(request):
    success = False

    if request.method == "POST":        
        product_form = ProductForm(request.POST)

        if product_form.is_valid():             
            success = True

            category = Category.objects.get(name=product_form.cleaned_data['category'])
            product = product_form.cleaned_data['product']
            quantity = product_form.cleaned_data['quantity']
            price = product_form.cleaned_data['price']

            new_product = Product(category = category, product = product, quantity = quantity, price = price )
            new_product.save()

            new_product_form = ProductForm()

            ctx2 = {'success':success, 'product_form':new_product_form}
            return render_to_response('product/add_product.html', ctx2 , context_instance=RequestContext(request))
    else:
        product_form = ProductForm()
    ctx = {'product_form':product_form}
    return render_to_response('product/add_product.html', ctx , context_instance=RequestContext(request))
</snippet></ROW><ROW><id>12724444</id><snippet>{{ product_form.as_p }}</snippet></ROW><ROW><id>12724444</id><snippet>{% if success %}
    &lt;h3&gt; product added successfully &lt;/h3&gt;
{% endif %}         
&lt;form method="post" action="."&gt;
    {% csrf_token %}

    {{ product_form.as_p }}

    &lt;input type="submit" value="Add New product" id="create"&gt;
    &lt;input type="reset" value="reset" id="reset"&gt;   
&lt;/form&gt;
</snippet></ROW><ROW><id>12725233</id><snippet>import subprocess
lpr =  subprocess.Popen("/usr/bin/lpr", stdin=subprocess.PIPE)
lpr.stdin.write(your_data_here)
</snippet></ROW><ROW><id>12725357</id><snippet>hist = cv.CreateHist([255], cv.CV_HIST_ARRAY, [[0,255]], 1)
cv.CalcHist([im] , hist)          
for h in range(255):
    zm = cv.QueryHistValue_1D(hist, h)
    objectArea.append([int(zm)])
</snippet></ROW><ROW><id>12725419</id><snippet>def merge_subs(lst_of_lsts):
    res = []
    for row in lst_of_lsts:
        for i, resrow in enumerate(res):
            if row[0]==resrow[0]:
                res[i] += row[1:]
                break
        else:
            res.append(row)
    return res
</snippet></ROW><ROW><id>12725419</id><snippet>else</snippet></ROW><ROW><id>12725419</id><snippet>for</snippet></ROW><ROW><id>12725682</id><snippet>with open("example.txt", "r") as text, open("exclusions.txt", "r") as exc:
    exclusions = [line.rstrip('\n') for line in exc]
    for line in text:
        if not any(exclusion in line for exclusion in exclusions):
            print line
</snippet></ROW><ROW><id>12726053</id><snippet>SomeModel2.objects.annotate(new_field=Count('SomeField2', 
    distinct=True)).filter(condition=condition,
    another_condition=condition2).values('new_field', 'Somefield1')
</snippet></ROW><ROW><id>12726099</id><snippet>`%s</snippet></ROW><ROW><id>12726099</id><snippet>"usb-host,hostbus=%s,hostaddr=%s"</snippet></ROW><ROW><id>12726099</id><snippet>"usb-host,hostbus=%s,hostaddr=%s" % tuple(usb_pass_arr)</snippet></ROW><ROW><id>12726146</id><snippet>re</snippet></ROW><ROW><id>12726146</id><snippet>".+\.$"</snippet></ROW><ROW><id>12726146</id><snippet>find -regex  ".+\.$"</snippet></ROW><ROW><id>12726146</id><snippet>".+\.$"</snippet></ROW><ROW><id>12726146</id><snippet>find</snippet></ROW><ROW><id>12726146</id><snippet>\.</snippet></ROW><ROW><id>12726146</id><snippet>"\\."</snippet></ROW><ROW><id>12726146</id><snippet>r"\."</snippet></ROW><ROW><id>12726416</id><snippet>c</snippet></ROW><ROW><id>12726416</id><snippet>import csv
c = 'a,b,c,"d,e",f,g'
print next(csv.reader([c]))
# ['a', 'b', 'c', 'd,e', 'f', 'g']
</snippet></ROW><ROW><id>12726417</id><snippet>   import psutil
   p = psutil.Process(os.getpid()) # or PID of process
   p.get_open_files()
</snippet></ROW><ROW><id>12726468</id><snippet>In [2]: import pandas as pd

In [3]: source = pd.DataFrame({'A': ['foo', 'bar'], 'B': [1, 2], 'C': [(1,2), (3,4)]})

In [4]: source
Out[4]:
     A  B       C
0  foo  1  (1, 2)
1  bar  2  (3, 4)

In [5]: source._get_numeric_data()
Out[5]:
   B
0  1
1  2
</snippet></ROW><ROW><id>12726793</id><snippet>&gt;&gt;&gt; timeit("frozenset(a)", "a=range(100)")
3.26825213432312
&gt;&gt;&gt; timeit("hash(a)", "a=frozenset(range(100))")
0.08160710334777832
&gt;&gt;&gt; timeit("(lambda x:x)(a)", "a=hash(frozenset(range(100)))")
0.1994171142578125
</snippet></ROW><ROW><id>12726793</id><snippet>__hash__</snippet></ROW><ROW><id>12726863</id><snippet>{'OR': [{'AND': [{'column': 'XXX', 'operator': '=', 'value': 'M'}, {'column': 'YYY', 'operator': '=', 'value': 'N'}]}, {'column': 'YYY', 'operator': '&gt;=', 'value': '3.0'}]}
</snippet></ROW><ROW><id>12726863</id><snippet>{'$or': [{'$and': [{'XXX': 'M'}, {'YYY': 'N'}]}, {'YYY': {'$gte': 3.0}}]}
</snippet></ROW><ROW><id>12726863</id><snippet>FILTMAP = {'&gt;=': '$gte', '&lt;=': '$lte', '&gt;': '$gt', '&lt;': '$lt', "!=":"$ne"}
CONJUNCTION_MAP = {"AND":"$and", "OR":"$or"}

def convert_column(dic):
    if not dic['operator'] in FILTMAP:
        return {dic['column']: dic['value']}
    else:
        value = float(dic['value']) if dic['operator'] == "!=" else dic['value']
        return {dic['column']: {FILTMAP[dic['operator']]: value}}

def convert(dic):
    for k,v in dic.items():
        if isinstance(v, list):
            if k in CONJUNCTION_MAP:
                k = CONJUNCTION_MAP[k]
            return {k: [convert(i) for i in v]}
        else:
            return convert_column(dic)
</snippet></ROW><ROW><id>12726863</id><snippet>'3.0'</snippet></ROW><ROW><id>12726863</id><snippet>3.0</snippet></ROW><ROW><id>12726863</id><snippet>value = float(dic['value']) if dic['operator'] == "!=" else dic['value']
</snippet></ROW><ROW><id>12726865</id><snippet>zip</snippet></ROW><ROW><id>12726865</id><snippet># views.py
ab = zip(a,b)

# template
{% for x,y in ab %}
    {{ x.a }},{{ x.c }}&lt;br&gt;
    {{ y.f }}
{% endfor %}
</snippet></ROW><ROW><id>12727318</id><snippet>mimetypes</snippet></ROW><ROW><id>12727318</id><snippet>mimetypes.guess_type(path, strict=False)
</snippet></ROW><ROW><id>12727318</id><snippet>knownfiles = [
    "/etc/mime.types",
    "/etc/httpd/mime.types",                    # Mac OS X
    "/etc/httpd/conf/mime.types",               # Apache
    "/etc/apache/mime.types",                   # Apache 1
    "/etc/apache2/mime.types",                  # Apache 2
    "/usr/local/etc/httpd/conf/mime.types",
    "/usr/local/lib/netscape/mime.types",
    "/usr/local/etc/httpd/conf/mime.types",     # Apache 1.2
    "/usr/local/etc/mime.types",                # Apache 1.3
    ]
</snippet></ROW><ROW><id>12727318</id><snippet>.init()</snippet></ROW><ROW><id>12727318</id><snippet>application/x-font-woff     woff
</snippet></ROW><ROW><id>12727404</id><snippet>with open('/tmp/results_nslookup.txt', 'r') as f:
    for line in f:
        if line == 'Non-authoritative answer:\n':
            for i in range(8):
                print lines.next().strip()
</snippet></ROW><ROW><id>12727404</id><snippet>.next()</snippet></ROW><ROW><id>12727404</id><snippet>for</snippet></ROW><ROW><id>12727404</id><snippet>range(8)</snippet></ROW><ROW><id>12727404</id><snippet>itertools.islice</snippet></ROW><ROW><id>12727404</id><snippet>from itertools import islice

with open('/tmp/results_nslookup.txt', 'r') as f:
    for line in f:
        if line == 'Non-authoritative answer:\n':
            print ''.join(islice(f, 8))
</snippet></ROW><ROW><id>12727596</id><snippet>time.strftime("%H:%M:%S", time.gmtime(1349351477.198))
</snippet></ROW><ROW><id>12727693</id><snippet>bin/instance run [scriptname]</snippet></ROW><ROW><id>12727693</id><snippet>app</snippet></ROW><ROW><id>12727693</id><snippet>import transaction
from zope.app.component.hooks import setSite
from Testing.makerequest import makerequest
from AccessControl.SecurityManagement import newSecurityManager

plone_site_id = 'Plone' # Adjust as needed.

app = makerequest(app)
site = app[plone_site_id]
setSite(site)
user = app.acl_users.getUser('admin').__of__(site.acl_users)
newSecurityManager(None, user)
</snippet></ROW><ROW><id>12727693</id><snippet>transaction.commit()</snippet></ROW><ROW><id>12727693</id><snippet>site</snippet></ROW><ROW><id>12727952</id><snippet>re.findall</snippet></ROW><ROW><id>12727952</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall('\[([^]]+)\] =&gt; (.*?)(?=\n\[|$)', s, re.S)
[('exploit', '1'), ('hits', '1'), ('completed', '1'), ('is_malware', '1'), ('summary', '26.0@13965: suspicious.warning: object contains JavaScript\n76.0@14467: suspicious.obfuscation using eval\n76.0@14467: suspicious.obfuscation using String.fromCharCode\n'), ('severity', '4'), ('engine', '60')]
</snippet></ROW><ROW><id>12727952</id><snippet>dict</snippet></ROW><ROW><id>12727952</id><snippet>&gt;&gt;&gt; dict(re.findall('\[([^]]+)\] =&gt; (.*?)(?=\n\[|$)', s, re.S))
{'engine': '60', 'hits': '1', 'severity': '4', 'is_malware': '1', 'summary': '26.0@13965: suspicious.warning: object contains JavaScript\n76.0@14467: suspicious.obfuscation using eval\n76.0@14467: suspicious.obfuscation using String.fromCharCode\n', 'exploit': '1', 'completed': '1'}
</snippet></ROW><ROW><id>12727999</id><snippet>pdb</snippet></ROW><ROW><id>12727999</id><snippet>pdb.set_trace()</snippet></ROW><ROW><id>12728174</id><snippet>&gt;&gt;&gt; max(0, x)
</snippet></ROW><ROW><id>12728830</id><snippet>easy_install</snippet></ROW><ROW><id>12728830</id><snippet>pip</snippet></ROW><ROW><id>12728939</id><snippet>charset="iso-8859-1"
</snippet></ROW><ROW><id>12729116</id><snippet>lmxl</snippet></ROW><ROW><id>12729116</id><snippet>from lxml import etree as et

&gt;&gt;&gt; xml="""&lt;lala&gt;
  &lt;blabla&gt;
    &lt;qweqwe&gt;test&lt;/qweqwe&gt;
  &lt;/blabla&gt;
&lt;/lala&gt;
"""
&gt;&gt;&gt; test = et.fromstring(xml)
&gt;&gt;&gt; for i in test.xpath('//qweqwe'):
    i.text = 'adsfadfasdfasdfasdf' # put logic here


&gt;&gt;&gt; print et.tostring(test) # write this to file instead
&lt;lala&gt;
  &lt;blabla&gt;
    &lt;qweqwe&gt;adsfadfasdfasdfasdf&lt;/qweqwe&gt;
  &lt;/blabla&gt;
&lt;/lala&gt;
</snippet></ROW><ROW><id>12729229</id><snippet>def bilinear_interpolate(im, x, y):
    x = np.asarray(x)
    y = np.asarray(y)

    x0 = np.floor(x).astype(int)
    x1 = x0 + 1
    y0 = np.floor(y).astype(int)
    y1 = y0 + 1

    x0 = np.clip(x0, 0, im.shape[1]-1);
    x1 = np.clip(x1, 0, im.shape[1]-1);
    y0 = np.clip(y0, 0, im.shape[0]-1);
    y1 = np.clip(y1, 0, im.shape[0]-1);

    Ia = im[ y0, x0 ]
    Ib = im[ y1, x0 ]
    Ic = im[ y0, x1 ]
    Id = im[ y1, x1 ]

    wa = (x1-x) * (y1-y)
    wb = (x1-x) * (y-y0)
    wc = (x-x0) * (y1-y)
    wd = (x-x0) * (y-y0)

    return wa*Ia + wb*Ib + wc*Ic + wd*Id
</snippet></ROW><ROW><id>12729770</id><snippet>groupby</snippet></ROW><ROW><id>12729770</id><snippet>from itertools import groupby

def contains_data(ln):
    # just an example; there are smarter ways to do this
    return ln[0] not in "#\n"

with open("example") as f:
    datasets = [[ln.split() for ln in group]
                for has_data, group in groupby(f, contains_data)
                if has_data]
</snippet></ROW><ROW><id>12730371</id><snippet>addressbook_xml = """&lt;?xml version="1.0"?&gt;
&lt;addressbook&gt;
    &lt;person&gt;
        &lt;name&gt;Eric Idle&lt;/name&gt;
        &lt;phone type='fix'&gt;999-999-999&lt;/phone&gt;
        &lt;phone type='mobile'&gt;555-555-555&lt;/phone&gt;
        &lt;address&gt;
            &lt;street&gt;12, spam road&lt;/street&gt;
            &lt;city&gt;London&lt;/city&gt;
            &lt;zip&gt;H4B 1X3&lt;/zip&gt;
        &lt;/address&gt;
    &lt;/person&gt;
&lt;/addressbook&gt;"""

note_xml = """&lt;?xml version="1.0"?&gt;

 &lt;note&gt;
    &lt;to&gt;Tove&lt;/to&gt;
    &lt;from&gt;Jani&lt;/from&gt;
    &lt;heading&gt;Reminder&lt;/heading&gt;
    &lt;body&gt;Don't forget me this weekend!&lt;/body&gt;
 &lt;/note&gt;
"""

from lxml import etree

# XML strings to etree
addressbook_root = etree.fromstring(addressbook_xml)
note_root = etree.fromstring(note_xml)

# append the note
addressbook_root.append(note_root)

# print the new addressbook XML document
print etree.tostring(addressbook_root)
</snippet></ROW><ROW><id>12730467</id><snippet>@foo
def bar():
    frob()
    quux()
</snippet></ROW><ROW><id>12730467</id><snippet>def bar():
    frob()
    quux()
bar = foo(bar)
</snippet></ROW><ROW><id>12730467</id><snippet>bar</snippet></ROW><ROW><id>12730467</id><snippet>foo</snippet></ROW><ROW><id>12730467</id><snippet>def __secret_internal_function_name__():
    frob()
    quux()
bar = foo(__secret_internal_function_name__)
</snippet></ROW><ROW><id>12730467</id><snippet>class C(object):
    def __init__(self):
        self._x = None

    @property
    def x(self):
        """I'm the 'x' property."""
        return self._x

    @x.setter
    def x(self, value):
        self._x = value

    @x.deleter
    def x(self):
        del self._x
</snippet></ROW><ROW><id>12730467</id><snippet>class C(object):
    def __init__(self):
        self._x = None

    def __secret_x_prop__(self):
        """I'm the 'x' property."""
        return self._x
    x = property(__secret_x_prop__)

    def __secret_x_setter__(self, value):
        self._x = value
    x = x.setter(__secret_x_setter__)

    def __secret_x_getter__(self):
        del self._x
    x = x.deleter(__secret_x_getter__)
</snippet></ROW><ROW><id>12730467</id><snippet>property</snippet></ROW><ROW><id>12730467</id><snippet>property</snippet></ROW><ROW><id>12730467</id><snippet>getx</snippet></ROW><ROW><id>12730467</id><snippet>setx</snippet></ROW><ROW><id>12730467</id><snippet>delx</snippet></ROW><ROW><id>12730467</id><snippet>property.setter</snippet></ROW><ROW><id>12730467</id><snippet>property.deleter</snippet></ROW><ROW><id>12730467</id><snippet>property</snippet></ROW><ROW><id>12730628</id><snippet>def db_properties(self, *variables):
    cfgFile='c:\test\db.properties'
    parser = SafeConfigParser()
    parser.read(cfgFile)
    return {
        variable: parser.get('database', variable) for variable in variables
    }

def connect_and_query(self):
    try:
        con = None
        config = self.db_properties(
            'db_host',
            'db_name',
            'db_login',
            'db_pass',
        )
        #or you can use:
        #   variables = ['db_host','db_name','db_login','db_pass','db_whatever','db_whatever2',...]
        #   config = self.db_properties(*variables)
        #now you can use any variable like: config['db_host']
        # ---rest of the function here---
</snippet></ROW><ROW><id>12730722</id><snippet>requests</snippet></ROW><ROW><id>12731057</id><snippet>d = {x.firstname: x for x in mylist}
mylist = list(d.values())
</snippet></ROW><ROW><id>12731101</id><snippet>import win32api

drives = win32api.GetLogicalDriveStrings()
drives = drives.split('\000')[:-1]
print drives
</snippet></ROW><ROW><id>12731101</id><snippet>os.path.exists()</snippet></ROW><ROW><id>12731117</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; s = """&lt;?xml version="1.0" standalone="yes" ?&gt;
... &lt;!DOCTYPE widget [
... &lt;!ENTITY widgets-ns "http://www.w3.org/ns/widgets"&gt;
... &lt;!ENTITY pass "pass&amp;.html"&gt;
... ]&gt;
... &lt;xyz:widget xmlns:xyz="&amp;widgets-ns;"&gt;
...   &lt;xyz:content src="&amp;pass;"/&gt;
...   &lt;xyz:name&gt;bv&lt;/xyz:name&gt;
... &lt;/xyz:widget&gt;
... """
&gt;&gt;&gt; etree.fromstring(s)
&lt;Element {http://www.w3.org/ns/widgets}widget at 7f4de2cc58e8&gt;
&gt;&gt;&gt; etree.fromstring(s).xpath("//xyz:content/@src",
...                           namespaces={"xyz": "http://www.w3.org/ns/widgets"})
['pass&amp;.html']
</snippet></ROW><ROW><id>12731208</id><snippet>urlparse</snippet></ROW><ROW><id>12731208</id><snippet>urlparse.parse_qs</snippet></ROW><ROW><id>12731208</id><snippet>urllib.parse.parse_qs</snippet></ROW><ROW><id>12731208</id><snippet>urlparse</snippet></ROW><ROW><id>12731208</id><snippet>do_POST</snippet></ROW><ROW><id>12731208</id><snippet>def do_POST(s):
        """Respond to a POST request."""

        # Extract and print the contents of the POST
        length = int(s.headers['Content-Length'])
        post_data = urlparse.parse_qs(s.rfile.read(length).decode('utf-8'))
        for key, value in post_data.iteritems():
            print "%s=%s" % (key, value)

        s.send_response(200)
        s.send_header("Content-type", "text/html")
        s.end_headers()
        ...
</snippet></ROW><ROW><id>12731208</id><snippet>#!/usr/bin/env python

import urllib
import urllib2

url = 'http://localhost:9000'
post_dict = {'foo' : 1,
             'bar' : 2,
             'bis' : 3}

params = urllib.urlencode(post_dict)
post_req = urllib2.Request(url)
post_req.add_data(params)

response = urllib2.urlopen(post_req)
response_data = response.read()
response.close()
print response_data
</snippet></ROW><ROW><id>12731208</id><snippet>ire@localhost$ python http_server.py 
Wed Oct  3 21:38:51 2012 Server Starts - localhost:9000
foo=[u'1']
bar=[u'2']
bis=[u'3']
</snippet></ROW><ROW><id>12731412</id><snippet>from django.views.decorators.csrf import csrf_protect

@csrf_protect
def login(request):
     csrfContext = RequestContext(request)
     return render_to_response('foo.html', csrfContext)
</snippet></ROW><ROW><id>12731724</id><snippet>from sqlobject.sqlbuilder import IN
TableClass.select(IN(TableClass.q.id, [1, 2, 4]))
</snippet></ROW><ROW><id>12731724</id><snippet>resultList = list(TableClass.select(IN(TableClass.q.id, [1, 2, 4])))
</snippet></ROW><ROW><id>12731750</id><snippet>axe.plot([i[0] for i in points], [i[1] for i in points], linestyle='-', linewidth=10, 
color='green')
axe.plot([i[0] for i in points], [i[1] for i in points], linestyle='-', linewidth=5, 
color='black')
</snippet></ROW><ROW><id>12731933</id><snippet>itertools.groupby</snippet></ROW><ROW><id>12731933</id><snippet>csv.reader</snippet></ROW><ROW><id>12731933</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>12731933</id><snippet>import csv
from collections import defaultdict

summary = defaultdict(list)
csvin = csv.reader(open('testdata.txt'), delimiter='|')
for row in csvin:
    summary[(row[1].split(' ')[0], row[2])].append(int(row[5]))

csvout = csv.writer(open('testdata.out','wb'), delimiter='|')
for who, what in summary.iteritems():
    csvout.writerow( [' '.join(who), len(what), sum(what)] )
</snippet></ROW><ROW><id>12731933</id><snippet>numpy</snippet></ROW><ROW><id>12732029</id><snippet>import numpy

matrix = numpy.asarray(matrix,dtype=numpy.float64) + 5.555
</snippet></ROW><ROW><id>12732084</id><snippet>chcp 65001</snippet></ROW><ROW><id>12732291</id><snippet>re.sub(pattern, repl, string, count=0, flags=0)</snippet></ROW><ROW><id>12732291</id><snippet>count</snippet></ROW><ROW><id>12732291</id><snippet>    re.sub(pattern, repl, string[, count, flags])
</snippet></ROW><ROW><id>12732295</id><snippet>count += 1
</snippet></ROW><ROW><id>12732295</id><snippet>count = count + 1
</snippet></ROW><ROW><id>12732295</id><snippet>def dpn_worker():
    global count
    while True:
        item = q.get()
        rows.append(1)
        errors.append(1)
        count += 1
        q.task_done()
</snippet></ROW><ROW><id>12732354</id><snippet>order_by()</snippet></ROW><ROW><id>12732354</id><snippet>users = UserExtendedProfile.objects.values('company', 'user').order_by('company', 'user')
</snippet></ROW><ROW><id>12732354</id><snippet>[{ company: [user1, user2, ] }, ]
</snippet></ROW><ROW><id>12732354</id><snippet>from collections import defaultdict 
users = defaultdict(list)
for result in UserExtendedProfile.objects.values('company', 'user').order_by('company', 'user'):
    users[result['company']].append(result['user'])
</snippet></ROW><ROW><id>12732562</id><snippet>class Auction:
    def __init__(self, manager,auction):
        self.id = auction["id"]
        self.manager = manager
        self.some_data = auction["some_data"]
    def buy(self):
          return self.manager.buy()

class Manager(Auth):
    """used for search auctions, for example"""
    def __init__(self, username, password):
        Auth.__init__(self, username, password)
    def pile(self):
        y = self.some_search_into_a_server()
        for x in y:
            yield Auction(self,x)
    def buy(self):
        """buy method for using by auction"""
        pass

manager = Manager('user@example.com', 'a_very_secure_password')
for auction in manager.pile():
    auction.buy()
</snippet></ROW><ROW><id>12732799</id><snippet>numpoints</snippet></ROW><ROW><id>12732799</id><snippet>import matplotlib.pyplot as plt
import numpy as np
x1 = y1 = np.linspace(0, 10, 100)
x2 = np.sin(x1)
y2 = np.cos(y1)
plt.plot(x1,x2,'g--^', label='regional')
plt.plot(y1,y2,'b-o', label='local')
plt.legend( loc='upper left', numpoints = 1 )
plt.show()
</snippet></ROW><ROW><id>12732799</id><snippet>plt.plot(x1,x2,'g--^', label='regional')
plt.plot(y1,y2,'b-o', label='local')
</snippet></ROW><ROW><id>12732902</id><snippet>SyntaxError</snippet></ROW><ROW><id>12733043</id><snippet>__init__.py</snippet></ROW><ROW><id>12733043</id><snippet>import packageA
print packageA.__file__
</snippet></ROW><ROW><id>12733043</id><snippet>print packageA.__path__
</snippet></ROW><ROW><id>12733626</id><snippet>import re</snippet></ROW><ROW><id>12733626</id><snippet>codeblock = """import re
    def removeLeadingZeros(myValue):
        newValue = re.sub('^0+',"",myValue)

        valueList = list(newValue) #convert newValue to List
        valueList.insert(-2, '.') #insert the '.' int the list at the -2 position

        newValue = "".join(valueList) #join back to create the new  updated string

        myvalue = newValue"""
</snippet></ROW><ROW><id>12733947</id><snippet> import csv

def unicode_csv_reader(unicode_csv_data, dialect=csv.excel, **kwargs):
    # csv.py doesn't do Unicode; encode temporarily as UTF-8:
    csv_reader = csv.reader(utf_8_encoder(unicode_csv_data),
                            dialect=dialect, **kwargs)
    for row in csv_reader:
        # decode UTF-8 back to Unicode, cell by cell:
        yield [unicode(cell, 'utf-8') for cell in row]

def utf_8_encoder(unicode_csv_data):
    for line in unicode_csv_data:
        yield line.encode('utf-8')
</snippet></ROW><ROW><id>12733960</id><snippet>W</snippet></ROW><ROW><id>12733960</id><snippet>T</snippet></ROW><ROW><id>12734065</id><snippet>import os
for root, dirs, names in os.walk(path):
    ...
</snippet></ROW><ROW><id>12734065</id><snippet>import os
from os.path import join, getsize
for root, dirs, files in os.walk('python/Lib/email'):
    print root, "consumes",
    print sum(getsize(join(root, name)) for name in files),
    print "bytes in", len(files), "non-directory files"
    if 'CVS' in dirs:
        dirs.remove('CVS')  # don't visit CVS directories
</snippet></ROW><ROW><id>12734112</id><snippet>from __future__ import with_statement                     # first line of your code     
....
from google.appengine.api import urlfetch
import mimetypes
from google.appengine.api import files
.....
image_name = 'your_image.png'
response = urlfetch.fetch('http://....../' + image_name)  # response.status_code == 200 
(mimetype, _) = mimetypes.guess_type(image_name) 
file_name = files.blobstore.create(mime_type= mimetype, _blobinfo_uploaded_filename= image_name))
with files.open(file_name, 'a') as f:                                           
    f.write(response.content)
files.finalize(file_name)                       
blob_key = files.blobstore.get_blob_key(file_name)                                 
</snippet></ROW><ROW><id>12734211</id><snippet>A[i] &lt; A[i+1]</snippet></ROW><ROW><id>12734211</id><snippet>def ordertest(A):
    for i in xrange(len(A) - 1):
        if A[i]&lt;A[i+1]:
            return False

    return True
</snippet></ROW><ROW><id>12734286</id><snippet>None</snippet></ROW><ROW><id>12734286</id><snippet>None</snippet></ROW><ROW><id>12734286</id><snippet>None</snippet></ROW><ROW><id>12734286</id><snippet>None</snippet></ROW><ROW><id>12734621</id><snippet>for key in mydict.keys():
  if type(key) is not str:
    try:
      mydict[str(key)] = mydict[key]
    except:
      try:
        mydict[repr(key)] = mydict[key]
      except:
        pass
  del mydict[key]
</snippet></ROW><ROW><id>12734815</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>12734815</id><snippet>import time</snippet></ROW><ROW><id>12734815</id><snippet>from . import foobar</snippet></ROW><ROW><id>12734832</id><snippet>ElementTree</snippet></ROW><ROW><id>12734832</id><snippet>from xml.etree import ElementTree

tree = ElementTree.fromstring("""&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;rooms&gt;
    &lt;total-results&gt;1&lt;/total-results&gt;
    &lt;items-per-page&gt;1&lt;/items-per-page&gt;
    &lt;start-index&gt;0&lt;/start-index&gt;
    &lt;room&gt;
        &lt;id&gt;xxxxxxxx&lt;/id&gt;
        &lt;etag&gt;5&lt;/etag&gt;
        &lt;link rel="http://schemas.com.mysite.building" title="building" href="https://mysite.me.myschool.edu:8443/ess/scheduleapi/v1/buildings/yyyyyyyyy" /&gt;
        &lt;name&gt;1.306&lt;/name&gt;
        &lt;status&gt;active&lt;/status&gt;
        &lt;link rel="self" title="self" href="https://mysite.me.myschool.edu:8443/ess/scheduleapi/v1/rooms/aaaaaaaaa" /&gt;
    &lt;/room&gt;
&lt;/rooms&gt;
""")

# Select the first link element in the example XML
for node in tree.findall('./room/link[@title="building"]'):
    # the 'attrib' attribute is a dictionary containing the node attributes
    print node.attrib['href']
</snippet></ROW><ROW><id>12734845</id><snippet>--add-field</snippet></ROW><ROW><id>12734845</id><snippet>/manage.py schemamigration apps --add-field app.author
</snippet></ROW><ROW><id>12734845</id><snippet>./manage.py migrate apps
</snippet></ROW><ROW><id>12734845</id><snippet>./manage.py migrate apps --fake 000x
</snippet></ROW><ROW><id>12734845</id><snippet>000x</snippet></ROW><ROW><id>12734852</id><snippet>lst = [1, 2, 3, 4, 5]
sum(x*x for x in lst)

&gt; 55
</snippet></ROW><ROW><id>12735051</id><snippet>class reqboxfileparser():</snippet></ROW><ROW><id>12735051</id><snippet>object</snippet></ROW><ROW><id>12735051</id><snippet>super(reqboxfileparser, self)</snippet></ROW><ROW><id>12735051</id><snippet>TypeError: must be type, not classobj</snippet></ROW><ROW><id>12735051</id><snippet>super(reqboxfileparser, self)</snippet></ROW><ROW><id>12735051</id><snippet>reqboxfileparser</snippet></ROW><ROW><id>12735051</id><snippet>reqboxfileparser</snippet></ROW><ROW><id>12735051</id><snippet>f</snippet></ROW><ROW><id>12735051</id><snippet>reqboxfileparserng</snippet></ROW><ROW><id>12735051</id><snippet>f</snippet></ROW><ROW><id>12735051</id><snippet>reqboxfileparser</snippet></ROW><ROW><id>12735051</id><snippet>super</snippet></ROW><ROW><id>12735051</id><snippet>super(reqboxfileparserng, self)</snippet></ROW><ROW><id>12735051</id><snippet>AttributeError: 'super' object has no attribute 'f'</snippet></ROW><ROW><id>12735051</id><snippet>True</snippet></ROW><ROW><id>12735051</id><snippet>object</snippet></ROW><ROW><id>12735051</id><snippet>f</snippet></ROW><ROW><id>12735051</id><snippet>f</snippet></ROW><ROW><id>12735051</id><snippet>super</snippet></ROW><ROW><id>12735051</id><snippet>super</snippet></ROW><ROW><id>12735051</id><snippet>__init__</snippet></ROW><ROW><id>12735051</id><snippet>super</snippet></ROW><ROW><id>12735051</id><snippet>super</snippet></ROW><ROW><id>12735051</id><snippet>class reqboxfileparser():
    g = 'THIS IS G'

    def __init__(self):
        self.f = 'THIS IS F'
        self.g = 'THIS IS NEW G'

    def get_g(self):
        return self.g

class reqboxfileparserng(reqboxfileparser, object):
    def __init__(self):
        reqboxfileparser.__init__(self)


    def getfundict(self):
        print super(reqboxfileparserng, self).g # Prints "THIS IS G"
        print super(reqboxfileparserng, self).get_g() # Prints "THIS IS NEW G"
        print super(reqboxfileparserng, self).f # This raises an AttributeError

if __name__ == '__main__':
    o = reqboxfileparserng()
    o.getfundict()
</snippet></ROW><ROW><id>12735051</id><snippet>super</snippet></ROW><ROW><id>12735051</id><snippet>ParentClass.stuff</snippet></ROW><ROW><id>12735051</id><snippet>reqboxfileparser.f</snippet></ROW><ROW><id>12735051</id><snippet>AttributeError</snippet></ROW><ROW><id>12735051</id><snippet>classobj</snippet></ROW><ROW><id>12735051</id><snippet>type</snippet></ROW><ROW><id>12735137</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>12735137</id><snippet>literal_eval()</snippet></ROW><ROW><id>12735137</id><snippet>eval()</snippet></ROW><ROW><id>12735255</id><snippet>itertools.islice()</snippet></ROW><ROW><id>12735255</id><snippet>&gt;&gt;&gt; list(itertools.islice('foobar', 3))
['f', 'o', 'o']
</snippet></ROW><ROW><id>12735474</id><snippet>self</snippet></ROW><ROW><id>12735474</id><snippet>#fileutility.py:

def get_file_size(fullName):
    fileSize = os.path.getsize(fullName)
    return fileSize


def get_file_path(fullName):
    filePath = os.path.abspath(fullName)
    return filePath
</snippet></ROW><ROW><id>12735474</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>12735474</id><snippet>import fileutility

fileutility.get_file_size("myfile.txt")
fileutility.get_file_path("that.txt")
</snippet></ROW><ROW><id>12735571</id><snippet>p</snippet></ROW><ROW><id>12735571</id><snippet>status == False</snippet></ROW><ROW><id>12735571</id><snippet>pidfile</snippet></ROW><ROW><id>12735571</id><snippet>p</snippet></ROW><ROW><id>12735571</id><snippet>pid</snippet></ROW><ROW><id>12735571</id><snippet>status == True</snippet></ROW><ROW><id>12735571</id><snippet>os.kill</snippet></ROW><ROW><id>12735571</id><snippet>pid</snippet></ROW><ROW><id>12735571</id><snippet>pidfile</snippet></ROW><ROW><id>12735571</id><snippet>status == False</snippet></ROW><ROW><id>12735571</id><snippet>pid</snippet></ROW><ROW><id>12736173</id><snippet>universal_newlines</snippet></ROW><ROW><id>12736173</id><snippet>False</snippet></ROW><ROW><id>12736173</id><snippet>True</snippet></ROW><ROW><id>12736173</id><snippet>\n</snippet></ROW><ROW><id>12736203</id><snippet> m = re.findall ( '&lt;!--(.*?)--&gt;', string, re.DOTALL)
</snippet></ROW><ROW><id>12736330</id><snippet>&gt;&gt;&gt; start_date + relativedelta(months=2)
datetime.date(1984, 1, 23)
</snippet></ROW><ROW><id>12736369</id><snippet>from scrapy.contrib.spiders import CrawlSpider,Rule
from scrapy.selector import HtmlXPathSelector
from scrapy.http import Request
from scrapySpider.items import SPage
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor

class TestSpider4(CrawlSpider):
    name = "spiderSO"
    allowed_domains = ["cumulodata.com"]
    start_urls = ["http://www.cumulodata.com/"]

    extractor = SgmlLinkExtractor()

    rules = (
        Rule(extractor,callback='parse_links',follow=True),
        )

    def parse_start_url(self, response):
        list(self.parse_links(response))

    def parse_links(self, response):
        hxs = HtmlXPathSelector(response)
        links = hxs.select('//a')
        for link in links:
            title = ''.join(link.select('./@title').extract())
            url = ''.join(link.select('./@href').extract())
            meta={'title':title,}
            cleaned_url = "%s/?1" % url if not '/' in url.partition('//')[2] else "%s?1" % url
            yield Request(cleaned_url, callback = self.parse_page, meta=meta,)

    def parse_page(self, response):
        hxs = HtmlXPathSelector(response)
        item=SPage()
        item['url'] = response.url
        item['title']=response.meta['title']
        item['h1']=hxs.select('//h1/text()').extract()
        return item
</snippet></ROW><ROW><id>12736369</id><snippet>parse_start_url</snippet></ROW><ROW><id>12736369</id><snippet>list(self.parse_links(response))</snippet></ROW><ROW><id>12736369</id><snippet>list()</snippet></ROW><ROW><id>12736369</id><snippet>parse_links</snippet></ROW><ROW><id>12736369</id><snippet>cleaned_url = "%s/?1" % url if not '/' in url.partition('//')[2] else "%s?1" % url</snippet></ROW><ROW><id>12736369</id><snippet>parse_links</snippet></ROW><ROW><id>12736369</id><snippet>dont_filter=True</snippet></ROW><ROW><id>12736369</id><snippet>dont_filter</snippet></ROW><ROW><id>12736369</id><snippet>if not '/' in url.partition('//')[2]</snippet></ROW><ROW><id>12736369</id><snippet>title = ''.join(link.select('./@title').extract())</snippet></ROW><ROW><id>12736438</id><snippet>m = re.match(".*&lt;\html&gt;(.*)",my_html_text_string)
print m.groups()
</snippet></ROW><ROW><id>12736438</id><snippet>print my_html_string.split("&lt;/html&gt;")[-1]
</snippet></ROW><ROW><id>12736444</id><snippet>src  = r'C:\path\to\source'
dest = r'\\server-name\path-to-shared-directory'
</snippet></ROW><ROW><id>12736444</id><snippet>stdin</snippet></ROW><ROW><id>12736444</id><snippet>p = subprocess.Popen(cmd, 
        stdout=subprocess.PIPE, 
        stderr=subprocess.PIPE, 
        shell=True)
</snippet></ROW><ROW><id>12736819</id><snippet>for comment in parsed_json['results']: #'comment' contains keys, not values
</snippet></ROW><ROW><id>12736819</id><snippet>for comment in parsed_json['results']['comments']:
</snippet></ROW><ROW><id>12736819</id><snippet>parsed_json['results']</snippet></ROW><ROW><id>12736819</id><snippet>parsed_json['results']['comments']</snippet></ROW><ROW><id>12736903</id><snippet>class Base:
    def do( self ):
        self._member1 = 0
        self._member2 = 1

def make_do(a, b):
    def do(self):
        Base.do(self)
        self._member3 = a
        self._member4 = b
    return do

class Derived1(Base):
    do = make_do(0, 1)

class Derived2(Base):
    do = make_do(2, 3)

class Derived3(Base):
    do = make_do(9, 3)
</snippet></ROW><ROW><id>12736903</id><snippet>Base</snippet></ROW><ROW><id>12736903</id><snippet>class Base(object):
    def do( self ):
        self._member1 = 0
        self._member2 = 1

def make_do(a, b):
    def do(self):
        Base.do(self)
        self._member3 = a
        self._member4 = b
    return do

def make_derived(name, a, b):
    return type(name, (Base,), {'do': make_do(a,b)})

Derived1 = make_derived('Derived1', 0, 1)
Derived2 = make_derived('Derived2', 2, 3)
Derived3 = make_derived('Derived3', 9, 3)
</snippet></ROW><ROW><id>12736903</id><snippet>class Base(object):
    def do( self ):
        self._member1 = 0
        self._member2 = 1

def add_do(a, b):
    def do(self):
        Base.do(self)
        self._member3 = a
        self._member4 = b
    def deco(cls):
        return type(cls.__name__, (Base,), {'do': do})
    return deco

@add_do(0, 1)
class Derived1(Base): pass

@add_do(2, 3)
class Derived2(Base): pass

@add_do(9, 3)
class Derived3(Base): pass
</snippet></ROW><ROW><id>12736903</id><snippet>do</snippet></ROW><ROW><id>12736903</id><snippet>class Base:
    def do( self ):
        self._member1 = 0
        self._member2 = 1

def add_do(a, b):
    def deco(cls):
        original_do = cls.do
        def do(self):
            original_do(self)
            self._member3 = a
            self._member4 = b
        cls.do = do
        return cls
    return deco

@add_do(0, 1)
class Derived1(Base): pass

@add_do(2, 3)
class Derived2(Base): pass

@add_do(9, 3)
class Derived3(Base): pass
</snippet></ROW><ROW><id>12736914</id><snippet>finance.quotes_historical_yahoo?</snippet></ROW><ROW><id>12736914</id><snippet>In [53]: finance.quotes_historical_yahoo?
Type:       function
String Form:&lt;function quotes_historical_yahoo at 0x10f311d70&gt;
File:       /Users/dvelkov/src/matplotlib/lib/matplotlib/finance.py
Definition: finance.quotes_historical_yahoo(ticker, date1, date2, asobject=False, adjusted=True, cachename=None)
Docstring:
Get historical data for ticker between date1 and date2.  date1 and
date2 are datetime instances or (year, month, day) sequences.

See :func:`parse_yahoo_historical` for explanation of output formats
and the *asobject* and *adjusted* kwargs.

...(more stuff)
</snippet></ROW><ROW><id>12736914</id><snippet>parse_yahoo_historical</snippet></ROW><ROW><id>12736914</id><snippet>In [54]: finance.parse_yahoo_historical?
Type:       function
String Form:&lt;function parse_yahoo_historical at 0x10f996ed8&gt;
File:       /Users/dvelkov/src/matplotlib/lib/matplotlib/finance.py
Definition: finance.parse_yahoo_historical(fh, adjusted=True, asobject=False)
Docstring:
Parse the historical data in file handle fh from yahoo finance.

*adjusted*
  If True (default) replace open, close, high, and low prices with
  their adjusted values. The adjustment is by a scale factor, S =
  adjusted_close/close. Adjusted prices are actual prices
  multiplied by S.

  Volume is not adjusted as it is already backward split adjusted
  by Yahoo. If you want to compute dollars traded, multiply volume
  by the adjusted close, regardless of whether you choose adjusted
  = True|False.


*asobject*
  If False (default for compatibility with earlier versions)
  return a list of tuples containing

    d, open, close, high, low, volume

  If None (preferred alternative to False), return
  a 2-D ndarray corresponding to the list of tuples.

  Otherwise return a numpy recarray with

    date, year, month, day, d, open, close, high, low,
    volume, adjusted_close

  where d is a floating poing representation of date,
  as returned by date2num, and date is a python standard
  library datetime.date instance.

  The name of this kwarg is a historical artifact.  Formerly,
  True returned a cbook Bunch
  holding 1-D ndarrays.  The behavior of a numpy recarray is
  very similar to the Bunch.
</snippet></ROW><ROW><id>12736914</id><snippet>asobject=True</snippet></ROW><ROW><id>12736914</id><snippet>date, year, month, day, d, open, close, high, low, volume, adjusted_close</snippet></ROW><ROW><id>12736970</id><snippet>__all__</snippet></ROW><ROW><id>12736970</id><snippet>__init__.py</snippet></ROW><ROW><id>12736982</id><snippet>current_user.is_authenticated()
</snippet></ROW><ROW><id>12736982</id><snippet>current_user</snippet></ROW><ROW><id>12737004</id><snippet>csv_str = """X,,,
X,A,,
X,A,R,
X,A,R,X
X,A,R,Y
X,B,,
X,B,S,
X,B,S,X
"""

reader = csv.reader(StringIO.StringIO(csv_str))

idx = 0
data = []

for row in reader:
    # insert the row id
    row.insert(0, idx + 1)

    # insert a dummy parent id, it will be replaced with the real
    # value later
    row.insert(1, -1)

    # how deep is the current row
    depth = len([r for r in row if r is not ''])
    # insert the depth as the last value in the row
    row.append(depth)

    if idx &gt; 0:
        # if it's not the first row, calculate it's parent

        # calculate the depth of the previous row
        prev_depth = data[idx - 1][-1]
        if depth &gt; prev_depth:
            # if it's deeper than the previous row, then the previous
            # row is the parent row
            row[1] = data[idx - 1][0]
        elif depth == prev_depth:
            # if it's the same depth as the previous row then it has
            # the same parent as the previous row
            row[1] = data[idx - 1][3]
        else:
            # if it's shallower than the previos row, find the
            # nearest previous row with the same depth and use it's
            # parent as this row's parent.
            ridx = idx - 1
            while (prev_depth != depth and ridx &gt;= 0):
                prev_depth = data[ridx - 1][-1]
                ridx -= 1
            row[1] = data[ridx - 1][0]
    else:
        # if it's the first row it's parent is 0
        row[1] = 0

    # store the new row
    data.append(row)
    idx += 1


# write the CSV
output = StringIO.StringIO()
writer = csv.writer(output)
for row in data:
    # skip the depth value in each row
    writer.writerow(row[:-1])

print output.getvalue()
</snippet></ROW><ROW><id>12737074</id><snippet>import webapp2

from webapp2_extras import sessions

class BaseHandler(webapp2.RequestHandler):
    def dispatch(self):
    # Get a session store for this request.
    self.session_store = sessions.get_store(request=self.request)

    try:
        # Dispatch the request.
        webapp2.RequestHandler.dispatch(self)
    finally:
        # Save all sessions.
        self.session_store.save_sessions(self.response)

@webapp2.cached_property
def session(self):
    # Returns a session using the default cookie key.
    return self.session_store.get_session()

# To set a value:
self.session['foo'] = 'bar'

# To get a value:
foo = self.session.get('foo')
</snippet></ROW><ROW><id>12737175</id><snippet>nltk.classify.util</snippet></ROW><ROW><id>12737175</id><snippet>nltk\classify\util.py</snippet></ROW><ROW><id>12737175</id><snippet>dir2</snippet></ROW><ROW><id>12737175</id><snippet>string dir2 = @"C:\Python27\Lib\site-packages";
</snippet></ROW><ROW><id>12737184</id><snippet>str_a = "100,101,105,304"
str_b = "400,500,101,2000"
l = str_a.split(',') + str_b.split(',')
print ','.join(sorted(set(l), key=int))
</snippet></ROW><ROW><id>12737184</id><snippet>100,101,105,304,400,500,2000
</snippet></ROW><ROW><id>12737184</id><snippet>key=int</snippet></ROW><ROW><id>12737184</id><snippet>sorted</snippet></ROW><ROW><id>12737184</id><snippet>int</snippet></ROW><ROW><id>12737319</id><snippet>zip</snippet></ROW><ROW><id>12737319</id><snippet>&gt;&gt;&gt; a = ([1]) # equivalent to [1], not a tuple
&gt;&gt;&gt; b = ([2]) # equivalent to [2], not a tuple
&gt;&gt;&gt; list(zip(a,b))
[(1, 2)]

&gt;&gt;&gt; a = ([1],[2])
&gt;&gt;&gt; b = ([3],[4])
&gt;&gt;&gt; list(zip(a,b))
[([1], [3]), ([2], [4])]
</snippet></ROW><ROW><id>12737319</id><snippet>a = ([1],)</snippet></ROW><ROW><id>12737319</id><snippet>b = ([2],)</snippet></ROW><ROW><id>12737319</id><snippet>a</snippet></ROW><ROW><id>12737319</id><snippet>b</snippet></ROW><ROW><id>12737319</id><snippet>set(zip(a, b))</snippet></ROW><ROW><id>12737487</id><snippet>collections.Counter</snippet></ROW><ROW><id>12737487</id><snippet>&gt;&gt;&gt; sentence = "Hello world. How are you? Hello"
&gt;&gt;&gt; counts = collections.Counter(sentence.split()) # note that this still counts punctuation. Thus, "Hello," and "Hello" are two different words
</snippet></ROW><ROW><id>12737874</id><snippet>s = requests.session()
</snippet></ROW><ROW><id>12737874</id><snippet>s.post('https://localhost/login.py', login_data)
#logged in!
r2 = s.get('https://localhost/profile_data.json', ...)
#cookies sent!
#do whatever, s will keep your cookies intact :)
</snippet></ROW><ROW><id>12737946</id><snippet>total_price = [None, None, 10, 20]
units_b = [None, None, 1, 2]

average_price = [(x/y) for x, y in zip(total_price, units_b) if x is not None and y is not None]
</snippet></ROW><ROW><id>12738091</id><snippet>fourier_series(f, N):
    def F(x):
        ...
    return F
</snippet></ROW><ROW><id>12738091</id><snippet>fourier_series</snippet></ROW><ROW><id>12738091</id><snippet>def f(a):
    def F(b):
        return b + 5
    return F

&gt;&gt;&gt; fun = f(10)
&gt;&gt;&gt; fun(3)
8
</snippet></ROW><ROW><id>12738139</id><snippet>sctStatus</snippet></ROW><ROW><id>12738139</id><snippet>"namestatus"</snippet></ROW><ROW><id>12738139</id><snippet>"IDstatus"</snippet></ROW><ROW><id>12738139</id><snippet>"cntStatus"</snippet></ROW><ROW><id>12738139</id><snippet>sctStatus = {}</snippet></ROW><ROW><id>12738139</id><snippet>    sctStatus = {}
    sctStatus["nameStatus"] = theNameStatus
    sctStatus["IDstatus"] = item[0]
    sctStatus["cntStatus"] = item[2]
</snippet></ROW><ROW><id>12738147</id><snippet>try:
    s.read(s.inWaiting())
except serial.serialutil.SerialException:
    pass # or maybe print s.inWaiting() to identify out how many chars the driver thinks there is
</snippet></ROW><ROW><id>12738289</id><snippet>Thread(target=update_coordinates()).start()
</snippet></ROW><ROW><id>12738289</id><snippet>Thread(target=update_coordinates).start()
</snippet></ROW><ROW><id>12738407</id><snippet>class PurchaseEntity(object):
</snippet></ROW><ROW><id>12738407</id><snippet>&gt;&gt;&gt; class Foo:
...     def foo(self):
...             void    
... 
&gt;&gt;&gt; class Bar(object):
...     def bar(self):
...             void
... 
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; bar = Bar()
&gt;&gt;&gt; foo['foo']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: Foo instance has no attribute '__getitem__'
&gt;&gt;&gt; bar['bar']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'Bar' object has no attribute '__getitem__'
</snippet></ROW><ROW><id>12738623</id><snippet>integrate</snippet></ROW><ROW><id>12738623</id><snippet>cos(k)</snippet></ROW><ROW><id>12738623</id><snippet>def integrate(f, a, b):
    h = float(b-a)/10
    I = 0;
    for i in range(10):
        I += f(h*i)

    return I

A = zeros(N)
for k in range(N):
    A[k] = integrate(lambda x: cos(k*x), a, b)
</snippet></ROW><ROW><id>12738623</id><snippet>def</snippet></ROW><ROW><id>12738623</id><snippet>k</snippet></ROW><ROW><id>12738623</id><snippet>A = zeros(N)
for k in range(N):
    def callback(x):
        return k*x

    A[k] = integrate(callback, a, b)
</snippet></ROW><ROW><id>12738636</id><snippet>for submission in r.get_front_page(limit=5):
    print submission.ups, submission.downs, submission.title
</snippet></ROW><ROW><id>12738636</id><snippet>import pprint
for submission in r.get_front_page(limit=5):
    pprint.pprint(vars(submission))
</snippet></ROW><ROW><id>12738636</id><snippet>submission.comments</snippet></ROW><ROW><id>12738680</id><snippet>session.query(Model).with_hint(Model, 'USE INDEX col1_index')
</snippet></ROW><ROW><id>12738986</id><snippet>lista = [12,34,45,56,66,80,89,90]

listb = [13,30,56,59,72,77,80,85]

i, j = 0, 0
while i &lt; len(lista):    
    if lista[i] == listb[j]:
        if i &lt; j:
            print i, lista
        else:
            print j, listb
        break
    elif lista[i] &lt; listb[j]:
        i += 1
    else:
        j += 1


&gt;&gt;&gt; 
2 [13, 30, 56, 59, 72, 77, 80, 85]
</snippet></ROW><ROW><id>12739015</id><snippet>House.objects.filter(owners=request.user)
</snippet></ROW><ROW><id>12739145</id><snippet>connect()</snippet></ROW><ROW><id>12739145</id><snippet>activate()</snippet></ROW><ROW><id>12739145</id><snippet>connect()
update_coordinates()
while True:
    activate()
</snippet></ROW><ROW><id>12739145</id><snippet>connect()</snippet></ROW><ROW><id>12739145</id><snippet>update_coordinates()</snippet></ROW><ROW><id>12739145</id><snippet>except</snippet></ROW><ROW><id>12739317</id><snippet>Content-Type=application/json; charset=UTF-8 
</snippet></ROW><ROW><id>12739317</id><snippet>for comment in parsed_json['results']['comments']:
    row = []
    row.append(str(comment['commentSequence']))
    row.append(comment['commentBody'].encode('UTF-8', 'replace'))
    row.append(comment['commentTitle'].encode('UTF-8', 'replace'))
    row.append(str(comment['approveDate']))
    writer.writerow(row)
</snippet></ROW><ROW><id>12739321</id><snippet>def books(): 

    points = [0,5,15,30,60];    #  list of the points
    inp = 0;

    while inp &lt; 0 or inp &gt;= len(points):
        a = input("Enter number of books:") 
        inp = int(a)

    print("You earned",points[inp],"points") 

books() 
</snippet></ROW><ROW><id>12739321</id><snippet>inp</snippet></ROW><ROW><id>12739637</id><snippet>tags = set(tag  for e in my_obj['Episodes'] for tag in e['Tags'])
</snippet></ROW><ROW><id>12739852</id><snippet>def mainFunction (x, y, helperFunction):
    if helperFunction == compareValues1():  &lt;-- this actually CALLS the function!
         do stuff
    elif helperFunction == compareValues2():
         do other stuff
</snippet></ROW><ROW><id>12739852</id><snippet>def mainFunction (x, y, helperFunction):
    if helperFunction is compareValues1:
         do stuff
    elif helperFunction is compareValues2:
         do other stuff
</snippet></ROW><ROW><id>12739929</id><snippet>a = [ 'abc=lalalla', 'appa=kdkdkdkd', 'kkakaka=oeoeoeo']
d = dict(s.split('=') for s in a)
print d


Output:
{'kkakaka': 'oeoeoeo', 'abc': 'lalalla', 'appa': 'kdkdkdkd'}
</snippet></ROW><ROW><id>12740104</id><snippet>poll</snippet></ROW><ROW><id>12740104</id><snippet>timeout</snippet></ROW><ROW><id>12740104</id><snippet>-1</snippet></ROW><ROW><id>12740104</id><snippet>connect</snippet></ROW><ROW><id>12740104</id><snippet>connect</snippet></ROW><ROW><id>12740130</id><snippet>def count_words(filename, search_list):
    textwords = open(filename, 'r').read().split()
    filteredwords = [t for t in textwords if t in search_list]
    counter = Counter(filteredwords)
    for w in search_list:
        counter[w] += 0        # ensure exists
    wordfreq = sorted(counter.items())
    print "printing from " + filename
    print wordfreq

search_list = ['sale', 'univers', 'money']
</snippet></ROW><ROW><id>12740130</id><snippet>printing from ./../lingspam_results/spmsgb164.txt.out
[('money', 0), ('sale', 0), ('univers', 0)]
printing from ./../lingspam_results/spmsgb166.txt.out
[('money', 2), ('sale', 0), ('univers', 0)]
printing from ./../lingspam_results/spmsgb167.txt.out
[('money', 0), ('sale', 1), ('univers', 0)]
</snippet></ROW><ROW><id>12740130</id><snippet>most_common</snippet></ROW><ROW><id>12740204</id><snippet># Add additional robot e-mails here
robot_emails = ["googlebot@google.com"]

def isRobotRecord(line):

    for email in robot_emails:
        if email in line.split("Client")[1]:
            return True
        else:
            return False
</snippet></ROW><ROW><id>12740324</id><snippet>r'^post/(\d{4})/(\d{1,2})/(\d{1,2})/$'
</snippet></ROW><ROW><id>12740361</id><snippet>float</snippet></ROW><ROW><id>12740361</id><snippet>0.0</snippet></ROW><ROW><id>12740361</id><snippet>1.0</snippet></ROW><ROW><id>12740361</id><snippet>ValueError</snippet></ROW><ROW><id>12740361</id><snippet>100x100</snippet></ROW><ROW><id>12740361</id><snippet>   """Perlin simplex noise generator

    Adapted from Stefan Gustavson's Java implementation described here:

    http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf

    To summarize:

    In 2001, Ken Perlin presented 'simplex noise', a replacement for his classic
    noise algorithm.  Classic 'Perlin noise' won him an academy award and has
    become an ubiquitous procedural primitive for computer graphics over the
    years, but in hindsight it has quite a few limitations.  Ken Perlin himself
    designed simplex noise specifically to overcome those limitations, and he
    spent a lot of good thinking on it. Therefore, it is a better idea than his
    original algorithm. A few of the more prominent advantages are: 

    * Simplex noise has a lower computational complexity and requires fewer
      multiplications. 
    * Simplex noise scales to higher dimensions (4D, 5D and up) with much less
      computational cost, the complexity is O(N) for N dimensions instead of 
      the O(2^N) of classic Noise. 
    * Simplex noise has no noticeable directional artifacts.  Simplex noise has 
      a well-defined and continuous gradient everywhere that can be computed 
      quite cheaply. 
    * Simplex noise is easy to implement in hardware. 
    """
</snippet></ROW><ROW><id>12740912</id><snippet>while</snippet></ROW><ROW><id>12740912</id><snippet>gen.Task</snippet></ROW><ROW><id>12740912</id><snippet>gen.Task</snippet></ROW><ROW><id>12740912</id><snippet>def run(self):
    doc = self.curse(callback=self.render)
    self.render(doc)

def curse(self, callback=None):
    while self.cursor.alive:
        doc = self.cursor.next()
        callback(doc)
</snippet></ROW><ROW><id>12740912</id><snippet>cursor = coll.find(tailable=True, callback=render, ...)
</snippet></ROW><ROW><id>12740995</id><snippet>for</snippet></ROW><ROW><id>12740995</id><snippet>languages = ['C', 'C++', 'Java']
for language in languages:
    process(language)
</snippet></ROW><ROW><id>12740995</id><snippet>result = [process(language) for language in languages]
</snippet></ROW><ROW><id>12740995</id><snippet>a = languages[0]
b = languages[1]
c = languages[2]
</snippet></ROW><ROW><id>12740995</id><snippet>a, b, c = languages
</snippet></ROW><ROW><id>12740995</id><snippet>for</snippet></ROW><ROW><id>12741168</id><snippet>applymap</snippet></ROW><ROW><id>12741168</id><snippet>&gt;&gt;&gt; print df
   A  B  C
0 -1  0  0
1 -4  3 -1
2 -1  0  2
3  0  3  2
4  1 -1  0
&gt;&gt;&gt; print df.applymap(lambda x: x&gt;1)
       A      B      C
0  False  False  False
1  False   True  False
2  False  False   True
3  False   True   True
4  False  False  False
</snippet></ROW><ROW><id>12741174</id><snippet>Frame</snippet></ROW><ROW><id>12741174</id><snippet>from Tkinter import *
from ttk import *

class Controller(Frame):

    def __init__(self,parent):
        Frame.__init__(self, parent)

        buttons = Frame(parent)
        buttons.pack(side=TOP)
        for letter in 'ABCDEF':
            Button(buttons, text=letter).pack(side=LEFT)

        Entry(parent, width=50).pack(side=LEFT)
        Button(parent, text='OK').pack(side=RIGHT)

root = Tk()
app = Controller(root)
root.mainloop()
</snippet></ROW><ROW><id>12741174</id><snippet>for</snippet></ROW><ROW><id>12741174</id><snippet>button</snippet></ROW><ROW><id>12741174</id><snippet>function to call</snippet></ROW><ROW><id>12741174</id><snippet>dict</snippet></ROW><ROW><id>12741174</id><snippet>    handler = {'A': function_A,
               'B': function_FooBar,
               'C': function_SomeThing}

    for letter, func in ((k, handler[k]) for k in sorted(handler)):
        Button(buttons, text=letter, command=func, width=10).pack(side=LEFT)
</snippet></ROW><ROW><id>12741174</id><snippet>for letter, func in handler.items():
</snippet></ROW><ROW><id>12741219</id><snippet>Text</snippet></ROW><ROW><id>12741219</id><snippet>#!/usr/bin/env python

import Tkinter
import tkFont

class App:
    def __init__(self):

        # Set up the text box
        self.root = Tkinter.Tk()
        self.text = Tkinter.Text(self.root, width=20, height=5)
        self.text.insert(Tkinter.INSERT, "Hello...")
        self.text.pack()

        # set up a mouse event
        self.text.bind("&lt;Button-1&gt;", self.click)

        # Set Tkniter's main loop
        self.root.mainloop()

    def click(self, event):
        self.text.tag_add("here", "1.0", "1.4")
        self.text.tag_config("here", background="yellow", font=tkFont.Font(size=36))

if __name__ == "__main__":
    App()
</snippet></ROW><ROW><id>12741973</id><snippet>Pixbuf</snippet></ROW><ROW><id>12741973</id><snippet>loader = gtk.gdk.PixbufLoader('jpeg')
loader.write(pic)
loader.close()

pixbuf = loader.get_pixbuf()
</snippet></ROW><ROW><id>12742108</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>12742108</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>12742108</id><snippet>request</snippet></ROW><ROW><id>12742563</id><snippet>for cfsXYZ in coordsCFS:
    match = numpy.nonzero(
        numpy.max(numpy.abs(coordRMED - cfsXYZ), axis=1) &lt; TOLERANCE)
</snippet></ROW><ROW><id>12742851</id><snippet>end</snippet></ROW><ROW><id>12742851</id><snippet>print("\t ", num, end='')
</snippet></ROW><ROW><id>12742851</id><snippet>print('\t'.join(map(str, [1, 2, 3, 4, 5])))
</snippet></ROW><ROW><id>12743322</id><snippet>__mapper_args__ = dict(primary_key=[__table__.c.container_id, __table__.c.gprop])
</snippet></ROW><ROW><id>12743322</id><snippet>__table__.primary_key</snippet></ROW><ROW><id>12743730</id><snippet>puerta.ubicacion=ubicacion_puertas[x],
</snippet></ROW><ROW><id>12743730</id><snippet>ubicacion</snippet></ROW><ROW><id>12743730</id><snippet>puerta</snippet></ROW><ROW><id>12743730</id><snippet>puerta.ubicacion=(ubicacion_puertas[x],)
</snippet></ROW><ROW><id>12743730</id><snippet>,</snippet></ROW><ROW><id>12743730</id><snippet>puerta.ubicacion = ubicacion_puertas[x]
</snippet></ROW><ROW><id>12743775</id><snippet>shell=True</snippet></ROW><ROW><id>12743775</id><snippet>sp1 = subprocess.Popen(['find', '/dir1/tag/common/dir2/dir3', '/dir1/tag/common/dir2/dir3', '/dir4/', '-iname', path], stdout=subprocess.PIPE)
sp2 = subprocess.Popen(['grep', path_f], stdin=sp1.stdout, stdout=open('fileList.txt', 'w'))
sp1.stdout.close() # for SIGPIPE from sp2 to sp1
</snippet></ROW><ROW><id>12743775</id><snippet>path</snippet></ROW><ROW><id>12743775</id><snippet>path_f</snippet></ROW><ROW><id>12743775</id><snippet>'My 9" collection'</snippet></ROW><ROW><id>12743775</id><snippet>find</snippet></ROW><ROW><id>12743775</id><snippet>grep</snippet></ROW><ROW><id>12743822</id><snippet>import sys
import liball
sys.modules['foo'] = liball
sys.modules['bar'] = liball
</snippet></ROW><ROW><id>12743822</id><snippet>import liball as foo, libalb as bar, liball
</snippet></ROW><ROW><id>12743822</id><snippet>initfoo()</snippet></ROW><ROW><id>12743822</id><snippet>initbar()</snippet></ROW><ROW><id>12743822</id><snippet>foo</snippet></ROW><ROW><id>12743822</id><snippet>bar</snippet></ROW><ROW><id>12744451</id><snippet>self.panel</snippet></ROW><ROW><id>12744451</id><snippet>self.panel.Destroy();self.panel = wx.Panel(self)</snippet></ROW><ROW><id>12744451</id><snippet>wx.ListCtrl</snippet></ROW><ROW><id>12744451</id><snippet>EVT_LIST_ITEM_ACTIVATED</snippet></ROW><ROW><id>12744451</id><snippet>__init__:
self.ListCtrl = wx.ListCtrl(self)
self.listCtrl.InsertColumn(0, 'name')
self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnChangeFolder, self.listCtrl)
self.il = wx.ImageList(16, 16)
self.il.Add(wx.Image("folder.png", wx.BITMAP_TYPE_PNG).ConvertToBitmap())
self.listCtrl.AssignImageList(self.il)
self.folders = fileBrowser.print_items("/home/gum/Documents")
self.UpdateList()
UpdateList:
self.listCtrl.DeleteAllItems()
for index, item in enumerate(self.folders):
    self.listCtrl.Append((item, ))
    self.listCtrl.SetItemImage(index, 0)
    # 0 is the ImageList index, change it for other icons
OnChangeFolder:
self.folders = file.Browser.print_items(self.listCtrl.GetFocusedItem().GetText())
self.UpdateList
</snippet></ROW><ROW><id>12744473</id><snippet>last_coordinates = ['start', 0, 0]
</snippet></ROW><ROW><id>12744473</id><snippet>globals()['coordinates'] = data.split()
if last_coordinates[0] != coordinates[0] or \
   last_coordinates[1] != coordinates[1] or \
   last_coordinates[2] != coordinates[2]:
   # Do something useful here

# this line copies your coordinates into last_coordinates
last_coordinates = coordinates[:]
</snippet></ROW><ROW><id>12744473</id><snippet> global coordinates
 coordinates = data.split()
</snippet></ROW><ROW><id>12744865</id><snippet>&gt;&gt;&gt; a = np.array([(0.1, 1.), (0.1, 2.), (0.1, 3.), (0.1, 4.), (0.1, 5.)])
&gt;&gt;&gt; a
array([[ 0.1,  1. ],
       [ 0.1,  2. ],
       [ 0.1,  3. ],
       [ 0.1,  4. ],
       [ 0.1,  5. ]])
&gt;&gt;&gt; a.T
array([[ 0.1,  0.1,  0.1,  0.1,  0.1],
       [ 1. ,  2. ,  3. ,  4. ,  5. ]])
</snippet></ROW><ROW><id>12744961</id><snippet>image_component1 = image[:, :, 0]
image_component2 = image[:, :, 1]

result = (np.abs(image_component1) &gt; 1.) | (np.abs(image_component2) &gt; 1.)
</snippet></ROW><ROW><id>12744961</id><snippet>result = np.empty([image.shape[0], image.shape[1], 3], dtype=image.dtype)

result[:, :, 0] = image[:, :, 0]
result[:, :, 1] = image[:, :, 1]
result[:, :, 2] = (np.abs(image[:, :, 0]) &gt; 1.) | (np.abs(image[:, :, 1]) &gt; 1.)
</snippet></ROW><ROW><id>12745521</id><snippet>pol2cart</snippet></ROW><ROW><id>12745521</id><snippet>pol2cart(phi,r)</snippet></ROW><ROW><id>12745521</id><snippet>[x,y] = pol2cart(pi/6,1)
x =
    0.8660
y =
    0.5000
</snippet></ROW><ROW><id>12745521</id><snippet>complex(x,y)
ans =    
   0.8660 + 0.5000i
</snippet></ROW><ROW><id>12745917</id><snippet>class Test(object):
    def __init__(self):
        print "WORKS!"

room = globals()['Test']
</snippet></ROW><ROW><id>12745917</id><snippet>Test</snippet></ROW><ROW><id>12745917</id><snippet>room</snippet></ROW><ROW><id>12745917</id><snippet>room is Test
</snippet></ROW><ROW><id>12745917</id><snippet>True</snippet></ROW><ROW><id>12745917</id><snippet>type(room())</snippet></ROW><ROW><id>12745917</id><snippet>&lt;class '__main__.Test'&gt;
</snippet></ROW><ROW><id>12745917</id><snippet>room()</snippet></ROW><ROW><id>12745917</id><snippet>Test()</snippet></ROW><ROW><id>12745917</id><snippet>type()</snippet></ROW><ROW><id>12745917</id><snippet>Test</snippet></ROW><ROW><id>12745917</id><snippet>type(room)</snippet></ROW><ROW><id>12745917</id><snippet>&lt;type 'type'&gt; # What????
</snippet></ROW><ROW><id>12745917</id><snippet>type(Test)</snippet></ROW><ROW><id>12745917</id><snippet>getattr()</snippet></ROW><ROW><id>12745917</id><snippet>globals()</snippet></ROW><ROW><id>12745917</id><snippet>locals()</snippet></ROW><ROW><id>12745986</id><snippet>try:
  ...
except ... :

finally:
   # cleanup (close the connection, etc...)
</snippet></ROW><ROW><id>12746134</id><snippet>ZMQ_IDENTITY</snippet></ROW><ROW><id>12746134</id><snippet>polling</snippet></ROW><ROW><id>12746456</id><snippet>powerset</snippet></ROW><ROW><id>12746456</id><snippet>from collections import Counter
from itertools import chain, combinations

def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

def port_table(ports):
    d = Counter()
    for portseq in ports:
        for subset in powerset(sorted(portseq)):
            if subset:
                d[subset] += 1
    return d
</snippet></ROW><ROW><id>12746456</id><snippet>powerset</snippet></ROW><ROW><id>12746456</id><snippet>if subset:</snippet></ROW><ROW><id>12746456</id><snippet>Counter</snippet></ROW><ROW><id>12746456</id><snippet>&gt;&gt;&gt; ports = [[22,23],[22],[22,23,80],[23,80]]
&gt;&gt;&gt; table = port_table(ports)
&gt;&gt;&gt; for port, count in sorted(table.items()):
...     if count &gt; 1:
...         print port, '-&gt;', count
... 
(22,) -&gt; 3
(22, 23) -&gt; 2
(23,) -&gt; 3
(23, 80) -&gt; 2
(80,) -&gt; 2
</snippet></ROW><ROW><id>12746530</id><snippet>from urllib.request import urlopen
html = urlopen("https://accounts.google.com/NewAccount").read().decode('utf-8')
</snippet></ROW><ROW><id>12746530</id><snippet>import re
token = re.search("accounts.google.com/Captcha\?ctoken=([^\"]+)", html).group(1)
url = "https://accounts.google.com/Captcha?ctoken=" + token
</snippet></ROW><ROW><id>12746530</id><snippet>data</snippet></ROW><ROW><id>12746530</id><snippet>urlopen</snippet></ROW><ROW><id>12746939</id><snippet>NTSYSAPI NTSTATUS NTAPI ZwProtectVirtualMemory(
    IN HANDLE ProcessHandle,
    IN PVOID *  BaseAddress,
    IN SIZE_T *     NumberOfBytesToProtect,
    IN ULONG    NewAccessProtection,
    OUT PULONG  OldAccessProtection 
);
</snippet></ROW><ROW><id>12746939</id><snippet>char* pe = ((char*)BaseAddress) - 0x1000;
if ((NewAccessProtection == PAGE_EXECUTE || ... ) &amp; pe[0] == 'M' &amp;&amp; pe[0] == 'Z')
{
    // do checks here
}
</snippet></ROW><ROW><id>12747053</id><snippet>from collections import defaultdict
items = defaultdict(list)
with open("myfile.txt") as infile:
    for line in file:
        id, text = line.rstrip().split("\t")
        items[id].append(text)
for id in items:
    print id + "\t" + ", ".join(items[id])
</snippet></ROW><ROW><id>12747053</id><snippet>id</snippet></ROW><ROW><id>12747165</id><snippet>os.rename(file, iterator+file)
fullpath = os.path.join(root,file)
shutil.copy(fullpath,outDirec)
</snippet></ROW><ROW><id>12747165</id><snippet>os.rename(os.path.join(root, file), os.path.join(outDirec, iterator+file))
</snippet></ROW><ROW><id>12747165</id><snippet>shutil.copy(os.path.join(root, file), os.path.join(outDirec, iterator+file))
</snippet></ROW><ROW><id>12747508</id><snippet>import os
os.system("start python perf_test.py 5")
</snippet></ROW><ROW><id>12747529</id><snippet>re</snippet></ROW><ROW><id>12747529</id><snippet>regex</snippet></ROW><ROW><id>12747529</id><snippet># -*- coding: utf-8 -*-
from __future__ import unicode_literals
import unicodedata
import re
import regex  # $ pip install regex

word = "किशोरी"


def test(re_):
    assert re_.search("^\\w+$", word, flags=re_.UNICODE)

print([unicodedata.category(cp) for cp in word])
print(" ".join(ch for ch in regex.findall("\\X", word)))
assert all(regex.match("\\w$", c) for c in ["a", "\u093f", "\u0915"])

test(regex)
test(re)  # fails
</snippet></ROW><ROW><id>12747529</id><snippet>"किशोरी"</snippet></ROW><ROW><id>12747529</id><snippet>\b</snippet></ROW><ROW><id>12747529</id><snippet>\w</snippet></ROW><ROW><id>12747529</id><snippet>\W</snippet></ROW><ROW><id>12747529</id><snippet>\w</snippet></ROW><ROW><id>12747529</id><snippet>\W</snippet></ROW><ROW><id>12747529</id><snippet>"किशोरी"</snippet></ROW><ROW><id>12747529</id><snippet>^\w{6}$</snippet></ROW><ROW><id>12747529</id><snippet>\w</snippet></ROW><ROW><id>12747529</id><snippet>regex</snippet></ROW><ROW><id>12747529</id><snippet>U+093F</snippet></ROW><ROW><id>12747529</id><snippet>DEVANAGARI VOWEL SIGN I</snippet></ROW><ROW><id>12747529</id><snippet>regex</snippet></ROW><ROW><id>12747529</id><snippet>\w</snippet></ROW><ROW><id>12747600</id><snippet>searches</snippet></ROW><ROW><id>12747600</id><snippet>for</snippet></ROW><ROW><id>12747600</id><snippet>test</snippet></ROW><ROW><id>12747600</id><snippet>test</snippet></ROW><ROW><id>12747600</id><snippet>def isItAlive(text):
    test = None
</snippet></ROW><ROW><id>12747600</id><snippet>valcsv</snippet></ROW><ROW><id>12748525</id><snippet>mmap.mmap</snippet></ROW><ROW><id>12748615</id><snippet>./python2.7-static script.py
</snippet></ROW><ROW><id>12748615</id><snippet>make install</snippet></ROW><ROW><id>12748615</id><snippet>/usr/local/bin/pythonSOMETHING</snippet></ROW><ROW><id>12748615</id><snippet>python2.7-static</snippet></ROW><ROW><id>12748615</id><snippet>#! /usr/local/bin/pythonSOMETHING
</snippet></ROW><ROW><id>12748615</id><snippet>chmod +x</snippet></ROW><ROW><id>12748615</id><snippet>./script.py
</snippet></ROW><ROW><id>12748615</id><snippet>#!</snippet></ROW><ROW><id>12748615</id><snippet>configure</snippet></ROW><ROW><id>12748615</id><snippet>--prefix=$HOME</snippet></ROW><ROW><id>12748615</id><snippet>make install</snippet></ROW><ROW><id>12748615</id><snippet>#! /path/to/your/home/bin/pythonSOMETHING</snippet></ROW><ROW><id>12748615</id><snippet>$HOME</snippet></ROW><ROW><id>12748615</id><snippet>#!</snippet></ROW><ROW><id>12748615</id><snippet>echo $HOME</snippet></ROW><ROW><id>12748617</id><snippet>&gt;&gt;&gt; from pyquery import PyQuery as pq
&gt;&gt;&gt; d = pq("&lt;html&gt;&lt;p id="hello"&gt;Foo&lt;/p&gt;&lt;/html&gt;")

&gt;&gt;&gt; d("#hello")
[&lt;p#hello.hello&gt;]

&gt;&gt;&gt; d('p:first')
[&lt;p#hello.hello&gt;]
</snippet></ROW><ROW><id>12748650</id><snippet>.match()</snippet></ROW><ROW><id>12748650</id><snippet>.search()</snippet></ROW><ROW><id>12748868</id><snippet>__init__.py</snippet></ROW><ROW><id>12748868</id><snippet>__init__.py</snippet></ROW><ROW><id>12748868</id><snippet>*</snippet></ROW><ROW><id>12749147</id><snippet>twisted.internet.reactor.callLater</snippet></ROW><ROW><id>12749147</id><snippet>twisted.internet.task.LoopingCall</snippet></ROW><ROW><id>12749191</id><snippet>()</snippet></ROW><ROW><id>12749191</id><snippet>r"(?&lt;!\S)AT\s+(\w+)\s*\n</snippet></ROW><ROW><id>12749191</id><snippet>group</snippet></ROW><ROW><id>12749191</id><snippet>r.search("yourText").group(1)
</snippet></ROW><ROW><id>12749281</id><snippet>cnxn = pyodbc.connect(driver='{SQL Server}', server='SERVER\INSTANCE',  
                      database='Test_Chad', trusted_connection='yes') 
</snippet></ROW><ROW><id>12749281</id><snippet>uid</snippet></ROW><ROW><id>12749281</id><snippet>pwd</snippet></ROW><ROW><id>12749281</id><snippet>Trusted_Connection=yes</snippet></ROW><ROW><id>12749281</id><snippet>cnxn = pyodbc.connect(driver='{SQL Server}', server='SERVER\INSTANCE',  
                      database='Test_Chad', uid='username', pwd='password')
</snippet></ROW><ROW><id>12749400</id><snippet>&gt;&gt;&gt; def f(x, y): pass
...
&gt;&gt;&gt; f(print(1), print(2))
1
2
</snippet></ROW><ROW><id>12749495</id><snippet>key</snippet></ROW><ROW><id>12749495</id><snippet>cmp</snippet></ROW><ROW><id>12749495</id><snippet>def make_comparator(less_than):
    def compare(x, y):
        if less_than(x, y):
            return -1
        elif less_than(y, x):
            return 1
        else:
            return 0
    return compare

sortedDict = sorted(subjects, cmp=make_comparator(cmpValue), reverse=True)
</snippet></ROW><ROW><id>12749495</id><snippet>sorted(subjects, operator.itemgetter(0), reverse=True)
</snippet></ROW><ROW><id>12749495</id><snippet>sortedDict</snippet></ROW><ROW><id>12749495</id><snippet>dict</snippet></ROW><ROW><id>12749623</id><snippet>csv</snippet></ROW><ROW><id>12749623</id><snippet>csv.reader</snippet></ROW><ROW><id>12749623</id><snippet>split</snippet></ROW><ROW><id>12749623</id><snippet>csv.writer</snippet></ROW><ROW><id>12749951</id><snippet>def HeapSort(A,T):
    def heapify(A):
        start = (len(A) - 2) / 2
        while start &gt;= 0:
            siftDown(A, start, len(A) - 1)
            start -= 1

    def siftDown(A, start, end):
        root = start
        while root * 2 + 1 &lt;= end:
            child = root * 2 + 1
            if child + 1 &lt;= end and T.count(A[child]) &lt; T.count(A[child + 1]):
                child += 1
            if child &lt;= end and T.count(A[root]) &lt; T.count(A[child]):
                A[root], A[child] = A[child], A[root]
                root = child
            else:
                return

    heapify(A)
    end = len(A) - 1
    while end &gt; 0:
        A[end], A[0] = A[0], A[end]
        siftDown(A, 0, end - 1)
        end -= 1


if __name__ == '__main__':
    text = "the quick brown fox jumped over the the quick brown quick log log"
    heap = list(set(text.split()))
    print heap

    HeapSort(heap,text)
    print heap
</snippet></ROW><ROW><id>12749951</id><snippet>['brown', 'log', 'jumped', 'over', 'fox', 'quick', 'the']
['jumped', 'fox', 'over', 'brown', 'log', 'the', 'quick']
</snippet></ROW><ROW><id>12750328</id><snippet>if session.query(Item.id).filter(Item.email==newItem.email,
                                 Item.type==newItem.type).count() &gt; 0:
    // item exists
</snippet></ROW><ROW><id>12750534</id><snippet>r'\((.|\s)*?\)'</snippet></ROW><ROW><id>12750534</id><snippet>re_innermostparens = re.compile(r"""
    \(        # Literal open paren.
    [^()]*    # Zero or more non-parens.
    \)        # Literal close paren.
    """, re.VERBOSE)
</snippet></ROW><ROW><id>12750813</id><snippet>data2 = np.ones((4, 5))
</snippet></ROW><ROW><id>12750813</id><snippet>data1[np.isnan(data1)] = data2[np.isnan(data1)]
</snippet></ROW><ROW><id>12750865</id><snippet>getboolean()</snippet></ROW><ROW><id>12750865</id><snippet>print config.getboolean('main', 'some_boolean') 
print config.getboolean('main', 'some_other_boolean')
</snippet></ROW><ROW><id>12750865</id><snippet>RawConfigParser.getboolean(section, option)
</snippet></ROW><ROW><id>12750865</id><snippet>bool()</snippet></ROW><ROW><id>12750865</id><snippet>bool()</snippet></ROW><ROW><id>12750865</id><snippet>&gt;&gt;&gt; bool('false')
True
&gt;&gt;&gt; bool('no')
True
&gt;&gt;&gt; bool('0')
True
&gt;&gt;&gt; bool('')
False
</snippet></ROW><ROW><id>12751140</id><snippet>comma(,)</snippet></ROW><ROW><id>12751140</id><snippet>comma(,)</snippet></ROW><ROW><id>12751140</id><snippet>print 'order:', x/25 + y/10 + z/25 ,' units'
</snippet></ROW><ROW><id>12751179</id><snippet>arr = np.array(a)
xa, ya, val = arr.T
pts = (xa &gt;= start) &amp; (ya &lt;= end)
print arr[pts]
</snippet></ROW><ROW><id>12751200</id><snippet>plt.title</snippet></ROW><ROW><id>12751200</id><snippet>plt.text</snippet></ROW><ROW><id>12751200</id><snippet>import pylab as plt

fig = plt.figure(figsize=(5,10))

figure_title = "Normal title"
ax1  = plt.subplot(1,2,1)

plt.title(figure_title, fontsize = 20)
plt.plot([1,2,3],[1,4,9])

figure_title = "Raised title"
ax2  = plt.subplot(1,2,2)

plt.text(0.5, 1.08, figure_title,
         horizontalalignment='center',
         fontsize=20,
         transform = ax2.transAxes)
plt.plot([1,2,3],[1,4,9])

plt.show()
</snippet></ROW><ROW><id>12751319</id><snippet>url = "http://www.nalmls.com/SERetsHuntsville/Search.aspx?SearchType=Property&amp;Class=RES&amp;StandardNames=0&amp;Format=COMPACT&amp;Query=(DATE_MODIFIED=2012-09-28T00:00:00%2B)&amp;Limit=10"
r = requests.get(url, auth=('user', 'pass'))
page = r.text
</snippet></ROW><ROW><id>12751319</id><snippet>from requests.auth import HTTPDigestAuth
r = requests.get(url, auth=HTTPDigestAuth('user', 'pass'))
</snippet></ROW><ROW><id>12751728</id><snippet>writeshort</snippet></ROW><ROW><id>12751728</id><snippet>writeshort</snippet></ROW><ROW><id>12751728</id><snippet>def writeshort(txt):
    wordlist = []
    for item in txt:
        if len(item) &gt; 4:
            continue
        wordlist += [item] # or wordlist.append(item) as in your first snippet
    return wordlist
</snippet></ROW><ROW><id>12751728</id><snippet>[word for word in txt if len(word) &lt;= 4]
</snippet></ROW><ROW><id>12751728</id><snippet>for txt in txt:</snippet></ROW><ROW><id>12751728</id><snippet>txt</snippet></ROW><ROW><id>12751728</id><snippet>txt</snippet></ROW><ROW><id>12751795</id><snippet>square(x)</snippet></ROW><ROW><id>12751795</id><snippet>cube</snippet></ROW><ROW><id>12751795</id><snippet>square</snippet></ROW><ROW><id>12751795</id><snippet>cube</snippet></ROW><ROW><id>12751827</id><snippet>filter()</snippet></ROW><ROW><id>12751827</id><snippet>map()</snippet></ROW><ROW><id>12751827</id><snippet>filter(lambda x: x &gt;= 2, [1, 2, 3])
&gt;&gt;&gt; [2, 3]
</snippet></ROW><ROW><id>12751827</id><snippet>def factors(x):
    return [n for n in range(1, x + 1) if x % n == 0]

factors(20)
&gt;&gt;&gt; [1, 2, 4, 5, 10, 20]
</snippet></ROW><ROW><id>12751920</id><snippet>&gt;&gt;&gt; [x + [y] for x, y in zip(list1, list2)]
[['a', 'a', 1], ['b', 'b', 2], ['c', 'c', 3]]
</snippet></ROW><ROW><id>12751971</id><snippet>quotes</snippet></ROW><ROW><id>12751971</id><snippet>In [43]: len(quotes)
Out[43]: 61

In [44]: len(symbols)
Out[44]: 61

In [45]: symbols
Out[45]: 
array(['COP', 'AXP', 'RTN', 'BA', 'AAPL', 'PEP', 'NAV', 'GSK', 'MSFT',
       'KMB', 'R', 'SAP', 'GS', 'CL', 'WAG', 'WMT', 'GE', 'SNE', 'PFE',
       'AMZN', 'MAR', 'NVS', 'KO', 'MMM', 'CMCSA', 'SNY', 'IBM', 'CVX',
       'WFC', 'DD', 'CVS', 'TOT', 'CAT', 'CAJ', 'BAC', 'AIG', 'TWX', 'HD',
       'TXN', 'KFT', 'VLO', 'NWS', 'F', 'CVC', 'TM', 'PG', 'LMT', 'K',
       'HMC', 'GD', 'HPQ', 'DELL', 'MTU', 'XRX', 'YHOO', 'XOM', 'JPM',
       'MCD', 'CSCO', 'NOC', 'UN'], 
      dtype='|S17')
</snippet></ROW><ROW><id>12751971</id><snippet>quotes</snippet></ROW><ROW><id>12751971</id><snippet>In [49]: symbols[0]
Out[49]: 'COP'

In [50]: quotes[0].open
Out[50]: 
array([ 13.81001419,  14.01678947,  14.01500099, ...,  56.77238579,
        56.82699428,  56.89080408])

In [51]: quotes[0].date
Out[51]: 
array([2003-01-02, 2003-01-03, 2003-01-06, ..., 2007-12-27, 2007-12-28,
       2007-12-31], dtype=object)
</snippet></ROW><ROW><id>12752195</id><snippet>http://hermantowndrama.appspot.com/</snippet></ROW><ROW><id>12752195</id><snippet>http://hermantowndrama.appspot.com/</snippet></ROW><ROW><id>12752195</id><snippet>path="</snippet></ROW><ROW><id>12752195</id><snippet>user</snippet></ROW><ROW><id>12752272</id><snippet>getRow</snippet></ROW><ROW><id>12752272</id><snippet>...
return row
</snippet></ROW><ROW><id>12752272</id><snippet>getRow()</snippet></ROW><ROW><id>12752272</id><snippet>getRow(self)</snippet></ROW><ROW><id>12752272</id><snippet>someinstance.method()</snippet></ROW><ROW><id>12752272</id><snippet>#@PydevCodeAnalysisIgnore
import pyodbc
class DbMain(object):
    def __init__(self):
        # make cnxn an attribute of the instance
        self.cnxn = pyodbc.connect(driver='{SQL Server}', server='server', 
            database='database', uid='name', pwd='pwd')

    # receive `self` explicitly
    def getRow(self): 
        cursor = self.cnxn.cursor()
        cursor.execute("select user_id, user_name from users")
        row = cursor.fetchone()
        # actually return something
        return row
</snippet></ROW><ROW><id>12752338</id><snippet>#value = sublist[n]
value = nth(x for x in objList if not x.flag, n)

#value = len(sublist)
value = sum(not x.flag for x in objList)

#value = sublist.index(target)
value = next(dropwhile(lambda x: x != target, (x for x in objList if not x.flag)))
</snippet></ROW><ROW><id>12752338</id><snippet>itertools.dropwhile()</snippet></ROW><ROW><id>12752338</id><snippet>nth()</snippet></ROW><ROW><id>12752531</id><snippet>Location:</snippet></ROW><ROW><id>12752531</id><snippet>302 Moved temporarily</snippet></ROW><ROW><id>12752531</id><snippet>301</snippet></ROW><ROW><id>12752531</id><snippet>Location:</snippet></ROW><ROW><id>12752531</id><snippet>Connection : keep-alive</snippet></ROW><ROW><id>12752531</id><snippet>Connection: close</snippet></ROW><ROW><id>12752531</id><snippet>Content-Encoding : gzip</snippet></ROW><ROW><id>12752531</id><snippet>Accept-Encoding: gzip, deflate</snippet></ROW><ROW><id>12752531</id><snippet>Accept-Language</snippet></ROW><ROW><id>12752531</id><snippet>Accept-Encoding</snippet></ROW><ROW><id>12752531</id><snippet>User-Agent</snippet></ROW><ROW><id>12752531</id><snippet>urllib</snippet></ROW><ROW><id>12752531</id><snippet>GET / HTTP/1.0</snippet></ROW><ROW><id>12752531</id><snippet>urllib</snippet></ROW><ROW><id>12752677</id><snippet>Gtk.RadioButton</snippet></ROW><ROW><id>12752677</id><snippet>Gtk.RadioButton.new_with_label_from_widget</snippet></ROW><ROW><id>12752945</id><snippet>print("α")
</snippet></ROW><ROW><id>12752945</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>12752945</id><snippet>$ PYTHONIOENCODING=utf-8 python3 test.py &gt; output.txt
</snippet></ROW><ROW><id>12752945</id><snippet>$ python3 test.py 
</snippet></ROW><ROW><id>12752945</id><snippet>test.py</snippet></ROW><ROW><id>12752945</id><snippet>import csv

with open('myfile.csv', newline='', encoding='utf-8') as file:
    for row in csv.reader(file):
        print(row)
</snippet></ROW><ROW><id>12752945</id><snippet>open()</snippet></ROW><ROW><id>12752945</id><snippet>encoding</snippet></ROW><ROW><id>12752945</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>12752945</id><snippet>LC_ALL=C</snippet></ROW><ROW><id>12752945</id><snippet>LC_ALL=C</snippet></ROW><ROW><id>12752945</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>12752945</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>12752988</id><snippet>return</snippet></ROW><ROW><id>12752988</id><snippet>else:
    print "base case didn't happen for", the_list
    return [remove_spaces_from_list_recursive(element) for element in the_list]
</snippet></ROW><ROW><id>12753036</id><snippet>q = Q()
for author in authors:
    q &amp;= Q(authors=author)
Books.objects.filter(q)
</snippet></ROW><ROW><id>12753036</id><snippet>Books.objects.annotate(count=Count('authors')).filter(count=len(authors)).filter(q)
</snippet></ROW><ROW><id>12753036</id><snippet># this queryset will be embedded as a subquery in the next
bad_authors = Author.objects.exclude(name__in=['A1', 'A2'])
</snippet></ROW><ROW><id>12753036</id><snippet># get all books without any of the bad_authors
Books.objects.exclude(authors__in=bad_authors)
</snippet></ROW><ROW><id>12753036</id><snippet>Books.objects.exclude(authors__in=bad_authors).exclude(authors=None)
</snippet></ROW><ROW><id>12753043</id><snippet>%cpaste</snippet></ROW><ROW><id>12753043</id><snippet>test.py</snippet></ROW><ROW><id>12753043</id><snippet>M-x shell</snippet></ROW><ROW><id>12753043</id><snippet>python test.py</snippet></ROW><ROW><id>12753043</id><snippet>test.py</snippet></ROW><ROW><id>12753043</id><snippet>%run "test.py"</snippet></ROW><ROW><id>12753128</id><snippet>dic</snippet></ROW><ROW><id>12753128</id><snippet>dic</snippet></ROW><ROW><id>12753128</id><snippet>parsed.append(dic)</snippet></ROW><ROW><id>12753128</id><snippet>Append</snippet></ROW><ROW><id>12753128</id><snippet>parse</snippet></ROW><ROW><id>12753128</id><snippet>&gt;&gt;&gt; d = {'a': '', 'b': '', 'c': ''}
&gt;&gt;&gt; stuff = []
&gt;&gt;&gt; stuff.append(d)
&gt;&gt;&gt; print stuff
[{'a': '', 'c': '', 'b': ''}]
&gt;&gt;&gt; d['a'] = 'other'
&gt;&gt;&gt; print stuff
[{'a': 'other', 'c': '', 'b': ''}]
&gt;&gt;&gt; stuff.append(d)
&gt;&gt;&gt; print stuff
[{'a': 'other', 'c': '', 'b': ''}, {'a': 'other', 'c': '', 'b': ''}]
&gt;&gt;&gt; d['a'] = 'yet another'
&gt;&gt;&gt; print stuff
[{'a': 'yet another', 'c': '', 'b': ''}, {'a': 'yet another', 'c': '', 'b': ''}]
</snippet></ROW><ROW><id>12753310</id><snippet>super</snippet></ROW><ROW><id>12753310</id><snippet>class ParentOne():
    def __init__(self):
        super().__init__()        
        print("Parent One says: Hello my child!")
        self.i = 1

    def methodOne(self):
        print(self.i)

class ParentTwo():
    def __init__(self):
        super().__init__() 
        print("Parent Two says: Hello my child")

class Child(ParentOne, ParentTwo):
    def __init__(self):
        super().__init__()
        print("Child Says: hello")

A=Child()
</snippet></ROW><ROW><id>12753310</id><snippet>Parent Two says: Hello my child
Parent One says: Hello my child!
Child Says: hello
</snippet></ROW><ROW><id>12753364</id><snippet>d</snippet></ROW><ROW><id>12753364</id><snippet>k</snippet></ROW><ROW><id>12753364</id><snippet>d.pop(k)
</snippet></ROW><ROW><id>12753364</id><snippet>d = {"a": 1, "b": 2, "c": 3}
d.pop("a")
print d
# {'c': 3, 'b': 2}
</snippet></ROW><ROW><id>12753364</id><snippet>for k in lst:
    d.pop(k)
</snippet></ROW><ROW><id>12753364</id><snippet>s = set(lst)
new_dict = {k: v for k, v in d.items() if k not in s}
</snippet></ROW><ROW><id>12753364</id><snippet>k not in lst</snippet></ROW><ROW><id>12753364</id><snippet>set(lst)</snippet></ROW><ROW><id>12753364</id><snippet>set</snippet></ROW><ROW><id>12753609</id><snippet>is_truthy = bool
</snippet></ROW><ROW><id>12753800</id><snippet>str.replace</snippet></ROW><ROW><id>12753800</id><snippet>&gt;&gt;&gt; x = 'ASDFBOB DESUDESUBOBADSF'
&gt;&gt;&gt; y = x.replace('BOB', '')
&gt;&gt;&gt; y
'ASDF DESUDESUADSF'
</snippet></ROW><ROW><id>12753800</id><snippet>x.replace('BOB', '', 1)</snippet></ROW><ROW><id>12753800</id><snippet>re.sub</snippet></ROW><ROW><id>12754068</id><snippet>before_insert</snippet></ROW><ROW><id>12754068</id><snippet>classmethod</snippet></ROW><ROW><id>12754068</id><snippet>TimeStampMixin</snippet></ROW><ROW><id>12754068</id><snippet>class TimeStampMixin(object):

    # other class methods

    @staticmethod
    def create_time(mapper, connection, target):
        target.created = time()

    @classmethod
    def register(cls):
        event.list(cls, 'before_insert', cls.create_time)
</snippet></ROW><ROW><id>12754068</id><snippet>class MyMappedClass(TimeStampMixin, Base):
    pass

MyMappedClass.register()
</snippet></ROW><ROW><id>12754169</id><snippet>sorted</snippet></ROW><ROW><id>12754169</id><snippet>&gt;&gt;&gt; A = {37:4783, 92:47834, 12:234234}
&gt;&gt;&gt; sorted(A.values(), reverse=True)
[234234, 47834, 4783]
</snippet></ROW><ROW><id>12754169</id><snippet>max(A, key=lambda x: x[1])
</snippet></ROW><ROW><id>12754169</id><snippet>max([37, 92, 12], key=lambda x:x[1])
</snippet></ROW><ROW><id>12754169</id><snippet>37[1]</snippet></ROW><ROW><id>12754169</id><snippet>items</snippet></ROW><ROW><id>12754169</id><snippet>dict.get</snippet></ROW><ROW><id>12754169</id><snippet>&gt;&gt;&gt; [k for k,v in sorted(A.items(), key=lambda item: item[1], reverse=True)]
[12, 37, 92]
&gt;&gt;&gt; sorted(A, key=lambda k: A[k], reverse=True)
[12, 37, 92]
&gt;&gt;&gt; sorted(A, key=A.get, reverse=True)
[12, 37, 92]
</snippet></ROW><ROW><id>12754177</id><snippet>from itertools import groupby

keyfunc = lambda row : (row['Type'], row['Taxonomy ID'], row['Name'])

result = []

data = sorted(data, key=keyfunc)
for k, g in groupby(data, keyfunc):
    # you can either add the matching rows to the item so you end up with what you wanted
    item = {}        
    for row in g:
        item.update(row)
    result.append(item)

    # or you could just add the matched rows as subitems to a parent dictionary
    # which might come in handy if you need to work with just the parts that are
    # different
    item = {'Type': k[0], 'Taxonomy ID' : k[1], 'Name' : k[2], 'matches': [])
    for row in g:
        del row['Type']
        del row['Taxonomy ID']
        del row['Name']
        item['matches'].append(row)
    result.append(item)  
</snippet></ROW><ROW><id>12754410</id><snippet>WSGIDaemonProcess mygroup
WSGIProcessGroup mygroup
</snippet></ROW><ROW><id>12754631</id><snippet>#!/usr/bin/python
# URL that generated this code:
# http://txt2re.com/index-python.php3?s=$%2055%20326&amp;2&amp;1

import re

txt='$ 55 326' 
re1='.*?'   # Non-greedy match on filler
re2='(\\d+)'    # Integer Number 1
re3='.*?'   # Non-greedy match on filler
re4='(\\d+)'    # Integer Number 2

rg = re.compile(re1+re2+re3+re4,re.IGNORECASE|re.DOTALL)
m = rg.search(txt)
if m:
    int1=m.group(1)
    int2=m.group(2)
    print "("+int1+")"+"("+int2+")"+"\n"
</snippet></ROW><ROW><id>12754858</id><snippet>In [25]: re.match('\ö', u'ö')
Out[25]: &lt;_sre.SRE_Match object at 0x92fef38&gt;
</snippet></ROW><ROW><id>12754858</id><snippet>A</snippet></ROW><ROW><id>12754858</id><snippet>b</snippet></ROW><ROW><id>12754858</id><snippet>B</snippet></ROW><ROW><id>12754858</id><snippet>d</snippet></ROW><ROW><id>12754858</id><snippet>'ö'</snippet></ROW><ROW><id>12755007</id><snippet>element.insert(0, new_sub_element)</snippet></ROW><ROW><id>12755301</id><snippet>if</snippet></ROW><ROW><id>12755301</id><snippet>doc.setdefault('links', []).append(link)
</snippet></ROW><ROW><id>12755301</id><snippet>setdefault</snippet></ROW><ROW><id>12755301</id><snippet>links</snippet></ROW><ROW><id>12755301</id><snippet>link</snippet></ROW><ROW><id>12755301</id><snippet>links</snippet></ROW><ROW><id>12755301</id><snippet>link</snippet></ROW><ROW><id>12755301</id><snippet>def makeLink(from_id, to_id, linkType):
    # get doc from db
    doc = db[from_id]

    # construct link object
    link = {'to_id':to_id, 'linkType':linkType}

    # add link reference to array at key 'links'
    doc.setdefault('links', []).append(link)

    # update the record in the database
    db[doc.id] = doc
</snippet></ROW><ROW><id>12755580</id><snippet>account_move_line</snippet></ROW><ROW><id>12755580</id><snippet>fields_view_get</snippet></ROW><ROW><id>12755581</id><snippet>Timer</snippet></ROW><ROW><id>12755581</id><snippet>from threading import Timer

def giveaway():
    agive = 0
    enteredgiveaway = enteredgiveaway.rstrip()
    enteredgiveaway = enteredgiveaway.split(" ")
    gg = random.choice(enteredgiveaway)
    message("The winner of the giveaway is: " + gg)
    gg = ""
    enteredgiveaway = ""
</snippet></ROW><ROW><id>12755581</id><snippet>if ":!giveaway" in prevdata and senderusr in securelist and agive == 0:
    agive = agive+1
    message("Giveaway started by: " + senderusr)
    t = Timer(3, giveaway)
    t.start()

...
</snippet></ROW><ROW><id>12755581</id><snippet>enteredgiveaway</snippet></ROW><ROW><id>12755708</id><snippet>for</snippet></ROW><ROW><id>12755708</id><snippet>for</snippet></ROW><ROW><id>12755708</id><snippet>for line in lines:
    print line
</snippet></ROW><ROW><id>12755708</id><snippet>for</snippet></ROW><ROW><id>12755708</id><snippet>lst[i]</snippet></ROW><ROW><id>12755708</id><snippet>enumerate()</snippet></ROW><ROW><id>12755708</id><snippet>for i, line in enumerate(lines):
    print i
    print line
    print lines[i+7]
</snippet></ROW><ROW><id>12755708</id><snippet>i = i+1</snippet></ROW><ROW><id>12755708</id><snippet>if</snippet></ROW><ROW><id>12755708</id><snippet>else</snippet></ROW><ROW><id>12755708</id><snippet>if/else</snippet></ROW><ROW><id>12755708</id><snippet>else</snippet></ROW><ROW><id>12755708</id><snippet>while i &lt; 500:
    if Lines[i] == searchquery:
        f2.write(Lines[i])
        f2.write(Lines[i+1])
        f2.write(Lines[i+2])
    i = i+1
</snippet></ROW><ROW><id>12755708</id><snippet>IndexError</snippet></ROW><ROW><id>12755708</id><snippet>len(lines)</snippet></ROW><ROW><id>12755708</id><snippet>while</snippet></ROW><ROW><id>12755708</id><snippet>for</snippet></ROW><ROW><id>12755708</id><snippet>range(len(lst))</snippet></ROW><ROW><id>12755708</id><snippet>len(lst) - 1</snippet></ROW><ROW><id>12755708</id><snippet>for i in range(len(lst)):
    print lst[i]
</snippet></ROW><ROW><id>12755708</id><snippet>open()</snippet></ROW><ROW><id>12755708</id><snippet>with open('test.txt') as f:
    f.write('foo')
</snippet></ROW><ROW><id>12755708</id><snippet>f</snippet></ROW><ROW><id>12755708</id><snippet>with</snippet></ROW><ROW><id>12755708</id><snippet>with</snippet></ROW><ROW><id>12755708</id><snippet>with open('one.txt') as f1:
    with open('two.txt') as f2:
        f1.write('foo')
        f2.write('bar')
</snippet></ROW><ROW><id>12755708</id><snippet>with</snippet></ROW><ROW><id>12755708</id><snippet>    with open('one.txt') as f1, open('two.txt', 'a') as f2:
        f1.write('foo')
        f2.write('bar')
</snippet></ROW><ROW><id>12755708</id><snippet>\n</snippet></ROW><ROW><id>12755708</id><snippet>\r</snippet></ROW><ROW><id>12755708</id><snippet>\r\n</snippet></ROW><ROW><id>12755708</id><snippet>Lines[i] == searchquery</snippet></ROW><ROW><id>12755708</id><snippet>file.readline()</snippet></ROW><ROW><id>12755708</id><snippet>str.strip()</snippet></ROW><ROW><id>12755708</id><snippet>searchquery = 'am'
# ...
            if line.strip() == searchquery:
                # ...
</snippet></ROW><ROW><id>12755708</id><snippet>file.read()</snippet></ROW><ROW><id>12755708</id><snippet>str.splitlines()</snippet></ROW><ROW><id>12755708</id><snippet>str.startswith()</snippet></ROW><ROW><id>12755708</id><snippet>if line.startswith(searchquery):
    # ...
</snippet></ROW><ROW><id>12755708</id><snippet>CamelCase</snippet></ROW><ROW><id>12755708</id><snippet>lowercase_underscore</snippet></ROW><ROW><id>12755708</id><snippet>Lines</snippet></ROW><ROW><id>12755708</id><snippet>lines</snippet></ROW><ROW><id>12755708</id><snippet>searchquery = 'am'

with open('Test.txt') as f1:
    with open('Output.txt', 'a') as f2:
        lines = f1.readlines()
        for i, line in enumerate(lines):
            if line.startswith(searchquery):
                f2.write(line)
                f2.write(lines[i + 1])
                f2.write(lines[i + 2])
</snippet></ROW><ROW><id>12755708</id><snippet>try...except</snippet></ROW><ROW><id>12755829</id><snippet>EntryWidget</snippet></ROW><ROW><id>12755829</id><snippet>Tkinter.Entry</snippet></ROW><ROW><id>12755829</id><snippet>get()</snippet></ROW><ROW><id>12755829</id><snippet>EntryWidget</snippet></ROW><ROW><id>12755829</id><snippet>self.entry</snippet></ROW><ROW><id>12755829</id><snippet>EntryWidget</snippet></ROW><ROW><id>12755829</id><snippet>get()</snippet></ROW><ROW><id>12756041</id><snippet>step(time,value,where='post')
</snippet></ROW><ROW><id>12756084</id><snippet>"\x1B[A" for up
"\x1B[B" for down
</snippet></ROW><ROW><id>12756128</id><snippet>text = u'abcdeáéí.@# '</snippet></ROW><ROW><id>12756128</id><snippet>re.sub(u'[^a-zA-Z0-9áéíóúÁÉÍÓÚâêîôÂÊÎÔãõÃÕçÇ: ]', ' ', text)</snippet></ROW><ROW><id>12756128</id><snippet>u'abcde\xe1\xe9\xed    '</snippet></ROW><ROW><id>12756128</id><snippet>\xe1</snippet></ROW><ROW><id>12756128</id><snippet>text</snippet></ROW><ROW><id>12756128</id><snippet>r</snippet></ROW><ROW><id>12756128</id><snippet>r'\d\w'</snippet></ROW><ROW><id>12756128</id><snippet>'\\d\\w'</snippet></ROW><ROW><id>12756173</id><snippet>import re, string, timeit

clean = re.compile(r'[^a-zA-Z0-9_-]')
keep = string.ascii_letters + string.digits + '_-'
keep_set = set(string.ascii_letters + string.digits + '_-')
test = '$pam and_Eggs##-!'
cur_encoding_bytes = 256 # 8 for UTF-8, in Python 3 this would be different for Unicode
all_else = ''.join(chr(i) for i in range(cur_encoding_bytes) if chr(i) not in keep_set) # taken from http://stackoverflow.com/a/3588485/1219006

def clean1(s):
    return ''.join(x for x in s if x in keep)

def clean1_filter(s):
    return filter(keep.__contains__, s)

def clean1_filter_set(s):
    return filter(keep_set.__contains__, s)

def clean2(s):
    return clean.sub('', s)

def clean3(s):
    return s.translate(None, all_else)

print timeit.timeit('clean1(test)', 'from __main__ import clean1, test')
print timeit.timeit('clean1_filter(test)', 'from __main__ import clean1_filter, test')
print timeit.timeit('clean1_filter_set(test)', 'from __main__ import clean1_filter_set, test')
print timeit.timeit('clean2(test)', 'from __main__ import clean2, test')
print timeit.timeit('clean3(test)', 'from __main__ import clean3, test')
</snippet></ROW><ROW><id>12756173</id><snippet>2.96962522809
1.56208783165
1.10597814849
1.59298783663
0.53834820236
</snippet></ROW><ROW><id>12756173</id><snippet>str.translate</snippet></ROW><ROW><id>12756376</id><snippet>&gt;&gt;&gt; with open('login.json','w') as f:
        f.write(json.dumps({'user': 'abc', 'pass': '123'}))

&gt;&gt;&gt; with open('login.json','r') as f:
        data=json.loads(f.read())
&gt;&gt;&gt; print data
{u'user': u'abc', u'pass': u'123'}
</snippet></ROW><ROW><id>12756376</id><snippet>tries=0</snippet></ROW><ROW><id>12756376</id><snippet>def check_login(user,pwd):
    r = requests.get(url, auth=(user, pwd), headers=headers)
    return r.reason == 'OK':
</snippet></ROW><ROW><id>12756376</id><snippet>def req_auth(tries = 0) #accept an optional argument for no. of tries
    #your existing code here
    if check_login(user, password):
        #Save data here
    else:
        if tries&lt;3: #an exit condition and an error message:
            req_auth(tries+1) #increment no. of tries on every failed attempt
        else:
            print "You have exceeded the number of failed attempts. Exiting..."
</snippet></ROW><ROW><id>12756923</id><snippet>def f():
    a = 2
</snippet></ROW><ROW><id>12756923</id><snippet>a</snippet></ROW><ROW><id>12756923</id><snippet>a = f()</snippet></ROW><ROW><id>12756923</id><snippet>def f():
   def g():
      return "blah"
   return g

&gt;&gt;&gt; func = f()
&gt;&gt;&gt; func()
'blah'
</snippet></ROW><ROW><id>12756973</id><snippet>bar</snippet></ROW><ROW><id>12756973</id><snippet>str</snippet></ROW><ROW><id>12756973</id><snippet>"echo "</snippet></ROW><ROW><id>12756973</id><snippet>bar</snippet></ROW><ROW><id>12756973</id><snippet>bar</snippet></ROW><ROW><id>12756973</id><snippet>if foo.startswith("echo "):
    print foo[5:]
</snippet></ROW><ROW><id>12756973</id><snippet>str</snippet></ROW><ROW><id>12756989</id><snippet>numpy</snippet></ROW><ROW><id>12756989</id><snippet>numpy</snippet></ROW><ROW><id>12756989</id><snippet>/usr/bin/python2.7
</snippet></ROW><ROW><id>12756989</id><snippet>numpy</snippet></ROW><ROW><id>12757066</id><snippet>virtualenv</snippet></ROW><ROW><id>12757066</id><snippet>virtualenv</snippet></ROW><ROW><id>12757066</id><snippet>pip install django</snippet></ROW><ROW><id>12757066</id><snippet>virtualenv</snippet></ROW><ROW><id>12757066</id><snippet>requirements.txt</snippet></ROW><ROW><id>12757066</id><snippet>Django==1.4.1
Mako==0.7.0
MarkupSafe==0.15
</snippet></ROW><ROW><id>12757066</id><snippet>pip install -r /path/to/requirements.txt</snippet></ROW><ROW><id>12757072</id><snippet>label</snippet></ROW><ROW><id>12757072</id><snippet>In [16]: img
Out[16]: 
array([[ 0. ,  0.5,  0. ,  1. ],
       [ 0. ,  0.5,  0.5,  0. ],
       [ 0.5,  0. ,  1. ,  0. ],
       [ 0.5,  0. ,  1. ,  0. ]])
</snippet></ROW><ROW><id>12757072</id><snippet>label(img)</snippet></ROW><ROW><id>12757072</id><snippet>In [17]: lbl, n = label(img)

In [18]: lbl
Out[18]: 
array([[0, 1, 0, 2],
       [0, 1, 1, 0],
       [3, 0, 1, 0],
       [3, 0, 1, 0]])

In [19]: n
Out[19]: 3
</snippet></ROW><ROW><id>12757266</id><snippet>alembic -c /some/path/to/another.ini</snippet></ROW><ROW><id>12757266</id><snippet>[alembic]</snippet></ROW><ROW><id>12757266</id><snippet>alembic -c production.ini upgrade head</snippet></ROW><ROW><id>12757365</id><snippet>character_sheet.append("Current Weapon %s" % current_weapon)</snippet></ROW><ROW><id>12757365</id><snippet>character_sheet.remove(current_weapon)</snippet></ROW><ROW><id>12757365</id><snippet>current_weapon</snippet></ROW><ROW><id>12757365</id><snippet>current_weapon</snippet></ROW><ROW><id>12757375</id><snippet>#
# script to register Python 2.0 or later for use with win32all 
# and other extensions that require Python registry settings
#
# written by Joakim Low for Secret Labs AB / PythonWare
#
# source:
# http://www.pythonware.com/products/works/articles/regpy20.htm

import sys
from _winreg import *

# tweak as necessary

version = sys.version[:3]
installpath = sys.prefix
regpath = "SOFTWARE\\Python\\Pythoncore\\%s\\" % (version)
installkey = "InstallPath"
pythonkey = "PythonPath"
pythonpath = "%s;%s\\Lib\\;%s\\DLLs\\" % (
    installpath, installpath, installpath)


def RegisterPy():
    try:
        reg = OpenKey(HKEY_LOCAL_MACHINE, regpath)
    except EnvironmentError:
        try:
            reg = CreateKey(HKEY_LOCAL_MACHINE, regpath)
            SetValue(reg, installkey, REG_SZ, installpath)
            SetValue(reg, pythonkey, REG_SZ, pythonpath)
            CloseKey(reg)
        except:
            print "*** Unable to register!"
            return
        print "--- Python", version, "is now registered!"
        return

    if (QueryValue(reg, installkey) == installpath and
            QueryValue(reg, pythonkey) == pythonpath):
        CloseKey(reg)
        print "=== Python", version, "is already registered!"
        return

    CloseKey(reg)
    print "*** Unable to register!"
    print "*** You probably have another Python installation!"

if __name__ == "__main__":
    RegisterPy()
</snippet></ROW><ROW><id>12757561</id><snippet>cv</snippet></ROW><ROW><id>12757561</id><snippet>SetImageCOI</snippet></ROW><ROW><id>12757561</id><snippet>S</snippet></ROW><ROW><id>12757561</id><snippet>import cv
cv.SetImageCOI(im, 1)
</snippet></ROW><ROW><id>12757752</id><snippet>NewBar</snippet></ROW><ROW><id>12757752</id><snippet>get_fields</snippet></ROW><ROW><id>12757752</id><snippet>cls</snippet></ROW><ROW><id>12757752</id><snippet>@classmethod
def get_fields(cls):
    # we can get invoked before NewBar is available in globals,
    # so get NewBar from cls.__mro__
    NewBar = next(c for c in cls.__mro__
                  if c.__module__ == __name__ and c.__name__ == 'NewBar')
    super(NewBar, cls).get_fields()
    ...
</snippet></ROW><ROW><id>12757752</id><snippet>super</snippet></ROW><ROW><id>12757752</id><snippet>super(cls, cls)</snippet></ROW><ROW><id>12757752</id><snippet>NewBar</snippet></ROW><ROW><id>12757752</id><snippet>__name__</snippet></ROW><ROW><id>12757752</id><snippet>othermodule.NewBar</snippet></ROW><ROW><id>12757752</id><snippet>thismodule.NewBar</snippet></ROW><ROW><id>12757858</id><snippet>python3 script.py</snippet></ROW><ROW><id>12757858</id><snippet>#!/usr/bin/env python3</snippet></ROW><ROW><id>12758436</id><snippet>min_time</snippet></ROW><ROW><id>12758436</id><snippet>max_time</snippet></ROW><ROW><id>12758436</id><snippet>round(random.uniform(min_time, max_time), 1)
</snippet></ROW><ROW><id>12758518</id><snippet>def sum3():
    print "Please enter three numbers:"
    a = input()
    b = input()
    c = input()
    return sum((a,b,c)) # a+b+c

print sum3() # asks for input then prints result.
</snippet></ROW><ROW><id>12758518</id><snippet>sum</snippet></ROW><ROW><id>12758648</id><snippet>__hash__()</snippet></ROW><ROW><id>12758648</id><snippet>class test(tuple):
    def __eq__(self,comp):
        return self[0] == comp[0]
    def __ne__(self,comp):
        return self[0] != comp[0]
    def __hash__(self):
        return hash(self[0])
</snippet></ROW><ROW><id>12758648</id><snippet>&gt;&gt;&gt; set([test([1,]),test([2,]),test([3,])])
{(1,), (2,), (3,)}
&gt;&gt;&gt; hash(test([1,]))
1
</snippet></ROW><ROW><id>12758648</id><snippet>__hash__()</snippet></ROW><ROW><id>12758674</id><snippet>class invoice(ndb.Model):
   product_tax_rate = ndb.ComputedProperty(lambda self: self.basic_tax_rate if self.addl_tax_rate == 0 else ???)
   basic_tax_rate = ndb.FloatProperty()
   addl_tax_rate = ndb.FloatProperty()
</snippet></ROW><ROW><id>12758731</id><snippet>curses</snippet></ROW><ROW><id>12759080</id><snippet>RGB</snippet></ROW><ROW><id>12759080</id><snippet>im = Image.open('Apple.gif')
im = im.convert('RGB')
im.save('Apple.pgm')
</snippet></ROW><ROW><id>12759373</id><snippet>Universe = letters[1:26]
replicate(5, sample(Universe, 10, replace = FALSE))

     [,1] [,2] [,3] [,4] [,5]
 [1,] "j"  "l"  "k"  "c"  "j" 
 [2,] "g"  "i"  "c"  "t"  "g" 
 [3,] "z"  "u"  "m"  "u"  "e" 
 [4,] "a"  "b"  "t"  "e"  "q" 
 [5,] "q"  "d"  "j"  "k"  "m" 
 [6,] "r"  "a"  "l"  "l"  "x" 
 [7,] "e"  "g"  "r"  "i"  "f" 
 [8,] "l"  "w"  "o"  "g"  "u" 
 [9,] "b"  "y"  "b"  "x"  "c" 
[10,] "u"  "j"  "x"  "a"  "b" 
</snippet></ROW><ROW><id>12759444</id><snippet>heapq</snippet></ROW><ROW><id>12759444</id><snippet>import os
import heapq

def iterfiles(root):
    for base, dirs, files in os.walk(root):
        for filename in files:
            fullname = os.path.join(base, filename)
            yield os.stat(fullname).st_ctime, fullname

print heapq.nlargest(10, iterfiles('some path here'))
</snippet></ROW><ROW><id>12759444</id><snippet>IOError</snippet></ROW><ROW><id>12759980</id><snippet>#!/usr/bin/env python
import os
command = ['/usr/bin/ssh', 'ssh', 'localhost', '/home/gd/test/python/back.sh']
print os.spawnlp(os.P_NOWAIT, *command)
print "Python done"
</snippet></ROW><ROW><id>12759980</id><snippet>#!/usr/bin/env python
from subprocess import Popen
command = ['/usr/bin/ssh', 'localhost', '/home/gd/test/python/back.sh']
print Popen(command)
print "Python done"
</snippet></ROW><ROW><id>12759996</id><snippet>--no-dependencies</snippet></ROW><ROW><id>12759996</id><snippet>pip install -h</snippet></ROW><ROW><id>12759996</id><snippet>--no-deps, --no-dependencies
                        Ignore package dependencies
</snippet></ROW><ROW><id>12760424</id><snippet>from PIL import Image
image = Image.new('RGB', (n, m))
</snippet></ROW><ROW><id>12760688</id><snippet>error</snippet></ROW><ROW><id>12760688</id><snippet>self</snippet></ROW><ROW><id>12760713</id><snippet>\d</snippet></ROW><ROW><id>12760713</id><snippet>,</snippet></ROW><ROW><id>12760713</id><snippet>.</snippet></ROW><ROW><id>12760713</id><snippet>(</snippet></ROW><ROW><id>12760713</id><snippet>)</snippet></ROW><ROW><id>12760713</id><snippet>(?:...)</snippet></ROW><ROW><id>12760713</id><snippet>r"(\w+)(?:,(\d+.\d+))+"
</snippet></ROW><ROW><id>12760713</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; ma = re.search(r"(\w+)(?:,(\d+.\d+))+", "Triangle,3.4,1.2")
&gt;&gt;&gt; ma.groups()
('Triangle', '1.2')
</snippet></ROW><ROW><id>12760713</id><snippet>,</snippet></ROW><ROW><id>12760713</id><snippet>&gt;&gt;&gt; "Triangle,3.4,1.2".split(',')
['Triangle', '3.4', '1.2']
</snippet></ROW><ROW><id>12760806</id><snippet>.expect()</snippet></ROW><ROW><id>12760806</id><snippet>git clone</snippet></ROW><ROW><id>12760806</id><snippet>.expect(pexpect.EOF)</snippet></ROW><ROW><id>12760806</id><snippet>i = child.expect([EOF, TIMEOUT], timeout=git_clone_timeout)
if i == 1: 
    # handle timeout
</snippet></ROW><ROW><id>12760890</id><snippet>vmin</snippet></ROW><ROW><id>12760890</id><snippet>vmax</snippet></ROW><ROW><id>12760890</id><snippet>plt.imshow(bg, cmap = plt.get_cmap('gray'), vmin = 0, vmax = 255)
</snippet></ROW><ROW><id>12760890</id><snippet>vmin</snippet></ROW><ROW><id>12760890</id><snippet>vmax</snippet></ROW><ROW><id>12760890</id><snippet>plt.imshow</snippet></ROW><ROW><id>12760890</id><snippet>vmin</snippet></ROW><ROW><id>12760890</id><snippet>vmax</snippet></ROW><ROW><id>12760890</id><snippet>functools.partial</snippet></ROW><ROW><id>12760890</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import functools

bwimshow = functools.partial(plt.imshow, vmin = 0, vmax = 255,
                             cmap = plt.get_cmap('gray'))

dots = np.random.randn(10,10)*255
bwimshow(dots)
cbar = plt.colorbar()

plt.show()
</snippet></ROW><ROW><id>12760943</id><snippet>t = str.isdigit</snippet></ROW><ROW><id>12760943</id><snippet>t(n)</snippet></ROW><ROW><id>12760943</id><snippet>isidigt</snippet></ROW><ROW><id>12761264</id><snippet>JSON.parse</snippet></ROW><ROW><id>12761264</id><snippet>&lt;script language="javascript" type="text/javascript"&gt;
    var serverJSValue = {% autoescape off %}{{ some_json_data }}{% endautoescape %};
&lt;/script&gt;
</snippet></ROW><ROW><id>12761312</id><snippet>raw_input</snippet></ROW><ROW><id>12761312</id><snippet>stdio.StandardIO</snippet></ROW><ROW><id>12761312</id><snippet>LineReceiver</snippet></ROW><ROW><id>12761312</id><snippet>lineReceived</snippet></ROW><ROW><id>12761312</id><snippet>stdin</snippet></ROW><ROW><id>12761406</id><snippet>from os import system
system('say Hello world!')
</snippet></ROW><ROW><id>12761406</id><snippet>man say</snippet></ROW><ROW><id>12761406</id><snippet>say</snippet></ROW><ROW><id>12761406</id><snippet>AppKit</snippet></ROW><ROW><id>12761406</id><snippet>from AppKit import NSSpeechSynthesizer
speechSynthesizer = NSSpeechSynthesizer.alloc.initWithVoice_("Bruce")
speechSynthesizer.startSpeakingString_('Hi! Nice to meet you!')
</snippet></ROW><ROW><id>12761494</id><snippet>a, b = map(f().get, [1, 2])
</snippet></ROW><ROW><id>12761494</id><snippet>a, b = operator.itemgetter(1, 2)(f())
</snippet></ROW><ROW><id>12761494</id><snippet>f()</snippet></ROW><ROW><id>12761494</id><snippet>1</snippet></ROW><ROW><id>12761494</id><snippet>2</snippet></ROW><ROW><id>12761494</id><snippet>None</snippet></ROW><ROW><id>12761494</id><snippet>KeyError</snippet></ROW><ROW><id>12761494</id><snippet>map(f().__getitem__, ...)</snippet></ROW><ROW><id>12761494</id><snippet>itemgetter</snippet></ROW><ROW><id>12761512</id><snippet>None</snippet></ROW><ROW><id>12761512</id><snippet>.get()</snippet></ROW><ROW><id>12761512</id><snippet>foo = myhash.get('bar') or myhash.get('baz')
</snippet></ROW><ROW><id>12761512</id><snippet>.get()</snippet></ROW><ROW><id>12761512</id><snippet>None</snippet></ROW><ROW><id>12761512</id><snippet>foo = myhash.get('bar', myhash.get('baz'))
</snippet></ROW><ROW><id>12761512</id><snippet>myhash['bar']</snippet></ROW><ROW><id>12761512</id><snippet>myhash['bar']</snippet></ROW><ROW><id>12761512</id><snippet>myhash['baz']</snippet></ROW><ROW><id>12761576</id><snippet>&gt;&gt;&gt; sentence = "Hi my name is Bob"
&gt;&gt;&gt; words = sentence.split()
&gt;&gt;&gt; average = sum(len(word) for word in words)/len(words)
&gt;&gt;&gt; average
2.6
</snippet></ROW><ROW><id>12761645</id><snippet>0x1L</snippet></ROW><ROW><id>12761645</id><snippet>long</snippet></ROW><ROW><id>12761645</id><snippet>1</snippet></ROW><ROW><id>12761835</id><snippet>raw_input('Press enter to stop servers.')
</snippet></ROW><ROW><id>12762025</id><snippet>email</snippet></ROW><ROW><id>12762056</id><snippet>&gt;&gt;&gt; f=open('a.p', 'wb')
&gt;&gt;&gt; pickle.dump({1:2}, f)
&gt;&gt;&gt; pickle.dump({3:4}, f)
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; 
&gt;&gt;&gt; f=open('a.p', 'rb')
&gt;&gt;&gt; pickle.load(f)
{1: 2}
&gt;&gt;&gt; pickle.load(f)
{3: 4}
&gt;&gt;&gt; pickle.load(f)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
EOFError
</snippet></ROW><ROW><id>12762056</id><snippet>import pickle
objs = []
while 1:
    try:
        objs.append(pickle.load(f))
    except EOFError:
        break
</snippet></ROW><ROW><id>12762069</id><snippet>import itertools
from matplotlib import pyplot

colors = ['b', 'r', 'g', 'c']
cc = itertools.cycle(colors)
plot_lines = []
for p in parameters:

    d1 = algo1(p)
    d2 = algo2(p)
    d3 = algo3(p)

    pyplot.hold(True)
    c = next(cc)
    l1, = pyplot.plot(d1, '-', color=c)
    l2, = pyplot.plot(d2, '--', color=c)
    l3, = pyplot.plot(d3, '.-', color=c)

    plot_lines.append([l1, l2, l3])

legend1 = pyplot.legend(plot_lines[0], ["algo1", "algo2", "algo3"], loc=1)
pyplot.legend([l[0] for l in plot_lines], parameters, loc=4)
pyplot.gca().add_artist(legend1)
</snippet></ROW><ROW><id>12762217</id><snippet>category_list</snippet></ROW><ROW><id>12762217</id><snippet>request.path</snippet></ROW><ROW><id>12762217</id><snippet>category_list</snippet></ROW><ROW><id>12762503</id><snippet>ax.xaxis</snippet></ROW><ROW><id>12762503</id><snippet>axis.label.set_position(xy)</snippet></ROW><ROW><id>12762503</id><snippet>ax['xzero'].label.set_x(1)
ax['yzero'].label.set_y(1)
</snippet></ROW><ROW><id>12762503</id><snippet>axislines</snippet></ROW><ROW><id>12762503</id><snippet>axisartist</snippet></ROW><ROW><id>12762503</id><snippet>axes_grid</snippet></ROW><ROW><id>12762503</id><snippet>axes_grid1</snippet></ROW><ROW><id>12762503</id><snippet>ax.annotate</snippet></ROW><ROW><id>12762503</id><snippet>annotate</snippet></ROW><ROW><id>12762503</id><snippet>import matplotlib.pyplot as plt

fig, ax = plt.subplots()

for spine in ['left', 'bottom']:
    ax.spines[spine].set_position('zero')

# Hide the other spines...  
for spine in ['right', 'top']:
    ax.spines[spine].set_color('none')

ax.axis([-4, 10, -4, 10])
ax.grid()

plt.show()
</snippet></ROW><ROW><id>12762503</id><snippet>import matplotlib.pyplot as plt

fig, ax = plt.subplots()

#-- Set axis spines at 0
for spine in ['left', 'bottom']:
    ax.spines[spine].set_position('zero')

# Hide the other spines...
for spine in ['right', 'top']:
    ax.spines[spine].set_color('none')

#-- Decorate the spins
arrow_length = 20 # In points

# X-axis arrow
ax.annotate('', xy=(1, 0), xycoords=('axes fraction', 'data'), 
            xytext=(arrow_length, 0), textcoords='offset points',
            arrowprops=dict(arrowstyle='&lt;|-', fc='black'))

# Y-axis arrow
ax.annotate('', xy=(0, 1), xycoords=('data', 'axes fraction'), 
            xytext=(0, arrow_length), textcoords='offset points',
            arrowprops=dict(arrowstyle='&lt;|-', fc='black'))

#-- Plot
ax.axis([-4, 10, -4, 10])
ax.grid()

plt.show()
</snippet></ROW><ROW><id>12762503</id><snippet>arrowprops</snippet></ROW><ROW><id>12762503</id><snippet>size=16</snippet></ROW><ROW><id>12762503</id><snippet>annotate</snippet></ROW><ROW><id>12762503</id><snippet>import matplotlib.pyplot as plt

fig, ax = plt.subplots()

#-- Set axis spines at 0
for spine in ['left', 'bottom']:
    ax.spines[spine].set_position('zero')

# Hide the other spines...
for spine in ['right', 'top']:
    ax.spines[spine].set_color('none')

#-- Decorate the spins
arrow_length = 20 # In points

# X-axis arrow
ax.annotate('X', xy=(1, 0), xycoords=('axes fraction', 'data'), 
            xytext=(arrow_length, 0), textcoords='offset points',
            ha='left', va='center',
            arrowprops=dict(arrowstyle='&lt;|-', fc='black'))

# Y-axis arrow
ax.annotate('Y', xy=(0, 1), xycoords=('data', 'axes fraction'), 
            xytext=(0, arrow_length), textcoords='offset points',
            ha='center', va='bottom',
            arrowprops=dict(arrowstyle='&lt;|-', fc='black'))

#-- Plot
ax.axis([-4, 10, -4, 10])
ax.grid()

plt.show()
</snippet></ROW><ROW><id>12762560</id><snippet>one = test('one', 1).start()
two = test('two', 3).start()
</snippet></ROW><ROW><id>12762560</id><snippet>start()</snippet></ROW><ROW><id>12762560</id><snippet>return self</snippet></ROW><ROW><id>12762560</id><snippet>one</snippet></ROW><ROW><id>12762560</id><snippet>two</snippet></ROW><ROW><id>12762560</id><snippet>None</snippet></ROW><ROW><id>12762560</id><snippet>start()</snippet></ROW><ROW><id>12762560</id><snippet>one = test('one', 1)
one.start()
two = test('two', 3)
two.start()
</snippet></ROW><ROW><id>12762823</id><snippet>for k,v in val.items():
    eq = re.sub(r'\b' + k + r'\b', v, eq)
</snippet></ROW><ROW><id>12762823</id><snippet>val = {'x': '5'}</snippet></ROW><ROW><id>12763008</id><snippet>'text':text,
</snippet></ROW><ROW><id>12763008</id><snippet>text</snippet></ROW><ROW><id>12763008</id><snippet>'text': text.encode('utf-8'),
</snippet></ROW><ROW><id>12763131</id><snippet>def myDic(self,selObjects):
        print "Recieved ",selObjects
        print "Length ", len(selObjects)
        #self.objDic={}
        for index,each in enumerate(reversed(selObjects)):
            ##print index,each
            if index%2==0:
                value=each
            elif index % 2!=0:
                key=each
                self.objDic[key]=value
                #self.objDic.update({key:value})
        print self.objDic, len(self.objDic)
</snippet></ROW><ROW><id>12763137</id><snippet>itertools.combinations()</snippet></ROW><ROW><id>12763137</id><snippet>from itertools import combinations

[(i, j, i[0] == j[0]) for i, j in combinations(l, 2)]
</snippet></ROW><ROW><id>12763137</id><snippet>Set</snippet></ROW><ROW><id>12763137</id><snippet>set</snippet></ROW><ROW><id>12763137</id><snippet>{elem, elem, elem}</snippet></ROW><ROW><id>12763137</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; l = {(1011, 123556), (1041, 424553), (1241, 464096), (1027, 589325), (1011, 432341), (1031, 423076)}
&gt;&gt;&gt; [(i, j, i[0] == j[0]) for i, j in combinations(l, 2)]
[((1041, 424553), (1027, 589325), False), ((1041, 424553), (1011, 123556), False), ((1041, 424553), (1031, 423076), False), ((1041, 424553), (1241, 464096), False), ((1041, 424553), (1011, 432341), False), ((1027, 589325), (1011, 123556), False), ((1027, 589325), (1031, 423076), False), ((1027, 589325), (1241, 464096), False), ((1027, 589325), (1011, 432341), False), ((1011, 123556), (1031, 423076), False), ((1011, 123556), (1241, 464096), False), ((1011, 123556), (1011, 432341), True), ((1031, 423076), (1241, 464096), False), ((1031, 423076), (1011, 432341), False), ((1241, 464096), (1011, 432341), False)]
</snippet></ROW><ROW><id>12763160</id><snippet>setCount</snippet></ROW><ROW><id>12763160</id><snippet>wordObject</snippet></ROW><ROW><id>12763160</id><snippet>wordObject.setCount()</snippet></ROW><ROW><id>12763160</id><snippet>count = 0
while word != None:
      wordObject = Word()
      wordObject.setWord(word)
      if dictionary.has_key(wordObject.getWord():
            setCount=dictionary[wordObject.getWord()]
            count += 1
</snippet></ROW><ROW><id>12763391</id><snippet>__radd__</snippet></ROW><ROW><id>12763391</id><snippet>__rmul__</snippet></ROW><ROW><id>12763391</id><snippet>__rsub__</snippet></ROW><ROW><id>12763435</id><snippet>struct</snippet></ROW><ROW><id>12763435</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack('&gt;i', '\x00\x00\x00\x05')
(5,)
</snippet></ROW><ROW><id>12763435</id><snippet>&gt;i</snippet></ROW><ROW><id>12763513</id><snippet>for x in range(0, 10, 2):
    print str(x)
</snippet></ROW><ROW><id>12763567</id><snippet>[..]</snippet></ROW><ROW><id>12763567</id><snippet>$</snippet></ROW><ROW><id>12763567</id><snippet>|</snippet></ROW><ROW><id>12763567</id><snippet>r"\w+(?:\s|$)"
</snippet></ROW><ROW><id>12763567</id><snippet>\b</snippet></ROW><ROW><id>12763567</id><snippet>\w</snippet></ROW><ROW><id>12763567</id><snippet>\w</snippet></ROW><ROW><id>12763567</id><snippet>\W</snippet></ROW><ROW><id>12763588</id><snippet>tr</snippet></ROW><ROW><id>12763588</id><snippet>a</snippet></ROW><ROW><id>12763588</id><snippet>tr</snippet></ROW><ROW><id>12763588</id><snippet>for team in soup.find_all('tr'):
    link = team.find('a')
    if link == null:
       continue
    print link.string
</snippet></ROW><ROW><id>12763588</id><snippet>soup.find_all('a')
</snippet></ROW><ROW><id>12763628</id><snippet>conn.list_domains()</snippet></ROW><ROW><id>12763628</id><snippet>conn.lookup('foo')</snippet></ROW><ROW><id>12763762</id><snippet>text = "Hey, this is paragraph 1 \n and this is paragraph 2 \n and this will be paragraph 3"
html = ''
for line in text.split('\n'):
   html += '&lt;p&gt;' + line + '&lt;/p&gt;'

print html
</snippet></ROW><ROW><id>12763762</id><snippet>html = ''.join('&lt;p&gt;'+L+'&lt;/p&gt;' for L in text.split('\n'))
</snippet></ROW><ROW><id>12763771</id><snippet>from __future__ import division</snippet></ROW><ROW><id>12763771</id><snippet>1.0/3</snippet></ROW><ROW><id>12763771</id><snippet>1/3</snippet></ROW><ROW><id>12763771</id><snippet>1.0</snippet></ROW><ROW><id>12763934</id><snippet>exists</snippet></ROW><ROW><id>12763934</id><snippet>count</snippet></ROW><ROW><id>12763934</id><snippet>exists</snippet></ROW><ROW><id>12763934</id><snippet>if Workspace.objects.filter(workspace_name=workspace_name, 
                            user=self.user.id).exists()
    raise forms.ValidationError(u'%s already exists ...!' % workspace_name)
else:
    return workspace_name
</snippet></ROW><ROW><id>12764382</id><snippet>ManyToMany</snippet></ROW><ROW><id>12764382</id><snippet>user</snippet></ROW><ROW><id>12764382</id><snippet>Workspace</snippet></ROW><ROW><id>12764382</id><snippet>ManyToMany</snippet></ROW><ROW><id>12764382</id><snippet>ForeignKey</snippet></ROW><ROW><id>12764382</id><snippet>ForeignKey</snippet></ROW><ROW><id>12764382</id><snippet>User</snippet></ROW><ROW><id>12764382</id><snippet>Workspace -&gt; User</snippet></ROW><ROW><id>12764382</id><snippet>Workspace</snippet></ROW><ROW><id>12764382</id><snippet>User</snippet></ROW><ROW><id>12764382</id><snippet>CharField</snippet></ROW><ROW><id>12764382</id><snippet>ManyToMany</snippet></ROW><ROW><id>12764382</id><snippet>Workspace</snippet></ROW><ROW><id>12764382</id><snippet>Workspaces</snippet></ROW><ROW><id>12764382</id><snippet>User</snippet></ROW><ROW><id>12764382</id><snippet>ManyToMany</snippet></ROW><ROW><id>12764382</id><snippet>Workspace</snippet></ROW><ROW><id>12764382</id><snippet>User</snippet></ROW><ROW><id>12764382</id><snippet>ManyToMany</snippet></ROW><ROW><id>12764382</id><snippet>my_user = User.objects.get(pk = 5)
my_workspace = Workspace(workspace_name=data_to_db['workspace_name'],workspace_cat=data_to_db['workspace_category'])
my_workspace.save() # committing to the DB first is necessary for M2M (Jurudocs edit)
my_workspace.users.add(my_user)
</snippet></ROW><ROW><id>12764382</id><snippet>user</snippet></ROW><ROW><id>12764382</id><snippet>users</snippet></ROW><ROW><id>12764451</id><snippet>#!/usr/bin/env python

import Image

im1 = Image.open("hil0.png")
im2 = Image.open("hil0.png")
w, h = im1.size

draw1 = im1.load()
draw2 = im2.load()

for x in range(w):
    for y in range(h):
        if draw1[x,y] == (255,0,0):
            for dx in [-1,0,1]:
                for dy in [-1,0,1]:
                    nx = x+dx
                    ny = y+dy
                    # print nx, ny
                    if nx&gt;=0 and ny&gt;=0 and nx&lt;w and ny&lt;h:
                        draw2[ nx, ny ] = (255,0,0)



# im2.show()
im2.save("hil1.png")
</snippet></ROW><ROW><id>12764465</id><snippet>.count()</snippet></ROW><ROW><id>12764465</id><snippet>len()</snippet></ROW><ROW><id>12764465</id><snippet>len()</snippet></ROW><ROW><id>12764646</id><snippet>&gt;&gt;&gt; '22少女時代22'.encode('sjis')
b'22\x8f\xad\x8f\x97\x8e\x9e\x91\xe322'
</snippet></ROW><ROW><id>12764646</id><snippet>title.encode('utf8')
</snippet></ROW><ROW><id>12764646</id><snippet>title</snippet></ROW><ROW><id>12764646</id><snippet>encode</snippet></ROW><ROW><id>12764646</id><snippet>title.decode('ascii').encode('utf8')
</snippet></ROW><ROW><id>12764646</id><snippet>decode</snippet></ROW><ROW><id>12764646</id><snippet>title.decode('sjis').encode('utf8')
</snippet></ROW><ROW><id>12764646</id><snippet>sys.stdin.encoding</snippet></ROW><ROW><id>12764646</id><snippet>cp932</snippet></ROW><ROW><id>12764646</id><snippet>title.decode('cp932').encode('utf8')
</snippet></ROW><ROW><id>12764787</id><snippet>{% %}</snippet></ROW><ROW><id>12764787</id><snippet>{% load %}</snippet></ROW><ROW><id>12765092</id><snippet>virtual</snippet></ROW><ROW><id>12765092</id><snippet>__init__</snippet></ROW><ROW><id>12765092</id><snippet>super</snippet></ROW><ROW><id>12765215</id><snippet>In [33]: True == 1
Out[33]: True

In [34]: True == 2
Out[34]: False

In [35]: True == 3
Out[35]: False
</snippet></ROW><ROW><id>12765215</id><snippet>True</snippet></ROW><ROW><id>12765215</id><snippet>False</snippet></ROW><ROW><id>12765215</id><snippet>bool</snippet></ROW><ROW><id>12765215</id><snippet>bool</snippet></ROW><ROW><id>12765215</id><snippet>int</snippet></ROW><ROW><id>12765260</id><snippet>random.shuffle</snippet></ROW><ROW><id>12765260</id><snippet>random.shuffle(items)
random.shuffle(doors)
door1 = [doors[0], items[0]]
door2 = [doors[1], items[1]]
door3 = [doors[2], items[2]]
</snippet></ROW><ROW><id>12765276</id><snippet>shell=True</snippet></ROW><ROW><id>12765276</id><snippet>&gt;</snippet></ROW><ROW><id>12765276</id><snippet>/bin/sh -c</snippet></ROW><ROW><id>12765276</id><snippet>catdoc_cmd = ['catdoc -w "%s" &gt; testing.txt' % name]
</snippet></ROW><ROW><id>12765276</id><snippet>stdout</snippet></ROW><ROW><id>12765276</id><snippet>re</snippet></ROW><ROW><id>12765276</id><snippet>catdoc_cmd = ['catdoc', '-w' , name]
catdoc_process = subprocess.Popen(catdoc_cmd, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
for line in catdoc_process.stdout:
    if keyword in line:
        print line.strip()
</snippet></ROW><ROW><id>12765435</id><snippet>__hash__</snippet></ROW><ROW><id>12765435</id><snippet>__eq__</snippet></ROW><ROW><id>12765435</id><snippet>id</snippet></ROW><ROW><id>12765435</id><snippet>is</snippet></ROW><ROW><id>12765435</id><snippet>__hash__</snippet></ROW><ROW><id>12765435</id><snippet>__eq__</snippet></ROW><ROW><id>12765435</id><snippet>&gt;&gt;&gt; class Foo:
...     def __init__(self, val): self.val = val
...     def __hash__(self): return hash(self.val)
...     def __eq__(self, other): return self.val == other.val
...     def __repr__(self): return 'Foo(%r)' % self.val
... 
&gt;&gt;&gt; print set([Foo(3), Foo("bar")])
set([Foo(3), Foo('bar')])
</snippet></ROW><ROW><id>12765435</id><snippet>set</snippet></ROW><ROW><id>12765435</id><snippet>__iter__</snippet></ROW><ROW><id>12765435</id><snippet>&gt;&gt;&gt; class CharSeq:
...     def __init__(self, first, last):
...         self.first = ord(first)
...         self.last = ord(last)
...     def __iter__(self):
...         return (chr(i) for i in xrange(self.first, self.last+1))
... 
&gt;&gt;&gt; set(CharSeq('a', 'c'))
set(['a', 'c', 'b'])
</snippet></ROW><ROW><id>12765462</id><snippet>__iter__()</snippet></ROW><ROW><id>12765462</id><snippet>__getitem__()</snippet></ROW><ROW><id>12765462</id><snippet>__iter__()</snippet></ROW><ROW><id>12765462</id><snippet>__getitem__()</snippet></ROW><ROW><id>12765462</id><snippet>__getitem__()</snippet></ROW><ROW><id>12765462</id><snippet>__len__()</snippet></ROW><ROW><id>12765651</id><snippet>a = ((1, 2), (3, 4), (5, 6))
</snippet></ROW><ROW><id>12765651</id><snippet>list</snippet></ROW><ROW><id>12765651</id><snippet>&gt;&gt;&gt; list(a)
[(1, 2), (3, 4), (5, 6)]
</snippet></ROW><ROW><id>12765651</id><snippet>itertools.chain</snippet></ROW><ROW><id>12765651</id><snippet>list</snippet></ROW><ROW><id>12765651</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.chain.from_iterable(a))
[1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>12765651</id><snippet>&gt;&gt;&gt; [list(b) for b in a]
[[1, 2], [3, 4], [5, 6]]
</snippet></ROW><ROW><id>12765651</id><snippet>chain</snippet></ROW><ROW><id>12765651</id><snippet>&gt;&gt;&gt; a = ('a', ('b', 'c'))
&gt;&gt;&gt; list(itertools.chain.from_iterable(b if isinstance(b, tuple) else [b] for b in a))
['a', 'b', 'c']
</snippet></ROW><ROW><id>12765788</id><snippet>article1.author</snippet></ROW><ROW><id>12765788</id><snippet>self.lookup_author</snippet></ROW><ROW><id>12765788</id><snippet>John Doe
&lt;Author: John Doe&gt;

bob
&lt;Author: bob&gt;
</snippet></ROW><ROW><id>12765788</id><snippet>class Article(object):
    def __init__(self, id, author):
        self.id = id
        self.__author = None

    def lookup_author(self):
        return "John Doe"


    def __str__(self):
        return "&lt;Author: {}&gt;".format(self.author)

    @property
    def author(self):
        if self.__author is None:
            self.__author = self.lookup_author()
        return self.__author

    @author.setter
    def author(self,name):
        self.__author = name

article1 = Article(1, 'John Doe')
print "\n", article1.author
print article1

article1.author = 'bob'
print "\n", article1.author
print article1
</snippet></ROW><ROW><id>12765788</id><snippet>__author</snippet></ROW><ROW><id>12765797</id><snippet>&lt;\p&gt;</snippet></ROW><ROW><id>12765797</id><snippet>fileString = fileString.replace('\r', '&lt;/p&gt;')  
</snippet></ROW><ROW><id>12765840</id><snippet>True</snippet></ROW><ROW><id>12765840</id><snippet>1</snippet></ROW><ROW><id>12765840</id><snippet>&gt;&gt;&gt; sum([True, True, False, False, False, True])
3
</snippet></ROW><ROW><id>12766060</id><snippet>3&gt;&gt; ''.join(chr(int(x, 16)) for x in "0x000A 0x000B 0x000C 0x000D".split()).encode('utf-16be')
b'\x00\n\x00\x0b\x00\x0c\x00\r'
</snippet></ROW><ROW><id>12766131</id><snippet>info = soup.find('span', itemprop='name').contents
</snippet></ROW><ROW><id>12766265</id><snippet>import multiprocessing

def do_calculation(data):
    """
    @note: you can define your calculation code
    """
    return data * 2

def start_process():
    print 'Starting', multiprocessing.current_process().name

if __name__ == '__main__':
    analsys_jobs = list(range(10))  # could be your analysis work
    print 'analsys_jobs :', analsys_jobs

    pool_size = multiprocessing.cpu_count() * 2
    pool = multiprocessing.Pool(processes=pool_size,
                                initializer=start_process,
                                maxtasksperchild=2, ) 
    #maxtasksperchild = tells the pool to restart a worker process \
    # after it has finished a few tasks. This can be used to avoid \ 
    # having long-running workers consume ever more system resources

    pool_outputs = pool.map(do_calculation, analsys_jobs)   
    #The result of the map() method is functionally equivalent to the \
    # built-in map(), except that individual tasks run in parallel. \
    # Since the pool is processing its inputs in parallel, close() and join()\
    # can be used to synchronize the main process with the \
    # task processes to ensure proper cleanup.  

    pool.close() # no more tasks
    pool.join() # wrap up current tasks


    print 'Pool :', pool_outputs
</snippet></ROW><ROW><id>12766531</id><snippet>manage.py runserver
</snippet></ROW><ROW><id>12766596</id><snippet>&gt;&gt;&gt; set(((1,1)))
set([1])
</snippet></ROW><ROW><id>12766596</id><snippet>&gt;&gt;&gt; set(((1,1),))
set([(1, 1)])
</snippet></ROW><ROW><id>12766596</id><snippet>set([(1,1)])
</snippet></ROW><ROW><id>12766596</id><snippet>{(1,1)}
</snippet></ROW><ROW><id>12766611</id><snippet>'абв'</snippet></ROW><ROW><id>12766646</id><snippet>def count_to(m):
    n = 0
    while n &lt;= m:
        yield n
        n += 1
</snippet></ROW><ROW><id>12766646</id><snippet>class CountTo:
    def __init__(self, m):
        self.m = m
        self.n = 0
    def __iter__(self):
        return self
    def next(self):
        if self.n &lt;= self.m:
            cur, self.n = self.n, self.n + 1
            return cur
        else:
            raise StopIteration()
</snippet></ROW><ROW><id>12766709</id><snippet>lxml</snippet></ROW><ROW><id>12766709</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; parser = etree.XMLParser(remove_blank_text=True)
&gt;&gt;&gt; parsed_xml = etree.XML(s,parser)
&gt;&gt;&gt; for i in parsed_xml.iter('*'):
...    print i.tag
...    for x in i.items():
...       print '%s,%s' % (x[0],x[1])
...
r
P
color
val,1F497D
t
val,123
val2,234
</snippet></ROW><ROW><id>12766710</id><snippet>"""S.O. 12766628

Usage:
    script.py voucher add &lt;code&gt; &lt;credits&gt; [&lt;points&gt;]
    script.py voucher del &lt;code&gt;
"""
from docopt import docopt


if __name__ == '__main__':
    arguments = docopt(__doc__, version='S.O. 12766628')
    print(arguments)
</snippet></ROW><ROW><id>12766813</id><snippet>browser.show()</snippet></ROW><ROW><id>12766981</id><snippet>&gt;&gt;&gt; s="aaa?aaa"
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'aaa\?aaa', s)
['aaa?aaa']
</snippet></ROW><ROW><id>12766981</id><snippet>/aaa?aaa</snippet></ROW><ROW><id>12766981</id><snippet>?</snippet></ROW><ROW><id>12766981</id><snippet>?</snippet></ROW><ROW><id>12766981</id><snippet>%3F</snippet></ROW><ROW><id>12766981</id><snippet>/?code=authenticationcode</snippet></ROW><ROW><id>12766981</id><snippet>/</snippet></ROW><ROW><id>12766981</id><snippet>r'^$'</snippet></ROW><ROW><id>12766981</id><snippet>code</snippet></ROW><ROW><id>12766981</id><snippet>request</snippet></ROW><ROW><id>12766981</id><snippet>request.GET.get('code')</snippet></ROW><ROW><id>12766986</id><snippet> for i in xrange(10):
      print str(i) + " : " + str((i % 2))
</snippet></ROW><ROW><id>12767012</id><snippet>&gt;&gt;&gt; div = '&lt;div class="sku"&gt;SKU: E02165  &lt;/div&gt;'
&gt;&gt;&gt; html = BeautifulSoup(div)
&gt;&gt;&gt; div_sku = html.find('div', {'class': 'sku'})
&gt;&gt;&gt; value = div_sku.get_text(strip=True).encode('ascii', 'ignore').split('SKU:')[1]
&gt;&gt;&gt; value
'E02165'
</snippet></ROW><ROW><id>12767012</id><snippet>get_text(strip=True)</snippet></ROW><ROW><id>12767012</id><snippet>encode('ascii', 'ignore')</snippet></ROW><ROW><id>12767012</id><snippet>u'\xa0'</snippet></ROW><ROW><id>12767012</id><snippet>split()</snippet></ROW><ROW><id>12767012</id><snippet>value =div_sku.get_text(strip=True).replace(u'\xa0', u'').split('SKU:')[1]
</snippet></ROW><ROW><id>12767012</id><snippet>replace(u'\xa0', u'')</snippet></ROW><ROW><id>12767012</id><snippet>u'\xa0'</snippet></ROW><ROW><id>12767051</id><snippet>from setuptools import setup
</snippet></ROW><ROW><id>12767408</id><snippet>declarative_base</snippet></ROW><ROW><id>12767408</id><snippet>session</snippet></ROW><ROW><id>12767408</id><snippet>self.session</snippet></ROW><ROW><id>12767408</id><snippet>session</snippet></ROW><ROW><id>12767599</id><snippet>((lambda x: x),x+1)(10)
</snippet></ROW><ROW><id>12767599</id><snippet>x</snippet></ROW><ROW><id>12767599</id><snippet>x</snippet></ROW><ROW><id>12767599</id><snippet>&gt;&gt;&gt; x=42
&gt;&gt;&gt; (lambda x: x,x+1)
(&lt;function &lt;lambda&gt; at 0x00000000022B2648&gt;, 43)
</snippet></ROW><ROW><id>12767599</id><snippet>x</snippet></ROW><ROW><id>12767599</id><snippet>x</snippet></ROW><ROW><id>12767599</id><snippet>lambda x: (x,x+1)</snippet></ROW><ROW><id>12767599</id><snippet>&gt;&gt;&gt; type(itself_and_plusone(10))
&lt;class 'tuple'&gt;
</snippet></ROW><ROW><id>12767843</id><snippet>secret</snippet></ROW><ROW><id>12767843</id><snippet>mod_auth_tkt</snippet></ROW><ROW><id>12767843</id><snippet>timeout</snippet></ROW><ROW><id>12768138</id><snippet>{
  "start": {
    "dateTime": "2012-09-26T10:00:00.000",
    "timeZone": "Europe/Dublin"
  },
  "end": {
    "dateTime": "2012-09-26T11:00:00.000",
    "timeZone": "Europe/Dublin"
  },
  "summary": "CS101 Dublin",
  "description": "Intro to Comp Sci",
  "location": "Bla bla bla",
  "recurrence": [
    "RRULE:FREQ=WEEKLY;UNTIL=20121131"
  ]
}
</snippet></ROW><ROW><id>12768138</id><snippet>{
  "start": {
    "dateTime": "2012-09-26T10:00:00.000",
    "timeZone": "GMT"
  },
  "end": {
    "dateTime": "2012-09-26T11:00:00.000",
    "timeZone": "GMT"
  },
  "summary": "CS101 GMT",
  "description": "Intro to Comp Sci",
  "location": "Bla bla bla",
  "recurrence": [
    "RRULE:FREQ=WEEKLY;UNTIL=20121131"
  ]
}
</snippet></ROW><ROW><id>12768183</id><snippet>{% for team in league %}</snippet></ROW><ROW><id>12768183</id><snippet>|dictsort</snippet></ROW><ROW><id>12768183</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; league={'PEDD United': {'id': 37828, 'rank': 12, 'totalpts': 307},'Fc Mbonabushia': {'id': 205633, 'rank': 6, 'totalpts': 356},'FC Slurp': {'id': 933573, 'rank': 11, 'totalpts': 312},'KFC_Overijse': {'id': 38861, 'rank': 5, 'totalpts': 362},'Fc Paris': {'id': 1538051, 'rank': 2, 'totalpts': 396}}
&gt;&gt;&gt; league = OrderedDict(sorted(league.items(), key= lambda x: x[1]['totalpts'], reverse=True))
&gt;&gt;&gt; print league
OrderedDict([('Fc Paris', {'id': 1538051, 'rank': 2, 'totalpts': 396}), ('KFC_Overijse', {'id': 38861, 'rank': 5, 'totalpts': 362}), ('Fc Mbonabushia', {'id': 205633, 'rank': 6, 'totalpts': 356}), ('FC Slurp', {'id': 933573, 'rank': 11, 'totalpts': 312}), ('PEDD United', {'id': 37828, 'rank': 12, 'totalpts': 307})])
</snippet></ROW><ROW><id>12768183</id><snippet>.items()</snippet></ROW><ROW><id>12768183</id><snippet>&gt;&gt;&gt; league.items()[0]
('Fc Paris', {'id': 1538051, 'rank': 2, 'totalpts': 396})  # = x
</snippet></ROW><ROW><id>12768183</id><snippet>x[1]['totalpts']</snippet></ROW><ROW><id>12768183</id><snippet>reverse=True</snippet></ROW><ROW><id>12768183</id><snippet>OrderedDict</snippet></ROW><ROW><id>12768183</id><snippet>&gt;&gt;&gt; sorted(league.items(), key= lambda x: x[1]['totalpts'], reverse=True)
[('Fc Paris', {'id': 1538051, 'rank': 2, 'totalpts': 396}), ('KFC_Overijse', {'id': 38861, 'rank': 5, 'totalpts': 362}), ('Fc Mbonabushia', {'id': 205633, 'rank': 6, 'totalpts': 356}), ('FC Slurp', {'id': 933573, 'rank': 11, 'totalpts': 312}), ('PEDD United', {'id': 37828, 'rank': 12, 'totalpts': 307})]
</snippet></ROW><ROW><id>12768301</id><snippet>potrace -s sourceimg.bmp
</snippet></ROW><ROW><id>12768301</id><snippet>import fontforge
font = fontforge.open('blank.sfd')
glyph = font.createMappedChar('A')
glyph.importOutlines('sourceimg.svg')
font.generate('testfont.ttf')
</snippet></ROW><ROW><id>12768301</id><snippet>@font-face
{
font-family: testfont;
src: url('testfont.ttf');
}
</snippet></ROW><ROW><id>12768301</id><snippet>&lt;span style="font-family:testfont; font-weight:normal; color:green;"&gt;A&lt;/span&gt;
&lt;span style="font-family:testfont; font-weight:bold; color:green;"&gt;A&lt;/span&gt;
</snippet></ROW><ROW><id>12768323</id><snippet>from PyQt4 import QtGui

doc = QtGui.QTextDocument()
cur = QtGui.QTextCursor(doc)

d_font = QtGui.QFont('Courier')
c_format = QtGui.QTextCharFormat()
c_format.setFont(d_font)
cur.setCharFormat(c_format)
cur.insertText('sample text')

writer = QtGui.QTextDocumentWriter()
writer.setFormat(writer.supportedDocumentFormats()[1])
writer.setFileName('CV')
writer.write(doc)
</snippet></ROW><ROW><id>12768351</id><snippet>LiveServerTestCase</snippet></ROW><ROW><id>12768351</id><snippet>requests</snippet></ROW><ROW><id>12768370</id><snippet>close()</snippet></ROW><ROW><id>12768370</id><snippet>insertlocations()</snippet></ROW><ROW><id>12768370</id><snippet>neighbourhood.locationid</snippet></ROW><ROW><id>12768370</id><snippet>neighbourhood</snippet></ROW><ROW><id>12768370</id><snippet>from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import sessionmaker

engine = create_engine('sqlite:///example.db')
engine.echo = True
Base = declarative_base()

class Location(Base):
    __tablename__ = 'locations'

    locationid = Column(Integer, primary_key=True)
    name = Column(String)
    address = Column(String)

    def __init__(self, name, address):
        self.name = name
        self.address = address


Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()

def insertlocations(locationlist):
    session.add_all(locationlist)
    session.commit()


loc1 = Location('loc1', 'Foostreet 42')
loc2 = Location('loc2', 'Barstreet 27')

neighbourhoodlist = [loc1, loc2]

insertlocations(neighbourhoodlist)
for neighbourhood in neighbourhoodlist:
    print neighbourhood.locationid

session.close()
</snippet></ROW><ROW><id>12768370</id><snippet>session.close()</snippet></ROW><ROW><id>12768534</id><snippet>c = [b[i] for i in index]
</snippet></ROW><ROW><id>12768534</id><snippet>c = b[index]
</snippet></ROW><ROW><id>12768563</id><snippet>TextView</snippet></ROW><ROW><id>12768563</id><snippet>#read the contents of the file
text = open("yourfile").read()
#get the underlying TextBuffer object of the TextView and set its text
textbox.get_buffer().set_text(text)
</snippet></ROW><ROW><id>12768688</id><snippet>it.forward_to_tag_toggle()</snippet></ROW><ROW><id>12768688</id><snippet>it.get_tags()</snippet></ROW><ROW><id>12768688</id><snippet>buf.get_text(it, next_it)</snippet></ROW><ROW><id>12768688</id><snippet>def split(buf):
    it = buf.get_start_iter()
    while not it.is_end():
        nextpos = it.copy()
        nextpos.forward_to_tag_toggle(None)
        yield buf.get_text(it, nextpos), it.get_tags()
        it = nextpos
</snippet></ROW><ROW><id>12768773</id><snippet>import os

def overwrite(f):
    """Overwrite a file with zeroes.

    Arguments:
    f -- name of the file
    """
    stat = os.stat(f)
    with open(f, 'r+') as of:
        of.write('\0' * stat.st_size)
        of.flush()
</snippet></ROW><ROW><id>12768846</id><snippet>file.seek(0, os.SEEK_END)</snippet></ROW><ROW><id>12768870</id><snippet>*</snippet></ROW><ROW><id>12768870</id><snippet>optimize imports</snippet></ROW><ROW><id>12768870</id><snippet>ctrl+shift+o</snippet></ROW><ROW><id>12768877</id><snippet>import matplotlib.pyplot as plt
</snippet></ROW><ROW><id>12768877</id><snippet>np.linspace</snippet></ROW><ROW><id>12768877</id><snippet>x = np.linspace(0, 10, num=101)
</snippet></ROW><ROW><id>12768956</id><snippet>p = subprocess.Popen(('man -P cat %s' % manTopic,), shell = True)
stdout, stderr = p.communicate()
if stdout:
</snippet></ROW><ROW><id>12769024</id><snippet>import random 
n = 4 

A = [i for i in xrange(n)]
B = [1,1,1,2]
NextGeneration = [] 
for i in xrange(n-1):
    last = n - i - 1
    actualChoice =  random.randint(0,last)   
    NextGeneration.append(B[A[actualChoice]])  
    auxSwap = actualChoice 
    A[actualChoice] = A[last] 
</snippet></ROW><ROW><id>12769082</id><snippet>In [73]: node = 'a'

In [74]: deco = 'b'

In [75]: data = [(10, 'a', 1), (11, 'b', 2), (12, 'c', 3)]

In [76]: df = pd.DataFrame(data)

In [77]: df
Out[77]: 
    0  1  2
0  10  a  1
1  11  b  2
2  12  c  3

In [78]: cond = ((df[1] != node) &amp; (df[2] != deco))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-78-0afad3702859&gt; in &lt;module&gt;()
----&gt; 1 cond = ((df[1] != node) &amp; (df[2] != deco))

/home/.../python2.7/site-packages/pandas/core/series.pyc in wrapper(self, other)
    140             if np.isscalar(res):
    141                 raise TypeError('Could not compare %s type with Series'
--&gt; 142                                 % type(other))
    143             return Series(na_op(values, other),
    144                           index=self.index, name=self.name)

TypeError: Could not compare &lt;type 'str'&gt; type with Series
</snippet></ROW><ROW><id>12769082</id><snippet>In [79]: deco = 3

In [80]: cond = ((df[1] != node) &amp; (df[2] != deco))

In [81]: df[cond]
Out[81]: 
    0  1  2
1  11  b  2
</snippet></ROW><ROW><id>12769082</id><snippet>read_csv</snippet></ROW><ROW><id>12769082</id><snippet>X.1</snippet></ROW><ROW><id>12769082</id><snippet>X.N</snippet></ROW><ROW><id>12769082</id><snippet>X1</snippet></ROW><ROW><id>12769082</id><snippet>XN</snippet></ROW><ROW><id>12769082</id><snippet>0</snippet></ROW><ROW><id>12769082</id><snippet>N</snippet></ROW><ROW><id>12769082</id><snippet>In [23]: df = pd.read_csv(StringIO(data), header=None)

In [24]: df.columns
Out[24]: Index([X.1, X.2, X.3], dtype=object)

In [25]: df.columns[0]
Out[25]: 'X.1'

In [26]: type(df.columns[0])
Out[26]: str

In [27]: df = pd.DataFrame(randn(2,3))

In [30]: df.columns
Out[30]: Int64Index([0, 1, 2])

In [31]: df.columns[0]
Out[31]: 0

In [32]: type(df.columns[0])
Out[32]: numpy.int64
</snippet></ROW><ROW><id>12769082</id><snippet>In [60]: cond = ((df[1] != node) &amp; (df[2] != deco))
</snippet></ROW><ROW><id>12769082</id><snippet>df[1]</snippet></ROW><ROW><id>12769082</id><snippet>df[2]</snippet></ROW><ROW><id>12769082</id><snippet>node</snippet></ROW><ROW><id>12769082</id><snippet>deco</snippet></ROW><ROW><id>12769082</id><snippet>read_csv</snippet></ROW><ROW><id>12769082</id><snippet>In [60]: cond = ((df['X.2'] != node) &amp; (df['X.3'] != deco))
</snippet></ROW><ROW><id>12769082</id><snippet>In [60]: cond = ((df['X2'] != node) &amp; (df['X3'] != deco))
</snippet></ROW><ROW><id>12769116</id><snippet>import re
from string import Template


class TemplateIgnoreInvalid(Template):
    # override pattern to make sure `invalid` never matches
    pattern = r"""
    %(delim)s(?:
      (?P&lt;escaped&gt;%(delim)s) |   # Escape sequence of two delimiters
      (?P&lt;named&gt;%(id)s)      |   # delimiter and a Python identifier
      {(?P&lt;braced&gt;%(id)s)}   |   # delimiter and a braced identifier
      (?P&lt;invalid&gt;^$)            # never matches (the regex is not multilined)
    )
    """ % dict(delim=re.escape(Template.delimiter), id=Template.idpattern)


def check_substitution(template, **mapping):
    try:
        TemplateIgnoreInvalid(template).substitute(mapping)
    except KeyError:
        return False
    else:
        return True
</snippet></ROW><ROW><id>12769116</id><snippet>f = check_substitution
assert f('var is $var', var=1)
assert f('$ var is $var', var=1)
assert     f('var is $var and foo is $foo', var=1, foo=2)
assert not f('var is $var and foo is $foo', var=1)
assert     f('$ var is $var and foo is $foo', var=1, foo=2)
assert not f('$ var is $var and foo is $foo', var=1)
# support all invalid patterns
assert f('var is $var and foo is ${foo', var=1)
assert f('var is $var and foo is ${foo', var=1, foo=2) #NOTE: problematic API
assert     f('var is $var and foo is ${foo and ${baz}', var=1, baz=3)
assert not f('var is $var and foo is ${foo and ${baz}', var=1)
</snippet></ROW><ROW><id>12769116</id><snippet>$</snippet></ROW><ROW><id>12769305</id><snippet>select.select</snippet></ROW><ROW><id>12769305</id><snippet>select.select(inputs, outputs, [])</snippet></ROW><ROW><id>12769305</id><snippet>else</snippet></ROW><ROW><id>12769305</id><snippet>sock</snippet></ROW><ROW><id>12769305</id><snippet>s</snippet></ROW><ROW><id>12769305</id><snippet>inputs</snippet></ROW><ROW><id>12769305</id><snippet>sock.recv()</snippet></ROW><ROW><id>12769305</id><snippet>socket.error</snippet></ROW><ROW><id>12769305</id><snippet>select.select</snippet></ROW><ROW><id>12769473</id><snippet>QTextEdit</snippet></ROW><ROW><id>12769473</id><snippet>    f = QFile("path/to/your/htmlfile")
    f.open(QFile.ReadOnly|QFile.Text)
    istream = QTextStream(f)
    textfield.setHtml(istream.readAll())
    f.close()
</snippet></ROW><ROW><id>12769698</id><snippet>pnpoly</snippet></ROW><ROW><id>12769698</id><snippet>points_inside_poly</snippet></ROW><ROW><id>12769698</id><snippet>from liblas import file as lasfile
import numpy as np
from matplotlib.nxutils import pnpoly

with lasfile.File(inFile, None, 'r') as f:
    inside_points = (p for p in f if pnpoly(p.x, p.y, verts))
    with lasfile.File(outFile,mode='w',header= h) as file_out:
        for p in inside_points:
            file_out.write(p)
</snippet></ROW><ROW><id>12769698</id><snippet>for</snippet></ROW><ROW><id>12769698</id><snippet>with lasfile.File(inFile</snippet></ROW><ROW><id>12769698</id><snippet>with</snippet></ROW><ROW><id>12769698</id><snippet>()</snippet></ROW><ROW><id>12769698</id><snippet>for p in f</snippet></ROW><ROW><id>12769698</id><snippet>if pnpoly(p.x, p.y, verts)</snippet></ROW><ROW><id>12769698</id><snippet>with</snippet></ROW><ROW><id>12769698</id><snippet>for p in inside_points</snippet></ROW><ROW><id>12769698</id><snippet>file_out.write(p)</snippet></ROW><ROW><id>12769698</id><snippet>from liblas import LASException

chunkSize = 100000
for i in xrange(0,len(f), chunkSize):
    try:
        chunk = f[i:i+chunkSize]
    except LASException:
        rem = len(f)-i
        chunk = f[i:i+rem]
</snippet></ROW><ROW><id>12769698</id><snippet>else</snippet></ROW><ROW><id>12769817</id><snippet>and</snippet></ROW><ROW><id>12769817</id><snippet>@(year and str(year) + ' - ')
</snippet></ROW><ROW><id>12769817</id><snippet>year</snippet></ROW><ROW><id>12769817</id><snippet>None</snippet></ROW><ROW><id>12769817</id><snippet>None</snippet></ROW><ROW><id>12769817</id><snippet>str(year) + ' - '</snippet></ROW><ROW><id>12769817</id><snippet>str(year)</snippet></ROW><ROW><id>12769817</id><snippet>int</snippet></ROW><ROW><id>12769817</id><snippet>str</snippet></ROW><ROW><id>12769855</id><snippet>numpy.arange</snippet></ROW><ROW><id>12769855</id><snippet>w = np.arange(1e3, 1e7, 1e3)
</snippet></ROW><ROW><id>12769855</id><snippet>y = 1/(1+2.56e-8*(w ** 2))
</snippet></ROW><ROW><id>12769855</id><snippet>plt.loglog(w, y)
</snippet></ROW><ROW><id>12769859</id><snippet>IOLoops</snippet></ROW><ROW><id>12769859</id><snippet>IOLoop</snippet></ROW><ROW><id>12769859</id><snippet>IOLoop</snippet></ROW><ROW><id>12769873</id><snippet>class UserAdmin(admin.ModelAdmin):
    list_display = ['username', 'fullname']

    def fullname(self, model):
        return  model.first_name + " " + model.second_name
</snippet></ROW><ROW><id>12769873</id><snippet>def _status(invite):
    if invite.is_activated:
        return "Activated"
    if invite.is_alive:
        return "Live"
    return "Expired"

_status.short_description = 'status'
Invite.status = _status # Invite is model class
</snippet></ROW><ROW><id>12769895</id><snippet>zip()</snippet></ROW><ROW><id>12769895</id><snippet>for i,j in zip(found,locations):
    print "\t".join((i,str(j)))
</snippet></ROW><ROW><id>12770046</id><snippet>Packer</snippet></ROW><ROW><id>12770046</id><snippet>w</snippet></ROW><ROW><id>12770046</id><snippet>h</snippet></ROW><ROW><id>12770046</id><snippet>fit(blocks)
findNode(root, w, h) 
splitNode(node, w, h)
</snippet></ROW><ROW><id>12770046</id><snippet>root</snippet></ROW><ROW><id>12770078</id><snippet>dbs</snippet></ROW><ROW><id>12770078</id><snippet>close_all_instances</snippet></ROW><ROW><id>12770236</id><snippet>page = filehandle.read()
</snippet></ROW><ROW><id>12770236</id><snippet>lines = []
for line in filehandle:
    lines.append(line)
</snippet></ROW><ROW><id>12770303</id><snippet>plugins</snippet></ROW><ROW><id>12770532</id><snippet>from pygraphics import media
</snippet></ROW><ROW><id>12770532</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print sys.path
</snippet></ROW><ROW><id>12770532</id><snippet>C:\Python27\Lib\site-packages\</snippet></ROW><ROW><id>12770532</id><snippet>import filename</snippet></ROW><ROW><id>12770532</id><snippet>dir1/dir2/filename.py</snippet></ROW><ROW><id>12770532</id><snippet>import dir1.dir2.filename</snippet></ROW><ROW><id>12770532</id><snippet>__init__.py</snippet></ROW><ROW><id>12770718</id><snippet>y2 = integrate.odeint(eqexec2,inits, trange, full_output=0, printmessg=1,hmax=1.0)
</snippet></ROW><ROW><id>12770765</id><snippet>**</snippet></ROW><ROW><id>12770765</id><snippet>import markup
url_= ('href1.com','href2.com')
mycxml=markup.page(mode='xml', case='given')
mycxml.init(encoding='utf-8')
mycxml.Collection(**{'xmlns:p': 'somelines'})
mycxml.Items(url_)
mycxml.collection.close()
print mycxml
</snippet></ROW><ROW><id>12770765</id><snippet>&lt;?xml version='1.0' encoding='utf-8' ?&gt;
&lt;Collection xmlns:p="somelines"&gt;
&lt;Items&gt;href1.com&lt;/Items&gt;
&lt;Items&gt;href2.com&lt;/Items&gt;
&lt;/collection&gt;
</snippet></ROW><ROW><id>12770800</id><snippet>for</snippet></ROW><ROW><id>12770800</id><snippet>from PIL import Image

def find_rows_with_color(pixels, width, height, color):
    rows_found=[]
    for y in xrange(height):
        for x in xrange(width):
            if pixels[x, y] != color:
                break
        else:
            rows_found.append(y)
    return rows_found

old_im = Image.open("path/to/old/image.png")
if old_im.mode != 'RGB':
    old_im = old_im.convert('RGB')
pixels = old_im.load()
width, height = old_im.size[0], old_im.size[1]
rows_to_remove = find_rows_with_color(pixels, width, height, (0, 0, 0)) #Remove black rows
new_im = Image.new('RGB', (width, height - len(rows_to_remove)))
pixels_new = new_im.load()
rows_removed = 0
for y in xrange(old_im.size[1]):
    if y not in rows_to_remove:
        for x in xrange(new_im.size[0]):
            pixels_new[x, y - rows_removed] = pixels[x, y]
    else:
        rows_removed += 1
new_im.save("path/to/new/image.png")
</snippet></ROW><ROW><id>12770899</id><snippet>\n</snippet></ROW><ROW><id>12771164</id><snippet>class Foo:
    def __init__(self):
        self.x = dict()

    def add(self):
        self.x[1] = 'a'  # add something to our dict

    def redefine(self):
        self.x = {2:'b', 3:'c'}  # reassign our dict
</snippet></ROW><ROW><id>12771164</id><snippet>foo = Foo()
print foo.x
foo.add()
print foo.x
foo.redefine()
print foo.x
</snippet></ROW><ROW><id>12771329</id><snippet>1.) http://userpages.umbc.edu/~rcampbel/Computers/Python/lib/numbthy.py ( check the powmod function)
2.) gmpy2 (gmpy2.readthedocs.org/en/latest/mpz.html)
3.) mpmath (code.google.com/p/mpmath/)
</snippet></ROW><ROW><id>12771438</id><snippet>if not request.headers.getlist("X-Forwarded-For"):
   ip = request.remote_addr
else:
   ip = request.headers.getlist("X-Forwarded-For")[0]
</snippet></ROW><ROW><id>12771635</id><snippet>404.html</snippet></ROW><ROW><id>12771725</id><snippet>any</snippet></ROW><ROW><id>12771725</id><snippet>all</snippet></ROW><ROW><id>12771725</id><snippet>all</snippet></ROW><ROW><id>12771725</id><snippet>&gt;&gt;&gt; s='abcd'
&gt;&gt;&gt; d={'a':1, 'b':2, 'c':3}
&gt;&gt;&gt; all(c in d for c in s)
False
</snippet></ROW><ROW><id>12771725</id><snippet>&gt;&gt;&gt; set(s) &amp; d.keys()
{'a', 'c', 'b'}
</snippet></ROW><ROW><id>12771757</id><snippet>return m.sub(partial(process_pseudo_ternary, custom_1=True, custom_2=True), ts)
</snippet></ROW><ROW><id>12771818</id><snippet>settings.py</snippet></ROW><ROW><id>12771818</id><snippet>if 'test' in sys.argv:
    DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'
    SOUTH_TESTS_MIGRATE = False # if you're using south
</snippet></ROW><ROW><id>12771818</id><snippet>DATABASES</snippet></ROW><ROW><id>12771818</id><snippet>sqlite</snippet></ROW><ROW><id>12771898</id><snippet>rsb.views.registerUser</snippet></ROW><ROW><id>12771898</id><snippet>rsb.views.register_user</snippet></ROW><ROW><id>12771898</id><snippet>country_choices = []
for item in countries:
    country_choices.append(countries.name)

state_choices = []
for item in unitedStates:
    state_choices.append(unitedStates.name)
</snippet></ROW><ROW><id>12771898</id><snippet>country_choices = []
for item in countries:
    country_choices.append(item.name)

state_choices = []
for item in unitedStates:
    state_choices.append(item.name)
</snippet></ROW><ROW><id>12771971</id><snippet>dice</snippet></ROW><ROW><id>12771971</id><snippet>return</snippet></ROW><ROW><id>12771971</id><snippet>for</snippet></ROW><ROW><id>12771971</id><snippet>dice</snippet></ROW><ROW><id>12771971</id><snippet>retval = []

retval.append(...)

return retval
</snippet></ROW><ROW><id>12771971</id><snippet>yield</snippet></ROW><ROW><id>12771971</id><snippet>yield</snippet></ROW><ROW><id>12772034</id><snippet>s=str(616263)
print "".join([chr(int(s[x:x+2], 16)) for x in range(0,len(s),2)])
</snippet></ROW><ROW><id>12772093</id><snippet>datetime</snippet></ROW><ROW><id>12772093</id><snippet>datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()
</snippet></ROW><ROW><id>12772093</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; str_date = '2/28/1987'
&gt;&gt;&gt; datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()
'1987-02-28'
</snippet></ROW><ROW><id>12772216</id><snippet>urllib.request</snippet></ROW><ROW><id>12772216</id><snippet>Request</snippet></ROW><ROW><id>12772216</id><snippet>request = urllib.request.Request(url, headers=req_headers)
opener = urllib.request.build_opener()
response = opener.open(request)
</snippet></ROW><ROW><id>12772406</id><snippet>max()</snippet></ROW><ROW><id>12772406</id><snippet>max([(abs(i), i) for i in [3,4,-5,0]])[1]
</snippet></ROW><ROW><id>12772643</id><snippet>json.loads()</snippet></ROW><ROW><id>12772643</id><snippet>test.txt</snippet></ROW><ROW><id>12772643</id><snippet>with open(testname) as f:
    record = json.load(f)
</snippet></ROW><ROW><id>12772643</id><snippet>with</snippet></ROW><ROW><id>12772643</id><snippet>simplejson</snippet></ROW><ROW><id>12772917</id><snippet>def make_question(question, *answers):
    print question
    print
    for i, answer in enumerate(answers, 1):
        print i, '-', answer

    print
    return raw_input('Your answer is: ') 
</snippet></ROW><ROW><id>12772917</id><snippet>answer = make_question('Test to correctness:', 'correct', 'not correct')
print answer
</snippet></ROW><ROW><id>12772917</id><snippet>Test to correctness:

1 - correct
2 - not correct

Your answer is: correct
correct
</snippet></ROW><ROW><id>12772917</id><snippet>input = raw_input('Are you sure?: [Y]') # [Y] - YES by default
if input.lower() in ['n', 'no']:
    exit() # or return...
</snippet></ROW><ROW><id>12772917</id><snippet>import termios, fcntl, sys, os

def prompt_user(message, *args):
    fd = sys.stdin.fileno()
    oldterm = termios.tcgetattr(fd)
    newattr = termios.tcgetattr(fd)
    newattr[3] = newattr[3] &amp; ~termios.ICANON &amp; ~termios.ECHO
    termios.tcsetattr(fd, termios.TCSANOW, newattr)
    oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)

    sys.stdout.write(message.strip())
    sys.stdout.write(' [%s]: ' % '/'.join(args))

    choise = 'N'
    lower_args = [arg.lower() for arg in args]
    try:
        while True:
            try:
                c = sys.stdin.read(1)
                if c.lower() in lower_args:
                    sys.stdout.write('\b')
                    sys.stdout.write(c)
                    choise = c

                if c == '\n':
                    sys.stdout.write('\n')
                    break

            except IOError: 
                pass
    finally:
        termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)
        fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)

    return choise
</snippet></ROW><ROW><id>12772917</id><snippet>print prompt_user('Are you sure?', 'Y', 'N', 'A', 'Q')
</snippet></ROW><ROW><id>12772958</id><snippet>if gzipped:
    source = Popen(["gunzip", "-c", "remotestorage/file.gz"], stdout=PIPE)
else:
    source = Popen(["cat", "remotestorage/file"], stdout=PIPE)
firstchar = source.stdout.read(1)
# "unread" the char we've just read
source = Popen([r"(printf '\x%02x' &amp;&amp; cat)" % ord(firstchar)],
               shell=True, stdin=source.stdout, stdout=PIPE)

# Now feed the output to a filter or to a local file.
flocal = None
try:
    if firstchar == "@":
        filter = Popen(["filter", "localstorage/outputfile.fastq"],
                       stdin=source.stdout)
    else:
        flocal = open('localstorage/outputfile.stream', 'w')
        filter = Popen(["cat"], stdin=source.stdout, stdout=flocal)
    filter.communicate()
finally:
    if flocal is not None:
        flocal.close()
</snippet></ROW><ROW><id>12772958</id><snippet>(printf '\xhh' &amp;&amp; cat)</snippet></ROW><ROW><id>12772958</id><snippet>shell=True</snippet></ROW><ROW><id>12772958</id><snippet>Popen</snippet></ROW><ROW><id>12772958</id><snippet>cat</snippet></ROW><ROW><id>12772958</id><snippet>Popen</snippet></ROW><ROW><id>12772958</id><snippet>printf</snippet></ROW><ROW><id>12772958</id><snippet>peek</snippet></ROW><ROW><id>12772958</id><snippet>new_source</snippet></ROW><ROW><id>12773155</id><snippet>pygtk</snippet></ROW><ROW><id>12773155</id><snippet>threading</snippet></ROW><ROW><id>12773155</id><snippet>gobject.threads_init()
</snippet></ROW><ROW><id>12773173</id><snippet>apt-get install python-virtualenv</snippet></ROW><ROW><id>12773173</id><snippet>virtualenv nltk_env --system-site-packages 
</snippet></ROW><ROW><id>12773173</id><snippet>source nltk_env/bin/activate
pip install nltk
python
&gt;&gt;&gt; import nltk
</snippet></ROW><ROW><id>12773173</id><snippet>pip install --user nltk</snippet></ROW><ROW><id>12773304</id><snippet>inclusion tag</snippet></ROW><ROW><id>12773304</id><snippet>simple tag</snippet></ROW><ROW><id>12773304</id><snippet>context processors</snippet></ROW><ROW><id>12773325</id><snippet>map</snippet></ROW><ROW><id>12773325</id><snippet>import math
t = range(8001)
wave = map(lambda x: math.sin(2 * math.pi * 440 * x), t)
</snippet></ROW><ROW><id>12773325</id><snippet>wave</snippet></ROW><ROW><id>12773539</id><snippet>sorted(zip(L1, L2), key=lambda x: x[1], reverse=True)[:3]
</snippet></ROW><ROW><id>12773539</id><snippet>operator.itemgetter(1)</snippet></ROW><ROW><id>12773539</id><snippet>[a for a,_ in sorted(zip(L1, L2), key=lambda x: x[1], reverse=True)][:3]
</snippet></ROW><ROW><id>12773539</id><snippet>[b for _,b in sorted(zip(L2, L1), reverse=True)][:3]
</snippet></ROW><ROW><id>12773590</id><snippet>-1</snippet></ROW><ROW><id>12773590</id><snippet>input[1:]
</snippet></ROW><ROW><id>12773590</id><snippet>key, *values = input().split()
map[key] = values
</snippet></ROW><ROW><id>12773683</id><snippet>urls</snippet></ROW><ROW><id>12773683</id><snippet>waiting = [client.getPage(url) for url in urls]
</snippet></ROW><ROW><id>12773683</id><snippet>urls</snippet></ROW><ROW><id>12773683</id><snippet>gatherResults</snippet></ROW><ROW><id>12773683</id><snippet>Deferred</snippet></ROW><ROW><id>12773683</id><snippet>Deferred</snippet></ROW><ROW><id>12773683</id><snippet>client.getPage(url)</snippet></ROW><ROW><id>12773683</id><snippet>Deferred</snippet></ROW><ROW><id>12773683</id><snippet>gatherResults</snippet></ROW><ROW><id>12773683</id><snippet>finish</snippet></ROW><ROW><id>12773683</id><snippet>print_badurls</snippet></ROW><ROW><id>12773683</id><snippet>getPage</snippet></ROW><ROW><id>12773683</id><snippet>Deferred</snippet></ROW><ROW><id>12773683</id><snippet>getPage</snippet></ROW><ROW><id>12773683</id><snippet>defer.gatherResults</snippet></ROW><ROW><id>12773808</id><snippet>&lt;assembly&gt;</snippet></ROW><ROW><id>12773808</id><snippet>--hidden-import=Module</snippet></ROW><ROW><id>12773843</id><snippet>Q3Support</snippet></ROW><ROW><id>12773843</id><snippet>Q3Support</snippet></ROW><ROW><id>12773963</id><snippet>start += end
</snippet></ROW><ROW><id>12773963</id><snippet>start = end
</snippet></ROW><ROW><id>12773963</id><snippet>xrange</snippet></ROW><ROW><id>12773963</id><snippet>&gt;&gt;&gt; d = {'a':0.66,'b':0.07,'c':0.04}
&gt;&gt;&gt; start = 0
&gt;&gt;&gt; end = 0
&gt;&gt;&gt; range_dict = {}
&gt;&gt;&gt; for k,v in d.items():
...    end+=int(v*100)
...    range_dict[k]=xrange(start,end)
...    start=end
... 
&gt;&gt;&gt; range_dict
{'a': xrange(66), 'c': xrange(66, 70), 'b': xrange(70, 77)}
</snippet></ROW><ROW><id>12774007</id><snippet>link()</snippet></ROW><ROW><id>12774007</id><snippet>LinkedExited</snippet></ROW><ROW><id>12774007</id><snippet>exception</snippet></ROW><ROW><id>12774153</id><snippet>Tag</snippet></ROW><ROW><id>12774153</id><snippet>Post</snippet></ROW><ROW><id>12774153</id><snippet>NameError</snippet></ROW><ROW><id>12774153</id><snippet>posts = models.ManyToManyField(Post)
</snippet></ROW><ROW><id>12774153</id><snippet>posts = models.ManyToManyField('Post')
</snippet></ROW><ROW><id>12774153</id><snippet>class Car(models.Model):
    manufacturer = models.ForeignKey('Manufacturer')
    # ...

class Manufacturer(models.Model):
    # ...
</snippet></ROW><ROW><id>12774153</id><snippet>posts</snippet></ROW><ROW><id>12774153</id><snippet>Tag</snippet></ROW><ROW><id>12774153</id><snippet>posts = models.ManyToManyField(Post)</snippet></ROW><ROW><id>12774153</id><snippet>Post</snippet></ROW><ROW><id>12774153</id><snippet>tags = models.ManyToManyField(Tag)
</snippet></ROW><ROW><id>12774153</id><snippet>tags = models.ManyToManyField(Tag, related_name='posts')
</snippet></ROW><ROW><id>12774153</id><snippet>related_name</snippet></ROW><ROW><id>12774153</id><snippet>ForeignKey</snippet></ROW><ROW><id>12774153</id><snippet>ManyToManyField</snippet></ROW><ROW><id>12774273</id><snippet>plt.rcParams</snippet></ROW><ROW><id>12774273</id><snippet>&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; plt.rcParams['keymap.save']
's'
&gt;&gt;&gt; plt.rcParams['keymap.save'] = ''
</snippet></ROW><ROW><id>12774273</id><snippet>matplotlibrc</snippet></ROW><ROW><id>12774273</id><snippet>matplotlib.matplotlib_fname()</snippet></ROW><ROW><id>12774301</id><snippet>basicDialog.ShowModal()
</snippet></ROW><ROW><id>12774319</id><snippet>if var is 'stringone' or 'stringtwo':
    dosomething()
</snippet></ROW><ROW><id>12774319</id><snippet>if (var is 'stringone') or 'stringtwo':
    dosomething()
</snippet></ROW><ROW><id>12774319</id><snippet>'stringtwo</snippet></ROW><ROW><id>12774319</id><snippet>if var in ('stringone', 'stringtwo'):
    dosomething()
</snippet></ROW><ROW><id>12774319</id><snippet>if var == 'stringone' or var == 'stringtwo':
    dosomething()
</snippet></ROW><ROW><id>12774319</id><snippet>is</snippet></ROW><ROW><id>12774319</id><snippet>is</snippet></ROW><ROW><id>12774319</id><snippet>is</snippet></ROW><ROW><id>12774319</id><snippet>&gt;&gt;&gt; 'a' + 'b' == 'ab'
True
&gt;&gt;&gt; 'a' + 'b' is 'abc'[:2]
False # but could be True
&gt;&gt;&gt; 'a' + 'b' is 'ab'
True  # but could be False
</snippet></ROW><ROW><id>12774404</id><snippet>if instrument=='guitar' or 'Guitar':
</snippet></ROW><ROW><id>12774404</id><snippet>if (instrument=='guitar') or ('Guitar'):
</snippet></ROW><ROW><id>12774404</id><snippet>'Guitar'</snippet></ROW><ROW><id>12774404</id><snippet>True</snippet></ROW><ROW><id>12774404</id><snippet>True</snippet></ROW><ROW><id>12774404</id><snippet>if instrument in ('guitar', 'Guitar'):
</snippet></ROW><ROW><id>12774404</id><snippet>'gUiTAR'</snippet></ROW><ROW><id>12774404</id><snippet>if instrument.lower() == 'guitar':
</snippet></ROW><ROW><id>12774529</id><snippet>itemSave</snippet></ROW><ROW><id>12774529</id><snippet>x = 5 + x
</snippet></ROW><ROW><id>12774529</id><snippet>x</snippet></ROW><ROW><id>12774529</id><snippet>itemSave</snippet></ROW><ROW><id>12774529</id><snippet>myNum = 5
x = float(myNum+x)
print x
</snippet></ROW><ROW><id>12774529</id><snippet>x = float(myNum+x)
NameError: name 'x' is not defined
</snippet></ROW><ROW><id>12774529</id><snippet>myNum = 5
x = 10
x = float(myNum+x)
print x
</snippet></ROW><ROW><id>12774692</id><snippet>readCSV= csv.reader(f)
text=readCSV[rowID][1]
</snippet></ROW><ROW><id>12774692</id><snippet>csv.reader</snippet></ROW><ROW><id>12774692</id><snippet>islice</snippet></ROW><ROW><id>12774692</id><snippet>islice(readCSV, rowID, rowID+1).next()</snippet></ROW><ROW><id>12774692</id><snippet>rowID</snippet></ROW><ROW><id>12774692</id><snippet>AOI</snippet></ROW><ROW><id>12774692</id><snippet>SearchStrings</snippet></ROW><ROW><id>12774692</id><snippet>FileList = csv.reader(open(AOI))
SearchStrings = []
rows = []
rowID=0
for File in FileList:
    #SearchStrings.append(File[0]+","+File[1])
    SearchStrings.append(str(rowID)+'_'+File[Compare_Column]+'_'+File[Compare_Column2])
    rows.append(File)
    rowID=rowID+1

... # later

rowID=int(field[:field.find('_')])
text = rows[rowID][1]
</snippet></ROW><ROW><id>12774755</id><snippet>if var in ['string one', 'string two', 'string three']:
    # If var is one of string one, string two, or string three.
    do_something()
</snippet></ROW><ROW><id>12774755</id><snippet>if var == 'stringone' or var == 'stringtwo' or var == stringthree:
    # If var is equal to stringone, or var is equal to stringtwo, or var is equal to stringthree.
    dosomething()
</snippet></ROW><ROW><id>12774967</id><snippet>import</snippet></ROW><ROW><id>12774967</id><snippet>import foo</snippet></ROW><ROW><id>12774967</id><snippet>Foo.Foo</snippet></ROW><ROW><id>12774967</id><snippet>from Foo import Foo</snippet></ROW><ROW><id>12774967</id><snippet>lower_case</snippet></ROW><ROW><id>12774967</id><snippet>PascalCase</snippet></ROW><ROW><id>12774984</id><snippet>twitter_api</snippet></ROW><ROW><id>12774984</id><snippet>twitter_api.statuses.user_timeline()
# ^- this converts to "api.twitter.com/1/statuses/user_timeline.json"

twitter_api.statuses.user_timeline(user_id="a")
# ^- this converts to "api.twitter.com/1/statuses/user_timeline.json?user_id=a"

twitter_api.statuses.user_timeline(foo)
# ^- this breaks - "foo" is not a key/value pair, and cannot be sent
</snippet></ROW><ROW><id>12774984</id><snippet>1/api/GetUser.json</snippet></ROW><ROW><id>12774984</id><snippet>import twitter
t = twitter.Twitter(auth=twitter.OAuth(ACCESS_KEY, ACCESS_SECRET, CONSUMER_KEY, CONSUMER_SECRET))
t.users.lookup(screen_name=SCREEN_NAME)
# returns the user object
</snippet></ROW><ROW><id>12775353</id><snippet>def recVowelCount(i, chars_to_find='aeiou'):
    if not chars_to_find:
        return 0
    return i.count(chars_to_find[0]) + recVowelCount(i, chars_to_find[1:])
</snippet></ROW><ROW><id>12775353</id><snippet>if i in 'aeiou':
</snippet></ROW><ROW><id>12775353</id><snippet>if 'hello' in 'aeiou':</snippet></ROW><ROW><id>12775353</id><snippet>if i[0] in 'aeiou'</snippet></ROW><ROW><id>12775353</id><snippet>i[0]</snippet></ROW><ROW><id>12775353</id><snippet>"hello"</snippet></ROW><ROW><id>12775353</id><snippet>0</snippet></ROW><ROW><id>12775353</id><snippet>def recVowelCount(i):
    if not i:
        return 0
</snippet></ROW><ROW><id>12775353</id><snippet>i</snippet></ROW><ROW><id>12775353</id><snippet>1</snippet></ROW><ROW><id>12775353</id><snippet>def recVowelCount(i):
    if not i:
        return 0
    if i[0] in 'aeiou':
        count = 1
    else:
        count = 0
    return count + recVowelCount(i[1:])
</snippet></ROW><ROW><id>12775353</id><snippet>def recVowelCount(i):
    if not i:
        return 0
    count = 'aeiou'.count(i[0])
    return count + recVowelCount(i[1:])
</snippet></ROW><ROW><id>12775353</id><snippet>def recVowelCount(i):
    if not i:
        return 0
    return 'aeiou'.count(i[0]) + recVowelCount(i[1:])
</snippet></ROW><ROW><id>12775403</id><snippet>channel_obj = db.TVChannel().get_id(channel_id) #load a channel's infos into an object
channel     = ChannelForm(request.form, obj=channel_obj) #load channel form
channel.CITY1adapt.process_data(channel_obj.streams['City1']['adapt'])
#and others links
</snippet></ROW><ROW><id>12775403</id><snippet>class ChannelForm(Form):    
    _id         = HiddenField()
    name        = TextField(_('channel name'))    
    CITY1adapt  = TextField(_('adapt link')) 
    CITY2adapt  = TextField(_('adapt link'))
    #and so on

    submit      = SubmitField(_('Save'))
</snippet></ROW><ROW><id>12775761</id><snippet>def myfilter(token):
    return token.translate(None, string.punctuation)   

tokens = filter(None, map(myfilter, tokens))
</snippet></ROW><ROW><id>12775761</id><snippet>for item in items[:]: # [:] copies the list
    if condition(item):
        items.remove(item)
</snippet></ROW><ROW><id>12775832</id><snippet>print</snippet></ROW><ROW><id>12775832</id><snippet>print()</snippet></ROW><ROW><id>12775843</id><snippet>assertEqual(tuple(generator_object), (1, 2, ...))
</snippet></ROW><ROW><id>12775843</id><snippet>n</snippet></ROW><ROW><id>12775843</id><snippet>itertools.islice</snippet></ROW><ROW><id>12775843</id><snippet>assertEqual(tuple(islice(generator_object, n)), (1, 2, ...))
</snippet></ROW><ROW><id>12775928</id><snippet>ISO_PATH = "your_iso_path_here"

# Mount the ISO in your OS
os.system("mkdir /media/tmp_iso")
os.system("mount -o rw,loop %s /media/tmp_iso" % ISO_PATH)

# Do your Pythonic manipulation here:
new_file = open("/media/tmp_iso/.config", 'w')
new_file.write(data)
new_file.close() 

# Unmount
os.system("umount /media/tmp_iso")
os.system("rmdir /media/tmp_iso")
</snippet></ROW><ROW><id>12775928</id><snippet>subprocess</snippet></ROW><ROW><id>12775928</id><snippet>os.system</snippet></ROW><ROW><id>12775949</id><snippet>order_by</snippet></ROW><ROW><id>12775949</id><snippet>order_by('score', '-create_time')</snippet></ROW><ROW><id>12776171</id><snippet>new_problem</snippet></ROW><ROW><id>12776171</id><snippet>Ed</snippet></ROW><ROW><id>12776171</id><snippet>tkinter.StringVar</snippet></ROW><ROW><id>12776171</id><snippet>Label</snippet></ROW><ROW><id>12776171</id><snippet>set</snippet></ROW><ROW><id>12776171</id><snippet>new_problem</snippet></ROW><ROW><id>12776171</id><snippet>super</snippet></ROW><ROW><id>12776171</id><snippet>from tkinter import Label, Frame, Entry, Button, LEFT, RIGHT, END, TOP, END, StringVar
from tkinter.messagebox import showinfo
from random import randrange

class Ed(Frame):
    """Simple arithmetic education app"""
    def __init__(self,parent=None):
        """constructor"""
        super().__init__(parent)
        self.tries = 0
        self.problem = StringVar()
        self.make_widgets()
        self.new_problem()
        self.pack()

    def make_widgets(self):
        """defines Ed widgets"""
        self.label = Label(self, textvariable=self.problem)
        self.label.pack(side=LEFT)
        self.ent = Entry(self)
        self.ent.pack(side=LEFT)
        Button(self, text='Enter', command=self.evaluate).pack(side=RIGHT)

    def new_problem(self):
        """creates new arithmetic problem"""
        self.tries = 0
        self.a = randrange(1,10,1)
        self.b = randrange(1,10,1)
        if randrange(1,10,1) &lt; 5:
            self.total = self.a + self.b
            self.plusminus = '+'
        else:
            self.total = self.a - self.b
            self.plusminus = '-'
        self.problem.set( (self.a , self.plusminus, self.b) )

    def evaluate(self):
        """handles button "Enter" clicks by comparing answer in entry to correct result"""
        if self.total == int(self.ent.get()):
            showinfo(title='YAY', message='You are CORRECT!')
            self.ent.delete(0,END)
            self.new_problem()
        else:
            self.ent.delete(0,END)
            self.ent.insert(END, 'Wrong. Try again.')
            self.tries += 1

Ed().mainloop()
</snippet></ROW><ROW><id>12776171</id><snippet>eval</snippet></ROW><ROW><id>12776171</id><snippet>int</snippet></ROW><ROW><id>12776171</id><snippet>showinfo(title="Blah", message="Look ma - No hands!")
</snippet></ROW><ROW><id>12776331</id><snippet>__EVENTTARGET</snippet></ROW><ROW><id>12776331</id><snippet>__VIEWSTATE</snippet></ROW><ROW><id>12776331</id><snippet>__VIEWSTATE</snippet></ROW><ROW><id>12776331</id><snippet>from urllib2 import urlopen
from urllib import urlencode

data = urlopen('url', urlencode({
    '__VIEWSTATE': 'foo',
    '__EVENTTARGET': 'bar',
})).read()
</snippet></ROW><ROW><id>12776480</id><snippet>vars()</snippet></ROW><ROW><id>12776480</id><snippet>__dict__</snippet></ROW><ROW><id>12776480</id><snippet>__dict__</snippet></ROW><ROW><id>12776480</id><snippet>__dict__</snippet></ROW><ROW><id>12776480</id><snippet>__dict__</snippet></ROW><ROW><id>12776480</id><snippet>variables = vars()
dictionary_of_bindings = {x:variables[x] for x in ("foo", "flip")}
</snippet></ROW><ROW><id>12776995</id><snippet>__acl__()</snippet></ROW><ROW><id>12776995</id><snippet>Report</snippet></ROW><ROW><id>12776995</id><snippet>from sqlalchemy.orm import relationship, backref
from pyramid.security import Everyone, Allow

class Report(Base):
    # ...
    user_id = Column(Integer, ForeignKey('user.id'))
    # ...


    @property
    def __acl__(self):
        return [
            (Allow, Everyone, 'view'),
            (Allow, self.user_id, 'edit'),
        ]

    # this also works:
    #__acl__ = [
    #    (Allow, Everyone, 'view'),
    #    (Allow, self.user_id, 'edit'),
    #]

class User(Base):
    # ...
    reports = relationship('Report', backref='user')
</snippet></ROW><ROW><id>12776995</id><snippet>__acl__()</snippet></ROW><ROW><id>12776995</id><snippet>view</snippet></ROW><ROW><id>12776995</id><snippet>Report</snippet></ROW><ROW><id>12776995</id><snippet>edit</snippet></ROW><ROW><id>12776995</id><snippet>from pyramid.config import Configurator
from pyramid.authentication import AuthTktAuthenticationPolicy
from pyramid.authorization import ACLAuthorizationPolicy
authentication_policy = AuthTktAuthenticationPolicy('seekrit')
authorization_policy = ACLAuthorizationPolicy()
config = Configurator()
config.set_authentication_policy(authentication_policy)
config.set_authorization_policy(authorization_policy)
</snippet></ROW><ROW><id>12777267</id><snippet>import os
</snippet></ROW><ROW><id>12777267</id><snippet>archive.write</snippet></ROW><ROW><id>12777267</id><snippet>archive.write(pdffile, os.path.basename(pdffile))
</snippet></ROW><ROW><id>12777267</id><snippet>write()</snippet></ROW><ROW><id>12777931</id><snippet>import numpy as np
import scipy.misc
import scipy.ndimage
import skimage.feature
import skimage.morphology

# parameters
THRESHOLD = 128

# read image
im = scipy.misc.imread("JPh65.png")
# convert to gray image
im = im.mean(axis=-1)
# find peaks
peak = skimage.feature.peak_local_max(im, threshold_rel=0.9, min_distance=10)
# make an image with peaks at 1
peak_im = np.zeros_like(im)
for p in peak:
    peak_im[p[0], p[1]] = 1
# label peaks
peak_label, _ = scipy.ndimage.label(peak_im)
# propagate peak labels with watershed
labels = skimage.morphology.watershed(255 - im, peak_label)
# limit watershed labels to area where the image is intense enough
result = labels * (im &gt; THRESHOLD)
</snippet></ROW><ROW><id>12778266</id><snippet>len(Category.objects.all())</snippet></ROW><ROW><id>12778266</id><snippet>Category.objects.count()
</snippet></ROW><ROW><id>12778266</id><snippet>create</snippet></ROW><ROW><id>12778266</id><snippet>k</snippet></ROW><ROW><id>12778617</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>12778751</id><snippet>xmlns:prefix="URI"
</snippet></ROW><ROW><id>12778751</id><snippet>&lt;root&gt;
    &lt;h:table xmlns:h="http://bluejson.com/W3C/"&gt;
        &lt;h:tr&gt;
            &lt;h:td&gt;JSON&lt;/h:td&gt;
            &lt;h:td&gt;JavaScript&lt;/h:td&gt;
            &lt;h:td&gt;Python&lt;/h:td&gt;
        &lt;/h:tr&gt;
    &lt;/h:table&gt;

    &lt;f:table xmlns:f="http://bluejson.com/W3C/"&gt;
        &lt;f:name&gt;My Study Room&lt;/f:name&gt;
        &lt;f:width&gt;800&lt;/f:width&gt;
        &lt;f:height&gt;420&lt;/f:height&gt;
        &lt;f:length&gt;1120&lt;/f:length&gt;
    &lt;/f:table&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>12778751</id><snippet>&lt;root xmlns:h="http://bluejson.com/W3C/" xmlns:f="http://bluejson.com/W3C/"&gt;
    &lt;h:table&gt;
        &lt;h:tr&gt;
            &lt;h:td&gt;JSON&lt;/h:td&gt;
            &lt;h:td&gt;JavaScript&lt;/h:td&gt;
            &lt;h:td&gt;Python&lt;/h:td&gt;
        &lt;/h:tr&gt;
    &lt;/h:table&gt;

    &lt;f:table&gt;
        &lt;f:name&gt;My Study Room&lt;/f:name&gt;
        &lt;f:width&gt;800&lt;/f:width&gt;
        &lt;f:height&gt;420&lt;/f:height&gt;
        &lt;f:length&gt;1120&lt;/f:length&gt;
    &lt;/f:table&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>12778751</id><snippet>import xml.dom.minidom

dom = xml.dom.minidom.parseString("""
&lt;root xmlns:media="http://media/" xmlns:yt="http://media/yt/"&gt;
    &lt;media:thumbnail url="http://i.ytimg.com/vi/k8J-72MmTGg/default.jpg" height="90" width="120" time="00:01:48.500" yt:name="default" /&gt;
    &lt;media:thumbnail url="http://i.ytimg.com/vi/k8J-72MmTGg/mqdefault.jpg" height="180" width="320" yt:name="mqdefault" /&gt;
    &lt;media:thumbnail url="http://i.ytimg.com/vi/k8J-72MmTGg/hqdefault.jpg" height="360" width="480" yt:name="hqdefault" /&gt;
&lt;/root&gt;""")

media_thumbnail = dom.getElementsByTagNameNS("http://media/","thumbnail")
print media_thumbnail[0].getAttribute("height")
print media_thumbnail[0].getAttribute("width")
print media_thumbnail[0].getAttribute("time")
print media_thumbnail[0].getAttributeNS("http://media/yt/","name")
media_thumbnail[0].setAttribute("unit","px")
media_thumbnail[0].setAttributeNS("http://media/yt/","value","1")
print dom.toxml()
</snippet></ROW><ROW><id>12778751</id><snippet>90
120
00:01:48.500
default
&lt;?xml version="1.0" ?&gt;&lt;root xmlns:media="http://media/" xmlns:yt="http://media/yt/"&gt;
    &lt;media:thumbnail height="90" time="00:01:48.500" unit="px" url="http://i.ytimg.com/vi/k8J-72MmTGg/default.jpg" value="1" width="120" yt:name="default"/&gt;
    &lt;media:thumbnail height="180" url="http://i.ytimg.com/vi/k8J-72MmTGg/mqdefault.jpg" width="320" yt:name="mqdefault"/&gt;
    &lt;media:thumbnail height="360" url="http://i.ytimg.com/vi/k8J-72MmTGg/hqdefault.jpg" width="480" yt:name="hqdefault"/&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>12779011</id><snippet>PREPARE</snippet></ROW><ROW><id>12779011</id><snippet>EXECUTE</snippet></ROW><ROW><id>12779011</id><snippet>some"table</snippet></ROW><ROW><id>12779011</id><snippet> 'SELECT * FROM "{0}"'.format('some""table');
</snippet></ROW><ROW><id>12779011</id><snippet>quote_ident</snippet></ROW><ROW><id>12779221</id><snippet>__eq__</snippet></ROW><ROW><id>12779221</id><snippet>class move(object):
    def __init__(self, number):
        self.number = number

    def __eq__(self, other):
        return self.number == other.number
</snippet></ROW><ROW><id>12779352</id><snippet>__setattr__</snippet></ROW><ROW><id>12779352</id><snippet>object.attribute =</snippet></ROW><ROW><id>12779352</id><snippet>Test.__dict__</snippet></ROW><ROW><id>12779352</id><snippet>def methoddecoratormarker(func):
    func._decorate_me = True
    return func

def realmethoddecorator(func):
    # do something with func. 
    # Note: it is still an unbound function here, not a method!
    return func

def classdecorator(klass):
    for name, item in klass.__dict__.iteritems():
        if getattr(item, '_decorate_me', False):
            klass.__dict__[name] = realmethoddecorator(item)
</snippet></ROW><ROW><id>12779352</id><snippet>sys._getframe()</snippet></ROW><ROW><id>12779352</id><snippet>import sys

def methoddecorator(func):
     callingframe = sys._getframe(1)
     classname = callingframe.f_code.co_name
</snippet></ROW><ROW><id>12779352</id><snippet>callingframe.f_locals</snippet></ROW><ROW><id>12779352</id><snippet>self</snippet></ROW><ROW><id>12779352</id><snippet>self</snippet></ROW><ROW><id>12779352</id><snippet>self.__class__</snippet></ROW><ROW><id>12779526</id><snippet>perl -ane '
    @names = split /,/, $F[-1];
    print +(join "\t", @F[0 .. 2], join "\n\t\t\t", map +(split /_/)[3], @names), "\n";
'
</snippet></ROW><ROW><id>12779526</id><snippet>-n</snippet></ROW><ROW><id>12779526</id><snippet>-a</snippet></ROW><ROW><id>12779526</id><snippet>,</snippet></ROW><ROW><id>12779526</id><snippet>perl -MText::Table -ane '
    BEGIN { $t = Text::Table-&gt;new }
    @names = split /,/, $F[-1];
    @n = map +(split /_/)[3], @names;
    my $f;
    $t-&gt;add($f++ ? (("") x 3)
                 : @F[0 .. 2], $_)
        for  @n ? @n : ("")
    }{
       print $t'
</snippet></ROW><ROW><id>12780019</id><snippet>lift</snippet></ROW><ROW><id>12780019</id><snippet>lower</snippet></ROW><ROW><id>12780019</id><snippet>lower</snippet></ROW><ROW><id>12780019</id><snippet>grid_remove</snippet></ROW><ROW><id>12780019</id><snippet>widget.grid()</snippet></ROW><ROW><id>12780019</id><snippet>pack_forget()</snippet></ROW><ROW><id>12780019</id><snippet>grid_forget()</snippet></ROW><ROW><id>12780657</id><snippet>Exception</snippet></ROW><ROW><id>12780657</id><snippet>minidom</snippet></ROW><ROW><id>12780657</id><snippet>DOMException</snippet></ROW><ROW><id>12780657</id><snippet>xml.dom</snippet></ROW><ROW><id>12780657</id><snippet>TypeError</snippet></ROW><ROW><id>12780657</id><snippet>Exception</snippet></ROW><ROW><id>12781071</id><snippet>mako.imports = 
    import logging 
    import some.other.module 
</snippet></ROW><ROW><id>12781362</id><snippet>find</snippet></ROW><ROW><id>12781362</id><snippet>sys</snippet></ROW><ROW><id>12781362</id><snippet>shutil</snippet></ROW><ROW><id>12781362</id><snippet>import os, sys

dir_to_flatten = sys.argv[1]

for dirpath, dirnames, filenames in os.walk(dir_to_flatten):
    for filename in filenames:
        try:
            os.rename(os.path.join(dirpath, filename), os.join(dir_to_flatten, filename))
        except OSError:
            print ("Could not move %s " % os.join(dirpath, filename))
</snippet></ROW><ROW><id>12781370</id><snippet>data=pyglet.image.load("redbrick.png").get_data()
texture_id = glGenTextures(1)
glBindTexture(GL_TEXTURE_2D, texture_id)
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, (image_width), (image_height), 0, GL_RGBA, GL_UNSIGNED_BYTE, data)
</snippet></ROW><ROW><id>12782226</id><snippet>lst.remove(...)</snippet></ROW><ROW><id>12782226</id><snippet>lst = [[1,2,3],["a","b","c"],[4,5,6]]
lst.remove([4,5,6])
print lst
</snippet></ROW><ROW><id>12782226</id><snippet>[[1, 2, 3], ['a', 'b', 'c']]
</snippet></ROW><ROW><id>12782231</id><snippet>'</snippet></ROW><ROW><id>12782231</id><snippet>'''</snippet></ROW><ROW><id>12782231</id><snippet>'single quotes'
"double quotes"
'''tripled single quotes'''
"""tripled double quotes"""
</snippet></ROW><ROW><id>12782231</id><snippet>"""Line one
line two
line three"""
</snippet></ROW><ROW><id>12782234</id><snippet>commit()</snippet></ROW><ROW><id>12782234</id><snippet>conn.begin()</snippet></ROW><ROW><id>12782234</id><snippet>commit(retaining=True)</snippet></ROW><ROW><id>12782236</id><snippet>numpy</snippet></ROW><ROW><id>12782478</id><snippet>heapify(x)</snippet></ROW><ROW><id>12782478</id><snippet>heapify()</snippet></ROW><ROW><id>12782478</id><snippet>mylist</snippet></ROW><ROW><id>12782478</id><snippet>&gt;&gt;&gt; a=[43,12,4,1,5,3,5,3,5,2,64,352,36]
&gt;&gt;&gt; import heapq
&gt;&gt;&gt; heapq.heapify(a)
&gt;&gt;&gt; a
[1, 2, 3, 3, 5, 4, 5, 12, 5, 43, 64, 352, 36]
</snippet></ROW><ROW><id>12782478</id><snippet>heapify()</snippet></ROW><ROW><id>12782478</id><snippet>myheap = heapq.HeapQ(a)  # This is not valid code.
</snippet></ROW><ROW><id>12782553</id><snippet>operate-and-get-next</snippet></ROW><ROW><id>12782553</id><snippet>Ctrl-o</snippet></ROW><ROW><id>12782553</id><snippet>readline</snippet></ROW><ROW><id>12782553</id><snippet>readline</snippet></ROW><ROW><id>12782553</id><snippet>operate-and-get-next</snippet></ROW><ROW><id>12782553</id><snippet>readline</snippet></ROW><ROW><id>12782760</id><snippet>WSGIDaemonProcess</snippet></ROW><ROW><id>12782760</id><snippet>WSGIProcessGroup %{GLOBAL}</snippet></ROW><ROW><id>12782760</id><snippet>WSGIDaemonProcess &lt;name&gt; [options]</snippet></ROW><ROW><id>12782760</id><snippet>WSGIProcessGroup &lt;name&gt;</snippet></ROW><ROW><id>12782760</id><snippet>WSGIDaemonProcess</snippet></ROW><ROW><id>12782760</id><snippet>WSGIProcessGroup &lt;name&gt;</snippet></ROW><ROW><id>12782760</id><snippet>WSGIProcessGroup %{GLOBAL}</snippet></ROW><ROW><id>12782760</id><snippet>wsgi.multithread</snippet></ROW><ROW><id>12782760</id><snippet>wsgi.multiprocess</snippet></ROW><ROW><id>12782760</id><snippet>WSGIDaemonProcess example processes=5 threads=1</snippet></ROW><ROW><id>12782760</id><snippet>multiprocessing.managers</snippet></ROW><ROW><id>12782760</id><snippet>BaseManager</snippet></ROW><ROW><id>12782760</id><snippet>m = multiprocessing.managers.BaseManager(address=('', 12345), authkey='secret')
m.get_server().serve_forever()
</snippet></ROW><ROW><id>12782760</id><snippet>connect</snippet></ROW><ROW><id>12782760</id><snippet>m = multiprocessing.managers.BaseManager(address=('', 12345), authkey='secret')
m.connect()
</snippet></ROW><ROW><id>12782760</id><snippet>m</snippet></ROW><ROW><id>12782760</id><snippet>counter</snippet></ROW><ROW><id>12782760</id><snippet>processes=5 threads=1</snippet></ROW><ROW><id>12782760</id><snippet>processes=1 threads=5</snippet></ROW><ROW><id>12782958</id><snippet>import pyPdf
</snippet></ROW><ROW><id>12782958</id><snippet>import PyPDF2
</snippet></ROW><ROW><id>12782958</id><snippet>import PyPDF2 as pyPdf
</snippet></ROW><ROW><id>12783384</id><snippet>import hashlib
secret, path, expire = 'segredo', '/p/files/top_secret.pdf', 1096891200
md5 = hashlib.md5(secret + path + str(expire)).digest().encode('base64').strip('\n=')
</snippet></ROW><ROW><id>12783443</id><snippet>__str__()</snippet></ROW><ROW><id>12783443</id><snippet>class MyCustomType(object):
    def __str__(self):
        return "My string is really costly to produce"
</snippet></ROW><ROW><id>12783443</id><snippet>__getattr__</snippet></ROW><ROW><id>12783443</id><snippet>property</snippet></ROW><ROW><id>12783443</id><snippet>__getitem__</snippet></ROW><ROW><id>12783523</id><snippet>def get_color():
    r = g = b = 0
    return r, g, b

red, green, blue = get_color()
</snippet></ROW><ROW><id>12783523</id><snippet>turtle.color(*get_color())
</snippet></ROW><ROW><id>12783523</id><snippet>get_color()</snippet></ROW><ROW><id>12783523</id><snippet>turtle.color</snippet></ROW><ROW><id>12783698</id><snippet>SimpleXMLRPCServer</snippet></ROW><ROW><id>12783698</id><snippet>class MyXMLRPCServer(SimpleXMLRPCServer):
    def __init__(self, addr):
        self.idle_timeout = 5.0 # In seconds
        self.idle_timer = Timer(self.idle_timeout, self.shutdown)
        self.idle_timer.start()
        SimpleXMLRPCServer.__init__(self, addr)

    def process_request(self, request, client_address):
        # Cancel the previous timer and create a new timer
        self.idle_timer.cancel()
        self.idle_timer = Timer(self.idle_timeout, self.shutdown)
        self.idle_timer.start()
        SimpleXMLRPCServer.process_request(self, request, client_address)
</snippet></ROW><ROW><id>12783698</id><snippet># Create server
server = MyXMLRPCServer(("localhost", 7789))
server.register_introspection_functions()
</snippet></ROW><ROW><id>12783729</id><snippet>any()</snippet></ROW><ROW><id>12783729</id><snippet>any(item.startswith('qwerty') for item in myList)
</snippet></ROW><ROW><id>12783886</id><snippet>e.xpath('.//input | .//select')
</snippet></ROW><ROW><id>12783886</id><snippet>e</snippet></ROW><ROW><id>12783886</id><snippet>//</snippet></ROW><ROW><id>12783962</id><snippet>new_balance</snippet></ROW><ROW><id>12783962</id><snippet>balance</snippet></ROW><ROW><id>12783962</id><snippet>while month &lt; 13:
    print "Month: " + str(month)
    print "Minimum monthly payment: " + str(round(minimum_monthly_payment, 2))
    balance = (balance - (balance*monthlyPaymentRate))*(1+(annualInterestRate/12))
    print "Remaining balance: " + str(round(balance, 2))
    month += 1
</snippet></ROW><ROW><id>12783962</id><snippet>Month: 1
Minimum monthly payment: 168.52
Remaining balance: 4111.89
Month: 2
Minimum monthly payment: 168.52
Remaining balance: 4013.2
Month: 3
Minimum monthly payment: 168.52
Remaining balance: 3916.89
Month: 4
Minimum monthly payment: 168.52
Remaining balance: 3822.88
Month: 5
Minimum monthly payment: 168.52
Remaining balance: 3731.13
Month: 6
Minimum monthly payment: 168.52
Remaining balance: 3641.58
Month: 7
Minimum monthly payment: 168.52
Remaining balance: 3554.19
Month: 8
Minimum monthly payment: 168.52
Remaining balance: 3468.89
Month: 9
Minimum monthly payment: 168.52
Remaining balance: 3385.63
Month: 10
Minimum monthly payment: 168.52
Remaining balance: 3304.38
Month: 11
Minimum monthly payment: 168.52
Remaining balance: 3225.07
Month: 12
Minimum monthly payment: 168.52
Remaining balance: 3147.67
</snippet></ROW><ROW><id>12784314</id><snippet>map</snippet></ROW><ROW><id>12784314</id><snippet>from itertools import imap
#map
&gt;&gt;&gt; timeit.timeit('x,y = map(int,line.split(" "))','from __main__ import line')
4.7857139110565186
&gt;&gt;&gt; timeit.timeit('x,y = map(int,line.split())','from __main__ import line')
4.5680718421936035
#list comprehension
&gt;&gt;&gt; timeit.timeit('x,y = [int(x) for x in line.split(" ")]','from __main__ import line')
4.3816750049591064
&gt;&gt;&gt; timeit.timeit('x,y = [int(x) for x in line.split()]','from __main__ import line')
4.3246541023254395
#itertools.imap
&gt;&gt;&gt; timeit.timeit('x,y = imap(int,line.split(" "))','from __main__ import line,imap')
4.431504011154175
&gt;&gt;&gt; timeit.timeit('x,y = imap(int,line.split())','from __main__ import line,imap')
4.3257410526275635
#generator expression
&gt;&gt;&gt; timeit.timeit('x,y = (int(x) for x in line.split(" "))','from __main__ import line')
4.897794961929321
&gt;&gt;&gt; timeit.timeit('x,y = (int(x) for x in line.split())','from __main__ import line')
4.732620000839233
</snippet></ROW><ROW><id>12784314</id><snippet>split()</snippet></ROW><ROW><id>12784314</id><snippet>split(" ")</snippet></ROW><ROW><id>12784314</id><snippet>ord</snippet></ROW><ROW><id>12784314</id><snippet>&gt;&gt;&gt;timeit.timeit('x,y = [ord(x)-48 for x in line.split(" ")]','from __main__ import line')
1.377655029296875
&gt;&gt;&gt; timeit.timeit('x,y = [ord(x)-48 for x in line.split()]','from __main__ import line')
1.3243558406829834
</snippet></ROW><ROW><id>12784314</id><snippet>sys.stdin</snippet></ROW><ROW><id>12784314</id><snippet>from sys import stdin
for line in sys.stdin:
    x,y = [ord(x)-48 for x in line.split()]
</snippet></ROW><ROW><id>12784388</id><snippet>def activate():
    global x1, y1
    if(ultrasonic.get_sample() &lt; 10):
        both.turn(power=-70, tacho_units=400, brake=False)
    bx, by = get_ballxy()
    rx, ry, a = get_robotxya()

    if sqrt((x1-bx)*(x1-bx)+(y1-by)*(y1-by)) &lt;= 4: #This is the distance parameter, change at will
        turn_to(brick, bx, by, rx, ry, a)
        move_to(brick, bx, by, rx, ry)
        kickBall(brick, by, ry)

    x1, y1 = bx, by

Thread(target=update_coordinates).start()
connect()
x1, y1 = 0, 0
update_coordinates()
while True:
    activate()
</snippet></ROW><ROW><id>12784431</id><snippet>$ cofo some arguments &amp;
</snippet></ROW><ROW><id>12784621</id><snippet>urls = ( '/', 'index' )
</snippet></ROW><ROW><id>12784621</id><snippet>/</snippet></ROW><ROW><id>12784621</id><snippet>index</snippet></ROW><ROW><id>12784621</id><snippet>import web

urls = (
    '/', 'index'
)

class index:
    def GET(self):
        return "Hello, world!"

if __name__ == "__main__":
    app = web.application(urls, globals())
    app.run()
</snippet></ROW><ROW><id>12784651</id><snippet>_file = re.sub(r'BEGIN COPYRIGHT[\w\s]*?END COPYRIGHT',_copyright, _file)
</snippet></ROW><ROW><id>12784651</id><snippet>[\w\s]*</snippet></ROW><ROW><id>12784651</id><snippet>END COPYRIGHT/BEGIN COPYRIGHT</snippet></ROW><ROW><id>12784651</id><snippet>_file = re.sub(r'''(?x)BEGIN COPYRIGHT
                   (?:(?!(?:END|BEGIN) COPYRIGHT)[\w\s])*
                   END COPYRIGHT''',_copyright, _file)
</snippet></ROW><ROW><id>12784651</id><snippet>[\w\s]</snippet></ROW><ROW><id>12784651</id><snippet>END COPYRIGHT</snippet></ROW><ROW><id>12784651</id><snippet>BEGIN COPYRIGHT</snippet></ROW><ROW><id>12784651</id><snippet>END COPYRIGHT</snippet></ROW><ROW><id>12785107</id><snippet>expires_at</snippet></ROW><ROW><id>12785107</id><snippet>Sun, 02 Dec 2012 10:54:44 +0000</snippet></ROW><ROW><id>12785107</id><snippet>issued_at</snippet></ROW><ROW><id>12785107</id><snippet>Wed, 03 Oct 2012 10:54:44 +0000</snippet></ROW><ROW><id>12785153</id><snippet>$HOME/scikit_learn_data</snippet></ROW><ROW><id>12785279</id><snippet>def index():  
    return "Python works!"

def command(command):  
    return "this is a command %s!" %command
</snippet></ROW><ROW><id>12785389</id><snippet>if nCatSeq not in potBasin:
    potBasin[nCatSeq] = (nBasinSeq,)
else:
    if nBasinSeq not in potBasin[nCatSeq]:
        potBasin[nCatSeq] = potBasin[nCatSeq] + (nBasinSeq,)
</snippet></ROW><ROW><id>12785389</id><snippet>(('VUVV', 'DDRV'), 'DDVG')
# you will get
('VUVV', 'DDRV', 'DDVG') # == ('VUVV', 'DDRV')+ ('DDVG',)
</snippet></ROW><ROW><id>12785406</id><snippet>jug status</snippet></ROW><ROW><id>12785406</id><snippet>jug execute</snippet></ROW><ROW><id>12785719</id><snippet>def cuts(s,i): 
   return [ s[a:b] for a in range(i+1) for b in range(i+1,len(s)+1)]
</snippet></ROW><ROW><id>12785719</id><snippet>s</snippet></ROW><ROW><id>12785719</id><snippet>i</snippet></ROW><ROW><id>12785719</id><snippet>s</snippet></ROW><ROW><id>12785719</id><snippet>&gt;&gt;&gt; cuts('XCXX', 1)
['XC', 'XCX', 'XCXX', 'C', 'CX', 'CXX']
</snippet></ROW><ROW><id>12785854</id><snippet>sys.modules</snippet></ROW><ROW><id>12785854</id><snippet>_ref, sys.modules[__name__] = sys.modules[__name__], MyModule('wat')
</snippet></ROW><ROW><id>12785854</id><snippet>types.ModuleType</snippet></ROW><ROW><id>12785854</id><snippet>sys.modules[]</snippet></ROW><ROW><id>12785854</id><snippet>sys.modules</snippet></ROW><ROW><id>12785919</id><snippet>from DFA import DFA

a = DFA(states, alphabet, delta(states, alphabet), start, accepts)
</snippet></ROW><ROW><id>12785919</id><snippet>__xx__</snippet></ROW><ROW><id>12785951</id><snippet>for node in entry:
    video_title = node.getElementsByTagName('title')[0].firstChild.nodeValue
    print video_title
</snippet></ROW><ROW><id>12786141</id><snippet>*args</snippet></ROW><ROW><id>12786141</id><snippet>&gt;&gt;&gt; def foo(bar, baz, spam):
...     print bar, baz, spam
...
&gt;&gt;&gt; arguments = [1, 2, 3]
&gt;&gt;&gt; foo(*arguments)
1, 2, 3
</snippet></ROW><ROW><id>12786141</id><snippet>*</snippet></ROW><ROW><id>12786141</id><snippet>func1(*func2(...))
</snippet></ROW><ROW><id>12786141</id><snippet>**</snippet></ROW><ROW><id>12786238</id><snippet>Service foo crashed unexpectedly</snippet></ROW><ROW><id>12786238</id><snippet>Service %s crashed unexpectedly</snippet></ROW><ROW><id>12786238</id><snippet>foo</snippet></ROW><ROW><id>12786238</id><snippet>gettext</snippet></ROW><ROW><id>12786238</id><snippet>"%s"</snippet></ROW><ROW><id>12786238</id><snippet>win32service.pyd</snippet></ROW><ROW><id>12786238</id><snippet>win32service.pyd</snippet></ROW><ROW><id>12786238</id><snippet>win32service.pyd</snippet></ROW><ROW><id>12786238</id><snippet>def __init__(self, appname, dllname=None, logtype="Application"):
    logging.Handler.__init__(self)
    try:
        import win32evtlogutil, win32evtlog
        self.appname = appname
        self._welu = win32evtlogutil
        if not dllname:
            dllname = os.path.split(self._welu.__file__)
            dllname = os.path.split(dllname[0])
            dllname = os.path.join(dllname[0], r'win32service.pyd')
</snippet></ROW><ROW><id>12786238</id><snippet>dllname</snippet></ROW><ROW><id>12786238</id><snippet>os.path.dirname(__file__)</snippet></ROW><ROW><id>12786238</id><snippet>if getattr(sys, 'frozen', False):
    dllname = None
elif __file__:
    dllname = os.path.dirname(__file__)

ntl = logging.handlers.NTEventLogHandler("Python Logging Test", dllname=dllname)
</snippet></ROW><ROW><id>12786672</id><snippet>python -tt script.py
</snippet></ROW><ROW><id>12786904</id><snippet>index = self.list.GetFirstSelected()
value = "      %s: %s\n" % (self.list.GetItemText(index), self.getColumnText(index, 1)))
</snippet></ROW><ROW><id>12787082</id><snippet>__</snippet></ROW><ROW><id>12787203</id><snippet>inspect.getframeinfo</snippet></ROW><ROW><id>12787203</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; def a():
...   return inspect.currentframe()
... 

&gt;&gt;&gt; inspect.getframeinfo(a())
Traceback(filename='&lt;stdin&gt;', lineno=2, function='a', code_context=None, index=None)
&gt;&gt;&gt; b = inspect.getframeinfo(a())
&gt;&gt;&gt; b.function
'a'
</snippet></ROW><ROW><id>12787203</id><snippet>&gt;&gt;&gt; import gc
&gt;&gt;&gt; from types import FunctionType
&gt;&gt;&gt; def a(): pass
... 
&gt;&gt;&gt; code = a.__code__

&gt;&gt;&gt; [obj for  obj in  gc.get_referrers(code) if isinstance(obj, FunctionType)  ][0]
&lt;function a at 0x7f1ef4484500&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12787203</id><snippet>__code__</snippet></ROW><ROW><id>12787203</id><snippet>func_code</snippet></ROW><ROW><id>12787676</id><snippet>transpose</snippet></ROW><ROW><id>12787676</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>12787780</id><snippet>argsort</snippet></ROW><ROW><id>12787780</id><snippet>def f(a,N):
    return np.argsort(a)[::-1][:N]
</snippet></ROW><ROW><id>12788104</id><snippet>x = [1,2,3,4,5]
for i in xrange(len(x)):
    for j, xi in enumerate(x):
        if i == j:
            print xi,
        else:
            print -xi,
    print
</snippet></ROW><ROW><id>12788237</id><snippet>parent</snippet></ROW><ROW><id>12788284</id><snippet>json.loads</snippet></ROW><ROW><id>12788284</id><snippet>['key']</snippet></ROW><ROW><id>12788284</id><snippet>resp_str = {
  "name" : "ns1:timeSeriesResponseType",
  "declaredType" : "org.cuahsi.waterml.TimeSeriesResponseType",
  "scope" : "javax.xml.bind.JAXBElement$GlobalScope",
  "value" : {
    "queryInfo" : {
      "creationTime" : 1349724919000,
      "queryURL" : "http://waterservices.usgs.gov/nwis/iv/",
      "criteria" : {
        "locationParam" : "[ALL:103232434]",
        "variableParam" : "[00060, 00065]"
      },
      "note" : [ {
        "value" : "[ALL:103232434]",
        "title" : "filter:sites"
      }, {
        "value" : "[mode=LATEST, modifiedSince=null]",
        "title" : "filter:timeRange"
      }, {
        "value" : "sdas01",
        "title" : "server"
      } ]
    }
  },
  "nil" : false,
  "globalScope" : true,
  "typeSubstituted" : false
}
</snippet></ROW><ROW><id>12788284</id><snippet>resp_dict = json.loads(resp_str)

resp_dict['name'] # "ns1:timeSeriesResponseType"

resp_dict['value']['queryInfo']['creationTime'] # 1349724919000
</snippet></ROW><ROW><id>12788285</id><snippet>image = numpy.asarray(Image.open('pic.jpg'))
</snippet></ROW><ROW><id>12788285</id><snippet>lists = numpy.split(image)
</snippet></ROW><ROW><id>12788388</id><snippet>su</snippet></ROW><ROW><id>12788388</id><snippet>man 7 pty</snippet></ROW><ROW><id>12788388</id><snippet>pty.openpty</snippet></ROW><ROW><id>12788388</id><snippet>su</snippet></ROW><ROW><id>12788826</id><snippet>if</snippet></ROW><ROW><id>12788826</id><snippet>if root[0][0].tag != 'Node':
    print("not equal")
</snippet></ROW><ROW><id>12788920</id><snippet>'String ok' if value == 'ok' else 'String nok'
</snippet></ROW><ROW><id>12789148</id><snippet>first_list = ['foo','bar','baz']
second_list = [x+y for x,y in zip(first_list,'dsy')]
</snippet></ROW><ROW><id>12789304</id><snippet>import pygtk
pygtk.require('2.0')
import gtk

def clicked(selection):

    global selection_signal

    liststores, listpaths = selection.get_selected_rows()
    for selected_row in xrange(len(listpaths)):
        #The 1 looks for the 'B' row
        if listpaths[selected_row][0] == 1:
            #Blocking the handler so that the reverting doesn't invoke a callback
            selection.handler_block(selection_signal)
            selection.unselect_path(listpaths[selected_row])
            selection.handler_unblock(selection_signal)


w = gtk.Window()
treemodel = gtk.ListStore(str)
for r in ('A', 'B', 'C'):
    treemodel.append([r])

treeview = gtk.TreeView(treemodel)
w.add(treeview)
tv_cell = gtk.CellRendererText()
tv_column = gtk.TreeViewColumn("Header", tv_cell, text=0)
treeview.append_column(tv_column)
selection = treeview.get_selection()
selection_signal = selection.connect("changed", clicked)
selection.set_mode(gtk.SELECTION_MULTIPLE)
w.show_all()
</snippet></ROW><ROW><id>12789542</id><snippet>EVT_NOTEBOOK_PAGE_CHANGED</snippet></ROW><ROW><id>12789542</id><snippet>    nb.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.some_method)
</snippet></ROW><ROW><id>12789542</id><snippet>    nb.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, some_function)
</snippet></ROW><ROW><id>12789542</id><snippet>some_function</snippet></ROW><ROW><id>12789542</id><snippet>some_method</snippet></ROW><ROW><id>12789542</id><snippet>self</snippet></ROW><ROW><id>12789847</id><snippet>set(thingList1) &amp; set(thingList2) &amp; set(thingList3)
</snippet></ROW><ROW><id>12790013</id><snippet>from igraph import *</snippet></ROW><ROW><id>12790013</id><snippet>import igraph</snippet></ROW><ROW><id>12790013</id><snippet>import igraph</snippet></ROW><ROW><id>12790013</id><snippet>igraph.Graph(1)</snippet></ROW><ROW><id>12790013</id><snippet>Graph</snippet></ROW><ROW><id>12790013</id><snippet>igraph</snippet></ROW><ROW><id>12790013</id><snippet>from igraph import *</snippet></ROW><ROW><id>12790013</id><snippet>Graph(1)</snippet></ROW><ROW><id>12790013</id><snippet>igraph</snippet></ROW><ROW><id>12790232</id><snippet>class Event(db.Model):
     ...

class ActiveEventManager(models.Manager):
    def get_query_set(self):
        return super(ActiveEventManager, self).get_query_set().filter(active=True)

class ActiveEvent(Event):
    class Meta:
        proxy = True

    objects = ActiveEventManager()

class ArchiveEventManager(models.Manager):
    def get_query_set(self):
        return super(ArchiveEventManager, self).get_query_set().filter(active=False)


class ArchiveEvent(Event):
    class Meta:
        proxy = True

    objects = ArchiveEventManager()
</snippet></ROW><ROW><id>12790232</id><snippet>ModelAdmin.queryset</snippet></ROW><ROW><id>12790232</id><snippet>class EventAdmin(admin.ModelAdmin):
    # ModelAdmin config

admin.site.register(ActiveEvent, EventAdmin)
admin.site.register(ArchiveEvent, EventAdmin)
</snippet></ROW><ROW><id>12790232</id><snippet>queryset = super(EventArchiveAdmin, self).queryset(request)
</snippet></ROW><ROW><id>12790232</id><snippet>super()</snippet></ROW><ROW><id>12790270</id><snippet>request.post_vars
</snippet></ROW><ROW><id>12790270</id><snippet>request.vars</snippet></ROW><ROW><id>12790299</id><snippet>currentid</snippet></ROW><ROW><id>12790299</id><snippet>del connections[currentid]
</snippet></ROW><ROW><id>12790299</id><snippet>currentid</snippet></ROW><ROW><id>12790299</id><snippet>del connections[self.currentid]
</snippet></ROW><ROW><id>12790299</id><snippet>open</snippet></ROW><ROW><id>12790299</id><snippet>currentid = global_counter
</snippet></ROW><ROW><id>12790299</id><snippet>currentid</snippet></ROW><ROW><id>12790299</id><snippet>SocketHandler</snippet></ROW><ROW><id>12790299</id><snippet>global</snippet></ROW><ROW><id>12790299</id><snippet>global</snippet></ROW><ROW><id>12790299</id><snippet>open</snippet></ROW><ROW><id>12790299</id><snippet>currentid</snippet></ROW><ROW><id>12790299</id><snippet>open</snippet></ROW><ROW><id>12790299</id><snippet>SocketHandler</snippet></ROW><ROW><id>12790299</id><snippet>currentid</snippet></ROW><ROW><id>12790299</id><snippet>currentid = 0</snippet></ROW><ROW><id>12790299</id><snippet>SocketHandler</snippet></ROW><ROW><id>12790299</id><snippet>currentid</snippet></ROW><ROW><id>12790299</id><snippet>SocketHandler</snippet></ROW><ROW><id>12790299</id><snippet>currentid</snippet></ROW><ROW><id>12790299</id><snippet>def open(self):</snippet></ROW><ROW><id>12790299</id><snippet>open</snippet></ROW><ROW><id>12790299</id><snippet>self.currentid</snippet></ROW><ROW><id>12790299</id><snippet>on_close</snippet></ROW><ROW><id>12790299</id><snippet>currentid</snippet></ROW><ROW><id>12790299</id><snippet>self</snippet></ROW><ROW><id>12790299</id><snippet>self</snippet></ROW><ROW><id>12790299</id><snippet>SocketHandler</snippet></ROW><ROW><id>12790299</id><snippet>currentid</snippet></ROW><ROW><id>12790299</id><snippet>self.currentid</snippet></ROW><ROW><id>12790299</id><snippet>0</snippet></ROW><ROW><id>12790299</id><snippet>open</snippet></ROW><ROW><id>12790299</id><snippet>SocketHandler</snippet></ROW><ROW><id>12790299</id><snippet>currentid</snippet></ROW><ROW><id>12790299</id><snippet>SocketHandler</snippet></ROW><ROW><id>12790299</id><snippet>open</snippet></ROW><ROW><id>12790299</id><snippet>self.currentid = global_counter
</snippet></ROW><ROW><id>12790299</id><snippet>currentid</snippet></ROW><ROW><id>12790299</id><snippet>self</snippet></ROW><ROW><id>12790299</id><snippet>currentid</snippet></ROW><ROW><id>12790299</id><snippet>self.currentid</snippet></ROW><ROW><id>12790393</id><snippet># Create a lookup structure for words
word_dictionary = dict((entry[0], entry) for entry in tuples)

findings = []
word_re = re.compile(r'\b\S+\b') # only need to create the regexp once
for sentence in data:
    for word in word_re.findall(sentence): # Check every word in the sentence
        if word in word_dictionary: # A match was found
            entry = word_dictionary[word]
            findings.append([sentence, word, entry[1], entry[2]])
</snippet></ROW><ROW><id>12790408</id><snippet>class Track:
    def __init__(self, artist, title, album=None):
        self._artist = str(artist)
        self._title = str(title)
        self._album = album

    def __str__(self):
        return self.artist + " " + self.title + " " + self.album
    #example for artist
    @property
    def artist(self):
        return self._artist
    @artist.setter
    def artist(self, artist):
        if artist != type("string"):#ensure that value is of string type.
            raise ValueError
        else:
            self._artist = artist
    #this way you could properly make setters and getter for your attributes
    #same ofr the other stuff

Track = Track("Andy", "Me", "Self named")
</snippet></ROW><ROW><id>12790554</id><snippet>^</snippet></ROW><ROW><id>12790554</id><snippet>pattern = r'^class=(.*)'
</snippet></ROW><ROW><id>12790554</id><snippet>pattern = r'\bclass=(.*)'
</snippet></ROW><ROW><id>12790772</id><snippet>In [112]: line="ptk=ptk_first" 

In [113]: dict([line.split("=")])
Out[113]: {'ptk': 'ptk_first'}
</snippet></ROW><ROW><id>12790772</id><snippet>for line in lines:
    if re.findall(pattern, line):
        token = dict([line.split("=")])
        print token
</snippet></ROW><ROW><id>12790786</id><snippet>x = FormSet.GetFieldString(CurrentForm, “SUM_VALUE_DATE”)
y = FormSet.GetFieldString(CurrentForm, “ORG_APPRAISAL_DATE”)

if x == “N/A” or FormSet.GetDaySpan(x, y) == 0:
            Rule.Violated = False
else:
            Rule.Violated = True
</snippet></ROW><ROW><id>12790803</id><snippet>D:\Python27\python.exe D:\Python27\search\file.py -a searchFunction=dfs</snippet></ROW><ROW><id>12790837</id><snippet>db.Model</snippet></ROW><ROW><id>12790837</id><snippet>ModelBase</snippet></ROW><ROW><id>12790837</id><snippet>title=models.CharField</snippet></ROW><ROW><id>12790837</id><snippet>Blog._meta.get_field('title') # models.CharField instance
</snippet></ROW><ROW><id>12790928</id><snippet>query ="SELECT COUNT(*) from `%s`" %table
cursor.execute(query)             #execute query separately
res=cursor.fetchone()
total_rows=res[0]      #total rows
</snippet></ROW><ROW><id>12790989</id><snippet>[(i,j) for i in range(len(rows)-2,-1,-1) for (j) in range(i+1)]
</snippet></ROW><ROW><id>12790989</id><snippet>result = []
# from len(rows)-2 to 0, decrementing by one each time
for i in range(len(rows)-2,-1,-1):
       # from 0 to i        
    for j in range(i+1):
       result.append((i, j))
</snippet></ROW><ROW><id>12791046</id><snippet>itertools.islice()</snippet></ROW><ROW><id>12791046</id><snippet>with open('data.txt') as f:
    lines=[]
    while True:
        line=list(islice(f,10)) #islice returns an iterator ,so you convert it to list here.
        if line:                     
            #do something with current set of &lt;=10 lines here
            lines.append(line)       # may be store it 
        else:
            break
    print lines    
</snippet></ROW><ROW><id>12791056</id><snippet>os.path.dirname()</snippet></ROW><ROW><id>12791056</id><snippet>__file__</snippet></ROW><ROW><id>12791056</id><snippet>#!/usr/bin/python

import os  # We need this module

# Get path of the current dir, then use it to create paths:
CURRENT_DIR = os.path.dirname(__file__)
file_path = os.path.join(CURRENT_DIR, 'test.txt')

# Then work using the absolute paths:
f = open(file_path,'w')
f.write('testing the script')
</snippet></ROW><ROW><id>12791490</id><snippet>set difference</snippet></ROW><ROW><id>12791490</id><snippet>import string
x=raw_input()
not_found=set(string.ascii_lowercase) - set("".join(x.split()))
print (list(not_found))
</snippet></ROW><ROW><id>12791490</id><snippet>&gt;&gt;&gt; 
the quick brown fox
['a', 'd', 'g', 'j', 'm', 'l', 'p', 's', 'v', 'y', 'z']
</snippet></ROW><ROW><id>12791510</id><snippet>[x]*n</snippet></ROW><ROW><id>12791510</id><snippet>n</snippet></ROW><ROW><id>12791510</id><snippet>x</snippet></ROW><ROW><id>12791510</id><snippet>n</snippet></ROW><ROW><id>12791510</id><snippet>x = [[] for i in range(3)]
</snippet></ROW><ROW><id>12791510</id><snippet>[]</snippet></ROW><ROW><id>12791510</id><snippet>[[]]*n</snippet></ROW><ROW><id>12791510</id><snippet>l = []
x = []
for i in range(n):
    x.append(l)
</snippet></ROW><ROW><id>12791510</id><snippet>[[] for i in range(3)]</snippet></ROW><ROW><id>12791510</id><snippet>x = []
for i in range(n):
    x.append([])   # appending a new list!
</snippet></ROW><ROW><id>12791510</id><snippet>In [20]: x = [[]] * 4

In [21]: [id(i) for i in x]
Out[21]: [164363948, 164363948, 164363948, 164363948] # same id()'s for each list,i.e same object


In [22]: x=[[] for i in range(4)]

In [23]: [id(i) for i in x]
Out[23]: [164382060, 164364140, 164363628, 164381292] #different id(), i.e unique objects this time
</snippet></ROW><ROW><id>12791862</id><snippet>&gt;&gt;&gt; aa = (d3 for dd in (d for _,d in dummy.iteritems()) for d3 in dd)
&gt;&gt;&gt; next(aa)
1
&gt;&gt;&gt; next(aa)
2
&gt;&gt;&gt; next(aa)
3
&gt;&gt;&gt; next(aa)
2
&gt;&gt;&gt; next(aa)
3
&gt;&gt;&gt; next(aa)
4
&gt;&gt;&gt; next(aa)
3
&gt;&gt;&gt; next(aa)
4
&gt;&gt;&gt; next(aa)
5
&gt;&gt;&gt; next(aa)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</snippet></ROW><ROW><id>12791922</id><snippet>for i in ZODIAC</snippet></ROW><ROW><id>12791922</id><snippet>i</snippet></ROW><ROW><id>12791922</id><snippet>ZODIAC[i]</snippet></ROW><ROW><id>12791922</id><snippet>i</snippet></ROW><ROW><id>12791922</id><snippet>i[0]</snippet></ROW><ROW><id>12791922</id><snippet>i</snippet></ROW><ROW><id>12791922</id><snippet>ZODIAC[i]</snippet></ROW><ROW><id>12791922</id><snippet>for i in range(len(ZODIAC))</snippet></ROW><ROW><id>12791922</id><snippet>def getChineseZodiac(year):
    index = (year - ZODIAC[0][0]) % 12
    return ZODIAC[index]       # or ZODIAC[index][1], depending on what you want
</snippet></ROW><ROW><id>12791957</id><snippet>print sorted(student_tuples, key=lambda student: student[2])
</snippet></ROW><ROW><id>12791957</id><snippet>def sort_key(student):
    return student[2]

print sorted(student_tuples, key=sort_key)
</snippet></ROW><ROW><id>12791957</id><snippet>lambda</snippet></ROW><ROW><id>12791957</id><snippet>def</snippet></ROW><ROW><id>12791957</id><snippet>lambda</snippet></ROW><ROW><id>12791957</id><snippet>key</snippet></ROW><ROW><id>12791957</id><snippet>sorted</snippet></ROW><ROW><id>12791957</id><snippet>key</snippet></ROW><ROW><id>12792002</id><snippet>os.stat()</snippet></ROW><ROW><id>12792002</id><snippet>|</snippet></ROW><ROW><id>12792002</id><snippet>os.chmod()</snippet></ROW><ROW><id>12792002</id><snippet>import os
import stat   
rendered = Template(template).render()
f = open('somefile', 'w')
f.write(rendered)
f.close()
st = os.stat('somefile')
os.chmod('somefile', st.st_mode | stat.S_IEXEC)
</snippet></ROW><ROW><id>12792334</id><snippet>guess = guess - (guess / 2)
</snippet></ROW><ROW><id>12792334</id><snippet>guess = (low_guess+high_guess)/2
</snippet></ROW><ROW><id>12792334</id><snippet>low_guess = guess
</snippet></ROW><ROW><id>12792334</id><snippet>high_guess = guess
</snippet></ROW><ROW><id>12792334</id><snippet>/</snippet></ROW><ROW><id>12792334</id><snippet>guess</snippet></ROW><ROW><id>12792491</id><snippet>sys.stdout.read</snippet></ROW><ROW><id>12792491</id><snippet>write</snippet></ROW><ROW><id>12792491</id><snippet>child_process.stdin.write("this goes to child")  #Popen(..., stdin=subprocess.PIPE)
</snippet></ROW><ROW><id>12792491</id><snippet>child_process = subprocess.Popen( ... , stdout=subprocess.PIPE)
child_process.stdout.read("This is the data that comes back")
</snippet></ROW><ROW><id>12792491</id><snippet>stdoutdata, stderrdata = child_process.communicate(stdindata)
</snippet></ROW><ROW><id>12792491</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>12792656</id><snippet>nsimplify</snippet></ROW><ROW><id>12792656</id><snippet>nsimplify</snippet></ROW><ROW><id>12792656</id><snippet>&gt;&gt;&gt; print nsimplify(0.5*x**2 - 3.333333*x, tolerance=0.001, rational=True)
x**2/2 - 3333333*x/1000000
</snippet></ROW><ROW><id>12793290</id><snippet>import easygui as eg
uservalue = eg.integerbox(msg="What is the max integer in the sequence, n?"
                  , title = "blah blah blah"
                  , default = 0
                  , lowerbound = 0
</snippet></ROW><ROW><id>12793290</id><snippet>msg ="What is your favorite flavor?"
title = "Ice Cream Survey"
choices = ["Vanilla", "Chocolate", "Strawberry", "Rocky Road"]
choice = choicebox(msg, title, choices)
</snippet></ROW><ROW><id>12793539</id><snippet>class URLParser(object):
    def __init__(self, regexp, ...):
        self.regexp = regexp
        ...

    def parse_urls(self, urls):
        # do your URL parsing thing
        # return parsed URLs

class SiteInstance(object):
    def __init__(self, ...):
        self.parsers = [
            URLParser('regexp1'),
            URLParser('regexp2'),
            ...
        ]

    def parse(self, ...):
        ...
        for parser in self.parsers:
            parser.parse_urls(...)
</snippet></ROW><ROW><id>12793626</id><snippet>__dict__</snippet></ROW><ROW><id>12793626</id><snippet>AttributeError</snippet></ROW><ROW><id>12793626</id><snippet>class Foo(object):
    def __init__(self, val):
        self._val = val
    @property
    def val(self):
        return self._val

class SubType(Foo):
    def __new__(cls, val):
        if val % 2:
            #random condition to change the property
            subtype = type('SubFoo', (SubType,),
                           {'val': property((lambda self: self._val + 1))})
                return object.__new__(subtype)
            else:
                return object.__new__(cls)
</snippet></ROW><ROW><id>12793626</id><snippet>&gt;&gt;&gt; d = SubType(3)  #property changed
&gt;&gt;&gt; d.val
4
&gt;&gt;&gt; f = SubType(2)  #same property as super class
&gt;&gt;&gt; f.val
2
</snippet></ROW><ROW><id>12793626</id><snippet>class Foo(object):
    def __init__(self, val):
        self._val = val
    def _compute_val(self):
        return self._val
    @property
    def val(self):
        return self._compute_val()

class SubFoo(Foo):
    def _compute_val(self):
        if self._val % 2:
                return self._val + 1
        else:
                return self._val
</snippet></ROW><ROW><id>12793626</id><snippet>&gt;&gt;&gt; d = SubFoo(3)
&gt;&gt;&gt; d.val
4
&gt;&gt;&gt; f = SubFoo(2)
&gt;&gt;&gt; f.val
2
</snippet></ROW><ROW><id>12793796</id><snippet>r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'</snippet></ROW><ROW><id>12793796</id><snippet>r'\d{2}/[a-zA-Z]{3}/\d{4}:\d{2}:\d{2}:\d{2} \+\d{4}'</snippet></ROW><ROW><id>12793796</id><snippet>r'(?&lt;=\[).+?(?=\])'</snippet></ROW><ROW><id>12793796</id><snippet>[]</snippet></ROW><ROW><id>12793796</id><snippet>[]</snippet></ROW><ROW><id>12793796</id><snippet>r'https?://.+?(?= HTTP)'</snippet></ROW><ROW><id>12793796</id><snippet>r'(?&lt;=")https?://.*?google\..*?(?=")'</snippet></ROW><ROW><id>12793796</id><snippet>r'(?&lt;=")Mozilla.+?(?=")'</snippet></ROW><ROW><id>12793810</id><snippet>try:
    with open(path, 'rb') as f:
        data = f.read()
        self.write(data)
    self.finish()
</snippet></ROW><ROW><id>12793810</id><snippet>StaticFileHandler</snippet></ROW><ROW><id>12793827</id><snippet>import functools
import operator

L = list('abcd')

def foo(indexable):
    return functools.partial(operator.__getitem__, indexable)

g = foo(L)

for i in xrange(len(L)):
    print g(i),
</snippet></ROW><ROW><id>12793827</id><snippet>def foo2(indexable):
    return indexable.__getitem__
</snippet></ROW><ROW><id>12793827</id><snippet>fastest to slowest *_test() function timings:
 10,000 elements, 1,000 timeit calls, best of 3

  foo2_test() : 1.46 (0.00 times slower)
lambda_test() : 4.15 (1.84 times slower)
   foo_test() : 4.28 (1.93 times slower)
</snippet></ROW><ROW><id>12793827</id><snippet>fastest to slowest *_test() function timings:
 10,000 elements, 1,000 timeit calls, best of 3

  foo2_test() : 13.03 (0.00 times slower)
   foo_test() : 14.70 (0.13 times slower)
lambda_test() : 16.25 (0.25 times slower)
</snippet></ROW><ROW><id>12793827</id><snippet>foo2()</snippet></ROW><ROW><id>12793827</id><snippet>import functools
import operator

import timeit
import types

N = 1000
R = 3
SZ = 10000
SUFFIX = '_test'
SUFFIX_LEN = len(SUFFIX)

def setup():
    import random
    global a_list
    a_list = [random.randrange(100) for _ in xrange(SZ)]

def lambda_test():
    global a_list
    f = lambda i: a_list[i]
    for i in xrange(len(a_list)): f(i)

def foo(indexable):
    return functools.partial(operator.__getitem__, indexable)

def foo_test():
    global a_list
    g = foo(a_list)
    for i in xrange(len(a_list)): g(i)

def foo2(indexable):
    return indexable.__getitem__

def foo2_test():
    global a_list
    g = foo2(a_list)
    for i in xrange(len(a_list)): g(i)

# find all the functions named *SUFFIX in the global namespace
funcs = tuple(value for id,value in globals().items()
            if id.endswith(SUFFIX) and type(value) is types.FunctionType)

# run the timing tests and collect results
timings = [(f.func_name[:-SUFFIX_LEN],
            min(timeit.repeat(f, setup=setup, repeat=R, number=N))
           ) for f in funcs]
timings.sort(key=lambda x: x[1])  # sort by speed (ironic use of lambda?)
fastest = timings[0][1]  # time fastest one took to run
longest = max(len(t[0]) for t in timings) # len of longest func name (w/o suffix)

print 'fastest to slowest *_test() function timings:\n' \
      ' {:,d} elements, {:,d} timeit calls, best of {:d}\n'.format(SZ, N, R)

def times_slower(speed, fastest):
    return speed/fastest - 1.0

for i in timings:
    print "{0:&gt;{width}}{suffix}() : {1:.2f} ({2:.2f} times slower)".format(
                i[0], i[1], times_slower(i[1], fastest), width=longest, suffix=SUFFIX)
</snippet></ROW><ROW><id>12793827</id><snippet>def setup():
    import random
    global a_list
    a_list = [random.randrange(100) for _ in xrange(SZ)]

def lambda_test():
    global a_list
    sorted(range(len(a_list)), key=lambda i:a_list[i])

def foo(indexable):
    return functools.partial(operator.__getitem__, indexable)

def foo_test():
    global a_list
    sorted(range(len(a_list)), key=foo(a_list))

def foo2(indexable):
    return indexable.__getitem__

def foo2_test():
    global a_list
    sorted(range(len(a_list)), key=foo2(a_list))
</snippet></ROW><ROW><id>12793991</id><snippet>path = []
for event, elem in ET.iterparse(file_path, events=("start", "end")):
    if event == 'start':
        path.append(elem.tag)
    elif event == 'end':
        # process the tag
        if elem.tag == 'name':
            if 'members' in path:
                print 'member'
            else:
                print 'nonmember'
        path.pop()
</snippet></ROW><ROW><id>12794167</id><snippet>' '</snippet></ROW><ROW><id>12794167</id><snippet>s = raw_input('Please type in your full name')
' '.join(reversed(s.split(' ')))
</snippet></ROW><ROW><id>12794230</id><snippet>django</snippet></ROW><ROW><id>12794230</id><snippet>flask</snippet></ROW><ROW><id>12794230</id><snippet>gunicorn</snippet></ROW><ROW><id>12794230</id><snippet>django</snippet></ROW><ROW><id>12794230</id><snippet>django</snippet></ROW><ROW><id>12794230</id><snippet># urls.py
...
url('/my/file/url', my_file_download_function),
...

# views.py
from django.shortcuts import redirect

def my_file_download_function(request):
    if request.GET.get('apikey', None) == CORRECT_API_KEY:
        return redirect('/real/URL/to/file')
    else:
        return HttpResponse(status=401)
</snippet></ROW><ROW><id>12794233</id><snippet>import subprocess

p = subprocess.Popen(r'start cmd /c C:\test.bat', shell=True)

p.wait()

print 'done'
</snippet></ROW><ROW><id>12794408</id><snippet>mylist = range(0,20+1,5)
f = open("test.txt", "w")
f.writelines(' '.join(map(str, mylist)))
f.close()
</snippet></ROW><ROW><id>12794668</id><snippet>url(r'^edit/(?P&lt;id&gt;\d+)$',
    'editSystemSetting',
    name='editSystemSetting'),
</snippet></ROW><ROW><id>12794700</id><snippet>%paste strvar
</snippet></ROW><ROW><id>12794700</id><snippet>strvar = '\n'.join(strvar)
</snippet></ROW><ROW><id>12794948</id><snippet>from itertools import product
result = [separator.join(map(str,x)) for x in product(*lists)]
</snippet></ROW><ROW><id>12794948</id><snippet>itertools.product</snippet></ROW><ROW><id>12794948</id><snippet>map</snippet></ROW><ROW><id>12794948</id><snippet>str</snippet></ROW><ROW><id>12795319</id><snippet>    pixelspace = reader.GetPixelSpacing()
    spacing = image.GetSpacing()

    vtk_data = image.GetPointData().GetScalars()

    numpy_data = numpy_support.vtk_to_numpy(vtk_data)

    numpy_data = numpy_data.reshape(dims[0], dims[1], dims[2])
    numpy_data = numpy_data.transpose(2,1,0)

    dims = numpy_data.shape

    dataImporter = vtkImageImport()
    dataImporter.SetDataScalarTypeToFloat() 
    dataImporter.SetNumberOfScalarComponents(1)
    dataImporter.SetDataExtent(0, dims[2]-1, 0, dims[1]-1, 0, dims[0]-1)
    dataImporter.SetWholeExtent(0, dims[2]-1, 0, dims[1]-1, 0, dims[0]-1)
    dataImporter.SetDataSpacing(spacing[0],spacing[1],spacing[2])
    dataImporter.CopyImportVoidPointer(numpy_data, numpy_data.nbytes)
</snippet></ROW><ROW><id>12795623</id><snippet>public boolean isElementPresent()
{
   try
   {
      set_the_implicit time to zero
      find_element_by_xpath()
      set_the_implicit time to your default time (say 30 sec)
      return true;
   }
   catch(Exception e)
   {
       return false;
   }
}
</snippet></ROW><ROW><id>12796041</id><snippet>ip_address[0]</snippet></ROW><ROW><id>12796041</id><snippet>id[0]</snippet></ROW><ROW><id>12796041</id><snippet>id</snippet></ROW><ROW><id>12796041</id><snippet>for server in Server.objects.only('ip_address', 'id').all():
    print 'Server ID: ' + str(server.id)
    print 'Server IP: ' + str(server.ip_address)

    command = ['ping -t 200 -c 1 ' + server.ip_address]
    ping = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)

    online = 1
    if "100% pocket loss" in ping.stdout.read():
        online = 0

    server.update(online=online)
</snippet></ROW><ROW><id>12796140</id><snippet>classmethod</snippet></ROW><ROW><id>12796140</id><snippet>class C</snippet></ROW><ROW><id>12796140</id><snippet>isinstance(&lt;the object&gt;, C)</snippet></ROW><ROW><id>12796140</id><snippet>class C:
    x = 1

    @classmethod
    def m(cls):
        return cls.x

class D(C):
    x = 2

print(C.m()) # 1
print(D.m()) # 2
</snippet></ROW><ROW><id>12796254</id><snippet>def basename(x):
    return x.split("/")[-1]

result = set(x for x in set(currList).union(set(processList)) if (basename(x) in [basename(y) for y in currList]) != (basename(x) in [basename(y) for y in processList]))
</snippet></ROW><ROW><id>12796254</id><snippet>currList=set(['pathA/file1', 'pathA/file2', 'pathB/file3'])
processList=set(['pathA/file1', 'pathA/file9', 'pathA/file3'])
</snippet></ROW><ROW><id>12796254</id><snippet>set(['pathA/file2', 'pathA/file9'])
</snippet></ROW><ROW><id>12796542</id><snippet>import calendar
cal = calendar.Calendar(0)
month = cal.monthdatescalendar(2010, 7)
lastweek = month[-1]
monday = lastweek[0]
print(monday)

2010-07-26
</snippet></ROW><ROW><id>12796767</id><snippet>mr.developer</snippet></ROW><ROW><id>12796767</id><snippet>mr.developer</snippet></ROW><ROW><id>12796767</id><snippet>mr.developer</snippet></ROW><ROW><id>12796767</id><snippet>[buildout]
extensions = mr.developer
auto-checkout = your.package.name

[sources]
your.package.name = git git@github.com:yourgitname/your.package.name.git
</snippet></ROW><ROW><id>12796767</id><snippet>mr.developer</snippet></ROW><ROW><id>12796767</id><snippet>your.package.name</snippet></ROW><ROW><id>12796767</id><snippet>src/</snippet></ROW><ROW><id>12796767</id><snippet>sources-dir</snippet></ROW><ROW><id>12796767</id><snippet>[buildout]
# ...
sources-dir = ${buildout:directory}/some-other/directory
</snippet></ROW><ROW><id>12797009</id><snippet>DeletionMixin</snippet></ROW><ROW><id>12797009</id><snippet>django.views.generic.edit.BaseDeleteView</snippet></ROW><ROW><id>12797009</id><snippet>DeleteView</snippet></ROW><ROW><id>12797009</id><snippet>DeletionMixin</snippet></ROW><ROW><id>12797009</id><snippet>class DeletionMixin(object):
    """
    A mixin providing the ability to delete objects
    """
    success_url = None

    def delete(self, request, *args, **kwargs):
        """
        Calls the delete() method on the fetched object and then
        redirects to the success URL.
        """
        self.object = self.get_object()
        self.object.delete()
        return HttpResponseRedirect(self.get_success_url())

    # Add support for browsers which only accept GET and POST for now.
    def post(self, *args, **kwargs):
        return self.delete(*args, **kwargs)

    def get_success_url(self):
        if self.success_url:
            return self.success_url
        else:
            raise ImproperlyConfigured(
                "No URL to redirect to. Provide a success_url.")
</snippet></ROW><ROW><id>12797009</id><snippet>get_object()</snippet></ROW><ROW><id>12797099</id><snippet>str(unichr(c))</snippet></ROW><ROW><id>12797099</id><snippet>chr(c)</snippet></ROW><ROW><id>12797099</id><snippet>chr(ord('b') + 1)
</snippet></ROW><ROW><id>12797173</id><snippet>csv</snippet></ROW><ROW><id>12797619</id><snippet>&gt;&gt; import django
&gt;&gt; import sys
&gt;&gt; sys.modules['django']
&lt;module 'django' from '/usr/local/lib/python2.7/dist-packages/django/__init__.pyc'&gt;
</snippet></ROW><ROW><id>12797778</id><snippet>In [4]: mat = [ [(4,4),(1,6)] , [(6,1),(2,2)] ]

In [6]: c,d=mat[0][0]    #here mat[0] is [(4,4),(1,6)], invoking [0] on this yields [4,4]

In [7]: c
Out[7]: 4

In [8]: d
Out[8]: 4


In [9]: a,b=mat[1][1]  #here mat[1] is [(6,1),(2,2)], invoking [1] on this yields [2,2]

In [10]: a
Out[10]: 2

In [11]: b
Out[11]: 2
</snippet></ROW><ROW><id>12798082</id><snippet>on_button_press()</snippet></ROW><ROW><id>12798413</id><snippet>@require_basic_auth
class UploadFile(tornado.web.RequestHandler):
    def put(self, params):
        path = calculate_path(params)
        with open(path, 'wb') as out:
            body = self.request.get_argument('data')
            out.write(bytes(body, 'utf8'))        
</snippet></ROW><ROW><id>12798577</id><snippet>^(?:abc|cba)(?:(?!.*(?:\[error\]|\[warn\]))|\s*(?:\[error\]|\[warn\])).*$
</snippet></ROW><ROW><id>12798577</id><snippet>^</snippet></ROW><ROW><id>12798577</id><snippet>$</snippet></ROW><ROW><id>12798577</id><snippet>abc</snippet></ROW><ROW><id>12798577</id><snippet>cba</snippet></ROW><ROW><id>12798577</id><snippet>[error]</snippet></ROW><ROW><id>12798577</id><snippet>[warn]</snippet></ROW><ROW><id>12798577</id><snippet>(?!.*(?:\[error\]|\[warn\]))</snippet></ROW><ROW><id>12798577</id><snippet>?:</snippet></ROW><ROW><id>12798577</id><snippet>[error]</snippet></ROW><ROW><id>12798577</id><snippet>[warn]</snippet></ROW><ROW><id>12798577</id><snippet>abc</snippet></ROW><ROW><id>12798577</id><snippet>cba</snippet></ROW><ROW><id>12798577</id><snippet>\s*(?:\[error\]|\[warn\])</snippet></ROW><ROW><id>12798577</id><snippet>\s*</snippet></ROW><ROW><id>12798577</id><snippet>\s+</snippet></ROW><ROW><id>12798577</id><snippet>abc[error]</snippet></ROW><ROW><id>12798577</id><snippet>.*</snippet></ROW><ROW><id>12798577</id><snippet>$</snippet></ROW><ROW><id>12798577</id><snippet>.*$</snippet></ROW><ROW><id>12798599</id><snippet>keys</snippet></ROW><ROW><id>12798599</id><snippet>In [288]: concatenated = concat([df,df], keys=['first', 'second'])

In [289]: print concatenated.T
   first      second    
       0   1       0   1
a      1   1       1   1
b     10  20      10  20
c     41  42      41  42

In [290]: print concatenated.T.to_dict().values()
[{'a': 1, 'c': 41, 'b': 10}, {'a': 1, 'c': 41, 'b': 10}, {'a': 1, 'c': 42, 'b': 20}, {'a': 1, 'c': 42, 'b': 20}]
</snippet></ROW><ROW><id>12798862</id><snippet>setTable</snippet></ROW><ROW><id>12798862</id><snippet>QSqlQuery</snippet></ROW><ROW><id>12798862</id><snippet>SQL</snippet></ROW><ROW><id>12798862</id><snippet>model = QSqlTableModel(db=your_db)
model.setTable("your_table")
...
query = QSqlQuery("SELECT column_name FROM information_schema.columns WHERE table_name='your_table'")
query.next()
print query.numRowsAffected() # print the number of fields
query.previous()
while query.next():
    print query.value(0).toString()  # print the field name
</snippet></ROW><ROW><id>12798862</id><snippet>COUNT</snippet></ROW><ROW><id>12798862</id><snippet>query = QSqlQuery("SELECT COUNT(*) FROM your_table")
query.next()
print query.value(0).toString()  # print the number of records
print model.rowCount()  # print 0 as the model has not been populated yet
</snippet></ROW><ROW><id>12798862</id><snippet>COUNT(1)</snippet></ROW><ROW><id>12798862</id><snippet>COUNT(*)</snippet></ROW><ROW><id>12798968</id><snippet>data = [ [255] * image.size[1] ] * image.size[0]
</snippet></ROW><ROW><id>12798968</id><snippet>image.size[1]</snippet></ROW><ROW><id>12798968</id><snippet>255</snippet></ROW><ROW><id>12798968</id><snippet>image.size[0]</snippet></ROW><ROW><id>12798968</id><snippet>a[1][1]</snippet></ROW><ROW><id>12798968</id><snippet>a[0][1]</snippet></ROW><ROW><id>12798968</id><snippet>a[2][1]</snippet></ROW><ROW><id>12798968</id><snippet>a[0]</snippet></ROW><ROW><id>12798968</id><snippet>a[1]</snippet></ROW><ROW><id>12798968</id><snippet>a[2]</snippet></ROW><ROW><id>12798968</id><snippet>...</snippet></ROW><ROW><id>12798968</id><snippet>a = [[255]*10]*10
a[1][1] = 77
print (a)
</snippet></ROW><ROW><id>12798968</id><snippet>a = [[255]*10 for _ in range(10)]
</snippet></ROW><ROW><id>12799077</id><snippet>x</snippet></ROW><ROW><id>12799077</id><snippet>t</snippet></ROW><ROW><id>12799077</id><snippet>y</snippet></ROW><ROW><id>12799077</id><snippet>x,y</snippet></ROW><ROW><id>12799077</id><snippet>L = [(x0,y0), (x1,y1), ...]
X = numpy.array(L).T
# Equivalently (but less generally):
# X = [[P[0] for P in L], [ P[1] for P in L ]]

t,X = enumerate(L) # here t[0]==0 and X[0]==(x0,x1,..), X[1]==(y0,y1,..)
# or to name in a more confusing manner but match the docs: x,y = enumerate(L)
</snippet></ROW><ROW><id>12799077</id><snippet>scipy.interpolate</snippet></ROW><ROW><id>12799077</id><snippet>f = scipy.interpolate.interp1d(t, X)
</snippet></ROW><ROW><id>12799077</id><snippet>(0,0)</snippet></ROW><ROW><id>12799077</id><snippet>(1,1)</snippet></ROW><ROW><id>12799077</id><snippet>f = interp1d((0,1), numpy.array([[0,0],[1,1]]).T )
#          (t0,t1)  numpy.array([[x0,y0],[[x1,y1]]).T
#          (t0,t1)              [[x0,x1],[[y0,y1]]
f(0.5) # array([ 0.5,  0.5])
</snippet></ROW><ROW><id>12799247</id><snippet>method</snippet></ROW><ROW><id>12799247</id><snippet>@route</snippet></ROW><ROW><id>12799247</id><snippet>@route('/down/&lt;filename:path&gt;', method='GET')
@route('/down/&lt;filename:path&gt;', method='POST')
def home(filename):
    pass
</snippet></ROW><ROW><id>12799337</id><snippet>wilcox.test(x, y)

    Wilcoxon rank sum test

data:  x and y 
W = 182, p-value = 9.971e-08
alternative hypothesis: true location shift is not equal to 0 
</snippet></ROW><ROW><id>12799337</id><snippet>&gt; wilcox.test(x, y, exact=FALSE, correct=TRUE)

    Wilcoxon rank sum test with continuity correction

data:  x and y 
W = 182, p-value = 1.125e-05
alternative hypothesis: true location shift is not equal to 0 
</snippet></ROW><ROW><id>12799337</id><snippet>&gt; (w0 &lt;- wilcox.test(x, y, exact=FALSE, correct=FALSE))

    Wilcoxon rank sum test

data:  x and y 
W = 182, p-value = 1.006e-05
alternative hypothesis: true location shift is not equal to 0 
</snippet></ROW><ROW><id>12799337</id><snippet>w0$p.value
[1] 1.005997e-05
</snippet></ROW><ROW><id>12799337</id><snippet>2*pnorm(4.415880433163923,lower.tail=FALSE)
[1] 1.005997e-05
</snippet></ROW><ROW><id>12799337</id><snippet>p=1e-7</snippet></ROW><ROW><id>12799337</id><snippet>p=1e-5</snippet></ROW><ROW><id>12799516</id><snippet>itemAt</snippet></ROW><ROW><id>12799516</id><snippet>    from PyQt4.QtGui import *
    ...
    for i in range(self.grid.count()):
        w = self.grid.itemAt(i).widget()
        print isinstance(w, QLineEdit)
</snippet></ROW><ROW><id>12799721</id><snippet>with lasfile.File(inFile, None, 'r') as f:
     # missing part
     points = [line.split(',')[:2] for line in lasfile]
</snippet></ROW><ROW><id>12799721</id><snippet>map()</snippet></ROW><ROW><id>12799721</id><snippet>points = [map(int, line.split(',')[:2]) for line in lasfile]
</snippet></ROW><ROW><id>12799721</id><snippet>map</snippet></ROW><ROW><id>12799721</id><snippet>points = [[int(i) for i in line.split(',')[:2]] for line in lasfile]
</snippet></ROW><ROW><id>12799721</id><snippet>[[x1, y1], [x2, y2], ...]
</snippet></ROW><ROW><id>12800053</id><snippet>lala</snippet></ROW><ROW><id>12800345</id><snippet>blokk = [[]] * 15</snippet></ROW><ROW><id>12800345</id><snippet>blokk = [[] for _ in range(15)]
</snippet></ROW><ROW><id>12800345</id><snippet>&gt;&gt;&gt; blokk = [[]]*15
&gt;&gt;&gt; blokk
[[], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
&gt;&gt;&gt; blokk[0].append(1)
&gt;&gt;&gt; blokk
[[1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]
&gt;&gt;&gt; blokk = [[] for _ in range(15)]
&gt;&gt;&gt; blokk
[[], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
&gt;&gt;&gt; blokk[0].append(1)
&gt;&gt;&gt; blokk
[[1], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
</snippet></ROW><ROW><id>12800579</id><snippet>INNER JOIN</snippet></ROW><ROW><id>12800579</id><snippet>table2 = ForeignKey('Table2', blank=True, null=True)
</snippet></ROW><ROW><id>12800659</id><snippet>CSV</snippet></ROW><ROW><id>12800659</id><snippet>DOC</snippet></ROW><ROW><id>12800659</id><snippet>CSV = 'UC013. MANTER ITEM DE NOTA FISCAL / NOTA DE SERVI\xc3\x87O / RECIBO'
DOC = 'UC013. MANTER ITEM DE NOTA FISCAL / NOTA DE SERVI\xc7O / RECIBO'
CSV = CSV.decode('utf-8')
DOC = DOC.decode('latin1')
print(CSV == DOC)    # True
</snippet></ROW><ROW><id>12800888</id><snippet>def to_file(d):
    return '\n'.join("%s %s" % (key, ' '.join(map(str, values))) for key, values in d.items())
</snippet></ROW><ROW><id>12800888</id><snippet>&gt;&gt;&gt; print to_file({'Sample_1': [1,2,3], 'Sample_2': [4,5,6]})
Sample_1 1 2 3
Sample_2 4 5 6
</snippet></ROW><ROW><id>12800888</id><snippet>import csv
with open('eggs.csv', 'wb') as csvfile:
    spamwriter = csv.writer(csvfile, delimiter=' ', quoting=csv.QUOTE_MINIMAL)
    for key, values in d.items():
        spamwriter.writerow([key] + values)
</snippet></ROW><ROW><id>12801255</id><snippet>cStringIO</snippet></ROW><ROW><id>12801950</id><snippet>class MyVector(object):
    x = 0
    y = 0
</snippet></ROW><ROW><id>12801950</id><snippet> fields = {'x':0, 'y':0}
 MyVector = type('MyVector', (object,), fields)
</snippet></ROW><ROW><id>12801950</id><snippet>fields</snippet></ROW><ROW><id>12801950</id><snippet> instance.attribute = value
</snippet></ROW><ROW><id>12801950</id><snippet> instance.__setattr__(attribute, value)
</snippet></ROW><ROW><id>12801950</id><snippet>__setattr__</snippet></ROW><ROW><id>12801950</id><snippet>setattr</snippet></ROW><ROW><id>12801950</id><snippet>__setattr__</snippet></ROW><ROW><id>12801950</id><snippet> setattr(instance, attribute, value)
</snippet></ROW><ROW><id>12801950</id><snippet>dict</snippet></ROW><ROW><id>12801950</id><snippet> values = {
     'title': 'This is edit title',
     ...
 }
 for k, v in values.items():
      setattr(ticket, k, v)
</snippet></ROW><ROW><id>12801988</id><snippet>        self.Eenu=Tk()
</snippet></ROW><ROW><id>12801988</id><snippet>        self.Eenu=Toplevel() 
</snippet></ROW><ROW><id>12802719</id><snippet>InlineModelAdmin</snippet></ROW><ROW><id>12802719</id><snippet>class QuestionOptionInline(admin.StackedInline):
    model = QuestionOption

    extra = 1 # show only one QuestionOption form

    def queryset(self, request):
         # hack: don't show existed QuestionOption
         return QuestionOption.objects.none()

class QuestionAdmin(admin.ModelAdmin):
    fields = ['text', 'is_free_text']
    inlines = [QuestionOptionInline]
</snippet></ROW><ROW><id>12802754</id><snippet>self.entry1.connect("changed",self.dir_ch)
self.entry1.set_text("dir1")
</snippet></ROW><ROW><id>12802754</id><snippet>entry2</snippet></ROW><ROW><id>12802754</id><snippet>entry3</snippet></ROW><ROW><id>12802754</id><snippet>entry1</snippet></ROW><ROW><id>12802754</id><snippet>self.dir_ch</snippet></ROW><ROW><id>12802754</id><snippet>entry1</snippet></ROW><ROW><id>12802754</id><snippet>entry2</snippet></ROW><ROW><id>12802754</id><snippet>entry3</snippet></ROW><ROW><id>12802754</id><snippet>    self.entry1 = gtk.Entry()
    self.entry2 = gtk.Entry()
    self.entry3 = gtk.Entry()
</snippet></ROW><ROW><id>12803135</id><snippet>db = mdb.connect(host="127.0.0.1",port=3306,user='xxxx',db="test")
cursor = db.cursor()
COM = "insert into test_copy (Short_Model) VALUES (%s)"
VALS = ['213','3232','fd','sadad']
cursor.executemany(COM,VALS)
db.commit()
</snippet></ROW><ROW><id>12803145</id><snippet>astimezone()</snippet></ROW><ROW><id>12803145</id><snippet>ValueError</snippet></ROW><ROW><id>12803204</id><snippet>parts = ["on my thumb", "on my shoe", ...]
numerators = ["one", "two", "three", ...]

for num, part in zip(numerators, parts):
    print "This old man, he played " + num
    print "He played knick-knack " + part
    print "Knick-knack paddywhack, give your dog a bone"
    print "This old man came rolling home"
</snippet></ROW><ROW><id>12803329</id><snippet>def test(params):   
    import timeit
    im = params[0]
    pd = params[1]
    box_half_size = params[2]
    t1 = timeit.Timer(lambda: image_box1(im, pd, box_half_size))
    print 'image_box1: typed numpy:'
    print min(t1.repeat(3, 10))
    cdef np.uint8_t[:, ::1] im2 = im
    cdef np.float64_t[:] pd2 = pd
    t2 = timeit.Timer(lambda: image_box2(im2, pd2, box_half_size))
    print 'image_box2: memoryview:'
    print min(t2.repeat(3, 10)) 
</snippet></ROW><ROW><id>12803389</id><snippet>&gt;&gt;&gt; num = 20000201501
&gt;&gt;&gt; print int(str(num)[:5])
20000
</snippet></ROW><ROW><id>12803389</id><snippet>def prefix(num):
    return int(str(num)[:5])

print 20000 &lt; prefix(20000201501) &lt; 20150
</snippet></ROW><ROW><id>12803538</id><snippet>from collections import defaultdict

...

if 'folding' not in request.session:
    request.session['folding'] = defaultdict(bool)

...

def update_folding_view(request, category, is_folded):
    if not request.is_ajax():
         raise Http404
    for item in category:             
        request.session['folding'][item] = is_folded
</snippet></ROW><ROW><id>12803559</id><snippet>(?!.*d)\/user/a/.*
</snippet></ROW><ROW><id>12803559</id><snippet>(?!.*send)\/user/myapp/.*
</snippet></ROW><ROW><id>12803592</id><snippet>x1, y1, a1, b1, x2, y2 = (int(input()) for _ in range(6))
</snippet></ROW><ROW><id>12803592</id><snippet>range</snippet></ROW><ROW><id>12803592</id><snippet>xrange</snippet></ROW><ROW><id>12803592</id><snippet>input</snippet></ROW><ROW><id>12803592</id><snippet>raw_input</snippet></ROW><ROW><id>12803608</id><snippet>$ echo print  4*2 | python -i
Python 2.7.2 (default, Jun 20 2012, 16:23:33) 
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 8
&gt;&gt;&gt; 
$
</snippet></ROW><ROW><id>12803608</id><snippet>print 4*2</snippet></ROW><ROW><id>12803608</id><snippet>EOF</snippet></ROW><ROW><id>12803608</id><snippet>Ctrl+d</snippet></ROW><ROW><id>12803608</id><snippet>^D</snippet></ROW><ROW><id>12803608</id><snippet>EOF</snippet></ROW><ROW><id>12803617</id><snippet>from __future__ import with_statement
import sys
import gevent
from gevent import socket
from gevent.pool import Pool

N = 1000
# limit ourselves to max 10 simultaneous outstanding requests
pool = Pool(10)
finished = 0


def job(url):
    global finished
    try:
        try:
            ip = socket.gethostbyname(url)
            print ('%s = %s' % (url, ip))
        except socket.gaierror:
            ex = sys.exc_info()[1]
            print ('%s failed with %s' % (url, ex))
    finally:
        finished += 1

with gevent.Timeout(2, False):
    for x in xrange(10, 10 + N):
        pool.spawn(job, '%s.com' % x)
    pool.join()

print ('finished within 2 seconds: %s/%s' % (finished, N))
</snippet></ROW><ROW><id>12803816</id><snippet>x = [10,2,30,4,50]
class avgFil2(object):
    def __init__(self):
        self.avg = 0
        self.k = 1.0
    def __call__(self, x):
        alpha = (self.k-1.0)/self.k  
        self.avg = alpha * self.avg + (1 - alpha)*x
        self.k +=1
       return self.avg

def simpleTest(x = x):     
    average = []
    avg = avgFil2()               # new variable and creation of instance (all initialisation)
    for i in range(len(x)):
        print 'input %f' % x[i] 
        print 'before change avg.avg=%f, k=%f' % (avg.avg, avg.k)   
        average.append(avg(x[i])) # class is called here, so all changes going on
        print 'after change avg.avg=%f, k=%f' % (avg.avg, avg.k)  
        print 'The output average is %f' % average[i]

simpleTest()
</snippet></ROW><ROW><id>12803816</id><snippet>k=1.0</snippet></ROW><ROW><id>12803816</id><snippet>float</snippet></ROW><ROW><id>12803816</id><snippet>k=1</snippet></ROW><ROW><id>12803816</id><snippet>int</snippet></ROW><ROW><id>12803816</id><snippet>alpha</snippet></ROW><ROW><id>12803816</id><snippet>class</snippet></ROW><ROW><id>12803967</id><snippet>from imapclient import imap_utf7
decoded = imap_utf7.decode('&amp;BdAF6QXkBdQ-')
</snippet></ROW><ROW><id>12804065</id><snippet>@mock.patch('method_to_patch', mock.Mock(return_value=1))
class Tests(TestCase):

    def test_override(self):
         method_to_patch.return_value = 2
         (....)
</snippet></ROW><ROW><id>12804065</id><snippet>@mock.patch('method_to_patch', mock.Mock(return_value=1))
class Tests(TestCase):

    def test_override(self):
         method_to_patch.return_value = 2
         (....)
         method_to_patch.return_value = 1
</snippet></ROW><ROW><id>12804065</id><snippet>@mock.patch('method_to_patch', mock.Mock(return_value=1))
class Tests(TestCase):

    def test_override(self):
         with mock.patch('method_to_patch', mock.Mock(return_value=2):
             (....)
</snippet></ROW><ROW><id>12804065</id><snippet>patch</snippet></ROW><ROW><id>12804248</id><snippet>def countup(k,n):
    print "Let's Go"
    _countup(k,n)

def _countup(k, n):
     'counts up from k to n'
     if k == n:
         print(k)
     else:
         print(k)
         _countup(k+1,n)
</snippet></ROW><ROW><id>12804264</id><snippet>struct</snippet></ROW><ROW><id>12804264</id><snippet>with open(youroutput,'wb') as fout:
    fout.write(struct.pack('&lt;f',300.0))
</snippet></ROW><ROW><id>12804264</id><snippet>&lt;</snippet></ROW><ROW><id>12804264</id><snippet>f</snippet></ROW><ROW><id>12804264</id><snippet>values = (300.0, 200.0, 100.0)
fout.write(struct.pack('&lt;3f',*values))
</snippet></ROW><ROW><id>12804412</id><snippet>for fn in os.listdir(path, f):
    fn = os.path.join(path, f)
    ctime = os.stat(fn).st_ctime
    if ctime &gt; now - 1 * 86400: #this is a new file
        new_files.append(fn)
        countit = new_files.count(fn) #counting the occurrence of appended files
    elif ctime &lt; now - 10 * 86400: #checking for old file
        old_files.append(fn)
if new_files:
    for fn in old_files:
        os.remove(fn)
else:
    import sendmail
        sendmail.sendmail()
</snippet></ROW><ROW><id>12804659</id><snippet>data = open("filename").read()
open("filename", "w").write(data)
</snippet></ROW><ROW><id>12804659</id><snippet>with</snippet></ROW><ROW><id>12804659</id><snippet>with open("filename") as f: data = f.read()
</snippet></ROW><ROW><id>12804856</id><snippet>sorted(MyModel.objects.all(),key=lambda o:len(o.name),reverse=True)</snippet></ROW><ROW><id>12804856</id><snippet>MyModel.objects.extra(select={'length':'Length(name)'}).order_by('length')
</snippet></ROW><ROW><id>12804978</id><snippet>io.sockets.on('connection', function(socket){
    fs.watch('response.json', function(curr, prev){
      setTimeout(function () {
        fs.readFile('response.json', 'utf8', function(err, data){
            if(err) throw err;
            console.log(data);
            data = JSON.parse(data);
            data.time = new Date();

            socket.volatile.emit('notification', data);
        });
      }, 50);
    });
});
</snippet></ROW><ROW><id>12804978</id><snippet>fs.watch</snippet></ROW><ROW><id>12804978</id><snippet>var _ = require("underscore");
io.sockets.on('connection', function(socket){
    fs.watch('response.json', _.debounce(function(curr, prev){
        fs.readFile('response.json', 'utf8', function(err, data){
            if(err) throw err;
            console.log(data);
            data = JSON.parse(data);
            data.time = new Date();

            socket.volatile.emit('notification', data);
        }), 50);
    });
});
</snippet></ROW><ROW><id>12804978</id><snippet>fs.watch</snippet></ROW><ROW><id>12805210</id><snippet>sqrt(x**2)==x</snippet></ROW><ROW><id>12805210</id><snippet>1/2</snippet></ROW><ROW><id>12805210</id><snippet>0.5</snippet></ROW><ROW><id>12805210</id><snippet>Rational</snippet></ROW><ROW><id>12805210</id><snippet>float</snippet></ROW><ROW><id>12805210</id><snippet>&gt;&gt;&gt; x = Symbol('x', real=True)
&gt;&gt;&gt; (x**2)**(1./2)
∣x∣**1.0
&gt;&gt;&gt; (x**2)**(S(1)/2) # S() is short for sympify()
∣x∣
</snippet></ROW><ROW><id>12805210</id><snippet>sympify</snippet></ROW><ROW><id>12806000</id><snippet>itertools.product</snippet></ROW><ROW><id>12806000</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; lists = [[1], [2, 3], [4, 5]]
&gt;&gt;&gt; list(itertools.product(*lists))
[(1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5)]
</snippet></ROW><ROW><id>12806151</id><snippet>results = [0, 0]
with open("\path\to\file.txt") as f:
    for line in f:
        values = line.split("|")
        results[0] += int(values[1])
        results[1] += int(values[2])

print("field 1 = " + str(results[0]), "field 2 = " + str(results[1]))
</snippet></ROW><ROW><id>12806289</id><snippet>&gt;&gt;&gt; import boto
&gt;&gt;&gt; print boto.config.get_value('Credentials', 'aws_access_key_id')
</snippet></ROW><ROW><id>12806325</id><snippet>sudo apt-get install libbz2-dev
</snippet></ROW><ROW><id>12806325</id><snippet>sudo yum install libbz2-devel // or bzip2-devel 
</snippet></ROW><ROW><id>12806516</id><snippet>random.sample(population, k)</snippet></ROW><ROW><id>12806534</id><snippet>z = 1.0/np.arange(1, n+1)
</snippet></ROW><ROW><id>12806575</id><snippet>list</snippet></ROW><ROW><id>12806575</id><snippet>extend()</snippet></ROW><ROW><id>12806765</id><snippet>setattr()</snippet></ROW><ROW><id>12806765</id><snippet>&gt;&gt;&gt; class foo(object):
    def __init__(self, d):
        self.d = d
        for x in self.d:
            setattr(self, x, self.d[x])


&gt;&gt;&gt; d = {'a': 1, 'b': 2}
&gt;&gt;&gt; l = foo(d)
&gt;&gt;&gt; l.d
{'a': 1, 'b': 2}
&gt;&gt;&gt; l.a
1
&gt;&gt;&gt; l.b
2
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12806815</id><snippet>return remove_extra(after)
</snippet></ROW><ROW><id>12806815</id><snippet>remove_extra(after)
</snippet></ROW><ROW><id>12806932</id><snippet>import numpy as np
import matplotlib.pyplot as plt

#Create radius and theta arrays, and a 2d radius/theta array
radius = np.linspace(0.2,0.4,51)
theta = np.linspace(0,2*np.pi,51)
R,T  = np.meshgrid(radius,theta)

#Calculate some values to plot
Zfun = lambda R,T: R**2*np.cos(T)
Z = Zfun(R,T)

#Create figure and polar axis
fig = plt.figure()
ax = fig.add_subplot(111, polar = True)

ax.pcolor(T,R,Z)    #Plot calculated values

#Plot thick red section and label it
theta = np.linspace(0,np.pi/4,21)
ax.plot(theta,[1.23 for t in theta],color='#AA5555',linewidth=10)   #Colors are set by hex codes
ax.text(np.pi/8,1.25,"Text")

ax.set_rmax(1.25)   #Set maximum radius

#Turn off polar labels
ax.axes.get_xaxis().set_visible(False)
ax.axes.get_yaxis().set_visible(False)
</snippet></ROW><ROW><id>12807083</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>12807083</id><snippet>__name__</snippet></ROW><ROW><id>12807101</id><snippet>any()</snippet></ROW><ROW><id>12807101</id><snippet>any('value2' in sublist for sublist in mylist)
</snippet></ROW><ROW><id>12807285</id><snippet>bash</snippet></ROW><ROW><id>12807285</id><snippet>print</snippet></ROW><ROW><id>12807285</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>12807285</id><snippet>:</snippet></ROW><ROW><id>12807285</id><snippet>python testscript.py | cd .
</snippet></ROW><ROW><id>12807285</id><snippet>printer.py</snippet></ROW><ROW><id>12807285</id><snippet>print 'abcde'
</snippet></ROW><ROW><id>12807285</id><snippet>python printer.py | python printer.py
</snippet></ROW><ROW><id>12807285</id><snippet>try</snippet></ROW><ROW><id>12807285</id><snippet>except</snippet></ROW><ROW><id>12807285</id><snippet>stdout</snippet></ROW><ROW><id>12807285</id><snippet>sys.excepthook</snippet></ROW><ROW><id>12807285</id><snippet>sys.stderr</snippet></ROW><ROW><id>12807285</id><snippet>fprintf</snippet></ROW><ROW><id>12807458</id><snippet>prefetch_related()</snippet></ROW><ROW><id>12807781</id><snippet>gtk.WindowGroup</snippet></ROW><ROW><id>12807781</id><snippet>window_group=gtk.WindowGroup()</snippet></ROW><ROW><id>12807781</id><snippet>window_group.add_window(win1)</snippet></ROW><ROW><id>12807781</id><snippet>window_group.add_window(win2)</snippet></ROW><ROW><id>12807781</id><snippet>canvas</snippet></ROW><ROW><id>12807781</id><snippet>update_hscale</snippet></ROW><ROW><id>12807781</id><snippet>l</snippet></ROW><ROW><id>12807781</id><snippet>def update_hscale(event):
    global t    
    fm = hscale.get_value()
    y_new = numpy.sin(2*fm*t)
    l.set_ydata(y_new)
    canvas.draw()
    print "doing fm=", fm
</snippet></ROW><ROW><id>12807783</id><snippet>  color = getColor(rightPixel)
  setColor(leftPixel,color)
</snippet></ROW><ROW><id>12807799</id><snippet>class EditableListCtrl(wx.ListCtrl, listmix.TextEditMixin):
    def __init__(self, parent, ID=wx.ID_ANY, pos=wx.DefaultPosition,
                 size=wx.DefaultSize, style=0):
        wx.ListCtrl.__init__(self, parent, ID, pos, size, style)
        listmix.TextEditMixin.__init__(self)
        self.Bind(wx.EVT_LIST_BEGIN_LABEL_EDIT, self.OnBeginLabelEdit)

    def OnBeginLabelEdit(self, event):
        if event.m_col == 1:
            event.Veto()
        else:
            event.Skip()
</snippet></ROW><ROW><id>12807827</id><snippet>virtualenv</snippet></ROW><ROW><id>12807827</id><snippet>&lt;exec executable="&lt;virtual_env_dir&gt;/bin/python"&gt;
...
</snippet></ROW><ROW><id>12807827</id><snippet>virtualenv</snippet></ROW><ROW><id>12808001</id><snippet>aspect='auto'</snippet></ROW><ROW><id>12808001</id><snippet>imshow</snippet></ROW><ROW><id>12808001</id><snippet>plt.imshow(A, interpolation='nearest', aspect='auto')
</snippet></ROW><ROW><id>12808416</id><snippet>...,</snippet></ROW><ROW><id>12808416</id><snippet>True</snippet></ROW><ROW><id>12808416</id><snippet>np.any(data.sum(1) == 0)
</snippet></ROW><ROW><id>12808416</id><snippet>&gt;&gt;&gt; from numpy import *
&gt;&gt;&gt; data = array([[0,0,0],[1,2,3],[1,0,1]])
&gt;&gt;&gt; normalisers = sqrt(sum(data**2,axis=1))*ones((1,shape(data)[0]))
&gt;&gt;&gt; normalisers
array([[ 0.        ,  3.74165739,  1.41421356]])
</snippet></ROW><ROW><id>12808416</id><snippet>&gt;&gt;&gt; data = transpose(transpose(data)/normalisers)
</snippet></ROW><ROW><id>12808416</id><snippet>data += 1
</snippet></ROW><ROW><id>12808468</id><snippet>contrib.admin.autodiscover</snippet></ROW><ROW><id>12808468</id><snippet>def autodiscover():
    """
    Auto-discover INSTALLED_APPS admin.py modules and fail silently when
    not present. This forces an import on them to register any admin bits they
    may want.
    """

    import copy
    from django.conf import settings
    from django.utils.importlib import import_module
    from django.utils.module_loading import module_has_submodule

    for app in settings.INSTALLED_APPS:
        mod = import_module(app)
        # Attempt to import the app's admin module.
        try:
            before_import_registry = copy.copy(site._registry)
            import_module('%s.admin' % app)
        except:
            # Reset the model registry to the state before the last import as
            # this import will have to reoccur on the next request and this
            # could raise NotRegistered and AlreadyRegistered exceptions
            # (see #8245).
            site._registry = before_import_registry

            # Decide whether to bubble up this error. If the app just
            # doesn't have an admin module, we can ignore the error
            # attempting to import it, otherwise we want it to bubble up.
            if module_has_submodule(mod, 'admin'):
                raise
</snippet></ROW><ROW><id>12808468</id><snippet>AdminSite</snippet></ROW><ROW><id>12808468</id><snippet># urls.py
from django.conf.urls import patterns, url, include
from myproject.admin import admin_site

urlpatterns = patterns('',
    (r'^myadmin/', include(admin_site.urls)),
)
</snippet></ROW><ROW><id>12808468</id><snippet>autodiscovery()</snippet></ROW><ROW><id>12808468</id><snippet>autodiscovery()</snippet></ROW><ROW><id>12808469</id><snippet>result = [item for word in words for item in word.split(',')]
</snippet></ROW><ROW><id>12808686</id><snippet>import csv
import io

csv_str = u"""Type,Country,State,County,City,
1,USA,,,
2,USA,OH,,
3,USA,OH,Franklin,
4,USA,OH,Franklin,Columbus
4,USA,OH,Franklin,Springfield
4,USA,WI,Dane,Madison
"""

counties = []
states = []


def handle_missing_data(row):
    try:
        rtype = int(row[0])
    except ValueError:
        return []

    rtype = row[0]
    country = row[1]
    state = row[2]
    county = row[3]

    rows = []
    # if a state is present and it hasn't a row of it's own
    if state and state not in states:
        rows.append([rtype, country, state, '', ''])
        states.append(state)

    # if a county is present and it hasn't a row of it's own
    if county and county not in counties:
        rows.append([rtype, country, state, county, ''])
        counties.append(county)

    # if the row hasn't already been added add it now
    if row not in rows:
        rows.append(row)

    return rows

csvf = io.StringIO(csv_str)
reader = csv.reader(csvf)
for row in reader:
    new_rows = handle_missing_data(row)
    for new_row in new_rows:
        print new_row
</snippet></ROW><ROW><id>12808803</id><snippet>#! /usr/bin/env monkeyrunner
import re
import sys
import os
import java
import glob
import os

from com.android.monkeyrunner import MonkeyRunner, MonkeyDevice
device1= MonkeyRunner.waitForConnection(15, "emulator-5554")
mydir="/home/user/apk"
os.chdir(mydir)
for files in glob.glob("*.apk"):
    print files
    print "path " ,os.path.abspath(mydir+"/"+files)
    device1.installPackage(mydir+"/"+files)
</snippet></ROW><ROW><id>12808851</id><snippet>from . import inputengine</snippet></ROW><ROW><id>12808876</id><snippet>element</snippet></ROW><ROW><id>12808876</id><snippet>for element in myarray:
    elementstring=''.join(element)
    with open('path/to/myfile') as myfile:
        for line in myfile:
            if elementstring in line:
                print line
</snippet></ROW><ROW><id>12808876</id><snippet>read</snippet></ROW><ROW><id>12808876</id><snippet>myfile = [line.rstrip('\n') for line in open('path/to/myfile')]
for element in myarray:
    elementstring=''.join(element)
    for line in myfile:
        if elementstring in line:
            print line
</snippet></ROW><ROW><id>12809028</id><snippet>scipy.cluster.vq</snippet></ROW><ROW><id>12809028</id><snippet>scipy.cluster.vq</snippet></ROW><ROW><id>12809028</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; images = np.random.random_sample((100,10,10))
</snippet></ROW><ROW><id>12809028</id><snippet>&gt;&gt;&gt; images = images.reshape((100,100))
&gt;&gt;&gt; images.shape
(100,100)
</snippet></ROW><ROW><id>12809028</id><snippet>&gt;&gt;&gt; from scipy.cluster.vq import kmeans, vq
&gt;&gt;&gt; codebook,distortion = kmeans(images,10)
</snippet></ROW><ROW><id>12809028</id><snippet>&gt;&gt;&gt; newimages = np.random.random_samples((5,10,10))
&gt;&gt;&gt; clusters = vq(newimages.reshape((5,100)),codebook)
</snippet></ROW><ROW><id>12809028</id><snippet>clusters</snippet></ROW><ROW><id>12809235</id><snippet>try:
    from exec_python2 import exec_code #@UnusedImport
except:
    from exec_python3 import exec_code #@Reimport
</snippet></ROW><ROW><id>12809235</id><snippet>exec_python2.py</snippet></ROW><ROW><id>12809235</id><snippet>def exec_code(source, global_vars, local_vars):
    exec source in global_vars, local_vars
</snippet></ROW><ROW><id>12809235</id><snippet>exec_python3.py</snippet></ROW><ROW><id>12809235</id><snippet>def exec_code(source, global_vars, local_vars):
    exec(source, global_vars, local_vars)
</snippet></ROW><ROW><id>12809235</id><snippet>exec</snippet></ROW><ROW><id>12809235</id><snippet>eval</snippet></ROW><ROW><id>12809235</id><snippet># Exec is a statement in Py2, a function in Py3

if sys.hexversion &gt; 0x03000000:
    def exec_function(source, filename, global_map):
        """A wrapper around exec()."""
        exec(compile(source, filename, "exec"), global_map)
else:
    # OK, this is pretty gross.  In Py2, exec was a statement, but that will
    # be a syntax error if we try to put it in a Py3 file, even if it isn't
    # executed.  So hide it inside an evaluated string literal instead.
    eval(compile("""\
def exec_function(source, filename, global_map):
    exec compile(source, filename, "exec") in global_map
""",
    "&lt;exec_function&gt;", "exec"
    ))
</snippet></ROW><ROW><id>12809235</id><snippet>exec_()</snippet></ROW><ROW><id>12809258</id><snippet>for i in range(len(listNew)):
    # Have we exceeded the previous list's length? Time to just write data in.
    if i &gt;= len(listPrevious):
        listPrevious.append(listNew[i])
        continue

    if listNew[i] != listPrevious[i]:
        listPrevious[i] = listNew[i]
</snippet></ROW><ROW><id>12809420</id><snippet>if not len(env.roles):
    env.roles = ["test"]
</snippet></ROW><ROW><id>12809420</id><snippet>dev</snippet></ROW><ROW><id>12809420</id><snippet>test</snippet></ROW><ROW><id>12809420</id><snippet>if not len(env.roles):
    env.roles = ["dev"]
</snippet></ROW><ROW><id>12809420</id><snippet>env.roledefs = {
    'test': ['test.fabexample.com'],
    'stage': ['stage.fabexample.com'],
    'prod': ['web01.fabexample.com', 'web02.fabexample.com', 'web03.fabexample.com'],
}
# default role will be test
env.roles = ['test']

def git_pull():
    run("git pull")

def deploy():
    target = "/opt/apps/FOO"
    with cd(target):
        git_pull()
    sudo("service apache2 restart")
</snippet></ROW><ROW><id>12809420</id><snippet>fab -R stage deploy
</snippet></ROW><ROW><id>12809420</id><snippet>fab --role=stage deploy
</snippet></ROW><ROW><id>12809420</id><snippet>env.roles</snippet></ROW><ROW><id>12809420</id><snippet>env.roledefs</snippet></ROW><ROW><id>12809504</id><snippet>"host:"</snippet></ROW><ROW><id>12809504</id><snippet>hosts=subprocess.Popen(['grep','host:',file_input], stdout= subprocess.PIPE)
</snippet></ROW><ROW><id>12809533</id><snippet>d2 = timezone('America/Edmonton').localize(d)
</snippet></ROW><ROW><id>12809754</id><snippet>iteritems</snippet></ROW><ROW><id>12809754</id><snippet>sum = 0
for k,v in d.iteritems():
    sum += v
</snippet></ROW><ROW><id>12809965</id><snippet>f = open('file.ini')
line in f.readline():
print map(ord, line)
</snippet></ROW><ROW><id>12809965</id><snippet>[..., 68, 0, 65, 0, 76, 0, 76, 0, 79, ...]
</snippet></ROW><ROW><id>12809965</id><snippet>f = open('file.ini', encoding='utf16be')
</snippet></ROW><ROW><id>12809965</id><snippet>codecs</snippet></ROW><ROW><id>12809965</id><snippet>import codecs
f = codecs.open('file.ini', encoding='utf16be')
</snippet></ROW><ROW><id>12809965</id><snippet>[254, 255]</snippet></ROW><ROW><id>12809965</id><snippet>[255, 254]</snippet></ROW><ROW><id>12810072</id><snippet>dict_a = {'verbs': ['run', 'go', 'eat'], 'nouns':['dog', 'cat', 'bear']}
dict_b = {'verbs': ['jump'], 'nouns': ['human']}

def foo(dict_a, dict_b):
  for k,v in dict_b.iteritems():
    for word in v[:]:
      if word in dict_a.get(k, []):
        dict_b[k].remove(word)
</snippet></ROW><ROW><id>12810129</id><snippet>&gt;&gt;&gt; class A:
...    def swap(self):
...      self.__class__ = B
...
&gt;&gt;&gt; class B:
...   pass
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.swap()
&gt;&gt;&gt; a
&lt;__main__.B instance at 0x02C43E18&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12810197</id><snippet>hosts</snippet></ROW><ROW><id>12810197</id><snippet>class Xbmc:
    # &lt;--- (no more "hosts" here)
    def __init__(self, host = None):
        self.hosts = []  # &lt;--- we are initializing "hosts" property here now
        self.setHosts(host)
        self.server = Hosts().getHostsByService('xbmcserver')
    # and so on...
</snippet></ROW><ROW><id>12810343</id><snippet>www.foo.bar.com</snippet></ROW><ROW><id>12810343</id><snippet>www.bar.com</snippet></ROW><ROW><id>12810343</id><snippet>www.foo.bar.com</snippet></ROW><ROW><id>12810343</id><snippet>/submit.jsp</snippet></ROW><ROW><id>12810371</id><snippet>Xpath</snippet></ROW><ROW><id>12810371</id><snippet>//div[@class="one"]//img
</snippet></ROW><ROW><id>12810371</id><snippet>xmllint --html --xpath '//div[@class="one"]//img' \
    'http://sputnick-area.net/ftp/downloads/testSO.html'
</snippet></ROW><ROW><id>12810371</id><snippet>&lt;img src="http://..."&gt;
&lt;img src="http://....."&gt;
</snippet></ROW><ROW><id>12810451</id><snippet>x = 0

class Foo:
    print(x)   # Foo.x isn't defined yet, so this is the global x
    x = 1      # This is referring to Foo.x
    print(x)   # So is this

print(x)
</snippet></ROW><ROW><id>12810451</id><snippet>x = 0

def foo():
    print(x)   # Even though x is not defined yet, it's known to be local
               # because of the assignment
    x = 1      # This assignment means x is local for the whole function
    print(x)

foo()
</snippet></ROW><ROW><id>12810560</id><snippet>def main(args):
    ...

if __name__ == '__main__':
    args = parse_args()
    main(args)
</snippet></ROW><ROW><id>12810560</id><snippet>main</snippet></ROW><ROW><id>12810560</id><snippet>parse_args</snippet></ROW><ROW><id>12810560</id><snippet>subprocess</snippet></ROW><ROW><id>12810682</id><snippet>&gt;&gt;&gt; from Queue import Queue
&gt;&gt;&gt; q = Queue()    
&gt;&gt;&gt; _ = [q.put(index) for index in xrange(2, 10)]
&gt;&gt;&gt; if not q.empty():
...    q.queue[-1]
9
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12810682</id><snippet>Queue</snippet></ROW><ROW><id>12810927</id><snippet>self</snippet></ROW><ROW><id>12810927</id><snippet>try_change_foo_value</snippet></ROW><ROW><id>12810927</id><snippet>a.try_change_foo_value()</snippet></ROW><ROW><id>12810927</id><snippet>Foo.try_change_foo_value(a)</snippet></ROW><ROW><id>12810927</id><snippet>self</snippet></ROW><ROW><id>12810927</id><snippet>a</snippet></ROW><ROW><id>12810927</id><snippet>def try_change_foo_value(self):
    self.fv = 2
</snippet></ROW><ROW><id>12810927</id><snippet>foo_instance.fv = 2</snippet></ROW><ROW><id>12810927</id><snippet>foo_instance</snippet></ROW><ROW><id>12810927</id><snippet>fv</snippet></ROW><ROW><id>12810946</id><snippet>SingleObjectMixin</snippet></ROW><ROW><id>12810946</id><snippet># views.py
from django.http import HttpResponseForbidden, HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.views.generic import View
from django.views.generic.detail import SingleObjectMixin
from books.models import Author

class RecordInterest(View, SingleObjectMixin):
    """Records the current user's interest in an author."""
    model = Author

    def post(self, request, *args, **kwargs):
        if not request.user.is_authenticated():
            return HttpResponseForbidden()

        # Look up the author we're interested in.
        self.object = self.get_object()
        # Actually record interest somehow here!

        return HttpResponseRedirect(reverse('author-detail', kwargs={'pk': self.object.pk}))
</snippet></ROW><ROW><id>12810946</id><snippet>SingleObjectMixin</snippet></ROW><ROW><id>12810946</id><snippet>author</snippet></ROW><ROW><id>12810946</id><snippet>self.get_objects()</snippet></ROW><ROW><id>12810946</id><snippet>class Base(object):
    # This is an abstract class

    # This is the method child classes need to implement
    def implement_me(self):
        raise NotImplementedError("told you so!")
</snippet></ROW><ROW><id>12810946</id><snippet>Interface</snippet></ROW><ROW><id>12810984</id><snippet>def copy(self):
    """Create a new object with the same property values."""
    other = self.__class__()
    # Copy over the relevant fields.  If you're using an integer primary key,
    # then this probably doesn't include that key.
    other.foo = self.foo
    other.bar = self.bar
    ...
    return other
</snippet></ROW><ROW><id>12810984</id><snippet>for assign in unsynced:
    self.remoteStore.add(assign.copy())
</snippet></ROW><ROW><id>12811078</id><snippet>left = (id1,id2,id3,id4,id5,id6,A,B,C)
right = (id1,id2,id3,id4,id5,id6,D,E,F)
middle = (id1,id2,id3,id4,id5,id6,G,H,I)
</snippet></ROW><ROW><id>12811078</id><snippet>col_names = [id1,id2,id3,id4,id5,id6,val1,val2,val3]
left.columns = col_names
right.columns = col_names
middle.columns = col_names
</snippet></ROW><ROW><id>12811078</id><snippet>pieces = [left, right, middle]
new_df = concat(pieces)
</snippet></ROW><ROW><id>12811078</id><snippet>check_df = new_df[(new_df[id1] == 'id1') &amp; (new_df[id2] == 'id2') ... etc])
print check_df

key, id1, id2, id3, id4, id5, id6, A, B, C
key, id1, id2, id3, id4, id5, id6, D, E, F
key, id1, id2, id3, id4, id5, id6, G, H, I
</snippet></ROW><ROW><id>12811140</id><snippet>self</snippet></ROW><ROW><id>12811140</id><snippet>class Foo(object):
    a = 1

one = Foo()
two = Foo()

Foo.a = 3
</snippet></ROW><ROW><id>12811140</id><snippet>print Foo.a # prints 3
</snippet></ROW><ROW><id>12811140</id><snippet>print one.a # prints 3
print two.a # prints 3
</snippet></ROW><ROW><id>12811140</id><snippet>class Bar(object)
    a = 1
    def __init__(self):
        self.a = 2
</snippet></ROW><ROW><id>12811140</id><snippet>one = Bar()
two = Bar()
two.a = 3
</snippet></ROW><ROW><id>12811140</id><snippet>print Bar.a # prints "1"
print one.a # prints "2"
print two.a # prints "3"
</snippet></ROW><ROW><id>12811140</id><snippet>two.a</snippet></ROW><ROW><id>12811140</id><snippet>a</snippet></ROW><ROW><id>12811140</id><snippet>Bar</snippet></ROW><ROW><id>12811140</id><snippet>Bar.a</snippet></ROW><ROW><id>12811140</id><snippet>two.a</snippet></ROW><ROW><id>12811386</id><snippet>import multiprocessing as mp

def print_mynumber(foo):
    """This function is obviously more complicated in my script.
    It should be run as a subprocess."""
    print(foo)

if __name__ == '__main__':
    for foo in [1,2,3]:
        proc = mp.Process(target = print_mynumber, args = (foo, ))
        proc.start()
</snippet></ROW><ROW><id>12811386</id><snippet>print_mynumber</snippet></ROW><ROW><id>12811386</id><snippet>foo</snippet></ROW><ROW><id>12811386</id><snippet>import multiprocessing as mp

def print_mynumber(foo):
    """This function is obviously more complicated in my script.
    It should be run as a subprocess."""
    print(foo)

if __name__ == '__main__':
    pool = mp.Pool()
    pool.map(print_mynumber, [1,2,3])
</snippet></ROW><ROW><id>12811386</id><snippet>N</snippet></ROW><ROW><id>12811386</id><snippet>pool.map</snippet></ROW><ROW><id>12811386</id><snippet>map</snippet></ROW><ROW><id>12811735</id><snippet>def proximity_fetch(query, center, max_results=10, max_distance=0):
</snippet></ROW><ROW><id>12811752</id><snippet>def foo(request):
   num = request.session.get('num')
   if not num:
      num = 1
   request.session['num'] = num
   return render(request,'foo.html')

def anotherfoo(request):
   num = request.session.get('num')
   # and so on, and so on
</snippet></ROW><ROW><id>12811752</id><snippet>num</snippet></ROW><ROW><id>12811752</id><snippet>request.session.get('num')</snippet></ROW><ROW><id>12811752</id><snippet>None</snippet></ROW><ROW><id>12811752</id><snippet>num</snippet></ROW><ROW><id>12811752</id><snippet>request.session.get('num',5)</snippet></ROW><ROW><id>12811752</id><snippet>num</snippet></ROW><ROW><id>12811752</id><snippet>5</snippet></ROW><ROW><id>12811752</id><snippet>if not num</snippet></ROW><ROW><id>12812027</id><snippet>a = [[1 ,2 , 3, 4],
     [5 ,6 , 7, 8],
     [9 ,10,11,12],
     [13,14,15,16]]

top_left =  [a[0][:2], a[1][:2]]
top_right = [a[0][2:], a[1][2:]]
bot_left =  [a[2][:2], a[3][:2]]
bot_right = [a[2][2:], a[3][2:]]
</snippet></ROW><ROW><id>12812027</id><snippet>h = len(a)
w = len(a[1])
top_left =  [a[i][:h / 2] for i in range(w / 2)]
top_right = [a[i][h / 2:] for i in range(w / 2)]
bot_left =  [a[i][:h / 2] for i in range(w / 2, w)]
bot_right = [a[i][h / 2:] for i in range(w / 2, w)]
</snippet></ROW><ROW><id>12812205</id><snippet>event['request']</snippet></ROW><ROW><id>12812205</id><snippet>request</snippet></ROW><ROW><id>12812205</id><snippet>request.path_info</snippet></ROW><ROW><id>12812205</id><snippet>/path/to/this/view</snippet></ROW><ROW><id>12812205</id><snippet>BeforeRender</snippet></ROW><ROW><id>12812205</id><snippet>render()</snippet></ROW><ROW><id>12812205</id><snippet>render_to_response()</snippet></ROW><ROW><id>12812205</id><snippet>NewRequest</snippet></ROW><ROW><id>12812205</id><snippet>ContextFound</snippet></ROW><ROW><id>12812289</id><snippet>$.ajax({
    type: "POST",
    url: "/posthere",
    data: JSON.stringify({myDict: {'1':'1', '2':'2'}}),
    contentType: "application/json; charset=utf-8",
    dataType: "json",
    success: function(data){
        alert(data);
    },
    failure: function(err) {
        alert(err);
    }
});
</snippet></ROW><ROW><id>12812289</id><snippet>from bottle import request, route

@route("/posthere", method="POST")
def postResource():
    #do code
    myDict = request.json['myDict']
    return {"result": "something"}
</snippet></ROW><ROW><id>12812301</id><snippet>View</snippet></ROW><ROW><id>12812301</id><snippet>def onopen(self):
    fname = askopenfilename()
    products.load_items(fname)

    myview = View(self._master)   # Instantiate the object
    myview.update_listbox()       # Now call update_listbox()
</snippet></ROW><ROW><id>12812301</id><snippet>self.list</snippet></ROW><ROW><id>12812301</id><snippet>self.list</snippet></ROW><ROW><id>12812301</id><snippet>View.__init__()</snippet></ROW><ROW><id>12812301</id><snippet>View</snippet></ROW><ROW><id>12812301</id><snippet>View</snippet></ROW><ROW><id>12812496</id><snippet>In [1]: from selenium import webdriver
In [2]: browser=webdriver.Chrome() # Select browser that you want to automate 
In [3]: browser.get('http://www.namejet.com/pages/downloads.aspx')
In [4]: element=browser.find_element_by_xpath(
            '//a[@id="ctl00_ContentPlaceHolder1_hlPreRelease1"]')

In [5]: element.click()
</snippet></ROW><ROW><id>12812746</id><snippet>arr = temp_result
diffs = arr[:,None,:] - arr[None,:,:]
</snippet></ROW><ROW><id>12812746</id><snippet>arr[i]</snippet></ROW><ROW><id>12812746</id><snippet>arr[j]</snippet></ROW><ROW><id>12812746</id><snippet>diffs[i,j]</snippet></ROW><ROW><id>12812996</id><snippet>related = urllib.quote(related, safe='')
</snippet></ROW><ROW><id>12812996</id><snippet>&lt;a href="{% url 'path.to.video_player' author video related %}" &gt; &lt;img src="img.png" &gt; &lt;/a&gt;
</snippet></ROW><ROW><id>12812996</id><snippet>url(r'^partner/(?P&lt;author&gt;[-\w]+)/(?P&lt;video&gt;\w+)/(?P&lt;related&gt;\w+)/$', 'video_player'),
</snippet></ROW><ROW><id>12812996</id><snippet>def video_player(request, author, video=None, related=None):
</snippet></ROW><ROW><id>12812996</id><snippet>&lt;a href="{% url 'path.to.video_player' author video %}" &gt; &lt;img src="img.png" &gt; &lt;/a&gt;
</snippet></ROW><ROW><id>12813117</id><snippet># file &lt;app folder&gt;/management/commands/closepoll.py
from django.core.management.base import BaseCommand, CommandError
from example.polls.models import Poll

class Command(BaseCommand):
    args = '&lt;poll_id poll_id ...&gt;'
    help = 'Closes the specified poll for voting'

    def handle(self, *args, **options):
        for poll_id in args:
            try:
                poll = Poll.objects.get(pk=int(poll_id))
            except Poll.DoesNotExist:
                raise CommandError('Poll "%s" does not exist' % poll_id)

            poll.opened = False
            poll.save()

            self.stdout.write('Successfully closed poll "%s"\n' % poll_id)
</snippet></ROW><ROW><id>12813117</id><snippet>python manage.py closepoll &lt;poll_id&gt;</snippet></ROW><ROW><id>12813117</id><snippet>Command.handle</snippet></ROW><ROW><id>12813117</id><snippet>mysignal = django.dispatch.Signal(providing_args=["foo", "bar"])

...

class Command(BaseCommand):
    args = '&lt;foo&gt; &lt;bar&gt;'

    def handle(self, foo, bar):

        mysignal.send(sender=self, foo=foo, bar=bar)
</snippet></ROW><ROW><id>12813495</id><snippet>&gt;&gt;&gt; import logging
&gt;&gt;&gt; fh = logging.FileHandler('/Users/defuz/test.txt')
&gt;&gt;&gt; fh.baseFilename
'/Users/defuz/test.txt'
&gt;&gt;&gt; fh.stream.name
'/Users/defuz/test.txt'
</snippet></ROW><ROW><id>12813909</id><snippet>def checkEqual(L1, L2):
    return len(L1) == len(L2) and sorted(L1) == sorted(L2)
</snippet></ROW><ROW><id>12813909</id><snippet>&gt;&gt;&gt; timeit(lambda: sorting([1,2,3], [3,2,1]))
2.42745304107666
&gt;&gt;&gt; timeit(lambda: lensorting([1,2,3], [3,2,1]))
2.5644469261169434 # speed down not much (for large lists the difference tends to 0)

&gt;&gt;&gt; timeit(lambda: sorting([1,2,3], [3,2,1,0]))
2.4570400714874268
&gt;&gt;&gt; timeit(lambda: lensorting([1,2,3], [3,2,1,0]))
0.9596951007843018 # speed up
</snippet></ROW><ROW><id>12814288</id><snippet>related_name</snippet></ROW><ROW><id>12814288</id><snippet>prefetch_related</snippet></ROW><ROW><id>12814288</id><snippet>QuerySet</snippet></ROW><ROW><id>12814288</id><snippet>select_related</snippet></ROW><ROW><id>12814288</id><snippet>select_related</snippet></ROW><ROW><id>12814288</id><snippet>SELECT</snippet></ROW><ROW><id>12814288</id><snippet>select_related</snippet></ROW><ROW><id>12814288</id><snippet>select_related</snippet></ROW><ROW><id>12814288</id><snippet>prefetch_related</snippet></ROW><ROW><id>12814288</id><snippet>select_related</snippet></ROW><ROW><id>12814288</id><snippet>select_related</snippet></ROW><ROW><id>12814288</id><snippet>GenericRelation</snippet></ROW><ROW><id>12814288</id><snippet>GenericForeignKey</snippet></ROW><ROW><id>12814288</id><snippet>class Parent(models.Model):
    name = models.CharField(max_length=31)

class Child(models.Model):
    name = models.CharField(max_length=31)
    parent = models.ForeignKey(Parent, related_name='children') 


&gt;&gt;&gt; Parent.objects.all().prefetch_related('children')
</snippet></ROW><ROW><id>12814288</id><snippet>self.children.all()</snippet></ROW><ROW><id>12814288</id><snippet>iterator()</snippet></ROW><ROW><id>12814288</id><snippet>prefetch_related()</snippet></ROW><ROW><id>12814716</id><snippet>+</snippet></ROW><ROW><id>12814716</id><snippet>++x</snippet></ROW><ROW><id>12814716</id><snippet>+(+(x))</snippet></ROW><ROW><id>12814716</id><snippet>x</snippet></ROW><ROW><id>12814716</id><snippet>x</snippet></ROW><ROW><id>12814716</id><snippet>&gt;&gt;&gt; ++5
5
&gt;&gt;&gt; ++"hello"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: bad operand type for unary +: 'str'
</snippet></ROW><ROW><id>12814716</id><snippet>+</snippet></ROW><ROW><id>12814716</id><snippet>__pos__</snippet></ROW><ROW><id>12814716</id><snippet>TypeError</snippet></ROW><ROW><id>12814716</id><snippet>import ast
print(ast.dump(ast.parse('++x', mode='eval')))
Expression(body=UnaryOp(op=UAdd(), operand=UnaryOp(op=UAdd(), operand=Name(id='x', ctx=Load()))))
</snippet></ROW><ROW><id>12814719</id><snippet>a.sort(key=lambda x: b.index(x[0]))
</snippet></ROW><ROW><id>12814719</id><snippet>a</snippet></ROW><ROW><id>12814719</id><snippet>b</snippet></ROW><ROW><id>12814719</id><snippet>a</snippet></ROW><ROW><id>12814719</id><snippet>a.sort(key=lambda (x,y): b.index(x))
</snippet></ROW><ROW><id>12814719</id><snippet>.index()</snippet></ROW><ROW><id>12814719</id><snippet>mapping = dict(a)
a[:] = [(x,mapping[x]) for x in b]
</snippet></ROW><ROW><id>12814719</id><snippet>mapping = dict(x[0], x[1:] for x in a)
a[:] = [(x,) + mapping[x] for x in b]
</snippet></ROW><ROW><id>12814847</id><snippet>socket.recv</snippet></ROW><ROW><id>12814847</id><snippet>select</snippet></ROW><ROW><id>12814847</id><snippet>select.select([your_socket],[],[])</snippet></ROW><ROW><id>12814847</id><snippet>socket.recv</snippet></ROW><ROW><id>12814847</id><snippet>socket.close</snippet></ROW><ROW><id>12814910</id><snippet>both.turn(power=power, tacho_units=tacho_units, brake=False)
# the turn function blocks, so this check comes to late
if(ultrasonic.get_sample() &lt; 20): 
    both.brake()
</snippet></ROW><ROW><id>12814910</id><snippet>turn</snippet></ROW><ROW><id>12814910</id><snippet>BaseMotor</snippet></ROW><ROW><id>12814910</id><snippet>motor.py</snippet></ROW><ROW><id>12814910</id><snippet>def turn(self, power, tacho_units, brake=True, timeout=1, emulate=True, cancel_when=None):
</snippet></ROW><ROW><id>12814910</id><snippet>while</snippet></ROW><ROW><id>12814910</id><snippet>        while True:

            # these lines are new
            if cancel_when and cancel_when():
                break
</snippet></ROW><ROW><id>12814910</id><snippet>both.turn(power=power, tacho_units=tacho_units, brake=False, cancel_when=lambda: ultrasonic.get_sample() &lt; 20)
</snippet></ROW><ROW><id>12815114</id><snippet>anchor</snippet></ROW><ROW><id>12815114</id><snippet>def parse (self, response)  
    hxs     = HtmlXPathSelector (response);
    anchors = hxs.select("//a[@class='FOO_X_Y_Z']/@href");

    // Lets assume anchor contains the actual link (http://...)
    for anchor in anchors:
        final_url = urllib2.open(anchor, None, 1).geturl()

        // Save final_url
</snippet></ROW><ROW><id>12815114</id><snippet>urllib2.open()</snippet></ROW><ROW><id>12815114</id><snippet>geturl()</snippet></ROW><ROW><id>12815181</id><snippet>AClass</snippet></ROW><ROW><id>12815181</id><snippet>AClass</snippet></ROW><ROW><id>12815181</id><snippet>connect()</snippet></ROW><ROW><id>12815181</id><snippet>listen()</snippet></ROW><ROW><id>12815181</id><snippet>accept()</snippet></ROW><ROW><id>12815181</id><snippet>import asyncore
import socket


class EchoHandler(asyncore.dispatcher_with_send):
    def handle_read(self):
        self.out_buffer = self.recv(1024)
        if not self.out_buffer:
            self.close()
        print "server:", repr(self.out_buffer)

    def handle_close(self):
        self.close()


class EchoServer(asyncore.dispatcher):
    def __init__(self, ip, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind((ip, port))
        self.listen(1)

    def handle_accept(self):
        sock, addr = self.accept()

        print "Connection from", addr

        EchoHandler(sock)

s = EchoServer('127.0.0.1', 21345)
asyncore.loop()
</snippet></ROW><ROW><id>12815181</id><snippet>__init__()</snippet></ROW><ROW><id>12815181</id><snippet>handle_accept()</snippet></ROW><ROW><id>12815181</id><snippet>accept()</snippet></ROW><ROW><id>12815181</id><snippet>EchoHandler</snippet></ROW><ROW><id>12815181</id><snippet>EchoHandler</snippet></ROW><ROW><id>12815181</id><snippet>out_buffer</snippet></ROW><ROW><id>12815181</id><snippet>asyncore.dispatcher_with_send</snippet></ROW><ROW><id>12815181</id><snippet>client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect((ip, port))
client.sendall("Hello world!\r\n")
print "client:", repr(client.recv(1024))
client.close()
</snippet></ROW><ROW><id>12815181</id><snippet>telnet localhost 21345</snippet></ROW><ROW><id>12815181</id><snippet>:: telnet 127.0.0.1 21345
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Hello!
Hello!
aouaoeu aoeu aoeu
aouaoeu aoeu aoeu
^]
telnet&gt; quit
Connection closed.
</snippet></ROW><ROW><id>12815181</id><snippet>class Client(asyncore.dispatcher_with_send):
    def __init__(self, ip, port, message):
        asyncore.dispatcher_with_send.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect((ip, port))
        self.out_buffer = message

    def handle_connect(self):
        print 'connected'

    def handle_read(self):
        data = self.recv(8192)
        print "client:", repr(data)

    def handle_close(self):
        self.close()
</snippet></ROW><ROW><id>12815617</id><snippet>if ('{' in line or '}' in line) and line not in lines_seen: # not a duplicate 
</snippet></ROW><ROW><id>12815841</id><snippet>comm.scatter</snippet></ROW><ROW><id>12815841</id><snippet>count</snippet></ROW><ROW><id>12815841</id><snippet>comm.size</snippet></ROW><ROW><id>12815841</id><snippet>if rank == 0:
    data = [i for i in range(8)]
# dividing data into chunks
    chunks = [[] for _ in range(size)]
    for i, chunk in enumerate(data):
        chunks[i % size].append(chunk)
else:
    data = None
    chunks = None
data = comm.scatter(chunks, root=0)
print str(rank) + ': ' + str(data)

[physics@tornado] ~/utils&gt; mpirun -np 3 ./mpi.py 
2: [2, 5]
0: [0, 3, 6]
1: [1, 4, 7]
</snippet></ROW><ROW><id>12816084</id><snippet>query = "YOUR FQL QUERY --- SEE FB API DOCUMENTATION ---" 
b = graph.fql(query)
</snippet></ROW><ROW><id>12816178</id><snippet>tornado.testing.AsyncHTTPTestCase</snippet></ROW><ROW><id>12816178</id><snippet>self.listener = reactor.listenTCP(&lt;someport&gt;, YourCycloneApplication())</snippet></ROW><ROW><id>12816178</id><snippet>setUp</snippet></ROW><ROW><id>12816178</id><snippet>self.listener.stopListening()</snippet></ROW><ROW><id>12816178</id><snippet>tearDown</snippet></ROW><ROW><id>12816178</id><snippet>cyclone.httpclient.fetch</snippet></ROW><ROW><id>12816412</id><snippet>print('Minimum monthly payment: ' + str(round(monthlyPaymentRate * balance), 2)
</snippet></ROW><ROW><id>12816533</id><snippet>class ResultView(TemplateView):
    template_name = "result.html"

class MainView(FormView):
    template_name = 'index.html'
    form_class = UserInputForm
    success_url = 'result/'

    def form_valid(self, form):
        self.request.session['temp_data'] = form.cleaned_data
        return super(MainView, self).form_valid(form)
</snippet></ROW><ROW><id>12816533</id><snippet>{{ request.session.temp_data }}
</snippet></ROW><ROW><id>12816669</id><snippet>def view(request):
    values = []
    for i in range(10):
         values.append(i) # your custom logic here
    return render_to_response("/path/to/template", {'values': values})
</snippet></ROW><ROW><id>12816669</id><snippet>{% for value in values %}
    &lt;p&gt;{{ value }}&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>12816825</id><snippet>&gt;&gt;&gt; d = {'AL' : 'Alabama', 'AK' : 'Alaska',}
&gt;&gt;&gt; d.items()
[('AK', 'Alaska'), ('AL', 'Alabama')]
</snippet></ROW><ROW><id>12816825</id><snippet>&gt;&gt;&gt; tuple(d.items())
(('AK', 'Alaska'), ('AL', 'Alabama'))
</snippet></ROW><ROW><id>12816947</id><snippet>set_color = operator.methodcaller('set_color', 'b')
</snippet></ROW><ROW><id>12816947</id><snippet>set_color(ticklabels[0])
</snippet></ROW><ROW><id>12816957</id><snippet>_columns</snippet></ROW><ROW><id>12816957</id><snippet>_columns</snippet></ROW><ROW><id>12816957</id><snippet>__init__</snippet></ROW><ROW><id>12816957</id><snippet>init</snippet></ROW><ROW><id>12816957</id><snippet>fields.function</snippet></ROW><ROW><id>12816957</id><snippet>TransientModel</snippet></ROW><ROW><id>12816957</id><snippet>osv_memory</snippet></ROW><ROW><id>12816957</id><snippet>fields_view_get</snippet></ROW><ROW><id>12816957</id><snippet>fields_get</snippet></ROW><ROW><id>12816957</id><snippet>fields_view_get</snippet></ROW><ROW><id>12816957</id><snippet>dict</snippet></ROW><ROW><id>12816957</id><snippet>search</snippet></ROW><ROW><id>12816957</id><snippet>read</snippet></ROW><ROW><id>12816957</id><snippet>write</snippet></ROW><ROW><id>12816957</id><snippet>create</snippet></ROW><ROW><id>12816957</id><snippet>fields_get</snippet></ROW><ROW><id>12816957</id><snippet>survey</snippet></ROW><ROW><id>12816957</id><snippet>init()</snippet></ROW><ROW><id>12816957</id><snippet>_columns</snippet></ROW><ROW><id>12817215</id><snippet>os.path.getctime</snippet></ROW><ROW><id>12817215</id><snippet>True</snippet></ROW><ROW><id>12817215</id><snippet>file1</snippet></ROW><ROW><id>12817215</id><snippet>file2</snippet></ROW><ROW><id>12817215</id><snippet>False</snippet></ROW><ROW><id>12817215</id><snippet>import os.path
os.path.getctime('file1') &lt; os.path.getctime('file2')
</snippet></ROW><ROW><id>12817782</id><snippet>DEBUG=True</snippet></ROW><ROW><id>12817782</id><snippet>addClientInfo()</snippet></ROW><ROW><id>12818075</id><snippet>np.correlate</snippet></ROW><ROW><id>12818075</id><snippet>np.convolve(data, w[::-1], 'valid')</snippet></ROW><ROW><id>12818237</id><snippet>args = parser.parse_args()
</snippet></ROW><ROW><id>12818237</id><snippet>args, unknown = parser.parse_known_args()
</snippet></ROW><ROW><id>12818237</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--foo')
args, unknown = parser.parse_known_args(['--foo', 'BAR', 'spam'])
print(args)
# Namespace(foo='BAR')
print(unknown)
# ['spam']
</snippet></ROW><ROW><id>12818612</id><snippet>destination d_nginx_video { program("/path/to/python/script arg arg arg"
                                    template("$PROGRAM $MESSAGE\n"));
                            file("/data/logs/access.log" create_dirs(yes)
                                 template("$PROGRAM $MESSAGE\n")); };
</snippet></ROW><ROW><id>12818681</id><snippet>In [16]: DATE_LIST = [
 u'20090331', u'20090630', u'20090930', u'20091231', \
 u'20100331', u'20100630', u'20100930', u'20101231', \
 u'20110331', u'20110630', u'20110930', u'20111231', \
 u'20120331', u'20120630', u'20120930', u'20121231'
 ]

In [17]: timestamps = [pd.Timestamp(date) for date in DATE_LIST]

In [18]: df = pd.DataFrame(np.random.randn(100,3), index=pd.date_range('20090331', periods=100))

In [19]: df.ix[timestamps].dropna()
Out[19]:
                   0         1         2
2009-03-31  0.520235  1.158889 -0.310227
2009-06-30  1.036449  0.528931 -0.083166
</snippet></ROW><ROW><id>12818777</id><snippet>Radio</snippet></ROW><ROW><id>12818777</id><snippet>Radio</snippet></ROW><ROW><id>12818777</id><snippet>&lt;input&gt;</snippet></ROW><ROW><id>12818777</id><snippet>project_details = form.Form( 
    form.Radio('details', ['Home Page', 'Content', 'Contact Us', 'Sitemap']),
    )
</snippet></ROW><ROW><id>12818945</id><snippet>from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse

def myview(request):
    passwords_url = reverse('passwords_api_root')  # this returns the string `/passwords/`
    return HttpResponseRedirect(passwords_url)
</snippet></ROW><ROW><id>12818945</id><snippet>&lt;p&gt;Please go &lt;a href="{% url 'passwords_api_root' %}"&gt;here&lt;/a&gt;&lt;/p&gt;
</snippet></ROW><ROW><id>12819254</id><snippet>welcome</snippet></ROW><ROW><id>12819254</id><snippet>easygui.py</snippet></ROW><ROW><id>12819254</id><snippet>def main():
   externals.easygui.welcome()
</snippet></ROW><ROW><id>12819254</id><snippet>import externals.easygui as eg
def main():
    eg.welcome()
</snippet></ROW><ROW><id>12819254</id><snippet>__init__.py</snippet></ROW><ROW><id>12819254</id><snippet>steffen
  |- __init__.py
  |- main.py
  |- easygui
     |- __init__.py
     |- gui.py
  |- external
     |- __init__.py
     |- welcome.py
</snippet></ROW><ROW><id>12819254</id><snippet>__init__.py</snippet></ROW><ROW><id>12819254</id><snippet>#steffen.__init__.py
import main
import easygui
import external
</snippet></ROW><ROW><id>12819254</id><snippet>#steffen/external/__init__.py
import welcome
</snippet></ROW><ROW><id>12819254</id><snippet>import easygui
def main():
    easygui.gui.welcome()
</snippet></ROW><ROW><id>12819254</id><snippet>import steffen.external as se
def welcome():
    se.welcome.hello()
</snippet></ROW><ROW><id>12819254</id><snippet>def hello():
    print "Hello"
</snippet></ROW><ROW><id>12819254</id><snippet>import steffen
steffen.main.main()
</snippet></ROW><ROW><id>12819254</id><snippet>steffen.main.main()</snippet></ROW><ROW><id>12819254</id><snippet>steffen.main()</snippet></ROW><ROW><id>12819254</id><snippet>steffen.__init__.py</snippet></ROW><ROW><id>12819254</id><snippet>#steffen.__init__.py
from main import main
import easygui
import external
</snippet></ROW><ROW><id>12819254</id><snippet>foo.func()</snippet></ROW><ROW><id>12819254</id><snippet>__init__.py</snippet></ROW><ROW><id>12819254</id><snippet>steffen.foo.func()</snippet></ROW><ROW><id>12819254</id><snippet>steffen</snippet></ROW><ROW><id>12819254</id><snippet>foo()</snippet></ROW><ROW><id>12819254</id><snippet>__init__.py</snippet></ROW><ROW><id>12819254</id><snippet>steffen.foo()</snippet></ROW><ROW><id>12819254</id><snippet>setup.py</snippet></ROW><ROW><id>12819342</id><snippet>getattr</snippet></ROW><ROW><id>12819342</id><snippet>iterative_getattr(obj, attrs)</snippet></ROW><ROW><id>12819342</id><snippet>attrs</snippet></ROW><ROW><id>12819590</id><snippet>extra</snippet></ROW><ROW><id>12819590</id><snippet>events = Event.objects.extra(
    select={'attendees': 'SELECT COUNT(*) from event_registration' + \
        ' where attended=1 and event_id=event_event.id'}
).order_by('attendees')
</snippet></ROW><ROW><id>12819752</id><snippet>-O</snippet></ROW><ROW><id>12819752</id><snippet>if</snippet></ROW><ROW><id>12819752</id><snippet>if False:
    raise ValueError("expected True, received", False)
</snippet></ROW><ROW><id>12819856</id><snippet>def to_tag(k, v):
    """Create a new tag for the given key k and value v"""
    return '&lt;{key}&gt;{value}&lt;{key}/&gt;'.format(key=k, value=get_content(k, v))

def get_content(k, v):
    """Create the content of a tag by deciding what to do depending on the content of the value"""
    if isinstance(v, str):
        # it's a string, so just return the value
        return v
    elif isinstance(v, dict):
        # it's a dict, so create a new tag for each element
        # and join them with newlines
        return '\n%s\n' % '\n'.join(to_tag(*e) for e in v.items())
    elif isinstance(v, list):
        # it's a list, so create a new key for each element
        # by using the enumerate method and create new tags
        return '\n%s\n' % '\n'.join(to_tag('{key}-{value}'.format(key=k, value=i+1), e) for i, e in enumerate(v))

d = {'Employee':{ 'Id' : 'TA23434', 'Name':'Kesavan' , 'Email':'k7@gmail.com' , 'Roles':[ {'Name':'Admin' ,'RoleId':'xa1234' },{'Name':'Engineer' , 'RoleId':'xa5678' }], 'Test':{'a':'A','b':'b'} }}

for k,v in d.items():
    print to_tag(k, v)
</snippet></ROW><ROW><id>12819856</id><snippet>dict</snippet></ROW><ROW><id>12819856</id><snippet>&lt;Employee&gt;
&lt;Email&gt;k7@gmail.com&lt;Email/&gt;
&lt;Test&gt;
&lt;a&gt;A&lt;a/&gt;
&lt;b&gt;b&lt;b/&gt;
&lt;Test/&gt;
&lt;Id&gt;TA23434&lt;Id/&gt;
&lt;Roles&gt;
&lt;Roles-1&gt;
&lt;RoleId&gt;xa1234&lt;RoleId/&gt;
&lt;Name&gt;Admin&lt;Name/&gt;
&lt;Roles-1/&gt;
&lt;Roles-2&gt;
&lt;RoleId&gt;xa5678&lt;RoleId/&gt;
&lt;Name&gt;Engineer&lt;Name/&gt;
&lt;Roles-2/&gt;
&lt;Roles/&gt;
&lt;Name&gt;Kesavan&lt;Name/&gt;
&lt;Employee/&gt;
</snippet></ROW><ROW><id>12820015</id><snippet>-I</snippet></ROW><ROW><id>12820015</id><snippet>--ignore-files</snippet></ROW><ROW><id>12820015</id><snippet>.*\.py</snippet></ROW><ROW><id>12820209</id><snippet>except ClientInfo.DoesNotExist or ClientInfo.MultipleObjectsReturned:
</snippet></ROW><ROW><id>12820209</id><snippet>or</snippet></ROW><ROW><id>12820209</id><snippet>True</snippet></ROW><ROW><id>12820209</id><snippet>except (ClientInfo.DoesNotExist, ClientInfo.MultipleObjectsReturned):
</snippet></ROW><ROW><id>12820209</id><snippet>except</snippet></ROW><ROW><id>12820209</id><snippet>add_new_client()</snippet></ROW><ROW><id>12820209</id><snippet>except (ClientInfo.DoesNotExist, ClientInfo.MultipleObjectsReturned):
    ... logging stuff ...
    state = "Invalid YS Authentication!  Please try again."
    return add_new_client(request, state)
</snippet></ROW><ROW><id>12820262</id><snippet>fields.binary</snippet></ROW><ROW><id>12820262</id><snippet>TransientModel</snippet></ROW><ROW><id>12820262</id><snippet>osv_memory</snippet></ROW><ROW><id>12820262</id><snippet>fields.function</snippet></ROW><ROW><id>12820262</id><snippet>fields.char</snippet></ROW><ROW><id>12820262</id><snippet>/module/path/to/file</snippet></ROW><ROW><id>12820262</id><snippet>widget="url"</snippet></ROW><ROW><id>12820644</id><snippet>In [23]: import numpy as np

In [24]: a=[1,2]

In [25]: b=[2,2]

In [26]: c=[3,3]

In [27]: d=np.rec.fromarrays([a, b, c], names='x,y,z')

In [28]: d
Out[28]: 
rec.array([(1, 2, 3), (2, 2, 3)], 
      dtype=[('x', '&lt;i4'), ('y', '&lt;i4'), ('z', '&lt;i4')])

In [29]: d.astype([(k, float) for k in d.dtype.names])
Out[29]: 
rec.array([(1.0, 2.0, 3.0), (2.0, 2.0, 3.0)], 
      dtype=[('x', '&lt;f8'), ('y', '&lt;f8'), ('z', '&lt;f8')])
</snippet></ROW><ROW><id>12821087</id><snippet>yyyy-mm-dd</snippet></ROW><ROW><id>12821087</id><snippet>&gt;&gt;&gt; '2010-1-15' &lt; '2010-02-15'
False
</snippet></ROW><ROW><id>12821087</id><snippet>sorted(d,key=lambda x: [int(y) for y in x.split('-')])
</snippet></ROW><ROW><id>12821087</id><snippet>sorted(d,key=lambda x: [y.zfill(2) for y in x.split('-')]) 
</snippet></ROW><ROW><id>12821087</id><snippet>timeit</snippet></ROW><ROW><id>12821366</id><snippet>import nltk
from nltk import bigrams
from nltk import trigrams

text="""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ornare
tempor lacus, quis pellentesque diam tempus vitae. Morbi justo mauris,
congue sit amet imperdiet ipsum dolor sit amet, consectetur adipiscing elit. Nullam ornare
tempor lacus, quis pellentesque diam"""
# split the texts into tokens
tokens = nltk.word_tokenize(text)
tokens = [token.lower() for token in tokens if len(token) &gt; 1] #same as unigrams
bi_tokens = bigrams(tokens)
tri_tokens = trigrams(tokens)

# print trigrams count

print [(item, tri_tokens.count(item)) for item in sorted(set(tri_tokens))]
&gt;&gt;&gt; 
[(('adipiscing', 'elit.', 'nullam'), 2), (('amet', 'consectetur', 'adipiscing'), 2),(('amet', 'imperdiet', 'ipsum'), 1), (('congue', 'sit', 'amet'), 1), (('consectetur', 'adipiscing', 'elit.'), 2), (('diam', 'tempus', 'vitae.'), 1), (('dolor', 'sit', 'amet'), 2), (('elit.', 'nullam', 'ornare'), 2), (('imperdiet', 'ipsum', 'dolor'), 1), (('ipsum', 'dolor', 'sit'), 2), (('justo', 'mauris', 'congue'), 1), (('lacus', 'quis', 'pellentesque'), 2), (('lorem', 'ipsum', 'dolor'), 1), (('mauris', 'congue', 'sit'), 1), (('morbi', 'justo', 'mauris'), 1), (('nullam', 'ornare', 'tempor'), 2), (('ornare', 'tempor', 'lacus'), 2), (('pellentesque', 'diam', 'tempus'), 1), (('quis', 'pellentesque', 'diam'), 2), (('sit', 'amet', 'consectetur'), 2), (('sit', 'amet', 'imperdiet'), 1), (('tempor', 'lacus', 'quis'), 2), (('tempus', 'vitae.', 'morbi'), 1), (('vitae.', 'morbi', 'justo'), 1)]
</snippet></ROW><ROW><id>12821422</id><snippet>lines = [("LC" if i &lt; 3 else "LB")+line for i,line in enumerate(lines)]
</snippet></ROW><ROW><id>12821452</id><snippet>from os import listdir
from os.path import isfile

for filepath in listdir("/path/to/folder")
    if isfile(filepath): # if need
        last_five_lines = open(filepath).readlines()[-15:]

# or, one line:

x = [open(f).readlines()[-15:] for f in listdir("/path/to/folder") if isfile(f)]
</snippet></ROW><ROW><id>12821452</id><snippet>lastlines = []
for file in files:
    lastlines += open(join(dir_path, file), "r").readlines()[-15:]
with open('./fin.txt', 'w') as f:
    f.writelines(lastlines)
</snippet></ROW><ROW><id>12821468</id><snippet>def auth_required(func):
    def proxyfunc(self, *args, **kw):
        try:
            if session.user:
              # user is logged in
              return func(self, *args, **kw)
        except:
            pass
        # user is not logged in
        raise web.seeother("/login")
    return proxyfunc
</snippet></ROW><ROW><id>12821468</id><snippet>class Projects:
    @auth_required
    def GET(self):
        pass
</snippet></ROW><ROW><id>12821507</id><snippet>s = 'caaat caat cat kittycaat, rack, smaaack'
x = 0
for i in s.split():
    if i.count('a') &gt; x:
        x = i.count('a')
        word = i
print word
</snippet></ROW><ROW><id>12821576</id><snippet>SessionAuthentication</snippet></ROW><ROW><id>12821812</id><snippet>self.assertIsInstance(raise_up.mock_calls[0][1][0], Unauthorized)
</snippet></ROW><ROW><id>12821812</id><snippet>&gt;&gt;&gt; print raise_up.mock_calls
[call(Unauthorized())]
&gt;&gt;&gt; print raise_up.mock_calls[0]
call(Unauthorized())
&gt;&gt;&gt; print raise_up.mock_calls[0][1]
(Unauthorized(),)
&gt;&gt;&gt; print type(raise_up.mock_calls[0][1][0])
&lt;type 'Unauthorized'&gt;
</snippet></ROW><ROW><id>12822059</id><snippet>for key, value in dict_gtps.iteritems():
  abs_new[key] = [value[i] for i in indices]
</snippet></ROW><ROW><id>12822060</id><snippet># cython: boundscheck=False
cimport numpy as np
import numpy as np  # zeros_like

ctypedef np.float64_t np_t
def convolve_cy_np(np.ndarray[np_t] a not None,
                   np.ndarray[np_t] b not None,
                   np.ndarray[np_t] c=None):
    if c is None:
       c = np.zeros_like(a)
    cdef Py_ssize_t i, j, n = c.shape[0]
    with nogil:
        for i in range(n):
            for j in range(i + 1):
                c[i] += a[j] * b[i - j]
    return c
</snippet></ROW><ROW><id>12822060</id><snippet>n=10..50</snippet></ROW><ROW><id>12822060</id><snippet>np.convolve(a,b)[:len(a)]</snippet></ROW><ROW><id>12822060</id><snippet>numba</snippet></ROW><ROW><id>12822095</id><snippet>opencv_traincascade</snippet></ROW><ROW><id>12822095</id><snippet>#import library - MUST use cv2 if using opencv_traincascade
import cv2

# rectangle color and stroke
color = (0,0,255)       # reverse of RGB (B,G,R) - weird
strokeWeight = 1        # thickness of outline

# set window name
windowName = "Object Detection"

# load an image to search for faces
img = cv2.imread("test.jpg")

# load detection file (various files for different views and uses)
cascade = cv2.CascadeClassifier("cascade.xml")

# preprocessing, as suggested by: http://www.bytefish.de/wiki/opencv/object_detection
# img_copy = cv2.resize(img, (img.shape[1]/2, img.shape[0]/2))
# gray = cv2.cvtColor(img_copy, cv2.COLOR_BGR2GRAY)
# gray = cv2.equalizeHist(gray)

# detect objects, return as list
rects = cascade.detectMultiScale(img)

# display until escape key is hit
while True:

    # get a list of rectangles
    for x,y, width,height in rects:
        cv2.rectangle(img, (x,y), (x+width, y+height), color, strokeWeight)

    # display!
    cv2.imshow(windowName, img)

    # escape key (ASCII 27) closes window
    if cv2.waitKey(20) == 27:
        break

# if esc key is hit, quit!
exit()
</snippet></ROW><ROW><id>12822143</id><snippet>from StringIO import StringIO

data = StringIO('\n'.join(line.strip() for line in open('/etc/samba/smb.conf')))

parser = SafeConfigParser()
parser.readfp(data)
...
</snippet></ROW><ROW><id>12822143</id><snippet>class stripfile(file):
    def readline(self):
        return super(FileStripper, self).readline().strip()

parser = SafeConfigParser()
with stripfile('/path/to/file') as f:
    parser.readfp(f)
</snippet></ROW><ROW><id>12822156</id><snippet>{% url video_player feed.1.5 video.4 video.1   %}</snippet></ROW><ROW><id>12822156</id><snippet>{% url reserve.views.video_player feed.1.5 video.4 video.1   %}</snippet></ROW><ROW><id>12822156</id><snippet>url(r'^partner/(?P&lt;author&gt;[-\w]+)/(?P&lt;video&gt;[-\w]+)/(?P&lt;video_title&gt;[-\w]+)/$', 'video_player', name="video-player"),</snippet></ROW><ROW><id>12822156</id><snippet>{% url video-player feed.1.5 video.4 video.1   %}</snippet></ROW><ROW><id>12822572</id><snippet>&gt;&gt;&gt; def foo(self): pass
... 
&gt;&gt;&gt; class Foo: pass
... 
&gt;&gt;&gt; Foo.bar = foo
&gt;&gt;&gt; type(Foo.bar)
&lt;type 'instancemethod'&gt;
&gt;&gt;&gt; type(foo)
&lt;type 'function'&gt;
&gt;&gt;&gt; 
&gt;&gt;&gt; Foo.bar is foo
False
&gt;&gt;&gt; Foo.bar == foo
False
</snippet></ROW><ROW><id>12822572</id><snippet>&gt;&gt;&gt; Foo.bar.im_func is foo
True
</snippet></ROW><ROW><id>12822572</id><snippet>self.assertIs(my_patch_method, patch_my_lib().target_method.im_func)</snippet></ROW><ROW><id>12822671</id><snippet>delimiter</snippet></ROW><ROW><id>12822671</id><snippet>delimiter</snippet></ROW><ROW><id>12822738</id><snippet>plop</snippet></ROW><ROW><id>12822738</id><snippet>SELECT
  plop.id,
  CASE
    WHEN plop.type = 1 THEN (SELECT array_agg(plop.entry * plop.size * val.x) FROM (VALUES (0.5), (0.3), (0.2)) val (x))::int4[]
    WHEN plop.type = 2 THEN (SELECT array_agg(3 * plop.entry * x/x ) FROM generate_series(1, plop.size / 3) x)::int4[]
    ELSE ARRAY[plop.entry * plop.size]::int4[]
  END AS prize_pool
FROM plop
;
</snippet></ROW><ROW><id>12822738</id><snippet>┌────┬──────────────────┐                                                                                                                                                                                       
│ id │    prize_pool    │                                                                                                                                                                                       
├────┼──────────────────┤                                                                                                                                                                                       
│  1 │ {100}            │                                                                                                                                                                                       
│  2 │ {200}            │                                                                                                                                                                                       
│  3 │ {150,90,60}      │                                                                                                                                                                                       
│  4 │ {90,90,90,90,90} │                                                                                                                                                                                       
└────┴──────────────────┘
</snippet></ROW><ROW><id>12822738</id><snippet>entry x size / ( size / 3 ) = 3 x entry</snippet></ROW><ROW><id>12822738</id><snippet>x/x</snippet></ROW><ROW><id>12822960</id><snippet>path</snippet></ROW><ROW><id>12823272</id><snippet>class Task(models.Model):
    CANCELLED = -1
    REQUIRES_ATTENTION = 0
    WORK_IN_PROGRESS = 1
    COMPLETE = 2

    Status = (
        (CANCELLED, 'Cancelled'),
        (REQUIRES_ATTENTION, 'Requires attention'),
        (WORK_IN_PROGRESS, 'Work in progress'),
        (COMPLETE, 'Complete'),
    )

    status = models.IntegerField(choices=Status, default=REQUIRES_ATTENTION)
</snippet></ROW><ROW><id>12823272</id><snippet>Status</snippet></ROW><ROW><id>12823272</id><snippet>Tasks.COMPLETE</snippet></ROW><ROW><id>12823272</id><snippet>Tasks</snippet></ROW><ROW><id>12823342</id><snippet>Point</snippet></ROW><ROW><id>12823342</id><snippet>pt = liblas.point.Point()
</snippet></ROW><ROW><id>12823342</id><snippet>x</snippet></ROW><ROW><id>12823342</id><snippet>y</snippet></ROW><ROW><id>12823342</id><snippet>z</snippet></ROW><ROW><id>12823342</id><snippet>write</snippet></ROW><ROW><id>12823391</id><snippet>u''</snippet></ROW><ROW><id>12823391</id><snippet>unicode</snippet></ROW><ROW><id>12823391</id><snippet>str</snippet></ROW><ROW><id>12823391</id><snippet>&gt;&gt;&gt; type('foobar')
&lt;type 'str'&gt;
&gt;&gt;&gt; type(u'foobar')
&lt;type 'unicode'&gt;
&gt;&gt;&gt; 'foobar' == u'foobar'
True
</snippet></ROW><ROW><id>12823391</id><snippet>u</snippet></ROW><ROW><id>12823391</id><snippet>x = u'richard'
dm(x)
</snippet></ROW><ROW><id>12823391</id><snippet>unicode</snippet></ROW><ROW><id>12823391</id><snippet>str</snippet></ROW><ROW><id>12823391</id><snippet>x='wal mart'
y='wall mart'
</snippet></ROW><ROW><id>12823391</id><snippet>x=u'wal mart'
y=u'wall mart'
</snippet></ROW><ROW><id>12823391</id><snippet>str</snippet></ROW><ROW><id>12823391</id><snippet>unicode</snippet></ROW><ROW><id>12823391</id><snippet>unicode()</snippet></ROW><ROW><id>12823391</id><snippet>x='wal mart'
y='wall mart'

dm(unicode(x)) == dm(unicode(y))
</snippet></ROW><ROW><id>12823604</id><snippet>import re

text = re.sub('&lt;[^&lt;]+&gt;', "", open("/path/to/file").read())
with open("/path/to/file", "w") as f:
    f.write(text)
</snippet></ROW><ROW><id>12824161</id><snippet>locale.format()</snippet></ROW><ROW><id>12824161</id><snippet>&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, '')
'en_US.UTF-8'
&gt;&gt;&gt; locale.format("%.4f", 12345.678912, grouping=True)
'12,345.6789'
</snippet></ROW><ROW><id>12824210</id><snippet>NULL</snippet></ROW><ROW><id>12824269</id><snippet>while True:
    newfiles = check_for_new_files()
    process(newfiles)
    time.sleep(pollinterval)
</snippet></ROW><ROW><id>12824269</id><snippet>newfiles = []

while True:
    process(newfiles)
    newfiles = check_for_new_files()
    time.sleep(pollinterval)
</snippet></ROW><ROW><id>12824269</id><snippet>while True:
    newfiles = check_for_new_files()
    time.sleep(pollinterval)
    process(newfiles)
</snippet></ROW><ROW><id>12824608</id><snippet>django.contrib.auth.context_processors.auth</snippet></ROW><ROW><id>12824608</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>12824608</id><snippet>settings.py</snippet></ROW><ROW><id>12824608</id><snippet>user</snippet></ROW><ROW><id>12824608</id><snippet>{% if user.is_active %}
</snippet></ROW><ROW><id>12825001</id><snippet>import re
ref = re.compile(u'&lt;ref.*?ref&gt;', re.DOTALL)

ref.sub(u'', yourtext)
</snippet></ROW><ROW><id>12825001</id><snippet>re.DOTALL</snippet></ROW><ROW><id>12825001</id><snippet>&lt;ref&gt;</snippet></ROW><ROW><id>12825001</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; tst=u'\'\'\'Joseph Michael "Joe" Acaba\'\'\' (born May 17, 1967) is an [[Teacher|educator]], [[Hydrogeology|hydrogeologist]], and [[NASA]] [[astronaut]].&lt;ref name="bio"&gt;{{Cite web|url=http://www.jsc.nasa.gov/Bios/htmlbios/acaba-jm.html|title=Astronaut Bio: Joseph Acaba|month=February | year=2006|publisher=[[NASA|National Aeronautics and Space Administration]]|author=NASA|accessdate=November 26, 2006}}&lt;/ref&gt;&lt;ref name="bio2"&gt;{{Cite web|url=http://oeop.larc.nasa.gov/hep/hep-astronauts.html|title=NASA Hispanic Astronauts\n|publisher=National Aeronautics and Space Administration|author=NASA|accessdate=November 26, 2006}}&lt;/ref&gt; In May 2004 he became the first person'
&gt;&gt;&gt; ref = re.compile(u'&lt;ref.*?ref&gt;', re.DOTALL)
&gt;&gt;&gt; ref.sub(u'', tst)
u'\'\'\'Joseph Michael "Joe" Acaba\'\'\' (born May 17, 1967) is an [[Teacher|educator]], [[Hydrogeology|hydrogeologist]], and [[NASA]] [[astronaut]]. In May 2004 he became the first person'
</snippet></ROW><ROW><id>12825135</id><snippet>nosetests</snippet></ROW><ROW><id>12825135</id><snippet>python run_tests.py</snippet></ROW><ROW><id>12825135</id><snippet>nose</snippet></ROW><ROW><id>12825135</id><snippet>stdout</snippet></ROW><ROW><id>12825135</id><snippet>nosetests</snippet></ROW><ROW><id>12825135</id><snippet>-s</snippet></ROW><ROW><id>12825135</id><snippet>--nocapture</snippet></ROW><ROW><id>12825135</id><snippet>$ nosetests --nocapture
</snippet></ROW><ROW><id>12825135</id><snippet>print</snippet></ROW><ROW><id>12825135</id><snippet>nosetests</snippet></ROW><ROW><id>12825135</id><snippet>-l DEBUG</snippet></ROW><ROW><id>12825135</id><snippet>--debug=DEBUG</snippet></ROW><ROW><id>12825135</id><snippet>DEBUG</snippet></ROW><ROW><id>12825135</id><snippet>$ nosetests --debug=your-logger-name
</snippet></ROW><ROW><id>12825360</id><snippet>query = """
SELECT a,b,c,d,e,f,g,h
FROM a_very_long_tablename
WHERE a_very_long_sql_statement='is_really_very_long
OR a_very_long_sql_statement= %s
""" % var
</snippet></ROW><ROW><id>12825451</id><snippet>__unicode__</snippet></ROW><ROW><id>12825451</id><snippet>__str__</snippet></ROW><ROW><id>12825451</id><snippet>__str__</snippet></ROW><ROW><id>12825451</id><snippet>__unicode__</snippet></ROW><ROW><id>12825451</id><snippet>def __str__(self):
    return unicode(self).encode('utf-8')
</snippet></ROW><ROW><id>12825470</id><snippet>objects = [] #the object list
with open("path/to/file") as reader: #opens the file
    for line in reader: #iterates the lines
        objects.append(Object(*line.strip().split(", "))) #appends the objects to the list
</snippet></ROW><ROW><id>12825470</id><snippet>parts = line.strip.split(", ") #each item in the line
obj = Object(parts[0], parts[1]) #like doing Objects(item1, item2) from the line.
objects.append(obj) #add the object to the list
</snippet></ROW><ROW><id>12825838</id><snippet>QIcon.fromTheme</snippet></ROW><ROW><id>12825838</id><snippet>kdeglobals</snippet></ROW><ROW><id>12825838</id><snippet>$HOME/.icons</snippet></ROW><ROW><id>12825838</id><snippet>$XDG_DATA_DIRS/icons</snippet></ROW><ROW><id>12825838</id><snippet>:/icons</snippet></ROW><ROW><id>12825838</id><snippet>index.theme</snippet></ROW><ROW><id>12825838</id><snippet>png</snippet></ROW><ROW><id>12825838</id><snippet>svg</snippet></ROW><ROW><id>12825838</id><snippet>QIcon</snippet></ROW><ROW><id>12825838</id><snippet>&gt;&gt;&gt; from PyQt4 import QtGui
&gt;&gt;&gt; app = QtGui.QApplication([])
&gt;&gt;&gt; for path in QtGui.QIcon.themeSearchPaths():
...     print "%s/%s" % (path, QtGui.QIcon.themeName())
... 
/home/ekhumoro/.icons/hicolor
/usr/local/share/icons/hicolor
/usr/share/icons/hicolor
:/icons/hicolor
</snippet></ROW><ROW><id>12825838</id><snippet>$ ln -s icon/theme/directory $HOME/.icons/hicolor
</snippet></ROW><ROW><id>12825929</id><snippet>open('/index'+str(counter)+'.html','w')</snippet></ROW><ROW><id>12826112</id><snippet>import os
open(os.path.join(os.path.dirname(__file__), 'Directory', 'input.txt'))
</snippet></ROW><ROW><id>12826273</id><snippet>pause</snippet></ROW><ROW><id>12826273</id><snippet>import pylab
import time
import random
import matplotlib.pyplot as plt

dat=[0,1]
fig = plt.figure()
ax = fig.add_subplot(111)
Ln, = ax.plot(dat)
ax.set_xlim([0,20])
plt.ion()
plt.show()    
for i in range (18):
    dat.append(random.uniform(0,1))
    Ln.set_ydata(dat)
    Ln.set_xdata(range(len(dat)))
    plt.pause(1)

    print 'done with loop'
</snippet></ROW><ROW><id>12826273</id><snippet>Line2D</snippet></ROW><ROW><id>12826273</id><snippet>pause(interval)
    Pause for *interval* seconds.

    If there is an active figure it will be updated and displayed,
    and the gui event loop will run during the pause.

    If there is no active figure, or if a non-interactive backend
    is in use, this executes time.sleep(interval).

    This can be used for crude animation. For more complex
    animation, see :mod:`matplotlib.animation`.

    This function is experimental; its behavior may be changed
    or extended in a future release.
</snippet></ROW><ROW><id>12826273</id><snippet>matplotlib.animate</snippet></ROW><ROW><id>12826310</id><snippet>&lt;formula type='inline'&gt;&lt;math xmlns='http://www.w3.org/1998/Math/MathML'&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;   &lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;/mrow&gt;&lt;/math&gt;&lt;/formula&gt;
</snippet></ROW><ROW><id>12826310</id><snippet>c.expect("&lt;formula.*formula&gt;");
</snippet></ROW><ROW><id>12826310</id><snippet>print c.match
</snippet></ROW><ROW><id>12826319</id><snippet>try :
    pass
except (ValueError,KeyError):
    pass
</snippet></ROW><ROW><id>12826528</id><snippet>&gt;&gt;&gt; mylist = [[], ['shotgun', 'weapon'], ['pistol', 'weapon'], ['cheesecake', 'f
ood'], []]
&gt;&gt;&gt; print mylist[2][1]
weapon
</snippet></ROW><ROW><id>12826528</id><snippet>mylist[0]</snippet></ROW><ROW><id>12826528</id><snippet>[]</snippet></ROW><ROW><id>12826528</id><snippet>mylist[1][0]</snippet></ROW><ROW><id>12826528</id><snippet>'shotgun'</snippet></ROW><ROW><id>12826824</id><snippet>LOCALE_PATH</snippet></ROW><ROW><id>12827065</id><snippet>from subprocess import Popen, PIPE

gitproc = Popen(['git', 'show-ref'], stdout = PIPE)
(stdout, stderr) = gitproc.communicate()

for row in stdout.split('\n'):
    if row.find('HEAD') != -1:
        hash = row.split()[0]
        break

print hash
</snippet></ROW><ROW><id>12827105</id><snippet>csv</snippet></ROW><ROW><id>12827105</id><snippet>setUp</snippet></ROW><ROW><id>12827177</id><snippet>set</snippet></ROW><ROW><id>12827177</id><snippet>from collections import defaultdict
d = defaultdict(set)
with open(datafile) as f:
    for line in f:
        my_id,item = line.split()
        d[item].add(my_id)

for item in d:
    print item,len(d[item]),sorted(d[item])
</snippet></ROW><ROW><id>12827857</id><snippet>del Programm.window</snippet></ROW><ROW><id>12827885</id><snippet>urlparse</snippet></ROW><ROW><id>12827885</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; zoo = urlparse.urlparse('http://www.example.com/foo?bar=zoo')
&gt;&gt;&gt; urlparse.parse_qs(zoo.query)
{'bar': ['zoo']}
</snippet></ROW><ROW><id>12827901</id><snippet>class String:
    ...

class Set:
    def letters_set(self, stringObj):
        # stringObj is a String instance
        self.let_set = set(re.findall(omissis, stringObj.string))

class Dict:
    ...

    def generate_possible_triplets(self, setObj):
        # setObj is a Set instance
        triplet = [(ch1, ch2, ch3) for ch1 in setObj.let_set
                                   for ch2 in setObj.let_set
                                   for ch3 in setObj.let_set]


aString = String()
aSet = Set()
aDict = Dict()

aSet.letters_set(aString)
aDict.generate_possible_triplets(aSet)
</snippet></ROW><ROW><id>12827901</id><snippet>.string</snippet></ROW><ROW><id>12827901</id><snippet>.let_set</snippet></ROW><ROW><id>12827957</id><snippet>from gdata.youtube import service

USERNAME = 'username@gmail.com'
PASSWORD = 'a_very_long_password'
VIDEO_ID = 'wf_IIbT8HGk'

def comments_generator(client, video_id):
    comment_feed = client.GetYouTubeVideoCommentFeed(video_id=video_id)
    while comment_feed is not None:
        for comment in comment_feed.entry:
             yield comment
        next_link = comment_feed.GetNextLink()
        if next_link is None:
             comment_feed = None
        else:
             comment_feed = client.GetYouTubeVideoCommentFeed(next_link.href)

client = service.YouTubeService()
client.ClientLogin(USERNAME, PASSWORD)

for comment in comments_generator(client, VIDEO_ID):
    author_name = comment.author[0].name.text
    text = comment.content.text
    print("{}: {}".format(author_name, text))
</snippet></ROW><ROW><id>12827957</id><snippet>GetYouTubeVideoCommentFeed</snippet></ROW><ROW><id>12827957</id><snippet>gdata.service.RequestError: {'status': 400, 'body': 'You cannot request beyond item 1000.', 'reason': 'Bad Request'}
</snippet></ROW><ROW><id>12827957</id><snippet>GetYouTubeVideoCommentFeed</snippet></ROW><ROW><id>12827957</id><snippet>'https://gdata.youtube.com/feeds/api/videos/{video_id}/comments?start-index={sta‌​rt_index}&amp;max-results={max_results}'
</snippet></ROW><ROW><id>12827957</id><snippet>start-index &lt;= 1000</snippet></ROW><ROW><id>12827957</id><snippet>max-results &lt;= 50</snippet></ROW><ROW><id>12827958</id><snippet>self._items_list</snippet></ROW><ROW><id>12827958</id><snippet>return "{0}, {1}, {2}".format(self._itemID, self._name, self._products, self._items_list)
</snippet></ROW><ROW><id>12827958</id><snippet>{0}</snippet></ROW><ROW><id>12827958</id><snippet>{1}</snippet></ROW><ROW><id>12827958</id><snippet>{2}</snippet></ROW><ROW><id>12827958</id><snippet>return "{0}, {1}, {2}".format(self._itemID, self._name, self._items_list)
</snippet></ROW><ROW><id>12827958</id><snippet>self._items_list</snippet></ROW><ROW><id>12827958</id><snippet>il = ','.join(['{0}:{1}'.format(*item) for item in self._items_list])
return "{0}, {1}, {2}".format(self._itemID, self._name, il)
</snippet></ROW><ROW><id>12828222</id><snippet>client_flag</snippet></ROW><ROW><id>12828222</id><snippet>found_rows=False</snippet></ROW><ROW><id>12828373</id><snippet>Image.frombuffer(mode, size, data)</snippet></ROW><ROW><id>12828373</id><snippet>Image.open()</snippet></ROW><ROW><id>12828373</id><snippet>import StringIO

data = read_from_database()

file = StringIO.StringIO(data)

image = Image.open(file)
image.thumbnail((128, 128))

outfile = StringIO.StringIO()
image.save(outfile, "JPEG")
</snippet></ROW><ROW><id>12828673</id><snippet>python</snippet></ROW><ROW><id>12828673</id><snippet>java</snippet></ROW><ROW><id>12828673</id><snippet>File file = new File("script.py");
FileOutputStream fis = new FileOutputStream(file);
PrintStream out = new PrintStream(fis);
System.setOut(out);
System.out.println("#!/usr/bin/python");
System.out.println("print 'hello world'");
</snippet></ROW><ROW><id>12828708</id><snippet>In [116]: data = np.array( [  [1,2] , [1,3] ,[3,4], [1,2] , [0,9] ])

In [117]: np.where(np.prod(data == [1,2], axis = -1))
Out[117]: (array([0, 3]),)
</snippet></ROW><ROW><id>12828816</id><snippet>In [1]: import matplotlib

In [2]: matplotlib.get_backend()
Out[2]: 'WXAgg'

In [3]: matplotlib.use('macosx')

In [4]: matplotlib.get_backend()
Out[4]: 'MacOSX'

In [5]: from pylab import *

In [6]: ion()

In [7]: plot([1,2]) # now works fine
</snippet></ROW><ROW><id>12828828</id><snippet>while True</snippet></ROW><ROW><id>12828828</id><snippet>break</snippet></ROW><ROW><id>12828828</id><snippet>print "pick a number, 1 or 2"
while True:
    a = int(raw_input("&gt; ")
    if a == 1:
        print "this"
        break
    if a == 2:
        print "that"
        break
    print "you have made an invalid choice, try again."
</snippet></ROW><ROW><id>12828828</id><snippet>print "pick a number, 1 or 2"
for retry in range(5):
    a = int(raw_input("&gt; ")
    if a == 1:
        print "this"
        break
    if a == 2:
        print "that"
        break
    print "you have made an invalid choice, try again."
else:
    print "you keep making invalid choices, exiting."
    sys.exit(1)
</snippet></ROW><ROW><id>12828852</id><snippet>time.sleep</snippet></ROW><ROW><id>12828852</id><snippet>/* LICENSE: http://docs.python.org/license.html */

/* Implement floatsleep() for various platforms.
   When interrupted (or when another error occurs), return -1 and
   set an exception; else return 0. */

static int
floatsleep(double secs)
{
/* XXX Should test for MS_WINDOWS first! */
#if defined(HAVE_SELECT) &amp;&amp; !defined(__BEOS__) &amp;&amp; !defined(__EMX__)
    struct timeval t;
    double frac;
    frac = fmod(secs, 1.0);
    secs = floor(secs);
    t.tv_sec = (long)secs;
    t.tv_usec = (long)(frac*1000000.0);
    Py_BEGIN_ALLOW_THREADS
    if (select(0, (fd_set *)0, (fd_set *)0, (fd_set *)0, &amp;t) != 0) {
#ifdef EINTR
        if (errno != EINTR) {
#else
        if (1) {
#endif
            Py_BLOCK_THREADS
            PyErr_SetFromErrno(PyExc_IOError);
            return -1;
        }
    }
    Py_END_ALLOW_THREADS
#elif defined(__WATCOMC__) &amp;&amp; !defined(__QNX__)
    ...
</snippet></ROW><ROW><id>12828852</id><snippet>select</snippet></ROW><ROW><id>12828852</id><snippet>select</snippet></ROW><ROW><id>12828852</id><snippet>SIGINT</snippet></ROW><ROW><id>12828852</id><snippet>wait_int</snippet></ROW><ROW><id>12828852</id><snippet>NULL</snippet></ROW><ROW><id>12828852</id><snippet>time_sleep</snippet></ROW><ROW><id>12828852</id><snippet>Py_BEGIN_ALLOW_THREADS</snippet></ROW><ROW><id>12828852</id><snippet>Py_END_ALLOW_THREADS</snippet></ROW><ROW><id>12828993</id><snippet>lis=lis+[x]</snippet></ROW><ROW><id>12828993</id><snippet>'a'</snippet></ROW><ROW><id>12828993</id><snippet>[]</snippet></ROW><ROW><id>12828993</id><snippet>['a']</snippet></ROW><ROW><id>12828993</id><snippet>lis</snippet></ROW><ROW><id>12828993</id><snippet>In [38]: x='a'

In [39]: lis=[]

In [40]: id(lis)
Out[40]: 154680492

In [41]: lis=lis+[x]

In [42]: lis
Out[42]: ['a']

In [43]: id(lis)
Out[43]: 154749100
</snippet></ROW><ROW><id>12828993</id><snippet>lis+=[x]</snippet></ROW><ROW><id>12828993</id><snippet>lis.extend(x)</snippet></ROW><ROW><id>12829078</id><snippet>result = foo() if condition else (2 + 4)
#        ^^^^^                   ^^^^^^^
#      expression               expression
</snippet></ROW><ROW><id>12829078</id><snippet>continue</snippet></ROW><ROW><id>12829078</id><snippet>for</snippet></ROW><ROW><id>12829078</id><snippet>if</snippet></ROW><ROW><id>12829078</id><snippet>if condition:
     ...do something...
else:
     ...do something else...
</snippet></ROW><ROW><id>12829078</id><snippet>expanded = set()

while not someExpression:
    if currentState not in expanded: # you use set, so this condition is not really need
         expanded.add(currentState)
         # some code here
</snippet></ROW><ROW><id>12829156</id><snippet>import_module</snippet></ROW><ROW><id>12829156</id><snippet>scenario1424 = importlib.import_module('scenarios.scenario1424')</snippet></ROW><ROW><id>12829236</id><snippet>a+2.0</snippet></ROW><ROW><id>12829236</id><snippet>a</snippet></ROW><ROW><id>12829236</id><snippet>a</snippet></ROW><ROW><id>12829236</id><snippet>3</snippet></ROW><ROW><id>12829236</id><snippet>a+1.0</snippet></ROW><ROW><id>12829236</id><snippet>4.0</snippet></ROW><ROW><id>12829390</id><snippet>data_files = [('Images', glob('Images/*.*')),
                            ]

includes = ['win32com.decimal_23', 'datetime']

excludes = ['_gtkagg', '_tkagg', 'bsddb', 'curses',  'pywin.debugger',
            'pywin.debugger.dbgcon', 'pywin.dialogs', 'tcl',
            'Tkconstants', 'Tkinter', 'unittest']
packages = []

dll_excludes = ['libgdk-win32-2.0-0.dll', 'libgobject-2.0-0.dll', 'tcl84.dll',
                'tk84.dll','MSVCP90.dll']

setup(
    data_files = data_files,
    options = {"py2exe": {"compressed": 2,
                          "optimize": 2,
                          "includes": includes,
                          "excludes": excludes,
                          "packages": packages,
                          "dll_excludes": dll_excludes,
                          "bundle_files": 1,
                          "dist_dir": "dist",
                          "xref": False,
                          "skip_archive": False,
                          "ascii": False,
                          "custom_boot_script": '',
                         }
              },
    zipfile = None,
    windows = [filename]
    )
</snippet></ROW><ROW><id>12829520</id><snippet>&gt;&gt;&gt; st = '-p 0 0.6724194 0.4034517 -p 0 0 0.4034517 -p 0 0 0.6724194'
&gt;&gt;&gt; [f.strip() for f in st.split('-p') if f]
['0 0.6724194 0.4034517', '0 0 0.4034517', '0 0 0.6724194']
</snippet></ROW><ROW><id>12829520</id><snippet>&gt;&gt;&gt; [', '.join(f.strip().split()) for f in st.split('-p') if f]
['0, 0.6724194, 0.4034517', '0, 0, 0.4034517', '0, 0, 0.6724194']
</snippet></ROW><ROW><id>12829520</id><snippet>&gt;&gt;&gt; [[float(e) for e in f.strip().split()] for f in st.split('-p') if f]
[[0.0, 0.6724194, 0.4034517], [0.0, 0.0, 0.4034517], [0.0, 0.0, 0.6724194]]
</snippet></ROW><ROW><id>12829520</id><snippet>&gt;&gt;&gt; {i:[float(e) for e in f.strip().split()] for i,f in enumerate(st.split('-p')[1:])}
{0: [0.0, 0.6724194, 0.4034517], 1: [0.0, 0.0, 0.4034517], 2: [0.0, 0.0, 0.6724194]}
</snippet></ROW><ROW><id>12829520</id><snippet>&gt;&gt;&gt; re.findall(r'-[a-zA-Z]\s(\d?\.?\d+\s\d?\.?\d+\s\d?\.?\d+)', st)
['0 0.6724194 0.4034517', '0 0 0.4034517', '0 0 0.6724194']
</snippet></ROW><ROW><id>12829678</id><snippet>inject = "'; SELECT name,cardnum FROM credit_cards; --"
most_popular(inject, 'LOL')
</snippet></ROW><ROW><id>12829678</id><snippet>SELECT DISTINCT brand, product, COUNT(*) AS num FROM table1 WHERE brand = ''; SELECT * FROM credit_cards; --'" "GROUP BY product ORDER BY num desc, product asc LIMIT LOL
</snippet></ROW><ROW><id>12829678</id><snippet>cursor.execute()</snippet></ROW><ROW><id>12829678</id><snippet> cursor.execute("SELECT DISTINCT brand, product, COUNT(*) AS num FROM table1 WHERE brand = %s GROUP BY product ORDER BY num desc, product asc LIMIT %s", (brands, num_frequency))
</snippet></ROW><ROW><id>12829771</id><snippet>import re

def pcre_escape_repl(match):
    char = match.group(0)
    if ord(char) in range(32, 127):
        # if this is a printable ascii character, use re.escape instead of a \x escape
        return re.escape(char)
    # replace non-ascii (or non-printable) characters with a \x escape
    return r'\x{' + hex(ord(char))[2:] + '}'

def pcre_escape(s):
    regex = re.compile('.', re.DOTALL)
    return regex.sub(pcre_escape_repl, s)
</snippet></ROW><ROW><id>12829771</id><snippet>&gt;&gt;&gt; print pcre_escape(u"\uC3A9\xe9")
\x{c3a9}\x{e9}
&gt;&gt;&gt; print pcre_escape("[foo]{bar}")
\[foo\]\{bar\}
</snippet></ROW><ROW><id>12829831</id><snippet>key = "H"
my_key = getattr(uinput,"KEY_"+key)
device.emit(my_key, 1) # Press.
device.emit(my_key, 0) # Release.
</snippet></ROW><ROW><id>12829860</id><snippet>&gt;&gt;&gt; mylist = ['X', 'Y', 'Z']
&gt;&gt;&gt; allvar = ' '.join(mylist)
&gt;&gt;&gt; print allvar
X Y Z
</snippet></ROW><ROW><id>12829908</id><snippet>&gt;&gt;&gt; max(d, key=lambda x: d[x]['count'])
'nationwide'
</snippet></ROW><ROW><id>12829988</id><snippet>tile = QtGui.QPixmap("x.png")

def paintEvent(self, pe):
    painter = QtGui.QPainter(self)
    painter.drawTiledPixmap(self.rect(), tile)
    super(Console, self).paintEvent(pe)
</snippet></ROW><ROW><id>12829988</id><snippet>class Console(QtGui.QMainWindow):</snippet></ROW><ROW><id>12829988</id><snippet>paintEvent</snippet></ROW><ROW><id>12829988</id><snippet>QPainter</snippet></ROW><ROW><id>12829988</id><snippet>paintEvent</snippet></ROW><ROW><id>12829988</id><snippet>paintEvent</snippet></ROW><ROW><id>12829988</id><snippet>palette = QtGui.QPalette()
palette.setBrush(QtGui.QPalette.Background, tile)
self.setPalette(palette)
</snippet></ROW><ROW><id>12830020</id><snippet>"lon"</snippet></ROW><ROW><id>12830020</id><snippet> var data = {"lat": 5, "lon": 6}
</snippet></ROW><ROW><id>12830020</id><snippet>X-AppEngine-CityLatLong</snippet></ROW><ROW><id>12830036</id><snippet>f(*(a+[3]))
</snippet></ROW><ROW><id>12830184</id><snippet>assumed_to_be_the_feature_ids_of_the_top_k_features</snippet></ROW><ROW><id>12830184</id><snippet>zero_based=True</snippet></ROW><ROW><id>12830184</id><snippet>load_svmlight_file</snippet></ROW><ROW><id>12830218</id><snippet>def keep_most_relevant(d, cutoff=0.3):
    for k, v in list(d.items()):
        if k == 'count':
            continue
        if 'count' in d and v['count'] &lt; d['count'] * cutoff:
            del d[k]
        else:
            keep_most_relevant(v)
</snippet></ROW><ROW><id>12830218</id><snippet>&gt;&gt;&gt; d1 = {'local': {'count': 7, 'dining-and-nightlife': {'count': 1, 'bar-clubs': {'count': 1}}, 'activities-events': {'count': 6, 'outdoor-adventures': {'count': 4}, 'life-skill-classes': {'count': 2}}}}
&gt;&gt;&gt; keep_most_relevant(d1)
&gt;&gt;&gt; pprint.pprint(d1)
{'local': {'activities-events': {'count': 6,
                                 'life-skill-classes': {'count': 2},
                                 'outdoor-adventures': {'count': 4}},
           'count': 7}}

&gt;&gt;&gt; d2 = {'local': {'count': 11, 'dining-and-nightlife': {'count': 4, 'bar-clubs': {'count': 4}}, 'activities-events': {'count': 6, 'outdoor-adventures': {'count': 4}, 'life-skill-classes': {'count': 2}}}}
&gt;&gt;&gt; keep_most_relevant(d2)
&gt;&gt;&gt; pprint.pprint(d2)
{'local': {'activities-events': {'count': 6,
                                 'life-skill-classes': {'count': 2},
                                 'outdoor-adventures': {'count': 4}},
           'count': 11,
           'dining-and-nightlife': {'bar-clubs': {'count': 4}, 'count': 4}}}
</snippet></ROW><ROW><id>12830299</id><snippet>## JSON version
import json 
# you could use pickle instead, 
# just replace json.dumps/json.loads with pickle/unpickle

import redis

# set up the redis client
r = redis.StrictRedis(host = '', port = 6379, db = 0)

# sample parent dicts
parent0 = {'child0': {0:'a', 1:'b', 2:'c',}, 'child1':{5:'e', 6:'f', 7:'g'}}
parent1 = {'child0': {0:'h', 1:'i', 2:'j',}, 'child1':{5:'k', 6:'l', 7:'m'}}

# save the parents as hashfields, with the children as serialized strings
# bear in mind that JSON will convert the int keys to strings in the dumps() process
r.hmset('parent0', {key: json.dumps(parent0[key]) for key in parent0})
r.hmset('parent1', {key: json.dumps(parent0[key]) for key in parent1})


# Get a child dict from a parent
# say child1 of parent0
childstring = r.hget('parent0', 'child1') 
childdict = json.loads(childstring) 
# this could have been done in a single line... 

# if you want to convert the keys back to ints:
for key in childdict.keys():
    childdict[int(key)] = childdict[key]
    del childdict[key]

print childdict
</snippet></ROW><ROW><id>12830299</id><snippet>## pickle version
# For pickle, you need a file-like object. 
# StringIO is the native python one, whie cStringIO 
# is the c implementation of the same.
# cStringIO is faster
# see http://docs.python.org/library/stringio.html and
# http://www.doughellmann.com/PyMOTW/StringIO/ for more information
import pickle
# Find the best implementation available on this platform
try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO

import redis

# set up the redis client
r = redis.StrictRedis(host = '', port = 6379, db = 0)

# sample parent dicts
parent0 = {'child0': {0:'a', 1:'b', 2:'c',}, 'child1':{5:'e', 6:'f', 7:'g'}}
parent1 = {'child0': {0:'h', 1:'i', 2:'j',}, 'child1':{5:'k', 6:'l', 7:'m'}}

# define a class with a reusable StringIO object
class Pickler(object):
    """Simple helper class to use pickle with a reusable string buffer object"""
    def __init__(self):
        self.tmpstr = StringIO()

    def __del__(self):
        # close the StringIO buffer and delete it
        self.tmpstr.close()
        del self.tmpstr

    def dump(self, obj):
        """Pickle an object and return the pickled string"""
        # empty current buffer
        self.tmpstr.seek(0,0)
        self.tmpstr.truncate(0)
        # pickle obj into the buffer
        pickle.dump(obj, self.tmpstr)
        # move the buffer pointer to the start
        self.tmpstr.seek(0,0)
        # return the pickled buffer as a string
        return self.tmpstr.read()

    def load(self, obj):
        """load a pickled object string and return the object"""
        # empty the current buffer
        self.tmpstr.seek(0,0)
        self.tmpstr.truncate(0)
        # load the pickled obj string into the buffer
        self.tmpstr.write(obj)
        # move the buffer pointer to start
        self.tmpstr.seek(0,0)
        # load the pickled buffer into an object
        return pickle.load(self.tmpstr)


pickler = Pickler()

# save the parents as hashfields, with the children as pickled strings, 
# pickled using our helper class
r.hmset('parent0', {key: pickler.dump(parent0[key]) for key in parent0})
r.hmset('parent1', {key: pickler.dump(parent1[key]) for key in parent1})


# Get a child dict from a parent
# say child1 of parent0
childstring = r.hget('parent0', 'child1') 
# this could be done in a single line... 
childdict = pickler.load(childstring) 

# we don't need to do any str to int conversion on the keys.

print childdict
</snippet></ROW><ROW><id>12830344</id><snippet>print html</snippet></ROW><ROW><id>12830344</id><snippet>page.read()</snippet></ROW><ROW><id>12830344</id><snippet>StringIO</snippet></ROW><ROW><id>12830344</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>12830344</id><snippet>soup = BeautifulSoup(html, 'xml')
</snippet></ROW><ROW><id>12830344</id><snippet>mech.set_handle_robots(False)
url = "http://storage.googleapis.com/patents/retro/2011/ad20111231-02.zip"
</snippet></ROW><ROW><id>12830344</id><snippet>robots.txt</snippet></ROW><ROW><id>12830344</id><snippet>Selenium</snippet></ROW><ROW><id>12830344</id><snippet>mechanize</snippet></ROW><ROW><id>12830466</id><snippet>lambda</snippet></ROW><ROW><id>12830466</id><snippet>partial</snippet></ROW><ROW><id>12830466</id><snippet>aname</snippet></ROW><ROW><id>12830466</id><snippet>partial</snippet></ROW><ROW><id>12830466</id><snippet>fetch_urls</snippet></ROW><ROW><id>12830466</id><snippet>def fetch_urls(aStringVar):
    print aStringVar.get()   

parfetch = partial(fetch_urls, aname)
</snippet></ROW><ROW><id>12830466</id><snippet>lambda</snippet></ROW><ROW><id>12830466</id><snippet>lambdafetch = lambda: fetch_urls(aname.get())
</snippet></ROW><ROW><id>12830466</id><snippet>lambda</snippet></ROW><ROW><id>12830466</id><snippet>aname</snippet></ROW><ROW><id>12830466</id><snippet>lambdafetch = lambda s=aname: fetch_urls(s.get())
</snippet></ROW><ROW><id>12830469</id><snippet>import urllib
import urllib2

params = urllib.urlencode({'hello':'there', 'foo': 'bar'})
urllib2.urlopen('http://somesite.com/get?' + params)
</snippet></ROW><ROW><id>12830471</id><snippet>def fib1(n, memo={}):
    if n in memo:
        return memo[n]
    if n &lt; 2:
        memo[n] = 1
    else:
        memo[n] =  fib1(n-1) + fib1(n-2)
    return memo[n]
</snippet></ROW><ROW><id>12830471</id><snippet>n &lt; 2</snippet></ROW><ROW><id>12830471</id><snippet>def fib1(n, memo={0: 1, 1: 1}):
    if n in memo:
        return memo[n]
    else:
        memo[n] =  fib1(n-1) + fib1(n-2)
    return memo[n]
</snippet></ROW><ROW><id>12830471</id><snippet>def fib1(n, memo={0: 1, 1: 1}):
    return memo.setdefault(n, memo.get(n) or fib1(n-1) + fib1(n-2))
</snippet></ROW><ROW><id>12830535</id><snippet>order_by</snippet></ROW><ROW><id>12830535</id><snippet>query = query.order_by(MyTable.column_name)
</snippet></ROW><ROW><id>12830538</id><snippet>del request.vars.file
redirect(URL('form2', vars=request.vars))
</snippet></ROW><ROW><id>12830542</id><snippet>ensureIndex</snippet></ROW><ROW><id>12830542</id><snippet>create_index</snippet></ROW><ROW><id>12830643</id><snippet>count = 0
total = 0
ask = raw_input("Do you want to enter a number? (Y/N)")
try:
    while ask == "Y":
        numbers = float(raw_input("Enter number"))
        count = count + 1
        total = total + numbers
        con_ask = raw_input("Do you want to continue entering a number? (Y/N)")
        if con_ask == "Y":
            continue
        elif con_ask == "N":
            print "The average of", count, "numbers is", total / count
            break
except:
    print "Zero Division Occured. Average cannot be calculated"
</snippet></ROW><ROW><id>12830807</id><snippet>.__next__()</snippet></ROW><ROW><id>12830807</id><snippet>.next()</snippet></ROW><ROW><id>12830807</id><snippet>repr(x)</snippet></ROW><ROW><id>12830807</id><snippet>x.__repr__()</snippet></ROW><ROW><id>12830830</id><snippet>scanports</snippet></ROW><ROW><id>12830830</id><snippet>end</snippet></ROW><ROW><id>12830830</id><snippet>ports</snippet></ROW><ROW><id>12830830</id><snippet>connect</snippet></ROW><ROW><id>12830974</id><snippet>filter</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>my_reverse</snippet></ROW><ROW><id>12830974</id><snippet>revfilter_beta</snippet></ROW><ROW><id>12830974</id><snippet>revfilter_alpha</snippet></ROW><ROW><id>12830974</id><snippet>filter</snippet></ROW><ROW><id>12830974</id><snippet>reverse</snippet></ROW><ROW><id>12830974</id><snippet>filter</snippet></ROW><ROW><id>12830974</id><snippet>O(n)</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>O(n/2)</snippet></ROW><ROW><id>12830974</id><snippet>O(4n)</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>filter</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>lst[0]</snippet></ROW><ROW><id>12830974</id><snippet>f</snippet></ROW><ROW><id>12830974</id><snippet>filter(1)</snippet></ROW><ROW><id>12830974</id><snippet>f + copy(0) + filter(0)</snippet></ROW><ROW><id>12830974</id><snippet>copy(n)</snippet></ROW><ROW><id>12830974</id><snippet>f</snippet></ROW><ROW><id>12830974</id><snippet>filter(2)</snippet></ROW><ROW><id>12830974</id><snippet>filter</snippet></ROW><ROW><id>12830974</id><snippet>f + copy(1) + filter(1)</snippet></ROW><ROW><id>12830974</id><snippet>filter(n)</snippet></ROW><ROW><id>12830974</id><snippet>1 + copy(n-1) + filter(n-1)</snippet></ROW><ROW><id>12830974</id><snippet>copy(n)</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>filter(n) = f + n-1 + filter(n-1)</snippet></ROW><ROW><id>12830974</id><snippet>filter(n-1)</snippet></ROW><ROW><id>12830974</id><snippet>filter(n) = f + n-1 + filter(n-1)
          = 1 + n-1 + (f + n-2 + filter(n-2))
          = f + n-1 + f + n-2 + filter(n-2)
          = 2f + 2n-3 + filter(n-2)
          = 2f + 2n-3 + (f + n-3 + filter(n-3))
          = 3f + 3n-6 + filter(n-3)
          = 3f + 3n-6 + (f + n-4 + filter(n-4))
          = 4f + 4n-10 + filter(n-4)
          = 5f + 5n-15 + filter(n-5)
          ...
</snippet></ROW><ROW><id>12830974</id><snippet>x</snippet></ROW><ROW><id>12830974</id><snippet>1, 3, 6, 10, 15</snippet></ROW><ROW><id>12830974</id><snippet>1</snippet></ROW><ROW><id>12830974</id><snippet>1+2</snippet></ROW><ROW><id>12830974</id><snippet>1+2+3</snippet></ROW><ROW><id>12830974</id><snippet>1+2+3+4</snippet></ROW><ROW><id>12830974</id><snippet>1</snippet></ROW><ROW><id>12830974</id><snippet>x</snippet></ROW><ROW><id>12830974</id><snippet>x*(x-1)/2</snippet></ROW><ROW><id>12830974</id><snippet>          = x*f + x*n - x*(x-1)/2 + filter(n-x)
</snippet></ROW><ROW><id>12830974</id><snippet>x</snippet></ROW><ROW><id>12830974</id><snippet>x</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>filter(n-n)</snippet></ROW><ROW><id>12830974</id><snippet>filter(0)</snippet></ROW><ROW><id>12830974</id><snippet>1</snippet></ROW><ROW><id>12830974</id><snippet>filter(n) = n*f + n*n - n*(n-1)/2 + 1
</snippet></ROW><ROW><id>12830974</id><snippet>filter(n) = n*f + n^2 - (n^2 - n)/2 + 1
          = n*f + n^2 - n^2/2 + n/2 + 1
          = n^2 - n^2/2 + f*n + n/2 + 1
          = (1/2)n^2 + (f + 1/2)n + 1
</snippet></ROW><ROW><id>12830974</id><snippet>Θ((1/2)n^2 + (f + 1/2)n + 1)</snippet></ROW><ROW><id>12830974</id><snippet>f</snippet></ROW><ROW><id>12830974</id><snippet>f</snippet></ROW><ROW><id>12830974</id><snippet>Θ((1/2)n^2 + (3/2)n + 1)</snippet></ROW><ROW><id>12830974</id><snippet>copy(n)</snippet></ROW><ROW><id>12830974</id><snippet>copy(n)</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>n^2</snippet></ROW><ROW><id>12830974</id><snippet>Θ(n^2)</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>copy</snippet></ROW><ROW><id>12830974</id><snippet>n*n = n^2</snippet></ROW><ROW><id>12830974</id><snippet>Θ(n^2)</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>n + (n-1) + (n-2) + (n-3) + ... + 1</snippet></ROW><ROW><id>12830974</id><snippet>n*n - (1 + 2 + 3 + ... + n)</snippet></ROW><ROW><id>12830974</id><snippet>n*n - n*(n-1)/2</snippet></ROW><ROW><id>12830974</id><snippet>(1/2)n^2 + (1/2)n</snippet></ROW><ROW><id>12830974</id><snippet>0</snippet></ROW><ROW><id>12830974</id><snippet>f</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>1</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>1 + 1 + 1 + ... + 1</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12830974</id><snippet>n</snippet></ROW><ROW><id>12831223</id><snippet>import sys
sys.path.append("/usr/lib/python2.7/dist-packages/gtk")
</snippet></ROW><ROW><id>12831223</id><snippet>export PATH=$PATH:/my/custom/path
</snippet></ROW><ROW><id>12831223</id><snippet>source venv/bin/activate
</snippet></ROW><ROW><id>12831223</id><snippet>echo $PATH
</snippet></ROW><ROW><id>12831223</id><snippet>mkdir -p venv/lib/python2.7/dist-packages/
cd venv/lib/python2.7/dist-packages/
</snippet></ROW><ROW><id>12831223</id><snippet>ln -s /usr/lib/python2.7/dist-packages/glib/ glib
ln -s /usr/lib/python2.7/dist-packages/gobject/ gobject
ln -s /usr/lib/python2.7/dist-packages/gtk-2.0* gtk-2.0
ln -s /usr/lib/python2.7/dist-packages/pygtk.pth pygtk.pth
ln -s /usr/lib/python2.7/dist-packages/cairo cairo
</snippet></ROW><ROW><id>12831223</id><snippet>ln -s /usr/lib/python2.7/dist-packages/gi gi
</snippet></ROW><ROW><id>12831260</id><snippet>sqlite3</snippet></ROW><ROW><id>12831260</id><snippet>sqlite-devel</snippet></ROW><ROW><id>12831260</id><snippet>get_table_list()</snippet></ROW><ROW><id>12831260</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; conn = sqlite3.connect('/path/to/sqlite/file')
&gt;&gt;&gt; curs = conn.cursor()
&gt;&gt;&gt; curs.execute("""
... SELECT name FROM sqlite_master
... WHERE type='table' AND NOT name='sqlite_sequence'
... ORDER BY name""")
&lt;sqlite3.Cursor object at 0xb7774ca0&gt;
&gt;&gt;&gt; curs.fetchall()
[(u'my_app_mytable',), (u'my_app_myothertable',)]
</snippet></ROW><ROW><id>12831260</id><snippet>sqlite3</snippet></ROW><ROW><id>12831312</id><snippet>=</snippet></ROW><ROW><id>12831312</id><snippet>c = C()</snippet></ROW><ROW><id>12831312</id><snippet>c</snippet></ROW><ROW><id>12831312</id><snippet>c</snippet></ROW><ROW><id>12831312</id><snippet>C</snippet></ROW><ROW><id>12831453</id><snippet>\w+</snippet></ROW><ROW><id>12831453</id><snippet>w</snippet></ROW><ROW><id>12831453</id><snippet>-</snippet></ROW><ROW><id>12831453</id><snippet>[\w\(\)\+]+</snippet></ROW><ROW><id>12831453</id><snippet>[-\w\/\?:=\.\s!\(\)"\+]+</snippet></ROW><ROW><id>12831453</id><snippet>.</snippet></ROW><ROW><id>12831453</id><snippet>.+</snippet></ROW><ROW><id>12831470</id><snippet>&gt;&gt;&gt; t1 = "\x00\x00\xBF\x13\xDB\x79\xC0\x00" # expected: 2012-10-04 01:00:51.759
&gt;&gt;&gt; import struct
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; GPS_EPOCH = datetime.datetime(1980, 1, 6)
&gt;&gt;&gt; t1_unpacked = struct.unpack('&lt;q', t1)[0]
&gt;&gt;&gt; t1_seconds = t1_unpacked / 52428800
&gt;&gt;&gt; t1_us = int(round((t1_unpacked % 52428800) / 52.428800, 0))
&gt;&gt;&gt; GPS_EPOCH + datetime.timedelta(seconds=t1_seconds, microseconds=t1_us)
datetime.datetime(2012, 10, 4, 1, 0, 51, 758750)
</snippet></ROW><ROW><id>12831470</id><snippet>def gps_time(timestamp):
    unpacked = struct.unpack('&lt;q', timestamp)[0]
    seconds = unpacked / 52428800
    microseconds = int(round((unpacked % 52428800) / 52.428800, 0))
    return GPS_EPOCH + datetime.timedelta(seconds=seconds, microseconds=microseconds)

&gt;&gt;&gt; gps_time(t2)
datetime.datetime(2012, 10, 4, 1, 0, 51, 760000)
&gt;&gt;&gt; gps_time(t3)
datetime.datetime(2012, 10, 4, 1, 0, 51, 762500)
&gt;&gt;&gt; gps_time(t4)
datetime.datetime(2012, 10, 4, 1, 45, 40, 960000)
</snippet></ROW><ROW><id>12831617</id><snippet>[?&amp;]q=([^&amp;#]*)
</snippet></ROW><ROW><id>12831617</id><snippet>import urlparse
pr = urlparse.urlparse(url)
qs = urlparse.parse_qs(pr.query)['q']
</snippet></ROW><ROW><id>12831617</id><snippet>%</snippet></ROW><ROW><id>12831665</id><snippet>w = a[[0, -1]]
</snippet></ROW><ROW><id>12831725</id><snippet>category</snippet></ROW><ROW><id>12831725</id><snippet>int('5')</snippet></ROW><ROW><id>12831725</id><snippet>foosite.com/category/social/
</snippet></ROW><ROW><id>12831725</id><snippet>category</snippet></ROW><ROW><id>12831725</id><snippet>social</snippet></ROW><ROW><id>12831725</id><snippet># urls.py
url(r'^category/(?P&lt;category&gt;\d+)/$', 'all_partners'),
</snippet></ROW><ROW><id>12831725</id><snippet>def all_partners(request,category):
    p = Content.objects.filter(category__content_category=category)
    return render_to_response('reserve/templates/category.html', {'p':p},
        context_instance=RequestContext(request))
</snippet></ROW><ROW><id>12831821</id><snippet>request.route_url(login)
</snippet></ROW><ROW><id>12831821</id><snippet>request.route_url('login')
</snippet></ROW><ROW><id>12831959</id><snippet>class MyClass(object):
    def __init__(self):
        self.p = Process(target=realwork,args=(up,down,middle,num))
    def fun1(self):
        self.p.start()

    def fun2(self):
        self.p.terminate()
</snippet></ROW><ROW><id>12831959</id><snippet>action = Myclass()
action.fun1()
action.fun2() 
</snippet></ROW><ROW><id>12831959</id><snippet>def fun1():
    global p
    p = Process(target=realwork,args=(up,down,middle,num))
    p.start()

def fun2():
    p.terminate()
</snippet></ROW><ROW><id>12832823</id><snippet>import os
import paramiko

localpath = '~/pathNameForToday/'
os.system('mkdir ' + localpath)
ssh = paramiko.SSHClient() 
ssh.load_host_keys(os.path.expanduser(os.path.join("~", ".ssh", "known_hosts")))
ssh.connect(server, username=username, password=password)
sftp = ssh.open_sftp()
sftp.get(remotepath, localpath)
sftp.close()
ssh.close() 
</snippet></ROW><ROW><id>12832823</id><snippet>import os
import re
import glob

filesiwant = re.compile('^HM.+') #if your files follow a more specific pattern and you don't know regular expressions you can give me a sample name and i'll give you the regex4it
path = '/server2/filedir/'
for infile in glob.glob( os.path.join(path, '*') ):
    if filesiwant.match(infile):
         print "current file is: " + infile
</snippet></ROW><ROW><id>12832823</id><snippet>import os
for infile in os.listdir('/server2/filedir/'):
    ...`
</snippet></ROW><ROW><id>12832960</id><snippet>base.html</snippet></ROW><ROW><id>12832960</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>12833152</id><snippet>def validate_move_rule(from_position, to_position, position_hash):
    to_pos_x = ord(to_position[0])
    to_pos_y = int(to_position[1])
    delta_pos_x = to_pos_x - ord(from_position[0]) # x
    delta_pos_y = to_pos_y - int(from_position[1]) # y

    delta_x = 0
    delta_y = 0

    if abs(delta_pos_x) == abs(delta_pos_y): 
        # diagonal
        delta_x = 1 if delta_pos_x &gt; 0 else -1
        delta_y = 1 if delta_pos_y &gt; 0 else -1
    elif from_position[1] == to_position[1]: 
        # horizontal     
        delta_x = 1 if delta_pos_x &gt; 0 else -1
    elif from_position[0] == to_position[0]: 
        # vertical     
        delta_y = 1 if delta_pos_y &gt; 0 else -1
    else:
        puts("Error: it's not a legal move(hint: must diagonal horizontal vertical)")
        return False

    new_position = chr(to_pos_x + delta_x) + str(to_pos_y + delta_y)
    return new_position in position_hash
</snippet></ROW><ROW><id>12833397</id><snippet>pip install supervisor</snippet></ROW><ROW><id>12833397</id><snippet>sudo echo_supervisord_conf &gt; /etc/supervisord.conf</snippet></ROW><ROW><id>12833397</id><snippet>pip install supervisor
sudo echo_supervisord_conf &gt; /etc/supervisord.conf
sudo wget -O - -o /dev/null https://raw.github.com/ask/django-celery/master/contrib/supervisord/celeryd.conf &gt;&gt; /etc/supervisor.conf
sudo $EDITOR /etc/supervisor.conf
</snippet></ROW><ROW><id>12833541</id><snippet>words = ['apple', 'orange', 'pear', 'milk', 'otter', 'snake','iguana','tiger','eagle']
for word in words:
    if word[0] in 'aeiou':
        print(word)
</snippet></ROW><ROW><id>12833541</id><snippet>words_starting_with_vowel = [word for word in words if word[0] in 'aeiou']
</snippet></ROW><ROW><id>12833700</id><snippet>a = [[1, 2, 3], [2, 3], [3, 4, 5, 6, 7]]

s = set.intersection(*map(set, a))
</snippet></ROW><ROW><id>12833700</id><snippet>s</snippet></ROW><ROW><id>12833700</id><snippet>3</snippet></ROW><ROW><id>12834091</id><snippet>for i, item in enumerate(test):
    if i and i % 4 == 0:
        f.write("\n")
    f.write("%-9s|   " % item)
</snippet></ROW><ROW><id>12834206</id><snippet>403 Access Forbidden error</snippet></ROW><ROW><id>12834206</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>12834206</id><snippet>import urllib2
import lxml.html as lh

req = urllib2.Request("http://www.ip-adress.com/ip_tracer/157.123.22.11", headers={'User-Agent' : "Magic Browser"})
html = urllib2.urlopen(req).read()
doc=lh.fromstring(html)
print ''.join(doc.xpath('.//*[@class="odd"]')[-1].text_content().split())
&gt;&gt;&gt; 
Organization:ZenithDataSystems
</snippet></ROW><ROW><id>12834270</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--use-files', nargs='*', default=['a', 'b', 'c'], help='HI!')
args = parser.parse_args()
print args
</snippet></ROW><ROW><id>12834270</id><snippet>wim@wim-zenbook:~$ python /tmp/spam.py 
Namespace(use_files=['a', 'b', 'c'])
wim@wim-zenbook:~$ python /tmp/spam.py --use-files hello world
Namespace(use_files=['hello', 'world'])
wim@wim-zenbook:~$ python /tmp/spam.py --use-files aleph-null bottles of beer on the wall, aleph-null bottles of beer, take one down pass it around, aleph-null bottles of beer on the wall
Namespace(use_files=['aleph-null', 'bottles', 'of', 'beer', 'on', 'the', 'wall,', 'aleph-null', 'bottles', 'of', 'beer,', 'take', 'one', 'down', 'pass', 'it', 'around,', 'aleph-null', 'bottles', 'of', 'beer', 'on', 'the', 'wall'])
</snippet></ROW><ROW><id>12834326</id><snippet>os</snippet></ROW><ROW><id>12834326</id><snippet>walk</snippet></ROW><ROW><id>12834326</id><snippet>for current_path, directory, files in walk("/some/path"):
    # current_path is the full path of the directory we are currently in
    # directory is the name of the directory
    # files is a list of file names in this directory
</snippet></ROW><ROW><id>12834326</id><snippet>os.path</snippet></ROW><ROW><id>12834326</id><snippet>glob</snippet></ROW><ROW><id>12834326</id><snippet>for csv_file in glob(/some/path/*/*.csv"):
    # csv_file is the full path to the csv file.
</snippet></ROW><ROW><id>12834616</id><snippet># then...

timeDiff = {}
for row in rows:
    timestamp1 = time.mktime(row[0].timetuple())
    timestamp2 = time.mktime(row[0].timetuple())
    timeDiff[identifier] = timestamp2 - timestamp1 #still need to assoc timediff with row... maybe you need to query a unique identifyer also?

#and possibly a separate... (this may not be necessary depending on your application code.  do you really need -1's for irrelevant data or can you just return the important data?)

select listvar[1], listvar[2] from listvar[0] where listvar[1] is null or listvar[2] is null

for row in rows:
    timeDiff[identifier] = -1 # or None
</snippet></ROW><ROW><id>12834654</id><snippet>MainFrame.pack(expand=True, fill="both")</snippet></ROW><ROW><id>12834654</id><snippet>borderwith</snippet></ROW><ROW><id>12834654</id><snippet>bd</snippet></ROW><ROW><id>12834654</id><snippet>relief=SUNKEN</snippet></ROW><ROW><id>12834654</id><snippet>background</snippet></ROW><ROW><id>12834717</id><snippet>&gt;&gt;&gt; date_rng = pd.date_range('20060101','20060105',freq='D')
&gt;&gt;&gt; pd.Series(date_rng.format())

0    2006-01-01
1    2006-01-02
2    2006-01-03
3    2006-01-04
4    2006-01-05
</snippet></ROW><ROW><id>12834880</id><snippet>s = sum(avgListed)
</snippet></ROW><ROW><id>12834880</id><snippet>&gt;&gt;&gt; avgListed = [1.2, 3.3,4.6]
&gt;&gt;&gt; sum(avgListed)
9.1
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12834986</id><snippet>argparse</snippet></ROW><ROW><id>12834986</id><snippet>--</snippet></ROW><ROW><id>12834986</id><snippet>-</snippet></ROW><ROW><id>12834986</id><snippet>_</snippet></ROW><ROW><id>12834986</id><snippet>arg.pm_export</snippet></ROW><ROW><id>12835011</id><snippet>a = a + 1
</snippet></ROW><ROW><id>12835011</id><snippet>a</snippet></ROW><ROW><id>12835011</id><snippet>some_list = some_list + [5]</snippet></ROW><ROW><id>12835011</id><snippet>some_list.append(5)</snippet></ROW><ROW><id>12835011</id><snippet>import csv
a=8   
mylist = [a,'2','3']    
with open("myfile.csv", "wb") as myfile:
    wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)    
    wr.writerow(mylist)    
    mylist[0] = mylist[0] + 1  ####  here you modify a list
    wr.writerow(mylist)
</snippet></ROW><ROW><id>12835112</id><snippet>x = 1 + 2

print("result is: " + str(x))
</snippet></ROW><ROW><id>12835637</id><snippet>__new__</snippet></ROW><ROW><id>12835637</id><snippet>__call__</snippet></ROW><ROW><id>12835637</id><snippet>datetime.datetime</snippet></ROW><ROW><id>12835637</id><snippet>strptime</snippet></ROW><ROW><id>12835637</id><snippet>__new__</snippet></ROW><ROW><id>12835637</id><snippet>datetime</snippet></ROW><ROW><id>12835637</id><snippet>__new__</snippet></ROW><ROW><id>12835637</id><snippet>__init__</snippet></ROW><ROW><id>12835637</id><snippet>__new__</snippet></ROW><ROW><id>12835659</id><snippet>write_stuff()</snippet></ROW><ROW><id>12835659</id><snippet>count = 0

def write_stuff():
    global count

    section = "test" 
    item = "oh hey there" 
    conf_filename = "test.conf" 

    conf = ConfigParser.ConfigParser() 
    conf.readfp(open(conf_filename, 'r', 0)) 

    timestamp = datetime.now().strftime("%Y-%m-%d_%H%M%S")+ "_%s" % count
    count += 1

    conf.set(section, timestamp, item) 

    with open(conf_filename, "w", 0) as conf_file: 
        conf.write(conf_file) 
</snippet></ROW><ROW><id>12835692</id><snippet>import re
import sys

with open('somefile.csv', 'r') as filehandle:
    for text in filehandle:
        b = re.search("([a-zA-Z]+);([a-z\sA-Z]+);([a-zA-Z]*);([0-9^-]+)\n?",text)
        print (b.group(2),b.group(1),b.group(3),b.group(4))
</snippet></ROW><ROW><id>12835692</id><snippet>split</snippet></ROW><ROW><id>12835792</id><snippet>map</snippet></ROW><ROW><id>12835792</id><snippet>&gt;&gt;&gt; map(chr, range(65, 91))
['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
&gt;&gt;&gt; map(chr, range(97, 123))
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
&gt;&gt;&gt; a = map(chr, range(65, 70))
&gt;&gt;&gt; a
['A', 'B', 'C', 'D', 'E']
</snippet></ROW><ROW><id>12835951</id><snippet>A = "Hello"
B = 12
C = "This is C"
</snippet></ROW><ROW><id>12835951</id><snippet>my_dict = {}
my_dict["A"] = "Hello"
my_dict["B"] = 12
my_dict["C"] = "This is C"
</snippet></ROW><ROW><id>12835951</id><snippet>mynames = ["A","B","C"]
print [my_dict[key] for key in mynames]
</snippet></ROW><ROW><id>12835951</id><snippet>&gt;&gt;&gt; my_dict = {}
&gt;&gt;&gt; my_dict["A"] = "Hello"
&gt;&gt;&gt; my_dict["B"] = 12
&gt;&gt;&gt; my_dict["C"] = "This is C"
&gt;&gt;&gt; mynames = ["A","B","C"]
&gt;&gt;&gt; print [my_dict[key] for key in mynames]
['Hello', 12, 'This is C']
</snippet></ROW><ROW><id>12836173</id><snippet>tuple</snippet></ROW><ROW><id>12836173</id><snippet>list</snippet></ROW><ROW><id>12836173</id><snippet>&gt;&gt;&gt; l = [4,5,6]
&gt;&gt;&gt; tuple(l)
(4, 5, 6)
</snippet></ROW><ROW><id>12836466</id><snippet>str()</snippet></ROW><ROW><id>12836466</id><snippet>
 FILTER (str(?fname) = """+f1Str+""")
</snippet></ROW><ROW><id>12836466</id><snippet>
FILTER (regex(str(?fname),"""+f1Str+""","i"))
</snippet></ROW><ROW><id>12836704</id><snippet>def product_no_repeats(*args):
    for p in itertools.product(*args):
        if len(set(p)) == len(p):
            yield p
</snippet></ROW><ROW><id>12836704</id><snippet>def reservoir(it, k):
    ls = [next(it) for _ in range(k)]
    for i, x in enumerate(it, k + 1):
        j = random.randint(0, i)
        if j &lt; k:
            ls[j] = x
    return ls

xs = range(0, 3)
ys = range(0, 4)
zs = range(0, 5)

size = 4

print reservoir(product_no_repeats(xs, ys, zs), size)
</snippet></ROW><ROW><id>12836739</id><snippet>d.binaryString(7).split()
</snippet></ROW><ROW><id>12836739</id><snippet>"{0:12b}".format(7).split()
</snippet></ROW><ROW><id>12836739</id><snippet>['111'].
</snippet></ROW><ROW><id>12836739</id><snippet>[int(c) for c in "{0:012b}".format(7)]
</snippet></ROW><ROW><id>12836739</id><snippet>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1]
</snippet></ROW><ROW><id>12837138</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>12837138</id><snippet>import collections

ab = collections.namedtuple("AB", "a b")(a=4, b=5)
test(ab)
</snippet></ROW><ROW><id>12837695</id><snippet>A</snippet></ROW><ROW><id>12837695</id><snippet>B</snippet></ROW><ROW><id>12837695</id><snippet>arr1</snippet></ROW><ROW><id>12837695</id><snippet>arr2</snippet></ROW><ROW><id>12837695</id><snippet>[0] * A + [1] * B
</snippet></ROW><ROW><id>12837695</id><snippet>arr1</snippet></ROW><ROW><id>12837695</id><snippet>arr2</snippet></ROW><ROW><id>12837695</id><snippet>&gt;&gt;&gt; def make_interleave(arr1, arr2, permutation):
...     iters = [iter(arr1), iter(arr2)]
...     return "".join(iters[i].next() for i in permutation)
... 
&gt;&gt;&gt; make_interleave("ab", "cde", [1, 0, 0, 1, 1])
'cabde'
</snippet></ROW><ROW><id>12837695</id><snippet>next_permutation</snippet></ROW><ROW><id>12837695</id><snippet>def unique_permutations(seq):
    """
    Yield only unique permutations of seq in an efficient way.

    A python implementation of Knuth's "Algorithm L", also known from the 
    std::next_permutation function of C++, and as the permutation algorithm 
    of Narayana Pandita.
    """

    # Precalculate the indices we'll be iterating over for speed
    i_indices = range(len(seq) - 1, -1, -1)
    k_indices = i_indices[1:]

    # We use a good old-fashioned temporary variable for a little extra speed
    tmp = 0

    # The algorithm specifies to start with a sorted version
    seq = sorted(seq)

    while True:
        yield seq

        # Working backwards from the last-but-one index,             k
        # we find the index of the first decrease in value.    0 0 1 0 1 1 1 0
        for k in k_indices:
            if seq[k] &lt; seq[k + 1]:
                break
        else:
            # Introducing the slightly unknown python for-else syntax:
            # else is executed only if the break statement was never reached.
            # If this is the case, seq is weakly decreasing, and we're done.
            return

        # Get item from sequence only once, for speed
        k_val = seq[k]

        # Working backwards starting with the last item,             k     i
        # find the first one greater than the one at k         0 0 1 0 1 1 1 0
        for i in i_indices:
            if k_val &lt; seq[i]:
                break

        # Swap them in the most efficient (but least readable) way
        tmp = seq[k]
        seq[k] = seq[i]                                      #       k     i
        seq[i] = tmp                                         # 0 0 1 1 1 1 0 0

        # Reverse the part after but not                             k
        # including k, also efficiently.                       0 0 1 1 0 0 1 1
        seq[k + 1:] = seq[-1:k:-1]
</snippet></ROW><ROW><id>12837987</id><snippet>def xaxis(event):
   global x1, y1
   x1, y1 = (event.x - 1), (event.y - 1)

def yaxis(event):
    global x2, y2
    x2, y2 = (event.x + 1), (event.y + 1)
</snippet></ROW><ROW><id>12837987</id><snippet>w.bind("&lt;ButtonRelease-1&gt;", yaxis)
w.bind("&lt;ButtonRelease-1&gt;", create)
</snippet></ROW><ROW><id>12837987</id><snippet>import Tkinter as tk

class ExampleApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.x = self.y = 0
        self.canvas = tk.Canvas(self, width=400, height=400, cursor="cross")
        self.canvas.pack(side="top", fill="both", expand=True)
        self.canvas.bind("&lt;ButtonPress-1&gt;", self.on_button_press)
        self.canvas.bind("&lt;ButtonRelease-1&gt;", self.on_button_release)

    def on_button_press(self, event):
        self.x = event.x
        self.y = event.y

    def on_button_release(self, event):
        x0,y0 = (self.x, self.y)
        x1,y1 = (event.x, event.y)

        self.canvas.create_rectangle(x0,y0,x1,y1, fill="black")

if __name__ == "__main__":
    app = ExampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>12838860</id><snippet>setUpClass()</snippet></ROW><ROW><id>12838860</id><snippet>class A(unittest2.TestCase):
    CHECK = check_function()

    @unittest2.skipIf(CHECK, "skip message 1")
    def test_1(self):
        # test check

    @unittest2.skipIf(CHECK, "skip message 2")
    def test_2(self):
        # test check
</snippet></ROW><ROW><id>12838860</id><snippet>CHECK</snippet></ROW><ROW><id>12838887</id><snippet>def run_me(self):
     config_vars= self.get_properties('database','host','dbname')
     for key, value in config_vars.items():
         print key, "=", value
</snippet></ROW><ROW><id>12838887</id><snippet>config_vars</snippet></ROW><ROW><id>12838887</id><snippet> &gt;&gt;&gt; print config_vars["dbname"]
 sample
 &gt;&gt;&gt; print config_vars["host"]
 localhost
</snippet></ROW><ROW><id>12838934</id><snippet>def run_me(self):
    config_vars= self.get_properties('services','package_install','package_info')
    convig_vars_2 = self.get_properties('network','proxy_server','proxy_user')
</snippet></ROW><ROW><id>12838982</id><snippet>import sympy
t = sympy.Symbol('t') # set t as a variable/symbol
sympy.solve(sympy.Eq(10*t, 20*(t-1)), t) # which reads: solve the equation 10*t == 20*(t-1) for t.
# returns [2] (list of solutions to the equation)
</snippet></ROW><ROW><id>12839017</id><snippet>PREPARE</snippet></ROW><ROW><id>12839017</id><snippet>"double quoted"</snippet></ROW><ROW><id>12839017</id><snippet>double"quote</snippet></ROW><ROW><id>12839017</id><snippet>"double""quote"</snippet></ROW><ROW><id>12839017</id><snippet>'SELECT * FROM "%s"' % quote_ident(tablename)</snippet></ROW><ROW><id>12839017</id><snippet>quote_ident</snippet></ROW><ROW><id>12839017</id><snippet>EXECUTE ... USING</snippet></ROW><ROW><id>12839017</id><snippet>quote_ident</snippet></ROW><ROW><id>12839070</id><snippet>object</snippet></ROW><ROW><id>12839070</id><snippet>dictionary</snippet></ROW><ROW><id>12839070</id><snippet>collections.NamedTuples</snippet></ROW><ROW><id>12839070</id><snippet>&gt;&gt;&gt; d = dict(foo=42)
{'foo': 42}
&gt;&gt;&gt; d["foo"]
42

&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Point = namedtuple('Point', ['x', 'y'], verbose=True)
&gt;&gt;&gt; p = Point(11, y=22)     # instantiate with positional or keyword arguments
&gt;&gt;&gt; p[0] + p[1]             # indexable like the plain tuple (11, 22) 33
&gt;&gt;&gt; x, y = p                # unpack like a regular tuple
&gt;&gt;&gt; x, y (11, 22)
&gt;&gt;&gt; p.x + p.y               # fields also accessible by name 33
&gt;&gt;&gt; p                       # readable __repr__ with a name=value style Point(x=11, y=22)
</snippet></ROW><ROW><id>12839188</id><snippet>def floats_equal(x, y, epsilon = 1e-4):
  return abs(x - y) &lt; epsilon
</snippet></ROW><ROW><id>12839188</id><snippet>epsilon</snippet></ROW><ROW><id>12839188</id><snippet>sys.float_info.epsilon</snippet></ROW><ROW><id>12839212</id><snippet>html2text.py</snippet></ROW><ROW><id>12839212</id><snippet>BODY_WIDTH</snippet></ROW><ROW><id>12839212</id><snippet>0</snippet></ROW><ROW><id>12839212</id><snippet>import html2text
html2text.BODY_WIDTH = 0
text = html2text.html2text('...')
</snippet></ROW><ROW><id>12839212</id><snippet>BODY_WIDTH</snippet></ROW><ROW><id>12839212</id><snippet>html2text()</snippet></ROW><ROW><id>12839537</id><snippet>In [12]: import scipy.stats as stats

In [13]: x = stats.norm.rvs(size = 100)

In [14]: stats.normaltest(x)
Out[14]: (1.627533590094232, 0.44318552909231262)
</snippet></ROW><ROW><id>12839537</id><snippet>normaltest</snippet></ROW><ROW><id>12839537</id><snippet>x</snippet></ROW><ROW><id>12839537</id><snippet>In [15]: y = stats.uniform.rvs(size = 100)

In [16]: stats.normaltest(y)
Out[16]: (31.487039026711866, 1.4543748291516241e-07)
</snippet></ROW><ROW><id>12839574</id><snippet>while</snippet></ROW><ROW><id>12839574</id><snippet>grouper</snippet></ROW><ROW><id>12839574</id><snippet>itertools</snippet></ROW><ROW><id>12839574</id><snippet>def grouper(n, iterable, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
</snippet></ROW><ROW><id>12839574</id><snippet>items = ["A", "B", "C", "D", "E"]
for page in grouper(2, items):
    print("::NewPage::")
    for item in page:
        if item is not None:
            print(item)
</snippet></ROW><ROW><id>12839574</id><snippet>::NewPage::
A
B
::NewPage::
C
D
::NewPage::
E
</snippet></ROW><ROW><id>12839574</id><snippet>None</snippet></ROW><ROW><id>12839879</id><snippet>name = forms.CharField(error_messages={
    'min_length': _('Enter a longer name'),
})

warehouse = forms.CharField(error_messages={
    'invalid': _('Enter a unique combination'),
})
</snippet></ROW><ROW><id>12839956</id><snippet>for i in range(0, 2):
    items.append(lambda i=i: dump(i))
</snippet></ROW><ROW><id>12840165</id><snippet>%s</snippet></ROW><ROW><id>12840165</id><snippet>"INSERT INTO PM_NEW_COUNTERS (COUNTER_NAME, CSV_FILE_NAME, TAR_FILE_NAME) VALUES ('%s', '%s', '%s')" %(tuple(record))
</snippet></ROW><ROW><id>12840452</id><snippet>&gt;&gt;&gt; from os import path
&gt;&gt;&gt;
&gt;&gt;&gt; path.splitext(poly)
('C:\\04-las_clip_inside_area\\16x16grids_1pp_fsa', '.shp')
&gt;&gt;&gt;
&gt;&gt;&gt; filename, ext = path.splitext(poly)
&gt;&gt;&gt; "{0}_{1}.txt".format(filename, record)
'C:\\04-las_clip_inside_area\\16x16grids_1pp_fsa_1373155.txt'
</snippet></ROW><ROW><id>12840613</id><snippet>&gt;&gt;&gt; print str(11).zfill(3)
011
</snippet></ROW><ROW><id>12840782</id><snippet>def main():
    try:
        app = RegexTesterApp(True)
        app.MainLoop()
    except:
        import traceback
        xc = traceback.format_exception(*sys.exc_info())
        wx.MessageBox(''.join(xc))
</snippet></ROW><ROW><id>12840782</id><snippet>wx.aui</snippet></ROW><ROW><id>12840897</id><snippet>| 1 | 2 | 3 | 4 | 5 | 6 |
</snippet></ROW><ROW><id>12840897</id><snippet>| 1 | 2 | 3 | 4 | 5 | 6 |
  ^
</snippet></ROW><ROW><id>12840897</id><snippet>| 1 | 2 | 3 | 4 | 5 | 6 |
      ^
</snippet></ROW><ROW><id>12840897</id><snippet>| 1 | 3 | 4 | 5 | 6 |
      ^
</snippet></ROW><ROW><id>12840897</id><snippet>| 1 | 3 | 4 | 5 | 6 |
          ^
</snippet></ROW><ROW><id>12840897</id><snippet>for x in l1[:]: &lt;- slice on entire array
    if x in l2:
        l1.remove(x)
</snippet></ROW><ROW><id>12840897</id><snippet>for x in reversed(l1):
    if x in l2:
        l1.remove(x)
</snippet></ROW><ROW><id>12840897</id><snippet>| 1 | 2 | 3 | 4 | 5 | 6 |
              ^

| 1 | 2 | 3 | 4 | 5 | 6 |
          ^

| 1 | 2 | 4 | 5 | 6 |
          ^

| 1 | 2 | 4 | 5 | 6 |
      ^

| 1 | 4 | 5 | 6 |
      ^

| 1 | 4 | 5 | 6 |
  ^
</snippet></ROW><ROW><id>12841042</id><snippet>s.reindex(DatetimeIndex(start=s.index[0].replace(day=1), end=s.index[-1], freq='D'))
</snippet></ROW><ROW><id>12841879</id><snippet>self.update_cost_button=Button(..., command=self.push_update_cost)  
...
def push_update_cost(self):  
    self.commandID=UPDATE_COST  
    self.status.config(text="Update Cost")  
</snippet></ROW><ROW><id>12841879</id><snippet>push_update_cost()</snippet></ROW><ROW><id>12841879</id><snippet>update_cost</snippet></ROW><ROW><id>12841879</id><snippet>push_OK</snippet></ROW><ROW><id>12841879</id><snippet>push_OK</snippet></ROW><ROW><id>12842124</id><snippet>plt.grid(True, which='minor')
</snippet></ROW><ROW><id>12842124</id><snippet>'-'</snippet></ROW><ROW><id>12842219</id><snippet>(?P&lt;title&gt;.+?)</snippet></ROW><ROW><id>12842219</id><snippet>url(r'^partner/(?P&lt;author&gt;[-\w]+)/(?P&lt;video&gt;[-\w]+)/(?P&lt;title&gt;.+?)/(?P&lt;desc&gt;.+)/$', 'video_player'),
</snippet></ROW><ROW><id>12842381</id><snippet>rays</snippet></ROW><ROW><id>12842381</id><snippet>staticfiles</snippet></ROW><ROW><id>12842381</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>12842381</id><snippet>django_extrawidgets</snippet></ROW><ROW><id>12842381</id><snippet>staticfiles</snippet></ROW><ROW><id>12842381</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>12842381</id><snippet>$ cd django-extrawidgets-1/
$ sudo python setup.py install
... bla bla bla ...
$ python
&gt;&gt;&gt; import django_extrawidgets # work fine
&gt;&gt;&gt; help(django_extrawidgets)
...
PACKAGE CONTENTS  # it's seems to django app, what you need.
    models
    templatetags (package)
    validation
    views
    widgets
</snippet></ROW><ROW><id>12842390</id><snippet>s = df.ix[(22, 45)]
</snippet></ROW><ROW><id>12842633</id><snippet>import requests
response = requests.get('https://docs.google.com/spreadsheet/ccc?key=0ArM5yzzCw9IZdEdLWlpHT1FCcUpYQ2RjWmZYWmNwbXc&amp;output=csv')
assert response.status_code == 200, 'Wrong status code'
print response.content
</snippet></ROW><ROW><id>12842852</id><snippet>ssh -Y user@host</snippet></ROW><ROW><id>12842852</id><snippet>matplotlib.use("Agg")
</snippet></ROW><ROW><id>12842901</id><snippet>if</snippet></ROW><ROW><id>12842901</id><snippet>cmp</snippet></ROW><ROW><id>12842901</id><snippet>jl</snippet></ROW><ROW><id>12842980</id><snippet>import lib.foo as f</snippet></ROW><ROW><id>12842980</id><snippet>import lib.foo; f = lib.foo</snippet></ROW><ROW><id>12842980</id><snippet>lib</snippet></ROW><ROW><id>12842980</id><snippet>foo</snippet></ROW><ROW><id>12842980</id><snippet>lib.foo</snippet></ROW><ROW><id>12842980</id><snippet>lib</snippet></ROW><ROW><id>12842980</id><snippet>lib.foo</snippet></ROW><ROW><id>12842980</id><snippet>lib.foo</snippet></ROW><ROW><id>12842980</id><snippet>lib</snippet></ROW><ROW><id>12843154</id><snippet>&gt;&gt;&gt; def check_genexp(a, b):
    return next(idx for idx,c in enumerate(a) if c != b[idx])

&gt;&gt;&gt; timeit.timeit('check_genexp("a"*9999+"b", "a"*9999+"c")',
...               'from __main__ import check_genexp', number=10000)
12.715466209264662
&gt;&gt;&gt; from difflib import SequenceMatcher
&gt;&gt;&gt; def check_matcher(a, b):
    return next(SequenceMatcher(a=a, b=b).get_matching_blocks())

&gt;&gt;&gt; timeit.timeit('check_matcher("a"*9999+"b", "a"*9999+"c")', 'from __main__ import check_matcher', number=10000)
127.01123366037902
</snippet></ROW><ROW><id>12843154</id><snippet>difflib</snippet></ROW><ROW><id>12843154</id><snippet>SequenceMatcher</snippet></ROW><ROW><id>12843154</id><snippet>def binary_check(a, b):
    if a == b:
        return -1
    elif len(a) == 1 or len(b) == 1:
        return 0
    else:
        r = binary_check(a[:len(a)//2], b[:len(b)//2])
        if r &gt;= 0:
            return r
        r = binary_check(a[len(a)//2:], b[len(b)//2:])
        if r &gt;= 0:
            return r + len(a)//2
        return r
</snippet></ROW><ROW><id>12843154</id><snippet>&gt;&gt;&gt; timeit.timeit('binary_check("a"*9999+"b", "a"*9999+"c")', 'from __main__ import binary_check', number=10000)
1.0917401415239407
</snippet></ROW><ROW><id>12843154</id><snippet>log_2(n)</snippet></ROW><ROW><id>12843154</id><snippet>T(n) = T(n//2) + Θ(n) = Σ_{i=0}^{logn}(n/2^i)
     = Θ(n(1 + 1/2 + 1/4 + ...)) &lt;= Θ(2n) = Θ(n)
</snippet></ROW><ROW><id>12843154</id><snippet>&gt;&gt;&gt; timeit.timeit('binary_check("a"*99999+"b", "a"*99999+"c")',
...               'from __main__ import binary_check', number=10000)
8.231982400882316
&gt;&gt;&gt; timeit.timeit('check("a"*99999+"b", "a"*99999+"c")',
...               'from __main__ import check', number=10000)
118.22188008919511
&gt;&gt;&gt; 118/8.23
14.337788578371809
&gt;&gt;&gt; timeit.timeit('binary_check("a"*999999+"b", "a"*999999+"c")',
...               'from __main__ import binary_check', number=100)
1.3853583542929755
&gt;&gt;&gt; timeit.timeit('check("a"*999999+"b", "a"*999999+"c")',
...               'from __main__ import check', number=100)
12.150549202524871
&gt;&gt;&gt; 12.15 / 1.38
8.804347826086957
&gt;&gt;&gt; timeit.timeit('binary_check("a"*1500000+"b", "a"*1500000+"c")',
...               'from __main__ import binary_check', number=100)
2.113901528090537
&gt;&gt;&gt; timeit.timeit('check("a"*1500000+"b", "a"*1500000+"c")',
...               'from __main__ import check', number=100)
18.475372702808954
&gt;&gt;&gt; 18.47/2.11
8.753554502369669
&gt;&gt;&gt; timeit.timeit('binary_check("a"*15000000+"b", "a"*15000000+"c")',
...               'from __main__ import binary_check', number=100)
21.81365609187924
&gt;&gt;&gt; timeit.timeit('check("a"*15000000+"b", "a"*15000000+"c")',
...               'from __main__ import check', number=100)
181.89069153688752
&gt;&gt;&gt; 181.89/21.813
8.338605418786962
</snippet></ROW><ROW><id>12843207</id><snippet>def test_var_args_call(*args):
    print args
</snippet></ROW><ROW><id>12843207</id><snippet>def test_var_args_call(*args):
    print ' '.join(map(str, args))
</snippet></ROW><ROW><id>12843464</id><snippet>os.makedirs()</snippet></ROW><ROW><id>12843464</id><snippet>import os
import shutil

srcfile = 'a/long/long/path/to/file.py'
dstroot = '/home/myhome/new_folder'


assert not os.path.isabs(scrfile)
dstdir =  os.path.join(dstroot, os.path.dirname(scrfile))

os.makedirs(dstdir) # create all directories, raise an error if it already exists
shutil.copy(srcfile, dstdir)
</snippet></ROW><ROW><id>12843468</id><snippet>server.wp.uploadFile</snippet></ROW><ROW><id>12843468</id><snippet>server.wp.getMediaLibrary</snippet></ROW><ROW><id>12843468</id><snippet>content["post_thumbnail"]</snippet></ROW><ROW><id>12843468</id><snippet>server.wp.newPost</snippet></ROW><ROW><id>12843568</id><snippet>logging.info('date={}'.format(date))
</snippet></ROW><ROW><id>12843661</id><snippet>1.6.2</snippet></ROW><ROW><id>12843696</id><snippet>import logging
try:
    records = Session.query(MyTable).\
        filter(Terms.column == my_string).all()
    if len(records) == 0:
        raise MyException('No records found')
except MyException, e:
    logging.info('No records found')
except exc.SQLAlchemyError, e:
    logging.exception('Some problem occurred')
</snippet></ROW><ROW><id>12843743</id><snippet>ctypes.Structure</snippet></ROW><ROW><id>12843743</id><snippet>import ctypes
from ctypes import wintypes
import uuid

class _SP_DEVINFO_DATA(ctypes.Structure):
    _fields_ = [("cbSize", wintypes.DWORD),
                ("ClassGuid", ctypes.c_char * 16),
                ("DevInst", wintypes.DWORD),
                ("Reserved", wintypes.LPVOID)]

    def __init__(self, guid, inst):
        self.cbSize = ctypes.sizeof(_SP_DEVINFO_DATA)
        self.ClassGuid = uuid.UUID(guid).get_bytes()
        self.DevInst = (ctypes.c_ulong)(inst)
        self.Reserved = None

    def __repr__(self):
        return "_SP_DEV_INFO_DATA(cbsize={},ClassGuid={},DevInst={})".format(
            self.cbSize,uuid.UUID(bytes=self.ClassGuid),hex(self.DevInst))

sp = _SP_DEVINFO_DATA('08751880-13bb-11e2-96f0-402cf4ca5e51',0x12345678)
print sp
</snippet></ROW><ROW><id>12843743</id><snippet>_SP_DEV_INFO_DATA(cbsize=28,ClassGuid=08751880-13bb-11e2-96f0-402cf4ca5e51,DevInst=0x12345678L)
</snippet></ROW><ROW><id>12843767</id><snippet>\n</snippet></ROW><ROW><id>12843767</id><snippet>\r</snippet></ROW><ROW><id>12843767</id><snippet>'\r\n'</snippet></ROW><ROW><id>12843820</id><snippet>&gt;&gt;&gt; int(-1/3) == -1//3
False
</snippet></ROW><ROW><id>12843820</id><snippet>a</snippet></ROW><ROW><id>12843820</id><snippet>b</snippet></ROW><ROW><id>12843820</id><snippet>q</snippet></ROW><ROW><id>12843820</id><snippet>r</snippet></ROW><ROW><id>12843820</id><snippet>b*q + r == a</snippet></ROW><ROW><id>12843820</id><snippet>(a*b)&gt;0 == q&gt;0</snippet></ROW><ROW><id>12843820</id><snippet>a*b</snippet></ROW><ROW><id>12843820</id><snippet>q</snippet></ROW><ROW><id>12843820</id><snippet>abs(r) &lt; abs(q)</snippet></ROW><ROW><id>12843820</id><snippet>int(q)</snippet></ROW><ROW><id>12843820</id><snippet>q</snippet></ROW><ROW><id>12843820</id><snippet>from __future__ import division</snippet></ROW><ROW><id>12843820</id><snippet>a/b == a//b</snippet></ROW><ROW><id>12843820</id><snippet>a</snippet></ROW><ROW><id>12843820</id><snippet>b</snippet></ROW><ROW><id>12844000</id><snippet>genfromtxt</snippet></ROW><ROW><id>12844000</id><snippet>import numpy as np
my_data = np.genfromtxt('data', delimiter=' ')
if my_data.ndim == 1:
    my_data = my_data.reshape(1, -1)
PointX = my_data[:,5]
PointY = my_data[:,11]
print(PointX)
print(PointY)
</snippet></ROW><ROW><id>12844000</id><snippet>[ 7.]
[ 1.]
</snippet></ROW><ROW><id>12844320</id><snippet>os.path.basename(aPath)
</snippet></ROW><ROW><id>12844320</id><snippet>os.path.splitext(aBasename)
</snippet></ROW><ROW><id>12844320</id><snippet>\\</snippet></ROW><ROW><id>12844320</id><snippet>/</snippet></ROW><ROW><id>12844320</id><snippet>/</snippet></ROW><ROW><id>12844320</id><snippet>filename = "C:/mydata/yourdata/Finaldata.txt"
</snippet></ROW><ROW><id>12844459</id><snippet>'\\'</snippet></ROW><ROW><id>12844459</id><snippet>'\x5c'</snippet></ROW><ROW><id>12844459</id><snippet>r'\c'</snippet></ROW><ROW><id>12844459</id><snippet>'\\c'</snippet></ROW><ROW><id>12844459</id><snippet>'\x5cc'</snippet></ROW><ROW><id>12844459</id><snippet>'\x5c\x63'</snippet></ROW><ROW><id>12844459</id><snippet>str</snippet></ROW><ROW><id>12844459</id><snippet>'\xef'</snippet></ROW><ROW><id>12844459</id><snippet>239</snippet></ROW><ROW><id>12844459</id><snippet>r'\xef'</snippet></ROW><ROW><id>12844459</id><snippet>'\\xef'</snippet></ROW><ROW><id>12844459</id><snippet>'\x5c\x78\x65\x66'</snippet></ROW><ROW><id>12844459</id><snippet>s[0]</snippet></ROW><ROW><id>12844459</id><snippet>'\xef'</snippet></ROW><ROW><id>12844459</id><snippet>s</snippet></ROW><ROW><id>12844459</id><snippet>string-escape</snippet></ROW><ROW><id>12844459</id><snippet>\n</snippet></ROW><ROW><id>12844459</id><snippet>&gt;&gt;&gt; print u'''\xef\c\\\N{SNOWMAN}"'\
... ☃\u2603\"\'\n\xa0'''.encode('unicode-escape')
\xef\\c\\\u2603"'\u2603\u2603"'\n\xa0
&gt;&gt;&gt; print b'''\xef\c\\\N{SNOWMAN}"'\
... ☃\u2603\"\'\n\xa0'''.encode('string-escape')
\xef\\c\\\\N{SNOWMAN}"\'\xe2\x98\x83\\u2603"\'\n\xa0
</snippet></ROW><ROW><id>12844459</id><snippet>backslashreplace</snippet></ROW><ROW><id>12844459</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>12844459</id><snippet>&gt;&gt;&gt; print u'''\xef\c\\\N{SNOWMAN}"'\
... ☃\u2603\"\'\n\xa0'''
ï\c\☃"'☃☃"'

&gt;&gt;&gt; print b'''\xef\c\\\N{SNOWMAN}"'\
... ☃\u2603\"\'\n\xa0'''
�\c\\N{SNOWMAN}"'☃\u2603"'
�
&gt;&gt;&gt; print u'''\xef\c\\\N{SNOWMAN}"'\
... ☃\u2603\"\'\n\xa0'''.encode('ascii', 'backslashreplace')
\xef\c\\u2603"'\u2603\u2603"'
\xa0
&gt;&gt;&gt; print b'''\xef\c\\\N{SNOWMAN}"'\
... ☃\u2603\"\'\n\xa0'''.decode('latin1').encode('ascii', 'backslashreplace')
\xef\c\\N{SNOWMAN}"'\xe2\x98\x83\u2603"'
\xa0
</snippet></ROW><ROW><id>12844508</id><snippet>def _append_or_remove(source, pattern, dirs = True, recurse = False, append = True):
    for item in os.listdir(source):
        path =  os.path.join(source, item)
        if "svn" not in item:
            if os.path.isdir(path):
                # Recurse first
                if recurse:
                    if append:
                        append_items(path, pattern, dirs, recurse)
                    else:
                        remove_string_from_items(path, pattern, dirs, recurse)
                if dirs and pattern in item:
                    target = os.path.join(source, string.replace(item, pattern, ""))
                    rename(path, target)
            elif os.path.isfile(path) and pattern in item:
                if append:
                    name, ext = os.path.splitext(item)
                    # Append pattern, add extension back
                    target = os.path.join(source, "%s%s" % (name, pattern) + ext)
                else:
                    target = os.path.join(source, string.replace(item, pattern, ""))
                rename(path, target)

def append_items(source, pattern, dirs = True, recurse = False):
    """
    Append the pattern to all items within a directory

    source = act on this directory
    pattern = add this to the start of the file
    dirs = apply to directorys
    recurse = work recursively 
    """
    return _append_or_remove(source, pattern, dirs, recurse, True)

def remove_string_from_items(source, pattern, dirs = True, recurse = False):
    """
    Remove a pattern from all items within a directory

    source =  directory
    pattern = text to replace
    """
    return _append_or_remove(source, pattern, dirs, recurse, False)
</snippet></ROW><ROW><id>12844555</id><snippet>import tarfile    

with tarfile.open("test.tbz2",mode='w:bz2') as f:
    t = tarfile.TarInfo('mydir')
    t.type = tarfile.DIRTYPE
    f.addfile(t)
</snippet></ROW><ROW><id>12844670</id><snippet>regex</snippet></ROW><ROW><id>12844670</id><snippet>In [71]: import re

In [72]: strs="Limits paramA : (7, 45) paramB : (0, 0) paramC : (1, 23)"

In [74]: [int(digit) for digit in re.findall(r'\d+',strs)]
Out[74]: [7, 45, 0, 0, 1, 23]
</snippet></ROW><ROW><id>12845012</id><snippet>11 = (4+3+2+1)+1</snippet></ROW><ROW><id>12845012</id><snippet>sum(range(5))+1</snippet></ROW><ROW><id>12845012</id><snippet>n</snippet></ROW><ROW><id>12845012</id><snippet>def triangle_sum(n):
    start = sum(range(n))+1
    return sum(range(start,start+n))
</snippet></ROW><ROW><id>12845012</id><snippet>sum(range(n))</snippet></ROW><ROW><id>12845012</id><snippet>n*(n-1)//2</snippet></ROW><ROW><id>12845012</id><snippet>def triangle_sum(n):
    start = n*(n-1)//2+1
    return sum(range(start,start+n))
</snippet></ROW><ROW><id>12845034</id><snippet>from django.conf import settings #or from my_project import settings
print settings.MEDIA_ROOT
</snippet></ROW><ROW><id>12845034</id><snippet>from django.utils.translation import ugettext_lazy as _
from django.conf.urls.defaults import *
from django.conf import settings

urls = (...
(r'^%s(?P&lt;path&gt;.*)$'%settings.MEDIA_URL, 'django.views.static.serve', {
        'document_root': settings.MEDIA_ROOT,
    })
</snippet></ROW><ROW><id>12845121</id><snippet>a[-1:] + a[:-1]
</snippet></ROW><ROW><id>12845121</id><snippet>&gt;&gt;&gt; a=[1,2,3,4]
&gt;&gt;&gt; a[-1:] + a[:-1]
[4, 1, 2, 3]
</snippet></ROW><ROW><id>12845121</id><snippet>&gt;&gt;&gt; a[-2:] + a[:-2]
[3, 4, 1, 2]
</snippet></ROW><ROW><id>12845121</id><snippet>.insert()</snippet></ROW><ROW><id>12845121</id><snippet>.pop()</snippet></ROW><ROW><id>12845121</id><snippet>&gt;&gt;&gt; timeit.timeit('a[-1:] + a[:-1]', 'a=[1,2,3,4]')
0.59950494766235352
&gt;&gt;&gt; timeit.timeit('a.insert(0,a.pop(-1))', 'a=[1,2,3,4]')
0.52790379524230957
</snippet></ROW><ROW><id>12845121</id><snippet>&gt;&gt;&gt; timeit.timeit('a[-2:] + a[:-2]', 'a=[1,2,3,4]')
0.58687901496887207
&gt;&gt;&gt; timeit.timeit('a.insert(0,a.pop(-1));a.insert(0,a.pop(-1))', 'a=[1,2,3,4]')
1.0615170001983643
</snippet></ROW><ROW><id>12845289</id><snippet>_asdict</snippet></ROW><ROW><id>12845289</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; url = "http://google.com"
&gt;&gt;&gt; s = urlparse.urlsplit(url)
&gt;&gt;&gt; s
SplitResult(scheme='http', netloc='google.com', path='', query='', fragment='')
&gt;&gt;&gt; s._asdict()
OrderedDict([('scheme', 'http'), ('netloc', 'google.com'), ('path', ''), ('query', ''), ('fragment', '')])
&gt;&gt;&gt; d = s._asdict()
&gt;&gt;&gt; for k,v in d.items():
...     print k, repr(v)
... 
scheme 'http'
netloc 'google.com'
path ''
query ''
fragment ''
</snippet></ROW><ROW><id>12845289</id><snippet>_</snippet></ROW><ROW><id>12845289</id><snippet>namedtuple</snippet></ROW><ROW><id>12845289</id><snippet>&gt;&gt;&gt; vars(urllib.parse.urlsplit("http://www.google.ca"))
OrderedDict([('scheme', 'http'), ('netloc', 'www.google.ca'), ('path', ''), ('query', ''), ('fragment', '')])
</snippet></ROW><ROW><id>12845341</id><snippet>filter()</snippet></ROW><ROW><id>12845341</id><snippet>&gt;&gt;&gt; names = ['aet2000','ppt2000', 'aet2001', 'ppt2001']
&gt;&gt;&gt; filter(lambda x:'aet' in x, names)
['aet2000', 'aet2001']
</snippet></ROW><ROW><id>12845341</id><snippet>regex</snippet></ROW><ROW><id>12845341</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; filter(lambda x:re.search(r'aet', x), names)
['aet2000', 'aet2001']
</snippet></ROW><ROW><id>12845409</id><snippet>def version_check(*args):</snippet></ROW><ROW><id>12845409</id><snippet>def foo(bar):
    print 'Bar:', bar

def baz(qux, *args):
    print 'Qux:', qux
    foo(*args)
</snippet></ROW><ROW><id>12845409</id><snippet>foo</snippet></ROW><ROW><id>12845409</id><snippet>class Worker(object):
    def __init__(iserver,login,password,proxyUser,proxyPass,proxyServer,service):
        self.iserver = iserver
        self.login = login
        self.password = password
        self.proxyUser = proxyUser
        self.proxyPass = proxyPass
        self.proxyServer = proxyServer
        self.service = service

    def version_check(self): ...

    def version_get(self): ...

    def version_send(self): ...
</snippet></ROW><ROW><id>12845409</id><snippet>from worker import Worker

w = Worker(iserver,login,password,proxyUser,proxyPass,proxyServer,service)
w.version_check()
w.version_get()
w.version_send()
</snippet></ROW><ROW><id>12845444</id><snippet>self.shufler(10)
</snippet></ROW><ROW><id>12845444</id><snippet>shufler</snippet></ROW><ROW><id>12845444</id><snippet>self</snippet></ROW><ROW><id>12845444</id><snippet>10</snippet></ROW><ROW><id>12845444</id><snippet>.</snippet></ROW><ROW><id>12845444</id><snippet>10</snippet></ROW><ROW><id>12845444</id><snippet>shufler</snippet></ROW><ROW><id>12845444</id><snippet>def shufler(self, count):
</snippet></ROW><ROW><id>12845448</id><snippet>.inet_anon()</snippet></ROW><ROW><id>12845448</id><snippet>struct</snippet></ROW><ROW><id>12845448</id><snippet>import struct
import socket

socket.ntohl(struct.unpack('I', socket.inet_aton('192.168.1.1'))[0])
</snippet></ROW><ROW><id>12845453</id><snippet>self.ui.tableWidget.setCellWidget(i, j, svgWidget)
</snippet></ROW><ROW><id>12845650</id><snippet>logging.handlers.FileHandler</snippet></ROW><ROW><id>12845650</id><snippet>logging.addHandler()</snippet></ROW><ROW><id>12846006</id><snippet>In [25]: s
Out[25]: 
2012-01-31    0
2012-02-29    1
2012-03-31    2
Freq: M

In [26]: s.resample('W', fill_method='ffill')
Out[26]: 
2012-02-05    0
2012-02-12    0
2012-02-19    0
2012-02-26    0
2012-03-04    1
2012-03-11    1
2012-03-18    1
2012-03-25    1
2012-04-01    2
Freq: W-SUN
</snippet></ROW><ROW><id>12846076</id><snippet>globals</snippet></ROW><ROW><id>12846076</id><snippet>__dict__</snippet></ROW><ROW><id>12846076</id><snippet>func_I_want = globals()['bar']  #Get the function
func_I_want()    #call it
</snippet></ROW><ROW><id>12846076</id><snippet>sys.modules</snippet></ROW><ROW><id>12846076</id><snippet>import sys.modules
this_mod = sys.modules[__name__]
func = getattr(this_mod,'bar')
func()
</snippet></ROW><ROW><id>12846154</id><snippet>In [31]: data
Out[31]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 2557 entries, 2004-01-01 00:00:00 to 2010-12-31 00:00:00
Freq: &lt;1 DateOffset&gt;
Columns: 360 entries, -89.75 to 89.75
dtypes: object(360)
</snippet></ROW><ROW><id>12846154</id><snippet>DataFrame(dtype=float)</snippet></ROW><ROW><id>12846154</id><snippet>frame.astype(float)</snippet></ROW><ROW><id>12846611</id><snippet>for i in range(0,100):
    n.append(i)
    if len(n)&gt;10: n[:] = n[1:]
    print len(n) # will never go above 10
</snippet></ROW><ROW><id>12846688</id><snippet>imptest.py</snippet></ROW><ROW><id>12846688</id><snippet>__file__</snippet></ROW><ROW><id>12846688</id><snippet>mydir = os.path.dirname(os.path.abspath(__file__))
new_path = os.path.join(mydir, '..', rest_of_the_path)
</snippet></ROW><ROW><id>12846802</id><snippet>In [55]: strs
Out[55]: '+123 abc 123 -123 123- 123+ 14 foo bar'

   #you need to escape '+'and '-' In order to search them   

In [56]: re.findall(r"\d+[\+|\-]{1}|[\-|\+]{1}\d+",strs)
Out[56]: ['+123', '-123', '123-', '123+']
</snippet></ROW><ROW><id>12846839</id><snippet>\d{4,5}$
</snippet></ROW><ROW><id>12846839</id><snippet>^[a-z_]+\d{4,5}$
</snippet></ROW><ROW><id>12847100</id><snippet>ftplib.py</snippet></ROW><ROW><id>12847100</id><snippet>ftplib.py</snippet></ROW><ROW><id>12847100</id><snippet>ftplib</snippet></ROW><ROW><id>12847231</id><snippet>
import fileinput
for line in fileinput.input():
 for p in line.replace('\\(','EscapeLP').replace('\\)','EscapeRP').split('(')[1:]:
  print p[:p.find(')')].replace('EscapeLP','(').replace('EscapeRP',')')
</snippet></ROW><ROW><id>12847383</id><snippet># import settings
from django.conf import settings
...
# ensure that a subdirectory with the appropriate name exists
if not os.path.exists(directory):
    os.makedirs(directory)

# save the plots
canvas = FigureCanvasAgg(fig)
filename = settings.MEDIA_ROOT + os.sep + directory  + os.sep + name_prefix + ".png"
# saves figure to filesystem in png format
canvas.print_figure(filename)
...
</snippet></ROW><ROW><id>12847455</id><snippet>&gt;&gt;&gt; a = r"sudo scp -i /home/backup/.ssh/id_rsa /opt/backups/*conf backup@a-hostname.local:/opt/backups/"
&gt;&gt;&gt; b = r"""sudo scp -i /home/backup/.ssh/id_rsa /opt/backups/*conf backup@a-hostname.local:/opt/backups/"""
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; b
'sudo scp -i /home/backup/.ssh/id_rsa /opt/backups/*conf backup@a-hostname.local:/opt/backups/'
&gt;&gt;&gt; a
'sudo scp -i /home/backup/.ssh/id_rsa /opt/backups/*conf backup@a-hostname.local:/opt/backups/'
</snippet></ROW><ROW><id>12847455</id><snippet>r</snippet></ROW><ROW><id>12847455</id><snippet>'</snippet></ROW><ROW><id>12847455</id><snippet>"</snippet></ROW><ROW><id>12847455</id><snippet>&gt;&gt;&gt; foo = '''
... '''
&gt;&gt;&gt; foo
'\n'
</snippet></ROW><ROW><id>12847586</id><snippet>splits = x['name'].split()
df['first'] = splits.str[0]
df['last'] = splits.str[1]
</snippet></ROW><ROW><id>12847974</id><snippet>self.myListbox</snippet></ROW><ROW><id>12847974</id><snippet>doStuff</snippet></ROW><ROW><id>12847974</id><snippet>&lt;object&gt;.myListbox</snippet></ROW><ROW><id>12847974</id><snippet>def doStuff(win):
    win.myListbox.Set(myList)

class myWindow(wx.Frame):
    def __init__(self, parent, id):
        self.myListbox = wx.ListBox(parent = self, pos = (320, 30), size = (300, 500))

my_win = myWindow(0, 0)
doStuff(my_win)
</snippet></ROW><ROW><id>12848040</id><snippet>delete</snippet></ROW><ROW><id>12848040</id><snippet>MP3</snippet></ROW><ROW><id>12848040</id><snippet>mp3 = MP3(fname)
mp3.delete()
mp3.save()
</snippet></ROW><ROW><id>12848041</id><snippet>GET</snippet></ROW><ROW><id>12848041</id><snippet>(stackoverflow)➜  my_project  python ./manage.py shell
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
&gt;&gt;&gt; from django.http import HttpRequest
&gt;&gt;&gt; req = HttpRequest()
&gt;&gt;&gt; print req
&lt;HttpRequest
path:,
GET:{},
POST:{},
COOKIES:{},
META:{}&gt;
&gt;&gt;&gt; req.GET['test'] = 'hello world'
&gt;&gt;&gt; print req
&lt;HttpRequest
path:,
GET:{'test': 'hello world'},
POST:{},
COOKIES:{},
META:{}&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12848077</id><snippet>yield</snippet></ROW><ROW><id>12848077</id><snippet>return</snippet></ROW><ROW><id>12848077</id><snippet>class MySpider(BaseSpider):
    start_urls = ['http://example.com/foo/bar/page_%s.html' % page for page in xrange(1,54)]
</snippet></ROW><ROW><id>12848090</id><snippet>debug</snippet></ROW><ROW><id>12848090</id><snippet>warning</snippet></ROW><ROW><id>12848090</id><snippet>logbook</snippet></ROW><ROW><id>12848090</id><snippet>handler</snippet></ROW><ROW><id>12848090</id><snippet>level</snippet></ROW><ROW><id>12848090</id><snippet>notice</snippet></ROW><ROW><id>12848090</id><snippet>print</snippet></ROW><ROW><id>12848090</id><snippet>logbook.debug</snippet></ROW><ROW><id>12848090</id><snippet>logbook.info</snippet></ROW><ROW><id>12848090</id><snippet>logbook</snippet></ROW><ROW><id>12848090</id><snippet>logbook</snippet></ROW><ROW><id>12848090</id><snippet>StderrHandler</snippet></ROW><ROW><id>12848090</id><snippet>logbook.default_handler.pop_application()</snippet></ROW><ROW><id>12848134</id><snippet>shell=True</snippet></ROW><ROW><id>12848134</id><snippet>shell=True</snippet></ROW><ROW><id>12848205</id><snippet>itertools.product()</snippet></ROW><ROW><id>12848205</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.product(range(3), repeat=2))
[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
&gt;&gt;&gt; list(itertools.product(range(3), repeat=3))
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 2, 0), (0, 2, 1), (0, 2, 2), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 2, 0), (1, 2, 1), (1, 2, 2), (2, 0, 0), (2, 0, 1), (2, 0, 2), (2, 1, 0), (2, 1, 1), (2, 1, 2), (2, 2, 0), (2, 2, 1), (2, 2, 2)]
</snippet></ROW><ROW><id>12848205</id><snippet>def nested_loops(n, num_loops):
    prod = itertools.product(range(n), repeat=num_loops)
    for item in prod:
        if all(item[i] &lt;= item[i+1] for i in range(num_loops-1)):
            yield item

&gt;&gt;&gt; list(nested_loops(3, 2))
[(0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 2)]
&gt;&gt;&gt; list(nested_loops(3, 3))
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 1, 1), (0, 1, 2), (0, 2, 2), (1, 1, 1), (1, 1, 2), (1, 2, 2), (2, 2, 2)]
</snippet></ROW><ROW><id>12848248</id><snippet>pipe = os.popen("something.exe -", "w")
pipe.write(bin)
pipe.close()
</snippet></ROW><ROW><id>12848303</id><snippet>&lt;html&gt;
{{ this_is_my_variable_that_is_passed_to_my_view }}
&lt;/html&gt;
</snippet></ROW><ROW><id>12848303</id><snippet>{{</snippet></ROW><ROW><id>12848303</id><snippet>__unicode__</snippet></ROW><ROW><id>12848303</id><snippet>__str__</snippet></ROW><ROW><id>12848381</id><snippet>class cell(object):
     def my_idx(self,grid):
         return grid.keys()[grid.values().index(self)]
</snippet></ROW><ROW><id>12848381</id><snippet>some_cell.my_idx(grid)
</snippet></ROW><ROW><id>12848579</id><snippet>   if d20() &gt;= monster_to_hit and d100() &lt;= monster_crit:
        print "The %s scored a critical hit against you!" % monster
        hit_points = hit_points - (monster_dmg * 3)
        next()
    elif d20 &gt;= monster_to_hit and d100() &gt; crit:
        print "The %s strikes you!"
        hit_points = hit_points - monster_dmg
        next()
</snippet></ROW><ROW><id>12848579</id><snippet># attack function
def attack(victim):
    dice20 = d20()
    dice100 = d100()

    print "victim == monster", victim == monster    

    print dice20
    print dice100
    print to_hit
    print crit
    print monster_current_hp
    print mod_dmg 
    print mod_dmg * 3
    print monster_to_hit
    print monster_crit
    print hit_points
    print monster_dmg
    print monster_dmg * 3

    global monster_current_hp, current_hp, to_hit, crit, hit_points
    if victim == monster:
        if dice20 &gt;= to_hit and dice100 &lt;= crit:
            print "You scored a critical hit against the %s!" % monster
            monster_current_hp = monster_current_hp - (mod_dmg * 3)
            next()
        elif dice20 &gt;= to_hit and dice100 &gt; crit:
            print "You strike the %s!" % monster
            monster_current_hp = monster_current_hp - mod_dmg
            next()
        else:
            print "The %s evades your attack!" % monster
            next()
    else:
        if dice20 &gt;= monster_to_hit and dice100 &lt;= monster_crit:
            print "The %s scored a critical hit against you!" % monster
            hit_points = hit_points - (monster_dmg * 3)
            next()
        elif dice20 &gt;= monster_to_hit and dice100 &gt; crit:
            print "The %s strikes you!"
            hit_points = hit_points - monster_dmg
            next()
</snippet></ROW><ROW><id>12848586</id><snippet>in</snippet></ROW><ROW><id>12848586</id><snippet>if b in ['home', 'gone']:
</snippet></ROW><ROW><id>12848586</id><snippet>b</snippet></ROW><ROW><id>12848586</id><snippet>n_lst = new_lst.appen(s)
                     ^
</snippet></ROW><ROW><id>12848604</id><snippet>pip install ipython==0.10.2
</snippet></ROW><ROW><id>12848999</id><snippet>list</snippet></ROW><ROW><id>12848999</id><snippet>dict</snippet></ROW><ROW><id>12848999</id><snippet>bytearray</snippet></ROW><ROW><id>12848999</id><snippet>list</snippet></ROW><ROW><id>12848999</id><snippet>dict</snippet></ROW><ROW><id>12848999</id><snippet>dict</snippet></ROW><ROW><id>12849159</id><snippet>cdf</snippet></ROW><ROW><id>12849159</id><snippet>import scipy.stats as stats
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0,20,100)
cdf = stats.binom.cdf
plt.plot(x,cdf(x, 50, 0.2))
plt.show()
</snippet></ROW><ROW><id>12849250</id><snippet>&gt;&gt;&gt; re.findall('CREATE TABLE[^;]+;', s)
['CREATE TABLE `contig` (...) ENGINE=InnoDB DEFAULT CHARSET=latin1;']
</snippet></ROW><ROW><id>12849250</id><snippet>(.*)</snippet></ROW><ROW><id>12849258</id><snippet>import inspect

def print_id(obj):
    print "{} =&gt; {}".format(id(obj), obj)

def getmember(obj, name):
    #members = dict(inspect.getmembers(obj))
    #return members[name]
    return [member 
            for _name, member in inspect.getmembers(obj) 
            if name == _name][0]

class Foo(object):
    def bar(self): pass

foo = Foo()

m1 = foo.bar
m2 = getattr(foo, 'bar')
m3 = getmember(foo, 'bar')

print_id(m1)
print_id(m2)
print_id(m3)
</snippet></ROW><ROW><id>12849258</id><snippet>#...
foo = Foo()

print_id(foo.bar)
print_id(getattr(foo, 'bar'))
print_id(getmember(foo, 'bar'))
</snippet></ROW><ROW><id>12849258</id><snippet>id()</snippet></ROW><ROW><id>12849258</id><snippet>foo.bar</snippet></ROW><ROW><id>12849258</id><snippet>&gt;&gt;&gt; foo.bar == foo.bar
True
&gt;&gt;&gt; foo.bar is foo.bar
False
</snippet></ROW><ROW><id>12849926</id><snippet>protocol=2</snippet></ROW><ROW><id>12849926</id><snippet>pickle.dump</snippet></ROW><ROW><id>12850236</id><snippet>from math import *
def average(a, b):
    return (a + b) / 2.0
def improve(guess, x):
    return average(guess, x/guess)
def good_enough(guess, x):
    d = abs(guess*guess - x)
    return (d &lt; 0.001)
def square_root(guess, x):
    while(not good_enough(guess, x)):
        guess = improve(guess, x)
    return guess
def my_sqrt(x):
    r = square_root(1, x)
    return r

&gt;&gt;&gt; my_sqrt(16)
4.0000006366929393
</snippet></ROW><ROW><id>12850236</id><snippet>c=0</snippet></ROW><ROW><id>12850236</id><snippet>from math import *
def average(a, b):
    return (a + b) / 2.0
def improve(guess, x):
    return average(guess, x/guess)
def square_root(guess, x, c):
    guesscount=0
    while guesscount &lt; c :
        guesscount+=1
        guess = improve(guess, x)
    return guess
def my_sqrt(x,c):
    r = square_root(1, x, c)
    return r

number=int(raw_input('Enter a positive number'))
i_guess=int(raw_input('Enter an initial guess'))
times=int(raw_input('How many times would you like this program to improve your initial guess:'))    
answer=my_sqrt(number,times)

print 'sqrt is approximately ' + str(answer)
print 'difference between your guess and sqrt is ' + str(abs(i_guess-answer))
</snippet></ROW><ROW><id>12850389</id><snippet>Content-Encoding: gzip
</snippet></ROW><ROW><id>12850389</id><snippet>gzip</snippet></ROW><ROW><id>12850453</id><snippet>bigdata=data1.append(data2,ignore_index = True)
</snippet></ROW><ROW><id>12850587</id><snippet>'([^ :]+): *(.+?)?(?:(?= [^ ]+:)|$)'
</snippet></ROW><ROW><id>12850613</id><snippet>import sympy.assumptions.handlers.calculus 
</snippet></ROW><ROW><id>12850928</id><snippet>class enforced_staticmethod(staticmethod):
     def __get__(self, instance, cls):
         if instance is not None:
             raise Exception('Do not call with an instance.')
         return super(enforced_staticmethod, self).__get__(self)


class C:
    @enforced_staticmethod
    def hai(x):
        return x + 1
</snippet></ROW><ROW><id>12850928</id><snippet>&gt;&gt;&gt; C.hai(10)
11
&gt;&gt;&gt; C().hai(10)
Traceback (most recent call last):
  File "&lt;pyshell#52&gt;", line 1, in &lt;module&gt;
    C().hai(10)
  File "&lt;pyshell#48&gt;", line 4, in __get__
    raise Exception('Do not call with an instance.')
Exception: Do not call with an instance.
</snippet></ROW><ROW><id>12851038</id><snippet>itertools</snippet></ROW><ROW><id>12851038</id><snippet>d</snippet></ROW><ROW><id>12851038</id><snippet>d.values()</snippet></ROW><ROW><id>12851038</id><snippet>def connectivityDictSub(num, d, setl, key, i):
    if i &gt;= num:
        assert(key not in d)
        d[key] = setl
    else:
        for ni in range(len(setl)):
            nsetl, nkey = setl[:], key
            for other in nsetl[ni]:
                assert(other != i)
                x,y = sorted((i, other))
                ki = ((2*num-3-x)*x)/2 + y-1
                nkey |= 1&lt;&lt;ki
            nsetl[ni] = nsetl[ni] + [i] #not the same as += since it makes a copy
            connectivityDictSub(num, d, nsetl, nkey, i+1)
        nsetl = setl + [[i]]
        connectivityDictSub(num, d, nsetl, key, i+1)

def connectivityDict(groundSet):
    gset = sorted(set(groundSet))
    d = {}
    connectivityDictSub(len(gset), d, [], 0, 0)
    for setl in d.values():
        setl[:] = [tuple(gset[i] for i in x) for x in setl]
    return map(tuple, d.values())

for x in connectivityDict('ABCD'):
    print x
</snippet></ROW><ROW><id>12851143</id><snippet>entries = set()

for row in reader:
   key = (row[0], row[1]) # instead of just the last name

   if key not in entries:
      writer.writerow(row)
      entries.add(key)
</snippet></ROW><ROW><id>12851235</id><snippet>self.reduce()</snippet></ROW><ROW><id>12851235</id><snippet>__init__</snippet></ROW><ROW><id>12851235</id><snippet>reduce()</snippet></ROW><ROW><id>12851235</id><snippet>def reduce(self):
    gcd = findgcd(self.numerator, self.denominator)
</snippet></ROW><ROW><id>12851235</id><snippet>def reduce(self):
    gcd = self.findgcd(self.numerator, self.denominator)
</snippet></ROW><ROW><id>12851235</id><snippet>findgcd</snippet></ROW><ROW><id>12851235</id><snippet>class Fraction(object):
    '''Define a fraction type'''
    def __init__(self, num=0, denom=1):
        '''Create a new Fraction with numerator num and denominator demon'''
        self.numerator = num
        if denom != 0:
            self.denominator = denom
        else:
            raise ZeroDivisionError
        self.reduce()

    def reduce(self):
        gcd = self.findgcd(self.numerator, self.denominator)
        self.numerator /= gcd
        self.denominator /= gcd

    def findgcd(self, x, y):
        gcd = None
        min_number = min(x, y)
        for i in range(min_number, 1, -1):
            if x % i == 0 and y % i == 0:
                gcd = i
        return gcd

    def __repr__(self):
        return "{0}/{1}".format(self.numerator, self.denominator)

&gt;&gt;&gt;&gt; f = Fraction(3,6)
&gt;&gt;&gt;&gt; f
1/2
</snippet></ROW><ROW><id>12851353</id><snippet>1</snippet></ROW><ROW><id>12851353</id><snippet>copy()</snippet></ROW><ROW><id>12851400</id><snippet>print</snippet></ROW><ROW><id>12851430</id><snippet>from xml.etree import ElementTree
# you need a valid xml string
data = '&lt;root&gt;' + data + '&lt;/root&gt;'
etree = ElementTree.fromstring(data)
if etree.findtext('abd') == 'zombiesattack':
    titleOfVideo = etree.findtext('title')
</snippet></ROW><ROW><id>12851451</id><snippet>__add__</snippet></ROW><ROW><id>12851451</id><snippet>__plus__</snippet></ROW><ROW><id>12851451</id><snippet>__plus__</snippet></ROW><ROW><id>12851451</id><snippet>__add__</snippet></ROW><ROW><id>12851556</id><snippet>&lt;script type="text/javascript"&gt;var APP_ROOT = {{ app_root|json_encode }};&lt;/script&gt;
</snippet></ROW><ROW><id>12851556</id><snippet>json_encode</snippet></ROW><ROW><id>12851556</id><snippet>app_root</snippet></ROW><ROW><id>12851556</id><snippet>$.ajax
    type: 'PUT'
    url: "#{APP_ROOT}/subreddit/update"
    data: name: @subreddit
    error: -&gt; $(elem)?.text val
</snippet></ROW><ROW><id>12851556</id><snippet>$</snippet></ROW><ROW><id>12851556</id><snippet>$(elem)?.text val</snippet></ROW><ROW><id>12851556</id><snippet>$(elem).text val</snippet></ROW><ROW><id>12851556</id><snippet>null</snippet></ROW><ROW><id>12851556</id><snippet>undefined</snippet></ROW><ROW><id>12851556</id><snippet>text</snippet></ROW><ROW><id>12851835</id><snippet>&gt;&gt;&gt; s = '12abcd405'
&gt;&gt;&gt; result = ''.join([i for i in s if not i.isdigit()])
&gt;&gt;&gt; result
'abcd'
</snippet></ROW><ROW><id>12851835</id><snippet>no_digits = []
# Iterate through the string, adding non-numbers to the no_digits list
for i in s:
    if not i.isdigit():
        no_digits.append(i)

# Now join all elements of the list with '', 
# which puts all of the characters together.
result = ''.join(no_digits)
</snippet></ROW><ROW><id>12851835</id><snippet>&gt;&gt;&gt; s = '12abcd405'
&gt;&gt;&gt; result = ''.join(i for i in s if not i.isdigit())
&gt;&gt;&gt; result
'abcd'
</snippet></ROW><ROW><id>12852147</id><snippet>import Tkinter
import urllib

def updateCheck(self):
    update = False

    updateWindow = Tkinter.Toplevel()
    updateWindow.title(string="Update Checker")
    updateWindow.resizable(False, False)

    #Gets downloaded version
    versionSource = open('version.txt', 'r')
    versionContents = versionSource.read()

    #gets newest version
    updateSource = urllib.urlopen("http://www.suturesoft.com/Updates/craftbook.txt")
    updateContents = updateSource.read()

    #checks for updates
    for i in range(0,20):
        if updateContents[i] != versionContents[i]:
            dataLabel = Tkinter.Label(updateWindow,text="\n\nThere are data updates availible.\n\n")
            dataLabel.pack()
            update = True
            break
    for i in range(22,42):
        if updateContents[i] != versionContents[i]:
            versionLabel = Tkinter.Label(updateWindow,text="\n\nThere are version updates availible.\n\n")
            versionLabel.pack()
            update = True
            break
    if update == False:
        versionLabel = Tkinter.Label(updateWindow,text="\n\nYou are already running the most up to date version.\n\n")
        versionLabel.pack()
</snippet></ROW><ROW><id>12852147</id><snippet>data_version:10.11.12
exec_version:10.11.12
</snippet></ROW><ROW><id>12852252</id><snippet>target</snippet></ROW><ROW><id>12852252</id><snippet>threading.Thread</snippet></ROW><ROW><id>12852252</id><snippet>threading.Thread(target=self.checker args=loadingThread).start()</snippet></ROW><ROW><id>12852344</id><snippet>5 points</snippet></ROW><ROW><id>12852344</id><snippet>select ...
where (GPSlocation.lat BETWEEN (:1 - 5) AND (:2 + 5))
   and (GPSlocation.long BETWEEN (:3 - 5) AND (:4 + 5))
</snippet></ROW><ROW><id>12852344</id><snippet>WHERE (condition) AND (condition) ...
</snippet></ROW><ROW><id>12852344</id><snippet>WHERE (condition) AND WHERE (condition) ...
                      ^^^^^---syntax error
</snippet></ROW><ROW><id>12852532</id><snippet>import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>12852532</id><snippet>p request</snippet></ROW><ROW><id>12852532</id><snippet>(Pdb) path = request.META['USERNAME']
(Pdb) h p
p expression
Print the value of the expression.
(Pdb) p path
'Caspar'
(Pdb) from foo.models import MyUser
(Pdb) MyUser.objects.all()
[&lt;MyUser: Bob: 3.62810036125&gt;, &lt;MyUser: Tim: no rating&gt;, &lt;MyUser: Jim: 2.41014167534&gt;, &lt;MyUser: Rod: 1.35651839383&gt;]
</snippet></ROW><ROW><id>12852532</id><snippet>ipdb</snippet></ROW><ROW><id>12852532</id><snippet>pip install ipdb</snippet></ROW><ROW><id>12852532</id><snippet>pip install ipython</snippet></ROW><ROW><id>12852532</id><snippet>import IPython; IPython.embed()
</snippet></ROW><ROW><id>12852541</id><snippet>cv2.Kalman()</snippet></ROW><ROW><id>12852541</id><snippet>cv.CreateKalman()</snippet></ROW><ROW><id>12852776</id><snippet>list_per_page</snippet></ROW><ROW><id>12852776</id><snippet>ChangeList</snippet></ROW><ROW><id>12852776</id><snippet>ChangeList</snippet></ROW><ROW><id>12852776</id><snippet>list_per_page</snippet></ROW><ROW><id>12852776</id><snippet>class CustomUserChangeList(ChangeList):
    def __init__(self, request, model, list_display, list_display_links,
                 list_filter, date_hierarchy, search_fields, list_select_related,
                 list_per_page, list_max_show_all, list_editable, model_admin):
        list_per_page = get_user_list_limit()
        super(CustomUserChangeList, self).__init__(request, model, list_display, list_display_links,
            list_filter, date_hierarchy, search_fields, list_select_related,
            list_per_page, list_max_show_all, list_editable, model_admin)
</snippet></ROW><ROW><id>12852776</id><snippet>get_changelist</snippet></ROW><ROW><id>12852776</id><snippet>class CustomUserAdmin(UserAdmin):

    def get_changelist(self, request, **kwargs):
        return CustomUserChangeList
</snippet></ROW><ROW><id>12852835</id><snippet>myOutput = myOutput.strip()
self.assertEqual(myOutput, expOutput, "Script output is not the expected")
</snippet></ROW><ROW><id>12852906</id><snippet>import IPython
IPython.embed()
</snippet></ROW><ROW><id>12853222</id><snippet>print</snippet></ROW><ROW><id>12853222</id><snippet>result = " ".join(row)
print(result)
</snippet></ROW><ROW><id>12853593</id><snippet>kneePointsOnAxis = np.recarray((3,),dtype=[('x',int), ('y', int), ('z',int)])
</snippet></ROW><ROW><id>12853673</id><snippet>conf.set('default_settings', '; comment here', '')
</snippet></ROW><ROW><id>12853673</id><snippet>[default_settings]
    ; comment here = 
    test = 1

config = ConfigParser.ConfigParser()
config.read('config.ini')
print config.items('default_settings')

&gt;&gt;&gt;
[('test','1')] # as you see comment is not parsed
</snippet></ROW><ROW><id>12853909</id><snippet>struct</snippet></ROW><ROW><id>12853909</id><snippet>import struct
two_octets = '\x56\x20'
values = struct.unpack('&lt;H', two_octets)[0]
a = values &amp; 0xFFF  # Select right-most 12 bits
b = values &gt;&gt; 12    # Select left-most 4 bits
</snippet></ROW><ROW><id>12854288</id><snippet>pythonbrew install --configure="--enable-shared" 2.7.2
</snippet></ROW><ROW><id>12854376</id><snippet>win32process</snippet></ROW><ROW><id>12854376</id><snippet>DETACHED_PROCESS = 8
subprocess.Popen(executable, creationflags=DETACHED_PROCESS, close_fds=True)
</snippet></ROW><ROW><id>12854523</id><snippet>inspect</snippet></ROW><ROW><id>12854523</id><snippet>inspect.getsourcefile()</snippet></ROW><ROW><id>12854635</id><snippet>&gt;&gt;&gt; s = {1, 2, 3}
&gt;&gt;&gt; t = {1, 2}
&gt;&gt;&gt; s &amp; t == t
True
</snippet></ROW><ROW><id>12854635</id><snippet>issuperset</snippet></ROW><ROW><id>12854635</id><snippet>&gt;=</snippet></ROW><ROW><id>12854635</id><snippet>&gt;&gt;&gt; s &gt;= t
True
</snippet></ROW><ROW><id>12854635</id><snippet>{1, 2}</snippet></ROW><ROW><id>12854986</id><snippet>def are_sinonims(a, b):
    return a in synonym.get(b,[]) or b in synonym.get(a,[]) or any(a in synonym[k] and b in synonym[k] for k in synonym)
</snippet></ROW><ROW><id>12854986</id><snippet>a in synonym[k] and b in synonym[k] for k in synonym</snippet></ROW><ROW><id>12854986</id><snippet>a in words and b in words for words in synonym.values()</snippet></ROW><ROW><id>12854986</id><snippet>def are_sinonims(a, b):
    return a in synonym.get(b,[]) \
           or b in synonym.get(a,[]) \
           or any(a in words and b in words for words in synonym.values())
</snippet></ROW><ROW><id>12855438</id><snippet>pykka.actor.ActorRef</snippet></ROW><ROW><id>12855438</id><snippet>ref = MyActor.start()
assert ref.actor_class == MyActor
</snippet></ROW><ROW><id>12855438</id><snippet>pykka.proxy.ActorProxy</snippet></ROW><ROW><id>12855438</id><snippet>proxy = MyActor.start().proxy()
assert proxy.actor_ref.actor_class == MyActor
</snippet></ROW><ROW><id>12855438</id><snippet>actor_class</snippet></ROW><ROW><id>12855438</id><snippet>ActorRef</snippet></ROW><ROW><id>12855497</id><snippet>s1</snippet></ROW><ROW><id>12855497</id><snippet>s2</snippet></ROW><ROW><id>12855497</id><snippet>s1</snippet></ROW><ROW><id>12855497</id><snippet>ValueError</snippet></ROW><ROW><id>12856477</id><snippet>user</snippet></ROW><ROW><id>12856477</id><snippet>class NoteForm(ModelForm):
   class Meta:
      model = Note
      exclude = ('user',)


if request.method == 'POST':
   model_form = NoteForm(request.POST, request.FILES)
   if model_form.is_valid():
       note = model_form.save(commit=True)
       note.user = request.user
       note.save()
       return...
</snippet></ROW><ROW><id>12856706</id><snippet># working dir in which git [command] is called
cwd = '/path/to/git/repository' 

p = subprocess.Popen("git status", shell="true", cwd=cwd,
                     stdout=subprocess.PIPE, stderr=subprocess.PIPE)
outdata, errdata = p.communicate()

logging.debug('Output of git status: {}. Error data if any: {}'
              .format(outdata, errdata))
</snippet></ROW><ROW><id>12857325</id><snippet>__init__.py</snippet></ROW><ROW><id>12857325</id><snippet>foopkg</snippet></ROW><ROW><id>12857325</id><snippet>foopkg</snippet></ROW><ROW><id>12857325</id><snippet>setup.py</snippet></ROW><ROW><id>12857325</id><snippet>__init__.py</snippet></ROW><ROW><id>12857325</id><snippet>packages</snippet></ROW><ROW><id>12857325</id><snippet>setup.py</snippet></ROW><ROW><id>12857325</id><snippet>from distutils.core import setup
from distutils.extension import Extension
setup(name='foobar',
      version='1.0',
      packages=['foopkg'],
      ext_modules=[Extension('foopkg.foo', ['foo.c'])],
      )
</snippet></ROW><ROW><id>12857480</id><snippet>int get_thing(B_t *this_b_t, int idx);
int get_other(B_t *this_b_t, int idx);
void set_thing(B_t *this_b_t, int idx, int val);
void set_other(B_t *this_b_t, int idx, int val);
</snippet></ROW><ROW><id>12857480</id><snippet>example.B_t()</snippet></ROW><ROW><id>12857480</id><snippet>&gt;&gt;&gt; b = example.B_t()
&gt;&gt;&gt; a_thing = example.get_thing(b, 0)
&gt;&gt;&gt; example.set_thing(b,0,999)
</snippet></ROW><ROW><id>12857680</id><snippet>zip()</snippet></ROW><ROW><id>12857680</id><snippet>for i,j,k in zip(person, mid, url):
</snippet></ROW><ROW><id>12857701</id><snippet>def __init__(self, arg1,arg2,arg3):</snippet></ROW><ROW><id>12857701</id><snippet>print</snippet></ROW><ROW><id>12857701</id><snippet>some_function</snippet></ROW><ROW><id>12857701</id><snippet>print "it works: " + self.arg1 + self.arg2 + self.arg3
</snippet></ROW><ROW><id>12858141</id><snippet>B</snippet></ROW><ROW><id>12858141</id><snippet>A</snippet></ROW><ROW><id>12858141</id><snippet>minors(B)</snippet></ROW><ROW><id>12858141</id><snippet>np.lib.recfunctions.stack_arrays</snippet></ROW><ROW><id>12858141</id><snippet>A</snippet></ROW><ROW><id>12858141</id><snippet>B</snippet></ROW><ROW><id>12858141</id><snippet>B</snippet></ROW><ROW><id>12858141</id><snippet>import itertools
import numpy as np

def minors(arr):
    for row in arr:
        row = list(row)
        for i, elt in enumerate(row):
            if elt != 0:
                for val in row[:i]+[0]+row[i+1:]:
                    yield val

A = np.recarray((3,),dtype=[('x',float), ('y', float), ('z',float)])
B = [(7.0, 0.0, 7.0), (16.0, 0.0, 1.0)]

C = np.fromiter(itertools.chain(A.view(float), minors(B)), dtype = float)
C = C.view(A.dtype)
</snippet></ROW><ROW><id>12858205</id><snippet>web.ctx</snippet></ROW><ROW><id>12858205</id><snippet>from pprint import pprint
pprint(web.ctx)
</snippet></ROW><ROW><id>12858205</id><snippet>ctx.home + ctx.path + ctx.query</snippet></ROW><ROW><id>12858205</id><snippet>ctx.home + ctx.fullpath</snippet></ROW><ROW><id>12858205</id><snippet>web.url</snippet></ROW><ROW><id>12858205</id><snippet>web.changequery</snippet></ROW><ROW><id>12858391</id><snippet>&gt;&gt;&gt; import matplotlib.pyplot as plt

&gt;&gt;&gt; Blues = plt.get_cmap('Blues')
&gt;&gt;&gt; print Blues(0)
(0.9686274528503418, 0.9843137264251709, 1.0, 1.0)
&gt;&gt;&gt; print Blues(0.5)
(0.41708574119736169, 0.68063054575639614, 0.83823145908467911, 1.0)
&gt;&gt;&gt; print Blues(1.0)
(0.96555171293370867, 0.9823452528785257, 0.9990157632266774, 1.0)
</snippet></ROW><ROW><id>12858400</id><snippet>x = [ datetime.datetime(..), ... , datetime.datetime()]
ax.xaxis.set_ticks(x)
</snippet></ROW><ROW><id>12858498</id><snippet>tarfile</snippet></ROW><ROW><id>12858498</id><snippet>extract</snippet></ROW><ROW><id>12858498</id><snippet>import os
import tarfile

extract_to = "."
tfile = tarfile.open('so.tar')

members = tfile.getmembers()
for m in members:
    if m.name[0] == os.sep:
        m.name = m.name[1:]
    tfile.extract(m, path=extract_to)
</snippet></ROW><ROW><id>12858976</id><snippet>@cache_control(no_cache=True)</snippet></ROW><ROW><id>12859369</id><snippet>In [1]: lis=[1,2,3]

In [2]: [x*3 for x in lis]
Out[2]: [3, 6, 9]


In [3]: num=123

In [4]: [int(x)*4 for x in str(num)]  #convert num to a string and iterate over it
Out[4]: [4, 8, 12]

In [5]: ''.join(str(int(x)*3) for x in str(num)) #to get something like 4812
Out[5]: '4812'
</snippet></ROW><ROW><id>12859441</id><snippet>(tutorial) $ ../bin/gunicorn -w 4 myapp:app
</snippet></ROW><ROW><id>12859441</id><snippet>Listening at: http://127.0.0.1:8000
</snippet></ROW><ROW><id>12859441</id><snippet>127.0.0.1</snippet></ROW><ROW><id>12859441</id><snippet>--bind 0.0.0.0:80</snippet></ROW><ROW><id>12859524</id><snippet>progressbar</snippet></ROW><ROW><id>12859524</id><snippet>$ cd progressbar-2.2/
$ sudo python setup.py install
...blablabla...
$ python
&gt;&gt;&gt; from progressbar import ProgressBar
&gt;&gt;&gt; pbar = ProgressBar(10)
&gt;&gt;&gt; for i in range(10):
...     pbar.update(i+1)
... 
100% |######################################################################|
</snippet></ROW><ROW><id>12859832</id><snippet>UTF-8</snippet></ROW><ROW><id>12859832</id><snippet>convert_unicode</snippet></ROW><ROW><id>12859832</id><snippet>True</snippet></ROW><ROW><id>12859832</id><snippet># set client encoding to utf8; all strings come back as unicode
create_engine('mysql+mysqldb:///mydb?charset=utf8')
</snippet></ROW><ROW><id>12859832</id><snippet>latin1</snippet></ROW><ROW><id>12859832</id><snippet>latin1</snippet></ROW><ROW><id>12859832</id><snippet>utf8</snippet></ROW><ROW><id>12859832</id><snippet>use_unicode=1</snippet></ROW><ROW><id>12859832</id><snippet>use_unicode=0</snippet></ROW><ROW><id>12859832</id><snippet># set client encoding to utf8; all strings come back as utf8 str
create_engine('mysql+mysqldb:///mydb?charset=utf8&amp;use_unicode=0')
</snippet></ROW><ROW><id>12860787</id><snippet>{% for flk, flv in dict.items %}
    {% for slk, slv in flv.items %}
        &lt;th&gt;First level key {{ flk }} Second level key {{ slk }}&lt;/th&gt;
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>12860787</id><snippet>(flk, slk)</snippet></ROW><ROW><id>12860787</id><snippet>(flv, slv)</snippet></ROW><ROW><id>12860809</id><snippet>file-handler</snippet></ROW><ROW><id>12860809</id><snippet>stdout</snippet></ROW><ROW><id>12860809</id><snippet>Popen</snippet></ROW><ROW><id>12860809</id><snippet>p = subprocess.Popen(splited_cmd,
                     stderr=subprocess.PIPE,
                     stdout=open(output_file_path, "w"))
</snippet></ROW><ROW><id>12860873</id><snippet>labels = (
    (1000, 'number &gt;= 1000'),
    (200,  '200 &lt;= number &lt; 1000'),
    (100,  '100 &lt;= number &lt; 200'),
    (50,   '50 &lt;= number &lt; 100'),
    (0,    'number &lt; 50'),
)

for i in number:
    for limit, label in labels:
         if i &gt;= limit:
             categoryNumber.append(label)
             break
</snippet></ROW><ROW><id>12861021</id><snippet>with zipfile.ZipFile(os.path.join(path, '{0}.zip'.format(date)), 'w') as myzip: 
</snippet></ROW><ROW><id>12861021</id><snippet>from zipfile import ZipFile
</snippet></ROW><ROW><id>12861052</id><snippet>os</snippet></ROW><ROW><id>12861052</id><snippet>if 'posix' in _names:
    name = 'posix'
    linesep = '\n'
    from posix import *
    try:
        from posix import _exit
    except ImportError:
      pass
    import posixpath as path
    import posix
    __all__.extend(_get_exports_list(posix))
    del posix
</snippet></ROW><ROW><id>12861052</id><snippet>if</snippet></ROW><ROW><id>12861052</id><snippet>try:</snippet></ROW><ROW><id>12861052</id><snippet>except ImportError:</snippet></ROW><ROW><id>12861052</id><snippet>try:
    from subprocess import check_output
except ImportError:
    # Python 2.6 and before
    def check_output(*popenargs, **kwargs):
        from subprocess import Popen
        if 'stdout' in kwargs:
            raise ValueError('stdout argument not allowed, it will be '
                             'overridden.')
        process = Popen(stdout=PIPE, *popenargs, **kwargs)
        output, unused_err = process.communicate()
        retcode = process.poll()
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
            raise CalledProcessError(retcode, cmd)
        return output
</snippet></ROW><ROW><id>12861052</id><snippet>if</snippet></ROW><ROW><id>12861052</id><snippet>check_output</snippet></ROW><ROW><id>12861052</id><snippet>if</snippet></ROW><ROW><id>12861052</id><snippet>if</snippet></ROW><ROW><id>12861159</id><snippet>IPerson</snippet></ROW><ROW><id>12861159</id><snippet>class Task(object):
    implements(ITask)

    def __init__(self, owner):
        self.owner = IPerson(owner)
</snippet></ROW><ROW><id>12861364</id><snippet>wxGetApp().ExitMainLoop()
</snippet></ROW><ROW><id>12861459</id><snippet>def flat_list(l):
    for node in l:
        if isinstance(node, list):
            for i in flat_list(node):
                yield i
        else:
            yield node
</snippet></ROW><ROW><id>12861459</id><snippet>def flat_list_keeping_track(l, track=None):
    track = track or ()
    for i, node in enumerate(l):
        new_track = track + (i,)
        if isinstance(node, list):
            for result in flat_list_keeping_track(node, track=new_track):
                yield result
        else:
            yield node, new_track
</snippet></ROW><ROW><id>12861459</id><snippet>def get_structure_for_node(structure, find_node=1):
    return list(flat_list(structure))[find_node][1]
</snippet></ROW><ROW><id>12861459</id><snippet>import itertools
def get_structure_for_node(structure, find_node=1):
    return next(itertools.islice(flat_list(structure), find_node, find_node+1))[1]
</snippet></ROW><ROW><id>12861513</id><snippet>A = np.ones((4,3))
B = np.zeros_like(A)

C = np.empty((A.shape[0]+B.shape[0],A.shape[1]))

C[::2,:] = A
C[1::2,:] = B
</snippet></ROW><ROW><id>12862196</id><snippet>In [39]: df2.pivot_table(values='X', rows='Y', cols='Z', 
                         aggfunc=lambda x: len(x.unique()))
Out[39]: 
Z   Z1  Z2  Z3
Y             
Y1   1   1 NaN
Y2 NaN NaN   1
</snippet></ROW><ROW><id>12862813</id><snippet>Image</snippet></ROW><ROW><id>12862813</id><snippet>for i, channel in enumerate(self.image):
    channel_ = spf.fftshift(spf.fft2(channel)) # take FFT of each channel (r,g,b) separately
    channel_ = scipy.multiply(channel_,ff) # multiply each channel by the filter (freq. domain)
    filtered_image[:][:][i] = spf.fftshift(spf.ifft2(channel_)) # inverse FFT each channel separately
</snippet></ROW><ROW><id>12862878</id><snippet>newbuttonname = username 
newbuttonname = Tkinter.Button(win, text = newbuttonname, 
    command = lambda name=username:click_one(name))
</snippet></ROW><ROW><id>12863239</id><snippet>from scipy import stats
bin_edges = stats.mstats.mquantiles(data, [0, 2./6, 4./6, 1])
&gt;&gt; array([1. , 1.24666667, 2.05333333, 2.12])
</snippet></ROW><ROW><id>12863279</id><snippet>re.sub('^[^a-zA-z]*|[^a-zA-Z]*$','',s)
</snippet></ROW><ROW><id>12863279</id><snippet>s</snippet></ROW><ROW><id>12863301</id><snippet>R_PPC_REL24</snippet></ROW><ROW><id>12863301</id><snippet>-fPIC</snippet></ROW><ROW><id>12863301</id><snippet>-shared</snippet></ROW><ROW><id>12863301</id><snippet>-Bshared</snippet></ROW><ROW><id>12863395</id><snippet>geo</snippet></ROW><ROW><id>12863395</id><snippet>from geo import geomodel
</snippet></ROW><ROW><id>12863395</id><snippet>Location</snippet></ROW><ROW><id>12863395</id><snippet>proximity_fetch</snippet></ROW><ROW><id>12863395</id><snippet>GeoModel</snippet></ROW><ROW><id>12863395</id><snippet>class Location(ndb.Model, GeoModel):
....
</snippet></ROW><ROW><id>12863395</id><snippet>GeoModel</snippet></ROW><ROW><id>12863395</id><snippet>db</snippet></ROW><ROW><id>12863395</id><snippet>ndb</snippet></ROW><ROW><id>12863497</id><snippet>print("... you guessed {}, and ... was {}!".format(math_guess, math_score))
</snippet></ROW><ROW><id>12863733</id><snippet>requests</snippet></ROW><ROW><id>12863733</id><snippet>r.text</snippet></ROW><ROW><id>12863733</id><snippet>r.__dict__</snippet></ROW><ROW><id>12863733</id><snippet>dir(r)</snippet></ROW><ROW><id>12864009</id><snippet>def test(*args):
    return sum(args)
</snippet></ROW><ROW><id>12864009</id><snippet>sum((1,2))
</snippet></ROW><ROW><id>12864009</id><snippet>def testsum(a,b):
    t = test(a,b)
    return t.sum()
</snippet></ROW><ROW><id>12864009</id><snippet>result = test(a,b).sum()
</snippet></ROW><ROW><id>12864009</id><snippet>__new__</snippet></ROW><ROW><id>12864009</id><snippet>class test(object):
    def __new__(cls,*args):
       return sum(*args)

print (test(1,2,3,4)) #10
</snippet></ROW><ROW><id>12864196</id><snippet>map:Vertex-&gt;Vertex</snippet></ROW><ROW><id>12864196</id><snippet>parentMap[v] = the vertex we used to discover v</snippet></ROW><ROW><id>12864196</id><snippet>    for child in children:
        stack.push(child[0])
        parentMap[child] = parent #this line was added
</snippet></ROW><ROW><id>12864196</id><snippet>curr = target
while (curr != None):
  print curr
  curr = parentMap[curr]
</snippet></ROW><ROW><id>12864196</id><snippet>current</snippet></ROW><ROW><id>12864196</id><snippet>visited</snippet></ROW><ROW><id>12864295</id><snippet>ImageField</snippet></ROW><ROW><id>12864295</id><snippet>{% if image.width &gt; 100 %}
    {% thumbnail image 100x100 as thumb %}
        &lt;img src="{{ thumb.url }}"/&gt;
    {% endthumbnail %}
{% else %}
    &lt;img src="{{ image.url }}"/&gt;
{% endif %}
</snippet></ROW><ROW><id>12864389</id><snippet>pip install mechanize</snippet></ROW><ROW><id>12864389</id><snippet>import mechanize,cookielib
# Browser
br = mechanize.Browser()

# Cookie Jar
cj = cookielib.LWPCookieJar()
br.set_cookiejar(cj)

# Browser options
br.set_handle_equiv(True)
br.set_handle_gzip(True)
br.set_handle_redirect(True)
br.set_handle_referer(True)
br.set_handle_robots(False)

# Follows refresh 0 but not hangs on refresh &gt; 0
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

# Want debugging messages?
#br.set_debug_http(True)
#br.set_debug_redirects(True)
#br.set_debug_responses(True)

# User-Agent (this is cheating, ok?)
br.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')]

# Open odesk site
r = br.open('https://www.odesk.com/login.php')
form = br.forms().next()  # the login form is unnamed...
print form.action
form['login'] = 'yourlogin'
form['password'] = 'yourpassword'
br.form = form
br.submit()

print br.geturl()
#your form data goes here
r = br.open(br.geturl() + 'new/')
print br.geturl()
br.select_form(name="jobsPost")  # the form is unnamed...
br.find_control(name="category").value = ['Writing &amp; Translation']
br.find_control(name="subcategory").value = ['35']
br.form['title'] = 'Filling up a profile'
br.form['description'] = 'Require assistance in filing up our profile'
br.find_control(name="job_type").value = ['Fixed']
br.form['job_budget'] = '10'
br.form['job_finish_date'] = '10-14-2012'
br.find_control(name="visibility").value = ['private']
br.submit()

print br.geturl()
</snippet></ROW><ROW><id>12864490</id><snippet>numpy.ndindex</snippet></ROW><ROW><id>12864490</id><snippet>print list(np.ndindex(2,2))
</snippet></ROW><ROW><id>12864490</id><snippet>print list(np.ndindex(2,2,2))
</snippet></ROW><ROW><id>12864490</id><snippet>zip</snippet></ROW><ROW><id>12864490</id><snippet>g = np.meshgrid([0,1],[0,1])
zip(*(x.flat for x in g))
</snippet></ROW><ROW><id>12864490</id><snippet>np.meshgrid</snippet></ROW><ROW><id>12864649</id><snippet>In [25]: import numpy as np

In [26]: a = np.array([[1,2],[3,45]])

In [27]: a
Out[27]: 
array([[ 1,  2],
       [ 3, 45]])

In [28]: [''.join(str(x) for x in row) for row in a.T]
Out[28]: ['13', '245']

In [29]: np.array([''.join(str(x) for x in row) for row in a.T], int)
Out[29]: array([ 13, 245])
</snippet></ROW><ROW><id>12864701</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>12864701</id><snippet>settings.py</snippet></ROW><ROW><id>12864701</id><snippet>request</snippet></ROW><ROW><id>12864701</id><snippet>&lt;a href="{% url 'my_url' %}?{{ request.META.QUERY_STRING }}"&gt;
</snippet></ROW><ROW><id>12864701</id><snippet>?</snippet></ROW><ROW><id>12864701</id><snippet>&lt;a href="{% url 'my_url' %}{% if request.META.QUERY_STRING %}?{{ request.META.QUERY_STRING }}{% endif %}"&gt;
</snippet></ROW><ROW><id>12864938</id><snippet>import traceback

# Import arcpy module
import arcpy
from arcpy import env
from arcpy.sa import *
arcpy.CheckOutExtension("3D")

# Set Over write
arcpy.env.overwriteOutput = 1

# Set the workspace
env.workspace = r"Z:\temp.gdb"
outworkspace = r"Z:\location2\temp2.gdb"

# Local variables:
counties = r"Z:\temp.gdb\boundaries\Counties"
counties_lyr = arcpy.MakeFeatureLayer_management(counties,"counties_lyr")

# Get the list of rasters to process
raster_list = arcpy.ListRasters("*_clp")
print raster_list

for raster in raster_list:
    try:
        # Define name and location for output raster
        name = outworkspace + "\\" + str(raster)

        # Process: Raster Domain
        arcpy.RasterDomain_3d(raster, "in_memory/temp", "POLYGON")

        # Process: Central Feature
        arcpy.MeanCenter_stats("in_memory/temp", "in_memory/temp1")

        # Process: Select Layer By Location
        arcpy.SelectLayerByLocation_management(counties_lyr, "intersect", "in_memory/temp1", "", "NEW_SELECTION")

        # Clip Raster
        arcpy.Clip_management(raster, "#", name,counties_lyr, "#", "ClippingGeometry")

        # Delete in_memory
        arcpy.Delete_management("in_memory")

        print "processing " + raster + " complete..."

    except:
        print "Something went wrong handling " + str(raster) + ". Here's a traceback:"
        traceback.print_exc()
        continue

print "All processing is now finished"
</snippet></ROW><ROW><id>12864944</id><snippet>psum(*x + [y])
</snippet></ROW><ROW><id>12864984</id><snippet>maxPersistentPerHost</snippet></ROW><ROW><id>12864984</id><snippet>1</snippet></ROW><ROW><id>12864984</id><snippet>maxPersistentPerHost</snippet></ROW><ROW><id>12864984</id><snippet>twisted.internet.defer.DeferredLock</snippet></ROW><ROW><id>12864984</id><snippet>Agent</snippet></ROW><ROW><id>12864984</id><snippet>lock = DeferredLock()
d1 = lock.run(agent.request, url, ...)
d2 = lock.run(agent.request, url, ...)
</snippet></ROW><ROW><id>12865044</id><snippet>to_stored_data</snippet></ROW><ROW><id>12865044</id><snippet>pre_save</snippet></ROW><ROW><id>12865050</id><snippet>auto_start_request</snippet></ROW><ROW><id>12865162</id><snippet>METH_STATIC</snippet></ROW><ROW><id>12865162</id><snippet>static PyMethodDef FooMethods[] = 
{
    {"__init__", Foo_init, METH_VARARGS, 
     "doc string"},
    {"doSomething", Foo_doSomething, METH_VARARGS | METH_STATIC,
     "doc string"},
    {NULL},
};
</snippet></ROW><ROW><id>12865657</id><snippet>label</snippet></ROW><ROW><id>12865657</id><snippet>ndimage</snippet></ROW><ROW><id>12865657</id><snippet>ndimage.distance_transform_cdt</snippet></ROW><ROW><id>12865657</id><snippet>a</snippet></ROW><ROW><id>12865657</id><snippet>b, c = ndimage.label(a)
e = numpy.zeros(a.shape)
for i in xrange(c):

    e += ndimage.distance_transform_cdt((b == i + 1) == 0) == 1

print e
</snippet></ROW><ROW><id>12865657</id><snippet>In [41]: print e
[[ 1.  1.  1.  1.  0.  0.]
 [ 1.  0.  0.  2.  1.  1.]
 [ 1.  0.  0.  2.  0.  1.]
 [ 1.  1.  1.  2.  0.  1.]
 [ 0.  0.  0.  1.  1.  1.]
 [ 0.  0.  0.  0.  0.  0.]]
</snippet></ROW><ROW><id>12865657</id><snippet>b = ndimage.binary_closing(a) - a
b = ndimage.binary_dilation(b.astype(bool))

c = ndimage.distance_transform_cdt(a == 0) == 1

e = c.astype(numpy.int) * b + c

print e
</snippet></ROW><ROW><id>12866585</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>12866585</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>12866585</id><snippet>/usr/bin</snippet></ROW><ROW><id>12866585</id><snippet>python</snippet></ROW><ROW><id>12866585</id><snippet>cvs2svn</snippet></ROW><ROW><id>12866585</id><snippet>git-move-refs.py</snippet></ROW><ROW><id>12866585</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>12866585</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>12866585</id><snippet>user@host$ python /path/to/cvs2svn/contrib/git-move-refs.py
</snippet></ROW><ROW><id>12866648</id><snippet>In [4]: import re    
In [5]: text = '10DEUTSCH        GGS Neue Heide 25-27     Wahn-Heide   -1      -1'
In [7]: re.split(r'\s{2,}', text)
Out[7]: ['10DEUTSCH', 'GGS Neue Heide 25-27', 'Wahn-Heide', '-1', '-1']
</snippet></ROW><ROW><id>12866989</id><snippet>from django.db.models import Q

Post.objects.filter( \
    Q(userBy=some_user) | \
    Q(userBy__accept_user__user1=some_user) | \
    Q(userBy__request_user__user2=some_user)).distinct()
</snippet></ROW><ROW><id>12866989</id><snippet>related_name</snippet></ROW><ROW><id>12866989</id><snippet>userBy__accept_user</snippet></ROW><ROW><id>12866989</id><snippet>userBy__request_user</snippet></ROW><ROW><id>12866989</id><snippet>Friend</snippet></ROW><ROW><id>12866989</id><snippet>User</snippet></ROW><ROW><id>12866989</id><snippet>Friend</snippet></ROW><ROW><id>12866989</id><snippet>related_name</snippet></ROW><ROW><id>12866989</id><snippet>User</snippet></ROW><ROW><id>12866989</id><snippet>Friend</snippet></ROW><ROW><id>12866989</id><snippet>friend_requests</snippet></ROW><ROW><id>12866989</id><snippet>accepted_friends</snippet></ROW><ROW><id>12867266</id><snippet># p4 = a22 * (b12-b11)
p4 = strassen(a22, sub_m(b12,b11), q/2)
</snippet></ROW><ROW><id>12867266</id><snippet># p4 = a22 * (b21-b11)
p4 = strassen(a22, sub_m(b21,b11), q/2)
</snippet></ROW><ROW><id>12867266</id><snippet>~/coding$ python -i strass.py
Strassen Outputs:
[[26, 26, 26, 26], [52, 52, 52, 52], [78, 78, 78, 78], [104, 104, 104, 104]]
Should be:
[[26, 26, 26, 26], [52, 52, 52, 52], [78, 78, 78, 78], [104, 104, 104, 104]]
&gt;&gt;&gt; import numpy
&gt;&gt;&gt; def check():
...     for i in range(100):
...         a = numpy.random.randint(0, 10,size=(4,4)).tolist()
...         b = numpy.random.randint(0, 10,size=(4,4)).tolist()
...         assert strassen(a,b,4) == straight(a,b)
...         assert (numpy.array(strassen(a,b,4)) == numpy.dot(a,b)).all()
...     print 'hooray!'
... 
&gt;&gt;&gt; check()
hooray!
</snippet></ROW><ROW><id>12867307</id><snippet>dict</snippet></ROW><ROW><id>12867307</id><snippet>None</snippet></ROW><ROW><id>12867307</id><snippet>KeyError</snippet></ROW><ROW><id>12867307</id><snippet>defaultdict</snippet></ROW><ROW><id>12867307</id><snippet>collections</snippet></ROW><ROW><id>12867307</id><snippet>None</snippet></ROW><ROW><id>12867307</id><snippet>dict</snippet></ROW><ROW><id>12867307</id><snippet>parentMap = dict(some_initializer)</snippet></ROW><ROW><id>12867307</id><snippet>parentMap = {}</snippet></ROW><ROW><id>12867307</id><snippet>parentMap = defaultdict(lambda: None, some_initializer)</snippet></ROW><ROW><id>12867307</id><snippet>parentMap = defaultdict(lambda: None, {})</snippet></ROW><ROW><id>12867307</id><snippet>None</snippet></ROW><ROW><id>12867307</id><snippet>KeyError</snippet></ROW><ROW><id>12867307</id><snippet>None</snippet></ROW><ROW><id>12867307</id><snippet>item is not None</snippet></ROW><ROW><id>12867307</id><snippet>!=</snippet></ROW><ROW><id>12867326</id><snippet>a1</snippet></ROW><ROW><id>12867326</id><snippet>a30</snippet></ROW><ROW><id>12867326</id><snippet>a</snippet></ROW><ROW><id>12867326</id><snippet>a1</snippet></ROW><ROW><id>12867326</id><snippet>a[1]</snippet></ROW><ROW><id>12867326</id><snippet>a30</snippet></ROW><ROW><id>12867326</id><snippet>a[30]</snippet></ROW><ROW><id>12867340</id><snippet>register_blueprints</snippet></ROW><ROW><id>12867340</id><snippet>app.run</snippet></ROW><ROW><id>12867340</id><snippet>def register_blueprints(app):
# Prevents circular imports
    from tumblelog.views import posts
    app.register_blueprint(posts)

register_blueprints(app)

if __name__ == '__main__':
    app.run()
</snippet></ROW><ROW><id>12867340</id><snippet>regist_blueprints</snippet></ROW><ROW><id>12867340</id><snippet>app</snippet></ROW><ROW><id>12867340</id><snippet>app</snippet></ROW><ROW><id>12867340</id><snippet>blueprint</snippet></ROW><ROW><id>12867340</id><snippet>#  application.py
from flask import Flask  # etc.

app = Flask("your_package_name")
</snippet></ROW><ROW><id>12867340</id><snippet># tumblelog/views.py
from flask import Blueprint, current_app  # etc.

posts = Blueprint("tumblelog")

@posts.route("/")
def index():
    # use current_app rather than app here
</snippet></ROW><ROW><id>12867340</id><snippet># run_server.py (use the same pattern for .wsgi files)
from application import app
from tumblelog.views import posts

app.register_blueprint(posts)

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>12867382</id><snippet>udp.Port</snippet></ROW><ROW><id>12867382</id><snippet>IReactorUDP</snippet></ROW><ROW><id>12867382</id><snippet>twisted.internet.iocpreactor.udp.Port</snippet></ROW><ROW><id>12867382</id><snippet>IUDPTransport</snippet></ROW><ROW><id>12867382</id><snippet>self.transport = MyPacketDelayingWrapper(self.transport)</snippet></ROW><ROW><id>12867382</id><snippet>DatagramProtocol</snippet></ROW><ROW><id>12867400</id><snippet>trigrams</snippet></ROW><ROW><id>12867400</id><snippet>trigrams[phoneme1][phoneme2]</snippet></ROW><ROW><id>12867400</id><snippet>phoneme3</snippet></ROW><ROW><id>12867617</id><snippet>matrix</snippet></ROW><ROW><id>12867617</id><snippet>NumpyOverflowPreventer</snippet></ROW><ROW><id>12867617</id><snippet>import numpy as np 
import sys

class NumpyOverflowPreventer(object):

    inverse_operator= { 
        '__iadd__': '__sub__', 
        '__isub__': '__add__', 
        '__imul__': '__div__', 
        '__idiv__': '__mul__'
    }

    def __init__(self, matrix):
        m = matrix
        assert m.dtype==np.uint8
        self.matrix = m
        self.lower_range = float(0)
        self.upper_range = float(2**8-1)

    def __iadd__(self, v):
        # dynamic way to get the name "__iadd__"
        self._operate(v, sys._getframe().f_code.co_name)
        return self

    def _operate(self, b, forward_operator):
        assert type(b) in (int, float)
        reverse_operator = self.inverse_operator[forward_operator]
        uro= getattr(self.upper_range, reverse_operator)
        lro= getattr(self.lower_range, reverse_operator)
        afo= getattr(self.matrix, forward_operator)
        overflows= self.matrix &gt; uro( b )
        underflows= self.matrix &lt; lro( b )
        afo( b )
        self.matrix[overflows]= self.upper_range
        self.matrix[underflows]= self.lower_range
</snippet></ROW><ROW><id>12867617</id><snippet>__iadd__</snippet></ROW><ROW><id>12867617</id><snippet>a = np.matrix(255, dtype= np.uint8)
b = np.matrix(255, dtype= np.uint8)

p = NumpyOverflowPreventer(a)
p+=1

p = NumpyOverflowPreventer(b)
p.__iadd__(1)

print a,b
# [[255]] [[255]]
</snippet></ROW><ROW><id>12867739</id><snippet>data = ser.readline(9999)</snippet></ROW><ROW><id>12867739</id><snippet>if( data == 'READY' ):</snippet></ROW><ROW><id>12867739</id><snippet>if (data.startswith('READY')):</snippet></ROW><ROW><id>12867921</id><snippet>vectorize</snippet></ROW><ROW><id>12867921</id><snippet>np.vectorize(f, otypes=[np.int32])(arr[:, :, 0], arr[:, :, 1], arr[:, :, 2])
</snippet></ROW><ROW><id>12867921</id><snippet>np.vectorize(f, otypes=[np.int32])(*np.rollaxis(arr, 2, 0))
</snippet></ROW><ROW><id>12867921</id><snippet>dsplit</snippet></ROW><ROW><id>12867921</id><snippet>np.vectorize(f, otypes=[np.int32])(*np.dsplit(arr, 3))[..., 0]
</snippet></ROW><ROW><id>12867921</id><snippet>np.vectorize(f, otypes=[np.int32])(*np.dsplit(arr, 3)).reshape(arr.shape[:-1])
</snippet></ROW><ROW><id>12867921</id><snippet>np.vectorize(f, otypes=[np.int32])(*np.dsplit(arr, 3)).squeeze()
</snippet></ROW><ROW><id>12867921</id><snippet>apply_along_axis</snippet></ROW><ROW><id>12867921</id><snippet>np.apply_along_axis(lambda x: f(*x), 2, arr)
</snippet></ROW><ROW><id>12868002</id><snippet>def StringTest(string1, string2):
  return string2 in string1
</snippet></ROW><ROW><id>12868002</id><snippet>result = string2 in string1
</snippet></ROW><ROW><id>12868231</id><snippet>User-Agent</snippet></ROW><ROW><id>12868257</id><snippet>operator.mult</snippet></ROW><ROW><id>12868578</id><snippet>m = re.search("The weather is (\d+) degrees with a humidity of (\d+)%", str)
matched = m.groups()
</snippet></ROW><ROW><id>12868578</id><snippet>&gt;&gt;&gt; s1 = "The weather is 75 degrees with a humidity of 13%"
&gt;&gt;&gt; m = re.search("The weather is (\d+) degrees with a humidity of (\d+)%", s1)
&gt;&gt;&gt; m.groups()
('75', '13')
</snippet></ROW><ROW><id>12868578</id><snippet>findall</snippet></ROW><ROW><id>12868578</id><snippet>&gt;&gt;&gt; re.findall("\d+",s1)
['75', '13']
</snippet></ROW><ROW><id>12868590</id><snippet>print POP_SIZE</snippet></ROW><ROW><id>12868590</id><snippet>print POP_SIZE()</snippet></ROW><ROW><id>12868590</id><snippet>def POP_SIZE():
    return random.randint(100,200)
</snippet></ROW><ROW><id>12868590</id><snippet>POP_SIZE()</snippet></ROW><ROW><id>12868590</id><snippet>for generation in xrange(GENERATIONS):
    ...
    print POP_SIZE()
    ...
</snippet></ROW><ROW><id>12868597</id><snippet>isPlaying</snippet></ROW><ROW><id>12868770</id><snippet>Metric Name</snippet></ROW><ROW><id>12868770</id><snippet>metricname</snippet></ROW><ROW><id>12868770</id><snippet>dicti = {}
dicti['name'] = 'A'
dicti['metricname'] = 'A2' 
dicti['completedunits'] = '10'
dicti['teamsize'] = '2'
entry = spr_client.InsertRow(dict, spreadsheet_key, worksheet_id)
</snippet></ROW><ROW><id>12868770</id><snippet>CellQuery</snippet></ROW><ROW><id>12868770</id><snippet>max</snippet></ROW><ROW><id>12868770</id><snippet>min</snippet></ROW><ROW><id>12869137</id><snippet>import threading
import time
import random

class Worker(threading.Thread):
    def __init__(self, srcfile, printlock,**kwargs):
        super(Worker,self).__init__(**kwargs)
        self.srcfile = srcfile
        self.lock = printlock # so threads don't step on each other's prints

    def run(self):
        with self.lock:
            print("starting %s on %s" % (self.ident,self.srcfile))
        # do whatever you need to, return when done
        # example, sleep for a random interval up to 10 seconds
        time.sleep(random.random()*10)
        with self.lock:
            print("%s done" % self.ident)


def threadme(srcfiles):
    printlock = threading.Lock()
    threadpool = []
    for file in srcfiles:
        threadpool.append(Worker(file,printlock))

    for thr in threadpool:
        thr.start()

    # this loop will block until all threads are done
    # (however it won't necessarily first join those that are done first)
    for thr in threadpool:
        thr.join()

    print("all threads are done")

if __name__ == "__main__":
    threadme(["abc","def","ghi"])
</snippet></ROW><ROW><id>12869137</id><snippet>def threadme(infiles,threadlimit=None,timeout=0.01):
    assert threadlimit is None or threadlimit &gt; 0, \
           "need at least one thread";
    printlock = threading.Lock()
    srcfiles = list(infiles)
    threadpool = []

    # keep going while work to do or being done
    while srcfiles or threadpool:

        # while there's room, remove source files
        # and add to the pool
        while srcfiles and \
           (threadlimit is None \
            or len(threadpool) &lt; threadlimit):
            file = srcfiles.pop()
            wrkr = Worker(file,printlock)
            wrkr.start()
            threadpool.append(wrkr)

        # remove completed threads from the pool
        for thr in threadpool:
            thr.join(timeout=timeout)
            if not thr.is_alive():
                threadpool.remove(thr)

    print("all threads are done")

if __name__ == "__main__":
    for lim in (1,2,3,4):
        print("--- Running with thread limit %i ---" % lim)
        threadme(("abc","def","ghi"),threadlimit=lim)
</snippet></ROW><ROW><id>12869469</id><snippet>CustomError</snippet></ROW><ROW><id>12869469</id><snippet>def expr_to_list(ex):
    tree = []
    stack = [tree]
    for c in ex:
        if c == '(':
            new_node = []
            stack[-1].append(new_node)
            stack.append(new_node)
        elif c == '+' or c == ' ':
            continue
        elif c == ')':
            if stack[-1] == tree:
                raise CustomError('Unmatched Parenthesis')
            stack.pop()
        else:
            stack[-1].append(c)
    if stack[-1] != tree:
        raise CustomError('Unmatched Parenthesis')
    return tree
</snippet></ROW><ROW><id>12869469</id><snippet>&gt;&gt;&gt; expr_to_list('a + (b + c + (x + (y + z) + (d + e)))')
['a', ['b', 'c', ['x', ['y', 'z'], ['d', 'e']]]]
</snippet></ROW><ROW><id>12869469</id><snippet>&gt;&gt;&gt; tokens = re.findall('\(|\)|\+|[\w]+', 
                        '(apple + orange + (banana + grapefruit))')
&gt;&gt;&gt; tokens
['(', 'apple', '+', 'orange', '+', '(', 'banana', '+', 'grapefruit', ')', ')']
&gt;&gt;&gt; expr_to_list(tokens)
[['apple', 'orange', ['banana', 'grapefruit']]]
</snippet></ROW><ROW><id>12869499</id><snippet>from collections import defaultdict

a = [1, 2, 3]
b = [1, 2, 3, 1, 2, 3]

# Build up the count of occurrences in b
d = defaultdict(int)
for bb in b:
    d[bb] += 1

# Remove one for each occurrence in a
for aa in a:
    d[aa] -= 1

# Create a list for all elements that still have a count of one or more
result = []
for k, v in d.iteritems():
    if v &gt; 0:
        result += [k] * v
</snippet></ROW><ROW><id>12869499</id><snippet>from operator import iadd

result = reduce(iadd, [[k] * v for k, v in d.iteritems() if v &gt; 0], [])
</snippet></ROW><ROW><id>12869499</id><snippet>b</snippet></ROW><ROW><id>12869499</id><snippet>a</snippet></ROW><ROW><id>12869499</id><snippet>collections.Counter</snippet></ROW><ROW><id>12869499</id><snippet>from collections import defaultdict
from operator import iadd

a = [1, 2, 3, 4, 5, 6]
b = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]

def build_dd(lst):
    d = defaultdict(int)
    for item in lst:
        d[item] += 1
    return d

def subtract_dd(left, right):
    return {k: left[k] - v for k, v in right.iteritems()}

db = build_dd(b)
da = build_dd(a)
result = reduce(iadd,
                [[k] * v for k, v in subtract_dd(db, da).iteritems() if v &gt; 0],
                [])

print result
</snippet></ROW><ROW><id>12869499</id><snippet>reduce</snippet></ROW><ROW><id>12869499</id><snippet>collections.Counter</snippet></ROW><ROW><id>12869499</id><snippet>from collections import Counter

base = [1, 2, 3]
missing = [4, 5, 6]
extra = [7, 8, 9]
a = base + missing
b = base * 4 + extra

result = Counter(b) - Counter(a)
print result
assert result == dict([(k, 3) for k in base] + [(k, 1) for k in extra])
</snippet></ROW><ROW><id>12869642</id><snippet>pip install -e URI#egg=EggName
pip install -e git+git://github.com/Star2Billing/django-audiofield.git#egg=audiofield
</snippet></ROW><ROW><id>12869911</id><snippet>Tinter</snippet></ROW><ROW><id>12869911</id><snippet>applyTint</snippet></ROW><ROW><id>12869911</id><snippet>Overlay</snippet></ROW><ROW><id>12869911</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class Tinter(QtGui.QWidget):
    def __init__(self, image, parent=None):
        super(Tinter, self).__init__(parent)

        self.pixmap = QtGui.QPixmap(image)

        self.normal = QtGui.QLabel()
        self.normal.setPixmap(self.pixmap)
        self.tinted = QtGui.QLabel()

        self.red = QtGui.QSlider(QtCore.Qt.Horizontal)
        self.red.setRange(0, 255)
        self.red.sliderMoved.connect(self.applyTint)
        self.green = QtGui.QSlider(QtCore.Qt.Horizontal)
        self.green.setRange(0, 255)
        self.green.sliderMoved.connect(self.applyTint)
        self.blue = QtGui.QSlider(QtCore.Qt.Horizontal)
        self.blue.setRange(0, 255)
        self.blue.sliderMoved.connect(self.applyTint)
        self.alpha = QtGui.QSlider(QtCore.Qt.Horizontal)
        self.alpha.setRange(0, 255)
        self.alpha.setValue(128)
        self.alpha.sliderMoved.connect(self.applyTint)


        controlLayout = QtGui.QFormLayout()
        controlLayout.addRow('red', self.red)
        controlLayout.addRow('green', self.green)
        controlLayout.addRow('blue', self.blue)
        controlLayout.addRow('alpha', self.alpha)

        layout = QtGui.QHBoxLayout()
        layout.addWidget(self.normal)
        layout.addWidget(self.tinted)
        layout.addLayout(controlLayout)
        self.setLayout(layout)

        self.applyTint()

    def applyTint(self):
        temp = QtGui.QPixmap(self.pixmap)
        color = QtGui.QColor(self.red.value(),
                             self.green.value(),
                             self.blue.value(),
                             self.alpha.value())
        painter = QtGui.QPainter(temp)
        painter.setCompositionMode(painter.CompositionMode_Overlay)
        painter.fillRect(temp.rect(), color)
        painter.end()
        self.tinted.setPixmap(temp)

app = QtGui.QApplication(sys.argv)

main = Tinter('so.jpg')
main.show()

sys.exit(app.exec_())
</snippet></ROW><ROW><id>12870092</id><snippet>m = 365 
ans = 0
for x in range(0,m-1):
  tmp = 1
  for y in range(0,x):
    tmp *= (M-y)/M
  ans += tmp
return ans
</snippet></ROW><ROW><id>12870218</id><snippet>re.findall</snippet></ROW><ROW><id>12870218</id><snippet>import re

s = "ABC12DEF3G56HIJ7"
pattern = re.compile(r'([A-Z]+)([0-9]+)')

for (letters, numbers) in re.findall(pattern, s):
    print numbers, '*', letters
</snippet></ROW><ROW><id>12870329</id><snippet>timeit.timeit("A0(aList)", setup="from HW2 import A0; aList = [randint(1,256) * (-1) ** randint(1,2) for j in range("+str(n)+")] ", number=1000000)
</snippet></ROW><ROW><id>12870418</id><snippet>class Bar(Foo):
    instances = []
    def __init__(self, a):
            print a
            Bar.instances.append(self)

inst_b1 = Bar(3)
inst_b2 = Bar('Hello World!!!')
print len(Bar.instances)
print Bar.instances
</snippet></ROW><ROW><id>12870467</id><snippet>struct Foo</snippet></ROW><ROW><id>12870467</id><snippet>#include &lt;stdlib.h&gt;
#include "foo.h"
int main()
{
   struct Foo f;
   // initialize f with some values
   abort();
}
</snippet></ROW><ROW><id>12870467</id><snippet>foo-v2</snippet></ROW><ROW><id>12870467</id><snippet>foo-v2.core</snippet></ROW><ROW><id>12870467</id><snippet>struct Foo</snippet></ROW><ROW><id>12870467</id><snippet>foo.h</snippet></ROW><ROW><id>12870467</id><snippet>struct Foo</snippet></ROW><ROW><id>12870467</id><snippet>foo-v1</snippet></ROW><ROW><id>12870467</id><snippet>foo-v1.core</snippet></ROW><ROW><id>12870467</id><snippet>struct Foo</snippet></ROW><ROW><id>12870467</id><snippet>foo-v3</snippet></ROW><ROW><id>12870467</id><snippet>foo-v3.core</snippet></ROW><ROW><id>12870467</id><snippet>foo-vN</snippet></ROW><ROW><id>12870467</id><snippet>foo-vN.core</snippet></ROW><ROW><id>12870511</id><snippet>$('#' + id_arg).click(function(){
    $(this).parent().remove();
});
</snippet></ROW><ROW><id>12870511</id><snippet>$('#' + id_arg).closest('li').remove();
</snippet></ROW><ROW><id>12870576</id><snippet>import vim
os.environ['DJANGO_SETTINGS_MODULE'] = \
    vim.eval("""expand("%:p:h")""").split('/')[4] + '.settings'
</snippet></ROW><ROW><id>12870703</id><snippet>from fabric.api import *

env.user = "host"
env.hosts = ["hostname"]
env.directory = "/home/captain/public/daaru"
env.activate = "source /home/captain/public/daaru/v1/bin/activate"

def deploy():
    with cd(env.directory):
        run("git pull")
        run("sudo service apache2 reload")

def virtualenv(command):
    with cd(env.directory), prefix(env.activate):
        run(command)

def populate_db():
    virtualenv("python setup.py")

def freeze():
    """ command for testing virtualenv """
    virtualenv("pip freeze")
</snippet></ROW><ROW><id>12870823</id><snippet>// Your C file to be called from python
// To compile :
// gcc -dynamiclib -I/usr/include/python2.7/ -lpython2.7 -o Module.dylib Module.c

#include &lt; Python.h &gt;

static PyObject* py_myFunction(PyObject* self, PyObject* args)
{
    char *s = "Hello from C!";
    return Py_BuildValue("s", s);
}

static PyMethodDef myModule_methods[] = {
    {"myFunction", py_myFunction, METH_VARAGS},
    {NULL, NULL}
};

void initmyModule()
{
    (void) Py_InitModule("myModule", myModule_methods);
}
</snippet></ROW><ROW><id>12870823</id><snippet>from Module import *
print "Result from myFunction:", myFunction()
</snippet></ROW><ROW><id>12871072</id><snippet>    while time.time() - t - expiry &lt; 0:
        yield r.get(fpKey)
</snippet></ROW><ROW><id>12871072</id><snippet>if r.exists(fpKey):
    return r.get(fpKey)
</snippet></ROW><ROW><id>12871168</id><snippet>pylibmc</snippet></ROW><ROW><id>12871168</id><snippet>pickle</snippet></ROW><ROW><id>12871168</id><snippet>redis-py</snippet></ROW><ROW><id>12871168</id><snippet>def set_value(redis, key, value):
    redis.set(key, pickle.dumps(value))

def get_value(redis, key):
    pickled_value = redis.get(key)
    if pickled_value is None:
        return None
    return pickle.loads(pickled_value)
</snippet></ROW><ROW><id>12871250</id><snippet>show_results</snippet></ROW><ROW><id>12871250</id><snippet>labelname</snippet></ROW><ROW><id>12871250</id><snippet>None</snippet></ROW><ROW><id>12871250</id><snippet>flask.request.args</snippet></ROW><ROW><id>12871250</id><snippet>from flask import request

@app.route('/my_search/&lt;labelname&gt;')
def show_results(labelname=None):
    results1 = request.args.get('results1', '0-100')
    ...
</snippet></ROW><ROW><id>12871250</id><snippet>%</snippet></ROW><ROW><id>12871250</id><snippet>sql = ".... LIMIT %s, %s"
g.db.execute(sql, (limit_offset, limit_count))
</snippet></ROW><ROW><id>12871337</id><snippet>pickle</snippet></ROW><ROW><id>12871337</id><snippet>pickle</snippet></ROW><ROW><id>12871337</id><snippet>import pickle
serial_str = pickle.dumps(your_rrule_object)
db.store(serial_str)
...
serial_str = db.retrieve()
new_rrule_object = pickle.loads(serial_str)
</snippet></ROW><ROW><id>12871605</id><snippet>bin</snippet></ROW><ROW><id>12871605</id><snippet>models</snippet></ROW><ROW><id>12871605</id><snippet>if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>12871605</id><snippet>production.ini</snippet></ROW><ROW><id>12871605</id><snippet>../bin/python -m myproject.scripts.whooshindex production.ini 
</snippet></ROW><ROW><id>12871605</id><snippet>-m</snippet></ROW><ROW><id>12871605</id><snippet>initializedb.py</snippet></ROW><ROW><id>12871664</id><snippet>muutujad = [elem for elem in muutujad if elem != ',']
</snippet></ROW><ROW><id>12871664</id><snippet>if</snippet></ROW><ROW><id>12871664</id><snippet>== True</snippet></ROW><ROW><id>12871664</id><snippet>if</snippet></ROW><ROW><id>12871664</id><snippet>if</snippet></ROW><ROW><id>12871664</id><snippet>("," in muutujad) and (muutujad == True)
</snippet></ROW><ROW><id>12871664</id><snippet>in</snippet></ROW><ROW><id>12871664</id><snippet>==</snippet></ROW><ROW><id>12871664</id><snippet>== True</snippet></ROW><ROW><id>12871664</id><snippet>while</snippet></ROW><ROW><id>12871664</id><snippet>list()</snippet></ROW><ROW><id>12871664</id><snippet>&gt;&gt;&gt; list('Some,string')
['S', 'o', 'm', 'e', ',', 's', 't', 'r', 'i', 'n', 'g']
</snippet></ROW><ROW><id>12871664</id><snippet>.split()</snippet></ROW><ROW><id>12871664</id><snippet>&gt;&gt;&gt; 'Some,string'.split(',')
['Some', 'string']
</snippet></ROW><ROW><id>12871805</id><snippet>add8(*(intTObin8(1) + intTObin8(1) + [0]))
</snippet></ROW><ROW><id>12871805</id><snippet>add8</snippet></ROW><ROW><id>12871805</id><snippet>def add8_from_bin8(a,b,c0):
    add8(*(a + b + [c0]))

add8_from_bin8(intTObin8(1), intTObin8(1), 0)
</snippet></ROW><ROW><id>12871855</id><snippet>restart squid</snippet></ROW><ROW><id>12871855</id><snippet>service squid restart</snippet></ROW><ROW><id>12872092</id><snippet>import re

def repl(match):
    return match.group(1) + ("0"*7) + match.group(2)

print re.sub(r"(HD)([1-9]{1}[0-9]{5})", repl, "HD479659")
</snippet></ROW><ROW><id>12872092</id><snippet>import re

values_to_transform = [
    'HD479659',
    'HD477899',
    'HD423455',
    'does not match',
    'but does not matter'
]

def repl(match):
    return match.group(1) + ("0"*7) + match.group(2)

for value in values_to_transform:
    print re.sub(r"(HD)([1-9]{1}[0-9]{5})", repl, value)
</snippet></ROW><ROW><id>12872092</id><snippet>HD0000000479659
HD0000000477899
HD0000000423455
does not match
but does not matter
</snippet></ROW></DATA>