<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>1935988</id><snippet>import socket
import urllib2

# timeout in seconds
timeout = 10
socket.setdefaulttimeout(timeout)

# this call to urllib2.urlopen now uses the default timeout
# we have set in the socket module
req = urllib2.Request('http://www.voidspace.org.uk')
response = urllib2.urlopen(req)
</snippet></ROW><ROW><id>1936210</id><snippet>if foo: #{
    print "it's true"
#}
else: #{
    print "it's false!"
#}
</snippet></ROW><ROW><id>1936375</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>1936375</id><snippet>__lshift__</snippet></ROW><ROW><id>1936375</id><snippet>.</snippet></ROW><ROW><id>1936375</id><snippet>__getattr__</snippet></ROW><ROW><id>1936375</id><snippet>__getattribute__</snippet></ROW><ROW><id>1936375</id><snippet>__setattr__</snippet></ROW><ROW><id>1936375</id><snippet>=</snippet></ROW><ROW><id>1936375</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>1936375</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>1936375</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>1936487</id><snippet>float</snippet></ROW><ROW><id>1936487</id><snippet>__init__</snippet></ROW><ROW><id>1936487</id><snippet>self</snippet></ROW><ROW><id>1936487</id><snippet>float</snippet></ROW><ROW><id>1936487</id><snippet>float</snippet></ROW><ROW><id>1936487</id><snippet>__init__</snippet></ROW><ROW><id>1936487</id><snippet>__new__</snippet></ROW><ROW><id>1936487</id><snippet>int</snippet></ROW><ROW><id>1936487</id><snippet>str</snippet></ROW><ROW><id>1936487</id><snippet>tuple</snippet></ROW><ROW><id>1936487</id><snippet>__init__</snippet></ROW><ROW><id>1936487</id><snippet>self</snippet></ROW><ROW><id>1936487</id><snippet>self</snippet></ROW><ROW><id>1936487</id><snippet>__new__</snippet></ROW><ROW><id>1936487</id><snippet>float</snippet></ROW><ROW><id>1936487</id><snippet>class My_Number(float):
  def __new__(cls, float_string):
    try: return float.__new__(cls, float_string)
    except (TypeError, ValueError): raise My_Error(float_string)
</snippet></ROW><ROW><id>1936487</id><snippet>__init__</snippet></ROW><ROW><id>1936487</id><snippet>&gt;&gt;&gt; n = My_Number('foo')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in __new__
NameError: global name 'My_Error' is not defined
</snippet></ROW><ROW><id>1936487</id><snippet>My_Error</snippet></ROW><ROW><id>1936888</id><snippet>/(?&lt;!&amp;)&amp;/
</snippet></ROW><ROW><id>1936894</id><snippet>def count(self):
    self.running=True
    while self.running:
        self.cnt+=1
        print self.cnt
        self.lbl.setText(str(self.cnt))
        self.repaint()
</snippet></ROW><ROW><id>1936894</id><snippet>self.running=False</snippet></ROW><ROW><id>1936894</id><snippet>repaint</snippet></ROW><ROW><id>1936894</id><snippet>time.sleep</snippet></ROW><ROW><id>1937058</id><snippet>#!/usr/bin/python
## This is an example of a simple sound capture script.
##
## The script opens an ALSA pcm for sound capture. Set
## various attributes of the capture, and reads in a loop,
## Then prints the volume.
##
## To test it out, run it and shout at your microphone:

import alsaaudio, time, audioop

# Open the device in nonblocking capture mode. The last argument could
# just as well have been zero for blocking mode. Then we could have
# left out the sleep call in the bottom of the loop
inp = alsaaudio.PCM(alsaaudio.PCM_CAPTURE,alsaaudio.PCM_NONBLOCK)

# Set attributes: Mono, 8000 Hz, 16 bit little endian samples
inp.setchannels(1)
inp.setrate(8000)
inp.setformat(alsaaudio.PCM_FORMAT_S16_LE)

# The period size controls the internal number of frames per period.
# The significance of this parameter is documented in the ALSA api.
# For our purposes, it is suficcient to know that reads from the device
# will return this many frames. Each frame being 2 bytes long.
# This means that the reads below will return either 320 bytes of data
# or 0 bytes of data. The latter is possible because we are in nonblocking
# mode.
inp.setperiodsize(160)

while True:
    # Read data from device
    l,data = inp.read()
    if l:
    	# Return the maximum of the absolute value of all samples in a fragment.
    	print audioop.max(data, 2)
    time.sleep(.001)
</snippet></ROW><ROW><id>1937063</id><snippet>print</snippet></ROW><ROW><id>1937063</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; class tee(object):
...   def __init__(self, fn='/tmp/foo.txt'):
...     self.o = sys.stdout
...     self.f = open(fn, 'w')
...   def write(self, s):
...     self.o.write(s)
...     self.f.write(s)
... 
&gt;&gt;&gt; sys.stdout = tee()
&gt;&gt;&gt; print('hello world!')
hello world!
&gt;&gt;&gt; 
$ cat /tmp/foo.txt
hello world!
</snippet></ROW><ROW><id>1937063</id><snippet>retvalue = subprocess.check_call(cmd, shell=True)
</snippet></ROW><ROW><id>1937063</id><snippet>cmd</snippet></ROW><ROW><id>1937063</id><snippet>p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
so, se = p.communicate()
print(so)
retvalue = p.returncode
</snippet></ROW><ROW><id>1937063</id><snippet>cmd</snippet></ROW><ROW><id>1937063</id><snippet>.communicate</snippet></ROW><ROW><id>1937063</id><snippet>def echoed_input(prompt):
    response = raw_input(prompt)
    sys.stdout.f.write(response)
    return response
</snippet></ROW><ROW><id>1937063</id><snippet>raw_input</snippet></ROW><ROW><id>1937063</id><snippet>tee</snippet></ROW><ROW><id>1937063</id><snippet>communicate</snippet></ROW><ROW><id>1937063</id><snippet>p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, 
                     stderr=subprocess.STDOUT)
so, se = p.communicate()
print(so)
retvalue = p.returncode
</snippet></ROW><ROW><id>1937063</id><snippet>p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, 
                     stderr=subprocess.STDOUT)
for line in p.stdout:
  sys.stdout.write(p)
p.wait()
retvalue = p.returncode
</snippet></ROW><ROW><id>1937063</id><snippet>cmd</snippet></ROW><ROW><id>1937104</id><snippet>p.stdin.flush()</snippet></ROW><ROW><id>1937556</id><snippet>aList = range(10)
anIterator = iter(aList)

for item in anIterator:
    print item
    if item &gt; 4: break

for item in anIterator:
    print item
</snippet></ROW><ROW><id>1937636</id><snippet>datetime.time</snippet></ROW><ROW><id>1937636</id><snippet>from datetime import date
from datetime import datetime
d = date.today()
datetime.combine(d, datetime.min.time())
</snippet></ROW><ROW><id>1937864</id><snippet>var userName = {{name}}
</snippet></ROW><ROW><id>1937864</id><snippet>var userName = Bob
</snippet></ROW><ROW><id>1937864</id><snippet>var userName = '{{name}}';
</snippet></ROW><ROW><id>1937864</id><snippet>&amp;</snippet></ROW><ROW><id>1937864</id><snippet>&lt;</snippet></ROW><ROW><id>1937864</id><snippet>escapejs</snippet></ROW><ROW><id>1937864</id><snippet>var userName = '{{name|escapejs}}';
</snippet></ROW><ROW><id>1937864</id><snippet>&lt;</snippet></ROW><ROW><id>1937864</id><snippet>&lt;/script&gt;</snippet></ROW><ROW><id>1938096</id><snippet>time</snippet></ROW><ROW><id>1938096</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.time()
1261367718.971009
</snippet></ROW><ROW><id>1938208</id><snippet>lambda x: 2**X</snippet></ROW><ROW><id>1938208</id><snippet>x</snippet></ROW><ROW><id>1938208</id><snippet>X</snippet></ROW><ROW><id>1938295</id><snippet>int</snippet></ROW><ROW><id>1938295</id><snippet>inp = int(input("Enter a number:"))
</snippet></ROW><ROW><id>1938295</id><snippet>inp = input("Enter a number:")
</snippet></ROW><ROW><id>1938295</id><snippet>inp</snippet></ROW><ROW><id>1938295</id><snippet>n</snippet></ROW><ROW><id>1938295</id><snippet>NameError</snippet></ROW><ROW><id>1938295</id><snippet>n = 0</snippet></ROW><ROW><id>1938295</id><snippet>for</snippet></ROW><ROW><id>1938295</id><snippet>n = n + i;
</snippet></ROW><ROW><id>1938295</id><snippet>n = n + int(i)
</snippet></ROW><ROW><id>1938295</id><snippet>'7'</snippet></ROW><ROW><id>1938295</id><snippet>7</snippet></ROW><ROW><id>1938625</id><snippet>ADMINS = (
    ('Your Name', 'your_name@email.com'),
)

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_PASSWORD = 'password'
EMAIL_HOST_USER = 'gmail_account'
EMAIL_SUBJECT_PREFIX = 'something'
EMAIL_USE_TLS = True
</snippet></ROW><ROW><id>1938779</id><snippet>class p1(object):pass
class p2(p1):pass

issubclass(p2, p1)
</snippet></ROW><ROW><id>1938969</id><snippet>GL_LINE_STRIPS</snippet></ROW><ROW><id>1938969</id><snippet>GL_LINES</snippet></ROW><ROW><id>1938969</id><snippet>glDrawArrays</snippet></ROW><ROW><id>1938969</id><snippet>float* coordinates = {....}; //x and y coordinate pairs for all line segments
glEnableClientState(GL_VERTEX_ARRAY);
glVertexPointer(2, GL_FLOAT, 2 * sizeof(float), coordinates);
glDrawArrays(GL_LINES, 0, 2 * linecount);
glDisableClientState(GL_VERTEX_ARRAY);
</snippet></ROW><ROW><id>1939093</id><snippet>PIL/BmpImagePlugin.py</snippet></ROW><ROW><id>1939102</id><snippet>self.rows</snippet></ROW><ROW><id>1939102</id><snippet>self.data</snippet></ROW><ROW><id>1939102</id><snippet>$ cat 1938894-simplified.csv
0,32
1,21
1,23
1,32
2,23
2,53
2,82
3,82
4,46
5,75
7,86
8,28
</snippet></ROW><ROW><id>1939102</id><snippet>#!/usr/bin/env python

import csv
from scipy import sparse

rows, columns = 10, 100
matrix = sparse.lil_matrix( (rows, columns) )

csvreader = csv.reader(open('1938894-simplified.csv'))
for line in csvreader:
    row, column = map(int, line)
    matrix.data[row].append(column)

print matrix.data
</snippet></ROW><ROW><id>1939102</id><snippet>[[32] [21, 23, 32] [23, 53, 82] [82] [46] [75] [] [86] [28] []]
</snippet></ROW><ROW><id>1939148</id><snippet>s = ssh.Connection('example.com', 'warrior', password = 'lennalenna')
s.put('/home/warrior/hello.txt', '/home/zombie/textfiles/report.txt')
s.get('/var/log/strange.log', '/home/warrior/serverlog.txt')
s.execute('ls -l')
s.close()
</snippet></ROW><ROW><id>1939148</id><snippet>#!/usr/bin/env python
import paramiko
from contextlib import contextmanager
host = '192.168.10.142'
username = 'slacker'
password = 'insecure'@contextmanager
def create_ssh(host=host, username=username, password=password):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) try:
       print "creating connection"
       ssh.connect(host, username=username, password=password)
       print "connected"
       yield ssh
    finally:
       print "closing connection"
       ssh.close()
       print "closed"
</snippet></ROW><ROW><id>1939362</id><snippet>y = set(x.flatten())
</snippet></ROW><ROW><id>1939362</id><snippet>x.flat</snippet></ROW><ROW><id>1939362</id><snippet>x.flatten()</snippet></ROW><ROW><id>1939362</id><snippet>x.ravel()</snippet></ROW><ROW><id>1939362</id><snippet>y = set(x.flat)
</snippet></ROW><ROW><id>1939384</id><snippet>class Foo(object):
  def __init__(self, val=2):
     self.val = val
  def __getstate__(self):
     print 'im being pickled'
     self.val *= 2
     return self.__dict__
  def __setstate__(self, d):
     print 'im being unpickled with these values', d
     self.__dict__ = d
     self.val *= 3

import pickle
f = Foo()
f_string = pickle.dumps(f)
f_new = pickle.loads(f_string)
</snippet></ROW><ROW><id>1939564</id><snippet>#!/usr/bin/env python  
# import mks_function .. you won't need this ...

from mks_function import mks_create_sandbox  
import os, datetime  

# import time, sys .. these aren't used in this snippet 
# import os.path .. just refer to os.path, since os is already imported

# get today's date as a datetime type  
todaystr = datetime.date.today().isoformat()  

# .. use os.path.join()
if not os.path.exists(os.path.join('/home/build/test/sandboxes/', todaystr)):  
    os.mkdir(os.path.join('/home/build/test/sandboxes/', todaystr))  
# .. 'else: pass' is unnecessary

if not os.path.exists(os.path.join(
    '/home/build/test/sandboxes/', todaystr, '/new_sandbox/project.pj')):  

    # i'm not seen, that the sandbox is created in the right directory here
    # maybe you should change the working directory via ..
    # os.chdir(os.path.join('/home/build/test/sandboxes/', todaystr))
    mks_create_sandbox()  

if os.path.exists(os.path.join(
    '/home/build/test/sandboxes/', todaystr, '/new_sandbox/Makefile')):  

    # .. change to the right directory
    os.chdir(os.path.join(
        '/home/build/test/sandboxes/', todaystr, '/new_sandbox/'))

    os.system("make &gt; make_results.txt 2&gt;&amp;1")
</snippet></ROW><ROW><id>1939885</id><snippet>In [1]: theModule = __import__("the_module")

In [2]: toImport = getattr(theModule, "ToImport")

In [3]: toImport.initialize("parameter")
parameter
</snippet></ROW><ROW><id>1940720</id><snippet>urlpatterns = patterns('django.views.generic.simple',
    (r'^$', 'direct_to_template', {'template': 'index.html'}),
)
</snippet></ROW><ROW><id>1940720</id><snippet>extra_context</snippet></ROW><ROW><id>1940720</id><snippet>extra_context = { 
    'foo': 'bar',
    # etc
}
urlpatterns = patterns('django.views.generic.simple',
    (r'^$', 'direct_to_template', {'template': 'index.html', 'extra_context': extra_context }),
)
</snippet></ROW><ROW><id>1940853</id><snippet>POST</snippet></ROW><ROW><id>1940853</id><snippet>x</snippet></ROW><ROW><id>1941087</id><snippet>set_all</snippet></ROW><ROW><id>1941216</id><snippet>sleep()</snippet></ROW><ROW><id>1941683</id><snippet>class PickleableFile(object):
    def __init__(self, filename, mode='rb'):
        self.filename = filename
        self.mode = mode
        self.file = open(filename, mode)
    def __getstate__(self):
        state = dict(filename=self.filename, mode=self.mode,
                     closed=self.file.closed)
        if not self.file.closed:
            state['filepos'] = self.file.tell()
        return state
    def __setstate__(self, state):
        self.filename = state['filename']
        self.mode = state['mode']
        self.file = open(self.filename, self.mode)
        if state['closed']: self.file.close()
        else: self.file.seek(state['filepos'])
    def __getattr__(self, attr):
        return getattr(self.file, attr)

class WordWindowReader:
    def __init__(self, filenames, window_size):
        self.filenames = filenames
        self.window_size = window_size
        self.filenum = 0
        self.stream = None
        self.filepos = 0
        self.prevwords = []
        self.current_line = []

    def __iter__(self):
        return self

    def next(self):
        # Read through files until we have a non-empty current line.
        while not self.current_line:
            if self.stream is None:
                if self.filenum &gt;= len(self.filenames):
                    raise StopIteration
                else:
                    self.stream = PickleableFile(self.filenames[self.filenum])
                    self.stream.seek(self.filepos)
                    self.prevwords = []
            line = self.stream.readline()
            self.filepos = self.stream.tell()
            if line == '':
                # End of file.
                self.stream = None
                self.filenum += 1
                self.filepos = 0
            else:
                # Reverse line so we can pop off words.
                self.current_line = line.split()[::-1]

        # Get the first word of the current line, and add it to
        # prevwords.  Truncate prevwords when necessary.
        word = self.current_line.pop()
        self.prevwords.append(word)
        if len(self.prevwords) &gt; self.window_size:
            self.prevwords = self.prevwords[-self.window_size:]

        # If we have enough words, then return a word window;
        # otherwise, go on to the next word.
        if len(self.prevwords) == self.window_size:
            return self.prevwords
        else:
            return self.next()
</snippet></ROW><ROW><id>1941852</id><snippet>def slices(seq, length, prefer_last=False):
  unique = {}
  if prefer_last: # this doesn't have to be a parameter, just choose one
    for start in xrange(len(seq) - length + 1):
      unique[seq[start:start+length]] = start
  else: # prefer first
    for start in xrange(len(seq) - length, -1, -1):
      unique[seq[start:start+length]] = start
  return unique

# or find all locations for each slice:
import collections
def slices(seq, length):
  unique = collections.defaultdict(list)
  for start in xrange(len(seq) - length + 1):
    unique[seq[start:start+length]].append(start)
  return unique
</snippet></ROW><ROW><id>1941852</id><snippet>set(slices(..))</snippet></ROW><ROW><id>1941852</id><snippet>a = set(slices("aab", 2)) # {"aa", "ab"}
b = set(slices("abb", 2)) # {"ab", "bb"}
c = set(slices("abc", 2)) # {"ab", "bc"}
all = [a, b, c]
import operator
a_unique = reduce(operator.sub, (x for x in all if x is not a), a)
print a_unique # {"aa"}
</snippet></ROW><ROW><id>1941852</id><snippet>a = slices("aab", 2)
b = slices("abb", 2)
c = slices("abc", 2)
all = [a, b, c]
import operator
a_unique = reduce(operator.sub, (set(x) for x in all if x is not a), set(a))
# a_unique is only the keys so far
a_unique = dict((k, a[k]) for k in a_unique)
# now it's a dict of slice -&gt; location(s)
print a_unique # {"aa": 0} or {"aa": [0]}
               # (depending on which slices function used)
</snippet></ROW><ROW><id>1941852</id><snippet>import operator
import random
import string

def slices(seq, length):
  unique = {}
  for start in xrange(len(seq) - length, -1, -1):
    unique[seq[start:start+length]] = start
  return unique

def sample_with_repeat(population, length, choice=random.choice):
  return "".join(choice(population) for _ in xrange(length))

word_length = 5*1000*1000
words = [sample_with_repeat(string.lowercase, word_length) for _ in xrange(3)]
slice_length = 20
words_slices_sets = [set(slices(x, slice_length)) for x in words]
unique_words_slices = [reduce(operator.sub,
                              (x for x in words_slices_sets if x is not n),
                              n)
                       for n in words_slices_sets]
print [len(x) for x in unique_words_slices]
</snippet></ROW><ROW><id>1942387</id><snippet>class Foo(object):
    def __init__(self):
        self.j = None
    def __iter__(self):
        for i in range(10):
            self.j = 10 - i
            yield i

my_generator = Foo()

for k in my_generator:
    print 'j is',my_generator.j
    print 'k is',k
</snippet></ROW><ROW><id>1942387</id><snippet>j is 10
k is 0
j is 9
k is 1
j is 8
k is 2
j is 7
k is 3
j is 6
k is 4
j is 5
k is 5
j is 4
k is 6
j is 3
k is 7
j is 2
k is 8
j is 1
k is 9
</snippet></ROW><ROW><id>1942472</id><snippet>ctypes</snippet></ROW><ROW><id>1942472</id><snippet>#define</snippet></ROW><ROW><id>1942472</id><snippet>from ctypes import *

d2xx = WinDLL('ftd2xx')

OK = 0
INVALID_HANDLE = 1
DEVICE_NOT_FOUND = 2
DEVICE_NOT_OPENED = 3

...

def openEx(serial):
    serial = create_string_buffer(serial)
    handle = c_int()
    if d2xx.FT_OpenEx(serial, OPEN_BY_SERIAL_NUMBER, byref(handle)) == OK:
        return Handle(handle.value)
    raise D2XXException

class Handle(object):
    def __init__(self, handle):
        self.handle = handle
    ...
    def read(self, bytes):
        buffer = create_string_buffer(bytes)
        count = c_int()
        if d2xx.FT_Read(self.handle, buffer, bytes, byref(count)) == OK:
            return buffer.raw[:count.value]
        raise D2XXException
    def write(self, data):
        buffer = create_string_buffer(data)
        count = c_int()
        bytes = len(data)
        if d2xx.FT_Write(self.handle, buffer, bytes, byref(count)) == OK:
            return count.value
        raise D2XXException
</snippet></ROW><ROW><id>1942561</id><snippet>.set_property</snippet></ROW><ROW><id>1942561</id><snippet>.set_property('property', 'value')</snippet></ROW><ROW><id>1942561</id><snippet>gtk.main()</snippet></ROW><ROW><id>1942561</id><snippet>import gtk

info = gtk.MessageDialog(buttons=gtk.BUTTONS_OK)
info.set_property('title', 'Test info message')
info.set_property('text', 'Message to be displayed in the messagebox goes here')
response = info.run()
if response == gtk.RESPONSE_OK:
    print 'ok'
else:
    print response
info.destroy()

gtk.main()
</snippet></ROW><ROW><id>1943195</id><snippet>  timerB = timers.timer(1800)
    while 1:  
        if timerB.isexpired():    
        print 'timerA expired'  
        break
</snippet></ROW><ROW><id>1943195</id><snippet>timerB.isexpired()</snippet></ROW><ROW><id>1943195</id><snippet>timerB.isexpired()</snippet></ROW><ROW><id>1943414</id><snippet>re.sub()</snippet></ROW><ROW><id>1943414</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>1943414</id><snippet>sub(pattern, repl, string, count=0)</snippet></ROW><ROW><id>1943414</id><snippet>re.sub("(?i)mr", "", "Mr Bean")
</snippet></ROW><ROW><id>1943532</id><snippet>ModelForm</snippet></ROW><ROW><id>1943532</id><snippet>if form.is_valid():
    story = form.save()
    return HttpResponseRedirect(reverse('story_detail', args=(story.user, story.id)))
</snippet></ROW><ROW><id>1943728</id><snippet>subprocess</snippet></ROW><ROW><id>1943728</id><snippet>import subprocess

p = subprocess.Popen(['/bin/ls', '-l'], stdout=subprocess.PIPE)
(out, _) = p.communicate()
print "Output:", out
</snippet></ROW><ROW><id>1943831</id><snippet>dict</snippet></ROW><ROW><id>1943831</id><snippet>range</snippet></ROW><ROW><id>1943831</id><snippet>dict</snippet></ROW><ROW><id>1943831</id><snippet>dictionary = dict([(List[i], List[i+1]) for i in range(0, len(List), 2)])
</snippet></ROW><ROW><id>1944255</id><snippet>count()</snippet></ROW><ROW><id>1944255</id><snippet>count()</snippet></ROW><ROW><id>1944255</id><snippet>COUNT</snippet></ROW><ROW><id>1944255</id><snippet>count</snippet></ROW><ROW><id>1944255</id><snippet>count</snippet></ROW><ROW><id>1944708</id><snippet>class foo:
    def __init__(self):
        self.a = "a"
    def __getattr__(self, attribute):
        return "You asked for %s, but I'm giving you default" % attribute


&gt;&gt;&gt; bar = foo()
&gt;&gt;&gt; bar.a
'a'
&gt;&gt;&gt; bar.b
"You asked for b, but I'm giving you default"
&gt;&gt;&gt; getattr(bar, "a")
'a'
&gt;&gt;&gt; getattr(bar, "b")
"You asked for b, but I'm giving you default"
</snippet></ROW><ROW><id>1944708</id><snippet>__getattr__</snippet></ROW><ROW><id>1944708</id><snippet>getattr</snippet></ROW><ROW><id>1945039</id><snippet>class Foo(object):

    def regular_method(self):
        print 'ok'

    def _soft_private(self):
        print 'ok'

    def __mangled_private(self):
        print 'ok'

f = Foo()
f.regular_method()
# prints ok
f._soft_private()
# print ok
f.__mangled_private()
# error! no such attribute. BUT:
f._Foo__mangled_private()
# prints ok
</snippet></ROW><ROW><id>1945620</id><snippet>divisibleby</snippet></ROW><ROW><id>1945620</id><snippet>{% if forloop.counter|divisibleby:3 %}&lt;div&gt;{% endif %}
</snippet></ROW><ROW><id>1945687</id><snippet>&gt;&gt;&gt; "The word is {0:{1}&lt;10}".format("spam", "}")
'The word is spam}}}}}}'
</snippet></ROW><ROW><id>1945930</id><snippet>os.path.join</snippet></ROW><ROW><id>1946004</id><snippet>user = DBSession.query(User.user_name).filter(User.username==value).first()
</snippet></ROW><ROW><id>1946180</id><snippet>B=A[:]</snippet></ROW><ROW><id>1946180</id><snippet>B[self.ID]</snippet></ROW><ROW><id>1946180</id><snippet>A[self.ID]</snippet></ROW><ROW><id>1946180</id><snippet>A</snippet></ROW><ROW><id>1946180</id><snippet>B</snippet></ROW><ROW><id>1946180</id><snippet>list_of_trading_partners</snippet></ROW><ROW><id>1946180</id><snippet>__deepcopy__</snippet></ROW><ROW><id>1946180</id><snippet>A[self.ID]</snippet></ROW><ROW><id>1946742</id><snippet>for line in open(FunctionPath):
    line = line.strip()
    if line.startswith('def '):
        print '%s: %s' % (FunctionPath, line.partition(':')[0])
</snippet></ROW><ROW><id>1946742</id><snippet>import fileinput
for line in fileinput.input(paths):
    line = line.strip()
    if line.startswith('def '):
        print '%s: %s' % (fileinput.filename(), line.partition(':')[0])
</snippet></ROW><ROW><id>1946742</id><snippet>$ python script.py filepath1 filepath2 filepath3
</snippet></ROW><ROW><id>1946742</id><snippet>def func(): #comment myfunc():
   pass
</snippet></ROW><ROW><id>1946742</id><snippet>&gt;&gt;&gt; 'def func(): #comment myfunc():'.partition(':')[0]
'def func()'
</snippet></ROW><ROW><id>1947109</id><snippet>my_var = "Retired" if age &gt; 65 else "Working"
</snippet></ROW><ROW><id>1947109</id><snippet>my_var = age &gt; 65 ? "Retired" : "Working";
</snippet></ROW><ROW><id>1947109</id><snippet>("Working","Retired")
</snippet></ROW><ROW><id>1947109</id><snippet>var&gt;65
</snippet></ROW><ROW><id>1947119</id><snippet>get</snippet></ROW><ROW><id>1947119</id><snippet>a=ProjectRecord.objects.get()
</snippet></ROW><ROW><id>1947119</id><snippet>GET</snippet></ROW><ROW><id>1947119</id><snippet>urls.py</snippet></ROW><ROW><id>1947119</id><snippet>urls.py</snippet></ROW><ROW><id>1947119</id><snippet>urlpatterns = patterns('',
    (r'^class/(?P&lt;object_id&gt;\d+?)/$', 'app.views.edit_record'),
</snippet></ROW><ROW><id>1947119</id><snippet>def edit_record( request, object_id = None ):
    if request.method == "POST":
        if object_id is None:
            return Http_404
        ProjectRecord.objects.get( pk = int(object_id) )

    etc.
</snippet></ROW><ROW><id>1947834</id><snippet> foo.py - contains classes related to foo such as fooFacroty, tallFoo, shortFoo
</snippet></ROW><ROW><id>1947834</id><snippet> foo/
     __init__.py
     foofactories.py
     tallFoos.py
     shortfoos.py
     medumfoos.py
     santaslittlehelperfoo.py
     superawsomefoo.py
     anotherfoo.py
</snippet></ROW><ROW><id>1947834</id><snippet>     __all__ = ['foofactories','tallFoos' 'shortfoos','medumfoos','santaslittlehelperfoo','superawsomefoo' 'anotherfoo']
     # deprecated to keep older scripts who import this from breaking
     from foo.foofactories import fooFactory
     from foo.tallfoos import tallFoo
     from foo.shortfoos import shortFoo
</snippet></ROW><ROW><id>1947834</id><snippet> from foo import fooFactory, tallFoo, shortFoo
</snippet></ROW><ROW><id>1947867</id><snippet>authenticate</snippet></ROW><ROW><id>1947867</id><snippet>u.password</snippet></ROW><ROW><id>1947867</id><snippet>u.set_password('password')</snippet></ROW><ROW><id>1947867</id><snippet>&gt;&gt;&gt; u = User(name='luis')
&gt;&gt;&gt; u.set_password('password')
&gt;&gt;&gt; u.save()
&gt;&gt;&gt; authenticate(username='luis', password='password')
&lt;User: luis&gt;
</snippet></ROW><ROW><id>1948848</id><snippet>Location</snippet></ROW><ROW><id>1948848</id><snippet>print "Status: 301 Moved",
print "Location:/wherever.com/"
</snippet></ROW><ROW><id>1948940</id><snippet>&gt;&gt;&gt; from win32com.client import Dispatch
&gt;&gt;&gt; xl = Dispatch("Excel.Application")
&gt;&gt;&gt; xl.Workbooks.Open("c:/full/path/to/your/excel_file.xls")
&gt;&gt;&gt; xl.ActiveWorkbook.ActiveSheet.Columns(1).AutoFilter(1)
&gt;&gt;&gt; xl.ActiveWorkbook.Close(SaveChanges=1) # 1 is True, 0 is False
&gt;&gt;&gt; xl.Quit()
</snippet></ROW><ROW><id>1948993</id><snippet>gtk.Widget.modify_text</snippet></ROW><ROW><id>1948993</id><snippet>gtk.Widget.modify_base</snippet></ROW><ROW><id>1949306</id><snippet>from scipy import * # rand
from pylab import * # figure, imshow
from scipy.ndimage import gaussian_filter

# random "image"
I = rand(100, 100)
figure(1)
imshow(I)

# gaussian filter
J = gaussian_filter(I, sigma=10)
figure(2)
imshow(J)
</snippet></ROW><ROW><id>1949306</id><snippet>J = array(I) # copy image
J[30:70, 30:70] = gaussian_filter(I[30:70, 30:70], sigma=1) # apply filter to subregion
figure(2)
imshow(2)
</snippet></ROW><ROW><id>1949306</id><snippet># 7x7 boolean mask with the "brush" (example: a _crude_ circle)
mask = array([[0, 0, 1, 1, 1, 0, 0],
              [0, 1, 1, 1, 1, 1, 0],
              [1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1],
              [0, 1, 1, 1, 1, 1, 0],
              [0, 0, 1, 1, 1, 0, 0]], dtype=bool)

# random image
I = rand(100, 100)
# apply filter only on mask
# compute the gauss. filter only on the 7x7 subregion, not the whole image
I[40:47, 40:47][mask] = gaussian_filter(I[40:47, 40:47][mask], sigma=1)
</snippet></ROW><ROW><id>1949340</id><snippet>def show_firm_url(self, obj):
    return '&lt;a href="%s"&gt;%s&lt;/a&gt;' % (obj.firm_url, obj.firm_url)
show_firm_url.allow_tags = True
</snippet></ROW><ROW><id>1949360</id><snippet>getcode()</snippet></ROW><ROW><id>1949360</id><snippet>&gt;&gt;&gt; print urllib.urlopen("http://www.stackoverflow.com").getcode()
&gt;&gt;&gt; 200
</snippet></ROW><ROW><id>1949965</id><snippet>from zipfile import ZipFile, ZipInfo, ZIP_DEFLATED
import zlib
from cStringIO import StringIO
from urllib2 import urlopen
from urlparse import urlparse
from os import path

images = ['http://sstatic.net/so/img/logo.png', 
          'http://sstatic.net/so/Img/footer-cc-wiki-peak-internet.png']

buf = StringIO()
# By default, zip archives are not compressed... adding ZIP_DEFLATED
# to achieve that. If you don't want that, or don't have zlib on or
# system, delete the compression kwarg
zip_file = ZipFile(buf, mode='w', compression=ZIP_DEFLATED)

for image in images:
    internet_image = urlopen(image)
    fname = path.basename(urlparse(image).path) 
    zip_file.writestr(fname, internet_image.read())

zip_file.close()

output = open('images.zip', 'wb')
output.write(buf.getvalue())
output.close()
buf.close()
</snippet></ROW><ROW><id>1950153</id><snippet>Python 2.5.1 (r251:54863, May 18 2007, 16:56:43)
[GCC 3.4.4 (cygming special, gdc 0.12, using dmd 0.125)] on cygwin
</snippet></ROW><ROW><id>1950153</id><snippet>Python 2.5 (r25:51908, Sep 19 2006, 09:52:17) [MSC v.1310 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import signal
&gt;&gt;&gt; dir(signal)
['NSIG', 'SIGABRT', 'SIGBREAK', 'SIGFPE', 'SIGILL', 'SIGINT', 'SIGSEGV', 'SIGTERM', 'SIG_DFL', 'SIG_IGN', '__doc__', '__
name__', 'default_int_handler', 'getsignal', 'signal']
</snippet></ROW><ROW><id>1950178</id><snippet>def path(self, name):
    try:
        path = safe_join(self.location, name)
    except ValueError:
        raise SuspiciousOperation("Attempted access to '%s' denied." % name)
    return smart_str(os.path.normpath(path))
</snippet></ROW><ROW><id>1950178</id><snippet>def safe_join(base, *paths):
    """
    Joins one or more path components to the base path component intelligently.
    Returns a normalized, absolute version of the final path.

    The final path must be located inside of the base path component (otherwise
    a ValueError is raised).
    """
    # We need to use normcase to ensure we don't false-negative on case
    # insensitive operating systems (like Windows).
    base = force_unicode(base)
    paths = [force_unicode(p) for p in paths]
    final_path = normcase(abspathu(join(base, *paths)))
    base_path = normcase(abspathu(base))
    base_path_len = len(base_path)
    # Ensure final_path starts with base_path and that the next character after
    # the final path is os.sep (or nothing, in which case final_path must be
    # equal to base_path).
    if not final_path.startswith(base_path) \
       or final_path[base_path_len:base_path_len+1] not in ('', sep):
        raise ValueError('the joined path is located outside of the base path'
                         ' component')
    return final_path
</snippet></ROW><ROW><id>1950178</id><snippet>self.location</snippet></ROW><ROW><id>1950178</id><snippet>name</snippet></ROW><ROW><id>1950178</id><snippet>self.location</snippet></ROW><ROW><id>1950178</id><snippet>/media/</snippet></ROW><ROW><id>1950178</id><snippet>"/home/tsoporan/site/media/media/albums/anthem-for-the-underdog"
</snippet></ROW><ROW><id>1950179</id><snippet>import datetime

def daterange(start, end, delta):
    """ Just like `range`, but for dates! """
    current = start
    while current &lt; end:
        yield current
        current += delta

start = datetime.datetime.now()
end = start + datetime.timedelta(days=20)

for d in daterange(start, end, datetime.timedelta(days=1)):
    print d
</snippet></ROW><ROW><id>1950179</id><snippet>2009-12-22 20:12:41.245000
2009-12-23 20:12:41.245000
2009-12-24 20:12:41.245000
2009-12-25 20:12:41.245000
2009-12-26 20:12:41.245000
2009-12-27 20:12:41.245000
2009-12-28 20:12:41.245000
2009-12-29 20:12:41.245000
2009-12-30 20:12:41.245000
2009-12-31 20:12:41.245000
2010-01-01 20:12:41.245000
2010-01-02 20:12:41.245000
2010-01-03 20:12:41.245000
2010-01-04 20:12:41.245000
2010-01-05 20:12:41.245000
2010-01-06 20:12:41.245000
2010-01-07 20:12:41.245000
2010-01-08 20:12:41.245000
2010-01-09 20:12:41.245000
2010-01-10 20:12:41.245000
</snippet></ROW><ROW><id>1950179</id><snippet>range</snippet></ROW><ROW><id>1950179</id><snippet>range</snippet></ROW><ROW><id>1950399</id><snippet>safe_dump</snippet></ROW><ROW><id>1950399</id><snippet>dump</snippet></ROW><ROW><id>1950399</id><snippet>load</snippet></ROW><ROW><id>1950399</id><snippet>str</snippet></ROW><ROW><id>1950399</id><snippet>unicode</snippet></ROW><ROW><id>1950466</id><snippet>Desc1|wildcard1|Desc2|wildcard2 ...
</snippet></ROW><ROW><id>1950466</id><snippet>Spreadsheet (*.xls)|*.xls|Plain-old text (*.txt)|*.txt|Random noise|*.dat
</snippet></ROW><ROW><id>1950602</id><snippet>memo</snippet></ROW><ROW><id>1950602</id><snippet>&gt;&gt;&gt; import copy
&gt;&gt;&gt; memo = {}
&gt;&gt;&gt; x = range(5)
&gt;&gt;&gt; y = copy.deepcopy(x, memo)
&gt;&gt;&gt; memo
{399680: [0, 1, 2, 3, 4], 16790896: 3, 16790884: 4, 16790920: 1,
 438608: [0, 1, 2, 3, 4, [0, 1, 2, 3, 4]], 16790932: 0, 16790908: 2}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1950602</id><snippet>&gt;&gt;&gt; id(x)
399680
&gt;&gt;&gt; for j in x: print j, id(j)
... 
0 16790932
1 16790920
2 16790908
3 16790896
4 16790884
</snippet></ROW><ROW><id>1950602</id><snippet>&gt;&gt;&gt; for k, v in memo.items(): print k, id(v)
... 
399680 435264
16790896 16790896
16790884 16790884
16790920 16790920
438608 435464
16790932 16790932
16790908 16790908
</snippet></ROW><ROW><id>1950602</id><snippet>&gt;&gt;&gt; z = [x, x]
&gt;&gt;&gt; t = copy.deepcopy(z, memo)
&gt;&gt;&gt; print id(t[0]), id(t[1]), id(y)
435264 435264 435264
</snippet></ROW><ROW><id>1950726</id><snippet>result = [{}]
for item in data:
    key, val = item.split(":", 1)
    if key in result[-1]:
        result.append({})
    result[-1][key] = val
</snippet></ROW><ROW><id>1950927</id><snippet>classmethod</snippet></ROW><ROW><id>1950927</id><snippet>&gt;&gt;&gt; class x(object):
...   def c1(*args): print 'c1', args
...   c1 = classmethod(c1)
...   @classmethod
...   def c2(*args): print 'c2', args
... 
&gt;&gt;&gt; inst = x()
&gt;&gt;&gt; x.c1()
c1 (&lt;class '__main__.x'&gt;,)
&gt;&gt;&gt; x.c2()
c2 (&lt;class '__main__.x'&gt;,)
&gt;&gt;&gt; inst.c1()
c1 (&lt;class '__main__.x'&gt;,)
&gt;&gt;&gt; inst.c2()
c2 (&lt;class '__main__.x'&gt;,)
</snippet></ROW><ROW><id>1950927</id><snippet>classmethod</snippet></ROW><ROW><id>1950927</id><snippet>&gt;&gt;&gt; class y(object):
...   def __init__(self, astring):
...     self.s = astring
...   @classmethod
...   def fromlist(cls, alist):
...     x = cls('')
...     x.s = ','.join(str(s) for s in alist)
...     return x
...   def __repr__(self):
...     return 'y(%r)' % self.s
...
&gt;&gt;&gt; y1 = y('xx')
&gt;&gt;&gt; y1
y('xx')
&gt;&gt;&gt; y2 = y.fromlist(range(3))
&gt;&gt;&gt; y2
y('0,1,2')
</snippet></ROW><ROW><id>1950927</id><snippet>y</snippet></ROW><ROW><id>1950927</id><snippet>&gt;&gt;&gt; class k(y):
...   def __repr__(self):
...     return 'k(%r)' % self.s.upper()
...
&gt;&gt;&gt; k1 = k.fromlist(['za','bu'])
&gt;&gt;&gt; k1
k('ZA,BU')
</snippet></ROW><ROW><id>1950985</id><snippet>class Auto(threading.Thread):
    def run(self):
        SendKeys.SendKeys("#",pause=0.1);
        print('Sent');
        exit();

for i in xrange(30):
    Auto().start()
</snippet></ROW><ROW><id>1950986</id><snippet>import</snippet></ROW><ROW><id>1950986</id><snippet>from ... import</snippet></ROW><ROW><id>1950986</id><snippet>__import__</snippet></ROW><ROW><id>1950986</id><snippet>__builtin__.__import__</snippet></ROW><ROW><id>1950986</id><snippet>import __builtin__</snippet></ROW><ROW><id>1950986</id><snippet>import __builtin__
realimp = __builtin__.__import__
def my_import(name, globals={}, locals={}, fromlist=[]):
  print 'importing', name, fromlist
  return realimp(name, globals, locals, fromlist)
__builtin__.__import__ = my_import

from os import path
</snippet></ROW><ROW><id>1950986</id><snippet>$ python2.4 aim.py
importing os ('path',)
</snippet></ROW><ROW><id>1951172</id><snippet>__dict__</snippet></ROW><ROW><id>1951172</id><snippet>junk_block = "".join(open("foo.txt","rb").read().split())
</snippet></ROW><ROW><id>1951172</id><snippet>with</snippet></ROW><ROW><id>1951172</id><snippet>with open("foo.txt","rb") as f:
  junk_block = "".join(f.read().split())
</snippet></ROW><ROW><id>1951172</id><snippet>re</snippet></ROW><ROW><id>1951172</id><snippet>.translate</snippet></ROW><ROW><id>1951604</id><snippet>class A(object):
    def __get__(self, obj, klass):
        print "__get__", obj, klass
        return 'xxx'

class X(object):
    a = A()

x=X()
print x.a
</snippet></ROW><ROW><id>1952481</id><snippet>__iter__</snippet></ROW><ROW><id>1952481</id><snippet>try:
    some_object_iterator = iter(some_object)
except TypeError, te:
    print some_object, 'is not iterable'
</snippet></ROW><ROW><id>1952481</id><snippet>iter</snippet></ROW><ROW><id>1952481</id><snippet>__getitem__</snippet></ROW><ROW><id>1952481</id><snippet>__iter__</snippet></ROW><ROW><id>1952481</id><snippet> In [9]: hasattr([1,2,3,4], '__iter__')
 Out[9]: True
 In [11]: hasattr((1,2,3,4), '__iter__')
 Out[11]: True
 In [12]: hasattr(u"hello", '__iter__')
 Out[12]: False
 In [14]: hasattr(u"hello", '__getitem__')
 Out[14]: True
</snippet></ROW><ROW><id>1952481</id><snippet>try:
   _ = (e for e in my_object)
except TypeError:
   print my_object, 'is not iterable'
</snippet></ROW><ROW><id>1952481</id><snippet>collections</snippet></ROW><ROW><id>1952481</id><snippet>import collections

if isinstance(e, collections.Iterable):
    # e is iterable
</snippet></ROW><ROW><id>1953004</id><snippet>SMTP()</snippet></ROW><ROW><id>1953004</id><snippet>connect()</snippet></ROW><ROW><id>1953004</id><snippet>localhost</snippet></ROW><ROW><id>1953036</id><snippet>class ClassA(db.Model):
    name = db.StringProperty()

    def __get_classBdeleted(self):
        return self.classB_set.filter('deleted_flag =', 'True')

    classBdeleted = property(__get_classBdeleted)

class ClassB(db.Model):
    name = db.StringProperty()
    deleted_flag = db.BooleanProperty()
    classA = db.ReferenceProperty(ClassA)
</snippet></ROW><ROW><id>1953238</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; map(''.join, itertools.chain(itertools.product(list1, list2), itertools.product(list2, list1)))
['squarered', 'squaregreen', 'circlered',
'circlegreen', 'trianglered', 'trianglegreen',
'redsquare', 'redcircle', 'redtriangle', 'greensquare',
'greencircle', 'greentriangle']
</snippet></ROW><ROW><id>1953591</id><snippet>except Exception, ex:
     # do something
     raise ex
</snippet></ROW><ROW><id>1953591</id><snippet>raise</snippet></ROW><ROW><id>1953591</id><snippet>except Exception, ex:
    # do something
    raise
</snippet></ROW><ROW><id>1953685</id><snippet>output = "&lt;html&gt;&lt;body&gt;&lt;table&gt;"
for key in your_dict:
  output += "&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;" % (key, your_dict[key])
output += "&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;
print output
</snippet></ROW><ROW><id>1953752</id><snippet>WeakValueDictionary</snippet></ROW><ROW><id>1953752</id><snippet>self</snippet></ROW><ROW><id>1953752</id><snippet>self</snippet></ROW><ROW><id>1953983</id><snippet>import datetime
import os
import shutil

threshold = datetime.datetime.now() + datetime.timedelta(days=-7)
file_time = datetime.datetime.fromtimestamp(os.path.getmtime('/folder_name'))

if file_time &lt; threshold:
    shutil.rmtree('/folder_name')
</snippet></ROW><ROW><id>1954300</id><snippet>class MyForm(ModelForm):
   class Meta:
      model = YourModel

   some_field = forms.CharField(required=False, help_text="Whatever you want")
</snippet></ROW><ROW><id>1954766</id><snippet>#include "Python.h"
#include "structmember.h"

// The CountDict type.

typedef struct {
   PyObject_HEAD
   PyObject * dict;
   int count;
} CountDict;

static int
CountDict_init(CountDict *self, PyObject *args, PyObject *kwds)
{
   self-&gt;dict = PyDict_New();
   self-&gt;count = 0;
   return 0;
}

static void
CountDict_dealloc(CountDict *self)
{
   Py_XDECREF(self-&gt;dict);
   self-&gt;ob_type-&gt;tp_free((PyObject*)self);
}

static PyObject *
CountDict_set(CountDict *self, PyObject *args)
{
   const char *key;
   PyObject *value;

   if (!PyArg_ParseTuple(args, "sO:set", &amp;key, &amp;value)) {
      return NULL;
   }

   if (PyDict_SetItemString(self-&gt;dict, key, value) &lt; 0) {
      return NULL;
   }

   self-&gt;count++;

   return Py_BuildValue("i", self-&gt;count);
}

static PyMemberDef
CountDict_members[] = {
   { "dict",   T_OBJECT, offsetof(CountDict, dict), 0,
               "The dictionary of values collected so far." },

   { "count",  T_INT,    offsetof(CountDict, count), 0,
               "The number of times set() has been called." },

   { NULL }
};

static PyMethodDef
CountDict_methods[] = {
   { "set",    (PyCFunction) CountDict_set, METH_VARARGS,
               "Set a key and increment the count." },
   // typically there would be more here...

   { NULL }
};

static PyTypeObject
CountDictType = {
   PyObject_HEAD_INIT(NULL)
   0,                         /* ob_size */
   "CountDict",               /* tp_name */
   sizeof(CountDict),         /* tp_basicsize */
   0,                         /* tp_itemsize */
   (destructor)CountDict_dealloc, /* tp_dealloc */
   0,                         /* tp_print */
   0,                         /* tp_getattr */
   0,                         /* tp_setattr */
   0,                         /* tp_compare */
   0,                         /* tp_repr */
   0,                         /* tp_as_number */
   0,                         /* tp_as_sequence */
   0,                         /* tp_as_mapping */
   0,                         /* tp_hash */
   0,                         /* tp_call */
   0,                         /* tp_str */
   0,                         /* tp_getattro */
   0,                         /* tp_setattro */
   0,                         /* tp_as_buffer */
   Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, /* tp_flags*/
   "CountDict object",        /* tp_doc */
   0,                         /* tp_traverse */
   0,                         /* tp_clear */
   0,                         /* tp_richcompare */
   0,                         /* tp_weaklistoffset */
   0,                         /* tp_iter */
   0,                         /* tp_iternext */
   CountDict_methods,         /* tp_methods */
   CountDict_members,         /* tp_members */
   0,                         /* tp_getset */
   0,                         /* tp_base */
   0,                         /* tp_dict */
   0,                         /* tp_descr_get */
   0,                         /* tp_descr_set */
   0,                         /* tp_dictoffset */
   (initproc)CountDict_init,  /* tp_init */
   0,                         /* tp_alloc */
   0,                         /* tp_new */
};

// Module definition

static PyModuleDef
moduledef = {
    PyModuleDef_HEAD_INIT,
    "countdict",
    MODULE_DOC,
    -1,
    NULL,       /* methods */
    NULL,
    NULL,       /* traverse */
    NULL,       /* clear */
    NULL
};


PyObject *
PyInit_countdict(void)
{
    PyObject * mod = PyModule_Create(&amp;moduledef);
    if (mod == NULL) {
        return NULL;
    }

    CountDictType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&amp;CountDictType) &lt; 0) {
        Py_DECREF(mod);
        return NULL;
    }

    Py_INCREF(&amp;CountDictType);
    PyModule_AddObject(mod, "CountDict", (PyObject *)&amp;CountDictType);

    return mod;
}
</snippet></ROW><ROW><id>1954846</id><snippet>getattr</snippet></ROW><ROW><id>1954846</id><snippet>method = "whatever"
getattr(test, method)
</snippet></ROW><ROW><id>1954846</id><snippet>getattr(test, method)()
</snippet></ROW><ROW><id>1954913</id><snippet>a(1+b) = a+ab</snippet></ROW><ROW><id>1954913</id><snippet>&gt;&gt;&gt; bool(a*(1+b) == a + a*b) False
</snippet></ROW><ROW><id>1954913</id><snippet> &gt;&gt;&gt; bool(a*(1+b) - (a+a*b) == 0) False
</snippet></ROW><ROW><id>1954913</id><snippet>.expand()</snippet></ROW><ROW><id>1954913</id><snippet>&gt;&gt;&gt; A, B = a*(1+b), a + a*b 
&gt;&gt;&gt; bool(A.expand() == B.expand()) True 
&gt;&gt;&gt; (A - B).expand() 0
</snippet></ROW><ROW><id>1954913</id><snippet>.expand()</snippet></ROW><ROW><id>1954913</id><snippet>simplify()</snippet></ROW><ROW><id>1954913</id><snippet>trigsimp()</snippet></ROW><ROW><id>1954913</id><snippet>&gt;&gt;&gt; trigsimp(cos(x)**2 + sin(x)**2) == 1 True
</snippet></ROW><ROW><id>1955323</id><snippet>csv</snippet></ROW><ROW><id>1955323</id><snippet>csv</snippet></ROW><ROW><id>1955380</id><snippet>return_method()</snippet></ROW><ROW><id>1955380</id><snippet>func_accepting_args()</snippet></ROW><ROW><id>1955380</id><snippet>def return_method(*args):
    return self.func_accepting_args(prop,*args)
</snippet></ROW><ROW><id>1955401</id><snippet>public</snippet></ROW><ROW><id>1955401</id><snippet>django.fcgi</snippet></ROW><ROW><id>1955401</id><snippet>#!/usr/bin/python
import os, sys

_PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, _PROJECT_DIR)
sys.path.insert(0, os.path.dirname(_PROJECT_DIR))

_PROJECT_NAME = _PROJECT_DIR.split('/')[-1]
os.environ['DJANGO_SETTINGS_MODULE'] = "%s.settings" % _PROJECT_NAME

from django.core.servers.fastcgi import runfastcgi
runfastcgi(method="threaded", daemonize="false")
</snippet></ROW><ROW><id>1955401</id><snippet>public</snippet></ROW><ROW><id>1955401</id><snippet>AddHandler fcgid-script .fcgi
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ django.fcgi/$1 [QSA,L]
</snippet></ROW><ROW><id>1955401</id><snippet>public</snippet></ROW><ROW><id>1955401</id><snippet>ln -s /usr/local/alwaysdata/python/django/1.1/django/contrib/admin/media/ media
</snippet></ROW><ROW><id>1955401</id><snippet>myproject/
    __init__.py
    manage.py
    public/
        django.fcgi
        .htaccess
        media/
    settings.py
    urls.py
    myapp/
        views.py
        models.py
</snippet></ROW><ROW><id>1955453</id><snippet>text = ''.join(sys.argv[3:]
</snippet></ROW><ROW><id>1956260</id><snippet>displayname = firstname + lastname or username
</snippet></ROW><ROW><id>1956422</id><snippet>write</snippet></ROW><ROW><id>1956422</id><snippet>PySys_SetObject</snippet></ROW><ROW><id>1956422</id><snippet>xxmodule.c</snippet></ROW><ROW><id>1956422</id><snippet>aview.py</snippet></ROW><ROW><id>1956422</id><snippet>#include "Python.h"
#include &lt;stdio.h&gt;

static PyObject *
aview_write(PyObject *self, PyObject *args)
{
    const char *what;
    if (!PyArg_ParseTuple(args, "s", &amp;what))
        return NULL;
    printf("==%s==", what);
    return Py_BuildValue("");
}

static PyMethodDef a_methods[] = {
    {"write", aview_write, METH_VARARGS, "Write something."},
    {NULL, NULL, 0, NULL}
};

PyMODINIT_FUNC
initaview(void)
{
    PyObject *m = Py_InitModule("aview", a_methods);
    if (m == NULL) return;
    PySys_SetObject("stdout", m);
}
</snippet></ROW><ROW><id>1956422</id><snippet>aview</snippet></ROW><ROW><id>1956422</id><snippet>$ python
Python 2.5.4 (r254:67917, Dec 23 2008, 14:57:27) 
[GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import aview
&gt;&gt;&gt; print 'ciao'
==ciao====
==&gt;&gt;&gt;
</snippet></ROW><ROW><id>1956422</id><snippet>==</snippet></ROW><ROW><id>1956422</id><snippet>print</snippet></ROW><ROW><id>1956422</id><snippet>.write</snippet></ROW><ROW><id>1956422</id><snippet>'ciao'</snippet></ROW><ROW><id>1956645</id><snippet>   def __iter(self):
</snippet></ROW><ROW><id>1956645</id><snippet>   def __iter__(self):
</snippet></ROW><ROW><id>1956645</id><snippet>__</snippet></ROW><ROW><id>1956645</id><snippet>iter</snippet></ROW><ROW><id>1956645</id><snippet>return 33
</snippet></ROW><ROW><id>1956645</id><snippet>yield 33
</snippet></ROW><ROW><id>1956645</id><snippet>return</snippet></ROW><ROW><id>1956645</id><snippet>__iter__</snippet></ROW><ROW><id>1956645</id><snippet>return [33]</snippet></ROW><ROW><id>1956645</id><snippet>yield</snippet></ROW><ROW><id>1956645</id><snippet>__iter__</snippet></ROW><ROW><id>1956645</id><snippet>a().itervalues()
</snippet></ROW><ROW><id>1956645</id><snippet>for x in a(): print x
</snippet></ROW><ROW><id>1956645</id><snippet>print list(a())
</snippet></ROW><ROW><id>1956645</id><snippet>itervalues</snippet></ROW><ROW><id>1956645</id><snippet>__iter__</snippet></ROW><ROW><id>1956683</id><snippet>which easy_install
</snippet></ROW><ROW><id>1956683</id><snippet>less path/to/easy_install
</snippet></ROW><ROW><id>1956683</id><snippet># EASY-INSTALL-ENTRY-SCRIPT: 'setuptools==0.6c11','console_scripts','easy_install'
</snippet></ROW><ROW><id>1956790</id><snippet>env.hosts</snippet></ROW><ROW><id>1956790</id><snippet>fabric/main.py</snippet></ROW><ROW><id>1956790</id><snippet>set()</snippet></ROW><ROW><id>1956790</id><snippet>set()</snippet></ROW><ROW><id>1957002</id><snippet>p = re.compile('\{\{*.*?\}\}', re.DOTALL)
nonBracketedString = p.sub('', bracketedString)
</snippet></ROW><ROW><id>1957002</id><snippet>.</snippet></ROW><ROW><id>1957002</id><snippet>.*?</snippet></ROW><ROW><id>1957121</id><snippet>eval(compile(a,'&lt;string&gt;','exec'))
</snippet></ROW><ROW><id>1957121</id><snippet>eval(repr(a))
</snippet></ROW><ROW><id>1957121</id><snippet>&gt;&gt;&gt; a='''b="ddd"'''
&gt;&gt;&gt; eval(compile(a,'&lt;string&gt;','exec'))
&gt;&gt;&gt; print str(a)
b="ddd"
&gt;&gt;&gt; print b
ddd
</snippet></ROW><ROW><id>1957121</id><snippet>'b="ddd"'</snippet></ROW><ROW><id>1957121</id><snippet>b</snippet></ROW><ROW><id>1957121</id><snippet>eval()</snippet></ROW><ROW><id>1957121</id><snippet>eval()</snippet></ROW><ROW><id>1957121</id><snippet>compile()</snippet></ROW><ROW><id>1957121</id><snippet>None</snippet></ROW><ROW><id>1957121</id><snippet>&gt;&gt;&gt; 'c=7'
'c=7'
&gt;&gt;&gt; c
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'c' is not defined
&gt;&gt;&gt; c=7
&gt;&gt;&gt; c
7
&gt;&gt;&gt; '7=d'
'7=d'
&gt;&gt;&gt; 7=d
  File "&lt;stdin&gt;", line 1
SyntaxError: can't assign to literal
</snippet></ROW><ROW><id>1957121</id><snippet>7=d</snippet></ROW><ROW><id>1957121</id><snippet>'7=d'</snippet></ROW><ROW><id>1957121</id><snippet>expr()</snippet></ROW><ROW><id>1957121</id><snippet>repr()</snippet></ROW><ROW><id>1957121</id><snippet>compile()</snippet></ROW><ROW><id>1957175</id><snippet>ModelClass.objects.latest(timestamp_field)
</snippet></ROW><ROW><id>1957278</id><snippet>''.join(random.choice(string.lowercase) for x in range(X))
</snippet></ROW><ROW><id>1957315</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>1957315</id><snippet>PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
# Other settings...
TEMPLATE_DIRS = (
    os.path.join(PROJECT_ROOT, "templates"),
)
</snippet></ROW><ROW><id>1957315</id><snippet>return render_to_response("payment.html", self.context, RequestContext(self.request))
# or
return render_to_response("subdir/payment.html", self.context, RequestContext(self.request))
</snippet></ROW><ROW><id>1957315</id><snippet>E:\path\to\project\templates\payment.html</snippet></ROW><ROW><id>1957315</id><snippet>E:\path\to\project\templates\subdir\payment.html</snippet></ROW><ROW><id>1957431</id><snippet>from datetime import datetime
import time

t = datetime.now()[5] # milliseconds
dt = # do some calculation for time needed to sleep
time.sleep(dt) # sleep in seconds
</snippet></ROW><ROW><id>1957496</id><snippet>./configure --prefix=/usr/local/python-2.6.4 --enable-framework=/usr/local/python-2.6.4/frameworks --enable-universalsdk=/ MACOSX_DEPLOYMENT_TARGET=10.5 --with-universal-archs=3-way
make
sudo make install
</snippet></ROW><ROW><id>1957496</id><snippet>./configure --with-python=/usr/local/python-2.6.4/bin/python
make
sudo make install
</snippet></ROW><ROW><id>1957496</id><snippet>otool -L /opt/apache2/modules/ mod_wsgi.so
</snippet></ROW><ROW><id>1957640</id><snippet>for item in mylist:
    print item

for key,item in enumerate(mylist):
    print key,":",item

for i in range(0,50):
    print i
</snippet></ROW><ROW><id>1957640</id><snippet>for item in X</snippet></ROW><ROW><id>1957640</id><snippet>X</snippet></ROW><ROW><id>1957640</id><snippet>next(self)</snippet></ROW><ROW><id>1957640</id><snippet>class a(object):
    def __init__(self,x=10):
        self.x = x
    def __iter__(self):
        return self
    def next(self):
        if self.x &gt; 0:
            self.x-=1
            return self.x
        else:
            raise StopIteration
</snippet></ROW><ROW><id>1957640</id><snippet> ainst = a()
 for item in aisnt:
     print item
</snippet></ROW><ROW><id>1957793</id><snippet>__getitem__</snippet></ROW><ROW><id>1957793</id><snippet>&gt;&gt;&gt; class MyClass:
...     def __getitem__(self,index):
...         return index * 2
...
&gt;&gt;&gt; myobj = MyClass()
&gt;&gt;&gt; myobj[3]
6
</snippet></ROW><ROW><id>1957793</id><snippet>__setitem__</snippet></ROW><ROW><id>1957793</id><snippet>&gt;&gt;&gt; myobj[5] = 1
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: MyClass instance has no attribute '__setitem__'
</snippet></ROW><ROW><id>1957820</id><snippet>super(ClassType, self).__init__()</snippet></ROW><ROW><id>1957820</id><snippet>ClassType</snippet></ROW><ROW><id>1957820</id><snippet>self</snippet></ROW><ROW><id>1957820</id><snippet>__init__</snippet></ROW><ROW><id>1957820</id><snippet>C inherits B inherits A</snippet></ROW><ROW><id>1957820</id><snippet>C.__init__</snippet></ROW><ROW><id>1957820</id><snippet>C's</snippet></ROW><ROW><id>1957820</id><snippet>B.__init__</snippet></ROW><ROW><id>1957820</id><snippet>B.__init__</snippet></ROW><ROW><id>1957820</id><snippet>B</snippet></ROW><ROW><id>1957820</id><snippet>class A (object):
  def __init__(self):
    pass

class B (A):
  def __init__(self):
    super(B, self).__init__()

class C (B):
  def __init__(self):
    super(C, self).__init__()
</snippet></ROW><ROW><id>1957820</id><snippet>c = C()</snippet></ROW><ROW><id>1957820</id><snippet>super(self).__init__()</snippet></ROW><ROW><id>1957820</id><snippet>B.__init__</snippet></ROW><ROW><id>1957917</id><snippet>set2 = set(x['id'] for x in list2)
for entry in list1:
  if entry['id'] in set2:
    entry['match'] = True
</snippet></ROW><ROW><id>1957917</id><snippet>set2 = set(x['id'] for x in list2)
for entry in list1:
  entry['match'] = entry['id'] in set2
</snippet></ROW><ROW><id>1958086</id><snippet>display.keysym_to_keycode(Xlib.XK.string_to_keysym(char))</snippet></ROW><ROW><id>1958253</id><snippet>def new_directory(): # define the function
 if not os.path.exists(current_sandbox):  
     os.mkdir(current_sandbox)

new_directory() # call the function
</snippet></ROW><ROW><id>1958253</id><snippet>current_sandbox</snippet></ROW><ROW><id>1958253</id><snippet>def new_directory(dir_path):
    if not os.path.exists(dir_path):  
        os.mkdir(dir_path)

new_directory(current_sandbox)
# much later
new_directory(some_other_path)
</snippet></ROW><ROW><id>1958368</id><snippet>triggerAction: 'all'
</snippet></ROW><ROW><id>1958368</id><snippet>valueField: 'dblist'
</snippet></ROW><ROW><id>1958474</id><snippet>None</snippet></ROW><ROW><id>1958474</id><snippet>sys.modules</snippet></ROW><ROW><id>1958474</id><snippet>foo</snippet></ROW><ROW><id>1958474</id><snippet>import sys</snippet></ROW><ROW><id>1958474</id><snippet>foo.sys</snippet></ROW><ROW><id>1958474</id><snippet>sys</snippet></ROW><ROW><id>1958474</id><snippet>foo/sys.py</snippet></ROW><ROW><id>1958474</id><snippet>None</snippet></ROW><ROW><id>1958474</id><snippet>sys.modules</snippet></ROW><ROW><id>1958474</id><snippet>sys</snippet></ROW><ROW><id>1958474</id><snippet>logging</snippet></ROW><ROW><id>1958474</id><snippet>import xml.dom</snippet></ROW><ROW><id>1958474</id><snippet>xml.dom.xml</snippet></ROW><ROW><id>1958474</id><snippet>xml</snippet></ROW><ROW><id>1958474</id><snippet>xml.dom</snippet></ROW><ROW><id>1958832</id><snippet>#!/usr/bin/env/python
par = self.gui.get_widget('your_parent_window')

msg = gtk.MessageDialog(type=gtk.MESSAGE_INFO, buttons = gtk.BUTTONS_OK, parent=par)
if msg.run():
    msg.destroy()
    return None
</snippet></ROW><ROW><id>1959093</id><snippet>fstat</snippet></ROW><ROW><id>1959093</id><snippet>os.stat</snippet></ROW><ROW><id>1959215</id><snippet>sys.path[0]</snippet></ROW><ROW><id>1959215</id><snippet>''</snippet></ROW><ROW><id>1959215</id><snippet>logging</snippet></ROW><ROW><id>1959215</id><snippet>sys.path</snippet></ROW><ROW><id>1959239</id><snippet>&gt;&gt;&gt; val = "1.5698D+03"  # 1,569.8
&gt;&gt;&gt; print float(val.replace('D', 'E'))
1569.8
</snippet></ROW><ROW><id>1959408</id><snippet>from django.forms import model_to_dict

dict = model_to_dict(instance)
dict.update(dict2)

... Then serialize here ...
</snippet></ROW><ROW><id>1959756</id><snippet>&gt;&gt;&gt; s = [[0]*3 for i in range(2)]
&gt;&gt;&gt; s
[[0, 0, 0], [0, 0, 0]]
&gt;&gt;&gt; s[0][1] = 1
&gt;&gt;&gt; s
[[0, 1, 0], [0, 0, 0]]
</snippet></ROW><ROW><id>1959962</id><snippet>import urllib2
from threading import Thread

BASE_URL = 'http://farmsubsidy.org/DE/browse?page='
NUM_RANGE = range(0000, 3603)
THREADS = 2

def main():
    for nums in split_seq(NUM_RANGE, THREADS):
        t = Spider(BASE_URL, nums)
        t.start()

def split_seq(seq, num_pieces):
    start = 0
    for i in xrange(num_pieces):
        stop = start + len(seq[i::num_pieces])
        yield seq[start:stop]
        start = stop

class Spider(Thread):
    def __init__(self, base_url, nums):
        Thread.__init__(self)
        self.base_url = base_url
        self.nums = nums
    def run(self):
        for num in self.nums:
            url = '%s%s' % (self.base_url, num)
            data = urllib2.urlopen(url).read()
            print data

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>1960000</id><snippet>timeit</snippet></ROW><ROW><id>1960000</id><snippet>$ python -mtimeit -s'x=0' 'if x: d=1' 'else: d=2'
10000000 loops, best of 3: 0.0748 usec per loop
$ python -mtimeit -s'x=1' 'if x: d=1' 'else: d=2'
10000000 loops, best of 3: 0.0685 usec per loop
$ python -mtimeit -s'x=0' 'd=2' 'if x: d=1'
10000000 loops, best of 3: 0.0734 usec per loop
$ python -mtimeit -s'x=1' 'd=2' 'if x: d=1'
10000000 loops, best of 3: 0.101 usec per loop
</snippet></ROW><ROW><id>1960000</id><snippet>$ python -mtimeit -s'x=0' 'd=1 if x else 2'
10000000 loops, best of 3: 0.0736 usec per loop
$ python -mtimeit -s'x=1' 'd=1 if x else 2'
10000000 loops, best of 3: 0.076 usec per loop
</snippet></ROW><ROW><id>1960000</id><snippet>$ python -mtimeit -s'x=1' 'd=1 if x else 2'
10000000 loops, best of 3: 0.076 usec per loop
$ python -mtimeit -s'x=1' 'd=1 if x else 2'
10000000 loops, best of 3: 0.0749 usec per loop
$ python -mtimeit -s'x=1' 'd=1 if x else 2'
10000000 loops, best of 3: 0.0742 usec per loop
$ python -mtimeit -s'x=1' 'd=1 if x else 2'
10000000 loops, best of 3: 0.0749 usec per loop
$ python -mtimeit -s'x=1' 'd=1 if x else 2'
10000000 loops, best of 3: 0.0745 usec per loop
</snippet></ROW><ROW><id>1960000</id><snippet>$ python -mtimeit -s'x=1' 'if x: d=1' 'else: d=2'
10000000 loops, best of 3: 0.0688 usec per loop
$ python -mtimeit -s'x=1' 'if x: d=1' 'else: d=2'
10000000 loops, best of 3: 0.0681 usec per loop
$ python -mtimeit -s'x=1' 'if x: d=1' 'else: d=2'
10000000 loops, best of 3: 0.0687 usec per loop
$ python -mtimeit -s'x=1' 'if x: d=1' 'else: d=2'
10000000 loops, best of 3: 0.0679 usec per loop
$ python -mtimeit -s'x=1' 'if x: d=1' 'else: d=2'
10000000 loops, best of 3: 0.0692 usec per loop
</snippet></ROW><ROW><id>1960138</id><snippet>ifequal</snippet></ROW><ROW><id>1960138</id><snippet>picture</snippet></ROW><ROW><id>1960138</id><snippet>for picture in pictures:
    picture.is_in_article = (picture in article.pictures)
</snippet></ROW><ROW><id>1960138</id><snippet>{% for picture in pictures %}
    {% if picture.is_in_article %}
        &lt;input type="checkbox" checked="true" name="picture" value="{{ picture.key }}"  /&gt;
    {% else %}
        &lt;input type="checkbox" name="picture" value="{{ picture.key }}"  /&gt;
    {% endif %}
    &lt;img src='/img?img_id={{ picture.key }}'&gt;&lt;/img&gt; &lt;br /&gt;
{% endfor %}
</snippet></ROW><ROW><id>1960330</id><snippet>__iter__()</snippet></ROW><ROW><id>1960330</id><snippet>__iter__()</snippet></ROW><ROW><id>1960330</id><snippet>next()</snippet></ROW><ROW><id>1960351</id><snippet>main()</snippet></ROW><ROW><id>1960351</id><snippet># sane_pdb.py: launch Pdb with stdout on original
import sys, pdb
def fixed_pdb(Pdb=pdb.Pdb):
    '''make Pdb() tied to original stdout'''
    return Pdb(stdout=sys.__stdout__)

if __name__ == '__main__':
    pdb.Pdb = fixed_pdb
    pdb.main()
</snippet></ROW><ROW><id>1960546</id><snippet>def row2dict(row):
    d = {}
    for column in row.__table__.columns:
        d[column.name] = getattr(row, column.name)

    return d
</snippet></ROW><ROW><id>1960546</id><snippet>row2dict = lambda r: {c.name: getattr(r, c.name) for c in r.__table__.columns}
</snippet></ROW><ROW><id>1960649</id><snippet>json.JSONEncoder</snippet></ROW><ROW><id>1960649</id><snippet>class DecimalEncoder(json.JSONEncoder):
    def _iterencode(self, o, markers=None):
        if isinstance(o, decimal.Decimal):
            # wanted a simple yield str(o) in the next line,
            # but that would mean a yield on the line with super(...),
            # which wouldn't work (see my comment below), so...
            return (str(o) for o in [o])
        return super(DecimalEncoder, self)._iterencode(o, markers)
</snippet></ROW><ROW><id>1960649</id><snippet>json.dumps({'x': decimal.Decimal('5.5')}, cls=DecimalEncoder)
</snippet></ROW><ROW><id>1960706</id><snippet>b = ','.join(map(str, [1,2,3,4,5]))
# =&gt; '1,2,3,4,5'
</snippet></ROW><ROW><id>1960708</id><snippet>@a</snippet></ROW><ROW><id>1960708</id><snippet>@a
def b...
</snippet></ROW><ROW><id>1960708</id><snippet>def b...

b = a(b)
</snippet></ROW><ROW><id>1960708</id><snippet>a</snippet></ROW><ROW><id>1960708</id><snippet>a</snippet></ROW><ROW><id>1960915</id><snippet>QueryDict</snippet></ROW><ROW><id>1960915</id><snippet>dict(keyword_filter)</snippet></ROW><ROW><id>1960915</id><snippet>dict(keyword_filter, name=filter_name)</snippet></ROW><ROW><id>1960915</id><snippet>json</snippet></ROW><ROW><id>1961180</id><snippet>catch</snippet></ROW><ROW><id>1961180</id><snippet>catch</snippet></ROW><ROW><id>1961180</id><snippet>finally</snippet></ROW><ROW><id>1961180</id><snippet>catch</snippet></ROW><ROW><id>1961180</id><snippet>try ... catch ... finally ...</snippet></ROW><ROW><id>1961180</id><snippet>catch</snippet></ROW><ROW><id>1961180</id><snippet>try .. catch ... finally ...</snippet></ROW><ROW><id>1961180</id><snippet>try ... catch ... finally ...</snippet></ROW><ROW><id>1961180</id><snippet>finally</snippet></ROW><ROW><id>1961180</id><snippet>finally</snippet></ROW><ROW><id>1961180</id><snippet>catch</snippet></ROW><ROW><id>1961180</id><snippet>try</snippet></ROW><ROW><id>1961180</id><snippet>catch (...)</snippet></ROW><ROW><id>1961239</id><snippet>after</snippet></ROW><ROW><id>1961239</id><snippet>after</snippet></ROW><ROW><id>1961239</id><snippet>after</snippet></ROW><ROW><id>1961239</id><snippet>from Tkinter import *

def changeMsg():
    label.configure(text="I will self destruct in 2 secs")
    label.after(2000, root.destroy)

root = Tk()
mainContainer = Frame(root)
label = Label(mainContainer, text="")
label.configure(text="msg will change in 3 secs")
label.pack(side=LEFT, ipadx=5, ipady=5)
mainContainer.pack()
label.after(3000, changeMsg)
root.title("Timed event")
root.mainloop()
</snippet></ROW><ROW><id>1961307</id><snippet>import re
re.split('\n\n+', text)
</snippet></ROW><ROW><id>1961514</id><snippet>/</snippet></ROW><ROW><id>1961514</id><snippet>/</snippet></ROW><ROW><id>1961514</id><snippet>div</snippet></ROW><ROW><id>1961514</id><snippet>//</snippet></ROW><ROW><id>1961514</id><snippet>/</snippet></ROW><ROW><id>1961514</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>1961514</id><snippet>-Q</snippet></ROW><ROW><id>1961514</id><snippet>python</snippet></ROW><ROW><id>1961514</id><snippet>/</snippet></ROW><ROW><id>1961514</id><snippet>int</snippet></ROW><ROW><id>1961514</id><snippet>/</snippet></ROW><ROW><id>1961514</id><snippet>int</snippet></ROW><ROW><id>1961514</id><snippet>float</snippet></ROW><ROW><id>1961514</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; Fraction(1/2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Frameworks/Python.framework/Versions/3.1/lib/python3.1/fractions.py", line 100, in __new__
    raise TypeError("argument should be a string "
TypeError: argument should be a string or a Rational instance
</snippet></ROW><ROW><id>1961514</id><snippet>/</snippet></ROW><ROW><id>1961514</id><snippet>float</snippet></ROW><ROW><id>1961514</id><snippet>Fraction</snippet></ROW><ROW><id>1961514</id><snippet>&gt;&gt;&gt; Fraction(1, 2)
Fraction(1, 2)
&gt;&gt;&gt; Fraction('1/2')
Fraction(1, 2)
</snippet></ROW><ROW><id>1961514</id><snippet>mpq</snippet></ROW><ROW><id>1961514</id><snippet>Fraction</snippet></ROW><ROW><id>1961514</id><snippet>&gt;&gt;&gt; import gmpy
&gt;&gt;&gt; gmpy.mpq(1/2)
mpq(1,2)
</snippet></ROW><ROW><id>1961968</id><snippet>celeryd</snippet></ROW><ROW><id>1962076</id><snippet>.../site-packages/PyQt4</snippet></ROW><ROW><id>1962289</id><snippet>from django.utils.translation import ugettext_lazy as _
</snippet></ROW><ROW><id>1962420</id><snippet>class __b__</snippet></ROW><ROW><id>1962420</id><snippet>class a</snippet></ROW><ROW><id>1962420</id><snippet>print</snippet></ROW><ROW><id>1962420</id><snippet>print</snippet></ROW><ROW><id>1962424</id><snippet>mysql&gt; select * from albums where artist_id = 40;
+-----+------------------------------+------+---------------------+-----------+----------+------------+
| id  | name                         | year | created_at          | artist_id | genre_id | updated_at |
+-----+------------------------------+------+---------------------+-----------+----------+------------+
| 309 | Reise, Reise                 | 2004 | 2009-11-22 16:01:13 |        40 |        2 | NULL       | 
| 310 | Mutter                       | 2001 | 2009-11-22 16:12:28 |        40 |        2 | NULL       | 
| 311 | Sehnsucht                    | 1998 | 2009-11-22 16:20:22 |        40 |        2 | NULL       | 
| 312 | Live aus Berlin              | 1999 | 2009-11-22 16:29:11 |        40 |        2 | NULL       | 
| 313 | Rosenrot                     | 2005 | 2009-11-22 16:40:43 |        40 |        4 | NULL       | 
| 314 | The Very Best of Rammstein   |    0 | 2009-11-22 16:51:38 |        40 |        2 | NULL       | 
| 315 | Live aus Berlin (bonus disc) |    0 | 2009-11-22 17:05:24 |        40 |        2 | NULL       | 
+-----+------------------------------+------+---------------------+-----------+----------+------------+
7 rows in set (0.02 sec)
</snippet></ROW><ROW><id>1962424</id><snippet>| id | artist_id | tag_id |
| 1  | 34        | 357    |
| 2  | 98        | 234    |
</snippet></ROW><ROW><id>1962588</id><snippet>__copy__</snippet></ROW><ROW><id>1962588</id><snippet>__deepcopy__</snippet></ROW><ROW><id>1962588</id><snippet>__all__</snippet></ROW><ROW><id>1962588</id><snippet>__name__</snippet></ROW><ROW><id>1962588</id><snippet>__bases__</snippet></ROW><ROW><id>1962588</id><snippet>__foo__</snippet></ROW><ROW><id>1962963</id><snippet>class MyClass(object):
    def __init__(self):
        self.w = {}

    def __setitem__(self, k, v):
        self.w[k] = v

    def __getitem__(self, k):
        return self.w[k]


mc = MyClass()
mc['aa'] = 12
print mc['aa']
</snippet></ROW><ROW><id>1963007</id><snippet>bash-3.2$ python
Python 2.6 (trunk:66714:66715M, Oct  1 2008, 18:36:04) 
[GCC 4.0.1 (Apple Computer, Inc. build 5370)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; class a:
...    @staticmethod
...    def b():
...       return 1
... 
&gt;&gt;&gt; a_obj = a()
&gt;&gt;&gt; print a.b()
1
&gt;&gt;&gt; print a_obj.b()
1
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1963045</id><snippet>test[numpy.logical_or.reduce([test[:,1] == x for x in wanted])]
</snippet></ROW><ROW><id>1963121</id><snippet>#!/usr/bin/env python

import pyglet

window = pyglet.window.Window()
fps_display = pyglet.clock.ClockDisplay()
label = pyglet.text.Label('Hello World!',font_name='Arial',font_size=36, x=0, y=0)

@window.event                       
def on_mouse_motion(x, y, dx, dy):
    window.clear()
    label.x = x
    label.y = y

fps_display = pyglet.clock.ClockDisplay()

@window.event
def on_draw():
    fps_display.draw()
    label.draw()

pyglet.app.run()
</snippet></ROW><ROW><id>1963146</id><snippet>red, green, blue, alpha = img.split()
</snippet></ROW><ROW><id>1963146</id><snippet>alpha = img.split()[-1]
</snippet></ROW><ROW><id>1963146</id><snippet>img.putalpha(alpha)
</snippet></ROW><ROW><id>1963146</id><snippet>if img.mode in ('RGBA', 'LA') or (img.mode == 'P' and 'transparency' in img.info):
    alpha = img.convert('RGBA').split()[-1]
</snippet></ROW><ROW><id>1963397</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; HTMLParser.HTMLParser().unescape(u'a ä b c')
u'a \xe4 b'
</snippet></ROW><ROW><id>1963397</id><snippet>\N</snippet></ROW><ROW><id>1963397</id><snippet>\xnn</snippet></ROW><ROW><id>1963397</id><snippet>ä</snippet></ROW><ROW><id>1963397</id><snippet># coding=</snippet></ROW><ROW><id>1963514</id><snippet>hash(o)</snippet></ROW><ROW><id>1963514</id><snippet>l = []
for x in range(0, 50):
    for y in range(0, 50):
        if hash((x,y)) in l:
            print "Fail: ", (x,y)
        l.append(hash((x,y)))
print "Test Finished"
</snippet></ROW><ROW><id>1963561</id><snippet>#check whether int conversion will raise an error
if not isinstance(s, str) or not s.isdigit:
    return None
elif len(s) &gt; 10:    #too many digits for int conversion
    return None
else:
    return int(str)
</snippet></ROW><ROW><id>1963561</id><snippet>try:
    return int(str)
except (TypeError, ValueError, OverflowError): #int conversion failed
    return None
</snippet></ROW><ROW><id>1963593</id><snippet>for line in open("file"):
    print line[4:8] , line[11:16]
</snippet></ROW><ROW><id>1963656</id><snippet>django.core.mail</snippet></ROW><ROW><id>1963656</id><snippet>send_mail</snippet></ROW><ROW><id>1963656</id><snippet>send_mail(
    subject, 
    message, 
    from_email, 
    recipient_list, 
    fail_silently=False, 
    auth_user=None, 
    auth_password=None, 
    connection=None)
</snippet></ROW><ROW><id>1963853</id><snippet>scroll_area = pyglet.text.layout.ScrollableTextLayout(my_text, width, height, multiline=True)
</snippet></ROW><ROW><id>1963853</id><snippet>scroll_area.view_y = 30 # start 30 pixels down
</snippet></ROW><ROW><id>1963904</id><snippet>from django.contrib.formtools.wizard import FormWizard
from django import forms

class SubjectForm(forms.Form):
    subjects = forms.MultipleChoiceField(choices = (('language', 'language'), 
    													('sport','sport')))

class RelatedQForm(forms.Form):
    """Overload the __init__ operator to take a list of forms as the first input and generate the 
    fields that way."""
    def __init__(self, interested_subjects, *args, **kwargs):
    	super(RelatedQForm, self).__init__(*args, **kwargs)
    	for sub in interested_subjects:
    		self.field[sub] = forms.CharField(label = "What do you think about %s" % subject)

class SubjectWizard(FormWizard):
    def done(self, request, form_list):
    	process_form_list(form_list)

    def process_step(self, request, form, step):
    	if step == 1:
    		chosen_subs = form.cleaned_data['subjects']
    		self.form_list[1] = RelatedQForm(chosen_subs)
</snippet></ROW><ROW><id>1963904</id><snippet>for field, val in form.cleaned_data.items():
    do_stuff
</snippet></ROW><ROW><id>1964012</id><snippet>real(4)</snippet></ROW><ROW><id>1964247</id><snippet>TypeError</snippet></ROW><ROW><id>1964247</id><snippet>*a</snippet></ROW><ROW><id>1964247</id><snippet>**k</snippet></ROW><ROW><id>1964247</id><snippet>class Error(Exception)</snippet></ROW><ROW><id>1964247</id><snippet>class WrongNumberOfArguments(thispackage.Error, TypeError):
</snippet></ROW><ROW><id>1964247</id><snippet>raise WrongNumberOfArguments</snippet></ROW><ROW><id>1964247</id><snippet>thispackage.Error</snippet></ROW><ROW><id>1964247</id><snippet>TypeError</snippet></ROW><ROW><id>1964430</id><snippet>#!/usr/bin/env python
import random
import itertools

numname={1:'Ace',11:'Jack',12:'Queen',13:'King'}
suits=['Clubs','Diamonds','Hearts','Spades']
numbers=range(1,14)
cards=['%s-%s'%(numname.get(number,number),suit)
       for number,suit in itertools.product(numbers,suits)]
print(cards)
random.shuffle(cards)
print(cards)
hand=random.sample(cards,5)
print(hand)
</snippet></ROW><ROW><id>1964477</id><snippet>MySQL-python-1.2.2.win32-py2.5.exe</snippet></ROW><ROW><id>1964477</id><snippet>MySQL-python-1.2.2.win32-py2.4.exe</snippet></ROW><ROW><id>1964831</id><snippet>lambda request, *args, **kwargs: {}
</snippet></ROW><ROW><id>1964831</id><snippet>request</snippet></ROW><ROW><id>1964831</id><snippet>a={'a':'aaa','b':'bbb'}
b=a.pop('a',lambda x,y:x)
print a
</snippet></ROW><ROW><id>1964831</id><snippet>{'b': 'bbb'}</snippet></ROW><ROW><id>1964831</id><snippet>a</snippet></ROW><ROW><id>1964831</id><snippet>'aaa'</snippet></ROW><ROW><id>1964831</id><snippet>b</snippet></ROW><ROW><id>1964831</id><snippet>.pop</snippet></ROW><ROW><id>1964831</id><snippet>.pop</snippet></ROW><ROW><id>1964831</id><snippet>.pop</snippet></ROW><ROW><id>1964831</id><snippet>'a'</snippet></ROW><ROW><id>1964831</id><snippet>a</snippet></ROW><ROW><id>1964831</id><snippet>'aaa'</snippet></ROW><ROW><id>1964831</id><snippet>.pop</snippet></ROW><ROW><id>1964831</id><snippet>b</snippet></ROW><ROW><id>1964949</id><snippet>__</snippet></ROW><ROW><id>1964949</id><snippet>__contains__</snippet></ROW><ROW><id>1964949</id><snippet>__contains__</snippet></ROW><ROW><id>1964949</id><snippet>in</snippet></ROW><ROW><id>1964949</id><snippet>a</snippet></ROW><ROW><id>1964949</id><snippet>True</snippet></ROW><ROW><id>1964949</id><snippet>true</snippet></ROW><ROW><id>1964949</id><snippet>b</snippet></ROW><ROW><id>1964949</id><snippet>print 'x' in b</snippet></ROW><ROW><id>1964949</id><snippet>True</snippet></ROW><ROW><id>1964949</id><snippet>b</snippet></ROW><ROW><id>1964949</id><snippet>b</snippet></ROW><ROW><id>1964949</id><snippet>True</snippet></ROW><ROW><id>1964949</id><snippet>self.d</snippet></ROW><ROW><id>1964998</id><snippet>input</snippet></ROW><ROW><id>1964998</id><snippet>raw_input</snippet></ROW><ROW><id>1964998</id><snippet>TypeError</snippet></ROW><ROW><id>1964998</id><snippet>input</snippet></ROW><ROW><id>1964998</id><snippet>raw_input</snippet></ROW><ROW><id>1965012</id><snippet>text = """
When in the course of human Events, it becomes necessary for one People to dissolve the Political Bands which have connected them with another, and to assume among the Powers of the Earth, the separate and equal Station to which the Laws of Nature and of Nature?s God entitle them, a decent Respect to the Opinions of Mankind requires that they should declare the causes which impel them to the Separation.

We hold these Truths to be self-evident, that all Men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty, and the pursuit of Happiness?-That to secure these Rights, Governments are instituted among Men, deriving their just Powers from the Consent of the Governed, that whenever any Form of Government becomes destructive of these Ends, it is the Right of the People to alter or abolish it, and to institute a new Government, laying its Foundation on such Principles, and organizing its Powers in such Form, as to them shall seem most likely to effect their Safety and Happiness. Prudence, indeed, will dictate that Governments long established should not be changed for light and transient Causes; and accordingly all Experience hath shewn, that Mankind are more disposed to suffer, while Evils are sufferable, than to right themselves by abolishing the Forms to which they are accustomed. But when a long Train of Abuses and Usurpations, pursuing invariably the same Object, evinces a Design to reduce them under absolute Despotism, it is their Right, it is their Duty, to throw off such Government, and to provide new Guards for their future Security. Such has been the patient Sufferance of these Colonies; and such is now the Necessity which constrains them to alter their former Systems of Government. The History of the Present King of Great-Britain is a History of repeated Injuries and Usurpations, all having in direct Object the Establishment of an absolute Tyranny over these States. To prove this, let Facts be submitted to a candid World.
"""

words = text.split()
subs = []
n = 4
for i in range(0, len(words), n):
    subs.append(" ".join(words[i:i+n]))
print subs[:10]
</snippet></ROW><ROW><id>1965012</id><snippet>['When in the course', 'of human Events, it', 'becomes necessary for one', 'People to dissolve the', 'Political Bands which have', 'connected them with another,', 'and to assume among', 'the Powers of the', 'Earth, the separate and', 'equal Station to which']
</snippet></ROW><ROW><id>1965012</id><snippet>subs = [" ".join(words[i:i+n]) for i in range(0, len(words), n)]
</snippet></ROW><ROW><id>1965127</id><snippet>.setter</snippet></ROW><ROW><id>1965127</id><snippet>.deleter</snippet></ROW><ROW><id>1965127</id><snippet>property</snippet></ROW><ROW><id>1965127</id><snippet>class C(object):
    def __init__(self):
        self._x = None

    def _get_x(self):
        """I'm the 'x' property."""
        return self._x
    def _set_x(self, value):
        self._x = value
    def _del_x(self):
        del self._x
    x = property(_get_x, _set_x, _del_x)
</snippet></ROW><ROW><id>1965129</id><snippet>encoded_name = ''.join([chr((ord(c)&gt;&gt;4) + ord('A'))
                        + chr((ord(c)&amp;0xF) + ord('A')) for c in original_name])
</snippet></ROW><ROW><id>1965160</id><snippet>print</snippet></ROW><ROW><id>1965160</id><snippet>class foo:
</snippet></ROW><ROW><id>1965160</id><snippet>class foo(object):
</snippet></ROW><ROW><id>1965160</id><snippet>if x in self:</snippet></ROW><ROW><id>1965160</id><snippet>__getattr__</snippet></ROW><ROW><id>1965160</id><snippet>__contains__</snippet></ROW><ROW><id>1965160</id><snippet>x</snippet></ROW><ROW><id>1965160</id><snippet>x</snippet></ROW><ROW><id>1965160</id><snippet>self</snippet></ROW><ROW><id>1965160</id><snippet>__getattr__</snippet></ROW><ROW><id>1965160</id><snippet>self</snippet></ROW><ROW><id>1965160</id><snippet>getattr</snippet></ROW><ROW><id>1965160</id><snippet>raise AttributeError</snippet></ROW><ROW><id>1965160</id><snippet>__getattr__</snippet></ROW><ROW><id>1965160</id><snippet>__getattr__</snippet></ROW><ROW><id>1965160</id><snippet>__getattr__</snippet></ROW><ROW><id>1965160</id><snippet>class foo(object):
    def __init__(self):
        self.blah = {'a': 'boh'}
    def __getattr__(self, x):
        if x in self.blah:
            return self.blah[x]
        raise AttributeError

a=foo()
print getattr(a,'b','sss')
</snippet></ROW><ROW><id>1965160</id><snippet>sss</snippet></ROW><ROW><id>1965160</id><snippet>__setattr__</snippet></ROW><ROW><id>1965160</id><snippet>self</snippet></ROW><ROW><id>1965160</id><snippet>self.blah =</snippet></ROW><ROW><id>1965160</id><snippet>__setattr__</snippet></ROW><ROW><id>1965160</id><snippet>class foo(object):
    def __init__(self):
        self.__dict__['blah'] = {}
    def __setattr__(self, name, value):
        self.blah[name] = value
    def __getattr__(self, x):
        if x in self.blah:
            return self.blah[x]
        raise AttributeError

a=foo()
print getattr(a,'b','sss')
</snippet></ROW><ROW><id>1965160</id><snippet>sss</snippet></ROW><ROW><id>1965160</id><snippet>        self.__dict__['blah'] = {}
</snippet></ROW><ROW><id>1965160</id><snippet>        object.__setattr__(self, 'blah', {})
</snippet></ROW><ROW><id>1965160</id><snippet>super</snippet></ROW><ROW><id>1965229</id><snippet>datetime</snippet></ROW><ROW><id>1965229</id><snippet>timedelta</snippet></ROW><ROW><id>1965229</id><snippet>datetime</snippet></ROW><ROW><id>1965229</id><snippet>from datetime import datetime

# Parse the time strings
t1 = datetime.strptime('01:12','%H:%M')
t2 = datetime.strptime('18:59','%H:%M')

# Do the math, the result is a timedelta object
delta = (t2 - t1) / 12
print(delta.seconds)
</snippet></ROW><ROW><id>1965250</id><snippet>Queue.Queue</snippet></ROW><ROW><id>1965250</id><snippet>workQ</snippet></ROW><ROW><id>1965250</id><snippet>wr = workQ.get()</snippet></ROW><ROW><id>1965250</id><snippet>workQ</snippet></ROW><ROW><id>1965250</id><snippet>workQ.put((url, from, numbytes))</snippet></ROW><ROW><id>1965250</id><snippet>Queue</snippet></ROW><ROW><id>1965250</id><snippet>resultQ</snippet></ROW><ROW><id>1965250</id><snippet>resultQ</snippet></ROW><ROW><id>1965250</id><snippet>resultQ</snippet></ROW><ROW><id>1965250</id><snippet>open</snippet></ROW><ROW><id>1965250</id><snippet>seek</snippet></ROW><ROW><id>1965250</id><snippet>write</snippet></ROW><ROW><id>1965250</id><snippet>workQ</snippet></ROW><ROW><id>1965518</id><snippet>with</snippet></ROW><ROW><id>1965518</id><snippet>enumerate</snippet></ROW><ROW><id>1965518</id><snippet>zip</snippet></ROW><ROW><id>1965518</id><snippet>map</snippet></ROW><ROW><id>1965518</id><snippet>reduce</snippet></ROW><ROW><id>1965615</id><snippet>def decorate(function):
    def wrap_function(*args, **kwargs):
        kwargs['str'] = 'Hello!'
        return function(*args, **kwargs)
    return wrap_function

@decorate
def print_message(*args, **kwargs):
    print(kwargs['str'])
</snippet></ROW><ROW><id>1965615</id><snippet>def decorate(function):
    def wrap_function(*args, **kwargs):
        str = 'Hello!'
        return function(str, *args, **kwargs)
    return wrap_function

@decorate
def print_message(str, *args, **kwargs):
    print(str)
</snippet></ROW><ROW><id>1965615</id><snippet>def decorate(function):
    def wrap_function(*args, **kwargs):
        str = 'Hello!'
        args.insert(1, str)
        return function(*args, **kwargs)
    return wrap_function

class Printer:
    @decorate
    def print_message(self, str, *args, **kwargs):
        print(str)
</snippet></ROW><ROW><id>1965731</id><snippet>arr = list()
arr = []
</snippet></ROW><ROW><id>1965731</id><snippet>__setitem__()</snippet></ROW><ROW><id>1965816</id><snippet>2to3 "/Users/Nimbuz/Documents/python31/Excercise 1/time3.py"
</snippet></ROW><ROW><id>1965816</id><snippet>2to3 /Users/Nimbuz/Documents/python31/Excercise\ 1/time3.py
</snippet></ROW><ROW><id>1965816</id><snippet>2to3 time3.py
</snippet></ROW><ROW><id>1966097</id><snippet>email</snippet></ROW><ROW><id>1966141</id><snippet>from urllib2 import urlopen
code = urlopen("http://example.com/").code
</snippet></ROW><ROW><id>1966141</id><snippet>if (code / 100 &gt;= 4):
   print "Nothing there."
</snippet></ROW><ROW><id>1966210</id><snippet>tolist()</snippet></ROW><ROW><id>1966210</id><snippet>import numpy as np
&gt;&gt;&gt; np.array([[1,2,3],[4,5,6]]).tolist()
[[1, 2, 3], [4, 5, 6]]
</snippet></ROW><ROW><id>1966260</id><snippet>import itertools

x = '''[This] is some text with [some [blocks that are nested [in a [variety]
of ways]]] and some [which are not], and [any [with nesting] must go] away.'''

def nonest(txt):
  pieces = []
  d = 0
  level = []
  for c in txt:
    if c == '[': d += 1
    level.append(d)
    if c == ']': d -= 1
  for k, g in itertools.groupby(zip(txt, level), lambda x: x[1]&gt;0):
    block = list(g)
    if max(d for c, d in block) &gt; 1: continue
    pieces.append(''.join(c for c, d in block))
  print ''.join(pieces)

nonest(x)
</snippet></ROW><ROW><id>1966260</id><snippet>[This] is some text with  and some [which are not], and  away.
</snippet></ROW><ROW><id>1966260</id><snippet>level</snippet></ROW><ROW><id>1966260</id><snippet>level</snippet></ROW><ROW><id>1966260</id><snippet>groupby</snippet></ROW><ROW><id>1966260</id><snippet>g</snippet></ROW><ROW><id>1966260</id><snippet>block</snippet></ROW><ROW><id>1966424</id><snippet>formfield</snippet></ROW><ROW><id>1966424</id><snippet>ModelForm</snippet></ROW><ROW><id>1966424</id><snippet>formfield</snippet></ROW><ROW><id>1966424</id><snippet>form_class</snippet></ROW><ROW><id>1966424</id><snippet>from myapp.forms import MyCustomFormField

#create a custom model field
class EditAreaField(models.TextField):
  def formfield(self, **kwargs):
    defaults={'form_class': MyCustomFormField}#pass our custom field as form_class
    defaults.update(kwargs)
    super (EditAreaField, self).formfield(**defaults)
</snippet></ROW><ROW><id>1966431</id><snippet>&gt;&gt;&gt; a = ['Hello ','everybody ','! ']
&gt;&gt;&gt; [ e.strip() for e in a ]
['Hello', 'everybody', '!']
</snippet></ROW><ROW><id>1966431</id><snippet>string.strip</snippet></ROW><ROW><id>1966431</id><snippet>string.rstrip</snippet></ROW><ROW><id>1966431</id><snippet>string.lstrip</snippet></ROW><ROW><id>1966504</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; wordlist = ['Schreiben\nEs', 'Schreiben', \
    'Schreiben\nEventuell', 'Schreiben\nHaruki']
&gt;&gt;&gt; [ re.sub("\n.*", "", word) for word in wordlist ]
['Schreiben', 'Schreiben', 'Schreiben', 'Schreiben']
</snippet></ROW><ROW><id>1966504</id><snippet>re.sub</snippet></ROW><ROW><id>1966504</id><snippet>&gt;&gt;&gt; help(re.sub)
  1 Help on function sub in module re:
  2 
  3 sub(pattern, repl, string, count=0)
  4     Return the string obtained by replacing the leftmost
  5     non-overlapping occurrences of the pattern in string by the
  6     replacement repl.  repl can be either a string or a callable;
  7     if a callable, it's passed the match object and must return
  8     a replacement string to be used.
</snippet></ROW><ROW><id>1966530</id><snippet>./configure</snippet></ROW><ROW><id>1966530</id><snippet>--enable-static</snippet></ROW><ROW><id>1966530</id><snippet>--disable-shared</snippet></ROW><ROW><id>1966530</id><snippet>$ ./configure --prefix=/usr/local/mysql-src/ --enable-static --disable-shared --with-charset=utf8 --with-extra-charsets=ascii,binary,latin1 --with-collation=utf8_general_ci</snippet></ROW><ROW><id>1966530</id><snippet>$ make</snippet></ROW><ROW><id>1966530</id><snippet>$ sudo make install</snippet></ROW><ROW><id>1966530</id><snippet>_mysql.so</snippet></ROW><ROW><id>1966530</id><snippet>site.cfg</snippet></ROW><ROW><id>1966530</id><snippet>static = True</snippet></ROW><ROW><id>1966530</id><snippet>mysql_config = /usr/local/mysql-src/bin/mysql_config</snippet></ROW><ROW><id>1966530</id><snippet>configure</snippet></ROW><ROW><id>1966530</id><snippet>python setup.py build</snippet></ROW><ROW><id>1966530</id><snippet>sudo python setup.by install</snippet></ROW><ROW><id>1966530</id><snippet>site-packages</snippet></ROW><ROW><id>1966530</id><snippet>virtualenv</snippet></ROW><ROW><id>1966531</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; i = struct.unpack('&lt;L', '\x23\x45\x00\x73')[0]
&gt;&gt;&gt; print i
1929397539
</snippet></ROW><ROW><id>1966723</id><snippet>def foo(a, b, c):
    mydict = {'a': a, 'b': b, 'c': c}
</snippet></ROW><ROW><id>1966723</id><snippet>def foo(a, b, c):
    mydict = locals()
</snippet></ROW><ROW><id>1966800</id><snippet>__init__.py</snippet></ROW><ROW><id>1966800</id><snippet>from packagename import modulename
</snippet></ROW><ROW><id>1966800</id><snippet>from __future__ import absolute_import
from . import modulename
</snippet></ROW><ROW><id>1966800</id><snippet>from __future__</snippet></ROW><ROW><id>1966800</id><snippet>__init__.py</snippet></ROW><ROW><id>1966800</id><snippet>__import__()</snippet></ROW><ROW><id>1966914</id><snippet>phase2()</snippet></ROW><ROW><id>1966914</id><snippet>queries</snippet></ROW><ROW><id>1966914</id><snippet>%timeit raw_queries(queries,nlp)
</snippet></ROW><ROW><id>1966914</id><snippet>python -mtimeit -s"import test; queries=test.phase2()" "test.raw_queries(queries)"
</snippet></ROW><ROW><id>1966914</id><snippet>test.py</snippet></ROW><ROW><id>1966914</id><snippet>python -mtimeit -s"SETUP_COMMANDS" "COMMAND_TO_BE_TIMED"
</snippet></ROW><ROW><id>1966914</id><snippet>queries</snippet></ROW><ROW><id>1966914</id><snippet>raw_queries</snippet></ROW><ROW><id>1966914</id><snippet>queries</snippet></ROW><ROW><id>1966914</id><snippet>queries</snippet></ROW><ROW><id>1966914</id><snippet>phase2()</snippet></ROW><ROW><id>1966914</id><snippet>queries</snippet></ROW><ROW><id>1966914</id><snippet>phase2</snippet></ROW><ROW><id>1966914</id><snippet>queries</snippet></ROW><ROW><id>1966914</id><snippet>def phase2():
    ...
    return queries
</snippet></ROW><ROW><id>1966914</id><snippet>phase2</snippet></ROW><ROW><id>1966914</id><snippet>def phase3():
    # Do stuff like phase2() but return queries
    return queries
</snippet></ROW><ROW><id>1966990</id><snippet>import page2
</snippet></ROW><ROW><id>1966990</id><snippet>/page2</snippet></ROW><ROW><id>1966990</id><snippet>page2.Page2</snippet></ROW><ROW><id>1966990</id><snippet>app.yaml</snippet></ROW><ROW><id>1966990</id><snippet>def render(template_file, template_values):
    path = os.path.join(os.path.dirname(__file__), template_file)
    self.response.out.write(template.render(path, template_values))
</snippet></ROW><ROW><id>1966990</id><snippet>render</snippet></ROW><ROW><id>1966990</id><snippet>import</snippet></ROW><ROW><id>1967169</id><snippet>def grab_main_color(self, rect, max_colors=256):
    """returns a tuple with the RGB value of the most present color in the given rect"""
    img=ImageGrab.grab(rect)
    colors = img.getcolors(max_colors)
    max_occurence, most_present = 0, 0
    try:
        for c in colors:
            if c[0] &gt; max_occurence:
                (max_occurence, most_present) = c
        return most_present
    except TypeError:
        raise Exception("Too many colors in the given rect")
</snippet></ROW><ROW><id>1967201</id><snippet>addr</snippet></ROW><ROW><id>1967340</id><snippet>def InvalidArgsSpecified:
</snippet></ROW><ROW><id>1967340</id><snippet>def InvalidArgsSpecified():
</snippet></ROW><ROW><id>1967340</id><snippet>def</snippet></ROW><ROW><id>1967481</id><snippet>def</snippet></ROW><ROW><id>1967481</id><snippet>def f(x, y, _d={1:2, 3:4}):
</snippet></ROW><ROW><id>1967481</id><snippet>_d</snippet></ROW><ROW><id>1967481</id><snippet>_d</snippet></ROW><ROW><id>1967481</id><snippet>_d</snippet></ROW><ROW><id>1967655</id><snippet>'dsa\wqqqq\ffff'</snippet></ROW><ROW><id>1967655</id><snippet>\f</snippet></ROW><ROW><id>1967655</id><snippet>chr(12)</snippet></ROW><ROW><id>1967655</id><snippet>print os.path.exists('dsa\wqqqq\ffff')</snippet></ROW><ROW><id>1967655</id><snippet>dsa</snippet></ROW><ROW><id>1967655</id><snippet>print os.path.exists(os.path.join('dsa', 'wqqqq', 'ffff'))
</snippet></ROW><ROW><id>1967655</id><snippet>dsa</snippet></ROW><ROW><id>1967655</id><snippet>wqqqq</snippet></ROW><ROW><id>1967655</id><snippet>ffff</snippet></ROW><ROW><id>1967655</id><snippet>print os.path.exists(r'dsa\wqqqq\ffff')
</snippet></ROW><ROW><id>1967655</id><snippet>r</snippet></ROW><ROW><id>1967655</id><snippet>print os.path.exists('dsa\\wqqqq\\ffff')
</snippet></ROW><ROW><id>1967655</id><snippet>print os.path.exists('dsa/wqqqq/ffff')
</snippet></ROW><ROW><id>1967655</id><snippet>os.path.exists('what')</snippet></ROW><ROW><id>1967655</id><snippet>what</snippet></ROW><ROW><id>1967692</id><snippet>path = os.path.abspath(__file__)[:-8]
</snippet></ROW><ROW><id>1967692</id><snippet>path = os.path.dirname(os.path.abspath(__file__))
</snippet></ROW><ROW><id>1967718</id><snippet>__import__</snippet></ROW><ROW><id>1967718</id><snippet>&lt;module 'posixpath' from '/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/posixpath.pyc'&gt;</snippet></ROW><ROW><id>1967718</id><snippet>print os.path</snippet></ROW><ROW><id>1967718</id><snippet>print os.environ['PATH']</snippet></ROW><ROW><id>1967718</id><snippet>print os.getcwd()</snippet></ROW><ROW><id>1967718</id><snippet>__import__(name)#why it do this
return sys.modules[name]
</snippet></ROW><ROW><id>1967718</id><snippet>__import__</snippet></ROW><ROW><id>1967718</id><snippet>sys.modules</snippet></ROW><ROW><id>1967718</id><snippet>return __import__(name)
</snippet></ROW><ROW><id>1967718</id><snippet>name</snippet></ROW><ROW><id>1967718</id><snippet>.</snippet></ROW><ROW><id>1967718</id><snippet>__import__</snippet></ROW><ROW><id>1967718</id><snippet>sys.modules</snippet></ROW><ROW><id>1967718</id><snippet>return __import__('foo.bar')
</snippet></ROW><ROW><id>1967718</id><snippet>__import__('foo.bar')
return sys.modules['foo']
</snippet></ROW><ROW><id>1967718</id><snippet>__import__('foo.bar')
return sys.modules['foo.bar']
</snippet></ROW><ROW><id>1967732</id><snippet>a + b</snippet></ROW><ROW><id>1967732</id><snippet>''.join</snippet></ROW><ROW><id>1967732</id><snippet>&gt;&gt;&gt; chars = ['a'] * 10000000
&gt;&gt;&gt; r = ''
&gt;&gt;&gt; for c in chars: r += c
&gt;&gt;&gt; print len(r)
</snippet></ROW><ROW><id>1967732</id><snippet>&gt;&gt;&gt; chars = ['a'] * 10000000
&gt;&gt;&gt; r = ''.join(chars)
&gt;&gt;&gt; print len(r)
</snippet></ROW><ROW><id>1967744</id><snippet>hasattr</snippet></ROW><ROW><id>1967744</id><snippet>hasattr(x,'y')</snippet></ROW><ROW><id>1967744</id><snippet>x.y</snippet></ROW><ROW><id>1967744</id><snippet>getattr</snippet></ROW><ROW><id>1967793</id><snippet>#tcl</snippet></ROW><ROW><id>1967793</id><snippet>def treeview_sort_column(tv, col, reverse):
    l = [(tv.set(k, col), k) for k in tv.get_children('')]
    l.sort(reverse=reverse)

    # rearrange items in sorted positions
    for index, (val, k) in enumerate(l):
        tv.move(k, '', index)

    # reverse sort next time
    tv.heading(col, command=lambda: \
               treeview_sort_column(tv, col, not reverse))

[...]
columns = ('name', 'age')
treeview = ttk.TreeView(root, columns=columns, show='headings')
for col in columns:
    treeview.heading(col, text=col, command=lambda: \
                     treeview_sort_column(tv, col, False))
[...]
</snippet></ROW><ROW><id>1967818</id><snippet>entries[i].updated_parsed</snippet></ROW><ROW><id>1967818</id><snippet>entries[i].updated</snippet></ROW><ROW><id>1967818</id><snippet>feedparser</snippet></ROW><ROW><id>1967818</id><snippet>datetime</snippet></ROW><ROW><id>1968139</id><snippet>from mwlib.uparser import simpleparse
simpleparse("=h1=\n*item 1\n*item2\n==h2==\nsome [[Link|caption]] there\n")
</snippet></ROW><ROW><id>1968139</id><snippet>from mwlib import parser, expander, uparser
from mwlib.expander import DictDB
from mwlib.xfail import xfail
from mwlib.dummydb import DummyDB
from mwlib.refine import util, core

parse = uparser.simpleparse

def test_headings():
    r=parse(u"""
= 1 =
== 2 ==
= 3 =
""")

    sections = [x.children[0].asText().strip() for x in r.children if isinstance(x, parser.Section)]
    assert sections == [u"1", u"3"]
</snippet></ROW><ROW><id>1968285</id><snippet>myprog *
</snippet></ROW><ROW><id>1968285</id><snippet>*</snippet></ROW><ROW><id>1968285</id><snippet>myprog mydir1 mydir2 myfile1.jpg myfile2.txt mynamedpipe1
</snippet></ROW><ROW><id>1968285</id><snippet>stat</snippet></ROW><ROW><id>1968691</id><snippet>import math
import winsound
import time

labels = ['a','a#','b','c','c#','d','d#','e','f','f#','g','g#']
# name is the complete name of a note (label + octave). the parameter
# n is the number of half-tone from A4 (e.g. D#1 is -42, A3 is -12, A5 is 12)
name   = lambda n: labels[n%len(labels)] + str(int((n+(9+4*12))/12))
# the frequency of a note. the parameter n is the number of half-tones
# from a4, which has a frequency of 440Hz, and is our reference note.
freq   = lambda n: int(440*(math.pow(2,1/12)**n))

# a dictionnary associating note frequencies to note names
notes  = {name(n): freq(n) for n in range(-42,60)}

# the period expressed in second, computed from a tempo in bpm
period = lambda tempo: 1/(tempo/60)

# play each note in sequence through the PC speaker at the given tempo
def play(song, tempo):
    for note in song.lower().split():
        if note in notes.keys():
            winsound.Beep(notes[note], int(period(tempo)*1000))
        else:
            time.sleep(period(tempo))

# "au clair de la lune"!! 'r' is a rest
play( 'c4 c4 C4 d4 e4 r d4 r c4 e4 d4 d4 c4 r r r '
      'c4 C4 c4 d4 e4 r d4 r c4 e4 d4 d4 c4 r r r '
      'd4 d4 d4 d4 A3 r a3 r d4 c4 B3 a3 g3 r r r '
      'c4 c4 c4 d4 e4 r d4 r c4 e4 d4 d4 c4 r r r ', 180 )
</snippet></ROW><ROW><id>1968691</id><snippet>abcdefg</snippet></ROW><ROW><id>1968691</id><snippet>h</snippet></ROW><ROW><id>1968691</id><snippet>b</snippet></ROW><ROW><id>1969015</id><snippet>class Directions:
    up = 0
    down = 1
    left = 2
    right =3
</snippet></ROW><ROW><id>1969274</id><snippet>def translate(value, leftMin, leftMax, rightMin, rightMax):
    # Figure out how 'wide' each range is
    leftSpan = leftMax - leftMin
    rightSpan = rightMax - rightMin

    # Convert the left range into a 0-1 range (float)
    valueScaled = float(value - leftMin) / float(leftSpan)

    # Convert the 0-1 range into a value in the right range.
    return rightMin + (valueScaled * rightSpan)
</snippet></ROW><ROW><id>1969318</id><snippet>uu</snippet></ROW><ROW><id>1969318</id><snippet>HlpWiz&gt;&gt;&gt; 4
What module do you want to look more into?:  uu

*An error occurred - probably because the module isn't loaded or is misspelled*
</snippet></ROW><ROW><id>1969318</id><snippet>#!/usr/bin/env python
import sys
__import__('uu')
print(sys.modules['uu'])
print(dir(uu))
</snippet></ROW><ROW><id>1969318</id><snippet>NameError: name 'uu' is not defined</snippet></ROW><ROW><id>1969318</id><snippet>__import__</snippet></ROW><ROW><id>1969318</id><snippet>uu</snippet></ROW><ROW><id>1969318</id><snippet>uu</snippet></ROW><ROW><id>1969318</id><snippet>uu</snippet></ROW><ROW><id>1969318</id><snippet>uu</snippet></ROW><ROW><id>1969318</id><snippet>sys.modules</snippet></ROW><ROW><id>1969318</id><snippet>    var_mod = input("What module do you want to look more into?:  ")
    print "\n attempting to browse... please wait!"
    time.sleep(2)
    browse_mod(zlib = var_mod)
</snippet></ROW><ROW><id>1969318</id><snippet>    var_mod = raw_input("What module do you want to look more into?:  ")
    print "\n attempting to browse... please wait!"
    time.sleep(2)
    browse_mod(zlib = sys.modules[var_mod])
</snippet></ROW><ROW><id>1969318</id><snippet>raw_input</snippet></ROW><ROW><id>1969318</id><snippet>input</snippet></ROW><ROW><id>1969318</id><snippet>raw_input</snippet></ROW><ROW><id>1969318</id><snippet>i = 1
for line in sample:
    print i, line
    i = i + 1
</snippet></ROW><ROW><id>1969318</id><snippet>for i,line in enumerate(sample):
    print i+1, line
</snippet></ROW><ROW><id>1969318</id><snippet>uu</snippet></ROW><ROW><id>1969318</id><snippet>sys.modules['uu']</snippet></ROW><ROW><id>1969318</id><snippet>uu</snippet></ROW><ROW><id>1969400</id><snippet>astng</snippet></ROW><ROW><id>1969400</id><snippet>astng</snippet></ROW><ROW><id>1969400</id><snippet>pyqt</snippet></ROW><ROW><id>1969526</id><snippet>dict( (o.name,o) for o in obj_list )[name]
</snippet></ROW><ROW><id>1969526</id><snippet>obj_list</snippet></ROW><ROW><id>1969970</id><snippet>sample = ("this", "is", "Annoying!")

for i, line in enumerate(sample):
    print i, line
</snippet></ROW><ROW><id>1969970</id><snippet>enumerate</snippet></ROW><ROW><id>1970077</id><snippet>import re
data=r'&lt;wn20schema:NounSynset rdf:about="&amp;dn;synset-56242" rdfs:label="{saddelmageri_1}"&gt;"'

matches=re.findall('synset-([0-9]+).*label="{(.*)_1}"', data)
print "matches:", matches
</snippet></ROW><ROW><id>1970077</id><snippet>matches: [('56242', 'saddelmageri')]
</snippet></ROW><ROW><id>1970337</id><snippet>main</snippet></ROW><ROW><id>1970337</id><snippet>None</snippet></ROW><ROW><id>1970337</id><snippet>all_mods is None</snippet></ROW><ROW><id>1970337</id><snippet>for x in all_mods</snippet></ROW><ROW><id>1970337</id><snippet>import sys, StringIO
buffer = StringIO.StringIO()
sys.stdout = buffer
main()
buffer.seek(0)
all_mods = buffer.read().splitlines()
sys.stdout = sys.__stdout__
</snippet></ROW><ROW><id>1970527</id><snippet>form = UserCreationForm

{% for field in form1 %}{{ field }}{% endfor %}
</snippet></ROW><ROW><id>1970527</id><snippet>UserCreationForm</snippet></ROW><ROW><id>1970697</id><snippet>In [1]: np.arange(1000000).dtype
Out[1]: dtype('int32')
</snippet></ROW><ROW><id>1970697</id><snippet>a=np.arange(1000000,dtype='int64').reshape(1000,1000)
</snippet></ROW><ROW><id>1970739</id><snippet>Keyword.objects.exclude(id__in=PageKeyword.objects.values('keyword_id'))
</snippet></ROW><ROW><id>1970739</id><snippet>Keyword.objects.exclude(pagekeyword__in=PageKeyword.objects.all())
</snippet></ROW><ROW><id>1970930</id><snippet>Draw.textsize</snippet></ROW><ROW><id>1970930</id><snippet>from PIL import Image, ImageDraw

W, H = (300,200)
msg = "hello"

im = Image.new("RGBA",(W,H),"yellow")
draw = ImageDraw.Draw(im)
w, h = draw.textsize(msg)
draw.text(((W-w)/2,(H-h)/2), msg, fill="black")

im.save("hello.png", "PNG")
</snippet></ROW><ROW><id>1971258</id><snippet>Document.getElementById</snippet></ROW><ROW><id>1971258</id><snippet>b</snippet></ROW><ROW><id>1971258</id><snippet>id</snippet></ROW><ROW><id>1971258</id><snippet>setIdAttribute</snippet></ROW><ROW><id>1971258</id><snippet>id</snippet></ROW><ROW><id>1971258</id><snippet>id</snippet></ROW><ROW><id>1971258</id><snippet>setIdAttribute</snippet></ROW><ROW><id>1971258</id><snippet>import xml.dom.minidom as d
a = d.Document()
b = a.createElement('test')
a.appendChild(b)
b.setAttribute('id', 'x')
b.setIdAttribute('id')
</snippet></ROW><ROW><id>1971258</id><snippet>getElementById</snippet></ROW><ROW><id>1971258</id><snippet>&gt;&gt;&gt; a.getElementById('x')
&lt;DOM Element: test at 0xb77712ec&gt;
</snippet></ROW><ROW><id>1971294</id><snippet>Range</snippet></ROW><ROW><id>1971294</id><snippet>myUrlclass.addheader("Range","bytes=%s-" % (existSize))
</snippet></ROW><ROW><id>1971294</id><snippet>class HTTPRangeHandler(urllib2.BaseHandler):
"""Handler that enables HTTP Range headers.

This was extremely simple. The Range header is a HTTP feature to
begin with so all this class does is tell urllib2 that the 
"206 Partial Content" reponse from the HTTP server is what we 
expected.

Example:
    import urllib2
    import byterange

    range_handler = range.HTTPRangeHandler()
    opener = urllib2.build_opener(range_handler)

    # install it
    urllib2.install_opener(opener)

    # create Request and set Range header
    req = urllib2.Request('http://www.python.org/')
    req.header['Range'] = 'bytes=30-50'
    f = urllib2.urlopen(req)
"""

def http_error_206(self, req, fp, code, msg, hdrs):
    # 206 Partial Content Response
    r = urllib.addinfourl(fp, hdrs, req.get_full_url())
    r.code = code
    r.msg = msg
    return r

def http_error_416(self, req, fp, code, msg, hdrs):
    # HTTP's Range Not Satisfiable error
    raise RangeError('Requested Range Not Satisfiable')
</snippet></ROW><ROW><id>1971704</id><snippet>connection.execute_query('exec storedProcedureName @Id=1')
</snippet></ROW><ROW><id>1971767</id><snippet>os.environ['CXXFLAGS']</snippet></ROW><ROW><id>1971767</id><snippet>CXXFLAGS</snippet></ROW><ROW><id>1971767</id><snippet>./configure</snippet></ROW><ROW><id>1971767</id><snippet>cmd = [
    './configure',
    'CXXFLAGS=-O2 -march=i586 -mtune=i686',
]
subprocess.Popen(cmd)
</snippet></ROW><ROW><id>1971767</id><snippet>CXXFLAGS</snippet></ROW><ROW><id>1971767</id><snippet>CXXFLAGS</snippet></ROW><ROW><id>1971938</id><snippet>text.replace</snippet></ROW><ROW><id>1971938</id><snippet>text.replace</snippet></ROW><ROW><id>1971938</id><snippet>string.translate</snippet></ROW><ROW><id>1971938</id><snippet>string.maketrans</snippet></ROW><ROW><id>1971938</id><snippet>translate</snippet></ROW><ROW><id>1972537</id><snippet>TypeError</snippet></ROW><ROW><id>1972537</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>1972537</id><snippet>from list</snippet></ROW><ROW><id>1972638</id><snippet>cursor.execute</snippet></ROW><ROW><id>1972638</id><snippet>execute</snippet></ROW><ROW><id>1972705</id><snippet>bbb = x</snippet></ROW><ROW><id>1972720</id><snippet>GetMonitorInfo</snippet></ROW><ROW><id>1972801</id><snippet>h2 = QuotedString("==")
</snippet></ROW><ROW><id>1972881</id><snippet>msvcrt.setmode(1, os.O_BINARY)</snippet></ROW><ROW><id>1972881</id><snippet>sys.stdout.flush</snippet></ROW><ROW><id>1973169</id><snippet>c.sort(key=lambda x:x[0])
</snippet></ROW><ROW><id>1973391</id><snippet>if</snippet></ROW><ROW><id>1973540</id><snippet>def addEvent(calendar_service):
    event = gdata.calendar.CalendarEventEntry()
    event.content = atom.Content(text='Tennis with John 30.12.2009 15:00-16:00')
    event.quick_add = gdata.calendar.QuickAdd(value='true')
    feed = calendar_service.GetOwnCalendarsFeed()
    calurl=[a_calendar.content.src for i, a_calendar in enumerate(feed.entry)]
    new_event = calendar_service.InsertEvent(event, calurl[1]) #calurl[1] select the 2. cal of own's cals
</snippet></ROW><ROW><id>1973688</id><snippet>sort</snippet></ROW><ROW><id>1973688</id><snippet>sorted</snippet></ROW><ROW><id>1973688</id><snippet>sort</snippet></ROW><ROW><id>1973688</id><snippet>sorted</snippet></ROW><ROW><id>1973688</id><snippet>cmp</snippet></ROW><ROW><id>1973688</id><snippet>key</snippet></ROW><ROW><id>1973688</id><snippet>reverse</snippet></ROW><ROW><id>1973688</id><snippet>L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;
cmp(x, y) -&gt; -1, 0, 1

sorted(iterable, cmp=None, key=None, reverse=False) --&gt; new sorted list
</snippet></ROW><ROW><id>1973688</id><snippet>key</snippet></ROW><ROW><id>1973688</id><snippet>reverse</snippet></ROW><ROW><id>1973688</id><snippet>cmp</snippet></ROW><ROW><id>1973688</id><snippet>key</snippet></ROW><ROW><id>1973688</id><snippet>reverse</snippet></ROW><ROW><id>1973688</id><snippet>key</snippet></ROW><ROW><id>1973688</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>1973688</id><snippet>&gt;&gt;&gt; from operator import itemgetter

&gt;&gt;&gt; a = range(5)
&gt;&gt;&gt; b = a[::-1]
&gt;&gt;&gt; c = map(lambda x: chr(((x+3)%5)+97), a)
&gt;&gt;&gt; sequence = zip(a,b,c)

# sort by first item in a tuple
&gt;&gt;&gt; sorted(sequence, key = itemgetter(0))
[(0, 4, 'd'), (1, 3, 'e'), (2, 2, 'a'), (3, 1, 'b'), (4, 0, 'c')]

# sort by second item in a tuple
&gt;&gt;&gt; sorted(sequence, key = itemgetter(1))
[(4, 0, 'c'), (3, 1, 'b'), (2, 2, 'a'), (1, 3, 'e'), (0, 4, 'd')]

# sort by third item in a tuple
&gt;&gt;&gt; sorted(sequence, key = itemgetter(2))
[(2, 2, 'a'), (3, 1, 'b'), (4, 0, 'c'), (0, 4, 'd'), (1, 3, 'e')]
</snippet></ROW><ROW><id>1973688</id><snippet>key</snippet></ROW><ROW><id>1973688</id><snippet>sort</snippet></ROW><ROW><id>1973688</id><snippet>sorted</snippet></ROW><ROW><id>1973688</id><snippet>itemgetter</snippet></ROW><ROW><id>1973688</id><snippet>f=itemgetter(2)</snippet></ROW><ROW><id>1973688</id><snippet>f(r)</snippet></ROW><ROW><id>1973688</id><snippet>r[2]</snippet></ROW><ROW><id>1973688</id><snippet>key</snippet></ROW><ROW><id>1973688</id><snippet>cmp</snippet></ROW><ROW><id>1973688</id><snippet>key</snippet></ROW><ROW><id>1973688</id><snippet>cmp</snippet></ROW><ROW><id>1973688</id><snippet>&gt;&gt;&gt; from timeit import Timer
&gt;&gt;&gt; Timer(stmt="sorted(xs,key=itemgetter(1))",setup="from operator import itemgetter;xs=range(100);xs=zip(xs,xs);").timeit(300000)
6.7079150676727295
&gt;&gt;&gt; Timer(stmt="sorted(xs,key=lambda x:x[1])",setup="xs=range(100);xs=zip(xs,xs);").timeit(300000)
11.609490871429443
&gt;&gt;&gt; Timer(stmt="sorted(xs,cmp=lambda a,b: cmp(a[1],b[1]))",setup="xs=range(100);xs=zip(xs,xs);").timeit(300000)
22.335839986801147
</snippet></ROW><ROW><id>1973688</id><snippet>key</snippet></ROW><ROW><id>1973688</id><snippet>cmp</snippet></ROW><ROW><id>1973688</id><snippet>itemgetter</snippet></ROW><ROW><id>1973688</id><snippet>lambda x: x[1]</snippet></ROW><ROW><id>1973834</id><snippet>while running:
      option = 1
      for choice in items:
         print(str(option) + ". " + choice)
         option = option + 1
</snippet></ROW><ROW><id>1973834</id><snippet>print(str(option) + ". Quit"))
choice = int(input("choose an option: "))
if choice == option:
   running = false
else: 
   credit_card = input("Credit card number: ")
   save_transaction(prices[choice - 1], credit_card, items[choice - 1])
</snippet></ROW><ROW><id>1974463</id><snippet>Amount       = line[36:45]
</snippet></ROW><ROW><id>1974463</id><snippet>Amount       = int(line[36:45])
</snippet></ROW><ROW><id>1974463</id><snippet>ClerkHash[ClerkKey+AccountKey] = arr[0,0]
</snippet></ROW><ROW><id>1974463</id><snippet>ClerkHash[ClerkKey+AccountKey] = [0,0]
</snippet></ROW><ROW><id>1974624</id><snippet>queue</snippet></ROW><ROW><id>1974624</id><snippet>s = sched.scheduler(time.time, time.sleep)
map(s.cancel, s.queue)
</snippet></ROW><ROW><id>1974699</id><snippet>from django.shortcuts import render_to_response
from django.template import RequestContext

def my_personalized_view(request):
  return render_to_response('something.html',
                             {},
                             context_instance=RequestContext(request))
</snippet></ROW><ROW><id>1974955</id><snippet>$ python setup.py install
</snippet></ROW><ROW><id>1975645</id><snippet>{{form.working_month}}
</snippet></ROW><ROW><id>1975645</id><snippet>def __init__(self, *args, **kwargs):
  forms.MultiValueField.__init__(self, *args, **kwargs)
  self.fields = (forms.CharField(), forms.CharField(),)
</snippet></ROW><ROW><id>1976145</id><snippet>import os
os.environ['instance'] = 'blah'
import a
</snippet></ROW><ROW><id>1976145</id><snippet>import os
import b
print 'a:', os.environ['instance']
</snippet></ROW><ROW><id>1976145</id><snippet>import os
print 'b:', os.environ['instance']
</snippet></ROW><ROW><id>1976145</id><snippet>b: blah
a: blah
</snippet></ROW><ROW><id>1976189</id><snippet>next((i for i, d in enumerate(hugelist) if 735 in d['ids']), None)
</snippet></ROW><ROW><id>1976189</id><snippet>None</snippet></ROW><ROW><id>1976189</id><snippet>next</snippet></ROW><ROW><id>1976189</id><snippet>hugelist</snippet></ROW><ROW><id>1976189</id><snippet>hugelist</snippet></ROW><ROW><id>1976189</id><snippet>auxdict = {}
L = len(hugelist) - 1
for i, d in enumerate(reversed(hugelist)):
  auxdict.update(dict.fromkeys(d['ids'], L-i))
</snippet></ROW><ROW><id>1976189</id><snippet>reversed(enumerate(...</snippet></ROW><ROW><id>1976189</id><snippet>enumerate</snippet></ROW><ROW><id>1976189</id><snippet>reversed</snippet></ROW><ROW><id>1976189</id><snippet>L-i</snippet></ROW><ROW><id>1976189</id><snippet>auxdict</snippet></ROW><ROW><id>1976189</id><snippet>auxdict = {}
for i, d in enumerate(hugelist):
  for item in d['ids']:
    if item not in auxdict: auxdict[item] =i
</snippet></ROW><ROW><id>1976189</id><snippet>if</snippet></ROW><ROW><id>1976189</id><snippet>dict</snippet></ROW><ROW><id>1976189</id><snippet>L = len(hugelist) - 1
auxdict = dict((item, L-i) for i, d in enumerate(reversed(hugelist)) for item in d['ids'])
</snippet></ROW><ROW><id>1976189</id><snippet>hugelist</snippet></ROW><ROW><id>1976189</id><snippet>timeit</snippet></ROW><ROW><id>1976189</id><snippet>hugelist</snippet></ROW><ROW><id>1976551</id><snippet>Traceback (most recent call last):
  File "t.py", line 13, in &lt;module&gt;
    print 'The amount of sales tax is: ' '$%.2f' % sum(items_count) * tax
TypeError: can't multiply sequence by non-int of type 'float'
</snippet></ROW><ROW><id>1976551</id><snippet>sum(items_count) * tax
</snippet></ROW><ROW><id>1976551</id><snippet>%</snippet></ROW><ROW><id>1976551</id><snippet>sum()</snippet></ROW><ROW><id>1976551</id><snippet>&lt;string_value&gt; * tax
</snippet></ROW><ROW><id>1976551</id><snippet>print 'The amount of sales tax is: ' '$%.2f' % (sum(items_count) * tax)
</snippet></ROW><ROW><id>1976551</id><snippet>%</snippet></ROW><ROW><id>1976551</id><snippet>*</snippet></ROW><ROW><id>1976551</id><snippet>sum()</snippet></ROW><ROW><id>1976551</id><snippet>%</snippet></ROW><ROW><id>1976551</id><snippet>&lt;string_value&gt; * tax</snippet></ROW><ROW><id>1976551</id><snippet>items_tax = sum(items_count) * tax
print 'The amount of sales tax is: ' '$%.2f' % items_tax
</snippet></ROW><ROW><id>1976551</id><snippet>float()</snippet></ROW><ROW><id>1976551</id><snippet>0.06</snippet></ROW><ROW><id>1976551</id><snippet>tax = 0.06
</snippet></ROW><ROW><id>1976551</id><snippet>tax = 0.06</snippet></ROW><ROW><id>1976551</id><snippet>tax = .06</snippet></ROW><ROW><id>1976551</id><snippet>raw_input()</snippet></ROW><ROW><id>1976551</id><snippet>float()</snippet></ROW><ROW><id>1976551</id><snippet>count</snippet></ROW><ROW><id>1976551</id><snippet>raw_input()</snippet></ROW><ROW><id>1976551</id><snippet>int()</snippet></ROW><ROW><id>1976551</id><snippet>int</snippet></ROW><ROW><id>1976551</id><snippet>count -= 1
</snippet></ROW><ROW><id>1976551</id><snippet>count</snippet></ROW><ROW><id>1976551</id><snippet>int()</snippet></ROW><ROW><id>1976551</id><snippet>raw_input()</snippet></ROW><ROW><id>1976551</id><snippet>y</snippet></ROW><ROW><id>1977103</id><snippet>import pexpect
import time

def ChangePassword(user, pass):
    passwd = pexpect.spawn("/usr/bin/passwd %s" % user)

    for x in xrange(2):
        # wait for password: to come out of passwd's stdout
        passwd.expect("password: ")
        # send pass to passwd's stdin
        passwd.sendline(pass)
        time.sleep(0.1)

ChangePassword('foo', 'bar') # changes user "foo"'s password to "bar"
</snippet></ROW><ROW><id>1977227</id><snippet>IObjectEditedEvent</snippet></ROW><ROW><id>1977227</id><snippet>IObjectModifiedEvent</snippet></ROW><ROW><id>1977227</id><snippet>FileField</snippet></ROW><ROW><id>1977716</id><snippet>import scipy
import math
import numpy
from scipy import interpolate


x= [1,2,3,4,5,6]
y= [10,20,30]

Y = numpy.array([[i]*len(x) for i in y])
X = numpy.array([x for i in y])
Z = numpy.array([[2.3,3.4,5.6,7.8,9.6,11.2],
                 [4.3,5.4,7.6,9.8,11.6,13.2],
                 [6.3,7.4,8.6,10.8,13.6,15.2]]) 

tck = interpolate.bisplrep(X,Y,Z)
print interpolate.bisplev(3.5,15,tck) 


7.84921875
</snippet></ROW><ROW><id>1977716</id><snippet>print interpolate.bisplev(x,y,tck)

[[  2.2531746    4.2531746    6.39603175]
 [  3.54126984   5.54126984   7.11269841]
 [  5.5031746    7.5031746    8.78888889]
 [  7.71111111   9.71111111  10.9968254 ]
 [  9.73730159  11.73730159  13.30873016]
 [ 11.15396825  13.15396825  15.2968254 ]]
</snippet></ROW><ROW><id>1977716</id><snippet>tck = interpolate.bisplrep(X,Y,Z,kx=5,ky=2)
print interpolate.bisplev(x,y,tck) 

[[  2.3   4.3   6.3]
 [  3.4   5.4   7.4]
 [  5.6   7.6   8.6]
 [  7.8   9.8  10.8]
 [  9.6  11.6  13.6]
 [ 11.2  13.2  15.2]]
</snippet></ROW><ROW><id>1977716</id><snippet>print interpolate.bisplev(3.5,15,tck)

7.88671875
</snippet></ROW><ROW><id>1977716</id><snippet>fig = plt.figure()
ax = Axes3D(fig)
ax.plot_surface(X, Y, Z,rstride=1, cstride=1, cmap=cm.jet)
plt.show()
</snippet></ROW><ROW><id>1977975</id><snippet>HTTP/1.1 200 OK
Server: nginx
Date: Wed, 30 Dec 2009 01:38:24 GMT
Content-Type: text/html; charset=utf-8
Connection: close
</snippet></ROW><ROW><id>1977975</id><snippet>HttpResponseNotFound</snippet></ROW><ROW><id>1977975</id><snippet>    return HttpResponseNotFound('&lt;h1&gt;Page not found&lt;/h1&gt;')
</snippet></ROW><ROW><id>1978076</id><snippet>X = 1
</snippet></ROW><ROW><id>1978076</id><snippet>import foo
print(foo.X)  # prints 1
</snippet></ROW><ROW><id>1978076</id><snippet>global</snippet></ROW><ROW><id>1978076</id><snippet>def initDB(name):
    global __DBNAME__  # add this line!
    if __DBNAME__ is None: # see notes below; explicit test for None
        __DBNAME__ = name
    else:
        raise RuntimeError("Database name has already been set.")
</snippet></ROW><ROW><id>1978076</id><snippet>if not __DBNAME__</snippet></ROW><ROW><id>1978076</id><snippet>if not variablename</snippet></ROW><ROW><id>1978076</id><snippet>None</snippet></ROW><ROW><id>1978076</id><snippet>is</snippet></ROW><ROW><id>1978076</id><snippet>None</snippet></ROW><ROW><id>1978076</id><snippet>None</snippet></ROW><ROW><id>1978076</id><snippet>import * from mymodule</snippet></ROW><ROW><id>1978076</id><snippet>import mymodule</snippet></ROW><ROW><id>1978076</id><snippet>dir(mymodule)</snippet></ROW><ROW><id>1978076</id><snippet>mymodule.__DBNAME__</snippet></ROW><ROW><id>1978076</id><snippet>import *</snippet></ROW><ROW><id>1978076</id><snippet>mymodule.something</snippet></ROW><ROW><id>1978076</id><snippet>from mymodule import something</snippet></ROW><ROW><id>1978076</id><snippet>global</snippet></ROW><ROW><id>1978076</id><snippet>list</snippet></ROW><ROW><id>1978076</id><snippet>__DBNAME__ = [None] # use length-1 list as a mutable

# later, in code:  
if __DBNAME__[0] is None:
    __DBNAME__[0] = name
</snippet></ROW><ROW><id>1978076</id><snippet>dict</snippet></ROW><ROW><id>1978076</id><snippet>class Box:
    pass

__m = Box()  # m will contain all module-level values
__m.dbname = None  # database name global in module

# later, in code:
if __m.dbname is None:
    __m.dbname = name
</snippet></ROW><ROW><id>1978076</id><snippet>__m.dbname</snippet></ROW><ROW><id>1978076</id><snippet>__m["DBNAME"]</snippet></ROW><ROW><id>1978076</id><snippet>dict</snippet></ROW><ROW><id>1978076</id><snippet>dict</snippet></ROW><ROW><id>1978076</id><snippet>Box</snippet></ROW><ROW><id>1978269</id><snippet>x = NavigableString('foop')
y = pickle.dumps(x)
z = pickle.loads(y)
print x, z
</snippet></ROW><ROW><id>1978269</id><snippet>__getnewargs__</snippet></ROW><ROW><id>1978269</id><snippet>pickle.dumps</snippet></ROW><ROW><id>1978269</id><snippet>x</snippet></ROW><ROW><id>1978269</id><snippet>pickle.loads</snippet></ROW><ROW><id>1978269</id><snippet>NavigableString.__new__</snippet></ROW><ROW><id>1978359</id><snippet>pip install -e .</snippet></ROW><ROW><id>1978359</id><snippet>easy_install .</snippet></ROW><ROW><id>1978359</id><snippet>python setup.py install</snippet></ROW><ROW><id>1978847</id><snippet>import commands
command = "gconftool-2 --set /desktop/gnome/background/picture_filename --type string '/path/to/file.jpg'"
status, output = commands.getstatusoutput(command)  # status=0 if success
</snippet></ROW><ROW><id>1979010</id><snippet>SELECT somestuff
FROM mytable
WHERE thetimestamp = ANY (%(times)s::timestamp[])
</snippet></ROW><ROW><id>1979107</id><snippet>str</snippet></ROW><ROW><id>1979107</id><snippet>unicode</snippet></ROW><ROW><id>1979107</id><snippet>          object
             |
             |
         basestring
            / \
           /   \
         str  unicode
</snippet></ROW><ROW><id>1979107</id><snippet>str</snippet></ROW><ROW><id>1979107</id><snippet>unicode</snippet></ROW><ROW><id>1979107</id><snippet>&gt;&gt;&gt; string1 = "I am a plain string"
&gt;&gt;&gt; string2 = u"I am a unicode string"
&gt;&gt;&gt; isinstance(string1, str)
True
&gt;&gt;&gt; isinstance(string2, str)
False
&gt;&gt;&gt; isinstance(string1, unicode)
False
&gt;&gt;&gt; isinstance(string2, unicode)
True
&gt;&gt;&gt; isinstance(string1, basestring)
True
&gt;&gt;&gt; isinstance(string2, basestring)
True
</snippet></ROW><ROW><id>1979238</id><snippet>class MyPoller(SVNPoller):
    def __init__(...):
        SVNPoller.__init__(self, ...)

    def getProcessOutput(self, args):
        args += ["--trust-server-cert"]
        return SVNPoller.getProcessOutput(self, args)
</snippet></ROW><ROW><id>1979304</id><snippet>print</snippet></ROW><ROW><id>1979304</id><snippet>str</snippet></ROW><ROW><id>1979304</id><snippet>print</snippet></ROW><ROW><id>1979304</id><snippet>print</snippet></ROW><ROW><id>1979304</id><snippet>&gt;&gt;&gt; print '\xaa\xbb\xcc'
��
</snippet></ROW><ROW><id>1979304</id><snippet>decode</snippet></ROW><ROW><id>1979304</id><snippet>&gt;&gt;&gt; 'ª»Ì'
'\xc2\xaa\xc2\xbb\xc3\x8c'
&gt;&gt;&gt; 'ª»Ì'.decode(sys.stdin.encoding)
u'\xaa\xbb\xcc'
</snippet></ROW><ROW><id>1979304</id><snippet>'\xaa\xbb\xcc'</snippet></ROW><ROW><id>1979304</id><snippet>print</snippet></ROW><ROW><id>1979304</id><snippet>u</snippet></ROW><ROW><id>1979304</id><snippet>"asdf"</snippet></ROW><ROW><id>1979304</id><snippet>u"asdf"</snippet></ROW><ROW><id>1979304</id><snippet>a = '\xAA\xBB\xCC'
a.decode('latin1')
# result: u'\xAA\xBB\xCC'
print(a.decode('latin1'))
# output: ª»Ì
</snippet></ROW><ROW><id>1979304</id><snippet>sys.stdout.write("\xAA\xBB\xCC".decode('latin1').encode(sys.stdout.encoding))
</snippet></ROW><ROW><id>1979304</id><snippet>sys.stdout.write("ąöî\n".decode(sys.stdin.encoding).encode(sys.stdout.encoding))
</snippet></ROW><ROW><id>1979304</id><snippet>ord('ą'.decode('utf-8').encode('latin2'))
</snippet></ROW><ROW><id>1979304</id><snippet>print(obj)</snippet></ROW><ROW><id>1979304</id><snippet>str(obj)</snippet></ROW><ROW><id>1979304</id><snippet>unicode</snippet></ROW><ROW><id>1979304</id><snippet>unicode(str(obj))</snippet></ROW><ROW><id>1979304</id><snippet>print</snippet></ROW><ROW><id>1979304</id><snippet>str</snippet></ROW><ROW><id>1979304</id><snippet>__str__</snippet></ROW><ROW><id>1979304</id><snippet>class Foo(object):
    def __str__(self):
        return "I'm a Foo!"

print Foo()
</snippet></ROW><ROW><id>1979304</id><snippet>print</snippet></ROW><ROW><id>1979304</id><snippet>Python/bltinmodule.c</snippet></ROW><ROW><id>1979304</id><snippet>builtin_print</snippet></ROW><ROW><id>1979602</id><snippet>HTMLParser</snippet></ROW><ROW><id>1979602</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; h= HTMLParser.HTMLParser()
&gt;&gt;&gt; h.unescape('alpha &lt; &amp;beta;')
u'alpha &lt; \u03b2'
</snippet></ROW><ROW><id>1979602</id><snippet>&gt;&gt;&gt; cgi.escape(u'&lt;a&gt;bá&lt;/a&gt;').encode('ascii', 'xmlcharrefreplace')
'&lt;a&gt;bá&lt;/a&gt;
</snippet></ROW><ROW><id>1979639</id><snippet>csplit</snippet></ROW><ROW><id>1979639</id><snippet>csplit ~/Download/zinc.mol2 '/@&lt;TRIPOS&gt;MOLECULE/' '{*}'
</snippet></ROW><ROW><id>1979953</id><snippet> f = open(filename, 'wb')
</snippet></ROW><ROW><id>1979964</id><snippet>Foo.objects.order_by('b_date').values_list('b_date', flat=True)
</snippet></ROW><ROW><id>1980464</id><snippet>powrprof.dll</snippet></ROW><ROW><id>1980464</id><snippet>mswsock.dll</snippet></ROW><ROW><id>1980464</id><snippet>options</snippet></ROW><ROW><id>1980464</id><snippet>setup.py</snippet></ROW><ROW><id>1980464</id><snippet> 'dll_excludes': [ "mswsock.dll", "powrprof.dll" ]
</snippet></ROW><ROW><id>1980552</id><snippet>minidom</snippet></ROW><ROW><id>1980552</id><snippet>ownerDocument</snippet></ROW><ROW><id>1980552</id><snippet>&gt;&gt;&gt; imp= minidom.getDOMImplementation('')
&gt;&gt;&gt; dt= imp.createDocumentType('html', '-//W3C//DTD XHTML 1.0 Strict//EN', 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd')
</snippet></ROW><ROW><id>1980552</id><snippet>SystemId</snippet></ROW><ROW><id>1980552</id><snippet>DocumentType</snippet></ROW><ROW><id>1980552</id><snippet>&gt;&gt;&gt; doc= imp.createDocument('http://www.w3.org/1999/xhtml', 'html', dt)
&gt;&gt;&gt; print doc.toxml()
&lt;?xml version="1.0" ?&gt;&lt;!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;&lt;html/&gt;
</snippet></ROW><ROW><id>1980552</id><snippet>DocumentType</snippet></ROW><ROW><id>1980552</id><snippet>ownerDocument</snippet></ROW><ROW><id>1980552</id><snippet>pxdom</snippet></ROW><ROW><id>1980552</id><snippet>minidom</snippet></ROW><ROW><id>1980552</id><snippet>&gt;&gt;&gt; doc= minidom.parseString('&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;&lt;head/&gt;&lt;body/&gt;&lt;/html&gt;')
&gt;&gt;&gt; dt= minidom.getDOMImplementation('').createDocumentType('html', '-//W3C//DTD XHTML 1.0 Strict//EN', 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd')
&gt;&gt;&gt; doc.insertBefore(dt, doc.documentElement)
&lt;xml.dom.minidom.DocumentType instance&gt;
&gt;&gt;&gt; print doc.toxml()
&lt;?xml version="1.0" ?&gt;&lt;!DOCTYPE html  PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;&lt;head/&gt;&lt;body/&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>1980552</id><snippet>&gt;&gt;&gt; doc.doctype
# None
&gt;&gt;&gt; dt.ownerDocument
# None
</snippet></ROW><ROW><id>1980552</id><snippet>def setDoctype(document, doctype):
    imp= document.implementation
    newdocument= imp.createDocument(doctype.namespaceURI, doctype.name, doctype)
    newdocument.xmlVersion= document.xmlVersion
    refel= newdocument.documentElement
    for child in document.childNodes:
        if child.nodeType==child.ELEMENT_NODE:
            newdocument.replaceChild(
                newdocument.importNode(child, True), newdocument.documentElement
            )
            refel= None
        elif child.nodeType!=child.DOCUMENT_TYPE_NODE:
            newdocument.insertBefore(newdocument.importNode(child, True), refel)
    return newdocument
</snippet></ROW><ROW><id>1980799</id><snippet>&lt;table&gt;
{% for item in items %}
  &lt;tr&gt;
    &lt;td&gt;{% item.name %}&lt;/td&gt;
    {% for dday in days %}
    &lt;td&gt;
      {% ifequal dday item.day %}y{% else %}n{% endifequal %}
    &lt;/td&gt;
    {% endfor %}
  &lt;/tr&gt;
{% endfor %}
&lt;/table&gt;
</snippet></ROW><ROW><id>1980799</id><snippet>item.day</snippet></ROW><ROW><id>1980799</id><snippet>item['day']</snippet></ROW><ROW><id>1981025</id><snippet>pickle</snippet></ROW><ROW><id>1981025</id><snippet>cPickle</snippet></ROW><ROW><id>1981025</id><snippet>pickle</snippet></ROW><ROW><id>1981025</id><snippet>cPickle</snippet></ROW><ROW><id>1981025</id><snippet>pickle.py</snippet></ROW><ROW><id>1981025</id><snippet>import sys, pickle; sys.modules['cPickle']=pickle</snippet></ROW><ROW><id>1981148</id><snippet>im = Image.open("D:\\Python26\\PYTHON-PROGRAMME\\bild.jpg")
</snippet></ROW><ROW><id>1981279</id><snippet>__setattr__</snippet></ROW><ROW><id>1981279</id><snippet>______</snippet></ROW><ROW><id>1981360</id><snippet>from PIL import Image
im = Image.open("D:\\Python26\\PYTHON-PROGRAMME\\bild.jpg")
im.load()
im.show()
</snippet></ROW><ROW><id>1981360</id><snippet>if os.name == "nt":
    command = "start /wait %s &amp;&amp; del /f %s" % (file, file)
</snippet></ROW><ROW><id>1981360</id><snippet>if os.name == "nt":
    command = "%s" % file
</snippet></ROW><ROW><id>1981584</id><snippet>try, except</snippet></ROW><ROW><id>1981584</id><snippet>&gt;&gt;&gt; conn = sqlite3.connect('mydb')
&gt;&gt;&gt; conn.close()
&gt;&gt;&gt; try:
...   resultset = conn.execute("SELECT 1 FROM my_table LIMIT 1;")
... except sqlite3.ProgrammingError as e:
...   print e
Cannot operate on a closed database.
</snippet></ROW><ROW><id>1982169</id><snippet>f = open(r"temp.txt")
[[c for c in line] for line in f]
</snippet></ROW><ROW><id>1982479</id><snippet>python-ldap</snippet></ROW><ROW><id>1982525</id><snippet>params</snippet></ROW><ROW><id>1982525</id><snippet>params</snippet></ROW><ROW><id>1982525</id><snippet>reader = csv.reader(open('params.csv'), delimiter=',', skipinitialspace=True)
params = list(reader)
</snippet></ROW><ROW><id>1982729</id><snippet>/opt/local</snippet></ROW><ROW><id>1982729</id><snippet>PATH</snippet></ROW><ROW><id>1982729</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>1982729</id><snippet>/usr/bin</snippet></ROW><ROW><id>1982729</id><snippet>python</snippet></ROW><ROW><id>1982729</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>1982729</id><snippet>sudo port install python_select
sudo python_select
</snippet></ROW><ROW><id>1982729</id><snippet>env</snippet></ROW><ROW><id>1982729</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>1982864</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>1983157</id><snippet>re</snippet></ROW><ROW><id>1983157</id><snippet>findall()</snippet></ROW><ROW><id>1983157</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; p = re.compile('\$(.*?)\$')
&gt;&gt;&gt; s = "apple $banana$ coconut $delicious ethereal$ funkytown"
&gt;&gt;&gt; p.findall(s)
['banana', 'delicious ethereal']
</snippet></ROW><ROW><id>1983157</id><snippet>p</snippet></ROW><ROW><id>1983157</id><snippet>\$</snippet></ROW><ROW><id>1983157</id><snippet>(...?)</snippet></ROW><ROW><id>1983157</id><snippet>.</snippet></ROW><ROW><id>1983157</id><snippet>*</snippet></ROW><ROW><id>1983157</id><snippet>\$</snippet></ROW><ROW><id>1983211</id><snippet>dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
gobject.threads_init()
dbus.mainloop.glib.threads_init()    
DBUSMAINLOOP = gobject.MainLoop()

print 'Creating DBus Thread'
DBUSLOOPTHREAD = threading.Thread(name='glib_mainloop', target=DBUSMAINLOOP.run)
DBUSLOOPTHREAD.start()

print 'Starting REST'
cherrypy.config.update({ 'server.socket_host': Common.DBUS_SERVER_ADDR, 'server.socket_port': Common.DBUS_SERVER_PORT, })
cherrypy.quickstart(USBRest())
</snippet></ROW><ROW><id>1983219</id><snippet>html = urllib.urlopen('http://www.nytimes.com/2009/12/21/us/21storm.html').read()
soup = BeautifulSoup.BeautifulSoup(html)
texts = soup.findAll(text=True)

def visible(element):
    if element.parent.name in ['style', 'script', '[document]', 'head', 'title']:
        return False
    elif re.match('&lt;!--.*--&gt;', str(element)):
        return False
    return True

visible_texts = filter(visible, texts)
</snippet></ROW><ROW><id>1983281</id><snippet>.pyc</snippet></ROW><ROW><id>1983281</id><snippet>python -OO</snippet></ROW><ROW><id>1983281</id><snippet>-OO</snippet></ROW><ROW><id>1983281</id><snippet>-O</snippet></ROW><ROW><id>1983281</id><snippet>.pyo</snippet></ROW><ROW><id>1983281</id><snippet>.pyc</snippet></ROW><ROW><id>1983281</id><snippet>-O</snippet></ROW><ROW><id>1983281</id><snippet>assert</snippet></ROW><ROW><id>1983281</id><snippet>foo.py</snippet></ROW><ROW><id>1983281</id><snippet>"""This is the documentation for my module foo."""

def bar(x):
  """This is the documentation for my function foo.bar."""
  return x + 1
</snippet></ROW><ROW><id>1983281</id><snippet>$ python -c'import foo; print foo.bar(22); print foo.__doc__'
23
This is the documentation for my module foo.
$ ls -l foo.pyc
-rw-r--r--  1 aleax  eng  327 Dec 30 16:17 foo.pyc
$ python -O -c'import foo; print foo.bar(22); print foo.__doc__'
23
This is the documentation for my module foo.
$ ls -l foo.pyo
-rw-r--r--  1 aleax  eng  327 Dec 30 16:17 foo.pyo
$ python -OO -c'import foo; print foo.bar(22); print foo.__doc__'
23
This is the documentation for my module foo.
$ ls -l foo.pyo
-rw-r--r--  1 aleax  eng  327 Dec 30 16:17 foo.pyo
$ rm foo.pyo
$ python -OO -c'import foo; print foo.bar(22); print foo.__doc__'
23
None
$ ls -l foo.pyo
-rw-r--r--  1 aleax  eng  204 Dec 30 16:17 foo.pyo
</snippet></ROW><ROW><id>1983281</id><snippet>-O</snippet></ROW><ROW><id>1983281</id><snippet>.pyo</snippet></ROW><ROW><id>1983281</id><snippet>-OO</snippet></ROW><ROW><id>1983281</id><snippet>.pyo</snippet></ROW><ROW><id>1983281</id><snippet>.pyo</snippet></ROW><ROW><id>1983281</id><snippet>touch foo.py</snippet></ROW><ROW><id>1983281</id><snippet>.pyo</snippet></ROW><ROW><id>1983281</id><snippet>.__doc__</snippet></ROW><ROW><id>1983281</id><snippet>None</snippet></ROW><ROW><id>1983450</id><snippet>import cStringIO
import sys

def getPrint(thefun, *a, **k):
  savstdout = sys.stdout
  sys.stdout = cStringIO.StringIO()
  try:
    thefun(*a, **k)
  finally:
    v = sys.stdout.getvalue()
    sys.stdout = savstdout
  return v
</snippet></ROW><ROW><id>1983450</id><snippet>getPrint(funA)</snippet></ROW><ROW><id>1983450</id><snippet>getPrint(funA())</snippet></ROW><ROW><id>1983450</id><snippet>getPrint</snippet></ROW><ROW><id>1983450</id><snippet>getPrint</snippet></ROW><ROW><id>1983450</id><snippet>getPrint</snippet></ROW><ROW><id>1983567</id><snippet>iter()</snippet></ROW><ROW><id>1983567</id><snippet>c().next</snippet></ROW><ROW><id>1983567</id><snippet>c</snippet></ROW><ROW><id>1983567</id><snippet>def generator():
    yield 1
    yield 2
    yield 3
    yield -1

sequence = iter (generator().next, -1)
print sequence
for value in sequence:
    print value
</snippet></ROW><ROW><id>1983567</id><snippet>pax&gt; python prog1.py
    &lt;callable-iterator object at 0xb77dd6ac&gt;
    1
    2
    3
pax&gt; _
</snippet></ROW><ROW><id>1983573</id><snippet>flush_all()</snippet></ROW><ROW><id>1983573</id><snippet>  import sys
  sys.path
</snippet></ROW><ROW><id>1983573</id><snippet> import os
 os.environ["CURRENT_VERSION_ID"]
</snippet></ROW><ROW><id>1983801</id><snippet>create_controls
    create_left_panel
        create_grid
    create_right_panel
</snippet></ROW><ROW><id>1983967</id><snippet>def transpose(grid):
    return zip(*grid)

def removeBlankRows(grid):
    return [list(row) for row in grid if any(row)]

print removeBlankRows(transpose(removeBlankRows(transpose(grid))))
</snippet></ROW><ROW><id>1983967</id><snippet>[[{'some': 'thing'}, None, None],
 [None, None, {'something': 'else'}],
 [None, {'another': 'thing'}, None]]
</snippet></ROW><ROW><id>1983967</id><snippet>zip</snippet></ROW><ROW><id>1983967</id><snippet>removeBlankRows</snippet></ROW><ROW><id>1983967</id><snippet>def removeBlankRows(grid):
    return [list(row) for row in grid if any(x is not None for x in row)]
</snippet></ROW><ROW><id>1984121</id><snippet>class A(some_function()):
  def f(self):
    self.member = 42
    self.method()
</snippet></ROW><ROW><id>1984121</id><snippet>class B(object):
  pass

print B()
# &lt;__main__.B object at 0xb7e4082c&gt;

def B_init(self):
  self.answer = 42
def B_str(self):
  return "&lt;The answer is %s.&gt;" % self.answer
# notice these functions require no knowledge of the actual class
# how hard are they to read and realize that "members" are used?

B.__init__ = B_init
B.__str__ = B_str

print B()
# &lt;The answer is 42.&gt;
</snippet></ROW><ROW><id>1984177</id><snippet>__repr__</snippet></ROW><ROW><id>1984177</id><snippet>&gt;&gt;&gt; class Point:
...   def __init__(self, x, y):
...     self.x, self.y = x, y
...   def __repr__(self):
...     return 'Point(x=%s, y=%s)' % (self.x, self.y)
&gt;&gt;&gt; p = Point(1, 2)
&gt;&gt;&gt; p
Point(x=1, y=2)
</snippet></ROW><ROW><id>1984208</id><snippet>next()</snippet></ROW><ROW><id>1984208</id><snippet>__iter__</snippet></ROW><ROW><id>1984208</id><snippet>for i in b:
</snippet></ROW><ROW><id>1984208</id><snippet>a</snippet></ROW><ROW><id>1984208</id><snippet>iter(self.w)</snippet></ROW><ROW><id>1984208</id><snippet>next()</snippet></ROW><ROW><id>1984287</id><snippet>shutdown</snippet></ROW><ROW><id>1984287</id><snippet>GET</snippet></ROW><ROW><id>1984346</id><snippet>__enter__</snippet></ROW><ROW><id>1984346</id><snippet>__exit__</snippet></ROW><ROW><id>1984346</id><snippet>with</snippet></ROW><ROW><id>1984346</id><snippet>try-finally</snippet></ROW><ROW><id>1984346</id><snippet>class DatabaseConnection(object):

    def __enter__(self):
        # make a database connection and return it
        ...
        return self.dbconn

    def __exit__(self, type, value, tb):
        # make sure the dbconnection gets closed
        self.dbconn.close()
        ...
</snippet></ROW><ROW><id>1984346</id><snippet>with</snippet></ROW><ROW><id>1984346</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>1984346</id><snippet>with DatabaseConnection() as mydbconn:
    # do stuff
</snippet></ROW><ROW><id>1984517</id><snippet>def make_preview(text, fontfile, imagefile, fontsize=30):
    p = subprocess.call(['convert', '-font', fontfile, '-background', 
        'transparent', '-gravity', 'center', '-size', '1500x300',
        '-pointsize', str(fontsize),  '-trim', '+repage', 'label:%s' % text, image_file]) 
    return p==0 
</snippet></ROW><ROW><id>1984740</id><snippet>*firefox</snippet></ROW><ROW><id>1984787</id><snippet>write()</snippet></ROW><ROW><id>1984787</id><snippet>write()</snippet></ROW><ROW><id>1984855</id><snippet># Start zeya
#

description     "Start Zeya music server"

start on startup

task
exec python /home/r00t/code-hacking/serve-music/zeya/src/zeya/zeya.py
--path=/home/r00t/Music
</snippet></ROW><ROW><id>1984855</id><snippet>initctl status zeya
initctl stop zeya
</snippet></ROW><ROW><id>1985118</id><snippet>Customer.objects.annotate(total=Sum('sale__total'))
</snippet></ROW><ROW><id>1985118</id><snippet>class Customer(models.Model):
    def __unicode__(self):
        return self.name
    name = models.CharField(max_length=200)

    def total_sale(self):
        total = 0
        for s in self.sale_set:
           total += s.total
        return total
</snippet></ROW><ROW><id>1985437</id><snippet>im= im.convert('RGB')</snippet></ROW><ROW><id>1985437</id><snippet>split</snippet></ROW><ROW><id>1985464</id><snippet>req = google.appengine.ext.webapp.Request(dict(os.environ))
</snippet></ROW><ROW><id>1985511</id><snippet>allow_reuse_address</snippet></ROW><ROW><id>1985511</id><snippet>class TestServer(SocketServer.TCPServer):
    allow_reuse_address = True

...
httpd = TestServer(("", PORT), handler)
</snippet></ROW><ROW><id>1985820</id><snippet>__call__</snippet></ROW><ROW><id>1985820</id><snippet>func_xxx</snippet></ROW><ROW><id>1985820</id><snippet>func_code</snippet></ROW><ROW><id>1986014</id><snippet>0x00</snippet></ROW><ROW><id>1986020</id><snippet>from matplotlib import pyplot
import pylab
from mpl_toolkits.mplot3d import Axes3D
import random


fig = pylab.figure()
ax = Axes3D(fig)

sequence_containing_x_vals = range(0,100)
sequence_containing_y_vals = range(0,100)
sequence_containing_z_vals = range(0,100)

random.shuffle(sequence_containing_x_vals)
random.shuffle(sequence_containing_y_vals)
random.shuffle(sequence_containing_z_vals)

ax.scatter(sequence_containing_x_vals, sequence_containing_y_vals, sequence_containing_z_vals)
pyplot.show()
</snippet></ROW><ROW><id>1986046</id><snippet>sys.getsizeof()</snippet></ROW><ROW><id>1986046</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof(1)  # integer
12
&gt;&gt;&gt; sys.getsizeof([]) # empty list
36
&gt;&gt;&gt; sys.getsizeof(()) # empty tuple
28
&gt;&gt;&gt; sys.getsizeof((1,))  # tuple with one element
32
</snippet></ROW><ROW><id>1986046</id><snippet>17*(12+4)+28</snippet></ROW><ROW><id>1986046</id><snippet>36+N*(4+300)</snippet></ROW><ROW><id>1986046</id><snippet>257 is not 257+0</snippet></ROW><ROW><id>1986151</id><snippet>[:punct:]</snippet></ROW><ROW><id>1986151</id><snippet>&gt;&gt;&gt; import string, re
&gt;&gt;&gt; pat = r'\b(([\w-]+://?|www[.])[^\s()&lt;&gt;]+(?:\([\w\d]+\)|([^%s\s]|/)))'
&gt;&gt;&gt; pat = pat % re.sub(r'([-\\\]])', r'\\\1', string.punctuation)
</snippet></ROW><ROW><id>1986151</id><snippet>re.sub()</snippet></ROW><ROW><id>1986151</id><snippet>&gt;&gt;&gt; pat = pat % re.escape(string.punctuation)
</snippet></ROW><ROW><id>1986390</id><snippet>Asset.__subclasses__()</snippet></ROW><ROW><id>1986390</id><snippet>Asset</snippet></ROW><ROW><id>1986390</id><snippet>def descendants(aclass):
  directones = aclass.__subclasses__()
  if not directones: return
  for c in directones:
    yield c
    for x in descendants(c): yield x
</snippet></ROW><ROW><id>1986390</id><snippet>Asset</snippet></ROW><ROW><id>1986776</id><snippet>sign()</snippet></ROW><ROW><id>1986776</id><snippet>cmp(x,0)</snippet></ROW><ROW><id>1986776</id><snippet>copysign(x,y):
Return x with the sign of y.
</snippet></ROW><ROW><id>1986776</id><snippet>copysign</snippet></ROW><ROW><id>1986776</id><snippet>sign</snippet></ROW><ROW><id>1986776</id><snippet>copysign</snippet></ROW><ROW><id>1986776</id><snippet>sign</snippet></ROW><ROW><id>1986776</id><snippet>copysign</snippet></ROW><ROW><id>1986776</id><snippet>&gt;&gt;&gt; math.copysign(1, -4)
-1.0
&gt;&gt;&gt; math.copysign(1, 3)
1.0
</snippet></ROW><ROW><id>1986776</id><snippet>sign</snippet></ROW><ROW><id>1986776</id><snippet>&gt;&gt;&gt; sign = functools.partial(math.copysign, 1) # either of these
&gt;&gt;&gt; sign = lambda x: math.copysign(1, x) # two will work
&gt;&gt;&gt; sign(-4)
-1.0
&gt;&gt;&gt; sign(3)
1.0
</snippet></ROW><ROW><id>1986776</id><snippet>copysign</snippet></ROW><ROW><id>1986776</id><snippet>s = sign(a)
b = b * s
</snippet></ROW><ROW><id>1986776</id><snippet>b = copysign(b, a)
</snippet></ROW><ROW><id>1986776</id><snippet>cmp</snippet></ROW><ROW><id>1986776</id><snippet>sign</snippet></ROW><ROW><id>1986776</id><snippet>__cmp__</snippet></ROW><ROW><id>1986776</id><snippet>cmp</snippet></ROW><ROW><id>1986776</id><snippet>sign</snippet></ROW><ROW><id>1986776</id><snippet>copysign</snippet></ROW><ROW><id>1986776</id><snippet>sign</snippet></ROW><ROW><id>1986776</id><snippet>copysign</snippet></ROW><ROW><id>1987484</id><snippet>logging.getLogger().getEffectiveLevel()
</snippet></ROW><ROW><id>1987484</id><snippet>logging.getLogger()</snippet></ROW><ROW><id>1987526</id><snippet>post</snippet></ROW><ROW><id>1987526</id><snippet>blog</snippet></ROW><ROW><id>1987526</id><snippet>@permission_required('blog.delete_post')
</snippet></ROW><ROW><id>1987629</id><snippet>sys.stderr</snippet></ROW><ROW><id>1987629</id><snippet>print</snippet></ROW><ROW><id>1987629</id><snippet>print("Error in atexit._run_exitfuncs:", file=sys.stderr)
</snippet></ROW><ROW><id>1987725</id><snippet>&gt;&gt;&gt; class a(object):
...     b = 'bbbb'
...     def __init__(self):
...         self.c = 'cccc'
...
&gt;&gt;&gt; a1=a()
&gt;&gt;&gt; a2=a()
&gt;&gt;&gt; a1.b
'bbbb'
&gt;&gt;&gt; a2.b
'bbbb'
&gt;&gt;&gt; a1.c='dddd'
&gt;&gt;&gt; a1.c
'dddd'
&gt;&gt;&gt; a2.c
'cccc'
&gt;&gt;&gt; a.b= 'common'
&gt;&gt;&gt; a1.b
'common'
&gt;&gt;&gt; a2.b
'common'
</snippet></ROW><ROW><id>1987732</id><snippet>FindFilesW()</snippet></ROW><ROW><id>1987732</id><snippet>DIR_EXCLUDES = set(['.', '..'])
MASK = win32con.FILE_ATTRIBUTE_DIRECTORY | win32con.FILE_ATTRIBUTE_SYSTEM
REQUIRED = win32con.FILE_ATTRIBUTE_DIRECTORY
FindFilesW = win32file.FindFilesW

def get_dir_size(path):
    total_size = 0
    try:
        items = FindFilesW(path + r'\*')
    except pywintypes.error, ex:
        return total_size

    for item in items:
        total_size += item[5]
        if (item[0] &amp; MASK == REQUIRED):
            name = item[8]
            if name not in DIR_EXCLUDES:
                total_size += get_dir_size(path + '\\' + name)

    return total_size
</snippet></ROW><ROW><id>1987756</id><snippet>db._get_cxn()</snippet></ROW><ROW><id>1987756</id><snippet>db</snippet></ROW><ROW><id>1987756</id><snippet>_</snippet></ROW><ROW><id>1987756</id><snippet>MySQL has gone away</snippet></ROW><ROW><id>1987756</id><snippet>try...except OperationalError...try again</snippet></ROW><ROW><id>1988024</id><snippet>import numpy
numpy.set_printoptions(threshold=numpy.nan)
</snippet></ROW><ROW><id>1988024</id><snippet>numpy.set_printoptions(threshold='nan')
</snippet></ROW><ROW><id>1988131</id><snippet>setup_code = """
  from PerformanceTests.Vectors import NaiveVector
  left = NaiveVector([1,0,0])
  right = NaiveVector([0,1,0])
"""
</snippet></ROW><ROW><id>1988131</id><snippet>timeit</snippet></ROW><ROW><id>1988131</id><snippet>def test():
    "Stupid test function"
    L = []
    for i in range(100):
        L.append(i)

if __name__=='__main__':
    from timeit import Timer
    t = Timer("test()", "from __main__ import test")
    print t.timeit()
</snippet></ROW><ROW><id>1988145</id><snippet>numpy</snippet></ROW><ROW><id>1988145</id><snippet>numpy</snippet></ROW><ROW><id>1988608</id><snippet>mydatetime = datetime.datetime(d.year, d.month, d.day)
</snippet></ROW><ROW><id>1988608</id><snippet>mydatetime = datetime.combine(d, datetime.time())
</snippet></ROW><ROW><id>1988608</id><snippet>mydatetime = datetime.datetime.fromordinal(d.toordinal())
</snippet></ROW><ROW><id>1988648</id><snippet>import admin.RunStoppedException
</snippet></ROW><ROW><id>1988648</id><snippet>RunStoppedException</snippet></ROW><ROW><id>1988648</id><snippet>admin</snippet></ROW><ROW><id>1988648</id><snippet>mypackage.admin</snippet></ROW><ROW><id>1988648</id><snippet>import admin.RunStoppedException</snippet></ROW><ROW><id>1988648</id><snippet>import RunStoppedException</snippet></ROW><ROW><id>1988648</id><snippet>RunStoppedException</snippet></ROW><ROW><id>1988648</id><snippet>admin.RunStoppedException</snippet></ROW><ROW><id>1988648</id><snippet>admin</snippet></ROW><ROW><id>1988648</id><snippet>except</snippet></ROW><ROW><id>1988648</id><snippet>import mypackage.admin.RunStoppedException</snippet></ROW><ROW><id>1988648</id><snippet>except RunStoppedException:
</snippet></ROW><ROW><id>1988648</id><snippet>mypackage.exceptions</snippet></ROW><ROW><id>1988648</id><snippet>RunStoppedException</snippet></ROW><ROW><id>1988686</id><snippet>/usr/lib/pymodules/python2.5/sphinx/environment.py:from docutils.parsers.rst.languages import en as english
</snippet></ROW><ROW><id>1988961</id><snippet>    textEdit = QtGui.QTextEdit(self.page1)
    textEdit.setDocument(document)
    layout = QtGui.QVBoxLayout(self.page1)
    layout.addWidget(textEdit)
</snippet></ROW><ROW><id>1988961</id><snippet>def toolbox_page2(self):
    self.page2 = QtGui.QWidget()
    self.page2.setGeometry(QtCore.QRect(0, 0, 471, 145))

    label = QtGui.QLabel(self.page2)
    label.setText("Title - Build a Report : page 2")
    label.setStyleSheet("font: 10pt 'Helvetica'; color: rgb(168, 34, 3)")
    label.setGeometry(QtCore.QRect(QtCore.QPoint(50, 50), label.sizeHint()))
</snippet></ROW><ROW><id>1989025</id><snippet>@classmathod</snippet></ROW><ROW><id>1989025</id><snippet>@staticmethod</snippet></ROW><ROW><id>1989025</id><snippet>from decorator import decorator

@decorator
def print_function_name(function, *args):
    print '%s was called.' % function.func_name
    return function(*args)

class My_class(object):
    @classmethod
    @print_function_name
    def get_dir(cls):
        return dir(cls)
    @staticmethod
    @print_function_name
    def get_a():
        return 'a'
</snippet></ROW><ROW><id>1989096</id><snippet>sys.path</snippet></ROW><ROW><id>1989096</id><snippet>__init__.py</snippet></ROW><ROW><id>1989096</id><snippet>$ mkdir adir
$ echo 'print "hello world"' &gt; adir/helo.py
$ python -c 'import adir.helo'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
ImportError: No module named adir.helo
$ touch adir/__init__.py
$ python -c 'import adir.helo'
hello world
</snippet></ROW><ROW><id>1989096</id><snippet>adir</snippet></ROW><ROW><id>1989096</id><snippet>helo.py</snippet></ROW><ROW><id>1989096</id><snippet>import adir.helo</snippet></ROW><ROW><id>1989096</id><snippet>__init__.py</snippet></ROW><ROW><id>1989096</id><snippet>adir</snippet></ROW><ROW><id>1989096</id><snippet>adir</snippet></ROW><ROW><id>1989104</id><snippet>tzset</snippet></ROW><ROW><id>1989104</id><snippet>time</snippet></ROW><ROW><id>1989104</id><snippet>hasattr</snippet></ROW><ROW><id>1989399</id><snippet>$ rmadison python2.6
 python2.6 |    2.6.2-2 |  experimental | source, ia64
 python2.6 |    2.6.4-1 |  experimental | source, alpha, amd64, armel, hppa, \
                                          i386, powerpc, s390, sparc

$
</snippet></ROW><ROW><id>1989434</id><snippet>array.array</snippet></ROW><ROW><id>1989434</id><snippet>fromfile</snippet></ROW><ROW><id>1989434</id><snippet>tofile</snippet></ROW><ROW><id>1989434</id><snippet>import os

# no more than 100 million items in memory at a time
MAXINMEM = int(1e8)

class bigarray(object):
  def __init__(self):
    self.f = open('afile.dat', 'w+')
    self.a = array.array('L')
  def append(self, n):
    self.a.append(n)
    if len(self.a) &gt; MAXINMEM:
      self.a.tofile(self.f)
      del self.a[:]
  def pop(self):
    if not len(self.a):
      try: self.f.seek(-self.a.itemsize * MAXINMEM, os.SEEK_END)
      except IOError: return self.a.pop()  # ensure normal IndexError &amp;c
      try: self.a.fromfile(self.f, MAXINMEM)
      except EOFError: pass
      self.f.seek(-self.a.itemsize * MAXINMEM, os.SEEK_END)
      self.f.truncate()
    return self.a.pop()
</snippet></ROW><ROW><id>1989434</id><snippet>extend</snippet></ROW><ROW><id>1989434</id><snippet>pop</snippet></ROW><ROW><id>1989434</id><snippet>append</snippet></ROW><ROW><id>1989531</id><snippet>currrentRow=int(line['RID'])
</snippet></ROW><ROW><id>1989531</id><snippet>r</snippet></ROW><ROW><id>1989531</id><snippet>currrentRow</snippet></ROW><ROW><id>1989848</id><snippet>def c(*x,**y):
    print(x,y)
def a(*x,**y):
    print(x)
    def b(*x1,**y1):
        c(*(x+x1),**dict(y,**y1))
    return b

a(1,2,3,a=1,b=2)(4,5,6,c='222',d='aaa')
</snippet></ROW><ROW><id>1989848</id><snippet>&gt;&gt;&gt; ================================ RESTART ================================
&gt;&gt;&gt; 
(1, 2, 3)
(1, 2, 3, 4, 5, 6) {'a': 1, 'c': '222', 'b': 2, 'd': 'aaa'}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>1990050</id><snippet>struct_as_record=True</snippet></ROW><ROW><id>1990050</id><snippet>G.shape</snippet></ROW><ROW><id>1990050</id><snippet>G = x['G'][0,0]</snippet></ROW><ROW><id>1990050</id><snippet>G.Inp</snippet></ROW><ROW><id>1990177</id><snippet>dict</snippet></ROW><ROW><id>1990177</id><snippet>&gt;&gt;&gt; class m(dict):
...   def __missing__(self, key): return key + key
... 
&gt;&gt;&gt; a=m()
&gt;&gt;&gt; a['ciao']
'ciaociao'
</snippet></ROW><ROW><id>1990177</id><snippet>__missing__</snippet></ROW><ROW><id>1990177</id><snippet>dict</snippet></ROW><ROW><id>1990177</id><snippet>UserDict</snippet></ROW><ROW><id>1990177</id><snippet>__missing__</snippet></ROW><ROW><id>1990177</id><snippet>d[key]</snippet></ROW><ROW><id>1990177</id><snippet>d[key]</snippet></ROW><ROW><id>1990177</id><snippet>__missing__(key)</snippet></ROW><ROW><id>1990177</id><snippet>__missing__()</snippet></ROW><ROW><id>1990177</id><snippet>__missing__()</snippet></ROW><ROW><id>1990177</id><snippet>KeyError</snippet></ROW><ROW><id>1990177</id><snippet>__missing__()</snippet></ROW><ROW><id>1990177</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>1990355</id><snippet>sys.exc_info</snippet></ROW><ROW><id>1990378</id><snippet>'a'</snippet></ROW><ROW><id>1990667</id><snippet>except Exception, e: ...str(e)...</snippet></ROW><ROW><id>1990785</id><snippet>complex</snippet></ROW><ROW><id>1990785</id><snippet>complex</snippet></ROW><ROW><id>1990818</id><snippet>pop</snippet></ROW><ROW><id>1990818</id><snippet>self.data</snippet></ROW><ROW><id>1990818</id><snippet>{'a':'aaa','b':'bbb','c':'ccc'}</snippet></ROW><ROW><id>1990818</id><snippet>default</snippet></ROW><ROW><id>1990818</id><snippet>pop</snippet></ROW><ROW><id>1990818</id><snippet>key</snippet></ROW><ROW><id>1990818</id><snippet>pop</snippet></ROW><ROW><id>1990818</id><snippet>key</snippet></ROW><ROW><id>1990818</id><snippet>print b.pop('a',{'b':'bbb'})</snippet></ROW><ROW><id>1990818</id><snippet>'a'</snippet></ROW><ROW><id>1990818</id><snippet>b.data</snippet></ROW><ROW><id>1990818</id><snippet>b=a()
print b.pop('a',{'b':'bbb'})
print b.pop('a',{'b':'bbb'})
print b.data
</snippet></ROW><ROW><id>1990818</id><snippet>pop</snippet></ROW><ROW><id>1990818</id><snippet>'a'</snippet></ROW><ROW><id>1990818</id><snippet>pop</snippet></ROW><ROW><id>1990818</id><snippet>default</snippet></ROW><ROW><id>1990818</id><snippet>'a'</snippet></ROW><ROW><id>1990818</id><snippet>b.data</snippet></ROW><ROW><id>1990856</id><snippet>keys</snippet></ROW><ROW><id>1990856</id><snippet>a(dict)</snippet></ROW><ROW><id>1990856</id><snippet>a.__dict__.keys()</snippet></ROW><ROW><id>1990856</id><snippet> # Mixin defining all dictionary methods for classes that already have
 # a minimum dictionary interface including getitem, setitem, delitem,
 # and keys
</snippet></ROW><ROW><id>1990856</id><snippet>DictMixin</snippet></ROW><ROW><id>1990856</id><snippet>UserDict</snippet></ROW><ROW><id>1990856</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>1990856</id><snippet>class A(object):
    def __init__(self):
        self.myinstatt1 = 'one'
        self.myinstatt2 = 'two'
    def mymethod(self):
        pass

a = A()
for attr, value in a.__dict__.iteritems():
    print attr, value
</snippet></ROW><ROW><id>1990904</id><snippet>.feed()</snippet></ROW><ROW><id>1990904</id><snippet>self.reset()</snippet></ROW><ROW><id>1990992</id><snippet>import sys
from PIL import Image, ImageDraw

class Region():
    def __init__(self, x, y):
        self._pixels = [(x, y)]
        self._min_x = x
        self._max_x = x
        self._min_y = y
        self._max_y = y

    def add(self, x, y):
        self._pixels.append((x, y))
        self._min_x = min(self._min_x, x)
        self._max_x = max(self._max_x, x)
        self._min_y = min(self._min_y, y)
        self._max_y = max(self._max_y, y)

    def box(self):
        return [(self._min_x, self._min_y), (self._max_x, self._max_y)]

def find_regions(im):
    width, height  = im.size
    regions = {}
    pixel_region = [[0 for y in range(height)] for x in range(width)]
    equivalences = {}
    n_regions = 0
    #first pass. find regions.
    for x in xrange(width):
        for y in xrange(height):
            #look for a black pixel
            if im.getpixel((x, y)) == (0, 0, 0, 255): #BLACK
                # get the region number from north or west
                # or create new region
                region_n = pixel_region[x-1][y] if x &gt; 0 else 0
                region_w = pixel_region[x][y-1] if y &gt; 0 else 0

                max_region = max(region_n, region_w)

                if max_region &gt; 0:
                    #a neighbour already has a region
                    #new region is the smallest &gt; 0
                    new_region = min(filter(lambda i: i &gt; 0, (region_n, region_w)))
                    #update equivalences
                    if max_region &gt; new_region:
                        if max_region in equivalences:
                            equivalences[max_region].add(new_region)
                        else:
                            equivalences[max_region] = set((new_region, ))
                else:
                    n_regions += 1
                    new_region = n_regions

                pixel_region[x][y] = new_region

    #Scan image again, assigning all equivalent regions the same region value.
    for x in xrange(width):
        for y in xrange(height):
                r = pixel_region[x][y]
                if r &gt; 0:
                    while r in equivalences:
                        r = min(equivalences[r])

                    if not r in regions:
                        regions[r] = Region(x, y)
                    else:
                        regions[r].add(x, y)

    return list(regions.itervalues())

def main():
    im = Image.open(r"c:\users\personal\py\ocr\test.png")
    regions = find_regions(im)
    draw = ImageDraw.Draw(im)
    for r in regions:
        draw.rectangle(r.box(), outline=(255, 0, 0))
    del draw 
    #im.show()
    output = file("output.png", "wb")
    im.save(output)
    output.close()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>1991047</id><snippet>DateProperty</snippet></ROW><ROW><id>1991128</id><snippet>import webbrowser
webbrowser.open('/path/to/help/file.html')
</snippet></ROW><ROW><id>1991910</id><snippet>src = """&lt;p&gt;&lt;i&gt;p&lt;/i&gt;&lt;sub&gt;0&lt;/sub&gt; = (&lt;i&gt;m&lt;/i&gt;&lt;sup&gt;3&lt;/sup&gt;+(2&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;+&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt;) """ \
      """&lt;i&gt;m&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;+(&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;+2&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt; &lt;i&gt;l&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;+""" \
      """&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;) &lt;i&gt;m&lt;/i&gt;) /(&lt;i&gt;m&lt;/i&gt;&lt;sup&gt;3&lt;/sup&gt;+(3&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;+""" \
      """2&lt;i&gt;l&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt;) ) }.&lt;/p&gt;"""

from pyparsing import makeHTMLTags, anyOpenTag, anyCloseTag, Suppress, replaceWith

# set up tag matching for &lt;sub&gt; and &lt;sup&gt; tags
SUB,endSUB = makeHTMLTags("sub")
SUP,endSUP = makeHTMLTags("sup")

# all other tags will be suppressed from the output
ANY,endANY = map(Suppress,(anyOpenTag,anyCloseTag))

SUB.setParseAction(replaceWith("_{"))
SUP.setParseAction(replaceWith("^{"))
endSUB.setParseAction(replaceWith("}"))
endSUP.setParseAction(replaceWith("}"))

transformer = (SUB | endSUB | SUP | endSUP | ANY | endANY)

# now use the transformer to apply these transforms to the input string
print transformer.transformString(src)
</snippet></ROW><ROW><id>1991910</id><snippet>p_{0} = (m^{3}+(2l_{2}+l_{1}) m^{2}+(l_{2}^{2}+2l_{1} l_{2}+l_{1}^{2}) m) /(m^{3}+(3l_{2}+2l_{1}) ) }.
</snippet></ROW><ROW><id>1991915</id><snippet>    for t in list:
        fileo.write(t + "\n")
    list = []
    fileo.close()
    fileo = open(OutFile, 'a')
    k = 0
</snippet></ROW><ROW><id>1991915</id><snippet>list</snippet></ROW><ROW><id>1991915</id><snippet>list</snippet></ROW><ROW><id>1992020</id><snippet>import gui
ui = None

def start():
  selected = "web"
  log("going to start gui " + selected)
  global ui
  __import__("gui.%s" % selected) # if you're importing a submodule that
                                  # may not have been imported yet
  ui = getattr(gui, selected)
  ui.start()
</snippet></ROW><ROW><id>1992037</id><snippet>ValueError</snippet></ROW><ROW><id>1992370</id><snippet>def loadComboCity(self,customerName):
    """query results cityList into self.mydb.matrix"""
    queryName="citylist_thisCustomer"
    self.mysqlAPI(queryName,customerName)

    # Clear the previous items in the combobox (if any)
    self.comboCity.clear()

    id=0
    for row in self.mydb.matrix:
        cityname=self.mydb.matrix[id][0]
        self.addcomboCity(id,cityname) 
        id=id+1
    del self.mydb.matrix[:]
</snippet></ROW><ROW><id>1992773</id><snippet>:python import sys
:python print sys.path
:python sys.path.append(...)
... etc
</snippet></ROW><ROW><id>1992783</id><snippet>raise_</snippet></ROW><ROW><id>1992807</id><snippet>itertools.groupby</snippet></ROW><ROW><id>1992807</id><snippet>import itertools, operator

data = [
{'LTYPE': 'N', 'RID': '1', 'NAME': 'Jason Smith'},
{'LTYPE': 'A', 'RID': '2', 'NAME': 'DA'},
{'LTYPE': 'A', 'RID': '3', 'NAME': 'B'},
{'LTYPE': 'N', 'RID': '4', 'NAME': 'John Smith'},
{'LTYPE': 'A', 'RID': '5', 'NAME': 'BC'},
{'LTYPE': 'A', 'RID': '6', 'NAME': 'CB'},
{'LTYPE': 'A', 'RID': '7', 'NAME': 'DB'},
{'LTYPE': 'A', 'RID': '8', 'NAME': 'DA'},
]

for k, g in itertools.groupby(data, operator.itemgetter('LTYPE')):
  if k=='N':
    person_name_record = next(g)
  else:
    attribute_records = list(g)
    person_attributes = ' '.join(r['NAME'] for r in attribute_records)
    addfields = dict(PERSON_ATTRIBUTES=person_attributes,
                     PERSON_NAME=person_name_record['NAME'])
    person_name_record.update(addfields)
    for r in attribute_records: r.update(addfields)

for r in data: print r
</snippet></ROW><ROW><id>1993588</id><snippet>&lt;form action="indexPostHandler" method="post"&gt;
    &lt;p&gt;Enter a value:&lt;/p&gt;
    &lt;input type="text" name="val" value=""/&gt;
    &lt;p&gt;&lt;input type="submit" value="Login"/&gt;&lt;/p&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>1993588</id><snippet>class Root:
    # create form here
    def indexPostHandler(self, val=None):
        # do something with val here
        ...
</snippet></ROW><ROW><id>1993596</id><snippet>import math

for i in range(n):
  ax = ay = az = 0.0
  for j in range(n):
    dx=x[j]-x[i]
    dy=y[j]-y[i]
    dz=z[j]-z[i]
    invr = 1.0/math.sqrt(dx*dx + dy*dy + dz*dz + eps)
    f=m[j]*invr**3
    ax += f*dx  # accumulate the acceleration from gravitational attraction
    ay += f*dy
    az += f*dz
  xnew[i] = x[i] + dt*vx[i] + 0.5*dt*dt*ax
  ynew[i] = y[i] + dt*vy[i] + 0.5*dt*dt*ay
  znew[i] = z[i] + dt*vz[i] + 0.5*dt*dt*az
  vx[i] += dt*ax  # update velocity of particle "i"
  vy[i] += dt*ay
  vz[i] += dt*az
</snippet></ROW><ROW><id>1993596</id><snippet>n</snippet></ROW><ROW><id>1993611</id><snippet>def index(self, var=None, **params)</snippet></ROW><ROW><id>1993611</id><snippet>def index(self, **params)</snippet></ROW><ROW><id>1993611</id><snippet>class test:
    def index(self, *args):
        pass
</snippet></ROW><ROW><id>1993611</id><snippet>class test:
    def index(self, var=None, *args):
        pass
</snippet></ROW><ROW><id>1993664</id><snippet>os</snippet></ROW><ROW><id>1993664</id><snippet>_nt</snippet></ROW><ROW><id>1993664</id><snippet>_posix</snippet></ROW><ROW><id>1993664</id><snippet>environ</snippet></ROW><ROW><id>1993664</id><snippet>except</snippet></ROW><ROW><id>1993664</id><snippet>os.py</snippet></ROW><ROW><id>1993664</id><snippet>os.environ</snippet></ROW><ROW><id>1993718</id><snippet>defaultdict</snippet></ROW><ROW><id>1993718</id><snippet>dict</snippet></ROW><ROW><id>1993718</id><snippet>dict</snippet></ROW><ROW><id>1993718</id><snippet>dv = list()
# arbitrary sequence of numbers
seq = [2,4,5,2,4,6,3,8,9,3,7,2,47,2]

# dictionary counting number of occurances
seqDic = { }

for i in seq:
  if i in seqDic:
    seqDic[i] += 1
  else:
    dv.append(i)
    seqDic[i] = 1
</snippet></ROW><ROW><id>1993718</id><snippet>if i in seqDic</snippet></ROW><ROW><id>1993718</id><snippet>dv</snippet></ROW><ROW><id>1993718</id><snippet>seqDic</snippet></ROW><ROW><id>1993718</id><snippet>for i in seq:
  seqDic[i] = 1 + seqDic.get(i, 0)
</snippet></ROW><ROW><id>1993718</id><snippet>get</snippet></ROW><ROW><id>1993718</id><snippet>dict</snippet></ROW><ROW><id>1993718</id><snippet>dv</snippet></ROW><ROW><id>1993718</id><snippet>for i in seq:
  seqDic[i] = 1 + seqDic.get(i, 0)
  if seqDic[i] == 1: dv.append(i)
</snippet></ROW><ROW><id>1993718</id><snippet>dv</snippet></ROW><ROW><id>1993718</id><snippet>dv</snippet></ROW><ROW><id>1993718</id><snippet>seq</snippet></ROW><ROW><id>1993718</id><snippet>dv = seqDic.keys()
</snippet></ROW><ROW><id>1993718</id><snippet>.keys</snippet></ROW><ROW><id>1993718</id><snippet>dv = list(seqDic)
</snippet></ROW><ROW><id>1993718</id><snippet>dv</snippet></ROW><ROW><id>1993718</id><snippet>seqDic = dict.fromkeys(seq, 0)
for i in seq: seqDic[i] += 1
dv = list(seqDic)
</snippet></ROW><ROW><id>1993718</id><snippet>fromkeys</snippet></ROW><ROW><id>1993718</id><snippet>0</snippet></ROW><ROW><id>1993718</id><snippet>.get</snippet></ROW><ROW><id>1993732</id><snippet>myfun(*tuple)</snippet></ROW><ROW><id>1993732</id><snippet>tuple</snippet></ROW><ROW><id>1993732</id><snippet>list</snippet></ROW><ROW><id>1993732</id><snippet>file</snippet></ROW><ROW><id>1993732</id><snippet>set</snippet></ROW><ROW><id>1993848</id><snippet>def somefunction(keyFunction, values):
    return dict((keyFunction(v), v) for v in values)

print somefunction(lambda a: a[0], ["hello", "world"])
</snippet></ROW><ROW><id>1993848</id><snippet>{'h': 'hello', 'w': 'world'}
</snippet></ROW><ROW><id>1993894</id><snippet>def dobin(n):
  digs = []
  s = ''
  if n&lt;0:
    s = '-'
    n = -n
  while True:
    digs.append(str(n % 2))
    n /= 2
    if not n: break
  if s: digs.append(s)
  digs.reverse()
  return ''.join(digs)
</snippet></ROW><ROW><id>1993930</id><snippet>def get_text_blocks(filename):
    import itertools
    with open(filename,'r') as f:
        groups = itertools.groupby(f, lambda line:line.startswith('-- -'))
        return [''.join(lines) for is_separator, lines in groups if not is_separator]
</snippet></ROW><ROW><id>1993930</id><snippet>def get_text_blocks(filename):
    import re
    seperator = re.compile('^-- -.*', re.M)
    with open(filename,'r') as f:
        return re.split(seperator, f.read())
</snippet></ROW><ROW><id>1993970</id><snippet>
&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;here is some text to bold&lt;/p&gt;
&lt;p&gt;and some more&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>1993970</id><snippet>
&lt;?xml version="1.0"?&gt;
&lt;html&gt;
&lt;head/&gt;
&lt;body&gt;
&lt;p&gt;here is &lt;b&gt;some&lt;/b&gt; text to &lt;b&gt;bold&lt;/b&gt; &lt;/p&gt;
&lt;p&gt;and &lt;b&gt;some&lt;/b&gt; more &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>1993970</id><snippet>
from lxml import etree

stylesheet = etree.XML("""
    &lt;xsl:stylesheet version="1.0"
         xmlns:btest="uri:bolder"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

        &lt;xsl:template match="@*"&gt;
            &lt;xsl:copy /&gt;
        &lt;/xsl:template&gt;

        &lt;xsl:template match="*"&gt;
            &lt;xsl:element name="{name(.)}"&gt;
                &lt;xsl:copy-of select="@*" /&gt;
                &lt;xsl:apply-templates select="text()" /&gt;
                &lt;xsl:apply-templates select="./*" /&gt;
            &lt;/xsl:element&gt;
        &lt;/xsl:template&gt;

        &lt;xsl:template match="text()"&gt;
            &lt;xsl:copy-of select="btest:bolder(.)/node()" /&gt;
        &lt;/xsl:template&gt;         
     &lt;/xsl:stylesheet&gt;
""")

glossary = ['some', 'bold']

def bolder(context, s):
    results = []
    r = None
    for word in s[0].split():
        if word in glossary:
            if r is not None:
                results.append(r)
            r = etree.Element('r')
            b = etree.SubElement(r, 'b')
            b.text = word
            b.tail = ' '
            results.append(r)
            r = None
        else:
            if r is None:
                r = etree.Element('r')
            r.text = '%s%s ' % (r.text or '', word)

        if r is not None:
            results.append(r)
    return results

def test():
    ns = etree.FunctionNamespace('uri:bolder') # register global namespace
    ns['bolder'] = bolder # define function in new global namespace
    transform = etree.XSLT(stylesheet)
    print str(transform(etree.XML("""&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;here is some text to bold&lt;/p&gt;&lt;p&gt;and some more&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;""")))

if __name__ == "__main__":
    test()

</snippet></ROW><ROW><id>1994145</id><snippet>eval</snippet></ROW><ROW><id>1994145</id><snippet>__class__</snippet></ROW><ROW><id>1994145</id><snippet>object</snippet></ROW><ROW><id>1994145</id><snippet>__subclasses__</snippet></ROW><ROW><id>1994145</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>1994184</id><snippet>'DEF'</snippet></ROW><ROW><id>1994184</id><snippet>remove</snippet></ROW><ROW><id>1994184</id><snippet>remove</snippet></ROW><ROW><id>1994184</id><snippet>discard</snippet></ROW><ROW><id>1994184</id><snippet>remove</snippet></ROW><ROW><id>1994391</id><snippet>settings.DATABASE_ENGINE</snippet></ROW><ROW><id>1994391</id><snippet>settings.py</snippet></ROW><ROW><id>1994557</id><snippet>os.listdir()</snippet></ROW><ROW><id>1994557</id><snippet>import os
os.listdir('/foo/bar')[0]
</snippet></ROW><ROW><id>1994829</id><snippet>enable_profile_selector=1</snippet></ROW><ROW><id>1994840</id><snippet>shutil.copytree</snippet></ROW><ROW><id>1994840</id><snippet>shutil.copy</snippet></ROW><ROW><id>1994840</id><snippet>import shutil, errno

def copyanything(src, dst):
    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python &gt;2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise
</snippet></ROW><ROW><id>1995015</id><snippet>for i = 1 to 10000
    get "http://en.wikipedia.org/wiki/Special:Random"
</snippet></ROW><ROW><id>1995049</id><snippet>elif 'd' in string: 
    print 'string4 being processed' 
    # undesirable side effect occurs here
    newData.remove(string)
    xmlToDictionary(string, 'string4') 
</snippet></ROW><ROW><id>1995397</id><snippet>os.listdir</snippet></ROW><ROW><id>1995397</id><snippet>os.remove</snippet></ROW><ROW><id>1995397</id><snippet>import os

filelist = [ f for f in os.listdir(".") if f.endswith(".bak") ]
for f in filelist:
    os.remove(f)
</snippet></ROW><ROW><id>1995397</id><snippet>glob.glob</snippet></ROW><ROW><id>1995397</id><snippet>import glob, os

filelist = glob.glob("*.bak")
for f in filelist:
    os.remove(f)
</snippet></ROW><ROW><id>1995397</id><snippet>os.chdir</snippet></ROW><ROW><id>1995570</id><snippet>&gt;&gt;&gt; "%012d" % ( 1, )
'000000000001'
&gt;&gt;&gt; "%012d" % ( 2, )
'000000000002'
</snippet></ROW><ROW><id>1995585</id><snippet>dis</snippet></ROW><ROW><id>1995585</id><snippet>FOR_ITER</snippet></ROW><ROW><id>1995585</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>1995585</id><snippet>LOAD_DEREF</snippet></ROW><ROW><id>1995585</id><snippet>LOAD_DEREF</snippet></ROW><ROW><id>1995585</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>1995585</id><snippet>x</snippet></ROW><ROW><id>1995585</id><snippet>y</snippet></ROW><ROW><id>1995585</id><snippet>x</snippet></ROW><ROW><id>1995585</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>1995585</id><snippet>&gt;&gt;&gt; def Generator(x, y):
...     for i in xrange(x):
...         for j in xrange(y):
...             yield(i, j)
...
&gt;&gt;&gt; dis.dis(Generator)
  2           0 SETUP_LOOP              54 (to 57)
              3 LOAD_GLOBAL              0 (xrange)
              6 LOAD_FAST                0 (x)
              9 CALL_FUNCTION            1
             12 GET_ITER
        &gt;&gt;   13 FOR_ITER                40 (to 56)
             16 STORE_FAST               2 (i)

  3          19 SETUP_LOOP              31 (to 53)
             22 LOAD_GLOBAL              0 (xrange)
             25 LOAD_FAST                1 (y)
             28 CALL_FUNCTION            1
             31 GET_ITER
        &gt;&gt;   32 FOR_ITER                17 (to 52)
             35 STORE_FAST               3 (j)

  4          38 LOAD_FAST                2 (i)
             41 LOAD_FAST                3 (j)
             44 BUILD_TUPLE              2
             47 YIELD_VALUE
             48 POP_TOP
             49 JUMP_ABSOLUTE           32
        &gt;&gt;   52 POP_BLOCK
        &gt;&gt;   53 JUMP_ABSOLUTE           13
        &gt;&gt;   56 POP_BLOCK
        &gt;&gt;   57 LOAD_CONST               0 (None)
             60 RETURN_VALUE
&gt;&gt;&gt; def Generator_expr(x, y):
...    return ((i, j) for i in xrange(x) for j in xrange(y))
...
&gt;&gt;&gt; dis.dis(Generator_expr.func_code.co_consts[1])
  2           0 SETUP_LOOP              47 (to 50)
              3 LOAD_FAST                0 (.0)
        &gt;&gt;    6 FOR_ITER                40 (to 49)
              9 STORE_FAST               1 (i)
             12 SETUP_LOOP              31 (to 46)
             15 LOAD_GLOBAL              0 (xrange)
             18 LOAD_DEREF               0 (y)
             21 CALL_FUNCTION            1
             24 GET_ITER
        &gt;&gt;   25 FOR_ITER                17 (to 45)
             28 STORE_FAST               2 (j)
             31 LOAD_FAST                1 (i)
             34 LOAD_FAST                2 (j)
             37 BUILD_TUPLE              2
             40 YIELD_VALUE
             41 POP_TOP
             42 JUMP_ABSOLUTE           25
        &gt;&gt;   45 POP_BLOCK
        &gt;&gt;   46 JUMP_ABSOLUTE            6
        &gt;&gt;   49 POP_BLOCK
        &gt;&gt;   50 LOAD_CONST               0 (None)
             53 RETURN_VALUE
</snippet></ROW><ROW><id>1995616</id><snippet>int("000000013",10)</snippet></ROW><ROW><id>1995616</id><snippet>int(("%o" % 00000013),10)
</snippet></ROW><ROW><id>1995846</id><snippet>Decimal</snippet></ROW><ROW><id>1995846</id><snippet>decimal</snippet></ROW><ROW><id>1995846</id><snippet>&gt;&gt;&gt; TWOPLACES = Decimal(10) ** -2       # same as Decimal('0.01')
&gt;&gt;&gt; # Round to two places
&gt;&gt;&gt; Decimal('3.214').quantize(TWOPLACES)
Decimal('3.21')
&gt;&gt;&gt; # Validate that a number does not exceed two places
&gt;&gt;&gt; Decimal('3.21').quantize(TWOPLACES, context=Context(traps=[Inexact]))
Decimal('3.21')
&gt;&gt;&gt; Decimal('3.214').quantize(TWOPLACES, context=Context(traps=[Inexact]))
Traceback (most recent call last):
   ...
Inexact: None
</snippet></ROW><ROW><id>1995846</id><snippet>Decimal</snippet></ROW><ROW><id>1995846</id><snippet>str</snippet></ROW><ROW><id>1995846</id><snippet>str(Decimal('10'))
# -&gt; '10'
str(Decimal('10.00'))
# -&gt; '10.00'
str(Decimal('10.000'))
# -&gt; '10.000'
</snippet></ROW><ROW><id>1995979</id><snippet>GOTO</snippet></ROW><ROW><id>1995979</id><snippet>GOTO</snippet></ROW><ROW><id>1995979</id><snippet>GOTO</snippet></ROW><ROW><id>1995979</id><snippet>setjmp</snippet></ROW><ROW><id>1995979</id><snippet>longjmp</snippet></ROW><ROW><id>1995979</id><snippet>[Browser]</snippet></ROW><ROW><id>1995979</id><snippet>[DB]</snippet></ROW><ROW><id>1995979</id><snippet>GOTO</snippet></ROW><ROW><id>1996250</id><snippet>import Image
import ImageOps

x = Image.open('test.png')
y = ImageOps.expand(x,border=5,fill='red')
y.save('test2.png')
</snippet></ROW><ROW><id>1996499</id><snippet>import urllib
import re

fbhandle = urllib.urlopen('http://www.facebook.com/Microsoft')
pattern = "6 of(.*)fans" #this wild card doesnt appear to work?
compiled = re.compile(pattern)

ms = compiled.search(fbhandle.read())
print ms.group(1).strip()
fbhandle.close()
</snippet></ROW><ROW><id>1996499</id><snippet>re.search()</snippet></ROW><ROW><id>1996499</id><snippet>re.match()</snippet></ROW><ROW><id>1996499</id><snippet>79,110</snippet></ROW><ROW><id>1996522</id><snippet>isidentifier</snippet></ROW><ROW><id>1996522</id><snippet>&gt;&gt;&gt; 's'.isidentifier()
True
</snippet></ROW><ROW><id>1996540</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>1996540</id><snippet>communicate()</snippet></ROW><ROW><id>1996540</id><snippet>fileno()</snippet></ROW><ROW><id>1996609</id><snippet>depth</snippet></ROW><ROW><id>1996609</id><snippet>mode_to_bpp = {'1':1, 'L':8, 'P':8, 'RGB':24, 'RGBA':32, 'CMYK':32, 'YCbCr':24, 'I':32, 'F':32}

data = Image.open('file.jpg')
bpp = mode_to_bpp[data.mode]
</snippet></ROW><ROW><id>1996848</id><snippet>b = a</snippet></ROW><ROW><id>1996848</id><snippet>b</snippet></ROW><ROW><id>1996848</id><snippet>help(b)</snippet></ROW><ROW><id>1996848</id><snippet>a</snippet></ROW><ROW><id>1996848</id><snippet>a</snippet></ROW><ROW><id>1996848</id><snippet>def a(something):
    return something*something

#Case I - referencing
b1 = a
#Case II - creating a new function to call the first
def b2(something):
    return a(something)
</snippet></ROW><ROW><id>1996848</id><snippet>$ python -mtimeit -s'import ref' 'ref.a(23)'
1000000 loops, best of 3: 0.716 usec per loop
$ python -mtimeit -s'import ref' 'ref.b1(23)'
1000000 loops, best of 3: 0.702 usec per loop
$ python -mtimeit -s'import ref' 'ref.b2(23)'
1000000 loops, best of 3: 0.958 usec per loop
</snippet></ROW><ROW><id>1996848</id><snippet>b1</snippet></ROW><ROW><id>1996848</id><snippet>a</snippet></ROW><ROW><id>1996848</id><snippet>b2</snippet></ROW><ROW><id>1996848</id><snippet>a</snippet></ROW><ROW><id>1996851</id><snippet>{{ theblob|length }}</snippet></ROW><ROW><id>1997115</id><snippet>x+y</snippet></ROW><ROW><id>1997115</id><snippet>x</snippet></ROW><ROW><id>1997115</id><snippet>a</snippet></ROW><ROW><id>1997115</id><snippet>y</snippet></ROW><ROW><id>1997115</id><snippet>b</snippet></ROW><ROW><id>1997115</id><snippet>args+moreargs</snippet></ROW><ROW><id>1997115</id><snippet>tuple</snippet></ROW><ROW><id>1997117</id><snippet>from Tkinter import *

class CanvasDemo(Frame):
    def __init__(self, width=200, height=200):
        Frame.__init__(self, root)
        self.canvas = Canvas(self)
        self.canvas.pack(fill="both", expand="1")
        self.canvas.create_rectangle(50, 25, 150, 75, fill="bisque", tags="r1")
        self.canvas.create_line(0,0, 50, 25, arrow="last", tags="to_r1")
        self.canvas.bind("&lt;B1-Motion&gt;", self.move_box)
        self.canvas.bind("&lt;ButtonPress-1&gt;", self.start_move)

    def move_box(self, event):
        deltax = event.x - self.x
        deltay = event.y - self.y
        self.canvas.move("r1", deltax, deltay)
        coords = self.canvas.coords("to_r1")
        coords[2] += deltax
        coords[3] += deltay
        self.canvas.coords("to_r1", *coords)
        self.x = event.x
        self.y = event.y

    def start_move(self, event):
        self.x = event.x
        self.y = event.y

root = Tk()
canvas = CanvasDemo(root)
canvas.pack()
mainloop()
</snippet></ROW><ROW><id>1997127</id><snippet>RequestContext</snippet></ROW><ROW><id>1997251</id><snippet>threading.py</snippet></ROW><ROW><id>1997251</id><snippet>thread</snippet></ROW><ROW><id>1997251</id><snippet>threading</snippet></ROW><ROW><id>1997251</id><snippet>thread</snippet></ROW><ROW><id>1997437</id><snippet>./configure
make
make install
</snippet></ROW><ROW><id>1997461</id><snippet>sys.modules</snippet></ROW><ROW><id>1997624</id><snippet>{a|b}|{c|d}</snippet></ROW><ROW><id>1997676</id><snippet>mod1.my_data</snippet></ROW><ROW><id>1997875</id><snippet>PyImaging_GrabScreenWin32(PyObject* self, PyObject* args)
{
    int width, height;
    HBITMAP bitmap;
    BITMAPCOREHEADER core;
    HDC screen, screen_copy;
    PyObject* buffer;

    /* step 1: create a memory DC large enough to hold the
       entire screen */

    screen = CreateDC(";DISPLAY", NULL, NULL, NULL); 
    screen_copy = CreateCompatibleDC(screen); 

    width = GetDeviceCaps(screen, HORZRES);
    height = GetDeviceCaps(screen, VERTRES);

    bitmap = CreateCompatibleBitmap(screen, width, height);
    if (!bitmap)
        goto error;

    if (!SelectObject(screen_copy, bitmap))
        goto error;

    /* step 2: copy bits into memory DC bitmap */

    if (!BitBlt(screen_copy, 0, 0, width, height, screen, 0, 0, SRCCOPY))
        goto error;

    /* step 3: extract bits from bitmap */

    buffer = PyString_FromStringAndSize(NULL, height * ((width*3 + 3) &amp; -4));
    if (!buffer)
        return NULL;

    core.bcSize = sizeof(core);
    core.bcWidth = width;
    core.bcHeight = height;
    core.bcPlanes = 1;
    core.bcBitCount = 24;
    if (!GetDIBits(screen_copy, bitmap, 0, height, PyString_AS_STRING(buffer),
                   (BITMAPINFO*) &amp;core, DIB_RGB_COLORS))
        goto error;

    DeleteObject(bitmap);
    DeleteDC(screen_copy);
    DeleteDC(screen);

    return Py_BuildValue("(ii)N", width, height, buffer);

error:
    PyErr_SetString(PyExc_IOError, "screen grab failed");

    DeleteDC(screen_copy);
    DeleteDC(screen);

    return NULL;
}
</snippet></ROW><ROW><id>1997875</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; user= windll.LoadLibrary("c:\\winnt\\system32\\user32.dll") #I am in windows 2000, may be yours will be windows
&gt;&gt;&gt; h = user.GetDC(0)
&gt;&gt;&gt; gdi= windll.LoadLibrary("c:\\winnt\\system32\\gdi32.dll")
&gt;&gt;&gt; gdi.GetPixel(h,1023,767)
16777215 #I believe its white color of RGB or BGR value, #FFFFFF (according to msdn it should be RGB)
&gt;&gt;&gt; gdi.GetPixel(h,1024,767)
-1 #because my screen is only 1024x768
</snippet></ROW><ROW><id>1997875</id><snippet>from ctypes import windll
dc= windll.user32.GetDC(0)

def getpixel(x,y):
    return windll.gdi32.GetPixel(dc,x,y)
</snippet></ROW><ROW><id>1997875</id><snippet>getpixel(0,0)</snippet></ROW><ROW><id>1997875</id><snippet>getpixel(100,0)</snippet></ROW><ROW><id>1997875</id><snippet>winnt</snippet></ROW><ROW><id>1997875</id><snippet>windows</snippet></ROW><ROW><id>1997875</id><snippet>user32.dll</snippet></ROW><ROW><id>1997875</id><snippet>gdi32.dll</snippet></ROW><ROW><id>1997983</id><snippet>decimal</snippet></ROW><ROW><id>1997983</id><snippet>decimal.getcontext()</snippet></ROW><ROW><id>1997983</id><snippet>decimal.setcontext('foo')</snippet></ROW><ROW><id>1997983</id><snippet>a</snippet></ROW><ROW><id>1997983</id><snippet>.copy()</snippet></ROW><ROW><id>1997983</id><snippet>from decimal import localcontext

with localcontext() as ctx:
    ctx.prec -= 5   # Perform a low precision calculation
    s = calculate_something()
s = +s  # Round the final result back to the default precision
</snippet></ROW><ROW><id>1998208</id><snippet>minus_seven = today - datetime.timedelta(days = 7)
</snippet></ROW><ROW><id>1998266</id><snippet>&lt;presence from='romeo@example.net/home'&gt;
  &lt;c xmlns='http://jabber.org/protocol/caps' 
     hash='sha-1'
     node='http://example.com/MYBOT'
     ver='/FpawanrJ31ymsv4ApCMGcyJmUk='/&gt;
&lt;/presence&gt;
</snippet></ROW><ROW><id>1998266</id><snippet>&lt;iq to='romeo@example.net/home'
    id='disco1'
    from='example.net' 
    type='get'&gt;
  &lt;query xmlns='http://jabber.org/protocol/disco#info'
         node='http://example.com/MYBOT#/FpawanrJ31ymsv4ApCMGcyJmUk='/&gt;
&lt;/iq&gt;
</snippet></ROW><ROW><id>1998266</id><snippet>&lt;iq from='romeo@example.net/home'
    id='disco1'
    to='example.net' 
    type='result'&gt;
  &lt;query xmlns='http://jabber.org/protocol/disco#info'
         node='http://example.com/MYBOT#/FpawanrJ31ymsv4ApCMGcyJmUk='&gt;
    &lt;identity category='client' type='bot' name='MYBOT'/&gt;
    &lt;feature var='http://jabber.org/protocol/mood+notify'/&gt;
    &lt;feature var='http://jabber.org/protocol/tune+notify'/&gt;
  &lt;/query&gt;
&lt;/iq&gt;
</snippet></ROW><ROW><id>1998287</id><snippet>".*?.*?.*?.*?.*?.*?.*?.*?.*?.*?"*50000</snippet></ROW><ROW><id>1998287</id><snippet>".*?"</snippet></ROW><ROW><id>1998287</id><snippet>"x"*50000</snippet></ROW><ROW><id>1998287</id><snippet>"x"*50000</snippet></ROW><ROW><id>1998287</id><snippet>".*?x"*50000</snippet></ROW><ROW><id>1998287</id><snippet>"x"*50000</snippet></ROW><ROW><id>1998287</id><snippet>".*?x"*50000</snippet></ROW><ROW><id>1998414</id><snippet>string.replace</snippet></ROW><ROW><id>1998414</id><snippet>re.sub</snippet></ROW><ROW><id>1998414</id><snippet>glob.glob</snippet></ROW><ROW><id>1998414</id><snippet>with</snippet></ROW><ROW><id>1998414</id><snippet>try</snippet></ROW><ROW><id>1998414</id><snippet>finally</snippet></ROW><ROW><id>1998414</id><snippet>*.clean</snippet></ROW><ROW><id>1998414</id><snippet>fileinput</snippet></ROW><ROW><id>1998414</id><snippet>import re
import os
import glob

source_dir=os.getcwd()
target_dir="clean"
source_files = [fname for fname in glob.glob(os.path.join(source_dir,"*.seq"))]

# check if target directory exists... if not, create it.
if not os.path.exists(target_dir):
    os.makedirs(target_dir)

for source_file in source_files:
   target_file = os.path.join(target_dir,os.path.basename(source_file)+".clean")
   with open(source_file,'r') as sfile:
      with open(target_file,'w') as tfile:
         lines = sfile.readlines()
         # do the replacement in the second line.
         # (remember that arrays are zero indexed)
         lines[1]=re.sub("K|Y|W|M|R|S",'N',lines[1])
         tfile.writelines(lines)

print "DONE"
</snippet></ROW><ROW><id>1998507</id><snippet>r"(\S+)+x"</snippet></ROW><ROW><id>1998507</id><snippet>"a"*21</snippet></ROW><ROW><id>1998862</id><snippet>query = u"джазовыми"
</snippet></ROW><ROW><id>1998862</id><snippet># -*- coding: UTF-8 -*-
</snippet></ROW><ROW><id>1998950</id><snippet>parser.setFeature(handler.feature_external_ges, False)
</snippet></ROW><ROW><id>1999039</id><snippet>PyTypeObject type;
// ...other initialisation...
type.tp_dict = PyDict_New();
PyDict_SetItemString(type.tp_dict, "bar", PyInt_FromLong(1));
</snippet></ROW><ROW><id>1999138</id><snippet>&lt;meta http-equiv="Content-type" content="text/html; charset=utf-8" /&gt; 
</snippet></ROW><ROW><id>1999165</id><snippet>make.retval</snippet></ROW><ROW><id>1999165</id><snippet>make</snippet></ROW><ROW><id>1999165</id><snippet>retval</snippet></ROW><ROW><id>1999165</id><snippet>def make( ):
    etc. 
    return retval

def email_results( retval ):
    etc.

if __name__ == "__main__":
    retval= make()
    email_results( retval )
</snippet></ROW><ROW><id>1999194</id><snippet>while True:
    rate(100) #what does this rate(100) do?
    try:
        'something'
    except:
        'something else'
</snippet></ROW><ROW><id>1999194</id><snippet>True</snippet></ROW><ROW><id>1999194</id><snippet>False</snippet></ROW><ROW><id>1999194</id><snippet>True</snippet></ROW><ROW><id>1999194</id><snippet>True</snippet></ROW><ROW><id>1999194</id><snippet>False</snippet></ROW><ROW><id>1999194</id><snippet>while</snippet></ROW><ROW><id>1999271</id><snippet>a = open("file1.txt").readlines()
b = open("file2.txt").readlines()
count = 0
pos = 0

while 1:
    count += 1
    try:
        al = a.pop(0)
        bl = b.pop(0)
        if al != bl:
            print "files differ on line %d, byte %d" % (count,pos)
        pos += len(al)
    except IndexError:
        break
</snippet></ROW><ROW><id>1999492</id><snippet>ORDER BY</snippet></ROW><ROW><id>1999492</id><snippet>OFFSET</snippet></ROW><ROW><id>1999492</id><snippet>COUNT</snippet></ROW><ROW><id>1999492</id><snippet>OFFSET</snippet></ROW><ROW><id>1999575</id><snippet>a = CustASample()
b = Sample()
a.__class__ is b.__class__
-&gt; False
</snippet></ROW><ROW><id>1999575</id><snippet>class A(object):
    def __init__(self):
        self.__class__ = B

class B(object):
    def bark(self):
       print "Wuff!"

a = A()
b = B()
a.__class__ is b.__class__
-&gt; True

a.bark()
-&gt; Wuff!

b.bark()
-&gt; Wuff!
</snippet></ROW><ROW><id>1999575</id><snippet>__new__</snippet></ROW><ROW><id>1999575</id><snippet>__init__</snippet></ROW><ROW><id>1999575</id><snippet>class C(object):
    def __new__(cls):
        return A()
</snippet></ROW><ROW><id>1999575</id><snippet>&gt;&gt;&gt; a = object()
&gt;&gt;&gt; b = object()
&gt;&gt;&gt; a == b
False
</snippet></ROW><ROW><id>1999575</id><snippet>__eq__</snippet></ROW><ROW><id>1999575</id><snippet>a is b</snippet></ROW><ROW><id>1999575</id><snippet>is</snippet></ROW><ROW><id>1999575</id><snippet>&gt;&gt;&gt; id(a)
156808
</snippet></ROW><ROW><id>2000070</id><snippet>class Car(models.Model):
    manufacturer = models.ForeignKey('production.Manufacturer')
</snippet></ROW><ROW><id>2000104</id><snippet>//PHP style
header('Content-Type: application/vnd.ms-excel');
header('Content-Disposition: attachment; filename="downloaded.pdf"');
</snippet></ROW><ROW><id>2000367</id><snippet>Session.delete()</snippet></ROW><ROW><id>2000367</id><snippet>Inventory</snippet></ROW><ROW><id>2000367</id><snippet>character.inventory</snippet></ROW><ROW><id>2000367</id><snippet>'delete-orphan'</snippet></ROW><ROW><id>2000367</id><snippet>Inventory</snippet></ROW><ROW><id>2000424</id><snippet>java -version</snippet></ROW><ROW><id>2000783</id><snippet>properties()</snippet></ROW><ROW><id>2000783</id><snippet>def populate_object_properties(values_as_strings, 
                               object_to_populate, 
                               properties_to_populate):
    model_properties = object_to_populate.properties()
    for k in properties_to_populate:        
        value = values_as_strings.get(k)
        model_property = model_properties.get(k)
        if value:
            if isinstance(model_property, StringProperty):
                setattr(object_to_populate, k, str(value))
            elif isinstance(model_property, IntegerProperty):
                setattr(object_to_populate, k, int(value))
        else:
            setattr(object_to_populate, k, None)
</snippet></ROW><ROW><id>2001032</id><snippet>import inspect
def callers_module():
   module = inspect.getmodule(inspect.currentframe().f_back)
   return module
</snippet></ROW><ROW><id>2001315</id><snippet>class ReopeningFile(object):
    def __init__(self, filename):
        self.filename = filename
        self.f = open(self.filename)

    def next(self):
        try:
            self.f.next()
        except StopIteration:
            depth = self.f.tell()
            self.f.close()
            self.f = open(self.filename)
            self.f.seek(depth)
            # May need to sleep here to allow more data to come in
            # Also may need a way to signal a real StopIteration
            self.next()

    def __iter__(self):
        return self
</snippet></ROW><ROW><id>2001315</id><snippet>import csv
csv_reader = csv.reader(ReopeningFile('data.csv'))
for each in csv_reader:
    process_csv_line(each)
</snippet></ROW><ROW><id>2001751</id><snippet>checkedItems = [i for i in range(citList.GetCount()) if citList.IsChecked(i)]
</snippet></ROW><ROW><id>2001751</id><snippet>citList.GetChecked()</snippet></ROW><ROW><id>2001751</id><snippet>__init__</snippet></ROW><ROW><id>2001751</id><snippet>__init__</snippet></ROW><ROW><id>2001751</id><snippet>wx.EVT_BUTTON</snippet></ROW><ROW><id>2001751</id><snippet>self</snippet></ROW><ROW><id>2001751</id><snippet>self.citList = wx.CheckListBox(self, -1, (60, 50), wx.DefaultSize, allLoc)
# some code
self.panel = citPanel(self, -1)
</snippet></ROW><ROW><id>2001751</id><snippet>Clicked</snippet></ROW><ROW><id>2001751</id><snippet>def Clicked(self, event):
    checkedItems = [i for i in range(self.panel.citList.GetCount()) if self.panel.citList.IsChecked(i)]
    print checkedItems
    event.Skip()
</snippet></ROW><ROW><id>2001797</id><snippet>import inspect


class DynamicVars(object):
    def __init__(self):
        object.__setattr__(self, "variables", {})

    def normalize(self, stackframe):
        return [hash(tpl[0]) for tpl in stackframe[1:]]

    def __setattr__(self, attr, value):
        stack = self.normalize(inspect.stack())
        d = {"value": value, "stack": stack}
        if not attr in self.variables:
            self.variables[attr] = []
            self.variables[attr].append(d)
        else:
            our_value = self.variables[attr]
            if our_value[-1]["stack"] == stack:
                our_value[-1]["value"] = value
            elif len(stack) &lt;= len(our_value):
                while our_value and stack !=  our_value["stack"]:
                    our_value.pop()
                our_value.append(d)
            else: #len(stack) &gt; len(our_value):
                our_value.append(d)
    def __getattr__(self, attr):
        if not attr in self.variables:
            raise AttributeError
        stack = self.normalize(inspect.stack())
        while self.variables[attr]:
            our_stack = self.variables[attr][-1]["stack"]
            if our_stack == stack[-len(our_stack):]:
                break
            self.variables[attr].pop()
        else:
            raise AttributeError
        return self.variables[attr][-1]["value"]


# for testing:
def c():
    D = DynamicVars()
    D.c = "old"
    print D.c
    def a():
        print D.c
    a()
    def b():
        D.c = "new"
        a()
    b()
    a()
    def c():
        D.c = "newest"
        a()
        b()
        a()
    c()
    a()

c()
</snippet></ROW><ROW><id>2002082</id><snippet>__import__(m, globals(), locals())</snippet></ROW><ROW><id>2002082</id><snippet>__import__(m)</snippet></ROW><ROW><id>2002082</id><snippet>p.split(fn)[1][:-3]</snippet></ROW><ROW><id>2002432</id><snippet>L = [[1,2,3],
     [4,5,6]]
</snippet></ROW><ROW><id>2002432</id><snippet>L.append([7,8,9])
</snippet></ROW><ROW><id>2002432</id><snippet>L = [[1,2,3],
     [4,5,6],
     [7,8,9]]
</snippet></ROW><ROW><id>2002432</id><snippet>L = [x + [0] for x in L]
</snippet></ROW><ROW><id>2002432</id><snippet>L = [[1,2,3,0],
     [4,5,6,0]]
</snippet></ROW><ROW><id>2002574</id><snippet>u</snippet></ROW><ROW><id>2002574</id><snippet>'ISU European Figure Skating Championships 2009: Senior Ladies Ladies: Short Program - 2. Susanna P\xc3\x96YKI\xc3\x96'
</snippet></ROW><ROW><id>2002574</id><snippet>ascii</snippet></ROW><ROW><id>2002574</id><snippet>&gt;&gt;&gt; 'P\xc3\x96YKI\xc3\x96'.encode('utf-8')
UnicodeDecodeError
</snippet></ROW><ROW><id>2002593</id><snippet>INSTALLED_APPS = (
'django.contrib.auth',
'django.contrib.contenttypes',
'django.contrib.sessions',
'django.contrib.admin',
'django.contrib.sites',
'squick.items',
'cowsite.search',
'cowsite.posts',
</snippet></ROW><ROW><id>2003361</id><snippet>descr.__get__(self, obj, type=None) --&gt; value</snippet></ROW><ROW><id>2003361</id><snippet>descr.__set__(self, obj, value) --&gt; None</snippet></ROW><ROW><id>2003361</id><snippet>descr.__delete__(self, obj) --&gt; None</snippet></ROW><ROW><id>2003361</id><snippet>key</snippet></ROW><ROW><id>2003361</id><snippet>__get__</snippet></ROW><ROW><id>2003361</id><snippet>def __init__(self, initval=None, name='var'):
    self.val = initval
    self.name = name

def __get__(self, obj, objtype):
    print 'Retrieving', self.name
    return self.val

def __set__(self, obj, val):
    print 'Updating' , self.name
    self.val = val
</snippet></ROW><ROW><id>2003361</id><snippet>self.something</snippet></ROW><ROW><id>2003361</id><snippet>__init__</snippet></ROW><ROW><id>2003361</id><snippet>__set__</snippet></ROW><ROW><id>2003361</id><snippet>self.something</snippet></ROW><ROW><id>2003361</id><snippet>__get__</snippet></ROW><ROW><id>2003361</id><snippet>print</snippet></ROW><ROW><id>2003476</id><snippet>.+&gt;</snippet></ROW><ROW><id>2003476</id><snippet>[^&gt;]+&gt;</snippet></ROW><ROW><id>2003476</id><snippet>.*?&gt;</snippet></ROW><ROW><id>2003476</id><snippet>[^&gt;]*&gt;</snippet></ROW><ROW><id>2003476</id><snippet>[^\r\n]</snippet></ROW><ROW><id>2003651</id><snippet>None</snippet></ROW><ROW><id>2003651</id><snippet>urlopen</snippet></ROW><ROW><id>2003651</id><snippet>is None</snippet></ROW><ROW><id>2003692</id><snippet>GET</snippet></ROW><ROW><id>2003692</id><snippet>memcache</snippet></ROW><ROW><id>2003906</id><snippet>date</snippet></ROW><ROW><id>2003906</id><snippet>datetime</snippet></ROW><ROW><id>2003906</id><snippet>from datetime import date, timedelta

def allsundays(year):
   d = date(year, 1, 1)                    # January 1st
   d += timedelta(days = 6 - d.weekday())  # First Sunday
   while d.year == year:
      yield d
      d += timedelta(days = 7)

for d in allsundays(2010):
   print d
</snippet></ROW><ROW><id>2003940</id><snippet>Python __path__</snippet></ROW><ROW><id>2003940</id><snippet>__path__</snippet></ROW><ROW><id>2003940</id><snippet>__init__.py</snippet></ROW><ROW><id>2004013</id><snippet>h[1] &gt;&gt;&gt; import datetime
h[1] &gt;&gt;&gt; Jan1st = datetime.date(2010,1,1)
h[1] &gt;&gt;&gt; Year,WeekNum,DOW = Jan1st.isocalendar() # DOW = day of week
h[1] &gt;&gt;&gt; print Year,WeekNum,DOW
2009 53 5
</snippet></ROW><ROW><id>2004013</id><snippet>from datetime import date, timedelta


def allsundays(year):
    """This code was provided in the previous answer! It's not mine!"""
    d = date(year, 1, 1)                    # January 1st                                                          
    d += timedelta(days = 6 - d.weekday())  # First Sunday                                                         
    while d.year == year:
        yield d
        d += timedelta(days = 7)

Dict = {}
for wn,d in enumerate(allsundays(2010)):
    # This is my only contribution!
    Dict[wn+1] = [(d + timedelta(days=k)).isoformat() for k in range(0,7) ]

print Dict
</snippet></ROW><ROW><id>2004179</id><snippet>print repr(filename)
</snippet></ROW><ROW><id>2004179</id><snippet>os.path.join</snippet></ROW><ROW><id>2004179</id><snippet>'/dirname'</snippet></ROW><ROW><id>2004179</id><snippet>repr</snippet></ROW><ROW><id>2004179</id><snippet>repr</snippet></ROW><ROW><id>2004179</id><snippet>filename = filename.decode('utf-8')</snippet></ROW><ROW><id>2004179</id><snippet>os.path.join</snippet></ROW><ROW><id>2004179</id><snippet>open</snippet></ROW><ROW><id>2004179</id><snippet>.encode('Latin-1')</snippet></ROW><ROW><id>2004179</id><snippet>.encode('utf-8')</snippet></ROW><ROW><id>2004427</id><snippet>n</snippet></ROW><ROW><id>2004427</id><snippet>funct</snippet></ROW><ROW><id>2004427</id><snippet>funct</snippet></ROW><ROW><id>2004427</id><snippet>def funct():
    x = 4
    def action(n):
        return x ** n
    return action
</snippet></ROW><ROW><id>2004429</id><snippet>PyErr_PrintEx</snippet></ROW><ROW><id>2004429</id><snippet>PyErr_Print</snippet></ROW><ROW><id>2004429</id><snippet>sys.last_traceback</snippet></ROW><ROW><id>2004468</id><snippet>bbins=np.bincount(b)
</snippet></ROW><ROW><id>2004468</id><snippet>a[:len(bbins)] += bbins
</snippet></ROW><ROW><id>2004553</id><snippet>new.classobj</snippet></ROW><ROW><id>2004553</id><snippet>from win32com.client import Dispatch, WithEvents
from new import classobj

class MyEventHandler(object):
    def OnVisible(self, visible):
        print "got event from object %d" % self.obj_index

listOfObjects = []
for i in range(3):
    handler = classobj('Handler_%s' % i,(MyEventHandler,),{})
    handler.obj_index = i
    ie = Dispatch("InternetExplorer.Application")
    listOfObjects.append(ie)
    WithEvents(ie, handler)

listOfObjects[0].Visible = 1
listOfObjects[2].Visible = 1
</snippet></ROW><ROW><id>2004553</id><snippet>got event from object 0
got event from object 2
</snippet></ROW><ROW><id>2004580</id><snippet>urllib.unquote(string)
</snippet></ROW><ROW><id>2004976</id><snippet>from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app

class ProfileHandler(webapp.RequestHandler): 
    def get(self, *ar, **kw):
        self.response.out.write("PROFILE IS:" + ar[0])

run_wsgi_app(webapp.WSGIApplication(
[(r'/main/profile/([a-f0-9]{40})', ProfileHandler),],
                                 debug=True))
</snippet></ROW><ROW><id>2004976</id><snippet>application: someapp
version: 1
runtime: python
api_version: 1

handlers:
- url: /main/.*
  script: index.py
</snippet></ROW><ROW><id>2004976</id><snippet>GET: http://localhost:8082/main/profile/4c4f630aef49c0065c22eb3dd35a00f5787f4816
RESPONSE: PROFILE IS:4c4f630aef49c0065c22eb3dd35a00f5787f4816
</snippet></ROW><ROW><id>2005059</id><snippet>def selectDate(self):
    date = self.calendar.selectedDate()
    self.fullDate = str(date.day()) + " / " + str(date.month()) + " / " + str(date.year())
    print "full date: %s" % self.fullDate
</snippet></ROW><ROW><id>2005365</id><snippet>msg = MIMEText(
"The nightly build status was a SUCCESS\n\n"
"Build File: http://www.python.org\n\n"
"Build Results File: http://10.51.54.57/sandboxes/"
, project
, "\n"
)
</snippet></ROW><ROW><id>2005365</id><snippet>msg = MIMEText("""The nightly build status was a SUCCESS

Build File: http://www.python.org

Build Results File: http://10.51.54.57/sandboxes/""", project, "\n")
</snippet></ROW><ROW><id>2005365</id><snippet>msg = MIMEText("The nightly build status was a SUCCESS\n\n"
"Build File: http://www.python.org\n\n"
"Build Results File: http://10.51.54.57/sandboxes/"
, project, "\n")
</snippet></ROW><ROW><id>2005365</id><snippet>msg=MIMEText("""The nightly build status was a SUCCESS\n\n
    Build File: %s
    \n\n 
    Build Results File: %s
    \n\n
    Sandbox Folder: %s 
    \n\n
    Antibrick File: """ % (build_file,build_file,sandbox),
    antibrick, 
    "\n\n"
)
</snippet></ROW><ROW><id>2005712</id><snippet>try:
    #stuff
except Exception, e:
    print e
</snippet></ROW><ROW><id>2005712</id><snippet>traceback</snippet></ROW><ROW><id>2005712</id><snippet>e</snippet></ROW><ROW><id>2006017</id><snippet>def maker(n):
  def action(x):
    return x ** n
  return action

f = maker(2)
--&gt; def action(x):
--&gt;   return x ** 2
</snippet></ROW><ROW><id>2006017</id><snippet>a = 1
b = 2
a, b = b, a
</snippet></ROW><ROW><id>2006017</id><snippet>a, b = 2, 1
</snippet></ROW><ROW><id>2006345</id><snippet>utf-8</snippet></ROW><ROW><id>2006345</id><snippet>utf-8</snippet></ROW><ROW><id>2006345</id><snippet>'ignore'</snippet></ROW><ROW><id>2006345</id><snippet>'ignore'</snippet></ROW><ROW><id>2006345</id><snippet>utf-8</snippet></ROW><ROW><id>2006345</id><snippet>&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;</snippet></ROW><ROW><id>2006345</id><snippet>???</snippet></ROW><ROW><id>2006424</id><snippet>&lt;input type="file" name="content" /&gt;
</snippet></ROW><ROW><id>2006424</id><snippet>filename = self.request.POST["content"].filename
</snippet></ROW><ROW><id>2006426</id><snippet>+---------+
| state_0 |
+---------+       +---------+
| next   -------&gt; | stack_0 |
+---------+       +---------+
                  | data    |       +---------+
                  | next   -------&gt; | state_1 |
                  +---------+       +---------+
                                    | next   ----- ...
                                    +---------+
</snippet></ROW><ROW><id>2006426</id><snippet>stack_i</snippet></ROW><ROW><id>2006426</id><snippet>X</snippet></ROW><ROW><id>2006426</id><snippet>X</snippet></ROW><ROW><id>2006426</id><snippet>state_i+1</snippet></ROW><ROW><id>2006426</id><snippet>stack_i+1</snippet></ROW><ROW><id>2006439</id><snippet>.append()</snippet></ROW><ROW><id>2006439</id><snippet>from visual import *
stars = []
galaxies = []    
for i in  range(10):
   stars.append(sphere(...))
for j in range(20):
   galaxies.append(sphere(...))
for star, galaxy, starpos, galaxypos in zip(stars, galaxies, 
                                            position, G_position):
   star.pos = starpos
   galaxy.pos = galaxypos
</snippet></ROW><ROW><id>2006439</id><snippet>show()</snippet></ROW><ROW><id>2006439</id><snippet>start_animation()</snippet></ROW><ROW><id>2006439</id><snippet>&gt;&gt;&gt; from visual import sphere
&gt;&gt;&gt; s = sphere()
</snippet></ROW><ROW><id>2006439</id><snippet>&gt;&gt;&gt; s.x = -100
</snippet></ROW><ROW><id>2006439</id><snippet>-100</snippet></ROW><ROW><id>2006640</id><snippet>sed "/logging.debug/d"</snippet></ROW><ROW><id>2006640</id><snippet>if __debug__:</snippet></ROW><ROW><id>2006640</id><snippet>if __debug__: doStuff()
</snippet></ROW><ROW><id>2006640</id><snippet>if 0: doStuff()
</snippet></ROW><ROW><id>2006640</id><snippet>if False: doStuff()
</snippet></ROW><ROW><id>2006640</id><snippet>&gt;&gt;&gt; False = True
&gt;&gt;&gt; if False: print "Illogical, captain"
Illogical, captain
</snippet></ROW><ROW><id>2006640</id><snippet>if False: doStuff()</snippet></ROW><ROW><id>2006640</id><snippet>&gt;&gt;&gt; def f():
...     if False: print( "illogical")
... 
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_CONST               0 (None) 
              3 RETURN_VALUE         
</snippet></ROW><ROW><id>2006667</id><snippet>s.sendmail(me, you.split(","), msg.as_string())
</snippet></ROW><ROW><id>2006667</id><snippet>you = ['a@a.com', 'a@a.com']</snippet></ROW><ROW><id>2006667</id><snippet>msg['To'] = ",".join(you)

...

s.sendmail(me, you, msg.as_string())
</snippet></ROW><ROW><id>2006735</id><snippet>su</snippet></ROW><ROW><id>2006735</id><snippet>su $USER -c "$WEB --quiet" &amp;
</snippet></ROW><ROW><id>2006882</id><snippet>from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app

import jsonpickle

class Pizza:
    pass                

class Example(webapp.RequestHandler):
    def get(self):
        jsonpickle.load_backend('django.utils.simplejson',
                                'dumps','loads',ValueError)
        encoded = jsonpickle.encode(Pizza())
        self.response.out.write( jsonpickle.decode(encoded).__class__ )

run_wsgi_app(webapp.WSGIApplication([('/', Example),],debug=True))
</snippet></ROW><ROW><id>2007009</id><snippet>gobject</snippet></ROW><ROW><id>2007009</id><snippet>gobject.threads_init()
</snippet></ROW><ROW><id>2007176</id><snippet>func</snippet></ROW><ROW><id>2007176</id><snippet>User.coords = classmethod(lambda s: (s.latitude, s.longitude))

def calc_distance(latlong1, latlong2):
    return func.sqrt(func.pow(69.1 * (latlong1[0] - latlong2[0]),2)
                   + func.pow(53.0 * (latlong1[1] - latlong2[1]),2))

meta.Session.query(User).filter(calc_distance(User.coords(), (my_lat, my_long)) &lt; 5)
</snippet></ROW><ROW><id>2007515</id><snippet>from models import *
from piston.handler import BaseHandler
from django.http import Http404

class ZipCodeHandler(BaseHandler):
    methods_allowed = ('GET',)

    def read(self, request, zip_code):
        try:
            points = DeliveryPoint.objects.filter(zip_code=zip_code).order_by("name")
            dps = []
            for p in points:
                name = p.name if (len(p.name)&lt;=16) else p.name[:16]+"..."
                dps.append({'name': name, 'zone': p.zone, 'price': p.price})
            return {'length':len(dps), 'dps':dps}    
        except Exception, e:
            return {'length':0, "error":e}
</snippet></ROW><ROW><id>2007641</id><snippet>type(x)</snippet></ROW><ROW><id>2007641</id><snippet>__str__</snippet></ROW><ROW><id>2007641</id><snippet>X + Y</snippet></ROW><ROW><id>2007641</id><snippet>X[23]</snippet></ROW><ROW><id>2007641</id><snippet>class</snippet></ROW><ROW><id>2007641</id><snippet>__slots__</snippet></ROW><ROW><id>2007641</id><snippet>class</snippet></ROW><ROW><id>2007641</id><snippet>dict</snippet></ROW><ROW><id>2007641</id><snippet>dict</snippet></ROW><ROW><id>2007641</id><snippet>struct</snippet></ROW><ROW><id>2007865</id><snippet># emails is a set of emails
for line in fileinput.input("csvfile.csv",inplace =1):
    parts = line.split(',')
    if parts[3] not in emails:
        print line
</snippet></ROW><ROW><id>2008053</id><snippet>gtk.Widget.reparent(new_parent)
</snippet></ROW><ROW><id>2009505</id><snippet>/dev/shm</snippet></ROW><ROW><id>2009505</id><snippet>/dev/shm</snippet></ROW><ROW><id>2009505</id><snippet>$ ls -ld /dev/shm
drwxrwxrwt 2 root root          40 2010-01-05 20:34 shm
</snippet></ROW><ROW><id>2009505</id><snippet>/etc/fstab</snippet></ROW><ROW><id>2009505</id><snippet>none /dev/shm tmpfs rw,nosuid,nodev,noexec 0 0
</snippet></ROW><ROW><id>2009645</id><snippet>def counter():
    count = 0
    def c():
        nonlocal count
        count += 1
        return count
    return c

x = counter()
print([x(),x(),x()])
</snippet></ROW><ROW><id>2009645</id><snippet>counter()</snippet></ROW><ROW><id>2009645</id><snippet>itertools</snippet></ROW><ROW><id>2009645</id><snippet>yield</snippet></ROW><ROW><id>2009758</id><snippet>f</snippet></ROW><ROW><id>2009758</id><snippet>f.func_code.co_filename</snippet></ROW><ROW><id>2009758</id><snippet>f.func_code.co_firstlineno</snippet></ROW><ROW><id>2009758</id><snippet>eval</snippet></ROW><ROW><id>2009758</id><snippet>exec</snippet></ROW><ROW><id>2009758</id><snippet>import dis</snippet></ROW><ROW><id>2009758</id><snippet>dis.dis(f)</snippet></ROW><ROW><id>2009758</id><snippet>import pdb; pdb.pm()</snippet></ROW><ROW><id>2009758</id><snippet>help</snippet></ROW><ROW><id>2009758</id><snippet>where</snippet></ROW><ROW><id>2009758</id><snippet>functools.partial</snippet></ROW><ROW><id>2009758</id><snippet>.func</snippet></ROW><ROW><id>2009758</id><snippet>im.get_thumbnail_url</snippet></ROW><ROW><id>2009758</id><snippet>def curry(_curried_func,  *args,  **kwargs):
    def _curried(*moreargs, **morekwargs):
        return _curried_func(*(args+moreargs), **dict(kwargs, **morekwargs))
    return _curried
</snippet></ROW><ROW><id>2009758</id><snippet>f.func_closure</snippet></ROW><ROW><id>2009758</id><snippet>&gt;&gt;&gt; f
&lt;function _curried at 0xb77d64fc&gt;
&gt;&gt;&gt; f.func_closure
(&lt;cell at 0xb77eb44c: tuple object at 0xb77dfa0c&gt;, &lt;cell at 0xb77eb5e4: dict object at 0xb77d93e4&gt;, &lt;cell at 0xb77eb5cc: function object at 0xb77d1d84&gt;)
</snippet></ROW><ROW><id>2009758</id><snippet>args</snippet></ROW><ROW><id>2009758</id><snippet>kwargs</snippet></ROW><ROW><id>2009758</id><snippet>_curried_func</snippet></ROW><ROW><id>2009758</id><snippet>curry</snippet></ROW><ROW><id>2009758</id><snippet>_curried</snippet></ROW><ROW><id>2009758</id><snippet>&gt;&gt;&gt; f.func_closure[2].cell_contents
&lt;function say at 0xb77d1d84&gt;
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getsource(_)
'def say(x):\n    print x\n'
</snippet></ROW><ROW><id>2009844</id><snippet>ri</snippet></ROW><ROW><id>2009844</id><snippet>irb</snippet></ROW><ROW><id>2009863</id><snippet>import os
if os.fork() == 0: exit()
</snippet></ROW><ROW><id>2010443</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; itertools.__file__
'/usr/lib64/python2.6/lib-dynload/itertools.so'
</snippet></ROW><ROW><id>2010443</id><snippet>.so</snippet></ROW><ROW><id>2010443</id><snippet>Modules/itertoolsmodule.c</snippet></ROW><ROW><id>2010443</id><snippet>Python 2.5.2 (r252:60911, Oct  5 2008, 19:29:17) 
[GCC 4.3.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; itertools.__file__
'/usr/lib/python2.5/lib-dynload/itertools.so'
</snippet></ROW><ROW><id>2010491</id><snippet>stored_ids</snippet></ROW><ROW><id>2010491</id><snippet>$ python -m timeit -s "l=range(1000000)" "1000001 in l"
10 loops, best of 3: 71.1 msec per loop
$ python -m timeit -s "s=set(range(1000000))" "1000001 in s"
10000000 loops, best of 3: 0.174 usec per loop
</snippet></ROW><ROW><id>2010535</id><snippet>findChildren</snippet></ROW><ROW><id>2010535</id><snippet>string</snippet></ROW><ROW><id>2010535</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; 
&gt;&gt;&gt; html = """
... &lt;html&gt;
... &lt;body&gt;
...     &lt;table&gt;
...         &lt;th&gt;&lt;td&gt;column 1&lt;/td&gt;&lt;td&gt;column 2&lt;/td&gt;&lt;/th&gt;
...         &lt;tr&gt;&lt;td&gt;value 1&lt;/td&gt;&lt;td&gt;value 2&lt;/td&gt;&lt;/tr&gt;
...     &lt;/table&gt;
... &lt;/body&gt;
... &lt;/html&gt;
... """
&gt;&gt;&gt;
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; tables = soup.findChildren('table')
&gt;&gt;&gt;
&gt;&gt;&gt; # This will get the first (and only) table. Your page may have more.
&gt;&gt;&gt; my_table = tables[0]
&gt;&gt;&gt;
&gt;&gt;&gt; # You can find children with multiple tags by passing a list of strings
&gt;&gt;&gt; rows = my_table.findChildren(['th', 'tr'])
&gt;&gt;&gt;
&gt;&gt;&gt; for row in rows:
...     cells = row.findChildren('td')
...     for cell in cells:
...         value = cell.string
...         print "The value in this cell is %s" % value
... 
The value in this cell is column 1
The value in this cell is column 2
The value in this cell is value 1
The value in this cell is value 2
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2010580</id><snippet>(oup2008 / ouptotal)</snippet></ROW><ROW><id>2010580</id><snippet>oup["2008"] = oup2008 + int(oup0 * (float(oup2008) / ouptotal))
</snippet></ROW><ROW><id>2010732</id><snippet>&gt;&gt;&gt; class A(object): pass
... 
&gt;&gt;&gt; A.__mro__
(&lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)
&gt;&gt;&gt; class B(A): pass
... 
&gt;&gt;&gt; B.__mro__
(&lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)
&gt;&gt;&gt; class C(A): pass
... 
&gt;&gt;&gt; C.__mro__
(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2010732</id><snippet>__mro__</snippet></ROW><ROW><id>2010732</id><snippet>object</snippet></ROW><ROW><id>2010732</id><snippet>&gt;&gt;&gt; class D(B, C): pass
... 
&gt;&gt;&gt; D.__mro__
(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)
</snippet></ROW><ROW><id>2010732</id><snippet>__mro__</snippet></ROW><ROW><id>2010732</id><snippet>__mro__</snippet></ROW><ROW><id>2010732</id><snippet>__mro__</snippet></ROW><ROW><id>2010732</id><snippet>__mro__</snippet></ROW><ROW><id>2010765</id><snippet>from mymodule.model imoprt SomeModel
from anotherone.model import AnotherModel
</snippet></ROW><ROW><id>2010815</id><snippet>HTTP_CONTENT_LENGTH</snippet></ROW><ROW><id>2011055</id><snippet>os.stat(filepath).st_size
</snippet></ROW><ROW><id>2011055</id><snippet>wc</snippet></ROW><ROW><id>2011055</id><snippet>stat</snippet></ROW><ROW><id>2011055</id><snippet>-m</snippet></ROW><ROW><id>2011055</id><snippet>import sys, codecs

def getUnicodeFileLength(filepath, charset= None):
    if charset is None:
        charset= sys.getfilesystemencoding()
    readerclass= codecs.getReader(charset)
    reader= readerclass(open(filepath, 'rb'), 'replace')
    nchar= 0
    while True:
        chars= reader.read(1024*32)  # arbitrary chunk size
        if chars=='':
            break
        nchar+= len(chars)
    reader.close()
    return nchar
</snippet></ROW><ROW><id>2011055</id><snippet>sys.getfilesystemencoding()</snippet></ROW><ROW><id>2011055</id><snippet>wc -m</snippet></ROW><ROW><id>2011376</id><snippet>   from PyQt4 import QtGui, QtCore
   clipboard = QtGui.QApplication.clipboard()
   event = QtCore.QEvent(QtCore.QEvent.Clipboard)
   QtGui.QApplication.sendEvent(clipboard, event)
</snippet></ROW><ROW><id>2011579</id><snippet>print a.__dict__['1']
</snippet></ROW><ROW><id>2011579</id><snippet>print getattr(a, '1')
</snippet></ROW><ROW><id>2011579</id><snippet>a.__dict__ = {'a1' : '111'}
print a.a1
</snippet></ROW><ROW><id>2011617</id><snippet># Setup
from collections import deque
from random import choice
used = deque(maxlen=7)

# Now your sampling bit
item = random.choice([x for x in list1 if x not in used])
used.append(item)
</snippet></ROW><ROW><id>2011617</id><snippet>while len(used) &gt; 7:
    used.popleft()
</snippet></ROW><ROW><id>2011630</id><snippet>import sys

from IPython.Shell import IPShellEmbed

class IPShellDoctest(IPShellEmbed):
   def __call__(self, *a, **kw):
       sys_stdout_saved = sys.stdout
       sys.stdout = sys.stderr
       try:
           IPShellEmbed.__call__(self, *a, **kw)
       finally:
           sys.stdout = sys_stdout_saved


def some_function():
  """
  &gt;&gt;&gt; some_function()
  'someoutput'
  """
  # now try to drop into an ipython shell to help
  # with development
  IPShellDoctest()(local_ns=locals())
  return 'someoutput'

if __name__ == '__main__':
  import doctest
  print "Running doctest . . ."
  doctest.testmod()
</snippet></ROW><ROW><id>2011665</id><snippet>which easy_install</snippet></ROW><ROW><id>2011665</id><snippet>rm [easy install full path]</snippet></ROW><ROW><id>2011665</id><snippet>wget http://peak.telecommunity.com/dist/ez_setup.py
python ez_setup.py
</snippet></ROW><ROW><id>2011665</id><snippet>sudo env ARCHFLAGS="-arch x86_64" easy_install setuptools pycurl==7.16.2.1
</snippet></ROW><ROW><id>2011781</id><snippet>from django.db.models import Q
products_list = Product.objects.all()
orq = None    
for key in keywords:
    thisq = Q(name__icontains=q)
    if orq:
        orq = thisq | orq
    else:
        orq = thisq
products_list = products_list.filter(orq)
</snippet></ROW><ROW><id>2011781</id><snippet>orq</snippet></ROW><ROW><id>2011781</id><snippet>Q(name__icontains='prod1') | Q(name__icontains='prod2')</snippet></ROW><ROW><id>2011800</id><snippet>:he inde</snippet></ROW><ROW><id>2011800</id><snippet>:filetype</snippet></ROW><ROW><id>2011800</id><snippet>:set ft?</snippet></ROW><ROW><id>2011831</id><snippet>memoize</snippet></ROW><ROW><id>2011831</id><snippet>cache</snippet></ROW><ROW><id>2011831</id><snippet>dict</snippet></ROW><ROW><id>2011831</id><snippet>list</snippet></ROW><ROW><id>2011831</id><snippet>list</snippet></ROW><ROW><id>2011831</id><snippet>tuple</snippet></ROW><ROW><id>2011831</id><snippet>a = (1, 2, 3, 4) # Parens, not brackets
b = a[:2]
c = {} # Curly braces, not brackets
c[b] = 'sss'
</snippet></ROW><ROW><id>2011868</id><snippet>$ export CC=/usr/bin/gcc-4.0
</snippet></ROW><ROW><id>2012137</id><snippet>result_summary</snippet></ROW><ROW><id>2012137</id><snippet>str</snippet></ROW><ROW><id>2012631</id><snippet>&gt;&gt;&gt; any(isinstance(e, int) and e &gt; 0 for e in [1,2,'joe'])
True
</snippet></ROW><ROW><id>2012631</id><snippet>all()</snippet></ROW><ROW><id>2012631</id><snippet>&gt;&gt;&gt; all(isinstance(e, int) and e &gt; 0 for e in [1,2,'joe'])
False
</snippet></ROW><ROW><id>2012718</id><snippet>import os, glob
for filename in glob.glob("mypath/version*"):
    os.remove(filename) 
</snippet></ROW><ROW><id>2012718</id><snippet>.</snippet></ROW><ROW><id>2012718</id><snippet>mypath</snippet></ROW><ROW><id>2013096</id><snippet>__main__</snippet></ROW><ROW><id>2013096</id><snippet>derived</snippet></ROW><ROW><id>2013096</id><snippet>__main__.MyError</snippet></ROW><ROW><id>2013096</id><snippet>derived.MyError</snippet></ROW><ROW><id>2013101</id><snippet>virtualenv --python=/path/to/python/2.6 virtualenvname
</snippet></ROW><ROW><id>2013239</id><snippet>fn</snippet></ROW><ROW><id>2013239</id><snippet>cx_Oracle</snippet></ROW><ROW><id>2013239</id><snippet>WITH_UNICODE</snippet></ROW><ROW><id>2013239</id><snippet>encoding</snippet></ROW><ROW><id>2013239</id><snippet>nencoding</snippet></ROW><ROW><id>2013239</id><snippet>ORACLE_10G</snippet></ROW><ROW><id>2013239</id><snippet>action</snippet></ROW><ROW><id>2013239</id><snippet>module</snippet></ROW><ROW><id>2013239</id><snippet>clientinfo</snippet></ROW><ROW><id>2013239</id><snippet>current_schema</snippet></ROW><ROW><id>2013239</id><snippet>cx_Oracle</snippet></ROW><ROW><id>2013286</id><snippet>old_folders = minus_seven + '*'</snippet></ROW><ROW><id>2013286</id><snippet>*</snippet></ROW><ROW><id>2013286</id><snippet>os.path.exists()</snippet></ROW><ROW><id>2013286</id><snippet>False</snippet></ROW><ROW><id>2013286</id><snippet>for d in os.listdir(os.getcwd()):
    if not os.path.isdir(d) or not d.startswith(minus_seven):
        continue
    # Do what you need to with 'd' here.
</snippet></ROW><ROW><id>2013286</id><snippet>minus_seven_dirs = [d for d in os.listdir(os.getcwd())
    if os.path.isdir(d) and d.startswith(minus_seven)]
</snippet></ROW><ROW><id>2013286</id><snippet>os</snippet></ROW><ROW><id>2014002</id><snippet>class Column:
    creation_counter = 0

    def __init__(self):
            self.creation_counter = Column.creation_counter
            Column.creation_counter += 1

class Base:
    def show(self):
        fields = [(name, (obj, obj.value)) for name, obj in self.__class__.__dict__.items() if isinstance(obj, Column)] 
        fields.sort(lambda (name1, (obj1, value1)), (name2, (obj2, value2)): cmp(obj1.creation_counter, obj2.creation_counter))
        return fields
</snippet></ROW><ROW><id>2014051</id><snippet>  pngcrush -rem gAMA -rem cHRM -rem iCCP -rem sRGB -brute -l 9 -max -reduce -m 0 -q IMAGE
  optipng -o7 -q pngout.png
  pngout pngout.png -q -y -k0 -s0
  advpng -z -4 pngout.png &gt; /dev/null
</snippet></ROW><ROW><id>2014053</id><snippet>{0:01.2f}</snippet></ROW><ROW><id>2014635</id><snippet>.quantize()</snippet></ROW><ROW><id>2014635</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal("12.234").quantize(Decimal("0.00"))
Decimal("12.23")
</snippet></ROW><ROW><id>2014635</id><snippet>from django.db import models
from decimal import Decimal
class CurrencyField(models.DecimalField):
    __metaclass__ = models.SubfieldBase

    def to_python(self, value):
        try:
           return super(CurrencyField, self).to_python(value).quantize(Decimal("0.01"))
        except AttributeError:
           return None
</snippet></ROW><ROW><id>2014635</id><snippet>__metaclass__</snippet></ROW><ROW><id>2014704</id><snippet>mtime</snippet></ROW><ROW><id>2014704</id><snippet>ctime</snippet></ROW><ROW><id>2014704</id><snippet>import os

all_subdirs = [d for d in os.listdir('.') if os.path.isdir(d)]
</snippet></ROW><ROW><id>2014704</id><snippet>latest_subdir = max(all_subdirs, key=os.path.getmtime)
</snippet></ROW><ROW><id>2014704</id><snippet>def all_subdirs_of(b='.'):
  result = []
  for d in os.listdir(b):
    bd = os.path.join(b, d)
    if os.path.isdir(bd): result.append(bd)
  return result
</snippet></ROW><ROW><id>2014704</id><snippet>latest_subdir</snippet></ROW><ROW><id>2014704</id><snippet>all_subdirs</snippet></ROW><ROW><id>2014704</id><snippet>max</snippet></ROW><ROW><id>2014782</id><snippet>x = ((5, 5),)
</snippet></ROW><ROW><id>2015142</id><snippet>'{0:02.1f}'</snippet></ROW><ROW><id>2015142</id><snippet>&gt;&gt;&gt; '{0:05.2f}'.format(5.555)
'05.55'
</snippet></ROW><ROW><id>2015142</id><snippet>.2</snippet></ROW><ROW><id>2015324</id><snippet>m = self.__class__(sz-1, sz-1)
</snippet></ROW><ROW><id>2015324</id><snippet>m = type(self)(sz-1, sz-1)
</snippet></ROW><ROW><id>2015405</id><snippet>[ someDict[k] for k in someList ]
</snippet></ROW><ROW><id>2015477</id><snippet>Decimal.quantize</snippet></ROW><ROW><id>2015477</id><snippet>Decimal</snippet></ROW><ROW><id>2015477</id><snippet>''.format()</snippet></ROW><ROW><id>2015755</id><snippet>group_by</snippet></ROW><ROW><id>2015755</id><snippet>    sess.query(User, func.sum(Score.amount).label('score_increase')).\
               join(User.scores).\
               filter(Score.created_at &gt; someday).\
               group_by(User).\
               order_by("score increase desc")
</snippet></ROW><ROW><id>2015755</id><snippet>sess.query(User).\
           join(User.scores).\
           filter(Score.created_at &gt; someday).\
           group_by(User).\
           order_by(func.sum(Score.amount))
</snippet></ROW><ROW><id>2015755</id><snippet>subq = sess.query(Score.user_id, func.sum(Score.amount).label('score_increase')).\
                  filter(Score.created_at &gt; someday).\
                  group_by(Score.user_id).subquery()
sess.query(User).join((subq, subq.c.user_id==User.user_id)).order_by(subq.c.score_increase)
</snippet></ROW><ROW><id>2016060</id><snippet>{{username|get_user}}
</snippet></ROW><ROW><id>2016060</id><snippet>from django import template
from django.contrib.auth.models import User

register = template.Library()

########################

def get_user(username):
    try:
        user = User.objects.get(username__iexact=username)
    except User.DoesNotExist: 
        user = User.objects.none()
    return user

register.filter('get_user',get_user)
</snippet></ROW><ROW><id>2016060</id><snippet>{% with username|getuser as user %}
{% if user %}DO USER STUFF
{% else %}DO UNREGISTERED STUFF
{% endif %}
{% endwith %}
</snippet></ROW><ROW><id>2016064</id><snippet>set1=set(line[:6] for line in open('file1.txt'))
set2=set(line[:6] for line in open('file2.txt'))
not_found = set1 - set2
if not_found:
    print "Some keys not found: " + ', '.join(not_found)
</snippet></ROW><ROW><id>2016519</id><snippet>AUTH_PROFILE_MODULE = "UserProfileExtended"
</snippet></ROW><ROW><id>2016607</id><snippet>cherrypy.config.update({ "environment": "embedded" })
</snippet></ROW><ROW><id>2016865</id><snippet>content = " ".join(content.replace(u"\xa0", " ").strip().split())
</snippet></ROW><ROW><id>2016865</id><snippet>unicode.split()</snippet></ROW><ROW><id>2016865</id><snippet>&gt;&gt;&gt; u"  foo  bar  ".split()
[u'foo', u'bar']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2016977</id><snippet>bar.take(np.argsort(foo))</snippet></ROW><ROW><id>2016977</id><snippet>bar.take(np.argsort(foo.ravel()).reshape(foo.shape))</snippet></ROW><ROW><id>2017083</id><snippet>counts = {}
for p in paths:
   parts = p.split('/')
   branch = counts
   for part in parts[1:-1]:
      branch = branch.setdefault(part, {})
   branch[parts[-1]] = 1 + branch.get(parts[-1], 0)
</snippet></ROW><ROW><id>2017083</id><snippet>setdefault()</snippet></ROW><ROW><id>2017083</id><snippet>get()</snippet></ROW><ROW><id>2017083</id><snippet>counts</snippet></ROW><ROW><id>2017083</id><snippet>class Stats(object):
   def __init__(self):
      self.count = 0
      self.subdirs = {}

counts = Stats()
for p in paths:
   parts = p.split('/')
   branch = counts
   for part in parts[1:]:
      branch = branch.subdirs.setdefault(part, Stats())
   branch.count += 1
</snippet></ROW><ROW><id>2017083</id><snippet>def printstats(stats, indent=''):
   print indent + str(stats.count) + ' times'
   for (d, s) in stats.subdirs.items():
       print indent + d + ':'
       printstats(s, indent + '  ')

&gt;&gt;&gt; printstats(counts)
0 times
a:
  0 times
  c:
    0 times
    d:
      1 times
  b:
    0 times
    c:
      2 times
    d:
      1 times
...
</snippet></ROW><ROW><id>2017249</id><snippet>and</snippet></ROW><ROW><id>2017249</id><snippet>or</snippet></ROW><ROW><id>2017249</id><snippet>&gt;&gt;&gt; 1 | (1/0)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
&gt;&gt;&gt; 1 or (1/0)
1
</snippet></ROW><ROW><id>2017249</id><snippet>|</snippet></ROW><ROW><id>2017249</id><snippet>or</snippet></ROW><ROW><id>2017249</id><snippet>ZeroDivisionError</snippet></ROW><ROW><id>2017288</id><snippet>def encode(input, output, quotetabs, header = 0):
    ...
    def write(s, output=output, lineEnd='\n'):
        # RFC 1521 requires that the line ending in a space or tab must have
        # that trailing character encoded.
        if s and s[-1:] in ' \t':
            output.write(s[:-1] + quote(s[-1]) + lineEnd)
        elif s == '.':
            output.write(quote(s) + lineEnd)
        else:
            output.write(s + lineEnd)

    ...  # 35 more lines of code that call write in several places
</snippet></ROW><ROW><id>2017288</id><snippet>encode</snippet></ROW><ROW><id>2017288</id><snippet>write</snippet></ROW><ROW><id>2017288</id><snippet>re.sub</snippet></ROW><ROW><id>2017288</id><snippet>def encode_basestring(s):
    """Return a JSON representation of a Python string

    """
    def replace(match):
        return ESCAPE_DCT[match.group(0)]
    return '"' + ESCAPE.sub(replace, s) + '"'
</snippet></ROW><ROW><id>2017288</id><snippet>ESCAPE</snippet></ROW><ROW><id>2017288</id><snippet>ESCAPE.sub(replace, s)</snippet></ROW><ROW><id>2017288</id><snippet>ESCAPE</snippet></ROW><ROW><id>2017288</id><snippet>s</snippet></ROW><ROW><id>2017288</id><snippet>replace(match)</snippet></ROW><ROW><id>2017288</id><snippet>re.sub</snippet></ROW><ROW><id>2017288</id><snippet>    def baba(xdummy, ydummy):
        clearscreen()
        bye()

    ...
    tri.write("  Click me!", font = ("Courier", 12, "bold") )
    tri.onclick(baba, 1)
</snippet></ROW><ROW><id>2017288</id><snippet>onclick</snippet></ROW><ROW><id>2017348</id><snippet>zip -qr C:\Backup\20100106143030.zip C:\AB\a C:\AB\b</snippet></ROW><ROW><id>2017348</id><snippet>zip(r'C:AB\a')</snippet></ROW><ROW><id>2017348</id><snippet>zip()</snippet></ROW><ROW><id>2017431</id><snippet>__del__</snippet></ROW><ROW><id>2017431</id><snippet>__del__</snippet></ROW><ROW><id>2017431</id><snippet>def foo(a=[]):
    a.append(time.time())
    return a
</snippet></ROW><ROW><id>2017559</id><snippet>for x in dictionary:
</snippet></ROW><ROW><id>2017608</id><snippet>import wmi
comp = wmi.WMI()

for i in comp.Win32_ComputerSystem():
   print i.TotalPhysicalMemory, "bytes of physical memory"

for os in comp.Win32_OperatingSystem():
   print os.FreePhysicalMemory, "bytes of available memory"
</snippet></ROW><ROW><id>2017751</id><snippet>CURLE_FAILED_INIT (2)
Very early initialization code failed. This is likely to be an internal error or problem.
</snippet></ROW><ROW><id>2017751</id><snippet>import urllib

postdata = urllib.urlencode(data)

resp = urllib.urlopen('https://www.sandbox.paypal.com/cgi-bin/webscr', data=postdata)

# resp is a file-like object, which means you can iterate it,
# or read the whole thing into a string
output = resp.read()

# resp.code returns the HTTP response code
print resp.code # 200

# resp has other useful data, .info() returns a httplib.HTTPMessage
http_message = resp.info()
print http_message['content-length']  # '1536' or the like
print http_message.type  # 'text/html' or the like
print http_message.typeheader # 'text/html; charset=UTF-8' or the like


# Make sure to close
resp.close()
</snippet></ROW><ROW><id>2017751</id><snippet>https://</snippet></ROW><ROW><id>2017913</id><snippet>&gt;&gt;&gt; zip(xrange(1, 7, 2),xrange(2, 8 , 2))
[(1, 2), (3, 4), (5, 6)]
</snippet></ROW><ROW><id>2017980</id><snippet>__new__</snippet></ROW><ROW><id>2017980</id><snippet>__init__</snippet></ROW><ROW><id>2017980</id><snippet>__new__</snippet></ROW><ROW><id>2017980</id><snippet>type.__new__</snippet></ROW><ROW><id>2017980</id><snippet>__new__</snippet></ROW><ROW><id>2017980</id><snippet>__init__</snippet></ROW><ROW><id>2017980</id><snippet>__new__</snippet></ROW><ROW><id>2017980</id><snippet>__init__</snippet></ROW><ROW><id>2017980</id><snippet>__init__</snippet></ROW><ROW><id>2017980</id><snippet>__new__</snippet></ROW><ROW><id>2017980</id><snippet>__init__</snippet></ROW><ROW><id>2017980</id><snippet>__new__</snippet></ROW><ROW><id>2017980</id><snippet>__init__</snippet></ROW><ROW><id>2017980</id><snippet>__init__</snippet></ROW><ROW><id>2017980</id><snippet>int</snippet></ROW><ROW><id>2017980</id><snippet>foo</snippet></ROW><ROW><id>2017980</id><snippet>int</snippet></ROW><ROW><id>2017980</id><snippet>.foo</snippet></ROW><ROW><id>2017980</id><snippet>int</snippet></ROW><ROW><id>2017980</id><snippet>__new__</snippet></ROW><ROW><id>2017980</id><snippet>&gt;&gt;&gt; class x(int):
...   def __new__(cls, i, foo):
...     self = int.__new__(cls, i)
...     return self
...   def __init__(self, i, foo):
...     self.foo = foo
...   __slots__ = 'foo',
... 
&gt;&gt;&gt; a = x(23, 'bah')
&gt;&gt;&gt; print a
23
&gt;&gt;&gt; print a.foo
bah
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2017980</id><snippet>__init__</snippet></ROW><ROW><id>2017980</id><snippet>self.foo = foo</snippet></ROW><ROW><id>2017980</id><snippet>__new__</snippet></ROW><ROW><id>2017980</id><snippet>__init__</snippet></ROW><ROW><id>2018337</id><snippet>dictList</snippet></ROW><ROW><id>2018337</id><snippet>class CsvWriter(object):

  def __init__(self, dictList):
    self.maxline = max(dictList, key=len)
    self.dictList = [dict((k,k) for k in self.maxline)]
    self.dictList.extend(dictList)

  def doWrite(self, outfile):
    csv_file=open(outfile,'ab')
    writer = csv.DictWriter(csv_file,
                            fieldnames=self.maxLine.keys(),
                            restval='notScanned',
                            dialect='excel')
    for dataLine in self.dictList:
        writer.writerow(dataLine)
    csv_file.close()
</snippet></ROW><ROW><id>2018337</id><snippet>cw = CsvWriter(dataList)
for ou in many_outfiles:
  cw.doWrite(ou)
</snippet></ROW><ROW><id>2018574</id><snippet>dict(data)</snippet></ROW><ROW><id>2018574</id><snippet>data</snippet></ROW><ROW><id>2018574</id><snippet>super(SortedDict, self).__init__(data)</snippet></ROW><ROW><id>2018574</id><snippet>super</snippet></ROW><ROW><id>2018574</id><snippet>None</snippet></ROW><ROW><id>2018574</id><snippet>{}</snippet></ROW><ROW><id>2018574</id><snippet>SortedDict</snippet></ROW><ROW><id>2018576</id><snippet>&gt;&gt;&gt; import  tarfile
&gt;&gt;&gt; tar = tarfile.open("test.tar")
&gt;&gt;&gt; tar.getmembers()
</snippet></ROW><ROW><id>2018576</id><snippet>import tarfile,os
os.chdir("/tmp/foo")
tar = tarfile.open("test.tar")
for member in tar.getmembers():
    f=tar.extractfile(member)
    content=f.read()
    print "%s has %d newlines" %(member, content.count("\n"))
    print "%s has %d spaces" % (member,content.count(" "))
    print "%s has %d characters" % (member, len(content))
    sys.exit()
tar.close()
</snippet></ROW><ROW><id>2018587</id><snippet>wrap-width</snippet></ROW><ROW><id>2018587</id><snippet>wrap-mode</snippet></ROW><ROW><id>2018587</id><snippet>renderer.props.wrap_width = 100
renderer.props.wrap_mode = gtk.WRAP_WORD
</snippet></ROW><ROW><id>2018587</id><snippet>wrap-width</snippet></ROW><ROW><id>2019032</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; p = re.compile('(?m)^(.*?)\\s*:\\s*(.*)$')
&gt;&gt;&gt; text = '''person 1: name1
person 2: name2
person 3: name3
...
person N: nameN'''
&gt;&gt;&gt; p.findall(text)
</snippet></ROW><ROW><id>2019032</id><snippet>[('person 1', 'name1'), ('person 2', 'name2'), ('person 3', 'name3'), ('person N', 'nameN')]
</snippet></ROW><ROW><id>2019097</id><snippet>&gt;&gt;&gt; (options, args) = parser.parse_args(sys.argv[1:])
&gt;&gt;&gt; # this is fine
&gt;&gt;&gt;
&gt;&gt;&gt;  (options, args) = parser.parse_args(sys.argv[1:])
  File "&lt;stdin&gt;", line 1
    (options, args) = parser.parse_args(sys.argv[1:])
    ^
SyntaxError: invalid syntax
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2019393</id><snippet>import sys, os

sys.path.append('/Path/To/Django/Projects/')
os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'

from django.core.serializers import serialize
from myproject.myapp import models

model_names = [] # a list of the names of the models you want to export

for model_name in model_names:
    cls = getattr(models, model_name)
    filename = model_name.lower() + ".json"
    file = open(filename, "w")
    file.write(serialize("json", cls.objects.all()))
</snippet></ROW><ROW><id>2019527</id><snippet>father</snippet></ROW><ROW><id>2019527</id><snippet>family</snippet></ROW><ROW><id>2019527</id><snippet>class Father(Family):</snippet></ROW><ROW><id>2019527</id><snippet>Family.Father.method()</snippet></ROW><ROW><id>2019527</id><snippet>module</snippet></ROW><ROW><id>2019527</id><snippet>.py file</snippet></ROW><ROW><id>2019527</id><snippet>__init__</snippet></ROW><ROW><id>2019527</id><snippet>if __name__ ...</snippet></ROW><ROW><id>2019527</id><snippet>__init__.py</snippet></ROW><ROW><id>2019527</id><snippet>Father</snippet></ROW><ROW><id>2019527</id><snippet>Mother</snippet></ROW><ROW><id>2019527</id><snippet>Family</snippet></ROW><ROW><id>2019527</id><snippet>Father</snippet></ROW><ROW><id>2019527</id><snippet>Mother</snippet></ROW><ROW><id>2019571</id><snippet>class A(object):
    def __init__(self):
        self.val = 100

    def __str__(self):
        """What a looks like if your print it"""
        return 'A:'+str(self.val)

import pickle
a = A()
a_pickled = pickle.dumps(a)
a.val = 200
a2 = pickle.loads(a_pickled)
print 'the original a'
print a
print # newline
print 'a2 - a clone of a before we changed the value'
print a2
print 

print 'Why are you trying to use __setstate__, not __init__?'
print
</snippet></ROW><ROW><id>2019571</id><snippet>the original a
A:200

a2 - a clone of a before we changed the value
A:100
</snippet></ROW><ROW><id>2019571</id><snippet>class B(object):
    def __init__(self):
        print 'Perhaps __init__ must not happen twice?'
        print
        self.val = 100

    def __str__(self):
        """What a looks like if your print it"""
        return 'B:'+str(self.val)

    def __getstate__(self):
        return self.val

    def __setstate__(self,val):
        self.val = val

b = B()
b_pickled = pickle.dumps(b)
b.val = 200
b2 = pickle.loads(b_pickled)
print 'the original b'
print b
print # newline
print 'b2 - b clone of b before we changed the value'
print b2
</snippet></ROW><ROW><id>2019571</id><snippet>Why are you trying to use __setstate__, not __init__?

Perhaps __init__ must not happen twice?

the original b
B:200

b2 - b clone of b before we changed the value
B:100
</snippet></ROW><ROW><id>2019579</id><snippet>version.mk</snippet></ROW><ROW><id>2019579</id><snippet>&gt;&gt;&gt; exec(open("version.mk"))
&gt;&gt;&gt; print VERSION_ID
1
</snippet></ROW><ROW><id>2019579</id><snippet>#version no is here
VERSION_ID=0.0.2

#some more info here
....
</snippet></ROW><ROW><id>2019579</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; VERSION_ID=map(int,re.search("VERSION_ID\s*=\s*(\S+)",open("version.mk").read()).group(1).split("."))
&gt;&gt;&gt; VERSION_ID
[0, 0, 2]
</snippet></ROW><ROW><id>2019598</id><snippet>&gt;&gt;&gt; 1.1
1.1000000000000001
</snippet></ROW><ROW><id>2019598</id><snippet>1.1</snippet></ROW><ROW><id>2019598</id><snippet>&gt;&gt;&gt; 11/1.1
10.0
</snippet></ROW><ROW><id>2019598</id><snippet>//</snippet></ROW><ROW><id>2019598</id><snippet>math.floor()</snippet></ROW><ROW><id>2019598</id><snippet>a == (a//b)*b + a%b</snippet></ROW><ROW><id>2019598</id><snippet>Decimal</snippet></ROW><ROW><id>2019845</id><snippet>-c mingw32</snippet></ROW><ROW><id>2019885</id><snippet>string += str(getbingint) + ":" + str("%.2f") % getsmallint + "," 
</snippet></ROW><ROW><id>2019885</id><snippet>string += str(getbingint) + ":" + str("%.2f") % (getsmallint*1.225) + "," 
</snippet></ROW><ROW><id>2019950</id><snippet>import foo</snippet></ROW><ROW><id>2019950</id><snippet>foo</snippet></ROW><ROW><id>2019950</id><snippet>from foo import something</snippet></ROW><ROW><id>2019950</id><snippet>foo</snippet></ROW><ROW><id>2019950</id><snippet>foo</snippet></ROW><ROW><id>2019950</id><snippet>int</snippet></ROW><ROW><id>2019950</id><snippet>str</snippet></ROW><ROW><id>2019950</id><snippet>foo</snippet></ROW><ROW><id>2019950</id><snippet>&gt;&gt;&gt; class N(object):
...   def __init__(self, value):
...     self.value = value
&gt;&gt;&gt; n = N(3)
&gt;&gt;&gt; value = n.value
&gt;&gt;&gt; print value, n.value
3 3
&gt;&gt;&gt; value = 4
&gt;&gt;&gt; print value, n.value
4 3
</snippet></ROW><ROW><id>2019950</id><snippet>foo</snippet></ROW><ROW><id>2019957</id><snippet>struct</snippet></ROW><ROW><id>2019957</id><snippet>&gt;&gt;&gt; pkt_bytes = [0x02, 0x07, 0xff, 0xff, 0x00, 0x03]
&gt;&gt;&gt; myint = 123
&gt;&gt;&gt; pkt_bytes[3:5] = [ord(b) for b in struct.pack("H",myint)]
&gt;&gt;&gt; pkt_bytes
[2, 7, 255, 123, 0, 3]
</snippet></ROW><ROW><id>2019957</id><snippet>pkt_bytes</snippet></ROW><ROW><id>2019957</id><snippet>!</snippet></ROW><ROW><id>2019957</id><snippet>&gt;&gt;&gt; struct.pack("!H",5000)
'\x13\x88'
</snippet></ROW><ROW><id>2019973</id><snippet>var q = from el in li
        orderby foo(el)
        select el;
li = q.ToList();
</snippet></ROW><ROW><id>2020083</id><snippet>#! /usr/bin/env python

import foo

def fullname(o):
  return o.__module__ + "." + o.__class__.__name__

bar = foo.Bar()
print fullname(bar)
</snippet></ROW><ROW><id>2020083</id><snippet>Bar</snippet></ROW><ROW><id>2020083</id><snippet>class Bar(object):
  def __init__(self, v=42):
    self.val = v
</snippet></ROW><ROW><id>2020083</id><snippet>$ ./prog.py
foo.Bar
</snippet></ROW><ROW><id>2020122</id><snippet>easy_install_pre.exe %1
unzip_eggs.py %1
</snippet></ROW><ROW><id>2020417</id><snippet>if len(data) &gt; 102400:
  print "Skipping file which is too large, at %d bytes" % len(data)
else:
  process(data) # The normal processing
</snippet></ROW><ROW><id>2020550</id><snippet>class YesNo(Criteria):
    def __init__(self,  name,  ctype):
        Criteria.__init__(self)            # &lt;&lt;&lt;&lt;----- This was missing before
        self.Name = name
        self.Index = ctype
</snippet></ROW><ROW><id>2020550</id><snippet>class Criteria(QItemDelegate):
    def __init__(self):
        QItemDelegate.__init__(self)       # &lt;&lt;&lt;&lt;----- This was missing before
</snippet></ROW><ROW><id>2020704</id><snippet>try:
    result = simulate(open("myfile"))
except SimulationException:
    print "error parsing stream"
else:
    if result:
        print "result pass"
    else:
        print "result fail"

# execution continues from here, regardless of exception or not
</snippet></ROW><ROW><id>2020913</id><snippet>#! /usr/bin/python

import re

fn = "version.mk"
omk = open(fn).readlines()
nmk = open(fn, "w")
r = re.compile(r'(VERSION_ID\s*=\s*)(\S+)')

for l in omk:
    m1 = r.match(l)
    if m1:
        VERSION_ID=map(int,m1.group(2).split("."))
        VERSION_ID[2]+=1 # increment version
        l = r.sub(r'\g&lt;1&gt;' + '.'.join(['%s' % (v) for v in VERSION_ID]), l)
    nmk.write(l)
nmk.close()
</snippet></ROW><ROW><id>2021187</id><snippet>__contains__</snippet></ROW><ROW><id>2021187</id><snippet>class everything(object):
    def __contains__(self, _):
        return True           

for x in (1,2,3):
    print x in everything()
</snippet></ROW><ROW><id>2021400</id><snippet>execfile</snippet></ROW><ROW><id>2021400</id><snippet>execfile(filename)
</snippet></ROW><ROW><id>2021586</id><snippet>Range</snippet></ROW><ROW><id>2021586</id><snippet>import urllib2
req = urllib2.Request('http://www.python.org/')
#
# Here we request that bytes 18000--19000 be downloaded.
# The range is inclusive, and starts at 0.
#
req.headers['Range'] = 'bytes=%s-%s' % (18000, 19000)
f = urllib2.urlopen(req)
# This shows you the *actual* bytes that have been downloaded.
range=f.headers.get('Content-Range')
print(range)
# bytes 18000-18030/18031
print(repr(f.read()))
# '  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\n\n'
</snippet></ROW><ROW><id>2021586</id><snippet>Content-Range</snippet></ROW><ROW><id>2021586</id><snippet>Range</snippet></ROW><ROW><id>2022044</id><snippet>+</snippet></ROW><ROW><id>2022044</id><snippet>array.append</snippet></ROW><ROW><id>2022044</id><snippet>extend()</snippet></ROW><ROW><id>2022278</id><snippet>class Quiz(db.Model):
    # Data specific to your Quiz: number, name, times shown, etc
    questions = db.ListProperty(db.Key)

class Questions(db.Model):
    question = db.StringProperty()
    choices = db.StringListProperty() # List of possible anwsers
    correct = db.IntegerpProperty() # index of string in choices that is correct
</snippet></ROW><ROW><id>2022303</id><snippet>yield</snippet></ROW><ROW><id>2022303</id><snippet>next()</snippet></ROW><ROW><id>2022303</id><snippet>send()</snippet></ROW><ROW><id>2022303</id><snippet>next()</snippet></ROW><ROW><id>2022303</id><snippet>cr.send(1)
</snippet></ROW><ROW><id>2022303</id><snippet>1</snippet></ROW><ROW><id>2022303</id><snippet>c</snippet></ROW><ROW><id>2022303</id><snippet>cr.next()</snippet></ROW><ROW><id>2022303</id><snippet>cr.send(None)</snippet></ROW><ROW><id>2022407</id><snippet>admin.py</snippet></ROW><ROW><id>2022512</id><snippet>diff</snippet></ROW><ROW><id>2022512</id><snippet>stdin</snippet></ROW><ROW><id>2022589</id><snippet>py2exe_opciones = {'py2exe': {"includes":["sip"]}}
script = [{"script":"pyqt.py"}]

setup(windows=script,options=py2exe_opciones)
</snippet></ROW><ROW><id>2023389</id><snippet>head</snippet></ROW><ROW><id>2023389</id><snippet>tail</snippet></ROW><ROW><id>2023389</id><snippet>head = theurl[:theurl.find('/')]
print head
tail = theurl[theurl.find('/'):]
print tail
</snippet></ROW><ROW><id>2023389</id><snippet>head</snippet></ROW><ROW><id>2023389</id><snippet>tail</snippet></ROW><ROW><id>2023389</id><snippet>head</snippet></ROW><ROW><id>2023389</id><snippet>http://myhost.com:8080/blah/blah
</snippet></ROW><ROW><id>2023435</id><snippet>socket.gethostbyname('yahoo.com')</snippet></ROW><ROW><id>2023524</id><snippet>import simplejson as json 
myfruits = {'fruit':4, 'color':11}
json.dumps(myfruits)
</snippet></ROW><ROW><id>2023565</id><snippet>using System;
using System.Reflection;

namespace ConsoleApplication1
{
    class Program
    {
        public Int32 Add(Int32 a, Int32 b) { return a + b; }
        static void Main(string[] args)
        {
            Program obj = new Program();

            MethodInfo m = obj.GetType().GetMethod("Add");
            Int32 result = (Int32)m.Invoke(obj, new Object[] { 1, 2 });
        }
    }
}
</snippet></ROW><ROW><id>2023709</id><snippet>import __builtin__
openfiles = set()
oldfile = __builtin__.file
class newfile(oldfile):
    def __init__(self, *args):
        self.x = args[0]
        print "### OPENING %s ###" % str(self.x)            
        oldfile.__init__(self, *args)
        openfiles.add(self)

    def close(self):
        print "### CLOSING %s ###" % str(self.x)
        oldfile.close(self)
        openfiles.remove(self)
oldopen = __builtin__.open
def newopen(*args):
    return newfile(*args)
__builtin__.file = newfile
__builtin__.open = newopen

def printOpenFiles():
    print "### %d OPEN FILES: [%s]" % (len(openfiles), ", ".join(f.x for f in openfiles))
</snippet></ROW><ROW><id>2023920</id><snippet>urllib.request</snippet></ROW><ROW><id>2023920</id><snippet>import urllib.request
f = urllib.request.urlopen("http://stackoverflow.com")
print(f.read())
</snippet></ROW><ROW><id>2024295</id><snippet>&gt;&gt;&gt; import functools
&gt;&gt;&gt; f = lambda selflambda, x=x, *y: foo(x, y, selflambda)
&gt;&gt;&gt; f = functools.partial(f, f)
</snippet></ROW><ROW><id>2024587</id><snippet>soup1 = BeautifulSoup(''.join(str(t) for t in tags)) 
</snippet></ROW><ROW><id>2024587</id><snippet>from pyparsing import makeHTMLTags, originalTextFor, SkipTo, Combine

# makeHTMLTags defines HTML tag patterns for given tag string
aTag,aEnd = makeHTMLTags("A")

# makeHTMLTags by default returns a structure containing
# the tag's attributes - we just want the original input text
aTag = originalTextFor(aTag)
aEnd = originalTextFor(aEnd)

# define an expression for a full link, and use a parse action to
# combine the returned tokens into a single string
aLink = aTag + SkipTo(aEnd) + aEnd
aLink.setParseAction(lambda tokens : ''.join(tokens))

# extract links from the input html
links = aLink.searchString(html)

# build list of strings for output
out = []
out.append(pre)
out.extend(['  '+lnk[0] for lnk in links])
out.append(post)

print '\n'.join(out)
</snippet></ROW><ROW><id>2024587</id><snippet>&lt;html&gt;&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;
  &lt;a href="http://www.reddit.com/r/pics/" &gt;pics&lt;/a&gt;
  &lt;a href="http://www.reddit.com/r/reddit.com/" &gt;reddit.com&lt;/a&gt;
  &lt;a href="http://www.reddit.com/r/politics/" &gt;politics&lt;/a&gt;
  &lt;a href="http://www.reddit.com/r/funny/" &gt;funny&lt;/a&gt;
  &lt;a href="http://www.reddit.com/r/AskReddit/" &gt;AskReddit&lt;/a&gt;
  &lt;a href="http://www.reddit.com/r/WTF/" &gt;WTF&lt;/a&gt;
  .
  .
  .
  &lt;a href="http://reddit.com/help/privacypolicy" &gt;Privacy Policy&lt;/a&gt;
  &lt;a href="#" onclick="return hidecover(this)"&gt;close this window&lt;/a&gt;
  &lt;a href="http://www.reddit.com/feedback" &gt;volunteer to translate&lt;/a&gt;
  &lt;a href="#" onclick="return hidecover(this)"&gt;close this window&lt;/a&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>2024599</id><snippet>-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-- 
-- $Id: cleanGeometry.sql 2008-04-24 10:30Z Dr. Horst Duester $
--
-- cleanGeometry - remove self- and ring-selfintersections from 
--                 input Polygon geometries 
-- http://www.sogis.ch
-- Copyright 2008 SO!GIS Koordination, Kanton Solothurn, Switzerland
-- Version 1.0
-- contact: horst dot duester at bd dot so dot ch
--
-- This is free software; you can redistribute and/or modify it under
-- the terms of the GNU General Public Licence. See the COPYING file.
-- This software is without any warrenty and you use it at your own risk
--  
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


CREATE OR REPLACE FUNCTION cleanGeometry(geometry)
  RETURNS geometry AS
$BODY$DECLARE
  inGeom ALIAS for $1;
  outGeom geometry;
  tmpLinestring geometry;

Begin

  outGeom := NULL;

-- Clean Process for Polygon 
  IF (GeometryType(inGeom) = 'POLYGON' OR GeometryType(inGeom) = 'MULTIPOLYGON') THEN

-- Only process if geometry is not valid, 
-- otherwise put out without change
    if not isValid(inGeom) THEN

-- create nodes at all self-intersecting lines by union the polygon boundaries
-- with the startingpoint of the boundary.  
      tmpLinestring := st_union(st_multi(st_boundary(inGeom)),st_pointn(boundary(inGeom),1));
      outGeom = buildarea(tmpLinestring);      
      IF (GeometryType(inGeom) = 'MULTIPOLYGON') THEN      
        RETURN st_multi(outGeom);
      ELSE
        RETURN outGeom;
      END IF;
    else    
      RETURN inGeom;
    END IF;


------------------------------------------------------------------------------
-- Clean Process for LINESTRINGS, self-intersecting parts of linestrings 
-- will be divided into multiparts of the mentioned linestring 
------------------------------------------------------------------------------
  ELSIF (GeometryType(inGeom) = 'LINESTRING') THEN

-- create nodes at all self-intersecting lines by union the linestrings
-- with the startingpoint of the linestring.  
    outGeom := st_union(st_multi(inGeom),st_pointn(inGeom,1));
    RETURN outGeom;
  ELSIF (GeometryType(inGeom) = 'MULTILINESTRING') THEN 
    outGeom := multi(st_union(st_multi(inGeom),st_pointn(inGeom,1)));
    RETURN outGeom;
  ELSIF (GeometryType(inGeom) = '&lt;NULL&gt;' OR GeometryType(inGeom) = 'GEOMETRYCOLLECTION') THEN 
    RETURN NULL;
  ELSE 
    RAISE NOTICE 'The input type % is not supported %',GeometryType(inGeom),st_summary(inGeom);
    RETURN inGeom;
  END IF;     
End;$BODY$
  LANGUAGE 'plpgsql' VOLATILE;
</snippet></ROW><ROW><id>2024617</id><snippet>customerID = self.cursorMySQL.fetchone()[0]
</snippet></ROW><ROW><id>2024617</id><snippet>def autofetch_value(self, sql, args=None):
    """ return a single value from a single row or None if there is no row
    """
    self.execute(sql, args)
    returned_val = None

    row = self.fetchone()
    if None != row:
        returned_val = row[0]

    return returned_val
</snippet></ROW><ROW><id>2024617</id><snippet>def clean_table(self,tableName):
    cleanTableQuery = """TRUNCATE TABLE %s;""" % (tableName,)
    self.cursorMySQL.execute(cleanTableQuery)

    setIndexQuery = """ALTER TABLE %s AUTO_INCREMENT = 1;""" % (tableName,)
    self.cursorMySQL.execute(setIndexQuery)
</snippet></ROW><ROW><id>2024713</id><snippet>from django import template
register = template.Library()

def dict_get(value, arg):
    #custom template tag used like so:
    #{{dictionary|dict_get:var}}
    #where dictionary is duh a dictionary and var is a variable representing
    #one of it's keys

    return value[arg]

register.filter('dict_get',dict_get)
</snippet></ROW><ROW><id>2024713</id><snippet>{% for employee, dependents in company_dict|company %}
</snippet></ROW><ROW><id>2025038</id><snippet>expose_request=True</snippet></ROW><ROW><id>2025038</id><snippet>def echo(environ, *args):
    return args
</snippet></ROW><ROW><id>2025038</id><snippet>expose_request=False</snippet></ROW><ROW><id>2025038</id><snippet>from pyamf.remoting.gateway import expose_request
from pyamf.remoting.gateway.wsgi import WSGIGateway

@expose_request
def some_service_method(request, *args):
    return ['some', 'thing']

services = {
    'a_service_method': some_service_method
}

gw = WSGIGateway(services, expose_request=False)
</snippet></ROW><ROW><id>2025038</id><snippet>TypeError</snippet></ROW><ROW><id>2025038</id><snippet>def update(obj, force=False):
    pass
</snippet></ROW><ROW><id>2025038</id><snippet>from pyamf.remoting.client import RemotingService

path = 'http://localhost:8080/gateway/'
gw = RemotingService(path)
service = gw.getService('myService')

print service.update('foo', True)
</snippet></ROW><ROW><id>2025092</id><snippet>'ascii'</snippet></ROW><ROW><id>2025361</id><snippet>int i = 5; // Okay.
i = "5";   // Illegal! i can only hold integers.
</snippet></ROW><ROW><id>2025361</id><snippet>&gt;&gt;&gt; 1 + 1          # Add two integers.
2
&gt;&gt;&gt; "1" + "1"      # Concatenate two strings.
'11'
&gt;&gt;&gt; 1 + int("1")   # Add two integers.
2
&gt;&gt;&gt; "1" + str(1)   # Concatenate two strings.
'11'
&gt;&gt;&gt; 1 + "1"        # Undefined! Adding integers and strings is meaningless.
Traceback (most recent call last):
  File "", line 5, in ?
TypeError: unsupported operand type(s) for +: 'int' and 'str'
</snippet></ROW><ROW><id>2025361</id><snippet>$x = 1 + "1"; // x is 2
</snippet></ROW><ROW><id>2025361</id><snippet>dynamic</snippet></ROW><ROW><id>2025544</id><snippet> string = string.split('[')[0].strip()
</snippet></ROW><ROW><id>2025897</id><snippet>if r == "Y" or "y" or "yes" or"yep" or"yeah":
</snippet></ROW><ROW><id>2025897</id><snippet>if r in ["Y","y","yes","yep","yeah"] :
</snippet></ROW><ROW><id>2025897</id><snippet>r = raw_input('\nDo you want play the video?\n\nY:Yes  N:No\n\n').lower()
if r in ["y","yes","yep","yeah"] :
</snippet></ROW><ROW><id>2025959</id><snippet>traceback.extract_stack()</snippet></ROW><ROW><id>2026050</id><snippet>str</snippet></ROW><ROW><id>2026050</id><snippet>string</snippet></ROW><ROW><id>2026050</id><snippet>&gt;&gt;&gt; str
&lt;class 'str'&gt;
&gt;&gt;&gt; str(42)
'42'
&gt;&gt;&gt; import string
&gt;&gt;&gt; string
&lt;module 'string' from '/usr/lib/python3.1/string.py'&gt;
&gt;&gt;&gt; string.digits
'0123456789'
</snippet></ROW><ROW><id>2026050</id><snippet>str</snippet></ROW><ROW><id>2026050</id><snippet>o</snippet></ROW><ROW><id>2026050</id><snippet>str(o)</snippet></ROW><ROW><id>2026050</id><snippet>string</snippet></ROW><ROW><id>2026073</id><snippet>&gt;&gt;&gt; '\xe3\x81\x82'.decode('utf-8')    # three top-bit-set bytes, representing one character
u'\u3042'                             # Hiragana letter A

&gt;&gt;&gt; u'\u3042'.encode('shift-jis')
'\x82\xa0'                            # only requires two bytes in the Shift-JIS encoding

&gt;&gt;&gt; unicode('\x82\xa0', 'shift-jis')  # alternative way of doing a decode
u'\u3042'
</snippet></ROW><ROW><id>2026455</id><snippet>class Root:
    def index(self):
        return "Hello!"
    index.exposed = True

    def default(self, attr='abc'):
        return "Page not Found!"
    default.exposed = True
</snippet></ROW><ROW><id>2026554</id><snippet>from IPython import embed as shell
</snippet></ROW><ROW><id>2026554</id><snippet>def start_ipython():
   from IPython.Shell import IPShellEmbed
   shell = IPShellEmbed()
   shell()
</snippet></ROW><ROW><id>2026554</id><snippet>start_ipython</snippet></ROW><ROW><id>2026554</id><snippet>locals()</snippet></ROW><ROW><id>2026554</id><snippet>def start_python():
   import code
   code.interact()
</snippet></ROW><ROW><id>2026554</id><snippet>ImportError</snippet></ROW><ROW><id>2026666</id><snippet>class A(object):
  def __new__(cls):
    class C(cls, B):
      pass
    self = object.__new__(C)
    return self
</snippet></ROW><ROW><id>2026821</id><snippet>mod3.py</snippet></ROW><ROW><id>2026821</id><snippet>mod2</snippet></ROW><ROW><id>2026821</id><snippet>mod2</snippet></ROW><ROW><id>2026821</id><snippet>mod2</snippet></ROW><ROW><id>2026821</id><snippet>mod2</snippet></ROW><ROW><id>2026821</id><snippet>mod2</snippet></ROW><ROW><id>2026916</id><snippet>data_files</snippet></ROW><ROW><id>2026916</id><snippet>distutils</snippet></ROW><ROW><id>2026916</id><snippet>data_files</snippet></ROW><ROW><id>2026916</id><snippet>(directory, files)</snippet></ROW><ROW><id>2026916</id><snippet>setup(...,
      data_files=[('/etc', ['cfg/config1.ini', 'cfg/config2.ini']),
                  ('/etc/init.d', ['bin/initscript1'])],
      ....
     )
</snippet></ROW><ROW><id>2026916</id><snippet>/home</snippet></ROW><ROW><id>2026916</id><snippet>.read()</snippet></ROW><ROW><id>2026916</id><snippet>ConfigParser</snippet></ROW><ROW><id>2026916</id><snippet>files_read = cfgparserobj.read(['/etc/config1.ini', 
                                os.path.expanduser('~/.config1.ini')])
for fname in files_read:
    print "Reading config from", fname
</snippet></ROW><ROW><id>2026916</id><snippet>/etc/config1.ini</snippet></ROW><ROW><id>2026916</id><snippet>.config1.ini</snippet></ROW><ROW><id>2027033</id><snippet>import setup</snippet></ROW><ROW><id>2027033</id><snippet>setuptools</snippet></ROW><ROW><id>2027033</id><snippet>distutils</snippet></ROW><ROW><id>2027033</id><snippet>pyc</snippet></ROW><ROW><id>2027033</id><snippet>.py</snippet></ROW><ROW><id>2027033</id><snippet>.pyc</snippet></ROW><ROW><id>2027311</id><snippet>__iadd__()</snippet></ROW><ROW><id>2027311</id><snippet>+=, -=, *=, /=, //=, %=, **=, &lt;&lt;=, &gt;&gt;=, &amp;=, ^=, |=</snippet></ROW><ROW><id>2027311</id><snippet>self</snippet></ROW><ROW><id>2027311</id><snippet>self</snippet></ROW><ROW><id>2027311</id><snippet>x += y</snippet></ROW><ROW><id>2027311</id><snippet>x</snippet></ROW><ROW><id>2027311</id><snippet>__iadd__()</snippet></ROW><ROW><id>2027311</id><snippet>x.__iadd__(y)</snippet></ROW><ROW><id>2027311</id><snippet>+=</snippet></ROW><ROW><id>2027311</id><snippet>c</snippet></ROW><ROW><id>2027311</id><snippet>+=</snippet></ROW><ROW><id>2027311</id><snippet>&gt;&gt;&gt; c = 3
&gt;&gt;&gt; print(c, id(c))
3 505389080
&gt;&gt;&gt; c += c
&gt;&gt;&gt; print(c, id(c))
6 505389128
</snippet></ROW><ROW><id>2027409</id><snippet>&gt;&gt;&gt; 'ID {0}, {1}, and {2}.'.format(*ID)
'ID 0, 1, and 2.'
</snippet></ROW><ROW><id>2027583</id><snippet>def b():
    ID = [0, 1, 2]
    ID2 = ('ID=%d.%d.%d' % tuple(ID))
    return ID2

if __name__ == '__main__': ID2 = b()

def c(ID2):
    print ID2

if __name__ == '__main__': myObject = c(ID2)
</snippet></ROW><ROW><id>2027583</id><snippet>myObject = c(ID2)</snippet></ROW><ROW><id>2027846</id><snippet>lat = float(request.GET.get('lat'))
lng = float(request.GET.get('lng'))
a = Authority.objects.get(area__contains=Point(lng, lat))
if a:
    json = simplejson.dumps({'name': a.name, 
                             'area': "{replaceme}",
                             'id': a.id}), 
    return HttpResponse(json.replace('"{replaceme}"', a.area.geojson),
                        mimetype='application/json')
</snippet></ROW><ROW><id>2028260</id><snippet>def doit( s ):

    # with some side-effect on a
    a = [] 

    def f1( s, m ):
        a.append( 1 )
        print 'f1', a, s, m

    def f2( s, m ):
        a.append( 2 )
        print 'f2', a, s, m

    def f3( s, m ):
        a.append( 3 )
        print 'f3', a, s, m

    re1 = re.compile( 'one' )
    re2 = re.compile( 'two' )
    re3 = re.compile( 'three' )


    func_re_list = (
        ( f1, re1 ), 
        ( f2, re2 ), 
        ( f3, re3 ),
    )
    for myfunc, myre in func_re_list:
        m = myre.match( s )
        if m:
            myfunc( s, m )
            break


doit( 'one' ) 
doit( 'two' ) 
doit( 'three' ) 
</snippet></ROW><ROW><id>2028441</id><snippet>import operator
...
sortcompanies.sort(key=operator.itemgetter("companyname"))
</snippet></ROW><ROW><id>2028441</id><snippet>companyid</snippet></ROW><ROW><id>2028441</id><snippet>companyname</snippet></ROW><ROW><id>2028567</id><snippet>from django.contrib.auth.models import User

User._meta.get_field('username')._unique = False
</snippet></ROW><ROW><id>2028567</id><snippet>auth_user</snippet></ROW><ROW><id>2028567</id><snippet>auth_user</snippet></ROW><ROW><id>2028743</id><snippet>#!/usr/bin/env python
from pylab import *

def f(t):
    s1 = cos(2*pi*t)
    e1 = exp(-t)
    return multiply(s1,e1)

t1 = arange(0.0, 5.0, 0.1)
t2 = arange(0.0, 5.0, 0.02)
t3 = arange(0.0, 2.0, 0.01)

sub1 = subplot(211)
l = plot(t1, f(t1), 'bo', t2, f(t2), 'k--', markerfacecolor='green')
grid(True)
title('A tale of 2 subplots')
ylabel('Damped oscillation')

## I ADDED THIS
autoAxis = sub1.axis()
rec = Rectangle((autoAxis[0]-0.7,autoAxis[2]-0.2),(autoAxis[1]-autoAxis[0])+1,(autoAxis[3]-autoAxis[2])+0.4,fill=False,lw=2)
rec = sub1.add_patch(rec)
rec.set_clip_on(False)

subplot(212)
plot(t3, cos(2*pi*t3), 'r.')
grid(True)
xlabel('time (s)')
ylabel('Undamped')

savefig('test.png')
</snippet></ROW><ROW><id>2028946</id><snippet># -*- coding: UTF-8 -*-
...
accents = { u'a': [u'à', u'ã', u'á', u'â'],
            u'e': [u'é', u'è', u'ê', u'ë'],
            u'i': [u'î', u'ï'],
            u'u': [u'ù', u'ü', u'û'],
            u'o': [u'ô', u'ö'] }
</snippet></ROW><ROW><id>2028946</id><snippet>glob</snippet></ROW><ROW><id>2028946</id><snippet>import sys
file_name = file_name.decode(sys.getfilesystemencoding())
</snippet></ROW><ROW><id>2028946</id><snippet>u</snippet></ROW><ROW><id>2029207</id><snippet>process.stdout.readlines()</snippet></ROW><ROW><id>2029207</id><snippet>communicate()</snippet></ROW><ROW><id>2029207</id><snippet>process.stdout.readline()</snippet></ROW><ROW><id>2029265</id><snippet>def fake_light(image, tilesize=50):
    WIDTH, HEIGHT = i.size
    for x in xrange(0, WIDTH, tilesize):
        for y in xrange(0, HEIGHT, tilesize):
            br = int(255 * (1 - x / float(WIDTH) * y /float(HEIGHT)))
            tile = Image.new("RGBA", (tilesize, tilesize), (255,255,255,128))
            image.paste((br,br,br), (x, y, x + tilesize, y + tilesize), mask=tile)
</snippet></ROW><ROW><id>2029529</id><snippet>jQuery(function($) {
    $('div.inline-group').sortable({
        items: 'div.inline-related',
        handle: 'h3:first',
        update: function() {
            $(this).find('div.inline-related').each(function(i) {
                if ($(this).find('input[id$=chair_id]').val() ||
                  $(this).find('select[id$=member]').val() ||
                      $(this).find('select[id$=description]').val()) {
                    $(this).find('input[id$=order]').val(i+1);
                }
            });
        }
    });
    $('div.inline-related h3').css('cursor', 'move');
    $('div.inline-related').find('input[id$=order]').parent('div').hide();
});
</snippet></ROW><ROW><id>2029546</id><snippet>reload</snippet></ROW><ROW><id>2029546</id><snippet>foo.py</snippet></ROW><ROW><id>2029546</id><snippet>print "I am being imported"
</snippet></ROW><ROW><id>2029546</id><snippet>   &gt;&gt;&gt; import foo
   Hello, I'm being imported
   &gt;&gt;&gt; import foo # Will not print the statement
   &gt;&gt;&gt; reload(foo) # Will print it again
   Hello, I'm being imported
</snippet></ROW><ROW><id>2030027</id><snippet>import urllib2, sys

def chunk_report(bytes_so_far, chunk_size, total_size):
   percent = float(bytes_so_far) / total_size
   percent = round(percent*100, 2)
   sys.stdout.write("Downloaded %d of %d bytes (%0.2f%%)\r" % 
       (bytes_so_far, total_size, percent))

   if bytes_so_far &gt;= total_size:
      sys.stdout.write('\n')

def chunk_read(response, chunk_size=8192, report_hook=None):
   total_size = response.info().getheader('Content-Length').strip()
   total_size = int(total_size)
   bytes_so_far = 0

   while 1:
      chunk = response.read(chunk_size)
      bytes_so_far += len(chunk)

      if not chunk:
         break

      if report_hook:
         report_hook(bytes_so_far, chunk_size, total_size)

   return bytes_so_far

if __name__ == '__main__':
   response = urllib2.urlopen('http://www.ebay.com');
   chunk_read(response, report_hook=chunk_report)
</snippet></ROW><ROW><id>2030051</id><snippet>#+BEGIN_SRC python</snippet></ROW><ROW><id>2030051</id><snippet>htmlize.el</snippet></ROW><ROW><id>2030081</id><snippet>import random, string

def randomword(length):
   return ''.join(random.choice(string.lowercase) for i in range(length))
</snippet></ROW><ROW><id>2030081</id><snippet>&gt;&gt;&gt; randomword(10)
'vxnxikmhdc'
&gt;&gt;&gt; randomword(10)
'ytqhdohksy'
</snippet></ROW><ROW><id>2030142</id><snippet>datetime</snippet></ROW><ROW><id>2030142</id><snippet>import datetime</snippet></ROW><ROW><id>2030142</id><snippet>datetime</snippet></ROW><ROW><id>2030142</id><snippet>from datetime import datetime</snippet></ROW><ROW><id>2030142</id><snippet>()</snippet></ROW><ROW><id>2030142</id><snippet>date = models.DateField(_("Date"), default=datetime.date.today)
</snippet></ROW><ROW><id>2030493</id><snippet>u = numpy.poly1d(numpy.array([1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1], dtype=numpy.int64))
</snippet></ROW><ROW><id>2030905</id><snippet>im.save(thumbnail_file, 'JPEG', quality=90)
</snippet></ROW><ROW><id>2030984</id><snippet>testcode</snippet></ROW><ROW><id>2030984</id><snippet>testoutput</snippet></ROW><ROW><id>2030984</id><snippet>.. testcode::

   print 'Output     text.'

.. testoutput::
   :hide:
   :options: -ELLIPSIS, +NORMALIZE_WHITESPACE

   Output text.
</snippet></ROW><ROW><id>2031297</id><snippet>import time
import datetime

# if for some reason this script is still running
# after a year, we'll stop after 365 days
for i in xrange(0,365):
    # sleep until 2AM
    t = datetime.datetime.today()
    future = datetime.datetime(t.year,t.month,t.day,2,0)
    if t.hour &gt;= 2:
        future += datetime.timedelta(days=1)
    time.sleep((future-t).seconds)

    # do 2AM stuff
</snippet></ROW><ROW><id>2031422</id><snippet>updateIndexMySQLQuery = """UPDATE %s 
SET numberID=%%s WHERE numberID=%%s;""" % (tableName,)
</snippet></ROW><ROW><id>2031474</id><snippet>t1 = 'one 1\ntwo 2\nthree 3'.splitlines()</snippet></ROW><ROW><id>2031474</id><snippet>from difflib import ndiff
t1 = 'one 1\ntwo 2\nthree 3'.splitlines()
t2 = 'one 1\ntwo 29\nthree 3'.splitlines()
def lj(line):
    rval = '2' in line
    print("lj: line=%r, rval=%s" % (line, rval))
    return rval
d = list(ndiff(t1, t2    )); print("%d %r\n" %  (1, d))
d = list(ndiff(t1, t2, lj)); print("%d %r\n" %  (2, d))
d = list(ndiff(t2, t1, lj)); print("%d %r\n" %  (3, d))
</snippet></ROW><ROW><id>2031474</id><snippet>1 ['  one 1', '- two 2', '+ two 29', '?      +\n', '  three 3']

lj: line='one 1', rval=False
lj: line='two 29', rval=True
lj: line='three 3', rval=False
2 ['  one 1', '- two 2', '+ two 29', '?      +\n', '  three 3']

lj: line='one 1', rval=False
lj: line='two 2', rval=True
lj: line='three 3', rval=False
3 ['  one 1', '- two 29', '?      -\n', '+ two 2', '  three 3']
</snippet></ROW><ROW><id>2031474</id><snippet>t3 = 'one 1\n   \ntwo 2\n'.splitlines()
t4 = 'one 1\n\n#\n\ntwo 2\n'.splitlines()
d = list(ndiff(t3, t4      )); print("%d %r\n" %  (4, d))
d = list(ndiff(t4, t3      )); print("%d %r\n" %  (5, d))
d = list(ndiff(t3, t4, None)); print("%d %r\n" %  (6, d))
d = list(ndiff(t4, t3, None)); print("%d %r\n" %  (7, d))
</snippet></ROW><ROW><id>2031474</id><snippet>4 ['  one 1', '-    ', '+ ', '+ #', '+ ', '  two 2']

5 ['  one 1', '+    ', '- ', '- #', '- ', '  two 2']

6 ['  one 1', '-    ', '+ ', '+ #', '+ ', '  two 2']

7 ['  one 1', '+    ', '- ', '- #', '- ', '  two 2']
</snippet></ROW><ROW><id>2031474</id><snippet>t1f = [line for line in t1 if '2' not in line]
t2f = [line for line in t2 if '2' not in line]
diff = ndiff(t1f, t2f)
</snippet></ROW><ROW><id>2031557</id><snippet>import logging
from logging.handlers import RotatingFileHandler
import os

def setup_logging(logdir=None, scrnlog=True, txtlog=True, loglevel=logging.DEBUG):
    logdir = os.path.abspath(logdir)

    if not os.path.exists(logdir):
        os.mkdir(logdir)

    log = logging.getLogger('stumbler')
    log.setLevel(loglevel)

    log_formatter = logging.Formatter("%(asctime)s - %(levelname)s :: %(message)s")

    if txtlog:
        txt_handler = RotatingFileHandler(os.path.join(logdir, "Stumbler.log"), backupCount=5)
        txt_handler.doRollover()
        txt_handler.setFormatter(log_formatter)
        log.addHandler(txt_handler)
        log.info("Logger initialised.")

    if scrnlog:
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(log_formatter)
        log.addHandler(console_handler)



setup_logging('/tmp/logs')
corelog = logging.getLogger('stumbler.core')
corelog.debug("Messages and rainbows...")
</snippet></ROW><ROW><id>2031605</id><snippet>def</snippet></ROW><ROW><id>2031605</id><snippet>@param_checker(['req_param_1', 'req_param_2'])
def my_decorated_function(params):
    # do stuff
</snippet></ROW><ROW><id>2031605</id><snippet>def my_decorated_function(params):
    # do stuff
my_decorated_function = param_checker(['req_param_1', 'req_param_2'])(my_decorated_function)
</snippet></ROW><ROW><id>2031605</id><snippet>param_checker</snippet></ROW><ROW><id>2031605</id><snippet>import functools

def param_checker(reqs):
  reqs = set(reqs)
  def middling(f):
    @functools.wraps(f)
    def wrapper(params):
      missing = reqs.difference(params)
      if missing:
        raise TypeError('Missing parms: %s' % ', '.join(sorted(missing)))
      return f(params)
    return wrapper
  return middling
</snippet></ROW><ROW><id>2031608</id><snippet>Surface</snippet></ROW><ROW><id>2031608</id><snippet>array</snippet></ROW><ROW><id>2031608</id><snippet>array</snippet></ROW><ROW><id>2031608</id><snippet>Surface</snippet></ROW><ROW><id>2031608</id><snippet>for</snippet></ROW><ROW><id>2031608</id><snippet>array</snippet></ROW><ROW><id>2031608</id><snippet>def __i(x, y):
    assert(0 &lt;= x &lt; 80)
    assert(0 &lt;= y &lt; 60)
    i = (y*80 + x) * 4
    return i
def red(x, y):
    return __a[__i(x, y)]
def green(x, y):
    return __a[__i(x, y) + 1]
def blue(x, y):
    return __a[__i(x, y) + 2]
def rgb(x, y):
    i = __i(x, y)
    return __a[i], __a[i + 1], __a[i + 2]
def set_rgb(x, y, r, g, b):
    i = __i(x, y)
    _a[i] = r
    _a[i + 1] = g
    _a[i + 2] = b

# example:
r, g, b = rgb(23, 33)
</snippet></ROW><ROW><id>2031608</id><snippet>array</snippet></ROW><ROW><id>2031608</id><snippet>__a</snippet></ROW><ROW><id>2031608</id><snippet>array</snippet></ROW><ROW><id>2031855</id><snippet>[len(x) for x in a[0]]</snippet></ROW><ROW><id>2031855</id><snippet>&gt;&gt;&gt; a = []
&gt;&gt;&gt; a.append([])
&gt;&gt;&gt; a[0].append([1,2,3,4,5])
&gt;&gt;&gt; a[0].append([1,2,3,4])
&gt;&gt;&gt; a[0].append([1,2,3])
&gt;&gt;&gt; [len(x) for x in a[0]]
[5, 4, 3]
</snippet></ROW><ROW><id>2032254</id><snippet>def runScript():
    script = "%s %s %s@%s %s::%s %s" %(rdiff,rdiffVerbosity,rdiffStatistics,clientName,clientHost,clientDir,serverDir)    
    os.system(script)
</snippet></ROW><ROW><id>2032254</id><snippet>rdiffArgs = [rdiffVerbosity,rdiffStatistics,clientName,clientHost,clientDir,serverDir]
</snippet></ROW><ROW><id>2032254</id><snippet>rdiffArgs = ' '.join(rdiffArgs)
</snippet></ROW><ROW><id>2032254</id><snippet>from rdiff_backup.Main import Main as backup
task=['/etc', '/tmp/backup']
backup(task)
</snippet></ROW><ROW><id>2032378</id><snippet>urlpatterns = patterns('',     
    (r'^salaries/employee/$', list_detail.object_list, 'employee_info'),
)
</snippet></ROW><ROW><id>2032378</id><snippet>urlpatterns = patterns('',     
    (r'^salaries/employee/$', list_detail.object_list, employee_info),
)
</snippet></ROW><ROW><id>2032504</id><snippet>mycolors.append('black'); print mycolors</snippet></ROW><ROW><id>2032504</id><snippet>__main__</snippet></ROW><ROW><id>2033272</id><snippet>print('literal' + var1 + var2)</snippet></ROW><ROW><id>2033272</id><snippet>print('literal', var1, var2)</snippet></ROW><ROW><id>2033272</id><snippet>python -m timeit --help</snippet></ROW><ROW><id>2033272</id><snippet>$ python -m timeit -s 'from cStringIO import StringIO; out = StringIO(); a = "abc"; b = "def"' 'print &gt;&gt;out, a, b'
100000 loops, best of 3: 7.68 usec per loop
$ python -m timeit -s 'from cStringIO import StringIO; out = StringIO(); a = "abc"; b = "def"' 'print &gt;&gt;out, a + " " + b'
100000 loops, best of 3: 4.67 usec per loop
$ python -m timeit -s 'from cStringIO import StringIO; out = StringIO(); a = "abc"; b = "def"' 'print &gt;&gt;out, " ".join([a, b])'
100000 loops, best of 3: 5.37 usec per loop
</snippet></ROW><ROW><id>2033416</id><snippet>dict.__init__(self)</snippet></ROW><ROW><id>2033416</id><snippet>isinstance(x, dict)</snippet></ROW><ROW><id>2033416</id><snippet>UserDict.UserDict</snippet></ROW><ROW><id>2033416</id><snippet>UserDict.DictMixin</snippet></ROW><ROW><id>2033416</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>2033416</id><snippet>def createImageDb(directory):
    d = {}
    # do something to fill in the dict
    return d
</snippet></ROW><ROW><id>2033416</id><snippet>class MyContainer(dict):
    def newmethod1(self, args):
        pass

    def newmethod2(self, args2):
        pass


def createImageDb(directory):
    d = MyContainer()
    # fill the container
    return d
</snippet></ROW><ROW><id>2033971</id><snippet>action=login</snippet></ROW><ROW><id>2033971</id><snippet>params = urllib.urlencode(dict(action='login', username_hb='user', password_hb='hunter2')) 
opener.open('http://www.instamapper.com/fe', params)
</snippet></ROW><ROW><id>2034034</id><snippet>__file__</snippet></ROW><ROW><id>2034034</id><snippet>.so</snippet></ROW><ROW><id>2034034</id><snippet>.pyd</snippet></ROW><ROW><id>2034034</id><snippet>__file__</snippet></ROW><ROW><id>2034034</id><snippet>""" Supplies the internal functions for functools.py in the standard library """

class partial:
    """
    partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
    """
    __slots__ = ['func', 'args', 'keywords']

    def __init__(self, func, *args, **keywords):
        if not callable(func):
            raise TypeError("the first argument must be callable")
        self.func = func
        self.args = args
        self.keywords = keywords

    def __call__(self, *fargs, **fkeywords):
        newkeywords = self.keywords.copy()
        newkeywords.update(fkeywords)
        return self.func(*(self.args + fargs), **newkeywords)
</snippet></ROW><ROW><id>2034087</id><snippet>mat = sio.loadmat('a.mat')
</snippet></ROW><ROW><id>2034087</id><snippet>print mat
</snippet></ROW><ROW><id>2034087</id><snippet>key</snippet></ROW><ROW><id>2034087</id><snippet>my_matrix = mat[key]
</snippet></ROW><ROW><id>2034087</id><snippet>my_matrix</snippet></ROW><ROW><id>2034087</id><snippet>my_matrix[0]</snippet></ROW><ROW><id>2034087</id><snippet>my_matrix[0][0]</snippet></ROW><ROW><id>2034258</id><snippet>##
# Embossing filter.

class EMBOSS(BuiltinFilter):
    name = "Emboss"
    filterargs = (3, 3), 1, 128, (
        -1,  0,  0,
        0,  1,  0,
        0,  0,  0
        )
</snippet></ROW><ROW><id>2034258</id><snippet>scale</snippet></ROW><ROW><id>2034258</id><snippet>offset</snippet></ROW><ROW><id>2034258</id><snippet># @keyparam scale Scale factor.  If given, the result for each
#    pixel is divided by this value.  The default is the sum
#    of the kernel weights.
# @keyparam offset Offset.  If given, this value is added to the
#    result, after it has been divided by the scale factor.
</snippet></ROW><ROW><id>2034258</id><snippet>ImageFilter.EMBOSS.filterargs=((3, 3), 1, 128, (-1, 0, 0, 0, 1, 0, 0, 0, 0))
</snippet></ROW><ROW><id>2034258</id><snippet>from PIL import Image
import numpy

# defining azimuth, elevation, and depth
ele = numpy.pi/2.2 # radians
azi = numpy.pi/4.  # radians
dep = 10.          # (0-100)

# get a B&amp;W version of the image
img = Image.open('daisy.jpg').convert('L') 
# get an array
a = numpy.asarray(img).astype('float')
# find the gradient
grad = numpy.gradient(a)
# (it is two arrays: grad_x and grad_y)
grad_x, grad_y = grad
# getting the unit incident ray
gd = numpy.cos(ele) # length of projection of ray on ground plane
dx = gd*numpy.cos(azi)
dy = gd*numpy.sin(azi)
dz = numpy.sin(ele)
# adjusting the gradient by the "depth" factor
# (I think this is how GIMP defines it)
grad_x = grad_x*dep/100.
grad_y = grad_y*dep/100.
# finding the unit normal vectors for the image
leng = numpy.sqrt(grad_x**2 + grad_y**2 + 1.)
uni_x = grad_x/leng
uni_y = grad_y/leng
uni_z = 1./leng
# take the dot product
a2 = 255*(dx*uni_x + dy*uni_y + dz*uni_z)
# avoid overflow
a2 = a2.clip(0,255)
# you must convert back to uint8 /before/ converting to an image
img2 = Image.fromarray(a2.astype('uint8')) 
img2.save('daisy2.png')
</snippet></ROW><ROW><id>2034527</id><snippet>x = 1
if x == 1:
^Iprint "fff\n"
    print "yyy\n"
</snippet></ROW><ROW><id>2034527</id><snippet>^I</snippet></ROW><ROW><id>2034527</id><snippet>  File "xx.py", line 4
    print "yyy\n"
                ^
IndentationError: unindent does not match any outer indentation level
</snippet></ROW><ROW><id>2034527</id><snippet>x = 1
if x != 1:
^Iprint "x is not 1\n"
        print "y is unset\n"
</snippet></ROW><ROW><id>2034596</id><snippet>ttk.Button</snippet></ROW><ROW><id>2034596</id><snippet>None</snippet></ROW><ROW><id>2034596</id><snippet>grid</snippet></ROW><ROW><id>2034596</id><snippet>None</snippet></ROW><ROW><id>2034596</id><snippet>.grid</snippet></ROW><ROW><id>2034596</id><snippet>ttk.Button</snippet></ROW><ROW><id>2034596</id><snippet>button = ttk.Button(root, text="Test")
button.grid(row=0, column=0)
</snippet></ROW><ROW><id>2034596</id><snippet>print button</snippet></ROW><ROW><id>2034645</id><snippet>sorted([(0, 2), (0, 1), (1, 0), (1, 2)], key = lambda x:(-x[0], x[1]))
</snippet></ROW><ROW><id>2034856</id><snippet>&lt;ins&gt;</snippet></ROW><ROW><id>2034856</id><snippet>&lt;del&gt;</snippet></ROW><ROW><id>2034934</id><snippet>import project
</snippet></ROW><ROW><id>2034934</id><snippet>main.py</snippet></ROW><ROW><id>2034934</id><snippet>config.py</snippet></ROW><ROW><id>2034934</id><snippet>main.py</snippet></ROW><ROW><id>2034934</id><snippet>/usr/bin</snippet></ROW><ROW><id>2034934</id><snippet>config.py</snippet></ROW><ROW><id>2034934</id><snippet>sys.path</snippet></ROW><ROW><id>2034934</id><snippet>from project import config
</snippet></ROW><ROW><id>2034934</id><snippet>main.py</snippet></ROW><ROW><id>2034934</id><snippet>if __name__ == "__main__":
    # here all your beautiful code
</snippet></ROW><ROW><id>2034934</id><snippet>def main():
    # put your code here

if __name__ == "__main__":    # not needed, just in case...
    main()
</snippet></ROW><ROW><id>2034934</id><snippet>setup.py</snippet></ROW><ROW><id>2034934</id><snippet>setup(
    # ...
    entry_points = {
        "console_scripts": [
            # modify script_name with the name you want use from shell
            # $ script_name [params]
            "script_name = project.main:main",
        ],
    }
)
</snippet></ROW><ROW><id>2034934</id><snippet>main.py</snippet></ROW><ROW><id>2034934</id><snippet>bin/</snippet></ROW><ROW><id>2034934</id><snippet>bin/</snippet></ROW><ROW><id>2034934</id><snippet>python setup.py install --prefix ~/.local
</snippet></ROW><ROW><id>2034934</id><snippet>~/.local/lib/python&lt;version&gt;/site-packages/&lt;package_name&gt;
</snippet></ROW><ROW><id>2034934</id><snippet>~/.local/bin/&lt;script_name&gt;
</snippet></ROW><ROW><id>2034934</id><snippet>~/.local/bin</snippet></ROW><ROW><id>2034989</id><snippet>class Category(db.Model):
    title = db.StringProperty()
    subcategories = db.ListProperty(db.Key)
    quizzes = db.ListProperty(db.Key)

    def add_sub_category(self, title):
        new_category = Category(title)
        new_category.put()
        self.subcategories.append(new_category)
        self.put()

        return new_category
</snippet></ROW><ROW><id>2034989</id><snippet>main_category = Category("Main")
main_category.put()

sports_category = main_category.add_sub_category("Sports")
baseball_category = sports_category.add_sub_category("Baseball")
football_category = sports_category.add_sub_category("Football")
hockey_category = sports_category.add_sub_category("Hockey")

tv_category = main_category.add_sub_category("TV")
</snippet></ROW><ROW><id>2035309</id><snippet>read</snippet></ROW><ROW><id>2035314</id><snippet>{% for error in form.errors %}</snippet></ROW><ROW><id>2035314</id><snippet>{% for field, errors in form.errors.items %}
    {% for error in errors %}
...
</snippet></ROW><ROW><id>2035422</id><snippet>...</snippet></ROW><ROW><id>2035422</id><snippet>&gt;&gt;&gt; @requireparams(['name', 'pass', 'code'])
... def complex_function(params):
...     print(params['name'])
...     print(params['pass'])
...     print(params['code'])
...
&gt;&gt;&gt; params = {
...     'name': 'John Doe',
...     'pass': 'OpenSesame',
...     #'code': '1134',
... }
...
&gt;&gt;&gt; complex_function(params)
</snippet></ROW><ROW><id>2035664</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.environ.get('DESKTOP_SESSION')
'gnome'
</snippet></ROW><ROW><id>2035665</id><snippet>yourtreeView-&gt;setSelectionMode(QAbstractItemView::NoSelection);
</snippet></ROW><ROW><id>2035665</id><snippet>yourtreeView-&gt;setFocusPolicy(Qt::NoFocus);
</snippet></ROW><ROW><id>2035665</id><snippet>class NoFocusDelegate : public QStyledItemDelegate
{
protected:
    void paint(QPainter* painter, const QStyleOptionViewItem&amp; option, const QModelIndex&amp; index) const;
};

void NoFocusDelegate::paint(QPainter* painter, const QStyleOptionViewItem &amp; option, const QModelIndex &amp;index) const
{
    QStyleOptionViewItem itemOption(option);
    if (itemOption.state &amp; QStyle::State_HasFocus)
        itemOption.state = itemOption.state ^ QStyle::State_HasFocus;
    QStyledItemDelegate::paint(painter, itemOption, index);
}

....

NoFocusDelegate* delegate = new NoFocusDelegate();
yourtreeView-&gt;setItemDelegate(delegate);
</snippet></ROW><ROW><id>2035707</id><snippet>import wx

class MyFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        text = wx.StaticText(self, label="hello, world!")
        button = wx.Button(self, label="press me")
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(text, flag=wx.ALL, border=20)
        sizer.Add(button, flag=wx.ALL, border=20)

        self.SetSizer(sizer)
        self.Layout()
        self.Show(True)
        self.Bind(wx.EVT_BUTTON, self.on_button, button)

    def on_button(self, event):
        wx.MessageBox("Hey!")

if __name__ == "__main__":
    app = wx.App(False)
    f = MyFrame()
</snippet></ROW><ROW><id>2035707</id><snippet>import wx
app = wx.PySimpleApp()
frame = wx.Frame(None, wx.ID_ANY, "Hello World")
frame.Show(True)
app.MainLoop()
    app.MainLoop()
</snippet></ROW><ROW><id>2035729</id><snippet>.decode("base64").decode("zlib")</snippet></ROW><ROW><id>2035792</id><snippet>WSGIScriptAlias /django1 /home/keratacon/www/django1/wsgi.py
WSGIScriptAlias /django2 /home/keratacon/www/django2/wsgi.py
</snippet></ROW><ROW><id>2035792</id><snippet>wsgi.py</snippet></ROW><ROW><id>2036276</id><snippet>tokenize</snippet></ROW><ROW><id>2036276</id><snippet>NINETY_NINE = 99       # Defines the constant `NINETY_NINE` to have the value `99`

rules = {
  '*': {     # Applies to all data
    'isYummy': {},      # Everything must be yummy

    'chocolate': {        # To validate, say `validate("chocolate", object)`
      'sweet': {},        # chocolate must be sweet (but not necessarily chocolate.*)

      'lindt': {          # To validate, say `validate("chocolate.lindt", object)`
        'tasty':{}        # Applies only to chocolate.lindt (and not to chocolate.lindt.dark, for e.g.)

        '*': {            # Applies to all data under chocolate.lindt
          'smooth': {}  # Could also be written smooth()
          'creamy': 1   # Level 1 creamy
        },
# ...
    }
  }
}
</snippet></ROW><ROW><id>2036276</id><snippet>class _:
    class isYummy: pass

    class chocolate:
        class sweet: pass

        class lindt:
            class tasty: pass

            class _:
                class smooth: pass
                class creamy: level = 1
# ...
</snippet></ROW><ROW><id>2036276</id><snippet>import parser, token, symbol, pprint

_map = dict(token.tok_name.items() + symbol.sym_name.items())

def clean_ast(ast):
    if not isinstance(ast, list):
        return ast
    elif len(ast) == 2: # Elide single-child nodes.
        return clean_ast(ast[1])
    else:
        return [_map[ast[0]]] + [clean_ast(a) for a in ast[1:]]

ast = parser.expr('''{

'*': {     # Applies to all data
  isYummy: _,    # Everything must be yummy

  chocolate: {        # To validate, say `validate("chocolate", object)`
    sweet: _,        # chocolate must be sweet (but not necessarily chocolate.*)

    lindt: {          # To validate, say `validate("chocolate.lindt", object)`
      tasty: _,        # Applies only to chocolate.lindt (and not to chocolate.lindt.dark, for e.g.)

      '*': {            # Applies to all data under chocolate.lindt
        smooth: _,  # Could also be written smooth()
        creamy: 1   # Level 1 creamy
      }
# ...
    }
  }
}

}''').tolist()
pprint.pprint(clean_ast(ast))
</snippet></ROW><ROW><id>2036276</id><snippet>*:
    isYummy
</snippet></ROW><ROW><id>2036331</id><snippet>QAbstractItemModel* model = your_tree_view-&gt;model();

QModelIndex index0 = model-&gt;index(0, 0);
QMap&lt;int, QVariant&gt; data = model-&gt;itemData(index0);
// check siblings of the item; should be restored later
model-&gt;removeRow(0);

int rowCount = model-&gt;rowCount();
model-&gt;insertRow(rowCount);
QModelIndex index1 = model-&gt;index(rowCount, 0);
model-&gt;setItemData(index1, data);
</snippet></ROW><ROW><id>2036347</id><snippet>donothing</snippet></ROW><ROW><id>2036347</id><snippet>printer</snippet></ROW><ROW><id>2036347</id><snippet>donothing</snippet></ROW><ROW><id>2036347</id><snippet>x = donothing(func) # donothing is a class not function
</snippet></ROW><ROW><id>2036347</id><snippet>__call__</snippet></ROW><ROW><id>2036347</id><snippet>__init__</snippet></ROW><ROW><id>2036347</id><snippet>params</snippet></ROW><ROW><id>2036347</id><snippet>params = {
    'name': 'John Doe',
    'pass': 'OpenSesame',
    'code': '1134',
}
complex_function(params=params)
</snippet></ROW><ROW><id>2036347</id><snippet>class checkforkeysinparams(object):
    def __init__(self, required):
        self.required = set(required)

    def __call__(self, func):
        def wrapper(params):
            missing = self.required.difference(params)
            if missing:
                raise TypeError('Missing from "params" argument: %s' % ', '.join(sorted(missing)))

            func(params)

        return wrapper
</snippet></ROW><ROW><id>2036347</id><snippet>checkforkeysinparams</snippet></ROW><ROW><id>2036347</id><snippet>__call__</snippet></ROW><ROW><id>2036477</id><snippet>import sys
import sqlite3

print 'python version:', sys.version
print 'PySQLite version:', sqlite3.version
print 'sqlite3 version:', sqlite3.sqlite_version
print

conn = sqlite3.connect('shane.sqlite')
conn.isolation_level = None  # CHANGED

with conn:
    conn.execute("create table example (A, B);")

with conn:
    conn.execute("insert into example values (?, ?);", (0,200))

    conn.execute("savepoint spTest;")
    conn.execute("insert into example values (?, ?);", (1,201))
    conn.execute("insert into example values (?, ?);", (2,202))
    conn.execute("rollback to savepoint spTest;")  # CHANGED

    conn.execute("insert into example values (?, ?);", (5,205))
</snippet></ROW><ROW><id>2036644</id><snippet>django.contrib.auth.models.User</snippet></ROW><ROW><id>2036644</id><snippet>User.objects.create_user</snippet></ROW><ROW><id>2036644</id><snippet>django.http.HttpRequest</snippet></ROW><ROW><id>2036644</id><snippet>user</snippet></ROW><ROW><id>2037129</id><snippet>-I</snippet></ROW><ROW><id>2037129</id><snippet>--ignore-installed</snippet></ROW><ROW><id>2037129</id><snippet>pip -E v_env install -I pyfacebook
</snippet></ROW><ROW><id>2037390</id><snippet>firstG, secondG = f(first), list(f(second))
</snippet></ROW><ROW><id>2037390</id><snippet>for e in ("(%s%s%s)" % (e1, op, e2) for e1 in f(first) for e2 in f(second)):
#                               new generator object every loop  ^^^^^^^^^
</snippet></ROW><ROW><id>2037390</id><snippet>r = [v for a in A for b in B]
</snippet></ROW><ROW><id>2037390</id><snippet>r = []
for a in A:
  for b in B:
    r.append(v)
</snippet></ROW><ROW><id>2037390</id><snippet>def y():
  yield 1
  yield 2
  yield 3
def r():
  return [1, 2, 3]

vy = y()
for v in vy:
  print v
for v in vy:
  print v

print "---"

vr = r()
for v in vr:
  print v
for v in vr:
  print v
</snippet></ROW><ROW><id>2037581</id><snippet>#!/usr/bin/ruby1.8

def partitions(set)
  yield [] if set.empty?
  (0 ... 2 ** set.size / 2).each do |i|
    parts = [[], []]
    set.each do |item|
      parts[i &amp; 1] &lt;&lt; item
      i &gt;&gt;= 1
    end
    partitions(parts[1]) do |b|
      result = [parts[0]] + b
      result = result.reject do |e|
        e.empty?
      end
      yield result
    end
  end
end

partitions([1, 2, 3, 4]) do |e|
  p e
end

# =&gt; [[1, 2, 3, 4]]
# =&gt; [[2, 3, 4], [1]]
# =&gt; [[1, 3, 4], [2]]
# =&gt; [[3, 4], [1, 2]]
# =&gt; [[3, 4], [2], [1]]
# =&gt; [[1, 2, 4], [3]]
# =&gt; [[2, 4], [1, 3]]
# =&gt; [[2, 4], [3], [1]]
# =&gt; [[1, 4], [2, 3]]
# =&gt; [[1, 4], [3], [2]]
# =&gt; [[4], [1, 2, 3]]
# =&gt; [[4], [2, 3], [1]]
# =&gt; [[4], [1, 3], [2]]
# =&gt; [[4], [3], [1, 2]]
# =&gt; [[4], [3], [2], [1]]
</snippet></ROW><ROW><id>2037789</id><snippet>ListProperty</snippet></ROW><ROW><id>2038156</id><snippet>[plone directory]/Zope/lib/python</snippet></ROW><ROW><id>2038156</id><snippet>  File "/home/andrey/tmp/zope/instance/lib/python/collective/groupspace/roles/browser/roles.py", line 23, in ?
    from plone.app.workflow import PloneMessageFactory as _
zope.configuration.xmlconfig.ZopeXMLConfigurationError: File "/home/andrey/tmp/zope/instance/etc/site.zcml", line 15.2-15.23
    ZopeXMLConfigurationError: File "/home/andrey/tmp/zope/instance/Products/GrufSpaces/configure.zcml", line 17.4-17.53
    ZopeXMLConfigurationError: File "/home/andrey/tmp/zope/instance/lib/python/collective/groupspace/roles/configure.zcml", line 7.4-7.34
    ZopeXMLConfigurationError: File "/home/andrey/tmp/zope/instance/lib/python/collective/groupspace/roles/browser/configure.zcml", line 5.4-10.10
    ImportError: cannot import name PloneMessageFactory
</snippet></ROW><ROW><id>2038156</id><snippet>Products</snippet></ROW><ROW><id>2038176</id><snippet>socket.write(struct.pack("H", len(data))    #send a two-byte size field
socket.write(data)
</snippet></ROW><ROW><id>2038176</id><snippet>dataToRead = struct.unpack("H", socket.read(2))[0]    
data = socket.read(dataToRead)
</snippet></ROW><ROW><id>2038176</id><snippet>type = socket.read(1)                                 # get the type of msg
dataToRead = struct.unpack("H", socket.read(2))[0]    # get the len of the msg
data = socket.read(dataToRead)                        # read the msg

if TYPE_FOO == type:
    handleFoo(data)

elif TYPE_BAR == type:
    handleBar(data)

else:
    raise UnknownTypeException(type)
</snippet></ROW><ROW><id>2038176</id><snippet>struct {
     unsigned char type;
     unsigned short length;
     void *data;
}
</snippet></ROW><ROW><id>2038197</id><snippet>var data = [ {text:'Link A', url:'/page1'}, {text:'Link B', url: '/page2'} ];
$("...").autocomplete(data, {
  formatItem: function(item) {
    return item.text;
  }
}).result(function(event, item) {
  location.href = item.url;
});
</snippet></ROW><ROW><id>2038197</id><snippet>$('#my_hidden_field').val(item.extra_value);</snippet></ROW><ROW><id>2038310</id><snippet>evil.py</snippet></ROW><ROW><id>2038310</id><snippet>import inspect

def modify_var():
  callersframe = inspect.stack()[1][0]
  callersglobals = callersframe.f_globals
  if 'mod_var' not in callersglobals:
    raise ValueError, 'calling module has no "mod_var"!'
  callersglobals['mod_var'] += 1
</snippet></ROW><ROW><id>2038310</id><snippet>a.py</snippet></ROW><ROW><id>2038310</id><snippet>import evil

mod_var = 23
evil.modify_var()
print 'a mod_var now:', mod_var
</snippet></ROW><ROW><id>2038310</id><snippet>b.py</snippet></ROW><ROW><id>2038310</id><snippet>import evil

mod_var = 100
evil.modify_var()
print 'b mod_var now:', mod_var
</snippet></ROW><ROW><id>2038310</id><snippet>$ python -c'import a; import b'
a mod_var now: 24
b mod_var now: 101
</snippet></ROW><ROW><id>2038341</id><snippet>__hash__</snippet></ROW><ROW><id>2038341</id><snippet>__eq__</snippet></ROW><ROW><id>2038341</id><snippet>a==b</snippet></ROW><ROW><id>2038341</id><snippet>hash(a)==hash(b)</snippet></ROW><ROW><id>2038341</id><snippet>class Item2(DictMixin):
    def __hash__(self): return hash(id(self))
    def __eq__(self, x): return x is self
    def __ne__(self, x): return x is not self
</snippet></ROW><ROW><id>2038341</id><snippet>Item1</snippet></ROW><ROW><id>2038341</id><snippet>__eq__</snippet></ROW><ROW><id>2038341</id><snippet>DictMixin</snippet></ROW><ROW><id>2038341</id><snippet>x is self</snippet></ROW><ROW><id>2038341</id><snippet>id(x) == id(self)</snippet></ROW><ROW><id>2038341</id><snippet>is</snippet></ROW><ROW><id>2038341</id><snippet>id</snippet></ROW><ROW><id>2038341</id><snippet>a==b</snippet></ROW><ROW><id>2038341</id><snippet>a is b</snippet></ROW><ROW><id>2038341</id><snippet>__eq__</snippet></ROW><ROW><id>2038502</id><snippet>&gt;&gt;&gt; def f(): return 23+100
... 
&gt;&gt;&gt; dis.dis(f)
  1           0 LOAD_CONST               3 (123)
              3 RETURN_VALUE        
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2038502</id><snippet>if (codelen &gt; 32700)
</snippet></ROW><ROW><id>2038502</id><snippet>if (codelen &gt; 0)
</snippet></ROW><ROW><id>2038603</id><snippet>source</snippet></ROW><ROW><id>2038603</id><snippet>$PATH</snippet></ROW><ROW><id>2038603</id><snippet>source ./houdini_setup</snippet></ROW><ROW><id>2038773</id><snippet>bin/buildout annotate</snippet></ROW><ROW><id>2038956</id><snippet>cast(f, c_void_p)</snippet></ROW><ROW><id>2039146</id><snippet>invalid_range = re.compile(r'[^\x08-\x7B]', re.I)
invalid_unicode = re.compile(ur'(Û|²|°|±|É|¹|Í)')
line = re.sub(invalid_range , '', line)
line = re.sub(invalid_unicode, '', line)
</snippet></ROW><ROW><id>2039219</id><snippet>django-admin.py startproject pyDietTracker</snippet></ROW><ROW><id>2039219</id><snippet>python manage.py startapp myApp</snippet></ROW><ROW><id>2039305</id><snippet>character= get_object_or_404(Character, pk=character_id)
InventoryInlineFormSet = inlineformset_factory(Character, Inventory, max_num=1)
classificationformset = ClassificationInlineFormSet(instance=character)
</snippet></ROW><ROW><id>2039312</id><snippet>r</snippet></ROW><ROW><id>2039312</id><snippet>r == 2 ** 0.5</snippet></ROW><ROW><id>2039312</id><snippet>rationals.py</snippet></ROW><ROW><id>2039312</id><snippet>**</snippet></ROW><ROW><id>2039329</id><snippet>QKeySequence</snippet></ROW><ROW><id>2039329</id><snippet>activated()</snippet></ROW><ROW><id>2039377</id><snippet>profiler</snippet></ROW><ROW><id>2039377</id><snippet>sys.setprofile</snippet></ROW><ROW><id>2039377</id><snippet>print</snippet></ROW><ROW><id>2039377</id><snippet>'call'
</snippet></ROW><ROW><id>2039377</id><snippet>'return'
</snippet></ROW><ROW><id>2039377</id><snippet>'c_call'
</snippet></ROW><ROW><id>2039377</id><snippet>'c_return'
</snippet></ROW><ROW><id>2039377</id><snippet>&gt;&gt;&gt; def a():
...     print 'aaa'
... 
&gt;&gt;&gt; def profiler(frame, event, arg):
...     print 'PROF %r %r' % (event, arg)
... 
&gt;&gt;&gt; sys.setprofile(profiler)
PROF 'return' None
&gt;&gt;&gt; a()
PROF 'call' None
PROF 'c_call' &lt;built-in function utf_8_decode&gt;
PROF 'c_return' &lt;built-in function utf_8_decode&gt;
PROF 'return' (u'a()\n', 4)
PROF 'call' None
PROF 'call' None
aaa
PROF 'return' None
PROF 'return' None
</snippet></ROW><ROW><id>2039377</id><snippet>c_call</snippet></ROW><ROW><id>2039377</id><snippet>c_return</snippet></ROW><ROW><id>2039377</id><snippet>utf-8</snippet></ROW><ROW><id>2039476</id><snippet>\w</snippet></ROW><ROW><id>2039476</id><snippet>\d</snippet></ROW><ROW><id>2039476</id><snippet>\w</snippet></ROW><ROW><id>2039476</id><snippet>\W</snippet></ROW><ROW><id>2039476</id><snippet>\d</snippet></ROW><ROW><id>2039476</id><snippet>_</snippet></ROW><ROW><id>2039476</id><snippet>[\W\d_]</snippet></ROW><ROW><id>2039476</id><snippet>[^\W\d_]</snippet></ROW><ROW><id>2039476</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; rx = re.compile("[^\W\d_]+", re.UNICODE)
&gt;&gt;&gt; rx.findall(u"abc_def,k9")
[u'abc', u'def', u'k']
</snippet></ROW><ROW><id>2039476</id><snippet>&gt;&gt;&gt; import unicodedata as ucd
&gt;&gt;&gt; allsorts =u"\u0473\u0660\u06c9\u24e8\u4e0a\u3020\u3021"
&gt;&gt;&gt; for x in allsorts:
...     print repr(x), ucd.category(x), ucd.name(x)
...
u'\u0473' Ll CYRILLIC SMALL LETTER FITA
u'\u0660' Nd ARABIC-INDIC DIGIT ZERO
u'\u06c9' Lo ARABIC LETTER KIRGHIZ YU
u'\u24e8' So CIRCLED LATIN SMALL LETTER Y
u'\u4e0a' Lo CJK UNIFIED IDEOGRAPH-4E0A
u'\u3020' So POSTAL MARK FACE
u'\u3021' Nl HANGZHOU NUMERAL ONE
&gt;&gt;&gt; rx.findall(allsorts)
[u'\u0473', u'\u06c9', u'\u4e0a', u'\u3021']
</snippet></ROW><ROW><id>2039633</id><snippet>key=YOUR_API_KEY&amp;image=http://example.com/example.jpg</snippet></ROW><ROW><id>2039663</id><snippet>u'(\xdb|\xb2|\xb0|\xb1|\xc9|\xb9|\xcd)'</snippet></ROW><ROW><id>2039663</id><snippet>re.compile</snippet></ROW><ROW><id>2039827</id><snippet>class requiresparams(object):
    """

    Used as a decorator with an iterable passed in, this will look for each item
    in the iterable given as a key in the params argument of the function being
    decorated. It was built for a series of PayPal methods that require
    different params, and AOP was the best way to handle it while staying DRY.


    &gt;&gt;&gt; @requiresparams(['name', 'pass', 'code'])
    ... def complex_function(params):
    ...     print(params['name'])
    ...     print(params['pass'])
    ...     print(params['code'])
    &gt;&gt;&gt; 
    &gt;&gt;&gt; params = {
    ...     'name': 'John Doe',
    ...     'pass': 'OpenSesame',
    ...     #'code': '1134',
    ... }
    &gt;&gt;&gt; 
    &gt;&gt;&gt; complex_function(params=params)
    Traceback (most recent call last):
        ...
    ValueError: Missing from "params" dictionary: code
    """
    def __init__(self, required):
        self.required = set(required)

    def __call__(self, func):
        def wrapper(*args, **kwargs):
            if not kwargs.get('params', None):
                raise KeyError('"params" kwarg required for {0}'.format(func.__name__))
            missing = self.required.difference(kwargs['params'])
            if missing:
                raise ValueError('Missing from "params" dictionary: %s' % ', '.join(sorted(missing)))
            return func(*args, **kwargs)
        return wrapper

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>2039832</id><snippet>import facebook.djangofb as facebook
</snippet></ROW><ROW><id>2039965</id><snippet>def some_view(request):
    # ...
    return render_to_response('my_template.html',
                              my_data_dictionary,
                              context_instance=RequestContext(request))
</snippet></ROW><ROW><id>2039971</id><snippet>class Vuln(models.Model): 
  pub_date = models.DateTimeField("Publication Date") 
  short_description = models.CharField("Description", max_length=70)
  vendor = models.ForeignKey(Vendor, verbose_name="Vendor") 

class Url(models.Model): 
  url = models.URLField("URL", max_length=200)
  vulnerability = models.ForeignKey(Vuln)
</snippet></ROW><ROW><id>2039971</id><snippet>class Vendor(models.Model): 
  field_names_go_here = models.TextField(max_length=70)
  short_description = models.CharField("Description", max_length=70)
</snippet></ROW><ROW><id>2040062</id><snippet>month</snippet></ROW><ROW><id>2040062</id><snippet>day</snippet></ROW><ROW><id>2040062</id><snippet>birthdays.sort(key = lambda d: (d.month, d.day))
</snippet></ROW><ROW><id>2040099</id><snippet>In [37]: import statsmodels.api as sm

In [38]: x = [5.05, 6.75, 3.21, 2.66]

In [39]: y = [1.65, 26.5, -5.93, 7.96]

In [40]: X = sm.add_constant(x) # intercept

In [41]: model = sm.OLS(y, X)

In [42]: fit = model.fit()

In [43]: fit.params
Out[43]: array([  5.39357736, -16.28112799])

In [44]: fit.rsquared
Out[44]: 0.52480627513624789

In [45]: np.sqrt(fit.mse_resid)
Out[45]: 11.696414461570097
</snippet></ROW><ROW><id>2040110</id><snippet>__eq__</snippet></ROW><ROW><id>2040110</id><snippet>__ne__</snippet></ROW><ROW><id>2040110</id><snippet>a==b</snippet></ROW><ROW><id>2040110</id><snippet>a is b</snippet></ROW><ROW><id>2040316</id><snippet>[x[0] for x in list].index('a')
</snippet></ROW><ROW><id>2040445</id><snippet>widgets</snippet></ROW><ROW><id>2040630</id><snippet>sets</snippet></ROW><ROW><id>2040630</id><snippet>sets</snippet></ROW><ROW><id>2040630</id><snippet>set</snippet></ROW><ROW><id>2040630</id><snippet>frozenset</snippet></ROW><ROW><id>2040668</id><snippet>@WebService() public class Calculator {   
    @WebMethod(action="sample_operation")  
    public String operation(@WebParam(name="param_name")

      String param) {
    // implement the web service operation here
    return param;   }

  @WebMethod(action="add")   public int add(@WebParam(name = "i") int i, 
      @WebParam(name = "j") int j) {
    int k = i + j; 
    return k;   } }
</snippet></ROW><ROW><id>2041087</id><snippet>global ID
ID="Yes"
</snippet></ROW><ROW><id>2041087</id><snippet>project = ("Yep"+ID)</snippet></ROW><ROW><id>2041087</id><snippet>def getprojectname(ID):
    return project+ID
</snippet></ROW><ROW><id>2041416</id><snippet>import sympy.physics.units as units
from sympy import Rational

my_mile = units.Unit('my_mile', 'mile')
my_hour = units.Unit('my_hour', 'hour')
</snippet></ROW><ROW><id>2041416</id><snippet>converter = {units.m: my_mile/Rational('1609.344'),
             units.s: my_hour/Rational('3600')}
</snippet></ROW><ROW><id>2041416</id><snippet>v = 10*units.miles/units.hour
print v # = 2794*m/(625*s)

print v.subs(converter) # = 10*mile/hour
</snippet></ROW><ROW><id>2041603</id><snippet>from facebook.djangofb import facebook</snippet></ROW><ROW><id>2041603</id><snippet>import facebook.djangofb</snippet></ROW><ROW><id>2041603</id><snippet>@facebook.djangofb.require_login()</snippet></ROW><ROW><id>2041603</id><snippet>require_login</snippet></ROW><ROW><id>2041603</id><snippet>facebook.djangofb</snippet></ROW><ROW><id>2041603</id><snippet>facebook.djangofb.facebook</snippet></ROW><ROW><id>2041603</id><snippet>import facebook.djangofb
@facebook.djangofb.require_login()
...
</snippet></ROW><ROW><id>2041603</id><snippet>from facebook import djangofb
@djangofb.require_login()
...
</snippet></ROW><ROW><id>2041603</id><snippet>from facebook.djangofb import require_login
@require_login()
...
</snippet></ROW><ROW><id>2041603</id><snippet>request.fb.check_session(request)</snippet></ROW><ROW><id>2041699</id><snippet>assert</snippet></ROW><ROW><id>2041699</id><snippet>AssertionError</snippet></ROW><ROW><id>2041699</id><snippet>raise</snippet></ROW><ROW><id>2041699</id><snippet>for tr in completed_taskrevs:
    for nr in completion_noterevs:
        if tr.description in nr.body:
            completion_noterevs.remove(nr)
            break
    else:
        raise ValueError("description not found"); # or whatever exception would be appropriate
</snippet></ROW><ROW><id>2042139</id><snippet>sx, sy = x/cur_scale, y/cur_scale
</snippet></ROW><ROW><id>2042139</id><snippet>EVT_PAINT</snippet></ROW><ROW><id>2042161</id><snippet>re</snippet></ROW><ROW><id>2042161</id><snippet>struct</snippet></ROW><ROW><id>2042329</id><snippet>urls.py</snippet></ROW><ROW><id>2042329</id><snippet>urlpatterns = patterns('',

    ...

    (r'^(?P&lt;path&gt;.+)$', 'django.views.generic.simple.redirect_to', {
        'url': '/login/?next=/%(path)s', 
        'permanent': False
    }),
)
</snippet></ROW><ROW><id>2042329</id><snippet>from django.http import Http404, HttpResponseRedirect
def fake_redirect(request, path):
    if request.user.is_authenticated:
        raise Http404()
    else:
        return HttpResponseRedirect('/login/?next=/%s' % path)

urlpatterns = patterns('',

    ...

    (r'^(?P&lt;path&gt;.+)$', fake_redirect),
)
</snippet></ROW><ROW><id>2042376</id><snippet>r</snippet></ROW><ROW><id>2042376</id><snippet>\\</snippet></ROW><ROW><id>2042376</id><snippet>\</snippet></ROW><ROW><id>2042376</id><snippet>r</snippet></ROW><ROW><id>2042376</id><snippet>copyfile</snippet></ROW><ROW><id>2042376</id><snippet>source_path = r"\\mynetworkshare"
dest_path = r"C:\TEMP"
file_name = "\\myfile.txt"

shutil.copyfile(source_path + file_name, dest_path + file_name)
</snippet></ROW><ROW><id>2042394</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; L = ["one", "two", "three", "four"]
&gt;&gt;&gt; for R in combinations(L, len(L) - 1):
...     print " and ".join(R)
...
one and two and three
one and two and four
one and three and four
two and three and four
</snippet></ROW><ROW><id>2042442</id><snippet>python -m py_compile fileA.py fileB.py fileC.py
</snippet></ROW><ROW><id>2043109</id><snippet>inputValues = [[0, 1], [1, 2], [2, 3], [2, 4], [2, 5], [5, 6], [4, 6], [3, 6], [0, 7], [7, 6], [8, 9], [9, 6]]

tree = {}
numberOfChildren = {}
for (f, t) in inputValues:
  if not tree.has_key(f):
    tree[f] = []
  tree[f].append(t)
  if not numberOfChildren.has_key(t):
    numberOfChildren[t] = 0
  numberOfChildren[t] += 1

roots = [c for c in tree if c not in numberOfChildren]
permutations = []

def findPermutations(node, currentList):
  global tree
  global permutations
  if not tree.has_key(node):
    permutations.append(currentList)
    return
  for child in tree[node]:
    l = list()
    l.extend(currentList)
    l.append(child)
    findPermutations(child, l)

for r in roots:
  findPermutations(r, [r])

print permutations
</snippet></ROW><ROW><id>2043499</id><snippet>echo -e "import sys\nfor r in range(10): print 'rob'" | python
</snippet></ROW><ROW><id>2043499</id><snippet>python -c "exec(\"import sys\\nfor r in range(10): print 'rob'\")"
</snippet></ROW><ROW><id>2043499</id><snippet>(echo "import sys" ; echo "for r in range(10): print 'rob'") | python
</snippet></ROW><ROW><id>2043531</id><snippet>import re
regex = re.compile('^' + '.*'.join(re.escape(foo) for foo in pattern.split('*')) + '$')
</snippet></ROW><ROW><id>2044633</id><snippet>datetime.datetime.strptime(self.request.get("visibleDate"), "%Y/%m/%d"),</snippet></ROW><ROW><id>2044633</id><snippet>from datetime import datetime
a = (datetime(2000,1,1),)
assert isinstance(a, tuple)
a = (datetime(2000,1,1))
assert isinstance(a, datetime)
</snippet></ROW><ROW><id>2044804</id><snippet>&lt;html&gt;
&lt;head py:match="item.tag == 'head'"&gt;
  &lt;title&gt;My Site&lt;/title&gt;
&lt;/head&gt;
&lt;body py:match="item.tag == 'body'"&gt;
  &lt;h1&gt;My Site&lt;/h1&gt;
  &lt;div py:replace="item[:]"&gt;&lt;/div&gt;
  &lt;p id="footer"&gt;Copyright Blixt 2010&lt;/p&gt;
  &lt;div py:if="defined('body_end')" py:replace="body_end()"&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>2044804</id><snippet>&lt;html&gt;
&lt;head&gt;&lt;/head&gt;
&lt;body&gt;
  &lt;p&gt;Hello World!&lt;/p&gt;
  &lt;div py:def="body_end()" py:strip="True"&gt;
    &lt;script type="text/javascript"&gt;alert('Hello World!');&lt;/script&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>2044804</id><snippet>body_end</snippet></ROW><ROW><id>2044804</id><snippet>&lt;/body&gt;</snippet></ROW><ROW><id>2044804</id><snippet>&lt;/body&gt;</snippet></ROW><ROW><id>2044804</id><snippet>body_end</snippet></ROW><ROW><id>2044804</id><snippet>py:def="body_end()"</snippet></ROW><ROW><id>2044804</id><snippet>py:strip="True"</snippet></ROW><ROW><id>2044804</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>2044860</id><snippet>BOOST_PYTHON_MODULE</snippet></ROW><ROW><id>2044860</id><snippet>class_</snippet></ROW><ROW><id>2044860</id><snippet>BOOST_PYTHON_MODULE</snippet></ROW><ROW><id>2044860</id><snippet>#include &lt;iostream&gt;
#include &lt;boost/python.hpp&gt;
#include &lt;boost/python/suite/indexing/vector_indexing_suite.hpp&gt;
using namespace boost::python;
using namespace std;

int main()
{
    vector&lt;double&gt; vec;
    vec.push_back(1.2);
    vec.push_back(3.4);
    try {   
            Py_Initialize();

            boost::python::class_&lt;std::vector&lt;double&gt; &gt;("PyVec")
            .def(boost::python::vector_indexing_suite&lt;std::vector&lt;double&gt; &gt;());

            object main_module = import("__main__");
            object globals = main_module.attr("__dict__");
            globals["var"]=vec;
            object ignored = exec("result = sum(var)", globals, globals);
            double result = extract&lt;double&gt;(globals["result"]);
            std::cout &lt;&lt; result &lt;&lt; std::endl;
    } catch( error_already_set ) {
            PyErr_Print();
    }
    return 0;
}
</snippet></ROW><ROW><id>2045011</id><snippet>__call__</snippet></ROW><ROW><id>2045011</id><snippet>class MyView(object):
    def __call__(self, request, slug)
        # do stuff here

    def helper_method(self):
        # etc.
</snippet></ROW><ROW><id>2045011</id><snippet>urls.py</snippet></ROW><ROW><id>2045011</id><snippet>class MyView(object):
    def __init__(self, parameters):
        # initialize instance

    def __call__(self, request, slug):
        # main view code goes here

first_view = MyView("some parameter")
second_view = MyView("some other parameter") # creates second object instance
</snippet></ROW><ROW><id>2045208</id><snippet>^[^A]*((AA)+[^A]*)*$
</snippet></ROW><ROW><id>2045208</id><snippet>A</snippet></ROW><ROW><id>2045208</id><snippet>^[^A]*(A[^A]*A[^A]*)*$
</snippet></ROW><ROW><id>2045311</id><snippet>    def __mul__ ( self, other ) :
        print (type(other))
        return Decimal.__mul__ ( self,  other )
</snippet></ROW><ROW><id>2045311</id><snippet>&gt;&gt;&gt; repr(2.1)
'2.1000000000000001'
&gt;&gt;&gt; str(2.1)
'2.1'
</snippet></ROW><ROW><id>2045311</id><snippet>    @classmethod
    def fromfloat(cls, f):
        return cls(str(f))
</snippet></ROW><ROW><id>2045311</id><snippet>class m_Decimal(Decimal):
    @classmethod
    def fromfloat(cls, f):
        return cls(str(f))

    def __mul__(self, other):
        if isinstance(other, float):
            other = m_Decimal.fromfloat(other)
        return Decimal.__mul__(self,other)
</snippet></ROW><ROW><id>2045311</id><snippet>&gt;&gt;&gt; Decimal(2) * m_Decimal(2) * 2.2

Traceback (most recent call last):
  File "&lt;pyshell#3&gt;", line 1, in &lt;module&gt;
    Decimal(2) * m_Decimal(2) * 2.2
TypeError: unsupported operand type(s) for *: 'Decimal' and 'float'
</snippet></ROW><ROW><id>2045311</id><snippet>    def __mul__(self, other):
        if isinstance(other, float):
            other = m_Decimal.fromfloat(other)
        return m_Decimal(Decimal.__mul__(self,other))
</snippet></ROW><ROW><id>2045311</id><snippet>decimal._Decimal = decimal.Decimal
decimal.Decimal = m_Decimal
</snippet></ROW><ROW><id>2045579</id><snippet>allowed_errors</snippet></ROW><ROW><id>2045579</id><snippet>__builtins__</snippet></ROW><ROW><id>2045579</id><snippet>[exc for exc in __builtins__ if isinstance(exc, BaseException)]
</snippet></ROW><ROW><id>2045579</id><snippet>ValueError</snippet></ROW><ROW><id>2045579</id><snippet>TypeError</snippet></ROW><ROW><id>2045579</id><snippet>OSError</snippet></ROW><ROW><id>2045828</id><snippet>sys</snippet></ROW><ROW><id>2045828</id><snippet>sys.exc_info</snippet></ROW><ROW><id>2045828</id><snippet>import sys

try:
    # some call to a java lib that raises an exception here
except:
    instance = sys.exc_info()[1]
</snippet></ROW><ROW><id>2046054</id><snippet>readline</snippet></ROW><ROW><id>2046054</id><snippet>import readline
COMMANDS = ['extra', 'extension', 'stuff', 'errors',
            'email', 'foobar', 'foo']

def complete(text, state):
    for cmd in COMMANDS:
        if cmd.startswith(text):
            if not state:
                return cmd
            else:
                state -= 1

readline.parse_and_bind("tab: complete")
readline.set_completer(complete)
raw_input('Enter section name: ')
</snippet></ROW><ROW><id>2046054</id><snippet>Enter section name: &lt;tab&gt;
email      errors     extension  extra      foo        foobar    stuff
Enter section name: e&lt;tab&gt;
email      errors     extension  extra      
Enter section name: ext&lt;tab&gt;
extension  extra      
</snippet></ROW><ROW><id>2046054</id><snippet>readline</snippet></ROW><ROW><id>2046225</id><snippet>__contains__</snippet></ROW><ROW><id>2046225</id><snippet>a</snippet></ROW><ROW><id>2046225</id><snippet>__contains__</snippet></ROW><ROW><id>2046225</id><snippet>&gt;&gt;&gt; class a(object):
...     def a(self, item):
...         return True
...     __contains__=a
...
&gt;&gt;&gt; b=a()
&gt;&gt;&gt; print 2 in b
True
</snippet></ROW><ROW><id>2046354</id><snippet>TextCtrlInstance.GetValue()
</snippet></ROW><ROW><id>2046477</id><snippet>@register.filter
def in_list(obj, arg):
    "Is the issue in the list?"
    return obj in (item.issue for item in arg)
</snippet></ROW><ROW><id>2046477</id><snippet>{% if issue|in_list:user.wishlist_items.all %}
</snippet></ROW><ROW><id>2046630</id><snippet>multiprocessing</snippet></ROW><ROW><id>2046630</id><snippet>from multiprocessing import Process, Queue

def my_function(q, x):
    q.put(x + 100)

if __name__ == '__main__':
    queue = Queue()
    p = Process(target=my_function, args=(queue, 1))
    p.start()
    p.join() # this blocks until the process terminates
    result = queue.get()
    print result
</snippet></ROW><ROW><id>2046653</id><snippet>(35344442345321456754 / 10**13) % 10**4 == 4444
</snippet></ROW><ROW><id>2046760</id><snippet>User</snippet></ROW><ROW><id>2046760</id><snippet>fileno(self)</snippet></ROW><ROW><id>2046760</id><snippet>self.thesocket.fileno()</snippet></ROW><ROW><id>2046760</id><snippet>select</snippet></ROW><ROW><id>2046760</id><snippet>switch</snippet></ROW><ROW><id>2046817</id><snippet>    c.title="title"
</snippet></ROW><ROW><id>2046817</id><snippet>c</snippet></ROW><ROW><id>2046817</id><snippet>c</snippet></ROW><ROW><id>2046817</id><snippet>c</snippet></ROW><ROW><id>2046817</id><snippet>title</snippet></ROW><ROW><id>2046817</id><snippet>c.title</snippet></ROW><ROW><id>2046817</id><snippet>from pylons import tmpl_context as c</snippet></ROW><ROW><id>2046817</id><snippet>from ... import ... as</snippet></ROW><ROW><id>2047153</id><snippet># The method that gets called when a new email arrives. 
# Replace it with something better.
def dosync(self):
    print "Got an event!"
</snippet></ROW><ROW><id>2047153</id><snippet># Replaced with something better.
def dosync(self):
    print "Got an event!"
    res = self.M.recent()
    print res
</snippet></ROW><ROW><id>2047273</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; dir(collections)
['Callable', 'Container', 'Hashable', 'ItemsView', 'Iterable', 'Iterator', 'KeysView', 'Mapping', 'MappingView', 'MutableMapping', 'MutableSequence', 'MutableSet', 'Sequence', 'Set', 'Sized', 'ValuesView', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '_abcoll', '_iskeyword', '_itemgetter', '_sys', 'defaultdict', 'deque', 'namedtuple']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2047577</id><snippet>open()</snippet></ROW><ROW><id>2047577</id><snippet>open()</snippet></ROW><ROW><id>2047577</id><snippet>open()</snippet></ROW><ROW><id>2047577</id><snippet>IOError</snippet></ROW><ROW><id>2047577</id><snippet>open()</snippet></ROW><ROW><id>2047577</id><snippet>try</snippet></ROW><ROW><id>2047577</id><snippet>finally</snippet></ROW><ROW><id>2047844</id><snippet>JOIN</snippet></ROW><ROW><id>2047844</id><snippet>from sqlalchemy import Column, Integer, Unicode, UnicodeText, String
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

from random import choice
from string import letters

engine = create_engine('sqlite:////tmp/teste.db', echo=True)
Base = declarative_base(bind=engine)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(40))
    address = Column(UnicodeText, nullable=True)
    password = Column(String(20))

    def __init__(self, name, address=None, password=None):
        self.name = name
        self.address = address
        if password is None:
            password = ''.join(choice(letters) for n in xrange(10))
        self.password = password

Base.metadata.create_all()

Session = sessionmaker(bind=engine)
s = Session()
</snippet></ROW><ROW><id>2047844</id><snippet># create instances of my user object
u = User('nosklo')
u.address = '66 Some Street #500'

u2 = User('lakshmipathi')
u2.password = 'ihtapimhskal'

# testing
s.add_all([u, u2])
s.commit()
</snippet></ROW><ROW><id>2047844</id><snippet>INSERT</snippet></ROW><ROW><id>2047844</id><snippet># When you query the data back it returns instances of your class:

for user in s.query(User):
    print type(user), user.name, user.password
</snippet></ROW><ROW><id>2047844</id><snippet>SELECT users.id AS users_id, users.name AS users_name, users.address AS users_address, users.password AS users_password</snippet></ROW><ROW><id>2047844</id><snippet>&lt;class '__main__.User'&gt; nosklo aBPDXlTPJs
&lt;class '__main__.User'&gt; lakshmipathi ihtapimhskal
</snippet></ROW><ROW><id>2048136</id><snippet>Column('password', String),
</snippet></ROW><ROW><id>2048136</id><snippet>Column('password', String(20)),
</snippet></ROW><ROW><id>2048191</id><snippet>ff</snippet></ROW><ROW><id>2048191</id><snippet>f</snippet></ROW><ROW><id>2048191</id><snippet>from f import ff
ff(...)
</snippet></ROW><ROW><id>2048191</id><snippet>import f
f.ff(...)
</snippet></ROW><ROW><id>2048191</id><snippet>tags</snippet></ROW><ROW><id>2048191</id><snippet>ctags</snippet></ROW><ROW><id>2048191</id><snippet>ptags.py</snippet></ROW><ROW><id>2048191</id><snippet>Ctrl-]</snippet></ROW><ROW><id>2048461</id><snippet># classes should have capitalized names ...
class a(str):
    def b(self,*x,**y):
        print 'debugging: ', self, x, y
        print str.decode(self, *x,**y)

if __name__ == '__main__':
    b=a('aaa')
    b.b('utf-8')

    b=a()
    b.b('utf-8')

# =&gt; output

# debugging:  aaa ('utf-8',) {}
# aaa
# debugging:   ('utf-8',) {}
#
</snippet></ROW><ROW><id>2048611</id><snippet>QtCore.SIGNAL("aa(str)")</snippet></ROW><ROW><id>2048611</id><snippet>QtCore.SIGNAL("aa")</snippet></ROW><ROW><id>2048611</id><snippet>QtCore.QObject.connect(self.loginDialog, QtCore.SIGNAL("aa"), self.login)
</snippet></ROW><ROW><id>2049228</id><snippet>import heapq, glob

def my_iterable():
    for fname in glob.glob("in_s*.txt"):
        f = open(fname, "r")
        for line in f:
            items = line.split()
            yield fname, items[0], float(items[6])
        f.close()

result = heapq.nsmallest(10, my_iterable(), lambda x: x[2])
print result
</snippet></ROW><ROW><id>2049228</id><snippet>list(iterable)</snippet></ROW><ROW><id>2049228</id><snippet>heapreplace()</snippet></ROW><ROW><id>2049228</id><snippet>heappush()</snippet></ROW><ROW><id>2049228</id><snippet>heappushpop()</snippet></ROW><ROW><id>2049228</id><snippet>key</snippet></ROW><ROW><id>2049228</id><snippet>import glob
from heapq import heappush, heappushpop
from pprint import pprint as pp

def my_iterable():
    for fname in glob.glob("in_s*.txt"):
        f = open(fname, "r")
        for line in f:
            items = line.split()
            yield -float(items[6]), fname, items[0]
        f.close()

def homegrown_nlargest(n, iterable):
    """Ensures heap never has more than n entries"""
    heap = []
    for item in iterable:
        if len(heap) &lt; n:
            heappush(heap, item)
        else:
            heappushpop(heap, item)
    return heap

result =  homegrown_nlargest(10, my_iterable())
result = sorted(result, reverse=True)
result = [(fname, fld0, -negfld6) for negfld6, fname, fld0 in result]
pp(result)
</snippet></ROW><ROW><id>2049282</id><snippet>rename</snippet></ROW><ROW><id>2049282</id><snippet>File.renameTo()</snippet></ROW><ROW><id>2049597</id><snippet>__license__</snippet></ROW><ROW><id>2049597</id><snippet>__author__ = "Software Authors Name"
__copyright__ = "Copyright (C) 2004 Author Name"
__license__ = "Public Domain"
__version__ = "1.0"
</snippet></ROW><ROW><id>2049597</id><snippet>__version__</snippet></ROW><ROW><id>2049648</id><snippet>a()
</snippet></ROW><ROW><id>2049648</id><snippet>if __name__ == '__main__': a()
</snippet></ROW><ROW><id>2049648</id><snippet>if __name__ == '__main__': b = a()
</snippet></ROW><ROW><id>2049648</id><snippet>def a():

    b = 'print'
    print b

if __name__ == '__main__': b = a()
</snippet></ROW><ROW><id>2050357</id><snippet>file</snippet></ROW><ROW><id>2050357</id><snippet>Mock</snippet></ROW><ROW><id>2050357</id><snippet>self.__dict__</snippet></ROW><ROW><id>2050357</id><snippet>__getattr__</snippet></ROW><ROW><id>2050357</id><snippet>def __getstate__(self): return self.__dict__
def __setstate__(self, d): self.__dict__.update(d)
</snippet></ROW><ROW><id>2050357</id><snippet>pickle</snippet></ROW><ROW><id>2050357</id><snippet>self.__dict__</snippet></ROW><ROW><id>2050357</id><snippet>__getattr__</snippet></ROW><ROW><id>2050365</id><snippet>cksum=0x%4.4x</snippet></ROW><ROW><id>2050365</id><snippet>System.out.printf("cksum=0x%4.4x%n", ...);
</snippet></ROW><ROW><id>2050365</id><snippet>System.out.printf("cksum=%#04x%n", ...);
</snippet></ROW><ROW><id>2050365</id><snippet>DataInputStream</snippet></ROW><ROW><id>2050365</id><snippet>bis.read(buffer)</snippet></ROW><ROW><id>2050365</id><snippet>dis.read(buffer)</snippet></ROW><ROW><id>2050410</id><snippet>{referer: http://test/index-test.html}
</snippet></ROW><ROW><id>2050410</id><snippet>{referer: "http://test/index-test.html"}
</snippet></ROW><ROW><id>2050410</id><snippet>{"referer": "http://test/index-test.html"}
</snippet></ROW><ROW><id>2050542</id><snippet>def doit(inf, ouf, thestring, separator='SEPARATOR\n'):
  thestring += '\n'
  for line in inf:
    # here we're always at the start-of-block separator
    assert line == separator
    blockid = next(inf)
    if blockid == thestring:
      # found block of interest, use enumerate to count its lines
      for c, line in enumerate(inf):
        if line == separator: break
      assert line == separator
      # emit results and terminate function
      ouf.writelines((separator, thestring, '(%d)' % c, separator))
      inf.close()
      ouf.close()
      return
    # non-interesting block, just skip it
    for line in inf:
      if line == separator: break
</snippet></ROW><ROW><id>2050542</id><snippet>blockid = next(inf)</snippet></ROW><ROW><id>2050542</id><snippet>blockid = inf.next()</snippet></ROW><ROW><id>2050542</id><snippet>thestring</snippet></ROW><ROW><id>2050542</id><snippet>separator</snippet></ROW><ROW><id>2050542</id><snippet>sys.stdin</snippet></ROW><ROW><id>2050542</id><snippet>sys.stdout</snippet></ROW><ROW><id>2050542</id><snippet>assert</snippet></ROW><ROW><id>2050542</id><snippet>for</snippet></ROW><ROW><id>2050542</id><snippet>next(inf)</snippet></ROW><ROW><id>2050649</id><snippet>[s + mystring for s in mylist]
</snippet></ROW><ROW><id>2050649</id><snippet>list</snippet></ROW><ROW><id>2050649</id><snippet>(s + mystring for s in mylist)
</snippet></ROW><ROW><id>2050883</id><snippet>-g</snippet></ROW><ROW><id>2050913</id><snippet>b*(abb*)*a?
</snippet></ROW><ROW><id>2050913</id><snippet>p = re.compile(r'^b*(abb*)*a?$')
</snippet></ROW><ROW><id>2050913</id><snippet>s = 'aa'
</snippet></ROW><ROW><id>2050913</id><snippet>&gt;&gt; p = re.compile(r'b*(abb*)*a?')
&gt;&gt; bool(p.match(s))
True
</snippet></ROW><ROW><id>2050913</id><snippet>&gt;&gt; p = re.compile(r'^b*(abb*)*a?$')
&gt;&gt; bool(p.match(s))
False
</snippet></ROW><ROW><id>2050913</id><snippet>&gt;&gt; s = 'aa'
&gt;&gt; p = re.compile(r'b*(abb*)*a?$')
&gt;&gt; bool(p.match(s))
False                 # Correct
&gt;&gt; bool(p.search(s))
True                  # Incorrect - search ignored the first 'a'
</snippet></ROW><ROW><id>2051044</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>2051045</id><snippet>i</snippet></ROW><ROW><id>2051045</id><snippet>0</snippet></ROW><ROW><id>2051045</id><snippet>while</snippet></ROW><ROW><id>2051076</id><snippet>ord(my_byte)</snippet></ROW><ROW><id>2051076</id><snippet>my_byte == "0xff"</snippet></ROW><ROW><id>2051076</id><snippet>ff</snippet></ROW><ROW><id>2051076</id><snippet>int(my_byte, 16)</snippet></ROW><ROW><id>2051076</id><snippet>int_bytes = (int(my_bytes[i:i+2], 16) for i in xrange(0, len(my_bytes), 2) ) 
</snippet></ROW><ROW><id>2051151</id><snippet>import matplotlib.pyplot as plt

figure = plt.figure()
# plotting
plt.plot([1,2,3],[10,20,30],'bo-')
plt.grid()
plt.legend()

def on_press(event):
    print 'you pressed', event.button, event.xdata, event.ydata
    event.canvas.figure.clear()
    # select new curves to plot, in this example [1,2,3] [0,0,0]
    event.canvas.figure.gca().plot([1,2,3],[0,0,0], 'ro-')
    event.canvas.figure.gca().grid()
    event.canvas.figure.gca().legend()
    event.canvas.draw()


figure.canvas.mpl_connect('button_press_event', on_press)
</snippet></ROW><ROW><id>2051567</id><snippet>|</snippet></ROW><ROW><id>2051567</id><snippet>srv*:</snippet></ROW><ROW><id>2051567</id><snippet>r"HQ01 : HTTP Service - (?:[Ss][Rr][Vv]\d+\.\w+\.com:)?(\w+\.\w+\.(?:net|com|org))"
</snippet></ROW><ROW><id>2051598</id><snippet>id</snippet></ROW><ROW><id>2051598</id><snippet>ID</snippet></ROW><ROW><id>2051598</id><snippet>é</snippet></ROW><ROW><id>2051598</id><snippet>getElementsByTagName</snippet></ROW><ROW><id>2051598</id><snippet>element.id</snippet></ROW><ROW><id>2051598</id><snippet>getElementById</snippet></ROW><ROW><id>2051598</id><snippet>text/html</snippet></ROW><ROW><id>2051628</id><snippet>def mount(f):
    op = gio.MountOperation()
    op.connect('ask-password', ask_password_cb)
    f.mount_enclosing_volume(op, mount_done_cb)

def ask_password_cb(op, message, default_user, default_domain, flags):
    op.set_username(USERNAME)
    op.set_domain(DOMAIN)
    op.set_password(PASSWORD)
    op.reply(gio.MOUNT_OPERATION_HANDLED)

def mount_done_cb(obj, res):
    obj.mount_enclosing_volume_finish(res)
</snippet></ROW><ROW><id>2051646</id><snippet>def toUnix(path):
    return path.replace("\\", "/")
</snippet></ROW><ROW><id>2051674</id><snippet>WORK_HOUR_CHOICES = (
    (Decimal("0"), '0'),
    (Decimal("0.5"), '0.5'),
    (Decimal("1"), '1'),
    (Decimal("1.5"), '1.5'),
    (Decimal("2"), '2'),
    (Decimal("2.5"), '2.5')
)
</snippet></ROW><ROW><id>2051674</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal(1.5)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\software\Python25\lib\decimal.py", line 578, in __new__
    "First convert the float to a string")
TypeError: Cannot convert float to Decimal.  First convert the float to a string
&gt;&gt;&gt; Decimal("1.5")
Decimal("1.5")
</snippet></ROW><ROW><id>2051921</id><snippet>#! /usr/bin/python

import gtk
import gtk.glade
import gconf

class GConfExample:
    def __init__(self):
        self.client = gconf.client_get_default()

    def get_key(self, key):
        return client.get_string(key)

    def set_key(self, key, val):
        client.set_string(key, str(val))
</snippet></ROW><ROW><id>2051921</id><snippet>mygconf['/path/to/key'];
</snippet></ROW><ROW><id>2051921</id><snippet>foo = self.gconf_client.get_string("/path/to/my/config/data/foo")
bar = self.gconf_client.get_int("/path/to/my/config/data/bar")
baz = self.gconf_client.get_bool("/path/to/my/config/data/baz")
</snippet></ROW><ROW><id>2051921</id><snippet>get_*</snippet></ROW><ROW><id>2051921</id><snippet>set_*</snippet></ROW><ROW><id>2052153</id><snippet>text/uri-list</snippet></ROW><ROW><id>2052153</id><snippet>text/uri-list</snippet></ROW><ROW><id>2052153</id><snippet>event.mimeData().urls()</snippet></ROW><ROW><id>2052206</id><snippet>setdefault()</snippet></ROW><ROW><id>2052206</id><snippet>&gt;&gt;&gt; key = 'b'
&gt;&gt;&gt; val = 'a'
&gt;&gt;&gt; print d
{}
&gt;&gt;&gt; d.setdefault(key, []).append(val)
&gt;&gt;&gt; print d
{'b': ['a']}
&gt;&gt;&gt; d.setdefault(key, []).append('zee')
&gt;&gt;&gt; print d
{'b': ['a', 'zee']}
</snippet></ROW><ROW><id>2052206</id><snippet>&gt;&gt;&gt; b = d.setdefault('b', [])
&gt;&gt;&gt; if val not in b:
...   b.append(val)
... 
&gt;&gt;&gt; print d
{'b': ['a', 'zee', 'c']}
</snippet></ROW><ROW><id>2052220</id><snippet>form</snippet></ROW><ROW><id>2052396</id><snippet>raise Exception("I know python!")
</snippet></ROW><ROW><id>2052462</id><snippet>#!usr/bin/env python

import wx
import threading
import Queue
import random
import time

TextEventType = wx.NewEventType()
EVT_THREAD_TEXT_EVENT = wx.PyEventBinder(TextEventType, 1)

global_queue = Queue.Queue()

def threadStart(numthrds, queue, window):
    for i in range(numthrds):
        i = TextThread(queue, window)

class TextThread(threading.Thread):
    def __init__(self, queue, output_window):
        threading.Thread.__init__(self)
        self.inqueue = queue
        self.output_window = output_window
        self.start()


    def run(self):
        word = self.inqueue.get()
        self.setName(word.upper())
        wait = random.randrange(1, 10)
        time.sleep(wait)
        msg = 'Thread: ' + self.getName() + '--wait= ' + str(wait) + ' ' + word
        evt = NewTextEvent(TextEventType, -1)
        evt.setText(msg)
        wx.PostEvent(self.output_window, evt) #post EVT_THREAD_TEXT_EVENT
        #self.inqueue.task_done() #may not need this if non-blocking



class NewTextEvent(wx.PyCommandEvent):
    def __init__(self, evtType, id):
        wx.PyCommandEvent.__init__(self, evtType, id)

        self.msg = ''

    def setText(self, text):
        self.msg = text

    def getText(self):
        return self.msg

class TextFrame(wx.Frame):
    def __init__(self, parent, id, *args, **kwargs):
        wx.Frame.__init__(self, parent, id, *args, **kwargs)
        self.queue = Queue.Queue()
        framesizer = wx.BoxSizer(wx.VERTICAL)
        self.panel = ThreadPanel(self, wx.ID_ANY)
        framesizer.Add(self.panel, 0, wx.EXPAND)
        self.SetSizerAndFit(framesizer)

        self.Bind(EVT_THREAD_TEXT_EVENT, self.OnThreadText)

    def OnThreadText(self, evt):
        msg = evt.getText()
        self.panel.out_tc.AppendText(msg + '\n')

class ThreadPanel(wx.Panel):
    def __init__(self, parent, id, *args, **kwargs):
        wx.Panel.__init__(self, parent, *args, **kwargs)
        vsizer = wx.BoxSizer(wx.VERTICAL)
        self.wordtc = wx.TextCtrl(self, id=wx.ID_ANY, value='', size=(350, -1))
        self.inst_text = wx.StaticText(self, wx.ID_ANY,
            label='Enter a list of space-separated words')
        self.out_tc = wx.TextCtrl(self, id=wx.ID_ANY, size=(350, 300), 
            value='', style=wx.TE_MULTILINE)
        self.start_button = wx.Button(self, wx.ID_ANY, label='Start Threads')

        vsizer.Add(self.inst_text, 0, wx.ALIGN_LEFT)
        vsizer.Add(self.wordtc, 0, wx.EXPAND)
        vsizer.Add(self.start_button)
        vsizer.Add((100,100))
        vsizer.Add(self.out_tc, 0, wx.EXPAND)
        self.SetSizer(vsizer)
        self.Bind(wx.EVT_BUTTON, self.OnStartButton, self.start_button)

    def OnStartButton(self, evt):
        self.out_tc.Clear()
        text = self.wordtc.GetValue()
        self.wordtc.Clear()
        if not text.count(','):
            text = text.split(' ')
        num_thrds = len(text)
        for word in text:
            word = word.strip()
            self.GetParent().queue.put(word)
        threadStart(num_thrds, self.GetParent().queue, self.GetParent())




if __name__ == "__main__":
    app = wx.App()
    frame = TextFrame(None, wx.ID_ANY, 'Thread test')
    frame.Show()    
    app.MainLoop()
</snippet></ROW><ROW><id>2052462</id><snippet>#!usr/bin/env python

import wx
import random

colorEventType = wx.NewEventType()
EVT_COLOR_EVENT = wx.PyEventBinder(colorEventType, 1)

class ButtonPanel(wx.Panel):
    def __init__(self, parent, *args, **kwargs):
        wx.Panel.__init__(self, parent, *args, **kwargs)

        vsizer = wx.BoxSizer(wx.VERTICAL)
        self.rstbutt = wx.Button(self, wx.ID_ANY, label='Restore')
        self.rstbutt.Disable()
        self.Bind(wx.EVT_BUTTON, self.OnButt, self.rstbutt)
        vsizer.Add(self.rstbutt, 0, wx.ALIGN_CENTER)
        vsizer.Add((500,150), 0)
        self.SetSizer(vsizer)

    def OnButt(self, evt):
        self.SetBackgroundColour(wx.NullColor)
        self.GetParent().Refresh()
        self.rstbutt.Disable()

class ColorEvent(wx.PyCommandEvent):
    def __init__(self, evtType, id):
        wx.PyCommandEvent.__init__(self, evtType, id)
        self.color = None

    def SetMyColor(self, color):
        self.color = color

    def GetMyColor(self):
        return self.color

class MainFrame(wx.Frame):
    def __init__(self, parent, *args, **kwargs):
        wx.Frame.__init__(self, parent, *args, **kwargs)
        framesizer = wx.BoxSizer(wx.VERTICAL)
        self.panel = ButtonPanel(self, wx.ID_ANY)
        framesizer.Add(self.panel, 1, wx.EXPAND)

        menubar = wx.MenuBar()
        filemenu = wx.Menu()
        menuquit = filemenu.Append(wx.ID_ANY, '&amp;Quit')
        menubar.Append(filemenu, 'File')
        colormenu = wx.Menu()
        switch = colormenu.Append(wx.ID_ANY, '&amp;Switch Color')
        menubar.Append(colormenu, '&amp;Color')
        self.SetMenuBar(menubar)

        self.Bind(wx.EVT_MENU, self.OnQuit, menuquit)
        self.Bind(wx.EVT_MENU, self.OnColor, switch)
        self.Bind(EVT_COLOR_EVENT, self.ColorSwitch)
        self.SetSizerAndFit(framesizer)

    def OnQuit(self, evt):
        self.Close()

    def OnColor(self, evt):
        colevt = ColorEvent(colorEventType, -1) 
        colors = ['red', 'green', 'blue', 'white', 'black', 'pink', 
            (106, 90, 205), #slate blue
            (64, 224, 208), #turquoise
            ]
        choice = random.choice(colors)
        colevt.SetMyColor(choice)
        self.GetEventHandler().ProcessEvent(colevt)
        #evt.Skip()

    def ColorSwitch(self, evt):
        color = evt.GetMyColor()
        #print(color)
        self.panel.SetBackgroundColour(color)
        self.Refresh()
        self.panel.rstbutt.Enable()



if __name__ == "__main__":
    app = wx.App()
    frame = MainFrame(None, wx.ID_ANY, title="Change Panel Color Custom Event")
    frame.Show(True)

    app.MainLoop()
</snippet></ROW><ROW><id>2052502</id><snippet>class Phone_Number():
    def get_phone_numbers(self):
        phone_count = int(raw_input("How many phone numbers?\n"))
        self.phone_numbers = []
        for _ in range(phone_count):
            self.phone_numbers.append(raw_input("Phone Number: "))

p = Phone_Number()
p.get_phone_numbers()
for phone_number in p.phone_numbers:
    print phone_number
</snippet></ROW><ROW><id>2052981</id><snippet>&gt;&gt;&gt; lst = [3, 3, 4]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; set(itertools.permutations(lst))
{(3, 4, 3), (3, 3, 4), (4, 3, 3)}
</snippet></ROW><ROW><id>2053186</id><snippet>for s in mystrings:
    open_window_for_string(s)
</snippet></ROW><ROW><id>2053186</id><snippet>open_window_for_string</snippet></ROW><ROW><id>2053186</id><snippet>filename</snippet></ROW><ROW><id>2053186</id><snippet>for</snippet></ROW><ROW><id>2053564</id><snippet>any()</snippet></ROW><ROW><id>2053564</id><snippet>&gt;&gt;&gt; any(item['color'] == 'red' and item['time'] != 2  for item in thelist)
False
</snippet></ROW><ROW><id>2053954</id><snippet>cmds = [
    "lock",
    "read",
    "write",
    "request",
    "log",
    ]

def match_cmd(s):
    matched = [c for c in cmds if c.startswith(s)]
    if matched:
        return matched[0]
</snippet></ROW><ROW><id>2053963</id><snippet>#!/usr/bin/python

url = "svn://server/path/to/repo"
path = "/path/to/local/wc"

import pysvn
import threading

# Set to something reasonable
SVN_TIMEOUT = 1000

svn_timer = None
stop_svn = False

def timer_expired():
    # Too long since last SVN event, so do something sensible...
    print "SVN took too long!"
    global stop_svn
    stop_svn = True

def svn_cancel():
    return stop_svn

def notify( event_dict ):
    global svn_timer
    if svn_timer:
        svn_timer.cancel()
    svn_timer = threading.Timer(SVN_TIMEOUT, timer_expired)
    svn_timer.start()

svn_client = pysvn.Client()
svn_client.callback_notify = notify
svn_client.callback_cancel = svn_cancel

svn_timer = threading.Timer(SVN_TIMEOUT, timer_expired)
svn_timer.start()

revision = svn_client.checkout(url,path)

if svn_timer:
    svn_timer.cancel()
</snippet></ROW><ROW><id>2053977</id><snippet>xmllint --noent foobar.xml
</snippet></ROW><ROW><id>2054141</id><snippet>for y in x...</snippet></ROW><ROW><id>2054141</id><snippet>iter = x.__iter__()         # get iterator
try:
    while 1:
        y = iter.next()         # get each item
        ...                     # process y
except StopIteration: pass  # iterator exhausted
</snippet></ROW><ROW><id>2054374</id><snippet>import win32com.client
from pythoncom import PumpWaitingMessages
from time import time, strftime
import constants

class EventHandler:
    def OnProcessEvent(self, result):
        event = win32com.client.gencache.EnsureDispatch(result) 
        if event.EventType == constants.SUBSCRIPTION_DATA:
            self.getData(event)
        elif event.EventType == constants.SUBSCRIPTION_STATUS:
            self.getStatus(event)
        else:
            self.getMisc(event)
    def getData(self, event):
        iterator = event.CreateMessageIterator()
        while iterator.Next():
            message = iterator.Message  
            dataString = ''
            for fieldIndex, field in enumerate(constants.fields):           
                if message.AsElement.HasElement(field):
                    element = message.GetElement(field)
                    if element.IsNull:
                        theValue = ''
                    else:
                        theValue = ', Value: ' + str(element.Value) 
                    dataString = dataString + ', (Type: ' + element.Name + theValue + ')'
            print strftime('%m/%d/%y %H:%M:%S') + ', MessageType: ' + message.MessageTypeAsString + ', CorrelationId: ' + str(message.CorrelationId) + dataString
    def getMisc(self, event):
        iterator = event.CreateMessageIterator()
        while iterator.Next():
            message = iterator.Message
            print strftime('%m/%d/%y %H:%M:%S') + ', MessageType: ' + message.MessageTypeAsString
    def getStatus(self, event):
        iterator = event.CreateMessageIterator()
        while iterator.Next():
            message = iterator.Message
            if message.AsElement.HasElement('reason'):
                element = message.AsElement.GetElement('reason')
                print strftime('%m/%d/%y %H:%M:%S') + ', MessageType: ' + message.MessageTypeAsString + ', CorrelationId: ' + str(message.CorrelationId) + ', Category: ' + element.GetElement('category').Value + ', Description: ' + element.GetElement('description').Value 
            if message.AsElement.HasElement('exceptions'):
                element = message.AsElement.GetElement('exceptions')
                exceptionString = ''
                for n in range(element.NumValues):
                    exceptionInfo = element.GetValue(n)
                    fieldId = exceptionInfo.GetElement('fieldId')
                    reason = exceptionInfo.GetElement('reason')
                    exceptionString = exceptionString + ', (Field: ' + fieldId.Value + ', Category: ' + reason.GetElement('category').Value + ', Description: ' + reason.GetElement('description').Value + ') ' 
                print strftime('%m/%d/%y %H:%M:%S') + ', MessageType: ' + message.MessageTypeAsString + ', CorrelationId: ' + str(message.CorrelationId) + exceptionString

class bloombergSource:
    def __init__(self):
        session = win32com.client.DispatchWithEvents('blpapicom.Session' , EventHandler)
        session.Start()
        started = session.OpenService('//blp/mktdata')
        subscriptions = session.CreateSubscriptionList()
        for tickerIndex, ticker in enumerate(constants.tickers):
            if len(constants.interval) &gt; 0:
                subscriptions.AddEx(ticker, constants.fields, constants.interval, session.CreateCorrelationId(tickerIndex))
            else:
                subscriptions.Add(ticker, constants.fields, session.CreateCorrelationId(tickerIndex))   
        session.Subscribe(subscriptions)
        endTime = time() + 2
        while True:
            PumpWaitingMessages()
            if endTime &lt; time():                
                break               

if __name__ == "__main__":
    aBloombergSource = bloombergSource()
</snippet></ROW><ROW><id>2054374</id><snippet>ADMIN = 1
AUTHORIZATION_STATUS = 11
BLPSERVICE_STATUS = 9
PARTIAL_RESPONSE = 6
PUBLISHING_DATA = 13
REQUEST_STATUS = 4
RESOLUTION_STATUS = 12
RESPONSE = 5
SESSION_STATUS = 2
SUBSCRIPTION_DATA = 8
SUBSCRIPTION_STATUS = 3
TIMEOUT = 10
TOKEN_STATUS = 15
TOPIC_STATUS = 14
UNKNOWN = -1
fields = ['BID']
tickers = ['AUD Curncy']
interval = '' #'interval=5.0'
</snippet></ROW><ROW><id>2054374</id><snippet>import win32com.client

session = win32com.client.Dispatch('blpapicom.Session')
session.QueueEvents = True
session.Start()
started = session.OpenService('//blp/refdata')
dataService = session.GetService('//blp/refdata')
request = dataService.CreateRequest('HistoricalDataRequest')
request.GetElement('securities').AppendValue('5 HK Equity')
request.GetElement('fields').AppendValue('PX_LAST')
request.Set('periodicitySelection', 'DAILY')
request.Set('startDate', '20090119')
request.Set('endDate', '20090130')
cid = session.SendRequest(request)
ADMIN = 1
AUTHORIZATION_STATUS = 11
BLPSERVICE_STATUS = 9
PARTIAL_RESPONSE = 6
PUBLISHING_DATA = 13
REQUEST_STATUS = 4
RESOLUTION_STATUS = 12
RESPONSE = 5
SESSION_STATUS = 2
SUBSCRIPTION_DATA = 8
SUBSCRIPTION_STATUS = 3
TIMEOUT = 10
TOKEN_STATUS = 15
TOPIC_STATUS = 14
UNKNOWN = -1
stayHere = True
while stayHere:
    event = session.NextEvent();
    if event.EventType == PARTIAL_RESPONSE or event.EventType == RESPONSE:
        iterator = event.CreateMessageIterator()
        iterator.Next()
        message = iterator.Message
        securityData = message.GetElement('securityData')
        securityName = securityData.GetElement('security')
        fieldData = securityData.GetElement('fieldData')
        returnList = [[0 for col in range(fieldData.GetValue(row).NumValues+1)] for row in range(fieldData.NumValues)]
        for row in range(fieldData.NumValues):
            rowField = fieldData.GetValue(row)
            for col in range(rowField.NumValues+1):
                colField = rowField.GetElement(col)
                returnList[row][col] = colField.Value
        stayHere = False
        break
element = None
iterator = None
message = None
event = None
session = None
print returnList
</snippet></ROW><ROW><id>2054383</id><snippet>from numpy import array
myVector = array([Vx, Vy, Vz])
myMatrix = array([[Vx, Vy, Vz], [1,2,3]])
</snippet></ROW><ROW><id>2054423</id><snippet>t = tuple(x[0] for x in s)
</snippet></ROW><ROW><id>2054505</id><snippet>def translate(cities, tags, kwargs):
  return {'city': cities[int(kwargs['city'])],
          'tag': tags[int(kwargs['tag'])]}
</snippet></ROW><ROW><id>2054505</id><snippet>      # Now new_keywords is {'city': '3', 'tag': '2,3'}
      # I WANT TO BE LIKE THIS
      #new_keywords is {'city': 'Phnom Penh', 'tag': 'public,private'}
</snippet></ROW><ROW><id>2054505</id><snippet>def commaplay(adict, value):
  return ','.join(adict[int(x)] for x in value.split(','))

def translate(cities, tags, kwargs):
  return {'city': commaplay(cities, kwargs['city']),
          'tag': commaplay(tags, kwargs['tag'])}
</snippet></ROW><ROW><id>2054648</id><snippet>termios</snippet></ROW><ROW><id>2054648</id><snippet>termios(3)</snippet></ROW><ROW><id>2054924</id><snippet>site-packages</snippet></ROW><ROW><id>2055009</id><snippet>import warnings
warnings.simplefilter("ignore",DeprecationWarning)
</snippet></ROW><ROW><id>2055009</id><snippet>md5</snippet></ROW><ROW><id>2055009</id><snippet>warnings</snippet></ROW><ROW><id>2055141</id><snippet>save</snippet></ROW><ROW><id>2055144</id><snippet>0x600D</snippet></ROW><ROW><id>2055144</id><snippet>0xBAD</snippet></ROW><ROW><id>2055144</id><snippet>True</snippet></ROW><ROW><id>2055144</id><snippet>0x600D</snippet></ROW><ROW><id>2055144</id><snippet>False</snippet></ROW><ROW><id>2055144</id><snippet>0xBAD</snippet></ROW><ROW><id>2055144</id><snippet>True</snippet></ROW><ROW><id>2055144</id><snippet>0x600D</snippet></ROW><ROW><id>2055144</id><snippet>0x600D</snippet></ROW><ROW><id>2055144</id><snippet>0xBAD</snippet></ROW><ROW><id>2055144</id><snippet>True</snippet></ROW><ROW><id>2055144</id><snippet>False</snippet></ROW><ROW><id>2055144</id><snippet>__str__</snippet></ROW><ROW><id>2055144</id><snippet>0x600D</snippet></ROW><ROW><id>2055144</id><snippet>'True'</snippet></ROW><ROW><id>2055144</id><snippet>True = False
</snippet></ROW><ROW><id>2055144</id><snippet>True</snippet></ROW><ROW><id>2055144</id><snippet>True</snippet></ROW><ROW><id>2055144</id><snippet>False</snippet></ROW><ROW><id>2055144</id><snippet>0xBAD</snippet></ROW><ROW><id>2055144</id><snippet>False</snippet></ROW><ROW><id>2055144</id><snippet>True = True
</snippet></ROW><ROW><id>2055144</id><snippet>True</snippet></ROW><ROW><id>2055144</id><snippet>True</snippet></ROW><ROW><id>2055144</id><snippet>True</snippet></ROW><ROW><id>2055144</id><snippet>0xBAD</snippet></ROW><ROW><id>2055144</id><snippet>0xBAD</snippet></ROW><ROW><id>2055144</id><snippet>False</snippet></ROW><ROW><id>2055144</id><snippet>True = not True
</snippet></ROW><ROW><id>2055144</id><snippet>True</snippet></ROW><ROW><id>2055144</id><snippet>0xBAD</snippet></ROW><ROW><id>2055144</id><snippet>not</snippet></ROW><ROW><id>2055144</id><snippet>not</snippet></ROW><ROW><id>2055144</id><snippet>0xBAD</snippet></ROW><ROW><id>2055144</id><snippet>0xBAD</snippet></ROW><ROW><id>2055144</id><snippet>0x600D</snippet></ROW><ROW><id>2055144</id><snippet>=</snippet></ROW><ROW><id>2055144</id><snippet>True</snippet></ROW><ROW><id>2055144</id><snippet>True</snippet></ROW><ROW><id>2055144</id><snippet>0x600D</snippet></ROW><ROW><id>2055144</id><snippet>print True</snippet></ROW><ROW><id>2055144</id><snippet>True</snippet></ROW><ROW><id>2055149</id><snippet>views.py:187</snippet></ROW><ROW><id>2055149</id><snippet>new_user = backend.register(request, **form.cleaned_data)
</snippet></ROW><ROW><id>2055149</id><snippet>backends/default/__init__.py:78</snippet></ROW><ROW><id>2055149</id><snippet>new_user = RegistrationProfile.objects.create_inactive_user(username, email,
   password, site)
</snippet></ROW><ROW><id>2055149</id><snippet>models.py:79</snippet></ROW><ROW><id>2055149</id><snippet>if send_email:
    registration_profile.send_activation_email(site)
</snippet></ROW><ROW><id>2055149</id><snippet>models.py:207</snippet></ROW><ROW><id>2055149</id><snippet>def send_activation_email(self, site):
    ...
    self.user.email_user(subject, message, settings.DEFAULT_FROM_EMAIL)
</snippet></ROW><ROW><id>2055149</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>2055149</id><snippet>django.contrib.auth.models.User.email_user</snippet></ROW><ROW><id>2055149</id><snippet>grep</snippet></ROW><ROW><id>2055165</id><snippet>import module
import inspect
src = inspect.getsource(module)
</snippet></ROW><ROW><id>2055711</id><snippet>a.b.a is b.b.a</snippet></ROW><ROW><id>2055711</id><snippet>True</snippet></ROW><ROW><id>2055711</id><snippet>a</snippet></ROW><ROW><id>2055711</id><snippet>b</snippet></ROW><ROW><id>2055769</id><snippet>lines = open('file.txt')
for line in lines:
   as_list = line.split()
   result = [as_list[0], as_list[1], as_list[2:]]
   print result
</snippet></ROW><ROW><id>2055769</id><snippet>['index', 'command', ['param1', 'param2', 'param3']]
</snippet></ROW><ROW><id>2055987</id><snippet>import meminfo, gc, commands

page_size = int(commands.getoutput("getconf PAGESIZE"))

def stat(message):
    s = meminfo.proc_stat()
    print "My memory usage %s: RSS: %dkb, VSIZE: %dkb" % (
        message, s['rss']*page_size/1024, s['vsize']/1024)
mylist = []

stat("before allocating a big list")
for i in range(0,3000000):
    mylist.append('something here to take memory')

stat("after allocating big list")
### uncomment one of these:
mylist = []
# del mylist[:]
stat("after dropping a big list")
gc.collect()
stat("after gc.collect()")
gc.collect()
stat("after second gc.collect()")
gc.collect()
stat("after third gc.collect()")
</snippet></ROW><ROW><id>2055987</id><snippet>My memory usage before allocating a big list: RSS: 3396kb, VSIZE: 7324kb
My memory usage after allocating big list: RSS: 50700kb, VSIZE: 55084kb
My memory usage after dropping a big list: RSS: 38980kb, VSIZE: 42824kb
My memory usage after gc.collect(): RSS: 38980kb, VSIZE: 42824kb
My memory usage after second gc.collect(): RSS: 38980kb, VSIZE: 42824kb
My memory usage after third gc.collect(): RSS: 38980kb, VSIZE: 42824kb
</snippet></ROW><ROW><id>2055987</id><snippet>My memory usage before allocating a big list: RSS: 3392kb, VSIZE: 7324kb
My memory usage after allocating big list: RSS: 50696kb, VSIZE: 55084kb
My memory usage after dropping a big list: RSS: 38976kb, VSIZE: 42824kb
My memory usage after gc.collect(): RSS: 38976kb, VSIZE: 42824kb
My memory usage after second gc.collect(): RSS: 38976kb, VSIZE: 42824kb
My memory usage after third gc.collect(): RSS: 38976kb, VSIZE: 42824kb
</snippet></ROW><ROW><id>2056084</id><snippet>PastableEntry</snippet></ROW><ROW><id>2056084</id><snippet>gtksheet.ItemEntry</snippet></ROW><ROW><id>2056084</id><snippet>paste-clipboard</snippet></ROW><ROW><id>2056084</id><snippet>class PastableEntry(gtksheet.ItemEntry):
    def __init__(self):
        gtksheet.ItemEntry.__init__(self)
        self.connect('paste-clipboard', self.__on_paste)
</snippet></ROW><ROW><id>2056084</id><snippet>application/x-gnumeric</snippet></ROW><ROW><id>2056084</id><snippet>text/html</snippet></ROW><ROW><id>2056084</id><snippet>UTF8_STRING</snippet></ROW><ROW><id>2056084</id><snippet>COMPOUND_TEXT</snippet></ROW><ROW><id>2056084</id><snippet>STRING</snippet></ROW><ROW><id>2056084</id><snippet>1,1 &lt;tab&gt; 1,2 &lt;tab&gt; 1,3 &lt;newline&gt;
2,1 &lt;tab&gt; 2,2 &lt;tab&gt; 2,3 &lt;newline&gt;
3,1 &lt;tab&gt; 3,2 &lt;tab&gt; 3,3
</snippet></ROW><ROW><id>2056084</id><snippet>application/x-gnumeric</snippet></ROW><ROW><id>2056084</id><snippet>text/html</snippet></ROW><ROW><id>2056084</id><snippet>    def __on_paste(self, entry):
        clip = gtk.Clipboard()
        data = clip.wait_for_contents('UTF8_STRING')
        text = data.get_text()
        sheet = self.parent
        o_row, o_col = sheet.get_active_cell()
        for i_row, row in enumerate(text.split('\n')):
            for i_col, cell in enumerate(row.split('\t')):
                sheet.set_cell_text(o_row + i_row, o_col + i_col, cell)
        self.stop_emission('paste-clipboard')
</snippet></ROW><ROW><id>2056084</id><snippet>stop_emission</snippet></ROW><ROW><id>2056084</id><snippet>gobject.type_register(PastableEntry)
</snippet></ROW><ROW><id>2056084</id><snippet>gtksheet.Sheet</snippet></ROW><ROW><id>2056084</id><snippet>s = gtksheet.Sheet(20, 20, "Sheet 1", entry_type=PastableEntry)
</snippet></ROW><ROW><id>2056129</id><snippet>json.load()</snippet></ROW><ROW><id>2056189</id><snippet>_private_var = 42</snippet></ROW><ROW><id>2056357</id><snippet>del a[0][0]
</snippet></ROW><ROW><id>2056781</id><snippet>class Point{
  private int x, y;

  public Point(int x, int y){
    this.x = x;
    this.y = y;
  }

  public void setX(int x){
    this.x = x;
  }

  public int getX(){
    return x;
  }

  public void setY(int y){
    this.y = y;
  }

  public int getY(){
    return y;
  }
}
</snippet></ROW><ROW><id>2056781</id><snippet>@Getter</snippet></ROW><ROW><id>2056781</id><snippet>@Setter</snippet></ROW><ROW><id>2056781</id><snippet>property</snippet></ROW><ROW><id>2056781</id><snippet>class Point{
  @Getter @Setter private int x, y;

  public Point(int x, int y){
    this.x = x;
    this.y = y;
  }
}
</snippet></ROW><ROW><id>2057072</id><snippet>my_dir = os.path.expanduser('~/some_dir')
</snippet></ROW><ROW><id>2057405</id><snippet>python setup.py install</snippet></ROW><ROW><id>2057405</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>2057471</id><snippet>for x in range(subjectlength - 1, -1, -1):
</snippet></ROW><ROW><id>2057471</id><snippet>y</snippet></ROW><ROW><id>2057942</id><snippet>import pygtk
pygtk.require('2.0')
import gobject

class Car(gobject.GObject):
    __gproperties__ = {
        'fuel' : (gobject.TYPE_FLOAT, 'fuel of the car',
                  'amount of fuel that remains in the tank',
                  0, 60, 50, gobject.PARAM_READWRITE)
        }

    __gsignals__ = {
        'engine-started' : (gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE,
                            (gobject.TYPE_FLOAT,))
        }

    def __init__(self):
        gobject.GObject.__init__(self)
        self.fuel = 50

    def do_get_property(self, property):
        if property.name == 'fuel':
            return self.fuel
        else:
            raise AttributeError, 'unknown property %s' % property.name

    def do_set_property(self, property, value):
        if property.name == 'fuel':
            self.fuel = value
        else:
            raise AttributeError, 'unknown property %s' % property.name

    def do_engine_started(self, remaining_fuel):
        print '***** Beginning of class closure *****'
        print 'The engine is ready and we still have %f of fuel' % self.fuel
        print '***** End of class closure *****'

    def start(self):
        self.emit('engine-started', self.get_property('fuel'))

gobject.type_register(Car)
</snippet></ROW><ROW><id>2057995</id><snippet>inspect</snippet></ROW><ROW><id>2057995</id><snippet>finally</snippet></ROW><ROW><id>2057995</id><snippet>gc.disable()</snippet></ROW><ROW><id>2057995</id><snippet>def handle_stackframe_without_leak():
    frame = inspect.currentframe()
    try:
        # do something with the frame
    finally:
        del frame
</snippet></ROW><ROW><id>2058158</id><snippet>getattr</snippet></ROW><ROW><id>2058158</id><snippet>setattr</snippet></ROW><ROW><id>2058158</id><snippet>__getattr__</snippet></ROW><ROW><id>2058158</id><snippet>__setattr__</snippet></ROW><ROW><id>2058158</id><snippet>a</snippet></ROW><ROW><id>2058158</id><snippet>a.b</snippet></ROW><ROW><id>2058158</id><snippet>a.b</snippet></ROW><ROW><id>2058158</id><snippet>a.b</snippet></ROW><ROW><id>2058158</id><snippet>a.b</snippet></ROW><ROW><id>2058158</id><snippet>a.b()</snippet></ROW><ROW><id>2058158</id><snippet>c=a.b</snippet></ROW><ROW><id>2058158</id><snippet>a.b()</snippet></ROW><ROW><id>2058158</id><snippet>b</snippet></ROW><ROW><id>2058158</id><snippet>a</snippet></ROW><ROW><id>2058324</id><snippet>AUTHENTICATION_BACKENDS = (
   'django.contrib.auth.backends.ModelBackend',
   'backends.twitteroauth.TwitterBackend',
)
</snippet></ROW><ROW><id>2058395</id><snippet>(r'^/message/(?&lt;name&gt;\d+)/$', 'your_app.views.direct_to_template')
</snippet></ROW><ROW><id>2058395</id><snippet>def direct_to_template(name):
  return render_to_response('message/%s.html' % name)
</snippet></ROW><ROW><id>2058598</id><snippet>NameError</snippet></ROW><ROW><id>2058598</id><snippet>var1 = var2 = var3 = None
# code that might change the value of three variables mentioned above
myvar = var1 or var2 or var3
</snippet></ROW><ROW><id>2058922</id><snippet>elt</snippet></ROW><ROW><id>2058922</id><snippet>elt</snippet></ROW><ROW><id>2058922</id><snippet>elt</snippet></ROW><ROW><id>2058922</id><snippet>NameError</snippet></ROW><ROW><id>2058922</id><snippet>del elt # not necessary if we haven't use elt before, but just in case
for elt in itertools.chain.from_iterable(node):
    do_stuff_to_each(elt)
try:
    do_stuff_to_last(elt)
except NameError: # no last elt to do stuff to
    pass
</snippet></ROW><ROW><id>2058946</id><snippet>webapp.RequestHandler</snippet></ROW><ROW><id>2058946</id><snippet># Required imports
import cgi
from django.core.files.uploadedfile import SimpleUploadedFile

def get_uploaded_files(self):
    """Gets a dictionary mapping field names to SimpleUploadedFile objects
    for each uploaded file in the given params.  Suitable for passing to a
    Django form as the `files` argument."""
    return dict((k, SimpleUploadedFile(v.filename, v.file.read()))
                for k, v in self.request.params.items()
                if isinstance(v, cgi.FieldStorage) and v.file)
</snippet></ROW><ROW><id>2058946</id><snippet>form = MyForm(self.request.params, self.get_uploaded_files())
</snippet></ROW><ROW><id>2059025</id><snippet>("This is the first line of my text, "
"which will be joined to a second.")
</snippet></ROW><ROW><id>2059025</id><snippet>"This is the first line of my text, " \
"which will be joined to a second."
</snippet></ROW><ROW><id>2059025</id><snippet>"This is the first line of my text, " \ 
"which will be joined to a second."
</snippet></ROW><ROW><id>2059025</id><snippet>+</snippet></ROW><ROW><id>2059025</id><snippet>("This is the first line of my text, " + 
"which will be joined to a second.")
</snippet></ROW><ROW><id>2059025</id><snippet>"""This is the first line of my text
which will be joined to a second."""
</snippet></ROW><ROW><id>2059025</id><snippet>"""This is the first line of my text \
which will be joined to a second."""
</snippet></ROW><ROW><id>2059064</id><snippet>import os

def paths(filename):
    dirList = ['c:\\', 'y:\\', 'z:\\']
    complete = [os.path.join(s, filename) for s in dirList]
    return complete

def fileWrite():
    for each_file in paths('c:\\peter.txt'):
        text = 'Hello World'
        file = open(each_file, 'w')
        file.write(text)
        file.close()
</snippet></ROW><ROW><id>2059064</id><snippet>def paths(filename):
    return [os.path.join(s, filename) for s in ('c:\\', 'y:\\', 'z:\\')]
</snippet></ROW><ROW><id>2059120</id><snippet>if message.value[0] == "/" or message.value[0] == "\\":
</snippet></ROW><ROW><id>2059175</id><snippet>int j=1;
int k=2;
k += j;
</snippet></ROW><ROW><id>2059175</id><snippet>j = 1
k = 2
k += j
</snippet></ROW><ROW><id>2059175</id><snippet>  2           0 LOAD_CONST               1 (1)
              3 STORE_FAST               0 (j)

  3           6 LOAD_CONST               1 (2)
              9 STORE_FAST               1 (k)

  4          12 LOAD_FAST                1 (k)
             15 LOAD_FAST                0 (j)
             18 INPLACE_ADD
             19 STORE_FAST               1 (k)
</snippet></ROW><ROW><id>2059211</id><snippet>import pexpect
MW = "/usr/local/maple12/bin/maple -tu"
X = '1+1;'
child = pexpect.spawn(MW)
child.expect('#--')
child.sendline(X)
child.expect('#--')
out = child.before
out = out[out.find(';')+1:].strip()
out = ''.join(out.split('\r\n'))
print out
</snippet></ROW><ROW><id>2059412</id><snippet>def contact(request):
    if request.method == 'POST': # If the form has been submitted...
        form = ContactForm(request.POST) # A form bound to the POST data
        if form.is_valid(): # All validation rules pass
            # Process the data in form.cleaned_data
            # ...
            return HttpResponseRedirect('/thanks/') # Redirect after POST
    else:
        form = ContactForm() # An unbound form

    return render_to_response('contact.html', {
        'form': form,
    })
</snippet></ROW><ROW><id>2059494</id><snippet>_environ = dict(os.environ)

...

os.environ.clear()
os.environ.update(_environ)
</snippet></ROW><ROW><id>2059714</id><snippet>&gt;&gt;&gt; a = ['a','b','d','c']
&gt;&gt;&gt; b = [1, 2, 4, 3]
&gt;&gt;&gt; c = zip(a, b)
&gt;&gt;&gt; c
[('a', 1), ('b', 2), ('d', 4), ('c', 3)]
&gt;&gt;&gt; c.sort(key=lambda x: x[1])
&gt;&gt;&gt; c
[('a', 1), ('b', 2), ('c', 3), ('d', 4)]
</snippet></ROW><ROW><id>2059751</id><snippet># Save the existing list of warning filters before we modify it using simplefilter().
# Note: the '[:]' causes a copy of the list to be created. Without it, original_filter
# would alias the one and only 'real' list and then we'd have nothing to restore.
original_filters = warnings.filters[:]

# Ignore warnings.
warnings.simplefilter("ignore")

try:
    # Execute the code that presumably causes the warnings.
    fxn()

finally:
    # Restore the list of warning filters.
    warnings.filters = original_filters
</snippet></ROW><ROW><id>2059751</id><snippet>try/finally</snippet></ROW><ROW><id>2059751</id><snippet>with</snippet></ROW><ROW><id>2059751</id><snippet>try/finally</snippet></ROW><ROW><id>2060037</id><snippet>def search(request):
    if 'q' in request.GET and request.GET['q']:
        q = request.GET['q']
        q_school = Lawyer.objects.filter(last__icontains=q).values_list('school', flat=True)
        q_year = Lawyer.objects.filter(last__icontains=q).values_list('year_graduated', flat=True)
        lawyers = Lawyer.objects.filter(school__icontains=q_school[0]).filter(year_graduated__icontains=q_year[0])        
        return render_to_response('search_results.html', {'lawyers': lawyers, 'query': q})
    else:
        return HttpResponse('Please submit a search term.')
</snippet></ROW><ROW><id>2060099</id><snippet>cur.executescript</snippet></ROW><ROW><id>2060099</id><snippet>COMMIT</snippet></ROW><ROW><id>2060099</id><snippet>CREATE</snippet></ROW><ROW><id>2060099</id><snippet>COMMIT</snippet></ROW><ROW><id>2060515</id><snippet>super()</snippet></ROW><ROW><id>2060515</id><snippet>super().__init__</snippet></ROW><ROW><id>2060963</id><snippet>pg_dump -Fc db1 | pg_restore -d db2 -c
</snippet></ROW><ROW><id>2061043</id><snippet>    def Clicked(self, event):
        checkedItems = [i for i in range(self.panel.sitList.GetCount()) if self.panel.sitList.IsChecked(i)]
        print checkedItems
        r = [siteDict[k] for k in checkedItems]
        print r
        for each in r:
            pre = '&lt;HTML&gt;&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;'
            post = '&lt;/HTML&gt;'
            site = urllib2.urlopen(each)
            html=site.read()
            soup = BeautifulSoup(html)
            tags = soup.findAll('a')

            soup1 = BeautifulSoup(''.join(str(t) for t in tags))
            print soup1.prettify()

            aTag,aEnd = makeHTMLTags("A")

            aTag = originalTextFor(aTag)
            aEnd = originalTextFor(aEnd)

            aLink = aTag + SkipTo(aEnd) + aEnd
            aLink.setParseAction(lambda tokens : ''.join(tokens))

            links = aLink.searchString(html)

            out = []
            out.append(pre)
            out.extend(['  '+lnk[0] for lnk in links])
            out.append(post)

            P= '\n'.join(out)
            print type(P)

            print P

            # create the html frame, pass it in your string
            frm = MyHtmlFrame(None, "Charlie", P)
            frm.Show()



class MyHtmlFrame(wx.Frame):
def __init__(self, parent, title, page):  # pass it in the page variable
    wx.Frame.__init__(self, parent, -1, title)
    html = wx.html.HtmlWindow(self)
    if "gtk2" in wx.PlatformInfo:
        html.SetStandardFonts()

    html.SetPage(page)



app = wx.App()

checkList(None, -1, 'Charlie') 
checkList.Show()   # show first frame, which opens other windows
app.MainLoop()
</snippet></ROW><ROW><id>2061184</id><snippet>scipy.io.wavfile.read(somefile)</snippet></ROW><ROW><id>2061184</id><snippet>numpy</snippet></ROW><ROW><id>2061456</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>2061456</id><snippet>Popen</snippet></ROW><ROW><id>2061456</id><snippet>shell=True</snippet></ROW><ROW><id>2061456</id><snippet>subprocess.Popen("curl --data-binary \@"+input_file_path+" -o "+ file_name +" localhost:30",
    stdout=subprocess.PIPE,
    shell=True)
</snippet></ROW><ROW><id>2061557</id><snippet>start = 0
count = 0
for match in iter(lambda: find(target, key, start), -1):
  count += 1
  start = match + 1
return count
</snippet></ROW><ROW><id>2061557</id><snippet>def findall(target, key, start=0):
  for match in iter(lambda: find(target, key, start), -1):
    yield match
    start = match + 1
</snippet></ROW><ROW><id>2061557</id><snippet>count = sum(1 for m in findall(target, key))
</snippet></ROW><ROW><id>2061711</id><snippet>sudo port install py26-pyobjc2
</snippet></ROW><ROW><id>2061861</id><snippet>from BeautifulSoup import BeautifulSoup

ht = '''
&lt;div id="abc"&gt;
    some long text goes &lt;a href="/"&gt; here &lt;/a&gt; and hopefully it 
    will get picked up by the parser as content
&lt;/div&gt;
'''
soup = BeautifulSoup(ht)

anchors = soup.findAll('a')
for a in anchors:
  a.previousSibling.replaceWith(a.previousSibling + a.string)

results = soup.findAll(text=lambda(x): len(x) &gt; 20)

print results
</snippet></ROW><ROW><id>2061861</id><snippet>$ python bs.py
[u'\n    some long text goes  here ', u' and hopefully it \n    will get picked up by the parser as content\n']
</snippet></ROW><ROW><id>2061861</id><snippet>a.string</snippet></ROW><ROW><id>2061861</id><snippet>a.previousSibling</snippet></ROW><ROW><id>2061861</id><snippet>None</snippet></ROW><ROW><id>2061861</id><snippet>if</snippet></ROW><ROW><id>2061861</id><snippet>len(x) &gt; 20</snippet></ROW><ROW><id>2061861</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>2061861</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>2061861</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>2061861</id><snippet>&lt;strong&gt;</snippet></ROW><ROW><id>2061861</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>2061861</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>2062341</id><snippet>"O((N/B)^(1-1/d)+T/B) I/Os, where N is the number of d-dimensional (hyper-)
rectangles stored in the R-tree, B is the disk block size, and T is the output
size."
</snippet></ROW><ROW><id>2062399</id><snippet>m = [row for row in l if 'a' in row[0]]
</snippet></ROW><ROW><id>2062399</id><snippet>in</snippet></ROW><ROW><id>2062399</id><snippet>m = [row for row in l if 'a' == row[0]]
</snippet></ROW><ROW><id>2062665</id><snippet>pylint/epylint.py</snippet></ROW><ROW><id>2062665</id><snippet>from pylint.lint import Run
Run(['--errors-only', 'myfile.py']) 
</snippet></ROW><ROW><id>2062746</id><snippet>w.element("Node", None, {'class': 'oops'})
</snippet></ROW><ROW><id>2062746</id><snippet>w.element("Node", attrib={'class': 'oops'})
</snippet></ROW><ROW><id>2063102</id><snippet>io.wavfile</snippet></ROW><ROW><id>2063102</id><snippet>from scipy.io import wavfile</snippet></ROW><ROW><id>2063102</id><snippet>wavfile.read("/usr/share/sounds/purple/receive.wav")</snippet></ROW><ROW><id>2063758</id><snippet>from suds.client import Client

client = Client("http://example.com/foo.wsdl")
client.service.someMethod(someParameter)
</snippet></ROW><ROW><id>2063758</id><snippet>someMethod</snippet></ROW><ROW><id>2063780</id><snippet>QTextEdit</snippet></ROW><ROW><id>2063780</id><snippet>toPlainText()</snippet></ROW><ROW><id>2063780</id><snippet>print "show input: %s" % self.textEditInput.toPlainText()
</snippet></ROW><ROW><id>2063780</id><snippet>toHtml()</snippet></ROW><ROW><id>2063780</id><snippet>QTextDocument</snippet></ROW><ROW><id>2063780</id><snippet>QTextEdit.document()</snippet></ROW><ROW><id>2063795</id><snippet>import win32com.client
objShell = win32com.client.Dispatch("WScript.Shell")
allUserDocs = objShell.SpecialFolders("AllUsersDesktop")
print allUserDocs
</snippet></ROW><ROW><id>2063904</id><snippet>class PhotoQuerySet(QuerySet):
    def delete(self):
        for x in self:
            x.delete()

class PhotoManager(models.Manager):
    def get_query_set(self):
        return PhotoQuerySet(self.model)

class Photo(models.Model):
    name = models.CharField(max_length=256, unique=True)
    slug = models.SlugField(unique=True)
    image = models.ImageField(upload_to='photos/')

    objects = PhotoManager()

    def delete(self):
        os.remove(self.get_thumbnail_name())
        os.remove(self.get_medium_name())
        super(Photo, self).delete()
</snippet></ROW><ROW><id>2064212</id><snippet>_classname__spam</snippet></ROW><ROW><id>2064212</id><snippet>class Test:
    def __private_symbol(self):
        pass
    def normal_symbol(self):
        pass

print dir(Test)
</snippet></ROW><ROW><id>2064212</id><snippet>['_Test__private_symbol', 
'__doc__', 
'__module__', 
'normal_symbol']
</snippet></ROW><ROW><id>2064212</id><snippet>__private_symbol</snippet></ROW><ROW><id>2064212</id><snippet>_Test__private_symbol</snippet></ROW><ROW><id>2064238</id><snippet>lines = open('textfile.txt').readlines()
open('newfile.txt', 'w').writelines(lines[3:-1])
</snippet></ROW><ROW><id>2064318</id><snippet>set smartindent</snippet></ROW><ROW><id>2064318</id><snippet>:h smartindent</snippet></ROW><ROW><id>2064318</id><snippet>When typing '#' as the first character in a new line, the indent for
that line is removed, the '#' is put in the first column.  The indent
is restored for the next line.  If you don't want this, use this
mapping: ":inoremap # X^H#", where ^H is entered with CTRL-V CTRL-H.
When using the "&gt;&gt;" command, lines starting with '#' are not shifted
right.
</snippet></ROW><ROW><id>2064318</id><snippet>au! FileType python setl nosmartindent
</snippet></ROW><ROW><id>2064358</id><snippet>is-even</snippet></ROW><ROW><id>2064358</id><snippet>my_var = is-even(another_var)
</snippet></ROW><ROW><id>2064358</id><snippet>is-even(another_var)</snippet></ROW><ROW><id>2064358</id><snippet>is-even</snippet></ROW><ROW><id>2064358</id><snippet>even</snippet></ROW><ROW><id>2064358</id><snippet>is</snippet></ROW><ROW><id>2064358</id><snippet>(is-even 4)
</snippet></ROW><ROW><id>2064358</id><snippet>(- is (even 4))
</snippet></ROW><ROW><id>2064373</id><snippet>tp_as_sequence</snippet></ROW><ROW><id>2064373</id><snippet>#include &lt;Python.h&gt;

/**
 * C structure and methods definitions
 */

typedef struct {
    PyObject_HEAD;
} TestObject;

static Py_ssize_t
TestClass_len(TestObject* self) 
{   
    return 55;
}

/**
 * Python definitions
 */

static PySequenceMethods TestClass_sequence_methods = {
    TestClass_len,                  /* sq_length */
};

static PyTypeObject TestClass = {
    PyObject_HEAD_INIT(NULL)    
    0,                              /*ob_size*/
    "testmodule.TestClass",         /*tp_name*/
    sizeof(TestObject),             /*tp_basicsize*/
};

/**
 * Module entry point
 */
#ifndef PyMODINIT_FUNC  /* declarations for DLL import/export */
#define PyMODINIT_FUNC void
#endif
PyMODINIT_FUNC
inittestmodule(void) 
{
    PyObject* m;

    TestClass.tp_new = PyType_GenericNew;
    TestClass.tp_as_sequence = &amp;TestClass_sequence_methods;
    TestClass.tp_flags = Py_TPFLAGS_DEFAULT;

    if (PyType_Ready(&amp;TestClass) &lt; 0)
        return;

    m = Py_InitModule3("testmodule", NULL, "");

    Py_INCREF(&amp;TestClass);
    PyModule_AddObject(m, "TestClass", (PyObject *)&amp;TestClass);
}
</snippet></ROW><ROW><id>2064373</id><snippet>__len__</snippet></ROW><ROW><id>2064373</id><snippet>PyCFunction_New</snippet></ROW><ROW><id>2064373</id><snippet>PyMethod_New</snippet></ROW><ROW><id>2064373</id><snippet>PyObject_SetAttr</snippet></ROW><ROW><id>2064373</id><snippet>__len__</snippet></ROW><ROW><id>2064414</id><snippet>&gt;&gt;&gt; a = set([1, 2, 3])
&gt;&gt;&gt; b = set([1, 2, 3, 4, 5, 6])
&gt;&gt;&gt; a.issubset(b)
True
</snippet></ROW><ROW><id>2064414</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; all(map(lambda x: x in b, a))
True
&gt;&gt;&gt; a = [1, 2, 3, 9]
&gt;&gt;&gt; all(map(lambda x: x in b, a))
False
</snippet></ROW><ROW><id>2064414</id><snippet>&gt;&gt;&gt; a = [1, 1, 2, 3]
&gt;&gt;&gt; all(map(lambda x: a.count(x) &lt;= b.count(x), a))
False
</snippet></ROW><ROW><id>2064888</id><snippet>code.InteractiveInterpreter</snippet></ROW><ROW><id>2064888</id><snippet>import code

exprs = [
    'd = {}',
    'd',
    'd["x"] = 1',
    'd',
   ]

for e in exprs:
    print '&gt;&gt;&gt; %s' % e
    cmd = code.compile_command(e)
    r = eval(cmd)
    if r:
        print repr(r)
</snippet></ROW><ROW><id>2064888</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d
{}
&gt;&gt;&gt; d["x"] = 1
&gt;&gt;&gt; d
{'x': 1}
</snippet></ROW><ROW><id>2064984</id><snippet>Updater</snippet></ROW><ROW><id>2064984</id><snippet>screen</snippet></ROW><ROW><id>2064984</id><snippet>process</snippet></ROW><ROW><id>2064984</id><snippet>multiprocessing.current_process()</snippet></ROW><ROW><id>2064984</id><snippet>updater.start()</snippet></ROW><ROW><id>2064984</id><snippet>fork()</snippet></ROW><ROW><id>2064984</id><snippet>process</snippet></ROW><ROW><id>2065094</id><snippet>location</snippet></ROW><ROW><id>2065094</id><snippet>args = ['wget', '-r', '-l', '1', '-p', '-P', location, url]
</snippet></ROW><ROW><id>2065179</id><snippet>class MyClass:
    def __init__(self, impl)
        self.impl = impl
    def run(self,var):
        print "prepare"
        impl.runImpl(var)
        print "I'm done"

class AnImplementation:
    def runImpl(self,var):
</snippet></ROW><ROW><id>2065344</id><snippet>DTLSv1_METHOD</snippet></ROW><ROW><id>2065344</id><snippet>SSLv23_METHOD</snippet></ROW><ROW><id>2065344</id><snippet>TLSv1_METHOD</snippet></ROW><ROW><id>2065968</id><snippet>frame = wx.Frame(self, title="something", size=(480, 320), style=wx.CAPTION)
</snippet></ROW><ROW><id>2065968</id><snippet>frame = wx.Frame(self, title="something", size=(480, 320), style=wx.CAPTION | wx.CLOSE_BOX)
</snippet></ROW><ROW><id>2066214</id><snippet>failUnlessRaises</snippet></ROW><ROW><id>2066214</id><snippet>obj = Class()
def setNameTest():
    obj.name = "Name"        
self.failUnlessRaises(NameError, setNameTest)
</snippet></ROW><ROW><id>2066214</id><snippet>setattr</snippet></ROW><ROW><id>2066214</id><snippet>self.failUnlessRaises(NameError, setattr, obj, "name", "Name")
</snippet></ROW><ROW><id>2066227</id><snippet>file_content[:10] + [var1] + rss_xml[11:]
</snippet></ROW><ROW><id>2066290</id><snippet>if info['user'] == username:
  locations = (json.loads(info['locations']) +
    [{'place': '', 'description': ''}] * 5)[:5]

  return {'date': info['date'], 'locations': locations}
</snippet></ROW><ROW><id>2066360</id><snippet>RSS: resident set size, the non-swapped physical memory
     that a task has used (in kiloBytes).

VSZ: virtual memory usage of entire process.
     vm_lib + vm_exe + vm_data + vm_stack
</snippet></ROW><ROW><id>2066360</id><snippet># ps -eo pid,vsz,rss,sz,size,cmd|egrep python

PID    VSZ   RSS   SZ    SZ    CMD
23801  4920  2896  1230  1100  python
</snippet></ROW><ROW><id>2066544</id><snippet>xtest_testname</snippet></ROW><ROW><id>2066544</id><snippet>test_testname</snippet></ROW><ROW><id>2066544</id><snippet>  (defun disable_enable_test ()
  (interactive "")
  (save-excursion
    (beginning-of-line)
    (search-forward "def")
    (forward-char)
    (if (looking-at "disable_")
    (zap-to-char 1 ?_)
      (insert "disable_"))))
</snippet></ROW><ROW><id>2066604</id><snippet>def section1( ... ):

def section2( ... ):

def overall( ... ):
    section1()
    section2()
</snippet></ROW><ROW><id>2066604</id><snippet>with</snippet></ROW><ROW><id>2066646</id><snippet>mysettings.py</snippet></ROW><ROW><id>2066646</id><snippet>sitename = "My site"
footer = "This page owned by X"
</snippet></ROW><ROW><id>2066646</id><snippet>import mysettings
print mysettings.sitename
</snippet></ROW><ROW><id>2066646</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>2066646</id><snippet>from google.appengine.api import memcache
class MySettings(db.Model):
   # properties...

def Settings():
    key = "mysettings"
    obj = memcache.get(key)
    if obj is None:
       obj = MySettings.all().get()  # assume there is only one
       if obj:
            memcache.add(key, zone, 360)
       else:
            logging.error("no MySettings found, create one!")
    return obj
</snippet></ROW><ROW><id>2067071</id><snippet>zip(some_values, other_values)</snippet></ROW><ROW><id>2067071</id><snippet>from itertools import izip
some_values = ['a', 'b', 'c', 'd', 'e', 'f']
other_values = [4, 8, 15, 16, 23, 42]
context['zipped_values'] = izip(some_values, other_values)

{% for some, other in zipped_values %}
    {{ some }}: {{ other }}  &lt;br/&gt;
{% endfor %}
</snippet></ROW><ROW><id>2067231</id><snippet>last_login</snippet></ROW><ROW><id>2067231</id><snippet>auth_user</snippet></ROW><ROW><id>2067283</id><snippet>Content.objects.filter(score__real_score=1)</snippet></ROW><ROW><id>2067575</id><snippet>pFunc = PyObject_GetAttrString(pModule, argv[2]);
/* pFunc is a new reference */

if (pFunc &amp;&amp; PyCallable_Check(pFunc)) {
    ...
}
Py_XDECREF(pFunc);
</snippet></ROW><ROW><id>2067732</id><snippet>alloca</snippet></ROW><ROW><id>2067868</id><snippet>label.set_text("foo")
</snippet></ROW><ROW><id>2067868</id><snippet>glib.idle_add(label.set_text, "foo")
</snippet></ROW><ROW><id>2067868</id><snippet>def idle():
    label1.set_text("foo")
    label2.set_text("bar")
glib.idle_add(idle)
</snippet></ROW><ROW><id>2067868</id><snippet>idle_add</snippet></ROW><ROW><id>2067868</id><snippet>True</snippet></ROW><ROW><id>2067868</id><snippet>gtk.gdk.threads_init()</snippet></ROW><ROW><id>2067965</id><snippet>table=soup.find('table', 'bioTableAlt')
for row in table.findAll('tr')[1:]:
    cells = row.findAll('td')
    #retreieve data from cells...
</snippet></ROW><ROW><id>2067965</id><snippet>    rank = cells[0].string
    player = cells[1].a.string
    link = cells[1].a['href']
</snippet></ROW><ROW><id>2068064</id><snippet>item</snippet></ROW><ROW><id>2068064</id><snippet>price</snippet></ROW><ROW><id>2068064</id><snippet>class Item(object):
    def __init__(self,name,price):
        self.name=name
        self.price=price
</snippet></ROW><ROW><id>2068064</id><snippet>id</snippet></ROW><ROW><id>2068064</id><snippet>name</snippet></ROW><ROW><id>2068064</id><snippet>class Person(object):
    def __init__(self,id,name,*items):
        self.id=id
        self.name=name
        self.items=set(items)
</snippet></ROW><ROW><id>2068064</id><snippet>list_dicts</snippet></ROW><ROW><id>2068064</id><snippet>list_people = [
    Person('001','jim',Item('pencil',0.99)),
    Person('002','mary',Item('book',15.49)),
    Person('002','mary',Item('tape',7.99)),
    Person('003','john',Item('pen',3.49)),
    Person('003','john',Item('stapler',9.49)),
    Person('003','john',Item('scissors',12.99)), 
]
</snippet></ROW><ROW><id>2068064</id><snippet>id</snippet></ROW><ROW><id>2068064</id><snippet>reduce</snippet></ROW><ROW><id>2068064</id><snippet>take_items</snippet></ROW><ROW><id>2068064</id><snippet>def take_items(person,other):
    '''
    person takes other's items.
    Note however, that although person may be altered, other remains the same --
    other does not lose its items.    
    '''
    person.items.update(other.items)
    return person
</snippet></ROW><ROW><id>2068064</id><snippet>import itertools
import operator

class Item(object):
    def __init__(self,name,price):
        self.name=name
        self.price=price
    def __str__(self):
        return '{0} {1}'.format(self.name,self.price)

class Person(object):
    def __init__(self,id,name,*items):
        self.id=id
        self.name=name
        self.items=set(items)
    def __str__(self):
        return '{0} {1}: {2}'.format(self.id,self.name,map(str,self.items))

list_people = [
    Person('001','jim',Item('pencil',0.99)),
    Person('002','mary',Item('book',15.49)),
    Person('002','mary',Item('tape',7.99)),
    Person('003','john',Item('pen',3.49)),
    Person('003','john',Item('stapler',9.49)),
    Person('003','john',Item('scissors',12.99)), 
]

def take_items(person,other):
    '''
    person takes other's items.
    Note however, that although person may be altered, other remains the same --
    other does not lose its items.    
    '''
    person.items.update(other.items)
    return person

list_people2 = [reduce(take_items,g)
                for k,g in itertools.groupby(list_people, lambda person: person.id)]
for person in list_people2:
    print(person)
</snippet></ROW><ROW><id>2068329</id><snippet>$ echo 'hello world' | tr 'l' 'L'
heLLo worLd
</snippet></ROW><ROW><id>2068329</id><snippet>&gt;&gt;&gt; cmd = ['/usr/bin/tr']
&gt;&gt;&gt; p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)
&gt;&gt;&gt; out,err = p.communicate('hello world')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.5/subprocess.py", line 668, in communicate
    return self._communicate(input)
  File "/usr/lib/python2.5/subprocess.py", line 1218, in _communicate
    bytes_written = self._write_no_intr(self.stdin.fileno(), buffer(input, input_offset, 512))
  File "/usr/lib/python2.5/subprocess.py", line 997, in _write_no_intr
    return os.write(fd, s)
OSError: [Errno 32] Broken pipe
</snippet></ROW><ROW><id>2068329</id><snippet>&gt;&gt;&gt; p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
&gt;&gt;&gt; /usr/bin/tr: missing operand
Try `/usr/bin/tr --help' for more information.
</snippet></ROW><ROW><id>2068329</id><snippet>&gt;&gt;&gt; cmd = ['/usr/bin/tr', 'l', 'L']
&gt;&gt;&gt; p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
&gt;&gt;&gt; out,err = p.communicate('hello world')&gt;&gt;&gt; print out
heLLo worLd
&gt;&gt;&gt; print err
None
</snippet></ROW><ROW><id>2068377</id><snippet>get</snippet></ROW><ROW><id>2068377</id><snippet>characters</snippet></ROW><ROW><id>2068377</id><snippet>KeyError</snippet></ROW><ROW><id>2068377</id><snippet>.get</snippet></ROW><ROW><id>2068377</id><snippet>None</snippet></ROW><ROW><id>2068377</id><snippet>myget(d, k, v)</snippet></ROW><ROW><id>2068377</id><snippet>d.get(k, v)</snippet></ROW><ROW><id>2068377</id><snippet>def myget(d, k, v=None):
  try: return d[k]
  except KeyError: return v
</snippet></ROW><ROW><id>2068377</id><snippet>get</snippet></ROW><ROW><id>2068377</id><snippet>get</snippet></ROW><ROW><id>2068377</id><snippet>1</snippet></ROW><ROW><id>2068548</id><snippet>timeit</snippet></ROW><ROW><id>2068548</id><snippet>+---------------------+-------+
| Method              | ms    |
+---------------------+-------+
| rwh_primes1         | 43.0  |
| sieveOfAtkin        | 46.4  |
| rwh_primes          | 57.4  |
| sieve_wheel_30      | 63.0  |
| rwh_primes2         | 67.8  |    
| sieveOfEratosthenes | 147.0 |
| ambi_sieve_plain    | 152.0 |
| sundaram3           | 194.0 |
+---------------------+-------+
</snippet></ROW><ROW><id>2068548</id><snippet>+---------------------+-------+
| Method              | ms    |
+---------------------+-------+
| rwh_primes2         | 68.1  |
| rwh_primes1         | 93.7  |
| rwh_primes          | 94.6  |
| sieve_wheel_30      | 97.4  |
| sieveOfEratosthenes | 178.0 |
| ambi_sieve_plain    | 286.0 |
| sieveOfAtkin        | 314.0 |
| sundaram3           | 416.0 |
+---------------------+-------+
</snippet></ROW><ROW><id>2068548</id><snippet>+---------------------+-------+
| Method              | ms    |
+---------------------+-------+
| primesfrom2to       | 15.9  |
| primesfrom3to       | 18.4  |
| ambi_sieve          | 29.3  |
+---------------------+-------+
</snippet></ROW><ROW><id>2068548</id><snippet>python -mtimeit -s"import primes" "primes.{method}(10000000)"
</snippet></ROW><ROW><id>2068548</id><snippet>{method}</snippet></ROW><ROW><id>2068548</id><snippet>#!/usr/bin/env python
import psyco; psyco.full()
from math import sqrt, ceil
import numpy as np

def rwh_primes(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """ Returns  a list of primes &lt; n """
    sieve = [True] * n
    for i in xrange(3,int(n**0.5)+1,2):
        if sieve[i]:
            sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)
    return [2] + [i for i in xrange(3,n,2) if sieve[i]]

def rwh_primes1(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """ Returns  a list of primes &lt; n """
    sieve = [True] * (n/2)
    for i in xrange(3,int(n**0.5)+1,2):
        if sieve[i/2]:
            sieve[i*i/2::i] = [False] * ((n-i*i-1)/(2*i)+1)
    return [2] + [2*i+1 for i in xrange(1,n/2) if sieve[i]]

def rwh_primes2(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """ Input n&gt;=6, Returns a list of primes, 2 &lt;= p &lt; n """
    correction = (n%6&gt;1)
    n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]
    sieve = [True] * (n/3)
    sieve[0] = False
    for i in xrange(int(n**0.5)/3+1):
      if sieve[i]:
        k=3*i+1|1
        sieve[      ((k*k)/3)      ::2*k]=[False]*((n/6-(k*k)/6-1)/k+1)
        sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k]=[False]*((n/6-(k*k+4*k-2*k*(i&amp;1))/6-1)/k+1)
    return [2,3] + [3*i+1|1 for i in xrange(1,n/3-correction) if sieve[i]]

def sieve_wheel_30(N):
    # http://zerovolt.com/?p=88
    ''' Returns a list of primes &lt;= N using wheel criterion 2*3*5 = 30

Copyright 2009 by zerovolt.com
This code is free for non-commercial purposes, in which case you can just leave this comment as a credit for my work.
If you need this code for commercial purposes, please contact me by sending an email to: info [at] zerovolt [dot] com.'''
    __smallp = ( 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,
    61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,
    149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,
    229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,
    313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,
    409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,
    499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,
    601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,
    691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,
    809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,
    907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)

    wheel = (2, 3, 5)
    const = 30
    if N &lt; 2:
        return []
    if N &lt;= const:
        pos = 0
        while __smallp[pos] &lt;= N:
            pos += 1
        return list(__smallp[:pos])
    # make the offsets list
    offsets = (7, 11, 13, 17, 19, 23, 29, 1)
    # prepare the list
    p = [2, 3, 5]
    dim = 2 + N // const
    tk1  = [True] * dim
    tk7  = [True] * dim
    tk11 = [True] * dim
    tk13 = [True] * dim
    tk17 = [True] * dim
    tk19 = [True] * dim
    tk23 = [True] * dim
    tk29 = [True] * dim
    tk1[0] = False
    # help dictionary d
    # d[a , b] = c  ==&gt; if I want to find the smallest useful multiple of (30*pos)+a
    # on tkc, then I need the index given by the product of [(30*pos)+a][(30*pos)+b]
    # in general. If b &lt; a, I need [(30*pos)+a][(30*(pos+1))+b]
    d = {}
    for x in offsets:
        for y in offsets:
            res = (x*y) % const
            if res in offsets:
                d[(x, res)] = y
    # another help dictionary: gives tkx calling tmptk[x]
    tmptk = {1:tk1, 7:tk7, 11:tk11, 13:tk13, 17:tk17, 19:tk19, 23:tk23, 29:tk29}
    pos, prime, lastadded, stop = 0, 0, 0, int(ceil(sqrt(N)))
    # inner functions definition
    def del_mult(tk, start, step):
        for k in xrange(start, len(tk), step):
            tk[k] = False
    # end of inner functions definition
    cpos = const * pos
    while prime &lt; stop:
        # 30k + 7
        if tk7[pos]:
            prime = cpos + 7
            p.append(prime)
            lastadded = 7
            for off in offsets:
                tmp = d[(7, off)]
                start = (pos + prime) if off == 7 else (prime * (const * (pos + 1 if tmp &lt; 7 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 11
        if tk11[pos]:
            prime = cpos + 11
            p.append(prime)
            lastadded = 11
            for off in offsets:
                tmp = d[(11, off)]
                start = (pos + prime) if off == 11 else (prime * (const * (pos + 1 if tmp &lt; 11 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 13
        if tk13[pos]:
            prime = cpos + 13
            p.append(prime)
            lastadded = 13
            for off in offsets:
                tmp = d[(13, off)]
                start = (pos + prime) if off == 13 else (prime * (const * (pos + 1 if tmp &lt; 13 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 17
        if tk17[pos]:
            prime = cpos + 17
            p.append(prime)
            lastadded = 17
            for off in offsets:
                tmp = d[(17, off)]
                start = (pos + prime) if off == 17 else (prime * (const * (pos + 1 if tmp &lt; 17 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 19
        if tk19[pos]:
            prime = cpos + 19
            p.append(prime)
            lastadded = 19
            for off in offsets:
                tmp = d[(19, off)]
                start = (pos + prime) if off == 19 else (prime * (const * (pos + 1 if tmp &lt; 19 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 23
        if tk23[pos]:
            prime = cpos + 23
            p.append(prime)
            lastadded = 23
            for off in offsets:
                tmp = d[(23, off)]
                start = (pos + prime) if off == 23 else (prime * (const * (pos + 1 if tmp &lt; 23 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 29
        if tk29[pos]:
            prime = cpos + 29
            p.append(prime)
            lastadded = 29
            for off in offsets:
                tmp = d[(29, off)]
                start = (pos + prime) if off == 29 else (prime * (const * (pos + 1 if tmp &lt; 29 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # now we go back to top tk1, so we need to increase pos by 1
        pos += 1
        cpos = const * pos
        # 30k + 1
        if tk1[pos]:
            prime = cpos + 1
            p.append(prime)
            lastadded = 1
            for off in offsets:
                tmp = d[(1, off)]
                start = (pos + prime) if off == 1 else (prime * (const * pos + tmp) )//const
                del_mult(tmptk[off], start, prime)
    # time to add remaining primes
    # if lastadded == 1, remove last element and start adding them from tk1
    # this way we don't need an "if" within the last while
    if lastadded == 1:
        p.pop()
    # now complete for every other possible prime
    while pos &lt; len(tk1):
        cpos = const * pos
        if tk1[pos]: p.append(cpos + 1)
        if tk7[pos]: p.append(cpos + 7)
        if tk11[pos]: p.append(cpos + 11)
        if tk13[pos]: p.append(cpos + 13)
        if tk17[pos]: p.append(cpos + 17)
        if tk19[pos]: p.append(cpos + 19)
        if tk23[pos]: p.append(cpos + 23)
        if tk29[pos]: p.append(cpos + 29)
        pos += 1
    # remove exceeding if present
    pos = len(p) - 1
    while p[pos] &gt; N:
        pos -= 1
    if pos &lt; len(p) - 1:
        del p[pos+1:]
    # return p list
    return p

def sieveOfEratosthenes(n):
    """sieveOfEratosthenes(n): return the list of the primes &lt; n."""
    # Code from: &lt;dickinsm@gmail.com&gt;, Nov 30 2006
    # http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d
    if n &lt;= 2:
        return []
    sieve = range(3, n, 2)
    top = len(sieve)
    for si in sieve:
        if si:
            bottom = (si*si - 3) // 2
            if bottom &gt;= top:
                break
            sieve[bottom::si] = [0] * -((bottom - top) // si)
    return [2] + [el for el in sieve if el]

def sieveOfAtkin(end):
    """sieveOfAtkin(end): return a list of all the prime numbers &lt;end
    using the Sieve of Atkin."""
    # Code by Steve Krenzel, &lt;Sgk284@gmail.com&gt;, improved
    # Code: http://krenzel.info/?p=83
    # Info: http://en.wikipedia.org/wiki/Sieve_of_Atkin
    assert end &gt; 0
    lng = ((end-1) // 2)
    sieve = [False] * (lng + 1)

    x_max, x2, xd = int(sqrt((end-1)/4.0)), 0, 4
    for xd in xrange(4, 8*x_max + 2, 8):
        x2 += xd
        y_max = int(sqrt(end-x2))
        n, n_diff = x2 + y_max*y_max, (y_max &lt;&lt; 1) - 1
        if not (n &amp; 1):
            n -= n_diff
            n_diff -= 2
        for d in xrange((n_diff - 1) &lt;&lt; 1, -1, -8):
            m = n % 12
            if m == 1 or m == 5:
                m = n &gt;&gt; 1
                sieve[m] = not sieve[m]
            n -= d

    x_max, x2, xd = int(sqrt((end-1) / 3.0)), 0, 3
    for xd in xrange(3, 6 * x_max + 2, 6):
        x2 += xd
        y_max = int(sqrt(end-x2))
        n, n_diff = x2 + y_max*y_max, (y_max &lt;&lt; 1) - 1
        if not(n &amp; 1):
            n -= n_diff
            n_diff -= 2
        for d in xrange((n_diff - 1) &lt;&lt; 1, -1, -8):
            if n % 12 == 7:
                m = n &gt;&gt; 1
                sieve[m] = not sieve[m]
            n -= d

    x_max, y_min, x2, xd = int((2 + sqrt(4-8*(1-end)))/4), -1, 0, 3
    for x in xrange(1, x_max + 1):
        x2 += xd
        xd += 6
        if x2 &gt;= end: y_min = (((int(ceil(sqrt(x2 - end))) - 1) &lt;&lt; 1) - 2) &lt;&lt; 1
        n, n_diff = ((x*x + x) &lt;&lt; 1) - 1, (((x-1) &lt;&lt; 1) - 2) &lt;&lt; 1
        for d in xrange(n_diff, y_min, -8):
            if n % 12 == 11:
                m = n &gt;&gt; 1
                sieve[m] = not sieve[m]
            n += d

    primes = [2, 3]
    if end &lt;= 3:
        return primes[:max(0,end-2)]

    for n in xrange(5 &gt;&gt; 1, (int(sqrt(end))+1) &gt;&gt; 1):
        if sieve[n]:
            primes.append((n &lt;&lt; 1) + 1)
            aux = (n &lt;&lt; 1) + 1
            aux *= aux
            for k in xrange(aux, end, 2 * aux):
                sieve[k &gt;&gt; 1] = False

    s  = int(sqrt(end)) + 1
    if s  % 2 == 0:
        s += 1
    primes.extend([i for i in xrange(s, end, 2) if sieve[i &gt;&gt; 1]])

    return primes

def ambi_sieve_plain(n):
    s = range(3, n, 2)
    for m in xrange(3, int(n**0.5)+1, 2): 
        if s[(m-3)/2]: 
            for t in xrange((m*m-3)/2,(n&gt;&gt;1)-1,m):
                s[t]=0
    return [2]+[t for t in s if t&gt;0]

def sundaram3(max_n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279
    numbers = range(3, max_n+1, 2)
    half = (max_n)//2
    initial = 4

    for step in xrange(3, max_n+1, 2):
        for i in xrange(initial, half, step):
            numbers[i-1] = 0
        initial += 2*(step+1)

        if initial &gt; half:
            return [2] + filter(None, numbers)

################################################################################
# Using Numpy:
def ambi_sieve(n):
    # http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html
    s = np.arange(3, n, 2)
    for m in xrange(3, int(n ** 0.5)+1, 2): 
        if s[(m-3)/2]: 
            s[(m*m-3)/2::m]=0
    return np.r_[2, s[s&gt;0]]

def primesfrom3to(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """ Returns a array of primes, p &lt; n """
    assert n&gt;=2
    sieve = np.ones(n/2, dtype=np.bool)
    for i in xrange(3,int(n**0.5)+1,2):
        if sieve[i/2]:
            sieve[i*i/2::i] = False
    return np.r_[2, 2*np.nonzero(sieve)[0][1::]+1]    

def primesfrom2to(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """ Input n&gt;=6, Returns a array of primes, 2 &lt;= p &lt; n """
    sieve = np.ones(n/3 + (n%6==2), dtype=np.bool)
    sieve[0] = False
    for i in xrange(int(n**0.5)/3+1):
        if sieve[i]:
            k=3*i+1|1
            sieve[      ((k*k)/3)      ::2*k] = False
            sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k] = False
    return np.r_[2,3,((3*np.nonzero(sieve)[0]+1)|1)]

if __name__=='__main__':
    import itertools
    import sys

    def test(f1,f2,num):
        print('Testing {f1} and {f2} return same results'.format(
            f1=f1.func_name,
            f2=f2.func_name))
        if not all([a==b for a,b in itertools.izip_longest(f1(num),f2(num))]):
            sys.exit("Error: %s(%s) != %s(%s)"%(f1.func_name,num,f2.func_name,num))

    n=1000000
    test(sieveOfAtkin,sieveOfEratosthenes,n)
    test(sieveOfAtkin,ambi_sieve,n)
    test(sieveOfAtkin,ambi_sieve_plain,n) 
    test(sieveOfAtkin,sundaram3,n)
    test(sieveOfAtkin,sieve_wheel_30,n)
    test(sieveOfAtkin,primesfrom3to,n)
    test(sieveOfAtkin,primesfrom2to,n)
    test(sieveOfAtkin,rwh_primes,n)
    test(sieveOfAtkin,rwh_primes1,n)         
    test(sieveOfAtkin,rwh_primes2,n)
</snippet></ROW><ROW><id>2068858</id><snippet>from suds.client import Client
client=Client('http://eample.wsdl')
res = client.service.AbsoluteMove(profile_token, destination, speed)
print res
</snippet></ROW><ROW><id>2069292</id><snippet>select</snippet></ROW><ROW><id>2069670</id><snippet>if</snippet></ROW><ROW><id>2069670</id><snippet>break</snippet></ROW><ROW><id>2069670</id><snippet>break</snippet></ROW><ROW><id>2069670</id><snippet>return</snippet></ROW><ROW><id>2069980</id><snippet>import SocketServer
import threading


class MyUDPHandler(SocketServer.BaseRequestHandler):
    def handle(self):
        data = self.request[0].strip()
        socket = self.request[1]
        print "%s wrote:" % self.client_address[0]
        print data
        socket.sendto(data.upper(), self.client_address)


def serve_thread(host, port):
    server = SocketServer.UDPServer((host, port), MyUDPHandler)
    server.serve_forever()


threading.Thread(target=serve_thread,args=('localhost', 9999)).start()
threading.Thread(target=serve_thread,args=('localhost', 12345)).start()
</snippet></ROW><ROW><id>2069980</id><snippet>import socket
import sys

HOST, PORT = "localhost", 12345
data = 'da bomb'

# SOCK_DGRAM is the socket type to use for UDP sockets
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# As you can see, there is no connect() call; UDP has no connections.
# Instead, data is directly sent to the recipient via sendto().
sock.sendto(data + "\n", (HOST, PORT))
received = sock.recv(1024)

print "Sent:     %s" % data
print "Received: %s" % received
</snippet></ROW><ROW><id>2069980</id><snippet>SocketServer</snippet></ROW><ROW><id>2070320</id><snippet>Objects/unicodeobject.c</snippet></ROW><ROW><id>2070320</id><snippet>unicode_hash</snippet></ROW><ROW><id>2070320</id><snippet>tp_hash</snippet></ROW><ROW><id>2070320</id><snippet>Objects/stringobject.c</snippet></ROW><ROW><id>2070320</id><snippet>string_hash</snippet></ROW><ROW><id>2070320</id><snippet>static long string_hash(PyStringObject *a)
{
    register Py_ssize_t len;
    register unsigned char *p;
    register long x;

    if (a-&gt;ob_shash != -1)
        return a-&gt;ob_shash;
    len = Py_SIZE(a);
    p = (unsigned char *) a-&gt;ob_sval;
    x = *p &lt;&lt; 7;
    while (--len &gt;= 0)
        x = (1000003*x) ^ *p++;
    x ^= Py_SIZE(a);
    if (x == -1)
        x = -2;
    a-&gt;ob_shash = x;
    return x;
}
</snippet></ROW><ROW><id>2070448</id><snippet>class Base
{
    public static T Get&lt;T&gt;(int id)
        where T : Base, new()
    {
        return new T() { ID = id };
    }

    public int ID { get; set; }
}
</snippet></ROW><ROW><id>2070448</id><snippet>var p = Base.Get&lt;Puppy&gt;(10)</snippet></ROW><ROW><id>2070448</id><snippet>Puppy.Get&lt;Puppy&gt;(10)</snippet></ROW><ROW><id>2070448</id><snippet>Kitty.Get&lt;Puppy&gt;</snippet></ROW><ROW><id>2070448</id><snippet>class Base&lt;T&gt; where T : Base&lt;T&gt;, new()
{
    public static T Get(int id)
    {
        return new T() { ID = id };
    }

    public int ID { get; set; }
}

class Puppy : Base&lt;Puppy&gt;
{
}

class Kitten : Base&lt;Kitten&gt;
{
}
</snippet></ROW><ROW><id>2070448</id><snippet>Puppy.Get(10)</snippet></ROW><ROW><id>2070448</id><snippet>var p = new Puppy(10)</snippet></ROW><ROW><id>2071172</id><snippet>from collections import Counter
a = Counter(0,1,2,1)
b = Counter(0,1,1)

print a - b  # ignores items in b missing in a

# check every element in a is in b
# a[key] returns 0 if key not in a, instead of raising an exception
assert all(a[key] &gt; b[key] for key in b)
</snippet></ROW><ROW><id>2071172</id><snippet>try:
   from collections import Counter
except ImportError:
    class Counter(dict):
       ...
</snippet></ROW><ROW><id>2072002</id><snippet>BaseServer.handle_request</snippet></ROW><ROW><id>2072002</id><snippet>process_request</snippet></ROW><ROW><id>2072002</id><snippet>close_request</snippet></ROW><ROW><id>2072002</id><snippet>close_request</snippet></ROW><ROW><id>2072002</id><snippet>self.request.close()</snippet></ROW><ROW><id>2072002</id><snippet>self.request</snippet></ROW><ROW><id>2072427</id><snippet>enumerate</snippet></ROW><ROW><id>2072427</id><snippet>for k,i in enumerate(mylist):
    #do something with index k
    #do something with element i
</snippet></ROW><ROW><id>2072427</id><snippet>for i, item in enumerate(mylist):
</snippet></ROW><ROW><id>2072427</id><snippet>i</snippet></ROW><ROW><id>2072427</id><snippet>j</snippet></ROW><ROW><id>2072427</id><snippet>k</snippet></ROW><ROW><id>2072427</id><snippet>book</snippet></ROW><ROW><id>2072868</id><snippet>interpolation=nearest</snippet></ROW><ROW><id>2072953</id><snippet>class Unit:
  """Very simple class to track a unit name, and an associated count."""
  def __init__(self, name, amount):
   self.name = name
   self.amount = amount

# Pre-existing lists of types and amounts.    
list1 = ["Infantry", "Tanks", "Jets"]
list2 = [ 10, 20, 30]

# Create a list of Unit objects, and initialize using
# pairs from the above lists.    
units = []
for a, b in zip(list1, list2):
  units.append(Unit(a, b))
</snippet></ROW><ROW><id>2073003</id><snippet>def players(request):
    players_in_team_one = Player.objects.filter(Team__pk = 1)
    return render_to_response('players.html', {'players': players_in_team_one})
</snippet></ROW><ROW><id>2073003</id><snippet>players.html</snippet></ROW><ROW><id>2073003</id><snippet>{% for player in players %}
       &lt;tr&gt;&lt;td&gt;{{ player.Name }}&lt;/td&gt;&lt;td&gt; {{ player.Position }}&lt;/td&gt;&lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>2073003</id><snippet>all_lowercase_names_with_underscores</snippet></ROW><ROW><id>2073145</id><snippet>self.dialog = builder.get_object("config_dialog")
</snippet></ROW><ROW><id>2073145</id><snippet>self.nameEntry = builder.get_object("name_entry")
</snippet></ROW><ROW><id>2073355</id><snippet>cdfs = defaultdict()
for id1,id2,val in d:
    prevtotal = cdfs[id1][-1][0]
    newtotal = prevtotal + val
    cdfs[id1].append( (newtotal,id2) )
</snippet></ROW><ROW><id>2073355</id><snippet>cdfs = { 701 : [ (0.2,1), (0.5,2), (1.0,3) ], 
         702 : [ (0.2,1), (0.5,2) ],
         703 : [ (0.5,3) ] }
</snippet></ROW><ROW><id>2073355</id><snippet>def func(id1):
    max = cdfs[id1][-1][0]
    rand = random.random()*max
    for upper,id2 in cdfs[id1]:
        if upper&gt;rand:
            return id2
    return None
</snippet></ROW><ROW><id>2073697</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>2073697</id><snippet>&lt;a&gt;...&lt;/a&gt;</snippet></ROW><ROW><id>2073697</id><snippet>from BeautifulSoup import BeautifulSoup, Tag

# ....

soup = BeautifulSoup(data)
for a in soup.findAll('a'):
    a.parent.insert(a.parent.index(a)+1, Tag(soup, 'br'))
</snippet></ROW><ROW><id>2073697</id><snippet>soup.findAll(tag = '&lt;/a&gt;')</snippet></ROW><ROW><id>2073697</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>2073697</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>2073697</id><snippet>for a in soup.findAll('a'):
    p = Tag(soup, 'p') #create a P element
    a.replaceWith(p)   #Put it where the A element is
    p.insert(0, a)     #put the A element inside the P (between &lt;p&gt; and &lt;/p&gt;)
</snippet></ROW><ROW><id>2073697</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>2073697</id><snippet>&lt;/p&gt;</snippet></ROW><ROW><id>2074229</id><snippet>import sys
print sys.executable
</snippet></ROW><ROW><id>2074303</id><snippet>CFLAGS="-fPIC"</snippet></ROW><ROW><id>2074303</id><snippet>--disable-shared</snippet></ROW><ROW><id>2074303</id><snippet>./configure</snippet></ROW><ROW><id>2074303</id><snippet>--enable-static</snippet></ROW><ROW><id>2074615</id><snippet>    sum += a
    print('sum', sum)
    if sum &gt;= 4000000:
        break
</snippet></ROW><ROW><id>2074615</id><snippet>    if a &gt; 4000000:
        break
    sum += a
    print('sum', sum)
</snippet></ROW><ROW><id>2074693</id><snippet>def sum_to_n(n, size, limit=None):
    """Produce all lists of `size` positive integers in decreasing order
    that add up to `n`."""
    if size == 1:
        yield [n]
        return
    if limit is None:
        limit = n
    start = (n + size - 1) // size
    stop = min(limit, n - size + 1) + 1
    for i in range(start, stop):
        for tail in sum_to_n(n - i, size - 1, i):
            yield [i] + tail
</snippet></ROW><ROW><id>2074693</id><snippet>for partition in sum_to_n(6, 3):
    print partition

[2, 2, 2]
[3, 2, 1]
[4, 1, 1]
</snippet></ROW><ROW><id>2074958</id><snippet>class Item(models.Model):
    name = models.CharField(max_length=500)
    ...
    tags = models.ManyToManyField(Category, blank=True)
</snippet></ROW><ROW><id>2074958</id><snippet>item = Item(name='test')
item.save()
tag = Category(name='foo')
item.tags.add(tag)
</snippet></ROW><ROW><id>2074958</id><snippet>item.tags.all()
</snippet></ROW><ROW><id>2075141</id><snippet>print "%.2f kg = %.2f lb = %.2f gal = %.2f l" % (var1, var2, var3, var4)
</snippet></ROW><ROW><id>2075210</id><snippet>mylist = [s.replace("\r", " ") for s in mylist]
</snippet></ROW><ROW><id>2075381</id><snippet>function log(info) {
  document.getElementById('pixel').src = '/tracker?'+info;
}
</snippet></ROW><ROW><id>2075381</id><snippet>&lt;img id='pixel' src='pixel.gif' style='display:none'/&gt;
</snippet></ROW><ROW><id>2075381</id><snippet>log('clicked_Button_BuyStuff');
</snippet></ROW><ROW><id>2075479</id><snippet>http</snippet></ROW><ROW><id>2075479</id><snippet>https</snippet></ROW><ROW><id>2075479</id><snippet>print opener.open('http://check.torproject.org/').read()
</snippet></ROW><ROW><id>2075481</id><snippet>href="..."</snippet></ROW><ROW><id>2075481</id><snippet>el[name]</snippet></ROW><ROW><id>2075481</id><snippet>a href</snippet></ROW><ROW><id>2075481</id><snippet>for link in soup.findAll('a'):
    if link['href'].startswith('/'):
        link['href']= 'http://www.foobarinc.com'+link['href']
</snippet></ROW><ROW><id>2075562</id><snippet>--enable-ipv6</snippet></ROW><ROW><id>2075562</id><snippet>socket.AF_INET6</snippet></ROW><ROW><id>2076012</id><snippet>__get__</snippet></ROW><ROW><id>2076012</id><snippet>ReferenceProperty</snippet></ROW><ROW><id>2076012</id><snippet>.key()</snippet></ROW><ROW><id>2076012</id><snippet>get_value_for_datastore</snippet></ROW><ROW><id>2076012</id><snippet>son.father.key()</snippet></ROW><ROW><id>2076012</id><snippet>Son.father.get_value_for_datastore(son)</snippet></ROW><ROW><id>2076266</id><snippet>get_value_for_datastore</snippet></ROW><ROW><id>2076266</id><snippet>Property</snippet></ROW><ROW><id>2076296</id><snippet>as_integer_ratio</snippet></ROW><ROW><id>2076356</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall('"([^"]*)"', 'SetVariables "a" "b" "c" ');
['a', 'b', 'c']
</snippet></ROW><ROW><id>2076586</id><snippet>  28  /**
  29   * Portable PHP password hashing framework.
  30   *
  31   * @package phpass
  32   * @version 0.1 / genuine
  33   * @link http://www.openwall.com/phpass/
  34   * @since 2.5
  35   */
</snippet></ROW><ROW><id>2076665</id><snippet>bakeries = Bakery.objects.annotate(hottest_cake_baked_at=Max('cake__baked_at')) 
hottest_cakes = Cake.objects.filter(baked_at__in=[b.hottest_cake_baked_at for b in bakeries])
</snippet></ROW><ROW><id>2076665</id><snippet>bakeries = Bakery.objects.annotate(hottest_cake_id=Max('cake__id')) 
hottest_cakes = Cake.objects.filter(id__in=[b.hottest_cake_id for b in bakeries])
</snippet></ROW><ROW><id>2076843</id><snippet># Given the posts, fetches all the data the template will need
# with just 2 key-only loads from the datastore.
posts = get_the_posts()

author_keys = [Post.author.get_value_for_datastore(x) for x in posts]
authors = db.get(author_keys)

city_keys = [Author.city.get_value_for_datastore(x) for x in authors]
cities = db.get(city_keys)

for post, author, city in zip(posts, authors, cities):
  post.author = author
  author.city = city
</snippet></ROW><ROW><id>2076843</id><snippet>None</snippet></ROW><ROW><id>2077321</id><snippet>html.escape</snippet></ROW><ROW><id>2077321</id><snippet>&gt;&gt;&gt; string = """ Hello "XYZ" this 'is' a test &amp; so on """
&gt;&gt;&gt; import html
&gt;&gt;&gt; html.escape(string)
' Hello "XYZ" this 'is' a test &amp; so on '
</snippet></ROW><ROW><id>2077321</id><snippet>cgi</snippet></ROW><ROW><id>2077321</id><snippet>escape()</snippet></ROW><ROW><id>2077321</id><snippet>import cgi

s = cgi.escape( """&amp; &lt; &gt;""" )   # s = "&amp; &lt; &gt;"
</snippet></ROW><ROW><id>2077321</id><snippet>&amp;</snippet></ROW><ROW><id>2077321</id><snippet>&lt;</snippet></ROW><ROW><id>2077321</id><snippet>&gt;</snippet></ROW><ROW><id>2077321</id><snippet>cgi.escape(string_to_escape, quote=True)</snippet></ROW><ROW><id>2077321</id><snippet>"</snippet></ROW><ROW><id>2077321</id><snippet> html_escape_table = {
     "&amp;": "&amp;",
     '"': """,
     "'": "'",
     "&gt;": "&gt;",
     "&lt;": "&lt;",
     }

 def html_escape(text):
     """Produce entities within text."""
     return "".join(html_escape_table.get(c,c) for c in text)
</snippet></ROW><ROW><id>2077321</id><snippet>escape()</snippet></ROW><ROW><id>2077321</id><snippet>xml.sax.saxutils</snippet></ROW><ROW><id>2077321</id><snippet>unescape()</snippet></ROW><ROW><id>2077321</id><snippet>from xml.sax.saxutils import escape, unescape
# escape() and unescape() takes care of &amp;, &lt; and &gt;.
html_escape_table = {
    '"': """,
    "'": "'"
}
html_unescape_table = {v:k for k, v in html_escape_table.items()}

def html_escape(text):
    return escape(text, html_escape_table)

def html_unescape(text):
    return unescape(text, html_unescape_table)
</snippet></ROW><ROW><id>2077501</id><snippet>number</snippet></ROW><ROW><id>2077501</id><snippet>number</snippet></ROW><ROW><id>2077501</id><snippet>x = list(range(r))
#timer is started here
for iteration in xrange(1000000):
    while x: x.pop(0)
#timer is stopped here
</snippet></ROW><ROW><id>2077501</id><snippet>x</snippet></ROW><ROW><id>2077501</id><snippet>number==1</snippet></ROW><ROW><id>2077878</id><snippet>[ComVisible(true)]
</snippet></ROW><ROW><id>2077944</id><snippet>' '.join(mystring.split())
</snippet></ROW><ROW><id>2078129</id><snippet>./manage.py shell --plain
</snippet></ROW><ROW><id>2078650</id><snippet>x = f(x)</snippet></ROW><ROW><id>2078830</id><snippet>import unicodedata
import re

splitter = re.compile(r'[\s|\-|\)|\(|/]+')

def remove_accents(text):
    nkfd_form = unicodedata.normalize('NFKD', unicode(text))
    return u"".join([c for c in nkfd_form if not unicodedata.combining(c)])

def get_words(text):    
    return [s.lower() for s in splitter.split(remove_accents(text)) if s!= '']

def get_unique_words(text):
    word_set = set(get_words(text))
    return word_set

def get_starts(text):
    word_set = get_unique_words(text)
    starts = set()
    for word in word_set:
        for i in range(len(word)):
            starts.add(word[:i+1])
    return sorted(starts)
</snippet></ROW><ROW><id>2078998</id><snippet>mylist.sort(key=lambda x: x.dict_properties['mykey'])
</snippet></ROW><ROW><id>2078998</id><snippet>operator</snippet></ROW><ROW><id>2078998</id><snippet>attrgetter</snippet></ROW><ROW><id>2078998</id><snippet>itemgetter</snippet></ROW><ROW><id>2078998</id><snippet>lambda</snippet></ROW><ROW><id>2078998</id><snippet>def</snippet></ROW><ROW><id>2079345</id><snippet>buffer</snippet></ROW><ROW><id>2079345</id><snippet>str</snippet></ROW><ROW><id>2079345</id><snippet>file.write</snippet></ROW><ROW><id>2079356</id><snippet>time</snippet></ROW><ROW><id>2079356</id><snippet>12:00</snippet></ROW><ROW><id>2079356</id><snippet>11:00</snippet></ROW><ROW><id>2079356</id><snippet>datetime</snippet></ROW><ROW><id>2079356</id><snippet>import datetime

def timedif(t1, t2):
  td = datetime.date.today()
  return datetime.datetime.combine(td, t1) - datetime.datetime.combine(td, t1)
</snippet></ROW><ROW><id>2079527</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>2079527</id><snippet>/usr/lib/python2.6/site-packages/sitecustomize.py
</snippet></ROW><ROW><id>2079527</id><snippet>import warnings
warnings.simplefilter("ignore", DeprecationWarning)
</snippet></ROW><ROW><id>2079527</id><snippet>PYTHONNODEPRECATIONWARNING</snippet></ROW><ROW><id>2080127</id><snippet>Dog('big').play(0)</snippet></ROW><ROW><id>2080127</id><snippet>toy</snippet></ROW><ROW><id>2080127</id><snippet>n</snippet></ROW><ROW><id>2080127</id><snippet>play</snippet></ROW><ROW><id>2080127</id><snippet>'None'</snippet></ROW><ROW><id>2080127</id><snippet>Toy.play</snippet></ROW><ROW><id>2080127</id><snippet>None</snippet></ROW><ROW><id>2080127</id><snippet>print</snippet></ROW><ROW><id>2080127</id><snippet>count</snippet></ROW><ROW><id>2080127</id><snippet>homework</snippet></ROW><ROW><id>2080127</id><snippet>exercise</snippet></ROW><ROW><id>2080129</id><snippet>class A:
  def foo(self, x = [] ):
    x.append(1)
    self.x = x

a = A()
a.foo()
print a.x
# prints: [1]
a.foo()
print a.x
# prints: [1,1]   # !!!! Consumer would expect this to be [1]
y = [1,2,3]
a.foo(y)
print a.x
# prints: [1, 2, 3, 1]
print y
# prints: [1, 2, 3, 1]  #  !!!! My list was modified
</snippet></ROW><ROW><id>2080129</id><snippet>import copy
class A:
  def foo(self, x = [] ):
    x = copy.copy(x)
    x.append(1)
    self.x = x

a = A()
a.foo()
print a.x
# prints: [1]
a.foo()
print a.x
# prints: [1]   # !!! Much better =)
y = [1,2,3]
a.foo(y)
print a.x
# prints: [1, 2, 3, 1]
print y
# prints: [1, 2, 3]  #  !!!! My list is how I made it
</snippet></ROW><ROW><id>2080201</id><snippet>choices</snippet></ROW><ROW><id>2080261</id><snippet>sys.path</snippet></ROW><ROW><id>2080261</id><snippet>$ virtualenv $HOME/my_python
$ $HOME/my_python/bin/easy_install numpy
</snippet></ROW><ROW><id>2080261</id><snippet>#!/home/myuser/my_python/bin/python

import numpy

# script here
</snippet></ROW><ROW><id>2080261</id><snippet>import sys
sys.path.insert(0, '/home/myuser/my_python/lib/python2.5/site-packages')

import numpy
</snippet></ROW><ROW><id>2080306</id><snippet>@register.filter
def a():
   pass
</snippet></ROW><ROW><id>2080306</id><snippet>def a():
    pass
a = register.filter(a)
</snippet></ROW><ROW><id>2080306</id><snippet>register.filter</snippet></ROW><ROW><id>2080306</id><snippet>if callable(name)</snippet></ROW><ROW><id>2080336</id><snippet>&lt;input type="submit" value="Gogogo!" /&gt;
</snippet></ROW><ROW><id>2080378</id><snippet>sqlite3</snippet></ROW><ROW><id>2080483</id><snippet>reverse()</snippet></ROW><ROW><id>2080483</id><snippet>reverse</snippet></ROW><ROW><id>2080483</id><snippet>admin.autodiscover()</snippet></ROW><ROW><id>2080668</id><snippet>counter</snippet></ROW><ROW><id>2080668</id><snippet>Value</snippet></ROW><ROW><id>2080668</id><snippet>from multiprocessing import Pool, Value
from time import sleep

counter = None

def init(args):
    ''' store the counter for later use '''
    global counter
    counter = args

def analyze_data(args):
    ''' increment the global counter, do something with the input '''
    global counter
    counter.value += 1
    print counter.value
    return args * 10

if __name__ == '__main__':
    #inputs = os.listdir(some_directory)

    #
    # initialize a cross-process counter and the input lists
    #
    counter = Value('i', 0)
    inputs = [1, 2, 3, 4]

    #
    # create the pool of workers, ensuring each one receives the counter 
    # as it starts. 
    #
    p = Pool(initializer = init, initargs = (counter, ))
    i = p.map_async(analyze_data, inputs, chunksize = 1)
    i.wait()
    print i.get()
</snippet></ROW><ROW><id>2081157</id><snippet>#!/usr/bin/env python

import glob
import os

for i in glob.glob(u'*.txt'):
  os.unlink (i)
</snippet></ROW><ROW><id>2081165</id><snippet>import subprocess
import sys

command = 'python -c \'print raw_input("Please make a selection: ")\''
sp = subprocess.Popen(command, shell = True, stdin = sys.stdin)
sp.wait()
</snippet></ROW><ROW><id>2081216</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.ascii_lowercase
'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; L = list(string.ascii_lowercase)
&gt;&gt;&gt; print L
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', ...
&gt;&gt;&gt; help(string)
</snippet></ROW><ROW><id>2081390</id><snippet>is</snippet></ROW><ROW><id>2081390</id><snippet>id(string.ascii_lowercase) == id(str)
</snippet></ROW><ROW><id>2081390</id><snippet>str</snippet></ROW><ROW><id>2081390</id><snippet>False</snippet></ROW><ROW><id>2081390</id><snippet>isinstance(string.ascii_lowercase, basestring)
</snippet></ROW><ROW><id>2081390</id><snippet>str</snippet></ROW><ROW><id>2081390</id><snippet>unicode</snippet></ROW><ROW><id>2081545</id><snippet>a_tag</snippet></ROW><ROW><id>2081545</id><snippet>delete()</snippet></ROW><ROW><id>2081545</id><snippet>def save(self, *args, **kwargs):
    super(Item, self).save(*args, **kwargs)
    for a_tag in self.tag.all():
        a_tag.tag_item.clear()
    cat = self.category
    while cat is not None:
        cat.tag_item.add(self)
        cat = cat.parent
</snippet></ROW><ROW><id>2081665</id><snippet>{% blocktrans %}</snippet></ROW><ROW><id>2081665</id><snippet>{% i18ninclude "faq/question1.html" "en" %}
</snippet></ROW><ROW><id>2081665</id><snippet>faq/question1.en.html</snippet></ROW><ROW><id>2081665</id><snippet>import os
from django import template
register = template.Library()

@register.simpletag
def i18ninclude(template_name, language):
    template_name, extension = os.path.splitext(template_name)
    template_name = '%s.%s%s' % (template_name, language, extension)
    return template.loader.render_to_string(template_name)
</snippet></ROW><ROW><id>2081708</id><snippet>'r'</snippet></ROW><ROW><id>2081708</id><snippet>\</snippet></ROW><ROW><id>2081708</id><snippet>r'...'</snippet></ROW><ROW><id>2081708</id><snippet>ru'...'</snippet></ROW><ROW><id>2081708</id><snippet>ur'...'</snippet></ROW><ROW><id>2081708</id><snippet>r'...'</snippet></ROW><ROW><id>2081708</id><snippet>r'''...'''</snippet></ROW><ROW><id>2081708</id><snippet>r"..."</snippet></ROW><ROW><id>2081708</id><snippet>r"""..."""</snippet></ROW><ROW><id>2081708</id><snippet>2.*</snippet></ROW><ROW><id>2081708</id><snippet>u'...'</snippet></ROW><ROW><id>2081708</id><snippet>'...'</snippet></ROW><ROW><id>2081708</id><snippet>&gt;&gt;&gt; sys.getsizeof('ciao')
28
&gt;&gt;&gt; sys.getsizeof(u'ciao')
34
</snippet></ROW><ROW><id>2081880</id><snippet>fp = open("file")
for i, line in enumerate(fp):
    if i == 25:
        # 26th line
    elif i == 29:
        # 30th line
    elif i &gt; 29:
        break
fp.close()
</snippet></ROW><ROW><id>2081880</id><snippet>i == n-1</snippet></ROW><ROW><id>2081880</id><snippet>n</snippet></ROW><ROW><id>2081965</id><snippet>def myfunc(*args):
    for argument in args:
        print "myfunc was given", argument
</snippet></ROW><ROW><id>2081965</id><snippet>*args</snippet></ROW><ROW><id>2081965</id><snippet>args</snippet></ROW><ROW><id>2081965</id><snippet>*args</snippet></ROW><ROW><id>2081965</id><snippet>def my_other_func(name, *args):
</snippet></ROW><ROW><id>2081965</id><snippet>name</snippet></ROW><ROW><id>2081965</id><snippet>args</snippet></ROW><ROW><id>2081965</id><snippet>args</snippet></ROW><ROW><id>2082025</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup
# or if you're using BeautifulSoup4:
# from bs4 import BeautifulSoup

soup = BeautifulSoup(urllib2.urlopen('http://www.timeanddate.com/worldclock/astronomy.html?n=78').read())

for row in soup('table', {'class': 'spad'})[0].tbody('tr'):
    tds = row('td')
    print tds[0].string, tds[1].string
    # will print date and sunrise
</snippet></ROW><ROW><id>2082040</id><snippet>import subprocess
retcode = subprocess.call(["/path/to/myCprogram", "/path/to/file.c"])
if retcode == 0:
   print "success!"
</snippet></ROW><ROW><id>2082040</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>2082040</id><snippet>proc = subprocess.Popen(["/path/to/myCprogram", "/path/to/file.c"], 
                        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
output, err_output = proc.communicate()
# output will now contain the stdout of the program in a string
</snippet></ROW><ROW><id>2082051</id><snippet>.translate</snippet></ROW><ROW><id>2082051</id><snippet>import string
identity = string.maketrans('', '')

def remove_whitespace(value):
  return value.translate(identity, string.whitespace)
</snippet></ROW><ROW><id>2082051</id><snippet>  return value.translate(None, string.whitespace)
</snippet></ROW><ROW><id>2082051</id><snippet>.translate</snippet></ROW><ROW><id>2082051</id><snippet>ord</snippet></ROW><ROW><id>2082051</id><snippet>None</snippet></ROW><ROW><id>2082051</id><snippet>dict</snippet></ROW><ROW><id>2082051</id><snippet>.fromkeys</snippet></ROW><ROW><id>2082051</id><snippet>nospace = dict.fromkeys(ord(c) for c in string.whitespace)

def unicode_remove_whitespace(value):
  return value.translate(nospace)
</snippet></ROW><ROW><id>2082051</id><snippet>unicode_nospace</snippet></ROW><ROW><id>2082163</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>2082163</id><snippet>INSTALLED_APPS = (
#    'django.contrib.auth',
     'django.contrib.contenttypes',
#    'django.contrib.sessions',
     'django.contrib.sites',
     'project_name.app_name',
)
</snippet></ROW><ROW><id>2082169</id><snippet>class CaseInsensitiveDict(dict):
    def __setitem__(self, key, value):
        super(CaseInsensitiveDict, self).__setitem__(key.lower(), value)

    def __getitem__(self, key):
        return super(CaseInsensitiveDict, self).__getitem__(key.lower())
</snippet></ROW><ROW><id>2082176</id><snippet>'RGB'</snippet></ROW><ROW><id>2082661</id><snippet>for div in range(2,candidate//2,1):
    if candidate % div == 0:
        prime = False
        print candidate, "is not prime - divisible by", div
        return next_prime(candidate)
</snippet></ROW><ROW><id>2083210</id><snippet>def search(doc):
    print "Visiting", doc
    f = open(doc, 'r')
    for line in f:
        if line.strip():
            search(line.strip())
</snippet></ROW><ROW><id>2083374</id><snippet>exec</snippet></ROW><ROW><id>2083374</id><snippet>globals()</snippet></ROW><ROW><id>2083374</id><snippet>locals()</snippet></ROW><ROW><id>2083374</id><snippet>locals()</snippet></ROW><ROW><id>2083374</id><snippet>&gt;&gt;&gt; def myfunc():
...   exec 'myvar="boooh!"' in globals()
... 
&gt;&gt;&gt; myfunc()
&gt;&gt;&gt; myvar
'boooh!'
</snippet></ROW><ROW><id>2083384</id><snippet>__name__</snippet></ROW><ROW><id>2083384</id><snippet>'__main__'</snippet></ROW><ROW><id>2083384</id><snippet>'foobar'</snippet></ROW><ROW><id>2083384</id><snippet>if __name__ == '__main__':
    import Bob
</snippet></ROW><ROW><id>2083384</id><snippet>import</snippet></ROW><ROW><id>2083532</id><snippet>Py_AtExit()</snippet></ROW><ROW><id>2083834</id><snippet>.pyo</snippet></ROW><ROW><id>2083834</id><snippet>assert</snippet></ROW><ROW><id>2083996</id><snippet>while True</snippet></ROW><ROW><id>2083996</id><snippet>try</snippet></ROW><ROW><id>2083996</id><snippet>while</snippet></ROW><ROW><id>2083996</id><snippet>for i in range(0,100):
    while True:
        try:
            // do stuff
        except:
            continue
        break
</snippet></ROW><ROW><id>2084075</id><snippet>Win32_PerfRawData_PerfProc_Process</snippet></ROW><ROW><id>2084075</id><snippet>/proc/pid/status</snippet></ROW><ROW><id>2084075</id><snippet>ps</snippet></ROW><ROW><id>2084135</id><snippet>import csv

myfile = open(..., 'wb')
wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
wr.writerow(mylist)
</snippet></ROW><ROW><id>2084186</id><snippet>import win32com.client

def find_process(name):
    objWMIService = win32com.client.Dispatch("WbemScripting.SWbemLocator")
    objSWbemServices = objWMIService.ConnectServer(".", "root\cimv2")
    colItems = objSWbemServices.ExecQuery(
         "Select * from Win32_Process where Caption = '{0}'".format(name))
    return len(colItems)

print find_process("SciTE.exe")
</snippet></ROW><ROW><id>2084423</id><snippet>
from hashlib import md5
</snippet></ROW><ROW><id>2084521</id><snippet>print chr(27) + "[2J"
</snippet></ROW><ROW><id>2084852</id><snippet>from lxml import html, etree
from StringIO import StringIO

html_string = '''&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
   "http://www.w3.org/TR/html4/loose.dtd"&gt;

&lt;html lang="en"&gt;
&lt;head/&gt;
&lt;body&gt;
    &lt;table border="1"&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;a href="http://stackoverflow.com/foobar" title="Foobar"&gt;A link&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;a href="http://stackoverflow.com/baz" title="Baz"&gt;Another link&lt;/a&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;'''

tree = etree.parse(StringIO(html_string))
print tree.xpath('/html/body//tbody/tr/td/a[@title]/@href')

&gt;&gt;&gt; ['http://stackoverflow.com/foobar', 'http://stackoverflow.com/baz']
</snippet></ROW><ROW><id>2084946</id><snippet>for i in {0001..1000}
do
  echo "some text" &gt; "file_${i}.txt"
done
</snippet></ROW><ROW><id>2084946</id><snippet>for x in range(1000):
    open("file%03d.txt" % x,"w").write("some text")
</snippet></ROW><ROW><id>2085039</id><snippet>shell&gt; cd /usr/local/mysql/data/
shell&gt; ls -ld *
drwx------    17 geert   admin         578 Oct  1 19:33 someabstract
</snippet></ROW><ROW><id>2085187</id><snippet>try:
    result = client.service.AbsoluteMove(token, dest, speed)
except suds.WebFault as detail:
    ...
</snippet></ROW><ROW><id>2085325</id><snippet>dir</snippet></ROW><ROW><id>2085325</id><snippet>for entry in pe.DIRECTORY_ENTRY_IMPORT:
  print entry.dll
  for imp in entry.imports:
    print '\t', hex(imp.address), imp.name
Output
comdlg32.dll
        0x10012A0L PageSetupDlgW
        0x10012A4L FindTextW
        0x10012A8L PrintDlgExW
[snip]
SHELL32.dll
        0x1001154L DragFinish
        0x1001158L DragQueryFileW
</snippet></ROW><ROW><id>2085325</id><snippet>imp.name</snippet></ROW><ROW><id>2085325</id><snippet>&gt;&gt;&gt; ctypes.windll.comdlg32.PageSetupDlgW
&lt;_FuncPtr object at 0x00A97210&gt;
&gt;&gt;&gt; ctypes.windll.comdlg32.FindTextW
&lt;_FuncPtr object at 0x00A97288&gt;
...
</snippet></ROW><ROW><id>2085335</id><snippet>PL.loglog</snippet></ROW><ROW><id>2085375</id><snippet>if error:
    start_response("404 Not Found", [('Content-type', 'text/plain')])
    return ['Page not found']
</snippet></ROW><ROW><id>2086005</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.ctime(1263538277)
'Fri Jan 15 04:51:17 2010'
</snippet></ROW><ROW><id>2086460</id><snippet>class PrintObject(object):
    def __repr__(self):
        return 'repr'

    def __str__(self):
        return 'str'

    def __unicode__(self):
        return 'unicode'
</snippet></ROW><ROW><id>2086460</id><snippet>Python 2.6.4 (r264:75821M, Oct 27 2009, 19:48:32)
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from printobject import PrintObject
&gt;&gt;&gt; printObj = PrintObject()
&gt;&gt;&gt; printObj
&gt;&gt;&gt; repr(printObj)
'repr'
&gt;&gt;&gt; str(printObj)
'str'
&gt;&gt;&gt; unicode(printObj)
u'unicode'
</snippet></ROW><ROW><id>2086460</id><snippet>&gt;&gt;&gt; printObj
repr
</snippet></ROW><ROW><id>2086460</id><snippet>&gt;&gt;&gt; print(printObj)
str
</snippet></ROW><ROW><id>2086460</id><snippet>&gt;&gt;&gt; print(u'%s' % printObj)
unicode
</snippet></ROW><ROW><id>2086596</id><snippet>socket.setdefaulttimeout()</snippet></ROW><ROW><id>2086596</id><snippet>import urllib2
import socket
socket.setdefaulttimeout(30)
f = urllib2.urlopen('http://www.python.org/')
</snippet></ROW><ROW><id>2086615</id><snippet>append</snippet></ROW><ROW><id>2086615</id><snippet>foo.py --my_list=1 --my_list=2 ...</snippet></ROW><ROW><id>2086615</id><snippet>foo.py --my_list='1,2,3,4,5'</snippet></ROW><ROW><id>2086615</id><snippet>x.split(',')</snippet></ROW><ROW><id>2086615</id><snippet>getopt</snippet></ROW><ROW><id>2086615</id><snippet>optparse</snippet></ROW><ROW><id>2086615</id><snippet>--my_list</snippet></ROW><ROW><id>2086615</id><snippet>split()</snippet></ROW><ROW><id>2086615</id><snippet>'1'</snippet></ROW><ROW><id>2086615</id><snippet>'2'</snippet></ROW><ROW><id>2087031</id><snippet>os.isatty(sys.stdout.fileno())</snippet></ROW><ROW><id>2087031</id><snippet>stdout</snippet></ROW><ROW><id>2087144</id><snippet>&gt;&gt;&gt; print '4-12个英文字母、数字和下划线'.decode('gb2312').encode('unicode-escape')
</snippet></ROW><ROW><id>2087144</id><snippet># coding: gb2312
print u'4-12个英文字母、数字和下划线'.encode('unicode-escape')
</snippet></ROW><ROW><id>2087234</id><snippet>request_path</snippet></ROW><ROW><id>2087234</id><snippet>extra_var</snippet></ROW><ROW><id>2087234</id><snippet>request_path</snippet></ROW><ROW><id>2087234</id><snippet>404.html</snippet></ROW><ROW><id>2087234</id><snippet>404.html</snippet></ROW><ROW><id>2087234</id><snippet>request_path</snippet></ROW><ROW><id>2087234</id><snippet>handler404</snippet></ROW><ROW><id>2087234</id><snippet>handler404 = 'myproject.myapp.views.handler404'
</snippet></ROW><ROW><id>2087433</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; h = HTMLParser.HTMLParser()
&gt;&gt;&gt; print h.unescape('£682m')
£682m
</snippet></ROW><ROW><id>2087433</id><snippet>HTMLParser</snippet></ROW><ROW><id>2087433</id><snippet>html.parser</snippet></ROW><ROW><id>2087433</id><snippet>&gt;&gt;&gt; import html.parser
&gt;&gt;&gt; h = html.parser.HTMLParser()
&gt;&gt;&gt; print(h.unescape('£682m'))
£682m
</snippet></ROW><ROW><id>2087987</id><snippet>&gt;&gt;&gt; def is_func(instance, func):
    test = getattr(instance, func, None)
    if test and hasattr(test, '__call__'):
        return True

&gt;&gt;&gt; is_func('', 'len')
&gt;&gt;&gt; is_func({}, 'fromkeys')
True
</snippet></ROW><ROW><id>2087987</id><snippet>inspect</snippet></ROW><ROW><id>2087987</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; test = getattr(cc, 'func', None)
&gt;&gt;&gt; inspect.ismethod(test)
True
</snippet></ROW><ROW><id>2087999</id><snippet>Value = 1800</snippet></ROW><ROW><id>2087999</id><snippet>results</snippet></ROW><ROW><id>2087999</id><snippet>results_dict = {}
for line in results.splitlines():
    try:
        name, val = line.split(' = ')
    except ValueError:
        continue
    results_dict[name] = val
</snippet></ROW><ROW><id>2087999</id><snippet>int(val)</snippet></ROW><ROW><id>2087999</id><snippet>float(val)</snippet></ROW><ROW><id>2087999</id><snippet>if " = " in line</snippet></ROW><ROW><id>2087999</id><snippet>eval(results)</snippet></ROW><ROW><id>2088074</id><snippet>python3.1 foo.py --test</snippet></ROW><ROW><id>2088074</id><snippet>make test</snippet></ROW><ROW><id>2088074</id><snippet>pre-commit</snippet></ROW><ROW><id>2088074</id><snippet>|| echo $?</snippet></ROW><ROW><id>2088074</id><snippet>/dev/null</snippet></ROW><ROW><id>2088074</id><snippet>$ python3.1 test.py 2&gt;/dev/null || echo $?
1
$ make test 2&gt;/dev/null || echo $?
python3.1 test.py
2
$ .git/hooks/pre-commit 2&gt;/dev/null || echo $?
python3.1 test.py
1
</snippet></ROW><ROW><id>2088074</id><snippet>test.py</snippet></ROW><ROW><id>2088074</id><snippet>import unittest

class TestFailure(unittest.TestCase):
    def testFail(self):
        assert(False)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>2088074</id><snippet>Makefile</snippet></ROW><ROW><id>2088074</id><snippet>test:
    python3.1 test.py
</snippet></ROW><ROW><id>2088074</id><snippet>.git/hooks/pre-commit</snippet></ROW><ROW><id>2088074</id><snippet>#!/bin/sh
make test || exit 1
</snippet></ROW><ROW><id>2088074</id><snippet>|| exit 1</snippet></ROW><ROW><id>2088074</id><snippet>make test</snippet></ROW><ROW><id>2088074</id><snippet>pre-commit</snippet></ROW><ROW><id>2088074</id><snippet>0</snippet></ROW><ROW><id>2088101</id><snippet>*args, **kwargs</snippet></ROW><ROW><id>2088101</id><snippet>*a</snippet></ROW><ROW><id>2088101</id><snippet>**kw</snippet></ROW><ROW><id>2088101</id><snippet>*a, **kw</snippet></ROW><ROW><id>2088188</id><snippet>python -i</snippet></ROW><ROW><id>2088618</id><snippet>platform</snippet></ROW><ROW><id>2088618</id><snippet>sys</snippet></ROW><ROW><id>2088618</id><snippet>lipo</snippet></ROW><ROW><id>2088620</id><snippet>from django.core.cache import cache

def cached_user_passes_test(test_func, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
    if not login_url:
        from django.conf import settings
        login_url = settings.LOGIN_URL

    def decorator(view_func):
        def _wrapped_view(request, *args, **kwargs):
            key = str(test_func) + str(request.user)
            cached_test_result = cache.get(key)
            if cached_test_result != None:
                test_result = cached_test_result
            else:
                test_result = test_func(request.user)
                cache.set(key, test_result, 60)       

            if test_result:
                return view_func(request, *args, **kwargs)
            path = urlquote(request.get_full_path())
            tup = login_url, redirect_field_name, path
            return HttpResponseRedirect('%s?%s=%s' % tup)
        return wraps(view_func)(_wrapped_view)
    return auto_adapt_to_methods(decorator)
</snippet></ROW><ROW><id>2088934</id><snippet>CREATE TABLE</snippet></ROW><ROW><id>2088934</id><snippet>sqlite3</snippet></ROW><ROW><id>2089424</id><snippet>ulimit -n 1024</snippet></ROW><ROW><id>2089424</id><snippet>~/.profile</snippet></ROW><ROW><id>2089424</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>2089496</id><snippet>datetime</snippet></ROW><ROW><id>2089496</id><snippet>book.creationTime.tzinfo = EST
</snippet></ROW><ROW><id>2089496</id><snippet>book.creationTime = book.creationTime.replace(tzinfo=EST)
</snippet></ROW><ROW><id>2089889</id><snippet>glTranslatef(point[0],point[1],0)
</snippet></ROW><ROW><id>2089889</id><snippet>glRotatef(rotation,0,0,1)
</snippet></ROW><ROW><id>2089981</id><snippet>"Báz Bar"</snippet></ROW><ROW><id>2089981</id><snippet>['b', 'ba', 'bar', 'baz']</snippet></ROW><ROW><id>2090122</id><snippet>.replace</snippet></ROW><ROW><id>2090122</id><snippet>None</snippet></ROW><ROW><id>2090122</id><snippet>aware = naive.replace(tzinfo=utc)
</snippet></ROW><ROW><id>2090122</id><snippet>print aware.astimezone(Pacific).strftime('%a %b %d %X %z')
</snippet></ROW><ROW><id>2090124</id><snippet>pip install</snippet></ROW><ROW><id>2090124</id><snippet>python setup.py sdist</snippet></ROW><ROW><id>2090124</id><snippet>pip install -e .</snippet></ROW><ROW><id>2090124</id><snippet>python setup.py develop</snippet></ROW><ROW><id>2090163</id><snippet>class EstDateTimeProperty(db.DateTimeProperty):
  def make_value_from_datastore(self, value):
    naive_utc = db.DateTimeProperty(self, value)
    aware_utc = naive_utc.replace(tzinfo=UTC)
    return aware_utc.astimezone(EST)
</snippet></ROW><ROW><id>2090163</id><snippet>__init__</snippet></ROW><ROW><id>2090183</id><snippet>import csv
import operator

def sort_csv(csv_filename, types, sort_key_columns):
    """sort (and rewrite) a csv file.
    types:  data types (conversion functions) for each column in the file
    sort_key_columns: column numbers of columns to sort by"""
    data = []
    with open(csv_filename, 'rb') as f:
        for row in csv.reader(f):
            data.append(convert(types, row))
    data.sort(key=operator.itemgetter(*sort_key_columns))
    with open(csv_filename, 'wb') as f:
        csv.writer(f).writerows(data)
</snippet></ROW><ROW><id>2090183</id><snippet>convert</snippet></ROW><ROW><id>2090183</id><snippet>convert</snippet></ROW><ROW><id>2090183</id><snippet>def convert(types, values):
    return [t(v) for t, v in zip(types, values)]
</snippet></ROW><ROW><id>2090183</id><snippet>import datetime
def date(s):
    return datetime.strptime(s, '%m/%d/%y')

&gt;&gt;&gt; convert((int, date, str), ('1', '2/15/09', 'z'))
[1, datetime.datetime(2009, 2, 15, 0, 0), 'z']
</snippet></ROW><ROW><id>2090329</id><snippet>ParseFile</snippet></ROW><ROW><id>2090329</id><snippet>while True:
  data = f.read(BUFSIZE)
  if not data:
    p.Parse('', True)
    break
  p.Parse(data, False)
  time.sleep(0.0)
</snippet></ROW><ROW><id>2090329</id><snippet>time.sleep(0.0)</snippet></ROW><ROW><id>2090329</id><snippet>Parse</snippet></ROW><ROW><id>2090329</id><snippet>Queue</snippet></ROW><ROW><id>2090329</id><snippet>q</snippet></ROW><ROW><id>2090329</id><snippet>q.put(name)</snippet></ROW><ROW><id>2090329</id><snippet>q.get()</snippet></ROW><ROW><id>2090441</id><snippet> radio = QtGui.QRadioButton(child.widget())
</snippet></ROW><ROW><id>2090441</id><snippet>    qvbl = self.qgbSomeSelectionGroup.layout()
    for i in range(0, qvbl.count()):
        widget = qvbl.itemAt(i).widget() 
        if (widget!=0) and (type(widget) is QtGui.QRadioButton):
            if widget.isChecked():
                print "radio button num " + str(i) + " is checked"
</snippet></ROW><ROW><id>2090471</id><snippet>(?&lt;name&gt;subexp)</snippet></ROW><ROW><id>2090471</id><snippet>\k&lt;name&gt;</snippet></ROW><ROW><id>2090534</id><snippet>unittest</snippet></ROW><ROW><id>2090534</id><snippet>EditProfileTestCase</snippet></ROW><ROW><id>2090534</id><snippet>LoginTestCase</snippet></ROW><ROW><id>2090534</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>2090534</id><snippet>LoginTestCase</snippet></ROW><ROW><id>2090534</id><snippet>EditProfileTestCase</snippet></ROW><ROW><id>2090534</id><snippet>LoginTestCase</snippet></ROW><ROW><id>2090572</id><snippet>[
    ('userName', "4-12\u4e2a\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf"),
    ('userNameMin', "\u4e0d\u80fd\u5c0f\u4e8e4\u4e2a\u5b57"),
    ....
]
</snippet></ROW><ROW><id>2090572</id><snippet>s</snippet></ROW><ROW><id>2090572</id><snippet>s.items()</snippet></ROW><ROW><id>2090572</id><snippet>for i,j in s:
        print i,j.decode('unicode-escape')
</snippet></ROW><ROW><id>2090584</id><snippet>import gobject

class Signals(gobject.GObject):

    __gsignals__ = {
        "lastfm_username_changed": (gobject.SIGNAL_RUN_FIRST, gobject.TYPE_NONE, (gobject.TYPE_STRING,)) #@UndefinedVariable
    }

    def __init__(self):
        gobject.GObject.__init__(self)


class Bus(object):
     """
     Message Bus - Borg pattern
     """
    _signals=Signals()

    @classmethod
    def emit(cls, name, *pa, **kwa):
        cls._signals.emit(name, *pa, **kwa)

    @classmethod
    def add_emission_hook(cls, name, callback):
        gobject.add_emission_hook(cls._signals, name, callback)


if __name__=="__main__":

    def callback(self, data):
        print "callback: data=%s" % data

    Bus.add_emission_hook("lastfm_username_changed", callback)

    Bus.emit("lastfm_username_changed", "jldupont")
</snippet></ROW><ROW><id>2090599</id><snippet>if input_quit == 'Quit':
        input_quit = gui.ynbox(
        msg = 'Are you sure you want to quit?',
</snippet></ROW><ROW><id>2090599</id><snippet>if input_event_1 == 'Quit':
        input_quit = gui.ynbox(
        msg = 'Are you sure you want to quit?',
</snippet></ROW><ROW><id>2090599</id><snippet>ynbox</snippet></ROW><ROW><id>2090599</id><snippet>    elif input_event_1 == 'Quit':
        input_quit = gui.ynbox(
            msg = 'Are you sure you want to quit?',
            title = 'Confirm quit',
            choices = ('Quit', 'Cancel'))
        if input_quit == 1:
            sys.exit(1)
</snippet></ROW><ROW><id>2090711</id><snippet>input()</snippet></ROW><ROW><id>2090711</id><snippet>raw_input()</snippet></ROW><ROW><id>2090861</id><snippet>locale.setlocale()</snippet></ROW><ROW><id>2091013</id><snippet>&gt;&gt;&gt; from appscript import *
&gt;&gt;&gt; app('Numbers').documents.first.sheets.first.tables.first.selection_range.cells.first.value.set(to=42)
</snippet></ROW><ROW><id>2091013</id><snippet>&gt;&gt;&gt; app('Numbers').documents['MyDocument.numbers'].sheets['MySheet'].tables['MyTable'].selection_range.cells.first.value.set(to='abc')
</snippet></ROW><ROW><id>2091530</id><snippet>win32gui.FindWindow</snippet></ROW><ROW><id>2091530</id><snippet>win32gui.EnumWindows</snippet></ROW><ROW><id>2091530</id><snippet>win32gui.SetForegroundWindow</snippet></ROW><ROW><id>2091530</id><snippet>import win32gui
import re

class WindowMgr:
    """Encapsulates some calls to the winapi for window management"""
    def __init__ (self):
        """Constructor"""
        self._handle = None

    def find_window(self, class_name, window_name = None):
        """find a window by its class_name"""
        self._handle = win32gui.FindWindow(class_name, window_name)

    def _window_enum_callback(self, hwnd, wildcard):
        '''Pass to win32gui.EnumWindows() to check all the opened windows'''
        if re.match(wildcard, str(win32gui.GetWindowText(hwnd))) != None:
            self._handle = hwnd

    def find_window_wildcard(self, wildcard):
        self._handle = None
        win32gui.EnumWindows(self._window_enum_callback, wildcard)

    def set_foreground(self):
        """put the window in the foreground"""
        win32gui.SetForegroundWindow(self._handle)

w = WindowMgr()
w.find_window_wildcard(".*Hello.*")
w.set_foreground()
</snippet></ROW><ROW><id>2091638</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>2091638</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; from xml.dom.minidom import parse, parseString
&gt;&gt;&gt; u1=urllib2.urlopen('http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml')
&gt;&gt;&gt; dom=parse(u1)
&gt;&gt;&gt; print dom
&lt;xml.dom.minidom.Document instance at 0x017D73A0&gt;
&gt;&gt;&gt; dom.childNodes
[&lt;DOM Element: gesmes:Envelope at 0x17d7c88&gt;]
&gt;&gt;&gt; dom.childNodes[0].childNodes
[&lt;DOM Text node "u'\n\t'"&gt;, &lt;DOM Element: gesmes:subject at 0x1041aa8&gt;,
 &lt;DOM Text node "u'\n\t'"&gt;, &lt;DOM Element: gesmes:Sender at 0xff8260&gt;,
 &lt;DOM Text node "u'\n\t'"&gt;, &lt;DOM Element: Cube at 0x17d3dc8&gt;, &lt;DOM Text node "u'\n'"&gt;]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2091638</id><snippet>Cube</snippet></ROW><ROW><id>2091638</id><snippet>&gt;&gt;&gt; [elem.attributes['currency'].value for elem in
     dom.getElementsByTagName('Cube') if elem.hasAttribute('currency')]
[u'USD', u'JPY', u'BGN', u'CZK', u'DKK', u'EEK', u'GBP', u'HUF', u'LTL', u'LVL',
 u'PLN', u'RON', u'SEK', u'CHF', u'NOK', u'HRK', u'RUB', u'TRY', u'AUD', u'BRL',
 u'CAD', u'CNY', u'HKD', u'IDR', u'INR', u'KRW', u'MXN', u'MYR', u'NZD', u'PHP',
 u'SGD', u'THB', u'ZAR']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2091690</id><snippet>                          Pystone   Passmark
Dual PowerMac G4 @ 1GHz:   18587        n/a (probably about 300)
Pentium 4 @ 2.53GHz:       37313        327
Core2 Duo T7200 @ 2GHz:    51245       1129
</snippet></ROW><ROW><id>2092025</id><snippet>print b().cool
</snippet></ROW><ROW><id>2092025</id><snippet>attrs</snippet></ROW><ROW><id>2092025</id><snippet>__new__</snippet></ROW><ROW><id>2092025</id><snippet>.</snippet></ROW><ROW><id>2092072</id><snippet>method = getattr(myPotatoHead, 'play_' + toy)
method()
</snippet></ROW><ROW><id>2092374</id><snippet>&lt;script type="text/javascript" src="{{ MEDIA_URL }}jquery-1.4.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="{{ MEDIA_URL }}reg.js"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>2092374</id><snippet>"django.core.context_processors.media"</snippet></ROW><ROW><id>2092374</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>2092409</id><snippet>dict((category, list(l)) for category, l 
     in itertools.groupby(l, operator.itemgetter(3))
</snippet></ROW><ROW><id>2092409</id><snippet>itertools.groupby</snippet></ROW><ROW><id>2092409</id><snippet>list(l)</snippet></ROW><ROW><id>2092409</id><snippet>dict(itertools.groupby(l, operator.itemgetter(3)))</snippet></ROW><ROW><id>2092785</id><snippet>conn = sqlite3.connect('/path/to/your/sqlite_file.db')
c = conn.cursor()
for item in my_list:
  c.execute('insert into tablename values (?,?,?)', item)
</snippet></ROW><ROW><id>2092940</id><snippet>def my_view(request)
  referer = request.META.get('HTTP_REFERER', '')
  if referer == 'absolute/path/to/somepage.html':
    # do something
    ...
  else:
    # do something else
    ...
</snippet></ROW><ROW><id>2092940</id><snippet>reverse()</snippet></ROW><ROW><id>2093044</id><snippet>DefaultInitEnv PYTHONPATH "/opt/something/lib/python2.4/site-packages/:/usr/lib/python2.4/"
</snippet></ROW><ROW><id>2093103</id><snippet>from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm.collections import attribute_mapped_collection
from sqlalchemy.ext.associationproxy import association_proxy
from sqlalchemy.orm import relation, sessionmaker

metadata  = MetaData()
Base = declarative_base(metadata=metadata, name='Base')

class Item(Base):

    __tablename__ = 'Item'
    UniqueId = Column(Integer, ForeignKey('ItemSet.UniqueId'),
                      primary_key=True)
    ItemSet = relation('ItemSet')
    ItemName = Column(String(10), primary_key=True)
    ItemValue = Column(Text) # Use PickleType?

def _create_item(ItemName, ItemValue):
    return Item(ItemName=ItemName, ItemValue=ItemValue)

class ItemSet(Base):

    __tablename__ = 'ItemSet'
    UniqueId = Column(Integer, primary_key=True)
    _items = relation(Item,
                      collection_class=attribute_mapped_collection('ItemName'))
    items = association_proxy('_items', 'ItemValue', creator=_create_item)

engine = create_engine('sqlite://', echo=True)
metadata.create_all(engine)

session = sessionmaker(bind=engine)()
data = {"UniqueId": 1, "a": 23, "b": "Hello", "c": "World"}
s = ItemSet(UniqueId=data.pop("UniqueId"))
s.items = data
session.add(s)
session.commit()
</snippet></ROW><ROW><id>2093627</id><snippet>Item</snippet></ROW><ROW><id>2093627</id><snippet>Item</snippet></ROW><ROW><id>2093627</id><snippet>save()</snippet></ROW><ROW><id>2093627</id><snippet>Item</snippet></ROW><ROW><id>2093627</id><snippet>master</snippet></ROW><ROW><id>2093627</id><snippet>None</snippet></ROW><ROW><id>2093866</id><snippet>s = '/opt/ad/bin$ ./ptzflip\r\nValue = 1800\r\nMin = 0\r\nMax = 3600\r\nStep = 1\r\n'
d = {}
for pair in [val.split('=') for val in s.split('\r\n')[1:-1]]:
    d[pair[0]] = int(pair[1])
</snippet></ROW><ROW><id>2094101</id><snippet>project.settings.SETTING</snippet></ROW><ROW><id>2094101</id><snippet> project.settings</snippet></ROW><ROW><id>2094101</id><snippet>settings.SETTING</snippet></ROW><ROW><id>2094286</id><snippet>@makebold
def makeitalic(fn):
    def wrapped():
        return "&lt;i&gt;" + fn() + "&lt;/i&gt;"
    return wrapped
</snippet></ROW><ROW><id>2094286</id><snippet>makeitalic</snippet></ROW><ROW><id>2094286</id><snippet>wrapped</snippet></ROW><ROW><id>2094286</id><snippet>def makeitalic(fn):
    @makebold
    def wrapped():
        return "&lt;i&gt;" + fn() + "&lt;/i&gt;"
    return wrapped
</snippet></ROW><ROW><id>2094286</id><snippet>makeitalic</snippet></ROW><ROW><id>2094286</id><snippet>makebold</snippet></ROW><ROW><id>2094286</id><snippet>wrapped</snippet></ROW><ROW><id>2094288</id><snippet>def json_view(request):
  username=request.GET.get('username')
  result='successName'
  if username:
    try:
      user=User.objects.get(username=username)
      result='existName'
    except User.DoesNotExist:
      pass
    return HttpResponse(simplejson.dumps({'result': result}))
</snippet></ROW><ROW><id>2094311</id><snippet>subprocess.Popen(("mdb-export", mdb.name, tbl,),stdout=csv)
</snippet></ROW><ROW><id>2094690</id><snippet>None</snippet></ROW><ROW><id>2094690</id><snippet>class User:
   UserName = None
   PassWord = None
</snippet></ROW><ROW><id>2094690</id><snippet>class User(object):
    def __init__(self):
        self.UserName = None
        self.PassWord = None
</snippet></ROW><ROW><id>2094690</id><snippet>None</snippet></ROW><ROW><id>2094690</id><snippet>def f():
    pass
g = f() # g now has the value of None
</snippet></ROW><ROW><id>2094840</id><snippet>a.rstrip().split('\n')
</snippet></ROW><ROW><id>2094840</id><snippet>filter(None, a.split('\n'))
</snippet></ROW><ROW><id>2095012</id><snippet>a = 'foo'
b = 'bar'

text = 'find a replacement for me [[:a:]] and [[:b:]]'

desired_output = 'find a replacement for me foo and bar'

def repl(m):
    contents = m.group(1)
    if contents == 'a':
        return a
    if contents == 'b':
        return b

print re.sub('\[\[:(.+?):\]\]', repl, text)
</snippet></ROW><ROW><id>2095111</id><snippet>for n1, n2 in izip(num, reversed(num)):
    print n1, '\t', n2
</snippet></ROW><ROW><id>2095380</id><snippet>__init__</snippet></ROW><ROW><id>2095380</id><snippet>def __init__(self, *args, **kwargs):
    self.userN = kwargs.pop('userN', None)
    super(SearchForm,self).__init__(*args,**kwargs)
    ...etc...
</snippet></ROW><ROW><id>2095463</id><snippet>/blog/</snippet></ROW><ROW><id>2095463</id><snippet>myapp/urls.py</snippet></ROW><ROW><id>2095463</id><snippet>/job/</snippet></ROW><ROW><id>2095463</id><snippet>myapp/job_urls.py</snippet></ROW><ROW><id>2095463</id><snippet>urls</snippet></ROW><ROW><id>2095463</id><snippet>urlpatterns = patterns("myproject.myapp.views",
    (r"^jobs/(?P&lt;id&gt;\d+)/edit/$",    "myproject.myapp.views.edit"),
    (r"^jobs/(?P&lt;id&gt;\d+)/delete/$",  "myproject.myapp.views.delete"),
    (r"^jobs/(?P&lt;id&gt;\d+)/update/$",  "myproject.myapp.views.update"),
    (r"^jobs/insert/$",              "myproject.myapp.views.insert"),
)

urlpatterns += patterns("",
    (r"^blog/(?P&lt;object_id&gt;\d+)/$",  "django.views.generic.list_detail.object_detail", info_dict, "NOIDEA-detail"),
    (r"^blog/$",                    "django.views.generic.list_detail.object_list",   info_dict, "NOIDEA-community"),
)
</snippet></ROW><ROW><id>2095463</id><snippet>urlpatterns = patterns("",
    (r"", include("myapp.urls")),
)
</snippet></ROW><ROW><id>2095463</id><snippet>blog/(?P&lt;post_id&gt;\d+)/edit/$</snippet></ROW><ROW><id>2095622</id><snippet>apt-cache search beautifulsoup
</snippet></ROW><ROW><id>2095622</id><snippet>python-beautifulsoup - error-tolerant HTML parser for Python
</snippet></ROW><ROW><id>2095622</id><snippet>sudo apt-get install python-beautifulsoup
</snippet></ROW><ROW><id>2095622</id><snippet>import BeautifulSoup 
</snippet></ROW><ROW><id>2095838</id><snippet>itertools</snippet></ROW><ROW><id>2095838</id><snippet>itertools</snippet></ROW><ROW><id>2095925</id><snippet>from django.utils import simplejson
from django.core import serializers
from django.db.models.query import QuerySet

class HandleQuerySets(simplejson.JSONEncoder):
     """ simplejson.JSONEncoder extension: handle querysets """
     def default(self, obj):
         if isinstance(obj, QuerySet):
             return serializers.serialize("python", obj, ensure_ascii=False)
         return simplejson.JSONEncoder.default(self, obj)
</snippet></ROW><ROW><id>2095925</id><snippet>serializers.serialize("json", [...])</snippet></ROW><ROW><id>2095925</id><snippet>python</snippet></ROW><ROW><id>2095925</id><snippet>default</snippet></ROW><ROW><id>2095942</id><snippet>from twisted.words.xish import domish

class ElementParser(object):
    "callable class to parse XML string into Element"

    def __call__(self, s):
        self.result = None
        def onStart(el):
            self.result = el
        def onEnd():
            pass
        def onElement(el):
            self.result.addChild(el)

        parser = domish.elementStream()
        parser.DocumentStartEvent = onStart
        parser.ElementEvent = onElement
        parser.DocumentEndEvent = onEnd
        tmp = domish.Element(("", "s"))
        tmp.addRawXml(s)
        parser.parse(tmp.toXml())
        return self.result.firstChildElement() 
</snippet></ROW><ROW><id>2095948</id><snippet>sys.modules['mod_x']</snippet></ROW><ROW><id>2095948</id><snippet>mod_x.x</snippet></ROW><ROW><id>2095948</id><snippet>getattr(sys.modules[a], b)</snippet></ROW><ROW><id>2095948</id><snippet>a</snippet></ROW><ROW><id>2095948</id><snippet>b</snippet></ROW><ROW><id>2095948</id><snippet>'mod_x'</snippet></ROW><ROW><id>2095948</id><snippet>'x'</snippet></ROW><ROW><id>2095976</id><snippet>/bin/sh/</snippet></ROW><ROW><id>2095976</id><snippet>&lt;&lt;EOF</snippet></ROW><ROW><id>2095976</id><snippet>EOF</snippet></ROW><ROW><id>2095976</id><snippet>/Library/Frameworks/Python.framework/Versions/Current/bin/python &lt;&lt;EOF
from appscript import *
Numbers = app('Numbers')
EOF
</snippet></ROW><ROW><id>2095976</id><snippet>/Library/Frameworks/Python.framework/Versions/Current/bin/python</snippet></ROW><ROW><id>2095976</id><snippet>&lt;&lt;EOF</snippet></ROW><ROW><id>2095976</id><snippet>EOF</snippet></ROW><ROW><id>2095976</id><snippet>appscript</snippet></ROW><ROW><id>2095976</id><snippet>{query}</snippet></ROW><ROW><id>2095976</id><snippet>/Library/Frameworks/Python.framework/Versions/Current/bin/python script.py {query}
</snippet></ROW><ROW><id>2096071</id><snippet>&lt;Class&gt;.&lt;method&gt;(&lt;args&gt;)</snippet></ROW><ROW><id>2096344</id><snippet>psyco</snippet></ROW><ROW><id>2096344</id><snippet>cython</snippet></ROW><ROW><id>2096538</id><snippet>DictReader</snippet></ROW><ROW><id>2096538</id><snippet>&gt;&gt;&gt; help(csv.DictReader)</snippet></ROW><ROW><id>2096538</id><snippet>fieldnames</snippet></ROW><ROW><id>2096714</id><snippet>izip(xrange(n - r + 1, n+1), xrange(1, r+1))</snippet></ROW><ROW><id>2096714</id><snippet>from itertools import izip

reduce(lambda x, y: x * y[0] / y[1], izip(xrange(n - r + 1, n+1), xrange(1, r+1)), 1)
</snippet></ROW><ROW><id>2096985</id><snippet>InlineAdmin</snippet></ROW><ROW><id>2096985</id><snippet>template</snippet></ROW><ROW><id>2096985</id><snippet>InlineAdmin</snippet></ROW><ROW><id>2096985</id><snippet>django/contrib/admin/templates/admin/edit_inline/tabular.html</snippet></ROW><ROW><id>2096985</id><snippet>{% for inline_admin_form in
inline_admin_formset %}</snippet></ROW><ROW><id>2096985</id><snippet>{% if not inline_admin_form.original %}</snippet></ROW><ROW><id>2096985</id><snippet>{% endif %}</snippet></ROW><ROW><id>2096985</id><snippet>{% endfor %}</snippet></ROW><ROW><id>2096985</id><snippet>curl</snippet></ROW><ROW><id>2096985</id><snippet>tabular.html</snippet></ROW><ROW><id>2096985</id><snippet>{% load i18n %}
&lt;div class="inline-group"&gt;
  &lt;div class="tabular inline-related {% if forloop.last %}last-related{% endif %}"&gt;
{{ inline_admin_formset.formset.management_form }}
&lt;fieldset class="module"&gt;
   &lt;h2&gt;{{ inline_admin_formset.opts.verbose_name_plural|capfirst }}&lt;/h2&gt;
   {{ inline_admin_formset.formset.non_form_errors }}
   &lt;table&gt;
     &lt;thead&gt;&lt;tr&gt;
     {% for field in inline_admin_formset.fields %}
       {% if not field.is_hidden %}
         &lt;th {% if forloop.first %}colspan="2"{% endif %}&gt;{{ field.label|capfirst }}&lt;/th&gt;
        {% endif %}
     {% endfor %}
     {% if inline_admin_formset.formset.can_delete %}&lt;th&gt;{% trans "Delete?" %}&lt;/th&gt;{% endif %}
     &lt;/tr&gt;&lt;/thead&gt;

     &lt;tbody&gt;
     {% for inline_admin_form in inline_admin_formset %}
     {% if not inline_admin_form.original %}
        {% if inline_admin_form.form.non_field_errors %}
        &lt;tr&gt;&lt;td colspan="{{ inline_admin_form.field_count }}"&gt;{{ inline_admin_form.form.non_field_errors }}&lt;/td&gt;&lt;/tr&gt;
        {% endif %}
        &lt;tr class="{% cycle row1,row2 %} {% if inline_admin_form.original or inline_admin_form.show_url %}has_original{% endif %}"&gt;

        &lt;td class="original"&gt;
          {% if inline_admin_form.original or inline_admin_form.show_url %}&lt;p&gt;
          {% if inline_admin_form.original %} {{ inline_admin_form.original }}{% endif %}
          {% if inline_admin_form.show_url %}&lt;a href="../../../r/{{ inline_admin_form.original_content_type_id }}/{{ inline_admin_form.original.id }}/"&gt;{% trans "View on site" %}&lt;/a&gt;{% endif %}
            &lt;/p&gt;{% endif %}
          {% if inline_admin_form.has_auto_field %}{{ inline_admin_form.pk_field.field }}{% endif %}
          {{ inline_admin_form.fk_field.field }}
          {% spaceless %}
          {% for fieldset in inline_admin_form %}
            {% for line in fieldset %}
              {% for field in line %}
                {% if field.is_hidden %} {{ field.field }} {% endif %}
              {% endfor %}
            {% endfor %}
          {% endfor %}
          {% endspaceless %}
        &lt;/td&gt;

        {% for fieldset in inline_admin_form %}
          {% for line in fieldset %}
            {% for field in line %}
              &lt;td class="{{ field.field.name }}"&gt;
              {{ field.field.errors.as_ul }}
              {{ field.field }}
              &lt;/td&gt;
            {% endfor %}
          {% endfor %}
        {% endfor %}

        {% if inline_admin_formset.formset.can_delete %}
          &lt;td class="delete"&gt;{% if inline_admin_form.original %}{{ inline_admin_form.deletion_field.field }}{% endif %}&lt;/td&gt;
        {% endif %}

        &lt;/tr&gt;

     {% endif %}
     {% endfor %}
     &lt;/tbody&gt;
   &lt;/table&gt;

&lt;/fieldset&gt;
  &lt;/div&gt;

  {# &lt;ul class="tools"&gt; #}
  {#   &lt;li&gt;&lt;a class="add" href=""&gt;Add another {{ inline_admin_formset.opts.verbose_name|title }}&lt;/a&gt;&lt;/li&gt; #}
  {# &lt;/ul&gt; #}

&lt;/div&gt;
</snippet></ROW><ROW><id>2097226</id><snippet>m = line.split("¬")[2].split()
firstname = m[0]
surname = m[-1]
initials = m[1:-1] # Maybe just keep this as a list?
</snippet></ROW><ROW><id>2097226</id><snippet>m = line.split("¬")[4].split()
city = ' '.join(m[:-2])
state = m[-2]
zipCode = m[-1]
</snippet></ROW><ROW><id>2097376</id><snippet>book = models.Book(title='Foo')
chapter = models.Chapter(parent=book, title='dummy')
form = forms.ChapterForm(request.POST, request.FILES, instance=chapter)
</snippet></ROW><ROW><id>2097376</id><snippet>chapter</snippet></ROW><ROW><id>2097376</id><snippet>instance</snippet></ROW><ROW><id>2097376</id><snippet>if form.is_valid():
    chapter = form.save()
    # Now chapter.parent() == book
</snippet></ROW><ROW><id>2097532</id><snippet>UTF-n</snippet></ROW><ROW><id>2097532</id><snippet>n</snippet></ROW><ROW><id>2097532</id><snippet>import unicodedata as ucd
import sys

def dump_encoding(enc):
    for i in xrange(sys.maxunicode):
        u = unichr(i)
        try:
            s = u.encode(enc)
        except UnicodeEncodeError:
            continue
        try:
            name = ucd.name(u)
        except:
            name = '?'
        print "U+%06X %r %s" % (i, s, name)

if __name__ == "__main__":
    dump_encoding(sys.argv[1])
</snippet></ROW><ROW><id>2097532</id><snippet>cp1252</snippet></ROW><ROW><id>2097551</id><snippet>sql='SELECT x FROM myTable WHERE x LIKE %s'
args=[beginningOfString+'%']
cursor.execute(sql,args)
</snippet></ROW><ROW><id>2097617</id><snippet>values</snippet></ROW><ROW><id>2097617</id><snippet>values = {
    'error_message': 'there is an error',
    ...
</snippet></ROW><ROW><id>2097640</id><snippet>if not self.multiline and value and value.find('\n') != -1:
  raise BadValueError('Property %s is not multi-line' % self.name)
</snippet></ROW><ROW><id>2097640</id><snippet>\n</snippet></ROW><ROW><id>2097640</id><snippet>value</snippet></ROW><ROW><id>2097640</id><snippet>logging.info('value is: %r', value)
</snippet></ROW><ROW><id>2097640</id><snippet>put</snippet></ROW><ROW><id>2097640</id><snippet>%r</snippet></ROW><ROW><id>2097640</id><snippet>repr</snippet></ROW><ROW><id>2097640</id><snippet>\n</snippet></ROW><ROW><id>2097679</id><snippet>def convert_string(s):
    try:
        u = s.decode("utf-8")
    except UnicodeDecodeError:
        u = s.decode("cp1252")
    return u

conn.text_factory = convert_string
</snippet></ROW><ROW><id>2097905</id><snippet>FILE_BEGIN_ALLOW_THREADS(f)
FLOCKFILE(fp);

while ((c = GETC(fp)) != EOF &amp;&amp;
       (*buf++ = c) != '\n' &amp;&amp;
       buf != end)
       ;
FUNLOCKFILE(fp);
FILE_END_ALLOW_THREADS(f)
</snippet></ROW><ROW><id>2097905</id><snippet>#ifdef HAVE_GETC_UNLOCKED
#define GETC(f) getc_unlocked(f)
#define FLOCKFILE(f) flockfile(f)
#define FUNLOCKFILE(f) funlockfile(f)
#else
#define GETC(f) getc(f)
#define FLOCKFILE(f)
#define FUNLOCKFILE(f)
#endif
</snippet></ROW><ROW><id>2098074</id><snippet>s = SimpleXMLRPCServer.SimpleXMLRPCServer(("", 8000))
</snippet></ROW><ROW><id>2098142</id><snippet>&gt;&gt;&gt; myhtml = """ &lt;tag&gt;I need this stuff&lt;/tag&gt;
... blah blah
... &lt;tag&gt;I need this stuff too
... &lt;/tag&gt;
... blah blah """
&gt;&gt;&gt; for item in myhtml.split("&lt;/tag&gt;"):
...   if "&lt;tag&gt;" in item:
...       print item [ item.find("&lt;tag&gt;")+len("&lt;tag&gt;") : ]
...
I need this stuff
I need this stuff too
</snippet></ROW><ROW><id>2098216</id><snippet>def add_to(amount):
    def f(x):
        return x + amount
    return f

if __name__ == "__main__":
    add_2 = add_to(2)
    add_3 = add_to(3)

    print add_2(42)
    print add_3(42)
</snippet></ROW><ROW><id>2098216</id><snippet>def create_toy(self, fun_0_3, fun_3_4, fun_4_7, fun_7_9, fun_9_plus):
    def toy(self):
        self.happiness_num = float(self.happiness)
        if float(self.age) &lt;= 3.0:
            self.happiness_num = self.happiness_num + fun_0_3
        elif float(self.age) &gt; 3.0 and float(self.age) &lt; 4.0:
            self.happiness_num = self.happiness_num + fun_3_4
        elif float(self.age) &gt; 4.0 and float(self.age) &lt; 7.0:
            self.happiness_num = self.happiness_num + fun_4_7
        elif float(self.age) &gt; 7.0 and float(self.age) &lt; 9.0:
            self.happiness_num = self.happiness_num + fun_7_9
        elif float(self.age) &gt; 9.0:
            self.happiness_num = self.happiness_num + fun_9_plus
            gui.msgbox(
                msg = 'This toy is Only providing minimal fun to your potato head. Either get a new one or play with another!',
                title = 'WARNING!',
                ok_button = 'Understood')
        self.happiness = str(self.happiness_num)
    return toy

#somewhere else
play_Softball = create_toy(0.3, 0.7, 1.0, 0.5, 0.02)
</snippet></ROW><ROW><id>2098251</id><snippet>def main():
    usage = "Usage: %prog [options] FILE"
    description = "Read data from FILE."
    parser = OptionParser(usage, description=description)

    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.error("incorrect number of arguments")

    file = args[0]
    checkall(file)
</snippet></ROW><ROW><id>2098509</id><snippet>import pythoncom, pyHook 

def OnKeyboardEvent(event):
  print 'MessageName:',event.MessageName
  print 'Message:',event.Message
  print 'Time:',event.Time
  print 'Window:',event.Window
  print 'WindowName:',event.WindowName
  print 'Ascii:', event.Ascii, chr(event.Ascii)
  print 'Key:', event.Key
  print 'KeyID:', event.KeyID
  print 'ScanCode:', event.ScanCode
  print 'Extended:', event.Extended
  print 'Injected:', event.Injected
  print 'Alt', event.Alt
  print 'Transition', event.Transition
  print '---'

# return True to pass the event to other handlers
  return True

# create a hook manager
hm = pyHook.HookManager()
# watch for all mouse events
hm.KeyDown = OnKeyboardEvent
# set the hook
hm.HookKeyboard()
# wait forever
pythoncom.PumpMessages()
</snippet></ROW><ROW><id>2098542</id><snippet>import thread
import threading

class Operation(threading._Timer):
    def __init__(self, *args, **kwargs):
        threading._Timer.__init__(self, *args, **kwargs)
        self.setDaemon(True)

    def run(self):
        while True:
            self.finished.clear()
            self.finished.wait(self.interval)
            if not self.finished.isSet():
                self.function(*self.args, **self.kwargs)
            else:
                return
            self.finished.set()

class Manager(object):

    ops = []

    def add_operation(self, operation, interval, args=[], kwargs={}):
        op = Operation(interval, operation, args, kwargs)
        self.ops.append(op)
        thread.start_new_thread(op.run, ())

    def stop(self):
        for op in self.ops:
            op.cancel()
        self._event.set()

if __name__ == '__main__':
    # Print "Hello World!" every 5 seconds

    import time

    def hello():
        print "Hello World!"

    timer = Manager()
    timer.add_operation(hello, 5)

    while True:
        time.sleep(.1)
</snippet></ROW><ROW><id>2098624</id><snippet>json</snippet></ROW><ROW><id>2098624</id><snippet>simplejson</snippet></ROW><ROW><id>2098655</id><snippet>import urllib2
req = urllib2.Request('http://www.example.com/')
req.add_header('Referer', 'http://www.python.org/')
r = urllib2.urlopen(req)
</snippet></ROW><ROW><id>2098996</id><snippet>def merged(dictoflists):
  result = dict()
  reversed = dict()
  for k, l in dictoflists.iteritems():
    intersecting = set(reversed.get(w) for w in l) - set([None])
    if intersecting:
      pickone = intersecting.pop()
      into = result[pickone]
    else:
      pickone = k
      into = result[k] = set()
    for ok in intersecting:
      into.update(result.pop(ok))
    into.update(l)
    for w in into:
      reversed[w] = pickone
  return dict((k, sorted(l)) for k, l in result.iteritems())
</snippet></ROW><ROW><id>2098996</id><snippet>set</snippet></ROW><ROW><id>2099009</id><snippet>__amf__</snippet></ROW><ROW><id>2099009</id><snippet>class Question(db.Model):
    class __amf__:
        static = ('answers',)

    questionText = db.StringProperty(multiline=False)

class Answer(db.Model):
    answertText = db.StringProperty(multiline=False)
    question = db.ReferenceProperty(Question, collection_name='answers')
</snippet></ROW><ROW><id>2099009</id><snippet>Question</snippet></ROW><ROW><id>2099009</id><snippet>answers</snippet></ROW><ROW><id>2099009</id><snippet>getattr</snippet></ROW><ROW><id>2099193</id><snippet>class Article(model.Model):
    ...
    author = models.ForeignKey(Author, related_name='articles')
</snippet></ROW><ROW><id>2099193</id><snippet>article.author_set
</snippet></ROW><ROW><id>2099193</id><snippet>article.authors</snippet></ROW><ROW><id>2099193</id><snippet>related_name</snippet></ROW><ROW><id>2099278</id><snippet>x = scipy.array([10, 11, 12, 13])</snippet></ROW><ROW><id>2099278</id><snippet>y = scipy.array([0, 2])</snippet></ROW><ROW><id>2099278</id><snippet>x[[0, 2]]</snippet></ROW><ROW><id>2099278</id><snippet>x[y]</snippet></ROW><ROW><id>2099278</id><snippet>new_data = scipy.delete(data, x, axis=0)</snippet></ROW><ROW><id>2099278</id><snippet>(data&gt;=0).sum(axis=1)</snippet></ROW><ROW><id>2099278</id><snippet>axis</snippet></ROW><ROW><id>2099278</id><snippet>delete</snippet></ROW><ROW><id>2099793</id><snippet>functools.wraps(wrapped[, assigned][, updated]) 
</snippet></ROW><ROW><id>2099793</id><snippet>partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)</snippet></ROW><ROW><id>2099793</id><snippet>&gt;&gt;&gt; from functools import wraps
&gt;&gt;&gt; def my_decorator(f):
...     @wraps(f)
...     def wrapper(*args, **kwds):
...         print 'Calling decorated function'
...         return f(*args, **kwds)
...     return wrapper
...
&gt;&gt;&gt; @my_decorator
... def example():
...     """Docstring"""
...     print 'Called example function'
...
&gt;&gt;&gt; example()
Calling decorated function
Called example function
&gt;&gt;&gt; example.__name__
'example'
&gt;&gt;&gt; example.__doc__
'Docstring'
</snippet></ROW><ROW><id>2100070</id><snippet>def delayed_loader(*args, **kwargs):
    """
    Replace each real_* function with the corresponding function from either
    trans_real or trans_null (e.g. real_gettext is replaced with
    trans_real.gettext or trans_null.gettext). This function is run once, the
    first time any i18n method is called. It replaces all the i18n methods at
    once at that time.
    """
    #...
</snippet></ROW><ROW><id>2100384</id><snippet>sortedlist = sorted(reader, key=operator.itemgetter(3), reverse=True)
</snippet></ROW><ROW><id>2100611</id><snippet>&gt;&gt;&gt; a = ['stste', 'setset', 'serthjsetj']
&gt;&gt;&gt; b = json.dumps(a)
&gt;&gt;&gt; b
'["stste", "setset", "serthjsetj"]'
&gt;&gt;&gt; json.loads(b)
[u'stste', u'setset', u'serthjsetj']
</snippet></ROW><ROW><id>2100620</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>2100620</id><snippet>subprocess.call()</snippet></ROW><ROW><id>2100620</id><snippet>open(fifo)</snippet></ROW><ROW><id>2100620</id><snippet>os.popen('cat ' + fifo)</snippet></ROW><ROW><id>2100620</id><snippet>p = Popen(['patch', '--input', fpath], stdout=PIPE)</snippet></ROW><ROW><id>2100781</id><snippet>[a, b] = [1, 2]
</snippet></ROW><ROW><id>2101113</id><snippet>http://server/getresults/uniqueid/</snippet></ROW><ROW><id>2101407</id><snippet>d = {
    'A' : {
        'C' : {
            'D' : {
                'E' : 4,
            },
            'F' : 5,
        },
    },
    'B' : 2,
}

def DeepDictDel(path, dict):
    for key in path.split('.'):
        owner = dict
        dict = dict[key]

    del owner[key]


print d # prints {'A': {'C': {'D': {'E': 4}, 'F': 5}}, 'B': 2}
DeepDictDel('A.C.D', d)
print d # prints {'A': {'C': {'F': 5}}, 'B': 2}
</snippet></ROW><ROW><id>2101448</id><snippet>fin,fout=os.popen4("wget --version | grep Wget")
print fout.read()
</snippet></ROW><ROW><id>2101448</id><snippet>subprocess</snippet></ROW><ROW><id>2101448</id><snippet>import subprocess
cmd = subprocess.Popen('wget --version', shell=True, stdout=subprocess.PIPE)
for line in cmd.stdout:
    if "Wget" in line:
        print line
</snippet></ROW><ROW><id>2101712</id><snippet>from django.test.client import Client
c = Client()
response = c.get('/json_view/', {'tag': 'email', 'email': '...'})
</snippet></ROW><ROW><id>2101992</id><snippet>getpass</snippet></ROW><ROW><id>2101992</id><snippet>from getpass import getpass
password = getpass()
</snippet></ROW><ROW><id>2102001</id><snippet>class SuperState( object ):
    def someStatefulMethod( self ):
        raise NotImplementedError()
    def transitionRule( self, input ):
        raise NotImplementedError()

class SomeState( SuperState ):
    def someStatefulMethod( self ):
        actually do something()
    def transitionRule( self, input ):
        return NextState()
</snippet></ROW><ROW><id>2102001</id><snippet>eval</snippet></ROW><ROW><id>2102001</id><snippet>class State( object ):
    def transitionRule( self, input ):
        return eval(self.map[input])()

class S1( State ): 
    map = { "input": "S2", "other": "S3" }
    pass # Overrides to state-specific methods

class S2( State ):
    map = { "foo": "S1", "bar": "S2" }

class S3( State ):
    map = { "quux": "S1" }
</snippet></ROW><ROW><id>2102001</id><snippet>class State( object ):
    def transitionRule( self, input ):
        next_states = [ s for f,s in self.map if f(input)  ]
        assert len(next_states) &gt;= 1, "faulty transition rule"
        return eval(next_states[0])()

class S1( State ):
    map = [ (lambda x: x == "input", "S2"), (lambda x: x == "other", "S3" ) ]

class S2( State ):
    map = [ (lambda x: "bar" &lt;= x &lt;= "foo", "S3"), (lambda x: True, "S1") ]
</snippet></ROW><ROW><id>2102262</id><snippet>multiprocessing</snippet></ROW><ROW><id>2102262</id><snippet>threading</snippet></ROW><ROW><id>2102262</id><snippet>threading</snippet></ROW><ROW><id>2102315</id><snippet>warnings</snippet></ROW><ROW><id>2102315</id><snippet>warnings.filterwarnings('error', category=MySQLdb.Warning)</snippet></ROW><ROW><id>2102315</id><snippet>MySQLdb.Warning warnings</snippet></ROW><ROW><id>2102315</id><snippet>'ignore'</snippet></ROW><ROW><id>2102365</id><snippet>manage.py</snippet></ROW><ROW><id>2102365</id><snippet>notifications</snippet></ROW><ROW><id>2102365</id><snippet># set up the environment using the settings module
from django.core.management import setup_environ
from myapp import settings
setup_environ(settings)
</snippet></ROW><ROW><id>2102380</id><snippet>map</snippet></ROW><ROW><id>2102380</id><snippet>if __name__ == "__main__":
    print p.map(f, [1,2,3])
</snippet></ROW><ROW><id>2102476</id><snippet>\</snippet></ROW><ROW><id>2102476</id><snippet>subprocess.Popen('rd /s /q .\\ProcessControlSimulator\\bin', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>2103337</id><snippet>&gt;&gt;&gt; urllib.quote("Tabula Rasa")
'Tabula%20Rasa'
</snippet></ROW><ROW><id>2103567</id><snippet>Users</snippet></ROW><ROW><id>2103567</id><snippet>def __iter__(self):
    return iter(self.users)
</snippet></ROW><ROW><id>2103567</id><snippet>for u in users:
    print u.email
</snippet></ROW><ROW><id>2104107</id><snippet>os.stat</snippet></ROW><ROW><id>2104107</id><snippet>st_size</snippet></ROW><ROW><id>2104107</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; statinfo = os.stat('somefile.txt')
&gt;&gt;&gt; statinfo
(33188, 422511L, 769L, 1, 1032, 100, 926L, 1105022698,1105022732, 1105022732)
&gt;&gt;&gt; statinfo.st_size
926L
</snippet></ROW><ROW><id>2104111</id><snippet>labels = dict(choices)
label = labels[some_int]
</snippet></ROW><ROW><id>2104111</id><snippet>labels</snippet></ROW><ROW><id>2104258</id><snippet>subprocess</snippet></ROW><ROW><id>2104258</id><snippet>multiprocessing</snippet></ROW><ROW><id>2104258</id><snippet>threading</snippet></ROW><ROW><id>2104348</id><snippet>for item in z:</snippet></ROW><ROW><id>2104348</id><snippet>z</snippet></ROW><ROW><id>2104348</id><snippet>item</snippet></ROW><ROW><id>2104348</id><snippet>z</snippet></ROW><ROW><id>2104348</id><snippet>item</snippet></ROW><ROW><id>2104348</id><snippet>item = [0,1,2,3,4,5,6,7,8,9]

for element in item:
    if element not in z:
        print element
</snippet></ROW><ROW><id>2104348</id><snippet>set(item) - set(z)
</snippet></ROW><ROW><id>2104485</id><snippet>C     T     :INOUT  Value of the independent variable.  On return it
C                   will be the current value of t (normally TOUT).
C
C     TOUT  :IN     Next point where output is desired (.NE. T).
</snippet></ROW><ROW><id>2104699</id><snippet>ndim</snippet></ROW><ROW><id>2104699</id><snippet>ndim</snippet></ROW><ROW><id>2104699</id><snippet>ufunc</snippet></ROW><ROW><id>2104699</id><snippet>shape mismatch</snippet></ROW><ROW><id>2104791</id><snippet>django.contrib.humanize.templatetags.humanize</snippet></ROW><ROW><id>2104804</id><snippet>from django.db.models import F
Book.objects.all().update(activity=F('views')*4)
</snippet></ROW><ROW><id>2104804</id><snippet>for book in Book.objects.all().iterator():
    Book.objects.filter(pk=book.pk).update(activity=book.calculate_activity())
</snippet></ROW><ROW><id>2104947</id><snippet>int</snippet></ROW><ROW><id>2104947</id><snippet>long</snippet></ROW><ROW><id>2104947</id><snippet>sys.maxint</snippet></ROW><ROW><id>2104965</id><snippet>item = [1,2,3,4,5,6,7,8,9]
for element in item:
    if element not in z:
            print element
            break

data[x][y] = element 
print data[x][y]
</snippet></ROW><ROW><id>2104992</id><snippet>QThread::exec()</snippet></ROW><ROW><id>2104992</id><snippet>asyncore.loop()</snippet></ROW><ROW><id>2105019</id><snippet>self.fields['nut'].queryset = Nut.objects.exclude(
    pk__in=Bolt.objects.values('nut').query)
</snippet></ROW><ROW><id>2105019</id><snippet>pk__in=Bolt.objects.values('nut')
pk__in=Bolt.objects.values_list('nut')
pk__in=Bolt.objects.values('nut').query
</snippet></ROW><ROW><id>2105019</id><snippet>.query</snippet></ROW><ROW><id>2105155</id><snippet>
from operator import mul
reduce(mul, list, 1)
</snippet></ROW><ROW><id>2105155</id><snippet>
from operator import mul
# from functools import reduce # python3 compatibility

def with_lambda(list):
    reduce(lambda x, y: x * y, list)

def without_lambda(list):
    reduce(mul, list)

import timeit

a = range(100)
t = timeit.Timer("with_lambda(a)", "from __main__ import with_lambda,a")
print("with lambda:", t.timeit())
t = timeit.Timer("without_lambda(a)", "from __main__ import without_lambda,a")
print("without lambda:", t.timeit())
</snippet></ROW><ROW><id>2105183</id><snippet>tput</snippet></ROW><ROW><id>2105183</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>2105183</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; tput = subprocess.Popen(['tput', 'cols'], stdout=subprocess.PIPE)
&gt;&gt;&gt; int(tput.communicate()[0].strip())
180
</snippet></ROW><ROW><id>2105183</id><snippet>$COLUMNS</snippet></ROW><ROW><id>2105183</id><snippet>&gt;&gt;&gt; tput = subprocess.Popen(['echo $COLUMNS'], shell=True, stdout=subprocess.PIPE)
&gt;&gt;&gt; int(tput.communicate()[0].strip())
180
</snippet></ROW><ROW><id>2105183</id><snippet>&gt;&gt;&gt; import curses
&gt;&gt;&gt; curses.setupterm()
&gt;&gt;&gt; curses.tigetnum('cols')
180
</snippet></ROW><ROW><id>2105183</id><snippet>setupterm</snippet></ROW><ROW><id>2105183</id><snippet>tigetnum</snippet></ROW><ROW><id>2105535</id><snippet>set</snippet></ROW><ROW><id>2105535</id><snippet>layout.html</snippet></ROW><ROW><id>2105535</id><snippet>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd"&gt;
&lt;html&gt;
  &lt;title&gt;{{ title }} | Site.com&lt;/title&gt;
  ....
  {% block content %}{% endblock content %}
  ....
&lt;/html&gt;
</snippet></ROW><ROW><id>2105535</id><snippet>index.html</snippet></ROW><ROW><id>2105535</id><snippet>{% extends "layout.html" %}
{% set title = 'Homepage' %}
{% block content %}
(html code here)
{% endblock content %}
</snippet></ROW><ROW><id>2105535</id><snippet>title</snippet></ROW><ROW><id>2105535</id><snippet>'Homepage'</snippet></ROW><ROW><id>2105538</id><snippet>while True:</snippet></ROW><ROW><id>2105538</id><snippet>dostuff</snippet></ROW><ROW><id>2105538</id><snippet>False</snippet></ROW><ROW><id>2105585</id><snippet>a = int(''.join(str(i) for i in a)) 
</snippet></ROW><ROW><id>2105585</id><snippet>long</snippet></ROW><ROW><id>2105585</id><snippet>Python</snippet></ROW><ROW><id>2105585</id><snippet>long</snippet></ROW><ROW><id>2105585</id><snippet>a</snippet></ROW><ROW><id>2105585</id><snippet>s</snippet></ROW><ROW><id>2105585</id><snippet>s = str(a)</snippet></ROW><ROW><id>2105585</id><snippet>a = int(''.join(str(i) for i in s))
</snippet></ROW><ROW><id>2105637</id><snippet>times</snippet></ROW><ROW><id>2105637</id><snippet>global</snippet></ROW><ROW><id>2105637</id><snippet>def timeit():
    global times # &lt;- global declaration
    # ...
</snippet></ROW><ROW><id>2105637</id><snippet>global</snippet></ROW><ROW><id>2105637</id><snippet>times</snippet></ROW><ROW><id>2105656</id><snippet>PS&gt; chcp 65001
PS&gt; ipy64.exe
&gt;&gt;&gt; print unichr(0x3a9)
Ω
</snippet></ROW><ROW><id>2105656</id><snippet>PS&gt; [char]0xf12
༒
PS&gt; [char]0xe4
ä
PS&gt; [char]0x3a9
Ω
</snippet></ROW><ROW><id>2105656</id><snippet>$src = @'
namespace Foo {
    public class Bar
    {
        public static void Baz()
        {
            System.Console.Out.WriteLine("\u0f12");
            System.Console.Out.WriteLine("\u00e4");
            System.Console.Out.WriteLine("\u03a9");
        }
    }
}
'@

Add-Type -TypeDefinition $src

[Foo.Bar]::Baz()
༒
ä
Ω
</snippet></ROW><ROW><id>2105712</id><snippet>dpkg -l subversion
dpkg -l python-svn
</snippet></ROW><ROW><id>2105761</id><snippet>os.walk()</snippet></ROW><ROW><id>2105761</id><snippet>os.listdir()</snippet></ROW><ROW><id>2105761</id><snippet>os.path.join()</snippet></ROW><ROW><id>2105761</id><snippet>os.path.isdir()</snippet></ROW><ROW><id>2105761</id><snippet>import os
from xml.sax.saxutils import escape as xml_escape

def DirAsXML(path):
    result = '&lt;dir&gt;\n&lt;name&gt;%s&lt;/name&gt;\n' % xml_escape(os.path.basename(path))
    dirs = []
    files = []
    for item in os.listdir(path):
        itempath = os.path.join(path, item)
        if os.path.isdir(itempath):
            dirs.append(item)
        elif os.path.isfile(itempath):
            files.append(item)
    if files:
        result += '  &lt;files&gt;\n' \
            + '\n'.join('    &lt;file&gt;\n      &lt;name&gt;%s&lt;/name&gt;\n    &lt;/file&gt;'
            % xml_escape(f) for f in files) + '\n  &lt;/files&gt;\n'
    if dirs:
        for d in dirs:
            x = DirAsXML(os.path.join(path, d))
            result += '\n'.join('  ' + line for line in x.split('\n'))
    result += '&lt;/dir&gt;'
    return result

if __name__ == '__main__':
    print '&lt;structure&gt;\n' + DirAsXML(os.getcwd()) + '\n&lt;/structure&gt;'
</snippet></ROW><ROW><id>2105761</id><snippet>&lt;files&gt;</snippet></ROW><ROW><id>2105761</id><snippet>import os
from xml.sax.saxutils import quoteattr as xml_quoteattr

def DirAsLessXML(path):
    result = '&lt;dir name=%s&gt;\n' % xml_quoteattr(os.path.basename(path))
    for item in os.listdir(path):
        itempath = os.path.join(path, item)
        if os.path.isdir(itempath):
            result += '\n'.join('  ' + line for line in 
                DirAsLessXML(os.path.join(path, item)).split('\n'))
        elif os.path.isfile(itempath):
            result += '  &lt;file name=%s /&gt;\n' % xml_quoteattr(item)
    result += '&lt;/dir&gt;'
    return result

if __name__ == '__main__':
    print '&lt;structure&gt;\n' + DirAsLessXML(os.getcwd()) + '\n&lt;/structure&gt;'
</snippet></ROW><ROW><id>2105761</id><snippet>&lt;structure&gt;
&lt;dir name="local"&gt;
  &lt;dir name=".hg"&gt;
    &lt;file name="00changelog.i" /&gt;
    &lt;file name="branch" /&gt;
    &lt;file name="branch.cache" /&gt;
    &lt;file name="dirstate" /&gt;
    &lt;file name="hgrc" /&gt;
    &lt;file name="requires" /&gt;
    &lt;dir name="store"&gt;
      &lt;file name="00changelog.i" /&gt;
</snippet></ROW><ROW><id>2105761</id><snippet>os.walk()</snippet></ROW><ROW><id>2105761</id><snippet>expat</snippet></ROW><ROW><id>2105973</id><snippet>self.total_in_dollars</snippet></ROW><ROW><id>2105973</id><snippet>Order</snippet></ROW><ROW><id>2105973</id><snippet>__init__</snippet></ROW><ROW><id>2105973</id><snippet>class</snippet></ROW><ROW><id>2105973</id><snippet>Order</snippet></ROW><ROW><id>2105973</id><snippet>Payment</snippet></ROW><ROW><id>2105973</id><snippet>is_paid</snippet></ROW><ROW><id>2105973</id><snippet>False</snippet></ROW><ROW><id>2105973</id><snippet>Payment</snippet></ROW><ROW><id>2105973</id><snippet>Order</snippet></ROW><ROW><id>2105973</id><snippet>self.order.total_in_dollars</snippet></ROW><ROW><id>2105973</id><snippet>self.amount</snippet></ROW><ROW><id>2105973</id><snippet>property</snippet></ROW><ROW><id>2105973</id><snippet>import weakref

class Payment(object):
  def __init__(self, order):
    self.order = weakref.proxy(order, self.ordergone)
  def ordergone(self, *_):
    self.order = None
  @property
  def amount(self):
    if self.order is None: return None
    else: return self.order.total_in_dollars

class Order(object):
  def __init__(self, amount):
    self.total_in_dollars = amount
    self.is_paid = False
    self._payment = None
  @property
  def payment(self):
    if self._payment is None:
      self._payment = Payment(self)
    return self._payment
</snippet></ROW><ROW><id>2106173</id><snippet>"DownloadError: ApplicationError: 2 something bad"
</snippet></ROW><ROW><id>2106361</id><snippet>httplib</snippet></ROW><ROW><id>2106361</id><snippet>https://</snippet></ROW><ROW><id>2106361</id><snippet>connection</snippet></ROW><ROW><id>2106361</id><snippet>RemotingService</snippet></ROW><ROW><id>2106361</id><snippet>key_file</snippet></ROW><ROW><id>2106361</id><snippet>cert_file</snippet></ROW><ROW><id>2106361</id><snippet>connection</snippet></ROW><ROW><id>2106361</id><snippet>connect</snippet></ROW><ROW><id>2106361</id><snippet>Read 41 bytes for the response</snippet></ROW><ROW><id>2106490</id><snippet>def log_it():
    try:
        1 / 0
    except:
        pass

try:
    this = that
except:
    log_it()
    raise
</snippet></ROW><ROW><id>2106490</id><snippet>try:
    this = that
except NameError, e: # or NameError as e for Python 2.6
    try:
        1 / 0
    except:
        pass
    raise e
</snippet></ROW><ROW><id>2106490</id><snippet>except</snippet></ROW><ROW><id>2106612</id><snippet>/images/filename-120x45.jpg</snippet></ROW><ROW><id>2106612</id><snippet>/images/original_size_image.jpg</snippet></ROW><ROW><id>2106636</id><snippet>example.com</snippet></ROW><ROW><id>2106636</id><snippet>127.0.0.1:8000</snippet></ROW><ROW><id>2106651</id><snippet>arr</snippet></ROW><ROW><id>2106651</id><snippet>arr.resize</snippet></ROW><ROW><id>2106651</id><snippet>arr.resize</snippet></ROW><ROW><id>2106651</id><snippet>python_lists_to_array</snippet></ROW><ROW><id>2106651</id><snippet>numpy_all_the_way</snippet></ROW><ROW><id>2106651</id><snippet>% python -mtimeit -s"import test" "test.numpy_all_the_way(100)"
100 loops, best of 3: 1.78 msec per loop
% python -mtimeit -s"import test" "test.numpy_all_the_way(1000)"
100 loops, best of 3: 18.1 msec per loop
% python -mtimeit -s"import test" "test.numpy_all_the_way(5000)"
10 loops, best of 3: 90.4 msec per loop

% python -mtimeit -s"import test" "test.python_lists_to_array(100)"
1000 loops, best of 3: 1.97 msec per loop
% python -mtimeit -s"import test" "test.python_lists_to_array(1000)"
10 loops, best of 3: 20.3 msec per loop
% python -mtimeit -s"import test" "test.python_lists_to_array(5000)"
10 loops, best of 3: 101 msec per loop
</snippet></ROW><ROW><id>2106651</id><snippet>numpy_all_the_way</snippet></ROW><ROW><id>2106651</id><snippet>% test.py
Initial memory usage: 19788
After python_lists_to_array: 20976
After numpy_all_the_way: 20348
</snippet></ROW><ROW><id>2106651</id><snippet>#!/usr/bin/env python
import numpy as np
import os

def memory_usage():
    pid=os.getpid()
    return next(line for line in open('/proc/%s/status'%pid).read().splitlines()
            if line.startswith('VmSize')).split()[-2]

N,M=5000,10

def python_lists_to_array(k):
    list_of_arrays = map(lambda x: x*np.ones(M), range(k))
    arr = np.array(list_of_arrays)
    return arr

def numpy_all_the_way(k):
    arr=np.empty((N,M))
    for x in range(k):
        arr[x]=x*np.ones(M)
    arr.resize((k,M))
    return arr

if __name__=='__main__':
    print('Initial memory usage: %s'%memory_usage())
    arr=python_lists_to_array(5000)
    print('After python_lists_to_array: %s'%memory_usage())    
    arr=numpy_all_the_way(5000)
    print('After numpy_all_the_way: %s'%memory_usage())    
</snippet></ROW><ROW><id>2106672</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('''&lt;ul class="something"&gt;
... &lt;li id="li_id"&gt;
... &lt;a href="#" title="myurl"&gt;URL Text&lt;/a&gt;
... &lt;/li&gt;
... &lt;/ul&gt;''')
</snippet></ROW><ROW><id>2106672</id><snippet>findAll</snippet></ROW><ROW><id>2106672</id><snippet>&gt;&gt;&gt; soup.findAll(href='#', title='myurl')
[&lt;a href="#" title="myurl"&gt;URL Text&lt;/a&gt;]
</snippet></ROW><ROW><id>2106672</id><snippet>&lt;li class="li_class"&gt;</snippet></ROW><ROW><id>2106672</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup('''&lt;li class="li_class"&gt;
    &lt;a href="#" title="myurl"&gt;URL Text&lt;/a&gt;
    &lt;a href="#" title="myurl2"&gt;URL Text2&lt;/a&gt;&lt;/li&gt;&lt;li class="foo"&gt;
    &lt;a href="#" title="myurl3"&gt;URL Text3&lt;/a&gt;&lt;/li&gt;''') # just some sample html

&gt;&gt;&gt; for elem in soup.findAll("li", "li_class"):
...   pprint(elem.findAll('a')) # requires `from pprint import pprint`
... 
[&lt;a href="#" title="myurl"&gt;URL Text&lt;/a&gt;,
 &lt;a href="#" title="myurl2"&gt;URL Text2&lt;/a&gt;]
</snippet></ROW><ROW><id>2106687</id><snippet>ServiceFramework</snippet></ROW><ROW><id>2106687</id><snippet>path_to_watch</snippet></ROW><ROW><id>2106687</id><snippet>folder</snippet></ROW><ROW><id>2106687</id><snippet>path_to_watch = r"c:\foo\bar" + "\\" 
</snippet></ROW><ROW><id>2106825</id><snippet>seek()</snippet></ROW><ROW><id>2106825</id><snippet>file.seek(0)
</snippet></ROW><ROW><id>2106825</id><snippet>readlines()</snippet></ROW><ROW><id>2106825</id><snippet>file</snippet></ROW><ROW><id>2106858</id><snippet>sqldiiff</snippet></ROW><ROW><id>2106858</id><snippet>sqlall yourapp</snippet></ROW><ROW><id>2107046</id><snippet>def sums(it):
    """
    &gt;&gt;&gt; sums(1)
    1
    &gt;&gt;&gt; sums([1,2,3])
    6
    &gt;&gt;&gt; sums([1,2,3,[4,5]])
    15
    &gt;&gt;&gt; sums(['a','b'])
    Traceback (most recent call last):
    ...
    TypeError: unsupported operand type(s) for +: 'int' and 'str'
    """
    if getattr(it, "__iter__", None):
        return sum(map(sums, it))
    else:
        return it

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>2107332</id><snippet>def __unicode__(self):</snippet></ROW><ROW><id>2107332</id><snippet>pub_date = ...</snippet></ROW><ROW><id>2107332</id><snippet>return ...</snippet></ROW><ROW><id>2107357</id><snippet>cmd</snippet></ROW><ROW><id>2107357</id><snippet>os.system</snippet></ROW><ROW><id>2107357</id><snippet>os.system</snippet></ROW><ROW><id>2107357</id><snippet>&gt; cat phase1.py
#!/usr/bin/python
import os
status = 9
while status == 9:
    status = int(os.system ("./phase2.py") / 256) # exit code is upper 8 bits
    print "Controller: %d"%(status)
</snippet></ROW><ROW><id>2107357</id><snippet>&gt; cat phase2.py
#!/usr/bin/python
import sys
import time
time.sleep(1)
val = int(time.time())%10
if val == 0:
    rc = 0
else:
    rc = 9
print "Program: %d -&gt; %d"%(val,rc)
sys.exit(rc)
</snippet></ROW><ROW><id>2107357</id><snippet>&gt; ./phase1.py
Program: 2 -&gt; 9
Controller: 9
Program: 3 -&gt; 9
Controller: 9
Program: 4 -&gt; 9
Controller: 9
Program: 5 -&gt; 9
Controller: 9
Program: 7 -&gt; 9
Controller: 9
Program: 8 -&gt; 9
Controller: 9
Program: 9 -&gt; 9
Controller: 9
Program: 0 -&gt; 0
Controller: 0
</snippet></ROW><ROW><id>2107570</id><snippet>wx.Window.MakeModal()</snippet></ROW><ROW><id>2107570</id><snippet>Frame</snippet></ROW><ROW><id>2107570</id><snippet>Window</snippet></ROW><ROW><id>2107990</id><snippet>import</snippet></ROW><ROW><id>2107990</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>2108019</id><snippet>update(...)</snippet></ROW><ROW><id>2108019</id><snippet>get(...)</snippet></ROW><ROW><id>2108019</id><snippet>QuerySet</snippet></ROW><ROW><id>2108019</id><snippet>from django.core.management import setup_environ
from register import settings
setup_environ(settings)

from django.contrib.sites.models import Site

obj=Site.objects.get(id=1)
obj.name='sss'
obj.save()
print obj
</snippet></ROW><ROW><id>2108374</id><snippet>example = etree.Element("example")
login = etree.SubElement(example, "login")
password = etree.SubElement(login,"password")
password.text = "newPassword"
</snippet></ROW><ROW><id>2109746</id><snippet>select
fan_count  from
page where
username='michaeljackson'</snippet></ROW><ROW><id>2110367</id><snippet>python renamer.py "Z:\\FolderCollectionInHere" blah.txt csv
</snippet></ROW><ROW><id>2110367</id><snippet>import os
import sys

class Renamer:
    def start(self, args):
        os.chdir(args[1])
        dirs = os.listdir(".")

        for dir in dirs:
            try:
                os.rename(dir + "\\" + args[2], dir + "\\" + dir + "." + args[3])
                print "Renamed file in directory: " + dir
            except Exception:
                print "Couldn't find file to rename in directory: " + dir

Renamer().start(sys.argv)
</snippet></ROW><ROW><id>2110394</id><snippet>user.first_name = u'Rytis'.encode('unicode_escape')
user.last_name = u'Slatkevičius'.encode('unicode_escape')
user.save()
&gt;&gt;&gt; SUCCEED

print user.last_name
&gt;&gt;&gt; Slatkevi\u010dius
print user.last_name.decode('unicode_escape')
&gt;&gt;&gt; Slatkevičius
</snippet></ROW><ROW><id>2110584</id><snippet>manage.py</snippet></ROW><ROW><id>2110584</id><snippet>os.getpid()</snippet></ROW><ROW><id>2110763</id><snippet>~</snippet></ROW><ROW><id>2110763</id><snippet>ubuntu~
</snippet></ROW><ROW><id>2110763</id><snippet>buntu</snippet></ROW><ROW><id>2110763</id><snippet>ubantu</snippet></ROW><ROW><id>2110763</id><snippet>clean_q</snippet></ROW><ROW><id>2110763</id><snippet>search</snippet></ROW><ROW><id>2110777</id><snippet>zfh.write(zip_file_name)
</snippet></ROW><ROW><id>2110777</id><snippet>zfh.write(file)
</snippet></ROW><ROW><id>2110813</id><snippet>unique_together</snippet></ROW><ROW><id>2110813</id><snippet>class Item(models.Model):
    name = models.CharField(max_length = 200, blank = False)

class Player(models.Model):
    items = models.ManyToManyField(Item, through='PlayerItem')

class PlayerItem(models.Model):
    player = models.ForeignKey(Player)
    item = models.ForeignKey(Item)
    quantity = models.IntegerField(default=1)

    class Meta:
        unique_together = ('player', 'item')
</snippet></ROW><ROW><id>2110813</id><snippet>class Item(models.Model):
    name = models.CharField(max_length = 200, blank = False)

class Player(models.Model):
    items = models.ManyToManyField(Item, through='PlayerItem')

class PlayerItem(models.Model):
    player = models.ForeignKey(Player)
    item = models.ForeignKey(Item)
    acquired = models.DateTimeField(default=datetime.datetime.now)
</snippet></ROW><ROW><id>2110813</id><snippet>count()</snippet></ROW><ROW><id>2110813</id><snippet>PlayerItem</snippet></ROW><ROW><id>2110813</id><snippet>Item</snippet></ROW><ROW><id>2110813</id><snippet>Player</snippet></ROW><ROW><id>2110813</id><snippet>PlayerItem</snippet></ROW><ROW><id>2110844</id><snippet>for i in range(len(somelist)):
   something( somelist[i] )
</snippet></ROW><ROW><id>2110844</id><snippet>for x in somelist: 
    something( x )
</snippet></ROW><ROW><id>2110844</id><snippet>def GetSteamAccts():
    Steamapp_Folders = [f for f in ("C:\\Program Files (x86)\\Steam\\steamapps\\", 
                                    "C:\\Program Files\\Steam\\steamapps\\") 
                          if os.path.isdir(f)]
    return [os.path.join(root, folder) 
                    for root in Steamapp_Folders 
                    for folder in os.listdir(root) 
                    if os.path.isdir( os.path.join(root, folder)) ]
</snippet></ROW><ROW><id>2110844</id><snippet>def subfoldernames( root ):
    for folder in os.listdir(root):
        path = os.path.join(root, folder)
        if os.path.isdir(path):
            yield folder # just the name, not the path

# same, just shorter:
def subfoldernames( root ):
    # this returns a generator, written as a generator expression
    return ( folder for folder in os.listdir( root ) 
                    if os.path.isdir(os.path.join( root, folder )) )

def GetSteamAccts():
        Steamapp_Folders = ("C:\\Program Files (x86)\\Steam\\steamapps\\", 
                                             "C:\\Program Files\\Steam\\steamapps\\")
        for folder in Steamapp_Folders:
            if os.path.isdir(folder):
                # only the subfolders of the first path that exists are returned
                return list(subfoldernames( folder )) 
</snippet></ROW><ROW><id>2111223</id><snippet>im = Image.new('L', size)
im.putdata([x1, x2, x3, ...])
</snippet></ROW><ROW><id>2111309</id><snippet>a[np.arange(3), (0,1,0)]
</snippet></ROW><ROW><id>2111327</id><snippet>
trac_url = 'http://mytratsite/'

from docutils import nodes, utils
from docutils.parsers.rst import roles
import urllib

def trac_role(role, rawtext, text, lineno, inliner, options={}, content=[]):
  ref = trac_url + '/intertrac/' + urllib.quote(text, safe='')
  node = nodes.reference(rawtext, utils.unescape(text), refuri=ref, **options)
  return [node],[]

roles.register_canonical_role('trac', trac_role)
</snippet></ROW><ROW><id>2111327</id><snippet>:trac:`#123`</snippet></ROW><ROW><id>2111327</id><snippet>:trac:`r1023`</snippet></ROW><ROW><id>2111456</id><snippet>channel = E.channel(E.title("Page Title"), E.link(""),E.description(""))
    for (title, link, description) in container:
        try:
                    mytitle = E.title(title)
                    mylink = E.link(link)
                    mydesc = E.description(description)
            item = E.item(mytitle, mylink, mydesc)
                except ValueError:
                    print repr(title)
                    print repr(link)
                    print repr(description)
                    raise
        channel.append(item)
    top = page = E.top(channel)
</snippet></ROW><ROW><id>2111567</id><snippet>from pylab import *

points = []
points.append((-0.25, -1.0))
points.append((0.7, -0.7))
points.append((1,0))
points.append((0.7,1))
points.append((-0.25,1.2))
points.append((-1,0.5))
points.append((-1,-0.5))
points.append((-0.25, -1.0))

a_line = plot(*zip(*points))[0]
a_line.set_color('g')
a_line.set_marker('o')
a_line.set_markerfacecolor('b')
a_line.set_markersize(30)
axis([-1.5,1.5,-1.5,1.5])

show()
</snippet></ROW><ROW><id>2111567</id><snippet># general imports
import random, time
from multiprocessing import Process, Queue

# for matplotlib
import random
import numpy as np
import matplotlib
matplotlib.use('GTKAgg') # do this before importing pylab

import matplotlib.pyplot as plt
from matplotlib.patches import Circle


def matplotLibAnimate(q,points):

    # set up initial plot
    fig = plt.figure()
    ax = fig.add_subplot(111)


    circles = []
    for point in points:
        ax.add_patch(Circle(point,0.1))

    a_line, = ax.plot(*zip(*points))
    a_line.set_color('g')
    a_line.set_lw(2)

    currentNode = None  
    def animate(currentNode = currentNode):
        while 1:
            newNode = q.get()
            if currentNode: currentNode.remove()
            circle = Circle(newNode,0.1)
            currentNode = ax.add_patch(circle)
            circle.set_fc('r')
            fig.canvas.draw()

    # start the animation
    import gobject
    gobject.idle_add(animate)
    plt.show()

#initial points
points = ((-0.25, -1.0),(0.7, -0.7),(1,0),(0.7,1),(-0.25,1.2),(-1,0.5),(-1,-0.5),(-0.25, -1.0))
q = Queue()
p = Process(target = matplotLibAnimate, args=(q,points,))
p.start()

# feed animation data
while 1:
    time.sleep(random.randrange(4))
    q.put(random.sample(points,1)[0])
</snippet></ROW><ROW><id>2111674</id><snippet>env</snippet></ROW><ROW><id>2111674</id><snippet>os.environ</snippet></ROW><ROW><id>2111674</id><snippet>myapp.environ</snippet></ROW><ROW><id>2111674</id><snippet>myapp.environ</snippet></ROW><ROW><id>2111864</id><snippet>keywords = library.get_keywords()
if not isinstance(keywords, tuple):
    keywords = (keywords,) # Note the comma
for keyword in keywords:
    do_your_thang(keyword)
</snippet></ROW><ROW><id>2112184</id><snippet>process_view</snippet></ROW><ROW><id>2112184</id><snippet>process_view()</snippet></ROW><ROW><id>2112184</id><snippet>None</snippet></ROW><ROW><id>2112184</id><snippet>HttpResponse</snippet></ROW><ROW><id>2112184</id><snippet>None</snippet></ROW><ROW><id>2112184</id><snippet>process_view()</snippet></ROW><ROW><id>2112184</id><snippet>HttpResponse</snippet></ROW><ROW><id>2112184</id><snippet>HttpResponse</snippet></ROW><ROW><id>2112349</id><snippet>self.testdata.close()</snippet></ROW><ROW><id>2112349</id><snippet>setUp()</snippet></ROW><ROW><id>2112349</id><snippet>tearDown()</snippet></ROW><ROW><id>2112349</id><snippet>
    try:
        file.open()
    finally:
        file.close()

</snippet></ROW><ROW><id>2112349</id><snippet>_tests</snippet></ROW><ROW><id>2112528</id><snippet>import os
import base64

def secure_rand(len=8):
    token=os.urandom(len)
    return base64.b64encode(token)

print(secure_rand())
</snippet></ROW><ROW><id>2112820</id><snippet>Window &gt; Preferences &gt; Pydev &gt; Editor &gt; Code Analysis &gt; Others
</snippet></ROW><ROW><id>2112820</id><snippet>class Group(object):
    def key(self, k):
        outer_self = self
        class Subkey(object):
            def __enter__(self):
                outer_self._settings.beginGroup(k)
                return outer_self

            def __exit__(self, type, value, tb):
                outer_self._settings.endGroup()

         return Subkey()
</snippet></ROW><ROW><id>2112820</id><snippet>s</snippet></ROW><ROW><id>2112820</id><snippet>self</snippet></ROW><ROW><id>2112982</id><snippet>public int winCraps{
    roll = rollDice();
    if (roll == 7 || roll == 11) {
        return true;
    }
    else if(roll == 2 || roll == 3 || roll == 12) {
        return false;
    }
    else{
        return rollforPoint(roll);
    }
}
</snippet></ROW><ROW><id>2112994</id><snippet>Explicit is better than implicit.
...
Namespaces are one honking great idea -- let's do more of those!
</snippet></ROW><ROW><id>2112994</id><snippet>handlers</snippet></ROW><ROW><id>2112994</id><snippet>index</snippet></ROW><ROW><id>2112994</id><snippet>globals</snippet></ROW><ROW><id>2112994</id><snippet>handlers</snippet></ROW><ROW><id>2112994</id><snippet>globals</snippet></ROW><ROW><id>2113221</id><snippet>sys.stdout</snippet></ROW><ROW><id>2113221</id><snippet>sys.__stdout__</snippet></ROW><ROW><id>2113221</id><snippet>sys.stdout</snippet></ROW><ROW><id>2113221</id><snippet>import StringIO
import sys

# Store App Engine's modified stdout so we can restore it later
gae_stdout = sys.stdout

# Redirect stdout to a StringIO object
new_stdout = StringIO.StringIO()
sys.stdout = new_stdout

# Run your code here, however you're doing that

# Get whatever was printed to stdout using the `print` statement (if necessary)
printed = new_stdout.getvalue()

# Restore App Engine's original stdout
sys.stdout = gae_stdout
</snippet></ROW><ROW><id>2113347</id><snippet>save_file = open(os_path, 'wb')
</snippet></ROW><ROW><id>2113347</id><snippet>shutil.copyfileobj</snippet></ROW><ROW><id>2113347</id><snippet>file_save_path = os.path.join(config.images_dir, request.POST['image'].filename)
file_contents = request.POST['image'].file.read()

# insert sanity checks here...

save_file = open(file_save_path, 'wb')
save_file.write(file_contents)
save_file.close()
</snippet></ROW><ROW><id>2113347</id><snippet>with open(file_save_path, 'wb') as save_file:
    save_file.write(file_contents)
</snippet></ROW><ROW><id>2113347</id><snippet>from __future__ import with_statements
</snippet></ROW><ROW><id>2113482</id><snippet>query(extract('hour', timeStamp)).group_by(hour)
</snippet></ROW><ROW><id>2114071</id><snippet>py2exe</snippet></ROW><ROW><id>2114071</id><snippet>win32com</snippet></ROW><ROW><id>2114071</id><snippet>pysvn</snippet></ROW><ROW><id>2114071</id><snippet>py2exe</snippet></ROW><ROW><id>2114517</id><snippet>&gt;&gt;&gt; def wrapper(param1, *stuff, **args):
...  print(param1)
...  print(stuff)
...  print(args)
...
&gt;&gt;&gt; wrapper(3, 4, 5, foo=2)
3
(4, 5)
{'foo': 2}
</snippet></ROW><ROW><id>2114517</id><snippet>wrapee(param1, *stuff, **args)
</snippet></ROW><ROW><id>2114517</id><snippet>*stuff</snippet></ROW><ROW><id>2114517</id><snippet>**args</snippet></ROW><ROW><id>2114975</id><snippet>&gt;&gt;&gt; import win32api
&gt;&gt;&gt; win32api.GetLongPathName(win32api.GetShortPathName('texas.txt')))
'TEXAS.txt'
</snippet></ROW><ROW><id>2115632</id><snippet>print fooPy()
</snippet></ROW><ROW><id>2115632</id><snippet>fooShell=$(python fooPy.py)
</snippet></ROW><ROW><id>2115632</id><snippet>=</snippet></ROW><ROW><id>2115954</id><snippet>self</snippet></ROW><ROW><id>2115954</id><snippet> for newsletter in newsletters:
      setattr(newsletter, 'basepath',
              newsletter.NewsletterPath.split('/')[-1])
</snippet></ROW><ROW><id>2116048</id><snippet>from celery.task.schedules import crontab
from celery.decorators import periodic_task

@periodic_task(run_every=crontab(hour=7, minute=30, day_of_week="mon"))
def every_monday_morning():
    print("This runs every Monday morning at 7:30a.m.")
</snippet></ROW><ROW><id>2116318</id><snippet>seen = set()
repeated = set()
for l in list_of_lists:
  for i in set(l):
    if i in seen:
      repeated.add(i)
    else:
      seen.add(i)
</snippet></ROW><ROW><id>2116318</id><snippet>from itertools import *
reduce(set.union, (starmap(set.intersection, combinations(map(set, ll), 2))))
</snippet></ROW><ROW><id>2116382</id><snippet>import datastore_mongo_stub

os.environ['APPLICATION_ID'] = 'test'

datastore = datastore_mongo_stub.DatastoreMongoStub(
    os.environ['APPLICATION_ID'], 'woot', '', require_indexes=False)

apiproxy_stub_map.apiproxy.RegisterStub('datastore_v3', datastore)
</snippet></ROW><ROW><id>2116410</id><snippet>\3
</snippet></ROW><ROW><id>2116410</id><snippet>{'type': 'str', 'name': 'yowza!', 'value': 'c:\\test\\3 tests\\test'}
</snippet></ROW><ROW><id>2116610</id><snippet>strings = dict((x, x) for x in L)
</snippet></ROW><ROW><id>2116755</id><snippet>traverse(node):
  if node != None do:
    traverse(node.left)
    print node.value
    traverse(node.right)
  endif
</snippet></ROW><ROW><id>2116755</id><snippet>traverse(node):
  while node != None do:
    traverse(node.left)
    print node.value
    node = node.right
  endwhile
</snippet></ROW><ROW><id>2116755</id><snippet>traverse(node):
  stack = []
  while !empty(stack) || node != None do:
    if node != None do: // this is a normal call, recurse
      push(stack,node)
      node = node.left
    else // we're returning: pop and print the current node
      node = pop(stack)
      print node.value
      node = node.right
    endif
  endwhile
</snippet></ROW><ROW><id>2116755</id><snippet>if/else</snippet></ROW><ROW><id>2116755</id><snippet>traverse(node):
  // entry:
  if node == NULL do return
  traverse(node.left)
  // after-left-traversal:
  print node.value
  traverse(node.right)

traverse(node):
   stack = [node,'entry']
   while !empty(stack) do:
     [node,state] = pop(stack)
     switch state: 
       case 'entry': 
         if node == None do: break; // return
         push(stack,[node,'after-left-traversal']) // store return address
         push(stack,[node.left,'entry']) // recursive call
         break;
       case 'after-left-traversal': 
         print node.value;
         // tail call : no return address
         push(stack,[node.right,'entry']) // recursive call
      end
    endwhile 
</snippet></ROW><ROW><id>2117673</id><snippet>def getEventsForMonth(self, month, year):
  start_date = datetime.datetime(year, month, 1)
  if month == 12:
    end_date = datetime.datetime(year + 1, 1, 1)
  else:
    end_date = datetime.datetime(year, month + 1, 1)
  return Events.all().filter('date &gt;=', start_date).filter('date &lt;=', end_date).fetch(1000)
</snippet></ROW><ROW><id>2118309</id><snippet>x = 'a and (b and c) and d or e and (f or g)'
import re

matches = re.findall(r'\(.*?\)|\w+', x)
print ','.join(matches)
</snippet></ROW><ROW><id>2118309</id><snippet>and</snippet></ROW><ROW><id>2118309</id><snippet>or</snippet></ROW><ROW><id>2118542</id><snippet>for key in myDict:
    if key not in myList:
        print(key+"\t"+myDict[key])
</snippet></ROW><ROW><id>2118542</id><snippet>for key in (set(myDict)-set(myList)):
    print(key+"\t"+myDict[key])
</snippet></ROW><ROW><id>2118786</id><snippet>IDLE 2.6.2      
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; chrome = 'C:\Users\Ted\AppData\Local\Google\Chrome\Application\chrome.exe'
&gt;&gt;&gt; chrome_args = 'www.rit.edu'
&gt;&gt;&gt; spChrome = subprocess.Popen(chrome+' '+chrome_args)
&gt;&gt;&gt; print spChrome.pid
2124
</snippet></ROW><ROW><id>2118895</id><snippet>C:\Program Files\Parasoft\SOAtest\5.5.3\rules\SOAP\SECURITY.MSGSIZE.rule
</snippet></ROW><ROW><id>2118895</id><snippet>C:\Program Files\Parasoft\SOAtest\5.5.3\rules\soa.policy
</snippet></ROW><ROW><id>2118895</id><snippet>def checkSize(value, context):
    message = XMLUtil.serialize(value)
    size = len(message)
    if size &gt; 10240:
        return 1
    else:
        return 0
</snippet></ROW><ROW><id>2118895</id><snippet>size &gt; 10240</snippet></ROW><ROW><id>2119143</id><snippet>A = []
B = []
for item in L:
    if item['b'] == 0:
        target = A
    else:
        target = B
    target.append(item)
</snippet></ROW><ROW><id>2119143</id><snippet>(A, B)[item['b'] != 0].append(item)</snippet></ROW><ROW><id>2119467</id><snippet>__setattr__</snippet></ROW><ROW><id>2119467</id><snippet>__getattr__</snippet></ROW><ROW><id>2119467</id><snippet>&gt;&gt;&gt; class  TempFileWithAttributes(object):
...   __slots__ = ['_tempFile', 'Value']
...   def __init__(self):
...     self._tempFile  =  tempfile.TemporaryFile()
...     self.Value = 123
...   def __getattr__(self, name):
...     return getattr(self._tempFile, name)
... 
</snippet></ROW><ROW><id>2119512</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>2119512</id><snippet>td</snippet></ROW><ROW><id>2119512</id><snippet>td.days</snippet></ROW><ROW><id>2119512</id><snippet>timedelta</snippet></ROW><ROW><id>2119512</id><snippet>def days_hours_minutes(td):
    return td.days, td.seconds//3600, (td.seconds//60)%60
</snippet></ROW><ROW><id>2119517</id><snippet>hex(ord(b))
</snippet></ROW><ROW><id>2119644</id><snippet>main</snippet></ROW><ROW><id>2119644</id><snippet>try:
  ...normal body of your main goes here...
except:
  from google.appengine.api import mail
  import sys

  mail.send_mail(sender="Your GAE App &lt;yourappname@example.com&gt;",
              to="You &lt;bobobobo@example.com&gt;",
              subject="GAE App error",
              body="""
Your App Engine app raised an exception:
  %s
""" % sys.exc_info()[:2])
</snippet></ROW><ROW><id>2119728</id><snippet>python -c'import themodule; themodule.thefunction("boo!")'
</snippet></ROW><ROW><id>2119752</id><snippet>method=GET</snippet></ROW><ROW><id>2119752</id><snippet>method=GET</snippet></ROW><ROW><id>2119752</id><snippet>method=POST</snippet></ROW><ROW><id>2119752</id><snippet>first_name</snippet></ROW><ROW><id>2119752</id><snippet>last_name</snippet></ROW><ROW><id>2119752</id><snippet>if 'first_name' in request.GET or 'last_name' in request.GET:
    form = SearchForm(request.GET)
else:
    form = SearchForm()
</snippet></ROW><ROW><id>2119752</id><snippet>__init__</snippet></ROW><ROW><id>2120402</id><snippet>ModelA</snippet></ROW><ROW><id>2120402</id><snippet>myproject.modelb.models</snippet></ROW><ROW><id>2120402</id><snippet>from myproject.modela.models import ModelA
class ModelB:
    a = models.ForeignKey(ModelA)
</snippet></ROW><ROW><id>2120402</id><snippet>class ModelB:
    a = models.ForeignKey('ModelA')
</snippet></ROW><ROW><id>2120457</id><snippet>import re
xmlprocre = re.compile("(\s*&lt;[\?\!])")
def add_toplevel_tag(string):
    """
After all the XML processing instructions, add an enclosing top-level &lt;DOC&gt; tag, and return it.
e.g.
&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE FOO BAR "foo.dtd" [ &lt;!ENTITY ...&gt; &lt;!ENTITY ...&gt; &lt;!ENTITY ...&gt; ]&gt; &lt;ARTICLE&gt; ...
&lt;/ARTICLE&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt;
=&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE FOO BAR "foo.dtd" [ &lt;!ENTITY ...&gt; &lt;!ENTITY ...&gt; &lt;!ENTITY ...&gt; ]&gt;&lt;DOC&gt; &lt;ARTICLE&gt; ...
&lt;/ARTICLE&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt; &lt;ARTICLE&gt; ... &lt;/ARTICLE&gt;&lt;/DOC&gt;
"""
    def _advance_proc(string, idx):
        # If possible, advance over whitespace and one processing
        # instruction starting at string index idx, and return its index.
        # If not possible, return None
        # Find the beginning of the processing instruction
        m = xmlprocre.match(string[idx:])
        if m is None: return None
        #print "Group", m.group(1)
        idx = idx + len(m.group(1))
        #print "Remain", string[idx:]

        # Find closing &gt; bracket
        bracketdebt = 1
        while bracketdebt &gt; 0:
            if string[idx] == "&lt;": bracketdebt += 1
            elif string[idx] == "&gt;": bracketdebt -= 1
            idx += 1
        #print "Remain", string[idx:]
        return idx
    loc = 0
    while 1:
        # Advance one processing instruction
        newloc = _advance_proc(string, loc)
        if newloc is None: break
        else: loc = newloc
    return string[:loc] + "&lt;DOC&gt;" + string[loc:] + "&lt;/DOC&gt;"
</snippet></ROW><ROW><id>2120518</id><snippet>RegexObject.match(string, [pos], [endpos])
</snippet></ROW><ROW><id>2120518</id><snippet>r.match("foo",,)
</snippet></ROW><ROW><id>2120518</id><snippet>RegexObject.match(string[, pos][, endpos])
</snippet></ROW><ROW><id>2121219</id><snippet>prettify</snippet></ROW><ROW><id>2121219</id><snippet>BeautifulSoup.BeautifulSoup('&lt;p&gt;a&lt;span&gt;b&lt;/span&gt;c&lt;/p&gt;').renderContents()
</snippet></ROW><ROW><id>2121624</id><snippet>epydoc --check foo.py bar.py
</snippet></ROW><ROW><id>2121624</id><snippet>+------------------------------------------------------------------------------------------------------------
| In /home/mark/Desktop/foo.py:
| Import failed (but source code parsing was successful).
|     Error: KeyError: 'DOES_NOT_EXIST' (line 2)
|   
+------------------------------------------------------------------------------------------------------------
| In /home/mark/Desktop/bar.py:
| Import failed (but source code parsing was successful).
|     Error: KeyError: 'DOES_NOT_EXIST' (line 7)
|   
</snippet></ROW><ROW><id>2121638</id><snippet>A</snippet></ROW><ROW><id>2121638</id><snippet>B</snippet></ROW><ROW><id>2121638</id><snippet>C</snippet></ROW><ROW><id>2121638</id><snippet>A</snippet></ROW><ROW><id>2121638</id><snippet>C</snippet></ROW><ROW><id>2121638</id><snippet>B</snippet></ROW><ROW><id>2121638</id><snippet>C</snippet></ROW><ROW><id>2121638</id><snippet>A</snippet></ROW><ROW><id>2121638</id><snippet>C</snippet></ROW><ROW><id>2121638</id><snippet>C+1</snippet></ROW><ROW><id>2121638</id><snippet>B</snippet></ROW><ROW><id>2121638</id><snippet>C</snippet></ROW><ROW><id>2121638</id><snippet>C+1</snippet></ROW><ROW><id>2121638</id><snippet>C</snippet></ROW><ROW><id>2121758</id><snippet>token.py</snippet></ROW><ROW><id>2121758</id><snippet>help()</snippet></ROW><ROW><id>2121758</id><snippet>token.py</snippet></ROW><ROW><id>2121758</id><snippet>.py</snippet></ROW><ROW><id>2121758</id><snippet>pydoc.py</snippet></ROW><ROW><id>2121758</id><snippet>help()</snippet></ROW><ROW><id>2121758</id><snippet>help()</snippet></ROW><ROW><id>2121843</id><snippet>rstrip</snippet></ROW><ROW><id>2121843</id><snippet>line</snippet></ROW><ROW><id>2121843</id><snippet>line = line.rstrip('\n')
</snippet></ROW><ROW><id>2121843</id><snippet>"a string".strip().upper()
</snippet></ROW><ROW><id>2121918</id><snippet>whyteboard.tools</snippet></ROW><ROW><id>2121918</id><snippet>tools</snippet></ROW><ROW><id>2121918</id><snippet>import tools</snippet></ROW><ROW><id>2121918</id><snippet>sys.modules</snippet></ROW><ROW><id>2121918</id><snippet>sys.modules['whyteboard.tools']</snippet></ROW><ROW><id>2121918</id><snippet>sys.modules</snippet></ROW><ROW><id>2121918</id><snippet>import sys
from whyteboard import tools

sys.modules['tools'] = tools
</snippet></ROW><ROW><id>2121918</id><snippet>cPickle.load</snippet></ROW><ROW><id>2121918</id><snippet>del sys.modules['tools']</snippet></ROW><ROW><id>2121918</id><snippet>cPickle.dump</snippet></ROW><ROW><id>2121918</id><snippet>sys.modules</snippet></ROW><ROW><id>2121958</id><snippet>copy.copy</snippet></ROW><ROW><id>2121958</id><snippet>copy.copy</snippet></ROW><ROW><id>2121958</id><snippet>self.__dict__</snippet></ROW><ROW><id>2121958</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>2121958</id><snippet>deepcopy</snippet></ROW><ROW><id>2121958</id><snippet>self</snippet></ROW><ROW><id>2122329</id><snippet>settings</snippet></ROW><ROW><id>2122329</id><snippet>import settings</snippet></ROW><ROW><id>2122329</id><snippet>settings.bar</snippet></ROW><ROW><id>2122329</id><snippet>settings.quux</snippet></ROW><ROW><id>2122329</id><snippet>from foo import *</snippet></ROW><ROW><id>2122329</id><snippet>import foo</snippet></ROW><ROW><id>2122896</id><snippet>d = collections.defaultdict(list)
for line in stream:
    if '/' in line:
        #.....
        key =  str(hostname)+":"+r.groups()[0][0:2]+r.groups()[2]
        value = str(line[3])
        d[key].append(value)
</snippet></ROW><ROW><id>2122896</id><snippet>d2 = {}
for key,values in d.iteritems():
    d2['%s:%d' % (key, len(values)] = ' '.join(str(v) for v in values)
</snippet></ROW><ROW><id>2122896</id><snippet>' '.join()</snippet></ROW><ROW><id>2122972</id><snippet>'\r'</snippet></ROW><ROW><id>2122972</id><snippet>sys.stdout</snippet></ROW><ROW><id>2122972</id><snippet>import sys
import time

for i in range(10):
    sys.stdout.write("\r{0}&gt;".format("="*i))
    sys.stdout.flush()
    time.sleep(0.5)
</snippet></ROW><ROW><id>2122972</id><snippet>curses</snippet></ROW><ROW><id>2122972</id><snippet>import time
import curses

def pbar(window):
    for i in range(10):
        window.addstr(10, 10, "[" + ("=" * i) + "&gt;" + (" " * (10 - i )) + "]")
        window.refresh()
        time.sleep(0.5)

curses.wrapper(pbar)
</snippet></ROW><ROW><id>2122972</id><snippet>curses.wrapper</snippet></ROW><ROW><id>2123247</id><snippet>print repr(open('file_saved_from_wireshark', 'rb').read())</snippet></ROW><ROW><id>2123247</id><snippet>print repr(a_sample_packet)</snippet></ROW><ROW><id>2123247</id><snippet>import binascii, sys, cStringIO, gzip, struct, zlib
# guff is allegedly a "packet", formatted as 2 hex characters per byte
guff = "001321cdc68ff4ce46e4f00d0800450000832a85400080061e51ac102cceac102cb004f8092a9909b32c10e81cb25018f734823e00000100000000000000521f8b08000000000000005bf39681b59c85818121a0b4884138da272bb12c512f27312f5dcf3f292b35b9c47ac2b988f902c59a394c0c0c150540758c250c5c2ea5b9b9950a2e89258900aa4c201a3f000000"
guff2 = binascii.unhexlify(guff)
print "raw input: len=%d repr=%r" % (len(guff2), guff2)
# gzip spec: http://www.faqs.org/rfcs/rfc1952.html
GZIP_HDR = "\x1F\x8B\x08"
gzpos = guff2.find(GZIP_HDR)
if gzpos == -1:
    print "Can't find gzip header"
    sys.exit(1)
print gzpos, "bytes before gzipped data"
gzipped = guff2[gzpos:]
packet_crc, packet_orig_len = struct.unpack("&lt;II", gzipped[-8:])
print "packet_crc, packet_orig_len:", hex(packet_crc), packet_orig_len
fobj = cStringIO.StringIO(gzipped)
zf = gzip.GzipFile(fileobj=fobj)
payload = zf.read()
print "payload: len=%d repr=%r" % (len(payload), payload)
print "crc32(payload):", hex(zlib.crc32(payload))
</snippet></ROW><ROW><id>2123247</id><snippet>raw input: len=145 repr="\x00\x13!\xcd\xc6\x8f\xf4\xceF\xe4\xf0\r\x08\x00E\x00\x
00\x83*\x85@\x00\x80\x06\x1eQ\xac\x10,\xce\xac\x10,\xb0\x04\xf8\t*\x99\t\xb3,\x1
0\xe8\x1c\xb2P\x18\xf74\x82&gt;\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x1f\x8b\x0
8\x00\x00\x00\x00\x00\x00\x00[\xf3\x96\x81\xb5\x9c\x85\x81\x81!\xa0\xb4\x88A8\xd
a'+\xb1,Q/'1/]\xcf?)+5\xb9\xc4z\xc2\xb9\x88\xf9\x02\xc5\x9a9L\x0c\x0c\x15\x05@u\
x8c%\x0c\\.\xa5\xb9\xb9\x95\n.\x89%\x89\x00\xaaL \x1a?\x00\x00\x00"
63 bytes before gzipped data
packet_crc, packet_orig_len: 0x1a204caa 63
payload: len=63 repr='\xac\xed\x00\x05w\x04\x00\x00\x00Pur\x00\x13[Ljava.lang.Ob
ject;\x90\xceX\x9f\x10s)l\x02\x00\x00xp\x00\x00\x00\x01t\x00\nDummy Data'
crc32(payload): 0x1a204caa
</snippet></ROW><ROW><id>2123254</id><snippet>&lt;py:for each="line in message.split('\n')"&gt;${line}&lt;br /&gt;&lt;/py:for&gt;
</snippet></ROW><ROW><id>2123298</id><snippet>u'€'</snippet></ROW><ROW><id>2123359</id><snippet>styles = getSampleStyleSheet()
text = Paragraph("long line",
              styles['Normal'])
</snippet></ROW><ROW><id>2123394</id><snippet>start   cnt
00:05:00   1
00:10:00   0
00:15:00   1
00:20:00   0
00:25:00   1
00:30:00   0
00:35:00   1
00:40:00   0
00:45:00   0
00:50:00   0
00:55:00   2
</snippet></ROW><ROW><id>2123394</id><snippet>CREATE TABLE `timedata` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `c1` datetime DEFAULT NULL,
  `c2` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`id`)
)
</snippet></ROW><ROW><id>2123394</id><snippet>DROP PROCEDURE IF EXISTS per5min;
DELIMITER //
CREATE PROCEDURE per5min ()
BEGIN
  DECLARE dtMin DATETIME;
  DECLARE dtMax DATETIME;
  DECLARE dtStart DATETIME;
  DECLARE dtStop DATETIME;
  DECLARE tmDiff TIME;
  DECLARE result INT UNSIGNED;
  SET @offset = 5 * 60;
  SELECT MIN(c1) into dtMin FROM timedata;
  SELECT MAX(c1) into dtMax FROM timedata;

  CREATE TEMPORARY TABLE tmp_per5min (
      start TIME,
      cnt INT UNSIGNED
  );

  SET dtStart = dtMin;
  REPEAT
    SELECT dtStart + INTERVAL @offset SECOND into dtStop;
    SELECT count(c2) into result FROM timedata WHERE c1 BETWEEN dtStart and dtStop;
    SELECT TIME(SUBTIME(dtStop,TIME(dtMin))) into tmDiff;
    INSERT INTO tmp_per5min (start,cnt) VALUES (tmDiff,result);
    SET dtStart = dtStop;
  UNTIL dtStop &gt;= dtMax END REPEAT;

  SELECT * FROM tmp_per5min;
  DROP TABLE tmp_per5min;
END;
//
DELIMITER ;

CALL per5min();
</snippet></ROW><ROW><id>2123394</id><snippet>shell&gt; mysql -uroot test &lt; per5minproc.sql
</snippet></ROW><ROW><id>2123394</id><snippet>import MySQLdb as m

if __name__ == '__main__':
    db = m.connect(user='root',db='test')
    c = db.cursor()
    c.callproc("per5min")
    print(c.fetchall())
    c.close()
    db.close()
</snippet></ROW><ROW><id>2123434</id><snippet>  File "test.py", line 9, in &lt;module&gt;
    sudoku[i/4*4+k] = sudoku[i/4*4+k].translate(None, str(j+1))
TypeError: expected a character buffer object
</snippet></ROW><ROW><id>2123434</id><snippet>  File "test.py", line 12, in &lt;module&gt;
    sd(i/4*4+k)
NameError: name 'k' is not defined
</snippet></ROW><ROW><id>2123434</id><snippet>    sd(lambda k: i/4*4+k)
</snippet></ROW><ROW><id>2123434</id><snippet>sd</snippet></ROW><ROW><id>2123602</id><snippet>def attrsetter(attr):
  def set_any(self, value):
    setattr(self, attr, value)
  return set_any

a = property(fset=attrsetter('_a'))
b = property(fset=attrsetter('_b'))
c = property(fset=attrsetter('_c'))
</snippet></ROW><ROW><id>2123856</id><snippet>entries = db.Query(Entry).order("-published").fetch()
comments = db.Query(Comment).order("published").fetch()
</snippet></ROW><ROW><id>2124172</id><snippet>urlfetch</snippet></ROW><ROW><id>2124172</id><snippet>urlfetch</snippet></ROW><ROW><id>2124172</id><snippet>urlfetch</snippet></ROW><ROW><id>2124269</id><snippet>entire_file = open('hello.txt', 'rb').read()

print 'number of \\n: %d, number of bytes %d' % (
    entire_file.count('\n'), len(entire_file))
</snippet></ROW><ROW><id>2124325</id><snippet>set_size_request</snippet></ROW><ROW><id>2124325</id><snippet>window_get_size</snippet></ROW><ROW><id>2124325</id><snippet>set_resizeable</snippet></ROW><ROW><id>2124370</id><snippet>random.shuffle</snippet></ROW><ROW><id>2124370</id><snippet>2**19937-1</snippet></ROW><ROW><id>2124370</id><snippet>27!</snippet></ROW><ROW><id>2124395</id><snippet>from google.appengine.ext import db
from google.appengine.api.datastore_types import *

def dumpStr(obj):
    return "'" + obj + "'"

def dumps(obj):
    if isinstance(obj, str):
        return dumpStr(obj)
    elif obj == None:
        return None
    elif isinstance(obj, list):
        items = [];
        for item in obj:
            items.append(dumps(item))
        return '[' + ','.join(items) + ']'
    elif isinstance(obj, datetime.datetime):
        return "new Date('%s')" % obj.ctime()
    properties = [];
    for property in dir(obj):
        if property[0] != '_':
            value = obj.__getattribute__(property)
            valueClass = str(value.__class__)
            if not(('function' in valueClass) or ('built' in valueClass) or ('method' in valueClass)):
                value = dumps(value)
                if value != None:
                    properties.append("'" + property + "':" + value)
    if len(properties) == 0:
        return str(obj)
    else:
        return '{' + ','.join(properties) + '}'
</snippet></ROW><ROW><id>2124577</id><snippet>Timer</snippet></ROW><ROW><id>2124577</id><snippet>threading.Timer</snippet></ROW><ROW><id>2124577</id><snippet>Queue.Queue</snippet></ROW><ROW><id>2124693</id><snippet>str = '%-10f' % val
</snippet></ROW><ROW><id>2124693</id><snippet>set = '%10f' % val
</snippet></ROW><ROW><id>2124693</id><snippet>str = '%-10.4f' % val
</snippet></ROW><ROW><id>2124693</id><snippet>import sys
rows = [[1.343, 348.222, 484844.3333], [12349.000002, -2.43333]]
for row in rows:
  for val in row:
    sys.stdout.write('%20f' % val)
  sys.stdout.write("\n")

        1.343000          348.222000       484844.333300
    12349.000002           -2.433330
</snippet></ROW><ROW><id>2124788</id><snippet>365</snippet></ROW><ROW><id>2124788</id><snippet>10!</snippet></ROW><ROW><id>2125180</id><snippet>object</snippet></ROW><ROW><id>2125180</id><snippet>class Base(object):
    ...
</snippet></ROW><ROW><id>2125399</id><snippet>DEBUG</snippet></ROW><ROW><id>2125399</id><snippet>True</snippet></ROW><ROW><id>2125767</id><snippet>from rpy2 import robjects
color = robjects.r("heat.colors")()
names = robjects.StrVector(("pwn", "pwn2"))
robjects.r.barplot(t, col=color, **{"names.arg":names})
</snippet></ROW><ROW><id>2125794</id><snippet>django.contrib.auth.model.User</snippet></ROW><ROW><id>2125794</id><snippet>AUTHENTICATION_BACKENDS</snippet></ROW><ROW><id>2125794</id><snippet>from django.contrib.auth.models import User

class EmailBackend(object):
    """ Authenticates against the email field of django.contrib.auth.models.User
    """

    def authenticate(self, email=None, password=None):
        # Try using the email if it is given
        if email:
            for user in User.objects.filter(email=email):
                if user.check_password(password):
                    return user

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None
</snippet></ROW><ROW><id>2125794</id><snippet>django.contrib.auth.authenticate</snippet></ROW><ROW><id>2125794</id><snippet>AUTHENTICATION_BACKEND</snippet></ROW><ROW><id>2125794</id><snippet>import uuid, binascii
username = binascii.b2a_base64(uuid.uuid4().bytes)
</snippet></ROW><ROW><id>2125827</id><snippet>    value = SDL_JoystickGetHat (joy, _index);
#ifdef DEBUG
    printf("SDL_JoystickGetHat value:%d:\n", value);
#endif
    if (value &amp; SDL_HAT_UP) {
</snippet></ROW><ROW><id>2125860</id><snippet>__name__</snippet></ROW><ROW><id>2125860</id><snippet>"__main__"</snippet></ROW><ROW><id>2125860</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>2125860</id><snippet>if __name__ == "__main__":
    the_function_I_think_of_as_main()
</snippet></ROW><ROW><id>2126323</id><snippet>elif 'nt' in _names:
    name = 'nt'
    linesep = '\r\n'
    from nt import *
    try:
        from nt import _exit
    except ImportError:
        pass
    import ntpath as path

    import nt
    __all__.extend(_get_exports_list(nt))
    del nt
</snippet></ROW><ROW><id>2126323</id><snippet>import ntpath as path</snippet></ROW><ROW><id>2126323</id><snippet>os.path</snippet></ROW><ROW><id>2126323</id><snippet>ntpath</snippet></ROW><ROW><id>2126863</id><snippet>result = reduce(lambda data, (aname, p): algo_by_name(aname)(p, data), workflow)
</snippet></ROW><ROW><id>2126863</id><snippet>workflow = ['data', ('algo0', {}), ('algo1', {'param': value}), … ]
</snippet></ROW><ROW><id>2126863</id><snippet>def algo0(p, data):
    …
    return output_data.filename
</snippet></ROW><ROW><id>2126863</id><snippet>def algo_by_name(name):
    return {'algo0': algo0, 'algo1': algo1, }[name]
</snippet></ROW><ROW><id>2127230</id><snippet>countryname = aliases.get(countryname, countryname)
</snippet></ROW><ROW><id>2127237</id><snippet>def word_start_index2(text, seek_word):
    camel_case = seek_word[0].upper() + seek_word[1:].lower()
    seek_word_i = ''.join('[' + c.lower() + c.upper() + ']'
                           for c in seek_word)
    regex1 = r'(?:(?&lt;=[^a-zA-Z])|^)' + seek_word_i + r'(?=$|[^a-zA-Z])'
    regex2 = r'(?:(?&lt;=[a-z]|[^A-Z])|^)' + camel_case + r'(?=$|[A-Z]|[^a-z])'
    regex = '%s|%s' % (regex1,  regex2)
    import re
    m = re.search(regex, text)
    if not m:
        return None
    else:
        return m.start()
</snippet></ROW><ROW><id>2127237</id><snippet>(?i)</snippet></ROW><ROW><id>2127302</id><snippet>.setAttribute</snippet></ROW><ROW><id>2127302</id><snippet>image.setAttribute("rank", str(rank))
</snippet></ROW><ROW><id>2127476</id><snippet>datetime</snippet></ROW><ROW><id>2127476</id><snippet>time</snippet></ROW><ROW><id>2127476</id><snippet>datetime.datetime</snippet></ROW><ROW><id>2127476</id><snippet>time</snippet></ROW><ROW><id>2127476</id><snippet>datetime</snippet></ROW><ROW><id>2127476</id><snippet>datetime</snippet></ROW><ROW><id>2127476</id><snippet>datetime</snippet></ROW><ROW><id>2127648</id><snippet>import unicodedata as ud
all_unicode = ''.join(unichr(i) for i in xrange(65536))
unicode_letters = ''.join(c for c in all_unicode
                          if ud.category(c)=='Lu' or ud.category(c)=='Ll')
</snippet></ROW><ROW><id>2127648</id><snippet>letter in unicode_letters</snippet></ROW><ROW><id>2127648</id><snippet>unicode_letters = set(unicode_letters)
</snippet></ROW><ROW><id>2127766</id><snippet>self.setShapeAt</snippet></ROW><ROW><id>2128123</id><snippet>/items/today/</snippet></ROW><ROW><id>2128123</id><snippet>/today/</snippet></ROW><ROW><id>2128123</id><snippet>datime.datetime.now()</snippet></ROW><ROW><id>2128558</id><snippet>filter_by</snippet></ROW><ROW><id>2128558</id><snippet>db.users.filter_by(name='Joe')</snippet></ROW><ROW><id>2128558</id><snippet>filter</snippet></ROW><ROW><id>2128558</id><snippet>db.users.filter(db.users.name=='Joe')</snippet></ROW><ROW><id>2128558</id><snippet>db.users.filter(or_(db.users.name=='Ryan', db.users.country=='England'))</snippet></ROW><ROW><id>2128827</id><snippet>[]</snippet></ROW><ROW><id>2128827</id><snippet>Enumerable.Empty&lt;T&gt;()
</snippet></ROW><ROW><id>2128827</id><snippet>[x]</snippet></ROW><ROW><id>2128827</id><snippet>Enumerable.Repeat(x, 1)
</snippet></ROW><ROW><id>2128827</id><snippet>[[0]*n]</snippet></ROW><ROW><id>2128827</id><snippet>Enumerable.Repeat(Enumerable.Repeat(0, n), 1)
</snippet></ROW><ROW><id>2128827</id><snippet>[X for Y in Z]</snippet></ROW><ROW><id>2128827</id><snippet>from Y in Z select X
   - or -
Z.Select(Y =&gt; X);
</snippet></ROW><ROW><id>2128827</id><snippet>X + Y</snippet></ROW><ROW><id>2128827</id><snippet>Enumerable.Concat(X, Y)
</snippet></ROW><ROW><id>2128827</id><snippet> public IEnumerable&lt;IEnumerable&lt;double&gt;&gt; MultiChoose(int n, int k);
</snippet></ROW><ROW><id>2128900</id><snippet>Operators.keys()</snippet></ROW><ROW><id>2128900</id><snippet>itertools.count</snippet></ROW><ROW><id>2128900</id><snippet>from itertools import count
KS = count()
</snippet></ROW><ROW><id>2128900</id><snippet>Node</snippet></ROW><ROW><id>2128900</id><snippet>class Node(object):
    isRoot = False
    left  = None
    right = None
    parent = None
    branch = None
    seq = 0

    def __init__(self, cargo):
        self.cargo = cargo
</snippet></ROW><ROW><id>2128900</id><snippet>False</snippet></ROW><ROW><id>2128900</id><snippet>None</snippet></ROW><ROW><id>2128900</id><snippet>0</snippet></ROW><ROW><id>2128900</id><snippet>Node</snippet></ROW><ROW><id>2128900</id><snippet>namedtuple</snippet></ROW><ROW><id>2128900</id><snippet>parent</snippet></ROW><ROW><id>2128900</id><snippet>from collections import namedtuple
Node = namedtuple("Node", ["cargo", "left", "right", "branch", "seq", "isRoot"])
# ...
    def build_nodes (self,  depth = Depth, entry = 1,  pparent = None,
         bbranch = None):
        r = random.random()

        if (depth &lt;= 0) or ((r &gt; Ratio) and (not (entry))):
            this_node = Node(
                random.choice(Atoms), None, None, bbranch, KS.next(), False)
            self.thedict[this_node.seq] = this_node
            return this_node

        else:
            this_operator = random.choice(OpKeys)

            this_node = Node(
              this_operator,
              self.build_nodes(entry = 0, depth = depth - 1,
                               pparent = None, bbranch = 'left'),
              self.build_nodes(entry = 0, depth = depth - 2,
                               pparent = None, bbranch = 'right'),
              bbranch, 
              KS.next(), 
              bool(entry))

            self.thedict[this_node.seq] = this_node    
            return this_node
</snippet></ROW><ROW><id>2128900</id><snippet>from collections import namedtuple
Node = namedtuple("Node", ["cargo", "args", "parent", "branch", "seq", "isRoot"])

    def build_nodes (self,  depth = Depth, entry = 1,  pparent = None,
         bbranch = None):
        r = random.random()

        if (depth &lt;= 0) or ((r &gt; Ratio) and (not (entry))):
            this_node = Node(
                random.choice(Atoms), None, pparent, bbranch, KS.next(), False)
            self.thedict[this_node.seq] = this_node
            return this_node

        else:
            this_operator = random.choice(OpKeys)

            this_node = Node(
              this_operator, [], pparent, bbranch,
              KS.next(), bool(entry))
            this_node.args.extend(
              self.build_nodes(entry = 0, depth = depth - (i + 1),
                               pparent = this_node, bbranch = i)
              for i in range(Operators[this_operator]))

            self.thedict[this_node.seq] = this_node    
            return this_node
</snippet></ROW><ROW><id>2128911</id><snippet>library()</snippet></ROW><ROW><id>2128911</id><snippet>from rpy2.robjects import r
r.library("lattice")
r.library("ggplot2")
</snippet></ROW><ROW><id>2129017</id><snippet>len</snippet></ROW><ROW><id>2129017</id><snippet>__len__</snippet></ROW><ROW><id>2129017</id><snippet>size_t</snippet></ROW><ROW><id>2129114</id><snippet># adjust python path if not a system-wide install:
import sys
sys.path.insert(0, "c:/dev/Mercurial/lib")
</snippet></ROW><ROW><id>2129298</id><snippet>parent.getElementsByTagName('Url')[0].childNodes[0].nodeValue
</snippet></ROW><ROW><id>2129373</id><snippet>from SimpleXMLRPCServer import SimpleXMLRPCServer
server = SimpleXMLRPCServer(("localhost", 9876))

def my_func(a,b):
    return a + b

server.register_function(my_func)
server.serve_forever()
</snippet></ROW><ROW><id>2129373</id><snippet>import xmlrpclib
s = xmlrpclib.ServerProxy('http://localhost:9876')

print s.my_func(2,3) 
&gt;&gt;&gt; 5
print type(s.my_func(2,3))
&gt;&gt;&gt; &lt;type 'int'&gt;
print s.my_func(2,3.0):
&gt;&gt;&gt; 7.0
</snippet></ROW><ROW><id>2129378</id><snippet>outer_join</snippet></ROW><ROW><id>2129378</id><snippet>join</snippet></ROW><ROW><id>2129378</id><snippet>'|'.join(['p, 'p', 'p'])</snippet></ROW><ROW><id>2129378</id><snippet>join</snippet></ROW><ROW><id>2129378</id><snippet>['p', 'p', 'p'].join('|')</snippet></ROW><ROW><id>2129378</id><snippet>outer_join</snippet></ROW><ROW><id>2129378</id><snippet>def outer_join(sep, ss):
  sep + ss.join(sep) + sep
end
</snippet></ROW><ROW><id>2129378</id><snippet>expand_blanks</snippet></ROW><ROW><id>2129378</id><snippet>gsub</snippet></ROW><ROW><id>2129378</id><snippet>gsub</snippet></ROW><ROW><id>2129378</id><snippet>def expand_blanks(fen)
  fen.gsub(/\d/) { |match| ' ' * match.to_i }
end
</snippet></ROW><ROW><id>2129378</id><snippet>ascii_draw_chess_position</snippet></ROW><ROW><id>2129378</id><snippet>gsub</snippet></ROW><ROW><id>2129378</id><snippet>replace</snippet></ROW><ROW><id>2129378</id><snippet>map</snippet></ROW><ROW><id>2129378</id><snippet>def ascii_draw_chess_position(fen)
  pieces = expand_blanks(fen).gsub('/', '')
  divider = "+-+-+-+-+-+-+-+-+\n"
  rows = (0...8).map do |i|
    row = pieces[i * 8...(i + 1) * 8].split('')
    outer_join("|",row) + "\n"
  end
  puts outer_join(divider, rows)
end
</snippet></ROW><ROW><id>2129613</id><snippet>pdb</snippet></ROW><ROW><id>2129613</id><snippet>diff</snippet></ROW><ROW><id>2129613</id><snippet>&lt;</snippet></ROW><ROW><id>2129613</id><snippet>&gt;</snippet></ROW><ROW><id>2129613</id><snippet>-</snippet></ROW><ROW><id>2129613</id><snippet>=</snippet></ROW><ROW><id>2129613</id><snippet>Boardd</snippet></ROW><ROW><id>2129613</id><snippet>Board</snippet></ROW><ROW><id>2129613</id><snippet>even</snippet></ROW><ROW><id>2129613</id><snippet>event</snippet></ROW><ROW><id>2129613</id><snippet>rnage</snippet></ROW><ROW><id>2129613</id><snippet>range</snippet></ROW><ROW><id>2129613</id><snippet>37c37
&lt;       self.isStarted = Flase
---
&gt;       self.isStarted = False
63c63
&lt;       self.isWaitingAfterLine - Flase
---
&gt;       self.isWaitingAfterLine = False
87c87
&lt;       for i in range(Board.BoardHeight * Board.Boardwidth):
---
&gt;       for i in range(Board.BoardHeight * Board.BoardWidth):
135c135
&lt;       if even.GetId() == Boardd.ID_TIMER:
---
&gt;       if event.GetId() == Board.ID_TIMER:
205c205
&lt;       self.curY = Board.Height - 1 + self.curPiece.minY()
---
&gt;       self.curY = Board.BoardHeight - 1 + self.curPiece.minY()
214c214
&lt;       for i in rnage(4):
---
&gt;       for i in range(4):
217c217
&lt;           if x &lt; 0 or x &gt;= Board.BoardWidth or y &lt; 0 or y &gt;= Board.Boardheight:
---
&gt;           if x &lt; 0 or x &gt;= Board.BoardWidth or y &lt; 0 or y &gt;= Board.BoardHeight:
278c278
&lt;       self.coords = [[0, 0] for i in rnage(4)]
---
&gt;       self.coords = [[0, 0] for i in range(4)]
356c356,357
&lt; Tetris(None, -1, 'Tetris')
---
&gt; tetris = Tetris(None, -1, 'Tetris')
&gt; app.SetTopWindow(tetris)
</snippet></ROW><ROW><id>2129613</id><snippet>def sqaureHeight</snippet></ROW><ROW><id>2129613</id><snippet>squareHeight</snippet></ROW><ROW><id>2129613</id><snippet>pylint</snippet></ROW><ROW><id>2129613</id><snippet>sqaure</snippet></ROW><ROW><id>2129613</id><snippet>square</snippet></ROW><ROW><id>2129613</id><snippet>raw_input</snippet></ROW><ROW><id>2129652</id><snippet>__setattr__</snippet></ROW><ROW><id>2129652</id><snippet>&gt;&gt;&gt; class Individualist(object):
...   def __init__(self):
...     self.__class__ = type('GottaBeMe', (self.__class__, object), {})
... 
&gt;&gt;&gt; a = Individualist()
&gt;&gt;&gt; b = Individualist()
&gt;&gt;&gt; a.__class__.__int__ = lambda self: 23
&gt;&gt;&gt; b.__class__.__int__ = lambda self: 42
&gt;&gt;&gt; int(a)
23
&gt;&gt;&gt; int(b)
42
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2129652</id><snippet>&gt;&gt;&gt; class Sophisticated(Individualist):
...   def __setattr__(self, n, v):
...     if n[:2]=='__' and n[-2:]=='__' and n!='__class__':
...       setattr(self.__class__, n, v)
...     else:
...       object.__setattr__(self, n, v)
... 
&gt;&gt;&gt; c = Sophisticated()
&gt;&gt;&gt; d = Sophisticated()
&gt;&gt;&gt; c.__int__ = lambda self: 54
&gt;&gt;&gt; d.__int__ = lambda self: 88
&gt;&gt;&gt; int(c)
54
&gt;&gt;&gt; int(d)
88
</snippet></ROW><ROW><id>2129973</id><snippet>instOfA.printSelf = b.printSelf.__get__(instOfA)
</snippet></ROW><ROW><id>2129973</id><snippet>__class__</snippet></ROW><ROW><id>2129973</id><snippet>instOfA.printSelf = instOfB.__class__.printSelf.__get__(instOfA)
</snippet></ROW><ROW><id>2129973</id><snippet>instOfA</snippet></ROW><ROW><id>2129973</id><snippet>a</snippet></ROW><ROW><id>2129973</id><snippet>self</snippet></ROW><ROW><id>2129973</id><snippet>instOfB.printSelf.__func__(instOfA)
</snippet></ROW><ROW><id>2130035</id><snippet>def chunkIt(seq, num):
  avg = len(seq) / float(num)
  out = []
  last = 0.0

  while last &lt; len(seq):
    out.append(seq[int(last):int(last + avg)])
    last += avg

  return out
</snippet></ROW><ROW><id>2130035</id><snippet>&gt;&gt;&gt; chunkIt(range(10), 3)
[[0, 1, 2], [3, 4, 5], [6, 7, 8, 9]]
&gt;&gt;&gt; chunkIt(range(11), 3)
[[0, 1, 2], [3, 4, 5, 6], [7, 8, 9, 10]]
&gt;&gt;&gt; chunkIt(range(12), 3)
[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]
</snippet></ROW><ROW><id>2130405</id><snippet>k</snippet></ROW><ROW><id>2130405</id><snippet>k</snippet></ROW><ROW><id>2130405</id><snippet>X%</snippet></ROW><ROW><id>2130405</id><snippet>k</snippet></ROW><ROW><id>2130405</id><snippet>1</snippet></ROW><ROW><id>2130405</id><snippet>&gt; X%</snippet></ROW><ROW><id>2130405</id><snippet>k += 1</snippet></ROW><ROW><id>2130405</id><snippet>k</snippet></ROW><ROW><id>2130405</id><snippet>def markCluster(items, threshold):
    k = 1
    clusters = [items]
    maxdist = diameter(items)
    while maxdist &gt; threshold:
        k += 1
        clusters = Kmc(items, k)
        maxdist = max(diameter(c) for c in clusters)
    return clusters
</snippet></ROW><ROW><id>2130405</id><snippet>diameter</snippet></ROW><ROW><id>2130405</id><snippet>Kmc</snippet></ROW><ROW><id>2130405</id><snippet>diameter</snippet></ROW><ROW><id>2130405</id><snippet>Kmc</snippet></ROW><ROW><id>2130405</id><snippet>items</snippet></ROW><ROW><id>2130405</id><snippet>numpy</snippet></ROW><ROW><id>2130431</id><snippet>query.values(Comment.comment)</snippet></ROW><ROW><id>2130577</id><snippet>n = [i if i.startswith('h') else 'http' + i for i in n]
</snippet></ROW><ROW><id>2130723</id><snippet>self.cursor.execute("insert into server_table2(server,status,id) values (?,?,?)",(record[0],)(record[1],),(record[2],));
</snippet></ROW><ROW><id>2130723</id><snippet>self.cursor.execute("insert into server_table2(server,status,id) values (?,?,?)",record[0:2])
</snippet></ROW><ROW><id>2130723</id><snippet>executemany</snippet></ROW><ROW><id>2130738</id><snippet>forms</snippet></ROW><ROW><id>2130738</id><snippet>remember_me</snippet></ROW><ROW><id>2130738</id><snippet>form = AuthenticationRememberMeForm()
field_obj = form.fields['remember_me']
</snippet></ROW><ROW><id>2130738</id><snippet>form = AuthenticationRememberMeForm(data)
if form.is_valid():
    remember_me_value = form.cleaned_data['remember_me']
</snippet></ROW><ROW><id>2130738</id><snippet>django.forms</snippet></ROW><ROW><id>2130855</id><snippet>org.python.core.PyObject</snippet></ROW><ROW><id>2130855</id><snippet>Callable</snippet></ROW><ROW><id>2130855</id><snippet>Runnable</snippet></ROW><ROW><id>2130855</id><snippet>PyObjectDerived</snippet></ROW><ROW><id>2130855</id><snippet>;; a handy instance of PythonInterpreter...
(def python (org.python.util.PythonInterpreter.))
(.eval python "5")
; -&gt; #&lt;PyInteger 5&gt;
</snippet></ROW><ROW><id>2130855</id><snippet>(defmulti py-wrap class)
;; but let's not wrap if already a PyObject...
(defmethod py-wrap org.python.core.PyObject [pyo] pyo)
(defmethod py-wrap Integer [n] (org.python.core.PyInteger n))
(defmethod py-wrap Long [n] (org.python.core.PyLong n))
(defmethod py-wrap BigInteger [n] (org.python.core.PyLong n))
(defmethod py-wrap String [s] (org.python.core.PyString s))
</snippet></ROW><ROW><id>2130855</id><snippet>(defmulti py-unwrap class)
;; if unsure, hope it's not a PyObject at all...
(defmethod py-unwrap :default [x] x)
(defmethod py-unwrap org.python.core.PyInteger [n] (.getValue n))
(defmethod py-unwrap org.python.core.PyString [s] (.toString s))
</snippet></ROW><ROW><id>2130855</id><snippet>.__call__</snippet></ROW><ROW><id>2130855</id><snippet>._jcall</snippet></ROW><ROW><id>2130855</id><snippet>PyObject</snippet></ROW><ROW><id>2130855</id><snippet>PyObject</snippet></ROW><ROW><id>2130855</id><snippet>._jcall</snippet></ROW><ROW><id>2130855</id><snippet>(defn py-call [pyf &amp; args]
  (apply (fn [pyf &amp; args] (._jcall pyf (into-array args)))
         (map #(if (string? %) (py-eval %) %)
              (cons pyf args)))
</snippet></ROW><ROW><id>2130855</id><snippet>.exec</snippet></ROW><ROW><id>2130855</id><snippet>fact</snippet></ROW><ROW><id>2130855</id><snippet>(py-call "fact" 10)</snippet></ROW><ROW><id>2130855</id><snippet>#&lt;PyInteger 5&gt;</snippet></ROW><ROW><id>2130920</id><snippet>__getstate__</snippet></ROW><ROW><id>2130920</id><snippet>__setstate__</snippet></ROW><ROW><id>2130968</id><snippet>import pylab
pylab.show()
</snippet></ROW><ROW><id>2130968</id><snippet>ipython -pylab</snippet></ROW><ROW><id>2131301</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; urlparse.urljoin("ftp://domain.com/a/b/c/d/", "../..")
'ftp://domain.com/a/b/'
&gt;&gt;&gt; urlparse.urljoin("ftp://domain.com/a/b/c/d/e.txt", "../..")
'ftp://domain.com/a/b/'    
</snippet></ROW><ROW><id>2131301</id><snippet>urljoin</snippet></ROW><ROW><id>2131301</id><snippet>/</snippet></ROW><ROW><id>2131301</id><snippet>/</snippet></ROW><ROW><id>2131301</id><snippet>os.path</snippet></ROW><ROW><id>2131301</id><snippet>posixpath,normpath</snippet></ROW><ROW><id>2131487</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>2131487</id><snippet>python apache cgi</snippet></ROW><ROW><id>2131611</id><snippet>pydoc -p 8000</snippet></ROW><ROW><id>2131679</id><snippet>django.template.loaders.app_directories.Loader</snippet></ROW><ROW><id>2131679</id><snippet>load_template_source</snippet></ROW><ROW><id>2131679</id><snippet>from django.template.loaders.app_directories import Loader
from shpaml import convert_text

class SHPAMLLoader(Loader):
    def load_template_source(self, *args, **kwargs):
        shpaml_source = super(SHPAMLLoader, self).load_template_source(*args, **kwargs)
        html = convert_text(shpaml_source)
        return html
</snippet></ROW><ROW><id>2131679</id><snippet>TEMPLATE_LOADERS</snippet></ROW><ROW><id>2131993</id><snippet>import ctypes
from ctypes.util import find_library
libc = ctypes.CDLL(find_library('c'))

userpointer = ctypes.c_void_p()
sizeimage = 320*240*2

if libc.posix_memalign(ctypes.byref(userpointer), libc.getpagesize(),
                       sizeimage) != 0:
    raise Exception('ENOMEM')
</snippet></ROW><ROW><id>2132293</id><snippet>mod_ssl</snippet></ROW><ROW><id>2132293</id><snippet>mod_wsgi</snippet></ROW><ROW><id>2132293</id><snippet>httpd.conf</snippet></ROW><ROW><id>2132293</id><snippet>sites-enabled</snippet></ROW><ROW><id>2132293</id><snippet>NameVirtualHost *:443
&lt;VirtualHost *:443&gt;
    SSLEngine On
    SSLCertificateFile /etc/apache2/ssl/certificatefile.crt
    SSLCertificateKeyFile /etc/apache2/ssl/certificatekeyfile.crt

    WSGIScriptAlias / /path/to/file.wsgi
&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>2132538</id><snippet>.strings</snippet></ROW><ROW><id>2132538</id><snippet># -*- coding: utf-8 -*-
import codecs

for line in codecs.open(u'your_file.strings', encoding='utf-16'):
    if u'keyword' in line:
       # process line
</snippet></ROW><ROW><id>2133037</id><snippet>import script
print script.airportCode
</snippet></ROW><ROW><id>2133037</id><snippet>from script import airportCode
print airportCode
</snippet></ROW><ROW><id>2133037</id><snippet>__init__.py</snippet></ROW><ROW><id>2133383</id><snippet>communicate</snippet></ROW><ROW><id>2133383</id><snippet>communicate</snippet></ROW><ROW><id>2133383</id><snippet>stdout</snippet></ROW><ROW><id>2133383</id><snippet>stderr</snippet></ROW><ROW><id>2133383</id><snippet>stdout</snippet></ROW><ROW><id>2133383</id><snippet>stderr</snippet></ROW><ROW><id>2133383</id><snippet>pexpect</snippet></ROW><ROW><id>2133605</id><snippet>join</snippet></ROW><ROW><id>2133681</id><snippet>sFields = gp.ListFields(linktofeatureclass)
for field in sFields:
    print field.Name, field.Type, field.Scale
</snippet></ROW><ROW><id>2133690</id><snippet>_()</snippet></ROW><ROW><id>2133690</id><snippet>django.utils.functional.__proxy__</snippet></ROW><ROW><id>2133690</id><snippet>unicode()</snippet></ROW><ROW><id>2133690</id><snippet>__proxy__</snippet></ROW><ROW><id>2133690</id><snippet>__unicode__</snippet></ROW><ROW><id>2133690</id><snippet>return unicode(self.desc)</snippet></ROW><ROW><id>2133690</id><snippet>gettext</snippet></ROW><ROW><id>2133842</id><snippet>import sys
import zorba_api

def example1(zorba):
  xquery = zorba.compileQuery("1+2")
  print xquery.printPlanAsXML()
  print xquery.execute()
  return

def example2(zorba):
  xquery = zorba.compileQuery("(1,2,3,4,5)")
  iter = xquery.iterator()
  iter.open()
  item = zorba_api.Item_createEmptyItem()
  while iter.next(item):
    print item.getStringValue()
  iter.close()
  iter.destroy()
  return

def example3(zorba):
  try:
    xquery = zorba.compileQuery("1 div 0")
    print xquery.execute()
  except RuntimeError, e:
    print e
  return
</snippet></ROW><ROW><id>2134108</id><snippet>gtk.Builder</snippet></ROW><ROW><id>2134108</id><snippet>one</snippet></ROW><ROW><id>2134108</id><snippet>class one(gtk.VBox):

  def __init__(self):
    gtk.VBox.__init__(self)
    self.builder = gtk.Builder()
    self.builder.add_from_file("ui_for_one.glade")
    some_widget = self.builder.get_object("some_widget")
    self.add(some_widget)
    self.builder.connect_signals(self)
    # No reason to call self.show() here, that should be done manually.

  #Your callback functions here

class two(object):  # This is the page in a notebook.   

  def __init__(self):
    self.builder = gtk.Builder()
    self.builder.add_from_file("ui_for_two.glade")
    self.some_container = self.builder.get_object("some_container")
    self.one = one()
    self.some_container.pack_start(self.one, False, False)
    self.some_container.show_all() #recursively show some_container and all its child widgets

    self.builder.connect_signals(self)
</snippet></ROW><ROW><id>2134487</id><snippet>threading.py</snippet></ROW><ROW><id>2134487</id><snippet>&gt;&gt;&gt; import threading
&gt;&gt;&gt; class SessionManager(threading.Thread, threading._RLock, dict): pass
... 
&gt;&gt;&gt; s = SessionManager()
&gt;&gt;&gt; s.start()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/threading.py", line 469, in start
    _limbo[self] = self
TypeError: unhashable type: 'SessionManager'
</snippet></ROW><ROW><id>2134487</id><snippet>threading.py</snippet></ROW><ROW><id>2134487</id><snippet>def __eq__(self, other): return self is other
def __hash__(self): return hash(id(self))
</snippet></ROW><ROW><id>2134570</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>2134570</id><snippet>import operator
line=','.join(map(str,range(11)))
print(line)
# 0,1,2,3,4,5,6,7,8,9,10
alist=line.split(',')
print(alist)
# ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
one,four,ten=operator.itemgetter(1,4,10)(alist)
print(one,four,ten)
# ('1', '4', '10')
</snippet></ROW><ROW><id>2134962</id><snippet>flock</snippet></ROW><ROW><id>2134962</id><snippet>lockf</snippet></ROW><ROW><id>2135176</id><snippet>sys.setrecursionlimit()</snippet></ROW><ROW><id>2135231</id><snippet>import sys

try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())

except IOError as (errno, strerror):
    print "I/O error({0}): {1}".format(errno, strerror)
except ValueError:
    print "Could not convert data to an integer."
except:
    print "Unexpected error:", sys.exc_info()[0]
    raise
</snippet></ROW><ROW><id>2135231</id><snippet>except</snippet></ROW><ROW><id>2135231</id><snippet>sys.exc_info()[0]</snippet></ROW><ROW><id>2135475</id><snippet>beamer</snippet></ROW><ROW><id>2135475</id><snippet>listings</snippet></ROW><ROW><id>2135475</id><snippet>\lstinputlisting[firstline=2,lastline=5]{code/get_extent.py}
</snippet></ROW><ROW><id>2135502</id><snippet>a = [a00, a01,.... ]
#Readed, take a list with 0,2,4... len(a) [15, will stop at 14]
# then make a[i]*256 + a[i+1], so
# a[0]*256+a[1], a[2]*256+a[3], ... a[14]*256+a[15]
b = [ a[i]*256+a[i+1] for i in range(0,len(a),2) ]
</snippet></ROW><ROW><id>2136181</id><snippet>import datetime

first=datetime.date(2009,10,12)
last=datetime.date(2009,10,20)
adate=first
dates=[]
while adate&lt;=last:
    dates.append(adate)
    adate+=datetime.timedelta(1)
print(dates)
</snippet></ROW><ROW><id>2136181</id><snippet>len=(last-first).days
dates=[first+datetime.timedelta(n) for n in range(len+1)]
</snippet></ROW><ROW><id>2136323</id><snippet>&gt;&gt;&gt; import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup('&lt;html&gt;&lt;body&gt;&lt;div id="articlebody"&gt; ... &lt;/div&gt;&lt;/body&gt;&lt;/html')
&gt;&gt;&gt; soup.find("div", {"id": "articlebody"})
&lt;div id="articlebody"&gt; ... &lt;/div&gt;
</snippet></ROW><ROW><id>2136323</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>2136323</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>2136323</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup('&lt;html&gt;&lt;body&gt;&lt;div&gt;&lt;div id="articlebody"&gt; ... &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html')
&gt;&gt;&gt; soup.find("div", {"id": "articlebody"})
&lt;div id="articlebody"&gt; ... &lt;/div&gt;
</snippet></ROW><ROW><id>2136580</id><snippet>&gt;&gt;&gt; re.split('(\W)', 'foo/bar spam\neggs')
['foo', '/', 'bar', ' ', 'spam', '\n', 'eggs']
</snippet></ROW><ROW><id>2136670</id><snippet>type-&gt;tp_init</snippet></ROW><ROW><id>2136670</id><snippet>type-&gt;tp_init</snippet></ROW><ROW><id>2136670</id><snippet>type-&gt;tp_new</snippet></ROW><ROW><id>2136670</id><snippet>type-&gt;tp_init</snippet></ROW><ROW><id>2136670</id><snippet>tp_init</snippet></ROW><ROW><id>2136670</id><snippet>PyObject_Call*()</snippet></ROW><ROW><id>2136670</id><snippet>PyFoo_New()</snippet></ROW><ROW><id>2136670</id><snippet>PyImport_Import()</snippet></ROW><ROW><id>2136670</id><snippet>PyObject_GetAttrString()</snippet></ROW><ROW><id>2136670</id><snippet>PyObject_Call*()</snippet></ROW><ROW><id>2136670</id><snippet>PyObject *</snippet></ROW><ROW><id>2136821</id><snippet>seek()</snippet></ROW><ROW><id>2136821</id><snippet>n</snippet></ROW><ROW><id>2136854</id><snippet>class Foo(object):
    pass

class Bar(object):
    pass

dispatch_dict = {"Foo": Foo, "Bar": Bar}
dispatch_dict["Foo"]() # returns an instance of Foo
</snippet></ROW><ROW><id>2136939</id><snippet>def outerfunc(calltheinner=True):
    def innerfunc():
        do_something()
    if calltheinner:
        return innerfunc()
    else:
        return innerfunc
</snippet></ROW><ROW><id>2136956</id><snippet>fork</snippet></ROW><ROW><id>2136956</id><snippet>dict</snippet></ROW><ROW><id>2136956</id><snippet>dict</snippet></ROW><ROW><id>2137205</id><snippet>return super(Parent, cls).__new__(cls, *args, **kwargs)
</snippet></ROW><ROW><id>2137205</id><snippet>bases</snippet></ROW><ROW><id>2137324</id><snippet>def makeExpr(ch):
    expr = Word(ch).setParseAction(lambda tokens: [ch,len(tokens[0])])
    return expr

expr = Each([Optional(makeExpr(ch)) for ch in "abc"])

for t in tests:
    print t,expr.parseString(t).asList()
</snippet></ROW><ROW><id>2137351</id><snippet>import re

reexpr = r"""
    (                           # Capture code
        "(?:\\.|[^"\\])*"       # String literal
        |
        '(?:\\.|[^'\\])*'       # String literal
        |
        (?:[^/\n"']|/[^/*\n"'])+ # Any code besides newlines or string literals
        |
        \n                      # Newline
    )|
    (/\*  (?:[^*]|\*[^/])*   \*/)        # Multi-line comment
    |
    (?://(.*)$)                 # Comment
    $"""
rx = re.compile(reexpr, re.VERBOSE + re.MULTILINE)
</snippet></ROW><ROW><id>2137351</id><snippet>code = r"""// this is a comment
var x = 2 * 4 // and this is a comment too
var url = "http://www.google.com/" // and "this" too
url += 'but // this is not a comment' // however this one is
url += 'this "is not a comment' + " and ' neither is this " // only this

bar = 'http://no.comments.com/' // these // are // comments
bar = 'text // string \' no // more //\\' // comments
bar = 'http://no.comments.com/'
bar = /var/ // comment

/* comment 1 */
bar = open() /* comment 2 */
bar = open() /* comment 2b */// another comment
bar = open( /* comment 3 */ file) // another comment 
"""

parts = rx.findall(code)
print '*' * 80, '\nCode:\n\n', '\n'.join([x[0] for x in parts if x[0].strip()])
print '*' * 80, '\nMulti line comments:\n\n', '\n'.join([x[1] for x in parts if x[1].strip()])
print '*' * 80, '\nOne line comments:\n\n', '\n'.join([x[2] for x in parts if x[2].strip()])
</snippet></ROW><ROW><id>2137389</id><snippet>status = db.query("INSERT INTO users ...")
if (!status):
    raise Error, db.error
</snippet></ROW><ROW><id>2137389</id><snippet>raise Error, db.error</snippet></ROW><ROW><id>2137389</id><snippet>user = User('Boda Cydo')
session.add(user)
session.commit()
</snippet></ROW><ROW><id>2137389</id><snippet>help(sqlalchemy.exc)</snippet></ROW><ROW><id>2137389</id><snippet>help(sqlalchemy.orm.exc)</snippet></ROW><ROW><id>2137389</id><snippet>sqlalchemy.exc</snippet></ROW><ROW><id>2137389</id><snippet>ArgumentError</snippet></ROW><ROW><id>2137389</id><snippet>CircularDependencyError</snippet></ROW><ROW><id>2137389</id><snippet>CompileError</snippet></ROW><ROW><id>2137389</id><snippet>ConcurrentModificationError</snippet></ROW><ROW><id>2137389</id><snippet>DBAPIError</snippet></ROW><ROW><id>2137389</id><snippet>statement</snippet></ROW><ROW><id>2137389</id><snippet>params</snippet></ROW><ROW><id>2137389</id><snippet>orig</snippet></ROW><ROW><id>2137389</id><snippet>DataError</snippet></ROW><ROW><id>2137389</id><snippet>DataError</snippet></ROW><ROW><id>2137389</id><snippet>DatabaseError</snippet></ROW><ROW><id>2137389</id><snippet>DatabaseError</snippet></ROW><ROW><id>2137389</id><snippet>DisconnectionError</snippet></ROW><ROW><id>2137389</id><snippet>PoolListener</snippet></ROW><ROW><id>2137389</id><snippet>FlushError</snippet></ROW><ROW><id>2137389</id><snippet>IdentifierError</snippet></ROW><ROW><id>2137389</id><snippet>IntegrityError</snippet></ROW><ROW><id>2137389</id><snippet>IntegrityError</snippet></ROW><ROW><id>2137389</id><snippet>InterfaceError</snippet></ROW><ROW><id>2137389</id><snippet>InterfaceError</snippet></ROW><ROW><id>2137389</id><snippet>InternalError</snippet></ROW><ROW><id>2137389</id><snippet>InternalError</snippet></ROW><ROW><id>2137389</id><snippet>InvalidRequestError</snippet></ROW><ROW><id>2137389</id><snippet>NoReferenceError</snippet></ROW><ROW><id>2137389</id><snippet>ForeignKey</snippet></ROW><ROW><id>2137389</id><snippet>NoReferencedColumnError</snippet></ROW><ROW><id>2137389</id><snippet>ForeignKey</snippet></ROW><ROW><id>2137389</id><snippet>Column</snippet></ROW><ROW><id>2137389</id><snippet>NoReferencedTableError</snippet></ROW><ROW><id>2137389</id><snippet>ForeignKey</snippet></ROW><ROW><id>2137389</id><snippet>Table</snippet></ROW><ROW><id>2137389</id><snippet>NoSuchColumnError</snippet></ROW><ROW><id>2137389</id><snippet>RowProxy</snippet></ROW><ROW><id>2137389</id><snippet>NoSuchTableError</snippet></ROW><ROW><id>2137389</id><snippet>NotSupportedError</snippet></ROW><ROW><id>2137389</id><snippet>NotSupportedError</snippet></ROW><ROW><id>2137389</id><snippet>OperationalError</snippet></ROW><ROW><id>2137389</id><snippet>OperationalError</snippet></ROW><ROW><id>2137389</id><snippet>ProgrammingError</snippet></ROW><ROW><id>2137389</id><snippet>ProgrammingError</snippet></ROW><ROW><id>2137389</id><snippet>SQLAlchemyError</snippet></ROW><ROW><id>2137389</id><snippet>SQLError</snippet></ROW><ROW><id>2137389</id><snippet>TimeoutError</snippet></ROW><ROW><id>2137389</id><snippet>UnboundExecutionError</snippet></ROW><ROW><id>2137389</id><snippet>UnmappedColumnError</snippet></ROW><ROW><id>2137389</id><snippet>sqlalchemy.orm.exc</snippet></ROW><ROW><id>2137389</id><snippet>ConcurrentModificationError</snippet></ROW><ROW><id>2137389</id><snippet>FlushError</snippet></ROW><ROW><id>2137389</id><snippet>ObjectDeletedError</snippet></ROW><ROW><id>2137389</id><snippet>UnmappedClassError</snippet></ROW><ROW><id>2137389</id><snippet>UnmappedColumnError</snippet></ROW><ROW><id>2137389</id><snippet>UnmappedError</snippet></ROW><ROW><id>2137389</id><snippet>UnmappedInstanceError</snippet></ROW><ROW><id>2137482</id><snippet>try:
  1/0
except ZeroDivisionError:
  pass
</snippet></ROW><ROW><id>2137789</id><snippet>seenpositions = set()
currentpositions = set([startingposition])
while currentpositions:
  nextpositions = set()
  for p in currentpositions:
    seenpositions.add(p)
    succ = possiblesuccessors(p)
    for np in succ:
      if np in seenpositions: continue
      if isending(np): raise FoundSolution(np)
      nextpositions.add(np)
  currentpositions = nextpositions
raise NoSolutionExists()
</snippet></ROW><ROW><id>2137789</id><snippet>possiblesuccessors</snippet></ROW><ROW><id>2137789</id><snippet>isending</snippet></ROW><ROW><id>2137790</id><snippet>safe</snippet></ROW><ROW><id>2137790</id><snippet>escape</snippet></ROW><ROW><id>2137790</id><snippet>autoescape</snippet></ROW><ROW><id>2137790</id><snippet>{% autoescape on %}</snippet></ROW><ROW><id>2137790</id><snippet>{% autoescape off %}</snippet></ROW><ROW><id>2137801</id><snippet>self = Test(3)</snippet></ROW><ROW><id>2137801</id><snippet>self</snippet></ROW><ROW><id>2137801</id><snippet>self.__dict__</snippet></ROW><ROW><id>2137801</id><snippet>__slots__</snippet></ROW><ROW><id>2137801</id><snippet>self.__init__(3)</snippet></ROW><ROW><id>2137801</id><snippet>self.restart(3)</snippet></ROW><ROW><id>2137965</id><snippet>Image.open()
</snippet></ROW><ROW><id>2138201</id><snippet># The following two classes are toys, both have a playWith 
# as you wanted, each playWith do different things
class Ball:
    def __init__(self):
        self.name = "ball"

    def playWith(self):
        print "the ball bounces"

class Car:
    def __init__(self):
        self.name = "car"

    def playWith(self):
        print "the car is fast"

# This is a Python generator, every time .next() is called on it,
# the next "yield-value" is returned
def generator():
    while True:
        yield Ball()
        yield Car()

# This is the creator, it has to be a class rather than a function
# since you wanted a new toy each time getNewToy is called
# and as such the generator needs to be tracked
class ToyCreator:
    def __init__(self):
        self.generator = generator()

    def getNewToy(self):
        return self.generator.next()

# Create five toys, print their name and play with them
# Do note here that even though we ask for five toys but only have
# two "yields" in the generator, the generator "wraps around" (since,
# internally, its just an endless loop) 
toyCreator = ToyCreator()
for i in range(5):
    toy = toyCreator.getNewToy()
    print "Toy",i,toy.name,"\t:",
    toy.playWith()
</snippet></ROW><ROW><id>2138641</id><snippet>#pragma comment(lib, "python25.lib");
</snippet></ROW><ROW><id>2138894</id><snippet>item = defaultvalue
for item in my_iter:
    pass
</snippet></ROW><ROW><id>2139168</id><snippet>__import__()</snippet></ROW><ROW><id>2139168</id><snippet>user_language = getattr(__import__('localizable.%s' % language), language)
</snippet></ROW><ROW><id>2139168</id><snippet>user_language __import__('localizable.%s' % language, {}, globals(), [''])
</snippet></ROW><ROW><id>2139168</id><snippet>__import__</snippet></ROW><ROW><id>2139284</id><snippet>if __name__=='__main__'</snippet></ROW><ROW><id>2139284</id><snippet>#....
def start():
    global download_worker
    download_worker = Process(target=downloader, args=(url_queue, page_queue))
    download_worker.start()
</snippet></ROW><ROW><id>2139284</id><snippet>import module
if __name__=='__main__':
    module.start()
    module.url_queue.put('http://foobar1')
    #....
</snippet></ROW><ROW><id>2139763</id><snippet>"Field1","Field2"</snippet></ROW><ROW><id>2139763</id><snippet>"Field1"",""Field2"</snippet></ROW><ROW><id>2139849</id><snippet>def classStream(clazz: Class[_]): Stream[Class[_]] = clazz match {
  case null =&gt; Stream.empty
  case _ =&gt; (
    clazz 
    #:: classStream(clazz.getSuperclass) 
    #::: clazz.getInterfaces.toStream.flatMap(classStream) 
    #::: Stream.empty
  )
}
</snippet></ROW><ROW><id>2139849</id><snippet>def classStream(clazz: Class[_]): Stream[Class[_]] = clazz match {
  case null =&gt; Stream.empty
  case _ =&gt; (
    clazz 
    #:: { println(clazz.toString+": super"); classStream(clazz.getSuperclass) } 
    #::: { println(clazz.toString+": interfaces"); clazz.getInterfaces.toStream.flatMap(classStream) } 
    #::: Stream.empty
  )
}
</snippet></ROW><ROW><id>2139849</id><snippet>Iterator</snippet></ROW><ROW><id>2139849</id><snippet>.iterator</snippet></ROW><ROW><id>2139849</id><snippet>Stream</snippet></ROW><ROW><id>2139849</id><snippet>def classIterator(clazz: Class[_]): Iterator[Class[_]] = classStream(clazz).iterator
</snippet></ROW><ROW><id>2139849</id><snippet>foo</snippet></ROW><ROW><id>2139849</id><snippet>Stream</snippet></ROW><ROW><id>2139849</id><snippet>scala&gt; def foo(i: Int): Stream[Int] = i #:: (if (i &gt; 0) foo(i - 1) else Stream.empty)
foo: (i: Int)Stream[Int]

scala&gt; foo(5) foreach println
5
4
3
2
1
0
</snippet></ROW><ROW><id>2139849</id><snippet>def yieldClass(clazz: Class[_]): Iterator[Class[_]] = clazz match {
  case null =&gt; println("empty"); Iterator.empty
  case _ =&gt;
    def thisIterator = { println("self of "+clazz); Iterator(clazz) }
    def superIterator = { println("super of "+clazz); yieldClass(clazz.getSuperclass) }
    def interfacesIterator = { println("interfaces of "+clazz); clazz.getInterfaces.iterator flatMap yieldClass }
    thisIterator ++ superIterator ++ interfacesIterator
}
</snippet></ROW><ROW><id>2139849</id><snippet>sudoYield</snippet></ROW><ROW><id>2139942</id><snippet># loop on all the files
for num in range(1,1000):

    cfile = open ( 'c%u.dat'%num, mode='r')

    # find the specific line
    for line in cfile:
        if line[0]=='@':

            # open the determined file and add the line
            dfile = open( 'determined_c%u_send.dat'%num, mode='a')
            dfile.write( line[1:-1] )
            dfile.close()

    cfile.close()
</snippet></ROW><ROW><id>2139942</id><snippet>for i in {1..2}
do
    mv "determined_c${i}_send.dat" "temp.out"
    cat c1.dat | grep @ | tr -d "@" &gt;  "determined_c${i}_send.dat"
    cat temp.out &gt;&gt; "determined_c${i}_send.dat"
done
rm temp.out
</snippet></ROW><ROW><id>2140044</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>2140044</id><snippet>test</snippet></ROW><ROW><id>2140044</id><snippet>RunTest</snippet></ROW><ROW><id>2140044</id><snippet>RunTest</snippet></ROW><ROW><id>2140044</id><snippet>test_RunTest</snippet></ROW><ROW><id>2140044</id><snippet>class TestPing(unittest.TestCase):
    def test_RunTest(self):
         add code here
</snippet></ROW><ROW><id>2140044</id><snippet>test_RunTest</snippet></ROW><ROW><id>2140044</id><snippet>self</snippet></ROW><ROW><id>2140044</id><snippet>func(args)</snippet></ROW><ROW><id>2140044</id><snippet>self.assertRaises</snippet></ROW><ROW><id>2140044</id><snippet>self.assertRaises(AssertionError, func, args)
</snippet></ROW><ROW><id>2140044</id><snippet>func</snippet></ROW><ROW><id>2140044</id><snippet>True</snippet></ROW><ROW><id>2140044</id><snippet>False</snippet></ROW><ROW><id>2140044</id><snippet>self.assertTrue</snippet></ROW><ROW><id>2140044</id><snippet>self.assertFalse</snippet></ROW><ROW><id>2140112</id><snippet>#include &lt;boost/shared_ptr.hpp&gt;
#include &lt;boost/python.hpp&gt;
#include &lt;boost/python/signature.hpp&gt;
#include &lt;boost/mpl/vector.hpp&gt;

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;

static boost::shared_ptr&lt;std::ostringstream&gt; test_stream_data;

std::ostringstream&amp; test_stream()
{
    if (!test_stream_data) {
        test_stream_data.reset(new std::ostringstream);
    }
    return *test_stream_data;
}


std::string get_value_and_clear_test_stream()
{
    std::string result;
    if (test_stream_data) {
        result = test_stream_data-&gt;str();
    }
    test_stream_data.reset(new std::ostringstream);
    return result;
}


std::string func(int a, double b)
{
    std::ostringstream oss;
    oss &lt;&lt; "func(a=" &lt;&lt; a &lt;&lt; ", b=" &lt;&lt; b &lt;&lt; ")";
    std::string result = oss.str();
    test_stream() &lt;&lt; "- In " &lt;&lt; result &lt;&lt; std::endl;
    return result;
}


class MyClass
{
public:
    MyClass(std::string p_name)
        : m_name(p_name)
    {
        test_stream() &lt;&lt; "- In MyClass::MyClass(p_name=\"" &lt;&lt; p_name &lt;&lt; "\")" &lt;&lt; std::endl;
    }

    MyClass(MyClass const&amp; p_another)
        : m_name(p_another.m_name)
    {
        test_stream()
            &lt;&lt; "- In MyClass::MyClass(p_another=MyClass(\""
            &lt;&lt; p_another.m_name &lt;&lt; "\"))" &lt;&lt; std::endl;
    }

    ~MyClass()
    {
        test_stream() &lt;&lt; "- In MyClass(\"" &lt;&lt; this-&gt;m_name &lt;&lt; "\")::~MyClass()" &lt;&lt; std::endl;
    }

    boost::shared_ptr&lt;MyClass&gt; clone_and_change(std::string p_new_name)
    {
        test_stream()
            &lt;&lt; "- In MyClass(\"" &lt;&lt; this-&gt;m_name &lt;&lt; "\").clone_and_change(p_new_name=\""
            &lt;&lt; p_new_name &lt;&lt; "\")" &lt;&lt; std::endl;

        boost::shared_ptr&lt;MyClass&gt; result(new MyClass(*this));
        result-&gt;m_name = p_new_name;

        return result;
    }

    std::string get_name()
    {
        test_stream() &lt;&lt; "- In MyClass(\"" &lt;&lt; this-&gt;m_name &lt;&lt; "\").get_name()" &lt;&lt; std::endl;
        return this-&gt;m_name;
    }

    std::string m_name;
};


struct ScopePreAndPostActions
{
    ScopePreAndPostActions()
    {
        test_stream() &lt;&lt; "[Before action...]" &lt;&lt; std::endl;
    }

    ~ScopePreAndPostActions()
    {
        test_stream() &lt;&lt; "[After action...]" &lt;&lt; std::endl;
    }
};





template &lt;class FuncType_&gt;
struct FuncWrapper;

// You can code-generate specializations for other arities...

template &lt;class R_, class A0_, class A1_&gt;
struct FuncWrapper&lt;R_ (A0_, A1_)&gt;
{
    typedef R_ (*func_type)(A0_, A1_);

    typedef typename boost::add_const&lt;typename boost::add_reference&lt;typename A0_&gt;::type&gt;::type AC0_;
    typedef typename boost::add_const&lt;typename boost::add_reference&lt;typename A1_&gt;::type&gt;::type AC1_;

    func_type m_wrapped_func;

    FuncWrapper(func_type p_wrapped_func)
        : m_wrapped_func(p_wrapped_func)
    {
    }

    R_ operator()(AC0_ p0, AC1_ p1)
    {
        ScopePreAndPostActions actions_guard;
        return this-&gt;m_wrapped_func(p0, p1);
    }
};

template &lt;
    class R_,
    class C_,
    class A0_=void,
    class A1_=void,
    class A2_=void
    // ...
&gt;
struct MemberFuncWrapper;

template &lt;class R_, class C_, class A0_&gt;
struct MemberFuncWrapper&lt;R_, C_, A0_&gt;
{
    typedef R_ (C_::*member_func_type)(A0_);

    typedef typename boost::add_const&lt;typename boost::add_reference&lt;typename A0_&gt;::type&gt;::type AC0_;

    member_func_type m_wrapped_method;

    MemberFuncWrapper(member_func_type p_wrapped_method)
        : m_wrapped_method(p_wrapped_method)
    {
    }

    R_ operator()(C_* p_self, AC0_ p0)
    {
        ScopePreAndPostActions actions_guard;
        return (p_self-&gt;*(this-&gt;m_wrapped_method))(p0);
        return R_();
    }
};



namespace boost { namespace python { namespace detail {

    // You can code-generate specializations for other arities...

    template &lt;class R_, class P0_, class P1_&gt;
    inline boost::mpl::vector&lt;R_, P0_, P1_&gt;
    get_signature(FuncWrapper&lt;R_ (P0_, P1_)&gt;, void* = 0)
    {
        return boost::mpl::vector&lt;R_, P0_, P1_&gt;();
    }

    template &lt;class R_, class C_, class P0_&gt;
    inline boost::mpl::vector&lt;R_, C_*, P0_&gt;
    get_signature(MemberFuncWrapper&lt;R_, C_, P0_&gt;, void* = 0)
    {
        return boost::mpl::vector&lt;R_, C_*, P0_&gt;();
    }

} } }

// -------------------------------------------------------------------

template &lt;class FuncPtr_&gt;
void make_wrapper(FuncPtr_);

// You can code-generate specializations for other arities...

template &lt;class R_, class A0_, class A1_&gt;
FuncWrapper&lt;R_ (A0_, A1_)&gt; make_wrapper(R_ (*p_wrapped_func)(A0_, A1_))
{
    return FuncWrapper&lt;R_ (A0_, A1_)&gt;(p_wrapped_func);
}

template &lt;class R_, class C_, class A0_&gt;
MemberFuncWrapper&lt;R_, C_, A0_&gt; make_wrapper(R_ (C_::*p_wrapped_method)(A0_))
{
    return MemberFuncWrapper&lt;R_, C_, A0_&gt;(p_wrapped_method);
}

template &lt;class R_, class C_, class A0_, class A1_&gt;
MemberFuncWrapper&lt;R_, C_, A0_, A1_&gt; make_wrapper(R_ (C_::*p_wrapped_method)(A0_, A1_))
{
    return MemberFuncWrapper&lt;R_, C_, A0_, A1_&gt;(p_wrapped_method);
}


using namespace boost::python;

void RegisterTestWrapper()
{
    def("GetValueAndClearTestStream", &amp;get_value_and_clear_test_stream);
    def("TestFunc", &amp;func);
    def(
        "TestWrappedFunctor",
        make_wrapper(&amp;func)
    );

    {
        class_&lt; MyClass, shared_ptr&lt;MyClass&gt;, boost::noncopyable &gt; c("MyClass", init&lt;std::string&gt;());
        c.def("CloneAndChange", &amp;MyClass::clone_and_change);
        c.def("GetName", &amp;MyClass::get_name);
        c.def("WrappedCloneAndChange", make_wrapper(&amp;MyClass::clone_and_change));
    }
}
</snippet></ROW><ROW><id>2140112</id><snippet>import unittest
from _test_wrapper import GetValueAndClearTestStream, TestFunc, TestWrappedFunctor, MyClass

class Test(unittest.TestCase):

    def setUp(self):
        GetValueAndClearTestStream()

    def testWrapper(self):
        self.assertEqual(TestFunc(69, 1.618), 'func(a=69, b=1.618)')
        self.assertEqual(GetValueAndClearTestStream(), '- In func(a=69, b=1.618)\n')

        self.assertEqual(TestWrappedFunctor(69, 1.618), 'func(a=69, b=1.618)')
        self.assertEqual(
            GetValueAndClearTestStream(),
            (
                '[Before action...]\n'
                '- In func(a=69, b=1.618)\n'
                '[After action...]\n'
            ),
        )

def testWrappedMemberFunction(self):
    from textwrap import dedent
    x = MyClass("xx")
    y = x.WrappedCloneAndChange("yy")
    z = y.WrappedCloneAndChange("zz")

    self.assertEqual(x.GetName(), "xx")
    self.assertEqual(y.GetName(), "yy")
    self.assertEqual(z.GetName(), "zz")

    self.assertEqual(
        GetValueAndClearTestStream(),
        dedent('''\
        - In MyClass::MyClass(p_name="xx")
        [Before action...]
        - In MyClass("xx").clone_and_change(p_new_name="yy")
        - In MyClass::MyClass(p_another=MyClass("xx"))
        [After action...]
        [Before action...]
        - In MyClass("yy").clone_and_change(p_new_name="zz")
        - In MyClass::MyClass(p_another=MyClass("yy"))
        [After action...]
        - In MyClass("xx").get_name()
        - In MyClass("yy").get_name()
        - In MyClass("zz").get_name()
        '''),
    )
</snippet></ROW><ROW><id>2140635</id><snippet>SyntaxError</snippet></ROW><ROW><id>2140635</id><snippet>try:
    eval("1 + 2) + 3")
except SyntaxError:
    pass
</snippet></ROW><ROW><id>2140678</id><snippet>from django.contrib.auth.decorators import login_required
from django.views.generic.simple import direct_to_template
urlpatterns = patterns('',
    (r'^foo/$', login_required(direct_to_template), {'template': 'foo_index.html'}),
    )
</snippet></ROW><ROW><id>2140678</id><snippet>login_required</snippet></ROW><ROW><id>2140678</id><snippet>login_required(TemplateView.as_view(template_name='foo_index.html'))
</snippet></ROW><ROW><id>2140681</id><snippet>#! /usr/bin/perl -i.bak    
use warnings;
use strict;
my $template =
  '^( public
      String
      Get)(\w+)( \( \) { return
        m_ParsedValue . get \( m_Tags . get \( )(\d+)( \) \) ; } )$';
$template =~ s/ +/\\s*/g;
$template =~ s/(\r?\n)+/\\s+/g;
my $getter = qr/$template/x;

die "Usage: $0 after new-name source ..\n" unless @ARGV &gt;= 3;
my $after = shift;
my $add   = shift;
my $index;
while (&lt;&gt;) {
  unless (/$getter/) {
    print;
    next;
  }
  my($abc,$name,$lmno,$i,$xyz) = ($1,$2,$3,$4,$5);
  if (defined $index) {
    print join "" =&gt; $abc, $name, $lmno, ++$index, $xyz;
  }
  else {
    if ($name eq $after) {
      $index = $i;
      print; print join "" =&gt; $abc, $add, $lmno, ++$index, $xyz;
    }
    else { print; }
  }
}
</snippet></ROW><ROW><id>2140991</id><snippet>plt.xlabel(u'\u03bc = 50')
plt.ylabel(u'\u03c3 = 1.5')
</snippet></ROW><ROW><id>2141044</id><snippet>'''Example that demonstrates keeping track of multiple key events'''
from Tkinter import *

class Playfield:
    def __init__(self):
        # this dict keeps track of keys that have been pressed but not
        # released
        self.pressed = {}

        self._create_ui()

    def start(self):
        self._animate()
        self.root.mainloop()

    def _create_ui(self):
        self.root = Tk()
        self.p1label = Label(text="press w, s to move player 1 up, down", 
                             anchor="w")
        self.p2label = Label(text="press o, l to move player 2 up, down", 
                             anchor="w")
        self.canvas = Canvas(width=440, height=440)
        self.canvas.config(scrollregion=(-20, -20, 420, 420))

        self.p1label.pack(side="top", fill="x")
        self.p2label.pack(side="top", fill="x")
        self.canvas.pack(side="top", fill="both", expand="true")

        self.p1 = Paddle(self.canvas, tag="p1", color="red", x=0, y=0)
        self.p2 = Paddle(self.canvas, tag="p2", color="blue", x=400, y=0)

        self._set_bindings()

    def _animate(self):
        if self.pressed["w"]: self.p1.move_up()
        if self.pressed["s"]: self.p1.move_down()
        if self.pressed["o"]: self.p2.move_up()
        if self.pressed["l"]: self.p2.move_down()
        self.p1.redraw()
        self.p2.redraw()
        self.root.after(10, self._animate)

    def _set_bindings(self):
        for char in ["w","s","o", "l"]:
            self.root.bind("&lt;KeyPress-%s&gt;" % char, self._pressed)
            self.root.bind("&lt;KeyRelease-%s&gt;" % char, self._released)
            self.pressed[char] = False

    def _pressed(self, event):
        self.pressed[event.char] = True

    def _released(self, event):
        self.pressed[event.char] = False

class Paddle():
    def __init__(self, canvas, tag, color="red", x=0, y=0):
        self.canvas = canvas
        self.tag = tag
        self.x = x
        self.y = y
        self.color = color
        self.redraw()

    def move_up(self):
        self.y = max(self.y -2, 0)

    def move_down(self):
        self.y = min(self.y + 2, 400)

    def redraw(self):
        x0 = self.x - 10
        x1 = self.x + 10
        y0 = self.y - 20
        y1 = self.y + 20
        self.canvas.delete(self.tag)
        self.canvas.create_rectangle(x0,y0,x1,y1,tags=self.tag, fill=self.color)

if __name__ == "__main__":
    p = Playfield()
    p.start()
</snippet></ROW><ROW><id>2141116</id><snippet>my_list=[1,2,3]
[print my_item for my_item in my_list]
</snippet></ROW><ROW><id>2141242</id><snippet>\bin</snippet></ROW><ROW><id>2141242</id><snippet>python setup.py install
</snippet></ROW><ROW><id>2141392</id><snippet>&gt;&gt;&gt; s = 'bar'
&gt;&gt;&gt; s[2] = 'z'
Traceback (most recent call last):
   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object does not support item assignment
</snippet></ROW><ROW><id>2141761</id><snippet>my_new_list = my_list[:]
</snippet></ROW><ROW><id>2141791</id><snippet>Entry.objects.all().update(value= not F('value'))
</snippet></ROW><ROW><id>2142154</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; html_string = re.sub(r'\s\s+', ' ', html_string)
</snippet></ROW><ROW><id>2142154</id><snippet>&gt;&gt;&gt; html_string = ' '.join(html_string.split())
</snippet></ROW><ROW><id>2142224</id><snippet>using System;
using System.IO;
using System.Reflection;
using IronPython.Hosting;
using Microsoft.Scripting.Hosting;
// we get access to Action and Func on .Net 2.0 through Microsoft.Scripting.Utils
using Microsoft.Scripting.Utils;


namespace TestCallIronPython
{
    class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            ScriptEngine pyEngine = Python.CreateEngine();

            Assembly myclass = Assembly.LoadFile(Path.GetFullPath("MyClass.dll"));
            pyEngine.Runtime.LoadAssembly(myclass);
            ScriptScope pyScope = pyEngine.Runtime.ImportModule("MyClass");

            // Get the Python Class
            object MyClass = pyEngine.Operations.Invoke(pyScope.GetVariable("MyClass"));

            // Invoke a method of the class
            pyEngine.Operations.InvokeMember(MyClass, "somemethod", new object[0]);

            // create a callable function to 'somemethod'
            Action SomeMethod2 = pyEngine.Operations.GetMember&lt;Action&gt;(MyClass, "somemethod");
            SomeMethod2();

            // create a callable function to 'isodd'
            Func&lt;int, bool&gt; IsOdd = pyEngine.Operations.GetMember&lt;Func&lt;int, bool&gt;&gt;(MyClass, "isodd");
            Console.WriteLine(IsOdd(1).ToString());
            Console.WriteLine(IsOdd(2).ToString());

            Console.Write("Press any key to continue . . . ");
            Console.ReadKey(true);
        }
    }
}
</snippet></ROW><ROW><id>2142224</id><snippet>class MyClass:
    def __init__(self):
        print "I'm in a compiled class (I hope)"

    def somemethod(self):
        print "in some method"

    def isodd(self, n):
        return 1 == n % 2
</snippet></ROW><ROW><id>2142224</id><snippet>clr.CompileModules</snippet></ROW><ROW><id>2142224</id><snippet>MyClass.dll</snippet></ROW><ROW><id>2142224</id><snippet>Hello World!
I'm in a compiled class (I hope)
in some method
in some method
True
False
Press any key to continue . . .
</snippet></ROW><ROW><id>2142268</id><snippet>STATUS_CHOICES</snippet></ROW><ROW><id>2142268</id><snippet>choices</snippet></ROW><ROW><id>2142268</id><snippet>PENDING = 0
DONE = 1
STATUS_CHOICES = (
    (PENDING, 'Pending'),
    (DONE, 'Done'),
)
</snippet></ROW><ROW><id>2142268</id><snippet>order.status = Order.DONE</snippet></ROW><ROW><id>2142268</id><snippet>get_status_display</snippet></ROW><ROW><id>2142358</id><snippet>AssertionError</snippet></ROW><ROW><id>2142358</id><snippet>ValueError</snippet></ROW><ROW><id>2142467</id><snippet>l = [('a', 1), ('b', 2), ('c', 3)]
k = 1
l_without_num = l[:k] + l[(k + 1):]
</snippet></ROW><ROW><id>2142469</id><snippet>def someStatFunction( source ):
    for row in source:
        ...some processing...

def someFilterFunction( source ):
    for row in source:
        if someFunction( row ):
            yield row

# All rows
with open( "someFile", "rb" )  as source:
    rdr = csv.reader( source )
    someStatFunction( rdr )

# Filtered by someFilterFunction applied to each row
with open( "someFile", "rb" )  as source:
    rdr = csv.reader( source )
    someStatFunction( someFilterFunction( rdr ) )
</snippet></ROW><ROW><id>2142503</id><snippet>dbus.service.method</snippet></ROW><ROW><id>2142503</id><snippet>async_callbacks</snippet></ROW><ROW><id>2142503</id><snippet>@dbus.service.method('fm.last.api.account', out_signature="s",
                     async_callbacks=("callback", "errback"))
def getUsername(self, callback, errback):
    reactor.callLater(3, callback, "alice")
</snippet></ROW><ROW><id>2142503</id><snippet>d.addCallbacks(callback, errback)
</snippet></ROW><ROW><id>2142503</id><snippet>dbus.service.method</snippet></ROW><ROW><id>2142503</id><snippet>async_callbacks</snippet></ROW><ROW><id>2142503</id><snippet>dbus.service.method</snippet></ROW><ROW><id>2142516</id><snippet>(SELECT * FROM (
  SELECT
    RANK() OVER (ORDER BY Score desc ,Karma desc) AS ranking,
    Id,
    Username,
    Score, karma
  FROM Players 
) AS players_ranked_by_score
where Id = id_of_user 
</snippet></ROW><ROW><id>2142516</id><snippet>(SELECT * FROM (
  SELECT
    RANK() OVER (ORDER BY Score desc ,Karma desc) AS ranking,
    Id,
    Username,
    Score, karma
  FROM Players 
) AS all_players_ranked
where ranking &gt;= player_ranking - 2 and ranking &lt;= player_ranking + 2;
</snippet></ROW><ROW><id>2143267</id><snippet>r"'(''|[^'])*'"
</snippet></ROW><ROW><id>2143299</id><snippet>query = urllib.parse.urlencode({'q' : 'searchterm','start' : k},doseq=false)
url = 'http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;%s' \
             % (query)
results = urllib.urlopen(url)
encoding = input.getheader('content-type').split('=')[-1]
resultsjson = json.loads(results.read().decode(encoding))
betterResults += resultsjson["responseData"]["results"]
</snippet></ROW><ROW><id>2143301</id><snippet>def twoPointCrossover(self, partner):
        #at two random(?) points, crossover.
        pass
</snippet></ROW><ROW><id>2143383</id><snippet>fbdata = request.facebook.users.getInfo(request.facebook.uid, 
                                        ['name', 'pic', 'interests'])
</snippet></ROW><ROW><id>2143487</id><snippet>random.seed</snippet></ROW><ROW><id>2143487</id><snippet>random.Random()</snippet></ROW><ROW><id>2143487</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; seed=1234
&gt;&gt;&gt; n=10
&gt;&gt;&gt; random.Random(seed).sample(range(1000),n)
[966, 440, 7, 910, 939, 582, 671, 83, 766, 236]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2143704</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("mydomain.com")
&gt;&gt;&gt; conn.request("HEAD", "/thevideofile.mp4")
&gt;&gt;&gt; res = conn.getresponse()
&gt;&gt;&gt; print res.getheaders()
</snippet></ROW><ROW><id>2143946</id><snippet>set /p var=&lt;file
</snippet></ROW><ROW><id>2143946</id><snippet>c:\python27\bin\python.exe myscript.py
</snippet></ROW><ROW><id>2143946</id><snippet>@echo off
set /p var=&lt;test.py
call %var:~2% test.py
</snippet></ROW><ROW><id>2143946</id><snippet>C:\test&gt;more test1.py
#!c:\Python26\python.exe

print "hello"


C:\test&gt;more test.bat
@echo off
set /p var=&lt;test1.py
call %var:~2% test1.py

C:\test&gt;test.bat
hello
</snippet></ROW><ROW><id>2143973</id><snippet>export</snippet></ROW><ROW><id>2143973</id><snippet>dbus-launch</snippet></ROW><ROW><id>2143973</id><snippet>os.environ</snippet></ROW><ROW><id>2143973</id><snippet>p = subprocess.Popen('dbus-launch', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
for var in p.stdout:
  sp = var.split('=', 1)
  print sp
  os.environ[sp[0]] = sp[1][:-1]
</snippet></ROW><ROW><id>2144135</id><snippet>example</snippet></ROW><ROW><id>2144135</id><snippet>def example(f):
  return f
</snippet></ROW><ROW><id>2144135</id><snippet>example</snippet></ROW><ROW><id>2144442</id><snippet>{% load i18n %}</snippet></ROW><ROW><id>2144442</id><snippet>{% trans %}</snippet></ROW><ROW><id>2144442</id><snippet>_</snippet></ROW><ROW><id>2144442</id><snippet>django-admin.py makemessages -l cn</snippet></ROW><ROW><id>2144442</id><snippet>locale/cn/LC_MESSAGES/django.po</snippet></ROW><ROW><id>2144442</id><snippet>msgid "Hello!"</snippet></ROW><ROW><id>2144442</id><snippet>msgstr ""</snippet></ROW><ROW><id>2144442</id><snippet>msgstr "nihao"</snippet></ROW><ROW><id>2144442</id><snippet>msgid</snippet></ROW><ROW><id>2144442</id><snippet>django-admin.py compilemessages</snippet></ROW><ROW><id>2144477</id><snippet>numpy.histogram()</snippet></ROW><ROW><id>2144477</id><snippet>numpy.histogram(a, bins=10, range=None, normed=False, weights=None, new=None)
</snippet></ROW><ROW><id>2144477</id><snippet>a</snippet></ROW><ROW><id>2144477</id><snippet>bins</snippet></ROW><ROW><id>2144477</id><snippet>a</snippet></ROW><ROW><id>2144477</id><snippet>bins</snippet></ROW><ROW><id>2144477</id><snippet>num_bins</snippet></ROW><ROW><id>2144477</id><snippet>import numpy
values = numpy.arange(10, dtype=int)
bins = numpy.arange(-1, 11)
freq, bins = numpy.histogram(values, bins)
# freq is now [0 1 1 1 1 1 1 1 1 1 1]
# bins is unchanged
</snippet></ROW><ROW><id>2144477</id><snippet>bins</snippet></ROW><ROW><id>2144477</id><snippet>[1, 2, 3, 4]
</snippet></ROW><ROW><id>2144477</id><snippet>[1, 2)</snippet></ROW><ROW><id>2144477</id><snippet>[2, 3)</snippet></ROW><ROW><id>2144477</id><snippet>[3, 4]</snippet></ROW><ROW><id>2144477</id><snippet>numpy.digitize()</snippet></ROW><ROW><id>2144477</id><snippet>numpy.bincount()</snippet></ROW><ROW><id>2144477</id><snippet>&gt;&gt;&gt; values = numpy.random.randint(0, 20, 10)
&gt;&gt;&gt; values
array([17, 14,  9,  7,  6,  9, 19,  4,  2, 19])
&gt;&gt;&gt; bins = numpy.linspace(-1, 21, 23)
&gt;&gt;&gt; bins
array([ -1.,   0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,
        10.,  11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.,  20.,
        21.])
&gt;&gt;&gt; pos = numpy.digitize(values, bins)
&gt;&gt;&gt; pos
array([19, 16, 11,  9,  8, 11, 21,  6,  4, 21])
</snippet></ROW><ROW><id>2144477</id><snippet>&gt;&gt;&gt; (bins[pos-1] == values).all()
True
&gt;&gt;&gt; import sys
&gt;&gt;&gt; for n in range(len(values)):
...     sys.stdout.write("%g &lt;= %g &lt; %g\n"
...             %(bins[pos[n]-1], values[n], bins[pos[n]]))
17 &lt;= 17 &lt; 18
14 &lt;= 14 &lt; 15
9 &lt;= 9 &lt; 10
7 &lt;= 7 &lt; 8
6 &lt;= 6 &lt; 7
9 &lt;= 9 &lt; 10
19 &lt;= 19 &lt; 20
4 &lt;= 4 &lt; 5
2 &lt;= 2 &lt; 3
19 &lt;= 19 &lt; 20
</snippet></ROW><ROW><id>2144486</id><snippet>'D:\\zjm_code\\register2'</snippet></ROW><ROW><id>2144486</id><snippet>sys.path</snippet></ROW><ROW><id>2144486</id><snippet>register2</snippet></ROW><ROW><id>2144486</id><snippet>'D:\\zjm_code'</snippet></ROW><ROW><id>2144486</id><snippet>sys.path</snippet></ROW><ROW><id>2144486</id><snippet>'D:\\zjm_code\\register2\\__init__.py'</snippet></ROW><ROW><id>2144486</id><snippet>__init__.py</snippet></ROW><ROW><id>2144521</id><snippet>register2</snippet></ROW><ROW><id>2144521</id><snippet>register2\\locale</snippet></ROW><ROW><id>2144547</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>2144547</id><snippet>~/.bashrc</snippet></ROW><ROW><id>2144547</id><snippet>.BAT</snippet></ROW><ROW><id>2144547</id><snippet>.CMD</snippet></ROW><ROW><id>2144547</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>2144547</id><snippet>site-packages</snippet></ROW><ROW><id>2144547</id><snippet>sys.path</snippet></ROW><ROW><id>2144547</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>2144547</id><snippet>sys.path</snippet></ROW><ROW><id>2144547</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>2144591</id><snippet>&lt;form action="" method="post"&gt;
&lt;input type="text" name="email" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>2144591</id><snippet>pylons.url.current()</snippet></ROW><ROW><id>2144650</id><snippet>def fileOrRandom():
  return raw_input("Would you like to read from file or random list? (A or B): ")
</snippet></ROW><ROW><id>2144650</id><snippet>while True :
    choice=raw_input("Your choice: ")
    for i in range(2):
     if choice==i+1 and fileOrRandom()=="A" :
       fileName=raw_input("Please Enter The Name of the File to sort: ")
       sorter = choices[choice](fileName)
       sorter.timedSort(sorter.sort)
     elif choice==i+1 and fileOrRandom()=="B" :
       num = raw_input("How many random numbers would you like to sort: ")
       sorter = choices[choice](None,num)
       sorter.timedSort(sorter.sort)
     elif choice in ['q','Q']: break
     else: print "Bad choice"
</snippet></ROW><ROW><id>2145048</id><snippet>__init__</snippet></ROW><ROW><id>2145048</id><snippet>__init__</snippet></ROW><ROW><id>2145048</id><snippet>__init__</snippet></ROW><ROW><id>2145048</id><snippet>__new__</snippet></ROW><ROW><id>2145048</id><snippet>__init__</snippet></ROW><ROW><id>2145048</id><snippet>__new__</snippet></ROW><ROW><id>2145233</id><snippet>TarFile.addfile(tarinfo, fileobj=None)
</snippet></ROW><ROW><id>2145233</id><snippet>TarInfo.mtime
Time of last modification.

TarInfo.uid
User ID of the user who originally stored this member.

TarInfo.gid
Group ID of the user who originally stored this member.
</snippet></ROW><ROW><id>2145328</id><snippet>os.execv</snippet></ROW><ROW><id>2145328</id><snippet>stdin</snippet></ROW><ROW><id>2145328</id><snippet>stdout</snippet></ROW><ROW><id>2145328</id><snippet>stderr</snippet></ROW><ROW><id>2145328</id><snippet>stdin</snippet></ROW><ROW><id>2145328</id><snippet>execv</snippet></ROW><ROW><id>2145328</id><snippet>stdin</snippet></ROW><ROW><id>2145328</id><snippet>subprocess</snippet></ROW><ROW><id>2145328</id><snippet>stdin</snippet></ROW><ROW><id>2145328</id><snippet>stdout</snippet></ROW><ROW><id>2145384</id><snippet> newString = oldString[:oldString[:-1].rfind('/')]
 # strip out trailing slash    ----^       ^---- find last remaining slash
</snippet></ROW><ROW><id>2145551</id><snippet>A'=AX|M</snippet></ROW><ROW><id>2145551</id><snippet># === birthday.py ===========================================
#
from math import log10, factorial

PV=4500          # Number of possible values
SS=100           # Sample size

# These intermediate results are exceedingly large numbers;
# Python automatically starts using bignums behind the scenes.
#
numerator = factorial (PV)          
denominator = (PV ** SS) * factorial (PV - SS)

# Now we need to get from bignums to floats without intermediate
# values too large to cast into a double.  Taking the logs and 
# subtracting them is equivalent to division.
#  
log_prob_no_pair = log10 (numerator) - log10 (denominator)

# We've just calculated the log of the probability that *NO*
# two matching pairs occur in the sample.  The probability
# of at least one collision is 1.0 - the probability that no 
# matching pairs exist.
#
print 1.0 - (10 ** log_prob_no_pair)
</snippet></ROW><ROW><id>2145582</id><snippet>sys.platform</snippet></ROW><ROW><id>2145582</id><snippet>win32</snippet></ROW><ROW><id>2145582</id><snippet>PC/pyconfig.h</snippet></ROW><ROW><id>2145582</id><snippet>#if defined(MS_WIN64)
/* maintain "win32" sys.platform for backward compatibility of Python code,
   the Win64 API should be close enough to the Win32 API to make this
   preferable */
#       define PLATFORM "win32"
</snippet></ROW><ROW><id>2145587</id><snippet>on_task_init</snippet></ROW><ROW><id>2145587</id><snippet>on_worker_init</snippet></ROW><ROW><id>2145587</id><snippet>task_prerun(task_id, task, args, kwargs)</snippet></ROW><ROW><id>2145587</id><snippet>apply</snippet></ROW><ROW><id>2145587</id><snippet>CELERY_ALWAYS_EAGER</snippet></ROW><ROW><id>2145587</id><snippet>task_postrun(task_id, task, args, kwargs, retval)</snippet></ROW><ROW><id>2145587</id><snippet>task_sent(task_id, task, args, kwargs, eta, taskset)</snippet></ROW><ROW><id>2145587</id><snippet>worker_init()</snippet></ROW><ROW><id>2145587</id><snippet>fork</snippet></ROW><ROW><id>2145587</id><snippet>worker_ready()</snippet></ROW><ROW><id>2145587</id><snippet>worker_shutdown()</snippet></ROW><ROW><id>2145587</id><snippet>from celery.task import Task
from celery.registry import tasks
from celery.signals import task_prerun

_precalc_table = {}

class PowersOfTwo(Task):

    def run(self, x):
        if x in _precalc_table:
            return _precalc_table[x]
        else:
            return x ** 2
tasks.register(PowersOfTwo)


def _precalc_numbers(**kwargs):
    if not _precalc_table: # it's empty, so haven't been generated yet
        for i in range(1024):
            _precalc_table[i] = i ** 2


# need to use registered instance for sender argument.
task_prerun.connect(_precalc_numbers, sender=tasks[PowerOfTwo.name])
</snippet></ROW><ROW><id>2145587</id><snippet>sender</snippet></ROW><ROW><id>2145841</id><snippet>str</snippet></ROW><ROW><id>2145841</id><snippet>unicode</snippet></ROW><ROW><id>2145841</id><snippet>string</snippet></ROW><ROW><id>2145841</id><snippet>&gt;&gt;&gt; print u'ĉ'.upper()
Ĉ
</snippet></ROW><ROW><id>2145841</id><snippet>str</snippet></ROW><ROW><id>2145841</id><snippet>unicode</snippet></ROW><ROW><id>2145841</id><snippet>&gt;&gt;&gt; print 'ĉ'.decode('utf-8').upper()
Ĉ
</snippet></ROW><ROW><id>2145935</id><snippet>echo</snippet></ROW><ROW><id>2146144</id><snippet>fread</snippet></ROW><ROW><id>2146144</id><snippet>array</snippet></ROW><ROW><id>2146144</id><snippet>f = open(...)
import array
a = array.array("L")  # L is the typecode for uint32
a.fromfile(f, 3)
</snippet></ROW><ROW><id>2146144</id><snippet>f</snippet></ROW><ROW><id>2146144</id><snippet>a</snippet></ROW><ROW><id>2146144</id><snippet>fromfile</snippet></ROW><ROW><id>2146144</id><snippet>.tolist()</snippet></ROW><ROW><id>2146246</id><snippet>__cmp__(x,y)</snippet></ROW><ROW><id>2146246</id><snippet>x &lt; y</snippet></ROW><ROW><id>2146246</id><snippet>x &gt; y</snippet></ROW><ROW><id>2146246</id><snippet>x == y</snippet></ROW><ROW><id>2146246</id><snippet>__eq__(x, y)</snippet></ROW><ROW><id>2146258</id><snippet>[QT Frontend]
[CLIs]             &lt;=======&gt; [Dispatcher] &lt;=&gt; [API] &lt;==&gt; [Core/Model]
[SOAP/XMPRPC/Json]
[API Test Suite]
</snippet></ROW><ROW><id>2146400</id><snippet>randint</snippet></ROW><ROW><id>2146427</id><snippet>and</snippet></ROW><ROW><id>2146427</id><snippet>or</snippet></ROW><ROW><id>2146467</id><snippet>#!/usr/bin/env python

import httplib
c = httplib.HTTPSConnection("ccc.de")
c.request("GET", "/")
response = c.getresponse()
print response.status, response.reason
data = response.read()
print data
# =&gt; 
# 200 OK
# &lt;!DOCTYPE html ....
</snippet></ROW><ROW><id>2146467</id><snippet>&gt;&gt;&gt; import socket
&gt;&gt;&gt; socket.ssl
&lt;function ssl at 0x4038b0&gt;
</snippet></ROW><ROW><id>2146650</id><snippet>stdout</snippet></ROW><ROW><id>2146650</id><snippet>print</snippet></ROW><ROW><id>2146650</id><snippet>if size &lt; 0:
    print 'size must be non-negative'
else:
    print size * 4
</snippet></ROW><ROW><id>2146650</id><snippet>yours.py</snippet></ROW><ROW><id>2146650</id><snippet>sum_all_lines.sh</snippet></ROW><ROW><id>2146650</id><snippet>yours.py</snippet></ROW><ROW><id>2146650</id><snippet>sum_all_lines.sh</snippet></ROW><ROW><id>2147130</id><snippet>-Wall -Wno-uninitialized</snippet></ROW><ROW><id>2147130</id><snippet>_save</snippet></ROW><ROW><id>2147130</id><snippet>PyThreadState *_save; 
_save = 0; /* init as null pointer value */
_save = PyEval_SaveThread();
</snippet></ROW><ROW><id>2147398</id><snippet>getpage.py</snippet></ROW><ROW><id>2147398</id><snippet>dlpage.py</snippet></ROW><ROW><id>2147398</id><snippet>getPage</snippet></ROW><ROW><id>2147398</id><snippet>getPage</snippet></ROW><ROW><id>2147560</id><snippet>def initSock():
    message = ""
    for i in range(MAX_TRIES):
        try:
            #...socket opening code
        except socket.error, (value, message):
            message = message
        else:
            print "Connected"
            return sock
    print "Could not open socket: " + message
    sys.exit(1)
</snippet></ROW><ROW><id>2147791</id><snippet>import json
list = [1, 2, (3, 4)] # Note that the 3rd element is a tuple (3, 4)
json.dumps(list) # '[1, 2, [3, 4]]'
</snippet></ROW><ROW><id>2147800</id><snippet>I figured out how to do it. See the example below:
</snippet></ROW><ROW><id>2147800</id><snippet>#!/usr/bin/env python

import pygtk
pygtk.require('2.0')
import gtk
import gobject

class HelloWorld:
    window=None
    def hello(self, widget, data=None, data2=None):
    HelloWorld.window.set_accept_focus(True)
    HelloWorld.window.present()

    def __init__(self):
        HelloWorld.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.button = gtk.Entry(50)
        self.button.connect("focus-in-event", self.hello, None)
        HelloWorld.window.add(self.button)
        self.button.show()
    HelloWorld.window.set_accept_focus(False)
    self.button.connect('button-press-event', self.hello)
    HelloWorld.window.show()
    def main(self):
        gtk.main()

if __name__ == "__main__":
    hello = HelloWorld()
    hello.main()
</snippet></ROW><ROW><id>2147965</id><snippet>values_list</snippet></ROW><ROW><id>2147965</id><snippet>Model.objects.filter(...).values_list('name', flat=True)
</snippet></ROW><ROW><id>2147965</id><snippet>values_list</snippet></ROW><ROW><id>2148172</id><snippet>result = numpy.where(x == y, x, 0)
</snippet></ROW><ROW><id>2148172</id><snippet>numpy.where</snippet></ROW><ROW><id>2148172</id><snippet>numpy.where(a, b, c)</snippet></ROW><ROW><id>2148172</id><snippet>a</snippet></ROW><ROW><id>2148172</id><snippet>a</snippet></ROW><ROW><id>2148172</id><snippet>b</snippet></ROW><ROW><id>2148172</id><snippet>c</snippet></ROW><ROW><id>2148172</id><snippet>a</snippet></ROW><ROW><id>2148172</id><snippet>b</snippet></ROW><ROW><id>2148172</id><snippet>c</snippet></ROW><ROW><id>2148172</id><snippet>x &amp; y</snippet></ROW><ROW><id>2148172</id><snippet>x</snippet></ROW><ROW><id>2148172</id><snippet>y</snippet></ROW><ROW><id>2148172</id><snippet>x = numpy.array([2**p for p in xrange(10)])
# x is [  1   2   4   8  16  32  64 128 256 512]
y = x - 1
# y is [  0   1   3   7  15  31  63 127 255 511]
x &amp; y
# result: [0 0 0 0 0 0 0 0 0 0]
</snippet></ROW><ROW><id>2148172</id><snippet>x</snippet></ROW><ROW><id>2148172</id><snippet>1 followed by</snippet></ROW><ROW><id>2148172</id><snippet>zeros, and the corresponding element in</snippet></ROW><ROW><id>2148172</id><snippet>is</snippet></ROW><ROW><id>2148172</id><snippet>1s.  In general, for two non-zero numbers</snippet></ROW><ROW><id>2148172</id><snippet>and</snippet></ROW><ROW><id>2148172</id><snippet>,</snippet></ROW><ROW><id>2148172</id><snippet>may equal zero, or non-zero but not necessarily equal to either</snippet></ROW><ROW><id>2148172</id><snippet>or</snippet></ROW><ROW><id>2148315</id><snippet>from xml.parsers.xmlproc import dtdparser

attr_separator = '_'
child_separator = '_'

dtd = dtdparser.load_dtd('schedule.dtd')

for name, element in dtd.elems.items():
    for attr in element.attrlist:
        output = '%s%s%s = ' % (name, attr_separator, attr)
        print output
    for child in element.get_valid_elements(element.get_start_state()):
        output = '%s%s%s = ' % (name, child_separator, child)
        print output
</snippet></ROW><ROW><id>2148531</id><snippet>&gt;&gt;&gt; values = [1,1,1,2]
&gt;&gt;&gt; print [(x,values.count(x)) for x in set(values)]
[(1, 3), (2, 1)]
</snippet></ROW><ROW><id>2148925</id><snippet>for i in [x for x in dir(signal) if x.startswith("SIG")]:
  try:
    signum = getattr(signal,i)
    signal.signal(signum,sighandler)
  except RuntimeError,m:
    print "Skipping %s"%i
</snippet></ROW><ROW><id>2149029</id><snippet>idle.py -r scriptname.py arg1 arg2 arg3
</snippet></ROW><ROW><id>2149029</id><snippet>sys.argv</snippet></ROW><ROW><id>2149029</id><snippet>try:
    __file__
except:
    sys.argv = [sys.argv[0], 'argument1', 'argument2', 'argument2']
</snippet></ROW><ROW><id>2149387</id><snippet>asyncore</snippet></ROW><ROW><id>2149387</id><snippet>glib</snippet></ROW><ROW><id>2149387</id><snippet>glib</snippet></ROW><ROW><id>2149516</id><snippet>impost psycopg2

con = connect(...)

def save(long_blob):
     cur = con.cursor() 
     long_data = struct.unpack('&lt;L', long_blob)

     # grab the first result of the tuple
     long_data = long_data[0]

     cur.execute('insert into blob_records( blob_data ) values (%s)', [long_data])
</snippet></ROW><ROW><id>2149577</id><snippet>OneToOne</snippet></ROW><ROW><id>2149812</id><snippet>ELF</snippet></ROW><ROW><id>2149812</id><snippet>ELFCLASS32</snippet></ROW><ROW><id>2149981</id><snippet>&gt;&gt;&gt; p = re.compile("^[-\w]+$", re.DEBUG)
at at_beginning
max_repeat 1 65535
  in
    literal 45
    category category_word
at at_end
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2150111</id><snippet>signed_angle = atan2(b.y,b.x) - atan2(a.y,a.x)
</snippet></ROW><ROW><id>2150125</id><snippet>collections.deque</snippet></ROW><ROW><id>2150125</id><snippet>rotate()</snippet></ROW><ROW><id>2150200</id><snippet>mailbox</snippet></ROW><ROW><id>2150301</id><snippet># Textview with inverted colors
import gtk

tv = gtk.TextView()
tv.modify_base(gtk.STATE_NORMAL, gtk.gdk.color_parse('black'))
tv.modify_text(gtk.STATE_NORMAL, gtk.gdk.color_parse('white'))
</snippet></ROW><ROW><id>2150336</id><snippet>type</snippet></ROW><ROW><id>2150336</id><snippet>type</snippet></ROW><ROW><id>2150336</id><snippet>&gt;&gt;&gt; def m1(name, bases, atts):
&gt;&gt;&gt;     print "m1 called for " + name
&gt;&gt;&gt;     return type(name, bases, atts)
&gt;&gt;&gt;

&gt;&gt;&gt; def m2(name, bases, atts):
&gt;&gt;&gt;     print "m2 called for " + name
&gt;&gt;&gt;     return type(name, bases, atts)
&gt;&gt;&gt;

&gt;&gt;&gt; class c1(object):
&gt;&gt;&gt;     __metaclass__ = m1
m1 called for c1

&gt;&gt;&gt; type(c1)
&lt;type 'type'&gt;

&gt;&gt;&gt; class sub1(c1):
&gt;&gt;&gt;     pass

&gt;&gt;&gt; type(sub1)
&lt;type 'type'&gt;

&gt;&gt;&gt; class c2(object):
&gt;&gt;&gt;     __metaclass__ = m2
m2 called for c2

&gt;&gt;&gt; class sub2(c1, c2):
&gt;&gt;&gt;     pass

&gt;&gt;&gt; type(sub2)
&lt;type 'type'&gt;
</snippet></ROW><ROW><id>2150336</id><snippet>&gt;&gt;&gt; class M1(type):
&gt;&gt;&gt;     def __new__(meta, name, bases, atts):
&gt;&gt;&gt;         print "M1 called for " + name
&gt;&gt;&gt;         return super(M1, meta).__new__(meta, name, bases, atts)

&gt;&gt;&gt; class C1(object):
&gt;&gt;&gt;     __metaclass__ = M1
M1 called for C1

&gt;&gt;&gt; type(C1)
&lt;class '__main__.M1'&gt;

&gt;&gt;&gt; class Sub1(C1):
&gt;&gt;&gt;     pass
M1 called for Sub1

&gt;&gt;&gt; type(Sub1)
&lt;class '__main__.M1'&gt;
</snippet></ROW><ROW><id>2150336</id><snippet>super()</snippet></ROW><ROW><id>2150336</id><snippet>&gt;&gt;&gt; class M2(type):
&gt;&gt;&gt;     def __new__(meta, name, bases, atts):
&gt;&gt;&gt;         print "M2 called for " + name
&gt;&gt;&gt;         return super(M2, meta).__new__(meta, name, bases, atts)

&gt;&gt;&gt; class C2(object):
&gt;&gt;&gt;     __metaclass__ = M2
M2 called for C2

&gt;&gt;&gt; type(C2)
&lt;class '__main__.M2'&gt;

&gt;&gt;&gt; class Sub2(C1, C2):
&gt;&gt;&gt;     pass
M1 called for Sub2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 23, in __new__
TypeError: Error when calling the metaclass bases
    metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases
</snippet></ROW><ROW><id>2150336</id><snippet>&gt;&gt;&gt; class M3(M1, M2):
&gt;&gt;&gt;     def __new__(meta, name, bases, atts):
&gt;&gt;&gt;         print "M3 called for " + name
&gt;&gt;&gt;         return super(M3, meta).__new__(meta, name, bases, atts)

&gt;&gt;&gt; class C3(C1, C2):
&gt;&gt;&gt;     __metaclass__ = M3
M3 called for C3
M1 called for C3
M2 called for C3

&gt;&gt;&gt; type(C3)
&lt;class '__main__.M3'&gt;
</snippet></ROW><ROW><id>2150336</id><snippet>super()</snippet></ROW><ROW><id>2150336</id><snippet>__new__</snippet></ROW><ROW><id>2150336</id><snippet>type</snippet></ROW><ROW><id>2150336</id><snippet>type</snippet></ROW><ROW><id>2150465</id><snippet>$5.</snippet></ROW><ROW><id>2150465</id><snippet>5.</snippet></ROW><ROW><id>2150465</id><snippet>money = re.compile('|'.join([
  r'^\$?(\d*\.\d{1,2})$',  # e.g., $.50, .50, $1.50, $.5, .5
  r'^\$?(\d+)$',           # e.g., $500, $5, 500, 5
  r'^\$(\d+\.?)$',         # e.g., $5.
]))
</snippet></ROW><ROW><id>2150465</id><snippet>^</snippet></ROW><ROW><id>2150465</id><snippet>$</snippet></ROW><ROW><id>2150465</id><snippet>\.</snippet></ROW><ROW><id>2150465</id><snippet>\$</snippet></ROW><ROW><id>2150465</id><snippet>\$?</snippet></ROW><ROW><id>2150465</id><snippet>\d</snippet></ROW><ROW><id>2150465</id><snippet>\d*</snippet></ROW><ROW><id>2150465</id><snippet>\d+</snippet></ROW><ROW><id>2150465</id><snippet>\d{1,2}</snippet></ROW><ROW><id>2150465</id><snippet>matchobj.group(index)</snippet></ROW><ROW><id>2150465</id><snippet>matchobj.groups()</snippet></ROW><ROW><id>2150465</id><snippet>None</snippet></ROW><ROW><id>2150465</id><snippet>(?:...)</snippet></ROW><ROW><id>2150465</id><snippet>for test, expected in tests:
    result = money.match(test) 
    is_match = result is not None
    if is_match == expected:
      status = 'OK'
      if result:
        amt = [x for x in result.groups() if x is not None].pop()
        status += ' (%s)' % amt
    else:
      status = 'Fail'
    print test + '\t' + status
</snippet></ROW><ROW><id>2150942</id><snippet>__unicode__</snippet></ROW><ROW><id>2150942</id><snippet>class userInfo(models.Model):
  #model fields

  def __unicode__(self):
    return self.auth.username
</snippet></ROW><ROW><id>2151067</id><snippet>import os, sys
os.environ['ETS_TOOLKIT'] = 'qt4'

from PyQt4 import QtGui
app = QtGui.QApplication(sys.argv)
from numpy import linspace, pi, sin
from enthought.enable.api import Component, Container, Window
from enthought.chaco.api import create_line_plot, \
                                add_default_axes, \
                                add_default_grids, \
                                OverlayPlotContainer


x = linspace(-pi,pi,100)
y = sin(x)
plot = create_line_plot((x,y))
add_default_grids(plot)
add_default_axes(plot)
container = OverlayPlotContainer(padding = 50)
container.add(plot)
plot_window = Window(None, -1, component=container)
plot_window.control.setWindowTitle('hello')
plot_window.control.resize(400,400)
plot_window.control.show()

app.exec_()
</snippet></ROW><ROW><id>2151303</id><snippet>&gt;&gt;&gt; type(o.b)
&lt;type 'lxml.objectify.StringElement'&gt;
</snippet></ROW><ROW><id>2151303</id><snippet>&gt;&gt;&gt; o.b = objectify.E.b('newtext', atr='someatr')
</snippet></ROW><ROW><id>2151303</id><snippet>&gt;&gt;&gt; o.b.text = 'newtext'
</snippet></ROW><ROW><id>2151303</id><snippet>&gt;&gt;&gt; o.b._setText('newtext')
</snippet></ROW><ROW><id>2151510</id><snippet>except ExceptionType as varname:</snippet></ROW><ROW><id>2151510</id><snippet>except ExceptionType, varname:</snippet></ROW><ROW><id>2151544</id><snippet>$.ajax({
    method:"get",
    url:"/main/",
    dataType: "json",
    data:"q="+query,
    beforeSend:function() {},
    success:function(json){
        $("#main").html(json.main);
        $("#secondary").html(json.secondary);
    }
});
</snippet></ROW><ROW><id>2151544</id><snippet>{
    "main": "&lt;p&gt;{{ num_results }}, you just searched for {{ query }}&lt;/p&gt;",
    "secondary": "{{ num_results }}"
}
</snippet></ROW><ROW><id>2151553</id><snippet>set.union</snippet></ROW><ROW><id>2151553</id><snippet>&gt;&gt;&gt; results_list = [[1,2,3], [1,2,4]]
&gt;&gt;&gt; results_union = set().union(*results_list)
&gt;&gt;&gt; print results_union
set([1, 2, 3, 4])
</snippet></ROW><ROW><id>2151572</id><snippet>tested_nodes=set()
def solve_board(dfs_obj, node):
    if goal(node):  # only 1 peg!
        print node
        return node

    for new_node in succ(node):
        if tuple(new_node) not in tested_nodes:
            tested_nodes.add(tuple(new_node))
            print new_node
            result = solve_board(new_node)
            if result:  # True if it's a goal, None otherwise
                return result
</snippet></ROW><ROW><id>2151572</id><snippet>if</snippet></ROW><ROW><id>2151572</id><snippet>def succ(self, node):
    size = len(node)

    # find all legal moves going forward
    for pos in range(size-2):
        new_node = list(node)
        if ((node[pos] == 1) and (node[pos+2] == 0)):
            new_node[pos] = 0  # we're moving now
            new_node[pos+2] = 1 # this is where we're moving the peg to
            new_node[pos+1] = 0  # take out the peg here if there was one
            yield new_node

    # find all legal moves going backwards
    for pos in range(1,size):
        new_node = list(node)
        if ((node[pos] == 1) and (node[pos-2] == 0)):
            new_node[pos] = 0  # we're moving now
            new_node[pos-2] = 1 # this is where we're moving the peg
            new_node[pos-1] = 0  # take out the peg here if there was one
            yield new_node
</snippet></ROW><ROW><id>2151572</id><snippet>def succ(self, node):
    for i in range(len(node)-2):
        j=i+3
        if node[i:j]==[1,1,0]:
            yield node[:i]+[0,0,1]+node[j:]
        if node[i:j]==[0,1,1]:
            yield node[:i]+[1,0,0]+node[j:]
        if node[i:j]==[1,0,0]:
            yield node[:i]+[0,0,1]+node[j:]
        if node[i:j]==[0,0,1]:
            yield node[:i]+[1,0,0]+node[j:]
</snippet></ROW><ROW><id>2151694</id><snippet>cmd = ["bash", 'childProc.sh']
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, 
                          stderr=subprocess.STDOUT, 
                          close_fds=True)
time.sleep(3)
print 'killing pid', p.pid
os.kill(p.pid, signal.SIGTERM)
print "timed out and killed child, collecting what output exists so far"
out  = p.communicate()[0]
print "got it", out
</snippet></ROW><ROW><id>2151694</id><snippet>killing pid 5844
timed out and killed child, collecting what output exists so far
got it output line 0
output line 1
output line 2
</snippet></ROW><ROW><id>2151725</id><snippet>from M2Crypto import SSL
SSL.Connection.clientPostConnectionCheck = None
</snippet></ROW><ROW><id>2151808</id><snippet>graphviz.py</snippet></ROW><ROW><id>2151808</id><snippet>conf.py</snippet></ROW><ROW><id>2151808</id><snippet>inheritance_graph_attrs = dict(size='""')
</snippet></ROW><ROW><id>2151808</id><snippet>rankdir="TB"</snippet></ROW><ROW><id>2151808</id><snippet>inheritance_graph_attrs = dict(rankdir="TB", size='""')
</snippet></ROW><ROW><id>2152162</id><snippet>"activate"</snippet></ROW><ROW><id>2152162</id><snippet>"activate"</snippet></ROW><ROW><id>2152311</id><snippet>boardPieces = [["A","O","A","A", "A"],["A","O","A","A", "A"],["A","O","A","A", "A"],["A","O","A","A", "A"],["A","O","A","A", "A"]]
</snippet></ROW><ROW><id>2152340</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.chain(*[(0, 1), (1, 2), (2, 3)]))
[0, 1, 1, 2, 2, 3]
</snippet></ROW><ROW><id>2152340</id><snippet>list(...)</snippet></ROW><ROW><id>2152340</id><snippet>itertools.chain(G.edges_iter())</snippet></ROW><ROW><id>2152409</id><snippet>a = a[0]
print a
3
</snippet></ROW><ROW><id>2152409</id><snippet>sum</snippet></ROW><ROW><id>2152409</id><snippet>&gt;&gt;&gt; a=[1]
&gt;&gt;&gt; sum(a)
1
&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; sum(a)
6
</snippet></ROW><ROW><id>2152511</id><snippet>time.gmtime()</snippet></ROW><ROW><id>2152701</id><snippet>dict.key
</snippet></ROW><ROW><id>2152701</id><snippet>{{ sc.name }}
</snippet></ROW><ROW><id>2152701</id><snippet>dict</snippet></ROW><ROW><id>2152701</id><snippet>dict</snippet></ROW><ROW><id>2152701</id><snippet>sc</snippet></ROW><ROW><id>2152701</id><snippet>name</snippet></ROW><ROW><id>2152701</id><snippet>id</snippet></ROW><ROW><id>2152701</id><snippet>{{ sc.name }}
{{ sc.id }}
</snippet></ROW><ROW><id>2152908</id><snippet>&gt;&gt;&gt; lst = ['a', 'ab', 'abc', 'bac']
&gt;&gt;&gt; res = [k for k in lst if 'ab' in k]
&gt;&gt;&gt; res
['ab', 'abc']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2152908</id><snippet>filter</snippet></ROW><ROW><id>2152908</id><snippet>&gt;&gt;&gt; filter(lambda k: 'ab' in k, lst)
['ab', 'abc']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2152948</id><snippet>itertools</snippet></ROW><ROW><id>2152948</id><snippet>from itertools import islice

def window(seq, n=2):
    "Returns a sliding window (of width n) over data from the iterable"
    "   s -&gt; (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
    it = iter(seq)
    result = tuple(islice(it, n))
    if len(result) == n:
        yield result    
    for elem in it:
        result = result[1:] + (elem,)
        yield result
</snippet></ROW><ROW><id>2152948</id><snippet>for r1, r2 in window(dm_revisions):
    summary = svn.diff_summarize(svn_path, revision1=r1, revision2=r2)
</snippet></ROW><ROW><id>2152948</id><snippet>def adjacent_pairs(seq):
    it = iter(seq)
    a = it.next()
    for b in it:
        yield a, b
        a = b

for r1, r2 in adjacent_pairs(dm_revisions):
    summary = svn.diff_summarize(svn_path, revision1=r1, revision2=r2)
</snippet></ROW><ROW><id>2153239</id><snippet>openid.store</snippet></ROW><ROW><id>2153263</id><snippet>python</snippet></ROW><ROW><id>2153263</id><snippet>$ python
Python 2.6.4 (r264:75821M, Oct 27 2009, 19:48:32) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; ^D
</snippet></ROW><ROW><id>2153263</id><snippet>$ cd ~/Downloads   # substitute the appropriate directory name
$ sh setuptools-0.6c11-py2.6.egg
</snippet></ROW><ROW><id>2153398</id><snippet>class BaseHandler(webapp.RequestHandler):
  def error(self, code):
    super(BaseHandler, self).error(code)
    if code == 404:
      # Output 404 page

class MyHandler(BaseHandler):
  def get(self, some_id):
    some_obj = SomeModel.get_by_id(some_id)
    if not some_obj:
      self.error(404)
      return
    # ...

class Error404Handler(BaseHandler):
  def get(self):
    self.error(404)
</snippet></ROW><ROW><id>2153489</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; [sum(x)/len(x) for x in itertools.izip(*a)]
[4, 5, 6]
</snippet></ROW><ROW><id>2153880</id><snippet>import threading
import socket

def start_server():
    tick = 0
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(('localhost', 1234))
    sock.listen(100)
    while True:
        print 'listening...'
        csock, address = sock.accept()
        tick+=1
        print 'connection!' 
        handshake(csock, tick)
        print 'handshaken'
        while True:
            interact(csock, tick)
            tick+=1


def send_data(client, str):
    #_write(request, '\x00' + message.encode('utf-8') + '\xff')
    str = '\x00' + str.encode('utf-8') + '\xff'
    return client.send(str)
def recv_data(client, count):
    data = client.recv(count)    
    return data.decode('utf-8', 'ignore')

def handshake(client, tick):
    our_handshake = "HTTP/1.1 101 Web Socket Protocol Handshake\r\n"+"Upgrade:     WebSocket\r\n"+"Connection: Upgrade\r\n"+"WebSocket-Origin: http://localhost:8888\r\n"+"WebSocket-Location: "+" ws://localhost:1234/websession\r\n\r\n"
    shake = recv_data(client, 255)
    print shake
    #We want to send this without any encoding
    client.send(our_handshake)

def interact(client, tick):
    data = recv_data(client, 255)
    print 'got:%s' %(data)
    send_data(client, "clock ! tick%d" % (tick))
    send_data(client, "out ! %s" %(data))

if __name__ == '__main__':
    start_server()
</snippet></ROW><ROW><id>2153894</id><snippet>draw()</snippet></ROW><ROW><id>2153894</id><snippet>update()</snippet></ROW><ROW><id>2153894</id><snippet>import random, math, time
from Tkinter import * # our UI

def sqr(x):
    return x*x

class Point:
    def __init__(self,x,y):
        self.x = float(x)
        self.y = float(y)
        self.left = 0
        self.right = []
    def __repr__(self):
        return "("+str(self.x)+","+str(self.y)+")"
    def distance(self,other):
        return math.sqrt(sqr(self.x-other.x)+sqr(self.y-other.y))

def equidist(left,right,dist):
    u = (right.x-left.x)
    v = (right.y-left.y)
    if 0 != u:
        r = math.sqrt(sqr(dist)-((sqr(u)+sqr(v))/4.))
        theta = math.atan(v/u)
        x = left.x+(u/2)-(r*math.sin(theta))
        if x &lt; left.x:
            x = left.x+(u/2)+(r*math.sin(theta))
            y = left.y+(v/2)-(r*math.cos(theta))
        else:
            y = left.y+(v/2)+(r*math.cos(theta))
    else:
        theta = math.asin(v/(2*dist))
        x = left.x-(dist*math.cos(theta))
        y = left.y + (v/2)
    return Point(x,y)

class Vis:
    def __init__(self):
        self.frame = Frame(root)
        self.canvas = Canvas(self.frame,bg="white",width=width,height=height)
        self.canvas.pack()
        self.frame.pack()
        self.run()
    def run(self):
        self.count_calc0 = 0
        self.count_calc1 = 0
        self.count_calc2 = 0
        self.count_calc3 = 0
        self.count_calc4 = 0
        self.count_calc5 = 0
        self.prev_x = 0
        self.best = -1
        self.best_centre = []
        for self.sweep in xrange(0,len(points)):
            self.count_calc0 += 1
            if len(points[self.sweep].right) &lt;= self.best:
                break
            self.calc(points[self.sweep])
        self.sweep = len(points) # so that draw() stops highlighting it
        print "BEST",self.best+1, self.best_centre # count left-most point too
        print "counts",self.count_calc0, self.count_calc1,self.count_calc2,self.count_calc3,self.count_calc4,self.count_calc5
        self.draw()
    def calc(self,p):
        for self.right in p.right:
            self.count_calc1 += 1
            if (self.right.left + len(self.right.right)) &lt; self.best:
                # this can never help us
                continue
            self.count_calc2 += 1
            self.centre = equidist(p,self.right,radius)
            assert abs(self.centre.distance(p)-self.centre.distance(self.right)) &lt; 1
            count = 0
            for p2 in p.right:
                self.count_calc3 += 1
                if self.centre.distance(p2) &lt;= radius:
                    count += 1
            if self.best &lt; count:
                self.count_calc4 += 4
                self.best = count
                self.best_centre = [self.centre]
            elif self.best == count:
                self.count_calc5 += 5
                self.best_centre.append(self.centre)
            self.draw()
            self.frame.update()
            time.sleep(0.1)
    def draw(self):
        self.canvas.delete(ALL)
        # draw best circle
        for best in self.best_centre:
            self.canvas.create_oval(best.x-radius,best.y-radius,\
                best.x+radius+1,best.y+radius+1,fill="red",\
                outline="red")
        # draw current circle
        if self.sweep &lt; len(points):
            self.canvas.create_oval(self.centre.x-radius,self.centre.y-radius,\
                self.centre.x+radius+1,self.centre.y+radius+1,fill="pink",\
                outline="pink")
        # draw all the connections
        for p in points:
            for p2 in p.right:
                self.canvas.create_line(p.x,p.y,p2.x,p2.y,fill="lightGray")
        # plot visited points
        for i in xrange(0,self.sweep):
            p = points[i]
            self.canvas.create_line(p.x-2,p.y,p.x+3,p.y,fill="blue")
            self.canvas.create_line(p.x,p.y-2,p.x,p.y+3,fill="blue")
        # plot current point
        if self.sweep &lt; len(points):
            p = points[self.sweep]
            self.canvas.create_line(p.x-2,p.y,p.x+3,p.y,fill="red")
            self.canvas.create_line(p.x,p.y-2,p.x,p.y+3,fill="red")
            self.canvas.create_line(p.x,p.y,self.right.x,self.right.y,fill="red")
            self.canvas.create_line(p.x,p.y,self.centre.x,self.centre.y,fill="cyan")
            self.canvas.create_line(self.right.x,self.right.y,self.centre.x,self.centre.y,fill="cyan")
        # plot unvisited points
        for i in xrange(self.sweep+1,len(points)):
            p = points[i]
            self.canvas.create_line(p.x-2,p.y,p.x+3,p.y,fill="green")
            self.canvas.create_line(p.x,p.y-2,p.x,p.y+3,fill="green")

radius = 60
diameter = radius*2
width = 800
height = 600

points = []

# make some points
for i in xrange(0,100):
    points.append(Point(random.randrange(width),random.randrange(height)))

# sort points for find-the-right sweep
points.sort(lambda a, b: int(a.x)-int(b.x))

# work out those points to the right of each point
for i in xrange(0,len(points)):
    p = points[i]
    for j in xrange(i+1,len(points)):
        p2 = points[j]
        if p2.x &gt; (p.x+diameter):
            break
        if (abs(p.y-p2.y) &lt;= diameter) and \
            p.distance(p2) &lt; diameter:
            p.right.append(p2)
            p2.left += 1

# sort points in potential order for sweep, point with most right first
points.sort(lambda a, b: len(b.right)-len(a.right))

# debug
for p in points:
    print p, p.left, p.right

# show it
root = Tk()
vis = Vis()
root.mainloop()
</snippet></ROW><ROW><id>2154101</id><snippet>def zipij(m=mem, ms=mems):
  return [(i, m) if i &lt; m else (m, i) for i in ms]
</snippet></ROW><ROW><id>2154101</id><snippet>from itertools import repeat

mems = range(1, 50000, 2)
mem = 8

def zipij7(m=mem, ms=mems):
  cpy = sorted(ms + [m])
  loc = cpy.index(m)

  return zip(ms[:(loc)], repeat(m)) + zip(repeat(m), ms[(loc):])

def zipinline(m=mem, ms=mems):
  return [(i, m) if i &lt; m else (m, i) for i in ms]
</snippet></ROW><ROW><id>2154101</id><snippet>&gt;python -m timeit -s "import zipit" "zipit.zipinline()"
100 loops, best of 3: 4.44 msec per loop

&gt;python -m timeit -s "import zipit" "zipit.zipij7()"
100 loops, best of 3: 4.8 msec per loop
</snippet></ROW><ROW><id>2154101</id><snippet>&gt;python -m timeit -s "import zipit, random; random.shuffle(zipit.mems)" "zipit.zipinline()"
100 loops, best of 3: 4.65 msec per loop

p&gt;python -m timeit -s "import zipit, random; random.shuffle(zipit.mems)" "zipit.zipij7()"
100 loops, best of 3: 17.1 msec per loop
</snippet></ROW><ROW><id>2154124</id><snippet>for o in re.finditer('left:102[0-9]"&gt;&lt;nobr&gt;(.*?)&lt;/nobr&gt;&lt;/div&gt;', words[index]):
    out = o.group(1)
</snippet></ROW><ROW><id>2154162</id><snippet>query = db.GqlQuery("SELECT * FROM EmailDatabase WHERE emailaddress = :1", self.request.get('emailaddress'))
</snippet></ROW><ROW><id>2154162</id><snippet>:1</snippet></ROW><ROW><id>2154162</id><snippet>self.request.get('emailaddress')</snippet></ROW><ROW><id>2154437</id><snippet>ranges = []
for key, group in groupby(enumerate(data), lambda (index, item): index - item):
    group = map(itemgetter(1), group)
    if len(group) &gt; 1:
        ranges.append(xrange(group[0], group[-1]))
    else:
        ranges.append(group[0])
</snippet></ROW><ROW><id>2154437</id><snippet>[xrange(2, 5), xrange(12, 17), 20]
</snippet></ROW><ROW><id>2154437</id><snippet>from operator import itemgetter
from itertools import groupby
data = [2, 3, 4, 5, 12, 13, 14, 15, 16, 17]
for k, g in groupby(enumerate(data), lambda (i,x):i-x):
    print map(itemgetter(1), g)
</snippet></ROW><ROW><id>2154437</id><snippet>[2, 3, 4, 5]
[12, 13, 14, 15, 16, 17]
</snippet></ROW><ROW><id>2154437</id><snippet>ranges = []
for k, g in groupby(enumerate(data), lambda (i,x):i-x):
    group = map(itemgetter(1), g)
    ranges.append((group[0], group[-1]))
</snippet></ROW><ROW><id>2154437</id><snippet>[(2, 5), (12, 17)]
</snippet></ROW><ROW><id>2154437</id><snippet>[2, 3, 4, 5, 12, 13, 14, 15, 16, 17]</snippet></ROW><ROW><id>2154437</id><snippet>groupby(enumerate(data), lambda (i,x):i-x)</snippet></ROW><ROW><id>2154437</id><snippet>groupby(
    [(0, 2), (1, 3), (2, 4), (3, 5), (4, 12),
    (5, 13), (6, 14), (7, 15), (8, 16), (9, 17)],
    lambda (i,x):i-x
)
</snippet></ROW><ROW><id>2154437</id><snippet>[-2, -2, -2, -2, -8, -8, -8, -8, -8, -8]
</snippet></ROW><ROW><id>2154790</id><snippet>__dict__</snippet></ROW><ROW><id>2154790</id><snippet>class A(object):
    pass

class B(A):
    def __add__(self, other):
        return self.value + other


a = A()
a.value = 5

a.__class__ = B

print a + 10
</snippet></ROW><ROW><id>2154990</id><snippet>str</snippet></ROW><ROW><id>2154990</id><snippet>unicode</snippet></ROW><ROW><id>2154990</id><snippet>unistring = "Μεταλλικα"</snippet></ROW><ROW><id>2154990</id><snippet>unistring = u"Μεταλλικα"</snippet></ROW><ROW><id>2154990</id><snippet>?</snippet></ROW><ROW><id>2154990</id><snippet>result = unistring[:1]</snippet></ROW><ROW><id>2155406</id><snippet>&lt;a href="http://library.gnome.org/devel/gdk/stable/gdk-Event-Structures.html#GdkEventKey.is-modifier" rel="nofollow"&gt;is_modifier&lt;/a&gt;</snippet></ROW><ROW><id>2155486</id><snippet>request.POST</snippet></ROW><ROW><id>2155486</id><snippet>&gt;&gt;&gt; new_subjects = request.POST.getlist('subjects')
&gt;&gt;&gt; print new_subjects
[u'7', u'4', u'5', u'3', u'2', u'1']
</snippet></ROW><ROW><id>2155912</id><snippet> winpdb myscript.py
</snippet></ROW><ROW><id>2156138</id><snippet>import re

valre = re.compile(r':\w+:')

def dosub(correspvals, correspfuns, lastditch):
  def f(value):
    v = value.group()[1:-1]
    if v in correspvals:
      return correspvals[v]
    if v in correspfuns:
      return correspfuns[v]()  # or whatever args you need
    # what if a value has neither a corresponding value to
    # substitute, NOR a function to call?  Whatever...:
    return lastditch(v)
  return f

replacer = dosub(adict, another, somefun)

thehtml = valre.sub(replacer, thehtml)
</snippet></ROW><ROW><id>2156711</id><snippet>urlmon.dll</snippet></ROW><ROW><id>2156711</id><snippet>ctypes</snippet></ROW><ROW><id>2156711</id><snippet>ctypes.windll.urlmon.URLDownloadToFileA(0,url,local_file_name,0,0)
</snippet></ROW><ROW><id>2156711</id><snippet>url</snippet></ROW><ROW><id>2156711</id><snippet>local_file_name</snippet></ROW><ROW><id>2156898</id><snippet>ord</snippet></ROW><ROW><id>2156898</id><snippet>chr</snippet></ROW><ROW><id>2156898</id><snippet>&gt;&gt;&gt; ord('c')
99
&gt;&gt;&gt; ord('c') + 1
100
&gt;&gt;&gt; chr(ord('c') + 1)
'd'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>2156898</id><snippet>ord</snippet></ROW><ROW><id>2156898</id><snippet>chr</snippet></ROW><ROW><id>2156898</id><snippet>&gt;&gt;&gt; bstr = b'abc'
&gt;&gt;&gt; bstr[0]
97
&gt;&gt;&gt; bytes([97, 98, 99])
b'abc'
&gt;&gt;&gt; bytes([bstr[0] + 1, 98, 99])
b'bbc'
</snippet></ROW><ROW><id>2157125</id><snippet>this_prize.choice</snippet></ROW><ROW><id>2157125</id><snippet>from collections import namedtuple

import random

Prize = namedtuple("Prize", ["left", "right" ])

this_prize = Prize("FirstPrize", "SecondPrize")

if random.random() &gt; .5:
    choice = "left"
else:
    choice = "right"

#retrieve the value of "left" or "right" depending on the choice

print "You won", getattr(this_prize,choice)
</snippet></ROW><ROW><id>2157129</id><snippet>handlers:
- url: /media
    static_dir: _generated_media
</snippet></ROW><ROW><id>2157464</id><snippet>classmethod</snippet></ROW><ROW><id>2157464</id><snippet>staticmethod</snippet></ROW><ROW><id>2157563</id><snippet>WindowHandler</snippet></ROW><ROW><id>2157563</id><snippet>pywinauto</snippet></ROW><ROW><id>2157563</id><snippet>import sys
import WordOps 
import Voice 
import WindowHandler
from PyQt import QtCore, QtGui, uic
</snippet></ROW><ROW><id>2157563</id><snippet>options={'py2exe':{
                    'includes': ['sip'],
                    'bundle_files': 1
                  }
        }
</snippet></ROW><ROW><id>2157563</id><snippet>setup.py</snippet></ROW><ROW><id>2157563</id><snippet>import sys
import WordOps 
import Voice 
import WindowHandler
from PyQt import QtCore, QtGui, uic
# imports for py2exe
import pywinauto
</snippet></ROW><ROW><id>2157742</id><snippet>this_prize._replace(choice  = "Yay")</snippet></ROW><ROW><id>2157742</id><snippet>_replace</snippet></ROW><ROW><id>2157742</id><snippet>"choice"</snippet></ROW><ROW><id>2157742</id><snippet>choice</snippet></ROW><ROW><id>2157742</id><snippet>choice</snippet></ROW><ROW><id>2157742</id><snippet>this_prize._replace(**{choice  : "Yay"} )</snippet></ROW><ROW><id>2157742</id><snippet>choice</snippet></ROW><ROW><id>2157742</id><snippet>_replace</snippet></ROW><ROW><id>2157742</id><snippet>this_prize = this_prize._replace(**{choice  : "Yay"} )</snippet></ROW><ROW><id>2157985</id><snippet>$ easy_install networkx
</snippet></ROW><ROW><id>2158119</id><snippet>import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>2158272</id><snippet>colour</snippet></ROW><ROW><id>2158272</id><snippet>class ColourChoices(models.Model):
    colour1 = models.CharField()
    colour1.colour_default = "red"
    colour2 = models.CharField()
    colour2.colour_default = "blue"

    def save(self, *args, **kwargs):
        # force colour fields to default values
        for f in [ x for x in self._meta.fields if hasattr(x, 'colour_default') ]:
            if self.__getattribute__(f.attname) == "":
                self.__setattr__(f.attname, f.colour_default)
       super(ColourChoices, self).save(*args,**kwargs)
</snippet></ROW><ROW><id>2158454</id><snippet>my_datetime.strftime("%B %d, %Y")
</snippet></ROW><ROW><id>2158490</id><snippet>{% get_content_list as content %
{% for items in content %} 
       &lt;h2&gt;{{items.title}}&lt;/h2&gt; 
{% endfor %}`
</snippet></ROW><ROW><id>2158532</id><snippet>def flatten(l):
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el
</snippet></ROW><ROW><id>2159710</id><snippet>from lxml import etree</snippet></ROW><ROW><id>2159710</id><snippet>etree</snippet></ROW><ROW><id>2159710</id><snippet>import lxml</snippet></ROW><ROW><id>2159788</id><snippet>bin</snippet></ROW><ROW><id>2159788</id><snippet>easy_install</snippet></ROW><ROW><id>2159788</id><snippet>easy_install</snippet></ROW><ROW><id>2159788</id><snippet>/usr/bin</snippet></ROW><ROW><id>2159788</id><snippet>$ echo $PATH
/Library/Frameworks/Python.framework/Versions/2.6/bin:/usr/bin:/bin
</snippet></ROW><ROW><id>2159788</id><snippet>easy_install</snippet></ROW><ROW><id>2159788</id><snippet>$ echo $PATH
/opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin:/opt/local/bin:/usr/bin:/bin
</snippet></ROW><ROW><id>2159788</id><snippet>$ easy_install mechanize
</snippet></ROW><ROW><id>2159811</id><snippet>fopen</snippet></ROW><ROW><id>2159811</id><snippet>fopen("Last_Dawn.jpg","r")</snippet></ROW><ROW><id>2159811</id><snippet>LF -&gt; CRLF</snippet></ROW><ROW><id>2159811</id><snippet>img = open("Last_Dawn.jpg", "rb")
</snippet></ROW><ROW><id>2160018</id><snippet>path13882</snippet></ROW><ROW><id>2160018</id><snippet>cah</snippet></ROW><ROW><id>2160018</id><snippet>Cahuilla</snippet></ROW><ROW><id>2160018</id><snippet>var langaugeMap = {};
languageMap["cah"] = { name: "Cahuilla", color: "rgb(255, 0, 0)" };
languageMap["cup"] = { name: "Cupeño", color: "rgb(255, 64, 0)" };
// and so on -- this could even be generated from a CSV file or Excel, etc.
// if the highlighted color is always the same, then you don't need it in the map
// or use style sheets for an activeshape and inactiveshape
// Put any information that is specific to a language in the map
</snippet></ROW><ROW><id>2160018</id><snippet>&lt;path
   style="fill:#800000;fill-opacity:1;display:inline"
   d="m 422.43078,517.40746 c 0.52151,0.006 1.10755,0.0374 1.75925,0.0825 3.82011,0.26462 5.01088,0.75501 5.75001,2.37491 0.51312,1.12355 2.4121,3.0097 4.22213,4.1946 3.906,2.55656 7.38824,2.07964 9.61517,-1.3194 2.12996,-3.25075 9.13451,-3.19196 13.61739,0.11545 1.77185,1.30707 4.04994,2.38037 5.06319,2.38041 1.01325,0 3.34593,0.92548 5.18421,2.06155 2.52816,1.56236 4.9918,2.09869 10.09889,2.19902 3.71359,0.0729 7.68145,0.64349 8.82374,1.26442 2.81717,1.53202 5.67633,1.42382 10.7693,-0.40133 4.97461,-1.78261 6.31161,-1.36525 17.10267,5.31063 3.39862,2.10239 6.90491,4.08094 7.7956,4.39801 2.46593,0.8776 4.55428,4.66976 3.95259,7.17971 -0.29359,1.22605 -0.75898,3.51121 -1.03349,5.07968 -0.27411,1.56855 -0.88382,3.33952 -1.35761,3.93621 -1.50842,1.89871 -20.98501,7.77151 -27.8945,8.41122 -3.66014,0.33879 -8.3091,1.04337 -10.32987,1.56676 -3.50666,0.90799 -3.81743,0.79746 -6.78388,-2.44089 -3.3486,-3.65594 -6.11308,-4.2716 -8.48815,-1.89661 -2.14408,2.14401 -1.85126,3.96434 1.0667,6.66846 1.40725,1.30409 1.85699,2.10446 1.00027,1.77571 -0.85672,-0.32883 -6.3937,-0.12213 -12.3033,0.46176 -5.9096,0.58386 -12.56062,1.27336 -14.78297,1.53381 -4.17058,0.4888 -5.09869,-0.37014 -2.61673,-2.42989 2.1563,-1.78956 1.74245,-2.63318 -1.65999,-3.36449 -1.69931,-0.36525 -4.94789,-1.90738 -7.213,-3.42496 -2.26473,-1.51754 -5.89662,-3.66823 -8.07583,-4.77731 -2.17921,-1.10923 -6.21922,-3.94186 -8.97721,-6.29463 -4.75318,-4.05478 -4.93682,-4.36681 -3.43604,-6.02527 0.96935,-1.07117 2.36209,-1.56397 3.5899,-1.26992 1.62639,0.38937 2.49494,-0.41237 4.59588,-4.24958 1.42481,-2.60257 2.23686,-4.95457 1.80316,-5.22266 -0.4337,-0.26805 -1.06784,-3.14557 -1.40725,-6.39358 -0.33978,-3.24797 -1.19001,-6.79064 -1.89134,-7.87242 -1.74322,-2.68957 -1.2114,-3.65437 2.44111,-3.61188 l 0,0 z"
   id="cah"
   inkscape:label="#cah"
   onmouseover="highlightRegion(evt);"
   onmouseout="restoreRegion(evt);" /&gt;
</snippet></ROW><ROW><id>2160257</id><snippet>node_color</snippet></ROW><ROW><id>2160257</id><snippet>#!/usr/bin/env python
"""
Draw a graph with matplotlib.
You must have matplotlib for this to work.
"""
__author__ = """Aric Hagberg (hagberg@lanl.gov)"""
try:
    import matplotlib.pyplot as plt
except:
    raise

import networkx as nx

G=nx.house_graph()
# explicitly set positions
pos={0:(0,0),
     1:(1,0),
     2:(0,1),
     3:(1,1),
     4:(0.5,2.0)}

nx.draw_networkx_nodes(G,pos,node_size=2000,nodelist=[4])
nx.draw_networkx_nodes(G,pos,node_size=3000,nodelist=[0,1,2,3],node_color='b')
nx.draw_networkx_edges(G,pos,alpha=0.5,width=6)
plt.axis('off')
plt.savefig("house_with_colors.png") # save as png
plt.show() # display
</snippet></ROW><ROW><id>2160257</id><snippet>node_color</snippet></ROW><ROW><id>2160257</id><snippet>draw_networkx_nodes</snippet></ROW><ROW><id>2160276</id><snippet>-v</snippet></ROW><ROW><id>2160276</id><snippet>sys.modules</snippet></ROW><ROW><id>2160276</id><snippet>__main__</snippet></ROW><ROW><id>2160276</id><snippet>'goo'</snippet></ROW><ROW><id>2160276</id><snippet>'X'</snippet></ROW><ROW><id>2160276</id><snippet>X</snippet></ROW><ROW><id>2160276</id><snippet>__main__</snippet></ROW><ROW><id>2160276</id><snippet>'X'</snippet></ROW><ROW><id>2160276</id><snippet>import goo</snippet></ROW><ROW><id>2160276</id><snippet>sys.modules['goo']</snippet></ROW><ROW><id>2160632</id><snippet>for i in range(100):
  j = i + 3
  print i, " j: ", j
</snippet></ROW><ROW><id>2160632</id><snippet>for i,j in [(i, i+3) for i in range(100)]:
</snippet></ROW><ROW><id>2160643</id><snippet>WSGIScriptAlias /wsgi "C:/wsgi/"

&lt;Directory "C:/wsgi"&gt;
    AllowOverride None
    Options None
    Order deny,allow
    Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>2161070</id><snippet>append()</snippet></ROW><ROW><id>2161070</id><snippet>pop()</snippet></ROW><ROW><id>2161070</id><snippet>&gt;&gt;&gt; stack = [3, 4, 5]
&gt;&gt;&gt; stack.append(6)
&gt;&gt;&gt; stack.append(7)
&gt;&gt;&gt; stack
[3, 4, 5, 6, 7]
&gt;&gt;&gt; stack.pop()
7
&gt;&gt;&gt; stack
[3, 4, 5, 6]
&gt;&gt;&gt; stack.pop()
6
&gt;&gt;&gt; stack.pop()
5
&gt;&gt;&gt; stack
[3, 4]
</snippet></ROW><ROW><id>2161070</id><snippet>&gt;&gt;&gt; my_list = []
&gt;&gt;&gt; not my_list
True
</snippet></ROW><ROW><id>2161244</id><snippet>zlib.decompress(self.request.body)</snippet></ROW><ROW><id>2161354</id><snippet>activemq.prefetchSize: 1
</snippet></ROW><ROW><id>2161354</id><snippet>ack</snippet></ROW><ROW><id>2161451</id><snippet>select</snippet></ROW><ROW><id>2161451</id><snippet>def select(columns=None, whereclause=None, from_obj=[], **kwargs):
    """Returns a ``SELECT`` clause element.
    (... long docstring ...)
    """
    return Select(columns, whereclause=whereclause, from_obj=from_obj, **kwargs)
</snippet></ROW><ROW><id>2161547</id><snippet>&gt;&gt;&gt; re.findall('(\d+|[a-zA-Z]+)', '12fgsdfg234jhfq35rjg')
['12', 'fgsdfg', '234', 'jhfq', '35', 'rjg']
</snippet></ROW><ROW><id>2161801</id><snippet>a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
from itertools import groupby
[len(list(group)) for key, group in groupby(a)]
</snippet></ROW><ROW><id>2161801</id><snippet>[4, 4, 2, 1, 2]
</snippet></ROW><ROW><id>2162092</id><snippet>"plot '%s' with lines, '%s' with points;" % (eout,nout)
</snippet></ROW><ROW><id>2162092</id><snippet>from os import system, remove
system('gnuplot tmp.gp')
remove('tmp.gp')
</snippet></ROW><ROW><id>2162160</id><snippet>deadline</snippet></ROW><ROW><id>2162160</id><snippet>HTTPRequest request = new HTTPRequest(fetchurl, HTTPMethod.POST);
request.getFetchOptions().setDeadline(10d);
</snippet></ROW><ROW><id>2162736</id><snippet>class UniqueVisitsRecord(db.Model):
    # be careful setting date correctly if processing at midnight
    activity_date = db.DateProperty()
    event_count = IntegerProperty()
</snippet></ROW><ROW><id>2162770</id><snippet>proc = subprocess.Popen(path, 0, None, subprocess.PIPE, subprocess.PIPE, None)

for l in proc.stdout.readlines():
  output_file.write(l)
</snippet></ROW><ROW><id>2162770</id><snippet>StartProc()</snippet></ROW><ROW><id>2162770</id><snippet>StartProc()</snippet></ROW><ROW><id>2163675</id><snippet>import subprocess

retcode = subprocess.call(['convert', 'file.jpg', '-crop', 
                           '80x10+90+980', '+repage', 'crop.jpg'])
if retcode != 0:
    print 'error on convert'
else:
    retcode = subprocess.call(['compare', '-metric', 'PSNR', 
                               'reference.jpg', 'crop.jpg', 'crop.jpg'])
    print retcode
</snippet></ROW><ROW><id>2163786</id><snippet>random</snippet></ROW><ROW><id>2163786</id><snippet>random.choice</snippet></ROW><ROW><id>2163786</id><snippet>random.sample</snippet></ROW><ROW><id>2163835</id><snippet>&gt;&gt;&gt; ping = os.stat('/bin/ping')
&gt;&gt;&gt; ping.st_mode &amp; stat.S_ISUID
2048
&gt;&gt;&gt; echo = os.stat('/bin/echo')
&gt;&gt;&gt; echo.st_mode &amp; stat.S_ISUID
0
</snippet></ROW><ROW><id>2163919</id><snippet>install_requires = "useful.package==1.9dev-r1234"
</snippet></ROW><ROW><id>2163919</id><snippet>dependency_links</snippet></ROW><ROW><id>2163919</id><snippet>dependency_links = ["svn://example.org/useful.package/trunk@1234#egg=useful.package-1.9dev-r1234"]
</snippet></ROW><ROW><id>2163919</id><snippet>#egg=</snippet></ROW><ROW><id>2163919</id><snippet>dependency_links</snippet></ROW><ROW><id>2163919</id><snippet>install_requires</snippet></ROW><ROW><id>2164224</id><snippet>import re

from django.conf import settings
from django.contrib.auth.decorators import login_required


class RequireLoginMiddleware(object):
    """
    Middleware component that wraps the login_required decorator around
    matching URL patterns. To use, add the class to MIDDLEWARE_CLASSES and
    define LOGIN_REQUIRED_URLS and LOGIN_REQUIRED_URLS_EXCEPTIONS in your
    settings.py. For example:
    ------
    LOGIN_REQUIRED_URLS = (
        r'/topsecret/(.*)$',
    )
    LOGIN_REQUIRED_URLS_EXCEPTIONS = (
        r'/topsecret/login(.*)$',
        r'/topsecret/logout(.*)$',
    )
    ------
    LOGIN_REQUIRED_URLS is where you define URL patterns; each pattern must
    be a valid regex.

    LOGIN_REQUIRED_URLS_EXCEPTIONS is, conversely, where you explicitly
    define any exceptions (like login and logout URLs).
    """
    def __init__(self):
        self.required = tuple(re.compile(url) for url in settings.LOGIN_REQUIRED_URLS)
        self.exceptions = tuple(re.compile(url) for url in settings.LOGIN_REQUIRED_URLS_EXCEPTIONS)

    def process_view(self, request, view_func, view_args, view_kwargs):
        # No need to process URLs if user already logged in
        if request.user.is_authenticated():
            return None

        # An exception match should immediately return None
        for url in self.exceptions:
            if url.match(request.path):
                return None

        # Requests matching a restricted URL pattern are returned
        # wrapped with the login_required decorator
        for url in self.required:
            if url.match(request.path):
                return login_required(view_func)(request, *view_args, **view_kwargs)

        # Explicitly return None for all non-matching requests
        return None
</snippet></ROW><ROW><id>2164224</id><snippet>LOGIN_REQUIRED_URLS = (
    r'/private_stuff/(.*)$',
    r'/login_required/(.*)$',
)
</snippet></ROW><ROW><id>2164224</id><snippet>@login_required</snippet></ROW><ROW><id>2164279</id><snippet>def __init__(self, city="Berlin"):
  self.city = city
</snippet></ROW><ROW><id>2164353</id><snippet>read</snippet></ROW><ROW><id>2164353</id><snippet>&gt;&gt;&gt; sys.stdin.read(100)
xyzzy                       (I press Enter here)
                            (I press Ctrl+D once)
'xyzzy\n'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2164353</id><snippet>read</snippet></ROW><ROW><id>2164353</id><snippet>&gt;&gt;&gt; sys.stdin.read()        (note I can still type stuff to python)
xyzzy                       (I press Enter)
                            (Now I have to press Ctrl+D twice)
'xyzzy\n'
</snippet></ROW><ROW><id>2164353</id><snippet>sys.stdin.read()</snippet></ROW><ROW><id>2165062</id><snippet>def locateGameDirs(filelist, root=os.curdir): #Find a list of files, return directories.
    toplevel = [folder for folder in os.listdir(root) if os.path.isdir(os.path.join(root, folder))] #List of top-level directories
    fileset = set(filelist)

    for path, dirs, files in os.walk(os.path.abspath(root)):

        curdir = path.split('\\')[1] #The directory os.walk is currently in.

        try: #Thrown here because there's a nonexistant(?) first entry.
            youarehere = toplevel.index(curdir)
            progress = int(((youarehere)/len(toplevel))*100)
        except:
            pass

        for filename in returnMatches(filelist, [k.lower() for k in files]):
            yield filename, path + "\\", progress
</snippet></ROW><ROW><id>2165062</id><snippet>    for wow in locateGameDirs(["wow.exe", "firefox.exe", "vlc.exe"], "C:\\"):
    print wow
</snippet></ROW><ROW><id>2165206</id><snippet>someString[:3] + 'a' + someString[4:]</snippet></ROW><ROW><id>2165319</id><snippet>localflavor</snippet></ROW><ROW><id>2165319</id><snippet>MultiWidget</snippet></ROW><ROW><id>2165319</id><snippet>MultiValueField</snippet></ROW><ROW><id>2165319</id><snippet>class SplitAddressWidget(forms.MultiWidget):
    def __init__(self, attrs=None):     
        widgets = []
        widgets.append(forms.TextInput(attrs=attrs))
        widgets.append(forms.TextInput(attrs=attrs))
        widgets.append(forms.TextInput(attrs=attrs))
        widgets.append(forms.TextInput(attrs=attrs))
        widgets.append(forms.TextInput(attrs=attrs))
        super(SplitAddressWidget, self).__init__(widgets, attrs)
    ...

class SplitAddressField(forms.MultiValueField):
    widget = SplitAddressWidget
    def __init__(self, *args, **kwargs):
        fields = (
                forms.CharField(required=kwargs['required']),
                forms.CharField(required=0),    
                forms.CharField(required=kwargs['required']),
                USStateField(required=kwargs['required']),
                USZipCodeField(required=kwargs['required']),
            )
        super(SplitAddressField, self).__init__(fields, *args, **kwargs)
    ...
</snippet></ROW><ROW><id>2165481</id><snippet>import operator
l = [1, 2, 3, 4, 5, 6, 7, 8, 9]

print reduce(operator.mul, [v for (k, v,) in enumerate(l) if k &lt; 5])
&gt;&gt; 120
</snippet></ROW><ROW><id>2165481</id><snippet>print reduce(operator.mul, l[:5])
&gt;&gt; 120
</snippet></ROW><ROW><id>2165936</id><snippet>if "Katakana" in scripts or "Hiragana" in scripts or "Katakana Phonetic Extensions" in scripts:
    return "ja"

if "CJK Unified Ideographs" in scripts or "Bopomofo" in scripts \
        or "Bopomofo Extended" in scripts or "KangXi Radicals" in scripts:
    return "zh"
</snippet></ROW><ROW><id>2165936</id><snippet>scripts</snippet></ROW><ROW><id>2165936</id><snippet> 49.3 Hiragana
  8.7 Katakana
 42.0 CJK Unified Ideographs
result ja
</snippet></ROW><ROW><id>2165936</id><snippet> 35.9 Hiragana
 49.2 CJK Unified Ideographs
 13.3 Katakana
  1.6 Halfwidth and Fullwidth Forms
result zh
</snippet></ROW><ROW><id>2165936</id><snippet>  2.4 Hiragana
  6.1 CJK Unified Ideographs
  0.1 Halfwidth and Fullwidth Forms
  3.7 Katakana
 87.7 Basic Latin
result ca
</snippet></ROW><ROW><id>2165936</id><snippet> 29.6 Hiragana
 18.5 Katakana
 34.9 CJK Unified Ideographs
 16.9 Basic Latin
result en
</snippet></ROW><ROW><id>2165936</id><snippet>print repr(justwords)
</snippet></ROW><ROW><id>2165936</id><snippet>justwords</snippet></ROW><ROW><id>2165936</id><snippet>print repr(justwords)</snippet></ROW><ROW><id>2165936</id><snippet># coding: ascii
import sys
sys.path.append(r"C:\junk\wotlang\guess-language\guess_language")
import guess_language
URL = "http://feeds.feedburner.com/nchild"
from BeautifulSoup import BeautifulStoneSoup
from pprint import pprint as pp
import urllib2
htmlSource = urllib2.urlopen(URL).read()
soup = BeautifulStoneSoup(htmlSource)
fall = soup.findAll(text=True)
# pp(fall)
justwords = ''.join(fall)
# justwords = justwords.encode('utf-8')
result = guess_language.guessLanguage(justwords)
print "result", result
</snippet></ROW><ROW><id>2165936</id><snippet> 29.0 CJK Unified Ideographs
  0.0 Extended Latin
  0.1 Katakana
 70.9 Basic Latin
result en
</snippet></ROW><ROW><id>2165936</id><snippet> 27.9 CJK Unified Ideographs
  0.0 Extended Latin
  0.1 Katakana
 72.0 Basic Latin
</snippet></ROW><ROW><id>2165936</id><snippet>guess_language.py</snippet></ROW><ROW><id>2165936</id><snippet>for key, value in run_types.items():
    pct = (value*100.0) / totalCount # line changed so that pct is a float
    print "%5.1f %s" % (pct, key) # line inserted
    if pct &gt;=40:
        relevant_runs.append(key)
</snippet></ROW><ROW><id>2165936</id><snippet>pp(fall)</snippet></ROW><ROW><id>2165936</id><snippet>&lt;img style="float:left; margin:0 10px 0px 10px;cursor:pointer; cursor:hand
;" width="60px" src="http://2.bp.blogspot.com/_LBJ4udkQZag/Rm6sTn1b7NI/AAAAAAAAA
FA/bYkSJZ3i2bg/s400/hepinge169.gif" border="0" alt=""id="BLOGGER_PHOTO_ID_507518
3283203730642" alt="\u548c\u5e73\u6771\u8def\u4e00\u6bb5169\u865f" title="\u548c
\u5e73\u6771\u8def\u4e00\u6bb5169\u865f"/&gt;\u4eca\u5929\u4e2d\u5348\u8d70\u523
0\u516c\u53f8\u5c0d\u9762\u76847-11\u8cb7\u98f2\u6599\uff0c\u7a81\u7136\u770b\u5
230\u9019\u500b7-11\u602a\u7269\uff01\u770b\u8d77\u4f86\u6bd4\u6a19\u6e96\u62db\
u724c\u6709\u4f5c\u7528\u7684\u53ea\u6709\u4e2d\u9593\u7684\u6307\u793a\u71c8\u8
00c\u5df2\uff0c\u53ef\u537b\u6709\u8d85\u7d1a\u5927\u7684footprint\uff01&lt;br /
&gt;&lt;br /&gt;&lt;a href="http://4.bp.blogspot.com/_LBJ4udkQZag/Rm6wHH1b7QI/AA
</snippet></ROW><ROW><id>2165936</id><snippet>&lt;</snippet></ROW><ROW><id>2166133</id><snippet>from lxml.html import fromstring
from lxml.html.clean import Cleaner
import requests

url = "http://stackoverflow.com/questions/2165943/removing-html-tags-from-a-text-using-regular-expression-in-python"
html = requests.get(url).text

doc = fromstring(html)

tags = ['h1','h2','h3','h4','h5','h6',
       'div', 'span', 
       'img', 'area', 'map']
args = {'meta':False, 'safe_attrs_only':False, 'page_structure':False, 
       'scripts':True, 'style':True, 'links':True, 'remove_tags':tags}
cleaner = Cleaner(**args)

path = '/html/body'
body = doc.xpath(path)[0]

print cleaner.clean_html(body).text_content().encode('ascii', 'ignore')
</snippet></ROW><ROW><id>2166161</id><snippet>._replace</snippet></ROW><ROW><id>2166161</id><snippet>p = p._replace(x=33)
</snippet></ROW><ROW><id>2166583</id><snippet>x = [['565.0', '575.0'], ['1215.0', '245.0'], ['1740.0', '245.0']]
x = [[int(float(j)) for j in i] for i in x]
</snippet></ROW><ROW><id>2166651</id><snippet>class Product(models.Model):
    # ...
    availability = models.IntegerField(help_text="(updated on save)")

    # Use Seth's save()
    def save(self, *args, **kwargs):
        self.availability = self.inventory - self.commited
        super(Product, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>2166666</id><snippet>exec</snippet></ROW><ROW><id>2166819</id><snippet>unittest.TestCase.assertEqual</snippet></ROW><ROW><id>2166819</id><snippet>'assertEqual(b, 5)'</snippet></ROW><ROW><id>2166819</id><snippet>'self.'</snippet></ROW><ROW><id>2166819</id><snippet>self</snippet></ROW><ROW><id>2166819</id><snippet>unittest.Testcase</snippet></ROW><ROW><id>2166841</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>2166841</id><snippet>tuple</snippet></ROW><ROW><id>2166841</id><snippet>_fields</snippet></ROW><ROW><id>2166841</id><snippet>def isnamedtupleinstance(x):
  t = type(x)
  b = t.__bases__
  if len(b) != 1 or b[0] != tuple: return False
  f = getattr(t, '_fields', None)
  if not isinstance(f, tuple): return False
  return all(type(n)==str for n in f)
</snippet></ROW><ROW><id>2167177</id><snippet>mechanize.Browser.open_novisit()</snippet></ROW><ROW><id>2167177</id><snippet>open()</snippet></ROW><ROW><id>2167962</id><snippet>break</snippet></ROW><ROW><id>2167962</id><snippet>li</snippet></ROW><ROW><id>2167962</id><snippet>from itertools import cycle

li = [0, 1, 2, 3]

running = True
licycle = cycle(li)
# Prime the pump
nextelem = licycle.next()
while running:
    thiselem, nextelem = nextelem, licycle.next()
</snippet></ROW><ROW><id>2167962</id><snippet>li = [0, 1, 2, 3]

running = True
while running:
    for idx, elem in enumerate(li):
        thiselem = elem
        nextelem = li[(idx + 1) % len(li)]
</snippet></ROW><ROW><id>2167962</id><snippet>li = [0, 1, 2, 3]

running = True
idx = 0
while running:
    thiselem = li[idx]
    idx = (idx + 1) % len(li)
    nextelem = li[idx]
</snippet></ROW><ROW><id>2167962</id><snippet>tee</snippet></ROW><ROW><id>2167962</id><snippet>len(li)</snippet></ROW><ROW><id>2167962</id><snippet>running</snippet></ROW><ROW><id>2167962</id><snippet>for</snippet></ROW><ROW><id>2167962</id><snippet>break</snippet></ROW><ROW><id>2168137</id><snippet>split</snippet></ROW><ROW><id>2168137</id><snippet>&gt;&gt;&gt; "0,1,2".split(",")
['0', '1', '2']
</snippet></ROW><ROW><id>2168137</id><snippet>&gt;&gt;&gt; [int(x) for x in "0,1,2".split(",")]
[0, 1, 2]
</snippet></ROW><ROW><id>2168541</id><snippet>item.find('pubdate').string.strip()</snippet></ROW><ROW><id>2168547</id><snippet>commands = ['foo', 'bar', 'exit', 'hello world', 'add number']
</snippet></ROW><ROW><id>2168547</id><snippet>s.startswith(command)</snippet></ROW><ROW><id>2168682</id><snippet>import random

import string
def self(): pass
self.alphabet = list(string.lowercase)
self.finalWord = []
self.length = 4

for x in range(5):
  alphabet = self.alphabet
  for i in range (self.length):
      value = random.sample(alphabet, 1)
      alphabet.remove(value[0])
      self.finalWord.append(value[0])
  print "Final word = ", self.finalWord
</snippet></ROW><ROW><id>2168682</id><snippet>$ python sa.py 
Final word =  ['y', 'm', 'u', 'z']
Final word =  ['y', 'm', 'u', 'z', 'h', 'b', 'c', 's']
Final word =  ['y', 'm', 'u', 'z', 'h', 'b', 'c', 's', 'x', 'l', 'r', 'n']
Final word =  ['y', 'm', 'u', 'z', 'h', 'b', 'c', 's', 'x', 'l', 'r', 'n', 'q', 'a', 'k', 'e']
Final word =  ['y', 'm', 'u', 'z', 'h', 'b', 'c', 's', 'x', 'l', 'r', 'n', 'q', 'a', 'k', 'e', 'p', 'd', 'j', 'w']
$ python sa.py 
Final word =  ['k', 'v', 'o', 'd']
Final word =  ['k', 'v', 'o', 'd', 'q', 'p', 'w', 'l']
Final word =  ['k', 'v', 'o', 'd', 'q', 'p', 'w', 'l', 'n', 'u', 'g', 't']
Final word =  ['k', 'v', 'o', 'd', 'q', 'p', 'w', 'l', 'n', 'u', 'g', 't', 'i', 'r', 'e', 'f']
Final word =  ['k', 'v', 'o', 'd', 'q', 'p', 'w', 'l', 'n', 'u', 'g', 't', 'i', 'r', 'e', 'f', 's', 'c', 'j', 'z']
$ python sa.py 
Final word =  ['o', 'a', 'g', 't']
Final word =  ['o', 'a', 'g', 't', 'k', 'j', 'y', 'w']
Final word =  ['o', 'a', 'g', 't', 'k', 'j', 'y', 'w', 'z', 'l', 'i', 's']
Final word =  ['o', 'a', 'g', 't', 'k', 'j', 'y', 'w', 'z', 'l', 'i', 's', 'u', 'p', 'f', 'm']
Final word =  ['o', 'a', 'g', 't', 'k', 'j', 'y', 'w', 'z', 'l', 'i', 's', 'u', 'p', 'f', 'm', 'h', 'e', 'q', 'v']
</snippet></ROW><ROW><id>2168682</id><snippet>random</snippet></ROW><ROW><id>2168682</id><snippet>class Phenotype:
   ...
   chromosome = []

   def __init__(self, alleles = []):
    self.length = len(alleles)
    self.alleles = alleles
    self.initialBuild()

   def initialBuild(self):
    alleleSet = self.alleles
    for i in range (self.length):
        value = random.sample(alleleSet, 1)
        alleleSet.remove(value[0])
        self.chromosome.append(value[0])
</snippet></ROW><ROW><id>2168682</id><snippet>__init__</snippet></ROW><ROW><id>2168682</id><snippet>self.chromosome = ...</snippet></ROW><ROW><id>2168682</id><snippet>self.chromosome</snippet></ROW><ROW><id>2168682</id><snippet>Phenotype.chromosome</snippet></ROW><ROW><id>2168682</id><snippet>Phenotype</snippet></ROW><ROW><id>2168682</id><snippet>chromosome</snippet></ROW><ROW><id>2168682</id><snippet>self.chromosome = []</snippet></ROW><ROW><id>2168682</id><snippet>__init__</snippet></ROW><ROW><id>2168682</id><snippet>    self.alleles = alleles
       ...
    alleleSet = self.alleles
       ...
        alleleSet.remove(value[0])
</snippet></ROW><ROW><id>2168682</id><snippet>self.alleles</snippet></ROW><ROW><id>2168682</id><snippet>alleleSet</snippet></ROW><ROW><id>2168682</id><snippet>alleles</snippet></ROW><ROW><id>2168682</id><snippet>remove</snippet></ROW><ROW><id>2168682</id><snippet>alleleSet = list(self.alleles)</snippet></ROW><ROW><id>2168682</id><snippet>self.chromosome = list(self.alleles)
random.shuffle(self.chromosome)
</snippet></ROW><ROW><id>2168777</id><snippet>__slots__</snippet></ROW><ROW><id>2168777</id><snippet>__getstate__</snippet></ROW><ROW><id>2168777</id><snippet>pickle</snippet></ROW><ROW><id>2168777</id><snippet>suds.sudsobject</snippet></ROW><ROW><id>2168777</id><snippet>copy_reg</snippet></ROW><ROW><id>2168777</id><snippet>__getstate__</snippet></ROW><ROW><id>2169156</id><snippet>% for i, x in enumerate(headings): 
</snippet></ROW><ROW><id>2169156</id><snippet>i</snippet></ROW><ROW><id>2169156</id><snippet>len(headings) - 1</snippet></ROW><ROW><id>2169328</id><snippet>_string</snippet></ROW><ROW><id>2169328</id><snippet>_simple</snippet></ROW><ROW><id>2169328</id><snippet>_string</snippet></ROW><ROW><id>2169328</id><snippet>__len__</snippet></ROW><ROW><id>2169626</id><snippet>[[c, a] for c, a in zip(cities, airports)]
</snippet></ROW><ROW><id>2169626</id><snippet>list</snippet></ROW><ROW><id>2169626</id><snippet>[list(x) for x in zip(cities, airports)]
</snippet></ROW><ROW><id>2169626</id><snippet>map</snippet></ROW><ROW><id>2169626</id><snippet>map(list, zip(cities, airports))
</snippet></ROW><ROW><id>2169853</id><snippet>itertools</snippet></ROW><ROW><id>2169853</id><snippet>product</snippet></ROW><ROW><id>2169853</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; L = [1,2,3]
&gt;&gt;&gt; itertools.product(L,L)
&lt;itertools.product object at 0x83788&gt;
&gt;&gt;&gt; list(_)
[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]
</snippet></ROW><ROW><id>2169955</id><snippet>a.__init__(self)</snippet></ROW><ROW><id>2169955</id><snippet>a</snippet></ROW><ROW><id>2169955</id><snippet>object</snippet></ROW><ROW><id>2169955</id><snippet>super()</snippet></ROW><ROW><id>2170036</id><snippet>/usr/bin/easy_install-2.6</snippet></ROW><ROW><id>2170057</id><snippet>idx=(mask==0)
image[idx]=chex[idx]
</snippet></ROW><ROW><id>2170057</id><snippet>image</snippet></ROW><ROW><id>2170057</id><snippet>idx</snippet></ROW><ROW><id>2170057</id><snippet>idx</snippet></ROW><ROW><id>2170188</id><snippet>import random

class ArithmeticOperatorNode(object):
    def __init__(self, operator, *args):
        self.operator = operator
        self.children = args
    def eval(self):
        if self.operator == '+':
            return sum(x.eval() for x in self.children)
        assert False, 'Unknown arithmetic operator ' + self.operator
    def __str__(self):
        return '(%s)' % (' ' + self.operator + ' ').join(str(x) for x in self.children)

class ConstantNode(object):
    def __init__(self, constant):
        self.constant = constant
    def eval(self):
        return self.constant
    def __str__(self):
        return str(self.constant)

def build_tree(n):
    if n == 0:
        return ConstantNode(random.randrange(100))
    else:
        left = build_tree(n - 1)
        right = build_tree(n - 1)
        return ArithmeticOperatorNode('+', left, right)

node = build_tree(5)
print node
print node.eval()
</snippet></ROW><ROW><id>2170188</id><snippet>node = build_tree(5)
print node.eval()
</snippet></ROW><ROW><id>2170188</id><snippet>__str__</snippet></ROW><ROW><id>2170638</id><snippet>sort()</snippet></ROW><ROW><id>2170638</id><snippet>None</snippet></ROW><ROW><id>2170667</id><snippet>app = authkit.authenticate.middleware(app, app_conf)
</snippet></ROW><ROW><id>2170667</id><snippet>app = PylonsApp()
</snippet></ROW><ROW><id>2170915</id><snippet>def index_containing_substring(the_list, substring):
    for i, s in enumerate(the_list):
        if substring in s:
              return i
    return -1
</snippet></ROW><ROW><id>2170994</id><snippet>parent</snippet></ROW><ROW><id>2170994</id><snippet>parent_map = dict((c, p) for p in tree.getiterator() for c in p)
</snippet></ROW><ROW><id>2171112</id><snippet>parameter_set_name = "%s"
</snippet></ROW><ROW><id>2171112</id><snippet>cursor.execute("""UPDATE parameters SET %s = %s WHERE parameter_set_name = \"%s\" """ % (i, float(getattr(self.p, i)), self.list_box_parameter.GetStringSelection()))
</snippet></ROW><ROW><id>2171119</id><snippet>str.translate()</snippet></ROW><ROW><id>2171119</id><snippet># You only need to do this once
&gt;&gt;&gt; title_trans=''.join(chr(c) if chr(c).isupper() or chr(c).islower() else '_' for c in range(256))

&gt;&gt;&gt; "abcde1234!@%^".translate(title_trans)
'abcde________'

# Using map+lambda
$ python -m timeit '"".join(map(lambda x: x if (x.isupper() or x.islower()) else "_", "abcd1234!@#$".strip()))'
10000 loops, best of 3: 21.9 usec per loop

# Using str.translate
$ python -m timeit -s 'titletrans="".join(chr(c) if chr(c).isupper() or chr(c).islower() else "_" for c in range(256))' '"abcd1234!@#$".translate(titletrans)'
1000000 loops, best of 3: 0.422 usec per loop

# Here is regex for a comparison
$ python -m timeit -s 'import re;transre=re.compile("[\W\d]+")' 'transre.sub("_","abcd1234!@#$")'
100000 loops, best of 3: 3.17 usec per loop
</snippet></ROW><ROW><id>2171119</id><snippet># coding: UTF-8

def format_title_unicode_translate(title):
    return title.translate(title_unicode_trans)

class TitleUnicodeTranslate(dict):
    def __missing__(self,item):
        uni = unichr(item)
        res = u"_"
        if uni.isupper() or uni.islower():
            res = uni
        self[item] = res
        return res
title_unicode_trans=TitleUnicodeTranslate()

print format_title_unicode_translate(u"Metallica Μεταλλικα")
</snippet></ROW><ROW><id>2171119</id><snippet>        if item&lt;256 and (uni.isupper() or uni.islower()):
</snippet></ROW><ROW><id>2171142</id><snippet>_mysql.dll</snippet></ROW><ROW><id>2171238</id><snippet>order = models.IntegerField(default = 0, blank = True)
</snippet></ROW><ROW><id>2171418</id><snippet>.__getattr__()</snippet></ROW><ROW><id>2171565</id><snippet>cumulative_nodes_found_list</snippet></ROW><ROW><id>2171624</id><snippet>datetime.datetime(..., tzinfo)</snippet></ROW><ROW><id>2171624</id><snippet>Europe/Paris</snippet></ROW><ROW><id>2171624</id><snippet>localize</snippet></ROW><ROW><id>2171624</id><snippet>&gt;&gt;&gt; tz= pytz.timezone('Europe/Paris')               # using built-in zoneinfo
&gt;&gt;&gt; tz
&lt;DstTzInfo 'Europe/Paris' PMT+0:09:00 STD&gt;          # what? Pierre et Miquelon Time?
&gt;&gt;&gt; datetime.datetime(2010,1,1,12,0,0, tzinfo=tz)
datetime.datetime(2010, 1, 1, 12, 0, tzinfo=&lt;DstTzInfo 'Europe/Paris' PMT+0:09:00 STD&gt;) # bad
&gt;&gt;&gt; tz.localize(datetime.datetime(2010,1,1,12,0,0))
datetime.datetime(2010, 1, 1, 12, 0, tzinfo=&lt;DstTzInfo 'Europe/Paris' CET+1:00:00 STD&gt;) # OK
</snippet></ROW><ROW><id>2171624</id><snippet>tzinfo</snippet></ROW><ROW><id>2171624</id><snippet>tz</snippet></ROW><ROW><id>2171624</id><snippet>localize</snippet></ROW><ROW><id>2171634</id><snippet>glib.timeout_add()</snippet></ROW><ROW><id>2171634</id><snippet>threading.Timer</snippet></ROW><ROW><id>2171634</id><snippet>import gtk, glib

class example:
    def __init__(self):
        window = gtk.Window()
        window.set_title("example")
        window.resize(600,400)
        box = gtk.HBox(homogeneous = True, spacing = 2)
        self.buf = gtk.TextBuffer()
        self.buf.connect("changed", self.buf_on_change)
        textInput = gtk.TextView(self.buf)
        box.add(textInput)
        self.lbl = gtk.Label()
        box.add(self.lbl)
        window.add(box)
        window.connect("destroy", gtk.main_quit)
        window.show_all()

        self.timer = glib.timeout_add(1000, self.renderText)

    def buf_on_change(self, buf):
        glib.source_remove(self.timer)
        self.timer = glib.timeout_add(1000, self.renderText)


    def renderText(self):
        txt = self.buf.get_text(*self.buf.get_bounds())
        # perform computation-intensive text-manipulation here
        self.lbl.set_text(txt)
        return False

if __name__ == '__main__':
    example()
    gtk.main()
</snippet></ROW><ROW><id>2172059</id><snippet>r'\[b\](.*)\[\/b\]'
</snippet></ROW><ROW><id>2172059</id><snippet>r'\[b\](.*?)\[\/b\]'
</snippet></ROW><ROW><id>2172059</id><snippet>*</snippet></ROW><ROW><id>2172059</id><snippet>?</snippet></ROW><ROW><id>2172059</id><snippet>re</snippet></ROW><ROW><id>2172224</id><snippet>nodes.append((1, firstNode))
while nodes and lvl&lt;5:
    lvl, p = nodes.pop(0)

    For each child:
        #...create child
        nodes.append((lvl+1, cs))
</snippet></ROW><ROW><id>2172224</id><snippet>collections.deque</snippet></ROW><ROW><id>2172224</id><snippet>list</snippet></ROW><ROW><id>2172224</id><snippet>j+=1</snippet></ROW><ROW><id>2172537</id><snippet>trim</snippet></ROW><ROW><id>2172537</id><snippet>xargs</snippet></ROW><ROW><id>2172537</id><snippet>if</snippet></ROW><ROW><id>2172537</id><snippet>mkdir -p</snippet></ROW><ROW><id>2172537</id><snippet>for f in *.txt; do
    band=$(echo "$f" | cut -d'-' -f1 | xargs)
    mkdir -p "$band"
    mv "$f" "$band"
done
</snippet></ROW><ROW><id>2172537</id><snippet>trim</snippet></ROW><ROW><id>2172537</id><snippet>xargs</snippet></ROW><ROW><id>2172537</id><snippet>xargs</snippet></ROW><ROW><id>2172663</id><snippet>execute</snippet></ROW><ROW><id>2172663</id><snippet>cursor</snippet></ROW><ROW><id>2172663</id><snippet>processed = dict((n, "'%s'" % v if v is not None else 'NULL')
                 for n, v in locals().iteritems())
</snippet></ROW><ROW><id>2172663</id><snippet>processed</snippet></ROW><ROW><id>2172663</id><snippet>locals()</snippet></ROW><ROW><id>2172689</id><snippet>BOOST_PYTHON_MODULE( -name- )
</snippet></ROW><ROW><id>2173083</id><snippet>q = Session.query(Articles).filter(Articles.article_id == ArticleTags.article_id).\
    filter(ArticleTags.tag_id == Tags.tag_id).\
    filter(Tags.name == 'tag_name')
</snippet></ROW><ROW><id>2173083</id><snippet>q = Session.query(Articles).filter(Articles.tags.any(name = 'tag_name'))
</snippet></ROW><ROW><id>2173119</id><snippet>numpy.zeros((3,3,3)) 
</snippet></ROW><ROW><id>2173319</id><snippet>set</snippet></ROW><ROW><id>2173319</id><snippet>name1 = "naveen"; name2 = "darshana"

name1_set=set(name1)
name2_set=set(name2)

clean1=[x for x in  name1 if x not in name2_set]
clean2=[x for x in name2 if x not in name1_set]

clean1.extend(['0']*(len(name1)-len(clean1)))
clean2.extend(['1']*(len(name2)-len(clean2)))

print clean1,clean2
</snippet></ROW><ROW><id>2173319</id><snippet>set</snippet></ROW><ROW><id>2173319</id><snippet>name1 = "naveen"; name2 = "darshana"

count1={}
count2={}


for x in name1:
    count1[x]=count1.get(x,0)+1

for x in name2:
    count2[x]=count2.get(x,0)+1

def remove_dups(name,count,null):
    clean=[]
    for x in name:
        if count.get(x,0):
            count[x]-=1
        else:
            clean.append(x)
    clean.extend([null]*(len(name)-len(clean)))
    return clean

clean1=remove_dups(name1,count2,'0')
clean2=remove_dups(name2,count1,'1')

print clean1,clean2
</snippet></ROW><ROW><id>2173319</id><snippet>dict</snippet></ROW><ROW><id>2173319</id><snippet>['v', 'e', 'e', 'n', '0', '0']</snippet></ROW><ROW><id>2173319</id><snippet>['d', 'r', 's', 'h', 'a', 'a', '1', '1']</snippet></ROW><ROW><id>2173321</id><snippet>property</snippet></ROW><ROW><id>2173321</id><snippet>type(X)</snippet></ROW><ROW><id>2173321</id><snippet>class classprop(object):
  def __init__(self, f):
    self.f = classmethod(f)
  def __get__(self, *a):
    return self.f.__get__(*a)()

class buh(object):
  @classprop
  def bah(cls): return 23

print buh.bah
</snippet></ROW><ROW><id>2173321</id><snippet>23</snippet></ROW><ROW><id>2173481</id><snippet>binomal</snippet></ROW><ROW><id>2173481</id><snippet>def binomal(n):
  return tuple(binomal_aux(n, i) for i in range(n+1))
</snippet></ROW><ROW><id>2173481</id><snippet>binom</snippet></ROW><ROW><id>2173481</id><snippet>al</snippet></ROW><ROW><id>2173542</id><snippet>functions = {0: reference_to_function_1, 1: reference_to_function_2}

def wrapper(index):
    functions[index]()
</snippet></ROW><ROW><id>2173542</id><snippet>QtCore.QObject.connect(a, QtCore.SIGNAL("QtSig()"), pyFunction) #function-style
QtCore.QObject.connect(a, QtCore.SIGNAL("QtSig()"), pyClass.pyMethod) #method-style
</snippet></ROW><ROW><id>2173655</id><snippet>def app(environ, start_response):
    output = "&lt;html&gt;&lt;body&gt;&lt;p&gt;Räksmörgås&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;".encode('utf-8')
    start_response('200 OK', [
        ('Content-Type', 'text/html; charset=utf-8'),
        ('Content-Length', str(len(output)))
    ])

    return [output]
</snippet></ROW><ROW><id>2173655</id><snippet>yield</snippet></ROW><ROW><id>2173843</id><snippet>numpy</snippet></ROW><ROW><id>2173843</id><snippet>lol = [ range(10), range(2, 12), range(5, 15) ]
</snippet></ROW><ROW><id>2173843</id><snippet>lol[1]</snippet></ROW><ROW><id>2173843</id><snippet>indices = range(10)
indices.sort(key = lol[1].__getitem__)
for i, sublist in enumerate(lol):
  lol[i] = [sublist[j] for j in indices]
</snippet></ROW><ROW><id>2173992</id><snippet>def create_basic_image():
    img = cairo.ImageSurface(cairo.FORMAT_ARGB32, 24, 24)
    c = cairo.Context(img)
    c.set_line_width(4)
    c.arc(12, 12, 8, 0, 2 * math.pi)
    c.set_source_rgb(1, 0, 0)
    c.stroke_preserve()
    c.set_source_rgb(1, 1, 1)
    c.fill()
    return img

def expose(sender, event, img):
    cr = darea.window.cairo_create()
    for i in range(num):
        cr.set_source_surface(img, x[i], y[i])        
        cr.paint()
        ... # your update code here

...
darea.connect("expose-event", expose, create_basic_image())
</snippet></ROW><ROW><id>2173992</id><snippet>gobject.timeout_add</snippet></ROW><ROW><id>2173992</id><snippet>idle_add</snippet></ROW><ROW><id>2174050</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; string = 'ltrim(rtrim(to_char(base_field_name, format))) renamed_field_name'
&gt;&gt;&gt; rx = re.compile('^(.*?\()*(.+?)(,.*?)*(,|\).*?)*$')
&gt;&gt;&gt; rx.search(string).group(2)
'base_field_name'
&gt;&gt;&gt; rx.search('base_field_name').group(2)
'base_field_name'
</snippet></ROW><ROW><id>2174076</id><snippet>import wx

class Frame(wx.Frame):
    def __init__(self):
        super(Frame, self).__init__(None, -1, 'CursorTracker')
        self.mdc = None # memory dc to draw off-screen
        self.Bind(wx.EVT_SIZE, self.on_size)
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.on_erase)
        self.Bind(wx.EVT_PAINT, self.on_paint)
        w, h = wx.GetDisplaySize()
        w, h = w * 3 / 4, h * 3 / 4
        self.SetSize((w, h))
        self.Center()
        self.on_timer()
    def on_size(self, event):
        # re-create memory dc to fill window
        w, h = self.GetClientSize()
        self.mdc = wx.MemoryDC(wx.EmptyBitmap(w, h))
        self.redraw()
    def on_erase(self, event):
        pass # don't do any erasing to avoid flicker
    def on_paint(self, event):
        # just blit the memory dc
        dc = wx.PaintDC(self)
        if not self.mdc:
            return
        w, h = self.mdc.GetSize()
        dc.Blit(0, 0, w, h, self.mdc, 0, 0)
    def on_timer(self):
        # refresh every N milliseconds
        self.redraw()
        wx.CallLater(100, self.on_timer)
    def redraw(self):
        # do the actual drawing on the memory dc here
        dc = self.mdc
        w, h = dc.GetSize()
        dc.Clear()
        dc.DrawLine(0, 0, w, h)
        self.Refresh()

if __name__ == '__main__':
    app = wx.PySimpleApp()
    frame = Frame()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>2174086</id><snippet>ctypes</snippet></ROW><ROW><id>2174120</id><snippet>PyOS_snprintf</snippet></ROW><ROW><id>2174120</id><snippet>vsprintf</snippet></ROW><ROW><id>2174120</id><snippet>vsnprintf</snippet></ROW><ROW><id>2174601</id><snippet>import __builtin__
import StringIO

class File(StringIO.StringIO):
  def __init__(self, *a, **k): pass

__builtin__.file = __builtin__.open = File
</snippet></ROW><ROW><id>2174843</id><snippet>def GetModelData(form, fields):
    """
    Extract data from the bound form model instance and return a
    dictionary that is easily usable in templates with the actual
    field verbose name as the label, e.g.

    model_data{"Address line 1": "32 Memory lane",
               "Address line 2": "Brainville",
               "Phone": "0212378492"}

    This way, the template has an ordered list that can be easily
    presented in tabular form.
    """
    model_data = {}
    for field in fields:
        model_data[form[field].label] = eval("form.data.%s" % form[field].name)
    return model_data

@login_required
def clients_view(request, client_id):
    client = Client.objects.get(id=client_id)
    form = AddClientForm(client)

    fields = ("address1", "address2", "address3", "address4",
              "phone", "fax", "mobile", "email")
    model_data = GetModelData(form, fields)

    template_vars = RequestContext(request,
        {
            "client": client,
            "model_data": model_data
        }
    )
    return render_to_response("clients-view.html", template_vars)
</snippet></ROW><ROW><id>2174843</id><snippet>&lt;table class="client-view"&gt;
    &lt;tbody&gt;
    {% for field, value in model_data.items %}
        &lt;tr&gt;
            &lt;td class="field-name"&gt;{{ field }}&lt;/td&gt;&lt;td&gt;{{ value }}&lt;/td&gt;
        &lt;/tr&gt;
    {% endfor %}
    &lt;/tbody&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>2175135</id><snippet>sscanf</snippet></ROW><ROW><id>2175135</id><snippet>sscanf</snippet></ROW><ROW><id>2175135</id><snippet>re.split</snippet></ROW><ROW><id>2175393</id><snippet>distinct()</snippet></ROW><ROW><id>2175393</id><snippet>for value in Session.query(Table.column).distinct():
     pass
</snippet></ROW><ROW><id>2175930</id><snippet>NSURL *URL = /*…*/;
NSError *error = nil;

QTMovie *movie = [QTMovie movieWithURL:URL
    error:&amp;error];
</snippet></ROW><ROW><id>2175930</id><snippet>movie = QTMovie.movieWithURL(URL, error = ???)
</snippet></ROW><ROW><id>2175930</id><snippet>movieWithURL</snippet></ROW><ROW><id>2175930</id><snippet>movieWithURL:error:</snippet></ROW><ROW><id>2175930</id><snippet>movieWithURL:</snippet></ROW><ROW><id>2175930</id><snippet>movieWithURL</snippet></ROW><ROW><id>2175930</id><snippet>foo = Foo.foo(fred, bar=bar, baz=baz)
</snippet></ROW><ROW><id>2175930</id><snippet>foo:bar:baz:</snippet></ROW><ROW><id>2175930</id><snippet>foo:baz:bar:</snippet></ROW><ROW><id>2175930</id><snippet>foo:baz:bar:</snippet></ROW><ROW><id>2175930</id><snippet>foo:bar:baz:</snippet></ROW><ROW><id>2175930</id><snippet>movie = QTMovie.movieWithURL_error_(URL, ???)
</snippet></ROW><ROW><id>2175930</id><snippet>error:</snippet></ROW><ROW><id>2175930</id><snippet>movie, error = QTMovie.movieWithURL_error_(URL, None)
</snippet></ROW><ROW><id>2176059</id><snippet>WORD_FREQUENCIES = {
    'file': 0.00123,
    'files': 0.00124,
    'save': 0.002,
    'ave': 0.00001,
    'as': 0.00555
}

def split_text(text, word_frequencies, cache):
    if text in cache:
        return cache[text]
    if not text:
        return 1, []
    best_freq, best_split = 0, []
    for i in xrange(1, len(text) + 1):
        word, remainder = text[:i], text[i:]
        freq = word_frequencies.get(word, None)
        if freq:
            remainder_freq, remainder = split_text(
                    remainder, word_frequencies, cache)
            freq *= remainder_freq
            if freq &gt; best_freq:
                best_freq = freq
                best_split = [word] + remainder
    cache[text] = (best_freq, best_split)
    return cache[text]

print split_text('filesaveas', WORD_FREQUENCIES, {})

--&gt; (1.3653e-08, ['file', 'save', 'as'])
</snippet></ROW><ROW><id>2176471</id><snippet>q = Ticket.objects.extra(select={'is_top': "status = 4"})
q = q.extra(order_by = ['-is_top'])
</snippet></ROW><ROW><id>2176591</id><snippet>frame1.axes.get_xaxis().set_visible(False)
frame1.axes.get_yaxis().set_visible(False)
</snippet></ROW><ROW><id>2176591</id><snippet>frame1.axes.get_xaxis().set_ticks([])
frame1.axes.get_yaxis().set_ticks([])
</snippet></ROW><ROW><id>2176591</id><snippet>plt.xlabel()</snippet></ROW><ROW><id>2176591</id><snippet>plt.ylabel()</snippet></ROW><ROW><id>2177392</id><snippet>p.communicate(b"insert into egg values ('egg');");
</snippet></ROW><ROW><id>2177392</id><snippet>value = open('thefile', 'rt').read()
p.communicate(value);
</snippet></ROW><ROW><id>2177392</id><snippet>value = open('thefile', 'rb').read()
p.communicate(value);
</snippet></ROW><ROW><id>2177392</id><snippet>value</snippet></ROW><ROW><id>2177392</id><snippet>p.communicate(value.encode('latin-1');
</snippet></ROW><ROW><id>2177454</id><snippet>glob.iglob</snippet></ROW><ROW><id>2177454</id><snippet>topdir = os.path.join('/somedir', 'labels', '*')
for filename in glob.iglob(topdir):
     if filelen(filename) &gt; 15:
          #do stuff
</snippet></ROW><ROW><id>2177454</id><snippet>dir</snippet></ROW><ROW><id>2177454</id><snippet>filelen</snippet></ROW><ROW><id>2177454</id><snippet>def many_line(fname, many=15):
    for i, line in enumerate(open(fname)):
        if i &gt; many:
            return True
    return False
</snippet></ROW><ROW><id>2177537</id><snippet>hist</snippet></ROW><ROW><id>2177537</id><snippet>x = scipy.arange(4)
y = scipy.array([4,7,6,5])
f = pylab.figure()
ax = f.add_axes([0.1, 0.1, 0.8, 0.8])
ax.bar(x, y, align='center')
ax.set_xticks(x)
ax.set_xticklabels(['Aye', 'Bee', 'Cee', 'Dee'])
f.show()
</snippet></ROW><ROW><id>2177607</id><snippet>mylist=['a','b','c','d','e']
myorder=[3,2,0,1,4]
mylist = [ mylist[i] for i in myorder]
print mylist
</snippet></ROW><ROW><id>2177890</id><snippet>class PublicClass(object):
    pass

class _PrivateClass(object):
    pass
</snippet></ROW><ROW><id>2177890</id><snippet>from module import *
</snippet></ROW><ROW><id>2177890</id><snippet>from module import _PrivateClass
</snippet></ROW><ROW><id>2178048</id><snippet>Location</snippet></ROW><ROW><id>2178048</id><snippet>Location: http://127.0.0.1/admin/
</snippet></ROW><ROW><id>2178048</id><snippet>Location</snippet></ROW><ROW><id>2178048</id><snippet>syntax: port_in_redirect [ on|off ]
default: port_in_redirect on
context: http, server, location
</snippet></ROW><ROW><id>2178793</id><snippet>import threading

def nothing():
    pass

def testThreads():
    timers = [threading.Timer(10.0, nothing) for _ in xrange(881)]
    print "Starting threads."
    map(threading.Thread.start, timers)
    print "Joining threads."
    map(threading.Thread.join, timers)
    print "Done."

if __name__ == "__main__":
    testThreads()
</snippet></ROW><ROW><id>2179053</id><snippet>key=</snippet></ROW><ROW><id>2179053</id><snippet>None</snippet></ROW><ROW><id>2179053</id><snippet>datetime</snippet></ROW><ROW><id>2179053</id><snippet>None</snippet></ROW><ROW><id>2179053</id><snippet>import datetime
mindate = datetime.date(datetime.MINYEAR, 1, 1)

def getaccountingdate(x):
  return x['accountingdate'] or mindate

results = sorted(results, key=getaccountingdate, reverse=True)
</snippet></ROW><ROW><id>2179053</id><snippet>cmp</snippet></ROW><ROW><id>2179053</id><snippet>cmp</snippet></ROW><ROW><id>2179053</id><snippet>key</snippet></ROW><ROW><id>2179152</id><snippet>class Node(): 
    def __init__(self,data, left=None, right=None): 
        self.data = data 
        self.left = left
        self.right = right 
class BSTree(): 
    def __init__(self): 
        self.root = None

    def __add(self,node,data):
        if self.root is None:
            self.root = Node(data)
        if node is None:
            return Node(data)
        else:
            if data &lt; node.data:
                node.left = self.__add(node.left,data)
            elif data &gt; node.data:
                node.right = self.__add(node.right,data)
            return node

    def add(self,data):
        self.__add(self.root,data)

    def __preorder(self,node): 
        if node is not None:
            print node.data 
            self.__preorder(node.left) 
            self.__preorder(node.right)

    def preorder(self):
        self.__preorder(self.root)

    def __inorder(self,node): 
        if node is not None:
            self.__inorder(node.left)
            self.__inorder(node.right)
            print node.data

    def inorder(self):
        self.__inorder(self.root)

    def __postorder(self,node): 
        if node is not None:
            self.__postorder(node.left)
            print node.data
            self.__postorder(node.right)

    def postorder(self):
        self.__postorder(self.root)

    def pprint(self,Node,indent): 
        if Node is not None:
            self.pprint(Node.right, indent+1) 
            print indent*"     ",Node.data
            self.pprint(Node.left, indent+1) 
    def leafcount(self,Node): 
        if Node is None: 
            return 0 
        if self.atLeaf(Node): 
            return 1 
        else: 
            return self.leafcount(Node.left)+self.leafcount(Node.right) 

if __name__=="__main__": 

    y = BSTree()

    for pres\
        in ["OBAMA","BUSHW","CLINTON","BUSHG","REGAN","CARTER","FORD","NIXON","JOHNSON"]:
        y.add(pres)

    y.pprint(y.root,0)
</snippet></ROW><ROW><id>2179350</id><snippet>u'spæm'</snippet></ROW><ROW><id>2179350</id><snippet>'spam'</snippet></ROW><ROW><id>2179350</id><snippet>"spam"</snippet></ROW><ROW><id>2179380</id><snippet>def import_path(name):
    modname, _, attr = name.rpartition('.')
    if not modname:
        # name was just a single module name
        return __import__(attr)
    m = __import__(modname, fromlist=[attr])
    return getattr(m, attr)
</snippet></ROW><ROW><id>2179380</id><snippet>__import__</snippet></ROW><ROW><id>2179380</id><snippet>m = __import__(modname, {}, globals(), [attr])
</snippet></ROW><ROW><id>2179564</id><snippet> {% for doc in project.docs %}
   ...do my rendering here...
 {% endfor %}
</snippet></ROW><ROW><id>2179687</id><snippet>scipy.weave</snippet></ROW><ROW><id>2179687</id><snippet>import numpy
import time
from os import urandom
from scipy import weave

SIZE = 2**20

def faster_slow_xor(aa,bb):
    b = numpy.fromstring(bb, dtype=numpy.uint64)
    numpy.bitwise_xor(numpy.frombuffer(aa,dtype=numpy.uint64), b, b)
    return b.tostring()

code = """
const __m128i* pa = (__m128i*)a;
const __m128i* pend = (__m128i*)(a + arr_size);
__m128i* pb = (__m128i*)b;
__m128i xmm1, xmm2;
while (pa &lt; pend) {
  xmm1 = _mm_loadu_si128(pa); // must use unaligned access 
  xmm2 = _mm_load_si128(pb); // numpy will align at 16 byte boundaries
  _mm_store_si128(pb, _mm_xor_si128(xmm1, xmm2));
  ++pa;
  ++pb;
}
"""

def inline_xor(aa, bb):
    a = numpy.frombuffer(aa, dtype=numpy.uint64)
    b = numpy.fromstring(bb, dtype=numpy.uint64)
    arr_size = a.shape[0]
    weave.inline(code, ["a", "b", "arr_size"], headers = ['"emmintrin.h"'])
    return b.tostring()
</snippet></ROW><ROW><id>2179687</id><snippet>support = """
#define ALIGNMENT 16
static void memxor(const char* in1, const char* in2, char* out, ssize_t n) {
    const char* end = in1 + n;
    while (in1 &lt; end) {
       *out = *in1 ^ *in2;
       ++in1; 
       ++in2;
       ++out;
    }
}
"""

code2 = """
PyObject* res = PyString_FromStringAndSize(NULL, real_size);

const ssize_t tail = (ssize_t)PyString_AS_STRING(res) % ALIGNMENT;
const ssize_t head = (ALIGNMENT - tail) % ALIGNMENT;

memxor((const char*)a, (const char*)b, PyString_AS_STRING(res), head);

const __m128i* pa = (__m128i*)((char*)a + head);
const __m128i* pend = (__m128i*)((char*)a + real_size - tail);
const __m128i* pb = (__m128i*)((char*)b + head);
__m128i xmm1, xmm2;
__m128i* pc = (__m128i*)(PyString_AS_STRING(res) + head);
while (pa &lt; pend) {
    xmm1 = _mm_loadu_si128(pa);
    xmm2 = _mm_loadu_si128(pb);
    _mm_stream_si128(pc, _mm_xor_si128(xmm1, xmm2));
    ++pa;
    ++pb;
    ++pc;
}
memxor((const char*)pa, (const char*)pb, (char*)pc, tail);
return_val = res;
Py_DECREF(res);
"""

def inline_xor_nocopy(aa, bb):
    real_size = len(aa)
    a = numpy.frombuffer(aa, dtype=numpy.uint64)
    b = numpy.frombuffer(bb, dtype=numpy.uint64)
    return weave.inline(code2, ["a", "b", "real_size"], 
                        headers = ['"emmintrin.h"'], 
                        support_code = support)
</snippet></ROW><ROW><id>2179687</id><snippet>weave</snippet></ROW><ROW><id>2179687</id><snippet>str</snippet></ROW><ROW><id>2179687</id><snippet>std::string</snippet></ROW><ROW><id>2179687</id><snippet>frombuffer</snippet></ROW><ROW><id>2179687</id><snippet>_mm_loadu_si128</snippet></ROW><ROW><id>2179687</id><snippet>_mm_load_si128</snippet></ROW><ROW><id>2179687</id><snippet>_mm_store_si128</snippet></ROW><ROW><id>2179687</id><snippet>_mm_stream_si128</snippet></ROW><ROW><id>2179687</id><snippet>slow_xor</snippet></ROW><ROW><id>2179687</id><snippet>uint64</snippet></ROW><ROW><id>2179687</id><snippet>slow_xor</snippet></ROW><ROW><id>2179687</id><snippet>slow_xor</snippet></ROW><ROW><id>2179687</id><snippet>faster_slow_xor</snippet></ROW><ROW><id>2179687</id><snippet>inline_xor</snippet></ROW><ROW><id>2179687</id><snippet>inline_xor_nocopy</snippet></ROW><ROW><id>2179872</id><snippet>import random

for pixel in pic.get_pixels(): # Replace with appropiate way of getting the pixels
    if random.random() &lt; 0.25:
        pixel.red = random.randint(256)
        pixel.green = random.randint(256)
        pixel.blue = random.randint(256)
</snippet></ROW><ROW><id>2179983</id><snippet>str.format</snippet></ROW><ROW><id>2179983</id><snippet>format</snippet></ROW><ROW><id>2180257</id><snippet>import MySQLdb.cursors
MySQLdb.connect(host='...', cursorclass=MySQLdb.cursors.DictCursor)
</snippet></ROW><ROW><id>2180431</id><snippet>from django.conf import settings
settings.configure(
    DATABASE_ENGINE = 'postgresql_psycopg2',
    DATABASE_NAME = 'db_name',
    DATABASE_USER = 'db_user',
    DATABASE_PASSWORD = 'db_pass',
    DATABASE_HOST = 'localhost',
    DATABASE_PORT = '5432',
    TIME_ZONE = 'America/New_York',
)
</snippet></ROW><ROW><id>2180431</id><snippet>from your_app.models import *
</snippet></ROW><ROW><id>2180572</id><snippet>__import__</snippet></ROW><ROW><id>2180572</id><snippet>import</snippet></ROW><ROW><id>2180572</id><snippet>parsemodule = __import__(feed)
parsemodule.parser(posixpath.basename(url), urldir, rss_file_path, url, feed)
</snippet></ROW><ROW><id>2180572</id><snippet>ImportError</snippet></ROW><ROW><id>2180584</id><snippet>/path/to/templates</snippet></ROW><ROW><id>2180584</id><snippet>import jinja2
template_dir = '/path/to/templates'
loader = jinja2.FileSystemLoader(template_dir)
environment = jinja2.Environment(loader=loader)
</snippet></ROW><ROW><id>2180584</id><snippet>/path/to/templates/includes/sidebar.html</snippet></ROW><ROW><id>2180584</id><snippet>/path/to/templates/index.html</snippet></ROW><ROW><id>2180584</id><snippet>index.html</snippet></ROW><ROW><id>2180584</id><snippet>{% include 'includes/sidebar.html' %}
</snippet></ROW><ROW><id>2180588</id><snippet>__iter__</snippet></ROW><ROW><id>2180588</id><snippet>def __iter__(self):
    return iter(self._values)
</snippet></ROW><ROW><id>2180588</id><snippet>object.__iter__</snippet></ROW><ROW><id>2180803</id><snippet>raise ValueError("invalid input encoding")
</snippet></ROW><ROW><id>2180803</id><snippet>raise ValueError('some problem: %s' % value)
</snippet></ROW><ROW><id>2180803</id><snippet>class SomeProblem(ValueError):
    """
    Raised to signal a problem with the specified value.
    """
# ...
raise SomeProblem(value)
</snippet></ROW><ROW><id>2180896</id><snippet>re.T</snippet></ROW><ROW><id>2180896</id><snippet>re.M</snippet></ROW><ROW><id>2180896</id><snippet>re.compile</snippet></ROW><ROW><id>2180896</id><snippet>re.template</snippet></ROW><ROW><id>2180896</id><snippet>print re.M</snippet></ROW><ROW><id>2180896</id><snippet>re.compile</snippet></ROW><ROW><id>2180896</id><snippet>input</snippet></ROW><ROW><id>2180896</id><snippet>re.DOTALL</snippet></ROW><ROW><id>2180896</id><snippet>re.DOTALL|re.MULTINE</snippet></ROW><ROW><id>2180896</id><snippet>.*</snippet></ROW><ROW><id>2180896</id><snippet>.*?</snippet></ROW><ROW><id>2180933</id><snippet>__raise__</snippet></ROW><ROW><id>2180940</id><snippet>repr()</snippet></ROW><ROW><id>2180940</id><snippet>__repr__</snippet></ROW><ROW><id>2181095</id><snippet>python -v</snippet></ROW><ROW><id>2181095</id><snippet># cleanup[1] foo_package.g
Exception TypeError: "'NoneType' object is not callable" in  ignored
</snippet></ROW><ROW><id>2181095</id><snippet>None</snippet></ROW><ROW><id>2181095</id><snippet>g.shelf</snippet></ROW><ROW><id>2181095</id><snippet>g.shelf = None</snippet></ROW><ROW><id>2181095</id><snippet>close</snippet></ROW><ROW><id>2181291</id><snippet>Table</snippet></ROW><ROW><id>2181291</id><snippet> meta.Session.execute(Articles_Keywords.delete(Articles_Keywords.c.article_id == 1))
 meta.Session.execute(Articles_Keywords.insert(), [
     {'article_id': 1, 'keyword_id': 1},
     {'article_id': 1, 'keyword_id': 2},
 ])
</snippet></ROW><ROW><id>2181291</id><snippet>meta.Session.expire(article, ['keywords'])
</snippet></ROW><ROW><id>2181312</id><snippet>class MyDecorator(object):
    def __call__(self, func):
      def wrapper(that, *args, **kwargs):
        ## you can access the "self" of func here through the "that" parameter
        ## and hence do whatever you want        
        return func(that, *args, **kwargs)
      return wrapper
</snippet></ROW><ROW><id>2181365</id><snippet>Image.point()</snippet></ROW><ROW><id>2181365</id><snippet>[(12, 140, 10), (10, 100, 200), ...]</snippet></ROW><ROW><id>2181365</id><snippet>[12, 140, 10, 10, 100, 200, ...]
</snippet></ROW><ROW><id>2181365</id><snippet>im = im.point(range(256, 0, -1) * 3)
</snippet></ROW><ROW><id>2181365</id><snippet>Image.getdata</snippet></ROW><ROW><id>2181365</id><snippet>Image.putdata</snippet></ROW><ROW><id>2181365</id><snippet>load</snippet></ROW><ROW><id>2181365</id><snippet>putpixel</snippet></ROW><ROW><id>2181365</id><snippet>Image.point</snippet></ROW><ROW><id>2181365</id><snippet>Image.getdata</snippet></ROW><ROW><id>2181365</id><snippet>Image.putdata</snippet></ROW><ROW><id>2181365</id><snippet>Image.point</snippet></ROW><ROW><id>2181365</id><snippet>[0, 1, 2, 3, 4, 5, ...255, 0, 1, 2, 3, ....255, 0, 1, 2, 3, ...255]
</snippet></ROW><ROW><id>2181365</id><snippet>[10, 1, 2, 3, 4, 5, ...255, 100, 1, 2, 3, ....255, 10, 1, 2, 3, ...255]
</snippet></ROW><ROW><id>2181365</id><snippet>table = sum(zip(*colors), ())
</snippet></ROW><ROW><id>2181471</id><snippet>{% load cache %}
</snippet></ROW><ROW><id>2181704</id><snippet>os.nice(increment)
Add increment to the process’s “niceness”. Return the new niceness. Availability: Unix.
</snippet></ROW><ROW><id>2181704</id><snippet>http://docs.python.org/library/os.html#os.nice</snippet></ROW><ROW><id>2181710</id><snippet>struct timer_func_wrapper_t
{
    timer_func_wrapper_t( bp::object callable ) : _callable( callable ) {}

    bool operator()()
    {
        // These GIL calls make it thread safe, may or may not be needed depending on your use case
        PyGILState_STATE gstate = PyGILState_Ensure();
        bool ret = _callable();
        PyGILState_Release( gstate );
        return ret;
    }

    bp::object _callable;
};

boost::int32_t createTimerWrapper( Class* class, boost::uint64_t interval, bp::object function, bool recurring = false )
{
    return class-&gt;createTimer( interval, boost::function&lt;bool ()&gt;( timer_func_wrapper_t( function ) ), recurring );
}
</snippet></ROW><ROW><id>2181710</id><snippet>.def( "createTimer", &amp;createTimerWrapper, ( bp::arg( "interval" ), bp::arg( "function" ), bp::arg( "recurring" ) = false ) )
</snippet></ROW><ROW><id>2181710</id><snippet>import MyLib
import time

def callMePls():
    print( "Hello world" )
    return True

class = MyLib.Class()

class.createTimer( 3, callMePls )

time.sleep( 1 )
</snippet></ROW><ROW><id>2181710</id><snippet>import MyLib
import time

def callMePls( str ):
    print( "Hello", str )
    return True

class = MyLib.Class()

class.createTimer( 3, bind( callMePls, "world" ) )

time.sleep( 1 )
</snippet></ROW><ROW><id>2181710</id><snippet>// Wrapper for timer function parameter
struct timer_func_wrapper_t
{
    timer_func_wrapper_t( bp::object callable ) : _callable(callable) {}

    bool operator()()
    {
        return _callable();
    }

    bp::object _callable;
};

struct BoostFunc_from_Python_Callable
{
    BoostFunc_from_Python_Callable()
    {
        bp::converter::registry::push_back( &amp;convertible, &amp;construct, bp::type_id&lt; boost::function&lt; bool() &gt; &gt;() );
    }

    static void* convertible( PyObject* obj_ptr )
    {
        if( !PyCallable_Check( obj_ptr ) ) return 0;
        return obj_ptr;
    }

    static void construct( PyObject* obj_ptr, bp::converter::rvalue_from_python_stage1_data* data )
    {
        bp::object callable( bp::handle&lt;&gt;( bp::borrowed( obj_ptr ) ) );
        void* storage = ( ( bp::converter::rvalue_from_python_storage&lt; boost::function&lt; bool() &gt; &gt;* ) data )-&gt;storage.bytes;
        new (storage)boost::function&lt; bool() &gt;( timer_func_wrapper_t( callable ) );
        data-&gt;convertible = storage;
    }
};
</snippet></ROW><ROW><id>2181710</id><snippet>BOOST_PYTHON_MODULE(Foo)
{
    // Register function converter
    BoostFunc_from_Python_Callable();
</snippet></ROW><ROW><id>2181726</id><snippet>robots.txt</snippet></ROW><ROW><id>2182173</id><snippet>lines = [r for r in open(thefile) if not r.isspace() and r[0] != '#']
</snippet></ROW><ROW><id>2182173</id><snippet>.isspace()</snippet></ROW><ROW><id>2182173</id><snippet>len(r.strip()) == 0</snippet></ROW><ROW><id>2182188</id><snippet>SAVEPOINT</snippet></ROW><ROW><id>2182524</id><snippet>{% ifequal subject.id  selected_id %}
</snippet></ROW><ROW><id>2182524</id><snippet>{% with selected as 'selected' %}

{% endwith %}
</snippet></ROW><ROW><id>2182763</id><snippet>&gt;&gt;&gt; c.execute('rollback to savepoint pt;')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
sqlite3.OperationalError: no such savepoint: pt
</snippet></ROW><ROW><id>2182763</id><snippet>pt</snippet></ROW><ROW><id>2182763</id><snippet>import sqlite3
from tempfile import NamedTemporaryFile as NF
import os

f = NF(suffix='.db', delete=False).name

db = sqlite3.connect(f)

try:
    db.execute('CREATE TABLE foo (id INTEGER PRIMARY KEY, data VARCHAR)')
    db.isolation_level = None

    db.execute('INSERT INTO foo (data) values (?)', ('hello',))
    db.execute('INSERT INTO foo (data) values (?)', ('world',))

    db.execute("savepoint pt;")
    db.execute('INSERT INTO foo (data) values (?)', ('bah',))
    db.execute('INSERT INTO foo (data) values (?)', ('goodbye world',))
    db.execute("rollback to savepoint pt;")

    db.execute('INSERT INTO foo (data) values (?)', ('peace',))

    assert list(db.execute('select * from foo')) == [(1, 'hello'),
                                                     (2, 'world'),
                                                     (3, 'peace')]
finally:
    db.close()
    os.remove(f)
</snippet></ROW><ROW><id>2182763</id><snippet>db.isolation_level = None</snippet></ROW><ROW><id>2182876</id><snippet>def do_stuf():
    pass

do_stuf = fun1(do_stuf)
</snippet></ROW><ROW><id>2182876</id><snippet>def all_funs(funky):
    return fun1(fun2(fun3(fun4(funky)))
</snippet></ROW><ROW><id>2183293</id><snippet>Logger</snippet></ROW><ROW><id>2183293</id><snippet>trace</snippet></ROW><ROW><id>2183293</id><snippet>Logger.log</snippet></ROW><ROW><id>2183293</id><snippet>DEBUG</snippet></ROW><ROW><id>2183325</id><snippet>from ..a.b import module</snippet></ROW><ROW><id>2183325</id><snippet>test_file.py</snippet></ROW><ROW><id>2183847</id><snippet>try:
  int(val)
  is_int = True
except ValueError:
  is_int = False
</snippet></ROW><ROW><id>2183847</id><snippet>float()</snippet></ROW><ROW><id>2183847</id><snippet>is_of_appropriate_length = 1 &lt;= len(val) &lt;= 255
</snippet></ROW><ROW><id>2183847</id><snippet>time.strptime()</snippet></ROW><ROW><id>2183847</id><snippet># Validate that the date is in the YYYY-MM-DD format.
import time
try:
  time.strptime(val, '%Y-%m-%d')
  is_in_valid_format= True
except ValueError:
  is_in_valid_format = False
</snippet></ROW><ROW><id>2183847</id><snippet>my_unicode_string = my_utf8_string.decode('utf8')
</snippet></ROW><ROW><id>2183847</id><snippet>int()</snippet></ROW><ROW><id>2183847</id><snippet>int(u'١٧')</snippet></ROW><ROW><id>2183847</id><snippet>int(u'१७')</snippet></ROW><ROW><id>2184118</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>2184282</id><snippet>def do_work_and_notify(on_done):
    // do work
    on_done()

def send_email_on_completion():
    email_send('joe@example.com', 'you are done')

do_work_and_notify(send_email_on_completion)
</snippet></ROW><ROW><id>2184291</id><snippet>continue</snippet></ROW><ROW><id>2184291</id><snippet>break</snippet></ROW><ROW><id>2184315</id><snippet>demos</snippet></ROW><ROW><id>2184315</id><snippet>examples</snippet></ROW><ROW><id>2184315</id><snippet>.old</snippet></ROW><ROW><id>2184315</id><snippet>.old</snippet></ROW><ROW><id>2184521</id><snippet>bzr branch lp:django-openid-auth
</snippet></ROW><ROW><id>2184521</id><snippet>pip install django-openid-auth
</snippet></ROW><ROW><id>2184717</id><snippet>graphmodule.find_modules.find_modules(includes=['xml.etree'])
Traceback (most recent call last):
    File "&lt;stdin&gt;", line 1 in &lt;module&gt;
    File ".../modulegraph/find_modules.py", line 255 in find_modules
    File ".../modulegraph/find_modules.py", line 182 in find_needed_modules
    File ".../modulegraph/modulegraph.py", line 401 in import_hook
    File ".../modulegraph/modulegraph.py", line 464 in load_tail
ImportError: No module named xml.etree
</snippet></ROW><ROW><id>2184717</id><snippet>load_tail</snippet></ROW><ROW><id>2184717</id><snippet>import_hook</snippet></ROW><ROW><id>2184717</id><snippet>from setuptools import setup
import xml.etree.ElementTree

setup(name="Mac XML Test",
      app=['macxml.py'],
      options={'py2app': {'includes': ['xml.etree.ElementTree']}},
      data_files=[('', ['lib.xml'])]
     )
</snippet></ROW><ROW><id>2184755</id><snippet>psql</snippet></ROW><ROW><id>2184755</id><snippet>sqlite3</snippet></ROW><ROW><id>2184755</id><snippet>subprocess</snippet></ROW><ROW><id>2184755</id><snippet>INSERT</snippet></ROW><ROW><id>2184764</id><snippet>range(0, 10, 2)</snippet></ROW><ROW><id>2185198</id><snippet>isinstance</snippet></ROW><ROW><id>2185198</id><snippet>str</snippet></ROW><ROW><id>2185198</id><snippet>unicode</snippet></ROW><ROW><id>2185198</id><snippet>import types
isinstance(var, types.StringTypes)
</snippet></ROW><ROW><id>2185198</id><snippet>types.StringType</snippet></ROW><ROW><id>2185198</id><snippet>types.StringTypes</snippet></ROW><ROW><id>2185198</id><snippet>str</snippet></ROW><ROW><id>2185198</id><snippet>unicode</snippet></ROW><ROW><id>2185198</id><snippet>types</snippet></ROW><ROW><id>2185198</id><snippet>str</snippet></ROW><ROW><id>2185198</id><snippet>unicode</snippet></ROW><ROW><id>2185198</id><snippet>isinstance(var, (str, unicode)):
</snippet></ROW><ROW><id>2185198</id><snippet>isinstance(var, basestring)
</snippet></ROW><ROW><id>2185239</id><snippet>from HTMLParser import HTMLParser

class MyParser(HTMLParser):
    def handle_data(self, data):
        self.output.append(data)
    def feed(self, data):
        self.output = []
        HTMLParser.feed(self, data)


p = MyParser()
page = """&lt;html&gt;&lt;h1&gt;title&lt;/h1&gt;&lt;p&gt;I'm a paragraph!&lt;/p&gt;&lt;/html&gt;"""
p.feed(page)

print p.output

output
['title', "I'm a paragraph!"]
</snippet></ROW><ROW><id>2185239</id><snippet>p.feed(page)</snippet></ROW><ROW><id>2185239</id><snippet>p.feed(page)</snippet></ROW><ROW><id>2185255</id><snippet>c</snippet></ROW><ROW><id>2185255</id><snippet>if '-' == something:
   print 'hurray!'
</snippet></ROW><ROW><id>2185255</id><snippet>&gt;&gt;&gt; lst =["hello", "-hello", "-", "hell-o","    - "]
&gt;&gt;&gt; for i, item in enumerate(lst):
    if item == '-':
        print(i, item)


2 -
</snippet></ROW><ROW><id>2185297</id><snippet>import collections
fruit=['apple', 'orange', 'apple', 'banana', 'banana', 'orange', 'apple', 'apple']
c=collections.Counter(fruit)
print(c.most_common(1))
# [('apple', 4)]
</snippet></ROW><ROW><id>2185297</id><snippet>Counter</snippet></ROW><ROW><id>2185373</id><snippet>class PacketDecoder(object):

    STX = ...
    ETX = ...

    def __init__(self):
        self._stream = ''

    def feed(self, buffer):
        self._stream += buffer

    def decode(self):
        '''
        Yields packets from the current stream.
        '''
        while len(self._stream) &gt; 2:
            end = self._stream.find(self.ETX)
            if end == -1:
                break

            packet_len = ord(self._stream[1])
            packet = self._stream[:end]
            if packet_len &gt;= 5 and check_sum_valid(packet):
                yield packet
            self._stream = self._stream[end+1:]
</snippet></ROW><ROW><id>2185373</id><snippet>decoder = PacketDecoder()
while True:
    data = sock.recv(256) 
    if not data:
        # handle lost connection... 
    decoder.feed(data)
    for packet in decoder.decode():
        process(packet)
</snippet></ROW><ROW><id>2185971</id><snippet>def iter_new_list(old_list):    
    for x in old_list:
       if needs_expanding(x):
           for y in expand(x):
               yield y
       else:
           yield x

new_list = list(iter_new_list(old_list))
</snippet></ROW><ROW><id>2186449</id><snippet>locale</snippet></ROW><ROW><id>2186565</id><snippet>os.walk</snippet></ROW><ROW><id>2186565</id><snippet>fnmatch.filter</snippet></ROW><ROW><id>2186565</id><snippet>import fnmatch
import os

matches = []
for root, dirnames, filenames in os.walk('src'):
  for filename in fnmatch.filter(filenames, '*.c'):
      matches.append(os.path.join(root, filename))
</snippet></ROW><ROW><id>2186565</id><snippet>glob.glob</snippet></ROW><ROW><id>2186565</id><snippet>fnmatch.filter</snippet></ROW><ROW><id>2187024</id><snippet>ESC = Literal('\x1b')
integer = Word(nums)
escapeSeq = Combine(ESC + '[' + Optional(delimitedList(integer,';')) + 
                oneOf(list(alphas)))
</snippet></ROW><ROW><id>2187024</id><snippet>from pyparsing import *

ESC = Literal('\x1b')
integer = Word(nums)
escapeSeq = Combine(ESC + '[' + Optional(delimitedList(integer,';')) + 
                oneOf(list(alphas)))

nonAnsiString = lambda s : Suppress(escapeSeq).transformString(s)

unColorString = nonAnsiString('\x1b[1m0.0\x1b[0m')
print unColorString, len(unColorString)
</snippet></ROW><ROW><id>2187024</id><snippet>0.0 3
</snippet></ROW><ROW><id>2187227</id><snippet>X-Requested-With: XMLHttpRequest</snippet></ROW><ROW><id>2187319</id><snippet>import operator
def lrange(num1, num2 = None, step = 1):
    op = operator.__lt__

    if num2 is None:
        num1, num2 = 0, num1
    if num2 &lt; num1:
        if step &gt; 0:
            num1 = num2
        op = operator.__gt__
    elif step &lt; 0:
        num1 = num2

    while op(num1, num2):
        yield num1
        num1 += step

&gt;&gt;&gt; list(lrange(138264128374162347812634134, 138264128374162347812634140))
[138264128374162347812634134L, 138264128374162347812634135L, 138264128374162347812634136L, 138264128374162347812634137L, 138264128374162347812634138L, 138264128374162347812634139L]
</snippet></ROW><ROW><id>2187319</id><snippet>itertools.islice</snippet></ROW><ROW><id>2187319</id><snippet>xrange</snippet></ROW><ROW><id>2187337</id><snippet>warnings.showwarning()</snippet></ROW><ROW><id>2187407</id><snippet>exec()</snippet></ROW><ROW><id>2187579</id><snippet>open(filename, 'wb') # for writing
open(filename, 'rb') # for reading
</snippet></ROW><ROW><id>2187636</id><snippet>from mod import *</snippet></ROW><ROW><id>2187636</id><snippet>__all__</snippet></ROW><ROW><id>2187843</id><snippet>&gt;&gt;&gt; x = [[1,2,3],[4,5,6]]
&gt;&gt;&gt; print x
[[1, 2, 3], [4, 5, 6]]
</snippet></ROW><ROW><id>2187942</id><snippet>customBaseModelAdmin</snippet></ROW><ROW><id>2187942</id><snippet>ModelAdmin</snippet></ROW><ROW><id>2187942</id><snippet>BaseModelAdmin</snippet></ROW><ROW><id>2187942</id><snippet>ModelAdmin</snippet></ROW><ROW><id>2188076</id><snippet>finditer</snippet></ROW><ROW><id>2188076</id><snippet>groupdict</snippet></ROW><ROW><id>2188076</id><snippet>None</snippet></ROW><ROW><id>2188076</id><snippet>import re

def mergedgroupdict(pattern, thestring):
  there = re.compile(pattern)
  result = {}
  for mo in there.finditer(thestring):
    d = mo.groupdict()
    for k in d:
      if k not in result and d[k] is not None:
        result[k] = d[k]
  return result
</snippet></ROW><ROW><id>2188076</id><snippet>&gt;&gt;&gt; mergedgroupdict('(?P&lt;b&gt;.b.)|(?P&lt;i&gt;.i.)', 'abcdefghijk')
{'i': 'hij', 'b': 'abc'}
&gt;&gt;&gt; mergedgroupdict('(?P&lt;b&gt;.b.)|(?P&lt;i&gt;.i.)', 'abcdefghijk'[::-1])
{'i': 'jih', 'b': 'cba'}
</snippet></ROW><ROW><id>2188152</id><snippet>#!/usr/bin/python
import os, sys, optparse, time, json
import facebook

##

USER_SESSION_FILE = os.path.expanduser('fb-user.session')
APP_KEY_FILE = os.path.expanduser('fb-app.keys')

##

def main():
    app_keys = open(APP_KEY_FILE).readlines()
    fb_api = facebook.Facebook(api_key=app_keys[0].strip(), secret_key=app_keys[1].strip())
    opts, args = parse_options()
    if args == ['init']:
        init(fb_api)
        return
    session = json.load(open(USER_SESSION_FILE))
    fb_api.uid = session['uid']
    fb_api.secret = session['secret']
    fb_api.session_key = session['session_key']

    fb_api.stream.publish(message="test from PyFacebook")


def init(fb_api):
    fb_api.auth.createToken()

    sys.stdout.write('Opening web page to add application (press ENTER when done)...')
    sys.stdout.flush()
    fb_api.login()
    raw_input()

    sys.stdout.write('Asking for offline access now...')
    sys.stdout.flush()
    fb_api.request_extended_permission('offline_access')
    raw_input()

    sys.stdout.write('And, finally, asking for permission to publish')
    sys.stdout.flush()
    fb_api.request_extended_permission('publish_stream')
    raw_input()

    fb_api.auth.getSession()

    if fb_api.session_key_expires != 0:
        print """We were granted a temporary key; please wait a minute and run `%s init` again.""" % (sys.argv[0],)
    else:
        if not os.path.exists(USER_SESSION_FILE):
            # Only set restrictive permissions when creating the file
            # ourselves.
            open(USER_SESSION_FILE, 'w').close()
            os.chmod(USER_SESSION_FILE, 0600)
        json.dump({
                   'uid': fb_api.uid,
                   'secret': fb_api.secret,
                   'session_key': fb_api.session_key,
                   },
                   open(USER_SESSION_FILE, 'w'),
                   sort_keys=True,
                   indent=4)


def parse_options():
    p = optparse.OptionParser()
    return p.parse_args()


if __name__ == '__main__':
    sys.exit(main())
</snippet></ROW><ROW><id>2188287</id><snippet>    &gt;&gt;&gt; def f(alfa, beta, gamma):
    ...     print alfa, beta, gamma
    ...
    &gt;&gt;&gt; f(**{'alfa': 1, 'beta': 2, 'gamma': 3})
    1 2 3
</snippet></ROW><ROW><id>2188287</id><snippet>    &gt;&gt;&gt; def g(**kwargs):
    ...     f(**kwargs)
    ...
    &gt;&gt;&gt; g(**{'alfa': 1, 'beta': 2, 'gamma': 3})
    1 2 3
</snippet></ROW></DATA>