<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>17520752</id><snippet>
sudo pip install matplotlb
</snippet></ROW><ROW><id>17520752</id><snippet>--user</snippet></ROW><ROW><id>17520752</id><snippet>pip</snippet></ROW><ROW><id>17520752</id><snippet>
pip install --user matplotlib
</snippet></ROW><ROW><id>17520761</id><snippet>batch</snippet></ROW><ROW><id>17520761</id><snippet>{% for tmp in items|batch(3) %}
  &lt;div class="row"&gt;
    {% for item in tmp %}
      &lt;div class="four columns"&gt;
        &lt;img src="static{{ item.pics.0 }}" class="picitem" alt=""/&gt;
      &lt;/div&gt;
    {% endfor %}
  &lt;/div&gt;
{% endfor %}
</snippet></ROW><ROW><id>17520798</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17520798</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; YACKETY = ["['11111', '3000', 'USD', '0']", "['11112', '3000', 'USD', '0']", "['11113', '3000', 'USD', '0']", "['11114', '3000', 'USD', '0']"]
&gt;&gt;&gt; converted = [ast.literal_eval(x) for x in YACKETY]
&gt;&gt;&gt; converted
[['11111', '3000', 'USD', '0'], ['11112', '3000', 'USD', '0'], ['11113', '3000', 'USD', '0'], ['11114', '3000', 'USD', '0']]
</snippet></ROW><ROW><id>17521107</id><snippet>&gt;&gt;&gt; re.sub(r'(?&lt;!#)=(.*?)(?=\s*#|$)', r'= Hello', s, 1)
'log_File = Hello   ### the path for log'
</snippet></ROW><ROW><id>17521107</id><snippet>def replace_value(s, new):
    content, sep1, comment = s.partition('#')
    key, sep2, value = content.partition('=')
    if sep2: content = key + sep2 + new
    return content + sep1 + comment

assert replace_value('log_File = b', ' Hello') == 'log_File = Hello'
assert replace_value('#log_File = b', ' Hello') == '#log_File = b'
assert replace_value('#This is comment', ' Hello') == '#This is comment'
assert replace_value('log_File = b # hello', ' Hello') == 'log_File = Hello# hello'
</snippet></ROW><ROW><id>17521272</id><snippet>&gt;&gt;&gt; P = [3, 0, 2, 1]
&gt;&gt;&gt; Q = [8, 7]
&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; [x+y for x,y in izip_longest(reversed(P), reversed(Q), fillvalue=0)][::-1]
[3, 0, 10, 8]
</snippet></ROW><ROW><id>17521272</id><snippet>P = [1, 2, 0, 3]
Q = [7, 8]
[x+y for x,y in izip_longest(P, Q, fillvalue=0)]
</snippet></ROW><ROW><id>17521573</id><snippet>defaultdict</snippet></ROW><ROW><id>17521573</id><snippet>from collections import defaultdict
d = defaultdict(int)
for item in collection:
    d[(item.name, item.path)] += item.bytes
</snippet></ROW><ROW><id>17521576</id><snippet>global dollars</snippet></ROW><ROW><id>17521576</id><snippet>def search():
    global dollars
    print('You gain 5 bucks')
    dollars = dollars + 5
    shop()
</snippet></ROW><ROW><id>17521576</id><snippet>global</snippet></ROW><ROW><id>17521576</id><snippet>dollar</snippet></ROW><ROW><id>17521576</id><snippet>global</snippet></ROW><ROW><id>17521576</id><snippet>def shop():
    global dollars
    shop = input("Enter something: ")
    if shop == 'Shortsword':
        if dollars &lt; 4:          # Were you looking for dollars?
            print('I\'m sorry, but you don\'t have enough dollars to buy that item.')
            shop1()
        if dollars &gt; 4:
            print('Item purchased!')
            dollars -= someNumber # Change Number here
            print('You now have ' + dollars + ' dollars.')
</snippet></ROW><ROW><id>17521576</id><snippet>raw_input</snippet></ROW><ROW><id>17521600</id><snippet>df2 = df1
df2.index.names = ['n2','n1']
df2 = df2.reorder_levels(['n1','n2'])

df1.append(df2)

       D   L
n2 n1       
1  2   5  10
   3   6  20
2  4   7  40
   1   5  10
3  1   6  20
4  2   7  40
</snippet></ROW><ROW><id>17521688</id><snippet>[[10, 20] for _ in range(3)]
</snippet></ROW><ROW><id>17521688</id><snippet>[[10, 20]] * 3   # or [pos] * 3
</snippet></ROW><ROW><id>17521688</id><snippet>&gt;&gt;&gt; lis = [[10, 20]] * 3
&gt;&gt;&gt; lis[0][0] = 'foo'
&gt;&gt;&gt; lis
[['foo', 20], ['foo', 20], ['foo', 20]]
</snippet></ROW><ROW><id>17521688</id><snippet>for</snippet></ROW><ROW><id>17521688</id><snippet>&gt;&gt;&gt; lis = [[10, 20] for _ in range(3)]
&gt;&gt;&gt; lis[0][0] = 'foo'
&gt;&gt;&gt; lis
[['foo', 20], [10, 20], [10, 20]]
</snippet></ROW><ROW><id>17521688</id><snippet>[pos[:] for _ in range(3)]
</snippet></ROW><ROW><id>17521730</id><snippet>^(\d+[a-zA-Z]{1,2})|([a-zA-Z]{1,2}\d+)$
</snippet></ROW><ROW><id>17521730</id><snippet>^</snippet></ROW><ROW><id>17521730</id><snippet>$</snippet></ROW><ROW><id>17521730</id><snippet>\d</snippet></ROW><ROW><id>17521730</id><snippet>+</snippet></ROW><ROW><id>17521730</id><snippet>{1,2}</snippet></ROW><ROW><id>17521730</id><snippet>[]</snippet></ROW><ROW><id>17521730</id><snippet>|</snippet></ROW><ROW><id>17521869</id><snippet># -*- coding: utf-8 -*-
a = u'Привет'  # Unicode literal
print a
b = []
b.append(a)
print b[0]     # print individual item
</snippet></ROW><ROW><id>17521877</id><snippet>import pickle
from os import path

user_to_delete = 'user2'

# Open the database if it exists, otherwise create one...
if path.isfile('database.db'):
    with open('database.db','rb') as f:
        db = pickle.load(f)
else: # Create some database.db with users&amp;passwords to test this program..
    db = {'user1':'password1', 'user2':'password2', 'user3':'password3'}
    with open('database.db', 'wb') as f:
        pickle.dump(db, f)

# try to delete the given user, handle if the user doesn't exist.
try:
    del db[user_to_delete]
except KeyError:
    print("{user} doesn't exist in db".format(user=user_to_delete))

# write the 'new' db to the file.
with open('database.db', 'wb') as f:
    pickle.dump(db, f)
</snippet></ROW><ROW><id>17521971</id><snippet>Entry</snippet></ROW><ROW><id>17521971</id><snippet>Text</snippet></ROW><ROW><id>17521971</id><snippet>ScrolledText</snippet></ROW><ROW><id>17521971</id><snippet>import ScrolledText
self.textfield = ScrolledText.ScrolledText(self, wrap=Tkinter.WORD)
</snippet></ROW><ROW><id>17522273</id><snippet>input()</snippet></ROW><ROW><id>17522273</id><snippet>eval(raw_input(...))</snippet></ROW><ROW><id>17522273</id><snippet>raw_input()</snippet></ROW><ROW><id>17522273</id><snippet>directory = raw_input("file path : ")
</snippet></ROW><ROW><id>17522547</id><snippet>start_urls</snippet></ROW><ROW><id>17522547</id><snippet>[</snippet></ROW><ROW><id>17522547</id><snippet>][1]</snippet></ROW><ROW><id>17522547</id><snippet>from scrapy.item import Item, Field
from scrapy.selector import HtmlXPathSelector
from scrapy.spider import BaseSpider


class RadioItem(Item):
    title = Field()
    interpret = Field()
    date = Field()


class RadioSpider(BaseSpider):
    name = 'radio'
    allowed_domains = ['dashitradio.de']
    start_urls = ["http://www.dashitradio.de/nc/search-in-playlist.html?tx_wfqbe_pi1%5BSTART%5D=2013-06-17%2006:00&amp;tx_wfqbe_pi1%5BEND%5D=2013-06-21%2018:00&amp;tx_wfqbe_pi1%5Bsubmit%5D=Suchen&amp;tx_wfqbe_pi1%5Bshowpage%5D%5B3%5D=1"]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)

        rows = hxs.select("//div[@id='playlist-results']/table/tbody/tr")
        for row in rows:
            item = RadioItem()

            item['title'] = row.select(".//td[1]/text()").extract()[0]
            item['interpret'] = row.select(".//td[2]/text()").extract()[0]
            item['date'] = row.select(".//td[3]/text()").extract()[0]

            yield item
</snippet></ROW><ROW><id>17522547</id><snippet>my_spider.py</snippet></ROW><ROW><id>17522547</id><snippet>runspider</snippet></ROW><ROW><id>17522547</id><snippet>scrapy runspider my_spider.py -o output.json
</snippet></ROW><ROW><id>17522547</id><snippet>output.json</snippet></ROW><ROW><id>17522547</id><snippet>{"date": "2013-06-21 17:48:00", "interpret": "MUMFORD &amp; SONS", "title": "I WILL WAIT"}
{"date": "2013-06-21 17:44:00", "interpret": "TASMIN ARCHER", "title": "SLEEPING SATELLITE"}
{"date": "2013-06-21 17:40:03", "interpret": "ROBIN THICKE", "title": "BLURRED LINES (feat. T.I. &amp; PHARRELL)"}
{"date": "2013-06-21 17:35:02", "interpret": "TINA TURNER", "title": "TWO PEOPLE"}
{"date": "2013-06-21 17:31:02", "interpret": "BON JOVI", "title": "WHAT ABOUT NOW"}
{"date": "2013-06-21 17:28:03", "interpret": "ROXETTE", "title": "SHE'S GOT NOTHING ON (BUT THE RADIO)"}
{"date": "2013-06-21 17:18:01", "interpret": "GNARLS BARKLEY", "title": "CRAZY"}
{"date": "2013-06-21 17:08:01", "interpret": "FLO RIDA", "title": "WHISTLE"}
{"date": "2013-06-21 17:05:03", "interpret": "WHAM", "title": "WAKE ME UP BEFORE YOU GO GO"}
{"date": "2013-06-21 17:00:03", "interpret": "P!NK FEAT. NATE RUESS", "title": "JUST GIVE ME A REASON"}
{"date": "2013-06-21 16:48:01", "interpret": "SHAKIRA", "title": "WHENEVER, WHEREVER"}
{"date": "2013-06-21 16:44:00", "interpret": "ALPHAVILLE", "title": "BIG IN JAPAN"}
{"date": "2013-06-21 16:40:01", "interpret": "XAVIER NAIDOO", "title": "BEI MEINER SEELE"}
{"date": "2013-06-21 16:36:02", "interpret": "SANTANA", "title": "SMOOTH"}
{"date": "2013-06-21 16:32:01", "interpret": "OLLY MURS", "title": "ARMY OF TWO"}
</snippet></ROW><ROW><id>17522809</id><snippet>rank</snippet></ROW><ROW><id>17522809</id><snippet>import pandas as pd

df = pd.DataFrame({'a': np.random.randint(0,100,10)})
df['rank'] = df.rank(ascending=False)

    a  rank
0  16     8
1  91     1
2  58     4
3  36     6
4  15     9
5  69     3
6  35     7
7  78     2
8  48     5
9   5    10
</snippet></ROW><ROW><id>17522809</id><snippet>method</snippet></ROW><ROW><id>17522868</id><snippet>creditcard_list</snippet></ROW><ROW><id>17522868</id><snippet>        found = False
        for card in templist2:
            if card_number == card.number:
                if card.amount.m != 0:
                    print('NONZERO_BALANCE')
                else:
                    del creditcard_list[i]
                    print('CANCELLED', card_number)
                found = True
                break
        if not found:
            print('NO_SUCH_CARD')
</snippet></ROW><ROW><id>17522992</id><snippet>__getitem__()</snippet></ROW><ROW><id>17522992</id><snippet>__getitem__()</snippet></ROW><ROW><id>17522992</id><snippet>__getitem__()</snippet></ROW><ROW><id>17522992</id><snippet>collections.abc.Sequence</snippet></ROW><ROW><id>17523254</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>17523254</id><snippet>def test():
    print "Hello " + sys.argv[1]
</snippet></ROW><ROW><id>17523254</id><snippet>n = 5</snippet></ROW><ROW><id>17523254</id><snippet>n</snippet></ROW><ROW><id>17523254</id><snippet>def test(myargument):
    print "Hello " + myargument
</snippet></ROW><ROW><id>17523254</id><snippet>def myfunc():
    print "hello!"
</snippet></ROW><ROW><id>17523254</id><snippet>myfunc()</snippet></ROW><ROW><id>17523254</id><snippet>def myfunc(word):
    print word
</snippet></ROW><ROW><id>17523254</id><snippet>def myfunc(word):
    print word

myword = 'cabbage'
myfunc(myword)
</snippet></ROW><ROW><id>17523254</id><snippet>'cabbage'</snippet></ROW><ROW><id>17523254</id><snippet>myword</snippet></ROW><ROW><id>17523254</id><snippet>myfunc('cabbage')</snippet></ROW><ROW><id>17523254</id><snippet>def</snippet></ROW><ROW><id>17523254</id><snippet>myfunc takes one argument (two given)</snippet></ROW><ROW><id>17523254</id><snippet>word</snippet></ROW><ROW><id>17523254</id><snippet>print word</snippet></ROW><ROW><id>17523254</id><snippet>print myword</snippet></ROW><ROW><id>17523254</id><snippet>word = myword</snippet></ROW><ROW><id>17523356</id><snippet>mylogger.setLevel(logging.DEBUG)
</snippet></ROW><ROW><id>17523356</id><snippet>logLevel</snippet></ROW><ROW><id>17523356</id><snippet>WARNING</snippet></ROW><ROW><id>17523356</id><snippet>DEBUG</snippet></ROW><ROW><id>17523356</id><snippet>WARNING</snippet></ROW><ROW><id>17523356</id><snippet>Formatter</snippet></ROW><ROW><id>17523356</id><snippet>import logging
import sys

mylogger = logging.getLogger("mylogger")

formatter = logging.Formatter('[%(levelname)s] %(message)s')

handler = logging.StreamHandler(stream=sys.stdout)
handler.setFormatter(formatter)
handler.setLevel(logging.DEBUG)

mylogger.addHandler(handler)
mylogger.setLevel(logging.DEBUG)

mylogger.debug("This is a debug message.")
mylogger.info("Some info message.")
mylogger.warning("A warning.")
</snippet></ROW><ROW><id>17523356</id><snippet>[DEBUG] This is a debug message.
[INFO] Some info message.
[WARNING] A warning.
</snippet></ROW><ROW><id>17523365</id><snippet>sm1 = [sm + ((0.07/t) * sm)) for t in xrange(1,366)]
</snippet></ROW><ROW><id>17523365</id><snippet>t = numpy.mgrid[1:366]
sm1 = sm + (0.07/t) * sm
</snippet></ROW><ROW><id>17523441</id><snippet>if</snippet></ROW><ROW><id>17523441</id><snippet>else</snippet></ROW><ROW><id>17523441</id><snippet>In [1]: from random import randint

In [2]: l = [randint(0,1023) for _ in range(0,10)]

In [3]: l
Out[3]: [987, 356, 995, 192, 21, 22, 1013, 375, 796, 339]

In [4]: 1 if 987 in l else 0
Out[4]: 1

In [5]: 1 if 988 in l else 0
Out[5]: 0
</snippet></ROW><ROW><id>17523441</id><snippet>1 if index in l else 0
</snippet></ROW><ROW><id>17523441</id><snippet>In [1]: from random import randint
In [2]: l = {randint(0, 1023): 1 for _ in xrange(0, 10)}
</snippet></ROW><ROW><id>17523441</id><snippet>In [3]: l
Out[3]: 
{216: 1,
 381: 1,
 384: 1,
 392: 1,
 396: 1,
 472: 1,
 585: 1,
 630: 1,
 784: 1,
 816: 1}
</snippet></ROW><ROW><id>17523441</id><snippet>In [4]: l.get(216, 0)
Out[4]: 1
</snippet></ROW><ROW><id>17523441</id><snippet>In [5]: l.get(217, 0)
Out[5]: 0
</snippet></ROW><ROW><id>17523441</id><snippet>In [6]: l.keys()
Out[6]: [384, 392, 472, 630, 216, 585, 396, 381, 784, 816]
</snippet></ROW><ROW><id>17523441</id><snippet>randint(0, 1023)</snippet></ROW><ROW><id>17523441</id><snippet>class</snippet></ROW><ROW><id>17523441</id><snippet>from random import randint


class RandomSparseList(object):
    def __init__(self, size, min_bits, max_bits):
        self.size = int(size)
        self.bits = {}
        self.bits_set = randint(min_bits, max_bits)
        while self.bits_set &gt; len(self.bits):
            self.bits[randint(0, self.size)] = 1 

    def __len__(self):
        return self.size

    def __getitem__(self, index):
        if index &lt; 0 or index &gt;= self.size:
            raise IndexError
        return self.bits.get(int(index), 0)

    def __iter__(self):
        for i in xrange(self.size):
            yield self.__getitem__(i)

    def __contains__(self, index):
        return index in self.bits

    def __repr__(self):
        return '[{}]'.format(', '.join(str(x) for x in self))

    def set_bits(self):
        return self.bits.keys()
</snippet></ROW><ROW><id>17523441</id><snippet>class</snippet></ROW><ROW><id>17523441</id><snippet>In [1]: from random_sparse_list import RandomSparseList
</snippet></ROW><ROW><id>17523441</id><snippet>In [2]: rsl = RandomSparseList(1024, 10, 40)
</snippet></ROW><ROW><id>17523441</id><snippet>In [3]: len(rsl)
Out[3]: 1024
</snippet></ROW><ROW><id>17523441</id><snippet>In [4]: rsl.set_bits()
Out[4]: 
[523,
 400,
 285,
 158,
 419,
 434,
 701,
 67,
 843,
 846,
 591,
 720,
 470,
 864,
 912,
 739,
 996,
 485,
 489,
 234,
 1005,
 573,
 381,
 784]
</snippet></ROW><ROW><id>17523441</id><snippet>In [5]: rsl[523]
Out[5]: 1

In [6]: rsl[524]
Out[6]: 0
</snippet></ROW><ROW><id>17523441</id><snippet>In [7]: 400 in rsl
Out[7]: True

In [8]: 401 in rsl
Out[8]: False
</snippet></ROW><ROW><id>17523441</id><snippet>In [9]: for index, value in enumerate(rsl):
   ...:     if value:
   ...:         print '{} found at index {}'.format(value, index)
   ...:         
1 found at index 67
1 found at index 158
1 found at index 234
1 found at index 285
1 found at index 381
1 found at index 400
1 found at index 419
1 found at index 434
1 found at index 470
1 found at index 485
1 found at index 489
1 found at index 523
1 found at index 573
1 found at index 591
1 found at index 701
1 found at index 720
1 found at index 739
1 found at index 784
1 found at index 843
1 found at index 846
1 found at index 864
1 found at index 912
1 found at index 996
1 found at index 1005
</snippet></ROW><ROW><id>17523441</id><snippet>In [10]: rsl
Out[10]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>17523441</id><snippet>set</snippet></ROW><ROW><id>17523441</id><snippet>0</snippet></ROW><ROW><id>17523441</id><snippet>1</snippet></ROW><ROW><id>17523441</id><snippet>list</snippet></ROW><ROW><id>17523441</id><snippet>pip install sparse_list</snippet></ROW><ROW><id>17523441</id><snippet>RandomSparseList</snippet></ROW><ROW><id>17523441</id><snippet>from sparse_list import SparseList
from random import randint


class RandomSparseList(SparseList):
    def __init__(self, size, min_bits, max_bits):
        super(RandomSparseList, self).__init__(size, 0)
        self.bits = randint(min_bits, max_bits)
        while self.bits &gt; len(self.elements):
            self.elements[randint(0, self.size)] = 1
</snippet></ROW><ROW><id>17523907</id><snippet>if firstTwoBytes != b'\xff\xd8':
</snippet></ROW><ROW><id>17523994</id><snippet>output = open('myoutputfile.txt', 'w')
cnx = mysql.connector.connect(**config)  
cursor = cnx.cursor()                       

# Construct query to get type, there's no need to include this in the loop
query = ("""SELECT type FROM table1, table2 
    WHERE table1.name = %s AND table1.id = table2.id""")

with open("input.txt") as f:
    for line in f:                                  

        # Query arguments
        args = (line.strip(), ) # added .strip()

        cursor.execute(query, args)       # Exec query

        entries = cursor.fetchall()
        for entry in entries:                
            output.write(str(entry[0]) + "\n") 

cnx.close()
output.close()
</snippet></ROW><ROW><id>17524516</id><snippet>def plotGraph(X):
    fig = plt.figure()
    X.plot()
    return fig


plot1 = plotGraph(dfs)
plot2 = plotGraph2(reg[:-10])
pp = PdfPages('foo.pdf')
pp.savefig(plot1)
pp.savefig(plot2)
pp.close()
</snippet></ROW><ROW><id>17524925</id><snippet>&gt;&gt;&gt; L1 = [1, 2, 3]
&gt;&gt;&gt; L2 = [4, 5, 6]
&gt;&gt;&gt; L3 = [7, 8, 9]
&gt;&gt;&gt; L = [L1, L2, L3]
&gt;&gt;&gt; s=set([x for y in L for x in y])
&gt;&gt;&gt; s
set([1, 2, 3, 4, 5, 6, 7, 8, 9])
</snippet></ROW><ROW><id>17525058</id><snippet>datetime.timedelta(0, 5, 41038)
</snippet></ROW><ROW><id>17525058</id><snippet>minutes = (when_end - when_start).total_seconds()/60
</snippet></ROW><ROW><id>17525397</id><snippet>base</snippet></ROW><ROW><id>17525397</id><snippet>ui</snippet></ROW><ROW><id>17525397</id><snippet>from base import BasePage
</snippet></ROW><ROW><id>17525397</id><snippet>from ui.base import BasePage
</snippet></ROW><ROW><id>17525683</id><snippet>COMMIT</snippet></ROW><ROW><id>17525683</id><snippet>INSERT</snippet></ROW><ROW><id>17525683</id><snippet>None</snippet></ROW><ROW><id>17525683</id><snippet>BEGIN</snippet></ROW><ROW><id>17525683</id><snippet>COMMIT</snippet></ROW><ROW><id>17525683</id><snippet>INSERT</snippet></ROW><ROW><id>17525764</id><snippet>/dev/null</snippet></ROW><ROW><id>17525764</id><snippet>#!/bin/bash
# ...
my_other_command -a -b arg1 arg2 &lt; /dev/null
# ...
</snippet></ROW><ROW><id>17525764</id><snippet>subprocess.call()</snippet></ROW><ROW><id>17525764</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>17525764</id><snippet>wait()</snippet></ROW><ROW><id>17525764</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>17525764</id><snippet>poll()</snippet></ROW><ROW><id>17525764</id><snippet>wait()</snippet></ROW><ROW><id>17525764</id><snippet>Popen</snippet></ROW><ROW><id>17525764</id><snippet>terminate()</snippet></ROW><ROW><id>17525764</id><snippet>kill()</snippet></ROW><ROW><id>17525764</id><snippet>poll()</snippet></ROW><ROW><id>17525764</id><snippet>wait()</snippet></ROW><ROW><id>17525764</id><snippet>run_use()</snippet></ROW><ROW><id>17525764</id><snippet>def run_use(mname,script):
    print "ssh "+mname+" "+script
    proc = subprocess.Popen(['ssh',mname,script], stdout=subprocess.PIPE)
    for line in proc.stdout:
        if "UserPrompt&gt;&gt;&gt;" in line:
            proc.terminate()
            break
</snippet></ROW><ROW><id>17525764</id><snippet>UserPrompt&gt;&gt;&gt;</snippet></ROW><ROW><id>17525764</id><snippet>strace</snippet></ROW><ROW><id>17525764</id><snippet>strace</snippet></ROW><ROW><id>17525923</id><snippet>u'technologieën in °C'
</snippet></ROW><ROW><id>17525923</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>17525923</id><snippet>u'technologie\u00ebn in \u00b0C'
</snippet></ROW><ROW><id>17526510</id><snippet>[...]</snippet></ROW><ROW><id>17526510</id><snippet>unicode_escape</snippet></ROW><ROW><id>17526510</id><snippet>with open('foo.csv','r') as b0rken
    for line in b0rken:
        value = line.rstrip('\r\n').decode('unicode_escape')
        print value
</snippet></ROW><ROW><id>17526510</id><snippet>u'..'</snippet></ROW><ROW><id>17526510</id><snippet>with open('foo.csv','r') as b0rken
    for line in b0rken:
        value = literal_eval("u'''{}'''".format(line.rstrip('\r\n')))
        print value
</snippet></ROW><ROW><id>17526510</id><snippet>[u'...']</snippet></ROW><ROW><id>17526510</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>17526510</id><snippet>from ast import literal_eval

with open('foo.csv','r') as b0rken
    for line in b0rken:
        lis = literal_eval(line)
        value = lis[0]
        print value
</snippet></ROW><ROW><id>17526510</id><snippet>unicode_escape</snippet></ROW><ROW><id>17526510</id><snippet>&gt;&gt;&gt; for line in b0rken:
...     print line.rstrip('\r\n').decode('unicode_escape')
... 
Aeronáutica
Niš
Künste
École de l'Air
</snippet></ROW><ROW><id>17526715</id><snippet>collections.deque</snippet></ROW><ROW><id>17526715</id><snippet>maxlen</snippet></ROW><ROW><id>17526715</id><snippet>heapq</snippet></ROW><ROW><id>17526715</id><snippet>heapq.heappushpop()</snippet></ROW><ROW><id>17526729</id><snippet>groupby</snippet></ROW><ROW><id>17526729</id><snippet>In [11]: spd_lt_40 = df1[df1.spd &lt; 40]

In [12]: spd_lt_40_count = spd_lt_40.groupby('time')['id'].count()

In [13]: spd_lt_40_count
Out[13]:
time
97      1
99      2
100     1
dtype: int64
</snippet></ROW><ROW><id>17526729</id><snippet>In [14]: df1['spd_lt_40_count'] = spd_lt_40_count

In [15]: df1['spd_lt_40_count'].fillna(0, inplace=True)

In [16]: df1
Out[16]:
      id  spd  time  spd_lt_40_count
time
99    44   13    99                2
99    45   22    99                2
97    46   32    97                1
97    47   41    97                1
96    48   42    96                0
96    49   53    96                0
100   50   34   100                1
</snippet></ROW><ROW><id>17527061</id><snippet>p.Series([1, 3, 5, 10, 12, 20, 21, 25]).hist(bins=[0, 10, 20, 30]).figure
</snippet></ROW><ROW><id>17527061</id><snippet>p.Series([1, 3, 5, 10, 12, 20, 21, 25]).hist(bins=3, range=(0,30)).figure
</snippet></ROW><ROW><id>17527061</id><snippet>hist</snippet></ROW><ROW><id>17527061</id><snippet>np.histogram</snippet></ROW><ROW><id>17527101</id><snippet>encoded = [[s.encode('utf8') for s in t] for t in resultsList]
</snippet></ROW><ROW><id>17527101</id><snippet>&gt;&gt;&gt; l = ['Kaiserstra\xc3\x9fe']
&gt;&gt;&gt; l
['Kaiserstra\xc3\x9fe']
&gt;&gt;&gt; l[0]
'Kaiserstra\xc3\x9fe'
&gt;&gt;&gt; print l[0]
Kaiserstraße
</snippet></ROW><ROW><id>17527101</id><snippet>\xc3</snippet></ROW><ROW><id>17527101</id><snippet>\x9f</snippet></ROW><ROW><id>17527494</id><snippet>&gt;&gt;&gt; re.sub(r'^([A-Z])',r'&gt;\1',"Abc")
'&gt;Abc'
&gt;&gt;&gt; re.sub(r'^([A-Z])',r'&gt;\1',"abc")
'abc'
</snippet></ROW><ROW><id>17527653</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt;
&gt;&gt;&gt; a = '1D10M1I10M1D'
&gt;&gt;&gt;
&gt;&gt;&gt; start = 10
&gt;&gt;&gt; for num1, i_or_d, num2, m in re.findall('(\d+)([ID])(\d+)?([A-Za-z])?', a):
...     print num1, i_or_d, start
...     if num1:
...         start += int(num1)
...     if num2:
...         start += int(num2)
...
1 D 10
1 I 21
1 D 32
</snippet></ROW><ROW><id>17527653</id><snippet>start = 10
for num1, i_or_d, num2, m in re.findall('(\d+)([IDS])(\d+)?([A-Za-z])?', a):
    if i_or_d not in 'ID':
        start += int(num1) + int(num2)
        continue
    print num1, i_or_d, start
    if num1:
        start += int(num1)
    if num2:
        start += int(num2)
</snippet></ROW><ROW><id>17527658</id><snippet>class SpreadSheet</snippet></ROW><ROW><id>17527689</id><snippet>import heapq
top10=[]
for i in range(2000000):
    heapq.heappush(top10, funcx())
    top10 = top10[:10]
</snippet></ROW><ROW><id>17527689</id><snippet>nsmallest</snippet></ROW><ROW><id>17527689</id><snippet>heapq.nsmallest(10, (funcx() for i in range(2000000)) )
</snippet></ROW><ROW><id>17527877</id><snippet>pattern = '*' + fileExtension
</snippet></ROW><ROW><id>17527877</id><snippet>pattern = '*{}'.format(fileExtension)
</snippet></ROW><ROW><id>17527877</id><snippet>pattern = '*%s' % fileExtension
</snippet></ROW><ROW><id>17527987</id><snippet>os.system()</snippet></ROW><ROW><id>17527987</id><snippet>subprocess</snippet></ROW><ROW><id>17527987</id><snippet>import subprocess

subprocess.call("C:\\Program Files (x86)\\Windows Live\\Photo Gallery\\WLXPhotoGallery.exe")
</snippet></ROW><ROW><id>17528079</id><snippet>libgdal.so</snippet></ROW><ROW><id>17528079</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>17528079</id><snippet>libgdal.so</snippet></ROW><ROW><id>17528079</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>17528079</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>17528406</id><snippet>repr</snippet></ROW><ROW><id>17528406</id><snippet>eval</snippet></ROW><ROW><id>17528406</id><snippet>&gt;&gt;&gt; s = set([1,2,3])
&gt;&gt;&gt; strs = repr(s)
&gt;&gt;&gt; strs
'set([1, 2, 3])'
&gt;&gt;&gt; eval(strs)
set([1, 2, 3])
</snippet></ROW><ROW><id>17528406</id><snippet>eval</snippet></ROW><ROW><id>17528406</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17528406</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; s = set([10, 20, 30])
&gt;&gt;&gt; lis = str(list(s))
&gt;&gt;&gt; set(literal_eval(lis))
set([10, 20, 30])
</snippet></ROW><ROW><id>17528406</id><snippet>repr</snippet></ROW><ROW><id>17528406</id><snippet>repr(object) -&gt; string
Return the canonical string representation of the object.
For most object types, eval(repr(object)) == object.
</snippet></ROW><ROW><id>17528761</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.get('http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;q=' +'älterer')
&gt;&gt;&gt; print r.text
{"responseData": {"results":[{"GsearchResultClass":"GwebSearch","unescapedUrl":"http://de.wikipedia.org/wiki/Alter","url":"http://de.wikipedia.org/wiki/Alter","visibleUrl":"de.wikipedia.org","cacheUrl":"http://www.google.com/search?q\u003dcache:xN4gCMgmnZ0J:de.wikipedia.org","title":"\u003cb\u003eAlter\u003c/b\u003e – Wikipedia","titleNoFormatting":"Alter – Wikipedia","content":"Unter dem \u003cb\u003eAlter\u003c/b\u003e versteht man den Lebensabschnitt rund um die mittlere   Lebenserwartung des Menschen, also das Lebensalter zwischen dem mittleren \u003cb\u003e...\u003c/b\u003e"},{"GsearchResultClass":"GwebSearch","unescapedUrl":"http://de.wikipedia.org/wiki/Blumfeld,_ein_%C3%A4lterer_Junggeselle","url":"http://de.wikipedia.org/wiki/Blumfeld,_ein_%25C3%25A4lterer_Junggeselle","visibleUrl":"de.wikipedia.org","cacheUrl":"http://www.google.com/search?q\u003dcache:VtRzZLhU-qkJ:de.wikipedia.org","title":"Blumfeld, ein \u003cb\u003eälterer\u003c/b\u003e Junggeselle – Wikipedia","titleNoFormatting":"Blumfeld, ein älterer Junggeselle – Wikipedia","content":"Blumfeld, ein \u003cb\u003eälterer\u003c/b\u003e Junggeselle ist eine Erzählung von Franz Kafka. Sie wurde   1915 verfasst und postum veröffentlicht. Sie behandelt die skurrilen \u003cb\u003e...\u003c/b\u003e"},{"GsearchResultClass":"GwebSearch","unescapedUrl":"http://www.arbeitsagentur.de/nn_193018/Navigation/zentral/Buerger/Hilfen/Beschaeftigung-Aelterer/Beschaeftigung-Aelterer-Nav.html","url":"http://www.arbeitsagentur.de/nn_193018/Navigation/zentral/Buerger/Hilfen/Beschaeftigung-Aelterer/Beschaeftigung-Aelterer-Nav.html","visibleUrl":"www.arbeitsagentur.de","cacheUrl":"http://www.google.com/search?q\u003dcache:SXb9a3GIufkJ:www.arbeitsagentur.de","title":"Beschäftigung \u003cb\u003eÄlterer\u003c/b\u003e - www.arbeitsagentur.de","titleNoFormatting":"Beschäftigung Älterer - www.arbeitsagentur.de","content":"\u003cb\u003eÄltere\u003c/b\u003e Arbeitnehmer/-innen, die ihre Arbeitslosigkeit durch Aufnahme einer   geringer entlohnten versicherungspflichtigen Beschäftigung beenden oder \u003cb\u003e...\u003c/b\u003e"},{"GsearchResultClass":"GwebSearch","unescapedUrl":"http://www.imdb.com/title/tt0932839/","url":"http://www.imdb.com/title/tt0932839/","visibleUrl":"www.imdb.com","cacheUrl":"http://www.google.com/search?q\u003dcache:V-wfqhR1ABUJ:www.imdb.com","title":"\u0026quot;Monaco Franze - Der ewige Stenz\u0026quot; Ein ernsthafter \u003cb\u003eälterer\u003c/b\u003e Herr - IMDb","titleNoFormatting":"\u0026quot;Monaco Franze - Der ewige Stenz\u0026quot; Ein ernsthafter älterer Herr - IMDb","content":"Directed by Helmut Dietl. With Helmut Fischer, Ruth-Maria Kubitschek, Karl   Obermayr, Christine Kaufmann."}],"cursor":{"resultCount":"1,940,000","pages":[{"start":"0","label":1},{"start":"4","label":2},{"start":"8","label":3},{"start":"12","label":4},{"start":"16","label":5},{"start":"20","label":6},{"start":"24","label":7},{"start":"28","label":8}],"estimatedResultCount":"1940000","currentPageIndex":0,"moreResultsUrl":"http://www.google.com/search?oe\u003dutf8\u0026ie\u003dutf8\u0026source\u003duds\u0026start\u003d0\u0026hl\u003den\u0026q\u003d%C3%A4lterer","searchResultTime":"0.08"}}, "responseDetails": null, "responseStatus": 200}
</snippet></ROW><ROW><id>17528784</id><snippet>std::vector</snippet></ROW><ROW><id>17528784</id><snippet>std::list</snippet></ROW><ROW><id>17528784</id><snippet>std::array</snippet></ROW><ROW><id>17528789</id><snippet>from collections import defaultdict
import csv

class PlayerStat(object):
    def __init__(self, yds=0, car=0, td=0, fum=0, ypc=0, count=0):
        self.yds   = float(yds)
        self.car   = float(car)
        self.td    = float(td)
        self.fum   = float(fum)
        self.ypc   = float(ypc)
        self.count = count
    def __iadd__(self, other):
        self.yds   += other.yds
        self.car   += other.car
        self.td    += other.td
        self.fum   += other.fum
        self.ypc   += other.ypc
        self.count += other.count
        return self

filenames = 'NewRush4.csv', 'NewRush5.csv', 'NewRush6.csv',
stats = defaultdict(PlayerStat)
for filename in filenames:
    with open(filename) as f:
        reader = csv.DictReader(f, delimiter=',')
        for row in reader:
            stat = PlayerStat(row['YDS'], row['CAR'], row['TD'], row['FUM'], row['YPC'], count=1)
            stats[row['Player']] += stat

for player in sorted(stats, key=lambda player: stats[player].yds):
    stat = stats[player]
    if stat.count == 1:
        continue
    print '{0:&lt;20}{1.car:&gt;10}{1.yds:&gt;10}{1.td:&gt;10}{1.fum:&gt;10}{1.ypc:&gt;10}'.format(player, stat)
</snippet></ROW><ROW><id>17528966</id><snippet>&gt;&gt;&gt; m=np.array(m)
&gt;&gt;&gt; inddown = np.tril_indices_from(m,k=-1)
&gt;&gt;&gt; indup = np.triu_indices_from(m,k=1)
&gt;&gt;&gt; m[inddown]=m[indup]
&gt;&gt;&gt; m
array([[11, 12, 13],
       [12, 22, 23],
       [13, 23, 33]])
</snippet></ROW><ROW><id>17528966</id><snippet>m[inddown]=np.asarray(m[indup]).reshape(-1)
</snippet></ROW><ROW><id>17528966</id><snippet>&gt;&gt;&gt; new=np.zeros(m.shape)
&gt;&gt;&gt; a
array([11, 12, 13, 22, 23, 33])
&gt;&gt;&gt; new[np.triu_indices_from(m)]=a
&gt;&gt;&gt; new
array([[ 11.,  12.,  13.],
       [  0.,  22.,  23.],
       [  0.,   0.,  33.]])
&gt;&gt;&gt; new[np.tril_indices_from(new,k=-1)]=new[np.triu_indices_from(new,k=1)]
&gt;&gt;&gt; new
array([[ 11.,  12.,  13.],
       [ 12.,  22.,  23.],
       [ 13.,  23.,  33.]])
</snippet></ROW><ROW><id>17529182</id><snippet>mydict['fruits']</snippet></ROW><ROW><id>17529182</id><snippet>fruit</snippet></ROW><ROW><id>17529182</id><snippet>mydict['fruits']</snippet></ROW><ROW><id>17529182</id><snippet>fruit</snippet></ROW><ROW><id>17529182</id><snippet>mydict['fruits'][fruit]</snippet></ROW><ROW><id>17529182</id><snippet>&gt;&gt;&gt; for fruit in mydict['fruits']:
...   print fruit, mydict['fruits'][fruit]
...   for nutrition in mydict['fruits'][fruit]:
...     print nutrition
... 
kiwi 2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 3, in &lt;module&gt;
TypeError: 'int' object is not iterable
</snippet></ROW><ROW><id>17529182</id><snippet>isinstance(mydict['fruits'][fruit], list)</snippet></ROW><ROW><id>17529182</id><snippet>&gt;&gt;&gt; for fruit, nutritions in mydict['fruits'].items():
...     if isinstance(nutritions, list):
...        for nutrition in nutritions:
...            print nutrition
</snippet></ROW><ROW><id>17529343</id><snippet>)</snippet></ROW><ROW><id>17529343</id><snippet>writer.writerow(row.append('new_col')
                                     ^         
                                     | 
</snippet></ROW><ROW><id>17529393</id><snippet>islpha</snippet></ROW><ROW><id>17529393</id><snippet>str</snippet></ROW><ROW><id>17529393</id><snippet>trucatedInput</snippet></ROW><ROW><id>17529393</id><snippet>str</snippet></ROW><ROW><id>17529393</id><snippet>myStr[3]='x'</snippet></ROW><ROW><id>17529393</id><snippet>''.join(truncatedInput)</snippet></ROW><ROW><id>17529393</id><snippet>'DRAT'</snippet></ROW><ROW><id>17529393</id><snippet>main</snippet></ROW><ROW><id>17529393</id><snippet>NLTK</snippet></ROW><ROW><id>17529393</id><snippet>str.isalpha</snippet></ROW><ROW><id>17529393</id><snippet>In [3]: myStr = 'abc45d'

In [4]: for char in myStr:
   ...:     print char, char.isalpha()
   ...:     
a True
b True
c True
4 False
5 False
d True
</snippet></ROW><ROW><id>17529393</id><snippet>In [5]: myStr[3] = 'x'
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-5-bf15aed01ea1&gt; in &lt;module&gt;()
----&gt; 1 myStr[3] = 'x'

TypeError: 'str' object does not support item assignment
</snippet></ROW><ROW><id>17529393</id><snippet>str.replace</snippet></ROW><ROW><id>17529393</id><snippet>re.sub</snippet></ROW><ROW><id>17529393</id><snippet>str.replace</snippet></ROW><ROW><id>17529393</id><snippet>if( c &gt;= 'A' and c &lt;='Z' or c &gt;= 'a' and c &lt;='z' or c &gt;= '0' and c &lt;='9')</snippet></ROW><ROW><id>17529393</id><snippet>if( 'Z' &gt;= c &gt;= 'A' or 'z' &gt;= c &gt;= 'a' or '9' &gt;= c &gt;= '0')</snippet></ROW><ROW><id>17529393</id><snippet>if c.isalpha() or c.isdigit()</snippet></ROW><ROW><id>17530016</id><snippet>urlpatterns = patterns('',
    url(r'^$', views.ListView.as_view(), name='index'),
    url(r'^(P&lt;pk&gt;\d+/$)', views.TransactionList, name='detail'),  # transaction list
    url(r'^/account/(P&lt;pk&gt;\d+)/$', views.AccountList.as_view(), name='detail'),  # account detail
    url('/account/create/', views.account, name='create'),  # account create
    url(r'^/account/update/(P&lt;pk&gt;\d+)/$', views.AccountUpdate.as_view(), name='update'),  # account update
    url(r'^/account/delete/(P&lt;pk&gt;\d+)/$', views.AccountDelete.as_view(), name='delete'),  # account delete
 )
</snippet></ROW><ROW><id>17530016</id><snippet>\n</snippet></ROW><ROW><id>17530016</id><snippet>patterns</snippet></ROW><ROW><id>17530139</id><snippet>urllib3</snippet></ROW><ROW><id>17530139</id><snippet>http</snippet></ROW><ROW><id>17530139</id><snippet>http.py</snippet></ROW><ROW><id>17530139</id><snippet>requests</snippet></ROW><ROW><id>17530139</id><snippet>get</snippet></ROW><ROW><id>17530139</id><snippet>requests</snippet></ROW><ROW><id>17530139</id><snippet>http</snippet></ROW><ROW><id>17530139</id><snippet>import requests</snippet></ROW><ROW><id>17530139</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>17530188</id><snippet>turtle.py</snippet></ROW><ROW><id>17530188</id><snippet>turtle</snippet></ROW><ROW><id>17530246</id><snippet>import matplotlib.pyplot as plt
H, xedges, yedges =np.histogram2d(x_axis, y_axis, bins=10, weights=z_axis) 
extent = [yedges[0], yedges[-1], xedges[-1], xedges[0]]
plt.imshow(H, extent=extent, interpolation='nearest')
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>17530246</id><snippet>numbins=10
H, xedges, yedges =np.histogram2d(x_axis, y_axis, bins=numbins, weights=z_axis) 
count, x, y =np.histogram2d(x_axis, y_axis, bins=numbins) 
H/=count
</snippet></ROW><ROW><id>17530276</id><snippet>requests</snippet></ROW><ROW><id>17530276</id><snippet>yourscript -&gt; import requests -&gt; [0 or more other modules] -&gt; import yourscript -&gt; import requests again
</snippet></ROW><ROW><id>17530276</id><snippet>requests</snippet></ROW><ROW><id>17530366</id><snippet>class Category(models.Model):
    catID = models.CharField(max_length=20, primary_key=True)
    title = models.CharField(max_length=200)
    description = models.CharField(max_length=200)

    def latest_post(self):
        post = self.post_set.order_by('-pub_date')
        if post:
            return post[0]
        return None
</snippet></ROW><ROW><id>17530366</id><snippet>{% for cat in forum_cats %}
    {% if cat.latest_post %}
        {{cat.latest_post.title}}
    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>17530459</id><snippet>cl</snippet></ROW><ROW><id>17530459</id><snippet>clStr = str(cl).rstrip()
print clStr+"\t"+Tag[0]+"\t"+Tag[7]+"\t"+Tag[10]
</snippet></ROW><ROW><id>17530607</id><snippet> dict_writer.writeheader()
</snippet></ROW><ROW><id>17530669</id><snippet>.format</snippet></ROW><ROW><id>17530669</id><snippet>fromaddr = input('Enter your email address you wish to send from: ')
msg = "From: {0}".format(fromaddr)
print(msg)  # will show 'From: hello@hello.com'
</snippet></ROW><ROW><id>17530669</id><snippet>.format</snippet></ROW><ROW><id>17530669</id><snippet>"Hello, {0}.  It's a {1} day outside.".format("Mr. Foo", "magical")
</snippet></ROW><ROW><id>17530697</id><snippet>In [11]: A = pd.DataFrame(dict(zip(range(0,9000), [pd.Series([1,2,3], [pd.Period(1), pd.Period(2), pd.Period(3)]) for x in range(0,9000)])))

In [12]: A['5000']
Out[12]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
PeriodIndex: 0 entries
Columns: 9000 entries, 0 to 8999
dtypes: int64(9000)

In [13]: A[5000]
Out[13]: 
1-01-01    1
1-01-02    2
1-01-03    3
Freq: D, Name: 5000, dtype: int64

In [14]: A.rename(columns = lambda x: str(x), inplace=True)

In [15]: A['5000']
Out[15]: 
1-01-01    1
1-01-02    2
1-01-03    3
Freq: D, Name: 5000, dtype: int64

In [16]: A[5000]
KeyError: u'no item named 5000'
</snippet></ROW><ROW><id>17530705</id><snippet>&gt;&gt;&gt; [[j*((i==index)*(scale-1)+1) for i,j in enumerate(l)] for l in mtx]
[[0, 17, 2], [0, 17, 2], [0, 17, 2]]
</snippet></ROW><ROW><id>17530730</id><snippet>in</snippet></ROW><ROW><id>17530730</id><snippet>word</snippet></ROW><ROW><id>17530730</id><snippet>in</snippet></ROW><ROW><id>17530809</id><snippet>from PIL import Image

newimage = Image.new('RGB', (len(rgbArray[0]), len(rgbArray)))  # type, size
newimage.putdata([tuple(p) for row in rgbArray for p in row])
newimage.save("filename.png")  # takes type from filename extension
</snippet></ROW><ROW><id>17530809</id><snippet>.save()</snippet></ROW><ROW><id>17530809</id><snippet>PNG</snippet></ROW><ROW><id>17530842</id><snippet>curs.execute('INSERT INTO test(POI, Address, Phone, Website) VALUES(?, ?, ?, ?)',var)
</snippet></ROW><ROW><id>17530843</id><snippet>def prepare_for_connection(*args, **kwargs):
    if (self.handle is not None):
        return -1
    if not (isinstance(port_number, int) or isinstance(port_number, float)): 
        return -1
    if port_number &lt; 0:
        return -1

    # function body

    return 0
</snippet></ROW><ROW><id>17530843</id><snippet>None</snippet></ROW><ROW><id>17530843</id><snippet>is</snippet></ROW><ROW><id>17530843</id><snippet>is not</snippet></ROW><ROW><id>17530843</id><snippet>==</snippet></ROW><ROW><id>17530843</id><snippet>!=</snippet></ROW><ROW><id>17530843</id><snippet>-1</snippet></ROW><ROW><id>17530843</id><snippet>False</snippet></ROW><ROW><id>17530843</id><snippet>0</snippet></ROW><ROW><id>17530843</id><snippet>True</snippet></ROW><ROW><id>17530843</id><snippet>connection_prepared = prepare_for_connection(*args,**kwargs)</snippet></ROW><ROW><id>17530843</id><snippet>connection_prepared</snippet></ROW><ROW><id>17530843</id><snippet>True</snippet></ROW><ROW><id>17530843</id><snippet>False</snippet></ROW><ROW><id>17530843</id><snippet>connection_prepared = prepare_for_connection(*args,**kwargs)
if connection_prepared:
    do_something()
else:
    do_something_else()
</snippet></ROW><ROW><id>17530889</id><snippet>A = []
with open("test2.xls") as w:
    w.next()  # skip over header row
    for row in w:
        (date, time, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t,
         u, LZA, SZA, LAM) = row.split("\t")  # split columns into fields

        A.append([(float(a) + float(b) + float(c))/3,
         (float(d) + float(e) + float(f))/3,
         (float(g) + float(h) + float(i))/3,
         (float(j) + float(k) + float(l))/3,
         (float(m) + float(n) + float(o))/3,
         (float(p) + float(q) + float(r))/3,
         (float(s) + float(t) + float(u))/3])
</snippet></ROW><ROW><id>17530956</id><snippet>world_map = [['*', '*', '*', '*'],
             ['*', ' ', 'i', '*'],
             ['*', ' ', ' ', '*'],
             ['*', '*', '*', '*']]
</snippet></ROW><ROW><id>17530956</id><snippet>*</snippet></ROW><ROW><id>17530956</id><snippet>i</snippet></ROW><ROW><id>17530956</id><snippet>for row in world_map:
    for column in row:
        print(column, end="")
    print()
</snippet></ROW><ROW><id>17530956</id><snippet>for row in world_map:
    for i, column in enumerate(row):
        if column == "i":
            if i &gt; 0 and row[i - 1] == ' ':
                row[i - 1] = 'i'
                row[i] = ' '
</snippet></ROW><ROW><id>17530956</id><snippet>world_map[row][column]</snippet></ROW><ROW><id>17531084</id><snippet>{}</snippet></ROW><ROW><id>17531084</id><snippet>execute()</snippet></ROW><ROW><id>17531084</id><snippet>execute("INSERT INTO tblv00{} (data, recodeid_fk) VALUES({}, {})".format(z, str(row[a]),29))

execute("INSERT INTO tblv00{} (data, recodeid_fk) VALUES(%s, %s)".format(z), (row[a],29))
</snippet></ROW><ROW><id>17531084</id><snippet>execute</snippet></ROW><ROW><id>17531084</id><snippet>execute</snippet></ROW><ROW><id>17531084</id><snippet>format</snippet></ROW><ROW><id>17531084</id><snippet>execute</snippet></ROW><ROW><id>17531084</id><snippet>z</snippet></ROW><ROW><id>17531084</id><snippet>'1'</snippet></ROW><ROW><id>17531084</id><snippet>'9'</snippet></ROW><ROW><id>17531084</id><snippet>dr</snippet></ROW><ROW><id>17531084</id><snippet>tblv001</snippet></ROW><ROW><id>17531084</id><snippet>tblv009</snippet></ROW><ROW><id>17531084</id><snippet>dr</snippet></ROW><ROW><id>17531084</id><snippet>t</snippet></ROW><ROW><id>17531084</id><snippet>z</snippet></ROW><ROW><id>17531084</id><snippet>a</snippet></ROW><ROW><id>17531084</id><snippet>import pandas as pd
import string

...

# Loop through columns of dr, and count them as we go.
for i, col in enumerate(dr):
    table_name = 'tblv' + string.zfill(i, 3) # e.g., tblv001 or tblv010
    df1 = DataFrame(dr[col]).reset_index()
    df1.columns = ['data', 'recodeid_fk']
    pd.io.sql.write_frame(df1, table_name, conn)
</snippet></ROW><ROW><id>17531084</id><snippet>reset_index</snippet></ROW><ROW><id>17531084</id><snippet>write_frame</snippet></ROW><ROW><id>17531244</id><snippet>import tkinter as tk

class SubWindow(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        x = tk.Text(self)
        x.pack()

class MainWindow(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self)
        self.win1 = SubWindow(self)
        self.win1.pack(side="left")
        self.win2 = SubWindow(self)
        self.win2.pack(side="right")

if __name__ == "__main__":
    main = MainWindow()
    main.mainloop()
</snippet></ROW><ROW><id>17531244</id><snippet>import tkinter as tk

class SubWindow(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        x = tk.Text(self)
        x.pack(expand=1, fill='both')

class MainWindow(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self)
        self.win1 = SubWindow(self)
        self.win1.pack(side="left", expand=1, fill=tk.BOTH)
        self.win2 = SubWindow(self)
    self.win2.pack(side="right", expand=1, fill=tk.BOTH)

if __name__ == "__main__":
    main = MainWindow()
    main.mainloop()
</snippet></ROW><ROW><id>17531438</id><snippet>from Rectangle import Rectangle
</snippet></ROW><ROW><id>17531438</id><snippet>rectangles.append(Rectangle.Rectangle(400 + x * rectangleWidth + x * 10, 30 + y * rectangleHeight + y * 10, rectangleWidth, rectangleHeight, (randint(0, 255), randint(0, 255), randint(0, 255)), screen))
</snippet></ROW><ROW><id>17531746</id><snippet>reslist = list(root.iter())
result = ' '.join([element.text for element in reslist]) 
</snippet></ROW><ROW><id>17531746</id><snippet>result = ''
for element in root.iter():
    result += element.text + ' '
result = result[:-1] # Remove trailing space
</snippet></ROW><ROW><id>17531773</id><snippet>deadline = TextField('Deadline',[validators.Required()])
</snippet></ROW><ROW><id>17531773</id><snippet>accept_rules = BooleanField('I accept the site rules', [validators.Required()]) 
</snippet></ROW><ROW><id>17531773</id><snippet>familyname = TextField('familyname', [Required()])
</snippet></ROW><ROW><id>17531773</id><snippet>biography = TextAreaField('biography', [validators.optional())
</snippet></ROW><ROW><id>17531855</id><snippet>dim1 = len(a)
dim2 = len(a[0])
dim3 = len(a[0][0])
.
.
.
</snippet></ROW><ROW><id>17531855</id><snippet>def dim(a):
    if not type(a) == list:
        return []
    return [len(a)] + dim(a[0])
</snippet></ROW><ROW><id>17531855</id><snippet>numpy.ndarray.shape</snippet></ROW><ROW><id>17531855</id><snippet>from numpy import array
l = [[2, 3], [4, 2], [3, 2]]
a = array(l)
print a.shape
</snippet></ROW><ROW><id>17531855</id><snippet>(3, 2)
</snippet></ROW><ROW><id>17531903</id><snippet>/</snippet></ROW><ROW><id>17531903</id><snippet>/</snippet></ROW><ROW><id>17531903</id><snippet>&gt;&gt;&gt; 3/2   # two integer operands
1
&gt;&gt;&gt; 3/2.0 # one operand is not an integer, float division is used
1.5
</snippet></ROW><ROW><id>17531903</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>17531903</id><snippet>/</snippet></ROW><ROW><id>17531903</id><snippet>//</snippet></ROW><ROW><id>17531903</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 3/2    # even when using integers, true division is used
1.5
&gt;&gt;&gt; 3//2.0 # explicit floor division
1.0
</snippet></ROW><ROW><id>17532281</id><snippet>&gt;&gt;&gt; subtracted_data = np.empty_like(data)
&gt;&gt;&gt; for i in range(len(data)):
...     subtracted_data[i] = data[i] - avgs[i]
... 
&gt;&gt;&gt; subtracted_data
array([[[ 0.0595,  0.0645,  0.067 ,  0.05  ,  0.057 ,  0.053 ],
        [-0.0595, -0.0645, -0.067 , -0.05  , -0.057 , -0.053 ]],

       [[-0.017 , -0.0235, -0.024 , -0.018 , -0.016 , -0.017 ],
        [ 0.017 ,  0.0235,  0.024 ,  0.018 ,  0.016 ,  0.017 ]],

       [[-0.072 , -0.091 , -0.0915, -0.076 , -0.0845, -0.0655],
        [ 0.072 ,  0.091 ,  0.0915,  0.076 ,  0.0845,  0.0655]]])
</snippet></ROW><ROW><id>17532281</id><snippet>&gt;&gt;&gt; subtracted_data = np.array([data[i] - avgs[i] for i in range(len(data))])
</snippet></ROW><ROW><id>17532281</id><snippet>&gt;&gt;&gt; subtracted_data = np.array([x - np.mean(x, 0) for x in data])
</snippet></ROW><ROW><id>17532378</id><snippet>Avro API</snippet></ROW><ROW><id>17532378</id><snippet>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using HBase.Thrift;
using Thrift.Protocol;
using Thrift.Transport;

namespace HBase.Example
{
    class Program
    {
        private static Hbase.Client _hbase;
        static byte[] table_name = Encoding.UTF8.GetBytes("vadim_test");
        static readonly byte[] ID = Encoding.UTF8.GetBytes("Id");
        static readonly byte[] NAME = Encoding.UTF8.GetBytes("Name");
        static int i = 0;

        static void Main(string[] args)
        {
            int port = 9090;

            string host = args.Length == 1 ? args[0] : "localhost";

            var socket = new TSocket(host, port);
            var transport = new TBufferedTransport(socket);
            var proto = new TBinaryProtocol(transport);
            _hbase = new Hbase.Client(proto);

            try
            {
                transport.Open();

                var names = _hbase.getTableNames();
                names.ForEach(msg =&gt; Console.WriteLine(Encoding.UTF8.GetString(msg)));

                CreateTable();
                Insert();
                Get();

                transport.Close();
            } catch(Exception e)
            {
                Console.Error.Write(e.Message);
            }
        }

        private static void Get()
        {
            var scanner = _hbase.scannerOpen(table_name, Guid.Empty.ToByteArray(),
                                             new List&lt;byte[]&gt;(){ID});
            for (var entry = _hbase.scannerGet(scanner); entry.Count &gt; 0; entry = _hbase.scannerGet(scanner))
            {
                foreach (var rowResult in entry)
                {
                    Console.Write("{0} =&gt; ", new Guid(rowResult.Row));
                    var res = rowResult.Columns.Select(c =&gt; BitConverter.ToInt32(c.Value.Value, 0));
                    foreach (var cell in res)
                    {
                        Console.WriteLine("{0}", cell);
                    }
                }
            }
        }

        private static void Insert()
        {
            _hbase.mutateRows(table_name, new List&lt;BatchMutation&gt;()
            {
                new BatchMutation()
                {
                    Row = Guid.NewGuid().ToByteArray(),
                    Mutations = new List&lt;Mutation&gt; {
                        new Mutation{Column = ID, IsDelete = false, Value = BitConverter.GetBytes(i++) }
                    }
                },
                new BatchMutation()
                {
                    Row = Guid.NewGuid().ToByteArray(),
                    Mutations = new List&lt;Mutation&gt; {
                        new Mutation{Column = ID, IsDelete = false, Value = BitConverter.GetBytes(i++) }
                    }
                }
            });
        }

        private static void CreateTable()
        {
            _hbase.disableTable(table_name);
            _hbase.deleteTable(table_name);

            _hbase.createTable(
                table_name,
                new List&lt;ColumnDescriptor&gt;()
                    {
                        new ColumnDescriptor {Name = ID, InMemory = true},
                        new ColumnDescriptor {Name = NAME, InMemory = true}
                    }
                );
        }
    }
}
</snippet></ROW><ROW><id>17532465</id><snippet>img_buffer</snippet></ROW><ROW><id>17532465</id><snippet>pylab.savefig(img_buffer, format = 'png')
img_buffer.seek(0)
Image.open(img_buffer)
</snippet></ROW><ROW><id>17532511</id><snippet>print("&lt;td&gt;{1}".format(product))
print("&lt;td&gt;{0}".format(product))
</snippet></ROW><ROW><id>17532511</id><snippet>"&lt;tr&gt;&lt;td&gt;{0}&lt;/td&gt;&lt;td&gt;{1}&lt;/td&gt;".format(1,2)
'&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;'
</snippet></ROW><ROW><id>17532677</id><snippet>*</snippet></ROW><ROW><id>17532677</id><snippet>func(*parameters)
</snippet></ROW><ROW><id>17532677</id><snippet>def func(x,y,z):
     print x,y,z
&gt;&gt;&gt; params = (1,2,3)
&gt;&gt;&gt; func(*params)
1 2 3
&gt;&gt;&gt; params = (4,5,6)
&gt;&gt;&gt; func(*params)
4 5 6
</snippet></ROW><ROW><id>17532756</id><snippet>foo</snippet></ROW><ROW><id>17532756</id><snippet>text.words('foo')</snippet></ROW><ROW><id>17532756</id><snippet>In [18]: !touch 'foo'

In [19]: text = corpus.PlaintextCorpusReader('.', "foo")

In [20]: text.words('foo')
AssertionError:
</snippet></ROW><ROW><id>17532756</id><snippet>cfd = nltk.ConditionalFreqDist(
    (target, fileid[:3])
    for fileid in text.fileids()
    if os.path.getsize(fileid) &gt; 0   # check the filesize is not 0
    for w in text.words(fileid)
    for target in ['budget', 'appropriat']
    if w.lower().startswith(target))
</snippet></ROW><ROW><id>17532921</id><snippet>returnValues = [foo() for x in xrange(5)]
</snippet></ROW><ROW><id>17532968</id><snippet>setdefault</snippet></ROW><ROW><id>17533038</id><snippet>with open('a.html', 'r') as report:
    data = report.read()
data = data.replace('$name', 'aakash')
with open('out.html', 'w') as newf:
    newf.write(data)
</snippet></ROW><ROW><id>17533149</id><snippet>while</snippet></ROW><ROW><id>17533149</id><snippet>try</snippet></ROW><ROW><id>17533149</id><snippet>def foo():
    while True:
        try:
            foo2()
        except:
            pass
        else:
            break
</snippet></ROW><ROW><id>17533149</id><snippet>def queryRepeatedly():
    while True:
        while True:
            try:
                foo()
                bar()
                baz()
            except:
                pass
            else:
                break
        time.sleep(15)

def foo():
    foo2()
</snippet></ROW><ROW><id>17533149</id><snippet>def queryAttempt()
    foo()
    bar()
    baz()

def queryOnce():
    while True:
        try:
            queryAttempt()
        except:
            pass
        else:
            break

def queryRepeatedly():
    while True:
        queryOnce()
        time.sleep(15)
</snippet></ROW><ROW><id>17533149</id><snippet>while</snippet></ROW><ROW><id>17533149</id><snippet>continue</snippet></ROW><ROW><id>17533149</id><snippet>def queryRepeatedly():
    while True:
        try:
            foo()
            bar()
            baz()
        except:
            continue()
        time.sleep(15)
</snippet></ROW><ROW><id>17533274</id><snippet>In [30]: import datetime as DT

In [31]: import time

In [32]: d = ['09-2007', '10-2007', '03-2011', '05-2011']

In [33]: [time.mktime(DT.datetime.strptime(dstr, '%m-%Y').timetuple())*1000 for dstr in d]
Out[33]: [1188619200000.0, 1191211200000.0, 1298955600000.0, 1304222400000.0]
</snippet></ROW><ROW><id>17533281</id><snippet>np.where</snippet></ROW><ROW><id>17533281</id><snippet>In [63]: a = np.random.randint(100, size=(1000, 1000))

In [64]: %timeit a == 42
1000 loops, best of 3: 950 us per loop

In [65]: %timeit np.where(a == 42)
100 loops, best of 3: 7.55 ms per loop
</snippet></ROW><ROW><id>17533281</id><snippet>ndimage</snippet></ROW><ROW><id>17533281</id><snippet>find_objects</snippet></ROW><ROW><id>17533281</id><snippet>In [66]: %timeit ndimage.find_objects(a)
100 loops, best of 3: 11.5 ms per loop
</snippet></ROW><ROW><id>17533281</id><snippet>def correct_hot_bis(hot_image, seg_image):
    # Need this to not index out of bounds when computing border_avg
    hot_image_padded = np.pad(hot_image, 3, mode='constant',
                              constant_values=0)
    new_hot = hot_image.copy()
    sign = np.ones_like(hot_image, dtype=np.int8)
    sign[hot_image &gt; 0] = -1
    s_elem = np.ones((3, 3))

    for j, slice_ in enumerate(ndimage.find_objects(seg_image)):
        hot_image_view = hot_image[slice_]
        seg_image_view = seg_image[slice_]
        new_shape = tuple(dim+6 for dim in hot_image_view.shape)
        new_slice = tuple(slice(dim.start,
                                dim.stop+6,
                                None) for dim in slice_)
        indices = seg_image_view == j+1

        obj_avg = hot_image_view[indices].mean()

        obj = np.zeros(new_shape)
        obj[3:-3, 3:-3][indices] = True

        dilated = ndimage.binary_dilation(obj, s_elem)
        border = mahotas.borders(dilated)
        border &amp;= dilated

        border_avg = hot_image_padded[new_slice][border == 1].mean()

        new_hot[slice_][indices] += (sign[slice_][indices] *
                                     np.abs(obj_avg - border_avg))

    return new_hot
</snippet></ROW><ROW><id>17533281</id><snippet>np.unique</snippet></ROW><ROW><id>17533281</id><snippet>a = np.random.randint(100, size=(1000, 1000))

def get_pos(arr):
    pos = []
    for j in xrange(100):
        pos.append(np.where(arr == j))
    return pos

def get_pos_bis(arr):
    unq, flat_idx = np.unique(arr, return_inverse=True)
    pos = np.argsort(flat_idx)
    counts = np.bincount(flat_idx)
    cum_counts = np.cumsum(counts)
    multi_dim_idx = np.unravel_index(pos, arr.shape)
    return zip(*(np.split(coords, cum_counts) for coords in multi_dim_idx))

In [33]: %timeit get_pos(a)
1 loops, best of 3: 766 ms per loop

In [34]: %timeit get_pos_bis(a)
1 loops, best of 3: 388 ms per loop
</snippet></ROW><ROW><id>17533296</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; string = "The brown fox jumped over the red barn, and found the chickens."
&gt;&gt;&gt; res = re.findall(r'(\b[a-z]+\b)?[^a-z]*(\b[a-z]+\b)?[^a-z]*(\b[a-z]+\b)?[^a-z]*,\s*(\b[a-z]+\b)?[^a-z]*(\b[a-z]+\b)?[^a-z]*(\b[a-z]+\b)?', string, re.IGNORECASE)
&gt;&gt;&gt; res
[('the', 'red', 'barn', 'and', 'found', 'the')]
</snippet></ROW><ROW><id>17533296</id><snippet>string = "The brown fox jumped over the red barn, and found 10 chickens."
</snippet></ROW><ROW><id>17533296</id><snippet>[('the', 'red', 'barn', 'and', 'found', 'chickens')]
</snippet></ROW><ROW><id>17533296</id><snippet>string = "The brown fox jumped over the red barn, and fled."
</snippet></ROW><ROW><id>17533296</id><snippet>[('the', 'red', 'barn', 'and', 'fled')]
</snippet></ROW><ROW><id>17533296</id><snippet>\b</snippet></ROW><ROW><id>17533296</id><snippet>[a-z]+</snippet></ROW><ROW><id>17533296</id><snippet>a</snippet></ROW><ROW><id>17533296</id><snippet>z</snippet></ROW><ROW><id>17533296</id><snippet>+</snippet></ROW><ROW><id>17533296</id><snippet>(\b[a-z]+\b)</snippet></ROW><ROW><id>17533296</id><snippet>[^a-z]*</snippet></ROW><ROW><id>17533296</id><snippet>a</snippet></ROW><ROW><id>17533296</id><snippet>z</snippet></ROW><ROW><id>17533296</id><snippet>*</snippet></ROW><ROW><id>17533296</id><snippet>,</snippet></ROW><ROW><id>17533296</id><snippet>\s</snippet></ROW><ROW><id>17533296</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>17533461</id><snippet>__new__</snippet></ROW><ROW><id>17533461</id><snippet>num</snippet></ROW><ROW><id>17533461</id><snippet>__init__</snippet></ROW><ROW><id>17533461</id><snippet>def __new__(cls, baseunit='1', num=1.):
    return super(Unit, cls).__new__(self, num)

def __init__(self, baseunit='1', num=1.):
    """set up base unit"""

    self.baseunit = baseunit

    for _key,_val in self.baseconv.items():
        if baseunit in _val.dtype.names:
            utype = _key
            break
    else:
        raise TypeError('Unit not defined: {:s}'.format(baseunit))
    self.conv = np.array(tuple(np.array(self.baseconv[utype].tolist())
                            / self.baseconv[utype][baseunit]),
                        dtype=self.baseconv[utype].dtype)
</snippet></ROW><ROW><id>17533541</id><snippet>from collections import defaultdict
extracted_data = defaultdict(lambda: [set(), set(), set()])
# Splitting of data depends upon your input format
for entry in input:
    # Assume split() returns a 4-length iterable containing name,
    # phone, email, and url where the value is falsy if not present
    for index, value in enumerate(split(entry)):
        if index == 0:
            data_set = extracted_data[name]
        elif value:
            data_set[index - 1].add(value)
</snippet></ROW><ROW><id>17533639</id><snippet>try..except</snippet></ROW><ROW><id>17533639</id><snippet>import time

def main():
    time.sleep(10)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('bye')
</snippet></ROW><ROW><id>17533665</id><snippet>re.sub</snippet></ROW><ROW><id>17533665</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'(\d+)',r'\1--','abcd1cf123vf')
'abcd1--cf123--vf'
</snippet></ROW><ROW><id>17533730</id><snippet>astropy</snippet></ROW><ROW><id>17533730</id><snippet>C:\Users\&lt;USER NAME&gt;\AppData\Local\Enthought\Canopy32\User\Scripts</snippet></ROW><ROW><id>17533730</id><snippet>easy_install.exe astropy</snippet></ROW><ROW><id>17533867</id><snippet>__iter__</snippet></ROW><ROW><id>17533867</id><snippet>class Position(object):
    def __init__(self, lat, lng):
        self.lat = lat
        self.lng = lng

    def __iter__(self):
        yield self.lat
        yield self.lng

pos = Position(30, 50)
print(pos.lat)
# 30
print(pos.lng)
# 50
for coord in pos:
    print(coord)
# 30
# 50
print(list(pos))    
# [30, 50]
</snippet></ROW><ROW><id>17533867</id><snippet>lat</snippet></ROW><ROW><id>17533867</id><snippet>lng</snippet></ROW><ROW><id>17533872</id><snippet>$(document).ready(function() {
    $(".c").click(function() {
        alert("haha");
    });
});
</snippet></ROW><ROW><id>17534006</id><snippet>def foo(arg1, arg2, arg3, *args, kwarg1="FOO", kwarg2="BAR", kwarg3="BAZ"):
    pass

print(foo.__kwdefaults__)
</snippet></ROW><ROW><id>17534006</id><snippet>{'kwarg1': 'FOO', 'kwarg2': 'BAR', 'kwarg3': 'BAZ'}
</snippet></ROW><ROW><id>17534006</id><snippet>*args</snippet></ROW><ROW><id>17534303</id><snippet>datetime.strptime</snippet></ROW><ROW><id>17534303</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; strs = "2012-08-22"
&gt;&gt;&gt; datetime.strptime(strs,'%Y-%m-%d')
datetime.datetime(2012, 8, 22, 0, 0)
</snippet></ROW><ROW><id>17534303</id><snippet>event.add('dtend', datetime.strptime(endDate,'%Y-%m-%d'))
</snippet></ROW><ROW><id>17534363</id><snippet>p = Pump()
p.getPumps()
</snippet></ROW><ROW><id>17534363</id><snippet>&gt;&gt;&gt; class testClass:
        def __init__(self):
            print "in init"
        def testFunc(self):
            print "in Test Func"


&gt;&gt;&gt; testInstance = testClass()
in init
&gt;&gt;&gt; testInstance.testFunc()
in Test Func
</snippet></ROW><ROW><id>17534433</id><snippet>executemany</snippet></ROW><ROW><id>17534433</id><snippet>cursor.executemany('''insert into zip4_upd values(
    ?,?,?,?,?,?,?,?,?,?,?,
    ?,?,?,?,?,?,?,?,?,?,?,
    ?,?,?,?,?,?,?,?,?,?,?,
    ?,?,?,?,?,?,?,?,?,?,?,
    ?,?,?,?,?,?,?,?,?,?,?,
    ?,?,?,?,?,?,?,?,?,?,?,?)''', row_gen(cursor))
</snippet></ROW><ROW><id>17534433</id><snippet>row_gen</snippet></ROW><ROW><id>17534433</id><snippet>yields</snippet></ROW><ROW><id>17534433</id><snippet>row_gen</snippet></ROW><ROW><id>17534433</id><snippet>def row_gen(cursor, some=1000):
    fetch = cursor.fetchmany
    while True:
        rows = fetch(some)
        if not rows: break
        for row in rows:
            yield row
</snippet></ROW><ROW><id>17534433</id><snippet>row_gen</snippet></ROW><ROW><id>17534433</id><snippet>executemany</snippet></ROW><ROW><id>17534433</id><snippet>... row_gen(cursor)</snippet></ROW><ROW><id>17534531</id><snippet>In [52]: text = '"motor 1" "12.345 " "motor2" 80 "sonar 8" "Pin 11 On"'

In [53]: import shlex

In [54]: shlex.split(text)
Out[54]: ['motor 1', '12.345 ', 'motor2', '80', 'sonar 8', 'Pin 11 On']

In [55]: [item.replace(' ','') for item in shlex.split(text)]
Out[55]: ['motor1', '12.345', 'motor2', '80', 'sonar8', 'Pin11On']

In [56]: ' '.join([item.replace(' ','') for item in shlex.split(text)])
Out[56]: 'motor1 12.345 motor2 80 sonar8 Pin11On'
</snippet></ROW><ROW><id>17534639</id><snippet>dic</snippet></ROW><ROW><id>17534639</id><snippet>dic={'a':[''.join(per) for per in permutations('AGUCN')]}
</snippet></ROW><ROW><id>17534639</id><snippet>if something in sequence</snippet></ROW><ROW><id>17534639</id><snippet>set</snippet></ROW><ROW><id>17534639</id><snippet>dic={'a': set(''.join(per) for per in permutations('AGUCN'))}
</snippet></ROW><ROW><id>17534639</id><snippet>if line in dic['a']</snippet></ROW><ROW><id>17534639</id><snippet>next()</snippet></ROW><ROW><id>17534639</id><snippet>from itertools import permutations

patterns = set(''.join(per) for per in permutations('AGUCN'))
unilist = []

for line in f2:
    if line.strip() in patterns:
        unilist.append(next(f2).strip())
</snippet></ROW><ROW><id>17534639</id><snippet>from itertools import permutations

patterns = set(''.join(per) for per in permutations('AGUCN'))
unilist = [next(f2).strip() for line in f2 if line.strip() in patterns]
</snippet></ROW><ROW><id>17534682</id><snippet>isnull</snippet></ROW><ROW><id>17534682</id><snippet>notnull</snippet></ROW><ROW><id>17534682</id><snippet>#  without forcing dtype it changes None to NaN!
s_bad = pd.Series([1, None], dtype=object)
s_good = pd.Series([1, np.nan])

In [13]: s_bad.dtype
Out[13]: dtype('O')

In [14]: s_good.dtype
Out[14]: dtype('float64')
</snippet></ROW><ROW><id>17534682</id><snippet>In [15]: s_bad.sum()
Out[15]: 1

In [16]: s_good.sum()
Out[16]: 1.0
</snippet></ROW><ROW><id>17534682</id><snippet>pd.isnull</snippet></ROW><ROW><id>17534682</id><snippet>pd.notnull</snippet></ROW><ROW><id>17534712</id><snippet>import invRegex
print(''.join(invRegex.invert('[a-z]')))
# abcdefghijklmnopqrstuvwxyz
</snippet></ROW><ROW><id>17534712</id><snippet>import inverse_regex
print(''.join(inverse_regex.ipermute('[a-z]')))
# abcdefghijklmnopqrstuvwxyz
</snippet></ROW><ROW><id>17534712</id><snippet>import invRegex
import inverse_regex
print(repr(''.join(invRegex.invert('.'))))
print(repr(''.join(inverse_regex.ipermute('.'))))
</snippet></ROW><ROW><id>17534712</id><snippet>'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~'
'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~ \t\n\r\x0b\x0c'
</snippet></ROW><ROW><id>17534712</id><snippet>x = list(invRegex.invert('[a-z][0-9]?.'))
y = list(inverse_regex.ipermute('[a-z][0-9]?.'))
print(len(x))
# 26884
print(len(y))
# 1100
</snippet></ROW><ROW><id>17534857</id><snippet>extracted_data</snippet></ROW><ROW><id>17534857</id><snippet>extracted_data = defaultdict(lambda: [set(), set(), set()])
</snippet></ROW><ROW><id>17534857</id><snippet>.add()</snippet></ROW><ROW><id>17534857</id><snippet>for index, value in enumerate(split(entry)):
    if index == 0:
        data_set = extracted_data[name]
    elif value:
        data_set[index - 1].add(value)
</snippet></ROW><ROW><id>17534857</id><snippet>entry = entry.split()  # split on whitespace
for value, dset in zip(entry[1:], extracted_data[entry[0]]):
    dset.add(value)
</snippet></ROW><ROW><id>17535185</id><snippet>ValueError</snippet></ROW><ROW><id>17535185</id><snippet>float()</snippet></ROW><ROW><id>17535185</id><snippet>float</snippet></ROW><ROW><id>17535185</id><snippet>yticks()</snippet></ROW><ROW><id>17535185</id><snippet>&gt;&gt;&gt; yAxis = ['2013-07-08 15:04:50', '2013-07-08 15:03:50', '2013-07-08 5:04:50']
&gt;&gt;&gt; from random import randint
&gt;&gt;&gt; xAxis = [randint(0, 10) for _ in range(3)]
&gt;&gt;&gt; import pylab as plt
&gt;&gt;&gt; plt.plot(xAxis, range(len(xAxis)))
&gt;&gt;&gt; plt.yticks(range(len(yAxis)), yAxis, size='small')
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>17535214</id><snippet>floor</snippet></ROW><ROW><id>17535214</id><snippet>zip</snippet></ROW><ROW><id>17535459</id><snippet>number_pairs = [(100,200), (110, 190), (90, 210)]

max_width = 50
min_value = min([i for j in number_pairs for i in j])
max_value = max([i for j in number_pairs for i in j])
step = max_width / float(max_value - min_value)

for num1, num2 in number_pairs:
    line = list('-' * max_width)
    pos1 = int((num1 - min_value + 1) * step - 1)
    pos2 = int((num2 - min_value + 1) * step - 1)
    line[pos1] = 'x'
    line[pos2] = 'x'
    print(''.join(line))
</snippet></ROW><ROW><id>17535569</id><snippet>import numpy as np; print(np.random.__doc__)</snippet></ROW><ROW><id>17535569</id><snippet>np.random.__all__</snippet></ROW><ROW><id>17535726</id><snippet>pyc</snippet></ROW><ROW><id>17535726</id><snippet>pyc</snippet></ROW><ROW><id>17535726</id><snippet>py~</snippet></ROW><ROW><id>17535730</id><snippet>s.rfind(re.findall(pattern, s)[-1])
</snippet></ROW><ROW><id>17535868</id><snippet>import matplotlib
from tkinter import *

def main():

    fig = matplotlib.figure.Figure(figsize=(16.8, 8.0))

    root = Tk()
    w = Label(root, text="Close this and it will not hang!")
    w.pack()
    root.mainloop()

    print('Code *does* reach this point')

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17535868</id><snippet>Tkinter</snippet></ROW><ROW><id>17535868</id><snippet>matplotlib.figure.Figure</snippet></ROW><ROW><id>17535868</id><snippet>plt.Figure</snippet></ROW><ROW><id>17536209</id><snippet>for linea in readFile</snippet></ROW><ROW><id>17536209</id><snippet>readFile.seek(0)</snippet></ROW><ROW><id>17536209</id><snippet>sepFile = readFile.read().split("\n")</snippet></ROW><ROW><id>17536209</id><snippet>x = []
y = []
with open("C:/Users/Martinez/Documents/Diego/Python/SampleData.txt") as read_file:
    for line in read_file:
        print line
        a, b = line.split(',')
        x.append(int(a))
        y.append(int(b))

print x
print y
</snippet></ROW><ROW><id>17536209</id><snippet>&gt;&gt;&gt; read_file = open('inp.txt')
&gt;&gt;&gt; for line in read_file:  # reads entire contents of file
...     print line
...
3,4
5,6
7,8
9,10
&gt;&gt;&gt; read_file.read()  # trying to read again gives an empty string
''
&gt;&gt;&gt; out = read_file.read()
&gt;&gt;&gt; int(out)  # empty string cannot be converted to an int
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: ''

&gt;&gt;&gt; read_file.seek(0)  # moves to beginning of file
&gt;&gt;&gt; read_file.read()   # now the content can be read again
'3,4\n5,6\n7,8\n9,10\n'
</snippet></ROW><ROW><id>17536211</id><snippet>tol</snippet></ROW><ROW><id>17536211</id><snippet>LMA</snippet></ROW><ROW><id>17536297</id><snippet>def replace_all(text, dic):
    for i, j in dic.iteritems():
        text = text.replace(i, j)
    return text

f_dic = {'a':'d'}
s_dic = {'1':'x'}

with open('file1.csv','r') as f:
    text=f.read()
    with open('file2.csv','w') as w:
        text=replace_all(text,f_dic)
        text=replace_all(text,s_dic)
        print text
        w.write(text)
</snippet></ROW><ROW><id>17536402</id><snippet>SELECT count(*) as exists FROM anagrams WHERE letters='abc' LIMIT 1;
</snippet></ROW><ROW><id>17536402</id><snippet>CREATE INDEX letters_anagrams ON anagrams (letters);
</snippet></ROW><ROW><id>17536547</id><snippet>driver.set_page_load_timeout(30)
</snippet></ROW><ROW><id>17536682</id><snippet>HashingVectorizer</snippet></ROW><ROW><id>17536682</id><snippet>vectorizer.get_params()</snippet></ROW><ROW><id>17536745</id><snippet>import from glob import iglob

for pathname in iglob("/path/to/folder/2011-*.tweets.dat.gz"):
   print pathname   # or do whatever
</snippet></ROW><ROW><id>17536753</id><snippet>c_wchar_p</snippet></ROW><ROW><id>17536753</id><snippet>&gt;&gt;&gt; base_size = struct.calcsize('&gt;BI')
&gt;&gt;&gt; response = b'\x09\x00\x00\x00\x019513307\x00'
&gt;&gt;&gt; response = response[:-1] # remove null
&gt;&gt;&gt; token_len = len(response) - base_size
&gt;&gt;&gt; struct.unpack('&gt;BI%ds' % token_len, response)
(9, 1, b'9513307')
</snippet></ROW><ROW><id>17536783</id><snippet>time.sleep</snippet></ROW><ROW><id>17537097</id><snippet>1
1
</snippet></ROW><ROW><id>17537097</id><snippet>read</snippet></ROW><ROW><id>17537097</id><snippet>$ cat abc
1
1
$ cat so.sh
#!/bin/bash
read data
echo "You entered $data"
read data
echo "Now you entered $data"
$ bash so.sh &lt;abc
You entered 1
Now you entered 1
</snippet></ROW><ROW><id>17537097</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.system("bash so.sh &lt; abc")
You entered 1
Now you entered 1
0
</snippet></ROW><ROW><id>17537107</id><snippet>def split_by_lines(text_generator):
    last_line = ""
    try:
        while True:
             chunk = "".join(last_line, next(text_generator))
             chunk_by_line = chunk.split('\n')
             last_line = chunk_by_line.pop()
             for line in chunk_by_line:
                 yield line
    except StopIteration: # the other end of the pipe is empty
        yield last_line
        raise StopIteration
</snippet></ROW><ROW><id>17537253</id><snippet>def unpack(stream, fmt):
    size = struct.calcsize(fmt)
    buf = stream.read(size)
    return struct.unpack(fmt, buf)
</snippet></ROW><ROW><id>17537253</id><snippet>&gt;&gt;&gt; b = io.BytesIO(b'\n\x00\x02\x90\x10\x00\n\x00\x02`\x10\x00\n\x00\x02\x80\x10\x00')
&gt;&gt;&gt; print(unpack(b, '&gt;I'))
(167772816,)
&gt;&gt;&gt; print(unpack(b, '&gt;I'))
(268438016,)
&gt;&gt;&gt; print(unpack(b, '&gt;I'))
(39849984,)
&gt;&gt;&gt; print(unpack(b, '&gt;I'))
(167772800,)
&gt;&gt;&gt; print(unpack(b, '&gt;H'))
(4096,)
</snippet></ROW><ROW><id>17537253</id><snippet>buf = stream.read(1)
if buf:
    raise ValueError("Stream not consumed")
</snippet></ROW><ROW><id>17537253</id><snippet>&gt;&gt;&gt; def ensure_finished(stream):
...     try:
...         unpack(stream, 'c')
...     except struct.error:
...         pass
...     else:
...         raise ValueError('Stream not consumed')
&gt;&gt;&gt; ensure_finished(b)
</snippet></ROW><ROW><id>17537253</id><snippet>read</snippet></ROW><ROW><id>17537253</id><snippet>while</snippet></ROW><ROW><id>17537296</id><snippet>Seats</snippet></ROW><ROW><id>17537296</id><snippet>__init__</snippet></ROW><ROW><id>17537296</id><snippet>self.Seats_taken = Seats + 1
</snippet></ROW><ROW><id>17537296</id><snippet>self.Seats_taken =  self.Seats_taken + 1
</snippet></ROW><ROW><id>17537296</id><snippet>self.Seats_taken += 1 
</snippet></ROW><ROW><id>17537296</id><snippet>class Bus :
    seats = 50  #shared across all instances
    def __init__(self):
        #code 
    def Book(self):
        self.Seats_taken = self.seats + 1
</snippet></ROW><ROW><id>17537310</id><snippet>MessageFormat</snippet></ROW><ROW><id>17537310</id><snippet>System.out.println(MessageFormat.format("{0} + {1} = {2}", x, y, x + y));
</snippet></ROW><ROW><id>17537639</id><snippet>fractions</snippet></ROW><ROW><id>17537639</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; Fraction(98, 42)
Fraction(7, 3)
</snippet></ROW><ROW><id>17537639</id><snippet>&gt;&gt;&gt; def numpy_gcd(a, b):
...     a, b = np.broadcast_arrays(a, b)
...     a = a.copy()
...     b = b.copy()
...     pos = np.nonzero(b)[0]
...     while len(pos) &gt; 0:
...         b2 = b[pos]
...         a[pos], b[pos] = b2, a[pos] % b2
...         pos = pos[b[pos]!=0]
...     return a
... 
&gt;&gt;&gt; numpy_gcd(np.array([98]), np.array([42]))
array([14])
&gt;&gt;&gt; 98/14, 42/14
(7, 3)
</snippet></ROW><ROW><id>17537723</id><snippet>start_list[::2]
</snippet></ROW><ROW><id>17537723</id><snippet>[start:stop:step]</snippet></ROW><ROW><id>17537723</id><snippet>[::2]</snippet></ROW><ROW><id>17537723</id><snippet>&gt;&gt;&gt; start_list[::2] = len(start_list[::2])*[1]
&gt;&gt;&gt; start_list
[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]
</snippet></ROW><ROW><id>17537770</id><snippet>submit=Show+Prices</snippet></ROW><ROW><id>17537770</id><snippet>curl</snippet></ROW><ROW><id>17537770</id><snippet>submit=Show+Prices</snippet></ROW><ROW><id>17537770</id><snippet>curl -k https://www.treasurydirect.gov/GA-FI/FedInvest/selectSecurityPriceDate.htm -d "priceDate.month=7&amp;priceDate.day=8&amp;priceDate.year=2013"
</snippet></ROW><ROW><id>17537770</id><snippet>submit=Show+Prices</snippet></ROW><ROW><id>17537770</id><snippet>curl -k https://www.treasurydirect.gov/GA-FI/FedInvest/selectSecurityPriceDate.htm -d "priceDate.month=7&amp;priceDate.day=8&amp;priceDate.year=2013&amp;submit=Show+Prices"
</snippet></ROW><ROW><id>17537778</id><snippet>infixNotation</snippet></ROW><ROW><id>17537778</id><snippet>operatorPrecedence</snippet></ROW><ROW><id>17537778</id><snippet>from pyparsing import *

term = Word(alphas)

AND = Keyword("and")
OR = Keyword("or")

expr = infixNotation(term,
    [
    (AND, 2, opAssoc.LEFT),
    (OR, 2, opAssoc.LEFT),
    ])

sample = '(A or B) and ((C and D) or E)'

result = expr.parseString(sample)

from pprint import pprint
pprint(result.asList())
</snippet></ROW><ROW><id>17537778</id><snippet>[[['A', 'or', 'B'], 'and', [['C', 'and', 'D'], 'or', 'E']]]
</snippet></ROW><ROW><id>17537778</id><snippet>class Operation(object):
    def __init__(self, tokens):
        self._tokens = tokens[0]
        self.assign()

    def assign(self):
        """
        function to copy tokens to object attributes
        """

    def __repr__(self):
        return self.__class__.__name__ + ":" + repr(self.__dict__)
    __str__ = __repr__

class BinOp(Operation):
    def assign(self):
        self.op = self._tokens[1]
        self.terms = self._tokens[0::2]
        del self._tokens

class AndOp(BinOp):
    pass

class OrOp(BinOp):
    pass

expr = infixNotation(term,
    [
    (AND, 2, opAssoc.LEFT, AndOp),
    (OR, 2, opAssoc.LEFT, OrOp),
    ])

sample = '(A or B) and ((C and D) or E)'

result = expr.parseString(sample)
pprint(result.asList())
</snippet></ROW><ROW><id>17537778</id><snippet>[AndOp:{'terms': [OrOp:{'terms': ['A', 'B'], 'op': 'or'}, 
                   OrOp:{'terms': [AndOp:{'terms': ['C', 'D'], 
                                    'op': 'and'}, 'E'], 'op': 'or'}],
'op': 'and'}]
</snippet></ROW><ROW><id>17537915</id><snippet>from flaskext import wtf
from flaskext.wtf import validators

class EmailModel(db.Model):
    email_address = db.EmailProperty

class EmailForm(wtf.Form):
    email = wtf.TextField('Email Address', validators=[validators.Email()])
</snippet></ROW><ROW><id>17537915</id><snippet>@app.route('/register', methods=['POST']
def register():
    form = EmailForm()
    if form.validate_on_submit():
        # This part saves the data from the form to the model.
        email_model = EmailModel(email_address = form.email.data)
        email.put()
</snippet></ROW><ROW><id>17538002</id><snippet>apt</snippet></ROW><ROW><id>17538002</id><snippet>python-apt</snippet></ROW><ROW><id>17538002</id><snippet>libapt-xxx</snippet></ROW><ROW><id>17538002</id><snippet>libjs-yui-doc</snippet></ROW><ROW><id>17538002</id><snippet>#!/usr/bin/env python
# aptinstall.py

import apt
import sys

pkg_name = "libjs-yui-doc"

cache = apt.cache.Cache()
cache.update()

pkg = cache[pkg_name]
if pkg.is_installed:
    print "{pkg_name} already installed".format(pkg_name=pkg_name)
else:
    pkg.mark_install()

    try:
        cache.commit()
    except Exception, arg:
        print &gt;&gt; sys.stderr, "Sorry, package installation failed [{err}]".format(err=str(arg))
</snippet></ROW><ROW><id>17538002</id><snippet>apt-get</snippet></ROW><ROW><id>17538002</id><snippet>$ sudo ./aptinstall.py
</snippet></ROW><ROW><id>17538002</id><snippet>/usr/share/pyshared/apt/progress/gtk2.py:_test()</snippet></ROW><ROW><id>17538158</id><snippet>myNumber = dictionary.get('myNumber', 3)
</snippet></ROW><ROW><id>17538158</id><snippet>myNumber = dictionary.get('myNumber') or 3
</snippet></ROW><ROW><id>17538283</id><snippet>def setUpClass(cls):
     try: 
         # setUpClassInner()
     catch Exception, e:
        cls.tearDownClass()
        raise e # to still mark the test as failed.
</snippet></ROW><ROW><id>17538491</id><snippet>selector[level:level+1] = [i+1]
</snippet></ROW><ROW><id>17538491</id><snippet>selector[level]</snippet></ROW><ROW><id>17538491</id><snippet>In [102]: selector = []

In [103]: selector[0:1] = [100]

In [104]: selector
Out[104]: [100]

In [105]: selector[0:1] = [200]

In [106]: selector
Out[106]: [200]
</snippet></ROW><ROW><id>17538491</id><snippet>selector</snippet></ROW><ROW><id>17538491</id><snippet>In [107]: selector[7:8] = [300]

In [108]: selector
Out[108]: [200, 300]
</snippet></ROW><ROW><id>17538522</id><snippet>from datetime import datetime
import pytz

dt = datetime.strptime("12/31/2012 16:15", "%m/%d/%Y %H:%M") \
             .replace(tzinfo = pytz.FixedOffset(-240)) \
             .astimezone(pytz.timezone('America/New_York'))
</snippet></ROW><ROW><id>17538522</id><snippet>America/New_York</snippet></ROW><ROW><id>17538522</id><snippet>US/Eastern</snippet></ROW><ROW><id>17538528</id><snippet>from tkinter import *
root = Tk()
canvas = Canvas(root)
canvas.pack()
time = 60
def tick():
    # You have to clear the canvas each time the clock updates 
    # (otherwise it writes on top of the old time).  Since the
    # time is the only thing in the canvas, delete(ALL) works
    # perfectly (if it wasn't however, you can delete the id
    # that goes with the clock).
    canvas.delete(ALL)
    # I have to declare time as a global because I'm not using
    # a class (otherwise, I could do something like self.time -= 1)
    global time
    time -= 1
    # You can place the time wherever in the canvas
    # (I chose 10,10 for the example)
    canvas.create_text(10, 10, text=time)
    if time == 0:
        do_something()
    else:
        canvas.after(1000, tick)
canvas.after(1, tick)
root.mainloop()
</snippet></ROW><ROW><id>17538591</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>17538591</id><snippet>print subprocess.check_output(['./MyScript])
</snippet></ROW><ROW><id>17538591</id><snippet>subprocess32</snippet></ROW><ROW><id>17538591</id><snippet>check_output</snippet></ROW><ROW><id>17538769</id><snippet>--param 12</snippet></ROW><ROW><id>17538769</id><snippet>--aligner aligner1</snippet></ROW><ROW><id>17538769</id><snippet>argparse</snippet></ROW><ROW><id>17538769</id><snippet>p = argparse.ArgumentParser ()
p.add_argument ("--aligner", action="append", nargs="+")
</snippet></ROW><ROW><id>17538769</id><snippet>./script.py --aligner aligner1 param=12 --aligner aligner2 param=30 other_param=28
</snippet></ROW><ROW><id>17538769</id><snippet>list</snippet></ROW><ROW><id>17538769</id><snippet>'='</snippet></ROW><ROW><id>17538769</id><snippet>dict</snippet></ROW><ROW><id>17538834</id><snippet>scipy.integrate.odeint</snippet></ROW><ROW><id>17538834</id><snippet>infodict</snippet></ROW><ROW><id>17538834</id><snippet>...,full_output=True</snippet></ROW><ROW><id>17538834</id><snippet>infodict['mused']</snippet></ROW><ROW><id>17538834</id><snippet>odeint</snippet></ROW><ROW><id>17538834</id><snippet>def vanderpol(y, t, mu=1000.):
    return [y[1], mu*(1. - y[0]**2)*y[1] - y[0]]

def vanderpol_jac(y, t, mu=1000.):
    return [[0, 1], [-2*y[0]*y[1]*mu - 1, mu*(1 - y[0]**2)]]

y0 = [2, 0]
t = arange(0, 5000, 1)
y,info = odeint(vanderpol, y0, t, Dfun=vanderpol_jac, full_output=True)

print info['mused'] # method used (1=adams, 2=bdf)
print info['nje']   # cumulative number of jacobian evaluations
plot(t, y[:,0])
</snippet></ROW><ROW><id>17538834</id><snippet>odeint</snippet></ROW><ROW><id>17538834</id><snippet>scipy.integrate.ode</snippet></ROW><ROW><id>17538864</id><snippet>a=0</snippet></ROW><ROW><id>17538864</id><snippet>b</snippet></ROW><ROW><id>17538864</id><snippet>b</snippet></ROW><ROW><id>17538864</id><snippet>c</snippet></ROW><ROW><id>17538864</id><snippet>np.random.seed(1)
err_last = 20
best = None

for i in range(10):
    start = np.random.uniform(-10, 10, size=4)
    # Get parameters estimate
    try:
        popt2, pcov2 = curve_fit(func2, xdata, ydata, p0=start)
    except RuntimeError:
        continue
    err = ((ydata - func2(xdata, *popt2))**2).sum()
    if err &lt; err_last:
        err_last = err
        print err
        best = popt2


za = 6.2426224704624871E-15
zb = 1.5217697532005228E+00
zc = 2.0660424037614489E-01
zd = 2.1570805929514186E-02

zz = np.array([za,zb,zc,zd])
print 'zz', zz
print 'cf', best

print 'zz', ((ydata - func2(xdata, *zz))**2).sum()
print 'cf', err_last
</snippet></ROW><ROW><id>17538864</id><snippet>zz [  6.24262247e-15   1.52176975e+00   2.06604240e-01   2.15708059e-02]
cf [  1.24791299e-16   1.52176944e+00   4.11911831e+00   2.15708019e-02]
zz 9.52135153898
cf 9.52135153904
</snippet></ROW><ROW><id>17538864</id><snippet>b</snippet></ROW><ROW><id>17538864</id><snippet>c</snippet></ROW><ROW><id>17538864</id><snippet>a * np.exp(b * x + c) + d = np.exp(b * x + (c + np.log(a))) + d</snippet></ROW><ROW><id>17538864</id><snippet>a * np.exp(b * x + c) + d = (a * np.exp(c)) * np.exp(b * x) + d</snippet></ROW><ROW><id>17538864</id><snippet>a</snippet></ROW><ROW><id>17538864</id><snippet>c</snippet></ROW><ROW><id>17538927</id><snippet>&gt;&gt;&gt; print audio.pprint()
TPE1=Agalloch
TALB=The Mantle
TRCK=1/9
TIT2=A Celebration For The Death Of Man...
TCON=Metal
&gt;&gt;&gt; audio.delall('TCON')
&gt;&gt;&gt; print audio.pprint()
TPE1=Agalloch
TALB=The Mantle
TRCK=1/9
TIT2=A Celebration For The Death Of Man...
</snippet></ROW><ROW><id>17538927</id><snippet>&gt;&gt;&gt; del audio['tag_to_delete']
</snippet></ROW><ROW><id>17538927</id><snippet> |  __delitem__(self, key)
 |      Delete a metadata tag key.
 |      
 |      If the file has no tags at all, a KeyError is raised.
</snippet></ROW><ROW><id>17538983</id><snippet>attempts = (RollSuccess(skill) for i in xrange(rolls))
counts = collections.Counter(attempts)
cfail, fail, success, csuccess = counts[-1], counts[0], counts[1], counts[2]
</snippet></ROW><ROW><id>17538983</id><snippet>numpy</snippet></ROW><ROW><id>17538983</id><snippet>def DiceRolls(count, maxNum=100, dice=2, minNum=0):
    return sum(np.random.random_integers(minNum, maxNum, count) for die in range(dice))

def RollTesting(skill=50, rolls=10000000):
    dicerolls = DiceRolls(rolls)
    csuccess = np.count_nonzero(dicerolls &lt;= skill/10)
    success = np.count_nonzero((dicerolls &gt; skill/10) &amp; (dicerolls &lt;= skill))
    fail = np.count_nonzero((dicerolls &gt; skill) &amp; (dicerolls &lt;= 100-(100-skill)/10))
    cfail = np.count_nonzero((dicerolls &gt; 100-(100-skill)/10)
</snippet></ROW><ROW><id>17538983</id><snippet>numpy</snippet></ROW><ROW><id>17538983</id><snippet>numpy</snippet></ROW><ROW><id>17538983</id><snippet>subprocess</snippet></ROW><ROW><id>17538983</id><snippet># ... everything up to the RollTesting's last line
    return csuccess, success, fail, cfail

skill = int(sys.argv[1]) if len(sys.argv) &gt; 1 else 50
rolls = int(sys.argv[2]) if len(sys.argv) &gt; 2 else 10000000
csuccess, success, fail, cfail = RollTesting(skill, rolls)
print csuccess
print success
print fail
print cfail
</snippet></ROW><ROW><id>17538983</id><snippet>def RollTesting(skill, rolls):
    results = subprocess32.check_output(['pypy', 'subscript.py', 
                                         str(skill), str(rolls)])
    csuccess, success, fail, cfail = (int(line.rstrip()) for line in results.splitlines())
    print "CFails: %.4f. Fails: %.4f. Successes: %.4f. CSuccesses: %.4f." % (float(cfail)/float(rolls), float(fail)/float(rolls), float(success)/float(rolls), float(csuccess)/float(rolls))
</snippet></ROW><ROW><id>17538983</id><snippet>subprocess32</snippet></ROW><ROW><id>17538983</id><snippet>check_output</snippet></ROW><ROW><id>17538983</id><snippet>check_output</snippet></ROW><ROW><id>17538983</id><snippet>subprocess</snippet></ROW><ROW><id>17538983</id><snippet>subprocess</snippet></ROW><ROW><id>17539083</id><snippet>if not isinstance(newmembers, (list, tuple)):
</snippet></ROW><ROW><id>17539083</id><snippet>isinstance()</snippet></ROW><ROW><id>17539083</id><snippet>type()</snippet></ROW><ROW><id>17539083</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict()
&gt;&gt;&gt; type(d) == dict
False
&gt;&gt;&gt; isinstance(d, dict)
True
</snippet></ROW><ROW><id>17539216</id><snippet>def getAllIndicesRecursively(s, l):
    r = []
    for i, v in enumerate(l):
        if isinstance(v, list):
            r += [ getAllIndicesRecursively(s, v) ]
        elif v == s: r += [ i ]
    return r

arr = ["foo", ["foo", "foo", [1, "foo"]], "foo"]
getAllIndicesRecursively("foo", arr)
</snippet></ROW><ROW><id>17539216</id><snippet>[0, [0, 1, [1]], 2]
</snippet></ROW><ROW><id>17539216</id><snippet>def getAllIndicesRecursively(s, l, agg=[], path=[]):
    for i, v in enumerate(l):
        if isinstance(v, list):
            getAllIndicesRecursively(s, v, agg, path + [ i ] )
        elif v == s: agg += [ path + [ i ] ]
    return agg
</snippet></ROW><ROW><id>17539216</id><snippet>[[0], [1, 0], [1, 1], [1, 2, 1], [2]]
</snippet></ROW><ROW><id>17539413</id><snippet>parser.parse("&lt;!DOCTYPE html&gt;hello world!")
</snippet></ROW><ROW><id>17539423</id><snippet>key in d.keys()</snippet></ROW><ROW><id>17539423</id><snippet>key in d</snippet></ROW><ROW><id>17539423</id><snippet>d</snippet></ROW><ROW><id>17539423</id><snippet>in</snippet></ROW><ROW><id>17539423</id><snippet>dict</snippet></ROW><ROW><id>17539423</id><snippet>dict_keys</snippet></ROW><ROW><id>17539423</id><snippet>keys()</snippet></ROW><ROW><id>17539423</id><snippet>__contains__</snippet></ROW><ROW><id>17539423</id><snippet>__getitem__</snippet></ROW><ROW><id>17539423</id><snippet>dict</snippet></ROW><ROW><id>17539423</id><snippet>collections.abc.Mapping</snippet></ROW><ROW><id>17539423</id><snippet>__hash__</snippet></ROW><ROW><id>17539423</id><snippet>__eq__</snippet></ROW><ROW><id>17539423</id><snippet>keys</snippet></ROW><ROW><id>17539423</id><snippet>list</snippet></ROW><ROW><id>17539423</id><snippet>KeysView</snippet></ROW><ROW><id>17539423</id><snippet>iterkeys</snippet></ROW><ROW><id>17539423</id><snippet>keys</snippet></ROW><ROW><id>17539423</id><snippet>dict</snippet></ROW><ROW><id>17539423</id><snippet>__contains__</snippet></ROW><ROW><id>17539423</id><snippet>KeyView</snippet></ROW><ROW><id>17539423</id><snippet>d.keys()</snippet></ROW><ROW><id>17539423</id><snippet>d.iterkeys()</snippet></ROW><ROW><id>17539423</id><snippet>d</snippet></ROW><ROW><id>17539423</id><snippet>key in d</snippet></ROW><ROW><id>17539423</id><snippet>if(dict[key] != None):
</snippet></ROW><ROW><id>17539423</id><snippet>key</snippet></ROW><ROW><id>17539423</id><snippet>dict</snippet></ROW><ROW><id>17539423</id><snippet>KeyError</snippet></ROW><ROW><id>17539423</id><snippet>None</snippet></ROW><ROW><id>17539423</id><snippet>None</snippet></ROW><ROW><id>17539423</id><snippet>==</snippet></ROW><ROW><id>17539423</id><snippet>!=</snippet></ROW><ROW><id>17539423</id><snippet>is</snippet></ROW><ROW><id>17539423</id><snippet>try</snippet></ROW><ROW><id>17539423</id><snippet>if dict.get(key, None) is not None</snippet></ROW><ROW><id>17539423</id><snippet>None</snippet></ROW><ROW><id>17539423</id><snippet>sentinel = object(); if dict.get(key, sentinel) is not sentinel:</snippet></ROW><ROW><id>17539423</id><snippet>if key in d:
</snippet></ROW><ROW><id>17539423</id><snippet>in</snippet></ROW><ROW><id>17539423</id><snippet>__contains__</snippet></ROW><ROW><id>17539423</id><snippet>list</snippet></ROW><ROW><id>17539423</id><snippet>dict</snippet></ROW><ROW><id>17539423</id><snippet>blist.blist</snippet></ROW><ROW><id>17539468</id><snippet>plt.figure</snippet></ROW><ROW><id>17539468</id><snippet>Artist</snippet></ROW><ROW><id>17539468</id><snippet>from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
canvas = FigureCanvasTkAgg(f, master=root)
</snippet></ROW><ROW><id>17539468</id><snippet>canvas</snippet></ROW><ROW><id>17539468</id><snippet>Tk</snippet></ROW><ROW><id>17539468</id><snippet>Tk</snippet></ROW><ROW><id>17539468</id><snippet>OO</snippet></ROW><ROW><id>17539468</id><snippet>from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure

fig = Figure()
canvas = FigureCanvas(fig)
ax = fig.add_subplot(111)
ax.plot([1,2,3])
ax.set_title('hi mom')
ax.grid(True)
ax.set_xlabel('time')
ax.set_ylabel('volts')
canvas.print_figure('test')
</snippet></ROW><ROW><id>17539691</id><snippet>&gt;&gt;&gt; z = [(1,3),(5,8),(2,4)]
&gt;&gt;&gt; [a for a,b in z]
[1, 5, 2]
&gt;&gt;&gt; [b for a,b in z]
[3, 8, 4]
</snippet></ROW><ROW><id>17539735</id><snippet>import ast
def is_valid_python(code):
   try:
       ast.parse(code)
   except SyntaxError:
       return False
   return True

&gt;&gt;&gt; is_valid_python('1 // 2')
True
&gt;&gt;&gt; is_valid_python('1 /// 2')
False
</snippet></ROW><ROW><id>17540008</id><snippet>check_output(['./MyFile'])
</snippet></ROW><ROW><id>17540008</id><snippet>subprocess</snippet></ROW><ROW><id>17540008</id><snippet>subprocess.check_output = check_output
location = "%s/folder"%(os.environ["Home"])
subprocess.check_output(['./MyFile'])
</snippet></ROW><ROW><id>17540114</id><snippet>for i in list with Klout_APi</snippet></ROW><ROW><id>17540114</id><snippet>score = k.user.score(kloutId=kloutId).get('score')
</snippet></ROW><ROW><id>17540147</id><snippet>n</snippet></ROW><ROW><id>17540147</id><snippet>n[0]</snippet></ROW><ROW><id>17540147</id><snippet>return</snippet></ROW><ROW><id>17540147</id><snippet>def checker(n):
    if len(n) &lt; 2:
        return True
    if n[0] in x:
</snippet></ROW><ROW><id>17540147</id><snippet>len(n) &lt; 2</snippet></ROW><ROW><id>17540147</id><snippet>n[1]</snippet></ROW><ROW><id>17540147</id><snippet>False</snippet></ROW><ROW><id>17540147</id><snippet>str.isdigit</snippet></ROW><ROW><id>17540147</id><snippet>&gt;&gt;&gt; '1'.isdigit()
True
&gt;&gt;&gt; ')'.isdigit()
False
&gt;&gt;&gt; '12'.isdigit()
True
</snippet></ROW><ROW><id>17540147</id><snippet>regex</snippet></ROW><ROW><id>17540147</id><snippet>all</snippet></ROW><ROW><id>17540147</id><snippet>&gt;&gt;&gt; import re
def check(strs):
    nums = re.findall(r'\d+',strs)
    return all(len(c) == 1 for c in nums)
... 
&gt;&gt;&gt; s="(8+(2+4))"
&gt;&gt;&gt; check(s)
True
&gt;&gt;&gt; check("(8+(2+42))")
False
</snippet></ROW><ROW><id>17540147</id><snippet>s="(8+(2+4))"
def checker(n):
    if not n:           #better than len(n) == 0, empty string returns False in python
        return True
    if n[0].isdigit():  #str.digit is a method and it already returns a boolean value   
        if n[1].isdigit():   
            return False
        else:
            return checker(n[1:])  # use return statement for recursive calls
                                   # otherwise the recursive calls may return None  
    else:
        return checker(n[1:])        

print checker("(8+(2+4))")
print checker("(8+(2+42))")
</snippet></ROW><ROW><id>17540147</id><snippet>True
False
</snippet></ROW><ROW><id>17540172</id><snippet>import time

import pykeyboard


# TODO: Replace following two lines with the code that activate the application.
print('Activate the application 3 seconds.')
time.sleep(3)

k = pykeyboard.PyKeyboard()
k.press_key(k.left_key)
time.sleep(1) # Hold down left key for 1 second.
k.release_key(k.left_key)
</snippet></ROW><ROW><id>17540673</id><snippet>self.assertContains(result, "abcd")
</snippet></ROW><ROW><id>17540949</id><snippet>import xml.etree.ElementTree as ET
import re

temp = 'refs/heads/'
name = 'kernel/msm'

pattern = re.compile('%s(.*)' % temp)
tree = ET.parse('sample.xml')
root = tree.getroot()

project = root.find("./project[@name='%s']" % name)
revision = project.get('revision')

res = pattern.match(revision)
print(res.group(1))
</snippet></ROW><ROW><id>17541034</id><snippet>open</snippet></ROW><ROW><id>17541034</id><snippet>os</snippet></ROW><ROW><id>17541034</id><snippet>from os import open
</snippet></ROW><ROW><id>17541034</id><snippet>os.open</snippet></ROW><ROW><id>17541034</id><snippet>open</snippet></ROW><ROW><id>17541034</id><snippet>open</snippet></ROW><ROW><id>17541287</id><snippet>pip install -U selenium
</snippet></ROW><ROW><id>17541287</id><snippet>from selenium import webdriver
</snippet></ROW><ROW><id>17541287</id><snippet>from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
</snippet></ROW><ROW><id>17541287</id><snippet>#ScriptName : Login.py
#---------------------
from selenium import webdriver

#Following are optional required
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException

baseurl = "http://www.mywebsite.com/login.php"
username = "admin"
password = "admin"

xpaths = { 'usernameTxtBox' : "//input[@name='username']",
           'passwordTxtBox' : "//input[@name='password']",
           'submitButton' :   "//input[@name='login']"
         }

mydriver = webdriver.Firefox()
mydriver.get(baseurl)
mydriver.maximize_window()

#Clear Username TextBox if already allowed "Remember Me" 
mydriver.find_element_by_xpath(xpaths['usernameTxtBox']).clear()

#Write Username in Username TextBox
mydriver.find_element_by_xpath(xpaths['usernameTxtBox']).send_keys(username)

#Clear Password TextBox if already allowed "Remember Me" 
mydriver.find_element_by_xpath(xpaths['passwordTxtBox']).clear()

#Write Password in password TextBox
mydriver.find_element_by_xpath(xpaths['passwordTxtBox']).send_keys(password)

#Click Login button
mydriver.find_element_by_xpath(xpaths['submitButton']).click()
</snippet></ROW><ROW><id>17541416</id><snippet>import apt_pkg

apt_pkg.init()
cache = apt_pkg.Cache()

i = 5
for pkg in cache.Packages:
  print(pkg)
  i -= 1
  if i &lt; 0:
    break
</snippet></ROW><ROW><id>17541416</id><snippet>$ python apt_package_list.py
Reading package lists... Done
Building dependency tree       
Reading state information... Done
&lt;apt_pkg.Package object: name:'tesseract-ocr-epo' section: 'universe/graphics' id:48834&gt;
&lt;apt_pkg.Package object: name:'omninotify' section: '' id:48674&gt;
&lt;apt_pkg.Package object: name:'pipenightdreams' section: 'universe/games' id:43500&gt;
&lt;apt_pkg.Package object: name:'mumudvb' section: 'universe/misc' id:41568&gt;
&lt;apt_pkg.Package object: name:'mpg123-alsa' section: '' id:41448&gt;
&lt;apt_pkg.Package object: name:'tbb-examples' section: 'universe/doc' id:38301&gt;
</snippet></ROW><ROW><id>17542591</id><snippet>def collapse_newlines(s):
    # Collapse multiple consecutive newlines into one; removes trailing newlines
    return '\n'.join(filter(None, s.split('\n')))

def read_tabbed_file(filename):
    with open(filename) as f:
        row = None
        for line in f:
            if line.count('\t') &lt; 4:   # Note continuation
                row[-1] += line
                continue

            if row is not None:
                row[-1] = collapse_newlines(row[-1])
                yield row

            row = line.split('\t')

        if row is not None:
            row[-1] = collapse_newlines(row[-1])
            yield row
</snippet></ROW><ROW><id>17542591</id><snippet>read_tabbed_file()</snippet></ROW><ROW><id>17542591</id><snippet>for row in read_tabbed_file(yourfilename):
    # row is a list of elements
</snippet></ROW><ROW><id>17542591</id><snippet>&gt;&gt;&gt; open('/tmp/test.csv', 'w').write('User Name\tCode\tTrack\tColor\tNote\n\nUser Name2\tCode2\tTrack2\tColor2\tNote2\n')
&gt;&gt;&gt; for row in read_tabbed_file('/tmp/test.csv'):
...     print row
... 
['User Name', 'Code', 'Track', 'Color', 'Note']
['User Name2', 'Code2', 'Track2', 'Color2', 'Note2']
</snippet></ROW><ROW><id>17542725</id><snippet>return</snippet></ROW><ROW><id>17542725</id><snippet>parse</snippet></ROW><ROW><id>17542725</id><snippet>def parse(self, response):
    hxs = HtmlXPathSelector(response)
    apps = hxs.select("//*[@id=\"col1\"]/div[@class=\"clear left summary-block relative\"]")
    count = 0
    items = []

    for app in apps:

        item = FirstSampleItem()
        item['title'] = appa.select("//div[@class=\"padding10 relative\"]/div[@class=\"thin-heading font700 black marginTop5\"]/a/text()")[count].extract()

        items.append(item)
        count += 1

    return items
</snippet></ROW><ROW><id>17543004</id><snippet>from fabric.api import run, env  
env.host_string = 'example.org'
output = run('find /tmp -type f | wc -l')
num_files = int(output)
</snippet></ROW><ROW><id>17543004</id><snippet>num_files</snippet></ROW><ROW><id>17543004</id><snippet>find</snippet></ROW><ROW><id>17543004</id><snippet>/tmp</snippet></ROW><ROW><id>17543004</id><snippet>wc -l</snippet></ROW><ROW><id>17543082</id><snippet>matrix=numpy.genfromtxt(path,delimiter=',') # Read the numpy matrix with images in the rows
c=matrix[0]
c=c.reshape(120, 165) # this is the size of my pictures
im=plt.imshow(c)
for row in matrix:
    row=row.reshape(120, 165) # this is the size of my pictures
    im.set_data(row)
    plt.pause(0.02)
plt.show()
</snippet></ROW><ROW><id>17543155</id><snippet>endpoint</snippet></ROW><ROW><id>17543155</id><snippet>add_url_rule</snippet></ROW><ROW><id>17543155</id><snippet>route</snippet></ROW><ROW><id>17543155</id><snippet>functools.wraps</snippet></ROW><ROW><id>17543155</id><snippet>from functools import wraps
def my_decorator(f):
    @wraps(f)
    def wrapper(*args, **kwds):
        return f(*args, **kwds)
    return wrapper
</snippet></ROW><ROW><id>17543297</id><snippet>from django.db.models import Q

def search_items_and_exact(term):
    """Returns items with all searchable attributes exactly equals to term"""
    filters = {}
    for search_attr in Item.searchable():
        filters[search_attr] = term
    return Item.objects.filter(**filters)


def search_items_or_exact(term):
    """Returns items with any searchable attributes exactly equals to term"""
    q_seq = Q()
    for search_attr in Item.searchable():
        filters = {search_attr: term}
        q_seq = q_seq | Q(**filters)
    return Item.objects.filter(q_seq)

def search_items_and_contains(term, ignore_case=False):
    """Returns items with all searchable attributes contains term"""
    if ignore_case:
        contains = 'icontains'
    else:
        contains = 'contains'
    filters = {}
    for search_attr in Item.searchable():
        filters["{0}__{1}".format(search_attr, contains)] = term
    return Item.objects.filter(**filters)

def search_items_or_contains(term, ignore_case=False):
    """Returns items with any searchable attributes contains term"""
    if ignore_case:
        contains = 'icontains'
    else:
        contains = 'contains'
    q_seq = Q()
    for search_attr in Item.searchable():
        filters = {"{0}__{1}".format(search_attr, contains): term}
        q_seq = q_seq | Q(**filters)
    return Item.objects.filter(q_seq)
</snippet></ROW><ROW><id>17543446</id><snippet>L</snippet></ROW><ROW><id>17543446</id><snippet>[2, -5, 3]</snippet></ROW><ROW><id>17543446</id><snippet>left + right</snippet></ROW><ROW><id>17543446</id><snippet>def find_max(L):
    length = len(L)
    mid_index = length/2
    if length == 0:
        return 0
    elif length == 1:
        return max(L[0], 0)

    left = find_max(L[:mid_index])
    right = find_max(L[mid_index:])

    left_half = right_half = 0
    # to the left
    accum = 0
    for x in L[mid_index-1::-1]:
        accum += x
        left_half = max(left_half, accum)

    # to the right
    accum = 0
    for x in L[mid_index:]:
        accum += x
        right_half = max(right_half, accum)

    return max(left, right, left_half + right_half)


assert find_max([]) == 0
assert find_max([-1]) == 0
assert find_max([1, 2, 3]) == 6
assert find_max([2, -5, 3]) == 3
assert find_max([-5, 1, 4, -2, 2, -1, 2, -3, 1, -3, 4]) == 6
</snippet></ROW><ROW><id>17543446</id><snippet>def sum_max(L, accum=0, max_value=0):
    if not L:
        return max_value
    accum += L[0]
    return sum_max(L[1:], accum, max(max_value, accum))

def find_max(L):
    ...
    left_half = sum_max(L[mid_index-1::-1])
    right_half = sum_max(L[mid_index:])
    ...
</snippet></ROW><ROW><id>17543578</id><snippet>random.choice(testList)</snippet></ROW><ROW><id>17543578</id><snippet>hit</snippet></ROW><ROW><id>17543578</id><snippet>dodge</snippet></ROW><ROW><id>17543578</id><snippet>crhit</snippet></ROW><ROW><id>17543578</id><snippet>if-elif</snippet></ROW><ROW><id>17543578</id><snippet>&gt;&gt;&gt; varOne = 2
&gt;&gt;&gt; varTwo = 3
&gt;&gt;&gt; varThree = 4
&gt;&gt;&gt; from random import choice
&gt;&gt;&gt; testVar = choice([varOne, varTwo, varThree])
&gt;&gt;&gt; if testVar == varOne:
       print 'abc'
    elif testVar == varTwo:
       print 'def'
    else:
       print 'ghi'


abc
</snippet></ROW><ROW><id>17543639</id><snippet>pwd</snippet></ROW><ROW><id>17543760</id><snippet>df.groupby('Path').count().sort('Path', ascending=False)

                             Path
Path                             
/js/jquery.validate.js          2
/paidadsimages/arangaya.png     1
/images/sinhala-banner.jpg      1
</snippet></ROW><ROW><id>17543865</id><snippet>scene-&gt;addPixmap</snippet></ROW><ROW><id>17543865</id><snippet>item-&gt;setFlag(QGraphicsItem::ItemIsSelectable);</snippet></ROW><ROW><id>17543865</id><snippet>selectionChanged</snippet></ROW><ROW><id>17543865</id><snippet>scene-&gt;selectedItems()</snippet></ROW><ROW><id>17543865</id><snippet>QPixmap::copy</snippet></ROW><ROW><id>17543940</id><snippet>register_namespace</snippet></ROW><ROW><id>17544112</id><snippet>import csv

def loadCSVfile (path):
    exclusions = ['@', '%', '\n', '[@' , '[%']
    csvData = open(path, 'r')
    spamreader = csv.reader(csvData, delimiter=',', quotechar='|')      

    lines = [line for line in spamreader if ( line and line[0][0:1] not in exclusions and line[0][0:2] not in exclusions )]

    for line in lines:
        print(line)


loadCSVfile('C:/Users/anaim/Desktop/Data Mining/OneR/iris.arff')
</snippet></ROW><ROW><id>17545187</id><snippet>data = json.dumps(values) # instead of urllib.urlencode(values)
response = urllib2.urlopen(url, data)
page = response.read()
</snippet></ROW><ROW><id>17545187</id><snippet>import json 
</snippet></ROW><ROW><id>17545666</id><snippet>In [11]: nulls = dfcolors[pd.isnull(dfcolors['Colors'])]

In [12]: for i, ni in enumerate(nulls.index[:len(dfalt)]):
             dfcolors['Colors'].loc[ni] = dfalt['Alt'].iloc[i]

In [13]: dfcolors
Out[13]:
  Colors
0   Blue
1    Red
2   Cyan
3  Green
4   Pink
5    NaN
6  Brown
</snippet></ROW><ROW><id>17545903</id><snippet>import sys
sys.path.append("C:\\Users\\Myname\\Desktop\\Python")
import Python-Test
</snippet></ROW><ROW><id>17546104</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>17546104</id><snippet>django.contrib.sessions</snippet></ROW><ROW><id>17546104</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>17546104</id><snippet>auth</snippet></ROW><ROW><id>17546104</id><snippet>sessions</snippet></ROW><ROW><id>17546367</id><snippet>bsic</snippet></ROW><ROW><id>17546367</id><snippet>match = re.findall('arfcn: (\d*)(?:,bsic: (\d*))?,dBm: (-\d*)', data)
</snippet></ROW><ROW><id>17546498</id><snippet>__cmp__</snippet></ROW><ROW><id>17546498</id><snippet>-1</snippet></ROW><ROW><id>17546498</id><snippet>0</snippet></ROW><ROW><id>17546498</id><snippet>1</snippet></ROW><ROW><id>17546498</id><snippet>other</snippet></ROW><ROW><id>17546498</id><snippet>False</snippet></ROW><ROW><id>17546498</id><snippet>False</snippet></ROW><ROW><id>17546498</id><snippet>0</snippet></ROW><ROW><id>17546498</id><snippet>class Test():
      def __cmp__(self, other):
           return -1
</snippet></ROW><ROW><id>17546498</id><snippet>__cmp__</snippet></ROW><ROW><id>17546498</id><snippet>__eq__</snippet></ROW><ROW><id>17546646</id><snippet>import urllib2
import csv
import sys

url = 'http://www.test.com'

u = urllib2.urlopen(url)
localFile = open('file.csv', 'w')
localFile.write(u.geturl())
localFile.close()
</snippet></ROW><ROW><id>17546696</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17546696</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for i, j in L:
...     d[i].append(j)
... 
&gt;&gt;&gt; [[i, sum(j)] for i, j in d.items()]
[['titi', 10], ['toto', 5]]
</snippet></ROW><ROW><id>17546696</id><snippet>&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; L = [["toto", 3], ["titi", 10], ["toto", 2]]
&gt;&gt;&gt; for i, j in L:
...     d[i] += j
... 
&gt;&gt;&gt; d.items()
[('titi', 10), ('toto', 5)]
</snippet></ROW><ROW><id>17547179</id><snippet>MyModule(2)</snippet></ROW><ROW><id>17547179</id><snippet>from mypackage.core import A, B</snippet></ROW><ROW><id>17547179</id><snippet>from core.exc import E</snippet></ROW><ROW><id>17547179</id><snippet>A</snippet></ROW><ROW><id>17547179</id><snippet>B</snippet></ROW><ROW><id>17547179</id><snippet>core/__init__.py</snippet></ROW><ROW><id>17547179</id><snippet>from mypackage.core import A, B</snippet></ROW><ROW><id>17547179</id><snippet>MyModule(2)</snippet></ROW><ROW><id>17547179</id><snippet>core/__init__.py</snippet></ROW><ROW><id>17547179</id><snippet>all.py</snippet></ROW><ROW><id>17547179</id><snippet>from mypackage.core.all import A, B</snippet></ROW><ROW><id>17547179</id><snippet>from mypackage.core.exc import TheException</snippet></ROW><ROW><id>17547179</id><snippet>all</snippet></ROW><ROW><id>17547179</id><snippet>mypackage.core</snippet></ROW><ROW><id>17547179</id><snippet>from mypackage.core import MyModule, MyModule2</snippet></ROW><ROW><id>17547278</id><snippet> a="""1....
 2....
 3...."""
 print map(lambda x:x.strip(),a.split("\n"))
</snippet></ROW><ROW><id>17547308</id><snippet>move</snippet></ROW><ROW><id>17547308</id><snippet>import shutil

def move(destination, depth=None):
    if not depth:
        depth = []
    for file_or_dir in os.listdir(os.path.join([destination] + depth, "\\")):
        if os.path.isfile(file_or_dir):
            shutil.move(file_or_dir, destination)
        else:
            move(destination, os.path.join(depth + [file_or_dir], "\\"))
</snippet></ROW><ROW><id>17547405</id><snippet>requests</snippet></ROW><ROW><id>17547405</id><snippet>from requests.moduls import Response

class MyIntResponse(Response):
    def __init__(self, integer):
        super(MyIntResponse, self).__init__()
        self._content_consumed = True
        self._content = integer

def hook(resp,**kwargs):
    print resp.url
    newresp = MyIntResponse(1)
    newresp.raw = resp.raw  # copy across original HTTP response object
</snippet></ROW><ROW><id>17547405</id><snippet>Response</snippet></ROW><ROW><id>17547573</id><snippet>&gt;&gt;&gt; {}.update(1, 2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: update expected at most 1 arguments, got 2
</snippet></ROW><ROW><id>17547573</id><snippet>dict.update()</snippet></ROW><ROW><id>17547573</id><snippet>None</snippet></ROW><ROW><id>17547573</id><snippet>update()</snippet></ROW><ROW><id>17547573</id><snippet>d.update(red=1, blue=2)</snippet></ROW><ROW><id>17547573</id><snippet>map()</snippet></ROW><ROW><id>17547573</id><snippet>key</snippet></ROW><ROW><id>17547573</id><snippet>value</snippet></ROW><ROW><id>17547573</id><snippet>map()</snippet></ROW><ROW><id>17547573</id><snippet>&gt;&gt;&gt; def key(v):
...     return (v, v)
... 
&gt;&gt;&gt; value = range(3)
&gt;&gt;&gt; map(key, value)
[(0, 0), (1, 1), (2, 2)]
&gt;&gt;&gt; product = {}
&gt;&gt;&gt; product.update(map(key, value))
&gt;&gt;&gt; product
{0: 0, 1: 1, 2: 2}
</snippet></ROW><ROW><id>17547573</id><snippet>map()</snippet></ROW><ROW><id>17547573</id><snippet>dict.update()</snippet></ROW><ROW><id>17547841</id><snippet>itemgetter</snippet></ROW><ROW><id>17547841</id><snippet>functools.wraps</snippet></ROW><ROW><id>17547841</id><snippet># really, it's variable-tester-factory
def variable_tester(target):
    def deco(function):
        def inner(self, *args, **kwargs):
            if getattr(self, target) is not None:
                return function(self, *args, **kwargs)
        return inner
    return deco

class my_class(object):
    def __init__(self):
        self.var = None

    @variable_tester('var')
    def printout(self):
        print self.var
</snippet></ROW><ROW><id>17547841</id><snippet>&gt;&gt;&gt; a = my_class()
&gt;&gt;&gt; print a.var
None
&gt;&gt;&gt; a.printout()
&gt;&gt;&gt; a.var = 'apple'
&gt;&gt;&gt; a.printout()
apple
</snippet></ROW><ROW><id>17547860</id><snippet>NLTK</snippet></ROW><ROW><id>17547860</id><snippet>NLTK</snippet></ROW><ROW><id>17547860</id><snippet>from nltk.util import ngrams
sentence = 'this is a foo bar sentences and i want to ngramize it'
n = 6
sixgrams = ngrams(sentence.split(), n)
for grams in sixgrams:
  print grams
</snippet></ROW><ROW><id>17548149</id><snippet>start = dt.datetime(year=2000,month=1,day=1)
time = datalvm['time'][1:]
floatseconds = map(float,time) #str-&gt;float

#floats to datetime objects -&gt; this is you timeseries index
datetimes = map(lambda x:dt.timedelta(seconds=x)+start,floatseconds)

#construct the time series
timeseries = dict() #timeseries are collected in a dictionary
for signal in datalabels[1:]:
    data =map(float,datalvm[signal][1:].values)
    t_s = pd.Series(data,index=datetimes,name=signal)
    timeseries[signal] = t_s

#convert timeseries dict to dataframe
dataframe = pd.DataFrame(timeseries)
</snippet></ROW><ROW><id>17548149</id><snippet>dataframe['soc'].resample('1sec')
</snippet></ROW><ROW><id>17548352</id><snippet>import re
line = "(comparative of `good') changed for the better in health or fitness"
match = re.search(r"`(.*?)'", line)
print(match.group(1))
</snippet></ROW><ROW><id>17548352</id><snippet>good
</snippet></ROW><ROW><id>17548377</id><snippet>shift</snippet></ROW><ROW><id>17548377</id><snippet>cumsum</snippet></ROW><ROW><id>17548377</id><snippet>In [11]: s = pd.Series([1., 1.1, 1.2, 2.7, 3.2, 3.8, 3.9])

In [12]: (s - s.shift(1) &gt; 0.5).fillna(0).cumsum(skipna=False)  # *
Out[12]:
0    0
1    0
2    0
3    1
4    1
5    2
6    2
dtype: int64
</snippet></ROW><ROW><id>17548377</id><snippet>apply</snippet></ROW><ROW><id>17548377</id><snippet>In [21]: df = pd.DataFrame([[1.1, 1.7, 2.5, 2.6, 2.7, 3.4], list('AAABBB')]).T

In [22]: df.columns = ['time', 'ip']

In [23]: df
Out[23]:
  time ip
0  1.1  A
1  1.7  A
2  2.5  A
3  2.6  B
4  2.7  B
5  3.4  B

In [24]: g = df.groupby('ip')

In [25]: df['session_number'] = g['time'].apply(lambda s: (s - s.shift(1) &gt; 0.5).fillna(0).cumsum(skipna=False))

In [26]: df
Out[26]:
  time ip  session_number
0  1.1  A               0
1  1.7  A               1
2  2.5  A               2
3  2.6  B               0
4  2.7  B               0
5  3.4  B               1
</snippet></ROW><ROW><id>17548377</id><snippet>'ip'</snippet></ROW><ROW><id>17548377</id><snippet>'session_number'</snippet></ROW><ROW><id>17548407</id><snippet>def config(**kwargs):
    for key, value in kwargs.items():
        if key not in AllowedKeys:
            raise KeyError("{} is not allowed in config".format(key))

        if not value_is_correct_for_key(key, value):
            raise ValueError("{} is not allowed for {} in config".format(value, key))

        # ... more tests here depending on your use case

    # Everything is OK,  just return the dictionary
    return kwargs



# Usage:
print(config(A="1", B="2"))
</snippet></ROW><ROW><id>17548864</id><snippet>parse</snippet></ROW><ROW><id>17548864</id><snippet>xls = pd.ExcelFile('C:\Users\cb\Machine_Learning\cMap_Joins.xlsm')

df = xls.parse('Sheet1', skiprows=4, index_col=None, na_values=['NA'])
</snippet></ROW><ROW><id>17548864</id><snippet>skiprows</snippet></ROW><ROW><id>17549169</id><snippet>from csv import DictWriter
from StringIO import StringIO
import xml.etree
from xml.etree import ElementTree

xml_str = \
'''
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;root&gt;
    &lt;child&gt;
        &lt;Name&gt;John&lt;/Name&gt;
        &lt;Surname&gt;Doe&lt;/Surname&gt;
        &lt;Phone&gt;123456&lt;/Phone&gt;
        &lt;Phone&gt;654321&lt;/Phone&gt;
        &lt;Fax&gt;111111&lt;/Fax&gt;
    &lt;/child&gt;
    &lt;child&gt;
        &lt;Name&gt;Tom&lt;/Name&gt;
        &lt;Surname&gt;Cat&lt;/Surname&gt;
        &lt;Phone&gt;98765&lt;/Phone&gt;
        &lt;Phone&gt;56789&lt;/Phone&gt;
        &lt;Phone&gt;00000&lt;/Phone&gt;
    &lt;/child&gt;
&lt;/root&gt;
'''

root = ElementTree.parse(StringIO(xml_str.strip()))
entry_list = []
for child_tag in root.iterfind("child"):
    child_tags = child_tag.getchildren()

    tag_count = {}
    [tag_count.__setitem__(tag.tag, tag_count.get(tag.tag, 0) + 1) for tag in child_tags]

    m_count = dict([(key, 0) for (key, val) in filter(lambda (x, y): y &gt; 1, tag_count.items())])

    enum = lambda x: ("%s%s" % (x.tag, (" %d" % m_count.setdefault(x.tag, m_count.pop(x.tag) + 1)) if(tag_count[x.tag] &gt; 1) else ""), x.text)
    tmp_dict = dict([enum(tag) for tag in child_tags])

    entry_list.append(tmp_dict)

field_order = ["Name", "Surname", "Phone 1", "Phone 2", "Phone 3", "Fax"]
field_check = lambda q: field_order.index(q) if(field_order.count(q)) else sys.maxint

all_fields = list(reduce(lambda x, y: x | set(y.keys()), entry_list, set([])))
all_fields.sort(cmp=lambda x, y: field_check(x) - field_check(y))

with open("test.csv", "w") as file_h:
    writer = DictWriter(file_h, all_fields, restval="", extrasaction="ignore", dialect="excel", lineterminator="\n")
    writer.writerow(dict(zip(all_fields, all_fields)))
    writer.writerows(entry_list)
</snippet></ROW><ROW><id>17549301</id><snippet>server {
  listen 80;
  server_name app1.local;

  location / {
    proxy_pass          http://127.0.0.1:8080/;
    proxy_set_header    HOST $http_host;
    proxy_set_header    X-Real-IP $remote_addr;
  }
}
</snippet></ROW><ROW><id>17549336</id><snippet>string1 = "aa, bb, cc, dd, ee, ff, gg;"
string2 = "aa, bb, cc, zz, yy, ww, oo;"

list1 = string1.rstrip(';').split(', ')
list2 = string2.rstrip(';').split(', ')

common_words = filter(lambda x: x in list1, list2)
unique_words = filter(lambda x: x not in list1, list2)

&gt;&gt;&gt; common_words
['aa', 'bb', 'cc']
&gt;&gt;&gt; unique_words
['zz', 'yy', 'ww', 'oo']
</snippet></ROW><ROW><id>17549336</id><snippet>common_string = ', '.join(common_words) + ';'
with open("common.txt", 'w') as common_file:
    common_file.write(common_string)
</snippet></ROW><ROW><id>17549347</id><snippet>hxs = HtmlXPathSelector(response)

namesubs = hxs.select("//div[@class='namesub']")
for namesub in namesubs:
    item = MyItem()
    item["info"] = namesub.select('.//span[@class="info"]/text()').extract()[0]

    yield item
</snippet></ROW><ROW><id>17549347</id><snippet>MyItem</snippet></ROW><ROW><id>17549347</id><snippet>info</snippet></ROW><ROW><id>17549532</id><snippet>l = [('1232', '07-10-13', 'yes'), ('1111', '07-10-13', 'no'), ('90872', '07-05-13', 'no'), ('63563', '07-06-13', 'no'), ('11111', '07-06-13', 'yes')]

res = {}
for _, k, v in l:
    if k not in res:
        res[k] = [[v], 1]
    else:
        res[k][0].append(v)
        res[k][1] += 1

print res
</snippet></ROW><ROW><id>17549532</id><snippet>from itertools import groupby
from operator import itemgetter

l = [('1232', '07-10-13', 'yes'), ('1111', '07-10-13', 'no'), ('90872', '07-05-13', 'no'), ('63563', '07-06-13', 'no'), ('11111', '07-06-13', 'yes')]

res = {}
for k, v in groupby(l, itemgetter(1)):
    t = [x[2] for x in v]
    res[k] = [t, len(t)]

print res
</snippet></ROW><ROW><id>17549532</id><snippet>res = {k[0]: [k[1], len(k[1])] for k in [(date, [x[2] for x in gr]) for date, gr in groupby(l, itemgetter(1))]}
</snippet></ROW><ROW><id>17549559</id><snippet>class YourModel(models.Model):
    parent = models.ForeignKey('YourModel', related_name='children')

    def siblings(self):
        return self.objects.filter(parent=self.parent_id).exclude(pk=self.pk)
</snippet></ROW><ROW><id>17549559</id><snippet>some_child = YourModel.objects.get(...)
siblings = some_child.siblings()
parent = some_child.parent()
children = parent.children.all()
</snippet></ROW><ROW><id>17550283</id><snippet>,</snippet></ROW><ROW><id>17550283</id><snippet>list</snippet></ROW><ROW><id>17550283</id><snippet>sort</snippet></ROW><ROW><id>17550283</id><snippet>list</snippet></ROW><ROW><id>17550283</id><snippet>&gt;&gt;&gt; s1 = 'fly,dream'
&gt;&gt;&gt; s2 = 'dream,fly'
&gt;&gt;&gt; s1 = s1.split(',')
&gt;&gt;&gt; s1
['fly', 'dream']
&gt;&gt;&gt; s2 = s2.split(',')
&gt;&gt;&gt; s2
['dream', 'fly']
&gt;&gt;&gt; s1.sort()
&gt;&gt;&gt; s1
['dream', 'fly']
&gt;&gt;&gt; s2.sort()
&gt;&gt;&gt; s2
['dream', 'fly']
&gt;&gt;&gt; s1 == s2
True
</snippet></ROW><ROW><id>17550283</id><snippet>sets</snippet></ROW><ROW><id>17550283</id><snippet>&gt;&gt;&gt; varOne = set(s1.split(','))
&gt;&gt;&gt; varTwo = set(s2.split(','))
&gt;&gt;&gt; varOne == varTwo
True
</snippet></ROW><ROW><id>17550283</id><snippet>fly,dream,fly</snippet></ROW><ROW><id>17550283</id><snippet>dream,dream,fly</snippet></ROW><ROW><id>17550283</id><snippet>True</snippet></ROW><ROW><id>17550424</id><snippet>ipython notebook</snippet></ROW><ROW><id>17550424</id><snippet>ipython notebook --pylab=inline</snippet></ROW><ROW><id>17550531</id><snippet>str</snippet></ROW><ROW><id>17550531</id><snippet>bytes</snippet></ROW><ROW><id>17550531</id><snippet>unicode</snippet></ROW><ROW><id>17550531</id><snippet>ascii</snippet></ROW><ROW><id>17550531</id><snippet>encoding = sys.stdout.encoding or 'utf-8'
sys.stdout = codecs.getwriter(encoding)(sys.stdout, errors='replace')
</snippet></ROW><ROW><id>17550574</id><snippet>re.search('[AGCNU]{5}', line)
</snippet></ROW><ROW><id>17550574</id><snippet>patterns</snippet></ROW><ROW><id>17550574</id><snippet>r'.*?(?:patterns)'</snippet></ROW><ROW><id>17550574</id><snippet>'patterns'</snippet></ROW><ROW><id>17550904</id><snippet>not in</snippet></ROW><ROW><id>17550904</id><snippet>if extout not in  (".csv", ".xml"):
</snippet></ROW><ROW><id>17550904</id><snippet>True</snippet></ROW><ROW><id>17550904</id><snippet>extout</snippet></ROW><ROW><id>17550904</id><snippet>False</snippet></ROW><ROW><id>17550904</id><snippet>|</snippet></ROW><ROW><id>17550961</id><snippet>import pickle
@ladonize(int,rtype=int)
def Add(self, num):
    Sum.logger.debug("Adding " + str(num))
    try:
        Sum.sum = pickle.load( open( "sum.p", "rb" ) )
    except:
        pass        

    Sum.sum += num
    Sum.logger.debug("sum is now " + str(Sum.sum))
    pickle.dump( Sum.sum, open( "sum.p", "wb" ) )
    return Sum.sum
</snippet></ROW><ROW><id>17551254</id><snippet>POST</snippet></ROW><ROW><id>17551254</id><snippet>POST</snippet></ROW><ROW><id>17551254</id><snippet>if request.method == 'POST':</snippet></ROW><ROW><id>17551254</id><snippet>GET</snippet></ROW><ROW><id>17551254</id><snippet>POST</snippet></ROW><ROW><id>17551254</id><snippet>request.REQUEST.get('t_t')</snippet></ROW><ROW><id>17551365</id><snippet>&gt;&gt;&gt; print("%*d" % (x,33))
</snippet></ROW><ROW><id>17551365</id><snippet>&gt;&gt;&gt; print "%*d" % (x,33)
</snippet></ROW><ROW><id>17551675</id><snippet>list_of_rows</snippet></ROW><ROW><id>17551675</id><snippet>list_of_rows</snippet></ROW><ROW><id>17551675</id><snippet>enumerate()</snippet></ROW><ROW><id>17551675</id><snippet>for i, row in enumerate(list_of_rows):
    previous = list_of_rows[i - 1] if i else None
    next = list_of_rows[i + 1] if i + 1 &lt; len(list_of_rows) else None
</snippet></ROW><ROW><id>17551794</id><snippet>import logging
logging.basicConfig()
</snippet></ROW><ROW><id>17551913</id><snippet>&gt;&gt;&gt; u"É".lower()
'é'
</snippet></ROW><ROW><id>17551924</id><snippet>In [33]: df
Out[33]: 
                 email  cc  timebucket  total_value
0        john@john.com  us           1       110.50
1  example@example.com  uk           3       208.84
2          foo@foo.com  us           2        50.00

In [34]: df.groupby('cc')['total_value'].apply(lambda x: 100*x.rank()/len(x))
Out[34]: 
0    100
1    100
2     50
dtype: float64

In [35]: df['prank'] = df.groupby('cc')['total_value'].apply(lambda x: 100*x.rank()/len(x))

In [36]: df
Out[36]: 
                 email  cc  timebucket  total_value  prank
0        john@john.com  us           1       110.50    100
1  example@example.com  uk           3       208.84    100
2          foo@foo.com  us           2        50.00     50
</snippet></ROW><ROW><id>17551991</id><snippet>binascii.hexlify()</snippet></ROW><ROW><id>17551991</id><snippet>binascii.unhexlify()</snippet></ROW><ROW><id>17551991</id><snippet>from binascii import hexlify, unhexlify

content = StringIO.getvalue()
hex_content = hexlify(content)
same_content = unhexlify(hex_content)
assert content == same_content
</snippet></ROW><ROW><id>17551997</id><snippet>update</snippet></ROW><ROW><id>17551997</id><snippet>flip</snippet></ROW><ROW><id>17551997</id><snippet>while True:
    player.draw(screen)
    event = Event()
    pygame.display.update()
</snippet></ROW><ROW><id>17551997</id><snippet>screen.fill()</snippet></ROW><ROW><id>17551998</id><snippet>firstPoint = int(raw_input("1st point to be displayed is n° : "))
</snippet></ROW><ROW><id>17552108</id><snippet>print("Starting script...")
sys.stdout.flush()
build.run()
</snippet></ROW><ROW><id>17552207</id><snippet>entities.add(player)</snippet></ROW><ROW><id>17552207</id><snippet>entities.add(player)</snippet></ROW><ROW><id>17552258</id><snippet>"Unsupported operation"</snippet></ROW><ROW><id>17552314</id><snippet>gst.registry.scan_path</snippet></ROW><ROW><id>17552314</id><snippet>import gst
gst.registry_get_default().scan_path('/tmp')
print gst.element_factory_make('myelem')
</snippet></ROW><ROW><id>17552724</id><snippet>PUT</snippet></ROW><ROW><id>17552724</id><snippet>POST</snippet></ROW><ROW><id>17552724</id><snippet>get_serializer_class()</snippet></ROW><ROW><id>17552724</id><snippet>self.request.method</snippet></ROW><ROW><id>17552724</id><snippet>class UserCreateOrListView(views.APIView):
    def get(self, request, *args, **kwargs):
        serializer = ImaginaryUserOutputSerializer(User.objects.all())
        return Response(serializer.data)

    def post(self, request, *args, **kwargs):
         serializer = ImaginaryUserInputSerializer(data=request.DATA)
         if serializer.is_valid():
             user = serializer.save()
             output_serializer = ImaginaryUserOutputSerializer(user)
             return Response(output_serializer.data)
         else:
             return Response(serializer.errors, 400)

etc...
</snippet></ROW><ROW><id>17552818</id><snippet>adj_matrix = [[0] * size for i in range(size)]
</snippet></ROW><ROW><id>17552956</id><snippet>dic['opening_hours']['periods']
</snippet></ROW><ROW><id>17552956</id><snippet>&gt;&gt;&gt; periods = dic['opening_hours']['periods']
&gt;&gt;&gt; for period in periods:
    print(period)


{u'close': {u'day': 1, u'time': u'0100'}, u'open': {u'day': 0, u'time': u'0800'}}
{u'close': {u'day': 2, u'time': u'0100'}, u'open': {u'day': 1, u'time': u'0800'}}
{u'close': {u'day': 3, u'time': u'0100'}, u'open': {u'day': 2, u'time': u'0800'}}
{u'close': {u'day': 4, u'time': u'0100'}, u'open': {u'day': 3, u'time': u'0800'}}
{u'close': {u'day': 5, u'time': u'0100'}, u'open': {u'day': 4, u'time': u'0800'}}
{u'close': {u'day': 6, u'time': u'0100'}, u'open': {u'day': 5, u'time': u'0800'}}
{u'close': {u'day': 0, u'time': u'0100'}, u'open': {u'day': 6, u'time': u'0800'}}

&gt;&gt;&gt; for index, period in enumerate(periods, 1):
    print('Period number %s starts %s, day %s, and ends %s, day %s.' % (
        index,
        period['open']['time'],
        period['open']['day'],
        period['close']['time'],
        period['close']['day'],
    ))


Period number 1 starts 0800, day 0, and ends 0100, day 1.
Period number 2 starts 0800, day 1, and ends 0100, day 2.
Period number 3 starts 0800, day 2, and ends 0100, day 3.
Period number 4 starts 0800, day 3, and ends 0100, day 4.
Period number 5 starts 0800, day 4, and ends 0100, day 5.
Period number 6 starts 0800, day 5, and ends 0100, day 6.
Period number 7 starts 0800, day 6, and ends 0100, day 0.
</snippet></ROW><ROW><id>17553247</id><snippet>logging</snippet></ROW><ROW><id>17553247</id><snippet>syslog</snippet></ROW><ROW><id>17553362</id><snippet>drop_level</snippet></ROW><ROW><id>17553362</id><snippet>In [42]: df.xs('sat', level='day', drop_level=False)
Out[42]:
                     sales
year flavour    day
2008 strawberry sat     10
</snippet></ROW><ROW><id>17553362</id><snippet>In [11]: d.select(lambda x: x[2] == 'sat') * 2
Out[11]:
                     sales
year flavour    day
2008 strawberry sat     20
     banana     sat     44
2009 strawberry sat     22
     banana     sat     46

In [12]: d.update(d.select(lambda x: x[2] == 'sat') * 2)
</snippet></ROW><ROW><id>17553362</id><snippet>In [21]: d.apply(lambda x: x*2 if x.name[2] == 'sat' else x, axis=1)
</snippet></ROW><ROW><id>17553362</id><snippet>get_level_values</snippet></ROW><ROW><id>17553362</id><snippet>In [22]: d[d.index.get_level_values('day') == 'sat'] *= 2
</snippet></ROW><ROW><id>17553531</id><snippet>manage.py startapp appname</snippet></ROW><ROW><id>17553531</id><snippet>models.py</snippet></ROW><ROW><id>17553531</id><snippet>appname/
    models.py
</snippet></ROW><ROW><id>17553531</id><snippet>appname</snippet></ROW><ROW><id>17553684</id><snippet>key = 'user_details.{username}'.format(username='abc')
db.collections.find({key: {'$exists': True}})
</snippet></ROW><ROW><id>17553684</id><snippet>$exists</snippet></ROW><ROW><id>17553949</id><snippet>for row in myjson:
    for d in degrees:
        if d in row['name']:
            row['degree'] = d
            row['name'] = row['name'][:row['name'].find(d)]
</snippet></ROW><ROW><id>17554019</id><snippet>intern()</snippet></ROW><ROW><id>17554019</id><snippet>class InternDict(dict):

    def __setitem__(self, key, value):
        if isinstance(value, str):
            super(InternDict, self).__setitem__(key, intern(value))
        else:
            super(InternDict, self).__setitem__(key, value)
</snippet></ROW><ROW><id>17554019</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d["a"] = "This string is presumably too long to be auto-interned."
&gt;&gt;&gt; d["b"] = "This string is presumably too long to be auto-interned."
&gt;&gt;&gt; d["a"] is d["b"]
False
&gt;&gt;&gt; di = InternDict()
&gt;&gt;&gt; di["a"] = "This string is presumably too long to be auto-interned."
&gt;&gt;&gt; di["b"] = "This string is presumably too long to be auto-interned."
&gt;&gt;&gt; di["a"] is di["b"]
True
</snippet></ROW><ROW><id>17554021</id><snippet>for i in range(6):
    screen.blit(platformimg, (i*50+x, y))
</snippet></ROW><ROW><id>17554021</id><snippet>screen.blit()</snippet></ROW><ROW><id>17554021</id><snippet>positions = [(100, 30), (250, 90), (42, 623)]
for position in positions:
    screen.blit(platormimg, position)
</snippet></ROW><ROW><id>17554147</id><snippet>list(pattern)</snippet></ROW><ROW><id>17554147</id><snippet>For instance, list('abc') returns ['a', 'b', 'c'] and list( (1, 2, 3) ) returns [1, 2, 3]
</snippet></ROW><ROW><id>17554147</id><snippet>&gt;&gt;&gt; for elem in testString:
        # Do Something
</snippet></ROW><ROW><id>17554147</id><snippet>&gt;&gt;&gt; pattern = "AAaa$$##"
&gt;&gt;&gt; list(pattern)
['A', 'A', 'a', 'a', '$', '$', '#', '#']
</snippet></ROW><ROW><id>17554381</id><snippet>setup.py</snippet></ROW><ROW><id>17554381</id><snippet>setup.py install</snippet></ROW><ROW><id>17554381</id><snippet>venv</snippet></ROW><ROW><id>17554397</id><snippet>equal</snippet></ROW><ROW><id>17554397</id><snippet>__eq__</snippet></ROW><ROW><id>17554397</id><snippet>==</snippet></ROW><ROW><id>17554397</id><snippet>def __eq__(self, anotherInst):
    return self.D == anotherInst.D and self.f == anotherInst.f
</snippet></ROW><ROW><id>17554397</id><snippet>__eq__</snippet></ROW><ROW><id>17554397</id><snippet>&gt;&gt;&gt; u = Vec({'a','b','c'}, {'a':0,'c':1,'b':4})
&gt;&gt;&gt; v = Vec({'A','B','C'},{'A':1})
&gt;&gt;&gt; u == v
False
</snippet></ROW><ROW><id>17554489</id><snippet>if</snippet></ROW><ROW><id>17554489</id><snippet>what_i_need</snippet></ROW><ROW><id>17554489</id><snippet>HttpResponse</snippet></ROW><ROW><id>17554489</id><snippet>None</snippet></ROW><ROW><id>17554489</id><snippet>def test(request):
    someURL = "https://www.example.com/"
    urlOpen = urlopen(someURL).read()
    soup = BeautifulSoup(urlOpen)
    what_i_need = None            # Initialized here
    for x in soup.findAll('span'):
        if 'something' in str(x):
            info = x.get_text()
            info = info.split()
            info = info[0]
            info = info.replace(".", '')
            what_i_need = info
    return HttpResponse(what_i_need)
</snippet></ROW><ROW><id>17554673</id><snippet>d = input_queue.get()</snippet></ROW><ROW><id>17554673</id><snippet>import threading
import Queue
import random
import time

def sim_collectData(input_queue, stop_event):
    ''' this provides some output simulating the serial
    data from the data logging hardware. 
    '''
    n = 0
    while not stop_event.is_set():
        input_queue.put("DATA: &lt;here are some random data&gt; " + str(n))
        stop_event.wait(random.randint(0,5))
        n += 1
    print "Terminating data collection..."
    input_queue.put(None)
    return

def logData(input_queue):
    n = 0

    # we *don't* want to loop based on queue size because the queue could
    # theoretically be empty while waiting on some data.
    while True:
        d = input_queue.get()
        if d is None:
            input_queue.task_done()
            return
        if d.startswith("DATA:"):
            print d
        input_queue.task_done()
        n += 1

def main():
    input_queue = Queue.Queue()

    stop_event = threading.Event() # used to signal termination to the threads

    print "Starting data collection thread...",
    collection_thread = threading.Thread(target=sim_collectData, args=(input_queue,     stop_event))
    collection_thread.start()
    print "Done."

    print "Starting logging thread...",
    logging_thread = threading.Thread(target=logData, args=(input_queue,))
    logging_thread.start()
    print "Done."

    try:
        while True:
            time.sleep(10)
    except (KeyboardInterrupt, SystemExit):
        # stop data collection. Let the logging thread finish logging everything in the queue
        stop_event.set()

main()
</snippet></ROW><ROW><id>17554903</id><snippet>ignore</snippet></ROW><ROW><id>17554903</id><snippet>shutil.copytree()</snippet></ROW><ROW><id>17554903</id><snippet>ignore</snippet></ROW><ROW><id>17554903</id><snippet>def my_ignore(dir, files):
    if dir == '/full_path_to':
        return {"exclude.file"}
</snippet></ROW><ROW><id>17554903</id><snippet>from collections import defaultdict

to_ignore = defaultdict(set)
for path in ignored_paths:
    dirname, filename = os.path.split(path)
    to_ignore[dirname].add(filename)

def my_ignore(src, files):
    return to_ignore.get(src, set())
</snippet></ROW><ROW><id>17555029</id><snippet>__call__()</snippet></ROW><ROW><id>17555029</id><snippet>argparse.Action</snippet></ROW><ROW><id>17555029</id><snippet>option_string</snippet></ROW><ROW><id>17555029</id><snippet>option_string</snippet></ROW><ROW><id>17555029</id><snippet>option_string</snippet></ROW><ROW><id>17555029</id><snippet>raise argparse.ArgumentTypeError(
                "argument '{f}' requires between {nmin} and {nmax} "
                "arguments".format(f=option_string, nmin=nmin, nmax=nmax))
</snippet></ROW><ROW><id>17555029</id><snippet>argparse.ArgumentTypeError: argument '-a' requires between 2 and 3 arguments
</snippet></ROW><ROW><id>17555189</id><snippet>import base64
img_tag = "&lt;img src='data:image/png;base64,'" + base64.b64encode(img_buffer.getvalue()) + "/&gt;"
</snippet></ROW><ROW><id>17555232</id><snippet>file_1_data = dict()
file_2_data = dict()
for filename, data in [('infile1.txt', file_1_data), ('infile2.txt', file_2_data)]:
with open(filename) as f:
    for line in f:  
        split_line = line.split()       
        first_int = int(split_line[0])
        rest_floats = [float(f) for f in split_line[1:]]
        data[first_int] = rest_floats
</snippet></ROW><ROW><id>17555232</id><snippet>int</snippet></ROW><ROW><id>17555232</id><snippet>def filter_1(x):
return x &gt; 1

def filter_2(x): 
return 4 &lt; x &lt; 100000

with open('outfile.txt', 'wb') as outfile:
for key in file_1_data:
    if key in file_2_data:
        #write a record, the first one
        data_to_write = [str(f) for f in file_1_data[key] if filter_1(f)]       
        record = '  '.join([str(key)] + data_to_write) + '\n'
        outfile.write(record)
        #second one, do filtering here
        data_to_write = [str(f) for f in file_2_data[key] if filter_2(f)]
        record = '  '.join([str(key)] + data_to_write) + '\n'   
        outfile.write(record)
</snippet></ROW><ROW><id>17555291</id><snippet>handlers:
- url: /fonts
  static_dir: fonts
  http_headers:
    Access-Control-Allow-Origin: "*"
</snippet></ROW><ROW><id>17555330</id><snippet>list_comp = [value[0] for value in rpAttrs if not list(re.finditer(value[0], resourceProperties))]
&gt;&gt; ['ajgagag', 'ajgagag']
</snippet></ROW><ROW><id>17555468</id><snippet>input = ["hello world", "foo bar", "red cat"]
data_wanted = {
    "foo" : 1,
    "hello" : 0,
    "cat" : 2,
    "world" : 0,
    "red" : 2
    "bar" : 1
}
</snippet></ROW><ROW><id>17555468</id><snippet>strlist</snippet></ROW><ROW><id>17555468</id><snippet>def locateWords(strlist):
d = {}
for i, substr in enumerate(strlist):   # gives you the index and the item itself
    for word in substr.split()
        d[word] = i
return d
</snippet></ROW><ROW><id>17555468</id><snippet>strlist</snippet></ROW><ROW><id>17555468</id><snippet>def locateWords(strlist):
d = {}
for i, substr in enumerate(strlist):
    for word in substr.split()
        if word not in d:
            d[word] = [i]
        else:
            d[word].append(i)
return d
</snippet></ROW><ROW><id>17555468</id><snippet>strlist</snippet></ROW><ROW><id>17555468</id><snippet>{}</snippet></ROW><ROW><id>17555468</id><snippet>break</snippet></ROW><ROW><id>17555468</id><snippet>d.update(index)</snippet></ROW><ROW><id>17555468</id><snippet>TypeError: 'int' object is not iterable</snippet></ROW><ROW><id>17555468</id><snippet>[("foo",1), ("hello",0)]</snippet></ROW><ROW><id>17555468</id><snippet>d.__setitem__</snippet></ROW><ROW><id>17555468</id><snippet>d[key] = value</snippet></ROW><ROW><id>17555468</id><snippet>if, fi</snippet></ROW><ROW><id>17555491</id><snippet>any()</snippet></ROW><ROW><id>17555491</id><snippet>if not any(any(inner) for inner in x):
</snippet></ROW><ROW><id>17555491</id><snippet>any()</snippet></ROW><ROW><id>17555491</id><snippet>False</snippet></ROW><ROW><id>17555491</id><snippet>False</snippet></ROW><ROW><id>17555491</id><snippet>not any()</snippet></ROW><ROW><id>17555491</id><snippet>True</snippet></ROW><ROW><id>17555491</id><snippet>&gt;&gt;&gt; x = [(None, None, None), (None, None, None), (None, None, None)]
&gt;&gt;&gt; not any(any(inner) for inner in x)
True
&gt;&gt;&gt; x = [(None, None, None), (None, None, None), (None, None, 1)]
&gt;&gt;&gt; not any(any(inner) for inner in x)
False
</snippet></ROW><ROW><id>17555547</id><snippet>from collections import defaultdict

def parse_data(line):
    # Returns a list of values from line of text.
    return line[1:-2].split(',')

with open('newfile.txt', 'wb') as new_file, open('file1.txt', 'rb') as f1, open('file2.txt', 'rb') as f2:
    mapping = defaultdict(list)
    # Zero-based indexing.
    CERTAIN_COLUMN = 1
    for line in f1:
        # Remove new-lines and get comma-separated values.
        line = line.strip()
        columns = parse_data(line)
        mapping[columns[CERTAIN_COLUMN]].append(line)

    for line in f2:
        line = line.strip()
        columns = parse_data(line)
        for matched in mapping[columns[CERTAIN_COLUMN]]:
            new_file.write('{},{},\n'.format(matched, line))
</snippet></ROW><ROW><id>17555547</id><snippet>search_criteria</snippet></ROW><ROW><id>17555547</id><snippet>matched rows</snippet></ROW><ROW><id>17555547</id><snippet>e</snippet></ROW><ROW><id>17555547</id><snippet>['[x,e,y]']</snippet></ROW><ROW><id>17555547</id><snippet>file2.txt</snippet></ROW><ROW><id>17555571</id><snippet>bar</snippet></ROW><ROW><id>17555571</id><snippet>bar</snippet></ROW><ROW><id>17555571</id><snippet>Test</snippet></ROW><ROW><id>17555571</id><snippet>test1</snippet></ROW><ROW><id>17555571</id><snippet>bar</snippet></ROW><ROW><id>17555571</id><snippet>foo</snippet></ROW><ROW><id>17555571</id><snippet>test1</snippet></ROW><ROW><id>17555571</id><snippet>display(80)</snippet></ROW><ROW><id>17555571</id><snippet>Test</snippet></ROW><ROW><id>17555571</id><snippet>foo</snippet></ROW><ROW><id>17555571</id><snippet>def display(self,foo):
    self.foo=foo
    foo = foo
    print "self.foo : ",self.foo 
    print "foo : ",foo 
</snippet></ROW><ROW><id>17555571</id><snippet>self</snippet></ROW><ROW><id>17555571</id><snippet>def display(self,foo): 
</snippet></ROW><ROW><id>17555571</id><snippet>    self.foo=foo
</snippet></ROW><ROW><id>17555571</id><snippet>display()</snippet></ROW><ROW><id>17555571</id><snippet>test1.display(80)</snippet></ROW><ROW><id>17555571</id><snippet>self</snippet></ROW><ROW><id>17555571</id><snippet>test1</snippet></ROW><ROW><id>17555571</id><snippet>foo</snippet></ROW><ROW><id>17555571</id><snippet>80</snippet></ROW><ROW><id>17555571</id><snippet>test1.foo</snippet></ROW><ROW><id>17555571</id><snippet>80</snippet></ROW><ROW><id>17555571</id><snippet>    foo = foo
</snippet></ROW><ROW><id>17555571</id><snippet>foo</snippet></ROW><ROW><id>17555571</id><snippet>foo</snippet></ROW><ROW><id>17555571</id><snippet>foo</snippet></ROW><ROW><id>17555817</id><snippet>os.walk</snippet></ROW><ROW><id>17555817</id><snippet>import os
for root, dirs, files in os.walk(top, topdown=False):
    for name in files:
        print(os.path.join(root, name))
</snippet></ROW><ROW><id>17555876</id><snippet>getNumEvents</snippet></ROW><ROW><id>17555876</id><snippet>seek</snippet></ROW><ROW><id>17555876</id><snippet>def runFile(eventFile, channelRefFileName, serialPorts, timeScale, maxPEs):
    timer0 = threading.Timer(.0001, turnOffLED, [0, 0, 0, 1])
    numEvents = getNumEvents(eventFile)
    eventFile.seek(0, 0)
    eventCount = 0
    for linein in eventFile:
        if linein == '': print('EOF')
        ....
</snippet></ROW><ROW><id>17556210</id><snippet>image.size[1]</snippet></ROW><ROW><id>17556210</id><snippet>image.size[0]</snippet></ROW><ROW><id>17556210</id><snippet>image.size[1]</snippet></ROW><ROW><id>17556210</id><snippet>os.chdir(os.path.dirname(sys.argv[0]))</snippet></ROW><ROW><id>17556210</id><snippet>./montage.py</snippet></ROW><ROW><id>17556210</id><snippet>abspath</snippet></ROW><ROW><id>17556210</id><snippet>i</snippet></ROW><ROW><id>17556210</id><snippet>for i,image in enumerate(images):
</snippet></ROW><ROW><id>17556210</id><snippet>width = 0
height = 0
i = 0
sum_x = max_y = 0 
</snippet></ROW><ROW><id>17556210</id><snippet>#!/usr/bin/env python
import os.path
import sys
from time import strftime
import Image

row_size = 4
margin = 3

def generate_montage(filenames, output_fn):
    images = [Image.open(filename) for filename in filenames]

    width = max(image.size[0] + margin for image in images)*row_size
    height = sum(image.size[1] + margin for image in images)
    montage = Image.new(mode='RGBA', size=(width, height), color=(0,0,0,0))

    max_x = 0
    max_y = 0
    offset_x = 0
    offset_y = 0
    for i,image in enumerate(images):
        montage.paste(image, (offset_x, offset_y))

        max_x = max(max_x, offset_x + image.size[0])
        max_y = max(max_y, offset_y + image.size[1])

        if i % row_size == row_size-1:
            offset_y = max_y + margin
            offset_x = 0
        else:
            offset_x += margin + image.size[0]

    montage = montage.crop((0, 0, max_x, max_y))
    montage.save(output_fn)

if __name__ == '__main__':
    basename = strftime("Montage %Y-%m-%d at %H.%M.%S.png")
    exedir = os.path.dirname(os.path.abspath(sys.argv[0]))
    filename = os.path.join(exedir, basename)
    generate_montage(sys.argv[1:], filename)
</snippet></ROW><ROW><id>17556227</id><snippet>gold = gold+5</snippet></ROW><ROW><id>17556227</id><snippet>gold</snippet></ROW><ROW><id>17556227</id><snippet>gold</snippet></ROW><ROW><id>17556227</id><snippet>gold</snippet></ROW><ROW><id>17556227</id><snippet>sell_function()</snippet></ROW><ROW><id>17556227</id><snippet>global</snippet></ROW><ROW><id>17556227</id><snippet>def sell_function():
    global gold
    if inventory[0] in rawfish:
       sold = inventory.pop(0)
       gold = gold+5
</snippet></ROW><ROW><id>17556367</id><snippet>_, addr1, new_line1 = line1.split(',')[0]
new_line2 = line1.split(',')[1] + ', ' + line2
phone = [foo.replace('"', '""') for foo in splitted]
</snippet></ROW><ROW><id>17556367</id><snippet>;</snippet></ROW><ROW><id>17556367</id><snippet>,</snippet></ROW><ROW><id>17556367</id><snippet>&gt;&gt;&gt; x = 1; y = 2
&gt;&gt;&gt; x,y
(1, 2)
</snippet></ROW><ROW><id>17556375</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(body)
for div in soup.find_all(class_='highlight-nginx'):
    div.pre.string = my_function(div.pre.string)
</snippet></ROW><ROW><id>17556639</id><snippet>defectives = [index for (index, element) in enumerate(inList[start:end], start)]
</snippet></ROW><ROW><id>17556639</id><snippet>any</snippet></ROW><ROW><id>17556639</id><snippet>if any(group): ... [s for s in group if ...]</snippet></ROW><ROW><id>17556639</id><snippet>group</snippet></ROW><ROW><id>17556639</id><snippet>HGBSA</snippet></ROW><ROW><id>17556668</id><snippet>_foo</snippet></ROW><ROW><id>17556668</id><snippet>foomodule.c</snippet></ROW><ROW><id>17556668</id><snippet>_foo.py</snippet></ROW><ROW><id>17556668</id><snippet>from submodule import name, other, yetanother</snippet></ROW><ROW><id>17556668</id><snippet>del</snippet></ROW><ROW><id>17556668</id><snippet>package.Cls1</snippet></ROW><ROW><id>17556668</id><snippet>package.cls1.Cls1</snippet></ROW><ROW><id>17556696</id><snippet>self.show()</snippet></ROW><ROW><id>17556696</id><snippet>setupUI</snippet></ROW><ROW><id>17556896</id><snippet>heroku ps</snippet></ROW><ROW><id>17556896</id><snippet>heroku ps:scale web=1</snippet></ROW><ROW><id>17556906</id><snippet>In [48]: df1 = pd.read_csv(StringIO(b), index_col=0, names=['time', 'open', 'high', 'low', 'close', 'volume'], parse_dates=True)


In [49]: df2 = pd.read_csv(StringIO(a), index_col=0, names=['time', 'open', 'high', 'low', 'close', 'volume'], parse_dates=True)


In [71]: df1
Out[71]: 
                       open    high    low   close  volume
time                                                      
2009-02-23 18:01:00  991.26  992.12  990.8  991.84      69
2009-02-23 18:02:00  991.80  992.26  991.2  991.87      74
2009-02-23 18:04:00  991.82  991.83  990.7  991.32      74

In [72]: df2
Out[72]: 
                       open    high     low   close  volume
time                                                       
2009-02-23 18:01:00  1.2709  1.2711  1.2704  1.2705     204
2009-02-23 18:02:00  1.2706  1.2706  1.2700  1.2704     211
2009-02-23 18:03:00  1.2704  1.2705  1.2701  1.2704      82
2009-02-23 18:04:00  1.2702  1.2708  1.2702  1.2706      98





In [51]: df2['other_close'] = df1['close']


In [52]: df2
Out[52]: 
                       open    high     low   close  volume  other_close
time                                                                    
2009-02-23 18:01:00  1.2709  1.2711  1.2704  1.2705     204       991.84
2009-02-23 18:02:00  1.2706  1.2706  1.2700  1.2704     211       991.87
2009-02-23 18:03:00  1.2704  1.2705  1.2701  1.2704      82          NaN
2009-02-23 18:04:00  1.2702  1.2708  1.2702  1.2706      98       991.32
</snippet></ROW><ROW><id>17556906</id><snippet>df2.fillna(0)</snippet></ROW><ROW><id>17557061</id><snippet>match</snippet></ROW><ROW><id>17557061</id><snippet>None</snippet></ROW><ROW><id>17557061</id><snippet>re.search</snippet></ROW><ROW><id>17557061</id><snippet>re.match</snippet></ROW><ROW><id>17557061</id><snippet>re.match</snippet></ROW><ROW><id>17557061</id><snippet>re.search</snippet></ROW><ROW><id>17557061</id><snippet>re.match()</snippet></ROW><ROW><id>17557061</id><snippet>re.search()</snippet></ROW><ROW><id>17557061</id><snippet>None</snippet></ROW><ROW><id>17557061</id><snippet>if m:
   print (m.group())
else:
   #do something else
</snippet></ROW><ROW><id>17557103</id><snippet>import sqlite3
import pandas.io.sql as sql
con = sqlite3.connect('database.db')
table = sql.read_frame('select * from some_table', con)
table.to_csv('output.csv')
</snippet></ROW><ROW><id>17557178</id><snippet>pivot_table</snippet></ROW><ROW><id>17557178</id><snippet>In [11]: df.pivot_table('sample', 'sample_date', 'metric__name')
Out[11]:
metric__name  ga:newVisits  ga:pageviews  ga:pageviewsPerVisit  ga:percentNewVisits  ga:uniquePageviews  ga:visitBounceRate  ga:visits
sample_date
2012-11-13              19            20                     1                   95                  20                 100         20
2012-11-14              39           NaN                   NaN                  NaN                  63                  72        NaN
</snippet></ROW><ROW><id>17557178</id><snippet>aggfunc</snippet></ROW><ROW><id>17557178</id><snippet>numpy.mean</snippet></ROW><ROW><id>17557178</id><snippet>pivot</snippet></ROW><ROW><id>17557178</id><snippet>pivot_table</snippet></ROW><ROW><id>17557222</id><snippet>datetime</snippet></ROW><ROW><id>17557222</id><snippet>$ cat datetime.py
import datetime
print datetime.__file__
$ python datetime.py
/home/monty/py/datetime.pyc
/home/monty/py/datetime.pyc
</snippet></ROW><ROW><id>17557222</id><snippet>datetime.py</snippet></ROW><ROW><id>17557237</id><snippet>stat()</snippet></ROW><ROW><id>17557237</id><snippet>#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;

struct stat buf;
stat(filename, &amp;buf);

// If it's a regular file, print the size in bytes
if ((buf.st_mode &amp; S_IFREG) == S_IFREG)
{
  off_t size = buf.st_size;
  fprintf(stdout, "%s is a regular file\n", filename);
  fprintf(stdout, "%s is a regular file: size %zd bytes\n", filename, size);
}
</snippet></ROW><ROW><id>17557237</id><snippet>stat.h</snippet></ROW><ROW><id>17557237</id><snippet>if(S_ISREG(buf.st_mode))   /* stat.h macro, instead of AND'ing */
{
  fprintf(stdout, "%s is a regular file\n", filename);
}
</snippet></ROW><ROW><id>17557237</id><snippet>S_ISDIR</snippet></ROW><ROW><id>17557237</id><snippet>man -s 2 stat</snippet></ROW><ROW><id>17557249</id><snippet>self.a()</snippet></ROW><ROW><id>17557249</id><snippet>a</snippet></ROW><ROW><id>17557249</id><snippet>b</snippet></ROW><ROW><id>17557249</id><snippet>a</snippet></ROW><ROW><id>17557760</id><snippet>loc</snippet></ROW><ROW><id>17557760</id><snippet>=</snippet></ROW><ROW><id>17557760</id><snippet>In [11]: df.loc[rows, columns] = 99

In [12]: df
Out[12]:
    0   1   2   3   4   5   6   7   8   9
A   0  99   2   3  99   5   6  99   8   9
B  10  11  12  13  14  15  16  17  18  19
C  20  99  22  23  99  25  26  99  28  29
</snippet></ROW><ROW><id>17557760</id><snippet>.ix</snippet></ROW><ROW><id>17557760</id><snippet>.at</snippet></ROW><ROW><id>17557760</id><snippet>.iat</snippet></ROW><ROW><id>17557760</id><snippet>df.loc[rows,columns]</snippet></ROW><ROW><id>17557760</id><snippet>ix</snippet></ROW><ROW><id>17557760</id><snippet>loc</snippet></ROW><ROW><id>17557760</id><snippet>iloc</snippet></ROW><ROW><id>17557853</id><snippet>#Taken from http://wiki.scipy.org/Cookbook/Finding_Convex_Hull

import numpy as n, pylab as p, time

def _angle_to_point(point, centre):
    '''calculate angle in 2-D between points and x axis'''
    delta = point - centre
    res = n.arctan(delta[1] / delta[0])
    if delta[0] &lt; 0:
        res += n.pi
    return res

def _draw_triangle(p1, p2, p3, **kwargs):
    tmp = n.vstack((p1,p2,p3))
    x,y = [x[0] for x in zip(tmp.transpose())]
    p.fill(x,y, **kwargs)

def area_of_triangle(p1, p2, p3):
    '''calculate area of any triangle given co-ordinates of the corners'''
    return n.linalg.norm(n.cross((p2 - p1), (p3 - p1)))/2.


def convex_hull(points, graphic=False, smidgen=0.0075):
    '''
    Calculate subset of points that make a convex hull around points
    Recursively eliminates points that lie inside two neighbouring points until only convex hull is remaining.

    :Parameters:
    points : ndarray (2 x m)
    array of points for which to find hull
    graphic : bool
    use pylab to show progress?
    smidgen : float
    offset for graphic number labels - useful values depend on your data range

    :Returns:
    hull_points : ndarray (2 x n)
    convex hull surrounding points
    '''

    if graphic:
        p.clf()
        p.plot(points[0], points[1], 'ro')
    n_pts = points.shape[1]
    assert(n_pts &gt; 5)
    centre = points.mean(1)
    if graphic: p.plot((centre[0],),(centre[1],),'bo')
    angles = n.apply_along_axis(_angle_to_point, 0, points, centre)
    pts_ord = points[:,angles.argsort()]
    if graphic:
        for i in xrange(n_pts):
            p.text(pts_ord[0,i] + smidgen, pts_ord[1,i] + smidgen, \
                   '%d' % i)
    pts = [x[0] for x in zip(pts_ord.transpose())]
    prev_pts = len(pts) + 1
    k = 0
    while prev_pts &gt; n_pts:
        prev_pts = n_pts
        n_pts = len(pts)
        if graphic: p.gca().patches = []
        i = -2
        while i &lt; (n_pts - 2):
            Aij = area_of_triangle(centre, pts[i],     pts[(i + 1) % n_pts])
            Ajk = area_of_triangle(centre, pts[(i + 1) % n_pts], \
                                   pts[(i + 2) % n_pts])
            Aik = area_of_triangle(centre, pts[i],     pts[(i + 2) % n_pts])
            if graphic:
                _draw_triangle(centre, pts[i], pts[(i + 1) % n_pts], \
                               facecolor='blue', alpha = 0.2)
                _draw_triangle(centre, pts[(i + 1) % n_pts], \
                               pts[(i + 2) % n_pts], \
                               facecolor='green', alpha = 0.2)
                _draw_triangle(centre, pts[i], pts[(i + 2) % n_pts], \
                               facecolor='red', alpha = 0.2)
            if Aij + Ajk &lt; Aik:
                if graphic: p.plot((pts[i + 1][0],),(pts[i + 1][1],),'go')
                del pts[i+1]
            i += 1
            n_pts = len(pts)
        k += 1
    return n.asarray(pts)

if __name__ == "__main__":

    import scipy.interpolate as interpolate

#    fig = p.figure(figsize=(10,10))

    theta = 2*n.pi*n.random.rand(1000)
    r = n.random.rand(1000)**0.5
    x,y = r*p.cos(theta),r*p.sin(theta)

    points = n.ndarray((2,len(x)))
    points[0,:],points[1,:] = x,y

    scale = 1.03
    hull_pts = scale*convex_hull(points)

    p.plot(x,y,'ko')

    x,y = [],[]
    convex = scale*hull_pts
    for point in convex:
        x.append(point[0])
        y.append(point[1])
    x.append(convex[0][0])
    y.append(convex[0][1])

    x,y = n.array(x),n.array(y)

#Taken from http://stackoverflow.com/questions/14344099/numpy-scipy-smooth-spline-representation-of-an-arbitrary-contour-flength
    nt = n.linspace(0, 1, 100)
    t = n.zeros(x.shape)
    t[1:] = n.sqrt((x[1:] - x[:-1])**2 + (y[1:] - y[:-1])**2)
    t = n.cumsum(t)
    t /= t[-1]
    x2 = interpolate.spline(t, x, nt)
    y2 = interpolate.spline(t, y, nt)
    p.plot(x2, y2,'r--',linewidth=2)

    p.show()
</snippet></ROW><ROW><id>17557896</id><snippet>int</snippet></ROW><ROW><id>17557896</id><snippet>'808.666666666667'</snippet></ROW><ROW><id>17557896</id><snippet>int</snippet></ROW><ROW><id>17557896</id><snippet>base</snippet></ROW><ROW><id>17557896</id><snippet>&gt;&gt;&gt; int(float('808.666666666667' ))
808
</snippet></ROW><ROW><id>17557896</id><snippet>int(808.666666666667)</snippet></ROW><ROW><id>17557913</id><snippet>ValueName:</snippet></ROW><ROW><id>17557913</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; line = 'some dummy text ValueName:     123456 some dummy text'
&gt;&gt;&gt; m = re.findall(r'ValueName:\s+([0-9]+)',line)
&gt;&gt;&gt; m
['123456']
</snippet></ROW><ROW><id>17557913</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; line = 'blah blah ValueName: 1234 blah blah ValueName: 5678'
&gt;&gt;&gt; m = re.findall(r'ValueName:\s+([0-9]+)',line)
&gt;&gt;&gt; m
['1234', '5678']
</snippet></ROW><ROW><id>17557946</id><snippet>QLabel</snippet></ROW><ROW><id>17557946</id><snippet>QTextDocument</snippet></ROW><ROW><id>17557946</id><snippet>QTextEdit</snippet></ROW><ROW><id>17557946</id><snippet>QTextStream</snippet></ROW><ROW><id>17558152</id><snippet>words</snippet></ROW><ROW><id>17558152</id><snippet>['Aegolius', 'harrisii', 'song', '10009.wav', 'Aegolius', 'harrisii', 'song', '21.wav']
</snippet></ROW><ROW><id>17558152</id><snippet>subfolder=words[3]</snippet></ROW><ROW><id>17558152</id><snippet>10009.wav</snippet></ROW><ROW><id>17558152</id><snippet>song</snippet></ROW><ROW><id>17558152</id><snippet>words[2]</snippet></ROW><ROW><id>17558152</id><snippet>filename=words[4]</snippet></ROW><ROW><id>17558152</id><snippet>words[3]</snippet></ROW><ROW><id>17558152</id><snippet>Aegolius</snippet></ROW><ROW><id>17558152</id><snippet>10009.wav</snippet></ROW><ROW><id>17558152</id><snippet>folder_now</snippet></ROW><ROW><id>17558152</id><snippet>21.wav</snippet></ROW><ROW><id>17558152</id><snippet>if not ("call" or "song") in words</snippet></ROW><ROW><id>17558152</id><snippet>("call" or "song")</snippet></ROW><ROW><id>17558152</id><snippet>"call"</snippet></ROW><ROW><id>17558152</id><snippet>song</snippet></ROW><ROW><id>17558152</id><snippet>if not ("call" in words or "song" in words):
</snippet></ROW><ROW><id>17558152</id><snippet>if not {"call", "song"}.intersection(words):
</snippet></ROW><ROW><id>17558152</id><snippet>break</snippet></ROW><ROW><id>17558152</id><snippet>continue</snippet></ROW><ROW><id>17558152</id><snippet>while True:</snippet></ROW><ROW><id>17558152</id><snippet>line=File.readline()</snippet></ROW><ROW><id>17558152</id><snippet>for line in File:</snippet></ROW><ROW><id>17558152</id><snippet>os.chdir</snippet></ROW><ROW><id>17558152</id><snippet>for files in glob.glob(os.path.join(folder_now, "*.wav"))</snippet></ROW><ROW><id>17558152</id><snippet>os.path</snippet></ROW><ROW><id>17558152</id><snippet>i=1</snippet></ROW><ROW><id>17558152</id><snippet>i+=1</snippet></ROW><ROW><id>17558152</id><snippet>enumerate</snippet></ROW><ROW><id>17558174</id><snippet>DictReader</snippet></ROW><ROW><id>17558174</id><snippet>DictWriter</snippet></ROW><ROW><id>17558174</id><snippet>from csv import DictReader, DictWriter

with open('file1.csv') as fin1,\
     open('file2.csv') as fin2,\
     open('file3.csv', 'wb') as fout:

    reader1 = DictReader(fin1)
    reader2 = DictReader(fin2)

    writer = DictWriter(fout, fieldnames=reader2.fieldnames)
    writer.writeheader()

    for line2 in reader2:
        outline = dict(line2)
        fin1.seek(0) # resets the reader1 iterator
        for line1 in reader1:
            if line1['Search Value'] in line2['Name']:
                outline['Geo Location'] = line1['Location']
        writer.writerow(outline)
</snippet></ROW><ROW><id>17558331</id><snippet>csv</snippet></ROW><ROW><id>17558331</id><snippet>None</snippet></ROW><ROW><id>17558331</id><snippet>''</snippet></ROW><ROW><id>17558331</id><snippet>with open('input.csv', newline='') as infile, open('output.csv', 'w', newline='') as outfile:
    reader = csv.reader(infile, delimiter='\t')
    writer = csv.writer(outfile, delimiter='\t')

    for row in reader:
        if len(row) &gt; 3:
            # detect if `c` is missing (insert your own test here)
            # sample test looks for 3 consecutive columns with values f, o and o
            if row[3:6] == ['f', 'o', 'o']
                # insert an empty `c`
                row.insert(3, '')

        if len(row) &lt; 5:
            # make row at least 5 columns long
            row.extend([''] * (5 - len(row)))
        if len(row) &gt; 5:
            # merge any excess columns into the 5th column
            row[4] = ','.join(row[4:])
            del row[5:]

        writer.writerow(row)
</snippet></ROW><ROW><id>17558331</id><snippet>next()</snippet></ROW><ROW><id>17558331</id><snippet>for</snippet></ROW><ROW><id>17558331</id><snippet>with open('input.csv', newline='') as infile, open('output.csv', 'w', newline='') as outfile:
    reader = csv.reader(infile, delimiter='\t')
    writer = csv.writer(outfile, delimiter='\t')

    row = None

    try:
        next(reader)  # skip the `A   B` headers.

        line = next(reader)  # prime our loop
        while True:
            while not line[0]:
                # advance to the first line with a column 0 value
                line = next(reader)

            row = line  # start off with the first number and column
            line = next(reader)  # prime the subsequent lines loop

            while line and not line[0]:
                # process subsequent lines until we find one with a value in col 0 again
                cell = line[1]
                if cell == 'foo':    # detect column d
                    row.append('')   # and insert empty value
                row.append(cell)
                line = next(reader)

            # consolidate, write
            if len(row) &lt; 5:
                # make row at least 5 columns long
                row.extend([''] * (5 - len(row)))
            if len(row) &gt; 5:
                # merge any excess columns into the 5th column
                row[4] = ','.join(row[4:])
                del row[5:]

            writer.writerow(row)
            row = None
    except StopIteration:
        # reader is done, no more lines to come
        # process the last row if there was one
        if row is not None:
            # consolidate, write
            if len(row) &lt; 5:
                # make row at least 5 columns long
                row.extend([''] * (5 - len(row)))
            if len(row) &gt; 5:
                # merge any excess columns into the 5th column
                row[4] = ','.join(row[4:])
                del row[5:]

            writer.writerow(row)
</snippet></ROW><ROW><id>17558349</id><snippet>~/foo</snippet></ROW><ROW><id>17558349</id><snippet>def check_names(path):
    if not os.path.exists(os.path.dirname(path)):
        os.makedirs(os.path.dirname)
</snippet></ROW><ROW><id>17558408</id><snippet>from Crypto.PublicKey import RSA
from Crypto.Util import randpool
from Crypto.Cipher import PKCS1_OAEP as PKCS


s = "\x00\x00\x00\x00\x03\x00\x00\x00id\x00\x00"
key = RSA.generate(1024, randpool.RandomPool().get_bytes)

cipher = PKCS.new(key)
encr = cipher.encrypt(s)
decr = cipher.decrypt(encr)
</snippet></ROW><ROW><id>17558530</id><snippet>os.chdir(os.path.expanduser('~/Documents/XDF_Thumbnails_Sci'))
for file in os.listdir('.'):
    if os.path.splitext(file)[1] == ".feedme":
        os.system("~/galfit %s" % file)
</snippet></ROW><ROW><id>17558591</id><snippet>numpy.savetxt('output.dat', my_array.reshape((4,2)), fmt='%f %i')
</snippet></ROW><ROW><id>17558591</id><snippet>0.432432 0
0.943721 1
0.473872 0
0.493273 0
</snippet></ROW><ROW><id>17558591</id><snippet>numpy.savetxt('output.dat', my_array.reshape((1,8)), fmt='%f %i ' * 4)
</snippet></ROW><ROW><id>17558591</id><snippet>0.432432 0 0.943721 1 0.473872 0 0.493273 0 
</snippet></ROW><ROW><id>17558640</id><snippet>im</snippet></ROW><ROW><id>17558640</id><snippet>rollaxis(im, 2)
</snippet></ROW><ROW><id>17558640</id><snippet>new_im_vec = ravel(rollaxis(im, 2))
</snippet></ROW><ROW><id>17558878</id><snippet>()</snippet></ROW><ROW><id>17558878</id><snippet>seta.print_name()
</snippet></ROW><ROW><id>17558878</id><snippet>str</snippet></ROW><ROW><id>17558878</id><snippet>repr</snippet></ROW><ROW><id>17558878</id><snippet>def func():
    print "Hello, World!"
&gt;&gt;&gt; func                         #Returns the repr version of function object
&lt;function func at 0xb743cb54&gt;
&gt;&gt;&gt; repr(func)
'&lt;function func at 0xb743cb54&gt;'
&gt;&gt;&gt; print func                   #Equivalent to `print str(func)`
&lt;function func at 0xb743cb54&gt;

&gt;&gt;&gt; func()                       #Eureka!
Hello, World!
</snippet></ROW><ROW><id>17558938</id><snippet>large</snippet></ROW><ROW><id>17558938</id><snippet>class Timeout(object):
    def __init__(self, timeout_seconds):
        self.timeout = datetime.timedelta(0, timeout_seconds)
        self.reset()
    def reset(self):
        self.start = datetime.datetime.now()
        self.stop = self.start + self.timeout
    def check(self):
        if datetime.datetime.now() &gt; self.stop:
            raise Exception('Timeout!')
</snippet></ROW><ROW><id>17558938</id><snippet>t = Timeout(30)
for perm in permutations(x):
    if isPrime(int(perm)):
        large = perm
        t.reset()
    t.check()
</snippet></ROW><ROW><id>17559043</id><snippet>&gt;&gt;&gt; reading = "25.00:50.00:72.00"
&gt;&gt;&gt; print("VALUE: "+reading.split(':')[0])
VALUE: 25.00
&gt;&gt;&gt; print("VALUE: "+reading.split(':')[1])
VALUE: 50.00
</snippet></ROW><ROW><id>17559043</id><snippet>reading</snippet></ROW><ROW><id>17559058</id><snippet>collections.deque</snippet></ROW><ROW><id>17559058</id><snippet>import csv
from collections import deque
filename = 'table.csv'
GROUP_SIZE = 5
THRESHOLD = 40
cond_deque = deque(maxlen=GROUP_SIZE)

with open(filename) as datafile:
    reader = csv.reader(datafile) # assume delimiter=','
    reader.next() # skip header row
    for linenum, row in enumerate(reader, start=1):  # process rows of file
        col0, col1, col4, col5, col6, col23, col24, col25 = (
            float(row[i]) for i in (0, 1, 4, 5, 6, 23, 24, 25))
        cond_deque.append(col1 &lt; THRESHOLD)
        if cond_deque.count(True) == GROUP_SIZE:
            print 'lines {}-{} had {} consecutive rows with col1 &lt; {}'.format(
                linenum-GROUP_SIZE+1, linenum, GROUP_SIZE, THRESHOLD)
            break  # found, so stop looking
</snippet></ROW><ROW><id>17559475</id><snippet>writerow</snippet></ROW><ROW><id>17559475</id><snippet>bytes</snippet></ROW><ROW><id>17559475</id><snippet>split</snippet></ROW><ROW><id>17559475</id><snippet>message.split(b', ')</snippet></ROW><ROW><id>17559475</id><snippet>map(str.strip, message.split(b','))</snippet></ROW><ROW><id>17559475</id><snippet>[b'7407.75961', b'3', b'0.865', b'1.423', b'9.022', b'5']
</snippet></ROW><ROW><id>17559475</id><snippet>csv</snippet></ROW><ROW><id>17559475</id><snippet>BytesIO</snippet></ROW><ROW><id>17559475</id><snippet>csv.reader</snippet></ROW><ROW><id>17559475</id><snippet>reader</snippet></ROW><ROW><id>17559475</id><snippet>writer</snippet></ROW><ROW><id>17559475</id><snippet>csv</snippet></ROW><ROW><id>17559475</id><snippet>csv</snippet></ROW><ROW><id>17559475</id><snippet>csv</snippet></ROW><ROW><id>17559475</id><snippet>with open(csvf, 'wb') as csv_handle:
    while True:
        try:
            message, address = s.recvfrom(8192) 
            print(message)                      #display data on screen
            csv_handle.write(message + b'\n')
        except(KeyboardInterrupt, SystemExit): 
            raise
        except:
            traceback.print_exc()
</snippet></ROW><ROW><id>17559475</id><snippet>except(KeyboardInterrupt, SystemExit): 
    raise
except:
    traceback.print_exc()
</snippet></ROW><ROW><id>17559475</id><snippet>Exception</snippet></ROW><ROW><id>17559475</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>17559475</id><snippet>SystemExit</snippet></ROW><ROW><id>17559475</id><snippet>GeneratorExit</snippet></ROW><ROW><id>17559475</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>17559475</id><snippet>SystemExit</snippet></ROW><ROW><id>17559475</id><snippet>except Exception:
    traceback.print_exc()
</snippet></ROW><ROW><id>17559594</id><snippet>class PacketString(BigEndianStructure):
    _fields_ = [("length", c_ushort),
                ("value", c_char_p)]
</snippet></ROW><ROW><id>17559594</id><snippet>struct PacketString {
    unsigned short length;
    char *value;
};
</snippet></ROW><ROW><id>17559594</id><snippet>struct PacketString {
    unsigned short length;
    char value[1];
};
</snippet></ROW><ROW><id>17559594</id><snippet>ctypes</snippet></ROW><ROW><id>17559594</id><snippet>class PacketString(BigEndianStructure):
    _fields_ = [("length", c_ushort),
                ("value", c_char * 0)]
</snippet></ROW><ROW><id>17559594</id><snippet>resize</snippet></ROW><ROW><id>17559594</id><snippet>p.value</snippet></ROW><ROW><id>17559594</id><snippet>p</snippet></ROW><ROW><id>17559594</id><snippet>p._fields_[1]</snippet></ROW><ROW><id>17559594</id><snippet>class LocalPacketString(BigEndianStructure):
    _fields_ = [("length", c_ushort),
                ("value", c_char * length)]
ps = LocalPacketString(length, buff)
</snippet></ROW><ROW><id>17559594</id><snippet>ctypes</snippet></ROW><ROW><id>17559594</id><snippet>ctypes.Structure</snippet></ROW><ROW><id>17559617</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def make_lines(x,y):
    ax = plt.gca()
    for j in range(len(x)):
        for i in range(j,len(x)):
            distance = np.sqrt((x[i]-x[j])**2+(y[i]-y[j])**2)
            if distance &lt; 0.2 and distance &gt; 0:
                ax.annotate('', xy=(x[i], y[i]), xytext=(x[j], y[j]),
                            arrowprops=dict(facecolor='black', 
                                            shrink=0.1,
                                            width=1),
                            textcoords='data',
                            )
n = 30
x,y = np.random.rand(n), np.random.rand(n)

fig = plt.figure(figsize=(5,5))
ax = fig.add_subplot(111)

make_lines(x,y)

ax.plot(x,y,'ro',markersize=10)
plt.show()
</snippet></ROW><ROW><id>17559754</id><snippet>a(:,:,k)</snippet></ROW><ROW><id>17559754</id><snippet>a[:,:,k]</snippet></ROW><ROW><id>17559754</id><snippet>a = np.asfortranarray(np.random.rand(5000,5000,3))</snippet></ROW><ROW><id>17559882</id><snippet>isin</snippet></ROW><ROW><id>17559882</id><snippet>In [11]: s.index.isin(list('BDE'))
Out[11]: array([False,  True, False,  True,  True, False, False, False, False, False], dtype=bool)
</snippet></ROW><ROW><id>17559882</id><snippet>In [12]: ~s.index.isin(list('BDE'))
Out[12]: array([ True, False,  True, False, False,  True,  True,  True,  True,  True], dtype=bool)
</snippet></ROW><ROW><id>17559882</id><snippet>In [13]: s = s[~s.index.isin(list('BDE'))]

In [14]: s
Out[14]:
A    0
C    2
F    5
G    6
H    7
I    8
J    9
dtype: int64
</snippet></ROW><ROW><id>17559896</id><snippet>from lxml.html import etree

tree = etree.parse("my.html", etree.HTMLParser())
root = tree.getroot()
links = root.findall('*//a[@href]')
foreach link in links:
    if link.get("http").startswith("http"):
        print link.get("http")
</snippet></ROW><ROW><id>17559953</id><snippet>indexer_between_time</snippet></ROW><ROW><id>17559953</id><snippet>In [11]: data.index.indexer_between_time(start='01:15', end='02:00')
Out[11]: array([5, 6, 7, 8])

In [12]: data.iloc[data.index.indexer_between_time(start='1:15', end='02:00')]
Out[12]:
                     value
2013-01-01 01:15:00      6
2013-01-01 01:30:00      7
2013-01-01 01:45:00      8
2013-01-01 02:00:00      9
</snippet></ROW><ROW><id>17559953</id><snippet>.index</snippet></ROW><ROW><id>17559953</id><snippet>indexer_between_time</snippet></ROW><ROW><id>17559953</id><snippet>include_start</snippet></ROW><ROW><id>17559953</id><snippet>include_end</snippet></ROW><ROW><id>17559953</id><snippet>tz</snippet></ROW><ROW><id>17560111</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; req = urllib2.Request('https://api.twitch.tv/kraken/streams/test_channel')
&gt;&gt;&gt; req.add_header('Accept', 'application/vnd.twitchtv.v2+json')
&gt;&gt;&gt; resp = urllib2.urlopen(req)
&gt;&gt;&gt; content = resp.read()
</snippet></ROW><ROW><id>17560111</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.get('https://api.twitch.tv/kraken/streams/test_channel', 
                     headers={'Accept': 'application/vnd.twitchtv.v2+json'})
&gt;&gt;&gt; print(r.status_code)
422 # &lt;- on my machine, YMMV
&gt;&gt;&gt; print(r.text)
{"status":422,"message":"Channel 'test_channel' is not available on Twitch",
 "error":"Unprocessable Entity"}
</snippet></ROW><ROW><id>17560223</id><snippet>import matplotlib.pyplot as plt
import matplotlib
import numpy as np

fig = plt.figure(figsize=(10,5))
ax1 = fig.add_subplot(121)
ax2 = fig.add_subplot(122)

x,y = np.random.rand(100),np.random.rand(100)

ax1.plot(x,y,'ko')
ax2.plot(x,y,'ko')

i = 10

transFigure = fig.transFigure.inverted()

coord1 = transFigure.transform(ax1.transData.transform([x[i],y[i]]))
coord2 = transFigure.transform(ax2.transData.transform([x[i],y[i]]))


line = matplotlib.lines.Line2D((coord1[0],coord2[0]),(coord1[1],coord2[1]),
                               transform=fig.transFigure)
fig.lines = line,

ax1.plot(x[i],y[i],'ro',markersize=20)
ax2.plot(x[i],y[i],'ro',markersize=20)


plt.show()
</snippet></ROW><ROW><id>17560456</id><snippet>iv_l, iv_u</snippet></ROW><ROW><id>17560456</id><snippet>from statsmodels.stats.outliers_influence import summary_table

st, data, ss2 = summary_table(re, alpha=0.05)

fittedvalues = data[:,2]
predict_mean_se  = data[:,3]
predict_mean_ci_low, predict_mean_ci_upp = data[:,4:6].T
predict_ci_low, predict_ci_upp = data[:,6:8].T

# check we got the right things
print np.max(np.abs(re.fittedvalues - fittedvalues))
print np.max(np.abs(iv_l - predict_ci_low))
print np.max(np.abs(iv_u - predict_ci_upp))

plt.plot(x, y, 'o')
plt.plot(x, fittedvalues, '-', lw=2)
plt.plot(x, predict_ci_low, 'r--', lw=2)
plt.plot(x, predict_ci_upp, 'r--', lw=2)
plt.plot(x, predict_mean_ci_low, 'r--', lw=2)
plt.plot(x, predict_mean_ci_upp, 'r--', lw=2)
plt.show()
</snippet></ROW><ROW><id>17560465</id><snippet>Text-copy-source-md5</snippet></ROW><ROW><id>17560465</id><snippet>Node-copyfrom-rev</snippet></ROW><ROW><id>17560465</id><snippet>Node-copyfrom-path</snippet></ROW><ROW><id>17560698</id><snippet>[a-z]*([a-z])\1([a-z])\2[a-z]*
</snippet></ROW><ROW><id>17560698</id><snippet>\1</snippet></ROW><ROW><id>17560698</id><snippet>\2</snippet></ROW><ROW><id>17560698</id><snippet>(\w){2}</snippet></ROW><ROW><id>17560969</id><snippet>def firstTwoWords(strings):
    return [s.split()[:2] for s in strings]
</snippet></ROW><ROW><id>17560969</id><snippet>def firstTwoWords(strings):
    return [(s[0], s[1]) for s in (s.split() for s in strings)]
</snippet></ROW><ROW><id>17560971</id><snippet>itertools.groupby</snippet></ROW><ROW><id>17560971</id><snippet>group = arr[arr['f6']==key]</snippet></ROW><ROW><id>17560971</id><snippet>key</snippet></ROW><ROW><id>17560971</id><snippet>import numpy as np
import csv

def load_csv(filename):
    with open(filename) as f:
        next(f)
        header = [item.strip() for item in next(f).split(',')]
    arr = np.genfromtxt("file.csv", delimiter=',', skiprows=3, dtype=None)
    arr.dtype.names = header
    return arr

arr = load_csv("file.csv")
keys = np.unique(arr['Value5'])

for key in keys:
    group = arr[arr['Value5']==key]
    filename = 'file_{}.csv' .format(key.strip())
    with open(filename, 'w') as data_file:
        wr = csv.writer(data_file, quoting=csv.QUOTE_ALL)
        wr.writerows(group)
</snippet></ROW><ROW><id>17560971</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>17560971</id><snippet>genfromtxt</snippet></ROW><ROW><id>17560971</id><snippet>arr.dtype.names = header</snippet></ROW><ROW><id>17561182</id><snippet>i</snippet></ROW><ROW><id>17561182</id><snippet>i = 0

def foo():
    print i

foo()
</snippet></ROW><ROW><id>17561182</id><snippet>i</snippet></ROW><ROW><id>17561182</id><snippet>i</snippet></ROW><ROW><id>17561182</id><snippet>i = 0

def foo():
    i = 1
    print i

foo()
print i
</snippet></ROW><ROW><id>17561182</id><snippet>i = i + 1</snippet></ROW><ROW><id>17561182</id><snippet>i = 0

def foo():
    print i
    i = 1

foo()
</snippet></ROW><ROW><id>17561182</id><snippet>global i</snippet></ROW><ROW><id>17561208</id><snippet># bash
export TEST=abc

# sh
TEST=abc
export TEST
</snippet></ROW><ROW><id>17561321</id><snippet>range(1, len(lis)+1)</snippet></ROW><ROW><id>17561321</id><snippet>r</snippet></ROW><ROW><id>17561321</id><snippet>combinations</snippet></ROW><ROW><id>17561321</id><snippet>range(2, len(lis)+1)</snippet></ROW><ROW><id>17561321</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; lis = [[0,0,0],[0,0,1],[0,1,0]]
&gt;&gt;&gt; for i in range(1, len(lis)+1):
...     for c in combinations(lis,i):
...         print c
...         
([0, 0, 0],)
([0, 0, 1],)
([0, 1, 0],)
([0, 0, 0], [0, 0, 1])
([0, 0, 0], [0, 1, 0])
([0, 0, 1], [0, 1, 0])
([0, 0, 0], [0, 0, 1], [0, 1, 0])
</snippet></ROW><ROW><id>17561321</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; flatten = chain.from_iterable
&gt;&gt;&gt; ans = [list(flatten(c)) for i in range(2, len(lis)+1) for c in permutations(lis,i)]
&gt;&gt;&gt; pprint(ans)
[[0, 0, 0, 0, 0, 1],
 [0, 0, 0, 0, 1, 0],
 [0, 0, 1, 0, 0, 0],
 [0, 0, 1, 0, 1, 0],
 [0, 1, 0, 0, 0, 0],
 [0, 1, 0, 0, 0, 1],
 [0, 0, 0, 0, 0, 1, 0, 1, 0],
 [0, 0, 0, 0, 1, 0, 0, 0, 1],
 [0, 0, 1, 0, 0, 0, 0, 1, 0],
 [0, 0, 1, 0, 1, 0, 0, 0, 0],
 [0, 1, 0, 0, 0, 0, 0, 0, 1],
 [0, 1, 0, 0, 0, 1, 0, 0, 0]]
</snippet></ROW><ROW><id>17561383</id><snippet>n = int(raw_input())
</snippet></ROW><ROW><id>17561383</id><snippet>raw_input()</snippet></ROW><ROW><id>17561383</id><snippet>raw_input</snippet></ROW><ROW><id>17561547</id><snippet>list.extend</snippet></ROW><ROW><id>17561547</id><snippet>list.append</snippet></ROW><ROW><id>17561547</id><snippet>extend</snippet></ROW><ROW><id>17561547</id><snippet>append</snippet></ROW><ROW><id>17561547</id><snippet>append</snippet></ROW><ROW><id>17561547</id><snippet>extend</snippet></ROW><ROW><id>17561547</id><snippet>append</snippet></ROW><ROW><id>17561547</id><snippet>&gt;&gt;&gt; lis = [1,2,3]
&gt;&gt;&gt; lis.append(4)      #non-iterable
&gt;&gt;&gt; lis.append('foo')  #iterable
&gt;&gt;&gt; lis
[1, 2, 3, 4, 'foo']
</snippet></ROW><ROW><id>17561547</id><snippet>extend</snippet></ROW><ROW><id>17561547</id><snippet>&gt;&gt;&gt; lis = [1,2,3]
&gt;&gt;&gt; lis.extend('foo')      #string is an iterable in python
&gt;&gt;&gt; lis
[1, 2, 3, 'f', 'o', 'o']   #extend appends individual characters to the list
&gt;&gt;&gt; lis.extend([7,8,9])    #same thing happend here
&gt;&gt;&gt; lis
[1, 2, 3, 'f', 'o', 'o', 7, 8, 9]
&gt;&gt;&gt; lis.extend(4)          #an integer is an not iterable so you'll get an error
TypeError: 'int' object is not iterable
</snippet></ROW><ROW><id>17561547</id><snippet>&gt;&gt;&gt; distance = [[]]
&gt;&gt;&gt; distance[-1].extend ([0,1,2,3.5,4.2])
&gt;&gt;&gt; distance
[[0, 1, 2, 3.5, 4.2]]
</snippet></ROW><ROW><id>17561547</id><snippet>[[0, 1, 2, 3.5, 4.2]]
</snippet></ROW><ROW><id>17561547</id><snippet>append</snippet></ROW><ROW><id>17561547</id><snippet>[]</snippet></ROW><ROW><id>17561547</id><snippet>list.extend</snippet></ROW><ROW><id>17561547</id><snippet>list.append</snippet></ROW><ROW><id>17561547</id><snippet>&gt;&gt;&gt; ditance = [] ##declare my array
&gt;&gt;&gt; distance.append([0,1,2,3.5,4.2])
&gt;&gt;&gt; distance
[[0, 1, 2, 3.5, 4.2]]
</snippet></ROW><ROW><id>17561747</id><snippet>CELERYD_TASK_TIME_LIMIT = 600
</snippet></ROW><ROW><id>17561780</id><snippet>ffmpeg</snippet></ROW><ROW><id>17561781</id><snippet>[elem['a'] for elem in alist if 'a' in elem]
</snippet></ROW><ROW><id>17561785</id><snippet>import operator
from django.db import Q
r.objects.filter(reduce(operator.or_, (Q(fruit_name__contains=i) for i in fruits)))
</snippet></ROW><ROW><id>17561785</id><snippet>__in</snippet></ROW><ROW><id>17561785</id><snippet>__contains</snippet></ROW><ROW><id>17561785</id><snippet>Q</snippet></ROW><ROW><id>17561785</id><snippet>q_list = []
for x in fruits:
    q_list.append(Q(fruit_name__contains=x)) 
q_filter = "|".join(q_list)
r.objects.filter(q_filter)
</snippet></ROW><ROW><id>17561896</id><snippet>from itertools import groupby

food1 = [[" vegetable", "tomato"], [" vegetable", "spinach"], [" fruit", "watermelon"], [" fruit", "grapes"], [" meat", "beef"]]

data={}
for key, group in groupby(food1, key=lambda x: x[0]):
    data[key.strip()]=[v[1] for v in group]
</snippet></ROW><ROW><id>17561896</id><snippet>{'vegetable': ['tomato', 'spinach'], 
 'fruit': ['watermelon', 'grapes'], 
 'meat': ['beef']}
</snippet></ROW><ROW><id>17561917</id><snippet>import socket, struct

packed_value = struct.pack('!I', 4294967295 &amp; int('-1136577616'))
addr = socket.inet_ntoa(packed_value)

print addr
</snippet></ROW><ROW><id>17562000</id><snippet>[(1,5.2),
(2,1.43),
(3,3.54),
(4,887),
(5,0.35)]
</snippet></ROW><ROW><id>17562000</id><snippet>def cutoff(threshold, data):
    sortedData = sorted(data, key=lambda x: x[1])
    finalList = filter(lambda x: x[1] &lt; threshold, sortedData)
    return finalList if len(finalList) &gt; 2 else 'No values found'
</snippet></ROW><ROW><id>17562045</id><snippet>elif</snippet></ROW><ROW><id>17562045</id><snippet>    if lobby == 'back':
        altvillagescene()
    else:
        print('Please type a valid option.')
        print('--------------------------------')
        altluckyrollgame()
</snippet></ROW><ROW><id>17562045</id><snippet>if x == 0: pass
elif x == 1: pass
else: pass
</snippet></ROW><ROW><id>17562045</id><snippet>money = 1000000

def luckyrollgame():
    global money
    from random import choice
    print('You are in the game lobby of Lucky Roll.')
    print('Choose either \'rules,\' \'play,\' or \'back\'')
    lobby = input()
    if lobby == 'rules':
        luckyrollgamerules()
    elif lobby == 'play':
        die = [1, 2, 3, 4, 5, 6]
        number1 = choice(die)
        prediction = input('Please type your prediction number: ')
######################### This too
        try: prediction = int(prediction)
        except ValueError: prediction = -10
#########################
        if prediction == number1:
            print('Good job! You guessed right!')
            money = money + 3
            print('You now have ' + str(dollars) + 'dollars.')
        elif prediction == number1 - 1:
            print('Good job! You guessed right!')
            money = money + 3
            print('You now have ' + str(dollars) + 'dollars.')
        elif prediction == number1 + 1:
            print('Good job! You guessed right!')
            money = money + 3
            print('You now have ' + str(dollars) + 'dollars.')
        else:
            print('I\'m sorry. You didn\'t get the number right.')
            print('The number was ' + str(number1) + '.')
            money = money - 1
            print('You now have ' + str(money) + 'dollars.')
            print('--------------------------------------------------')
            altluckyrollgame()
    elif lobby == 'back':
        altvillagescene()
    else:
        print('Please type a valid option.')
        print('--------------------------------')
        altluckyrollgame()
</snippet></ROW><ROW><id>17562275</id><snippet>sm.ratio</snippet></ROW><ROW><id>17562275</id><snippet>sm.ratio</snippet></ROW><ROW><id>17562275</id><snippet>sm.ratio()</snippet></ROW><ROW><id>17562275</id><snippet>In [77]: sm = difflib.SequenceMatcher(None, "university", "anniversary")

In [78]: sm.ratio
Out[78]: &lt;bound method SequenceMatcher.ratio of &lt;difflib.SequenceMatcher instance at 0x104d00488&gt;&gt;

In [79]: sm.ratio()
Out[79]: 0.6666666666666666
</snippet></ROW><ROW><id>17562343</id><snippet>&gt;&gt;&gt; a = ['1','2']
&gt;&gt;&gt; b = 'a'
&gt;&gt;&gt; [b+i for i in a]
['a1', 'a2']
</snippet></ROW><ROW><id>17562389</id><snippet>&gt;&gt;&gt; x = "hello"
&gt;&gt;&gt; y = list(x)
&gt;&gt;&gt; y
['h', 'e', 'l', 'l', 'o']
&gt;&gt;&gt; ''.join(y)
'hello'
</snippet></ROW><ROW><id>17562747</id><snippet>animation</snippet></ROW><ROW><id>17562747</id><snippet>axes</snippet></ROW><ROW><id>17562747</id><snippet>import matplotlib
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np

def _blit_draw(self, artists, bg_cache):
    # Handles blitted drawing, which renders only the artists given instead
    # of the entire figure.
    updated_ax = []
    for a in artists:
        # If we haven't cached the background for this axes object, do
        # so now. This might not always be reliable, but it's an attempt
        # to automate the process.
        if a.axes not in bg_cache:
            # bg_cache[a.axes] = a.figure.canvas.copy_from_bbox(a.axes.bbox)
            # change here
            bg_cache[a.axes] = a.figure.canvas.copy_from_bbox(a.axes.figure.bbox)
        a.axes.draw_artist(a)
        updated_ax.append(a.axes)

    # After rendering all the needed artists, blit each axes individually.
    for ax in set(updated_ax):
        # and here
        # ax.figure.canvas.blit(ax.bbox)
        ax.figure.canvas.blit(ax.figure.bbox)

# MONKEY PATCH!!
matplotlib.animation.Animation._blit_draw = _blit_draw

vls = np.linspace(0,2*2*np.pi,100)

fig=plt.figure()
img, = plt.plot(np.sin(vls))
ax = plt.axes()
ax.set_xlim([0,2*2*np.pi])
#ttl = ax.set_title('',animated=True)
ttl = ax.text(.5, 1.05, '', transform = ax.transAxes, va='center')

def init():
    ttl.set_text('')
    img.set_data([0],[0])
    return img, ttl

def func(n):
    ttl.set_text(str(n))
    img.set_data(vls,np.sin(vls+.02*n*2*np.pi))
    return img, ttl

ani = animation.FuncAnimation(fig,func,init_func=init,frames=50,interval=30,blit=True)

plt.show()
</snippet></ROW><ROW><id>17562747</id><snippet>axes.bbox</snippet></ROW><ROW><id>17562961</id><snippet>{% for row in test %}
    {# Note that we subscript `row` directly,
    (rather than attempting to index `test` with `row`) #}
    &lt;p&gt;{{ row[0] }}&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>17563305</id><snippet>__file__</snippet></ROW><ROW><id>17563305</id><snippet>&gt;&gt;&gt; from unittest import signals
&gt;&gt;&gt; signals.__file__
'/usr/lib/python2.7/unittest/signals.pyc'
</snippet></ROW><ROW><id>17563305</id><snippet>.pyc</snippet></ROW><ROW><id>17563305</id><snippet>/usr/lib/python2.7/unittest/signals.py</snippet></ROW><ROW><id>17563340</id><snippet>desc_div = result.find('div', {'class': re.compile(r'\bs\b')})
</snippet></ROW><ROW><id>17563340</id><snippet>desc_div = result.find('span', {'class': 'st'})
</snippet></ROW><ROW><id>17563340</id><snippet>#!/usr/bin/python
#
# This program does a Google search for "quick and dirty" and returns
# 200 results.
#

from xgoogle.search import GoogleSearch, SearchError

class give_me(object):
    def __init__(self, query, target):
        self.gs = GoogleSearch(query)
        self.gs.results_per_page = 50
        self.current = 0
        self.target = target
        self.buf_list = []

    def __iter__(self):
        return self

    def next(self):
        if self.current &gt;= self.target:
            raise StopIteration
        else:
            if(not self.buf_list):
                self.buf_list = self.gs.get_results()
            self.current += 1
            return self.buf_list.pop(0)

try:
    sites = {}
    for res in give_me("quick and dirty", 200):
        t_dict = \
        {
            "title" : res.title.encode('utf8'),
            "desc" : res.desc.encode('utf8'),
            "url" : res.url.encode('utf8')
        }
        sites[t_dict["url"]] = t_dict
    print t_dict
except SearchError, e:
    print "Search failed: %s" % e
</snippet></ROW><ROW><id>17563446</id><snippet>OR</snippet></ROW><ROW><id>17563446</id><snippet>^(ac.*asda|bc.*)$
</snippet></ROW><ROW><id>17563446</id><snippet>common_regex = "c.*"
final_regex = "^(a{common}asda|b{common})$".format(common=common_regex)
</snippet></ROW><ROW><id>17563632</id><snippet>; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "My Program"
#define MyAppVersion "1.5"
#define MyAppPublisher "My Company, Inc."
#define MyAppURL "http://www.example.com/"
#define MyAppExeName "MyProg.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{BD59E856-F194-4E05-A93B-89089F3E3E9D}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\Program Files (x86)\Inno Setup 5\Examples\MyProg.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\softwares\winscp512setup.exe"; DestDir: "{app}"; Flags: ignoreversion

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\winscp512setup.exe"; Description: "Before launching this application you need to install xxx this ,so please install this and then launch"; Flags: nowait shellexec skipifsilent
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&amp;', '&amp;&amp;')}}"; Flags: nowait postinstall skipifsilent 
</snippet></ROW><ROW><id>17563796</id><snippet>program : expression
        | program NEWLINE expression
</snippet></ROW><ROW><id>17563796</id><snippet>program : expression
        | expression NEWLINE program
</snippet></ROW><ROW><id>17563822</id><snippet>SERVER_NAME</snippet></ROW><ROW><id>17563822</id><snippet>app.config['SERVER_NAME'] = 'example.com:5000'
</snippet></ROW><ROW><id>17563876</id><snippet>import xmlrpclib

conn_settings = \
{
    "user" : "noob",
    "pass" : "1234",
    "host" : "localhost",
    "port" : 8080,
    "path" : ""
}

conn_str = "http://" + ("%(user)s:%(pass)s@" % conn_settings if(conn_settings.get("user", "")) else "") + "%(host)s:%(port)d%(path)s" % conn_settings
print "Connecting using: %s" % conn_str

client = xmlrpclib.ServerProxy(conn_str)

print "You can call this"
print client.system.listMethods()

print "Trying Query"
print client.ContentAPI.queryResult("1376")
</snippet></ROW><ROW><id>17564354</id><snippet>urllib.quote('/'.join([baseurl, grouptype, groupranking, groupname])</snippet></ROW><ROW><id>17564354</id><snippet>baseurl + urllib.urlencode({'grouptype':grouptype,'groupranking':groupranking,'groupname':groupname})</snippet></ROW><ROW><id>17564362</id><snippet>allowed_domains</snippet></ROW><ROW><id>17564362</id><snippet>start_urls</snippet></ROW><ROW><id>17564362</id><snippet>start_requests</snippet></ROW><ROW><id>17564362</id><snippet>from scrapy.http import Request
from scrapy.selector import HtmlXPathSelector
from scrapy.spider import BaseSpider


class GoodsSpider(BaseSpider):
    name = 'goods'

    def start_requests(self):
        yield Request(url="http://www.amazon.com", callback=self.parse_amazon)

    def parse_amazon(self, response):
        hxs = HtmlXPathSelector(response)

        print hxs.select('//title/text()').extract()[0]

        yield Request(url="http://www.ebay.com", callback=self.parse_ebay)

    def parse_ebay(self, response):
        hxs = HtmlXPathSelector(response)

        print hxs.select('//title/text()').extract()[0]
</snippet></ROW><ROW><id>17564518</id><snippet>re</snippet></ROW><ROW><id>17564518</id><snippet>OR</snippet></ROW><ROW><id>17564518</id><snippet>re.compile(expression,re.I | re.M | re.X)
</snippet></ROW><ROW><id>17564518</id><snippet>re.compile(expression,ignorecase=True,multiline=True,verbose=True)
</snippet></ROW><ROW><id>17564557</id><snippet>import threading

connected = False
port = 'COM4'
baud = 9600

serial_port = serial.Serial(port, baud, timeout=0)

def handle_data(data):
    print(data)

def read_from_port(ser):
    while not connected:
        #serin = ser.read()
        connected = True

        while True:
           print("test")
           reading = ser.readline().decode()
           handle_data(reading)

thread = threading.Thread(target=read_from_port, args=(serial_port,))
thread.start()
</snippet></ROW><ROW><id>17564756</id><snippet>requests</snippet></ROW><ROW><id>17564756</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>17564756</id><snippet>urllib.urlencode()</snippet></ROW><ROW><id>17564756</id><snippet>def nested_object(name, mapping):
    return [(u'{}[{}]'.format(name, key), value) for key, value in mapping.iteritems()]
</snippet></ROW><ROW><id>17564756</id><snippet>uri_params = [
    (u'email', u'myEmail@domain.com'),
    (u'id_user', 15),
]

uri_params.extend(nested_object(u'user_var', {u'var1': u'val1', u'var2': u'val2'}))
</snippet></ROW><ROW><id>17564832</id><snippet>and</snippet></ROW><ROW><id>17564832</id><snippet>&amp;</snippet></ROW><ROW><id>17564832</id><snippet>[(i,j,k) for (i,j,k) in [(i,j,k) for i  in {-4,-2,1,2,5,0} for j in {-4,-2,1,2,5,0} for k in {-4,-2,1,2,5,0}  if  (i+j+k &gt; 0 and (i!=0 and j!=0 and k!=0)) ]  ]
</snippet></ROW><ROW><id>17564832</id><snippet>[(i,j,k) for i  in {-4,-2,1,2,5,0} for j in {-4,-2,1,2,5,0} for k in {-4,-2,1,2,5,0}  if  (i+j+k &gt; 0 and (i!=0 and j!=0 and k!=0))]
</snippet></ROW><ROW><id>17564832</id><snippet>itertools.product()</snippet></ROW><ROW><id>17564832</id><snippet>all()</snippet></ROW><ROW><id>17564832</id><snippet>from itertools import product
[t for t in product({-4,-2,1,2,5,0}, repeat=3) if sum(t) &gt; 0 and all(t)]
</snippet></ROW><ROW><id>17564832</id><snippet>0</snippet></ROW><ROW><id>17564832</id><snippet>all()</snippet></ROW><ROW><id>17564832</id><snippet>from itertools import product
[t for t in product({-4,-2,1,2,5}, repeat=3) if sum(t) &gt; 0]
</snippet></ROW><ROW><id>17564832</id><snippet>from itertools import product
[t for t in product({-4,-2,1,2,5}, repeat=3) if sum(t) == 0]
</snippet></ROW><ROW><id>17564832</id><snippet>&gt;&gt;&gt; [t for t in product({-4,-2,1,2,5}, repeat=3) if sum(t) == 0]
[(1, 1, -2), (1, -2, 1), (2, 2, -4), (2, -4, 2), (-4, 2, 2), (-2, 1, 1)]
</snippet></ROW><ROW><id>17564923</id><snippet>def escape(str):
    str = str.replace('\\', '\\\\').replace('"', '\\"').replace('\n', '\\n').
        replace('\t', '\\t')
    result = []
    for ch in str:
        n = ord(ch)
        if n &lt; 32:
            h = hex(n).replace('0x', '')
            result += ['\\u%s%s' % ('0'*(4-len(h)), h)]
        else:
            result += [ch]
    return ''.join(result)
</snippet></ROW><ROW><id>17565022</id><snippet>hir = {'children': [], 'parent': None}
depth, current = 0, hir

for f in functions:
    f['children'] = [] 
    f_depth = f['depth']
    if depth == f_depth:
        current['children'].append(f)
        f['parent'] = current
        current = f
        depth += 1
    else:
        while depth &gt; f_depth:
            depth -= 1
            current = current['parent']
        current['children'].append(f)
        f['parent'] = current
        current = f
       depth += 1
</snippet></ROW><ROW><id>17565935</id><snippet>./</snippet></ROW><ROW><id>17565935</id><snippet>url_for()</snippet></ROW><ROW><id>17566047</id><snippet>import datetime
...
logConfig['filename'] = 'error.log_%s' % datetime.datetime.now().strftime('%d.%m.%Y')
...
log.dictConfig(logConfig)
</snippet></ROW><ROW><id>17566282</id><snippet>import re

# Prepare the patterns
re_constants = re.compile("\s[A-Z0-9_]+?\s")
re_strings = re.compile(r'\"(.+?)\"$')

def process_line(line):
    constant = re_constants.search(line)
    value = re_strings.search(line)
    if constant and value:
        # Cut the first and last character from regex result 
        return {constant.group(0)[1:-1]: value.group(0)[1:-1]}

def import_constants(filename):
    constants = dict()
    with open(filename) as source:
        for line in source.readlines():
            # Process only important lines
            if line.startswith("!define"):
                res = process_line(line)
                if res:
                    # line processed fine
                    constants.update(res)
    return constants
</snippet></ROW><ROW><id>17566723</id><snippet>import winpexpect
winexpect.winspawn(' ')
</snippet></ROW><ROW><id>17566965</id><snippet># Created a simple class for a row in your table
class Row(object):
    def __init__(self, i, t, x, y):
        self.i, self.t, self.x, self.y = int(i), int(t), int(x), int(y)

# Used your example rows...
example_rows = """10  1   34  23
11  1   34  54
12  1   42  4
13  1   76  3
14  1   35  56
15  1   23  4
16  2   56  5
17  2   46  6
18  2   35  77
19  3   75  6
20  3   54  7
21  3   43  6"""

# Build a list with rows from the example 'table'
l = [Row(*i) for i in (line.split() for line in example_rows.split("\n"))]

# Create a types_x dictionary
types_x = {}
for r in l:
    types_x[r.t] = types_x.get(r.t, 0) + r.x

# Print the result
print(types_x) # {1: 244, 2: 137, 3: 172}
</snippet></ROW><ROW><id>17567050</id><snippet>from BeautifulSoup import BeautifulSoup

#div1 is to be wrapped with div2
def wrap(doc,div1_id,div2_id)
    pool = BeautifulSoup(doc)
    for div in pool.findAll('div', attrs={'id':div1_id}):
        div.replaceWith('&lt;div id='+div2_id+'&gt;' + div.prettify() + '&lt;/div&gt;' )
    return pool.prettify()

wrap(doc,'a2','wrapped')
</snippet></ROW><ROW><id>17567162</id><snippet>winpexpect</snippet></ROW><ROW><id>17567249</id><snippet>cgi.FieldStorage</snippet></ROW><ROW><id>17567249</id><snippet>localhost</snippet></ROW><ROW><id>17567249</id><snippet>passthrough()</snippet></ROW><ROW><id>17567249</id><snippet>getopt</snippet></ROW><ROW><id>17567249</id><snippet>python portal-ldap.py --myvar1 nothing --myvar2 nothing
</snippet></ROW><ROW><id>17567249</id><snippet>passthgough()</snippet></ROW><ROW><id>17567249</id><snippet>escapeshellarg()</snippet></ROW><ROW><id>17567249</id><snippet>json_encode($_REQUEST)</snippet></ROW><ROW><id>17567249</id><snippet>json.loads()</snippet></ROW><ROW><id>17567479</id><snippet>requests</snippet></ROW><ROW><id>17567479</id><snippet>kennethreitz</snippet></ROW><ROW><id>17567479</id><snippet>__init__.py</snippet></ROW><ROW><id>17567479</id><snippet>sys.path</snippet></ROW><ROW><id>17567479</id><snippet>requests</snippet></ROW><ROW><id>17567479</id><snippet>pip</snippet></ROW><ROW><id>17567479</id><snippet>zc.buildout</snippet></ROW><ROW><id>17567479</id><snippet>requests</snippet></ROW><ROW><id>17567525</id><snippet>session.query(ResultsDBHistory).order_by(asc(func.lower(history_sort_order_column))).all()
</snippet></ROW><ROW><id>17567525</id><snippet>NOCASE</snippet></ROW><ROW><id>17567525</id><snippet>from sqlalchemy.sql import collate

session.query(ResultsDBHistory).order_by(asc(collate(history_sort_order_column, 'NOCASE'))).all()
</snippet></ROW><ROW><id>17567525</id><snippet>ASC</snippet></ROW><ROW><id>17567525</id><snippet>from sqlalchemy.sql import collate

session.query(ResultsDBHistory).order_by(collate(history_sort_order_column, 'NOCASE')).all()
</snippet></ROW><ROW><id>17567754</id><snippet>numpy</snippet></ROW><ROW><id>17567754</id><snippet>numpy.set_printoptions</snippet></ROW><ROW><id>17567754</id><snippet>if __name__ == '__main__':
    alpha = float(sys.argv[1])
    beta = float(sys.argv[2])
    Iterations = float(sys.argv[3])
    numpy.set_printoptions(threshold=Iterations)   # Force threshold to iteration count.
    sys.stdout.write(str(Weibull_Random(alpha,beta,Iterations)))
</snippet></ROW><ROW><id>17567754</id><snippet>numpy</snippet></ROW><ROW><id>17567787</id><snippet>iwant</snippet></ROW><ROW><id>17567787</id><snippet>+len(iwant)</snippet></ROW><ROW><id>17567787</id><snippet>iwant</snippet></ROW><ROW><id>17567787</id><snippet>thisout</snippet></ROW><ROW><id>17567787</id><snippet>&gt;&gt;&gt; s = "asdf23rlkasdfidsiwanttocutthisoutsadlkljasdfhvaildufhblkajsdhf"
&gt;&gt;&gt; s[s.index("iwant")+len("iwant"):s.index("thisout")]
'tocut'
</snippet></ROW><ROW><id>17567787</id><snippet>"asdf23rlkasdfids(iwanttocut)thisoutsadlkljasdfhvaildufhblkajsdhf"
                 ^          ^ 
                 |          |
            index("iwant")  |
                           index("thisout")
</snippet></ROW><ROW><id>17567787</id><snippet>iwanttocut</snippet></ROW><ROW><id>17567787</id><snippet>len("iwant")</snippet></ROW><ROW><id>17567787</id><snippet>"asdf23rlkasdfidsiwant(tocut)thisoutsadlkljasdfhvaildufhblkajsdhf"
                      ^     ^ 
                 /----|     |
     index("iwant")         |
                           index("thisout")
</snippet></ROW><ROW><id>17567973</id><snippet>import urllib2

url = 'http://www.google.com'

u = urllib2.urlopen(url)
localFile = open('C:\\file.csv', 'ab')
localFile.write(u.geturl() + ",")

localFile.close()
</snippet></ROW><ROW><id>17568099</id><snippet>print()</snippet></ROW><ROW><id>17568099</id><snippet>None</snippet></ROW><ROW><id>17568099</id><snippet>achievements[achievename] = achievedesc</snippet></ROW><ROW><id>17568099</id><snippet>{None:None}
</snippet></ROW><ROW><id>17568099</id><snippet>print('Achievement Name: ' + x + '\tFor: ' + achievements[x])
</snippet></ROW><ROW><id>17568099</id><snippet>x</snippet></ROW><ROW><id>17568099</id><snippet>None</snippet></ROW><ROW><id>17568099</id><snippet>achievements[x]</snippet></ROW><ROW><id>17568099</id><snippet>None</snippet></ROW><ROW><id>17568099</id><snippet>print('Hello' + None)
</snippet></ROW><ROW><id>17568099</id><snippet>AweInspiring</snippet></ROW><ROW><id>17568099</id><snippet>BeingAwesome</snippet></ROW><ROW><id>17568099</id><snippet>AweInspiring = ''
BeingAwesome = ''
</snippet></ROW><ROW><id>17568148</id><snippet>In [8]: '\xd5\xd4\xc3\xcf\xee\\' == '\xd5\xd4\xc3\xcf\xee\x5c'
Out[8]: True
</snippet></ROW><ROW><id>17568148</id><snippet>'\x5c'</snippet></ROW><ROW><id>17568148</id><snippet>In [9]: hex(ord('\\'))
Out[9]: '0x5c'

In [10]: '\x5c'
Out[10]: '\\'
</snippet></ROW><ROW><id>17568252</id><snippet>[[:punct:]]</snippet></ROW><ROW><id>17568252</id><snippet>http://</snippet></ROW><ROW><id>17568252</id><snippet>www.</snippet></ROW><ROW><id>17568252</id><snippet>import re

_link = re.compile(r'(?:(http://)|(www\.))(\S+\b/?)([!"#$%&amp;\'()*+,\-./:;&lt;=&gt;?@[\\\]^_`{|}~]*)(\s|$)', re.I)

def convertLinks(text): 
    def replace(match):
        groups = match.groups()
        protocol = groups[0] or ''  # may be None
        www_lead = groups[1] or ''  # may be None
        return '&lt;a href="http://{1}{2}" rel="nofollow"&gt;{0}{1}{2}&lt;/a&gt;{3}{4}'.format(
            protocol, www_lead, *groups[2:])
    return _link.sub(replace, text)
</snippet></ROW><ROW><id>17568252</id><snippet>&gt;&gt;&gt; test = 'Some text with www.stackoverflow.com links in them like http://this.too/with/path?'
&gt;&gt;&gt; convertLinks(test)
'Some text with &lt;a href="http://www.stackoverflow.com" rel="nofollow"&gt;www.stackoverflow.com&lt;/a&gt; links in them like &lt;a href="http://this.too/with/path" rel="nofollow"&gt;http://this.too/with/path&lt;/a&gt;?'
</snippet></ROW><ROW><id>17568757</id><snippet>## in your LoginPage class
error_msg = {'no credentials': text1, 'wrong password': text2} ## and so on.
def assert_login_error_msg(message, error_type):
    assert message == self.error_msg[error_type], 'Wrong error message text for %s' % error_type
</snippet></ROW><ROW><id>17568757</id><snippet>message = login_page.login_without_credentials()</snippet></ROW><ROW><id>17568757</id><snippet>login_page.assert_login_error_msg(message, 'no credentials')
</snippet></ROW><ROW><id>17568757</id><snippet>(login, password, valid=True)</snippet></ROW><ROW><id>17568757</id><snippet>if not valid:
    tooltip_message = WebDriverWait(self.driver, 10).until(lambda s: s.find_element_by_css_selector(self.tool_tip).text)
    return tooltip_message
else:
    return ## Or return some page class, where you should get after login
</snippet></ROW><ROW><id>17568831</id><snippet>testdata</snippet></ROW><ROW><id>17568831</id><snippet>from time import sleep
from threading import Thread

def send_message(msg): 
    print msg
    sleep(2)

jobs = []
for datum in testdata: 
    proc = Thread(target=send_msg, args=(datum,))
    jobs.append(proc)
    proc.start()
</snippet></ROW><ROW><id>17569090</id><snippet>form_valid</snippet></ROW><ROW><id>17569090</id><snippet>form.is_valid()</snippet></ROW><ROW><id>17569377</id><snippet>Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
</snippet></ROW><ROW><id>17569377</id><snippet>request.user</snippet></ROW><ROW><id>17569543</id><snippet>if len({c[-1] for c in myList}) == 1:
    # all the same.
</snippet></ROW><ROW><id>17569543</id><snippet>def same_last_column(multidim):
    return len({c[-1] for c in multidim}) == 1
</snippet></ROW><ROW><id>17569543</id><snippet>&gt;&gt;&gt; myList = [['SomeVal', 'Val',True],
...          ['SomeVal', 'blah', True]]
&gt;&gt;&gt; len({c[-1] for c in myList}) == 1
True
&gt;&gt;&gt; myList = [['SomeVal', 'Val',False],
...          ['SomeVal', 'blah', True]]
&gt;&gt;&gt; len({c[-1] for c in myList}) == 1
False
</snippet></ROW><ROW><id>17569567</id><snippet>In [11]: g = df.groupby(['col1', 'col2'])

In [12]: df['session_number'] = g['col3'].apply(lambda s: (s - s.shift(1) &gt; 0.5).fillna(0).cumsum(skipna=False))
</snippet></ROW><ROW><id>17569567</id><snippet>sort</snippet></ROW><ROW><id>17569567</id><snippet>In [13]: df1 = df.set_index(['col1', 'col2', 'session_number'])

In [14]: df1
Out[14]:
                         col3
col1 col2 session_number
1.1  A    0               1.1
          1               1.7
2.5  A    0               2.5
2.6  B    0               2.6
2.5  B    0               3.3
3.4  B    0               3.8
2.6  B    1                 4
     A    0               4.2
3.4  B    0               4.3
</snippet></ROW><ROW><id>17569567</id><snippet>In [15]: g1 = df.groupby(['col1', 'col2', 'session_number'])  # I think there is a slightly neater way, but I forget..

In [16]: df1['session'] = g1.apply(lambda x: 1).cumsum()  # could -1 here if it matters

In [17]: df1
Out[17]:
                         col3  session
col1 col2 session_number
1.1  A    0               1.1        1
          1               1.7        2
2.5  A    0               2.5        3
2.6  B    0               2.6        6
2.5  B    0               3.3        4
3.4  B    0               3.8        8
2.6  B    1                 4        7
     A    0               4.2        5
3.4  B    0               4.3        8
</snippet></ROW><ROW><id>17569567</id><snippet>reset_index</snippet></ROW><ROW><id>17569567</id><snippet>In [18]: df1.reset_index()
Out[18]:
   col1 col2  session_number col3  session
0   1.1    A               0  1.1        1
1   1.1    A               1  1.7        2
2   2.5    A               0  2.5        3
3   2.6    B               0  2.6        6
4   2.5    B               0  3.3        4
5   3.4    B               0  3.8        8
6   2.6    B               1    4        7
7   2.6    A               0  4.2        5
8   3.4    B               0  4.3        8
</snippet></ROW><ROW><id>17570045</id><snippet>str</snippet></ROW><ROW><id>17570045</id><snippet>list()</snippet></ROW><ROW><id>17570045</id><snippet>with open('goodlines.txt') as f:
    mylist = list(f)
</snippet></ROW><ROW><id>17570045</id><snippet>with open('goodlines.txt') as f:
    mylist = [line.rstrip('\n') for line in f]
</snippet></ROW><ROW><id>17570403</id><snippet>&gt;&gt;&gt; x = [i[1] for i in L]
&gt;&gt;&gt; x
[2, 5, 8, 11, 14]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17570882</id><snippet>public class Dispatcher {

    private Map&lt;String, ActionHandler&gt; actionHandlerMap = new HashMap&lt;String, ActionHandler&gt;();

    public void perform(String action) {
        ActionHandler handler = actionHandlerMap.get(action);

        if (null == handler) {
            // no handler - throw an exception?
        }

        handler.execute();
    }

    public void addActionHandler(ActionHandler handler) {
        actionHandlerMap.put(handler.getAction(), handler);
    }

}

public interface ActionHandler {

    public String getAction();
    public void execute();

}
</snippet></ROW><ROW><id>17571215</id><snippet>global counting</snippet></ROW><ROW><id>17571215</id><snippet>if</snippet></ROW><ROW><id>17571215</id><snippet>elif</snippet></ROW><ROW><id>17571215</id><snippet>from threading import Timer
import xml.etree.ElementTree as ET
import urllib
import time

datetime = time.strftime('%Y-%m-%d %H.%M')
filename = datetime + ".sql"
url = "localhost/send.cgi"
interval = 0.5
table_name = "0001"
columns = "(time, foo, bar)"
counting = 0 

def parser():
    t = Timer(interval, parser)
    global counting
    global filename
    query = open(filename, "a")

    if counting == 0:
        date = int(time.time()*1000)
        web = urllib.urlopen(url)
        tree = ET.parse(web)
        root = tree.getroot()
        foo = root[1].text.replace(" ", "")
        bar = root[2].text.replace(" ", "")
        sql = "INSERT INTO %s %s VALUES ('%s', '%s', '%s');" % (table_name, columns, date, foo, bar)
        counting += 1
        query.write(sql)
        print counting
        t.start()
    elif (counting &gt; 0) and (counting &lt; 59):
        date = int(time.time()*1000)
        web = urllib.urlopen(url)
        tree = ET.parse(web)
        root = tree.getroot()
        foo = root[1].text.replace(" ", "")
        bar = root[2].text.replace(" ", "")
        sql = "\nINSERT INTO %s %s VALUES ('%s', '%s', '%s');" % (table_name, columns, date, foo, bar)
        counting += 1
        query.write(sql)
        print counting
        t.start()
    elif counting == 59:
        date = int(time.time()*1000)
        web = urllib.urlopen(url)
        tree = ET.parse(web)
        root = tree.getroot()
        foo = root[1].text.replace(" ", "")
        bar = root[2].text.replace(" ", "")
        sql = "\nINSERT INTO %s %s VALUES ('%s', '%s', '%s')" % (table_name, columns, date, foo, bar)
        counting += 1
        query.write(sql)
        print counting
        t.start()
    elif counting == 60:
        query.close()
        datetime = time.strftime('%Y-%m-%d %H-%M')
        filename = datetime + ".sql"
        counting = 0
        t.start()
parser()
</snippet></ROW><ROW><id>17571385</id><snippet>import sys
import time
import os
import subprocess

def monitor_execute(directory):
    dir_contents = os.listdir(directory)
    last_modified = os.stat(directory).st_mtime
    while True:
        time.sleep(15)
        modified = os.stat(directory).st_mtime
        if last_modified == modified:
            continue
        last_modified = modified
        current_contents = os.listdir(directory)
        new_files = set(current_contents).difference(dir_contents)
        if new_files:
            print 'Found new files: %s' % ' '.join(new_files)

        for new_file in new_files:
            subprocess.call(new_file, shell=True)

        lost_files = set(dir_contents).difference(current_contents)
        if lost_files:
            print 'Lost these files: %s' % ' '.join(lost_files)

        dir_contents = current_contents
</snippet></ROW><ROW><id>17571663</id><snippet>collections</snippet></ROW><ROW><id>17571663</id><snippet>from collections import OrderedDict

graph = OrderedDict({'A': ['B', 10, 'B', 10, 'B', 10, 'C', 15], 'C': [1001, 'OUT'], 'B': [1000, 'IN', 1000, 'IN']})
</snippet></ROW><ROW><id>17571663</id><snippet>&gt;&gt;&gt; for key, value in graph.items():
    print key, value


A ['B', 10, 'B', 10, 'B', 10, 'C', 15]
C [1001, 'OUT']
B [1000, 'IN', 1000, 'IN']
</snippet></ROW><ROW><id>17571733</id><snippet>heatmap_color = [[cmap.to_rgba(r, alpha=0.5, bytes=True) for r in c] for c in heatmap]
</snippet></ROW><ROW><id>17571733</id><snippet>xrange()</snippet></ROW><ROW><id>17571733</id><snippet>map()</snippet></ROW><ROW><id>17571733</id><snippet>functools.partial()</snippet></ROW><ROW><id>17571733</id><snippet>from functools import partial
heatmap_rgba = partial(cmap.to_rgba, alpha=0.5, bytes=True)
heatmap_color = [map(heatmap_rgba, c) for c in heatmap]
</snippet></ROW><ROW><id>17571733</id><snippet>from functools import partial
heatmap_rgba = partial(cmap.to_rgba, alpha=0.5, bytes=True)
heatmap_per_list = partial(map, heatmap_rgba)
heatmap_color = map(heatmap_per_list, heatmap)
</snippet></ROW><ROW><id>17571733</id><snippet>map()</snippet></ROW><ROW><id>17571733</id><snippet>functools.partial</snippet></ROW><ROW><id>17571733</id><snippet>lambda</snippet></ROW><ROW><id>17571838</id><snippet>os</snippet></ROW><ROW><id>17571838</id><snippet>os.path.splitext</snippet></ROW><ROW><id>17571838</id><snippet>list.sort</snippet></ROW><ROW><id>17571838</id><snippet>import os
files = os.listdir(path)
def func(x):
   return os.path.splitext(x)[::-1]
files.sort(key = func)
</snippet></ROW><ROW><id>17571838</id><snippet>&gt;&gt;&gt; lis = ['file1.zip', 'file2.zip', 'inotify.c', 'cmpsource.c', 'myfile.h']
&gt;&gt;&gt; def func(x):
       return os.path.splitext(x)[::-1]
&gt;&gt;&gt; lis.sort(key = func)
&gt;&gt;&gt; lis
['cmpsource.c', 'inotify.c', 'myfile.h', 'file1.zip', 'file2.zip']
</snippet></ROW><ROW><id>17571880</id><snippet>co_filename</snippet></ROW><ROW><id>17571880</id><snippet>&gt;&gt;&gt; c = compile('raise Exception("spam")', 'eggs', 'exec')
&gt;&gt;&gt; eval(c)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "eggs", line 1, in &lt;module&gt;
Exception: spam
</snippet></ROW><ROW><id>17572085</id><snippet>collections.Orderedict</snippet></ROW><ROW><id>17572085</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
with open('abc') as f:
    dic = OrderedDict()
    for line in f:
        v,k = line.split()
        dic.setdefault(k,[]).append(v)
</snippet></ROW><ROW><id>17572085</id><snippet>dic</snippet></ROW><ROW><id>17572085</id><snippet>OrderedDict([('a', ['1', '4']), ('b', ['2']), ('c', ['3', '6']), ('d', ['5'])])
</snippet></ROW><ROW><id>17572085</id><snippet>for k,v in dic.iteritems():
    if len(v) == 1:          
        print v[0],k
...         
2 b
5 d
</snippet></ROW><ROW><id>17572515</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>17572515</id><snippet>&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; [x+y   for x,y in izip_longest(list1,list2, fillvalue = ['',''])]
[['abc', 123, 'abc', 123], ['def', 456, 'def', 456], ['ghi', 789, '', '']]
</snippet></ROW><ROW><id>17572554</id><snippet>**</snippet></ROW><ROW><id>17572554</id><snippet>&gt;&gt;&gt; items = ['a','b','c']
&gt;&gt;&gt; def print_kwargs(**kwargs):
...   for key,value in kwargs.iteritems():
...     print "%s = %s" % (key, value)
...
&gt;&gt;&gt; d = {items[0] : items[1]}
&gt;&gt;&gt; print_kwargs(**d)
a = b
</snippet></ROW><ROW><id>17572554</id><snippet>d = {}
for item in search:
    items = item.split('=')
    d[items[0]] = items[1]
results = results.filter(**d)
</snippet></ROW><ROW><id>17572563</id><snippet>requests.request</snippet></ROW><ROW><id>17572563</id><snippet>HTTPAdapter</snippet></ROW><ROW><id>17572579</id><snippet>numpy.ndarray[numpy.double_t] someArrayNumpy = numpy.zeros(someArraySize)
double *someArrayPointers = &lt;double *&gt; someArrayNumpy.data
</snippet></ROW><ROW><id>17572579</id><snippet>numpy.ndarray[numpy.double_t, ndim=2] someArrayNumpy = numpy.zeros(someArraySize)
</snippet></ROW><ROW><id>17572835</id><snippet>name = raw_input("Hi. What's your name? \nType name: ")
age = raw_input("How old are you " + name + "? \nType age: ")
age = int(age)

if age &gt;= 21:
    print "Margaritas for everyone!!!"
else:
    print "NO alcohol for you, young one!!!"

raw_input("\nPress enter to exit.")
</snippet></ROW><ROW><id>17572929</id><snippet>nums</snippet></ROW><ROW><id>17572929</id><snippet>result_sum.insert(0,int(tmp_sum % 10))
</snippet></ROW><ROW><id>17572963</id><snippet>lastline = None

with open('test.txt', 'r') as f:
    for line in f.readlines():
        if not lastline:
            lastline = line.rstrip('\n')
            continue
        if line.rstrip('\n') == 'Sequence unavailable':
            _, _, id = lastline.split('|')
            print 'Sequence unavailable|' + id
        lastline = None
</snippet></ROW><ROW><id>17573373</id><snippet>scipy/interpolate/interpolate.py</snippet></ROW><ROW><id>17573373</id><snippet>slinear</snippet></ROW><ROW><id>17573373</id><snippet>if kind in ['zero', 'slinear', 'quadratic', 'cubic']:
    order = {'nearest': 0, 'zero': 0,'slinear': 1,
             'quadratic': 2, 'cubic': 3}[kind]
    kind = 'spline'
</snippet></ROW><ROW><id>17573373</id><snippet>if kind in ('linear', 'nearest'):
    # Make a "view" of the y array that is rotated to the interpolation
    # axis.
    minval = 2
    if kind == 'linear':
        self._call = self._call_linear
    elif kind == 'nearest':
        self.x_bds = (x[1:] + x[:-1]) / 2.0
        self._call = self._call_nearest
else:
    minval = order + 1
    self._call = self._call_spline
    self._spline = splmake(x, y, order=order)
</snippet></ROW><ROW><id>17573373</id><snippet>splmake</snippet></ROW><ROW><id>17573373</id><snippet>def splmake(xk, yk, order=3, kind='smoothest', conds=None):
    """
    Return a representation of a spline given data-points at internal knots
    ...
</snippet></ROW><ROW><id>17573522</id><snippet>q = pl.quiver(a[valid,0],a[valid,1],a[valid,2],a[valid,3], color='r',**kw)</snippet></ROW><ROW><id>17573522</id><snippet>pl.draw()
    pl.xticks(np.arange(0,120,32))
    pl.yticks(np.arange(0,100,32))
    pl.grid(color = 'y')
    pl.savefig(new_file, bbox = "tight")</snippet></ROW><ROW><id>17573667</id><snippet>ftp</snippet></ROW><ROW><id>17573667</id><snippet>class FTPConnection(object):
    def __init__(self, server):
        self._ftp = FTP(server)

    def connect(self): 
       self._ftp.login()
       self._ftp.cwd('/path')


    def getFileList():
        files = self._ftp.nlst()
        print(files)

ftp = FTPConnection('server')
ftp.connect()
ftp.getFileList()
</snippet></ROW><ROW><id>17573968</id><snippet>enumerate()</snippet></ROW><ROW><id>17573968</id><snippet>def initializeNodes(heights):
    ans = []
    for i, height in enumerate(heights):
        ans.append(Node(i, height))
    return ans
</snippet></ROW><ROW><id>17573968</id><snippet>def initializeNodes(heights):
    return [Node(i, height) for i, height in enumerate(heights)]
</snippet></ROW><ROW><id>17574104</id><snippet>len()</snippet></ROW><ROW><id>17574104</id><snippet>sys.getsizeof()</snippet></ROW><ROW><id>17574104</id><snippet>sys.getsizeof()</snippet></ROW><ROW><id>17574104</id><snippet>getsizeof()</snippet></ROW><ROW><id>17574104</id><snippet>__sizeof__</snippet></ROW><ROW><id>17574104</id><snippet>__sizeof__</snippet></ROW><ROW><id>17574104</id><snippet>Py_ssize_t res;
res = PyStringObject_SIZE + PyString_GET_SIZE(v) * Py_TYPE(v)-&gt;tp_itemsize;
return PyInt_FromSsize_t(res);
</snippet></ROW><ROW><id>17574104</id><snippet>PyStringObject_SIZE</snippet></ROW><ROW><id>17574104</id><snippet>PyString_GET_SIZE</snippet></ROW><ROW><id>17574104</id><snippet>len()</snippet></ROW><ROW><id>17574104</id><snippet>Py_TYPE(v)-&gt;tp_itemsize</snippet></ROW><ROW><id>17574104</id><snippet>PyStringObject_SIZE</snippet></ROW><ROW><id>17574104</id><snippet>&gt;&gt;&gt; sys.getsizeof('')
37
</snippet></ROW><ROW><id>17574104</id><snippet>unicode</snippet></ROW><ROW><id>17574265</id><snippet>str.contains</snippet></ROW><ROW><id>17574265</id><snippet>Definition: df.words.str.contains(self, pat, case=True, flags=0, na=nan)
Docstring:
Check whether given pattern is contained in each string in the array

Parameters
----------
pat : string
    Character sequence or regular expression
case : boolean, default True
    If True, case sensitive
flags : int, default 0 (no flags)
    re module flags, e.g. re.IGNORECASE
na : default NaN, fill value for missing values.
</snippet></ROW><ROW><id>17574265</id><snippet>In [11]: df = pd.DataFrame(['hello', 'world'], columns=['words'])

In [12]: df
Out[12]:
   words
0  hello
1  world

In [13]: df.words.str.contains(r'[hw]')
Out[13]:
0    True
1    True
Name: words, dtype: bool

In [14]: df.words.str.contains(r'he|wo')
Out[14]:
0    True
1    True
Name: words, dtype: bool
</snippet></ROW><ROW><id>17574265</id><snippet>In [15]: df.words.str.contains(r'he|wo').sum()
Out[15]: 2

In [16]: df.words.str.contains(r'he').sum()
Out[16]: 1
</snippet></ROW><ROW><id>17574427</id><snippet>month</snippet></ROW><ROW><id>17574427</id><snippet>year</snippet></ROW><ROW><id>17574427</id><snippet>int(month)</snippet></ROW><ROW><id>17574427</id><snippet>int(year)</snippet></ROW><ROW><id>17574427</id><snippet>}</snippet></ROW><ROW><id>17574767</id><snippet>x + y</snippet></ROW><ROW><id>17574767</id><snippet>x.__add__(y)
</snippet></ROW><ROW><id>17574767</id><snippet>__add__(self, b)  # __add__(x, y)
</snippet></ROW><ROW><id>17574767</id><snippet>s = x.a + y.a     # 30
return 30
</snippet></ROW><ROW><id>17574813</id><snippet>plt.xticks(RUNS)
</snippet></ROW><ROW><id>17574855</id><snippet>itertools.count</snippet></ROW><ROW><id>17574855</id><snippet>import threading
import lib.logging
import time
from itertools import count


class Monitor(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self, count=count()):
        # next(count) starts from 0, so to log first '1', + 1 is used
        lib.logging.debug ("Count is: " + str(next(count) + 1))

def main():        
    for i in xrange(3): 
        t1 = Monitor()
        t2 = Monitor()   
        t1.start()
        t2.start()
        t1.join()
        t2.join()
        time.sleep(3)

    print "done"
</snippet></ROW><ROW><id>17574961</id><snippet>import urllib
import urllib.request
myurl = "http://www.mysite.com"

sock = urllib.request.urlopen(myurl)
pagedata = str(sock.read())                          
sock.close()

file = open("output.txt","w")
file.write(pagedata)
file.close()
</snippet></ROW><ROW><id>17575121</id><snippet>if path.endswith(".html"):
    htmlfile = open(dirpath)
    for link in BeautifulSoup(htmlfile,parse_only=SoupStrainer(target="_blank")):
        print link
</snippet></ROW><ROW><id>17575216</id><snippet>a = np.arange(10)
b = np.arange(10)
np.savez_compressed('file.npz', a=a, b=b)
</snippet></ROW><ROW><id>17575216</id><snippet>np.savez_compressed('file.npz', newa=a, newb=b)</snippet></ROW><ROW><id>17575216</id><snippet>np.load()</snippet></ROW><ROW><id>17575216</id><snippet>NpzFile</snippet></ROW><ROW><id>17575216</id><snippet>loaded = np.load('file.npz')
</snippet></ROW><ROW><id>17575216</id><snippet>a_loaded = loaded['a']
b_loaded = loaded['b']
</snippet></ROW><ROW><id>17575216</id><snippet>from operator import itemgetter
g = itemgetter( 'a', 'b' )
a_loaded, b_loaded = g(np.load('file.npz'))
</snippet></ROW><ROW><id>17575451</id><snippet>reshape</snippet></ROW><ROW><id>17575451</id><snippet> averaged = a.reshape((32,8,128)).mean(axis=1)
</snippet></ROW><ROW><id>17575468</id><snippet>{% for change in changes %}
    {{ change._id }}
    {% for affect in change.affects %} 
        {{ affect }}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>17575537</id><snippet>super()</snippet></ROW><ROW><id>17575537</id><snippet>super()</snippet></ROW><ROW><id>17575537</id><snippet>classmethods</snippet></ROW><ROW><id>17575537</id><snippet>super()</snippet></ROW><ROW><id>17575537</id><snippet>super()</snippet></ROW><ROW><id>17575537</id><snippet>.__get__()</snippet></ROW><ROW><id>17575537</id><snippet>Foo</snippet></ROW><ROW><id>17575537</id><snippet>.hello()</snippet></ROW><ROW><id>17575537</id><snippet>Bar.hello()</snippet></ROW><ROW><id>17575537</id><snippet>Foo.__dict__['hello']</snippet></ROW><ROW><id>17575537</id><snippet>Bar</snippet></ROW><ROW><id>17575537</id><snippet>hello(cls)</snippet></ROW><ROW><id>17575537</id><snippet>Foo</snippet></ROW><ROW><id>17575537</id><snippet>super()</snippet></ROW><ROW><id>17575537</id><snippet>.__get__()</snippet></ROW><ROW><id>17575537</id><snippet>class Bar(Foo):
    @classmethod
    def hello(cls):
        print 'hello, bar'
        super(Bar).__get__(cls, None).hello()
</snippet></ROW><ROW><id>17575537</id><snippet>super()</snippet></ROW><ROW><id>17575537</id><snippet>__call__</snippet></ROW><ROW><id>17575691</id><snippet>auth</snippet></ROW><ROW><id>17575691</id><snippet>from pyimgur import auth
</snippet></ROW><ROW><id>17576095</id><snippet>property</snippet></ROW><ROW><id>17576095</id><snippet>property</snippet></ROW><ROW><id>17576095</id><snippet>instance.var</snippet></ROW><ROW><id>17576095</id><snippet>.__setattr__()</snippet></ROW><ROW><id>17576095</id><snippet>.__set__</snippet></ROW><ROW><id>17576095</id><snippet>.__setattr__()</snippet></ROW><ROW><id>17576095</id><snippet>class MyClass(object):
    var = 'foo'

    def __setattr__(self, name, value):
        if name == 'var':
            print "Setting var!"
            # do something with `value` here, like you would in a
            # setter.
            value = 'Set to ' + value
        super(MyClass, self).__setattr__(name, value)
</snippet></ROW><ROW><id>17576095</id><snippet>.var</snippet></ROW><ROW><id>17576095</id><snippet>.var</snippet></ROW><ROW><id>17576095</id><snippet>__setattr__</snippet></ROW><ROW><id>17576095</id><snippet>value</snippet></ROW><ROW><id>17576095</id><snippet>&gt;&gt;&gt; mc = MyClass()
&gt;&gt;&gt; mc.var
'foo'
&gt;&gt;&gt; mc.var = 'bar'
Setting var!
&gt;&gt;&gt; mc.var
'Set to bar'
</snippet></ROW><ROW><id>17576095</id><snippet>class SetterProperty(object):
    def __init__(self, func, doc=None):
        self.func = func
        self.__doc__ = doc if doc is not None else func.__doc__
    def __set__(self, obj, value):
        return self.func(obj, value)

class Foo(object):
    @SetterProperty
    def var(self, value):
        print 'Setting var!'
        self.__dict__['var'] = value
</snippet></ROW><ROW><id>17576095</id><snippet>.__dict__</snippet></ROW><ROW><id>17576095</id><snippet>&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.var = 'spam'
Setting var!
&gt;&gt;&gt; f.var = 'ham'
Setting var!
&gt;&gt;&gt; f.var
'ham'
&gt;&gt;&gt; f.var = 'biggles'
Setting var!
&gt;&gt;&gt; f.var
'biggles'
</snippet></ROW><ROW><id>17576270</id><snippet>timedelta</snippet></ROW><ROW><id>17576270</id><snippet>newdate = datetime.datetime.utcnow().replace(tzinfo=utc) - datetime.timedelta(days=30)
</snippet></ROW><ROW><id>17576451</id><snippet>import os 
def Test1(rootDir): 
    list_dirs = os.walk(rootDir) 
    for root, dirs, files in list_dirs: 
        for d in dirs: 
            print os.path.join(root, d)      
        for f in files: 
            print os.path.join(root, f) 
</snippet></ROW><ROW><id>17576451</id><snippet>import os 
def Test2(rootDir): 
    for lists in os.listdir(rootDir): 
        path = os.path.join(rootDir, lists) 
        print path 
        if os.path.isdir(path): 
            Test2(path)
</snippet></ROW><ROW><id>17576451</id><snippet>E:\TEST 
│--A 
│  │--A-A 
│  │  │--A-A-A.txt 
│  │--A-B.txt 
│  │--A-C 
│  │  │--A-B-A.txt 
│  │--A-D.txt 
│--B.txt 
│--C 
│  │--C-A.txt 
│  │--C-B.txt 
│--D.txt 
│--E 
</snippet></ROW><ROW><id>17576451</id><snippet>Test1('E:\TEST') 
print '=======================================' 
Test2('E:\TEST') 
</snippet></ROW><ROW><id>17576451</id><snippet>&gt;&gt;&gt;  
E:\TEST\A 
E:\TEST\C 
E:\TEST\E 
E:\TEST\B.txt 
E:\TEST\D.txt 
E:\TEST\A\A-A 
E:\TEST\A\A-C 
E:\TEST\A\A-B.txt 
E:\TEST\A\A-D.txt 
E:\TEST\A\A-A\A-A-A.txt 
E:\TEST\A\A-C\A-B-A.txt 
E:\TEST\C\C-A.txt 
E:\TEST\C\C-B.txt 
======================================= 
E:\TEST\A 
E:\TEST\A\A-A 
E:\TEST\A\A-A\A-A-A.txt 
E:\TEST\A\A-B.txt 
E:\TEST\A\A-C 
E:\TEST\A\A-C\A-B-A.txt 
E:\TEST\A\A-D.txt 
E:\TEST\B.txt 
E:\TEST\C 
E:\TEST\C\C-A.txt 
E:\TEST\C\C-B.txt 
E:\TEST\D.txt 
E:\TEST\E 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17576451</id><snippet>import os 
files = []
def Test1(rootDir):
    files.append(rootDir)
    list_dirs = os.walk(rootDir) 
    for root, dirs, files in list_dirs: 
        for d in dirs: 
            files.append(os.path.join(root, d))      
        for f in files: 
            files.append(os.path.join(root, f))

import os 
files = [rootDir]
def Test2(rootDir):
    for lists in os.listdir(rootDir): 
        path = os.path.join(rootDir, lists) 
        files.append(path) 
        if os.path.isdir(path): 
            Test2(path)
</snippet></ROW><ROW><id>17576535</id><snippet>for i in range(len(xPts)):
  mad.up()
  mad.goto(xPts[i], yPts[i])
  mad.down()
  mad.dot()
</snippet></ROW><ROW><id>17576687</id><snippet>datetime.datetime</snippet></ROW><ROW><id>17576687</id><snippet>In [8]: dates = rng.to_pydatetime()

In [9]: print(dates[0])
2013-01-01 00:00:00

In [10]: print(dates[0].strftime('%Y-%m-%d'))
2013-01-01
</snippet></ROW><ROW><id>17576786</id><snippet>import re

tgt='21357.53 84898.10 Mckenzie Meadows Golf Course 80912.48 84102.38'

nums=[m.group() for m in re.finditer(r'[\d\.]+',tgt)]
words=[m.group() for m in re.finditer(r'[a-zA-Z]+',tgt)]
print '"{}" {}'.format(' '.join(words),' '.join(nums))
</snippet></ROW><ROW><id>17576786</id><snippet>"Mckenzie Meadows Golf Course" 21357.53 84898.10 80912.48 84102.38
</snippet></ROW><ROW><id>17576786</id><snippet>nums=[]
words=[]
for e in tgt.split():
    try:
        nums.append(float(e))
    except ValueError:
        words.append(e)

print words,nums       
</snippet></ROW><ROW><id>17576786</id><snippet>li=tgt.split()
nums=' '.join(li[0:2]+li[-2:])
words=' '.join(li[2:-2])
print words,nums
</snippet></ROW><ROW><id>17576797</id><snippet>write</snippet></ROW><ROW><id>17576797</id><snippet>str</snippet></ROW><ROW><id>17576797</id><snippet>junk = b'\x90' * 5
junk += b'\xcc' * 5

fo.write(junk)
</snippet></ROW><ROW><id>17576872</id><snippet>keywords</snippet></ROW><ROW><id>17576872</id><snippet>getargspec</snippet></ROW><ROW><id>17576872</id><snippet>**kwargs</snippet></ROW><ROW><id>17576872</id><snippet>inspect.formatargspec</snippet></ROW><ROW><id>17576872</id><snippet>args, varargs, varkw, defaults = inspect.getargspec(func)
result = []
if defaults:
    firstdefault = len(args) - len(defaults)
for i, arg in enumerate(args):
    if defaults and i &gt;= firstdefault:
        result.append((arg, defaults[i - firstdefault]))
    else:
        result.append((arg,))
</snippet></ROW><ROW><id>17576872</id><snippet>positional_index:however_many</snippet></ROW><ROW><id>17576872</id><snippet>positional_index:positional_index+however_many</snippet></ROW><ROW><id>17576872</id><snippet>tuple</snippet></ROW><ROW><id>17576872</id><snippet>for pair in format:
    however_many = len(pair[0])
    argues.append((args[positional_index:positional_index+however_many], {k: kwargs[k] for k in pair[1]}))
    positional_index += however_many
</snippet></ROW><ROW><id>17576872</id><snippet>def foo(a, b, c=2)</snippet></ROW><ROW><id>17576872</id><snippet>def bar(a, b, c=8)</snippet></ROW><ROW><id>17576872</id><snippet>{'c': 1}</snippet></ROW><ROW><id>17576872</id><snippet>foo</snippet></ROW><ROW><id>17576872</id><snippet>{'c': 2}</snippet></ROW><ROW><id>17576872</id><snippet>bar</snippet></ROW><ROW><id>17576872</id><snippet>'c'</snippet></ROW><ROW><id>17576872</id><snippet>def foo(a, b, c=3, d=4)</snippet></ROW><ROW><id>17576872</id><snippet>foo(1, d=8, c=7, b=6)</snippet></ROW><ROW><id>17576872</id><snippet>b</snippet></ROW><ROW><id>17576925</id><snippet>import collections 
import operator
import itertools as IT

Mapping = collections.namedtuple('Mapping', ['DispName', 'MachID'])

objectList = [Mapping('map 2 (MT1)', 'MT1'),
          Mapping('theoretical (MT1)', 'MT1'),
          Mapping('map 3 (MT2)', 'MT2'),
          Mapping('theoretical (MT2)', 'MT2'),
          Mapping('map 1 (MT1)', 'MT1'),
          Mapping('map 2 (MT2)', 'MT2')]

sortedMappingList = sorted(objectList,
             key=lambda mapping:
                            (mapping.MachID,
                             not mapping.DispName.startswith('theoretical'),
                             mapping.DispName))

for key, group in IT.groupby(sortedMappingList, key=operator.attrgetter('MachID')):
    for g in group:
        print(g.DispName)
</snippet></ROW><ROW><id>17576925</id><snippet>theoretical (MT1)
map 1 (MT1)
map 2 (MT1)
theoretical (MT2)
map 2 (MT2)
map 3 (MT2)
</snippet></ROW><ROW><id>17577117</id><snippet>man open</snippet></ROW><ROW><id>17577117</id><snippet>man -S 2 open</snippet></ROW><ROW><id>17577224</id><snippet># Encode file correctly
final = unicode(page, errors='ignore')
# Load file correctly
final = json.loads(final)
with open('result.json', 'w') as f:
    json.dump(final, f, indent=0)
</snippet></ROW><ROW><id>17577236</id><snippet>with</snippet></ROW><ROW><id>17577236</id><snippet>with</snippet></ROW><ROW><id>17577236</id><snippet>with</snippet></ROW><ROW><id>17577236</id><snippet>with open("myfile.txt") as f:
    for line in f:
        print line,
</snippet></ROW><ROW><id>17577236</id><snippet>f</snippet></ROW><ROW><id>17577305</id><snippet>OpenKey</snippet></ROW><ROW><id>17577305</id><snippet>_winreg.OpenKey(_winreg.HKEY_CURRENT_USER, 'Environment', 0, _winreg.KEY_READ | _winreg.KEY_WRITE)
</snippet></ROW><ROW><id>17577341</id><snippet>--lazy-apps</snippet></ROW><ROW><id>17577341</id><snippet>--lazy-apps</snippet></ROW><ROW><id>17577506</id><snippet>desc = hxs.select("/html/head/meta[2]/@content").extract()
item["description"] = desc[0] if len(desc) &gt; 0 else ""
</snippet></ROW><ROW><id>17577506</id><snippet>item["description"] = desc[0] if desc else ""
</snippet></ROW><ROW><id>17577822</id><snippet>string formatting</snippet></ROW><ROW><id>17577822</id><snippet>&gt;&gt;&gt; lis = range(11)
&gt;&gt;&gt; ["{:02d}".format(x) for x in lis]
['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10']
</snippet></ROW><ROW><id>17577822</id><snippet>format</snippet></ROW><ROW><id>17577822</id><snippet>&gt;&gt;&gt; [format(x,'02d') for x in lis]
['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10']
</snippet></ROW><ROW><id>17577837</id><snippet>codecs.open()</snippet></ROW><ROW><id>17577837</id><snippet>open()</snippet></ROW><ROW><id>17577837</id><snippet>codecs.open()</snippet></ROW><ROW><id>17577837</id><snippet>codecs.open()</snippet></ROW><ROW><id>17577837</id><snippet>"utf-8-sig"</snippet></ROW><ROW><id>17577837</id><snippet>codecs.open()</snippet></ROW><ROW><id>17577837</id><snippet>x = unicode(actionT(splitList[0], splitList[1]))</snippet></ROW><ROW><id>17577837</id><snippet>actionT()</snippet></ROW><ROW><id>17577973</id><snippet>from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
from event_test.items import EventItem


class EventSpider(BaseSpider):
    name = "event_spider"
    allowed_domains = ["eventful.com"]
    start_urls = ["http://eventful.com/sanjose/events"]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        events = hxs.select("//li[contains(@class, 'top-events-item')]")
        for event in events:
            item = EventItem()
            item['event_name'] = event.select(".//h2/a/span/text()").extract()[0]
            item['event_locality'] = event.select(".//span[@class='locality']/text()").extract()[0]
            yield item
</snippet></ROW><ROW><id>17577973</id><snippet>event_name,event_locality
Under the Influence of Music Tour,Mountain View
Bruno Mars,San Jose
John Mayer: Born &amp; Raised Tour 2013,Mountain View
New Kids on the Block with 98 Degrees and ...,San Jose
Amy Grant,San Jose
Styx,Saratoga
Bob Dylan with Wilco,Mountain View
Kenny Chesney with Eli Young Band,Mountain View
Smash Mouth \/ Sugar Ray \/ Gin Blossoms \...,Saratoga
Creedence Clearwater Revisited \/ 38 Special,Saratoga
</snippet></ROW><ROW><id>17578035</id><snippet>(v.T * A3.T).T
</snippet></ROW><ROW><id>17578114</id><snippet>import</snippet></ROW><ROW><id>17578114</id><snippet>pmlcode.py</snippet></ROW><ROW><id>17578114</id><snippet>import pmlcode</snippet></ROW><ROW><id>17578114</id><snippet>exec</snippet></ROW><ROW><id>17578405</id><snippet>while currenttime &gt; '23:30:00' and currenttime &lt; '23:40:00':
</snippet></ROW><ROW><id>17578405</id><snippet>while currenttime &gt; '23:40:00' and currenttime &lt; '23:50:00':
</snippet></ROW><ROW><id>17578405</id><snippet>'23:40:00' &lt; currenttime &lt; '23:50:00'</snippet></ROW><ROW><id>17578405</id><snippet>datetime</snippet></ROW><ROW><id>17578405</id><snippet>time</snippet></ROW><ROW><id>17578405</id><snippet>currenttime = strftime('%H:%M:%S')
print ("""23:40:00 to 23:50:00 | %s""" % (currenttime))
sleep(1)
</snippet></ROW><ROW><id>17578405</id><snippet>currenttime</snippet></ROW><ROW><id>17578405</id><snippet>sleep(1)</snippet></ROW><ROW><id>17578405</id><snippet>global clearscreen
</snippet></ROW><ROW><id>17578405</id><snippet>sched</snippet></ROW><ROW><id>17578405</id><snippet>threading.Timer</snippet></ROW><ROW><id>17578405</id><snippet>signal.setitemer</snippet></ROW><ROW><id>17578405</id><snippet>fork</snippet></ROW><ROW><id>17578405</id><snippet>Timer</snippet></ROW><ROW><id>17578405</id><snippet>sched</snippet></ROW><ROW><id>17578405</id><snippet>enterabs</snippet></ROW><ROW><id>17578405</id><snippet>import sched
import datetime
import time

s = sched.scheduler(time.time, time.sleep)

def dotoday():
    now = datetime.date.now()
    stime = now.time()

    # Schedule "first" every 3 minutes from 22:00 to 22:57
    if stime &lt; datetime.time(22, 0):
        stime = datetime.time(22, 0)
    while stime &lt;= datetime.time(22, 57):
        s.enterabs(stime, 1, first, ())
        stime += datetime.timedelta(0, 180)

    # Schedule "second" every 3 minutes from 23:00 to 23:57
    stime = datetime.time(23, 0)
    while stime &lt;= datetime.time(23, 57):
        s.enterabs(stime, 1, second, ())
        stime += datetime.timedelta(0, 180)

    # Schedule "dotoday" to run tomorrow
    midnight = now.replace(hour=0, minute=0, second=0)
    tomorrow = midnight + datetime.timedelta(1, 0)
    s.enterabs(tomorrow, 1, dotoday, ())

dotoday()
s.run()
</snippet></ROW><ROW><id>17578475</id><snippet>queryset=Poll.objects.filter(choice__isnull=False).order_by('-pub_date').distinct()[:5] #Get only polls with a choice. 
</snippet></ROW><ROW><id>17578475</id><snippet>queryset = Poll.objects.filter(choice__isnull=False, pub_date__lte=timezone.now()).order_by('-pub_date').distinct()[:5]
</snippet></ROW><ROW><id>17578499</id><snippet>for i in range(len(end)-1):
    seq[end[i]:start[i+1]]

answer:-
    'GHI'
    'MNOPQR'
</snippet></ROW><ROW><id>17578555</id><snippet>lxml</snippet></ROW><ROW><id>17578555</id><snippet>&gt;&gt;&gt; xml = '''\
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Values version="2.0"&gt;
&lt;record name="trigger"&gt;
    &lt;value name="uniqueId"&gt;6xjUCpDlrTVHRsEVmxx0Ews6ni8=&lt;/value&gt;
    &lt;value name="processingSuspended"&gt;true&lt;/value&gt;
    &lt;value name="retrievalSuspended"&gt;true&lt;/value&gt;
&lt;/record&gt;
&lt;record name="trigger"&gt;
    &lt;value name="uniqueId"&gt;6xjUCpDlrTVHRsEVmxx0Ews6ni8=&lt;/value&gt;
    &lt;value name="processingSuspended"&gt;true&lt;/value&gt;
    &lt;value name="retrievalSuspended"&gt;true&lt;/value&gt;
&lt;/record&gt;
&lt;/Values&gt;\
'''

&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; tree = etree.fromstring(xml)
&gt;&gt;&gt; tree.xpath('//value[@name="processingSuspended"]')[0].text = 'false'
&gt;&gt;&gt; tree.xpath('//value[@name="retrievalSuspended"]')[0].text = 'false'
</snippet></ROW><ROW><id>17578555</id><snippet>xpath</snippet></ROW><ROW><id>17578555</id><snippet>'//value[@name="processingSuspended"]'</snippet></ROW><ROW><id>17578555</id><snippet>value</snippet></ROW><ROW><id>17578555</id><snippet>name</snippet></ROW><ROW><id>17578555</id><snippet>"processingSuspended"</snippet></ROW><ROW><id>17578555</id><snippet>[0]</snippet></ROW><ROW><id>17578555</id><snippet>'false'</snippet></ROW><ROW><id>17578555</id><snippet>&gt;&gt;&gt; print(etree.tostring(tree, pretty_print=True))
&lt;Values version="2.0"&gt;
&lt;record name="trigger"&gt;
    &lt;value name="uniqueId"&gt;6xjUCpDlrTVHRsEVmxx0Ews6ni8=&lt;/value&gt;
    &lt;value name="processingSuspended"&gt;false&lt;/value&gt;
    &lt;value name="retrievalSuspended"&gt;false&lt;/value&gt;
&lt;/record&gt;
&lt;record name="trigger"&gt;
    &lt;value name="uniqueId"&gt;6xjUCpDlrTVHRsEVmxx0Ews6ni8=&lt;/value&gt;
    &lt;value name="processingSuspended"&gt;true&lt;/value&gt;
    &lt;value name="retrievalSuspended"&gt;true&lt;/value&gt;
&lt;/record&gt;
&lt;/Values&gt;

&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17578653</id><snippet>def percentile(n):
    def percentile_(x):
        return np.percentile(x, n)
    percentile_.__name__ = 'percentile_%s' % n
   return percentile_
</snippet></ROW><ROW><id>17578653</id><snippet>agg</snippet></ROW><ROW><id>17578653</id><snippet>In [11]: column.agg([np.sum, np.mean, np.std, np.median,
                     np.var, np.min, np.max, percentile(50), percentile(95)])
Out[11]:
           sum       mean        std  median          var  amin  amax  percentile_50  percentile_95
AGGREGATE
A          106  35.333333  42.158431      12  1777.333333    10    84             12           76.8
B           36  12.000000   8.888194       9    79.000000     5    22             12           76.8
</snippet></ROW><ROW><id>17578689</id><snippet>r.text</snippet></ROW><ROW><id>17578689</id><snippet>requests</snippet></ROW><ROW><id>17578689</id><snippet>r.json()</snippet></ROW><ROW><id>17578689</id><snippet>r.json()[stream]</snippet></ROW><ROW><id>17578689</id><snippet>stream</snippet></ROW><ROW><id>17578689</id><snippet>r.json()['stream']</snippet></ROW><ROW><id>17578689</id><snippet>r.json()['stream']['_links']['self']</snippet></ROW><ROW><id>17578689</id><snippet>print r.text</snippet></ROW><ROW><id>17578689</id><snippet>r.text</snippet></ROW><ROW><id>17578736</id><snippet>np.concatenate()</snippet></ROW><ROW><id>17578736</id><snippet>np.hsatck()</snippet></ROW><ROW><id>17578736</id><snippet>heights = np.concatenate((heights, heights[0:1]))
</snippet></ROW><ROW><id>17578736</id><snippet>heights = np.hstack((heights, heights[0:1]))
</snippet></ROW><ROW><id>17578793</id><snippet>a</snippet></ROW><ROW><id>17578793</id><snippet>x</snippet></ROW><ROW><id>17578793</id><snippet>y</snippet></ROW><ROW><id>17578793</id><snippet>a</snippet></ROW><ROW><id>17578793</id><snippet>vmin</snippet></ROW><ROW><id>17578793</id><snippet>vmax</snippet></ROW><ROW><id>17578793</id><snippet>vmin</snippet></ROW><ROW><id>17578793</id><snippet>vmax</snippet></ROW><ROW><id>17578793</id><snippet>import numpy as np
import scipy.interpolate
import matplotlib.pyplot as plt

def main():
    x = np.array([0, 0, 2, 2])
    y = np.array([0, 2, 0, 2])
    a = np.array([23.4, 23.7, 23.4, 23.7])
    xi, yi = np.mgrid[x.min():x.max():500j, y.min():y.max():500j]

    a_orig = normal_interp(x, y, a, xi, yi)
    a_rescale = rescaled_interp(x, y, a, xi, yi)

    plot(x, y, a, a_orig, 'Not Rescaled')
    plot(x, y, a, a_rescale, 'Rescaled')
    plt.show()

def normal_interp(x, y, a, xi, yi):
    rbf = scipy.interpolate.Rbf(x, y, a)
    ai = rbf(xi, yi)
    return ai

def rescaled_interp(x, y, a, xi, yi):
    a_rescaled = (a - a.min()) / a.ptp()
    ai = normal_interp(x, y, a_rescaled, xi, yi)
    ai = a.ptp() * ai + a.min()
    return ai

def plot(x, y, a, ai, title):
    fig, ax = plt.subplots()

    im = ax.imshow(ai.T, origin='lower',
                   extent=[x.min(), x.max(), y.min(), y.max()])
    ax.scatter(x, y, c=a)

    ax.set(xlabel='X', ylabel='Y', title=title)
    fig.colorbar(im)

main()      
</snippet></ROW><ROW><id>17578793</id><snippet>a</snippet></ROW><ROW><id>17578793</id><snippet>def normal_interp(x, y, a, xi, yi):
    rbf = scipy.interpolate.Rbf(x, y, a)
    ai = rbf(xi, yi)
    return ai

def rescaled_interp(x, y, a, xi, yi):
    a_rescaled = (a - a.min()) / a.ptp()
    ai = normal_interp(x, y, a_rescaled, xi, yi)
    ai = a.ptp() * ai + a.min()
    return ai
</snippet></ROW><ROW><id>17578793</id><snippet>griddata</snippet></ROW><ROW><id>17578838</id><snippet>import re
function_list = [f for f in dir(re) if 'find' in f] # faster than using list.append
function_list.sort() # faster than using sorted. This can actually be excluded, since `dir` returns a sorted list
</snippet></ROW><ROW><id>17578838</id><snippet>list.append</snippet></ROW><ROW><id>17578838</id><snippet>sorted</snippet></ROW><ROW><id>17578838</id><snippet>list.sort</snippet></ROW><ROW><id>17578838</id><snippet>list.sort</snippet></ROW><ROW><id>17578838</id><snippet>sorted</snippet></ROW><ROW><id>17578841</id><snippet>m.find</snippet></ROW><ROW><id>17578841</id><snippet>(u'99M1Tazb',
 {u'a': {u'n': u'test.txt'}, 
  u'h': u'99M1Tazb', 
  u'k': (1145485578, 1435138417, 702505527, 274874292), 
  u'ts': 1373482712,
  'iv': (1883603069, 763415510, 0, 0), 
  u'p': u'9td12YaY', 
  u's': 0, 
  'meta_mac': (1091379956, 402442960),
  u'u': u'79_166PAQCA', 
  u't': 0,
  'key': (872626551, 2013967015, 1758609603, 127858020, 1883603069, 763415510, 1091379956, 402442960)})
</snippet></ROW><ROW><id>17578841</id><snippet>print file[1]['a']['n'] 
</snippet></ROW><ROW><id>17578841</id><snippet>simplejson</snippet></ROW><ROW><id>17578874</id><snippet>&gt;&gt;&gt; a = "Play The Final Episode by Asking Alexandria" # voice input
&gt;&gt;&gt; songList = ["Asking Alexandria - 2 - The Final Episode (Let's Change Channel).mp3",      "Angie", "Yesterday.mp3"]
&gt;&gt;&gt; for songTitle in SongsList:
        songTitleWords = songTitle.split(" ")
        if " ".join(songTitleWords[:2]) in voiceInput: 
            # play the song
</snippet></ROW><ROW><id>17578928</id><snippet>&gt;&gt;&gt; '12.000'.rstrip('0')
'12.'
</snippet></ROW><ROW><id>17579180</id><snippet>votingDict = {names[i]:votes[j] for i in range(len(names)) for j in range(len(votes))}
</snippet></ROW><ROW><id>17579180</id><snippet>zip()</snippet></ROW><ROW><id>17579180</id><snippet>votingDict = {name: vote for name, vote in zip(names, votes)}
</snippet></ROW><ROW><id>17579180</id><snippet>votingDict</snippet></ROW><ROW><id>17579180</id><snippet>votingDict = {}
for line in voting_data:
    name, ign1, ign2, *votes = line.split()
    votingDict[name] = [int(v) for v in votes]
</snippet></ROW><ROW><id>17579180</id><snippet>str.split()</snippet></ROW><ROW><id>17579180</id><snippet>votes</snippet></ROW><ROW><id>17579227</id><snippet>from subprocess import call
call(["ls", "-l"])
</snippet></ROW><ROW><id>17579227</id><snippet>os.system</snippet></ROW><ROW><id>17579227</id><snippet>import os
os.system('"C:/Temp/a b c/Notepad.exe"')
</snippet></ROW><ROW><id>17579245</id><snippet>bisect</snippet></ROW><ROW><id>17579245</id><snippet>import bisect
def f(l1,l2):
    for x in l2:
        ind = bisect.bisect(l1,x)
        # if the index where the item from l2 can fit in l1 is 1,
        # then it's time to return 
        if ind - 1 == 0:           
            return x
        del l1[ind-1]   #otherwise remove the item from l1


l1 = [0,30,45,55,80,90]
l2 = [35,65,70,75,100,120]
print f(l1,l2)
#75
</snippet></ROW><ROW><id>17579252</id><snippet>x2, y2, _ = proj3d.proj_transform(x1,y1,z1, ax.get_proj())
</snippet></ROW><ROW><id>17579288</id><snippet>&lt;meta name="viewport" content="width=device-width, initial-scale=1.0" *** wildcard-selector-here *** &gt;  
</snippet></ROW><ROW><id>17579466</id><snippet>timeit</snippet></ROW><ROW><id>17579466</id><snippet>time.time</snippet></ROW><ROW><id>17579466</id><snippet>time.clock</snippet></ROW><ROW><id>17579466</id><snippet>timeit.default_timer</snippet></ROW><ROW><id>17579496</id><snippet>scrapy</snippet></ROW><ROW><id>17579496</id><snippet>/etc/bash_completion.d/scrapy_bash_completion</snippet></ROW><ROW><id>17579496</id><snippet>complete -r scrapy</snippet></ROW><ROW><id>17579496</id><snippet>~/.bashrc</snippet></ROW><ROW><id>17579680</id><snippet>if inventory</snippet></ROW><ROW><id>17579680</id><snippet>inventory</snippet></ROW><ROW><id>17579680</id><snippet>def sell_function():
     if inventory:
        if inventory[0] in rawfish:
        #other code 
     else:
        print "Shopkeeper:'You can't sell that.'"
</snippet></ROW><ROW><id>17579892</id><snippet>if</snippet></ROW><ROW><id>17579892</id><snippet>if __debug__ or verbose:
</snippet></ROW><ROW><id>17579892</id><snippet>if __debug__ and verbose:
</snippet></ROW><ROW><id>17579892</id><snippet>if __debug__</snippet></ROW><ROW><id>17579949</id><snippet>def remLines(infilepath, outfilepath, delim, above, below):
    infile = open(infilepath)
    outfile = open(outfilepath, 'w')
    buff = []
    line = infile.readline()
    while line:
        if line.strip() == delim:
             buff = []
             for _ in range(below): # need to error check here, if you're not certain that your input file is correctly formatted
                 infile.readline()
        else:
            if len(buff) == above:
                outfile.write(buff[0])
                buff = buff[1:]
            buff.append(line)
        line = infile.readline()
    outfile.write(''.join(buff))

if __name__ == "__main__":
    remLines('path/to/input', 'path/to/output', "Position fix ind: 0", 6,3)
</snippet></ROW><ROW><id>17579949</id><snippet>1
2
3
*--------------------------------------*
            UTC Time: 000000.00
           Latitude: 0000.0000
            N/S ind.: N
           Longitude: 0000.0000
         E/W ind: E
    Position fix ind: 0
     Satellites Used: 3
        MSL Altitude: 00.0
 *--------------------------------------*
3
2
1
1
2
3
*--------------------------------------*
            UTC Time: 000000.00
           Latitude: 0000.0000
            N/S ind.: N
           Longitude: 0000.0000
         E/W ind: E
    Position fix ind: 5
     Satellites Used: 3
        MSL Altitude: 00.0
*--------------------------------------*
3
2
1
</snippet></ROW><ROW><id>17579949</id><snippet>1
2
3
3
2
1
1
2
3
*--------------------------------------*
            UTC Time: 000000.00
           Latitude: 0000.0000
            N/S ind.: N
           Longitude: 0000.0000
         E/W ind: E
    Position fix ind: 5
     Satellites Used: 3
        MSL Altitude: 00.0
*--------------------------------------*
3
2
1
</snippet></ROW><ROW><id>17580128</id><snippet>awk 'BEGIN{print "WAM"}/\&lt;WAM\&gt;/{print $1}' /home/santosh/messages &gt; text.file
</snippet></ROW><ROW><id>17580177</id><snippet>map_async</snippet></ROW><ROW><id>17580177</id><snippet>Process</snippet></ROW><ROW><id>17580177</id><snippet>apply_async</snippet></ROW><ROW><id>17580177</id><snippet>map_async</snippet></ROW><ROW><id>17580177</id><snippet>Manager.Queue</snippet></ROW><ROW><id>17580177</id><snippet>apply_async</snippet></ROW><ROW><id>17580177</id><snippet>Queue</snippet></ROW><ROW><id>17580177</id><snippet>Manager</snippet></ROW><ROW><id>17580177</id><snippet>Manager</snippet></ROW><ROW><id>17580177</id><snippet>AuthenticationString</snippet></ROW><ROW><id>17580177</id><snippet>Manager</snippet></ROW><ROW><id>17580177</id><snippet>Queue</snippet></ROW><ROW><id>17580177</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>17580177</id><snippet>Manager</snippet></ROW><ROW><id>17580177</id><snippet>Manager.Queue</snippet></ROW><ROW><id>17580177</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>17580177</id><snippet>Queue</snippet></ROW><ROW><id>17580177</id><snippet>map_async</snippet></ROW><ROW><id>17580246</id><snippet>login</snippet></ROW><ROW><id>17580246</id><snippet>def login(request, user):
    """
    Persist a user id and a backend in the request. This way a user doesn't
    have to reauthenticate on every request. Note that data set during
    the anonymous session is retained when the user logs in.
    """
</snippet></ROW><ROW><id>17580246</id><snippet>request.session</snippet></ROW><ROW><id>17580246</id><snippet>login</snippet></ROW><ROW><id>17580246</id><snippet>if the existing session corresponds to a different authenticated user</snippet></ROW><ROW><id>17580246</id><snippet>logout</snippet></ROW><ROW><id>17580311</id><snippet>_</snippet></ROW><ROW><id>17580311</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.pow(3.0, 5)
243.0
&gt;&gt;&gt; result = _
&gt;&gt;&gt; result
243.0
</snippet></ROW><ROW><id>17580311</id><snippet>_</snippet></ROW><ROW><id>17580311</id><snippet>_</snippet></ROW><ROW><id>17580311</id><snippet>__builtin__</snippet></ROW><ROW><id>17580311</id><snippet>[_]</snippet></ROW><ROW><id>17580311</id><snippet>_</snippet></ROW><ROW><id>17580311</id><snippet>gettext</snippet></ROW><ROW><id>17580311</id><snippet>_</snippet></ROW><ROW><id>17580311</id><snippet>[random.random() for _ in range(5)]</snippet></ROW><ROW><id>17580480</id><snippet>exec</snippet></ROW><ROW><id>17580480</id><snippet>dict</snippet></ROW><ROW><id>17580480</id><snippet>buttons = {}

# ...

letter = alphabet[i]
buttons[letter] = Button(frame, text = letter, command = letterAction(letter))
buttons[letter].place(x = x, y = y, width = width, height = height)
</snippet></ROW><ROW><id>17580480</id><snippet>dict</snippet></ROW><ROW><id>17580480</id><snippet>locals()</snippet></ROW><ROW><id>17580480</id><snippet>self.__dict__</snippet></ROW><ROW><id>17580480</id><snippet>globals()</snippet></ROW><ROW><id>17580480</id><snippet>letterAction</snippet></ROW><ROW><id>17580480</id><snippet>def createLetters(frame, startX, startY, width, height, spacing):

    alphabet = string.ascii_uppercase
    buttons = {}

    def letterAction(letter):
        buttons[letter].destroy()

    for i, letter in enumerate(alphabet):

        if (i &gt;= 9 and i &lt;= 17):
            y = startY +  height + 2 * spacing
            x = startX + ((width + spacing) * (i - 9))

        elif (i &gt;= 17):
            y = startY + 2 * height + 3 * spacing
            x = (width + spacing) / 2 + startX + ((width + spacing) * (i - 18))

        elif (i &lt;= 8):
            y = startY + spacing
            x = startX + ((width + spacing) * i)

        buttons[letter] = Button(frame, text = letter, command = letterAction(letter))
        buttons[letter].place(x = x, y = y, width = width, height = height)
</snippet></ROW><ROW><id>17580480</id><snippet>command = letterAction(letter)</snippet></ROW><ROW><id>17580480</id><snippet>exec</snippet></ROW><ROW><id>17580480</id><snippet>letterAction(letter)</snippet></ROW><ROW><id>17580480</id><snippet>None</snippet></ROW><ROW><id>17580480</id><snippet>command</snippet></ROW><ROW><id>17580480</id><snippet>lambda: letterAction(letter)</snippet></ROW><ROW><id>17580480</id><snippet>partial(letterAction, letter)</snippet></ROW><ROW><id>17580480</id><snippet>letter</snippet></ROW><ROW><id>17580480</id><snippet>dict</snippet></ROW><ROW><id>17580480</id><snippet>Button</snippet></ROW><ROW><id>17580480</id><snippet>17</snippet></ROW><ROW><id>17580480</id><snippet>class SelfDestructiveButton(object):
    def __init__(self, frame, letter, x, y, width, height):
        self.button = Button(frame, text=letter, command=self.command)
        self.button.place(x=x, y=y, width=width, height=height)
    def command(self):
        self.button.destroy()

def createLetters(frame, startX, startY, width, height, spacing):
    for i, letter in enumerate(string.ascii_uppercase):
        if 9 &lt;= i &lt;= 17:
            y = startY +  height + 2 * spacing
            x = startX + ((width + spacing) * (i - 9))
        elif i &gt; 17:
            y = startY + 2 * height + 3 * spacing
            x = (width + spacing) / 2 + startX + ((width + spacing) * (i - 18))
        else:
            y = startY + spacing
            x = startX + ((width + spacing) * i)
        SelfDestructiveButton(frame, letter, x, y, width, height)
</snippet></ROW><ROW><id>17580480</id><snippet>if 'J' &lt;= letter &lt;= 'R'</snippet></ROW><ROW><id>17580503</id><snippet>local('sudo find dir -exec chown name {} \;')
</snippet></ROW><ROW><id>17580644</id><snippet>object</snippet></ROW><ROW><id>17580644</id><snippet>Delete = object()
</snippet></ROW><ROW><id>17580654</id><snippet>my_str = u'\u2014'
el.text = my_str.encode('UTF-8')
</snippet></ROW><ROW><id>17580654</id><snippet>el.text = '\xe2\x80\x94'
</snippet></ROW><ROW><id>17580654</id><snippet>tostring(root, encoding='UTF-8')
</snippet></ROW><ROW><id>17580654</id><snippet>&gt;&gt;&gt; from xml.etree import ElementTree as et
&gt;&gt;&gt; e = et.Element('test')
&gt;&gt;&gt; e.text = u'\u2014'

&gt;&gt;&gt; s = et.tostring(e)
&gt;&gt;&gt; print s, repr(s)
&lt;test&gt;—&lt;/test&gt; '&lt;test&gt;—&lt;/test&gt;'

&gt;&gt;&gt; s = et.tostring(e, encoding='utf-8')
&gt;&gt;&gt; print s, repr(s)
&lt;test&gt;—&lt;/test&gt; '&lt;test&gt;\xe2\x80\x94&lt;/test&gt;'
</snippet></ROW><ROW><id>17580671</id><snippet>&gt;&gt;&gt; a=np.arange(4)
&gt;&gt;&gt; a
array([0, 1, 2, 3])
&gt;&gt;&gt; np.tile(a,(6,1))
array([[0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3],
       [0, 1, 2, 3]])

&gt;&gt;&gt; b= np.eye(2)
&gt;&gt;&gt; b
array([[ 1.,  0.],
       [ 0.,  1.]])
&gt;&gt;&gt; np.tile(b,(3,1,1))
array([[[ 1.,  0.],
        [ 0.,  1.]],

       [[ 1.,  0.],
        [ 0.,  1.]],

       [[ 1.,  0.],
        [ 0.,  1.]]])
</snippet></ROW><ROW><id>17580671</id><snippet>&gt;&gt;&gt; np.tile(b,(2,2,2))
array([[[ 1.,  0.,  1.,  0.],
        [ 0.,  1.,  0.,  1.],
        [ 1.,  0.,  1.,  0.],
        [ 0.,  1.,  0.,  1.]],

       [[ 1.,  0.,  1.,  0.],
        [ 0.,  1.,  0.,  1.],
        [ 1.,  0.,  1.,  0.],
        [ 0.,  1.,  0.,  1.]]])
</snippet></ROW><ROW><id>17580696</id><snippet>\1</snippet></ROW><ROW><id>17580696</id><snippet>&gt;&gt;&gt; re.findall(r'([\'"])(.*?)\1',s)
[('"', 'test'), ('"', "won't work right")]
</snippet></ROW><ROW><id>17580698</id><snippet>print hashes[8][:-1]
</snippet></ROW><ROW><id>17580763</id><snippet>flag</snippet></ROW><ROW><id>17580763</id><snippet>len(adjMat)</snippet></ROW><ROW><id>17580763</id><snippet>len(adjMat)</snippet></ROW><ROW><id>17580763</id><snippet>len(adjMat)</snippet></ROW><ROW><id>17580763</id><snippet>len(adjMat) * len(adjMat)</snippet></ROW><ROW><id>17580763</id><snippet>flag</snippet></ROW><ROW><id>17580800</id><snippet>myDict = {}
myDict[filenameFromDialog] = len(myDict)
</snippet></ROW><ROW><id>17580800</id><snippet>myDict = {}
for filename in filez:
    myDict[filename] = len(myDict)
</snippet></ROW><ROW><id>17581170</id><snippet>from pandas.tseries.frequencies import get_offset
get_offset('30s')
</snippet></ROW><ROW><id>17581216</id><snippet>myDict = {}
myDict.setdefault(myKey, []).append(value)
</snippet></ROW><ROW><id>17581216</id><snippet>myDict.setdefault(myKey, [])</snippet></ROW><ROW><id>17581216</id><snippet>myKey</snippet></ROW><ROW><id>17581216</id><snippet>myDict</snippet></ROW><ROW><id>17581216</id><snippet>import collections
myDict = collections.defaultdict(list)
myDict[myKey].append(value)
</snippet></ROW><ROW><id>17581216</id><snippet>dict</snippet></ROW><ROW><id>17581216</id><snippet>myDict</snippet></ROW><ROW><id>17581216</id><snippet>defaultdict</snippet></ROW><ROW><id>17581216</id><snippet>myDict[anyKey]</snippet></ROW><ROW><id>17581216</id><snippet>myDict</snippet></ROW><ROW><id>17581248</id><snippet>sites = [(s.site_code, s.site_code) for s in Site.objects.all().order_by('site_code')]
SITE_CHOICES = [('All', 'All')] + sites
</snippet></ROW><ROW><id>17581364</id><snippet>import Tkinter as tk

root = tk.Tk()
choices = ('network one', 'network two', 'network three')
var = tk.StringVar(root)

def refresh():
    # Reset var and delete all old options
    var.set('')
    network_select['menu'].delete(0, 'end')

    # Insert list of new options (tk._setit hooks them up to var)
    new_choices = ('one', 'two', 'three')
    for choice in new_choices:
        network_select['menu'].add_command(label=choice, command=tk._setit(var, choice))

network_select = tk.OptionMenu(root, var, *choices)
network_select.grid()

# I made this quick refresh button to demonstrate
tk.Button(root, text='Refresh', command=refresh).grid()

root.mainloop()
</snippet></ROW><ROW><id>17581397</id><snippet>yield from foo:
</snippet></ROW><ROW><id>17581397</id><snippet>for bar in foo:
    yield bar
</snippet></ROW><ROW><id>17581397</id><snippet>list</snippet></ROW><ROW><id>17581397</id><snippet>list</snippet></ROW><ROW><id>17581397</id><snippet>yield list(…)</snippet></ROW><ROW><id>17581397</id><snippet>yield from …</snippet></ROW><ROW><id>17581397</id><snippet>for</snippet></ROW><ROW><id>17581397</id><snippet>itertools.chain(upper, lower)</snippet></ROW><ROW><id>17581397</id><snippet>chain</snippet></ROW><ROW><id>17581397</id><snippet>for arg in *args:
    yield from arg
</snippet></ROW><ROW><id>17581397</id><snippet>send</snippet></ROW><ROW><id>17581397</id><snippet>yield from</snippet></ROW><ROW><id>17581397</id><snippet>StopIteration.value</snippet></ROW><ROW><id>17581397</id><snippet>yield from</snippet></ROW><ROW><id>17581439</id><snippet>kwargs.get('somestring')</snippet></ROW><ROW><id>17581439</id><snippet>dict</snippet></ROW><ROW><id>17581627</id><snippet>instances = {}         #use a dictionary to store the instances

#open the file using `with` statement, it'll automatically close the
#file for you
with open('abc') as f:
    next(f)                 #skip header
    for line in f:          #now iterate over the file line by line        
        data = line.strip('[]').split(', ')  #strip [] first and then split at ', '
        #for first line it'll return:
            #['Rohan', '111111', '28', 'Ithaca', 'New Caanan']  , a list object

        #Now we can use the first item of this list as the key 
        #and store the instance in the instances dict 
        #Note that if the names are not always unique then it's better to use ID as the
        #key for the dict, i.e instances[data[1]] = Person(*data)
        instances[data[0]] = Person(*data)  # *data  unpacks the data list into Person

#Example: call Rohan's introduce_myself
instances['Rohan'].introduce_myself() 
</snippet></ROW><ROW><id>17581627</id><snippet>Hi, my name is Rohan , my ID number is 111111 I am 28 years old
</snippet></ROW><ROW><id>17581904</id><snippet>"gamestate" : {
            "attributes": ["status-id", "status", "quarter", ...]
        }, 
</snippet></ROW><ROW><id>17581904</id><snippet>gamestate</snippet></ROW><ROW><id>17581904</id><snippet>attribute</snippet></ROW><ROW><id>17582010</id><snippet>Firefox()</snippet></ROW><ROW><id>17582010</id><snippet>from selenium import webdriver
from selenium.webdriver.firefox.firefox_binary import FirefoxBinary

binary = FirefoxBinary('path/to/binary')
driver = webdriver.Firefox(firefox_binary=binary)
</snippet></ROW><ROW><id>17582010</id><snippet>%PROGRAMFILES%\Mozilla Firefox\firefox.exe</snippet></ROW><ROW><id>17582195</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from sympy.solvers import solve
from sympy import Symbol

def f1(x):
    return 4.0*x-2.0
def f2(x):
    return 0.5*x+2.0
def f3(x):
    return -0.3*x+7.0

x = Symbol('x')
x1, =  solve(f1(x)-f2(x))
x2, =  solve(f1(x)-f3(x))
x3, =  solve(f2(x)-f3(x))

y1 = f1(x1)
y2 = f1(x2)
y3 = f2(x3)

plt.plot(x1,f1(x1),'go',markersize=10)
plt.plot(x2,f1(x2),'go',markersize=10)
plt.plot(x3,f2(x3),'go',markersize=10)

plt.fill([x1,x2,x3,x1],[y1,y2,y3,y1],'red',alpha=0.5)

xr = np.linspace(0.5,7.5,100)
y1r = f1(xr)
y2r = f2(xr)
y3r = f3(xr)

plt.plot(xr,y1r,'k--')
plt.plot(xr,y2r,'k--')
plt.plot(xr,y3r,'k--')

plt.xlim(0.5,7)
plt.ylim(2,8)

plt.show()
</snippet></ROW><ROW><id>17582211</id><snippet>created</snippet></ROW><ROW><id>17582211</id><snippet>unorderedPosts = Post.objects.all()
if request.user.is_authenticated(): 
    preferences=request.user.categorypreference_set.filter(on=False)
    for preference in preferences: #filter by category preference
        unorderedPosts=unorderedPosts.exclude(category_name=preference.category_name)
latest_post_datetime = unorderedPosts.aggregate(Max('created'))['created__max']

original_start_time = datetime.datetime.now() - datetime.timedelta(hours=startHours)    
latest_post_day_start_time = datetime.datetime.combine(latest_post_datetime.date(), original_start_time.time())
# a timedelta guaranteed to be less than 24 hours
time_shift = latest_post_day_start_time - latest_post_datetime
timewindow = datetime.timedelta(hours=4)
if time_shift.days &gt;= 0:
    extra_windows_needed = time_shift.seconds / timewindow.seconds 
else:
    # negative timedeltas store negative days, then positive seconds; negate
    extra_windows_needed = -(abs(time_shift).seconds) / timewindow.seconds
start_time = latest_post_day_start_time - (timewindow * (extra_windows_needed + 1))
posts = unorderedPosts.filter(created__gte=start_time).order_by('-upVote')
return posts
</snippet></ROW><ROW><id>17582211</id><snippet>startHours</snippet></ROW><ROW><id>17582211</id><snippet>latest_post_datetime</snippet></ROW><ROW><id>17582211</id><snippet>posts</snippet></ROW><ROW><id>17582211</id><snippet>if request.user.is_authenticated():
    unorderedPosts = unorderedPosts.exclude(category_name__in=request.user.categorypreference_set.filter(on=False).values_list('category_name')
</snippet></ROW><ROW><id>17582261</id><snippet>unique</snippet></ROW><ROW><id>17582261</id><snippet>yourUniqueFieldName = models.TextField(max_length=100, unique=True)
</snippet></ROW><ROW><id>17582261</id><snippet>class Meta:
    unique_together = ('field1', 'field2',)
</snippet></ROW><ROW><id>17582279</id><snippet>mykey = 'AAA'</snippet></ROW><ROW><id>17582279</id><snippet>str</snippet></ROW><ROW><id>17582279</id><snippet>def value_for_value(d, str):
    for key, value in d.iteritems():
        mykey = 'AAA'
        if value == str:
            mykey = key
        print key,value,type(value),str,type(str),mykey
    return mykey

&gt;&gt;&gt; value_for_value(Comp, 99)
Blue 101 &lt;type 'int'&gt; 99 &lt;type 'int'&gt; AAA
Ivory 103 &lt;type 'int'&gt; 99 &lt;type 'int'&gt; AAA
Black 99 &lt;type 'int'&gt; 99 &lt;type 'int'&gt; Black
Green 102 &lt;type 'int'&gt; 99 &lt;type 'int'&gt; AAA
White 104 &lt;type 'int'&gt; 99 &lt;type 'int'&gt; AAA
Red 100 &lt;type 'int'&gt; 99 &lt;type 'int'&gt; AAA
'AAA'
</snippet></ROW><ROW><id>17582279</id><snippet>def value_for_value(d, str):
    mykey = 'AAA'
    for key, value in d.iteritems():
        if value == str:
            mykey = key
        print key,value,type(value),str,type(str),mykey
    return mykey
</snippet></ROW><ROW><id>17582279</id><snippet>&gt;&gt;&gt; value_for_value(Comp, 99)
Blue 101 &lt;type 'int'&gt; 99 &lt;type 'int'&gt; AAA
Ivory 103 &lt;type 'int'&gt; 99 &lt;type 'int'&gt; AAA
Black 99 &lt;type 'int'&gt; 99 &lt;type 'int'&gt; Black
Green 102 &lt;type 'int'&gt; 99 &lt;type 'int'&gt; Black
White 104 &lt;type 'int'&gt; 99 &lt;type 'int'&gt; Black
Red 100 &lt;type 'int'&gt; 99 &lt;type 'int'&gt; Black
'Black'
</snippet></ROW><ROW><id>17582279</id><snippet>&gt;&gt;&gt; CompInverse = {value: key for key, value in Comp.iteritems()}
&gt;&gt;&gt; CompInverse.get(99, 'AAA')
'Black'
</snippet></ROW><ROW><id>17582292</id><snippet>&lt;field name="hotel" on_change="hotel_change(hotel, context) /&gt;
&lt;field name="other_field" /&gt;
</snippet></ROW><ROW><id>17582292</id><snippet>def hotel_change(self, cr, uid, ids, hotel, context = None):
   other_field_value = get_other_field_value(hotel)
   return {'value': {'other_field': other_field_value,},}
</snippet></ROW><ROW><id>17582292</id><snippet>on_change</snippet></ROW><ROW><id>17582292</id><snippet>osv.osv_except</snippet></ROW><ROW><id>17582292</id><snippet>other_field</snippet></ROW><ROW><id>17582292</id><snippet>on_change</snippet></ROW><ROW><id>17582292</id><snippet>on_change</snippet></ROW><ROW><id>17582466</id><snippet>*</snippet></ROW><ROW><id>17582466</id><snippet>parameter_list ::=  (defparameter ",")*
                    ( "*" [parameter] ("," defparameter)* ["," "**" parameter]
                    | "**" parameter
                    | defparameter [","] )
parameter      ::=  identifier [":" expression]
defparameter   ::=  parameter ["=" expression]
</snippet></ROW><ROW><id>17582466</id><snippet>parameter</snippet></ROW><ROW><id>17582466</id><snippet>defparameters</snippet></ROW><ROW><id>17582466</id><snippet>*</snippet></ROW><ROW><id>17582466</id><snippet>def f(*)</snippet></ROW><ROW><id>17582466</id><snippet>def f(*, **kwds)</snippet></ROW><ROW><id>17582658</id><snippet>def floatToTwosComplementDecimal(intBits,decBits,number):
    if decBits == 0:
        mx = pow(2,intBits-1) - 1 # maximum number
    else:
        mx = pow(2,intBits-1) - pow(2,-1*decBits) # maximum number
    mn = -1*pow(2,intBits-1) # minimum number
    if number &gt; mx:
        print "number:" + str(number) + " has been truncated to: " + str(mx)
        number = mx
    elif number &lt; mn:
        print "number:" + str(number) + " has been truncated to: " + str(mn)
        number = mn
    n = []
    m = 0
    if number &lt; 0:
        n.append(1)
        m = -1*pow(2,intBits-1)
    else:
        n.append(0)
        m = 0
    for i in reversed(range(intBits-1)):
        m1 = m + pow(2,i)
        if number &lt; m1:
            n.append(0)
        else:
            n.append(1)
            m = m1
    for i in range(1,decBits+1):
        m1 = m + pow(2,-1*i)
        if number &lt; m1:
            n.append(0)
        else:
            n.append(1)
            m = m1
    return string.join([str(i) for i in n], '')

def twosComplementDecimalToFloat(intBits,decBits,binString):
    n = 0.0
    if binString[0] == "1":
        n = -1*pow(2,intBits-1)
    for i in range(intBits-1):
        n += int(binString[intBits-1-i])*pow(2,i)
    for i in range(1,decBits+1):
        n += int(binString[intBits-1+i])*pow(2,-1*i)
    return n
</snippet></ROW><ROW><id>17582716</id><snippet>scipy.weave.blitz</snippet></ROW><ROW><id>17582716</id><snippet>"..."</snippet></ROW><ROW><id>17582716</id><snippet>weave.blitz("...")</snippet></ROW><ROW><id>17582716</id><snippet>expr = "temp = cr*((1 - 1/(2*ri[1:nr,1:nz]))*v[0:nr-1,1:nz] + (1 + 1/(2*ri[1:nr,1:nz]))*v[2:nr+1,1:nz]) + cz*(v[1:nr,0:nz-1] + v[1:nr,2:nz+1]); v[1:nr,1:nz] = temp"
temp = np.empty((nr-1, nz-1))
...
while ...
    # internal updates
    weave.blitz(expr)
</snippet></ROW><ROW><id>17582716</id><snippet>weave.blitz(expr, check_size=0)</snippet></ROW><ROW><id>17582716</id><snippet>A</snippet></ROW><ROW><id>17582716</id><snippet>B</snippet></ROW><ROW><id>17582716</id><snippet>from scipy import weave

# [...] Set up code till "# Gauss-Seidel solver"

tic = time.time()
max_v_diff = 1;
A = cr * (1 - 1/(2*ri[1:nr,1:nz]))
B = cr * (1 + 1/(2*ri[1:nr,1:nz]))
expr = "temp = A*v[0:nr-1,1:nz] + B*v[2:nr+1,1:nz] + cz*(v[1:nr,0:nz-1] + v[1:nr,2:nz+1]); v[1:nr,1:nz] = temp"
temp = np.empty((nr-1, nz-1))
while (max_v_diff &gt; tol):
    v_old = v.copy()
    # left boundary updates
    v[0,1:nz] = cr*2*v[1,1:nz] + cz*(v[0,0:nz-1] + v[0,2:nz+2])
    # internal updates
    weave.blitz(expr, check_size=0)
    # right boundary updates
    v[nr,1:nz] = cr*2*v[nr-1,1:nz] + cz*(v[nr,0:nz-1] + v[nr,2:nz+1])
    # reapply grid potentials
    v[31:,29:40] = 1000
    v[19:,54:65] = -200
    # check for convergence
    v_diff = v - v_old
    max_v_diff = np.absolute(v_diff).max()
toc = time.time() - tic
</snippet></ROW><ROW><id>17582933</id><snippet>dictionary = {}
for x in mylist:
    p = x.find('1')
    if p &gt; 0 and x[p-1] == '-': p -= 1
    dictionary[x[0:p].strip()] = x[p:].split()
</snippet></ROW><ROW><id>17582946</id><snippet>ArrayOfBalance</snippet></ROW><ROW><id>17582946</id><snippet>Balance</snippet></ROW><ROW><id>17582946</id><snippet>Amount</snippet></ROW><ROW><id>17582946</id><snippet>Currency</snippet></ROW><ROW><id>17582946</id><snippet>.</snippet></ROW><ROW><id>17582946</id><snippet>balance = {item.Currency: item.Amount for item in response.Balance}  
</snippet></ROW><ROW><id>17583157</id><snippet>'a'</snippet></ROW><ROW><id>17583157</id><snippet>'span'</snippet></ROW><ROW><id>17583157</id><snippet>    ...
    price = soup.find('span',id="v4-27")
    print price #optional price.string will give you just the 15,00 EUR
                #instead of the entire html line
</snippet></ROW><ROW><id>17583304</id><snippet>thread_func</snippet></ROW><ROW><id>17583304</id><snippet>run</snippet></ROW><ROW><id>17583304</id><snippet>exec_()</snippet></ROW><ROW><id>17583304</id><snippet>app.exec_()</snippet></ROW><ROW><id>17583304</id><snippet>exec_</snippet></ROW><ROW><id>17583304</id><snippet>run</snippet></ROW><ROW><id>17583304</id><snippet>import sys
from PyQt5 import QtCore, QtWidgets

class Thread(QtCore.QThread):
    def __init__(self):
        QtCore.QThread.__init__(self)

    def run(self):
        thread_func()
        self.exec_()

timers = []

def thread_func():
    print("Thread works")
    timer = QtCore.QTimer()
    timer.timeout.connect(timer_func)
    timer.start(1000)
    print(timer.remainingTime())
    print(timer.isActive())
    timers.append(timer)

def timer_func():
    print("Timer works")

app = QtWidgets.QApplication(sys.argv)
thread_instance = Thread()
thread_instance.start()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>17583371</id><snippet>Table</snippet></ROW><ROW><id>17583371</id><snippet>@event.listens_for(AuditColumns, "instrument_class", propagate=True)
def instrument_class(mapper, class_):
    if mapper.local_table is not None:
        trigger_for_table(mapper.local_table)

def trigger_for_table(table):
    trig_ddl = DDL("""
                CREATE TRIGGER tr_%s_audit_columns BEFORE INSERT OR UPDATE
                ON %s
                FOR EACH ROW EXECUTE PROCEDURE
                ss_test();
            """ % (table.name, table.name))

    event.listen(table, 'after_create', trig_ddl)
</snippet></ROW><ROW><id>17583371</id><snippet>AuditColumms</snippet></ROW><ROW><id>17583371</id><snippet>mapper.local_table</snippet></ROW><ROW><id>17583371</id><snippet>class.__table__</snippet></ROW><ROW><id>17583676</id><snippet>[d[k]['a']['n'] for k in d]
# =&gt; [u'Backups', 'Rubbish Bin', u'Test3', u'Abandon All Ships - 5 - Stange Love.mp3']
</snippet></ROW><ROW><id>17583676</id><snippet>d</snippet></ROW><ROW><id>17583694</id><snippet>readline</snippet></ROW><ROW><id>17583694</id><snippet>readlines</snippet></ROW><ROW><id>17583853</id><snippet>sys._getframe</snippet></ROW><ROW><id>17583853</id><snippet>inspect</snippet></ROW><ROW><id>17583853</id><snippet>locals()</snippet></ROW><ROW><id>17583853</id><snippet>globals()</snippet></ROW><ROW><id>17583853</id><snippet>import contextlib
import sys

@contextlib.contextmanager
def dumping():
    f = sys._getframe(2)
    fl = f.f_locals.copy()
    try:
        yield None
    finally:
        for name, value in f.f_locals.items():
            if name not in fl:
                print('{} = {}'.format(name, value))

bar = 0
def foo():
    global bar
    bar = 3
    baz = 4
    qux = 5
    with dumping():
        spam = 'eggs'
        eggs = 3
        bar = 4
        baz = 5

foo()
</snippet></ROW><ROW><id>17583853</id><snippet>eggs = 3
spam = eggs
</snippet></ROW><ROW><id>17583853</id><snippet>with</snippet></ROW><ROW><id>17583853</id><snippet>fl = {(name, id(value)) for name, value in f.f_locals.items()}
</snippet></ROW><ROW><id>17583853</id><snippet>locals is globals</snippet></ROW><ROW><id>17583853</id><snippet>dir</snippet></ROW><ROW><id>17583853</id><snippet>print</snippet></ROW><ROW><id>17583853</id><snippet>_getframe(2)</snippet></ROW><ROW><id>17583853</id><snippet>@contextlib.contextmanager
def dumping():
    for i in range(4):
        f = sys._getframe(i)
        print(f.f_code.co_filename, f.f_code.co_firstlineno, f.f_lineno)
</snippet></ROW><ROW><id>17583853</id><snippet>dumping</snippet></ROW><ROW><id>17583853</id><snippet>contextlib.contextmanager</snippet></ROW><ROW><id>17583879</id><snippet>def checkio(element):
    newelement = element.replace("  ", " ").replace("   ", " ")
    return newelement
</snippet></ROW><ROW><id>17583879</id><snippet>def checkio(element):
    return element.replace("  ", " ").replace("   ", " ")
</snippet></ROW><ROW><id>17583879</id><snippet>def checkio(element):
    return " ".join(element.split())
</snippet></ROW><ROW><id>17583879</id><snippet>split</snippet></ROW><ROW><id>17583879</id><snippet>&gt;&gt;&gt; "I    like  python".split()
["I", "like", "python"]
</snippet></ROW><ROW><id>17583879</id><snippet>join</snippet></ROW><ROW><id>17583879</id><snippet>&gt;&gt;&gt; ' '.join(["I", "like", "python"])
"I like python"
&gt;&gt;&gt; '__HELP__'.join(["I", "like", "python"])
"I__HELP__like__HELP__python"
</snippet></ROW><ROW><id>17583879</id><snippet>newelement = element.replace("  ", " ") and element.replace("   ", " ")
</snippet></ROW><ROW><id>17583879</id><snippet>and</snippet></ROW><ROW><id>17583879</id><snippet>""</snippet></ROW><ROW><id>17583879</id><snippet>True</snippet></ROW><ROW><id>17583879</id><snippet>and</snippet></ROW><ROW><id>17583879</id><snippet>True</snippet></ROW><ROW><id>17583879</id><snippet>False</snippet></ROW><ROW><id>17583879</id><snippet>&gt;&gt;&gt; a = "a" and "b"
&gt;&gt;&gt; a
"b"
&gt;&gt;&gt; a = "" and "b"
&gt;&gt;&gt; a
""
&gt;&gt;&gt; # It works oppositely with "or"
&gt;&gt;&gt; a = "a" or "b"
&gt;&gt;&gt; a
"a"
&gt;&gt;&gt; a = "" or "b"
&gt;&gt;&gt; a
"b"
</snippet></ROW><ROW><id>17583879</id><snippet>element.replace("  ", " ")</snippet></ROW><ROW><id>17583879</id><snippet>element.replace("   ", " ")</snippet></ROW><ROW><id>17583879</id><snippet>True</snippet></ROW><ROW><id>17583879</id><snippet>and</snippet></ROW><ROW><id>17584058</id><snippet>'status': status()</snippet></ROW><ROW><id>17584058</id><snippet>'status': self.status()</snippet></ROW><ROW><id>17584058</id><snippet>AttributeError: 'Inventory' object has no attribute 'inventory'
</snippet></ROW><ROW><id>17584058</id><snippet>inventory</snippet></ROW><ROW><id>17584058</id><snippet>status</snippet></ROW><ROW><id>17584058</id><snippet>inventory</snippet></ROW><ROW><id>17584058</id><snippet>class Inventory(object):
    def __init__(self):
        self.inventory = {
            'cash': 500,
            'paycheck': 1,
            'savings': 1000,
            'current_car': 0,
            'possible_cars': ['Chevy', 'Honda', 'BMW'],
            'car_cost': [0, 100, 200],
            'current_house': 0,
            'possible_houses': ['apartment','townhouse','suite'],
            'house_cost': [0, 150, 300],
            'status': self.status  # &lt;--- don't use parens ()
        }
</snippet></ROW><ROW><id>17584058</id><snippet>&gt;&gt;&gt; my_inventory = Inventory()
&gt;&gt;&gt; my_inventory.inventory['status']()
True
</snippet></ROW><ROW><id>17584147</id><snippet>bash</snippet></ROW><ROW><id>17584147</id><snippet>os.system</snippet></ROW><ROW><id>17584147</id><snippet>sh</snippet></ROW><ROW><id>17584147</id><snippet>subprocess.check_call()</snippet></ROW><ROW><id>17584147</id><snippet>shell=True</snippet></ROW><ROW><id>17584147</id><snippet>subprocess</snippet></ROW><ROW><id>17584147</id><snippet>import subprocess
command = """mplayer -loop 0 -playlist &lt;(find "/mnt/music/soundtrack" -type f | egrep -i '(\.mp3|\.wav|\.flac|\.ogg|\.avi|\.flv|\.mpeg|\.mpg)'| sort)"""
subprocess.check_call(command, shell=True)
</snippet></ROW><ROW><id>17584157</id><snippet>import re

def multiple_replace(dict, text):
  # Create a regular expression  from the dictionary keys
  regex = re.compile(r'(%s)' % "|".join(dict.keys()))
  return regex.sub(lambda mo: dict[
      [ k for k in dict if
      re.search(k, mo.string[mo.start():mo.end()])
      ][0]], text)

d = { r'ba[rz]*' : 'bar', '&lt;' : '[' }
s = 'barzzzzzz &lt;'

print multiple_replace(d, s)
</snippet></ROW><ROW><id>17584157</id><snippet>bar [
</snippet></ROW><ROW><id>17584173</id><snippet>def function_that_could_return_anything(data): 
    # do stuff
    return_args = ['list', 'of', 'return', 'values']
    return_kwargs = {'dict': 0, 'of': 1, 'return': 2, 'values': 3}
    return return_args, return_kwargs

a, b = function_that_could_return_anything(...)
for thing in  a: 
    # do stuff

for item in b.items(): 
    # do stuff
</snippet></ROW><ROW><id>17584173</id><snippet>get()</snippet></ROW><ROW><id>17584173</id><snippet>dict_return_value = foo()
a = dict_return_value.get('key containing a', None)
if a:
    # do stuff with a
</snippet></ROW><ROW><id>17584176</id><snippet>attrs = {'readonly': [('employee_id.groups', 'contains', 'hr_th.group_thw_emp')]}
</snippet></ROW><ROW><id>17584176</id><snippet>&lt;field name="employee_is_in_thw_emp" invisible="1" /&gt;
&lt;field name="employee_id" attrs="{'readonly': [('employee_is_in_thw_emp', '=', True)]}" /&gt;
</snippet></ROW><ROW><id>17584213</id><snippet>browser.find_element_by_css_selector("[href='" + lStr + "']")
#browser.find_element_by_css_selector("[href='"+ str(lStr) + "']")
</snippet></ROW><ROW><id>17584251</id><snippet>&gt;&gt;&gt; print("豆瓣".encode("utf8").decode('gbk'))
璞嗙摚
</snippet></ROW><ROW><id>17584513</id><snippet>'ENDPOINT':'/db/data'</snippet></ROW><ROW><id>17584513</id><snippet>a = Anode.objects.create(...)</snippet></ROW><ROW><id>17584513</id><snippet>a.save()</snippet></ROW><ROW><id>17584513</id><snippet>Anode.objects.create()</snippet></ROW><ROW><id>17584513</id><snippet>a = Anode(...)
a.save()
</snippet></ROW><ROW><id>17584558</id><snippet>class FunctionObject(object):
    def __call__(self):
        return foo

def f():
    foo = 3
    FunctionObject()() # raises UnboundLocalError
</snippet></ROW><ROW><id>17584558</id><snippet>__call__</snippet></ROW><ROW><id>17584558</id><snippet>def f():
    foo = 3
    class FunctionObject(object):
        def __call__(self):
            return foo
    return FunctionObject()
print f()() # prints 3, since __call__ has access to the scope where it was defined,
            # though it doesn't have access to the scope where the FunctionObject
            # was created
</snippet></ROW><ROW><id>17584588</id><snippet>assigned_leaders = lead.objects.filter(assigned_to__in=usercompany).distinct()
csvfile=StringIO.StringIO()
csvwriter =csv.writer(csvfile)
for leads in assigned_leads:
    csvwriter.writerow([leads.business_name, leads.first_name, leads.last_name, leads.email, leads.phone_number,leads.address, leads.city, leads.state, leads.zipcode, leads.submission_date, leads.time_frame, leads.comments])
message = EmailMessage("Hello","Your Leads","myemail@gmail.com",["myemail@gmail.com"])
message.attach('invoice.csv', csvfile.getvalue(), 'text/csv')
</snippet></ROW><ROW><id>17584589</id><snippet>http://imgur.com</snippet></ROW><ROW><id>17584589</id><snippet>def fixImgurLinks(url):
    if url.lower().startswith("http://imgur.com"):
        url = url.replace("http://imgur", "http://i.imgur",1) # Only replace the first instance.
        if not url.endswith(".jpg"):
            url +=".jpg"
    return url

for u in ["http://imgur.com/Cuv9oau","http://www.google.com/search?q=http://imgur"]:
    print fixImgurLinks(u)
</snippet></ROW><ROW><id>17584589</id><snippet>&gt;&gt;&gt; http://i.imgur.com/Cuv9oau.jpg
&gt;&gt;&gt; http://www.google.com/search?q=http://imgur
</snippet></ROW><ROW><id>17584706</id><snippet>No</snippet></ROW><ROW><id>17584715</id><snippet>for printer in c.win32_printer():
    if printer.DEVICEID == "\\\\server\\printer":
    printer.delete_()
</snippet></ROW><ROW><id>17584820</id><snippet>__getattribute__</snippet></ROW><ROW><id>17584820</id><snippet>__getattribute__</snippet></ROW><ROW><id>17584820</id><snippet>p.value</snippet></ROW><ROW><id>17584820</id><snippet>__getattribute__</snippet></ROW><ROW><id>17584820</id><snippet>if attr == 'value':  return self.another_value()</snippet></ROW><ROW><id>17584820</id><snippet>another_value</snippet></ROW><ROW><id>17584820</id><snippet>__getattribute__</snippet></ROW><ROW><id>17584820</id><snippet>return super(MyObjectProxy, self).__getattribute__(attr)</snippet></ROW><ROW><id>17584820</id><snippet>Proxy</snippet></ROW><ROW><id>17584820</id><snippet>__getattribute__</snippet></ROW><ROW><id>17584820</id><snippet>another_value</snippet></ROW><ROW><id>17584820</id><snippet>Myobject</snippet></ROW><ROW><id>17584820</id><snippet>return super(MyObjectProxy, self).__getattribute__(attr)</snippet></ROW><ROW><id>17584820</id><snippet>Traceback (most recent call last):
  File "proxytest.py", line 22, in &lt;module&gt;
    print p.value
  File "proxytest.py", line 13, in __getattribute__
    if attr == 'value':  return self.another_value() # return method or attribute, doesn't matter (same effect)
  File "proxytest.py", line 14, in __getattribute__
    return super(MyObjectProxy, self).__getattribute__(attr)
  File "/home/hugh/m/tspace/proxy.py", line 10, in __getattribute__
    return getattr(object.__getattribute__(self, "_obj"), name)
AttributeError: 'MyObject' object has no attribute 'another_value'
</snippet></ROW><ROW><id>17584820</id><snippet>if attr == 'value': return self.another_value()</snippet></ROW><ROW><id>17584820</id><snippet>if attr == 'value':  return object.__getattribute__(self, 'another_value')()</snippet></ROW><ROW><id>17584847</id><snippet>--noconsole</snippet></ROW><ROW><id>17584847</id><snippet>python pyinstaller.py --noconsole yourscript.py
</snippet></ROW><ROW><id>17584847</id><snippet>--noconsole</snippet></ROW><ROW><id>17584908</id><snippet>myFunction("Checking Processes A%s/B%s" % (env,env),'')
</snippet></ROW><ROW><id>17585060</id><snippet>randint(1,betCheck+(10-handValue[1]))
</snippet></ROW><ROW><id>17585060</id><snippet>randrange(1,-7,-8)
</snippet></ROW><ROW><id>17585060</id><snippet>betCheck+(10-handValue[1])</snippet></ROW><ROW><id>17585255</id><snippet>sockadd</snippet></ROW><ROW><id>17585255</id><snippet>data = sockadd.recv(1024)</snippet></ROW><ROW><id>17585480</id><snippet>deny</snippet></ROW><ROW><id>17585480</id><snippet>rules = [Rule(SgmlLinkExtractor(deny=[r'logout/']), follow=True),]
</snippet></ROW><ROW><id>17585480</id><snippet>response.url</snippet></ROW><ROW><id>17585480</id><snippet>parse</snippet></ROW><ROW><id>17585480</id><snippet>def parse(self, response):
    if 'logout' in response.url:
        return

    # extract items
</snippet></ROW><ROW><id>17585497</id><snippet>__all__</snippet></ROW><ROW><id>17586126</id><snippet>&gt;&gt;&gt; hash("Look at me!")
4343814758193556824
&gt;&gt;&gt; f = "Look at me!"
&gt;&gt;&gt; hash(f)
4343814758193556824
</snippet></ROW><ROW><id>17586126</id><snippet>&gt;&gt;&gt; hash("Look at me!!")
6941904779894686356
</snippet></ROW><ROW><id>17586126</id><snippet>set</snippet></ROW><ROW><id>17586126</id><snippet>dict</snippet></ROW><ROW><id>17586126</id><snippet>list</snippet></ROW><ROW><id>17586126</id><snippet>if x in values:</snippet></ROW><ROW><id>17586126</id><snippet>x</snippet></ROW><ROW><id>17586126</id><snippet>values</snippet></ROW><ROW><id>17586126</id><snippet>list</snippet></ROW><ROW><id>17586126</id><snippet>set</snippet></ROW><ROW><id>17586126</id><snippet>if x in values:</snippet></ROW><ROW><id>17586126</id><snippet>x</snippet></ROW><ROW><id>17586126</id><snippet>x</snippet></ROW><ROW><id>17586126</id><snippet>x</snippet></ROW><ROW><id>17586126</id><snippet>set</snippet></ROW><ROW><id>17586126</id><snippet>dict</snippet></ROW><ROW><id>17586126</id><snippet>list</snippet></ROW><ROW><id>17586126</id><snippet>list</snippet></ROW><ROW><id>17586126</id><snippet>set</snippet></ROW><ROW><id>17586126</id><snippet>dict</snippet></ROW><ROW><id>17586126</id><snippet>$ /opt/python33/bin/python3
Python 3.3.2 (default, Jun 17 2013, 17:49:21) 
[GCC 4.6.3] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; hash("foo")
1849024199686380661
&gt;&gt;&gt; 
$ /opt/python33/bin/python3
Python 3.3.2 (default, Jun 17 2013, 17:49:21) 
[GCC 4.6.3] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; hash("foo")
-7416743951976404299
</snippet></ROW><ROW><id>17586463</id><snippet>folder=Folder.objects.all().extra(select = {'fcount':33})
</snippet></ROW><ROW><id>17586617</id><snippet>FSEvents</snippet></ROW><ROW><id>17586617</id><snippet>FSEvents</snippet></ROW><ROW><id>17586617</id><snippet>if(event.is_directory):
    files_in_dir = [event.src_path+"/"+f for f in os.listdir(event.src_path)]
    mod_file_path = max(files_in_dir, key=os.path.getmtime)
</snippet></ROW><ROW><id>17586617</id><snippet>mod_file_path</snippet></ROW><ROW><id>17586707</id><snippet>with open('file.txt') as myfile:
    d = dict(line.rstrip().split(None, 1) for line in myfile)
</snippet></ROW><ROW><id>17587090</id><snippet>import pygame

pygame.init()
screen = pygame.display.set_mode((300, 300))
ck = (127, 33, 33)
size = 25
while True:
  if pygame.event.get(pygame.MOUSEBUTTONDOWN):
    s = pygame.Surface((50, 50))

    # first, "erase" the surface by filling it with a color and
    # setting this color as colorkey, so the surface is empty
    s.fill(ck)
    s.set_colorkey(ck)

    pygame.draw.circle(s, (255, 0, 0), (size, size), size, 2)

    # after drawing the circle, we can set the 
    # alpha value (transparency) of the surface
    s.set_alpha(75)

    x, y = pygame.mouse.get_pos()
    screen.blit(s, (x-size, y-size))

  pygame.event.poll()
  pygame.display.flip()
</snippet></ROW><ROW><id>17587188</id><snippet>*</snippet></ROW><ROW><id>17587886</id><snippet>x+=2</snippet></ROW><ROW><id>17587886</id><snippet>y+=2</snippet></ROW><ROW><id>17587886</id><snippet>x+=2</snippet></ROW><ROW><id>17587886</id><snippet>y+=2</snippet></ROW><ROW><id>17587886</id><snippet>sqrt(2**2 + 2**2)</snippet></ROW><ROW><id>17587886</id><snippet>Font</snippet></ROW><ROW><id>17587886</id><snippet>draw_stuff</snippet></ROW><ROW><id>17587886</id><snippet>###</snippet></ROW><ROW><id>17587886</id><snippet>import pygame, sys
import time
from pygame.locals import *

import math

### some simple vector helper functions, stolen from http://stackoverflow.com/a/4114962/142637
def magnitude(v):
    return math.sqrt(sum(v[i]*v[i] for i in range(len(v))))

def add(u, v):
    return [ u[i]+v[i] for i in range(len(u)) ]

def sub(u, v):
    return [ u[i]-v[i] for i in range(len(u)) ]    

def dot(u, v):
    return sum(u[i]*v[i] for i in range(len(u)))

def normalize(v):
    vmag = magnitude(v)
    return [ v[i]/vmag  for i in range(len(v)) ]

pygame.init()
fpsClock=pygame.time.Clock()
screen= pygame.display.set_mode((640,480))
pygame.display.set_caption('Test')
fontobj= pygame.font.SysFont('Arial',50)
mousex,mousey=0,0
x_1=15
x_2=600 #these varaibles (x_1, x_2) are different, but they are constants-- they will never change; think jon, the paddle will not move from left to right
y=0 #the y variable changes, but for this test it will be the same for both paddles bc they are moving in unisen.
x_ball=320
y_ball=240
direction=""

### the speed of the ball and the paddles
speed = 5

### a cache for font objects
cache={}
def get_msg(msg):
    if not msg in cache:
      cache[msg] = fontobj.render(msg, False , pygame.Color('green'))
    return cache[msg]

def draw_stuff (y):
        msg=str(x_ball)
        global x_ball,y_ball,direction

        ### get the font surface from the cache
        textobj=get_msg(msg)
        screen.blit(textobj,(160,5))
        screen.blit(textobj,(480,5))
        pygame.draw.line(screen,pygame.Color('grey'),(320,0), (320,480), 4)
        pygame.draw.line(screen,pygame.Color('grey'),(0,3), (640,3), 10)
        pygame.draw.line(screen,pygame.Color('grey'),(0,475), (640,475), 10)
        pygame.draw.rect(screen, pygame.Color('grey'),(x_1,y,30,192))
        pygame.draw.rect(screen, pygame.Color('grey'),(x_2,y,30,192))
        if x_ball==60 or x_ball==570:
            print "we have reached the side",fpsClock.get_fps()
            if ball_hit(y,x_ball,y_ball):
                topl,middlel,bottoml=loc_of_ball_hitl(y,x_ball,y_ball)
                topr,middler,bottomr=loc_of_ball_hitr(y,x_ball,y_ball)
                if topl:
                    direction="upleft"
                elif middlel:
                    direction='midleft'
                elif bottoml:
                    direction='downleft'
                elif topr:
                    direction="upright"
                elif middler:
                    direction="midright"
                elif bottomr:
                    direction="downright"
                else:
                    direction=""

        ### create a vector
        move = (0, 0)
        if not direction:
            print "we have ",fpsClock.get_fps()
            move = (1, 0)
        elif direction=="upleft":
            move = (1, -1)
        elif direction=="midleft":
            move = (1, 0)
        elif direction=="downleft":
            move = (1, 1)
        elif direction=="upright":
            move = (-1, -1)
        elif direction=="midright":
            move = (-1, 0)
        elif direction=="downright":
            move = (-1, 1)
        ### normalize it and apply the speed
        move = [int(c * speed) for c in normalize(move)]
        ### update ball position with movement vector
        x_ball, y_ball = x_ball + move[0], y_ball + move[1]
        ball(x_ball, y_ball)

def ball(x,y):
    pygame.draw.circle(screen, pygame.Color('red'), (x,y), 15, 0)
    pygame.display.update()
def ball_hit(y,ball_x,ball_y):
    if ball_x==60 and ball_y&gt;=y and ball_y&lt;y+192 or ball_x==570 and ball_y&gt;=y and ball_y&lt;y+192:
        return True
    return False
def loc_of_ball_hitl(y,ball_x,ball_y):
   middle=False
   top=False
   bottom=False
   if ball_x==60 and ball_y&gt;=y+64 and ball_y&lt;y+128:
        middle=True
   elif ball_x==60 and ball_y&gt;=y and ball_y&lt;y+64:
        top=True
   elif ball_x==60 and ball_y&gt;=y+128 and ball_y&lt;y+192:
        bottom=True
   return top, middle, bottom
def loc_of_ball_hitr(y,ball_x,ball_y):
   middle=False
   top=False
   bottom=False
   if ball_x==570 and ball_y&gt;=y+64 and ball_y&lt;y+128:
        middle=True
   elif ball_x==570 and ball_y&gt;=y and ball_y&lt;y+64:
        top=True
   elif ball_x==570 and ball_y&gt;=y+128 and ball_y&lt;y+192:
        bottom=True
   return top, middle, bottom
while True:
    screen.fill(pygame.Color('black'))
    if mousey&gt;y:
        y+=speed
    if mousey&lt;y:
        y-=speed

    ### call draw_stuff only once
    draw_stuff(y)
    for event in pygame.event.get():
        if event.type==QUIT:
            pygame.quit()
            sys.exit()
        elif event.type== MOUSEMOTION:
            mousex,mousey=event.pos
    pygame.display.update()
    ### realistic framerate
    fpsClock.tick(60)
</snippet></ROW><ROW><id>17587975</id><snippet>TargetPath</snippet></ROW><ROW><id>17587975</id><snippet>import win32com.client
ws = win32com.client.Dispatch("wscript.shell")
scut = ws.CreateShortcut('run_idle.lnk')
scut.TargetPath = '"c:/python27/python.exe"'
scut.Arguments = '-m idlelib.idle'
scut.Save()
</snippet></ROW><ROW><id>17587975</id><snippet>Arguments</snippet></ROW><ROW><id>17587975</id><snippet>&gt;&gt;&gt; scut.Arguments = []
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "c:\python27\lib\site-packages\win32com\client\dynamic.py", line 570, in __setattr__
    raise AttributeError("Property '%s.%s' can not be set." % (self._username_, attr))
AttributeError: Property '&lt;unknown&gt;.Arguments' can not be set.
</snippet></ROW><ROW><id>17588100</id><snippet>TfidfVectorizer</snippet></ROW><ROW><id>17588100</id><snippet>HashingVectorizer</snippet></ROW><ROW><id>17588100</id><snippet>TfidfTransformer</snippet></ROW><ROW><id>17588474</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>17588474</id><snippet>shell=False</snippet></ROW><ROW><id>17588474</id><snippet>check_output</snippet></ROW><ROW><id>17588474</id><snippet>Popen</snippet></ROW><ROW><id>17588474</id><snippet>shell=False</snippet></ROW><ROW><id>17588474</id><snippet>cleartool</snippet></ROW><ROW><id>17588474</id><snippet>cleartool find ... -name '*.elf' -version "lbtype(CXC1111-111)" ...
</snippet></ROW><ROW><id>17588474</id><snippet>cleartool</snippet></ROW><ROW><id>17588474</id><snippet>*.elf</snippet></ROW><ROW><id>17588474</id><snippet>lbtype(CXC1111-111)</snippet></ROW><ROW><id>17588474</id><snippet>shell=False</snippet></ROW><ROW><id>17588474</id><snippet>shell=False</snippet></ROW><ROW><id>17588474</id><snippet>True</snippet></ROW><ROW><id>17588642</id><snippet>list_col_b, list_col_c = zip(*MyModel.objects.values_list('col_b', 'col_c'))
</snippet></ROW><ROW><id>17588839</id><snippet>href="{{ 'http://www.link.com/blah/page.htm'|cy:'http://www.link.com/welsh/blah/page.htm' }}"

import re
print re.findall("'(http://(?:.*?))'", href)
# ['http://www.link.com/blah/page.htm', 'http://www.link.com/welsh/blah/page.htm']
</snippet></ROW><ROW><id>17589262</id><snippet>filteredList = [b for b in bookmarkList if tag in b[1]]
</snippet></ROW><ROW><id>17589262</id><snippet>break</snippet></ROW><ROW><id>17589316</id><snippet>os.getcwd()</snippet></ROW><ROW><id>17589316</id><snippet>chdir</snippet></ROW><ROW><id>17589316</id><snippet>fchdir(fd)</snippet></ROW><ROW><id>17589701</id><snippet>datetime.time</snippet></ROW><ROW><id>17589701</id><snippet>time.time()</snippet></ROW><ROW><id>17589701</id><snippet>datetime.time</snippet></ROW><ROW><id>17589701</id><snippet>def dtt2timestamp(dtt):
    ts = (dtt.hour * 60 + dtt.minute) * 60 + dtt.second
    #if you want microseconds as well
    ts += dtt.microsecond * 10**(-6)
    return ts
</snippet></ROW><ROW><id>17589738</id><snippet>/etc/hosts</snippet></ROW><ROW><id>17589738</id><snippet>localhost</snippet></ROW><ROW><id>17589738</id><snippet>127.0.0.1  localhost
::1        localhost
</snippet></ROW><ROW><id>17589738</id><snippet>127.0.0.1  localhost

# Having multiple localhost entries causes App Enginge dev_appserver.py to fail.
#  IPv6 not currently needed, and the dev server IS needed, so commenting out.
#::1        localhost
</snippet></ROW><ROW><id>17589738</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>17589740</id><snippet>\D</snippet></ROW><ROW><id>17589740</id><snippet>\d</snippet></ROW><ROW><id>17589740</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "15,00 EUR"
&gt;&gt;&gt; price_string = re.search('(\d+,\d+)', s).group(1)
&gt;&gt;&gt; price_string
'15,00'
&gt;&gt;&gt; float(price_string.replace(',', '.'))
15.0
</snippet></ROW><ROW><id>17590630</id><snippet>[formatter_generic_form]
format='%(asctime)s , %(levelname)s , %(message)s'
datefmt='%Y-%m-%d %H:%M:%S'
</snippet></ROW><ROW><id>17590819</id><snippet>In [11]: plot(df_x, df_y)  # matplotlib.pyplot.plot
Out[11]:
[&lt;matplotlib.lines.Line2D at 0x109c02910&gt;,
 &lt;matplotlib.lines.Line2D at 0x109c02b90&gt;,
 &lt;matplotlib.lines.Line2D at 0x109c02ed0&gt;]
</snippet></ROW><ROW><id>17590819</id><snippet>pylab.legend(df_x.columns)
</snippet></ROW><ROW><id>17590819</id><snippet>.plot</snippet></ROW><ROW><id>17590819</id><snippet>In [21]: df_x = pd.DataFrame([[1,2,1],[2,3,4]], columns=list('ABC'))

In [22]: df_y = pd.DataFrame([[2,6,1],[4,9,4]], columns=list('ABC'))

In [23]: pd.DataFrame({'x': df_x.stack(), 'y': df_y.stack()}).reset_index(level=1).pivot('x', 'level_1', 'y')
Out[23]:
level_1   A   B   C
x
1         2 NaN   1
2         4   6 NaN
3       NaN   9 NaN
4       NaN NaN   4
</snippet></ROW><ROW><id>17591026</id><snippet>dialog = QDialog()
layout = QVBoxLayout()
label = QLabel('This is a label')
edit = QLineEdit('This is a line edit box')
layout.addWidget(label)
layout.addWidget(edit)
dialog.setLayout(layout)
</snippet></ROW><ROW><id>17591089</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>17591089</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17591089</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; dic = OrderedDict()
for item in extendedPeriods:
    k,v = item.split(': ')
    dic.setdefault(k,[]).append(v)
...     
&gt;&gt;&gt; for k,v in dic.iteritems():
...     print "/".join(v)
...     
1200 - 1500/1800 - 2330
1200 - 1500/1800 - 2330
1200 - 1500/1800 - 2330
1200 - 1500/1800 - 2330
1200 - 1500/1800 - 2330
1200 - 1500/1800 - 2330
</snippet></ROW><ROW><id>17591089</id><snippet>&gt;&gt;&gt; print "/".join(dic['0'])   #sunday
1200 - 1500/1800 - 2330
&gt;&gt;&gt; print "/".join(dic['2'])   #tuesday
1200 - 1500/1800 - 2330
</snippet></ROW><ROW><id>17591271</id><snippet>if isinstance(var, numbers.Integral):
    pass # whatever
</snippet></ROW><ROW><id>17591597</id><snippet>counter</snippet></ROW><ROW><id>17591597</id><snippet>'counter'</snippet></ROW><ROW><id>17591597</id><snippet>'counter'</snippet></ROW><ROW><id>17591597</id><snippet>TypeError: argument of type 'a' is not iterable</snippet></ROW><ROW><id>17591597</id><snippet>__dict__</snippet></ROW><ROW><id>17591597</id><snippet>&gt;&gt;&gt; class A(object):
...     i = 0
...     def __init__(self, num):
...         self.i = num
...
&gt;&gt;&gt; x = A(3)
&gt;&gt;&gt; x.i
3
&gt;&gt;&gt; 'i' in x.__dict__
True
&gt;&gt;&gt; 'counter' in x.__dict__
False
</snippet></ROW><ROW><id>17591597</id><snippet>hasattr</snippet></ROW><ROW><id>17591597</id><snippet>&gt;&gt;&gt; hasattr(x, 'counter')
False
&gt;&gt;&gt; hasattr(x, 'i')
True
</snippet></ROW><ROW><id>17591742</id><snippet>list_of_sets = [set() for i in range(domain_number)]
</snippet></ROW><ROW><id>17591742</id><snippet>common_set = set()
for i, s in enumerate(list_of_sets):
    if i == domain_number - 1:
        break
    common_set = common_set.update(s.intersection(list_of_sets[i+1])
</snippet></ROW><ROW><id>17591742</id><snippet>update</snippet></ROW><ROW><id>17591742</id><snippet>add</snippet></ROW><ROW><id>17591967</id><snippet>foo</snippet></ROW><ROW><id>17591967</id><snippet>for foo in my_list:
    # process item
</snippet></ROW><ROW><id>17591967</id><snippet>enumerate()</snippet></ROW><ROW><id>17591967</id><snippet>for i, foo in enumerate(my_list):
    # process item
</snippet></ROW><ROW><id>17591967</id><snippet>for</snippet></ROW><ROW><id>17591967</id><snippet>range()</snippet></ROW><ROW><id>17591967</id><snippet>len()</snippet></ROW><ROW><id>17591967</id><snippet>for each</snippet></ROW><ROW><id>17591967</id><snippet>for</snippet></ROW><ROW><id>17592098</id><snippet>decimal</snippet></ROW><ROW><id>17592098</id><snippet>getint</snippet></ROW><ROW><id>17592098</id><snippet>tkinter</snippet></ROW><ROW><id>17592098</id><snippet>decimal</snippet></ROW><ROW><id>17592168</id><snippet>[::-1]</snippet></ROW><ROW><id>17592168</id><snippet>[::1]</snippet></ROW><ROW><id>17592168</id><snippet>'reverse' is not defined</snippet></ROW><ROW><id>17592168</id><snippet>manualReverse</snippet></ROW><ROW><id>17592168</id><snippet>def manualReverse(list):
    return list[::-1]

def reverse(list):
    return list(reversed(list))   
</snippet></ROW><ROW><id>17592168</id><snippet>list</snippet></ROW><ROW><id>17592168</id><snippet>list(reversed(list))</snippet></ROW><ROW><id>17592244</id><snippet>tweet = tweet.replace('\n','')
</snippet></ROW><ROW><id>17592340</id><snippet>put</snippet></ROW><ROW><id>17592340</id><snippet>put</snippet></ROW><ROW><id>17592340</id><snippet>storer</snippet></ROW><ROW><id>17592340</id><snippet>append</snippet></ROW><ROW><id>17592340</id><snippet>table</snippet></ROW><ROW><id>17592340</id><snippet>frame_table</snippet></ROW><ROW><id>17592340</id><snippet>pd.DataFrame(df)</snippet></ROW><ROW><id>17592340</id><snippet>df</snippet></ROW><ROW><id>17592340</id><snippet>if 'test' in tempstore:
    tempstore.remove('test')
</snippet></ROW><ROW><id>17592340</id><snippet>for df in store.select_as_multiple(.....):
     tempstore.append('test', df)
</snippet></ROW><ROW><id>17592648</id><snippet>class params:
    a = 1
    b = 2
    c = 3
    d = 4

    def __call__(self):
        r = dict()
        for attr in dir(self):
            if not attr.startswith('_'):
                r[attr] = getattr(self, attr)
        return r

p = params()
function(**p())
</snippet></ROW><ROW><id>17592648</id><snippet>function</snippet></ROW><ROW><id>17592648</id><snippet>tuple()</snippet></ROW><ROW><id>17592648</id><snippet>dict()</snippet></ROW><ROW><id>17592648</id><snippet>r</snippet></ROW><ROW><id>17593231</id><snippet>if rcv_record[rcv_record_len-1][6] &lt;&gt; first.Units_case or rcv_record[rcv_record-1][3] &lt;&gt; first.Cost: &lt;&lt; THIS PIECE
</snippet></ROW><ROW><id>17593231</id><snippet>rcv_record - 1</snippet></ROW><ROW><id>17593231</id><snippet>rcv_record</snippet></ROW><ROW><id>17593349</id><snippet>args</snippet></ROW><ROW><id>17593349</id><snippet>celery.subtask()</snippet></ROW><ROW><id>17593349</id><snippet>subtask('smallTask', args=(obj,)).apply_async()
</snippet></ROW><ROW><id>17593349</id><snippet>Task.subtask()</snippet></ROW><ROW><id>17593349</id><snippet>smallTask</snippet></ROW><ROW><id>17593349</id><snippet>smallTask.subtask((obj,)).apply_async()
</snippet></ROW><ROW><id>17593349</id><snippet>Task.s()</snippet></ROW><ROW><id>17593349</id><snippet>smallTask.s(obj).apply_async()
</snippet></ROW><ROW><id>17593349</id><snippet>celery.subtask()</snippet></ROW><ROW><id>17593349</id><snippet>Task.s()</snippet></ROW><ROW><id>17593349</id><snippet>Task.s(*args, **kwarg)</snippet></ROW><ROW><id>17593349</id><snippet>Task.subtask()</snippet></ROW><ROW><id>17593437</id><snippet>lst = ['2    19   2839475239874 hda']

# Extracting the device part
dev = filter(lambda s: s[0] is 'h', lst[0].split())[0]

# Inserting it
cmd = 'dd if=/dev/zero of=/dev/{0} bs=512 count=1'.format(dev)
</snippet></ROW><ROW><id>17593585</id><snippet>Sub BatchSaveAs()
    ' Set output_dir appropriately
    ChangeFileOpenDirectory "output_dir"

    outDocName = Left(ActiveDocument.Name, Len(ActiveDocument.Name) - 4) &amp; ".xls"

    ActiveDocument.SaveAs FileName:=outDocName, FileFormat:= _
        wdFormatFilteredHTML, LockComments:=False, Password:="", AddToRecentFiles _
        :=True, WritePassword:="", ReadOnlyRecommended:=False, EmbedTrueTypeFonts _
        :=False, SaveNativePictureFormat:=False, SaveFormsData:=False, _
        SaveAsAOCELetter:=False

    ActiveWindow.View.Type = wdWebView

    Application.Quit SaveChanges:=wdDoNotSaveChanges
End Sub
</snippet></ROW><ROW><id>17593585</id><snippet>winword file_name /mBatchSaveAs
</snippet></ROW><ROW><id>17593665</id><snippet>console.log( 2 + ' and ' + 09-07-2014 )
</snippet></ROW><ROW><id>17593665</id><snippet>console.log( '{{ item.0 }}' + ' and ' + '{{ item.1 }}' )
</snippet></ROW><ROW><id>17593665</id><snippet>console.log( '{{ item.0 }} and {{ item.1 }}' )
</snippet></ROW><ROW><id>17593779</id><snippet>check_date</snippet></ROW><ROW><id>17593779</id><snippet>print "LASTPULL Date : ", repr(check_date)
</snippet></ROW><ROW><id>17593779</id><snippet>LASTPULL</snippet></ROW><ROW><id>17594003</id><snippet>UTF-16</snippet></ROW><ROW><id>17594003</id><snippet>decompressed_data = gz.read().decode('utf-16')
</snippet></ROW><ROW><id>17594003</id><snippet>Unicode</snippet></ROW><ROW><id>17594003</id><snippet>static void Main(string[] args)
    {
        FileStream f = new FileStream("test", FileMode.CreateNew);
        using (StreamWriter w = new StreamWriter(f))
        {
            w.Write(Compress("hello"));
        }
    }
    public static string Compress(string s)
    {
        var bytes = Encoding.Unicode.GetBytes(s);
        using (var msi = new MemoryStream(bytes))
        using (var mso = new MemoryStream())
        {
            using (var gs = new GZipStream(mso, CompressionMode.Compress))
            {
                msi.CopyTo(gs);
            }
            return Convert.ToBase64String(mso.ToArray());
        }
    }
</snippet></ROW><ROW><id>17594003</id><snippet>import base64
import cStringIO
import gzip

f = open('test','rb')
s = base64.standard_b64decode(f.read())
buff = cStringIO.StringIO(s)

with gzip.GzipFile(fileobj=buff) as gz:
    decompressed_data = gz.read()
    print decompressed_data.decode('utf-16')
</snippet></ROW><ROW><id>17594003</id><snippet>decode('utf-16)</snippet></ROW><ROW><id>17594003</id><snippet>&gt;&gt;&gt;h e l l o
</snippet></ROW><ROW><id>17594003</id><snippet>&gt;&gt;&gt;hello
</snippet></ROW><ROW><id>17594067</id><snippet>&gt;&gt;&gt; print("Approved","Summer School","Failed")[0]
Approved
&gt;&gt;&gt; print("Approved","Summer School","Failed")[1]
Summer School
&gt;&gt;&gt; print("Approved","Summer School","Failed")[2]
Failed
</snippet></ROW><ROW><id>17594067</id><snippet>(g&lt;7)+(g&lt;3)</snippet></ROW><ROW><id>17594067</id><snippet>&gt;= 0</snippet></ROW><ROW><id>17594067</id><snippet>False + False</snippet></ROW><ROW><id>17594067</id><snippet>&lt;= 2</snippet></ROW><ROW><id>17594067</id><snippet>True + True</snippet></ROW><ROW><id>17594067</id><snippet>bool</snippet></ROW><ROW><id>17594067</id><snippet>int</snippet></ROW><ROW><id>17594067</id><snippet>True == 1</snippet></ROW><ROW><id>17594067</id><snippet>False == 0</snippet></ROW><ROW><id>17594067</id><snippet>bool</snippet></ROW><ROW><id>17594067</id><snippet>print(("Approved","Summer School","Failed")[(g&lt;7)+(g&lt;3)])
</snippet></ROW><ROW><id>17594694</id><snippet>'tab'</snippet></ROW><ROW><id>17594694</id><snippet>tab</snippet></ROW><ROW><id>17594694</id><snippet>re.findall(tab, line)</snippet></ROW><ROW><id>17594694</id><snippet>line</snippet></ROW><ROW><id>17594694</id><snippet>tab</snippet></ROW><ROW><id>17594694</id><snippet>a-z0-9
</snippet></ROW><ROW><id>17594694</id><snippet>[a-z0-9]
</snippet></ROW><ROW><id>17594694</id><snippet>&gt;&gt;&gt; print re.findall('['+tab+']',line) # Here we add a bracket to each side
                                       # of a-z0-9 to create a valid regex 
                                       # capture group [a-z0-9]
['a', 'n', 'd', 't', 'h', 'e', 'n', '3', 't', 'i', 'm', 'e', 's', 'm', 'i', 'n', 'u', 's', '4', '5', '6', 'n', 'o', 'm', '0', 'r', 'e']
</snippet></ROW><ROW><id>17594694</id><snippet>str.format()</snippet></ROW><ROW><id>17594694</id><snippet>&gt;&gt;&gt; print re.findall('[{}]'.format(tab),line)
['a', 'n', 'd', 't', 'h', 'e', 'n', '3', 't', 'i', 'm', 'e', 's', 'm', 'i', 'n', 'u', 's', '4', '5', '6', 'n', 'o', 'm', '0', 'r', 'e']
</snippet></ROW><ROW><id>17594705</id><snippet>for crew in root.xpath('.//crew[descendant::role[contains(text(), "Primary")]]'):
    crew.getparent().remove(crew)
</snippet></ROW><ROW><id>17594864</id><snippet>RssUrl</snippet></ROW><ROW><id>17594864</id><snippet>RssItem</snippet></ROW><ROW><id>17594864</id><snippet>RssUrl.rss_items</snippet></ROW><ROW><id>17594864</id><snippet>db.session.query(RssUrl.id, db.func.count(RssUrl.id).label("count")
    ).join(RssUrl.rss_items).group_by(RssUrl.id)
</snippet></ROW><ROW><id>17594866</id><snippet>import wx

########################################################################
class MainFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Test")
        panel = wx.Panel(self)

        btn = wx.Button(panel, label="Ask Question")
        btn.Bind(wx.EVT_BUTTON, self.showMessageDlg)

    #----------------------------------------------------------------------
    def showMessageDlg(self, event):
        """
        Show a message
        """
        msg = "Do you want to continue?"
        title = "Question!"
        style =  wx.YES_NO|wx.YES_DEFAULT|wx.ICON_QUESTION
        dlg = wx.MessageDialog(parent=None, message=msg, 
                               caption=title, style=style)
        result = dlg.ShowModal()
        if result == wx.ID_YES:
            print "User pressed yes!"
        else:
            print "User pressed no!"
        dlg.Destroy()


if __name__ == "__main__":
    app = wx.App(False)
    frame = MainFrame()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>17595068</id><snippet>hello</snippet></ROW><ROW><id>17595068</id><snippet>hhelllolo</snippet></ROW><ROW><id>17595317</id><snippet>mnX += cnA
</snippet></ROW><ROW><id>17595317</id><snippet>for col in mnX.T:
    col += cnA[:, 0].T
</snippet></ROW><ROW><id>17595666</id><snippet>X = 3, 3, 5, 5, 5, 7 = x1, x2, x3 ....
</snippet></ROW><ROW><id>17595666</id><snippet>{3:2, 5:3, 7:1} = {k1:p1, k2:p2, k3:p3}
</snippet></ROW><ROW><id>17595666</id><snippet>E[X] = (1/N) * (x1 + x2 + x3 + ...) = (1/N) * (3 + 3 + 5 + ...)
</snippet></ROW><ROW><id>17595666</id><snippet>E[X] = (1/N) * (p1*k1 + p2*k2 + ...) = (1/N) * (3*2 + 5*3 + 7*1)
</snippet></ROW><ROW><id>17595666</id><snippet>sqrt(E[(X-u)^2]) = sqrt((1/N)*( (x1-u)^2 + (x2-u)^3 + ...))
</snippet></ROW><ROW><id>17595666</id><snippet>E[(X-u)^2]</snippet></ROW><ROW><id>17595666</id><snippet>E[(X-u)^2] = (1/N)*( p1*(k1-u)^2 + p2*(k2-u)^2 + ... )
           = (1/6)*( 2*(3-u)^2 + 3*(5-u)^2 + 1*(7-u)^2 )
</snippet></ROW><ROW><id>17595666</id><snippet>skew     = E[(x-u)^3] / (E[(x-u)^2])^(3/2)
kurtosis = E[(x-u)^4] / (E[(x-u)^2])^2
</snippet></ROW><ROW><id>17595687</id><snippet>py.test --cov=MYPKG --cov-report=html</snippet></ROW><ROW><id>17595687</id><snippet>html/index.html</snippet></ROW><ROW><id>17595695</id><snippet>map</snippet></ROW><ROW><id>17595695</id><snippet>itertools.imap</snippet></ROW><ROW><id>17595695</id><snippet>import operator
multiadd = lambda a,b: map(operator.add, a,b)
print multiadd([1,2,3], [2,3,4]) #=&gt; [3, 5, 7]
</snippet></ROW><ROW><id>17595695</id><snippet>map</snippet></ROW><ROW><id>17595695</id><snippet>elementwiseoperation</snippet></ROW><ROW><id>17595695</id><snippet>partial</snippet></ROW><ROW><id>17595695</id><snippet>map</snippet></ROW><ROW><id>17595695</id><snippet>import operator
import functools

multiadd = functools.partial(map, operator.add)
print multiadd([1,2,3], [2,3,4]) #=&gt; [3, 5, 7]
</snippet></ROW><ROW><id>17595695</id><snippet>range</snippet></ROW><ROW><id>17595695</id><snippet>zip</snippet></ROW><ROW><id>17595695</id><snippet>itertools.izip</snippet></ROW><ROW><id>17595695</id><snippet>for x in l:
    print l

for a,b in zip(l,k):
    print a+b
</snippet></ROW><ROW><id>17595695</id><snippet>append</snippet></ROW><ROW><id>17595695</id><snippet>[a+b for a,b in itertools.izip(l,k)]
</snippet></ROW><ROW><id>17595723</id><snippet>outfile</snippet></ROW><ROW><id>17595723</id><snippet>infile</snippet></ROW><ROW><id>17595723</id><snippet>with</snippet></ROW><ROW><id>17595723</id><snippet>outfile</snippet></ROW><ROW><id>17595723</id><snippet>infile</snippet></ROW><ROW><id>17595723</id><snippet>infile</snippet></ROW><ROW><id>17595723</id><snippet>with open('output', 'w') as outfile:
    for a in b:
        with open('input') as infile:
        ...
    ...
</snippet></ROW><ROW><id>17595723</id><snippet>fileinput</snippet></ROW><ROW><id>17595723</id><snippet>import fileinput
from contextlib import closing
import os

with closing(fileinput.input(os.listdir(dirpath))) as fin, open('output', 'w') as fout:
    fout.writelines(fin)
</snippet></ROW><ROW><id>17595876</id><snippet>url_for</snippet></ROW><ROW><id>17595876</id><snippet>/static/start.jpeg
</snippet></ROW><ROW><id>17595876</id><snippet>&lt;img src="{{ url_for('static', filename='start.jpeg') }}" alt="start"/&gt;
</snippet></ROW><ROW><id>17596187</id><snippet>__dict__</snippet></ROW><ROW><id>17596187</id><snippet>set</snippet></ROW><ROW><id>17596187</id><snippet>&gt;&gt;&gt; def struct():
...     pass
...
&gt;&gt;&gt; record = struct
&gt;&gt;&gt; record.number = 2
&gt;&gt;&gt; struct.__dict__
{'number': 2}
&gt;&gt;&gt; class Struct:
...     pass
...
&gt;&gt;&gt; record = Struct()
&gt;&gt;&gt; record.number = 3
&gt;&gt;&gt; record.__dict__
{'number': 3}
&gt;&gt;&gt; record=set()
&gt;&gt;&gt; record.__dict__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'set' object has no attribute '__dict__'
&gt;&gt;&gt; pow.__dict__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'builtin_function_or_method' object has no attribute '__dict__'
</snippet></ROW><ROW><id>17596187</id><snippet>&gt;&gt;&gt; class StructWithSlots(object):
...     __slots__ = []
...
&gt;&gt;&gt; record = StructWithSlots()
&gt;&gt;&gt; record.number = 3
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'StructWithSlots' object has no attribute 'number'
&gt;&gt;&gt; record.__dict__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'StructWithSlots' object has no attribute '__dict__'
</snippet></ROW><ROW><id>17596294</id><snippet>&gt;&gt;&gt; "hello {name}".format(name="garry")
'hello garry'
</snippet></ROW><ROW><id>17596294</id><snippet>&gt;&gt;&gt; for name in ["garry", "inbar"]:
    print "hello {name}".format(name=name)


hello garry
hello inbar
</snippet></ROW><ROW><id>17596294</id><snippet>SOAP_TEMPLATE</snippet></ROW><ROW><id>17596294</id><snippet>{body}</snippet></ROW><ROW><id>17596294</id><snippet>body</snippet></ROW><ROW><id>17596406</id><snippet>import sys

import regex


def main(patterns):
    patterns = [regex.compile(p) for p in patterns]
    for line in sys.stdin:
        line = line.decode('utf8')
        for regexp in patterns:
            if regexp.search (line):
                print line.strip('\n')

if __name__ == '__main__':
    main([ur'^\d+\t(\p{L}|\p{M})+$', ])
</snippet></ROW><ROW><id>17596409</id><snippet>vmrun -T vc -h 10.1.1.44 -u root -p vmware snapshot "[datacenter-2/datastore1] CENTER/CENTER.vmx" CleanSnapshot
vmrun -T vc -h 10.1.1.44 -u root -p vmware -gu Administrator -gp P@ssword runScriptInGuest "[datacenter-2/datastore1] CENTER/CENTER.vmx" "" "echo Test &gt; c:\test.txt"
vmrun -T vc -h 10.1.1.44 -u root -p vmware revertToSnapshot "[datacenter-2/datastore1] CENTER/CENTER.vmx" CleanSnapshot
</snippet></ROW><ROW><id>17596527</id><snippet>mylist = [row[0] for row in result]
</snippet></ROW><ROW><id>17596527</id><snippet>from itertools import chain
mylist = list(chain.from_iterable(result))
</snippet></ROW><ROW><id>17596759</id><snippet>test = stringCounter()
</snippet></ROW><ROW><id>17596759</id><snippet>stringCounter()</snippet></ROW><ROW><id>17596759</id><snippet>test.stringCounter(1)
</snippet></ROW><ROW><id>17596759</id><snippet>test</snippet></ROW><ROW><id>17596759</id><snippet>stringCounter()</snippet></ROW><ROW><id>17596759</id><snippet>stringCounter(1)
</snippet></ROW><ROW><id>17596861</id><snippet>['2 19 2839475239874 hda'][0].split()
</snippet></ROW><ROW><id>17597041</id><snippet>hexlify</snippet></ROW><ROW><id>17597041</id><snippet>unhexlify</snippet></ROW><ROW><id>17597041</id><snippet>bytes</snippet></ROW><ROW><id>17597041</id><snippet>bytes</snippet></ROW><ROW><id>17597041</id><snippet>bytes</snippet></ROW><ROW><id>17597041</id><snippet>bytes</snippet></ROW><ROW><id>17597041</id><snippet>bytes</snippet></ROW><ROW><id>17597041</id><snippet>bytes</snippet></ROW><ROW><id>17597041</id><snippet>0 &lt;= x &lt; 256</snippet></ROW><ROW><id>17597041</id><snippet>ord()</snippet></ROW><ROW><id>17597041</id><snippet>bytes</snippet></ROW><ROW><id>17597041</id><snippet>bytes</snippet></ROW><ROW><id>17597041</id><snippet>def xor_hexstr(s1, s2):
    if len(s1) &gt; len(s2):
        q = zip(unhexlify(s1[:len(s2)]), unhexlify(s2))
    else:
        q = zip(unhexlify(s2[:len(s1)]), unhexlify(s1))

    return hexlify(bytes(c1 ^ c2 for c1, c2 in q))
</snippet></ROW><ROW><id>17597041</id><snippet>hexlify</snippet></ROW><ROW><id>17597041</id><snippet>bytes</snippet></ROW><ROW><id>17597041</id><snippet>xor_hexstr(t1, t2).decode('ASCII')
</snippet></ROW><ROW><id>17597041</id><snippet>&gt;&gt;&gt; xor_hexstr(t1, t2)
b'426173696320434243206d6f64652065'
&gt;&gt;&gt; xor_hexstr(t1, t2).decode('ASCII')
'426173696320434243206d6f64652065'
</snippet></ROW><ROW><id>17597174</id><snippet>'%3A'</snippet></ROW><ROW><id>17597174</id><snippet>:</snippet></ROW><ROW><id>17597174</id><snippet>urllib.unquote()</snippet></ROW><ROW><id>17597174</id><snippet>&gt;&gt;&gt; urllib.unquote("Wed Jun 8 09%3A39%3A")
'Wed Jun 8 09:39:' 
</snippet></ROW><ROW><id>17597348</id><snippet>enableXThread.daemon</snippet></ROW><ROW><id>17597348</id><snippet>True</snippet></ROW><ROW><id>17597348</id><snippet>self.enableXThread = Thread(target=self.enableX) 
self.enableXThread.daemon = True
self.enableXThread.start()
</snippet></ROW><ROW><id>17597348</id><snippet>Event</snippet></ROW><ROW><id>17597348</id><snippet>import signal

X = False

def handle_alarm(signum, frame):
    global X
    X = False

signal.signal(signal.SIGALRM, handle_alarm)

def set_X_true_then_false_later(secs=3600):
    global X
    X = True
    signal.alarm(secs)
</snippet></ROW><ROW><id>17597503</id><snippet>itertools.groupby</snippet></ROW><ROW><id>17597503</id><snippet>&gt;&gt;&gt; from itertools import groupby
for k,g in groupby(seq1):
    if k != 0:
        print list(g)
...         
[1, 1]
[2, 2]
[3, 3, 3]

for k,g in groupby(seq2):
    if k != 0:
        print list(g)
...         
[1, 1]
[1, 1]
</snippet></ROW><ROW><id>17597624</id><snippet>import multiprocessing
import time

def process(x):
    time.sleep(1)
    return x

if __name__ == '__main__':
    jobs = range(100)
    pool = multiprocessing.Pool(20)
    for result in pool.imap_unordered(process, jobs):
        print(result)
    pool.close()
    pool.join()
</snippet></ROW><ROW><id>17597850</id><snippet>self.button_A = Button(..., command = self.selectButton(0)) 
</snippet></ROW><ROW><id>17597850</id><snippet>self.selectButton(0)</snippet></ROW><ROW><id>17597850</id><snippet>self.selectButton(0)</snippet></ROW><ROW><id>17597850</id><snippet>command</snippet></ROW><ROW><id>17597850</id><snippet>self.button_A = Button(..., command = lambda: self.selectButton(0))
</snippet></ROW><ROW><id>17597850</id><snippet>self.selectButton</snippet></ROW><ROW><id>17597850</id><snippet>self.buttons = [self.button_A, self.button_B, self.button_C, self.button_D]
</snippet></ROW><ROW><id>17597873</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import ImageGrid

# Generate some random data
data_top = np.random.random((3,10,10)) * 5
data_bot = np.random.random((3,20,20)) * 10

fig  = plt.figure()

grid_top = ImageGrid(fig, 211, nrows_ncols = (1, 3),
                     cbar_location = "right",                     
                     cbar_mode="single",
                     cbar_pad=.2) 
grid_bot = ImageGrid(fig, 212, nrows_ncols = (1, 3),
                     cbar_location = "right",                     
                     cbar_mode="single",
                     cbar_pad=.2) 

for n in xrange(3):
    im1 = grid_top[n].imshow(data_top[n], 
                            interpolation='nearest', vmin=0, vmax=5)

    im2 = grid_bot[n].imshow(data_bot[n], cmap=plt.get_cmap('bone'), 
                             interpolation='nearest', vmin=0, vmax=10)


grid_top.cbar_axes[0].colorbar(im1)
grid_bot.cbar_axes[0].colorbar(im2)

plt.show()
</snippet></ROW><ROW><id>17597957</id><snippet>lst  = ['4','8','15','16','23','42']
dct  = {'4':4, 'foo':'bar'}
keys = dct.keys()

for key in lst:
    if key in keys:
        dct.pop(key)
</snippet></ROW><ROW><id>17598021</id><snippet>is_Name</snippet></ROW><ROW><id>17598021</id><snippet>Name</snippet></ROW><ROW><id>17598021</id><snippet>__init__</snippet></ROW><ROW><id>17598021</id><snippet>class Person(object):
    def __init__(self,s):
        self.name = Name(s.get('name',{}))
        self.url = s.get('url','')
</snippet></ROW><ROW><id>17598021</id><snippet>self.name = Name(...)</snippet></ROW><ROW><id>17598021</id><snippet>Crazyperson.__init__()</snippet></ROW><ROW><id>17598021</id><snippet>def __init__(self,s):
    super(Crazyperson,self).__init__(s)
    self.dance = s.get('dance') 
</snippet></ROW><ROW><id>17598021</id><snippet>s</snippet></ROW><ROW><id>17598021</id><snippet>Person.__init__()</snippet></ROW><ROW><id>17598021</id><snippet>Name()</snippet></ROW><ROW><id>17598021</id><snippet>fred</snippet></ROW><ROW><id>17598021</id><snippet>fred = Crazyperson({"name":"Fred", ...})</snippet></ROW><ROW><id>17598021</id><snippet>name</snippet></ROW><ROW><id>17598021</id><snippet>'Fred'</snippet></ROW><ROW><id>17598021</id><snippet>Name.__init__()</snippet></ROW><ROW><id>17598021</id><snippet>class Name(object):
    def __init__(self,s):
        self.firstname = s.get('firstname','')
        self.lastname = s.get('lastname')
</snippet></ROW><ROW><id>17598021</id><snippet>&gt;&gt;&gt; 'Fred'.get('firstname', '')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'str' object has no attribute 'get'
</snippet></ROW><ROW><id>17598021</id><snippet>name</snippet></ROW><ROW><id>17598021</id><snippet>Person</snippet></ROW><ROW><id>17598021</id><snippet>self.name</snippet></ROW><ROW><id>17598021</id><snippet>class Person(object):
    def __init__(self,s):
        if not hasattr(self, 'name')
            self.name = Name(s.get('name', {}))
        self.url = s.get('url','')
</snippet></ROW><ROW><id>17598021</id><snippet>name</snippet></ROW><ROW><id>17598021</id><snippet>Crazyperson</snippet></ROW><ROW><id>17598021</id><snippet>def __init__(self,s):
    self.name = s.get('name', 0)
    self.dance = s.get('dance') 
    super(Crazyperson,self).__init__(s)
</snippet></ROW><ROW><id>17598155</id><snippet>"".join(str(w) for w in nameData)</snippet></ROW><ROW><id>17598155</id><snippet>nameData</snippet></ROW><ROW><id>17598155</id><snippet>for key in nameData:
    namelist.write('\n' 'KPLR00' + key + '-2009131105131')
</snippet></ROW><ROW><id>17598155</id><snippet>for key in nameData:
    namelist.write('\nKPLR%09i-2009131105131'%int(key)) #no string concatenation
</snippet></ROW><ROW><id>17598155</id><snippet>str</snippet></ROW><ROW><id>17598155</id><snippet>'%09i'</snippet></ROW><ROW><id>17598155</id><snippet>'%i'</snippet></ROW><ROW><id>17598155</id><snippet>int</snippet></ROW><ROW><id>17598155</id><snippet>with</snippet></ROW><ROW><id>17598155</id><snippet>namelist.write("\n".join("KPLR%09i-2009131105131"%int(line.split()[0]) for line in file_P))
</snippet></ROW><ROW><id>17598178</id><snippet>gc.DEBUG_LEAK</snippet></ROW><ROW><id>17598178</id><snippet>collectable</snippet></ROW><ROW><id>17598369</id><snippet>l = [1,2,3]
new_l = [l[:i] + [9] + l[i:] for i in range(len(l) + 1)]
</snippet></ROW><ROW><id>17598479</id><snippet>query_with_parameters =  """select ID, IP_src, IP_dst, sum(bytes) as Total_Bytes, count(*) as total_packets, ( sum(bytes) / count(*) )\
  as Average, date_format(date, "%%H") as Hour , date_format(date, "%%d %%m %%Y") as date_n from Packets\
   where date BETWEEN %s and %s group by IP_src, IP_dst, Hour,\
    date_n order by IP_src, IP_dst, Hour, date_n;"""
</snippet></ROW><ROW><id>17598615</id><snippet>from sqlalchemy.sql import or_

query = MyTable.q.filter(
        or_(MyTable.id == some_number, MyTable.id == some_other_number)
    )
</snippet></ROW><ROW><id>17598615</id><snippet>in_</snippet></ROW><ROW><id>17598615</id><snippet>query = MyTable.q.filter(MyTable.id.in_([some_number, some_other_number])
</snippet></ROW><ROW><id>17598751</id><snippet>A</snippet></ROW><ROW><id>17598751</id><snippet>B</snippet></ROW><ROW><id>17598751</id><snippet>from pylab import *

data_ = []

with open('all_the_data.txt') as dat_:
    for line in dat_:
        data_.append([i for i in line.split()])

D = zip(*data_)

if __name__ == '__main__':
    t = D[0]
    A = D[1]
    B = D[2]
    plot(t, A, 'bo')
    hold('on')
    plot(t, B, 'gX')
    xlabel('timestamp (unix)')
    ylabel('Station population')
    legend('Station 1','Station 2')
    title('Variance of Stations 1 and 2')
    show()
    savefig('2_stations_vs_time.png')
</snippet></ROW><ROW><id>17598751</id><snippet>D</snippet></ROW><ROW><id>17598751</id><snippet>D = [list(range(100)), list(range(10, 110)), list(range(20, 120))]</snippet></ROW><ROW><id>17598762</id><snippet>csv</snippet></ROW><ROW><id>17598762</id><snippet>with</snippet></ROW><ROW><id>17598762</id><snippet>with open(fname) as f:
        reader = csv.reader(f)
        magn1 = [math.sqrt(sum(float(i)**2 for i in row)) for row in reader]
</snippet></ROW><ROW><id>17598762</id><snippet>import csv</snippet></ROW><ROW><id>17598762</id><snippet>open</snippet></ROW><ROW><id>17598762</id><snippet>open</snippet></ROW><ROW><id>17598762</id><snippet>f = open(fname)
</snippet></ROW><ROW><id>17598762</id><snippet>for line in f:
</snippet></ROW><ROW><id>17598762</id><snippet>str.split</snippet></ROW><ROW><id>17598762</id><snippet>    x, y, z = line.split(',')
</snippet></ROW><ROW><id>17598762</id><snippet>float</snippet></ROW><ROW><id>17598762</id><snippet>    x, y, z = float(x), float(y), float(z)
</snippet></ROW><ROW><id>17598762</id><snippet>**</snippet></ROW><ROW><id>17598762</id><snippet>    n = math.sqrt(x**2 + y**2 + z**2)
</snippet></ROW><ROW><id>17598762</id><snippet>append</snippet></ROW><ROW><id>17598762</id><snippet>    Magn1.append(n)
</snippet></ROW><ROW><id>17598905</id><snippet>&gt;&gt;&gt; 1 .__str__
&lt;method-wrapper '__str__' of int object at 0x104ad7820&gt;
</snippet></ROW><ROW><id>17598905</id><snippet>&gt;&gt;&gt; def foo(): pass
... 
&gt;&gt;&gt; foo.__str__
&lt;method-wrapper '__str__' of function object at 0x104e62830&gt;
</snippet></ROW><ROW><id>17598960</id><snippet>self.z</snippet></ROW><ROW><id>17598960</id><snippet>inp</snippet></ROW><ROW><id>17598960</id><snippet>def my_function(self, inp):
    self.z += '!!!'
</snippet></ROW><ROW><id>17598960</id><snippet>inp</snippet></ROW><ROW><id>17598960</id><snippet>self.z</snippet></ROW><ROW><id>17598960</id><snippet>class C:
    def __init__(self, ):
        self.z = []
        self.my_function(self.z)    
    def my_function(self, inp):
        inp += '!!!'
        print inp
        print self.z

C()        
</snippet></ROW><ROW><id>17598960</id><snippet>['!', '!', '!']
['!', '!', '!']
</snippet></ROW><ROW><id>17598977</id><snippet>load</snippet></ROW><ROW><id>17598977</id><snippet>save</snippet></ROW><ROW><id>17598977</id><snippet>print</snippet></ROW><ROW><id>17598977</id><snippet>process</snippet></ROW><ROW><id>17598977</id><snippet>visualize</snippet></ROW><ROW><id>17598977</id><snippet>numpy</snippet></ROW><ROW><id>17598977</id><snippet>scipy</snippet></ROW><ROW><id>17598977</id><snippet>matplotlib</snippet></ROW><ROW><id>17599050</id><snippet>str.rstrip()</snippet></ROW><ROW><id>17599050</id><snippet>somestring.rstrip('\t')
</snippet></ROW><ROW><id>17599050</id><snippet>somestring.rstrip('\t\n ')
</snippet></ROW><ROW><id>17599050</id><snippet>.rstrip()</snippet></ROW><ROW><id>17599050</id><snippet>somestring.rstrip()
</snippet></ROW><ROW><id>17599081</id><snippet>In [12]: df = DataFrame(randn(10,4),columns=list('ABCD'))

In [13]: df['year'] = 2003

In [14]: df['id'] = [12,34,12,34,72,0,38,53,70,70]
In [16]: df.loc[:5,'year'] = 2004

In [17]: df
Out[17]: 
          A         B         C         D  year  id
0 -1.917262  0.228599 -0.463695  0.776567  2004  12
1  2.064658 -0.716104 -1.399685  0.402077  2004  34
2 -1.282627  0.338368  0.757658 -0.114086  2004  12
3  1.190319 -1.592282  0.942431 -0.778128  2004  34
4  1.928094  0.532387 -0.352155 -0.039304  2004  72
5  0.535093 -1.655569 -0.309651  0.438992  2004   0
6  0.332428 -0.427696 -1.324072  2.158907  2003  38
7 -1.343306 -0.288373  0.544344 -1.361189  2003  53
8  0.959273 -0.420134  0.691108 -0.469833  2003  70
9  0.692352  0.101226 -0.161140 -0.100968  2003  70
</snippet></ROW><ROW><id>17599081</id><snippet>In [21]: df.groupby(['year','id']).mean()
Out[21]: 
                A         B         C         D
year id                                        
2003 38  0.332428 -0.427696 -1.324072  2.158907
     53 -1.343306 -0.288373  0.544344 -1.361189
     70  0.825812 -0.159454  0.264984 -0.285401
2004 0   0.535093 -1.655569 -0.309651  0.438992
     12 -1.599944  0.283483  0.146981  0.331241
     34  1.627488 -1.154193 -0.228627 -0.188025
     72  1.928094  0.532387 -0.352155 -0.039304
</snippet></ROW><ROW><id>17599081</id><snippet>In [24]: df.groupby(['year']).mean()
Out[24]: 
             A         B         C         D         id
year                                                   
2003  0.160187 -0.258744 -0.062440  0.056729  57.750000
2004  0.419713 -0.477434 -0.137516  0.114353  27.333333
</snippet></ROW><ROW><id>17599081</id><snippet>In [25]: df.groupby(['id']).mean()
Out[25]: 
           A         B         C         D  year
id                                              
0   0.535093 -1.655569 -0.309651  0.438992  2004
12 -1.599944  0.283483  0.146981  0.331241  2004
34  1.627488 -1.154193 -0.228627 -0.188025  2004
38  0.332428 -0.427696 -1.324072  2.158907  2003
53 -1.343306 -0.288373  0.544344 -1.361189  2003
70  0.825812 -0.159454  0.264984 -0.285401  2003
72  1.928094  0.532387 -0.352155 -0.039304  2004
</snippet></ROW><ROW><id>17599215</id><snippet>list(chain)</snippet></ROW><ROW><id>17599215</id><snippet>chain</snippet></ROW><ROW><id>17599215</id><snippet>chain[:]</snippet></ROW><ROW><id>17599215</id><snippet>list()</snippet></ROW><ROW><id>17599215</id><snippet>y = list(x)</snippet></ROW><ROW><id>17599215</id><snippet>y = x</snippet></ROW><ROW><id>17599215</id><snippet>&gt;&gt;&gt; x = [1,2,3]
&gt;&gt;&gt; y = x         #this simply creates a new referece to the same list object
&gt;&gt;&gt; y is x
True
&gt;&gt;&gt; y.append(4)  # appending to y, will affect x as well
&gt;&gt;&gt; x,y
([1, 2, 3, 4], [1, 2, 3, 4])   #both are changed

#shallow copy   
&gt;&gt;&gt; x = [1,2,3] 
&gt;&gt;&gt; y = list(x)                #y is a shallow copy of x
&gt;&gt;&gt; x is y     
False
&gt;&gt;&gt; y.append(4)                #appending to y won't affect x and vice-versa
&gt;&gt;&gt; x,y
([1, 2, 3], [1, 2, 3, 4])      #x is still same 
</snippet></ROW><ROW><id>17599215</id><snippet>x</snippet></ROW><ROW><id>17599215</id><snippet>list()</snippet></ROW><ROW><id>17599215</id><snippet>[:]</snippet></ROW><ROW><id>17599215</id><snippet>&gt;&gt;&gt; x = [[1,2],[3,4]]
&gt;&gt;&gt; y = list(x)         #outer list is different
&gt;&gt;&gt; x is y          
False
</snippet></ROW><ROW><id>17599215</id><snippet>&gt;&gt;&gt; x[0] is y[0], x[1] is y[1]  
(True, True)
&gt;&gt;&gt; y[0].append('foo')     #modify an inner list
&gt;&gt;&gt; x,y                    #changes can be seen in both lists
([[1, 2, 'foo'], [3, 4]], [[1, 2, 'foo'], [3, 4]])
</snippet></ROW><ROW><id>17599215</id><snippet>&gt;&gt;&gt; x.append('bar')
&gt;&gt;&gt; x,y
([[1, 2, 'foo'], [3, 4], 'bar'], [[1, 2, 'foo'], [3, 4]])  
</snippet></ROW><ROW><id>17599215</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>17599357</id><snippet>screen</snippet></ROW><ROW><id>17599357</id><snippet>screen.blit()</snippet></ROW><ROW><id>17599357</id><snippet>while 1:</snippet></ROW><ROW><id>17599357</id><snippet>screen</snippet></ROW><ROW><id>17599357</id><snippet>...
while 1:
for event in pygame.event.get():
    if event.type == pygame.QUIT:
        sys.exit()

    screen.blit(background, ballrect, ballrect) #redraw background over old ball location
    ballrect = ballrect.move(speed)
    if ballrect.left &lt; 0 or ballrect.right &gt; width:
        speed[0] = -speed[0]
    if ballrect.top &lt; 0 or ballrect.bottom &gt; height:
        speed[1] = -speed[1]

    screen.blit(ball, ballrect)
    screen.blit(player1, player1rect)
    pygame.display.update()
</snippet></ROW><ROW><id>17599357</id><snippet>screen</snippet></ROW><ROW><id>17599357</id><snippet>screen.blit(background, ballrect, ballrect)</snippet></ROW><ROW><id>17599357</id><snippet>screen.blit(background, (0, 0))</snippet></ROW><ROW><id>17599357</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>17599357</id><snippet>...
pygame.display.update()

while 1:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()

    old_ballrect = ballrect
    screen.blit(background, old_ballrect, old_ballrect) #redraw background over old ball location
    ballrect = ballrect.move(speed)
    if ballrect.left &lt; 0 or ballrect.right &gt; width:
        speed[0] = -speed[0]
    if ballrect.top &lt; 0 or ballrect.bottom &gt; height:
        speed[1] = -speed[1]

    screen.blit(ball, ballrect)
    screen.blit(player1, player1rect)
    pygame.display.update([old_ballrect, ballrect])
</snippet></ROW><ROW><id>17599522</id><snippet>import tkinter.ttk
from tkinter.constants import *

class Application(tkinter.ttk.Frame):

    @classmethod
    def main(cls):
        tkinter.NoDefaultRoot()
        root = tkinter.Tk()
        app = cls(root)
        app.grid(sticky=NSEW)
        root.grid_columnconfigure(0, weight=1)
        root.grid_rowconfigure(0, weight=1)
        root.resizable(True, False)
        root.mainloop()

    def __init__(self, root):
        super().__init__(root)
        self.create_variables()
        self.create_widgets()
        self.grid_widgets()
        self.grid_columnconfigure(0, weight=1)

    def create_variables(self):
        self.player1 = tkinter.StringVar(self, 'Player 1')
        self.player2 = tkinter.StringVar(self, 'Player 2')
        self.timer = tkinter.StringVar(self)
        self.running = tkinter.BooleanVar(self)

    def create_widgets(self):
        self.set_timer = tkinter.ttk.Entry(self, textvariable=self.timer)
        self.start = tkinter.ttk.Button(self, text='Start', command=self.start)
        self.display1 = tkinter.ttk.Label(self, textvariable=self.player1)
        self.display2 = tkinter.ttk.Label(self, textvariable=self.player2)

    def grid_widgets(self):
        options = dict(sticky=NSEW, padx=3, pady=4)
        self.set_timer.grid(column=0, row=0, **options)
        self.start.grid(column=0, row=1, **options)
        self.display1.grid(column=0, row=2, **options)
        self.display2.grid(column=0, row=3, **options)

    def start(self):
        timer = self.timer.get()
        self.player1.set(timer)
        self.player2.set(timer)

if __name__ == '__main__':
    Application.main()
</snippet></ROW><ROW><id>17599670</id><snippet>CURLOPT_MAX_RECV_SPEED_LARGE</snippet></ROW><ROW><id>17599670</id><snippet>CURLOPT_</snippet></ROW><ROW><id>17599670</id><snippet>MAX_RECV_SPEED_LARGE</snippet></ROW><ROW><id>17599670</id><snippet>c.setopt(c.MAX_RECV_SPEED_LARGE, 1024)
</snippet></ROW><ROW><id>17599676</id><snippet>global</snippet></ROW><ROW><id>17599676</id><snippet>nonlocal</snippet></ROW><ROW><id>17599722</id><snippet>self.button=Button(parent,text='click me').pack()</snippet></ROW><ROW><id>17599722</id><snippet>self.button = Button(parent, text='click me')
self.button.pack()
</snippet></ROW><ROW><id>17599763</id><snippet>In [1]: s1 = Series([1,2,3])

In [2]: s2 = Series([2,3,4])

In [4]: Series(zip(s1,s2))
Out[4]: 
0    (1, 2)
1    (2, 3)
2    (3, 4)
dtype: object
</snippet></ROW><ROW><id>17599763</id><snippet>In [70]: s = Series([1,2,4,5,6])
</snippet></ROW><ROW><id>17599763</id><snippet>In [71]: pd.qcut(s,2)
Out[71]: 
Categorical: 
array(['[1, 4]', '[1, 4]', '[1, 4]', '(4, 6]', '(4, 6]'], dtype=object)
Levels (2): Index(['[1, 4]', '(4, 6]'], dtype=object)
</snippet></ROW><ROW><id>17599763</id><snippet>In [72]: pd.value_counts(pd.qcut(s,2))
Out[72]: 
[1, 4]    3
(4, 6]    2
dtype: int64
</snippet></ROW><ROW><id>17599838</id><snippet>wait=ui.WebDriverWait(driver,10)
</snippet></ROW><ROW><id>17599838</id><snippet>wait=ui.WebDriverWait(driver,300)
wati.until(EC.staleness_of(driver.find_element_by_id("genMask_c")), 'visible')
</snippet></ROW><ROW><id>17599891</id><snippet>class newClass(A if os.name == 'nt' else B):
    ...
</snippet></ROW><ROW><id>17599897</id><snippet>beautifulsoup</snippet></ROW><ROW><id>17599897</id><snippet>requests</snippet></ROW><ROW><id>17599897</id><snippet>urllib</snippet></ROW><ROW><id>17599897</id><snippet>from bs4 import BeautifulSoup
from selenium import webdriver
driver = webdriver.Firefox()
driver.get('http://eve-central.com/home/quicklook.html?typeid=34')

html = driver.page_source
soup = BeautifulSoup(html)

# check out the docs for the kinds of things you can do with 'find_all'
# this (untested) snippet should find tags with a specific class ID
# see: http://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-by-css-class
for tag in soup.find_all("a", class_="my_class"):
    print tag.text
</snippet></ROW><ROW><id>17599897</id><snippet>page_source</snippet></ROW><ROW><id>17600371</id><snippet>CONSUMER_KEY = '9pux1XcwXXXXXXXXXX'     # This is api_key
CONSUMER_SECRET = 'brtXoXEXXXXXXXXXXXXX'   # This is secret_key

USER_TOKEN = '27138ae8-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXb'   # This is oauth_token
USER_SECRET = 'ca103e23-XXXXXXXXXXXXXXXXXXXXXXXX7bba512625e'   # This is oauth_secret
RETURN_URL = 'http://localhost:8000'

from linkedin import linkedin
from oauthlib import *

# Define CONSUMER_KEY, CONSUMER_SECRET,  
# USER_TOKEN, and USER_SECRET from the credentials 
# provided in your LinkedIn application

# Instantiate the developer authentication class

authentication = linkedin.LinkedInDeveloperAuthentication(CONSUMER_KEY, CONSUMER_SECRET, 
                                                      USER_TOKEN, USER_SECRET, 
                                                      RETURN_URL, linkedin.PERMISSIONS.enums.values())

# Pass it in to the app...

application = linkedin.LinkedInApplication(authentication)

# Use the app....

g = application.get_profile()
print g
</snippet></ROW><ROW><id>17600403</id><snippet>fileinput</snippet></ROW><ROW><id>17600403</id><snippet>import fileinput
for iLine in filinput.input(r'c:\testfile.xml',inplace = True):
    if iLine.find("musicStyle") &gt;= 0:
         mpr = re.search(r'(.*&gt;)(.*?)(&lt;.*)', iLine, re.M|re.I)
         #modify iLine here
    print iLine     #write the line to  the file
</snippet></ROW><ROW><id>17600403</id><snippet>&gt;&gt;&gt; print 'c:\testfile.xml'
c:  estfile.xml            #'\t' converted to tab space

&gt;&gt;&gt; print r'c:\testfile.xml'   #raw string works fine
c:\testfile.xml
</snippet></ROW><ROW><id>17600528</id><snippet>_bool3key.__logic_sort__ = {0:-1, nan:0 , 1:1}
</snippet></ROW><ROW><id>17600528</id><snippet>float('nan')</snippet></ROW><ROW><id>17600528</id><snippet>np.nan</snippet></ROW><ROW><id>17600528</id><snippet>In [17]: _bool3key(float('nan'))
KeyError: nan
</snippet></ROW><ROW><id>17600528</id><snippet>def _bool3key(x, logic_sort={0: -1, 1: 1}):
    """
    Defines the keys used to order the list.
    The only allowed values are True, False, 1,0 and nan.
    """
    return 0 if np.isnan(x) else logic_sort[x]
</snippet></ROW><ROW><id>17600528</id><snippet>logic_sort</snippet></ROW><ROW><id>17600695</id><snippet>somedict = {"foo" : 
    {"bar" : "bars value"}
}

somedict['foo']['baz'] = 'baz value'
</snippet></ROW><ROW><id>17600695</id><snippet>somedict['foo']['baz']</snippet></ROW><ROW><id>17600695</id><snippet>somedict</snippet></ROW><ROW><id>17600695</id><snippet>dict</snippet></ROW><ROW><id>17600695</id><snippet>somedict['foo']</snippet></ROW><ROW><id>17600695</id><snippet>'baz'</snippet></ROW><ROW><id>17600695</id><snippet>`baz value'</snippet></ROW><ROW><id>17600715</id><snippet>/usr/sbin/tmpwatch 1 /tmp</snippet></ROW><ROW><id>17600715</id><snippet>/usr/sbin/tmpwatch 1 /var/tmp</snippet></ROW><ROW><id>17600757</id><snippet>get_by_id</snippet></ROW><ROW><id>17600757</id><snippet>entity = Questions.get_by_id(6544293208522752, parent=questionsKey(questionCategory))
</snippet></ROW><ROW><id>17600763</id><snippet>n3</snippet></ROW><ROW><id>17600763</id><snippet>application/n3</snippet></ROW><ROW><id>17600763</id><snippet>text/n3</snippet></ROW><ROW><id>17600763</id><snippet>application/n3</snippet></ROW><ROW><id>17600866</id><snippet>json</snippet></ROW><ROW><id>17600866</id><snippet>data = json.loads(output.text)
print data['id']  # prints http://goo.gl/O5MIi
</snippet></ROW><ROW><id>17600909</id><snippet>text = "$email = 'hello '.$user1_35.' we would like to annoy you '.$Tod-ay.' for 20 minutes.';"
res = re.findall("'\.(\$[\w-]*)\.'", text)
print res #['$user1_35', '$Tod-ay']
</snippet></ROW><ROW><id>17601147</id><snippet>def swapRules2(d,rule):
    '''clear dict, return new with only rule set'''
    keys=d.keys()
    if rule not in keys: raise Exception("wrong key")
    outd=dict.fromkeys(keys,0)
    outd[rule]=100
    return outd
</snippet></ROW><ROW><id>17601147</id><snippet> In [16]: [tr.swapRules2(mydict,jj) for jj in keys]
Out[16]:
[{'a': 100, 'b': 0, 'c': 0},
 {'a': 0, 'b': 0, 'c': 100},
 {'a': 0, 'b': 100, 'c': 0}]
</snippet></ROW><ROW><id>17601167</id><snippet>&gt;&gt;&gt; tuple_list = [(1,'a'),(2,'b'),(3,'c')]
&gt;&gt;&gt; [x[0] for x in tuple_list]
[1, 2, 3]
</snippet></ROW><ROW><id>17601167</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; f = itemgetter(0)
&gt;&gt;&gt; map(f, tuple_list)
[1, 2, 3]
</snippet></ROW><ROW><id>17601167</id><snippet>&gt;&gt;&gt; first_list = [(1,'a'),(2,'b'),(3,'c')]
&gt;&gt;&gt; second_list = [1,2,3,4,4,5]
&gt;&gt;&gt; set(second_list) - set(x[0] for x in first_list)
set([4, 5])
&gt;&gt;&gt; set(second_list) - set(map(f, first_list))
set([4, 5])
</snippet></ROW><ROW><id>17601167</id><snippet>&gt;&gt;&gt; set(second_list).difference(map(f, first_list))
set([4, 5])
</snippet></ROW><ROW><id>17601167</id><snippet>first_list</snippet></ROW><ROW><id>17601167</id><snippet>dict</snippet></ROW><ROW><id>17601167</id><snippet>&gt;&gt;&gt; dic = dict(first_list)
&gt;&gt;&gt; set(second_list).difference(dic)
set([4, 5])
</snippet></ROW><ROW><id>17601336</id><snippet>clock</snippet></ROW><ROW><id>17601336</id><snippet>clock</snippet></ROW><ROW><id>17601518</id><snippet>my_var = 1
def my_function(my_var):
    globals()['my_var'] = my_var
</snippet></ROW><ROW><id>17601574</id><snippet>raw_input</snippet></ROW><ROW><id>17601574</id><snippet>wshell = win32com.client.Dispatch("WScript.Shell")
wshell.SendKeys("foo")
</snippet></ROW><ROW><id>17601574</id><snippet>def sendkey(hwnd, keycode):
    win32api.PostMessage(hwnd, win32con.WM_CHAR, keycode, 0)
</snippet></ROW><ROW><id>17601574</id><snippet>WM_KEYDOWN</snippet></ROW><ROW><id>17601574</id><snippet>WM_KEYUP</snippet></ROW><ROW><id>17601574</id><snippet>WM_CHAR</snippet></ROW><ROW><id>17601574</id><snippet>'100'</snippet></ROW><ROW><id>17601574</id><snippet>ord('1')</snippet></ROW><ROW><id>17601574</id><snippet>ord('0')</snippet></ROW><ROW><id>17601574</id><snippet>ord('0')</snippet></ROW><ROW><id>17601574</id><snippet>SendKeys</snippet></ROW><ROW><id>17601574</id><snippet>AutoPy</snippet></ROW><ROW><id>17601574</id><snippet>selenium</snippet></ROW><ROW><id>17601574</id><snippet>mechanize</snippet></ROW><ROW><id>17601796</id><snippet>self.request.get('mentor_id')</snippet></ROW><ROW><id>17601796</id><snippet>imageit?key=whatever</snippet></ROW><ROW><id>17601814</id><snippet>$</snippet></ROW><ROW><id>17601814</id><snippet>url(r'^$', include('mysite.urls'))
</snippet></ROW><ROW><id>17601814</id><snippet>$</snippet></ROW><ROW><id>17601814</id><snippet>url(r'^', include('mysite.urls'))
</snippet></ROW><ROW><id>17601816</id><snippet>&gt;&gt;&gt; class Foo(object):
...     bar=[]
...     def __init__(self):
...         self.baz=[]
... 
&gt;&gt;&gt; f1 = Foo()
&gt;&gt;&gt; f2 = Foo()
&gt;&gt;&gt; f1.bar.append(100)
&gt;&gt;&gt; f1.baz.append(100)
&gt;&gt;&gt; f2.bar
[100]
&gt;&gt;&gt; f2.baz
[]
</snippet></ROW><ROW><id>17601816</id><snippet>f1</snippet></ROW><ROW><id>17601816</id><snippet>f2</snippet></ROW><ROW><id>17601816</id><snippet>baz</snippet></ROW><ROW><id>17601816</id><snippet>bar</snippet></ROW><ROW><id>17601816</id><snippet>bar</snippet></ROW><ROW><id>17601816</id><snippet>&gt;&gt;&gt; f1.__dict__
{'baz': [1]}
</snippet></ROW><ROW><id>17601816</id><snippet>bar</snippet></ROW><ROW><id>17601816</id><snippet>f1</snippet></ROW><ROW><id>17601816</id><snippet>ctypes</snippet></ROW><ROW><id>17601816</id><snippet>"signature"</snippet></ROW><ROW><id>17601816</id><snippet>bar</snippet></ROW><ROW><id>17601816</id><snippet>struct bar {
    static const long signature = 0x896489648964;
};
</snippet></ROW><ROW><id>17601816</id><snippet>bar</snippet></ROW><ROW><id>17601816</id><snippet>bar::signature</snippet></ROW><ROW><id>17601816</id><snippet>bar</snippet></ROW><ROW><id>17601816</id><snippet>b1.signature</snippet></ROW><ROW><id>17601816</id><snippet>bar::signature</snippet></ROW><ROW><id>17601985</id><snippet># set a value for ArgName 
&gt;&gt;&gt; ArgName = "-h"
# see if that value is in this tuple
&gt;&gt;&gt; ArgName in ("-h","--help")
True # because ArgName = '-h' which is in the tuple
&gt;&gt;&gt; ArgName = "--help"
&gt;&gt;&gt; ArgName in ("-h","--help")
True # because ArgName = '--help' which is in the tuple
&gt;&gt;&gt; ArgName = "something"
&gt;&gt;&gt; ArgName in ("-h","--help")
False # because ArgName = 'something' which is NOT in the tuple
</snippet></ROW><ROW><id>17602056</id><snippet>/dev/input/*</snippet></ROW><ROW><id>17602056</id><snippet>ioctl</snippet></ROW><ROW><id>17602056</id><snippet>evdev</snippet></ROW><ROW><id>17602056</id><snippet>/dev/input/*</snippet></ROW><ROW><id>17602056</id><snippet>uinput</snippet></ROW><ROW><id>17602056</id><snippet>pykeylogger</snippet></ROW><ROW><id>17602152</id><snippet>scipy.integrate.simps</snippet></ROW><ROW><id>17602321</id><snippet>QApplication</snippet></ROW><ROW><id>17602321</id><snippet>QWidget</snippet></ROW><ROW><id>17602321</id><snippet>QApplication.instance()</snippet></ROW><ROW><id>17602321</id><snippet>QApplication</snippet></ROW><ROW><id>17602321</id><snippet>QWidget</snippet></ROW><ROW><id>17602321</id><snippet>QApplication</snippet></ROW><ROW><id>17602321</id><snippet>&gt;&gt;&gt; QtGui.QWidget()
QWidget: Must construct a QApplication before a QPaintDevice
</snippet></ROW><ROW><id>17602321</id><snippet>src/gui/kernel/qwidget.cpp</snippet></ROW><ROW><id>17602321</id><snippet>if (!qApp) {
    qFatal("QWidget: Must construct a QApplication before a QPaintDevice");
    return;
}
</snippet></ROW><ROW><id>17602321</id><snippet>qApp</snippet></ROW><ROW><id>17602321</id><snippet>QApplication</snippet></ROW><ROW><id>17602321</id><snippet>QApplication.instance()</snippet></ROW><ROW><id>17602321</id><snippet>QWidget</snippet></ROW><ROW><id>17602321</id><snippet>QApplication</snippet></ROW><ROW><id>17602321</id><snippet>qApp</snippet></ROW><ROW><id>17602321</id><snippet>QApplication.instance()</snippet></ROW><ROW><id>17602321</id><snippet>QWidget</snippet></ROW><ROW><id>17602636</id><snippet>x</snippet></ROW><ROW><id>17602636</id><snippet>class myObject(object):
    def __init__(self): # The "constructor"
        self.x = [] # Assign x to this particular instance of myObject

&gt;&gt;&gt; debug: []
&gt;&gt;&gt; debug: []
</snippet></ROW><ROW><id>17602636</id><snippet>class A(object):
    class_var = [] # make a list attached to the A *class*
    def __init__(self):
        self.instance_var = [] # make a list attached to any *instance* of A

print 'class var:', A.class_var # prints []
# print 'instance var:', A.instance_var # This would raise an AttributeError!

print

a = A() # Make an instance of the A class
print 'class var:', a.class_var # prints []
print 'instance var:', a.instance_var # prints []

print

# Now let's modify both variables
a.class_var.append(1)
a.instance_var.append(1)
print 'appended 1 to each list'
print 'class var:', a.class_var # prints [1]
print 'instance var:', a.instance_var # prints [1]

print

# So far so good. Let's make a new object...
b = A()
print 'made new object'
print 'class var:', b.class_var # prints [1], because this is the list bound to the class itself
print 'instance var:', b.instance_var # prints [], because this is the new list bound to the new object, b

print

b.class_var.append(1)
b.instance_var.append(1)
print 'class var:', b.class_var # prints [1, 1]
print 'instance var:', b.instance_var # prints [1]
</snippet></ROW><ROW><id>17602967</id><snippet>sum</snippet></ROW><ROW><id>17602967</id><snippet>zip</snippet></ROW><ROW><id>17602967</id><snippet>def commons(L1, L2):
    return  sum(el1 == el2 * 1 for el1, el2 in zip(L1, L2))
</snippet></ROW><ROW><id>17602967</id><snippet>def commons(L1, L2):
    count = 0
    for i, elem in enumerate(L2):
        if elem == L1[i]:
            count += 1
    return count
</snippet></ROW><ROW><id>17602967</id><snippet>enumerate</snippet></ROW><ROW><id>17602967</id><snippet>def commons(L1, L2):
    count = 0
    for i, range(len(L2)):
        if L1[i] == L2[i]:
            count += 1
    return count
</snippet></ROW><ROW><id>17602967</id><snippet>len(L2) &lt;= len(L1)</snippet></ROW><ROW><id>17602967</id><snippet>def commons(L1, L2):
    count = 0
    for i, range(min(len(L2), len(L1))):
        if L1[i] == L2[i]:
            count += 1
    return count
</snippet></ROW><ROW><id>17603067</id><snippet>end += tab.count</snippet></ROW><ROW><id>17603067</id><snippet>import sys
from PyQt4 import QtGui

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        layout = QtGui.QVBoxLayout(self)
        self.button = QtGui.QPushButton('Test')
        self.edit = QtGui.QTextEdit()
        layout.addWidget(self.edit)
        layout.addWidget(self.button)
        self.button.clicked.connect(self.handleTest)

    def handleTest(self):
        tab = "\t"
        cursor = self.edit.textCursor()

        start = cursor.selectionStart()
        end = cursor.selectionEnd()

        cursor.setPosition(end)
        cursor.movePosition(cursor.EndOfLine)
        end = cursor.position()

        cursor.setPosition(start)
        cursor.movePosition(cursor.StartOfLine)
        start = cursor.position()
        print cursor.position(), end

        while cursor.position() &lt; end:
            cursor.movePosition(cursor.StartOfLine)
            cursor.insertText(tab)
            end += tab.count()
            cursor.movePosition(cursor.EndOfLine)

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    win = Window()
    win.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>17603126</id><snippet>grid</snippet></ROW><ROW><id>17603126</id><snippet>import tkinter

class Application(tkinter.Frame):

    @classmethod
    def main(cls):
        tkinter.NoDefaultRoot()
        root = tkinter.Tk()
        root.title('Recipes')
        root.geometry('400x300')
        root.resizable(False, False)
        app = cls(root)
        app.grid()
        root.mainloop()

    def __init__(self, master):
        super().__init__(master)
        self.create_first_screen()
        self.first_screen.grid_remove()
        self.create_second_screen()
        self.second_screen.grid_remove()
        self.first_screen.grid()

    def create_first_screen(self):
        self.first_screen = s1 = tkinter.Frame(self)
        self.first_screen.grid(row=0, column=0)
        # Create widgets.
        s1.name_label = tkinter.Label(s1, text='What is your recipe called?')
        s1.name_entry = tkinter.Entry(s1)
        s1.con_button = tkinter.Button(s1, text='Confirm',
                                       command=self.name_recipe)
        # Grid each widget.
        s1.name_label.grid(row=0, column=0)
        s1.name_entry.grid(row=0, column=1)
        s1.con_button.grid(row=0, column=2)

    def create_second_screen(self):
        self.second_screen = s2 = tkinter.Frame(self)
        self.second_screen.grid(row=0, column=0)
        # Create widgets.
        s2.name_label = tkinter.Label(s2, text='What is your name?')
        s2.name_entry = tkinter.Entry(s2)
        s2.con_button = tkinter.Button(s2, text='Confirm',
                                       command=self.name_yourself)
        # Grid each widget.
        s2.name_label.grid(row=0, column=0)
        s2.name_entry.grid(row=0, column=1)
        s2.con_button.grid(row=0, column=2)

    def name_recipe(self):
        name = self.first_screen.name_entry.get()
        with open(name + '.txt', 'w') as file:
            print('Recipe name:', name, file=file)
        self.first_screen.grid_remove()
        self.second_screen.grid()

    def name_yourself(self):
        name = self.second_screen.name_entry.get()
        with open(name + '.txt', 'w') as file:
            print('Your name:', name, file=file)
        self.second_screen.grid_remove()
        self.first_screen.grid()

if __name__ == '__main__':
    Application.main()
</snippet></ROW><ROW><id>17603235</id><snippet>not</snippet></ROW><ROW><id>17603235</id><snippet>colliderect</snippet></ROW><ROW><id>17603235</id><snippet>if not thing1.colliderect(thing2):
    ....
</snippet></ROW><ROW><id>17603456</id><snippet>request.session.itervalues()</snippet></ROW><ROW><id>17603493</id><snippet>generate_montage</snippet></ROW><ROW><id>17603493</id><snippet>try:
    generate_montage(sys.argv[1:], filename)
except:
    import traceback,time
    traceback.print_exc()
    time.sleep(600)
</snippet></ROW><ROW><id>17603493</id><snippet>base = os.path.dirname(os.path.abspath(__file__))
try:
    fn = os.path.join(base, 'font', 'Helvetica.ttf')
    image_font = ImageFont.truetype(fn, 18)
except:
    try:
        fn = os.path.join(base, 'font', 'Helvetica-18.pil')
        image_font = ImageFont.load(fn)
    except:
        image_font = ImageFont.load_default()
</snippet></ROW><ROW><id>17603596</id><snippet>return str(user) + " " + str(item) + " " + str(rating)
</snippet></ROW><ROW><id>17603596</id><snippet>return str(self.user) + " " + str(self.item) + " " + str(self.rating)
</snippet></ROW><ROW><id>17603752</id><snippet>getsize</snippet></ROW><ROW><id>17603752</id><snippet>os.stat</snippet></ROW><ROW><id>17603752</id><snippet>st_blocks</snippet></ROW><ROW><id>17603752</id><snippet>os.stat</snippet></ROW><ROW><id>17603752</id><snippet>GetFileInformationByHandleEx</snippet></ROW><ROW><id>17603752</id><snippet>ctypes</snippet></ROW><ROW><id>17603752</id><snippet>win32api</snippet></ROW><ROW><id>17603752</id><snippet>FILE_STANDARD_INFO</snippet></ROW><ROW><id>17603752</id><snippet>AllocationSize</snippet></ROW><ROW><id>17603752</id><snippet>EndOfFile</snippet></ROW><ROW><id>17603757</id><snippet>fig, ax = plt.subplots()
</snippet></ROW><ROW><id>17603757</id><snippet>ax</snippet></ROW><ROW><id>17603757</id><snippet>ax.contour(...)
ax.plot(...)
# etc.
</snippet></ROW><ROW><id>17603757</id><snippet>f = plt.figure()</snippet></ROW><ROW><id>17603757</id><snippet>def geom_macro(ax):
    &lt;Data is collected from datafile2 and analyzed&gt;
    &lt;annotations, arrows, and some other things are defined&gt;
    ax.annotate(...)

fig, ax = plt.subplots()
&lt;in this section a contour plot is defined of datafile1 data, axes, colorbars, etc...&gt;

if os.path.isfile('datafile2'):
    geom_macro(ax)

plt.show()
</snippet></ROW><ROW><id>17603757</id><snippet>ax</snippet></ROW><ROW><id>17603757</id><snippet>geom_macro</snippet></ROW><ROW><id>17603757</id><snippet>ax</snippet></ROW><ROW><id>17603757</id><snippet>geom_macro</snippet></ROW><ROW><id>17603757</id><snippet>geom_macro</snippet></ROW><ROW><id>17603757</id><snippet>ax</snippet></ROW><ROW><id>17603757</id><snippet>geom_macro</snippet></ROW><ROW><id>17603757</id><snippet>geom_macro</snippet></ROW><ROW><id>17603992</id><snippet>Config</snippet></ROW><ROW><id>17603992</id><snippet>global_mod.py</snippet></ROW><ROW><id>17603992</id><snippet>from global_mod import Config

class foo(threading.Thread):
    def run(self):
       # do something with cfg
       y = bar(name='test').start()

       while True:
           pass

    def test(self):
       print('hello world')

class bar(threading.Thread):
    def run(self):
        # do something with cfg
        # access x.test() from here

if __name__ == '__main__':
    cfg = Config()
    x = foo(name='Main').start()
</snippet></ROW><ROW><id>17604069</id><snippet>def add2bus(self, Bus):
        if Person.get_route(self) == Bus.get_route() :
            Bus.get_on(Bus)

        else :
            print("not compatible")
</snippet></ROW><ROW><id>17604069</id><snippet>Bus.get_on(self)
</snippet></ROW><ROW><id>17604069</id><snippet>C2C.people[0].get_name(). 
</snippet></ROW><ROW><id>17604069</id><snippet>def get_name(self):
   return self.name
</snippet></ROW><ROW><id>17604076</id><snippet>verify</snippet></ROW><ROW><id>17604076</id><snippet>cert</snippet></ROW><ROW><id>17604076</id><snippet>import requests
cert_file_path = "cert.pem"
key_file_path = "key.pem"

url = "https://example.com/resource"
params = {"param_1": "value_1", "param_2": "value_2"}
cert = (cert_file_path, key_file_path)
r = requests.get(url, params=params, cert=cert, verify=False)
</snippet></ROW><ROW><id>17604076</id><snippet>verify</snippet></ROW><ROW><id>17604076</id><snippet>cert</snippet></ROW><ROW><id>17604216</id><snippet>tt = (sm-m)/np.sqrt(sv/float(n))  # t-statistic for mean
pval = stats.t.sf(np.abs(tt), n-1)*2  # two-sided pvalue = Prob(abs(t)&gt;tt)
print 't-statistic = %6.3f pvalue = %6.4f' % (tt, pval)
t-statistic =  0.391 pvalue = 0.6955
</snippet></ROW><ROW><id>17604217</id><snippet>admin</snippet></ROW><ROW><id>17604217</id><snippet>runserver</snippet></ROW><ROW><id>17604217</id><snippet>DEBUG</snippet></ROW><ROW><id>17604217</id><snippet>True</snippet></ROW><ROW><id>17604217</id><snippet>django.contrib.staticfiles.views.serve()</snippet></ROW><ROW><id>17604217</id><snippet>collectstatic</snippet></ROW><ROW><id>17604275</id><snippet>from tempfile import TemporaryFile
from itertools import chain
</snippet></ROW><ROW><id>17604275</id><snippet>output = {}
with open('input') as fin:
    for line in fin:
        length = len(line.split())
        output.setdefault(length, TemporaryFile()).write(line)
</snippet></ROW><ROW><id>17604275</id><snippet>defaultdict</snippet></ROW><ROW><id>17604275</id><snippet>from collections import defaultdict
output = defaultdict(TemporaryFile)
...
output[length].write(line)
</snippet></ROW><ROW><id>17604275</id><snippet>for fh in output.values():
    fh.seek(0)
</snippet></ROW><ROW><id>17604275</id><snippet>with open('output', 'w') as fout:
    fout.writelines(chain.from_iterable(v for k,v in sorted(output.iteritems())))
</snippet></ROW><ROW><id>17604349</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>17604349</id><snippet>import serial
from multiprocessing import Process

ser=serial.Serial('COM8',115200)

c=" "
out=" "

def pi():
    print ("started")
    out=" "
    while 1:
    #  loop contents

def man():

    while(1):
        # loop contents

if __name__ == '__main__':

    p1=Process(target=pi,args=())
    p2=Process(target=man,args=())

    p1.start() 
    p2.start()
    p1.join()
    p2.join()
</snippet></ROW><ROW><id>17604349</id><snippet>fork()</snippet></ROW><ROW><id>17604349</id><snippet>__main__</snippet></ROW><ROW><id>17604538</id><snippet>re.finditer</snippet></ROW><ROW><id>17604538</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; sequence = 'aaabbbaaacccdddeeefff'
&gt;&gt;&gt; query = 'aaa'
&gt;&gt;&gt; r = re.compile(query)
&gt;&gt;&gt; [[m.start(),m.end()] for m in r.finditer(sequence)]
[[0, 3], [6, 9]]
</snippet></ROW><ROW><id>17604538</id><snippet>iterator</snippet></ROW><ROW><id>17604538</id><snippet>MatchObject</snippet></ROW><ROW><id>17604646</id><snippet>MATERIALS = [
    ['AR'],
    ['ARU'],
    ['ARC'],
    ['CON'],
    ['CSR'],
    ['MCR'],
    ['USF'],
    ['AR', 'ARU', 'ARC', 'MCR', 'CSR'],
    ['AR', 'ARU', 'ARC', 'MCR'],
    ['AR', 'ARU', 'ARC'],
]
</snippet></ROW><ROW><id>17604646</id><snippet>AR = 'AR'
ARU = 'ARU'
ARC = 'ARC'
CON = 'CON'
CSR = 'CSR'
MCR = 'MCR'
USF = 'USF'

MATERIALS_SIMPLE = [
    AR,
    ARU,
    ARC,
    CON,
    CSR,
    MCR,
    USF,
]

MATERIALS = [
    [AR, ARU, ARC, MCR, CSR],
    [AR, ARU, ARC, MCR],
    [AR, ARU, ARC],
]
</snippet></ROW><ROW><id>17604646</id><snippet>trie</snippet></ROW><ROW><id>17604677</id><snippet>QAbstractItemView::visualRect</snippet></ROW><ROW><id>17604677</id><snippet>viewport_rect = QRect(QPoint(0, 0), self.view.viewport().size())
for row in range(0, self.model.rowCount()):
  rect = self.view.visualRect(self.model.index(row, 0))
  is_visible = viewport_rect.intersects(rect)
</snippet></ROW><ROW><id>17604677</id><snippet>for</snippet></ROW><ROW><id>17604677</id><snippet>contains</snippet></ROW><ROW><id>17604677</id><snippet>intersects</snippet></ROW><ROW><id>17604704</id><snippet>ctypes</snippet></ROW><ROW><id>17604743</id><snippet>Person</snippet></ROW><ROW><id>17604743</id><snippet>name</snippet></ROW><ROW><id>17604743</id><snippet>to_field</snippet></ROW><ROW><id>17604743</id><snippet>__</snippet></ROW><ROW><id>17604743</id><snippet>ForeignKey</snippet></ROW><ROW><id>17604743</id><snippet>primary_key=True</snippet></ROW><ROW><id>17604743</id><snippet>class Person(models.Model):
    name = models.CharField(primary_key=True, max_length=...)

class JobInfo(models.Model):
    person = models.ForeignKey(Person, primary_key=True, db_column='name', to_field='name')
    startdate = models.DateField(db_column='startdate')
    ...
</snippet></ROW><ROW><id>17604743</id><snippet>to_field</snippet></ROW><ROW><id>17604743</id><snippet>name</snippet></ROW><ROW><id>17604743</id><snippet>name</snippet></ROW><ROW><id>17604743</id><snippet>person</snippet></ROW><ROW><id>17604743</id><snippet>create or replace view person_info as 
    select person.id, person.name,
           jobinfo.startdate, jobinfo.employer, jobinfo.salary,
           hobbies.exercise, hobbies.fun,
           clothing.shoes, ...
    from person
         left outer join hobbies on hobbies.name = person.name
         left outer join jobinfo on jobinfo.name = person.name
         left outer join clothing on clothing.name = person.name
;
</snippet></ROW><ROW><id>17604743</id><snippet>db_table = person_info</snippet></ROW><ROW><id>17604743</id><snippet>managed = False</snippet></ROW><ROW><id>17604743</id><snippet>Meta class</snippet></ROW><ROW><id>17604743</id><snippet>person_id</snippet></ROW><ROW><id>17604743</id><snippet>create or replace view jobinfo_by_person as
    select person.id as person_id, jobinfo.*
    from person inner join jobinfo on jobinfo.name = person.name;
create or replace view hobbies_by_person as
    select person.id as person_id, hobbies.*
    from person inner join hobbies on hobbies.name = person.name;
</snippet></ROW><ROW><id>17604743</id><snippet>by_person</snippet></ROW><ROW><id>17604869</id><snippet>&gt;&gt;&gt; d = {'foo':'bar', 'baz':'bazbaz'}
&gt;&gt;&gt; d1 = {'foo':'baz'}
&gt;&gt;&gt; keys = d.viewkeys() | d1.viewkeys()
&gt;&gt;&gt; {k : d.get(k,'') + d1.get(k,'') for k in keys}
{'foo': 'barbaz', 'baz': 'bazbaz'}
</snippet></ROW><ROW><id>17604869</id><snippet>&gt;&gt;&gt; dict((k, d.get(k,'')+d1.get(k,'')) for k in keys)
{'foo': 'barbaz', 'baz': 'bazbaz'}
</snippet></ROW><ROW><id>17604869</id><snippet>def func(*dicts):
    keys = set().union(*dicts)
    return {k: "".join(dic.get(k,'') for dic in dicts)  for k in keys}
... 
&gt;&gt;&gt; d = {'foo':'bar', 'baz':'bazbaz'}
&gt;&gt;&gt; d1 = {'foo':'baz','spam':'eggs'}
&gt;&gt;&gt; d2 = {'foo':'foofoo', 'spam':'bar'}
&gt;&gt;&gt; func(d,d1,d2)
{'foo': 'barbazfoofoo', 'baz': 'bazbaz', 'spam': 'eggsbar'}
</snippet></ROW><ROW><id>17604930</id><snippet>(thread, user)</snippet></ROW><ROW><id>17604972</id><snippet>import pymc as mc
import numpy as np

data = np.random.normal(-200,15,size=1000)

mean = mc.Uniform('mean', lower=min(data), upper=max(data))
std_dev = mc.Uniform('std_dev', lower=0, upper=50)

@mc.stochastic(observed=True)
def custom_stochastic(value=data, mean=mean, std_dev=std_dev):
    return np.sum(-np.log(std_dev) - 0.5*np.log(2) - 
                  0.5*np.log(np.pi) - 
                  (value-mean)**2 / (2*(std_dev**2)))


model = mc.MCMC([mean,std_dev,custom_stochastic])
model.sample(iter=5000)

print "!"
print(model.stats()['mean']['mean'])
print(model.stats()['std_dev']['mean'])
</snippet></ROW><ROW><id>17605008</id><snippet>while len(pkt) &gt; 0:

    print "Waiting.."
    pkt = sock.recv(2048)
    print "received"

    if(len(pkt)) &gt; 54:
        ethHeader = pkt[0:14]
        ipHeader = pkt[14:34]
        tcpHeader = pkt[34:38]

        ethH = struct.unpack("!6s6s2s",ethHeader)
        ethdata = processEth(ethH)

        ipH = struct.unpack("!12s4s4s",ipHeader)
        ipdata = processIP(ipH)

        tcpH = struct.unpack("!HH16", tcpHeader)
        tcpdata = processTCP(tcpH)

        print "S.mac "+ethdata[0]+" D.mac "+ethdata[1]+"     from:  "+ipdata[0]+":"+tcpdata[0]+"    to:  "+ipdata[1]+":"+tcpdata[1]
        #time.sleep(1);

    else:
        continue
</snippet></ROW><ROW><id>17605072</id><snippet>np.add.outer(a,b)
</snippet></ROW><ROW><id>17605072</id><snippet>np.subtract.outer</snippet></ROW><ROW><id>17605072</id><snippet>np.subtract.outer(a,-b)
</snippet></ROW><ROW><id>17605089</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>17605089</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
with open('abc') as f:
    #next(f)       #skip header if present
    for line in f:
        data = map(str.strip, line.split(', '))
        idx, sex, mail = data if len(data) == 3 else data+['']
        dic.setdefault(mail,[]).append([idx,sex])
...     
</snippet></ROW><ROW><id>17605089</id><snippet>for k,v in dic.iteritems():
    print ", ".join((v[0][0],v[0][1],k))
...     
1, M, lol@jk.com
2, F, 
4, F, jack@jay.com
</snippet></ROW><ROW><id>17605089</id><snippet>for k,v in dic.iteritems():
    if len(v) &gt;1:
        for v1 in v[1:]:
            print ", ".join((v1[0],v1[1],k))
...             
3, F,, 
</snippet></ROW><ROW><id>17605318</id><snippet>while True:
    msg = content.recv()
    print msg
    if msg == "0":
        sys.exit()
</snippet></ROW><ROW><id>17605556</id><snippet>&gt;&gt;&gt; def root(n, r=4):
...     from numpy import roots
...     return roots([1]+[0]*(r-1)+[-n])
...
&gt;&gt;&gt; print(root(12))
[ -1.86120972e+00+0.j          -3.05311332e-16+1.86120972j
  -3.05311332e-16-1.86120972j   1.86120972e+00+0.j        ]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17605605</id><snippet>' '.join(set(col.split()))
</snippet></ROW><ROW><id>17605605</id><snippet>line1['Name']</snippet></ROW><ROW><id>17605605</id><snippet>outline1['Name'] = ' '.join(set(col.split()))
</snippet></ROW><ROW><id>17605605</id><snippet>set</snippet></ROW><ROW><id>17605605</id><snippet>OrderedSet</snippet></ROW><ROW><id>17605605</id><snippet>collections</snippet></ROW><ROW><id>17605605</id><snippet>unique_everseen</snippet></ROW><ROW><id>17605605</id><snippet>itertools</snippet></ROW><ROW><id>17605605</id><snippet>outline = dict(line1)</snippet></ROW><ROW><id>17605605</id><snippet>line1</snippet></ROW><ROW><id>17605605</id><snippet>for line1 in read1:
    line1['Name'] = ' '.join(unique_everseen(line1['Name'].split()))
    write1.writerow(line1)
</snippet></ROW><ROW><id>17605700</id><snippet>from win32com.client import Dispatch
</snippet></ROW><ROW><id>17605700</id><snippet>import win32com.client              #import the whole module first
Dispatch = win32com.client.Dispatch #assign the required attributes to global variables
del win32com                        #remove the reference to module object
</snippet></ROW><ROW><id>17605700</id><snippet>from win32com.client import Dispatch</snippet></ROW><ROW><id>17605700</id><snippet>win32com.client.Dispatch</snippet></ROW><ROW><id>17605700</id><snippet>win32com.client.Dispatch()</snippet></ROW><ROW><id>17605700</id><snippet>win32com</snippet></ROW><ROW><id>17605700</id><snippet>client</snippet></ROW><ROW><id>17605700</id><snippet>win32com</snippet></ROW><ROW><id>17605700</id><snippet>Dispatch</snippet></ROW><ROW><id>17605700</id><snippet>win32com.client</snippet></ROW><ROW><id>17605700</id><snippet>from os.path import splitext</snippet></ROW><ROW><id>17605700</id><snippet>import</snippet></ROW><ROW><id>17605700</id><snippet>&gt;&gt;&gt; def func1():
    from os.path import splitext
...     
&gt;&gt;&gt; def func2():
    import os.path
...     
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(func1)
  2           0 LOAD_CONST               1 (-1)
              3 LOAD_CONST               2 (('splitext',))
              6 IMPORT_NAME              0 (os.path)
              9 IMPORT_FROM              1 (splitext)
             12 STORE_FAST               0 (splitext)
             15 POP_TOP             
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(func2)
  2           0 LOAD_CONST               1 (-1)
              3 LOAD_CONST               0 (None)
              6 IMPORT_NAME              0 (os.path)
              9 STORE_FAST               0 (os)
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE     
</snippet></ROW><ROW><id>17605700</id><snippet>from os.path import splitext</snippet></ROW><ROW><id>17605700</id><snippet>os</snippet></ROW><ROW><id>17605700</id><snippet>sys.modules</snippet></ROW><ROW><id>17605700</id><snippet>reload()</snippet></ROW><ROW><id>17605700</id><snippet>reload(modulename)</snippet></ROW><ROW><id>17605700</id><snippet>import sys
from os.path import splitext
try:
    print os
except NameError:
    print "os not found"
try:
    print os.path
except NameError:
    print "os.path is not found"

print sys.modules['os']
</snippet></ROW><ROW><id>17605700</id><snippet>os not found
os.path is not found
&lt;module 'os' from '/usr/lib/python2.7/os.pyc'&gt;
</snippet></ROW><ROW><id>17605700</id><snippet>$ python -m timeit -n 1 'from os.path import splitext'
1 loops, best of 3: 5.01 usec per loop
$ python -m timeit -n 1 'import os.path'
1 loops, best of 3: 4.05 usec per loop
$ python -m timeit -n 1 'from os import path'
1 loops, best of 3: 5.01 usec per loop
$ python -m timeit -n 1 'import os'
1 loops, best of 3: 2.86 usec per loop
</snippet></ROW><ROW><id>17605791</id><snippet>qObj = None
for field in fields:
    newQ = Q(**{field :  Null})
    if qObj is None:
        qObj = newQ
    else:
        qObj = qObj | newQ
</snippet></ROW><ROW><id>17605791</id><snippet>qObj = None</snippet></ROW><ROW><id>17605791</id><snippet>Q(**{field: Null})</snippet></ROW><ROW><id>17605965</id><snippet>import numpy as np
A = np.asarray(['4', '4', '2', '8', '8', '8', '8', '8', '16', '32', '16', '16', '32'])
B = np.asarray(['2', '4', '8', '16', '32'])
idx_of_a_in_b=np.argmax(A[np.newaxis,:]==B[:,np.newaxis],axis=0)
print(idx_of_a_in_b)
</snippet></ROW><ROW><id>17605965</id><snippet>[1 1 0 2 2 2 2 2 3 4 3 3 4]
</snippet></ROW><ROW><id>17606025</id><snippet>..</snippet></ROW><ROW><id>17606025</id><snippet>clldsystem.esa.ESAAnalyzer</snippet></ROW><ROW><id>17606025</id><snippet>main()</snippet></ROW><ROW><id>17606025</id><snippet>java</snippet></ROW><ROW><id>17606025</id><snippet>java</snippet></ROW><ROW><id>17606025</id><snippet>clldsystem.esa.ESAAnalyzer</snippet></ROW><ROW><id>17606025</id><snippet>-cp</snippet></ROW><ROW><id>17606025</id><snippet>java -cp "../lib/*:esalib.jar" ../clldsystem.esa.ESAAnalyzer
</snippet></ROW><ROW><id>17606025</id><snippet>java -cp "../lib/*:../esalib.jar" clldsystem.esa.ESAAnalyzer
</snippet></ROW><ROW><id>17606115</id><snippet>re.findall</snippet></ROW><ROW><id>17606115</id><snippet>&gt;&gt;&gt; str1 = 'abc(1),bcd(xxx),ddd(dfk dsaf)'
&gt;&gt;&gt; results = re.findall(r'(\w+)\(([^)]+)\),?',str1)
for k,v in results:
    print('key = %r, value = %r' % (k, v))
...     
key = 'abc', value = '1'
key = 'bcd', value = 'xxx'
key = 'ddd', value = 'dfk dsaf'
</snippet></ROW><ROW><id>17606115</id><snippet>dict()</snippet></ROW><ROW><id>17606115</id><snippet>&gt;&gt;&gt; dict(results)
{'bcd': 'xxx', 'abc': '1', 'ddd': 'dfk dsaf'}
</snippet></ROW><ROW><id>17606218</id><snippet>diagonal</snippet></ROW><ROW><id>17606218</id><snippet>&gt;&gt;&gt; m = matrix([[1,2,3], [4,5,6], [7,8,9]]
&gt;&gt;&gt; np.diagonal(m)
array([1, 5, 9])
&gt;&gt;&gt; m.diagonal()
matrix([[1, 5, 9]])
</snippet></ROW><ROW><id>17606218</id><snippet>matrix</snippet></ROW><ROW><id>17606218</id><snippet>+</snippet></ROW><ROW><id>17606218</id><snippet>*</snippet></ROW><ROW><id>17606218</id><snippet>+</snippet></ROW><ROW><id>17606218</id><snippet>*</snippet></ROW><ROW><id>17606259</id><snippet>urllib</snippet></ROW><ROW><id>17606259</id><snippet>import contextlib
import selenium.webdriver as webdriver
import lxml.html as LH
link = 'https://www.theice.com/productguide/ProductSpec.shtml;jsessionid=7A651D7E9437F76904BEC5623DBAB055?specId=19118104#expiry'

with contextlib.closing(webdriver.PhantomJS('phantomjs')) as driver:
    driver.get(link)
    content = driver.page_source
    doc = LH.fromstring(content)
    tds = doc.xpath(
        '//table[@class="default"]//tr[@class="odd" or @class="even"]/td/text()')
    print('\n'.join(map(str, zip(*[iter(tds)]*5))))
</snippet></ROW><ROW><id>17606259</id><snippet>('Jul13', '2/11/13', '7/26/13', '7/26/13', '7/26/13')
('Aug13', '2/11/13', '8/30/13', '8/30/13', '8/30/13')
('Sep13', '2/11/13', '9/27/13', '9/27/13', '9/27/13')
('Oct13', '2/11/13', '10/25/13', '10/25/13', '10/25/13')
...
('Aug18', '2/11/13', '8/31/18', '8/31/18', '8/31/18')
('Sep18', '2/11/13', '9/28/18', '9/28/18', '9/28/18')
('Oct18', '2/11/13', '10/26/18', '10/26/18', '10/26/18')
('Nov18', '2/11/13', '11/30/18', '11/30/18', '11/30/18')
('Dec18', '2/11/13', '12/28/18', '12/28/18', '12/28/18')
</snippet></ROW><ROW><id>17606259</id><snippet>lxml</snippet></ROW><ROW><id>17606259</id><snippet>'//table[@class="default"]//tr[@class="odd" or @class="even"]/td/text()'
</snippet></ROW><ROW><id>17606259</id><snippet>//table    # search recursively for &lt;table&gt;
  [@class="default"]  # with an attribute class="default"
  //tr     # and find inside &lt;table&gt; all &lt;tr&gt; tags
    [@class="odd" or @class="even"]   # that have attribute class="odd" or class="even"
    /td      # find the &lt;td&gt; tags which are direct children of the &lt;tr&gt; tags  
      /text()  # return the text inside the &lt;td&gt; tag
</snippet></ROW><ROW><id>17606259</id><snippet>zip(*[iter(tds)]*5)</snippet></ROW><ROW><id>17606259</id><snippet>tds</snippet></ROW><ROW><id>17606259</id><snippet>['Jul13', '2/11/13', '7/26/13', '7/26/13', '7/26/13', 'Aug13', '2/11/13', '8/30/13', '8/30/13', '8/30/13',...]
</snippet></ROW><ROW><id>17606259</id><snippet>zip(*[iter(tds)]*5)</snippet></ROW><ROW><id>17606259</id><snippet>tds</snippet></ROW><ROW><id>17606259</id><snippet>tds = doc.xpath(
    '''//table[@class="default"]
         //tr[@class="odd" or @class="even"]
           /td[1]/text()''')
print(tds)
</snippet></ROW><ROW><id>17606259</id><snippet>import contextlib
import selenium.webdriver as webdriver
import lxml.html as LH
link = 'https://www.theice.com/productguide/ProductSpec.shtml?specId=6753474#expiry'
with contextlib.closing(webdriver.PhantomJS('phantomjs')) as driver:
    driver.get(link)
    content = driver.page_source
    doc = LH.fromstring(content)
    tds = doc.xpath(
        '''//table[@class="default"]
             //tr[@class="odd" or @class="even"]
               /td[1]/text()''')
    print(tds) 
</snippet></ROW><ROW><id>17606259</id><snippet>['Jul13', 'Aug13', 'Sep13', 'Oct13', 'Nov13', 'Dec13', 'Jan14', 'Feb14', 'Mar14', 'Apr14', 'May14', 'Jun14', 'Jul14', 'Aug14', 'Sep14', 'Oct14', 'Nov14', 'Dec14', 'Jan15', 'Feb15', 'Mar15', 'Apr15', 'May15', 'Jun15', 'Jul15', 'Aug15', 'Sep15', 'Oct15', 'Nov15', 'Dec15']
</snippet></ROW><ROW><id>17606437</id><snippet>.contents</snippet></ROW><ROW><id>17606437</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup as BS
&gt;&gt;&gt; soup = BS('&lt;span class="foo"&gt; bar baz &lt;a href="http://foo.com"&gt;link&lt;/a&gt;&lt;/span&gt;')
&gt;&gt;&gt; print soup.find('span').contents
[u' bar baz ', &lt;a href="http://foo.com"&gt;link&lt;/a&gt;]
</snippet></ROW><ROW><id>17606437</id><snippet>[0]</snippet></ROW><ROW><id>17606437</id><snippet>.contents</snippet></ROW><ROW><id>17606437</id><snippet>bar baz</snippet></ROW><ROW><id>17606437</id><snippet>.group(1)</snippet></ROW><ROW><id>17606437</id><snippet>n1,n2</snippet></ROW><ROW><id>17606564</id><snippet>def on_change_interest_fields(self, cr, uid, ids, amountPay, interestType, context):
    interest = amountPay * 0.5
    return {'value': {'interest': interest,},}
</snippet></ROW><ROW><id>17606608</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>17606608</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; dic = OrderedDict()
with open('file.txt') as f:
    for line in f:
        key = tuple(tuple(x.split(',')) for x in line.split())
        rev_key = tuple(x[::-1] for x in key)
        if key not in dic and rev_key not in dic:
            dic[key] = line.strip()
...             
&gt;&gt;&gt; for v in dic.itervalues():
    print v
...     
1,2 3,4
5,6 7,8
5,6 8,7
</snippet></ROW><ROW><id>17606665</id><snippet>driver=webdriver.Firefox()
driver.get('https://www-01.ibm.com/products/hardware/configurator/americas/bhui/launchNI.wss') 
driver.find_element_by_id("modelnumber").send_keys("7383AC1") 
driver.find_element_by_name("submit").click() 
element1 = driver.find_element_by_xpath("//label[contains(text(),'SLES for SAP Apps 8 Skt Virt Unlimited Subs Only 5Yr (5731SLX)')]")
id=element1.get_attribute('for')
driver.find_element_by_id(id).click()
print driver.title

wait=ui.WebDriverWait(driver,300)
image1=driver.find_element_by_xpath("//img[@src='//www.ibm.com/i/c.gif']")
print image1.get_attribute('class')
div1=driver.find_element_by_id("genMask_c")
wati.until(EC.staleness_of(driver.find_element_by_id("genMask_c")), 'visible')
driver.find_element_by_id("continueTop").click()
print driver.title
</snippet></ROW><ROW><id>17606832</id><snippet>before_handler</snippet></ROW><ROW><id>17606950</id><snippet>after</snippet></ROW><ROW><id>17606950</id><snippet>after_cancel</snippet></ROW><ROW><id>17606950</id><snippet>from Tkinter import *

remain = 11
_timer = None
def cdtimerr():
    global remain, _timer
    remain -= 1
    cdtext = canvas.create_text(510, 6, text=remain, font="Ubuntu 29 bold", anchor=NW) 
    if remain == 0:
        canvas.delete(ALL)
    else:
        _timer = canvas.after(1000, lambda: (canvas.delete(cdtext), cdtimerr()))

root = Tk()
root.geometry('1024x768')
canvas = Canvas(root)
canvas.pack(expand=1, fill=BOTH)
_timer = canvas.after(0, cdtimerr)
Button(root, text='Cancel', command=lambda: canvas.after_cancel(_timer)).pack()
root.mainloop()
</snippet></ROW><ROW><id>17607039</id><snippet>def teste(molecules):
    P = np.array([Psat(molecule) for molecule in molecules])
    f1 = lambda x: np.sum(x) - 1
    f2 = lambda x: np.dot(x, P) - 760
    return f1, f2
</snippet></ROW><ROW><id>17607039</id><snippet>A = np.vstack((np.ones((len(molecules),)),
               [Psat(molecule) for molecule in molecules]))
b = np.array([1, 760])
</snippet></ROW><ROW><id>17607039</id><snippet>return lambda x: np.dot(A, x) - b
</snippet></ROW><ROW><id>17607039</id><snippet>np.linalg.solve(A, b)</snippet></ROW><ROW><id>17607168</id><snippet>int add(int a, int b)
{
   a += b;
   return a;
}

int addBad(int &amp;a, int &amp;b)
{
   a += b;
   return a;
}

for(int i=0;i&lt;10;++i)
{
   for(int j=0;j&lt;10;++j)
   {
      cout &lt;&lt; add(i,j) &lt;&lt; endl;
   }
}

for(int i=0;i&lt;10;++i)
{
   for(int j=0;j&lt;10;++j)
   {
      cout &lt;&lt; addBad(i,j) &lt;&lt; endl;
   }
}
</snippet></ROW><ROW><id>17607168</id><snippet>add</snippet></ROW><ROW><id>17607168</id><snippet>addBad</snippet></ROW><ROW><id>17607168</id><snippet>add</snippet></ROW><ROW><id>17607168</id><snippet>addBad</snippet></ROW><ROW><id>17607306</id><snippet>GLOBAL_VAR.sub</snippet></ROW><ROW><id>17607527</id><snippet>map</snippet></ROW><ROW><id>17607527</id><snippet>operator.add</snippet></ROW><ROW><id>17607527</id><snippet>&gt;&gt;&gt; from operator import add
&gt;&gt;&gt; map(add,*dict1.values())
[3, 5, 7]
&gt;&gt;&gt; map(add,*dict2.values())
[4, 6, 8, 10]
</snippet></ROW><ROW><id>17607527</id><snippet>zip</snippet></ROW><ROW><id>17607527</id><snippet>list comprehension</snippet></ROW><ROW><id>17607527</id><snippet>&gt;&gt;&gt; [sum(x) for x in zip(*dict1.values())]
[3, 5, 7]
&gt;&gt;&gt; [sum(x) for x in zip(*dict2.values())]
[4, 6, 8, 10]
</snippet></ROW><ROW><id>17607527</id><snippet>def func(dic, *keys):
    return [sum(x) for x in zip(*(dic[k] for k in keys))]

&gt;&gt;&gt; dict1 = {'a': [0,1,2], 'b': [3,4,5], 'c':[6,7,8]}
&gt;&gt;&gt; func(dict1,'a')
[0, 1, 2]
&gt;&gt;&gt; func(dict1,'a','b')
[3, 5, 7]
&gt;&gt;&gt; func(dict1,'b','c')
[9, 11, 13]
&gt;&gt;&gt; func(dict1,'b','c','a')
[9, 12, 15]
</snippet></ROW><ROW><id>17607679</id><snippet>.contents</snippet></ROW><ROW><id>17607679</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup as BS
&gt;&gt;&gt; html = """&lt;li class="li_dataline2"&gt;
... 
... 
... &lt;b&gt; Expiry date: &lt;/b&gt;14/09/2013
... 
... 
... &lt;/li&gt;"""
&gt;&gt;&gt; soup = BS(html)
&gt;&gt;&gt; print soup.find('li', {'class':'li_dataline2'}).contents[-1].strip()
14/09/2013
</snippet></ROW><ROW><id>17607683</id><snippet>from copy import deepcopy
import json
from pprint import pprint
from StringIO import StringIO

json_str = \
'''
{
    "Resource": [
        {
            "@name": "Bravo",
            "@signature": "h#Bravo",
            "@type": "ESX_5.x",
            "@typeDisplayName": "ESX Server",
            "PerfList": {
                "@attrId": "cpuUsage",
                "@attrName": "Usage",
                "Data": [
                    {
                        "@data": "26.00",
                        "@end": "01:05:00",
                        "@interval": "60",
                        "@start": "01:04:00"
                    },
                    {
                        "@data": "24.00",
                        "@end": "01:04:00",
                        "@interval": "60",
                        "@start": "01:03:00"
                    },
                    {
                        "@data": "36.00",
                        "@end": "01:03:00",
                        "@interval": "60",
                        "@start": "01:02:00"
                    },
                    {
                        "@data": "38.00",
                        "@end": "01:02:00",
                        "@interval": "60",
                        "@start": "01:01:00"
                    },
                    {
                        "@data": "37.00",
                        "@end": "01:01:00",
                        "@interval": "60",
                        "@start": "01:00:00"
                    }
                ]
            },
            "Resource": [
                {
                    "@name": "Tango",
                    "@signature": "vm#Tango",
                    "@type": "vm",
                    "@typeDisplayName": "Virtual Machine",
                    "PerfList": {
                        "@attrId": "cpuUsage",
                        "@attrName": "Usage",
                        "Data": {
                            "@data": "12.00",
                            "@end": "04:05:00",
                            "@interval": "60",
                            "@start": "04:04:00"
                        }
                    }
                },
                {
                    "@name": "Charlie",
                    "@signature": "vm#Charlie",
                    "@type": "vm",
                    "@typeDisplayName": "Virtual Machine",
                    "PerfList": {
                        "@attrId": "cpuUsage",
                        "@attrName": "Usage",
                        "Data": [
                            {
                                "@data": "12.00",
                                "@end": "04:20:00",
                                "@interval": "60",
                                "@start": "04:19:00"
                            },
                            {
                                "@data": "12.00",
                                "@end": "04:19:00",
                                "@interval": "60",
                                "@start": "04:18:00"
                            }
                        ]
                    }
                }
            ]
        },
        {
            "@name": "Alpha",
            "@signature": "h#Alpha",
            "@type": "ESX_5.x",
            "@typeDisplayName": "ESX Server",
            "PerfList": [
                {
                    "@attrId": "cpuUsage",
                    "@attrName": "Usage",
                    "Data": {
                        "@data": "9",
                        "@end": "06:10:00",
                        "@interval": "60",
                        "@start": "06:09:00"
                    }
                },
                {
                    "@attrId": "cpuUsagemhz",
                    "@attrName": "Usage MHz",
                    "Data": {
                        "@data": "479",
                        "@end": "06:10:00",
                        "@interval": "60",
                        "@start": "06:09:00"
                    }
                }
            ]
        }
    ]
}
'''

def walk_fun_lim(ilist, func=None):
    '''
    Recursively walk a nested list and dict structure, running func on all dicts
    '''
    def walk_fun_lim_helper(ilist, func=None, count=0):
        tlist = []
        ttlist = []
        if(isinstance(ilist, list)):
            ttlist = filter(lambda x: x, func(filter(lambda x: isinstance(x, dict), ilist)))
            if(ttlist):
                tlist += ttlist
            for q in ilist:
                ttlist = filter(lambda x: x, walk_fun_lim_helper(q, func, count+1))
                if(ttlist):
                    tlist += ttlist
        elif(isinstance(ilist, dict)):
            ttlist = filter(lambda x: x, func([ilist]))
            if(ttlist):
                tlist += ttlist
            for q in ilist:
                ttlist = filter(lambda x: x, walk_fun_lim_helper(ilist[q], func, count+1))
                if(ttlist):
                    tlist += ttlist
        return [tlist] if(count != 0) else tlist
    if(func != None and hasattr(func, "__call__")):
        return walk_fun_lim_helper(ilist, func)
    else:
        return []

def transformers_robots_in_disguise(x):
    for idict in x:
        plist = idict.pop("PerfList", [])
        plist = plist if(isinstance(plist, list)) else [plist]
        for sub_dict in plist:
            sub_name = sub_dict.pop("@attrId")
            dlist = sub_dict.pop("Data", [])
            dlist = dlist if(isinstance(dlist, list)) else [dlist]
            new_dict = {}
            for sub_dict in dlist:
                new_dict["from_%(@start)s_to_%(@end)s" % sub_dict] = sub_dict["@data"]
                new_dict["@interval"] = sub_dict["@interval"]
            idict[sub_name] = new_dict
        rlist = idict.pop("Resource", [])
        rlist = rlist if(isinstance(rlist, list)) else [rlist]
        for sub_dict in rlist:
            sub_type = sub_dict.pop("@type")
            sub_name = sub_dict.pop("@name")
            idict.setdefault(sub_type, {})[sub_name] = sub_dict
    return []

json_data = json.load(StringIO(json_str))
data_copy = deepcopy(json_data)
walk_fun_lim(data_copy, transformers_robots_in_disguise)
pprint(data_copy)
</snippet></ROW><ROW><id>17607756</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup("""
... &lt;figure&gt;
...     &lt;img src=".." alt=".." /&gt;
...     Some text that I have to wrap in &lt;code&gt;figcaption&lt;/code&gt;
... &lt;/figure&gt;
... """)
&gt;&gt;&gt; for figure in soup.find_all("figure"):
...     img = figure.find("img")
...     if img is not None:
...         figcaption = soup.new_tag("figcaption")
...         for el in list(img.next_siblings):
...             figcaption.append(el)
...         img.insert_after(figcaption)
... 
&gt;&gt;&gt; soup
&lt;html&gt;&lt;body&gt;&lt;figure&gt;
    &lt;img alt=".." src=".."/&gt;&lt;figcaption&gt;
    Some text that I have to wrap in &lt;code&gt;figcaption&lt;/code&gt;
&lt;/figcaption&gt;&lt;/figure&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>17607756</id><snippet>next_siblings</snippet></ROW><ROW><id>17607756</id><snippet>next_elements</snippet></ROW><ROW><id>17607756</id><snippet>figure</snippet></ROW><ROW><id>17607756</id><snippet>next_siblings</snippet></ROW><ROW><id>17607756</id><snippet>list()</snippet></ROW><ROW><id>17607756</id><snippet>el</snippet></ROW><ROW><id>17607756</id><snippet>figcaption</snippet></ROW><ROW><id>17607756</id><snippet>find_next_siblings()</snippet></ROW><ROW><id>17607756</id><snippet>img</snippet></ROW><ROW><id>17607756</id><snippet>figcaption</snippet></ROW><ROW><id>17607756</id><snippet>img</snippet></ROW><ROW><id>17608171</id><snippet>{% for i in range(1, length+1) %}
    &lt;li&gt;
        &lt;a href="#{{ i }}"&gt;This is sentence {{ i }}.&lt;/a&gt;
    &lt;/li&gt;
{% endfor %}
</snippet></ROW><ROW><id>17608338</id><snippet>sorted(words, key=lambda x: 'a'+x if x[:1] == 's' else 'b'+x)
</snippet></ROW><ROW><id>17608338</id><snippet>sorted(words, key=lambda x: 'a'+x if x.startswith('s') else 'b'+x)
</snippet></ROW><ROW><id>17608338</id><snippet>sorted(words, key=str.lower)
# Will do a sort that ignores the case, since instead of checking
# 'A' vs. 'b' it will check str.lower('A') vs. str.lower('b')

sorted(intlist, key=abs)
# Will sort a list of integers by magnitude, regardless of whether they're
# negative or positive.

&gt;&gt;&gt; sorted([-5,2,1,-8], key=abs)
[1, 2, -5, -8]
</snippet></ROW><ROW><id>17608505</id><snippet>from models import Book
from django.template import RequestContext 
from django.shortcuts import render_to_response

#------------------------------------------------------------------------------ 


def latest_books(request,template = 'latest_books.html',
                  page_template = 'latest_books_page.html' ):

    context = {}    
    book_list = Book.objects.order_by('-pub_date')

    context.update( {'book_list': book_list, 'page_template': page_template,} )

    # override the template and use the 'page' style instead.
    if request.is_ajax():
        template = page_template

    return render_to_response(
        template, context, context_instance=RequestContext(request) )
</snippet></ROW><ROW><id>17608505</id><snippet>&lt;html&gt;&lt;head&gt;&lt;title&gt;Books&lt;/title&gt;&lt;/head&gt;

&lt;body&gt;

&lt;h1&gt;Books&lt;/h1&gt;
&lt;h2&gt;Viewing All Entries&lt;/h2&gt;

&lt;div class="endless_page_template"&gt;
    {% include page_template %}
&lt;/div&gt;

{% block js %}
&lt;script src="http://code.jquery.com/jquery-latest.js"&gt;&lt;/script&gt; 
&lt;script src="{{ STATIC_URL }}js/endless_on_scroll.js"&gt;&lt;/script&gt;
&lt;script src="{{ STATIC_URL }}js/endless-pagination.js"&gt;&lt;/script&gt;    
&lt;script&gt;
    $.endlessPaginate({paginateOnScroll: true,
    endless_on_scroll_margin : 10,
    paginateOnScrollChunkSize: 5        
});&lt;/script&gt;
{% endblock %}


&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>17608505</id><snippet>{% load endless %}
{% paginate 10 book_list %}
{% for book in book_list %}
{{ book.name }}&lt;br&gt; {{ book.pub_date }}&lt;br&gt;&lt;br&gt;&lt;br&gt;
{% endfor %}
{% show_more "even more" "working" %}
</snippet></ROW><ROW><id>17608561</id><snippet>customer.add_card('/v1/marketplaces/TEST-MP29J5STPtZVvnjAFndM0N62/bank_accounts/BA7bk9dLT3My3fhAmZejgrKq')
</snippet></ROW><ROW><id>17608561</id><snippet>customer.add_bank_account('/v1/marketplaces/TEST-MP29J5STPtZVvnjAFndM0N62/bank_accounts/BA7bk9dLT3My3fhAmZejgrKq')
</snippet></ROW><ROW><id>17608775</id><snippet>__file__</snippet></ROW><ROW><id>17608775</id><snippet>import os.path

# Get the directory this module is being loaded from
module_directory = os.path.dirname(__file__)

# Get the path to the file we want to open
file_path = os.path.join(module_directory, 'filename')

with open(file_path, 'rb') as f:
    # do what you want with the file
</snippet></ROW><ROW><id>17609229</id><snippet>x</snippet></ROW><ROW><id>17609229</id><snippet>for i in range(x):
    Entry(root, textvariable=StringVar()).grid(row=1, column=i+1)
</snippet></ROW><ROW><id>17609229</id><snippet>variables = []
entries = []
for i in range(x):
    va = StringVar()
    en = Entry(root, textvariable=va)
    en.grid(row=1, column=i+1)
    variables.append(va)
    entries.append(en)
</snippet></ROW><ROW><id>17609229</id><snippet>entry1, entry2, entry3</snippet></ROW><ROW><id>17609229</id><snippet>exec</snippet></ROW><ROW><id>17609229</id><snippet>__dict__</snippet></ROW><ROW><id>17609657</id><snippet>document.getElementsByClassName('inline-text-org');
</snippet></ROW><ROW><id>17609657</id><snippet>[&lt;div class=​"inline-text-org" title=​"University of Manchester"&gt;​University of Manchester​&lt;/div&gt;, 
 &lt;div class=​"inline-text-org" title=​"University of California Irvine"&gt;​University of California ...​&lt;/div&gt;​
  etc...
</snippet></ROW><ROW><id>17609657</id><snippet>from ghost import Ghost
ghost = Ghost()
page, resources = ghost.open('http://academic.research.microsoft.com/Search?query=lander')
result, resources = ghost.evaluate(
    "document.getElementsByClassName('inline-text-org');")
</snippet></ROW><ROW><id>17609817</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({"appid": [1,2,2,3,3], "mac_id": ['a', 'b', 'c', 'd', 'e'], "count": [1,1,1,1,1]})
&gt;&gt;&gt; summer = lambda x: x[x["mac_id"].isin(mac_list)].sum()
&gt;&gt;&gt; df.groupby("appid").apply(summer)["count"]
  18 
appid
1        0
2        1
3        2
Name: count, dtype: object
</snippet></ROW><ROW><id>17609963</id><snippet>str(arch)</snippet></ROW><ROW><id>17609963</id><snippet>str.strip</snippet></ROW><ROW><id>17609963</id><snippet>str.rstrip</snippet></ROW><ROW><id>17609963</id><snippet>strarch = str(arch).strip()   #removes all types of white-space characters
</snippet></ROW><ROW><id>17609963</id><snippet>strarch = str(arch).rstrip('\n') #removes only trailing '\n'
</snippet></ROW><ROW><id>17609963</id><snippet>strarch = str(arch).rstrip('\n')
info.write("{}: {} {}".format("Arch Bits", strarch, "bits"))
</snippet></ROW><ROW><id>17609963</id><snippet>info.close()</snippet></ROW><ROW><id>17609963</id><snippet>with</snippet></ROW><ROW><id>17609993</id><snippet>db.Query</snippet></ROW><ROW><id>17609993</id><snippet>class Query (model_class=None, ...)
    model_class
        Model (or Expando) class representing the entity kind
        to which the query applies.
</snippet></ROW><ROW><id>17609993</id><snippet>db.Model</snippet></ROW><ROW><id>17609993</id><snippet>db.Query</snippet></ROW><ROW><id>17609993</id><snippet>docket</snippet></ROW><ROW><id>17609993</id><snippet>docket.__class__</snippet></ROW><ROW><id>17609993</id><snippet>db.Query.order</snippet></ROW><ROW><id>17609993</id><snippet>db.Expando</snippet></ROW><ROW><id>17609993</id><snippet>db.Query.filter</snippet></ROW><ROW><id>17609993</id><snippet>db.Expando</snippet></ROW><ROW><id>17610433</id><snippet>throw "stop execution";
</snippet></ROW><ROW><id>17610461</id><snippet>None</snippet></ROW><ROW><id>17610461</id><snippet>&gt;&gt;&gt; a = range(20)
&gt;&gt;&gt; a[15:None:-1]
[15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17610561</id><snippet>import bs4

soup = bs4.BeautifulSoup('&lt;td align="left" class="foo" style="white-space:nowrap;"&gt;  &lt;/td&gt;')
for td in soup.findAll('td', {'class': 'foo'}):
    td.attrs['title'] = 'spam'
    td.append('egg text')
print soup
</snippet></ROW><ROW><id>17610740</id><snippet>jQuery</snippet></ROW><ROW><id>17610740</id><snippet>jQuery.js</snippet></ROW><ROW><id>17610740</id><snippet>TypeError: $ is undefined ...
</snippet></ROW><ROW><id>17610740</id><snippet>TimeZoneDate</snippet></ROW><ROW><id>17610740</id><snippet>id=\"date_time_tz\"
</snippet></ROW><ROW><id>17610740</id><snippet>js</snippet></ROW><ROW><id>17610740</id><snippet>$('#date-time-tz')
</snippet></ROW><ROW><id>17610740</id><snippet>id=\"date-time-tz\"
</snippet></ROW><ROW><id>17610891</id><snippet>sys.stdout</snippet></ROW><ROW><id>17610891</id><snippet>flush</snippet></ROW><ROW><id>17610891</id><snippet>import sys
from time import sleep

for i in range(3):
    sys.stdout.write('.')
    sys.stdout.flush()
    sleep(1)

print('Welcome!')
</snippet></ROW><ROW><id>17610900</id><snippet>matplotlib.py</snippet></ROW><ROW><id>17610900</id><snippet>import matplotlib.pyplot</snippet></ROW><ROW><id>17610900</id><snippet>pyplot</snippet></ROW><ROW><id>17610900</id><snippet>testmpl.py</snippet></ROW><ROW><id>17610905</id><snippet>math.floor()</snippet></ROW><ROW><id>17610905</id><snippet>from math import floor

def floored_percentage(val, digits):
    val *= 10 ** (digits + 2)
    return '{1:.{0}f}%'.format(digits, floor(val) / 10 ** digits)

print floored_percentage(0.995, 1)
</snippet></ROW><ROW><id>17610905</id><snippet>&gt;&gt;&gt; from math import floor
&gt;&gt;&gt; def floored_percentage(val, digits):
...     val *= 10 ** (digits + 2)
...     return '{1:.{0}f}%'.format(digits, floor(val) / 10 ** digits)
... 
&gt;&gt;&gt; floored_percentage(0.995, 1)
'99.5%'
&gt;&gt;&gt; floored_percentage(0.995, 2)
'99.50%'
&gt;&gt;&gt; floored_percentage(0.99987, 2)
'99.98%'
</snippet></ROW><ROW><id>17611371</id><snippet>expand</snippet></ROW><ROW><id>17611371</id><snippet>False</snippet></ROW><ROW><id>17611371</id><snippet>fixed-width</snippet></ROW><ROW><id>17611371</id><snippet>True</snippet></ROW><ROW><id>17611371</id><snippet>wrap-width</snippet></ROW><ROW><id>17611371</id><snippet>width-chars</snippet></ROW><ROW><id>17611371</id><snippet>max-width-chars</snippet></ROW><ROW><id>17611422</id><snippet>input()</snippet></ROW><ROW><id>17611422</id><snippet>raw_input()</snippet></ROW><ROW><id>17611422</id><snippet>print("Please enter a quote you would like to use: ")
quote = str(raw_input())
</snippet></ROW><ROW><id>17611422</id><snippet>quote = raw_input("Please enter a quote you would like to use: ")
</snippet></ROW><ROW><id>17611606</id><snippet>count()</snippet></ROW><ROW><id>17611606</id><snippet>word = 'football'
# Code here to take input
# if input is in word:
    points = word.count(the_input)
    award_player(points)
</snippet></ROW><ROW><id>17611922</id><snippet>import sys

with open('file1.txt') as f:
    d = {line.split()[0]: line for line in f if line.strip()}

with open('file2.txt') as f:
    sys.stdout.writelines(d.get(line.strip(), '') for line in f)
</snippet></ROW><ROW><id>17611991</id><snippet>datetime.date.weekday()</snippet></ROW><ROW><id>17611991</id><snippet>today = datetime.date(2013, 06, 26)
dates = [today + datetime.timedelta(days=i) for i in range(-7 - today.weekday(), 14 - today.weekday())]
</snippet></ROW><ROW><id>17611991</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; today = datetime.date(2013, 07, 12)
&gt;&gt;&gt; pprint([today + datetime.timedelta(days=i) for i in range(-7 - today.weekday(), 14 - today.weekday())])
[datetime.date(2013, 7, 1),
 datetime.date(2013, 7, 2),
 datetime.date(2013, 7, 3),
 datetime.date(2013, 7, 4),
 datetime.date(2013, 7, 5),
 datetime.date(2013, 7, 6),
 datetime.date(2013, 7, 7),
 datetime.date(2013, 7, 8),
 datetime.date(2013, 7, 9),
 datetime.date(2013, 7, 10),
 datetime.date(2013, 7, 11),
 datetime.date(2013, 7, 12),
 datetime.date(2013, 7, 13),
 datetime.date(2013, 7, 14),
 datetime.date(2013, 7, 15),
 datetime.date(2013, 7, 16),
 datetime.date(2013, 7, 17),
 datetime.date(2013, 7, 18),
 datetime.date(2013, 7, 19),
 datetime.date(2013, 7, 20),
 datetime.date(2013, 7, 21)]
</snippet></ROW><ROW><id>17612285</id><snippet>word_update()</snippet></ROW><ROW><id>17612285</id><snippet>masked_secret_word</snippet></ROW><ROW><id>17612285</id><snippet>word_update()</snippet></ROW><ROW><id>17612285</id><snippet>masked_secret_word</snippet></ROW><ROW><id>17612285</id><snippet>'*******'</snippet></ROW><ROW><id>17612285</id><snippet>secret_word</snippet></ROW><ROW><id>17612285</id><snippet>def word_update (secret_word, guessed_letters):
    masked_secret_word = ""
    for letter_guess in secret_word:
        if letter_guess in guessed_letters:
            masked_secret_word += letter_guess
        else:
            masked_secret_word += "*"
    print "Secret Word update:" + masked_secret_word
    return masked_secret_word == secret_word  # returns True or False
</snippet></ROW><ROW><id>17612285</id><snippet>if word_update(secret_word, guessed_letters):
    break
</snippet></ROW><ROW><id>17612312</id><snippet>class Base:
    def __init__(self, something):
        pass

    def method_ab(self):
        pass

class A(Base):
    def __init__(self, something):
        super().__init__(something)
        self.a = X(something)

    def method_a(self):
        self.a.go()

    def method_ab(self):
        super().method_ab()
        self.a.go()


class B(Base):
    def __init__(self, something):
        super().__init__(something)
        self.b = X(something)

    def method_b(self):
        self.b.go()

    def method_ab(self):
        super().method_ab()
        self.b.go()


class C(A, B):
    pass
</snippet></ROW><ROW><id>17612554</id><snippet>subprocess_cmm</snippet></ROW><ROW><id>17612554</id><snippet>None</snippet></ROW><ROW><id>17612554</id><snippet>None</snippet></ROW><ROW><id>17612554</id><snippet>&gt;&gt;&gt; def func():
...     pass
&gt;&gt;&gt; print func()
None
</snippet></ROW><ROW><id>17612554</id><snippet>import shlex
for command in command_list:
   try:
       out = subprocess.check_output(shlex.split(command))
       print out
   except CalledProcessError:
       print "fail"
</snippet></ROW><ROW><id>17612573</id><snippet>prg.try_this7(queue, (1,), None,...)
</snippet></ROW><ROW><id>17612573</id><snippet>import numpy as np
import pyopencl as cl


ctx = cl.create_some_context()
queue = cl.CommandQueue(ctx)
#The kernel uses one workitem per char transfert
prog_str = """kernel void foo(global char *in, global char *out, int size){
                  int idx = get_global_id(0);
                  if (idx &lt; size){
                      out[idx] = in[idx];
                  }
           }"""
prog = cl.Program(ctx, prog_str).build()
#Note that the type of the array of strings is '|S40' for the length
#of third element is 40, the shape is 3 and the nbytes is 120 (3 * 40)
original_str = np.array(('this is an average string', 
                         'and another one', 
                         "let's push even more with a third string"))
mf = cl.mem_flags
in_buf = cl.Buffer(ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=original_str)
out_buf = cl.Buffer(ctx, mf.WRITE_ONLY, size=str_size)
copied_str = np.zeros_like(original_str)
#here launch the kernel with str_size number of workitems in this case 120
#this mean that some of the workitems won't process any meaningful char 
#(not all string have a lenght of 40) but it's no biggie
prog.foo(queue, (str_size,), None, in_buf, out_buf, np.int32(str_size))
cl.enqueue_copy(queue, copied_str, out_buf).wait()
print copied_str
</snippet></ROW><ROW><id>17612573</id><snippet>['this is an average string' 'and another one'
 "let's push even more with a third string"]
</snippet></ROW><ROW><id>17612580</id><snippet>get</snippet></ROW><ROW><id>17612580</id><snippet>contact = Contact(mobile="07000000000", contact_owner=user, group=None)
contact.save()
</snippet></ROW><ROW><id>17612681</id><snippet>axes.set_autoscale_on(True)
axes.autoscale_view(True,True,True)
axes.set_ylim(0, 11) # 11 -&gt; max(yvalues) + 1
</snippet></ROW><ROW><id>17612706</id><snippet>from poster.encode import MultipartParam

iter_encode = MultipartParam.iter_encode.im_func  # function object
iter_encode.func_defaults = (8192,)  # set new defaults, a 1-element tuple
</snippet></ROW><ROW><id>17612706</id><snippet>.func_defaults</snippet></ROW><ROW><id>17612736</id><snippet>__call__</snippet></ROW><ROW><id>17612736</id><snippet>callable(f)</snippet></ROW><ROW><id>17612743</id><snippet>[...]</snippet></ROW><ROW><id>17612743</id><snippet>[\d*]
</snippet></ROW><ROW><id>17612743</id><snippet>*</snippet></ROW><ROW><id>17612743</id><snippet>[\d]*
</snippet></ROW><ROW><id>17612743</id><snippet>[..]</snippet></ROW><ROW><id>17612743</id><snippet>\d</snippet></ROW><ROW><id>17612743</id><snippet>\d*
</snippet></ROW><ROW><id>17612743</id><snippet>+</snippet></ROW><ROW><id>17612743</id><snippet>print re.search('\d+:\d+:\d+' , tag).group()
</snippet></ROW><ROW><id>17612743</id><snippet>print re.search('\d{2}:\d{2}:\d{2}' , tag).group()
</snippet></ROW><ROW><id>17613229</id><snippet>path</snippet></ROW><ROW><id>17613229</id><snippet>path = "//" + ns + header</snippet></ROW><ROW><id>17613452</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup("""
&lt;table&gt;
&lt;tr&gt;
   &lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
""")

for tr in soup.find('table').find_all('tr', recursive=False):
    print tr
</snippet></ROW><ROW><id>17613452</id><snippet>recursive=False</snippet></ROW><ROW><id>17613662</id><snippet>spans = soup.find_all('span', attrs={'id':'titleDescriptionID'})
for span in spans:
    print span.string
</snippet></ROW><ROW><id>17613662</id><snippet>wrapper_href.descendants</snippet></ROW><ROW><id>17613865</id><snippet>1950</snippet></ROW><ROW><id>17613865</id><snippet>import datetime


def get_year(date):
    my_date = datetime.datetime.strptime(date, "%d-%b-%y")
    now = datetime.datetime.now()

    if my_date &gt; now:
        my_date = my_date.replace(year=my_date.year - 100)
    return my_date.year


print get_year('07-JUL-50')  # prints 1950
print get_year('07-JUL-13')  # prints 2013
print get_year('07-JUL-14')  # prints 1914
</snippet></ROW><ROW><id>17614003</id><snippet>process_response</snippet></ROW><ROW><id>17614003</id><snippet>Request</snippet></ROW><ROW><id>17614003</id><snippet>dont_filter</snippet></ROW><ROW><id>17614003</id><snippet>True</snippet></ROW><ROW><id>17614003</id><snippet>Request</snippet></ROW><ROW><id>17614008</id><snippet>for line in file</snippet></ROW><ROW><id>17614008</id><snippet>bigFile = open('path/to/file.dat','r')
for line in bigFile:
    processLine(line)
</snippet></ROW><ROW><id>17614008</id><snippet>readlines</snippet></ROW><ROW><id>17614008</id><snippet>.next()</snippet></ROW><ROW><id>17614008</id><snippet>readlines</snippet></ROW><ROW><id>17614008</id><snippet>xreadlines</snippet></ROW><ROW><id>17614008</id><snippet>for line in file</snippet></ROW><ROW><id>17614008</id><snippet>open</snippet></ROW><ROW><id>17614019</id><snippet>from scipy.stats import futil
from scipy.sparse.csgraph import _validation
</snippet></ROW><ROW><id>17614098</id><snippet>A</snippet></ROW><ROW><id>17614098</id><snippet>int32</snippet></ROW><ROW><id>17614098</id><snippet>In [10]: np.iinfo(np.dtype('int32')).max
Out[10]: 2147483647
</snippet></ROW><ROW><id>17614098</id><snippet>n**i</snippet></ROW><ROW><id>17614098</id><snippet>A = np.matrix([[n**i for i in nArray] for n in x], dtype='float64')
</snippet></ROW><ROW><id>17614098</id><snippet>N</snippet></ROW><ROW><id>17614262</id><snippet>app_directories</snippet></ROW><ROW><id>17614547</id><snippet>db.register</snippet></ROW><ROW><id>17614841</id><snippet>aaa</snippet></ROW><ROW><id>17614993</id><snippet>body</snippet></ROW><ROW><id>17614993</id><snippet>CodeCana</snippet></ROW><ROW><id>17614993</id><snippet>def get_pc(self):
    pcs = dict()    
    pcode = []

    for l in self.body:
        pc = pcs.get(l[3])
        if pc is None:
            pc = pcs[l[3]] = CodeCana(l[3], l[2])
            pcode.append(pc)
         pc.attr((l[0],l[1]),l[4])

    return pcode
</snippet></ROW><ROW><id>17614993</id><snippet>body</snippet></ROW><ROW><id>17614993</id><snippet>l</snippet></ROW><ROW><id>17614993</id><snippet>for foo, bar, baz, egg, ham in self.body:
    pc = pcs.get(egg)
    if pc is None:
        pc = pcs[egg] = CodeCana(egg, baz)
        pcode.append(pc)
     pc.attr((foo, bar), ham)
</snippet></ROW><ROW><id>17614993</id><snippet>body</snippet></ROW><ROW><id>17614993</id><snippet>namedtuple</snippet></ROW><ROW><id>17615033</id><snippet>if cond in {'1','2','3','4'}:
</snippet></ROW><ROW><id>17615033</id><snippet>in</snippet></ROW><ROW><id>17615033</id><snippet>or</snippet></ROW><ROW><id>17615033</id><snippet>True</snippet></ROW><ROW><id>17615033</id><snippet>cond</snippet></ROW><ROW><id>17615033</id><snippet>False</snippet></ROW><ROW><id>17615033</id><snippet>in</snippet></ROW><ROW><id>17615034</id><snippet>In [19]: df2
Out[19]: 
                     var1   var2  var3  var4  var5  var6
x_cor y_cor date                                        
928   310   2006257   133  14987  7045    18   240   171
            2006273   136      0  7327    30   253   161
            2006289   125      0  -239    83   217   168
            2006305    95  14604  6786    13   215    57
            2006321    84      0  4548    13   133    88
</snippet></ROW><ROW><id>17615034</id><snippet>In [20]: df2.reset_index()
Out[20]: 
   x_cor  y_cor     date  var1   var2  var3  var4  var5  var6
0    928    310  2006257   133  14987  7045    18   240   171
1    928    310  2006273   136      0  7327    30   253   161
2    928    310  2006289   125      0  -239    83   217   168
3    928    310  2006305    95  14604  6786    13   215    57
4    928    310  2006321    84      0  4548    13   133    88

In [21]: df2.reset_index().set_index(['x_cor','y_cor','date'])
Out[21]: 
                     var1   var2  var3  var4  var5  var6
x_cor y_cor date                                        
928   310   2006257   133  14987  7045    18   240   171
            2006273   136      0  7327    30   253   161
            2006289   125      0  -239    83   217   168
            2006305    95  14604  6786    13   215    57
            2006321    84      0  4548    13   133    88
</snippet></ROW><ROW><id>17615034</id><snippet>In [23]: df2['range'] = range(len(df2))

In [24]: df2
Out[24]: 
                     var1   var2  var3  var4  var5  var6  range
x_cor y_cor date                                               
928   310   2006257   133  14987  7045    18   240   171      0
            2006273   136      0  7327    30   253   161      1
            2006289   125      0  -239    83   217   168      2
            2006305    95  14604  6786    13   215    57      3
            2006321    84      0  4548    13   133    88      4
</snippet></ROW><ROW><id>17615106</id><snippet>index</snippet></ROW><ROW><id>17615106</id><snippet>class A: pass
class B: pass
class C: pass

classes = [A(), B(), C()]
master_list = [B, A]

def sorter(instance):
    # get the type of the object
    c = instance.__class__
    # if it is in the master_list, use its index, otherwise put it at the end
    return master_list.index(c) if c in master_list else len(master_list)

final_list = sorted(classes, key=sorter)
</snippet></ROW><ROW><id>17615106</id><snippet>[&lt;__main__.B instance at 0x023348C8&gt;, &lt;__main__.A instance at 0x01EE64B8&gt;, &lt;__main__.C instance at 0x023348F0&gt;]
</snippet></ROW><ROW><id>17615454</id><snippet>&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; [list(x) for x in itertools.izip_longest([1,2,3],[4,5,6,7],['a','b'])]
[[1, 4, 'a'], [2, 5, 'b'], [3, 6, None], [None, 7, None]]
</snippet></ROW><ROW><id>17615497</id><snippet>import urllib
urllib.urlopen('http://foo.com/bar')
</snippet></ROW><ROW><id>17615497</id><snippet>import urllib
urllib.request.urlopen('http://foo.com/bar')
</snippet></ROW><ROW><id>17615505</id><snippet>pickle</snippet></ROW><ROW><id>17615505</id><snippet>cPickle</snippet></ROW><ROW><id>17615505</id><snippet>Python</snippet></ROW><ROW><id>17615505</id><snippet>batteries included</snippet></ROW><ROW><id>17615505</id><snippet>stdlib</snippet></ROW><ROW><id>17615623</id><snippet>dict</snippet></ROW><ROW><id>17615623</id><snippet>image_cache = {}
def get_image(key):
  if not key in image_cache:
    image_cache[key] = pygame.image.load(key)
  return image_cache[key]
</snippet></ROW><ROW><id>17615623</id><snippet>get_image</snippet></ROW><ROW><id>17615623</id><snippet>class Player(object):
  def __init__(self):
    self.image = get_image('image1.png')
</snippet></ROW><ROW><id>17615623</id><snippet>images = ['image1.png', 'image2.png', 'image3.png']
</snippet></ROW><ROW><id>17615623</id><snippet>import glob
images = glob.glob('*.png')
</snippet></ROW><ROW><id>17615623</id><snippet># ensure all images are loaded
for image in images:
  get_image(image)
</snippet></ROW><ROW><id>17615623</id><snippet>Font.render</snippet></ROW><ROW><id>17615623</id><snippet>dict</snippet></ROW><ROW><id>17615883</id><snippet>root.destroy()</snippet></ROW><ROW><id>17616068</id><snippet>class DefaultHasher(dict):
    def __init__(self, default_factory, change_self=None):
        self.default_factory = default_factory
        self.change_self = change_self
    def change(self, key):
        def _change():
            x = self.default_factory()
            self[key] = x
            return x
        return _change
    def __missing__(self, key):
        self[key] = DefaultHasher(self.default_factory,
                                  self.change(key))
        return self[key]
    def __getattr__(self, name):
        result = self.change_self()
        return getattr(result, name)

foo = DefaultHasher(set)
foo[1][2][3][4][5].add(1)
print(foo)
# {1: {2: {3: {4: {5: set([1])}}}}}

foo[1][2][3].add(20)
print(foo)
# {1: {2: {3: set([20])}}}

foo[1][3] = foo[1][2]
print(foo)
# {1: {2: {3: set([20])}, 3: {3: set([20])}}}

foo[1][2].add(30)
print(foo)
# {1: {2: set([30]), 3: {3: set([20])}}}
</snippet></ROW><ROW><id>17616095</id><snippet>wxSpinButton</snippet></ROW><ROW><id>17616095</id><snippet>wxTextCtrl</snippet></ROW><ROW><id>17616148</id><snippet>if 1:</snippet></ROW><ROW><id>17616148</id><snippet>&gt;&gt;&gt; if 1:
...                             print 1
...
1
</snippet></ROW><ROW><id>17616275</id><snippet>screen.blit((mouse_c,(x,y))</snippet></ROW><ROW><id>17616275</id><snippet>(</snippet></ROW><ROW><id>17616346</id><snippet>blacklist = [0]
blacklist = set(blacklist)
myList = [e for e in myList if int(e) not in blacklist]
</snippet></ROW><ROW><id>17616346</id><snippet>float</snippet></ROW><ROW><id>17616346</id><snippet>blacklist = [0]
blacklist = set([float(i) for i in blacklist])
myList = [e for e in myList if int(e) not in blacklist]
</snippet></ROW><ROW><id>17616411</id><snippet>country</snippet></ROW><ROW><id>17616411</id><snippet>null=True, blank=True</snippet></ROW><ROW><id>17616411</id><snippet>all</snippet></ROW><ROW><id>17616411</id><snippet>CountryMaster</snippet></ROW><ROW><id>17616411</id><snippet>all</snippet></ROW><ROW><id>17616411</id><snippet>CountryMaster</snippet></ROW><ROW><id>17616411</id><snippet>name=all</snippet></ROW><ROW><id>17616411</id><snippet>all</snippet></ROW><ROW><id>17616725</id><snippet>import random
sum(random.random()*50 + 80 for _ in range(1000))
</snippet></ROW><ROW><id>17616872</id><snippet>**</snippet></ROW><ROW><id>17616872</id><snippet>def print_kwargs(**all_args):
    # Here ** marks all_args as the name to assign any remaining keyword args to
    print all_args

an_argument = {"test": 1}

# Here ** tells Python to unpack the dictionary
print_kwargs(**an_argument)
</snippet></ROW><ROW><id>17616872</id><snippet>print_kwargs</snippet></ROW><ROW><id>17616872</id><snippet>TypeError</snippet></ROW><ROW><id>17616872</id><snippet>print_kwargs</snippet></ROW><ROW><id>17616872</id><snippet>kwargs</snippet></ROW><ROW><id>17616872</id><snippet>**kwarg</snippet></ROW><ROW><id>17617017</id><snippet>from docx import *
document = opendocx("document.doc")
body = document.xpath('/w:document/w:body', namespaces=nsprefixes)[0]
body.append(paragraph('Appending this.'))
</snippet></ROW><ROW><id>17617073</id><snippet>__name__</snippet></ROW><ROW><id>17617073</id><snippet>'__main__'</snippet></ROW><ROW><id>17617073</id><snippet>main()</snippet></ROW><ROW><id>17617088</id><snippet>displace</snippet></ROW><ROW><id>17617088</id><snippet>None</snippet></ROW><ROW><id>17617088</id><snippet>import numpy as np
import pylab as plt
import itertools

k = 20
X = np.linspace(0, 20, 500)
Y = np.zeros((k,X.size))

# Add some fake data
MU = np.random.random(k)
for n in xrange(k):
    Y[n] += np.exp(-(X-MU[n]*n)**2 / (1+n/3))
Y *= 50

# Add some outliers for show
Y += 2*np.random.random(Y.shape)

displace = Y.max()/4

# Add a cutoff
Y[Y&lt;1.0] = None

face_colors = itertools.cycle(["#D3D820", "#C9CC54", 
                               "#D7DA66", "#FDFE42"])

fig = plt.figure()
ax = fig.add_subplot(111, axisbg='black')
ax.xaxis.set_visible(False)
ax.yaxis.set_visible(False)

for n,y in enumerate(Y):
    # Vertically displace each plot
    y0 = np.ones(y.shape) * n * displace
    y1 = y + n*displace

    plt.fill_between(X, y0,y1,lw=1, 
                     facecolor=face_colors.next(),
                     zorder=len(Y)-n)  
plt.show()
</snippet></ROW><ROW><id>17617147</id><snippet>paint</snippet></ROW><ROW><id>17617147</id><snippet>1.</snippet></ROW><ROW><id>17617147</id><snippet>QAbstractItemModel::flags</snippet></ROW><ROW><id>17617147</id><snippet>def flags(self, index):
    if (index.column() == 0):
        return QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsEnabled
    else:
        return QtCore.Qt.ItemIsEnabled
</snippet></ROW><ROW><id>17617147</id><snippet>2.</snippet></ROW><ROW><id>17617147</id><snippet>openPersistentEditor</snippet></ROW><ROW><id>17617147</id><snippet>for row in range(0, self._tm.rowCount()):
    self._tv.openPersistentEditor(self._tm.index(row, 0))
</snippet></ROW><ROW><id>17617147</id><snippet>3.</snippet></ROW><ROW><id>17617147</id><snippet>createEditor</snippet></ROW><ROW><id>17617147</id><snippet>def createEditor(self, parent, option, index):
    combo = QtGui.QComboBox(parent)
    li = []
    li.append("Zero")
    li.append("One")
    li.append("Two")
    li.append("Three")
    li.append("Four")
    li.append("Five")
    combo.addItems(li)
    self.connect(combo, QtCore.SIGNAL("currentIndexChanged(int)"), 
                 self, QtCore.SLOT("currentIndexChanged()"))
    return combo
</snippet></ROW><ROW><id>17617147</id><snippet>connect</snippet></ROW><ROW><id>17617147</id><snippet>append</snippet></ROW><ROW><id>17617147</id><snippet>currentIndexChanged</snippet></ROW><ROW><id>17617147</id><snippet>4.</snippet></ROW><ROW><id>17617147</id><snippet>setEditorData</snippet></ROW><ROW><id>17617147</id><snippet>def setEditorData(self, editor, index):
    editor.blockSignals(True)
    editor.setCurrentIndex(int(index.model().data(index)))
    editor.blockSignals(False)
</snippet></ROW><ROW><id>17617147</id><snippet>blockSignals</snippet></ROW><ROW><id>17617147</id><snippet>5.</snippet></ROW><ROW><id>17617147</id><snippet>commitData</snippet></ROW><ROW><id>17617147</id><snippet>setModelData</snippet></ROW><ROW><id>17617147</id><snippet>@QtCore.pyqtSlot()
def currentIndexChanged(self):
    self.commitData.emit(self.sender())
</snippet></ROW><ROW><id>17617147</id><snippet>6.</snippet></ROW><ROW><id>17617147</id><snippet>setModelData</snippet></ROW><ROW><id>17617147</id><snippet>def setModelData(self, editor, model, index):
    model.setData(index, editor.currentIndex())
</snippet></ROW><ROW><id>17617147</id><snippet>7.</snippet></ROW><ROW><id>17617147</id><snippet>setData</snippet></ROW><ROW><id>17617147</id><snippet>def setData(self, index, value, role=QtCore.Qt.DisplayRole):
    print "setData", index.row(), index.column(), value
    # todo: remember the data
</snippet></ROW><ROW><id>17617202</id><snippet>:lexicon a lemon:Lexicon ;
    lemon:language "it" ;
    lemon:entry :fifa,
    :timore.
</snippet></ROW><ROW><id>17617202</id><snippet>:lexicon</snippet></ROW><ROW><id>17617202</id><snippet>:fifa</snippet></ROW><ROW><id>17617202</id><snippet>:timore</snippet></ROW><ROW><id>17617202</id><snippet>#lexicon</snippet></ROW><ROW><id>17617202</id><snippet>http://www.w3.org/RDF/Validator/run/1373638767868#lexicon</snippet></ROW><ROW><id>17617202</id><snippet>@prefix : &lt;#&gt; .
</snippet></ROW><ROW><id>17617210</id><snippet>if abs(x-1) &lt; abs(variable-1):
    ...
</snippet></ROW><ROW><id>17617210</id><snippet>x-1</snippet></ROW><ROW><id>17617210</id><snippet>x</snippet></ROW><ROW><id>17617210</id><snippet>1</snippet></ROW><ROW><id>17617210</id><snippet>variable-1</snippet></ROW><ROW><id>17617210</id><snippet>variable</snippet></ROW><ROW><id>17617210</id><snippet>1</snippet></ROW><ROW><id>17617519</id><snippet>d = { 0 : (1, 2, 3) , 1 : (2, 3, 4), 2: (5, 6, 7)}
for key in d.keys():
    for val in d[key]:
        try:
            d[key]+=d[val]
        except KeyError:
            pass
</snippet></ROW><ROW><id>17617519</id><snippet>&gt;&gt;&gt; d
{0: (1, 2, 3, 2, 3, 4, 5, 6, 7), 1: (2, 3, 4, 5, 6, 7), 2: (5, 6, 7)}
</snippet></ROW><ROW><id>17617519</id><snippet>d[key] = tuple(set(d[key]))</snippet></ROW><ROW><id>17617519</id><snippet>for key in d.keys()</snippet></ROW><ROW><id>17617519</id><snippet>&gt;&gt;&gt; d
{0: (1, 2, 3, 4, 5, 6, 7), 1: (2, 3, 4, 5, 6, 7), 2: (5, 6, 7)}
</snippet></ROW><ROW><id>17617519</id><snippet>d = {[ 0 : 1, 2, 3], [1 : 2, 3, 4], [2: 5, 6, 7]}</snippet></ROW><ROW><id>17617519</id><snippet>d = { 0 : [1, 2, 3] , 1 : [2, 3, 4], 2: [5, 6, 7]}
for key in d.keys():
    orig_vals=d[key]
    new_vals=[]
    for val in orig_vals:
        try:
            new_vals+=d[val]
        except KeyError:
            pass
    d[key] = list(set(new_vals)-set(orig_vals))
</snippet></ROW><ROW><id>17617519</id><snippet>&gt;&gt;&gt; d
{0: [4, 5, 6, 7], 1: [5, 6, 7], 2: []}
</snippet></ROW><ROW><id>17617519</id><snippet>if new_vals:
        d[key] = list(set(new_vals)-set(orig_vals))
</snippet></ROW><ROW><id>17617519</id><snippet>&gt;&gt;&gt; d
{0: [4, 5, 6, 7], 1: [5, 6, 7], 2: [5, 6, 7]}
</snippet></ROW><ROW><id>17617519</id><snippet>d = { 0 : [1, 2, 3] , 1 : [2, 3, 4], 2: [5, 6, 7]}
for key in d.keys():
    orig_vals=d[key]
    new_vals=[]
    count = 0
    for val in orig_vals:
        try:
            new_vals+=d[val]
            count+=1
            if count &gt;= yournumberhere: break
        except KeyError:
            pass
    d[key] = list(set(new_vals)-set(orig_vals))
</snippet></ROW><ROW><id>17617529</id><snippet>list_of_tuples = [tup for tup in list_of_tuples if tup[1] is not None]
</snippet></ROW><ROW><id>17617709</id><snippet># Vertex
class Vertex:
   def __init__(self):
      self.label = str()
      self.ID = int()
      self.outEdges = list()
      self.inEdges = list()
</snippet></ROW><ROW><id>17617709</id><snippet>class Vertex:
   # def __init__(self): ...

   def allEdges(self):
      return self.outEdges + self.inEdges
</snippet></ROW><ROW><id>17617771</id><snippet>import matplotlib
matplotlib.path.Path.contains_points   # is the function you are looking for
</snippet></ROW><ROW><id>17617774</id><snippet>cluster_entries = [[0]*28]
</snippet></ROW><ROW><id>17617774</id><snippet>cluster_entries = [ [0] for i in range(28) ]
</snippet></ROW><ROW><id>17617774</id><snippet>idx_n</snippet></ROW><ROW><id>17617774</id><snippet>for i, idx in enumerate(idx_n):
    print i, idx
    cluster_entries[ int(idx) ].append( list_from_files[i] )
</snippet></ROW><ROW><id>17617934</id><snippet>myStr = "01 02 03 04 11 12 13 14 21 22 23 24"
myStr= [int(n) for n in myStr.split()]
myList=[]
for i in xrange(0,len(myStr),4):
    myList.append(myStr[i:i+4])
</snippet></ROW><ROW><id>17617934</id><snippet>myList=[myStr[i:i+4] for i in xrange(0,len(myStr),4)]
</snippet></ROW><ROW><id>17618037</id><snippet>for email in self.emailGenerator:
    self.toField.setText(email)
</snippet></ROW><ROW><id>17618037</id><snippet>self.toField.setText()</snippet></ROW><ROW><id>17618037</id><snippet>QLineEdit</snippet></ROW><ROW><id>17618037</id><snippet>.insert()</snippet></ROW><ROW><id>17618037</id><snippet>for email in self.emailGenerator:
    self.toField.insert(email + '\n')
</snippet></ROW><ROW><id>17618037</id><snippet>next()</snippet></ROW><ROW><id>17618037</id><snippet>self.emailGenerator</snippet></ROW><ROW><id>17618037</id><snippet>self.toField.insert(next(self.emailGenerator, ''))
</snippet></ROW><ROW><id>17618037</id><snippet>''</snippet></ROW><ROW><id>17618085</id><snippet>handler.cgi_directories = ["/"]
</snippet></ROW><ROW><id>17618096</id><snippet>.pythonrc</snippet></ROW><ROW><id>17618096</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>17618096</id><snippet>PYTHONSTARTUP
If this is the name of a readable file, the Python commands 
in that file are executed before the first prompt is displayed
in interactive mode. The file is executed in the same namespace
where interactive commands are executed so that objects defined
or imported in it can be used without qualification in the interactive
session. You can also change the prompts sys.ps1 and sys.ps2 in this file.
</snippet></ROW><ROW><id>17618181</id><snippet>&gt;&gt;&gt; txt = """Hello. It's good to meet you.
... My name is Bob."""
&gt;&gt;&gt; txt.split('.')
['Hello', " It's good to meet you", '\nMy name is Bob', '']
&gt;&gt;&gt; [x for x in map(str.strip, txt.split('.')) if x]
['Hello', "It's good to meet you", 'My name is Bob']
</snippet></ROW><ROW><id>17618346</id><snippet>&gt;&gt;&gt; list_a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; list_b = [4, 2, 5, 6, 1, 7, 3, 9, 0, 8]
&gt;&gt;&gt; 
&gt;&gt;&gt; import operator
&gt;&gt;&gt;
&gt;&gt;&gt; [k for k, v in sorted(zip(list_a, list_b), key=operator.itemgetter(1))]
[8, 4, 1, 6, 0, 2, 3, 5, 9, 7]
</snippet></ROW><ROW><id>17618396</id><snippet>import sys

class MyClass:

    def __init__(self, arg):
        self.arg = arg

    def fn1(self):
        return self.fn2() # just as a simple example which calls other functions

    def fn2(self):
        return self.fn3()

    def fn3(self):
        return self.fn4()

    def fn4(self):
        return self.fn5()

    def fn5(self):
        return self.arg


def main():
    m = MyClass(arg=sys.argv[1])
    print m.fn1() # prints output based on command line argument


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17618609</id><snippet>&lt;configuration&gt;
 &lt;runtime&gt;
  &lt;loadFromRemoteSources enabled="true"/&gt;
 &lt;/runtime&gt;
&lt;/configuration&gt;
</snippet></ROW><ROW><id>17618623</id><snippet>&lt;?xml?&gt;</snippet></ROW><ROW><id>17618623</id><snippet>&lt;?xml version="1.0"?&gt;</snippet></ROW><ROW><id>17619054</id><snippet>sudo</snippet></ROW><ROW><id>17619054</id><snippet>sudo dd if=/dev/sdb of=/dev/null</snippet></ROW><ROW><id>17619054</id><snippet>admin    ALL = NOPASSWD: ALL</snippet></ROW><ROW><id>17619054</id><snippet>sudoers</snippet></ROW><ROW><id>17619323</id><snippet>return</snippet></ROW><ROW><id>17619323</id><snippet>return</snippet></ROW><ROW><id>17619323</id><snippet>weights</snippet></ROW><ROW><id>17619323</id><snippet>while (weightsPrevious != weights):
    iterCount += 1
    print("iteration", iterCount)
    ...

return weights # now this is going to be executed when 
               # the while loop is finished.
</snippet></ROW><ROW><id>17619339</id><snippet>import lxml.etree

root = lxml.etree.parse("example.xml")
for instance in root.xpath('//Instance[descendant::UserValue[@title = "THIRD"][@value != ""]]'):
    print instance.get('name')
</snippet></ROW><ROW><id>17619339</id><snippet>import lxml.etree

class InstanceNamePrinter(object):
    def start(self, tag, attrib):
        if tag == 'Instance':
            self.name = attrib['name']
        elif tag == 'UserValue':
            if attrib['title'] == 'THIRD' and attrib['value'] != '':
                print self.name
    def close(self):
        pass

with open('example.xml') as xml:
    parser = lxml.etree.XMLParser(target=InstanceNamePrinter())
    lxml.etree.parse(xml, parser)
</snippet></ROW><ROW><id>17619442</id><snippet>uploadType=multipart</snippet></ROW><ROW><id>17619442</id><snippet>uploadType=media</snippet></ROW><ROW><id>17619442</id><snippet>POST https://www.googleapis.com/upload/mirror/v1/timeline?uploadType=multipart
</snippet></ROW><ROW><id>17619649</id><snippet>encode('hex')</snippet></ROW><ROW><id>17619649</id><snippet>return ':'.join(x.encode('hex') for x in fvalue)
</snippet></ROW><ROW><id>17619670</id><snippet>False</snippet></ROW><ROW><id>17619670</id><snippet>Chi_min = str(min(chi)) or "null"
</snippet></ROW><ROW><id>17620056</id><snippet>np.insert</snippet></ROW><ROW><id>17620056</id><snippet>&gt;&gt;&gt; A = np.array([1, 3, 5, 7])
&gt;&gt;&gt; B = np.array([2, 4, 6, 8])
&gt;&gt;&gt; np.insert(B, np.arange(len(A)), A)
array([1, 2, 3, 4, 5, 6, 7, 8])
</snippet></ROW><ROW><id>17620106</id><snippet>import numpy as np

A = np.array([[0, 1, 0],
              [1, 0, 1],
              [1, 0, 0]]).astype(bool)

A = A
print A.astype(int)
B = A.transpose() &amp; ~A
print B.astype(int)
</snippet></ROW><ROW><id>17620106</id><snippet>[[0 1 0]
 [1 0 1]
 [1 0 0]]
[[0 0 1]
 [0 0 0]
 [0 1 0]]
</snippet></ROW><ROW><id>17620217</id><snippet>&gt;&gt;&gt; listOne = ['10100', '10101', '01010', '00010', '00100']
&gt;&gt;&gt; listTwo = ["A","B","C","D","E"]
&gt;&gt;&gt; listThree = zip(listOne, listTwo)
&gt;&gt;&gt; listThree.sort(key = lambda x : x[0])
&gt;&gt;&gt; listThree
[('00010', 'D'), ('00100', 'E'), ('01010', 'C'), ('10100', 'A'), ('10101', 'B')]
&gt;&gt;&gt; listOneSorted, listTwoSorted = zip(*listThree)
&gt;&gt;&gt; listOneSorted
('00010', '00100', '01010', '10100', '10101')
&gt;&gt;&gt; listTwoSorted
('D', 'E', 'C', 'A', 'B')
</snippet></ROW><ROW><id>17620217</id><snippet>&gt;&gt;&gt; listOneSorted, listTwoSorted = zip(*sorted(zip(listOne, listTwo), key = lambda x : x[0]))
</snippet></ROW><ROW><id>17620226</id><snippet>LOAD DATA INFILE</snippet></ROW><ROW><id>17620226</id><snippet>LOAD DATA INFILE</snippet></ROW><ROW><id>17620226</id><snippet>LOAD DATA INFILE 'persondata.txt' INTO TABLE persondata (col1,col2,...);
</snippet></ROW><ROW><id>17620226</id><snippet>SET</snippet></ROW><ROW><id>17620226</id><snippet>SET</snippet></ROW><ROW><id>17620226</id><snippet>t1.column1</snippet></ROW><ROW><id>17620226</id><snippet>t1.column2</snippet></ROW><ROW><id>17620226</id><snippet>LOAD DATA INFILE 'file.txt'
  INTO TABLE t1
  (column1, @var1)
  SET column2 = @var1/100;
</snippet></ROW><ROW><id>17620226</id><snippet>SET boolean_column := @dummy_variable = 'True'</snippet></ROW><ROW><id>17620302</id><snippet>{% url 'myaccount' username='Jerry' %}
</snippet></ROW><ROW><id>17620302</id><snippet>    url(r'^(?P&lt;somenumber&gt;\d+)/test/$', views.TestView.as_view(), name='testview')
</snippet></ROW><ROW><id>17620302</id><snippet>from django.views.generic import TemplateView
class TestView(TemplateView):
    model = xxxx // link to your model here
    template_name = 'test.html'
</snippet></ROW><ROW><id>17620302</id><snippet>{{ somenumber }}
</snippet></ROW><ROW><id>17620529</id><snippet>request, = conn.send.call_args
</snippet></ROW><ROW><id>17620529</id><snippet>assert</snippet></ROW><ROW><id>17620529</id><snippet>assertEqual</snippet></ROW><ROW><id>17620529</id><snippet>assertTrue</snippet></ROW><ROW><id>17620529</id><snippet>assert</snippet></ROW><ROW><id>17620791</id><snippet>&lt;td&gt;...&lt;td&gt;</snippet></ROW><ROW><id>17620791</id><snippet>&lt;td&gt;...&lt;/td&gt;</snippet></ROW><ROW><id>17620791</id><snippet>import bs4

your_html = """..."""
soup = bs4.BeautifulSoup(your_html)
big_dict = {}

for table in soup.find_all("table"):
    key = table.find("em").get_text().strip()
    big_dict[key] = []
    headers = []
    for th in table.find_all("th"):
        headers.append(th.get_text().strip())
        big_dict[key].append({headers[-1]: []})
    for row in table.find_all("tr"):
        for i, cell in enumerate(row.find_all("td")):
            big_dict[key][i][headers[i]].append(cell.get_text().strip())

print(big_dict)
</snippet></ROW><ROW><id>17620791</id><snippet>{'table1': [{'A': ['a1', 'a2']}, {'B': ['b1', 'b2']}, {'C': ['c1', 'c2']}], 'table2': [{'A': ['a3', 'a4']}, {'B': ['b3', 'b4']}, {'C': ['c3', 'c4']}]}</snippet></ROW><ROW><id>17620817</id><snippet>$ ./manage.py shell
&gt; from django.contrib.auth.models import User
&gt; from &lt;profile_package&gt;.models import Profile
&gt; user = User.objects.get(username='&lt;admin_user_name&gt;')
&gt; profile = Profile(user=user)
&gt; profile.save()
</snippet></ROW><ROW><id>17620935</id><snippet>mycd</snippet></ROW><ROW><id>17620935</id><snippet>cd</snippet></ROW><ROW><id>17620935</id><snippet>function mycd () {
    cd "$@"
    if ... ; then
        workon environment
    fi
}
</snippet></ROW><ROW><id>17620935</id><snippet>"$@"</snippet></ROW><ROW><id>17620935</id><snippet>mycd</snippet></ROW><ROW><id>17620935</id><snippet>mycd /path/to/dir</snippet></ROW><ROW><id>17620935</id><snippet>cd /path/to/dir</snippet></ROW><ROW><id>17620935</id><snippet>cd</snippet></ROW><ROW><id>17620935</id><snippet>cd</snippet></ROW><ROW><id>17620935</id><snippet>cd</snippet></ROW><ROW><id>17620935</id><snippet>cd</snippet></ROW><ROW><id>17620935</id><snippet>builtin</snippet></ROW><ROW><id>17620935</id><snippet>function cd () {
    builtin cd "$@"    # perform the actual cd
    if ... ; then
        workon environment
    fi
}
</snippet></ROW><ROW><id>17620935</id><snippet>...</snippet></ROW><ROW><id>17620998</id><snippet>{{db.myTable.insert(user_id=auth.user_id, text=myText)}}
</snippet></ROW><ROW><id>17620998</id><snippet>=</snippet></ROW><ROW><id>17620998</id><snippet>.ajax</snippet></ROW><ROW><id>17621424</id><snippet>with open('file.txt') as f, open('out.txt', 'w') as f2:
    state = 1
    for line in f:
        if line == 'Middle Value\n':
            state = 2
            continue  # unless there's something to do upon entering the state
        elif line == 'Last Value\n':  # might want to just test for blank line `\n'
            state = 3
            continue  # unless there's something to do upon entering the state

        # otherwise process to line based on the current value of "state"
        if state == 1:      # before 'Middle Value' has been seen
            pass
        elif state == 2:    # after 'Middle Value' has been seen
            pass
        else:               # after 'Last Value' (or a blank line after 
            pass            # 'Middle Value') has been seen
</snippet></ROW><ROW><id>17621424</id><snippet>pass</snippet></ROW><ROW><id>17621488</id><snippet>dict(i=i, j=j, **function(i, j))
</snippet></ROW><ROW><id>17621488</id><snippet>from_records</snippet></ROW><ROW><id>17621488</id><snippet>In [11]: my_iterator = [(1, 2), (3, 4)]

In [12]: df = pd.DataFrame.from_records(my_iterator, columns=['i', 'j'])

In [13]: df
Out[13]:
   i  j
0  1  2
1  3  4
</snippet></ROW><ROW><id>17621499</id><snippet>__init__</snippet></ROW><ROW><id>17621499</id><snippet>with</snippet></ROW><ROW><id>17621499</id><snippet>output.close()</snippet></ROW><ROW><id>17621499</id><snippet>word_out.close()</snippet></ROW><ROW><id>17621499</id><snippet>with</snippet></ROW><ROW><id>17621499</id><snippet>with</snippet></ROW><ROW><id>17621499</id><snippet>pool.apply_async</snippet></ROW><ROW><id>17621499</id><snippet>pool.join()</snippet></ROW><ROW><id>17621499</id><snippet>os.path.join</snippet></ROW><ROW><id>17621499</id><snippet>'\\'</snippet></ROW><ROW><id>17621499</id><snippet>epubLoader</snippet></ROW><ROW><id>17621499</id><snippet>HTML</snippet></ROW><ROW><id>17621499</id><snippet>word_list</snippet></ROW><ROW><id>17621499</id><snippet>import multiprocessing as mp

def worker(output_path, source, filename):
    t = HTML(source)
    output_path = output_path+filename
    output = open(output_path+'.html', 'w')
    word_out = open(output_path+'.txt','w')
    with output, word_out:
        try:
            output.write(t.tokenized)

            for w in word_list:
                if w:
                    word_out.write(w+'\n')

            word_list = []

        except IndexError: 
            output.write(s[1])

        except UnboundLocalError:
            output.write(s[1])


def ensure_dir(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)
    return directory    


def process_epubs(input_path, output_path):
    pool = mp.Pool()

    for root, dirs, files in os.walk(input_path):
        epubs = [os.path.join(root, file) for file in files
                 if file.endswith('.epub')]
        output_file = [
            ensure_dir(
                os.path.join(
                    output_path,
                    os.path.splitext(os.path.basename(e))[0] + '_output')
                for e in epubs)]

    for count, e in enumerate(epubs):
        epub = epubLoader(e)
        for filename, source in epub.get_html_from_epub():
            pool.apply_async(
                worker,
                args=(output_file[count], source, filename))
    pool.close()
    pool.join()

    print "done!"


if __name__ == '__main__':
    process_epubs('some local directory', 'some local directory')
</snippet></ROW><ROW><id>17621640</id><snippet>sort_index</snippet></ROW><ROW><id>17621640</id><snippet>In [11]: a.append(b) #  equivalent to pd.concat([a, b])
Out[11]:
2013-06-21 16:00:00    1577.70
2013-06-24 16:00:00    1560.33
2013-06-28 16:00:00    1601.06
2013-07-02 16:00:00    1606.77
2013-06-25 16:00:00    1573.09
2013-06-26 16:00:00    1588.03
2013-06-27 16:00:00    1603.26
2013-07-01 16:00:00    1606.28
dtype: float64

In [12]: a.append(b).sort_index()
Out[12]:
2013-06-21 16:00:00    1577.70
2013-06-24 16:00:00    1560.33
2013-06-25 16:00:00    1573.09
2013-06-26 16:00:00    1588.03
2013-06-27 16:00:00    1603.26
2013-06-28 16:00:00    1601.06
2013-07-01 16:00:00    1606.28
2013-07-02 16:00:00    1606.77
dtype: float64
</snippet></ROW><ROW><id>17621719</id><snippet>[key for key in keys if not any(re.match(pattern, key) for pattern in patterns)]
</snippet></ROW><ROW><id>17621835</id><snippet>relief</snippet></ROW><ROW><id>17621835</id><snippet>b = Button(root, image=play, command=on_button, relief=FLAT)
</snippet></ROW><ROW><id>17621835</id><snippet>Label</snippet></ROW><ROW><id>17621835</id><snippet>lb = Label(root, image=play)
lb.bind('&lt;Button-1&gt;', lambda e: on_button)
lb.pack()
</snippet></ROW><ROW><id>17622024</id><snippet>import datetime
import matplotlib.mlab

print matplotlib.mlab.csv2rec('data.csv', converterd={
    0: lambda x: datetime.datetime.strptime(x, '%d.%m.%Y %H:%M'),
})
</snippet></ROW><ROW><id>17622069</id><snippet>with d3py.NetworkXFigure(G, width=500, height=500) as p:
    p += d3py.ForceLayout()
    p.css['.node'] = {'fill': 'blue', 'stroke': 'magenta'}
    p.show()
</snippet></ROW><ROW><id>17622069</id><snippet>stroke: black;</snippet></ROW><ROW><id>17622069</id><snippet>d3py/geoms/graph.py</snippet></ROW><ROW><id>17622069</id><snippet>line = {
    "stroke-width": "1px",
     "stroke": "black",
}
self.css[".link"] = line
</snippet></ROW><ROW><id>17622069</id><snippet>with d3py.NetworkXFigure(G, width=500, height=500) as p:
    p += d3py.ForceLayout()
    p.css['.node'] = {'fill': 'blue', 'stroke': 'magenta'}
    p.css['.link'] = {'stroke': 'red', 'stoke-width': '3px'}
    p.show()
</snippet></ROW><ROW><id>17622069</id><snippet>host</snippet></ROW><ROW><id>17622069</id><snippet>networkx_figure.py</snippet></ROW><ROW><id>17622166</id><snippet>foo</snippet></ROW><ROW><id>17622166</id><snippet>bar</snippet></ROW><ROW><id>17622166</id><snippet>foo</snippet></ROW><ROW><id>17622222</id><snippet>&gt;&gt;&gt; def search(d, baz):
...     if baz in d:
...         return d[baz]
...     for value in d.values():
...         if isinstance(value, dict):
...             ret = search(value, baz)
...             if ret:
...                 return ret
...
&gt;&gt;&gt;
&gt;&gt;&gt; foo = {"foo" : {"bar": {"baz": "some value"}}}
&gt;&gt;&gt; search(foo, 'baz')
'some value'
&gt;&gt;&gt; search(foo, 'spam')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17622472</id><snippet>QObject</snippet></ROW><ROW><id>17622472</id><snippet>C</snippet></ROW><ROW><id>17622472</id><snippet>QFrame</snippet></ROW><ROW><id>17622472</id><snippet>QFrame</snippet></ROW><ROW><id>17622472</id><snippet>QFrame</snippet></ROW><ROW><id>17622472</id><snippet>QObject</snippet></ROW><ROW><id>17622472</id><snippet>A</snippet></ROW><ROW><id>17622472</id><snippet>class AMixin(object):
    def __init__(self, parent):
        pass
    # A-specific behavior

class A(QFrame, AMixin):
    def __init__(self, parent) :
        QFrame.__init__(self, parent)
        A.__init__(self, parent)


class B(AMixin, QLine):
    def __init__(self, parent) :
        AMixin.__init__(self, parent)
        QLine.__init__(self, parent)

class C(B):
    def __init__(self, parent) :
        B.__init__(self, parent)
        self.setLine(0, 0, 0, 0)
</snippet></ROW><ROW><id>17622472</id><snippet>C</snippet></ROW><ROW><id>17622472</id><snippet>A</snippet></ROW><ROW><id>17622472</id><snippet>C</snippet></ROW><ROW><id>17622472</id><snippet>QObject</snippet></ROW><ROW><id>17622578</id><snippet>import csv, os, string
rfile = open('nonbillabletest2.csv', 'rb')
rbytes = rfile.read()
rfile.close()

contents = ''
for b in rbytes:
  if chr(b) in string.printable + string.whitespace:
    contents += chr(b)

dataread = csv.reader(contents.split('\r\n'))
....
</snippet></ROW><ROW><id>17622583</id><snippet>def whiten(obs)
     std_dev = std(obs, axis=0)
     return obs / std_dev
</snippet></ROW><ROW><id>17622583</id><snippet>def whiten(obs)
     std_dev = std(obs)
     return obs / std_dev
</snippet></ROW><ROW><id>17622590</id><snippet>apt-get</snippet></ROW><ROW><id>17622590</id><snippet>service uwsgi action_here</snippet></ROW><ROW><id>17622590</id><snippet>pip</snippet></ROW><ROW><id>17622590</id><snippet>worker_processes</snippet></ROW><ROW><id>17622590</id><snippet>master</snippet></ROW><ROW><id>17622631</id><snippet>            node = removeAllAttributes(dom)
</snippet></ROW><ROW><id>17622631</id><snippet>            node = removeAllAttributes(node)
</snippet></ROW><ROW><id>17622647</id><snippet>for image in product_images:
     #product_image_url = '' 
     image_urls.append(image["images"])
</snippet></ROW><ROW><id>17622647</id><snippet>for image in product_images.to_dict():
     image_urls.append(image["images"]["src"])
</snippet></ROW><ROW><id>17622647</id><snippet>for image in product_images: 
     image_urls.append(image["src"])
</snippet></ROW><ROW><id>17622713</id><snippet>__new__</snippet></ROW><ROW><id>17622713</id><snippet>namedtuple</snippet></ROW><ROW><id>17622713</id><snippet>namedtuple</snippet></ROW><ROW><id>17622713</id><snippet>__new__</snippet></ROW><ROW><id>17622713</id><snippet>__init__</snippet></ROW><ROW><id>17622713</id><snippet>**kwargs</snippet></ROW><ROW><id>17622713</id><snippet>*args</snippet></ROW><ROW><id>17622713</id><snippet>class Foo(namedtuple('Foo', ['id', 'name', 'age'])):
    __slots__ = ()

    def __new__(cls, *args, **kwargs):
        kwargs = {k: v for k, v in kwargs.items() if k in cls._fields}
        return super(Foo, cls).__new__(cls, *args, **kwargs)
</snippet></ROW><ROW><id>17622713</id><snippet>itemgetter</snippet></ROW><ROW><id>17622713</id><snippet>__init__</snippet></ROW><ROW><id>17622713</id><snippet>__new__</snippet></ROW><ROW><id>17622713</id><snippet>Foo</snippet></ROW><ROW><id>17622713</id><snippet>__init__</snippet></ROW><ROW><id>17622713</id><snippet>__new__</snippet></ROW><ROW><id>17622713</id><snippet>tuple</snippet></ROW><ROW><id>17622713</id><snippet>super(Foo, self).__init__(*args, **kwargs)</snippet></ROW><ROW><id>17622713</id><snippet>__init__</snippet></ROW><ROW><id>17622713</id><snippet>kwargs</snippet></ROW><ROW><id>17622713</id><snippet>kwargs</snippet></ROW><ROW><id>17622713</id><snippet>__new__</snippet></ROW><ROW><id>17622713</id><snippet>def LenientNamedTuple(name, fields):
    class Wrapper(namedtuple(name, fields)):
        __slots__ = ()
        def __new__(cls, *args, **kwargs):
            args = args[:len(fields)]
            kwargs = {k: v for k, v in kwargs.items() if k in fields}
            return super(Wrapper, cls).__new__(cls, *args, **kwargs)
    return Wrapper
</snippet></ROW><ROW><id>17622713</id><snippet>_fields</snippet></ROW><ROW><id>17622713</id><snippet>fields</snippet></ROW><ROW><id>17622713</id><snippet>namedtuple</snippet></ROW><ROW><id>17622713</id><snippet>class Foo(LenientNamedTuple('Foo', ['id', 'name', 'age'])):
    pass

print(Foo(id=1, name=2, age=3, spam=4))
</snippet></ROW><ROW><id>17622713</id><snippet>dict()</snippet></ROW><ROW><id>17622713</id><snippet>namedtuple</snippet></ROW><ROW><id>17622798</id><snippet>def toggle(fshow,fhide):
    fhide.pack_forget()
    fshow.pack()


btn1 = Button(btnframe,text="screen1", command=lambda:toggle(myframe1,myframe2),width=9)
btn1.pack(side=LEFT)

btn2 = Button(btnframe,text="screen2",command=lambda:toggle(myframe2,myframe1),width=9)
btn2.pack(side=LEFT)
</snippet></ROW><ROW><id>17622843</id><snippet>collections.Counter</snippet></ROW><ROW><id>17622843</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = Counter()
&gt;&gt;&gt; a['word'] += 1
&gt;&gt;&gt; a['word'] += 1
&gt;&gt;&gt; a['test'] += 1
&gt;&gt;&gt; a.most_common()
[('word', 2), ('test', 1)]
</snippet></ROW><ROW><id>17622843</id><snippet>&gt;&gt;&gt; userInput = raw_input("Enter Something: ")
Enter Something: abc def ghi abc abc abc ghi
&gt;&gt;&gt; testDict = Counter(userInput.split(" "))
&gt;&gt;&gt; testDict.most_common()
[('abc', 4), ('ghi', 2), ('def', 1)]
</snippet></ROW><ROW><id>17622876</id><snippet>import urllib2
from bs4 import BeautifulSoup

urls = ['http://www.reddit.com/r/videos/comments/1i12o2/soap_precursor_to_a_lot_of_other_hilarious_shows/', 'http://www.reddit.com/r/videos/comments/1i12nx/kid_reporter_interviews_ryan_reynolds/', 'http://www.reddit.com/r/videos/comments/1i12ml/just_my_two_boys_going_full_derp_shocking_plot/']

for x in urls:
    try:
        f = urllib2.urlopen(x)
        data = f.read()
        soup = BeautifulSoup(data)
        span = soup.find('span', attrs={'class':'number'})
        print '{}:{}'.format(x, span.text)
    except HTTPError:
        print("HTTP Error, continuing")
</snippet></ROW><ROW><id>17622928</id><snippet>34.__class__</snippet></ROW><ROW><id>17622928</id><snippet>.</snippet></ROW><ROW><id>17622928</id><snippet>(34).__class__</snippet></ROW><ROW><id>17623010</id><snippet>virtualenv</snippet></ROW><ROW><id>17623010</id><snippet>requirements.txt</snippet></ROW><ROW><id>17623010</id><snippet>pip freeze</snippet></ROW><ROW><id>17623044</id><snippet>def mean(B):
        positives = [b for b in B if b &gt;= 0] 
        return sum(positives) / len(positives)
</snippet></ROW><ROW><id>17623044</id><snippet>filter (lambda i: i &gt;=0, some_list)
</snippet></ROW><ROW><id>17623108</id><snippet>int(float(fieldval))</snippet></ROW><ROW><id>17623108</id><snippet>loadtxt</snippet></ROW><ROW><id>17623108</id><snippet>converters</snippet></ROW><ROW><id>17623108</id><snippet>In [77]: in3 = StringIO("123.0 456 789 0.95\n231 543.0 876 0.87")

In [78]: dt = dtype([('x', "int"), ('y', "int"), ('z', "int"), ('r', "float")])

In [79]: converters = dict((k, lambda s: int(float(s))) for k in range(len(dt)) if np.issubdtype(dt[k], np.integer))

In [80]: converters
Out[80]: 
{0: &lt;function __main__.&lt;lambda&gt;&gt;,
 1: &lt;function __main__.&lt;lambda&gt;&gt;,
 2: &lt;function __main__.&lt;lambda&gt;&gt;}

In [81]: a = np.loadtxt(in3, dtype=dt, converters=converters)

In [82]: a
Out[82]: 
array([(123, 456, 789, 0.95), (231, 543, 876, 0.87)], 
      dtype=[('x', '&lt;i8'), ('y', '&lt;i8'), ('z', '&lt;i8'), ('r', '&lt;f8')])
</snippet></ROW><ROW><id>17623108</id><snippet>loadtxt</snippet></ROW><ROW><id>17623108</id><snippet>pandas</snippet></ROW><ROW><id>17623406</id><snippet>&gt;&gt;&gt; data = ['\x12', '\x13', '\x05', '\xF2']
&gt;&gt;&gt; [bin(ord(c))[2:].zfill(8) for c in data]                                                                                                                 
['00010010', '00010011', '00000101', '11110010']
</snippet></ROW><ROW><id>17623406</id><snippet>f = open('some_file', 'w')
f.write('\n'.join(bin(ord(c))[2:].zfill(8) for c in data))
f.close()
</snippet></ROW><ROW><id>17623406</id><snippet>bin()</snippet></ROW><ROW><id>17623406</id><snippet>bin()</snippet></ROW><ROW><id>17623406</id><snippet>def bin(i):
    s = []
    prefix = '0b' if i &gt;= 0 else '-0b'
    if i &lt; 0: i = -i
    while i:
        s.append('1' if i &amp; 1 else '0')
        i = i &gt;&gt; 1
    return prefix + (''.join(reversed(s)) if s else '0')
</snippet></ROW><ROW><id>17623433</id><snippet>na_rep</snippet></ROW><ROW><id>17623433</id><snippet>to_excel</snippet></ROW><ROW><id>17623433</id><snippet>frame.to_excel(writer,'tab name', na_rep='NA')
</snippet></ROW><ROW><id>17623587</id><snippet>raw_input()</snippet></ROW><ROW><id>17623587</id><snippet>select.select</snippet></ROW><ROW><id>17623587</id><snippet>sys.stdin</snippet></ROW><ROW><id>17623587</id><snippet>def play_music():
    while True:
        if not ch.get_queue():
            for x in range(BUFFERSIZE):
                    if x % BLOCKSIZE == 0:
                        outbuf = m.process(inbuf)
                    samples[selector][x][0] = outbuf[(x % BLOCKSIZE) * 2]
                    samples[selector][x][1] = outbuf[(x % BLOCKSIZE) * 2 + 1]
            ch.queue(sounds[selector])
            selector = int(not selector)
        libpd_release()

play_music_thread = threading.Thread(target=play_music)
play_music_thread.daemon = True
play_music_thread.start()

while True:
    command = raw_input().lower()

    if command == "commands":
        print '"look around"'
        print '"explore"'
        print '"inventory"'
        print '"examine"'
        print '"take"'
        print '"combine"'
        print '"quit"'
    elif command == "look" or command == "look around":
        char.look()
</snippet></ROW><ROW><id>17623587</id><snippet>Condition</snippet></ROW><ROW><id>17623587</id><snippet>Event</snippet></ROW><ROW><id>17623587</id><snippet>Queue</snippet></ROW><ROW><id>17623587</id><snippet>Lock</snippet></ROW><ROW><id>17623631</id><snippet>stdout</snippet></ROW><ROW><id>17623631</id><snippet>import cPickle
with open( 'big_pickled_list.pkl' ) as p:
    try:
        while True:
            print cPickle.load(p)
    except EOFError:
        pass
</snippet></ROW><ROW><id>17623631</id><snippet>for line in f:</snippet></ROW><ROW><id>17623631</id><snippet>def unpickle_iter(file):
    try:
        while True:
             yield cPickle.load(file)
    except EOFError:
        raise StopIteration
</snippet></ROW><ROW><id>17623631</id><snippet>with open('big_pickled_list.pkl') as file:
    for item in unpickle_iter(file):
        # use item ...
</snippet></ROW><ROW><id>17623878</id><snippet>with open('Myfile.txt') as f:
    for line in f:
        if not line.startswith(' '):
            variable, description, _ = line.split(None, 2)
            print(variable, description)
</snippet></ROW><ROW><id>17623878</id><snippet>with open('Myfile.txt') as f:
    non_descriptions = filter(lambda line: not line.startswith(' '), f)
    values = (line.split(None, 2) for line in non_descriptions)
</snippet></ROW><ROW><id>17623878</id><snippet>values</snippet></ROW><ROW><id>17623878</id><snippet>(variable, description)</snippet></ROW><ROW><id>17623957</id><snippet>__init__</snippet></ROW><ROW><id>17623957</id><snippet>def __init__(self, timeout=False):
    ...
    self.tweetsSoFar = 0

    def handleTweet(self, data):
        ...
        else:
            self.tweetsSoFar += 1 # we've seen another tweet!
            print 'Got tweet with text: %s' % message.get('text')

    def start(self):
        ...
        while self.tweetsSoFar &lt; 50: # stop at 50 tweets
            ...
</snippet></ROW><ROW><id>17624058</id><snippet>itertools.product</snippet></ROW><ROW><id>17624058</id><snippet>itertools.product(L, repeat=n)
</snippet></ROW><ROW><id>17624235</id><snippet>Python 2.7.2 (default, Jun 20 2012, 16:23:33) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; #!/usr/bin/python
... import time, sys
&gt;&gt;&gt; 
&gt;&gt;&gt; def calc_fib_num(n):
...   if (n &gt;= 2):
...     return calc_fib_num(n-1) + calc_fib_num(n-2)
...   elif (n == 1):
...     return 1
...   else:
...     return 0
... 
&gt;&gt;&gt; print "0",
0
&gt;&gt;&gt; print "1",
1
&gt;&gt;&gt; 
&gt;&gt;&gt; for n in range(2,20):
...   fib_num = calc_fib_num(n)
...   print fib_num
... 
1
2
3
5
8
13
21
34
55
89
144
233
377
610
987
1597
2584
4181
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17624271</id><snippet>gc</snippet></ROW><ROW><id>17624271</id><snippet>gc.set_debug(gc.DEBUG_LEAK)
</snippet></ROW><ROW><id>17624271</id><snippet>gc</snippet></ROW><ROW><id>17624271</id><snippet>gc.set_threshold</snippet></ROW><ROW><id>17624552</id><snippet>sudo apt-get purge python-pymongo</snippet></ROW><ROW><id>17624552</id><snippet>sudo apt-get install python-pip</snippet></ROW><ROW><id>17624552</id><snippet>sudo pip install pymongo</snippet></ROW><ROW><id>17624724</id><snippet>date</snippet></ROW><ROW><id>17624724</id><snippet>next = Resource.objects.filter(date__gt=now()).order_by('date')[:1]
archive = Resource.objects.filter(date__lt=now())
qs = list(chain(archive, next))
</snippet></ROW><ROW><id>17624724</id><snippet>qs = list(archive, next)
</snippet></ROW><ROW><id>17624724</id><snippet>dt = None
now = now()

next = Resource.objects.filter(date__gt=now()).order_by('date')[:1]
if next.exists(): #A quick lookup for the date
    now = next[0].date

archive = Resource.objects.filter(date__lt=now).order_by('date')
</snippet></ROW><ROW><id>17624733</id><snippet>from ast import literal_eval

def str_to_type(s):
    try:
        k=literal_eval(s)
        return type(k)
    except:
        return type(s)


l = ['444', '1.2', 'foo', '[1,2]', '[1']
for v in l:
    print str_to_type(v)
</snippet></ROW><ROW><id>17624733</id><snippet>&lt;type 'int'&gt;
&lt;type 'float'&gt;
&lt;type 'str'&gt;
&lt;type 'list'&gt;
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>17624820</id><snippet>&gt;&gt;&gt; my_list = ['name.13','name.1', 'name.2','name.4', 'name.32']
&gt;&gt;&gt; sorted(my_list, key=lambda a: (int(a.split('.')[1])))
['name.1', 'name.2', 'name.4', 'name.13', 'name.32']
</snippet></ROW><ROW><id>17624820</id><snippet>&gt;&gt;&gt; tuple_list = [('i','name.2'),('t','name.13'),('s','name.32'),('l','name.1'),('s','name.4')]
&gt;&gt;&gt; sorted(tuple_list, key=lambda (a,b): (int(b.split('.')[1])))
[('l', 'name.1'), ('i', 'name.2'), ('s', 'name.4'), ('t', 'name.13'), ('s', 'name.32')]
</snippet></ROW><ROW><id>17624820</id><snippet>sorted</snippet></ROW><ROW><id>17624820</id><snippet>sorted</snippet></ROW><ROW><id>17624919</id><snippet>x</snippet></ROW><ROW><id>17624919</id><snippet>worker</snippet></ROW><ROW><id>17624919</id><snippet>import multiprocessing as mp

def worker(x):
    name = mp.current_process().name
    print name, 'starting...'
    while x &lt; 10:
            print x
            x+=2
    print name, 'complete!'

if __name__ == '__main__':
    num_procs = 2
    procs = [mp.Process(target=worker, args=(x,)) for x in range(num_procs)]
    for proc in procs:
        proc.start()
    for proc in procs:
        proc.join()
</snippet></ROW><ROW><id>17624919</id><snippet>name</snippet></ROW><ROW><id>17624919</id><snippet>multiprocessing</snippet></ROW><ROW><id>17624919</id><snippet>mp.current_process().name</snippet></ROW><ROW><id>17624919</id><snippet>mp.Process(target=worker, name='custom name', ...)</snippet></ROW><ROW><id>17624919</id><snippet>worker</snippet></ROW><ROW><id>17624919</id><snippet>`mp.current_process().name</snippet></ROW><ROW><id>17625045</id><snippet>class Foo(object):
    def ff(self):
        self.var_1, self.var_2, self.var_3 = ff()
    def sf(self):
        self.var_4, self.var_5 = sf(self.var_1, self.var_2)
    def tf(self):
        self.var_6, self.var_7, self.var_8, self.var_9 = tf(self.var_2, self.var_4, self.var_5)
    def plot(self):
        mp(self.var_1, self.var_2, self.var_3, 
           self.var_5, self.var_6, self.var_7, self.var_8, self.var_9)

foo = Foo()
foo.ff()
foo.sf()
foo.tf()
foo.plot()
</snippet></ROW><ROW><id>17625045</id><snippet>Foo</snippet></ROW><ROW><id>17625371</id><snippet>LineReceiver</snippet></ROW><ROW><id>17625371</id><snippet>lineReceived</snippet></ROW><ROW><id>17625371</id><snippet>lineRecieved</snippet></ROW><ROW><id>17625371</id><snippet>NotImplemented</snippet></ROW><ROW><id>17625371</id><snippet>User.connectionMade</snippet></ROW><ROW><id>17625371</id><snippet>self.sendLine('username:')
</snippet></ROW><ROW><id>17625371</id><snippet>Main.dataReceived</snippet></ROW><ROW><id>17625371</id><snippet>self.transport.write(data)
</snippet></ROW><ROW><id>17625371</id><snippet>lineReceived</snippet></ROW><ROW><id>17625371</id><snippet>if self.name == None:
    self.setName(line)
</snippet></ROW><ROW><id>17625371</id><snippet>'username:'</snippet></ROW><ROW><id>17625405</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5]
&gt;&gt;&gt; b = [6,7,8,9,0]
</snippet></ROW><ROW><id>17625405</id><snippet>a and b</snippet></ROW><ROW><id>17625405</id><snippet>a and b</snippet></ROW><ROW><id>17625405</id><snippet>&gt;&gt;&gt; a and b
[6, 7, 8, 9, 0]
</snippet></ROW><ROW><id>17625405</id><snippet>True</snippet></ROW><ROW><id>17625405</id><snippet>False</snippet></ROW><ROW><id>17625405</id><snippet>&gt;&gt;&gt; bool(a)
True
&gt;&gt;&gt; bool(b)
True
</snippet></ROW><ROW><id>17625405</id><snippet>[]</snippet></ROW><ROW><id>17625405</id><snippet>True</snippet></ROW><ROW><id>17625405</id><snippet>a and b</snippet></ROW><ROW><id>17625405</id><snippet>a</snippet></ROW><ROW><id>17625405</id><snippet>True</snippet></ROW><ROW><id>17625405</id><snippet>False</snippet></ROW><ROW><id>17625405</id><snippet>a</snippet></ROW><ROW><id>17625405</id><snippet>False</snippet></ROW><ROW><id>17625405</id><snippet>a</snippet></ROW><ROW><id>17625405</id><snippet>a</snippet></ROW><ROW><id>17625405</id><snippet>True</snippet></ROW><ROW><id>17625405</id><snippet>b</snippet></ROW><ROW><id>17625405</id><snippet>a and b</snippet></ROW><ROW><id>17625405</id><snippet>[6, 7, 8, 9, 0]</snippet></ROW><ROW><id>17625405</id><snippet>True</snippet></ROW><ROW><id>17625405</id><snippet>False</snippet></ROW><ROW><id>17625405</id><snippet>a</snippet></ROW><ROW><id>17625405</id><snippet>b</snippet></ROW><ROW><id>17625405</id><snippet>+</snippet></ROW><ROW><id>17625405</id><snippet>&gt;&gt;&gt; for item in a + b:
...     print item,
... 
1 2 3 4 5 6 7 8 9 0
</snippet></ROW><ROW><id>17625405</id><snippet>or</snippet></ROW><ROW><id>17625405</id><snippet>not</snippet></ROW><ROW><id>17625405</id><snippet>or</snippet></ROW><ROW><id>17625405</id><snippet>a or b</snippet></ROW><ROW><id>17625405</id><snippet>[1, 2, 3, 4, 5]</snippet></ROW><ROW><id>17625405</id><snippet>a</snippet></ROW><ROW><id>17625405</id><snippet>not</snippet></ROW><ROW><id>17625405</id><snippet>True</snippet></ROW><ROW><id>17625405</id><snippet>False</snippet></ROW><ROW><id>17625405</id><snippet>False</snippet></ROW><ROW><id>17625405</id><snippet>True</snippet></ROW><ROW><id>17625405</id><snippet>True</snippet></ROW><ROW><id>17625405</id><snippet>False</snippet></ROW><ROW><id>17625405</id><snippet>TypeError</snippet></ROW><ROW><id>17625459</id><snippet>isinstance(self, other)</snippet></ROW><ROW><id>17625459</id><snippet>self</snippet></ROW><ROW><id>17625459</id><snippet>other</snippet></ROW><ROW><id>17625459</id><snippet>self</snippet></ROW><ROW><id>17625459</id><snippet>other</snippet></ROW><ROW><id>17625459</id><snippet>other</snippet></ROW><ROW><id>17625459</id><snippet>isinstance(self, type(other))</snippet></ROW><ROW><id>17625459</id><snippet>isinstance(self, type(other)) or isinstance(other, type(self))</snippet></ROW><ROW><id>17625459</id><snippet>other</snippet></ROW><ROW><id>17625459</id><snippet>self</snippet></ROW><ROW><id>17625459</id><snippet>is</snippet></ROW><ROW><id>17625459</id><snippet>if (instance1 is instance2):
    print "equals"
else:
    print "not equals"
</snippet></ROW><ROW><id>17625459</id><snippet>is</snippet></ROW><ROW><id>17625459</id><snippet>&gt;&gt;&gt; a = []
&gt;&gt;&gt; b = []
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
False
</snippet></ROW><ROW><id>17625459</id><snippet>&gt;&gt;&gt; a.append(0)
&gt;&gt;&gt; b
[]
</snippet></ROW><ROW><id>17625459</id><snippet>Instance</snippet></ROW><ROW><id>17625459</id><snippet>__eq__</snippet></ROW><ROW><id>17625459</id><snippet>==</snippet></ROW><ROW><id>17625459</id><snippet>is</snippet></ROW><ROW><id>17625575</id><snippet>ldict.setdefault(key, []).append(whatever)</snippet></ROW><ROW><id>17625730</id><snippet> multiplyNumbers = functools.partial(multiplyNumbers, y = 42)
</snippet></ROW><ROW><id>17625730</id><snippet>multiplyNumbers(5, 7, 9);</snippet></ROW><ROW><id>17625730</id><snippet>y=7</snippet></ROW><ROW><id>17625730</id><snippet>oldF = f
f = functools.partial(f, y = 42)
//work with changed f
f = oldF //restore
</snippet></ROW><ROW><id>17625730</id><snippet>partial.func</snippet></ROW><ROW><id>17625730</id><snippet>f = f.func //go to previous version.
</snippet></ROW><ROW><id>17625816</id><snippet>elif request.method !="POST":
    form.nickname = g.user.nickname
    form.about_me = g.user.about_me
</snippet></ROW><ROW><id>17625816</id><snippet>elif request.method !="POST":
    form.nickname.data = g.user.nickname
    form.about_me.data = g.user.about_me
</snippet></ROW><ROW><id>17625906</id><snippet>import itertools
import operator

def code_counter(table, codes):
    for key, group in itertools.groupby(table, key=operator.itemgetter('ID')):
        group_codes = [item['CODE'] for item in group]

        yield [group_codes.count(code) for code in codes]

if __name__ == '__main__':
    cursor.execute("SELECT * FROM table1")
    table1 = cursor.fetchall()

    cursor.execute("SELECT CODE FROM table2")
    codes = [code.get('code') for code in cursor.fetchall()]

    for chunk in code_counter(table1, codes):
        print(chunk)
</snippet></ROW><ROW><id>17625906</id><snippet>table1</snippet></ROW><ROW><id>17625925</id><snippet>&lt;meta&gt;</snippet></ROW><ROW><id>17625925</id><snippet>a.write('&lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"&gt;')
a.write(document)
</snippet></ROW><ROW><id>17625925</id><snippet>a.write('''&lt;!DOCTYPE html&gt;
    &lt;html&gt;
    &lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"&gt;&lt;/head&gt;
    &lt;body&gt;{}&lt;/body&gt;
    &lt;/html&gt;'''.format(document))
</snippet></ROW><ROW><id>17625988</id><snippet>[sum(t) for t in zip(*dictName.itervalues())]
</snippet></ROW><ROW><id>17626023</id><snippet>shift</snippet></ROW><ROW><id>17626023</id><snippet>shift</snippet></ROW><ROW><id>17626268</id><snippet>&gt;&gt;&gt; a
  UserID  ItemID
0      A       2
1      A       2
2      A       3
3      B       1
4      B       1
5      B       1
6      B       3
&gt;&gt;&gt; a.drop_duplicates()
  UserID  ItemID
0      A       2
2      A       3
3      B       1
6      B       3
&gt;&gt;&gt; a.drop_duplicates().reset_index(drop=True)
  UserID  ItemID
0      A       2
1      A       3
2      B       1
3      B       3
</snippet></ROW><ROW><id>17626337</id><snippet>input()</snippet></ROW><ROW><id>17626337</id><snippet>raw_input()</snippet></ROW><ROW><id>17626365</id><snippet>super</snippet></ROW><ROW><id>17626461</id><snippet>while letter != ord('z'):
    &lt;rest of your code here&gt;
</snippet></ROW><ROW><id>17626461</id><snippet>ord</snippet></ROW><ROW><id>17626461</id><snippet>chr</snippet></ROW><ROW><id>17626461</id><snippet>for character in "abcdefghijklmnopqrstuvwxyz":
    print(character)
</snippet></ROW><ROW><id>17626461</id><snippet>import string
string.lowercase
</snippet></ROW><ROW><id>17626471</id><snippet>d = {'Komp': ['values'], 'Forx': ['values'], 'Rove': ['values']}
from itertools import combinations
for x in combinations(d, 2):
   print x
</snippet></ROW><ROW><id>17626531</id><snippet>np.linspace(np.pi/(N+1), np.pi, N, endpoint = False)
</snippet></ROW><ROW><id>17626592</id><snippet>num[-1]</snippet></ROW><ROW><id>17626592</id><snippet>def getSumOfLastDigits(numList): 
    total = 0 
    for num in numList: 
        total += num % 10
    return total
</snippet></ROW><ROW><id>17626622</id><snippet>c = c + 1
</snippet></ROW><ROW><id>17626622</id><snippet>foo</snippet></ROW><ROW><id>17626622</id><snippet>c</snippet></ROW><ROW><id>17626622</id><snippet>print c
</snippet></ROW><ROW><id>17626622</id><snippet>c</snippet></ROW><ROW><id>17626622</id><snippet>main</snippet></ROW><ROW><id>17626622</id><snippet>c</snippet></ROW><ROW><id>17626622</id><snippet>public class Test1 {

    static int a = 1;
    static int b = 2;
    static int c = 3;

    public static void foo() {
        int c; // Now c is local, like in the Python
        System.out.println(a);
        System.out.println(b);
        System.out.println(c);
        c = c + 1;
    }   

    public static void main(String[] args) {
        foo();
    }   
}
</snippet></ROW><ROW><id>17626641</id><snippet>l = [another_function(i) for i in range(lower, upper)]
</snippet></ROW><ROW><id>17626641</id><snippet>for</snippet></ROW><ROW><id>17626641</id><snippet>i</snippet></ROW><ROW><id>17626641</id><snippet>min()</snippet></ROW><ROW><id>17626677</id><snippet>shlex</snippet></ROW><ROW><id>17626677</id><snippet>spltr.whitespace += ','
</snippet></ROW><ROW><id>17626677</id><snippet>StringIO</snippet></ROW><ROW><id>17626677</id><snippet>csv</snippet></ROW><ROW><id>17626677</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; import StringIO
&gt;&gt;&gt;
&gt;&gt;&gt; line = 'a, b, "c, z",,,d,e,f'
&gt;&gt;&gt; file_like = StringIO.StringIO(line)
&gt;&gt;&gt;
&gt;&gt;&gt; csvreader = csv.reader(file_like, delimiter=',', quotechar='"', skipinitialspace=True)
&gt;&gt;&gt; list(csvreader)
[['a', 'b', 'c, z', '', '', 'd', 'e', 'f']]
</snippet></ROW><ROW><id>17626689</id><snippet>GNU awk</snippet></ROW><ROW><id>17626689</id><snippet>awk -F'[, ]+' '{for (i=2; i&lt;=NF; ++i) print "http://example/"$1"/"$i }' input.txt
http://example/Joe/21142
http://example/Joe/21143
http://example/Joe/21909
http://example/Joe/24125
http://example/Mary/22650
http://example/Mary/23127
http://example/John/24325
http://example/Mike/24683
http://example/Mike/24684
http://example/Mike/26973
</snippet></ROW><ROW><id>17626689</id><snippet>s = '''Joe, 21142 21143 21909 24125
Mary, 22650 23127
John, 24325
Mike, 24683 24684 26973
'''
from StringIO import StringIO
from contextlib import closing
with closing(StringIO(s)) as f:
    for line in f: 
            x, y = line.split(',')
            x = x.strip()
            y = y.strip().split()
            leader = 'http://example/{}'.format(x)
            print '\n'.join('{}/{}'.format(leader, z) for z in y)
</snippet></ROW><ROW><id>17626724</id><snippet>from Foundation import NSDictionary, NSString, NSPropertyListSerialization
from Foundation import NSUTF8StringEncoding, NSPropertyListXMLFormat_v1_0

d = {'a': 1, 'b': 2, 'c': 3}
nsd = NSDictionary(d)

# serialize the dictionary as XML into an NSData object
xml_plist_data, error = NSPropertyListSerialization.dataWithPropertyList_format_options_error_(nsd, NSPropertyListXMLFormat_v1_0, 0, None)

if xml_plist_data:
    # convert that data to a string
    xml_plist = NSString.alloc().initWithData_encoding_(xml_plist_data, NSUTF8StringEncoding)
else:
    # look at the error
    pass
</snippet></ROW><ROW><id>17626733</id><snippet>/home/sgpromot/.python-eggs</snippet></ROW><ROW><id>17626733</id><snippet>chmod g-wx,o-wx /home/sgpromot/.python-eggs
</snippet></ROW><ROW><id>17626784</id><snippet>make</snippet></ROW><ROW><id>17626907</id><snippet>for i in xrange(K.shape[0]):
    for j in xrange(K.shape[1]):

        print(i,j)
        '''create an r vector '''
        r=(i*distX,j*distY,z)

        for x in xrange(img.shape[0]):
            for y in xrange(img.shape[1]):
                '''create an ksi vector, then calculate
                   it's norm, and the dot product of r and ksi'''
                ksi=(x*distX,y*distY,z)
                ksiNorm=np.linalg.norm(ksi)
                ksiDotR=float(np.dot(ksi,r))

                '''calculate the integrand'''
                temp[x,y]=img[x,y]*np.exp(1j*k*ksiDotR/ksiNorm)

        '''interpolate so that we can do the integral and take the integral'''
        temp2=rbs(a,b,temp.real)
        K[i,j]=temp2.integral(0,n,0,m)
</snippet></ROW><ROW><id>17626907</id><snippet>'''create all r vectors'''
R = np.empty((K.shape[0], K.shape[1], 3))
R[:,:,0] = np.repeat(np.arange(K.shape[0]), K.shape[1]).reshape(K.shape) * distX
R[:,:,1] = np.arange(K.shape[1]) * distY
R[:,:,2] = z

'''create all ksi vectors'''
KSI = np.empty((img.shape[0], img.shape[1], 3))
KSI[:,:,0] = np.repeat(np.arange(img.shape[0]), img.shape[1]).reshape(img.shape) * distX
KSI[:,:,1] = np.arange(img.shape[1]) * distY
KSI[:,:,2] = z

# vectorized 2-norm; see http://stackoverflow.com/a/7741976/4323                                                    
KSInorm = np.sum(np.abs(KSI)**2,axis=-1)**(1./2)

# loop over entire K, which is same shape as img, rows first                                                        
# this loop populates K, one pixel at a time (so can be parallelized)                                               
for i in xrange(K.shape[0]):                                                                                    
    for j in xrange(K.shape[1]):                                                                                

        print(i, j)

        KSIdotR = np.dot(KSI, R[i,j])
        temp = img * np.exp(1j * k * KSIdotR / KSInorm)

        '''interpolate so that we can do the integral and take the integral'''
        temp2 = rbs(a, b, temp.real)
        K[i,j] = temp2.integral(0, n, 0, m)
</snippet></ROW><ROW><id>17626907</id><snippet>rbs</snippet></ROW><ROW><id>17626907</id><snippet>scipy.interpolate.RectBivariateSpline</snippet></ROW><ROW><id>17626907</id><snippet>k</snippet></ROW><ROW><id>17626907</id><snippet>K</snippet></ROW><ROW><id>17626907</id><snippet>j</snippet></ROW><ROW><id>17626907</id><snippet>0j</snippet></ROW><ROW><id>17627037</id><snippet>g = {0: (1,2,3),1: (3,4,5),2: (4,5,6),3: (7,8,9)}
g2 = dict()
for key in g.keys():
    old_vals=set(g[key])
    new_vals=[]
    for val in old_vals:
        try:
            new_vals.extend(g[val])
        except KeyError:
            pass
    new_vals = tuple(set(new_vals)-old_vals)
    g2[key]=new_vals
</snippet></ROW><ROW><id>17627037</id><snippet>&gt;&gt;&gt; g2
{0: (4, 5, 6, 7, 8, 9), 1: (8, 9, 7), 2: (), 3: ()}
</snippet></ROW><ROW><id>17627037</id><snippet>import time
import random

def makeg(n):
    g=dict()
    for i in xrange(n):
        g[i] = tuple([random.randint(0,n) for _ in xrange(3)])
    return g

g=makeg(100000)

def m(g):
    g2 = dict()
    for key in g.keys():
        old_vals=set(g[key])
        new_vals=[]
        for val in old_vals:
            try:
                new_vals.extend(g[val])
            except KeyError:
                pass
        new_vals = tuple(set(new_vals)-old_vals)
        g2[key]=new_vals
    return g2

s1 = time.time()
m(g)
e1 = time.time()

from collections import defaultdict

def h(g):
    a = defaultdict(set)
    [a[x].update(g.get(y, [])) for x in g for y in g[x]]
    [a[x].difference_update(g[x]) for x in g]
    g2={x:tuple(a[x]) for x in a}
    return g2

s2 = time.time()
h(g)
e2=time.time()

mt =(e1-s1)
ht=(e2-s2)
print mt,ht,mt/ht
</snippet></ROW><ROW><id>17627037</id><snippet>nero@ubuntu:~/so$ python so.py 
0.556298017502 0.850471019745 0.654105789129
</snippet></ROW><ROW><id>17627078</id><snippet>\number</snippet></ROW><ROW><id>17627078</id><snippet>&gt;&gt;&gt; s="one two"
&gt;&gt;&gt; print re.sub(r"\b(\w+)(\s)(\w+)\b",r"\3\2\1",s)
two one
</snippet></ROW><ROW><id>17627078</id><snippet>\\3 \\2 \\1</snippet></ROW><ROW><id>17627105</id><snippet>element1= find_element_by_xpath("//caption/em")
element1.get_attribute('innerHTML') 
</snippet></ROW><ROW><id>17627422</id><snippet>4s</snippet></ROW><ROW><id>17627422</id><snippet>&gt;&gt;&gt; struct.unpack('4s', 'test')[0]
'test'
</snippet></ROW><ROW><id>17627422</id><snippet>&gt;&gt;&gt; ord('t') + (ord('e') &lt;&lt; 8) + (ord('s') &lt;&lt; 16) + (ord('t') &lt;&lt; 24)
1953719668
</snippet></ROW><ROW><id>17627505</id><snippet>subprocess.call</snippet></ROW><ROW><id>17627505</id><snippet>shell=True</snippet></ROW><ROW><id>17627505</id><snippet>    subprocess.call([...], shell=True)
</snippet></ROW><ROW><id>17627505</id><snippet>sex</snippet></ROW><ROW><id>17627505</id><snippet>subprocess.call(['/path/to/sex', ...], shell=True)
</snippet></ROW><ROW><id>17627575</id><snippet>import datetime
d = ['09-2012', '04-2007', '11-2012', '05-2013', '12-2006', '05-2006', '08-2007']
sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))
</snippet></ROW><ROW><id>17627648</id><snippet>unique=True</snippet></ROW><ROW><id>17627648</id><snippet>syncdb</snippet></ROW><ROW><id>17627648</id><snippet>sqlite3</snippet></ROW><ROW><id>17627648</id><snippet>MyModel(url="blah").save()</snippet></ROW><ROW><id>17627648</id><snippet>syncdb</snippet></ROW><ROW><id>17627737</id><snippet>unique</snippet></ROW><ROW><id>17627988</id><snippet>chr(somenumber)</snippet></ROW><ROW><id>17628056</id><snippet>yield 5</snippet></ROW><ROW><id>17628056</id><snippet>.send()</snippet></ROW><ROW><id>17628056</id><snippet>m</snippet></ROW><ROW><id>17628056</id><snippet>h()</snippet></ROW><ROW><id>17628056</id><snippet>h()</snippet></ROW><ROW><id>17628056</id><snippet>.next()</snippet></ROW><ROW><id>17628056</id><snippet>'Wen Chuan'</snippet></ROW><ROW><id>17628056</id><snippet>yield 5</snippet></ROW><ROW><id>17628056</id><snippet>5</snippet></ROW><ROW><id>17628056</id><snippet>m</snippet></ROW><ROW><id>17628056</id><snippet>c.send('Fighting!')</snippet></ROW><ROW><id>17628056</id><snippet>'Fighting!'</snippet></ROW><ROW><id>17628056</id><snippet>m</snippet></ROW><ROW><id>17628056</id><snippet>print m</snippet></ROW><ROW><id>17628056</id><snippet>yield 12</snippet></ROW><ROW><id>17628056</id><snippet>12</snippet></ROW><ROW><id>17628056</id><snippet>d</snippet></ROW><ROW><id>17628056</id><snippet>'We will never forget the date', 5, '.', 12</snippet></ROW><ROW><id>17628056</id><snippet>.next()</snippet></ROW><ROW><id>17628056</id><snippet>'We are together!'</snippet></ROW><ROW><id>17628056</id><snippet>StopIteration</snippet></ROW><ROW><id>17628106</id><snippet>simple-history-1.3.5.tar.gz</snippet></ROW><ROW><id>17628106</id><snippet>1.3.5</snippet></ROW><ROW><id>17628106</id><snippet>'{0}-{1}{2}'.format(packagename, version, ext)</snippet></ROW><ROW><id>17628106</id><snippet>setuptools.package_index.interpret_distro_name</snippet></ROW><ROW><id>17628106</id><snippet>easy_install</snippet></ROW><ROW><id>17628106</id><snippet>basename</snippet></ROW><ROW><id>17628106</id><snippet>&lt;pypi package&gt;-&lt;version&gt;</snippet></ROW><ROW><id>17628106</id><snippet>download_url</snippet></ROW><ROW><id>17628106</id><snippet>download_url='{0}/releases'.format(base_url)
# or 
package_name='simple_history' # define it before setup()
download_url='{0}/archive/{1}-{2}'.format(package_name, base_url, __version__)
</snippet></ROW><ROW><id>17628492</id><snippet>INSERT</snippet></ROW><ROW><id>17628492</id><snippet>sqlite3</snippet></ROW><ROW><id>17628492</id><snippet>SELECT sqlite_version();</snippet></ROW><ROW><id>17628548</id><snippet>def MERGE_SORT(A, p, r):
    if p &lt; r:
        q = int((p+r)/2)
    MERGE_SORT(A, p, q)
</snippet></ROW><ROW><id>17628548</id><snippet>p &lt; r</snippet></ROW><ROW><id>17628548</id><snippet>False</snippet></ROW><ROW><id>17628548</id><snippet>q</snippet></ROW><ROW><id>17628548</id><snippet>q</snippet></ROW><ROW><id>17628637</id><snippet>inf</snippet></ROW><ROW><id>17628637</id><snippet>-inf</snippet></ROW><ROW><id>17628637</id><snippet>nan</snippet></ROW><ROW><id>17628637</id><snippet>0</snippet></ROW><ROW><id>17628637</id><snippet>0</snippet></ROW><ROW><id>17628637</id><snippet>n</snippet></ROW><ROW><id>17628637</id><snippet>nan</snippet></ROW><ROW><id>17628637</id><snippet>nan</snippet></ROW><ROW><id>17628637</id><snippet>nan</snippet></ROW><ROW><id>17628651</id><snippet>numpy</snippet></ROW><ROW><id>17628651</id><snippet>def varimax(Phi, gamma = 1, q = 20, tol = 1e-6):
    from numpy import eye, asarray, dot, sum
    from numpy.linalg import svd
    p,k = Phi.shape
    R = eye(k)
    d=0
    for i in xrange(q):
        d_old = d
        Lambda = dot(Phi, R)
        u,s,vh = svd(dot(Phi.T,asarray(Lambda)**3 - (gamma/p) * dot(Lambda, diag(diag(dot(Lambda.T,Lambda))))))
        R = dot(u,vh)
        d = sum(s)
        if d/d_old &lt; tol: break
    return dot(Phi, R)
</snippet></ROW><ROW><id>17628734</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; Decimal = int
&gt;&gt;&gt; x = [(Decimal('264'), datetime.datetime(2012, 11, 1, 0, 0)), (Decimal('445812776'), datetime.datetime(2012, 12, 1, 0, 0)), (Decimal('545942604'), datetime.datetime(2013, 1, 1, 0, 0))]
&gt;&gt;&gt; x[0]
(264, datetime.datetime(2012, 11, 1, 0, 0))
&gt;&gt;&gt; x[0][1]
datetime.datetime(2012, 11, 1, 0, 0)
&gt;&gt;&gt; d = [b for (a,b) in x]
&gt;&gt;&gt; t = [a for (a,b) in x]
</snippet></ROW><ROW><id>17628910</id><snippet>    self.columnHeader = OneOrMore(self.aucc) \
                        | OneOrMore(nums) \
                        | OneOrMore(self.blankCharacter) \
                        | OneOrMore(self.specialCharacter)
</snippet></ROW><ROW><id>17628910</id><snippet>OneOrMore</snippet></ROW><ROW><id>17628910</id><snippet>Word</snippet></ROW><ROW><id>17628910</id><snippet>    self.columnHeader = Word(self.aucc + nums + self.blankCharacter + self.specialCharacter)
</snippet></ROW><ROW><id>17628910</id><snippet>OneOrMore</snippet></ROW><ROW><id>17628910</id><snippet>    OneOrMore(nums)
</snippet></ROW><ROW><id>17628910</id><snippet>nums</snippet></ROW><ROW><id>17628910</id><snippet>OneOrMore(nums)</snippet></ROW><ROW><id>17628910</id><snippet>Word</snippet></ROW><ROW><id>17628910</id><snippet>OneOrMore</snippet></ROW><ROW><id>17628910</id><snippet>Literal</snippet></ROW><ROW><id>17628910</id><snippet>aucc = ''.join(set([alphas.upper(),"'"]))
</snippet></ROW><ROW><id>17628910</id><snippet>aucc = alphas.upper() + "'"
</snippet></ROW><ROW><id>17628910</id><snippet>Word</snippet></ROW><ROW><id>17628910</id><snippet># sample
ZOO/STATUS/FOOD ALLOCATION//
TOPIC/BIRD FEED IS RUNNING LOW//
FREE/WE HAVE DISCOVERED MOTHS INFESTED THE BIRDSEED AND IT IS NO
LONGER USABLE.//

parser :: header topicEntry+
header :: "ZOO" sep namedValue
namedValue :: uppercaseWord sep valueBody
valueBody :: (everything up to //)
topicEntry :: topicHeader topicBody
topicHeader :: "TOPIC" sep valuebody
topicBody :: freeText
freeText :: "FREE" sep valuebody
sep :: "/"
</snippet></ROW><ROW><id>17628910</id><snippet>SEP = Literal("/")
BODY_TERMINATOR = Literal("//")
FREE_,TOPIC_,ZOO_ = map(Keyword,"FREE TOPIC ZOO".split())
uppercaseWord = Word(alphas.upper())
valueBody = SkipTo(BODY_TERMINATOR) # adjust later, but okay for now...

freeText = FREE_ + SEP + valueBody

topicBody = freeText
topicHeader = TOPIC_ + SEP + valueBody
topicEntry = topicHeader + topicBody

namedValue = uppercaseWord + SEP + valueBody
zooHeader = ZOO_ + SEP + namedValue

parser = zooHeader + OneOrMore(topicEntry)
</snippet></ROW><ROW><id>17628910</id><snippet>valueBody</snippet></ROW><ROW><id>17629136</id><snippet>class</snippet></ROW><ROW><id>17629136</id><snippet>find_all('p', { 'class' : "title"})</snippet></ROW><ROW><id>17629136</id><snippet>find_all(class_="title")</snippet></ROW><ROW><id>17629146</id><snippet>import json

data = json.loads(open('json_file.json', 'r').read())
</snippet></ROW><ROW><id>17629146</id><snippet>print json.dumps(data)
</snippet></ROW><ROW><id>17629146</id><snippet>json</snippet></ROW><ROW><id>17629430</id><snippet>Setup script exited with error: Unable to find vcvarsall.bat
</snippet></ROW><ROW><id>17629430</id><snippet>C</snippet></ROW><ROW><id>17629430</id><snippet>C++</snippet></ROW><ROW><id>17629564</id><snippet>import base64

with open('frameBorder.gif', 'wb') as f:
    decoded = base64.decodestring(b"""
    R0lGODlhQABAAPcAAHx+fMTCxKSipOTi5JSSlNTS1LSytPTy9IyKjMzKzKyq
    rOzq7JyanNza3Ly6vPz6/ISChMTGxKSmpOTm5JSWlNTW1LS2tPT29IyOjMzO
    zKyurOzu7JyenNze3Ly+vPz+/OkAKOUA5IEAEnwAAACuQACUAAFBAAB+AFYd
    QAC0AABBAAB+AIjMAuEEABINAAAAAHMgAQAAAAAAAAAAAKjSxOIEJBIIpQAA
    sRgBMO4AAJAAAHwCAHAAAAUAAJEAAHwAAP+eEP8CZ/8Aif8AAG0BDAUAAJEA
    AHwAAIXYAOfxAIESAHwAAABAMQAbMBZGMAAAIEggJQMAIAAAAAAAfqgaXESI
    5BdBEgB+AGgALGEAABYAAAAAAACsNwAEAAAMLwAAAH61MQBIAABCM8B+AAAU
    AAAAAAAApQAAsf8Brv8AlP8AQf8Afv8AzP8A1P8AQf8AfgAArAAABAAADAAA
    AACQDADjAAASAAAAAACAAADVABZBAAB+ALjMwOIEhxINUAAAANIgAOYAAIEA
    AHwAAGjSAGEEABYIAAAAAEoBB+MAAIEAAHwCACABAJsAAFAAAAAAAGjJAGGL
    AAFBFgB+AGmIAAAQAABHAAB+APQoAOE/ABIAAAAAAADQAADjAAASAAAAAPiF
    APcrABKDAAB8ABgAGO4AAJAAqXwAAHAAAAUAAJEAAHwAAP8AAP8AAP8AAP8A
    AG0pIwW3AJGSAHx8AEocI/QAAICpAHwAAAA0SABk6xaDEgB8AAD//wD//wD/
    /wD//2gAAGEAABYAAAAAAAC0/AHj5AASEgAAAAA01gBkWACDTAB8AFf43PT3
    5IASEnwAAOAYd+PuMBKQTwB8AGgAEGG35RaSEgB8AOj/NOL/ZBL/gwD/fMkc
    q4sA5UGpEn4AAIg02xBk/0eD/358fx/4iADk5QASEgAAAALnHABkAACDqQB8
    AMyINARkZA2DgwB8fBABHL0AAEUAqQAAAIAxKOMAPxIwAAAAAIScAOPxABIS
    AAAAAIIAnQwA/0IAR3cAACwAAAAAQABAAAAI/wA/CBxIsKDBgwgTKlzIsKFD
    gxceNnxAsaLFixgzUrzAsWPFCw8kDgy5EeQDkBxPolypsmXKlx1hXnS48UEH
    CwooMCDAgIJOCjx99gz6k+jQnkWR9lRgYYDJkAk/DlAgIMICkVgHLoggQIPT
    ighVJqBQIKvZghkoZDgA8uDJAwk4bDhLd+ABBmvbjnzbgMKBuoA/bKDQgC1F
    gW8XKMgQOHABBQsMI76wIIOExo0FZIhM8sKGCQYCYA4cwcCEDSYPLOgg4Oro
    uhMEdOB84cCAChReB2ZQYcGGkxsGFGCgGzCFCh1QH5jQIW3xugwSzD4QvIIH
    4s/PUgiQYcCG4BkC5P/ObpaBhwreq18nb3Z79+8Dwo9nL9I8evjWsdOX6D59
    fPH71Xeef/kFyB93/sln4EP2Ebjegg31B5+CEDLUIH4PVqiQhOABqKFCF6qn
    34cHcfjffCQaFOJtGaZYkIkUuljQigXK+CKCE3po40A0trgjjDru+EGPI/6I
    Y4co7kikkAMBmaSNSzL5gZNSDjkghkXaaGIBHjwpY4gThJeljFt2WSWYMQpZ
    5pguUnClehS4tuMEDARQgH8FBMBBBExGwIGdAxywXAUBKHCZkAIoEEAFp33W
    QGl47ZgBAwZEwKigE1SQgAUCUDCXiwtQIIAFCTQwgaCrZeCABAzIleIGHDD/
    oIAHGUznmXABGMABT4xpmBYBHGgAKGq1ZbppThgAG8EEAW61KwYMSOBAApdy
    pNp/BkhAAQLcEqCTt+ACJW645I5rLrgEeOsTBtwiQIEElRZg61sTNBBethSw
    CwEA/Pbr778ABywwABBAgAAG7xpAq6mGUUTdAPZ6YIACsRKAAbvtZqzxxhxn
    jDG3ybbKFHf36ZVYpuE5oIGhHMTqcqswvyxzzDS/HDMHEiiggQMLDxCZXh8k
    BnEBCQTggAUGGKCB0ktr0PTTTEfttNRQT22ABR4EkEABDXgnGUEn31ZABglE
    EEAAWaeN9tpqt832221HEEECW6M3wc+Hga3SBgtMODBABw00UEEBgxdO+OGG
    J4744oZzXUEDHQxwN7F5G7QRdXxPoPkAnHfu+eeghw665n1vIKhJBQUEADs=""")
    f.write(decoded)
</snippet></ROW><ROW><id>17629564</id><snippet>frameBorder.gif</snippet></ROW><ROW><id>17629564</id><snippet>import base64

with open('frameBorder.gif', 'rb') as f:
    encoded = base64.encodestring(f.read())
    print(encoded.decode('latin1'))
</snippet></ROW><ROW><id>17630209</id><snippet> [dic[x] for x in keylist]
</snippet></ROW><ROW><id>17630209</id><snippet>for element in alist</snippet></ROW><ROW><id>17630209</id><snippet>KeyError</snippet></ROW><ROW><id>17630209</id><snippet>[dic[x] for x in keylist if x in dic]</snippet></ROW><ROW><id>17630209</id><snippet>[dic.get(x) for x in keylist]</snippet></ROW><ROW><id>17630314</id><snippet>def obj_create(self, bundle, **kwargs):
    # Get tech for this user
    site_user = SiteUser.objects.get(user=bundle.request.user)

    bundle.obj = self._meta.object_class()

    for key, value in kwargs.items():
        setattr(bundle.obj, key, value)

    # Override the tech and operator fields
    setattr(bundle.obj, 'tech', site_user)
    setattr(bundle.obj, 'operator', site_user.operator)

    self.authorized_create_detail(self.get_object_list(bundle.request), bundle)
    bundle = self.full_hydrate(bundle)
    return self.save(bundle);
</snippet></ROW><ROW><id>17630475</id><snippet>d={('w1','u1'):3,('w1','u2'):8,('w2','u1'):1,('w1','u3'):11,('w2','u3'):6}

d2 = {}

for (w,u) , value in d.items():
    if w not in d2:
        d2[w] = [(u,value)]
    else:
        d2[w].append((u, value))


for key, values in d2.items():
    print key, ":\t", sorted(values, key=lambda x: -x[1]), "\n"
</snippet></ROW><ROW><id>17630475</id><snippet>w2 :    [('u3', 6), ('u1', 1)] 

w1 :    [('u3', 11), ('u2', 8), ('u1', 3)] 
</snippet></ROW><ROW><id>17630566</id><snippet>(i,j,k)</snippet></ROW><ROW><id>17630566</id><snippet>(i,j,k) != (0,0,0)</snippet></ROW><ROW><id>17630566</id><snippet>S = range(-3,3)
x = [(i,j,k)
     for i in S
     for j in S
     for k in S
     if ((i+j+k==0)
         and (i,j,k) != (0,0,0))]
print(x)
</snippet></ROW><ROW><id>17630566</id><snippet>[(-3, 1, 2), (-3, 2, 1), (-2, 0, 2), (-2, 1, 1), (-2, 2, 0), (-1, -1, 2), (-1, 0, 1), (-1, 1, 0), (-1, 2, -1), (0, -2, 2), (0, -1, 1), (0, 1, -1), (0, 2, -2), (1, -3, 2), (1, -2, 1), (1, -1, 0), (1, 0, -1), (1, 1, -2), (1, 2, -3), (2, -3, 1), (2, -2, 0), (2, -1, -1), (2, 0,
-2), (2, 1, -3)]
</snippet></ROW><ROW><id>17630566</id><snippet>(i!=0) and (j!=0) and (k!=0)</snippet></ROW><ROW><id>17630566</id><snippet>i=0</snippet></ROW><ROW><id>17630566</id><snippet>j=1</snippet></ROW><ROW><id>17630566</id><snippet>| i != 0 | j != 0 | (i!=0) and (j!=0) | (i,j) != (0,0) |
| False  | True   | False             | True           |
</snippet></ROW><ROW><id>17630566</id><snippet>(i!=0) and (j!=0)</snippet></ROW><ROW><id>17630566</id><snippet>False</snippet></ROW><ROW><id>17630566</id><snippet>False and True</snippet></ROW><ROW><id>17630566</id><snippet>False</snippet></ROW><ROW><id>17630566</id><snippet>(i,j) != (0,0)</snippet></ROW><ROW><id>17630566</id><snippet>True</snippet></ROW><ROW><id>17630566</id><snippet>i</snippet></ROW><ROW><id>17630566</id><snippet>j</snippet></ROW><ROW><id>17630566</id><snippet>(k!=0)</snippet></ROW><ROW><id>17630610</id><snippet>&gt;&gt;&gt; soup
&lt;html&gt;&lt;body&gt;&lt;span id="1"&gt;&lt;/span&gt;&lt;span id="2"&gt;&lt;/span&gt;&lt;span id="3"&gt;&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;
&gt;&gt;&gt; soup.find_all('span', id=re.compile(r'\d'))
[&lt;span id="1"&gt;&lt;/span&gt;, &lt;span id="2"&gt;&lt;/span&gt;, &lt;span id="3"&gt;&lt;/span&gt;]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17630610</id><snippet>soup.find_all('span', id=re.compile(r'titleDescriptionID[0-9]+')</snippet></ROW><ROW><id>17630710</id><snippet>[x for x in range(1,4)]</snippet></ROW><ROW><id>17630710</id><snippet>list(range(1, 4))</snippet></ROW><ROW><id>17630710</id><snippet>list(zip(['A', 'B', 'C'], range(1, 4)))
</snippet></ROW><ROW><id>17630710</id><snippet>list()</snippet></ROW><ROW><id>17630710</id><snippet>[(x, y) for x, y in zip(['A', 'B', 'C'], range(1, 4))]
</snippet></ROW><ROW><id>17630710</id><snippet>zip()</snippet></ROW><ROW><id>17630738</id><snippet>replace</snippet></ROW><ROW><id>17630738</id><snippet>x.replace(x[2], x[4])</snippet></ROW><ROW><id>17630738</id><snippet>x[0]</snippet></ROW><ROW><id>17630738</id><snippet>x[2]</snippet></ROW><ROW><id>17630738</id><snippet>x[4]</snippet></ROW><ROW><id>17630738</id><snippet>&gt;&gt;&gt; x = "abcde"
&gt;&gt;&gt; x = x.replace(x[0], x[2])    # == replace("a", "c")
&gt;&gt;&gt; x
'cbcde'
&gt;&gt;&gt; x = x.replace(x[2], x[4])    # == replace("c", "e")
&gt;&gt;&gt; x
'ebede'
</snippet></ROW><ROW><id>17630738</id><snippet>x = "abcdefghi"
x = list(x)
for i in range(len(x)):
    if i &lt; 4:
        x[i] = x[i+2]
        print "".join(x)
</snippet></ROW><ROW><id>17630738</id><snippet>cbcdefghi
cdcdefghi
cdedefghi
cdefefghi
</snippet></ROW><ROW><id>17630738</id><snippet>x = "abcdefghi"
x = list(x)
x[0:4] = x[2:6]
print "".join(x)
</snippet></ROW><ROW><id>17630738</id><snippet>cdefefghi 
</snippet></ROW><ROW><id>17630912</id><snippet>class C(A, B)</snippet></ROW><ROW><id>17630912</id><snippet>issubclass(C, A)</snippet></ROW><ROW><id>17630912</id><snippet>issubclass(C, B)</snippet></ROW><ROW><id>17630912</id><snippet>C().method_of_B()</snippet></ROW><ROW><id>17630912</id><snippet>A</snippet></ROW><ROW><id>17630912</id><snippet>C().attr_of_{a,b}</snippet></ROW><ROW><id>17630912</id><snippet>A</snippet></ROW><ROW><id>17630912</id><snippet>B</snippet></ROW><ROW><id>17630912</id><snippet>super()</snippet></ROW><ROW><id>17630912</id><snippet>C</snippet></ROW><ROW><id>17630912</id><snippet>A</snippet></ROW><ROW><id>17630912</id><snippet>ByteBuffer</snippet></ROW><ROW><id>17630912</id><snippet>UnicodeStream</snippet></ROW><ROW><id>17630918</id><snippet>a, b, c, d = range(1, 5)

result = (
    # First is 1
    a *
    # Then goes 2, result is 2 now
    b *
    # And then 3, result is 6
    c *
    # And 4, result should be 24
    d
)
</snippet></ROW><ROW><id>17631058</id><snippet>obj.attr</snippet></ROW><ROW><id>17631058</id><snippet>__hash__</snippet></ROW><ROW><id>17631058</id><snippet>obj.__class__.__dict__</snippet></ROW><ROW><id>17631058</id><snippet>__get__</snippet></ROW><ROW><id>17631058</id><snippet>attr.__get__(obj, obj.__class__)</snippet></ROW><ROW><id>17631058</id><snippet>obj.__dict__</snippet></ROW><ROW><id>17631058</id><snippet>obj</snippet></ROW><ROW><id>17631058</id><snippet>obj</snippet></ROW><ROW><id>17631058</id><snippet>__dict__</snippet></ROW><ROW><id>17631058</id><snippet>attr.__get__(None, obj.__class__)</snippet></ROW><ROW><id>17631058</id><snippet>obj.__class__.__dict__</snippet></ROW><ROW><id>17631058</id><snippet>&gt;&gt;&gt; b.__class__
&lt;class 'des.B'&gt;
&gt;&gt;&gt; b.__class__.__dict__
mappingproxy({'__init__': &lt;function B.__init__ at 0x7f2dacb4e290&gt;, '__doc__': None, '__weakref__': &lt;attribute '__weakref__' of 'B' objects&gt;, '__dict__': &lt;attribute '__dict__' of 'B' objects&gt;, 'a_oc': &lt;des.A object at 0x7f2dacb5de50&gt;, '__module__': 'des', '__qualname__': 'B'})
&gt;&gt;&gt; 
&gt;&gt;&gt; b.__dict__
{'a_ob': &lt;des.A object at 0x7f2dacb5df10&gt;}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17631058</id><snippet>b.a_oc</snippet></ROW><ROW><id>17631058</id><snippet>b.a_ob</snippet></ROW><ROW><id>17631058</id><snippet>des</snippet></ROW><ROW><id>17631074</id><snippet>static char *
isoformat_time(PyDateTime_DateTime *dt, char buffer[], int bufflen)
{
    int x;
    int us = DATE_GET_MICROSECOND(dt);

    x = PyOS_snprintf(buffer, bufflen,
                      "%02d:%02d:%02d",
                      DATE_GET_HOUR(dt),
                      DATE_GET_MINUTE(dt),
                      DATE_GET_SECOND(dt));
    assert(bufflen &gt;= x);
    if (us)
        x += PyOS_snprintf(buffer + x, bufflen - x, ".%06d", us);
    assert(bufflen &gt;= x);
    return buffer + x;
}
</snippet></ROW><ROW><id>17631136</id><snippet>def name(self, name):
    '''
    This function parses a name according to following rules - 

    &gt;&gt;&gt; name('Kshitiz Sharma')
    &lt;BLANKLINE&gt;

    '''
    pass
</snippet></ROW><ROW><id>17631136</id><snippet>    &gt;&gt;&gt; t = Test(); t.name('Kshitiz Sharma')
    &lt;BLANKLINE&gt;
</snippet></ROW><ROW><id>17631261</id><snippet>Traceback (most recent call last):
  File "C:\Python33\lib\site-packages\bottle.py", line 821, in _cast
    out = iter(out)
TypeError: 'bool' object is not iterable
</snippet></ROW><ROW><id>17631261</id><snippet>str(False)</snippet></ROW><ROW><id>17631261</id><snippet>(False,)</snippet></ROW><ROW><id>17631291</id><snippet>pcolor</snippet></ROW><ROW><id>17631291</id><snippet>pyplot</snippet></ROW><ROW><id>17631291</id><snippet>edgecolor</snippet></ROW><ROW><id>17631291</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.arange(6)
y = np.arange(6)

X, Y = np.meshgrid(x, y)

Z = np.random.rand(5, 5)

ax = plt.subplot(111, aspect='equal') # To make the cells square
ax.pcolor(X, Y, Z,
          edgecolor='white',          # Color of "padding" between cells
          linewidth=2)                # Width of "padding" between cells


plt.show()
</snippet></ROW><ROW><id>17631603</id><snippet>sudo pip install -U pyyaml nltk</snippet></ROW><ROW><id>17631603</id><snippet>apt-get install</snippet></ROW><ROW><id>17631603</id><snippet>pip install nltk</snippet></ROW><ROW><id>17631603</id><snippet>apt-get</snippet></ROW><ROW><id>17631603</id><snippet>--system-site-packages</snippet></ROW><ROW><id>17631605</id><snippet>try:
    os.remove(str(tempfilename))
except (OSError, NameError):
    pass
</snippet></ROW><ROW><id>17631657</id><snippet>self.fig.canvas.draw()
</snippet></ROW><ROW><id>17631657</id><snippet>text</snippet></ROW><ROW><id>17631657</id><snippet>axes</snippet></ROW><ROW><id>17631739</id><snippet>datetime.datetime</snippet></ROW><ROW><id>17631739</id><snippet>datetime.date</snippet></ROW><ROW><id>17631739</id><snippet>&gt;&gt;&gt; issubclass(datetime.datetime, datetime.date)
True
</snippet></ROW><ROW><id>17631739</id><snippet>datetime.datetime</snippet></ROW><ROW><id>17631739</id><snippet>isinstance(instance, datetime.date)</snippet></ROW><ROW><id>17631739</id><snippet>True</snippet></ROW><ROW><id>17631739</id><snippet>False</snippet></ROW><ROW><id>17631739</id><snippet>&gt;&gt;&gt; date = datetime.date(2011, 1, 1)
&gt;&gt;&gt; isinstance(date, datetime.datetime)
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17631857</id><snippet>&gt;&gt;&gt; data
   x  y
1  2  1
0  1  2
&gt;&gt;&gt; data.reset_index(drop=True)
   x  y
0  2  1
1  1  2
</snippet></ROW><ROW><id>17631857</id><snippet>inplace=True</snippet></ROW><ROW><id>17631857</id><snippet>iloc</snippet></ROW><ROW><id>17631857</id><snippet>&gt;&gt;&gt; data['x']
1    2
0    1
Name: x, dtype: int64
&gt;&gt;&gt; data['x'][0]
1
&gt;&gt;&gt; data['x'].iloc[0]
2
</snippet></ROW><ROW><id>17631921</id><snippet>forms.ModelForm</snippet></ROW><ROW><id>17631921</id><snippet>forms.Form</snippet></ROW><ROW><id>17631921</id><snippet>class ThisForm(forms.ModelForm):
    class Meta:
        model = TheModel
        fields = ['text']
</snippet></ROW><ROW><id>17631921</id><snippet>form.save()</snippet></ROW><ROW><id>17632004</id><snippet>from collections import OrderedDict

def merge(seq):
    d = OrderedDict()
    for k,v in seq:
        d.setdefault(k, []).append(v)
    result = [[k]+v for k,v in d.iteritems()]
    return result
</snippet></ROW><ROW><id>17632004</id><snippet>k</snippet></ROW><ROW><id>17632004</id><snippet>d</snippet></ROW><ROW><id>17632004</id><snippet>setdefault</snippet></ROW><ROW><id>17632004</id><snippet>v</snippet></ROW><ROW><id>17632004</id><snippet>d</snippet></ROW><ROW><id>17632004</id><snippet>&gt;&gt;&gt; s = [['a',10],['b',3],['c',4],['a',6],['d',11],['c',6],['a',7],['d',10]]
&gt;&gt;&gt; merge(s)
[['a', 10, 6, 7], ['b', 3], ['c', 4, 6], ['d', 11, 10]]
</snippet></ROW><ROW><id>17632229</id><snippet>cnt</snippet></ROW><ROW><id>17632229</id><snippet>cnt = cv2.findContours(dst.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
</snippet></ROW><ROW><id>17632229</id><snippet>cv2.findContours</snippet></ROW><ROW><id>17632229</id><snippet>cnt = cv2.findContours(dst.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)[0]
</snippet></ROW><ROW><id>17632229</id><snippet>tesseract</snippet></ROW><ROW><id>17632255</id><snippet>p =  multiprocessing.Process(target=gtk.main())
p.start()
</snippet></ROW><ROW><id>17632255</id><snippet>main</snippet></ROW><ROW><id>17632255</id><snippet>gtk.main()</snippet></ROW><ROW><id>17632255</id><snippet>None</snippet></ROW><ROW><id>17632255</id><snippet>gtk.main()
p =  multiprocessing.Process(target=None)
p.start()
</snippet></ROW><ROW><id>17632255</id><snippet>TERM</snippet></ROW><ROW><id>17632255</id><snippet>Process.terminate</snippet></ROW><ROW><id>17632255</id><snippet>daemon</snippet></ROW><ROW><id>17632255</id><snippet>mutliprocessing.Event</snippet></ROW><ROW><id>17632255</id><snippet>            while True:
                data = conn.recv(1024)
                if not data:
                    conn.close()
                    sys.exit()
                    break
                elif data != '':
                    conn.sendall(data)
                    break
</snippet></ROW><ROW><id>17632255</id><snippet>recv</snippet></ROW><ROW><id>17632255</id><snippet>sys.exit()</snippet></ROW><ROW><id>17632255</id><snippet>break</snippet></ROW><ROW><id>17632255</id><snippet>        data = s.recv(1024)
        while 1:
            if data != '':
                print 'Received', repr(data)
                break
</snippet></ROW><ROW><id>17632255</id><snippet>data</snippet></ROW><ROW><id>17632255</id><snippet>''</snippet></ROW><ROW><id>17632255</id><snippet>data</snippet></ROW><ROW><id>17632255</id><snippet>Server</snippet></ROW><ROW><id>17632255</id><snippet>Handler</snippet></ROW><ROW><id>17632255</id><snippet>__init__</snippet></ROW><ROW><id>17632255</id><snippet>    myserver = server.Server()
    try:
        p =  multiprocessing.Process(target=myserver.run)
</snippet></ROW><ROW><id>17632255</id><snippet>    msg = client.MyClass()
    p =  multiprocessing.Process(target=msg.run,args=([text]))
</snippet></ROW><ROW><id>17632469</id><snippet>data=[]
flag=False
with open('/tmp/test.txt','r') as f:
    for line in f:
        if line.startswith('&amp;'):
            flag=True
        if flag:
            data.append(line)
        if line.strip().endswith('!'):
            flag=False

print ''.join(data)  
</snippet></ROW><ROW><id>17632469</id><snippet>&amp;</snippet></ROW><ROW><id>17632469</id><snippet>!</snippet></ROW><ROW><id>17632469</id><snippet>with open('/tmp/test.txt','r') as f:
    data=''.join(f.readlines())    

print data[data.index('&amp;'):data.index('!')+1] 
</snippet></ROW><ROW><id>17632469</id><snippet>&amp;</snippet></ROW><ROW><id>17632469</id><snippet>!</snippet></ROW><ROW><id>17632469</id><snippet>import re

with open('/tmp/test.txt','r') as f:
    data=''.join(f.readlines())    

m=re.search(r'^(&amp;.*!)\s*?\n',data,re.S | re.M)    
if m: print m.group(1)   
</snippet></ROW><ROW><id>17632471</id><snippet>helloworld</snippet></ROW><ROW><id>17632471</id><snippet>libraries</snippet></ROW><ROW><id>17632471</id><snippet>app.yaml</snippet></ROW><ROW><id>17632471</id><snippet>app.yaml</snippet></ROW><ROW><id>17632471</id><snippet>Value 'your_app_id' for application does not match expression '^(?:(?:[a-z\d\-]{1,100}\~)?(?:(?!\-)[a-z\d\-\.]{1,100}:)?(?!-)[a-z\d\-]{0,99}[a-z\d])$'
  in "../apps/app.yaml", line 1, column 14
</snippet></ROW><ROW><id>17632471</id><snippet>application: your_app_id</snippet></ROW><ROW><id>17632471</id><snippet>application: your-app-id</snippet></ROW><ROW><id>17632482</id><snippet>.split(',')</snippet></ROW><ROW><id>17632482</id><snippet>int()</snippet></ROW><ROW><id>17632482</id><snippet>.sort()</snippet></ROW><ROW><id>17632482</id><snippet>key</snippet></ROW><ROW><id>17632482</id><snippet>scores = []
with open("scores.txt") as f:
    for line in f:
        name, score = line.split(',')
        score = int(score)
        scores.append((name, score))

scores.sort(key=lambda s: s[1])

for name, score in scores:
    print(name, score)
</snippet></ROW><ROW><id>17632482</id><snippet>print(name, score, sep=', ')</snippet></ROW><ROW><id>17632482</id><snippet>with open("scores.txt") as f:
    scores = [(name, int(score)) for name, score in (line.split(',') for line in f)]
</snippet></ROW><ROW><id>17632482</id><snippet>key=</snippet></ROW><ROW><id>17632482</id><snippet>.sort</snippet></ROW><ROW><id>17632482</id><snippet>key</snippet></ROW><ROW><id>17632482</id><snippet>lambda</snippet></ROW><ROW><id>17632482</id><snippet>def ret_score(pair):
    return pair[1]
</snippet></ROW><ROW><id>17632482</id><snippet>.sort(key=ret_score)</snippet></ROW><ROW><id>17632482</id><snippet>lambda &lt;arguments&gt; : &lt;return value&gt;
</snippet></ROW><ROW><id>17632482</id><snippet>lambda</snippet></ROW><ROW><id>17632482</id><snippet>&gt;&gt;&gt; square = lambda x: x**2 # takes x, returns x squared
&gt;&gt;&gt; square(3)
9
&gt;&gt;&gt; square(6)
36
</snippet></ROW><ROW><id>17632764</id><snippet>repr()</snippet></ROW><ROW><id>17632764</id><snippet>&gt;&gt;&gt; 1234567890
1234567890
&gt;&gt;&gt; type(1234567890)
&lt;type 'int'&gt;
&gt;&gt;&gt; 12345678901234567890
12345678901234567890L
&gt;&gt;&gt; type(12345678901234567890)
&lt;type 'long'&gt;
</snippet></ROW><ROW><id>17632764</id><snippet>repr()</snippet></ROW><ROW><id>17632764</id><snippet>sys.maxint</snippet></ROW><ROW><id>17632764</id><snippet>long</snippet></ROW><ROW><id>17632764</id><snippet>long</snippet></ROW><ROW><id>17632764</id><snippet>sys.maxint</snippet></ROW><ROW><id>17632764</id><snippet>-sys.maxint - 1</snippet></ROW><ROW><id>17632764</id><snippet>'L'</snippet></ROW><ROW><id>17632764</id><snippet>'l'</snippet></ROW><ROW><id>17632764</id><snippet>'L'</snippet></ROW><ROW><id>17632764</id><snippet>1l</snippet></ROW><ROW><id>17633046</id><snippet>for i, line in enumerate(stack):
    if line[0:10] == "0-1:24.3.0":
        print stack[i+1]
</snippet></ROW><ROW><id>17633046</id><snippet>stack</snippet></ROW><ROW><id>17633046</id><snippet>i</snippet></ROW><ROW><id>17633046</id><snippet>line</snippet></ROW><ROW><id>17633046</id><snippet>stack</snippet></ROW><ROW><id>17633147</id><snippet>strings = ["Hi Dude", "Dude", "ok Dude"]
dictionary = {}
for i, item in enumerate(strings):
    for word in item.split():
        try:
            dictionary[word].append(i)
        except KeyError:
            dictionary[word] = [i]
</snippet></ROW><ROW><id>17633147</id><snippet>print(dictionary)
# {'Dude': [0, 1, 2], 'Hi': [0], 'ok': [2]}
</snippet></ROW><ROW><id>17633341</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>17633383</id><snippet>a</snippet></ROW><ROW><id>17633383</id><snippet>b</snippet></ROW><ROW><id>17633383</id><snippet>type(a)</snippet></ROW><ROW><id>17633383</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>17633383</id><snippet>type(b)</snippet></ROW><ROW><id>17633383</id><snippet>list</snippet></ROW><ROW><id>17633383</id><snippet>a</snippet></ROW><ROW><id>17633383</id><snippet>d</snippet></ROW><ROW><id>17633383</id><snippet>dtype</snippet></ROW><ROW><id>17633383</id><snippet>e</snippet></ROW><ROW><id>17633383</id><snippet>|S1</snippet></ROW><ROW><id>17633383</id><snippet>dtype</snippet></ROW><ROW><id>17633383</id><snippet>dtype</snippet></ROW><ROW><id>17633383</id><snippet>|S1</snippet></ROW><ROW><id>17633383</id><snippet>dtype=object</snippet></ROW><ROW><id>17633383</id><snippet>e</snippet></ROW><ROW><id>17633383</id><snippet>f</snippet></ROW><ROW><id>17633383</id><snippet>dtype=|S1</snippet></ROW><ROW><id>17633383</id><snippet>a.shape</snippet></ROW><ROW><id>17633383</id><snippet>(3,)</snippet></ROW><ROW><id>17633383</id><snippet>a</snippet></ROW><ROW><id>17633383</id><snippet>e.shape</snippet></ROW><ROW><id>17633383</id><snippet>(3,3)</snippet></ROW><ROW><id>17633411</id><snippet>keycode = 65
char = chr(keycode)
print char
</snippet></ROW><ROW><id>17633753</id><snippet>place:place_id</snippet></ROW><ROW><id>17633753</id><snippet>import tweepy

auth = tweepy.OAuthHandler(..., ...)
auth.set_access_token(..., ...)

api = tweepy.API(auth)
places = api.geo_search(query="USA", granularity="country")
place_id = places[0].id

tweets = api.search(q="place:%s" % place_id)
for tweet in tweets:
    print tweet.text + " | " + tweet.place.name if tweet.place else "Undefined place"
</snippet></ROW><ROW><id>17633753</id><snippet>from twitter import *


t = Twitter(auth=OAuth(..., ..., ..., ...))

result = t.geo.search(query="USA", granularity="country")
place_id = result['result']['places'][0]['id']

result = t.search.tweets(q="place:%s" % place_id)
for tweet in result['statuses']:
    print tweet['text'] + " | " + tweet['place']['name'] if tweet['place'] else "Undefined place"
</snippet></ROW><ROW><id>17633886</id><snippet>import re
re.sub('&lt;a href="/name/.{9}', '', string)
</snippet></ROW><ROW><id>17633886</id><snippet>re.sub('&lt;a href="/name/[^&gt;]*&gt;',  '', string)
</snippet></ROW><ROW><id>17633887</id><snippet>pip freeze</snippet></ROW><ROW><id>17633887</id><snippet>PATH</snippet></ROW><ROW><id>17633935</id><snippet>&gt;&gt;&gt; [el for lst in [set(L) for L in list4] for el in lst].count('apples')
2
&gt;&gt;&gt; [el for lst in [set(L) for L in list4] for el in lst].count('oranges')
2
</snippet></ROW><ROW><id>17633935</id><snippet>&gt;&gt;&gt; list4sets = [set(L) for L in list4]
&gt;&gt;&gt; list4flat = [el for lst in list4sets for el in lst]
&gt;&gt;&gt; term = {el: list4flat.count(el) for el in list4flat}
&gt;&gt;&gt; term['apples']
2
&gt;&gt;&gt; term['oranges']
2
</snippet></ROW><ROW><id>17634006</id><snippet>[^?]</snippet></ROW><ROW><id>17634006</id><snippet>?</snippet></ROW><ROW><id>17634006</id><snippet>&gt;&gt;&gt; re.sub(r'\.[^?]*', '', strings)
'strings = iamcool?end'
</snippet></ROW><ROW><id>17634048</id><snippet>mylist = [['name','party','city','0','0','1'],['name','party','city','1','1','1']]

print sum([sum(map(int, item[3:])) for item in mylist])  # prints 4
</snippet></ROW><ROW><id>17634063</id><snippet>biglist   = [['A'], ['C', 'T'], ['A', 'T']]
smalllist = [['C'], ['T'], ['A', 'T']]

for i, group in enumerate(smalllist):
    for item in group:
        if item not in biglist[i]:
            biglist[i].append(item)
</snippet></ROW><ROW><id>17634063</id><snippet>print(biglist)
# [['A', 'C'], ['C', 'T'], ['A', 'T']]
</snippet></ROW><ROW><id>17634135</id><snippet>&gt;&gt;&gt; a = [1+4j, 7+0j, 3+6j, 9+2j, 5+8j]
&gt;&gt;&gt; b = [2+5j, 8+1j, 4+7j, 0+3j, 6+9j]
&gt;&gt;&gt; keyed_a = ((n.real, n) for n in a)
&gt;&gt;&gt; keyed_b = ((n.imag, n) for n in b)
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; sorted_ab = zip(*sorted(chain(keyed_a, keyed_b), key=lambda t: t[0]))[1]
&gt;&gt;&gt; sorted_ab
((1+4j), (8+1j), (3+6j), 3j, (5+8j), (2+5j), (7+0j), (4+7j), (9+2j), (6+9j))
</snippet></ROW><ROW><id>17634135</id><snippet>zip()</snippet></ROW><ROW><id>17634135</id><snippet>&gt;&gt;&gt; # ... as before up to 'from itertools import chain'
&gt;&gt;&gt; sorted_ab = list(zip(*sorted(chain(keyed_a, keyed_b), key=lambda t: t[0])))[1]
&gt;&gt;&gt; sorted_ab
((1+4j), (8+1j), (3+6j), 3j, (5+8j), (2+5j), (7+0j), (4+7j), (9+2j), (6+9j))
</snippet></ROW><ROW><id>17634218</id><snippet>self</snippet></ROW><ROW><id>17634218</id><snippet>class WebCorpus(object):
    def __init__(self):
        self._index = {}
        self._graph = {}
        self._ranks = {}
        self._corpusChanged = False

    def lookup(self, keyword):
        if keyword in self._index:
            return self._index[keyword]
        return None
</snippet></ROW><ROW><id>17634218</id><snippet>lookup</snippet></ROW><ROW><id>17634218</id><snippet>class WebCorpus(object):
    _index = {}
    _graph = {}
    _ranks = {}
    _corpusChanged = False

    def lookup(self, keyword):
        return self._index.get(keyword)
</snippet></ROW><ROW><id>17634287</id><snippet>dct.keys()</snippet></ROW><ROW><id>17634287</id><snippet>&gt;&gt;&gt; for sharedkey in dct1.keys() &amp; dct2.keys():  # intersection of two dictionaries
...     print(dct1[sharedkey], dct2[sharedkey])
</snippet></ROW><ROW><id>17634287</id><snippet>dct.viewkeys()</snippet></ROW><ROW><id>17634287</id><snippet>dct.keys()</snippet></ROW><ROW><id>17634287</id><snippet>list(dct)</snippet></ROW><ROW><id>17634321</id><snippet>lab1</snippet></ROW><ROW><id>17634321</id><snippet>lab1.gcd(10, 3)
</snippet></ROW><ROW><id>17634321</id><snippet>from lab1 import gcd
</snippet></ROW><ROW><id>17634321</id><snippet>import lab1.gcd as gcd
</snippet></ROW><ROW><id>17634356</id><snippet>\d</snippet></ROW><ROW><id>17634356</id><snippet>[0-9]</snippet></ROW><ROW><id>17634356</id><snippet>url(r'^[0-9]{2}/$', 'test.view'),
</snippet></ROW><ROW><id>17634356</id><snippet>٢</snippet></ROW><ROW><id>17634356</id><snippet>٤</snippet></ROW><ROW><id>17634356</id><snippet>&gt;&gt;&gt; u'٤'.isdigit()
True
&gt;&gt;&gt; u'٢'.isdigit()
True
</snippet></ROW><ROW><id>17634426</id><snippet>items = self-&gt;ob_item;
for (i = n; --i &gt;= where; )
    items[i+1] = items[i];
</snippet></ROW><ROW><id>17634613</id><snippet>isin</snippet></ROW><ROW><id>17634613</id><snippet>~</snippet></ROW><ROW><id>17634613</id><snippet>In [11]: B_notin_A = df['B'][~df['B'].isin(df['A'])]

In [12]: B_notin_A
Out[12]:
3    4
4    5
5    6
Name: B, dtype: int64
</snippet></ROW><ROW><id>17634613</id><snippet>concat</snippet></ROW><ROW><id>17634613</id><snippet>order</snippet></ROW><ROW><id>17634613</id><snippet>reset_index</snippet></ROW><ROW><id>17634613</id><snippet>In [13]: A_concat_B_notin_A = pd.concat([df['A'], B_notin_A]).order().reset_index(drop=True)

In [14]: A_concat_B_notin_A
Out[14]:
0    1
1    1
2    2
3    2
4    3
5    3
6    4
7    5
8    6
dtype: int64
</snippet></ROW><ROW><id>17634613</id><snippet>In [15]: pd.DataFrame({'A': A_concat_B_notin_A, 'B': df['B']})
Out[15]:
   A   B
0  1   1
1  1   2
2  2   3
3  2   4
4  3   5
5  3   6
6  4 NaN
7  5 NaN
8  6 NaN
</snippet></ROW><ROW><id>17634639</id><snippet>invoice_date = i.item_set.order_by('due_date')[0].due_date
</snippet></ROW><ROW><id>17634736</id><snippet>&gt;&gt;&gt; A = [['1', '2', '3', '4', '5', '6'], ['2', '3', '2', '3', '4']]
&gt;&gt;&gt; [list(map(int, x[2:])) for x in A]
[[3, 4, 5, 6], [2, 3, 4]]
</snippet></ROW><ROW><id>17634736</id><snippet>list()</snippet></ROW><ROW><id>17634776</id><snippet>:</snippet></ROW><ROW><id>17634776</id><snippet>.</snippet></ROW><ROW><id>17634776</id><snippet>2013-07-13T17:08:57.52Z</snippet></ROW><ROW><id>17634776</id><snippet>2013-07-13T17:08:57.52-00:00</snippet></ROW><ROW><id>17635037</id><snippet>'42Xmessage'.split('X')
</snippet></ROW><ROW><id>17635037</id><snippet>['42', 'message']
</snippet></ROW><ROW><id>17635107</id><snippet>name</snippet></ROW><ROW><id>17635107</id><snippet>def walk(soup):
    if hasattr(soup, "name"):
        for child in soup.children:
            walk(child)
        soup.append("Done with this " + soup.name)
</snippet></ROW><ROW><id>17635107</id><snippet>NavigableString</snippet></ROW><ROW><id>17635107</id><snippet>Comment</snippet></ROW><ROW><id>17635107</id><snippet>name</snippet></ROW><ROW><id>17635107</id><snippet>children</snippet></ROW><ROW><id>17635107</id><snippet>hasattr</snippet></ROW><ROW><id>17635107</id><snippet>bs4.element.Tag</snippet></ROW><ROW><id>17635206</id><snippet>subprocess.call</snippet></ROW><ROW><id>17635206</id><snippet>subprocess.call(['/usr/bin/php', 'script.php', json.dumps(dict(item))])
</snippet></ROW><ROW><id>17635206</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>17635206</id><snippet>fgets(STDIN)</snippet></ROW><ROW><id>17635360</id><snippet>range</snippet></ROW><ROW><id>17635360</id><snippet>x</snippet></ROW><ROW><id>17635360</id><snippet>sc.stats.binned_statistic([0, 1, 0, 0, 1], np.arange(5), 
                          statistic="count", bins=2, range=(0, 2.0))
</snippet></ROW><ROW><id>17635360</id><snippet>binned_statistic</snippet></ROW><ROW><id>17635360</id><snippet>binned_statistic_dd</snippet></ROW><ROW><id>17635360</id><snippet>sc.stats.binned_statistic([0, 1, 0, 0, 1], np.arange(5), 
                          statistic="count", bins=2, range=[(0, 2.0)])
</snippet></ROW><ROW><id>17635493</id><snippet>import random

X = range(N)

random.seed() # uses system time to initialize random number generator, or you can pass in a deterministic seed as an argument if you want

# code to use to generate K pairs
A = random.sample(X,2*K) # now you have a list of 2*K unique elements from 0 to N-1
pairs = zip(A[0:K],A[K:(2*K)]) # now you have your pairs
</snippet></ROW><ROW><id>17635493</id><snippet>pairs = []
M = N
if M % 2 == 1:
  M -= 1
while len(pairs) &lt; K:
  B = random.sample(X,M)
  A = zip(B[0:(M/2)],B[(M/2):M])
  pairs.extend(A)
pairs = pairs[0:K]
</snippet></ROW><ROW><id>17635519</id><snippet>Number,Name,EmailAddress
1,Jenny,jj@ymail.com
2,Josh,jh@ymail.com
3,Tony,ty@gmail.org
4,Jeff,jf@youtube.cc
</snippet></ROW><ROW><id>17635519</id><snippet>Number,Address  
4,123 Walnut St

1,17 Yerlington Wy
7,420 St B
</snippet></ROW><ROW><id>17635519</id><snippet>master_row[1]</snippet></ROW><ROW><id>17635519</id><snippet>not found</snippet></ROW><ROW><id>17635519</id><snippet>row</snippet></ROW><ROW><id>17635519</id><snippet>import csv

f1 = file('inFile.csv', 'rb')
f2 = file('inFile2.csv', 'rb')
f3 = file('outFile.csv', 'wb')

c1 = csv.reader(f1)
c2 = csv.reader(f2)
c3 = csv.writer(f3)

masterlist = [row for row in c2]
for hosts_row in c1:
    found = False
    for master_row in masterlist:
        results_row = hosts_row
        if hosts_row and master_row:
            if hosts_row[0] == master_row[0]:
                results_row.append(master_row[1])
                found = True
                break

    if not found:
        results_row.append('NO ENTRY')

    if any(hosts_row):
        c3.writerow(results_row)
</snippet></ROW><ROW><id>17635519</id><snippet>Number,Name,EmailAddress,Address  
1,Jenny,jj@ymail.com,17 Yerlington Wy
2,Josh,jh@ymail.com,NO ENTRY
3,Tony,ty@gmail.org,NO ENTRY
4,Jeff,jf@youtube.cc,123 Walnut St
</snippet></ROW><ROW><id>17635609</id><snippet>#!/usr/bin/python

import selenium
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.keys import Keys
import time

browser = webdriver.Firefox() # Get local session of firefox
browser.get("http://news.sina.com.cn/c/2013-07-11/175827642839.shtml ") # Load page
time.sleep(5) # Let the page load
try:
    element = browser.find_element_by_xpath("//span[contains(@class,'f_red')]") # get element on page
    print element.text # get element text
except NoSuchElementException:
    assert 0, "can't find f_red"
browser.close()
</snippet></ROW><ROW><id>17635656</id><snippet>import numpy as np

a = np.array([['a','1','2','3','4'],
              ['b','5','6','7','8'],
              ['c','9','10','11','12'],
              ['d','13','14','15','16']])

new_a = np.hstack((a[:2,], a[2:])).T
</snippet></ROW><ROW><id>17635656</id><snippet>&gt;&gt;&gt; new_a
array([['a', 'b'],
       ['1', '5'],
       ['2', '6'],
       ['3', '7'],
       ['4', '8'],
       ['c', 'd'],
       ['9', '13'],
       ['10', '14'],
       ['11', '15'],
       ['12', '16']], 
      dtype='|S2')
</snippet></ROW><ROW><id>17635825</id><snippet>insert</snippet></ROW><ROW><id>17635825</id><snippet>O(n)</snippet></ROW><ROW><id>17635825</id><snippet>append</snippet></ROW><ROW><id>17635825</id><snippet>O(1)</snippet></ROW><ROW><id>17635825</id><snippet>O(n)</snippet></ROW><ROW><id>17635825</id><snippet>rev1()</snippet></ROW><ROW><id>17635825</id><snippet>O(n)</snippet></ROW><ROW><id>17635825</id><snippet>rev2()</snippet></ROW><ROW><id>17635825</id><snippet>O(n&lt;sup&gt;2&lt;/sup&gt;)</snippet></ROW><ROW><id>17635825</id><snippet>rev2()</snippet></ROW><ROW><id>17635891</id><snippet>&gt;&gt;&gt; query = "AAAAA-AAACAAA-AAAAAA"
&gt;&gt;&gt; ref = "AA-AATAAAAAAATAAAAAA"
&gt;&gt;&gt; fixed = ''.join(r if q == '-' else '' if r == '-' else q
...     for q,r in zip(query, ref))
&gt;&gt;&gt; 
&gt;&gt;&gt; fixed
'AAAATAAACAAATAAAAAA'
</snippet></ROW><ROW><id>17635891</id><snippet>&gt;&gt;&gt; def fixer(q,r):
...     if q == '-':
...         return r
...     if r == '-':
...         return ''
...     return q
... 
&gt;&gt;&gt; fixed = ''.join(map(fixer, query, ref))
&gt;&gt;&gt; fixed
'AAAATAAACAAATAAAAAA'
</snippet></ROW><ROW><id>17635908</id><snippet>ModelForm</snippet></ROW><ROW><id>17635908</id><snippet>class DetailsForm(forms.ModelForm):
    class Meta:
        model = Detail

@login_required
def details(request, pk=None):
    customer = request.user.customer

    try:
        existing_detail = Detail.objects.get(customer_id=customer.id)
    except:
        existing_detail = None

    details_form = DetailsForm(instance = existing_detail)

    if request.method == 'POST':
        form = DetailsForm(request.POST, instance=existing_details)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect('/settings/details/')
    context = {
        'title':'details',
        'view':'detail',
        'form': form
    }
    return render(request, 'customers/detail.html', context)
</snippet></ROW><ROW><id>17636065</id><snippet>&gt;&gt;&gt; [i for i, s in enumerate(f_list) if '&gt;' in s]
[0, 2]
</snippet></ROW><ROW><id>17636150</id><snippet>A = ["40", "60", "80"]

B = ["10", "42", "100"]

newA = filter(lambda a: all([abs(int(a) - int(b)) &gt;= 5 for b in B]), A)
newB = filter(lambda b: all([abs(int(a) - int(b)) &gt;= 5 for a in A]), B)

print newA
print newB
</snippet></ROW><ROW><id>17636154</id><snippet>einsum()</snippet></ROW><ROW><id>17636154</id><snippet>import numpy as np
cimport numpy as np
import cython
DTYPE = np.float64
ctypedef np.float64_t DTYPE_t
cdef inline double d_abs (double a) : return a if a &gt;= 0 else -a

@cython.boundscheck(False)
@cython.wraparound(False)
def process_vectors (np.ndarray[DTYPE_t, ndim=2, mode="fortran"] nhat not None,
                     np.ndarray[DTYPE_t, ndim=2, mode="c"] m not None) :
    if nhat.shape[1] != m.shape[1] :
        raise ValueError ("Arrays must contain vectors of the same dimension")
    cdef Py_ssize_t imax = nhat.shape[0]
    cdef Py_ssize_t jmax = m.shape[0]
    cdef Py_ssize_t kmax = nhat.shape[1] # same as m.shape[1]
    cdef np.ndarray[DTYPE_t, ndim=1] S = np.zeros(imax, dtype=DTYPE)
    cdef Py_ssize_t i, j, k
    cdef DTYPE_t val, tmp
    for i in range(imax) :
        val = 0
        for j in range(jmax) :
            tmp = 0
            for k in range(kmax) :
                tmp += nhat[i,k] * m[j,k]
            val += d_abs(tmp)
        S[i] = val / jmax
    return S
</snippet></ROW><ROW><id>17636191</id><snippet>get_leafs</snippet></ROW><ROW><id>17636191</id><snippet>def get_leafs(tree_category, leaf_categories = None, depth = 0):
    if leaf_categories is None:
        leaf_categories = []
    …
</snippet></ROW><ROW><id>17636248</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; match = re.search(r'(\d+)\s*([+*/-])\s*(\d+)', '42 + 7') 
&gt;&gt;&gt; match.group(1)  # &lt;-- num1
'42'
&gt;&gt;&gt; match.group(2)  # &lt;-- operation
'+'
&gt;&gt;&gt; match.group(3)  # &lt;-- num2
'7'
</snippet></ROW><ROW><id>17636381</id><snippet>user</snippet></ROW><ROW><id>17636381</id><snippet>Entry</snippet></ROW><ROW><id>17636381</id><snippet>get()</snippet></ROW><ROW><id>17636383</id><snippet>random</snippet></ROW><ROW><id>17636383</id><snippet>Random</snippet></ROW><ROW><id>17636383</id><snippet>random.seed(a=None, version=2)
</snippet></ROW><ROW><id>17636383</id><snippet>from os import urandom as _urandom

class Random(_random.Random):

    def __init__(self, x=None):
        self.seed(x)

    def seed(self, a=None, version=2):
        if a is None:
            try:
                a = int.from_bytes(_urandom(32), 'big')
            except NotImplementedError:
                import time
                a = int(time.time() * 256) # use fractional seconds

# Create one instance, seeded from current time, and export its methods
# as module-level functions.  The functions share state across all uses
#(both in the user's code and in the Python libraries), but that's fine
# for most programs and is easier for the casual user than making them
# instantiate their own Random() instance.

_inst = Random()
</snippet></ROW><ROW><id>17636557</id><snippet>def application(environ, start_response):
    start_response('200 OK')
    return 'Hi there!'
</snippet></ROW><ROW><id>17636593</id><snippet>a = [[0] * 10 for i in range(10)]
</snippet></ROW><ROW><id>17636673</id><snippet>__add__</snippet></ROW><ROW><id>17636673</id><snippet>import re
class gf2pim(object):#Your classes should generally inherit from object


    def __init__(self, binary):
        '''__init__ is a standard special method used to initialize objects.  Here __init__
        will initialize a gf2pim object based on a binary representation.'''
        self.bin = binary

    @classmethod
    def from_string(cls, string):
        return cls(cls._string_to_binary(string))

    def to_string(self):
        raw = "{0:b}".format(self.bin); raw = str(raw[::-1]); g = [] #reverse binary string for enumeration
        g = [i for i,c in enumerate(raw) if c == '1']
        processed = "x**"+" + x**".join(map(str, g[::-1]))
        if len(g) == 0: return 0 #return 0 if list empty
        return processed  #returns result in gf(2) polynomial form

    @classmethod
    def id(cls, lst):
        """returns modulus 2 (1,0,0,1,1,....) for input lists"""
        return [int(lst[i])%2 for i in range(len(lst))]

    @classmethod
    def _list_to_int(self, lst):
        """converts list to integer for later use"""
        result = self.id(lst)
        return int(''.join(map(str,result)))

    @classmethod
    def _string_to_list(cls, string):
        """performs regex on raw string and converts to list"""
        c = [int(i.group(0)) for i in re.finditer(r'\d+', string)]
        return [1 if x in c else 0  for x in xrange(max(c), -1, -1)]

    @classmethod
    def _string_to_binary(cls, string):
        """converts to base 2; bina,binb are binary values like 110100101100....."""
        x = cls._string_to_list(string)
        a = cls._list_to_int(x)
        bina = int(str(a),2)
        return bina  #

    def __add__(self,other):
        """
        __add__ is another special method, and is used to override the + operator.  This will only 
        work for instances of gf2pim and its subclasses.

        a,b are GF(2) polynomials like x**7 + x**3 + x**0 ...; returns binary string"""
        return gf2pim(self.bin^other.bin)

    def __sub__(self,other):
        """
        __sub__ is the special method for overriding the - operator

        same as addition in GF(2)"""
        return self.add(other)

    def __str__(self):
        return self.to_string()

if __name__ == '__main__':
    a = gf2pim.from_string("x**14 + x**1 + x**0")
    b = gf2pim.from_string("x**6 + x**2 + x**1")
    smadd1 = a+b
    print "smadd1   ",smadd1        
</snippet></ROW><ROW><id>17636733</id><snippet>shelve</snippet></ROW><ROW><id>17636733</id><snippet>a = object() # an arbitrary object
db = shelve.open("text.db")
db['a'] = a
db['another_a'] = a
db['two_a_references'] = [a, a]
db.close()

db = shelve.open("text.db") # reopen the db
print(db['a'] is db['another_a']) # prints False
print(db['two_a_references'][0] is db['two_a_references'][1]) # prints True
</snippet></ROW><ROW><id>17636733</id><snippet>a</snippet></ROW><ROW><id>17636733</id><snippet>'a'</snippet></ROW><ROW><id>17636733</id><snippet>'another_a'</snippet></ROW><ROW><id>17636733</id><snippet>a</snippet></ROW><ROW><id>17636733</id><snippet>'two_a_references'</snippet></ROW><ROW><id>17636733</id><snippet>__eq__</snippet></ROW><ROW><id>17636733</id><snippet>pickle.dump</snippet></ROW><ROW><id>17636733</id><snippet>pickle.load</snippet></ROW><ROW><id>17636733</id><snippet>shelve</snippet></ROW><ROW><id>17636733</id><snippet>shelve</snippet></ROW><ROW><id>17636865</id><snippet>import pandas as pd
data = pd.DataFrame({'A': [-1,-1,-1], 'B': [-1,-1,-1], 'C': [0,0,1]})
my_list = ['A', 'C']
data[my_list].mean(axis=1)
</snippet></ROW><ROW><id>17636865</id><snippet>[sum(values)/float(len(my_list)) for values in zip(*[my_dict[key] for key in my_list])]
</snippet></ROW><ROW><id>17637226</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17637226</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; L = ['(9,133,000)', '']
&gt;&gt;&gt; print(-ast.literal_eval(L[0].replace(',','')))
-9133000
</snippet></ROW><ROW><id>17637248</id><snippet>default</snippet></ROW><ROW><id>17637248</id><snippet>_random_id = models.CharField(max_length=18, default=f)
</snippet></ROW><ROW><id>17637248</id><snippet>Q</snippet></ROW><ROW><id>17637248</id><snippet>@property
def random_id(self):
    return self._random_id
</snippet></ROW><ROW><id>17637248</id><snippet>_random_id</snippet></ROW><ROW><id>17637248</id><snippet>foo = Q()
foo._random_id
</snippet></ROW><ROW><id>17637248</id><snippet>random_id</snippet></ROW><ROW><id>17637279</id><snippet>from PIL import Image
from PIL.ExifTags import TAGS

def get_exif(fn):
    ret = {}
    i = Image.open(fn)
    info = i._getexif()
    for tag, value in info.items():
        decoded = TAGS.get(tag, tag)
        ret[decoded] = value
    return ret
</snippet></ROW><ROW><id>17637320</id><snippet>print(Line)
</snippet></ROW><ROW><id>17637320</id><snippet>Python 3.3.2 (v3.3.2:d047928ae3f6, May 16 2013, 00:06:53) [MSC v.1600 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print 1
  File "&lt;stdin&gt;", line 1
    print 1
          ^
SyntaxError: invalid syntax
&gt;&gt;&gt; print(1)
1
</snippet></ROW><ROW><id>17637356</id><snippet>yum install python27-devel
</snippet></ROW><ROW><id>17637399</id><snippet>for url in data:</snippet></ROW><ROW><id>17637611</id><snippet>__hash__</snippet></ROW><ROW><id>17637611</id><snippet>__eq__</snippet></ROW><ROW><id>17637611</id><snippet>KEY_MASK = 0xf0f0  # or whichever mask you need

class Key(object):
    __slots__ = 'num',
    def __init__(self, num):
        self.num = num
    def __hash__(self):
        return hash(self.num &amp; KEY_MASK)
    def __eq__(self, other):
        return self.num &amp; KEY_MASK == other.num &amp; KEY_MASK
    def __ne__(self, other):
        return not self == other
</snippet></ROW><ROW><id>17637728</id><snippet>cat if isinstance(cat, Animal) else None
</snippet></ROW><ROW><id>17637742</id><snippet>tcl_library</snippet></ROW><ROW><id>17637742</id><snippet>tk_library</snippet></ROW><ROW><id>17637816</id><snippet>ioctrl</snippet></ROW><ROW><id>17637816</id><snippet>sys.stdout.fileno()</snippet></ROW><ROW><id>17637816</id><snippet>termios</snippet></ROW><ROW><id>17637816</id><snippet>TIOCGWINSZ</snippet></ROW><ROW><id>17637816</id><snippet>s</snippet></ROW><ROW><id>17637825</id><snippet>    #!/usr/bin/env python
    """
    Draw a graph with matplotlib.
    You must have matplotlib for this to work.
    """
    try:
        import matplotlib.pyplot as plt
        import matplotlib.colors as colors
        import matplotlib.cm as cmx
        import numpy as np
   except:
        raise 

   import networkx as nx

   G=nx.path_graph(8)
  #Number of edges is 7
   values = range(7)
  # These values could be seen as dummy edge weights

   jet = cm = plt.get_cmap('jet') 
   cNorm  = colors.Normalize(vmin=0, vmax=values[-1])
   scalarMap = cmx.ScalarMappable(norm=cNorm, cmap=jet)
   colorList = []

   for i in range(7):
      colorVal = scalarMap.to_rgba(values[i])
      colorList.append(colorVal)


   nx.draw(G,edge_color=colorList)
   plt.savefig("simple_path.png") # save as png
   plt.show() # display
</snippet></ROW><ROW><id>17637835</id><snippet>  mysqldump -u $USERNAME --password=$PASSWORD -h $HOSTNAME -e --opt --skip-lock-tables  --skip-extended-insert -c $DATABASE &gt;hourlyFile
  diff weeklyFile hourlyFile &gt;hourlyFile.patch
  rm hourlyFile
</snippet></ROW><ROW><id>17637835</id><snippet>  cp weeklyFile hourlyFile
  patch hourlyFile &lt;hourlyFile.patch
</snippet></ROW><ROW><id>17637836</id><snippet>li == [array([4, 10])]
</snippet></ROW><ROW><id>17637836</id><snippet>isin</snippet></ROW><ROW><id>17637836</id><snippet>ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
</snippet></ROW><ROW><id>17637836</id><snippet>li == array([4, 10])
</snippet></ROW><ROW><id>17637836</id><snippet>li = df3[df3.col2 == 'D' ]['session'].unique()  # or values
</snippet></ROW><ROW><id>17637836</id><snippet>df[df['col2'] == 'D']['col1'].unique()
</snippet></ROW><ROW><id>17638018</id><snippet>class Product(Form):
    product = TextField('name')
    category = SelectField('category', choices=[(1,'one'),(2,'two')])

# create instance with predefined value:
form1 = Product(category=2)
# form1.product == &lt;input id="product" name="product" type="text" value=""&gt;
# form1.category == &lt;select id="category" name="category"&gt;
#                     &lt;option value="1"&gt;one&lt;/option&gt;
#                     &lt;option selected value="2"&gt;two&lt;/option&gt;
#                   &lt;/select&gt;
# from1.product.data == None
# form1.category.data == 2

# create own form if it need many times:
Product2 = type('Product2', (Product,), {
    'category': SelectField('category', default=2, choices=[(1,'one'),(2,'two')])
})
form2 = Product2()
# form2.product == &lt;input id="product" name="product" type="text" value=""&gt;
# form2.category == &lt;select id="category" name="category"&gt;
#                     &lt;option value="1"&gt;one&lt;/option&gt;
#                     &lt;option selected value="2"&gt;two&lt;/option&gt;
#                   &lt;/select&gt;
# from2.product.data == None
# form2.category.data == 2
</snippet></ROW><ROW><id>17638018</id><snippet>with app.test_request_context(method='POST'):
    form = Product(request.form)
    # form5.category.data == None

    form = Product(request.form, category=2)
    # form5.category.data == 2

with app.test_request_context(method='POST', data={'category': 1}):
    form = Product(request.form)
    # form5.category.data == 1

    form = Product(request.form, category=2)
    # form5.category.data == 1
</snippet></ROW><ROW><id>17638190</id><snippet>'total_quantity': fields.function(_get_total_quantity, type='float', method = True, string = 'Total Quantity', readonly = True),
</snippet></ROW><ROW><id>17638190</id><snippet>def _get_total_quantity(self, cr, uid, ids, field, args, context = None):
    res = {}
    for po in self.browse(cr, uid, ids, context = context):
        res[po.id] = sum([x.quantity for x in po.order_line])

    return res
</snippet></ROW><ROW><id>17638236</id><snippet>setup.py</snippet></ROW><ROW><id>17638236</id><snippet>pkg_resources</snippet></ROW><ROW><id>17638236</id><snippet>setuptools</snippet></ROW><ROW><id>17638236</id><snippet>setup.py</snippet></ROW><ROW><id>17638236</id><snippet>setup(
    name='foobar',
    version='1.0.0',
    # other attributes
)
</snippet></ROW><ROW><id>17638236</id><snippet>__init__.py</snippet></ROW><ROW><id>17638236</id><snippet>from pkg_resources import get_distribution

__version__ = get_distribution('foobar').version
</snippet></ROW><ROW><id>17638236</id><snippet>DistributionNotFound</snippet></ROW><ROW><id>17638236</id><snippet>from pkg_resources import get_distribution, DistributionNotFound
import os.path

try:
    _dist = get_distribution('foobar')
    if not __file__.startswith(os.path.join(_dist.location, 'foobar')):
        # not installed, but there is another version that *is*
        raise DistributionNotFound
except DistributionNotFound:
    __version__ = 'Please install this project with setup.py'
else:
    __version__ = _dist.version
</snippet></ROW><ROW><id>17638653</id><snippet>write</snippet></ROW><ROW><id>17638653</id><snippet>(fileobject, space_around_delimiters=True)</snippet></ROW><ROW><id>17638653</id><snippet>config = configparser.ConfigParser()
# do some configuration here

with open('settings.ini', 'w') as settings:
    config.write(settings)  # write to a file
</snippet></ROW><ROW><id>17638712</id><snippet># vim:ts=4:sw=4:expandtab
'''Simple chat server.

telnet, type your name, hit enter, then chat.  Invite
a friend to do the same.
'''
from diesel import Application, Service, until_eol, fire, first, send

def chat_server(addr):
    my_nick = until_eol().strip()
    while True:
        evt, data = first(until_eol=True, waits=['chat_message'])
        if evt == 'until_eol':
           fire('chat_message', (my_nick, data.strip()))
        else:
            nick, message = data
            send("&lt;%s&gt; %s\r\n"  % (nick, message))

app = Application()
app.add_service(Service(chat_server, 8000))
app.run()
</snippet></ROW><ROW><id>17639192</id><snippet>extract()</snippet></ROW><ROW><id>17639192</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup as BS
&gt;&gt;&gt; html = """&lt;div&gt;
...   some text &lt;br&gt;
...   &lt;span&gt; some more text &lt;/span&gt; &lt;br&gt;
...   &lt;span&gt; and more text &lt;/span&gt;
... &lt;/div&gt;"""
&gt;&gt;&gt; soup = BS(html)
&gt;&gt;&gt; for linebreak in soup.find_all('br'):
...     linebreak.extract()
... 
&lt;br/&gt;
&lt;br/&gt;
&gt;&gt;&gt; print soup.prettify()
&lt;html&gt;
 &lt;body&gt;
  &lt;div&gt;
   some text
   &lt;span&gt;
    some more text
   &lt;/span&gt;
   &lt;span&gt;
    and more text
   &lt;/span&gt;
  &lt;/div&gt;
 &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>17639316</id><snippet>()</snippet></ROW><ROW><id>17639316</id><snippet>def main():
    ...

def X():
    ...
</snippet></ROW><ROW><id>17639316</id><snippet>X()</snippet></ROW><ROW><id>17639316</id><snippet>main</snippet></ROW><ROW><id>17639316</id><snippet>def main():
    mydict = X()
    # You now have access to the dictionary you created in X
</snippet></ROW><ROW><id>17639316</id><snippet>return mydict</snippet></ROW><ROW><id>17639316</id><snippet>if __name__ == "__main__":
   f = open('test.txt','w+')
   output = main() # Notice how we assign the returned item to a variable
   f.write('line 1: ' + output[item1]) # We refer to the dictionary we just created.
   f.write('line 2: ' + output[item2]) # Same here
   f.close()
</snippet></ROW><ROW><id>17639316</id><snippet>dict</snippet></ROW><ROW><id>17639349</id><snippet>idleAnimation()</snippet></ROW><ROW><id>17639349</id><snippet>playerGroup.update()</snippet></ROW><ROW><id>17639349</id><snippet>Group.update</snippet></ROW><ROW><id>17639349</id><snippet>update()</snippet></ROW><ROW><id>17639349</id><snippet>update()</snippet></ROW><ROW><id>17639411</id><snippet>region</snippet></ROW><ROW><id>17639411</id><snippet>point</snippet></ROW><ROW><id>17639411</id><snippet>vor.point_region[point] == region</snippet></ROW><ROW><id>17639411</id><snippet>region</snippet></ROW><ROW><id>17639411</id><snippet>point</snippet></ROW><ROW><id>17639411</id><snippet>point = np.argwhere(vor.point_region == region)
</snippet></ROW><ROW><id>17639411</id><snippet>region_point</snippet></ROW><ROW><id>17639411</id><snippet>points</snippet></ROW><ROW><id>17639411</id><snippet>regions</snippet></ROW><ROW><id>17639411</id><snippet>region_point = np.argsort(vor.point_region)
points = region_point[regions-1]
</snippet></ROW><ROW><id>17639718</id><snippet>_fields_</snippet></ROW><ROW><id>17639718</id><snippet>&gt;&gt;&gt; import ctypes as ct
&gt;&gt;&gt; class Uni(ct.Union):
...     _fields_ = [('sh', ct.c_short), ('sh2', ct.c_short)]
... 
&gt;&gt;&gt; t = Uni()
&gt;&gt;&gt; t.sh = 0x0102
&gt;&gt;&gt; t.sh2
258
</snippet></ROW><ROW><id>17639754</id><snippet>tuple</snippet></ROW><ROW><id>17639754</id><snippet>append</snippet></ROW><ROW><id>17639754</id><snippet>Dataset = []</snippet></ROW><ROW><id>17639754</id><snippet>Dataset = ()</snippet></ROW><ROW><id>17639955</id><snippet>from tkinter import *
from tkinter import ttk

root_window = Tk()

estyle = ttk.Style()
estyle.element_create("plain.field", "from", "clam")
estyle.layout("EntryStyle.TEntry",
                   [('Entry.plain.field', {'children': [(
                       'Entry.background', {'children': [(
                           'Entry.padding', {'children': [(
                               'Entry.textarea', {'sticky': 'nswe'})],
                      'sticky': 'nswe'})], 'sticky': 'nswe'})],
                      'border':'2', 'sticky': 'nswe'})])
estyle.configure("EntryStyle.TEntry",
                 background="green", 
                 foreground="grey",
                 fieldbackground="black")
entry_v = StringVar()
entry = ttk.Entry(root_window, style="EntryStyle.TEntry", textvariable=entry_v)
entry.pack(padx=10, pady=10)
</snippet></ROW><ROW><id>17639955</id><snippet>img2 = PhotoImage("entryBorder", data="""
        R0lGODlhHQAdAOMNAAAAAAQGCAgLERkfLR0mODBFZTFFZTNIajtTezxTez1XgD5XgU
        Fch////////////ywAAAAAHQAdAAAEbHCQg5i9OGt0iFRaKGLKxBgCoK5s6woGc4Cp
        a9+AwFQM7ruYn1AVHP6KRhwyaVsyW87nKioFUKXXZ5a5TXaN32FYOD5eqsAzmlX2tZ
        XqNZGxYATkgAD9wCjUqgIFMgR1I4YZCx4TCYeGCR0DEQA7""")

oestyle = ttk.Style()
oestyle.element_create("blueborder", "image", "entryBorder",
                                   border=3, sticky="nsew")
oestyle.layout("OEntryStyle.TEntry",
               [('Entry.blueborder', {'children': [(
                   'Entry.padding', {'children': [(
                     'Entry.textarea', {'sticky': 'nswe'})],
                      'sticky': 'nswe'})], 'sticky': 'nswe'})])
oestyle.configure("OEntryStyle.TEntry",
                 background="black",
                  foreground="grey")
oentry_v = StringVar()
oentry = ttk.Entry(root_window, style="OEntryStyle.TEntry", textvariable=oentry_v)
oentry.pack(padx=10, pady=10)
</snippet></ROW><ROW><id>17639955</id><snippet>import base64

with open('otherframeBorder.gif', 'rb') as f:
    encoded = base64.encodestring(f.read())
    print(encoded.decode('latin1'))
</snippet></ROW><ROW><id>17640299</id><snippet>del</snippet></ROW><ROW><id>17640299</id><snippet>returned_value = fun()
del returned_value
</snippet></ROW><ROW><id>17640299</id><snippet>__del__</snippet></ROW><ROW><id>17640299</id><snippet>with</snippet></ROW><ROW><id>17640299</id><snippet>with</snippet></ROW><ROW><id>17640299</id><snippet># "with" statement will call the __enter__ method of self.lock,
# which will block until self.lock can be locked
with self.lock:
    # do thread-synchronized stuff here

# self.lock is automatically released here - at then end of
# the "with" block, the lock's __exit__ method is called, which
# releases the lock. This will get called even if the block is 
# exited by a raised exception
</snippet></ROW><ROW><id>17640370</id><snippet>time.sleep</snippet></ROW><ROW><id>17640380</id><snippet>all_events = []
for &lt;loop over events from server&gt;:
    all_events.append((dateutil.parser.parse(event['start']['date']), event['summary']))
</snippet></ROW><ROW><id>17640380</id><snippet>from datetime import datetime, timedelta

max_td = timedelta(days=30)
now = datetime.now()

# Remove events that are too far into the future
filtered_events = filter(lambda e: e[0] - now &lt;= max_td, all_events)

# Sort events in ascending order of start time
filtered_events.sort()
</snippet></ROW><ROW><id>17640474</id><snippet>time_a = time.time()

# ... some operations ...

ten_minutes =  10 * 60
time_span = time.time() - time_a
if time_span &gt; ten_minutes:
    # time span is larger than 10 minutes.
</snippet></ROW><ROW><id>17640475</id><snippet>','</snippet></ROW><ROW><id>17640475</id><snippet>', '</snippet></ROW><ROW><id>17640475</id><snippet>&gt;&gt;&gt; foo()
{"Hermione": "hippogryph", "Harry": "broomstick"}
</snippet></ROW><ROW><id>17640475</id><snippet>&gt;&gt;&gt; foo() == {"Hermione": "hippogryph", "Harry": "broomstick"}
True
</snippet></ROW><ROW><id>17640682</id><snippet>for i in x:
    print i
</snippet></ROW><ROW><id>17640718</id><snippet>MakeCellVisible( int row, int col )</snippet></ROW><ROW><id>17640800</id><snippet>request.form.keys()[0]</snippet></ROW><ROW><id>17640800</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>17640800</id><snippet>request.form</snippet></ROW><ROW><id>17640853</id><snippet>text</snippet></ROW><ROW><id>17640853</id><snippet>annotate</snippet></ROW><ROW><id>17640853</id><snippet>Axes</snippet></ROW><ROW><id>17640853</id><snippet>transform</snippet></ROW><ROW><id>17640853</id><snippet>from mpl_toolkits.axes_grid.axislines import SubplotZero
from matplotlib.transforms import BlendedGenericTransform
import matplotlib.pyplot as plt
import numpy

fig = plt.figure(1)
ax = SubplotZero(fig, 111)
fig.add_subplot(ax)

ax.axhline(linewidth=2.0, color="black")
ax.axvline(linewidth=2.0, color="black")

ax.set_xticks([])
ax.set_yticks([])

ax.text(0, 1.05, 'y', transform=BlendedGenericTransform(ax.transData, ax.transAxes), ha='center')
ax.text(1.05, 0, 'x', transform=BlendedGenericTransform(ax.transAxes, ax.transData), va='center')

for direction in ["xzero", "yzero"]:
    ax.axis[direction].set_axisline_style("-|&gt;")
    ax.axis[direction].set_visible(True)

for direction in ["left", "right", "bottom", "top"]:
    ax.axis[direction].set_visible(False)

x = numpy.linspace(-0.5, 1., 100)
ax.plot(x, numpy.sin(x*numpy.pi), linewidth=2.0)

plt.show()
</snippet></ROW><ROW><id>17641061</id><snippet>&gt;&gt;&gt; def foo():
...     ((var,),) = t
... 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_GLOBAL              0 (t)
              3 UNPACK_SEQUENCE          1
              6 UNPACK_SEQUENCE          1
              9 STORE_FAST               0 (var)
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE        
</snippet></ROW><ROW><id>17641061</id><snippet>t</snippet></ROW><ROW><id>17641061</id><snippet>var</snippet></ROW><ROW><id>17641061</id><snippet>UNPACK_SEQUENCE</snippet></ROW><ROW><id>17641078</id><snippet>itertools</snippet></ROW><ROW><id>17641078</id><snippet>from itertools import izip_longest

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>17641078</id><snippet>for i, group in enumerate(grouper(input_tweets, 5000)):
    with open('outputbatch_{}.json'.format(i), 'w') as outputfile:
        json.dump(list(group), outputfile)
</snippet></ROW><ROW><id>17641267</id><snippet>nums</snippet></ROW><ROW><id>17641267</id><snippet>tri</snippet></ROW><ROW><id>17641267</id><snippet>append</snippet></ROW><ROW><id>17641267</id><snippet>nums</snippet></ROW><ROW><id>17641267</id><snippet>tri</snippet></ROW><ROW><id>17641267</id><snippet>num</snippet></ROW><ROW><id>17641267</id><snippet>num2</snippet></ROW><ROW><id>17641267</id><snippet>num</snippet></ROW><ROW><id>17641274</id><snippet>test</snippet></ROW><ROW><id>17641274</id><snippet>method_test</snippet></ROW><ROW><id>17641274</id><snippet>test_method</snippet></ROW><ROW><id>17641330</id><snippet>song</snippet></ROW><ROW><id>17641330</id><snippet>startGUI</snippet></ROW><ROW><id>17641330</id><snippet>run</snippet></ROW><ROW><id>17641330</id><snippet>song</snippet></ROW><ROW><id>17641330</id><snippet>from Tkinter import *

def run(song):
    print song.get()

def startGUI():
    root = Tk()
    songLabel = Label(root, text="Enter the song:")
    song = Entry(root)
    submit = Button(root, text="Download", command=lambda: run(song))

    songLabel.pack()
    song.pack()
    submit.pack()
    root.mainloop()

if __name__ == "__main__":
    startGUI()
</snippet></ROW><ROW><id>17641330</id><snippet>from Tkinter import *

def startGUI():
    def run():
        print song.get()
    root = Tk()
    songLabel = Label(root, text="Enter the song:")
    song = Entry(root)
    submit = Button(root, text="Download", command=run)

    songLabel.pack()
    song.pack()
    submit.pack()
    root.mainloop()

if __name__ == "__main__":
    startGUI()
</snippet></ROW><ROW><id>17641330</id><snippet>from Tkinter import *

class SongDownloader:
    def __init__(self, parent):
        songLabel = Label(root, text="Enter the song:")
        self.song = Entry(root)
        submit = Button(root, text="Download", command=self.run)
        songLabel.pack()
        self.song.pack()
        submit.pack()

    def run(self):
        print self.song.get()

if __name__ == "__main__":
    root = Tk()
    SongDownloader(root)
    root.mainloop()
</snippet></ROW><ROW><id>17641355</id><snippet>...
def get(self):
    self.write("Hello, world")
    light_the_leds()
...
</snippet></ROW><ROW><id>17641355</id><snippet>light_the_leds</snippet></ROW><ROW><id>17641355</id><snippet>light_the_leds</snippet></ROW><ROW><id>17641658</id><snippet>__eq__</snippet></ROW><ROW><id>17641658</id><snippet>__hash__</snippet></ROW><ROW><id>17641658</id><snippet>__hash__</snippet></ROW><ROW><id>17641658</id><snippet>__hash__</snippet></ROW><ROW><id>17641658</id><snippet>class Foo(object):
    def __eq__(self, other):
        return type(self) == type(other)
    def __hash__(self):
        return 1
</snippet></ROW><ROW><id>17641658</id><snippet>in</snippet></ROW><ROW><id>17641658</id><snippet>True</snippet></ROW><ROW><id>17641658</id><snippet>__eq__</snippet></ROW><ROW><id>17641658</id><snippet>def __eq__(self, other):
    return self.number == other.number
</snippet></ROW><ROW><id>17641658</id><snippet>def __eq__(self, other):
    return type(self) == type(other) and self.number == other.number
</snippet></ROW><ROW><id>17641658</id><snippet>class Foo:
    def __eq__(self, other):
        return hasattr(other, '_equals_foo') and other._equals_foo(self)
    def _equals_foo(self, other):
        return self.number == other.number
    def _equals_bar(self, other):
        return False # Foo never equals Bar
class Bar:
    def __eq__(self, other):
        return hasattr(other, '_equals_bar') and other._equals_bar(self)
    def _equals_foo(self, other):
        return False # Foo never equals Bar
    def _equals_bar(self, other):
        return True # Bar always equals Bar
</snippet></ROW><ROW><id>17641658</id><snippet>a</snippet></ROW><ROW><id>17641658</id><snippet>b</snippet></ROW><ROW><id>17641658</id><snippet>a == b</snippet></ROW><ROW><id>17641681</id><snippet>&gt;&gt;&gt; A = ['12', '15', '20', '30']
&gt;&gt;&gt; [x for x in A if len(A) == 1 or filter(lambda y: 0 &lt; abs(int(y) - int(x)) &lt;= 5,A)]
['12', '15', '20']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17641911</id><snippet>thing = input()
# If you're using python 2.X, you should use raw_input instead:
# thing = raw_input()
</snippet></ROW><ROW><id>17641911</id><snippet>input</snippet></ROW><ROW><id>17641911</id><snippet>distance_from_zero(thing)</snippet></ROW><ROW><id>17641911</id><snippet>thing</snippet></ROW><ROW><id>17641911</id><snippet>thing = 42
distance_from_zero(thing)
# or
distance_from_zero(42)
</snippet></ROW><ROW><id>17641984</id><snippet>select</snippet></ROW><ROW><id>17641984</id><snippet>rl , wl , el = select( [ serversocket , clientsocket ] , [] , [] );
for e in rl:
  if e == serversocket:
    acceptConnection( serversocket );
  else:
    readFromClient( clientsocket );
</snippet></ROW><ROW><id>17641989</id><snippet>rsa.encrypt</snippet></ROW><ROW><id>17641989</id><snippet>rsa.encrypt(4L,"")
</snippet></ROW><ROW><id>17641989</id><snippet>4L</snippet></ROW><ROW><id>17641989</id><snippet>hex(rsa.encrypt(4L, '')[0]).rstrip('L').lstrip(0x)
'31bf11047cbe9115541e29acb5046d98f2a9bdc44d4768668e9119f8eca24bf24dfc4ac070950734e819675f93e1809859b750df63e8bc71afc7c83edfc6d2f59f495c8e378e0633f07e21672a7e862cfa77a6aede48075dec0cd2b1d8c016dade779f1ea8bd9ffa8ef314c4e391b0f5860cf06cb0f991d2875c49722e98b94f'
</snippet></ROW><ROW><id>17641989</id><snippet>rsa.encrypt(input, '')[0].encode('hex')</snippet></ROW><ROW><id>17641989</id><snippet>struct.pack('b', 4)</snippet></ROW><ROW><id>17642128</id><snippet>__name__</snippet></ROW><ROW><id>17642128</id><snippet>__name__</snippet></ROW><ROW><id>17642128</id><snippet>MyClass</snippet></ROW><ROW><id>17642128</id><snippet>__name__</snippet></ROW><ROW><id>17642128</id><snippet>A</snippet></ROW><ROW><id>17642128</id><snippet>B</snippet></ROW><ROW><id>17642128</id><snippet>MyClass</snippet></ROW><ROW><id>17642128</id><snippet>__main__</snippet></ROW><ROW><id>17642128</id><snippet>__main__.MyClass</snippet></ROW><ROW><id>17642128</id><snippet>__name__</snippet></ROW><ROW><id>17642128</id><snippet>__name__</snippet></ROW><ROW><id>17642128</id><snippet>type</snippet></ROW><ROW><id>17642128</id><snippet>__name__</snippet></ROW><ROW><id>17642128</id><snippet>&gt;&gt;&gt; A = type('MyClass', (object,), {})
&gt;&gt;&gt; MyClass
Traceback (most recent call last):
  File "&lt;pyshell#3&gt;", line 1, in &lt;module&gt;
    MyClass
NameError: name 'MyClass' is not defined
</snippet></ROW><ROW><id>17642128</id><snippet>MyClass</snippet></ROW><ROW><id>17642128</id><snippet>type</snippet></ROW><ROW><id>17642128</id><snippet>MyClass</snippet></ROW><ROW><id>17642128</id><snippet>__name__</snippet></ROW><ROW><id>17642148</id><snippet>'1.10'</snippet></ROW><ROW><id>17642148</id><snippet>1.10</snippet></ROW><ROW><id>17642148</id><snippet>self.t1.delete('1.10') #deletes 'y' (line 1, column 10)
</snippet></ROW><ROW><id>17642160</id><snippet>&gt;&gt;&gt; M, N = 3, 4
&gt;&gt;&gt; matrix = [
    [i * j for j in range(M)]
    for i in range(N)
]
&gt;&gt;&gt; matrix
[[0, 0, 0], [0, 1, 2], [0, 2, 4], [0, 3, 6]]
</snippet></ROW><ROW><id>17642160</id><snippet>itertools.product</snippet></ROW><ROW><id>17642160</id><snippet>import itertools

for row_combination in itertools.product(*matrix):
    print row_combination
</snippet></ROW><ROW><id>17642160</id><snippet>(0, 0, 0, 0)
(0, 0, 0, 3)
(0, 0, 0, 6)
...
(0, 2, 4, 3)
(0, 2, 4, 6)
</snippet></ROW><ROW><id>17642299</id><snippet>custA</snippet></ROW><ROW><id>17642299</id><snippet>custA</snippet></ROW><ROW><id>17642299</id><snippet>ordsA</snippet></ROW><ROW><id>17642299</id><snippet>pyplot.plot(custA_result_list);
pyplot.plot(ordsA_result_list);
pyplot.show()
</snippet></ROW><ROW><id>17642299</id><snippet>pyplot.scatter(custA_result_list, ordsA_result_list)
# or
pyplot.plot(custA_result_list, ordsA_result_list, 'o')

## THIS WILL ONLY WORK IF BOTH SEQUENCES HAVE SAME LENGTH! (e.g. 365 elements each)
</snippet></ROW><ROW><id>17642299</id><snippet>weekdays = [1,2,3,4,5, 8,9,10,11,12, 15,16,17,18,19,  22, ...] # len(weekdays) ~ 260

pyplot.plot(weekdays, custA_result_list);
pyplot.plot(weekdays, ordsA_result_list);
pyplot.show()
</snippet></ROW><ROW><id>17642299</id><snippet>csv</snippet></ROW><ROW><id>17642299</id><snippet>with open('file.csv') as csv_in:
    content = [line.strip().split(',') for line in csv_in]
</snippet></ROW><ROW><id>17642299</id><snippet>.xls</snippet></ROW><ROW><id>17642299</id><snippet>.xlsx</snippet></ROW><ROW><id>17642299</id><snippet>xlrd</snippet></ROW><ROW><id>17642299</id><snippet>pip install xlrd</snippet></ROW><ROW><id>17642386</id><snippet>a = word[-6:]
</snippet></ROW><ROW><id>17642386</id><snippet>'school'</snippet></ROW><ROW><id>17642587</id><snippet>log</snippet></ROW><ROW><id>17642587</id><snippet>Main</snippet></ROW><ROW><id>17642587</id><snippet>log</snippet></ROW><ROW><id>17642587</id><snippet>Update</snippet></ROW><ROW><id>17642587</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>17642587</id><snippet>/Scripts</snippet></ROW><ROW><id>17642587</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>17642765</id><snippet>subprocess.stdin.write</snippet></ROW><ROW><id>17642765</id><snippet>communicate</snippet></ROW><ROW><id>17642765</id><snippet>from subprocess import Popen, PIPE

numcomms = Popen('numbers.exe', stdout=PIPE, stdin=PIPE, stderr=PIPE)
out, err = numcomms.communicate("2\n6\n")
</snippet></ROW><ROW><id>17642765</id><snippet>out</snippet></ROW><ROW><id>17642765</id><snippet>out.splitlines()</snippet></ROW><ROW><id>17642782</id><snippet>'test'</snippet></ROW><ROW><id>17642782</id><snippet>correct_dictionary_v1</snippet></ROW><ROW><id>17642782</id><snippet>test_correct_dictionary_v1</snippet></ROW><ROW><id>17642782</id><snippet>correct_dictionary_v2</snippet></ROW><ROW><id>17642782</id><snippet>test_correct_dictionary_v2</snippet></ROW><ROW><id>17642968</id><snippet>__tBin</snippet></ROW><ROW><id>17642968</id><snippet>self.__tests['i2c_transfer']['80'] += 1</snippet></ROW><ROW><id>17642968</id><snippet>class Test:
    def __init__(self):
        self.__tBin = {'80':0, '70':0, '60':0, '50':0,'40':0,
                  '30':0, '20':0, '10':0, '0':0,
                  '-10':0, '-20':0, '-30':0, '-40':0}
        self.__tests = {'i2c_transfer':self.__tBin}
</snippet></ROW><ROW><id>17643056</id><snippet>animation</snippet></ROW><ROW><id>17643056</id><snippet>import numpy as np
from matplotlib import pyplot as plt
from matplotlib import animation

import time

# First set up the figure, the axis, and the plot element we want to animate
fig = plt.figure()
ax = fig.add_subplot(111)    
ax.set_xlim([0, 2 *np.pi])
ax.set_ylim([-1, 1])

th = linspace(0, 2 * np.pi, 1000)

line, = ax.plot([],[],'b-', animated=True)
line.set_xdata(th)
# getFrame() makes a call to the CCD frame buffer and retrieves the most recent frame

# animation function
def update(data):    
    line.set_ydata(data)

    return line,

def data_gen():
    t = 0
    while True:
        t +=1
        yield np.sin(th + t * np.pi/100)

# call the animator
anim = animation.FuncAnimation(fig, update, data_gen, interval=10, blit=True)
</snippet></ROW><ROW><id>17643264</id><snippet>s1[:p] + s2 + s1[p:]</snippet></ROW><ROW><id>17643264</id><snippet>s1[:p] + s1[p+n:]</snippet></ROW><ROW><id>17643264</id><snippet>&gt;&gt;&gt; s1 = 'hello world'
&gt;&gt;&gt; s2 = 'xyz'
&gt;&gt;&gt; p = 3
&gt;&gt;&gt; s1[:p] + s2 + s1[p:]
'helxyzlo world'
&gt;&gt;&gt; n = 2
&gt;&gt;&gt; s1[:p] + s1[p+n:]
'hel world'
</snippet></ROW><ROW><id>17643666</id><snippet>def my_function():
...     """Do nothing, but document it.
...
...     No, really, it doesn't do anything.
...     """
...     pass
...
&gt;&gt;&gt; print my_function.__doc__
Do nothing, but document it.

    No, really, it doesn't do anything. 
</snippet></ROW><ROW><id>17643692</id><snippet>class Test:
count = 0
def __init__(self):
    self.a = ["1","2"]
def __repr__(self):
    b = self.a[self.__class__.count]
    self.__class__.count += 1
    return b

&gt;&gt;&gt; a = Test()
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; print a, b
1 2
</snippet></ROW><ROW><id>17643708</id><snippet>frequencyList = []
for word in passwordslist:
    frequencyList += [word[x:x+N] for x in xrange(len(word)-N+1)]
</snippet></ROW><ROW><id>17643708</id><snippet>frequencyList = [
    word[x:x+N]
    for word in passwordslist
    for x in xrange(len(word)-N+1)
]
</snippet></ROW><ROW><id>17643870</id><snippet>SQL prepared statements</snippet></ROW><ROW><id>17643870</id><snippet>format</snippet></ROW><ROW><id>17643870</id><snippet>SQL injection</snippet></ROW><ROW><id>17643870</id><snippet>&gt;&gt;&gt; log = """\
... "ID","PARENT_ID","URI","FILE_PATH","NAME","METHOD","STATUS","SIZE","TYPE","EXT","LAST_MODIFIED","EXTENSION_MISMATCH","MD5_HASH","FORMAT_COUNT","PUID","MIME_TYPE","FORMAT_NAME","FORMAT_VERSION"
... "1","","file:/C:/jay/NZ%20Business%20Roundtable_Download_13Feb2013,%20400%20Access/","C:\jay\NZ Business Roundtable_Download_13Feb2013, 400 Access","NZ Business Roundtable_Download_13Feb2013, 400 Access",,"Done","","Folder",,"2013-06-28T11:31:36","false",,"",,"","",""
... "2","1","file:/C:/jay/NZ%20Business%20Roundtable_Download_13Feb2013,%20400%20Access/1993/","C:\jay\NZ Business Roundtable_Download_13Feb2013, 400 Access\1993","1993",,"Done","","Folder",,"2013-06-28T11:31:36","false",,"",,"","",""
... """
</snippet></ROW><ROW><id>17643870</id><snippet>&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; logfile = StringIO.StringIO(log)
</snippet></ROW><ROW><id>17643870</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; csvreader = csv.reader(logfile)
&gt;&gt;&gt; fields = csvreader.next()
&gt;&gt;&gt; 
&gt;&gt;&gt; table = 'mytable'
&gt;&gt;&gt; 
&gt;&gt;&gt; fields_fmt = ', '.join([ '`%s`' % f for f in fields ])
&gt;&gt;&gt; values_fmt = ', '.join(['%s'] * len(fields))
&gt;&gt;&gt; query = "INSERT INTO `atl`.`{0}` ({1}) VALUES ({2})".format(
... #        self.table, fields_fmt, values_fmt)
...         table, fields_fmt, values_fmt)
&gt;&gt;&gt; query
'INSERT INTO `atl`.`mytable` (`ID`, `PARENT_ID`, `URI`, `FILE_PATH`, `NAME`, `METHOD`, `STATUS`, `SIZE`, `TYPE`, `EXT`, `LAST_MODIFIED`, `EXTENSION_MISMATCH`, `MD5_HASH`, `FORMAT_COUNT`, `PUID`, `MIME_TYPE`, `FORMAT_NAME`, `FORMAT_VERSION`) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'
</snippet></ROW><ROW><id>17643870</id><snippet>ingest_row</snippet></ROW><ROW><id>17643870</id><snippet>def ingest_row(self, row):
    try:
        self.cur.execute(query, row)
        self.mydb.commit()
    except:
        print query
        quit()
</snippet></ROW><ROW><id>17643870</id><snippet>for row in csvreader:
    ingest_row(row)
</snippet></ROW><ROW><id>17643876</id><snippet>dict={"data": dict1["data"] +dict2["data"]}
</snippet></ROW><ROW><id>17643892</id><snippet>class ImageAccounting(models.Model):
    fk = models.IntegerField()
    model_name = models.CharField(max_length=100)
    md5 = models.CharField(max_length=32)

class SomeModel(models.Model)
    ...
    image = models.ImageField(upload_to='somewhere')
    ...
    def image_signature(self):
        md5 = hashlib.md5(self.image.file.read()).hexdump()
        model_name = self.__name__
        return md5, model_name

    def save(self, *args, *kwargs):
        super(SomeModel, this).save(*args, **kwargs)
        md5, model_name = self.image_signature()
        try:
            i = ImageAccounting.objects.get(fk=self.pk, md5=md5, model_name=model_name)
        except ImageAccounting.DoesNotExist:
            i = ImageAccounting(fk=self.pk, md5=md5, model_name=model_name)
            i.save()

    def delete(self, *args, **kwargs):
        super(SomeModel, this).delete(*args, **kwargs)
        md5, model_name = self.image_signature()
        ImageAccounting.objects.filter(fk=self.pk, md5=md5, model_name=model_name)\
              .delete()

    def copies(self):
        md5, _ = self.image_signature()
        return ImageAccounting.objects.filter(md5=md5)
</snippet></ROW><ROW><id>17643892</id><snippet>models.ManyToManyField('self')</snippet></ROW><ROW><id>17643892</id><snippet>duplicates = models.ManyToManyField('self', null=True)           
</snippet></ROW><ROW><id>17643916</id><snippet>"""Return a foobang

Optional plotz says to frobnicate the bizbaz first.

"""
</snippet></ROW><ROW><id>17644122</id><snippet>def mySubtract(a, b):
    if a is None or b is None or a.shape != b.shape:
       sys.stderr.write("a and b don't have the same shape!\n")
       raise ValueError("a and b don't have same shape!")
    return a-b
</snippet></ROW><ROW><id>17644122</id><snippet>return None</snippet></ROW><ROW><id>17644122</id><snippet>return "a and b don't have the same shape!"</snippet></ROW><ROW><id>17644231</id><snippet>'.\config'</snippet></ROW><ROW><id>17644231</id><snippet>\c</snippet></ROW><ROW><id>17644231</id><snippet>'.\\config'</snippet></ROW><ROW><id>17644231</id><snippet>r'.\config'</snippet></ROW><ROW><id>17644231</id><snippet>$ cat eleme.py
import xml.etree.ElementTree as ET

root = ET.fromstring("""
&lt;root&gt;
  &lt;config&gt;
    source
  &lt;/config&gt;
  &lt;config&gt;
    source
  &lt;/config&gt;
&lt;/root&gt;""")

print r'using .\config', root.findall('.\config')
print r'using .\\config', root.findall('.\\config')
print 'using ./config', root.findall('./config')
$ python2.7 eleme.py 
using .\config []
using .\\config []
using ./config [&lt;Element 'config' at 0x8017a8610&gt;, &lt;Element 'config' at 0x8017a8650&gt;]
</snippet></ROW><ROW><id>17644427</id><snippet>In [30]: (lambda x: x and 0 or 1)(True)
Out[30]: 1

In [31]: (lambda x: 0 if x else 1)(True)
Out[31]: 0
</snippet></ROW><ROW><id>17644632</id><snippet>$</snippet></ROW><ROW><id>17644632</id><snippet>$</snippet></ROW><ROW><id>17644632</id><snippet>&gt;&gt;&gt; def dollar_repl(matchobj):
...     val = matchobj.group(0)
...     if val == '$':
...         val = 'z'
...     return val
... 
&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '$a $$b $$$c $d'
&gt;&gt;&gt; re.sub('\$+', dollar_repl, s)
'za $$b $$$c zd'
</snippet></ROW><ROW><id>17644799</id><snippet>l[0] == l[1][::-1]
</snippet></ROW><ROW><id>17644799</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17644799</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval("('JAX', 'IAH')")
('JAX', 'IAH')
</snippet></ROW><ROW><id>17644847</id><snippet>self[ann_id] = lvl_dict
</snippet></ROW><ROW><id>17644847</id><snippet>self[ann_id]</snippet></ROW><ROW><id>17644847</id><snippet>self[ann_id]['skill'] += lvl_dict['skill']
</snippet></ROW><ROW><id>17644847</id><snippet>lvl_dict</snippet></ROW><ROW><id>17644847</id><snippet>copy</snippet></ROW><ROW><id>17644847</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17644847</id><snippet>if ann_id in self:</snippet></ROW><ROW><id>17644847</id><snippet>defaultdict</snippet></ROW><ROW><id>17644847</id><snippet>from collections import defaultdict

class StatementDict(defaultdict):
    def __init__(self):
        defaultdict.__init__(self,
            lambda: {'skill': 0.0, 'knowledge': 0.0, 'interest': 0.0})

    def add(self, statement):
        ... as before ...
</snippet></ROW><ROW><id>17644910</id><snippet>Names</snippet></ROW><ROW><id>17644910</id><snippet>Locations</snippet></ROW><ROW><id>17644910</id><snippet>data = [('James','Germany'), ('Gail','US'), ('Merkel','Poland')]
with open('output', 'w') as f:
    for name,place in data:
        f.write("Name=%s\nLocation=%s\n\n" % (name, place))
</snippet></ROW><ROW><id>17644919</id><snippet>!p 
from glob import glob #Change this line as shown
cwd = vim.eval("getcwd()")  # or maybe vim.eval("expand('%:h')")
snip.rv = "\n".join([ "\t&lt;files&gt;%s&lt;/files&gt;" % file for file in glob(cwd + "/*")])
</snippet></ROW><ROW><id>17645054</id><snippet>def pid_running(pid):
    import ctypes
    kernel32 = ctypes.windll.kernel32
    SYNCHRONIZE = 0x100000

    process = kernel32.OpenProcess(SYNCHRONIZE, 0, pid)
    if process != 0:
        kernel32.CloseHandle(process)
        return True
    else:
        return False
</snippet></ROW><ROW><id>17645097</id><snippet>foo</snippet></ROW><ROW><id>17645097</id><snippet>global</snippet></ROW><ROW><id>17645097</id><snippet>LINES.append(...)</snippet></ROW><ROW><id>17645097</id><snippet>LINES[:] = []</snippet></ROW><ROW><id>17645097</id><snippet>LINES</snippet></ROW><ROW><id>17645097</id><snippet>LINES = []</snippet></ROW><ROW><id>17645097</id><snippet>len(LINES)</snippet></ROW><ROW><id>17645097</id><snippet>foo</snippet></ROW><ROW><id>17645097</id><snippet>&gt;&gt;&gt; foo.func_code.co_nlocals
2
&gt;&gt;&gt; foo.func_code.co_varnames
('prob', 'LINES')
</snippet></ROW><ROW><id>17645097</id><snippet>foo</snippet></ROW><ROW><id>17645097</id><snippet>LINES = []</snippet></ROW><ROW><id>17645345</id><snippet>sudo pip-3.2 install flake8</snippet></ROW><ROW><id>17645459</id><snippet>def main():
    final_message = []
    words = ['drat','crap','sucks']
    counter = 0
    userInput = input("Enter The Sentense: ")  # use raw_input if you're using python2.X
    truncatedInput = userInput[:140]
    sentence =  truncatedInput.split()
    for word in sentence:
        if word in words:
            word = 'x' * len(word)
        final_message.append(word)
     print ' '.join(final_message)
</snippet></ROW><ROW><id>17645475</id><snippet>In [1]: pandas.date_range("11:00", "21:30", freq="30min")
Out[1]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-07-14 11:00:00, ..., 2013-07-14 21:30:00]
Length: 22, Freq: 30T, Timezone: None
</snippet></ROW><ROW><id>17645475</id><snippet>In [2]: pandas.date_range("11:00", "21:30", freq="30min").time
Out[2]: 
array([datetime.time(11, 0), datetime.time(11, 30), datetime.time(12, 0),
       datetime.time(12, 30), datetime.time(13, 0), datetime.time(13, 30),
       datetime.time(14, 0), datetime.time(14, 30), datetime.time(15, 0),
       datetime.time(15, 30), datetime.time(16, 0), datetime.time(16, 30),
       datetime.time(17, 0), datetime.time(17, 30), datetime.time(18, 0),
       datetime.time(18, 30), datetime.time(19, 0), datetime.time(19, 30),
       datetime.time(20, 0), datetime.time(20, 30), datetime.time(21, 0),
       datetime.time(21, 30)], dtype=object)
</snippet></ROW><ROW><id>17645513</id><snippet>0.02</snippet></ROW><ROW><id>17645513</id><snippet># This is the function you want.

def roundPartial (value, resolution):
    return round (value / resolution) * resolution

# All these are just test cases, the first two being your own test data.

print "Rounding to fiftieths"
print roundPartial (0.405, 0.02)
print roundPartial (0.412, 0.02)

print "Rounding to quarters"
print roundPartial (1.38, 0.25)
print roundPartial (1.12, 0.25)
print roundPartial (9.24, 0.25)
print roundPartial (7.76, 0.25)

print "Rounding to hundreds"
print roundPartial (987654321, 100)
</snippet></ROW><ROW><id>17645513</id><snippet>Rounding to fiftieths
0.4
0.42
Rounding to quarters
1.5
1.0
9.25
7.75
Rounding to hundreds
987654300.0
</snippet></ROW><ROW><id>17645513</id><snippet>N</snippet></ROW><ROW><id>17645513</id><snippet>N</snippet></ROW><ROW><id>17645513</id><snippet>def roundPartial (value, resolution):
    if resolution == 0:
        return 0
    return round (value / resolution) * resolution
</snippet></ROW><ROW><id>17645520</id><snippet>k*k</snippet></ROW><ROW><id>17645520</id><snippet>k*k</snippet></ROW><ROW><id>17645520</id><snippet>result += [k*k]
</snippet></ROW><ROW><id>17645753</id><snippet>dat$cat &lt;- factor(dat$cat,levels = c('b','a'))

ggplot(dat,aes(x = name,y = num, fill = cat)) + 
    geom_bar(stat = "identity",position = "dodge") + 
    coord_flip() + 
    scale_fill_manual(values = c('blue','red')) +
    guides(fill = guide_legend(reverse = TRUE))
</snippet></ROW><ROW><id>17645753</id><snippet>stat = "identity"</snippet></ROW><ROW><id>17645861</id><snippet>def search(text,n):
    '''Searches for text, and retrieves n words either side of the text, which are retuned seperatly'''
    word = r"\W*([\w]+)"
    groups = re.search(r'{}\W*{}{}'.format(word*n,'place',word*n),t).groups()
    return groups[:n],groups[n:]
</snippet></ROW><ROW><id>17645861</id><snippet>t = "The world is a small place, we should try to take care of it."
search(t,3)
(('is', 'a', 'small'), ('we', 'should', 'try'))
</snippet></ROW><ROW><id>17646005</id><snippet>file.close()</snippet></ROW><ROW><id>17646005</id><snippet>def main(target):for x in target:
    if x == 'why':
        a+= 1 
    file.close()
    print a
</snippet></ROW><ROW><id>17646005</id><snippet>with open('file.txt', 'r+') as f</snippet></ROW><ROW><id>17646005</id><snippet>def get():
    a = 0
    target = str(raw_input('name file &gt; '))
    with open(target,'r+') as myfile:
        main(myfile)

def main(target):
    for x in target:
        if x == 'why':
            a+= 1  
    print a

get()
</snippet></ROW><ROW><id>17646005</id><snippet>file</snippet></ROW><ROW><id>17646005</id><snippet>str()</snippet></ROW><ROW><id>17646005</id><snippet>raw_input()</snippet></ROW><ROW><id>17646005</id><snippet>raw_input</snippet></ROW><ROW><id>17646005</id><snippet>a</snippet></ROW><ROW><id>17646005</id><snippet>get()</snippet></ROW><ROW><id>17646005</id><snippet>global a</snippet></ROW><ROW><id>17646175</id><snippet>MyCompany</snippet></ROW><ROW><id>17646175</id><snippet>MyProgram</snippet></ROW><ROW><id>17646175</id><snippet>My String</snippet></ROW><ROW><id>17646175</id><snippet>import _winreg as wr

key_location = r'Software\MyCompany\MyProgram'
try:
    key = wr.OpenKey(wr.HKEY_CURRENT_USER, key_location, 0, wr.KEY_ALL_ACCESS)
    value = wr.QueryValueEx(key, 'My String')
    print('Found value:', value)
except:
    print('Creating value.')
    key = wr.CreateKey(wr.HKEY_CURRENT_USER, key_location)
    wr.SetValueEx(key, 'My String', 0, wr.REG_SZ, 'This is what I want to save!')
wr.CloseKey(key)
</snippet></ROW><ROW><id>17646175</id><snippet>_winreg</snippet></ROW><ROW><id>17646175</id><snippet>winreg</snippet></ROW><ROW><id>17646186</id><snippet>getattr</snippet></ROW><ROW><id>17646186</id><snippet>exec</snippet></ROW><ROW><id>17646186</id><snippet>output.append(getattr(instance, attribute))
</snippet></ROW><ROW><id>17646186</id><snippet>def attributelist(list_, attribute):
    "Inputs a list of instances and returns a list of a certain attribute of those instances"
    return [getattr(i, attribute) for i in list_]
</snippet></ROW><ROW><id>17646186</id><snippet>list</snippet></ROW><ROW><id>17646314</id><snippet>In [125]: hdf[hdf.index.get_level_values(0).isin(['foo', 'qux']) &amp; (hdf.index.get_level_values(1) == 'two')][['A', 'C']]
Out[125]: 
                A         C
foo two -0.113320 -1.215848
qux two  0.953584  0.134363
</snippet></ROW><ROW><id>17646614</id><snippet>monkeys_punched_yet = False
</snippet></ROW><ROW><id>17646614</id><snippet>monkeys_punched_yet = True
</snippet></ROW><ROW><id>17646614</id><snippet>if monkeys_punched_yet:
    description_text = ("You see a pile of bruised and battered monkeys "
                        "in a corner of the room.")
else:
    description_text = "You see a group of unsuspecting, punchable monkeys."
    options.append("punch monkeys")
</snippet></ROW><ROW><id>17646772</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; [x[1] for x in sorted(chain.from_iterable(sample_lists), key=lambda x:int(x[0]))]
[u'penguin', u'kelp', u'otter', u'clam', u'egg']
</snippet></ROW><ROW><id>17646958</id><snippet> import tempfile
 import sys

 def modify_file(filename):

      #Create temporary file read/write
      t = tempfile.NamedTemporaryFile(mode="r+")

      #Open input file read-only
      i = open(filename, 'r')

      #Copy input file to temporary file, modifying as we go
      for line in i:
           t.write(line.rstrip()+"\n")

      i.close() #Close input file

      t.seek(0) #Rewind temporary file to beginning

      o = open(filename, "w")  #Reopen input file writable

      #Overwriting original file with temporary file contents          
      for line in t:
           o.write(line)  

      t.close() #Close temporary file, will cause it to be deleted

 if __name__ == "__main__":
      modify_file(sys.argv[1])
</snippet></ROW><ROW><id>17646967</id><snippet>Y</snippet></ROW><ROW><id>17646967</id><snippet>C</snippet></ROW><ROW><id>17646967</id><snippet>m</snippet></ROW><ROW><id>17646967</id><snippet>d</snippet></ROW><ROW><id>17646967</id><snippet>Y = int(f[2:4])
C = int(f[:2])
...
</snippet></ROW><ROW><id>17646967</id><snippet>w</snippet></ROW><ROW><id>17646967</id><snippet>math.floor</snippet></ROW><ROW><id>17646967</id><snippet>math</snippet></ROW><ROW><id>17646967</id><snippet>int</snippet></ROW><ROW><id>17647132</id><snippet>d = {'name1':name1, 'name2':name2}

for myvar in listname:
    myvar = d.get(myvar)
    do_stuff(myvar)
</snippet></ROW><ROW><id>17647158</id><snippet>&gt;&gt;&gt; a = [4, 6]
&gt;&gt;&gt; for k, v in d.iteritems():
...     if v == a:
...             print k
... 
3
</snippet></ROW><ROW><id>17647158</id><snippet>d.iteritems()</snippet></ROW><ROW><id>17647158</id><snippet>&gt;&gt;&gt; list(d.iteritems())
[(0, [0, 4]), (1, [3, 6]), (2, [4, 0]), (3, [4, 6]), (4, [6, 3]), (5, [6, 4])]
</snippet></ROW><ROW><id>17647158</id><snippet>items()</snippet></ROW><ROW><id>17647475</id><snippet>result = {}
for item in data:
    result.setdefault(item[0], {}).update({item[1]: item[2]})
</snippet></ROW><ROW><id>17647496</id><snippet>Bag Attributes
    friendlyName: Apple Development IOS Push Services: com.mycompany.myappidentifier
    localKeyID: 01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF 01 23 45 67 
subject=/UID=com.mycompany.myappidentifier/CN=Apple Development IOS Push Services: com.mycompany.myappidentifier/OU=ABC1234567/C=US
issuer=/C=US/O=Apple Inc./OU=Apple Worldwide Developer Relations/CN=Apple Worldwide Developer Relations Certification Authority
-----BEGIN CERTIFICATE-----
THIS_IS_JUST_RANDOM_CHARACTERS_90f0yGqSm7JmgJ0srvviZpn6cSMoCeymB
t449Y40dVKzDM809kpexmWuMrkjdnfaQmF15lYrpKOAu6t9sZPpFfIocovuW38pH
p4U9Rtt7TC4tVnMHYYk3Dsbu6lqcMeK9sp15Ffw8vcS9AHafNWeY9sjxe8oICcAt
mXV6RCcIjqADwf5yHS283SQ45K2DMQbOQ6ScMckLO1o6SC3VqWnkInMQPeVuLkbS
77BDaRF8X32pOLrwOKyn1CLJLvTDdOb9kWWBVSfvoZwCLinA99Pikc2Cmj0AUzPE
KHc4GvyqXzotjH9HsHnt8TNPEietXPZuILApztEEoAJwPhlJIiwdCkh66KlP7QJt
3l8iGCItGoMttokGGR99d7AaPbIwb7dZPjxc8TTBEoHXrHRrVCm4ogEazFiqfG5R
SCgwK4wyxtMxzgjaUJVq598i7QDmkcQxL8nPyqKvRxURuYMr37JZRFwMQpcmaNwD
Q7REjrz0DT3qZNZbEB4kSGy9Gcf3HfVZRfzlJV3jdOnw7ACvhB9r9uKdUW5U2Vrh
Sns6NVpXLHohtXOmWcrMVJfk4wvrmfj4zbj27MO4BVSushEI8f3lOzUY5RdQIA2v
UZfj47oADpxA0BnO5vysPZ4OcwLwQLoXTEFUiTHDkx7LxNXs0JhADiWnEh8w3c7u
OeGIYYDU713iBMEUC77kRGeOHzCNYSUG88vRl93b2AKvHM5TL9CFavAr9biSWTEJ
TCSvYNGv0BjZkmKgZkNQ0Th4Ip2JEBxS8uvBvR0oaF6zLZur3bc1Qi2W3lE7Ea15
aSZ4o1wMs3TeU8fNZHSCR6NtYNNRkqkoNNYZ4P7IoSafJSnV8sfxBc627jIlUJ7p
9Xrw0pbnSv2bjcvdZHDhX2bDBYb9mqvYAzgb08diOGEvF7B2H47ScL5RXPv5iPn1
CzeVCjuByc9hgQZVEoppzyXWpdBwsLgEsSgk1nCSpNItSFqvcu4QBDWeVb9wl44A
O0SX8rll0jlpbPrWggoGjp5ibJlVXJu70cezccOeturNjhJ4jOLk4yAZsGD10uv6
yjm4VGwhAzsXgZqaKT29FmIjLVJVfOgsgxAbGI1jgt9rp5kTJZCI2EXRAOOrAUsF
KUrwynHd9PXCWJLNLHL5nzusPBtRy6C2WXJZgeFYcZ7L7hQ60Fw3IeoyU8AD8GhE
x1Cv7GADu82kmFPXrkZJgRS6cbtDavMtG8iYCg5Vw8s8l2QglaxqdkXXxcH5TG6c
Ddcapm7BDpdrvJVwnCqQ8k4i8UlRYXrjYVqh81RSfVjhkfB1QRzBMwPSX1gN61wD
5m1yiWY9kMHHLhY2jux9rr5MwrRBZLhmjgERwJu89aGIW9cAVXSITZAONTzGI2Zx
g8L3U2lr7b4zcNuq6pNKuYwpzKrQUK5ou7HWectN9g91yqqmprCO3I8WZCq4W2F2
GYmwloL1YcoOFpfLSZHijAQOmwppz9VGNbqZn9F27xNUzQhddm8F06vICjQTflBH
caViw2GaKNLMJm2c4B7saOyqLbthyI59YkyrM9hTQK3fGqQpKJosgEQyFg4KZrRx
NlkYidUDYy5htWp4kFLW9QmRgoCLtqZyNIOUbdE4dxntPCcGjU5VSGa0ofpxZaMr
pVLC1GGP4r02yP6aZj04njKJmNrvHEK9sr8S452UVwyRIkIfoiBlCkmmRCVnELa8
sraVxhpwmLIQC1E4DCIyFH6pPi7VYOh5pZewBlAiFyaHRThVKBSn11dzl714qyqy
zQaNjHXLP4oWSAEgPHtimCpLgRhhZO2neOwI7ptW7n3WncvW92Fs1Q3FaGujVw0x
NkpEf4pHfUT4ZK4UdsQzVokyMhptMg03ZLNQ7mkNhkrAPmR5Y7K2zDYBtQ45WULg
97mCUJ3TCMffVFd3szYF
-----END CERTIFICATE-----
Bag Attributes
    friendlyName: Common Name From Keychain Access CSR Wizard
    localKeyID: AB CD EF 01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF 01 
Key Attributes: &lt;No Attributes&gt;
-----BEGIN RSA PRIVATE KEY-----
THIS_IS_JUST_RANDOM_CHARACTERS_1YKVrMNhmg68Qt026SWMxtaKiVtHG2yYS
V3gdLgqujtp4rpWONYoLQKhlW923yzrxYuSUhC8LiNDlAjicrJXZVj4vYhwdydSS
QBnDaxc5U2NYev0tCEbPTpYDERAsdE7WTBwaTuEyWEoqTsPQLucohKY2E7UzoZcZ
BttZaX0vLy3W7y22dSKtIghJMEy8MENjeJkET6Xaf4ozC7DNr2g1dBICPT42Hx77
GagtxA2OyxW7qkB8GTnOncXWDbli1y5eYIjb0GZNQVSmGEBl5ykNvhbzpqc53nfN
NJNMO1mEIaDo3GZIVfv3gpiNGpaplofix2DZJOaQBh4s0X3gwc3Y9f1Ta39tYdVh
h04JCDdliIfbjp4T6pDJQeebaBPczOne2gFHMOHGlxcfYbNzlqgBhzdoqH25nKN4
hThTUQioisjUrUayiyPkMAJFdKn37iff1XHOmCFEJqL7eMayeyLk55hWLLBi4Q7I
wUH9rbR2LnfXdCf25jyRbZQx3uKhjnwZrZL9Pg2OF9nvl1B1UnTtyOHP7uP989u1
qNiNIS347PLN2tvEIEaFQ26ESY9YpPhcpMWLpJEN6nyer1LcrRQfTPXnoqPKIEDc
KBnpPyvNxC7EeruwkwWbRdpuOPJ8hFKiY9SwSbJvPb4mBXmSo5mfKaZfy2IuJdTV
dTQ49Lq3rMDwYsRTAS6Id2I9lFruU5vXR7BtCP5u8QV480f6wU17IPn3mgezXtNU
R0SSEjVCGWQUZXvEmlLTnqD5T7IHlat7IbKvcaKp6skvJUFanKgCXn7PW6FzuQyF
QfbGEAmzEIq7UT83WOxCsbUR26kJutIejjcnZWZQ3tMG9wtZysYXkAiCDEMUdSZl
Y7h5oE5rVeYyT7SXtDhVnNeDmcqIO2VcHt7HFsVQVMUAalA9mnEMjHkxAbgp1mCo
NxdMzNb44IWAaSM6CmjjMt07GTJsjthXTreFoOm9oWGSIEo67piyIRJP8xmdOitB
ITLHC9h89kV4vfAJZrrCOxSlcsNADCAS1SJW6kzJn7CxVucnszKZ8sQdc8Xqvqsu
4CpFs1arZYZ3IE9dOY28LJuuegSBSf6EOTSHK5OOzL6IenrhTUbLSFQpoYF3yNo1
OfpoyVHltjCeqTHMQjhrY9cokfHsecRR8EZMAAxFDo3YvgVyLzvjvY114NMVkxHh
5sw7wL4xKE8UxzL4Eew1t8HjSlypLF7s5plq6wtOfEn9HYRKJVGYBT5x2oZm9m6b
rlVzKeASUuzOXBeNafwYOgXAFBq0i1lw7nkLfyZaeETfE00GxhceK6bnT0UfBMb5
rvU4Yz1pNhYvG4ZhKJYaiJvzQW6jSYFEyWh8hWPrSco42eMPYms0lxK9Fy4tbHuP
0XsjURq6aY9P6Cg1ugPM5ad3kOtr8MrJwRLmp94ucwJASuWXj48QH45sVaZbcsKU
ZwVfKpGke3urr9DtznZnv4QdBSlPhS3e4CihQDdhWZJMPxh1DNRrBWBn7xiOZqEm
oC7zbfjNtpvhOThz4MCDzJeCtGfI8irjdYFi2eqefZ6lLaoZFYBi
-----END RSA PRIVATE KEY-----
</snippet></ROW><ROW><id>17647496</id><snippet>openssl pkcs12 -in FILENAME.p12 -out FILENAME.pem -nodes</snippet></ROW><ROW><id>17647635</id><snippet>from nltk.corpus import wordnet as wn
from nltk.corpus.reader import NOUN

#this gives a synsets list of empty length, since there is no noun corresponding to 'propose'
synsets = wn.synsets('propose', NOUN)

if synsets.length == 0 :
    print ' We found a pure NOUN'

 #this will give you a non empty synset list since 'iron' can be a NOUN too.
synsets = wn.synsets('iron',NOUN)

if synsets.length &gt; 0 :
   print 'Iron is also a noun other than verb'
</snippet></ROW><ROW><id>17647725</id><snippet>import urllib2
try:
    from bs4 import BeautifulStoneSoup #Using bs4
except ImportError:
    from BeautifulSoup import BeautifulStoneSoup #Using bs3

url="https://api.projectnimbus.org/neaodataservice.svc/NowcastSet"
request = urllib2.Request(url)
request.add_header("accept", "*/*")
request.add_header('AccountKey', "OSJeROQjTg4v7Ec3kiecjw==")
request.add_header('UniqueUserID', "00000000000000000000000000000001")
result = urllib2.urlopen(request)
xml_str = result.read()

soup = BeautifulStoneSoup(xml_str)

prop_list = []
for content in soup.findAll("m:properties")
    props = {}
    for prop in content.findChildren():
        props[prop.name[2:]] = prop.text
    prop_list.append(props)

print prop_list
</snippet></ROW><ROW><id>17647919</id><snippet>xrange(n)</snippet></ROW><ROW><id>17647919</id><snippet>xrange()</snippet></ROW><ROW><id>17647919</id><snippet>range()</snippet></ROW><ROW><id>17647919</id><snippet>list(range(n))</snippet></ROW><ROW><id>17648455</id><snippet>#set pyvirtual display&lt;br&gt;
display = Display(visible=0, size=(800, 600))&lt;br&gt;
display.start()</snippet></ROW><ROW><id>17648455</id><snippet>import os&lt;br&gt;
os.environ['DISPLAY'] = ':1'</snippet></ROW><ROW><id>17648505</id><snippet>python my_script.py &lt; input.txt &gt; output.txt
</snippet></ROW><ROW><id>17648845</id><snippet>$ date +"%b-%d-%Y" -d "last saturday"
Jul-13-2013
</snippet></ROW><ROW><id>17649034</id><snippet>class T(object):
  def __init__(self, val):
    self.val = val

  def __mul__(self, x):
    print("mul")
    return T(self.val*x)

  def __rmul__(self, x):
    print("rmul")
    return T(self.val*x)

  def __repr__(self):
    return str(self.val)

&gt;&gt;&gt; t = T(2)
&gt;&gt;&gt; t * 2
mul
4
&gt;&gt;&gt; 2*t
rmul
4
</snippet></ROW><ROW><id>17649039</id><snippet>re.sub("^and", "AND", s, flags=re.M)
</snippet></ROW><ROW><id>17649039</id><snippet>re.M</snippet></ROW><ROW><id>17649039</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>17649039</id><snippet>'^'</snippet></ROW><ROW><id>17649039</id><snippet>'$'</snippet></ROW><ROW><id>17649039</id><snippet>'^'</snippet></ROW><ROW><id>17649039</id><snippet>'$'</snippet></ROW><ROW><id>17649189</id><snippet>import re

s = "Jul 15 12:12:51 whitelist logger: 1|999999999999|id:d9faff7c-4016-4343-b494-37028763bb66 submit date:1307130919 done date:1307130919 stat:DELIVRD err:0|L_VB3_NM_K_P|1373687445|vivnel2|L_VB3_GH_K_P|promo_camp1-bd153424349bc647|1"

logger_re = re.compile(
"logger: ([^ ]+)\
 submit date:(\d+)\
 done date:(\d+)\
 stat:(.+)\
 err:(.+)$")

print logger_re.search(s).groups()
</snippet></ROW><ROW><id>17649189</id><snippet>()</snippet></ROW><ROW><id>17649501</id><snippet>import nltk
from random import choice, shuffle, random

# Sometimes i find reading terminals as values into a dict of POS helps.
vocab={
'Det':['a','an','the','my'],
'N':['man','dog','cat','telescope','park'],
'V':['saw','ate','walked'],
'P':['in','on','by','with'],
'NP':['John','Mary','Bob']
}

vocab2string = [pos + " -&gt; '" + "' | '".join(vocab[pos])+"'" for pos in vocab]

# Rules are simpler to be manually crafted so i left them in strings
rules = '''
S -&gt; NP VP
VP -&gt; V NP
VP -&gt; V NP PP
PP -&gt; NP P
NP -&gt; Det N
'''

mygrammar = rules + "\n".join(vocab2string)
grammar = nltk.parse_cfg(mygrammar) # Loaded your grammar
parser =  nltk.ChartParser(grammar) # Loaded grammar into a parser

# Randomly select one terminal from each POS, based on infinite monkey theorem, i.e. selection of words without grammatical order, see https://en.wikipedia.org/wiki/Infinite_monkey_theorem
words = [choice(vocab[pos]) for pos in vocab if pos != 'P'] # without PP
words = [choice(vocab[pos]) for pos in vocab] + choice(vocab('NP')) # with a PP you need 3 NPs

# To make sure that you always generate a grammatical sentence
trees = []
while trees != []:
  shuffle(words)
  trees = parser.nbest_parse(words)

for t in trees:
  print t
</snippet></ROW><ROW><id>17649563</id><snippet>class_list  = []
for register in registerlist1:
    class_list.append([
        [register._getParent().getname()],
        [register.getaddress()), register.getdirection()
    ])

print class_list
</snippet></ROW><ROW><id>17649863</id><snippet>StringIO</snippet></ROW><ROW><id>17649863</id><snippet>text/plain</snippet></ROW><ROW><id>17649863</id><snippet>.name</snippet></ROW><ROW><id>17649863</id><snippet>poster</snippet></ROW><ROW><id>17649863</id><snippet>requests</snippet></ROW><ROW><id>17649901</id><snippet>random.shuffle()</snippet></ROW><ROW><id>17649901</id><snippet>x</snippet></ROW><ROW><id>17649901</id><snippet>None</snippet></ROW><ROW><id>17649901</id><snippet>sorted()</snippet></ROW><ROW><id>17649901</id><snippet>random.random()</snippet></ROW><ROW><id>17649901</id><snippet>x = ['foo','bar','black','sheep']
shuffled = sorted(x, key=lambda k: random.random())
</snippet></ROW><ROW><id>17649901</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; x = ['foo','bar','black','sheep']
&gt;&gt;&gt; sorted(x, key=lambda k: random.random())
['sheep', 'foo', 'black', 'bar']
&gt;&gt;&gt; x
['foo', 'bar', 'black', 'sheep']
</snippet></ROW><ROW><id>17649966</id><snippet>import urllib2
from BeautifulSoup import BeautifulStoneSoup #Using bs3

url="https://api.projectnimbus.org/neaodataservice.svc/NowcastSet"
request = urllib2.Request(url)
request.add_header("accept", "*/*")
request.add_header('AccountKey', "OSJeROQjTg4v7Ec3kiecjw==")
request.add_header('UniqueUserID', "00000000000000000000000000000001")
result = urllib2.urlopen(request)
xml_str = result.read()

soup = BeautifulStoneSoup(xml_str)

prop_list = []
for content in soup.findAll("m:properties"):
    props = {}
    for prop in content.findChildren():
        props[prop.name[2:]] = prop.text
    prop_list.append(props)

for prop in prop_list:
    print "Area: %(area)s\nLat: %(latitude)s\nLong: %(longitude)s\n" % prop
</snippet></ROW><ROW><id>17649970</id><snippet>hello function
Process Process-1:
Traceback (most recent call last):
  File "/usr/local/lib/python2.7/multiprocessing/process.py", line 258, in _bootstrap
    self.run()
  File "/usr/local/lib/python2.7/multiprocessing/process.py", line 114, in run
    self._target(*self._args, **self._kwargs)
  File "mp2.py", line 8, in f
    dict['process_obj'] = multiprocessing.current_process()
  File "&lt;string&gt;", line 2, in __setitem__
  File "/usr/local/lib/python2.7/multiprocessing/managers.py", line 758, in _callmethod
    conn.send((self._id, methodname, args, kwds))
PicklingError: Can't pickle &lt;type 'instancemethod'&gt;: attribute lookup __builtin__.instancemethod failed
</snippet></ROW><ROW><id>17649970</id><snippet>multiprocessing.current_process()</snippet></ROW><ROW><id>17649970</id><snippet>multiprocessing</snippet></ROW><ROW><id>17649970</id><snippet>ident</snippet></ROW><ROW><id>17649970</id><snippet>    dict['process_obj'] = multiprocessing.current_process().ident
</snippet></ROW><ROW><id>17649987</id><snippet>yy = numpy.tan(2*(x - numpy.pi/2))
threshold = 10000
yy[yy&gt;threshold] = numpy.inf
yy[yy&lt;-threshold] = numpy.inf
ax.plot(x, yy, linewidth=1.2, color="black")
</snippet></ROW><ROW><id>17649998</id><snippet>exclude = ['title']</snippet></ROW><ROW><id>17649998</id><snippet>form.save()</snippet></ROW><ROW><id>17649998</id><snippet>class PartialAuthorForm (ModelForm):
    extra_field = forms.IntegerField()

    class Meta:
        model = Author

    def save(self, *args, **kwargs):
        # do something with self.cleaned_data['extra_field']
        super(PartialAuthorForm, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>17650013</id><snippet>str</snippet></ROW><ROW><id>17650013</id><snippet>    another_line='-'*max
    for i in range(0,count):
        str=mul_list[i]
        str=' '*(max-len(str))+str
        mul_list[i]=str
</snippet></ROW><ROW><id>17650013</id><snippet>str</snippet></ROW><ROW><id>17650013</id><snippet>str(new)
</snippet></ROW><ROW><id>17650080</id><snippet>x = np.array([[3,5,9],[6,0,7],[2,3,4]])
m = np.array([[1,1,2],[2,1,1],[2,1,2]])
indices = np.where(m == 1)  # indices contains two arrays, the column and row indices
values = x[indices]
</snippet></ROW><ROW><id>17650203</id><snippet>try:
    cur.execute("INSERT INTO MyTable (id,somerow) VALUES (%s, %s)" % ("someid", "somerow"))
    db.commit()
except MySQLdb.Error, e:
    print e[0], e[1]
    db.rollback()
</snippet></ROW><ROW><id>17650251</id><snippet>&gt;&gt;&gt; with open('1.csv') as file:
...     reader = csv.reader(file)
...     col1s = []; col2s = []
...     for row in reader:
...             if "$GPGGA" in row:
...                     col1s.append((row[0], row[1], row[2], row[5]))
...             elif "$GPVTG" in row:
...                     col2s.append((row[0], row[1], row[2]))
...     for each in zip(col1s, col2s):
...             print each[0] + each[1]
... 
('~11:16:04.831', '$GPGGA', '091606.00', '01140.54074205', '~11:16:04.861', '$GPVTG', '40.8')
('~11:16:05.833', '$GPGGA', '091607.00', '01140.54074319', '~11:16:05.863', '$GPVTG', '40.8')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17650684</id><snippet>logger_re.search(line)</snippet></ROW><ROW><id>17650684</id><snippet>None</snippet></ROW><ROW><id>17650684</id><snippet>logger_re = re.compile(
     "logger: ([^ ]+)\
      submit date:(\d+)\
      done date:(\d+)\
      stat:(.+)\
      err:(.+)$")
</snippet></ROW><ROW><id>17650684</id><snippet>logger_re = re.compile(
     "logger: ([^ ]+) "
     "submit date:(\d+) "
     "done date:(\d+) "
     "stat:(.+) "
     "err:(.+)$")
</snippet></ROW><ROW><id>17650796</id><snippet>try:
    raw_input()
except EOFError:
    pass
</snippet></ROW><ROW><id>17650796</id><snippet>import atexit

def quit_gracefully():
    print 'Bye'

atexit.register(quit_gracefully)
</snippet></ROW><ROW><id>17651259</id><snippet>class C(object):
    def __init__(self):
        self._scaling_method = None

    def same(self, u):
        return u

    def double(self, u):
        return u * 2

    scale = same

    @property
    def scaling_method(self):
        return self._scaling_method

    @scaling_method.setter
    def scaling_method(self, value):
        if value.lower() == "double":
            self._scaling_method = "double"
            self.scale = self.double
        elif value.lower() == "same":
            self._scaling_method = "same"
            self.scale = self.same
        else:
            print "Unknown scaling method."
</snippet></ROW><ROW><id>17651259</id><snippet>self.scale = ...</snippet></ROW><ROW><id>17651259</id><snippet>self.__class__.scale = ...</snippet></ROW><ROW><id>17651259</id><snippet>sage: c = C()
sage: c.scale(3)
3
sage: c.scaling_method = "double"
sage: c.scale(3)
6
</snippet></ROW><ROW><id>17651259</id><snippet>sage: cc = C()
sage: cc.scale(4)
8
</snippet></ROW><ROW><id>17651259</id><snippet>class C(object):
    _scaling_method = None

    def same(self, u):
        return u

    def double(self, u):
        return u * 2

    scale = same

    @property
    def scaling_method(self):
        return self._scaling_method

    @scaling_method.setter
    def scaling_method(self, value):
        if value.lower() == "double":
            self.__class__._scaling_method = "double"
            self.__class__.scale = self.double
        elif value.lower() == "same":
            self.__class___.scaling_method = "same"
            self.__class__.scale = self.same
        else:
            print "Unknown scaling method."
</snippet></ROW><ROW><id>17651259</id><snippet>sage: c = C(); cc = C()
sage: c.scale(2), cc.scale(3)
(2, 3)
sage: c.scaling_method = "double"
sage: c.scale(2)
4
</snippet></ROW><ROW><id>17651259</id><snippet>cc</snippet></ROW><ROW><id>17651259</id><snippet>sage: cc.scale(3)
6
</snippet></ROW><ROW><id>17651461</id><snippet>if</snippet></ROW><ROW><id>17651461</id><snippet>for</snippet></ROW><ROW><id>17651461</id><snippet>areas_to_print = ["Upper Bukit Timah", "West Coast", "Woodlands", "Yishun"]

for prop in sorted(prop_list):
    if prop["area"] in areas_to_print:
        print "Area: %(area)s\nSummary: %(summary)s\nLatitude: %(latitude)s\nLongitude: %(longitude)s\n" % prop
</snippet></ROW><ROW><id>17651461</id><snippet>if</snippet></ROW><ROW><id>17651461</id><snippet>for</snippet></ROW><ROW><id>17651461</id><snippet>prop_list</snippet></ROW><ROW><id>17651702</id><snippet>$ [sudo] gem install terminal-notifier
</snippet></ROW><ROW><id>17651702</id><snippet>import os

def notify(title, subtitle, message):
    t = '-title {!r}'.format(title)
    s = '-subtitle {!r}'.format(subtitle)
    m = '-message {!r}'.format(message)
    os.system('terminal-notifier {}'.format(' '.join([m, t, s])))

notify(
    title    = 'A Real Notification',
    subtitle = 'with python',
    message  = 'Hello, this is me, notifying you!'
)
</snippet></ROW><ROW><id>17651722</id><snippet>account = AccountDetails.objects.raw(
    "SELECT * FROM yourapp_accountdetails FOR UPDATE WHERE user = %s", [user.id]
)
</snippet></ROW><ROW><id>17651722</id><snippet>class AccountDetails(models.Model):

    @classmethod
    def get_locked_for_update(cls, user):
        return cls.objects.raw(
            "SELECT * FROM yourapp_accountdetails FOR UPDATE WHERE user = %s", [user.id]
        )
</snippet></ROW><ROW><id>17651722</id><snippet>yourapp</snippet></ROW><ROW><id>17651722</id><snippet>def select_for_update(self, **kwargs):
    """
    Returns a new QuerySet instance that will select objects with a
    FOR UPDATE lock.
    """
    # Default to false for nowait
    nowait = kwargs.pop('nowait', False)
    obj = self._clone()
    obj.query.select_for_update = True
    obj.query.select_for_update_nowait = nowait
    return obj
</snippet></ROW><ROW><id>17651850</id><snippet>info=True</snippet></ROW><ROW><id>17651850</id><snippet>calculation</snippet></ROW><ROW><id>17651850</id><snippet>return_inverse</snippet></ROW><ROW><id>17651850</id><snippet>return_index</snippet></ROW><ROW><id>17651850</id><snippet>full_output</snippet></ROW><ROW><id>17651850</id><snippet>def calculation(data, max_it=10000, tol = 1e-5, info=False):
    k = 0
    rmse = np.inf 
    while k &lt; max_it and rmse &gt; tol:
        #calc and modify data - rmse becomes smaller in each iteration
        k += 1
    if info:
        return data, k, rmse
    else:
        return data
</snippet></ROW><ROW><id>17651850</id><snippet>calculation</snippet></ROW><ROW><id>17651850</id><snippet>def calculation(data, max_it=10000, tol = 1e-5):
    k = 0
    rmse = np.inf 
    while k &lt; max_it and rmse &gt; tol:
        #calc and modify data - rmse becomes smaller in each iteration
        k += 1
    calculation.k = k
    calculation.rmse = rmse
    return data
</snippet></ROW><ROW><id>17651850</id><snippet>import module
d = module.calculation(data)
rmse = module.calculation.rmse
</snippet></ROW><ROW><id>17651850</id><snippet>calculation</snippet></ROW><ROW><id>17651850</id><snippet>calculation</snippet></ROW><ROW><id>17651850</id><snippet>calculation.k</snippet></ROW><ROW><id>17651850</id><snippet>calculation.rmse</snippet></ROW><ROW><id>17652449</id><snippet>me = 5 if a == b else c
</snippet></ROW><ROW><id>17652468</id><snippet>namedtuple</snippet></ROW><ROW><id>17652468</id><snippet>def namtupiter(c):
    from collections import namedtuple
    fields = tuple(i[0] for i in c.description)
    Row = namedtuple('Row', fields)
    # make Row a tuple and a "dict" (well, kind of...) at the same time.
    # Don't lose tuple property, so only process strings and pass everything
    # other to super().
    Row.__getitem__ = lambda self, item: getattr(self, item) if isinstance(item, basestring) else super(Row, self).__getitem__(item)
    for i in c:
        try:
            # try to access i as a dict
            yield Row(*(i[f] for f in fields))
        except TypeError:
            # it is no dict -&gt; try tuple
            yield Row(*i)

class CursorNTRowsMixIn(object):
    _fetch_type = 0 # tuples
    def _do_get_result(self):
        super(CursorNTRowsMixIn, self)._do_get_result()
        # create a named tuple class
        from collections import namedtuple
        if self.description:
            self.RowClass = namedtuple('Row', tuple(i[0] for i in self.description))
    def _fetch_row(self, size=1):
        rows = super(CursorNTRowsMixIn, self)._fetch_row(size)
        # turn every row into a Row().
        return tuple(self.RowClass(*i) for i in rows)

class NTCursor(CursorStoreResultMixIn, CursorNTRowsMixIn,
               BaseCursor):
    pass

class SSNTCursor(CursorUseResultMixIn, CursorNTRowsMixIn,
               BaseCursor):
    pass
</snippet></ROW><ROW><id>17652468</id><snippet>namtupiter()</snippet></ROW><ROW><id>17652468</id><snippet>for r in namtupiter(db.select(fields=('id', 'name', 'area', _from='sometable', where='area IS NOT NULL')):
    print r.id, r.name, r.area
</snippet></ROW><ROW><id>17652468</id><snippet>SS</snippet></ROW><ROW><id>17652468</id><snippet>NTCursor</snippet></ROW><ROW><id>17652558</id><snippet>os.popen()</snippet></ROW><ROW><id>17652558</id><snippet>close()</snippet></ROW><ROW><id>17652558</id><snippet>pipe = os.popen("mysqldump --login-path=server1_mysql -e --opt "
                "--skip-lock-tables  --skip-extended-insert -c %s &gt; %s.sql" % 
                (database, filename))
if pipe.close() is None:  # no errors?
    os.popen("diff %s %s &gt; %s" % (weekly, filename, filename+".PATCH"))
</snippet></ROW><ROW><id>17652568</id><snippet>def a(s1, s2):
    s1 = '{0}test{0}'.format(s1)
    s2 = '{}({})'.format(s1, s2)
    return s1, s2

foo, bar = a(foo, bar)
</snippet></ROW><ROW><id>17652656</id><snippet>db.testpymongo.find(  { "Project": { $elemMatch: { "pname": "project1"  } } } )
</snippet></ROW><ROW><id>17653070</id><snippet>__contains</snippet></ROW><ROW><id>17653070</id><snippet>from django.db.models import Q

qs = MyModel.objects.filter(~Q(icon__contains='any string'))
</snippet></ROW><ROW><id>17653070</id><snippet>None</snippet></ROW><ROW><id>17653070</id><snippet>qs = MyModel.objects.filter(icon__isnull=True)
</snippet></ROW><ROW><id>17653334</id><snippet>if s.has_key('delfee'):
</snippet></ROW><ROW><id>17653334</id><snippet>if d.has_key('delfee'):
</snippet></ROW><ROW><id>17653334</id><snippet>def cust_state():
        s = get_all_cust_info()
        for d in s:
            if 'delfree' in d:
                del d['delfree']
            if 'netsales' in d:
                del d['netsales']
            d['ordervalue'] = something
        return s
</snippet></ROW><ROW><id>17653407</id><snippet>ax.set_position()</snippet></ROW><ROW><id>17653558</id><snippet>str()</snippet></ROW><ROW><id>17653558</id><snippet>c.write(str(count))
</snippet></ROW><ROW><id>17653558</id><snippet>c.close</snippet></ROW><ROW><id>17653558</id><snippet>.close()</snippet></ROW><ROW><id>17653558</id><snippet>print</snippet></ROW><ROW><id>17653558</id><snippet>with open("text.txt","w") as c:
    count = 0
    while count &lt; 100:
        print count
        count += 0.1
        c.write(str(count) + '\n')
</snippet></ROW><ROW><id>17653558</id><snippet>xrange()</snippet></ROW><ROW><id>17653558</id><snippet>with open("text.txt","w") as c:
    for count in xrange(1, 1000):
        print count
        c.write(str(count) + '\n')
</snippet></ROW><ROW><id>17653840</id><snippet>import mysql.connector

cnx = mysql.connector.connect(database='test', user='root',
                              charset='gbk', use_unicode=False)
cur = cnx.cursor()

cur.execute("DROP TABLE IF EXISTS gbktest")
table = (
    "CREATE TABLE gbktest ("
    "id INT AUTO_INCREMENT KEY, "
    "c1 VARCHAR(40)"
    ") CHARACTER SET 'gbk'"
)
cur.execute(table)

def gbk_to_hexstr(value):
    """Convert value to Hexadecimal Literal for MySQL
    """
    return "0x{0}".format(''.join(
        ["{0:x}".format(ord(c)) for c in value.encode('gbk')]))

# Convert your Unicode data using gbk_to_hexstr
data = {
    'c1' : gbk_to_hexstr(u'赵孟頫'),
}

# Use MySQLCursor.execute() _not_ passing data as second argument
cur.execute("INSERT INTO gbktest (c1) VALUES ({c1})".format(**data))
cur.execute("SELECT c1 FROM gbktest")

# Print the inserted data as Unicode
for row in cur:
    print(row[0].decode('gbk').encode('utf8'))
</snippet></ROW><ROW><id>17654282</id><snippet>values = """Item1 Linen Shirt
Item2 Linen Shirt
ItemB Linen Shirt1
Item Linen Skirt
ItemC Linen Skirt2"""

data = values.split('\n')

print(difflib.get_close_matches(data[0], data))
</snippet></ROW><ROW><id>17654390</id><snippet>city_id = models.AutoField(primary_key=True)
</snippet></ROW><ROW><id>17654682</id><snippet>In [35]: df = DataFrame(randn(100000,3),columns=list('ABC'))

In [36]: df['one'] = 'foo'

In [37]: df['two'] = 'bar'

In [38]: df.ix[50000:,'two'] = 'bah'

In [40]: mi = df.set_index(['one','two'])

In [41]: mi
Out[41]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 100000 entries, (foo, bar) to (foo, bah)
Data columns (total 3 columns):
A    100000  non-null values
B    100000  non-null values
C    100000  non-null values
dtypes: float64(3)
</snippet></ROW><ROW><id>17654682</id><snippet>In [42]: store = pd.HDFStore('test.h5',mode='w')

In [43]: store.append('df',mi)
</snippet></ROW><ROW><id>17654682</id><snippet>get_storer</snippet></ROW><ROW><id>17654682</id><snippet>In [44]: store.get_storer('df').levels
Out[44]: ['one', 'two']

In [2]: store
Out[2]: 
&lt;class 'pandas.io.pytables.HDFStore'&gt;
File path: test.h5
/df            frame_table  (typ-&gt;appendable_multi,nrows-&gt;100000,ncols-&gt;5,indexers-&gt;[index],dc-&gt;[two,one])
</snippet></ROW><ROW><id>17654682</id><snippet>In [48]: store.select('df',columns=['one'])
Out[48]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 100000 entries, (foo, bar) to (foo, bah)
Empty DataFrame
</snippet></ROW><ROW><id>17654682</id><snippet>In [49]: store.select('df',columns=['A'])
Out[49]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 100000 entries, (foo, bar) to (foo, bah)
Data columns (total 1 columns):
A    100000  non-null values
dtypes: float64(1)
</snippet></ROW><ROW><id>17654682</id><snippet>In [2]: store.select_column('df','one')
Out[2]: 
0     foo
1     foo
2     foo
3     foo
4     foo
5     foo
6     foo
7     foo
8     foo
9     foo
10    foo
11    foo
12    foo
13    foo
14    foo
...
99985    foo
99986    foo
99987    foo
99988    foo
99989    foo
99990    foo
99991    foo
99992    foo
99993    foo
99994    foo
99995    foo
99996    foo
99997    foo
99998    foo
99999    foo
Length: 100000, dtype: object
</snippet></ROW><ROW><id>17654682</id><snippet>In [4]: %timeit store.select_column('df','one')
100 loops, best of 3: 8.71 ms per loop

In [5]: %timeit store.select('df',columns=['one'])
10 loops, best of 3: 43 ms per loop
</snippet></ROW><ROW><id>17654682</id><snippet>In [6]: def f():
   ...:     level_1 =  store.select_column('df','one')
   ...:     level_2 =  store.select_column('df','two')
   ...:     return MultiIndex.from_arrays([ level_1, level_2 ])
   ...: 

In [17]: %timeit f()
10 loops, best of 3: 28.1 ms per loop
</snippet></ROW><ROW><id>17654682</id><snippet>In [2]: store.select_column('df','one').unique()
Out[2]: array(['foo'], dtype=object)

In [3]: store.select_column('df','two').unique()
Out[3]: array(['bar', 'bah'], dtype=object)
</snippet></ROW><ROW><id>17654832</id><snippet>loop : FOR def IN CONSTANT COLON block END FOR
</snippet></ROW><ROW><id>17654835</id><snippet>extend</snippet></ROW><ROW><id>17654835</id><snippet>extend(...)

L.extend(iterable) -- extend list by appending elements from the iterable
</snippet></ROW><ROW><id>17654835</id><snippet>All = []
Class1 = {"name":"A","score":[60,70,80]}
Class2 = {"naem":"B","score":[70,80,90]}
All.extend(Class1['score'])
All.extend(Class2['score'])
print(All)
</snippet></ROW><ROW><id>17654967</id><snippet>m = QueueManager(address=('', 50000), authkey='test')
</snippet></ROW><ROW><id>17655123</id><snippet>urllib2</snippet></ROW><ROW><id>17655123</id><snippet>.msg</snippet></ROW><ROW><id>17655123</id><snippet>.code</snippet></ROW><ROW><id>17655123</id><snippet>addinfourl</snippet></ROW><ROW><id>17655123</id><snippet>addinfourl</snippet></ROW><ROW><id>17655123</id><snippet>HTTPContentEncodingHandler</snippet></ROW><ROW><id>17655123</id><snippet>zurllib.py</snippet></ROW><ROW><id>17655123</id><snippet>class HTTPContentEncodingHandler(HTTPHandler):
    """Inherit and add gzip/deflate/etc support to HTTP gets."""
    def http_open(self, req):
        # add the Accept-Encoding header to the request
        # support gzip encoding (identity is assumed)
        req.add_header("Accept-Encoding","gzip")
        req.add_header('User-Agent', 'BitTorrent/' + version)
        if DEBUG: 
            print "Sending:" 
            print req.headers
            print "\n"
        fp = HTTPHandler.http_open(self,req)
        headers = fp.headers
        if DEBUG: 
             pprint.pprint(headers.dict)
        url = fp.url
        resp = addinfourldecompress(fp, headers, url)
        resp.code = fp.code
        resp.msg = fp.msg
        return resp
</snippet></ROW><ROW><id>17655241</id><snippet>import json

json.dumps({'a':1,'b':2}) #this will return a string with your dict in json format.

#'{"a": 1, "b": 2}'
</snippet></ROW><ROW><id>17655463</id><snippet>close_down</snippet></ROW><ROW><id>17655463</id><snippet>if "close_down" in self.__dict__:</snippet></ROW><ROW><id>17655463</id><snippet>self.close_down = False</snippet></ROW><ROW><id>17655463</id><snippet>__init__()</snippet></ROW><ROW><id>17655475</id><snippet>bar</snippet></ROW><ROW><id>17655475</id><snippet>dict</snippet></ROW><ROW><id>17655475</id><snippet>0</snippet></ROW><ROW><id>17655475</id><snippet>sum</snippet></ROW><ROW><id>17655475</id><snippet>foo = "This is a string"
bar = ["this","3"], ["is","5"]
scores = {w: int(n) for w, n in bar}
bar_count = sum(scores.get(word, 0) for word in foo.lower().split())
# 8
</snippet></ROW><ROW><id>17655475</id><snippet>bar</snippet></ROW><ROW><id>17655475</id><snippet>from collections import Counter
start = Counter({w: int(n) for w, n in bar})
total = start + Counter(foo.lower().split())
# Counter({'is': 6, 'this': 4, 'a': 1, 'string': 1})
</snippet></ROW><ROW><id>17655718</id><snippet>typedef struct {
    uint a[SIZE];
    uint b[SIZE];
    uint c[SIZE];
} SumParameters;

kernel void foo(global SumParameters *params){
    int idx = get_global_id(0);
    params-&gt;c[idx] = params-&gt;a[idx] + params-&gt;b[idx];
}
</snippet></ROW><ROW><id>17655718</id><snippet>import numpy as np
import pyopencl as cl

def bar():
   mf = cl.mem_flags
   ctx = cl.create_some_context()
   queue = cl.CommandQueue(self.ctx)
   prog_f = open('kernels.cl', 'r')
   #a = (1, 2, 3), b = (4, 5, 6)          
   ary = np.array([(1, 2, 3), (4, 5, 6), (0, 0, 0)], dtype='uint32, uint32, uint32')
   cl_ary = cl.Buffer(ctx, mf.READ_WRITE | mf.COPY_HOST_PTR, hostbuf=ary)
   #Here should compute the size, but hardcoded for the example
   size = 3
   #The important part follows using -D option
   prog = cl.Program(ctx, prog_f.read()).build(options="-D SIZE={0}".format(size))    
   prog.foo(queue, (size,), None, cl_ary)
   result = np.zeros_like(ary)
   cl.enqueue_copy(queue, result, cl_ary).wait()
   print result
</snippet></ROW><ROW><id>17655718</id><snippet>[(1L, 2L, 3L) (4L, 5L, 6L) (5L, 7L, 9L)]
</snippet></ROW><ROW><id>17655805</id><snippet>ByteArrayInputStream</snippet></ROW><ROW><id>17655805</id><snippet>Graph.parse</snippet></ROW><ROW><id>17655805</id><snippet>InputSource</snippet></ROW><ROW><id>17655805</id><snippet>InputSource</snippet></ROW><ROW><id>17655805</id><snippet>StringIO</snippet></ROW><ROW><id>17655805</id><snippet>StringIO</snippet></ROW><ROW><id>17655805</id><snippet>Graph.parse</snippet></ROW><ROW><id>17655805</id><snippet>block = '''&lt;?xml version="1.0"?&gt;
&lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"&gt;
 …
&lt;/rdf:RDF&gt;'''
Graph g;
g.parse( StringIO.StringIO(block), format='xml')
</snippet></ROW><ROW><id>17655940</id><snippet>io</snippet></ROW><ROW><id>17655940</id><snippet>open</snippet></ROW><ROW><id>17656060</id><snippet>set()</snippet></ROW><ROW><id>17656060</id><snippet>&gt;&gt;&gt; lst = ['A', 'B', 'C', 'A', 'B']
&gt;&gt;&gt; {{x}: y for x, y in enumerate(lst)}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;dictcomp&gt;
TypeError: unhashable type: 'set'
</snippet></ROW><ROW><id>17656060</id><snippet>frozenset()</snippet></ROW><ROW><id>17656060</id><snippet>{frozenset([x]): y for x, y in enumerate(lst)}
</snippet></ROW><ROW><id>17656060</id><snippet>&gt;&gt;&gt; lst = ['A', 'B', 'C', 'A', 'B']
&gt;&gt;&gt; {frozenset([x]): y for x, y in enumerate(lst)}
{frozenset([4]): 'B', frozenset([2]): 'C', frozenset([3]): 'A', frozenset([0]): 'A', frozenset([1]): 'B'}
</snippet></ROW><ROW><id>17656060</id><snippet>hashable</snippet></ROW><ROW><id>17656060</id><snippet>__hash__()</snippet></ROW><ROW><id>17656060</id><snippet>__eq__()</snippet></ROW><ROW><id>17656060</id><snippet>__cmp__()</snippet></ROW><ROW><id>17656060</id><snippet>set</snippet></ROW><ROW><id>17656060</id><snippet>dct = {}
for x, y in enumerate(lst):
    dct.setdefault(y, set()).add(x)
</snippet></ROW><ROW><id>17656060</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17656060</id><snippet>.setdefault()</snippet></ROW><ROW><id>17656060</id><snippet>from collections import defaultdict
dct = defaultdict(set)
for x, y in enumerate(lst):
    dct[y].add(x)
</snippet></ROW><ROW><id>17656060</id><snippet>&gt;&gt;&gt; lst = ['A', 'B', 'C', 'A', 'B']
&gt;&gt;&gt; dct = {}
&gt;&gt;&gt; for x, y in enumerate(lst):
...     dct.setdefault(y, set()).add(x)
... 
&gt;&gt;&gt; dct
{'A': set([0, 3]), 'C': set([2]), 'B': set([1, 4])}
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dct = defaultdict(set)
&gt;&gt;&gt; for x, y in enumerate(lst):
...     dct[y].add(x)
... 
&gt;&gt;&gt; dct
defaultdict(&lt;type 'set'&gt;, {'A': set([0, 3]), 'C': set([2]), 'B': set([1, 4])})
</snippet></ROW><ROW><id>17656182</id><snippet>False</snippet></ROW><ROW><id>17656182</id><snippet>if (last - first) &lt; 2: return s[first] == e or s[last] == e
</snippet></ROW><ROW><id>17656182</id><snippet>s[first] != e</snippet></ROW><ROW><id>17656182</id><snippet>s[last] != e</snippet></ROW><ROW><id>17656914</id><snippet>&gt;&gt;&gt; L = [1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; L[7]
8
&gt;&gt;&gt; L[7:8]  #NOTE: it's a *list* of a single element!
[8]
</snippet></ROW><ROW><id>17656914</id><snippet>rec[7]</snippet></ROW><ROW><id>17656914</id><snippet>records = [[rec[7].replace(' ', '')] + rec[9:12] + rec[3:4] for rec in records]
</snippet></ROW><ROW><id>17657174</id><snippet>scipy.stats.rv_discrete.cdf</snippet></ROW><ROW><id>17657174</id><snippet>mydist = scipy.stats.rv_discrete(name = 'mydistribution', values=(WindDir,Freq))
</snippet></ROW><ROW><id>17657174</id><snippet>.rv_discrete</snippet></ROW><ROW><id>17657174</id><snippet>Iteration</snippet></ROW><ROW><id>17657174</id><snippet>WindDir</snippet></ROW><ROW><id>17657174</id><snippet>Freq</snippet></ROW><ROW><id>17657174</id><snippet>import sys
import scipy.stats
import numpy 
import random

def CDF_Random(probs,Iterations):
    WindDir = [0,45,90,135,180,225,270,315]
    Freq = probs
    mydist = scipy.stats.rv_discrete(name = 'mydistribution', values=(WindDir,Freq))  
    cdf_rand=mydist.rvs(size=Iterations)    
    #cdf=scipy.stats.rv_discrete.cdf(cdf_rand,[.5,1,10,50,99])
    return (cdf_rand)

if __name__ == '__main__':
    probs = [random.randint(1,10) for _ in xrange(8)]
    probs = [float(p)/sum(probs) for p in probs]
    Iterations = 30
    numpy.set_printoptions(threshold=Iterations)
    a=CDF_Random(probs,Iterations)
</snippet></ROW><ROW><id>17657174</id><snippet>&gt;&gt;&gt; a
array([  0, 270, 180, 180,   0, 180,  45,  45, 270, 270, 270,   0,  45,
        45, 180,  45, 180, 180, 270, 225,  45, 180, 270, 315, 225,  45,
       180, 180,   0,   0])
</snippet></ROW><ROW><id>17657174</id><snippet>mydist.cdf([array of percentiles to evaluate at here])</snippet></ROW><ROW><id>17657174</id><snippet>&gt;&gt;&gt; mydist.cdf([1,10,25,50,75,99])
array([ 0.1627907 ,  0.1627907 ,  0.1627907 ,  0.30232558,  0.30232558,
        0.39534884])
</snippet></ROW><ROW><id>17657174</id><snippet>print mydist.__doc__</snippet></ROW><ROW><id>17657288</id><snippet>function! TestPy() range

    let startline = line("'&lt;")
    let endline = line("'&gt;")
    echo "vim-start:".startline . " vim-endline:".endline
python &lt;&lt; EOF
import vim
s = "I was set in python"
vim.command("let sInVim = '%s'"% s)
start = vim.eval("startline")
end = vim.eval("endline")
print "start, end in python:%s,%s"% (start, end)
EOF
    echo sInVim
endfunction
</snippet></ROW><ROW><id>17657288</id><snippet>:call TestPy()</snippet></ROW><ROW><id>17657288</id><snippet>vim-start:3 vim-endline:5
start, end in python:3,5
I was set in python
</snippet></ROW><ROW><id>17657288</id><snippet>vim-start:3 vim-endline:5   #this line was printed in vim,  by vim's echo.
start, end in python:3,5    # this line was prrinted in py, using the vim var startline and endline. this answered your question two.
I was set in python         # this line was printed in vim, the variable value was set in python. it answered your question one.
</snippet></ROW><ROW><id>17657288</id><snippet>range</snippet></ROW><ROW><id>17657288</id><snippet>range</snippet></ROW><ROW><id>17657288</id><snippet>range</snippet></ROW><ROW><id>17657288</id><snippet>a:firstline and a:lastline</snippet></ROW><ROW><id>17657288</id><snippet>line("'&lt;")</snippet></ROW><ROW><id>17657288</id><snippet>function! TestPy2()
python &lt;&lt; EOF
import vim
s = range(10)
vim.command("let sInVim = %s"% s)
EOF
    echo type(sInVim)
    echo sInVim
endfunction
</snippet></ROW><ROW><id>17657288</id><snippet>3
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>17657304</id><snippet>#!usr/bin/env python  
#coding=utf-8  

import pyaudio  
import wave  

#define stream chunk   
chunk = 1024  

#open a wav format music  
f = wave.open(r"/usr/share/sounds/alsa/Rear_Center.wav","rb")  
#instantiate PyAudio  
p = pyaudio.PyAudio()  
#open stream  
stream = p.open(format = p.get_format_from_width(f.getsampwidth()),  
                channels = f.getnchannels(),  
                rate = f.getframerate(),  
                output = True)  
#read data  
data = f.readframes(chunk)  

#paly stream  
while data != '':  
    stream.write(data)  
    data = f.readframes(chunk)  

#stop stream  
stream.stop_stream()  
stream.close()  

#close PyAudio  
p.terminate()  
</snippet></ROW><ROW><id>17657434</id><snippet>import os,sys 
import pygame as pg


DIRECTDICT = {pg.K_LEFT  : (-1, 0),
          pg.K_RIGHT : ( 1, 0),
          pg.K_UP    : ( 0,-1),
          pg.K_DOWN  : ( 0, 1)}


class Player:

    def __init__(self,rect,speed):
          self.rect = pg.Rect(rect)
          self.speed = speed
          self.movement = [0,0]
          self.make_image()
    def make_image(self):

         self.image = pg.Surface((self.rect.size)).convert_alpha()
         self.image.fill((0,0,0,0))
         pg.draw.ellipse(self.image,(0,0,0),(1,1,self.rect.size[0]-2,self.rect.size[1]-2))
         pg.draw.ellipse(self.image,(255,0,0),(6,6,self.rect.size[0]-12,self.rect.size[1]-12))
    def update(self,Surf):

        self.rect.move_ip(self.movement)
        self.draw(Surf)

    def draw(self,Surf):
        Surf.blit(self.image,self.rect)


def quit_game():

     pg.quit();sys.exit()

state = 0
points = []
def game(Player):
    global state
    global points
    keys = pg.key.get_pressed()
    for event in pg.event.get():
        if event.type == pg.QUIT or keys[pg.K_ESCAPE]:
            quit_game()
        ### change state when space is pressed
        if event.type == pg.KEYDOWN and event.key == pg.K_SPACE:
            if state == 0:
                state = 1
            elif state == 1:
                state = 2
            else:
                ### clear the points list
                state = 0
                points = []
    Player.movement = [0,0]
    for key in DIRECTDICT:
        if keys[key]:
            for i in (0,1):
                Player.movement[i] += DIRECTDICT[key][i]*Player.speed

### helper method to get each element of a list and each previous element
def offset(iterable):
    prev = None
    for elem in iterable:
        yield prev, elem
        prev = elem

def main(Surf,Player):
       global state
       global points
       game(Player) 
       Surf.fill((255,255,255)) 
       Player.update(Surf) 
       ### in state 1, start "collecting" the player position
       if state == 1:
           points.append(Player.rect.center)
       ### in state 1 and 2, draw the line
       if state in (1, 2):
           for p1, p2 in offset(points):
                if p1 and p2:
                   pg.draw.line(Surf, (255,0,0), p1, p2)
       pg.display.update() 


if __name__ == "__main__":
      os.environ['SDL_VIDEO_CENTERED'] = '1' 
      Surface = pg.display.set_mode((500,500))
      pg.init()
      Myclock = pg.time.Clock() 
      Myplayer = Player((250,250,100,100),3)  
      while 1:
              main(Surface,Myplayer)  
              Myclock.tick(60) 
</snippet></ROW><ROW><id>17657440</id><snippet>with open(infile, 'r') as f:
    polite_f = politer(f)
    current_id = None
    while True:
        id_dict = {}
        for i, line in enumerate(polite_f):
            id = get_id_from_line(line)
            if id != current_id:
                polite_f.send(line)
                break
            else:
                id_dict[i] = process_line(line)
        if current_id is not None:
            yield id_dict
        current_id = id
</snippet></ROW><ROW><id>17657619</id><snippet>clf.predict</snippet></ROW><ROW><id>17657619</id><snippet>GaussianNB</snippet></ROW><ROW><id>17657619</id><snippet>predict</snippet></ROW><ROW><id>17657619</id><snippet>predict_proba</snippet></ROW><ROW><id>17657635</id><snippet>Pool.map</snippet></ROW><ROW><id>17657635</id><snippet>partial(f, y=y)</snippet></ROW><ROW><id>17657635</id><snippet>def g(x, y=y):
    return f(x, y)

p.map(g, x)
</snippet></ROW><ROW><id>17657635</id><snippet>functools.partial</snippet></ROW><ROW><id>17657635</id><snippet>g</snippet></ROW><ROW><id>17657635</id><snippet>import multiprocessing as mp
import functools

def f(x, y):
    return x**2 + y

x = [1,2,3]
y = 10

g = functools.partial(f, y=y)

if __name__ == '__main__':
    p = mp.Pool()
    print(p.map(g, x))
</snippet></ROW><ROW><id>17657635</id><snippet>[11, 14, 19]</snippet></ROW><ROW><id>17657635</id><snippet>f</snippet></ROW><ROW><id>17657635</id><snippet>def</snippet></ROW><ROW><id>17657635</id><snippet>lambda</snippet></ROW><ROW><id>17657635</id><snippet>pickle</snippet></ROW><ROW><id>17657661</id><snippet>class MyTestCase(unittest.TestCase):
  def setUp(self):
     self.setUpMyStuff()

  def tearDown(self):
     self.tearDownMyStuff()

class TestSpam(MyTestCase):
  def setUpMyStuff(self):
    # called before execution of every method named test_...
    self.cnx = # ... connect to database

  def tearDownMyStuff(self):
    # called after execution of every method named test_...
    self.cnx.close()

  def test_get_data(self):
    cur = self.cnx.cursor()
    ...
</snippet></ROW><ROW><id>17657966</id><snippet>[x for x in collection]
</snippet></ROW><ROW><id>17657966</id><snippet>[A for B in C]</snippet></ROW><ROW><id>17657966</id><snippet>A</snippet></ROW><ROW><id>17657966</id><snippet>B</snippet></ROW><ROW><id>17657966</id><snippet>C</snippet></ROW><ROW><id>17657966</id><snippet>C</snippet></ROW><ROW><id>17657966</id><snippet>[x.lower() for x in words]
</snippet></ROW><ROW><id>17657966</id><snippet>[x for y in collection for x in y] # [A for B in C for D in E]
</snippet></ROW><ROW><id>17657966</id><snippet>A</snippet></ROW><ROW><id>17657966</id><snippet>A</snippet></ROW><ROW><id>17657966</id><snippet>B</snippet></ROW><ROW><id>17657966</id><snippet>A</snippet></ROW><ROW><id>17657966</id><snippet>B</snippet></ROW><ROW><id>17657966</id><snippet>C</snippet></ROW><ROW><id>17657966</id><snippet>C</snippet></ROW><ROW><id>17657966</id><snippet>D</snippet></ROW><ROW><id>17657966</id><snippet>E</snippet></ROW><ROW><id>17657966</id><snippet>A</snippet></ROW><ROW><id>17657966</id><snippet>E</snippet></ROW><ROW><id>17657966</id><snippet>B</snippet></ROW><ROW><id>17657966</id><snippet>for y in collection:     #      for B in C:
    for x in y:          #          for D in E: (in this case: for A in B)
        # receive x      #              # receive A
</snippet></ROW><ROW><id>17657966</id><snippet>for x in y</snippet></ROW><ROW><id>17657966</id><snippet>[z for b in a for c in b for d in c ... for z in y]
</snippet></ROW><ROW><id>17657966</id><snippet>for b in a:
    for c in b:
        for d in c:
            ...
                for z in y:
                    # have z
</snippet></ROW><ROW><id>17657966</id><snippet>Engine</snippet></ROW><ROW><id>17657966</id><snippet>Car</snippet></ROW><ROW><id>17657966</id><snippet>Car</snippet></ROW><ROW><id>17657966</id><snippet>Car</snippet></ROW><ROW><id>17657966</id><snippet>Tail</snippet></ROW><ROW><id>17657966</id><snippet>[line for line in file if not line.startswith('#')] 
</snippet></ROW><ROW><id>17657966</id><snippet>#</snippet></ROW><ROW><id>17657966</id><snippet>for line in file:
    if not line.startswith('#'):
        # have line
</snippet></ROW><ROW><id>17657966</id><snippet>&gt;&gt;&gt; z = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
&gt;&gt;&gt; [x for y in z if sum(y)&gt;10 for x in y if x &lt; 10]
[5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>17657966</id><snippet>&gt;&gt;&gt; for y in z:
    if sum(y)&gt;10:
        for x in y:
            if x &lt; 10:
                print x

5
6
7
8
9
</snippet></ROW><ROW><id>17658046</id><snippet>raw_input()</snippet></ROW><ROW><id>17658046</id><snippet>raw_input()</snippet></ROW><ROW><id>17658046</id><snippet>stdin</snippet></ROW><ROW><id>17658046</id><snippet>sys.argv</snippet></ROW><ROW><id>17658046</id><snippet>import sys

code, num = sys.argv[1].split()
</snippet></ROW><ROW><id>17658046</id><snippet>$result = exec('python test.py "' . $code . ' ' . $num . '"');
</snippet></ROW><ROW><id>17658046</id><snippet>$result = exec('python test.py "' . $code . '" "' . $num . '"');
</snippet></ROW><ROW><id>17658046</id><snippet>import sys

code, num = sys.argv[1:]
</snippet></ROW><ROW><id>17658090</id><snippet>row</snippet></ROW><ROW><id>17658090</id><snippet>&gt;&gt;&gt; ''.split(' ')
['']
</snippet></ROW><ROW><id>17658090</id><snippet>entry = row[4]</snippet></ROW><ROW><id>17658090</id><snippet> for row in reader:
      entry = row[4]  
</snippet></ROW><ROW><id>17658204</id><snippet>@param</snippet></ROW><ROW><id>17658204</id><snippet>@return</snippet></ROW><ROW><id>17658445</id><snippet>zip</snippet></ROW><ROW><id>17658445</id><snippet>[(int(seed) - int(leech)) for seed, leech in zip(seeds, leechs)]
</snippet></ROW><ROW><id>17658582</id><snippet>numpy</snippet></ROW><ROW><id>17658582</id><snippet>import numpy as np
i = np.array(-1.040e-05+3.1676e-03j)
i.real

&gt;&gt; array(-1.04e-05)

i.imag

&gt;&gt; array(0.0031676)
</snippet></ROW><ROW><id>17658680</id><snippet>import sys

for line in sys.stdin:
    sys.stdout.write(line)
</snippet></ROW><ROW><id>17658680</id><snippet>$ echo -e "first line\nsecond line" | python python_iterate_stdin.py 
first line
second line
</snippet></ROW><ROW><id>17658680</id><snippet>$ echo "days go by and still" | python python_iterate_stdin.py
days go by and still
</snippet></ROW><ROW><id>17658689</id><snippet>Country</snippet></ROW><ROW><id>17658689</id><snippet>User</snippet></ROW><ROW><id>17658689</id><snippet>User</snippet></ROW><ROW><id>17658689</id><snippet>country</snippet></ROW><ROW><id>17658689</id><snippet>country = models.ForeignKey('Country',null=False) 
</snippet></ROW><ROW><id>17658861</id><snippet>req = urllib.request.Request(url, urllib.parse.urlencode(params).encode('ASCII'))
</snippet></ROW><ROW><id>17659083</id><snippet>x=open("filename.txt").readlines()
</snippet></ROW><ROW><id>17659083</id><snippet>print [key for key, group in groupby(x) if len(list(group)) &lt; 2]
</snippet></ROW><ROW><id>17659174</id><snippet>x</snippet></ROW><ROW><id>17659174</id><snippet>x</snippet></ROW><ROW><id>17659174</id><snippet>x</snippet></ROW><ROW><id>17659400</id><snippet>not (4 in a)</snippet></ROW><ROW><id>17659400</id><snippet>not (x in y)</snippet></ROW><ROW><id>17659400</id><snippet>x not in y</snippet></ROW><ROW><id>17659438</id><snippet>GetAdaptersInfo</snippet></ROW><ROW><id>17659438</id><snippet>DeviceIoControl</snippet></ROW><ROW><id>17659570</id><snippet>class DupeSeries(Model):
    description = CharField(...)
    members = ManyToManyField("image", related_name="dupes", ...)
</snippet></ROW><ROW><id>17659570</id><snippet>img = image(title="foo!", image="/path/to/image.jpg")
dup_of_img = image(title="foo!dup", image="/path/to/dup/image.jpg")
img.save()
dup_of_img.save()

dupes_of_foo = DupeSeries(description="foo! lookalikes")
dupes_of_foo.members.add(img, dup_of_img)

# Notice how *img.dupes.all()* returns both image instances.
assert(list(img.dupes.all()) == [img, dup_of_img])
</snippet></ROW><ROW><id>17659604</id><snippet>ForeignKey</snippet></ROW><ROW><id>17659604</id><snippet>{% for Directory in crawlerapp %}
&lt;li&gt;Business Name:  {{ Directory.Bussiness_name }}&lt;/li&gt;
    Description:    {{ Directory.Description }}&lt;/br&gt;
    Contact Number: {{ Directory.Number }}&lt;/br&gt;
    Web_URL:        {{ Directory.Web_url }}&lt;/br&gt;
    Adress:         {% for Adress in Directory.adress_set.all %}{{ Adress.adress_name }}&lt;/br&gt;{% endfor %}
    Photo:          {% for Photos in Directory.photos_set.all %}{{ Photos.Photo_name }}&lt;/br&gt;{% endfor %}&lt;/br&gt;
{% endfor %}
</snippet></ROW><ROW><id>17659631</id><snippet>&gt;&gt;&gt; [{"name": d["name"]} for d in mine]
[{'name': 'Al'}, {'name': 'Bert'}, {'name': 'Charles'}]
</snippet></ROW><ROW><id>17659631</id><snippet>def project(key, d):
    return {k: d[k]}

map(partial(project, "name"), mine)
</snippet></ROW><ROW><id>17659631</id><snippet>lambda</snippet></ROW><ROW><id>17659631</id><snippet>map(lambda d: {"name": d["name"]}, mine)
</snippet></ROW><ROW><id>17659647</id><snippet>^</snippet></ROW><ROW><id>17659647</id><snippet>$</snippet></ROW><ROW><id>17659647</id><snippet>(?:^|\s)(\/blog\/articles)(?:$|\s)</snippet></ROW><ROW><id>17659647</id><snippet>(?:^|\s)            Matches, but does not capture (?:), a line start (^) OR (|) a whitespace (\s)
(\/blog\/articles)  Matches and captures /blog/articles.
(?:$|\s)            Matches, but does not capture (?:), a line end ($) OR (|) a whitespace (\s)
</snippet></ROW><ROW><id>17659647</id><snippet>/blog/articles</snippet></ROW><ROW><id>17659811</id><snippet>n = [6, 10, 14]</snippet></ROW><ROW><id>17659811</id><snippet>n</snippet></ROW><ROW><id>17659811</id><snippet>lst</snippet></ROW><ROW><id>17659811</id><snippet>double</snippet></ROW><ROW><id>17659811</id><snippet>x *= 2</snippet></ROW><ROW><id>17659811</id><snippet>x = x * 2</snippet></ROW><ROW><id>17659811</id><snippet>x</snippet></ROW><ROW><id>17659811</id><snippet>x</snippet></ROW><ROW><id>17659811</id><snippet>double</snippet></ROW><ROW><id>17659811</id><snippet>def double(lst):
    for i, x in enumerate(lst):
        x *= 2
        print("x = %s" % x)
        print("lst[%d] = %s" % (i, lst[i]))
</snippet></ROW><ROW><id>17659811</id><snippet>def double(lst):
    for i in xrange(len(lst)):
        lst[i] *= 2
</snippet></ROW><ROW><id>17659811</id><snippet>def double(lst):
    return [x * 2 for x in lst]
</snippet></ROW><ROW><id>17659892</id><snippet>from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
from project2spider.items import Project2Item
from scrapy.http import Request

class ProjectSpider(BaseSpider):
    name = "project2spider"
    allowed_domains = ["http://directory.thesun.co.uk"]
    current_page_no = 1 
    start_urls = [ 
        "http://directory.thesun.co.uk/find/uk/computer-repair"
    ]   

    def get_next_url(self, fired_url):
        if '/page/' in fired_url:
            url, page_no = fired_url.rsplit('/page/', 1)
        else:
            if self.current_page_no != 1:
                #end of scroll
                return 
        self.current_page_no += 1
        return "http://directory.thesun.co.uk/find/uk/computer-repair/page/%s" % self.current_page_no

    def parse(self, response):
        fired_url = response.url
        hxs = HtmlXPathSelector(response)
        sites = hxs.select('//div[@class="abTbl "]')
        for site in sites:
            item = Project2Item()
            item['Catogory'] = site.select('span[@class="icListBusType"]/text()').extract()
            item['Bussiness_name'] = site.select('a/@title').extract()
            item['Description'] = site.select('span[last()]/text()').extract()
            item['Number'] = site.select('span[@class="searchInfoLabel"]/span/@id').extract()
            item['Web_url'] = site.select('span[@class="searchInfoLabel"]/a/@href').extract()
            item['adress_name'] = site.select('span[@class="searchInfoLabel"]/span/text()').extract()
            item['Photo_name'] = site.select('img/@alt').extract()
            item['Photo_path'] = site.select('img/@src').extract()
            yield item
        next_url = self.get_next_url(fired_url)
        if next_url:
            yield Request(next_url, self.parse, dont_filter=True)
`
</snippet></ROW><ROW><id>17660060</id><snippet>with open(wholefName) as fh:
    json.dumps(fh.read().splitlines())
</snippet></ROW><ROW><id>17660060</id><snippet>json</snippet></ROW><ROW><id>17660067</id><snippet>class A</snippet></ROW><ROW><id>17660067</id><snippet>class B</snippet></ROW><ROW><id>17660067</id><snippet>class C</snippet></ROW><ROW><id>17660067</id><snippet>class A</snippet></ROW><ROW><id>17660067</id><snippet>class MetaA(type):
    def __init__(cls, name, bases, clsdict):
        super(MetaA, cls).__init__(name, bases, clsdict)
        for base in bases:
            if hasattr(base, 'array'):
                cls.array = base.array + cls.array
                break

class A(object):
    __metaclass__ = MetaA
    array = [1]

    def __init__(self):
        pass

class B(A):
    array = [2, 3]

    def __init__(self):
        super(B, self).__init__()

class C(B):
    array = [4]

    def __init__(self):
        super(C, self).__init__()
</snippet></ROW><ROW><id>17660067</id><snippet>print(A.array)
# [1]

print(B.array)
# [1, 2, 3]

print(C.array)
# [1, 2, 3, 4]
</snippet></ROW><ROW><id>17660104</id><snippet>SELECT * FROM tab1 order by field desc limit 10;
</snippet></ROW><ROW><id>17660717</id><snippet>sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib
</snippet></ROW><ROW><id>17660717</id><snippet>export DYLD_LIBRARY_PATH=/usr/local/mysql-5.5.15-osx10.6-x86/lib/:$DYLD_LIBRARY_PATH
</snippet></ROW><ROW><id>17660847</id><snippet>conv</snippet></ROW><ROW><id>17660847</id><snippet>for-loop</snippet></ROW><ROW><id>17660847</id><snippet>&gt;&gt;&gt; [i[2] for i in conv]
['YYY.ORG;YYY.ORG_FLAGS=97570000000', 'YYY.ORG_PN=XXXXXXXXXXX;YYY.ORG_FLAGS=ED100000']
</snippet></ROW><ROW><id>17660855</id><snippet>flags</snippet></ROW><ROW><id>17660855</id><snippet>re.sub(r'WoRd',r'Word',line, flags=re.IGNORECASE)
</snippet></ROW><ROW><id>17660926</id><snippet>from_google_doc = "Caf\x82"
</snippet></ROW><ROW><id>17660926</id><snippet>é</snippet></ROW><ROW><id>17660926</id><snippet>&gt;&gt;&gt; from_google_doc = 'Caf\x82'
&gt;&gt;&gt; print from_google_doc.decode('cp437')
Café
&gt;&gt;&gt; from unidecode import unidecode
&gt;&gt;&gt; unidecode(from_google_doc.decode('cp437'))
'Cafe'
</snippet></ROW><ROW><id>17660926</id><snippet>é</snippet></ROW><ROW><id>17660958</id><snippet>python-mode</snippet></ROW><ROW><id>17660958</id><snippet>K</snippet></ROW><ROW><id>17661056</id><snippet>super()</snippet></ROW><ROW><id>17661056</id><snippet>class DTestWrapper(BaseA if inLinux else unittest.TestCase):
    def setUpDTest(self):
        parent_method = 'setUpTestCase' if inLinux else 'setUp'
        getattr(super(DTestWrapper, self), parent_method)()

    def tearDownDTest(self):
        parent_method = 'tearDownTestCase' if inLinux else 'tearDown'
        getattr(super(DTestWrapper, self), parent_method)()
</snippet></ROW><ROW><id>17661056</id><snippet>BaseA</snippet></ROW><ROW><id>17661056</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>17661056</id><snippet>if</snippet></ROW><ROW><id>17661056</id><snippet>BaseA.tearDown = BaseA.tearDownTestCase</snippet></ROW><ROW><id>17661056</id><snippet>super()</snippet></ROW><ROW><id>17661056</id><snippet>super()</snippet></ROW><ROW><id>17661090</id><snippet>copy</snippet></ROW><ROW><id>17661090</id><snippet>info.copy()</snippet></ROW><ROW><id>17661090</id><snippet>copy.deepcopy(info)</snippet></ROW><ROW><id>17661090</id><snippet>#!/usr/bin/python

import copy

class Test:
    def __init__(self):
        ...
        info = {'tBin'   : __tBin.copy(),
                'pBin'   : __pBin.copy(),
                'results': __results}
        ...
        self.__tests = {'test1' : copy.deepcopy(info),
                        'test2' : copy.deepcopy(info),
                        'test3' : copy.deepcopy(info)}

    def test(self):
        ...

...
</snippet></ROW><ROW><id>17661183</id><snippet>csv</snippet></ROW><ROW><id>17661183</id><snippet>csv.reader</snippet></ROW><ROW><id>17661183</id><snippet>unicode_csv_reader</snippet></ROW><ROW><id>17661183</id><snippet>csvReader = unicode_csv_reader(codecs.open('/home/kuberkaul/Downloads/csv.csv', 'rb', 'utf-16'))
for row in csvReader:
    print row
</snippet></ROW><ROW><id>17661183</id><snippet>print</snippet></ROW><ROW><id>17661183</id><snippet>str</snippet></ROW><ROW><id>17661183</id><snippet>repr</snippet></ROW><ROW><id>17661183</id><snippet>[u'foo', u'bar', u'\u0910\u0911']</snippet></ROW><ROW><id>17661183</id><snippet>print u', '.join(row)</snippet></ROW><ROW><id>17661183</id><snippet>u</snippet></ROW><ROW><id>17661183</id><snippet>encode</snippet></ROW><ROW><id>17661203</id><snippet>echo exec("whoami");
</snippet></ROW><ROW><id>17661203</id><snippet>echo exec('whoami') . "&lt;br&gt;";
echo exec("ls -l test.txt") . "&lt;br&gt;";
echo exec("ls -l somefile.py") . "&lt;br&gt;";
</snippet></ROW><ROW><id>17661203</id><snippet>passthru('python somefile.py 1 2&gt;&amp;1');
</snippet></ROW><ROW><id>17661212</id><snippet>path = r"foo\rar"</snippet></ROW><ROW><id>17661259</id><snippet>for start_list in square_list: 
    square_list.append(start_list**2)
    sort(square_list)
</snippet></ROW><ROW><id>17661259</id><snippet>for start_list in square_list:</snippet></ROW><ROW><id>17661259</id><snippet>start_list</snippet></ROW><ROW><id>17661259</id><snippet>square_list</snippet></ROW><ROW><id>17661259</id><snippet>start_list</snippet></ROW><ROW><id>17661259</id><snippet>for x in start_list: 
    square_list.append(x ** 2)
</snippet></ROW><ROW><id>17661259</id><snippet>x</snippet></ROW><ROW><id>17661259</id><snippet>start_list</snippet></ROW><ROW><id>17661259</id><snippet>square_list</snippet></ROW><ROW><id>17661259</id><snippet>sort(square_list)</snippet></ROW><ROW><id>17661259</id><snippet>square_list.sort()</snippet></ROW><ROW><id>17661259</id><snippet>for x in start_list: 
    square_list.append(x ** 2)
square_list.sort()
</snippet></ROW><ROW><id>17661354</id><snippet>def QuickSort(A,p,r):
    if r-p &lt;= 1: return
    pivotIndex = Partition(A,p,r)
    QuickSort(A,p,pivotIndex)
    QuickSort(A,pivotIndex+1,r)
    return A
def Partition(A,p,r):

    m = A[p]
    i = p+1

    for j in range( p+1 , r ):
        if A[j] &lt; m:
            A[j] , A[i] = A[i] , A[j]
        i= i + 1
    A[p], A[i-1] = A[i-1] , A[p]
    return i-1
</snippet></ROW><ROW><id>17661383</id><snippet>mRNA</snippet></ROW><ROW><id>17661465</id><snippet>self</snippet></ROW><ROW><id>17661465</id><snippet>self.headers</snippet></ROW><ROW><id>17661465</id><snippet>headers</snippet></ROW><ROW><id>17661465</id><snippet>headers</snippet></ROW><ROW><id>17661465</id><snippet>__init__</snippet></ROW><ROW><id>17661465</id><snippet>__init__</snippet></ROW><ROW><id>17661465</id><snippet>super(post_httprequest, self).__init__()
</snippet></ROW><ROW><id>17661465</id><snippet>object</snippet></ROW><ROW><id>17661465</id><snippet>PostHttpRequest</snippet></ROW><ROW><id>17661497</id><snippet>output = re.sub('\(\w*\)', '', input)
</snippet></ROW><ROW><id>17661497</id><snippet>re.sub</snippet></ROW><ROW><id>17661497</id><snippet>re.sub(...)</snippet></ROW><ROW><id>17661497</id><snippet>line = re.sub(...)</snippet></ROW><ROW><id>17661526</id><snippet>magnitude = np.sqrt(sobel_X**2 + sobel_Y**2)
Y, X = np.ogrid[0:angle.shape[0], 0:angle.shape[1]]
hog[Y, X, angle] += magnitude
</snippet></ROW><ROW><id>17661526</id><snippet>hog</snippet></ROW><ROW><id>17661526</id><snippet>import numpy as np

def using_for_loop(hog, sobel_Y, sobel_X):
    for y in xrange(0, sobel_Y.shape[0]):
        for x in xrange(0, sobel_X.shape[1]):
            base_angle = np.arctan2(sobel_Y[y, x], sobel_X[y, x]) * 180 / np.pi
            if base_angle &lt; 0:
                base_angle += 360
            angle = int(round(base_angle / 45))
            if angle == 8:
                angle = 0
            hog[y, x, angle] += np.sqrt(sobel_X[y, x] ** 2 +
                                        sobel_Y[y, x] ** 2)
    return hog

def using_indexing(hog, sobel_Y, sobel_X):
    base_angle = np.arctan2(sobel_Y, sobel_X) * 180 / np.pi
    base_angle[base_angle &lt; 0] += 360
    angle = (base_angle / 45).round().astype(np.uint8)
    angle[angle == bins] = 0
    magnitude = np.sqrt(sobel_X ** 2 + sobel_Y ** 2)
    Y, X = np.ogrid[0:angle.shape[0], 0:angle.shape[1]]
    hog[Y, X, angle] += magnitude
    return hog

bins = 8
sobel_Y, sobel_X = np.meshgrid([1, 2, 3], [4, 5, 6, 7])
# hog = np.zeros(sobel_X.shape + (bins,))
hog = np.random.random(sobel_X.shape + (bins,))
answer = using_for_loop(hog, sobel_Y, sobel_X)
result = using_indexing(hog, sobel_Y, sobel_X)
assert np.allclose(answer, result)
</snippet></ROW><ROW><id>17661526</id><snippet>In [62]: angle.shape
Out[62]: (4, 3)
</snippet></ROW><ROW><id>17661526</id><snippet>In [74]: hog[:,:,angle].shape
Out[74]: (4, 3, 4, 3)
</snippet></ROW><ROW><id>17661526</id><snippet>In [75]: Y, X = np.ogrid[0:angle.shape[0], 0:angle.shape[1]]
</snippet></ROW><ROW><id>17661526</id><snippet>hog[Y, X, angle]</snippet></ROW><ROW><id>17661526</id><snippet>magnitude</snippet></ROW><ROW><id>17661526</id><snippet>In [76]: hog[Y, X, angle].shape
Out[76]: (4, 3)

In [77]: magnitude = np.sqrt(sobel_X ** 2 + sobel_Y ** 2)

In [78]: magnitude.shape
Out[78]: (4, 3)
</snippet></ROW><ROW><id>17661526</id><snippet>hog[Y, X, angle]</snippet></ROW><ROW><id>17661526</id><snippet>Y</snippet></ROW><ROW><id>17661526</id><snippet>X</snippet></ROW><ROW><id>17661526</id><snippet>angle</snippet></ROW><ROW><id>17661526</id><snippet>hog[Y, X, angle]
</snippet></ROW><ROW><id>17661526</id><snippet>(i,j)</snippet></ROW><ROW><id>17661526</id><snippet>hog[Y, X, angle]</snippet></ROW><ROW><id>17661526</id><snippet>hog[Y[i,j], X[i,j], angle[i,j]]
</snippet></ROW><ROW><id>17661526</id><snippet>hog[Y, X, angle] += magnitude</snippet></ROW><ROW><id>17661589</id><snippet>with open('def') as f1, open('abc') as f2, open('out.txt', 'w') as f3:
    in_atoms = False # state -&gt; in_atoms (only 2 states)

    # read `def` file content into memory as set
    references = set(f1.read().split())

    # Removed a loop which iterate reference file.
    for line in f2:
        if line.startswith('Atoms'):
            in_atoms = True
        elif line.startswith('Velocities'):
            in_atoms = False
        elif in_atoms:
            values = line.split()
            # Check number match with one of the references.
            if values and values[0] in references:
                values[2] = '100'
                line = ' '.join(values) + '\n'
        f3.write(line)
</snippet></ROW><ROW><id>17661602</id><snippet>http</snippet></ROW><ROW><id>17661602</id><snippet>ParseResult</snippet></ROW><ROW><id>17661602</id><snippet>ParseResult.geturl()</snippet></ROW><ROW><id>17661745</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; set1 = ['word1','word2','word3']
&gt;&gt;&gt; set2 = ['new_word1','new_word2','new_word3']
&gt;&gt;&gt; translation = dict(zip(set1, set2))
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; text = '''
... here I am word1 talking about word2.
... ipsum ipsumipsum ipsum ipsum ipsum ipsum ipsum
... ipsum ipsumipsum word1 ipsum ipsum ipsum ipsum
... ipsum ipsumipsum ipsum ipsum word2 ipsum ipsum
... ipsum ipsumipsum ipsum ipsum ipsum ipsum ipsum
... '''
&gt;&gt;&gt; 
&gt;&gt;&gt; # compile a pattern matching any of the words
... pattern = re.compile('(%s)' % '|'.join(set1))
&gt;&gt;&gt; 
&gt;&gt;&gt; def translate(match):
...     return translation[match.group(0)]
... 
&gt;&gt;&gt; # replace with: for line in book:
&gt;&gt;&gt; for line in text.splitlines():
...     print pattern.sub(translate, line)
... 

here I am new_word1 talking about new_word2.
ipsum ipsumipsum ipsum ipsum ipsum ipsum ipsum
ipsum ipsumipsum new_word1 ipsum ipsum ipsum ipsum
ipsum ipsumipsum ipsum ipsum new_word2 ipsum ipsum
ipsum ipsumipsum ipsum ipsum ipsum ipsum ipsum
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17661745</id><snippet>count</snippet></ROW><ROW><id>17661745</id><snippet>count2</snippet></ROW><ROW><id>17661745</id><snippet>with open(outputfile, 'w') as output:
    with open(file, 'r+') as book:
        for line in book:
            output.write(pattern.sub(translate, line))
</snippet></ROW><ROW><id>17661830</id><snippet>int</snippet></ROW><ROW><id>17661830</id><snippet>hours = int("14")

if (hours &gt; 14):
        print "yes"
</snippet></ROW><ROW><id>17661830</id><snippet>'int' &lt; 'string'</snippet></ROW><ROW><id>17661830</id><snippet>In [79]: "14" &gt; 14
Out[79]: True

In [80]: 14 &gt; 14
Out[80]: False
</snippet></ROW><ROW><id>17661927</id><snippet>pool = multiprocessing.Pool()
def start_iteration():
    return Popen('iterate.exe', stdout=PIPE, stdin=PIPE, stderr=PIPE)
pool.apply_async(start_iteration)
while (fileexists == False):
    fileexists = os.path.exists(filelocation)
Popen.kill(???)
</snippet></ROW><ROW><id>17662140</id><snippet>obj.__class__.__name__
</snippet></ROW><ROW><id>17662140</id><snippet>class MyClass:

    def __init__(self):
        self.display_name = self.__class__.__name__
</snippet></ROW><ROW><id>17662159</id><snippet>rows = myListOfRows
for col in xrange(len(rows[0])):
    checkCol(rows, col)

def checkCol(rows, c):
    for r in xrange(len(rows)-1):
        if rows[r][c] != -9999 or -9999 != rows[r+1][c]: # checking for elements that are not already -9999.00
            if abs(rows[r][c] - rows[r+1][c]) &gt; 0.03:
                rows[max([r,r+1], key=lambda rr: rows[rr][c])][c] = -9999.00
</snippet></ROW><ROW><id>17662224</id><snippet>class Song(object):
    def __init__(self, name):
        self.name = name

songNames = ['song1', 'song2', 'song3']

songs = []
for name in songNames:
    songs.append(Song(name))
</snippet></ROW><ROW><id>17662224</id><snippet>Song</snippet></ROW><ROW><id>17662224</id><snippet>songs = {}
for name in songNames:
    songs[name] = Song(name)
</snippet></ROW><ROW><id>17662224</id><snippet>songs = [Song(name) for name in songNames]
songs = {name: Song(name) for name in songNames}
</snippet></ROW><ROW><id>17662224</id><snippet>class songData: 
    title = "" 
    artist = "" 
    directory = "" 
    tempStr = ""
    def description(self): 
        desc_str = "%s is by %s, located at %s" %(self.title, self.artist,self.directory)
        return desc_str
</snippet></ROW><ROW><id>17662224</id><snippet>self.title</snippet></ROW><ROW><id>17662224</id><snippet>__str__</snippet></ROW><ROW><id>17662224</id><snippet>description</snippet></ROW><ROW><id>17662224</id><snippet>print(song)</snippet></ROW><ROW><id>17662224</id><snippet>print(song.description())</snippet></ROW><ROW><id>17662224</id><snippet>class SongData:
    def __init__(self, title="", artist="", directory=""):
        self.title, self.artist, self.directory = title, artist, directory
    def __str__(self): 
        desc_str = "%s is by %s, located at %s" % (self.title, self.artist,self.directory)
        return desc_str
</snippet></ROW><ROW><id>17662224</id><snippet>Song</snippet></ROW><ROW><id>17662224</id><snippet>songNames = ['song1', 'song2', 'song3']
songs = {name: SongData(title=name) for name in songNames}
</snippet></ROW><ROW><id>17662224</id><snippet>name = input('What song do you want info on?') # raw_input, if Python 2
print(songs[name])
</snippet></ROW><ROW><id>17662224</id><snippet>Song Windowlicker is by , located at</snippet></ROW><ROW><id>17662224</id><snippet>def __str__(self):
    desc_str = "Title: %s \nArtist: %s \nDirectory: %s \n" %(self.title,
                                        self.artist, self.directory)
    print desc_str
</snippet></ROW><ROW><id>17662224</id><snippet>return desc_str</snippet></ROW><ROW><id>17662224</id><snippet>print</snippet></ROW><ROW><id>17662224</id><snippet>songNames = ['song1', 'song2', 'song3']
artistNames = ['artist1', 'artist2', 'artist3']
dirNames = ['dir1', 'dir2', 'dir3']

songs = {name: SongData(title=name) for name in songNames}
artists = {band: SongData(artist=band) for band in artistNames}
directorys = {direc: SongData(directory=direc) for direc in dirNames}
</snippet></ROW><ROW><id>17662224</id><snippet>SongData</snippet></ROW><ROW><id>17662224</id><snippet>zip</snippet></ROW><ROW><id>17662224</id><snippet>&gt;&gt;&gt; zip(songNames, artistNames, dirNames)
[('song1', 'artist1', 'dir1'),
 ('song2', 'artist2', 'dir2'),
 ('song3', 'artist3', 'dir3')]
</snippet></ROW><ROW><id>17662224</id><snippet>SongData</snippet></ROW><ROW><id>17662224</id><snippet>songs = {}
for title, artist, directory in zip(songNames, artistNames, dirNames):
     songs[title] = SongData(title, artist, directory)
</snippet></ROW><ROW><id>17662224</id><snippet>songs = {title: SongData(title, artist, directory)
         for title, artist, directory in zip(songNames, artistNames, dirNames)}
</snippet></ROW><ROW><id>17662224</id><snippet>songs = {t[0]: SongData(*t) for songtuple in zip(songNames, artistNames, dirNames)}
</snippet></ROW><ROW><id>17662224</id><snippet>zip</snippet></ROW><ROW><id>17662224</id><snippet>songs = {SongData(songNames[i], artistNames[i], dirNames[i])
         for i in range(len(songNames))}
</snippet></ROW><ROW><id>17662224</id><snippet>for i in range(len(foo))</snippet></ROW><ROW><id>17662224</id><snippet>&gt;&gt;&gt; print songs['song1']
Title: song1 
Artist: artist1 
Directory: directory1
</snippet></ROW><ROW><id>17662224</id><snippet>\n</snippet></ROW><ROW><id>17662224</id><snippet>%s</snippet></ROW><ROW><id>17662240</id><snippet>PYTHONHOME</snippet></ROW><ROW><id>17662240</id><snippet>/usr</snippet></ROW><ROW><id>17662240</id><snippet>/usr</snippet></ROW><ROW><id>17662240</id><snippet>python-config --prefix</snippet></ROW><ROW><id>17662240</id><snippet>/usr/bin</snippet></ROW><ROW><id>17662240</id><snippet>/usr</snippet></ROW><ROW><id>17662363</id><snippet>dLon = lon2 - lon1;
y = Math.sin(dLon) * Math.cos(lat2);
x = Math.cos(lat1)*Math.sin(lat2) -
        Math.sin(lat1)*Math.cos(lat2)*Math.cos(dLon);
brng = Math.atan2(y, x).toDeg();
</snippet></ROW><ROW><id>17662363</id><snippet>  if (brng &lt; 0) {
       brng+= 360;
  }
</snippet></ROW><ROW><id>17662379</id><snippet>pd.merge(df_one, df_two, on='A')
   A   B1   B2   B3   C1   C2   C3
0  1  0.5  0.2  0.1  1.0  2.0  5.0
1  1  0.0  0.3  0.2  1.0  2.0  5.0
2  2  0.2  0.1  0.0  9.0  3.0  4.0
3  3  0.1  0.5  0.9  2.1  0.7  2.3
4  4  0.3  0.3  0.0  9.0  1.1  3.4
5  4  0.2  0.1  0.3  9.0  1.1  3.4
6  4  0.1  0.2  0.5  9.0  1.1  3.4

    pd.merge(df_one, df_two, on='A').apply(lambda s: sum([s['B%d'%i] * s['C%d'%i] for i in range(1, 4)]) , axis=1)
0    1.40
1    1.60
2    2.10
3    2.63
4    3.03
5    2.93
6    2.82
</snippet></ROW><ROW><id>17662389</id><snippet>s = {a, b, c}</snippet></ROW><ROW><id>17662389</id><snippet>t = {1..5}</snippet></ROW><ROW><id>17662389</id><snippet>l = {1..2700}</snippet></ROW><ROW><id>17662389</id><snippet>Let `X_lst` be 1 if the unit at location l gets assigned a sensor of type `s` in year `t`
           0 otherwise

 Let `N_st` be the total number of sensors of type s used in year t
</snippet></ROW><ROW><id>17662389</id><snippet>Let E_lt be the total number of exposures in location l in year t. 
</snippet></ROW><ROW><id>17662389</id><snippet>Y_lst_ctype</snippet></ROW><ROW><id>17662389</id><snippet>ctype</snippet></ROW><ROW><id>17662389</id><snippet>poor</snippet></ROW><ROW><id>17662389</id><snippet>N_st = X_1st + X_2st + ... + X_2700st for each sensor type s, and for each time period t
</snippet></ROW><ROW><id>17662389</id><snippet>N_a1 &lt;= 300
N_b1 &lt;= 900
N_c1 &lt;= 1500
</snippet></ROW><ROW><id>17662389</id><snippet>Y</snippet></ROW><ROW><id>17662389</id><snippet>Y_lst_excellent + Y_lst_good + Y_lst_poor + Y_lst_verypoor = 1
</snippet></ROW><ROW><id>17662389</id><snippet>E_lt x X_lat &lt;= 100 + M (1- Y_lat_good)

E_lt x X_lat &lt;= 250 + M (1- Y_lat_poor)

E_lt x X_lat &lt;= 400 + M (1- Y_lat_verypoor)
</snippet></ROW><ROW><id>17662389</id><snippet>Y_1st + Y_2st + Y_3st + ... + Y_2700st &lt;= 0.12 x Nst (for each sensor type s, year t)
</snippet></ROW><ROW><id>17662389</id><snippet>R_lst = 1 if location l gets a NEW sensor of type s at the end of year t
</snippet></ROW><ROW><id>17662555</id><snippet>MyModelName.objects.filter(timestamp__gte=(datetime.datetime.now() - datetime.timedelta(seconds=30)))
</snippet></ROW><ROW><id>17662811</id><snippet>+</snippet></ROW><ROW><id>17662811</id><snippet>&gt;&gt;&gt;cur.execute('&lt;removed&gt;') #one of my own tables
&gt;&gt;&gt;tmp = cur.fetchall()
&gt;&gt;&gt;type(tmp[0]) #this is KEY!  You need to change the type

&lt;type 'pyodbc.Row'&gt;

&gt;&gt;&gt;tt = [1,2,3]
&gt;&gt;&gt;tmp[0] + tt #gives the same error you have

Traceback (most recent call last):
  File "&lt;pyshell#13&gt;", line 1, in &lt;module&gt;
tmp[0] + tt
TypeError: unsupported operand type(s) for +: 'pyodbc.Row' and 'list'

&gt;&gt;&gt;list(tmp[0]) + tt  #returns a list as you wanted

[14520496, ..., 1, 2, 3]
</snippet></ROW><ROW><id>17662942</id><snippet>==</snippet></ROW><ROW><id>17662942</id><snippet>~all()</snippet></ROW><ROW><id>17662942</id><snippet>&gt;&gt;&gt; df
     a  b  c  d  e  f  g  h  i
foo  1  0  0  1  1  0  0  1  1
bar  1  1  1  1  1  1  1  1  1
bas  0  1  1  1  1  0  1  1  1
qux  0  1  0  1  1  0  0  0  0
&gt;&gt;&gt; (df == 1).all(axis=1)
foo    False
bar     True
bas    False
qux    False
dtype: bool
&gt;&gt;&gt; df[~(df == 1).all(axis=1)]
     a  b  c  d  e  f  g  h  i
foo  1  0  0  1  1  0  0  1  1
bas  0  1  1  1  1  0  1  1  1
qux  0  1  0  1  1  0  0  0  0
</snippet></ROW><ROW><id>17662942</id><snippet>df[~df.all(axis=1)]</snippet></ROW><ROW><id>17663043</id><snippet>c</snippet></ROW><ROW><id>17663094</id><snippet>topn</snippet></ROW><ROW><id>17663094</id><snippet>show_topics()</snippet></ROW><ROW><id>17663094</id><snippet>lda.show_topics()</snippet></ROW><ROW><id>17663094</id><snippet>len(dictionary)</snippet></ROW><ROW><id>17663094</id><snippet>for i in lda.show_topics(topn=len(dictionary)):
    print i
</snippet></ROW><ROW><id>17663116</id><snippet>&gt;&gt;&gt; {name: d[i] for i, name in enumerate(names)}
{'Larry': 1000.0, 'Moe': 990, 'Curly': 1200.5}
</snippet></ROW><ROW><id>17663116</id><snippet>d.values()</snippet></ROW><ROW><id>17663116</id><snippet>enumerate</snippet></ROW><ROW><id>17663116</id><snippet>d</snippet></ROW><ROW><id>17663116</id><snippet>x == d.keys()</snippet></ROW><ROW><id>17663116</id><snippet>x</snippet></ROW><ROW><id>17663131</id><snippet>cd your/package/directory
virtualenv env
source env/bin/activate
pip install -r path/to/your/saved/requirements/file
</snippet></ROW><ROW><id>17663131</id><snippet>virtualenv</snippet></ROW><ROW><id>17663288</id><snippet>contourf</snippet></ROW><ROW><id>17663288</id><snippet>x</snippet></ROW><ROW><id>17663288</id><snippet>y = y(x)</snippet></ROW><ROW><id>17663288</id><snippet>z = z(x)</snippet></ROW><ROW><id>17663288</id><snippet>z</snippet></ROW><ROW><id>17663288</id><snippet>y</snippet></ROW><ROW><id>17663288</id><snippet>import pylab as plt
x = plt.linspace(0,2,100)
y = plt.linspace(0,10,100)

z = [[plt.sinc(i) for i in x] for j in y]

CS = plt.contourf(x, y, z, 20, # \[-1, -0.1, 0, 0.1\],
                        cmap=plt.cm.rainbow)
plt.colorbar(CS)
plt.plot(x,2+plt.sin(y), "--k")
</snippet></ROW><ROW><id>17663315</id><snippet>&gt;&gt;&gt; s = set()
</snippet></ROW><ROW><id>17663569</id><snippet>RequestContext</snippet></ROW><ROW><id>17663569</id><snippet>update_module</snippet></ROW><ROW><id>17663569</id><snippet>HttpResponse</snippet></ROW><ROW><id>17663595</id><snippet>import scipy.spatial as sp
x = np.linspace(0, Lx, Nx)
y = np.linspace(0, Ly, Ny)
z = np.linspace(0, Lz, Nz)

#Manipulate x,y,z here to obtain the dimensions you are looking for

center=np.array([x0,y0,z0])

#First mask the obvious points- may actually slow down your calculation depending.
x=x[abs(x-x0)&lt;cutoff]
y=y[abs(y-y0)&lt;cutoff]
z=z[abs(z-z0)&lt;cutoff]


#Generate grid of points
X,Y,Z=np.meshgrid(x,y,z)
data=np.vstack((X.ravel(),Y.ravel(),Z.ravel())).T

distance=sp.distance.cdist(data,center.reshape(1,-1)).ravel()
points_in_sphere=data[distance&lt;cutoff]
</snippet></ROW><ROW><id>17663595</id><snippet>tree=sp.cKDTree(data)
mask=tree.query_ball_point(center,cutoff)
points_in_sphere=data[mask]
</snippet></ROW><ROW><id>17663595</id><snippet>distance=np.power(np.sum(np.power(data-center,2),axis=1),.5)
points_in_sphere=data[distance&lt;cutoff]
</snippet></ROW><ROW><id>17663787</id><snippet>-B</snippet></ROW><ROW><id>17663787</id><snippet>python -B
</snippet></ROW><ROW><id>17663787</id><snippet>PYTHONDONTWRITEBYTECODE</snippet></ROW><ROW><id>17663787</id><snippet>export PYTHONDONTWRITEBYTECODE=1
</snippet></ROW><ROW><id>17663787</id><snippet>.pyc</snippet></ROW><ROW><id>17663873</id><snippet>if "urls" in record["entities"]:
</snippet></ROW><ROW><id>17663873</id><snippet>msgurl = record["entities"].get("urls")
</snippet></ROW><ROW><id>17664015</id><snippet>json.load()</snippet></ROW><ROW><id>17664015</id><snippet>import json

with open('yourfile') as infile:
    for user, intlist in json.load(infile).iteritems():
        for item in intlist:
</snippet></ROW><ROW><id>17664015</id><snippet>.iteritems()</snippet></ROW><ROW><id>17664135</id><snippet>stdin</snippet></ROW><ROW><id>17664135</id><snippet>content = sys.stdin.read()
data = json.loads(content)
newURL = data.get('newURL')
if newURL == 'dog':
    newURL = 'http://www.DogsAreCool.com'
elif not newURL:
    newURL = defaultPageURL
response = urllib2.urlopen(newURL)
# ...
</snippet></ROW><ROW><id>17664715</id><snippet>//*[local-name()="namespace"]/@idx:resourceLocation
</snippet></ROW><ROW><id>17664715</id><snippet>//idx:namespace/@idx:resourceLocation
</snippet></ROW><ROW><id>17664715</id><snippet>@idx:resourceLocation</snippet></ROW><ROW><id>17664715</id><snippet>"http://resource.belframework.org/belframework/1.0/namespace"</snippet></ROW><ROW><id>17664715</id><snippet>'''//idx:namespace[
       starts-with(@idx:resourceLocation,
       "http://resource.belframework.org/belframework/1.0/namespace")]
           /@idx:resourceLocation'''
</snippet></ROW><ROW><id>17664715</id><snippet>import lxml.etree as ET

content = '''\
&lt;root xmlns:xsi="http://www.xxx.com/zzz/yyy" xmlns:idx="http://www.belscript.org/schema/index"&gt;
&lt;idx:index xsi:schemaLocation="http://www.belscript.org/schema/index index.xsd" idx:belframework_version="2.0"&gt;
   &lt;idx:namespaces&gt;
      &lt;idx:namespace idx:resourceLocation="http://resource.belframework.org/belframework/1.0/namespace/entrez-gene-ids-hmr.belns"/&gt;
      &lt;idx:namespace idx:resourceLocation="http://resource.belframework.org/belframework/1.0/namespace/hgnc-approved-symbols.belns"/&gt;
      &lt;idx:namespace idx:resourceLocation="http://resource.belframework.org/belframework/1.0/namespace/mgi-approved-symbols.belns"/&gt;
      &lt;/idx:namespaces&gt;
      &lt;/idx:index&gt;
      &lt;/root&gt;
      '''

root = ET.XML(content)
namespaces = {'xsi': 'http://www.xxx.com/zzz/yyy',
              'idx': 'http://www.belscript.org/schema/index'}
for item in root.xpath(
    '//*[local-name()="namespace"]/@idx:resourceLocation', namespaces=namespaces):
    print(item)
</snippet></ROW><ROW><id>17664715</id><snippet>http://resource.belframework.org/belframework/1.0/namespace/entrez-gene-ids-hmr.belns
http://resource.belframework.org/belframework/1.0/namespace/hgnc-approved-symbols.belns
http://resource.belframework.org/belframework/1.0/namespace/mgi-approved-symbols.belns
</snippet></ROW><ROW><id>17664724</id><snippet>YouTube</snippet></ROW><ROW><id>17664724</id><snippet>definition == 'hd'</snippet></ROW><ROW><id>17664724</id><snippet>videoStreams</snippet></ROW><ROW><id>17664724</id><snippet>heightPixels &gt;= 720</snippet></ROW><ROW><id>17664724</id><snippet>bitrateBps &gt;= 8*1024*1024</snippet></ROW><ROW><id>17664724</id><snippet>pyffmpeg</snippet></ROW><ROW><id>17664836</id><snippet>multiprocessing</snippet></ROW><ROW><id>17664836</id><snippet>lst[0] = new_value</snippet></ROW><ROW><id>17664836</id><snippet>word_list</snippet></ROW><ROW><id>17664836</id><snippet>while</snippet></ROW><ROW><id>17664836</id><snippet>worker</snippet></ROW><ROW><id>17664836</id><snippet>multiprocessing</snippet></ROW><ROW><id>17664836</id><snippet>fork</snippet></ROW><ROW><id>17664940</id><snippet>if</snippet></ROW><ROW><id>17664940</id><snippet>{  k:d[k] if k in d else k:0 for k in v}</snippet></ROW><ROW><id>17664940</id><snippet>if</snippet></ROW><ROW><id>17664940</id><snippet>d[k] if k in d else k:0</snippet></ROW><ROW><id>17664940</id><snippet>SyntaxError</snippet></ROW><ROW><id>17664940</id><snippet>a = {} # Desired dictionary
for k in v:
    a[k] = d[k] if k in d else 0
</snippet></ROW><ROW><id>17664940</id><snippet>k:</snippet></ROW><ROW><id>17664940</id><snippet>{ k:d[k] if k in d else 0 for k in v } # Works
</snippet></ROW><ROW><id>17664960</id><snippet>name</snippet></ROW><ROW><id>17664960</id><snippet>(r'^mokr/comment/(\d+)/delete/$', mokr.delete_comment, name="delete_comment"),
</snippet></ROW><ROW><id>17664960</id><snippet>{% url 'delete_comment' comment.id %}
</snippet></ROW><ROW><id>17665188</id><snippet>requirements = open("requirements.txt", "r")
shell_script = open("pip.sh", "w+")
shell_script.write("sudo apt-get install python-pip\n")
for line in requirements:
    shell_script.write("sudo pip install -I " + line)
</snippet></ROW><ROW><id>17665207</id><snippet>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
</snippet></ROW><ROW><id>17665207</id><snippet>/usr/bin:/bin
</snippet></ROW><ROW><id>17665207</id><snippet>/usr/local/bin/dbb create_dir
</snippet></ROW><ROW><id>17665207</id><snippet>dbb create_dir</snippet></ROW><ROW><id>17665216</id><snippet>csv</snippet></ROW><ROW><id>17665216</id><snippet>tools_taken</snippet></ROW><ROW><id>17665216</id><snippet>tools_taken</snippet></ROW><ROW><id>17665216</id><snippet>shelve</snippet></ROW><ROW><id>17665216</id><snippet>import contextlib
import shelve

tools = shelve.open('Log.db', 'c', writeback=True)
with contextlib.closing(tools):
    # Add a tool
    tools['hammer'] = {'name': 'Hammer', 'owner': 'Joe', 'tools_taken': False}
    # Check if a tool is taken
    if tools['screwdriver']['tools_taken']:
        print('The screwdriver is taken!')
    # Change a tool's taken status:
    tools['screwdriver']['tools_taken'] = True
    # Remove a tool
    del tools['jackhammer']
</snippet></ROW><ROW><id>17665216</id><snippet>dict</snippet></ROW><ROW><id>17665216</id><snippet>dict</snippet></ROW><ROW><id>17665279</id><snippet>codecs</snippet></ROW><ROW><id>17665279</id><snippet>import sys
import json
import codecs

with codecs.open(sys.argv[1], 'r', 'utf-8') as ifile, codecs.open(sys.argv[2], 'w', 'utf-8') as ofile:
    json.dump(json.load(ifile), ofile, indent=4, ensure_ascii=False)
</snippet></ROW><ROW><id>17665309</id><snippet>DataFrame.update</snippet></ROW><ROW><id>17665309</id><snippet>orient</snippet></ROW><ROW><id>17665309</id><snippet>In [25]: df_test
Out[25]: 
       a   b   c
one    1 NaN NaN
two    2 NaN NaN
three  8   5   4

In [26]: row_replacements = { 'one': [3.1, 2.2], 'two' : [8.8, 4.4] }

In [27]: df_update = DataFrame.from_dict(row_replacements, orient='index')

In [28]: df_update.columns = ['b', 'c']

In [29]: df_test.update(df_update)

In [30]: df_test
Out[30]: 
       a    b    c
one    1  3.1  2.2
two    2  8.8  4.4
three  8  5.0  4.0
</snippet></ROW><ROW><id>17665309</id><snippet>from_dict</snippet></ROW><ROW><id>17665309</id><snippet>orient</snippet></ROW><ROW><id>17665309</id><snippet>DataFrame(...)</snippet></ROW><ROW><id>17665309</id><snippet>['b', 'c']</snippet></ROW><ROW><id>17665309</id><snippet>from_dict</snippet></ROW><ROW><id>17665450</id><snippet>&gt;&gt;&gt; import _ssl
&gt;&gt;&gt; _ssl
#&lt;module '_ssl' from 'the/location/you/wanted.so'&gt;
</snippet></ROW><ROW><id>17665450</id><snippet>.so</snippet></ROW><ROW><id>17665450</id><snippet>.dll</snippet></ROW><ROW><id>17665590</id><snippet>from itertools import permutations
from collections import defaultdict

dd = defaultdict(dict)
for row in correspondingFunctionDatabase:
    for fst, snd in permutations(row, 2):
        dd[tuple(fst)][snd[0]] = snd[1]

print dd['Java', 'System.out.println']['Python']
# print
print dd['JavaScript', 'eval(statement)']['Python']
# eval(statement)
print dd['JavaScript', 'eval(statement)'].get('FakeLanguage', 'No Matching Function')
# No Matching Function
</snippet></ROW><ROW><id>17665590</id><snippet>print list(dd["Java", "s1.replaceAll(str1, str2);"])
# ['Python', 'Haxe', 'JavaScript']
</snippet></ROW><ROW><id>17665656</id><snippet>import sys
from PyQt4.QtGui import *
from PyQt4.QtCore import *
from PyQt4.QtWebKit import *
from xvfbwrapper import Xvfb

class Render(QWebPage):
    def __init__(self, url):
        self.app = QApplication(sys.argv)
        QWebPage.__init__(self)
        self.timerScreen = QTimer()
        self.timerScreen.setInterval(7000)
        self.timerScreen.setSingleShot(True)
        self.timerScreen.timeout.connect(self.getHtml)
        self.loadFinished.connect(self.timerScreen.start)
        self.mainFrame().load(QUrl(url))
        self.app.exec_()
    def getHtml(self):
        self.frame = self.mainFrame()
        self.app.quit()
args = {"nolisten":"tcp"}
vdisplay = Xvfb(**args)
vdisplay.start()
url = 'url here'
r = Render(url)
html = r.frame.toHtml()
print html
f = open("./test.html","wb")
f.write(html.__str__().encode("utf-8"))
f.close()
#stri = str(html).encode("utf-8")
vdisplay.stop()
</snippet></ROW><ROW><id>17665835</id><snippet>sum(iterable, start)
</snippet></ROW><ROW><id>17665835</id><snippet>start + sum(iterable)
</snippet></ROW><ROW><id>17665835</id><snippet>sum([13, 4, 5, 6])
</snippet></ROW><ROW><id>17665835</id><snippet>28</snippet></ROW><ROW><id>17665835</id><snippet>sum([13, 4, 5, 6], 25)
</snippet></ROW><ROW><id>17665835</id><snippet>53</snippet></ROW><ROW><id>17665893</id><snippet>sock.sendall(bytes(data, "utf-8") + b'\0')</snippet></ROW><ROW><id>17665893</id><snippet>recv(1024)</snippet></ROW><ROW><id>17665893</id><snippet>recv(1024)</snippet></ROW><ROW><id>17665893</id><snippet>sendall</snippet></ROW><ROW><id>17665893</id><snippet>buf = bytes(data, "utf-8") + b'\0'
sock.sendall(buf)
bytes_sent = len(buf)
</snippet></ROW><ROW><id>17665893</id><snippet>class NullTerminatedHandler(socketserver.BaseRequestHandler):
    def __init__(self):
        self.buf = b''
    def handle(self):
        self.buf += self.request.recv(1024)
        messages = self.buf.split(b'\0')
        for message in messages[:-1]:
            self.handle_message(message)
        self.buf = self.buf[:-1]
</snippet></ROW><ROW><id>17665893</id><snippet>class MyTCPHandler(NullTerminatedHandler):
    def handle_message(self, message):
        print(str(self.client_address[0]) + " wrote: " + str(message.decode()))
</snippet></ROW><ROW><id>17665893</id><snippet>decode</snippet></ROW><ROW><id>17665893</id><snippet>decode('utf-8')</snippet></ROW><ROW><id>17665893</id><snippet>decode</snippet></ROW><ROW><id>17665893</id><snippet>str</snippet></ROW><ROW><id>17665893</id><snippet>str(message.decode())</snippet></ROW><ROW><id>17665893</id><snippet>format</snippet></ROW><ROW><id>17665893</id><snippet>str</snippet></ROW><ROW><id>17665893</id><snippet>data.encode('utf-8')</snippet></ROW><ROW><id>17665893</id><snippet>bytes(data, 'utf-8')</snippet></ROW><ROW><id>17665928</id><snippet>{i:d[i] for i in d if i!='c'}
</snippet></ROW><ROW><id>17665928</id><snippet>dict((i,d[i]) for i in d if i!='c')
</snippet></ROW><ROW><id>17665936</id><snippet>wsgiref</snippet></ROW><ROW><id>17665936</id><snippet>distribute</snippet></ROW><ROW><id>17665936</id><snippet>pip install</snippet></ROW><ROW><id>17665936</id><snippet>itsdangerous</snippet></ROW><ROW><id>17665936</id><snippet>MarkupSafe</snippet></ROW><ROW><id>17665936</id><snippet>Flask</snippet></ROW><ROW><id>17665936</id><snippet>itsdangerous</snippet></ROW><ROW><id>17665936</id><snippet>Flask</snippet></ROW><ROW><id>17665936</id><snippet>MarkupSafe</snippet></ROW><ROW><id>17665936</id><snippet>Jinja2</snippet></ROW><ROW><id>17665936</id><snippet>Flask</snippet></ROW><ROW><id>17665936</id><snippet>Jinja2</snippet></ROW><ROW><id>17665936</id><snippet>Flask</snippet></ROW><ROW><id>17665936</id><snippet>Jinja2</snippet></ROW><ROW><id>17665965</id><snippet>import numpy as np

lons = [-97.9547, -97.9747, -97.4256]
lats = [35.5322, 35.864, 35.4111]
data = [2,2,2]

xs, ys = np.meshgrid(lons, lats)

dataMesh = np.empty_like(xs)
for i, j, d in zip(lons, lats, data):
    dataMesh[lons.index(i), lats.index(j)] = d

map = Basemap(llcrnrlon = -103.068237, llcrnrlat = 33.610045, urcrnrlon = -94.359076, urcrnrlat = 37.040928, resolution = 'i')  


CS = map.contour(xs, ys, dataMesh)
map.drawstates()
plt.show()
</snippet></ROW><ROW><id>17666070</id><snippet>rowcount = 0
for r in ws.rows:
    firstname = ws.cell(row = rowcount, column = 0)
    lastname = ws.cell(row = rowcount, column = 1)
    rowcount = rowcount + 1
    print firstname.value, lastname.value
</snippet></ROW><ROW><id>17666130</id><snippet>@util.auth_required</snippet></ROW><ROW><id>17666130</id><snippet>def post(self):</snippet></ROW><ROW><id>17666130</id><snippet>/logA600</snippet></ROW><ROW><id>17666130</id><snippet>@util.auth_required</snippet></ROW><ROW><id>17666130</id><snippet>@util.auth_required</snippet></ROW><ROW><id>17666266</id><snippet>from bson.objectid import ObjectId
Document.query.get(_id=ObjectId('51e46f782b5f9411144f0efe'))
</snippet></ROW><ROW><id>17666266</id><snippet>from bson.objectid import ObjectId
from pymongo import Connection
connection = Connection()
db = connection['lenin']
collection = db.document
collection.find_one({'_id': '51e35ee82e3817732b7bf3c1'}) # returns None
collection.find_one({'_id': ObjectId('51e35ee82e3817732b7bf3c1')}) # returns the object
</snippet></ROW><ROW><id>17666287</id><snippet>In [11]: g = df.groupby(['A', 'B'])

In [12]: df1 = df.set_index(['A', 'B'])
</snippet></ROW><ROW><id>17666287</id><snippet>size</snippet></ROW><ROW><id>17666287</id><snippet>In [13]: df1['D'] = g.size()  # unfortunately this doesn't play nice with as_index=False
# Same would work with g['C'].sum()

In [14]: df1.reset_index()
Out[14]:
    A  B  C  D
0   1  5  1  2
1   1  5  1  2
2   1  6  1  1
3   1  7  1  1
4   2  5  1  1
5   2  6  1  2
6   2  6  1  2
7   3  7  1  2
8   3  7  1  2
9   4  6  1  1
10  4  7  1  2
11  4  7  1  2
</snippet></ROW><ROW><id>17666626</id><snippet># Write your function below!
 def fizz_count(input):
     count = 0
     for x in input: # you need to iterate through the input list
         if x =="fizz":
             count = count + 1
     return count
</snippet></ROW><ROW><id>17666626</id><snippet>.count()</snippet></ROW><ROW><id>17666626</id><snippet>def fizz_count(input):
    return input.count("fizz")
</snippet></ROW><ROW><id>17666695</id><snippet>n2 = m * n1 + r</snippet></ROW><ROW><id>17666695</id><snippet>&gt;&gt;&gt; def decompose(number):
...     # returns a generator of tuples (m, n1, r)
...     for m in range(1, number+1):
...         yield m, number // m, number % m
... 
&gt;&gt;&gt; for m, n1, r in decompose(5):
...     print "5 = %s * %s + %s" % (m, n1, r)
... 
5 = 1 * 5 + 0
5 = 2 * 2 + 1
5 = 3 * 1 + 2
5 = 4 * 1 + 1
5 = 5 * 1 + 0
</snippet></ROW><ROW><id>17666695</id><snippet>m</snippet></ROW><ROW><id>17666695</id><snippet>divmod</snippet></ROW><ROW><id>17666695</id><snippet>&gt;&gt;&gt; def decompose(number):
...     return number // m, number % m
... 
&gt;&gt;&gt; m = 2
&gt;&gt;&gt; n1, r = decompose(5)
&gt;&gt;&gt; print "5 = %s * %s + %s" % (m, n1, r)
5 = 2 * 2 + 1
&gt;&gt;&gt; m = 4
&gt;&gt;&gt; n1, r = decompose(5)
&gt;&gt;&gt; print "5 = %s * %s + %s" % (m, n1, r)
5 = 4 * 1 + 1
</snippet></ROW><ROW><id>17666695</id><snippet>lambda</snippet></ROW><ROW><id>17666695</id><snippet>&gt;&gt;&gt; decompose = lambda number: divmod(number, m)
&gt;&gt;&gt; 
&gt;&gt;&gt; m = 2
&gt;&gt;&gt; decompose(5)
(2, 1)
&gt;&gt;&gt; m = 4
&gt;&gt;&gt; decompose(5)
(1, 1)
</snippet></ROW><ROW><id>17666695</id><snippet>&gt;&gt;&gt; decompose = lambda number: divmod(number, m)
&gt;&gt;&gt; 
&gt;&gt;&gt; class Phi_m(list):
...     def __init__(self, items):
...         list.__init__(self)
...         # you need to know at least m numbers.
...         assert len(items) &gt;= m, 'Not enough data'
...         list.extend(self, items)
...     # this is a sparse list
...     # http://stackoverflow.com/questions/1857780/sparse-assignment-list-in-python
...     def __setitem__(self, index, value):
...         missing = index - len(self) + 1
...         if missing &gt; 0:
...             self.extend([None] * missing)
...             list.__setitem__(self, index, value)
...     def __getitem__(self, index):
...         try:
...             value = list.__getitem__(self, index)
...             if value is not None:
...                 # the item is in the list, yeah!
...                 return value
...             # the item is in the list because it was resized
...             # but it is None, so go on and calculate it. 
...         except IndexError:
...             # the item is not in the list, calculate it.
...             pass
...         print 'calculating Fm[%s]' % index
...         A, B = decompose(index)
...         value1 = self.__getitem__(A)
...         value2 = self.__getitem__(A + 1)
...         print 'Fm[A=%s] = %s, Fm[A+1=%s] = %s' % (A, value1, A+1, value2)
...         print 'back to calculating Fm[%s]' % index
...         # m * x[n1] + r * (x[n1 + 1] - x[n1]) = (m - r) * x[n1] + r * x[n1 + 1]
...         # A = n1 ; B = r ; value1 = x[n1] ; value2 = x[n+1]
...         value = (m - B) * value1 + B * value2
...         self.__setitem__(index, value)
...         return value
... 
&gt;&gt;&gt; x = Phi_m([0, 1, 1])
&gt;&gt;&gt; 
&gt;&gt;&gt; x[5]
calculating Fm[5]
calculating Fm[3]
Fm[A=1] = 1, Fm[A+1=2] = 1
back to calculating Fm[3]
Fm[A=2] = 1, Fm[A+1=3] = 2
back to calculating Fm[5]
3
&gt;&gt;&gt; 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17666854</id><snippet>infl = OLSInfluence(res)
</snippet></ROW><ROW><id>17666854</id><snippet>statsmodels 0.5.0</snippet></ROW><ROW><id>17666990</id><snippet>set</snippet></ROW><ROW><id>17666990</id><snippet>s = set("123 ABC")
t = set("135 AZ")
intersect = s &amp; t # or s.intersection(t)
exclusion = s ^ t # or s.symmetric_difference(t)
a_minus_b = s - t # or s.difference(t)
b_minus_a = t - s # or t.difference(s)
</snippet></ROW><ROW><id>17667054</id><snippet>ast</snippet></ROW><ROW><id>17667054</id><snippet>Expression</snippet></ROW><ROW><id>17667054</id><snippet>Variable</snippet></ROW><ROW><id>17667054</id><snippet>ast</snippet></ROW><ROW><id>17667054</id><snippet>Compare</snippet></ROW><ROW><id>17667054</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; x = ast.parse("2 + 2")
&gt;&gt;&gt; print ast.dump(x)
Module(body=[Expr(value=BinOp(left=Num(n=2), op=Add(), right=Num(n=2)))])
&gt;&gt;&gt; eval(compile(ast.Interactive(body=[x.body[0]]), "fakefile", "single"))
4
</snippet></ROW><ROW><id>17667054</id><snippet>Expression</snippet></ROW><ROW><id>17667054</id><snippet>Variable</snippet></ROW><ROW><id>17667054</id><snippet>model</snippet></ROW><ROW><id>17667054</id><snippet>SyntaxError</snippet></ROW><ROW><id>17667054</id><snippet>NotImplementedError</snippet></ROW><ROW><id>17667064</id><snippet>match3 = re.findall(r'&lt;div class="wx-temperature"&gt;\w\w',f)
</snippet></ROW><ROW><id>17667064</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; html = '''&lt;div class="wx-timepart-title"&gt;
Earlier Today
&lt;/div&gt;
&lt;div class="wx-timepart-title"&gt;Tonight&lt;/div&gt;
&lt;div class="wx-data-part wx-first"&gt;
&lt;img src="http://s.imwx.com/v.20120328.084208/img/wxicon/120/29.png" height="120" width="120" alt="Partly Cloudy" class="wx-weather-icon"&gt;
&lt;/div&gt;
&lt;div class="wx-data-part"&gt;
&lt;img src="http://s.imwx.com/v.20120328.084208/img/wxicon/120/30.png" height="120" width="120" alt="Partly Cloudy" class="wx-weather-icon"&gt;
&lt;/div&gt;
&lt;div class="wx-data-part"&gt;
&lt;img src="http://s.imwx.com/v.20120328.084208/img/wxicon/120/29.png" height="120" width="120" alt="Partly Cloudy" class="wx-weather-icon"&gt;
&lt;/div&gt;
&lt;div class="wx-data-part wx-first"&gt;
&lt;div class="wx-temperature"&gt;&lt;span itemprop="temperature-fahrenheit"&gt;89&lt;/span&gt;&lt;span class="wx-degrees"&gt;°&lt;span class="wx-unit"&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class="wx-temperature-label"&gt;FEELS LIKE
&lt;span itemprop="feels-like-temperature-fahrenheit"&gt;94&lt;/span&gt;°&lt;/div&gt;
&lt;/div&gt;
&lt;div class="wx-data-part"&gt;
&lt;div class="wx-temperature"&gt;96&lt;span class="wx-degrees"&gt;°&lt;/span&gt;&lt;/div&gt;
&lt;div class="wx-temperature-label"&gt;HIGH AT 4:45 PM&lt;/div&gt;
&lt;/div&gt;
&lt;div class="wx-data-part"&gt;
&lt;div class="wx-temperature"&gt;80&lt;span class="wx-degrees"&gt;°&lt;/span&gt;&lt;/div&gt;
&lt;div class="wx-temperature-label"&gt;LOW&lt;/div&gt;
&lt;/div&gt;  '''
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; for temp in soup.find_all(class_="wx-temperature"):
    print(temp.text)       # or add these to a list or make a list comprehension


89°F
96°
80°
</snippet></ROW><ROW><id>17667064</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; for temp in soup.find_all(class_="wx-temperature"):
    print(re.match(r'-?\d+', temp.text).group())


89
96
80
</snippet></ROW><ROW><id>17667064</id><snippet>-?</snippet></ROW><ROW><id>17667064</id><snippet>-</snippet></ROW><ROW><id>17667201</id><snippet>account = factory.RelatedFactory(AccountFactory)</snippet></ROW><ROW><id>17667201</id><snippet>UserFactory</snippet></ROW><ROW><id>17667201</id><snippet>username = "bob"</snippet></ROW><ROW><id>17667201</id><snippet>username = factory.Sequence(lambda n : "bob {}".format(n))</snippet></ROW><ROW><id>17667218</id><snippet>QComboBox</snippet></ROW><ROW><id>17667218</id><snippet>pickle</snippet></ROW><ROW><id>17667451</id><snippet>li_sorted = sorted(li, key=lambda x: x['age'])
</snippet></ROW><ROW><id>17667731</id><snippet>separate = []</snippet></ROW><ROW><id>17667731</id><snippet>line.split()</snippet></ROW><ROW><id>17667731</id><snippet>list</snippet></ROW><ROW><id>17667731</id><snippet>line.split()</snippet></ROW><ROW><id>17667731</id><snippet>def Split():
  separate = []
  with open('myFile1.txt','r') as inFile:
    for line in inFile:
      separate.append(line.split())
  return(separate)
</snippet></ROW><ROW><id>17667817</id><snippet>evil()</snippet></ROW><ROW><id>17667817</id><snippet>ZorgError</snippet></ROW><ROW><id>17667817</id><snippet>spam()</snippet></ROW><ROW><id>17667817</id><snippet>EggsError</snippet></ROW><ROW><id>17667817</id><snippet>evil()</snippet></ROW><ROW><id>17667817</id><snippet>os.kill</snippet></ROW><ROW><id>17667817</id><snippet>OSError</snippet></ROW><ROW><id>17667817</id><snippet>kill</snippet></ROW><ROW><id>17667817</id><snippet>TypeError</snippet></ROW><ROW><id>17667817</id><snippet>OverflowError</snippet></ROW><ROW><id>17667817</id><snippet>&gt;&gt;&gt; os.kill(9999999999999, 0)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OverflowError: signed integer is greater than maximum
</snippet></ROW><ROW><id>17667817</id><snippet>OverflowError</snippet></ROW><ROW><id>17667817</id><snippet>except:</snippet></ROW><ROW><id>17667817</id><snippet>except Exception</snippet></ROW><ROW><id>17667817</id><snippet>RuntimeError</snippet></ROW><ROW><id>17667817</id><snippet>ValueError</snippet></ROW><ROW><id>17667817</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>17667817</id><snippet>AttributeError</snippet></ROW><ROW><id>17667817</id><snippet>OverflowError</snippet></ROW><ROW><id>17667817</id><snippet>json.dump</snippet></ROW><ROW><id>17667817</id><snippet>zorg()</snippet></ROW><ROW><id>17667825</id><snippet>parsed_json</snippet></ROW><ROW><id>17667946</id><snippet>user = db.minitwit.user.find_one({'username': request.form['username']})
session['_id'] = str(user['_id'])
</snippet></ROW><ROW><id>17667946</id><snippet>if '_id' in session:
    g.user = db.minitwit.user.find_one({'_id': session['_id']})
</snippet></ROW><ROW><id>17667946</id><snippet>if '_id' in session:
    g.user = db.minitwit.user.find_one({'_id': ObjectId(session['_id'])})
</snippet></ROW><ROW><id>17668009</id><snippet>send()</snippet></ROW><ROW><id>17668009</id><snippet>recv()</snippet></ROW><ROW><id>17668009</id><snippet>recv()</snippet></ROW><ROW><id>17668009</id><snippet>recv()</snippet></ROW><ROW><id>17668009</id><snippet>def send_msg(sock, msg):
    # Prefix each message with a 4-byte length (network byte order)
    msg = struct.pack('&gt;I', len(msg)) + msg
    sock.sendall(msg)

def recv_msg(sock):
    # Read message length and unpack it into an integer
    raw_msglen = recvall(sock, 4)
    if not raw_msglen:
        return None
    msglen = struct.unpack('&gt;I', raw_msglen)[0]
    # Read the message data
    return recvall(sock, msglen)

def recvall(sock, n):
    # Helper function to recv n bytes or return None if EOF is hit
    data = ''
    while len(data) &lt; n:
        packet = sock.recv(n - len(data))
        if not packet:
            return None
        data += packet
   return data
</snippet></ROW><ROW><id>17668009</id><snippet>send_msg</snippet></ROW><ROW><id>17668009</id><snippet>recv_msg</snippet></ROW><ROW><id>17668450</id><snippet>for col in file_reader:
</snippet></ROW><ROW><id>17668450</id><snippet>col</snippet></ROW><ROW><id>17668450</id><snippet>for j in range(0,250):
    spyy = float(col[1]) # here you're grabbing the same second item 250 times
    max1 = max(max1,spyy) # setting the new max to the same value 250 times
    min1 = min(min1,spyy) # setting the new min to the same value 250 times
    file_reader.next() # now you advance, but col is the same so ...
    # it's like you're skipping 250 lines
</snippet></ROW><ROW><id>17668450</id><snippet>col</snippet></ROW><ROW><id>17668450</id><snippet>col</snippet></ROW><ROW><id>17668450</id><snippet>f1=  open('PUT/PUT_SELLING.csv')
file_reader = csv.reader(f1)

spyy_values = []
mins = []
maxes = []

# just saying 'for x in file_reader' is all you need to iterate through the rows
# you don't need to use file_reader.next()
# here I'm also using the enumerate() function
# which automatically returns an index for each row
for row_index, row in enumerate(file_reader):
    # get the value
    spyy_values.append( float(row[1]) )

    if row_index &gt;= 249:
        # get the min of the last 250 values,
        # including this line
        this_min = min(spyy_values[-250:])
        mins.append(this_min)
        # get the max of the last 250 values,
        # including this line
        this_max = max(spyy_values[-250:])
        maxes.append(this_max)

print "total max:", max(maxes)
print "total min:", min(mins)
print "you have %s max values" % len(maxes)
print "you have %s min values" % len(mins)
print "here are the maxes", maxes
print "here are the mins", mins
</snippet></ROW><ROW><id>17668575</id><snippet>from itertools import product, groupby
from collections import defaultdict

def vec_to_spec(v):
    return tuple(len(list(g)) for k,g in groupby(v) if k)

def build_specs(n=6):
    specs = defaultdict(list)
    for v in product([0,1], repeat=n):
        specs[vec_to_spec(v)].append(v)
    return specs

def check(rowvecs, row_counts, col_counts):
    colvecs = zip(*rowvecs)
    row_pass = all(vec_to_spec(r) == tuple(rc) for r,rc in zip(rowvecs, row_counts))
    col_pass = all(vec_to_spec(r) == tuple(rc) for r,rc in zip(colvecs, col_counts))
    return row_pass and col_pass

def nonosolve(row_counts, col_counts): 
    specs = build_specs(len(row_counts))
    possible_rows = [specs[tuple(r)] for r in row_counts]
    sols = []
    for poss in product(*possible_rows):
        if check(poss, row_counts, col_counts):
            sols.append(poss)
    return sols
</snippet></ROW><ROW><id>17668575</id><snippet>&gt;&gt;&gt; rows = [[2,2],[4], [1,1,1,], [2], [1,1,1,], [3,1]]
&gt;&gt;&gt; cols = [[1,1,2],[1,1],[1,1],[4,],[2,1,],[3,2]]
&gt;&gt;&gt; nonosolve(rows, cols)
[((1, 1, 0, 0, 1, 1), (0, 0, 1, 1, 1, 1), (1, 0, 0, 1, 0, 1), 
(0, 0, 0, 1, 1, 0), (1, 0, 0, 1, 0, 1), (1, 1, 1, 0, 0, 1))]
&gt;&gt;&gt; len(_)
1
</snippet></ROW><ROW><id>17668575</id><snippet>&gt;&gt;&gt; rows = [[1,1,1],[1,1,1], [1,1,1,], [1,1,1], [1,1,1], [1,1,1]]
&gt;&gt;&gt; cols = rows
&gt;&gt;&gt; nonosolve(rows, cols)
[((0, 1, 0, 1, 0, 1), (1, 0, 1, 0, 1, 0), (0, 1, 0, 1, 0, 1), (1, 0, 1, 0, 1, 0), (0, 1, 0, 1, 0, 1), (1, 0, 1, 0, 1, 0)), 
((1, 0, 1, 0, 1, 0), (0, 1, 0, 1, 0, 1), (1, 0, 1, 0, 1, 0), (0, 1, 0, 1, 0, 1), (1, 0, 1, 0, 1, 0), (0, 1, 0, 1, 0, 1))]
&gt;&gt;&gt; len(_)
2
</snippet></ROW><ROW><id>17668861</id><snippet>WARNING</snippet></ROW><ROW><id>17668861</id><snippet>DEBUG</snippet></ROW><ROW><id>17668861</id><snippet>import logging
import logging.handlers

a = logging.getLogger('myapp')
a.setLevel(logging.DEBUG)   # set root's level
h = logging.handlers.RotatingFileHandler('foo.log')
h.setLevel(logging.DEBUG)
a.addHandler(h)
print a.getEffectiveLevel() 
a.debug('foo message')
a.warn('warning message')
</snippet></ROW><ROW><id>17668861</id><snippet>import logging
import logging.handlers

a = logging.getLogger('myapp')
a.setLevel(logging.DEBUG)   # set root's level

h = logging.handlers.RotatingFileHandler('foo.log')
h.setLevel(logging.DEBUG)
a.addHandler(h)

h2 = logging.handlers.RotatingFileHandler('foo2.log')
h2.setLevel(logging.WARNING)
a.addHandler(h2)

print a.getEffectiveLevel() 
a.debug('foo message')
a.warn('warning message')
</snippet></ROW><ROW><id>17668861</id><snippet>foo.log</snippet></ROW><ROW><id>17668861</id><snippet>foo2.log</snippet></ROW><ROW><id>17668861</id><snippet>Handler</snippet></ROW><ROW><id>17668861</id><snippet>logging.ERROR</snippet></ROW><ROW><id>17668861</id><snippet>Logger</snippet></ROW><ROW><id>17668861</id><snippet>Logger</snippet></ROW><ROW><id>17669082</id><snippet>buttonclick_mainscreen</snippet></ROW><ROW><id>17669082</id><snippet>gamescreen</snippet></ROW><ROW><id>17669082</id><snippet>pressed</snippet></ROW><ROW><id>17669082</id><snippet>while</snippet></ROW><ROW><id>17669082</id><snippet>gamescreen</snippet></ROW><ROW><id>17669082</id><snippet>canvas.bind</snippet></ROW><ROW><id>17669082</id><snippet>canvas.after</snippet></ROW><ROW><id>17669164</id><snippet>def read(from_filename, buffer, process_queue):
  file = open(from_filename, 'r')
  slice = islice(file, buffer)
  while slice:
    to_process = []
    for line in slice:
      to_process.append(line)
    process_queue.put(to_process)
  process_queue.put('kill')
</snippet></ROW><ROW><id>17669164</id><snippet>slice</snippet></ROW><ROW><id>17669164</id><snippet>islice</snippet></ROW><ROW><id>17669164</id><snippet>while slice</snippet></ROW><ROW><id>17669164</id><snippet>while True</snippet></ROW><ROW><id>17669164</id><snippet>def read(from_filename, buffer, process_queue):
  file = open(from_filename, 'r')

  while True:
    slice = islice(file, buffer)
    to_process = []
    for line in slice:
      to_process.append(line)
    process_queue.put(to_process)
    if not to_process:
        # input ended
        break
  process_queue.put('kill')
</snippet></ROW><ROW><id>17669164</id><snippet>def read_chunk(file, buffer):
    return [file.readline() for _ in xrange(buffer)]
    # or, "more" equivalent to using islice
    #return [line for i,line in itertools.izip(xrange(buffer), file)]

def read(from_filename, buffer, process_queue):
  file = open(from_filename, 'r')

  for to_process in iter(lambda: read_chunk(file, buffer), []):
    process_queue.put(to_process)
  process_queue.put('kill')
</snippet></ROW><ROW><id>17669164</id><snippet>itertools.islice</snippet></ROW><ROW><id>17669447</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>17669447</id><snippet>import itertools

x3 = [next(g) for k, g in itertools.groupby(x2, lambda x:(x.a, x.b))]
</snippet></ROW><ROW><id>17670002</id><snippet>SubGallery</snippet></ROW><ROW><id>17670002</id><snippet>primaryjoin</snippet></ROW><ROW><id>17670002</id><snippet>SubGallery</snippet></ROW><ROW><id>17670002</id><snippet>class Gallery(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(64))
    subgals = db.relationship('Subgallery', backref='author', lazy='dynamic')

    def __repr__(self):
        return '&lt;Gallery - %r&gt;' % (self.title)


class Subgallery(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(64))
    photos = db.relationship('Photo', backref='author', lazy='dynamic')
    gallery_id = db.Column(db.Integer, db.ForeignKey('gallery.id'))

    def __repr__(self):
        return '&lt;Gallery - %r&gt;' % (self.title)


class Photo(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(64))
    href = db.Column(db.String(128))
    subgallery_id = db.Column(db.Integer, db.ForeignKey('subgallery.id'))

    def __repr__(self):
        return '&lt;Photo - %r&gt;' % (self.title)
</snippet></ROW><ROW><id>17670002</id><snippet>db.create_all()
g = Gallery(title = "a")
db.session.add(g)
db.session.commit()
sg = Subgallery(title = "a1", author = g)
db.session.add(sg)
db.session.commit()
p = Photo(title = "a1p", href="href", author = sg)
db.session.add(p)
db.session.commit()
for subgal in g.subgals.all():
    print subgal
    print subgal.author
    for photo in subgal.photos.all():
        print photo
        print photo.author
</snippet></ROW><ROW><id>17670297</id><snippet>:lcd %:p:h</snippet></ROW><ROW><id>17670297</id><snippet>set autochdir</snippet></ROW><ROW><id>17670297</id><snippet>vimrc</snippet></ROW><ROW><id>17670480</id><snippet>+</snippet></ROW><ROW><id>17670480</id><snippet>ListOne = ['jumps', 'over', 'the']
ListTwo = ['The', 'quick', 'brown', 'fox'] + ListOne + ['lazy', 'dog!']
</snippet></ROW><ROW><id>17670480</id><snippet>ListTwo</snippet></ROW><ROW><id>17670480</id><snippet>['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog!']
</snippet></ROW><ROW><id>17671333</id><snippet>class X(object):
    def __init__(self):
        self.count = 5
        self.y = Y(self) #create a y passing in the current instance of x
    def add2(self):
        self.count += 2

class Y(object):
    def __init__(self,parent):
        self.parent = parent #set the parent attribute to a reference to the X which has it
    def modify(self):
        self.parent.add2()
</snippet></ROW><ROW><id>17671333</id><snippet>&gt;&gt;&gt; x = X()
&gt;&gt;&gt; x.y.modify()
&gt;&gt;&gt; x.count
7
</snippet></ROW><ROW><id>17671394</id><snippet>    &gt;&gt;&gt; from matplotlib import rc
    &gt;&gt;&gt; import matplotlib.pylab as pl
    &gt;&gt;&gt; rc('text',usetex=True)
    &gt;&gt;&gt; pl.plot(range(5))
    &gt;&gt;&gt; pl.xticks([1,2.5,4],[r'$1$',r'$\frac{5}{2}$',r'$4$'])
    &gt;&gt;&gt; pl.show()
</snippet></ROW><ROW><id>17671477</id><snippet>i = 0
f = lambda: i
</snippet></ROW><ROW><id>17671477</id><snippet>i</snippet></ROW><ROW><id>17671477</id><snippet>i</snippet></ROW><ROW><id>17671477</id><snippet>def a():
    # first, yield a function to access i
    yield lambda: i
    # now, set i to different values successively
    for i in range(100): yield

g = a() # create generator
f = next(g) # get the function
f() # -&gt; error as i is not set yet
next(g)
f() # -&gt; 0
next(g)
f() # -&gt; 1
# and so on
f.func_closure # -&gt; an object stemming from the local scope of a()
f.func_closure[0].cell_contents # -&gt; the current value of this variable
</snippet></ROW><ROW><id>17671477</id><snippet>i</snippet></ROW><ROW><id>17671477</id><snippet>f()</snippet></ROW><ROW><id>17671477</id><snippet>a()</snippet></ROW><ROW><id>17671477</id><snippet>f()</snippet></ROW><ROW><id>17671477</id><snippet>&gt;&gt;&gt; dis.dis(a)
  2           0 LOAD_CLOSURE             0 (i)
              3 BUILD_TUPLE              1
              6 LOAD_CONST               1 (&lt;code object &lt;lambda&gt; at 0xb72ea650, file "&lt;stdin&gt;", line 2&gt;)
              9 MAKE_CLOSURE             0
             12 YIELD_VALUE
             13 POP_TOP

  3          14 SETUP_LOOP              25 (to 42)
             17 LOAD_GLOBAL              0 (range)
             20 LOAD_CONST               2 (100)
             23 CALL_FUNCTION            1
             26 GET_ITER
        &gt;&gt;   27 FOR_ITER                11 (to 41)
             30 STORE_DEREF              0 (i)
             33 LOAD_CONST               0 (None)
             36 YIELD_VALUE
             37 POP_TOP
             38 JUMP_ABSOLUTE           27
        &gt;&gt;   41 POP_BLOCK
        &gt;&gt;   42 LOAD_CONST               0 (None)
             45 RETURN_VALUE
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_DEREF               0 (i)
              3 RETURN_VALUE
</snippet></ROW><ROW><id>17671477</id><snippet>b()</snippet></ROW><ROW><id>17671477</id><snippet>&gt;&gt;&gt; def b():
...   for i in range(100): yield
&gt;&gt;&gt; dis.dis(b)
  2           0 SETUP_LOOP              25 (to 28)
              3 LOAD_GLOBAL              0 (range)
              6 LOAD_CONST               1 (100)
              9 CALL_FUNCTION            1
             12 GET_ITER
        &gt;&gt;   13 FOR_ITER                11 (to 27)
             16 STORE_FAST               0 (i)
             19 LOAD_CONST               0 (None)
             22 YIELD_VALUE
             23 POP_TOP
             24 JUMP_ABSOLUTE           13
        &gt;&gt;   27 POP_BLOCK
        &gt;&gt;   28 LOAD_CONST               0 (None)
             31 RETURN_VALUE
</snippet></ROW><ROW><id>17671477</id><snippet>        &gt;&gt;   13 FOR_ITER                11 (to 27)
             16 STORE_FAST               0 (i)
</snippet></ROW><ROW><id>17671477</id><snippet>b()</snippet></ROW><ROW><id>17671477</id><snippet>        &gt;&gt;   27 FOR_ITER                11 (to 41)
             30 STORE_DEREF              0 (i)
</snippet></ROW><ROW><id>17671477</id><snippet>a()</snippet></ROW><ROW><id>17671477</id><snippet>STORE_DEREF</snippet></ROW><ROW><id>17671477</id><snippet>cell</snippet></ROW><ROW><id>17671477</id><snippet>STORE_FAST</snippet></ROW><ROW><id>17671477</id><snippet>&gt;&gt;&gt; dis.dis(lambda: i)
  1           0 LOAD_GLOBAL              0 (i)
              3 RETURN_VALUE
</snippet></ROW><ROW><id>17671477</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>17671477</id><snippet>LOAD_DEREF</snippet></ROW><ROW><id>17671477</id><snippet>lambda i=i: i</snippet></ROW><ROW><id>17671477</id><snippet>i</snippet></ROW><ROW><id>17671477</id><snippet>&gt;&gt;&gt; i = 42
&gt;&gt;&gt; f = lambda i=i: i
&gt;&gt;&gt; dis.dis(f)
  1           0 LOAD_FAST                0 (i)
              3 RETURN_VALUE
</snippet></ROW><ROW><id>17671477</id><snippet>f()</snippet></ROW><ROW><id>17671477</id><snippet>lambda i: i</snippet></ROW><ROW><id>17671477</id><snippet>functools.partial</snippet></ROW><ROW><id>17671477</id><snippet>ff = [functools.partial(lambda i: i, x) for x in range(100)]
ff[12]()
ff[54]()
</snippet></ROW><ROW><id>17671490</id><snippet>print number_stats["chm%s" % (value)]
</snippet></ROW><ROW><id>17671490</id><snippet>print number_stats.get("chm%s" % (value), "some_default_value")
</snippet></ROW><ROW><id>17671490</id><snippet>get</snippet></ROW><ROW><id>17671642</id><snippet>{% if athlete_list %}
    Number of athletes: {{ athlete_list|length }}
{% elif athlete_in_locker_room_list %}
    Athletes should be out of the locker room soon!
 {% else %}
    No athletes.
{% endif %}
</snippet></ROW><ROW><id>17671844</id><snippet>__init__</snippet></ROW><ROW><id>17671844</id><snippet>def __init__(self, user=None, *args, **kwargs):
</snippet></ROW><ROW><id>17671844</id><snippet>self</snippet></ROW><ROW><id>17671844</id><snippet>user</snippet></ROW><ROW><id>17671844</id><snippet>form = KeywordFrom(request.POST, instance=keyword)
</snippet></ROW><ROW><id>17671844</id><snippet>user</snippet></ROW><ROW><id>17671844</id><snippet>user</snippet></ROW><ROW><id>17671844</id><snippet>kwargs</snippet></ROW><ROW><id>17671844</id><snippet>def __init__(self, *args, **kwargs):
    user = kwargs.pop('user', None)
    super(KeywordFrom, self).__init__(*args, **kwargs)
    ...etc...
</snippet></ROW><ROW><id>17672042</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;meta charset="utf-8"&gt;
&lt;style&gt;
* { margin: 0; padding: 0; outline: 0; border: 0; }
.block {
  display: inline-block;
  /*margin: 1em;*/
  padding: 1em;
  background: steelblue;
  color: white;
  font: 14pt/1.2 georgia,cambria;
  border-radius: .2em;
}
&lt;/style&gt;
&lt;script src="/src/brython.js"&gt;&lt;/script&gt;
&lt;script type="text/python"&gt;
import time

elt = doc["moving"]

def move():
    elt.style.left = "%spx" %(elt.left+10)
    if(elt.left &gt; 500):
        time.clear_interval(timer)
        del doc["moving"]

timer = time.set_interval(move,200)
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython(1)"&gt;

&lt;div class="block" id="moving" style="position:absolute;top:10;left:20;"&gt;
  Test
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>17672042</id><snippet>doc[object_id]</snippet></ROW><ROW><id>17672042</id><snippet>del doc[object_id]</snippet></ROW><ROW><id>17672078</id><snippet>lxml</snippet></ROW><ROW><id>17672078</id><snippet>lxml.etree.tostring()</snippet></ROW><ROW><id>17672078</id><snippet>$ python
&gt;&gt;&gt; import lxml.etree
&gt;&gt;&gt; doc = """&lt;TR&gt;
...     &lt;TR vAlign="top" align="left"&gt;
...         &lt;!--&lt;TD&gt;&lt;B  onmouseover="tips.Display('Metadata_WEB', event)" onmouseout="tips.Hide('Metadata_WEB')"&gt;Meta Data:&lt;/B&gt;&lt;/TD&gt;--&gt;
...         &lt;TD&gt;&lt;/TD&gt;
...     &lt;/TR&gt;
...  &lt;/TR&gt;"""
&gt;&gt;&gt; xmldoc = lxml.etree.fromstring(doc)
&gt;&gt;&gt; xmldoc
&lt;Element TR at 0x1e79b90&gt;
&gt;&gt;&gt; htmldoc = lxml.etree.HTML(doc)
&gt;&gt;&gt; htmldoc
&lt;Element html at 0x1f0baa0&gt;
&gt;&gt;&gt; lxml.etree.tostring(xmldoc)
'&lt;TR&gt;\n    &lt;TR vAlign="top" align="left"&gt;\n        &lt;!--&lt;TD&gt;&lt;B  onmouseover="tips.Display(\'Metadata_WEB\', event)" onmouseout="tips.Hide(\'Metadata_WEB\')"&gt;Meta Data:&lt;/B&gt;&lt;/TD&gt;--&gt;\n        &lt;TD/&gt;\n    &lt;/TR&gt;\n &lt;/TR&gt;'
&gt;&gt;&gt; lxml.etree.tostring(htmldoc)
'&lt;html&gt;&lt;body&gt;&lt;tr/&gt;&lt;tr valign="top" align="left"&gt;&lt;!--&lt;TD&gt;&lt;B  onmouseover="tips.Display(\'Metadata_WEB\', event)" onmouseout="tips.Hide(\'Metadata_WEB\')"&gt;Meta Data:&lt;/B&gt;&lt;/TD&gt;--&gt;&lt;td/&gt;\n    &lt;/tr&gt;&lt;/body&gt;&lt;/html&gt;'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17672078</id><snippet>html</snippet></ROW><ROW><id>17672078</id><snippet>body</snippet></ROW><ROW><id>17672078</id><snippet>tr</snippet></ROW><ROW><id>17672078</id><snippet>tr</snippet></ROW><ROW><id>17672078</id><snippet>tr</snippet></ROW><ROW><id>17672078</id><snippet>&gt;&gt;&gt; xmldoc.xpath('//tr')
[]
&gt;&gt;&gt; xmldoc.xpath('//TR')
[&lt;Element TR at 0x1e79b90&gt;, &lt;Element TR at 0x1f0baf0&gt;]
&gt;&gt;&gt; xmldoc.xpath('//TR/node()')
['\n    ', &lt;Element TR at 0x1f0baf0&gt;, '\n        ', &lt;!--&lt;TD&gt;&lt;B  onmouseover="tips.Display('Metadata_WEB', event)" onmouseout="tips.Hide('Metadata_WEB')"&gt;Meta Data:&lt;/B&gt;&lt;/TD&gt;--&gt;, '\n        ', &lt;Element TD at 0x1f0bb40&gt;, '\n    ', '\n ']
&gt;&gt;&gt; 
&gt;&gt;&gt; htmldoc.xpath('//tr')
[&lt;Element tr at 0x1f0bbe0&gt;, &lt;Element tr at 0x1f0bc30&gt;]
&gt;&gt;&gt; htmldoc.xpath('//TR')
[]
&gt;&gt;&gt; htmldoc.xpath('//tr/node()')
[&lt;!--&lt;TD&gt;&lt;B  onmouseover="tips.Display('Metadata_WEB', event)" onmouseout="tips.Hide('Metadata_WEB')"&gt;Meta Data:&lt;/B&gt;&lt;/TD&gt;--&gt;, &lt;Element td at 0x1f0bbe0&gt;, '\n    ']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17672078</id><snippet>tr</snippet></ROW><ROW><id>17672078</id><snippet>td</snippet></ROW><ROW><id>17672078</id><snippet>lxml.etree.tostring(element, memthod="text", encoding=unicode).strip()</snippet></ROW><ROW><id>17672078</id><snippet>element</snippet></ROW><ROW><id>17672078</id><snippet>method</snippet></ROW><ROW><id>17672078</id><snippet>&gt;&gt;&gt; map(lambda element: lxml.etree.tostring(element, method="text", encoding=unicode), htmldoc.xpath('//tr'))
[u'', u'\n    ']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17672126</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; line = "00001740 n 3 eintiteas aonán beith 003 @ 00001930 n 0000 ~ 00002137 n 0000 ~ 04424418 n 0000"
&gt;&gt;&gt; re.split(r'(?:#p|#m|%p|[@~+=])', line, 1)
['00001740 n 3 eintiteas aon\xc3\xa1n beith 003 ', ' 00001930 n 0000 ~ 00002137 n 0000 ~ 04424418 n 0000']
</snippet></ROW><ROW><id>17672180</id><snippet>d3 = {key: d1[key] - d2.get(key, 0) for key in d1.keys()}
</snippet></ROW><ROW><id>17672209</id><snippet>re.compile(r"66\.249\.(?:6[4-9]|[78]\d|9[0-5])\.\d{1,3}$")
</snippet></ROW><ROW><id>17672209</id><snippet>\d{1,3}</snippet></ROW><ROW><id>17672209</id><snippet>(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)
</snippet></ROW><ROW><id>17672209</id><snippet>6[4-9]  |  [78][0-9]  |  9[0-5] 

6          can be followed by    4 to 9   --&gt; 64 to 69
7 or 8     can be followed by    0 to 9   --&gt; 70 to 89
9          can be followed by    0 to 5   --&gt; 90 to 95 
</snippet></ROW><ROW><id>17672477</id><snippet>default</snippet></ROW><ROW><id>17672477</id><snippet>e = models.CharField(max_length=18, default=f, unique=True)
</snippet></ROW><ROW><id>17672491</id><snippet>pos_tag</snippet></ROW><ROW><id>17672491</id><snippet>NNP</snippet></ROW><ROW><id>17672491</id><snippet>from nltk.tag import pos_tag

sentence = "Michael Jackson likes to eat at McDonalds"
tagged_sent = pos_tag(sentence.split())
# [('Michael', 'NNP'), ('Jackson', 'NNP'), ('likes', 'VBZ'), ('to', 'TO'), ('eat', 'VB'), ('at', 'IN'), ('McDonalds', 'NNP')]

propernouns = [word for word,pos in tagged_sent if pos == 'NNP']
# ['Michael','Jackson', 'McDonalds']
</snippet></ROW><ROW><id>17672491</id><snippet>Michael</snippet></ROW><ROW><id>17672491</id><snippet>Jackson</snippet></ROW><ROW><id>17672491</id><snippet>penntreebank</snippet></ROW><ROW><id>17672491</id><snippet>POS</snippet></ROW><ROW><id>17672491</id><snippet>POS</snippet></ROW><ROW><id>17672491</id><snippet>NNP</snippet></ROW><ROW><id>17672491</id><snippet>from nltk.tag import pos_tag

sentence = "Michael Jackson took Daniel Jackson's hamburger and Agnes' fries"
tagged_sent = pos_tag(sentence.split())
# [('Michael', 'NNP'), ('Jackson', 'NNP'), ('took', 'VBD'), ('Daniel', 'NNP'), ("Jackson's", 'NNP'), ('hamburger', 'NN'), ('and', 'CC'), ("Agnes'", 'NNP'), ('fries', 'NNS')]

possessives = [word for word in sentence if word.endswith("'s") or word.endswith("s'")]
# ["Jackson's", "Agnes'"]
</snippet></ROW><ROW><id>17672491</id><snippet>ne_chunk</snippet></ROW><ROW><id>17672491</id><snippet>&gt;&gt;&gt; from nltk.tree import Tree; from nltk.chunk import ne_chunk
&gt;&gt;&gt; [chunk for chunk in ne_chunk(tagged_sent) if isinstance(chunk, Tree)]
[Tree('PERSON', [('Michael', 'NNP')]), Tree('PERSON', [('Jackson', 'NNP')]), Tree('PERSON', [('Daniel', 'NNP')])]
&gt;&gt;&gt; [i[0] for i in list(chain(*[chunk.leaves() for chunk in ne_chunk(tagged_sent) if isinstance(chunk, Tree)]))]
['Michael', 'Jackson', 'Daniel']
</snippet></ROW><ROW><id>17672491</id><snippet>ne_chunk</snippet></ROW><ROW><id>17672556</id><snippet>setattr</snippet></ROW><ROW><id>17672556</id><snippet>SC = SimpleClass()
setattr(SC, 'your_new_attribute_name', 'test')
</snippet></ROW><ROW><id>17672556</id><snippet>In [1]: class SimpleClass:
   ...:     def __getattr__(self, attr):
   ...:         return AttributeSetter(self, attr)
   ...: class AttributeSetter:
   ...:     def __init__(self, inst, attr):
   ...:         self._inst = inst
   ...:         self._attr = attr
   ...:     def add(self, value):
   ...:         setattr(self._inst, self._attr, value)
   ...:         

In [2]: SC = SimpleClass()

In [3]: SC.new_attr.add('test')

In [4]: SC.new_attr
Out[4]: 'test'
</snippet></ROW><ROW><id>17672556</id><snippet>SimpleClass</snippet></ROW><ROW><id>17672556</id><snippet>SC.new_attr
</snippet></ROW><ROW><id>17672556</id><snippet>'test'</snippet></ROW><ROW><id>17672556</id><snippet>Sc.new_attr.add('test')</snippet></ROW><ROW><id>17672556</id><snippet>SC.new_attr.add('other')
</snippet></ROW><ROW><id>17672556</id><snippet>SC.new_attr
</snippet></ROW><ROW><id>17672556</id><snippet>'other'</snippet></ROW><ROW><id>17672556</id><snippet>AttributeError</snippet></ROW><ROW><id>17672556</id><snippet>In [2]: SC = SimpleClass()

In [3]: SC.new_attr.add('test')
In [4]: SC.new_attr   #this returns a string, not a user-defined class
'test'

In [5]: SC.new_attr.add('new value')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-5-f218074b7a68&gt; in &lt;module&gt;()
----&gt; 1 SC.new_attr.add('new value')

AttributeError: 'str' object has no attribute 'add'
</snippet></ROW><ROW><id>17672556</id><snippet>In [5]: import dis
   ...: dis.dis(lambda: SC.new_attr.add('some string'))
   ...: 
  2           0 LOAD_GLOBAL              0 (SC) 
              3 LOAD_ATTR                1 (new_attr) 
              6 LOAD_ATTR                2 (add) 
              9 LOAD_CONST               1 ('some string') 
             12 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             15 RETURN_VALUE 
</snippet></ROW><ROW><id>17672556</id><snippet>dis</snippet></ROW><ROW><id>17672556</id><snippet>LOAD_ATTR</snippet></ROW><ROW><id>17672556</id><snippet>new_attr</snippet></ROW><ROW><id>17672556</id><snippet>add</snippet></ROW><ROW><id>17672556</id><snippet>SC</snippet></ROW><ROW><id>17672556</id><snippet>new_attr</snippet></ROW><ROW><id>17672556</id><snippet>add</snippet></ROW><ROW><id>17672556</id><snippet>add</snippet></ROW><ROW><id>17672556</id><snippet>add</snippet></ROW><ROW><id>17672556</id><snippet>AttributeError</snippet></ROW><ROW><id>17672556</id><snippet>add</snippet></ROW><ROW><id>17672556</id><snippet>In [6]: SC.new_attr
Out[6]: 'test'
</snippet></ROW><ROW><id>17672556</id><snippet>"test"</snippet></ROW><ROW><id>17672556</id><snippet>add</snippet></ROW><ROW><id>17672556</id><snippet>value</snippet></ROW><ROW><id>17672556</id><snippet>In [12]: SC.new_attr
Out[12]: &lt;__main__.TheClass at 0x7fac44727a90&gt;

In [13]: SC.new_attr.value
Out[13]: 'test'

In [14]: SC.new_attr.add('other')

In [15]: SC.new_attr.value
Out[15]: 'other'
</snippet></ROW><ROW><id>17672556</id><snippet>str</snippet></ROW><ROW><id>17673276</id><snippet>format e: /fs:NTFS /p:2
</snippet></ROW><ROW><id>17673324</id><snippet>dict.items()</snippet></ROW><ROW><id>17673324</id><snippet>collections.OrderedDict()</snippet></ROW><ROW><id>17673324</id><snippet>from collections import OrderedDict

 dict_lines = OrderedDict(zip(li_lines, li_atoms))
</snippet></ROW><ROW><id>17673477</id><snippet>x</snippet></ROW><ROW><id>17673477</id><snippet>if exactShareNameFound: x+= line
</snippet></ROW><ROW><id>17673477</id><snippet>x = ''
</snippet></ROW><ROW><id>17673477</id><snippet>def findExact(logMessage, share):
    share = str(share)

    with open('logFile', 'w+') as f:
        f.write(logMessage)
        f.seek(0)

        lines = []
        found = False
        for line in f:
            if share in line:
                found = True

            if found: 
                x.append(line)

            if 'Share Name' in line:
                if share not in line:
                    found = False
                    continue

    return ''.join(lines)
</snippet></ROW><ROW><id>17673477</id><snippet>raise ValueError('error message')</snippet></ROW><ROW><id>17673570</id><snippet>isin</snippet></ROW><ROW><id>17673570</id><snippet>In [34]: df[df.col5.isin(t[-3:].index)]['col1'].unique()
Out[34]: array([1.1, 2.6, 3.4, 3.3], dtype=object)
</snippet></ROW><ROW><id>17673668</id><snippet>collections.deque</snippet></ROW><ROW><id>17673668</id><snippet>import csv
from collections import deque
import datetime
from glob import iglob
import os

class Criterion(object):
    """ represents one of the criteria to be checked.
        in_a_row is the number of consecutive rows in which the expression,
        given as a string, evaluated to True """
    def __init__(self, in_a_row, expression):
        self.in_a_row = in_a_row
        self.expression = expression
        self.bytecode = compile(expression, '&lt;string&gt;', 'eval')
        self.deque = deque(maxlen=in_a_row)
    def eval_and_check(self, local_vars):
        """ evaluate expression in context of local variables, append result
            to deque, and return whether 'in_a_row' criterion was satisfied """
        self.deque.append(eval(self.bytecode, globals(), local_vars))
        return self.deque.count(True) == self.in_a_row
    def reset(self):
        self.deque.clear()
    def format_match(self, filename, linenum):
        return 'lines {}-{} in {} had {} consecutive rows with "{}"'.format(
            linenum-self.in_a_row+1, linenum, filename, self.in_a_row,
            self.expression)

criteria = [Criterion(5, 'Test_Res_2 &lt; 40'),
            Criterion(3, '13 &lt;= Test_Res_4 &lt;= 15'), ]
flagtotal = []
datapath = "datafiles"  # directory path to location of csv files

for filename in iglob(os.path.join(datapath, '*.csv')):
    with open(filename) as csvfile:
        reader = csv.reader(csvfile, skipinitialspace=True)
        reader.next() # skip over initial fieldnames row
        for criterion in criteria:  # initialize all before processing file
            criterion.reset()
        condition_satisfied = False
        for linenum, row in enumerate(reader, start=1):
            # define local vars for use in criterion expression evaluation
            (Test_num, Test_Res_1, Test_Res_2, Test_Res_3, Test_Res_4, 
             Test_div, Test_time) = [int(row[0])] + map(float, row[1:])
            for criterion in criteria:
                if criterion.eval_and_check(locals()):
                    #print criterion.format_match(filename, linenum)
                    flagtotal.append(os.path.basename(filename))
                    condition_satisfied = True
                    break  # quit criterion checking for this row
            if condition_satisfied:
                break  # quit processing rows of this csv file

with open('test.txt', 'w') as f:
    f.write('Date of testing: {}\n'.format(
            datetime.date.today().strftime('%m/%d/%Y')) +
            'The following files met the criteria:\n'
            '-------------------------------------\n')
    if flagtotal:
        print('\n'.join(flagtotal))
        f.write('\n'.join(flagtotal) + '\n')
    else:
        print('no files met the criteria')
        f.write('no files met the criteria\n')
</snippet></ROW><ROW><id>17673760</id><snippet>while running:
    rect = pygame.Rect(10, 20, 30, 30)
    pygame.draw.rect(screen, (255,0,0), rect)
    pygame.display.flip()

    for event in pygame.event.get():
        if event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pressed = True
        if event.type == pygame.QUIT:
            running = False   

    while mouse_pressed:
        # do your stuff
        mouse_pressed = False
</snippet></ROW><ROW><id>17673760</id><snippet>mouse_pressed</snippet></ROW><ROW><id>17673941</id><snippet>itertools</snippet></ROW><ROW><id>17673941</id><snippet>from itertools import product, islice

# all values, generator expression
query = ((x['val'], y['val']) for x, y in product(R, S) if x['id'] == y['id'])

# just the first 10
limited = islice(query, 10)

for row in limited:
    print row
</snippet></ROW><ROW><id>17674094</id><snippet>tshark -l -f "tcp port 80" -R "http.request or http.response " -i br0 -V
</snippet></ROW><ROW><id>17674225</id><snippet>self.collection.find_and_modify(query={"recid":recid}, 
                                update={"$set": {"creation_date": str(datetime.now())}})
</snippet></ROW><ROW><id>17674225</id><snippet>{}</snippet></ROW><ROW><id>17674225</id><snippet>int</snippet></ROW><ROW><id>17674225</id><snippet>string</snippet></ROW><ROW><id>17674225</id><snippet>dict</snippet></ROW><ROW><id>17674225</id><snippet>&gt;&gt;&gt; {{}}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'dict'
</snippet></ROW><ROW><id>17674577</id><snippet>&lt;&lt;ListboxSelect&gt;&gt;</snippet></ROW><ROW><id>17674577</id><snippet>&lt;Double-1&gt;</snippet></ROW><ROW><id>17674582</id><snippet>sum(d['Citations'] for d in WRT_Citations)
</snippet></ROW><ROW><id>17674582</id><snippet>dict.values(Citations)[0]</snippet></ROW><ROW><id>17674582</id><snippet>Citations.values()[0]</snippet></ROW><ROW><id>17674582</id><snippet>Citations['Citations']</snippet></ROW><ROW><id>17674582</id><snippet>'Citations'</snippet></ROW><ROW><id>17674582</id><snippet>Citations</snippet></ROW><ROW><id>17675058</id><snippet>Day</snippet></ROW><ROW><id>17675058</id><snippet>Day.SetSunRise</snippet></ROW><ROW><id>17675058</id><snippet>Day()</snippet></ROW><ROW><id>17675058</id><snippet>someday = Day()
Day.SetSunRise(someday, some_sunrise_time)
</snippet></ROW><ROW><id>17675058</id><snippet>for meth, timestamp in zip([Day.SetSunRise, Day.SetSunSet], [sunrise, sunset]):
    meth(someday, timestamp)
</snippet></ROW><ROW><id>17675058</id><snippet>Day</snippet></ROW><ROW><id>17675505</id><snippet>.replace()</snippet></ROW><ROW><id>17675505</id><snippet>line.replace(' ', '')
</snippet></ROW><ROW><id>17675505</id><snippet>.replace()</snippet></ROW><ROW><id>17675505</id><snippet>line</snippet></ROW><ROW><id>17675505</id><snippet>line = line.replace(' ', '')
</snippet></ROW><ROW><id>17675592</id><snippet>Color</snippet></ROW><ROW><id>17675592</id><snippet>tmp_colors[0]</snippet></ROW><ROW><id>17675592</id><snippet>colors[0]</snippet></ROW><ROW><id>17675592</id><snippet>tmp_colors</snippet></ROW><ROW><id>17675592</id><snippet>Color</snippet></ROW><ROW><id>17675592</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>17675592</id><snippet>from copy import deepcopy

tmp_colors = deepcopy(colors)
</snippet></ROW><ROW><id>17675710</id><snippet>&gt;&gt;&gt; mystr = "Higher id: 38"
&gt;&gt;&gt; mylist = mystr.split(' ')
&gt;&gt;&gt; mylist[-1] = "55" # t[-1] accesses the last element in the list
&gt;&gt;&gt; print ' '.join(mylist)
Higher id: 55
</snippet></ROW><ROW><id>17675710</id><snippet>replace()</snippet></ROW><ROW><id>17675710</id><snippet>&gt;&gt;&gt; mystr = "Higher id: 38"
&gt;&gt;&gt; mynewstr = mystr.replace('38', '55')
&gt;&gt;&gt; print mynewstr
Higher id: 55
</snippet></ROW><ROW><id>17675710</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; print re.sub(r'(\d.*?)$', '55', mystr)
Higher id: 55
</snippet></ROW><ROW><id>17675960</id><snippet>import numbers, operator
def average( what ):
    if not isinstance( what, list ):
        return what
    if not all( isinstance(item, numbers.Number) for item in what ):
        return what
    if len(what) == 0:
        return None
    else:
        return operator.truediv( sum( what ), len( what ) )
</snippet></ROW><ROW><id>17675960</id><snippet>def average( what ):
    if not isinstance( what, list ):
        return what
    if len(what) == 0:
        return None
    if not all( isinstance(item, (int, long, float, complex)) for item in what ):
        return what
    else:
        return sum( what ) / len( what )
</snippet></ROW><ROW><id>17676000</id><snippet>width, height = map(int, input().split())
def rectanglePerimeter(width, height):
   return ((width + height)*2)
print(rectanglePerimeter(width, height))
</snippet></ROW><ROW><id>17676000</id><snippet>% echo "1 2" | test.py
6
</snippet></ROW><ROW><id>17676000</id><snippet>input()</snippet></ROW><ROW><id>17676000</id><snippet>input()</snippet></ROW><ROW><id>17676000</id><snippet>width = input()
print(width)
height = input()
print(height)
</snippet></ROW><ROW><id>17676000</id><snippet>echo "1 2" | test.py</snippet></ROW><ROW><id>17676000</id><snippet>1 2
Traceback (most recent call last):
  File "/home/unutbu/pybin/test.py", line 5, in &lt;module&gt;
    height = input()
EOFError: EOF when reading a line
</snippet></ROW><ROW><id>17676000</id><snippet>'1 2'</snippet></ROW><ROW><id>17676000</id><snippet>input()</snippet></ROW><ROW><id>17676000</id><snippet>EOFError</snippet></ROW><ROW><id>17676000</id><snippet>input()</snippet></ROW><ROW><id>17676000</id><snippet>width, height = map(int, input().split())
</snippet></ROW><ROW><id>17676000</id><snippet>test.py</snippet></ROW><ROW><id>17676000</id><snippet>1</snippet></ROW><ROW><id>17676000</id><snippet>2</snippet></ROW><ROW><id>17676000</id><snippet>1</snippet></ROW><ROW><id>17676000</id><snippet>2</snippet></ROW><ROW><id>17676000</id><snippet>test.py 1 2
</snippet></ROW><ROW><id>17676063</id><snippet>:members:</snippet></ROW><ROW><id>17676063</id><snippet>autoinstanceattribute</snippet></ROW><ROW><id>17676063</id><snippet>.. autoinstanceattribute:: aclass.Aclass.a</snippet></ROW><ROW><id>17676381</id><snippet>reduce()</snippet></ROW><ROW><id>17676564</id><snippet>str(line[column] + '\t')
</snippet></ROW><ROW><id>17676564</id><snippet>str(line[column]) + '\t'
</snippet></ROW><ROW><id>17676793</id><snippet>try:
    html = browser.open(post_url).read().decode('UTF-8')
except mechanize.HTTPError, e:
    # handle http errors explicit by code
    if int(e.code) == 500:
        # do nothing. Maybe you need to set "html" to empy string.
        pass
    else:
        raise e  # if http error code is not 500, reraise the exception
</snippet></ROW><ROW><id>17677109</id><snippet>csv_chunks</snippet></ROW><ROW><id>17677109</id><snippet>pandas.concat()</snippet></ROW><ROW><id>17677109</id><snippet>csv_chunks = pandas.read_csv(filepath, sep = DELIMITER,skiprows = 2, chunksize = 1000, converters = {"A": str, "B": str})
</snippet></ROW><ROW><id>17677294</id><snippet>total</snippet></ROW><ROW><id>17677294</id><snippet>total = 1
x = 1
while x &lt;= 5:
   total *= x
   x += 1
   print x, total
print 'total:', total
</snippet></ROW><ROW><id>17677294</id><snippet>total = 1
n = 5
for x in xrange(1, n + 1):
    total *= x
print total
</snippet></ROW><ROW><id>17677294</id><snippet>total</snippet></ROW><ROW><id>17677294</id><snippet>1</snippet></ROW><ROW><id>17677294</id><snippet>0</snippet></ROW><ROW><id>17677294</id><snippet>0</snippet></ROW><ROW><id>17677294</id><snippet>0*1*..</snippet></ROW><ROW><id>17677294</id><snippet>0</snippet></ROW><ROW><id>17677342</id><snippet>with open(fname) as xml:
    dom = parse(xml)
</snippet></ROW><ROW><id>17677342</id><snippet>open()</snippet></ROW><ROW><id>17677342</id><snippet>codecs.open()</snippet></ROW><ROW><id>17677528</id><snippet>(\bw+\b)?
</snippet></ROW><ROW><id>17677528</id><snippet>None</snippet></ROW><ROW><id>17677528</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; example = 'waiting for coffee, waiting for coffee and the charitable crumb.'
&gt;&gt;&gt; pattern = re.compile(r'(\b\w+\b)?[^a-z]*(\b\w+\b)?[^a-z]*(\b\w+\b)?[^a-z]*(\b\w+\b)?[,;]\s*(\b\w+\b)?[^a-z]*(\b\w+\b)?[^a-z]*(\b\w+\b)?[^a-z]*(\b\w+\b)?')
&gt;&gt;&gt; pattern.search(example).groups()
('waiting', 'for', 'coffee', None, 'waiting', 'for', 'coffee', 'and')
</snippet></ROW><ROW><id>17677528</id><snippet>None</snippet></ROW><ROW><id>17677528</id><snippet>.findall()</snippet></ROW><ROW><id>17677528</id><snippet>&gt;&gt;&gt; pattern_required = re.compile(r'(\b\w+\b)[^a-z]*(\b\w+\b)[^a-z]*(\b\w+\b)[^a-z]*(\b\w+\b)[,;]\s*(\b\w+\b)[^a-z]*(\b\w+\b)[^a-z]*(\b\w+\b)[^a-z]*(\b\w+\b)')
&gt;&gt;&gt; pattern_required.findall(example)
[]
&gt;&gt;&gt; pattern_required.findall('Not ' + example)
[('Not', 'waiting', 'for', 'coffee', 'waiting', 'for', 'coffee', 'and')]
</snippet></ROW><ROW><id>17677528</id><snippet>&gt;&gt;&gt; pattern_variable = re.compile(r'(\b\w+\b)[^a-z]*((?:\b\w+\b[^a-z]*){1,3})[,;]\s*(\b\w+\b)[^a-z]*(\b\w+\b)[^a-z]*(\b\w+\b)[^a-z]*(\b\w+\b)')
&gt;&gt;&gt; pattern_variable.findall(example)
[('waiting', 'for coffee', 'waiting', 'for', 'coffee', 'and')]
&gt;&gt;&gt; pattern_variable.findall('Not ' + example)
[('Not', 'waiting for coffee', 'waiting', 'for', 'coffee', 'and')]
</snippet></ROW><ROW><id>17677528</id><snippet>(?:...)</snippet></ROW><ROW><id>17677528</id><snippet>.findall()</snippet></ROW><ROW><id>17677528</id><snippet>{1,3}</snippet></ROW><ROW><id>17677551</id><snippet>np.fromstring</snippet></ROW><ROW><id>17677610</id><snippet>from functools import partial
from multiprocessing import Pool

def dist_mp(centroid, target):
    return target, edit_distance(centroid, target)

def main():
    # ...
    pool = Pool() # use all CPUs
    for target, d in pool.imap_unordered(partial(dist_mp, centroid),
                                         sequence_list[1:]):
        results_dict[centroid][target] = d
    pool.close()
    pool.join()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>17677610</id><snippet>edit_distance()</snippet></ROW><ROW><id>17677610</id><snippet>from multiprocessing.dummy import Pool # use threads
</snippet></ROW><ROW><id>17677610</id><snippet>edit_distance()</snippet></ROW><ROW><id>17677610</id><snippet>O(n**2)</snippet></ROW><ROW><id>17677767</id><snippet>**</snippet></ROW><ROW><id>17677767</id><snippet>keywords</snippet></ROW><ROW><id>17677767</id><snippet>print keywords
</snippet></ROW><ROW><id>17677767</id><snippet>{
    'Shopkeeper': 'Ryan Lambert', 
    'Client': 'John Cleese'
}
</snippet></ROW><ROW><id>17677767</id><snippet>print keywords[kw]
</snippet></ROW><ROW><id>17677767</id><snippet>kw</snippet></ROW><ROW><id>17677767</id><snippet>kw</snippet></ROW><ROW><id>17677767</id><snippet>'Shopkeeper'</snippet></ROW><ROW><id>17677767</id><snippet>keywords[kw]</snippet></ROW><ROW><id>17677767</id><snippet>'Ryan Lambert'</snippet></ROW><ROW><id>17677767</id><snippet>kw</snippet></ROW><ROW><id>17677767</id><snippet>'Client'</snippet></ROW><ROW><id>17677767</id><snippet>keywords[kw]</snippet></ROW><ROW><id>17677767</id><snippet>'John Cleese'</snippet></ROW><ROW><id>17677915</id><snippet>site-packages</snippet></ROW><ROW><id>17677915</id><snippet>coopr</snippet></ROW><ROW><id>17677915</id><snippet>site-packages</snippet></ROW><ROW><id>17677977</id><snippet>    def find_range(x,y,c_code="",c_name=""):
    print()
    print("%29s\t%23s" % (x,y))
    print("%16s\t%16s\t%16s\t%4s\t%s" % ("mask","start","end","code","name"))
    print("%16s\t%16s\t%16s\t%4s\t%s" % ("----","-----","---","----","----"))

    result = ipaddress.summarize_address_range( ipaddress.IPv4Address(x), ipaddress.IPv4Address(y) )
    for entry in result:
        net = str( entry.network_address )
        bcast = str( entry.broadcast_address )
        print( "%16s\t%16s\t%16s\t%4s\t%s" % (entry, net, bcast,c_code,c_name))
</snippet></ROW><ROW><id>17677980</id><snippet>exp = ur'a\nb\nc\nd\n\e\n{2}((?:.*\n){5})'
</snippet></ROW><ROW><id>17677980</id><snippet>exp = ur'a\nb\nc\nd\n\e\n{2}(.*\n)(.*\n)(.*\n)(.*\n)(.*\n)'
</snippet></ROW><ROW><id>17678038</id><snippet>pylab.hist([x for x in [data1,data2,data3] if len(x) &gt; 0], 10, normed=1, histtype='bar', stacked=True)
</snippet></ROW><ROW><id>17678274</id><snippet>jsonobj = json.loads(text)
print jsonobj['data']
</snippet></ROW><ROW><id>17678274</id><snippet>data</snippet></ROW><ROW><id>17678274</id><snippet>google.com</snippet></ROW><ROW><id>17678274</id><snippet>def processlinks(text):
    output = urllib.urlopen('http://google.com/' % text)
    print output.geturl()
    print output.read()

map(processlinks, jsonobj['data'])
</snippet></ROW><ROW><id>17678429</id><snippet>im = QImage(self.canvas.buffer_rgba())
</snippet></ROW><ROW><id>17678429</id><snippet>canvas.buffer_rgba()</snippet></ROW><ROW><id>17678429</id><snippet>QImage()
QImage(QSize, QImage.Format)
QImage(int, int, QImage.Format)
QImage(str, int, int, QImage.Format)
QImage(sip.voidptr, int, int, QImage.Format)
QImage(str, int, int, int, QImage.Format)
QImage(sip.voidptr, int, int, int, QImage.Format)
QImage(list-of-str)
QImage(QString, str format=None)
QImage(QImage)
QImage(QVariant)
</snippet></ROW><ROW><id>17678429</id><snippet>__init__</snippet></ROW><ROW><id>17678429</id><snippet>QImage(QVariant)</snippet></ROW><ROW><id>17678429</id><snippet>QImage(object)</snippet></ROW><ROW><id>17678429</id><snippet>QVariant</snippet></ROW><ROW><id>17678429</id><snippet>size = self.canvas.size()
width, height = size.width(), size.height()
im = QImage(self.canvas.buffer_rgba(), width, height, QImage.Format_ARGB32)
im.save('test.png')
</snippet></ROW><ROW><id>17678429</id><snippet>pixmap = QPixmap.grabWidget(self.canvas)
pixmap.save('test.png')
</snippet></ROW><ROW><id>17678429</id><snippet>QApplication.clipboard().setPixmap(pixmap)
</snippet></ROW><ROW><id>17678429</id><snippet>gif</snippet></ROW><ROW><id>17678429</id><snippet>png</snippet></ROW><ROW><id>17678429</id><snippet>gif</snippet></ROW><ROW><id>17678429</id><snippet>QImageWriter.supportedImageFormats()</snippet></ROW><ROW><id>17678621</id><snippet>init&lt;i&gt;libraryName&lt;/i&gt;</snippet></ROW><ROW><id>17678896</id><snippet>a = [i for i in a if i != 3] + [10, 11]
</snippet></ROW><ROW><id>17678896</id><snippet>3</snippet></ROW><ROW><id>17678896</id><snippet>3</snippet></ROW><ROW><id>17678896</id><snippet>a = a[:a.index(3)] + a[a.index(3) + 1:] + [10, 11]
</snippet></ROW><ROW><id>17678901</id><snippet>src</snippet></ROW><ROW><id>17678901</id><snippet>midi</snippet></ROW><ROW><id>17678901</id><snippet>txt</snippet></ROW><ROW><id>17678901</id><snippet>python ../src/script1.py
</snippet></ROW><ROW><id>17678901</id><snippet>..</snippet></ROW><ROW><id>17678901</id><snippet>midi</snippet></ROW><ROW><id>17678901</id><snippet>stuff</snippet></ROW><ROW><id>17678901</id><snippet>$PATH</snippet></ROW><ROW><id>17679022</id><snippet>with open(filetoread, "rb") as inf:
    with open(filetowrite, "w") as fixed:
        for line in inf:
            fixed.write(line)
</snippet></ROW><ROW><id>17679022</id><snippet>open(filetoread, "rb")</snippet></ROW><ROW><id>17679191</id><snippet>\xc9</snippet></ROW><ROW><id>17679191</id><snippet>\uxxxx</snippet></ROW><ROW><id>17679191</id><snippet>repr()</snippet></ROW><ROW><id>17679191</id><snippet>&gt;&gt;&gt; print [u'Hello: \xc9']
[u'Hello: \xc9']
&gt;&gt;&gt; print [u'Hello: \xc9'][0]
Hello: É
</snippet></ROW><ROW><id>17679344</id><snippet>def process(vals):
    for key in vals:
        try:
            do_something(vals[key])
        except Exception as ex:  
            raise Error(key, context=ex)
</snippet></ROW><ROW><id>17679344</id><snippet>__context__</snippet></ROW><ROW><id>17679344</id><snippet>def process(vals):
    for key in vals:
        try:
            do_something(vals[key])
        except Exception:  
            raise Error(key)
</snippet></ROW><ROW><id>17679344</id><snippet>raise Error(key) from ex</snippet></ROW><ROW><id>17679344</id><snippet>__cause__</snippet></ROW><ROW><id>17679344</id><snippet>try:
    do_something(vals[key])
except Exception:
    reraise_with_context(key=key) # reraise with extra info
</snippet></ROW><ROW><id>17679344</id><snippet>import inspect
import sys

def reraise_with_context(**context):
    ex = sys.exc_info()[1]
    if not context: # use locals from the caller scope
       context = inspect.currentframe().f_back.f_locals
    extra_info = ", ".join("%s=%s" % item for item in context.items())
    amend_message(ex, extra_info)
    raise

def amend_message(ex, extra):
    msg = '{} with context: {}'.format(ex.args[0], extra) if ex.args else extra
    ex.args = (msg,) + ex.args[1:]
</snippet></ROW><ROW><id>17679403</id><snippet>matrix[k] = ytest.append(dat)</snippet></ROW><ROW><id>17679403</id><snippet>matrix[k] = dat</snippet></ROW><ROW><id>17679403</id><snippet>for i in xrange(ndata):
    matrix[k][i] = test[i]
</snippet></ROW><ROW><id>17679403</id><snippet>matrix[k] = test</snippet></ROW><ROW><id>17679403</id><snippet>matrix = np.zeros(shape=ncolumns,ndata))</snippet></ROW><ROW><id>17679403</id><snippet>matrix = np.zeros([nrows,ncols])</snippet></ROW><ROW><id>17679403</id><snippet>import numpy as np
import random

test_data = [[random.randint(0,10) for _ in xrange(4)] for _ in xrange(20)]
ncols=4
nrows=20

matrix = np.zeros(shape=(nrows,ncols))               
for k in xrange(nrows):                       
    matrix[k] = test_data[k]
</snippet></ROW><ROW><id>17679403</id><snippet>&gt;&gt;&gt; test_data
[[5, 1, 1, 8], [3, 8, 5, 3], [2, 2, 10, 6], [8, 2, 4, 0], [7, 7, 8, 6], [9, 3, 9, 1], [2, 9, 0, 1], [3, 7, 8, 1], [3, 9, 10, 1], [6, 0, 5, 4], [2, 3, 5, 9], [8, 6, 3, 3], [9, 10, 3, 0], [6, 3, 2, 6], [1, 5, 9, 0], [7, 7, 1, 7], [2, 8, 2, 9], [2, 10, 8, 8], [1, 8, 3, 9], [7, 2, 9, 8]]
</snippet></ROW><ROW><id>17679403</id><snippet>&gt;&gt;&gt; matrix
array([[  5.,   1.,   1.,   8.],
       [  3.,   8.,   5.,   3.],
       [  2.,   2.,  10.,   6.],
       [  8.,   2.,   4.,   0.],
       [  7.,   7.,   8.,   6.],
       [  9.,   3.,   9.,   1.],
       [  2.,   9.,   0.,   1.],
       [  3.,   7.,   8.,   1.],
       [  3.,   9.,  10.,   1.],
       [  6.,   0.,   5.,   4.],
       [  2.,   3.,   5.,   9.],
       [  8.,   6.,   3.,   3.],
       [  9.,  10.,   3.,   0.],
       [  6.,   3.,   2.,   6.],
       [  1.,   5.,   9.,   0.],
       [  7.,   7.,   1.,   7.],
       [  2.,   8.,   2.,   9.],
       [  2.,  10.,   8.,   8.],
       [  1.,   8.,   3.,   9.],
       [  7.,   2.,   9.,   8.]])
</snippet></ROW><ROW><id>17679403</id><snippet>test_data</snippet></ROW><ROW><id>17679403</id><snippet>matrix</snippet></ROW><ROW><id>17679403</id><snippet>matrix = matrix.T</snippet></ROW><ROW><id>17679403</id><snippet>&gt;&gt;&gt; matrix.T
array([[  5.,   3.,   2.,   8.,   7.,   9.,   2.,   3.,   3.,   6.,   2.,
          8.,   9.,   6.,   1.,   7.,   2.,   2.,   1.,   7.],
       [  1.,   8.,   2.,   2.,   7.,   3.,   9.,   7.,   9.,   0.,   3.,
          6.,  10.,   3.,   5.,   7.,   8.,  10.,   8.,   2.],
       [  1.,   5.,  10.,   4.,   8.,   9.,   0.,   8.,  10.,   5.,   5.,
          3.,   3.,   2.,   9.,   1.,   2.,   8.,   3.,   9.],
       [  8.,   3.,   6.,   0.,   6.,   1.,   1.,   1.,   1.,   4.,   9.,
          3.,   0.,   6.,   0.,   7.,   9.,   8.,   9.,   8.]])
</snippet></ROW><ROW><id>17679679</id><snippet>&gt;&gt;&gt; d = {a: [0,3,4], b: [0,1,3,4,5]}
&gt;&gt;&gt; master = [0,1,2,3,4,5,6]
&gt;&gt;&gt; {k: [int(i in v) for i in master] for k,v in d.iteritems()}
{'a': [1, 0, 0, 1, 1, 0, 0], 'b': [1, 1, 0, 1, 1, 1, 0]}
</snippet></ROW><ROW><id>17679792</id><snippet>@SRR566546.970 HWUSI-EAS1673_11067_FC7070M:4:1:2299:1109 length=50
TTGCCTGCCTATCATTTTAGTGCCTGTGAGGTGGAGATGTGAGGATCAGT
+SRR566546.970 HWUSI-EAS1673_11067_FC7070M:4:1:2299:1109 length=50
hhhhhhhhhhghhghhhhhfhhhhhfffffeee[X]b[d[ed`[Y[^Y
</snippet></ROW><ROW><id>17679792</id><snippet>@SRR566546.970 HWUSI-EAS1673_11067_FC7070M:4:1:2299:1109 length=50
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
+SRR566546.970 HWUSI-EAS1673_11067_FC7070M:4:1:2299:1109 length=50
hhhhhhhhhhghhghhhhhfhhhhhfffffeee[X]b[d[ed`[Y[^Y
</snippet></ROW><ROW><id>17679792</id><snippet>N</snippet></ROW><ROW><id>17679792</id><snippet># Read file, convert strings to lists
fin = open("path/to/file")
lines = fin.readlines()
line2, line4 = list(lines[1]), list(lines[3])  

# Make the changes to our lists
for i, c in enumerate(line4):
   if( ord(c) &gt; 53 ):
      line2[i] = 'N'

# Overwrite line 2
lines[1] = ''.join(line2)

# Save back to the file
fin.seek(0)
for line in lines:
   fin.write(line)

fin.close()
</snippet></ROW><ROW><id>17679802</id><snippet>def rounding_point(l):
    # if the input is sorted, you don't need the following line
    l = sorted(l)
    ones_needed = int(round(sum(l)))
    # this may require adjustment if there are duplicates in the input
    return 1.0 if ones_needed == len(l) else l[-ones_needed]
</snippet></ROW><ROW><id>17679835</id><snippet>__init__(self, other=None)
</snippet></ROW><ROW><id>17679836</id><snippet>binarySearch( array, desiderata, midP + 1, iMax )
</snippet></ROW><ROW><id>17679836</id><snippet>binarySearch( array, desiderata, iMin, midP - 1 )
</snippet></ROW><ROW><id>17679836</id><snippet>curre &lt; final</snippet></ROW><ROW><id>17679836</id><snippet>True</snippet></ROW><ROW><id>17679836</id><snippet>if ( curre &lt; final ):
    # print midP
    print "t: " + array[midP][TAPE_NUMBER] + ", d: " + desiderata
    binarySearch( array, desiderata, midP + 1, iMax )
</snippet></ROW><ROW><id>17679836</id><snippet>binarySearch()</snippet></ROW><ROW><id>17679836</id><snippet>None</snippet></ROW><ROW><id>17679836</id><snippet>return</snippet></ROW><ROW><id>17679836</id><snippet>return binarySearch( array, desiderata, midP + 1, iMax )

# ...

return binarySearch( array, desiderata, iMin, midP - 1 )
</snippet></ROW><ROW><id>17679950</id><snippet>SongData</snippet></ROW><ROW><id>17679950</id><snippet>return</snippet></ROW><ROW><id>17679950</id><snippet>__str__</snippet></ROW><ROW><id>17679950</id><snippet>class SongData(object):
    def __init__(self, title="", artist="", directory=""):
        self.title, self.artist, self.directory = title, artist, directory
    def __str__(self):
        desc_str = "Title: %s \nArtist: %s \nDirectory: %s \n" %(self.title,
                                            self.artist, self.directory)
        return desc_str # &lt;------ RETURN HERE
</snippet></ROW><ROW><id>17679950</id><snippet>SongData</snippet></ROW><ROW><id>17679950</id><snippet>songNames = ['song1', 'song2', 'song3']
artistNames = ['artist1', 'artist2', 'artist3']
dirNames = ['dir1', 'dir2', 'dir3']

songdata = [SongData(*params) for params in zip(songNames, artistNames, dirNames)]
</snippet></ROW><ROW><id>17679950</id><snippet>songdata = [
    SongData('song1', 'artist1', 'dir1'),
    SongData('song2', 'artist2', 'dir2'),
    SongData('song3', 'artist3', 'dir3')
]
</snippet></ROW><ROW><id>17679950</id><snippet>print</snippet></ROW><ROW><id>17679950</id><snippet>__str__</snippet></ROW><ROW><id>17679950</id><snippet>for song in songdata:
    print song
</snippet></ROW><ROW><id>17679950</id><snippet>Title: song1 
Artist: artist1 
Directory: dir1 

Title: song2 
Artist: artist2 
Directory: dir2 

Title: song3 
Artist: artist3 
Directory: dir3 
</snippet></ROW><ROW><id>17679973</id><snippet>save_related</snippet></ROW><ROW><id>17679973</id><snippet>ModelAdmin</snippet></ROW><ROW><id>17679973</id><snippet>save_m2m</snippet></ROW><ROW><id>17679973</id><snippet>class FolderAdmin(admin.ModelAdmin):
    form = FolderAdminForm

    def save_related(self, request, form, formsets, change):
         # Do my own fancy stuff
</snippet></ROW><ROW><id>17679980</id><snippet>In [56]: df.groupby(['col5','col2']).size().reset_index().groupby('col2')[[0]].max()
Out[56]: 
      0
col2   
A     3
B     2
C     1
D     3
</snippet></ROW><ROW><id>17680017</id><snippet>import re
names = ['g18_84pp_2A_MVP1_GoodiesT0-HKJ-DFG_MIX-CMVP1_Y1000-MIX.txt',
'g18_84pp_2A_MVP2_GoodiesT0-HKJ-DFG_MIX-CMVP2_Y1000-MIX.txt',
'g18_84pp_2A_MVP3_GoodiesT0-HKJ-DFG_MIX-CMVP3_Y1000-MIX.txt',
'g18_84pp_2A_MVP4_GoodiesT0-HKJ-DFG_MIX-CMVP4_Y1000-MIX.txt',
'g18_84pp_2A_MVP5_GoodiesT0-HKJ-DFG_MIX-CMVP5_Y1000-MIX.txt',
'g18_84pp_2A_MVP6_GoodiesT0-HKJ-DFG_MIX-CMVP6_Y1000-MIX.txt',
'g18_84pp_2A_MVP7_GoodiesT0-HKJ-DFG_MIX-CMVP7_Y1000-MIX.txt']

f = lambda x: re.findall('g18_84pp_2A_MVP(.*?)_GoodiesT0(.*?)_MIX(.*?)\.txt', x)

for x in names:
    print(f(x))
</snippet></ROW><ROW><id>17680017</id><snippet>[('1', '-HKJ-DFG', '-CMVP1_Y1000-MIX')]
[('2', '-HKJ-DFG', '-CMVP2_Y1000-MIX')]
[('3', '-HKJ-DFG', '-CMVP3_Y1000-MIX')]
[('4', '-HKJ-DFG', '-CMVP4_Y1000-MIX')]
[('5', '-HKJ-DFG', '-CMVP5_Y1000-MIX')]
[('6', '-HKJ-DFG', '-CMVP6_Y1000-MIX')]
[('7', '-HKJ-DFG', '-CMVP7_Y1000-MIX')]
</snippet></ROW><ROW><id>17680017</id><snippet>names = list(filter(f, names))
</snippet></ROW><ROW><id>17680017</id><snippet>import re
names = ['g18_84pp_2A_MVP1_GoodiesT0-HKJ-DFG_MIX-CMVP1_Y1000-MIX.txt',
'g18_84pp_2A_MVP2_GoodiesT0-HKJ-DFG_MIX-CMVP2_Y1000-MIX.txt',
'g18_84pp_2A_MVP3_GoodiesT0-HKJ-DFG_MIX-CMVP3_Y1000-MIX.txt',
'g18_84pp_2A_MVP4_GoodiesT0-HKJ-DFG_MIX-CMVP4_Y1000-MIX.txt',
'g18_84pp_2A_MVP5_GoodiesT0-HKJ-DFG_MIX-CMVP5_Y1000-MIX.txt',
'g18_84pp_2A_MVP6_GoodiesT0-HKJ-DFG_MIX-CMVP6_Y1000-MIX.txt',
'g18_84pp_2A_MVP7_GoodiesT0-HKJ-DFG_MIX-CMVP7_Y1000-MIX.txt']

expression = 'g18_84pp_2A_MVP(.*?)_Goodies(.*?)_MIX(.*?)\.txt'
f = lambda x: re.findall(expression, x)
_f = lambda x: len(re.findall(expression, x))==3

for x in names:
    print(f(x))
</snippet></ROW><ROW><id>17680017</id><snippet>[('1', 'T0-HKJ-DFG', '-CMVP1_Y1000-MIX')]
[('2', 'T0-HKJ-DFG', '-CMVP2_Y1000-MIX')]
[('3', 'T0-HKJ-DFG', '-CMVP3_Y1000-MIX')]
[('4', 'T0-HKJ-DFG', '-CMVP4_Y1000-MIX')]
[('5', 'T0-HKJ-DFG', '-CMVP5_Y1000-MIX')]
[('6', 'T0-HKJ-DFG', '-CMVP6_Y1000-MIX')]
[('7', 'T0-HKJ-DFG', '-CMVP7_Y1000-MIX')]
</snippet></ROW><ROW><id>17680017</id><snippet>names = list(filter(_f, names))
</snippet></ROW><ROW><id>17680365</id><snippet>insertText</snippet></ROW><ROW><id>17680365</id><snippet>editor.textCursor().insertText('X')
</snippet></ROW><ROW><id>17680365</id><snippet>old_position = editor.textCursor().position()
# ...
new_cursor = editor.textCursor()
new_cursor.setPosition(old_position)
editor.setTextCursor(cursor)
</snippet></ROW><ROW><id>17680400</id><snippet>myArr = [1,2,3]
len(myArr) # returns 3
</snippet></ROW><ROW><id>17680400</id><snippet>len(outbox_details.details['declined'])
</snippet></ROW><ROW><id>17680400</id><snippet>list</snippet></ROW><ROW><id>17680508</id><snippet>%i</snippet></ROW><ROW><id>17680508</id><snippet>%d</snippet></ROW><ROW><id>17680508</id><snippet>scanf()</snippet></ROW><ROW><id>17680508</id><snippet>scanf</snippet></ROW><ROW><id>17680508</id><snippet>str.format()</snippet></ROW><ROW><id>17680508</id><snippet>format()</snippet></ROW><ROW><id>17680508</id><snippet>i</snippet></ROW><ROW><id>17680508</id><snippet>d</snippet></ROW><ROW><id>17680674</id><snippet>match</snippet></ROW><ROW><id>17680674</id><snippet>pct_re.search(line)</snippet></ROW><ROW><id>17680779</id><snippet>netifaces</snippet></ROW><ROW><id>17680779</id><snippet>def isAnInterfaceUp(anInterface):
    addr = netifaces.ifaddresses(anInterface)
    return netifaces.AF_INET in addr
</snippet></ROW><ROW><id>17680928</id><snippet>StringVar</snippet></ROW><ROW><id>17680928</id><snippet>import smtplib
from Tkinter import *
import tkMessageBox

def Composemail(sender,password,receivers,message):
    try:
        server = smtplib.SMTP()
        server.connect('smtp.gmail.com',587)
        server.ehlo()
        server.starttls()
        server.login(sender, password)
        server.sendmail(sender, receivers, message)
        tkMessageBox.showinfo("Sending Mail information","Mail sent.")
    # Just a tip, "error" isn't defined yet so it will blow up.
    except smtplib.SMTPException, error:
        tkMessageBox.showinfo("Sending Mail information","Sending Mail failed.Try again  later.")

a=Tk()
a.title("MailsNow-A new place for sending emails")
a.geometry("1000x700")
b=Label(a,fg="Purple",text="From")
b.pack()
c=Entry(a,bd=5,width=100)
c.pack()
d=Label(a,fg="Purple",text="Password")
d.pack()
e=Entry(a,bd=5,width=100,show="*")
e.pack()
f=Label(a,fg="Purple",text="To")
f.pack()
g=Entry(a,bd=5,width=100)
g.pack()
h=Label(a,fg="Purple",text="Subject")
h.pack()
i=Entry(a,bd=5,width=100)
i.pack()
j=Label(a,fg="Purple",text="Type your email here")
j.pack()
k=Text(a,bd=5,height=20,width=100)
k.pack()

def getstuff():
    # You can retrieve the text entered into an entrybox using the get method
    sender=c.get()
    password=e.get()
    receivers=g.get()
    subject=i.get()
    # Since textboxes are multiline, I have to tell it what text to get.
    # 0.0,END is saying "get everything from start to finish".
    message=k.get(0.0,END)

    # One thing I noted was that you are not sending the subject to
    # Composemail.  Is this what you want?
    Composemail(sender,password,receivers,message)

l=Button(a, text="Sendmail",bg="Purple",activebackground="Yellow",
command=getstuff)
l.pack()

a.mainloop()
</snippet></ROW><ROW><id>17680928</id><snippet>Composemail</snippet></ROW><ROW><id>17681053</id><snippet>Author Not Found</snippet></ROW><ROW><id>17681053</id><snippet>X Not Found</snippet></ROW><ROW><id>17681180</id><snippet>hit_test(self, x, y)</snippet></ROW><ROW><id>17681180</id><snippet>class Grass(Entity):
    def __init__(self, x, y, image_cache):
        Entity.__init__(self)
        self.image = functions.get_image("data/images/Grass.png", image_cache)
        self.image.convert()
        self.rect = Rect(x, y, 32, 32)
    def hit_test(self, x, y):
        return (self.rect.x &lt;= x &lt; self.rect.x+self.rect.width and 
                self.rect.y &lt;= y &lt; self.rect.y+self.rect.height) 
</snippet></ROW><ROW><id>17681293</id><snippet>&gt;&gt;&gt; import objc
&gt;&gt;&gt; from Cocoa import NSUserDefaults
&gt;&gt;&gt; defs = NSUserDefaults.standardUserDefaults() 
&gt;&gt;&gt; langs = defs.objectForKey_("AppleLanguages")
&gt;&gt;&gt; preferred_lang = langs.objectAtIndex_(0)
&gt;&gt;&gt; print preferred_lang
en
</snippet></ROW><ROW><id>17681326</id><snippet>match</snippet></ROW><ROW><id>17681326</id><snippet>groups</snippet></ROW><ROW><id>17681326</id><snippet>import re
match = re.search('^[^\s]+,\s*([a-zA-Z]{2})$', my_string)
if match:
    print match.groups()[0]
</snippet></ROW><ROW><id>17681390</id><snippet>pack_forget</snippet></ROW><ROW><id>17681390</id><snippet>grid_forget</snippet></ROW><ROW><id>17681390</id><snippet>grid_remove</snippet></ROW><ROW><id>17681390</id><snippet>destroy</snippet></ROW><ROW><id>17681420</id><snippet>json.dumps</snippet></ROW><ROW><id>17681420</id><snippet>L</snippet></ROW><ROW><id>17681420</id><snippet>&gt;&gt;&gt; json.dumps({'status': 'default', 'ID': '7717', 'recordTimestamp': 1372651201000L, 'Latitude': 50.836689, 'Longitude': -53.879143})
'{"status": "default", "Latitude": 50.836689, "Longitude": -53.879143, "ID": "7717", "recordTimestamp": 1372651201000}'

&gt;&gt;&gt; json.dumps(98765432109876543210L)
'98765432109876543210'
</snippet></ROW><ROW><id>17681431</id><snippet>&gt;&gt;&gt; html
'&lt;a href="test.html?uid=5444974"&gt;\n&lt;a href="test.html?uid=5444972"&gt;\n&lt;a href="test.html?uid=54444972"&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; ass = soup.find_all('a')
&gt;&gt;&gt; r = re.compile('uid=(\d+)')
&gt;&gt;&gt; uids = []
&gt;&gt;&gt; for a in ass:
...     uids.append(r.search(a['href']).group(1))
... 
&gt;&gt;&gt; uids
['5444974', '5444972', '54444972']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17681755</id><snippet>True</snippet></ROW><ROW><id>17681755</id><snippet>for ns in namespaces.keys():
    if ns in open_url.url:
        namespaces[ns] = True
</snippet></ROW><ROW><id>17681755</id><snippet>= True</snippet></ROW><ROW><id>17681755</id><snippet>namespaces[ns] = (True, namespaces[ns][1])
</snippet></ROW><ROW><id>17681755</id><snippet>for ns in namespaces:
</snippet></ROW><ROW><id>17681823</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a=np.zeros((2,5))
&gt;&gt;&gt; a
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
&gt;&gt;&gt; a.shape
(2, 5)
</snippet></ROW><ROW><id>17681823</id><snippet>&gt;&gt;&gt; a=np.zeros((300,128))
&gt;&gt;&gt; b=np.zeros((1000,128))
&gt;&gt;&gt; a.shape
(300, 128)
&gt;&gt;&gt; b.shape
(1000, 128)
&gt;&gt;&gt; c=np.vstack((a,b))
&gt;&gt;&gt; c.shape
(1300, 128)
&gt;&gt;&gt; len(c)
1300
</snippet></ROW><ROW><id>17681823</id><snippet>&gt;&gt;&gt; np.dstack((a,a)).shape
(300, 128, 2)
</snippet></ROW><ROW><id>17681823</id><snippet>a=[array1,array2,...,arrayn]
c=np.vstack(a)
</snippet></ROW><ROW><id>17681902</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; line = "why people don't know what are regex??? let me know 321dsasdsa@dasdsa.com.lol"
&gt;&gt;&gt; match = re.search(r'[\w\.-]+@[\w\.-]+', line)
&gt;&gt;&gt; match.group(0)
'321dsasdsa@dasdsa.com.lol'
</snippet></ROW><ROW><id>17681902</id><snippet>findall</snippet></ROW><ROW><id>17681902</id><snippet>&gt;&gt;&gt; line = "why people don't know what are regex??? let me know 321dsasdsa@dasdsa.com.lol   dssdadsa dadaads@dsdds.com"
&gt;&gt;&gt; match = re.findall(r'[\w\.-]+@[\w\.-]+', line)
&gt;&gt;&gt; match
['321dsasdsa@dasdsa.com.lol', 'dadaads@dsdds.com']
</snippet></ROW><ROW><id>17681915</id><snippet>sys.stdin</snippet></ROW><ROW><id>17681915</id><snippet># We're going to monkey-patch stdin
import sys
from cStringIO import StringIO
old = sys.stdin
sys.stdin = StringIO('hello')

# Now read from stdin
result = raw_input('foo')

# And replace the regular stdin
sys.stdin = old
</snippet></ROW><ROW><id>17681915</id><snippet>raw_input</snippet></ROW><ROW><id>17681915</id><snippet>raw_input</snippet></ROW><ROW><id>17681915</id><snippet>foo</snippet></ROW><ROW><id>17681915</id><snippet>import sys
from cStringIO import StringIO

class PatchStdin(object):
    def __init__(self, value):
        self._value = value
        self._stdin = sys.stdin
    def __enter__(self):
        # Monkey-patch stdin
        sys.stdin = StringIO(self._value)
        return self
    def __exit__(self, typ, val, traceback):
        # Undo the monkey-patch
        sys.stdin = self._stdin


# Usage
with PatchStdin('Dan'):
    name = raw_input('What is your name? ')
    print 'Hello, %s' % name
</snippet></ROW><ROW><id>17682374</id><snippet>itertools.product</snippet></ROW><ROW><id>17682374</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; n = 4
&gt;&gt;&gt; list(itertools.product((0,1), repeat=n))
[(0, 0, 0, 0), (0, 0, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1), (0, 1, 0, 0), (0, 1, 0, 1), (0, 1, 1, 0), (0, 1, 1, 1), (1, 0, 0, 0), (1, 0, 0, 1), (1, 0, 1, 0), (1, 0, 1, 1), (1, 1, 0, 0), (1, 1, 0, 1), (1, 1, 1, 0), (1, 1, 1, 1)]
</snippet></ROW><ROW><id>17682382</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.random.rand(100)
y = np.random.rand(100)
t = np.arange(100)

plt.scatter(x, y, c=t)
plt.show()
</snippet></ROW><ROW><id>17682382</id><snippet>t</snippet></ROW><ROW><id>17682382</id><snippet>[1, 2, ..., 100]</snippet></ROW><ROW><id>17682382</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.arange(100)
y = x
t = x
plt.scatter(x, y, c=t)
plt.show()
</snippet></ROW><ROW><id>17682382</id><snippet>import matplotlib.cm as cm
plt.scatter(x, y, c=t, cmap=cm.colormap_name)
</snippet></ROW><ROW><id>17682423</id><snippet>extends</snippet></ROW><ROW><id>17682423</id><snippet>include</snippet></ROW><ROW><id>17682489</id><snippet>&gt;&gt;&gt; df
           area  count
co tp                 
DE Lake      10      7
   Forest    20      5
FR Lake      30      2
   Forest    40      3
&gt;&gt;&gt; after = {r + (k,): v for r, kv in df.iterrows() for k,v in kv.to_dict().items()}
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(after)
{('DE', 'Forest', 'area'): 20,
 ('DE', 'Forest', 'count'): 5,
 ('DE', 'Lake', 'area'): 10,
 ('DE', 'Lake', 'count'): 7,
 ('FR', 'Forest', 'area'): 40,
 ('FR', 'Forest', 'count'): 3,
 ('FR', 'Lake', 'area'): 30,
 ('FR', 'Lake', 'count'): 2}
</snippet></ROW><ROW><id>17682555</id><snippet>d['key']</snippet></ROW><ROW><id>17682555</id><snippet>BINARY_SUBSCR</snippet></ROW><ROW><id>17682555</id><snippet>.__getitem__()</snippet></ROW><ROW><id>17682555</id><snippet>defaultdict</snippet></ROW><ROW><id>17682555</id><snippet>list</snippet></ROW><ROW><id>17682555</id><snippet>dict.__getitem__()</snippet></ROW><ROW><id>17682555</id><snippet>dict[key]</snippet></ROW><ROW><id>17682555</id><snippet>defaultdict</snippet></ROW><ROW><id>17682555</id><snippet>lambda: [1, 2, 3]</snippet></ROW><ROW><id>17682555</id><snippet>lambda</snippet></ROW><ROW><id>17682631</id><snippet>import importlib
path = importlib.import_module('os.path')
print(path.join('a','b'))
</snippet></ROW><ROW><id>17682996</id><snippet>dict</snippet></ROW><ROW><id>17682996</id><snippet>d1 = { '2011-10-10': [1, 1],
       '2007-08-09': [5, 3]
     }
d2 = { '2011-10-10': [3, 4],
       '2007-09-05': [1, 1]
     }
</snippet></ROW><ROW><id>17682996</id><snippet>d3 = { k : d1[k] + d2[k] for k in d1 if k in d2 }
</snippet></ROW><ROW><id>17683215</id><snippet>&gt;&gt;&gt; '{1}{0}{1}'.format(s.join(lis), s)
'xaxbxcxdx'
</snippet></ROW><ROW><id>17683541</id><snippet>section = soup.find('span', id='Births').parent
</snippet></ROW><ROW><id>17683541</id><snippet>births = section.find_next('ul').find_all('li')
</snippet></ROW><ROW><id>17683636</id><snippet>level_lookup_order = ['PRIORITY_1', 'PRIORITY_2', ...]
for key in level_lookup_order:
    if key in level_lookup:
        do_stuff(level_lookup[key])
</snippet></ROW><ROW><id>17683636</id><snippet>PRIORITY_1 = 1
PRIORITY_2 = 2
...
lookup_order = {PRIORITY_1: 42, PRIORITY_2: 24, ...}
</snippet></ROW><ROW><id>17683652</id><snippet>if __name__ == "__main__": web.run(urls, globals(), web.reloader)</snippet></ROW><ROW><id>17683653</id><snippet>def binary_search(inList):
    low = 0
    high = len(inList)

    while low + 1 &lt; high:
        mid = (low + high) // 2
        upper = inList[mid:high]
        lower = inList[low:mid]
        if any(lower):
            high = mid
        elif any(upper):
            low = mid
        else:
            # Neither side has a 1
            return -1
    return low
</snippet></ROW><ROW><id>17683653</id><snippet>  item 0 item 1 item 2 item 3 item 4 item 5 item 6 item 7 item 8
 |______|______|______|______|______|______|______|______|______|
 0      1      2      3      4      5      6      7      8      9
low                         mid                                high
</snippet></ROW><ROW><id>17683653</id><snippet>  item 0 item 1 item 2 item 3 
 |______|______|______|______|
 0      1      2      3      4
low                         mid

  item 4 item 5 item 6 item 7 item 8
 |______|______|______|______|______|
 4      5      6      7      8      9
mid                                high
</snippet></ROW><ROW><id>17683670</id><snippet>object</snippet></ROW><ROW><id>17683829</id><snippet>next(infile)  # Skip the first line
for line in infile:
    words = line.split(',')
    medalDict[words[0]] = tuple(map(int, words[1:]))
</snippet></ROW><ROW><id>17683916</id><snippet>from django.db import models
from django.contrib import admin

class Employee(models.Model):
    lastname = models.CharField("Last", max_length=64)
    firstname = models.CharField("First", max_length=64)
    middlename = models.CharField("Middle", max_length=64)
    clocknumber = models.CharField(max_length=16)

    def _get_full_name(self):
        "Returns the person's full name."
        return '%s, %s %s' % (self.lastname, self.firstname, self.middlename)
    full_name = property(_get_full_name)


    class Meta:
        ordering = ['lastname','firstname', 'middlename']

class EmployeeAdmin(admin.ModelAdmin):
    list_display = ('clocknumber','full_name')
    fieldsets = [("Name", {"fields":(("lastname", "firstname", "middlename"), "clocknumber")}),
]

admin.site.register(Employee, EmployeeAdmin)
</snippet></ROW><ROW><id>17684107</id><snippet>myapp.exe -embed -pyfile template.py</snippet></ROW><ROW><id>17684107</id><snippet>start C:\Python25\python C:\template.py</snippet></ROW><ROW><id>17684151</id><snippet>POST</snippet></ROW><ROW><id>17684151</id><snippet>import urllib,httplib

conn = httplib.HTTPConnection("auburn.craigslist.org")
params = urllib.urlencode({'query': 'english tutor', 'catAbb': 'bbb'})
conn.request("GET","/search?%s" % params)
response = conn.getresponse()

print response.read()
</snippet></ROW><ROW><id>17684157</id><snippet>DictVectorizer</snippet></ROW><ROW><id>17684157</id><snippet>CountVectorizer</snippet></ROW><ROW><id>17684157</id><snippet>str.split</snippet></ROW><ROW><id>17684157</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; from sklearn.feature_extraction import DictVectorizer
&gt;&gt;&gt; vect = DictVectorizer()
&gt;&gt;&gt; samples = [":) :) :)", "I have to push the pram a lot"]
&gt;&gt;&gt; X = vect.fit_transform(Counter(s.split()) for s in samples)
&gt;&gt;&gt; X
&lt;2x9 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
    with 9 stored elements in Compressed Sparse Row format&gt;
&gt;&gt;&gt; vect.vocabulary_
{'a': 2, ':)': 0, 'I': 1, 'to': 8, 'have': 3, 'lot': 4, 'push': 6, 'the': 7, 'pram': 5}
&gt;&gt;&gt; vect.inverse_transform(X[0])  # just for inspection
[{':)': 3.0}]
</snippet></ROW><ROW><id>17684157</id><snippet>DictVectorizer</snippet></ROW><ROW><id>17684529</id><snippet>import numpy
numpy.std(myList)
</snippet></ROW><ROW><id>17684529</id><snippet>i</snippet></ROW><ROW><id>17684529</id><snippet>import numpy
numpy.std(zip(*myList)[i])
</snippet></ROW><ROW><id>17684529</id><snippet>import numpy
import itertools
numpy.std([i for i in itertools.izip(*myList)[i] if i&gt;=0])
</snippet></ROW><ROW><id>17684533</id><snippet>phones.csv</snippet></ROW><ROW><id>17684533</id><snippet>01253873647
01253776535
01142726749
</snippet></ROW><ROW><id>17684533</id><snippet>import csv
from scrapy.item import Item, Field

from scrapy.spider import BaseSpider
from scrapy.http import Request
from scrapy.http import FormRequest
from scrapy.selector import HtmlXPathSelector


class BtwItem(Item):
    fttcAvailable = Field()
    phoneNumber = Field()


class BtwSpider(BaseSpider):
    name = "btw"
    allowed_domains = ["samknows.com"]

    def start_requests(self):
        yield Request("http://www.samknows.com/broadband/broadband_checker", self.parse_main_page)

    def parse_main_page(self, response):
        with open('phones.csv', 'r') as f:
            reader = csv.reader(f)
            for row in reader:
                phone_number = row[0]
                yield FormRequest.from_response(response,
                                                formdata={'broadband_checker[phone]': phone_number},
                                                callback=self.after_post,
                                                meta={'phone_number': phone_number})

    def after_post(self, response):
        hxs = HtmlXPathSelector(response)
        sites = hxs.select('//div[@id="results"]')

        phone_number = response.meta['phone_number']
        for site in sites:
            item = BtwItem()

            fttc = site.select("div[@class='content']/div[@id='btfttc']/ul/li/text()").extract()
            item['phoneNumber'] = phone_number
            item['fttcAvailable'] = 'not' in fttc[0]

            yield item
</snippet></ROW><ROW><id>17684533</id><snippet>{'fttcAvailable': False, 'phoneNumber': '01253873647'}
{'fttcAvailable': False, 'phoneNumber': '01253776535'}
{'fttcAvailable': True, 'phoneNumber': '01142726749'}
</snippet></ROW><ROW><id>17684533</id><snippet>start_requests</snippet></ROW><ROW><id>17684533</id><snippet>yield</snippet></ROW><ROW><id>17684533</id><snippet>Requests</snippet></ROW><ROW><id>17684533</id><snippet>phone_number</snippet></ROW><ROW><id>17684533</id><snippet>meta</snippet></ROW><ROW><id>17684533</id><snippet>Item</snippet></ROW><ROW><id>17684703</id><snippet>boost::python::list</snippet></ROW><ROW><id>17684703</id><snippet>boost::python::list</snippet></ROW><ROW><id>17684703</id><snippet>booot::python::list</snippet></ROW><ROW><id>17684703</id><snippet>std::vector</snippet></ROW><ROW><id>17684703</id><snippet>#include &lt;iostream&gt; // std::cout
#include &lt;utility&gt;  // std::make_pair
#include &lt;boost/foreach.hpp&gt;
#include &lt;boost/python.hpp&gt;
#include &lt;boost/python/stl_iterator.hpp&gt;

boost::python::list list;

/// @brief Store handle to the list.
///
/// @param pylist Python list for which a handle will be maintained.
void set(const boost::python::list&amp; pylist)
{
  // As the boost::python::list object is smart-pointer like, this
  // creates a reference to the python list, rather than creating a 
  // copy of the python list.
  list = pylist;
}

// Iterate over the current list, printing all ints.
void display()
{
  std::cout &lt;&lt; "in display" &lt;&lt; std::endl;
  typedef boost::python::stl_input_iterator&lt;int&gt; iterator_type;
  BOOST_FOREACH(const iterator_type::value_type&amp; data, 
                std::make_pair(iterator_type(list), // begin
                               iterator_type()))    // end
  {
    std::cout &lt;&lt; data &lt;&lt; std::endl;
  }
}

BOOST_PYTHON_MODULE(example) {
  namespace python = boost::python;
  python::def("set",     &amp;set);
  python::def("display", &amp;display);
}
</snippet></ROW><ROW><id>17684703</id><snippet>&gt;&gt;&gt; import example
&gt;&gt;&gt;
&gt;&gt;&gt; x = range(2)
&gt;&gt;&gt; x
[0, 1]
&gt;&gt;&gt; example.set(x)
&gt;&gt;&gt; example.display()
in display
0
1
&gt;&gt;&gt; x[:] = range(7, 10)
&gt;&gt;&gt; example.display()
in display
7
8
9
</snippet></ROW><ROW><id>17684703</id><snippet>typedef boost::python::stl_input_iterator&lt;int&gt; iterator_type;
iterator_type iterator(list);
</snippet></ROW><ROW><id>17684703</id><snippet>boost::python::stl_input_iterator</snippet></ROW><ROW><id>17684703</id><snippet>list</snippet></ROW><ROW><id>17684703</id><snippet>display()</snippet></ROW><ROW><id>17684703</id><snippet>BOOST_PYTHON_MODULE(example) {
  PyEval_InitThreads(); // Initialize GIL to support non-python threads.
  ...
}
</snippet></ROW><ROW><id>17684703</id><snippet>/// @brief RAII class used to lock and unlock the GIL.
class gil_lock
{
public:
  gil_lock()  { state_ = PyGILState_Ensure(); }
  ~gil_lock() { PyGILState_Release(state_);   }
private:
  PyGILState_STATE state_;
};
</snippet></ROW><ROW><id>17684703</id><snippet>/// @brief Entry point for delayed display thread.
///
/// @param Delay in seconds.
void display_in_main(unsigned int seconds)
{
  boost::this_thread::sleep_for(boost::chrono::seconds(seconds));
  gil_lock lock; // Acquire GIL.
  display();     // Can safely modify python objects.
  // GIL released when lock goes out of scope.
}

/// @brief Schedule the list to be displayed.
///
/// @param Delay in seconds.
void display_in(unsigned int seconds)
{
  // Start detached thread.
  boost::thread(&amp;display_in_main, seconds).detach();
}
</snippet></ROW><ROW><id>17684703</id><snippet>#include &lt;iostream&gt; // std::cout
#include &lt;utility&gt;  // std::make_pair
#include &lt;boost/foreach.hpp&gt;
#include &lt;boost/python.hpp&gt;
#include &lt;boost/python/stl_iterator.hpp&gt;
#include &lt;boost/thread.hpp&gt;

boost::python::list list;

/// @brief Store handle to the list.
///
/// @param pylist Python list for which a handle will be maintained.
void set(const boost::python::list&amp; pylist)
{
  list = pylist;
}

// Iterate over the current list, printing all ints.
void display()
{
  std::cout &lt;&lt; "in display" &lt;&lt; std::endl;
  typedef boost::python::stl_input_iterator&lt;int&gt; iterator_type;
  BOOST_FOREACH(const iterator_type::value_type&amp; data, 
                std::make_pair(iterator_type(list), // begin
                               iterator_type()))    // end
  {
    std::cout &lt;&lt; data &lt;&lt; std::endl;
  }
}

/// @brief RAII class used to lock and unlock the GIL.
class gil_lock
{
public:
  gil_lock()  { state_ = PyGILState_Ensure(); }
  ~gil_lock() { PyGILState_Release(state_);   }
private:
  PyGILState_STATE state_;
}; 

/// @brief Entry point for delayed display thread.
///
/// @param Delay in seconds.
void display_in_main(unsigned int seconds)
{
  boost::this_thread::sleep_for(boost::chrono::seconds(seconds));
  gil_lock lock; // Acquire GIL.
  display();     // Can safely modify python objects.
  // GIL released when lock goes out of scope.
}

/// @brief Schedule the list to be displayed.
///
/// @param Delay in seconds.
void display_in(unsigned int seconds)
{
  // Start detached thread.
  boost::thread(&amp;display_in_main, seconds).detach();
}

BOOST_PYTHON_MODULE(example) {
  PyEval_InitThreads(); // Initialize GIL to support non-python threads.

  namespace python = boost::python;
  python::def("set",        &amp;set);
  python::def("display",    &amp;display);
  python::def("display_in", &amp;display_in);
}
</snippet></ROW><ROW><id>17684703</id><snippet>&gt;&gt;&gt; import example
&gt;&gt;&gt; from time import sleep
&gt;&gt;&gt; 
&gt;&gt;&gt; x = range(2)
&gt;&gt;&gt; example.set(x)
&gt;&gt;&gt; example.display()
in display
0
1
&gt;&gt;&gt; example.display_in(3)
&gt;&gt;&gt; x[:] = range(7, 10)
&gt;&gt;&gt; print "sleeping"
sleeping
&gt;&gt;&gt; sleep(6)
in display
7
8
9
</snippet></ROW><ROW><id>17684703</id><snippet>sleep(6)</snippet></ROW><ROW><id>17684703</id><snippet>x</snippet></ROW><ROW><id>17684932</id><snippet>candidates = session.query(User).filter((User.time - datetime.datetime.utcnow()) &gt; datetime.timedelta(weeks=8))
</snippet></ROW><ROW><id>17684992</id><snippet>np.empty(shape=(length, 1), dtype="S36")
</snippet></ROW><ROW><id>17684992</id><snippet>shape=length</snippet></ROW><ROW><id>17685153</id><snippet>def func():
    try:
        logger.info("Some informational message")
        time.sleep(15)
        print "And we are done here"
    except:
        print "We are interrupted"
        pprint.pprint(sys.exc_info())
</snippet></ROW><ROW><id>17685153</id><snippet>done()</snippet></ROW><ROW><id>17685153</id><snippet>exception()</snippet></ROW><ROW><id>17685153</id><snippet>func()</snippet></ROW><ROW><id>17685153</id><snippet>def doPostprocess(self):
with ThreadPoolExecutor(max_workers=1) as executor:
    future = executor.submit(othermodule.func)
    while not future.done():
        QtGui.qApp.processEvents()
        self.progressbar.setValue(1)
        time.sleep(0.001)
    if future.exception() is not None:
        raise future.exception()
self.progressbar.hide()
</snippet></ROW><ROW><id>17685271</id><snippet>shutil</snippet></ROW><ROW><id>17685271</id><snippet>copy2</snippet></ROW><ROW><id>17685271</id><snippet>copy()</snippet></ROW><ROW><id>17685271</id><snippet>copy2()</snippet></ROW><ROW><id>17685271</id><snippet>copy</snippet></ROW><ROW><id>17685271</id><snippet>copymode</snippet></ROW><ROW><id>17685271</id><snippet>copystat</snippet></ROW><ROW><id>17685271</id><snippet>copy2</snippet></ROW><ROW><id>17685357</id><snippet>xldate_as_tuple</snippet></ROW><ROW><id>17685357</id><snippet>test.xls</snippet></ROW><ROW><id>17685357</id><snippet>3/11/2003 4:03:00 AM</snippet></ROW><ROW><id>17685357</id><snippet>A1</snippet></ROW><ROW><id>17685357</id><snippet>from datetime import datetime, timedelta
import xlrd

book = xlrd.open_workbook(filename='test.xls')
sheet = book.sheet_by_name('Sheet1')

date = sheet.cell_value(0, 0)
datetime_value = datetime(*xlrd.xldate_as_tuple(date, 0))

print datetime_value  # prints 2003-11-03 04:03:00
print datetime_value.time()  # 04:03:00
print datetime_value - timedelta(hours=1)  # prints 2003-11-03 03:03:00
</snippet></ROW><ROW><id>17685559</id><snippet>ord()</snippet></ROW><ROW><id>17685559</id><snippet>ascii</snippet></ROW><ROW><id>17685559</id><snippet>&gt;&gt;&gt; testString = "test"
&gt;&gt;&gt; testList = [ord(elem) for elem in testString]  # testList = map(ord, testString) is another way.
&gt;&gt;&gt; testList
[116, 101, 115, 116]
</snippet></ROW><ROW><id>17685559</id><snippet>97</snippet></ROW><ROW><id>17685559</id><snippet>'a'</snippet></ROW><ROW><id>17685559</id><snippet>&gt;&gt;&gt; chr(97)
'a'
</snippet></ROW><ROW><id>17685559</id><snippet>help</snippet></ROW><ROW><id>17685559</id><snippet>&gt;&gt;&gt; help(ord)
Help on built-in function ord in module __builtin__:

ord(...)
    ord(c) -&gt; integer

    Return the integer ordinal of a one-character string.
</snippet></ROW><ROW><id>17685559</id><snippet>&gt;&gt;&gt; sum(map(ord, testString))
448
</snippet></ROW><ROW><id>17685559</id><snippet>&gt;&gt;&gt; sum(ord(elem) for elem in testString)
448
</snippet></ROW><ROW><id>17685607</id><snippet>sorteddict</snippet></ROW><ROW><id>17685607</id><snippet>sd = sorteddict.sorteddict({
        u'key1': {'a': 'name', 'number': 282},
        u'key2': {'a': 'name2','number': 1421},
        u'key3': {'a': 'name3', 'number': 95}, 
    }, key=operator.itemgetter('number'))
</snippet></ROW><ROW><id>17685607</id><snippet>OrderedDict</snippet></ROW><ROW><id>17685607</id><snippet>sorted</snippet></ROW><ROW><id>17685607</id><snippet>od = collections.OrderedDict(sorted(d.items(), key=lambda item: item[1]['number']))
</snippet></ROW><ROW><id>17685607</id><snippet>OrderedDict</snippet></ROW><ROW><id>17685607</id><snippet>sortedlist</snippet></ROW><ROW><id>17685607</id><snippet>sorteddict</snippet></ROW><ROW><id>17685607</id><snippet>OrderedDict</snippet></ROW><ROW><id>17685671</id><snippet>pkg_resources</snippet></ROW><ROW><id>17685671</id><snippet>includes</snippet></ROW><ROW><id>17686099</id><snippet>bs</snippet></ROW><ROW><id>17686099</id><snippet>lxml</snippet></ROW><ROW><id>17686099</id><snippet>import datetime
from scrapy.item import Item, Field
from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector


class BillBoardItem(Item):
    date = Field()
    song = Field()
    artist = Field()


BASE_URL = "http://www.billboard.com/charts/%s/hot-100"


class BillBoardSpider(BaseSpider):
    name = "billboard_spider"
    allowed_domains = ["billboard.com"]

    def __init__(self):
        date = datetime.date(year=1958, month=8, day=9)

        self.start_urls = []
        while True:
            if date.year &gt;= 2013:
                break

            self.start_urls.append(BASE_URL % date.strftime('%Y-%m-%d'))
            date += datetime.timedelta(days=7)

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        date = hxs.select('//span[@class="chart_date"]/text()').extract()[0]

        songs = hxs.select('//div[@class="listing chart_listing"]/article')
        for song in songs:
            item = BillBoardItem()
            item['date'] = date
            try:
                item['song'] = song.select('.//header/h1/text()').extract()[0]
                item['artist'] = song.select('.//header/p[@class="chart_info"]/a/text()').extract()[0]
            except:
                continue

            yield item
</snippet></ROW><ROW><id>17686099</id><snippet>billboard.py</snippet></ROW><ROW><id>17686099</id><snippet>scrapy runspider billboard.py -o output.json</snippet></ROW><ROW><id>17686099</id><snippet>output.json</snippet></ROW><ROW><id>17686099</id><snippet>...
{"date": "September 20, 1958", "artist": "Domenico Modugno", "song": "Nel Blu Dipinto Di Blu (Volar\u00c3\u00a9)"}
{"date": "September 20, 1958", "artist": "The Everly Brothers", "song": "Bird Dog"}
{"date": "September 20, 1958", "artist": "The Elegants", "song": "Little Star"}
{"date": "September 20, 1958", "artist": "Tommy Edwards", "song": "It's All In The Game"}
{"date": "September 20, 1958", "artist": "Jimmy Clanton And His Rockets", "song": "Just A Dream"}
{"date": "September 20, 1958", "artist": "Poni-Tails", "song": "Born Too Late"}
{"date": "September 20, 1958", "artist": "The Olympics", "song": "Western Movies"}
{"date": "September 20, 1958", "artist": "Little Anthony And The Imperials", "song": "Tears On My Pillow"}
{"date": "September 20, 1958", "artist": "Robin Luke", "song": "Susie Darlin'"}
{"date": "September 27, 1958", "artist": "Domenico Modugno", "song": "Nel Blu Dipinto Di Blu (Volar\u00c3\u00a9)"}
{"date": "September 27, 1958", "artist": "The Everly Brothers", "song": "Bird Dog"}
{"date": "September 27, 1958", "artist": "Tommy Edwards", "song": "It's All In The Game"}
{"date": "September 27, 1958", "artist": "The Elegants", "song": "Little Star"}
{"date": "September 27, 1958", "artist": "Jimmy Clanton And His Rockets", "song": "Just A Dream"}
{"date": "September 27, 1958", "artist": "Little Anthony And The Imperials", "song": "Tears On My Pillow"}
{"date": "September 27, 1958", "artist": "Robin Luke", "song": "Susie Darlin'"}
...
</snippet></ROW><ROW><id>17686218</id><snippet>class</snippet></ROW><ROW><id>17686218</id><snippet>x = 2</snippet></ROW><ROW><id>17686218</id><snippet>class</snippet></ROW><ROW><id>17686218</id><snippet>def foo():
    class A(object):
        pass
</snippet></ROW><ROW><id>17686218</id><snippet>def foo():
    A = 2
</snippet></ROW><ROW><id>17686218</id><snippet>class A(object):
    class B(object):
        pass
</snippet></ROW><ROW><id>17686218</id><snippet>class A(object):
    B = 2
</snippet></ROW><ROW><id>17686430</id><snippet>ps aux |grep SOMETHING</snippet></ROW><ROW><id>17686430</id><snippet>grep SOMETHING</snippet></ROW><ROW><id>17686430</id><snippet>ps aux | grep -v grep | grep YOURSCRIPT</snippet></ROW><ROW><id>17686430</id><snippet>man grep</snippet></ROW><ROW><id>17686547</id><snippet>from Tkinter import *


books = [
["Bible", "Biblia", 10, 5],
["Bible Teach", "Bible Teach", 10, 10],
["Song Book", "El Song Book", 10, 10],
["Daniel's Prophecy", "Spanish D Prof", 10, 10]
]

def inventoryButton():
    invOutput = ""
    for book in books:
        if book[2] &gt; book[3]:
            invOutput += "Title: " + book[0] + "\n"
            invOutput += "You need to order more books.\n\n"
        else:
            invOutput += "Title: " + book[0] + "\n"
            invOutput += "Status: Inventory is sufficient.\n\n"
    #Set the text of the Label "summary"
    summary["text"] = invOutput

window = Tk()
window.title("Literature Inventory System")
window.geometry("500x500")

button = Button(window, text="Check Inventory", command=inventoryButton)
button.pack()

summary = Label(window)
summary.pack()

window.mainloop()
</snippet></ROW><ROW><id>17686551</id><snippet>DictWriter._dict_to_list</snippet></ROW><ROW><id>17686551</id><snippet>def _dict_to_list(self, rowdict):
    if self.extrasaction == "raise":
        wrong_fields = [k for k in rowdict if k not in self.fieldnames]
        if wrong_fields:
            raise ValueError("dict contains fields not in fieldnames: " +
                             ", ".join(wrong_fields))
    return [rowdict.get(key, self.restval) for key in self.fieldnames]
</snippet></ROW><ROW><id>17686551</id><snippet>DictWriter</snippet></ROW><ROW><id>17686551</id><snippet>None</snippet></ROW><ROW><id>17686551</id><snippet>DictWriter</snippet></ROW><ROW><id>17686551</id><snippet>None</snippet></ROW><ROW><id>17686551</id><snippet>DictReader</snippet></ROW><ROW><id>17686551</id><snippet>fieldnames</snippet></ROW><ROW><id>17686551</id><snippet>print row</snippet></ROW><ROW><id>17686551</id><snippet>dict</snippet></ROW><ROW><id>17686551</id><snippet>None: 'foo'</snippet></ROW><ROW><id>17686551</id><snippet>DictReader</snippet></ROW><ROW><id>17686551</id><snippet>DictWriter</snippet></ROW><ROW><id>17686551</id><snippet>extrasaction='ignore'</snippet></ROW><ROW><id>17686551</id><snippet>DictWriter</snippet></ROW><ROW><id>17686551</id><snippet>raise</snippet></ROW><ROW><id>17686635</id><snippet>for b in range(length_spread):
    data = read_spread[b].rstrip('\n')
    splitted = data.split(',')
    plot_id = splitted[1]  # Can keep it as a string

    filename = 'plot_id_' + plot_id + '.file_extension'
    spreadsheet = some_open_method(filename, option='append')
    spreadsheet.writelines('%s\n\n\n\n\n' % splitted)
    spreadsheet.close_method()
</snippet></ROW><ROW><id>17686635</id><snippet>with</snippet></ROW><ROW><id>17686635</id><snippet>with some_open_method(filename) as spreadsheet:
    spreadsheet.writelines('%s\n\n\n\n\n' % splitted)
</snippet></ROW><ROW><id>17686635</id><snippet>all_ids = [1, 2, 4, 5]
# Note: using plot_id as integer now
for plot_id in all_ids:
    filename = 'plot_id_%i.file_extension' % plot_id
    spreadsheet = some_open_method(filename, option='write')
    for b in range(length_spread):
        data = read_spread[b].rstrip('\n')
        splitted = data.split(',')
        if plot_id == int(splitted[1]):
            spreadsheet.writelines('%s\n\n\n\n\n' % splitted)
    spreadsheet.close_method()
</snippet></ROW><ROW><id>17686659</id><snippet>=</snippet></ROW><ROW><id>17686659</id><snippet>plusOne</snippet></ROW><ROW><id>17686659</id><snippet>y</snippet></ROW><ROW><id>17686659</id><snippet>y</snippet></ROW><ROW><id>17686659</id><snippet>y</snippet></ROW><ROW><id>17686659</id><snippet>y</snippet></ROW><ROW><id>17686659</id><snippet>y</snippet></ROW><ROW><id>17686659</id><snippet>None</snippet></ROW><ROW><id>17686659</id><snippet>plusOne2</snippet></ROW><ROW><id>17686659</id><snippet>a</snippet></ROW><ROW><id>17686659</id><snippet>3</snippet></ROW><ROW><id>17686659</id><snippet>a</snippet></ROW><ROW><id>17686659</id><snippet>3</snippet></ROW><ROW><id>17686659</id><snippet>a</snippet></ROW><ROW><id>17686659</id><snippet>2</snippet></ROW><ROW><id>17686659</id><snippet>x = x[:]</snippet></ROW><ROW><id>17686659</id><snippet>x[:]</snippet></ROW><ROW><id>17686734</id><snippet>(x for l in range(2, len(arr)) for x in itertools.combinations(arr, l))
</snippet></ROW><ROW><id>17686734</id><snippet>[x for l in range(2, len(arr)) for x in itertools.combinations(arr, l)]
</snippet></ROW><ROW><id>17686734</id><snippet>res = []
for l in range(2, len(arr)):
    for x in itertools.combinations(arr, l):
        res.append(x)
return res
</snippet></ROW><ROW><id>17686777</id><snippet>"rb"</snippet></ROW><ROW><id>17686777</id><snippet>started = 0
hash_val = 0

with open("video", "rb") as file:
    byte = file.read(1) # read a byte (a single character in text)
    byte_val = ord(byte) # convert the string character into a number

    if started == 0:
        hash_val = byte_val
        started = 1
    hash_val = (hash_val &lt;&lt; 5) - hash_val + byte_val # this is a basic hash

print(hash_val)
</snippet></ROW><ROW><id>17686915</id><snippet>for i in edit_files:
    p4.run("edit" , i) 
</snippet></ROW><ROW><id>17686915</id><snippet>for i in edit_files:
    f=i.replace('"','').strip()
    if len(f)&gt;0:
      print "Opening  ["+f+"]"
      p4.run("edit" , f) 
</snippet></ROW><ROW><id>17686915</id><snippet>with open('C:\\Users\\rgriffin\Desktop\\replace.txt', 'r' )as f:
    for line in f:
        l = line.partition(',')[0].replace('#(', '').replace('U:\\', '//Stream/main/').replace('\\', '/').replace('"', '').strip()
        if len(l)&gt;0:
            edit_files.append(l)
f.close
</snippet></ROW><ROW><id>17686946</id><snippet>def parse_file(file):
    id = ''
    gene = ''

    for line in file:
        if line.startswith('&gt;'):
            if gene:
                yield id, gene

            id = line[1:]
            gene = ''
        else:
            gene += line.strip()
    else:
        yield id, gene # Final gene
</snippet></ROW><ROW><id>17686946</id><snippet>with open('file.txt', 'r') as handle:
    for gene_id, nucleotides in parse_file(handle):
        print gene_id, nucleotides
</snippet></ROW><ROW><id>17686946</id><snippet>itertools</snippet></ROW><ROW><id>17686946</id><snippet>def grouper(line):
    return line.startswith('&gt;') and line[1:]

def itersplit(it, pred):
    groups = (list(group) for key, group in itertools.groupby(it, pred))
    yield from zip(groups, groups)

def parse(file):
    for key, group in itersplit(file, grouper):
        yield key[0], ''.join(group)
</snippet></ROW><ROW><id>17686959</id><snippet>wireLookup</snippet></ROW><ROW><id>17686959</id><snippet>return wireAmpacityTable[pos1][1]
</snippet></ROW><ROW><id>17687052</id><snippet>your_string = "This is a string"
list_of_words = your_string.split()
next_word = list_of_words[list_of_words.index(your_search_word) + 1]
</snippet></ROW><ROW><id>17687095</id><snippet>from nltk.corpus import wordnet as wn

acknowledgment_synset = wn.synset('acknowledgement.n.01')
acknowledgment_lemma = acknowledgment_synset.lemmas[1]

print(acknowledgment_lemma.derivationally_related_forms())
# [Lemma('admit.v.01.acknowledge'), Lemma('acknowledge.v.06.acknowledge')]
</snippet></ROW><ROW><id>17687162</id><snippet>&gt;&gt;&gt; datetime(*strptime(s, "%Y-%m-%dT%H:%M:%S+0000")[0:6]).strftime("%B %d, %Y %I:%M %p")
'July 16, 2013 04:14 PM'
</snippet></ROW><ROW><id>17687287</id><snippet>from csv import DictReader, DictWriter

with open('file1') as fil1, open('file2') as fil2, open('file3', 'wb') as fcompout:
    read1 = DictReader(fil1)
    read2 = DictReader(fil2)
    writenum = DictWriter(fcompout, fieldnames=read2.fieldnames)
    writenum.writeheader()

    for num, line in enumerate(read1):
        line['Length'] = len(line['Name']) # Length of Name
        line['Line Num'] = num+1           # Line Numbers
        writenum.writerow(line)            # Write line to new csv
</snippet></ROW><ROW><id>17687287</id><snippet>Line Num,Command,Name,Length,file,Geo Location,NA,Default,IPStart,IPStop
1,,DRE EXT Ascent Media,20,,,,,,
2,,DRE United Kingdom UKLONEXT LON Extrane lo0.UKLONEXT sw01,57,,United Kingdom,,,,
3,,DRE United Kingdom UKLONEXT LON Extrane lo0.UKLONEXT sw02,57,,United Kingdom,,,,
4,,DRE United Kingdom UKLONDRE LON Sq lab dynamips test nets,57,,United Kingdom,,,,
5,,DRE United States USLAXCPT Corp Point Multilink_Ascent Media,60,,United States,,,,
6,,DRE United Kingdom UKLONSDD SASD-D CORE01 to SW01,49,,United Kingdom,,,,
7,,DRE United Kingdom UKLONSDD SASD-D CORE01 to SW02,49,,United Kingdom,,,,
8,,DRE United Kingdom UKLONSDD SASD-D CORE02 to SW01,49,,United Kingdom,,,,
9,,DRE United Kingdom UKLONSDD SASD-D CORE02 to SW02,49,,United Kingdom,,,,
10,,DRE United Kingdom UKLONSDD SASD-D CORE01 to CORE02,51,,United Kingdom,,,,
11,,DRE United Kingdom UKLONSDD SASD-D SW01 to SW02,47,,United Kingdom,,,,
12,,DRE United States USLAXMDR SASD-D XC VRF T1/7 Xconnect to vrf via Te1/7,71,,United States,,,,
13,,DRE Hong Kong (China) HKHKGEXT Hongkong Extranet HKHKGDRE SW01 interconnect,75,,"Hong Kong, Hong Kong",,,,
14,,DRE United Kingdom UKLONDRE LON Sq lab test nets,48,,United Kingdom,,,,
15,,DRE United States USLAXTHA SPS Thalberg uslaxtha mdf01 Interconnect,67,,United States,,,,
16,,DRE Hong Kong (China) HKHKGDRE SASD-D Citiplaza to EXT Interconnect,67,,Hong Kong,,,,
17,,SASD-D United States USPHXCAP VRF SW02,38,,United States,,,,
</snippet></ROW><ROW><id>17687413</id><snippet>.xml</snippet></ROW><ROW><id>17687413</id><snippet>.csv</snippet></ROW><ROW><id>17687413</id><snippet>create</snippet></ROW><ROW><id>17687413</id><snippet>read</snippet></ROW><ROW><id>17687413</id><snippet>update</snippet></ROW><ROW><id>17687413</id><snippet>delete</snippet></ROW><ROW><id>17687413</id><snippet>domain</snippet></ROW><ROW><id>17687413</id><snippet>&lt;field name="DOB" attrs="{'readonly':[('groups_id.category_id.name','=','Human Resource')]}"/&gt;
</snippet></ROW><ROW><id>17687426</id><snippet>mapped = meanings[flags]
</snippet></ROW><ROW><id>17687426</id><snippet>mapped = np.take(meanings, flags)
</snippet></ROW><ROW><id>17687438</id><snippet>list=['dog 2','cat 14']
</snippet></ROW><ROW><id>17687438</id><snippet>list2 = []
for i in list:
    i = i.split(' ')
    i[1] = int(i[1])
    list2.append(i)
</snippet></ROW><ROW><id>17687438</id><snippet>list = sorted(list2, key=lambda element: element[1], reverse = True)
</snippet></ROW><ROW><id>17687438</id><snippet>file = open('filename.csv', 'w')
for element in list:
    file.write("%s,%d\n" % (element[0], element[1]))
file.close
</snippet></ROW><ROW><id>17687438</id><snippet>cat,14
dog,2
</snippet></ROW><ROW><id>17687543</id><snippet>alphabet =  range(10)
base = 10
dict((x*base**2+y*base+z,(x,y,z)) for x in alphabet 
                                  for y in alphabet 
                                  for z in alphabet )
</snippet></ROW><ROW><id>17687543</id><snippet>alphabet =  range(2)
base = 2
dict((x*base**2+y*base+z,(x,y,z)) for x in alphabet 
                                  for y in alphabet 
                                  for z in alphabet )
</snippet></ROW><ROW><id>17687543</id><snippet>{0: (0, 0, 0), 1: (0, 0, 1), 2: (0, 1, 0), 3: (0, 1, 1), 4: (1, 0, 0), 5: (1, 0, 1), 6: (1, 1, 0), 7: (1, 1, 1)}
</snippet></ROW><ROW><id>17687815</id><snippet>1/2</snippet></ROW><ROW><id>17687815</id><snippet>0</snippet></ROW><ROW><id>17687815</id><snippet>0.5</snippet></ROW><ROW><id>17687815</id><snippet>1.0/2</snippet></ROW><ROW><id>17687950</id><snippet>* * * * cd /Users/user/Documents/foo; bar -l doSomething -v 
</snippet></ROW><ROW><id>17687950</id><snippet>... #some script calls
my_env = os.environ.copy()
my_env["PYTHONPATH"] = "{}:{}".format(os.environ["PATH"] ,"&lt;path you want to include&gt;")
os.chdir("&lt;path/to/desired/directory&gt;")
subprocess.Popen(&lt;call_as_string&gt;, env=my_env, shell=True)
</snippet></ROW><ROW><id>17687950</id><snippet>... #some script calls
os.environ["PYTHONPATH"] = "{}:{}".format(os.environ["PATH"] ,"&lt;path you want to include&gt;")
os.chdir("&lt;path/to/desired/directory&gt;")
subprocess.Popen(&lt;call_as_list_of_arguments)
</snippet></ROW><ROW><id>17688072</id><snippet>./configure --enable-pythoninterp | grep python
checking --enable-pythoninterp argument... yes
checking for python... (cached) /usr/bin/python
(cached) checking Python's configuration directory... (cached) /usr/lib/python2.6/config
checking --enable-python3interp argument... no
</snippet></ROW><ROW><id>17688072</id><snippet>VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Jul 17 2013 00:21:48)
+python -python3
-L/usr/local/lib -o vim    -lncurses -L/usr/lib/python2.6/config -lpython2.6 -lpthread 
-ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions
</snippet></ROW><ROW><id>17688161</id><snippet>Is if fine that Apache, PostgreSQL, and Python are installed all over the place in the Django environment?</snippet></ROW><ROW><id>17688161</id><snippet>Did I miss a core Django component and/or directory?</snippet></ROW><ROW><id>17688161</id><snippet>site-packages</snippet></ROW><ROW><id>17688161</id><snippet>mysite</snippet></ROW><ROW><id>17688161</id><snippet>Will deploying and scaling be a problem?</snippet></ROW><ROW><id>17688161</id><snippet>mysite</snippet></ROW><ROW><id>17688161</id><snippet>virtualenv</snippet></ROW><ROW><id>17688161</id><snippet>virtualenv</snippet></ROW><ROW><id>17688161</id><snippet>git</snippet></ROW><ROW><id>17688187</id><snippet>&gt;&gt;&gt; page.info().get('Content-Encoding')
'gzip'
</snippet></ROW><ROW><id>17688214</id><snippet>def addtrans():
    ...
    # check that both users exist
    if not services.user_exists(to_id) or not services.user_exists(from_id):
        return "no such users"
    ...
</snippet></ROW><ROW><id>17688214</id><snippet>def addtrans(services=services):
    ...
    # check that both users exist
    if not services.user_exists(to_id) or not services.user_exists(from_id):
        return "no such users"
    ...
</snippet></ROW><ROW><id>17688214</id><snippet>services</snippet></ROW><ROW><id>17688214</id><snippet>class MockServices:
    def user_exists(id):
        return True
</snippet></ROW><ROW><id>17688226</id><snippet>location.href = "/maintenance/tasks/2/toggleCompletion/" + task_id + "/";
</snippet></ROW><ROW><id>17688227</id><snippet>/usr/local/lib/scons</snippet></ROW><ROW><id>17688227</id><snippet>/usr/local/bin/{scons,sconsign,scons-time,scons.bat}</snippet></ROW><ROW><id>17688227</id><snippet>scons-2.3.0</snippet></ROW><ROW><id>17688227</id><snippet>/usr/local/man/man1</snippet></ROW><ROW><id>17688227</id><snippet>$ find / -name "scons*.egg-info"
</snippet></ROW><ROW><id>17688294</id><snippet>&gt;&gt;&gt; components = {0:4, 0:5, 0:4}
&gt;&gt;&gt; components
{0: 4}
</snippet></ROW><ROW><id>17688294</id><snippet>import math

def distance(argv):
    comp_diff = []
    for comp_1, comp_2 in argv:
        comp_diff.append(comp_1-comp_2)
        print comp_2
    return math.sqrt(sum([math.pow(comp,2) for comp in comp_diff]))

if __name__ == '__main__':
    components = [(0,4), (0,5), (0,4)]
    d = distance(components)
    print d
</snippet></ROW><ROW><id>17688449</id><snippet>a</snippet></ROW><ROW><id>17688449</id><snippet>def poss_comb(coord):
    coord = coord[:]  # use a local copy of the list
    random.shuffle(coord)
    yield coord
</snippet></ROW><ROW><id>17688449</id><snippet>sorted()</snippet></ROW><ROW><id>17688449</id><snippet>def poss_comb(coord):
    yield sorted(coord, key=lambda k: random.random())
</snippet></ROW><ROW><id>17688554</id><snippet>raw_input()</snippet></ROW><ROW><id>17688554</id><snippet>menu = raw_input("1.)Ply Da Dogi gam\n2.)Halp\n")
</snippet></ROW><ROW><id>17688554</id><snippet>menu = int(raw_input("1.)Ply Da Dogi gam\n2.)Halp\n"))
</snippet></ROW><ROW><id>17688565</id><snippet>from sqlalchemy.sql import not_

# This fetches rows in python to determine which ones were removed.
Session.query(Table1).filter(not_(Table1.table2s.any())).delete(
    synchronize_session='fetch')

# If you will not be referencing more Table1 objects in this session then you
# can just ignore syncing the session.
Session.query(Table1).filter(not_(Table1.table2s.any())).delete(
    synchronize_session=False)
</snippet></ROW><ROW><id>17688565</id><snippet>DELETE FROM table1 WHERE NOT (EXISTS (SELECT 1 
FROM table2 
WHERE table1.id = table2.table1_id))
</snippet></ROW><ROW><id>17688600</id><snippet>def get_sublists(length):
    for i in range(len(lst) - length + 1)
        yield lst[i:i + length]
</snippet></ROW><ROW><id>17688600</id><snippet>def get_sublists(length):
    return [lst[i:i + length] for i in range(len(lst) - length + 1)]
</snippet></ROW><ROW><id>17688633</id><snippet>pd.Index(np.arange(0, len(df))).equals(df.index)
</snippet></ROW><ROW><id>17688633</id><snippet>In [11]: df = pd.DataFrame([['a', 'b'], ['c', 'd']], columns=['A', 'B'])

In [12]: df
Out[12]:
   A  B
0  a  b
1  c  d

In [13]: pd.Index(np.arange(0, len(df))).equals(df.index)
Out[13]: True
</snippet></ROW><ROW><id>17688633</id><snippet>In [14]: df = df.set_index('A')

In [15]: pd.Index(np.arange(0, len(df))).equals(df.index)
Out[15]: False
</snippet></ROW><ROW><id>17688675</id><snippet>next</snippet></ROW><ROW><id>17688675</id><snippet>==</snippet></ROW><ROW><id>17688676</id><snippet>uri_2 += "=" * ((4 - len(uri_2 ) % 4) % 4)
</snippet></ROW><ROW><id>17688676</id><snippet>b64encode</snippet></ROW><ROW><id>17688676</id><snippet>+</snippet></ROW><ROW><id>17688676</id><snippet>=</snippet></ROW><ROW><id>17688727</id><snippet>from django.db.models import Count
tests.objects.annotate(Count('tat'))
</snippet></ROW><ROW><id>17688727</id><snippet>values_list</snippet></ROW><ROW><id>17688907</id><snippet>for</snippet></ROW><ROW><id>17688907</id><snippet>def high_bitscores(a,qid,thresh=0.9):
    valid = a[a['queryid'] == qid]
    return valid[valid['bitscore'] &gt;= valid['bitscore'].max()*thresh]
</snippet></ROW><ROW><id>17688907</id><snippet>data</snippet></ROW><ROW><id>17688907</id><snippet>queryid</snippet></ROW><ROW><id>17688907</id><snippet>data</snippet></ROW><ROW><id>17688907</id><snippet>def all_high_bitscores(a,thresh=0.9):

    # set of indices for the elements in a that we're going to keep
    keep = np.zeros(a.size,np.bool)

    for qid in set(a['queryid']):
        idx = a['queryid'] == qid
        keep[idx] = a[idx]['bitscore'] &gt;= a[idx]['bitscore'].max()*thresh

    return a[keep]
</snippet></ROW><ROW><id>17688947</id><snippet>def unique_ips():
    f = open('logfile','r')
    ips = {}
    # This for loop collects all of the ips with their associated errors
    for line in f:
        ip = line.split()[0]
        try:
            ips[ip].append(line)
        except KeyError:
            ips[ip] = [line]

    # This for loop goes through all the ips that were collected
    # and prints out all errors for those ips
    for ip, errors in ips.iteritems():
        print ip
        errors.sort()
        for e in errors:
           logdate = e.split()[3]
           print "\t", logdate

           info = e.split()[5:11] 
           print "\t\t", info

    f.close()
</snippet></ROW><ROW><id>17688947</id><snippet>199.21.99.83
    [30/Jun/2013:07:16:13
        ['"GET', '/searchme/index.php?f=being_fruitful', 'HTTP/1.1"', '200', '7526', '"-"']
    [30/Jun/2013:07:16:45
        ['"GET', '/searchme/index.php?f=comparing_themselves', 'HTTP/1.1"', '200', '7369', '"-"']
    [30/Jun/2013:07:17:00
        ['"GET', '/searchme/index.php?f=tribulation', 'HTTP/1.1"', '200', '7060', '"-"']
    [30/Jun/2013:07:17:15
        ['"GET', '/searchme/index.php?f=proud', 'HTTP/1.1"', '200', '7080', '"-"']
    [30/Jun/2013:07:17:34
        ['"GET', '/searchme/index.php?f=soul', 'HTTP/1.1"', '200', '7063', '"-"']
    [30/Jun/2013:07:17:38
        ['"GET', '/searchme/index.php?f=the_flesh_lusteth', 'HTTP/1.1"', '200', '6951', '"-"']
66.249.73.40
    [30/Jun/2013:07:16:56
        ['"GET', '/espanol/displayAncient.cgi?ref=isa%2054:3', 'HTTP/1.1"', '500', '167', '"-"']
99.21.99.83
    [30/Jun/2013:07:15:50
        ['"GET', '/lenny/index.php?f=13', 'HTTP/1.1"', '200', '11244', '"-"']
</snippet></ROW><ROW><id>17689197</id><snippet>def user_profile(request):
    if request.method=='POST':
        form = UserProfileForm(request.POST, instance=request.user.profile)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect('/accounts/loggedin')
    else:
        user = request.user
        profile = user.profile
        form = UserProfileForm(instance=profile)

    args = {}
    args.update(csrf(request)) // security token
    args['form'] = form
    return render_to_response('profile.html', args)
</snippet></ROW><ROW><id>17689197</id><snippet>GET</snippet></ROW><ROW><id>17689197</id><snippet>else</snippet></ROW><ROW><id>17689197</id><snippet>GET</snippet></ROW><ROW><id>17689389</id><snippet>server = smtplib.SMTP(host)</snippet></ROW><ROW><id>17689389</id><snippet>server.quit()</snippet></ROW><ROW><id>17689389</id><snippet>msg = MIMEMultipart()</snippet></ROW><ROW><id>17689389</id><snippet>msg.attach(body)</snippet></ROW><ROW><id>17689620</id><snippet>io.BytesIO</snippet></ROW><ROW><id>17689620</id><snippet>mirror_service._http.request(attachment['contentUrl'])</snippet></ROW><ROW><id>17689620</id><snippet>Image.open</snippet></ROW><ROW><id>17689745</id><snippet>boto</snippet></ROW><ROW><id>17689754</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>17689754</id><snippet>{{ MEDIA_URL }}</snippet></ROW><ROW><id>17689754</id><snippet>from django import template
from django.conf import settings
from django.template.defaultfilters import stringfilter

register = template.Library()

@register.filter
@stringfilter
def media_url(value):
    """Searches for {{ MEDIA_URL }} and replaces it with the MEDIA_URL from settings.py"""
    return value.replace('{{ MEDIA_URL }}', settings.MEDIA_URL)
media_url.is_safe = True
</snippet></ROW><ROW><id>17689754</id><snippet>{% load media_url %}
{{ flatpage.content|media_url }}
</snippet></ROW><ROW><id>17689754</id><snippet>media_url.py</snippet></ROW><ROW><id>17689754</id><snippet>templatetags</snippet></ROW><ROW><id>17689754</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>17689765</id><snippet>rv_continuous</snippet></ROW><ROW><id>17689765</id><snippet>a</snippet></ROW><ROW><id>17689765</id><snippet>b</snippet></ROW><ROW><id>17689765</id><snippet>rv_continuous</snippet></ROW><ROW><id>17689765</id><snippet>import scipy.stats

class rvc(scipy.stats.rv_continuous):
    def __init__(self, freqs):
        super().__init__(a=0,b=359.9999)
        self.WindDir = [0.,45.,90.,135.,180.,225.,270.,315.,360.]
        self.Freqs = freqs

    def _cdf(self, x):
        return [self.do_cdf(i) for i in x]

    def do_cdf(self, x):
        if x &lt; 0: return 0.0
        if x &gt;= 360: return 1.0
        v = 0.0
        for i in range(9):
            if x &gt;= self.WindDir[i]:
                v += self.Freqs[i]
            else:
                v += (self.Freqs[i]-self.Freqs[i-1])*(x-self.WindDir[i-1])/45.
                break
        return v

rv = rvc([0.01,0.01, 0.01, 0.01, 0.01, 0.01, 0.92, 0.01, 0.01])
print(rv.rvs(size=100))
</snippet></ROW><ROW><id>17689765</id><snippet>[ 305.76400244  271.49390379  285.5514374   280.4422151   302.52158889
  273.85068415  278.8377575   287.05260894  270.66219523  301.97131911
  277.77725392  293.29633122  273.60832876  278.90703722  271.12590324
  288.38285244  299.89362412  276.68015144  278.46429959  304.33532312
  313.42248626  272.10226608  311.00385667  284.48822492  298.134523
  300.08266465  272.17850056  270.07995773  359.9999      289.13032076
  206.58066169  308.95821915  288.998036    280.93451276  294.33703562
  278.02828894  307.96335447  292.50172701  313.67335738  291.99562061
  275.98551449  307.72620259  283.11307243  309.6052904   283.65619152
  305.80365684  303.43088801  314.74811251  302.8390404   288.16580807
  299.84487396  302.34636138  291.09465231  310.74393544  279.23446355
  309.83353391  292.62761642  273.22324646  291.16193395  298.51520679
  299.87754111  280.29779055  276.76741796  285.5186257   301.7074023
  274.9771402   280.6619726   276.53202603  289.50757382  313.61213159
   98.86469637  298.41091812   83.62474126  290.42538277  306.70218844
  270.81939255  290.25089647  305.3277742   278.03965968  280.5979916
  307.9492377   284.30184233  307.14788891  283.33779011  270.86398644
  297.70610336  277.48672772  300.35147777  271.07308885  304.41450287
  312.5640489   273.54296504  311.62527023  298.95246144  275.199183
  302.6063864   359.9999      311.25861396  306.83491033  313.52858514]
</snippet></ROW><ROW><id>17689770</id><snippet>def bubble():
    xval = random.randint(5,765)
    yval = random.randint(5,615)
    canvas.create_oval(xval,yval,xval+30,yval+30, fill="#00ffff",outline="#00bfff",width=5)
    canvas.create_text(xval+15,yval+15,text="mytext")
    canvas.update()
</snippet></ROW><ROW><id>17689857</id><snippet>import sys, re

expS=re.compile(r'\s*//\s*loopId = (\d+); depth = \d+; \w+')
expE=re.compile(r'\s*//\s*end loop \(loopId = (\d+)\)')
lines, varcnt = [], 0
with open(sys.argv[1]) as f:
    for line in f:
        line = line.rstrip()
        lines += [ line ]
        m = re.match(expS, line)
        if m:
            varcnt += 1
            loopid = int(m.group(1))
            lines += [ 'gettimeofday(&amp;tv[{}], 0);'.format((loopid-1)*2) ]
            continue
        m = re.match(expE, line)
        if m:
            loopid = int(m.group(1))
            sid, eid = (loopid-1)*2, (loopid-1)*2+1
            lines += [ 'gettimeofday(&amp;tv[{}], 0);'.format(eid) ]
            lines += [ 'printf("Id {}: %ld\\n", tdiff_xxx(&amp;tv[{}],&amp;tv[{}]));'.format(
                loopid, sid, eid) ]

print '#include &lt;sys/time.h&gt;'
print 'struct timeval tv[{}];'.format(varcnt*2)
print 'long tdiff_xxx(struct timeval *t0, struct timeval *t1) {'
print '  return (t1-&gt;tv_sec-t0-&gt;tv_sec)*1000000 + t1-&gt;tv_usec-t0-&gt;tv_usec;'
print '}' 
for l in lines: print l
</snippet></ROW><ROW><id>17689864</id><snippet>urls = {
    'A search engine.': 'http://google.com',
    'Great support site': 'http://stackoverflow.com'
}

@app.route('/my_page')
def index(): # why was there urls=urls here before?
    return render_template('my_page.html',urls=urls)
</snippet></ROW><ROW><id>17689864</id><snippet>{%- block content %}
{%- for text, url in urls.iteritems() %}
    &lt;a href="{{ url }}"&gt;{{ text }}&lt;/a&gt;
{%- endfor %}
{%- endblock content %}
</snippet></ROW><ROW><id>17689864</id><snippet>url_for</snippet></ROW><ROW><id>17689864</id><snippet>print url_for('index') # will print '/my_page' ... just a string, no magic here
</snippet></ROW><ROW><id>17689864</id><snippet>url_for</snippet></ROW><ROW><id>17689864</id><snippet>index()</snippet></ROW><ROW><id>17689864</id><snippet>'index'</snippet></ROW><ROW><id>17689873</id><snippet>MySQLdb</snippet></ROW><ROW><id>17689873</id><snippet>sqlite3</snippet></ROW><ROW><id>17689873</id><snippet>MySQLdb</snippet></ROW><ROW><id>17689873</id><snippet>%s</snippet></ROW><ROW><id>17689873</id><snippet>?</snippet></ROW><ROW><id>17689873</id><snippet>sql = 'INSERT INTO roottable VALUES ({})'.format(','.join(['%s']*33))
</snippet></ROW><ROW><id>17689873</id><snippet>connection = msql.connect(host = 'localhost', user = 'me',
                          passwd = 'password', db = 'TESTDB')

sql = 'INSERT INTO roottable VALUES ({})'.format(','.join(['%s']*33))
with connection:
    for product in list_product:
        #Get a tuple of standardized information to store in table
        product = normalize_table_entry(product)
        con = connection.cursor()
        con.execute(sql, product)
        #connection.commit()
</snippet></ROW><ROW><id>17689873</id><snippet>','.join(['%s']*33)</snippet></ROW><ROW><id>17689873</id><snippet>In [25]: ['%s']*3
Out[25]: ['%s', '%s', '%s']

In [26]: ','.join(['%s']*3)
Out[26]: '%s,%s,%s'
</snippet></ROW><ROW><id>17689972</id><snippet>&gt;&gt;&gt; from sympy.abc import x, y
&gt;&gt;&gt; z = 3*x + 4*y
&gt;&gt;&gt; z.coeff(x)
3
</snippet></ROW><ROW><id>17690013</id><snippet>class stringer(type):
    esc_statuses = {
        "RETURNED": "Returned",
        "SUBMITTED": "Submitted",
        "DRAFT": "Draft",
        "CANCELED": "Canceled",
        "ESCALATED": "Escalated"
        }

    NewEscFieldText = {
        "customer_name": "The name of the customer who encountered this bug.",
        "summary": "A brief summary of the bug.",
        "request": "The request.",
        "customer_impact": "How the customer is impacted.",
        "severity": "The severity of the bug.",
        "component": "The component of this bug.",
        "related_bugs": "Bugs which are related to this one.",
        "logs": "The logs assosciated with this bug.",
        "description": "A detailed discription of the problem and any work \
                put into reproducting it.",
        "documentation": "Documentation consulted before escalation.",
        }

def __getattr__(self, name):
    if name in stringer.NewEscFieldText: 
        return stringer.NewEscFieldText[name]
    else:
        return stringer.esc_statuses[name]

class strings:
    __metaclass__ = stringer

print strings.customer_name
</snippet></ROW><ROW><id>17690089</id><snippet>CellarDoor</snippet></ROW><ROW><id>17690089</id><snippet>sort</snippet></ROW><ROW><id>17690089</id><snippet>#    ListView:
#        adapter: root.beer_la
</snippet></ROW><ROW><id>17690089</id><snippet>        self.add_widget(ListView(adapter=self.beer_la))
</snippet></ROW><ROW><id>17690089</id><snippet>ListView</snippet></ROW><ROW><id>17690089</id><snippet>from kivy.adapters.listadapter import ListAdapter
from kivy.uix.listview import ListView, ListItemButton
from kivy.uix.boxlayout import BoxLayout
from kivy.lang import Builder
from kivy.app import App

Builder.load_string("""
&lt;CellarDoor&gt;:
    ToggleButton:
        text: 'Reverse'
        on_state: root.beer_sort((True if self.state=='down' else False))
#    ListView:
#        adapter: root.beer_la
""")

class CellarDoor(BoxLayout):
    def __init__(self, **kwargs):
        self.beer_archive = ["Item #{0}".format(i) for i in range(10)]
        self.beer_la = ListAdapter(data=self.beer_archive, 
                          cls=ListItemButton,
                          selection_mode='single',
                          allow_empty_selection=True)

        super(CellarDoor, self).__init__(**kwargs)
        self.add_widget(ListView(adapter=self.beer_la))


    def beer_sort(self, reverse):
        self.beer_la.data = sorted(self.beer_archive,
                                   reverse=reverse)
        print self.beer_la.data

class TestApp(App):
    def build(self):
        return CellarDoor()

if __name__ == '__main__':
    TestApp().run()
</snippet></ROW><ROW><id>17690152</id><snippet>scrollregion</snippet></ROW><ROW><id>17690152</id><snippet># create everything that will be inside the canvas
...

# next, cause the window to be drawn, so the frame will auto-size
self.update_idletasks() 

# now, tell the canvas to scroll everything that is inside it
self.mastercanvas.configure(scrollregion=self.mastercanvas.bbox("all"))
</snippet></ROW><ROW><id>17690152</id><snippet>XFrame</snippet></ROW><ROW><id>17690194</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s="I liiiiked it, thaaaaaaank you"
&gt;&gt;&gt; re.sub(r"(.)(\1{3})(\1+)", r"\1\2", s)
'I liiiiked it, thaaaank you'
</snippet></ROW><ROW><id>17690194</id><snippet>&gt;&gt;&gt; re.sub(r"(.)\1{4,}", r"\1"*4, s)
'I liiiiked it, thaaaank you'
</snippet></ROW><ROW><id>17690194</id><snippet>(.)</snippet></ROW><ROW><id>17690194</id><snippet>\1{4,}</snippet></ROW><ROW><id>17690203</id><snippet>def funcA():
    a = []
    a.append(Node(10, 0))
    a.append(Node(20, 0))

    for i in range(0, len(a)):
        message = '%s:%s' % (i, a[i].items())
        logging.debug(message)
</snippet></ROW><ROW><id>17690203</id><snippet>DEBUG:root:0:[('idx', 10), ('degree', 0)]
DEBUG:root:1:[('idx', 20), ('degree', 0)]
</snippet></ROW><ROW><id>17690203</id><snippet>message = ':'.join([str(i), str(a[i].items())])
</snippet></ROW><ROW><id>17690203</id><snippet>message = '{0}:{1}'.format(str(i), a[i].items())
</snippet></ROW><ROW><id>17690450</id><snippet>import random

print("Welcome to the coin flipper!")

start = input('Press enter to flip the coin')
count = 0
while True:
    coin_flip = random.randint(1,2)
    count+=1

    if count &gt;100:
        break

    if coin_flip == 1:
        print('Heads')

    elif coin_flip == 2:
        print("Tails")
</snippet></ROW><ROW><id>17690450</id><snippet>while True:</snippet></ROW><ROW><id>17690527</id><snippet>def max_in_range(lst, low, high):
    # If the length of the range is 1, the sole element in the range must be the maximum.
    if low == high:
        return lst[low]

    # break the array into two pieces, lst[low:low+1] / lst[low+1:high+1],
    # find the maximum in each of the pieces
    piece1_max = lst[low]
    piece2_max = max_in_range(lst, low + 1, high)

    # find the maximum of the maxima
    if piece1_max &gt; piece2_max:
        return piece1_max
    else:
        return piece2_max

lst = [112,32,45,71238,9999,45,12,6,3]
print max_in_range(lst, 0, len(lst) - 1)
</snippet></ROW><ROW><id>17690534</id><snippet>try:
  reader = csv.reader(open('bar.in', 'rb'), delimiter='|')
  result = dict((int(x[0]), eval(x[1])) for x in reader)
  print "testcsv.csv found, load it from file."
except:
  print "testcsv.csv not found. loop all over."
</snippet></ROW><ROW><id>17690534</id><snippet>{4441: [4441, 4442], 4442: [4441, 4442]}
</snippet></ROW><ROW><id>17690668</id><snippet>def do_POST(self):
    ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
    if ctype == 'multipart/form-data':
        postvars = cgi.parse_multipart(self.rfile, pdict)
    elif ctype == 'application/x-www-form-urlencoded':
        length = int(self.headers.getheader('content-length'))
        postvars = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
    else:
        postvars = {}

    print(postvars.get("listName", "didn't find it"))
</snippet></ROW><ROW><id>17690795</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; date_stngs = ('2008-12-20','2008-12-21','2008-12-22','2008-12-23')
&gt;&gt;&gt; a = pd.Series([pd.to_datetime(date) for date in date_stngs])
&gt;&gt;&gt; a
0    2008-12-20 00:00:00
1    2008-12-21 00:00:00
2    2008-12-22 00:00:00
3    2008-12-23 00:00:00
</snippet></ROW><ROW><id>17690795</id><snippet>&gt;&gt;&gt; pd.to_datetime(pd.Series(date_stngs))
0   2008-12-20 00:00:00
1   2008-12-21 00:00:00
2   2008-12-22 00:00:00
3   2008-12-23 00:00:00
</snippet></ROW><ROW><id>17690957</id><snippet>Cone.__init__()</snippet></ROW><ROW><id>17690957</id><snippet>Cylinder.__init__()</snippet></ROW><ROW><id>17690957</id><snippet>self.calcVolume()</snippet></ROW><ROW><id>17690957</id><snippet>Cone</snippet></ROW><ROW><id>17690957</id><snippet>Cone.calcVolume()</snippet></ROW><ROW><id>17690957</id><snippet>Cylinder.calcVolume()</snippet></ROW><ROW><id>17690957</id><snippet>__init__()</snippet></ROW><ROW><id>17690957</id><snippet>Cone.calcVolume(self)</snippet></ROW><ROW><id>17690957</id><snippet>Cone.__init__()</snippet></ROW><ROW><id>17690957</id><snippet>Cylinder.calcVolume(self)</snippet></ROW><ROW><id>17690957</id><snippet>Cylinder.__init__()</snippet></ROW><ROW><id>17690957</id><snippet>object</snippet></ROW><ROW><id>17690957</id><snippet>type(self).calcVolume(self)</snippet></ROW><ROW><id>17690957</id><snippet>type(self)</snippet></ROW><ROW><id>17690957</id><snippet>instance</snippet></ROW><ROW><id>17690957</id><snippet>class Circle():
    #Constructor
    def __init__ (self, radius):
        self.__radius = radius
        self.calcArea()
    def calcArea(self, PI = 3.14):
        self.__area = (self.__radius**2) * PI
    #Get Functions
    def GetArea(self):
        return self.__area
    def GetRadius(self):
        return self.__radius
    #Set Functions
    def SetRadius(self, radius):
        self.__radius = radius
        self.calcArea()

class Cylinder():
    #Constructor
    def __init__(self, radius, height):
        self.__height = height
        self.__base = Circle(radius)
        Cylinder.calcVolume(self)
    def calcVolume(self):
        self.__volume = self.__base.GetArea() * self.__height
    #Get Functions
    def GetVolume(self):
        return self.__volume
    def GetBase(self):
        return self.__base
    def GetRadius(self):
        return self.__base.GetRadius()
    def GetHeight(self):
        return self.__height
    #Set Functions
    def SetRadius(self, radius):
        self.__base.SetRadius(radius)
        self.calcVolume()
    def SetHeight(self, height):
        self.__height = height
        self.calcVolume()


class Cone(Cylinder):
    #Constructor
    def __init__ (self, radius, height):
        Cylinder.__init__(self, radius, height)
        Cone.calcVolume(self)
    def calcVolume(self):
        Cylinder.calcVolume(self)
        self.__volume = Cylinder.GetVolume(self) * (1.0/3.0)
    #Get Functions
    def GetVolume(self):
        return self.__volume
    #Set Functions
    def SetRadius(self, radius):
        Cylinder.SetRadius(self, radius)
        self.calcVolume()
    def SetHeight(self, height):
        Cylinder.SetHeight(self, height)
        self.calcVolume()


def main():
        cylinder = Cylinder(5, 6)
        cone = Cone(5, 6)
        circle = Circle(5)
        print cylinder.GetVolume()
        print cone.GetVolume()
        print circle.GetArea()
        cone.SetHeight(7)
        print cone.GetVolume()

main()
</snippet></ROW><ROW><id>17690978</id><snippet>float()</snippet></ROW><ROW><id>17690978</id><snippet>&gt;&gt;&gt; scores
{'11.4': 'oto', '10': 'Rose', '9.50': 'pablo', '2': 'sergio', '7.9': 'maria'}
&gt;&gt;&gt; sorted(scores.keys(), reverse = True)
['9.50', '7.9', '2', '11.4', '10']
</snippet></ROW><ROW><id>17690978</id><snippet>float()</snippet></ROW><ROW><id>17690978</id><snippet>&gt;&gt;&gt; for cont in f:
        (name, score) = cont.split()
        scores[float(score)] = name


&gt;&gt;&gt; scores
{9.5: 'pablo', 2.0: 'sergio', 11.4: 'oto', 10.0: 'Rose', 7.9: 'maria'}
&gt;&gt;&gt; sorted(scores.keys(), reverse = True)
[11.4, 10.0, 9.5, 7.9, 2.0]
</snippet></ROW><ROW><id>17690978</id><snippet>scores = {}
read = open("C:/Users/renato/Desktop/HTML Files/myfile.txt")
for cont in read: 
    (name,score)=cont.split()
    scores[float(score)] = name
read.close()

print("The top scores are: ")
for eachscore in sorted(scores.keys(), reverse = True):
    print("Surfer "+scores[eachscore]+" scored "+str(eachscore))
</snippet></ROW><ROW><id>17690994</id><snippet>class Variable(object):
   def __init__ (self, state_dynamic, state_static, control_static, control_dynamic, scheduling):
      self.state_dynamic = state_dynamic
      self.state_static = state_static
      self.control_static = control_static
      self.control_dynamic = control_dynamic
      self.scheduling = control_dynamic
</snippet></ROW><ROW><id>17690994</id><snippet>class Bits(object):
   def __init__(self, integer):
      self.Integer = integer # pretend this is an integer between 0 and 8 representing 4 flags

   @property 
   def locked(self):
      # low bit = locked
      return self.Integer &amp; 1 == 1

   @property
   def available(self):
     return self.Integer &amp; 2 == 2

   @property
   def running_out_of_made_up_names(self):
     return self.Integer &amp; 4 == 4

   @property
   def really_desperate_now(self):
     return self.Integer &amp; 8 == 8

 example = Bits(7)
 print example.locked
 # True
 print example.really_desperate_now
 # False
</snippet></ROW><ROW><id>17691076</id><snippet>import numpy as np
data =np.array(
[[-0.042780748663101636, -0.0040771571786609945, -0.00506567946276074],
[0.042780748663101636, -0.0044771571786609945, -0.10506567946276074],
[0.542780748663101636, -0.005771571786609945, 0.30506567946276074],
[-0.342780748663101636, -0.0304077157178660995, 0.90506567946276074]])

coefficient = data[:,0:2]
dependent = data[:,-1]

x,residuals,rank,s = np.linalg.lstsq(coefficient,dependent)

def f(x,u,v):
    return u*x[0] + v*x[1]

for datum in data:
    print f(x,*datum[0:2])
</snippet></ROW><ROW><id>17691076</id><snippet>&gt;&gt;&gt; x
array([  0.16991146, -30.18923739])
&gt;&gt;&gt; residuals
array([ 0.07941146])
&gt;&gt;&gt; rank
2
&gt;&gt;&gt; s
array([ 0.64490113,  0.02944663])
</snippet></ROW><ROW><id>17691076</id><snippet>0.115817326583
0.142430900298
0.266464019171
0.859743371665
</snippet></ROW><ROW><id>17691076</id><snippet>import numpy as np
from scipy.optimize import leastsq

data =np.array(
[[-0.042780748663101636, -0.0040771571786609945, -0.00506567946276074],
[0.042780748663101636, -0.0044771571786609945, -0.10506567946276074],
[0.542780748663101636, -0.005771571786609945, 0.30506567946276074],
[-0.342780748663101636, -0.0304077157178660995, 0.90506567946276074]])

coefficient = data[:,0:2]
dependent = data[:,-1]

def model(p,x):
    a,b,c = p
    u = x[:,0]
    v = x[:,1]
    return (a*u**2 + b*v + c)

def residuals(p, y, x):
    a,b,c = p
    err = y - model(p,x)
    return err

p0 = np.array([2,3,4]) #some initial guess

p = leastsq(residuals, p0, args=(dependent, coefficient))[0]

def f(p,x):
    return p[0]*x[0] + p[1]*x[1] + p[2]

for x in coefficient:
    print f(p,x)
</snippet></ROW><ROW><id>17691076</id><snippet>-0.108798280153
-0.00470479385807
0.570237823475
0.413016072653
</snippet></ROW><ROW><id>17691187</id><snippet>len(str(result))</snippet></ROW><ROW><id>17691187</id><snippet>result = foo() # foo will return None if failure 
if result:
    # deal with result.
    pass
</snippet></ROW><ROW><id>17691187</id><snippet>None</snippet></ROW><ROW><id>17691187</id><snippet>''</snippet></ROW><ROW><id>17691187</id><snippet>False</snippet></ROW><ROW><id>17691187</id><snippet>str(None)</snippet></ROW><ROW><id>17691187</id><snippet>'None'</snippet></ROW><ROW><id>17691187</id><snippet>True</snippet></ROW><ROW><id>17691187</id><snippet>False</snippet></ROW><ROW><id>17691187</id><snippet>None</snippet></ROW><ROW><id>17691187</id><snippet>True</snippet></ROW><ROW><id>17691187</id><snippet>False</snippet></ROW><ROW><id>17691187</id><snippet>True  -&gt; 'True'
False -&gt; 'False'
None  -&gt; 'None'
</snippet></ROW><ROW><id>17691187</id><snippet>str(None)</snippet></ROW><ROW><id>17691187</id><snippet>''</snippet></ROW><ROW><id>17691187</id><snippet>&gt;&gt;&gt; or_statement = lambda a, b: "%s or %s = %s" % (a, b, a or b)
&gt;&gt;&gt; or_statement(True, False)
'True or False = True'
&gt;&gt;&gt; or_statement(True, None)
'True or None = True'
&gt;&gt;&gt; or_statement(None, None)
'None or None = None'
</snippet></ROW><ROW><id>17691187</id><snippet>str(None)</snippet></ROW><ROW><id>17691187</id><snippet>''</snippet></ROW><ROW><id>17691237</id><snippet>testprocess</snippet></ROW><ROW><id>17691237</id><snippet>listner_thread</snippet></ROW><ROW><id>17691237</id><snippet>listener_thread</snippet></ROW><ROW><id>17691237</id><snippet>subprocess</snippet></ROW><ROW><id>17691237</id><snippet>Process Process-1:
Traceback (most recent call last):
  File "/usr/lib/python2.7/multiprocessing/process.py", line 258, in _bootstrap
    self.run()
  File "/usr/lib/python2.7/multiprocessing/process.py", line 114, in run
    self._target(*self._args, **self._kwargs)
  File "t.py", line 25, in testprocess
    t = Thread(target=listner_thread, args=(conn,))
NameError: global name 'listner_thread' is not defined
</snippet></ROW><ROW><id>17691682</id><snippet>pymacs</snippet></ROW><ROW><id>17691682</id><snippet>pyflakes</snippet></ROW><ROW><id>17691682</id><snippet>flymake-python-pyflakes</snippet></ROW><ROW><id>17691682</id><snippet>ropemacs</snippet></ROW><ROW><id>17691682</id><snippet>(add-to-list 'package-archives
    '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives 
    '("marmalade" . "http://marmalade-repo.org/packages/"))
(package-initialize)
</snippet></ROW><ROW><id>17691682</id><snippet>~/.emacs</snippet></ROW><ROW><id>17691682</id><snippet>eval-buffer</snippet></ROW><ROW><id>17691682</id><snippet>list-packages</snippet></ROW><ROW><id>17691682</id><snippet>pip</snippet></ROW><ROW><id>17691682</id><snippet>$ pip install rope ropemacs
</snippet></ROW><ROW><id>17691682</id><snippet>$ pip3 install rope_py3k
</snippet></ROW><ROW><id>17691682</id><snippet>pip</snippet></ROW><ROW><id>17691682</id><snippet>$ sudo apt-get install pip
</snippet></ROW><ROW><id>17691682</id><snippet>python-pip</snippet></ROW><ROW><id>17691682</id><snippet>python-pip</snippet></ROW><ROW><id>17691682</id><snippet>python-pip3</snippet></ROW><ROW><id>17691773</id><snippet>socket.send()</snippet></ROW><ROW><id>17691773</id><snippet>socket.recv()</snippet></ROW><ROW><id>17691773</id><snippet>socket-throttle</snippet></ROW><ROW><id>17691773</id><snippet>x-ratelimit</snippet></ROW><ROW><id>17691778</id><snippet>settings.py</snippet></ROW><ROW><id>17691778</id><snippet>INSTALLED_APPS += [
    'djcelery',
]
try:
    import flower.command
    import celery.bin.celery
except Exception as e:
    logging.error("Flower will not be available: %s"%e)
else:
    celery.bin.celery.CeleryCommand.register_command(
          flower.command.FlowerCommand, name='flower')
</snippet></ROW><ROW><id>17691875</id><snippet>{% for n in range(n) %}
    {% for line in check[n][2:] %}
        &lt;p&gt; {{ beta[0][0] }} &lt;/p&gt;
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>17692017</id><snippet>header = "location\ttemperature\tweather\date\n"
f.write(header)
for i in xrange(len(weather)):
    f.write('\t'.join([locations[i],temp_f[i],weather[i],str(now.day)]))
    f.write('\n')
f.close()
</snippet></ROW><ROW><id>17692017</id><snippet>for</snippet></ROW><ROW><id>17692017</id><snippet>f = open('out.csv','a') #open in append mode if you're already written some of the file.
header = "location\ttemperature\tweather\date\n" #only write this if you haven't already.
date = str(now.month) + "/" + str(now.day) +  "/" + str(now.year) + " " + str(now.hour) + ":" + str(now.minute) + ":" + str(now.second)
f.write(header)
f.write('\t'.join([locations,temp_f,weather,date]))
f.write('\n')
f.close()
</snippet></ROW><ROW><id>17692067</id><snippet>class MyDoc(Document):
    dictField = DictField()

    def __unicode__(self):
        return unicode(self.dictField)

MyDoc.objects.delete()

MyDoc(dictField={'a': {'b': {'c': 5}}}).save()
print MyDoc.objects.first()
# {u'a': {u'b': {u'c': 5}}}

MyDoc.objects.update(set__dictField__a__b__c=0)
print MyDoc.objects.first()
# {u'a': {u'b': {u'c': 0}}}
</snippet></ROW><ROW><id>17692067</id><snippet>str(holder.id)</snippet></ROW><ROW><id>17692067</id><snippet>id1234</snippet></ROW><ROW><id>17692067</id><snippet>MyDoc.objects.update(set__dictField__id1234=val)
</snippet></ROW><ROW><id>17692067</id><snippet>MyDoc.objects.update(**{'set__dictField__' + str(holder.id): val})
</snippet></ROW><ROW><id>17692156</id><snippet>In [14]: df.stack().value_counts()
Out[14]: 
192.248.8.183    3   
192.168.2.85     3   
66.249.74.52     2   
192.168.2.161    2   
124.43.113.22    1   
dtype: int64
</snippet></ROW><ROW><id>17692431</id><snippet>for i in range(0, len(myList), 50):
     print myList[i:i+50]
</snippet></ROW><ROW><id>17692431</id><snippet>[myList[i:i+50] for i in range(0, len(myList), 50)]
</snippet></ROW><ROW><id>17692588</id><snippet>args = ['firstargument', 'secondargument', '-s', 'thirdargument', '-s', 'fourth', 'fifth', '-s', 'sixth', 'seventh']
args1 = ['firstargument', 'secondargument', '-s', 'thirdargument', '-s', 'fourth', 'fifth', '-s', 'sixth', 'seventh', '-s']

marker = "-s"
def parser(arglist):
    scraplist, result = [], []
    arglist_range = range(len(arglist))
    #Remember candidates for exclude. It's your marker and previous element.
    for arg in arglist_range:
        if arglist[arg] == marker:
            scraplist.append(arg - 1)
            scraplist.append(arg)
    #Excluding marked elements
    for arg in arglist_range:
        if (not arg in scraplist):
            result.append(arglist[arg])
    return result

print parser(args)
print parser(args1)
</snippet></ROW><ROW><id>17692588</id><snippet>$ python test.py 
['firstargument', 'fourth', 'sixth', 'seventh']
['firstargument', 'fourth', 'sixth']
</snippet></ROW><ROW><id>17692750</id><snippet>line</snippet></ROW><ROW><id>17692750</id><snippet>USA           United States
</snippet></ROW><ROW><id>17692750</id><snippet>['USA', 'United', 'States']
</snippet></ROW><ROW><id>17692750</id><snippet>first, last = line.split()</snippet></ROW><ROW><id>17692750</id><snippet>&gt;&gt;&gt; first, last = 'USA           United States'.split(None, 1)
&gt;&gt;&gt; first
'USA'
&gt;&gt;&gt; last
'United States'
</snippet></ROW><ROW><id>17692801</id><snippet>nan</snippet></ROW><ROW><id>17692801</id><snippet>import csv
import numpy as np

# Pull in all the raw data.
with open('TEMPO3.2F-0215_s00116.dat', 'rb') as f:
    raw = np.fromfile(f, np.float64)

# Throw away the nan entries.
raw = raw[1::2]

# Check its a multiple of six so we can reshape it.
if raw.size % 6:
    raise ValueError("Data size not multiple of six.")

# Reshape and take the transpose to manipulate it into the
# same shape as your CSV. The conversion to integer is also
# so the CSV file is the same.
data = raw.reshape((6, raw.size/6)).T.astype('int')

# Dump it out to a CSV.
with open('test.csv', 'w') as f:
    w = csv.writer(f)
    w.writerows(data)
</snippet></ROW><ROW><id>17692801</id><snippet>import csv
import numpy as np

# Pull in all the raw data.
raw = np.fromfile('TEMPO3.2F-0215_s00116.dat', np.float64)

# Throw away the nan entries.
raw = raw[1::2]

# Reshape and take the transpose to manipulate it into the
# same shape as your CSV. The conversion to integer is also
# so the CSV file is the same.
data = raw.reshape((6, -1)).T.astype('int')

# Dump it out to a CSV.
with open('test.csv', 'w') as f:
    w = csv.writer(f)
    w.writerows(data)
</snippet></ROW><ROW><id>17693274</id><snippet>itertools</snippet></ROW><ROW><id>17693274</id><snippet>takewhile()</snippet></ROW><ROW><id>17693274</id><snippet>for item in takewhile(lambda i: i &lt; number, array[2:]):
    # do stuff
</snippet></ROW><ROW><id>17693274</id><snippet>item</snippet></ROW><ROW><id>17693274</id><snippet>enumerate()</snippet></ROW><ROW><id>17693274</id><snippet>for index, item in enumerate(takewhile(lambda i: i &lt; number, array[2:])):
    # do stuff
</snippet></ROW><ROW><id>17693274</id><snippet>array[2:]</snippet></ROW><ROW><id>17693274</id><snippet>2</snippet></ROW><ROW><id>17693274</id><snippet>i = 2
while (array[i-2] &lt; number):
    # do stuff
    i += 1
</snippet></ROW><ROW><id>17693429</id><snippet>import re
import fileinput

for line in fileinput.input("your_file.txt", inplace=True):
    print re.sub("\d+", "", line),
</snippet></ROW><ROW><id>17693429</id><snippet>import fileinput
import string

for line in fileinput.input("your_file.txt", inplace=True):
    print line.translate(None, string.digits),
</snippet></ROW><ROW><id>17693429</id><snippet>import fileinput
import re

for line in fileinput.input("your_file.txt", inplace=True):
    #remove digits
    result = ''.join(i for i in line if not i.isdigit())
    #remove dollar signs
    result = result.replace("$","")
    #some other regex, removes all y's
    result = re.sub("[Yy]+", "", result)
    print result,
</snippet></ROW><ROW><id>17693718</id><snippet>def items(self):
    return list(item for _, _, item in self.heap)
</snippet></ROW><ROW><id>17693779</id><snippet>sys.argv</snippet></ROW><ROW><id>17693779</id><snippet>#!/usr/bin/python

import sys
total = int(sys.argv[1]) +  int(sys.argv[2])
print('Argument List: %s' % str(sys.argv))
print('Total : %d' % total)  
</snippet></ROW><ROW><id>17693779</id><snippet>$ python test.py 123 124
Argument List: ['test.py', 'arg1', 'arg2', 'arg3']
Total : 247
</snippet></ROW><ROW><id>17694085</id><snippet>Download Beautiful Soup</snippet></ROW><ROW><id>17694085</id><snippet>python-beautifulsoup4</snippet></ROW><ROW><id>17694101</id><snippet>import matplotlib.pyplot as plt
import numpy as np

plt.plot([1,2,5,4])
ax1 = plt.gca()
ax2 = ax1.twiny()

new_tick_locations = np.array([.1, .3, .5, .7,.9]) # Choosing the new tick locations
inv = ax1.transData.inverted()
x = []

for each in new_tick_locations:
    print(each)
    a = inv.transform(ax1.transAxes.transform([each,1])) # Convert axes-x-coordinates to data-x-coordinates
    x.append(a[0])

c = 2
x = np.array(x)
def tick_function(X):
    V =  c/X
    return ["%.1f" % z for z in V]
ax2.set_xticks(new_tick_locations) # Set tick-positions on the second x-axes
ax2.set_xticklabels(tick_function(x)) # Convert the Data-x-coordinates of the first x-axes to the Desired x', with the tick_function(X)
</snippet></ROW><ROW><id>17694104</id><snippet>from socket import *
</snippet></ROW><ROW><id>17694104</id><snippet>socket</snippet></ROW><ROW><id>17694104</id><snippet>socket.socket</snippet></ROW><ROW><id>17694104</id><snippet>socket</snippet></ROW><ROW><id>17694104</id><snippet>s = socket((socket.AF_INET, socket.SOCK_STREAM))
</snippet></ROW><ROW><id>17694104</id><snippet>import socket
</snippet></ROW><ROW><id>17694104</id><snippet>socket</snippet></ROW><ROW><id>17694219</id><snippet>#--- Open the file   + write on it ---

f = open('out.csv','a')
prev_data = open('out.csv', 'r').read()

header = "Datetime,Location,Temperature,current_condition\n"

# Add a header only if the file is empty
if prev_data == '':
    f.write(header)

date = str(now.month) + "/" + str(now.day) +  "/" + str(now.year) + " " + str(now.hour)          + ":" + str(now.minute) + ":" + str(now.second)
f.write(','.join([date,locations,str(temp_f),weather]))
f.write('\n')
f.close()
# --- And Close the file ---
</snippet></ROW><ROW><id>17694827</id><snippet>if self.start.GetValue().strip().isdigit():
    pass
</snippet></ROW><ROW><id>17694827</id><snippet>isdigit()</snippet></ROW><ROW><id>17694827</id><snippet>False</snippet></ROW><ROW><id>17694827</id><snippet>startValue = self.start.GetValue().strip()

if not startValue: 
    errors.append("Please provide a start.")

if not startValue.isdigit():
    errors.append("Value of start must be an integer.")
</snippet></ROW><ROW><id>17694864</id><snippet>{k:d1.get(k, k in d1 or d2[k]) for k in set(d1) | set(d2)}</snippet></ROW><ROW><id>17694864</id><snippet>|</snippet></ROW><ROW><id>17694864</id><snippet>{k:d1.get(k,d2.get(k)) for k in set(d1) | set(d2)}</snippet></ROW><ROW><id>17694864</id><snippet>&gt;&gt;&gt; d1 = {'one':1, 'both':3, 'falsey_one':False, 'falsey_both':None}
&gt;&gt;&gt; d2 = {'two':2, 'both':30, 'falsey_two':None, 'falsey_both':False}
&gt;&gt;&gt; 
&gt;&gt;&gt; print "d1 - d2:", {k:d1[k] for k in d1 if k not in d2}                  # 0
d1 - d2: {'falsey_one': False, 'one': 1}
&gt;&gt;&gt; print "d2 - d1:", {k:d2[k] for k in d2 if k not in d1}                  # 1
d2 - d1: {'falsey_two': None, 'two': 2}
&gt;&gt;&gt; print "intersection:", {k:d1[k] for k in d1 if k in d2}                      # 2
intersection: {'both': 3, 'falsey_both': None}
&gt;&gt;&gt; print "union:", {k:d1.get(k, k in d1 or d2[k]) for k in set(d1) | set(d2)}   # 3
union: {'falsey_one': False, 'falsey_both': None, 'both': 3, 'two': 2, 'one': 1, 'falsey_two': None}
</snippet></ROW><ROW><id>17694864</id><snippet>union</snippet></ROW><ROW><id>17694864</id><snippet>&gt;&gt;&gt; def dict_ops(d1, d2, setop):
...     """Apply set operation `setop` to dictionaries d1 and d2
... 
...     Note: In cases where values are present in both d1 and d2, the value from
...     d1 will be used.
...     """
...     return {k:d1.get(k,k in d1 or d2[k]) for k in setop(set(d1), set(d2))}
... 
&gt;&gt;&gt; print "d1 - d2:", dict_ops(d1, d2, lambda x,y: x-y)
d1 - d2: {'falsey_one': False, 'one': 1}
&gt;&gt;&gt; print "d2 - d1:", dict_ops(d1, d2, lambda x,y: y-x)
d2 - d1: {'falsey_two': None, 'two': 2}
&gt;&gt;&gt; import operator as op
&gt;&gt;&gt; print "intersection:", dict_ops(d1, d2, op.and_)
intersection: {'both': 3, 'falsey_both': None}
&gt;&gt;&gt; print "union:", dict_ops(d1, d2, op.or_)
union: {'falsey_one': False, 'falsey_both': None, 'both': 3, 'two': 2, 'one': 1, 'falsey_two': None}
</snippet></ROW><ROW><id>17694864</id><snippet>d1</snippet></ROW><ROW><id>17694864</id><snippet>d2</snippet></ROW><ROW><id>17694864</id><snippet>&gt;&gt;&gt; print "union:", dict_ops(d2, d1, op.or_)
union: {'both': 30, 'falsey_two': None, 'falsey_one': False, 'two': 2, 'one': 1, 'falsey_both': False}
</snippet></ROW><ROW><id>17694936</id><snippet>pip install -i http://pypi.testrun.org -U pytest</snippet></ROW><ROW><id>17695103</id><snippet>dig</snippet></ROW><ROW><id>17695103</id><snippet>import dns.name
import dns.message
import dns.query
import dns.flags

domain = 'google.com'
name_server = '8.8.8.8'
ADDITIONAL_RDCLASS = 65535

domain = dns.name.from_text(domain)
if not domain.is_absolute():
    domain = domain.concatenate(dns.name.root)

request = dns.message.make_query(domain, dns.rdatatype.ANY)
request.flags |= dns.flags.AD
request.find_rrset(request.additional, dns.name.root, ADDITIONAL_RDCLASS,
                   dns.rdatatype.OPT, create=True, force_unique=True)
response = dns.query.udp(request, name_server)


print response.answer
print response.additional
print response.authority
</snippet></ROW><ROW><id>17695103</id><snippet>ADDITIONAL_RDCLASS = 4096</snippet></ROW><ROW><id>17695103</id><snippet>dig</snippet></ROW><ROW><id>17695340</id><snippet>String myRegex = "[\\^]\\d{5}~[A-Za-z~ ]+";
</snippet></ROW><ROW><id>17695649</id><snippet>for</snippet></ROW><ROW><id>17695649</id><snippet>for key in sc:
    print ... % (key, stats[key], ...
</snippet></ROW><ROW><id>17695725</id><snippet>url.split('/')[-1]
</snippet></ROW><ROW><id>17695799</id><snippet>def serve_image():
    id = request.args(0)
    filename = get_image_filename_from(id)
    stream = open(filename,'rb')
    return response.stream(stream, attachment=True, filename=filename)
</snippet></ROW><ROW><id>17695799</id><snippet>&lt;img src="{{=URL('serve_image',args='1234')}}" /&gt;
</snippet></ROW><ROW><id>17695808</id><snippet>list</snippet></ROW><ROW><id>17695808</id><snippet>features.items()</snippet></ROW><ROW><id>17695808</id><snippet>2to3</snippet></ROW><ROW><id>17695808</id><snippet>dict.items()</snippet></ROW><ROW><id>17695808</id><snippet>dict.items()</snippet></ROW><ROW><id>17695808</id><snippet>list</snippet></ROW><ROW><id>17695808</id><snippet>for k, v in features.viewitems()</snippet></ROW><ROW><id>17695808</id><snippet>2to3</snippet></ROW><ROW><id>17695808</id><snippet>features.items()</snippet></ROW><ROW><id>17695808</id><snippet>for</snippet></ROW><ROW><id>17696461</id><snippet>&gt;&gt;&gt; basis = "192.168.100.254:8081"
&gt;&gt;&gt; basis.split(':')
['192.168.100.254', '8081']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17696737</id><snippet>yourdata.decode('ascii')
</snippet></ROW><ROW><id>17696737</id><snippet>ascii</snippet></ROW><ROW><id>17696985</id><snippet>SelectionLib</snippet></ROW><ROW><id>17696985</id><snippet>Container</snippet></ROW><ROW><id>17696985</id><snippet>DataLib</snippet></ROW><ROW><id>17696985</id><snippet>SelectionLib</snippet></ROW><ROW><id>17696985</id><snippet>DataLib</snippet></ROW><ROW><id>17696985</id><snippet>DataLib</snippet></ROW><ROW><id>17696985</id><snippet>SelectionLib</snippet></ROW><ROW><id>17696985</id><snippet>_DataLib</snippet></ROW><ROW><id>17696985</id><snippet>_SelectionLib</snippet></ROW><ROW><id>17696985</id><snippet>DataLib</snippet></ROW><ROW><id>17697002</id><snippet>def paired(binlist, map={(1, 1): 3, (0, 1): 2, (1, 0): 1, (0, 0): 0}):
    return [map[tuple(binlist[i:i + 2])] for i in range(0, len(binlist), 2)]
</snippet></ROW><ROW><id>17697002</id><snippet>{k: paired(v) for k, v in input_dictionary.iteritems()}
</snippet></ROW><ROW><id>17697002</id><snippet>&gt;&gt;&gt; paired([0,1,1,0,0,1])
[2, 1, 2]
&gt;&gt;&gt; paired([1,1,1,0,0,0])
[3, 1, 0]
&gt;&gt;&gt; input_dictionary = {'a':[0,1,1,0,0,1],'b':[1,1,1,0,0,0]}
&gt;&gt;&gt; {k: paired(v) for k, v in input_dictionary.iteritems()}
{'a': [2, 1, 2], 'b': [3, 1, 0]}
</snippet></ROW><ROW><id>17697072</id><snippet>kill()</snippet></ROW><ROW><id>17697072</id><snippet>terminate()</snippet></ROW><ROW><id>17697072</id><snippet>stderr</snippet></ROW><ROW><id>17697072</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>17697072</id><snippet>&gt;&gt;&gt; tcpdumpProcess = subprocess.Popen(['tcpdump',
                        '-w', 'myPackets.cap', '-i', 'eth0', '-n','ip'],
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE)
&gt;&gt;&gt; tcpdumpProcess.terminate()
# stdout in [0], stderr in [1]
&gt;&gt;&gt; tcpdump_stderr = tcpdumpProcess.communicate()[1]
&gt;&gt;&gt; print tcpdump_stderr
tcpdump: listening on eth2, link-type EN10MB (Ethernet), capture size 65535 bytes
40 packets captured
40 packets received by filter
0 packets dropped by kernel
</snippet></ROW><ROW><id>17697237</id><snippet>5</snippet></ROW><ROW><id>17697237</id><snippet>.5</snippet></ROW><ROW><id>17697237</id><snippet>.25</snippet></ROW><ROW><id>17697237</id><snippet>.125</snippet></ROW><ROW><id>17697237</id><snippet>variance = .0001
floatsEqual = lambda f1, f2: f1 - variance &lt;= f2 and f1 + variance &gt;= f2

if (floatsEqual(3.1415, 3.1415 + 1 - 1)):
    pass
</snippet></ROW><ROW><id>17697369</id><snippet>*</snippet></ROW><ROW><id>17697369</id><snippet>*</snippet></ROW><ROW><id>17697369</id><snippet>__all__</snippet></ROW><ROW><id>17697955</id><snippet>[a-zA-Z_][a-zA-Z0-9_]*</snippet></ROW><ROW><id>17698402</id><snippet>command</snippet></ROW><ROW><id>17698681</id><snippet>blist</snippet></ROW><ROW><id>17698681</id><snippet>Use Case                                      blist              list
--------------------------------------------------------------------------
Insertion into or removal from a list         O(log n)           O(n)
Taking slices of lists                        O(log n)           O(n)
Making shallow copies of lists                O(1)               O(n)
Changing slices of lists                      O(log n + log k)   O(n+k)
Multiplying a list to make a sparse list      O(log k)           O(kn)
Maintain a sorted lists with bisect.insort    O(log**2 n)        O(n)
</snippet></ROW><ROW><id>17698740</id><snippet>df = pd.merge(a, b , left_index=True, right_index=True,how='inner')

if len(df):
    Atemp.append('mergev46', df)
</snippet></ROW><ROW><id>17698740</id><snippet>&lt;class 'pandas.io.pytables.HDFStore'&gt;
File path: var4.h5
/var4            frame_table  (shape-&gt;1334)
&lt;class 'pandas.io.pytables.HDFStore'&gt;
File path: var6.h5
/var6            frame_table  (shape-&gt;667)
&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 1334 entries, (928, 310, 2006001) to (1000, 238, 2006361)
Data columns (total 1 columns):
var4    1334  non-null values
dtypes: float64(1)
&lt;class 'pandas.core.frame.DataFrame'&gt;
MultiIndex: 667 entries, (928, 310, 2006001) to (1000, 238, 2006353)
Data columns (total 1 columns):
var6    667  non-null values
dtypes: float64(1)
&lt;class 'pandas.io.pytables.HDFStore'&gt;
File path: var4temp.h5
/mergev46            frame_table  (shape-&gt;977)
</snippet></ROW><ROW><id>17698740</id><snippet>Closing remaining open files: var6.h5... done var4.h5... done var4temp.h5... done
</snippet></ROW><ROW><id>17698871</id><snippet>Deferred</snippet></ROW><ROW><id>17698871</id><snippet>Deferred.callback</snippet></ROW><ROW><id>17698871</id><snippet>Deferred.errback</snippet></ROW><ROW><id>17698871</id><snippet>Deferred</snippet></ROW><ROW><id>17698871</id><snippet>__main__</snippet></ROW><ROW><id>17698871</id><snippet>__main__</snippet></ROW><ROW><id>17698871</id><snippet>Socks4Client</snippet></ROW><ROW><id>17698871</id><snippet>Deferred</snippet></ROW><ROW><id>17698871</id><snippet>endpoint = TCP4StreamClientEndpoint(reactor, "127.0.0.1", 1080)
d = endpoint.connect(factory)
def connected(protocol):
    return protocol.waitForWhatever()
d.addCallback(connected)
d.addCallbacks(result, error)
</snippet></ROW><ROW><id>17698871</id><snippet>clientConnectionFailed</snippet></ROW><ROW><id>17698871</id><snippet>clientConnectionLost</snippet></ROW><ROW><id>17698871</id><snippet>ClientFactory</snippet></ROW><ROW><id>17698871</id><snippet>endpoint = TCP4StreamClientEndpoint(reactor, "127.0.0.1", 1080)
d = connectProtocol(endpoint, Socks4Client())
...
</snippet></ROW><ROW><id>17698871</id><snippet>ClientFactory</snippet></ROW><ROW><id>17698871</id><snippet>loseConnection</snippet></ROW><ROW><id>17698871</id><snippet>None</snippet></ROW><ROW><id>17699028</id><snippet>default_city=VerboseForeignKey('City',display_fields=["name"])
</snippet></ROW><ROW><id>17699049</id><snippet>pivot</snippet></ROW><ROW><id>17699049</id><snippet>In [1]: import pandas as pd

In [2]: df = pd.DataFrame({'a':[0,1,2,3,4,4], 'b':[1,2,2,3,1,3], 'c':[10,10,20,3
0,40,10]})

In [3]: df
Out[3]:
   a  b   c
0  0  1  10
1  1  2  10
2  2  2  20
3  3  3  30
4  4  1  40
5  4  3  10

In [4]: df.pivot(index='a', columns='b', values='c')
Out[4]:
b   1   2   3
a
0  10 NaN NaN
1 NaN  10 NaN
2 NaN  20 NaN
3 NaN NaN  30
4  40 NaN  10
</snippet></ROW><ROW><id>17699049</id><snippet>fillna</snippet></ROW><ROW><id>17699049</id><snippet>In [5]: df.pivot(index='a', columns='b', values='c').fillna(0)
Out[5]:
b   1   2   3
a
0  10   0   0
1   0  10   0
2   0  20   0
3   0   0  30
4  40   0  10
</snippet></ROW><ROW><id>17699141</id><snippet>pip install flask-markdown
</snippet></ROW><ROW><id>17699141</id><snippet>easy_install flask-markdown
</snippet></ROW><ROW><id>17699223</id><snippet>class example(object):

    def __init__(self):
        self.veryImportantDict = {'A': 0}

    def set_veryImportantNumber(self,key,val):
        self.veryImportantDict[key] = val 
</snippet></ROW><ROW><id>17699223</id><snippet>class example(object):

    def __init__(self):
        self.veryImportantDict = {'A': 0}

test.veryImportantDict['A'] = 'foo'
</snippet></ROW><ROW><id>17699341</id><snippet>lxml</snippet></ROW><ROW><id>17699341</id><snippet>html.parser</snippet></ROW><ROW><id>17699341</id><snippet>libxml2</snippet></ROW><ROW><id>17699341</id><snippet>libxslt</snippet></ROW><ROW><id>17699341</id><snippet>s4 = bs4.BeautifulSoup(r.text, 'html.parser')
</snippet></ROW><ROW><id>17699888</id><snippet># blog/models.py

class Blog(Model):
    owner = ForeignKey(User, related_name="blogs")
    name = Charfield()

class Post(Model):
    blog = ForeignKey(Blog, related_name="posts")
    #Other fields ...

class Comment(Model):
    post = ForeignKey(Post, related_name="comments")
    #Other fields ...
</snippet></ROW><ROW><id>17699931</id><snippet>&lt;strictarray name="xyz4"&gt;
    &lt;string&gt;aaa&lt;/string&gt;
    &lt;number name="num1"&gt;55&lt;/number&gt;
&lt;/strictarray&gt;
</snippet></ROW><ROW><id>17699931</id><snippet>lxml</snippet></ROW><ROW><id>17699931</id><snippet>from lxml import etree


tree = etree.parse('test.xml')

result = {}
for element in tree.xpath('/ecmaarray/*'):
    name = element.attrib["name"]
    text = element.text
    childs = element.getchildren()

    if not childs:
        result[name] = text
    else:
        child_dict = {}
        child_list = []
        for child in childs:
            child_name = child.attrib.get('name')
            child_text = child.text
            if child_name:
                child_dict[child_name] = child_text
            else:
                child_list.append(child_text)

        if child_dict:
            result[name] = child_dict
        else:
            result[name] = child_list


print result
</snippet></ROW><ROW><id>17699931</id><snippet>{'xyz3': ['aaa', '55'], 
 'xyz2': {'str1': 'aaa', 'num1': '55'}, 
 'xyz1': '123.456'}
</snippet></ROW><ROW><id>17699932</id><snippet>Builder.load_string('''
&lt;RotatedImage&gt;:
    canvas.before:
        PushMatrix
        Rotate:
            angle: root.angle
            axis: 0, 0, 1
            origin: root.center
    canvas.after:
        PopMatrix
''')

class RotatedImage(Image):
    angle = NumericProperty()
</snippet></ROW><ROW><id>17699951</id><snippet>x</snippet></ROW><ROW><id>17699951</id><snippet>screen.fill(black)
x=0
for column in range(10):
    pygame.draw.rect(screen,white,[x,0,width, height])
    x += width
</snippet></ROW><ROW><id>17700254</id><snippet>a</snippet></ROW><ROW><id>17700254</id><snippet>a</snippet></ROW><ROW><id>17700254</id><snippet>strip().split()</snippet></ROW><ROW><id>17700254</id><snippet>strip()</snippet></ROW><ROW><id>17700254</id><snippet>split()</snippet></ROW><ROW><id>17700254</id><snippet>split</snippet></ROW><ROW><id>17700254</id><snippet>import sys
from collections import defaultdict
master = defaultdict(list)
with open('Pt') as Pt:
    for entry in Pt:
        n, low, high = entry.split()
        master[n].append(map(int, (low, high)))

with open('a') as a:
    for line in a:
        n, i = line.split()[:2]
        for low, high in master[n]:
            if low &lt;= int(i) &lt;= high:
                sys.stdout.write(line)
                break
</snippet></ROW><ROW><id>17700254</id><snippet>map(int, ...)</snippet></ROW><ROW><id>17700254</id><snippet>master</snippet></ROW><ROW><id>17700254</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>17700254</id><snippet>range()</snippet></ROW><ROW><id>17700254</id><snippet>low &lt;= i &lt; high
</snippet></ROW><ROW><id>17700254</id><snippet>break</snippet></ROW><ROW><id>17700254</id><snippet>chr1    1161693 chr1uGROUPERuDELu0u832  TGCTCTTTCCAGAAACCCTCAACCCTGTACGGTCAGGAGGAAACATGGCACCTCCCCTCTGGGG    T   63  NormalSupport;MinSampleCount;LowSomaticScore    CLUSTER_NUM=5454;CONTIG=GGTGCAGGGAAGCAGGAAGGAAGTGAAGCTCAAAAGCCCCTAGGACAGGGCACCTCCCCTCTGGATGCTCTTTCCAGAAACCCTCAACCTTGTACGGTCAGGAGAAAACACATCCCACAAG;CONTIG_NUM=5840;DOWNSTREAM=GCTCTTTCCAGAAACCCTCAACCCTGTACGGTCAGGAGAAAACACATCCCACAAG;END=1161756;NS=1;READSOURCES=(0:3:0,1:2:13);SOMATICSCORE=19;SVLEN=-63;SVTYPE=DEL;UPSTREAM=GGTGCAGGGAAGCGGGAAGGAAGTGAAGCTCAAAAGCCCCTAGGACAGGGCACCTCCCCTCTGGAT;ensembl_gene_id=ENSG00000078808   GT:GQ   1/.:.
chr1    158851689   chr1uGROUPERuDELu3u4452 GGGGAGTAATTCTTATTCATGATATGAAAACTCTAATGTGTTTCTTATTCCAGAAAA   G   100 NormalSupport   CLUSTER_NUM=25182;CONTIG=CATATTTTGCTATATCTCACATCATTGTTCATCTGATAATATATGAAAACTACAATGTGTTTCTTATTCCAGAAAGGGGAGTAATTCTTATTCATGAATAAACACTGAAGGAGAAAGATTATGGATCATAGTGGGAAAAGCCACAATACCATCTACATTC;CONTIG_NUM=24300;DOWNSTREAM=GGGAGTAATTCTTATTCATGAATAAACACTGACGGAGAAAGATTATGGATCATAGTGGGAAAAGCCACAATACCATCTACATTC;END=158851745;NS=1;READSOURCES=(0:11:0,1:3:18);SOMATICSCORE=55;SVLEN=-56;SVTYPE=DEL;UPSTREAM=CATATTTTGCTATATCTCACATCATTGTTCATCTGATAATATATGAAAACTCCAATGTGTTTCTTATTCCAGAAAG;ensembl_gene_id=ENSG00000229849    GT:GQ   1/.:.
chr1    165014865   chr1uGROUPERuDELu3u7344 ACTGGCATTAGCTATGCTTCCTTAGGCAGACAGCATGTTGAGAAATTCACATTCATCAG A   100 NormalSupport   CLUSTER_NUM=40249;CONTIG=CTCCAGTAAAGAGCATCTTTTAATGAAGTGTATCTGCCTGGGCTAGAAAGGCAGCTGCCTCCACTAAAGCAGGGCTGGTCCAGAAATATTACCACTTGCCTAATCCTTATAGTAATCCTAACTGGCAGGTATTATTATATCCCAATTCACACACTTAGAGG;CONTIG_NUM=38845;DOWNSTREAM=CTTGCCTAATCCTTATAGTAATCCTAACTGGCAGGTATTATTATATCCCAATTCACACACTTAGAGG;END=165014923;NS=1;READSOURCES=(0:32:0,1:9:18);SOMATICSCORE=60;SVLEN=-58;SVTYPE=DEL;UPSTREAM=CTCCAGTAAAGAGCATCTTTTAATGAAGTGTATCTGCCTGGGCTAGAAAGGCAGCTGCCTCCACTAAAGCAGGGCTGGTCCAGAAATATTACCA  GT:GQ   1/.:.
</snippet></ROW><ROW><id>17700740</id><snippet>lines = [ ... ]

with open('sometextfile', 'a') as outfile:
    outfile.write('\n'.join(lines) + '\n')
</snippet></ROW><ROW><id>17700740</id><snippet>\n</snippet></ROW><ROW><id>17700740</id><snippet>lines = [ ... ]
open('sometextfile', 'a').write('\n'.join(lines) + '\n')
</snippet></ROW><ROW><id>17700746</id><snippet>import socket
def dist(a, b):
    def to_num(addr):
        # parse the address string into integer quads
        quads = map(ord, socket.inet_aton(addr))
        # spread the quads out 
        return reduce(lambda x,y: x * 0x10000 + y, quads)
    return abs(to_num(a) - to_num(b))
</snippet></ROW><ROW><id>17700746</id><snippet>&gt;&gt;&gt; dist('192.168.1.254', '192.168.1.240')
14L
&gt;&gt;&gt; dist('192.168.1.254', '192.168.2.1')
65283L
&gt;&gt;&gt; dist('192.168.1.101', '192.168.56.1')
3604380L
&gt;&gt;&gt; dist('192.168.1.101', '172.30.130.66')
5630092231245859L
</snippet></ROW><ROW><id>17700802</id><snippet>total:166</snippet></ROW><ROW><id>17701390</id><snippet>lib/
  __init__.py
  Statistic.py
  Transform
    __init__.py
    bins.py
</snippet></ROW><ROW><id>17701390</id><snippet>Transform.fft</snippet></ROW><ROW><id>17701390</id><snippet>lib/Transform/__init__.py</snippet></ROW><ROW><id>17701390</id><snippet>Transform.bins.extent</snippet></ROW><ROW><id>17701390</id><snippet>lib/Transform/bins.py</snippet></ROW><ROW><id>17701390</id><snippet>__init__.py</snippet></ROW><ROW><id>17701390</id><snippet>fft.py</snippet></ROW><ROW><id>17701390</id><snippet>__init__.py</snippet></ROW><ROW><id>17701390</id><snippet>from fft import *
</snippet></ROW><ROW><id>17701390</id><snippet>from lib.Transform import fft
</snippet></ROW><ROW><id>17701505</id><snippet>PDB ID</snippet></ROW><ROW><id>17701505</id><snippet>PDB ID</snippet></ROW><ROW><id>17701505</id><snippet>from collections import defaultdict
entries = {}
keywords = defaultdict(set)

with open('my_csv.csv') as f:
    for line in f:
        entries[line.split()[0]] = line  # so keying on the PDB ID

with open('my_csv.csv') as f:
    for line in f:
        for kw in line.split()[1:]
            keywords[kw].add(line.split()[0])
</snippet></ROW><ROW><id>17701624</id><snippet>__dict__</snippet></ROW><ROW><id>17701624</id><snippet>__setattr__</snippet></ROW><ROW><id>17701624</id><snippet>__dict__</snippet></ROW><ROW><id>17701650</id><snippet>product</snippet></ROW><ROW><id>17701650</id><snippet>clear()</snippet></ROW><ROW><id>17701650</id><snippet>end</snippet></ROW><ROW><id>17701650</id><snippet>product</snippet></ROW><ROW><id>17701650</id><snippet>product</snippet></ROW><ROW><id>17701688</id><snippet>&gt;&gt;&gt; a = 12
&gt;&gt;&gt; b = 24/3
&gt;&gt;&gt; a &lt; b
False
</snippet></ROW><ROW><id>17701797</id><snippet>automation.py</snippet></ROW><ROW><id>17701797</id><snippet>POINTER(BSTR): VT_BYREF|VT_BSTR</snippet></ROW><ROW><id>17701797</id><snippet>_ctype_to_vartype</snippet></ROW><ROW><id>17701882</id><snippet>uid = re.compile(r"uid=(\d*)")
uids = [match.group(1) for match in filter(None, map(uid.search, list_of_urls))]
</snippet></ROW><ROW><id>17701882</id><snippet>uid = re.compile(r"uid=(\d*)")
uids = []
for url in list_of_urls:
    match = uid.search(url)
    if match is not None:
         uids.append(match.group(1))
</snippet></ROW><ROW><id>17701882</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; list_of_urls = [u'/home.html', u'browse_settings.html', u'browse.html?', u'test.html?uid=5415292833', u'test.html?uid=5968723334', u'test.html?uid=5968723334', u'test.html?uid=5453943714', u'test.html?uid=5453943714', u'test.html?uid=6740871094', u'test.html?uid=6740871094', u'test.html?uid=5991868792', u'test.html?uid=5991868792', u'test.html?uid=25072413', u'test.html?uid=25072413', u'test.html?uid=6739965683', u'test.html?uid=6739965683', u'test.html?uid=7272910004', u'test.html?uid=7272910004', u'test.html?uid=13179298', u'test.html?uid=13179298', u'test.html?uid=5392816266', u'test.html?uid=5392816266', u'test.html?uid=5992588819', u'test.html?uid=5992588819', u'test.html?uid=6727114420', u'test.html?uid=6727114420', u'test.html?uid=7263648884', u'test.html?uid=7263648884', u'test.html?uid=5447240210', u'test.html?uid=5447240210', u'test.html?uid=5460515002', u'test.html?uid=5460515002', u'test.html?uid=5400731231', u'test.html?uid=5400731231', u'browse.html?params=_F_18_24_GB_0___grid_1', u'/home.html?t=1374068507', u'/account_info.html', u'http://www.example.com/browse.html?params=_F_18_24_GB_0___grid_0', u'http://www.example.com/contact.html', u'/logout.html', u'#top', u'/terms_of_service.html', u'http://safety.example.com']
&gt;&gt;&gt; uid = re.compile(r"uid=(\d*)")
&gt;&gt;&gt; [match.group(1) for match in filter(None, map(uid.search, list_of_urls))]
[u'5415292833', u'5968723334', u'5968723334', u'5453943714', u'5453943714', u'6740871094', u'6740871094', u'5991868792', u'5991868792', u'25072413', u'25072413', u'6739965683', u'6739965683', u'7272910004', u'7272910004', u'13179298', u'13179298', u'5392816266', u'5392816266', u'5992588819', u'5992588819', u'6727114420', u'6727114420', u'7263648884', u'7263648884', u'5447240210', u'5447240210', u'5460515002', u'5460515002', u'5400731231', u'5400731231']
</snippet></ROW><ROW><id>17702015</id><snippet>c1, c2, c3, c4 = c.split(',')
</snippet></ROW><ROW><id>17702015</id><snippet>c_list = c.split(',')
</snippet></ROW><ROW><id>17702108</id><snippet>split</snippet></ROW><ROW><id>17702108</id><snippet>s = "g18_84pp_2A_MVP1_GoodiesT0-HKJ-DFG_MIX-CMVP1_Y1000-MIX.txt"
n = s.split('-')[0]
</snippet></ROW><ROW><id>17702108</id><snippet>split</snippet></ROW><ROW><id>17702108</id><snippet>'-'</snippet></ROW><ROW><id>17702108</id><snippet>s.split('-')</snippet></ROW><ROW><id>17702108</id><snippet>['g18_84pp_2A_MVP1_GoodiesT0', 'HKJ', 'DFG_MIX', 'CMVP1_Y1000', 'MIX.txt']
</snippet></ROW><ROW><id>17702108</id><snippet>MIX</snippet></ROW><ROW><id>17702108</id><snippet>FIX</snippet></ROW><ROW><id>17702108</id><snippet>in</snippet></ROW><ROW><id>17702108</id><snippet>if 'MIX' in s:
    print "then MIX is in the string s"
</snippet></ROW><ROW><id>17702108</id><snippet>'MVP'</snippet></ROW><ROW><id>17702108</id><snippet>re</snippet></ROW><ROW><id>17702108</id><snippet>import re
s = 'g18_84pp_2A_MVP1_GoodiesT0'
s = re.sub('MVP[0-9]*','MVP',s)
</snippet></ROW><ROW><id>17702108</id><snippet>def foo(mydict):
    return [re.sub('MVP[0-9]*', 'MVP', k.split('-')[0]) for k in mydict]
</snippet></ROW><ROW><id>17702254</id><snippet>a</snippet></ROW><ROW><id>17702254</id><snippet>b</snippet></ROW><ROW><id>17702254</id><snippet>a</snippet></ROW><ROW><id>17702254</id><snippet>b</snippet></ROW><ROW><id>17702254</id><snippet>results = [0] * len(b)
for p_a in a:
    dists = [euclid(p_a, p_b) for p_b in b]
    min_index = dists.index(min(dists))
    results[min_index] += 1
</snippet></ROW><ROW><id>17702273</id><snippet>pickle</snippet></ROW><ROW><id>17702273</id><snippet>I tried but pickle does not working for me</snippet></ROW><ROW><id>17702273</id><snippet>&gt;&gt;&gt; import shelve
&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; db = shelve.open('/path/to/my/database/file.db', writeback=True) # Notice the file must already exist
&gt;&gt;&gt; db['a'] = a[2:5]
&gt;&gt;&gt; db.close()
&gt;&gt;&gt; quit()
# New interpreter is opened
&gt;&gt;&gt; import shelve
&gt;&gt;&gt; db = shelve.open('/path/to/my/database/file.db', writeback=True)
&gt;&gt;&gt; db['a']
[3, 4, 5]
</snippet></ROW><ROW><id>17702742</id><snippet>class TableModel(QtCore.QAbstractTableModel): 
    def __init__(self, parent=None, *args): 
        super(TableModel, self).__init__()
        self.datatable = None

    def update(self, dataIn):
        print 'Updating Model'
        self.datatable = dataIn
        print 'Datatable : {0}'.format(self.datatable)

    def rowCount(self, parent=QtCore.QModelIndex()):
        return len(self.datatable.index) 

    def columnCount(self, parent=QtCore.QModelIndex()):
        return len(self.datatable.columns.values) 

    def data(self, index, role=QtCore.Qt.DisplayRole):
        if role == QtCore.Qt.DisplayRole:
            i = index.row()
            j = index.column()
            return '{0}'.format(self.datatable.iget_value(i, j))
        else:
            return QtCore.QVariant()

    def flags(self, index):
        return QtCore.Qt.ItemIsEnabled
</snippet></ROW><ROW><id>17702833</id><snippet>map</snippet></ROW><ROW><id>17702833</id><snippet>In [7]: df = pd.DataFrame({'Status':['Delivered', 'Delivered', 'Undelivered',
                                     'SomethingElse']})

In [8]: df
Out[8]:
          Status
0      Delivered
1      Delivered
2    Undelivered
3  SomethingElse

In [9]: d = {'Delivered': True, 'Undelivered': False}

In [10]: df['Status'].map(d)
Out[10]:
0     True
1     True
2    False
3      NaN
Name: Status, dtype: object
</snippet></ROW><ROW><id>17702993</id><snippet>for person in PeopleClient("http://ex..").get_people_by_last_name("smith"):
    # Do something with the person
</snippet></ROW><ROW><id>17702993</id><snippet>def get_people_page(name, page):
    # Perform the HTTP request, using page=page
</snippet></ROW><ROW><id>17702993</id><snippet>def get_all_people(name):
    page = 0
    has_more = 1
    while has_more:
        for person in get_people_page(name, page):
            yield person
        page += 1
        has_more = # calculate has more by whether you have a next link
                   # or whether the results set is empty
                   # or whether you get an error
</snippet></ROW><ROW><id>17702997</id><snippet>[[]] * x</snippet></ROW><ROW><id>17702997</id><snippet>&gt;&gt;&gt; lst = [[]] * 3
&gt;&gt;&gt; print [id(x) for x in lst]
[11124864, 11124864, 11124864]
</snippet></ROW><ROW><id>17702997</id><snippet>lst = [[]]*3
lst[0] = [5]
lst[0].append(3)
</snippet></ROW><ROW><id>17702997</id><snippet>[[5,3],[],[]]</snippet></ROW><ROW><id>17702997</id><snippet>lst[1].append(0)</snippet></ROW><ROW><id>17702997</id><snippet>[[5,3],[0],[0]</snippet></ROW><ROW><id>17702997</id><snippet>lst[0]</snippet></ROW><ROW><id>17702997</id><snippet>lst[0]</snippet></ROW><ROW><id>17702997</id><snippet>lst[1]</snippet></ROW><ROW><id>17702997</id><snippet>lst[2]</snippet></ROW><ROW><id>17702997</id><snippet>lst[1]</snippet></ROW><ROW><id>17702997</id><snippet>lst[2]</snippet></ROW><ROW><id>17703019</id><snippet>{% for image_path in data.image_paths|your_custom_json_decode_filter %}
  {{ image_path }}
{% endfor %}
</snippet></ROW><ROW><id>17703076</id><snippet>==</snippet></ROW><ROW><id>17703076</id><snippet>&gt;&gt;&gt; a == b
array([[ True, False],
       [ True,  True]], dtype=bool)
</snippet></ROW><ROW><id>17703076</id><snippet>.array_equal()</snippet></ROW><ROW><id>17703076</id><snippet>&gt;&gt;&gt; any(np.array_equal(a, x) for x in my_list)
True
&gt;&gt;&gt; any(np.array_equal(b, x) for x in my_list)
True
&gt;&gt;&gt; any(np.array_equal(np.array([a, a]), x) for x in my_list)
False
&gt;&gt;&gt; any(np.array_equal(np.array([[0,0],[0,0]]), x) for x in my_list)
False
</snippet></ROW><ROW><id>17703453</id><snippet>.__sub__()</snippet></ROW><ROW><id>17703453</id><snippet>.__rsub__()</snippet></ROW><ROW><id>17703453</id><snippet>.count()</snippet></ROW><ROW><id>17703453</id><snippet>.replace()</snippet></ROW><ROW><id>17703453</id><snippet>other</snippet></ROW><ROW><id>17703453</id><snippet>def __sub__(self, other):
    return self.replace(other, '', 1)
</snippet></ROW><ROW><id>17703453</id><snippet>def __rsub__(self, other):
    return other.replace(self, '', 1)
</snippet></ROW><ROW><id>17703650</id><snippet>&gt;&gt;&gt; foo = ["neg * , This is a sentence","pos * , This is another sentence"]
&gt;&gt;&gt; [p.split('*', 1) for p in foo]
[['neg ', ' , This is a sentence'], ['pos ', ' , This is another sentence']]
</snippet></ROW><ROW><id>17703650</id><snippet>[CAT, TEXT]</snippet></ROW><ROW><id>17703650</id><snippet>&gt;&gt;&gt; l = [p.split('*', 1) for p in foo]
&gt;&gt;&gt; for cat, text in l:
    print 'cat: %s, text: %s' % (cat, text)

cat: neg , text:  , This is a sentence
cat: pos , text:  , This is another sentence
</snippet></ROW><ROW><id>17703695</id><snippet>self.db</snippet></ROW><ROW><id>17703695</id><snippet>try..except</snippet></ROW><ROW><id>17704107</id><snippet>level</snippet></ROW><ROW><id>17704107</id><snippet>display_level = level[:]
</snippet></ROW><ROW><id>17704107</id><snippet>display_level = [l[:] for l in level]
</snippet></ROW><ROW><id>17704107</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>17704107</id><snippet>import copy

# ...

display_level = copy.deepcopy(level)
</snippet></ROW><ROW><id>17704207</id><snippet>pairs = {'butter' =&gt; 'flies', 'cheese' =&gt; 'wheel', 'milk'=&gt; 'expensive'}

line = ARGV.join(' ').split(' ').map do |word|
  pairs.include?(word) ? pairs[word] : word
end.join(" ")

puts line
</snippet></ROW><ROW><id>17704312</id><snippet>rows = zip(list1,list2,list3,list4,list5)
</snippet></ROW><ROW><id>17704312</id><snippet>for row in rows:
    writer.writerow(row)
</snippet></ROW><ROW><id>17704457</id><snippet>csv</snippet></ROW><ROW><id>17704457</id><snippet>import csv

fields = ('category', 'code', 'price', 'description', 'link', 'picture', 'plans')
table_row = '''\
    &lt;tr&gt;
      &lt;td&gt;&lt;img src="{picture}"&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href="{link}"&gt;{description}&lt;/a&gt; ({price:.2f})&lt;/td&gt;
   &lt;/tr&gt;
'''

with open(filename, 'rb') as infile:
    reader = csv.DictReader(infile, fieldnames=fields, delimiter='\t')
    for row in reader:
        row['price'] = float(row['price'])  # needed to make `.2f` formatting work
        print table_row.format(**row)
</snippet></ROW><ROW><id>17704457</id><snippet>csv.DictReader()</snippet></ROW><ROW><id>17704457</id><snippet>str.format()</snippet></ROW><ROW><id>17704729</id><snippet>import sys
sys.path.append("/home/me/mypy")
</snippet></ROW><ROW><id>17704745</id><snippet>FindWindowEx</snippet></ROW><ROW><id>17704745</id><snippet>SetWindowsHookEx</snippet></ROW><ROW><id>17704792</id><snippet>\W*</snippet></ROW><ROW><id>17704792</id><snippet>\\</snippet></ROW><ROW><id>17704792</id><snippet>\\\\</snippet></ROW><ROW><id>17704792</id><snippet>\</snippet></ROW><ROW><id>17704792</id><snippet>W</snippet></ROW><ROW><id>17704792</id><snippet>\\\\W*</snippet></ROW><ROW><id>17704792</id><snippet>\\</snippet></ROW><ROW><id>17704792</id><snippet>\</snippet></ROW><ROW><id>17704792</id><snippet>&gt;&gt;&gt; s = "\WWWW$$$$"

# Without raw string
&gt;&gt;&gt; splitter = re.compile('\\W*')   # Match non-alphanumeric characters
&gt;&gt;&gt; re.findall(splitter, s)
['\\', '', '', '', '', '$$$$', '']

&gt;&gt;&gt; splitter = re.compile('\\\\W*') # Match `\` followed by 0 or more `W`
&gt;&gt;&gt; re.findall(splitter, s)
['\\WWWW']

# With raw string
&gt;&gt;&gt; splitter = re.compile(r'\W*')   # Same as first one. You need a single `\`
&gt;&gt;&gt; re.findall(splitter, s)
['\\', '', '', '', '', '$$$$', '']

&gt;&gt;&gt; splitter = re.compile(r'\\W*')  # Same as 2nd. Two `\\` needed.
&gt;&gt;&gt; re.findall(splitter, s)
['\\WWWW']
</snippet></ROW><ROW><id>17705042</id><snippet>[0]*6</snippet></ROW><ROW><id>17705042</id><snippet>[[0]*6]*len(lengthList)</snippet></ROW><ROW><id>17705042</id><snippet>[0]*6</snippet></ROW><ROW><id>17705042</id><snippet>zip</snippet></ROW><ROW><id>17705042</id><snippet>A = ['a1','a2','a3']
B = ['b1','b2','b3']
C = ['c1','c2','c3']

print [x for x in zip(A,B,C)]
</snippet></ROW><ROW><id>17705042</id><snippet>[('a1', 'b1', 'c1'), ('a2', 'b2', 'c2'), ('a3', 'b3', 'c3')]
</snippet></ROW><ROW><id>17705042</id><snippet>combList = [x for x in zip(fNameList, widthList, heightList, areaList, perimeterList, lengthList)]
</snippet></ROW><ROW><id>17705498</id><snippet>is_monotonic</snippet></ROW><ROW><id>17705498</id><snippet>In [10]: months = ['Jan', 'Feb', 'Mar', 'Apr']

In [11]: df.loc[:, months].apply(lambda x: pd.algos.is_monotonic_float64(-x)[0],
                                       axis=1)
Out[11]:
0    False
1     True
2    False
3     True
4    False
dtype: bool
</snippet></ROW><ROW><id>17705498</id><snippet>is_monotonic</snippet></ROW><ROW><id>17705498</id><snippet>-x.values</snippet></ROW><ROW><id>17705724</id><snippet>x[np.array([1, 1, 3, 1])] + 1</snippet></ROW><ROW><id>17705724</id><snippet>x[np.array([1, 1, 3, 1])] + 1</snippet></ROW><ROW><id>17705724</id><snippet>array([11, 11, 31, 11])</snippet></ROW><ROW><id>17705724</id><snippet>&gt;&gt;&gt; x = np.arange(0, 50, 10)
&gt;&gt;&gt; x
array([ 0, 10, 20, 30, 40])
&gt;&gt;&gt; x[np.array([1, 1, 3, 1])] + 1
array([11, 11, 31, 11])
</snippet></ROW><ROW><id>17705724</id><snippet>array([11, 11, 31, 11])</snippet></ROW><ROW><id>17705724</id><snippet>&gt;&gt;&gt; x = np.arange(0, 50, 10)
&gt;&gt;&gt; x
array([ 0, 10, 20, 30, 40])
&gt;&gt;&gt; x[np.array([1, 1, 3, 1])] = x[np.array([1, 1, 3, 1])] + 1
&gt;&gt;&gt; x
array([ 0, 11, 20, 31, 40])
</snippet></ROW><ROW><id>17705967</id><snippet>ptsTrap = [[[  99.   51.]]
           [[  64.  251.]]
           [[ 234.  251.]]
           [[ 199.   51.]]]

ptsRect = [[[ 102.   49.]]
           [[ 100.  249.]]
           [[ 200.  250.]]
           [[ 200.   50.]]]
</snippet></ROW><ROW><id>17705967</id><snippet>import cv2
import numpy as np

def find_corners(image):
    im = cv2.Canny(image, 100, 200)

    cnt = cv2.findContours(im,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)[0]
    cnt = cv2.approxPolyDP(cnt[0], 5, True)
    return cnt.astype(np.float32)

def main(argv):
    trap = cv2.imread('trap.png', cv2.IMREAD_GRAYSCALE)
    rect = cv2.imread('rect.png', cv2.IMREAD_GRAYSCALE)

    ptsTrap = find_corners(trap)
    ptsRect = find_corners(rect)

    T = cv2.getPerspectiveTransform(ptsTrap, ptsRect)

    warp = cv2.warpPerspective(trap, T, rect.shape[:2])

    cv2.imshow('', warp)
    cv2.imwrite('warp.png', warp)
    cv2.waitKey()
    cv2.destroyAllWindows()
</snippet></ROW><ROW><id>17706028</id><snippet>input_1 = 105
output_1 = (105 * 1.0) / 36 # 2.197

print '36*' + output_1 # 36*2.197
</snippet></ROW><ROW><id>17706232</id><snippet>__eq__</snippet></ROW><ROW><id>17706232</id><snippet>__hash__</snippet></ROW><ROW><id>17706232</id><snippet>class StateDetails(object):
    def __init__(self, state, abbrev):
        self.state = state
        self.abbrev = abbrev
    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.abbrev == other.abbrev
    def __hash__(self):
        return hash(self.abbrev)
    def __repr__(self):
        return '{}({!r}, {!r})'.format(self.__class__.__name__, self.state, self.abbrev)

CA = StateDetails('California', 'CA')
AZ = StateDetails('Arizona', 'AZ')
NV = StateDetails('Nevada', 'NV')
UT = StateDetails('Utah', 'UT')
graph = {CA: [AZ, NV],
         AZ: [CA, NV, UT],
         NV: [CA, AZ, UT],
         UT: [AZ, NV]}
</snippet></ROW><ROW><id>17706232</id><snippet>&gt;&gt;&gt; pprint.pprint(graph)
{StateDetails('California', 'CA'): [StateDetails('Arizona', 'AZ'),
                                    StateDetails('Nevada', 'NV')],
 StateDetails('Arizona', 'AZ'): [StateDetails('California', 'CA'),
                                 StateDetails('Nevada', 'NV'),
                                 StateDetails('Utah', 'UT')],
 StateDetails('Nevada', 'NV'): [StateDetails('California', 'CA'),
                                StateDetails('Arizona', 'AZ'),
                                StateDetails('Utah', 'UT')],
 StateDetails('Utah', 'UT'): [StateDetails('Arizona', 'AZ'),
                              StateDetails('Nevada', 'NV')]}
</snippet></ROW><ROW><id>17706278</id><snippet>store_true</snippet></ROW><ROW><id>17706278</id><snippet>True</snippet></ROW><ROW><id>17706278</id><snippet>False</snippet></ROW><ROW><id>17706278</id><snippet>parser = argparse.ArgumentParser()
parser.add_argument('--foo', action='store_true')

args = parser.parse_args()
if args.foo:
    print('--foo was specified')
</snippet></ROW><ROW><id>17706302</id><snippet>You have a simple indexing problem. You try to use POS-tagging to solve it. Now you have two problems.</snippet></ROW><ROW><id>17706350</id><snippet>timestamp</snippet></ROW><ROW><id>17706350</id><snippet>DatetimeIndex</snippet></ROW><ROW><id>17706350</id><snippet>import io
import pandas as pd
content = '''\
timestamp  score
2013-06-29 00:52:28+00:00        -0.420070
2013-06-29 00:51:53+00:00        -0.445720
2013-06-28 16:40:43+00:00         0.508161
2013-06-28 15:10:30+00:00         0.921474
2013-06-28 15:10:17+00:00         0.876710
'''

df = pd.read_table(io.BytesIO(content), sep='\s{2,}', parse_dates=[0], index_col=[0])

print(df)
</snippet></ROW><ROW><id>17706350</id><snippet>df</snippet></ROW><ROW><id>17706350</id><snippet>                        score
timestamp                    
2013-06-29 00:52:28 -0.420070
2013-06-29 00:51:53 -0.445720
2013-06-28 16:40:43  0.508161
2013-06-28 15:10:30  0.921474
2013-06-28 15:10:17  0.876710

print(df.index)
# &lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
</snippet></ROW><ROW><id>17706350</id><snippet>print(df.groupby(df.index.date).count())
</snippet></ROW><ROW><id>17706350</id><snippet>            score
2013-06-28      3
2013-06-29      2
</snippet></ROW><ROW><id>17706350</id><snippet>parse_dates</snippet></ROW><ROW><id>17706350</id><snippet>pandas.core.index.Index</snippet></ROW><ROW><id>17706350</id><snippet>df.index.date</snippet></ROW><ROW><id>17706350</id><snippet>type(df.index)</snippet></ROW><ROW><id>17706482</id><snippet>s = Session()
s.query(Role).join(User.groups).join(Group.roles).filter(User.id==1).all()
</snippet></ROW><ROW><id>17706482</id><snippet>SELECT role.id AS role_id 
FROM user
JOIN user_group AS user_group_1 ON user.id = user_group_1.user_id
JOIN "group" ON "group".id = user_group_1.group_id
JOIN role_group AS role_group_1 ON "group".id = role_group_1.group_id
JOIN role ON role.id = role_group_1.role_id 
WHERE user.id = 1;
</snippet></ROW><ROW><id>17706533</id><snippet>neighbor_list.append(neighbor)</snippet></ROW><ROW><id>17706533</id><snippet>neighbor</snippet></ROW><ROW><id>17706533</id><snippet>neighbor_list</snippet></ROW><ROW><id>17706533</id><snippet>neighbor</snippet></ROW><ROW><id>17706533</id><snippet>neighbor_list.append(copy.copy(neighbor)</snippet></ROW><ROW><id>17706591</id><snippet>li {
    list-style-type: none;
}
</snippet></ROW><ROW><id>17706591</id><snippet>.product_list</snippet></ROW><ROW><id>17706654</id><snippet>import re
x = open("logssss.txt")

dic={}


for line in x:
    m = re.search(r"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b",line).group().split()
    c = re.search(r"\[(.+)\]",line).group().split()
    for i in range(len(m)):
        try:
            dic[m[i]] += 1 
        except:
            dic[m[i]] = 1

for k,v in dic.iteritems(): #or items if Python 3.X
    print k, v 
</snippet></ROW><ROW><id>17706654</id><snippet>Counter</snippet></ROW><ROW><id>17706654</id><snippet>from collections import Counter
dic = Counter()
for line in x:
    m = re.search(r"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b",line).group().split()
    c = re.search(r"\[(.+)\]",line).group().split()
    for i in range(len(m)):
        dic[m[i]] += 1

for k,v in dic.iteritems(): #or items if Python 3.X
    print k, v   
</snippet></ROW><ROW><id>17706654</id><snippet>dic = {}
for line in x:
    m = re.search(r"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b",line).group().split()
    c = re.search(r"\[(.+)\]",line).group().split()
    for i in range(len(m)):
        dic.setdefault(m[i], []).append(c)

for k,v in dic.iteritems(): #or items if Python 3.X
    print k, len(v), v 
</snippet></ROW><ROW><id>17706655</id><snippet>project/modules/api.py</snippet></ROW><ROW><id>17706655</id><snippet>projects/api</snippet></ROW><ROW><id>17706655</id><snippet>__init__.py</snippet></ROW><ROW><id>17706655</id><snippet>/project/
    /api/
        __init__.py
        test.py
    /modules/
        __init__.py
        foo.py
</snippet></ROW><ROW><id>17706655</id><snippet>python modules/foo.py</snippet></ROW><ROW><id>17706655</id><snippet>from ..api import test
</snippet></ROW><ROW><id>17706655</id><snippet>import sys
import os
sys.path.append(os.path.abspath('../api'))
import test
</snippet></ROW><ROW><id>17706735</id><snippet>print os.path.dirname(sys.executable)
</snippet></ROW><ROW><id>17706744</id><snippet>paused</snippet></ROW><ROW><id>17706744</id><snippet>paused = False
</snippet></ROW><ROW><id>17706744</id><snippet>paused = not True
</snippet></ROW><ROW><id>17706797</id><snippet>time</snippet></ROW><ROW><id>17706797</id><snippet>8322 "5/Jul/2013::8:25:18  0530"</snippet></ROW><ROW><id>17706797</id><snippet>8321 "15/Jul/2013:18:25:18 +0530"</snippet></ROW><ROW><id>17706797</id><snippet>8321 "15/Jul/2013:18:25:18 +0530"
8322 "5/Jul/2013::8:25:18  0530"
</snippet></ROW><ROW><id>17706797</id><snippet>time2</snippet></ROW><ROW><id>17706797</id><snippet>15/Jul/2013 18:25:18</snippet></ROW><ROW><id>17706797</id><snippet>"5/Jul/2013::8:25:18</snippet></ROW><ROW><id>17706797</id><snippet>15/Jul/2013 18:25:18
"5/Jul/2013::8:25:18
</snippet></ROW><ROW><id>17706797</id><snippet>&gt;&gt;&gt; pd.Series(pd.to_datetime(['15/Jul/2013 18:25:18', '15/Jul/2013 18:25:18']))
0   2013-07-15 18:25:18
1   2013-07-15 18:25:18
dtype: datetime64[ns]

&gt;&gt;&gt; pd.Series(pd.to_datetime(['15/Jul/2013 18:25:18', '*5/Jul/2013 18:25:18']))
0    15/Jul/2013 18:25:18
1    *5/Jul/2013 18:25:18
dtype: object
</snippet></ROW><ROW><id>17706797</id><snippet>...
df = pd.DataFrame(t[:5])
df.columns = ['Time']
df['Time'] = pd.to_datetime(df['Time'])
</snippet></ROW><ROW><id>17706797</id><snippet>0   2013-07-15 00:00:12
1   2013-07-15 00:00:18
2   2013-07-15 00:00:23
3   2013-07-15 00:00:27
4   2013-07-15 00:00:29
Name: Time, dtype: datetime64[ns]
</snippet></ROW><ROW><id>17706797</id><snippet>object</snippet></ROW><ROW><id>17706797</id><snippet>datetime</snippet></ROW><ROW><id>17706830</id><snippet>wc = defaultdict(int)
idc = defaultdict(set)

for ID, words in zip(df.ID, df.words):
    lwords = words.split()
    for word in lwords:
        wc[word] += 1
        # You don't really need the if statement (since a set will only hold one 
        # of each ID at most) but I feel like it makes things much clearer.
        if ID not in idc[word]:
            idc[word].add(ID)
</snippet></ROW><ROW><id>17706830</id><snippet>defaultdict(&lt;type 'set'&gt;, {'kiwi': set(['c']), 'strawberry': set(['a']), 'lemon': set(['a', 'c']), 'apple': set(['a']), 'banana': set(['a', 'c', 'b'])})
</snippet></ROW><ROW><id>17706830</id><snippet>lenidc = dict((key, len(value)) for key, value in idc.iteritems())
</snippet></ROW><ROW><id>17706830</id><snippet>   count  ids        word
0      2    1        kiwi
1      1    1  strawberry
2      3    2       lemon
3      3    1       apple
4      4    3      banana
</snippet></ROW><ROW><id>17706830</id><snippet># Makes it so the values in the wc dict are a tuple in 
# (word_count, id_count) form
for key, value in lenidc.iteritems():
    wc[key] = (wc[key], value)

# Now, when you construct dwc, for count and id you only want to use
# the first and second columns respectively. 
dwc = {"word": Series(wc.keys()), 
       "count": Series([v[0] for v in wc.values()]), 
       "ids": Series([v[1] for v in wc.values()])}
</snippet></ROW><ROW><id>17706883</id><snippet>apply</snippet></ROW><ROW><id>17706883</id><snippet>axis=1</snippet></ROW><ROW><id>17706883</id><snippet>In [19]: def holey(s):
    starts_at = s.notnull().argmax()
    next_null = s[starts_at:].isnull().argmax()
    if next_null == 0:
        return False
    any_values_left = s[next_null:].notnull().any()
    return any_values_left
   ....: 

In [20]: df.apply(holey, axis=1)
Out[20]: 
0     True
1     True
2    False
3    False
4     True
dtype: bool
</snippet></ROW><ROW><id>17706883</id><snippet>df[~df.apply(holey, axis=1)]</snippet></ROW><ROW><id>17706883</id><snippet>argmax()</snippet></ROW><ROW><id>17706883</id><snippet>True</snippet></ROW><ROW><id>17706938</id><snippet>make install</snippet></ROW><ROW><id>17707144</id><snippet>&gt;&gt;&gt; testList = ['a', 'c', 'b']
&gt;&gt;&gt; testDict = {'a' : 1, 'c' : 2, 'b' : 3}
&gt;&gt;&gt; for elem in testList:
        print elem, testDict[elem]


a 1
c 2
b 3
</snippet></ROW><ROW><id>17707144</id><snippet>OrderedDict</snippet></ROW><ROW><id>17707144</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; testDict = OrderedDict([('a', 1), ('c', 2), ('b', 3)])
&gt;&gt;&gt; for key, value in testDict.items():
        print key, value


a 1
c 2
b 3
</snippet></ROW><ROW><id>17707301</id><snippet>&lt;html&gt;
&lt;?php
echo "&lt;title&gt;Hello World&lt;/title&gt;";
?&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>17707301</id><snippet>mod_php</snippet></ROW><ROW><id>17707301</id><snippet>mod_python</snippet></ROW><ROW><id>17707301</id><snippet>mod_wsgi</snippet></ROW><ROW><id>17707301</id><snippet>mod_wsgi</snippet></ROW><ROW><id>17707309</id><snippet>for key in countries:
    if some_strng in countries:
        code_country.append([key,countries[key]])
</snippet></ROW><ROW><id>17707309</id><snippet>for key,value in countries.iteritems():
    if some_strng in value:
        code_country.append([key,countries[key]])
</snippet></ROW><ROW><id>17707309</id><snippet>if not(some_strng in countries):
    code_country.append( ['NOT FOUND'])
</snippet></ROW><ROW><id>17707309</id><snippet>if len(code_country) == 1
  code_country.append( ['NOT FOUND'])
</snippet></ROW><ROW><id>17707461</id><snippet>do_some_other_work</snippet></ROW><ROW><id>17707461</id><snippet>def my_fun(iterable):
    iterable = iter(iterable)
    # Do whatever.
</snippet></ROW><ROW><id>17707643</id><snippet>while</snippet></ROW><ROW><id>17707643</id><snippet>fetchone</snippet></ROW><ROW><id>17707643</id><snippet>row = cursor.fetchone()
while row is not None:
    # do something
    row = cursor.fetchone()
</snippet></ROW><ROW><id>17707800</id><snippet>&gt;&gt;&gt; orig=[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 123, 0]]
&gt;&gt;&gt; id(orig)
151498220
&gt;&gt;&gt; copy2=orig[:]   #different index
&gt;&gt;&gt; id(copy2)
151498348

&gt;&gt;&gt; id(copy2[0]) == id(orig[0])  # inner list have same id
True
</snippet></ROW><ROW><id>17707800</id><snippet>deepcopy</snippet></ROW><ROW><id>17707800</id><snippet>copy.deepcopy(x)</snippet></ROW><ROW><id>17707800</id><snippet>&gt;&gt;&gt; import copy
&gt;&gt;&gt; 
&gt;&gt;&gt; copy3 = copy.deepcopy(orig)
&gt;&gt;&gt; 
&gt;&gt;&gt; id(copy3[0]) == id(orig[0])   # inner list have different id
False

&gt;&gt;&gt; orig[0][3] = 34
&gt;&gt;&gt; 
&gt;&gt;&gt; orig
[[0, 34, 0, 0], [0, 0, 0, 0], [0, 0, 123, 0]]
&gt;&gt;&gt; copy3
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 123, 0]]
</snippet></ROW><ROW><id>17707891</id><snippet>&gt;&gt;&gt; import re,requests
&gt;&gt;&gt; raw = requests.get('http://www.geoiptool.com/').text
&gt;&gt;&gt; latlon = re.search("GPoint\(([^)]+)\)",raw).groups(0)
&gt;&gt;&gt; lat,lon = map(float,latlon[0].split(","))
&gt;&gt;&gt; print "Latitude:%s   Longitude:%s"%(lat,lon)
Latitude:-117.2455   Longitude:46.7322
</snippet></ROW><ROW><id>17707910</id><snippet>threading</snippet></ROW><ROW><id>17707910</id><snippet>Thread</snippet></ROW><ROW><id>17707910</id><snippet>threading</snippet></ROW><ROW><id>17707910</id><snippet>current_thread</snippet></ROW><ROW><id>17707910</id><snippet>1 import Queue
2 from threading import Thread, current_thread
3
4 def do_work(item):
5         try:
6                 print current_thread()
</snippet></ROW><ROW><id>17707925</id><snippet>def SD(numLists):
    def singleSD(numList):
      cntN=len(numList)
      sumN=0
      for i in numList:
          sumN+=i
      avgVal=float(sumN)/float(cntN)
      sumVar=0.0
      for i in range(cntN):
          sumVar+=float((numList[i]-avgVal)**2)
      return ((float(sumVar)/float((cntN-1)))**0.5)
    return [singleSD(l) for l in numLists]
</snippet></ROW><ROW><id>17708124</id><snippet>quotechar='|'</snippet></ROW><ROW><id>17708124</id><snippet>July 17</snippet></ROW><ROW><id>17708124</id><snippet>2013 03:53 PM</snippet></ROW><ROW><id>17708124</id><snippet>|July 17</snippet></ROW><ROW><id>17708124</id><snippet>2013 03:53PM|</snippet></ROW><ROW><id>17708124</id><snippet>"</snippet></ROW><ROW><id>17708124</id><snippet>csv</snippet></ROW><ROW><id>17708169</id><snippet>import cloud
import cPickle as pickle

# to write
cloud.bucket.putf(pickle.dumps(P), 'p.csv')

# to read
obj = pickle.loads(cloud.bucket.getf('p.csv').read())
</snippet></ROW><ROW><id>17708422</id><snippet>keys()</snippet></ROW><ROW><id>17708422</id><snippet>values()</snippet></ROW><ROW><id>17708520</id><snippet>OSError: [Errno 65] No route to host</snippet></ROW><ROW><id>17708520</id><snippet>ping imap.gmail.com
</snippet></ROW><ROW><id>17708520</id><snippet>imap.gmail.com</snippet></ROW><ROW><id>17708520</id><snippet>ping 74.125.129.108
ping 74.125.129.109
</snippet></ROW><ROW><id>17708520</id><snippet>ping</snippet></ROW><ROW><id>17708520</id><snippet>telnet imap.gmail.com
</snippet></ROW><ROW><id>17708520</id><snippet>telnet imap.gmail.com 993
</snippet></ROW></DATA>