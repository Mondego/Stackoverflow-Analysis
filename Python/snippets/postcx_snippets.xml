<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>16570797</id><snippet>list_words.append(("foo", "bar", "tiger")) 
</snippet></ROW><ROW><id>16570797</id><snippet>text</snippet></ROW><ROW><id>16570797</id><snippet>words</snippet></ROW><ROW><id>16570797</id><snippet>w in list_words</snippet></ROW><ROW><id>16570797</id><snippet>True</snippet></ROW><ROW><id>16570797</id><snippet>list_words2</snippet></ROW><ROW><id>16570797</id><snippet>list_words = ["foo", "bar", "tiger"]
</snippet></ROW><ROW><id>16570797</id><snippet>set</snippet></ROW><ROW><id>16570797</id><snippet>set_words = {"foo", "bar", "tiger"}
</snippet></ROW><ROW><id>16570797</id><snippet>collections.Counter()</snippet></ROW><ROW><id>16570797</id><snippet>from collections import Counter    

set_words = {"foo", "bar", "tiger"}

for text in posts:
    list_words2 = Counter(word for word in text.split() if word in set_words)
    print list_words2
</snippet></ROW><ROW><id>16570797</id><snippet>tags3</snippet></ROW><ROW><id>16570797</id><snippet>text</snippet></ROW><ROW><id>16570797</id><snippet>tags3</snippet></ROW><ROW><id>16570797</id><snippet>tags3</snippet></ROW><ROW><id>16570797</id><snippet>tags</snippet></ROW><ROW><id>16570797</id><snippet>tags3</snippet></ROW><ROW><id>16570797</id><snippet>tags3 = []</snippet></ROW><ROW><id>16570797</id><snippet>tags</snippet></ROW><ROW><id>16570797</id><snippet>for text in posts:
   words = wordpunct_tokenize (text)
   tags = nltk.pos_tag (words)
   list_tags = Counter(b for a, b in tags if b in tags_list)
   print list_tags
</snippet></ROW><ROW><id>16570797</id><snippet>tags_list</snippet></ROW><ROW><id>16570797</id><snippet>b in tags_list</snippet></ROW><ROW><id>16570797</id><snippet>tags_list</snippet></ROW><ROW><id>16570836</id><snippet>set cindent
autocmd FileType python setlocal foldmethod=indent smartindent shiftwidth=4 ts=4 et cinwords=if,elif,else,for,while,try,except,finally,def,class
</snippet></ROW><ROW><id>16570836</id><snippet>filetype plugin indent on  
</snippet></ROW><ROW><id>16570873</id><snippet>for item in out:
    text = text.replace("Keys1029","Keys"+str(item))
</snippet></ROW><ROW><id>16570884</id><snippet>with open(r'C:\Users\Laptopname\Desktop\.temp.py', 'rb') as f:
    print(repr(f.read()))
</snippet></ROW><ROW><id>16570923</id><snippet>self.__lst</snippet></ROW><ROW><id>16570923</id><snippet>A.__lst</snippet></ROW><ROW><id>16570923</id><snippet>self.__lst</snippet></ROW><ROW><id>16570923</id><snippet>__init__()</snippet></ROW><ROW><id>16570923</id><snippet>class A(object):
    def __init__(self):
        self.__lst = []

    def add(self, s):
        self.__lst.append(s)
        print len(self.__lst)
</snippet></ROW><ROW><id>16570923</id><snippet>object</snippet></ROW><ROW><id>16570923</id><snippet>str</snippet></ROW><ROW><id>16571033</id><snippet>rows = list(reader(response))
query = con.fetchall() # this one you can iterate through, I am just copying what you had
for row in query:
    rs = filter(lambda r: row[1] in r, rows)
    for r in rs:
        if r[4]:
            pass # do some stuff (here)
            break
    else: # this is a for ... else loop
        pass # do some other stuff
</snippet></ROW><ROW><id>16571507</id><snippet>&gt;&gt;&gt; names = {'name1': 34, 'name2':45, 'name3': 98, 'name4':34, 'name5': 66}
&gt;&gt;&gt; sorted_names = sorted(names.iteritems(), key=lambda (k, v): (-v, k))[:10]
&gt;&gt;&gt; sorted_names
[('name3', 98), ('name5', 66), ('name2', 45), ('name1', 34), ('name4', 34)]
</snippet></ROW><ROW><id>16571507</id><snippet>sorted</snippet></ROW><ROW><id>16571507</id><snippet>&gt;&gt;&gt; for name, score in sorted_names:
...     print name, score
...
name3 98
name5 66
name2 45
name1 34
name4 34
</snippet></ROW><ROW><id>16571507</id><snippet>&gt;&gt;&gt; for name, score in sorted(names.iteritems(), key=lambda (k, v): (-v, k))[:10]:
...     print name, score
...
name3 98
name5 66
name2 45
name1 34
name4 34
</snippet></ROW><ROW><id>16571507</id><snippet>heapq</snippet></ROW><ROW><id>16571507</id><snippet>heapq.nsmallest</snippet></ROW><ROW><id>16571507</id><snippet>&gt;&gt;&gt; from heapq import nsmallest
&gt;&gt;&gt; for name, score in nsmallest(10, names.iteritems(), key=lambda (k, v): (-v, k)):
...     print name, score
...
name3 98
name5 66
name2 45
name1 34
name4 34
</snippet></ROW><ROW><id>16571507</id><snippet>nsmallest</snippet></ROW><ROW><id>16571618</id><snippet>with open(append_file,'a+b') as writeFile:
    need_headers = True
    for input_file in lstFiles:
        with open(input_file,'rU') as readFile:
            headers = readFile.readline()
            if need_headers:
                # Write the headers only if we need them
                writeFile.write(headers)
                need_headers = False
            # Now write the rest of the input file.
            for line in readFile:
                writeFile.write(line)
</snippet></ROW><ROW><id>16571618</id><snippet>i == 0</snippet></ROW><ROW><id>16571630</id><snippet>from cStringIO import StringIO
import sys

class Capturing(list):
    def __enter__(self):
        self._stdout = sys.stdout
        sys.stdout = self._stringio = StringIO()
        return self
    def __exit__(self, *args):
        self.extend(self._stringio.getvalue().splitlines())
        sys.stdout = self._stdout
</snippet></ROW><ROW><id>16571630</id><snippet>with Capturing() as output:
    do_something(my_object)
</snippet></ROW><ROW><id>16571630</id><snippet>output</snippet></ROW><ROW><id>16571630</id><snippet>with Capturing() as output:
    print 'hello world'

print 'displays on screen'

with Capturing(output) as output:  # note the constructor argument
    print 'hello world2'

print 'done'
print 'output:', output
</snippet></ROW><ROW><id>16571630</id><snippet>displays on screen                     
done                                   
output: ['hello world', 'hello world2']
</snippet></ROW><ROW><id>16571974</id><snippet>+ " &amp; timeout 15"</snippet></ROW><ROW><id>16571974</id><snippet>+ " &amp; pause"</snippet></ROW><ROW><id>16571974</id><snippet>os.system</snippet></ROW><ROW><id>16571974</id><snippet>os.chdir('C:/Abaqus_JOBS' + JobDir)
os.system('abaqus job=' + JobName + '-3_run_rel2 user=FalseworkNmm41s interactive' + " &amp; timeout 15")
</snippet></ROW><ROW><id>16571974</id><snippet>popen</snippet></ROW><ROW><id>16572002</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>16572002</id><snippet>with open("c:/whatever") as one_file:
    with open("c:/otherlocation") as other_file:
        pass  #  or do things
</snippet></ROW><ROW><id>16572137</id><snippet>self.assertRaises(ValueError, login, username, password)
</snippet></ROW><ROW><id>16572137</id><snippet>login</snippet></ROW><ROW><id>16572137</id><snippet>ValueError</snippet></ROW><ROW><id>16572137</id><snippet>login</snippet></ROW><ROW><id>16572137</id><snippet>username</snippet></ROW><ROW><id>16572137</id><snippet>password</snippet></ROW><ROW><id>16572137</id><snippet>login</snippet></ROW><ROW><id>16572241</id><snippet>x = float(raw_input('Enter a numerator:'))
y = float(raw_input('Enter a denominator:'))
</snippet></ROW><ROW><id>16572241</id><snippet>raw_input</snippet></ROW><ROW><id>16572241</id><snippet>float</snippet></ROW><ROW><id>16572241</id><snippet>int</snippet></ROW><ROW><id>16572241</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>16572319</id><snippet>for k, v in state_sentiment.iteritems():
</snippet></ROW><ROW><id>16572429</id><snippet>&gt;&gt;&gt; my_string = "deadbeef"
&gt;&gt;&gt; my_hex = my_string.decode('hex')
&gt;&gt;&gt; print my_hex
Þ ­ ¾ ï
</snippet></ROW><ROW><id>16572429</id><snippet>&gt;&gt;&gt; print " ".join(hex(ord(n)) for n in my_hex)
0xde 0xad 0xbe 0xef
</snippet></ROW><ROW><id>16572429</id><snippet>ord()</snippet></ROW><ROW><id>16572429</id><snippet>hex()</snippet></ROW><ROW><id>16572429</id><snippet>0x##</snippet></ROW><ROW><id>16572598</id><snippet>struct.calcsize</snippet></ROW><ROW><id>16572598</id><snippet>&gt;&gt;&gt; calcsize ('Bq')
12
&gt;&gt;&gt; calcsize('=Bq')
9
</snippet></ROW><ROW><id>16572657</id><snippet>connect(':memory:')</snippet></ROW><ROW><id>16572657</id><snippet>import sqlite3, os

in_memory = sqlite3.connect(':memory:')
# do stuff

con = sqlite3.connect('existing_db.db')
con.execute('drop table stocks')
for line in in_memory.iterdump():
    con.execute(line)
</snippet></ROW><ROW><id>16573175</id><snippet>intern</snippet></ROW><ROW><id>16573175</id><snippet>&gt;&gt;&gt; b = intern('testing123')
&gt;&gt;&gt; getrefcount(b)
2
&gt;&gt;&gt; a = 'test'
&gt;&gt;&gt; a = intern(a+'ing123')
&gt;&gt;&gt; getrefcount(b)
3
&gt;&gt;&gt; a is b
True
</snippet></ROW><ROW><id>16573339</id><snippet>import winsound
winsound.Beep(300,2000)
</snippet></ROW><ROW><id>16573339</id><snippet>import os
os.system('play --no-show-progress --null --channels 1 synth %s sine %f' % ( a, b))
</snippet></ROW><ROW><id>16573339</id><snippet>import os
os.system('say "your program has finished"')
</snippet></ROW><ROW><id>16573339</id><snippet>sox</snippet></ROW><ROW><id>16573339</id><snippet>sudo port install sox
</snippet></ROW><ROW><id>16573690</id><snippet>lower</snippet></ROW><ROW><id>16573690</id><snippet>upper</snippet></ROW><ROW><id>16573690</id><snippet>from sqlalchemy import func
user = models.User.query.filter(func.lower(User.username) == func.lower("GaNyE")).first()
</snippet></ROW><ROW><id>16573690</id><snippet>ilike</snippet></ROW><ROW><id>16573690</id><snippet>like</snippet></ROW><ROW><id>16573690</id><snippet>.query.filter(Model.column.ilike("%ganye%"))
</snippet></ROW><ROW><id>16573797</id><snippet>fav_druds = request.user.favorite_set.values_list('drud', flat=True)
</snippet></ROW><ROW><id>16573797</id><snippet>{% for drud in fav_druds %}
    {{drud.id}}: {{drud.secure_key}}
{% endfor %}
</snippet></ROW><ROW><id>16573797</id><snippet>favs = request.user.favorite_set.all()

{% for fav in favs %}
    {{fav.drud.id}}: {{fav.drud.secure_key}}
{% endfor %}
</snippet></ROW><ROW><id>16573822</id><snippet>def isfloat(string):
    try:
        float(string)
        return True
    except:
        return False

[float(item) for s in mylist for item in s.split() if isfloat(item)]
#[10000.0, 5398.38770002321]
</snippet></ROW><ROW><id>16573822</id><snippet>float()</snippet></ROW><ROW><id>16574046</id><snippet>import urllib
urllib.urlretrieve("http://url/img.jpg", "img.jpg")
</snippet></ROW><ROW><id>16574107</id><snippet>p = subprocess.Popen("svn info svn://xx.xx.xx.xx/project/trunk | grep \"Revision\" | awk '{print $2}'", stdout=subprocess.PIPE, shell=True)
(output, err) = p.communicate()
print "Revision is", output
</snippet></ROW><ROW><id>16574265</id><snippet>set cluster means to equal k randomly generated points
while not converged:
     # expectation step:
     for each point:
          assign it to its expected cluster (cluster whose mean it is closest to)
     # maximization step:
     for each cluster:
          # maximizes likelihood for cluster mean
          set cluster mean to be the average of all points assigned to it
</snippet></ROW><ROW><id>16574427</id><snippet>Class A():
    ....
    b = models.ForeignKey("b.B")
</snippet></ROW><ROW><id>16574535</id><snippet>H</snippet></ROW><ROW><id>16574535</id><snippet>W</snippet></ROW><ROW><id>16574535</id><snippet>H</snippet></ROW><ROW><id>16574535</id><snippet>H = H * H_coeff
</snippet></ROW><ROW><id>16574535</id><snippet>WH</snippet></ROW><ROW><id>16574535</id><snippet>W</snippet></ROW><ROW><id>16574535</id><snippet>WH = W.dot(H)
W = W * W_coeff
</snippet></ROW><ROW><id>16574535</id><snippet>WH = W.dot(H)</snippet></ROW><ROW><id>16574535</id><snippet>W_coeff</snippet></ROW><ROW><id>16574535</id><snippet>mean</snippet></ROW><ROW><id>16574535</id><snippet>sum</snippet></ROW><ROW><id>16574535</id><snippet>sum</snippet></ROW><ROW><id>16574535</id><snippet>avg_V = sum(sum(V))/n/m
</snippet></ROW><ROW><id>16574535</id><snippet>avg_V = V.mean()
</snippet></ROW><ROW><id>16574535</id><snippet>divergence = sum(sum(V * np.log(V/WH) - V + WH)) # equation (3)
</snippet></ROW><ROW><id>16574535</id><snippet>divergence = ((V * np.log(V_over_WH)) - V + WH).sum() 
</snippet></ROW><ROW><id>16574535</id><snippet>sum</snippet></ROW><ROW><id>16574535</id><snippet>sum</snippet></ROW><ROW><id>16574535</id><snippet>sum</snippet></ROW><ROW><id>16574535</id><snippet>sum</snippet></ROW><ROW><id>16574535</id><snippet>sum</snippet></ROW><ROW><id>16574535</id><snippet>mean</snippet></ROW><ROW><id>16574535</id><snippet>H_coeff = np.zeros(H.shape)
for a in range(r):
    for mu in range(m):
        for i in range(n):
            H_coeff[a, mu] += W[i, a] * V[i, mu] / WH[i, mu]
        H_coeff[a, mu] /= sum(W)[a]
H = H * H_coeff
</snippet></ROW><ROW><id>16574535</id><snippet>V_over_WH = V/WH
H *= (np.dot(V_over_WH.T, W) / W.sum(axis=0)).T
</snippet></ROW><ROW><id>16574535</id><snippet>H</snippet></ROW><ROW><id>16574535</id><snippet>V</snippet></ROW><ROW><id>16574535</id><snippet>(W H)</snippet></ROW><ROW><id>16574535</id><snippet>V / (W H)</snippet></ROW><ROW><id>16574535</id><snippet>V_over_WH = V/WH
</snippet></ROW><ROW><id>16574535</id><snippet>W</snippet></ROW><ROW><id>16574535</id><snippet>V_over_WH</snippet></ROW><ROW><id>16574535</id><snippet>np.dot(V_over_WH.T, W).T
</snippet></ROW><ROW><id>16574535</id><snippet>W.sum(axis=0).T
</snippet></ROW><ROW><id>16574535</id><snippet>(np.dot(V_over_WH.T, W) / W.sum(axis=0)).T
</snippet></ROW><ROW><id>16574535</id><snippet>H</snippet></ROW><ROW><id>16574535</id><snippet>H</snippet></ROW><ROW><id>16574535</id><snippet>H *= (np.dot(V_over_WH.T, W) / W.sum(axis=0)).T
</snippet></ROW><ROW><id>16574535</id><snippet>import numpy as np
np.random.seed(1)


def update(V, W, H, WH, V_over_WH):
    # equation (5)
    H *= (np.dot(V_over_WH.T, W) / W.sum(axis=0)).T

    WH = W.dot(H)
    V_over_WH = V / WH
    W *= np.dot(V_over_WH, H.T) / H.sum(axis=1)

    WH = W.dot(H)
    V_over_WH = V / WH
    return W, H, WH, V_over_WH


def factor(V, r, iterations=100):
    n, m = V.shape
    avg_V = V.mean()
    W = np.random.random(n * r).reshape(n, r) * avg_V
    H = np.random.random(r * m).reshape(r, m) * avg_V
    WH = W.dot(H)
    V_over_WH = V / WH

    for i in range(iterations):
        W, H, WH, V_over_WH = update(V, W, H, WH, V_over_WH)
        # equation (3)
        divergence = ((V * np.log(V_over_WH)) - V + WH).sum()
        print("At iteration {i}, the Kullback-Liebler divergence is {d}".format(
            i=i, d=divergence))
    return W, H

V = np.arange(0.01, 1.01, 0.01).reshape(10, 10)
# V = np.arange(1,101).reshape(10,10).astype('float')
W, H = factor(V, 6)
</snippet></ROW><ROW><id>16574609</id><snippet>import urllib3

http = urllib3.PoolManager()

headers = urllib3.make_headers(user_agent='Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6')
url = "http://www.ipm.ucdavis.edu/WEATHER/textupload.cgi"
csv_data = open("weather_scrape.csv").read()

params = {
    "FILENAME": csv_data,
    'CGIREF': '/calludt.cgi/DDFILE1',
    'USE': 'MODEL',
    'MODEL': 'CM',
    'CROP': 'APPLES',
    'METHOD': 'SS',
    'UNITS' : 'E',
    'LOWTHRESHOLD': '50',
    'UPTHRESHOLD': '88',
    'CUTOFF': 'H',
    'COUNTY': 'AL',
    'ACTIVE': 'Y',
    'FROMMONTH': '3',
    'FROMDAY': '15',
    'FROMYEAR': '2013',
    'THRUMONTH': '5',
    'THRUDAY': '13',
    'THRUYEAR': '2013',
    'DATASOURCE' : 'FILE',
}

response = http.request('POST', url, params, headers)
</snippet></ROW><ROW><id>16574628</id><snippet>&gt;&gt;&gt; def no1():return
...
&gt;&gt;&gt; no = lambda : None
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(no)
  1           0 LOAD_GLOBAL              0 (None)
              3 RETURN_VALUE
&gt;&gt;&gt; dis.dis(no1)
  1           0 LOAD_CONST               0 (None)
              3 RETURN_VALUE
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16574699</id><snippet>from lxml.html import parse
import urllib

SOURCE = 'http://stackoverflow.com/unanswered'

htmlpage = urllib.urlopen(SOURCE)
tree = parse(htmlpage).getroot()

print (tree.xpath('//div[1]'))

htmlpage.close()
</snippet></ROW><ROW><id>16574788</id><snippet>soup = BeautifulSoup(urllib2.urlopen("http://www.example.com"))
</snippet></ROW><ROW><id>16574948</id><snippet>get_name</snippet></ROW><ROW><id>16574948</id><snippet>import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.font_manager as font_manager

path = '/usr/share/fonts/truetype/msttcorefonts/Comic_Sans_MS.ttf'
prop = font_manager.FontProperties(fname=path)
mpl.rcParams['font.family'] = prop.get_name()
fig, ax = plt.subplots()
ax.set_title('Text in a cool font', size=40)
plt.show()
</snippet></ROW><ROW><id>16574948</id><snippet>import matplotlib.pyplot as plt
import matplotlib.font_manager as font_manager

path = '/usr/share/fonts/truetype/msttcorefonts/Comic_Sans_MS.ttf'
prop = font_manager.FontProperties(fname=path)
fig, ax = plt.subplots()
ax.set_title('Text in a cool font', fontproperties=prop, size=40)
plt.show()
</snippet></ROW><ROW><id>16575064</id><snippet>simplejson</snippet></ROW><ROW><id>16575064</id><snippet>json</snippet></ROW><ROW><id>16575064</id><snippet>simplejson</snippet></ROW><ROW><id>16575064</id><snippet>json</snippet></ROW><ROW><id>16575064</id><snippet>.loads()</snippet></ROW><ROW><id>16575064</id><snippet>pycurl</snippet></ROW><ROW><id>16575064</id><snippet>requests</snippet></ROW><ROW><id>16575064</id><snippet>import requests

return requests.get(url).json()
</snippet></ROW><ROW><id>16575303</id><snippet>from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class FilePaths(Base):
    __tablename__ = 'file_paths'
    __table_args__ = {'mysql_engine':'InnoDB'}

    table_id = Column(Integer, primary_key=True)
    fullpath = Column(String(255))
    filename = Column(String(255))
    extension = Column(String(255))
    created = Column(String(255))
    modified = Column(String(255))
    size = Column(Integer)
    owner = Column(String(255))
    permissions = Column(Integer)

Base.metadata.create_all(engine)
</snippet></ROW><ROW><id>16575303</id><snippet>__init__()</snippet></ROW><ROW><id>16575308</id><snippet>win32gui.DeleteObject(bmp.GetHandle())
memdc.DeleteDC()
srcdc.DeleteDC()
win32gui.ReleaseDC(hwin, hwindc) 
</snippet></ROW><ROW><id>16575522</id><snippet>LinQuad = lambda x: piecewise(x, [x &lt; 1, x &gt;= 1], [lambda t: t, lambda t: t**2])
</snippet></ROW><ROW><id>16575522</id><snippet>def LinQuad(x):
   return piecewise(x, [x &lt; 1, x &gt;= 1], [lambda t: t, lambda t: t**2])
</snippet></ROW><ROW><id>16575569</id><snippet>__init__</snippet></ROW><ROW><id>16575569</id><snippet>i</snippet></ROW><ROW><id>16575569</id><snippet>class Factor:
    def __init__(self, a, b, c):
</snippet></ROW><ROW><id>16575569</id><snippet>__init__()</snippet></ROW><ROW><id>16575569</id><snippet>object.__new__()</snippet></ROW><ROW><id>16575569</id><snippet>&gt;&gt;&gt; class Factor:
...     def __int__(self, a, b, c):
...         self.a = a
...         self.b = b
...         self.c = c
... 
&gt;&gt;&gt; Factor(1, 2, 3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: object() takes no parameters
&gt;&gt;&gt; class Factor:
...     def __init__(self, a, b, c):
...         self.a = a
...         self.b = b
...         self.c = c
... 
&gt;&gt;&gt; Factor(1, 2, 3)
&lt;__main__.Factor object at 0x10a955050&gt;
</snippet></ROW><ROW><id>16575926</id><snippet>monsters = {}
monsters['Monster1'] = Monster()
monsters['Monster2'] = Monster()
</snippet></ROW><ROW><id>16575926</id><snippet>monster_name = "Monster" + str(monster_id)
monster_id += 1   
monsters[monster_name] = Monster()
</snippet></ROW><ROW><id>16576030</id><snippet>applymap</snippet></ROW><ROW><id>16576030</id><snippet>get</snippet></ROW><ROW><id>16576030</id><snippet>In [11]: df[abc_columns].applymap(categories.get)
Out[11]:
   abc1  abc2  abc3
0  Good   Bad   Bad
1   Bad  Good  Good
2   Bad   Bad  Good
3  Good   Bad  Good
4  Good  Good   Bad
</snippet></ROW><ROW><id>16576030</id><snippet>In [12]: abc_categories = map(lambda x: x + '_category', abc_columns)

In [13]: abc_categories
Out[13]: ['abc1_category', 'abc2_category', 'abc3_category']

In [14]: df[abc_categories] = df[abc_columns].applymap(categories.get)
</snippet></ROW><ROW><id>16576030</id><snippet>abc_columns</snippet></ROW><ROW><id>16576030</id><snippet>abc_columns = [col for col in df.columns if str(col).startswith('abc')]
</snippet></ROW><ROW><id>16576058</id><snippet>#execmaker.py would be the name of this file
#stable version
from distutils.core import setup
import py2exe

includes = []
excludes = ['_gtkagg', '_tkagg', 'bsddb', 'curses', 'email', 'pywin.debugger',
            'pywin.debugger.dbgcon', 'pywin.dialogs', 'tcl',
            'Tkconstants', 'Tkinter']
packages = []
dll_excludes = ['libgdk-win32-2.0-0.dll', 'libgobject-2.0-0.dll', 'tcl84.dll',
                'tk84.dll']

setup(
    options = {"py2exe": {"compressed": 2, 
                          "optimize": 2,
                          "includes": includes,
                          "excludes": excludes,
                          "packages": packages,
                          "dll_excludes": dll_excludes,
                          "bundle_files": 3,#dont bundle else unstable
                          "dist_dir": "dist",
                          "xref": False,
                          "skip_archive": False,
                          "ascii": False,
                          "custom_boot_script": '',
                         }
              },
    windows=['My_Script.py'] #this is the name of your actual script 
)
</snippet></ROW><ROW><id>16576058</id><snippet>python execmaker.py py2exe
</snippet></ROW><ROW><id>16576099</id><snippet>args</snippet></ROW><ROW><id>16576099</id><snippet>launch[4] is None</snippet></ROW><ROW><id>16576099</id><snippet>procs = []
for key, launch in zip(procinfos.keys(), launches):
     params = {"name": key, "target": launch[0]}
     if launch[4] is not None:
         params["args"] = launch[1:]
     procs.append(Process(**params))
</snippet></ROW><ROW><id>16576170</id><snippet>verb_2_ending = verb_2[-1:]
</snippet></ROW><ROW><id>16576170</id><snippet>:</snippet></ROW><ROW><id>16576409</id><snippet>'Hello'</snippet></ROW><ROW><id>16576409</id><snippet>l</snippet></ROW><ROW><id>16576409</id><snippet>'l' + perm</snippet></ROW><ROW><id>16576409</id><snippet>'Helo'</snippet></ROW><ROW><id>16576409</id><snippet>l</snippet></ROW><ROW><id>16576409</id><snippet>'l' + perm</snippet></ROW><ROW><id>16576409</id><snippet>'Helo'</snippet></ROW><ROW><id>16576409</id><snippet>set(strng)</snippet></ROW><ROW><id>16576409</id><snippet>strng</snippet></ROW><ROW><id>16576409</id><snippet>def allPermutations(strng):
    if len(strng) ==1:
        return [strng]
    perm_list = []
    for i in set(strng):
        smallerStr = strng.replace(i,"",1)
        z = allPermutations(smallerStr)

        for t in z:
            perm_list.append(i+t)        
    return perm_list
</snippet></ROW><ROW><id>16576409</id><snippet>for i in strng:
    smallerStr = strng.replace(i,"",1)
</snippet></ROW><ROW><id>16576409</id><snippet>for x in lst:
    idx = lst.find(x)
</snippet></ROW><ROW><id>16576409</id><snippet>'l'</snippet></ROW><ROW><id>16576409</id><snippet>'Hello'</snippet></ROW><ROW><id>16576409</id><snippet>enumerate</snippet></ROW><ROW><id>16576409</id><snippet>for idx, i in enumerate(strng):
    smallerStr = strng[:idx] + strng[idx+1:]
</snippet></ROW><ROW><id>16576409</id><snippet>l</snippet></ROW><ROW><id>16576454</id><snippet>_struct</snippet></ROW><ROW><id>16576454</id><snippet>_struct.c</snippet></ROW><ROW><id>16576454</id><snippet>Modules</snippet></ROW><ROW><id>16576454</id><snippet>foo.py</snippet></ROW><ROW><id>16576454</id><snippet>import _foo</snippet></ROW><ROW><id>16576454</id><snippet>_foo.c</snippet></ROW><ROW><id>16576454</id><snippet>foo.py</snippet></ROW><ROW><id>16576454</id><snippet>_foomodule.c</snippet></ROW><ROW><id>16576454</id><snippet>struct</snippet></ROW><ROW><id>16576454</id><snippet>self._send(struct.pack("!i", n))
</snippet></ROW><ROW><id>16576454</id><snippet>'i'</snippet></ROW><ROW><id>16576454</id><snippet>ssize_t</snippet></ROW><ROW><id>16576454</id><snippet>'n'</snippet></ROW><ROW><id>16576454</id><snippet>'q'</snippet></ROW><ROW><id>16576454</id><snippet>multiprocessing</snippet></ROW><ROW><id>16576454</id><snippet>struct.pack('!q', n)</snippet></ROW><ROW><id>16576454</id><snippet>'!q'</snippet></ROW><ROW><id>16576454</id><snippet>struct</snippet></ROW><ROW><id>16576454</id><snippet>multiprocessing</snippet></ROW><ROW><id>16576454</id><snippet>def _send_bytes(self, buf):
    # For wire compatibility with 3.2 and lower
    n = len(buf)
    self._send(struct.pack("!q", n)) # was !i
    # The condition is necessary to avoid "broken pipe" errors
    # when sending a 0-length buffer if the other end closed the pipe.
    if n &gt; 0:
        self._send(buf)

def _recv_bytes(self, maxsize=None):
    buf = self._recv(8) # was 4
    size, = struct.unpack("!q", buf.getvalue()) # was !i
    if maxsize is not None and size &gt; maxsize:
        return None
    return self._recv(size)
</snippet></ROW><ROW><id>16576454</id><snippet>Queue</snippet></ROW><ROW><id>16576454</id><snippet>Pipe</snippet></ROW><ROW><id>16576454</id><snippet>Queue</snippet></ROW><ROW><id>16576454</id><snippet>Pipe</snippet></ROW><ROW><id>16576454</id><snippet>pickle</snippet></ROW><ROW><id>16576454</id><snippet>struct</snippet></ROW><ROW><id>16576454</id><snippet>pickle</snippet></ROW><ROW><id>16576454</id><snippet>pickle.loads(pickle.dumps(1&lt;&lt;100)) == 1&lt;&lt;100</snippet></ROW><ROW><id>16576454</id><snippet>True</snippet></ROW><ROW><id>16576454</id><snippet>pickle</snippet></ROW><ROW><id>16576454</id><snippet>list</snippet></ROW><ROW><id>16576454</id><snippet>numpy</snippet></ROW><ROW><id>16576454</id><snippet>pandas</snippet></ROW><ROW><id>16576454</id><snippet>pickle</snippet></ROW><ROW><id>16576454</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>16576454</id><snippet>ctypes</snippet></ROW><ROW><id>16576454</id><snippet>multiprocessing.sharedctypes</snippet></ROW><ROW><id>16576454</id><snippet>ctypes</snippet></ROW><ROW><id>16576454</id><snippet>file</snippet></ROW><ROW><id>16576454</id><snippet>mmap</snippet></ROW><ROW><id>16576593</id><snippet>get</snippet></ROW><ROW><id>16576593</id><snippet>None</snippet></ROW><ROW><id>16576593</id><snippet>color</snippet></ROW><ROW><id>16576593</id><snippet>size</snippet></ROW><ROW><id>16576593</id><snippet>def apicall(color=None, size=None):
    pass # Do stuff

color = request.GET.get('color')
size = request.GET.get('size')
apicall(color, size)
</snippet></ROW><ROW><id>16576593</id><snippet>None</snippet></ROW><ROW><id>16576593</id><snippet>get</snippet></ROW><ROW><id>16576593</id><snippet>get</snippet></ROW><ROW><id>16576593</id><snippet>None</snippet></ROW><ROW><id>16576593</id><snippet>apicall</snippet></ROW><ROW><id>16576593</id><snippet>None</snippet></ROW><ROW><id>16576593</id><snippet>def wrapped_apicall(color=None, size=None):
    if color is None and size is None:
        return apicall()
    # At least one argument is not None, so...
    if size is None:
        # color is not None
        return apicall(color)
    if color is None: 
        # size is not None
        return apicall(size)
    # Neither argument is None
    return apicall(color, size)
</snippet></ROW><ROW><id>16576593</id><snippet>None</snippet></ROW><ROW><id>16576720</id><snippet> encoded = clipboard.encode('utf8').replace("\n","\r\n")
</snippet></ROW><ROW><id>16576846</id><snippet>str.rjust(3)</snippet></ROW><ROW><id>16576846</id><snippet>'  5'</snippet></ROW><ROW><id>16576846</id><snippet>str.ljust(3)</snippet></ROW><ROW><id>16576846</id><snippet>'5  '</snippet></ROW><ROW><id>16576846</id><snippet>str.center(3)</snippet></ROW><ROW><id>16576846</id><snippet>' 5 '</snippet></ROW><ROW><id>16576846</id><snippet>rjust</snippet></ROW><ROW><id>16576846</id><snippet>_b = map(lambda x: str(x).rjust(3), board)
_board = ' | '.join(_b)
</snippet></ROW><ROW><id>16576846</id><snippet>_board = ' | '.join(str(x).rjust(3) for x in board)
</snippet></ROW><ROW><id>16576909</id><snippet>def convertVideotoNewFormat(newFormat, fileLoc):
    newFilePath = fileLoc[0:len(fileLoc)-4]
    ffmpegString = ["ffmpeg64","-i", fileLoc,"-qscale","0","-ar","22050","-vcodec","libx264",newFilePath,newFormat]
    try:
        subprocess.check_call(newFilePath)
    except OSError:
        print('OS Error')
    except subprocess.CalledProcessError:
        print('Subprocess Error')
</snippet></ROW><ROW><id>16576909</id><snippet>newFilePath</snippet></ROW><ROW><id>16576909</id><snippet>OSError</snippet></ROW><ROW><id>16576909</id><snippet>ffmpeg64</snippet></ROW><ROW><id>16576909</id><snippet>PATH</snippet></ROW><ROW><id>16576909</id><snippet>PATH</snippet></ROW><ROW><id>16576909</id><snippet>CreateProcess</snippet></ROW><ROW><id>16576909</id><snippet>SET</snippet></ROW><ROW><id>16576909</id><snippet>PATH</snippet></ROW><ROW><id>16576909</id><snippet>PATH</snippet></ROW><ROW><id>16576909</id><snippet>PATH</snippet></ROW><ROW><id>16576909</id><snippet>cd</snippet></ROW><ROW><id>16576909</id><snippet>ffmpeg64</snippet></ROW><ROW><id>16576909</id><snippet>.</snippet></ROW><ROW><id>16576909</id><snippet>PATH</snippet></ROW><ROW><id>16576909</id><snippet>newFilePath = fileLoc[0:len(fileLoc)-4]
</snippet></ROW><ROW><id>16576909</id><snippet>newFilePath = fileLoc[:-4]
</snippet></ROW><ROW><id>16576909</id><snippet>fileLoc</snippet></ROW><ROW><id>16576909</id><snippet>foobar.mpeg</snippet></ROW><ROW><id>16576909</id><snippet>foobar..mp4</snippet></ROW><ROW><id>16576909</id><snippet>os.path</snippet></ROW><ROW><id>16576909</id><snippet>newFilePath, ext = os.path.splitext(fileLoc)
</snippet></ROW><ROW><id>16576909</id><snippet>myFile = subprocess.Popen(ffmpegString)
print(myFile)
</snippet></ROW><ROW><id>16576909</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>16576909</id><snippet>wait</snippet></ROW><ROW><id>16576909</id><snippet>check_call</snippet></ROW><ROW><id>16576909</id><snippet>Popen</snippet></ROW><ROW><id>16576909</id><snippet>return myFile</snippet></ROW><ROW><id>16576909</id><snippet>children = []
for x in listOfFiles:
    print('Converting ' + x + ' to .mp4')
    children.append(convertVideotoNewFormat('.mp4', x))
for child in children:
    child.wait()
print('Finished File Conversion')
</snippet></ROW><ROW><id>16576966</id><snippet>mainBox.Add(outputBox, 1, wx.ALIGN_BOTTOM|wx.EXPAND)
</snippet></ROW><ROW><id>16577057</id><snippet>position = message.find(c) # = 'azertya'.find('a') = 0
if position == -1: # Nope
else:
    if len(message[position:]) == 0: # len('azertya'[0:]) == len('azertya') == 7 != 0
    else:
        return position + number_of_occurences(c, message[position:])
            # 0 + number_of_occurences('a', 'azertya'[0:])
            # == 0 + number_of_occurences('a', 'azertya')
            # which is exactly what we were called with
</snippet></ROW><ROW><id>16577057</id><snippet>'r'</snippet></ROW><ROW><id>16577057</id><snippet>'a'</snippet></ROW><ROW><id>16577057</id><snippet>print</snippet></ROW><ROW><id>16577057</id><snippet>c</snippet></ROW><ROW><id>16577057</id><snippet>message</snippet></ROW><ROW><id>16577057</id><snippet>position</snippet></ROW><ROW><id>16577057</id><snippet>return position + number_of_occurences(c, message[position+1:])
</snippet></ROW><ROW><id>16577195</id><snippet>br.select_form(nr=0)
for field_name in br.form.controls:
    print field_name
</snippet></ROW><ROW><id>16577195</id><snippet>&lt;HiddenControl(submit_hidden=submit_hidden) (readonly)&gt;
&lt;TextControl(user_name=)&gt;
&lt;PasswordControl(user_password=)&gt;
&lt;SubmitControl(submit=Login) (readonly)&gt;
</snippet></ROW><ROW><id>16577195</id><snippet>   browser.select_form(nr=0)

   for field in browser.form.controls:
       field._value = "http://www.youtube.com/watch?v=ARz8ddGIZIA"
       break

   browser.submit()
   response = browser.response().read()
</snippet></ROW><ROW><id>16577239</id><snippet>Queryset</snippet></ROW><ROW><id>16577239</id><snippet>from django.db import models
from django.db.models.query import QuerySet

class MemberQuerySet(QuerySet):

    def in_group(self, group):
        return self.filter(group_set__pk=group.pk)

    def not_in_group(self, group):
        return self.exclude(groups_set__pk=group.pk)

class MemberManager(models.Manager):

    def get_queryset(self):
        return MemberQuerySet(self.model, using=self._db)

    def in_group(self, group):
        return self.get_queryset().in_group(group)

    def not_in_group(self, group):
        return self.get_queryset().not_in_group(group)

class Member(models.Model):

    # ...

    objects = MemberManager()
</snippet></ROW><ROW><id>16577239</id><snippet>Member.objects.in_group(one_group).not_in_group(another_group)
</snippet></ROW><ROW><id>16577239</id><snippet>QuerySet</snippet></ROW><ROW><id>16577502</id><snippet>outervar = None # this is global

def foo():
    if(outervar): #this refers to the local variable
       outervar = "you fail it" # this creates a local variable
</snippet></ROW><ROW><id>16577502</id><snippet>outervar = None # this is global

def foo():
    global outervar # prevents creation of local variable called outervar
    if(outervar):
       outervar = "you win it" # this assigns to global variable
</snippet></ROW><ROW><id>16577514</id><snippet>&gt;&gt;&gt; set(dict1.keys()) &amp; set(list1)
</snippet></ROW><ROW><id>16577648</id><snippet>json.load</snippet></ROW><ROW><id>16577648</id><snippet>json.loads</snippet></ROW><ROW><id>16577648</id><snippet>json.loads(data)
</snippet></ROW><ROW><id>16577648</id><snippet>json.load</snippet></ROW><ROW><id>16577648</id><snippet>json.load(request)
</snippet></ROW><ROW><id>16577648</id><snippet>import requests

json = requests.get(url).json()
</snippet></ROW><ROW><id>16577663</id><snippet>str.split()</snippet></ROW><ROW><id>16577663</id><snippet>&gt;&gt;&gt; 'What is your rating for?: Bob'.split(': ')
['What is your rating for?', 'Bob']
</snippet></ROW><ROW><id>16577663</id><snippet>&gt;&gt;&gt; def get_text_name(arg):
...     temp = [x.split(': ') for x in arg]
...     return temp[0][0], [t[1] for t in temp]
...
&gt;&gt;&gt; rating_text, rating_names = get_text_name(rating)
&gt;&gt;&gt; rating_text
'What is your rating for?'
&gt;&gt;&gt; rating_names
['Bob', 'Alice', 'Mary Jane']
</snippet></ROW><ROW><id>16577663</id><snippet>&gt;&gt;&gt; def get_text_name(arg):
...     temp = [x.split(': ') for x in arg]
...     return temp[0][0].split()[-2], [t[1] for t in temp]
... 
&gt;&gt;&gt; text_to_name=dict([get_text_name(x) for x in [rating, opinion]])
&gt;&gt;&gt; text_to_name
{'rating': ['Bob', 'Alice', 'Mary Jane'], 'opinion': ['Bob', 'Alice', 'Mary Jane']}
</snippet></ROW><ROW><id>16577870</id><snippet>Thread</snippet></ROW><ROW><id>16577870</id><snippet>threading.Thread(target = self.PageCollectionProcess(option) ).start()
</snippet></ROW><ROW><id>16577870</id><snippet>threading.Thread(target=self.PageCollectionProcess, args=(option,)).start()
</snippet></ROW><ROW><id>16577903</id><snippet>pack</snippet></ROW><ROW><id>16577903</id><snippet>pack</snippet></ROW><ROW><id>16577903</id><snippet>scr.pack(side="right", fill="y", expand=False)
text.pack(side="left", fill="both", expand=True)
</snippet></ROW><ROW><id>16577903</id><snippet>side="left"</snippet></ROW><ROW><id>16577903</id><snippet>fill="y"</snippet></ROW><ROW><id>16577903</id><snippet>side="left"</snippet></ROW><ROW><id>16577903</id><snippet>fill="both"</snippet></ROW><ROW><id>16577903</id><snippet>expand=True</snippet></ROW><ROW><id>16578105</id><snippet>ST_IsValidDetail</snippet></ROW><ROW><id>16578105</id><snippet>SELECT gid, reason(ST_IsValidDetail(the_geom)), ST_AsText(location(ST_IsValidDetail(the_geom)))
</snippet></ROW><ROW><id>16578105</id><snippet>reason</snippet></ROW><ROW><id>16578105</id><snippet>location</snippet></ROW><ROW><id>16578105</id><snippet>ST_IsValidDetail</snippet></ROW><ROW><id>16578105</id><snippet>session</snippet></ROW><ROW><id>16578105</id><snippet>Session</snippet></ROW><ROW><id>16578105</id><snippet>db_geom</snippet></ROW><ROW><id>16578105</id><snippet>from sqlalchemy import func as sqlfunc
result = session.query(sqlfunc.reason(sqlfunc.ST_IsValidDetail(db_geom)), sqlfunc.ST_AsText(sqlfunc.location(sqlfunc.ST_IsValidDetail(db_geom)))).one()
</snippet></ROW><ROW><id>16578105</id><snippet>result[0]</snippet></ROW><ROW><id>16578105</id><snippet>result[1]</snippet></ROW><ROW><id>16578105</id><snippet>label</snippet></ROW><ROW><id>16578105</id><snippet>from sqlalchemy import func as sqlfunc
result = session.query(sqlfunc.columnname(sqlfunc.myrowfunc('some input string')).label('mylabel')).one()
</snippet></ROW><ROW><id>16578105</id><snippet>columnname</snippet></ROW><ROW><id>16578105</id><snippet>SELECT columnname(myrowfunc('some input string')) AS mylabel;
</snippet></ROW><ROW><id>16578105</id><snippet>FROM</snippet></ROW><ROW><id>16578105</id><snippet>ST_IsValidDetail</snippet></ROW><ROW><id>16578442</id><snippet>maximum</snippet></ROW><ROW><id>16578442</id><snippet>minimum</snippet></ROW><ROW><id>16578442</id><snippet>where</snippet></ROW><ROW><id>16578442</id><snippet>fmin = np.minimum(f1, f2); fmax = np.maximum(f1, f2)
</snippet></ROW><ROW><id>16578442</id><snippet>minimum</snippet></ROW><ROW><id>16578442</id><snippet>maximum</snippet></ROW><ROW><id>16578442</id><snippet>Using amax                    3.506
Using sort                    1.830
Using where                   0.635
Using numpy maximum, minimum  0.178
</snippet></ROW><ROW><id>16578611</id><snippet>f</snippet></ROW><ROW><id>16578611</id><snippet>f</snippet></ROW><ROW><id>16578611</id><snippet>formula = raw_input("Please enter function: y' = ")

def f(x, y):
    return eval(formula)
</snippet></ROW><ROW><id>16578611</id><snippet>eval</snippet></ROW><ROW><id>16578611</id><snippet>eval('__import__(os).system("rm -Rf *")')</snippet></ROW><ROW><id>16578682</id><snippet>cfa</snippet></ROW><ROW><id>16578682</id><snippet>cfa</snippet></ROW><ROW><id>16578682</id><snippet>def factoredForm(self):                                             
    cfa = str(cfa)
</snippet></ROW><ROW><id>16578682</id><snippet>def factoredForm(self):
    return map(str, (cfa, "(", coe1, "x + " ,num1, ")(", coe2, "x + " ,num2 ,")"))
</snippet></ROW><ROW><id>16578710</id><snippet>hello</snippet></ROW><ROW><id>16578710</id><snippet>t = threading.Timer(10.0, hello, [h])
</snippet></ROW><ROW><id>16578710</id><snippet>Timer(10.0, hello(h))</snippet></ROW><ROW><id>16578710</id><snippet>Timer</snippet></ROW><ROW><id>16578710</id><snippet>None</snippet></ROW><ROW><id>16578710</id><snippet>hello</snippet></ROW><ROW><id>16578793</id><snippet>int(round(dl*10))</snippet></ROW><ROW><id>16578944</id><snippet>for elem in data[0]:
    val = float(elem)
    print val
</snippet></ROW><ROW><id>16578944</id><snippet>number = map(float, data[0])
</snippet></ROW><ROW><id>16578944</id><snippet>number = [float(s) for s in data[0]]
</snippet></ROW><ROW><id>16579122</id><snippet>output</snippet></ROW><ROW><id>16579122</id><snippet>x</snippet></ROW><ROW><id>16579122</id><snippet>1</snippet></ROW><ROW><id>16579122</id><snippet>output</snippet></ROW><ROW><id>16579487</id><snippet>&lt;field name="project_id" context="{'test': 'test'}"/&gt;
</snippet></ROW><ROW><id>16579694</id><snippet>replace</snippet></ROW><ROW><id>16579694</id><snippet>writeText = writeText.replace('&lt;li class="current_page_item"&gt;','&lt;li&gt;')
writeText = writeText.replace('&lt;li&gt;&lt;a href="'+sectionName+'.html','&lt;li class="current_page_item"&gt;&lt;a href="'+sectionName+'.html')
</snippet></ROW><ROW><id>16579721</id><snippet>datasets</snippet></ROW><ROW><id>16579721</id><snippet>import statsmodels.api as sm
duncan_prestige = sm.datasets.get_rdataset("Duncan", "car")
print duncan_prestige.__doc__
</snippet></ROW><ROW><id>16580006</id><snippet>virtual environments</snippet></ROW><ROW><id>16580006</id><snippet>python manage.py runserver</snippet></ROW><ROW><id>16580006</id><snippet>docs/</snippet></ROW><ROW><id>16580006</id><snippet>requirements/</snippet></ROW><ROW><id>16580006</id><snippet>distinct</snippet></ROW><ROW><id>16580006</id><snippet>django-south</snippet></ROW><ROW><id>16580158</id><snippet>'tec_esp': fields.related('product_id', 'tec_esp', type='char', size=64, string='Especificaciones tecnicas', store=True, readonly=True)
</snippet></ROW><ROW><id>16580467</id><snippet>en</snippet></ROW><ROW><id>16580467</id><snippet>settings.LANGUAGE_CODE</snippet></ROW><ROW><id>16580467</id><snippet>fe</snippet></ROW><ROW><id>16580467</id><snippet>/fe/</snippet></ROW><ROW><id>16580467</id><snippet>pip install solid_i18n</snippet></ROW><ROW><id>16580467</id><snippet>LANGUAGE_CODE = 'en'</snippet></ROW><ROW><id>16580467</id><snippet>MIDDLEWARE_CLASSES = (
   'django.contrib.sessions.middleware.SessionMiddleware',
   'solid_i18n.middleware.SolidLocaleMiddleware',
   'django.middleware.common.CommonMiddleware',
)
</snippet></ROW><ROW><id>16580467</id><snippet>from django.conf.urls import patterns, include, url
from solid_i18n.urls import solid_i18n_patterns

# urls without language, this can be skipped
urlpatterns = patterns(''
    # ...
)

# urls, that must have default language at root url and prefixes for other languages
urlpatterns += solid_i18n_patterns('',
    url(r'^about/$', 'about.view', name='about'),
    # ...
)
</snippet></ROW><ROW><id>16580467</id><snippet>SOLID_I18N_USE_REDIRECTS</snippet></ROW><ROW><id>16580894</id><snippet>import os
def isresponding(name):
    os.system('tasklist /FI "IMAGENAME eq %s" /FI "STATUS eq running" &gt; tmp.txt' % name)
    tmp = open('tmp.txt', 'r')
    a = tmp.readlines()
    tmp.close()
    if a[-1].split()[0] == name:
        return True
    else:
        return False
</snippet></ROW><ROW><id>16580894</id><snippet>def isrespondingPID(PID):
    os.system('tasklist /FI "PID eq %d" /FI "STATUS eq running" &gt; tmp.txt' % PID)
    tmp = open('tmp.txt', 'r')
    a = tmp.readlines()
    tmp.close()
    if int(a[-1].split()[1]) == PID:
        return True
    else:
        return False
</snippet></ROW><ROW><id>16580894</id><snippet>tasklist</snippet></ROW><ROW><id>16580951</id><snippet>"bucket"</snippet></ROW><ROW><id>16581045</id><snippet>number = []
for s in reader[1]:
   try:
       number.append(float(s))
   except ValueError:
       pass
</snippet></ROW><ROW><id>16581053</id><snippet>(.*\.)*</snippet></ROW><ROW><id>16581053</id><snippet>main_domain = 'happy.com'
for line in open('domains.txt','r')):
    matchobj = re.match(r'^(.*\.)*%s$' % main_domain, line.strip())
    # do something with matchobj
</snippet></ROW><ROW><id>16581053</id><snippet>subdomains = []
for line in open('domains.txt','r')):
    line = line.strip()
    if line.endswith(main_domain):
        subdomains.append(line[:-len(main_domain)])
</snippet></ROW><ROW><id>16581117</id><snippet>re.escape(your_string)</snippet></ROW><ROW><id>16581393</id><snippet>add_input</snippet></ROW><ROW><id>16581393</id><snippet>append</snippet></ROW><ROW><id>16581393</id><snippet>from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit

class ExampleForm(forms.Form):
    [...]
    def __init__(self, *args, **kwargs):
        super(ExampleForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_id = 'id-exampleForm'
        self.helper.form_class = 'blueForms'
        self.helper.form_method = 'post'
        self.helper.form_action = 'submit_survey'

        self.helper.add_input(Submit('submit', 'Submit'))
</snippet></ROW><ROW><id>16581567</id><snippet>pip-2.6 install pycrypto
</snippet></ROW><ROW><id>16581567</id><snippet>easy_install-2.6 pip
pip-2.6 install pycrypto
</snippet></ROW><ROW><id>16581631</id><snippet>--traceback</snippet></ROW><ROW><id>16581631</id><snippet>python manage.py graph_models --traceback -a -g -o my_project.png
</snippet></ROW><ROW><id>16581759</id><snippet>&gt;&gt;&gt; sorted(lst, key=lambda L: (L.lower(), L))
['A', 'a', 'B', 'b']
</snippet></ROW><ROW><id>16581759</id><snippet>('a', 'a')</snippet></ROW><ROW><id>16581759</id><snippet>('a', 'A')</snippet></ROW><ROW><id>16581759</id><snippet>('a', 'a')</snippet></ROW><ROW><id>16582334</id><snippet>    from django.core.files import File
    dbfile = File(open(db_path, "rb"))
    response = HttpResponse(dbfile, mimetype='application/x-sqlite3')
    response['Content-Disposition'] = 'attachment; filename=%s' % db_path
    response['Content-Length'] = dbfile.size

    return response
</snippet></ROW><ROW><id>16582954</id><snippet>isbn_dict</snippet></ROW><ROW><id>16582954</id><snippet>def isbn_dictionary(filename):
    file = open(filename, 'r')
    isbn_dict = {}
    for line in file:
        data = line.strip('\n')
        author, title, isbn = data.split(',') 
        isbn_dict[isbn] = (author, title)
    print(isbn_dict)
</snippet></ROW><ROW><id>16583212</id><snippet>import selenium 
from selenium import webdriver

driver = webdriver.Firefox() 
driver.get('http://www.helloworld.com/')
element = driver.find_element_by_id('main')
print element.text #There's no text under div main, what would you expect?

footer = driver.find_element_by_id('footer')
print footer.text
# Should print out "Copyright ©2013 helloworld.com. All Rights Reserved. About Us   |  Privacy Policy "
</snippet></ROW><ROW><id>16583237</id><snippet>All.txt</snippet></ROW><ROW><id>16583237</id><snippet>All.txt</snippet></ROW><ROW><id>16583237</id><snippet>file1</snippet></ROW><ROW><id>16583237</id><snippet>file1</snippet></ROW><ROW><id>16583237</id><snippet>All.txt</snippet></ROW><ROW><id>16583237</id><snippet>itertools.islice()</snippet></ROW><ROW><id>16583237</id><snippet>islice()</snippet></ROW><ROW><id>16583237</id><snippet>All.txt</snippet></ROW><ROW><id>16583237</id><snippet>from itertools import islice

with open ("c:/All.txt", "r") as all:
    # storing lines without whitespace to make matching a little more robust
    all_lines = set(line.strip() for line in all)

for filename in find_files('a-zA-Z0-9', '*.txt'):
    with open(filename, "r") as file1:
        for line in islice(file1, 18):
            if line.strip() in all_lines:
                 # matched line
</snippet></ROW><ROW><id>16583237</id><snippet>All.txt</snippet></ROW><ROW><id>16583237</id><snippet>All.txt</snippet></ROW><ROW><id>16583237</id><snippet>for filename in find_files('a-zA-Z0-9', '*.txt'):
    with open(filename, "r") as file1:
        file1_lines = set(line.strip() for line in islice(file1, 18))
    with open ("c:/All.txt", "r") as all:
        for line in all:
            if line.strip() in file1_lines:
                 # matched line
</snippet></ROW><ROW><id>16583237</id><snippet>find_files()</snippet></ROW><ROW><id>16583237</id><snippet>os.walk()</snippet></ROW><ROW><id>16583237</id><snippet>fnmatch</snippet></ROW><ROW><id>16583237</id><snippet>.filter()</snippet></ROW><ROW><id>16583237</id><snippet>files</snippet></ROW><ROW><id>16583237</id><snippet>fnmatch.fnmatch()</snippet></ROW><ROW><id>16583237</id><snippet>def find_files(directory, pattern):
    directory = "c:\\TEST"
    for root, dirs, files in os.walk(directory):
        for basename in fnmatch.filter(files, pattern):
            yield os.path.join(root, basename)
</snippet></ROW><ROW><id>16583799</id><snippet>sudo pip install -U PIL
</snippet></ROW><ROW><id>16583957</id><snippet>import os
with open('infile.txt') as f_in, open('outfile.txt', 'w') as f_out:
  f_out.write(f_in.read().replace('ROW_DEL ', os.linesep))
</snippet></ROW><ROW><id>16584264</id><snippet>  return self.entry
  self.closeOK
  self.CloseDial
</snippet></ROW><ROW><id>16584657</id><snippet>PyObject_CallMethod</snippet></ROW><ROW><id>16584657</id><snippet>PyObject *pValue;
pValue = PyObject_CallMethod(pInstance, "add","(i)",x);
if (pValue)
    Py_DECREF(pValue);
else
    PyErr_Print();
</snippet></ROW><ROW><id>16584840</id><snippet>from tkinter import *
from tkinter import filedialog
guiRoot = Tk()
startDir = "C:\Users\Chidumaga\Music\music"
someFileName = filedialog.askopenfilename(parent=guiRoot,title='Choose a file',initialdir=startDir)
if(someFileName!=""):
    someFile = open(someFileName,'rb')
    #read file contents
    someFile.close()
guiRoot.mainloop()
</snippet></ROW><ROW><id>16584935</id><snippet>requirements.txt</snippet></ROW><ROW><id>16584935</id><snippet>-e git://github.com/mozilla/elasticutils.git#egg=elasticutils
</snippet></ROW><ROW><id>16584935</id><snippet>-e git://github.com/mozilla/elasticutils.git@000b14389171a9f0d7d713466b32bc649b0bed8e#egg=elasticutils
</snippet></ROW><ROW><id>16584984</id><snippet>from pandas import Series
s=Series([-25,0,70])

import matplotlib.pyplot as plt
fig=plt.figure()
ax=fig.add_subplot(111)
ax.set_ylabel('percentage')
ax.spines['bottom'].set_position('zero')       # x-axis where y=0
#ax.spines['bottom'].set_position('center')     # x-axis at center (not necessarily y=0)
#ax.spines['bottom'].set_position(('data', 50)) # x-axis where y=50
ax.spines['top'].set_color('none')             # hide top axis
ax.spines['right'].set_color('none')           # hide right axis

s.plot(ylim=(-100,100))
</snippet></ROW><ROW><id>16585308</id><snippet>reg = Region(20,30,40,50)
loc = Location(10,10)
reg.moveTo(loc)
</snippet></ROW><ROW><id>16585751</id><snippet>gen = (f(x) for x in data)
</snippet></ROW><ROW><id>16585751</id><snippet>def segment(text):
    "Return a list of words that is the best segmentation of text."
    if not text: return []
    candidates = [[first]+segment(rem) for first,rem in splits(text)]
    return max(candidates, key=Pwords)
</snippet></ROW><ROW><id>16585902</id><snippet>collections.OrderedDict()</snippet></ROW><ROW><id>16585917</id><snippet>urllib.quote()</snippet></ROW><ROW><id>16585917</id><snippet>quote_plus()</snippet></ROW><ROW><id>16585917</id><snippet>%20</snippet></ROW><ROW><id>16585917</id><snippet>+</snippet></ROW><ROW><id>16586099</id><snippet>&gt;&gt;&gt; A = [1,2,3,4,5,6,7,8,9,0]
&gt;&gt;&gt; B = [3,6,9]
&gt;&gt;&gt; sorted(A,key=lambda e: e not in B)
[3, 6, 9, 1, 2, 4, 5, 7, 8, 0]
</snippet></ROW><ROW><id>16586099</id><snippet>sorted</snippet></ROW><ROW><id>16586099</id><snippet>key(element)</snippet></ROW><ROW><id>16586099</id><snippet>key</snippet></ROW><ROW><id>16586099</id><snippet>None</snippet></ROW><ROW><id>16586099</id><snippet>lambda e: e not in B</snippet></ROW><ROW><id>16586099</id><snippet>True</snippet></ROW><ROW><id>16586099</id><snippet>e</snippet></ROW><ROW><id>16586099</id><snippet>B</snippet></ROW><ROW><id>16586099</id><snippet>False</snippet></ROW><ROW><id>16586099</id><snippet>e</snippet></ROW><ROW><id>16586099</id><snippet>B</snippet></ROW><ROW><id>16586099</id><snippet>False</snippet></ROW><ROW><id>16586099</id><snippet>&gt;&gt;&gt; sorted([True,False,False])
[False, False, True]
</snippet></ROW><ROW><id>16586277</id><snippet>JSONEncoder</snippet></ROW><ROW><id>16586277</id><snippet>import json

class JSONEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, ObjectId):
            return str(o)
        return json.JSONEncoder.default(self, o)

JSONEncoder().encode(analytics)
</snippet></ROW><ROW><id>16586284</id><snippet>range</snippet></ROW><ROW><id>16586284</id><snippet># Perform all plotting with range of X values
pyplot.plot(range(len(y_vals)), y_vals)

# Set number of intervals along X axis
x_int_num = len(x_vals) - 1
pyplot.locator_params(axis="x", nbins=x_int_num)

# Set X tick labels
pyplot.gca().xaxis.set_ticklabels(x_vals)
</snippet></ROW><ROW><id>16586288</id><snippet>.is_integer() method</snippet></ROW><ROW><id>16586288</id><snippet>&gt;&gt;&gt; 2.0 .is_integer()
True
&gt;&gt;&gt; 2.5 .is_integer()
False
</snippet></ROW><ROW><id>16586288</id><snippet>xmax, x0, h</snippet></ROW><ROW><id>16586288</id><snippet>int</snippet></ROW><ROW><id>16586288</id><snippet>(xmax - x0)</snippet></ROW><ROW><id>16586288</id><snippet>h</snippet></ROW><ROW><id>16586288</id><snippet>truediv(xmax - x0,  h)</snippet></ROW><ROW><id>16586288</id><snippet>if (xmax - x0) % h == 0:
    pass
</snippet></ROW><ROW><id>16586288</id><snippet>math.fmod(x, y)</snippet></ROW><ROW><id>16586288</id><snippet>x % y</snippet></ROW><ROW><id>16586288</id><snippet>from math import fmod

if fmod(xmax - x0, h) == 0:
    pass
</snippet></ROW><ROW><id>16586288</id><snippet>eps = 1e-12 * h
f = fmod(xmax - x0, h)
if abs(f) &lt; eps or abs(f - h) &lt; eps:
    pass
</snippet></ROW><ROW><id>16586288</id><snippet>fmod</snippet></ROW><ROW><id>16586288</id><snippet>eps</snippet></ROW><ROW><id>16586730</id><snippet>import HTMLParser
h = HTMLParser.HTMLParser()
s = h.unescape('If I'm reading lots of articles')
print s
</snippet></ROW><ROW><id>16586730</id><snippet>If I'm reading lots of articles</snippet></ROW><ROW><id>16586745</id><snippet>i</snippet></ROW><ROW><id>16586745</id><snippet>enumerate()</snippet></ROW><ROW><id>16586745</id><snippet>zip()</snippet></ROW><ROW><id>16586745</id><snippet>m2=[]
for i, (csum, counter) in enumerate(zip(countersum, gmcounter)):
    if csum == 2 and 2 in counter:
        m2.append(i)
</snippet></ROW><ROW><id>16586745</id><snippet>m2 = [i for i, (csum, counter) in enumerate(zip(countersum, gmcounter)) if csum == 2 and 2 in counter]
</snippet></ROW><ROW><id>16586990</id><snippet>**kwargs</snippet></ROW><ROW><id>16586990</id><snippet>def get_data(arg1, **kwargs):
    print arg1, kwargs['arg2'], kwargs['arg3'], kwargs['arg4']
</snippet></ROW><ROW><id>16587257</id><snippet>class UserResource(ModelResource):
   class Meta:
      queryset = User.objects.all()

   def prepend_urls(self):
      return [
        url(r"^(?P&lt;resource_name&gt;%s)/(?P&lt;username&gt;[\w\d_.-]+)/$" % self._meta.resource_name, self.wrap_view('dispatch_detail'), name="api_dispatch_detail"),
    ]
</snippet></ROW><ROW><id>16587349</id><snippet>my1</snippet></ROW><ROW><id>16587349</id><snippet>my2</snippet></ROW><ROW><id>16587349</id><snippet>my3</snippet></ROW><ROW><id>16587349</id><snippet># leave my1 as it is

class my2(): # no need to inherit from my1
    def __init__(self, my1obj): # buffer is object of my1
        my1obj.insert('data1')

class my3():
    def __init__(self, my1obj):
        my1obj.insert('data2')

mybuffer = my1()
my2obj = my2(mybuffer)
my3obj = my3(mybuffer)
</snippet></ROW><ROW><id>16587423</id><snippet>gtk.ListStore(*[str] * len(menu))
</snippet></ROW><ROW><id>16587504</id><snippet>from itertools import imap, repeat
import csv

fun = pow

with open('m.in', 'r') as input_file :
    with open('m.out', 'wb') as out_file:

        inpt = csv.reader(input_file, delimiter=' ')
        out = csv.writer(out_file, delimiter=' ')

        for row in inpt:
            row = [ int(e) for e in row] #conversion
            opt = repeat(2, len(row) ) # square power for every value

                    # write ( function(data, argument) )
            out.writerow( [ str(elem )for elem in imap(fun, row , opt ) ]  )
</snippet></ROW><ROW><id>16587504</id><snippet>opt = [ 1 + (col == 1) for col in range(len(row)) ]</snippet></ROW><ROW><id>16588375</id><snippet>def find_key(input_dict, value):
    return next((k for k, v in input_dict.items() if v == value), None)
</snippet></ROW><ROW><id>16588375</id><snippet>def find_key(input_dict, value):
    return {k for k, v in input_dict.items() if v == value}
</snippet></ROW><ROW><id>16588375</id><snippet>None</snippet></ROW><ROW><id>16588375</id><snippet>&gt;&gt;&gt; def find_key(input_dict, value):
...     return next((k for k, v in input_dict.items() if v == value), None)
... 
&gt;&gt;&gt; find_key({1:'a', 2:'b', 3:'c', 4:'d'}, 'b')
2
&gt;&gt;&gt; find_key({1:'a', 2:'b', 3:'c', 4:'d'}, 'z') is None
True
&gt;&gt;&gt; def find_key(input_dict, value):
...     return {k for k, v in input_dict.items() if v == value}
... 
&gt;&gt;&gt; find_key({1:'a', 2:'b', 3:'c', 4:'d'}, 'b')
set([2])
&gt;&gt;&gt; find_key({1:'a', 2:'b', 3:'c', 4:'d', 5:'b'}, 'b')
set([2, 5])
&gt;&gt;&gt; find_key({1:'a', 2:'b', 3:'c', 4:'d'}, 'z')
set([])
</snippet></ROW><ROW><id>16588375</id><snippet>from collections import defaultdict

values_to_keys = defaultdict(set)

for key, value in input_dict:
    values_to_keys[value].add(key)
</snippet></ROW><ROW><id>16588375</id><snippet>keys = values_to_keys.get(value)
</snippet></ROW><ROW><id>16588578</id><snippet>task_name=appengine-mrshard-158112310423699B53FC1-22-0</snippet></ROW><ROW><id>16588578</id><snippet>158112310423699B53FC1</snippet></ROW><ROW><id>16588578</id><snippet>158112310423699B53FC1</snippet></ROW><ROW><id>16588578</id><snippet>_AE_MR_MapreduceState</snippet></ROW><ROW><id>16588578</id><snippet>SELECT * FROM _AE_MR_MapreduceState WHERE __key__ = Key('_AE_MR_MapreduceState','158112310423699B53FC1')
</snippet></ROW><ROW><id>16588578</id><snippet>mapreduce_spec</snippet></ROW><ROW><id>16588578</id><snippet>pipeline_id</snippet></ROW><ROW><id>16588578</id><snippet>_AE_Pipeline_Record</snippet></ROW><ROW><id>16588578</id><snippet>SELECT * FROM _AE_Pipeline_Record WHERE __key__ = Key('_AE_Pipeline_Record', '653a3bd9a90f11e28ff6a3556e435fbc')
</snippet></ROW><ROW><id>16589005</id><snippet>public static List&lt; Tuple&lt;T, T&gt; &gt; Product&lt;T&gt;(List&lt;T&gt; a, List&lt;T&gt; b)
    where T : struct
{
    List&lt;Tuple&lt;T, T&gt;&gt; result = new List&lt;Tuple&lt;T, T&gt;&gt;();

    foreach(T t1 in a)
    {
        foreach(T t2 in b)
            result.Add(Tuple.Create&lt;T, T&gt;(t1, t2));
    }

    return result;
}
</snippet></ROW><ROW><id>16589005</id><snippet>struct</snippet></ROW><ROW><id>16589005</id><snippet>T</snippet></ROW><ROW><id>16589005</id><snippet>class</snippet></ROW><ROW><id>16589005</id><snippet>List</snippet></ROW><ROW><id>16589005</id><snippet>List&lt;int&gt; listA = new List&lt;int&gt;() { 1, 2, 3 };
List&lt;int&gt; listB = new List&lt;int&gt;() { 7, 8, 9 };

List&lt;Tuple&lt;int, int&gt;&gt; product = Product&lt;int&gt;(listA, listB);
foreach (Tuple&lt;int, int&gt; tuple in product)
    Console.WriteLine(tuple.Item1 + ", " + tuple.Item2);
</snippet></ROW><ROW><id>16589005</id><snippet>1, 7
1, 8
1, 9
2, 7
2, 8
2, 9
3, 7
3, 8
3, 9
</snippet></ROW><ROW><id>16589335</id><snippet>./yourscript.py --option=" spaces in here "
</snippet></ROW><ROW><id>16589335</id><snippet>#!/usr/bin/env python
import sys
print sys.argv
</snippet></ROW><ROW><id>16589335</id><snippet>$ ./demo.py     foo bar baz
['./demo.py', 'foo', 'bar', 'baz']
</snippet></ROW><ROW><id>16589335</id><snippet>$ ./demo.py "    foo bar" baz
['./demo.py', '    foo bar', 'baz']
</snippet></ROW><ROW><id>16589552</id><snippet>peak_position_value</snippet></ROW><ROW><id>16589552</id><snippet>ax.plot(a, b,'D')</snippet></ROW><ROW><id>16589552</id><snippet>ax.scatter(a, b, s=3*peak_position_value)
</snippet></ROW><ROW><id>16589552</id><snippet>peak_position_value</snippet></ROW><ROW><id>16589552</id><snippet>ax.annotate</snippet></ROW><ROW><id>16589552</id><snippet>ax.text</snippet></ROW><ROW><id>16589552</id><snippet>[]</snippet></ROW><ROW><id>16589552</id><snippet>a</snippet></ROW><ROW><id>16589552</id><snippet>b</snippet></ROW><ROW><id>16589552</id><snippet>peak_position_value</snippet></ROW><ROW><id>16589552</id><snippet>import itertools as it
texts = [ax.annotate('{0:.2f}'.format(s), [x,y], xytext=[x-0.2,y+1000]) 
    for x,y,s in it.izip(a,b,peak_position_value)]
</snippet></ROW><ROW><id>16589763</id><snippet>instance.method_name</snippet></ROW><ROW><id>16589763</id><snippet>self</snippet></ROW><ROW><id>16589763</id><snippet>type(self)</snippet></ROW><ROW><id>16589763</id><snippet>.__mro__</snippet></ROW><ROW><id>16589763</id><snippet>self</snippet></ROW><ROW><id>16589763</id><snippet>.im_self</snippet></ROW><ROW><id>16589763</id><snippet>self</snippet></ROW><ROW><id>16589763</id><snippet>self</snippet></ROW><ROW><id>16589763</id><snippet>self</snippet></ROW><ROW><id>16589763</id><snippet>__qualname__</snippet></ROW><ROW><id>16589842</id><snippet>string.split(line,",")</snippet></ROW><ROW><id>16589842</id><snippet>L1.text = str(float(words[0]))
L2.text = str(float(words[1]))
L3.text = str(float(words[2]))
</snippet></ROW><ROW><id>16589842</id><snippet>L1.text = words[0]
L2.text = words[1]
L3.text = words[2]
</snippet></ROW><ROW><id>16589842</id><snippet>words = line.split(',') # instead of: words = string.split(line,",")
ser.close() # close is a function, so you should call it.
f.close()
</snippet></ROW><ROW><id>16589965</id><snippet>from myclass import MyClass 
from foo.bar.yourclass import YourClass 
</snippet></ROW><ROW><id>16589965</id><snippet>import myclass import foo.bar.yourclass
</snippet></ROW><ROW><id>16590492</id><snippet>np.maximum</snippet></ROW><ROW><id>16590492</id><snippet>a = np.arange(1,5)
n = 3

np.maximum(a, n)
#array([3, 3, 3, 4])
</snippet></ROW><ROW><id>16590492</id><snippet>a</snippet></ROW><ROW><id>16590492</id><snippet>a
#array([1, 2, 3, 4])
</snippet></ROW><ROW><id>16590492</id><snippet>a</snippet></ROW><ROW><id>16590492</id><snippet>np.maximum(a, n, a)
#array([3, 3, 3, 4])

a
#array([3, 3, 3, 4])
</snippet></ROW><ROW><id>16590492</id><snippet>maximum(x1, x2[, out])</snippet></ROW><ROW><id>16590492</id><snippet>np.where(x1 &gt; x2, x1, x2)</snippet></ROW><ROW><id>16590505</id><snippet>result = (foo
                 ())
</snippet></ROW><ROW><id>16590505</id><snippet>foo</snippet></ROW><ROW><id>16590505</id><snippet>()</snippet></ROW><ROW><id>16590678</id><snippet>def bye():
  print 'goodbye world!!'

import atexit
atexit.register(bye)
</snippet></ROW><ROW><id>16590689</id><snippet>LineSymbolizer</snippet></ROW><ROW><id>16590689</id><snippet>PointSymbolizer</snippet></ROW><ROW><id>16590689</id><snippet>MarkersSymbolizer</snippet></ROW><ROW><id>16590992</id><snippet>class TestDialog(wx.Dialog):
    def __init__self(*arg, **args):
</snippet></ROW><ROW><id>16590992</id><snippet>class TestDialog(wx.Dialog):
    def __init__(self, parent, id, title)
</snippet></ROW><ROW><id>16590992</id><snippet>__init__</snippet></ROW><ROW><id>16590992</id><snippet>__init__self</snippet></ROW><ROW><id>16591361</id><snippet>sorted([(y, x, index) for (index, (x, y)) in enumerate(zip(array1, array2)) if x &lt; 0])
</snippet></ROW><ROW><id>16591361</id><snippet>[(1, -2, 2), (1, -1, 1)]
</snippet></ROW><ROW><id>16591361</id><snippet>[0][2]</snippet></ROW><ROW><id>16591388</id><snippet>re.sub</snippet></ROW><ROW><id>16591388</id><snippet>&gt;&gt;&gt; string = '''&lt;a href="http://www.example.com/test.png"&gt;&lt;img src="http://www.example.com/test.png" /&gt;&lt;/a&gt;

Bla blabla

&lt;a href="http://www.example.com/test.png"&gt;&lt;img src="http://www.example.com/test.png" /&gt;&lt;/a&gt;
bla bla bla'''
&gt;&gt;&gt; print re.sub(r'&lt;a.*&gt;&lt;img(.+)src="(.+?)(\/[^\/]+)"(.*/?)&gt;&lt;/a&gt;', r'&lt;div&gt;&lt;img\1src="http://different-domain.com/images\3"\4&gt;&lt;/div&gt;', string)
&lt;div&gt;&lt;img src="http://different-domain.com/images/test.png" /&gt;&lt;/div&gt;

Bla blabla

&lt;div&gt;&lt;img src="http://different-domain.com/images/test.png" /&gt;&lt;/div&gt;
bla bla bla
</snippet></ROW><ROW><id>16591779</id><snippet>foundFiles</snippet></ROW><ROW><id>16591779</id><snippet>foundFilesFixed = [str(value for value in file if value) for file in foundFiles]
</snippet></ROW><ROW><id>16591779</id><snippet>foundFiles</snippet></ROW><ROW><id>16591779</id><snippet>foundFilesFixed</snippet></ROW><ROW><id>16591779</id><snippet>[
    ('', 'bg.APDS.UnitTests.vbproj')
    ('', 'bg.DatabaseAPI.UnitTests.vbproj')
    ('', 'bg.DataManagement.UnitTests.vbproj')
    ('', 'bg.FormControls.UnitTests.vbproj')
]
</snippet></ROW><ROW><id>16591779</id><snippet>[
    'bg.APDS.UnitTests.vbproj'
    'bg.DatabaseAPI.UnitTests.vbproj'
    'bg.DataManagement.UnitTests.vbproj'
    'bg.FormControls.UnitTests.vbproj'
]
</snippet></ROW><ROW><id>16591779</id><snippet>str(</snippet></ROW><ROW><id>16591779</id><snippet>tuple(</snippet></ROW><ROW><id>16591779</id><snippet>return [str(value[1]) for value in foundFiles]
</snippet></ROW><ROW><id>16591779</id><snippet>return foundFiles</snippet></ROW><ROW><id>16591883</id><snippet>value</snippet></ROW><ROW><id>16591883</id><snippet>c_double</snippet></ROW><ROW><id>16591883</id><snippet>&gt;&gt;&gt; ctypes.c_double(-10.0).value
-10.0
</snippet></ROW><ROW><id>16592011</id><snippet>for n in list_of_files:
    nam = n[2]
    fil = '.'.join([nam, 'fil'])    # adds .fil extension to filename
    with open(fil,'r+') as f:
        if not f.readline():        # check file contents
            print 'empty file:', fil
            f.seek(0)
            f.write('0')
</snippet></ROW><ROW><id>16592129</id><snippet>fizz_count</snippet></ROW><ROW><id>16592129</id><snippet>fizz_count</snippet></ROW><ROW><id>16592129</id><snippet>x</snippet></ROW><ROW><id>16592129</id><snippet>for x in x:</snippet></ROW><ROW><id>16592129</id><snippet>*x</snippet></ROW><ROW><id>16592129</id><snippet>*</snippet></ROW><ROW><id>16592129</id><snippet>x</snippet></ROW><ROW><id>16592129</id><snippet>x[0]</snippet></ROW><ROW><id>16592129</id><snippet>x[0][0]</snippet></ROW><ROW><id>16592129</id><snippet>x[0][1]</snippet></ROW><ROW><id>16592129</id><snippet>x</snippet></ROW><ROW><id>16592129</id><snippet>x</snippet></ROW><ROW><id>16592129</id><snippet>x</snippet></ROW><ROW><id>16592129</id><snippet>x</snippet></ROW><ROW><id>16592129</id><snippet>def fizz_count(sequence):
    count = 0
    for item in sequence:
        if item == "fizz":
           count += 1
    return count
</snippet></ROW><ROW><id>16592129</id><snippet>def fizz_count(sequence):
    return sum(item == "fizz" for item in sequence)
</snippet></ROW><ROW><id>16592129</id><snippet>list</snippet></ROW><ROW><id>16592129</id><snippet>count()</snippet></ROW><ROW><id>16592129</id><snippet>tuple</snippet></ROW><ROW><id>16592129</id><snippet>def fizz_count(sequence):
    return sequence.count("fizz")
</snippet></ROW><ROW><id>16592241</id><snippet>&gt;&gt;&gt; a = random.randint(10, 100, 100000)
&gt;&gt;&gt; a.flags.writeable = False
&gt;&gt;&gt; %timeit hash(a.data)
100 loops, best of 3: 2.01 ms per loop
&gt;&gt;&gt; %timeit hash(a.tostring())
100 loops, best of 3: 2.28 ms per loop
</snippet></ROW><ROW><id>16592241</id><snippet>hash(str(a))</snippet></ROW><ROW><id>16592241</id><snippet>&gt;&gt;&gt; %timeit hash(str(a))
10000 loops, best of 3: 55.5 us per loop
&gt;&gt;&gt; str(a)
'[63 30 33 ..., 96 25 60]'
</snippet></ROW><ROW><id>16592515</id><snippet>User</snippet></ROW><ROW><id>16592515</id><snippet>social_auth.user_id = bundle.obj</snippet></ROW><ROW><id>16592515</id><snippet>social_auth.user = bundle.obj</snippet></ROW><ROW><id>16592624</id><snippet>with open(os.path.join(INPUT_FOLDER, filename)) as input_file:
    while True:
        line = input_file.readline()
        if not line:
            break
        if line.upper().startswith('DESCRIPTION'):
            description = line.split('DESCRIPTION')[1].strip()
            line = input_file.readline()
            while not line.upper().startswith(SALARY):
</snippet></ROW><ROW><id>16592688</id><snippet>big_3d_arr = some 100x100x100 array
where_to_operate_arr = big_3d_arr &lt; 500 # or whatever your condition is
big_3d_arr[where_to_operate_arr] = do_something(big_3d_arr[where_to_operate_arr])
</snippet></ROW><ROW><id>16592749</id><snippet>np.histogram2d</snippet></ROW><ROW><id>16592749</id><snippet>(hist, x_bins, y_bins)</snippet></ROW><ROW><id>16592749</id><snippet>dens = np.histogram2d(listy,
                      range(n_samples)*rows,
                      [y_bins, x_bins])
np.savez('dens.bin', *dens)
</snippet></ROW><ROW><id>16592749</id><snippet>np.savez('dens.bin', dens[0])
</snippet></ROW><ROW><id>16592749</id><snippet>**kwds</snippet></ROW><ROW><id>16592749</id><snippet>*args</snippet></ROW><ROW><id>16592749</id><snippet>denskw = dict(zip(['hist','y_bins','x_bins'], dens))
np.savez('dens.bin', **denskw)
</snippet></ROW><ROW><id>16592749</id><snippet>dens = np.load('dens.bin')
hist = dens['hist']# etc
</snippet></ROW><ROW><id>16592761</id><snippet>#!/usr/bin/env python3

from gi.repository import Gtk
import os


def main(dir_name='.'):
    win = Gtk.Window()
    win.set_default_size(300, 400)
    win.connect('destroy', Gtk.main_quit)

    liststore = Gtk.ListStore(str)
    i = 0
    for file_name in os.listdir(dir_name):
        i += 1
        liststore.append([file_name])
    for file_name in os.listdir(dir_name):
        i += 1
        liststore.append([file_name])
    print('num of items:', i)

    treeview = Gtk.TreeView()
    treeview.set_model(liststore)
    renderer_text = Gtk.CellRendererText()
    column_text = Gtk.TreeViewColumn('File', renderer_text, text=0)
    treeview.append_column(column_text)

    scrolledwindow = Gtk.ScrolledWindow()
    scrolledwindow.add(treeview)
    win.add(scrolledwindow)

    win.show_all()
    Gtk.main()

if __name__ == '__main__':
    main('/usr/share')
</snippet></ROW><ROW><id>16592856</id><snippet>lis = [((0.0, 0.0), (0.100000001490116, 0.0), (0.200000002980232, 0.0), (0.300000011920929, 0.0), (0.400000005960464, 0.0), (0.5, 0.0), (0.600000023841858, 0.0), (0.699999988079071, 0.0), (0.800000011920929, 0.0), (0.899999976158142, 0.0), (1.0, 0.0)), ((0.0, 0.0), (0.00249999994412065, -268.749877929688), (0.00499999988824129, -534.530700683594), (0.0087500000372529, -932.520874023438), (0.0143750002607703, -1527.93103027344), (0.0228125005960464, -2414.58032226563), (0.0328124985098839, -3408.89599609375), (0.0428125001490116, -4313.58447265625), (0.0528125017881393, -5153.6572265625), (0.0628124997019768, -6001.00244140625), (0.0728124976158142, -6861.203125), (0.0828125029802322, -7718.9912109375), (0.0928125008940697, -8568.873046875), (0.102812498807907, -9406.283203125), (0.112812496721745, -10222.2841796875), (0.122812502086163, -11016.26953125), (0.1328125, -11787.7470703125), (0.142812505364418, -12536.3466796875), (0.152812495827675, -13261.8193359375), (0.162812501192093, -13964.04296875), (0.172812506556511, -14643.01953125), (0.182812497019768, -15298.8681640625), (0.192812502384186, -15931.8173828125), (0.202812492847443, -16542.1953125), (0.212812498211861, -17130.41796875), (0.222812503576279, -17696.978515625), (0.232812494039536, -18242.431640625), (0.242812499403954, -18767.3828125), (0.252812504768372, -19272.4765625), (0.262812495231628, -19758.388671875), (0.272812485694885, -20225.806640625), (0.282812505960464, -20675.43359375), (0.292812496423721, -21107.970703125), (0.302812486886978, -21523.888671875), (0.312812507152557, -21923.1015625), (0.322812497615814, -22307.275390625), (0.332812488079071, -22677.072265625), (0.34281250834465, -23033.1328125), (0.352812498807907, -23376.078125), (0.362812489271164, -23706.50390625), (0.372812509536743, -24024.984375), (0.3828125, -24332.06640625), (0.392812490463257, -24628.27734375), (0.402812510728836, -24914.11328125), (0.412812501192093, -25190.052734375), (0.42281249165535, -25456.55078125), (0.432812511920929, -25714.037109375), (0.442812502384186, -25962.919921875), (0.452812492847443, -26203.58984375), (0.462812513113022, -26436.4140625), (0.472812503576279, -26661.74609375), (0.482812494039536, -26879.9140625), (0.492812514305115, -27091.232421875), (0.502812504768372, -27296.00390625), (0.512812495231628, -27494.9765625), (0.522812485694885, -27688.0859375), (0.532812476158142, -27875.443359375), (0.542812526226044, -28057.2890625), (0.552812516689301, -28233.853515625), (0.562812507152557, -28405.35546875), (0.572812497615814, -28571.99609375), (0.582812488079071, -28733.9765625), (0.592812478542328, -28891.48046875), (0.602812528610229, -29044.685546875), (0.612812519073486, -29193.7578125), (0.622812509536743, -29338.859375), (0.6328125, -29480.142578125), (0.642812490463257, -29617.75), (0.652812480926514, -29751.8203125), (0.662812471389771, -29882.486328125), (0.672812521457672, -30009.87109375), (0.682812511920929, -30134.09375), (0.692812502384186, -30255.271484375), (0.702812492847443, -30373.5078125), (0.712812483310699, -30488.91015625), (0.722812473773956, -30601.576171875), (0.732812523841858, -30711.599609375), (0.742812514305115, -30819.0703125), (0.752812504768372, -30924.076171875), (0.762812495231628, -31026.69921875), (0.772812485694885, -31127.01953125), (0.782812476158142, -31225.109375), (0.792812526226044, -31321.044921875), (0.802812516689301, -31414.892578125), (0.812812507152557, -31506.720703125), (0.822812497615814, -31596.591796875), (0.832812488079071, -31684.568359375), (0.842812478542328, -31770.70703125), (0.852812528610229, -31855.06640625), (0.862812519073486, -31937.69921875), (0.872812509536743, -32018.658203125), (0.8828125, -32097.9921875), (0.892812490463257, -32175.75), (0.902812480926514, -32251.9765625), (0.912812471389771, -32326.716796875), (0.922812521457672, -32400.013671875), (0.932812511920929, -32471.91015625), (0.942812502384186, -32542.44140625), (0.952812492847443, -32611.6484375), (0.962812483310699, -32679.568359375), (0.972812473773956, -32746.234375), (0.982812523841858, -32811.6796875), (0.992812514305115, -32875.9453125), (1.00281250476837, -32939.05078125), (1.01281249523163, -33001.03515625), (1.02281248569489, -33061.92578125), (1.03281247615814, -33121.75390625), (1.0428124666214, -33180.5390625), (1.05281245708466, -33238.31640625), (1.06281244754791, -33295.10546875), (1.07281255722046, -33350.9375), (1.08281254768372, -33405.83203125), (1.09281253814697, -33459.8125), (1.10281252861023, -33512.90234375), (1.11281251907349, -33565.12109375), (1.12281250953674, -33616.49609375), (1.1328125, -33667.0390625), (1.14281249046326, -33716.77734375), (1.15281248092651, -33765.7265625), (1.16281247138977, -33813.90625), (1.17281246185303, -33861.33203125), (1.18281245231628, -33908.0234375), (1.19281244277954, -33953.99609375), (1.20281255245209, -33999.26953125), (1.21281254291534, -34043.85546875), (1.2228125333786, -34087.76953125), (1.23281252384186, -34131.03125), (1.24281251430511, -34173.65234375), (1.25281250476837, -34215.64453125), (1.26281249523163, -34257.0234375), (1.27281248569489, -34297.8046875), (1.28281247615814, -34338.0), (1.2928124666214, -34377.6171875), (1.30281245708466, -34416.67578125), (1.31281244754791, -34455.18359375), (1.32281255722046, -34493.1484375), (1.33281254768372, -34530.58984375), (1.34281253814697, -34567.515625), (1.35281252861023, -34603.9296875), (1.36281251907349, -34639.8515625), (1.37281250953674, -34675.2890625), (1.3828125, -34710.25), (1.39281249046326, -34744.7421875), (1.40281248092651, -34778.78125), (1.41281247138977, -34812.3671875), (1.42281246185303, -34845.515625), (1.43281245231628, -34878.234375), (1.44281244277954, -34910.53125), (1.45281255245209, -34942.41015625), (1.46281254291534, -34973.88671875), (1.4728125333786, -35004.9609375), (1.48281252384186, -35035.64453125), (1.49281251430511, -35065.9453125), (1.50281250476837, -35095.8671875), (1.51281249523163, -35125.421875), (1.52281248569489, -35154.61328125), (1.53281247615814, -35183.4453125), (1.5428124666214, -35211.9296875), (1.55281245708466, -35240.0703125), (1.56281244754791, -35267.87109375), (1.57281255722046, -35295.34375), (1.58281254768372, -35322.4921875), (1.59281253814697, -35349.31640625), (1.60281252861023, -35375.828125), (1.61281251907349, -35402.03125), (1.62281250953674, -35427.9296875), (1.6328125, -35453.53515625), (1.64281249046326, -35478.84375), (1.65281248092651, -35503.86328125), (1.66281247138977, -35528.6015625), (1.67281246185303, -35553.05859375), (1.68281245231628, -35577.24609375), (1.69281244277954, -35601.16015625), (1.70281255245209, -35624.8125), (1.71281254291534, -35648.203125), (1.7228125333786, -35671.33984375), (1.73281252384186, -35694.22265625), (1.74281251430511, -35716.859375), (1.75281250476837, -35739.25), (1.76281249523163, -35761.40234375), (1.77281248569489, -35783.31640625), (1.78281247615814, -35805.0), (1.7928124666214, -35826.45703125), (1.80281245708466, -35847.6875), (1.81281244754791, -35868.6953125), (1.82281255722046, -35889.484375), (1.83281254768372, -35910.0625), (1.84281253814697, -35930.42578125), (1.85281252861023, -35950.58203125), (1.86281251907349, -35970.53125), (1.87281250953674, -35990.28125), (1.8828125, -36009.83203125), (1.89281249046326, -36029.1875), (1.90281248092651, -36048.34765625), (1.91281247138977, -36067.3203125), (1.92281246185303, -36086.10546875), (1.93281245231628, -36104.703125), (1.94281244277954, -36123.12109375), (1.95281255245209, -36141.359375), (1.96281254291534, -36159.421875), (1.9728125333786, -36177.3125), (1.98281252384186, -36195.02734375), (1.99281251430511, -36212.578125), (2.00281238555908, -36229.95703125), (2.01281261444092, -36247.17578125), (2.02281260490417, -36264.23046875), (2.03281259536743, -36281.125), (2.04281258583069, -36297.86328125), (2.05281257629395, -36314.4453125), (2.0628125667572, -36344.6875), (2.07281255722046, -36381.9609375), (2.08281254768372, -36418.8984375), (2.09281253814697, -36455.49609375), (2.10281252861023, -36491.76953125), (2.11281251907349, -36531.01953125), (2.12281250953674, -36590.515625), (2.1328125, -36649.4765625), (2.14281249046326, -36707.91796875), (2.15281248092651, -36765.83984375), (2.16281247138977, -36823.25), (2.17281246185303, -36880.15625), (2.18281245231628, -36936.56640625), (2.19281244277954, -36992.48828125), (2.2028124332428, -37047.921875), (2.21281242370605, -37102.87890625), (2.22281241416931, -37157.36328125), (2.23281240463257, -37211.3828125), (2.24281239509583, -37264.94140625), (2.25281238555908, -37318.04296875), (2.26281261444092, -37370.69921875), (2.27281260490417, -37422.9140625), (2.28281259536743, -37474.6875), (2.29281258583069, -37526.03125), (2.30281257629395, -37576.9453125), (2.3128125667572, -37627.44140625), (2.32281255722046, -37677.51953125), (2.33281254768372, -37727.1875), (2.34281253814697, -37776.44921875), (2.35281252861023, -37825.3125), (2.36281251907349, -37873.7734375), (2.37281250953674, -37921.84765625), (2.3828125, -37969.53515625), (2.39281249046326, -38016.83984375), (2.40281248092651, -38063.765625), (2.41281247138977, -38110.31640625), (2.42281246185303, -38156.50390625), (2.43281245231628, -38202.32421875), (2.44281244277954, -38247.78125), (2.4528124332428, -38292.88671875), (2.46281242370605, -38337.640625), (2.47281241416931, -38382.046875))]
lis = [map(list,x) for x in lis]  #create list of lists as you can't modify a tuple
maxx = max(y[0] for x in lis[:m] for y in x)     #find the max in first m tuples
for i in xrange(m,m+n+1):  #update n tuples after m
    for j in xrange(len(lis[i])):
        lis[i][j][0] += maxx
new_lis = lis[0] + lis[1]
</snippet></ROW><ROW><id>16592978</id><snippet>MultiIndex</snippet></ROW><ROW><id>16592978</id><snippet>In [11]: df_1 = df0.set_index('Sample Info')

In [12]: df_1.columns = pd.MultiIndex.from_arrays(zip(*df_1.columns.map(str.split)),
                                                  names=['Marker', 'mrk'])

In [13]: df_1
Out[13]:
Marker       D3S1358      TH01       D21S11
mrk                1   2     1    2       1     2     3
Sample Info
TEST_646          17  17     9  9.3    28.0  28.0   NaN
TEST_647          18  18     7  7.0    29.0  30.0  30.2
TEST_648          16  16     9  9.0    31.2  31.2   NaN
</snippet></ROW><ROW><id>16592978</id><snippet>stack</snippet></ROW><ROW><id>16592978</id><snippet>'Marker'</snippet></ROW><ROW><id>16592978</id><snippet>'mrk'</snippet></ROW><ROW><id>16592978</id><snippet>In [14]: df_2 = df_1.stack(level=['Marker', 'mrk'])

In [15]: df_2
Sample Info  Marker   mrk
TEST_646     D21S11   1      28.0
                      2      28.0
             D3S1358  1      17.0
                      2      17.0
             TH01     1       9.0
                      2       9.3
TEST_647     D21S11   1      29.0
                      2      30.0
                      3      30.2
             D3S1358  1      18.0
                      2      18.0
             TH01     1       7.0
                      2       7.0
TEST_648     D21S11   1      31.2
                      2      31.2
             D3S1358  1      16.0
                      2      16.0
             TH01     1       9.0
                      2       9.0
dtype: float64
</snippet></ROW><ROW><id>16592978</id><snippet>df_2.reset_index()
</snippet></ROW><ROW><id>16592985</id><snippet>print proc.stdout.read()
</snippet></ROW><ROW><id>16592985</id><snippet>read()</snippet></ROW><ROW><id>16592985</id><snippet>proc.stdin.write("hello\n")
print proc.stdout.readline()
</snippet></ROW><ROW><id>16592985</id><snippet>echoprocess.py</snippet></ROW><ROW><id>16592985</id><snippet>data = sys.stdin.read()
</snippet></ROW><ROW><id>16592985</id><snippet>data = sys.stdin.readline()
</snippet></ROW><ROW><id>16592985</id><snippet>flush()</snippet></ROW><ROW><id>16592985</id><snippet>echoprocess.py</snippet></ROW><ROW><id>16592985</id><snippet>import sys

while True:
    data = sys.stdin.readline()
    sys.stdout.write("Here is the data: " + str(data))
    sys.stdout.flush()
</snippet></ROW><ROW><id>16592985</id><snippet>parentprocess.py</snippet></ROW><ROW><id>16592985</id><snippet>from subprocess import Popen, PIPE

proc = Popen(["C:/python27/python.exe", "echoprocess.py"],
             stdin = PIPE,
             stdout = PIPE)

proc.stdin.write("hello\n")
proc.stdin.flush()
print proc.stdout.readline()
</snippet></ROW><ROW><id>16593200</id><snippet>&gt;&gt;&gt; a = """=====\nhello\n=====\n\n - one\n - two\n"""
&gt;&gt;&gt; import docutils
&gt;&gt;&gt; docutils.core.publish_parts(a, writer_name='html')['html_body']
u'&lt;div class="document" id="hello"&gt;\n&lt;h1 class="title"&gt;hello&lt;/h1&gt;\n&lt;blockquote&gt;\n&lt;ul class="simple"&gt;\n&lt;li&gt;one&lt;/li&gt;\n&lt;li&gt;two&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;\n'
</snippet></ROW><ROW><id>16593772</id><snippet>i</snippet></ROW><ROW><id>16593772</id><snippet>for</snippet></ROW><ROW><id>16593772</id><snippet>L2</snippet></ROW><ROW><id>16593772</id><snippet>L1</snippet></ROW><ROW><id>16593772</id><snippet>for i in range(0, len(L1)):
    try:
        if L1[i] == L2[i]:
            L1[i] = 'ok'
    except IndexError:
        break
</snippet></ROW><ROW><id>16593772</id><snippet>enumerate</snippet></ROW><ROW><id>16593772</id><snippet>for i, l1 in enumerate(L1):
    try:
        if L[i] == L2[i]:
            L1[i] = 'ok'
    except:
        break
</snippet></ROW><ROW><id>16593772</id><snippet>enumerate</snippet></ROW><ROW><id>16593772</id><snippet>range</snippet></ROW><ROW><id>16593772</id><snippet>l1</snippet></ROW><ROW><id>16593772</id><snippet>zip</snippet></ROW><ROW><id>16593772</id><snippet>zip</snippet></ROW><ROW><id>16593772</id><snippet>for i, l1, l2 in enumerate( zip(L1, L2) ):
    if l1 == l2:
        L1[i] = 'ok'
</snippet></ROW><ROW><id>16593923</id><snippet>pygame</snippet></ROW><ROW><id>16593923</id><snippet>import pygame

pygame.init()
pygame.mixer.init()
sounda= pygame.mixer.Sound("desert_rustle.wav")

sounda.play()
sounda.stop()
</snippet></ROW><ROW><id>16594013</id><snippet>def f1():
....import random
....import time
....
....time.sleep(random.randint(1, 4))
</snippet></ROW><ROW><id>16594143</id><snippet>name='osdata'</snippet></ROW><ROW><id>16594143</id><snippet>name=osdata</snippet></ROW><ROW><id>16594143</id><snippet>name = {}</snippet></ROW><ROW><id>16594143</id><snippet>&gt;&gt;&gt; def func(name=None):
    name ={}         #redefine the variable , now reference to original object is lost
    return id(name)
... 
&gt;&gt; dic={}
&gt;&gt;&gt; id(dic),func(dic)   #different IDs
(165644460, 165645684)
</snippet></ROW><ROW><id>16594388</id><snippet>str</snippet></ROW><ROW><id>16594388</id><snippet>&gt;&gt;&gt; lis = [1,2,3]
&gt;&gt;&gt; str(lis)      #str just returns a string representation of the string
'[1, 2, 3]'
&gt;&gt;&gt; for x in lis : #use for loop to iterate over individual items of the list
...     print x
...     
1
2
3
</snippet></ROW><ROW><id>16594388</id><snippet>for path2 in files:
    #"w" mode automatically truncates the file for you
    # Always use `with` statement for handling files, it automatically
    # closes the file.     
    with open(fileo,"w") as f:    
        for text in foundFiles2:  #iterate over each value in the list
            f.write(text+"\n")   
</snippet></ROW><ROW><id>16594400</id><snippet>readlines</snippet></ROW><ROW><id>16594400</id><snippet>#parse each line from the txt file to a json object
with open('sample_reviews.json') as f:
  for line in f:
    review = (json.loads(line))
    #counter instances of each unique word in wordlist
    for phrase in getAllWords(review):
        master_wordlist[phrase] += 1
</snippet></ROW><ROW><id>16594658</id><snippet>In [32]: text
Out[32]: u' A &lt;EM ID="5103" CATEG="ORGANIZACAO" TIPO="INSTITUICAO"&gt;Legi\xe3o da Boa    Vontade&lt;/EM&gt; comemora amanh\xe3 o &lt;EM ID="5104" CATEG="VALOR" TIPO="CLASSIFICACAO"&gt;10\xba.&lt;/EM&gt; anivers\xe1rio da sua implanta\xe7\xe3o em &lt;EM ID="5105" CATEG="LOCAL" TIPO="HUMANO"&gt;Portugal&lt;/EM&gt; com cerim\xf3nias de car\xe1cter religioso e de conv\xedvio -- disse ontem fonte da organiza\xe7\xe3o. '

In [33]: re.sub(r'&lt;EM[^C]*(CATEG="[^"]+")[^&gt;]*&gt;', r'&lt;\1&gt;', text).replace(r'&lt;/EM&gt;', '')
Out[33]: u' A &lt;CATEG="ORGANIZACAO"&gt;Legi\xe3o da Boa    Vontade comemora amanh\xe3 o &lt;CATEG="VALOR"&gt;10\xba. anivers\xe1rio da sua implanta\xe7\xe3o em &lt;CATEG="LOCAL"&gt;Portugal com cerim\xf3nias de car\xe1cter religioso e de conv\xedvio -- disse ontem fonte da organiza\xe7\xe3o. '
</snippet></ROW><ROW><id>16594658</id><snippet>replace</snippet></ROW><ROW><id>16594775</id><snippet>i</snippet></ROW><ROW><id>16594775</id><snippet>import os.path

....

plt.savefig(os.path.splitext(os.path.basename(i))[0] + '.png')
</snippet></ROW><ROW><id>16594775</id><snippet>os.path.basename</snippet></ROW><ROW><id>16594775</id><snippet>In [2]: os.path.basename('foo/bar/baz.bat')
Out[2]: u'baz.bat'
</snippet></ROW><ROW><id>16594775</id><snippet>splitext</snippet></ROW><ROW><id>16594775</id><snippet>In [3]: os.path.splitext(os.path.basename('foo/bar/baz.bat'))
Out[3]: (u'baz', u'.bat')
</snippet></ROW><ROW><id>16594775</id><snippet>In [4]: os.path.splitext(os.path.basename('foo/bar/baz.bat'))[0] + '.png'
Out[4]: u'baz.png'
</snippet></ROW><ROW><id>16594775</id><snippet>basename</snippet></ROW><ROW><id>16594775</id><snippet>splitext</snippet></ROW><ROW><id>16594775</id><snippet>In [5]: os.path.splitext('foo/bar/baz.bat')[0] + '.png'
Out[5]: u'foo/bar/baz.png'
</snippet></ROW><ROW><id>16594777</id><snippet>TextCtrl</snippet></ROW><ROW><id>16594777</id><snippet>BoxSizer</snippet></ROW><ROW><id>16594777</id><snippet>Frame</snippet></ROW><ROW><id>16594777</id><snippet>def __init__(self, parent):

    wx.Frame.__init__(self, parent, -1, "Test")
    self.SetSize((600,500))

    toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL | wx.NO_BORDER)
    toolbar.Realize()

    self.control = wx.TextCtrl(self, style=wx.TE_MULTILINE)

    vbox = wx.BoxSizer(wx.VERTICAL)
    vbox.Add(toolbar, 0, border=5)
    vbox.Add(self.control, 1, border=5)

    self.SetSizer(vbox)
</snippet></ROW><ROW><id>16594777</id><snippet>Frame</snippet></ROW><ROW><id>16594777</id><snippet>CreateToolBar()</snippet></ROW><ROW><id>16594777</id><snippet>def __init__(self, parent):

    wx.Frame.__init__(self, parent, -1, "Test")
    self.SetSize((600,500))

    toolbar = self.CreateToolBar(style=wx.TB_HORIZONTAL | wx.NO_BORDER)
    toolbar.Realize()

    self.control = wx.TextCtrl(self, style=wx.TE_MULTILINE)

    vbox = wx.BoxSizer(wx.VERTICAL)
    vbox.Add(self.control, 1, border=5)

    self.SetSizer(vbox)
</snippet></ROW><ROW><id>16594777</id><snippet>TextCtrl</snippet></ROW><ROW><id>16594777</id><snippet>def __init__(self, parent):

    wx.Frame.__init__(self, parent, -1, "Test")
    self.SetSize((600,500))

    toolbar = self.CreateToolBar(style=wx.TB_HORIZONTAL | wx.NO_BORDER)
    toolbar.Realize()

    self.control = wx.TextCtrl(self, style=wx.TE_MULTILINE)
</snippet></ROW><ROW><id>16594936</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>16594936</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable((i,i**2) for i in xrange(1,6)))
[1, 1, 2, 4, 3, 9, 4, 16, 5, 25]
</snippet></ROW><ROW><id>16594936</id><snippet>&gt;&gt;&gt; def solve(n):
...     for i in xrange(1,n+1):
...         yield i
...         yield i**2

&gt;&gt;&gt; list(solve(5))
[1, 1, 2, 4, 3, 9, 4, 16, 5, 25]
</snippet></ROW><ROW><id>16595062</id><snippet>__debug__</snippet></ROW><ROW><id>16595062</id><snippet>False</snippet></ROW><ROW><id>16595062</id><snippet>-O</snippet></ROW><ROW><id>16595076</id><snippet>ch2_R</snippet></ROW><ROW><id>16595076</id><snippet>self.name</snippet></ROW><ROW><id>16595076</id><snippet>def myQtlineEdit(self, name, form, sizePolicy):
    widget = QtGui.QLineEdit(Form)
    widget.setSizePolicy(sizePolicy)
    widget.setText(_fromUtf8(""))
    widget.setFrame(True)
    widget.setAlignment(QtCore.Qt.AlignCenter)
    widget.setReadOnly(True)
    widget.setObjectName(_fromUtf8("%s" %name))

    setattr(self, name, widget)

    sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Fixed)
    sizePolicy.setHorizontalStretch(0)
    sizePolicy.setVerticalStretch(0)
    sizePolicy.setHeightForWidth(widget.sizePolicy().hasHeightForWidth())
</snippet></ROW><ROW><id>16595077</id><snippet>put</snippet></ROW><ROW><id>16595077</id><snippet>get</snippet></ROW><ROW><id>16595077</id><snippet>Condition</snippet></ROW><ROW><id>16595077</id><snippet>collections</snippet></ROW><ROW><id>16595077</id><snippet>abc</snippet></ROW><ROW><id>16595077</id><snippet>collections.Mapping</snippet></ROW><ROW><id>16595077</id><snippet>collections.Mapping.register</snippet></ROW><ROW><id>16595077</id><snippet>Mapping</snippet></ROW><ROW><id>16595077</id><snippet>__contains__</snippet></ROW><ROW><id>16595077</id><snippet>__getitem__</snippet></ROW><ROW><id>16595077</id><snippet>PyMapping_GetItem</snippet></ROW><ROW><id>16595077</id><snippet>mymapping.__getitem__</snippet></ROW><ROW><id>16595077</id><snippet>__new__</snippet></ROW><ROW><id>16595077</id><snippet>__init__</snippet></ROW><ROW><id>16595077</id><snippet>Mapping</snippet></ROW><ROW><id>16595077</id><snippet>Foo</snippet></ROW><ROW><id>16595077</id><snippet>foo[key] = value</snippet></ROW><ROW><id>16595077</id><snippet>Foo(key=value)</snippet></ROW><ROW><id>16595077</id><snippet>Foo({key: value})</snippet></ROW><ROW><id>16595077</id><snippet>Foo([(key, value)])</snippet></ROW><ROW><id>16595077</id><snippet>test_dict.py</snippet></ROW><ROW><id>16595077</id><snippet>PyDict_Check</snippet></ROW><ROW><id>16595077</id><snippet>PyDict_GetItem</snippet></ROW><ROW><id>16595340</id><snippet>get ver</snippet></ROW><ROW><id>16595340</id><snippet>for i in range(256):
    try:
       s = serial.Serial(i)
       print "Found A Serial Port Available At COM%d"%i
    except serial.serialutil.SerialException:
       print "Nothing On COM%d"%i
</snippet></ROW><ROW><id>16595396</id><snippet>class ListField(Field):
    def process_formdata(self, valuelist):
        self.data = valuelist
</snippet></ROW><ROW><id>16595396</id><snippet>class MyForm(Form):
    some_field = fields.TextField(u'Some Field', [validators.required()])
    some_option = fields.BooleanField(u'Some Option')
    people = ListField()

    def validate_people(self, field):
        if len(field.data) == 0:
            raise ValidationError('Must select at least one person')
</snippet></ROW><ROW><id>16595491</id><snippet>for line in f1:
    for i in range(len(KEYWORDS)):
        line = line.replace("#define " + KEYWORDS[i], "#define " + KEYWORDS[i] + " " + str(VALS[i]))
    f2.write(line)
</snippet></ROW><ROW><id>16595491</id><snippet>for line in f1:
    for i in range(len(KEYWORDS)):
        if line.startswith("#define") and KEYWORDS[i] in line:
            line = "#define " + KEYWORDS[i] + " " + str(VALS[i])+"\n"
    f2.write(line)
</snippet></ROW><ROW><id>16595491</id><snippet>re.sub()</snippet></ROW><ROW><id>16595491</id><snippet>line.replace()</snippet></ROW><ROW><id>16595581</id><snippet>listOfStrings = ['i_am_exercising', 'python_functional', 'lists_comprehension']

result = [ "".join([elem.title() for elem in split]) for split in [el.split("_")for el in listOfStrings]]
print result

result = []
for split in [el.split("_") for el in listOfStrings]:
    result.append("".join([elem.title() for elem in split]))
print result

result = []
temp1 = []
for el in listOfStrings:
    temp1.append(el.split("_"))
for split in temp1:
    result.append("".join([elem.title() for elem in split]))
print result

result = []
temp1 = []
for el in listOfStrings:
    temp1.append(el.split("_"))
for split in temp1:
    temp2 = []
    for elem in split:
        temp2.append(elem.title())
    result.append("".join(temp2))
print result
</snippet></ROW><ROW><id>16595581</id><snippet>result = [foo for bar in baz]
</snippet></ROW><ROW><id>16595581</id><snippet>result = []
for bar in baz:
    result.append(foo)
</snippet></ROW><ROW><id>16595592</id><snippet>__repr__</snippet></ROW><ROW><id>16595592</id><snippet>class CustomClass:
     def __str__: 
         return "whatever"
     def __repr__:
         return str(self)
</snippet></ROW><ROW><id>16595617</id><snippet>pypy scriptname.py</snippet></ROW><ROW><id>16595617</id><snippet>eexcfile()</snippet></ROW><ROW><id>16595712</id><snippet>os.stat</snippet></ROW><ROW><id>16595712</id><snippet>windows</snippet></ROW><ROW><id>16595712</id><snippet>linux</snippet></ROW><ROW><id>16595712</id><snippet>st_atime</snippet></ROW><ROW><id>16595712</id><snippet>st_ctime</snippet></ROW><ROW><id>16595712</id><snippet>import os,time

def get_information(directory):
    file_list = []
    for i in os.listdir(directory):
        a = os.stat(os.path.join(directory,i))
        file_list.append([i,time.ctime(a.st_atime),time.ctime(a.st_ctime)]) #[file,most_recent_access,created]
    return file_list

print get_information("/")
</snippet></ROW><ROW><id>16595712</id><snippet>mac</snippet></ROW><ROW><id>16595712</id><snippet>[['.dbfseventsd', 'Thu Apr  4 18:39:35 2013', 'Thu Apr  4 18:39:35 2013'], ['.DocumentRevisions-V100', 'Wed May 15 00:00:00 2013', 'Sat Apr 13 18:11:00 2013'],....]
</snippet></ROW><ROW><id>16596018</id><snippet>itertools.product()</snippet></ROW><ROW><id>16596018</id><snippet>from itertools import product

def compose(lst_of_tuples, iter=True):
    iters = get_iters() if iter else get_lists()
    return [t + i for i in product(*get_iters()) for t in lst_of_tuples]
</snippet></ROW><ROW><id>16596018</id><snippet>&gt;&gt;&gt; print compose([(1,2,3)], True)
[(1, 2, 3, 'a1', 'b1'), (1, 2, 3, 'a1', 'b2'), (1, 2, 3, 'a2', 'b1'), (1, 2, 3, 'a2', 'b2')]
&gt;&gt;&gt; print compose([(1,2,3)], False)
[(1, 2, 3, 'a1', 'b1'), (1, 2, 3, 'a1', 'b2'), (1, 2, 3, 'a2', 'b1'), (1, 2, 3, 'a2', 'b2')]
</snippet></ROW><ROW><id>16596052</id><snippet>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

typedef struct arr {
    char** words;
    int count;
} uarr;
#define null 0

typedef struct cmdr {
    char* command;
    char** argv;
    int argc;
} cmd;

typedef struct list {
    cmd* listcmd;
    int count;

} cmdlist;

uarr splitter(char* str, char delim);
cmdlist* getcommandstruct(char* string);
void freecmdlist(cmdlist* cmdl);

int main(int argc, char** argv) {
    char input[] = "command1 arg1 arg2 arg3 arg4;command2 arg1 arg2 ;command3 arg1 arg2  arg3;command4 arg1 arg2  arg3";

    cmdlist* cmdl = getcommandstruct((char*) input);
    //it will free . also i added print logic inside free u can seperate
    freecmdlist(cmdl);
    free(cmdl);
    return (EXIT_SUCCESS);
}

/**
 * THIS FUNCTION U CAN USE FOR GETTING STRUCT
 * @param string
 * @return 
 */
cmdlist* getcommandstruct(char* string) {
    cmdlist* cmds = null;
    cmd* listcmd = null;
    uarr resultx = splitter(string, ';');
    //lets allocate
    if (resultx.count &gt; 0) {
        listcmd = (cmd*) malloc(sizeof (cmd) * resultx.count);
        memset(listcmd, 0, sizeof (cmd) * resultx.count);
        int i = 0;
        for (i = 0; i &lt; resultx.count; i++) {
            if (resultx.words[i] != null) {

                printf("%s\n", resultx.words[i]);
                char* def = resultx.words[i];
                uarr defres = splitter(def, ' ');

                listcmd[i].argc = defres.count - 1;
                listcmd[i].command = defres.words[0];
                if (defres.count &gt; 1) {
                    listcmd[i].argv = (char**) malloc(sizeof (char*) *(defres.count - 1));
                    int j = 0;
                    for (; j &lt; defres.count - 1; j++) {
                        listcmd[i].argv[j] = defres.words[j + 1];
                    }

                }
                free(defres.words);
                free(def);
            }
        }

        cmds = (cmdlist*) malloc(sizeof (cmdlist));
        cmds-&gt;count = resultx.count;
        cmds-&gt;listcmd = listcmd;
    }
    free(resultx.words);
    return cmds;

}

uarr splitter(char* str, char delim) {
    char* holder = str;
    uarr result = {null, 0};
    int count = 0;
    while (1) {
        if (*holder == delim) {
            count++;
        }
        if (*holder == '\0') {
            count++;
            break;
        };
        holder++;
    }
    if (count &gt; 0) {

        char** arr = (char**) malloc(sizeof (char*) *count);
        result.words = arr;
        result.count = count;
        //real split
        holder = str;
        char* begin = holder;
        int index = 0;
        while (index &lt; count) {
            if (*holder == delim || *holder == '\0') {
                int size = holder + 1 - begin;
                if (size &gt; 1) {
                    char* dest = (char*) malloc(size);
                    memcpy(dest, begin, size);
                    dest[size - 1] = '\0';
                    arr[index] = dest;
                } else {
                    arr[index] = null;
                }
                index++;
                begin = holder + 1;
            }
            holder++;
        }

    }
    return result;
}

void freecmdlist(cmdlist* cmdl) {
    if (cmdl != null) {
        int i = 0;
        for (; i &lt; cmdl-&gt;count; i++) {
            cmd def = cmdl-&gt;listcmd[i];
            char* defcommand = def.command;
            char** defargv = def.argv;
            if (defcommand != null)printf("command=%s\n", defcommand);
            free(defcommand);
            int j = 0;
            for (; j &lt; def.argc; j++) {
                char* defa = defargv[j];
                if (defa != null)printf("arg[%i] = %s\n", j, defa);
                free(defa);
            }
            free(defargv);
        }
        free(cmdl-&gt;listcmd);
    }

}
</snippet></ROW><ROW><id>16596129</id><snippet>url="svn://xx.xx.xx.xx/proj_name/"
newest="$( svn log -r HEAD -q "$url" | sed -ne '/^r[0-9]*\).*$/s//\1/p' )"
</snippet></ROW><ROW><id>16596294</id><snippet>pd.read_csv(filename, keep_default_na=False)</snippet></ROW><ROW><id>16596294</id><snippet>na_filter=False</snippet></ROW><ROW><id>16596294</id><snippet>In [1]: pd.read_csv('test')
Out[1]:[4]: pd.read_csv('test', keep_default_na=False)
Out[4]:1   2
2   3
</snippet></ROW><ROW><id>16596317</id><snippet>str.format</snippet></ROW><ROW><id>16596317</id><snippet>{Name}</snippet></ROW><ROW><id>16596317</id><snippet>data = """parallel (
{{
ignore(FAILURE) {{
                          build( "Deploy",  BUILDFILE: "{BF}", WARFILE: "{WF}", STUDY: "{STUDY}", BUG: "{BUG}" )
}}}},""".format(BUG=BUG,BF=BF,WF=WF,STUDY=STUDY)
</snippet></ROW><ROW><id>16596317</id><snippet>{</snippet></ROW><ROW><id>16596317</id><snippet>{</snippet></ROW><ROW><id>16596317</id><snippet>data = """parallel (
{{
ignore(FAILURE) {{
                          build( "Deploy",  BUILDFILE: "{BF}", WARFILE: "{WF}", STUDY: "{STUDY}", BUG: "{BUG}" )
}}}},""".format(**locals())
</snippet></ROW><ROW><id>16596491</id><snippet>list1 and list2</snippet></ROW><ROW><id>16596491</id><snippet>list1</snippet></ROW><ROW><id>16596491</id><snippet>list2</snippet></ROW><ROW><id>16596491</id><snippet>if elem in list1 and elem in list2:
</snippet></ROW><ROW><id>16596491</id><snippet>elems_in_both_lists = set(list1) &amp; set(list2)
</snippet></ROW><ROW><id>16596491</id><snippet>if elem in elems_in_both_lists:
</snippet></ROW><ROW><id>16596615</id><snippet>x</snippet></ROW><ROW><id>16596615</id><snippet>__x</snippet></ROW><ROW><id>16596673</id><snippet>no nesting: &lt;@[^@]+@&gt;
up to 1:    &lt;@[^@]+(&lt;@[^@]+@&gt;)?[^@]*@&gt;
up to 2:    &lt;@[^@]+(&lt;@[^@]+(&lt;@[^@]+@&gt;)?[^@]*@&gt;)?[^@]*@&gt;
up to 3:    &lt;@[^@]+(&lt;@[^@]+(&lt;@[^@]+(&lt;@[^@]+@&gt;)?[^@]*@&gt;)?[^@]*@&gt;)?[^@]*@&gt;
...
</snippet></ROW><ROW><id>16596673</id><snippet>[^@]</snippet></ROW><ROW><id>16596673</id><snippet>(?:[^&lt;@]|&lt;[^@]|@[^&gt;])</snippet></ROW><ROW><id>16596673</id><snippet>&lt;@(?:[^&lt;@]|&lt;[^@]|@[^&gt;])+(&lt;@(?:[^&lt;@]|&lt;[^@]|@[^&gt;])+(&lt;@(?:[^&lt;@]|&lt;[^@]|@[^&gt;])+(&lt;@(?:[
^&lt;@]|&lt;[^@]|@[^&gt;])+(&lt;@(?:[^&lt;@]|&lt;[^@]|@[^&gt;])+(&lt;@(?:[^&lt;@]|&lt;[^@]|@[^&gt;])+(&lt;@(?:[^&lt;@]|&lt;
[^@]|@[^&gt;])+(&lt;@(?:[^&lt;@]|&lt;[^@]|@[^&gt;])+(&lt;@(?:[^&lt;@]|&lt;[^@]|@[^&gt;])+(&lt;@(?:[^&lt;@]|&lt;[^@]|@
[^&gt;])+(&lt;@(?:[^&lt;@]|&lt;[^@]|@[^&gt;])+@&gt;)?(?:[^&lt;@]|&lt;[^@]|@[^&gt;])*@&gt;)?(?:[^&lt;@]|&lt;[^@]|@[^&gt;]
)*@&gt;)?(?:[^&lt;@]|&lt;[^@]|@[^&gt;])*@&gt;)?(?:[^&lt;@]|&lt;[^@]|@[^&gt;])*@&gt;)?(?:[^&lt;@]|&lt;[^@]|@[^&gt;])*@
&gt;)?(?:[^&lt;@]|&lt;[^@]|@[^&gt;])*@&gt;)?(?:[^&lt;@]|&lt;[^@]|@[^&gt;])*@&gt;)?(?:[^&lt;@]|&lt;[^@]|@[^&gt;])*@&gt;)?
(?:[^&lt;@]|&lt;[^@]|@[^&gt;])*@&gt;)?(?:[^&lt;@]|&lt;[^@]|@[^&gt;])*@&gt;
</snippet></ROW><ROW><id>16596686</id><snippet>dehydrate cicle</snippet></ROW><ROW><id>16596852</id><snippet>'discussion__discussionresponse__timestamp'</snippet></ROW><ROW><id>16596852</id><snippet>&gt;&gt;&gt; groups = Group.objects.all().annotate(last_response=Max(
        'discussion__discussionresponse__timestamp')).order_by('-last_response')
&gt;&gt;&gt; for group in groups:
...     print(group.id, group.last_response)
...     
... 
(2L, datetime.datetime(2013, 5, 16, 14, 56, 22))
(1L, None)
(3L, None)
(4L, None)
(6L, None)
(7L, None)
(8L, None)
(9L, None)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16596852</id><snippet>&gt;&gt;&gt; groups = Group.objects.all().annotate(last_response=Max('discussion__discussionresponse__timestamp')).order_by('-last_response')
&gt;&gt;&gt; for group in groups:
...     print(group.id, group.last_response)
...     
... 
(4L, datetime.datetime(2013, 5, 16, 15, 25, 40))
(2L, datetime.datetime(2013, 5, 16, 15, 16, 46))
(1L, None)
(3L, None)
(6L, None)
(7L, None)
(8L, None)
(9L, None)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16597031</id><snippet>import threading
from contextlib import closing
import serial

continue_looping = True
def stopper():
    global continue_looping
    continue_looping = False

timer = threading.Timer(60, stopper)
timer.start()

with open("/Users/macproretina/Desktop/data.txt", 'w') as out_file:
    with closing(serial.Serial('/dev/tty.usbmodem1411', 9600, timeout=1)) as ser:
        while continue_looping:
            line = ser.readline()   # read a '\n' terminated line
            out_file.write(line.decode('utf-8')
            out_file.flush()
</snippet></ROW><ROW><id>16597031</id><snippet>f.flush()</snippet></ROW><ROW><id>16597107</id><snippet>e</snippet></ROW><ROW><id>16597107</id><snippet>d</snippet></ROW><ROW><id>16597107</id><snippet>import numpy as np

def d():
    a = [1,2,3,4,5]
    b = [10,20,30,40,50]
    c = [i*j for i,j in zip(a,b)]
    return c

def e():
    a = np.array([1,2,3,4,5])
    b = np.array([10,20,30,40,50])
    c = a*b
    return c

#Warning:  Functions with mutable default arguments are below.
# This code is only for testing and would be bad practice in production!
def f(a=[1,2,3,4,5],b=[10,20,30,40,50]):
    c = [i*j for i,j in zip(a,b)]
    return c

def g(a=np.array([1,2,3,4,5]),b=np.array([10,20,30,40,50])):
    c = a*b
    return c


import timeit
print timeit.timeit('d()','from __main__ import d')
print timeit.timeit('e()','from __main__ import e')
print timeit.timeit('f()','from __main__ import f')
print timeit.timeit('g()','from __main__ import g')
</snippet></ROW><ROW><id>16597107</id><snippet>f</snippet></ROW><ROW><id>16597107</id><snippet>g</snippet></ROW><ROW><id>16597107</id><snippet>1.53083586693
15.8963699341
1.33564996719
1.69556999207
</snippet></ROW><ROW><id>16597107</id><snippet>zip</snippet></ROW><ROW><id>16597107</id><snippet>t1 = [1,2,3,4,5] * 100
t2 = [10,20,30,40,50] * 100
t3 = np.array(t1)
t4 = np.array(t2)
print timeit.timeit('f(t1,t2)','from __main__ import f,t1,t2',number=10000)
print timeit.timeit('g(t3,t4)','from __main__ import g,t3,t4',number=10000)
</snippet></ROW><ROW><id>16597107</id><snippet>0.602419137955
0.0263929367065
</snippet></ROW><ROW><id>16597375</id><snippet>&gt;&gt;&gt; df = pd.DataFrame()
&gt;&gt;&gt; data = pd.DataFrame({"A": range(3)})
&gt;&gt;&gt; df.append(data)
   A
0  0
1  1
2  2
</snippet></ROW><ROW><id>16597375</id><snippet>append</snippet></ROW><ROW><id>16597375</id><snippet>&gt;&gt;&gt; df
Empty DataFrame
Columns: []
Index: []
&gt;&gt;&gt; df = df.append(data)
&gt;&gt;&gt; df
   A
0  0
1  1
2  2
</snippet></ROW><ROW><id>16597675</id><snippet>static</snippet></ROW><ROW><id>16597675</id><snippet>static</snippet></ROW><ROW><id>16597675</id><snippet>static</snippet></ROW><ROW><id>16597675</id><snippet>static</snippet></ROW><ROW><id>16597675</id><snippet>static_url_path</snippet></ROW><ROW><id>16597675</id><snippet>static_folder</snippet></ROW><ROW><id>16597675</id><snippet>static</snippet></ROW><ROW><id>16597675</id><snippet>@app.before_request
def check_login():
    if request.endpoint == 'static' and not current_user.is_authenticated():
        abort(401)
    return None
</snippet></ROW><ROW><id>16597675</id><snippet>send_static_file</snippet></ROW><ROW><id>16597675</id><snippet>def send_static_file(self, filename):
    if not current_user.is_authenticated():
        abort(401)
    return super(Flask, self).send_static_file(filename)
</snippet></ROW><ROW><id>16597828</id><snippet>columnspan</snippet></ROW><ROW><id>16597828</id><snippet>rowspan</snippet></ROW><ROW><id>16597828</id><snippet>import Tkinter as tk

root = tk.Tk()
buttons = [tk.Button(root,text=str(i)) for i in range(6)]
for i,b in enumerate(buttons):
    b.grid(row=i,column=0)

textbox = tk.Text(root)
textbox.grid(row=0,column=1,rowspan=6)

root.mainloop()
</snippet></ROW><ROW><id>16597828</id><snippet>Frame</snippet></ROW><ROW><id>16597828</id><snippet>columnspan</snippet></ROW><ROW><id>16597828</id><snippet>rowspan</snippet></ROW><ROW><id>16597828</id><snippet>Frame</snippet></ROW><ROW><id>16597828</id><snippet>Text</snippet></ROW><ROW><id>16597828</id><snippet>import Tkinter as tk

root = tk.Tk()
frame = tk.Frame(root)
frame.grid(row=0,column=0)
buttons = [tk.Button(frame,text=str(i)) for i in range(6)]
for i,b in enumerate(buttons):
    b.grid(row=i,column=0)

textbox = tk.Text(root)
textbox.grid(row=0,column=1)

root.mainloop()
</snippet></ROW><ROW><id>16597854</id><snippet>!ls</snippet></ROW><ROW><id>16597854</id><snippet>ls</snippet></ROW><ROW><id>16597854</id><snippet>ls</snippet></ROW><ROW><id>16597854</id><snippet>cat</snippet></ROW><ROW><id>16597854</id><snippet>ls</snippet></ROW><ROW><id>16597854</id><snippet>ls -FG</snippet></ROW><ROW><id>16597854</id><snippet>!ls</snippet></ROW><ROW><id>16597854</id><snippet>ls</snippet></ROW><ROW><id>16598054</id><snippet>sock.send(s)</snippet></ROW><ROW><id>16598054</id><snippet>s</snippet></ROW><ROW><id>16598054</id><snippet>sock</snippet></ROW><ROW><id>16598054</id><snippet>socket.socket</snippet></ROW><ROW><id>16598054</id><snippet>sock</snippet></ROW><ROW><id>16598054</id><snippet>sock</snippet></ROW><ROW><id>16598054</id><snippet>def send_request(self, xml_string):
    send_string = struct.pack('i', len(xml_string)) + xml_string
    size = len(send_string)
    sent = 0
    while sent &lt; size:
        try:
            sent += self.sock.send(send_string[sent:])
        except socket.error:
            print &gt;&gt; sys.stderr, "The connection to the server was lost."
            break
    else:
        print "Request sent."
</snippet></ROW><ROW><id>16598054</id><snippet>import</snippet></ROW><ROW><id>16598054</id><snippet>socket</snippet></ROW><ROW><id>16598054</id><snippet>sys</snippet></ROW><ROW><id>16598054</id><snippet>struct</snippet></ROW><ROW><id>16598227</id><snippet>browser = Mechanize.browser()
browser.open(YOUR URL)
browser.select_form(nr = 0)
browser.form['username'] = USERNAME
browser.form['password'] = PASSWORD
browser.submit()
</snippet></ROW><ROW><id>16598259</id><snippet>self.var</snippet></ROW><ROW><id>16598259</id><snippet>self.initUI</snippet></ROW><ROW><id>16598259</id><snippet>initUI</snippet></ROW><ROW><id>16598259</id><snippet>self.var</snippet></ROW><ROW><id>16598259</id><snippet>def __init__(self, master):
    Tkinter.Frame.__init__(self,master)
    self.master = master
    self.var = Tkinter.StringVar()
    #self.var = Tkinter.StringVar()
    self.var.set("hello")
    self.initUI()
</snippet></ROW><ROW><id>16598278</id><snippet>def sublists(list1, list2):
    subs = []
    for i in range(len(list1)-1):
        for j in range(len(list2)-1):
            if list1[i]==list2[j] and list1[i+1]==list2[j+1]:
                m = i+2
                n = j+2
                while m&lt;len(list1) and n&lt;len(list2) and list1[m]==list2[n]:
                    m += 1
                    n += 1
                subs.append(list1[i:m])
    return subs

def max_sublists(list1, list2):
    subls = sublists(list1, list2)
    if len(subls)==0:
        return []
    else:
        max_len = max(len(subl) for subl in subls)
        return [subl for subl in subls if len(subl)==max_len]
</snippet></ROW><ROW><id>16598278</id><snippet>In [10]: max_sublists([0,1,3,4,3,7,2],[0,3,4,3,7,3])
Out[10]: [[3, 4, 3, 7]]
In [11]: max_sublists([0,1,2,3,0,1,3,5,2],[1,2,3,4,5,1,3,5,3,7,3])
Out[11]: [[1, 2, 3], [1, 3, 5]]
</snippet></ROW><ROW><id>16598291</id><snippet>from pylab import plot, show, savefig, xlim, figure, \
                hold, ylim, legend, boxplot, setp, axes

# function for setting the colors of the box plots pairs
def setBoxColors(bp):
    setp(bp['boxes'][0], color='blue')
    setp(bp['caps'][0], color='blue')
    setp(bp['caps'][1], color='blue')
    setp(bp['whiskers'][0], color='blue')
    setp(bp['whiskers'][1], color='blue')
    setp(bp['fliers'][0], color='blue')
    setp(bp['fliers'][1], color='blue')
    setp(bp['medians'][0], color='blue')

    setp(bp['boxes'][1], color='red')
    setp(bp['caps'][2], color='red')
    setp(bp['caps'][3], color='red')
    setp(bp['whiskers'][2], color='red')
    setp(bp['whiskers'][3], color='red')
    setp(bp['fliers'][2], color='red')
    setp(bp['fliers'][3], color='red')
    setp(bp['medians'][1], color='red')

# Some fake data to plot
A= [[1, 2, 5,],  [7, 2]]
B = [[5, 7, 2, 2, 5], [7, 2, 5]]
C = [[3,2,5,7], [6, 7, 3]]

fig = figure()
ax = axes()
hold(True)

# first boxplot pair
bp = boxplot(A, positions = [1, 2], widths = 0.6)
setBoxColors(bp)

# second boxplot pair
bp = boxplot(B, positions = [4, 5], widths = 0.6)
setBoxColors(bp)

# thrid boxplot pair
bp = boxplot(C, positions = [7, 8], widths = 0.6)
setBoxColors(bp)

# set axes limits and labels
xlim(0,9)
ylim(0,9)
ax.set_xticklabels(['A', 'B', 'C'])
ax.set_xticks([1.5, 4.5, 7.5])

# draw temporary red and blue lines and use them to create a legend
hB, = plot([1,1],'b-')
hR, = plot([1,1],'r-')
legend((hB, hR),('Apples', 'Oranges'))
hB.set_visible(False)
hR.set_visible(False)

savefig('boxcompare.png')
show()
</snippet></ROW><ROW><id>16598380</id><snippet>def func(request):
    url  = request.META['HTTP_REFERER']
    if request.META['QUERY_STRING']:
        url += '?%s' % request.META['QUERY_STRING']
    return redirect_to(request, url, **kwargs)
</snippet></ROW><ROW><id>16598397</id><snippet>numpy.argsort</snippet></ROW><ROW><id>16598397</id><snippet>import numpy as np
a = np.random.randint(0, 100, 5)
b = np.random.randint(0, 5, (5, 5))
print a
print b
idx = np.argsort(a)[::-1]
print a[idx]
print b[idx]
</snippet></ROW><ROW><id>16598397</id><snippet>[27 65  8 19 32]

[[4 4 1 4 4]
 [1 3 4 3 3]
 [3 4 2 1 0]
 [1 0 1 0 4]
 [1 4 1 1 4]]

[65 32 27 19  8]

[[1 3 4 3 3]
 [1 4 1 1 4]
 [4 4 1 4 4]
 [1 0 1 0 4]
 [3 4 2 1 0]]
</snippet></ROW><ROW><id>16598397</id><snippet>sorted</snippet></ROW><ROW><id>16598397</id><snippet>numpy.vstack</snippet></ROW><ROW><id>16598397</id><snippet>ziped_and_sorted = sorted(zip(a,b), key=operator.itemgetter(0), reverse=True)
np.vstack([row[1] for row in ziped_and_sorted])
</snippet></ROW><ROW><id>16598514</id><snippet>[]</snippet></ROW><ROW><id>16598514</id><snippet>re.search(r"^PG\(\(",line)
</snippet></ROW><ROW><id>16598514</id><snippet>r</snippet></ROW><ROW><id>16598514</id><snippet>re.search</snippet></ROW><ROW><id>16598514</id><snippet>re.match</snippet></ROW><ROW><id>16598514</id><snippet>re.match(r"PG\(\(",line)
</snippet></ROW><ROW><id>16598514</id><snippet>re.match</snippet></ROW><ROW><id>16598514</id><snippet>str.startswith</snippet></ROW><ROW><id>16598514</id><snippet>if line.startswith('PG(('):
   ...
elif line.startswith('P('):
   ...
</snippet></ROW><ROW><id>16598527</id><snippet>%</snippet></ROW><ROW><id>16598527</id><snippet>result</snippet></ROW><ROW><id>16598527</id><snippet>buttons</snippet></ROW><ROW><id>16598527</id><snippet>result = "THIS IS MY RESULT"
buttons = "AND MY BUTTON"
output = """
&lt;html&gt;
    &lt;body&gt;
        &lt;form action='/' method='get' autocomplete='off'&gt; 
            &lt;input type='text' name='x' value='%s'/&gt;&lt;br/&gt;
            &lt;input type='text' name='y'/&gt;&lt;br/&gt; 
            %s 
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
""" % (result, buttons)

print output
</snippet></ROW><ROW><id>16598527</id><snippet>&lt;html&gt;
    &lt;body&gt;
        &lt;form action='/' method='get' autocomplete='off'&gt; 
            &lt;input type='text' name='x' value='THIS IS MY RESULT'/&gt;&lt;br/&gt;
            &lt;input type='text' name='y'/&gt;&lt;br/&gt; 
            AND MY BUTTON 
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>16598527</id><snippet>result = "THIS IS MY RESULT"
buttons = "AND MY BUTTON"
print "%s ... %s!" % (result, buttons)
</snippet></ROW><ROW><id>16598527</id><snippet>THIS IS MY RESULT ... AND MY BUTTON!
</snippet></ROW><ROW><id>16598527</id><snippet>print</snippet></ROW><ROW><id>16598527</id><snippet>self.response.out.write</snippet></ROW><ROW><id>16598527</id><snippet>result = "THIS IS MY RESULT"
buttons = "AND MY BUTTON"
print "%s ... %s!" % (result, buttons)
</snippet></ROW><ROW><id>16598527</id><snippet>result = "THIS IS MY RESULT"
buttons = "AND MY BUTTON"
self.response.out.write("%s ... %s!" % (result, buttons))
</snippet></ROW><ROW><id>16598579</id><snippet># define output-format
numdtype = num.dtype('2f')

# write data
myarray.tofile('filename', numdtype)
</snippet></ROW><ROW><id>16598579</id><snippet># create memmap                                              
data = num.memmap('filename', mode='w+', dtype=num.float, offset=myoffset, shape=(my_shape), order='C')
# put some data into in:
data[1:10] = num.random.rand(9)
# flush to disk:
data.flush()
del data
</snippet></ROW><ROW><id>16598920</id><snippet>gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=output.pdf file1.pdf file2.pdf file3.pdf
</snippet></ROW><ROW><id>16598950</id><snippet>print tuple(a+b+c for a, b, c in s)
</snippet></ROW><ROW><id>16598950</id><snippet>sum()</snippet></ROW><ROW><id>16598950</id><snippet>print tuple(sum(t) for t in s)
</snippet></ROW><ROW><id>16598950</id><snippet>map()</snippet></ROW><ROW><id>16598950</id><snippet>print tuple(map(sum, s))
</snippet></ROW><ROW><id>16598971</id><snippet>-X VERBNAME</snippet></ROW><ROW><id>16598971</id><snippet>~# curl -X POST http://httpbin.org/post
{
  "url": "http://httpbin.org/post",
  "data": "",
  "json": null,
  "args": {},
  "form": {},
  "origin": "127.0.0.1",
  "headers": {
    "User-Agent": "curl/7.19.6 (x86_64-unknown-linux-gnu) libcurl/7.19.6 OpenSSL/0.9.8n zlib/1.2.3 libidn/1.5",
    "Connection": "close",
    "Accept": "*/*",
    "Content-Length": "0",
    "Host": "httpbin.org"
  },
  "files": {}
}
</snippet></ROW><ROW><id>16598971</id><snippet>import requests

# Variation 1
r = requests.post(url, data={'username': 'exampleuser'})

# Variation 2
r = requests.post(url, params={'username': 'exampleuser'})

# Followed by these lines
print r.status_code
print r.text
</snippet></ROW><ROW><id>16598971</id><snippet># Variation 1 equivalent
curl --data='username=exampleuser' -X POST http://httpbin.org/post

# Variation 2 equivalent
curl -X POST http://httpbin.org/post?username=exampleuser
</snippet></ROW><ROW><id>16598971</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>16598971</id><snippet>POST</snippet></ROW><ROW><id>16599024</id><snippet>output = [{'x': l[i], 'y': l[i+1]} for i in range(0, len(l), 2)]
</snippet></ROW><ROW><id>16599024</id><snippet>output = [{'x': x, 'y': y} for x, y in zip(*[iter(l)]*2)]
</snippet></ROW><ROW><id>16599024</id><snippet>zip()</snippet></ROW><ROW><id>16599066</id><snippet>L[i]*(i+1)</snippet></ROW><ROW><id>16599066</id><snippet>enumerate()</snippet></ROW><ROW><id>16599066</id><snippet>1</snippet></ROW><ROW><id>16599066</id><snippet>1</snippet></ROW><ROW><id>16599066</id><snippet>0</snippet></ROW><ROW><id>16599066</id><snippet>tsr = sum(x * i for i, x in enumerate(L, 1)) / len(L)
</snippet></ROW><ROW><id>16599066</id><snippet>L</snippet></ROW><ROW><id>16599066</id><snippet>float(len(L))</snippet></ROW><ROW><id>16599066</id><snippet>from __future__ import division</snippet></ROW><ROW><id>16599165</id><snippet>%</snippet></ROW><ROW><id>16599165</id><snippet>%</snippet></ROW><ROW><id>16599165</id><snippet>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_HTMLorMML"&gt;
&lt;/script&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

`3*e^pi/5-3/5`


&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>16599199</id><snippet>C:\&gt; C:\MyVitualEnv\Scripts\activate.bat
(MyVitualEnv) C:\&gt; easy_install psutil-0.7.0.win32-py2.7.exe
</snippet></ROW><ROW><id>16599199</id><snippet>activate.bat</snippet></ROW><ROW><id>16599199</id><snippet>easy_install</snippet></ROW><ROW><id>16599199</id><snippet>C:\MyVitualEnv\Scripts\easy_install</snippet></ROW><ROW><id>16599199</id><snippet>(MyVitualEnv) C:\&gt; pip uninstall psutil
</snippet></ROW><ROW><id>16599341</id><snippet>donuts("11")</snippet></ROW><ROW><id>16599341</id><snippet>"Number of donuts: many"</snippet></ROW><ROW><id>16599341</id><snippet>None</snippet></ROW><ROW><id>16599341</id><snippet>test(donuts("11"), "Number of donuts: many")</snippet></ROW><ROW><id>16599341</id><snippet>None</snippet></ROW><ROW><id>16599341</id><snippet>"Number of donuts: many"</snippet></ROW><ROW><id>16599341</id><snippet>donuts()</snippet></ROW><ROW><id>16599341</id><snippet>def donuts(count):
  if count &lt;=10 :
    return 'Number of donuts: %s' % count
  else :
    return 'Number of donuts: many'
</snippet></ROW><ROW><id>16599341</id><snippet>test()</snippet></ROW><ROW><id>16599611</id><snippet>easy_install pip==1.2.1
</snippet></ROW><ROW><id>16599622</id><snippet>import random
from django.conf import settings

# there might be a better way to do this...
DATABASE_ENGINE = settings.DATABASES[settings.DATABASES.keys()[0]]['ENGINE'].split('.')[-1]

def compare_hashes(request, i=None):
    competitors = Competitors.objects.all()

    if DATABASE_ENGINE == 'mysql':
        if not request.session.get('random_seed', False):
            request.session['random_seed'] = random.randint(1, 10000)
        seed = request.session['random_seed']
        competitors = competitors.extra(select={'sort_key': 'RAND(%s)' % seed}).order_by('sort_key')

    # now competitors is randomised but consistent for the session
    ...
</snippet></ROW><ROW><id>16599651</id><snippet>&gt;&gt;&gt; table = dict([(x + 0xFF00 - 0x20, unichr(x)) for x in xrange(0x21, 0x7F)] + [(0x3000, unichr(0x20))])
&gt;&gt;&gt; data.translate(table)
u'A Deuce'
</snippet></ROW><ROW><id>16599651</id><snippet>translate</snippet></ROW><ROW><id>16599822</id><snippet>C:\&gt; C:\Python27\Scripts\easy_install pywin32-218.win32-py2.7.exe
</snippet></ROW><ROW><id>16599889</id><snippet>import pylab as pl
import numpy as np

a = np.array([[0,1]])
pl.figure(figsize=(9, 1.5))
img = pl.imshow(a, cmap="Blues")
pl.gca().set_visible(False)
cax = pl.axes([0.1, 0.2, 0.8, 0.6])
pl.colorbar(orientation="h", cax=cax)
pl.savefig("colorbar.pdf")
</snippet></ROW><ROW><id>16599966</id><snippet>def myview(request):
  rows = MyModel.objects.using('mysql').all()
  return render_to_response("mytemplate.html", {"rows" : rows })
</snippet></ROW><ROW><id>16599966</id><snippet>def myview(request):
  conn = MySQLdb.connect("connection info here")
  try:
    cursor = conn.cursor()
    cursor.execute("select * from mytable")
    rows = cursor.fetchall()
  finally:
    conn.close()

  return render_to_response("mytemplate.html", {"rows" : rows})
</snippet></ROW><ROW><id>16600036</id><snippet>curparsing = [{}]</snippet></ROW><ROW><id>16600036</id><snippet>with open('inputfilename','r') as f:
    for line in f:
        # code implementing the below rules.
</snippet></ROW><ROW><id>16600036</id><snippet>if not line.strip():</snippet></ROW><ROW><id>16600036</id><snippet>continue</snippet></ROW><ROW><id>16600036</id><snippet>curparsing.pop()</snippet></ROW><ROW><id>16600036</id><snippet>line=line.lstrip()</snippet></ROW><ROW><id>16600036</id><snippet>if line[0] in '123456789':</snippet></ROW><ROW><id>16600036</id><snippet>m = re.match('([1-9]+) ([a-z])'); count, character = m.groups(); count = int(count)</snippet></ROW><ROW><id>16600036</id><snippet>curparsing[-1][character] = count</snippet></ROW><ROW><id>16600036</id><snippet>curparsing[0]</snippet></ROW><ROW><id>16600079</id><snippet>&gt;&gt;&gt; names = ('Elizabeth', 'Peter, Angela, Thomas')
&gt;&gt;&gt; [y for x in names for y in x.split(', ')]
['Elizabeth', 'Peter', 'Angela', 'Thomas']
</snippet></ROW><ROW><id>16600079</id><snippet>&gt;&gt;&gt; ', '.join(names).split(', ')
['Elizabeth', 'Peter', 'Angela', 'Thomas']
</snippet></ROW><ROW><id>16600149</id><snippet>network.proxy.port</snippet></ROW><ROW><id>16600149</id><snippet>profile.set_preference("network.proxy.port", "80")
</snippet></ROW><ROW><id>16600185</id><snippet>sorted</snippet></ROW><ROW><id>16600185</id><snippet>for key,value in sorted(dic.items()):
    ...
</snippet></ROW><ROW><id>16600185</id><snippet>e.sort()</snippet></ROW><ROW><id>16600185</id><snippet>hash</snippet></ROW><ROW><id>16600185</id><snippet>collections</snippet></ROW><ROW><id>16600185</id><snippet>OrderedDict</snippet></ROW><ROW><id>16600228</id><snippet>self.redirect('/?' + urllib.urlencode(query_params)) # redirects
print type(self.response)                            # never executes
</snippet></ROW><ROW><id>16600228</id><snippet>Location:</snippet></ROW><ROW><id>16600228</id><snippet>HTTP/1.1 302 Found 
Location: http://_______.appspot.com/?guestbook_name=default_guestbook
</snippet></ROW><ROW><id>16600441</id><snippet>class Post(models.Model):
    title = models.CharField(max_length=100)
    pub_date = models.DateTimeField()
    cover_photo = models.ImageField(upload_to='coverphotos/')
    text = models.TextField()
    summary = models.CharField(max_length=200)
    slug = models.SlugField(max_length=40, unique=True)

    def save(self, *args, **kwargs):
        if self.text:
            self.summary = self.text[:100]
        super(Post, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>16600622</id><snippet>n_rows = len(x)
n_cols = max(map(len, x))

new_array = np.empty((n_rows, n_cols))
new_array.fill(-1)
for i, row in enumerate(x):
    for j, ele in enumerate(row):
        new_array[i, j] = ele
</snippet></ROW><ROW><id>16600622</id><snippet>import numpy as np
from timeit import timeit
from itertools import izip_longest

def f1(x, enumerate=enumerate, max=max, len=len):
    n_rows = len(x)
    n_cols = max(len(ele) for ele in x)

    new_array = np.ones((n_rows, n_cols)) * -1
    for i, row in enumerate(x):
        for j, ele in enumerate(row):
            new_array[i, j] = ele
    return new_array

def f2(x, enumerate=enumerate, max=max, len=len, map=map):
    n_rows = len(x)
    n_cols = max(map(len, x))

    new_array = np.empty((n_rows, n_cols))
    new_array.fill(-1)
    for i, row in enumerate(x):
        for j, ele in enumerate(row):
            new_array[i, j] = ele

    return new_array

setup = '''x = [[0,2,3],
    [],
    [4],
    [5,6]]
from __main__ import f1, f2'''

print timeit(stmt='f1(x)', setup=setup, number=100000)
print timeit(stmt='f2(x)', setup=setup, number=100000)
</snippet></ROW><ROW><id>16600622</id><snippet>&gt;&gt;&gt; 
2.01299285889
0.966173887253
</snippet></ROW><ROW><id>16600636</id><snippet>datetime</snippet></ROW><ROW><id>16600636</id><snippet>datetime.datetime.replace</snippet></ROW><ROW><id>16600636</id><snippet>import datetime
dd = datetime.datetime.strptime(date,'%y%m%d')
if dd.year &gt; 2005:
   dd = dd.replace(year=dd.year-100)
</snippet></ROW><ROW><id>16600665</id><snippet>lxml</snippet></ROW><ROW><id>16600665</id><snippet>bs4/builder/__init__.py</snippet></ROW><ROW><id>16600802</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = """17/05/2013 10:09:15,INFO,xxxxxxxxxx
yyyyyy
zzzzzz

17/05/2013 10:09:15,INFO,xxxxxxxx
yyyyyyy
zzzzzzz"""
&gt;&gt;&gt; print re.sub('\n(?!\n)', '', text)
17/05/2013 10:09:15,INFO,xxxxxxxxxxyyyyyyzzzzzz
17/05/2013 10:09:15,INFO,xxxxxxxxyyyyyyyzzzzzzz
</snippet></ROW><ROW><id>16600882</id><snippet>import re
s="y, i agree with u. yu."
l=[('yes', ['y', 'ya', 'ye']), ('you', ['u', 'yu'])] 
d={ k : "\\b(?:" + "|".join(v) + ")\\b" for k,v in l}
for k,r in d.items(): s = re.sub(r, k, s)  
print s
</snippet></ROW><ROW><id>16600882</id><snippet>yes, i agree with you. you.
</snippet></ROW><ROW><id>16601275</id><snippet>viewkeys()</snippet></ROW><ROW><id>16601275</id><snippet>viewitems()</snippet></ROW><ROW><id>16601275</id><snippet>viewvalues()</snippet></ROW><ROW><id>16601275</id><snippet>&gt;&gt;&gt; dict.viewkeys?
Type:       method_descriptor
String Form:&lt;method 'viewkeys' of 'dict' objects&gt;
Namespace:  Python builtin
Docstring:  D.viewkeys() -&gt; a set-like object providing a view on D's keys
</snippet></ROW><ROW><id>16601275</id><snippet>dict.keys()</snippet></ROW><ROW><id>16601275</id><snippet>dict.items()</snippet></ROW><ROW><id>16601275</id><snippet>dict.values()</snippet></ROW><ROW><id>16601275</id><snippet>k = d.keys()</snippet></ROW><ROW><id>16601275</id><snippet>k.sort()</snippet></ROW><ROW><id>16601275</id><snippet>k = sorted(d)</snippet></ROW><ROW><id>16601275</id><snippet>dict.iterkeys()</snippet></ROW><ROW><id>16601275</id><snippet>dict.iteritems()</snippet></ROW><ROW><id>16601275</id><snippet>dict.itervalues()</snippet></ROW><ROW><id>16601275</id><snippet>viewkeys</snippet></ROW><ROW><id>16601275</id><snippet>viewitems</snippet></ROW><ROW><id>16601275</id><snippet>viewvalues</snippet></ROW><ROW><id>16601275</id><snippet>dict</snippet></ROW><ROW><id>16601275</id><snippet>2to3</snippet></ROW><ROW><id>16601275</id><snippet>view</snippet></ROW><ROW><id>16601275</id><snippet>keys</snippet></ROW><ROW><id>16601275</id><snippet>values</snippet></ROW><ROW><id>16601275</id><snippet>items</snippet></ROW><ROW><id>16601275</id><snippet>list()</snippet></ROW><ROW><id>16601275</id><snippet>2to3</snippet></ROW><ROW><id>16601275</id><snippet>RefactoringTool: Refactored so.py
--- so.py   (original)
+++ so.py   (refactored)
@@ -1 +1 @@
-print dic.viewkeys()
+print(dic.keys())
</snippet></ROW><ROW><id>16601454</id><snippet>markdown</snippet></ROW><ROW><id>16601454</id><snippet>pygments</snippet></ROW><ROW><id>16601454</id><snippet>Packages/
    |
    |-MyPlugin/
        |
        |-my_plugin.py
        |
        |-markdown.py
        |
        |-pygments/
            |
            |-__init__.py
            |
            |- etc.
</snippet></ROW><ROW><id>16601454</id><snippet>my_plugin.py</snippet></ROW><ROW><id>16601454</id><snippet>import sublime
import sublime_plugin
import markdown
import pygments

class MyPluginCommand(sublime_plugin.TextCommand):
    # and so on...
</snippet></ROW><ROW><id>16601583</id><snippet>count_subq = meta.Session.query(Comment.article_id, func.count(Comment.article_id) \
    .label("comment_count")) \
    .group_by(Comment.article_id) \
    .subquery()

query = query.add_column(count_subq.c.comment_count.label("comment_count"))

query = query.outerjoin((count_subq, count_subq.c.article_id==Article.id))
</snippet></ROW><ROW><id>16601941</id><snippet>.astype</snippet></ROW><ROW><id>16601941</id><snippet>all_data.astype(dtype=[('v1', 'S3'), ('v2', '&lt;i4'), ('v3', '|S30'), ('v4', '&lt;f8'), ('v5', '&lt;f8'), ('v6', '&lt;f8'), ('v7', 'O')])
#rec.array([('GNB', 1980, '-1', 20.0, -1.168689, 0.4619077, None),
#           ('GNB', 1981, '20', -1.185176, 0.4619077, nan, None)], 
#             dtype=[('v1', 'S3'), ('v2', '&lt;i4'), ('v3', 'S30'), ('v4', '&lt;f8'), ('v5', '&lt;f8'), ('v6', '&lt;f8'), ('v7', 'O')])
</snippet></ROW><ROW><id>16602004</id><snippet>readfp()</snippet></ROW><ROW><id>16602004</id><snippet>read()</snippet></ROW><ROW><id>16602004</id><snippet>def LoadTestInformation(self):        
    config = ConfigParser.ConfigParser()    
    print(os.path.join(os.getcwd(),'App.cfg'))

    with open(os.path.join(os.getcwd(),'App.cfg'),'r') as configfile:       
        config.readfp(configfile)
        return config.items('TestInformation')
</snippet></ROW><ROW><id>16602004</id><snippet>read()</snippet></ROW><ROW><id>16602004</id><snippet>read()</snippet></ROW><ROW><id>16602004</id><snippet>def LoadTestInformation(self):        
    config = ConfigParser.ConfigParser()    
    my_file = (os.path.join(os.getcwd(),'App.cfg'))
    config.read(my_file)
    return config.items('TestInformation')
</snippet></ROW><ROW><id>16602404</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; a = ['rhubarb','plain custard','jam','vanilla custard','pie','cheesecake']
&gt;&gt;&gt; [i for i, s in enumerate(a, start=1) if re.search('custard', s)]
[2, 4]
</snippet></ROW><ROW><id>16602404</id><snippet>start=1</snippet></ROW><ROW><id>16602404</id><snippet>enumerate</snippet></ROW><ROW><id>16602404</id><snippet>start=1</snippet></ROW><ROW><id>16602404</id><snippet>start=0</snippet></ROW><ROW><id>16602426</id><snippet>def get_sodium_for_bread(quantity_of_bread):
    ...
    return quantity_of_sodium
</snippet></ROW><ROW><id>16602426</id><snippet>quantity_...</snippet></ROW><ROW><id>16602426</id><snippet>miligrams_t get_sodium(slices_t bread)</snippet></ROW><ROW><id>16602426</id><snippet>food_props_per_gram = {
    'bread': {'sodum': 0.000012},
    'milk': {'sodium': 0.00032}
}

units_to_grams = {
    'slice': 100.0,
    'cup': '250.0'
}
</snippet></ROW><ROW><id>16602529</id><snippet>setup.py</snippet></ROW><ROW><id>16602529</id><snippet>pip</snippet></ROW><ROW><id>16602529</id><snippet>e-</snippet></ROW><ROW><id>16602529</id><snippet>pip install -e /full/path/to/foo.com/lib/
</snippet></ROW><ROW><id>16602529</id><snippet>site-packages</snippet></ROW><ROW><id>16602529</id><snippet>manage.py</snippet></ROW><ROW><id>16602529</id><snippet>import os, sys
root_path = os.path.abspath(os.path.join(__file__, '..', '..'))
lib_path = os.path.join(root_path, 'lib')
sys.path.insert(0, lib_path)
# ...
</snippet></ROW><ROW><id>16602713</id><snippet>echo</snippet></ROW><ROW><id>16602713</id><snippet>spawn = pexpect.spawn('/bin/bash --noediting')</snippet></ROW><ROW><id>16602725</id><snippet># generate names and values again at other place
def foo():
    for d in someDict :
        d_name = d
</snippet></ROW><ROW><id>16602725</id><snippet>def foo(someString=None,
        someNumber=None,
        somePointer=None,
        someList=None):
    pass

foo(**someDict)
</snippet></ROW><ROW><id>16602986</id><snippet>import bs4

html = "&lt;div class=\"price\"&gt;\n                &lt;s&gt;Rs.330&lt;/s&gt; &lt;b&gt;Rs.297&lt;/b&gt;\n                              &lt;/div&gt;"
soup = bs4.BeautifulSoup(html, features="xml")
s = soup.div.s.text # u'Rs.330'
b = soup.div.b.text # u'Rs.297'
</snippet></ROW><ROW><id>16603019</id><snippet>ForeignKey</snippet></ROW><ROW><id>16603019</id><snippet>class UserProfile(models.Model):
    user = models.OneToOneField(User)
    website = models.URLField()


class Mobile(models.Model):
    phone_number = models.CharField(min_length = 7, max_length = 20)
    description = models.CharField(min_length = 7, max_length = 20)
    user_profile = models.ForeignKey(UserProfile)
</snippet></ROW><ROW><id>16603019</id><snippet>UserProfile</snippet></ROW><ROW><id>16603019</id><snippet>userprof_obj.mobile_set</snippet></ROW><ROW><id>16603019</id><snippet>RelationshipManager</snippet></ROW><ROW><id>16603019</id><snippet>userprof_obj.mobile_set.all()</snippet></ROW><ROW><id>16603148</id><snippet>name = node.find_element_by_xpath(".//tr[2]/td[2]")text
</snippet></ROW><ROW><id>16603202</id><snippet>&gt;&gt;&gt; x = {'a':1, 'b':2}
&gt;&gt;&gt; y = {'b':1, 'c':2}
&gt;&gt;&gt; for k in y:
...  x.setdefault(k, 0)
... 
0
2
&gt;&gt;&gt; for k in x:
...  y.setdefault(k, 0)
... 
0
2
1
&gt;&gt;&gt; x
{'a': 1, 'c': 0, 'b': 2}
&gt;&gt;&gt; y
{'a': 0, 'c': 2, 'b': 1}
</snippet></ROW><ROW><id>16603238</id><snippet>IPython</snippet></ROW><ROW><id>16603238</id><snippet>raw_input</snippet></ROW><ROW><id>16603238</id><snippet>\n</snippet></ROW><ROW><id>16603238</id><snippet>if not s:
    return
s = s+'\n'
</snippet></ROW><ROW><id>16603357</id><snippet>for i in range(..)</snippet></ROW><ROW><id>16603357</id><snippet>import itertools
for a, b in itertools.combinations(mylist, 2)
    compare(a, b)
</snippet></ROW><ROW><id>16603357</id><snippet>itertools.combinations</snippet></ROW><ROW><id>16603357</id><snippet>for i in range(len(mylist)):
    for j in range(i + 1, len(mylist)):
        compare(mylist[i], mylist[j])
</snippet></ROW><ROW><id>16603394</id><snippet>input=r'"Y:\DATA\00001\SERVER\DATA.TXT" "V:\DATA2\00002\SERVER2\DATA2.TXT"'

re.findall('".+?"', # or '"[^"]+"', input)
</snippet></ROW><ROW><id>16603394</id><snippet>["Y:\DATA\00001\SERVER\DATA.TXT", "V:\DATA2\00002\SERVER2\DATA2.TXT"]
</snippet></ROW><ROW><id>16603394</id><snippet>[f[1:-1] for f in re.findall('".+?"', input)]
</snippet></ROW><ROW><id>16603394</id><snippet>re.finditer</snippet></ROW><ROW><id>16603394</id><snippet>[f.group(1) for f in re.finditer('"(.+?)"', input)]
</snippet></ROW><ROW><id>16603400</id><snippet>local</snippet></ROW><ROW><id>16603400</id><snippet>E11000 duplicate key error index: local.properties.$_id_  dup key: { : null }</snippet></ROW><ROW><id>16603400</id><snippet>&gt; use local
switched to db local
&gt; db.properties.update({'url': 'test1'}, {'url2': 'test2'}, upsert=true)
&gt; db.properties.update({'url': 'test1'}, {'url2': 'test2'}, upsert=true)
E11000 duplicate key error index: local.properties.$_id_  dup key: { : null }
&gt; use local2
switched to db local2
&gt; db.properties.update({'url': 'test1'}, {'url2': 'test2'}, upsert=true)
&gt; db.properties.update({'url': 'test1'}, {'url2': 'test2'}, upsert=true)
</snippet></ROW><ROW><id>16603494</id><snippet>ncurses</snippet></ROW><ROW><id>16603494</id><snippet>readline</snippet></ROW><ROW><id>16603494</id><snippet>libncurses5-dev</snippet></ROW><ROW><id>16603725</id><snippet>if str1 &lt;= str2:
    if str1 &lt;= str3:
        low = str1
    else:
        low = str3
else:
    if str2 &lt;= str3:
        low = str2
    else:
        low = str3
</snippet></ROW><ROW><id>16603725</id><snippet>if str1 &lt;= str2 and str1 &lt;= str3:
    low = str1
elif str2 &lt;= str1 and str2 &lt;= str3:
    low = str2
else:
    low = str3
</snippet></ROW><ROW><id>16603725</id><snippet>low = x1
if x2 &lt; low: low = x2
if x3 &lt; low: low = x3
...
if xN &lt; low: low = xN
</snippet></ROW><ROW><id>16603756</id><snippet>city = models.OneToOneField(City)
</snippet></ROW><ROW><id>16603756</id><snippet>city = models.ForeignKey(City, null=True, blank=True)
</snippet></ROW><ROW><id>16603756</id><snippet>null, blank</snippet></ROW><ROW><id>16603756</id><snippet>sycndb</snippet></ROW><ROW><id>16603756</id><snippet>city</snippet></ROW><ROW><id>16603756</id><snippet>default=default_city_id</snippet></ROW><ROW><id>16603756</id><snippet>city</snippet></ROW><ROW><id>16603756</id><snippet>ForeignKey</snippet></ROW><ROW><id>16603952</id><snippet>getListCtrlSelection</snippet></ROW><ROW><id>16603952</id><snippet>wx.lib.mixins.listctrl</snippet></ROW><ROW><id>16603952</id><snippet>GetSelectedItems</snippet></ROW><ROW><id>16603952</id><snippet>def GetSelectedItems(self, event):
    from wx.lib.mixins.listctrl import getListCtrlSelection
    self.index = getListCtrlSelection(self.list)
    return self.index
</snippet></ROW><ROW><id>16603952</id><snippet>self.index</snippet></ROW><ROW><id>16603952</id><snippet>ListCtrl.GetItemText</snippet></ROW><ROW><id>16603952</id><snippet>items = [self.list.GetItemText(i) for i in self.index]
</snippet></ROW><ROW><id>16603952</id><snippet>self.entrydict</snippet></ROW><ROW><id>16603952</id><snippet>self.list</snippet></ROW><ROW><id>16603952</id><snippet>entries = [self.entrydict[item] for item in items]
</snippet></ROW><ROW><id>16604061</id><snippet>from collections import defaultdict, OrderedDict

dic = defaultdict(OrderedDict)
rowKeys = ['1','2','3']
columnKeys = ['alfa', 'omega', 'bravo', 'charlie']

# Filling up the dictionary with values
from random import randrange

for rKey in rowKeys:
    for cKey in columnKeys:
        dic[rKey][cKey] = randrange(50)
</snippet></ROW><ROW><id>16604702</id><snippet>add_numbers( "A1", "Element 560234 65952 6598881 20203256 2165883 659562 654981 24120 261240 31648948 23900 5512400 5512900 5612400 5612900" )

add_numbers( "A2", "Element 261240 31659 5612400 76803256 3165883 659863 654224 44120 261240 31648948 23900 3612200 9512900 5612400 5642924" )

add_numbers( "A3", "Element 841225 65952 2165883 63103256 2165883 644861 344966 84120 161540 31653948 23900 5513426 5518906 5682405 8682932" )
</snippet></ROW><ROW><id>16604702</id><snippet>import re // import regular expression module
d = {}

for line in open("myfile.txt", "r"):
    if not line.strip(): continue        // Skip blank lines
    data = re.findall('"([^"]*)"', line) // Extract text between double quotes

    if len(data) != 2: continue          // There were not exactly two pairs of double quotes, skip this line

    key, value = data
    d[key] = map(int, value.split()[1:]) // Remove "Element" and convert numbers to integers, add to dictionary
</snippet></ROW><ROW><id>16604702</id><snippet>"([^"]*)"</snippet></ROW><ROW><id>16604702</id><snippet>"(  )"</snippet></ROW><ROW><id>16604702</id><snippet>[^"]*</snippet></ROW><ROW><id>16604702</id><snippet>"</snippet></ROW><ROW><id>16604702</id><snippet>re.findall</snippet></ROW><ROW><id>16604863</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; rx = r'(?:\s|^)(?=\S*\d)(?=\S*[a-z])(?=\S*[A-Z])([a-zA-Z0-9]+(?=\s|$))'
</snippet></ROW><ROW><id>16604863</id><snippet>&gt;&gt;&gt; s = "Word NUM123 a8#fc0 ABcd12 0102--212 abC4"
&gt;&gt;&gt; re.findall(rx, s)
['ABcd12', 'abC4']
</snippet></ROW><ROW><id>16604958</id><snippet>with</snippet></ROW><ROW><id>16604958</id><snippet>lines</snippet></ROW><ROW><id>16604958</id><snippet>else</snippet></ROW><ROW><id>16604958</id><snippet>import shutil
with open('test') as old, open('newtest', 'w') as new:
    for line in old:
        if line.rsplit('|', 1)[-1].strip() == 'number3':
            new.write('this is replacement|number7\n')
        else:
            new.write(line)
shutil.move('newtest', 'test')
</snippet></ROW><ROW><id>16604967</id><snippet>__unicode__</snippet></ROW><ROW><id>16604967</id><snippet>str</snippet></ROW><ROW><id>16604967</id><snippet>def __unicode__(self):
    return unicode(self.school)
</snippet></ROW><ROW><id>16605386</id><snippet>numpy</snippet></ROW><ROW><id>16605386</id><snippet>math.asin</snippet></ROW><ROW><id>16605788</id><snippet>&gt;&gt;&gt; 'foo\u2116'
'foo№'
&gt;&gt;&gt; 'foo\N{NUMERO SIGN}'
'foo№'
</snippet></ROW><ROW><id>16606388</id><snippet>np.where(s1&lt;s2, np.arcsin(s3), np.arccos(s3))
</snippet></ROW><ROW><id>16606388</id><snippet>where(condition, [x, y])
</snippet></ROW><ROW><id>16606388</id><snippet>[xv if c else yv for (c,xv,yv) in zip(condition,x,y)]
</snippet></ROW><ROW><id>16606475</id><snippet>df[mask]</snippet></ROW><ROW><id>16606475</id><snippet>loc</snippet></ROW><ROW><id>16606475</id><snippet>df.iloc[msk]</snippet></ROW><ROW><id>16606475</id><snippet>NotImplementedError</snippet></ROW><ROW><id>16606475</id><snippet>ValueError</snippet></ROW><ROW><id>16606475</id><snippet>11.1</snippet></ROW><ROW><id>16606475</id><snippet>In [1]: df = pd.DataFrame(range(5), list('ABCDE'), columns=['a'])

In [2]: mask = (df.a%2 == 0)

In [3]: mask
Out[3]:
A     True
B    False
C     True
D    False
E     True
Name: a, dtype: bool

In [4]: df[mask]
Out[4]:
   a
A  0
C  2
E  4

In [5]: df.loc[mask]
Out[5]:
   a
A  0
C  2
E  4

In [6]: df.iloc[mask]  # Due to this question, this will give a ValueError (in 11.1)
Out[6]:
   a
A  0
C  2
E  4
</snippet></ROW><ROW><id>16606475</id><snippet>mask.index = range(5)
df.iloc[mask]  # or any of the others
IndexingError: Unalignable boolean Series key provided
</snippet></ROW><ROW><id>16606475</id><snippet>NotImplementedError</snippet></ROW><ROW><id>16606829</id><snippet>bs4.__all__</snippet></ROW><ROW><id>16606829</id><snippet>'BeautifulSoup'</snippet></ROW><ROW><id>16606829</id><snippet>*</snippet></ROW><ROW><id>16606829</id><snippet>bs4</snippet></ROW><ROW><id>16607049</id><snippet>#! /bin/env python
import sys
import pymedia.video.muxer as muxer
import pymedia.video.vcodec as vcodec

def recodeVideo( inFile, outFile, outCodec ):
    dm= muxer.Demuxer( inFile.split( '.' )[ -1 ] )
    f= open( inFile, 'rb' )
    fw= open( outFile, 'wb' )
    s= f.read( 400000 )
    r= dm.parse( s )
    v= filter( lambda x: x[ 'type' ]== muxer.CODEC_TYPE_VIDEO, dm.streams )
    if len( v )== 0:
        raise 'There is no video stream in a file %s' % inFile

    v_id= v[ 0 ][ 'index' ]
    print 'Assume video stream at %d index: ' % v_id
    c= vcodec.Decoder( dm.streams[ v_id ] )
    e= None
    while len( s )&gt; 0:
        for fr in r:
            if fr[ 0 ]== v_id:
                d= c.decode( fr[ 1 ] )
                if e== None and d:
                    params= c.getParams()
                    params[ 'id' ]= vcodec.getCodecID( outCodec )
                    # Just try to achive max quality( 2.7 MB/sec mpeg1 and 9.8 for mpeg2 )
                    if outCodec== 'mpeg1video':
                        params[ 'bitrate' ]= 2700000
                    else:
                        params[ 'bitrate' ]= 9800000
                    # It should be some logic to work with frame rates and such.
                    # I'm not aware of what it would be...
                    print 'Setting codec to ', params
                    e= vcodec.Encoder( params )
                if e and d:
                    dw= e.encode( d )
                    #print 'Frame size ', len( dw )
                    fw.write( dw )

        s= f.read( 400000 )
        r= dm.parse( s )

if __name__== '__main__':
  if len( sys.argv )!= 4:
    print "Usage: recode_video &lt;in_file&gt; &lt;out_file&gt; &lt;format&gt;\n\tformat= { mpeg1video | mpeg2video }"
  else:
    recodeVideo( sys.argv[ 1 ], sys.argv[ 2 ], sys.argv[ 3 ] )
</snippet></ROW><ROW><id>16607115</id><snippet>format</snippet></ROW><ROW><id>16607115</id><snippet>'{0}({0}|-){1}{0}'.format('[a-zA-Z0-9]','{1-14}')
</snippet></ROW><ROW><id>16607435</id><snippet>.//</snippet></ROW><ROW><id>16607435</id><snippet>from scrapy.selector import HtmlXPathSelector
from scrapy.contrib.spiders import CrawlSpider

from scrapy.item import Item, Field


class EscraperItem(Item):
    image_urls = Field()
    productURL = Field()
    productDesc = Field()
    image_paths = Field()
    productSite = Field()
    productTitle = Field()
    productPrice = Field()
    productImage = Field()


class ESpider(CrawlSpider):
    name = "ashikamallSpider"

    allowed_domains = ["ashikamall.com"]
    start_urls = ['http://ashikamall.com/products.aspx?id=222&amp;page=%s' % n for n in range(1, 51)]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        sites = hxs.select('//div[@class="product_list"]')
        items = []

        for site in sites:
            item = EscraperItem()
            item['productDesc'] = ""
            item['productSite'] = "http://1click1call.com/"
            item['productTitle'] = site.select('.//div[@class="product_list_name"]/h3/text()').extract()
            item['productPrice'] = site.select('.//div[@class="product_list_offerprice"]/text()').extract()
            item['productURL'] = "http://ashikamall.com/" + site.select('.//div[@class="product_list_image"]/a/@href').extract()[0].encode('utf-8')
            item['productImage'] = "http://ashikamall.com/" + site.select('.//div[@class="product_list_image"]/a/img/@src').extract()[0].encode('utf-8')
            items.append(item)
        return items
</snippet></ROW><ROW><id>16607772</id><snippet>a = [51,27,13,56]
dict(enumerate(a))
</snippet></ROW><ROW><id>16607772</id><snippet>{0: 51, 1: 27, 2: 13, 3: 56}
</snippet></ROW><ROW><id>16607772</id><snippet>enumerate(sequence, start=0)</snippet></ROW><ROW><id>16607772</id><snippet>next()</snippet></ROW><ROW><id>16607772</id><snippet>enumerate()</snippet></ROW><ROW><id>16607772</id><snippet>tuple</snippet></ROW><ROW><id>16608229</id><snippet>&gt;&gt;&gt; print a
Axes(0.547727,0.536364;0.352273x0.363636)
&gt;&gt;&gt; a._position.bounds
(0.54772727272727262, 0.53636363636363638, 0.35227272727272729, 0.36363636363636365)
&gt;&gt;&gt; a._position.bounds[3]
0.36363636363636365
</snippet></ROW><ROW><id>16608229</id><snippet>&gt;&gt;&gt; str(a)
'Axes(0.547727,0.536364;0.352273x0.363636)'
&gt;&gt;&gt; str(a)[5:-1]
'0.547727,0.536364;0.352273x0.363636'
</snippet></ROW><ROW><id>16608229</id><snippet>a.__str__</snippet></ROW><ROW><id>16608229</id><snippet>&gt;&gt;&gt; a.__str__??
Type:       instancemethod
String Form:&lt;bound method AxesSubplot.__str__ of &lt;matplotlib.axes.AxesSubplot object at 0x103e187d0&gt;&gt;
File:       /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/matplotlib/axes.py
Definition: a.__str__(self)
Source:
    def __str__(self):
        return "Axes(%g,%g;%gx%g)" % tuple(self._position.bounds)
</snippet></ROW><ROW><id>16608833</id><snippet>p</snippet></ROW><ROW><id>16608833</id><snippet>print(timeit.repeat("cut_rod(p, 4)", "from __main__ import cut_rod, p",
              number =1000))
</snippet></ROW><ROW><id>16608833</id><snippet>timeit</snippet></ROW><ROW><id>16609184</id><snippet>req()</snippet></ROW><ROW><id>16609184</id><snippet>uplmt</snippet></ROW><ROW><id>16609184</id><snippet>r0</snippet></ROW><ROW><id>16609184</id><snippet>r1</snippet></ROW><ROW><id>16609184</id><snippet># upper and lower limits on r
r1 = complex(req(E0)[1]).real
r0 = complex(req(E0)[2]).real
</snippet></ROW><ROW><id>16609246</id><snippet>np.allclose(data[1], data[100])
True
</snippet></ROW><ROW><id>16609317</id><snippet>reduce</snippet></ROW><ROW><id>16609317</id><snippet>def compose1(fnlist):
    if not fnlist:
        return lambda x: x

    # compose 1 function of x from two others
    def compose2fns(fn1, fn2):
        return lambda x : fn1(fn2(x))
    # or if you really love lambdas
    # compose2fns = lambda fn1,fn2: lambda x: fn1(fn2(x))

    # use reduce to cumulatively apply compose2fns to the functions
    # in the given list
    return reduce(compose2fns, fnlist)
</snippet></ROW><ROW><id>16609317</id><snippet>compose1 = lambda fnlist: reduce(lambda fn1,fn2: lambda x : fn1(fn2(x)), 
                                  fnlist or [lambda x:x])
</snippet></ROW><ROW><id>16609602</id><snippet>entry.title</snippet></ROW><ROW><id>16609602</id><snippet>u</snippet></ROW><ROW><id>16609602</id><snippet>line</snippet></ROW><ROW><id>16609602</id><snippet>str</snippet></ROW><ROW><id>16609602</id><snippet>&gt;&gt;&gt; 'Ä' == u'Ä'
False
</snippet></ROW><ROW><id>16609602</id><snippet>&gt;&gt;&gt; u'Ä' == 'Ä'
Warning (from warnings module):
  File "__main__", line 1
UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
False
</snippet></ROW><ROW><id>16609602</id><snippet>str.decode</snippet></ROW><ROW><id>16609602</id><snippet>latin1</snippet></ROW><ROW><id>16609602</id><snippet>&gt;&gt;&gt; 'Ä'.decode('latin1')
u'\xc4'
&gt;&gt;&gt; 'Ä'.decode('latin1') == u'Ä'
True
</snippet></ROW><ROW><id>16609602</id><snippet># -*- coding: utf-8 -*-
print('Ä'.decode('utf-8') == u'Ä')
</snippet></ROW><ROW><id>16609834</id><snippet>query = db.session.query(Tag, db.count(Post.id))
query = query.filter(
    (tags_to_posts_association_table.tag_id == Tag.id) &amp; \
    (tags_to_posts_association_table.post_id == Post.id)
)
query = query.group_by(Tag.id)
</snippet></ROW><ROW><id>16609834</id><snippet>SELECT tags.id AS tags_id, tags.title AS tags_title, count(posts.id) AS count_1 
FROM tags, posts, tags_to_posts 
WHERE tags_to_posts.tag_id = tags.id AND tags_to_posts.post_id = posts.id GROUP BY tags.id
</snippet></ROW><ROW><id>16609834</id><snippet>query = db.session.query(Tag, db.func.count(Post.id))
# This works but the preferred way is what's below it
#query = query.join(tags_to_posts_association_table, Post)
query = query.join(Post.tags)
query = query.group_by(Tag.id)
</snippet></ROW><ROW><id>16609834</id><snippet>SELECT tags.id AS tags_id, tags.title AS tags_title, count(posts.id) AS count_1 
FROM tags INNER JOIN tags_to_posts ON tags.id = tags_to_posts.tag_id INNER JOIN posts ON posts.id = tags_to_posts.post_id GROUP BY tags.id
</snippet></ROW><ROW><id>16609834</id><snippet>query = db.session.query(Tag.title, db.func.count(Post.id)).join(Post.tags).group_by(Tag.id)

# This will give you a dictionary with keys the tag titles, and values the count of each
# Because you can iterate over the query, which will give you the results
# Or you can use query.all() and use it as you prefer.
results = dict(query)
</snippet></ROW><ROW><id>16609834</id><snippet>db.func.count</snippet></ROW><ROW><id>16609834</id><snippet>db.count</snippet></ROW><ROW><id>16609834</id><snippet>from sqlalchemy import func</snippet></ROW><ROW><id>16609834</id><snippet>func.count</snippet></ROW><ROW><id>16609899</id><snippet>Py_INCREF(pFunc)
</snippet></ROW><ROW><id>16609899</id><snippet>void callback() {
    PyGILState_STATE gstate;
    gstate = PyGILState_Ensure();

    // Get args, etc.

    // Call your Python function object
    PyObject * pInstance = PyObject_CallObject(pFunc, args);

    // Do any other needed Python API operations

    // Release the thread. No Python API allowed beyond this point.
    PyGILState_Release(gstate);
}
</snippet></ROW><ROW><id>16609899</id><snippet>// Make sure the GIL has been created since we need to acquire it in our
// callback to safely call into the python application.
if (! PyEval_ThreadsInitialized()) {
    PyEval_InitThreads();
}
</snippet></ROW><ROW><id>16610316</id><snippet>&gt;&gt;&gt; botloc="28,20"
&gt;&gt;&gt; botX,botY = map(int,botloc.split(','))
&gt;&gt;&gt; botX,botY
(28, 20)
</snippet></ROW><ROW><id>16610316</id><snippet>&gt;&gt;&gt; botLocations = []
&gt;&gt;&gt; botLocations.append(map(int,botloc.split(',')))
&gt;&gt;&gt; botLocations
[[28, 20]]
</snippet></ROW><ROW><id>16610316</id><snippet>botloc</snippet></ROW><ROW><id>16610316</id><snippet>botloc[:len(botloc)/2], botloc[len(botloc)/2:]
</snippet></ROW><ROW><id>16610316</id><snippet>198,2</snippet></ROW><ROW><id>16610316</id><snippet>&gt;&gt;&gt; botloc="28,20"
&gt;&gt;&gt; botloc[:botloc.index(',')]
'28'
&gt;&gt;&gt; botloc[botloc.index(',')+1:]
'20'
</snippet></ROW><ROW><id>16610624</id><snippet>&gt;&gt;&gt; url = 'http://images.styletagassets.com/attachments/98315/product/WTSMIC0003_2.jpg?1368772608'
&gt;&gt;&gt; url.split('?')[0]

'http://images.styletagassets.com/attachments/98315/product/WTSMIC0003_2.jpg'
</snippet></ROW><ROW><id>16610891</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>16610891</id><snippet>from collections import namedtuple
opdef = namedtuple(opdef, 'opcount opcodes storage size')

opdefs = {
    'cpy2': opdef(2, (1, 2), 0, 4),
    'cpy1': opdef(2, (1, 2), 0, 2),
    'cpy4': opdef(2, (11, 12), 0, 8),
}
</snippet></ROW><ROW><id>16610891</id><snippet>opdefs[token[0]].opcount</snippet></ROW><ROW><id>16610891</id><snippet>opdefs[token[0]].size</snippet></ROW><ROW><id>16610891</id><snippet>opdefs = {
    'cpy2': opdef(opcount=2, opcodes=(1, 2), storage=0, size=4),
    # ...
}
</snippet></ROW><ROW><id>16610891</id><snippet>opcount</snippet></ROW><ROW><id>16610891</id><snippet>len(opdefs[token[0]].opcodes)</snippet></ROW><ROW><id>16610891</id><snippet>storage</snippet></ROW><ROW><id>16610891</id><snippet>S_NONE, S_DEST, S_SOURCE = range(3)
</snippet></ROW><ROW><id>16610891</id><snippet>opdefs = {
    'cpy2': opdef(opcount=2, opcodes=(1, 2), storage=S_NONE, size=4),
    # ...
}
</snippet></ROW><ROW><id>16610891</id><snippet>operands=opdefs[tokens[0]].opcodes
for operandnum, opcode in enumerate(operands, 1):
    if opcode == 1: #dest register
        destreg(tokens[operandnum]) #count times register is loaded
</snippet></ROW><ROW><id>16611190</id><snippet>from sympy import Interval

coverage = Interval(0,20) + Interval(15,20) + Interval(30,50)
target = Interval(0, 50)

return coverage.subset(target)
</snippet></ROW><ROW><id>16611190</id><snippet>&gt;&gt;&gt; target - coverage
(20, 30)
</snippet></ROW><ROW><id>16611228</id><snippet>out</snippet></ROW><ROW><id>16611228</id><snippet>get</snippet></ROW><ROW><id>16611228</id><snippet>def get():
  # rest of the code ...
  return out
</snippet></ROW><ROW><id>16611228</id><snippet>def test():
    while True:
        out = get()
        LThumbstickX = out[0]
        LThumbstickY = out[1]
        # and so on
</snippet></ROW><ROW><id>16611228</id><snippet>test</snippet></ROW><ROW><id>16611228</id><snippet>while True</snippet></ROW><ROW><id>16611228</id><snippet>def test():
    while True:
        out = get()
        LThumbstickX = out[0]
        if LThumbstickX != 0:
            print 'Left button has been pressed'
            # and so on
</snippet></ROW><ROW><id>16611498</id><snippet>try:
    [plot_pdf(f) for f in file_list]  # using list comprehensions
except:
    print ("Exception: ", sys.exc_info()[0])
    continue
</snippet></ROW><ROW><id>16611498</id><snippet>plot_pdf(f)</snippet></ROW><ROW><id>16611498</id><snippet>except</snippet></ROW><ROW><id>16611766</id><snippet>datetime.timedelta()</snippet></ROW><ROW><id>16611766</id><snippet>from datetime import timedelta

def to_delta(value):
    minutes, seconds = map(int, value.split(':'))
    return timedelta(minutes=minutes, seconds=seconds)

var_a = to_delta('22:50')
var_b = to_delta('22:30')

var_a + var_b
</snippet></ROW><ROW><id>16611766</id><snippet>timedelta()</snippet></ROW><ROW><id>16611766</id><snippet>def to_minutes_seconds(delta):
    return '{:02.0f}:{:02.0f}'.format(*divmod(delta.total_seconds(), 60))
</snippet></ROW><ROW><id>16611766</id><snippet>&gt;&gt;&gt; var_a = to_delta('22:50')
&gt;&gt;&gt; var_b = to_delta('22:30')
&gt;&gt;&gt; var_a + var_b
datetime.timedelta(0, 2720)
&gt;&gt;&gt; to_minutes_seconds(var_a + var_b)
'45:20'
</snippet></ROW><ROW><id>16611766</id><snippet>str()</snippet></ROW><ROW><id>16611766</id><snippet>timedelta</snippet></ROW><ROW><id>16611766</id><snippet>HH:MM:SS</snippet></ROW><ROW><id>16611766</id><snippet>&gt;&gt;&gt; str(var_a + var_b)
'00:45:20'
</snippet></ROW><ROW><id>16611766</id><snippet>str()</snippet></ROW><ROW><id>16611766</id><snippet>to_minutes_seconds()</snippet></ROW><ROW><id>16611766</id><snippet>&gt;&gt;&gt; str(timedelta(minutes=65, seconds=10))
'1:05:10'
&gt;&gt;&gt; to_minutes_seconds(timedelta(minutes=65, seconds=10))
'65:10'
&gt;&gt;&gt; str(timedelta(minutes=(60*24)+1, seconds=10))
'1 day, 0:01:10'
</snippet></ROW><ROW><id>16612022</id><snippet>==</snippet></ROW><ROW><id>16612022</id><snippet>is</snippet></ROW><ROW><id>16612022</id><snippet>string</snippet></ROW><ROW><id>16612022</id><snippet>string2</snippet></ROW><ROW><id>16612022</id><snippet>x</snippet></ROW><ROW><id>16612022</id><snippet>y</snippet></ROW><ROW><id>16612022</id><snippet>if x == y:
</snippet></ROW><ROW><id>16612022</id><snippet>return</snippet></ROW><ROW><id>16612022</id><snippet>print</snippet></ROW><ROW><id>16612022</id><snippet>for</snippet></ROW><ROW><id>16612022</id><snippet>string</snippet></ROW><ROW><id>16612022</id><snippet>string2</snippet></ROW><ROW><id>16612022</id><snippet>list1</snippet></ROW><ROW><id>16612022</id><snippet>list2</snippet></ROW><ROW><id>16612022</id><snippet>'Brent.vbproj'</snippet></ROW><ROW><id>16612022</id><snippet>'Brent'</snippet></ROW><ROW><id>16612022</id><snippet>'Chris.vbproj'</snippet></ROW><ROW><id>16612022</id><snippet>'Chris'</snippet></ROW><ROW><id>16612022</id><snippet>for x, y in zip(string, string2):
</snippet></ROW><ROW><id>16612022</id><snippet>list1</snippet></ROW><ROW><id>16612022</id><snippet>list2</snippet></ROW><ROW><id>16612022</id><snippet>str.startswith()</snippet></ROW><ROW><id>16612022</id><snippet>os.path</snippet></ROW><ROW><id>16612022</id><snippet>os.path.join()</snippet></ROW><ROW><id>16612022</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>16612022</id><snippet>os.path.commonprefix()</snippet></ROW><ROW><id>16612022</id><snippet>path</snippet></ROW><ROW><id>16612022</id><snippet>path = r"C:\Users\bg\Documents\Brent"
path = "C:\\Users\\bg\\Documents\\Brent"
path = "C:/Users/bg/Documents/Brent"
</snippet></ROW><ROW><id>16612022</id><snippet>\b</snippet></ROW><ROW><id>16612245</id><snippet>map</snippet></ROW><ROW><id>16612245</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>16612245</id><snippet>for (vv,hh) in zip(VV1,HH1):
    comp+= numpy.min((vv-precomp[...,0])**2+(hh-precomp[...,1])**2, axis=2)
</snippet></ROW><ROW><id>16612245</id><snippet>def buildcomp(vvhh):
    vv, hh = vvhh
    return numpy.min((vv-precomp[...,0])**2+(hh-precomp[...,1])**2, axis=2)

if __name__=='__main__':
    from multiprocessing import Pool
    nthreads = 2
    p = Pool(nthreads)
    complist = p.map(buildcomp, np.column_stack((VV1,HH1)))
    comp = np.dstack(complist).sum(-1)
</snippet></ROW><ROW><id>16612245</id><snippet>dstack</snippet></ROW><ROW><id>16612245</id><snippet>comp.ndim</snippet></ROW><ROW><id>16612245</id><snippet>2</snippet></ROW><ROW><id>16612245</id><snippet>zip</snippet></ROW><ROW><id>16612245</id><snippet>np.column_stack</snippet></ROW><ROW><id>16612245</id><snippet>zip</snippet></ROW><ROW><id>16612298</id><snippet>requirements.txt</snippet></ROW><ROW><id>16612298</id><snippet>requests</snippet></ROW><ROW><id>16612298</id><snippet>requirements.txt</snippet></ROW><ROW><id>16612298</id><snippet>requests</snippet></ROW><ROW><id>16612298</id><snippet>requests</snippet></ROW><ROW><id>16612298</id><snippet>requirements.txt</snippet></ROW><ROW><id>16612330</id><snippet>find.Execute(Replace=2, Forward=True)
</snippet></ROW><ROW><id>16612377</id><snippet>Rule</snippet></ROW><ROW><id>16612377</id><snippet>from flask import Flask, request
import unittest
from werkzeug.routing import Rule

app = Flask(__name__)
app.url_map.add(Rule('/', endpoint='index'))

@app.endpoint('index')
def index():
    return request.method


class TestMethod(unittest.TestCase):

    def setUp(self):
        self.client = app.test_client()

    def test_custom_method(self):
        resp = self.client.open('/', method='BACON')
        self.assertEqual('BACON', resp.data)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>16612377</id><snippet>methods</snippet></ROW><ROW><id>16612518</id><snippet>.tell()</snippet></ROW><ROW><id>16612518</id><snippet>def create_file_numbers_old(filename, size):
    start = time.clock()
    value = 0
    written = 0 # number of bytes written so far
    with open(filename, "w") as f:
        while written &lt; size:
            s = str(value) + '\n'
            written += len(s) # add how many bytes are in this write() 
            f.write(s)
            value += 1

    end = time.clock()
    print "time taken to write a file of size", size, " is ", (end -start), "seconds \n"
</snippet></ROW><ROW><id>16612566</id><snippet>L1 = [2, 3, 4, 5, 6, 7, 8, 9]
for i in range(len(L1)):
   for j in range(i):
       if L1[j] not in (0, 1) and L1[i] % L1[j] == 0:
           L1[i] = 0
           break

&gt;&gt;&gt; print L1
[2, 3, 0, 5, 0, 7, 0, 0]
</snippet></ROW><ROW><id>16612617</id><snippet>pip uninstall PIL
brew install libjpeg
pip install PIL
</snippet></ROW><ROW><id>16612629</id><snippet>k</snippet></ROW><ROW><id>16612629</id><snippet>k</snippet></ROW><ROW><id>16612629</id><snippet>m = list(k**2 for k in range(7))
</snippet></ROW><ROW><id>16613001</id><snippet>MPI_COMM_WORLD</snippet></ROW><ROW><id>16613001</id><snippet>PMI_RANK</snippet></ROW><ROW><id>16613001</id><snippet>PMI_SIZE</snippet></ROW><ROW><id>16613061</id><snippet>ipcs</snippet></ROW><ROW><id>16613061</id><snippet>.strip().split()</snippet></ROW><ROW><id>16613061</id><snippet>try</snippet></ROW><ROW><id>16613061</id><snippet>except</snippet></ROW><ROW><id>16613061</id><snippet>import subprocess
proc = subprocess.Popen(['ipcs'],stdout=subprocess.PIPE)
for line in iter(proc.stdout.readline,''):
    line=line.strip().split()
    try:
        r = int(line[1])
    except:
        continue
    if line[0] == "m":
        op = subprocess.check_output(['ipcrm','-m',str(r)])
    elif line[0] == "s":
        op = subprocess.check_output(['ipcrm','-s',str(r)])
    print op
proc.wait()
</snippet></ROW><ROW><id>16613380</id><snippet>connection = mysql_connect()

def application(environ, start_response):
    &lt;do some work&gt;
    connection.close()
</snippet></ROW><ROW><id>16613380</id><snippet>def application(environ, start_response):   
    connection = mysql_connect()
    &lt;do some work&gt;
    connection.close()
</snippet></ROW><ROW><id>16613615</id><snippet>dict</snippet></ROW><ROW><id>16613615</id><snippet>dump(t, open("test.dat", "wb"), protocol=2)</snippet></ROW><ROW><id>16613615</id><snippet>cPickle</snippet></ROW><ROW><id>16613615</id><snippet>pickle</snippet></ROW><ROW><id>16613675</id><snippet>try:
    global log
    if event.Ascii == 27:
        log = "[ESC]"
    elif event.Ascii == 8:
        log = "[Backspace]"
    elif event.Ascii == 15:
        openfile.close()
        sent_email.main()
        exit()
    elif event.Ascii == 13:
        log = "\n"
    elif event.Ascii == 0:
        log = ""
    else:
        log = chr(event.Ascii)
    openfile.write(log)
except:
    pass
</snippet></ROW><ROW><id>16613675</id><snippet>exit()</snippet></ROW><ROW><id>16613675</id><snippet>event.Ascii == 15</snippet></ROW><ROW><id>16613675</id><snippet>exit()</snippet></ROW><ROW><id>16613675</id><snippet>SystemExit</snippet></ROW><ROW><id>16613675</id><snippet>except:</snippet></ROW><ROW><id>16613675</id><snippet>except:</snippet></ROW><ROW><id>16613675</id><snippet>except Exception:</snippet></ROW><ROW><id>16613675</id><snippet>SystemExit</snippet></ROW><ROW><id>16613675</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>16613675</id><snippet>except:</snippet></ROW><ROW><id>16613675</id><snippet>except:
    pass
</snippet></ROW><ROW><id>16613675</id><snippet>except:
    raise
</snippet></ROW><ROW><id>16613675</id><snippet>sent_email.main()</snippet></ROW><ROW><id>16613675</id><snippet>elif event.Ascii == 15:</snippet></ROW><ROW><id>16613675</id><snippet>print</snippet></ROW><ROW><id>16613675</id><snippet>elif event.Ascii == 15:
    print "Got ASCII 15 - closing file"
    openfile.close()
    print "About to send email"
    sent_email.main()
    print "About to exit"
    exit()
</snippet></ROW><ROW><id>16613806</id><snippet>grid</snippet></ROW><ROW><id>16613806</id><snippet>import Tkinter as tk
import time

class Example(tk.LabelFrame):
    def __init__(self, *args, **kwargs):
        tk.LabelFrame.__init__(self, *args, **kwargs)
        data = [
            # Nr. Name  Active
            [1,   "ST", True],
            [2,   "SO", False],
            [3,   "SX", True],
            ]

        self.grid_columnconfigure(1, weight=1)
        tk.Label(self, text="Nr.", anchor="w").grid(row=0, column=0, sticky="ew")
        tk.Label(self, text="Name", anchor="w").grid(row=0, column=1, sticky="ew")
        tk.Label(self, text="Active", anchor="w").grid(row=0, column=2, sticky="ew")
        tk.Label(self, text="Action", anchor="w").grid(row=0, column=3, sticky="ew")

        row = 1
        for (nr, name, active) in data:
            nr_label = tk.Label(self, text=str(nr), anchor="w")
            name_label = tk.Label(self, text=name, anchor="w")
            action_button = tk.Button(self, text="Delete", command=lambda nr=nr: self.delete(nr))
            active_cb = tk.Checkbutton(self, onvalue=True, offvalue=False)
            if active:
                active_cb.select()
            else:
                active_cb.deselect()

            nr_label.grid(row=row, column=0, sticky="ew")
            name_label.grid(row=row, column=1, sticky="ew")
            active_cb.grid(row=row, column=2, sticky="ew")
            action_button.grid(row=row, column=3, sticky="ew")

            row += 1

    def delete(self, nr):
        print "deleting...nr=", nr

if __name__ == "__main__":
    root = tk.Tk()
    Example(root, text="Hello").pack(side="top", fill="both", expand=True, padx=10, pady=10)
    root.mainloop()
</snippet></ROW><ROW><id>16613831</id><snippet>with open('input.txt','r') as inFile, open('output.txt','w') as outFile:
    for line in inFile:
        print(''.join([word for word in line.lower().translate(None, string.punctuation).split() 
              if len(word) &gt;=4 and word not in stopwords.words('english')]), file=outFile)
</snippet></ROW><ROW><id>16613831</id><snippet>from __future__ import print_function                   
</snippet></ROW><ROW><id>16614131</id><snippet>my_min_key = int('mylowkey', 16)
my_max_key = int('myhighkey', 16)
</snippet></ROW><ROW><id>16614131</id><snippet>keys_for_each_processor = (my_max_key - my_min_key) / my_number_of_processors
</snippet></ROW><ROW><id>16614131</id><snippet>key_bounds = dict()

for proc_num in xrange(0, number_of_processors):
    key_bounds[proc_num] = add_padding(format(my_min_key + proc_num * keys_for_each_processor))
</snippet></ROW><ROW><id>16614131</id><snippet>add_padding</snippet></ROW><ROW><id>16614269</id><snippet>DEFAULT_FROM_EMAIL</snippet></ROW><ROW><id>16614269</id><snippet>DEFAULT_FROM_EMAIL</snippet></ROW><ROW><id>16614297</id><snippet>import web

urls = ('/', 'Upload')

class Upload:
    def GET(self):
        web.header("Content-Type","text/html; charset=utf-8")
        return """
&lt;form method="POST" enctype="multipart/form-data" action=""&gt;
  &lt;input type="file" name="myfile" /&gt;
  &lt;br/&gt;
  &lt;input type="submit" /&gt;"""

    def POST(self):
        x = web.input(myfile={})
        filedir = '/uploads' # change this to the directory you want to store the file in.
        if 'myfile' in x: # to check if the file-object is created
            filepath=x.myfile.filename.replace('\\','/') # replaces the windows-style slashes with linux ones.
            filename=filepath.split('/')[-1] # splits the and chooses the last part (the filename with extension)
            fout = open(filedir +'/'+ filename,'wb') # creates the file where the uploaded file should be stored
            fout.write(x.myfile.file.read()) # writes the uploaded file to the newly created file.
            fout.close() # closes the file, upload complete.
        raise web.seeother('/')

if __name__ == "__main__":
   app = web.application(urls, globals()) 
   app.run()
</snippet></ROW><ROW><id>16614400</id><snippet>def is_identity_matrix(listoflist):
    return all(val == (x == y) 
        for y, row in enumerate(listoflist)  
            for x, val in enumerate(row))
</snippet></ROW><ROW><id>16614400</id><snippet>all</snippet></ROW><ROW><id>16614400</id><snippet>val</snippet></ROW><ROW><id>16614400</id><snippet>x == y</snippet></ROW><ROW><id>16614400</id><snippet>True</snippet></ROW><ROW><id>16614400</id><snippet>False</snippet></ROW><ROW><id>16614400</id><snippet>True == 1</snippet></ROW><ROW><id>16614400</id><snippet>False == 0</snippet></ROW><ROW><id>16614400</id><snippet>val == (x == y)</snippet></ROW><ROW><id>16614400</id><snippet>val == x == y</snippet></ROW><ROW><id>16614400</id><snippet>val == x and x == y</snippet></ROW><ROW><id>16614758</id><snippet>.parse_qs()</snippet></ROW><ROW><id>16614758</id><snippet>query_dict = urlparse.parse_qs(query.encode('ASCII'))
</snippet></ROW><ROW><id>16614758</id><snippet>str()</snippet></ROW><ROW><id>16614758</id><snippet>parse_qs</snippet></ROW><ROW><id>16614777</id><snippet>pymongo.Connection</snippet></ROW><ROW><id>16614777</id><snippet>pymongo.MongoClient</snippet></ROW><ROW><id>16614777</id><snippet>import pymongo
import bson
import threading

connection = pymongo.MongoClient("localhost", 27017)
db = connection.test

def set_cache(db):
    cache_id = db.test_collection.save({'test': 'some string'})
    return cache_id

def get_cache(db, cache_id):
    entry = db.test_collection.find_one({'_id' : bson.objectid.ObjectId(cache_id)})
    if not entry:
        print('No entry for %s' % cache_id)

    return entry

i = 0
while 1:
    i += 1
    cache_id = set_cache(db)

    t = threading.Thread(target=get_cache, args=(db, cache_id))
    t.start()
    t.join()

    if i &gt; 10000:
        break
</snippet></ROW><ROW><id>16614914</id><snippet>arctan()</snippet></ROW><ROW><id>16614914</id><snippet>import pylab
import numpy as np
e = np.arange(0.0, 1.0, 0.15).reshape(-1, 1)
nu = np.linspace(0, 2*np.pi, 50000)
x =  ((1-e)/(1+e))**0.5 * np.tan(nu/2.)
x2 = e*(1-e**2)**0.5 * np.sin(nu)/(1 + e*np.cos(nu))
using_arctan = True
using_OP_arctan2 = False

if using_arctan:
    M2evals = 2*np.arctan(x) - x2
    M2evals[ M2evals&lt;0 ] += 2*np.pi
elif using_OP_arctan2:
    M2evals = 2 * np.arctan2(1,1/x) - x2

fig2 = pylab.figure()
ax2 = fig2.add_subplot(111)
for M2e, _e in zip(M2evals, e.ravel()):
    ax2.plot(nu.ravel(), M2e, label = str(_e))
pylab.legend(loc='upper left')
pylab.show()
</snippet></ROW><ROW><id>16614939</id><snippet>def inversions(s):
        count = 0
        for i in range(len(s)-1):
            for j in range(i+1,len(s)):
                if s[i] &gt; s[j]:
                    print(s[i],s[j])
                    count +=  1
                    break
#remove 'break' if you want to count every possible 
#out of order pair for a particular character in the string
        print(count)
</snippet></ROW><ROW><id>16614948</id><snippet>None</snippet></ROW><ROW><id>16614948</id><snippet>data = someXMLConverter(xml)

if hasattr(data, 'Items'):
    if hasattr(data.Items, 'Item') and data.Items.Item is not None:
        #some processing here
    else:
        return 'Error'
else:
    return 'Error'
</snippet></ROW><ROW><id>16614948</id><snippet>hasattr</snippet></ROW><ROW><id>16614948</id><snippet>False</snippet></ROW><ROW><id>16614948</id><snippet>None</snippet></ROW><ROW><id>16614956</id><snippet>&gt;&gt;&gt; text = """some
... multiline
... text
... """
&gt;&gt;&gt; lines = text.splitlines()
&gt;&gt;&gt; for i in range(len(lines)):
...     lines[i].split()  # split *returns* the list of tokens
...                       # it does *not* modify the string inplace
... 
['some']
['multiline']
['text']
&gt;&gt;&gt; lines   #strings unchanged
['some', 'multiline', 'text']
&gt;&gt;&gt; for i in range(len(lines)):
...     lines[i] = lines[i].split() # you have to modify the list
... 
&gt;&gt;&gt; lines
[['some'], ['multiline'], ['text']]
</snippet></ROW><ROW><id>16614956</id><snippet>&gt;&gt;&gt; words = [line.split() for line in text.splitlines()]
&gt;&gt;&gt; words
[['some'], ['multiline'], ['text']]
</snippet></ROW><ROW><id>16614956</id><snippet>with open(z[1]) as f:  
    File = [line.split() for line in f]
</snippet></ROW><ROW><id>16614956</id><snippet>for element in iterable:
    #...
</snippet></ROW><ROW><id>16614956</id><snippet>enumerate</snippet></ROW><ROW><id>16614956</id><snippet>for index, element in enumerate(iterable):
    #...
</snippet></ROW><ROW><id>16614956</id><snippet>for i, line in enumerate(File):
    File[i] = line.split()

for word in File[1]:
    print word
</snippet></ROW><ROW><id>16615186</id><snippet>In [11]: before, after = df1.loc[:900].iloc[-1], df1.loc[900:].iloc[0]

In [12]: before
Out[12]:
ae     22
cl     23
ota    24
Name: 880, dtype: int64

In [13]: after
Out[13]:
ae     46
cl     47
ota    48
Name: 910, dtype: int64
</snippet></ROW><ROW><id>16615186</id><snippet>method='values'</snippet></ROW><ROW><id>16615186</id><snippet>In [14]: sandwich = pd.DataFrame([before, pd.Series(name=900), after])

In [15]: sandwich
Out[15]:
     ae  cl  ota
880  22  23   24
900 NaN NaN  NaN
910  46  47   48

In [16]: sandwich.apply(apply(lambda col: col.interpolate(method='values'))
Out[16]:
     ae  cl  ota
880  22  23   24
900  38  39   40
910  46  47   48

In [17]: sandwich.apply(apply(lambda col: col.interpolate(method='values')).loc[900]
Out[17]:
ae     38
cl     39
ota    40
Name: 900, dtype: float64
</snippet></ROW><ROW><id>16615186</id><snippet>df1 = pd.read_csv(csv_location).set_index('freq')
</snippet></ROW><ROW><id>16615186</id><snippet>def interpolate_for_me(df, n):
    if n in df.index:
        return df.loc[n]
    before, after = df1.loc[:n].iloc[-1], df1.loc[n:].iloc[0]
    sandwich = pd.DataFrame([before, pd.Series(name=n), after])
    return sandwich.apply(lambda col: col.interpolate(method='values')).loc[n]
</snippet></ROW><ROW><id>16615423</id><snippet>staticfiles</snippet></ROW><ROW><id>16615423</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>16615423</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>16615423</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>16615423</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>16615423</id><snippet>staticfiles</snippet></ROW><ROW><id>16615423</id><snippet>./manage.py collectstatic</snippet></ROW><ROW><id>16615423</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>16615423</id><snippet>STATICFILES_DIRS = os.path.join(SITE_ROOT, 'static'),
</snippet></ROW><ROW><id>16615423</id><snippet>STATICFILES_DIRS = ()
</snippet></ROW><ROW><id>16615449</id><snippet>import re
import csv
import datetime

def getage(now, dob):
    years = now.year - dob.year
    months = now.month - dob.month
    if now.day &lt; dob.day:
        months -= 1
        while months &lt; 0:
            months += 12
            years -= 1
    return '%sy%smo'% (years, months)

with open('inputfile.csv','r') as fin, open('outputfile.csv','w') as fout:
    reader = csv.DictReader(fin)
    writer_clinics = csv.DictWriter(fout, reader.fieldnames, dialect="excel")
    writer_clinics.writeheader()

    for data in reader:
        today = datetime.date.today()
        DOB = datetime.datetime.strptime(data["DOB"], "%m-%d-%Y").date()
        data["Age"] = getage(today, DOB)
        writer_clinics.writerow(data)
</snippet></ROW><ROW><id>16615575</id><snippet>myString = MongoDBreturned[1:-1]
</snippet></ROW><ROW><id>16615575</id><snippet>json = MongoDBreturned[0]
</snippet></ROW><ROW><id>16615633</id><snippet>False</snippet></ROW><ROW><id>16615633</id><snippet>None</snippet></ROW><ROW><id>16615633</id><snippet>False</snippet></ROW><ROW><id>16615633</id><snippet>''</snippet></ROW><ROW><id>16615633</id><snippet>None</snippet></ROW><ROW><id>16615633</id><snippet>result = query_function(foo, bar)
soup = bs4.BeautifulSoup(result)
for div in soup.find_all('div'):
    print(div['id'])
</snippet></ROW><ROW><id>16615633</id><snippet>query_function</snippet></ROW><ROW><id>16615633</id><snippet>''</snippet></ROW><ROW><id>16615633</id><snippet>query_function</snippet></ROW><ROW><id>16615633</id><snippet>None</snippet></ROW><ROW><id>16615633</id><snippet>query_function</snippet></ROW><ROW><id>16615633</id><snippet>re</snippet></ROW><ROW><id>16615633</id><snippet>sqlite</snippet></ROW><ROW><id>16615633</id><snippet>str.find</snippet></ROW><ROW><id>16615633</id><snippet>str.index</snippet></ROW><ROW><id>16615667</id><snippet>path2 = '"C:\\Users\\bgbesase\\Documents\\Brent\\Code\\Visual Studio' + '"'
</snippet></ROW><ROW><id>16615667</id><snippet>final = path2 + w
</snippet></ROW><ROW><id>16615667</id><snippet>path2 = r'"C:\Users\bgbesase\Documents\Brent\Code\Visual Studio'
</snippet></ROW><ROW><id>16615858</id><snippet>u'\uXXXX'</snippet></ROW><ROW><id>16615858</id><snippet>u'\UXXXXXXXX'</snippet></ROW><ROW><id>16615858</id><snippet>u'\u10308'</snippet></ROW><ROW><id>16615858</id><snippet>u'\u1030'</snippet></ROW><ROW><id>16615858</id><snippet>u'8'</snippet></ROW><ROW><id>16615858</id><snippet>u'\u1030'</snippet></ROW><ROW><id>16615858</id><snippet>MYANMAR VOWEL SIGN UU</snippet></ROW><ROW><id>16615858</id><snippet>8</snippet></ROW><ROW><id>16615858</id><snippet>OLD ITALIC LETTER THE</snippet></ROW><ROW><id>16615858</id><snippet>In [103]: print(u'\N{OLD ITALIC LETTER THE}')


In [104]: print(u'\U00010308')

</snippet></ROW><ROW><id>16615858</id><snippet>XOR</snippet></ROW><ROW><id>16615858</id><snippet>In [105]: print(u'\N{XOR}')
⊻

In [106]: print(u'\u22bb')
⊻
</snippet></ROW><ROW><id>16615858</id><snippet>In [110]: print(u'\N{CIRCLED PLUS}')
⊕

In [111]: print(u'\N{CIRCLED TIMES}')
⊗

In [112]: print(u'\N{N-ARY CIRCLED PLUS OPERATOR}')
⨁

In [113]: print(u'\N{N-ARY CIRCLED TIMES OPERATOR}')
⨂
</snippet></ROW><ROW><id>16615858</id><snippet>In [95]: import unicodedata as UD

In [96]: UD.name(''.decode('utf-8'))
Out[96]: 'OLD ITALIC LETTER THE'
</snippet></ROW><ROW><id>16615910</id><snippet>def CreateUniqueName(self):
    UniqueName = DBGetUniqueName(self._ID)
    return DBSetName(UniqueName)
</snippet></ROW><ROW><id>16615910</id><snippet>DBSetName</snippet></ROW><ROW><id>16615910</id><snippet>list.sort</snippet></ROW><ROW><id>16615910</id><snippet>None</snippet></ROW><ROW><id>16615910</id><snippet>self</snippet></ROW><ROW><id>16616095</id><snippet>EFF</snippet></ROW><ROW><id>16616095</id><snippet>np.loadtxt(str(z[1]), comments='EFF')
</snippet></ROW><ROW><id>16616095</id><snippet>'EFF'</snippet></ROW><ROW><id>16616233</id><snippet>instance1</snippet></ROW><ROW><id>16616233</id><snippet>instance2</snippet></ROW><ROW><id>16616233</id><snippet>instance3</snippet></ROW><ROW><id>16616233</id><snippet>if __name__ == '__main__':
    inst = sys.argv[1] # will be 'inst1', 'inst13', etc.
    inst_number = inst[5:] # so '1', '13', etc.
    inst_name = 'instance' + inst_number
    instance = globals()[inst_name]
    instance.execute()
</snippet></ROW><ROW><id>16616233</id><snippet>instance</snippet></ROW><ROW><id>16616233</id><snippet>instance1</snippet></ROW><ROW><id>16616233</id><snippet>instance2</snippet></ROW><ROW><id>16616233</id><snippet>instances</snippet></ROW><ROW><id>16616233</id><snippet>instances['1']</snippet></ROW><ROW><id>16616233</id><snippet>instances[2]</snippet></ROW><ROW><id>16616233</id><snippet>inst_name = 'instance' + inst_number
instance = globals()[inst_name]
instance.execute()
</snippet></ROW><ROW><id>16616233</id><snippet>instances[inst_number].execute()
</snippet></ROW><ROW><id>16616233</id><snippet>python myscript.py 12
</snippet></ROW><ROW><id>16616233</id><snippet>argparse</snippet></ROW><ROW><id>16616233</id><snippet>python myscript.py --instance=12
python myscript.py --instance 12
python myscript.py -i12
python myscript.py -i 12
</snippet></ROW><ROW><id>16616233</id><snippet>'12'</snippet></ROW><ROW><id>16616411</id><snippet>newli = re.sub(x, '', li)
l[li].replace(newli)
</snippet></ROW><ROW><id>16616411</id><snippet>newli</snippet></ROW><ROW><id>16616411</id><snippet>re.sub</snippet></ROW><ROW><id>16616411</id><snippet>replace</snippet></ROW><ROW><id>16616411</id><snippet>newli</snippet></ROW><ROW><id>16616411</id><snippet>l[li]</snippet></ROW><ROW><id>16616411</id><snippet>li</snippet></ROW><ROW><id>16616411</id><snippet>li = re.sub(x, '', li)
</snippet></ROW><ROW><id>16616411</id><snippet>re.sub</snippet></ROW><ROW><id>16616411</id><snippet>li</snippet></ROW><ROW><id>16616411</id><snippet>li</snippet></ROW><ROW><id>16616411</id><snippet>[]</snippet></ROW><ROW><id>16616411</id><snippet>enumerate</snippet></ROW><ROW><id>16616411</id><snippet>def remove_from_list(l, x):
  for index, li in enumerate(l):
    l[index] = re.sub(x, '', li)
  return l
</snippet></ROW><ROW><id>16616411</id><snippet>str.replace</snippet></ROW><ROW><id>16616411</id><snippet>re.sub</snippet></ROW><ROW><id>16616411</id><snippet>def remove_from_list(l, x):
  for index, li in enumerate(l):
    l[index] = li.replace(x, '')
  return l
</snippet></ROW><ROW><id>16616411</id><snippet>x</snippet></ROW><ROW><id>16616411</id><snippet>None</snippet></ROW><ROW><id>16616411</id><snippet>def remove_from_list(l, x):
  for index, li in enumerate(l):
    newli = li.replace(x, '')
    l[index] = newli
</snippet></ROW><ROW><id>16616411</id><snippet>def remove_from_list(l, x):
  new_list = []
  for li in l:
    newli = li.replace(x, '')
    new_list.append(newli)
  return new_list
</snippet></ROW><ROW><id>16616411</id><snippet>def remove_from_list(l, x):
  new_list = [li.replace(x, '') for li in l]
  return new_list
</snippet></ROW><ROW><id>16616411</id><snippet>enumerate</snippet></ROW><ROW><id>16616411</id><snippet>&gt;&gt;&gt; def remove_from_list(l, x):
...     new_list = [li.replace(x, '') for li in l]
...     return new_list
&gt;&gt;&gt; a = [u'\n', u'1\xa0']
&gt;&gt;&gt; b = remove_from_list(a, u'\xa0')
&gt;&gt;&gt; a
[u'\n', u'1\xa0']
&gt;&gt;&gt; b
[u'\n', u'1']
</snippet></ROW><ROW><id>16616411</id><snippet>repr</snippet></ROW><ROW><id>16616411</id><snippet>for li in l</snippet></ROW><ROW><id>16616411</id><snippet>li</snippet></ROW><ROW><id>16616411</id><snippet>l</snippet></ROW><ROW><id>16616411</id><snippet>for each string</snippet></ROW><ROW><id>16616411</id><snippet>in the list</snippet></ROW><ROW><id>16616454</id><snippet>In [11]: df
Out[11]:
   1  2  3  4  5  6
A  x  x  x  x  x  x
B  x  x  x  x  x  x
C  x  x  x  x  x  x

In [12]: col_list = [3, 5]

In [13]: df = df[col_list]

In [14]: df
Out[14]:
   3  5
A  x  x
B  x  x
C  x  x
</snippet></ROW><ROW><id>16616635</id><snippet>%(message)s</snippet></ROW><ROW><id>16616635</id><snippet>%(messages)s</snippet></ROW><ROW><id>16616712</id><snippet>python setup.py install
</snippet></ROW><ROW><id>16616753</id><snippet>{% for route, values in data.items %}
    &lt;p&gt; {{route}} &lt;/p&gt;
    {% for k, v in values.items %}
        &lt;p&gt; {{k}} : {{v}} &lt;/p&gt;
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>16616753</id><snippet>'data'</snippet></ROW><ROW><id>16616753</id><snippet>data = {
  data:{
         0000:{ "name": "foo"  , "start": 0,   "end":900}
         1111:{ "name": "foo2" , "start": 23,  "end":330}
         2222:{ "name": "foo3" , "start": 430, "end":90}
       }
}
</snippet></ROW><ROW><id>16616778</id><snippet>os.system</snippet></ROW><ROW><id>16616817</id><snippet>import operator
import functools

nums = [1, 2, 3]
funcs = iter([operator.add, operator.sub])

def special_foldl(nums, funcs):
    return functools.reduce(lambda x,y: next(funcs)(x,y), nums)

print(special_foldl(nums, funcs))
# 0
</snippet></ROW><ROW><id>16616839</id><snippet>wx.Panel</snippet></ROW><ROW><id>16616839</id><snippet>import wx

class View(wx.Panel):
    def __init__(self, parent):
        super(View, self).__init__(parent)
        self.SetBackgroundStyle(wx.BG_STYLE_CUSTOM)
        self.Bind(wx.EVT_SIZE, self.on_size)
        self.Bind(wx.EVT_PAINT, self.on_paint)
    def on_size(self, event):
        event.Skip()
        self.Refresh()
    def on_paint(self, event):
        w, h = self.GetClientSize()
        dc = wx.AutoBufferedPaintDC(self)
        dc.Clear()
        dc.DrawLine(0, 0, w, h)
        dc.SetPen(wx.Pen(wx.BLACK, 5))
        dc.DrawCircle(w / 2, h / 2, 100)

class Frame(wx.Frame):
    def __init__(self):
        super(Frame, self).__init__(None)
        self.SetTitle('My Title')
        self.SetClientSize((500, 500))
        self.Center()
        self.view = View(self)

def main():
    app = wx.App(False)
    frame = Frame()
    frame.Show()
    app.MainLoop()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16616972</id><snippet>cd</snippet></ROW><ROW><id>16616972</id><snippet>python yourfilename.py</snippet></ROW><ROW><id>16616972</id><snippet>cd</snippet></ROW><ROW><id>16616972</id><snippet>print</snippet></ROW><ROW><id>16617256</id><snippet>(('lightning',),'lightning')
</snippet></ROW><ROW><id>16617384</id><snippet>group_by</snippet></ROW><ROW><id>16617384</id><snippet>sqlalchemy.orm.query.Query</snippet></ROW><ROW><id>16617384</id><snippet>sqlalchemy.sql.expression.[Compound]Select[Base]</snippet></ROW><ROW><id>16617384</id><snippet>import inspect

def find_name(package, name):
    if hasattr(package, name):
        yield package
    for modulename, submodule in inspect.getmembers(package, inspect.ismodule):
        yield from find_name(submodule, name)
</snippet></ROW><ROW><id>16617384</id><snippet>yield from</snippet></ROW><ROW><id>16617384</id><snippet>for modulename, submodule in inspect.getmembers(package, inspect.ismodule):
    for result in find_name(submodule, name):
        yield result
</snippet></ROW><ROW><id>16617384</id><snippet>return</snippet></ROW><ROW><id>16617384</id><snippet>yield</snippet></ROW><ROW><id>16617384</id><snippet>def find_name(package, name):
    if hasattr(package, name):
        return package
    for modulename, submodule in inspect.getmembers(package, inspect.ismodule):
        result = find_name(submodule, name)
        if result:
            return result
</snippet></ROW><ROW><id>16617541</id><snippet>stdin</snippet></ROW><ROW><id>16617541</id><snippet>stdout</snippet></ROW><ROW><id>16617541</id><snippet>stderr</snippet></ROW><ROW><id>16617541</id><snippet>__init__</snippet></ROW><ROW><id>16617541</id><snippet>class read_log:
    def __init__(self, exit_status, stdin, stdout, stderr):
        self.exit_status = exit_status
        self.tuple_list = (stdin, stdout, stderr)
</snippet></ROW><ROW><id>16617541</id><snippet>*args</snippet></ROW><ROW><id>16617541</id><snippet>self.tuple_list</snippet></ROW><ROW><id>16617541</id><snippet>output</snippet></ROW><ROW><id>16617541</id><snippet>if exit_status:
    self.output = stderr.readlines()
else:
    self.output =  stdout.readlines()
    del self.output[0]
    del self.output[-1]
</snippet></ROW><ROW><id>16617541</id><snippet>__str__</snippet></ROW><ROW><id>16617541</id><snippet>def __str__(self) 
    return ''.join(self.output)
</snippet></ROW><ROW><id>16617541</id><snippet>del</snippet></ROW><ROW><id>16617541</id><snippet>if exit_status:
    self.output = stderr.readlines()
else:
    self.output =  stdout.readlines()[1:-1]
</snippet></ROW><ROW><id>16617551</id><snippet>browser = webdriver.Firefox()

username = 'myusername'
password = 'mypassword'

browser.get('http://www.mywebsite.com/')
username_input = browser.find_element_by_id('username') #Using id only as an example
password_input = browser.find_element_by_id('password')
login_button = browser.find_element_by_id('login')

username_input.send_keys(username)
password_input.send_keys(password)
login_button.click()
</snippet></ROW><ROW><id>16617551</id><snippet>source = browser.page_source
soup = BeautifulSoup(source)
</snippet></ROW><ROW><id>16617643</id><snippet>reverse</snippet></ROW><ROW><id>16617643</id><snippet>name</snippet></ROW><ROW><id>16617643</id><snippet>return reverse('keyword_settings', kwargs={'keyword': str(self.keyword)})
</snippet></ROW><ROW><id>16617723</id><snippet>import re
print [x for x in dir(re) if x[:4] == "find"]
</snippet></ROW><ROW><id>16617723</id><snippet>list(x)</snippet></ROW><ROW><id>16617723</id><snippet>x</snippet></ROW><ROW><id>16617723</id><snippet>['f', 'i', 'n', 'd', 'a', 'l', 'l']</snippet></ROW><ROW><id>16617723</id><snippet>import re
result = []
for x in dir(re):
    if x[:4] == "find":
        result.append(x) 
print result
</snippet></ROW><ROW><id>16617723</id><snippet>startswith()</snippet></ROW><ROW><id>16617723</id><snippet>import re
result = []
for x in dir(re):
    if x.startswith("find"):
        result.append(x) 
print result
</snippet></ROW><ROW><id>16617732</id><snippet>str.split()</snippet></ROW><ROW><id>16617732</id><snippet>x.split('-')[0]
</snippet></ROW><ROW><id>16617732</id><snippet>x.split('-', 1)[0]
</snippet></ROW><ROW><id>16617745</id><snippet>threading</snippet></ROW><ROW><id>16617745</id><snippet>concurrent.futures</snippet></ROW><ROW><id>16617795</id><snippet>storlines()</snippet></ROW><ROW><id>16617795</id><snippet>import os
ftp.storlines("STOR " + os.path.basename(file), open(file))
</snippet></ROW><ROW><id>16617795</id><snippet>file</snippet></ROW><ROW><id>16617795</id><snippet>filepath</snippet></ROW><ROW><id>16617952</id><snippet>for event in gameMatrix:
    if event['Away Team'] == "Chicago White Sox":
       event['new key'] = 'New value'
       print event.items()
</snippet></ROW><ROW><id>16617975</id><snippet>from IPython import embed
embed()
</snippet></ROW><ROW><id>16617975</id><snippet>from IPython.frontend.terminal.ipapp import TerminalIPythonApp
app = TerminalIPythonApp.instance()
app.initialize(argv=[])
app.start()
</snippet></ROW><ROW><id>16618015</id><snippet>__unicode__</snippet></ROW><ROW><id>16618015</id><snippet>None</snippet></ROW><ROW><id>16618015</id><snippet>return</snippet></ROW><ROW><id>16618344</id><snippet>def prime_list(X, Y):
    Z = []
    while X &lt;= Y:
        if is_prime(X):
            Z.append(X)
        X = X + 1
    return Z
</snippet></ROW><ROW><id>16618377</id><snippet>import requests
from pyquery import PyQuery as pq

url = 'http://wireless.walmart.com/content/getRatePlanInfo'
payload = {'carrierID':68, 'conditionToType':1, 'cssPrepend':'wm20'}
r = requests.post(url, data=payload)
d = pq(r.text)
</snippet></ROW><ROW><id>16618377</id><snippet>plans = []
plans_selector = '.wm20_planspage_planDetails_sub_detailsDiv_ul_li'
plans = d(plans_selector).each(lambda i, n: plans.append(pq(n).text()))
</snippet></ROW><ROW><id>16618377</id><snippet> ['Basic 200',
 'Simply Everything',
 'Everything Data 900',
 'Everything Data 450',
 'Talk 450',
 ... 
</snippet></ROW><ROW><id>16618414</id><snippet>def method5(s):
    return {s[x:x+3] for x in xrange(0, len(s), 4)}

%timeit method5(s)
10000 loops, best of 3: 123 us per loop
</snippet></ROW><ROW><id>16618414</id><snippet>def method4(s):
    return {s[4*i:4*i + 3] for i in range(len(s) / 4)}

%timeit method4(s)
10000 loops, best of 3: 176 us per loop
</snippet></ROW><ROW><id>16618414</id><snippet>%timeit method1(s)
10000 loops, best of 3: 184 us per loop

%timeit method2(s)
10000 loops, best of 3: 185 us per loop

%timeit method3(s)
1000 loops, best of 3: 513 us per loop
</snippet></ROW><ROW><id>16618536</id><snippet>win32con.VK_F3, win32con.MOD_ALT, win32con.MOD_WIN</snippet></ROW><ROW><id>16618536</id><snippet>HOTKEYS</snippet></ROW><ROW><id>16618536</id><snippet>for id, (vk, modifiers) in HOTKEYS.items ():
</snippet></ROW><ROW><id>16618536</id><snippet>tuple</snippet></ROW><ROW><id>16618536</id><snippet>RegisterHotKey()</snippet></ROW><ROW><id>16618536</id><snippet>from functools import reduce

for id, values in HOTKEYS.items ():
    vk, modifiers = values[0], reduce (lambda x, y: x | y, values[1:])
    print ("Registering id", id, "for key", vk)
    if not user32.RegisterHotKey (None, id, modifiers, vk):
        print ("Unable to register id", id)
</snippet></ROW><ROW><id>16618557</id><snippet>"M8[D]"</snippet></ROW><ROW><id>16618557</id><snippet>"M8"</snippet></ROW><ROW><id>16618557</id><snippet>'datetime64[D]'</snippet></ROW><ROW><id>16618557</id><snippet>'datetime64'</snippet></ROW><ROW><id>16618557</id><snippet>In [80]: np.array([(0,np.datetime64('2012-05-17'))],
   ....:          dtype=[('i',np.int),('date','datetime64[D]')])
Out[80]: 
array([(0, datetime.date(2012, 5, 17))], 
      dtype=[('i', '&lt;i8'), ('date', '&lt;M8[D]')])
</snippet></ROW><ROW><id>16618557</id><snippet>'2012-05-17'</snippet></ROW><ROW><id>16618557</id><snippet>np.datetime('2012-05-17')</snippet></ROW><ROW><id>16618557</id><snippet>In [81]: np.array([(0,'2012-05-17')],
   ....:          dtype=[('i',np.int),('date','datetime64[D]')])
Out[81]: 
array([(0, datetime.date(2012, 5, 17))], 
      dtype=[('i', '&lt;i8'), ('date', '&lt;M8[D]')])
</snippet></ROW><ROW><id>16618557</id><snippet>In [84]: np.array([np.datetime64('2012-05-17')], dtype='datetime64')   # no need for [D]
Out[84]: array(['2012-05-17'], dtype='datetime64[D]')

In [85]: np.array(['2012-05-17'], dtype='datetime64')   # no need for [D]
Out[85]: array(['2012-05-17'], dtype='datetime64[D]')
</snippet></ROW><ROW><id>16618557</id><snippet>In [87]: np.array([(0,'2012-05-17')],
   ....:          dtype=[('i',np.int),('date','datetime64')])
---------------------------------------------------------------------------
ValueError: Cannot create a NumPy datetime other than NaT with generic units

In [88]: np.array([(0,np.datetime64('2012-05-17'))],
   ....:          dtype=[('i',np.int),('date','datetime64')])
---------------------------------------------------------------------------
TypeError: Cannot cast NumPy timedelta64 scalar from metadata [D] to  according to the rule 'same_kind'
</snippet></ROW><ROW><id>16618574</id><snippet>content='''
   **001**     Math        **02/20/2013**  A

   **001**     Literature  **03/02/2013**  B

   **002**     Biology     **01/01/2013**  A

   **003**     Biology     **04/08/2013**  A

   **001**     Biology     **05/01/2013**  B

   **002**     Math        **03/10/2013**  C
'''

from collections import defaultdict

lines = content.split("\n")
items_iter = (line.split() for line in lines if line.strip())

aggregated = defaultdict(list)

for items in items_iter:
    stud, class_, date, grade = (t.strip('*') for t in items)
    aggregated[stud].append((class_, grade, date))

for stud, data in aggregated.iteritems():
    full_grades = [';'.join(items) for items in data]
    print '{},#{}'.format(stud, '#'.join(full_grades))
</snippet></ROW><ROW><id>16618574</id><snippet>003,#Biology;A;04/08/2013
002,#Biology;A;01/01/2013#Math;C;03/10/2013
001,#Math;A;02/20/2013#Literature;B;03/02/2013#Biology;B;05/01/2013
</snippet></ROW><ROW><id>16618574</id><snippet>file.readlines()</snippet></ROW><ROW><id>16618574</id><snippet>cat all_records.txt | grep 001 &gt; stud_001.txt # do if for other students also</snippet></ROW><ROW><id>16618574</id><snippet>grep</snippet></ROW><ROW><id>16618629</id><snippet>class UserObjectsOnlyAuthorization(Authorization):
def read_list(self, object_list, bundle):
    raise Unauthorized("Sorry, no list reads.")

def read_detail(self, object_list, bundle):
    # Is the requested object the user?
    return bundle.obj == bundle.request.user

def create_list(self, object_list, bundle):
    raise Unauthorized("Sorry, no creates.")

def create_detail(self, object_list, bundle):
    raise Unauthorized("Sorry, no creates.")

def update_list(self, object_list, bundle):
    raise Unauthorized("Sorry, no updates.")

def update_detail(self, object_list, bundle):
    raise Unauthorized("Sorry, no updates.")

def delete_list(self, object_list, bundle):
    # Sorry user, no deletes for you!
    raise Unauthorized("Sorry, no deletes.")

def delete_detail(self, object_list, bundle):
    raise Unauthorized("Sorry, no deletes.")
</snippet></ROW><ROW><id>16618629</id><snippet>def dispatch(self, request_type, request, **kwargs):
    # Force this to be a single User object
    return super(UserResource, self).dispatch('detail', request, **kwargs)

def get_detail(self, request, **kwargs):
    # Place the authenticated user's id in the get detail request
    kwargs['id'] = request.user.pk
    return super(UserResource, self).get_detail(request, **kwargs)
</snippet></ROW><ROW><id>16618700</id><snippet>RESULTS[group][n] = temp[2+n*6:6+n*6]
</snippet></ROW><ROW><id>16618700</id><snippet>__setitem__</snippet></ROW><ROW><id>16618700</id><snippet>RESULTS.__getitem__(group).__setitem__(n, temp.__getslice__(2+n*6, 6+n*6))
</snippet></ROW><ROW><id>16618700</id><snippet>RESULTS</snippet></ROW><ROW><id>16618700</id><snippet>Lang_Style = GROUP0[0]
</snippet></ROW><ROW><id>16618700</id><snippet>Lang_Style</snippet></ROW><ROW><id>16618700</id><snippet>decodeSP</snippet></ROW><ROW><id>16618700</id><snippet>decodeSP</snippet></ROW><ROW><id>16618700</id><snippet>def decodeSP():
    global Lang_Style, CTinv_Sign, ...
</snippet></ROW><ROW><id>16618866</id><snippet>range</snippet></ROW><ROW><id>16618866</id><snippet>map</snippet></ROW><ROW><id>16618866</id><snippet>reduce</snippet></ROW><ROW><id>16618866</id><snippet>filter</snippet></ROW><ROW><id>16618866</id><snippet>range()</snippet></ROW><ROW><id>16618866</id><snippet>xrange()</snippet></ROW><ROW><id>16618866</id><snippet>list</snippet></ROW><ROW><id>16618866</id><snippet>&gt;&gt;&gt; list(range(5)) #you can use list()
[0, 1, 2, 3, 4]
</snippet></ROW><ROW><id>16618949</id><snippet>from xlsxwriter.workbook import Workbook

workbook = Workbook('file.xlsx', {'constant_memory': True})
worksheet = workbook.add_worksheet()
...
</snippet></ROW><ROW><id>16619109</id><snippet>import os
from win32com.client import GetObject

WMI = GetObject('winmgmts:')
processes = WMI.InstancesOf('Win32_Process')

for p in WMI.ExecQuery('select * from Win32_Process where Name="cmd.exe"'):
    print "Killing PID:", p.Properties_('ProcessId').Value
    os.system("taskkill /pid "+str(p.Properties_('ProcessId').Value))
</snippet></ROW><ROW><id>16619109</id><snippet>from win32com.client import GetObject

WMI = GetObject('winmgmts:')
processes = WMI.InstancesOf('Win32_Process')

for p in WMI.ExecQuery('select * from Win32_Process where Name="cmd.exe"'):
    print "--running cmd.exe---"
    for prop in [prop.Name for prop in p.Properties_]:
        print prop,"=",p.Properties_(prop).Value
</snippet></ROW><ROW><id>16619130</id><snippet>import argparse, subprocess
parser.add_argument("-i","--query", type=str, required=True)
parser.add_argument("-d","--database", type=str, required=True)
parser.add_argument('-nomore','--nomore', action='store_const', default=True)
args = parser.parse_args()
if args.nomore:
    print 'nomore activated'
subprocess.call("program -i %s -o %s %s "  % (args.query, args.database, args.nomore,),shell=True 
</snippet></ROW><ROW><id>16619136</id><snippet>&gt;&gt;&gt; a_set = {1, frozenset(['xyz'])}
&gt;&gt;&gt; a_set
set([1, frozenset(['xyz'])])
</snippet></ROW><ROW><id>16619156</id><snippet>for i in range(nMoments):
    middle[i] = middle[i].subs(K, m1[i]**2/m2[i])
</snippet></ROW><ROW><id>16619307</id><snippet>memocache={}</snippet></ROW><ROW><id>16619307</id><snippet>accum=[]</snippet></ROW><ROW><id>16619307</id><snippet>&gt;&gt;&gt; print getAnimal()
kangaroo
&gt;&gt;&gt; print getAnimal()[0]
e
</snippet></ROW><ROW><id>16619307</id><snippet>MutableString</snippet></ROW><ROW><id>16619307</id><snippet>None</snippet></ROW><ROW><id>16619307</id><snippet>None</snippet></ROW><ROW><id>16619307</id><snippet>defaultAnimal = 'elephant'
def getAnimal (species=None):
    if species is None:
        return defaultAnimal
    return species
</snippet></ROW><ROW><id>16619307</id><snippet>help(getAnimal)</snippet></ROW><ROW><id>16619307</id><snippet>defaultAnimal = 'elephant'
def getAnimal (species=None):
    """getAnimal([species]) -&gt; species

    If the optional species parameter is left off, a default animal will be
    returned. Normally this is 'elephant', but this can be configured by setting
    foo.defaultAnimal to another value.
    """
    if species is None:
        return defaultAnimal
    return species
</snippet></ROW><ROW><id>16619406</id><snippet>CTRL-SHIFT-P --&gt; "Browse Packages"</snippet></ROW><ROW><id>16619406</id><snippet>Packages/User/my_build.sublime-build</snippet></ROW><ROW><id>16619406</id><snippet>{
   "cmd": ["python", "$file", "arg1", "arg2"]
}
</snippet></ROW><ROW><id>16619406</id><snippet>Tools --&gt; Build System --&gt; my_build</snippet></ROW><ROW><id>16619457</id><snippet>json.loads()</snippet></ROW><ROW><id>16619457</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; mydict = json.loads(content)
&gt;&gt;&gt; print mydict
{u'total_results': 1, u'stat': u'ok', u'default_reviewers': [{u'file_regex': u'.*', u'users': [], u'links': {u'self': {u'href': u'http://localhost:8080/api/default-reviewers/1/', u'method': u'GET'}, u'update': {u'href': u'http://localhost:8080/api/default-reviewers/1/', u'method': u'PUT'}, u'delete': {u'href': u'http://localhost:8080/api/default-reviewers/1/', u'method': u'DELETE'}}, u'repositories': [], u'groups': [], u'id': 1, u'name': u'Default Reviewer'}], u'links': {u'self': {u'href': u'http://localhost:8080/api/default-reviewers/', u'method': u'GET'}, u'create': {u'href': u'http://localhost:8080/api/default-reviewers/', u'method': u'POST'}}}
</snippet></ROW><ROW><id>16619457</id><snippet>requests</snippet></ROW><ROW><id>16619457</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; resp = requests.get(URL)
&gt;&gt;&gt; mydict = json.loads(resp.content)
</snippet></ROW><ROW><id>16619508</id><snippet>.*</snippet></ROW><ROW><id>16619508</id><snippet>.*</snippet></ROW><ROW><id>16619508</id><snippet>.*</snippet></ROW><ROW><id>16619508</id><snippet>Moldova</snippet></ROW><ROW><id>16619508</id><snippet>.*</snippet></ROW><ROW><id>16619508</id><snippet>Republic of</snippet></ROW><ROW><id>16619508</id><snippet>republic of moldova</snippet></ROW><ROW><id>16619508</id><snippet>moldova</snippet></ROW><ROW><id>16619508</id><snippet>^(.*?)...
</snippet></ROW><ROW><id>16619508</id><snippet>.*</snippet></ROW><ROW><id>16619508</id><snippet>^(.*),?(?&lt;!\w)[ ][(]?(c|o|u|n|t|r|i|e|s)[)]?(?![ ]*\w)(.*[\d\-]+.*|,.*[:/].*)?$
</snippet></ROW><ROW><id>16619508</id><snippet>,</snippet></ROW><ROW><id>16619670</id><snippet>with open("jawiki-latest-pages-articles.xml") as f:
    for line in f:
        # Process one line
</snippet></ROW><ROW><id>16619670</id><snippet>while True:
    data = f.read(65536)  # Or any other reasonable-sized chunk
    if not data:
        break
    # Process one chunk of data.  Make sure to handle data which overlaps
    # between chunks properly, and make sure to handle EOF properly
</snippet></ROW><ROW><id>16619671</id><snippet>s.sendall(EncodeAES(cipher, fileData))
</snippet></ROW><ROW><id>16619671</id><snippet>data = s.recv(10*1024*1024)
with open(recvFile, "wb") as f:
    f.write(DecodeAES(cipher, data))
</snippet></ROW><ROW><id>16619671</id><snippet>send</snippet></ROW><ROW><id>16619671</id><snippet>recv</snippet></ROW><ROW><id>16619671</id><snippet>asyncore</snippet></ROW><ROW><id>16619671</id><snippet>def send_message(sock, msg):
    length = len(msg)
    if length &gt;= (1 &lt;&lt; 32):
        raise ValueError('Sorry, {} is too big to fit in a 4GB message'.format(length))
    sock.sendall(struct.pack('!I', length))
    sock.sendall(msg)

def recv_bytes(sock, length):
    buf = ''
    while len(buf) &lt; length:
        received = sock.recv(4-len(buf))
        if not received:
            if not buf:
                return buf
            raise RuntimeError('Socket seems to have closed in mid-message')
        buf += received
    return buf

def recv_message(sock):
    length_buf = recv_bytes(sock, 4)
    length = struct.unpack('!I', buf)
    msg_buf = recv_bytes(sock, length)
    return msg_buf
</snippet></ROW><ROW><id>16619671</id><snippet>Protocol</snippet></ROW><ROW><id>16619671</id><snippet>Decoder</snippet></ROW><ROW><id>16619671</id><snippet>select</snippet></ROW><ROW><id>16619879</id><snippet>from os import listdir,
from os.path import isfile, join

def matching_file(path):
    return path.endswith(".exe")

while True:
    files = [item for item in listdir(target_folder) if isfile(join(target_folder, item))]
    for each_file in files:
        if matching_file(each_file):
            print "File found."
        if "PYTHON" in each_file:
            matching_file = lambda x: x.endswith(".py")
</snippet></ROW><ROW><id>16619879</id><snippet>matching_file</snippet></ROW><ROW><id>16620009</id><snippet>multiprocessing.Pool.map</snippet></ROW><ROW><id>16620009</id><snippet>map</snippet></ROW><ROW><id>16620009</id><snippet>import multiprocessing as mp

instances = [ClassName() for i in range(no_inst)]

def dosomething(inst):
    for data in dataset:
        inst.dosomething(data)

num_procs = 4 #however many processors you'll use
pool = mp.Pool(num_procs)
pool.map(dosomething,instances)
</snippet></ROW><ROW><id>16620009</id><snippet>lambda</snippet></ROW><ROW><id>16620009</id><snippet>None</snippet></ROW><ROW><id>16620009</id><snippet>dosomething</snippet></ROW><ROW><id>16620009</id><snippet>map</snippet></ROW><ROW><id>16620011</id><snippet>deiconify</snippet></ROW><ROW><id>16620011</id><snippet>iconify</snippet></ROW><ROW><id>16620011</id><snippet>iconify</snippet></ROW><ROW><id>16620011</id><snippet>withdraw</snippet></ROW><ROW><id>16620011</id><snippet>iconify</snippet></ROW><ROW><id>16620011</id><snippet>deiconify</snippet></ROW><ROW><id>16620055</id><snippet>&lt;html&gt;
&lt;head&gt;&lt;/head&gt;
&lt;body&gt;
  &lt;script src="/path/to/jquery.js"&gt;&lt;/script&gt;
  {% block tail_scripts %}{% endblock tail_scripts %}
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>16620055</id><snippet>{% extends 'base.html' %}

{% block tail_scripts %}
&lt;script src="/path/to/custom/script/if/needed.js"&gt;&lt;/script&gt;
&lt;script type="src/javascript"&gt;
  (function() {
    console.log('Build something awesome!');
  })();
&lt;/script&gt;
{% endblock tail_scripts %}
</snippet></ROW><ROW><id>16620099</id><snippet>{"metrics": ["TEST"]}</snippet></ROW><ROW><id>16620099</id><snippet>{"systems._id": "1338"}</snippet></ROW><ROW><id>16620099</id><snippet>{"_id": "123"}</snippet></ROW><ROW><id>16620099</id><snippet>systems</snippet></ROW><ROW><id>16620099</id><snippet>_id</snippet></ROW><ROW><id>16620099</id><snippet>{
    "_id": "123",
    "systems": {
        "1338": {
            "metrics": [
                "TEST"
            ]
        }
    }
}
</snippet></ROW><ROW><id>16620099</id><snippet>db.test.update({_id: "123"}, {$addToSet: {"systems.1338.metrics": "TEST"}}, {upsert: true})
</snippet></ROW><ROW><id>16620099</id><snippet>{
    "_id": "123",
    "systems": {
        "metrics": {
            "1338": [
                "TEST"
            ]
        }
    }
}
</snippet></ROW><ROW><id>16620099</id><snippet>if</snippet></ROW><ROW><id>16620154</id><snippet>for</snippet></ROW><ROW><id>16620154</id><snippet>[('a, b'), ('c, d'), ...]
[['a, b'], ['c, d'], ...]
['ab', 'cd', ...]
...
</snippet></ROW><ROW><id>16620154</id><snippet>k</snippet></ROW><ROW><id>16620154</id><snippet>v</snippet></ROW><ROW><id>16620154</id><snippet>x.split('=')</snippet></ROW><ROW><id>16620154</id><snippet>['abc', 'asflskfjla']
</snippet></ROW><ROW><id>16620197</id><snippet>0</snippet></ROW><ROW><id>16620197</id><snippet>0[0]</snippet></ROW><ROW><id>16620197</id><snippet>for row in game_board:
    for item in row:
        item[0] = 0
        item[1] = 0
</snippet></ROW><ROW><id>16620499</id><snippet>s</snippet></ROW><ROW><id>16620499</id><snippet>Abs(s)</snippet></ROW><ROW><id>16620499</id><snippet>s</snippet></ROW><ROW><id>16620499</id><snippet>sqrt(s**2) = Abs(s)</snippet></ROW><ROW><id>16620499</id><snippet>In [6]: refine(nfactor, Q.is_true(Abs(periodic_argument(1/polar_lift(s)**2, oo)) &lt;= pi/2))
Out[6]:
  ___   ___
╲╱ 2 ⋅╲╱ π ⋅s
</snippet></ROW><ROW><id>16620499</id><snippet>integrate(conds='none')</snippet></ROW><ROW><id>16620499</id><snippet>integrate(conds='separate')</snippet></ROW><ROW><id>16620499</id><snippet>In [8]: integrate(gaussian, (x,-oo,oo), conds='none')
Out[8]:
  ___   ___
╲╱ 2 ⋅╲╱ π ⋅s

In [9]: integrate(gaussian, (x,-oo,oo), conds='separate')
Out[9]:
⎛  ___   ___    │                 ⎛      1          ⎞│   π⎞
⎜╲╱ 2 ⋅╲╱ π ⋅s, │periodic_argument⎜──────────────, ∞⎟│ ≤ ─⎟
⎜               │                 ⎜          2      ⎟│   2⎟
⎝               │                 ⎝polar_lift (s)   ⎠│    ⎠
</snippet></ROW><ROW><id>16620499</id><snippet>In [10]: nfactor.args[0][0]
Out[10]:
  ___   ___
╲╱ 2 ⋅╲╱ π ⋅s
</snippet></ROW><ROW><id>16620499</id><snippet>refine</snippet></ROW><ROW><id>16620499</id><snippet>Q</snippet></ROW><ROW><id>16620987</id><snippet>__del__</snippet></ROW><ROW><id>16620987</id><snippet>__del__()</snippet></ROW><ROW><id>16620987</id><snippet>__del__()</snippet></ROW><ROW><id>16620987</id><snippet>__del__()</snippet></ROW><ROW><id>16620987</id><snippet>__del__()</snippet></ROW><ROW><id>16620987</id><snippet>__del__()</snippet></ROW><ROW><id>16620987</id><snippet>try</snippet></ROW><ROW><id>16620987</id><snippet>except</snippet></ROW><ROW><id>16620987</id><snippet>__del__</snippet></ROW><ROW><id>16620987</id><snippet>__del__</snippet></ROW><ROW><id>16621512</id><snippet>list.extend()</snippet></ROW><ROW><id>16621512</id><snippet>&gt;&gt;&gt; L = [1, 2]
&gt;&gt;&gt; L.extend((3, 4, 5))
&gt;&gt;&gt; L
[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>16621522</id><snippet>parentchild_map = {}
for line in lines:
    if ':' not in line:
         continue
    mother, multichildren = line.split(':')
    children = multichildren.strip().split(', ')
    parentchild_map[mother] = children
</snippet></ROW><ROW><id>16621522</id><snippet> for parent, children in parentchild_map.items():
     if child in children:
         print ("Mother is ", parent)
         break
 else:
     print ('Mother not known.')
</snippet></ROW><ROW><id>16621522</id><snippet> reversemap = {}
 for parent, children in parentchild_map.items():
     for child in children:
         reversemap[child] = parent
</snippet></ROW><ROW><id>16621522</id><snippet> mother = reversemap.get(child)
 if mother:
     print ('Mother is ', mother)
 else:
     print ('Mother unknown.')
</snippet></ROW><ROW><id>16621547</id><snippet>__init__()</snippet></ROW><ROW><id>16621547</id><snippet>def _init_(self,name,age,marks):
</snippet></ROW><ROW><id>16621547</id><snippet>def __init__(self,name,age,marks):
</snippet></ROW><ROW><id>16621682</id><snippet>displayStudentNumber()</snippet></ROW><ROW><id>16621682</id><snippet>displayinfo()</snippet></ROW><ROW><id>16621682</id><snippet>def displayStudentNumber(self):
    return 'Total Number of students = ' + str(StudentData.studentNumber)

def displayinfo(self):
    print 'Name of the Student: ',self.name;
    print 'Age of the Student: ', self.age;
    print 'Marks of the Student: ', self.marks;
    return ''
</snippet></ROW><ROW><id>16621682</id><snippet>None</snippet></ROW><ROW><id>16621809</id><snippet>exec</snippet></ROW><ROW><id>16621809</id><snippet>create_decision</snippet></ROW><ROW><id>16621809</id><snippet>def create_decision(user_decision, conditions):
    f = open(conditions, 'r+')
    contents = f.readlines()
    contents.append(user_decision)
    # join list entries with a newline between and return result as string
    output = eval('\n'.join(contents))
    return output
</snippet></ROW><ROW><id>16621809</id><snippet>import sys
import StringIO
import contextlib

@contextlib.contextmanager
def stdoutIO(stdout=None):
    old = sys.stdout
    if stdout is None:
        stdout = StringIO.StringIO()
    sys.stdout = stdout
    yield stdout
    sys.stdout = old

def create_decision(user_decision, conditions):
    f = open(conditions, 'r+')
    contents = f.readlines()
    contents.append(user_decision)
    with stdoutIO() as output:
        #exec('\n'.join(contents)) # Python 3
        exec '\n'.join(contents) # Python 2
    return output.getvalue()
</snippet></ROW><ROW><id>16621809</id><snippet>str.join()</snippet></ROW><ROW><id>16621809</id><snippet>exec</snippet></ROW><ROW><id>16621809</id><snippet>eval</snippet></ROW><ROW><id>16621809</id><snippet>print</snippet></ROW><ROW><id>16621809</id><snippet>stdoutIO</snippet></ROW><ROW><id>16622030</id><snippet>float64</snippet></ROW><ROW><id>16622030</id><snippet>int</snippet></ROW><ROW><id>16622030</id><snippet>object</snippet></ROW><ROW><id>16622121</id><snippet>.sort(...)</snippet></ROW><ROW><id>16622121</id><snippet>sort()</snippet></ROW><ROW><id>16622121</id><snippet>sort(field_to_sort_by, -1)</snippet></ROW><ROW><id>16622171</id><snippet>v += 1</snippet></ROW><ROW><id>16622171</id><snippet>v</snippet></ROW><ROW><id>16622171</id><snippet>v+1</snippet></ROW><ROW><id>16622171</id><snippet>v</snippet></ROW><ROW><id>16622235</id><snippet>return</snippet></ROW><ROW><id>16622235</id><snippet>pyflakes</snippet></ROW><ROW><id>16622262</id><snippet>fmt</snippet></ROW><ROW><id>16622262</id><snippet>savetxt</snippet></ROW><ROW><id>16622262</id><snippet>%s</snippet></ROW><ROW><id>16622262</id><snippet>num.savetxt('test.txt', DAT, delimiter=" ", fmt="%s") 
</snippet></ROW><ROW><id>16622751</id><snippet>DataFrame.max(axis=1)</snippet></ROW><ROW><id>16622751</id><snippet>import pandas as pd
from StringIO import StringIO

data = """ 90 ,  90 ,  A  ,     ,  A  ,  A 
101 , 101 ,     ,     ,  T  ,  T 
245 , 246 ,  AG ,  AG ,  AG ,  AG
302 , 302 ,  C  ,     ,     ,    
324 , 324 ,     ,  G  ,     ,  G """


df = pd.read_csv(StringIO(data), header=None)
s = df.ix[:, 2:].max(axis=1)
df = df.ix[:, :1]
df["new"] = s
print df
</snippet></ROW><ROW><id>16622751</id><snippet>     0    1    new
0   90   90    A  
1  101  101    T  
2  245  246    AG 
3  302  302    C  
4  324  324    G  
</snippet></ROW><ROW><id>16622963</id><snippet>class MyWindow(QWidget): 
    def __init__(self, *args): 
        QWidget.__init__(self, *args)

        self.Dynamic_log = uic.loadUi("Dynamic_log.ui")
        self.Dynamic_log.show()

        self.Main_Window = uic.loadUi("Main_Window.ui")
        self.Main_Window.hide()


        layout = self.Main_Window.ProgressThreads
        self.progress_label = QLabel(" ")
        layout.addWidget(self.progress_label)
        self.progress_label.setText('0%')




if __name__ == "__main__": 
    app = QtGui.QApplication(sys.argv)
    window = MyWindow() 
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>16623020</id><snippet>"fields": {
    "question": "what is cryptography in computer science?",
    "tags": "computer science, cryptography.",
    "user': 1
}
</snippet></ROW><ROW><id>16623020</id><snippet>User</snippet></ROW><ROW><id>16623020</id><snippet>natural_key</snippet></ROW><ROW><id>16623020</id><snippet>username</snippet></ROW><ROW><id>16623020</id><snippet>username</snippet></ROW><ROW><id>16623020</id><snippet>"fields": {
    "question": "what is cryptography in computer science?",
    "tags": "computer science, cryptography.",
    "user': 'admin'
}
</snippet></ROW><ROW><id>16623933</id><snippet>Model._meta.app_label</snippet></ROW><ROW><id>16623933</id><snippet>models.Model</snippet></ROW><ROW><id>16623933</id><snippet>class EditLinkMixin(object):
    def get_admin_link(self):
        return '/admin/%s/%s/%d/' % (self._meta.app_name, self.__class__.__name__, self.pk)

class MyModel(models.Model, EditLinkMixin):
    pass
</snippet></ROW><ROW><id>16624177</id><snippet>Line2D</snippet></ROW><ROW><id>16624177</id><snippet>from matplotlib.lines import Line2D</snippet></ROW><ROW><id>16624177</id><snippet>ax.legend(loc = 2)
plt.colorbar(p)

print p.get_label()
</snippet></ROW><ROW><id>16624177</id><snippet>circ1 = Line2D([0], [0], linestyle="none", marker="o", alpha=0.4, markersize=10, markerfacecolor="red")
circ2 = Line2D([0], [0], linestyle="none", marker="o", alpha=0.3, markersize=10, markerfacecolor="blue")
circ3 = Line2D([0], [0], linestyle="none", marker="o", alpha=0.4, markersize=10, markerfacecolor="yellow")

plt.legend((circ1, circ2, circ3), ("Cat 1", "Cat 2", "Cat 3"), numpoints=1, loc="best")
</snippet></ROW><ROW><id>16624409</id><snippet>while i &lt; 360:
    forward(3)
    left(3)
    i+=3
</snippet></ROW><ROW><id>16624502</id><snippet>def Firefox(self, event):
    import botcordxy
</snippet></ROW><ROW><id>16624502</id><snippet>while 1 == 1:
    botloc = driver.find_element_by_id('botloc').text
    botX,botY = map(int,botloc.split(','))
    print botX
    print botY
    print botloc
</snippet></ROW><ROW><id>16624502</id><snippet>wx.Yield()</snippet></ROW><ROW><id>16624502</id><snippet>import wx
while 1 == 1:
    botloc = driver.find_element_by_id('botloc').text
    botX,botY = map(int,botloc.split(','))
    print botX
    print botY
    print botloc
    wx.Yield()
</snippet></ROW><ROW><id>16624502</id><snippet>wx.Timer</snippet></ROW><ROW><id>16624502</id><snippet>driver.find_element_by_id(...)</snippet></ROW><ROW><id>16624504</id><snippet>factors</snippet></ROW><ROW><id>16624504</id><snippet>factor()</snippet></ROW><ROW><id>16624504</id><snippet>def factor(n, factors=None):
    factors = [] if factors is None else factors 
    for i in range(2, n + 1):
        if n%i==0 and i not in factors: #checks for duplicates as well
            factors.append(i)
            factor(int(n / i),factors) #pass the factors list in the recurive call
            break
    return factors

factor(20) #returns [2, 5]
</snippet></ROW><ROW><id>16624539</id><snippet>import functools
import os
import psutil


def print_memory(fn):
    def wrapper(*args, **kwargs):
        process = psutil.Process(os.getpid())
        start_rss, start_vms = process.get_memory_info()
        try:
            return fn(*args, **kwargs)
        finally:
            end_rss, end_vms = process.get_memory_info()
            print((end_rss - start_rss), (end_vms - start_vms))
    return wrapper


@print_memory
def f():
    s = 'a'*100
</snippet></ROW><ROW><id>16624539</id><snippet>import numpy
@print_memory
def f():
    return numpy.zeros((512,512))
</snippet></ROW><ROW><id>16624539</id><snippet>In [1]: from guppy import hpy; hp=hpy()

In [2]: h = hp.heap()

In [3]: h
Out[3]: 
Partition of a set of 120931 objects. Total size = 17595552 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0  57849  48  6355504  36   6355504  36 str
     1  29117  24  2535608  14   8891112  51 tuple
     2    394   0  1299952   7  10191064  58 dict of module
     3   1476   1  1288416   7  11479480  65 dict (no owner)
     4   7683   6   983424   6  12462904  71 types.CodeType
     5   7560   6   907200   5  13370104  76 function
     6    858   1   770464   4  14140568  80 type
     7    858   1   756336   4  14896904  85 dict of type
     8    272   0   293504   2  15190408  86 dict of class
     9    304   0   215064   1  15405472  88 unicode
&lt;501 more rows. Type e.g. '_.more' to view.&gt;
</snippet></ROW><ROW><id>16624552</id><snippet>Slot</snippet></ROW><ROW><id>16624552</id><snippet>name</snippet></ROW><ROW><id>16624552</id><snippet>result</snippet></ROW><ROW><id>16624552</id><snippet>name</snippet></ROW><ROW><id>16624552</id><snippet>name</snippet></ROW><ROW><id>16624552</id><snippet>@QtCore.Slot(int,str,result=float)
def func(a,b):
  assert len(b)==a; upload(b); return 2.5
</snippet></ROW><ROW><id>16624609</id><snippet>30815 : $50638.91
30816 : $52423.28
30817 :

Traceback (most recent call last):
  File "C:\__tmp\pyOdbcTest.py", line 20, in &lt;module&gt;
    print row.ID, ":", format_currency(row.Amount)
  File "C:\__tmp\pyOdbcTest.py", line 10, in format_currency
    (amount, amount.__class__, result))
AssertionError: That's weird. The value Decimal('58510.0000') of class &lt;class 'decimal.Decimal'&gt; is represented as $5850:.00
</snippet></ROW><ROW><id>16624609</id><snippet>1451.0000 -&gt; $1450.:0
1701.0000 -&gt; $1700.:0
1821.0000 -&gt; $1820.:0
1951.0000 -&gt; $1950.:0
2091.0000 -&gt; $2090.:0
...
98621.0000 -&gt; $98620.:0
98710.0000 -&gt; $9870:.00
99871.0000 -&gt; $99870.:0
</snippet></ROW><ROW><id>16624816</id><snippet>__str__</snippet></ROW><ROW><id>16624816</id><snippet>class MyObject(object):
    def __str__(self):
        return 'foo'


&gt;&gt;&gt; print MyObject()
foo
</snippet></ROW><ROW><id>16625105</id><snippet>&gt;&gt;&gt; List1 = ['A', 'B', 'C']
&gt;&gt;&gt; List2 = ['1', '2', '3']
&gt;&gt;&gt; map(lambda a, b: a + b, List1, List2)
['A1', 'B2', 'C3']
</snippet></ROW><ROW><id>16625123</id><snippet>&gt;&gt;&gt; class A(object):
...    pass
...
&gt;&gt;&gt; def foo(x): return 3
...
&gt;&gt;&gt; A.foo = foo
&gt;&gt;&gt; type(foo)
&lt;type 'function'&gt;
&gt;&gt;&gt; type(A.foo)
&lt;type 'instancemethod'&gt;
</snippet></ROW><ROW><id>16625123</id><snippet>foo</snippet></ROW><ROW><id>16625326</id><snippet>*/2 * * * * /usr/local/bin/python2.7 /home/{mypath}/cron_reset_cp.py &gt; $HOME/cron.log 2&gt;&amp;1
</snippet></ROW><ROW><id>16625326</id><snippet>#cron for resetting cherrypy /cp/ when 500+ MB
import os
#assuming starts in /home/my_username/
os.chdir('/home/my_username/cp/')
import mem
C = mem.MemoryMonitor('my_username') #this function adds up all the memory
memory = int(float(C.usage()))
if memory &gt; 500:#MB
    #### Tried: pid = os.getpid() #current process = cronjob --- THIS approach did not work for me.
    import urllib2
    cp = urllib2.urlopen('http://myserver.com/cp?reset={password}')
</snippet></ROW><ROW><id>16625326</id><snippet>def index(self, **kw):
    if kw.get('reset') == '{password}': 
        cherrypy.engine.restart()
        ip = cherrypy.request.headers["X-Forwarded-For"] #get_client_ip
        return 'CherryPy RESETTING for duty, sir! requested by '+str(ip)
</snippet></ROW><ROW><id>16625336</id><snippet>#=======================================================================
#  Author: Isai Damier
#  Title: Mergesort
#  Project: geekviewpoint
#  Package: algorithm.sorting
#
#  Statement:
#  Given a disordered list of integers (or any other items),
#  rearrange the integers in natural order.
#
#  Sample Input: [8,5,3,1,9,6,0,7,4,2,5]
#
#  Sample Output: [0,1,2,3,4,5,5,6,7,8,9]
#
#  Time Complexity of Solution:
#  Best = Average = Worst = O(nlog(n)).
#
#  Approach:
#   Merge sort is a divide and conquer algorithm. In the divide and
#   conquer paradigm, a problem is broken into pieces where each piece
#   still retains all the properties of the larger problem -- except
#   its size. To solve the original problem, each piece is solved
#   individually; then the pieces are merged back together.
#
#   For illustration, imagine needing to sort an array of 200 elements
#   using selection sort. Since selection sort takes O(n^2), it would
#   take about 40,000 time units to sort the array. Now imagine
#   splitting the array into ten equal pieces and sorting each piece
#   individually still using selection sort. Now it would take 400
#   time units to sort each piece; for a grand total of 10400 = 4000.
#   Once each piece is sorted, merging them back together would take
#   about 200 time units; for a grand total of 200+4000 = 4,200.
#   Clearly 4,200 is an impressive improvement over 40,000. Now
#   imagine greater. Imagine splitting the original array into
#   groups of two and then sorting them. In the end, it would take about
#   1,000 time units to sort the array. That's how merge sort works.
#
#  NOTE to the Python experts:
#     While it might seem more "Pythonic" to take such approach as
#
#         mid = len(aList) / 2
#         left = mergesort(aList[:mid])
#         right = mergesort(aList[mid:])
#
#     That approach take too much memory for creating sublists.
#=======================================================================
 def mergesort( aList ):
  _mergesort( aList, 0, len( aList ) - 1 )


def _mergesort( aList, first, last ):
  # break problem into smaller structurally identical pieces
  mid = ( first + last ) / 2
  if first &lt; last:
    _mergesort( aList, first, mid )
    _mergesort( aList, mid + 1, last )

  # merge solved pieces to get solution to original problem
  a, f, l = 0, first, mid + 1
  tmp = [None] * ( last - first + 1 )

  while f &lt;= mid and l &lt;= last:
    if aList[f] &lt; aList[l] :
      tmp[a] = aList[f]
      f += 1
    else:
      tmp[a] = aList[l]
      l += 1
    a += 1

  if f &lt;= mid :
    tmp[a:] = aList[f:mid + 1]

  if l &lt;= last:
    tmp[a:] = aList[l:last + 1]

  a = 0
  while first &lt;= last:
    aList[first] = tmp[a]
    first += 1
    a += 1
</snippet></ROW><ROW><id>16625336</id><snippet>import unittest
from algorithms import sorting

class Test( unittest.TestCase ):

  def testMergesort( self ):
      A = [8, 5, 3, 1, 9, 6, 0, 7, 4, 2, 5]
      sorting.mergesort( A )
      for i in range( 1, len( A ) ):
          if A[i - 1] &gt; A[i]:
            self.fail( "mergesort method fails." )
</snippet></ROW><ROW><id>16625385</id><snippet>logging.NOTSET</snippet></ROW><ROW><id>16625385</id><snippet>logging.DEBUG</snippet></ROW><ROW><id>16625703</id><snippet>filter</snippet></ROW><ROW><id>16625703</id><snippet>Category</snippet></ROW><ROW><id>16625703</id><snippet>Category.objects.filter(product_set__isnull=False).distinct()
</snippet></ROW><ROW><id>16625778</id><snippet>r'[^\s(?=\-)]'</snippet></ROW><ROW><id>16625778</id><snippet>r'[^\-)(?\s=]'</snippet></ROW><ROW><id>16625778</id><snippet>r'([^-]|(?&lt;!\s-))'
</snippet></ROW><ROW><id>16625778</id><snippet>' - '</snippet></ROW><ROW><id>16625778</id><snippet>split</snippet></ROW><ROW><id>16625778</id><snippet>&gt;&gt;&gt; "jay-z - title".split(' - ', 1)
['jay-z', 'title']
&gt;&gt;&gt; 'prince - purple rain'.split(' - ', 1)
['prince', 'purple rain']
&gt;&gt;&gt; 'prince - purple rain - a love-song'.split(' - ', 1)
['prince', 'purple rain - a love-song']
</snippet></ROW><ROW><id>16625778</id><snippet>split</snippet></ROW><ROW><id>16625778</id><snippet>split</snippet></ROW><ROW><id>16625778</id><snippet>split</snippet></ROW><ROW><id>16625778</id><snippet>rsplit</snippet></ROW><ROW><id>16625778</id><snippet>maxsplit</snippet></ROW><ROW><id>16625778</id><snippet>&gt;&gt;&gt; 'prince - purple rain - a love-song'.split(' - ', 1)
['prince', 'purple rain - a love-song']
&gt;&gt;&gt; 'prince - purple rain - a love-song'.rsplit(' - ', 1)
['prince - purple rain', 'a love-song']
</snippet></ROW><ROW><id>16625891</id><snippet>from itertools import izip_longest
def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)


with open('z.t') as f:
    d = grouper(f, 4)
    for x in d:
            print ','.join(y.rstrip() for y in x) 

a,b,c,d,e,f,g,h
i,j,k,l,m,n,o,p
</snippet></ROW><ROW><id>16626009</id><snippet>while</snippet></ROW><ROW><id>16626009</id><snippet>.pop()</snippet></ROW><ROW><id>16626009</id><snippet>def CyclotomicCosets(q, n):
    N = q ^ n - 1
    ZN = set(range(N))
    Cosets = []
    while ZN:
        i = ZN.pop()
        tmp = {i * (q ^ j) % N for j in range(n)}
        Cosets.append(list(tmp))
        ZN -= tmp
    return Cosets
</snippet></ROW><ROW><id>16626009</id><snippet>for</snippet></ROW><ROW><id>16626009</id><snippet>tmp = set(i * (q ^ j) % N for j in range(n))
</snippet></ROW><ROW><id>16626009</id><snippet>ZN</snippet></ROW><ROW><id>16626009</id><snippet>ZN=ZN.difference(tmp)
</snippet></ROW><ROW><id>16626009</id><snippet>for</snippet></ROW><ROW><id>16626009</id><snippet>ZN</snippet></ROW><ROW><id>16626009</id><snippet>set</snippet></ROW><ROW><id>16626009</id><snippet>ZN -= tmp</snippet></ROW><ROW><id>16626009</id><snippet>ZN.difference_update(tmp)</snippet></ROW><ROW><id>16626009</id><snippet>&gt;&gt;&gt; ZN = set(range(3))
&gt;&gt;&gt; for i in ZN:
...     ZN -= set([2])
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
RuntimeError: Set changed size during iteration
</snippet></ROW><ROW><id>16626009</id><snippet>&gt;&gt;&gt; CyclotomicCosets(3, 5)
[[0], [0, 1, 2, 3], [0, 1, 4, 5], [0, 4, 5, 6]]
</snippet></ROW><ROW><id>16626009</id><snippet>range(N)</snippet></ROW><ROW><id>16626009</id><snippet>def CyclotomicCosets(q, n):
    N = q ^ n - 1
    Cosets = []
    seen = set()
    for i in range(N):
        if i in seen: continue
        tmp = {i * (q ^ j) % N for j in range(n)}
        Cosets.append(list(tmp))
        seen |= tmp
    return Cosets
</snippet></ROW><ROW><id>16626092</id><snippet>stra.dat
straa.tif
512 512
8 8 8
n
</snippet></ROW><ROW><id>16626092</id><snippet>./atompot &lt; filename
</snippet></ROW><ROW><id>16626402</id><snippet>__name__</snippet></ROW><ROW><id>16626402</id><snippet>'__main__'</snippet></ROW><ROW><id>16626428</id><snippet>playerx = 20
playery = 20
</snippet></ROW><ROW><id>16626428</id><snippet>draw()</snippet></ROW><ROW><id>16626428</id><snippet>global playerx
global playery
</snippet></ROW><ROW><id>16626428</id><snippet>draw()</snippet></ROW><ROW><id>16626428</id><snippet>draw()</snippet></ROW><ROW><id>16626428</id><snippet>screen = pygame.display.set_mode((700,300))
pygame.display.set_caption('something')
</snippet></ROW><ROW><id>16626428</id><snippet>draw()</snippet></ROW><ROW><id>16626428</id><snippet>velX = 0
velY = 0
if keys_down[K_d]:
    velX = 10
if keys_down[K_w]:
    velY = -10
if keys_down[K_s]:
    velY = 10
if keys_down[K_a]:
    velX = -10
</snippet></ROW><ROW><id>16626430</id><snippet>Status()</snippet></ROW><ROW><id>16626430</id><snippet>class Status(object):
    def __init__(self, parent=None):
        self._message = ''
        self._parent = parent

    @property
    def message(self):
        return self._message

    @message.setter
    def message(self, value):
        self._message = value
        if self._parent is not None:
            self._parent.status_updated()


class Buddy(object):
    def __init__(self, name):
        self.name = name
        self.status = Status(self)

    def status_updated(self):
        # this should be called when self.status.message is changed
</snippet></ROW><ROW><id>16626524</id><snippet>files = ["file1","file2","file3"]

with open("output_file","w") as outfile:
    with open(files[0]) as f1:
        for line in f1:        #keep the header from file1
            outfile.write(line)

    for x in files[1:]:
        with open(x) as f1:
            for line in f1:
                if not line.startswith("#"):
                    outfile.write(line)
</snippet></ROW><ROW><id>16626524</id><snippet>fileinput</snippet></ROW><ROW><id>16626524</id><snippet>import fileinput
header_over = False
with open("out_file","w") as outfile:
    for line in fileinput.input():
        if line.startswith("#") and not header_over:
            outfile.write(line)
        elif not line.startswith("#"):
            outfile.write(line)
            header_over = True
</snippet></ROW><ROW><id>16626524</id><snippet>$ python so.py file1 file2 file3</snippet></ROW><ROW><id>16626524</id><snippet>#header file1
foo
bar
</snippet></ROW><ROW><id>16626524</id><snippet>#header file2
spam
eggs
</snippet></ROW><ROW><id>16626524</id><snippet>#header file3
python
file
</snippet></ROW><ROW><id>16626524</id><snippet>#header file1
foo
bar

spam
eggs

python
file
</snippet></ROW><ROW><id>16626561</id><snippet>&gt;H</snippet></ROW><ROW><id>16626561</id><snippet>var
  x: Word;
  data: TBytes;
....
x := ntohs(PWord(@data[offset])^);
</snippet></ROW><ROW><id>16626561</id><snippet>data</snippet></ROW><ROW><id>16626561</id><snippet>data[offset]</snippet></ROW><ROW><id>16626561</id><snippet>ntohs</snippet></ROW><ROW><id>16626561</id><snippet>ntohs</snippet></ROW><ROW><id>16626561</id><snippet>Word</snippet></ROW><ROW><id>16626561</id><snippet>data[offset]</snippet></ROW><ROW><id>16626561</id><snippet>ntohs</snippet></ROW><ROW><id>16626561</id><snippet>Winsock</snippet></ROW><ROW><id>16626576</id><snippet>django.contrib.auth.hashers.PBKDF2PasswordHasher</snippet></ROW><ROW><id>16626576</id><snippet>PASSWORD_HASHERS</snippet></ROW><ROW><id>16626598</id><snippet>try:
    module = module_name + '.tests'
    __import__(module)
except ImportError, e:
    if e.args and e.args[0] == 'No module named ' + module:
        print(module, 'does not exist')
    else:
        print(module, 'failed to import')
</snippet></ROW><ROW><id>16626757</id><snippet>from pickle import dumps
f = lambda x: x * 5
dumps(f) # error
from cloud.serialization.cloudpickle import dumps
dumps(f) # works
</snippet></ROW><ROW><id>16626757</id><snippet>load</snippet></ROW><ROW><id>16626757</id><snippet>loads</snippet></ROW><ROW><id>16626797</id><snippet>functools.partial()</snippet></ROW><ROW><id>16626797</id><snippet>self</snippet></ROW><ROW><id>16626797</id><snippet>partial</snippet></ROW><ROW><id>16626797</id><snippet>function</snippet></ROW><ROW><id>16626797</id><snippet>__name__</snippet></ROW><ROW><id>16626797</id><snippet>__doc__</snippet></ROW><ROW><id>16626797</id><snippet>partial</snippet></ROW><ROW><id>16626797</id><snippet>property</snippet></ROW><ROW><id>16626797</id><snippet>class RGB(object):
    def __init__(self, red, blue, green):
        super(RGB, self).__init__()
        self._red = red
        self._blue = blue
        self._green = green

    def _color(self, type):
        return getattr(self, type)

    @property
    def red(self): return self._color('_red')
    @property
    def blue(self): return self._color('_blue')
    @property
    def green(self): return self._color('_green')
</snippet></ROW><ROW><id>16626802</id><snippet>import requests
r = requests.post('http://overpass-api.de/api/interpreter',
    data=open('Bethesda.xml', 'rb'))
print(r.text)
</snippet></ROW><ROW><id>16626827</id><snippet>webdriver.Firefox()
</snippet></ROW><ROW><id>16626982</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(html)

for row in soup.select('tr.bandingon, tr.bandingoff'):
    print row.get_text()
</snippet></ROW><ROW><id>16626982</id><snippet>http://www.cmegroup.com/CmeWS/mvc/ProductSlate/V1/List/500/1?sortField=oi&amp;sortAsc=false&amp;venues=3&amp;page=1&amp;cleared=1&amp;group=1&amp;r=NDGWCTX4
</snippet></ROW><ROW><id>16627047</id><snippet>import gobject
gobject.threads_init()
</snippet></ROW><ROW><id>16627047</id><snippet>gtk.main()</snippet></ROW><ROW><id>16627277</id><snippet>mod_security</snippet></ROW><ROW><id>16627277</id><snippet>urllib</snippet></ROW><ROW><id>16627277</id><snippet>python urllib/3.3.0</snippet></ROW><ROW><id>16627277</id><snippet>from urllib.request import Request, urlopen

req = Request('http://www.cmegroup.com/trading/products/#sortField=oi&amp;sortAsc=false&amp;venues=3&amp;page=1&amp;cleared=1&amp;group=1', headers={'User-Agent': 'Mozilla/5.0'})
webpage = urlopen(req).read()
</snippet></ROW><ROW><id>16627277</id><snippet>()</snippet></ROW><ROW><id>16627277</id><snippet>.read</snippet></ROW><ROW><id>16627277</id><snippet>urlopen</snippet></ROW><ROW><id>16627277</id><snippet>urllib</snippet></ROW><ROW><id>16627298</id><snippet>(/s+)
</snippet></ROW><ROW><id>16627323</id><snippet>gc.get_objects()</snippet></ROW><ROW><id>16627323</id><snippet>&gt;&gt;&gt; import gc
&gt;&gt;&gt; print gc.get_objects.__doc__
get_objects() -&gt; [...]

Return a list of objects tracked by the collector (excluding the list
returned).
</snippet></ROW><ROW><id>16627323</id><snippet>a</snippet></ROW><ROW><id>16627323</id><snippet>int</snippet></ROW><ROW><id>16627323</id><snippet>a = 1</snippet></ROW><ROW><id>16627323</id><snippet>site.py</snippet></ROW><ROW><id>16627323</id><snippet>int</snippet></ROW><ROW><id>16627323</id><snippet>tuple()</snippet></ROW><ROW><id>16627436</id><snippet>a = [1, 2, 3]
b = [4, 5, 6]
</snippet></ROW><ROW><id>16627436</id><snippet>A</snippet></ROW><ROW><id>16627436</id><snippet>B</snippet></ROW><ROW><id>16627436</id><snippet>a[1:2] = b
print(a) # prints [1, 4, 5, 6, 3]
</snippet></ROW><ROW><id>16627436</id><snippet>a[1:1] = b
print(a) # prints [1, 4, 5, 6, 2, 3]
</snippet></ROW><ROW><id>16627436</id><snippet>a[200:300] = b
print(a) # prints [1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>16627478</id><snippet>shutil.copyfile()</snippet></ROW><ROW><id>16627478</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>16627478</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>16627478</id><snippet>def copyfileobj(fsrc, fdst, length=16*1024):
    """copy data from file-like object fsrc to file-like object fdst"""
    while 1:
        buf = fsrc.read(length)
        if not buf:
            break
        fdst.write(buf)
</snippet></ROW><ROW><id>16627478</id><snippet>.read()</snippet></ROW><ROW><id>16627478</id><snippet>.read()</snippet></ROW><ROW><id>16627830</id><snippet>RedirectView</snippet></ROW><ROW><id>16627830</id><snippet>get_redirect_view</snippet></ROW><ROW><id>16627830</id><snippet>from django.core.urlresolvers import reverse

class UserRedirectView(RedirectView):

    permanent = False

    def get_redirect_url(self, pk):
        # it would be better to use reverse here
        return '/myapp/%s/' % self.request.user.username
</snippet></ROW><ROW><id>16627830</id><snippet>UserRedirectView</snippet></ROW><ROW><id>16627830</id><snippet>myapp.urls.py</snippet></ROW><ROW><id>16627830</id><snippet>url(r'^$', UserRedirectView.as_view(), name='myapp_index'),
</snippet></ROW><ROW><id>16627830</id><snippet>reverse</snippet></ROW><ROW><id>16627830</id><snippet>/myapp/</snippet></ROW><ROW><id>16627830</id><snippet>url(r'^(?P&lt;username&gt;\w+)/$', 'myapp.view_user', name='myapp_view_user'),
</snippet></ROW><ROW><id>16627830</id><snippet>get_redirect_url</snippet></ROW><ROW><id>16627830</id><snippet>    def get_redirect_url(self, pk):
        return reverse('myapp_view_user', args=(self.request.user.username,))
</snippet></ROW><ROW><id>16627962</id><snippet>[i, j]</snippet></ROW><ROW><id>16627962</id><snippet>[i][j]</snippet></ROW><ROW><id>16627962</id><snippet>[i][j]</snippet></ROW><ROW><id>16627962</id><snippet>[:]</snippet></ROW><ROW><id>16627962</id><snippet>array[1]</snippet></ROW><ROW><id>16627962</id><snippet>[i, j]</snippet></ROW><ROW><id>16627962</id><snippet>array[:, 1]</snippet></ROW><ROW><id>16628379</id><snippet>GCD(a,b,c,d)</snippet></ROW><ROW><id>16628379</id><snippet>GCD(GCD(GCD(a,b),c),d)</snippet></ROW><ROW><id>16628379</id><snippet>reduce</snippet></ROW><ROW><id>16628379</id><snippet>len(numbers) &gt; 2</snippet></ROW><ROW><id>16628379</id><snippet>if len(numbers) &gt; 2:
    return reduce(lambda x,y: GCD([x,y]), numbers)
</snippet></ROW><ROW><id>16628379</id><snippet>gcd = reduce(lambda x,y:GCD([x,y]),[a,b,c,d])
</snippet></ROW><ROW><id>16628379</id><snippet>gcd = GCD(a,b)
gcd = GCD(gcd,c)
gcd = GCD(gcd,d)
</snippet></ROW><ROW><id>16628379</id><snippet>len(numbers) &lt;= 2</snippet></ROW><ROW><id>16628379</id><snippet>GCD</snippet></ROW><ROW><id>16628379</id><snippet>reduce</snippet></ROW><ROW><id>16628379</id><snippet>len(numbers) &gt; 2</snippet></ROW><ROW><id>16628381</id><snippet>import networkx as nx
def is_tree(G):
    if nx.number_of_nodes(G) != nx.number_of_edges(G) + 1:
        return False
    return nx.is_connected(G)

if __name__ == '__main__':

    print(is_tree(nx.path_graph(5)))
    print(is_tree(nx.star_graph(5)))
    print(is_tree(nx.house_graph()))
</snippet></ROW><ROW><id>16628472</id><snippet>SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
* * * * * /home/matthew/Programs/random_walk/random_walk.py /home/matthew/Programs/random_walk &gt;/dev/null 2&gt;&amp;1
</snippet></ROW><ROW><id>16628472</id><snippet>save_path = ''
if len(sys.argv) &gt; 1:
    save_path = sys.argv[1].rstrip('/')+'/random_walk.png'
else:
    save_path = os.path.dirname(os.path.realpath(__file__))+'/random_walk.png'
plt.savefig(save_path)
</snippet></ROW><ROW><id>16628472</id><snippet>import matplotlib
matplotlib.use('Agg')
</snippet></ROW><ROW><id>16628486</id><snippet>return redirect('index')
</snippet></ROW><ROW><id>16628550</id><snippet>-xterm-clipboard</snippet></ROW><ROW><id>16628550</id><snippet>vim</snippet></ROW><ROW><id>16628550</id><snippet>mvim</snippet></ROW><ROW><id>16628550</id><snippet>$PATH</snippet></ROW><ROW><id>16628550</id><snippet>*rc</snippet></ROW><ROW><id>16628550</id><snippet>alias vim='mvim -v'
</snippet></ROW><ROW><id>16628550</id><snippet>mvim</snippet></ROW><ROW><id>16628550</id><snippet>vim</snippet></ROW><ROW><id>16628550</id><snippet>$PATH</snippet></ROW><ROW><id>16628550</id><snippet>*rc</snippet></ROW><ROW><id>16628550</id><snippet>override-system-vi</snippet></ROW><ROW><id>16628601</id><snippet>os.system('source ' + ve_path + 'bin/activate')</snippet></ROW><ROW><id>16628601</id><snippet>activate_this.py</snippet></ROW><ROW><id>16628601</id><snippet>activate_this = 'A/bin/activate_this.py'
execfile(activate_this, dict(__file__=activate_this))
</snippet></ROW><ROW><id>16628730</id><snippet>urllib.request.urlopen</snippet></ROW><ROW><id>16628730</id><snippet>bytes</snippet></ROW><ROW><id>16628730</id><snippet>webpage = urlopen(url).read().decode('utf8')
</snippet></ROW><ROW><id>16628730</id><snippet>bytes</snippet></ROW><ROW><id>16628730</id><snippet>findrows = re.compile(b'&lt;td class="cmeTableCenter"&gt;(.*)&lt;/td&gt;')
</snippet></ROW><ROW><id>16628730</id><snippet>bytes</snippet></ROW><ROW><id>16628877</id><snippet>payload = {
  'user': 'newuser',
  'pass': '12345',
  'tos_understood': 'on',
  }
</snippet></ROW><ROW><id>16629054</id><snippet>&gt;&gt;&gt; lis1 = ['A', 'B', 'C']
&gt;&gt;&gt; lis2 = ['X', 'Y', 'Z']
&gt;&gt;&gt; z1 = zip(lis1,lis1[1:])  #use itertools.izip in py2x for memory efficiency
&gt;&gt;&gt; z2 = zip(lis2,lis2[1:])
&gt;&gt;&gt; for x,y in zip(z1,z2):
...     print x,y

('A', 'B') ('X', 'Y')
('B', 'C') ('Y', 'Z')
</snippet></ROW><ROW><id>16629118</id><snippet>import os

print "hello world"
os.system("python hello_world.py")
</snippet></ROW><ROW><id>16629125</id><snippet>sort_index</snippet></ROW><ROW><id>16629125</id><snippet>import numpy as np
import pandas as pd
x = np.random.randint(0, 200, 10**6)
df1 = pd.DataFrame({'x':x})
df2 = df1.set_index('x', drop=False)
df3 = df2.sort_index()
%timeit df1.ix[100]
%timeit df2.ix[100]
%timeit df3.ix[100]
</snippet></ROW><ROW><id>16629125</id><snippet>10000 loops, best of 3: 71.2 µs per loop
10 loops, best of 3: 38.9 ms per loop
10000 loops, best of 3: 134 µs per loop
</snippet></ROW><ROW><id>16629210</id><snippet># -*- mode: python -*-
import os
import pygst
pygst.require('0.10')

a = Analysis(['rthook.py', 'player.py'],
             pathex=[os.curdir],
             hiddenimports=[],
             hookspath=None,
             runtime_hooks=None)
pyz = PYZ(a.pure)
exe = EXE(pyz,
          a.scripts,
          exclude_binaries=True,
          name='player',
          debug=False,
          strip=None,
          upx=True,
          console=True )
coll = COLLECT(exe,
               a.binaries,
               a.zipfiles,
               a.datas,
               strip=None,
               upx=True,
               name='player')
</snippet></ROW><ROW><id>16629210</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os

GST_PLUGINS = '/opt/local/lib/gstreamer-0.10/'

def hook(mod):
    for f in [so for so in os.listdir(GST_PLUGINS) if so[-3:].lower() == '.so']:
        mod.binaries.append((os.path.join('gst-plugins', f),
                os.path.join(GST_PLUGINS, f),
                'BINARY'))

    return mod
</snippet></ROW><ROW><id>16629210</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys

if hasattr(sys, '_MEIPASS'):
    # PyInstaller &gt;= 1.6
    root = sys._MEIPASS
elif '_MEIPASS2' in environ:
    # PyInstaller &lt; 1.6 (tested on 1.5 only)
    root = os.environ['_MEIPASS2']
else:
    root = os.path.dirname(sys.argv[0])

os.chdir(root)

os.environ['GST_REGISTRY_FORK'] = 'no'
os.environ['GST_PLUGIN_PATH'] = os.path.join(root, 'gst-plugins')
</snippet></ROW><ROW><id>16629210</id><snippet>$ /path/to/pyinstaller/pyinstaller.py player.spec
</snippet></ROW><ROW><id>16629243</id><snippet>HDFStore</snippet></ROW><ROW><id>16629243</id><snippet>HDFStore</snippet></ROW><ROW><id>16629243</id><snippet>In [33]: %timeit test_sql_write(df)
1 loops, best of 3: 5.65 s per loop

In [34]: %timeit test_hdf_store_write(df)
1 loops, best of 3: 232 ms per loop

In [35]: %timeit test_hdf_table_write(df)
1 loops, best of 3: 1.92 s per loop

In [36]: %timeit test_sql_read()
1 loops, best of 3: 752 ms per loop

In [37]: %timeit test_hdf_store_read()
100 loops, best of 3: 11.9 ms per loop

In [38]: %timeit test_hdf_table_read()
10 loops, best of 3: 32.8 ms per loop
</snippet></ROW><ROW><id>16629243</id><snippet>import sqlite
import os

In [3]: df = DataFrame(randn(1000000,2),columns=list('AB'))
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 1000000 entries, 0 to 999999
Data columns (total 2 columns):
A    1000000  non-null values
B    1000000  non-null values
dtypes: float64(2)

def test_sql_write(df):
    if os.path.exists('test.sql'):
        os.remove('test.sql')
    sql_db = sqlite3.connect('test.sql')
    sql.write_frame(df, name='test_table', con=sql_db)
    sql_db.close()

def test_sql_read():
    sql_db = sqlite3.connect('test.sql')
    sql.read_frame("select * from test_table", sql_db)
    sql_db.close()

def test_hdf_store_write(df):
    df.to_hdf('test_store.hdf','test',mode='w')

def test_hdf_store_read():
    pd.read_hdf('test_store.hdf','test')

def test_hdf_table_write(df):
    df.to_hdf('test_table.hdf','test',table=True,mode='w')

def test_hdf_table_read():
    pd.read_hdf('test_table.hdf','test')
</snippet></ROW><ROW><id>16629449</id><snippet>&gt;&gt;&gt; print('\xe9')
é
&gt;&gt;&gt; print('\xe9'.encode('utf8'))
b'\xc3\xa9'
&gt;&gt;&gt; print('\xe9'.encode('latin1'))
b'\xe9'
&gt;&gt;&gt; print('Hello world!\n'.encode('utf8'))
b'Hello world!\n'
</snippet></ROW><ROW><id>16629449</id><snippet>repr()</snippet></ROW><ROW><id>16629449</id><snippet>\x..</snippet></ROW><ROW><id>16629449</id><snippet>\r</snippet></ROW><ROW><id>16629449</id><snippet>\n</snippet></ROW><ROW><id>16629449</id><snippet>print()</snippet></ROW><ROW><id>16629449</id><snippet>.prettify()</snippet></ROW><ROW><id>16629449</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>16629488</id><snippet>import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import ImageGrid
import numpy as np

im = np.arange(100)
im.shape = 10, 10
images = [im for i in range(20)]

fig = plt.figure(1, (4., 4.))
grid = ImageGrid(fig, 111,
                 nrows_ncols=(2, 10),
                 axes_pad=0,
)

for i in range(20):
    grid[i].imshow(images[i], cmap=plt.get_cmap('Greys_r'))  # The AxesGrid object work as a list of axes.
    grid[i].axis('off')
plt.show(block=True)
</snippet></ROW><ROW><id>16629553</id><snippet>def is_prime(x):
    if x &gt;= 2:
        for i in range(2,x):
            if x % i == 0: # &lt;----- You need to be checking if it IS evenly
                print "not prime" # divisible and break if so since it means
                break             # the number cannot be prime
            else:
                print "ok"
        else:
            print "prime"
    else:
        print "not prime"
</snippet></ROW><ROW><id>16629617</id><snippet>group</snippet></ROW><ROW><id>16629617</id><snippet>for key, group in groupby(sorted(words, key = len), len):
    grouplist = list(group)
    if len(grouplist) &gt; 1:
        print grouplist
</snippet></ROW><ROW><id>16629617</id><snippet>&gt;&gt;&gt; for key, group in groupby(sorted(words, key = len), len):
...     grouplist = list(group)
...     if len(grouplist) &gt; 1:
...         print grouplist
... 
['this', 'that', 'them', 'what']
</snippet></ROW><ROW><id>16629655</id><snippet>$HOME/.idlerc</snippet></ROW><ROW><id>16629655</id><snippet>config-main.cfg</snippet></ROW><ROW><id>16629655</id><snippet>.idlerc</snippet></ROW><ROW><id>16629663</id><snippet>with_metaclass</snippet></ROW><ROW><id>16629663</id><snippet>class FooMeta(type):
    def __new__(cls, name, bases, attrs):
        # do something with the kwargs...
        # for example:
        if 'foo' in attrs:
            attrs['fooattr'] = 'foovalue'
        return super(FooMeta, cls).__new__(cls, name, bases, attrs)
class FooBase(object):
    pass
class FooClass(with_metaclass(FooMeta, FooBase)):
    foo = "Yes"

&gt;&gt;&gt; FooClass.fooattr
'foovalue'
</snippet></ROW><ROW><id>16629663</id><snippet>kwargs</snippet></ROW><ROW><id>16629663</id><snippet>__dict__</snippet></ROW><ROW><id>16629663</id><snippet>attrs</snippet></ROW><ROW><id>16629663</id><snippet>dct</snippet></ROW><ROW><id>16629740</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>16629740</id><snippet>which python</snippet></ROW><ROW><id>16629821</id><snippet>addTask2</snippet></ROW><ROW><id>16629937</id><snippet>AWS_S3_CUSTOM_DOMAIN = 'my_bucket.s3-external-3.amazonaws.com'
</snippet></ROW><ROW><id>16630013</id><snippet>In [40]: data = """A,B,C
   ....: 1,2,3
   ....: 4,5,6
   ....: 7,8,9
   ....: want to skip this
   ....: also also skip this
   ....: """

In [41]: read_csv(StringIO(data), skip_footer=2)
Out[41]: 
   A  B  C
0  1  2  3
1  4  5  6
2  7  8  9
</snippet></ROW><ROW><id>16630133</id><snippet>itertools.islice()</snippet></ROW><ROW><id>16630133</id><snippet>start == stop</snippet></ROW><ROW><id>16630133</id><snippet>consume()</snippet></ROW><ROW><id>16630133</id><snippet>islice(it, n, n)</snippet></ROW><ROW><id>16630133</id><snippet>n</snippet></ROW><ROW><id>16630133</id><snippet>it</snippet></ROW><ROW><id>16630133</id><snippet>StopIteration</snippet></ROW><ROW><id>16630133</id><snippet>n</snippet></ROW><ROW><id>16630133</id><snippet>StopIteration</snippet></ROW><ROW><id>16630133</id><snippet>it</snippet></ROW><ROW><id>16630133</id><snippet>xrange(n, n, 1)</snippet></ROW><ROW><id>16630133</id><snippet>StopIteration</snippet></ROW><ROW><id>16630133</id><snippet>&gt;&gt;&gt; it = iter(xrange(1, 1))
&gt;&gt;&gt; print next(it)
Traceback (most recent call last):
  File "prog.py", line 4, in &lt;module&gt;
    print next(it)
StopIteration
</snippet></ROW><ROW><id>16630248</id><snippet>bytes</snippet></ROW><ROW><id>16630248</id><snippet>string</snippet></ROW><ROW><id>16630248</id><snippet>bytes</snippet></ROW><ROW><id>16630248</id><snippet>string</snippet></ROW><ROW><id>16630260</id><snippet>ids = []
for tweet in tweets:
    if 'id_str' in tweet:
        ids.append(tweet['id_str'])
</snippet></ROW><ROW><id>16630260</id><snippet>ids = [tweet['id_str'] for tweet in tweets if 'id_str' in tweet]
</snippet></ROW><ROW><id>16630271</id><snippet>b</snippet></ROW><ROW><id>16630271</id><snippet>c</snippet></ROW><ROW><id>16630271</id><snippet>b</snippet></ROW><ROW><id>16630271</id><snippet>c</snippet></ROW><ROW><id>16630271</id><snippet>by value</snippet></ROW><ROW><id>16630271</id><snippet>by reference</snippet></ROW><ROW><id>16630311</id><snippet>width</snippet></ROW><ROW><id>16630311</id><snippet>width = my_function()[1]</snippet></ROW><ROW><id>16630424</id><snippet>db_session</snippet></ROW><ROW><id>16630424</id><snippet>db_session = Session()
</snippet></ROW><ROW><id>16630424</id><snippet>db_session</snippet></ROW><ROW><id>16630608</id><snippet>in</snippet></ROW><ROW><id>16630608</id><snippet>matrix = [[str(in) for in in raw_input().strip()] for i in xrange(n)]
</snippet></ROW><ROW><id>16630608</id><snippet>SyntaxError</snippet></ROW><ROW><id>16630608</id><snippet>in</snippet></ROW><ROW><id>16630608</id><snippet>in</snippet></ROW><ROW><id>16630684</id><snippet>submit</snippet></ROW><ROW><id>16630684</id><snippet>import shutil
with open('downloaded', 'wb') as f:
    shutil.copyfileobj(br.submit(), f)
</snippet></ROW><ROW><id>16630684</id><snippet>br.select_form(predicate=lambda form: form.attrs['id'] == 'id-of-form')
</snippet></ROW><ROW><id>16630684</id><snippet>import mechanize
import shutil

br = mechanize.Browser()
br.open('http://stackoverflow.com/')
br.select_form(predicate=lambda form: form.attrs.get('id') == 'search')
br['q'] = '[python-mechanize]'
with open('search results.html', 'wb') as f:
    shutil.copyfileobj(br.submit(), f)
</snippet></ROW><ROW><id>16630891</id><snippet>from osv import fields, osv

class product_product(osv.osv):
    _name = 'product.product'
    _inherit = 'product.product'

    def custom_export(self, cr, uid, ids, context=None):

        return True 

product_product()
</snippet></ROW><ROW><id>16631119</id><snippet>&gt;&gt;&gt; import shutil
&gt;&gt;&gt; shutil.copyfile('file_to_read.pdf','file_to_save.pdf')
</snippet></ROW><ROW><id>16631119</id><snippet>&gt;&gt;&gt; with open('/tmp/fin.pdf','rb') as f1:
...    with open('/tmp/test.pdf','wb') as f2:
...       while True:
...          b=f1.read(1)
...          if b: 
...             # process b if this is your intent   
...             n=f2.write(b)
...          else: break
</snippet></ROW><ROW><id>16631119</id><snippet>&gt;&gt;&gt; with open('/tmp/fin.pdf','rb') as f1:
...    with open('/tmp/test.pdf','wb') as f2:
...       while True:
...          bytes=f1.read(1024)
...          if bytes: 
...              for byte in bytes:
...                 pass    # process the bytes if this is what you want
...              n=f2.write(bytes)
...          else:
...              break
</snippet></ROW><ROW><id>16631119</id><snippet>with open('/tmp/fin.pdf','rb') as f1,open('/tmp/test.pdf','wb') as f2:
    ...
</snippet></ROW><ROW><id>16631274</id><snippet>count += 1</snippet></ROW><ROW><id>16631274</id><snippet>list=['a','a','x','c','e','e','f','f','f']

i=0
count = 0

while count &lt; len(list)-2:
    if list[i] == list[i+1]:
        if list [i+1] != list [i+2]:
            print list[i]
            i+=1
            count +=1
        else:
            print "no"
            count += 1
    else:   
        i +=1
        count += 1
</snippet></ROW><ROW><id>16631274</id><snippet>from itertools import groupby

data = ['a','a','x','c','e','e','f','f','f']
for k, g in groupby(data):
    if len(list(g)) &gt; 1:
        print k
</snippet></ROW><ROW><id>16631405</id><snippet>import csv

with open('location.csv', newline='') as fp_in:
    reader = csv.reader(fp_in, delimiter=',')
    data = list(reader)

data.sort(key=lambda x: (len(x[-1].strip()) != 2, x[-1].strip()))

with open("locout.csv", "w", newline='') as fp_out:
    writer = csv.writer(fp_out, delimiter=',')
    writer.writerows(data)
</snippet></ROW><ROW><id>16631405</id><snippet>lambda x: (len(x[-1].strip()) != 2, x[-1].strip()))</snippet></ROW><ROW><id>16631558</id><snippet>bytes</snippet></ROW><ROW><id>16631558</id><snippet>b''</snippet></ROW><ROW><id>16631558</id><snippet>"b''"</snippet></ROW><ROW><id>16631558</id><snippet>if check == b'':
</snippet></ROW><ROW><id>16632086</id><snippet>sprintf</snippet></ROW><ROW><id>16632086</id><snippet>sprintf("my %s %s cat", "red", "fat")
</snippet></ROW><ROW><id>16632149</id><snippet>reduce()</snippet></ROW><ROW><id>16632307</id><snippet>&gt;&gt;&gt; [(x,y) for x in range(Z-2,Z+2) for y in range(W-2,W+2) if x != y and x &gt;= 0]
[(0, 3), (0, 4), (0, 5), (0, 6), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6)]
</snippet></ROW><ROW><id>16632307</id><snippet>&gt;&gt;&gt; [ i for i in range(100) if (i%2==0) and (i%3==0)]
[0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96]
</snippet></ROW><ROW><id>16632307</id><snippet>[ result for variables in iterable if condition ]
</snippet></ROW><ROW><id>16632414</id><snippet>max_len = max(max(map(len,l)) for l in zip(COLUMN_1,COLUMN_2))
</snippet></ROW><ROW><id>16632414</id><snippet>fmt</snippet></ROW><ROW><id>16632414</id><snippet>fmt=('{:^%d}' % max_len).format('%s')</snippet></ROW><ROW><id>16632414</id><snippet>with open('ofile.txt','w+') as f:
    max_len = max(max(map(len,l)) for l in zip(COLUMN_1,COLUMN_2))
    for line in zip(COLUMN_1,COLUMN_2):
        f.write(','.join(('{:&lt;%s}' % (max_len)).format(e) for e in line)+'\n')
</snippet></ROW><ROW><id>16632414</id><snippet>ofile.txt</snippet></ROW><ROW><id>16632414</id><snippet>KIC 7742534                 ,KIC 76                      
Variable Star of RR Lyr type,Variable Star               
V* V368 Lyr                 ,V* V33 Lyr                  
KIC 7742534                 ,KIC 76                      
4.0                         ,5.0                         
0.4564816                   ,0.45          
</snippet></ROW><ROW><id>16632810</id><snippet>Canvas</snippet></ROW><ROW><id>16632810</id><snippet>bind</snippet></ROW><ROW><id>16632810</id><snippet>import Tkinter as tk

class Application(tk.Frame):
    def __init__(self, master):
        tk.Frame.__init__(self, master)
        self.canvas = tk.Canvas(self.master, width=400, height=400)
        self.canvas.bind('&lt;Button-1&gt;', self.coordinates)
        self.canvas.pack()

    def coordinates(self, event):
        self.x = (event.x, event.y) # set x (or another attr) to coordinate tuple

if __name__ == "__main__":
    root = tk.Tk()
    app = Application(root)
    app.mainloop()
</snippet></ROW><ROW><id>16633091</id><snippet>ps</snippet></ROW><ROW><id>16633091</id><snippet>free</snippet></ROW><ROW><id>16633091</id><snippet>gc</snippet></ROW><ROW><id>16633091</id><snippet>gc.count()</snippet></ROW><ROW><id>16633091</id><snippet>gc.collect()</snippet></ROW><ROW><id>16633091</id><snippet>wpa_supplicant</snippet></ROW><ROW><id>16633122</id><snippet>def application(environ, start_response):
    status = '200 OK'
    output = 'Hello World!'

    response_headers = [('Content-type', 'text/plain'),
                    ('Content-Length', str(len(output)))]
    start_response(status, response_headers)

    return [output]
</snippet></ROW><ROW><id>16633122</id><snippet>def application(env, start_response):
    start_response('200 OK', [('Content-Type','text/html')])
    return b"Hello World"
</snippet></ROW><ROW><id>16633471</id><snippet>def func(listOfItems):
    seen = set()  #use set to keep track of already seen items, sets provide O(1) lookup  
    for x in listOfItems:
        for y in listOfItems:
            if x!=y and (y,x) not in seen:
                seen.add((x,y)) 
                yield x,y

&gt;&gt;&gt; lis = [1,2,3,1,2]
&gt;&gt;&gt; list(func(lis))
[(1, 2), (1, 3), (1, 2), (2, 3), (1, 2), (1, 3), (1, 2), (2, 3)]
</snippet></ROW><ROW><id>16633878</id><snippet>if __name__ == '__main__':
    start = datetime.now()
    db = Database(force_refresh_cache=False,
                  timestamp_filename='timestamp.pickle',
                  schema_filename='schema.pickle')
    print datetime.now(), 'Took:', (datetime.now() - start).total_seconds()

    run(host='localhost', port=80, debug=True)
</snippet></ROW><ROW><id>16633935</id><snippet>static_url_path=""</snippet></ROW><ROW><id>16633935</id><snippet>static_url_path</snippet></ROW><ROW><id>16633935</id><snippet>if (current_app.static_url_path is not None and
    request.path.startswith(current_app.static_url_path)
):
    # load up an anonymous user for static pages
    _request_ctx_stack.top.user = self.anonymous_user()
    return
</snippet></ROW><ROW><id>16633935</id><snippet>static_url_path</snippet></ROW><ROW><id>16633935</id><snippet>""</snippet></ROW><ROW><id>16633935</id><snippet>True</snippet></ROW><ROW><id>16633935</id><snippet>load_user</snippet></ROW><ROW><id>16633935</id><snippet>#login_manager.login_view = "login"</snippet></ROW><ROW><id>16633935</id><snippet>app.debug = True
if app.config['DEBUG']:
    from werkzeug import SharedDataMiddleware
    import os
    app.wsgi_app = SharedDataMiddleware(app.wsgi_app, {
      '/': os.path.dirname(__file__)
    })

if __name__ == "__main__":
    app.run(host="0.0.0.0")
</snippet></ROW><ROW><id>16633994</id><snippet>list.append()</snippet></ROW><ROW><id>16633994</id><snippet>&gt;&gt;&gt; lis = [(199L, 5L, 247L, 44L), (203L, 5L, 245L, 6L), 
... (219L, 5L, 196L, 6L)]
&gt;&gt;&gt; lis.append((222L, 5L, 227L, 5L))
&gt;&gt;&gt; lis
[(199L, 5L, 247L, 44L), (203L, 5L, 245L, 6L), (219L, 5L, 196L, 6L), (222L, 5L, 227L, 5L)]
</snippet></ROW><ROW><id>16634024</id><snippet>command</snippet></ROW><ROW><id>16634024</id><snippet>green</snippet></ROW><ROW><id>16634024</id><snippet>printfunction</snippet></ROW><ROW><id>16634024</id><snippet>Btn=Button(text="Trigger lambda", command=lambda: printfunction(green))
</snippet></ROW><ROW><id>16634024</id><snippet>green</snippet></ROW><ROW><id>16634024</id><snippet>printfunction</snippet></ROW><ROW><id>16634024</id><snippet>functools.partial()</snippet></ROW><ROW><id>16634024</id><snippet>from functools import partial

Btn=Button(text="Trigger lambda", command=partial(printfunction, green))
</snippet></ROW><ROW><id>16634290</id><snippet>table_values = [[col1_value_0, col2_value_0, col3_value_0], [col1_value_1, col2_value_1, col3_value_1], ...]
</snippet></ROW><ROW><id>16634290</id><snippet>table_rows = zip(col1_values, col2_values, col3_values)
</snippet></ROW><ROW><id>16634290</id><snippet>{% for col1_val, col2_val, col3_val in table_rows %}
  &lt;tr&gt;
    &lt;td&gt;{{ col1_val }}&lt;/td&gt;
    &lt;td&gt;{{ col2_val }}&lt;/td&gt;
    &lt;td&gt;{{ col3_val }}&lt;/td&gt;
  &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>16634367</id><snippet>/usr/local/share/python/pip</snippet></ROW><ROW><id>16634367</id><snippet>#!/usr/local/Cellar/python/2.7.3/bin/python
</snippet></ROW><ROW><id>16634375</id><snippet>__init__</snippet></ROW><ROW><id>16634375</id><snippet>super</snippet></ROW><ROW><id>16634375</id><snippet>object</snippet></ROW><ROW><id>16634444</id><snippet>StreamHandler</snippet></ROW><ROW><id>16634444</id><snippet>def emit(self, record):
    """
    Emit a record.

    If a formatter is specified, it is used to format the record.
    The record is then written to the stream with a trailing newline.  If
    exception information is present, it is formatted using
    traceback.print_exception and appended to the stream.  If the stream
    has an 'encoding' attribute, it is used to determine how to do the
    output to the stream.
    """
    try:
        msg = self.format(record)
        stream = self.stream
        stream.write(msg)
        stream.write(self.terminator)
        self.flush()   # &lt;---
    except (KeyboardInterrupt, SystemExit): #pragma: no cover
        raise
    except:
        self.handleError(record)
</snippet></ROW><ROW><id>16634444</id><snippet>Handler</snippet></ROW><ROW><id>16634444</id><snippet>flush</snippet></ROW><ROW><id>16634444</id><snippet>emit</snippet></ROW><ROW><id>16634523</id><snippet>raw_input()</snippet></ROW><ROW><id>16634523</id><snippet>float</snippet></ROW><ROW><id>16634523</id><snippet>int</snippet></ROW><ROW><id>16634523</id><snippet>math.pi()</snippet></ROW><ROW><id>16634523</id><snippet>math.pi</snippet></ROW><ROW><id>16634523</id><snippet>import math
radius = raw_input("Enter the radius of your circle: ")
def area_of_circle(radius):
    try :
        f = float(radius) #if this conversion fails then the `except` block will handle it
        return math.pi * f**2   #use just math.pi
    except ValueError:
        return "'Please enter a valid number'"

print "Your Circle area is {0} units squared".format(area_of_circle(radius))
</snippet></ROW><ROW><id>16634740</id><snippet>&gt;&gt;&gt; a = np.arange(12).reshape(3,4)
&gt;&gt;&gt; a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
&gt;&gt;&gt; np.delete(a, [1,3], axis=1)
array([[ 0,  2],
       [ 4,  6],
       [ 8, 10]])
</snippet></ROW><ROW><id>16634815</id><snippet>urllib2</snippet></ROW><ROW><id>16634815</id><snippet>urllib2</snippet></ROW><ROW><id>16634815</id><snippet>urllib.request</snippet></ROW><ROW><id>16634815</id><snippet>urllib.error</snippet></ROW><ROW><id>16634815</id><snippet>2to3</snippet></ROW><ROW><id>16634815</id><snippet>urllib.request</snippet></ROW><ROW><id>16634981</id><snippet>In [11]: df
Out[11]:
                                               dics
0           {u'funny': 2, u'useful': 0, u'cool': 0}
1     {u'funny': 370, u'useful': 487, u'cool': 296}
2          {u'funny': 2, u'useful': 17, u'cool': 1}
3  {u'funny': 1233, u'useful': 2452, u'cool': 1875}
4           {u'funny': 4, u'useful': 7, u'cool': 2}
5     {u'funny': 408, u'useful': 819, u'cool': 557}
6     {u'funny': 321, u'useful': 673, u'cool': 430}
7           {u'funny': 0, u'useful': 8, u'cool': 0}

In [12]: df['dics'].apply(pd.Series)
Out[12]:
   cool  funny  useful
0     0      2       0
1   296    370     487
2     1      2      17
3  1875   1233    2452
4     2      4       7
5   557    408     819
6   430    321     673
7     0      0       8
</snippet></ROW><ROW><id>16635003</id><snippet>int.__mul__</snippet></ROW><ROW><id>16635003</id><snippet>operator.mul</snippet></ROW><ROW><id>16635003</id><snippet>&gt;&gt;&gt; int.__mul__
&lt;slot wrapper '__mul__' of 'int' objects&gt;
&gt;&gt;&gt; operator.mul
&lt;built-in function mul&gt;
</snippet></ROW><ROW><id>16635003</id><snippet>wrapperdescr_call</snippet></ROW><ROW><id>16635003</id><snippet>
static PyObject *
wrapperdescr_call(PyWrapperDescrObject *descr, PyObject *args, PyObject *kwds)
{
    Py_ssize_t argc;
    PyObject *self, *func, *result;

    /* Make sure that the first argument is acceptable as 'self' */
    assert(PyTuple_Check(args));
    argc = PyTuple_GET_SIZE(args);
    if (argc d_type-&gt;tp_name);
        return NULL;
    }
    self = PyTuple_GET_ITEM(args, 0);
    if (!_PyObject_RealIsSubclass((PyObject *)Py_TYPE(self),
                                  (PyObject *)(descr-&gt;d_type))) {
        PyErr_Format(PyExc_TypeError,
                     "descriptor '%.200s' "
                     "requires a '%.100s' object "
                     "but received a '%.100s'",
                     descr_name((PyDescrObject *)descr),
                     descr-&gt;d_type-&gt;tp_name,
                     self-&gt;ob_type-&gt;tp_name);
        return NULL;
    }

    &lt;b&gt;func = PyWrapper_New((PyObject *)descr, self);&lt;/b&gt;
    if (func == NULL)
        return NULL;
    args = PyTuple_GetSlice(args, 1, argc);
    if (args == NULL) {
        Py_DECREF(func);
        return NULL;
    }
    result = PyEval_CallObjectWithKeywords(func, args, kwds);
    Py_DECREF(args);
    Py_DECREF(func);
    return result;
}
</snippet></ROW><ROW><id>16635003</id><snippet>func = PyWrapper_New((PyObject *)descr, self);
</snippet></ROW><ROW><id>16635003</id><snippet>int.__mul__</snippet></ROW><ROW><id>16635003</id><snippet>operator.mul</snippet></ROW><ROW><id>16635096</id><snippet>yes</snippet></ROW><ROW><id>16635096</id><snippet>no</snippet></ROW><ROW><id>16635096</id><snippet>not</snippet></ROW><ROW><id>16635096</id><snippet>while userInput not in ['yes', 'no']:
</snippet></ROW><ROW><id>16635096</id><snippet>while userInput not in {'yes', 'no'}:
</snippet></ROW><ROW><id>16635096</id><snippet>userInput in ['yes', 'no']</snippet></ROW><ROW><id>16635096</id><snippet>True</snippet></ROW><ROW><id>16635096</id><snippet>userInput</snippet></ROW><ROW><id>16635096</id><snippet>'yes'</snippet></ROW><ROW><id>16635096</id><snippet>'no'</snippet></ROW><ROW><id>16635096</id><snippet>endProgram</snippet></ROW><ROW><id>16635096</id><snippet>endProgram = userInput == 'no'
</snippet></ROW><ROW><id>16635096</id><snippet>userInput</snippet></ROW><ROW><id>16635096</id><snippet>yes</snippet></ROW><ROW><id>16635096</id><snippet>no</snippet></ROW><ROW><id>16635096</id><snippet>yes</snippet></ROW><ROW><id>16635096</id><snippet>no</snippet></ROW><ROW><id>16635115</id><snippet>from open_facebook.api import OpenFacebook
graph = OpenFacebook(access_token)
graph.get('%s/likes' % facebook_id)
graph.fql('SELECT ... FROM like WHERE post_id = A and user_id = B')
</snippet></ROW><ROW><id>16635261</id><snippet>import sys
print(sys.version)
</snippet></ROW><ROW><id>16635261</id><snippet>print ...</snippet></ROW><ROW><id>16635261</id><snippet>print(...)</snippet></ROW><ROW><id>16635261</id><snippet>print (first.capitalize(), middle.capitalize(), last.capitalize(), sep='\t')
</snippet></ROW><ROW><id>16635261</id><snippet>sep</snippet></ROW><ROW><id>16635275</id><snippet>port.write(struct.pack('&lt;cii', 'd', address, length)
d = port.read(1)         #'d' expected
data = port.read(length) #length bytes of data expected
if d != 'd' or len(data) &lt; length:
    raise Exception("Bad response received")
</snippet></ROW><ROW><id>16635275</id><snippet>&lt;</snippet></ROW><ROW><id>16635275</id><snippet>c</snippet></ROW><ROW><id>16635275</id><snippet>i</snippet></ROW><ROW><id>16635390</id><snippet>import matplotlib as mpl
mpl.rcParams['font.family'] = 'Arial'
</snippet></ROW><ROW><id>16635390</id><snippet>'Helvetica'</snippet></ROW><ROW><id>16635390</id><snippet>import matplotlib.pyplot as plt
from numpy.random import normal
from itertools import count
import matplotlib as mpl
mpl.rcParams['font.family'] = 'Arial'
a = {u'\u043f\u0430\u0440\u0435\u0430\u0442\u0430': 0.018144370928201092, u'\u0440\u0435\u043b\u0430\u0442\u0438\u0432\u0438\u0442\u0438\u0441\u0442\u0438\u0447\u043a\u0430\u0442\u0430': 0.008406336989671147, u'\u043d\u0430\u043e\u0453\u0430': 0.0704839024518581, u'\u0444\u0438\u0437\u0438\u043a\u0430': 0.025219010969013446, u'\u043a\u043e\u0438': 0.0039908251856718025, u'\u0438\u0437\u0431\u0443\u0432\u043d\u0430\u043b\u0430': 0.0035792606713834184, u'\u043c\u0435\u0445\u0430\u043d\u0438\u043a\u0430\u0442\u0430': 0.008406336989671147, u'\u043c\u0438\u043a\u0440\u043e\u0434\u0438\u043c\u0435\u043d\u0437\u0438\u0438': 0.008406336989671147, u'\u0434\u0430\u0432\u0430': 0.016812673979342295, u'\u0441\u0442\u0440\u0430\u043d\u0430': 0.008406336989671147}

plt.bar(*zip(*zip(count(), a.values())))
plt.title("Gaussian Histogram")
plt.xticks(*zip(*zip(count(0.4), a.keys())))
plt.xlabel("Value")
plt.ylabel("Frequency")

plt.show()
</snippet></ROW><ROW><id>16635390</id><snippet>Arial</snippet></ROW><ROW><id>16635390</id><snippet>import matplotlib.font_manager as font_manager
print(sorted(font_manager.findSystemFonts()))
</snippet></ROW><ROW><id>16635390</id><snippet>prop = font_manager.FontProperties(fname=path)
mpl.rcParams['font.family'] = prop.get_name()
</snippet></ROW><ROW><id>16635390</id><snippet>path</snippet></ROW><ROW><id>16635390</id><snippet>findSystemFonts()</snippet></ROW><ROW><id>16635399</id><snippet>ctypes</snippet></ROW><ROW><id>16635399</id><snippet>plate.plate(x.ctypes.data, y.ctypes.data, ctypes.c_int(N))
</snippet></ROW><ROW><id>16635399</id><snippet>ctypes</snippet></ROW><ROW><id>16635399</id><snippet>plate.plate(ctypes.c_void_p(x.ctypes.data),
            ctypes.c_void_p(y.ctypes.data),
            ctypes.c_int(N))
</snippet></ROW><ROW><id>16635399</id><snippet>float</snippet></ROW><ROW><id>16635399</id><snippet>numpy</snippet></ROW><ROW><id>16635399</id><snippet>numpy</snippet></ROW><ROW><id>16635403</id><snippet>config</snippet></ROW><ROW><id>16635403</id><snippet>global</snippet></ROW><ROW><id>16635403</id><snippet>cherrypy.config.update()</snippet></ROW><ROW><id>16635403</id><snippet>cherrypy.quickstart()</snippet></ROW><ROW><id>16635403</id><snippet>import sys
import cherrypy
import os
from Cheetah.Template import Template

class Root:
    @cherrypy.expose
    def index(self):
        htmlTemplate = Template(file='templates/index.tmpl')
        htmlTemplate.css_scripts=['static/css/main.css']
        return str(htmlTemplate)

# On Startup
current_dir = os.path.dirname(os.path.abspath(__file__)) + os.path.sep
config = {
    'global': {
        'environment': 'production',
        'log.screen': True,
        'server.socket_host': '127.0.0.1',
        'server.socket_port': 2000,
        'engine.autoreload_on': True,
        'log.error_file': os.path.join(current_dir, 'errors.log'),
        'log.access_file': os.path.join(current_dir, 'access.log'),
    },
    '/':{
        'tools.staticdir.root' : current_dir,
    },
    '/static':{
        'tools.staticdir.on' : True,
        'tools.staticdir.dir' : 'static',
    },
}
cherrypy.quickstart(Root(), '/', config)
</snippet></ROW><ROW><id>16635531</id><snippet>Toplevel</snippet></ROW><ROW><id>16635531</id><snippet>Tk</snippet></ROW><ROW><id>16635531</id><snippet>geometry</snippet></ROW><ROW><id>16635678</id><snippet>reduce()</snippet></ROW><ROW><id>16635678</id><snippet>u</snippet></ROW><ROW><id>16635678</id><snippet>y</snippet></ROW><ROW><id>16635678</id><snippet>reduce()</snippet></ROW><ROW><id>16635678</id><snippet>reduce()</snippet></ROW><ROW><id>16635678</id><snippet>map(''.join, y)
</snippet></ROW><ROW><id>16635678</id><snippet>[''.join(x) for x in y]
</snippet></ROW><ROW><id>16635728</id><snippet>write()</snippet></ROW><ROW><id>16635728</id><snippet>line1</snippet></ROW><ROW><id>16635728</id><snippet>test</snippet></ROW><ROW><id>16635728</id><snippet>line3</snippet></ROW><ROW><id>16635728</id><snippet>line1</snippet></ROW><ROW><id>16635728</id><snippet>line3</snippet></ROW><ROW><id>16635728</id><snippet>f.write("line1\n")
f.flush()
subprocess.call(arg, stdout=f)
f.write("line3\n")
</snippet></ROW><ROW><id>16635792</id><snippet>profiler.py</snippet></ROW><ROW><id>16635792</id><snippet>profiler.py</snippet></ROW><ROW><id>16635792</id><snippet>&lt;site-packages&gt;/cherrypy/lib</snippet></ROW><ROW><id>16635792</id><snippet>python profiler.py /directory/containing/prof/files 8080
</snippet></ROW><ROW><id>16635792</id><snippet>localhost:8080</snippet></ROW><ROW><id>16635792</id><snippet>.prof</snippet></ROW><ROW><id>16635850</id><snippet>id</snippet></ROW><ROW><id>16635850</id><snippet>def getRelation(request, id):
    id = int(id)
    # the rest of your view
</snippet></ROW><ROW><id>16635850</id><snippet>&gt;&gt;&gt; "foo" * 3
'foofoofoo'
</snippet></ROW><ROW><id>16635850</id><snippet>-1</snippet></ROW><ROW><id>16635850</id><snippet>&gt;&gt;&gt; "foo" * -1
''
</snippet></ROW><ROW><id>16635850</id><snippet>&gt;&gt;&gt; "12" * -1
''
&gt;&gt;&gt; int("12") * -1
-12
</snippet></ROW><ROW><id>16635997</id><snippet>itertools</snippet></ROW><ROW><id>16635997</id><snippet>grouper()</snippet></ROW><ROW><id>16635997</id><snippet>import itertools

def grouper(iterable, n, fillvalue=None):
    """Collect data into fixed-length chunks or blocks"""
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)

data = ['John', 'Sally', '5', '10', '11', '4', 'John', 'Sally', '3', '7', '7', '10', 'Bill', 'Hallie', '4', '6', '2', '1']

grouper(data, 6)
</snippet></ROW><ROW><id>16635997</id><snippet>[
    ('John', 'Sally', '5', '10', '11', '4'), 
    ('John', 'Sally', '3', '7', '7', '10'), 
    ('Bill', 'Hallie', '4', '6', '2', '1')
]
</snippet></ROW><ROW><id>16635997</id><snippet>def offset_iter(iterable, n):
    offset = iter(iterable)
    consume(offset, n)
    return offset

data = ['a', 'a', 'x', 'c', 'e', 'e', 'f', 'f', 'f']

offset_3 = offset_iter(data, 3)

for item, plus_3 in zip(data, offset_3): #Naturally, itertools.izip() in 2.x
    print(item, plus_3)                  #if memory usage is important.
</snippet></ROW><ROW><id>16635997</id><snippet>itertools.zip_longest()</snippet></ROW><ROW><id>16635997</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>16635997</id><snippet>consume()</snippet></ROW><ROW><id>16635997</id><snippet>itertools</snippet></ROW><ROW><id>16635997</id><snippet>import itertools
import collections

def consume(iterator, n):
    """Advance the iterator n-steps ahead. If n is none, consume entirely."""
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(itertools.islice(iterator, n, n), None)
</snippet></ROW><ROW><id>16635997</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>16635997</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; data = ['a', 'a', 'x', 'c', 'e', 'e', 'f', 'f', 'f']
&gt;&gt;&gt; grouped = itertools.groupby(data)
&gt;&gt;&gt; [(key, len(list(items))) for key, items in grouped]
[('a', 2), ('x', 1), ('c', 1), ('e', 2), ('f', 3)]
</snippet></ROW><ROW><id>16635997</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>16635997</id><snippet>key</snippet></ROW><ROW><id>16636290</id><snippet>import urllib2

url = "http://www.cmegroup.com/CmeWS/mvc/ProductSlate/V1/List/500/1?sortField=oi&amp;sortAsc=false&amp;venues=3&amp;page=1&amp;cleared=1&amp;group=1&amp;r=eSxQS2SI"
user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
headers = { 'User-Agent' : user_agent }

req = urllib2.Request(url, headers=headers)

response = urllib2.urlopen(req)

your_json = response.read()
response.close()
</snippet></ROW><ROW><id>16636309</id><snippet>User</snippet></ROW><ROW><id>16636309</id><snippet>User</snippet></ROW><ROW><id>16636309</id><snippet>fields</snippet></ROW><ROW><id>16636309</id><snippet>TaskUser</snippet></ROW><ROW><id>16636309</id><snippet>TaskUser</snippet></ROW><ROW><id>16636309</id><snippet>User</snippet></ROW><ROW><id>16636309</id><snippet>TaksUser</snippet></ROW><ROW><id>16636309</id><snippet>ForeignKey</snippet></ROW><ROW><id>16636309</id><snippet>TaskUser</snippet></ROW><ROW><id>16636365</id><snippet>frozenset(['A','T','G','C'])
</snippet></ROW><ROW><id>16636382</id><snippet>data.csv</snippet></ROW><ROW><id>16636382</id><snippet>import numpy as np
import matplotlib.pyplot as plt
data = np.loadtxt('data.csv')
x = [200, 400, 600, 800]
plt.plot(x, data.T)
plt.legend((1,2,3))
plt.show()
</snippet></ROW><ROW><id>16636969</id><snippet>urlpatterns = patterns("myapp.views",
    url(r'^$', 'index',dict(template_name = 'myapp/index.html'), name = 'home'),
    url(r'^kick-ass-chart/$', 'render_chart', name='myapp_render_chart'),
)
</snippet></ROW><ROW><id>16636986</id><snippet>poster</snippet></ROW><ROW><id>16636986</id><snippet>Image</snippet></ROW><ROW><id>16636986</id><snippet>data = urllib2.urlopen("http://example.com/image.png")
data = StringIO(data.read())
</snippet></ROW><ROW><id>16636986</id><snippet>data</snippet></ROW><ROW><id>16636986</id><snippet>poster</snippet></ROW><ROW><id>16636986</id><snippet>StringIO</snippet></ROW><ROW><id>16636986</id><snippet>poster</snippet></ROW><ROW><id>16636986</id><snippet>Content-Type</snippet></ROW><ROW><id>16636986</id><snippet>StringIO</snippet></ROW><ROW><id>16636986</id><snippet>headers</snippet></ROW><ROW><id>16636986</id><snippet>from poster.encode import multipart_encode

data = open('example.png', 'rb')
datagen, headers = multipart_encode({"image1": data})
</snippet></ROW><ROW><id>16636986</id><snippet>from poster.encode import multipart_encode

data = urllib2.urlopen("http://example.com/image.png")
data = StringIO(data.read())
datagen, headers = multipart_encode({"image1": data})
</snippet></ROW><ROW><id>16636986</id><snippet>Content-Type</snippet></ROW><ROW><id>16636986</id><snippet>poster</snippet></ROW><ROW><id>16636986</id><snippet>encode.py</snippet></ROW><ROW><id>16636986</id><snippet>        if hasattr(value, 'read'):
            # Looks like a file object
            filename = getattr(value, 'name', None)
            if filename is not None:
                filetype = mimetypes.guess_type(filename)[0]
            else:
                filetype = None
</snippet></ROW><ROW><id>16636986</id><snippet>filename</snippet></ROW><ROW><id>16636986</id><snippet>None</snippet></ROW><ROW><id>16636986</id><snippet>from poster.encode import multipart_encode, MultipartParam

data = urllib2.urlopen("http://example.com/image.png")
data = StringIO(data.read())
param = MultipartParam(name='source',
                       filename='image.png',
                       filetype='image/png',
                       fileobj=data)
datagen, headers = multipart_encode({"source": param})
</snippet></ROW><ROW><id>16637037</id><snippet>import Tkinter as tk


def swapsies():
    oldfg = label.cget("foreground")
    oldbg = label.cget("background")
    label.config(background=oldfg, foreground=oldbg)
    print "Foreground: {0} Background: {1}".format(oldfg, oldbg)


root = tk.Tk()
label = tk.Label(root, text="Hello there", background="#000000", foreground="#ffffff")
label.pack(side=tk.LEFT)
mega_button = tk.Button(root, text="GO!", command=swapsies)
mega_button.pack(side=tk.LEFT)

root.mainloop()
</snippet></ROW><ROW><id>16637037</id><snippet>"Foreground: #ffffff Background: #000000"
</snippet></ROW><ROW><id>16637042</id><snippet>raw_input</snippet></ROW><ROW><id>16637042</id><snippet>coeffs = raw_input('Enter a list of coefficients from your polynomial equation: ') # is a String
poly = coeffs.split() # split the string based on whitespace
poly = map(int, poly) # Convert each element to integer using int(...)
</snippet></ROW><ROW><id>16637042</id><snippet>float</snippet></ROW><ROW><id>16637042</id><snippet>int</snippet></ROW><ROW><id>16637042</id><snippet>coeffs.split(",")</snippet></ROW><ROW><id>16637042</id><snippet>coeffs.split()</snippet></ROW><ROW><id>16637042</id><snippet>&gt;&gt;&gt; x=int(raw_input('Enter the value where you want to evaluate your polynomial equation: '))
Enter the value where you want to evaluate your polynomial equation: 2
&gt;&gt;&gt; coeffs = raw_input('Enter a list of coefficients from your polynomial equation: ')
Enter a list of coefficients from your polynomial equation: 3 2 5
&gt;&gt;&gt; poly = coeffs.split()
&gt;&gt;&gt; poly = map(int, poly)
&gt;&gt;&gt; print(evaluatePoly(poly, x))
27.0
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16637258</id><snippet>plt.cla()</snippet></ROW><ROW><id>16637296</id><snippet># in suchandsuch/bot.py

class LaLaLa():
    def __init__(self):
        self.donenow = 0
        print "LaLaLa() initialized."
        #  don't need a `return` here

def start(self):
    pages = bot.cats_recursive('something')
    for page in pages:
        self.process_page(page)

bot = LaLaLa()
</snippet></ROW><ROW><id>16637296</id><snippet>__init__.py</snippet></ROW><ROW><id>16637296</id><snippet>bot = LaLaLa()
</snippet></ROW><ROW><id>16637453</id><snippet>pyodbc</snippet></ROW><ROW><id>16637453</id><snippet>... import pyodbc as db
... conn = db.connect(connect_string)
... cursor = conn.cursor()
&gt;&gt;&gt; # One parameter
... res = cursor.execute("SELECT 1 WHERE 1=?", [1,])
... print(cursor.fetchall())
[(1, )]
&gt;&gt;&gt; # Two parameters
... res = cursor.execute("SELECT 2 WHERE ?=?", [1, 1])
... print(cursor.fetchall())
[(2, )]
&gt;&gt;&gt; conn.close()
</snippet></ROW><ROW><id>16637453</id><snippet>pypyodbc</snippet></ROW><ROW><id>16637453</id><snippet>... import pypyodbc as db
... conn = db.connect(connect_string)
... cursor = conn.cursor()
&gt;&gt;&gt; # One parameter
... res = cursor.execute("SELECT 1 WHERE 1=?", [1,])
... print(cursor.fetchall())
[(1,)]
&gt;&gt;&gt; # Two parameters
... res = cursor.execute("SELECT 2 WHERE ?=?", [1, 1])
... print(cursor.fetchall())
Traceback (most recent call last):
...
TypeError: 'DatabaseError' object does not support indexing
&gt;&gt;&gt; conn.close()
</snippet></ROW><ROW><id>16637465</id><snippet>activate</snippet></ROW><ROW><id>16637465</id><snippet>testOutput = { [1,0,0,1] : [1], [1,1,0,1] : [0], [1,0,1,1]:[0], [1,0,1,0]:[1] }

for input, expectedOutput in testInput.items():
    output = net.activate(input)
    if output != expectedOutput:
        print "{} didn't match the desired output." 
        print "Expected {}, got {}".format(input, expectedOutput, output)
</snippet></ROW><ROW><id>16637555</id><snippet>file1</snippet></ROW><ROW><id>16637555</id><snippet>file2</snippet></ROW><ROW><id>16637555</id><snippet>__init__.py</snippet></ROW><ROW><id>16637555</id><snippet>from file1 import f</snippet></ROW><ROW><id>16637555</id><snippet>.file1</snippet></ROW><ROW><id>16637572</id><snippet>store['df'] = df</snippet></ROW><ROW><id>16637572</id><snippet>close</snippet></ROW><ROW><id>16637572</id><snippet>.h5</snippet></ROW><ROW><id>16637572</id><snippet>.csv</snippet></ROW><ROW><id>16637572</id><snippet>store/append</snippet></ROW><ROW><id>16637572</id><snippet>for f in files:
  df = pd.read_csv(f)
  df.to_hdf('file.h5',f,df)
</snippet></ROW><ROW><id>16637572</id><snippet>pd.read_hdf('my_store.h5','a_table_node',['index&gt;100'])
</snippet></ROW><ROW><id>16637605</id><snippet>f</snippet></ROW><ROW><id>16637605</id><snippet>__getitem__</snippet></ROW><ROW><id>16637605</id><snippet>hasattr(f, '__getitem__')</snippet></ROW><ROW><id>16637605</id><snippet>f[0]</snippet></ROW><ROW><id>16637605</id><snippet>TypeError: 'file' object has no attribute '__getitem__'
</snippet></ROW><ROW><id>16637605</id><snippet>f.readlines()</snippet></ROW><ROW><id>16637605</id><snippet>__iter__</snippet></ROW><ROW><id>16637605</id><snippet>for ... in ...</snippet></ROW><ROW><id>16637605</id><snippet>__iter__</snippet></ROW><ROW><id>16637605</id><snippet>__next__</snippet></ROW><ROW><id>16637605</id><snippet>__iter__</snippet></ROW><ROW><id>16637605</id><snippet>next()</snippet></ROW><ROW><id>16637605</id><snippet>first_line = next(f)
second_line = next(f)
next_line_that_starts_with_0 = next(line for line in f if line.startswith('0'))
</snippet></ROW><ROW><id>16637605</id><snippet>f.seek(0)</snippet></ROW><ROW><id>16637607</id><snippet>In [9]: s = Series([list('ABC'),list('DEF'),list('ABEF')])

In [10]: s
Out[10]: 
0       [A, B, C]
1       [D, E, F]
2    [A, B, E, F]
dtype: object

In [11]: s.apply(lambda x: Series(1,index=x)).fillna(0)
Out[11]: 
   A  B  C  D  E  F
0  1  1  1  0  0  0
1  0  0  0  1  1  1
2  1  1  0  0  1  1
</snippet></ROW><ROW><id>16637661</id><snippet>vrem</snippet></ROW><ROW><id>16637661</id><snippet>percent = psutil.virtual_memory().percent</snippet></ROW><ROW><id>16637661</id><snippet>&gt;&gt;&gt; help(psutil.virtual_memory)
Help on function virtual_memory in module psutil:

virtual_memory()
    Return statistics about system memory usage as a namedtuple
    including the following fields, expressed in bytes:
</snippet></ROW><ROW><id>16637906</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "John r Spencer Farrow r David K r Gillian"
&gt;&gt;&gt; re.split(r'\br\b',s)
['John ', ' Spencer Farrow ', ' David K ', ' Gillian']
</snippet></ROW><ROW><id>16637906</id><snippet>&gt;&gt;&gt; re.split(r'\b(?:\s*)r(?:\s*)\b',s)
['John', 'Spencer Farrow', 'David K', 'Gillian']
</snippet></ROW><ROW><id>16637906</id><snippet>" r "</snippet></ROW><ROW><id>16637906</id><snippet>str.split</snippet></ROW><ROW><id>16637906</id><snippet>&gt;&gt;&gt; s.split(' r ')
['John', 'Spencer Farrow', 'David K', 'Gillian']
</snippet></ROW><ROW><id>16638046</id><snippet>def enemySquares():
    enemySurf = pygame.Surface(screen.get_size())
    red = pygame.Color(255,0,0)
    enemy = pygame.Rect(200,50,20,20)
    pygame.draw.rect(enemySurf, red, enemy, 0)
</snippet></ROW><ROW><id>16638046</id><snippet>enemySurf = ...</snippet></ROW><ROW><id>16638046</id><snippet>pygame.draw.rect(enemySurf, red, enemy, 0)</snippet></ROW><ROW><id>16638046</id><snippet>pygame.draw.rect(screen, red, enemy, 0)</snippet></ROW><ROW><id>16638046</id><snippet>pygame.display.flip()</snippet></ROW><ROW><id>16638290</id><snippet>response</snippet></ROW><ROW><id>16638290</id><snippet>from bottle import response; response.status = 300</snippet></ROW><ROW><id>16638387</id><snippet>.connect()</snippet></ROW><ROW><id>16638387</id><snippet>try:</snippet></ROW><ROW><id>16638387</id><snippet>except:</snippet></ROW><ROW><id>16638387</id><snippet>import MySQLdb

try:
    connection = MySQLdb.connect(...)
except MySQLdb.Error as ex:
    print "The connection failed: {}".format(ex)
</snippet></ROW><ROW><id>16638436</id><snippet>pickle</snippet></ROW><ROW><id>16638436</id><snippet>attr</snippet></ROW><ROW><id>16638436</id><snippet>class Foo:
    attr = 'a class attr'

picklestring = pickle.dumps(Foo)
</snippet></ROW><ROW><id>16638436</id><snippet>__setstate__()</snippet></ROW><ROW><id>16638436</id><snippet>__crawled</snippet></ROW><ROW><id>16638446</id><snippet>from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.firefox.firefox_profile import FirefoxProfile
from subprocess import Popen, PIPE

class CygwinFirefoxProfile(FirefoxProfile):

    @property
    def path(self):

        path = self.profile_dir

        # cygwin requires to manually specify Firefox path a below:
        # PATH=/cygdrive/c/Program\ Files\ \(x86\)/Mozilla\ Firefox/:$PATH
        try:
            proc = Popen(['cygpath','-d',path], stdout=PIPE, stderr=PIPE)
            stdout, stderr = proc.communicate()
            path = stdout.split('\n', 1)[0]

        except OSError:
            print("No cygwin path found")

        return path

class CarServiceOnlineBookingsTest(unittest.TestCase):    

    def setUp(self):

        firefoxProfile = CygwinFirefoxProfile()

        ## Disable CSS
        firefoxProfile.set_preference('permissions.default.stylesheet', 2)
        ## Disable images
        firefoxProfile.set_preference('permissions.default.image', 2)
        ## Disable Flash
        firefoxProfile.set_preference('dom.ipc.plugins.enabled.libflashplayer.so', 'false')

        self.driver = webdriver.Firefox(firefoxProfile)
</snippet></ROW><ROW><id>16638471</id><snippet>python setup.py install</snippet></ROW><ROW><id>16638473</id><snippet>AbstractBaseUser</snippet></ROW><ROW><id>16638473</id><snippet>AbstractUser</snippet></ROW><ROW><id>16638473</id><snippet>unique=True</snippet></ROW><ROW><id>16638473</id><snippet>Manager</snippet></ROW><ROW><id>16638473</id><snippet>from django.contrib.auth.models import AbstractBaseUser, BaseUserManager,\
    PermissionsMixin
from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.utils import timezone
from django.utils.http import urlquote


class CustomUserManager(BaseUserManager):

    def create_user(self, email, password=None, **extra_fields):
        """
        Creates and saves a User with the given email and password.
        """
        now = timezone.now()
        if not email:
            raise ValueError('The given email must be set')
        email = CustomUserManager.normalize_email(email)
        user = self.model(email=email,
                          is_staff=False, is_active=True, is_superuser=False,
                          last_login=now, date_joined=now, **extra_fields)

        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password, **extra_fields):
        u = self.create_user(email, password, **extra_fields)
        u.is_staff = True
        u.is_active = True
        u.is_superuser = True
        u.save(using=self._db)
        return u


class User(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(_('email address'), unique=True)
    first_name = models.CharField(_('first name'), max_length=30, blank=True)
    last_name = models.CharField(_('last name'), max_length=30, blank=True)
    is_staff = models.BooleanField(_('staff status'), default=False,
        help_text=_('Designates whether the user can log into this admin '
                    'site.'))
    is_active = models.BooleanField(_('active'), default=True,
        help_text=_('Designates whether this user should be treated as '
                    'active. Unselect this instead of deleting accounts.'))
    date_joined = models.DateTimeField(_('date joined'), default=timezone.now)

    objects = CustomUserManager()

    USERNAME_FIELD = 'email'

    class Meta:
        verbose_name = _('user')
        verbose_name_plural = _('users')

    def get_absolute_url(self):
        return "/users/%s/" % urlquote(self.pk)

    def get_full_name(self):
        """
        Returns the first_name plus the last_name, with a space in between.
        """
        full_name = '%s %s' % (self.first_name, self.last_name)
        return full_name.strip()

    def get_short_name(self):
        "Returns the short name for the user."
        return self.first_name

    # define here other needed methods
    # Look at django.contrib.auth.models.AbstractUser
</snippet></ROW><ROW><id>16638537</id><snippet>nltk.download_shell()</snippet></ROW><ROW><id>16638537</id><snippet>download_shell()</snippet></ROW><ROW><id>16638622</id><snippet>Test</snippet></ROW><ROW><id>16638622</id><snippet>test</snippet></ROW><ROW><id>16638622</id><snippet>if __name__ == "__main__:</snippet></ROW><ROW><id>16638622</id><snippet>class Test(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b
        self.c = None
    def compute(self, x):
        print 'calculating c...'
        self.c = x * 2

if __name__ == "__main__":
    import cPickle as pickle

    test = Test(10, 'hello')
    test.compute(6)

    # I have computed c and I want to store it, so I don't have to recompute it again:

    pickle.dump(test, open('test_file.pkl', 'wb'))
</snippet></ROW><ROW><id>16638648</id><snippet>cycle</snippet></ROW><ROW><id>16638648</id><snippet>loop()</snippet></ROW><ROW><id>16638648</id><snippet>def finite_generator(source=[3, 2, 1]):
    while source:
        yield source.pop()
</snippet></ROW><ROW><id>16638648</id><snippet>loop()</snippet></ROW><ROW><id>16638648</id><snippet>&gt;&gt;&gt; hard_limit = 6
&gt;&gt;&gt; for i in loop(finite_generator()):
...     if hard_limit &lt;= 0:
...         break
...     print i
...     hard_limit -= 1
... 
1
2
3
</snippet></ROW><ROW><id>16638648</id><snippet>cycle()</snippet></ROW><ROW><id>16638648</id><snippet>cycle()</snippet></ROW><ROW><id>16638648</id><snippet>def loop_sequence(seq):
    while True:
        for elem in seq:
            yield elem
</snippet></ROW><ROW><id>16638814</id><snippet>import os

if os.environ.get('LC_ALL') == 'es_ES.utf8':
    # You know that 'es_ES.utf8' has your character ...
</snippet></ROW><ROW><id>16638814</id><snippet>LC_CTYPE</snippet></ROW><ROW><id>16638871</id><snippet>enumerate</snippet></ROW><ROW><id>16638871</id><snippet>mylist[:50]</snippet></ROW><ROW><id>16638871</id><snippet>for i, val in enumerate(range(600)):
    if i == 50:
        break
    print i
</snippet></ROW><ROW><id>16638871</id><snippet>for i, val in enumerate(range(600), start=1):
    if i % 50 == 0:
        print val
</snippet></ROW><ROW><id>16638871</id><snippet>i = 0
some_iterator = iter(range(600))
while i &lt; 50:
    print some_iterator.next()
    i += 1
</snippet></ROW><ROW><id>16638910</id><snippet>+python</snippet></ROW><ROW><id>16638910</id><snippet>:version</snippet></ROW><ROW><id>16638910</id><snippet>-python</snippet></ROW><ROW><id>16638910</id><snippet>clang_complete.vim</snippet></ROW><ROW><id>16638910</id><snippet>!has('python')</snippet></ROW><ROW><id>16638910</id><snippet>function! s:initClangCompletePython()
  if !has('python')
    echoe 'clang_complete: No python support available.'
    echoe 'Cannot use clang library'
    echoe 'Compile vim with python support to use libclang'
    return 0
  endif
  [..]
</snippet></ROW><ROW><id>16638988</id><snippet>range</snippet></ROW><ROW><id>16638988</id><snippet>range(len(sort_this)-2, 0, -1)</snippet></ROW><ROW><id>16638988</id><snippet>len(sort_this)-2</snippet></ROW><ROW><id>16638988</id><snippet>range(len(sort_this)-2, -1, -1)</snippet></ROW><ROW><id>16639015</id><snippet>&lt;span&gt;</snippet></ROW><ROW><id>16639015</id><snippet>soup('span', class_='r')
</snippet></ROW><ROW><id>16639015</id><snippet>span</snippet></ROW><ROW><id>16639015</id><snippet>td</snippet></ROW><ROW><id>16639015</id><snippet>mstat</snippet></ROW><ROW><id>16639015</id><snippet>spans = []
for td in soup('td', class_='mstat'):
    spans.expand(td('span', class_='r'))
</snippet></ROW><ROW><id>16639132</id><snippet>__new__</snippet></ROW><ROW><id>16639132</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __new__(cls):
...         return 1
... 
&gt;&gt;&gt; Foo()
1
&gt;&gt;&gt; type(Foo())
&lt;type 'int'&gt;
</snippet></ROW><ROW><id>16639132</id><snippet>cls</snippet></ROW><ROW><id>16639132</id><snippet>__init__</snippet></ROW><ROW><id>16639321</id><snippet>two1</snippet></ROW><ROW><id>16639321</id><snippet>9</snippet></ROW><ROW><id>16639321</id><snippet>1</snippet></ROW><ROW><id>16639321</id><snippet>10</snippet></ROW><ROW><id>16639321</id><snippet>abs(int(two1[i+2]) - int(two1[i+3]))&gt;10
</snippet></ROW><ROW><id>16639321</id><snippet>if</snippet></ROW><ROW><id>16639321</id><snippet>else</snippet></ROW><ROW><id>16639346</id><snippet>In [41]: a = [{ 'a':'z', 'b':'x', 'c':'w', 'd':'v'}, { 'a':'f', 'b':'g', 'c':'h', 'd':'i'}]

In [42]: a[0].get('a')
Out[42]: 'z'
</snippet></ROW><ROW><id>16639346</id><snippet>In [50]: a[0].values()
Out[50]: ['z', 'w', 'x', 'v']
</snippet></ROW><ROW><id>16639346</id><snippet>In [47]: data = {'style': '-', 'subCat': '-', 'name': 'Eurodollar Futures', 'oi': '9,774,883', 'floor': 'ED', 'url': '/trading/interest-rates/stir/eurodollar_contract_specifications.html', 'clearing': 'ED', 'cpc': 'ED', 'venues': 'Globex Floor ClearPort ', 'cat': '-', 'vol': '2,026,353', 'globex': 'GE', 'group': 'Interest Rate', 'tags': '-', 'cleared': 'Futures', 'id': 1, 'exch': 'CME', 'subGroup': 'Stirs'}

In [48]: data.get('name')
Out[48]: 'Eurodollar Futures'
</snippet></ROW><ROW><id>16639346</id><snippet>In [52]: for k,v in a[0].iteritems():
   ....:     print k, v
   ....:     
a z
c w
b x
d v
</snippet></ROW><ROW><id>16639653</id><snippet>class FooTable(DeclBase):
    financial_day_of_month = Column('financial_day_of_month', Integer,
                                        nullable=False, default=1)
    __table_args__ = (
        CheckConstraint('financial_day_of_month between 1 and 31', name='check1'),
        {})
</snippet></ROW><ROW><id>16639818</id><snippet>import pygame</snippet></ROW><ROW><id>16639818</id><snippet>NameError</snippet></ROW><ROW><id>16639818</id><snippet>screen</snippet></ROW><ROW><id>16639818</id><snippet>screen = originalscreen</snippet></ROW><ROW><id>16639818</id><snippet>__init__</snippet></ROW><ROW><id>16639818</id><snippet>self.screen</snippet></ROW><ROW><id>16639818</id><snippet>level</snippet></ROW><ROW><id>16639818</id><snippet>screen</snippet></ROW><ROW><id>16639818</id><snippet>self.screen</snippet></ROW><ROW><id>16639818</id><snippet>__init__</snippet></ROW><ROW><id>16639818</id><snippet>levelintro</snippet></ROW><ROW><id>16639818</id><snippet>level</snippet></ROW><ROW><id>16639818</id><snippet>NameError</snippet></ROW><ROW><id>16639835</id><snippet>key</snippet></ROW><ROW><id>16639835</id><snippet>editions.xsl</snippet></ROW><ROW><id>16639835</id><snippet>match</snippet></ROW><ROW><id>16639835</id><snippet>tei:rdg[contains(@wit,$rdg)]</snippet></ROW><ROW><id>16639835</id><snippet>$rdg</snippet></ROW><ROW><id>16639835</id><snippet>'lemma'</snippet></ROW><ROW><id>16639835</id><snippet>tei:rdg[contains(@wit,'lemma')]</snippet></ROW><ROW><id>16640072</id><snippet>Element</snippet></ROW><ROW><id>16640072</id><snippet>lxml.etree._Element</snippet></ROW><ROW><id>16640072</id><snippet>lxml.etree</snippet></ROW><ROW><id>16640072</id><snippet>Bernardo</snippet></ROW><ROW><id>16640072</id><snippet>lxml</snippet></ROW><ROW><id>16640072</id><snippet>nsmap = {'s': 'http://www.tei-c.org/ns/1.0'}

for line in tree.xpath('.//s:sp[@who="Barnardo"]/s:l/text()', namespaces=nsmap):
    print line.strip()
</snippet></ROW><ROW><id>16640072</id><snippet>&lt;l&gt;</snippet></ROW><ROW><id>16640072</id><snippet>&lt;sp who="Barnardo"&gt;</snippet></ROW><ROW><id>16640072</id><snippet>s:</snippet></ROW><ROW><id>16640072</id><snippet>nsmap</snippet></ROW><ROW><id>16640072</id><snippet>lxml</snippet></ROW><ROW><id>16640072</id><snippet>&gt;&gt;&gt; for line in tree.xpath('.//s:sp[@who="Barnardo"]/s:l/text()', namespaces=nsmap):
...     print line.strip()
... 
Who's there?
Long live the king!
He.
'Tis now struck twelve; get thee to bed, Francisco.
Have you had quiet guard?
Well, good night.
If you do meet Horatio and Marcellus,
The rivals of my watch, bid them make haste.
Say,
What, is Horatio there?
Welcome, Horatio: welcome, good Marcellus.
I have seen nothing.
Sit down awhile;
And let us once again assail your ears,
That are so fortified against our story
What we have two nights seen.
Last night of all,
When yond same star that's westward from the pole
Had made his course to illume that part of heaven
Where now it burns, Marcellus and myself,
The bell then beating one,

In the same figure, like the king that's dead.
Looks 'a not like the king? mark it, Horatio.
It would be spoke to.
See, it stalks away!
How now, Horatio! you tremble and look pale:
Is not this something more than fantasy?
What think you on't?
I think it be no other but e'en so:
Well may it sort that this portentous figure
Comes armed through our watch; so like the king
That was and is the question of these wars.
'Tis here!
It was about to speak, when the cock crew.
</snippet></ROW><ROW><id>16640118</id><snippet>import signal, os

def handler(signum, frame):
    print 'Signal handler called with signal', signum

signal.signal(signal.SIGINT, handler)
#do your stuff
</snippet></ROW><ROW><id>16640118</id><snippet>kill -INT $PID
</snippet></ROW><ROW><id>16640226</id><snippet>Frame</snippet></ROW><ROW><id>16640226</id><snippet>ttk</snippet></ROW><ROW><id>16640226</id><snippet>tkinter</snippet></ROW><ROW><id>16640226</id><snippet>ttk</snippet></ROW><ROW><id>16640226</id><snippet>import tkinter as tk
import ttk
</snippet></ROW><ROW><id>16640226</id><snippet>tk</snippet></ROW><ROW><id>16640226</id><snippet>ttk</snippet></ROW><ROW><id>16640226</id><snippet>f1 = tk.Frame(..., bg=..., fg=...)
f2 = ttk.Frame(..., style=...)
</snippet></ROW><ROW><id>16640256</id><snippet>webapp2.Route('/edit/([^/]+)/([^/]+)', handler = 'grouploader.Editor');
webapp2.Route('/([^/]+)/([^/]+)', grouploader.Loader);
</snippet></ROW><ROW><id>16640312</id><snippet>121.0.0.1</snippet></ROW><ROW><id>16640312</id><snippet>localhost</snippet></ROW><ROW><id>16640312</id><snippet>127.0.0.1</snippet></ROW><ROW><id>16640312</id><snippet>python -m SimpleHTTPServer</snippet></ROW><ROW><id>16640312</id><snippet>python3 -m http.server</snippet></ROW><ROW><id>16640493</id><snippet>    movey=-0.4
    movey=+0.4
</snippet></ROW><ROW><id>16640493</id><snippet>movey=0</snippet></ROW><ROW><id>16640493</id><snippet>movey=+0.4</snippet></ROW><ROW><id>16640517</id><snippet>def find_data_file(filename):
    if getattr(sys, 'frozen', False):
        # The application is frozen
        datadir = os.path.dirname(sys.executable)
    else:
        # The application is not frozen
        # Change this bit to match where you store your data files:
        datadir = os.path.dirname(__file__)

    return os.path.join(datadir, filename)
</snippet></ROW><ROW><id>16640535</id><snippet>&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter([6, 4, 0, 0, 0, 0, 0, 1, 3, 1, 0, 3, 3, 0, 0, 0, 0, 1, 1, 0, 0, 0, 3, 2, 3, 3, 2, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 2, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 0, 2, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 3, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 2, 2, 3, 2, 1, 0, 0, 0, 1, 2])
&gt;&gt;&gt; sorted(c.items())
[(0, 50), (1, 30), (2, 9), (3, 8), (4, 1), (5, 1), (6, 1)]
&gt;&gt;&gt; plt.plot(*zip(*sorted(c.items()))
... )
[&lt;matplotlib.lines.Line2D object at 0x36a9990&gt;]
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>16640535</id><snippet>zip(*sorted(c.items()))</snippet></ROW><ROW><id>16640535</id><snippet>[(0,1,2,3,4,5,6),(50,30,9,8,1,1,1)]</snippet></ROW><ROW><id>16640535</id><snippet>*</snippet></ROW><ROW><id>16640535</id><snippet>plt.plot</snippet></ROW><ROW><id>16640535</id><snippet>(0,1,2,3,4,5,6)</snippet></ROW><ROW><id>16640535</id><snippet>(50,30,9,8,1,1,1)</snippet></ROW><ROW><id>16640535</id><snippet>x</snippet></ROW><ROW><id>16640535</id><snippet>y</snippet></ROW><ROW><id>16640535</id><snippet>scipy</snippet></ROW><ROW><id>16640555</id><snippet>N=4
image = Image.new("RGBA", (256*N, 128*N), "#DDD")
draw = ImageDraw.Draw(image, image.mode)
draw.pieslice((0, 0 , 64*N, 64*N), 180, 270, fill="white")
del draw
image.resize((256,128))
image.save("file2.png", "PNG")
</snippet></ROW><ROW><id>16640720</id><snippet>1+5-5*5+6-6*6+4-4*4</snippet></ROW><ROW><id>16640720</id><snippet>from random import randrange

def brute_force():
    x1 = randrange(1, 9)
    x2 = randrange(1, 9)
    x3 = randrange(1, 9)
    x4 = randrange(1, 9)
    numList = [x1, x2, x3, x4]
    operatorList = ["+", "-", "/", "*"]
    equation = ""

    for i in range(4):
        for j in range(4):
            for k in range(4):
                equation = str(numList[0]) + operatorList[i] + str(numList[1]) + operatorList[j] + str(numList[2]) + operatorList[k] + str(numList[3])
                print("equation: " + equation)
                print("evaluation: " + str(eval(equation)))

if __name__ == "__main__":
    brute_force()
</snippet></ROW><ROW><id>16640720</id><snippet>&gt;&gt;&gt; brute_force()
equation: 4+6+4+6
evaluation: 20
equation: 4+6+4-6
evaluation: 8
equation: 4+6+4/6
evaluation: 10
equation: 4+6+4*6
evaluation: 34
equation: 4+6-4+6
evaluation: 12
equation: 4+6-4-6
evaluation: 0
equation: 4+6-4/6
evaluation: 10
...
</snippet></ROW><ROW><id>16641107</id><snippet>stacklist</snippet></ROW><ROW><id>16641107</id><snippet>tensor_of_scalars</snippet></ROW><ROW><id>16641107</id><snippet>stacklist</snippet></ROW><ROW><id>16641168</id><snippet>pages</snippet></ROW><ROW><id>16641168</id><snippet>for page in pages:
    soup = BeautifulSoup(page)
    # rest of the code here
</snippet></ROW><ROW><id>16641215</id><snippet>object_pairs_hook</snippet></ROW><ROW><id>16641215</id><snippet>import collections
import json

decoder = json.JSONDecoder(object_pairs_hook=collections.OrderedDict)

json_string = '{"id":"0","last_modified":"undefined"}'
print decoder.decode(json_string)
json_string = '{"last_modified":"undefined","id":"0"}'
print decoder.decode(json_string)
</snippet></ROW><ROW><id>16641215</id><snippet>OrderedDict([(u'id', u'0'), (u'last_modified', u'undefined')])
OrderedDict([(u'last_modified', u'undefined'), (u'id', u'0')])
</snippet></ROW><ROW><id>16641346</id><snippet>-rw-rw-r--  1 jreback users 203200986 May 19 20:58 test.csv
-rw-rw-r--  1 jreback users  88007312 May 19 20:59 test.h5

In [1]: df = DataFrame(randn(1000000,10))

In [9]: df
Out[9]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 1000000 entries, 0 to 999999
Data columns (total 10 columns):
0    1000000  non-null values
1    1000000  non-null values
2    1000000  non-null values
3    1000000  non-null values
4    1000000  non-null values
5    1000000  non-null values
6    1000000  non-null values
7    1000000  non-null values
8    1000000  non-null values
9    1000000  non-null values
dtypes: float64(10)

In [5]: %timeit df.to_csv('test.csv',mode='w')
1 loops, best of 3: 12.7 s per loop

In [6]: %timeit df.to_hdf('test.h5','df',mode='w')
1 loops, best of 3: 825 ms per loop

In [7]: %timeit pd.read_csv('test.csv',index_col=0)
1 loops, best of 3: 2.35 s per loop

In [8]: %timeit pd.read_hdf('test.h5','df')
10 loops, best of 3: 38 ms per loop
</snippet></ROW><ROW><id>16641391</id><snippet> input_user2 = re.sub(r'MM\(([^\)]*)\)', r"MM('\1')", input_user)
 output = re.sub(r'func\(([^,]*),', r"func('\1',", input_user)
</snippet></ROW><ROW><id>16641526</id><snippet>elif event.type == MOUSEBUTTONDOWN:
    p = from_pygame(Vec2d(event.pos))
    selected = space.point_query_first(p)
</snippet></ROW><ROW><id>16641526</id><snippet>if</snippet></ROW><ROW><id>16641526</id><snippet>elif</snippet></ROW><ROW><id>16641528</id><snippet>subparser</snippet></ROW><ROW><id>16641528</id><snippet>from argparse import ArgumentParser

parser = ArgumentParser()
subparsers = parser.add_subparsers()

install = subparsers.add_parser('install')
install.add_argument('-b')
install.add_argument('-a')
install.set_defaults(subparser='install')

lst = subparsers.add_parser('list')
lst.set_defaults(subparser='list')

update = subparsers.add_parser('update')
update.set_defaults(subparser='update')

print parser.parse_args()
</snippet></ROW><ROW><id>16641528</id><snippet>set_defaults</snippet></ROW><ROW><id>16641657</id><snippet>np.unique(dm_s)</snippet></ROW><ROW><id>16641657</id><snippet>len(np.unique(dm_s) * s_dist) == len(np.unique(dm_s))
</snippet></ROW><ROW><id>16641657</id><snippet>dm_s_uniques = len(np.unique(dm_s))
logs = np.log10(10 * dm_p)
logs[logs == -np.inf] = 1
prox_mat = ((dm_w +  dm_s_uniques) / (dm_w.shape[0] * dm_s_uniques)) * logs

ps = np.reshape(ps, dm_w.shape)
</snippet></ROW><ROW><id>16641676</id><snippet>read</snippet></ROW><ROW><id>16641676</id><snippet>'rw+'</snippet></ROW><ROW><id>16641676</id><snippet>directory = open('docs/directory.csv', 'a+', encoding='utf-8')
directory.seek(0,2) #seek to the end

name = input('Please insert a name: ')
phone = input('Please insert a phone number: ')

directory.write(name + ',' + phone + ',\n')

directory.seek(0) #seek back to beginning
print(directory.read())
</snippet></ROW><ROW><id>16641794</id><snippet>self.pplList.append(Person(listof[y],listof[y+1])
</snippet></ROW><ROW><id>16641794</id><snippet>self.pplList.append(Person(listof[y],listof[y+1])y+=2
</snippet></ROW><ROW><id>16641805</id><snippet>from lxml import html
my_tree = html.fromstring(web_pg)
elements = [item for item in my_tree.iter()]
</snippet></ROW><ROW><id>16641805</id><snippet>&lt;div&gt; some stuff
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt; banana &lt;/td&gt;
&lt;/tr&gt;
&lt;table&gt;
some more stuff
&lt;/div&gt;
</snippet></ROW><ROW><id>16641831</id><snippet>append</snippet></ROW><ROW><id>16641831</id><snippet>append</snippet></ROW><ROW><id>16641831</id><snippet>l = [1,2,3]
print l + [4] # [1,2,3,4]
print l # [1,2,3]
</snippet></ROW><ROW><id>16641831</id><snippet>append</snippet></ROW><ROW><id>16641831</id><snippet>m = l.append("a")
n = l.append("b")
</snippet></ROW><ROW><id>16641831</id><snippet>n</snippet></ROW><ROW><id>16641831</id><snippet>[1,2,3,"b"]</snippet></ROW><ROW><id>16641869</id><snippet>n=3
d1 = {key: value for i, (key, value) in enumerate(d.items()) if i &lt; n}
d2 = {key: value for i, (key, value) in enumerate(d.items()) if i &gt;= n}
</snippet></ROW><ROW><id>16642040</id><snippet>print a[arr_index]
</snippet></ROW><ROW><id>16642040</id><snippet>array_index</snippet></ROW><ROW><id>16642040</id><snippet>a = np.array(['apple', 'orange', 'apple', 'banana'])

arr_index = np.where(a == 'apple')

print arr_index

print a[arr_index]
</snippet></ROW><ROW><id>16642043</id><snippet>if not cardName == "":
    c=Pydeck.Card(cardName)
filename='{}.gif' .format(c.cardID)
</snippet></ROW><ROW><id>16642043</id><snippet>cardName</snippet></ROW><ROW><id>16642043</id><snippet>c</snippet></ROW><ROW><id>16642043</id><snippet>cardName</snippet></ROW><ROW><id>16642043</id><snippet>cardName</snippet></ROW><ROW><id>16642099</id><snippet>from sklearn.ensemble import GradientBoostingRegressor
from multiprocessing import Pool
from itertools import repeat

def train_model(params):
    model, data, target = params
    # since Pool args accept once argument, we need to pass only one
    # and then unroll it as above
    model.fit(data, target)
    return model

if __name__ == '__main__':
    gb1 = GradientBoostingRegressor(n_estimators=10)
    gb2 = GradientBoostingRegressor(n_estimators=100)

    live_data # Pandas DataFrame object
    target    # Numpy array object

    po = Pool(2) # 2 is numbers of process we want to spawn
    gb, gb2 = po.map_async(train_model, 
                 zip([gb1,gb2], repeat(data), repeat(target))
                 # this will zip in one iterable object
              ).get()
    # get will start the processes and execute them
    po.terminate()
    # kill the spawned processes
</snippet></ROW><ROW><id>16642142</id><snippet>import pandas as pd
df1 = pd.read_csv("file1.csv", sep=r"\s+")
df2 = pd.read_csv("file2.csv", sep=r"\s+")
merged = df1.merge(df2.rename_axis({"Mon-id": "NAME"}))
merged.to_csv("merged.csv", index=False)
</snippet></ROW><ROW><id>16642142</id><snippet>file2.csv</snippet></ROW><ROW><id>16642142</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df1 = pd.read_csv("file1.csv", sep=r"\s+")
&gt;&gt;&gt; df2 = pd.read_csv("file2.csv", sep=r"\s+")
&gt;&gt;&gt; df1.head()
         NAME         RA       DEC  Mean_I1  Mean_I2
0  Mon-000101  100.27242  9.608597   11.082   10.034
1  Mon-000102  100.18012  9.520860   12.296   12.223
2  Mon-000103  100.24811  9.586362    9.429    9.010
3  Mon-000104  100.26741  9.867225   11.811   11.797
4  Mon-000105  100.21005  9.814060   12.087   12.090
&gt;&gt;&gt; df2.head()
       Mon-id
0  Mon-000101
1  Mon-000121
2  Mon-000131
3  Mon-000141
4  Mon-000151
</snippet></ROW><ROW><id>16642142</id><snippet>&gt;&gt;&gt; df2.rename_axis({"Mon-id": "NAME"}).head()
         NAME
0  Mon-000101
1  Mon-000121
2  Mon-000131
3  Mon-000141
4  Mon-000151
</snippet></ROW><ROW><id>16642142</id><snippet>merge</snippet></ROW><ROW><id>16642142</id><snippet>&gt;&gt;&gt; merged = df1.merge(df2.rename_axis({"Mon-id": "NAME"}))
&gt;&gt;&gt; merged
         NAME         RA       DEC  Mean_I1  Mean_I2
0  Mon-000101  100.27242  9.608597   11.082   10.034
1  Mon-000121  100.45421  9.685027   11.805   11.777
2  Mon-000131  100.20533  9.397307 -100.000   11.764
3  Mon-000141  100.26134  9.388555 -100.000   12.571
</snippet></ROW><ROW><id>16642142</id><snippet>&gt;&gt;&gt; merged.to_csv("output.csv", index=False)
</snippet></ROW><ROW><id>16642142</id><snippet>NAME,RA,DEC,Mean_I1,Mean_I2
Mon-000101,100.27242,9.608597,11.082,10.034
Mon-000121,100.45421,9.685027,11.805,11.777
Mon-000131,100.20533,9.397307,-100.0,11.764
Mon-000141,100.26134,9.388555,-100.0,12.571
</snippet></ROW><ROW><id>16642153</id><snippet>def get(self):
      func_name = 'function' + self.i
      func = getattr(self,func_name)
      func() # &lt;-- this should work!
</snippet></ROW><ROW><id>16642266</id><snippet>main()</snippet></ROW><ROW><id>16642266</id><snippet>main</snippet></ROW><ROW><id>16642266</id><snippet>if</snippet></ROW><ROW><id>16642266</id><snippet>import sys

def main():
    print(sys.argv)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16642376</id><snippet>return</snippet></ROW><ROW><id>16642376</id><snippet>__find__</snippet></ROW><ROW><id>16642376</id><snippet>self.__find__(...)</snippet></ROW><ROW><id>16642376</id><snippet>return self.__find__(...)</snippet></ROW><ROW><id>16642376</id><snippet>def __find__(self, node, value):
    if value &lt; node.v:
        return self.__find__(node.l, value)
    elif value &gt; node.v:
        return self.__find__(node.r, value)
    elif value == node.v:
        print node.obj
        return node.obj

def Find(self, value):
    obj = self.__find__(self.r, value)
    print obj
    return obj
</snippet></ROW><ROW><id>16642376</id><snippet>None</snippet></ROW><ROW><id>16642727</id><snippet>python -m compileall</snippet></ROW><ROW><id>16642727</id><snippet>sys.path</snippet></ROW><ROW><id>16642727</id><snippet>$ python -m compileall .
</snippet></ROW><ROW><id>16643206</id><snippet>strip('\x00')</snippet></ROW><ROW><id>16643206</id><snippet>strip()</snippet></ROW><ROW><id>16643206</id><snippet> if(serialFromArduino.inWaiting() &gt; 0):
      input = serialFromArduino.readline().strip().strip('\x00')      # &lt;--
      print(input)
      inputAsInteger = int(input)
      print("done")
</snippet></ROW><ROW><id>16643206</id><snippet>ValueError: invalid literal for int() with base 10: ''
</snippet></ROW><ROW><id>16643226</id><snippet>class Converter:

    def __init__(self, fl, ln, vrbl):
        self.file = fl
        self.line = ln
        self.variable = vrbl


    def to_int(self):
        file = open(self.file, "r")
        for i in range(self.line):
            whatToConvert = file.readline()
        file.close
        return int(whatToConvert)

    def to_str(self):
        file = open(self.file, "r")
        for i in range(self.line):
            whatToConvert = file.readline()
        file.close
        return str(whatToConvert)

    def to_float(self):
        file = open(self.file, "r")
        for i in range(self.line):
            whatToConvert = file.readline()
        file.close
        return float(whatToConvert)


#Instantiation
foo = Converter('\a\path','an int?','')

#This is how you call the class methods.
foo.to_int()
foo.to_str()
foo.to_float()
</snippet></ROW><ROW><id>16643226</id><snippet>from filename import Converter</snippet></ROW><ROW><id>16643226</id><snippet>__init__()</snippet></ROW><ROW><id>16643226</id><snippet>foo = Converter('\a\path','an int?','')</snippet></ROW><ROW><id>16643226</id><snippet>open</snippet></ROW><ROW><id>16643226</id><snippet>self.variable</snippet></ROW><ROW><id>16643226</id><snippet>self.variable</snippet></ROW><ROW><id>16643226</id><snippet>self</snippet></ROW><ROW><id>16643226</id><snippet>self</snippet></ROW><ROW><id>16643609</id><snippet>&gt;&gt;&gt; def lowest(sequence):
        'Find the lowest value in a sequence in just one-pass'
        best = sequence[0]
        for i in range(1, len(sequence)):
            if sequence[i] &lt; best:
                best = sequence[i]
        return best

&gt;&gt;&gt; lowest(['stack', 'over', 'flow', 'please', 'help'])
'flow'
</snippet></ROW><ROW><id>16643634</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>16643634</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; from operator import mul
&gt;&gt;&gt; lis = [(0,2),(1,3),(2,4),(0,5),(1,6)]
&gt;&gt;&gt; dic = defaultdict(list)
&gt;&gt;&gt; for k,v in lis:
    dic[k].append(v)  #use the first item of the tuple as key and append second one to it
...     

#now multiply only those lists which contain more than 1 item and finally sum them.
&gt;&gt;&gt; sum(reduce(mul,v) for k,v in dic.items() if len(v)&gt;1)
 28
</snippet></ROW><ROW><id>16643886</id><snippet>raw_input()</snippet></ROW><ROW><id>16643886</id><snippet>convertWmiDateTime("20061122185433.000000+600")
</snippet></ROW><ROW><id>16643886</id><snippet>+600</snippet></ROW><ROW><id>16644110</id><snippet>pathToBmp = "imagename or image directory"
SPI_SETDESKWALLPAPER = 20  
ctypes.windll.user32.SystemParametersInfoA(SPI_SETDESKWALLPAPER, 0, pathToBmp ,
                                      0)
</snippet></ROW><ROW><id>16644110</id><snippet>pathToBmp</snippet></ROW><ROW><id>16644268</id><snippet>import 123foo
</snippet></ROW><ROW><id>16644268</id><snippet>123foo = __import__('123foo')
</snippet></ROW><ROW><id>16644268</id><snippet>foo123 = __import__('123foo')
</snippet></ROW><ROW><id>16644439</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; start = datetime.datetime.strptime(u'2013-05-20 05:09:06', '%Y-%m-%d %H:%M:%S')
&gt;&gt;&gt; end = datetime.datetime.strptime(u'2013-05-20 05:10:06', '%Y-%m-%d %H:%M:%S')
&gt;&gt;&gt; (end - start).total_seconds()
60.0
</snippet></ROW><ROW><id>16644453</id><snippet>STANDING</snippet></ROW><ROW><id>16644453</id><snippet>JUMPING</snippet></ROW><ROW><id>16644453</id><snippet>STANDING</snippet></ROW><ROW><id>16644453</id><snippet>velocity</snippet></ROW><ROW><id>16644453</id><snippet>JUMPING</snippet></ROW><ROW><id>16644453</id><snippet>velocity</snippet></ROW><ROW><id>16644453</id><snippet>velocity</snippet></ROW><ROW><id>16644453</id><snippet>STANDING</snippet></ROW><ROW><id>16644781</id><snippet>for key in sorted(x, key=x.get, reverse=True)[:10]:
    print key, x[key]
</snippet></ROW><ROW><id>16644781</id><snippet>dict</snippet></ROW><ROW><id>16644781</id><snippet>from heapq import nlargest
for key in nlargest(10, x, key=x.get):
    print key, x[key]
</snippet></ROW><ROW><id>16645054</id><snippet>&lt;form name="form1" action="login.cgi" method="POST" onsubmit="encrypt();"&gt;</snippet></ROW><ROW><id>16645135</id><snippet>PyObject</snippet></ROW><ROW><id>16645135</id><snippet>PyObject</snippet></ROW><ROW><id>16645135</id><snippet>bool call_method(PyObject *method)
{
    PyObject *args = PyTuple_New(0);
    if ( NULL == PyObject_Call(method, args, NULL) )
    {
        // Method call failed
        return false;
    }
    return true;
}
</snippet></ROW><ROW><id>16645135</id><snippet>import my_module as bla

bla.call_method(myClass.myMethod)
</snippet></ROW><ROW><id>16645212</id><snippet>Counter()</snippet></ROW><ROW><id>16645212</id><snippet>from collections import Counter
from itertools import izip_longest

for dcts in data.values():
    for i, dct in enumerate(dcts):
        if i &gt;= len(result):
            result.append(Counter(dct))
        else:
            result[i].update(dct)
</snippet></ROW><ROW><id>16645212</id><snippet>&gt;&gt;&gt; result
[Counter({'a': 10, 'b': 7}), Counter({'b': 18, 'a': 11}), Counter({'a': 12, 'b': 5}), Counter({'b': 11, 'a': 5}), Counter({'b': 9, 'a': 4}), Counter({'a': 3, 'b': 2}), Counter({'a': 1, 'b': 0})]
</snippet></ROW><ROW><id>16645212</id><snippet>Counter()</snippet></ROW><ROW><id>16645212</id><snippet>dict</snippet></ROW><ROW><id>16645212</id><snippet>dict</snippet></ROW><ROW><id>16645212</id><snippet>result = [dict(r) for r in result]
</snippet></ROW><ROW><id>16645212</id><snippet>from collections import Counter
from itertools import izip_longest

result = [sum(map(Counter, col), Counter()) 
    for col in izip_longest(*data.values(), fillvalue={})]
</snippet></ROW><ROW><id>16645212</id><snippet>'b': 0</snippet></ROW><ROW><id>16645212</id><snippet>[reduce(lambda c, d: c.update(d) or c, col, Counter())
    for col in izip_longest(*data.values(), fillvalue={})]
</snippet></ROW><ROW><id>16645212</id><snippet>.update()</snippet></ROW><ROW><id>16645307</id><snippet>\n</snippet></ROW><ROW><id>16645307</id><snippet>'\n'.split('\n')</snippet></ROW><ROW><id>16645307</id><snippet>&gt;&gt;&gt; data = '''\
Shasta      California     14,200
McKinley    Alaska         20,300
Fuji        Japan          12,400
'''
&gt;&gt;&gt; for line in data.splitlines():
        print line.split()

['Shasta', 'California', '14,200']
['McKinley', 'Alaska', '20,300']
['Fuji', 'Japan', '12,400']
</snippet></ROW><ROW><id>16645307</id><snippet>&gt;&gt;&gt; data = '''\
Guido,BDFL,,Amsterdam
Barry,FLUFL,,USA
Tim,,,USA
'''
&gt;&gt;&gt; for line in data.splitlines():
        print line.split(',')

['Guido', 'BDFL', '', 'Amsterdam']
['Barry', 'FLUFL', '', 'USA']
['Tim', '', '', 'USA']
</snippet></ROW><ROW><id>16645307</id><snippet>&gt;&gt;&gt; ''.split(',')       # No cuts
['']
&gt;&gt;&gt; ','.split(',')      # One cut
['', '']
&gt;&gt;&gt; ',,'.split(',')     # Two cuts
['', '', '']
</snippet></ROW><ROW><id>16645307</id><snippet>\n</snippet></ROW><ROW><id>16645307</id><snippet>&gt;&gt;&gt; data = '''\
Line 1
Line 2
Line 3
Line 4'''

&gt;&gt;&gt; data.count('\n')                               # Inaccurate
3
&gt;&gt;&gt; len(data.splitlines())                         # Accurate, but slow
4
&gt;&gt;&gt; data.count('\n') + (not data.endswith('\n'))   # Accurate and fast
4    
</snippet></ROW><ROW><id>16645307</id><snippet>ps_aux_header  = "USER               PID  %CPU %MEM      VSZ"
patient_header = "name,age,height,weight"
</snippet></ROW><ROW><id>16645307</id><snippet>fields = line.split()</snippet></ROW><ROW><id>16645307</id><snippet>fields = line.split(',')</snippet></ROW><ROW><id>16645524</id><snippet>input()</snippet></ROW><ROW><id>16645524</id><snippet>d = {'a':1, 'b':3, 8:'c'}

x = input()
from string import digits
if x in digits:
    x = int(x)
if x in d.values():
    print('In a dictionary', x)


&gt;&gt;&gt; 
c
In a dictionary c

&gt;&gt;&gt; 
3
In a dictionary 3
</snippet></ROW><ROW><id>16645524</id><snippet>d = {'a':1, 'b':3, 8:'c'}

x = input()
from string import digits
if x in digits:
    x = int(x)
if x in d.values():
    print('In a dictionary', x)

if x in d:
    print ("In keys!")
</snippet></ROW><ROW><id>16645524</id><snippet>&gt;&gt;&gt; 
1
In a dictionary 1
&gt;&gt;&gt; 
a
In keys!
</snippet></ROW><ROW><id>16645524</id><snippet>&gt;&gt;&gt; d = {'a':1, 'b':3, 8:'c'}
&gt;&gt;&gt; d = {str(x): str(d[x]) for x in d}
&gt;&gt;&gt; d
{'8': 'c', 'a': '1', 'b': '3'}
</snippet></ROW><ROW><id>16645670</id><snippet>&gt;&gt;&gt; "0013A200305EFF96".decode("hex")
'\x00\x13\xa2\x000^\xff\x96'
</snippet></ROW><ROW><id>16645670</id><snippet>&gt;&gt;&gt; bytes.fromhex("0013A200305EFF96")
b'\x00\x13\xa2\x000^\xff\x96'
</snippet></ROW><ROW><id>16645873</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; format(random.randint(1, 12), '02')
'07'
</snippet></ROW><ROW><id>16646053</id><snippet>,\s()</snippet></ROW><ROW><id>16646053</id><snippet>()</snippet></ROW><ROW><id>16646053</id><snippet>perl -F'[,\s\(\)]+' -ape '$_ = join ", ", @F[2,3,4]; $_ = "($_)"' text.txt
</snippet></ROW><ROW><id>16646069</id><snippet>from dulwich import repo, diff_tree

fn = 'a.txt'
r = repo.Repo('.')
prev = None
walker = r.get_graph_walker()
cset = walker.next()
while cset is not None:

    commit = r.get_object(cset)
    if prev is None:
        prev = commit.tree
        cset = walker.next()
        continue


    res = None
    delta = diff_tree.tree_changes(r, prev, commit.tree)
    for x in diff_tree.tree_changes(r, prev, commit.tree):
        if x.new.path == fn:
            res = cset
            break

    if res:
        break

    prev = commit.tree
    cset = walker.next()

print fn, res
</snippet></ROW><ROW><id>16646165</id><snippet>response['Location']</snippet></ROW><ROW><id>16646215</id><snippet>&gt;&gt;&gt; from operator import ne
&gt;&gt;&gt; from itertools import count, imap, compress
&gt;&gt;&gt; list1[:next(compress(count(), imap(ne, list1, list2)), 0)]
[1, 2]
</snippet></ROW><ROW><id>16646215</id><snippet>from itertools import *
from operator import ne

def f1(list1, list2, enumerate=enumerate, izip=izip):
    out = []
    out_append = out.append
    for e1, e2 in izip(list1, list2):
        if e1 == e2:
            out_append(e1)
        else:
            break
    return out

def f2(list1, list2, list=list, takewhile=takewhile, izip=izip):
    return [i for i, j in takewhile(lambda (i,j):i==j, izip(list1, list2))]

def f3(list1, list2, next=next, compress=compress, count=count, imap=imap,
       ne=ne):
    return list1[:next(compress(count(), imap(ne, list1, list2)), 0)]

def f4(list1, list2):
    out = []
    out_append = out.append
    i = 0
    end = min(len(list1), len(list2))
    while i &lt; end and list1[i]==list2[i]:
        out_append(list1[i])
        i+=1
    return out

def f5(list1, list2, len=len, enumerate=enumerate):
    if len(list1) &gt; len(list2):
        list1, list2 = list2, list1
    for i, e in enumerate(list1):
        if list2[i] != e:
            return list1[:i]
    return list1[:]

def f6(list1, list2, enumerate=enumerate):
    result = []
    append = result.append
    for i,e in enumerate(list1):
        if list2[i] == e:
            append(e)
            continue
        break
    return result


from timeit import timeit
list1 =[1,2,3,4,5,6];list2=[1,2,4,3,5,6]
sol = f3(list1, list2)

for func in 'f1', 'f2', 'f3', 'f4', 'f5', 'f6':
    assert eval(func + '(list1, list2)') == sol, func + " produces incorrect results"
    print func
    print timeit(stmt=func + "(list1, list2)", setup='from __main__ import *')
</snippet></ROW><ROW><id>16646215</id><snippet>f1
1.52226996422
f2
2.44811987877
f3
2.04677891731
f4
1.57675600052
f5
1.6997590065
f6
1.71103715897
</snippet></ROW><ROW><id>16646215</id><snippet>list1=[1]*100000+[1,2,3,4,5,6]; list2=[1]*100000+[1,2,4,3,5,6]</snippet></ROW><ROW><id>16646215</id><snippet>timeit</snippet></ROW><ROW><id>16646215</id><snippet>100</snippet></ROW><ROW><id>16646215</id><snippet>timeit(stmt=func + "(list1, list2)", setup='from __main__ import list1, list2, f1,f2,f3,f4', number=1000)</snippet></ROW><ROW><id>16646215</id><snippet>f1
14.5194740295
f2
29.8510630131
f3
12.6024291515
f4
24.465034008
f5
12.1111371517
f6
16.6644029617
</snippet></ROW><ROW><id>16646215</id><snippet>numpy</snippet></ROW><ROW><id>16646215</id><snippet>numpy</snippet></ROW><ROW><id>16646215</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a, b = np.array([1,2,3,4,5,6]), np.array([1,2,4,3,5,6])
&gt;&gt;&gt; def f8(a, b, nonzero=np.nonzero):
        return a[:nonzero(a!=b)[0][0]]

&gt;&gt;&gt; f8(a, b)
array([1, 2])
&gt;&gt;&gt; timeit(stmt="f8(a, b)", setup='from __main__ import *')
6.50727105140686
&gt;&gt;&gt; a, b = np.array([1]*100000+[1,2,3,4,5,6]), np.array([1]*100000+[1,2,4,3,5,6])
&gt;&gt;&gt; timeit(stmt="f8(a, b)", setup='from __main__ import *', number=1000)
0.7565150260925293
</snippet></ROW><ROW><id>16646215</id><snippet>numpy</snippet></ROW><ROW><id>16646486</id><snippet>urlopen</snippet></ROW><ROW><id>16646486</id><snippet>data</snippet></ROW><ROW><id>16646486</id><snippet>POST</snippet></ROW><ROW><id>16646486</id><snippet>urlopen</snippet></ROW><ROW><id>16646486</id><snippet>Request</snippet></ROW><ROW><id>16646486</id><snippet>import urllib2
request = urllib2.Request('http://www.example.com', data)
response = urllib2.urlopen(request, timeout=4)
content = response.read()
</snippet></ROW><ROW><id>16647123</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = "[Admin] has [logged out] on [admin page] at [Monday 20 May, 11:00]"
&gt;&gt;&gt; re.findall(r'\[([^\]]*)\]', text)
['Admin', 'logged out', 'admin page', 'Monday 20 May, 11:00']
</snippet></ROW><ROW><id>16647123</id><snippet>&gt;&gt;&gt; text = "[Order page] encounters [NullPointerException] at [Monday 20 May, 11:00]"
&gt;&gt;&gt; re.findall(r'''\[            # a literal [ character (needs backslash escape)
                     (           # save following group
                       [^\]]     # match any character except literal ]
                       *         # match as many as possible of these
                     )           # end group
                    \]           # a literal ] character
''', text, flags=re.VERBOSE)
['Order page', 'NullPointerException', 'Monday 20 May, 11:00']
</snippet></ROW><ROW><id>16647550</id><snippet>query = session.query(Email.address)
print [str(column['expr']) for column in query.column_descriptions]  # should print ["Email.address"]

data = query.filter(Email.id==str(myId)).one()
</snippet></ROW><ROW><id>16647814</id><snippet>title.pack(fill="x")
content_text.pack(fill="x")
</snippet></ROW><ROW><id>16647814</id><snippet>title.pack(fill="x")
content_text.pack(fill="both", expand=True)
</snippet></ROW><ROW><id>16647854</id><snippet>import ast
a_string = "{1: 'FA-1', 2: 'FA-2', 3: 'SA-1', 4: 'FA-3', 5: 'FA-4', 6: 'SA-2'}"
a_python_dictionary = ast.literal_eval(a_string)
</snippet></ROW><ROW><id>16647863</id><snippet>    if len(inputStr) &gt; 40:
        print "The short description is longer than 40 characters"
    else:
        for word in splitted:
            if lineNum &gt; 5:
                 break
            if word != None:
                if len(lineNumDict[lineNum]+word) &lt;= lineLengths[lineNum]:
                    lineNumDict[lineNum] += word
                else:
                    lineNum += 1
            else:
                if len(lineNumDict[lineNum])+1 &lt;= lineLengths[lineNum]:
                    lineNumDict[lineNum] += " "
                else:
                    lineNum += 1
</snippet></ROW><ROW><id>16647863</id><snippet>    print("Lines: %s" % lineNumDict) 
</snippet></ROW><ROW><id>16647863</id><snippet>    Lines: {1: 'THIS IS A', 2: 'LONG DESC 7', 3: '7 NEEDS ', 4: '', 5: ''}
</snippet></ROW><ROW><id>16647950</id><snippet>from collections import defaultdict
l = [('a',1),('b',2),('a',3)]
d = defaultdict(list)
for pair in l:
    d[pair[0]].append(pair[1]) #add each number in to the list with under the correct key
for (k,v) in d.items():
    d[k] = sum(d[k])/len(d[k]) #re-assign the value associated with key k as the sum of the elements in the list divided by its length
</snippet></ROW><ROW><id>16647950</id><snippet>print(d)
&gt;&gt;&gt; defaultdict(&lt;type 'list'&gt;, {'a': 2, 'b': 2})
</snippet></ROW><ROW><id>16647950</id><snippet>from collections import defaultdict
l = [('a',1),('b',2),('a',3)]
temp_d = defaultdict(list)
for pair in l:
    temp_d[pair[0]].append(pair[1])
#CHANGES HERE
final = dict((k,sum(v)/len(v)) for k,v in temp_d.items())
print(final)
&gt;&gt;&gt; 
{'a': 2, 'b': 2}
</snippet></ROW><ROW><id>16647950</id><snippet>(k,sum(v)/float(len(v)))
</snippet></ROW><ROW><id>16647950</id><snippet>sum(d[k])/float(len(d[k]))
</snippet></ROW><ROW><id>16648182</id><snippet>cost_f = []
while (abs(theta1_guess-theta1_last) &gt; variance or abs(theta0_guess - theta0_last) &gt; variance):

    theta1_last = theta1_guess
    theta0_last = theta0_guess

    hypothesis = create_hypothesis(theta1_guess, theta0_guess)
    cost_f.append((1./(2*m))*sum([ pow(hypothesis(point[0]) - point[1], 2) for point in data]))

    theta0_guess = theta0_guess - learning_rate * (1./m) * sum([hypothesis(point[0]) - point[1] for point in data])
    theta1_guess = theta1_guess - learning_rate * (1./m) * sum([ (hypothesis(point[0]) - point[1]) * point[0] for point in data])   

import pylab
pylab.plot(range(len(cost_f)), cost_f)
pylab.show()
</snippet></ROW><ROW><id>16648197</id><snippet>import Image
im = Image.open(&lt;your image&gt;)
width, height = im.size   # Get dimensions

left = (width - new_width)/2
top = (height - new_height)/2
right = (width + new_width)/2
bottom = (height + new_height)/2

im.crop((left, top, right, bottom))
</snippet></ROW><ROW><id>16648244</id><snippet>__prepare__</snippet></ROW><ROW><id>16648244</id><snippet>dict</snippet></ROW><ROW><id>16648244</id><snippet>mappingproxy</snippet></ROW><ROW><id>16648244</id><snippet>class OrderedClass(type):
         @classmethod
         def __prepare__(metacls, name, bases):
            return OrderedDict()

         def __new__(cls, name, bases, classdict):
            result = type.__new__(cls, name, bases, classdict)
            result.member_names = list(classdict.keys())
            return result


class MyClass2(metaclass=OrderedClass):

    attr1 = 1
    attr2 = 2
    attr3 = 3
    attr4 = 4
    attr5 = 5

    def __init__(self):
        self.attr6 = 6

    def func(self):
        pass

&gt;&gt;&gt; MyClass2.member_names
['__module__', '__qualname__', 'attr1', 'attr2', 'attr3', 'attr4', 'attr5', '__init__', 'func']
</snippet></ROW><ROW><id>16648322</id><snippet>import csv

with open('data.csv', 'rb') as f:
    rows = [[int(el) for el in row] for row in csv.reader(f)]


&gt;&gt;&gt; rows
[[1, 22, 5], [1, 33, 9], [3, 44, 5], [4, 32, 5], [5, 53, 5], [6, 64, 5], [7, 12, 7]]
&gt;&gt;&gt; [row for row in rows if row[0] == 1]
[[1, 22, 5], [1, 33, 9]]
</snippet></ROW><ROW><id>16648510</id><snippet>In [14]: df = DataFrame('10.0%',index=range(100),columns=range(10))

In [15]: df.replace('%','',regex=True).astype('float')/100
Out[15]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 100 entries, 0 to 99
Data columns (total 10 columns):
0    100  non-null values
1    100  non-null values
2    100  non-null values
3    100  non-null values
4    100  non-null values
5    100  non-null values
6    100  non-null values
7    100  non-null values
8    100  non-null values
9    100  non-null values
dtypes: float64(10)
</snippet></ROW><ROW><id>16648510</id><snippet>In [16]: %timeit df.replace('%','',regex=True).astype('float')/100
1000 loops, best of 3: 1.16 ms per loop

 In [18]: %timeit df.applymap(lambda x: float(x[:-1]))/100
1000 loops, best of 3: 1.67 ms per loop
</snippet></ROW><ROW><id>16648690</id><snippet>SyntaxError</snippet></ROW><ROW><id>16648690</id><snippet>for</snippet></ROW><ROW><id>16649030</id><snippet>StandardIO</snippet></ROW><ROW><id>16649030</id><snippet>IReactorProcess.spawnProcess</snippet></ROW><ROW><id>16649030</id><snippet>factory = PBClientFactory(...)
d = factory.getRootObject()
...

clientEndpoint.connect(factory)
</snippet></ROW><ROW><id>16649030</id><snippet>factory = PBServerFactory(...)
...
serverEndpoint.listen(factory)
</snippet></ROW><ROW><id>16649030</id><snippet>clientEndpoint = ProcessEndpoint(reactor, "/path/to/child", ("argv",), ...)
serverEndpoint = StandardIOEndpoint(reactor)
</snippet></ROW><ROW><id>16649030</id><snippet>clientEndpoint = TCP4ClientEndpoint(reactor, "1.2.3.4", 12345)
serverEndpoint = TCP4ServerEndpoint(reactor, 12345)
</snippet></ROW><ROW><id>16649030</id><snippet>clientEndpoint = clientFromString(reactor, options["client-endpoint"])
serverEndpoint = serverFromString(reactor, options["server-endpoint"])
</snippet></ROW><ROW><id>16649030</id><snippet>options["client-endpoint"]</snippet></ROW><ROW><id>16649030</id><snippet>options["server-endpoint"]</snippet></ROW><ROW><id>16649030</id><snippet>"tcp:host=1.2.3.4:port=12345"</snippet></ROW><ROW><id>16649030</id><snippet>"tcp:port=12345"</snippet></ROW><ROW><id>16649789</id><snippet>for key in list(db):
    del db[key]
</snippet></ROW><ROW><id>16649789</id><snippet>dbm.open('filename', 'n')</snippet></ROW><ROW><id>16649789</id><snippet>'n'</snippet></ROW><ROW><id>16649816</id><snippet>down()</snippet></ROW><ROW><id>16649816</id><snippet>None</snippet></ROW><ROW><id>16649816</id><snippet>allStars</snippet></ROW><ROW><id>16649816</id><snippet>allStars[i] = allStars[i]()</snippet></ROW><ROW><id>16649919</id><snippet>Gib.name</snippet></ROW><ROW><id>16649919</id><snippet>Gib.mutator</snippet></ROW><ROW><id>16649919</id><snippet>Gib</snippet></ROW><ROW><id>16649919</id><snippet>self.gib_text</snippet></ROW><ROW><id>16649919</id><snippet>name</snippet></ROW><ROW><id>16649919</id><snippet>Gib.mutator</snippet></ROW><ROW><id>16649919</id><snippet>self.gib_text</snippet></ROW><ROW><id>16649919</id><snippet>def pop_gen(self):
    temp_popul = [Gib(self.gib_text[:], self.chance) for i in range(10)]
</snippet></ROW><ROW><id>16649920</id><snippet>UserCreationForm</snippet></ROW><ROW><id>16649920</id><snippet>MyRegistrationForm</snippet></ROW><ROW><id>16649920</id><snippet>POST</snippet></ROW><ROW><id>16649920</id><snippet>UserCreationForm</snippet></ROW><ROW><id>16649920</id><snippet>user</snippet></ROW><ROW><id>16649920</id><snippet>UserCreationForm</snippet></ROW><ROW><id>16649920</id><snippet>ModelForm</snippet></ROW><ROW><id>16649920</id><snippet>UserProfile</snippet></ROW><ROW><id>16649920</id><snippet>user</snippet></ROW><ROW><id>16649920</id><snippet>POST</snippet></ROW><ROW><id>16649920</id><snippet>GET</snippet></ROW><ROW><id>16649920</id><snippet>POST</snippet></ROW><ROW><id>16649920</id><snippet>form = UserCreationForm() # An unbound form
</snippet></ROW><ROW><id>16649920</id><snippet>form = MyRegistrationForm() # An unbound form
</snippet></ROW><ROW><id>16649920</id><snippet>user</snippet></ROW><ROW><id>16649920</id><snippet>UserProfile</snippet></ROW><ROW><id>16649920</id><snippet>blank=True</snippet></ROW><ROW><id>16649920</id><snippet>class UserProfile(models.Model):
    user = models.ForeignKey(User, unique=True, related_name='profile', blank=True)
    nick_name = models.CharField(max_length=15)
</snippet></ROW><ROW><id>16649920</id><snippet>UserCreationForm</snippet></ROW><ROW><id>16649920</id><snippet>save</snippet></ROW><ROW><id>16649920</id><snippet>def save(self, commit=True):
    user = super(UserCreationForm, self).save(commit=False)
    user.set_password(self.cleaned_data["password1"])
    if commit:
        user.save()
    return user
</snippet></ROW><ROW><id>16649920</id><snippet>set_password</snippet></ROW><ROW><id>16649920</id><snippet>def set_password(self, raw_password)</snippet></ROW><ROW><id>16649920</id><snippet>UserProfile</snippet></ROW><ROW><id>16649920</id><snippet>User</snippet></ROW><ROW><id>16649920</id><snippet>UserProfile</snippet></ROW><ROW><id>16649920</id><snippet>class UserProfile:
    ...
    def set_password(self, raw_password):
        # whatever logic you need to set the password for your user or maybe
        self.user.set_password(raw_password)
    ...
</snippet></ROW><ROW><id>16650015</id><snippet>@register.assignment_tag
def question_answer(venture, question):
    answers = question.answers.filter(venture=venture)
    return answers[0] if answers else None
</snippet></ROW><ROW><id>16650015</id><snippet>{% question_answer venture question as answer %}
{{ answer }}
</snippet></ROW><ROW><id>16650240</id><snippet>\b[ABC]+\b</snippet></ROW><ROW><id>16650240</id><snippet>&gt;&gt;&gt; regex = re.compile(r'\b[ABC]+\b')
&gt;&gt;&gt; regex.match('AACCD')  #No match
&gt;&gt;&gt; regex.match('AACC')   #match
&lt;_sre.SRE_Match object at 0x11bb578&gt;
&gt;&gt;&gt; regex.match('A')      #match
&lt;_sre.SRE_Match object at 0x11bb5e0&gt;
</snippet></ROW><ROW><id>16650240</id><snippet>\b</snippet></ROW><ROW><id>16650240</id><snippet>A</snippet></ROW><ROW><id>16650240</id><snippet>B</snippet></ROW><ROW><id>16650240</id><snippet>C</snippet></ROW><ROW><id>16650240</id><snippet>set</snippet></ROW><ROW><id>16650240</id><snippet>&gt;&gt;&gt; set("ABC").issuperset("ABCABCABC")
True
&gt;&gt;&gt; set("ABC").issuperset("ABCABCABC1")
False
</snippet></ROW><ROW><id>16650466</id><snippet>None</snippet></ROW><ROW><id>16650466</id><snippet>[setattr(obj,'name','blah') for obj in objects]
</snippet></ROW><ROW><id>16650466</id><snippet>for obj in objects: obj.name = "blah"
</snippet></ROW><ROW><id>16650466</id><snippet>.append</snippet></ROW><ROW><id>16650470</id><snippet>__ne__</snippet></ROW><ROW><id>16650470</id><snippet>__eq__</snippet></ROW><ROW><id>16650470</id><snippet>a == b</snippet></ROW><ROW><id>16650470</id><snippet>not a != b</snippet></ROW><ROW><id>16650470</id><snippet>x==y</snippet></ROW><ROW><id>16650470</id><snippet>x!=y</snippet></ROW><ROW><id>16650470</id><snippet>__eq__()</snippet></ROW><ROW><id>16650470</id><snippet>__ne__()</snippet></ROW><ROW><id>16650470</id><snippet>choice</snippet></ROW><ROW><id>16650470</id><snippet>==</snippet></ROW><ROW><id>16650470</id><snippet>!=</snippet></ROW><ROW><id>16650605</id><snippet>scrapy crawl someSpider -o some.json -t json 2&gt; some.text</snippet></ROW><ROW><id>16650605</id><snippet>scrapy crawl someSpider -o some.json -t json &amp;&gt; some.text</snippet></ROW><ROW><id>16650924</id><snippet>each</snippet></ROW><ROW><id>16650924</id><snippet>#returns True if any item in x is found in valid_diff
&gt;&gt;&gt; any(each in valid_diff for each in x)
True
</snippet></ROW><ROW><id>16650924</id><snippet>any(each in valid_diff and each for each in x)
#will return `True` only if any item found in valid_diff is a Truth value as well.
</snippet></ROW><ROW><id>16650955</id><snippet>auth = tweepy.BasicAuthHandler(username, password)
api = tweepy.API(auth)
</snippet></ROW><ROW><id>16650955</id><snippet>API.user_timeline()</snippet></ROW><ROW><id>16650955</id><snippet>API.home_timeline()</snippet></ROW><ROW><id>16650955</id><snippet>API.followers()</snippet></ROW><ROW><id>16650984</id><snippet>SO_KEEPALIVE</snippet></ROW><ROW><id>16650992</id><snippet>FakeModule</snippet></ROW><ROW><id>16650992</id><snippet>__getattr__</snippet></ROW><ROW><id>16650992</id><snippet>&gt;&gt;&gt; class FakeModule:
...     def __getattr__(self, name):
...         print name
...         return name
...
&gt;&gt;&gt; sys.modules['fakeModule'] = FakeModule()
&gt;&gt;&gt; from fakeModule import something
__path__
something
something
&gt;&gt;&gt; something
'something'
</snippet></ROW><ROW><id>16650992</id><snippet>from functools import wraps

class FakeModule(object):
    def __init__(self):
        self.module = __import__("module_to_fake")

    @staticmethod
    def __testWrapper(fn):
        @wraps(fn)
        def wrapped(*args):
            print "%s called with args %s" % (fn.__name__, args)
            result = fn(*args)
            print "    Result was %s" % (result,)
            return result
        return wrapped

    def __getattr__(self, name):
        try:
            result = getattr(module, name)
        except AttributeError:
            print "tried to get %s, which does not exist" % name
            result = None

        if hasattr(result, "__call__"):
            result = self.__testWrapper(result)

        return result
</snippet></ROW><ROW><id>16650994</id><snippet>dict</snippet></ROW><ROW><id>16651103</id><snippet>**kwargs</snippet></ROW><ROW><id>16651103</id><snippet>def myView(request, *args, **kwargs):
    #Code here.
    distinct = kwargs.pop('distinct') #the distinct parameter(s) {'distinct': 'rate'}
    #verification and validation of distict
    Location.objects.filter(locations_rate__rate=search_rate).distinct(distinct)
    #I assumed only 1 distinct argument

    ...
</snippet></ROW><ROW><id>16651103</id><snippet>params = {'rate': distinct} #where distinct is distinct = kwargs.pop('distinct')
things = Thing.object.filter(**params)
</snippet></ROW><ROW><id>16651326</id><snippet>multiprocessing</snippet></ROW><ROW><id>16651326</id><snippet>fork()</snippet></ROW><ROW><id>16651326</id><snippet>pycurl.Curl</snippet></ROW><ROW><id>16651326</id><snippet>fork()</snippet></ROW><ROW><id>16651326</id><snippet>multiprocessing</snippet></ROW><ROW><id>16651326</id><snippet>fork()</snippet></ROW><ROW><id>16651326</id><snippet>multiprocessing</snippet></ROW><ROW><id>16651326</id><snippet>pickle</snippet></ROW><ROW><id>16651326</id><snippet>pickle</snippet></ROW><ROW><id>16651326</id><snippet>pycurl</snippet></ROW><ROW><id>16651331</id><snippet>with open('inFile.txt', 'r') as inFile, open('outfile.txt', 'w') as outFile:
    outFile.writelines(line + '\n' for line in inFile.readline().split('\t'))
</snippet></ROW><ROW><id>16651331</id><snippet>split -l $lines_per_file outfile.txt
</snippet></ROW><ROW><id>16651331</id><snippet>$lines_per_file</snippet></ROW><ROW><id>16651331</id><snippet>wc -l output.txt</snippet></ROW><ROW><id>16651406</id><snippet>all(x in valid_compare_diff for x in listitem)
</snippet></ROW><ROW><id>16651406</id><snippet>(x for x in listitem if x in valid_compare_diff)</snippet></ROW><ROW><id>16651406</id><snippet>listitem</snippet></ROW><ROW><id>16651406</id><snippet>valid_compare_diff</snippet></ROW><ROW><id>16651406</id><snippet>(x in valid_compare_diff for x in listitem)</snippet></ROW><ROW><id>16651406</id><snippet>x</snippet></ROW><ROW><id>16651406</id><snippet>(x in valid_compare_diff)</snippet></ROW><ROW><id>16651406</id><snippet>bool</snippet></ROW><ROW><id>16651406</id><snippet>x</snippet></ROW><ROW><id>16651468</id><snippet>[row for row in myRows if row[0] == item[0]]
</snippet></ROW><ROW><id>16651468</id><snippet>item</snippet></ROW><ROW><id>16651468</id><snippet>set</snippet></ROW><ROW><id>16651468</id><snippet>set</snippet></ROW><ROW><id>16651468</id><snippet>with open("secondfile") as f:
    # note: only storing the ids, not the whole line
    valid_ids = set(ln.split(',', 1)[0] for ln in f)
</snippet></ROW><ROW><id>16651468</id><snippet>valid_ids</snippet></ROW><ROW><id>16651468</id><snippet>with open("firstfile") as f:
    matched_rows = [ln for ln in f if ln.split(',')[0] in valid_ids]
</snippet></ROW><ROW><id>16651560</id><snippet>class RedisClass(object):
def __init__(self, token=None):

    self.token = token

    if self.token == "TokenA":
        self.redis_connection = redis.Redis(connection_pool="RedisEngineA")
    else:
        self.redis_connection = redis.Redis(connection_pool="RedisEngineB")

def get_data(self):
    data = self.redis_connection.hgetall(self.token)
    if not data:
        raise AuthenticationError({"status: Invalid token"}, code=200, log_error=False)
    return data

def delete_data(self):
    data = self.redis_connection.delete(self.token)
    if not data:
        raise AuthenticationError({"status: Invalid token"}, code=200, log_error=False)
    return data
</snippet></ROW><ROW><id>16651595</id><snippet>side_effect</snippet></ROW><ROW><id>16651595</id><snippet>side_effects</snippet></ROW><ROW><id>16651626</id><snippet>context = ET.iterparse('temp.xml', events=('end',))
</snippet></ROW><ROW><id>16651626</id><snippet>for event, elem in context:
    if event == 'end':
        outList.append(elem.text)
</snippet></ROW><ROW><id>16651651</id><snippet>runfile</snippet></ROW><ROW><id>16651651</id><snippet>myscript.py</snippet></ROW><ROW><id>16651651</id><snippet>$ python myscript.py
</snippet></ROW><ROW><id>16651651</id><snippet>&gt;&gt;&gt; execfile('myscript.py')
</snippet></ROW><ROW><id>16651926</id><snippet>combined = {}
for x in ml_dict:
    try:
        if tb_dict[x] &lt; ml_dict[x]: combined[x] = ml_dict[x]
    except KeyError: continue
</snippet></ROW><ROW><id>16651941</id><snippet>In [75]: x_mesh.shape
Out[75]: (20, 5)

In [76]: y_mesh.shape
Out[76]: (20, 5)

In [77]: heights.shape
Out[77]: (5, 20)
</snippet></ROW><ROW><id>16651941</id><snippet>x</snippet></ROW><ROW><id>16651941</id><snippet>y</snippet></ROW><ROW><id>16651941</id><snippet>matplotlib</snippet></ROW><ROW><id>16651999</id><snippet>multiprocessing</snippet></ROW><ROW><id>16651999</id><snippet>unittest</snippet></ROW><ROW><id>16652064</id><snippet>sql = "TRUNCATE TABLE " + placeholder_variable + ";"
cursor.execute(sql)
</snippet></ROW><ROW><id>16652307</id><snippet>python setup.py install</snippet></ROW><ROW><id>16652307</id><snippet>pip -E twisted_env install -U twisted
</snippet></ROW><ROW><id>16652417</id><snippet>formula</snippet></ROW><ROW><id>16652417</id><snippet>derivative</snippet></ROW><ROW><id>16652417</id><snippet>import</snippet></ROW><ROW><id>16652417</id><snippet>def formula(*array):
    calculate = lambda x: sum(c * x ** p for p, c in enumerate(array))
    calculate.coefficients = array
    return calculate

def derivative(function):
    return (p * c for p, c in enumerate(function.coefficients[1:], 1))
</snippet></ROW><ROW><id>16652417</id><snippet>f</snippet></ROW><ROW><id>16652417</id><snippet>formula</snippet></ROW><ROW><id>16652417</id><snippet>f = formula(-2, 0, 1)
</snippet></ROW><ROW><id>16652417</id><snippet>fprime</snippet></ROW><ROW><id>16652417</id><snippet>derivative</snippet></ROW><ROW><id>16652417</id><snippet>formula</snippet></ROW><ROW><id>16652417</id><snippet>fprime = formula(*derivative(f))
</snippet></ROW><ROW><id>16652417</id><snippet>fprime</snippet></ROW><ROW><id>16652417</id><snippet>f</snippet></ROW><ROW><id>16652417</id><snippet>fprime</snippet></ROW><ROW><id>16652417</id><snippet>#! /usr/bin/env python3
# https://en.wikipedia.org/wiki/Newton's_method
import sys

def formula(*array):
    calculate = lambda x: sum(c * x ** p for p, c in enumerate(array))
    calculate.coefficients = array
    return calculate

def derivative(function):
    return (p * c for p, c in enumerate(function.coefficients[1:], 1))

x0 = 1
f = formula(-2, 0, 1)
fprime = formula(*derivative(f))
tolerance = 1e-10
epsilon = sys.float_info.epsilon
maxIterations = 20

for i in range(maxIterations):
    denominator = fprime(x0)
    if abs(denominator) &lt; epsilon:
        print('WARNING: Denominator is too small')
        break
    newtonX = x0 - f(x0) / denominator
    if abs(newtonX - x0) &lt; tolerance:
        print('The root is', newtonX)
        break
    x0 = newtonX
else:
    print('WARNING: Not able to find solution within the desired tolerance of', tolerance)
    print('The last computed approximate root was', newtonX)
</snippet></ROW><ROW><id>16652534</id><snippet>from fabric.api import task
from fabric.tasks import Task

class CustomTask(Task):
    def __init__(self, func, *args, **kwargs):
        super(CustomTask, self).__init__(*args, **kwargs)
        self.func = func
        self.foo = "one"

    def run(self, *args, **kwargs):
        return self.func(self.foo, *args, **kwargs)

@task(task_class=CustomTask)
def one(foo):
    print(cyan('Using FOO %s' % foo))
</snippet></ROW><ROW><id>16652537</id><snippet>class Obj(object):
    def __getattr__(self,x):
        setattr(self,x,Obj())
        return getattr(self,x)

o = Obj()
o.car.type = "family"
o.car.color = "red"

print o.car.color
</snippet></ROW><ROW><id>16652549</id><snippet>def FUNCTION_I_WANT(s, n):
  return range(*s.indices(n))
</snippet></ROW><ROW><id>16652706</id><snippet>from collections import defaultdict

combined = defaultdict(list)

for d in dicts:
    for key, value in d.items():
        combined[key].append(value)
</snippet></ROW><ROW><id>16652706</id><snippet>combined</snippet></ROW><ROW><id>16652777</id><snippet>queryset = Thing.object.filter(**{'%s__startswith' % criteria: word})

if criteria_requires_distinct:
    queryset = queryset.distinct()
</snippet></ROW><ROW><id>16652790</id><snippet>~/opt</snippet></ROW><ROW><id>16652790</id><snippet>python setup.py build --fcompiler=gnu95
</snippet></ROW><ROW><id>16652790</id><snippet>sys</snippet></ROW><ROW><id>16652790</id><snippet>python setup.py build</snippet></ROW><ROW><id>16652790</id><snippet>build</snippet></ROW><ROW><id>16652790</id><snippet>python setup.py install
</snippet></ROW><ROW><id>16652790</id><snippet>sudo</snippet></ROW><ROW><id>16652979</id><snippet>lexicon.scan
</snippet></ROW><ROW><id>16652979</id><snippet>lexicon</snippet></ROW><ROW><id>16652979</id><snippet>scan</snippet></ROW><ROW><id>16652979</id><snippet>lex = lexicon() # This will create an instance of the lexicon class
lex.scan() # This will invoke the instance method of the instantiated class
</snippet></ROW><ROW><id>16653053</id><snippet>Cython</snippet></ROW><ROW><id>16653053</id><snippet>public api</snippet></ROW><ROW><id>16653053</id><snippet>self</snippet></ROW><ROW><id>16653053</id><snippet>method</snippet></ROW><ROW><id>16653053</id><snippet>double</snippet></ROW><ROW><id>16653053</id><snippet>Cython extension</snippet></ROW><ROW><id>16653053</id><snippet>cdef public api double cy_call_func_double(object self, char* method, bint *error):
    if (hasattr(self, method)):
        error[0] = 0
        return getattr(self, method)();
    else:
        error[0] = 1
</snippet></ROW><ROW><id>16653053</id><snippet>PyObject *py_obj = ....
...
if (py_obj) {
    int error;
    double result;
    result = cy_call_func_double(py_obj, (char*)"initSimulation", &amp;error);
    cout &lt;&lt; "Do something with the result : " &lt;&lt; result &lt;&lt; endl;
}
</snippet></ROW><ROW><id>16653053</id><snippet>PyObject</snippet></ROW><ROW><id>16653053</id><snippet>struct</snippet></ROW><ROW><id>16653053</id><snippet>py_obj</snippet></ROW><ROW><id>16653053</id><snippet>object</snippet></ROW><ROW><id>16653053</id><snippet>&lt;PyObject *&gt;my_python_object</snippet></ROW><ROW><id>16653053</id><snippet>initSimulation</snippet></ROW><ROW><id>16653053</id><snippet>double</snippet></ROW><ROW><id>16653053</id><snippet>vectors</snippet></ROW><ROW><id>16653053</id><snippet>sets</snippet></ROW><ROW><id>16653053</id><snippet>Cython</snippet></ROW><ROW><id>16653244</id><snippet>curl</snippet></ROW><ROW><id>16653380</id><snippet>#!/usr/bin/env python
import re

pattern = r"^([A-Za-z]+)"

text = """A  AH0
A'S  EY1 Z
A(2)  EY1
A.  EY1
A.'S  EY1 Z
A.S  EY1 Z
A42128  EY1 F AO1 R T UW1 W AH1 N T UW1 EY1 T
AAA  T R IH2 P AH0 L EY1
AABERG  AA1 B ER0 G
AACHEN  AA1 K AH0 N
AAKER  AA1 K ER0
AALSETH  AA1 L S EH0 TH
AAMODT  AA1 M AH0 T
AANCOR  AA1 N K AO2 R
AARDEMA  AA0 R D EH1 M AH0"""

def main():
    print re.findall(pattern, text, re.MULTILINE)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16653380</id><snippet>['A', 'A', 'A', 'A', 'A', 'A', 'A', 'AAA', 'AABERG', 'AACHEN', 'AAKER', 'AALSETH', 'AAMODT', 'AANCOR', 'AARDEMA']
</snippet></ROW><ROW><id>16653380</id><snippet>\n</snippet></ROW><ROW><id>16653380</id><snippet>MULTILINE</snippet></ROW><ROW><id>16653380</id><snippet>;</snippet></ROW><ROW><id>16653380</id><snippet>pattern = r"[\n^]([A-Za-z]+)"
print re.findall(pattern, text)
</snippet></ROW><ROW><id>16653524</id><snippet>[my_functionb(my_functiona(x)) for x in a]
</snippet></ROW><ROW><id>16653524</id><snippet>[my_functionb(y) for y in (my_functiona(x) for x in a) if y&lt;10]
</snippet></ROW><ROW><id>16653614</id><snippet>self.top.bind(binding, lambda event, action=action: self.callback(event, self.actionRep.__class__.__dict__[action]))
</snippet></ROW><ROW><id>16653847</id><snippet>self.term.append(word)
</snippet></ROW><ROW><id>16653847</id><snippet>self.term.append(part)
</snippet></ROW><ROW><id>16653847</id><snippet>part</snippet></ROW><ROW><id>16653847</id><snippet>self.term</snippet></ROW><ROW><id>16653847</id><snippet>return</snippet></ROW><ROW><id>16653847</id><snippet>return</snippet></ROW><ROW><id>16653847</id><snippet>for word in self.words:
    if word in direction:
        part = ('direction','%s' % word)
        self.term.append(part)
return self.term
</snippet></ROW><ROW><id>16653847</id><snippet>[('direction', 'north'), ('direction', 'south'), ('direction', 'east')]
</snippet></ROW><ROW><id>16654111</id><snippet>&lt;h2&gt;</snippet></ROW><ROW><id>16654111</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>16654214</id><snippet>os.system("python")
</snippet></ROW><ROW><id>16654214</id><snippet>raw_input("Enter Equation:")
</snippet></ROW><ROW><id>16654214</id><snippet>import wx
a = wx.App()
user_string = wx.GetTextFromUser("Enter Equation:")
</snippet></ROW><ROW><id>16654415</id><snippet>series.fillna(0)</snippet></ROW><ROW><id>16654415</id><snippet>nan</snippet></ROW><ROW><id>16654415</id><snippet>fig = plt.figure()
ax = fig.add_subplot(1,1,1)
plot_chart(df, fig, ax)
ind = arange(df.shape[0])      
ax.barh(ind, df['EndUse_91_1.0'], color='#FFFF00')
lefts = df['EndUse_91_1.0'].fillna(0)
ax.barh(ind, df['EndUse_91_nan'], color='#FFFF00', left=lefts)
lefts = lefts + df['EndUse_91_1.0'].fillna(0)
ax.barh(ind, df['EndUse_80_1.0'], color='#0070C0', left=lefts)
lefts = lefts + df['EndUse_91_1.0'].fillna(0)
ax.barh(ind, df['EndUse_80_nan'], color='#0070C0', left=lefts)
plt.show()
</snippet></ROW><ROW><id>16654792</id><snippet>File "C:\o\17\mysite\pet\forms.py" in authenticate_via_email
62.                 email = self.cleaned_data['email']
</snippet></ROW><ROW><id>16654792</id><snippet>email = self.cleaned_data.get('email', None)
if email:
    (...)
return None
</snippet></ROW><ROW><id>16654896</id><snippet>class EmployeeResource(ModelResource):
    def dehydrate(self, bundle):
        t = bundle.request.GET.get('t')
        if t:
            bundle.data['custom_field'] = bundle.obj.custom_field
        return bundle

    class Meta:
        fields = common_fields
</snippet></ROW><ROW><id>16655093</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>16655096</id><snippet>dict</snippet></ROW><ROW><id>16655096</id><snippet>dict([(1, 'value1'), (2, 'value2'), (3, 'value3')])
</snippet></ROW><ROW><id>16655096</id><snippet>{k: v for v,k in [(1, 'value1'), (2, 'value2'), (3, 'value3')]}
</snippet></ROW><ROW><id>16655309</id><snippet>elif word.isdigit():</snippet></ROW><ROW><id>16655480</id><snippet>import threading
import datetime


class ThreadClass(threading.Thread):
    def run(self):
        now = datetime.datetime.now()
        pool.acquire()
        print "%s says hello, World! at time: %s"  % (self.getName(),now)
        pool.release()


pool = threading.BoundedSemaphore(value=1)


for i in range(10):
        t = ThreadClass()
        t.start()
</snippet></ROW><ROW><id>16655480</id><snippet>Thread-1 says hello, World! at time: 2013-05-20 18:57:47.609000
Thread-2 says hello, World! at time: 2013-05-20 18:57:47.609000
Thread-3 says hello, World! at time: 2013-05-20 18:57:47.609000
Thread-4 says hello, World! at time: 2013-05-20 18:57:47.609000
Thread-5 says hello, World! at time: 2013-05-20 18:57:47.609000
Thread-6 says hello, World! at time: 2013-05-20 18:57:47.609000
Thread-7 says hello, World! at time: 2013-05-20 18:57:47.609000
Thread-8 says hello, World! at time: 2013-05-20 18:57:47.609000
Thread-9 says hello, World! at time: 2013-05-20 18:57:47.609000
Thread-10 says hello, World! at time: 2013-05-20 18:57:47.609000
</snippet></ROW><ROW><id>16655480</id><snippet>import threading
import datetime


class ThreadClass(threading.Thread):
    def run(self):
        now = datetime.datetime.now()
        print "%s says hello, World! at time: %s"  % (self.getName(),now)




for i in range(10):
        t = ThreadClass()
        t.start()
</snippet></ROW><ROW><id>16655480</id><snippet>Thread-1 says hello, World! at time: 2013-05-20 18:58:05.531000Thread-2 says hello, World! at time: 2013-05-20 18:58:05.
531000

 Thread-4 says hello, World! at time: 2013-05-20 18:58:05.531000Thread-3 says hello, World! at time: 2013-05-20 18:58:05
.531000

 Thread-6 says hello, World! at time: 2013-05-20 18:58:05.531000Thread-5 says hello, World! at time: 2013-05-20 18:58:05
.531000

 Thread-8 says hello, World! at time: 2013-05-20 18:58:05.531000Thread-7 says hello, World! at time: 2013-05-20 18:58:05
.531000

 Thread-10 says hello, World! at time: 2013-05-20 18:58:05.531000Thread-9 says hello, World! at time: 2013-05-20 18:58:0
5.531000
</snippet></ROW><ROW><id>16655480</id><snippet>import multiprocessing
import datetime
import random
import time

def funfun(number):
    time.sleep(random.randint(0,10))
    now = datetime.datetime.now()
    return "%s says hello, World! at time: %s"  % (number,now)

if __name__ == "__main__":
    pool = multiprocessing.Pool(10)
    for item in pool.imap(funfun,[i for i in range(10)]):
        print item
</snippet></ROW><ROW><id>16655480</id><snippet>0 says hello, World! at time: 2013-05-21 00:38:48.546000
1 says hello, World! at time: 2013-05-21 00:38:55.562000
2 says hello, World! at time: 2013-05-21 00:38:47.562000
3 says hello, World! at time: 2013-05-21 00:38:51.578000
4 says hello, World! at time: 2013-05-21 00:38:50.578000
5 says hello, World! at time: 2013-05-21 00:38:48.593000
6 says hello, World! at time: 2013-05-21 00:38:52.593000
7 says hello, World! at time: 2013-05-21 00:38:48.593000
8 says hello, World! at time: 2013-05-21 00:38:50.593000
9 says hello, World! at time: 2013-05-21 00:38:51.609000
</snippet></ROW><ROW><id>16655547</id><snippet>extent</snippet></ROW><ROW><id>16655547</id><snippet>ax.imshow(data, extent=[0, 1, 0, 1])
</snippet></ROW><ROW><id>16655586</id><snippet>&gt;&gt;&gt; pathList = [r"C:\Users", r"C:\Documents", r"C:\Downloads\Test"]
&gt;&gt;&gt; finalPathList = []
&gt;&gt;&gt; for element in pathList:
          finalPathList.append(element.replace("\\", "/"))


&gt;&gt;&gt; finalPathList
['C:/Users', 'C:/Documents', 'C:/Downloads/Test']
</snippet></ROW><ROW><id>16655586</id><snippet>&gt;&gt;&gt; finalPathList = [elem.replace("\\", "/") for elem in pathList]
&gt;&gt;&gt; finalPathList
['C:/Users', 'C:/Documents', 'C:/Downloads/Test']
</snippet></ROW><ROW><id>16655644</id><snippet>import re

pat = ('([2-9])'        # Integer Number 1
       '([p-z])'        # Any Single Word Character (Not Whitespace) 1
       '([a-h])'        # Any Single Word Character (Not Whitespace) 2
       '([2-9])'        # Integer Number 2
       '([a-z]*[p-z]+)' # Word 1
       '([2-9])'        # Integer Number 3
       '([p-z])'        # Any Single Word Character (Not Whitespace) 3
       '(.)'            # Any Single Character 1
       '([p-z])'        # Any Single Word Character (Not Whitespace) 4
       )
rg = re.compile(pat)

txt = 'jiji4pa6fmlgkfmoaz8p#q,,,,,,,,,,'
m = rg.search(txt)
if m:
    text2 = "%s%s%s%s%s%s%s%s%s" % m.groups()
    print text2

# prints 4pa6fmlgkfmoaz8p#q
</snippet></ROW><ROW><id>16655644</id><snippet>text2 = ''.join(m.groups())  # is better
</snippet></ROW><ROW><id>16655716</id><snippet>base = ShowBase()
mySound = base.loader.loadSfx("path/to/the_tone.wav")
</snippet></ROW><ROW><id>16655716</id><snippet>mySound.setLoop(True)
mySound.play()
</snippet></ROW><ROW><id>16655716</id><snippet>mySound.setVolume(0.5) # 0.0~1.0 
</snippet></ROW><ROW><id>16655854</id><snippet>=?utf-8?b?VmFzY28gUGF0csOtY2lv?=</snippet></ROW><ROW><id>16656024</id><snippet>setup.py</snippet></ROW><ROW><id>16656024</id><snippet>--help</snippet></ROW><ROW><id>16656024</id><snippet>easy_install</snippet></ROW><ROW><id>16656243</id><snippet>your_string.rpartition('\\')[-1]
</snippet></ROW><ROW><id>16656268</id><snippet>f(n)</snippet></ROW><ROW><id>16656268</id><snippet>determinant_laplace</snippet></ROW><ROW><id>16656268</id><snippet>n</snippet></ROW><ROW><id>16656268</id><snippet>n</snippet></ROW><ROW><id>16656268</id><snippet>n</snippet></ROW><ROW><id>16656268</id><snippet>O((n-1)**2) = O(n**2)</snippet></ROW><ROW><id>16656268</id><snippet>f(n-1)</snippet></ROW><ROW><id>16656268</id><snippet>determinant_laplace</snippet></ROW><ROW><id>16656268</id><snippet>f</snippet></ROW><ROW><id>16656268</id><snippet>f(n) &lt;= n(C*n**2 + f(n-1))
</snippet></ROW><ROW><id>16656268</id><snippet>C</snippet></ROW><ROW><id>16656268</id><snippet>n</snippet></ROW><ROW><id>16656268</id><snippet>M</snippet></ROW><ROW><id>16656268</id><snippet>C</snippet></ROW><ROW><id>16656268</id><snippet>M</snippet></ROW><ROW><id>16656268</id><snippet>H(n)</snippet></ROW><ROW><id>16656268</id><snippet>f(n) &lt;= D * n * n!
</snippet></ROW><ROW><id>16656268</id><snippet>D&gt;0</snippet></ROW><ROW><id>16656268</id><snippet>n</snippet></ROW><ROW><id>16656268</id><snippet>n = 1, ..., M</snippet></ROW><ROW><id>16656268</id><snippet>D</snippet></ROW><ROW><id>16656268</id><snippet>H(1), ..., H(M) are true, and D&gt;C.
</snippet></ROW><ROW><id>16656268</id><snippet>n**3/n! &lt; 1</snippet></ROW><ROW><id>16656268</id><snippet>n &gt;= 6</snippet></ROW><ROW><id>16656268</id><snippet>M&gt;6</snippet></ROW><ROW><id>16656268</id><snippet>n &gt; M</snippet></ROW><ROW><id>16656268</id><snippet>H(n-1)</snippet></ROW><ROW><id>16656268</id><snippet>f(n) &lt;= n(C*n**2 + f(n-1))          # by our recurrence inequality
     &lt;= C*n**3 + n*D*(n-1)*(n-1)!   # by H(n-1)
      = C*n**3 + D*(n-1)*n!
     &lt;= C*n! + D*(n-1)*n!           # since n**3 / n! &lt; 1 and n &gt; M &gt; 6
      = (C+D*(n-1))*n! 
     &lt;= D*n*n!                      # since D &gt; C
</snippet></ROW><ROW><id>16656268</id><snippet>H(n)</snippet></ROW><ROW><id>16656268</id><snippet>f(n)</snippet></ROW><ROW><id>16656268</id><snippet>O(n*n!)</snippet></ROW><ROW><id>16656268</id><snippet>f(n)</snippet></ROW><ROW><id>16656268</id><snippet>O(n**(1/p)*n!)</snippet></ROW><ROW><id>16656268</id><snippet>p = 1, 2, 3, ...</snippet></ROW><ROW><id>16656326</id><snippet>multiprocessing</snippet></ROW><ROW><id>16656326</id><snippet>import __main__</snippet></ROW><ROW><id>16656326</id><snippet>os.fork</snippet></ROW><ROW><id>16656326</id><snippet>__main__</snippet></ROW><ROW><id>16656326</id><snippet>os.fork</snippet></ROW><ROW><id>16656326</id><snippet>import __main__</snippet></ROW><ROW><id>16656326</id><snippet>import __main__</snippet></ROW><ROW><id>16656326</id><snippet>if __name__ == "__main__":
</snippet></ROW><ROW><id>16656335</id><snippet>wanted_fps = 1 # how often I want the endless loop to run per second
fpsHandler = pygame.time.Clock() # fpsHandler created to handle fps

while(True): # our endless loop
    # do something awesome
    fpsHandler.tick(wanted_fps) # makes sure fps isn't higher than wanted_fps
</snippet></ROW><ROW><id>16656335</id><snippet># handle events
if mycounter &gt; 0:
    mycounter -= 1
else:
    # do something amazing
    mycounter = 30
</snippet></ROW><ROW><id>16656348</id><snippet>while</snippet></ROW><ROW><id>16656348</id><snippet>for</snippet></ROW><ROW><id>16656348</id><snippet>a</snippet></ROW><ROW><id>16656348</id><snippet>b</snippet></ROW><ROW><id>16656348</id><snippet>c</snippet></ROW><ROW><id>16656348</id><snippet>return</snippet></ROW><ROW><id>16656348</id><snippet>def func(a,b,c):
    for a in range(3,500):
        for b in range(a+1,500):
            c = (a**2 + b**2)**0.5
            if a + b + c == 1000:
                print a, b, c
                print a*b*c
                return # causes your function to exit, and return a value to caller

func(3,4,5)
</snippet></ROW><ROW><id>16656348</id><snippet>sys.exit()</snippet></ROW><ROW><id>16656348</id><snippet>import sys
a = 3
b = 4
c = 5
for a in range(3,500):
    for b in range(a+1,500):
        c = (a**2 + b**2)**0.5
        if a + b + c == 1000:
            print a, b, c
            print a*b*c
            sys.exit()     #stops the script
</snippet></ROW><ROW><id>16656348</id><snippet>sys.exit</snippet></ROW><ROW><id>16656348</id><snippet>&gt;&gt;&gt; print sys.exit.__doc__
exit([status])

Exit the interpreter by raising SystemExit(status).
If the status is omitted or None, it defaults to zero (i.e., success).
If the status is numeric, it will be used as the system exit status.
If it is another kind of object, it will be printed and the system
exit status will be one (i.e., failure).
</snippet></ROW><ROW><id>16656373</id><snippet>def bytesfromfile(f):
    while True:
        raw = array.array('B')
        raw.fromstring(f.read(8192))
        if not raw:
            break
        yield raw

with open(f_in, 'rb') as fd_in:
    for byte in bytesfromfile(fd_in):
        # do stuff
</snippet></ROW><ROW><id>16656373</id><snippet>'B'</snippet></ROW><ROW><id>16656373</id><snippet>In [8]: f = open('foreman_cif_frame_0.yuv', 'rb')

In [9]: raw = array.array('B')

In [10]: raw.fromstring(f.read())

In [11]: raw[0:10]
Out[11]: array('B', [10, 40, 201, 255, 247, 254, 254, 254, 254, 254])

In [12]: len(raw)
Out[12]: 152064
</snippet></ROW><ROW><id>16656373</id><snippet>    fd_i = open(file.bin, 'rb')
    fd_o = open(out.bin, 'wb')

    while True:
        # Read as uint8
        chunk = np.fromfile(fd_i, dtype=np.uint8, count=8192)
        # use int for calculations since uint wraps
        chunk = chunk.astype(np.int)
        if not chunk.any():
            break
        # do some calculations
        data = ...

        # convert back to uint8 prior to writing.
        data = data.astype(np.uint8)
        data.tofile(fd_o)

    fd_i.close()
    fd_o.close()
</snippet></ROW><ROW><id>16656373</id><snippet>In [18]: import numpy as np

In [19]: f = open('foreman_cif_frame_0.yuv', 'rb')

In [20]: data = np.fromfile(f, dtype=np.uint8)

In [21]: data[0:10]
Out[21]: array([ 10,  40, 201, 255, 247, 254, 254, 254, 254, 254], dtype=uint8)
</snippet></ROW><ROW><id>16656412</id><snippet>c = test(**d)
</snippet></ROW><ROW><id>16656502</id><snippet>from collections import defaultdict

animals = defaultdict(list)

for p in infile:
    animals[p[0]].append(p[1])
</snippet></ROW><ROW><id>16656516</id><snippet>\\</snippet></ROW><ROW><id>16656516</id><snippet>/</snippet></ROW><ROW><id>16656516</id><snippet>os.path.exists(path)</snippet></ROW><ROW><id>16656516</id><snippet>os.path.join</snippet></ROW><ROW><id>16656676</id><snippet>sub()</snippet></ROW><ROW><id>16656676</id><snippet>sub('[a-z]+', 'test', file_contents)
</snippet></ROW><ROW><id>16656676</id><snippet>file_contents = sub('[a-z]+', 'test', file_contents)
</snippet></ROW><ROW><id>16656826</id><snippet>class SiteForm(ModelForm):
    class Meta:
        model = Site

    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user')
        super(SiteForm, self).__init__(*args, **kwargs)
        self.fields['trip'].queryset = Trip.objects.filter(id__in=user.site_set.values_list(trip, flat=True))
</snippet></ROW><ROW><id>16656826</id><snippet>form = SiteForm(user=request.user)
</snippet></ROW><ROW><id>16656889</id><snippet>&gt;&gt;&gt; wordnet.synset('light.a.01').antonyms()
[]
&gt;&gt;&gt; wordnet.lemma('light.a.01.light').antonyms()
[Lemma('heavy.a.01.heavy')]
</snippet></ROW><ROW><id>16657228</id><snippet>class YourRequestHandler(BlobstoreUploadHandler, RequestHandler):
    pass
</snippet></ROW><ROW><id>16657228</id><snippet>def post(self):
    uploads = self.get_uploads()
    try:
        pass  # Put your application-specific code here.
        # As soon as you have stored a blob key in the database (using a transaction),
        # remove the corresponding upload from the uploads array.
    finally:
        keys = [upload.key() for upload in uploads]
        blobstore.delete_multi(keys)
</snippet></ROW><ROW><id>16657446</id><snippet>dataText</snippet></ROW><ROW><id>16657446</id><snippet>print [id(x) for x in dataText]
</snippet></ROW><ROW><id>16657446</id><snippet>dataText = [
    [0,0,0,0],
    [0,0,0,0],
    [0,0,0,0],
    [0,0,0,0]
    ]
</snippet></ROW><ROW><id>16657517</id><snippet>variable = [["1","arbitrary string","another arbitrary string"],["2","arbitrary string","another arbitrary string"],["3","arbitrary string","another arbitrary string"],["4","arbitrary string","another arbitrary string"]]

variable
[[u'1', u'arbitrary string', u'another arbitrary string'],
[u'2', u'arbitrary string', u'another arbitrary string'],
[u'3', u'arbitrary string', u'another arbitrary string'],
[u'4', u'arbitrary string', u'another arbitrary string']]

another_variable = "arbitrary string"

another_variable
u'arbitrary string'
</snippet></ROW><ROW><id>16657529</id><snippet>list.append
</snippet></ROW><ROW><id>16657529</id><snippet>None</snippet></ROW><ROW><id>16657529</id><snippet>list = list.append(int(round((phi**i - phinverse**i)/sqrt(5), 0)))</snippet></ROW><ROW><id>16657529</id><snippet>list=None</snippet></ROW><ROW><id>16657529</id><snippet>for i in range(0,n):
    list.append(int(round((phi**i - phinverse**i)/sqrt(5), 0)))
</snippet></ROW><ROW><id>16657529</id><snippet>list</snippet></ROW><ROW><id>16657597</id><snippet>parser</snippet></ROW><ROW><id>16657597</id><snippet>print parser.__file__ 
</snippet></ROW><ROW><id>16657597</id><snippet>absolute_imports</snippet></ROW><ROW><id>16657597</id><snippet>__future__</snippet></ROW><ROW><id>16657698</id><snippet>response = [0, 1, 2]
for i in range(len(response)):
    response[i] = tags_re.sub('', response[i])
</snippet></ROW><ROW><id>16657698</id><snippet>response = [...]
response_fixed = [tags_re.sub('',val) for val in response]
</snippet></ROW><ROW><id>16657711</id><snippet>set_clim()</snippet></ROW><ROW><id>16657711</id><snippet>p.autoscale()
</snippet></ROW><ROW><id>16657711</id><snippet>set_clim()</snippet></ROW><ROW><id>16657711</id><snippet>set_data</snippet></ROW><ROW><id>16657711</id><snippet>set_array</snippet></ROW><ROW><id>16657754</id><snippet>google.appengine.datastore.datastore_rpc</snippet></ROW><ROW><id>16657859</id><snippet>OPTIONS</snippet></ROW><ROW><id>16657859</id><snippet>do_options</snippet></ROW><ROW><id>16657859</id><snippet>BaseHTTPRequestHandler</snippet></ROW><ROW><id>16657859</id><snippet>def do_OPTIONS(self):
    self.sendResponse(200)
    self.processRequest()
</snippet></ROW><ROW><id>16657859</id><snippet>processRequest</snippet></ROW><ROW><id>16657859</id><snippet>self.send_header("Access-Control-Allow-Headers", "Authorization")</snippet></ROW><ROW><id>16657859</id><snippet>        #   Copyright 2012-2013 Eric Ptak - trouch.com
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    import os
    import threading
    import re
    import codecs
    import mimetypes as mime
    import logging

    from webiopi.utils import *

    if PYTHON_MAJOR &gt;= 3:
        import http.server as BaseHTTPServer
    else:
        import BaseHTTPServer

    try :
        import _webiopi.GPIO as GPIO
    except:
        pass

    WEBIOPI_DOCROOT = "/usr/share/webiopi/htdocs"

    class HTTPServer(BaseHTTPServer.HTTPServer, threading.Thread):
        def __init__(self, host, port, handler, context, docroot, index, auth=None):
            BaseHTTPServer.HTTPServer.__init__(self, ("", port), HTTPHandler)
            threading.Thread.__init__(self, name="HTTPThread")
            self.host = host
            self.port = port

            if context:
                self.context = context
                if not self.context.startswith("/"):
                    self.context = "/" + self.context
                if not self.context.endswith("/"):
                    self.context += "/"
            else:
                self.context = "/"

            self.docroot = docroot

            if index:
                self.index = index
            else:
                self.index = "index.html"

            self.handler = handler
            self.auth = auth

            self.running = True
            self.start()

        def get_request(self):
            sock, addr = self.socket.accept()
            sock.settimeout(10.0)
            return (sock, addr)

        def run(self):
            info("HTTP Server binded on http://%s:%s%s" % (self.host, self.port, self.context))
            try:
                self.serve_forever()
            except Exception as e:
                if self.running == True:
                    exception(e)
            info("HTTP Server stopped")

        def stop(self):
            self.running = False
            self.server_close()

    class HTTPHandler(BaseHTTPServer.BaseHTTPRequestHandler):
        logger = logging.getLogger("HTTP")

        def log_message(self, fmt, *args):
            self.logger.debug(fmt % args)

        def log_error(self, fmt, *args):
            pass

        def version_string(self):
            return VERSION_STRING

        def checkAuthentication(self):
            if self.server.auth == None or len(self.server.auth) == 0:
                return True

            authHeader = self.headers.get('Authorization')
            if authHeader == None:
                return False

            if not authHeader.startswith("Basic "):
                return False

            auth = authHeader.replace("Basic ", "")
            if PYTHON_MAJOR &gt;= 3:
                auth_hash = encrypt(auth.encode())
            else:
                auth_hash = encrypt(auth)

            if auth_hash == self.server.auth:
                return True
            return False

        def requestAuthentication(self):
            self.send_response(401)
            self.send_header("WWW-Authenticate", 'Basic realm="webiopi"')
            self.end_headers();

        def sendResponse(self, code, body=None, type="text/plain"):
            if code &gt;= 400:
                if body != None:
                    self.send_error(code, body)
                else:
                    self.send_error(code)
            else:
                self.send_response(code)
                self.send_header("Cache-Control", "no-cache")
                self.send_header("Access-Control-Allow-Origin", "*")
                self.send_header("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
                self.send_header("Access-Control-Allow-Headers", "Authorization")
                if body != None:
                    self.send_header("Content-Type", type);
                    self.end_headers();
                    self.wfile.write(body.encode())

        def findFile(self, filepath):
            if os.path.exists(filepath):
                if os.path.isdir(filepath):
                    filepath += "/" + self.server.index
                    if os.path.exists(filepath):
                        return filepath
                else:
                    return filepath
            return None


        def serveFile(self, relativePath):
            if self.server.docroot != None:
                path = self.findFile(self.server.docroot + "/" + relativePath)
                if path == None:
                    path = self.findFile("./" + relativePath)

            else:
                path = self.findFile("./" + relativePath)                
                if path == None:
                    path = self.findFile(WEBIOPI_DOCROOT + "/" + relativePath)

            if path == None and (relativePath.startswith("webiopi.") or relativePath.startswith("jquery")):
                path = self.findFile(WEBIOPI_DOCROOT + "/" + relativePath)

            if path == None:
                return self.sendResponse(404, "Not Found")

            realPath = os.path.realpath(path)

            if realPath.endswith(".py"):
                return self.sendResponse(403, "Not Authorized")

            if not (realPath.startswith(os.getcwd()) 
                    or (self.server.docroot and realPath.startswith(self.server.docroot))
                    or realPath.startswith(WEBIOPI_DOCROOT)):
                return self.sendResponse(403, "Not Authorized")

            (type, encoding) = mime.guess_type(path)
            f = codecs.open(path, encoding=encoding)
            data = f.read()
            f.close()
            self.send_response(200)
            self.send_header("Content-Type", type);
            self.send_header("Content-Length", os.path.getsize(realPath))
            self.end_headers()
            self.wfile.write(data)

        def processRequest(self):
            self.request.settimeout(None)
            if not self.checkAuthentication():
                return self.requestAuthentication()

            request = self.path.replace(self.server.context, "/").split('?')
            relativePath = request[0]
            if relativePath[0] == "/":
                relativePath = relativePath[1:]

            if relativePath == "webiopi" or relativePath == "webiopi/":
                self.send_response(301)
                self.send_header("Location", "/")
                self.end_headers()
                return

            params = {}
            if len(request) &gt; 1:
                for s in request[1].split('&amp;'):
                    if s.find('=') &gt; 0:
                        (name, value) = s.split('=')
                        params[name] = value
                    else:
                        params[s] = None

            compact = False
            if 'compact' in params:
                compact = str2bool(params['compact'])

            try:
                result = (None, None, None)
                if self.command == "GET":
                    result = self.server.handler.do_GET(relativePath, compact)
                elif self.command == "POST":
                    length = 0
                    length_header = 'content-length'
                    if length_header in self.headers:
                        length = int(self.headers[length_header])
                    result = self.server.handler.do_POST(relativePath, self.rfile.read(length), compact)
                else:
                    result = (405, None, None)

                (code, body, type) = result

                if code &gt; 0:
                    self.sendResponse(code, body, type)
                else:
                    if self.command == "GET":
                        self.serveFile(relativePath)
                    else:
                        self.sendResponse(404)

            except (GPIO.InvalidDirectionException, GPIO.InvalidChannelException, GPIO.SetupException) as e:
                self.sendResponse(403, "%s" % e)
            except ValueError as e:
                self.sendResponse(403, "%s" % e)
            except Exception as e:
                self.sendResponse(500)
                raise e


        def do_OPTIONS(self):
            self.sendResponse(200)
            self.processRequest()

        def do_GET(self):
            self.processRequest()

        def do_POST(self):
            self.processRequest()
</snippet></ROW><ROW><id>16658101</id><snippet>&gt;&gt;&gt; icon = '\u25b2'
&gt;&gt;&gt; print(icon)
▲
</snippet></ROW><ROW><id>16658101</id><snippet>u</snippet></ROW><ROW><id>16658101</id><snippet>&gt;&gt;&gt; icon = u'\u25b2'
&gt;&gt;&gt; print icon
▲
</snippet></ROW><ROW><id>16658151</id><snippet>str</snippet></ROW><ROW><id>16658151</id><snippet>unicode</snippet></ROW><ROW><id>16658151</id><snippet>str</snippet></ROW><ROW><id>16658151</id><snippet>a.decode('utf-8')</snippet></ROW><ROW><id>16658357</id><snippet>q1 = Q()
if conditionA:
    q1 |= Q(income__gte=5000)
if conditionB:
    q1 |= Q(income=0)

User.objects.filter(q1)
</snippet></ROW><ROW><id>16658607</id><snippet>"datagrid.txt"</snippet></ROW><ROW><id>16658607</id><snippet>1 2 3
4 5 6
7 9 0
. . .
. . .
. . .
</snippet></ROW><ROW><id>16658607</id><snippet>loadtxt</snippet></ROW><ROW><id>16658607</id><snippet>x</snippet></ROW><ROW><id>16658607</id><snippet>t</snippet></ROW><ROW><id>16658607</id><snippet>u</snippet></ROW><ROW><id>16658607</id><snippet>x, t, u = datalist[:,0], datalist[:,1], datalist[:,2]
</snippet></ROW><ROW><id>16658607</id><snippet>x, t, u = datalist.transpose()
</snippet></ROW><ROW><id>16658607</id><snippet>x, t, u = loadtxt("datagrid.txt", unpack=True)
</snippet></ROW><ROW><id>16658761</id><snippet>_</snippet></ROW><ROW><id>16658968</id><snippet>if</snippet></ROW><ROW><id>16658968</id><snippet>testvar = 1 if x == 'dog' else 2 if x == 'cat' else 0 if x.isspace() else None
</snippet></ROW><ROW><id>16658968</id><snippet>else</snippet></ROW><ROW><id>16658968</id><snippet>testvar = 1 if x == 'dog' else (2 if x == 'cat' else (0 if x.isspace() else None))
</snippet></ROW><ROW><id>16658968</id><snippet>else</snippet></ROW><ROW><id>16658968</id><snippet>&gt;&gt;&gt; x = 'cat'
&gt;&gt;&gt; 1 if x == 'dog' else 2 if x == 'cat' else 0 if x.isspace() else None
2
</snippet></ROW><ROW><id>16658968</id><snippet>testmapping = {'dog': 1, 'cat': 2, ' ': 0}
testvar = testmapping.get(x)
</snippet></ROW><ROW><id>16658968</id><snippet>&gt;&gt;&gt; testmapping = {'dog': 1, 'cat': 2, ' ': 0}
&gt;&gt;&gt; testmapping[x]
2
</snippet></ROW><ROW><id>16659262</id><snippet>__enter__()</snippet></ROW><ROW><id>16659262</id><snippet>__exit__()</snippet></ROW><ROW><id>16659319</id><snippet>.writerows()</snippet></ROW><ROW><id>16659319</id><snippet>a.writerows([val] for val in allsnps)
</snippet></ROW><ROW><id>16659319</id><snippet>with open('mirnaduplicates.csv', "rb") as ifile, \
     open('mirnaduplicatesremoved.csv', 'wb') as fp:
    reader = csv.reader(ifile)
    writer = csv.writer(fp, delimiter=' ')

    seen = set()
    seen_add = seen.add
    writer.writerows(row for row in reader if row[0] not in seen and not seen_add(row[0]))
</snippet></ROW><ROW><id>16659631</id><snippet>urllib2</snippet></ROW><ROW><id>16659631</id><snippet>requests</snippet></ROW><ROW><id>16659631</id><snippet>url = 'http://fiverr.com/logo_business/design-a-killer-high-quality-effective-and-custom-made-logo-for-your-company-business-website-or-personal-use'
print 'Gig Paused' in requests.get(url, headers={'User-Agent': ''}).text
</snippet></ROW><ROW><id>16660010</id><snippet>X</snippet></ROW><ROW><id>16660010</id><snippet>my $size = 20;
my $count = 20;
my $mark = 'X';
my $input = 'CCACGCATTTTTGTTCATTGTTCTGGCTTCTTACAAGGTTCAGTAGACTTTGTAACACAGTTGTGTCTCTCACAGATTGGCAGATGTTTGGTAAAGGATTGACTTTTCAGCCAACTCATGGGAAAGTGAAATAATGTAAAAAACAGGAAGAATACAGTTTTAGGCCTTTCAAGTGAGGCATGGCTTTCAGCTCTTGGCAAGAACAGGCAAGGAGATGCAAGTTTTAGGACTCTAAGAGGCTAGGCTTTTCAAAGTGCTTCTCTCCCCTTCACCCTCCTTCAGTTACAGCACCAAGCACCACCGAGGTGTTACCTGCAGCCTCACTCTCTACCTGGTTGTGGGATCCTGCCACTTCCTTAACCCACACTGAGTTCCTTGTGGTTCACAGGGTCACACAGAGGGCTGTAGAGATACAAAAGATATATGTGATTTTATATCACCTATCATATGAAGATATATTTATAAAATAGGAAACATATTAACCACTTATCATTTTATATATTTATGGTTTTATGTGTCAAAAATATATTGTTTCATGTATGTATTAAAGGATAAGTATGTATAAGAGGTTTTATAGATGTGTAAAATTATATATTTATACGTATCTTTACAAATTTAAGAATAAAGGAAGGAAAATTCTCAAAGAGGAATTCAGATATCAAGCAGTGCCCTTTGACCAAGAGCCTTGGTTACAACATACCTACAAAAGTGAACTATCATTGAAAGACCTATGGACACTGGATTTCTCTTTCCTTATTTAGAAGGGCAGTCTGTGTCTTGGAAAAGCATACAGTTTGTTGTATCTTGCTGGACAACAGGAGTCA';

if (2*$size*$count-$size-$count &gt;= length($input)) {
    die "selection may not complete; choose a shorter length or fewer substrings, or provide a longer input string\n";
}

my @substrings;
while (@substrings &lt; $count) {
    my $pos = int rand(length($input)-$size+1);
    push @substrings, substr($input, $pos, $size, $mark x $size)
        if substr($input, $pos, $size) !~ /\Q$mark/;
}
</snippet></ROW><ROW><id>16660022</id><snippet>cards</snippet></ROW><ROW><id>16660022</id><snippet>len(seq)</snippet></ROW><ROW><id>16660022</id><snippet>0</snippet></ROW><ROW><id>16660022</id><snippet>ValueError</snippet></ROW><ROW><id>16660022</id><snippet>IndexError</snippet></ROW><ROW><id>16660022</id><snippet>button_clicked()</snippet></ROW><ROW><id>16660022</id><snippet>cards</snippet></ROW><ROW><id>16660022</id><snippet>&gt;&gt;&gt; from random import choice
&gt;&gt;&gt; choice([])
Traceback (most recent call last):
  File "/opt/local/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/random.py", line 249, in choice
    i = self._randbelow(len(seq))
  File "/opt/local/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/random.py", line 225, in _randbelow
    r = getrandbits(k)          # 0 &lt;= r &lt; 2**k
ValueError: number of bits must be greater than zero

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/random.py", line 251, in choice
    raise IndexError('Cannot choose from an empty sequence')
IndexError: Cannot choose from an empty sequence
</snippet></ROW><ROW><id>16660022</id><snippet>class game_window(QtGui.QWidget, Ui_main_window):
    def __init__(self, parent=None):
        super(game_window, self).__init__(parent)

        self.used = set()

        # rest of your `__init__`

    # ...

    def button_clicked(self):
        while True:
            card_to_play = choice(cards)
            if card_to_play not in self.used:
                break
            if not set(cards).difference(self.used):
                raise ValueError('Not enough cards, used {}, can pick from {}'.format(len(self.used), len(set(cards))))

        password_label.setText(card_to_play)
        self.used.add(card_to_play)
        self.button_rename()
</snippet></ROW><ROW><id>16660022</id><snippet>cards</snippet></ROW><ROW><id>16660022</id><snippet>game_window</snippet></ROW><ROW><id>16660022</id><snippet>used</snippet></ROW><ROW><id>16660022</id><snippet>used</snippet></ROW><ROW><id>16660022</id><snippet>self.used = set()</snippet></ROW><ROW><id>16660062</id><snippet>number = 19

num_bits = 8
bits = [(number &gt;&gt; bit) &amp; 1 for bit in range(num_bits - 1, -1, -1)]
</snippet></ROW><ROW><id>16660062</id><snippet>[0, 0, 0, 1, 0, 0, 1, 1]</snippet></ROW><ROW><id>16660062</id><snippet>for position, bit in enumerate(bits):
    print '%d  %5r (%d)' % (position, bool(bit), bit)
</snippet></ROW><ROW><id>16660179</id><snippet>class</snippet></ROW><ROW><id>16660179</id><snippet>type(name, bases, dict)
</snippet></ROW><ROW><id>16660179</id><snippet>type</snippet></ROW><ROW><id>16660179</id><snippet>&gt;&gt;&gt; class ui():
...     def start(self): print("Started!")
... 
&gt;&gt;&gt; Game = type("Game", (ui,), {})
&gt;&gt;&gt; game = Game()
&gt;&gt;&gt; game.start()
Started!
</snippet></ROW><ROW><id>16660243</id><snippet>self.data_source.ix[:, :cur_n, :]
</snippet></ROW><ROW><id>16660243</id><snippet>self.data_source.ix[:, indices[first_n:cur_n + 1], :]
</snippet></ROW><ROW><id>16660243</id><snippet>In [105]: import pandas as pd    
In [106]: import numpy as np
In [107]: wp = pd.Panel(np.random.randn(2, 1000, 4))

In [108]: indices = wp.major_axis

In [109]: %timeit wp.ix[:, :499, :]
10000 loops, best of 3: 65.2 us per loop

In [110]: %timeit wp.ix[:, indices[0:500], :]
1000 loops, best of 3: 221 us per loop

In [114]: np.allclose(wp.ix[:, :499, :].values, wp.ix[:, indices[0:500], :].values)
Out[114]: True
</snippet></ROW><ROW><id>16660243</id><snippet>self.data_source.ix[:, :cur_n, :]</snippet></ROW><ROW><id>16660243</id><snippet>indices[first_n:cur_n + 1]</snippet></ROW><ROW><id>16660243</id><snippet>In [131]: wpt = wp.transpose(1,0,2)

In [132]: %timeit wpt.ix[:499]
10000 loops, best of 3: 37.5 us per loop

In [109]: %timeit wp.ix[:, :499, :]
10000 loops, best of 3: 65.2 us per loop
</snippet></ROW><ROW><id>16660288</id><snippet>return expression</snippet></ROW><ROW><id>16660288</id><snippet>return some_function()
</snippet></ROW><ROW><id>16660288</id><snippet>return</snippet></ROW><ROW><id>16660288</id><snippet>some_function(return)
</snippet></ROW><ROW><id>16660288</id><snippet>return</snippet></ROW><ROW><id>16660303</id><snippet>|</snippet></ROW><ROW><id>16660303</id><snippet>r"(?:Who|What) is the (.+) of (.+)[?]"</snippet></ROW><ROW><id>16660303</id><snippet>&gt;&gt;&gt; r = r"(?:Who|What) is the (?P&lt;RelationVar&gt;.+) of (?P&lt;ConceptVar&gt;.+)[?]"
&gt;&gt;&gt; l = ['Who is the director of The Dark Knight?', 'What is the capital of China?', 'Who is the president of USA?']
&gt;&gt;&gt; [re.match(r, i).groupdict() for i in l]
[{'RelationVar': 'director', 'ConceptVar': 'The Dark Knight'}, {'RelationVar': 'capital', 'ConceptVar': 'China'}, {'RelationVar': 'president', 'ConceptVar': 'USA'}]
</snippet></ROW><ROW><id>16660303</id><snippet>(?:Who|What)</snippet></ROW><ROW><id>16660303</id><snippet>(Who|What)</snippet></ROW><ROW><id>16660303</id><snippet>&gt;&gt;&gt; m = re.match(r, "What is the capital of China?")
&gt;&gt;&gt; d = m.groupdict()
&gt;&gt;&gt; relation_var = d["RelationVar"]
&gt;&gt;&gt; concept_var = d["ConceptVar"]
&gt;&gt;&gt; relation_var
'capital'
&gt;&gt;&gt; concept_var
'China'
</snippet></ROW><ROW><id>16660372</id><snippet>loadtxt</snippet></ROW><ROW><id>16660372</id><snippet>parse_pair</snippet></ROW><ROW><id>16660372</id><snippet>(1.2,0.16)</snippet></ROW><ROW><id>16660372</id><snippet>1.20+0.16j</snippet></ROW><ROW><id>16660372</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; import numpy as np

&gt;&gt;&gt; pair = re.compile(r'\(([^,\)]+),([^,\)]+)\)')
&gt;&gt;&gt; def parse_pair(s):
...    return complex(*map(float, pair.match(s).groups()))

&gt;&gt;&gt; s = '''1 (1.2,0.16) (2.8,1.1)
2 (2.85,6.9) (5.8,2.2)'''
&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; f = StringIO(s)

&gt;&gt;&gt; np.loadtxt(f, delimiter=' ', dtype=np.complex,
...            converters={1: parse_pair, 2: parse_pair})
array([[ 1.00+0.j  ,  1.20+0.16j,  2.80+1.1j ],
       [ 2.00+0.j  ,  2.85+6.9j ,  5.80+2.2j ]])
</snippet></ROW><ROW><id>16660372</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; f.seek(0)
&gt;&gt;&gt; pd.read_csv(f, delimiter=' ', index_col=0, names=['a', 'b'],
...             converters={1: parse_pair, 2: parse_pair})
             a           b
1  (1.2+0.16j)  (2.8+1.1j)
2  (2.85+6.9j)  (5.8+2.2j)
</snippet></ROW><ROW><id>16660466</id><snippet>Packages/User/SublimeLinter.sublime-settings</snippet></ROW><ROW><id>16660466</id><snippet>{
    "pep8": false,
    "pep8_ignore": 
    [
        "W191"
    ]
}
</snippet></ROW><ROW><id>16660690</id><snippet>popped</snippet></ROW><ROW><id>16660690</id><snippet>v</snippet></ROW><ROW><id>16660690</id><snippet>&gt;&gt;&gt; tup1 = ('2011-04-05', 25.2390232323, 0.32093240923490, 25.239502352390)
&gt;&gt;&gt; r.lpush('9999', tup1)
&gt;&gt;&gt; v = r.lpop('9999')
&gt;&gt;&gt; test = eval(v)[0]
</snippet></ROW><ROW><id>16660690</id><snippet>eval</snippet></ROW><ROW><id>16660821</id><snippet>dbm</snippet></ROW><ROW><id>16660821</id><snippet>sqlite3</snippet></ROW><ROW><id>16660821</id><snippet>ndarray</snippet></ROW><ROW><id>16660821</id><snippet>list</snippet></ROW><ROW><id>16660944</id><snippet>def f(arg):
    [[a], [b]] = arg

    return a * b
</snippet></ROW><ROW><id>16660944</id><snippet>((x,), (y,)) = a
</snippet></ROW><ROW><id>16660944</id><snippet>return arg[0][0] * arg[1][0]
</snippet></ROW><ROW><id>16661171</id><snippet>RoamingTurtle</snippet></ROW><ROW><id>16661171</id><snippet>for i in children:
  i.forward()
  RoamingTurtles()
</snippet></ROW><ROW><id>16661171</id><snippet>for i in children:
  i.forward()
RoamingTurtles()
</snippet></ROW><ROW><id>16661232</id><snippet>ax.plot</snippet></ROW><ROW><id>16661232</id><snippet>plot_surface</snippet></ROW><ROW><id>16661232</id><snippet>x</snippet></ROW><ROW><id>16661232</id><snippet>x</snippet></ROW><ROW><id>16661232</id><snippet>t</snippet></ROW><ROW><id>16661232</id><snippet>x = x.reshape((-1, 701))
t = t.reshape((-1, 701))
u = u.reshape((-1, 701))
</snippet></ROW><ROW><id>16661232</id><snippet>ax.plot_surface(x, t, u, cmap=pylab.get_cmap('jet'))
</snippet></ROW><ROW><id>16661406</id><snippet>import numpy as np
from scipy.sparse import csr_matrix

x = np.arange(5)+1

y = [1, 0, 0, 1, 2]
y = csr_matrix(y)

x2 = 1.0 / np.matrix(x)

z = y.multiply(x2)
</snippet></ROW><ROW><id>16661406</id><snippet>&gt;&gt;&gt; z
matrix([[ 1.  ,  0.  ,  0.  ,  0.25,  0.4 ]])
</snippet></ROW><ROW><id>16661427</id><snippet>GITHUB_URL</snippet></ROW><ROW><id>16661427</id><snippet>https://api.github.com/user/keys</snippet></ROW><ROW><id>16661427</id><snippet>abcd</snippet></ROW><ROW><id>16661427</id><snippet>from github3 import login

g = login('abcd', password)
with open('~/.ssh/temp.k.pub', 'r') as fd:
    key = g.create_key('abcd', fd)

print("Created {0}".format(key.title))
</snippet></ROW><ROW><id>16661815</id><snippet>plt.close()</snippet></ROW><ROW><id>16661815</id><snippet>plt.clf()</snippet></ROW><ROW><id>16661815</id><snippet>plt.clf()</snippet></ROW><ROW><id>16661815</id><snippet>plot</snippet></ROW><ROW><id>16661815</id><snippet>.set_data</snippet></ROW><ROW><id>16661953</id><snippet>#</snippet></ROW><ROW><id>16661953</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.loadtxt('/tmp/sample.txt', dtype=str, delimiter='##', comments=None)
array(['826', '25733', 'Emanuele Buratti', ' ', 'Mammalian cell expression'], 
      dtype='|S25')
</snippet></ROW><ROW><id>16661953</id><snippet>dtype=object</snippet></ROW><ROW><id>16661953</id><snippet>csv</snippet></ROW><ROW><id>16662216</id><snippet>Fraction</snippet></ROW><ROW><id>16662216</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; Fraction(-8, 10) * 3 + Fraction(6, 10) * 4
Fraction(0, 1)
</snippet></ROW><ROW><id>16662216</id><snippet>Decimal</snippet></ROW><ROW><id>16662216</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal('-0.8') * 3 + Decimal('0.6') * 4
Decimal('0.0')
</snippet></ROW><ROW><id>16662216</id><snippet>String</snippet></ROW><ROW><id>16662791</id><snippet>int("030")</snippet></ROW><ROW><id>16662791</id><snippet>int("30")</snippet></ROW><ROW><id>16662791</id><snippet>0</snippet></ROW><ROW><id>16662791</id><snippet>0</snippet></ROW><ROW><id>16662791</id><snippet>int()</snippet></ROW><ROW><id>16662791</id><snippet>&gt;&gt;&gt; "{0:03d}".format(30)
'030'
</snippet></ROW><ROW><id>16662791</id><snippet>int</snippet></ROW><ROW><id>16662791</id><snippet>&gt;&gt;&gt; [(value, int(value)) for value in values]
[('030', 30), ('031', 31), ('031', 31), ('031', 31), ('030', 30), ('031', 31), ('031', 31), ('032', 32), ('031', 31), ('032', 32)]
</snippet></ROW><ROW><id>16662791</id><snippet>&gt;&gt;&gt; current = ("233", "199", "016")
&gt;&gt;&gt; modifier = "031"
&gt;&gt;&gt; ["".join(part) for part in zip(*list(zip(*current))[:-1] + [modifier])]
['230', '193', '011']
</snippet></ROW><ROW><id>16662791</id><snippet>zip()</snippet></ROW><ROW><id>16662791</id><snippet>list(zip(*current))</snippet></ROW><ROW><id>16662791</id><snippet>[('2', '1', '0'), ('3', '9', '1'), ('3', '9', '6')]</snippet></ROW><ROW><id>16662791</id><snippet>zip()</snippet></ROW><ROW><id>16662791</id><snippet>zip()</snippet></ROW><ROW><id>16662791</id><snippet>list()</snippet></ROW><ROW><id>16662954</id><snippet>random.shuffle()</snippet></ROW><ROW><id>16662954</id><snippet>TypeError: int() argument must be a string or a number, not 'NoneType'
</snippet></ROW><ROW><id>16662954</id><snippet>random.shuffle(die1)</snippet></ROW><ROW><id>16662954</id><snippet>random.choice()</snippet></ROW><ROW><id>16662954</id><snippet>dieFace1 = random.choice(die1)
</snippet></ROW><ROW><id>16663019</id><snippet>def funcOne():
    a, b, some_list = funcTwo()
    print a, b, some_list

def funcTwo():
    ...
    some_list = [...] 
    return x, y, some_list
</snippet></ROW><ROW><id>16663019</id><snippet>def funcOne():
    a, b, = funcTwo()
    print a, b

def funcTwo():
    ...
    some_list = [x, y] 
    return some_list
</snippet></ROW><ROW><id>16663019</id><snippet>def funcOne():
    a, b, c, d = funcTwo()
    print a, b, c, d

def funcTwo():
    ...
    some_list = [z, w] 
    return [x, y] + some_list
</snippet></ROW><ROW><id>16663444</id><snippet>print "passed"
</snippet></ROW><ROW><id>16663643</id><snippet>__mro__</snippet></ROW><ROW><id>16663643</id><snippet>mro()</snippet></ROW><ROW><id>16663643</id><snippet>__mro__</snippet></ROW><ROW><id>16663887</id><snippet>temp = ncfile.variables['tsurf'][:,:]
prec = ncfile.variables['prec'][:,:]
</snippet></ROW><ROW><id>16664310</id><snippet>set_cli_write_func(self, func)</snippet></ROW><ROW><id>16664310</id><snippet>def lpr(self, message): 
    """Print a message to the screen.

    :type message: String
    :param message: The message string.
    """
    self.terminal.nextLine()
    self.terminal.write(_format_message(message))
    self.terminal.nextLine()
    self.drawInputLine()
</snippet></ROW><ROW><id>16664790</id><snippet>list.extend</snippet></ROW><ROW><id>16664790</id><snippet>if (len(left) &gt; 0):
    results.extend(left)
if (len(right) &gt; 0):
    results.extend(right)
</snippet></ROW><ROW><id>16664790</id><snippet>list.append</snippet></ROW><ROW><id>16664790</id><snippet>list.extend</snippet></ROW><ROW><id>16664790</id><snippet>&gt;&gt;&gt; lis = [1, 2 , 3]
&gt;&gt;&gt; lis.append( [4, 5] )  #appends the whole object at the end of the list
&gt;&gt;&gt; lis
[1, 2, 3, [4, 5]]
&gt;&gt;&gt; lis.extend( [6, 7] )  #appends individual items from the iterable
&gt;&gt;&gt; lis
[1, 2, 3, [4, 5], 6, 7]
</snippet></ROW><ROW><id>16664790</id><snippet>list.extend</snippet></ROW><ROW><id>16664790</id><snippet>&gt;&gt;&gt; print list.extend.__doc__
L.extend(iterable) -- extend list by appending elements from the iterable
</snippet></ROW><ROW><id>16664932</id><snippet>from itertools import chain, ifilterfalse
from collections import OrderedDict
def unique_everseen(iterable, key=None):
    "List unique elements, preserving order. Remember all elements ever seen."
    # unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D
    # unique_everseen('ABBCcAD', str.lower) --&gt; A B C D
    seen = set()
    seen_add = seen.add
    if key is None:
        for element in ifilterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
    else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element

d1 = OrderedDict([('a', '1'), ('b', '2'),('c', 4)])
d2 = OrderedDict([('c',3), ('e',5)])   #dict containing items to be added at the front
new_dic = OrderedDict((k, d2.get(k, d1.get(k)) ) for k in \
                                           unique_everseen(chain(d2,d1)))
print new_dic
</snippet></ROW><ROW><id>16664932</id><snippet>OrderedDict([('c', 3), ('e', 5), ('a', '1'), ('b', '2')])
</snippet></ROW><ROW><id>16665443</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(text)
for block in soup.find_all('div', class_="result-box", itemtype="http://schema.org/LocalBusiness"):
    print block.find('a', class_='url').string

    street = block.find('span', itemprop="streetAddress")
    if street:
        print street.string

    locality = block.find('span', itemprop="addressLocality")
    if locality:
        print locality.string

    # .. etc. ..
</snippet></ROW><ROW><id>16665597</id><snippet>import Tkinter as tk

root = tk.Tk()
mylist = ['a','b','c','d','e']

for i, x in enumerate(mylist):
    label = tk.Label(root, text="Label "+str(i))
    label.grid(row=i+1, column=1)
    label.bind("&lt;Enter&gt;", lambda e, x=x: e.widget.config(text=x))
    label.bind("&lt;Leave&gt;", lambda e, i=i: e.widget.config(text="Label "+str(i)))

root.mainloop()
</snippet></ROW><ROW><id>16665803</id><snippet>from glob import glob
from os import path

config_dir = '/etc/netctl'

profiles = dict((i, {'full_path': v, 'ESSID': None, 'matches': []}) for (i, v) in enumerate(glob(config_dir + '/*')) if path.isfile(v))

for K, V in profiles.items():
    with open(V['full_path']) as f:
        for line in f:
            if line.startswith('ESSID'):
                V['ESSID'] = line.split('=',1)[1].strip()
                break # no need to keep reading.
    for k, v in profiles.items():
        if K == k or k in V['matches'] or not v['ESSID']:
            continue
        if V['ESSID'] == v['ESSID']:
            V['matches'].append(k)
            v['matches'].append(K)

for k, v in profiles.items():
    print k, v
</snippet></ROW><ROW><id>16666043</id><snippet>.append</snippet></ROW><ROW><id>16666043</id><snippet>from itertools import chain
with open('file.txt') as f:
    lines = chain.from_iterable([l.replace(r'"','').rstrip('\n').split('\t',1) for l in f])
</snippet></ROW><ROW><id>16666043</id><snippet>&gt;&gt;&gt; 
['CARMILLA', '35', 'JONATHAN R', 'AA2', 'M', '3', 'EMMA', '350', 'OLD', 'AA']
</snippet></ROW><ROW><id>16666043</id><snippet>with open('file.txt') as f:
    lines = [l.replace(r'"','').rstrip('\n').split('\t',1) for l in f]
</snippet></ROW><ROW><id>16666043</id><snippet>import timeit
print("chain, list",timeit.timeit(r"""
with open('file.txt') as f:
    lines = chain.from_iterable([l.replace(r'"','').rstrip('\n').split('\t',1) for l in f])""",setup="from itertools import chain",number=1000))
print("flat       ",timeit.timeit(r"""
with open('file.txt') as f:
    lines = [l.replace(r'"','').rstrip('\n').split('\t',1) for l in f]""",setup="from itertools import chain",number=1000))
print("op's       ",timeit.timeit(r"""temp = []
fp = open('file.txt', "r")
for line in fp:
    temp.append(line.replace("\"","").rstrip("\n").split("\t"))
""",number=1000))
print("jamlyks    ",timeit.timeit(r"""
with open('file.txt', 'rb') as f:
    r = csv.reader(f, delimiter=' ', skipinitialspace=True)
    list(chain.from_iterable(r))""",setup="from itertools import chain; import csv",number=1000))
print("lennart    ",timeit.timeit(r"""
    list(csv.reader(open('file.txt'), delimiter='\t', quotechar='"'))""",setup="from itertools import chain; import csv",number=1000))
</snippet></ROW><ROW><id>16666043</id><snippet>C:\Users\Henry\Desktop&gt;k.py
('chain, list', 0.04725674146159321)
('my flat    ', 0.04629905135295972)
("op's       ", 0.04391255644624917)
('jamlyks    ', 0.048360870934994915)
('lennart    ', 0.04569112379085424)
</snippet></ROW><ROW><id>16666322</id><snippet>WsgiApplication</snippet></ROW><ROW><id>16666322</id><snippet>wsgi_app = WsgiApplication(...)
wsgi_app.doc.wsdl11.build_interface_document("http://example.com")
</snippet></ROW><ROW><id>16666322</id><snippet>TwistedWebResource</snippet></ROW><ROW><id>16666322</id><snippet>resource = TwistedWebResource(...)
resource.http_transport.doc.wsdl11.build_interface_document("http://example.com")
</snippet></ROW><ROW><id>16666507</id><snippet>chmod +r file.hdf</snippet></ROW><ROW><id>16667349</id><snippet>import urllib,MultipartPostHandler,urllib2,cookielib
cookies = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookies),MultipartPostHandler.MultipartPostHandler)
urllib2.install_opener(opener)
login = urllib.urlencode(dict(admin_user='admin',admin_pass='****'))
o=opener.open('http://some_domain_name.com/admin/index.php',login)
print o.read()
raw_params={"adtitle":"sample title",
        "area":"sample area",
        "addesc":"&lt;p&gt;sample post&lt;/p&gt;",
    "pic[0]":open("indian_eye.jpg", "rb"), #File Goes Here
    "pic[1]":open("nature.jpg", "rb"),
        "subcatid":"1",
    "do":"post",
        }
url="http://YOUR.php?cityid=15&amp;subcatid=1"
opener.open(url, raw_params)
</snippet></ROW><ROW><id>16667631</id><snippet>Toy.objects.filter(type__in=["Dog", "Cat"])
</snippet></ROW><ROW><id>16667631</id><snippet>Toy.objects.filter(type__in=["Strawberry", "Banana"])
</snippet></ROW><ROW><id>16667631</id><snippet>Toy.objects.filter(type__in=["Dog", "Cat", "Strawberry", "Banana"])
</snippet></ROW><ROW><id>16667631</id><snippet>{'Animal':[...], 'Fruit':[...]}</snippet></ROW><ROW><id>16667795</id><snippet>elif next == "taunt bear" and bear_moved:
</snippet></ROW><ROW><id>16667795</id><snippet>elif next == "taunt bear" and bear_moved and not bear_moved_again:
</snippet></ROW><ROW><id>16667795</id><snippet>elif next == "taunt bear" and bear_moved_again:
</snippet></ROW><ROW><id>16667795</id><snippet>elif next == "taunt bear" and bear_moved and bear_moved_again:
</snippet></ROW><ROW><id>16667922</id><snippet>self.videoframeRemote.setMinimumSize(640, 480)</snippet></ROW><ROW><id>16668085</id><snippet>reduce</snippet></ROW><ROW><id>16668085</id><snippet>reduce(lambda x, y: y(x), [a, b, c, d, e], initial_value)
</snippet></ROW><ROW><id>16668288</id><snippet>member</snippet></ROW><ROW><id>16668288</id><snippet>class Derived(Base):
    @property
    def member(self):
        print "intercepting getter"
        return self._member

    @member.setter
    def member(self, value):
        print "intercepting setter"
        self._member = value
</snippet></ROW><ROW><id>16668533</id><snippet>json.dumps</snippet></ROW><ROW><id>16668533</id><snippet>str</snippet></ROW><ROW><id>16668533</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps({'a':'b'})
'{"a": "b"}'
</snippet></ROW><ROW><id>16668533</id><snippet>json.dump</snippet></ROW><ROW><id>16668586</id><snippet>{id:"1",data:"bla",processing_due:"3198382"}</snippet></ROW><ROW><id>16668691</id><snippet>fetchone</snippet></ROW><ROW><id>16668691</id><snippet>.cursor()</snippet></ROW><ROW><id>16668691</id><snippet>from contextlib import closing
with closing(self.connectio.cursor()) as cur:
</snippet></ROW><ROW><id>16668691</id><snippet>with</snippet></ROW><ROW><id>16668691</id><snippet>cursor</snippet></ROW><ROW><id>16668691</id><snippet>cur = self.connection.cursor() 
cur.execute(query, parameters) 
result = cur.fetchone() 
cur.close() 
return result
</snippet></ROW><ROW><id>16668727</id><snippet>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; __builtin__.open
&lt;built-in function open&gt;
</snippet></ROW><ROW><id>16668727</id><snippet>&gt;&gt;&gt; import builtins
&gt;&gt;&gt; builtins.open
&lt;built-in function open&gt;
</snippet></ROW><ROW><id>16668727</id><snippet>__builtins__</snippet></ROW><ROW><id>16668727</id><snippet>__builtins__</snippet></ROW><ROW><id>16668727</id><snippet>builtins</snippet></ROW><ROW><id>16668727</id><snippet>__builtin__</snippet></ROW><ROW><id>16668765</id><snippet>Show</snippet></ROW><ROW><id>16668765</id><snippet>def main():

    ex = wx.App()
    frame = OrderMain(None)
    ex.SetTopWindow(frame)
    frame.Show()
    ex.MainLoop()  
</snippet></ROW><ROW><id>16668795</id><snippet>hdel(name, *keys)</snippet></ROW><ROW><id>16668795</id><snippet>data = redis_connection.hdel(key, *list1)
</snippet></ROW><ROW><id>16668795</id><snippet>dict1.keys()</snippet></ROW><ROW><id>16668795</id><snippet>key = "somerediskey"
data = redis_connection.hdel(key, *dict1.keys())
</snippet></ROW><ROW><id>16669043</id><snippet>View</snippet></ROW><ROW><id>16669043</id><snippet>get()</snippet></ROW><ROW><id>16669043</id><snippet>post()</snippet></ROW><ROW><id>16669043</id><snippet>put()</snippet></ROW><ROW><id>16669043</id><snippet>from django.http import HttpResponse
from django.views.generic import View

class MyView(View):
    def get(self, request, *args, **kwargs):
        return HttpResponse('This is GET request')

    def post(self, request, *args, **kwargs):
        return HttpResponse('This is POST request')
</snippet></ROW><ROW><id>16669043</id><snippet>dispatch()</snippet></ROW><ROW><id>16669043</id><snippet>View</snippet></ROW><ROW><id>16669043</id><snippet>urls.py</snippet></ROW><ROW><id>16669043</id><snippet>from django.conf.urls import patterns, url

from myapp.views import MyView

urlpatterns = patterns('',
    url(r'^mine/$', MyView.as_view(), name='my-view'),
)
</snippet></ROW><ROW><id>16669285</id><snippet>class ProbSVC(SVC):
    def predict(self, X):
        return super(ProbSVC, self).predict_proba(X)
</snippet></ROW><ROW><id>16669582</id><snippet>class MySettingsDict(dict):

    def __getitem__(self, item):
        function, arg = dict.__getitem__(self, item)
        return function(arg)


def expensive_to_compute(arg):
    return arg * 3
</snippet></ROW><ROW><id>16669582</id><snippet>&gt;&gt;&gt; settings = MySettingsDict({
'expensive1': (expensive_to_compute, 1),
'expensive2': (expensive_to_compute, 2),
})
&gt;&gt;&gt; settings['expensive1']
3
&gt;&gt;&gt; settings['expensive2']
6
</snippet></ROW><ROW><id>16669582</id><snippet>expensive_to_compute</snippet></ROW><ROW><id>16669582</id><snippet>class MySettingsDict(dict):

    def __getitem__(self, item):
        value = dict.__getitem__(self, item)
        if not isinstance(value, int):
            function, arg = value
            value = function(arg)
            dict.__setitem__(self, item, value)
        return value
</snippet></ROW><ROW><id>16669582</id><snippet>&gt;&gt;&gt; settings.values()
dict_values([(&lt;function expensive_to_compute at 0x9b0a62c&gt;, 2),
(&lt;function expensive_to_compute at 0x9b0a62c&gt;, 1)])
&gt;&gt;&gt; settings['expensive1']
3
&gt;&gt;&gt; settings.values()
dict_values([(&lt;function expensive_to_compute at 0x9b0a62c&gt;, 2), 3])
</snippet></ROW><ROW><id>16669582</id><snippet>dict</snippet></ROW><ROW><id>16669755</id><snippet>import wx


class Frame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, 'Parent')
        panel = wx.Panel(self, -1)

        sizer = wx.BoxSizer(wx.VERTICAL)
        button = wx.Button(panel, -1, 'Open Child1')
        button2 = wx.Button(panel, -1, 'Open Child2')

        sizer.Add(button, 0, wx.CENTER | wx.ALL, 5)
        sizer.Add(button2, 0, wx.CENTER | wx.ALL, 5)

        panel.SetSizer(sizer)

        self.Bind(wx.EVT_BUTTON, self.onButton, button)
        self.Bind(wx.EVT_BUTTON, self.onButton2, button2)

    def onButton(self, e):
        try:
            self.ChildF.Show()
        except:
            self.ChildF = ChildFrame1()
            self.ChildF.Show()

        self.ChildF.SetFocus()

    def onButton2(self, e):
        try:
            self.ChildF2.Show()
        except:
            self.ChildF2 = ChildFrame2()
            self.ChildF2.Show()

        self.ChildF2.SetFocus()


class ChildFrame1(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, wx.GetApp().TopWindow, wx.ID_ANY, 'Child1')
        panel = wx.Panel(self, -1)

        sizer = wx.BoxSizer(wx.VERTICAL)
        button = wx.Button(panel, -1, 'Open Child2')
        sizer.Add(button, 0, wx.CENTER | wx.ALL, 5)

        panel.SetSizer(sizer)

        self.Bind(wx.EVT_BUTTON, self.GetParent().onButton2, button)


class ChildFrame2(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, wx.GetApp().TopWindow, wx.ID_ANY, 'Child2')

if __name__ == '__main__':
    app = wx.App()
    frame = Frame().Show()
    app.MainLoop()
</snippet></ROW><ROW><id>16669951</id><snippet>CheckListEditor</snippet></ROW><ROW><id>16669951</id><snippet>values</snippet></ROW><ROW><id>16669951</id><snippet>from traits.api import HasTraits, Instance, Str, List
from traitsui.api import View, Item, CheckListEditor

class Bclass(HasTraits):
    options = List(['one', 'two'])

class Aclass(HasTraits):
    bclass = Instance(Bclass)
    abc = Str

    traits_view = View(
        Item(name='abc', editor=CheckListEditor(name='object.bclass.options')),
    )

b = Bclass()
a = Aclass(bclass=b)
a.configure_traits()
</snippet></ROW><ROW><id>16669951</id><snippet>'object.bclass.options'</snippet></ROW><ROW><id>16669951</id><snippet>options</snippet></ROW><ROW><id>16669951</id><snippet>bclass</snippet></ROW><ROW><id>16669951</id><snippet>object</snippet></ROW><ROW><id>16669951</id><snippet>Bclass</snippet></ROW><ROW><id>16669951</id><snippet>HasTraits</snippet></ROW><ROW><id>16669951</id><snippet>options</snippet></ROW><ROW><id>16669951</id><snippet>Bclass</snippet></ROW><ROW><id>16669951</id><snippet>HasTraits</snippet></ROW><ROW><id>16669951</id><snippet>from traits.api import HasTraits, Instance, Str
from traitsui.api import View, Item, CheckListEditor

class Bclass(object):
    options = {'one': 1, 'two': 2}

class Aclass(HasTraits):
    bclass = Instance(Bclass)
    abc = Str

    def default_traits_view(self):
        options = self.bclass.options.keys()
        view = View(
            Item(name='abc', editor=CheckListEditor(values=options)),
        )
        return view
</snippet></ROW><ROW><id>16669951</id><snippet>default_traits_view</snippet></ROW><ROW><id>16669951</id><snippet>Bclass</snippet></ROW><ROW><id>16669951</id><snippet>HasTraits</snippet></ROW><ROW><id>16669951</id><snippet>from traits.api import HasTraits, Instance, Str, Property, Dict
from traitsui.api import View, Item, CheckListEditor

class Bclass(HasTraits):
    options = Dict({'one': 1, 'two': 2})

class Aclass(HasTraits):
    bclass = Instance(Bclass)
    abc = Str

    options = Property(Str, depends_on='bclass.options')
    def _get_options(self):
        return self.bclass.options.keys()

    traits_view = View(
        Item(name='abc', editor=CheckListEditor(name='options')),
    )
</snippet></ROW><ROW><id>16669951</id><snippet>options</snippet></ROW><ROW><id>16670129</id><snippet>exec</snippet></ROW><ROW><id>16670129</id><snippet>&gt;&gt;&gt; test = ('print( "It works!" )' )
&gt;&gt;&gt; exec test
It works!
</snippet></ROW><ROW><id>16670222</id><snippet>response.body</snippet></ROW><ROW><id>16670222</id><snippet>from tornado import ioloop, httpclient


def get_file(url):
    http_client = httpclient.AsyncHTTPClient()
    http_client.fetch(url, callback=done)


def done(response):
    with open("my_favorite_directory/my_favorite_filename.pdf", "w") as f:
        f.write(response.body)
    print "DONE"


get_file("http://samplepdf.com/sample.pdf")
ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>16670460</id><snippet>@unittest.skip("showing class skipping")
class MySkippedTestCase(unittest.TestCase):
    def test_not_run(self):
        pass
</snippet></ROW><ROW><id>16670617</id><snippet>httplib2</snippet></ROW><ROW><id>16670617</id><snippet>pip install httplib2</snippet></ROW><ROW><id>16670674</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; s = '04/21/2013'
&gt;&gt;&gt; d = datetime.datetime.strptime(s, '%m/%d/%Y') + datetime.timedelta(days=1)
&gt;&gt;&gt; print d.strftime('%m/%d/%Y')
04/22/2013
</snippet></ROW><ROW><id>16670681</id><snippet>class SkyQuery(object):
    _unique_fields = ["parameter",
                      "ensemble",
                      "forecast",
                      "station"]
    _field_tag_values = [field + "_value" for field in _unique_fields]
</snippet></ROW><ROW><id>16670681</id><snippet>x</snippet></ROW><ROW><id>16670681</id><snippet>field</snippet></ROW><ROW><id>16670681</id><snippet>x</snippet></ROW><ROW><id>16670681</id><snippet>x</snippet></ROW><ROW><id>16670681</id><snippet>del(field)</snippet></ROW><ROW><id>16670681</id><snippet>del()</snippet></ROW><ROW><id>16670681</id><snippet>list(field + "_value" for field in _unique_fields)</snippet></ROW><ROW><id>16670783</id><snippet>sum</snippet></ROW><ROW><id>16670783</id><snippet>grades_average</snippet></ROW><ROW><id>16670783</id><snippet>def grades_average(my_list):
    sum_of_grades = sum(my_list)
    average = sum_of_grades / len(my_list)
    return average
</snippet></ROW><ROW><id>16670783</id><snippet>numpy.mean()</snippet></ROW><ROW><id>16670783</id><snippet>numpy.std()</snippet></ROW><ROW><id>16670783</id><snippet>grades_variance</snippet></ROW><ROW><id>16670783</id><snippet>for i in range(0, len(my_list)):
</snippet></ROW><ROW><id>16670840</id><snippet>for vid, name in zip(ids, names):
        vid = vid['href'].split('=')
        vid = vid[1]

        name = name.contents[0]
        name = name.encode('iso-8859-1')

        data_content = (vid, name)
        cursor.execute(data_query, data_content)
        emp_no = cursor.lastrowid
</snippet></ROW><ROW><id>16671131</id><snippet>with open('testFile.txt') as fin:
    data = [line.split() for line in fin]
</snippet></ROW><ROW><id>16671131</id><snippet>for line in data:
    print line[2] #prints the values in the third column
</snippet></ROW><ROW><id>16671131</id><snippet>with open('testFile_out.txt','w') as fout:
    for line in data:
        fout.write(' '.join(line)+'\n') 
</snippet></ROW><ROW><id>16671345</id><snippet>mymodels = MyModel.objects.filter(status=1)
objs = [obj for obj in mymodels] # save the objects you are about to update
mymodels.update(status=4)
print(objs)
</snippet></ROW><ROW><id>16671593</id><snippet>allthings = Thing.objects.filter(**kwargs)

if 'name__startswith' in kwargs:
  allthings = allthings.distinct('id')   
</snippet></ROW><ROW><id>16671593</id><snippet>&gt;&gt;&gt; q = Entry.objects.filter(headline__startswith="What")
&gt;&gt;&gt; q = q.filter(pub_date__lte=datetime.date.today())
&gt;&gt;&gt; q = q.exclude(body_text__icontains="food")
&gt;&gt;&gt; print(q)
</snippet></ROW><ROW><id>16671603</id><snippet>import subprocess
p = subprocess.Popen(['lessc', '-x', '-'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
output = p.communicate(less_content)
</snippet></ROW><ROW><id>16671616</id><snippet>boost/python/args.hpp</snippet></ROW><ROW><id>16671616</id><snippet>arg</snippet></ROW><ROW><id>16671616</id><snippet>myFunction</snippet></ROW><ROW><id>16671616</id><snippet>MyClass</snippet></ROW><ROW><id>16671616</id><snippet>my_function</snippet></ROW><ROW><id>16671616</id><snippet>a</snippet></ROW><ROW><id>16671616</id><snippet>b</snippet></ROW><ROW><id>16671616</id><snippet>c</snippet></ROW><ROW><id>16671616</id><snippet>c</snippet></ROW><ROW><id>16671616</id><snippet>0</snippet></ROW><ROW><id>16671616</id><snippet>BOOST_PYTHON_MODULE(example)
{
  namespace python = boost::python;
  python::class_&lt;MyClass&gt;("MyClass")
    .def("my_function", &amp;MyClass::myFunction,
         (python::arg("a"), "b", python::arg("c")=0))
    ;
}
</snippet></ROW><ROW><id>16671616</id><snippet>#include &lt;boost/python.hpp&gt;

class MyClass
{
public:
  double myFunction(int a, int b, int c)
  {
    return a + b + c;
  }
};

BOOST_PYTHON_MODULE(example)
{
  namespace python = boost::python;
  python::class_&lt;MyClass&gt;("MyClass")
    .def("my_function", &amp;MyClass::myFunction,
         (python::arg("a"), "b", python::arg("c")=0))
    ;
}
</snippet></ROW><ROW><id>16671616</id><snippet>import unittest

from example import MyClass


class MyClassTest(unittest.TestCase):

    def setUp(self):
        # Boost.Python does not directly expose its
        # Boost.Python.ArgumentError (derives from TypeError).  Force
        # the exception and extract its type for future checks.
        try:
            MyClass(None)
        except Exception as e:
            self.argument_error = e.__class__

    def test_args(self):
        my_class = MyClass()

        # Raises exception
        self.assertRaises(self.argument_error,
                          my_class.my_function, (1,))

        # So that a = 2, b = 3 and c defaults to 0
        self.assertEqual(5, my_class.my_function(2, 3))

        # As above, but now c = 1
        self.assertEqual(6, my_class.my_function(2, 3, 1))

        # Raises exception
        self.assertRaises(self.argument_error,
                          my_class.my_function, (2, 3, 1, 3))

        # So a = 3, b = 1 and c = 2
        self.assertEqual(6, my_class.my_function(3, 1, c = 2))

        # Speaks for itself
        self.assertEqual(7, my_class.my_function(a = 2, b = 2, c = 3))

        # Raises exception
        self.assertRaises(self.argument_error,
                          my_class.my_function, {'b' : 2, 'c' : 1})


if '__main__' == __name__:
    unittest.main()
</snippet></ROW><ROW><id>16671814</id><snippet>Request</snippet></ROW><ROW><id>16672059</id><snippet>button_press_event</snippet></ROW><ROW><id>16672059</id><snippet>button_release_event</snippet></ROW><ROW><id>16672059</id><snippet>dblclick</snippet></ROW><ROW><id>16672059</id><snippet>import matplotlib.pyplot as plt

def handle_mouse_press( event ):
    if event.dblclick:
        print "Can haz dblclikz???"

fig = plt.figure()
fig.add_subplot(111)
fig.canvas.mpl_connect('button_press_event', handle_mouse_press)

plt.show()
</snippet></ROW><ROW><id>16672250</id><snippet>500/1</snippet></ROW><ROW><id>16672250</id><snippet>page=1</snippet></ROW><ROW><id>16672250</id><snippet>page = 2
url = 'http:/ ... st/500/{0}?sortField=oi ... page={0}&amp;clear ...'.format(page)
</snippet></ROW><ROW><id>16672250</id><snippet>from pyquery import PyQuery as pq
d = pq(html)
selector = '#cmeProductSlatePaginiationTop ul'
n_pages = len(d(selector))-2
</snippet></ROW><ROW><id>16672311</id><snippet>Manager.raw()</snippet></ROW><ROW><id>16672311</id><snippet>ORM</snippet></ROW><ROW><id>16672311</id><snippet>cursor.execute</snippet></ROW><ROW><id>16672514</id><snippet>parse_dates</snippet></ROW><ROW><id>16672514</id><snippet>read_csv</snippet></ROW><ROW><id>16672514</id><snippet>dayfirst=True</snippet></ROW><ROW><id>16672514</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; s = StringIO("""date,value
... 12/01/2012,1
... 12/01/2012,2
... 30/01/2012,3""")
&gt;&gt;&gt; 
&gt;&gt;&gt; pd.read_csv(s, index_col=0, parse_dates=True, dayfirst=True)
            value
date             
2012-01-12      1
2012-01-12      2
2012-01-30      3
</snippet></ROW><ROW><id>16672514</id><snippet>&gt;&gt;&gt; s = StringIO("""date
... 12/01/2012
... 12/01/2012
... 30/01/2012""")
&gt;&gt;&gt; 
&gt;&gt;&gt; pd.read_csv(s, parse_dates=[0], dayfirst=True)
                 date
0 2012-01-12 00:00:00
1 2012-01-12 00:00:00
2 2012-01-30 00:00:00
</snippet></ROW><ROW><id>16672613</id><snippet>for small_entry in small_list:
    for big_entry in big_list:
        if small_entry[1] == big_entry[1] :
            print(small_entry[0] + "matches" +  big_entry[0])
</snippet></ROW><ROW><id>16672970</id><snippet>class Cursor(object):
    def __init__(self, ax, x, y, name):
        self.ax = ax
        self.name = name
        plt.connect('motion_notify_event', self)

    def __call__(self, event):
        if event.inaxes is None:
            return
        ax = self.ax
        if ax != event.inaxes:
            inv = ax.transData.inverted()
            x, y = inv.transform(np.array((event.x, event.y)).reshape(1, 2)).ravel()
        elif ax == event.inaxes:
            x, y = event.xdata, event.ydata
        else:
            return
        logger.debug('{n}: ({x:0.2f}, {y:0.2f})'.format(n=self.name,x=x,y=y))
</snippet></ROW><ROW><id>16672970</id><snippet>transform.py</snippet></ROW><ROW><id>16672970</id><snippet>ndarray</snippet></ROW><ROW><id>16673091</id><snippet>from subprocess import check_output

with open("/home/user/file.in", "rb") as file:
    output = check_output(["/home/user/executable"], stdin=file)
</snippet></ROW><ROW><id>16673388</id><snippet>input_lists</snippet></ROW><ROW><id>16673388</id><snippet>dict[n]</snippet></ROW><ROW><id>16673388</id><snippet>input_lists = [[[68.0], [79.0], [6.0], [8.0], [61.0], [88.0], [59.0], [91.0]],
       [[10.0], [11.0], [9.0], [120.0], [92.0], [12.0], [8.0], [13.0]],
       [[17.0], [18.0], [13.0], [14.0], [12.0], [176.0], [120.0], [182.0]]]


lists = {i:[el[0] for el in v] for i, v in enumerate(input_lists, start=1)}
# {1: [68.0, 79.0, 6.0, 8.0, 61.0, 88.0, 59.0, 91.0], 2: [10.0, 11.0, 9.0, 120.0, 92.0, 12.0, 8.0, 13.0], 3: [17.0, 18.0, 13.0, 14.0, 12.0, 176.0, 120.0, 182.0]}
</snippet></ROW><ROW><id>16673872</id><snippet>inreader = [{'PERSON1': '1', 'PERSON2': '1', 'GENE': 'TEST1', 'PERSON4': '1', 'PERSON3': '1'}, {'PERSON1': '1', 'PERSON2': '0', 'GENE': 'TEST2', 'PERSON4': '0', 'PERSON3': '0'}, {'PERSON1': '1', 'PERSON2': '0', 'GENE': 'TEST3', 'PERSON4': '0', 'PERSON3': '1'}, {'PERSON1': '0', 'PERSON2': '0', 'GENE': 'TEST4', 'PERSON4': '0', 'PERSON3': '0'}, {'PERSON1': '-', 'PERSON2': '0', 'GENE': 'TEST5', 'PERSON4': '-', 'PERSON3': '0'}, {'PERSON1': '2', 'PERSON2': '1', 'GENE': 'TEST9', 'PERSON4': '2', 'PERSON3': '1'}]
result = []
for line in inreader:
    newline = dict([(k,v.replace('1', '0')) for k,v in line.items() ])
    result.append(newline)

print result
</snippet></ROW><ROW><id>16673872</id><snippet>[{'PERSON2': '0', 'PERSON3': '0', 'PERSON1': '0', 'PERSON4': '0', 'GENE': 'TEST0'}, {'PERSON2': '0', 'PERSON3': '0', 'PERSON1': '0', 'PERSON4': '0', 'GENE': 'TEST2'}, {'PERSON2': '0', 'PERSON3': '0', 'PERSON1': '0', 'PERSON4': '0', 'GENE': 'TEST3'}, {'PERSON2': '0', 'PERSON3': '0', 'PERSON1': '0', 'PERSON4': '0', 'GENE': 'TEST4'}, {'PERSON2': '0', 'PERSON3': '0', 'PERSON1': '-', 'PERSON4': '-', 'GENE': 'TEST5'}, {'PERSON2': '0', 'PERSON3': '0', 'PERSON1': '2', 'PERSON4': '2', 'GENE': 'TEST9'}]
</snippet></ROW><ROW><id>16673939</id><snippet>__builtins__.help</snippet></ROW><ROW><id>16673939</id><snippet>def partialhelper(object=None):
    if isinstance(object, functools.partial):
        return pydoc.help(object.func)
    else:
        # Preserve the ability to go into interactive help if user calls
        # help() with no arguments.
        if object is None:
            return pydoc.help()
        else:
            return pydoc.help(object)
</snippet></ROW><ROW><id>16673939</id><snippet>__builtins__.help = partialhelper
</snippet></ROW><ROW><id>16673939</id><snippet>__doc__</snippet></ROW><ROW><id>16673939</id><snippet>functools.partial</snippet></ROW><ROW><id>16673939</id><snippet>__doc__</snippet></ROW><ROW><id>16673939</id><snippet>__builtin__</snippet></ROW><ROW><id>16673939</id><snippet>site._Helper</snippet></ROW><ROW><id>16673939</id><snippet>IPython.embed</snippet></ROW><ROW><id>16673939</id><snippet>import site
site._Helper.__call__ = lambda self, *args, **kwargs: partialhelper(*args, **kwargs)
</snippet></ROW><ROW><id>16673949</id><snippet>myproject/myapp/middleware/globalrequestmiddleware.py
</snippet></ROW><ROW><id>16673949</id><snippet>import thread

class GlobalRequestMiddleware(object):
    _threadmap = {}

    @classmethod
    def get_current_request(cls):
        return cls._threadmap[thread.get_ident()]

    def process_request(self, request):
        self._threadmap[thread.get_ident()] = request

    def process_exception(self, request, exception):
        try:
            del self._threadmap[thread.get_ident()]
        except KeyError:
            pass

    def process_response(self, request, response):
        try:
            del self._threadmap[thread.get_ident()]
        except KeyError:
            pass
        return response
</snippet></ROW><ROW><id>16673949</id><snippet>settings.py</snippet></ROW><ROW><id>16673949</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>16673949</id><snippet>MIDDLEWARE_CLASSES = (
    'myproject.myapp.middleware.globalrequestmiddleware.GlobalRequestMiddleware',
    # ...
)
</snippet></ROW><ROW><id>16673949</id><snippet>from myproject.myapp.middleware.globalrequestmiddleware import GlobalRequestMiddleware

# Get the current request object for this thread
request = GlobalRequestMiddleware.get_current_request()

# Access some of its attributes
print 'The current value of session variable "foo" is "%s"' % request.SESSION['foo']
print 'The current user is "%s"' % request.user.username

# Add something to it, which we can use later on
request.some_new_attr = 'some_new_value'
</snippet></ROW><ROW><id>16674064</id><snippet>string.replace()</snippet></ROW><ROW><id>16674064</id><snippet>&gt;&gt;&gt; s = 'some \\\\ doubles'
&gt;&gt;&gt; print s
some \\ doubles
&gt;&gt;&gt; print s.replace('\\\\', '\\')
some \ doubles
</snippet></ROW><ROW><id>16674064</id><snippet>&gt;&gt;&gt; s = r'some \\ doubles'
&gt;&gt;&gt; print s
some \\ doubles
&gt;&gt;&gt; print s.replace('\\\\', '\\')
some \ doubles
</snippet></ROW><ROW><id>16674064</id><snippet>'</snippet></ROW><ROW><id>16674091</id><snippet>return a, b
</snippet></ROW><ROW><id>16674091</id><snippet>return (a, b)
</snippet></ROW><ROW><id>16674091</id><snippet>lambda a, b: (a, b) # here the return is implicit
</snippet></ROW><ROW><id>16674392</id><snippet>argv</snippet></ROW><ROW><id>16674392</id><snippet>argv[1]</snippet></ROW><ROW><id>16674392</id><snippet>import ctypes
from ctypes import wintypes

GetCommandLine = ctypes.windll.kernel32.GetCommandLineW
GetCommandLine.restype = wintypes.LPWSTR
GetCommandLine.argtypes = []

CommandLineToArgvW = ctypes.windll.shell32.CommandLineToArgvW
CommandLineToArgvW.restype = ctypes.POINTER(wintypes.LPWSTR)
CommandLineToArgvW.argtypes = [
    wintypes.LPCWSTR,  # lpCmdLine,
    ctypes.POINTER(ctypes.c_int),  # pNumArgs
]

if __name__ == '__main__':
    cmdline = GetCommandLine()
    argc = ctypes.c_int()
    argv = CommandLineToArgvW(cmdline, ctypes.byref(argc))
    argc = argc.value
    argv = argv[:argc]
    print(argv)
</snippet></ROW><ROW><id>16674404</id><snippet>void setup() {
 // open the serial port at 9600 bps:
 Serial.begin(9600);
 }
</snippet></ROW><ROW><id>16674404</id><snippet>&gt;&gt;&gt; ser = serial.Serial()
&gt;&gt;&gt; ser.baudrate = 9600         &lt;--same as the arduino void setup()
&gt;&gt;&gt; ser.port = 0                &lt;--Name of the virtual com port
&gt;&gt;&gt; ser.open
</snippet></ROW><ROW><id>16674495</id><snippet>else:
    self.bullets.remove(bullet)
    self.delete(bullet)
</snippet></ROW><ROW><id>16674877</id><snippet>select</snippet></ROW><ROW><id>16674877</id><snippet>select</snippet></ROW><ROW><id>16674877</id><snippet>insert</snippet></ROW><ROW><id>16674877</id><snippet>update</snippet></ROW><ROW><id>16674895</id><snippet>import re

string="""
####1
ttteest
####1
ttttteeeestt

####2

ttest
####2
"""

end='.*\n'
line=[]
for m in re.finditer(end, string):
    line.append(m.end())

pattern = '.*?####(.*?)####'
match=re.compile(pattern, re.MULTILINE|re.DOTALL)
for m in re.finditer(match, string):
    print 'lineno :%d, %s' %(next(i for i in range(len(line)) if line[i]&gt;m.start(1)), m.group(1))
</snippet></ROW><ROW><id>16675151</id><snippet>postbyid = ViewDefinition(‘application’,‘postbyid’, ‘function(doc) {if (doc.type==”posts”) {emit(doc.id, doc)};}’ , '_count')
</snippet></ROW><ROW><id>16675285</id><snippet>&gt;&gt;&gt; x = '''tail -n+2 ./*/*.tsv|cat|awk 'BEGIN{FS="\t"};{split($10,arr,"-")}{print arr[1]}'|sort|uniq -c'''
&gt;&gt;&gt; x
'tail -n+2 ./*/*.tsv|cat|awk \'BEGIN{FS="\t"};{split($10,arr,"-")}{print arr[1]}\'|sort|uniq -c'
</snippet></ROW><ROW><id>16675639</id><snippet>cell_list = worksheet.range('A1:A7')
cell_values = [1,2,3,4,5,6,7]

for i, val in enumerate(cell_values):  #gives us a tuple of an index and value
    cell_list[i].value = val    #use the index on cell_list and the val from cell_values

worksheet.update_cells(cell_list)
</snippet></ROW><ROW><id>16675662</id><snippet>main.py</snippet></ROW><ROW><id>16675662</id><snippet>import time
import othermodule

foo = othermodule.Foo()
while 1:
    foo.foo()
    time.sleep(5)
    reload(othermodule)
</snippet></ROW><ROW><id>16675662</id><snippet>othermodule.py</snippet></ROW><ROW><id>16675662</id><snippet>class Foo(object):
    def foo(self):
        print 'foo'
</snippet></ROW><ROW><id>16675662</id><snippet>othermodule.py</snippet></ROW><ROW><id>16675662</id><snippet>class Foo(object):
    def foo(self):
        print 'bar'
</snippet></ROW><ROW><id>16675662</id><snippet>main.py</snippet></ROW><ROW><id>16675662</id><snippet>foo</snippet></ROW><ROW><id>16675662</id><snippet>bar</snippet></ROW><ROW><id>16675662</id><snippet>foo</snippet></ROW><ROW><id>16675662</id><snippet>main.py</snippet></ROW><ROW><id>16675662</id><snippet>main.py</snippet></ROW><ROW><id>16675662</id><snippet>import time
import othermodule

while 1:
    foo = othermodule.Foo()
    foo.foo()
    time.sleep(5)
    reload(othermodule)
</snippet></ROW><ROW><id>16675662</id><snippet>reload()</snippet></ROW><ROW><id>16675791</id><snippet>main-content</snippet></ROW><ROW><id>16675791</id><snippet>import re
import urllib2
from bs4 import BeautifulSoup as soup


url = "http://www.cms.gov/apps/ama/license.asp?file=/McrPartBDrugAvgSalesPrice/downloads/Apr-13-ASP-Pricing-file.zip"
web_soup = soup(urllib2.urlopen(url))

# get main-content div
main_div = web_soup.find(name="div", attrs={'class': 'main-content'})
print main_div

# get form action
form = web_soup.find(name="form", attrs={'action': re.compile('.*\.zip.*')})
print form['action']
</snippet></ROW><ROW><id>16675799</id><snippet>view</snippet></ROW><ROW><id>16675799</id><snippet>regex</snippet></ROW><ROW><id>16675799</id><snippet>urls.py</snippet></ROW><ROW><id>16675799</id><snippet>urlpatterns = patterns('',
url(r'^$', views.index, name='index'),
url(r'^$', views.register, name='register'),
url(r'^$', views.projectz_save, name='project_save'),
)
</snippet></ROW><ROW><id>16675799</id><snippet>index</snippet></ROW><ROW><id>16675799</id><snippet>urlpatterns = patterns('',
url(r'^$', views.index, name='index'),
url(r'^register$', views.register, name='register'),
url(r'^save$', views.projectz_save, name='project_save'),
)
</snippet></ROW><ROW><id>16675799</id><snippet>projectz_save</snippet></ROW><ROW><id>16675799</id><snippet>views.py</snippet></ROW><ROW><id>16675799</id><snippet>action</snippet></ROW><ROW><id>16675819</id><snippet>n</snippet></ROW><ROW><id>16675819</id><snippet>def printName():
   print("Enter your name: ")
   n=input()
   if n=='Python':
     ...
</snippet></ROW><ROW><id>16675819</id><snippet>def printName():
       print("Enter your name: ")
       n=input()
       return n

n = printName()
# now you can use n
</snippet></ROW><ROW><id>16675902</id><snippet>sensurliste</snippet></ROW><ROW><id>16675902</id><snippet>word</snippet></ROW><ROW><id>16675902</id><snippet>t = t.replace(cenword,x);
</snippet></ROW><ROW><id>16675902</id><snippet>def censort(t,l):
    words = t.split()                       #split the words into a list
    for i in range(len(words)):             #for each word in the text
        if words[i] in l:                       #if it needs to be censoredx
            words[i] = "X"*len(words[i])            #replace it with X's
    t=words.join()                          #rejoin the list into a string
</snippet></ROW><ROW><id>16676168</id><snippet>print u'\u2713'
</snippet></ROW><ROW><id>16676236</id><snippet>class Person(object): 
    """Information about a single name"""
    def __init__(self,name): 
        self.name = name
        self.parent = None
        self.children = []

def search_people(people,name): 
    """Searches for a name in known people and returns the corresponding Person object or None if not found"""
    try: 
        return filter(lambda y: y.name == name,people)[0]
    except IndexError: 
        return None

def search_add_and_return(people,name): 
    """Search for a name in list of people. If not found add to people. Return the Person object in either case"""
    old_name = search_people(people,name)
    if old_name is None: 
        #First time entry for the name
        old_name = Person(name)
        people.append(old_name)
    return old_name

def read_file(file_name,people): 
    fp = open(file_name,'r')
    while True: 
        l = fp.readline()
        l.strip('\n').strip()
        if not l: 
            break
        names = l.split(':')
        mother = names[0].strip()
        children = [x.strip() for x in names[1].split(',')]
        old_mother = search_add_and_return(people,mother)
        #Now get the children objects
        child_objects = []
        for child in children: 
            old_child = search_add_and_return(people,child)
            child_objects.append(old_child)
        #All children have been gathered. Link them up
        #Set parent in child and add child to parent's 'children'
        old_mother.children.extend(child_objects)
        for c in child_objects: 
            c.parent = old_mother
    fp.close()


def main(): 
    file_name = 'try.txt'
    people = []
    read_file(file_name,people)

    #Now lets define the language and start a loop
    while True: 
        command = raw_input("Enter your command or 0 to quit\n")
        if command == '0': 
            break
        coms = command.split()
        if len(coms) &lt; 2: 
            print "Wrong Command"
            continue
        action = coms[0]
        param = coms[1]
        if action == "mother": 
            person = search_people(people,param)
            if person == None: 
                print "person not found"
                continue
            else: 
                if person.parent is None: 
                    print "mother not known"
                else: 
                    print person.parent.name
        elif action == "ancestors": 
            person = search_people(people,param)
            if person == None: 
                print "person not found"
                continue
            else: 
                ancestor_list = []
                #Need to keep looking up parent till we don't reach a dead end
                #And collect names of each ancestor
                while True: 
                    person = person.parent
                    if person is None: 
                        break
                    ancestor_list.append(person.name)
                if ancestor_list: 
                    print ",".join(ancestor_list)    
                else: 
                    print "No known ancestors"

if __name__ == '__main__': 
    main()
</snippet></ROW><ROW><id>16676236</id><snippet>Mother</snippet></ROW><ROW><id>16676236</id><snippet>list of children</snippet></ROW><ROW><id>16676236</id><snippet>relation_dict = {'Charlotte': ['Tim'], 'Sue': ['Chad', 'Brenda', 'Harris'], 'Alice': ['John', 'Dick', 'Harry'], 'Brenda': ['Freddy', 'Alice']}
</snippet></ROW><ROW><id>16676236</id><snippet>mother = None
for k,v in relation_dict.items(): 
    if name in v: 
        mother = k
        break
return mother
</snippet></ROW><ROW><id>16676236</id><snippet>ancestor_list = []
person = name
while True: 
    person = find_parent(relation_dict,person)
    if person == None: 
        #Top of the ancestor chain found
        break
    else: 
        ancestor_list.append(person)
</snippet></ROW><ROW><id>16676236</id><snippet>def read_file(file_name): 
    fp = open(file_name,'r')
    relations = []
    commands = []
    reading_relations = True
    for l in fp: 
        l = l.strip('\n')
        if not l: 
            reading_relations = False
            continue
        if reading_relations:     
            relations.append(l.strip())
        else: 
            commands.append(l.strip())
    fp.close()
    return relations,commands

def form_relation_dict(relations): 
    relation_dict = {}
    for l in relations: 
        names = l.split(':')
        mother = names[0].strip()
        children = [x.strip() for x in names[1].split(',')]
        existing_children = relation_dict.get(mother,[])
        existing_children.extend(children)
        relation_dict[mother] = existing_children
    return relation_dict

def search_name(relation_dict,name): 
    #Returns True if name occurs anywhere in relation_dict
    #Else return False
    for k,v in relation_dict.items(): 
        if name ==k or name in v: 
            return True
    return False

def find_parent(relation_dict,param): 
    #Finds the parent of 'param' in relation_dict
    #Returns None if no mother found
    #Returns mother name otherwise
    mother = None
    for k,v in relation_dict.items(): 
        if param in v: 
            mother = k
            break
    return mother

def process_commands(commands,relation_dict): 
    output = []
    for c in commands: 
        coms = c.split()
        if len(coms) &lt; 2: 
            output.append("Invalid Command")
            continue
        action = coms[0]
        param = coms[1]
        if action == "mother": 
            name_found = search_name(relation_dict,param)
            if not name_found: 
                output.append("person not found")
                continue
            else: 
                person = find_parent(relation_dict,param)
                if person is None: 
                    output.append("mother not known")
                else: 
                    output.append("mother - %s" %(person))
        elif action == "ancestors": 
            name_found = search_name(relation_dict,param)
            if not name_found: 
                output.append("person not found")
                continue
            else: 
                #Loop through to find the mother till dead - end (None) is not reached
                ancestor_list = []
                person = param
                while True: 
                    person = find_parent(relation_dict,person)
                    if person == None: 
                        #Top of the ancestor found
                        break
                    else: 
                        ancestor_list.append(person)
                if ancestor_list: 
                    output.append(",".join(ancestor_list))
                else: 
                    output.append("No known ancestors")
    return output

def main(): 
    file_name = 'try.txt'
    relations,commands = read_file(file_name)
    #Process Relqations to form a dictionary of the type {parent: [child1,child2,...]}
    relation_dict = form_relation_dict(relations)
    print relation_dict
    #Now process commands in the file
    output = process_commands(commands,relation_dict)
    print '\n'.join(output)


if __name__ == '__main__': 
    main()
</snippet></ROW><ROW><id>16676236</id><snippet>mother not known
Alice,Brenda,Sue
person not found
No known ancestors
</snippet></ROW><ROW><id>16676236</id><snippet>process_commands</snippet></ROW><ROW><id>16676236</id><snippet>def process_mother(relation_dict,name): 
    #Processes the mother command
    #Returns the ouput string
    output_str = ''
    name_found = search_name(relation_dict,name)
    if not name_found: 
        output_str = "person not found"
    else: 
        person = find_parent(relation_dict,name)
        if person is None: 
            output_str = "mother not known"
        else: 
            output_str = "mother - %s" %(person)
    return output_str

def process_ancestors(relation_dict,name): 
    output_str = ''
    name_found = search_name(relation_dict,name)
    if not name_found: 
        output_str = "person not found"
    else: 
        #Loop through to find the mother till dead - end (None) is not reached
        ancestor_list = []
        person = name
        while True: 
            person = find_parent(relation_dict,person)
            if person == None: 
                #Top of the ancestor found
                break
            else: 
                ancestor_list.append(person)
        if ancestor_list: 
            output_str = ",".join(ancestor_list)
        else: 
            output_str = "No known ancestors"
    return output_str

def process_commands(commands,relation_dict): 
    output = []
    for c in commands: 
        coms = c.split()
        if len(coms) &lt; 2: 
            output.append("Invalid Command")
            continue
        action = coms[0]
        param = coms[1]
        if action == "mother": 
            new_output = process_mother(relation_dict,param)
        elif action == "ancestors": 
            new_output = process_ancestors(relation_dict,param)
        if new_output: 
            output.append(new_output)    
    return output
</snippet></ROW><ROW><id>16676303</id><snippet>run</snippet></ROW><ROW><id>16676303</id><snippet>run</snippet></ROW><ROW><id>16676303</id><snippet>run(self):
    while True;
         doUsefulWork()
</snippet></ROW><ROW><id>16676303</id><snippet>run</snippet></ROW><ROW><id>16676303</id><snippet>queue.join()</snippet></ROW><ROW><id>16676303</id><snippet>run</snippet></ROW><ROW><id>16676446</id><snippet>db['a'] = {'alpha':'aaa'}
</snippet></ROW><ROW><id>16676446</id><snippet>db.__setitem__('a', {'alpha':'aaa'})
</snippet></ROW><ROW><id>16676446</id><snippet>db['a']['alpha'] = 'bbb'
</snippet></ROW><ROW><id>16676446</id><snippet>tmp = db.__getitem__('a') # except tmp is pushed on the stack
</snippet></ROW><ROW><id>16676446</id><snippet>tmp['alpha'] = 'bbb'
</snippet></ROW><ROW><id>16676546</id><snippet>QTableWidgetItem</snippet></ROW><ROW><id>16676546</id><snippet>row</snippet></ROW><ROW><id>16676570</id><snippet>ROOT_URLCONF</snippet></ROW><ROW><id>16676570</id><snippet>yourprojectname.urls</snippet></ROW><ROW><id>16676570</id><snippet>ROOT_URLCONF = 'yourprojectname.urls'
</snippet></ROW><ROW><id>16676806</id><snippet>DataFrame</snippet></ROW><ROW><id>16676806</id><snippet>import pandas as pd
my_file = 'file_name'
df = pd.read_csv(my_file)
</snippet></ROW><ROW><id>16676806</id><snippet>def one_percentage(data):
    #get total number of rows for calculating percentages
    size = len(data)
    #get type so only grabbing the correct rows
    x = data.columns[1]
    x = data[x].dtype
    #list of touples to hold amount of 1s and the column names
    ones = [(i,sum(data[i])) for i in data if data[i].dtype == x]
    my_dict = {}
    #create dictionary with column names and percent
    for x in ones:
        percent = x[1]/float(size)
        my_dict[x[0]] = percent
    return my_dict
</snippet></ROW><ROW><id>16676806</id><snippet>percentages = one_percentage(df)
column_name = 'any_column_name'
print percentages[column_name]
</snippet></ROW><ROW><id>16676806</id><snippet>columns = [name for name in percentages]
for name in columns:
    print str(percentages[name]) + "% of 1 in column " + name 
</snippet></ROW><ROW><id>16677072</id><snippet>import clr
clr.AddReference("Microsoft.Office.Interop.Excel")
import Microsoft.Office.Interop.Excel as Excel
excel = Excel.ApplicationClass()

wb = excel.Workbooks.Open('testFile.xlsx')
ws = wb.Worksheets['Sheet1']

address = ws.Cells(row, col).Hyperlinks.Item(1).Address
</snippet></ROW><ROW><id>16677201</id><snippet>d[dict_key]</snippet></ROW><ROW><id>16677201</id><snippet>d.get(dict_key, default)</snippet></ROW><ROW><id>16677201</id><snippet>jsonResponse=json.loads(decoded_response)
jsonData = jsonResponse["data"]
for item in jsonData:
    name = item.get("Name")
    campaignID = item.get("CampaignID")
</snippet></ROW><ROW><id>16677423</id><snippet>threading.Thread</snippet></ROW><ROW><id>16677423</id><snippet>list</snippet></ROW><ROW><id>16677423</id><snippet>def test_a_func(thread_state):
    # ...
    thread_state[0] = my_error_state
    # ...

def main_thread():
    test_states = [None]
    test_a = threading.Thread(target=test_a_func, args=(test_a_state,))
    test_a.start()
</snippet></ROW><ROW><id>16677423</id><snippet>Lock</snippet></ROW><ROW><id>16677423</id><snippet>Condition</snippet></ROW><ROW><id>16677423</id><snippet>main_thread</snippet></ROW><ROW><id>16677423</id><snippet>test_a</snippet></ROW><ROW><id>16677423</id><snippet>queue.Queue</snippet></ROW><ROW><id>16677423</id><snippet>os.pipe</snippet></ROW><ROW><id>16677423</id><snippet>test_a</snippet></ROW><ROW><id>16677423</id><snippet>test_b</snippet></ROW><ROW><id>16677423</id><snippet>try:
    with concurrent.futures.ThreadPoolExecutor(workers=2) as executor:
        tests = [executor.submit(job) for job in (test_a, test_b)]
        for test in concurrent.futures.as_completed(tests):
            result = test.result()
except Exception as e:
    # do stuff
</snippet></ROW><ROW><id>16677423</id><snippet>test_a</snippet></ROW><ROW><id>16677423</id><snippet>with</snippet></ROW><ROW><id>16677423</id><snippet>concurrent.futures</snippet></ROW><ROW><id>16677423</id><snippet>multiprocessing.dummy.Pool</snippet></ROW><ROW><id>16677423</id><snippet>map_async</snippet></ROW><ROW><id>16677423</id><snippet>AsyncResult</snippet></ROW><ROW><id>16677582</id><snippet>txBuff</snippet></ROW><ROW><id>16677582</id><snippet>def DPxWriteRam(address, int_list):
    int_size = ctypes.sizeof(ctypes.c_int)
    item_count = len(int_list)
    total_size = int_size * item_count
    packed_data = (ctypes.c_int * item_count)(*int_list)
    WriteRam(ctypes.c_uint(address), ctypes.c_uint(total_size), packed_data)

DPxWriteRam(whatever, [0, 1, 2, 3])
</snippet></ROW><ROW><id>16677582</id><snippet>WriteRam</snippet></ROW><ROW><id>16677582</id><snippet>memcpy()</snippet></ROW><ROW><id>16677582</id><snippet>import ctypes
libc = ctypes.CDLL('msvcrt.dll')

def DPxWriteRam(address, int_list):
    int_size = ctypes.sizeof(ctypes.c_int)
    item_count = len(int_list)
    total_size = int_size * item_count
    packed_data = (ctypes.c_int * item_count)(*int_list)
    libc.memcpy(address, packed_data, total_size)
</snippet></ROW><ROW><id>16677582</id><snippet>&gt;&gt;&gt; l = range(4)
&gt;&gt;&gt; p = libc.malloc(1000)
&gt;&gt;&gt; DPxWriteRam(p, l)
&gt;&gt;&gt; s = ' ' * 16
&gt;&gt;&gt; libc.memcpy(s, p, 16)
&gt;&gt;&gt; print repr(s)
'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00'
</snippet></ROW><ROW><id>16677588</id><snippet>repr</snippet></ROW><ROW><id>16677588</id><snippet>pytz</snippet></ROW><ROW><id>16677588</id><snippet>print</snippet></ROW><ROW><id>16677588</id><snippet>&gt;&gt;&gt; print utc_dt.astimezone(eastern)
2013-05-21 15:00:27.648000-04:00
</snippet></ROW><ROW><id>16677748</id><snippet>import multiprocessing as mp
import time

def theGenerator():
    for number in xrange(10):
        yield number

def processNumber(x):
    return x*2

def multiprocessThings():
    pool = mp.Pool()
    gen = theGenerator()
    result = pool.map(processNumber, gen)
    print result

if __name__ == "__main__":
    multiprocessThings()
    time.sleep(10)
</snippet></ROW><ROW><id>16677748</id><snippet>[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
</snippet></ROW><ROW><id>16677877</id><snippet>stats = defaultdict(int)</snippet></ROW><ROW><id>16677877</id><snippet>self.stats[response.url]</snippet></ROW><ROW><id>16677877</id><snippet>(website, depth)</snippet></ROW><ROW><id>16677877</id><snippet>parse_item</snippet></ROW><ROW><id>16677877</id><snippet>urlparse.urlparse</snippet></ROW><ROW><id>16677926</id><snippet>Title.objects.select_related().extra(
    select={'sort_title':"COALESCE(`tv_show`.`title`, `title`.`title`)"},
    order_by=['sort_title']
)
</snippet></ROW><ROW><id>16677926</id><snippet>SELECT</snippet></ROW><ROW><id>16677926</id><snippet>COALESCE</snippet></ROW><ROW><id>16677926</id><snippet>select_related()</snippet></ROW><ROW><id>16677981</id><snippet>object.__getattribute__()</snippet></ROW><ROW><id>16677981</id><snippet>b.x</snippet></ROW><ROW><id>16677981</id><snippet>type(b).__dict__['x'].__get__(b, type(b))</snippet></ROW><ROW><id>16677981</id><snippet>type(b)</snippet></ROW><ROW><id>16677981</id><snippet>Dog</snippet></ROW><ROW><id>16677981</id><snippet>self</snippet></ROW><ROW><id>16677981</id><snippet>self</snippet></ROW><ROW><id>16677981</id><snippet>&gt;&gt;&gt; d = Dog()
&gt;&gt;&gt; d.speak.__self__._repeat = 3
&gt;&gt;&gt; d.speak()
woof
woof
woof
</snippet></ROW><ROW><id>16678007</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup1 = BeautifulSoup('&lt;td class="prodSpecAtribute" rowspan="2"&gt;[words]&lt;/td&gt;')
&gt;&gt;&gt; soup1.find('td', class_='prodSpecAtribute').contents[0]
u'[words]'
&gt;&gt;&gt; soup2 = BeautifulSoup('&lt;td class="prodSpecAtribute"&gt;[words]&lt;/td&gt;')
&gt;&gt;&gt; soup2.find('td', class_='prodSpecAtribute').contents[0]
u'[words]'
</snippet></ROW><ROW><id>16678007</id><snippet>soup = BeautifulSoup(page)
for td in soup.find_all('td', class_='prodSpecAtribute'):
    print td.contents[0]
</snippet></ROW><ROW><id>16678007</id><snippet>soup = BeautifulSoup(page)
for td in soup.findAll('td', {'class': 'prodSpecAtribute'}):
    print td.contents[0]
</snippet></ROW><ROW><id>16678163</id><snippet>$x('//*[@id="Accept"]');
[]
</snippet></ROW><ROW><id>16678163</id><snippet>$x('//*[@id="Accept"]');
[&lt;input type=​"submit" name=​"Accept" value=​"I agree" id=​"Accept"&gt;​]
</snippet></ROW><ROW><id>16678163</id><snippet>driver.switch_to_frame("frameName") 
</snippet></ROW><ROW><id>16678392</id><snippet>b''</snippet></ROW><ROW><id>16678392</id><snippet>bytearray</snippet></ROW><ROW><id>16678392</id><snippet>msg = bytearray()  # New empty byte array
# Append data to the array
msg.extend(b"blah")
msg.extend(b"foo") 
</snippet></ROW><ROW><id>16678392</id><snippet>msg.decode(encoding='utf-8')</snippet></ROW><ROW><id>16678502</id><snippet>workon &lt;env_name&gt;</snippet></ROW><ROW><id>16678502</id><snippet>mkvirtualenv &lt;env_name&gt;</snippet></ROW><ROW><id>16678502</id><snippet>mkproject &lt;project_name&gt;</snippet></ROW><ROW><id>16678502</id><snippet>PROJECT_HOME</snippet></ROW><ROW><id>16678502</id><snippet>PATH</snippet></ROW><ROW><id>16678542</id><snippet>{% if field.flags.required %}field.label(class_='required'){% endif %}
</snippet></ROW><ROW><id>16678627</id><snippet>select_related()</snippet></ROW><ROW><id>16678627</id><snippet>ExportTrackingRecord.objects.filter(...).select_related('solution')</snippet></ROW><ROW><id>16678627</id><snippet>Solution</snippet></ROW><ROW><id>16678627</id><snippet>prefetch_related()</snippet></ROW><ROW><id>16678644</id><snippet>fillList</snippet></ROW><ROW><id>16678644</id><snippet>changeState</snippet></ROW><ROW><id>16678666</id><snippet>def simul(n):
    score = 0
    for i in range(n):
        p1 = choose_rps()
        p2 = choose_rps()
        result = rps(p1, p2)
        score += result
    if score &lt; 0:
        print('Player 1')
    elif score == 0:
        print('Tie')
    else:
        print('Player 2')
</snippet></ROW><ROW><id>16678666</id><snippet>choose_rps</snippet></ROW><ROW><id>16678666</id><snippet>R</snippet></ROW><ROW><id>16678666</id><snippet>P</snippet></ROW><ROW><id>16678666</id><snippet>S</snippet></ROW><ROW><id>16678666</id><snippet>rps</snippet></ROW><ROW><id>16678666</id><snippet>def rps(p1, p2):
    # ... your code here

def choose_rps():
    # implement this here

def simul(n):
    # code from above
</snippet></ROW><ROW><id>16678666</id><snippet>if __name__ == '__main__':
    import sys
    n = int(sys.argv[1]) if len(sys.argv) &gt; 1 else 5
    simul(n)
</snippet></ROW><ROW><id>16678666</id><snippet>while True:
    n = int(input('How many trials?')) # raw_input for Python 2.x
    simul(n)
</snippet></ROW><ROW><id>16678666</id><snippet>sum</snippet></ROW><ROW><id>16678666</id><snippet>def simul(n):
    score = sum(rps(choose_rps(), choose_rps()) for _ in range(n))
</snippet></ROW><ROW><id>16678698</id><snippet>name()</snippet></ROW><ROW><id>16678698</id><snippet>for a in path:
    print a.xpath('name()')  # prints a:rPr
</snippet></ROW><ROW><id>16678743</id><snippet>groupby</snippet></ROW><ROW><id>16678743</id><snippet>mean</snippet></ROW><ROW><id>16678743</id><snippet>In [11]: df.groupby(level=0, axis=1).mean()
Out[11]:
   bar  foo  hello
0    1  0.5      5
1    1  1.5      5
2    1  2.5      5
</snippet></ROW><ROW><id>16678743</id><snippet>In [21]: df
Out[21]:
   foo  bar  foo hello
0    0    1    1     a
1    1    1    2     a
2    2    1    3     a
</snippet></ROW><ROW><id>16678743</id><snippet>DataError: No numeric types to aggregate</snippet></ROW><ROW><id>16678743</id><snippet>In [22]: dupes = df.columns.get_duplicates()

In [23]: dupes
Out[23]: ['foo']

In [24]: pd.DataFrame({d: df[d] for d in df.columns if d not in dupes})
Out[24]:
   bar hello
0    1     a
1    1     a
2    1     a

In [25]: pd.concat(df.xs(d, axis=1) for d in dupes).groupby(level=0, axis=1).mean()
Out[25]:
   foo
0  0.5
1  1.5
2  2.5

In [26]: pd.concat([Out[24], Out[25]], axis=1)
Out[26]:
   foo  bar hello
0  0.5    1     a
1  1.5    1     a
2  2.5    1     a
</snippet></ROW><ROW><id>16678976</id><snippet>cursor.execute('INSERT INTO tweets (created_at) VALUES ("{created_at}")'.format(created_at=t)) 
</snippet></ROW><ROW><id>16679298</id><snippet>If one of the above binary installers did not suit your needs, 
please install Celltool from the source code. 
This depends on only three things:

1.Python (version 2.3 or later).
2. NumPy 1.0.4 or later.
3. Working C/C++ and Fortran compilers.
</snippet></ROW><ROW><id>16679443</id><snippet>...
if not adventurousch:
      print "Need to create object"
...
</snippet></ROW><ROW><id>16679664</id><snippet>self.docs_list.append(self.__filter__(d))
</snippet></ROW><ROW><id>16679664</id><snippet>__filter__</snippet></ROW><ROW><id>16679664</id><snippet>1/hash_fullness</snippet></ROW><ROW><id>16679664</id><snippet>array.array</snippet></ROW><ROW><id>16679664</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>16679664</id><snippet>a = np.zeros(len(self.word_dict), dtype='i2')
for word in split_into_words(d):
    try:
        idx = self.word_dict[word]
    except KeyError:
        idx = len(self.word_dict)
        self.word_dict[word] = idx
        np.resize(a, idx+1)
        a[idx] = 1
    else:
        a[idx] += 1
self.doc_vectors.append(a)
</snippet></ROW><ROW><id>16679713</id><snippet>import itertools as it, operator as op
summary_trees = []
for k,g in it.groupby(sorted_trees, key=op.itemgetter(0))
    tempg=list(g)
    summary_trees.append([k, sum(i[2] for i in tempg), sum(i[3] for i in tempg)])
</snippet></ROW><ROW><id>16679875</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>16679875</id><snippet>from itertools import chain

':'.join(chain.from_iterable(data))
</snippet></ROW><ROW><id>16679875</id><snippet>:</snippet></ROW><ROW><id>16679875</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; ':'.join(chain.from_iterable(data))
'info:numbers:more info:info:numbers:more info:..*this is dynamic so it could have hundreds*..'
</snippet></ROW><ROW><id>16679875</id><snippet>data</snippet></ROW><ROW><id>16679875</id><snippet>for sublist in data:
    file2.write(':'.join(sublist) + '\n')
</snippet></ROW><ROW><id>16679875</id><snippet>    file2.write('\n'.join(':'.join(sublist) for sublist in data) + '\n')
</snippet></ROW><ROW><id>16679994</id><snippet>soup.findAll('td', attrs={'class': 'prodSpecAtribute'})
</snippet></ROW><ROW><id>16679994</id><snippet>prodSpecAtribute</snippet></ROW><ROW><id>16679994</id><snippet>prodSpecAtribtue</snippet></ROW><ROW><id>16680109</id><snippet>lastReadCategories = open('c:/digitalLibrary/' + connectedUser +'/lastReadCategories.txt', 'w')
for category in lastReadCategoriesList:
if category.split(",")[0] is not "" and category is not None:
    lastReadCategories.write(category.rstrip() + '\n')
    print(category.rstrip())
else: print("/" + category + "/")
lastReadCategories.close()
</snippet></ROW><ROW><id>16680109</id><snippet>lastReadCategoriesList =  ['A,52', 'B,1\n', 'C,50', ',3']
for category in lastReadCategoriesList:
if category.split(",")[0] is not "" and category is not None:
    print(category.rstrip())
else: print("/" + category + "/")

&gt;&gt;&gt; ================================ RESTART ================================
&gt;&gt;&gt; 
A,52
B,1
C,50
/,3/
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16680148</id><snippet>[Semaphore(0)]*(size + 1)</snippet></ROW><ROW><id>16680148</id><snippet>size + 1</snippet></ROW><ROW><id>16680148</id><snippet>Semaphore</snippet></ROW><ROW><id>16680148</id><snippet>self._semaphores = [Semaphore(0) for _ in range(size + 1)]
</snippet></ROW><ROW><id>16680154</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*- 


import cv2
import sys, os.path, getopt
import numpy, random




def _usage():

    print
    print "cvbayes trainer"
    print
    print "Options:"
    print
    print "-m    --ham=     path to dir of ham images"
    print "-s    --spam=    path to dir of spam images"
    print "-h    --help     this help text"
    print "-v    --verbose  lots more output"
    print



def _parseOpts(argv):

    """
    Turn options + args into a dict of config we'll follow.  Merge in default conf.
    """

    try:
        opts, args = getopt.getopt(argv[1:], "hm:s:v", ["help", "ham=", 'spam=', 'verbose'])
    except getopt.GetoptError as err:
        print(err) # will print something like "option -a not recognized"
        _usage()
        sys.exit(2)

    optsDict = {}

    for o, a in opts:
        if o == "-v":
            optsDict['verbose'] = True
        elif o in ("-h", "--help"):
            _usage()
            sys.exit()
        elif o in ("-m", "--ham"):
            optsDict['ham'] = a
        elif o in ('-s', '--spam'):
            optsDict['spam'] = a
        else:
            assert False, "unhandled option"

    for mandatory_arg in ('ham', 'spam'):
        if mandatory_arg not in optsDict:
            print "Mandatory argument '%s' was missing; cannot continue" % mandatory_arg
            sys.exit(0)

    return optsDict     




class ClassifierWrapper(object):

    """
    Setup and encapsulate a naive bayes classifier based on OpenCV's 
    NormalBayesClassifier.  Presently we do not use it intelligently,
    instead feeding in flattened arrays of B&amp;W pixels.
    """

    def __init__(self):
        super(ClassifierWrapper,self).__init__()
        self.classifier     = cv2.NormalBayesClassifier()
        self.data           = []
        self.responses      = []


    def _load_image_features(self, f):
        image_colour    = cv2.imread(f)
        image_crop      = image_colour[327:390, 784:926]        # Use the junction boxes, luke
        image_grey      = cv2.cvtColor(image_crop, cv2.COLOR_BGR2GRAY)
    features        = cv2.goodFeaturesToTrack(image_grey, 4, 0.02, 3)
        return features.flatten()


    def train_from_file(self, f, cl):
        features    = self._load_image_features(f)
        self.data.append(features)
        self.responses.append(cl)


    def train(self, update=False):
        matrix_data     = numpy.matrix( self.data ).astype('float32')
        matrix_resp     = numpy.matrix( self.responses ).astype('float32')
        self.classifier.train(matrix_data, matrix_resp, update=update)
        self.data       = []
        self.responses  = []


    def predict_from_file(self, f):
        features    = self._load_image_features(f)
        features_matrix = numpy.matrix( [ features ] ).astype('float32')
        retval, results = self.classifier.predict( features_matrix )
        return results




if __name__ == "__main__":

    opts = _parseOpts(sys.argv)

    cw = ClassifierWrapper()

    ham     = os.listdir(opts['ham'])
    spam    = os.listdir(opts['spam'])
    n_training_samples  = min( [len(ham),len(spam)])
    print "Will train on %d samples for equal sets" % n_training_samples

    for f in random.sample(ham, n_training_samples):
        img_path    = os.path.join(opts['ham'], f)
        print "ham: %s" % img_path
        cw.train_from_file(img_path, 2)

    for f in random.sample(spam, n_training_samples):
        img_path    = os.path.join(opts['spam'], f)
        print "spam: %s" % img_path
        cw.train_from_file(img_path, 1)

    cw.train()

    print
    print

    # spam dir much bigger so mostly unused, let's try predict() on all of it
    print "predicting on all spam..."
    n_wrong = 0
    n_files = len(os.listdir(opts['spam']))
    for f in os.listdir(opts['spam']):
        img_path    = os.path.join(opts['spam'], f)
        result = cw.predict_from_file(img_path)
        print "%s\t%s" % (result, img_path)
        if result[0][0] == 2:
            n_wrong += 1

    print
    print "got %d of %d wrong = %.1f%%" % (n_wrong, n_files, float(n_wrong)/n_files * 100, )
</snippet></ROW><ROW><id>16680187</id><snippet>AT+CIPSEND</snippet></ROW><ROW><id>16680187</id><snippet>AT+CMGS</snippet></ROW><ROW><id>16680187</id><snippet>SERVER IP</snippet></ROW><ROW><id>16680187</id><snippet>SERVER PORT</snippet></ROW><ROW><id>16680242</id><snippet>intro_screen</snippet></ROW><ROW><id>16680242</id><snippet>MainFrame</snippet></ROW><ROW><id>16680242</id><snippet>MainMenu</snippet></ROW><ROW><id>16680242</id><snippet>MainMenu.__init__()</snippet></ROW><ROW><id>16680242</id><snippet>MainFrame</snippet></ROW><ROW><id>16680242</id><snippet>parent</snippet></ROW><ROW><id>16680242</id><snippet>self.parent</snippet></ROW><ROW><id>16680242</id><snippet>wx.Frame.__init__(self, parent=parent)</snippet></ROW><ROW><id>16680242</id><snippet>self.parent = parent</snippet></ROW><ROW><id>16680242</id><snippet>MainMenu.__init__(</snippet></ROW><ROW><id>16680242</id><snippet>self.parent</snippet></ROW><ROW><id>16680242</id><snippet>MainMenu</snippet></ROW><ROW><id>16680242</id><snippet>self.parent.intro_screen.Show()
</snippet></ROW><ROW><id>16680242</id><snippet>self.main_menu = MainMenu
</snippet></ROW><ROW><id>16680242</id><snippet>self.intro_screen = IntroScreen
</snippet></ROW><ROW><id>16680242</id><snippet>self.main_menu.Hide(self)</snippet></ROW><ROW><id>16680242</id><snippet>self.Hide()</snippet></ROW><ROW><id>16680307</id><snippet>class Example(object):
      somevariable = 'class variable'
</snippet></ROW><ROW><id>16680307</id><snippet>&gt;&gt; Example.somevariable
'class variable'
</snippet></ROW><ROW><id>16680307</id><snippet>instance</snippet></ROW><ROW><id>16680307</id><snippet>class</snippet></ROW><ROW><id>16680307</id><snippet>instance</snippet></ROW><ROW><id>16680307</id><snippet>class Example(object):
      def doSomething(self):
          self.othervariable = 'instance variable'

&gt;&gt; foo = Example()
</snippet></ROW><ROW><id>16680307</id><snippet>Example</snippet></ROW><ROW><id>16680307</id><snippet>othervariable</snippet></ROW><ROW><id>16680307</id><snippet>&gt;&gt; foo.othervariable
AttributeError: 'Example' object has no attribute 'othervariable'
</snippet></ROW><ROW><id>16680307</id><snippet>othervariable</snippet></ROW><ROW><id>16680307</id><snippet>doSomething</snippet></ROW><ROW><id>16680307</id><snippet>&gt;&gt; foo.doSomething()
&gt;&gt; foo.othervariable
'instance variable'
</snippet></ROW><ROW><id>16680307</id><snippet>__init__</snippet></ROW><ROW><id>16680307</id><snippet>class Example(object):

      def __init__(self):
          self.othervariable = 'instance variable'

&gt;&gt; foo = Example()
&gt;&gt; foo.othervariable
'instance variable'
</snippet></ROW><ROW><id>16680436</id><snippet>Traceback (most recent call last):
  File "pw.py", line 18, in &lt;module&gt;
    getPassword()
  File "pw.py", line 10, in getPassword
    if (password == 'xxxx'):
UnboundLocalError: local variable 'password' referenced before assignment
</snippet></ROW><ROW><id>16680436</id><snippet>'password'</snippet></ROW><ROW><id>16680436</id><snippet>def getPassword():
    global password
    while passwordTry != 0:
       if (password == 'xxxx'):
        print('Correct')
       else:
        passwordTry -= 1
        print('INCORRECT!')
</snippet></ROW><ROW><id>16680436</id><snippet>askforPassword</snippet></ROW><ROW><id>16680436</id><snippet>def askforPassword():
    global password
    print('Welcome to the Machine!')
    print('Enter the password: ')
    password = input()
</snippet></ROW><ROW><id>16680436</id><snippet>askforPassword</snippet></ROW><ROW><id>16680436</id><snippet>INCORRECT!</snippet></ROW><ROW><id>16680436</id><snippet>askforPassword</snippet></ROW><ROW><id>16680436</id><snippet>return</snippet></ROW><ROW><id>16680436</id><snippet>getPassword</snippet></ROW><ROW><id>16680436</id><snippet>def askforPassword():
    print('Welcome to the Machine!')
    print('Enter the password: ')
    password = input()
    return password

def getPassword():
    while passwordTry != 0:
       password = askforPassword()
       if (password == 'xxxx'):
        print('Correct')
       else:
        passwordTry -= 1
        print('INCORRECT!')
</snippet></ROW><ROW><id>16680436</id><snippet>getPassword</snippet></ROW><ROW><id>16680557</id><snippet>class Task(models.Model):
    name = models.CharField(max_length=50)

    class Meta:
        ordering = ['name']
</snippet></ROW><ROW><id>16680557</id><snippet>tasks</snippet></ROW><ROW><id>16680557</id><snippet># view
tasks = item.task_set.order_by('name')

# template
{% for task in tasks %}
</snippet></ROW><ROW><id>16680557</id><snippet>{{ item.task_set.order_by }}</snippet></ROW><ROW><id>16680679</id><snippet>import faker
f = faker.Faker()

In [11]: f.
f.city            f.full_address    f.phonenumber     f.zip_code
f.company         f.last_name       f.state
f.email           f.lorem           f.street_address
f.first_name      f.name            f.username

In [11]: f.city()
Out[11]: u'Treyview'
</snippet></ROW><ROW><id>16680705</id><snippet>cursor.execute('''\
    SELECT COUNT(*) FROM bad_ip_logins WHERE IP = %s AND DATE_SUB(NOW(), INTERVAL 1 HOUR) &lt; accessed''', (ip,))
</snippet></ROW><ROW><id>16680705</id><snippet>ip</snippet></ROW><ROW><id>16680705</id><snippet>execute()</snippet></ROW><ROW><id>16680705</id><snippet>%s</snippet></ROW><ROW><id>16680804</id><snippet>np.take</snippet></ROW><ROW><id>16680804</id><snippet>np.ravel_multi_index</snippet></ROW><ROW><id>16680804</id><snippet>a = np.argsort(dist, axis=1)
a = np.ravel_multi_index((np.arange(dist.shape[0])[:, None], a), dims=dist.shape)
</snippet></ROW><ROW><id>16680804</id><snippet>take</snippet></ROW><ROW><id>16680804</id><snippet>s2 = dist[np.arange(4)[:, None], a]
</snippet></ROW><ROW><id>16680819</id><snippet>import tornado.ioloop
import tornado.web

class PDFHandler(tornado.web.RequestHandler):
    def get(self):
        filename = 'current_page.pdf'

        self.set_header('Content-Disposition', 'attachment; filename=current_page.pdf')
        self.set_header('Content-Type', 'application/force-download')

        with open(filename, 'r') as handle:
            data = handle.read()
            self.set_header('Content-Length', len(data))
            self.write(data)

if __name__ == "__main__":
    application = tornado.web.Application([
        (r'/', PDFHandler),
    ])

    application.listen(8888)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>16680819</id><snippet>tempfile</snippet></ROW><ROW><id>16680883</id><snippet>file = self.request.get('file')
</snippet></ROW><ROW><id>16680883</id><snippet>filename = self.request.GET['file'].filename
</snippet></ROW><ROW><id>16680916</id><snippet>Img_list</snippet></ROW><ROW><id>16680980</id><snippet>io.open()</snippet></ROW><ROW><id>16680980</id><snippet>open()</snippet></ROW><ROW><id>16680980</id><snippet>dataFile = io.open(dataFilePath, 'rb')
</snippet></ROW><ROW><id>16681159</id><snippet>if 'on' in form and form['on']:
    doSomethingWithOn()
else:
    doSomethingWithDrop()
</snippet></ROW><ROW><id>16681225</id><snippet>unittest</snippet></ROW><ROW><id>16681225</id><snippet>TestCase</snippet></ROW><ROW><id>16681225</id><snippet>LoginResourceHelper('test_create_and_login_user').test_create_and_login_user(email, password)
</snippet></ROW><ROW><id>16681225</id><snippet>TestCase</snippet></ROW><ROW><id>16681225</id><snippet>TestCase</snippet></ROW><ROW><id>16681225</id><snippet>runTest</snippet></ROW><ROW><id>16681225</id><snippet>class ExampleTestCase(TestCase):
    def runTest(self):
       # Do assertions here
</snippet></ROW><ROW><id>16681225</id><snippet>TestCases</snippet></ROW><ROW><id>16681225</id><snippet>class ExampleTestcase(TestCase):
    def test_foo(self):
        # Do assertions here

    def test_bar(self):
        # Do other assertions here
</snippet></ROW><ROW><id>16681225</id><snippet>runTest()</snippet></ROW><ROW><id>16681225</id><snippet>&gt;&gt;ExampleTestCase('test_foo').test_foo()
&gt;&gt;ExampleTestCase('test_bar').test_bar()
</snippet></ROW><ROW><id>16681225</id><snippet>unittest</snippet></ROW><ROW><id>16681225</id><snippet>unittest</snippet></ROW><ROW><id>16681225</id><snippet>unitest</snippet></ROW><ROW><id>16681418</id><snippet>anchor</snippet></ROW><ROW><id>16681418</id><snippet>"nw"</snippet></ROW><ROW><id>16681418</id><snippet>bg1=self.create_image(0,0,image=self.bg_1, anchor="nw")
</snippet></ROW><ROW><id>16681498</id><snippet>$result = popen('python yourscript.py ' . $args, 'r');
</snippet></ROW><ROW><id>16681509</id><snippet>newText = str(self.prices[self.currIndex])
self.m_staticText17.SetLabel(newText)
</snippet></ROW><ROW><id>16681676</id><snippet>showEvents -t error</snippet></ROW><ROW><id>16681676</id><snippet>sh</snippet></ROW><ROW><id>16681676</id><snippet>cmd</snippet></ROW><ROW><id>16681676</id><snippet>showEvents</snippet></ROW><ROW><id>16681676</id><snippet>showEvents.py</snippet></ROW><ROW><id>16681676</id><snippet>PATH</snippet></ROW><ROW><id>16681676</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>16681676</id><snippet>python showEvents.py -t error</snippet></ROW><ROW><id>16681676</id><snippet>showEvents.py</snippet></ROW><ROW><id>16681676</id><snippet>cd</snippet></ROW><ROW><id>16681676</id><snippet>PATH</snippet></ROW><ROW><id>16681772</id><snippet>localhost</snippet></ROW><ROW><id>16681772</id><snippet>127.0.0.1</snippet></ROW><ROW><id>16681772</id><snippet>localhost</snippet></ROW><ROW><id>16681772</id><snippet>postgresql.conf</snippet></ROW><ROW><id>16681772</id><snippet>listen_addresses</snippet></ROW><ROW><id>16681772</id><snippet>postgresql.conf</snippet></ROW><ROW><id>16681772</id><snippet>select version()</snippet></ROW><ROW><id>16681827</id><snippet>results.append(result)</snippet></ROW><ROW><id>16681827</id><snippet>SubElement</snippet></ROW><ROW><id>16681827</id><snippet>for s in students:    
    for a in range(len(assignments)):

        result = ET.SubElement(results,"result")
        student = ET.SubElement(result,"student")
        assignment = ET.SubElement(result,"assignment")
        score = ET.SubElement(result,"score")

        student.text = str(s)
        assignment.text = str(assignments[a])
        score.text = str(scores[a])
</snippet></ROW><ROW><id>16681957</id><snippet>find_all</snippet></ROW><ROW><id>16681957</id><snippet>left_col = []
right_col = []
for tr in soup.find_all('tr'):
    tds = tr.find_all('td')
    left, right = tds[0], tds[1:]
    assert('prodSpecAtribute' in left['class'])
    left_col.append(left)
    right_col.append(combine_columns(right))
</snippet></ROW><ROW><id>16681957</id><snippet>combine_columns</snippet></ROW><ROW><id>16681957</id><snippet>prodSpecAttribute</snippet></ROW><ROW><id>16681957</id><snippet>assert</snippet></ROW><ROW><id>16681989</id><snippet>try:
    import pyodbc
except ImportError:
    import odbc as pyodbc
</snippet></ROW><ROW><id>16681989</id><snippet>odbc.this</snippet></ROW><ROW><id>16681989</id><snippet>odbc.that</snippet></ROW><ROW><id>16681989</id><snippet>import pyodbc as odbc</snippet></ROW><ROW><id>16681989</id><snippet>apt</snippet></ROW><ROW><id>16681989</id><snippet>easy_install</snippet></ROW><ROW><id>16681989</id><snippet>pip</snippet></ROW><ROW><id>16682267</id><snippet>IEDriverServer.exe</snippet></ROW><ROW><id>16682267</id><snippet>C:\</snippet></ROW><ROW><id>16682267</id><snippet>C:\</snippet></ROW><ROW><id>16682267</id><snippet>C:\IEDriverServer.exe</snippet></ROW><ROW><id>16682267</id><snippet>C:\IEDriver</snippet></ROW><ROW><id>16682267</id><snippet>from selenium import webdriver

driver = webdriver.Ie(r"C:\\IEDriver\\IEDriverServer.exe")
</snippet></ROW><ROW><id>16682467</id><snippet>verbosity=2</snippet></ROW><ROW><id>16682467</id><snippet>results = unittest.TextTestRunner(verbosity=2).run(suite)
</snippet></ROW><ROW><id>16682467</id><snippet>unittest</snippet></ROW><ROW><id>16682467</id><snippet>TestLoader</snippet></ROW><ROW><id>16682467</id><snippet>TreeReporter</snippet></ROW><ROW><id>16682516</id><snippet># second div's xpath: (//table/tr/td/div)[2]
second_div = driver.find_element_by_xpath("(//table/tr/td/div)[2]")
</snippet></ROW><ROW><id>16682516</id><snippet>all_divs = driver.find_elements_by_xpath("//table/tr/td/div") # all_divs should have 10 elements
second_div = all_divs[1] # zero-based index
</snippet></ROW><ROW><id>16682579</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'one', 'one two one three')
['one', 'one']
</snippet></ROW><ROW><id>16682785</id><snippet>print</snippet></ROW><ROW><id>16682785</id><snippet>unittest</snippet></ROW><ROW><id>16682785</id><snippet>test_</snippet></ROW><ROW><id>16682785</id><snippet>python -m unittest discover -v</snippet></ROW><ROW><id>16682785</id><snippet>unittest.main</snippet></ROW><ROW><id>16682785</id><snippet>if __name__ == "__main__":
    unittest.main(verbosity=2)
</snippet></ROW><ROW><id>16682785</id><snippet>suite = unittest.TestLoader().loadTestsFromModule(TestModuleName)
results = unittest.TextTestRunner(verbosity=2).run(suite)
</snippet></ROW><ROW><id>16682785</id><snippet>    suite = unittest.TestLoader().loadTestsFromModule(TestModuleName)
    suite.run(myTestResult)
</snippet></ROW><ROW><id>16682785</id><snippet>TreeReporter</snippet></ROW><ROW><id>16682803</id><snippet>&gt;&gt;&gt; rows = 486
&gt;&gt;&gt; columns = 5
&gt;&gt;&gt; A = [[None] * columns for x in xrange(rows)]
&gt;&gt;&gt; len(A)
486
&gt;&gt;&gt; len(A[0])
5
</snippet></ROW><ROW><id>16683029</id><snippet>np.array</snippet></ROW><ROW><id>16683029</id><snippet>np.ndarray</snippet></ROW><ROW><id>16683029</id><snippet>ndarray</snippet></ROW><ROW><id>16683029</id><snippet>array()</snippet></ROW><ROW><id>16683029</id><snippet>array_getarray()</snippet></ROW><ROW><id>16683094</id><snippet>args</snippet></ROW><ROW><id>16683094</id><snippet>x = args
</snippet></ROW><ROW><id>16683094</id><snippet>x = ('abc',)
</snippet></ROW><ROW><id>16683094</id><snippet>x</snippet></ROW><ROW><id>16683094</id><snippet>x = args[0]
</snippet></ROW><ROW><id>16683094</id><snippet>x,y</snippet></ROW><ROW><id>16683094</id><snippet>x, = args
</snippet></ROW><ROW><id>16683589</id><snippet>e</snippet></ROW><ROW><id>16683589</id><snippet>greeetings</snippet></ROW><ROW><id>16683589</id><snippet>greeetings = greetings_query.fetch(10)

for greeting in greetings:
</snippet></ROW><ROW><id>16683589</id><snippet>e</snippet></ROW><ROW><id>16683589</id><snippet>e</snippet></ROW><ROW><id>16683670</id><snippet>glob.glob</snippet></ROW><ROW><id>16683670</id><snippet>filenames = glob.glob('JUN*.aijE*.nc')
plot_check(filenames[0])
</snippet></ROW><ROW><id>16683670</id><snippet>filenames = glob.glob('JUN*.aijE*.nc')
for filename in filenames:
    plot_check(filename)
</snippet></ROW><ROW><id>16683793</id><snippet>y *= &lt;expr&gt;
</snippet></ROW><ROW><id>16683793</id><snippet>y = y * &lt;expr&gt;
</snippet></ROW><ROW><id>16683793</id><snippet>y = imul(y, &lt;expr&gt;)
</snippet></ROW><ROW><id>16683793</id><snippet>y = y.__imul__(&lt;expr&gt;)
</snippet></ROW><ROW><id>16683793</id><snippet>y</snippet></ROW><ROW><id>16683793</id><snippet>__imul__</snippet></ROW><ROW><id>16683793</id><snippet>y</snippet></ROW><ROW><id>16683793</id><snippet>y*=&lt;expr&gt;</snippet></ROW><ROW><id>16683793</id><snippet>y=y*&lt;expr&gt;</snippet></ROW><ROW><id>16684021</id><snippet>&gt;&gt;&gt; A = ('0','1','2','3')
&gt;&gt;&gt; B = ('A','B','C','D')
&gt;&gt;&gt; [x + y for x, y in zip(A, B)]
['0A', '1B', '2C', '3D']
</snippet></ROW><ROW><id>16684021</id><snippet>&gt;&gt;&gt; lists = (A, B)
&gt;&gt;&gt; [''.join(x) for x in zip(*lists)]
['0A', '1B', '2C', '3D']
</snippet></ROW><ROW><id>16684147</id><snippet>println</snippet></ROW><ROW><id>16684147</id><snippet>print</snippet></ROW><ROW><id>16684147</id><snippet>serial.readline()</snippet></ROW><ROW><id>16684147</id><snippet>\n</snippet></ROW><ROW><id>16684147</id><snippet>readline</snippet></ROW><ROW><id>16684147</id><snippet>read</snippet></ROW><ROW><id>16684147</id><snippet>\n</snippet></ROW><ROW><id>16684147</id><snippet>readline</snippet></ROW><ROW><id>16684165</id><snippet>get_value()</snippet></ROW><ROW><id>16684165</id><snippet>self</snippet></ROW><ROW><id>16684165</id><snippet>oneEyedJim = BlackJackPlayer()
score = oneEyedJim.get_value()
</snippet></ROW><ROW><id>16684244</id><snippet>def items_list(item_name=None, status=None):
</snippet></ROW><ROW><id>16684381</id><snippet>import pdb;pdb.set_trace()</snippet></ROW><ROW><id>16684449</id><snippet>df.groupby('UsrId').JobNos.sum().idxmax()</snippet></ROW><ROW><id>16684449</id><snippet>In [1]: import pandas as pd

In [2]: from StringIO import StringIO

In [3]: data = """UsrId   JobNos
   ...:  1       4
   ...:  1       56
   ...:  2       23 
   ...:  2       55
   ...:  2       41
   ...:  2       5
   ...:  3       78
   ...:  1       25
   ...:  3       1"""

In [4]: df = pd.read_csv(StringIO(data), sep='\s+')

In [5]: grouped = df.groupby('UsrId')

In [6]: grouped.JobNos.sum()
Out[6]: 
UsrId
1         85
2        124
3         79
Name: JobNos

In [7]: grouped.JobNos.sum().idxmax()
Out[7]: 2
</snippet></ROW><ROW><id>16684449</id><snippet>In [8]: grouped.size()
Out[8]: 
UsrId
1        3
2        4
3        2

In [9]: grouped.size().idxmax()
Out[9]: 2
</snippet></ROW><ROW><id>16684449</id><snippet>.order</snippet></ROW><ROW><id>16684449</id><snippet>In [10]: grouped.JobNos.sum().order(ascending=False)
Out[10]: 
UsrId
2        124
1         85
3         79
Name: JobNos
</snippet></ROW><ROW><id>16684747</id><snippet>data = [(u'a', 0, 25), (u'a', 1, 11), (u'a', 3, 60), (u'a', 4, 89), (u'b', 0, 18),
(u'b', 1, 76), (u'b', 2, 52), (u'b', 3, 75), (u'b', 4, 46)]

d = {'a': {}, 'b': {}}
for x, y, z in data:
    d[x][y] = z    

&gt;&gt;&gt; sum(d['a'].get(k, 0) * d['b'].get(k, 0)
        for k in d['a'].viewkeys() | d['b'].viewkeys())
9880
</snippet></ROW><ROW><id>16684830</id><snippet>import sys
def myScript():
        # Rate our Love!! 
    ###   Press F5
    ## then input a rating for our relationship so far
    print "Type a rating for our relationship" 
    love_rate = raw_input("Type a rating for our relationship:")
    ### word answers
    idk = 'idk'
    no = 'no' 
    yes = 'yes' 
    lol = 'lol'
    smh = 'smh'
    love(love_rate)

def love(n):
        if n &lt; 0 : 
            print "Why would it be negative?!" 
        elif n == 'yes' : 
            print " Well if that's the case, then I think we're gonna be just fine." 
        elif n == 'no' : 
            print 'well then... this is awkward'
        elif n == 'lol' : 
            print '''THATS NOT EVEN A NUMBER    ......sniff'''
        elif n == 'smh' :
            print "I'm kinda mad that's an answer you thought of putting here"      
        ## numbered entries 
        elif n == '0' : 
            print " *gasps profusely* YOU DON'T DESERVE THIS PROGRAM" 
        elif n == '1' :
            print "Wow that is kinda hurtful, not gonna lie" 
        elif n == '2' : 
            print "You make me smile at least once, each and every day"
        elif n == '3' : 
            print"you wouldn't believe how annoying it was to get this program to run properly!" + " Thats all i get?"
        elif n == '4' : 
            print "let's " + "shoot a little higher than that"
        elif n == '5' : 
            print "you're unforgettable, that's what you are" 
        elif n == '6' :
            print "always have, always '____' *hint* fill in the blank " 
        elif n == '7' :
            print "i could never leave you, I love you too much" 
        elif n == '8' : 
            print "an 8/10 is still only a B, maybe I'm not trying hard enough" 
        elif n == '9' : 
            print " well, I'm not perfect yet, could have seen that one coming. Guess I just have to keep trying :)" 
        elif n == '10' : 
            print " i think you're exaggerating, i really am not that good yet"     
        elif n == '11' : 
            print """I can be a little immature sometimes and i'm sorry for that, i promise I can get better though. But i need you. I need you to help me out. Can you do that?""" 
        elif n == '12' : 
            print "I don't think the scale is supposed to go this high" 
        elif n == '13' :
            print "alright now you're pushing it." 
        elif n == '14' : 
            print "alright, THE SCALE GOES UP TO AROUND 10. CEASE" 
        elif n == '15' : 
            print " go up one more number. I DARE YOU"
        elif n == '16' : 
            print " go up one more number. see what happens"
        elif n == '17' : 
            print "one more number" 
        elif n == '18' : 
            print "one more" 
        elif n == '19' : 
            print "STOP" 
        elif n == '92412' : 
            print " I think that is one fantastic answer, can't wait for our anniversary" 
        else:
            print "I still really hope that we could get married someday." 

        print """Want to try again?"""
        yes = set(['yes','y', 'ye', ''])
        no = set(['no','n'])

        choice = raw_input().lower()
        if choice in yes:
           myScript()
        elif choice in no:
           sys.exit(0)
        else:
           sys.stdout.write("Please respond with 'yes' or 'no'")
        myScript()



myScript()
</snippet></ROW><ROW><id>16685317</id><snippet>import requests
content = requests.get(URL, auth=('user', 'pass'))
</snippet></ROW><ROW><id>16685317</id><snippet>requests</snippet></ROW><ROW><id>16685317</id><snippet>sessions</snippet></ROW><ROW><id>16685317</id><snippet>POST</snippet></ROW><ROW><id>16685317</id><snippet>urllib2</snippet></ROW><ROW><id>16685317</id><snippet>import urllib2, base64

request = urllib2.Request("http://api.foursquare.com/v1/user")
base64string = base64.standard_b64encode('%s:%s' % (username, password))
request.add_header("Authorization", "Basic %s" % base64string)   
result = urllib2.urlopen(request)
</snippet></ROW><ROW><id>16685428</id><snippet>.index()</snippet></ROW><ROW><id>16685428</id><snippet>.index(1.0)</snippet></ROW><ROW><id>16685428</id><snippet>2</snippet></ROW><ROW><id>16685428</id><snippet>1.0</snippet></ROW><ROW><id>16685428</id><snippet>enumerate()</snippet></ROW><ROW><id>16685428</id><snippet>def find(lst, a, b):
    result = []
    for i, x in enumerate(lst):
        if x&lt;a or x&gt;b:
            result.append(i)
    return result
</snippet></ROW><ROW><id>16685428</id><snippet>def find(lst, a, b):
    return [i for i, x in enumerate(lst) if x&lt;a or x&gt;b]
</snippet></ROW><ROW><id>16685546</id><snippet>from collections import defaultdict

accounts = defaultdict(list)
accounts['11163722404385'] = [('a', 'list'),('another', 'list')]
accounts['1116372240485'] = [('one', 'more')]

with open(r'C:\temp\out.txt', 'a') as writer:
    for k,v in accounts.iteritems():
        csv = ';'.join([','.join(t) for t in v])
        writer.write("%s,%s\n" % (k, csv))
</snippet></ROW><ROW><id>16685546</id><snippet>11163722404385,a,list;another,list
1116372240485,one,more
</snippet></ROW><ROW><id>16685866</id><snippet>s</snippet></ROW><ROW><id>16685866</id><snippet>'one, two, three,'</snippet></ROW><ROW><id>16685866</id><snippet>&gt;&gt;&gt; [s[:i] + "." + s[i+1:] for i in range(len(s)) if s[i] == ","]
['one. two, three,', 'one, two. three,', 'one, two, three.']
</snippet></ROW><ROW><id>16685866</id><snippet>[ ]</snippet></ROW><ROW><id>16685866</id><snippet>( )</snippet></ROW><ROW><id>16686365</id><snippet>0</snippet></ROW><ROW><id>16686365</id><snippet>0</snippet></ROW><ROW><id>16686365</id><snippet>datetime.datetime(2012, 5, 22, 9, 3, 41)
</snippet></ROW><ROW><id>16686365</id><snippet>09</snippet></ROW><ROW><id>16686365</id><snippet>&gt;&gt;&gt; 010
8
&gt;&gt;&gt; 09
  File "&lt;stdin&gt;", line 1
    09
     ^
SyntaxError: invalid token
</snippet></ROW><ROW><id>16686505</id><snippet>ast</snippet></ROW><ROW><id>16686505</id><snippet>import ast
import re

def collect_offsets(call_string):
    def _abs_offset(lineno, col_offset):
        current_lineno = 0
        total = 0
        for line in call_string.splitlines():
            current_lineno += 1
            if current_lineno == lineno:
                return col_offset + total
            total += len(line)
    # parse call_string with ast
    call = ast.parse(call_string).body[0].value
    # collect offsets provided by ast
    offsets = []
    for arg in call.args:
        a = arg
        while isinstance(a, ast.BinOp):
            a = a.left
        offsets.append(_abs_offset(a.lineno, a.col_offset))
    for kw in call.keywords:
        offsets.append(_abs_offset(kw.value.lineno, kw.value.col_offset))
    if call.starargs:
        offsets.append(_abs_offset(call.starargs.lineno, call.starargs.col_offset))
    if call.kwargs:
        offsets.append(_abs_offset(call.kwargs.lineno, call.kwargs.col_offset))
    offsets.append(len(call_string))
    return offsets

def argpos(call_string):
    def _find_start(prev_end, offset):
        s = call_string[prev_end:offset]
        m = re.search('(\(|,)(\s*)(.*?)$', s)
        return prev_end + m.regs[3][0]
    def _find_end(start, next_offset):
        s = call_string[start:next_offset]
        m = re.search('(\s*)$', s[:max(s.rfind(','), s.rfind(')'))])
        return start + m.start()

    offsets = collect_offsets(call_string)   

    result = []
    # previous end
    end = 0
    # given offsets = [9, 14, 21, ...],
    # zip(offsets, offsets[1:]) returns [(9, 14), (14, 21), ...]
    for offset, next_offset in zip(offsets, offsets[1:]):
        #print 'I:', offset, next_offset
        start = _find_start(end, offset)
        end = _find_end(start, next_offset)
        #print 'R:', start, end
        result.append((start, end))
    return result

if __name__ == '__main__':
    try:
        while True:
            call_string = raw_input()
            positions = argpos(call_string)
            for p in positions:
                print ' ' * p[0] + '^' + ((' ' * (p[1] - p[0] - 2) + '^') if p[1] - p[0] &gt; 1 else '')
            print positions
    except EOFError, KeyboardInterrupt:
        pass
</snippet></ROW><ROW><id>16686505</id><snippet>whatever(foo, baz(), 'puppet', 24+2, meow=3, *meowargs, **meowargs)
         ^ ^
              ^   ^
                     ^      ^
                               ^  ^
                                     ^    ^
                                             ^       ^
                                                        ^        ^
[(9, 12), (14, 19), (21, 29), (31, 35), (37, 43), (45, 54), (56, 66)]
f(1, len(document_text) - 1 - position)
  ^
     ^                               ^
[(2, 3), (5, 38)]
</snippet></ROW><ROW><id>16686605</id><snippet>name(?:,page\d+)?\/
</snippet></ROW><ROW><id>16686605</id><snippet>(?:,page\d+)</snippet></ROW><ROW><id>16686605</id><snippet>?</snippet></ROW><ROW><id>16686761</id><snippet>type(name, bases, dict)</snippet></ROW><ROW><id>16686761</id><snippet>type(name, bases, dict)</snippet></ROW><ROW><id>16686761</id><snippet>__metaclass__</snippet></ROW><ROW><id>16686761</id><snippet>type(name, bases, dict)</snippet></ROW><ROW><id>16686761</id><snippet>class MetaA(type):
    def __new__(cls, name, bases, attrs):
        print "MetaA"
        return super(MetaA, cls).__new__(cls, name, bases, attrs)

class A(object):
    __metaclass__ = MetaA


class MetaB(MetaA):
    def __new__(cls, name, bases, attrs):
        print "MetaB"
        return super(MetaB, cls).__new__(cls, name, bases, attrs)

class B(A):
    __metaclass__ = MetaB
</snippet></ROW><ROW><id>16686761</id><snippet>MetaA
MetaB 
MetaA 
</snippet></ROW><ROW><id>16686761</id><snippet>B</snippet></ROW><ROW><id>16686761</id><snippet>B</snippet></ROW><ROW><id>16686761</id><snippet>__metaclass__</snippet></ROW><ROW><id>16686761</id><snippet>type(name, bases, dict)</snippet></ROW><ROW><id>16686761</id><snippet>B = MetaB('B', (A, ), {'__metaclass__': MetaB})
</snippet></ROW><ROW><id>16687061</id><snippet>import sys
sys.stdout.flush()
</snippet></ROW><ROW><id>16687076</id><snippet>day = Day.objects.get(day=1)
Month.objects.filter(days=day)
</snippet></ROW><ROW><id>16687076</id><snippet>MyObject</snippet></ROW><ROW><id>16687076</id><snippet>Day</snippet></ROW><ROW><id>16687076</id><snippet>day = Day.objects.get(day=5)
month = Month.objects.get(month=3)

MyObject.objects.filter(month__month=month, month__days=day)
</snippet></ROW><ROW><id>16687136</id><snippet>fmts = (None, "=B", "=h", None, "=l")
fmt = fmts[sampwidth]
dcs  = (None, 128, 0, None, 0)
dc = dcs[sampwidth]

image_width = 600
image_height = 300
chunk_size = len(wavefile.getnframes()) / image_width

def unpacker(frame):
    return struct.unpack(fmt, frame)[0]

for i in range(chunk_size):
    value = math.avg([unpacker(x) for x in wavefile.read_frames(chunk_size)])
    # and then use value * 300 to figure out the vertical position for the pixel.
</snippet></ROW><ROW><id>16687152</id><snippet>Queue</snippet></ROW><ROW><id>16687152</id><snippet>Queue</snippet></ROW><ROW><id>16687152</id><snippet>Queue</snippet></ROW><ROW><id>16687152</id><snippet>collections.deque</snippet></ROW><ROW><id>16687152</id><snippet>[0]</snippet></ROW><ROW><id>16687152</id><snippet>.popleft()</snippet></ROW><ROW><id>16687596</id><snippet>.find()</snippet></ROW><ROW><id>16687596</id><snippet>tag = soup.find(attrs={"name":"description"})
content = tag['content']
</snippet></ROW><ROW><id>16687596</id><snippet>.findall()</snippet></ROW><ROW><id>16687674</id><snippet>in &lt;iterable&gt;</snippet></ROW><ROW><id>16687674</id><snippet>b, c</snippet></ROW><ROW><id>16687674</id><snippet>b, c</snippet></ROW><ROW><id>16687674</id><snippet>1</snippet></ROW><ROW><id>16687674</id><snippet>b, c = (1, 2)</snippet></ROW><ROW><id>16687674</id><snippet>&gt;&gt;&gt; for x in [1, 2]:
        print "X: ", x


X:  1
X:  2

&gt;&gt;&gt; for x in [(1, 2)]:
        print "X: ", x


X:  (1, 2)
</snippet></ROW><ROW><id>16687674</id><snippet>b, c = 1</snippet></ROW><ROW><id>16687674</id><snippet>b, c = (1, 2)</snippet></ROW><ROW><id>16687799</id><snippet>psycopg2</snippet></ROW><ROW><id>16687799</id><snippet>psycopg2</snippet></ROW><ROW><id>16687799</id><snippet>psycopg2</snippet></ROW><ROW><id>16687799</id><snippet>sudo apt-get install python-psycopg2
</snippet></ROW><ROW><id>16687799</id><snippet>sudo easy_install psycopg2
</snippet></ROW><ROW><id>16687799</id><snippet>setup.py</snippet></ROW><ROW><id>16687799</id><snippet>sudo python setup.py install
</snippet></ROW><ROW><id>16688391</id><snippet>trace</snippet></ROW><ROW><id>16688391</id><snippet>root.bind("&lt;Enter&gt;", myfunction)</snippet></ROW><ROW><id>16688391</id><snippet>import Tkinter as tk

root = tk.Tk()

def myfunction(*args):
    x = var.get()
    y = stringvar1.get()
    z = stringvar2.get()
    if x and y and z:
        button.config(state='normal')
    else:
        button.config(state='disabled')

stringvar1 = tk.StringVar(root)
stringvar2 = tk.StringVar(root)
var = tk.StringVar(root)

stringvar1.trace("w", myfunction)
stringvar2.trace("w", myfunction)
var.trace("w", myfunction)

entry1 = tk.Entry(root, width=15, textvariable=stringvar1)
entry1.grid(row=1,column=1)
entry2 = tk.Entry(root, width=15, textvariable=stringvar2)
entry2.grid(row=1,column=2)

choices = ('a','b','c')
option = tk.OptionMenu(root, var, *choices)
option.grid(row=1,column=3)

button = tk.Button(root,text="submit")
button.grid(row=1, column=4)

root.mainloop()
</snippet></ROW><ROW><id>16688598</id><snippet>None</snippet></ROW><ROW><id>16688598</id><snippet>def process_ancestors(relation_dict, name):
    '''Figures out who the ancestors are'''
    name_found = search_name(relation_dict, name)
    if not name_found: 
            return "Unknown person"      
    ancestor_list = []
    person = name
    person = find_parent(relation_dict, person)
    while person is not None: 
        ancestor_list.append(person)
        person = find_parent(relation_dict, person)
    return ", ".join(ancestor_list) if ancestor_list else "No known ancestors"
</snippet></ROW><ROW><id>16688736</id><snippet>for row in reader:
    match = False
    for word in ol:
        if word==row[1]:
            match = True
            break

    if not match:
        print row[0],row[1],row[2]
</snippet></ROW><ROW><id>16688736</id><snippet>for row in reader:
    for word in ol:
        if word==row[1]:
            break
    else:
        print row[0],row[1],row[2]
</snippet></ROW><ROW><id>16688736</id><snippet>else:</snippet></ROW><ROW><id>16688736</id><snippet>break</snippet></ROW><ROW><id>16688736</id><snippet>for row in reader:
    if row[1] not in ol:
        print row[0],row[1],row[2]
</snippet></ROW><ROW><id>16688865</id><snippet>for line in filename:
    #print line
    line = line.rstrip('') 
    line1= re.sub('[^\w ]','',line)[8:]
    print line1
</snippet></ROW><ROW><id>16688893</id><snippet>httplib2</snippet></ROW><ROW><id>16688893</id><snippet>httplib2</snippet></ROW><ROW><id>16688893</id><snippet>httplib2.Http</snippet></ROW><ROW><id>16688893</id><snippet>connections</snippet></ROW><ROW><id>16688893</id><snippet>Http</snippet></ROW><ROW><id>16688893</id><snippet>Connnection: close</snippet></ROW><ROW><id>16688893</id><snippet>http.request("http://example.org", headers={'Connection': 'close'})
</snippet></ROW><ROW><id>16688893</id><snippet>connections</snippet></ROW><ROW><id>16689109</id><snippet>from glob import glob

with open('C:/test/out_file/out_file.txt', 'w') as out_file:
    out_file.write('\n'.join(glob('C:/test/*.txt')))
</snippet></ROW><ROW><id>16689160</id><snippet>&lt;div class="control-group"&gt;
    &lt;p&gt;&lt;strong&gt;Check the enabled BRI Ports&lt;/strong&gt;&lt;/p&gt;
    {% for name, field in form._fields.items() %}
        {% if name != 'csrf_token' %}
            &lt;label class="checkbox inline"&gt;
                {{ field(value=1) }} {{ field.label }}
            &lt;/label&gt;
        {% endif %}
    {% endfor %}
&lt;/div&gt;
</snippet></ROW><ROW><id>16689160</id><snippet>form._fields.items()</snippet></ROW><ROW><id>16689160</id><snippet>{% if name != 'csrf_token' %}</snippet></ROW><ROW><id>16689160</id><snippet>&lt;div class="control-group"&gt;
    &lt;p&gt;&lt;strong&gt;Check the enabled BRI Ports&lt;/strong&gt;&lt;/p&gt;
    {% for n in range(1,6) %}
        {% if form['bri' + n|string] %}
            &lt;label class="checkbox inline"&gt;
                {{ form['bri' + n|string](value=1) }} {{ form['bri' + n|string].label }}
            &lt;/label&gt;
        {% endif %}
    {% endfor %}
&lt;/div&gt;
</snippet></ROW><ROW><id>16689160</id><snippet>n.__str__()</snippet></ROW><ROW><id>16689160</id><snippet>n|string</snippet></ROW><ROW><id>16689191</id><snippet>children = {child.get('value') for child in xml_data}
for item in main_list:
    if item[4] in children:
        print(item[4])
</snippet></ROW><ROW><id>16689191</id><snippet>main_list</snippet></ROW><ROW><id>16689191</id><snippet>items = {item[4] for item in main_list}
for child in xml_data:
    value = child.get('value')
    if value in items:
        print(value)
</snippet></ROW><ROW><id>16689191</id><snippet>itertools.product()</snippet></ROW><ROW><id>16689191</id><snippet>items = [item[4] for item in main_list]
children = [child.get('value') for child in xml_data]

for item, child in itertools.product(items, children):
    if item == child:
        print(item)
</snippet></ROW><ROW><id>16689191</id><snippet>for item in ({child.get('value') for child in xml_data} &amp;
             {item[4] for item in main_list}):
    print(item)
</snippet></ROW><ROW><id>16689347</id><snippet>getAll</snippet></ROW><ROW><id>16689347</id><snippet>memcache.set(key, books)</snippet></ROW><ROW><id>16689347</id><snippet>books</snippet></ROW><ROW><id>16689347</id><snippet>addMemcache</snippet></ROW><ROW><id>16689347</id><snippet>save)</snippet></ROW><ROW><id>16689347</id><snippet>cls.addMemcache(book)
</snippet></ROW><ROW><id>16689347</id><snippet>addMemcache</snippet></ROW><ROW><id>16689347</id><snippet>self</snippet></ROW><ROW><id>16689347</id><snippet>cls</snippet></ROW><ROW><id>16689347</id><snippet>Book</snippet></ROW><ROW><id>16689402</id><snippet>df[~df.text.str.contains("Swans")]
</snippet></ROW><ROW><id>16689438</id><snippet>class ProfileIndex(indexes.SearchIndex, indexes.Indexable):
    # your other fields, most likely model attributes
    role_name = indexes.CharField()

    def get_model(self):
        return Person

    def prepare_role_name(self, person):
        return person.workplace.role_name
</snippet></ROW><ROW><id>16689438</id><snippet>role_name</snippet></ROW><ROW><id>16689451</id><snippet>EnableDragGridSize(0)</snippet></ROW><ROW><id>16689451</id><snippet>DisableDragColSize()</snippet></ROW><ROW><id>16689451</id><snippet>DisableDragRowSize()</snippet></ROW><ROW><id>16689451</id><snippet>cross_c = wx.StockCursor(wx.CURSOR_CROSS)
self.grid.GetGridWindow().SetCursor(cross_c)
</snippet></ROW><ROW><id>16689451</id><snippet>EVT_MOTION</snippet></ROW><ROW><id>16689451</id><snippet>self.cross_c = wx.StockCursor(wx.CURSOR_CROSS)
self.grid.GetTargetWindow().SetCursor(self.cross_c)
wx.EVT_MOTION(self.grid.GetGridWindow(), self.OnMouseMotion)

def OnMouseMotion(self, evt):
    self.grid.GetTargetWindow().SetCursor(self.cross_c)
    evt.Skip()
</snippet></ROW><ROW><id>16689573</id><snippet>df.mean()</snippet></ROW><ROW><id>16689573</id><snippet>&gt;&gt;&gt; df
                 A      B
DATE                     
2013-05-01  473077  71333
2013-05-02   35131  62441
2013-05-03     727  27381
2013-05-04     481   1206
2013-05-05     226   1733
2013-05-06     NaN   4064
2013-05-07     NaN  41151
2013-05-08     NaN   8144
2013-05-09     NaN     23
2013-05-10     NaN     10
&gt;&gt;&gt; df.mean(axis=1)
DATE
2013-05-01    272205.0
2013-05-02     48786.0
2013-05-03     14054.0
2013-05-04       843.5
2013-05-05       979.5
2013-05-06      4064.0
2013-05-07     41151.0
2013-05-08      8144.0
2013-05-09        23.0
2013-05-10        10.0
dtype: float64
</snippet></ROW><ROW><id>16689573</id><snippet>df[["A", "B"]].mean(axis=1)</snippet></ROW><ROW><id>16689652</id><snippet>&gt;&gt;&gt; 'The Quick Brown Fox'.replace(' ', '-')
'The-Quick-Brown-Fox'
</snippet></ROW><ROW><id>16689652</id><snippet>&gt;&gt;&gt; '-'.join('The   Quick  \nBrown\t Fox'.split())
'The-Quick-Brown-Fox'
</snippet></ROW><ROW><id>16689652</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'\s+', '-', 'The   Quick  \nBrown\t Fox')
'The-Quick-Brown-Fox'
</snippet></ROW><ROW><id>16689694</id><snippet>Counter</snippet></ROW><ROW><id>16689694</id><snippet>&gt;&gt;&gt; Counter(result).most_common()
[('b', 3), ('a', 2), ('c', 1)]
</snippet></ROW><ROW><id>16689694</id><snippet>Count</snippet></ROW><ROW><id>16689694</id><snippet>User.objects.filter(likes__icontains=keyword)
            .exclude(id=sesion)
            .annotate(total_likes=Count('likes'))
            .order_by('total_likes')
</snippet></ROW><ROW><id>16689776</id><snippet>__init__</snippet></ROW><ROW><id>16689776</id><snippet>LoginPage</snippet></ROW><ROW><id>16689776</id><snippet>self.driver.title()</snippet></ROW><ROW><id>16689776</id><snippet>self.driver.title</snippet></ROW><ROW><id>16689776</id><snippet>title</snippet></ROW><ROW><id>16689864</id><snippet>numpy.array</snippet></ROW><ROW><id>16690042</id><snippet>In [11]: df.apply(lambda row: (row['bar']*2 if row['foo'] == 'a' else row['xyz']), axis=1)
Out[11]:
0    0
1    2
2    4
3    0
4    0
dtype: int64

In [12]: df['xyz'] = df.apply(lambda row: (row['bar']*2 if row['foo'] == 'a' else row['xyz']), axis=1)

In [13]: df
Out[13]:
   bar foo  xyz
0    0   a    0
1    1   a    2
2    2   a    4
3    3   d    0
4    4   e    0
</snippet></ROW><ROW><id>16690042</id><snippet>In [21]: 2 * (df1.bar) * (df1.foo == 'a')
Out[21]:
0    0
1    2
2    4
3    0
4    0
dtype: int64
</snippet></ROW><ROW><id>16690797</id><snippet>n/log(n)</snippet></ROW><ROW><id>16690797</id><snippet>&gt;&gt;&gt; timeit.timeit('primes_list(1000)', 'from __main__ import primes_list', number=1000)
0.901777982711792
&gt;&gt;&gt; timeit.timeit('erat(1000)', 'from __main__ import erat', number=1000)
0.2097640037536621
</snippet></ROW><ROW><id>16690797</id><snippet>n=1000</snippet></ROW><ROW><id>16690797</id><snippet>10000</snippet></ROW><ROW><id>16690797</id><snippet>&gt;&gt;&gt; timeit.timeit('primes_list(10000)', 'from __main__ import primes_list', number=1000)
50.41101098060608
&gt;&gt;&gt; timeit.timeit('erat(10000)', 'from __main__ import erat', number=1000)
2.3083159923553467
</snippet></ROW><ROW><id>16690797</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; def erat2(n):
...     ar = np.ones(n, dtype=bool)
...     ar[0] = ar[1] = False
...     ar[4::2] = False
...     for j in xrange(3, n, 2):
...             if ar[j]:
...                     ar[j**2::2*j] = False
...     return ar.nonzero()[0]
... 
&gt;&gt;&gt; timeit.timeit('erat2(10000)', 'from __main__ import erat2', number=1000)
0.5136890411376953
</snippet></ROW><ROW><id>16690988</id><snippet>                      thisisinsane
                          |
                          |
                     (this)isinsane
                     /            \
                    /              \
          (this,i)sinsane         (this,is)insane
              /                     /           \
             /                     /             \
  (this,i,sin)ane          (this,is,in)sane    (this,is,insane)
                                /
                               /
                       (this,is,in,sane)
</snippet></ROW><ROW><id>16690988</id><snippet>False</snippet></ROW><ROW><id>16690988</id><snippet>prefix</snippet></ROW><ROW><id>16690988</id><snippet>False</snippet></ROW><ROW><id>16690988</id><snippet>def segment(string,wset):
    """Segments a string into words prefering longer words givens
    a dictionary wset."""
    # Sort wset in decreasing string order
    wset.sort(key=len, reverse=True)
    result = tokenize(string, wset, "")
    if result:
        result.pop() # Remove the empty string token
        result.reverse() # Put the list into correct order
        return result
    else:
        raise Exception("No possible segmentation!")

def tokenize(string, wset, token):
    """Returns either false if the string can't be segmented by 
    the current wset or a list of words that segment the string
    in reverse order."""
    # Are we done yet?
    if string == "":
        return [token]
    # Find all possible prefixes
    for pref in wset:
        if string.startswith(pref):
            res = tokenize(string.replace(pref, '', 1), wset, pref)
            if res:
                res.append(token)
                return res
    # Not possible
    return False

print segment("thisisinsane", ['this', 'is', 'in', 'insane']) # this is insane
print segment("shareasale", ['share', 'a', 'sale', 'as'])     # share a sale
print segment("asignas", ['as', 'sign', 'a'])                 # a sign as
</snippet></ROW><ROW><id>16691132</id><snippet>(CurrentTime*100)/TotalTime
</snippet></ROW><ROW><id>16691132</id><snippet>4</snippet></ROW><ROW><id>16691132</id><snippet>PlayedBufferPercent = float((CurrentTime*100)/TotalTime)
</snippet></ROW><ROW><id>16691132</id><snippet>4</snippet></ROW><ROW><id>16691132</id><snippet>4.0</snippet></ROW><ROW><id>16691132</id><snippet>PlayedBufferPercent = (CurrentTime*100.0)/TotalTime
</snippet></ROW><ROW><id>16691132</id><snippet>CurrentTime</snippet></ROW><ROW><id>16691132</id><snippet>TotalTime</snippet></ROW><ROW><id>16691132</id><snippet>4.95496</snippet></ROW><ROW><id>16691132</id><snippet>4.95495</snippet></ROW><ROW><id>16691259</id><snippet>chartReport = client.service.getChartReport(thd,ct)
</snippet></ROW><ROW><id>16691259</id><snippet>chartReport = filter(None, chartReport)
</snippet></ROW><ROW><id>16691275</id><snippet>'-'.join(str(x) for x in matchkey)
</snippet></ROW><ROW><id>16691783</id><snippet>self.board = [['']*size]*size
</snippet></ROW><ROW><id>16691783</id><snippet>self.board = [['']*size for x in range(size)]
</snippet></ROW><ROW><id>16691783</id><snippet>['']*size
[0]*size
</snippet></ROW><ROW><id>16692097</id><snippet>import threading
import time

class Typewriter(threading.Thread):
    def __init__(self, your_string):
        threading.Thread.__init__(self)
        self.my_string = your_string

    def run(self):
        for char in my_string:
            libtcod.console_print(0,3,3,char)
            time.sleep(50)

# make it type!
typer = Typewriter(your_string)
typer.start()
# wait for it to finish if you want to
typer.join()
</snippet></ROW><ROW><id>16692650</id><snippet>import re

number_regex = r'#define\s+VERSION_M[AJIN]+OR\s+(\d+)'

with open("guidefs.h") as f:
    your_text = f.read()
    all_numbers = re.findall(number_regex, your_text)
    # This will return ['2', '1']
</snippet></ROW><ROW><id>16692650</id><snippet>all_numbers = [int(x) for x in all_numbers]
# This will return [2, 1]
</snippet></ROW><ROW><id>16693268</id><snippet>np.min()</snippet></ROW><ROW><id>16693268</id><snippet>-6.34 * 10^-1</snippet></ROW><ROW><id>16693268</id><snippet>-0.634...</snippet></ROW><ROW><id>16693268</id><snippet>print "\n".join(["%+0.10f" % e for e in z])

-0.4261419570
-0.2265825520
-0.0072880768
+0.0272843324
-0.0559146620
-0.0000206062
+0.0000000011
-0.6341706230
+0.0507841198
-0.0001898886
</snippet></ROW><ROW><id>16693268</id><snippet>z &lt;= z.min()

array([[False],
       [False],
       [False],
       [False],
       [False],
       [False],
       [False],
       [ True],
       [False],
       [False]], dtype=bool)
</snippet></ROW><ROW><id>16693268</id><snippet>z[np.abs(z).argmin()]
</snippet></ROW><ROW><id>16693268</id><snippet>1.06954166e-09</snippet></ROW><ROW><id>16693268</id><snippet>1.069 * 10^-09</snippet></ROW><ROW><id>16693268</id><snippet>0.000000000106...</snippet></ROW><ROW><id>16693423</id><snippet>while True:
    try:
        print("Will select a random number between selected limits: 'x' and 'y'")
        x = int(input("x = "))
        y = int(input("y = "))
    except ValueError:
        print("Please enter a number") # don't break here, let loop repeat
    else:
        break # only break when there is no error
</snippet></ROW><ROW><id>16693883</id><snippet>while gtk.events_pending():
    gtk.main_iteration()
</snippet></ROW><ROW><id>16693883</id><snippet>create_image</snippet></ROW><ROW><id>16693883</id><snippet>def create_image(self, spinner, finishcb):
    spinner.start()

    def thread_run():
        # call heavy here
        heavy_ret = heavy()
        gobject.idle_add(cleanup, heavy_ret)

    def cleanup(heavy_ret):
        spinner.stop()
        t.join()
        finishcb(heavy_ret)

    # start "heavy" in a separate thread and immediately
    # return to mainloop
    t = threading.Thread(thread_run)
    t.start()
</snippet></ROW><ROW><id>16693883</id><snippet>create_image</snippet></ROW><ROW><id>16693883</id><snippet>image = self.create_image(spinner)
</snippet></ROW><ROW><id>16693883</id><snippet>self.create_image(spinner, self.store_created_image)
</snippet></ROW><ROW><id>16693903</id><snippet>&gt;&gt;&gt; dict1 = {"city":"","name":"yass","region":"","zipcode":"",
       "phone":"","address":"","tehsil":"", "planet":"mars"}
&gt;&gt;&gt; blacklist = {"planet","tehsil"}
&gt;&gt;&gt; {k: dict1[k] for k in dict1.viewkeys() - blacklist if dict1[k]}
{'name': 'yass'}
</snippet></ROW><ROW><id>16693903</id><snippet>&gt;&gt;&gt; whitelist = {'city', 'name', 'region', 'zipcode', 'phone', 'address'}
&gt;&gt;&gt; {k: dict1[k] for k in dict1.viewkeys() &amp; whitelist if dict1[k]}
{'name': 'yass'}
</snippet></ROW><ROW><id>16694242</id><snippet>show</snippet></ROW><ROW><id>16694242</id><snippet>initiateScan</snippet></ROW><ROW><id>16694242</id><snippet>show</snippet></ROW><ROW><id>16694242</id><snippet>sleep</snippet></ROW><ROW><id>16694546</id><snippet>...
def __int__(self):
    return self.score
...

test = MyObject(0, 0, 10, 0, 0)
print 10+int(test)

# Will output: 20
</snippet></ROW><ROW><id>16694820</id><snippet>&gt;&gt;&gt; import pymongo
&gt;&gt;&gt; conn = pymongo.MongoClient('localhost', 27017)
&gt;&gt;&gt; users = conn['test']['users']
&gt;&gt;&gt; users.remove()
&gt;&gt;&gt; users.insert({'twitter_id': '11111111'})
&gt;&gt;&gt; users.insert({'twitter_id': '22222222'})
&gt;&gt;&gt; for user in users.find():
    ...     print(user['twitter_id'])
    ... 
    11111111
    22222222
</snippet></ROW><ROW><id>16694820</id><snippet>$exists</snippet></ROW><ROW><id>16694820</id><snippet>Syntax: { field: { $exists: &lt;boolean&gt; } }</snippet></ROW><ROW><id>16694820</id><snippet>for friend in friends.find({ twitter_id: { $exists: true } }):
    print(friend['twitter_id'])
</snippet></ROW><ROW><id>16695064</id><snippet>O(nsteps * frames_in_step * values_in_frame * nodes)
</snippet></ROW><ROW><id>16695064</id><snippet>O(n^4)</snippet></ROW><ROW><id>16695064</id><snippet>dict</snippet></ROW><ROW><id>16695064</id><snippet>nodeID: (x,y,z)</snippet></ROW><ROW><id>16695064</id><snippet>O(1)</snippet></ROW><ROW><id>16695064</id><snippet>nodes_dict = { nodeID:(x,y,z) for nodeID, x, y, z in nodes }
</snippet></ROW><ROW><id>16695064</id><snippet>x, y, z = nodes_dict.get(int(v.nodeLabel))
</snippet></ROW><ROW><id>16695064</id><snippet>O(n^3)</snippet></ROW><ROW><id>16695064</id><snippet>v.data[x]</snippet></ROW><ROW><id>16695064</id><snippet>umax = max(v.data)</snippet></ROW><ROW><id>16695064</id><snippet>u1max = max(v.values[0]</snippet></ROW><ROW><id>16695064</id><snippet>u2max = max(v.values[1]</snippet></ROW><ROW><id>16695064</id><snippet>u3max = max(v.values[2]</snippet></ROW><ROW><id>16695064</id><snippet>umax = max(u1max, u2max, u3max)</snippet></ROW><ROW><id>16695064</id><snippet>umax</snippet></ROW><ROW><id>16695064</id><snippet>if abs(u1max) &gt;umax: #maximum UX
    umax=abs(u1max)
    tu='U1'
    stepumax=stepu1max
    nodeumax=nodeu1max
    incumax=incu1max
if abs(u2max) &gt;umax: #maximum UY
    umax=abs(u2max)
    tu='U2'
    stepumax=stepu2max
    nodeumax=nodeu2max
    incumax=incu2max
if abs(u3max) &gt;umax: #maximum UZ
    umax=abs(u3max)
    tu='U3'
    stepumax=stepu3max
    nodeumax=nodeu3max 
    incumax=incu3max
</snippet></ROW><ROW><id>16695064</id><snippet>uFmax</snippet></ROW><ROW><id>16695402</id><snippet>In [16]: df
Out[16]: 
    A Cust  Money
0  11    C     10
1  11    D     15
2  22    C     20
3  22    C     25
</snippet></ROW><ROW><id>16695402</id><snippet>In [17]: df['Money'][df['Cust'] == 'C'] *= -1
</snippet></ROW><ROW><id>16695402</id><snippet>In [18]: df.groupby('A').sum()
Out[18]: 
    Money
A        
11      5
22    -45
</snippet></ROW><ROW><id>16695402</id><snippet>In [17]</snippet></ROW><ROW><id>16695601</id><snippet>»»» from collections import defaultdict

»»» mydict = defaultdict(list)

»»» letters = ['a', 'b', 'a', 'c', 'a'] 

»»» for l in letters:
   ....:     mydict[l].append('1')
   ....:     

»»» mydict
Out[15]: defaultdict(&lt;type 'list'&gt;, {'a': ['1', '1', '1'], 'c': ['1'], 'b': ['1']})
</snippet></ROW><ROW><id>16695601</id><snippet>defaultdict</snippet></ROW><ROW><id>16696134</id><snippet>and</snippet></ROW><ROW><id>16696134</id><snippet>&gt; 2 &gt; 1 and 2 &gt; 3
True
</snippet></ROW><ROW><id>16696134</id><snippet>&amp;</snippet></ROW><ROW><id>16696134</id><snippet>&gt; 255 &amp; 1
1
</snippet></ROW><ROW><id>16696134</id><snippet>&amp;</snippet></ROW><ROW><id>16696134</id><snippet>intersection()</snippet></ROW><ROW><id>16696134</id><snippet>&gt;&gt;&gt; a = set([1, 2, 3])
&gt;&gt;&gt; b = set([3, 4, 5])
&gt;&gt;&gt; a &amp; b
set([3])
</snippet></ROW><ROW><id>16696134</id><snippet>and</snippet></ROW><ROW><id>16696134</id><snippet>set</snippet></ROW><ROW><id>16696134</id><snippet>False</snippet></ROW><ROW><id>16696134</id><snippet>&gt;&gt;&gt; a and b
set([3, 4, 5])
&gt;&gt;&gt; a and b and True
True
&gt;&gt;&gt; False and a and b and True
False
</snippet></ROW><ROW><id>16696134</id><snippet>dict1.viewkeys()</snippet></ROW><ROW><id>16696134</id><snippet>dict.viewkeys()</snippet></ROW><ROW><id>16696134</id><snippet>dict.viewvalues()</snippet></ROW><ROW><id>16696134</id><snippet>dict.viewitems()</snippet></ROW><ROW><id>16696134</id><snippet>dictview &amp; other</snippet></ROW><ROW><id>16696155</id><snippet>ImageResizeF.ResampleImage</snippet></ROW><ROW><id>16696155</id><snippet>def process_image(image):
    "Processes the image"
    image.resize((x, y), Image.ANTIALIAS) # or whatever you are doing to the image
    return image

image = Image.open('infile.tiff')
proc_image = process_image(image)
proc_image.save('outfile.tiff')
</snippet></ROW><ROW><id>16696221</id><snippet>&gt;&gt;&gt; 'íã'.replace(u"\u2019", u"\x27")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xa1 in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>16696221</id><snippet>&gt;&gt;&gt; u'íã'.replace(u"\u2019", u"\x27")
u'\xed\xe3'
</snippet></ROW><ROW><id>16696221</id><snippet>&gt;&gt;&gt; 'íã'.decode('cp850').replace(u"\u2019", u"\x27")
u'\xed\xe3'
</snippet></ROW><ROW><id>16696221</id><snippet>&gt;&gt;&gt; 'íã'.replace(u"\u2019".encode('utf-8'), u"\x27".encode('utf-8'))
'\xa1\xc6'
</snippet></ROW><ROW><id>16696282</id><snippet>key,rest = my_list[0],my_list[1:]
</snippet></ROW><ROW><id>16696300</id><snippet>uidb36=uid</snippet></ROW><ROW><id>16696300</id><snippet>token=token</snippet></ROW><ROW><id>16696317</id><snippet>def download_file(url):
    local_filename = url.split('/')[-1]
    # NOTE the stream=True parameter
    r = requests.get(url, stream=True)
    with open(local_filename, 'wb') as f:
        for chunk in r.iter_content(chunk_size=1024): 
            if chunk: # filter out keep-alive new chunks
                f.write(chunk)
                f.flush()
    return local_filename
</snippet></ROW><ROW><id>16696394</id><snippet>incrontab -e
</snippet></ROW><ROW><id>16696394</id><snippet>/folder/path/to/ready IN_CLOSE_WRITE /path/to/the/second/script/Script2.sh $#
</snippet></ROW><ROW><id>16696394</id><snippet>python script2.py $1
</snippet></ROW><ROW><id>16696413</id><snippet>foo.bar.baz.TheClass</snippet></ROW><ROW><id>16696413</id><snippet>def get_class(class_path):
    module_path, class_name = class_path.rsplit(".", 1)

    try:
        module = __import__(module_path, fromlist=[class_name])
    except ImportError:
        raise ValueError("Module '%s' could not be imported" % (module_path,))

    try:
        cls = getattr(module, class_name)
    except AttributeError:
        raise ValueError("Module '%s' has no class '%s'" % (module_path, class_name,))

    return cls
</snippet></ROW><ROW><id>16696413</id><snippet>&gt;&gt;&gt; get_class('twisted.internet.nonexistant.Deferred')

Traceback (most recent call last):
  File "&lt;pyshell#8&gt;", line 1, in &lt;module&gt;
    get_class('twisted.internet.nonexistant.Deferred')
  File "&lt;pyshell#1&gt;", line 7, in get_class
    raise ValueError("Module '%s' could not be imported" % (module_path,))
ValueError: Module 'twisted.internet.nonexistant' could not be imported
&gt;&gt;&gt; get_class('twisted.internet.defer.NoClass')

Traceback (most recent call last):
  File "&lt;pyshell#14&gt;", line 1, in &lt;module&gt;
    get_class('twisted.internet.defer.NoClass')
  File "&lt;pyshell#13&gt;", line 12, in get_class
    raise ValueError("Module '%s' has no class '%s'" % (module_path, class_name,))
ValueError: Module 'twisted.internet.defer' has no class 'NoClass'
&gt;&gt;&gt; get_class('twisted.internet.defer.Deferred')
&lt;class twisted.internet.defer.Deferred at 0x02B25DE0&gt;
</snippet></ROW><ROW><id>16696413</id><snippet>&gt;&gt;&gt; get_class('twisted.internet')
&lt;module 'twisted.internet' from 'C:\Python26\lib\site-packages\twisted\internet\__init__.pyc'&gt;
</snippet></ROW><ROW><id>16696768</id><snippet>connect()</snippet></ROW><ROW><id>16696768</id><snippet>remove()</snippet></ROW><ROW><id>16696768</id><snippet>None</snippet></ROW><ROW><id>16696768</id><snippet>connect()</snippet></ROW><ROW><id>16696768</id><snippet>remove</snippet></ROW><ROW><id>16696768</id><snippet>loadEmpathy.triggered.connect(self.taskTabs.remove)
</snippet></ROW><ROW><id>16696805</id><snippet>echo ".."|xargs -n1 |shuf|paste -d' ' -s
</snippet></ROW><ROW><id>16696805</id><snippet>kent$  echo "The quick brown fox jumped over the lazy dogs."|xargs -n1 |shuf|paste -d' ' -s
the jumped quick dogs. brown over lazy fox The
</snippet></ROW><ROW><id>16696805</id><snippet>shuf</snippet></ROW><ROW><id>16696805</id><snippet>sort -R</snippet></ROW><ROW><id>16697054</id><snippet>&gt;&gt;&gt; data = [[u'This is a string']]
&gt;&gt;&gt; data[0][0]
u'This is a string'
</snippet></ROW><ROW><id>16697054</id><snippet>u'...'</snippet></ROW><ROW><id>16697054</id><snippet>&gt;&gt;&gt; print data[0][0]
This is a string
</snippet></ROW><ROW><id>16697054</id><snippet>str</snippet></ROW><ROW><id>16697054</id><snippet>&gt;&gt;&gt; str(data[0][0])
'This is a string'
</snippet></ROW><ROW><id>16697196</id><snippet>from django.utils.text import slugify

def return_slug(firstname, lastname):

    # get a slug of the firstname and last name.
    # it will normalize the string and add dashes for spaces
    # i.e. 'HaRrY POTTer' -&gt; 'harry-potter'
    u_username = slugify(unicode('%s %s' % (firstname, lastname)))

    # split the username by the dashes, capitalize each part and re-combine
    # 'harry-potter' -&gt; 'Harry-Potter'
    u_username = '-'.join([x.capitalize() for x in u_username.split('-')])

    # count the number of users that start with the username
    count = User.objects.filter(username__startswith=u_username).count()
    if count == 0:
        return u_username
    else:
        return '%s-%d' % (u_username, count)
</snippet></ROW><ROW><id>16697417</id><snippet>tups = [(0,2), (3,6), (7,10), (11,14), (15,21), (600,612)]
int_list = [[1, 2, 4, 11, 12, 15, 17, 20, 22, 24], [2, 3, 5, 10, 13, 15, 18, 20, 23, 24]]

for a,b in tups:
    f = set(range(a,b+1))
    if all(f.intersection(x) for x in int_list):
        print (a,b)
</snippet></ROW><ROW><id>16697417</id><snippet>(0, 2)
(3, 6)
(11, 14)
(15, 21)
</snippet></ROW><ROW><id>16697625</id><snippet>Traceback (most recent call last):
  File ".\pypic.py", line 17, in &lt;module&gt;
    background=pygame.image.load(bif).convert()
pygame.error: Couldn't open bg.jpeg
</snippet></ROW><ROW><id>16697625</id><snippet>bif="bg.jpeg"
</snippet></ROW><ROW><id>16697625</id><snippet>bif="bg.jpg"
</snippet></ROW><ROW><id>16697625</id><snippet>import pygame
import sys
from pygame.locals import *

# Image variables
bif="bg.jpg"  # Have changed this from .jpeg to .jpg
mif="ball.png"

pygame.init()
screen_size = (640, 360)
screen=pygame.display.set_mode( screen_size, 0, 32)
background = pygame.image.load(bif).convert()
mouse_c = pygame.image.load(bif).convert_alpha()

while (True):
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()

    screen.blit(background, (0,0) )
    x,y = pygame.mouse.get_pos()
    x -= mouse_c.get_width() / 2
    y -= mouse_c.get_height() / 2
    screen.blit(mouse_c, (x, y))  # Had to change this because it said screeb!
    pygame.display.update()
</snippet></ROW><ROW><id>16697731</id><snippet>logging.config.dictConfig(yaml.load(open('logging.yaml', 'r')))
</snippet></ROW><ROW><id>16697732</id><snippet>from neo4jrestclient.client import All
</snippet></ROW><ROW><id>16697732</id><snippet>All.belongsTo</snippet></ROW><ROW><id>16697732</id><snippet>client</snippet></ROW><ROW><id>16697732</id><snippet>from neo4jrestclient import client
</snippet></ROW><ROW><id>16697847</id><snippet>executescript</snippet></ROW><ROW><id>16697936</id><snippet>from collections import defaultdict
lst = [['h2o', '2938', 'v1'], ['co2', '2492', 'v1'], ['co2', '2492', 'v2'], ['o3', '780', 'v2'], ['o3', '1140', 'v2']]
dd = defaultdict(lambda: defaultdict(list))
for a, b, c in lst:
    dd[a][b].append(c)    

&gt;&gt;&gt; dd
defaultdict(&lt;function &lt;lambda&gt; at 0xb6fb087c&gt;, {'h2o': defaultdict(&lt;type 'list'&gt;, {'2938': ['v1']}), 'co2': defaultdict(&lt;type 'list'&gt;, {'2492': ['v1', 'v2']}), 'o3': defaultdict(&lt;type 'list'&gt;, {'1140': ['v2'], '780': ['v2']})})
</snippet></ROW><ROW><id>16698063</id><snippet>normal_string = unicode_string.encode('utf-8')
</snippet></ROW><ROW><id>16698063</id><snippet>unicode_string = normal_string.decode('utf-8')
</snippet></ROW><ROW><id>16698633</id><snippet>vimap</snippet></ROW><ROW><id>16698736</id><snippet>print(lines[0].strip())</snippet></ROW><ROW><id>16698736</id><snippet>print(lines[0].strip(), lines[1].strip())</snippet></ROW><ROW><id>16698736</id><snippet>str</snippet></ROW><ROW><id>16698736</id><snippet>repr</snippet></ROW><ROW><id>16698736</id><snippet>str</snippet></ROW><ROW><id>16698736</id><snippet>print '({}, {})'.format(lines[0].strip(), lines[1].strip())
</snippet></ROW><ROW><id>16698736</id><snippet>print tuple(map(str, my_tuple))
</snippet></ROW><ROW><id>16698736</id><snippet>print '({})'.format(', '.join(map(str, my_tuple)))
</snippet></ROW><ROW><id>16698736</id><snippet>str</snippet></ROW><ROW><id>16698736</id><snippet>unicode</snippet></ROW><ROW><id>16698736</id><snippet>str</snippet></ROW><ROW><id>16698736</id><snippet>bytes</snippet></ROW><ROW><id>16698736</id><snippet>str</snippet></ROW><ROW><id>16698736</id><snippet>unicode</snippet></ROW><ROW><id>16698736</id><snippet>str</snippet></ROW><ROW><id>16698736</id><snippet>str</snippet></ROW><ROW><id>16698736</id><snippet>print(lines[0].strip(), lines[1].strip())</snippet></ROW><ROW><id>16698736</id><snippet>print</snippet></ROW><ROW><id>16698736</id><snippet>print</snippet></ROW><ROW><id>16698736</id><snippet>six.print_</snippet></ROW><ROW><id>16698736</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>16698736</id><snippet>str</snippet></ROW><ROW><id>16698736</id><snippet>unicode</snippet></ROW><ROW><id>16698736</id><snippet>repr</snippet></ROW><ROW><id>16698736</id><snippet>str</snippet></ROW><ROW><id>16698736</id><snippet>str</snippet></ROW><ROW><id>16698736</id><snippet>sys.stdio.write</snippet></ROW><ROW><id>16698736</id><snippet>str</snippet></ROW><ROW><id>16698736</id><snippet>unicode</snippet></ROW><ROW><id>16698736</id><snippet>sys.stdio</snippet></ROW><ROW><id>16698736</id><snippet>TextIOWrapper</snippet></ROW><ROW><id>16698736</id><snippet>str</snippet></ROW><ROW><id>16698736</id><snippet>bytes</snippet></ROW><ROW><id>16698736</id><snippet>sys.stdio</snippet></ROW><ROW><id>16698736</id><snippet>file</snippet></ROW><ROW><id>16698736</id><snippet>sys.stdio.wrapped_binary_file.write(s.encode(sys.stdio.encoding, sys.stdio.errors))

sys.stdio.write(s.encode(sys.getdefaultencoding()))
</snippet></ROW><ROW><id>16698736</id><snippet>print(sys.getdefaultencoding(), sys.stdout.encoding, f.encoding)</snippet></ROW><ROW><id>16698736</id><snippet>('ascii', 'UTF-8', None)</snippet></ROW><ROW><id>16698736</id><snippet>io.TextIOWrapper</snippet></ROW><ROW><id>16698736</id><snippet>codecs.StreamWriter</snippet></ROW><ROW><id>16698736</id><snippet>print &gt;&gt;f, …</snippet></ROW><ROW><id>16698736</id><snippet>f.write(…)</snippet></ROW><ROW><id>16698736</id><snippet>print</snippet></ROW><ROW><id>16698736</id><snippet>unicode</snippet></ROW><ROW><id>16698736</id><snippet>print '({})'.format(', '.join(element.encode('utf-8') for element in my_tuple)))
</snippet></ROW><ROW><id>16698765</id><snippet>READ_SENT = 0
PRE_DEPS = 1
DEPS = 2
POST_DEPS = 3
def parse_output(input):
    state = READ_SENT
    results = []
    sent = None
    deps = []
    for line in input.splitlines():
        if state == READ_SENT:
            sent = line
            state = PRE_DEPS
        elif state == PRE_DEPS:
             if line:
                 raise Exception('invalid format')
             else:
                 state = DEPS
         elif state == DEPS:
             if line:
                 deps.append(line)
             else:
                 state = POST_DEPS
         elif state == POST_DEPS:
             if line:
                 raise Exception('invalid format')
             else:
                 results.append((sent, deps))
                 sent = None
                 deps = []
                 state = READ_SENT
    return results
</snippet></ROW><ROW><id>16698876</id><snippet>x = 0 # some arbitrary context

# Define a simple function to return a wrapped class
def wrap_class(base, towrap):
    class ClassWrapper(base):
        def __getattribute__(self, name):
            original = base.__getattribute__(self, name)
            if name in towrap:
                def func_wrapper(*args, **kwargs):
                    global x
                    x = 1
                    try:
                        return original(*args, **kwargs)
                    finally:
                        x = 0
                return func_wrapper
            return original
    return ClassWrapper


# Our existing base class
class Base(object):
    def a(self):
       print "a x: %s" % x

    def b(self):
       print "b x: %s" % x


# Create a wrapped class in one line, without needing to define a new class
# for each class you want to wrap.
Wrapped = wrap_class(Base, ('a',))

# Now use it
m = Wrapped()
m.a()
m.b()

# ...or do it in one line...
m = wrap_class(Base, ('a',))()
</snippet></ROW><ROW><id>16698876</id><snippet>a x: 1
b x: 0
</snippet></ROW><ROW><id>16699042</id><snippet>import lxml.etree as ET

dom = ET.parse(xml_filename)
xslt = ET.parse(xsl_filename)
transform = ET.XSLT(xslt)
newdom = transform(dom)
print(ET.tostring(newdom, pretty_print=True))
</snippet></ROW><ROW><id>16699067</id><snippet>numpy.corrcoef</snippet></ROW><ROW><id>16699067</id><snippet>corr</snippet></ROW><ROW><id>16699067</id><snippet>numpy.cov</snippet></ROW><ROW><id>16699067</id><snippet>corrcoef</snippet></ROW><ROW><id>16699067</id><snippet>cov(a,a)  cov(a,b)

cov(a,b)  cov(b,b)
</snippet></ROW><ROW><id>16699067</id><snippet>[0][1]</snippet></ROW><ROW><id>16699067</id><snippet>cov(a,b)</snippet></ROW><ROW><id>16699067</id><snippet>for i in range(25):
    c2[i] = numpy.corrcoef(a[:,i], b, rowvar=0)[0][1]
</snippet></ROW><ROW><id>16699067</id><snippet>      corr (x,y) = cov (x,y) / (std (x) * std (y))
</snippet></ROW><ROW><id>16699067</id><snippet>z[k] = sum_n a[n] * conj(v[n+k])
</snippet></ROW><ROW><id>16699135</id><snippet>AND</snippet></ROW><ROW><id>16699135</id><snippet>US2002014866</snippet></ROW><ROW><id>16699135</id><snippet>JP1014866</snippet></ROW><ROW><id>16699135</id><snippet>US1014866</snippet></ROW><ROW><id>16699135</id><snippet>create table table1 (x1 varchar(20), y1 varchar(20)); 
create table table2 (x2 varchar(20), y2 varchar(20)); 
insert into table1 values ('US2002014866','foo1');
insert into table2 values ('US1014866','foo2');
insert into table2 values ('JP1014866','bar');

select *
from   table1
join   table2 on ( left(x1,2)= left(x2,2) and 
                  right(x1,5)=right(x2,5) )
</snippet></ROW><ROW><id>16699135</id><snippet>X1           Y1   X2        Y2
US2002014866 foo1 US1014866 foo2
</snippet></ROW><ROW><id>16699227</id><snippet>operator</snippet></ROW><ROW><id>16699227</id><snippet>import operator 

numeric_ops = 'add div floordiv mod mul pow sub truediv'.split()

def delegated_arithmetic(handler):
    def add_op_method(op, cls):
        op_func = getattr(operator, op)
        def delegated_op(self, k):
            getattr(self, handler)(lambda x: op_func(x, k))
        setattr(cls, '__{}__'.format(op), delegated_op)

    def add_reflected_op_method(op, cls):
        op_func = getattr(operator, op)
        def delegated_op(self, k):
            getattr(self, handler)(lambda x: op_func(k, x))
        setattr(cls, '__r{}__'.format(op), delegated_op)

    def decorator(cls):
        for op in numeric_ops:
            add_op_method(op, cls)
            add_reflected_op_method(op, cls) # reverted operation
            add_op_method('i' + op, cls)     # in-place operation
        return cls

    return decorator
</snippet></ROW><ROW><id>16699227</id><snippet>@delegated_arithmetic('_update')
class Foo:
    # ... other methods ...
    def _update(self, f):
        # ... returns a new Foo() object based on transforming
        #     one or more data members with a function f()
</snippet></ROW><ROW><id>16699227</id><snippet>&gt;&gt;&gt; @delegated_arithmetic('_update')
... class Foo(object):
...     def _update(self, f):
...         print 'Update called with {}'.format(f)
...         print f(10)
... 
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo + 10
Update called with &lt;function &lt;lambda&gt; at 0x107086410&gt;
20
&gt;&gt;&gt; foo - 10
Update called with &lt;function &lt;lambda&gt; at 0x107086410&gt;
0
&gt;&gt;&gt; 10 + foo
Update called with &lt;function &lt;lambda&gt; at 0x107086410&gt;
20
&gt;&gt;&gt; 10 - foo
Update called with &lt;function &lt;lambda&gt; at 0x107086410&gt;
0
</snippet></ROW><ROW><id>16699464</id><snippet>google.devrel.samples.ttt.init = function(apiRoot) {
  // Loads the OAuth and Tic Tac Toe APIs asynchronously, and triggers login
  // when they have completed.
  var apisToLoad;
  var callback = function() {
    if (--apisToLoad == 0) {
      google.devrel.samples.ttt.signin(true,
          google.devrel.samples.ttt.userAuthed);
    }
  }

  apisToLoad = 2; // must match number of calls to gapi.client.load()
  gapi.client.load('tictactoe', 'v1', callback, apiRoot);
  gapi.client.load('oauth2', 'v2', callback);

  var buttons = document.querySelectorAll('td');
  for (var i = 0; i &lt; buttons.length; i++) {
    var button = buttons[i];
    button.addEventListener('click', google.devrel.samples.ttt.clickSquare);
  }

  var reset = document.querySelector('#restartButton');
  reset.addEventListener('click', google.devrel.samples.ttt.resetGame);
};
</snippet></ROW><ROW><id>16699472</id><snippet>settings</snippet></ROW><ROW><id>16699472</id><snippet>_get_kwargs()</snippet></ROW><ROW><id>16699472</id><snippet>argparse.Namespace</snippet></ROW><ROW><id>16699472</id><snippet>parser.parse_args()</snippet></ROW><ROW><id>16699472</id><snippet>import settings  # possibly empty .py file
for name, val in vars(parser.parse_args(sys.argv[1:])).iteritems():
    setattr(settings, name, val)
</snippet></ROW><ROW><id>16699472</id><snippet>settings.py</snippet></ROW><ROW><id>16699472</id><snippet>import</snippet></ROW><ROW><id>16699472</id><snippet>sys.modules</snippet></ROW><ROW><id>16699472</id><snippet>types.ModuleType</snippet></ROW><ROW><id>16699472</id><snippet>import</snippet></ROW><ROW><id>16699500</id><snippet>scipy.linalg.cholesky</snippet></ROW><ROW><id>16699500</id><snippet>np.linalg.cholesky</snippet></ROW><ROW><id>16699500</id><snippet>scipy.linalg.cholesky</snippet></ROW><ROW><id>16699500</id><snippet>cholesky(a, lower=False, overwrite_a=False)
    Compute the Cholesky decomposition of a matrix.

    Returns the Cholesky decomposition, :math:`A = L L^*` or
    :math:`A = U^* U` of a Hermitian positive-definite matrix A.

    Parameters
    ----------
    a : ndarray, shape (M, M)
        Matrix to be decomposed
    lower : bool
        Whether to compute the upper or lower triangular Cholesky
        factorization.  Default is upper-triangular.
    overwrite_a : bool
        Whether to overwrite data in `a` (may improve performance).
</snippet></ROW><ROW><id>16699500</id><snippet>&gt;&gt;&gt; scipy.linalg.cholesky([[1,2], [1,9]])
array([[ 1.        ,  2.        ],
       [ 0.        ,  2.23606798]])
&gt;&gt;&gt; scipy.linalg.cholesky([[1,2], [1,9]], lower=True)
array([[ 1.        ,  0.        ],
       [ 1.        ,  2.82842712]])
&gt;&gt;&gt; np.linalg.cholesky([[1,2], [1,9]])
array([[ 1.        ,  0.        ],
       [ 1.        ,  2.82842712]])
</snippet></ROW><ROW><id>16699500</id><snippet>linalg.cholesky(C,lower=True)</snippet></ROW><ROW><id>16699500</id><snippet>&gt;&gt;&gt; Xnp
array([ 79621.02629287+0.j,  78060.96077912+0.j,  77110.92428806+0.j, ...,
        75526.55192199+0.j,  77110.92428806+0.j,  78060.96077912+0.j])
&gt;&gt;&gt; Xsp
array([ 79621.02629287+0.j,  78060.96077912+0.j,  77110.92428806+0.j, ...,
        75526.55192199+0.j,  77110.92428806+0.j,  78060.96077912+0.j])
&gt;&gt;&gt; np.allclose(Xnp, Xsp)
True
</snippet></ROW><ROW><id>16699522</id><snippet>q = db.GqlQuery("SELECT * FROM Person " +
     "WHERE last_name = :1 AND height &lt;= :2 " +
     "ORDER BY height DESC",
     "Smith", max_height)
</snippet></ROW><ROW><id>16699532</id><snippet>urlopen()</snippet></ROW><ROW><id>16699532</id><snippet>str</snippet></ROW><ROW><id>16699532</id><snippet>for word in urlopen(WORD_URL).readlines():
    WORDS.append(word.strip().decode('utf-8')) # utf-8 works in your case
</snippet></ROW><ROW><id>16699756</id><snippet>scriptJob</snippet></ROW><ROW><id>16699756</id><snippet>import maya.cmds as cmds

def refresher():
    # the function which does the closing/refreshing
    pass

cmds.scriptJob(e=["NewSceneOpened", refresher])
cmds.scriptJob(e=["SceneOpened", refresher])
cmds.scriptJob(e=["flushingScene", refresher])
</snippet></ROW><ROW><id>16699791</id><snippet>/etc/hosts</snippet></ROW><ROW><id>16699791</id><snippet>127.0.0.1 localhost
127.0.0.1 mymachinename localhost
</snippet></ROW><ROW><id>16699791</id><snippet>127.0.0.1 mymachinename localhost
</snippet></ROW><ROW><id>16699910</id><snippet>/sys/class/power_supply/BAT0
</snippet></ROW><ROW><id>16700097</id><snippet>craps</snippet></ROW><ROW><id>16700097</id><snippet>while</snippet></ROW><ROW><id>16700097</id><snippet>newRoll = random.randrange(1,7) + random.randrange(1,7)
while newRoll not in (7,dice):
    newRoll = random.randrange(1,7) + random.randrange(1,7)

if newRoll == dice:
    return 1
else:
    return  0
</snippet></ROW><ROW><id>16700231</id><snippet>import ctypes
lib = ctypes.CDLL("./libtest.so")
string_buffers = [ctypes.create_string_buffer(8) for i in range(4)]
pointers = (ctypes.c_char_p*4)(*map(ctypes.addressof, string_buffers))
lib.test(pointers)
results = [s.value for s in string_buffers]
print results
</snippet></ROW><ROW><id>16700231</id><snippet>gcc test.c -o libtest.so -shared -fPIC</snippet></ROW><ROW><id>16700231</id><snippet>#include &lt;string.h&gt;
void test(char **strings) {
    strcpy(strings[0],"this");
    strcpy(strings[1],"is");
    strcpy(strings[2],"a");
    strcpy(strings[3],"test!");
}
</snippet></ROW><ROW><id>16700231</id><snippet>import ctypes
pointers = [ctypes.addressof(ctypes.create_string_buffer(8)) for i in range(4)]
print pointers
</snippet></ROW><ROW><id>16700254</id><snippet>root.update_idletasks()</snippet></ROW><ROW><id>16700254</id><snippet>#Update the status with the filename
status_string = 'Status: Working on file: ' + str(filename)
status.set(status_string)
root.update_idletasks()
</snippet></ROW><ROW><id>16700254</id><snippet>statuslabel</snippet></ROW><ROW><id>16700254</id><snippet>fixFiles</snippet></ROW><ROW><id>16700254</id><snippet>update</snippet></ROW><ROW><id>16700254</id><snippet>update_idletasks</snippet></ROW><ROW><id>16700254</id><snippet>for-loop</snippet></ROW><ROW><id>16700254</id><snippet>for-loop</snippet></ROW><ROW><id>16700254</id><snippet>for-loop</snippet></ROW><ROW><id>16700254</id><snippet>root.after</snippet></ROW><ROW><id>16700254</id><snippet>from Tkinter import *
import tkFileDialog
import os
import sys
import time


def startFixFiles():
    inputFilePath = tkFileDialog.askdirectory()
    # inputFilePath= input_dir.get()

    # Build a list of files in a directory
    fileList = os.listdir(inputFilePath)
    def fixFiles():
        try:
            filename = fileList.pop()
        except IndexError:
            return
        try:
            with open(os.path.join(inputFilePath, filename), 'r') as infile:
                # Update the status with the filename
                status_string = 'Status: Working on file: ' + str(filename)
                status.set(status_string)
                for line in infile:
                    # Do some stuff here
                    pass
        except IOError:
            # You might get here if file is unreadable, you don't have read permission,
            # or the file might be a directory...
            pass
        root.after(250, fixFiles)
    root.after(10, fixFiles)

class App:
    def __init__(self, master):
        i = 0
        status.set("Status: Press 'Fix Files!'")
        statuslabel = Label(
            master, textvariable=status, relief=RIDGE, width=65,
            pady=5, anchor=W)
        bFixFiles = Button(root, text='Fix Files!', command=startFixFiles)
        bQuit = Button(root, text='Quit', command=root.destroy)

        statuslabel.grid(row=i, column=0, columnspan=2)
        bFixFiles.grid(row=i, column=2, sticky=E)
        bQuit.grid(row=i, column=3, sticky=W)

root = Tk()
root.title("FIX Files")
input_dir = StringVar()
status = StringVar()
choice = IntVar()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>16700254</id><snippet>root.after</snippet></ROW><ROW><id>16700254</id><snippet>for-loop</snippet></ROW><ROW><id>16700254</id><snippet>status.set</snippet></ROW><ROW><id>16700254</id><snippet>import Tkinter as tk
import multiprocessing as mp
import tkFileDialog
import os
import Queue

sentinel = None

def long_running_worker(inputFilePath, outqueue):
    # Build a list of files in a directory
    fileList = os.listdir(inputFilePath)  
    for filename in fileList:
        try:
            with open(os.path.join(inputFilePath, filename), 'r') as infile:
                # Update the status with the filename
                status_string = 'Status: Working on file: ' + str(filename)
                outqueue.put(status_string)
                for line in infile:
                    # Do some stuff here
                    pass
        except IOError:
            # You might get here if file is unreadable, you don't have read permission,
            # or the file might be a directory...
            pass
    # Put the sentinel in the queue to tell update_status to end
    outqueue.put(sentinel)

class App(object):
    def __init__(self, master):
        self.status = tk.StringVar()
        self.status.set("Status: Press 'Fix Files!'")
        self.statuslabel = tk.Label(
            master, textvariable=self.status, relief=tk.RIDGE, width=65,
            pady=5, anchor='w')
        bFixFiles = tk.Button(root, text='Fix Files!', command=self.startFixFiles)
        bQuit = tk.Button(root, text='Quit', command=root.destroy)
        self.statuslabel.grid(row=1, column=0, columnspan=2)
        bFixFiles.grid(row=0, column=0, sticky='e')
        bQuit.grid(row=0, column=1, sticky='e')

    def update_status(self, outqueue):
        try:
            status_string = outqueue.get_nowait()
            if status_string is not sentinel:
                self.status.set(status_string)
                root.after(250, self.update_status, outqueue)
            else:
                # By not calling root.after here, we allow update_status to truly end
                pass
        except Queue.Empty:
            root.after(250, self.update_status, outqueue)

    def startFixFiles(self):
        inputFilePath = tkFileDialog.askdirectory()
        # Start long running process
        outqueue = mp.Queue()    
        proc = mp.Process(target=long_running_worker, args=(inputFilePath, outqueue))
        proc.daemon = True
        proc.start()
        # Start a function to check a queue for GUI-related updates
        root.after(250, self.update_status, outqueue)

root = tk.Tk()
root.title("FIX Files")
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>16700287</id><snippet>def foo(arg=3):
    print arg
</snippet></ROW><ROW><id>16700287</id><snippet>kw arg zero  #Not valid identifier -- Can't have spaces
"kw arg zero" #Not valid identifier -- It's parsed as a string (expression)
</snippet></ROW><ROW><id>16700287</id><snippet>dict("kw arg zero" = 6)
</snippet></ROW><ROW><id>16700287</id><snippet>myValidFunc("kw arg zero" = 6)
</snippet></ROW><ROW><id>16700287</id><snippet>**kwargs</snippet></ROW><ROW><id>16700360</id><snippet>open("C:\\images\\"+str(cnt)+".jpg", 'wb')</snippet></ROW><ROW><id>16700468</id><snippet>TCP</snippet></ROW><ROW><id>16700508</id><snippet>method='get'
</snippet></ROW><ROW><id>16700508</id><snippet>method='post'
</snippet></ROW><ROW><id>16700508</id><snippet>self.request.POST</snippet></ROW><ROW><id>16700508</id><snippet>def post(self):
    file = self.request.POST['file']
    self.response.out.write(file)
</snippet></ROW><ROW><id>16700874</id><snippet>for line in lines:
    for typeoftile in range(0, len(line)):
        if str(typeoftile) == "g":
            screen.blit(grass, (xco*xscale, yco*yscale))
            xco = xco + 1
</snippet></ROW><ROW><id>16700874</id><snippet>for line in lines:
    for index in range(0, len(line)):
        typeoftile = line[index]
        if str(typeoftile) == "g":
            screen.blit(grass, (xco*xscale, yco*yscale))
            xco = xco + 1
</snippet></ROW><ROW><id>16700874</id><snippet>for line in lines:
    for typeoftile in line:
        if str(typeoftile) == "g":
            screen.blit(grass, (xco*xscale, yco*yscale))
            xco = xco + 1
</snippet></ROW><ROW><id>16700918</id><snippet>plat/xulhelper.py:pcfIDTVVLCRenderer = components.interfaces.pcfIDTVVLCRenderer
</snippet></ROW><ROW><id>16700918</id><snippet>from xpcom import components
</snippet></ROW><ROW><id>16700950</id><snippet>def name_add(a,b):
    try:
        return a+b
    except TypeError:
        print 'The + operator is not defined for a and b'
        return None
</snippet></ROW><ROW><id>16700950</id><snippet>def main(argv):
    """Main program for the nc2pdf utility.

    :argv: command line arguments
    """
    if len(argv) == 1: # No filenames given, only the name of the script
        binary = os.path.basename(argv[0])
        print __proginfo__
        print "Usage: {} [file ...]".format(binary)
        print
        sys.exit(0)
    del argv[0]
    for fn in argv: # Loop over all the files
        try:
            ofn = outname(fn) # outname can raise ValueError...
            with open(fn, 'r') as inf: # Open can raise IOError
                rd = inf.read()
        except ValueError:
            fns = "Cannot construct output filename. Skipping file '{}'."
            print fns.format(fn)
            continue
        except IOError:
            print "Cannot open the file '{}'. Skipping it.".format(fn)
            continue
        ... # do something with the file's data
</snippet></ROW><ROW><id>16700973</id><snippet>delattr</snippet></ROW><ROW><id>16701073</id><snippet>.groups()</snippet></ROW><ROW><id>16701073</id><snippet>.group()</snippet></ROW><ROW><id>16701073</id><snippet>&gt;&gt;&gt; re.search('([AB])([AB])', 'BA').groups()
('B', 'A')
&gt;&gt;&gt; re.search('([AB])([AB])', 'BA').group()
'BA'
&gt;&gt;&gt; re.search('([AB])([AB])', 'BA').group(1)
'B'
&gt;&gt;&gt; re.search('([AB])([AB])', 'BA').group(2)
'A'
&gt;&gt;&gt; re.search('([AB])([AB])', 'BA').group(0)
'BA'
</snippet></ROW><ROW><id>16701073</id><snippet>re</snippet></ROW><ROW><id>16701073</id><snippet>.group()</snippet></ROW><ROW><id>16701073</id><snippet>'([AB])\1'
</snippet></ROW><ROW><id>16701073</id><snippet>\1</snippet></ROW><ROW><id>16701073</id><snippet>&gt;&gt;&gt; re.search(r'([AB])\1', 'BA')
&gt;&gt;&gt; re.search(r'([AB])\1', 'BB')
&lt;_sre.SRE_Match object at 0x107098210&gt;
</snippet></ROW><ROW><id>16701073</id><snippet>BB</snippet></ROW><ROW><id>16701073</id><snippet>BA</snippet></ROW><ROW><id>16701073</id><snippet>'(?P&lt;a_or_b&gt;[AB])(?P=a_or_b)'
</snippet></ROW><ROW><id>16701073</id><snippet>a_or_b</snippet></ROW><ROW><id>16701538</id><snippet>''.join(c for c in x if c != '\n')
</snippet></ROW><ROW><id>16701574</id><snippet>'Use%'</snippet></ROW><ROW><id>16701574</id><snippet>e</snippet></ROW><ROW><id>16701574</id><snippet>%</snippet></ROW><ROW><id>16701574</id><snippet>&gt;&gt;&gt; re.search('.\\b','Use%').group(0)
'e'
</snippet></ROW><ROW><id>16701594</id><snippet>resource.getrusage</snippet></ROW><ROW><id>16701594</id><snippet>import resource
info = resource.getrusage(resource.RUSAGE_CHILDREN)
</snippet></ROW><ROW><id>16701594</id><snippet>ctypes</snippet></ROW><ROW><id>16701606</id><snippet>prog = re.compile('\[([^\]]*)\]\s*\[([^\]]*)\]\s*(.*)')

for mystr in string_list:
    result = prog.match(mystr)
    groups = result.groups()
</snippet></ROW><ROW><id>16701751</id><snippet>.tail</snippet></ROW><ROW><id>16701751</id><snippet>&gt;&gt;&gt; from xml.etree import ElementTree
&gt;&gt;&gt; example = ElementTree.fromstring('''\
... &lt;a&gt;
... hello
... &lt;B&gt;
... there
... &lt;/B&gt;
... How was your day.
... &lt;/a&gt;
... '''
... )
&gt;&gt;&gt; example
&lt;Element 'a' at 0x10715d150&gt;
&gt;&gt;&gt; example.text
'\nhello\n'
&gt;&gt;&gt; example.find('B')
&lt;Element 'B' at 0x10715d7d0&gt;
&gt;&gt;&gt; example.find('B').text
'\nthere\n'
&gt;&gt;&gt; example.find('B').tail
'\nHow was your day.\n'
</snippet></ROW><ROW><id>16701843</id><snippet>fileinput</snippet></ROW><ROW><id>16701843</id><snippet>import fileinput
import sys

for line in fileinput.input(filename, inplace=True):
    if line.startswith('char id='):
        _, id_, rest = line.split(None, 2)
        id_ = int(id_.split('=')[1])
        id_ += 1  # adjust as needed
        line = 'char id={} {}'.format(id_, rest)

    sys.stdout.write(line)
</snippet></ROW><ROW><id>16701843</id><snippet>id</snippet></ROW><ROW><id>16701843</id><snippet>id_</snippet></ROW><ROW><id>16701843</id><snippet>inplace=True</snippet></ROW><ROW><id>16701843</id><snippet>fileinput</snippet></ROW><ROW><id>16701843</id><snippet>stdout</snippet></ROW><ROW><id>16701896</id><snippet>delimiter='  '   #two spaces
</snippet></ROW><ROW><id>16701896</id><snippet>np.loadtxt</snippet></ROW><ROW><id>16701896</id><snippet>import numpy as np
from StringIO import StringIO # for example file

a = StringIO("""family  id  mum  dad  rs1  rs2  rs3  rs4  rs5  rs6  rs7  rs8  rs9  rs10  rs11  rs12
1  1   4   6   A T  A A  T T  C C  G G  A T  A G  A A  G A  T A  G G  C C 
2  2   7   9   T A  G A  C T  C T  G A  T T  A A  A C  G G  T A  C C  C T 
3  3   2   8   T T  G G  C T  C T  G G  A T  A G  A C  G G  T T  C C  C C 
4  4   5   1   A A  A A  T T  C C  G A  T T  A A  A A  G A  T A  G C  C T """)


nrs = 12        # number of `rs` columns, for dtype
dt = 'int,'*4 + 'S10,'*nrs

A = np.genfromtxt(a, delimiter='  ', names=True, dtype=dt)
</snippet></ROW><ROW><id>16701896</id><snippet>A</snippet></ROW><ROW><id>16701896</id><snippet>array([ (1, 1, 4, 6, ' A T', 'A A', 'T T', 'C C', 'G G', 'A T', 'A G', 'A A', 'G A', 'T A', 'G G', 'C C'),
       (2, 2, 7, 9, ' T A', 'G A', 'C T', 'C T', 'G A', 'T T', 'A A', 'A C', 'G G', 'T A', 'C C', 'C T'),
       (3, 3, 2, 8, ' T T', 'G G', 'C T', 'C T', 'G G', 'A T', 'A G', 'A C', 'G G', 'T T', 'C C', 'C C'),
       (4, 4, 5, 1, ' A A', 'A A', 'T T', 'C C', 'G A', 'T T', 'A A', 'A A', 'G A', 'T A', 'G C', 'C T')], 
      dtype=[('family', '&lt;i8'), ('id', '&lt;i8'), ('mum', '&lt;i8'), ('dad', '&lt;i8'), ('rs1', 'S10'), ('rs2', 'S10'), ('rs3', 'S10'), ('rs4', 'S10'), ('rs5', 'S10'), ('rs6', 'S10'), ('rs7', 'S10'), ('rs8', 'S10'), ('rs9', 'S10'), ('rs10', 'S10'), ('rs11', 'S10'), ('rs12', 'S10')])
</snippet></ROW><ROW><id>16701896</id><snippet>B</snippet></ROW><ROW><id>16701896</id><snippet>b = StringIO("""1  rs1 2345
1  rs2 2346
2  rs5 2348
4  rs8 2351
4 rs12 2360""")

B = np.genfromtxt(b, usecols=[1], dtype='S10')
</snippet></ROW><ROW><id>16701896</id><snippet>A[B]</snippet></ROW><ROW><id>16701896</id><snippet>A[B]
array([(' A T', 'A A', 'G G', 'A A', 'C C'),
       (' T A', 'G A', 'G A', 'A C', 'C T'),
       (' T T', 'G G', 'G G', 'A C', 'C C'),
       (' A A', 'A A', 'G A', 'A A', 'C T')], 
      dtype=[('rs1', 'S10'), ('rs2', 'S10'), ('rs5', 'S10'), ('rs8', 'S10'), ('rs12', 'S10')])
</snippet></ROW><ROW><id>16701896</id><snippet>A[['family', 'id', 'mum', 'dad'] + list(B)]
array([(1, 1, 4, 6, ' A T', 'A A', 'G G', 'A A', 'C C'),
       (2, 2, 7, 9, ' T A', 'G A', 'G A', 'A C', 'C T'),
       (3, 3, 2, 8, ' T T', 'G G', 'G G', 'A C', 'C C'),
       (4, 4, 5, 1, ' A A', 'A A', 'G A', 'A A', 'C T')], 
      dtype=[('family', '&lt;i8'), ('id', '&lt;i8'), ('mum', '&lt;i8'), ('dad', '&lt;i8'), ('rs1', 'S10'), ('rs2', 'S10'), ('rs5', 'S10'), ('rs8', 'S10'), ('rs12', 'S10')])
</snippet></ROW><ROW><id>16702165</id><snippet>page = driver.find_elements_by_xpath('//td[@class="mceIframeContainer mceFirst mceLast"]')[1]
</snippet></ROW><ROW><id>16702395</id><snippet>index.py</snippet></ROW><ROW><id>16702395</id><snippet>index.(html|cgi|pl|etc.)</snippet></ROW><ROW><id>16702395</id><snippet>index.py</snippet></ROW><ROW><id>16702395</id><snippet>my_webpage = """
Content Type: text/html\n\n

&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Python-generated text!&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;I just made an HTML page with Python!&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
"""
print(my_webpage)
# now that that's out of the way, let's run our script
import stuff

def myfunc():
    # awesomeness goes here...
</snippet></ROW><ROW><id>16702395</id><snippet>http://www.yourserver.com/</snippet></ROW><ROW><id>16702395</id><snippet>index.py</snippet></ROW><ROW><id>16702478</id><snippet>mydict = {a:'foo', b:'bar', c:'spam', d:'eggs'}

boxes = [a, b, c]

for box in boxes:
   print('text=%s' % mydict[box])
</snippet></ROW><ROW><id>16702499</id><snippet>#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

/* https://github.com/scottt/debugbreak */
#include &lt;debugbreak/debugbreak.h&gt;

struct T {
    char *name;
};

int main()
{
    struct T t, *p = &amp;t;
    t.name = strdup("name1");
    debug_break();
    printf("%s\n", p-&gt;name);
    return 0;
}
</snippet></ROW><ROW><id>16702499</id><snippet>import gdb

gdb.execute('set python print-stack full')
gdb.execute('set confirm off')
gdb.execute('file name1')
gdb.execute('run')

name_in_program = gdb.parse_and_eval('p-&gt;name').string()
gdb.write('Please input name: ')
name = raw_input()
while name != name_in_program:
    gdb.write('Please try another name: ')
    name = raw_input()

gdb.execute('quit')
</snippet></ROW><ROW><id>16702499</id><snippet>$ gdb -q -x input-name.py

Program received signal SIGTRAP, Trace/breakpoint trap.
main () at name1.c:16
16      printf("%s\n", p-&gt;name);
Please input name: nameX
Please try another name: name1

$
</snippet></ROW><ROW><id>16702539</id><snippet>list2[0:1234567890]
</snippet></ROW><ROW><id>16702539</id><snippet>list2[-1:-1]
</snippet></ROW><ROW><id>16702539</id><snippet>&gt;&gt;&gt; list2[0:1]
['Bangalore']
&gt;&gt;&gt; list2[0:0]
[]
</snippet></ROW><ROW><id>16702539</id><snippet>list2[0:len(list2)]</snippet></ROW><ROW><id>16702539</id><snippet>list2</snippet></ROW><ROW><id>16702539</id><snippet>0</snippet></ROW><ROW><id>16702539</id><snippet>list2[0:len(list2)]</snippet></ROW><ROW><id>16702539</id><snippet>list2[:]</snippet></ROW><ROW><id>16702539</id><snippet>list2[:len(list2)-1]</snippet></ROW><ROW><id>16702539</id><snippet>list2[:-1]</snippet></ROW><ROW><id>16702622</id><snippet>x**-1/2</snippet></ROW><ROW><id>16703141</id><snippet>DictReader</snippet></ROW><ROW><id>16703141</id><snippet>import csv
import StringIO

predfile = StringIO.StringIO(
'''x1,x2
1,2
3,4''')

def func(x1, x2):
    x1 = int(x1)
    x2 = int(x2)
    return 1 + 2*x1 + 3*x2

reader = csv.DictReader( predfile , delimiter=',' ) # header is handled automatically
for row in reader:
    print func(**row)
</snippet></ROW><ROW><id>16703193</id><snippet>&gt;</snippet></ROW><ROW><id>16703193</id><snippet>&lt;</snippet></ROW><ROW><id>16703193</id><snippet>import re

re.split('(?&lt;=&gt;)\s+(?=&lt;)', line)
</snippet></ROW><ROW><id>16703193</id><snippet>\s+</snippet></ROW><ROW><id>16703193</id><snippet>&gt;</snippet></ROW><ROW><id>16703193</id><snippet>&lt;</snippet></ROW><ROW><id>16703193</id><snippet>(?&lt;=...)</snippet></ROW><ROW><id>16703193</id><snippet>&gt;</snippet></ROW><ROW><id>16703193</id><snippet>(?=...)</snippet></ROW><ROW><id>16703193</id><snippet>(?=&lt;)</snippet></ROW><ROW><id>16703193</id><snippet>&lt;</snippet></ROW><ROW><id>16703193</id><snippet>\s+</snippet></ROW><ROW><id>16703193</id><snippet>&gt;</snippet></ROW><ROW><id>16703193</id><snippet>&lt;</snippet></ROW><ROW><id>16703193</id><snippet>&gt;</snippet></ROW><ROW><id>16703193</id><snippet>&lt;</snippet></ROW><ROW><id>16703193</id><snippet>&gt;&gt;&gt; re.split('(?&lt;=&gt;)\s+(?=&lt;)', '&lt;a&gt; &lt;b&gt; &lt;c&gt; &lt;This is a string&gt;')
['&lt;a&gt;', '&lt;b&gt;', '&lt;c&gt;', '&lt;This is a string&gt;']
&gt;&gt;&gt; re.split('(?&lt;=&gt;)\s+(?=&lt;)', '''&lt;World Bank&gt; &lt;provides&gt; &lt;loans for&gt; &lt;"a Country's Welfare"&gt;''')
['&lt;World Bank&gt;', '&lt;provides&gt;', '&lt;loans for&gt;', '&lt;"a Country\'s Welfare"&gt;']
&gt;&gt;&gt; re.split('(?&lt;=&gt;)\s+(?=&lt;)', '&lt;Facebook&gt; &lt;is a&gt; &lt;social networking site&gt; &lt;"Happy Facebooking =&gt; Enjoy"&gt;')
['&lt;Facebook&gt;', '&lt;is a&gt;', '&lt;social networking site&gt;', '&lt;"Happy Facebooking =&gt; Enjoy"&gt;']
</snippet></ROW><ROW><id>16703213</id><snippet>stdin</snippet></ROW><ROW><id>16703213</id><snippet>my-bucket</snippet></ROW><ROW><id>16703213</id><snippet>from mrjob.job import MRJob
from mrjob.emr import EMRJobRunner

class MRS3KeyProcessor(MRJob):
    # Do some MRJob stuff.
    ...

def s3_name_generator(bucket):
    """Generator that returns boto.s3.Key names.
    """
    # Could also use raw boto here.
    emr = EMRJobRunner()
    key_stream = emr.fs.get_s3_keys(bucket)
    for key in key_stream:
        yield key.name

def main():
    # The '-' argument signifies that we use stdin.
    mr_job = MRCountS3Objects(['--runner', 'inline', '-'])
    stdin = s3_name_generator('my-bucket')
    mr_job.stdin = stdin
    results = []
    with mr_job.make_runner() as runner:
        runner.run()
        for line in runner.stream_output():
            key, value = mr_job.parse_output_line(line)
            results.append((key, value))
    print(results)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16703214</id><snippet>while True:
    try:
        line = raw_input()
    except EOFError:
        if not line: break
</snippet></ROW><ROW><id>16703214</id><snippet>value = None
while True:
    try:
        line = raw_input()
        if not line: break
        else:
            value = int(line)
            break
    except ValueError:
        print "You have not provided a valid integer"
</snippet></ROW><ROW><id>16703214</id><snippet>try:
    print dirlist[line]
except IndexError:
    print "Nope, that element does not exists..."
</snippet></ROW><ROW><id>16703358</id><snippet>QAction</snippet></ROW><ROW><id>16703358</id><snippet>QPushButton</snippet></ROW><ROW><id>16703358</id><snippet>QPushButton</snippet></ROW><ROW><id>16703358</id><snippet>addAction</snippet></ROW><ROW><id>16703358</id><snippet>QWidget.addAction</snippet></ROW><ROW><id>16703358</id><snippet>QToolButton</snippet></ROW><ROW><id>16703358</id><snippet>setDefaultAction</snippet></ROW><ROW><id>16703358</id><snippet>QPushButton</snippet></ROW><ROW><id>16703358</id><snippet>setDefaultAction</snippet></ROW><ROW><id>16703395</id><snippet>while</snippet></ROW><ROW><id>16703395</id><snippet>count</snippet></ROW><ROW><id>16703395</id><snippet>return</snippet></ROW><ROW><id>16703395</id><snippet>while</snippet></ROW><ROW><id>16703395</id><snippet>def run():
    count = 1
    while count&lt;11:
        count=count+1
    return count
</snippet></ROW><ROW><id>16703399</id><snippet>|</snippet></ROW><ROW><id>16703399</id><snippet>&gt;</snippet></ROW><ROW><id>16703467</id><snippet>if( !cam.isOpened() )
  throw "Error when reading image file";
</snippet></ROW><ROW><id>16703467</id><snippet>Mat frame;

for( ; ; )
{
    cam &gt;&gt; frame;
    if(!frame)
        break;
    imshow("w", frame);
    waitKey(20);
}
</snippet></ROW><ROW><id>16703467</id><snippet>cam.get(CV_CAP_PROP_FRAME_COUNT)
</snippet></ROW><ROW><id>16703473</id><snippet>f = open("struct.txt")

for line in f:
    vals = [item for item in line.strip().split("\t") if item != '']
    if len(vals):
        print(vals[2])

f.close()
</snippet></ROW><ROW><id>16703473</id><snippet>&gt; python so_16703270.py
KEYWORD
автостраховка
страховкаавто
страховка автомобиля
</snippet></ROW><ROW><id>16703482</id><snippet>'txtsummary'</snippet></ROW><ROW><id>16703482</id><snippet>'txtsummary'</snippet></ROW><ROW><id>16703482</id><snippet>driver.switch_to_default_content()</snippet></ROW><ROW><id>16703537</id><snippet>routes_in = (
  ('/user', '/login'),
)

routes_out = (
  ('/user', '/'),
)
</snippet></ROW><ROW><id>16703537</id><snippet>web2py/routes.py</snippet></ROW><ROW><id>16703686</id><snippet>seek</snippet></ROW><ROW><id>16703686</id><snippet>flush</snippet></ROW><ROW><id>16703686</id><snippet>from django.core.servers.basehttp import FileWrapper
import StringIO

def aux_pizarra(request):

    myfile = StringIO.StringIO()
    myfile.write("hello")       
    myfile.flush()
    myfile.seek(0) # move the pointer to the beginning of the buffer
    response = HttpResponse(FileWrapper(myfile), content_type='text/plain')
    response['Content-Disposition'] = 'attachment; filename=prueba.txt'
    return response
</snippet></ROW><ROW><id>16703686</id><snippet>&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; s = StringIO.StringIO()
&gt;&gt;&gt; s.write('hello')
&gt;&gt;&gt; s.readlines()
[]
&gt;&gt;&gt; s.seek(0)
&gt;&gt;&gt; s.readlines()
['hello']
</snippet></ROW><ROW><id>16703686</id><snippet>seek</snippet></ROW><ROW><id>16703762</id><snippet>keys = list(dict1.viewkeys() | dict2.viewkeys())
import numpy
numpy.corrcoef(
    [dict1.get(x, 0) for x in keys],
    [dict2.get(x, 0) for x in keys])[0, 1]
</snippet></ROW><ROW><id>16703786</id><snippet>import math, sys, os, pygame, random, time

pygame.init()
screen = pygame.display.set_mode((500,500))
pygame.display.set_caption('Example')

black = ( 0, 0, 0)

def shapeBlit():
    screen.fill(white)
    smiley = pygame.image.load('picture.jpg')
    x = random.randint(1,100)
    y = random.randint(1,100)
    screen.blit(smiley,(x,y))

c = 0

done = False
while done==False:
    for event in pygame.event.get(): # User did something
        if event.type == pygame.QUIT: # If user clicked close
            done=True # Flag that we are done so we exit this loop

    screen.fill(black)
    while c == 0:
        shapeBlit()
        pygame.display.flip()
        time.sleep(5)
pygame.quit()
</snippet></ROW><ROW><id>16704033</id><snippet>import io
import pandas as pd

text = '''\
control  dose_high  dose_low gender  participant
0      4          6         4      m            1
1      3          5         5      f            2
1      2          8         6      m            3'''

df = pd.read_csv(io.BytesIO(text), sep='\s+')
result = pd.melt(df, id_vars=['participant', 'gender'])
print(result)
</snippet></ROW><ROW><id>16704033</id><snippet>   participant gender   variable  value
0            1      m    control      4
1            2      f    control      3
2            3      m    control      2
3            1      m  dose_high      6
4            2      f  dose_high      5
5            3      m  dose_high      8
6            1      m   dose_low      4
7            2      f   dose_low      5
8            3      m   dose_low      6
</snippet></ROW><ROW><id>16704079</id><snippet>result = np.einsum('ijk,i -&gt; jk', data, vector)
</snippet></ROW><ROW><id>16704079</id><snippet>In [36]: data = np.array ([[[1,1,1,1],[2,2,2,2],[3,3,3,3]], [[3,3,3,3],[4,4,4,4],[5,5,5,5]]])

In [37]: vector = np.array ([10,20])

In [38]: np.einsum('ijk,i -&gt; jk', data, vector)
Out[38]: 
array([[ 70,  70,  70,  70],
       [100, 100, 100, 100],
       [130, 130, 130, 130]])
</snippet></ROW><ROW><id>16704079</id><snippet>np.einsum</snippet></ROW><ROW><id>16704079</id><snippet>vector</snippet></ROW><ROW><id>16704079</id><snippet>In [64]: (data * vector[:,None,None]).sum(axis=0)
Out[64]: 
array([[ 70,  70,  70,  70],
       [100, 100, 100, 100],
       [130, 130, 130, 130]])
</snippet></ROW><ROW><id>16704232</id><snippet>onkeyrelease</snippet></ROW><ROW><id>16704232</id><snippet>w.bind("&lt;KeyRelease&gt;", onkeyrelease)
</snippet></ROW><ROW><id>16704232</id><snippet>w.bind("&lt;KeyRelease-key&gt;", onkeyrelease_of_key)
</snippet></ROW><ROW><id>16704232</id><snippet>key</snippet></ROW><ROW><id>16704356</id><snippet>classmethod</snippet></ROW><ROW><id>16704356</id><snippet>staticmethod</snippet></ROW><ROW><id>16704356</id><snippet>A</snippet></ROW><ROW><id>16704356</id><snippet>classmethod</snippet></ROW><ROW><id>16704356</id><snippet>B</snippet></ROW><ROW><id>16704356</id><snippet>A.static</snippet></ROW><ROW><id>16704356</id><snippet>super(B, cls).static</snippet></ROW><ROW><id>16704525</id><snippet>a</snippet></ROW><ROW><id>16704525</id><snippet>b</snippet></ROW><ROW><id>16704525</id><snippet>&gt;&gt;&gt; a = [1]
&gt;&gt;&gt; b = [2]
&gt;&gt;&gt; lst = [a, b]
&gt;&gt;&gt; lst
[[1], [2]]
&gt;&gt;&gt; lst[1][0] = 4  # changes contents of second mutable container in lst
&gt;&gt;&gt; lst
[[1], [4]]
&gt;&gt;&gt; a
[1]
&gt;&gt;&gt; b
[4]
</snippet></ROW><ROW><id>16704609</id><snippet>tkFileDialog</snippet></ROW><ROW><id>16704609</id><snippet>withdraw</snippet></ROW><ROW><id>16704609</id><snippet>import Tkinter, tkFileDialog, pygame

root = Tkinter.Tk()
root.withdraw()
</snippet></ROW><ROW><id>16704609</id><snippet>Potato</snippet></ROW><ROW><id>16704977</id><snippet>isin</snippet></ROW><ROW><id>16704977</id><snippet>&gt;&gt;&gt; df
   zip  x  y  access
0  123  1  1       4
1  123  1  1       6
2  133  1  2       3
3  145  2  2       3
4  167  3  1       1
5  167  3  1       2
&gt;&gt;&gt; keep = [123, 133]
&gt;&gt;&gt; df_yes = df[df['zip'].isin(keep)]
&gt;&gt;&gt; df_no = df[~df['zip'].isin(keep)]
&gt;&gt;&gt; df_yes
   zip  x  y  access
0  123  1  1       4
1  123  1  1       6
2  133  1  2       3
&gt;&gt;&gt; df_no
   zip  x  y  access
3  145  2  2       3
4  167  3  1       1
5  167  3  1       2
</snippet></ROW><ROW><id>16704977</id><snippet>groupby</snippet></ROW><ROW><id>16704977</id><snippet>&gt;&gt;&gt; grouped = df.groupby(df['zip'].isin(keep))
</snippet></ROW><ROW><id>16704977</id><snippet>&gt;&gt;&gt; grouped.get_group(True)
   zip  x  y  access
0  123  1  1       4
1  123  1  1       6
2  133  1  2       3
&gt;&gt;&gt; grouped.get_group(False)
   zip  x  y  access
3  145  2  2       3
4  167  3  1       1
5  167  3  1       2
&gt;&gt;&gt; [g for k,g in list(grouped)]
[   zip  x  y  access
3  145  2  2       3
4  167  3  1       1
5  167  3  1       2,    zip  x  y  access
0  123  1  1       4
1  123  1  1       6
2  133  1  2       3]
&gt;&gt;&gt; dict(list(grouped))
{False:    zip  x  y  access
3  145  2  2       3
4  167  3  1       1
5  167  3  1       2, True:    zip  x  y  access
0  123  1  1       4
1  123  1  1       6
2  133  1  2       3}
&gt;&gt;&gt; dict(list(grouped)).values()
[   zip  x  y  access
3  145  2  2       3
4  167  3  1       1
5  167  3  1       2,    zip  x  y  access
0  123  1  1       4
1  123  1  1       6
2  133  1  2       3]
</snippet></ROW><ROW><id>16705321</id><snippet>unidict = {k.decode('utf8'): v.decode('utf8') for k, v in strdict.items()}
</snippet></ROW><ROW><id>16705321</id><snippet>unidict = dict((k.decode('utf8'), v.decode('utf8')) for k, v in strdict.items())
</snippet></ROW><ROW><id>16705652</id><snippet>import os

lines = []
f = open(os.path.expanduser("~/Desktop/example board.txt"))
for line in f:
    x = [int(s) for s in line.split()]
    lines.append(x)
</snippet></ROW><ROW><id>16705652</id><snippet>[[-1, 2, 0], [0, 0, 0], [0, 2, -1], [-1, -2, 0], [0, -2, 2], [0, 1, 0]]
</snippet></ROW><ROW><id>16705793</id><snippet>MixedNumber</snippet></ROW><ROW><id>16705793</id><snippet>Fraction</snippet></ROW><ROW><id>16705793</id><snippet>class MixedNumber(object):
   def __init__(self, whole_number, fraction):
        self.whole_number = whole_number
        self.fraction = fraction

   def __str__(self):
        if self.fraction.numerator == 0:
            return str(self.whole_number)
        elif self.whole_number == 0:
            return str(self.fraction)
        else:
            return '{} {}'.format(self.whole_number,self.fraction)

   def __repr__(self):
        return 'MixedNumber({},{!r})'.format(self.whole_number,self.fraction)
</snippet></ROW><ROW><id>16705793</id><snippet>Fraction</snippet></ROW><ROW><id>16705793</id><snippet>class MixedNumber(Fraction):
    def __init__(self, whole_number, fraction):     
        num = whole_number * fraction.denominator + fraction.numerator
        super(MixedNumber,self).__init__(num,  fraction.denominator)

    def __str__(self):
        # assume positive fractions for demonstration only
        q, r = divmod(self.numerator,self.denominator)
        if r == 0:
            return str(q)
        elif q == 0:
            return super(MixedNumber,self).__str__() 
        else:
            return '{} {}/{}'.format(q,r,self.denominator)

    def __repr__(self):
        q, r = divmod(self.numerator, self.denominator)
        return 'MixedNumber({},Fraction({},{}))'.format(q,r,self.denominator)
</snippet></ROW><ROW><id>16705793</id><snippet>Fraction.__repr__</snippet></ROW><ROW><id>16705793</id><snippet>eval</snippet></ROW><ROW><id>16705793</id><snippet>eval(frac) == frac</snippet></ROW><ROW><id>16705793</id><snippet>__str__</snippet></ROW><ROW><id>16705793</id><snippet>__eval__</snippet></ROW><ROW><id>16705879</id><snippet>any(iterable)</snippet></ROW><ROW><id>16705879</id><snippet>True</snippet></ROW><ROW><id>16705879</id><snippet>False</snippet></ROW><ROW><id>16705879</id><snippet>&gt;&gt;&gt; class A(object): # subclass object for newstyle class (use them everywhere)
        pass

&gt;&gt;&gt; l1=[5,4,3,A(),8]
&gt;&gt;&gt; any(isinstance(x, A) for x in l1)
True
</snippet></ROW><ROW><id>16705879</id><snippet>(isinstance(x, A) for x in l1)
</snippet></ROW><ROW><id>16705879</id><snippet>any</snippet></ROW><ROW><id>16705879</id><snippet>any</snippet></ROW><ROW><id>16705879</id><snippet>True</snippet></ROW><ROW><id>16705879</id><snippet>True</snippet></ROW><ROW><id>16706835</id><snippet>&gt;&gt;&gt; re.findall(r'\d+', u'The answer is \u0664\u0662')         # No flag
[]

&gt;&gt;&gt; re.findall(r'(?u)\d+', u'The answer is \u0664\u0662')     # With unicode flag
[u'\u0664\u0662']
</snippet></ROW><ROW><id>16706835</id><snippet>[A-Z]</snippet></ROW><ROW><id>16706835</id><snippet>&gt;&gt;&gt; re.findall(r'[a-z]+', 'HELLO world')         # No flag
['world']

&gt;&gt;&gt; re.findall(r'(?i)[a-z]+', 'HELLO world')     # With ignore case flag
['HELLO', 'world']
</snippet></ROW><ROW><id>16707151</id><snippet>for row in reader:
    if any(row):              # Checks for at least one non-empty field
       data_list.append(row)
</snippet></ROW><ROW><id>16707151</id><snippet>&gt;&gt;&gt; any(['132', '', '456'])
True

&gt;&gt;&gt; any(['', '', ''])
False
</snippet></ROW><ROW><id>16707662</id><snippet>.asXML()</snippet></ROW><ROW><id>16707662</id><snippet>import pyparsing as pp

word = pp.Word(pp.alphas + ',.')('word*')
number = pp.Word(pp.nums + ',.')('number*')
direct_speech = pp.Suppress('“') + pp.Group(pp.OneOrMore(word | number))('direct_speech*') + pp.Suppress('”')
sentence = pp.Group(pp.OneOrMore(word | number | direct_speech))('sentence')

test_string = 'Lorem 14 ipsum “dolor 22 sit” amet, consectetur.'
r = sentence.parseString(test_string)

from lxml import etree
xml = etree.fromstring(r.sentence.asXML('sentence'))
for el in xml:
    if len(el):
        print el.tag
        for sub_el in el:
            print '  ', sub_el.tag, ':', sub_el.text
    else:
        print el.tag, ':',  el.text
</snippet></ROW><ROW><id>16707662</id><snippet>word : Lorem
number : 14
word : ipsum
direct_speech
   word : dolor
   number : 22
   word : sit
word : amet,
word : consectetur.
</snippet></ROW><ROW><id>16707718</id><snippet>ReusableModule.py</snippet></ROW><ROW><id>16707718</id><snippet>class ReusableModule(object):
    def play_button(self, args):
        print "Pressed Play"
</snippet></ROW><ROW><id>16707718</id><snippet>Library  ReusableModule
</snippet></ROW><ROW><id>16707718</id><snippet>Play Button</snippet></ROW><ROW><id>16707718</id><snippet>ReusableModule.py</snippet></ROW><ROW><id>16707718</id><snippet>python -c "from ReusableModule import ReusableModule"
</snippet></ROW><ROW><id>16708177</id><snippet>/usr/bin/Xvfb :1 -screen 0 1024x768x24</snippet></ROW><ROW><id>16708177</id><snippet>xvfb-run</snippet></ROW><ROW><id>16708177</id><snippet>wkhtmltopdf</snippet></ROW><ROW><id>16708177</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.environ["DISPLAY"]=":1"
&gt;&gt;&gt; from sh import wkhtmltopdf
&gt;&gt;&gt; wkhtmltopdf('--ignore-load-errors', 'test.html', 'test.pdf')
</snippet></ROW><ROW><id>16708245</id><snippet>Flask.request_class</snippet></ROW><ROW><id>16708245</id><snippet>from werkzeug.wrappers import BaseRequest, ETagRequestMixin

class Request(BaseRequest, ETagRequestMixin): 
    pass

app = Flask(__name__)
app.request_class = Request
</snippet></ROW><ROW><id>16708405</id><snippet>ContentType</snippet></ROW><ROW><id>16708405</id><snippet>ForeignKey</snippet></ROW><ROW><id>16708405</id><snippet>ContentType</snippet></ROW><ROW><id>16708504</id><snippet>from operator import itemgetter

best = (0, [])
maxes = [max(c) for c in zip(*a.values())]
for k, v in a.iteritems():
    v = a[k] = [c/m for c, m in zip(v, maxes)]
    best = max([best, (sum(v), v)], key=itemgetter(0))
</snippet></ROW><ROW><id>16708504</id><snippet>zip(*iterable)</snippet></ROW><ROW><id>16708504</id><snippet>a</snippet></ROW><ROW><id>16708504</id><snippet>heapq.nlargest(1, ...)</snippet></ROW><ROW><id>16708504</id><snippet>max</snippet></ROW><ROW><id>16708504</id><snippet>timeit</snippet></ROW><ROW><id>16708504</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; import heapq
&gt;&gt;&gt; def original(a):
...     ran = len(a.values()[0])
...     max = [0.0 for i in range(0,ran)]
...     for vals in a.values():
...         max = [max[x] if max[x] &gt; vals[x] else vals[x] for x in range(0,ran)]
...     a = {k : [v[x]/max[x] for x in range(0,ran)] for k,v in a.items()}
...     best = heapq.nlargest(1, (v for v in a.values()), key=lambda v: sum(v))
... 
&gt;&gt;&gt; def zip_and_max(a):
...     best = (0, [])
...     maxes = [max(c) for c in zip(*a.values())]
...     for k, v in a.iteritems():
...         v = a[k] = [c/m for c, m in zip(v, maxes)]
...         best = max([best, (sum(v), v)], key=itemgetter(0))
... 
&gt;&gt;&gt; timeit('f(a.copy())', 'from __main__ import a, original as f', number=100000)
2.6306018829345703
&gt;&gt;&gt; timeit('f(a.copy())', 'from __main__ import a, zip_and_max as f', number=100000)
1.6974060535430908
</snippet></ROW><ROW><id>16708504</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; random_a = { k: [1000.0*random.random() for i in xrange(50)] for k in xrange(1000)}
&gt;&gt;&gt; timeit('f(a.copy())', 'from __main__ import a, original as f', number=100000)
2.7121059894561768
&gt;&gt;&gt; timeit('f(a.copy())', 'from __main__ import a, zip_and_max as f', number=100000)
1.745398998260498
</snippet></ROW><ROW><id>16708504</id><snippet>&gt;&gt;&gt; timeit('f(r())', 'from __main__ import random_dict as r, original as f', number=100)
4.437845945358276
&gt;&gt;&gt; timeit('f(r())', 'from __main__ import random_dict as r, zip_and_max as f', number=100)
3.2406938076019287
</snippet></ROW><ROW><id>16708504</id><snippet>numpy</snippet></ROW><ROW><id>16708797</id><snippet>multiprocessing.Pool.join()</snippet></ROW><ROW><id>16708797</id><snippet>pool</snippet></ROW><ROW><id>16708797</id><snippet>close()ed</snippet></ROW><ROW><id>16708797</id><snippet>join()ed</snippet></ROW><ROW><id>16708797</id><snippet>pool.close()</snippet></ROW><ROW><id>16708797</id><snippet>pool.join()</snippet></ROW><ROW><id>16708982</id><snippet>        $(document).ready(function() {
            var autocomplete = $('#id_city_text').yourlabsAutocomplete();
            autocomplete.show = function(html) {
                yourlabs.Autocomplete.prototype.show.call(this, html)
                var choices = this.box.find(this.choiceSelector);

                if (choices.length == 1) {
                    this.input.trigger('selectChoice', [choices, this]);
                }
            }
        });
</snippet></ROW><ROW><id>16709222</id><snippet>raise MyException</snippet></ROW><ROW><id>16709222</id><snippet>raise MyException()</snippet></ROW><ROW><id>16709222</id><snippet>raise MyException</snippet></ROW><ROW><id>16709222</id><snippet>raise KeyError(badkey)</snippet></ROW><ROW><id>16709234</id><snippet>api_server.SECVPN.validateCardFull('mid', 'password', 'name')
</snippet></ROW><ROW><id>16709554</id><snippet>python-mode</snippet></ROW><ROW><id>16709554</id><snippet>python-beginning-of-block</snippet></ROW><ROW><id>16709554</id><snippet>python.el</snippet></ROW><ROW><id>16709554</id><snippet>beginning-of-defun</snippet></ROW><ROW><id>16709554</id><snippet>C-M-a</snippet></ROW><ROW><id>16709810</id><snippet>text &lt;- "Sample1     Sample2     Sample3     
Description percentage  p-value Percentage  p-value Percentage  p-value
Trendy  0.1585  0   0.1646  1.11E-016   0.2397  6.41E-014
nonTrendy   0.219   5.55E-016   NA     NA   0.2203  9.84E-012
Specific    0.1713  9.99E-016   0.162   2.74E-011   0.1838  1.73E-012
nonspecific 0.2119  3.02E-013   0.1356  0.0000613   0.2044  1.1E-011
Robotics    0.1632  7.85E-013   0.1263  0.00000361  0.2158  0
human   0.2533  7.25E-012   0.1733  0.0000218   0.2069  4.16E-008"
</snippet></ROW><ROW><id>16709810</id><snippet>NA</snippet></ROW><ROW><id>16709810</id><snippet>lines &lt;- readLines(textConnection(text), 8)
strings &lt;- strsplit(lines, " +")
sam &lt;- strings[[1]]
des &lt;- unlist(lapply(strings[-1], "[", 1))
coln &lt;- sub("-", "", strings[[2]][-1][1:2])
val &lt;- do.call(rbind, lapply(strings[-(1:2)], function(x) as.numeric(x[-1])))

perc &lt;- as.vector(val[ , as.logical(seq(ncol(val)) %% 2)])
pval &lt;- as.vector(val[ , !seq(ncol(val)) %% 2])

dat &lt;- setNames(data.frame(des[-1], perc, pval), c(des[1], coln))
dat$sample &lt;- rep(sam, each = nrow(val))

library(ggplot2)
ggplot(dat, aes(colour = pvalue, size = percentage, 
                x = sample, y = Description)) +
  geom_point() + 
  theme_bw()
</snippet></ROW><ROW><id>16709934</id><snippet>import string
import random
from itertools import islice

chars = string.printable + string.whitespace
# make infinite generator of random chars
random_chars = iter(lambda: random.choice(chars), '')
with open('output_file','w', buffering=102400) as fout:
    fout.writelines(islice(random_chars, 1000000)) # write 'n' many
</snippet></ROW><ROW><id>16709952</id><snippet>matplotlib.axes.Axes</snippet></ROW><ROW><id>16709952</id><snippet>drag_pan</snippet></ROW><ROW><id>16709952</id><snippet>import matplotlib
import matplotlib.pyplot as plt    

class My_Axes(matplotlib.axes.Axes):
    name = "My_Axes"
    def drag_pan(self, button, key, x, y):
        matplotlib.axes.Axes.drag_pan(self, button, 'x', x, y) # pretend key=='x'

matplotlib.projections.register_projection(My_Axes)

figure = plt.figure()
ax = figure.add_subplot(111, projection="My_Axes")
ax.plot([0, 1, 2], [0, 1, 0])
plt.show()
</snippet></ROW><ROW><id>16709952</id><snippet>drag_zoom</snippet></ROW><ROW><id>16709952</id><snippet>import types
def press_zoom(self, event):
    event.key='x'
    matplotlib.backends.backend_tkagg.NavigationToolbar2TkAgg.press_zoom(self,event)
figure.canvas.toolbar.press_zoom=types.MethodType(press_zoom, figure.canvas.toolbar)
</snippet></ROW><ROW><id>16710165</id><snippet> date(2012,3,1)+relativedelta(years=-1)
</snippet></ROW><ROW><id>16710216</id><snippet>lambdas</snippet></ROW><ROW><id>16710216</id><snippet>&gt;&gt;&gt; steps = {1:"val1", 5:"val2", 2:"val3"}
&gt;&gt;&gt;
&gt;&gt;&gt; for key in sorted(steps):
...     print steps[key]
...
val1
val3
val2
</snippet></ROW><ROW><id>16710330</id><snippet>Node</snippet></ROW><ROW><id>16710330</id><snippet>Node *</snippet></ROW><ROW><id>16710330</id><snippet>getAllNodes.argtypes = [POINTER(Node)]
getAllNodes.restype = None

nodeArray = (Node * nodeCount)()
getAllNodes(nodeArray)
</snippet></ROW><ROW><id>16710330</id><snippet>&gt;&gt;&gt; [node.name for node in nodeArray]
['node0', 'node1', 'node2', 'node3', 'node4']
</snippet></ROW><ROW><id>16710625</id><snippet>a</snippet></ROW><ROW><id>16710842</id><snippet>&gt;&gt;&gt; s = r'a=foo, b=bar, c="foo, bar", d=false, e="false", f="foo\", bar"'
&gt;&gt;&gt; re.findall(r'(?:[^\s,"]|"(?:\\.|[^"])*")+', s)
['a=foo', 'b=bar', 'c="foo, bar"', 'd=false', 'e="false"', 'f="foo\\", bar"']
</snippet></ROW><ROW><id>16711038</id><snippet>def with_named_setup(setup=None, teardown=None):
    def wrap(f):
        return with_setup(
            lambda: setup(f.__name__) if (setup is not None) else None, 
            lambda: teardown(f.__name__) if (teardown is not None) else None)(f)
    return wrap

@with_named_setup(setup_func, teardown_func)
def test_one():
    pass

@with_named_setup(setup_func, teardown_func)
def test_two():
    pass
</snippet></ROW><ROW><id>16711038</id><snippet>with_setup</snippet></ROW><ROW><id>16711038</id><snippet>setup</snippet></ROW><ROW><id>16711038</id><snippet>teardown</snippet></ROW><ROW><id>16711196</id><snippet>str.contains</snippet></ROW><ROW><id>16711196</id><snippet>In [1]: df = pd.DataFrame([['abc', 1], ['cde', 2], ['efg', 3]])

In [2]: df
Out[2]:
     0  1
0  abc  1
1  cde  2
2  efg  3

In [3]: df[0].str.contains('c')
Out[3]:
0     True
1     True
2    False
Name: 0, dtype: bool

In [4]: df[df[0].str.contains('c')]
Out[4]:
     0  1
0  abc  1
1  cde  2
</snippet></ROW><ROW><id>16711326</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; I = np.matrix([[ 0.66581073+0.00033919j],
        [ 0.81568896-0.03291265j],
        [ 0.99884785+0.00045446j]])
&gt;&gt;&gt; 
&gt;&gt;&gt; I[0, 0]
(0.66581073000000002+0.00033919000000000001j)
</snippet></ROW><ROW><id>16711365</id><snippet>&gt;&gt;&gt; steps = {"5":{}, "1":{}}
&gt;&gt;&gt; for k in sorted(steps, key=int):
        print k, steps[k]


1 {}
5 {}
</snippet></ROW><ROW><id>16711569</id><snippet>from scrapy import signals
from scrapy.xlib.pydispatch import dispatcher

class ExistingLinkCheckMiddleware(object):

    def __init__(self):
        # open connection to database

        dispatcher.connect(self.spider_closed, signals.spider_closed)

    def spider_closed(self, spider, reason):
        # close db connection

    def process_request(self, request, spider):
        # before each request check in the DB
        # that the page hasn't been scraped before
</snippet></ROW><ROW><id>16712135</id><snippet>with open('x.txt') as f:
    print np.loadtxt(f, dtype=str, delimiter='\n')
</snippet></ROW><ROW><id>16712135</id><snippet>['1  one' '2  two' '3  three' '4  four' '5  five']
</snippet></ROW><ROW><id>16712226</id><snippet>reset_index</snippet></ROW><ROW><id>16712226</id><snippet>In [1]: df = pd.DataFrame(np.random.randn(3, 2), columns=['A', 'A'])

In [2]: df
Out[2]:
          A         A
0  0.210915  1.698726
1 -1.423380 -0.861011
2 -0.895981  0.192910

In [3]: df = df.T.reset_index(drop=True).T

In [4]: df
Out[4]:
          0         1
0  0.210915  1.698726
1 -1.423380 -0.861011
2 -0.895981  0.192910
</snippet></ROW><ROW><id>16712972</id><snippet>chr(buf)</snippet></ROW><ROW><id>16712972</id><snippet>for byte in buf:
</snippet></ROW><ROW><id>16713163</id><snippet>__get__</snippet></ROW><ROW><id>16713163</id><snippet>instance_getattr2</snippet></ROW><ROW><id>16713163</id><snippet>v = class_lookup(inst-&gt;in_class, name, &amp;klass);
if (v != NULL) {
    f = TP_DESCR_GET(v-&gt;ob_type);
    if (f != NULL) {
        PyObject *w = f(v, (PyObject *)inst, (PyObject *)(inst-&gt;in_class));
    }
}
</snippet></ROW><ROW><id>16713163</id><snippet>&gt;&gt;&gt; class A:
...     def foo():
...         pass
...
&gt;&gt;&gt; A.foo.__get__(None, A)
&lt;unbound method A.foo&gt;
&gt;&gt;&gt; A.foo.__get__(A(), A)
&lt;bound method A.foo of &lt;__main__.A instance at 0x000000000229CC48&gt;&gt;
</snippet></ROW><ROW><id>16713214</id><snippet>def cached(func):
    def _cached(*args):
        # Determine if we are allowed to use cache
        cacheable = settings.cache.lifetime is not None

        # Generate unique cache key

        cache_key = '{0}-{1}-{2}'.format(func.__module__, func.__name__, args[0])

        # Return cached version if allowed and available

        if cacheable:
            result = memcache.get(cache_key)
            if result is not None:
                return result

        # Generate output
        result = func(args[0])

        # Cache output if allowed
        if cacheable and result is not None:
            memcache.set(cache_key, result, settings.cache.lifetime)

        return result

    return _cached

@cached
def do_something_fooey(*args):
    return something
</snippet></ROW><ROW><id>16713214</id><snippet>functools.wraps</snippet></ROW><ROW><id>16713378</id><snippet>x&lt;10</snippet></ROW><ROW><id>16713378</id><snippet>self</snippet></ROW><ROW><id>16713378</id><snippet>self</snippet></ROW><ROW><id>16713378</id><snippet>@staticmethod
def is_greater_than_10(x):
    return x &lt; 10
</snippet></ROW><ROW><id>16713378</id><snippet>self</snippet></ROW><ROW><id>16713378</id><snippet>class TooManySmallValues(Exception):
    pass

def evaluate_list(l1):
    failed_list = list()
    failures=0
    for x in l1:
        if not is_greater_than_10(x):
            failed_list.append(x)
            failures+=1
            if failures&gt;2:
                raise TooManySmallValues()
    return failed_list
</snippet></ROW><ROW><id>16713378</id><snippet>result, failures = evaluate_list(some_list)
if not result:
    # do something about the many small values
else:
    # do something about the acceptable list and the small number of failure
</snippet></ROW><ROW><id>16713378</id><snippet>try:
    failures = evaluate_list(some_list)
except TooManySmallValues:
    # do something about the many small values
</snippet></ROW><ROW><id>16713378</id><snippet>def improved_evaluate_list(l1):
    failed_list = [ x for x in l1 if not is_greater_than_10(x) ]
    if len(failed_list) &gt; 2:
        raise TooManySmallValues()
    else:
        return failed_list
</snippet></ROW><ROW><id>16713480</id><snippet>math.sqrt(sum((a[k] - b[k])**2 for k in a.keys()))
</snippet></ROW><ROW><id>16713480</id><snippet>math.sqrt(sum((a[k] - b[k])**2 for k in set(a.keys()).intersection(set(b.keys()))))
</snippet></ROW><ROW><id>16713480</id><snippet>math.sqrt(sum((a.get(k, 0) - b.get(k, 0))**2 for k in set(a.keys()).union(set(b.keys()))))
</snippet></ROW><ROW><id>16713581</id><snippet>import codecs

filename = "something.x10"

f = open(filename, 'rb')
f_decoded = codecs.getreader("ISO-8859-15")(f)

totalLength = 0
for line in f_decoded:
   total_length += len(line)

print("Total Length is "+total_length)
</snippet></ROW><ROW><id>16713581</id><snippet>open</snippet></ROW><ROW><id>16713581</id><snippet> f_decoded = open(filename, mode='r', encoding='ISO-8859-15')
</snippet></ROW><ROW><id>16713654</id><snippet>from datetime import datetime, date, time

now = datetime.now()
print now #2013-05-23 04:07:40.951726    
tar = tarfile.open("test%s.tar" % now, "w")
</snippet></ROW><ROW><id>16713654</id><snippet>.format()</snippet></ROW><ROW><id>16713654</id><snippet>tar = tarfile.open("test{}.tar".format(now), "w")
</snippet></ROW><ROW><id>16713654</id><snippet>datetime.now()</snippet></ROW><ROW><id>16713654</id><snippet>.strftime()</snippet></ROW><ROW><id>16713654</id><snippet>print now.strftime('%Y-%m-%d')
&gt;&gt;&gt; 2013-05-23
</snippet></ROW><ROW><id>16713665</id><snippet>import urllib
import urllib2

url = 'http://example.com/...'
values = { 'productslug': 'bar','qty': 'bar' }
data = urllib.urlencode(values)
req = urllib2.Request(url, data)
response = urllib2.urlopen(req)
result = response.read()
print result
</snippet></ROW><ROW><id>16713986</id><snippet>getopt</snippet></ROW><ROW><id>16713986</id><snippet>optparse</snippet></ROW><ROW><id>16713986</id><snippet>argparse</snippet></ROW><ROW><id>16713986</id><snippet>optparse</snippet></ROW><ROW><id>16713986</id><snippet>getopt</snippet></ROW><ROW><id>16713986</id><snippet>argparse</snippet></ROW><ROW><id>16713986</id><snippet>import argparse
# Define the parser
parser = argparse.ArgumentParser(description='Short sample app')
# Declare an argument (`--algo`), telling that the corresponding value should be stored in the `algo` field, and using a default value if the argument isn't given
parser.add_argument('--algo', action="store", dest='algo', default=0)
# Now, parse the command line arguments and store the values in the `args` variable
args = parser.parse_args()
# Individual arguments can be accessed as attributes...
print args.algo
</snippet></ROW><ROW><id>16714050</id><snippet>type()</snippet></ROW><ROW><id>16714050</id><snippet>__slots__</snippet></ROW><ROW><id>16714290</id><snippet>I can hit Ctrl-C and be dropped to a Python debugger console at the exact
point I stopped the program.
</snippet></ROW><ROW><id>16714290</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>16714290</id><snippet>continue</snippet></ROW><ROW><id>16714290</id><snippet>%run -d</snippet></ROW><ROW><id>16714290</id><snippet>%run?</snippet></ROW><ROW><id>16714560</id><snippet>import sys
def __main__():
    with open("parameters.log", "ab") as f:
        f.write(str(sys.argv))
</snippet></ROW><ROW><id>16714560</id><snippet>parameters.log</snippet></ROW><ROW><id>16714560</id><snippet>n</snippet></ROW><ROW><id>16714560</id><snippet>sys.argv[n]</snippet></ROW><ROW><id>16714711</id><snippet>:help design-not</snippet></ROW><ROW><id>16714964</id><snippet>dataBuf = connstream.recv(4096) # read what is there to read
extraData = connstream.recv(4096) #see if there is more
while len(extraData) != 0: #if something extra was read
    dataBuf += extraData
    extraData = connstream.recv(4096) #check again
</snippet></ROW><ROW><id>16714964</id><snippet>recv()</snippet></ROW><ROW><id>16714964</id><snippet>Connection</snippet></ROW><ROW><id>16714964</id><snippet>Content-Length</snippet></ROW><ROW><id>16714964</id><snippet>Content-Length</snippet></ROW><ROW><id>16714964</id><snippet>Connection: keep-alive</snippet></ROW><ROW><id>16714964</id><snippet>python https server</snippet></ROW><ROW><id>16715029</id><snippet>oldfile = open("EXISTINGFILENAME", "r")
data = oldfile.read()
oldfile.close()
stripped_data = data.lstrip()
newfile = open("NEWFILENAME", "w")
newfile.write(stripped_data)
newfile.close()
</snippet></ROW><ROW><id>16715029</id><snippet>strip</snippet></ROW><ROW><id>16715029</id><snippet>lstrip</snippet></ROW><ROW><id>16715055</id><snippet>size x size</snippet></ROW><ROW><id>16715055</id><snippet>base = np.arange(size) # Just the base set of indexes
row = 1                # Which block you want
col = 0                
block = a[base[:, np.newaxis] + row * size, base + col * size]
</snippet></ROW><ROW><id>16715055</id><snippet>xcoords</snippet></ROW><ROW><id>16715055</id><snippet>y, x = np.mgrid[0:a.shape[0]/size, 0:a.shape[1]/size]
y_coords = y[..., np.newaxis] * size + base
x_coords = x[..., np.newaxis] * size + base
</snippet></ROW><ROW><id>16715055</id><snippet>block = a[y_coords[row, col][:, np.newaxis], x_coords[row, col]]
</snippet></ROW><ROW><id>16715055</id><snippet>np.split</snippet></ROW><ROW><id>16715055</id><snippet>blocks = map(lambda x : np.split(x, a.shape[1]/size, 1), # Split the columns
                        np.split(a, a.shape[0]/size, 0)) # Split the rows
</snippet></ROW><ROW><id>16715055</id><snippet>size x size</snippet></ROW><ROW><id>16715055</id><snippet>&gt;&gt;&gt; blocks[0][0]
array([[ 4,  0, 12],
       [15, 13,  2],
       [18, 18,  3]])

&gt;&gt;&gt; blocks[1][0]
array([[ 1,  9,  3],
       [ 5, 15,  5],
       [13, 17,  8]])
</snippet></ROW><ROW><id>16715055</id><snippet>&gt;&gt;&gt; blocks = np.array(blocks)
&gt;&gt;&gt; blocks.shape
(4, 4, 3, 3)
</snippet></ROW><ROW><id>16715185</id><snippet>$</snippet></ROW><ROW><id>16715185</id><snippet>Url not found</snippet></ROW><ROW><id>16715185</id><snippet>include</snippet></ROW><ROW><id>16715185</id><snippet>$</snippet></ROW><ROW><id>16715185</id><snippet>$</snippet></ROW><ROW><id>16715185</id><snippet>urlpatterns_3rd_level = patterns('example.basket.views', url(r'^3rd$', 'home', name='home'))
urlpatterns_2nd_level = patterns('', url(r'^2nd', include(urlpatterns_3rd_level, namespace='basket')))

urlpatterns = patterns('', url(r'^1st', include(urlpatterns_2nd_level, namespace='store')))

reverse('store:basket:home') # No namespace named basket
</snippet></ROW><ROW><id>16715185</id><snippet>example.basket.views</snippet></ROW><ROW><id>16715185</id><snippet>&gt;&gt;&gt; '/1st2nd3rd'
</snippet></ROW><ROW><id>16715746</id><snippet>int()</snippet></ROW><ROW><id>16715746</id><snippet>float()</snippet></ROW><ROW><id>16715746</id><snippet>for row in reader:
    print "'%s'" % row[30]
    if float(row[30]) != 0:
        row[31] = '1'
    else:
        row[31] = '0'
    if row[30] == "":
        row[31] = 2
    writer.writerow(row)
</snippet></ROW><ROW><id>16715746</id><snippet>05/23/2013,May,2013,2013,4,2,Thursday,UK,O2,£,NOKIA,100,NOKIA 100,Smartphone,Symbian,NA,,,9.99,,,N,,Pay &amp; Go,Pay &amp; Go,,,,,0.64222,0.0,0
05/23/2013,May,2013,2013,4,2,Thursday,UK,O2,£,NOKIA,100,NOKIA 100,Smartphone,Symbian,NA,Pink,,9.99,,,N,,Pay &amp; Go,Pay &amp; Go,,,,,0.64222,0.0,0
</snippet></ROW><ROW><id>16715758</id><snippet>2013-07-31  messages     3
            tstamps      3
            usernames    3
2013-08-31  messages     4
            tstamps      4
            usernames    4
</snippet></ROW><ROW><id>16715758</id><snippet>plt.figure()
for k, g in grouped:
    messages = g.messages.resample('m', how='count')
    messages.plot(style='*-', label=k)
plt.show()
</snippet></ROW><ROW><id>16715758</id><snippet>2012-12-31    3
2013-01-31    3
2013-02-28    3
2013-03-31    4
...
</snippet></ROW><ROW><id>16715913</id><snippet>tar</snippet></ROW><ROW><id>16715913</id><snippet>BZ2</snippet></ROW><ROW><id>16716555</id><snippet>typedef</snippet></ROW><ROW><id>16716555</id><snippet>%header</snippet></ROW><ROW><id>16716555</id><snippet>%inline</snippet></ROW><ROW><id>16716555</id><snippet>.i</snippet></ROW><ROW><id>16716555</id><snippet>%module x

%inline %{
    typedef char TEXT[16];
    typedef int NUMBER;
    namespace MyDataAPI
    {
        struct MYSTRUCT
        {
            TEXT TradingDay;
        };
        struct MYSTRUCT2
        {
            NUMBER Money;
        };
    }
%}
</snippet></ROW><ROW><id>16716555</id><snippet>T:\&gt;py
Python 3.3.0 (v3.3.0:bd8afb90ebf2, Sep 29 2012, 10:57:17) [MSC v.1600 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import x
&gt;&gt;&gt; a=x.MYSTRUCT()
&gt;&gt;&gt; a.TradingDay
''
&gt;&gt;&gt; a.TradingDay='ABCDEFGHIJKLMNOPQ'   # Note this is too long, 17 chars...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: in method 'MYSTRUCT_TradingDay_set', argument 2 of type 'char [16]'
&gt;&gt;&gt; a.TradingDay='ABCDEFGHIJKLMNOP'
&gt;&gt;&gt; a.TradingDay
'ABCDEFGHIJKLMNOP'
&gt;&gt;&gt; b=x.MYSTRUCT2()
&gt;&gt;&gt; b.Money
0
&gt;&gt;&gt; b.Money=100
&gt;&gt;&gt; b.Money
100
</snippet></ROW><ROW><id>16716583</id><snippet>test_request_context</snippet></ROW><ROW><id>16716583</id><snippet>setUpClass</snippet></ROW><ROW><id>16716583</id><snippet>self.client.get(..)</snippet></ROW><ROW><id>16716583</id><snippet>identity_changed.send(..)</snippet></ROW><ROW><id>16716583</id><snippet>before_request</snippet></ROW><ROW><id>16716583</id><snippet>create_app</snippet></ROW><ROW><id>16716583</id><snippet>import hmac
import unittest

from functools import wraps
from hashlib import sha1

import flask

from flask.ext.principal import Principal, Permission, RoleNeed, Identity, \
    identity_changed, identity_loaded current_app


def roles_required(*roles):
    """Decorator which specifies that a user must have all the specified roles.
    Example::

        @app.route('/dashboard')
        @roles_required('admin', 'editor')
        def dashboard():
            return 'Dashboard'

    The current user must have both the `admin` role and `editor` role in order
    to view the page.

    :param args: The required roles.

    Source: https://github.com/mattupstate/flask-security/
    """
    def wrapper(fn):
        @wraps(fn)
        def decorated_view(*args, **kwargs):
            perms = [Permission(RoleNeed(role)) for role in roles]
            for perm in perms:
                if not perm.can():
                    # return _get_unauthorized_view()
                    flask.abort(403)
            return fn(*args, **kwargs)
        return decorated_view
    return wrapper



def roles_accepted(*roles):
    """Decorator which specifies that a user must have at least one of the
    specified roles. Example::

        @app.route('/create_post')
        @roles_accepted('editor', 'author')
        def create_post():
            return 'Create Post'

    The current user must have either the `editor` role or `author` role in
    order to view the page.

    :param args: The possible roles.
    """
    def wrapper(fn):
        @wraps(fn)
        def decorated_view(*args, **kwargs):
            perm = Permission(*[RoleNeed(role) for role in roles])
            if perm.can():
                return fn(*args, **kwargs)
            flask.abort(403)
        return decorated_view
    return wrapper


def _on_principal_init(sender, identity):
    if identity.id == 'admin':
        identity.provides.add(RoleNeed('admin'))
    identity.provides.add(RoleNeed('member'))


def create_app():
    app = flask.Flask(__name__)
    app.debug = True
    app.config.update(SECRET_KEY='secret', TESTING=True)
    principal = Principal(app)
    identity_loaded.connect(_on_principal_init)

    @app.before_request
    def determine_identity():
        # This is where you get your user authentication information. This can
        # be done many ways. For instance, you can store user information in the
        # session from previous login mechanism, or look for authentication
        # details in HTTP headers, the querystring, etc...
        identity_changed.send(current_app._get_current_object(), identity=Identity('admin'))

    @app.route('/')
    def index():
        return "OK"

    @app.route('/member')
    @roles_accepted('admin', 'member')
    def role_needed():
        return "OK"

    @app.route('/admin')
    @roles_required('admin')
    def connect_admin():
        return "OK"

    @app.route('/admin_b')
    @admin_permission.require()
    def connect_admin_alt():
        return "OK"

    return app


admin_permission = Permission(RoleNeed('admin'))


class WorkshopTest(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        app = create_app()
        cls.app = app
        cls.client = app.test_client()

    def test_basic(self):
        r = self.client.get('/')
        self.assertEqual(r.data, "OK")

    def test_member(self):
        r = self.client.get('/member')
        self.assertEqual(r.status_code, 200)
        self.assertEqual(r.data, "OK")

    def test_admin_b(self):
        r = self.client.get('/admin_b')
        self.assertEqual(r.status_code, 200)
        self.assertEqual(r.data, "OK")


if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>16716585</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; r, d = 1000, 100000
&gt;&gt;&gt; a = np.random.rand(d).round()
&gt;&gt;&gt; A = a * np.ones((r, 1))
&gt;&gt;&gt; A.shape
(1000, 100000)
&gt;&gt;&gt; a
array([ 1.,  0.,  1., ...,  1.,  0.,  1.])
&gt;&gt;&gt; A
array([[ 1.,  0.,  1., ...,  1.,  0.,  1.],
       [ 1.,  0.,  1., ...,  1.,  0.,  1.],
       [ 1.,  0.,  1., ...,  1.,  0.,  1.],
       ..., 
       [ 1.,  0.,  1., ...,  1.,  0.,  1.],
       [ 1.,  0.,  1., ...,  1.,  0.,  1.],
       [ 1.,  0.,  1., ...,  1.,  0.,  1.]])
</snippet></ROW><ROW><id>16716857</id><snippet>logger.exception()</snippet></ROW><ROW><id>16716857</id><snippet>import logging
logger = logging.getLogger("your-logger-name")

def Set(request):
    if request.method == "POST":
        try:
            #something nearly impossible
        except Exception as exc:
            #where do I log this?
            logger.exception("some exception message")
</snippet></ROW><ROW><id>16716857</id><snippet>settings.py</snippet></ROW><ROW><id>16716960</id><snippet>import datetime
import collections
from time import strptime

date = datetime.date.today()
print "E K A D A S I  2 0 1 3 "
print "Today: {day} - {month} - {year}".format(
    day   = date.day,
    month = date.month,
    year  = date.year
)

dates = collections.OrderedDict()
with open('ekadasi.txt', 'r') as file_data:
    for line in file_data.readlines():
        if line:  # if line is not empty
            day, month, name1, name2 = line.split()
            temp = '{day}-{month}'.format(
                day = day,
                month = strptime(month, '%B').tm_mon
            )
            dates[temp] = str(name1 + name2)
print dates
</snippet></ROW><ROW><id>16716964</id><snippet>import numpy as np
from scipy.optimize import leastsq
import pylab as plt

N = 1000 # number of data points
t = np.linspace(0, 4*np.pi, N)
data = 3.0*np.sin(t+0.001) + 0.5 + np.random.randn(N) # create artificial data with noise

guess_a = np.mean(data)
guess_b = 3*np.std(data)/(2**0.5)
guess_c = 0

# we'll use this to plot our first estimate. This might already be good enough for you
data_first_guess = guess_b*np.sin(t+guess_c) + guess_a 

# Define the function to optimize, in this case, we want to minimize the difference
# between the actual data and our "guessed" parameters
optimize_func = lambda x: x[0]*np.sin(t+x[2]) + x[1] - data
est_a, est_b, est_c = leastsq(optimize_func, [guess_a, guess_b, guess_c])[0]

# recreate the fitted curve using the optimized parameters
data_fit = est_a*np.sin(t+est_c) + est_b

plt.plot(data, '.')
plt.plot(data_fit, label='after fitting')
plt.plot(data_first_guess, label='first guess')
plt.legend()
plt.show()
</snippet></ROW><ROW><id>16716974</id><snippet>from ex1.pojo import Fone</snippet></ROW><ROW><id>16716974</id><snippet>Fone</snippet></ROW><ROW><id>16716974</id><snippet>fone = Fone.Fone(6)</snippet></ROW><ROW><id>16716974</id><snippet>from ex1.pojo.Fone import Fone</snippet></ROW><ROW><id>16717003</id><snippet>distance_list</snippet></ROW><ROW><id>16717003</id><snippet>distance_list = []</snippet></ROW><ROW><id>16717003</id><snippet>distance_list[i]</snippet></ROW><ROW><id>16717003</id><snippet>stationCoords[i]</snippet></ROW><ROW><id>16717089</id><snippet>class Example(object):
      def doSomething(self):
          self.othervariable = 'instance variable'

&gt;&gt; foo = Example()
&gt;&gt; foo.othervariable
AttributeError: 'Example' object has no attribute 'othervariable'
</snippet></ROW><ROW><id>16717089</id><snippet>othervariable</snippet></ROW><ROW><id>16717089</id><snippet>doSomething</snippet></ROW><ROW><id>16717089</id><snippet>&gt;&gt; foo.doSomething()
&gt;&gt; foo.othervariable
'instance variable'
</snippet></ROW><ROW><id>16717089</id><snippet>__init__</snippet></ROW><ROW><id>16717089</id><snippet>class Example(object):

      def __init__(self):
          self.othervariable = 'instance variable'

&gt;&gt; foo = Example()
&gt;&gt; foo.othervariable
'instance variable'
</snippet></ROW><ROW><id>16717123</id><snippet>fit_transform</snippet></ROW><ROW><id>16717123</id><snippet>from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import euclidean_distances

v = TfidfVectorizer()
X = v.fit_transform(your_documents)
D = euclidean_distances(X)
</snippet></ROW><ROW><id>16717123</id><snippet>D[i, j]</snippet></ROW><ROW><id>16717123</id><snippet>X[i]</snippet></ROW><ROW><id>16717123</id><snippet>X[j]</snippet></ROW><ROW><id>16717168</id><snippet>-u</snippet></ROW><ROW><id>16717168</id><snippet>python -u (your python script)</snippet></ROW><ROW><id>16717168</id><snippet>proc_open</snippet></ROW><ROW><id>16717168</id><snippet>import sys, atexit
sys.stdout = open(sys.argv.pop(), "w+") #Replaces stdout with a file returned from sys.argv (command line arguments)
def saveClose():
    sys.stdout.write("--%s--"%sys.stdout.name) #Just to indicate if the script closed
atexit.register(saveClose) #Register with atexit to execute the function at...exit
</snippet></ROW><ROW><id>16717168</id><snippet>&lt;?php
function execInBackground($cmd) {  // Put the program in background in Windows and *nix
    if (substr(php_uname(), 0, 7) == "Windows"){ // Detect if Windows 
        pclose(popen("start /B ". $cmd, "r")); // Use start /B (windows only) to open a background program in Windows
    } 
    else { 
        exec($cmd . " &gt; /dev/null &amp;");  // Open program as a daemon using &amp; in *nix.
    } 
} 
if(isset($_GET["verify_id"])){ // We have ID?
  $content = file_get_contents($_GET["verify_id"]); // If yes, just load the file here (this is a security problem, but you can fix easily)
  echo $content; // Simply echoes the content of the file
}
else if(isset($_GET["daemon"])){
  $id = md5(uniqid(rand(), true)); // Create a unique hash
  execInBackground($_GET["daemon"]." ".$id); // Execute in the background passing the hash as a argument
  echo $id; // Echoes the hash
}
?&gt;
</snippet></ROW><ROW><id>16717168</id><snippet>var cmds = {}
function receiveResult(cmd, id, callback){ // This function effectively receives the result from the execution of the program.
   var reg = new RegExp("--"+id+"--$");
   cmds_interval[id] = setInterval(function(){
       $.ajax({
         url:"daemon.php",
         dataType: "text",
         data: {"verify_id":id},
         success: function(msg){
           if(reg.test(msg)){ // Is the script closed?
              msg = msg.replace(reg, ""); // If yes, removes it from the end of the string
              clearInterval(cmds_interval[id]); // And clear the interval
           }
           callback(msg, id, cmd); // Callback with the message from the stdout 
         }
      });
   }, 1000); // refreshes with a interval of 1 second
   return cmds_interval[id];
}

function exec(cmd, callback){
  $.ajax({
    url:"daemon.php",
    dataType: "text",
    data: {"daemon":cmd},
    success: function(id){
       receiveResult(cmd, id, callback);
    }
  });
}
</snippet></ROW><ROW><id>16717168</id><snippet>&lt;pre id="console"&gt;&lt;/pre&gt;
&lt;script language="javascript" type="text/javascript" src="path/to/jquery.js"&gt;&lt;/script&gt;
&lt;script language="javascript" type="text/javascript" src="path/to/daemon.js"&gt;&lt;/script&gt;
&lt;script language="javascript" type="text/javascript" src="path/to/demo.js"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>16717168</id><snippet>exec("python script.py", function(msg){ 
    $("#console").html(msg);
});
</snippet></ROW><ROW><id>16717168</id><snippet>execInBackground</snippet></ROW><ROW><id>16717290</id><snippet>complex</snippet></ROW><ROW><id>16717290</id><snippet>&gt;&gt;&gt; def g(w):
...     return complex(sympy.sympify(fhandle).evalf(subs={z: w}))
... 
&gt;&gt;&gt; g(1+2j)
(-3+4j)
</snippet></ROW><ROW><id>16717290</id><snippet>mpmath.cplot(g, [-3, 3], [-3, 3])</snippet></ROW><ROW><id>16717290</id><snippet>lambda</snippet></ROW><ROW><id>16717310</id><snippet>transaction.commit()</snippet></ROW><ROW><id>16717310</id><snippet>contact_person</snippet></ROW><ROW><id>16717310</id><snippet>user</snippet></ROW><ROW><id>16717310</id><snippet>NoResultFound</snippet></ROW><ROW><id>16717310</id><snippet>begin_nested</snippet></ROW><ROW><id>16717310</id><snippet>transaction.savepoint()</snippet></ROW><ROW><id>16717310</id><snippet>DBSession.flush()</snippet></ROW><ROW><id>16717310</id><snippet>flush</snippet></ROW><ROW><id>16717310</id><snippet>try:
    sp = transaction.savepoint()
    contact_person = DBSession.query(ContactPerson)\
        .filter(ContactPerson.id == contact_person_id)\
        .one()
    DBSession.flush()
except (NoResultFound, DataError):
    sp.rollback()
    contact_person = ContactPerson(name='', email='', phone='')

return dict(contact_person=contact_person)
</snippet></ROW><ROW><id>16717381</id><snippet>GET - for listing resources or retrieving details
POST - for creating resources
PUT - for replacing/updating resources
DELETE - for deleting resources
</snippet></ROW><ROW><id>16717415</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>16717415</id><snippet>__getitem__</snippet></ROW><ROW><id>16717415</id><snippet>In [1]: from random import shuffle

In [2]: from operator import itemgetter

In [3]: rand = range(10)

In [4]: shuffle(rand)

In [5]: rand
Out[5]: [1, 9, 2, 5, 4, 3, 0, 6, 8, 7]

In [6]: class A(object):
   ...:     def __init__(self, n):
   ...:         self.n = n
   ...:     def __repr__(self):
   ...:         return str(self.n)
   ...:     

In [7]: sorted([A(n) for n in rand], key=itemgetter(0))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-7-33ca678e282d&gt; in &lt;module&gt;()
----&gt; 1 sorted([A(n) for n in rand], key=itemgetter(0))

TypeError: 'A' object does not support indexing
</snippet></ROW><ROW><id>16717415</id><snippet>In [8]: class A(object):
   ...:     def __init__(self, n):
   ...:         self.n = n
   ...:     def __repr__(self):
   ...:         return str(self.n)
   ...:     def __getitem__(self,ind):
   ...:         return self.n
   ...:     

In [9]: sorted([A(n) for n in rand], key=itemgetter(0))
Out[9]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>16717415</id><snippet>operator.attrgetter</snippet></ROW><ROW><id>16717415</id><snippet>Book</snippet></ROW><ROW><id>16717415</id><snippet>sorted(data, operator.attrgetter('title'))
</snippet></ROW><ROW><id>16717415</id><snippet>def key_func(obj):
    if isinstance(obj, Book):
        return obj.title
    elif isinstance(obj, SomeOtherClass):
        return obj.some_other_attr
    else:
        raise TypeError('Unknown object!!!')

#  usage: sorted(data, key=key_func)
</snippet></ROW><ROW><id>16717415</id><snippet>__cmp__</snippet></ROW><ROW><id>16717415</id><snippet>def __cmp__(self, other):
    return cmp(self.attribute_you_want_to_be_compared, other)
</snippet></ROW><ROW><id>16717415</id><snippet>In [10]: class A(object):
    ...:     def __init__(self, n):
    ...:         self.n = n
    ...:     def __repr__(self):
    ...:         return str(self.n)
    ...:     def __cmp__(self, other):
    ...:         return cmp(self.n, other)
    ...:     

In [11]: sorted([A(n) for n in rand])
Out[11]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>16717496</id><snippet>mapping = dict((w, i) for i, w in enumerate(masterWordList))

def tfidfVector(cleanStringVector, masterWordList):    
    featureVector = [0] * len(masterWordList)
    for w in cleanStringVector:
        featureVector[mapping[w]] += 1
    return featureVector
</snippet></ROW><ROW><id>16717710</id><snippet>for location in d:
    lat, long = d[location]
</snippet></ROW><ROW><id>16717710</id><snippet>.items()</snippet></ROW><ROW><id>16717710</id><snippet>for name, location in d.items():
    lat, long = location
</snippet></ROW><ROW><id>16717710</id><snippet>for name, (lat, long) in d.items():
    ...
</snippet></ROW><ROW><id>16717710</id><snippet>dict</snippet></ROW><ROW><id>16717710</id><snippet>dict</snippet></ROW><ROW><id>16717710</id><snippet>long</snippet></ROW><ROW><id>16717737</id><snippet>simple_url_re = re.compile(r'^(https?)?://\[?\w', re.IGNORECASE)
simple_url_2_re = re.compile(r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)$', re.IGNORECASE)

if simple_url_re.match(text) or simple_url_2_re.match(text):
    raise ValidationError
</snippet></ROW><ROW><id>16717957</id><snippet>import re
print re.sub(r"u('\w)", r"\1", p)
</snippet></ROW><ROW><id>16718056</id><snippet>with</snippet></ROW><ROW><id>16718056</id><snippet>with open('/tmp/src.txt','r') as src:
    for line in src:
        print line.strip()
</snippet></ROW><ROW><id>16718056</id><snippet>\&gt;D50541 Abiotrophia defectiva   Aerococcacea
\&gt;AB303221 Acanthopleuribacter pedis     Acanthopleuribacteraceae
\&gt;AJ812213 Acaricomes phytoseiuli        Micrococcaceae
</snippet></ROW><ROW><id>16718056</id><snippet>import re

data={}        
with open('/tmp/src.txt','r') as src:
    for line in src:
        m=re.search(r'&gt;([^\s]*)\s(.*)$',line)       
        if m:
            data[m.group(1)]=m.group(2)  

print data 
</snippet></ROW><ROW><id>16718056</id><snippet>{'AB303221': 'Acanthopleuribacter pedis     Acanthopleuribacteraceae', 'AJ812213': 'Acaricomes phytoseiuli        Micrococcaceae', 'D50541': 'Abiotrophia defectiva   Aerococcacea'}
</snippet></ROW><ROW><id>16718194</id><snippet>import numpy as np:
def func(b,y1,y2):
    a = b.T
    if a[0]*y1 + a[1]*y2 &lt; 0:
        return True
    else:
        return False
np.apply_along_axis(func,0,X,y1,y2)
</snippet></ROW><ROW><id>16718194</id><snippet>&gt;&gt;&gt; np.apply_along_axis(func,0,X,-1,3)
array([ True, False, False], dtype=bool)
</snippet></ROW><ROW><id>16718194</id><snippet>def func(b,*args):
    a = b.T
    total = [a[i]*args[i] for i in range(len(args)-1)]
    if sum(total) &lt; 0:
        return True
    else:
        return False
</snippet></ROW><ROW><id>16718240</id><snippet>type</snippet></ROW><ROW><id>16718240</id><snippet>type</snippet></ROW><ROW><id>16718240</id><snippet>type(name of the class, 
   tuple of the parent class (for inheritance, can be empty), 
   dictionary containing attributes names and values)
</snippet></ROW><ROW><id>16718240</id><snippet>def one(cls, x):
    return int(x)

def two(cls, y):
    return str(y)
</snippet></ROW><ROW><id>16718240</id><snippet>&gt;&gt;&gt; import bunch_methods as bm
&gt;&gt;&gt; Bunch_Class = type('Bunch_Class', (), bm.__dict__)
&gt;&gt;&gt; bunch_object = Bunch_Class()
&gt;&gt;&gt; bunch_object.__class__
&lt;class '__main__.Bunch_Class'&gt;
&gt;&gt;&gt; bunch_object.one(1)
1
&gt;&gt;&gt; bunch_object.two(1)
'1'
</snippet></ROW><ROW><id>16718742</id><snippet>my_str = "(4,301)"
num = -int(my_str.translate(None,"(),"))
</snippet></ROW><ROW><id>16718823</id><snippet>8 5 8</snippet></ROW><ROW><id>16718823</id><snippet>eh</snippet></ROW><ROW><id>16718823</id><snippet>in</snippet></ROW><ROW><id>16718823</id><snippet>for code in map(int, re.findall("\d+", message)):
    if code == 1:
        sys.stdout.write("a")
    -- ... and so on until 26
</snippet></ROW><ROW><id>16718823</id><snippet>if</snippet></ROW><ROW><id>16718934</id><snippet>scrapy server</snippet></ROW><ROW><id>16719559</id><snippet>element.findall('./')</snippet></ROW><ROW><id>16719559</id><snippet>.//</snippet></ROW><ROW><id>16719559</id><snippet>&gt;&gt;&gt; for element in root:
...     print 'parent: ', element.tag, '|', element.attrib
...     print element.text
...     for all_tags in element.findall('.//'):
...         print 'child: ', all_tags.tag, '|', all_tags.attrib
...         if all_tags.text:
...             print all_tags.text, '|', all_tags.tail
... 
parent:  p | {'num': 'p-0003'}

Protein kinases are involved in the signal transduction pathways linking growth factors, hormones and other cell regulation molecules to cell growth, survival and metabolism under both normal and pathological conditions. One such protein kinase, protein kinase B (also known as Akt), is a serine/threonine kinase that plays a central role in promoting the proliferation and survival of a wide range of cell types, thereby protecting cells from apoptosis (programmed cell death) (Khwaja,

child:  i | {}
Nature | 
33-34 (1990)). Three members of the Akt/PKB subfamily of second-messenger regulated serine/threonine protein kinases have been identified and are termed Akt1/PKBα, Akt2/PKBβ, and Akt3/PKBγ. A number of proteins involved in cell proliferation and survival have been described as substrates of Akt in cells. Two examples of such substrates include glycogen synthase kinase-3 (GSK3) and Forkhead transcription factors (FKs). See Brazil and Hemmings,

child:  i | {}
Trends in Biochemical Sciences | 
26, 675-664.

parent:  p | {'num': 'p-0004'}

A number of protein kinases and phosphatases regulate the activity of Akt; For instance, activation of Akt is mediated by phosphatidylinositol 3-kinase (PI3-K), which initiates the binding of second messenger phospholipids to the pleckstrin homology (PH) binding domain of Akt. The binding anchors Akt to plasma membrane and results in phosphorylation and activation of the enzyme. Amplifications of the catalytic subunit of PI3-K, p110α, or mutations in the PI3-K regulatory subunit, p85α, lead to activation of Akt in several types of human cancer. (Vivanco and Sawyers,

child:  i | {}
Nature Reviews in Cancer | 
(2002) 2: 489-501.

parent:  p | {'num': 'p-0005'}

The tumor suppressor, PTEN, is a critical negative regulator of Akt activation by PI3-K. Myers et al.
</snippet></ROW><ROW><id>16719559</id><snippet>repr()</snippet></ROW><ROW><id>16719559</id><snippet>parent:  p | {'num': 'p-0003'}
'\nProtein kinases are involved in the signal transduction pathways linking growth factors, hormones and other cell regulation molecules to cell growth, survival and metabolism under both normal and pathological conditions. One such protein kinase, protein kinase B (also known as Akt), is a serine/threonine kinase that plays a central role in promoting the proliferation and survival of a wide range of cell types, thereby protecting cells from apoptosis (programmed cell death) (Khwaja,\n'
child:  i | {}
'Nature' | u'\n33-34 (1990)). Three members of the Akt/PKB subfamily of second-messenger regulated serine/threonine protein kinases have been identified and are termed Akt1/PKB\u03b1, Akt2/PKB\u03b2, and Akt3/PKB\u03b3. A number of proteins involved in cell proliferation and survival have been described as substrates of Akt in cells. Two examples of such substrates include glycogen synthase kinase-3 (GSK3) and Forkhead transcription factors (FKs). See Brazil and Hemmings,\n'
child:  i | {}
'Trends in Biochemical Sciences' | '\n26, 675-664.\n'
parent:  p | {'num': 'p-0004'}
u'\nA number of protein kinases and phosphatases regulate the activity of Akt; For instance, activation of Akt is mediated by phosphatidylinositol 3-kinase (PI3-K), which initiates the binding of second messenger phospholipids to the pleckstrin homology (PH) binding domain of Akt. The binding anchors Akt to plasma membrane and results in phosphorylation and activation of the enzyme. Amplifications of the catalytic subunit of PI3-K, p110\u03b1, or mutations in the PI3-K regulatory subunit, p85\u03b1, lead to activation of Akt in several types of human cancer. (Vivanco and Sawyers,\n'
child:  i | {}
'Nature Reviews in Cancer' | '\n(2002) 2: 489-501.\n'
parent:  p | {'num': 'p-0005'}
'\nThe tumor suppressor, PTEN, is a critical negative regulator of Akt activation by PI3-K. Myers et al.\n'
</snippet></ROW><ROW><id>16719665</id><snippet>objPointShape = 100
objectpoints = np.random.rand(objPointShape, 3)
ipxShape = 100
ipx = np.random.rand(1, ipxShape)
ipyShape = 100
ipy = np.random.rand(1, ipyShape)
k = 1
hologram = np.zeros((ipxShape,ipyShape))
hologram = hologram+0j
</snippet></ROW><ROW><id>16719665</id><snippet>hologram</snippet></ROW><ROW><id>16719665</id><snippet>def vec_get_complex_wave():
    dx = objectpoints[:, 0, None] - ipx # shape (objPointShape, ipxShape)
    dy = objectpoints[:, 1, None] - ipy # shape (objPointShape, ipyShape)
    dz = objectpoints[:, 2, None] # shape (objPointShape, 1)
    distance = np.sqrt((dx*dx)[..., None] + (dy*dy)[:, None, :] +
                       (dz*dz)[..., None])
    complexwave = np.exp(1j*k*distance)
    return complexwave.sum(axis=0)
</snippet></ROW><ROW><id>16719665</id><snippet>objPointShape</snippet></ROW><ROW><id>16719665</id><snippet>ipxShape</snippet></ROW><ROW><id>16719665</id><snippet>ipyShape</snippet></ROW><ROW><id>16719665</id><snippet>%timeit -n1 -r1 getComplexwave()
1 loops, best of 1: 11.1 s per loop

%timeit vec_get_complex_wave()
10 loops, best of 3: 76.7 ms per loop

np.allclose(hologram, vec_get_complex_wave())
Out[4]: True
</snippet></ROW><ROW><id>16719748</id><snippet> </snippet></ROW><ROW><id>16719748</id><snippet>\u00a0</snippet></ROW><ROW><id>16720037</id><snippet>Flask</snippet></ROW><ROW><id>16720083</id><snippet>publication.tags.all()
</snippet></ROW><ROW><id>16720083</id><snippet>{% for tag in publication.tags.all %}
   {{ tag }}
{% endfor %}
</snippet></ROW><ROW><id>16720113</id><snippet>for</snippet></ROW><ROW><id>16720113</id><snippet>for item in (item for sub_list in super_list for item in sub_list):
</snippet></ROW><ROW><id>16720113</id><snippet>next()</snippet></ROW><ROW><id>16720113</id><snippet>&gt;&gt;&gt; super_list = [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]
&gt;&gt;&gt; gen = (sub_list for sub_list in super_list for item in sub_list)
&gt;&gt;&gt; next(gen)
[0, 1, 2, 3, 4]
&gt;&gt;&gt; gen = (item for sub_list in super_list for item in sub_list)
&gt;&gt;&gt; next(gen)
0
&gt;&gt;&gt; for item in (item for sub_list in super_list for item in sub_list):
...     print item
... 
0
1
2
3
4
5
6
7
8
9
</snippet></ROW><ROW><id>16720171</id><snippet>import re

# Pre-compile the patterns
regexes = [ re.compile(p) for p in [ 'this',
                                     'that',
                                     ]
            ]
text = 'Does this text match the pattern?'

for regex in regexes:
    print 'Looking for "%s" in "%s" -&gt;' % (regex.pattern, text),

    if regex.search(text):
        print 'found a match!'
    else:
        print 'no match'
</snippet></ROW><ROW><id>16720304</id><snippet>@app.route('/edit_bill/&lt;int:bill_id&gt;', methods = ['GET'])
def edit_bill(bill_id):
    s = Session()
    bill = s.query(Bill).filter_by(id=bill_id).first()
    form = BillForm(obj=Bill)
    return render_template('edit_bill.html', form = form)
</snippet></ROW><ROW><id>16720304</id><snippet>obj</snippet></ROW><ROW><id>16720304</id><snippet>form.date_due.data</snippet></ROW><ROW><id>16720304</id><snippet>&lt;sqlalchemy.orm.attributes.InstrumentedAttribute at 0x277b2d0&gt;</snippet></ROW><ROW><id>16720304</id><snippet>strftime</snippet></ROW><ROW><id>16720304</id><snippet>form = BillForm(obj=bill)</snippet></ROW><ROW><id>16720304</id><snippet>@app.route('/edit_bill/&lt;int:bill_id&gt;', methods = ['GET', 'POST'])
def edit_bill(bill_id):
    s = Session()
    bill = s.query(Bill).filter_by(id=bill_id).first()
    form = BillForm(request.form, obj=bill)
    if request.method == 'POST' and form.validate():
        form.populate_obj(bill)
        s.add(bill)
        s.commit()
        # Do some other stuff, for example set a flash()
    return render_template('edit_bill.html', form = form)
</snippet></ROW><ROW><id>16720412</id><snippet>list</snippet></ROW><ROW><id>16720412</id><snippet>revs</snippet></ROW><ROW><id>16720412</id><snippet>cada = revs(rev, us, list_acct[:])
</snippet></ROW><ROW><id>16720412</id><snippet>list_acct</snippet></ROW><ROW><id>16720412</id><snippet>revs</snippet></ROW><ROW><id>16720412</id><snippet>r1 = revs(1, 1)
r2 = revs(2, 2)
r1.accs.append("Hi!")
print(r1.accs) # prints ['Hi!']
print(r2.accs) # prints ['Hi!']
</snippet></ROW><ROW><id>16720412</id><snippet>revs</snippet></ROW><ROW><id>16720412</id><snippet>None</snippet></ROW><ROW><id>16720412</id><snippet>[]</snippet></ROW><ROW><id>16720412</id><snippet>class revs:
    def __init__(self, rev, us, accs=None):
        self.rev = rev
        self.us = us
        if accs is None:
            accs = []
        self.accs = accs
</snippet></ROW><ROW><id>16720566</id><snippet>import Beach

b = Beach("candolim", "goa")
print b.__class__
</snippet></ROW><ROW><id>16720566</id><snippet>public class Beach {
  private String name, city;

  public Beach() {
  }
}
</snippet></ROW><ROW><id>16720566</id><snippet>$ jython beach.py
Traceback (most recent call last):
  File "beach.py", line 3, in &lt;module&gt;
    b = Beach("candolim", "goa")
TypeError: Beach(): expected 0 args; got 2
</snippet></ROW><ROW><id>16720566</id><snippet>public class Beach {
private String name, city;

public Beach(String name, String city) {
  this.name = name;
  this.city = city;
 }
}
</snippet></ROW><ROW><id>16720566</id><snippet>$ jython beach.py
&lt;type 'Beach'&gt;
</snippet></ROW><ROW><id>16720566</id><snippet>$ rm *.class
$ cat Beach.java
public class Beach {
    private String name, city;

    public Beach(String name, String city) {
        this.name = name;
        this.city = city;
    }
}
$ javac Beach.java
$ javap Beach
Compiled from "Beach.java"
public class Beach {
  public Beach(java.lang.String, java.lang.String);
}
$ jython
Jython 2.7b1 (default:ac42d59644e9, Feb 9 2013, 15:24:52)
[Java HotSpot(TM) 64-Bit Server VM (Oracle Corporation)] on java1.7.0_15
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import Beach
&gt;&gt;&gt; b = Beach()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Beach(): expected 2 args; got 0
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16720566</id><snippet>javap</snippet></ROW><ROW><id>16720566</id><snippet>public class Beach</snippet></ROW><ROW><id>16720566</id><snippet>class Beach</snippet></ROW><ROW><id>16720638</id><snippet>/etc/resolv.conf</snippet></ROW><ROW><id>16720638</id><snippet>/etc/nsswitch.conf</snippet></ROW><ROW><id>16720638</id><snippet>getaddrinfo_a</snippet></ROW><ROW><id>16720638</id><snippet>gethostbyname</snippet></ROW><ROW><id>16720638</id><snippet>twisted.names</snippet></ROW><ROW><id>16720638</id><snippet>twisted.names.client</snippet></ROW><ROW><id>16720705</id><snippet>str.replace()</snippet></ROW><ROW><id>16720705</id><snippet>re.sub()</snippet></ROW><ROW><id>16720705</id><snippet>import re
line = re.sub(r"(?i)^.*interfaceOpDataFile.*$", "interfaceOpDataFile %s" % fileIn, line)
</snippet></ROW><ROW><id>16720705</id><snippet>import re
regex = re.compile(r"^.*interfaceOpDataFile.*$", re.IGNORECASE)
for line in some_file:
    line = regex.sub("interfaceOpDataFile %s" % fileIn, line)
    # do something with the updated line
</snippet></ROW><ROW><id>16720818</id><snippet>for as_string in ' '.split(line):
</snippet></ROW><ROW><id>16720818</id><snippet>' '</snippet></ROW><ROW><id>16720818</id><snippet>line</snippet></ROW><ROW><id>16720818</id><snippet>[' ']</snippet></ROW><ROW><id>16720818</id><snippet>' '</snippet></ROW><ROW><id>16720818</id><snippet>for as_string in line.split():
    ...
</snippet></ROW><ROW><id>16720818</id><snippet>line</snippet></ROW><ROW><id>16720901</id><snippet>In [99]: df.date = df.date.apply(pd.Timestamp)

In [100]: df
Out[100]: 
           keyword  hits                date  average time
1   the cat sat on    10 2013-01-10 00:00:00          10.0
2   who is the sea     5 2013-01-10 00:00:00           1.2
3  under the earth    30 2013-12-01 00:00:00           2.5
4     what is this   100 2013-02-01 00:00:00           9.0
</snippet></ROW><ROW><id>16720901</id><snippet>In [101]: daily_totals = df.groupby('date').hits.sum()

In [102]: daily_totals
Out[102]: 
date
2013-01-10     15
2013-02-01    100
2013-12-01     30
Name: hits, dtype: int64
</snippet></ROW><ROW><id>16720901</id><snippet>In [103]: normalized_totals = daily_totals.groupby(lambda d: d.month).transform(lambda x: float(x)/x.sum())

In [104]: normalized_totals
Out[104]: 
date
2013-01-10    1
2013-02-01    1
2013-12-01    1
Name: hits, dtype: int64
</snippet></ROW><ROW><id>16720915</id><snippet>all()</snippet></ROW><ROW><id>16720915</id><snippet>length = len(list1)
if all(len(lst) == length for lst in [list2, list3, list4, list5, list6]):
    # all lists are the same length
</snippet></ROW><ROW><id>16720915</id><snippet>length = len(list1)
if any(len(lst) != length for lst in [list2, list3, list4, list5, list6]):
    # at least one list has a different length
</snippet></ROW><ROW><id>16720915</id><snippet>all()</snippet></ROW><ROW><id>16720915</id><snippet>any()</snippet></ROW><ROW><id>16720915</id><snippet>list2</snippet></ROW><ROW><id>16720915</id><snippet>list3</snippet></ROW><ROW><id>16720915</id><snippet>list6</snippet></ROW><ROW><id>16720915</id><snippet>length = len(lists[0])
if all(len(lst) == length for lst in lists[1:]):
    # all lists are the same length
</snippet></ROW><ROW><id>16720971</id><snippet>.strip()</snippet></ROW><ROW><id>16720971</id><snippet>&gt;&gt;&gt; ' something '.strip
&lt;built-in method strip of str object at 0x102719d80&gt;
&gt;&gt;&gt; ' something '.strip()
'something'
</snippet></ROW><ROW><id>16720971</id><snippet>.strip()</snippet></ROW><ROW><id>16721296</id><snippet>File</snippet></ROW><ROW><id>16721296</id><snippet>upload_to</snippet></ROW><ROW><id>16721296</id><snippet>from django.core.files import File

main_image = UploadedImage(image=File(open(full_size_tmp)), thumbnail=File(open(thumb_size_tmp)), creator=request.user)
main_image.save()
</snippet></ROW><ROW><id>16721373</id><snippet>from PIL import Image, ImageChops

point_table = ([0] + ([255] * 255))

def black_or_b(a, b):
    diff = ImageChops.difference(a, b)
    diff = diff.convert('L')
    diff = diff.point(point_table)
    new = diff.convert('RGB')
    new.paste(b, mask=diff)
    return new

a = Image.open('a.png')
b = Image.open('b.png')
c = black_or_b(a, b)
c.save('c.png')
</snippet></ROW><ROW><id>16721459</id><snippet>break</snippet></ROW><ROW><id>16721459</id><snippet>if there is no page, we break</snippet></ROW><ROW><id>16721459</id><snippet>if there is a page, we do this, and if it isn't, we break</snippet></ROW><ROW><id>16721459</id><snippet>break</snippet></ROW><ROW><id>16721465</id><snippet>re.findall()</snippet></ROW><ROW><id>16721465</id><snippet>&gt;&gt;&gt; numAndSize = re.compile(r'\d+[xX]\d+(?:\.\d+)?')
&gt;&gt;&gt; numAndSize.findall("Product:A,2x3.5gallonbottles")
['2x3.5']
</snippet></ROW><ROW><id>16721465</id><snippet>&gt;&gt;&gt; numAndSize = re.compile(r'(\d+)[xX](\d+(?:\.\d+)?)')
&gt;&gt;&gt; numAndSize.findall("Product:A,2x3.5gallonbottles")
[('2', '3.5')]
</snippet></ROW><ROW><id>16721510</id><snippet>def game(n):
    for i in range(n):
        dig1 = random.randrange(0,10)
        dig2 = random.randrange(0,10)
        print (dig1, '+', dig2, '=')
        answer = eval(input('Enter Answer: '))
        if answer == dig1 + dig2:
            print ('Correct.')
        else:
            print ('Incorrect.')
</snippet></ROW><ROW><id>16721554</id><snippet>self.order_entries = [x for x in self.order_entries
                      if x.Order_ID != Order_ID or x.Item_ID != Item_ID]
</snippet></ROW><ROW><id>16721554</id><snippet>self.order_entries.remove(x)</snippet></ROW><ROW><id>16721670</id><snippet>os.remove(f.name)</snippet></ROW><ROW><id>16721670</id><snippet>os.remove(tmpfn)</snippet></ROW><ROW><id>16721670</id><snippet>with</snippet></ROW><ROW><id>16721670</id><snippet>tempfile</snippet></ROW><ROW><id>16721670</id><snippet>with</snippet></ROW><ROW><id>16721670</id><snippet>with open(tempfn, 'wb') as f:
    buffer = XWF.Read(hItem, offset, size)
    f.write(buffer)
</snippet></ROW><ROW><id>16721670</id><snippet>f.close()</snippet></ROW><ROW><id>16721670</id><snippet>tempfile</snippet></ROW><ROW><id>16721670</id><snippet>TemporaryFile</snippet></ROW><ROW><id>16721670</id><snippet>from tempfile import TemporaryFile


with TemporaryFile(prefix=fn) as tmpfile:
    tmpfile.write(XWF.Read(hItem, offset, size))
    tmpfile.seek(0)
    try:
        image = Image.open(tmpfile)
        exif_data = get_exif_data(image)
    except IOError:
        print 'Not an image'
        return

    gps = get_lat_lon(exif_data)
    if gps[0]:
        gps_data[fn] = (repr(gps[0]), repr(gps[1]))
        print('Found GPS data in %s' % fn)
    else:
        print('No GPS data in image %s' % fn)

    del image

 # tmpfile is automatically closed because we used it as a context manager
</snippet></ROW><ROW><id>16721670</id><snippet>try</snippet></ROW><ROW><id>16721670</id><snippet>IOError</snippet></ROW><ROW><id>16721700</id><snippet>Defaults    env_keep += "PYTHONPATH"
</snippet></ROW><ROW><id>16721720</id><snippet>def</snippet></ROW><ROW><id>16721720</id><snippet>global</snippet></ROW><ROW><id>16721720</id><snippet>inspect</snippet></ROW><ROW><id>16721720</id><snippet>def get_globals(thing):
    thing = getattr(thing, 'im_func', thing)
    thing = getattr(thing, 'func_code', thing)
    return thing.co_names
</snippet></ROW><ROW><id>16721720</id><snippet>def get_callable_globals(thing):
    thing = getattr(thing, 'im_func', thing)
    func_globals = getattr(thing, 'func_globals', {})
    thing = getattr(thing, 'func_code', thing)
    return [name for name in thing.co_names
            if callable(func_globals.get(name))]
</snippet></ROW><ROW><id>16721720</id><snippet>&gt;&gt;&gt; def foo(myparam):
...     myglobal
...     mylocal = 1
&gt;&gt;&gt; print get_globals(foo)
('myglobal',)
</snippet></ROW><ROW><id>16721720</id><snippet>import</snippet></ROW><ROW><id>16721720</id><snippet>get_globals()</snippet></ROW><ROW><id>16721720</id><snippet>dis</snippet></ROW><ROW><id>16721720</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>16721720</id><snippet>inspect</snippet></ROW><ROW><id>16721720</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>16721720</id><snippet>CALL_FUNCTION</snippet></ROW><ROW><id>16721720</id><snippet>globals</snippet></ROW><ROW><id>16721720</id><snippet>class GlobalsWrapper(collections.MutableMapping):
    def __init__(self, globaldict):
        self.globaldict = globaldict
    # ... implement at least __setitem__, __delitem__, __iter__, __len__
    # in the obvious way, by delegating to self.globaldict
    def __getitem__(self, key):
        print &gt;&gt;sys.stderr, 'Warning: accessing global "{}"'.format(key)
        return self.globaldict[key]

globals_wrapper = GlobalsWrapper(globals())
</snippet></ROW><ROW><id>16721720</id><snippet>    def __getitem__(self, key):
        value = self.globaldict[key]
        if not callable(value):
            print &gt;&gt;sys.stderr, 'Warning: accessing global "{}"'.format(key)
        return value
</snippet></ROW><ROW><id>16721720</id><snippet>GlobalsWrapper</snippet></ROW><ROW><id>16721720</id><snippet>globals</snippet></ROW><ROW><id>16721720</id><snippet>execfile</snippet></ROW><ROW><id>16721720</id><snippet>GlobalsWrapper</snippet></ROW><ROW><id>16721741</id><snippet>@skip_circle
Scenario: My scenario that does stuff
    Given I do stuff
    .
    .
</snippet></ROW><ROW><id>16721741</id><snippet>lettuce --tag=-skip_circle
./manage.py harvest --tag=-skip_circle #for django
</snippet></ROW><ROW><id>16721876</id><snippet>cd python-for-android
git clean -dxf
git pull origin master
</snippet></ROW><ROW><id>16721944</id><snippet>win32gui</snippet></ROW><ROW><id>16721944</id><snippet>win32gui.GetCaretPos()</snippet></ROW><ROW><id>16721976</id><snippet>$ uname
Darwin
</snippet></ROW><ROW><id>16721998</id><snippet>allowed = [msg for msg in collected 
           if not any( dm.search(msg['service']) 
                       for dm in denied_metrics) ]
</snippet></ROW><ROW><id>16721998</id><snippet>&gt;&gt;&gt; pprint.pprint(collected)
[{'denied': False, 'metric': 1.0, 'service': 'ab'},
 {'denied': False, 'metric': 1.0, 'service': 'bc'},
 {'denied': False, 'metric': 1.0, 'service': 'ca'},
 {'denied': False, 'metric': 1.0, 'service': 'cb'},
 {'denied': False, 'metric': 1.0, 'service': 'bc'}]
&gt;&gt;&gt; denied_metrics = [re.compile("a"), re.compile("c$")]
&gt;&gt;&gt; allowed = [msg for msg in collected 
               if not any(dm.search(msg['service'])
               for dm in denied_metrics)]
&gt;&gt;&gt; allowed
[{'metric': 1.0, 'service': 'cb', 'denied': False}]
</snippet></ROW><ROW><id>16721998</id><snippet>search</snippet></ROW><ROW><id>16721998</id><snippet>match</snippet></ROW><ROW><id>16722315</id><snippet>.strip()</snippet></ROW><ROW><id>16722315</id><snippet>{'.', 'v', 'b', 'p', 'r', 'o', 'j'}</snippet></ROW><ROW><id>16722315</id><snippet>&gt;&gt;&gt; 'blah.APDS.UnitTests.vbproj'.strip('.vbproj')
'lah.APDS.UnitTests'    # Note that 'b' was removed from the start
</snippet></ROW><ROW><id>16722315</id><snippet>testPath = files[:-len('.vbproj')]
</snippet></ROW><ROW><id>16722315</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>16722315</id><snippet>testPath = os.path.splitext(files)[0]
</snippet></ROW><ROW><id>16722315</id><snippet>&gt;&gt;&gt; 'blah.APDS.UnitTests.vbproj'[:-len('.vbproj')]
'blah.APDS.UnitTests'
&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.splitext('blah.APDS.UnitTests.vbproj')[0]
'blah.APDS.UnitTests'
</snippet></ROW><ROW><id>16722352</id><snippet>mylist.extend(x[:5] for x in otherlist)
</snippet></ROW><ROW><id>16722400</id><snippet>class test(object):
    __slots__ = ['a', 'next']

x = test()
x.next = x
x.a = 42
</snippet></ROW><ROW><id>16722400</id><snippet>__slots__</snippet></ROW><ROW><id>16722400</id><snippet>class test(object):
    def __init__(self, a, next):
        self.a = a
        self.next = next

x = test(21, None)
assert x.a == 21
</snippet></ROW><ROW><id>16722400</id><snippet>import collections
test = collections.namedtuple('test', ['a', 'next'])
</snippet></ROW><ROW><id>16722500</id><snippet>s = raw_input("Octal?  ")
digits = map(int, s)
lookup = ['','x','w','wx','r','rx','rw','rwx']
perms = [lookup[d] for d in digits]
rights = ['{}={}'.format(*x) for x in zip('ugo', perms)]
print ','.join(rights)
</snippet></ROW><ROW><id>16722505</id><snippet>astimezone</snippet></ROW><ROW><id>16722505</id><snippet>import pytz, datetime

timeUTC = datetime.datetime(2013, 5, 23, 19, 27, 50, 0)
timezoneLocal = pytz.timezone('Europe/Vilnius')
utc = pytz.utc
timeLocal = utc.localize(timeUTC).astimezone(timezoneLocal)
print(timeLocal)
# 2013-05-23 22:27:50+03:00
</snippet></ROW><ROW><id>16722505</id><snippet>localize</snippet></ROW><ROW><id>16722505</id><snippet>localize</snippet></ROW><ROW><id>16722505</id><snippet>timeUTC</snippet></ROW><ROW><id>16722505</id><snippet>astimezone</snippet></ROW><ROW><id>16722677</id><snippet>None</snippet></ROW><ROW><id>16722677</id><snippet>def mathprob(x):
     return math.sqrt(x)
</snippet></ROW><ROW><id>16722806</id><snippet>max</snippet></ROW><ROW><id>16722806</id><snippet>key=len</snippet></ROW><ROW><id>16722806</id><snippet>In [3]: max([l1, l2], key=len)
Out[3]: [4, 5, 6, 7]
</snippet></ROW><ROW><id>16722806</id><snippet>In [4]: max(['abcd', 'ab'], key=len)
Out[4]: 'abcd'

In [5]: max([(1, 2), (1, 2, 3), (1,)], key=len)
Out[5]: (1, 2, 3)

In [6]: max(['abc', [1, 2, 3]], key=len)
Out[6]: 'abc'
</snippet></ROW><ROW><id>16722806</id><snippet>In [7]: max(l1, l2, key=len)
Out[7]: [4, 5, 6, 7]
</snippet></ROW><ROW><id>16722806</id><snippet>max</snippet></ROW><ROW><id>16722806</id><snippet>key</snippet></ROW><ROW><id>16722806</id><snippet>key</snippet></ROW><ROW><id>16722806</id><snippet>def my_max(*L, key=None):  # in python 2 we'd need to grab from kwargs (and raise type error if rogue keywords are passed)
    L = list(L[0]) if len(L) == 1 else L  # max takes iterable as first argument, or two or more arguments...
    if not L:
        raise ValueError("my_max() arg is an empty sequence")
    if key is None:   # if you don't pass a key use the identity
        key = lambda x: x
    max_item, max_size = L[0], key(L[0])
    for item in L[1:]:
        if key(item) &gt; max_size:
            max_item, max_size = item, key(item)
    return max_item
</snippet></ROW><ROW><id>16722830</id><snippet>B=A[0]
</snippet></ROW><ROW><id>16722830</id><snippet>B=list(A[0])
</snippet></ROW><ROW><id>16722830</id><snippet>import copy
B = copy.deepcopy(A[0])
</snippet></ROW><ROW><id>16723044</id><snippet>replacement</snippet></ROW><ROW><id>16723044</id><snippet>def replacement(match):
    return ''.join(y[0] for y in m.group(0).split())
</snippet></ROW><ROW><id>16723073</id><snippet>time.sleep(1)</snippet></ROW><ROW><id>16723073</id><snippet>btn_start_click</snippet></ROW><ROW><id>16723073</id><snippet>Queue</snippet></ROW><ROW><id>16723073</id><snippet>self.counter.set(i)</snippet></ROW><ROW><id>16723073</id><snippet>self.counter = i</snippet></ROW><ROW><id>16723073</id><snippet>self.download_bar.step()</snippet></ROW><ROW><id>16723341</id><snippet> for i in range(0,COUNT):
    for j in range(i+1,COUNT):
        foo(i,j)
</snippet></ROW><ROW><id>16723341</id><snippet>[[foo(i,j) for j in range(i+1,COUNT)] for i in range(0,COUNT)]
</snippet></ROW><ROW><id>16723428</id><snippet>/about/</snippet></ROW><ROW><id>16723730</id><snippet>bucket</snippet></ROW><ROW><id>16723730</id><snippet>object</snippet></ROW><ROW><id>16723730</id><snippet>FULL_CONTROL</snippet></ROW><ROW><id>16723730</id><snippet>private</snippet></ROW><ROW><id>16723730</id><snippet>from boto.s3.connection import S3Connection 
from boto.s3.key import Key

conn = S3Connection(ACCESS_KEY, SECRET_ACCESS_KEY)
bucket = conn.get_bucket(MY_BUCKET_NAME)
key = Key(bucket, MY_KEY_NAME)

if not bucket.get_key(key.name):
    key.set_contents_from_string("foo")
</snippet></ROW><ROW><id>16723730</id><snippet>READ</snippet></ROW><ROW><id>16723730</id><snippet>authenticated-read</snippet></ROW><ROW><id>16723765</id><snippet>os.remove()</snippet></ROW><ROW><id>16723765</id><snippet>os.remove()</snippet></ROW><ROW><id>16723765</id><snippet>os.remove()</snippet></ROW><ROW><id>16723839</id><snippet>textwrap</snippet></ROW><ROW><id>16723839</id><snippet>'# '</snippet></ROW><ROW><id>16723839</id><snippet>&gt;&gt;&gt; import textwrap
&gt;&gt;&gt; long_line = "# alpha || bravo || charlie || delta || echo are the first 5 elements of NATO"
&gt;&gt;&gt; textwrap.fill(long_line, 30, subsequent_indent='# ')
'# alpha || bravo || charlie ||\n# delta || echo are the first\n# 5 elements of NATO'
&gt;&gt;&gt; print textwrap.fill(long_line, 30, subsequent_indent='# ')
# alpha || bravo || charlie ||
# delta || echo are the first
# 5 elements of NATO
</snippet></ROW><ROW><id>16723937</id><snippet>?:</snippet></ROW><ROW><id>16723937</id><snippet>(?:\\\\)
</snippet></ROW><ROW><id>16723958</id><snippet>login:password</snippet></ROW><ROW><id>16723958</id><snippet>dGVzdDp0ZXN0</snippet></ROW><ROW><id>16723958</id><snippet>test:test</snippet></ROW><ROW><id>16724169</id><snippet>fast_iter</snippet></ROW><ROW><id>16724169</id><snippet>import lxml.etree as ET
import pprint


def fast_iter(context, func, *args, **kwargs):
    """
    http://www.ibm.com/developerworks/xml/library/x-hiperfparse/ (Liza Daly)
    See also http://effbot.org/zone/element-iterparse.htm
    """
    for event, elem in context:
        func(elem, *args, **kwargs)
        # It's safe to call clear() here because no descendants will be
        # accessed
        elem.clear()
        # Also eliminate now-empty references from the root node to elem
        # (ancestor loop added by unutbu)
        for ancestor in elem.xpath('ancestor-or-self::*'):
            while ancestor.getprevious() is not None:
                del ancestor.getparent()[0]
    del context


def process_element(elem, namespaces):
    memelements = elem.findall('.//root:mem', namespaces=namespaces)
    pprint.pprint(memelements)

if __name__ == '__main__':
    xmlns = "http://www.ibm.com/j9/verbosegc"
    namespaces = {'root': xmlns}
    with open('small.xml', "r+") as xmlf:
        context = ET.iterparse(xmlf, events=('end', ),
                               tag='{{{}}}gc-start'.format(xmlns))
        fast_iter(context, process_element, namespaces)
</snippet></ROW><ROW><id>16724271</id><snippet>class FakeNumber:
    def __init__(self, i):
        self.i = i

    def __imul__(self, B):
        self.i = self.i * B.i
        return self

a = FakeNumber(5)
b = FakeNumber(6)

a *= b
</snippet></ROW><ROW><id>16724400</id><snippet>dict2 = {k: x[:i] + x[i+1:] for x in dict1.values() for i, k in enumerate(x)}
</snippet></ROW><ROW><id>16724400</id><snippet>dict1.itervalues()</snippet></ROW><ROW><id>16724585</id><snippet>TEST_RUNNER ='djcelery.contrib.test_runner.CeleryTestSuiteRunner'</snippet></ROW><ROW><id>16724585</id><snippet>settings.py</snippet></ROW><ROW><id>16724660</id><snippet>return</snippet></ROW><ROW><id>16724660</id><snippet>print</snippet></ROW><ROW><id>16724660</id><snippet>total()</snippet></ROW><ROW><id>16724660</id><snippet>class something(object):
    def __init__(self, name=None, someobjects=[]):
        self.name = name
        self.someobjects = someobjects

    def total(self):
        return len(self.someobjects)

listofpeoplewhoarethisclass = [something("john", [1,2,3])]

for person in listofpeoplewhoarethisclass:
    print person.name, person.total(), len(person.someobjects)
</snippet></ROW><ROW><id>16724660</id><snippet>john 3 3</snippet></ROW><ROW><id>16724683</id><snippet>class BoolChange:
    def __init__(self):
        self.count = 0

    def __bool__(self):
        self.count += 1
        return self.count &lt;= 5

x = BoolChange()
while x:
    print("Running")
</snippet></ROW><ROW><id>16724683</id><snippet>Running</snippet></ROW><ROW><id>16724700</id><snippet>import numpy
data = numpy.array([[ 1, 2, 5 ]])
mask = numpy.array([[0,1,0]])

numpy.ma.masked_array(data, ~mask) #note this probably wont work right for non-boolean (T/F) values
#or
numpy.ma.masked_array(data, numpy.logical_not(mask))
</snippet></ROW><ROW><id>16724700</id><snippet>&gt;&gt;&gt; a = numpy.array([False,True,False])
&gt;&gt;&gt; ~a
array([ True, False,  True], dtype=bool)
&gt;&gt;&gt; numpy.logical_not(a)
array([ True, False,  True], dtype=bool)
&gt;&gt;&gt; a = numpy.array([0,1,0])
&gt;&gt;&gt; ~a
array([-1, -2, -1])
&gt;&gt;&gt; numpy.logical_not(a)
array([ True, False,  True], dtype=bool)
</snippet></ROW><ROW><id>16724757</id><snippet>AUTOINCREMENT</snippet></ROW><ROW><id>16724757</id><snippet>PRAGMA table_info([tablename])</snippet></ROW><ROW><id>16724757</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; conn = sqlite3.connect(':memory:')
&gt;&gt;&gt; conn.execute('CREATE TABLE foo (bar INTEGER PRIMARY KEY AUTOINCREMENT, baz)')
&lt;sqlite3.Cursor object at 0x10a124f50&gt;
&gt;&gt;&gt; c = conn.cursor()
&gt;&gt;&gt; c.execute('PRAGMA table_info("foo")')
&lt;sqlite3.Cursor object at 0x10a124ef8&gt;
&gt;&gt;&gt; for row in c: print row
... 
(0, u'bar', u'INTEGER', 0, None, 1)
(1, u'baz', u'', 0, None, 0)
&gt;&gt;&gt; [col[0] for col in c.description]
['cid', 'name', 'type', 'notnull', 'dflt_value', 'pk']
</snippet></ROW><ROW><id>16724757</id><snippet>pk</snippet></ROW><ROW><id>16724757</id><snippet>bar</snippet></ROW><ROW><id>16724757</id><snippet>1</snippet></ROW><ROW><id>16724757</id><snippet>sqlite_master</snippet></ROW><ROW><id>16724757</id><snippet>AUTOINCREMENT</snippet></ROW><ROW><id>16724757</id><snippet>&gt;&gt;&gt; c.execute('SELECT 1 FROM sqlite_master WHERE tbl_name="foo" AND sql LIKE "%AUTOINCREMENT%"')
&lt;sqlite3.Cursor object at 0x10a124ef8&gt;
&gt;&gt;&gt; c.fetchone()
(1,)
</snippet></ROW><ROW><id>16724757</id><snippet>sqlite_sequence</snippet></ROW><ROW><id>16724757</id><snippet>&gt;&gt;&gt; c.execute('insert into foo (baz) values (1)')
&lt;sqlite3.Cursor object at 0x10a124ef8&gt;
&gt;&gt;&gt; c.execute('SELECT 1 FROM sqlite_sequence WHERE name="foo"')
&lt;sqlite3.Cursor object at 0x10a124ef8&gt;
&gt;&gt;&gt; c.fetchone()
(1,)
</snippet></ROW><ROW><id>16724762</id><snippet>File "C:\Python27\lib\site-packages\matplotlib\cbook.py", line 34, in &lt;module&gt;
  import new
File "C:\Users\Robert\Desktop\new.py", line 1, in &lt;module&gt;
  import matplotlib.pyplot
</snippet></ROW><ROW><id>16724930</id><snippet>database.append( (newusername, newpassword) )
</snippet></ROW><ROW><id>16724937</id><snippet>defaultdict</snippet></ROW><ROW><id>16724937</id><snippet>nested_dict = lambda: collections.defaultdict(nested_dict)

d = nested_dict()
d[1][2][3] = 'Hello, dictionary!'
print(d[1][2][3]) # Prints Hello, dictionary!
</snippet></ROW><ROW><id>16724937</id><snippet>get</snippet></ROW><ROW><id>16724937</id><snippet>if not d[2][3][4][5]:
    print('That element is empty!')
</snippet></ROW><ROW><id>16725055</id><snippet>&gt;&gt;&gt; a = np.array([[8, 2, 3  , np.inf, 5],[1, 9, np.inf,  4 , 5],[7, 2, np.inf, n
p.inf, 6]])
&gt;&gt;&gt; col_mask = [i for i in range(ncols) if not any(a[:,i] == np.inf)]
&gt;&gt;&gt; print a[:,col_mask]
[[ 8.  2.  5.]
 [ 1.  9.  5.]
 [ 7.  2.  6.]]
</snippet></ROW><ROW><id>16725055</id><snippet>col_mask = np.isfinite(a).all(axis=0)
</snippet></ROW><ROW><id>16725276</id><snippet>\1</snippet></ROW><ROW><id>16725276</id><snippet>r"^([0-9_?]{7})(,[0-9_?]{7})*$"
</snippet></ROW><ROW><id>16725276</id><snippet>?</snippet></ROW><ROW><id>16725400</id><snippet>fractions</snippet></ROW><ROW><id>16725400</id><snippet>int()</snippet></ROW><ROW><id>16725400</id><snippet>def __add__(self, g):
    summed = sum((self.whole_number, g.whole_number, self.fraction, g.fraction))
    whole = int(summed)
    remainder = summed - whole
    return '{} and {}'.format(whole, remainder)
</snippet></ROW><ROW><id>16725400</id><snippet>Fraction()</snippet></ROW><ROW><id>16725400</id><snippet>__add__</snippet></ROW><ROW><id>16725400</id><snippet>Fraction()</snippet></ROW><ROW><id>16725400</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; summed = sum((2, 1, Fraction(3, 4), Fraction(2, 3)))
&gt;&gt;&gt; whole = int(summed)
&gt;&gt;&gt; remainder = summed - whole
&gt;&gt;&gt; '{} and {}'.format(whole, remainder)
'4 and 5/12'
</snippet></ROW><ROW><id>16725400</id><snippet>int()</snippet></ROW><ROW><id>16725400</id><snippet>.numerator</snippet></ROW><ROW><id>16725400</id><snippet>.denominator</snippet></ROW><ROW><id>16725400</id><snippet>fractions.Fraction()</snippet></ROW><ROW><id>16725400</id><snippet>fractions</snippet></ROW><ROW><id>16725400</id><snippet>def __add__(self, g):
    summed = 0
    for v in (self.whole_number, g.whole_number, self.fraction, g.fraction):
        summed = Fraction(summed.numerator * v.denominator +
                          v.numerator * summed.denominator,
                          summed.denominator * v.denominator)
    whole = summed._numerator // summed._denominator
    remainder = Fraction(summed.numerator * whole.denominator -
                         whole.numerator * summed.denominator,
                         summed.denominator * whole.denominator)
    return '{} and {}'.format(whole, remainder)
</snippet></ROW><ROW><id>16725734</id><snippet>basicConfig()</snippet></ROW><ROW><id>16725734</id><snippet>stderr</snippet></ROW><ROW><id>16725734</id><snippet>stderr</snippet></ROW><ROW><id>16725734</id><snippet>logging.basicConfig()</snippet></ROW><ROW><id>16725734</id><snippet>StreamHandler</snippet></ROW><ROW><id>16725734</id><snippet>Formatter</snippet></ROW><ROW><id>16725734</id><snippet>StreamHandler</snippet></ROW><ROW><id>16725734</id><snippet>sys.stderr</snippet></ROW><ROW><id>16725734</id><snippet>logging.basicConfig(level=logging.DEBUG, filename='/some/file/to/log/to')
</snippet></ROW><ROW><id>16725734</id><snippet>logging.basicConfig(level=logging.DEBUG, stream=sys.stdout)
</snippet></ROW><ROW><id>16725734</id><snippet>stdout</snippet></ROW><ROW><id>16725734</id><snippet>print()</snippet></ROW><ROW><id>16725734</id><snippet>stderr</snippet></ROW><ROW><id>16725734</id><snippet>stdout</snippet></ROW><ROW><id>16725734</id><snippet>* * * * * ~/test.py &gt;&gt; ~/test.log 2&amp;&gt;1
</snippet></ROW><ROW><id>16726068</id><snippet>Accept-Range: bytes</snippet></ROW><ROW><id>16726068</id><snippet>Content-Range: 0-2048/123456</snippet></ROW><ROW><id>16726097</id><snippet>MixedNumber</snippet></ROW><ROW><id>16726097</id><snippet>return MixedNumber(whole, remainder)
</snippet></ROW><ROW><id>16726097</id><snippet>type(self)</snippet></ROW><ROW><id>16726097</id><snippet>return type(self)(whole, remainder)
</snippet></ROW><ROW><id>16726097</id><snippet>&gt;&gt;&gt; x = MixedNumber(3, Fraction(1, 3))
&gt;&gt;&gt; y = MixedNumber(-1, Fraction(2, 5))
&gt;&gt;&gt; z = x + y
&gt;&gt;&gt; print z
MixedNumber(2, Fraction(11, 15)
&gt;&gt;&gt; print repr(z)
MixedNumber(2, Fraction(11, 15)
</snippet></ROW><ROW><id>16726097</id><snippet>__add__</snippet></ROW><ROW><id>16726097</id><snippet>&gt;&gt;&gt; print '{} and {}'.format(z.whole_number, z.fraction)
2 and 11/15
</snippet></ROW><ROW><id>16726097</id><snippet>__str__</snippet></ROW><ROW><id>16726097</id><snippet>def __str__(self):
    return '{} and {}'.format(z.whole_number, z.fraction)
</snippet></ROW><ROW><id>16726097</id><snippet>print</snippet></ROW><ROW><id>16726097</id><snippet>&gt;&gt;&gt; print z
2 and 11/15
&gt;&gt;&gt; print repr(z)
MixedNumber(2, Fraction(11, 15)
</snippet></ROW><ROW><id>16726603</id><snippet>with open("file.txt", "r") as f:
        key, val = f.readline().split('=')
        if key.strip() == 'data1':  # if data1 is not the first line
            # do something with value and data
</snippet></ROW><ROW><id>16726619</id><snippet>input()</snippet></ROW><ROW><id>16726619</id><snippet>self.IN = input()
</snippet></ROW><ROW><id>16726619</id><snippet>raw_input()</snippet></ROW><ROW><id>16726619</id><snippet>input()</snippet></ROW><ROW><id>16726619</id><snippet>eval(raw_input())</snippet></ROW><ROW><id>16726619</id><snippet>hello</snippet></ROW><ROW><id>16726619</id><snippet>hello</snippet></ROW><ROW><id>16726619</id><snippet>"hello"</snippet></ROW><ROW><id>16726646</id><snippet>import shelve
d = shelve.open('score.txt') # here you will save the score variable   
d['score'] = score           # thats all, now it is saved on disk.
d.close()
</snippet></ROW><ROW><id>16726646</id><snippet>import shelve
d = shelve.open('score.txt')
score = d['score']           # the score is read from disk
</snippet></ROW><ROW><id>16726777</id><snippet>self.state</snippet></ROW><ROW><id>16726777</id><snippet>class ToggleButton(Button):
    def __init__(self, text="ToggleButton", state=True):
        super(ToggleButton, self).__init__(text) 
        self.state = state

    def press(self):
        super(ToggleButton, self).press()
        self.state = not self.state
        print('ToggleButton is now', 'ON' if self.state else 'OFF')
</snippet></ROW><ROW><id>16726862</id><snippet>python extract_stars.py /home/fitsfiles/*.fits
</snippet></ROW><ROW><id>16726862</id><snippet>for arg in len(sys.argv):
    filename = arg.split('/')[-1].strip('.fits')
    t = sex(arg, filename +'_star_catalog.fits')
    # Whatever else
</snippet></ROW><ROW><id>16726862</id><snippet>sex</snippet></ROW><ROW><id>16726958</id><snippet>[[]] * 2 
</snippet></ROW><ROW><id>16726958</id><snippet>x = []
t0 = [x, x]
</snippet></ROW><ROW><id>16726958</id><snippet>t1 = [[], []]
</snippet></ROW><ROW><id>16727486</id><snippet>myFormat = compile(r'(?=([0-2]\d|3[0-1])-(0\d|1[0-2])-(201[2-5]))' )
</snippet></ROW><ROW><id>16727486</id><snippet>[3-5]</snippet></ROW><ROW><id>16727486</id><snippet>[2-5]</snippet></ROW><ROW><id>16727486</id><snippet>201[3-5]
</snippet></ROW><ROW><id>16727486</id><snippet>from sys import stdin
from re import compile
from datetime import datetime
myFormat = compile(r'(?=([0-2]\d|3[0-1])-(0\d|1[0-2])-(201[2-5]))' )
str1=("0012-10-2012-10-2012", "0031-02-2012");
for s in str1:
    for date in myFormat.findall(s):
        (d,m,y) = map(int, date)
        try:
           datetime(y,m,d)
           print date
        except: pass
</snippet></ROW><ROW><id>16727521</id><snippet>&gt;&gt;&gt; import os, time
&gt;&gt;&gt; path = os.path.expanduser('~/Desktop')
&gt;&gt;&gt; fname = time.ctime().replace(':', '-') + '.txt'
&gt;&gt;&gt; with open(os.path.join(path, fname), 'w') as f:
...   pass
</snippet></ROW><ROW><id>16727621</id><snippet>p1.useless_func</snippet></ROW><ROW><id>16727621</id><snippet>id</snippet></ROW><ROW><id>16727621</id><snippet>p2.useless_func</snippet></ROW><ROW><id>16727621</id><snippet>id</snippet></ROW><ROW><id>16727621</id><snippet>id</snippet></ROW><ROW><id>16727621</id><snippet>id</snippet></ROW><ROW><id>16727621</id><snippet>Jython 2.5.2 (Debian:hg/91332231a448, Jun 3 2012, 09:02:34) 
[OpenJDK Server VM (Oracle Corporation)] on java1.7.0_21
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; class parent(object):
...     def m(self):
...             pass
... 
&gt;&gt;&gt; p1, p2 = parent(), parent()
&gt;&gt;&gt; id(p1.m) == id(p2.m)
False
</snippet></ROW><ROW><id>16727795</id><snippet>    import numpy as np

    from sklearn import svm
    X = np.array([[0, 0], [1, 1]])
    y = [0, 1]
    clf = svm.SVC(kernel='precomputed')

    # kernel computation
    K = numpy.zeros(shape = (n, n))

    # "At the moment, the kernel values between all training vectors 
    #  and the test vectors must be provided." 
    #  according to scikit learn web page. 
    #  -- This is the problem!
    # v1: array, shape (n, d)
    # w1: float in [0, 1)
    chi = sklearn.metrics.pairwise.chi2_kernel(v1, v1)
    mu = 1.0 / numpy.mean(chi)
    K += w1 * numpy.exp(-mu * chi)

    # v2: array, shape (n, d)
    # w2: float in [0, 1)
    chi = sklearn.metrics.pairwise.chi2_kernel(v2, v2)
    mu = 1.0 / numpy.mean(chi)
    K += w2 * numpy.exp(-mu * chi)

    # v3: array, shape (n, d)
    # w3: float in [0, 1)
    chi = sklearn.metrics.pairwise.chi2_kernel(v3, v3)
    mu = 1.0 / numpy.mean(chi)
    K += w3 * numpy.exp(-mu * chi)

    # v4: array, shape (n, d)
    # w4: float in [0, 1)
    chi = sklearn.metrics.pairwise.chi2_kernel(v4, v4)
    mu = 1.0 / numpy.mean(chi)
    K += w4 * numpy.exp(-mu * chi)

    # scikit-learn is a wrapper LIBSVM and looking at the LIBSVM Readme file
    # it seems you need kernel values for test data something like this:    

    Kt = numpy.zeros(shape = (nt, n))
    # t1: array, shape (nt, d)
    # w1: float in [0, 1)
    chi = sklearn.metrics.pairwise.chi2_kernel(t1, v1)
    mu = 1.0 / numpy.mean(chi)
    Kt += w1 * numpy.exp(-mu * chi)

    # v2: array, shape (n, d)
    # w2: float in [0, 1)
    chi = sklearn.metrics.pairwise.chi2_kernel(t2, v2)
    mu = 1.0 / numpy.mean(chi)
    Kt += w2 * numpy.exp(-mu * chi)

    # v3: array, shape (n, d)
    # w3: float in [0, 1)
    chi = sklearn.metrics.pairwise.chi2_kernel(t3, v3)
    mu = 1.0 / numpy.mean(chi)
    Kt += w3 * numpy.exp(-mu * chi)

    # v4: array, shape (n, d)
    # w4: float in [0, 1)
    chi = sklearn.metrics.pairwise.chi2_kernel(t4, v4)
    mu = 1.0 / numpy.mean(chi)
    Kt += w4 * numpy.exp(-mu * chi)

    clf.fit(K, y) 

    # predict on testing examples
    probas_ = clf.predict_proba(Kt)
</snippet></ROW><ROW><id>16727893</id><snippet>from itertools import combinations
from collections import OrderedDict

def sf(k,v,d):
    return (k in d[v]) and (v in d[k])

def lenN(d, n):
    # create a list of unique items
    l = list(OrderedDict.fromkeys(i for x in d for i in d[x]))
    # collect matching groups
    V = list()
    for C in combinations(l, n):
        for P in combinations(C, 2):
            if not sf(P[0], P[1], d): break
        else: V.append(C)
    return V

d = { 1: [2, 3, 5], 2: [3, 1, 5], 3: [1, 2], 5: [2, 1], }

print lenN(d, 3)
</snippet></ROW><ROW><id>16727893</id><snippet>[(2, 3, 1), (2, 5, 1)]
</snippet></ROW><ROW><id>16727918</id><snippet>ADD FILE replace-nan-with-zeros.py;

SELECT
  TRANSFORM (...)
  USING 'python replace-nan-with-zeros.py 7'
  AS (...)
FROM some_table;
</snippet></ROW><ROW><id>16727918</id><snippet>  ...
  USING 'python replace-nan-with-zeros.py'
  ...
</snippet></ROW><ROW><id>16727918</id><snippet>kFirstColumns= int(sys.argv[1])
</snippet></ROW><ROW><id>16728190</id><snippet>UserProfile.objects.all()</snippet></ROW><ROW><id>16728190</id><snippet>from random import choice
random_user = choice(online_users)
</snippet></ROW><ROW><id>16728190</id><snippet>online_users = UserProfile.objects.filter(seen__lte=now-timeout)
</snippet></ROW><ROW><id>16728615</id><snippet>logTuples = []
for item in colItems:
    logTuples.append( (item.SourceName, item.Type, item.TimeGenerated, item.Message) )
logTuples.sort(key=operator.itemgetter(2)) #credit: Thomas Jung
return logTuples
</snippet></ROW><ROW><id>16728855</id><snippet>mycards= ['0H','8H','7H','6H','AH','QS'] 
all((x == 'QS' or 'H' in x) for x in mycards)
#  True
</snippet></ROW><ROW><id>16729194</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; split_numbers = re.compile(r'-?\d+').findall
&gt;&gt;&gt; sum(int(x) for x in split_numbers('1+23-4+56-7'))
69
</snippet></ROW><ROW><id>16729194</id><snippet>sum</snippet></ROW><ROW><id>16729194</id><snippet>eval('1+23-4+56-7')</snippet></ROW><ROW><id>16729194</id><snippet>1-+2</snippet></ROW><ROW><id>16729194</id><snippet>1--2</snippet></ROW><ROW><id>16729194</id><snippet>1 - 2</snippet></ROW><ROW><id>16729808</id><snippet>iloc</snippet></ROW><ROW><id>16729808</id><snippet>In [3]: sub_df
Out[3]:
          A         B
2 -0.133653 -0.030854

In [4]: sub_df.iloc[0]
Out[4]:
A   -0.133653
B   -0.030854
Name: 2, dtype: float64

In [5]: sub_df.iloc[0]['A']
Out[5]: -0.13365288513107493
</snippet></ROW><ROW><id>16730311</id><snippet>itertools.combinations</snippet></ROW><ROW><id>16730311</id><snippet>Runtime error: dictionary size changed during iteration
</snippet></ROW><ROW><id>16730311</id><snippet>for key in list(dictionary)</snippet></ROW><ROW><id>16730311</id><snippet>for item in shipping_request:

    for i in range(0,len(list), 1):
            ...
            for x in combinations:
                if sum(x) &gt;= shipping_request[item]:
                    if sum(x) &gt; shipping_request[item]:
                        ...
                    temp_request = shipping_request
                    del temp_request[item] # you are trying to delete a key from 
                                           # shipping_request as you iterate it
</snippet></ROW><ROW><id>16730311</id><snippet>temp_request = dict(shipping_request)</snippet></ROW><ROW><id>16730311</id><snippet>import copy; copy.deepcopy</snippet></ROW><ROW><id>16730363</id><snippet>tables</snippet></ROW><ROW><id>16730363</id><snippet>pytables</snippet></ROW><ROW><id>16730363</id><snippet>numexpr</snippet></ROW><ROW><id>16730363</id><snippet>numpy-MKL</snippet></ROW><ROW><id>16730367</id><snippet>a = ('2',)
b = 'z'
new = a + (b,)
</snippet></ROW><ROW><id>16730683</id><snippet>variable</snippet></ROW><ROW><id>16730683</id><snippet>textvariable</snippet></ROW><ROW><id>16730683</id><snippet>askopenfilename()</snippet></ROW><ROW><id>16731436</id><snippet>__init__()</snippet></ROW><ROW><id>16731436</id><snippet>class Mixin(object):
    def __init__(self, *args, **kwargs):
        super(Mixin, self).__init__(*args, **kwargs)
        self.items = []
</snippet></ROW><ROW><id>16731440</id><snippet> s = None

 def start(self, widget):
       global s
       s = subprocess.Popen('myprocess')

 def stop(self, widget):
       s.kill()
</snippet></ROW><ROW><id>16731590</id><snippet>import re
from pprint import pprint

s = "ST_GeomFromText( 'LINESTRING( 11.6614 48.0189, 11.6671 48.011, 11.6712 48.0051, 11.6747 48.0001, 11.6777 47.9956, 11.6795 47.9927)',4326)"

nums = re.findall(r'\d+(?:\.\d*)?', s.rpartition(',')[0])
coords = zip(*[iter(coords)] * 2)
pprint(coords)

[('11.6614', '48.0189'),
 ('11.6671', '48.011'),
 ('11.6712', '48.0051'),
 ('11.6747', '48.0001'),
 ('11.6777', '47.9956'),
 ('11.6795', '47.9927')]
</snippet></ROW><ROW><id>16731590</id><snippet>map(float, nums)</snippet></ROW><ROW><id>16731675</id><snippet>import re
import os
import xmlutils # download it from: https://gist.github.com/huseyinyilmaz/1448723

my_dir = '&lt;absolute path to my dir&gt;'

doc_dict = dict()

for root, dirs, files in os.walk(my_dir):
    for filename in files:
        if filename.endswith('.py'):
            with open(os.path.join(root, filename), 'r') as py_file:
                basename = os.path.basename(filename)
                doc_dict[basename] = [m.group('doc') for m in re.finditer(
                    re.compile(r'("|\'){3}(?P&lt;doc&gt;.*?)\1{3}', re.DOTALL),
                    py_file.read()
                )]

dict2xml(dict(root=doc_dict))
</snippet></ROW><ROW><id>16731899</id><snippet>a = [1, 2, 3]
</snippet></ROW><ROW><id>16731899</id><snippet>b = a
</snippet></ROW><ROW><id>16731899</id><snippet>b[0] = 5
</snippet></ROW><ROW><id>16731899</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; id(a), id(b)
(140454191340720, 140454191340720)
</snippet></ROW><ROW><id>16731899</id><snippet>a = [1, 2, 3]
b = a
b = [2, 3, 4]
</snippet></ROW><ROW><id>16731899</id><snippet>def foo (a=[]):
    a.append(42)
    return a
</snippet></ROW><ROW><id>16731899</id><snippet>foo(); foo(); foo(); foo();
print(foo())
&gt;&gt;&gt; [42, 42, 42, 42]
</snippet></ROW><ROW><id>16732470</id><snippet>In [6]: array1 = np.array([0, 1, 2, 5, 0])

In [7]: array2 = np.array([0, 10, 20, 1, 2, 30, 5])

In [8]: np.in1d(array1, array2)
Out[8]: array([ True,  True,  True,  True,  True], dtype=bool)

In [9]: np.all(np.in1d(array1, array2))
Out[9]: True
</snippet></ROW><ROW><id>16732670</id><snippet>html_txt = """&lt;td&gt;0.32%&lt;/td&gt;, &lt;td&gt;&lt;span class="neg color"&gt;
    &gt;-0.01&lt;/span&gt;&lt;/td&gt;, &lt;td&gt;0.29%&lt;/td&gt;, &lt;td&gt;0.38%&lt;/td&gt;, 
    &lt;td&gt;&lt;span class="neu"&gt;0.00&lt;/span&gt;&lt;/td&gt;
    """
from bs4 import BeautifulSoup
soup = BeautifulSoup(html_txt)
print [tag.text for tag in soup.find_all('td') if tag.text.strip().endswith("%")]
</snippet></ROW><ROW><id>16732670</id><snippet>[u'0.32%', u'0.29%', u'0.38%']
</snippet></ROW><ROW><id>16733071</id><snippet>from optparse import OptionParser

class FileBase(object):
    def __init__(self, fname):
        self.fname = fname
        self.path = None
class LocalFile(FileBase):
    pass
class RemoteFile(FileBase):
    pass

class FileOptionParser(object):
    def __init__(self):
        self.last_file = None
        self.files = []

    def set_path(self, option, opt, value, parser):
        self.last_file.path = value

    def set_file(self, option, opt, value, parser):
        if   option.dest=="local" : cls = LocalFile
        elif option.dest=="remote": cls = RemoteFile
        else:                       assert False
        self.last_file = cls(value)
        self.files.append(self.last_file)
        setattr(parser.values, option.dest, self.last_file)

fop = FileOptionParser()

parser = OptionParser()
parser.add_option('-L', '--local',  type='string', action='callback', callback=fop.set_file)
parser.add_option('-R', '--remote', type='string', action='callback', callback=fop.set_file)
parser.add_option('-p', '--path',   type='string', action='callback', callback=fop.set_path)

(options, args) = parser.parse_args()
print [(f.fname, f.path) for f in fop.files]
</snippet></ROW><ROW><id>16733071</id><snippet>&gt; python test.py -L local.txt -R remote.txt -p remoteDir/
[('local.txt', None), ('remote.txt', 'remoteDir/')]
</snippet></ROW><ROW><id>16733373</id><snippet>simData</snippet></ROW><ROW><id>16733373</id><snippet>pause</snippet></ROW><ROW><id>16733373</id><snippet>paused</snippet></ROW><ROW><id>16733373</id><snippet>def onClick(event):
    global pause
    pause ^= True
fig.canvas.mpl_connect('button_press_event', onClick)
</snippet></ROW><ROW><id>16733373</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import matplotlib.animation as animation

pause = False
def simData():
    t_max = 10.0
    dt = 0.05
    x = 0.0
    t = 0.0
    while t &lt; t_max:
        if not pause:
            x = np.sin(np.pi*t)
            t = t + dt
        yield x, t

def onClick(event):
    global pause
    pause ^= True

def simPoints(simData):
    x, t = simData[0], simData[1]
    time_text.set_text(time_template%(t))
    line.set_data(t, x)
    return line, time_text

fig = plt.figure()
ax = fig.add_subplot(111)
line, = ax.plot([], [], 'bo', ms=10) # I'm still not clear on this stucture...
ax.set_ylim(-1, 1)
ax.set_xlim(0, 10)

time_template = 'Time = %.1f s'    # prints running simulation time
time_text = ax.text(0.05, 0.9, '', transform=ax.transAxes)
fig.canvas.mpl_connect('button_press_event', onClick)
ani = animation.FuncAnimation(fig, simPoints, simData, blit=False, interval=10,
    repeat=True)
plt.show()
</snippet></ROW><ROW><id>16733435</id><snippet>import inspect
def printname(x):
    print inspect.stack()[1][4]

a = 1.3
printname(a)
</snippet></ROW><ROW><id>16733531</id><snippet>_target_from_a.send(something)</snippet></ROW><ROW><id>16733531</id><snippet>a</snippet></ROW><ROW><id>16733531</id><snippet>yield</snippet></ROW><ROW><id>16733531</id><snippet>b</snippet></ROW><ROW><id>16733531</id><snippet>    item = yield
    print 'b', item
    _target_from_b.send(item + 1)   # ARGH!!
</snippet></ROW><ROW><id>16733531</id><snippet>_target_from_b.send(item + 1)</snippet></ROW><ROW><id>16733531</id><snippet>a</snippet></ROW><ROW><id>16733531</id><snippet>a</snippet></ROW><ROW><id>16733531</id><snippet>_target_from_a.send()</snippet></ROW><ROW><id>16733531</id><snippet>generator already executing</snippet></ROW><ROW><id>16733689</id><snippet>from scipy.interpolate import UnivariateSpline

temp = np.asarray([10, 9.6, 9.3, 9.0, 8.7])    # Temperature in celsius
height = np.asarray([129, 145, 167, 190, 213]) # Height in meters
f = UnivariateSpline(height, temp)
</snippet></ROW><ROW><id>16733689</id><snippet>f</snippet></ROW><ROW><id>16733689</id><snippet>regular_heights = np.arange(120, 213, 5)       # Regular heights every 5m
plot(height, temp, 'o', regular_heights, f(regular_heights), 'x')
</snippet></ROW><ROW><id>16733849</id><snippet>import random
import csv

class Weapon: 
    def __init__ (self, name, value, weight, description):
        self.name = name
        self.value = value
        self.weight = weight
        self.description = description      

with open('weapon.csv', 'r') as csvfile:
  weaponscsv = list(csv.reader(csvfile))    

lengthofcsv = len(weaponscsv)
position = random.randrange(0, lengthofcsv)

aweapon = Weapon(*weaponscsv[position])

print aweapon.name
print aweapon.value
print aweapon.weight
print aweapon.description
</snippet></ROW><ROW><id>16733967</id><snippet>format()</snippet></ROW><ROW><id>16733967</id><snippet>&gt;&gt;&gt; format(-0.0)
'-0.0'
&gt;&gt;&gt; format(0.0)
'0.0'


&gt;&gt;&gt; print '''{: g}°{}'{}"'''.format(-0.0, 23, 29)
-0°23'29"
</snippet></ROW><ROW><id>16734085</id><snippet>from PyQt4.QtGui import *
import sys

class window(QMainWindow):
    def __init__(self):
        super(window, self).__init__()
        self.w=QWidget()
        self.setCentralWidget(self.w)

app=QApplication(sys.argv)
w1 = window()
w1.show()
w2 = window()
w2.show()
app.exec()
</snippet></ROW><ROW><id>16734085</id><snippet>self.note</snippet></ROW><ROW><id>16734085</id><snippet>class main():
    def __init__(self):
        self.app = QApplication(sys.argv)
        self.app.setQuitOnLastWindowClosed(False);
        self.notes = []
        ...

    def newNote(self):
        print("Create new note entry has been clicked")
        note=Note()
        note.show()
        self.notes.append(note)
</snippet></ROW><ROW><id>16734085</id><snippet>setQuitOnLastWindowClosed</snippet></ROW><ROW><id>16734085</id><snippet>app.exec</snippet></ROW><ROW><id>16734085</id><snippet>QMainWindow</snippet></ROW><ROW><id>16734085</id><snippet>QWidget</snippet></ROW><ROW><id>16734085</id><snippet>QTextEdit</snippet></ROW><ROW><id>16734085</id><snippet>Note</snippet></ROW><ROW><id>16734085</id><snippet>QTextEdit</snippet></ROW><ROW><id>16734388</id><snippet>&gt;&gt;&gt; scores = [Myscore1, Myscore2, Myscore3]
&gt;&gt;&gt; [(x, (x == min(scores))) for x in scores]
[(6, False), (-3, True), (10, False)]
</snippet></ROW><ROW><id>16734672</id><snippet>itertools</snippet></ROW><ROW><id>16734672</id><snippet>&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt; values = graph['foobar']
&gt;&gt;&gt; result = {x[0]:x[1:] for x in permutations(values)}
&gt;&gt;&gt; print result
{'1': ('3', '2'), '2': ('3', '1'), '3': ('2', '1')}
</snippet></ROW><ROW><id>16734723</id><snippet>hg clone https://code.google.com/p/android-python27/ 
</snippet></ROW><ROW><id>16734723</id><snippet>boolean installNeeded = isInstallNeeded();

if(installNeeded) {
  setContentView(R.layout.install); 
  new InstallAsyncTask().execute();
}
</snippet></ROW><ROW><id>16734749</id><snippet>sample_genes_list = [sample_1_genes, ...]</snippet></ROW><ROW><id>16734749</id><snippet>sample_final_list = [sorted(zip(sg, mean_values) for sg in sample_genes_list]
</snippet></ROW><ROW><id>16734749</id><snippet>list()</snippet></ROW><ROW><id>16734749</id><snippet>sorted</snippet></ROW><ROW><id>16734749</id><snippet>sample_graph_list = [[j for i, j in sample_final]
        for sample_final in sample_final_list]
</snippet></ROW><ROW><id>16734749</id><snippet>colors = 'bgrcmy'
labels = ['278', '470', '543', '5934', '6102', '17163']
for graph, color, label in zip(sample_graph_list, colors, labels):
    plt.hist(graph, bins=21, histtype='stepfilled',
             normed=True, color=color, label=label)
</snippet></ROW><ROW><id>16734762</id><snippet>unittest</snippet></ROW><ROW><id>16734762</id><snippet>unittest</snippet></ROW><ROW><id>16734762</id><snippet>unittest</snippet></ROW><ROW><id>16734762</id><snippet>primes_list</snippet></ROW><ROW><id>16734762</id><snippet>import unittest

class TestPrimes(unittest.TestCase):
    def test_primes_list(self):
        pl = primes_list(11)  # call the function being tested
        wanted = [2,3,5,7,11]  # the result we expect
        self.AssertEqual(pl, wanted)

if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>16734909</id><snippet>&gt;&gt;&gt; Cards = [[["QS","5H","AS"],["2H","8H"],["7C"]],[["9H","5C"],["JH"]],["7D"]]
&gt;&gt;&gt; from compiler.ast import flatten
&gt;&gt;&gt; flatten(Cards) 
['QS', '5H', 'AS', '2H', '8H', '7C', '9H', '5C', 'JH', '7D']
</snippet></ROW><ROW><id>16734909</id><snippet>compiler</snippet></ROW><ROW><id>16734909</id><snippet>flatten</snippet></ROW><ROW><id>16734909</id><snippet>def flatten(seq):
    l = []
    for elt in seq:
        t = type(elt)
        if t is tuple or t is list:
            for elt2 in flatten(elt):
                l.append(elt2)
        else:
            l.append(elt)
    return l
</snippet></ROW><ROW><id>16735163</id><snippet>found = ("0%s@" % element) in item
</snippet></ROW><ROW><id>16735163</id><snippet>-0+(\d+)@</snippet></ROW><ROW><id>16735163</id><snippet>m = re.search(r"-0+(\d+)@", item)
found = m and m.group(1) == element
</snippet></ROW><ROW><id>16735254</id><snippet>In [11]: msk = df1.apply(lambda col: df[1] != col).any(axis=1)
Out[11]:
0     True
1     True
2    False
3     True
dtype: bool

In [12]: msk.index = df1.index  # iloc doesn't support masking

In [13]: df1.loc[msk]
Out[13]:
              1    2    3    4
1983-02-16  512  517  510  514
1983-02-17  513  520  513  517
1983-02-21  505  505  496  496
</snippet></ROW><ROW><id>16735330</id><snippet>sudo pip install html2text
</snippet></ROW><ROW><id>16735521</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

def geometric_brownian_motion(T = 1, N = 100, mu = 0.1, sigma = 0.01, S0 = 20):
    "http://stackoverflow.com/a/13203189/190597 (unutbu)"
    dt = float(T)/N
    t = np.linspace(0, T, N)
    W = np.random.standard_normal(size = N) 
    W = np.cumsum(W)*np.sqrt(dt) ### standard brownian motion ###
    X = (mu-0.5*sigma**2)*t + sigma*W 
    S = S0*np.exp(X) ### geometric brownian motion ###
    return S

dates = pd.date_range('2012-01-01', '2013-02-22')
T = (dates.max()-dates.min()).days / 365
N = dates.size
start_price = 100
y = pd.Series(
    geometric_brownian_motion(T, N, sigma=0.1, S0=start_price), index=dates)
y.plot()
plt.show()
</snippet></ROW><ROW><id>16735620</id><snippet>replacements</snippet></ROW><ROW><id>16735620</id><snippet>import re

replacements = {
    r'dd': '%d',
    r'd': '%d',
    r'MM': '%m',
    r'M': '%m',
    r'yyyy': '%Y',
    r'HH': '%H',
    r'mm': '%M',
    r'MMM': '%b',
    r'yy': '%Y',
}

def fn(match):
    return replacements[match.group()]

def F(text):
    pat = '|'.join(r'\b' + re.escape(k) + r'\b' for k in replacements)
    return re.sub(pat, fn, text)

&gt;&gt;&gt; F("dd/MM/yyyy")
'%d/%m/%Y'
&gt;&gt;&gt; F("HH:mm")
'%H:%M'
&gt;&gt;&gt; F("dd-MMM-yy")
'%d-%b-%Y'
&gt;&gt;&gt; F("M/d/yyyy")
'%m/%d/%Y'
</snippet></ROW><ROW><id>16735666</id><snippet>[4]</snippet></ROW><ROW><id>16735666</id><snippet>12567-12345-1</snippet></ROW><ROW><id>16735666</id><snippet>123456-157-12</snippet></ROW><ROW><id>16735666</id><snippet>input = map(set, [ [1,5,7], [2,6], [3,4,5], [1,2], [4], [1] ])

def eachCombination(input):
  if input:
    for combination, rest in eachCombination(input[1:]):
      yield combination, input[0:1] + rest
      if not (input[0] &amp; combination):  # fits?
        yield input[0] | combination, rest
  else:
    yield set(), []

def eachPacked(input):
  for combination, rest in eachCombination(input):
    for restPart in rest:
      if not (combination &amp; restPart):  # not densely packed?
        break
    else:
      yield combination, rest

def eachSolution(input):
  for packed, rest in eachPacked(input):
    if rest:
      for subsolution in eachSolution(rest):
        yield [ packed ] + subsolution
    else:
      yield [ packed ]

for solution in eachSolution(input):
  print '   '.join('-'.join('%d' % n for n in set) for set in solution)
</snippet></ROW><ROW><id>16735666</id><snippet>1-2-3-4-5   1-2-4-5-6-7   1
1-2-3-4-5   1-2-4-6   1-5-7
1-2-4-5-6-7   1-2-3-4-5   1
1-2-4-5-6-7   1-3-4-5   1-2
1-2-4   1-2-5-6-7   1-3-4-5
1-2-4   1-2-3-4-5-6   1-5-7
1-2-3-4-5-6   1-4-5-7   1-2
1-2-3-4-5-6   1-2-4   1-5-7
1-2-4-6   1-5-7   1-2-3-4-5
1-2-4-6   1-2-3-4-5   1-5-7
</snippet></ROW><ROW><id>16735690</id><snippet>index.html</snippet></ROW><ROW><id>16735690</id><snippet>index</snippet></ROW><ROW><id>16735690</id><snippet>search</snippet></ROW><ROW><id>16735690</id><snippet>from django.shortcuts import render
from django.shortcuts import render_to_response
from django.http import HttpResponse
from django.http import HttpResponseRedirect
from django.template.context import RequestContext

#...
def index(request):
   # this will only render the template with the form
   searchData = searchForm() # an unbound form
   return render_to_response(
        'index.html',
        context_instance=RequestContext(
            request,{'form':searchData,}
        )
    )

def search(request):
   if request.method == 'POST': # If the form has been submitted...
     form = searchForm(request.POST)# A form bound to the POST data
     if form.is_valid():
        searchData = form.cleaned_data['searchField']
        # do whatever you want to process the search with
        # searchada, maybe populate some variable
        return render_to_response(
            'search.html',
            context_instance=RequestContext(
                request,{'form':searchData,} # maybe add here the populated variable with the search
            )
        )
   else:
     # request.GET, just show the unbound form
     searchData = searchForm() # an unbound form

   return render_to_response(
        'search.html',
        context_instance=RequestContext(
            request,{'form':searchData,}
        )
    )
</snippet></ROW><ROW><id>16735690</id><snippet>&lt;!-- is not good to have a label outside form --&gt;
&lt;label for="Search"&gt;Search:&lt;/label&gt;
&lt;form action = "/search/" method = "post"&gt;
    {% csrf_token %} {{ form.as_p }}
    &lt;input type = "submit" value = "Go" /&gt;  
&lt;/form&gt;
</snippet></ROW><ROW><id>16735690</id><snippet>search.html</snippet></ROW><ROW><id>16735776</id><snippet>items</snippet></ROW><ROW><id>16735776</id><snippet>&gt;&gt;&gt; items = ['matt', 'zen', 'a', 'b', 'c', 'cat', 'dog']
&gt;&gt;&gt; {'a', 'b', 'c'}.issubset(items)
True
</snippet></ROW><ROW><id>16735776</id><snippet>for</snippet></ROW><ROW><id>16735776</id><snippet>O(1)</snippet></ROW><ROW><id>16735776</id><snippet>set</snippet></ROW><ROW><id>16735776</id><snippet>find = {'a', 'b', 'c'}
for elem in items:
    if elem in find:
        # do stuff
</snippet></ROW><ROW><id>16735984</id><snippet>replacements = {
    'Apple':['Iphone','Ipod'],
    'Samsung':['Galaxy','Nexus']
}
</snippet></ROW><ROW><id>16735984</id><snippet>from mapping import replacements</snippet></ROW><ROW><id>16735984</id><snippet>for replacement, replacables in replacements.iteritems():
    query = 'update foo set value=? where value in ({})'.format(",".join("?"*len(replacables)))
    c.execute(query, [replacement]+replacables)
</snippet></ROW><ROW><id>16736002</id><snippet>from pprint import pformat
hash(pformat(a)) == hash(pformat(b))
</snippet></ROW><ROW><id>16736111</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-
import re
def reg(item):
  item = re.sub(ur'([A-ZА-ЯЁЄЇІ])\1', r'\1', item, re.U)
  #this work only with latin too
  #item = re.sub(r'(.)\1', r'\1', item, re.U)
  return item

print reg(u'ББООЛЛЬЬШШООЙЙ')
print reg(u'BBIIGG')
</snippet></ROW><ROW><id>16736160</id><snippet>&lt;li&gt;</snippet></ROW><ROW><id>16736160</id><snippet>from lxml.html.clean import Cleaner
import lxml.html as LH
text = '&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;FooBar&lt;/li&gt;&lt;/ul&gt;'
cleaner = Cleaner()
root = LH.fromstring(cleaner.clean_html(text, ))
print(LH.tostring(root, method='xml'))
</snippet></ROW><ROW><id>16736160</id><snippet>&lt;ul&gt;&lt;li/&gt;&lt;li&gt;FooBar&lt;/li&gt;&lt;/ul&gt;
</snippet></ROW><ROW><id>16736227</id><snippet>def stop(self):
    self.running = False
    socket.socket(socket.AF_INET, 
                  socket.SOCK_STREAM).connect( (self.hostname, self.port))
    self.socket.close()
</snippet></ROW><ROW><id>16736304</id><snippet>open</snippet></ROW><ROW><id>16736304</id><snippet>os.rename</snippet></ROW><ROW><id>16736304</id><snippet>os.rename</snippet></ROW><ROW><id>16736304</id><snippet>None</snippet></ROW><ROW><id>16736304</id><snippet>open</snippet></ROW><ROW><id>16736304</id><snippet>import os,sys
folder = 'E:/.../1936342-G/test'
for filename in os.listdir(folder):
       infilename = os.path.join(folder,filename)
       if not os.path.isfile(infilename): continue
       oldbase = os.path.splitext(filename)
       newname = infilename.replace('.grf', '.las')
       output = os.rename(infilename, newname)
</snippet></ROW><ROW><id>16736304</id><snippet>open</snippet></ROW><ROW><id>16736606</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; print datetime.now().time().strftime('%H:%M')
20:51
</snippet></ROW><ROW><id>16736606</id><snippet>&gt;&gt;&gt; print datetime.now().time().strftime('%I:%M %p')
08:53 PM
</snippet></ROW><ROW><id>16736622</id><snippet>self.id = self.canvas1.create_oval(..., fill="green")
...
self.canvas1.itemconfigure(self.id, fill="black")
</snippet></ROW><ROW><id>16736882</id><snippet>#!/usr/bin/env ruby

$done = false
Signal.trap("USR1") do
    $done = true
end

until $done do
    sleep 1
end

puts "** graceful exit"
</snippet></ROW><ROW><id>16736936</id><snippet>mysql&gt; SHOW VARIABLES LIKE 'character_set_%';
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8                       |
| character_set_connection | utf8                       |
| character_set_database   | latin1                     |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | latin1                     |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
8 rows in set (0.00 sec)
</snippet></ROW><ROW><id>16736936</id><snippet>my.cnf</snippet></ROW><ROW><id>16736936</id><snippet>configure</snippet></ROW><ROW><id>16736936</id><snippet>--with-charset</snippet></ROW><ROW><id>16736936</id><snippet>latin1</snippet></ROW><ROW><id>16736936</id><snippet>CREATE DATABASE my_database CHARACTER SET 'utf8';
</snippet></ROW><ROW><id>16736936</id><snippet>CREATE TABLE my_table
(
    ...
    my_field VARCHAR(255) CHARACTER SET 'utf8',
    ...
);
</snippet></ROW><ROW><id>16736936</id><snippet>SET NAMES 'utf8';
</snippet></ROW><ROW><id>16736936</id><snippet>MySQLdb</snippet></ROW><ROW><id>16736936</id><snippet>connect()</snippet></ROW><ROW><id>16736936</id><snippet>conn = MySQLdb.connect(host='my_host',
                       ...
                       charset='utf8')
</snippet></ROW><ROW><id>16736936</id><snippet>MySQLdb</snippet></ROW><ROW><id>16737035</id><snippet>tids</snippet></ROW><ROW><id>16737035</id><snippet>set_tids = set(tids)
</snippet></ROW><ROW><id>16737035</id><snippet>for</snippet></ROW><ROW><id>16737035</id><snippet>if e.tid in set_tids
</snippet></ROW><ROW><id>16737116</id><snippet>find()</snippet></ROW><ROW><id>16737116</id><snippet>db.so.find({'papers.paragraphs': {$elemMatch: {'sentences': {$elemMatch: {'words': {$elemMatch: {'ID': {$regex: 'W'}}}}}}}}, {'papers.paragraphs.sentences.words.text': 1}).pretty();
</snippet></ROW><ROW><id>16737116</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pymongo

mongo_db = pymongo.MongoClient().test

cursor = mongo_db.so.find({'papers.paragraphs':
                               {'$elemMatch':
                                    {'sentences':
                                         {'$elemMatch':
                                              {'words':
                                                   {'$elemMatch':
                                                        {'ID': {'$regex': 'W'}}}}}}}},
                          {'papers.paragraphs.sentences.words.text': 1})

results = []
for result in cursor:
    for paragraph in result['papers']['paragraphs']:
        for sentence in paragraph['sentences']:
            for word in sentence['words']:
                results.append(word['text'])

print results  # prints [u'RT', u'sydest', ... ]
</snippet></ROW><ROW><id>16737148</id><snippet>random.choice([-1, 1])</snippet></ROW><ROW><id>16737148</id><snippet>&gt;&gt;&gt; from random import choice
&gt;&gt;&gt; choice([-1, 1])
1
&gt;&gt;&gt; choice([-1, 1])
-1
&gt;&gt;&gt; choice([-1, 1])
1
&gt;&gt;&gt; choice([-1, 1])
-1
&gt;&gt;&gt; choice([-1, 1])
-1
&gt;&gt;&gt; choice([-1, 1])
1
</snippet></ROW><ROW><id>16737407</id><snippet>django.contrib.admin</snippet></ROW><ROW><id>16737407</id><snippet>python manage.py schemamigration django.contrib.auth --XXX</snippet></ROW><ROW><id>16737407</id><snippet>python manage.py migrate</snippet></ROW><ROW><id>16737407</id><snippet>south_migrations</snippet></ROW><ROW><id>16737407</id><snippet>python manage.py schemamigration --initial X</snippet></ROW><ROW><id>16737407</id><snippet>migrate --fake</snippet></ROW><ROW><id>16737620</id><snippet>bs4</snippet></ROW><ROW><id>16737620</id><snippet>libraries</snippet></ROW><ROW><id>16738260</id><snippet>input()</snippet></ROW><ROW><id>16738260</id><snippet>help()</snippet></ROW><ROW><id>16738260</id><snippet>help()</snippet></ROW><ROW><id>16738260</id><snippet>from IPython.frontend.qt.console.rich_ipython_widget import RichIPythonWidget
from IPython.frontend.qt.inprocess import QtInProcessKernelManager
from IPython.lib import guisupport
from PyQt4.QtGui import QApplication

app = QApplication(sys.argv)

kernel_manager = QtInProcessKernelManager()
kernel_manager.start_kernel()
kernel = kernel_manager.kernel
kernel.gui = 'qt4'

kernel_client = kernel_manager.client()
kernel_client.start_channels()

def stop():
    kernel_client.stop_channels()
    kernel_manager.shutdown_kernel()
    # here you should exit your application with a suitable call
    sys.exit()

widget = RichIPythonWidget()
widget.kernel_manager = kernel_manager
widget.kernel_client = kernel_client
widget.exit_requested.connect(stop)
widget.setWindowTitle("IPython shell")

ipython_widget = widget
ipython_widget.show()

app.exec_()
sys.exit()
</snippet></ROW><ROW><id>16738448</id><snippet>cp difflib.py cdifflib.py
</snippet></ROW><ROW><id>16738448</id><snippet>patch -p1 &lt; patch_file
</snippet></ROW><ROW><id>16738673</id><snippet>head</snippet></ROW><ROW><id>16738673</id><snippet>head = head or self.head</snippet></ROW><ROW><id>16738673</id><snippet>kwargs</snippet></ROW><ROW><id>16738673</id><snippet>def display(self,**kwargs):
    head = kwargs.get("head", self.head)

    if not head:
        return

    print head,

    self.display(head=head.link) # you should always name an optional argument,
                                 # and you must name it if **kwargs is used.
</snippet></ROW><ROW><id>16738793</id><snippet>&gt;&gt;&gt; def loop(init, cond, incr):
    i = init
    while cond(i):
        yield i
        i=incr(i)


&gt;&gt;&gt; list(loop(1, lambda e:e &lt; 20, lambda e:3*e + 1))
[1, 4, 13]
</snippet></ROW><ROW><id>16738793</id><snippet>for i in loop(1, lambda e:e &lt; 20, lambda e:3*e + 1):
    print i
</snippet></ROW><ROW><id>16739180</id><snippet>total</snippet></ROW><ROW><id>16739180</id><snippet>for i in list2: total=total+card_value.get(i,0)

for l in list1:
   for i in l:
    total=total+card_value.get(i,0)
</snippet></ROW><ROW><id>16739180</id><snippet>for l in list1:
   for i in l:
    total=total+card_value.get(i,0)
    if i[0] == 'H':   # first character of card string is a H- so it's a heart
      heart_counter = heart_counter + 1
if heart_counter == len(list1):
   total = total - 26
</snippet></ROW><ROW><id>16739242</id><snippet>getroottree</snippet></ROW><ROW><id>16739242</id><snippet>getroottree</snippet></ROW><ROW><id>16739242</id><snippet>iterfind</snippet></ROW><ROW><id>16739242</id><snippet>findtext</snippet></ROW><ROW><id>16739242</id><snippet>parent_div_xpath = "//div[@class='parent']"
title_filter = "//span[@class='title']/a"
copy_filter = "//div[@class='copy']/p"
arr = [(i.findtext(title_filter), i.findtext(copy_filter)) for i in tree.iterfind(parent_div_xpath)]
</snippet></ROW><ROW><id>16739242</id><snippet>title_filter = "//div[@class='parent']/span[@class='title']/a/text()"
copy_filter = "//div[@class='parent']/div[@class='copy']/p/text()"
arr = izip(tree.findall(title_filter), tree.findall(copy_filter))
</snippet></ROW><ROW><id>16739242</id><snippet>text()</snippet></ROW><ROW><id>16739242</id><snippet>findall</snippet></ROW><ROW><id>16739242</id><snippet>arr = izip(title.text for title in tree.findall(title_filter), copy.text for copy in tree.findall(copy_filter))
</snippet></ROW><ROW><id>16739358</id><snippet>openssh</snippet></ROW><ROW><id>16739358</id><snippet>sshd_config(5)</snippet></ROW><ROW><id>16739358</id><snippet>MaxStartups</snippet></ROW><ROW><id>16739358</id><snippet>LoginGraceTime</snippet></ROW><ROW><id>16739378</id><snippet>pandas</snippet></ROW><ROW><id>16739378</id><snippet>&gt;&gt;&gt; updated = orig.append(new).groupby('Name').last().fillna(0)
&gt;&gt;&gt; updated
      Day1  Day2  Day3  Day4
Name                        
Abe      1     2     4     0
Ben      2     2     1     0
Cat      2     3     2     0
Dan      0     0     6     3
</snippet></ROW><ROW><id>16739378</id><snippet>&gt;&gt;&gt; orig = pd.read_csv("days1.txt", delim_whitespace=True)
&gt;&gt;&gt; new = pd.read_csv("days2up.txt", delim_whitespace=True)
&gt;&gt;&gt; orig
  Name  Day1  Day2  Day3
0  Abe     1     2     3
1  Ben     2     2     1
2  Cat     2     3     2
&gt;&gt;&gt; new
  Name  Day3  Day4
0  Abe     4     0
1  Dan     6     3
</snippet></ROW><ROW><id>16739378</id><snippet>&gt;&gt;&gt; orig.append(new)
   Day1  Day2  Day3  Day4 Name
0     1     2     3   NaN  Abe
1     2     2     1   NaN  Ben
2     2     3     2   NaN  Cat
0   NaN   NaN     4     0  Abe
1   NaN   NaN     6     3  Dan
</snippet></ROW><ROW><id>16739378</id><snippet>&gt;&gt;&gt; orig.append(new).groupby("Name").last()
      Day1  Day2  Day3  Day4
Name                        
Abe      1     2     4     0
Ben      2     2     1   NaN
Cat      2     3     2   NaN
Dan    NaN   NaN     6     3
</snippet></ROW><ROW><id>16739378</id><snippet>&gt;&gt;&gt; orig.append(new).groupby("Name").last().fillna(0)
      Day1  Day2  Day3  Day4
Name                        
Abe      1     2     4     0
Ben      2     2     1     0
Cat      2     3     2     0
Dan      0     0     6     3
</snippet></ROW><ROW><id>16739378</id><snippet>&gt;&gt;&gt; updated = orig.append(new).groupby("Name").last().fillna(0)
&gt;&gt;&gt; updated.to_csv("updated.csv")
&gt;&gt;&gt; !cat updated.csv
Name,Day1,Day2,Day3,Day4
Abe,1.0,2.0,4,0.0
Ben,2.0,2.0,1,0.0
Cat,2.0,3.0,2,0.0
Dan,0.0,0.0,6,3.0
</snippet></ROW><ROW><id>16739418</id><snippet>final = lambda x, f=f, final=final: f(final(x))
</snippet></ROW><ROW><id>16739418</id><snippet>def wrap(accum, f):
    return lambda x: f(accum(x))
...
final = wrap(final, f)
</snippet></ROW><ROW><id>16739418</id><snippet>&gt;&gt;&gt; l = [lambda: n for n in xrange(10)]
&gt;&gt;&gt; [f() for f in l]
[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
</snippet></ROW><ROW><id>16739418</id><snippet>[0, 1, 2, ...]</snippet></ROW><ROW><id>16739418</id><snippet>n</snippet></ROW><ROW><id>16739418</id><snippet>final</snippet></ROW><ROW><id>16739418</id><snippet>f</snippet></ROW><ROW><id>16739418</id><snippet>final</snippet></ROW><ROW><id>16739464</id><snippet>if self.request.POST['pdf_file'].file: 
    # do something"
</snippet></ROW><ROW><id>16739477</id><snippet>re.sub</snippet></ROW><ROW><id>16739477</id><snippet>import re, random

def rand_replace(m):
    return random.choice(m.group(1).split('|'))

data = '''Random digits: (1|2|3), (4|5|6), (7|8|9).'''    
print re.sub(r'\((.+?)\)', rand_replace, data)
</snippet></ROW><ROW><id>16739477</id><snippet>r'\(([\d|]+)\)'
</snippet></ROW><ROW><id>16739649</id><snippet>if bar is not None</snippet></ROW><ROW><id>16739649</id><snippet>if not bar:</snippet></ROW><ROW><id>16739649</id><snippet>bar</snippet></ROW><ROW><id>16739649</id><snippet>False</snippet></ROW><ROW><id>16739649</id><snippet>not bar</snippet></ROW><ROW><id>16739649</id><snippet>bar is not None</snippet></ROW><ROW><id>16740004</id><snippet>driver = webdriver.WhatEverBrowser()
driver.implicitly_wait(60) # This line will cause it to search for 60 seconds
</snippet></ROW><ROW><id>16740344</id><snippet>import base64

# Assuming UTF-8 encoding, change to something else if you need to
base64.b64encode("password".encode("utf-8"))
</snippet></ROW><ROW><id>16740344</id><snippet>#!/usr/bin/env python3

from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Protocol.KDF import PBKDF2

def make_key(password, salt = None):
    if salt is None:
        # Generate a key from the password
        salt = Random.new().read(8)

    # You probably want to adjust the number of iterations
    # based on your target platform and willingness to wait.
    # Somewhere around 10,000 will give you reasonable security.
    # If you don't mind the wait, 100,000 is better.
    # If you have a really fast computer, or are willing to wait a long
    # time, feel free to set it even higher.
    key = PBKDF2(password, salt, AES.block_size, 100000)
    return (key, salt)

def encrypt(message, key):
    # The IV should always be random
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CFB, iv)
    ciphertext = cipher.encrypt(message.encode("utf-8"))
    return (ciphertext, iv)

def decrypt(ciphertext, key, iv):
    cipher = AES.new(key, AES.MODE_CFB, iv)
    msg = cipher.decrypt(ciphertext).decode("utf-8")
    return msg

def main():
    # Encryption
    password = "correct horse battery staple"
    message = "Super secret information that shouldn't be seen by attackers"
    key, salt = make_key(password)
    ciphertext, iv = encrypt(message, key)
    print(b"The ciphertext is: " + ciphertext)

    # Decryption

    # In normal cases, you now need to store the salt and iv somewhere
    # Usually you prepend them to the ciphertext
    # I don't feel like doing that, so we'll just assume that I got the salt
    # and IV somehow.
    key, _ = make_key(password, salt)
    cleartext = decrypt(ciphertext, key, iv)
    print("The cleartext is: " + cleartext)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>16740364</id><snippet>b/__init__.py</snippet></ROW><ROW><id>16740364</id><snippet>b/__init__.pyc</snippet></ROW><ROW><id>16740364</id><snippet>a.py</snippet></ROW><ROW><id>16740364</id><snippet>import b</snippet></ROW><ROW><id>16740364</id><snippet>b/__init__.pyc</snippet></ROW><ROW><id>16740364</id><snippet>rm b/__init__.py</snippet></ROW><ROW><id>16740364</id><snippet>.pyc</snippet></ROW><ROW><id>16740364</id><snippet>rm -r b</snippet></ROW><ROW><id>16740500</id><snippet>Sub Proc(sParam1 As String, iParam2 As Integer)
        MsgBox sParam1 &amp; " is " &amp; iParam2 &amp; " Years Old"
End Sub
</snippet></ROW><ROW><id>16740500</id><snippet>import win32com.client
xl=win32com.client.Dispatch("Excel.Application")
xl.Visible = True
Path = "C:\\Program Files\\Microsoft Office\\Office14\\XLSTART\\perso.xlsm"
xl.Workbooks.Open(Filename=Path)
param1 = "Jeremy"
param2 = 3
xl.Application.Run("Proc", param1, param2)
</snippet></ROW><ROW><id>16740508</id><snippet>mainloop</snippet></ROW><ROW><id>16740508</id><snippet>Tk</snippet></ROW><ROW><id>16740508</id><snippet>mainloop</snippet></ROW><ROW><id>16740509</id><snippet>socket._socketobject</snippet></ROW><ROW><id>16740509</id><snippet>socket._socket</snippet></ROW><ROW><id>16740509</id><snippet>newSockObj = socket.socket(_sock=sock)
</snippet></ROW><ROW><id>16740536</id><snippet>newCon = socket.socket(_sock=newCon)</snippet></ROW><ROW><id>16740631</id><snippet>self.counter = value
</snippet></ROW><ROW><id>16740631</id><snippet>self.counter</snippet></ROW><ROW><id>16740631</id><snippet>IntVar</snippet></ROW><ROW><id>16740631</id><snippet>self.counter</snippet></ROW><ROW><id>16740631</id><snippet>self.counter.set(value)
</snippet></ROW><ROW><id>16740641</id><snippet>#!/usr/bin/env python2
</snippet></ROW><ROW><id>16740641</id><snippet>#!/usr/bin/env python3
</snippet></ROW><ROW><id>16740779</id><snippet>collections</snippet></ROW><ROW><id>16740779</id><snippet>fig.colorbar(a.collections[0], cax=cbar_ax)
</snippet></ROW><ROW><id>16740779</id><snippet>def describe(obj):
    for key in dir(obj):
        try:
            val = getattr(obj, key)
        except AttributeError:
            continue
        if callable(val):
            help(val)
        else:
            print('{k} =&gt; {v!r}'.format(k=key, v=val))
        print('-' * 80)
describe(a)
</snippet></ROW><ROW><id>16740779</id><snippet>"quadmesh"</snippet></ROW><ROW><id>16740900</id><snippet>.html</snippet></ROW><ROW><id>16740900</id><snippet>web.py</snippet></ROW><ROW><id>16740900</id><snippet>foo.html</snippet></ROW><ROW><id>16740900</id><snippet>GET</snippet></ROW><ROW><id>16740900</id><snippet>/index.html</snippet></ROW><ROW><id>16740900</id><snippet>GET</snippet></ROW><ROW><id>16740900</id><snippet>/</snippet></ROW><ROW><id>16740900</id><snippet>templates/index.html</snippet></ROW><ROW><id>16740900</id><snippet>app.py</snippet></ROW><ROW><id>16740900</id><snippet>urls = (
  '/', 'index'
)
</snippet></ROW><ROW><id>16740900</id><snippet>/</snippet></ROW><ROW><id>16740900</id><snippet>index</snippet></ROW><ROW><id>16740900</id><snippet>render = web.template.render('templates/')

class index:
    def GET(self):
        greeting = "Hello World"
        return render.index(greeting=greeting)
</snippet></ROW><ROW><id>16740900</id><snippet>index</snippet></ROW><ROW><id>16740900</id><snippet>index.html</snippet></ROW><ROW><id>16740900</id><snippet>render.index</snippet></ROW><ROW><id>16740900</id><snippet>render.foo()</snippet></ROW><ROW><id>16740900</id><snippet>urls = (
  '/', 'index',
  '/foo', 'foo'
)

# ...

class foo:
    def GET(self):
        greeting = "Foo"
        return render.foo(greeting=greeting)
</snippet></ROW><ROW><id>16740922</id><snippet>safe = utf16.replace(b'\x00)', b'\x00\\)').replace(b'\x00(', b'\x00\\(')
return (b'%s%s' % (codecs.BOM_UTF16_BE, safe))
</snippet></ROW><ROW><id>16740960</id><snippet>class CombinedFormSet(BaseInlineFormSet):
    # Validate formset data here
    def clean(self):
        super(CombinedFormSet, self).clean()
        for form in self.forms:
            if not hasattr(form, 'cleaned_data'):
                continue

            data = self.cleaned_data
            valid = False
            for i in data:
                if i != {}:
                    if i['is_correct']:
                        valid = True

            if not valid:
                #TODO: translate admin?
                raise forms.ValidationError("A Question must have an answer.")

            # Always return the cleaned data, whether you have changed it or
            # not.
            return data


class ChoiceInline(admin.TabularInline):
    model = Choice
    extra = 4
    formset = CombinedFormSet
</snippet></ROW><ROW><id>16741162</id><snippet>int unsigned</snippet></ROW><ROW><id>16741162</id><snippet>integer</snippet></ROW><ROW><id>16741162</id><snippet>int unsigned</snippet></ROW><ROW><id>16741229</id><snippet>pyvirtualdisplay</snippet></ROW><ROW><id>16741392</id><snippet>#!/usr/bin/env python3
if input("What do you do? ").strip().lower() == 'look':
    print("You see a room of equal length and "
          "width, You see foreign symbols on the wall.")
else:
    print("nothing")
</snippet></ROW><ROW><id>16741571</id><snippet>parent_id</snippet></ROW><ROW><id>16741571</id><snippet>field_name = models.AutoField(primary_key=True)
</snippet></ROW><ROW><id>16741571</id><snippet>contracts.id</snippet></ROW><ROW><id>16741693</id><snippet>opts, args = getopt.getopt(argv,"hi:o:b",["ifile=","ofile=","bsize="])
</snippet></ROW><ROW><id>16741693</id><snippet>opts, args = getopt.getopt(argv,"hi:o:b:",["ifile=","ofile=","bsize="])
</snippet></ROW><ROW><id>16741812</id><snippet>url = 'http://data.mtgox.com/api/1/BTCUSD/ticker'
data = json.load(urllib2.urlopen(url))['return']
</snippet></ROW><ROW><id>16741830</id><snippet>apply</snippet></ROW><ROW><id>16741830</id><snippet>import locale
locale.setlocale( locale.LC_ALL, 'en_US.UTF-8')
df = pd.DataFrame([['1,002.01'], ['300,000,000.1'], ['10']], columns=['numbers'])

In [4]: df['numbers']
Out[4]:
0         1,002.01
1    300,000,000.1
2               10
Name: numbers, dtype: object

In [5]: df['numbers'].apply(locale.atof)
Out[5]:
0    1.002010e+03
1    3.000000e+08
2    1.000000e+01
Name: numbers, dtype: float64

In[6]: df['numbers'] = df['numbers'].apply(locale.atof)
</snippet></ROW><ROW><id>16741845</id><snippet>row</snippet></ROW><ROW><id>16741845</id><snippet>list</snippet></ROW><ROW><id>16741845</id><snippet>row[0] = y # or row = [y] + row[1:], or ...
</snippet></ROW><ROW><id>16741845</id><snippet>csv.writer</snippet></ROW><ROW><id>16741845</id><snippet>os.rename('FakeAPData.csv', 'FakeAPData.csv.bak')

csv_in = open('FakeAPData.csv.bak', 'rb')
csv_out = open('FakeAPData.csv', 'wb')

writer = csv.writer(csv_out)

for row in csv.reader(csv_in):
    date = datetime.datetime.strptime(row[0], '%Y-%m-%d %H:%M:%S')
    datet = unicode(datetime.datetime.strptime(row[0], '%Y-%m-%d %H:%M:%S'))
    datett = tuple(int(v) for v in re.findall("[0-9]+", datet))
    y = calendar.timegm(datett)
    row[0] = y
    writer.writerow(row)
</snippet></ROW><ROW><id>16741845</id><snippet>close</snippet></ROW><ROW><id>16741845</id><snippet>def transform_date(date):
    return calendar.gmtime(datetime.strptime(date, '%Y-%m-%d %H:%M:%S').timetuple())

def transform_row(row):
    return [transform_date(row[0])] + row[1:]

name = 'FakeAPData.csv'
bakname = name + '.bak'
os.rename(name, bakname)
with open(bakname, 'rb') as in csv_in, open(name, 'wb') as csv_out:
    writer = csv.writer(csv_out)
    writer.writerows(transform_row(row) for row in csv.reader(csv_in))
</snippet></ROW><ROW><id>16742003</id><snippet>pandas.concat</snippet></ROW><ROW><id>16742003</id><snippet>pandas.merge</snippet></ROW><ROW><id>16742003</id><snippet>concat</snippet></ROW><ROW><id>16742003</id><snippet>import pandas as pd

sensor1 = pd.DataFrame({"p1":[5,2,3], "ObservationID":[22, 31, 14]})
sensor2 = pd.DataFrame({"p2":[1,1,0], "ObservationID":[22, 31, 14]})

# first, set index column to be unique
sensor1_indexed = sensor1.set_index(["ObservationID"])
sensor2_indexed = sensor2.set_index(["ObservationID"])

sensors = pd.concat([sensor1_indexed, sensor2_indexed], axis=1)
</snippet></ROW><ROW><id>16742003</id><snippet>ignore_index=True</snippet></ROW><ROW><id>16742003</id><snippet>sensors = pd.concat([sensor1, sensor2], axis=1, ignore_index=True)
</snippet></ROW><ROW><id>16742003</id><snippet>pd.merge</snippet></ROW><ROW><id>16742003</id><snippet>sensors = pd.merge(sensor1, sensor2, how="inner", on=["ObservationID"]) 
</snippet></ROW><ROW><id>16742003</id><snippet>pd.concat</snippet></ROW><ROW><id>16742033</id><snippet>sometable.column1</snippet></ROW><ROW><id>16742033</id><snippet>id</snippet></ROW><ROW><id>16742033</id><snippet>sometable.column1</snippet></ROW><ROW><id>16742033</id><snippet>, index=True</snippet></ROW><ROW><id>16742033</id><snippet>sometable = Table('sometable',  metadata,
    Column('id', Integer, Sequence('sometable_id_seq'), primary_key=True),
    Column('column1', Integer, index=True),
    Column('column2', Integer),
)
</snippet></ROW><ROW><id>16742052</id><snippet>format()</snippet></ROW><ROW><id>16742052</id><snippet>format(addrint, '#04x')
</snippet></ROW><ROW><id>16742052</id><snippet>#</snippet></ROW><ROW><id>16742052</id><snippet>0x</snippet></ROW><ROW><id>16742052</id><snippet>x</snippet></ROW><ROW><id>16742052</id><snippet>X</snippet></ROW><ROW><id>16742052</id><snippet>&gt;&gt;&gt; for i in range(8, 12):
...     print format(i, '#04x')
... 
0x08
0x09
0x0a
0x0b
</snippet></ROW><ROW><id>16742092</id><snippet>threading.Timer(5, myotherfunc, [a,b,c,d]).start()
</snippet></ROW><ROW><id>16742551</id><snippet>#!/usr/bin/env python3

def copyimmut(fromdict, todict):
    for key in fromdict:
        if type(fromdict[key]) is dict and key in todict:
            copyimmut(fromdict[key], todict[key])
        else:
            todict[key] = fromdict[key]

main_dict = {
    'a': {'a1': 1, 'a2': 2},
    'b': {'bb': {'bb1' : 1,'bb2' : 2, }}}

my_b = main_dict['b']
assert(my_b is main_dict['b'])
print(my_b)

new_dict = {
    'a': {'a1': 11, 'a2': 22},
    'b': {'bb': {'bb1' : 11, 'bb2' : 22, }},
    'c': {'cc': {'cc1' : 11, 'cc2' : 22, }}}

copyimmut(new_dict, main_dict)
assert(my_b is main_dict['b'])
print(my_b)
print(main_dict['c'])
</snippet></ROW><ROW><id>16742551</id><snippet>{'bb': {'bb1': 1, 'bb2': 2}}
{'bb': {'bb1': 11, 'bb2': 22}}
{'cc': {'cc2': 22, 'cc1': 11}}
</snippet></ROW><ROW><id>16743202</id><snippet>GetMap.OSM</snippet></ROW><ROW><id>16743202</id><snippet>PlotOnStaticMap</snippet></ROW><ROW><id>16743202</id><snippet>FUN=lines</snippet></ROW><ROW><id>16743202</id><snippet>get_openstreetmap</snippet></ROW><ROW><id>16743202</id><snippet>ggmap</snippet></ROW><ROW><id>16743205</id><snippet>global</snippet></ROW><ROW><id>16743205</id><snippet>def exit():
    global stopIt
    stopIt = True
</snippet></ROW><ROW><id>16743228</id><snippet>session().query(model_a).prefix_with("STRAIGHT_JOIN").join(
    (model_b, something == somethingelse)
).join(
    (model_c, something == somethingelse)
) # etc ...
</snippet></ROW><ROW><id>16743363</id><snippet>import web
from facepy import GraphAPI
from urlparse import parse_qs

url = ('/', 'index')

app_id = "YOUR_APP_ID"
app_secret = "APP_SECRET"
post_login_url = "http://0.0.0.0:8080/"

user_data = web.input(code=None)

if not user_data.code:
    dialog_url = ( "http://www.facebook.com/dialog/oauth?" +
                               "client_id=" + app_id +
                               "&amp;redirect_uri=" + post_login_url +
                               "&amp;scope=publish_stream" )

    return "&lt;script&gt;top.location.href='" + dialog_url + "'&lt;/script&gt;"
else:
    graph = GraphAPI()
    response = graph.get(
        path='oauth/access_token',
        client_id=app_id,
        client_secret=app_secret,
        redirect_uri=post_login_url,
        code=code
    )
    data = parse_qs(response)
    graph = GraphAPI(data['access_token'][0])
    graph.post(path = 'me/feed', message = 'Your message here')
</snippet></ROW><ROW><id>16743383</id><snippet>ip_at_end = re.compile(r'(?:[0-9]{1,3}\.){3}[0-9]{1,3}$', re.MULTILINE)
</snippet></ROW><ROW><id>16743383</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; ip_at_end = re.compile(r'(?:[0-9]{1,3}\.){3}[0-9]{1,3}$', re.MULTILINE)
&gt;&gt;&gt; example = '''\
... Only addresses on the end of a line match: 123.241.0.15
... Anything else doesn't: 124.76.67.3, even other addresses.
... Anything that is less than a dotted quad also fails, so 1.1.4
... does not match but 1.2.3.4
... will.
... '''
&gt;&gt;&gt; ip_at_end.findall(example)
['123.241.0.15', '1.2.3.4']
</snippet></ROW><ROW><id>16743442</id><snippet>dur=isodate.parse_duration('P1W2DT6H21M32S')
print dur.total_seconds()
</snippet></ROW><ROW><id>16743501</id><snippet>os.chdir('...')
</snippet></ROW><ROW><id>16743661</id><snippet>START n = node:mynodes(key='someuuidperhaps'), m = node:mynodes(key='otheruuidperhaps')
MATCH n -[r:KNOWS]-m
WHERE r.flag = True
return r
</snippet></ROW><ROW><id>16743661</id><snippet>-&gt;</snippet></ROW><ROW><id>16743661</id><snippet>&lt;-</snippet></ROW><ROW><id>16743796</id><snippet>sorted</snippet></ROW><ROW><id>16743796</id><snippet>key</snippet></ROW><ROW><id>16743796</id><snippet>sorted(people, key=lambda dct: dct['name'])
</snippet></ROW><ROW><id>16743796</id><snippet>&gt;&gt;&gt; people = [
    {'name' : 'Bob', 'number' : '123'},
    {'name' : 'Bill', 'number' : '234'},
    {'name' : 'Dave', 'number' : '567'},
]       
&gt;&gt;&gt; sorted(people, key=lambda dct: dct['name'])
[{'name': 'Bill', 'number': '234'}, 
 {'name': 'Bob', 'number': '123'}, 
 {'name': 'Dave', 'number': '567'}]
</snippet></ROW><ROW><id>16743796</id><snippet>import operator
sorted(people, key=operator.itemgetter('name'))
</snippet></ROW><ROW><id>16743796</id><snippet>operator.itemgetter('name')</snippet></ROW><ROW><id>16743796</id><snippet>lambda dct: dct['name']</snippet></ROW><ROW><id>16743870</id><snippet>In [1]: import numpy as np

In [2]: a = np.arange(20).reshape((10,-1))

In [3]: a
Out[3]: 
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11],
       [12, 13],
       [14, 15],
       [16, 17],
       [18, 19]])
</snippet></ROW><ROW><id>16743870</id><snippet>reshape</snippet></ROW><ROW><id>16743870</id><snippet>argsort</snippet></ROW><ROW><id>16743870</id><snippet>reshape</snippet></ROW><ROW><id>16743870</id><snippet>In [4]: a.reshape((-1,4))
Out[4]: 
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15],
       [16, 17, 18, 19]])
</snippet></ROW><ROW><id>16743870</id><snippet>argsort</snippet></ROW><ROW><id>16743870</id><snippet>In [2]: import numpy as np

In [3]: d = np.random.random((10, 2)).reshape((-1,4))

In [4]: d
Out[4]: 
array([[ 0.65945195,  0.1907593 ,  0.1630845 ,  0.76949532],
       [ 0.90823488,  0.71518689,  0.38422877,  0.77824007],
       [ 0.31453967,  0.76592537,  0.5871099 ,  0.09306465],
       [ 0.38251335,  0.97461878,  0.97562622,  0.87532202],
       [ 0.12358359,  0.20323007,  0.397975  ,  0.615806  ]])


In [7]: e = np.array([4-np.argsort(r) for r in d])

In [8]: e
Out[8]: 
array([[2, 3, 4, 1],
       [2, 3, 1, 4],
       [1, 4, 2, 3],
       [4, 1, 3, 2],
       [4, 3, 2, 1]])
</snippet></ROW><ROW><id>16743870</id><snippet>for r in d</snippet></ROW><ROW><id>16743870</id><snippet>4 - np.argsort(r)</snippet></ROW><ROW><id>16743870</id><snippet>4 - np.array([2, 1, 0, 3])</snippet></ROW><ROW><id>16743870</id><snippet>np.array([4,4,4,4]) - np.array([2, 1, 0, 3])</snippet></ROW><ROW><id>16743870</id><snippet>[]</snippet></ROW><ROW><id>16743870</id><snippet>np.array</snippet></ROW><ROW><id>16743870</id><snippet>In [9]: e.reshape((-1,2))
Out[9]: 
array([[2, 3],
       [4, 1],
       [2, 3],
       [1, 4],
       [1, 4],
       [2, 3],
       [4, 1],
       [3, 2],
       [4, 3],
       [2, 1]])
</snippet></ROW><ROW><id>16743870</id><snippet>In [1]: import numpy as np

In [2]: a = np.arange(100).reshape((-1,10))

In [3]: a
Out[3]: 
array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
       [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
       [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
       [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
       [70, 71, 72, 73, 74, 75, 76, 77, 78, 79],
       [80, 81, 82, 83, 84, 85, 86, 87, 88, 89],
       [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]])
</snippet></ROW><ROW><id>16743870</id><snippet>In [4]: a[3:5, 0:2]
Out[4]: 
array([[30, 31],
       [40, 41]])
</snippet></ROW><ROW><id>16743870</id><snippet>a[row:row+2, column:column+2]</snippet></ROW><ROW><id>16743870</id><snippet>reshape</snippet></ROW><ROW><id>16743870</id><snippet>argsort</snippet></ROW><ROW><id>16743870</id><snippet>In [5]: p = a[3:5, 0:2]

In [6]: e = 4-np.argsort(p.reshape((1,4))).reshape((2,2))

In [7]: e
Out[7]: 
array([[4, 3],
       [2, 1]])
</snippet></ROW><ROW><id>16743870</id><snippet>In [12]: a[3:5, 0:2] = e

In [13]: a
Out[13]: 
array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
       [ 4,  3, 32, 33, 34, 35, 36, 37, 38, 39],
       [ 2,  1, 42, 43, 44, 45, 46, 47, 48, 49],
       [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
       [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
       [70, 71, 72, 73, 74, 75, 76, 77, 78, 79],
       [80, 81, 82, 83, 84, 85, 86, 87, 88, 89],
       [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]])
</snippet></ROW><ROW><id>16743877</id><snippet>Friends</snippet></ROW><ROW><id>16743877</id><snippet>Friend</snippet></ROW><ROW><id>16743877</id><snippet>class Friends : List&lt;Friend&gt;
{
public function bool RetrieveAll()
{
//load them here
}
}
</snippet></ROW><ROW><id>16743917</id><snippet>Packages/SublimeREPL</snippet></ROW><ROW><id>16743917</id><snippet>Packages</snippet></ROW><ROW><id>16743917</id><snippet>git clone git://github.com/wuub/SublimeREPL.git
</snippet></ROW><ROW><id>16743917</id><snippet>Tools -&gt; SublimeREPL -&gt; Python -&gt; Python - IPython</snippet></ROW><ROW><id>16744024</id><snippet>bodies = np.array([(1E3, [0,0], [0,0], [0.0]), 
                   (1, [0,200], [31.6,0], [0,0])], 
                   dtype=[('mass',float), ('xy','2float'), 
                          ('vxy','2float'), ('axy','2float')])
</snippet></ROW><ROW><id>16744024</id><snippet>In [63]: bodies['mass']
Out[63]: array([ 1000.,     1.])

In [64]: bodies['xy']
Out[64]: 
array([[   0.,    0.],
       [   0.,  200.]])
</snippet></ROW><ROW><id>16744024</id><snippet>n</snippet></ROW><ROW><id>16744024</id><snippet>pdist</snippet></ROW><ROW><id>16744024</id><snippet>cdist</snippet></ROW><ROW><id>16744024</id><snippet>X</snippet></ROW><ROW><id>16744024</id><snippet>mass = np.array(...)
x = np.array(...)
y = np.array(...)
</snippet></ROW><ROW><id>16744024</id><snippet>pos = np.array([(x0, y0), (x1, y1), ...], dtype='float')
</snippet></ROW><ROW><id>16744024</id><snippet>bodies['xy']</snippet></ROW><ROW><id>16744024</id><snippet>pos</snippet></ROW><ROW><id>16744090</id><snippet>films = Film.objects.filter(Q(actors__in=Actor.objects.filter(follow_set__user=request.user)) |
                Q(genres__in=Genre.objects.filter(follow_set__user=request.user))).distinct()
</snippet></ROW><ROW><id>16744090</id><snippet>__in</snippet></ROW><ROW><id>16744090</id><snippet>actor_ids = list(Actor.objects.filter(follow_set__user=request.user).values_list('id', flat=True))
genre_ids = list(Genre.objects.filter(follow_set__user=request.user).values_list('id', flat=True))
films = Film.objects.filter(Q(actors__in=actor_ids) | Q(genres__in=genre_ids)).distinct()
</snippet></ROW><ROW><id>16744090</id><snippet>annotated_films = []
for film in films:
    film.followed_actors = film.actors.filter(id__in=actor_ids)
    film.followed_genres = film.genres.filter(id__in=genre_ids)
    annotated_films.append(film)
</snippet></ROW><ROW><id>16744108</id><snippet>++</snippet></ROW><ROW><id>16744108</id><snippet>thread.start_new_thread(isprime,(i,))
i += 1
</snippet></ROW><ROW><id>16744167</id><snippet>exec_command()</snippet></ROW><ROW><id>16744167</id><snippet>stdout.readlines()</snippet></ROW><ROW><id>16744202</id><snippet>2^b</snippet></ROW><ROW><id>16744202</id><snippet>b</snippet></ROW><ROW><id>16744202</id><snippet>from itertools import combinations, chain

unassigned_blocks = {
    ('a', 400),
    ('b', 200),
    ('c', 250),
    ('d',  50),
    # ...
}

sections_and_assigned_blocks = {
    ('1', 250): {},
    ('2', 650): {},
    # ...
}

for section in sorted(sections_and_assigned_blocks.keys()):
    best, best_length = {}, 0
    for combination in chain(*[combinations(unassigned_blocks, n)
                               for n in xrange(1, len(unassigned_blocks)+1)]):
        combination = set(combination)
        length = sum(block[1] for block in combination)
        if best_length &lt; length &lt;= section[1]:
            best, best_length = combination, length
    sections_and_assigned_blocks[section] = best
    unassigned_blocks -= best

from pprint import pprint
pprint(sections_and_assigned_blocks)
# {('1', 250): set([('c', 250)]),
#  ('2', 650): set([('a', 400), ('b', 200), ('d', 50)])}
</snippet></ROW><ROW><id>16744202</id><snippet>O(s*2^b)</snippet></ROW><ROW><id>16744202</id><snippet>s</snippet></ROW><ROW><id>16744303</id><snippet>list</snippet></ROW><ROW><id>16744303</id><snippet>with open('genes.csv') as f:
    cread = list(csv.reader(f, delimiter = '\t'))
</snippet></ROW><ROW><id>16744303</id><snippet>with</snippet></ROW><ROW><id>16744303</id><snippet>sample_1_dict = {i: float(j) for i, j in cread}
sample_1_list = [x for x in sample_1_dict.items()]
sample_1_genes_sorted = sorted(sample_1_list, key=lambda expvalues: expvalues[0])
sample_1_values_sorted = sorted(sample_1_list, key=lambda expvalues: expvalues[1])
sample_1_genes = [i for i, j in sample_1_values_sorted]
sample_1_values = [j for i, j in sample_1_values_sorted]
sample_1_graph_un = [float(j) for i, j in cread]
</snippet></ROW><ROW><id>16744834</id><snippet>xs</snippet></ROW><ROW><id>16744834</id><snippet>In [11]: df.xs(2, level='B')
Out[11]:
   Value
A
1   6.87
2   9.87
</snippet></ROW><ROW><id>16744834</id><snippet>In [12]: df1.xs(1, level=1)
Out[12]:
   Value
A
1   5.67
2   8.67
</snippet></ROW><ROW><id>16744936</id><snippet>codecs.open()</snippet></ROW><ROW><id>16744936</id><snippet>grapheme</snippet></ROW><ROW><id>16744936</id><snippet>grapheme = grapheme.decode(sys.stdin.encoding)
if grapheme in orth:
    print u'success, your grapheme was: ' + grapheme
    return True
</snippet></ROW><ROW><id>16744936</id><snippet>print</snippet></ROW><ROW><id>16744936</id><snippet>sys.argv</snippet></ROW><ROW><id>16744936</id><snippet>argparse</snippet></ROW><ROW><id>16744936</id><snippet>win32_unicode_argv()</snippet></ROW><ROW><id>16744936</id><snippet>argparse</snippet></ROW><ROW><id>16745071</id><snippet>&gt;&gt;&gt; 0x02
2
&gt;&gt;&gt; 0x104
260
&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; ctypes.c_int(0x104)
c_int(260)
</snippet></ROW><ROW><id>16745071</id><snippet>0o404</snippet></ROW><ROW><id>16745071</id><snippet>0404</snippet></ROW><ROW><id>16745071</id><snippet>0b100000100</snippet></ROW><ROW><id>16745071</id><snippet>int</snippet></ROW><ROW><id>16745119</id><snippet>current</snippet></ROW><ROW><id>16745119</id><snippet>offset</snippet></ROW><ROW><id>16745119</id><snippet>armor</snippet></ROW><ROW><id>16745119</id><snippet>speed</snippet></ROW><ROW><id>16745119</id><snippet>speed</snippet></ROW><ROW><id>16745119</id><snippet>speed.current -= 10</snippet></ROW><ROW><id>16745119</id><snippet>speed.current *= 0.9</snippet></ROW><ROW><id>16745119</id><snippet>offset</snippet></ROW><ROW><id>16745119</id><snippet>speed.offset -= 10 // reduce by 10
speed.offset = speed.current * 0.9 - speed.base // reduce by 10%
</snippet></ROW><ROW><id>16745119</id><snippet>current</snippet></ROW><ROW><id>16745119</id><snippet>speed.current -= 50</snippet></ROW><ROW><id>16745119</id><snippet>speed.offset -= 50</snippet></ROW><ROW><id>16745119</id><snippet>current</snippet></ROW><ROW><id>16745119</id><snippet>current</snippet></ROW><ROW><id>16745122</id><snippet>myappname</snippet></ROW><ROW><id>16745122</id><snippet>myappname</snippet></ROW><ROW><id>16745122</id><snippet>myappname.py</snippet></ROW><ROW><id>16745122</id><snippet>bin</snippet></ROW><ROW><id>16745122</id><snippet>myappname/
|-- setup.py
|-- myscriptname.py
|-- myappname/
|   |-- __init__.py
|   |-- src/
|      |-- __init__.py
|      |-- mainclassfile.py
</snippet></ROW><ROW><id>16745122</id><snippet>myscriptname.py</snippet></ROW><ROW><id>16745122</id><snippet>import myappname.src.mainclassfile
</snippet></ROW><ROW><id>16745122</id><snippet>setup.py</snippet></ROW><ROW><id>16745122</id><snippet>scripts=['myscriptname.py'],
</snippet></ROW><ROW><id>16745122</id><snippet>myscriptname.py</snippet></ROW><ROW><id>16745122</id><snippet>setup.py</snippet></ROW><ROW><id>16745122</id><snippet>easy_install</snippet></ROW><ROW><id>16745122</id><snippet>pip</snippet></ROW><ROW><id>16745122</id><snippet>ipython</snippet></ROW><ROW><id>16745122</id><snippet>bpython</snippet></ROW><ROW><id>16745122</id><snippet>modulegraph</snippet></ROW><ROW><id>16745122</id><snippet>py2app</snippet></ROW><ROW><id>16745122</id><snippet>easy_install</snippet></ROW><ROW><id>16745122</id><snippet>pip</snippet></ROW><ROW><id>16745478</id><snippet>with open('StockPrice.csv', 'wb') as f:
    file_writer = csv.writer(f)
    for s in newsymbolslist:
        time = 102030
        data = 895.233
        array = [time], [data]
        file_writer.writerow(array)
</snippet></ROW><ROW><id>16745478</id><snippet>'wb'</snippet></ROW><ROW><id>16745478</id><snippet>while-loop</snippet></ROW><ROW><id>16745478</id><snippet>with-block</snippet></ROW><ROW><id>16745478</id><snippet>f.close()</snippet></ROW><ROW><id>16745561</id><snippet>import sys
import socket
import fcntl, os
import errno
from time import sleep

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('127.0.0.1',9999))
fcntl.fcntl(s, fcntl.F_SETFL, os.O_NONBLOCK)

while True:
    try:
        msg = s.recv(4096)
    except socket.error, e:
        err = e.args[0]
        if err == errno.EAGAIN or err == errno.EWOULDBLOCK:
            sleep(1)
            print 'No data available'
            continue
        else:
            # a "real" error occurred
            print e
            sys.exit(1)
    else:
        # got a message, do something :)
</snippet></ROW><ROW><id>16745561</id><snippet>s.settimeout(n)</snippet></ROW><ROW><id>16745561</id><snippet>import sys
import socket
from time import sleep

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('127.0.0.1',9999))
s.settimeout(2)

while True:
    try:
        msg = s.recv(4096)
    except socket.timeout, e:
        err = e.args[0]
        # this next if/else is a bit redundant, but illustrates how the
        # timeout exception is setup
        if err == 'timed out':
            sleep(1)
            print 'recv timed out, retry later'
            continue
        else:
            print e
            sys.exit(1)
    except socket.error, e:
        # Something else happened, handle error, exit, etc.
        print e
        sys.exit(1)
    else:
        if len(msg) == 0:
            print 'orderly shutdown on server end'
            sys.exit(0)
        else:
            # got a message do something :)
</snippet></ROW><ROW><id>16745582</id><snippet>for k, v in myDict2.iteritems():
    myDict1[k] = myDict1.get(k, ()) + v
</snippet></ROW><ROW><id>16745582</id><snippet>update</snippet></ROW><ROW><id>16745700</id><snippet>cmp</snippet></ROW><ROW><id>16745700</id><snippet>cmp(a.x, b.x)</snippet></ROW><ROW><id>16745700</id><snippet>key</snippet></ROW><ROW><id>16745700</id><snippet>sort</snippet></ROW><ROW><id>16745700</id><snippet>classList.sort(key=lambda c: c.x)</snippet></ROW><ROW><id>16745886</id><snippet>heroes = {x[0]:list(x[1:]) for x in permutations(i)}
</snippet></ROW><ROW><id>16746268</id><snippet>True</snippet></ROW><ROW><id>16746268</id><snippet>False</snippet></ROW><ROW><id>16746268</id><snippet>return False</snippet></ROW><ROW><id>16746268</id><snippet>def checks(a,b):
    for item in a:
        if b[1] == item[1]:
           return True

    return False
</snippet></ROW><ROW><id>16746268</id><snippet>True</snippet></ROW><ROW><id>16746268</id><snippet>False</snippet></ROW><ROW><id>16746268</id><snippet>any</snippet></ROW><ROW><id>16746362</id><snippet>class CustomAuthenticationPolicy(object):
    def effective_principals(self, request):
        principals = [Everyone]

        identity = request.headers.get('x-identity')
        # validate the identity somehow
        if is_valid(identity):
            principals += [Authenticated, identity, 'g:editors']
        return principals

config.set_authentication_policy(CustomAuthenticationPolicy())
</snippet></ROW><ROW><id>16746528</id><snippet>print</snippet></ROW><ROW><id>16746528</id><snippet>lambda</snippet></ROW><ROW><id>16746528</id><snippet>print</snippet></ROW><ROW><id>16746528</id><snippet>print</snippet></ROW><ROW><id>16746528</id><snippet>from __future__ import print_function

job = Job("Test Job")

job.before_execution = lambda: print('before')
job.execution = lambda: print('execution')
job.after_execution = lambda: print('after execution')

job.run()
</snippet></ROW><ROW><id>16746528</id><snippet>job = Job("Test Job")

@job.before_execution
def before1():
    print 'before 1'

@job.before_execution
def before2():
    print 'before 2'

@job.execution
def after():
    print 'after'

job.run()
</snippet></ROW><ROW><id>16746528</id><snippet>class Job(object):
    def __init__(self, name):
        self.name = name

        self.before_execution = lambda: None
        self.execution = lambda: None
        self.after_execution = lambda: None

    def run(self):
        # You fill this stuff in
</snippet></ROW><ROW><id>16746528</id><snippet>lambda</snippet></ROW><ROW><id>16746528</id><snippet>class Job(object):
    def __init__(self, name):
        self.name = name

    def before_execution(self):
        pass

    def execution(self):
        pass

    def after_execution(self):
        pass

    def run(self):
        # You fill this stuff in
</snippet></ROW><ROW><id>16746528</id><snippet>job = Job('foo')

def before(self):
    print 'Test'

job.before_execution = before
job.run()
</snippet></ROW><ROW><id>16746911</id><snippet>filename.replace()</snippet></ROW><ROW><id>16746911</id><snippet>import os, glob, time

def new_filename(filename):
    return filename.replace(' ', '_').lower().encode('utf8').replace(' (', '-') \
                   .replace(')', '').replace(',', '').replace('_-_', '-')

path  = os.getcwd()
dirlist = glob.glob('*.pdf')
for filename in dirlist:
    os.rename(os.path.join(path, filename), os.path.join(path, new_filename(filename)))
</snippet></ROW><ROW><id>16747264</id><snippet>import Queue

def bfs(graph, start, end):
    q = Queue.Queue()
    path = [start]
    q.put(path)
    visited = set([start])

    while not q.empty():
        path = q.get()
        last_node = path[-1]
        if last_node == end:
            return path
        for node in graph[last_node]:
            if node not in visited:
                visited.add(node)
                q.put(path + [node])
</snippet></ROW><ROW><id>16747468</id><snippet>repr()</snippet></ROW><ROW><id>16747468</id><snippet>'\u....'</snippet></ROW><ROW><id>16747468</id><snippet>'\x..</snippet></ROW><ROW><id>16747468</id><snippet>\n</snippet></ROW><ROW><id>16747468</id><snippet>\t</snippet></ROW><ROW><id>16747468</id><snippet>print</snippet></ROW><ROW><id>16747468</id><snippet>repr()</snippet></ROW><ROW><id>16747468</id><snippet>&gt;&gt;&gt; print u'\u2036Hello World!\u2033'
‶Hello World!″
&gt;&gt;&gt; u'\u2036Hello World!\u2033'
u'\u2036Hello World!\u2033'
&gt;&gt;&gt; [u'\u2036Hello World!\u2033', u'Another\nstring']
[u'\u2036Hello World!\u2033', u'Another\nstring']
&gt;&gt;&gt; print _[1]
Another
string
</snippet></ROW><ROW><id>16747468</id><snippet>'text'</snippet></ROW><ROW><id>16747468</id><snippet>import json

with open("file_name.txt") as tweets_file:
    tweets = [] 
    for line in tweets_file:
        data = json.loads(a)
        if 'text' in data:
            tweets.append(data['text'])
</snippet></ROW><ROW><id>16747618</id><snippet>self.a = (a, self.b) = b
</snippet></ROW><ROW><id>16747618</id><snippet>self.a = a; self.b = b
</snippet></ROW><ROW><id>16747618</id><snippet>self.a, self.b = a, b
</snippet></ROW><ROW><id>16747618</id><snippet>self.a = a
self.b = b
</snippet></ROW><ROW><id>16747635</id><snippet>&gt;&gt;&gt; class Foo:
...     @property
...     def bar(self):
...         return 'Hello world!'
... 
&gt;&gt;&gt; Foo.bar
&lt;property object at 0x101455f70&gt;
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.bar
'Hello world!'
</snippet></ROW><ROW><id>16747635</id><snippet>Foo</snippet></ROW><ROW><id>16747635</id><snippet>foo</snippet></ROW><ROW><id>16747635</id><snippet>property</snippet></ROW><ROW><id>16747635</id><snippet>__get__</snippet></ROW><ROW><id>16747635</id><snippet>__set__</snippet></ROW><ROW><id>16747711</id><snippet>logging</snippet></ROW><ROW><id>16747711</id><snippet>Tornado</snippet></ROW><ROW><id>16747711</id><snippet>crontab</snippet></ROW><ROW><id>16747711</id><snippet>crontab -e</snippet></ROW><ROW><id>16747711</id><snippet>59 23 * * * source /home/zfz/cleanlog.sh
</snippet></ROW><ROW><id>16747711</id><snippet>cleanlog.sh</snippet></ROW><ROW><id>16747711</id><snippet>clean.sh</snippet></ROW><ROW><id>16747711</id><snippet>fn=$(date +%F_service_log.out)
cat /home/zfz/nohup.out &gt;&gt; "/home/zfz/log/$fn"
echo '' &gt; /home/zfz/nohup.out
</snippet></ROW><ROW><id>16747711</id><snippet>echo ''</snippet></ROW><ROW><id>16747711</id><snippet>nohup.out</snippet></ROW><ROW><id>16747711</id><snippet>-rw-r--r-- 1 zfz zfz  54474342 May 22 23:59 2013-05-22_service_log.out
-rw-r--r-- 1 zfz zfz  23481121 May 23 23:59 2013-05-23_service_log.out
</snippet></ROW><ROW><id>16747734</id><snippet>self.prog_bar.stop()</snippet></ROW><ROW><id>16747734</id><snippet>import Queue

class GUI:
    # ...

    def tb_click(self):
        self.progress()
        self.prog_bar.start()
        self.queue = Queue.Queue()
        ThreadedTask(self.queue).start()
        self.master.after(100, self.process_queue)

    def process_queue(self):
        try:
            msg = self.queue.get(0)
            # Show result of the task if needed
            self.prog_bar.stop()
        except Queue.Empty:
            self.master.after(100, self.process_queue)

class ThreadedTask(threading.Thread):
    def __init__(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue
    def run(self):
        time.sleep(5)  # Simulate long running process
        self.queue.put("Task finished")
</snippet></ROW><ROW><id>16747843</id><snippet>import json

...

return json.dumps(records)
</snippet></ROW><ROW><id>16747864</id><snippet>for</snippet></ROW><ROW><id>16747864</id><snippet>for</snippet></ROW><ROW><id>16747864</id><snippet>last = defaultvalue
for last in my_iter:
    pass
</snippet></ROW><ROW><id>16747864</id><snippet>for</snippet></ROW><ROW><id>16748063</id><snippet>Queue.Queue</snippet></ROW><ROW><id>16748063</id><snippet>deque</snippet></ROW><ROW><id>16748063</id><snippet>path = q.popleft()</snippet></ROW><ROW><id>16748063</id><snippet>Queue.Queue</snippet></ROW><ROW><id>16748063</id><snippet>deque</snippet></ROW><ROW><id>16748063</id><snippet>_get</snippet></ROW><ROW><id>16748281</id><snippet>(ord(msg[4])&lt;&lt;8) + ord(msg[5])
</snippet></ROW><ROW><id>16748344</id><snippet>setup_http_proxy("THE_ADRESS", THE_PORT_NUMBER) # address of the Proxy, port the Proxy is listening on 
</snippet></ROW><ROW><id>16748458</id><snippet>csv</snippet></ROW><ROW><id>16748458</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>16748458</id><snippet>import csv
from collections import defaultdict

def generateGraph(fileName):
    heroDict = defaultdict(list)

    with open(fileName, 'rb') as inFile:
        reader = csv.reader(inFile, delimiter='\t')
        for row in reader:
            name, comic = row[:2]
            heroDict[comic].append(name)

    graph = defaultdict(list)
    for names in heroDict.itervalues():
        for name in names:
            graph[name].extend(n for n in names if n != name)
    print graph
    return graph
</snippet></ROW><ROW><id>16748458</id><snippet>i</snippet></ROW><ROW><id>16748458</id><snippet>j</snippet></ROW><ROW><id>16748601</id><snippet>static void
list_dealloc(PyListObject *op)
{
    Py_ssize_t i;
    PyObject_GC_UnTrack(op);
    Py_TRASHCAN_SAFE_BEGIN(op)
    if (op-&gt;ob_item != NULL) {
        /* Do it backwards, for Christian Tismer.
           There's a simple test case where somehow this reduces
           thrashing when a *very* large list is created and
           immediately deleted. */
        i = Py_SIZE(op);
        while (--i &gt;= 0) {
            Py_XDECREF(op-&gt;ob_item[i]);
        }
        PyMem_FREE(op-&gt;ob_item);
    }
    if (numfree &lt; PyList_MAXFREELIST &amp;&amp; PyList_CheckExact(op))
        free_list[numfree++] = op;
    else
        Py_TYPE(op)-&gt;tp_free((PyObject *)op);
    Py_TRASHCAN_SAFE_END(op)
}
</snippet></ROW><ROW><id>16748748</id><snippet>while fibon[-1] &lt;= 4000000:
    addtoend = fibon[-1] + fibon[-2] 
    fibon.append(addtoend)
</snippet></ROW><ROW><id>16748748</id><snippet>fibon[-1]</snippet></ROW><ROW><id>16748748</id><snippet>true</snippet></ROW><ROW><id>16748748</id><snippet>false</snippet></ROW><ROW><id>16748748</id><snippet>while True:
    addtoend = fibon[-1] + fibon[-2]
    if addtoend &gt; 4000000: break
    fibon.append(addtoend)
</snippet></ROW><ROW><id>16748938</id><snippet>totest = set(totest)

for lst in l1, l2, l3:
    for item in totest.intersection(lst):
        evalitem(item)
</snippet></ROW><ROW><id>16748938</id><snippet>except: return</snippet></ROW><ROW><id>16748938</id><snippet>try...except</snippet></ROW><ROW><id>16748967</id><snippet>list = [ list, list_two ]
list += [ list_three ]
</snippet></ROW><ROW><id>16748967</id><snippet>list = [ list ]
list.append( list_two )
list.append( list_three )
</snippet></ROW><ROW><id>16749101</id><snippet>zip</snippet></ROW><ROW><id>16749101</id><snippet>&gt;&gt;&gt; lis =  ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; for x,y in zip(lis,lis[1:]):
...     print x,y
...     
a b
b c
c d
d e
</snippet></ROW><ROW><id>16749135</id><snippet>ABC</snippet></ROW><ROW><id>16749135</id><snippet>x &lt; y, x &lt;= y, x &gt;= y, x &gt; y, x = y, x &lt;&gt; y, 0 &lt;= d &lt; 10</snippet></ROW><ROW><id>16749135</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>16749135</id><snippet>ABC</snippet></ROW><ROW><id>16749135</id><snippet>!=</snippet></ROW><ROW><id>16749135</id><snippet>!=</snippet></ROW><ROW><id>16749135</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>16749135</id><snippet>&gt;&gt;&gt; from __future__ import barry_as_FLUFL
&gt;&gt;&gt; 1 &lt;&gt; 2
True
</snippet></ROW><ROW><id>16749230</id><snippet>unit.position = new_pos</snippet></ROW><ROW><id>16749230</id><snippet>unit.position(new_pos)</snippet></ROW><ROW><id>16749230</id><snippet>property</snippet></ROW><ROW><id>16749230</id><snippet>get</snippet></ROW><ROW><id>16749230</id><snippet>set</snippet></ROW><ROW><id>16749230</id><snippet>unit.position += velocity</snippet></ROW><ROW><id>16749230</id><snippet>.position</snippet></ROW><ROW><id>16749230</id><snippet>None</snippet></ROW><ROW><id>16749230</id><snippet>NO_VALUE = object()</snippet></ROW><ROW><id>16749230</id><snippet>@property
def width(self, new_width):
    self._width = new_width
    self._dirty = True

@width.setter
def width(self):
    return self._width
</snippet></ROW><ROW><id>16749230</id><snippet>def width(self, new_width=None):
    if new_width is not None:
        self._width = new_width
        self._dirty = True
    else:
        return self._width
</snippet></ROW><ROW><id>16749230</id><snippet>else</snippet></ROW><ROW><id>16749328</id><snippet>class A(object):
    foo = 1
    bar = 2


class B(A):
    @property
    def bar(self):
        raise AttributeError


&gt;&gt;&gt; b = B()
&gt;&gt;&gt; b.bar

Traceback (most recent call last):
  File "&lt;pyshell#17&gt;", line 1, in &lt;module&gt;
    b.bar
  File "&lt;pyshell#15&gt;", line 4, in bar
    raise AttributeError
AttributeError
</snippet></ROW><ROW><id>16749359</id><snippet>import urllib2

url_path = "http://dx.doi.org/10.1109/mper.1991.88667"
urllib2.urlparse.parse_qs(urllib2.urlopen(url_path).url)["arnumber"][0]
&gt;&gt;&gt; '88667'
</snippet></ROW><ROW><id>16749382</id><snippet>x.__x</snippet></ROW><ROW><id>16749382</id><snippet>x._A__x</snippet></ROW><ROW><id>16749382</id><snippet>__x</snippet></ROW><ROW><id>16749382</id><snippet>__x</snippet></ROW><ROW><id>16749382</id><snippet>__x</snippet></ROW><ROW><id>16749441</id><snippet>import PIL
import Image
import numpy as np

i = 0
im = Image.open('%*s.bmp' % (1, i)).convert('RGB')
n_test = np.asarray(im)
r, g, b = np.rollaxis(n_test, axis=-1)
ni_test = np.empty(n_test.shape[:2], dtype=np.uint8)
ni_test.fill(255)

mask = (r &gt;= 5) &amp; (r &lt;= 10) &amp; (g &gt;= 5) &amp; (g &lt;= 10) &amp; (b &gt;= 5) &amp; (b &lt;= 10)
ni_test[mask] = 0
im_test = Image.fromarray(ni_test, '1')
im_test.save('test_%*s.bmp' % (1, i))
</snippet></ROW><ROW><id>16749441</id><snippet>r, g, b = np.rollaxis(n_test, axis=-1)
</snippet></ROW><ROW><id>16749441</id><snippet>n_test.shape</snippet></ROW><ROW><id>16749441</id><snippet>(w, h, 3)</snippet></ROW><ROW><id>16749441</id><snippet>r</snippet></ROW><ROW><id>16749441</id><snippet>g</snippet></ROW><ROW><id>16749441</id><snippet>b</snippet></ROW><ROW><id>16749441</id><snippet>(w, h)</snippet></ROW><ROW><id>16749441</id><snippet>n_test</snippet></ROW><ROW><id>16749441</id><snippet>r</snippet></ROW><ROW><id>16749441</id><snippet>,</snippet></ROW><ROW><id>16749441</id><snippet>np.where</snippet></ROW><ROW><id>16749441</id><snippet>for-loops</snippet></ROW><ROW><id>16749441</id><snippet>mask = (r &gt;= 5) &amp; (r &lt;= 10) &amp; (g &gt;= 5) &amp; (g &lt;= 10) &amp; (b &gt;= 5) &amp; (b &lt;= 10)
</snippet></ROW><ROW><id>16749441</id><snippet>(r &gt;= 5)</snippet></ROW><ROW><id>16749441</id><snippet>r</snippet></ROW><ROW><id>16749441</id><snippet>(w, h)</snippet></ROW><ROW><id>16749441</id><snippet>&amp;</snippet></ROW><ROW><id>16749441</id><snippet>mask</snippet></ROW><ROW><id>16749441</id><snippet>ni_test[mask] = 0</snippet></ROW><ROW><id>16749441</id><snippet>ni_test</snippet></ROW><ROW><id>16749441</id><snippet>mask</snippet></ROW><ROW><id>16749441</id><snippet>ni_test</snippet></ROW><ROW><id>16749441</id><snippet>mask</snippet></ROW><ROW><id>16749643</id><snippet>limit</snippet></ROW><ROW><id>16749643</id><snippet>skip</snippet></ROW><ROW><id>16749649</id><snippet>word_freq.items()</snippet></ROW><ROW><id>16749649</id><snippet>lis = sorted(word_freq.items(), key = lambda x:x[1], reverse = True)
for word,freq in lis:
    print ("%-10s %d" % (word, freq))
</snippet></ROW><ROW><id>16749649</id><snippet>list</snippet></ROW><ROW><id>16749696</id><snippet>class</snippet></ROW><ROW><id>16749696</id><snippet>class</snippet></ROW><ROW><id>16749696</id><snippet>class</snippet></ROW><ROW><id>16749696</id><snippet>exec</snippet></ROW><ROW><id>16749696</id><snippet>eval</snippet></ROW><ROW><id>16749696</id><snippet>class</snippet></ROW><ROW><id>16749750</id><snippet>next(key for key,val in globals().items() if val is x and not key.startswith('_'))

b = a
#do you want b or a as the name now?
</snippet></ROW><ROW><id>16749912</id><snippet>page_range</snippet></ROW><ROW><id>16749912</id><snippet>paginator = Paginator(objects, 15)
pr = paginator.page_range
</snippet></ROW><ROW><id>16749912</id><snippet>{% for page_num in prange %}
    {% if objects.number  == page_num %}
        {{page_num}} // current page
    {% else %}
        &lt;a href="?page={{page_num}}"&gt;{{ page_num }}&lt;/a&gt; //next page
    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>16749982</id><snippet>python</snippet></ROW><ROW><id>16750010</id><snippet>x  = [ 1, 2, 3, 5, 10, 100, 1000 ]
y1 = [ 1, 0.822, 0.763, 0.715, 0.680, 0.648, 0.645 ]
y2 = [ 1, 0.859, 0.812, 0.774, 0.746, 0.721, 0.718 ]

import matplotlib.pyplot as plt
from matplotlib.transforms import BlendedGenericTransform
# mode 01 from one case
fig1 = plt.figure()
ax1 = fig1.add_subplot(111)
line1, = ax1.plot( x, y1, label='mode 01' )
# mode 01 from other case
fig2 = plt.figure()
ax2 = fig2.add_subplot(111)
line2, = ax2.plot( x, y2, label='mode 01' )

# Create new figure and two subplots, sharing both axes
fig3, (ax3, ax4) = plt.subplots(1,2,sharey=True, sharex=True,figsize=(10,5))

# Plot data from fig1 and fig2
line3, = ax3.plot(line1.get_data()[0], line1.get_data()[1])
line4, = ax4.plot(line2.get_data()[0], line2.get_data()[1])
# If possible (easy access to plotting data) use
# ax3.plot(x, y1)
# ax4.lpot(x, y2)

ax3.set_ylabel('y-axis')
ax3.grid(True)
ax4.grid(True)

# Add legend
fig3.legend((line3, line4),
            ('label 3', 'label 4'),
            loc = 'upper center',
            bbox_to_anchor = [0.5, -0.05],
            bbox_transform = BlendedGenericTransform(fig3.transFigure, ax3.transAxes))
# Make space for the legend beneath the subplots
plt.subplots_adjust(bottom = 0.2)
# Show only fig3
fig3.show()
</snippet></ROW><ROW><id>16750010</id><snippet>Axes</snippet></ROW><ROW><id>16750010</id><snippet>Axes</snippet></ROW><ROW><id>16750010</id><snippet>Axes</snippet></ROW><ROW><id>16750010</id><snippet>Figure</snippet></ROW><ROW><id>16750010</id><snippet>Axes</snippet></ROW><ROW><id>16750010</id><snippet>Figure</snippet></ROW><ROW><id>16750010</id><snippet>_axstack</snippet></ROW><ROW><id>16750010</id><snippet>ax.legend(...</snippet></ROW><ROW><id>16750010</id><snippet># Add this line
from matplotlib.transforms import BlendedGenericTransform

# Edit the function call to use the BlendedGenericTransform
ax.legend(loc='upper center',
          ncol=7,
          labelspacing=-0.7,
          columnspacing=0.75,
          fontsize=8,
          handlelength=2.6,
          markerscale=0.75,
          bbox_to_anchor=(0.5, -0.05),
          bbox_transform=BlendedGenericTransform(fig.transFigure, ax.transAxes))
</snippet></ROW><ROW><id>16750010</id><snippet>bbox_to_anchor</snippet></ROW><ROW><id>16750010</id><snippet>BlendedGenericTransform</snippet></ROW><ROW><id>16750047</id><snippet>__class__</snippet></ROW><ROW><id>16750047</id><snippet>def __add__(self, other):
    return self.__class__(self.content + other.content)
</snippet></ROW><ROW><id>16750047</id><snippet>if self.__class__ == other.__class__:
    &lt;use __class__&gt;
else:
    &lt;use Number&gt;
</snippet></ROW><ROW><id>16750047</id><snippet>__radd__</snippet></ROW><ROW><id>16750047</id><snippet>__radd__ = __add__
</snippet></ROW><ROW><id>16750047</id><snippet>Number(1) + Float(1) == Float(1) + Number(1) == Float(2)</snippet></ROW><ROW><id>16750107</id><snippet>ICY 200 OK
</snippet></ROW><ROW><id>16750107</id><snippet>HTTP/1.0</snippet></ROW><ROW><id>16750107</id><snippet>ICY</snippet></ROW><ROW><id>16750107</id><snippet>HTTP/1.0 200 OK</snippet></ROW><ROW><id>16750107</id><snippet>Icy-MetaData: 1</snippet></ROW><ROW><id>16750107</id><snippet>Icy-MetaInt: 8192</snippet></ROW><ROW><id>16750107</id><snippet>0x00</snippet></ROW><ROW><id>16750107</id><snippet>0x01</snippet></ROW><ROW><id>16750107</id><snippet>StreamTitle: 'My Stream';StreamUrl='';</snippet></ROW><ROW><id>16750107</id><snippet>0x00</snippet></ROW><ROW><id>16750407</id><snippet>[word.lower(),k]</snippet></ROW><ROW><id>16750407</id><snippet>(word.lower(), k)</snippet></ROW><ROW><id>16750497</id><snippet>re.search()</snippet></ROW><ROW><id>16750497</id><snippet>import re
string = 'adverb with text verb text from here on'
print re.findall(r'adverb(.*?)verb', string)
</snippet></ROW><ROW><id>16750497</id><snippet># [' with text ']
</snippet></ROW><ROW><id>16750497</id><snippet>noun</snippet></ROW><ROW><id>16750497</id><snippet>import re
string = [
    'adverb with text verb text from here on',
    'adverb with text noun text from here on'
]
print [re.findall(r'adverb(.*?)(?:verb|noun)', s) for s in string]
</snippet></ROW><ROW><id>16750497</id><snippet># [[' with text '], [' with text ']]
</snippet></ROW><ROW><id>16750513</id><snippet>class FileProxyGetter(ProxyGetter):
    ...
    def MakeProxy(self, *args, **kwargs):
        return Proxy.fromstring(*args, **kwargs)
    def Get(self):
        ...
           proxies.append(self.MakeProxy(l[:-1]))
        ...
    ...
class FileSecureProxyGetter(FileProxyGetter):
    def MakeProxy(self, *args, **kwargs):
        return SecureProxy.fromstring(*args, **kwargs)
</snippet></ROW><ROW><id>16750513</id><snippet>class FileProxyGetter(ProxyGetter):
    def __init__(self, proxyclass, fname = "d:\\proxies.txt"):
        self.proxyClass = proxyclass
        self.fileName = fname
    ...
    def Get(self):
        ...
            proxies.append(self.proxyclass.fromstring(l[:-1]))
        ...
    ...

# use this as such
FileProxyGetter(Proxy, "proxies.txt")
FileProxyGetter(SecureProxy, "secure_proxies.txt")
</snippet></ROW><ROW><id>16750513</id><snippet>&gt;&gt;&gt; class A(object):
...     def foo(self):
...         print 'hello A'
... 
&gt;&gt;&gt; class B(object):
...     def foo(self):
...         print 'hello B'
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.foo()
hello A
&gt;&gt;&gt; a.__class__
&lt;class '__main__.A'&gt;
&gt;&gt;&gt; a.__class__ = B
&gt;&gt;&gt; a.foo()
hello B
</snippet></ROW><ROW><id>16750513</id><snippet>&gt;&gt;&gt; class B(object):
...     def rename(self, name):
...         self.name = name
... 
&gt;&gt;&gt; class A(object):
...     def say(self):
...         print 'Hello', self.name
... 
&gt;&gt;&gt; a, b = A(), B()
&gt;&gt;&gt; a.__dict__ = b.__dict__
&gt;&gt;&gt; b.rename('john')
&gt;&gt;&gt; a.say()
Hello john
&gt;&gt;&gt; a.rename('mary')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'A' object has no attribute 'rename'
&gt;&gt;&gt; b.say()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'B' object has no attribute 'say'
</snippet></ROW><ROW><id>16750513</id><snippet>&gt;&gt;&gt; class A(object):
...     def say(self):
...         print('Hello', self.name)
... 
&gt;&gt;&gt; class B(object):
...     def rename(self, name):
...         self.name = name + name
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; B.rename(a, 'josh')
&gt;&gt;&gt; a.say()
Hello joshjosh
</snippet></ROW><ROW><id>16750520</id><snippet>writeUTF</snippet></ROW><ROW><id>16750530</id><snippet>map</snippet></ROW><ROW><id>16750530</id><snippet>[None, None, None, None]</snippet></ROW><ROW><id>16750530</id><snippet>&gt;&gt;&gt; _ = map(pr, results)
</snippet></ROW><ROW><id>16750530</id><snippet>map</snippet></ROW><ROW><id>16750737</id><snippet>Tk</snippet></ROW><ROW><id>16750737</id><snippet>mainloop</snippet></ROW><ROW><id>16750737</id><snippet>mainloop</snippet></ROW><ROW><id>16750737</id><snippet>import Tkinter as tk
class MyApp(...):
    def __init__(self, root, ...):
        ...
    ...

root = tk.Tk()
myApp(root)
root.mainloop()
</snippet></ROW><ROW><id>16750921</id><snippet>plt.contour(xi, yi, F, colors='red')
plt.contour(xi, yi, F1, colors='blue')
plt.show()
</snippet></ROW><ROW><id>16750921</id><snippet>import matplotlib.pyplot as plt
import numpy as np

X = np.linspace(0, 1, 10)
Y = np.linspace(0, 1, 10)

x,y = np.meshgrid(X,Y)

f1 = np.cos(x*y)
f2 = x-y

plt.contour(x,y,f2,colors='red')
plt.contour(x,y,f1,colors='blue')
plt.show()
</snippet></ROW><ROW><id>16750966</id><snippet>class MyClass(object):
    def __init__(self, member):
        self.member = member
</snippet></ROW><ROW><id>16750966</id><snippet>self</snippet></ROW><ROW><id>16750966</id><snippet>MyClass.member</snippet></ROW><ROW><id>16750966</id><snippet>self.member</snippet></ROW><ROW><id>16750966</id><snippet>MyClass.member</snippet></ROW><ROW><id>16750966</id><snippet>__init__</snippet></ROW><ROW><id>16750966</id><snippet>self</snippet></ROW><ROW><id>16750966</id><snippet>__init__</snippet></ROW><ROW><id>16750966</id><snippet>__new__</snippet></ROW><ROW><id>16750966</id><snippet>__construct</snippet></ROW><ROW><id>16750966</id><snippet>property</snippet></ROW><ROW><id>16750966</id><snippet>class MyClass(object):
    def __init__(self, member):
        self._member = member

    @property
    def member(self):
        return 'Hello {}!'.format(self._member)

    @member.setter
    def member(self, value):
        # Remove "Hello " and "!" from the start and end of any value being set.
        if value.startswith('Hello '):
            value = value.split(None, 1)[1]
        self._member = value.rstrip('!')
</snippet></ROW><ROW><id>16750966</id><snippet>&gt;&gt;&gt; m = MyClass('World')
&gt;&gt;&gt; m.member
'Hello World!'
&gt;&gt;&gt; m.member = 'Hello Planet Earth!'
&gt;&gt;&gt; m.member
'Hello Planet Earth!'
&gt;&gt;&gt; m._member
'Planet Earth'
</snippet></ROW><ROW><id>16750973</id><snippet>import base
import deep
class ReallyDeep(deep.Deep):
    def __init__(self, parent):
       if isinstance(parent, base.Base):
           pass
</snippet></ROW><ROW><id>16751351</id><snippet>int</snippet></ROW><ROW><id>16751351</id><snippet>user = int(raw_input('&gt;&gt;&gt;'))</snippet></ROW><ROW><id>16751351</id><snippet>random.choice</snippet></ROW><ROW><id>16751351</id><snippet>random.randrange(1, 10)</snippet></ROW><ROW><id>16751351</id><snippet>except:</snippet></ROW><ROW><id>16751351</id><snippet>ValueError</snippet></ROW><ROW><id>16751351</id><snippet>import random

def get_user_num(msg='&gt;&gt;&gt; '): 
    """Print the msg parameter as a prompt for the user to enter a number.  If
    they enter an invalid string, reprompt them until they enter a number.

    """
    valid = False 
    while not valid: 
        try: 
            user = int(raw_input(msg)) # save the conversion to int
        except ValueError: # only except the error you're actually looking for
            print 'Numbers Only!' 
        else: 
            valid = true 

    return user

# 'from 1-9' is probably better than 'between 1-10'
user = get_user_num('Guess The Number\n Pick from 1-9\n&gt;&gt;&gt; ') 
number = random.randrange(1, 10) # &lt;- numbers list is unnecessary
#int(number) # this conversion was never needed, it was already a number

for _ in range(4):  # you don't need (0, 4), 0 is assumed 
    if number == user:
        print 'You Won!' # the correct number has been guessed
        break # exit the loop once the number has been correctly guessed
    elif user &gt; number:
        print 'The number is less than', user
    elif user &lt; number:
        print 'The number is bigger than', user

    # Don't repeat yourself, put this outside the `if`s
    user = get_user_num()
else:
    #only print the answer when it wasn't guessed correctly
    print "The Number was", number
</snippet></ROW><ROW><id>16751467</id><snippet>  if settings.USE_JSONFIELD and len(kwargs):
    newaction.data = kwargs
</snippet></ROW><ROW><id>16751467</id><snippet>if actstream_settings.USE_JSONFIELD:
    try:
        from jsonfield.fields import JSONField
    except ImportError:
        raise ImproperlyConfigured('You must have django-jsonfield installed '
                                'if you wish to use a JSONField on your actions')
    JSONField(blank=True, null=True).contribute_to_class(Action, 'data')
</snippet></ROW><ROW><id>16751751</id><snippet>open_workbook()</snippet></ROW><ROW><id>16751751</id><snippet>glob.glob()</snippet></ROW><ROW><id>16751751</id><snippet>.xlsx</snippet></ROW><ROW><id>16751751</id><snippet>folder</snippet></ROW><ROW><id>16751751</id><snippet>import os.path
from glob import glob
from xlrd import open_workbook

def open_arbitrary_workbook(folder, *args, **kwargs):
    try:
        path = glob(os.path.join(folder, "*.xlsx"))[0]
    except IndexError:
        raise IOError("No .xlsx files found in %r" % folder)
    return open_workbook(path, *args, **kwargs)
</snippet></ROW><ROW><id>16751851</id><snippet>main</snippet></ROW><ROW><id>16751851</id><snippet>from pyramid.paster import get_app

app = get_app('testing.ini#main')
test_app = TestApp(app)
</snippet></ROW><ROW><id>16751851</id><snippet>import os.path
import some_module

here = os.path.dirname(some_module.__file__)
app = get_app(os.path.join(here, 'testing.ini'))
</snippet></ROW><ROW><id>16752021</id><snippet>sum(i[1] for i in a.itervalues())
</snippet></ROW><ROW><id>16752021</id><snippet>for key in a</snippet></ROW><ROW><id>16752021</id><snippet>a.values()</snippet></ROW><ROW><id>16752021</id><snippet>dict</snippet></ROW><ROW><id>16752021</id><snippet>a.itervalues()</snippet></ROW><ROW><id>16752135</id><snippet>try</snippet></ROW><ROW><id>16752135</id><snippet>except</snippet></ROW><ROW><id>16752452</id><snippet>blar = re.search("Blar=(-?\d+\.\d+)((?:,-?\d+\.\d+)+)", x)
blar.groups()
</snippet></ROW><ROW><id>16752469</id><snippet>rec_subsets()</snippet></ROW><ROW><id>16752469</id><snippet>range(20)</snippet></ROW><ROW><id>16752469</id><snippet>result.append(s)</snippet></ROW><ROW><id>16752469</id><snippet># do something with s</snippet></ROW><ROW><id>16752469</id><snippet>gen_subsets()</snippet></ROW><ROW><id>16752469</id><snippet>rec_subsets()</snippet></ROW><ROW><id>16752469</id><snippet>yield from</snippet></ROW><ROW><id>16752469</id><snippet>__next__()</snippet></ROW><ROW><id>16752469</id><snippet>itertools.combinations()</snippet></ROW><ROW><id>16752469</id><snippet>from itertools import combinations

def subsets_comb(lst):
    return (comb for r in range(len(lst)+1) for comb in combinations(lst, r))
</snippet></ROW><ROW><id>16752469</id><snippet>range(20)</snippet></ROW><ROW><id>16752469</id><snippet>name                    time ratio comment
subsets_comb        227 msec  1.00 [range(0, 20)]
subsets_ipowerset   476 msec  2.10 [range(0, 20)]
subsets_rec         957 msec  4.22 [range(0, 20)]
subsets_gen_pep380 2.34  sec 10.29 [range(0, 20)]
subsets_gen        2.63  sec 11.59 [range(0, 20)]
</snippet></ROW><ROW><id>16752469</id><snippet>time-subsets.py</snippet></ROW><ROW><id>16752494</id><snippet>site-packages</snippet></ROW><ROW><id>16752510</id><snippet>execute_spider</snippet></ROW><ROW><id>16752510</id><snippet>CrawlerWorker</snippet></ROW><ROW><id>16752510</id><snippet>execute_spider</snippet></ROW><ROW><id>16752510</id><snippet>CrawlerWorker</snippet></ROW><ROW><id>16752510</id><snippet>try:
        self.crawler.start()
except ReactorAlreadyRunning:
        raise RecursiveSpiderCall("Spider %s was called from another spider recursively. Such behavior is not allowed" % (self.spider))
</snippet></ROW><ROW><id>16752719</id><snippet>types.FunctionType</snippet></ROW><ROW><id>16752719</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; isinstance(len, types.FunctionType)
False
&gt;&gt;&gt; def mylen(): pass
... 
&gt;&gt;&gt; isinstance(mylen, types.FunctionType)
True
</snippet></ROW><ROW><id>16752719</id><snippet>isinstance(X, (types.FunctionType, types.LambdaType)</snippet></ROW><ROW><id>16752719</id><snippet>builtin_function_or_method</snippet></ROW><ROW><id>16752719</id><snippet>&gt;&gt;&gt; len.__class__
&lt;type 'builtin_function_or_method'&gt;
&gt;&gt;&gt; np.vdot.__class__
&lt;type 'builtin_function_or_method'&gt;
</snippet></ROW><ROW><id>16752719</id><snippet>types.BuiltinFunctionType</snippet></ROW><ROW><id>16752719</id><snippet>types.BuiltinMethodType</snippet></ROW><ROW><id>16752719</id><snippet>__code__</snippet></ROW><ROW><id>16752719</id><snippet>__code__</snippet></ROW><ROW><id>16752719</id><snippet>class</snippet></ROW><ROW><id>16752719</id><snippet>enumerate</snippet></ROW><ROW><id>16752719</id><snippet>type</snippet></ROW><ROW><id>16752719</id><snippet>__dict__</snippet></ROW><ROW><id>16752719</id><snippet>dir</snippet></ROW><ROW><id>16752719</id><snippet>__slots__</snippet></ROW><ROW><id>16752719</id><snippet>def is_implemented_in_c(obj):
    if isinstance(obj, (types.FunctionType, types.LambdaType)):
        return False
    elif isinstance(obj, type):
        if '__dict__' in dir(obj): return False
        return not hasattr(obj, '__slots__')
    # We accept also instances of classes.
    # Return True for instances of C classes, False for python classes.
    return not isinstance(obj, types.InstanceType)
</snippet></ROW><ROW><id>16752719</id><snippet>&gt;&gt;&gt; is_implemented_in_c(enumerate)
True
&gt;&gt;&gt; is_implemented_in_c(len)
True
&gt;&gt;&gt; is_implemented_in_c(np.vdot)
True
&gt;&gt;&gt; is_implemented_in_c(lambda x: True)
False
&gt;&gt;&gt; is_implemented_in_c(object)
True
&gt;&gt;&gt; class A(object):
...     __slots__ = ('a', 'b')
... 
&gt;&gt;&gt; is_implemented_in_c(A)
False
</snippet></ROW><ROW><id>16752729</id><snippet>from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.contrib.loader.processor import TakeFirst
from scrapy.contrib.loader import XPathItemLoader
from scrapy.selector import HtmlXPathSelector

from scrapy.item import Item, Field


class PlayGroundItem(Item):
    title = Field()
    url = Field()
    download_url = Field()


class PlayGroundLoader(XPathItemLoader):
    default_output_processor = TakeFirst()


class PlayGroundSpider(CrawlSpider):
    name = "playground_spider"
    allowed_domains = ["www.playground.ru"]
    start_urls = ["http://www.playground.ru/files/stalker_clear_sky/"]
    rules = (
        Rule(SgmlLinkExtractor(allow=('/files/s_t_a_l_k_e_r_chistoe_nebo')), follow=True, callback='parse_item'),
    )


    def parse_item(self, response):
        hxs = HtmlXPathSelector(response)
        l = PlayGroundLoader(PlayGroundItem(), hxs)
        l.add_value('url', response.url)
        l.add_xpath('title', "//div[@class='downloads-container clearfix']/h1/text()")
        l.add_xpath('download_url', "//div[@class='files-download-holder']/div/a/@href")

        return l.load_item()
</snippet></ROW><ROW><id>16752729</id><snippet>spider.py</snippet></ROW><ROW><id>16752729</id><snippet>scrapy runspider test_scrapy.py -o output.json
</snippet></ROW><ROW><id>16752729</id><snippet>output.json</snippet></ROW><ROW><id>16752830</id><snippet>import re

string_example = '123|4.3|123.54|sdflk|hfghjkkf.ffg..t.s..4..tg..3...654..2.fd'

string_final = re.sub(r'(\d)\.(\d)', r'\1,\2', string_example)
print(string_final)
</snippet></ROW><ROW><id>16752830</id><snippet>digit</snippet></ROW><ROW><id>16752830</id><snippet>.</snippet></ROW><ROW><id>16752830</id><snippet>digit</snippet></ROW><ROW><id>16752830</id><snippet>group 1</snippet></ROW><ROW><id>16752830</id><snippet>,</snippet></ROW><ROW><id>16752830</id><snippet>group 2</snippet></ROW><ROW><id>16752837</id><snippet>{% url %}</snippet></ROW><ROW><id>16752837</id><snippet>views.py</snippet></ROW><ROW><id>16752837</id><snippet>url(r'^neues_thema/', 'home.views.create_question', name="create_question"),
url(r'^neues_thema/(?P&lt;title&gt;\w+)/', 'home.views.question', name="question"),
</snippet></ROW><ROW><id>16752837</id><snippet>from django.core.urlresolvers import reverse
from django.shortcuts import render

def create_question(request):
    if request.method == 'POST':
        title = request.POST['title']
        # some validation of title
        # create new question with title
        return redirect(reverse('question', kwargs={'title': title})


def question(request, title):
    # here smth like: 
    # question = get_object_or_404(Question, title=title)
    return render(request, 'question.html', {'question': question})
</snippet></ROW><ROW><id>16752837</id><snippet>&lt;form action="{% url create_question %}" method="post"&gt;
</snippet></ROW><ROW><id>16752837</id><snippet>neues_thema/(\w+)/</snippet></ROW><ROW><id>16752837</id><snippet>{% url create_question %}</snippet></ROW><ROW><id>16752837</id><snippet>(\w+)</snippet></ROW><ROW><id>16752837</id><snippet>{% url create_question title %}</snippet></ROW><ROW><id>16752837</id><snippet>title</snippet></ROW><ROW><id>16752884</id><snippet>mainloop()</snippet></ROW><ROW><id>16752884</id><snippet>RadioFrequencies.mainloop()
...
mGui.mainloop()
</snippet></ROW><ROW><id>16752884</id><snippet>tk.Tk()</snippet></ROW><ROW><id>16752884</id><snippet>mainloop()</snippet></ROW><ROW><id>16752884</id><snippet>RadioFrequencies.mainloop()
</snippet></ROW><ROW><id>16752884</id><snippet>_tkinter.TclError: can't invoke "listbox" command:  application has been destroyed
</snippet></ROW><ROW><id>16752884</id><snippet>RadioFrequencies.mainloop()
</snippet></ROW><ROW><id>16752884</id><snippet>listbox2 = tk.Listbox(tab12, width=50, height=-1)
</snippet></ROW><ROW><id>16752909</id><snippet>q = 2 * [ 2 * [0] ]
for i in range(2):
   for j in range(2):
       q[i][j] = (1-i) * j
       print(q)
</snippet></ROW><ROW><id>16752909</id><snippet>[[0, 0], [0, 0]]
[[0, 1], [0, 1]]
[[0, 1], [0, 1]]
[[0, 0], [0, 0]]
</snippet></ROW><ROW><id>16752909</id><snippet>q = [ [ 0 for j in range(2) ] for i in range(2) ]
</snippet></ROW><ROW><id>16752909</id><snippet>q = [ [ (1-i) * j for j in range(2) ] for i in range(2) ]
</snippet></ROW><ROW><id>16752995</id><snippet>mv script1.py script1
</snippet></ROW><ROW><id>16752995</id><snippet>ln -s script1.py script1
</snippet></ROW><ROW><id>16752995</id><snippet>/usr/bin</snippet></ROW><ROW><id>16752995</id><snippet>$PATH</snippet></ROW><ROW><id>16752995</id><snippet>sudo ln -s script1.py /usr/bin/script1
</snippet></ROW><ROW><id>16753109</id><snippet>print re.findall(r'^section (\w+):',tgt,flags=re.MULTILINE)[-1]
</snippet></ROW><ROW><id>16753109</id><snippet>import re

tgt='''\
section aaa:
   some values
   value 5
section bbb:
   more values
   value 6
section ccc:
   some values
   value 5
section ddd:
   more values
   value 6'''

pat=re.compile(r'^section (\w+):.*?value (\d+)',flags=re.MULTILINE|re.DOTALL)

print [(m.group(1),m.start(),m.end()) 
          for m in pat.finditer(tgt)
          if m.group(2)=='6']
</snippet></ROW><ROW><id>16753109</id><snippet>[('bbb', 39, 77), ('ddd', 117, 155)]
</snippet></ROW><ROW><id>16753109</id><snippet>tgt='''\
section aaa:
   some values
   value 5
section bbb
   more values
value 6
section ccc:
   some values
   value 5
section ddd:
   more values
   value 6'''

pat=re.compile(r'^section (\w+).*?^\s*value (\d+)',flags=re.MULTILINE|re.DOTALL)

print [(m.group(1),m.start(),m.end()) 
          for m in pat.finditer(tgt)
          if m.group(2)=='6']
</snippet></ROW><ROW><id>16753109</id><snippet>import re

tgt='''\
section aaa:
   some values

section bbb:
   more values
   value 6
section ccc:
   some values
   value 5
section ddd:
   more values
   value 6'''

pat1=re.compile(r'^section (\w+):(.*?)(?=section|\Z)',flags=re.MULTILINE|re.DOTALL)
pat2=re.compile(r'^\s*value (\d+)',flags=re.MULTILINE)

for m in pat1.finditer(tgt):
    m2=re.search(r'^\s*value (\d+)',m.group(2),flags=re.MULTILINE)
    if m2 and m2.group(1)=='6':
        print m.group(1)
</snippet></ROW><ROW><id>16753109</id><snippet>bbb</snippet></ROW><ROW><id>16753109</id><snippet>ddd</snippet></ROW><ROW><id>16753116</id><snippet>temp</snippet></ROW><ROW><id>16753116</id><snippet>current</snippet></ROW><ROW><id>16753116</id><snippet>current.value</snippet></ROW><ROW><id>16753116</id><snippet>from functools import total_ordering

@total_ordering
class cons:
    def __init__(self, head, tail=None):
        self.head = head
        self.tail = tail

    @classmethod
    def fromlist(self, l):
        if l == []:
            return None
        return cons(l[0], cons.fromlist(l[1:]))

    def tolist(self):
        if self.tail == None:
            return [self.head]
        else:
            return [self.head] + self.tail.tolist()

    def flip(self):
        if not self.tail == None:
            tmp = self.head
            self.head = self.tail.head
            self.tail.head = tmp

    def __lt__(self, other):
        if other == None:
            return True
        else: 
            return self.head &lt; other.head
    def __eq__(self, other):
        if other == None:
            return False
        else:
            return self.head == other.head

def llsort(head):
    changed = True
    while changed:
        changed = False
        current = head
        while current != None:
            if current &gt; current.tail:
                current.flip()
                changed = True
            current = current.tail
</snippet></ROW><ROW><id>16753116</id><snippet>__lt__</snippet></ROW><ROW><id>16753116</id><snippet>flip</snippet></ROW><ROW><id>16753116</id><snippet>__lt__</snippet></ROW><ROW><id>16753116</id><snippet>__eq__</snippet></ROW><ROW><id>16753116</id><snippet>class cons:
    def __init__(self, head, tail=None):
        self.head = head
        self.tail = tail

    def flip(self):
        if not self.tail == None:
            tmp = self.head
            self.head = self.tail.head
            self.tail.head = tmp


def llsort(head):
    changed = True
    while changed:
        changed = False
        current = head
        while current.tail != None:
            if current.head &gt; current.tail.head:
                current.flip()
                changed = True
            current = current.tail
</snippet></ROW><ROW><id>16753380</id><snippet>enumerate</snippet></ROW><ROW><id>16753380</id><snippet>with open('genes.csv') as f:
    cread_1 = list(csv.reader(f, delimiter = '\t'))
    sample_1_dict = {i: float(j) for i, j in cread_1}
    sample_1_list = [x for x in sample_1_dict.items()]
    sample_1_values_sorted = sorted(sample_1_list, key=lambda expvalues: expvalues[1])
    sample_1_genes = [i for i, j in sample_1_values_sorted]
    sample_1_values = [j for i, j in sample_1_values_sorted]
    sample_1_graph_raw = [float(j) for i, j in cread_1] 
</snippet></ROW><ROW><id>16753380</id><snippet>list</snippet></ROW><ROW><id>16753380</id><snippet>samples</snippet></ROW><ROW><id>16753380</id><snippet>sample_1_dict</snippet></ROW><ROW><id>16753380</id><snippet>samples = [None] * 6
for k in range(6):
    with open('genes.csv') as f: #but something specific to k
        cread = list(csv.reader(f, delimiter = '\t'))
        samples[k] = {i: float(j) for i, j in cread}
</snippet></ROW><ROW><id>16753380</id><snippet>class BreakIt(Exception): pass
try: 
    count = 1         
    for index, items in enumerate(sample_final_list):
        sample_1_dict_normalized = {}             
        for index, (genes, values) in enumerate(items):
            sample_1_dict_normalized[genes] = values
            count = count + 1
            if count == 29595:
                raise BreakIt
except BreakIt:
    pass
</snippet></ROW><ROW><id>16753380</id><snippet>samples</snippet></ROW><ROW><id>16753380</id><snippet>count</snippet></ROW><ROW><id>16753380</id><snippet>samples</snippet></ROW><ROW><id>16753380</id><snippet>sample[i].list</snippet></ROW><ROW><id>16753444</id><snippet>writerow</snippet></ROW><ROW><id>16753444</id><snippet># new_csv_writer = open file for writing
for record in file1:
    new_csv_writer.writerow([record[0], int(record[1]) * int(record[4])])
</snippet></ROW><ROW><id>16753601</id><snippet>lst = [1, 3, 4, 5, 6, 7, 8]
for i in range(2, len(lst)):
    val = lst[i]
    print(val)
</snippet></ROW><ROW><id>16753601</id><snippet>lst = [1, 3, 4, 5, 6, 7, 8]
for i, val in enumerate(lst):
    if i &lt; 2:
        continue
    print(val)
</snippet></ROW><ROW><id>16753601</id><snippet>for i, val in enumerate(itertools.islice(lst, 2, None)):
    print(i, val) # would begin with 1 3, then 2 4, …
</snippet></ROW><ROW><id>16753601</id><snippet>for i, val in enumerate(lst[2:]):
    print(i, val)
</snippet></ROW><ROW><id>16753669</id><snippet>qthread</snippet></ROW><ROW><id>16753669</id><snippet>import sys
import urllib2

from PyQt4 import QtCore, QtGui


class DownloadThread(QtCore.QThread):
    def __init__(self, url, list_widget):
        QtCore.QThread.__init__(self)
        self.url = url
        self.list_widget = list_widget

    def run(self):
        info = urllib2.urlopen(self.url).info()
        self.list_widget.addItem('%s\n%s' % (self.url, info))


class MainWindow(QtGui.QWidget):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.list_widget = QtGui.QListWidget()
        self.button = QtGui.QPushButton("Start")
        self.button.clicked.connect(self.start_download)
        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.button)
        layout.addWidget(self.list_widget)
        self.setLayout(layout)

    def start_download(self):
        urls = ['http://google.com', 'http://twitter.com', 'http://yandex.ru',
                'http://stackoverflow.com/', 'http://www.youtube.com/']
        self.threads = []
        for url in urls:
            downloader = DownloadThread(url, self.list_widget)
            self.threads.append(downloader)
            downloader.start()

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    window = MainWindow()
    window.resize(640, 480)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>16753812</id><snippet>N = 100000
s = ''.join([ chr(c % 26 + ord('a')) for c in range(N) ])

l = [ (26*i,26*i+3) for i in range(N//26) ]

l.sort(lambda x, y : cmp(x[0], y[0]))

ns = []
i = 0
for (start,end) in l:
    ns.append(s[i:start])
    i = end
ns.append(s[end:])
s = ''.join(ns)
</snippet></ROW><ROW><id>16753859</id><snippet>collection.insert</snippet></ROW><ROW><id>16753859</id><snippet>insert each document in the iterable, sending only a single command to the server
</snippet></ROW><ROW><id>16753859</id><snippet>message</snippet></ROW><ROW><id>16753859</id><snippet>maxMessageSizeBytes</snippet></ROW><ROW><id>16753859</id><snippet>maxBsonObjectSize * 3</snippet></ROW><ROW><id>16753897</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>16753897</id><snippet>api_port</snippet></ROW><ROW><id>16753897</id><snippet>dev_appserver.py --host=192.168.5.92 
                 --admin_host 192.168.5.92 --admin_port 9000 
                 --api_port 7000 .
</snippet></ROW><ROW><id>16753897</id><snippet> api_server.py:153] Starting API server at: http://localhost:7000

 dispatcher.py:164] Starting server "default" running at: http://192.168.5.92:8080

 admin_server.py:117] Starting admin server at: http://192.168.5.92:9000
</snippet></ROW><ROW><id>16753897</id><snippet>devappserver2.py</snippet></ROW><ROW><id>16753897</id><snippet>apis = api_server.APIServer('localhost', options.api_port,
                             configuration.app_id)
</snippet></ROW><ROW><id>16753897</id><snippet>localhost</snippet></ROW><ROW><id>16753897</id><snippet>devappserver2.py</snippet></ROW><ROW><id>16754137</id><snippet>Back in Section 8.7 we mentioned ELink can be used to search for citations of a given paper. Unfortunately this only covers journals indexed for PubMed Central (doing it for all the journals in PubMed would mean a lot more work for the NIH). Let’s try this for the Biopython PDB parser paper, PubMed ID 14630660:

&gt;&gt;&gt; from Bio import Entrez
&gt;&gt;&gt; Entrez.email = "A.N.Other@example.com"
&gt;&gt;&gt; pmid = "14630660"
&gt;&gt;&gt; results = Entrez.read(Entrez.elink(dbfrom="pubmed", db="pmc",
...                                    LinkName="pubmed_pmc_refs", from_uid=pmid))
&gt;&gt;&gt; pmc_ids = [link["Id"] for link in results[0]["LinkSetDb"][0]["Link"]]
&gt;&gt;&gt; pmc_ids
['2744707', '2705363', '2682512', ..., '1190160']
Great - eleven articles. But why hasn’t the Biopython application note been found (PubMed ID 19304878)? Well, as you might have guessed from the variable names, there are not actually PubMed IDs, but PubMed Central IDs. Our application note is the third citing paper in that list, PMCID 2682512.

So, what if (like me) you’d rather get back a list of PubMed IDs? Well we can call ELink again to translate them. This becomes a two step process, so by now you should expect to use the history feature to accomplish it (Section 8.15).

But first, taking the more straightforward approach of making a second (separate) call to ELink:

&gt;&gt;&gt; results2 = Entrez.read(Entrez.elink(dbfrom="pmc", db="pubmed", LinkName="pmc_pubmed",
...                                     from_uid=",".join(pmc_ids)))
&gt;&gt;&gt; pubmed_ids = [link["Id"] for link in results2[0]["LinkSetDb"][0]["Link"]]
&gt;&gt;&gt; pubmed_ids
['19698094', '19450287', '19304878', ..., '15985178']
This time you can immediately spot the Biopython application note as the third hit (PubMed ID 19304878).

Now, let’s do that all again but with the history …TODO.

And finally, don’t forget to include your own email address in the Entrez calls.
</snippet></ROW><ROW><id>16754151</id><snippet>defaultdict</snippet></ROW><ROW><id>16754151</id><snippet>from collections import defaultdict

d=defaultdict(list)
with open("input.txt") as data:
    for line in data:
        line = line.strip().split()
        namelist = d[line[0]]
        try:
            idx = [x[0] for x in namelist].index(line[1])
        except:
            idx = -1
        if len(namelist) and idx &gt;= 0:
            namelist[idx][1].append(line[2])
            namelist[idx][2].append(line[4])
        else:
            namelist.append([line[1], [line[2]], [line[4]], line[3]])

print d
&gt;&gt;&gt; defaultdict(&lt;type 'list'&gt;, 
{'Name2': [
    ['L1', ['04', '19'], ['84', '139'], 'O60'], 
    ['L2', ['32'], ['332'], 'Z91']
], 
'Name1': [
    ['L1', ['11', '13'], ['41', '43'], 'P27'], 
    ['L2', ['85', '07', '68', '17', '92'], ['125', '107', '118', '117', '192'], 'O60']
]})
</snippet></ROW><ROW><id>16754288</id><snippet>Queue.Queue</snippet></ROW><ROW><id>16754288</id><snippet>collections.deque</snippet></ROW><ROW><id>16754288</id><snippet>Queue</snippet></ROW><ROW><id>16754288</id><snippet>collections.deque</snippet></ROW><ROW><id>16754288</id><snippet>deque</snippet></ROW><ROW><id>16754288</id><snippet>Queue</snippet></ROW><ROW><id>16754288</id><snippet>deque.append</snippet></ROW><ROW><id>16754288</id><snippet>Queue.put</snippet></ROW><ROW><id>16754288</id><snippet>deque.popleft</snippet></ROW><ROW><id>16754288</id><snippet>q.get()</snippet></ROW><ROW><id>16754288</id><snippet>appendleft</snippet></ROW><ROW><id>16754288</id><snippet>pop</snippet></ROW><ROW><id>16754288</id><snippet>Queue.empty</snippet></ROW><ROW><id>16754288</id><snippet>deque</snippet></ROW><ROW><id>16754288</id><snippet>deque</snippet></ROW><ROW><id>16754288</id><snippet>&gt;&gt;&gt; import collections, pickle
&gt;&gt;&gt; q = collections.deque(["test"])
&gt;&gt;&gt; pickle.dumps(q)
b'\x80\x03ccollections\ndeque\nq\x00]q\x01X\x04\x00\x00\x00testq\x02a\x85q\x03Rq\x04.'
</snippet></ROW><ROW><id>16754468</id><snippet>0.name</snippet></ROW><ROW><id>16754468</id><snippet>0[name]</snippet></ROW><ROW><id>16754468</id><snippet>get_value()</snippet></ROW><ROW><id>16754468</id><snippet>get_field()</snippet></ROW><ROW><id>16754468</id><snippet>get_value()</snippet></ROW><ROW><id>16754468</id><snippet>from __future__ import print_function

from string import Formatter

class CallFormatter(Formatter):
    try:  # deal with Py 2 &amp; 3 difference
        NUMERICS = (int, long)
    except NameError:
        NUMERICS = int

    def get_value(self, key, args, kwargs):
        if key.endswith('()'):  # call?
            return kwargs[key[:-2]]()
        elif isinstance(key, self.NUMERICS):
            return args[key]
        else:
            return kwargs[key]

if __name__ == '__main__':
    fmt = CallFormatter()

    def cabbages():
        return 'hello'

    d = dict(name='Fred')

    class Thing(object):
        def __init__(self, value):
            self.attr = value
    th = Thing(42)

    print('d[name]:{d[name]}, th.attr:{th.attr}, '
          'cabbages:{cabbages}'.format(**locals()))
    print(fmt.format('d[name]:{d[name]}, th.attr:{th.attr}, '
                     'cabbages:{cabbages}, cabbages():{cabbages()}', 
                     **locals()))
</snippet></ROW><ROW><id>16754468</id><snippet>d[name]:Fred, th.attr:42, cabbages:&lt;function cabbages at 0x00BB05F0&gt;
d[name]:Fred, th.attr:42, cabbages:&lt;function cabbages at 0x00BB05F0&gt;, 
                          cabbages():hello
</snippet></ROW><ROW><id>16754596</id><snippet>\s*(?:\bACTIE|TODO\b) ([^\n\r]*)
</snippet></ROW><ROW><id>16754625</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = '"""!some text'
&gt;&gt;&gt; re.findall(r'"{{3}}{symbol}some\stext'.format(symbol='!'), text)
['"""!some text']
</snippet></ROW><ROW><id>16754625</id><snippet>%</snippet></ROW><ROW><id>16754776</id><snippet>The &lt;variable&gt; is &lt;value&gt;.</snippet></ROW><ROW><id>16754776</id><snippet>import re

def reducer(text):  # Catch statements and add them to a dictionary
    catched = dict()
    for v, k in re.findall(r'The\s(?P&lt;variable&gt;\w+)\sis\s(?P&lt;value&gt;\w+)', text):
        try:
            catched[k].append(v)
        except KeyError:
            catched[k] = [v]
    return catched

def comma_and(ls):  # Create human-like enumeration with words
    output = [ls[0]]
    for i in xrange(1, len(ls)):
        output.append('%s%s' % (' and ' if i == len(ls) - 1 else ', ', ls[i]))
    return ''.join(output)

def rephrase(text):  # Rephrase separated statements into one sentence
    stmnts = reducer(text)
    part1 = str()
    part2 = str()
    for key in stmnts:
        if len(stmnts[key]) &lt;= 1:
            part2 = 'but the {variable} is {value}.'.format(
                variable=stmnts[key][0], value=key)
        else:
            part1 = 'The {variables} are {value}'.format(
                variables=comma_and(stmnts[key]), value=key)
    print part1 + ' ' + part2
</snippet></ROW><ROW><id>16754776</id><snippet>rephraser('The Toyota is red. The Honda is red. The BMW is red. The Mercedes is green.')
</snippet></ROW><ROW><id>16754776</id><snippet># The Toyota, Honda and BMW are red but the Mercedes is green.
</snippet></ROW><ROW><id>16754776</id><snippet>catched</snippet></ROW><ROW><id>16754776</id><snippet>All &lt;type&gt; are &lt;value&gt;.</snippet></ROW><ROW><id>16754996</id><snippet>res_all = []
for res in results:
    low, upp = res.confint().T   # unpack columns 
    res_all.append(numpy.concatenate(([res.llf], res.params, res.tvalues, res.pvalues, 
                   low, upp)))
</snippet></ROW><ROW><id>16755045</id><snippet>except Forum.DoesNotExist or IndexError:
</snippet></ROW><ROW><id>16755045</id><snippet>except (Forum.DoesNotExist or IndexError):
</snippet></ROW><ROW><id>16755045</id><snippet>or</snippet></ROW><ROW><id>16755045</id><snippet>except Forum.DoesNotExist:
</snippet></ROW><ROW><id>16755045</id><snippet>except (Forum.DoesNotExist, IndexError):
</snippet></ROW><ROW><id>16755225</id><snippet>TestCase</snippet></ROW><ROW><id>16755225</id><snippet>with self.assertNumQueries(2):
    x = SomeModel.objects.get(pk=1)
    y = x.some_foreign_key_in_object
</snippet></ROW><ROW><id>16755225</id><snippet>Num queries (expected - actual):
    2 : 5
</snippet></ROW><ROW><id>16755225</id><snippet>DEBUG</snippet></ROW><ROW><id>16755225</id><snippet>True</snippet></ROW><ROW><id>16755225</id><snippet>from django.db import connection

x = SomeModel.objects.get(pk=1)
y = x.some_foreign_key_in_object

print connection.queries
</snippet></ROW><ROW><id>16755225</id><snippet>[
 {'sql': 'SELECT a, b, c, d ... FROM app_some_model', 'time': '0.002'},
 {'sql': 'SELECT j, k, ... FROM app_referenced_model JOIN ... blabla ', 
      'time': '0.004'}
]
</snippet></ROW><ROW><id>16755225</id><snippet>connection.queries</snippet></ROW><ROW><id>16755225</id><snippet>print connection.queries</snippet></ROW><ROW><id>16755382</id><snippet>arrayname</snippet></ROW><ROW><id>16755382</id><snippet>arrayname = []</snippet></ROW><ROW><id>16755382</id><snippet>while m &lt; len(Names):</snippet></ROW><ROW><id>16755436</id><snippet>{# data.html #}
&lt;!-- ... snip ... --&gt;
{% block form %}
&lt;section&gt;
&lt;h1&gt;{{ action }} {{ data_type }}&lt;/h1&gt;
&lt;form action="{{ form_action }}" method="{{ method | d("POST") }}"&gt;
{% render_form(form) %}
&lt;/form&gt;
&lt;/section&gt;
{% endblock form %}
</snippet></ROW><ROW><id>16755436</id><snippet>render_form</snippet></ROW><ROW><id>16755436</id><snippet>@app.route("/books/")
def add_book():
    form = BookForm()
    # ... snip ...
    return render_template("data.html", action="Add", data_type="a book", form=form)

@app.route("/books/&lt;int:book_id&gt;")
def edit_book(book_id):
    book = lookup_book_by_id(book_id)
    form = BookForm(obj=book)
    # ... snip ...
    return render_template("data.html", data_type=book.title, action="Edit", form=form)
</snippet></ROW><ROW><id>16755436</id><snippet>@app.route("/a-resource/")
def add_resource():
    # ... snip ...
    return render_template("data.html", data_type="a resource" ...)

# ... etc. ...
</snippet></ROW><ROW><id>16755470</id><snippet>for idx, (f_in, des) in enumerate(zip(file_list, des_list)):
</snippet></ROW><ROW><id>16755470</id><snippet>idx</snippet></ROW><ROW><id>16755470</id><snippet>enumerate</snippet></ROW><ROW><id>16755470</id><snippet>des</snippet></ROW><ROW><id>16755470</id><snippet>with open(f_in) as des:
</snippet></ROW><ROW><id>16755470</id><snippet>des</snippet></ROW><ROW><id>16755470</id><snippet>zip</snippet></ROW><ROW><id>16755470</id><snippet>for f_in in file_list:
</snippet></ROW><ROW><id>16755470</id><snippet>list(csv.reader(...)</snippet></ROW><ROW><id>16755470</id><snippet>cread</snippet></ROW><ROW><id>16755470</id><snippet>sorted</snippet></ROW><ROW><id>16755470</id><snippet>.items()</snippet></ROW><ROW><id>16755470</id><snippet>i</snippet></ROW><ROW><id>16755470</id><snippet>j</snippet></ROW><ROW><id>16755470</id><snippet>[... for i, j in ...]</snippet></ROW><ROW><id>16755470</id><snippet>sorted</snippet></ROW><ROW><id>16755470</id><snippet>sorted(..., key = lambda v: v[1])
</snippet></ROW><ROW><id>16755470</id><snippet>v[0]</snippet></ROW><ROW><id>16755470</id><snippet>.items()</snippet></ROW><ROW><id>16755470</id><snippet>{i: float(j) for i, j in cread}
</snippet></ROW><ROW><id>16755470</id><snippet>float</snippet></ROW><ROW><id>16755470</id><snippet>{'a': 2.71828, 'b': 3.14159}
</snippet></ROW><ROW><id>16755470</id><snippet>.items()</snippet></ROW><ROW><id>16755470</id><snippet>&gt;&gt;&gt; {'a': 2.71828, 'b': 3.14159}.items()
[('a', 2.71828), ('b', 3.14159)]
</snippet></ROW><ROW><id>16755470</id><snippet>&gt;&gt;&gt; cread = [['a', '2.71828'], ['b', '3.14159']]
&gt;&gt;&gt; [(i, float(j)) for i, j in cread]
[('a', 2.71828), ('b', 3.14159)]
</snippet></ROW><ROW><id>16755470</id><snippet>sorted</snippet></ROW><ROW><id>16755470</id><snippet>&gt;&gt;&gt; cread.append(['c', '0']); print cread
[['a', '2.71828'], ['b', '3.14159'], ['c', '0']]
&gt;&gt;&gt; by_second = sorted([(i, float(j)) for i, j in cread], key = lambda v: v[1])
&gt;&gt;&gt; by_second
[('c', 0.0), ('a', 2.71828), ('b', 3.14159)]
</snippet></ROW><ROW><id>16755470</id><snippet>for path in file_list:
    with open(path) as stream:
        data = list(csv.reader(stream, delimiter = '\t'))
    data = sorted([(i, float(j)) for i, j in data], key = lambda v: v[1])
    sample_genes = [i for i, j in data]
    sample_values = [j for i, j in data]
</snippet></ROW><ROW><id>16755470</id><snippet>idx</snippet></ROW><ROW><id>16755470</id><snippet>des_list</snippet></ROW><ROW><id>16755470</id><snippet>    somedict[path] = (sample_genes, sample_values)
</snippet></ROW><ROW><id>16755470</id><snippet>somedict</snippet></ROW><ROW><id>16755470</id><snippet>for</snippet></ROW><ROW><id>16755528</id><snippet>__call__</snippet></ROW><ROW><id>16755528</id><snippet>__getitem__</snippet></ROW><ROW><id>16755528</id><snippet>np.r_</snippet></ROW><ROW><id>16755528</id><snippet>__getitem__</snippet></ROW><ROW><id>16755528</id><snippet>r_</snippet></ROW><ROW><id>16755528</id><snippet>np.lib.index_tricks.RClass</snippet></ROW><ROW><id>16755528</id><snippet>class RClass:
    def __getitem__(self, item):
        # r_ fancyness
</snippet></ROW><ROW><id>16755528</id><snippet>l</snippet></ROW><ROW><id>16755528</id><snippet>l[:5]
</snippet></ROW><ROW><id>16755528</id><snippet>slice</snippet></ROW><ROW><id>16755528</id><snippet>__getitem__</snippet></ROW><ROW><id>16755528</id><snippet>__call__</snippet></ROW><ROW><id>16755528</id><snippet>l(slice(5))</snippet></ROW><ROW><id>16755528</id><snippet>__call__</snippet></ROW><ROW><id>16755528</id><snippet>__getitem__</snippet></ROW><ROW><id>16755528</id><snippet>my_array[1:3, 2:5]</snippet></ROW><ROW><id>16755528</id><snippet>r_</snippet></ROW><ROW><id>16755531</id><snippet>print("text")</snippet></ROW><ROW><id>16755531</id><snippet>print "text"</snippet></ROW><ROW><id>16755531</id><snippet>raw_input</snippet></ROW><ROW><id>16755531</id><snippet>input</snippet></ROW><ROW><id>16755531</id><snippet>input</snippet></ROW><ROW><id>16755531</id><snippet>raw_input</snippet></ROW><ROW><id>16755531</id><snippet>input</snippet></ROW><ROW><id>16755531</id><snippet>print</snippet></ROW><ROW><id>16755612</id><snippet>from string import punctuation as pnc
tokens = {':)', 'cool', 'happy', 'fun'}
tweets = ['this has been a fun day :)', 'i find python cool! it makes me happy']
for tweet in tweets:
    s = [(word in tokens or word.strip(pnc) in tokens) for word in tweet.split()]
    print(' '.join('1' if t else '0' for t in s))
</snippet></ROW><ROW><id>16755612</id><snippet>0 0 0 0 1 0 1
0 0 0 1 0 0 0 1
</snippet></ROW><ROW><id>16755612</id><snippet>or</snippet></ROW><ROW><id>16755612</id><snippet>:)</snippet></ROW><ROW><id>16755612</id><snippet>cool :), I like it</snippet></ROW><ROW><id>16755643</id><snippet>str.decode</snippet></ROW><ROW><id>16755643</id><snippet>raw_data = 'Adobe\xae'
decoded = raw_data.decode('Windows-1252')
print decoded  # Prints "Adobe®"
</snippet></ROW><ROW><id>16755651</id><snippet>python-config --cflags</snippet></ROW><ROW><id>16755651</id><snippet>python-config --ldflags</snippet></ROW><ROW><id>16755651</id><snippet>python-config --cflags</snippet></ROW><ROW><id>16755651</id><snippet>python-config --ldflags</snippet></ROW><ROW><id>16755651</id><snippet>-I/usr/include/python2.7 -I/usr/include/python2.7 -Wno-unused-result -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2 -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2

-lpthread -ldl -lutil -lm -lpython2.7 -Xlinker -export-dynamic
</snippet></ROW><ROW><id>16755651</id><snippet>-I/usr/include/python3.3m -I/usr/include/python3.3m -Wno-unused-result -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2 -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2

-lpthread -ldl -lutil -lm -lpython3.3m -Xlinker -export-dynamic
</snippet></ROW><ROW><id>16755658</id><snippet>for</snippet></ROW><ROW><id>16755658</id><snippet>break</snippet></ROW><ROW><id>16755658</id><snippet>for</snippet></ROW><ROW><id>16755658</id><snippet>else</snippet></ROW><ROW><id>16755658</id><snippet>for a in range(2):
    print "a = {:d}".format(a)
    for b in range(3, 5):
        print "b = {:d}".format(b)
        if b == 4:
            print "BREAK!"
            break
    else:
        print "Only run if no break in inner loop"
</snippet></ROW><ROW><id>16755658</id><snippet>while</snippet></ROW><ROW><id>16755658</id><snippet>while check_if_still_true():
    do_work()
    if shall_we_break():
        break
else:
    we_exited_because_check_returned_false()
</snippet></ROW><ROW><id>16755696</id><snippet>mgrid()</snippet></ROW><ROW><id>16755696</id><snippet>x_coords = numpy.mgrid[:m, :n][0]+1  # [[1, 1, 1…], [2, 2, 2,…]]. Element 1 is instead: [[1, 2, 3,…], [1, 2, 3,…]]
</snippet></ROW><ROW><id>16755696</id><snippet>numpy.indices(image.shape)</snippet></ROW><ROW><id>16755696</id><snippet>m</snippet></ROW><ROW><id>16755696</id><snippet>n</snippet></ROW><ROW><id>16755696</id><snippet>image</snippet></ROW><ROW><id>16755696</id><snippet>numpy.mgrid[:m:(m+1)*1j, :n:(n+1)*1j]  # m+1 values from 0 to m, n+1 values from 0 to n
</snippet></ROW><ROW><id>16755696</id><snippet>1.</snippet></ROW><ROW><id>16755696</id><snippet>mgrid[]</snippet></ROW><ROW><id>16755696</id><snippet>mgrid[]</snippet></ROW><ROW><id>16755696</id><snippet>numpy.ogrid[]</snippet></ROW><ROW><id>16755944</id><snippet>while 1:
    try:
       question_2 = raw_input("do you like yellow eggs and spam? str((y/n))")
    except (y or n ):
        q_2_answer = 1
        break



  # I respond to input
if question_1 == y:
   print "green eggs str(0_o)"

elif question_1 == n:
   print "yay 1"

else:
   print "error, you beat my code! Well done!"




   # I respond to input
if question_2 == y:
    print "yellow eggs str(0_o)"

elif question_2 == n:
    print "yay 2"

else:
    print "error, you beat my code! not well done! shame!!!!!!!!"



    # answer total question: my input


if q_2_answer + q_1_answer &gt; 2:
    print "oi you did well. thanks!!!!"

elif q_2_answer + q_1_answer &gt; 1:
    print "you only answered one question?"

else:
    print "not funny"
</snippet></ROW><ROW><id>16756019</id><snippet>import pandas as pd
df = pd.DataFrame({"A": [1,2,3,4,np.NaN], 
                   "B":[5, 3, np.NaN, 3, "date"],
                   "C":[np.NaN,2, 1,3, 634]})[["A","B","C"]]
</snippet></ROW><ROW><id>16756019</id><snippet>date</snippet></ROW><ROW><id>16756019</id><snippet>row = df[df.apply(lambda x: (x == "date").any(), axis=1)].values[0] # will be an array
for i, val in enumerate(row):
    if val == "date":
        print row[i + 1]
        break
</snippet></ROW><ROW><id>16756019</id><snippet># gives you column labels, which are `True` if at least one entry has `date` in it
# have to check `kind` otherwise you get an error.
col_result = df.apply(lambda x: x.dtype.kind == "O" and (x == "date").any())

# select only columns where True (this should be one entry) and get their index (for the label)
column = col_result[col_result].index[0]
col_index = df.columns.get_loc(column)

# will be True if it contains date
row_selector = df.icol(col_index) == "date"

print df[row_selector].icol(col_index + 1).values
</snippet></ROW><ROW><id>16756022</id><snippet>&gt;&gt;&gt; items = ['24/2', '24/3', '25/2', '6']
&gt;&gt;&gt; sorted(items, key=lambda s: [int(n) for n in s.split('/')])
['6', '24/2', '24/3', '25/2']
</snippet></ROW><ROW><id>16756067</id><snippet>dropna(how='all')</snippet></ROW><ROW><id>16756067</id><snippet>NaN</snippet></ROW><ROW><id>16756067</id><snippet>''</snippet></ROW><ROW><id>16756067</id><snippet>None</snippet></ROW><ROW><id>16756067</id><snippet>np.NaN</snippet></ROW><ROW><id>16756067</id><snippet>0</snippet></ROW><ROW><id>16756067</id><snippet>0</snippet></ROW><ROW><id>16756067</id><snippet>NaN</snippet></ROW><ROW><id>16756067</id><snippet>indexer = df.fillna(False).astype(bool)
drop_columns = indexer.sum(0) == 0
keep_rows = indexer.sum(1) != 0

new_df = df.drop(df.columns[drop_columns], axis=1)[keep_rows]
</snippet></ROW><ROW><id>16756067</id><snippet>applymap</snippet></ROW><ROW><id>16756067</id><snippet>def is_blank(x):
    return x is None or pd.isnull(x) or bool(str(x).strip())

indexer = df.applymap(is_blank)
</snippet></ROW><ROW><id>16756067</id><snippet>''</snippet></ROW><ROW><id>16756067</id><snippet>na_values</snippet></ROW><ROW><id>16756067</id><snippet>fillna()</snippet></ROW><ROW><id>16756067</id><snippet>astype()</snippet></ROW><ROW><id>16756067</id><snippet>fillna()</snippet></ROW><ROW><id>16756067</id><snippet>NA</snippet></ROW><ROW><id>16756067</id><snippet>bool(float('nan'))</snippet></ROW><ROW><id>16756067</id><snippet>astype</snippet></ROW><ROW><id>16756067</id><snippet>astype(bool)</snippet></ROW><ROW><id>16756067</id><snippet>True</snippet></ROW><ROW><id>16756067</id><snippet>False</snippet></ROW><ROW><id>16756067</id><snippet>1</snippet></ROW><ROW><id>16756067</id><snippet>0</snippet></ROW><ROW><id>16756067</id><snippet>True</snippet></ROW><ROW><id>16756139</id><snippet>-vo gl
</snippet></ROW><ROW><id>16756139</id><snippet>cmd = string.split("mplayer -slave -wid %d -input file=%s" % \
        (self.draw.window.xid, self.fifo))
</snippet></ROW><ROW><id>16756139</id><snippet>cmd = string.split("mplayer -slave -vo gl -wid %d -input file=%s" % \
        (self.draw.window.xid, self.fifo))
</snippet></ROW><ROW><id>16756180</id><snippet>if test1: if test2: print x
else:
    print y
</snippet></ROW><ROW><id>16756192</id><snippet>obj</snippet></ROW><ROW><id>16756192</id><snippet>__getattr__</snippet></ROW><ROW><id>16756192</id><snippet>__getitem__</snippet></ROW><ROW><id>16756192</id><snippet>Form</snippet></ROW><ROW><id>16756192</id><snippet>**</snippet></ROW><ROW><id>16756192</id><snippet>form = CompanyForm(**company)
</snippet></ROW><ROW><id>16756209</id><snippet>AxesSubplot</snippet></ROW><ROW><id>16756209</id><snippet>Axes</snippet></ROW><ROW><id>16756209</id><snippet>set_xticklabels()</snippet></ROW><ROW><id>16756209</id><snippet>xticks(ticks, labels)</snippet></ROW><ROW><id>16756209</id><snippet>ax.set_xticks(ticks)</snippet></ROW><ROW><id>16756209</id><snippet>ax.set_xticklabels(labels)</snippet></ROW><ROW><id>16756209</id><snippet>ax</snippet></ROW><ROW><id>16756209</id><snippet>Axes</snippet></ROW><ROW><id>16756209</id><snippet>ticks = labels = [650, 700]
plt.figure()
loansmin = pd.read_csv('../datasets/loanf.csv')
p=loansmin.boxplot('Interest.Rate','FICO.Score')
p.set_xticks(ticks)
p.set_xticklabels(labels)
</snippet></ROW><ROW><id>16756209</id><snippet>set_xlim</snippet></ROW><ROW><id>16756209</id><snippet>set_ylim</snippet></ROW><ROW><id>16756209</id><snippet>xlim()</snippet></ROW><ROW><id>16756209</id><snippet>ylim()</snippet></ROW><ROW><id>16756209</id><snippet>plt</snippet></ROW><ROW><id>16756213</id><snippet>rd.py</snippet></ROW><ROW><id>16756213</id><snippet>:w</snippet></ROW><ROW><id>16756213</id><snippet>!python rd.py</snippet></ROW><ROW><id>16756213</id><snippet>$ sudo vim /home/debian/rd.py</snippet></ROW><ROW><id>16756213</id><snippet>rd.py</snippet></ROW><ROW><id>16756316</id><snippet>C-u M-x run-python</snippet></ROW><ROW><id>16756316</id><snippet>(run-python "/usr/bin/python3")</snippet></ROW><ROW><id>16756627</id><snippet>mydict = {[1, 2]: '12'}</snippet></ROW><ROW><id>16756627</id><snippet>print mydict[[1, 2]]</snippet></ROW><ROW><id>16756627</id><snippet>KeyError</snippet></ROW><ROW><id>16756627</id><snippet>[1, 2]</snippet></ROW><ROW><id>16756627</id><snippet>==</snippet></ROW><ROW><id>16756627</id><snippet>is</snippet></ROW><ROW><id>16756662</id><snippet>Login()</snippet></ROW><ROW><id>16756662</id><snippet>EOF</snippet></ROW><ROW><id>16756662</id><snippet>client</snippet></ROW><ROW><id>16756662</id><snippet>Post()</snippet></ROW><ROW><id>16756662</id><snippet>python &lt;&lt; EOF
import vim, weibo
def Login():
    appkey = 'xxx'
    appsecret = 'xxxxx'
    callback_url = 'xxxxxxxx'
    acs_token = 'xxxxx'
    expr_in = 'xxxx'
    client = weibo.APIClient(app_key=appkey, app_secret=appsecret,\
             redirect_uri=callback_url)
    client.set_access_token(acs_token, expr_in)
    del vim.current.buffer[:]  
    return client
EOF

function! Post()  
python &lt;&lt; EOF
try: 
    client = Login()
    client.post.statuses__update(status="hello")
except Exception, e:
    print e
EOF
endfunction
</snippet></ROW><ROW><id>16756662</id><snippet>Login()</snippet></ROW><ROW><id>16756662</id><snippet>EOF</snippet></ROW><ROW><id>16756662</id><snippet>python &lt;&lt; EOF
</snippet></ROW><ROW><id>16756662</id><snippet>:h python-commands</snippet></ROW><ROW><id>16756662</id><snippet>:[range]py[thon] &lt;&lt; {endmarker}
{script}
{endmarker}
            Execute Python script {script}.

{endmarker} must NOT be preceded by any white space.  If {endmarker} is
omitted from after the "&lt;&lt;", a dot '.' must be used after {script}, like
for the |:append| and |:insert| commands.
This form of the |:python| command is mainly useful for including python code
in Vim scripts.
</snippet></ROW><ROW><id>16756662</id><snippet>{endmarker}</snippet></ROW><ROW><id>16756662</id><snippet>EOF</snippet></ROW><ROW><id>16756662</id><snippet>EOF</snippet></ROW><ROW><id>16756662</id><snippet>vim.command("let obj = Login()")
</snippet></ROW><ROW><id>16756946</id><snippet>def doIt():

    try:
        return 1 / 0
    except:
        pass

    try:
        return 1 / (1 - 1)
    except:
        pass

    try:
        return int("i am not an int")
    except:
        pass

c = doIt()
</snippet></ROW><ROW><id>16757004</id><snippet>x = y[:]
</snippet></ROW><ROW><id>16757004</id><snippet>copy</snippet></ROW><ROW><id>16757004</id><snippet>import copy
x = copy.copy(y)
</snippet></ROW><ROW><id>16757004</id><snippet>y</snippet></ROW><ROW><id>16757065</id><snippet>from django import forms
class RelationForm(forms.ModelForm):
    parent = forms.ChoiceField(required=False,
                              choices=Relation.objects.values_list('id', 'name'))
    particle = forms.ChoiceField(required=False,
                              choices=Particle.objects.values_list('id', 'content'))
    media = forms.ChoiceField(required=False,
                              choices=Media.objects.values_list('id', 'name'))

    class Meta:
        model = Relation 
</snippet></ROW><ROW><id>16757065</id><snippet>from django.contrib import admin
class RelationAdmin(admin.ModelAdmin):
    form = RelationForm
    model = Relation
</snippet></ROW><ROW><id>16757087</id><snippet>L(h,Y) = -Y*log(h) - (1-Y)*log(1-h)
</snippet></ROW><ROW><id>16757087</id><snippet>L(h,Y) = -sum(Y*log(h))
</snippet></ROW><ROW><id>16757087</id><snippet>delta = h - Y
</snippet></ROW><ROW><id>16757087</id><snippet>grad = dot(delta, A_in)
</snippet></ROW><ROW><id>16757087</id><snippet>delta = (h - Y) * fprime(Z_l2)
</snippet></ROW><ROW><id>16757087</id><snippet>Test1
Epochs: 30
Hidden Size: 300 
Learn Rate: 0.001
Lambda: 0.001
Train Method: RMSPROP with decrements=0.5 and increments=1.3 
Train Error: 6.1%
Test Error: 6.9%

Test2
Epochs: 30
Hidden Size: 300 
Learn Rate: 0.001
Lambda: 0.000002
Train Method: RMSPROP with decrements=0.5 and increments=1.3 
Train Error: 4.5%
Test Error: 5.7%
</snippet></ROW><ROW><id>16757355</id><snippet>&gt;&gt;&gt; a[:-(len(a)+1)//2:-1]
'8765'
&gt;&gt;&gt; b[:-(len(b)+1)//2:-1]
'9876'
</snippet></ROW><ROW><id>16757434</id><snippet>is</snippet></ROW><ROW><id>16757434</id><snippet>&gt;&gt;&gt; x='aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
&gt;&gt;&gt; y='aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
&gt;&gt;&gt; x is y
True
</snippet></ROW><ROW><id>16757434</id><snippet>&gt;&gt;&gt; x='`!@#$%^&amp;*() \][=-. &gt;:"?&lt;a'; y='`!@#$%^&amp;*() \][=-. &gt;:"?&lt;a';
&gt;&gt;&gt; z='`!@#$%^&amp;*() \][=-. &gt;:"?&lt;a';
&gt;&gt;&gt; x is y
True 
&gt;&gt;&gt; x is z
False 
</snippet></ROW><ROW><id>16757434</id><snippet>x='`!@#$%^&amp;*() \][=-. &gt;:"?&lt;a';
y='`!@#$%^&amp;*() \][=-. &gt;:"?&lt;a';
z=(lambda : '`!@#$%^&amp;*() \][=-. &gt;:"?&lt;a')()
print(x is y)
print(x is z)
</snippet></ROW><ROW><id>16757434</id><snippet>True</snippet></ROW><ROW><id>16757434</id><snippet>False</snippet></ROW><ROW><id>16757434</id><snippet>&gt;&gt;&gt; 'a'*10+'a'*10 is 'a'*20
True
&gt;&gt;&gt; 'a'*21 is 'a'*21
False
&gt;&gt;&gt; 'aaaaaaaaaaaaaaaaaaaaa' is 'aaaaaaaa' + 'aaaaaaaaaaaaa'
False
&gt;&gt;&gt; t=2; 'a'*t is 'aa'
False
&gt;&gt;&gt; 'a'.__add__('a') is 'aa'
False
&gt;&gt;&gt; x='a' ; x+='a'; x is 'aa'
False
</snippet></ROW><ROW><id>16757434</id><snippet>&gt;&gt;&gt; chr(0x20) is ' '
True
</snippet></ROW><ROW><id>16757478</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; d1 = {'a':1, 'b':3}
&gt;&gt;&gt; d2 = {'a':5, 'd':5}
&gt;&gt;&gt; d3 = {'c':2, 'f':1}
&gt;&gt;&gt; Counter(d1) | Counter(d2) | Counter(d3)
Counter({'a': 5, 'd': 5, 'b': 3, 'c': 2, 'f': 1})
</snippet></ROW><ROW><id>16757478</id><snippet>collections.Counter</snippet></ROW><ROW><id>16757478</id><snippet>&gt;&gt;&gt; from collections import Counter, OrderedDict
&gt;&gt;&gt; OrderedDict(sorted((Counter(d1) | Counter(d2) | Counter(d3)).items()))
OrderedDict([('a', 5), ('b', 3), ('c', 2), ('d', 5), ('f', 1)])
</snippet></ROW><ROW><id>16757478</id><snippet>reduce</snippet></ROW><ROW><id>16757478</id><snippet>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; from operator import or_
&gt;&gt;&gt; reduce(or_, map(Counter, (d1, d2, d3)))
Counter({'a': 5, 'd': 5, 'b': 3, 'c': 2, 'f': 1})
</snippet></ROW><ROW><id>16757497</id><snippet>itertools.product</snippet></ROW><ROW><id>16757497</id><snippet>In [26]: for i in itertools.product(['4', '7'], repeat=2):
   ....:     print int(''.join(i))
   ....:
44
47
74
77
</snippet></ROW><ROW><id>16757497</id><snippet>repeat</snippet></ROW><ROW><id>16757497</id><snippet>n</snippet></ROW><ROW><id>16757834</id><snippet>lines = 4
cols  = 4
a = [[['H',' '] for j in range(cols)] for i in range(lines)]
</snippet></ROW><ROW><id>16757838</id><snippet>timedelta</snippet></ROW><ROW><id>16757838</id><snippet>.total_seconds()</snippet></ROW><ROW><id>16757838</id><snippet>&gt;&gt;&gt; from datetime import timedelta
&gt;&gt;&gt; td1 = timedelta(1)
&gt;&gt;&gt; td2 = timedelta(2)
&gt;&gt;&gt; td1.total_seconds() / td2.total_seconds() # should give me 0.5
0.5
&gt;&gt;&gt; td2 = timedelta(days=4, minutes=50)
&gt;&gt;&gt; td1.total_seconds() / td2.total_seconds()
0.24784853700516352
</snippet></ROW><ROW><id>16757904</id><snippet>eval</snippet></ROW><ROW><id>16757904</id><snippet>(x+2)(4)</snippet></ROW><ROW><id>16757904</id><snippet>6</snippet></ROW><ROW><id>16757904</id><snippet>myfun = lambda _: _+2; fun(4)</snippet></ROW><ROW><id>16757904</id><snippet>x+2</snippet></ROW><ROW><id>16757904</id><snippet>Add(Symbol('x')+Integer(2))</snippet></ROW><ROW><id>16757904</id><snippet>x</snippet></ROW><ROW><id>16757904</id><snippet>(x+2).subs(x,y)</snippet></ROW><ROW><id>16757904</id><snippet>Symbol('x')</snippet></ROW><ROW><id>16757904</id><snippet>(x+2)(4)</snippet></ROW><ROW><id>16757904</id><snippet>blah = Symbol('random_string'); (blah+2)(4)</snippet></ROW><ROW><id>16757904</id><snippet>var</snippet></ROW><ROW><id>16757904</id><snippet>Symbol</snippet></ROW><ROW><id>16757904</id><snippet>Symbol('x')</snippet></ROW><ROW><id>16757904</id><snippet>x+2</snippet></ROW><ROW><id>16757904</id><snippet>Expr</snippet></ROW><ROW><id>16757904</id><snippet>D</snippet></ROW><ROW><id>16757904</id><snippet>&gt;&gt;&gt; op = g(y)*D # where g is Function and y is Symbol
&gt;&gt;&gt; op(f(x))
g(y)*f(x).diff(x)
</snippet></ROW><ROW><id>16757904</id><snippet>Mul(g(y), D)</snippet></ROW><ROW><id>16757904</id><snippet>rc</snippet></ROW><ROW><id>16757904</id><snippet>(x+2)(4)</snippet></ROW><ROW><id>16758017</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>16758041</id><snippet>a[2:4:-1]</snippet></ROW><ROW><id>16758041</id><snippet>2</snippet></ROW><ROW><id>16758041</id><snippet>4</snippet></ROW><ROW><id>16758109</id><snippet>x = a[:]</snippet></ROW><ROW><id>16758109</id><snippet>x</snippet></ROW><ROW><id>16758109</id><snippet>a</snippet></ROW><ROW><id>16758109</id><snippet>a[:] = x</snippet></ROW><ROW><id>16758109</id><snippet>a</snippet></ROW><ROW><id>16758109</id><snippet>x</snippet></ROW><ROW><id>16758198</id><snippet>import pandas as pd
pd.pivot_table(df, values=['open', 'close'], rows=df.index, cols='token')
</snippet></ROW><ROW><id>16758198</id><snippet>              open           close
              AAPL    GOOG    AAPL    GOOG
2013-01-02  553.82  719.42  549.03  723.25
2013-01-03  547.88  724.93  542.10  723.67
</snippet></ROW><ROW><id>16758328</id><snippet>os.chdir('C://Users/Alex/')
subprocess.call(['ffmpeg', '-i', 'picture%d0.png', 'output.avi'])
subprocess.call(['ffmpeg', '-i', 'output.avi', '-t', '5', 'out.gif'])
</snippet></ROW><ROW><id>16758357</id><snippet>            print(i)
            #pylab.ion()
            pylab.scatter( x, y, c=(j/nbodies,j/nbodies,j/nbodies) )
            pylab.axis([-400, 400, -400, 400])
            #pylab.draw()
            pylab.savefig('picture'+str(i))

os.chdir('C://Users/Alex')
subprocess.call(['ffmpeg', '-i', 'picture%d0.png', 'output.avi'])
subprocess.call(['ffmpeg', '-i', 'output.avi', '-t', '5', 'out.gif'])
</snippet></ROW><ROW><id>16758370</id><snippet>&gt;&gt;&gt; nums = [1,2,3,4,5,6,7,8,9,0]
&gt;&gt;&gt; exclude = set(range(4, 8))
&gt;&gt;&gt; [n for n in nums if n not in exclude]
[1, 2, 3, 8, 9, 0]
</snippet></ROW><ROW><id>16758370</id><snippet>&gt;&gt;&gt; exclude = set(range(4, 8) + [1] + range(0, 2))
&gt;&gt;&gt; [n for n in nums if n not in exclude]
[2, 3, 8, 9]
</snippet></ROW><ROW><id>16758456</id><snippet>__getitem__</snippet></ROW><ROW><id>16758456</id><snippet>[...]</snippet></ROW><ROW><id>16758456</id><snippet>r_</snippet></ROW><ROW><id>16758456</id><snippet>np.r_[tuple(L)]
</snippet></ROW><ROW><id>16758456</id><snippet>r_</snippet></ROW><ROW><id>16758529</id><snippet>&gt;&gt;&gt; (1.0,) * 4
(1.0, 1.0, 1.0, 1.0)
</snippet></ROW><ROW><id>16758529</id><snippet>s * n, n * s</snippet></ROW><ROW><id>16758529</id><snippet>n</snippet></ROW><ROW><id>16758529</id><snippet>s</snippet></ROW><ROW><id>16758529</id><snippet>&gt;&gt;&gt; lst = []
&gt;&gt;&gt; tup = (lst,) * 4
&gt;&gt;&gt; tup[0] is lst
True
&gt;&gt;&gt; all(i is lst for i in tup)
True
</snippet></ROW><ROW><id>16758596</id><snippet>f1 = open ("inFile","r") # open input file for reading

with open('out.csv', 'wb') as f: # output csv file
    writer = csv.writer(f)
    with open('in.csv','r') as csvfile: # input csv file
        reader = csv.reader(csvfile, delimiter=',')
        for row in reader:  
            row[7] = f1.readline() # edit the 8th column 
            writer.writerow(row)
f1.close()   
</snippet></ROW><ROW><id>16758643</id><snippet>money</snippet></ROW><ROW><id>16758643</id><snippet>str()</snippet></ROW><ROW><id>16758643</id><snippet>print("You Now Have $" + str(money))
</snippet></ROW><ROW><id>16758643</id><snippet>money - 100</snippet></ROW><ROW><id>16758643</id><snippet>500 - 100</snippet></ROW><ROW><id>16758643</id><snippet>400</snippet></ROW><ROW><id>16758643</id><snippet>money</snippet></ROW><ROW><id>16758643</id><snippet>400</snippet></ROW><ROW><id>16758643</id><snippet>money -= 100
</snippet></ROW><ROW><id>16758643</id><snippet>money = money - 100
</snippet></ROW><ROW><id>16758646</id><snippet>from collections import Counter
strings = ["bla1okay", "okay1243bla", "blaokay", "bla12okay", "okaybla"]

def substrings(s, minlength=3):
    """Finds all possible unique substrings of s, given a minimum length.

    &gt;&gt;&gt; substrings("12345")
    {'1234', '234', '345', '12345', '123', '2345'}
    &gt;&gt;&gt; substrings("123123")
    {'2312', '123123', '12312', '123', '23123', '1231', '231', '3123', '312'}
    &gt;&gt;&gt; substrings("aaaaa")
    {'aaaaa', 'aaaa', 'aaa'}
    """
    maxsize = current = len(s)
    result = []
    while current &gt;= minlength:
        result.extend([s[start:start+current] 
                       for start in range(maxsize-current+1)])
                                  # range(5) is [0,1,2,3,4]
        current -= 1
    return set(result) # set() removes duplicates

def all_substrings(strings, minlength=3):
    """Returns the union of all the sets of substrings of a list of strings.

    &gt;&gt;&gt; all_substrings(["abcd", "1234"])
    {'123', 'abc', 'abcd', '1234', 'bcd', '234'}
    &gt;&gt;&gt; all_substrings(["abcd", "bcde"])
    {'abc', 'bcd', 'cde', 'abcd', 'bcde'}
    """
    result = set()
    for s in strings:
        result |= substrings(s, minlength)
        # "|=" is the set union operator
    return result

def count(strings, minlength=3):
    """Counts the occurrence of each substring within the provided list of strings,
    given a minimum length for each substring.

    &gt;&gt;&gt; count(["abcd", "bcde"])
    Counter({'bcd': 2, 'bcde': 1, 'abc': 1, 'abcd': 1, 'cde': 1})
    """
    substrings = all_substrings(strings, minlength)
    counts = Counter()
    for substring in substrings:       # Check each substring
         for string in strings:        # against each of the original strings
             if substring in string:   # to see whether it is contained there
                 counts[substring] += 1
    return counts

def prune(counts, mincount=4):
    """Returns only the longest substrings whose count is &gt;= mincount.
    First, all the substrings with a count &lt; mincount are eliminated.
    Then, only those that aren't substrings of a longer string are kept.
    &gt;&gt;&gt; prune(Counter({'bla': 5, 'kay': 5, 'oka': 5, 'okay': 5, 'la1': 2, 'bla1': 2}))
    [('okay', 5), ('bla', 5)]
    """
    # Throw out all counts &lt; mincount. Sort result by length of the substrings.
    candidates = sorted(((s,c) for s,c in counts.items() if c &gt;= mincount), 
                        key=lambda l: len(l[0]), reverse=True) # descending sort
    result = []
    seenstrings = set()      # Set of strings already in our result
    # (we could also look directly in the result, but set lookup is faster)
    for item in candidates:
        s = item[0]          # item[0] contains the substring
        # Make sure that s is not already in our result list
        if not any(s in seen for seen in seenstrings): 
            result.append(item)
            seenstrings.add(s)
    return result

counts = count(strings)
print(prune(counts))
</snippet></ROW><ROW><id>16758646</id><snippet>[('okay', 5), ('bla', 5)]
</snippet></ROW><ROW><id>16758782</id><snippet>text_content</snippet></ROW><ROW><id>16758782</id><snippet>import lxml.html as LH

html = '''&lt;h3&gt;
&lt;a href="article.jsp?tp=&amp;arnumber=16"&gt;
Granular computing based
&lt;span class="snippet"&gt;data&lt;/span&gt;
&lt;span class="snippet"&gt;mining&lt;/span&gt;
in the views of rough set and fuzzy set
&lt;/a&gt;
&lt;/h3&gt;'''

root = LH.fromstring(html)
for elt in root.xpath('//a'):
    print(elt.text_content())
</snippet></ROW><ROW><id>16758782</id><snippet>Granular computing based
data
mining
in the views of rough set and fuzzy set
</snippet></ROW><ROW><id>16758782</id><snippet>print(' '.join(elt.text_content().split()))
</snippet></ROW><ROW><id>16758782</id><snippet>Granular computing based data mining in the views of rough set and fuzzy set
</snippet></ROW><ROW><id>16758782</id><snippet>print(' '.join([elt.strip() for elt in root.xpath('//a/descendant-or-self::text()')]))
</snippet></ROW><ROW><id>16758782</id><snippet>Granular computing based data  mining in the views of rough set and fuzzy set
</snippet></ROW><ROW><id>16758782</id><snippet>data</snippet></ROW><ROW><id>16758782</id><snippet>mining</snippet></ROW><ROW><id>16758782</id><snippet>'//a/descendant-or-self::text()'</snippet></ROW><ROW><id>16758782</id><snippet>"//a/child::text() | //a/span/child::text()"</snippet></ROW><ROW><id>16758872</id><snippet>REPEAT
    ...
UNTIL cond
</snippet></ROW><ROW><id>16758872</id><snippet>while True:
    ...
    if cond:
        break
</snippet></ROW><ROW><id>16759080</id><snippet>__main__</snippet></ROW><ROW><id>16759080</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>16759080</id><snippet>from main_module import print_mode</snippet></ROW><ROW><id>16759080</id><snippet>main_module</snippet></ROW><ROW><id>16759080</id><snippet>main_module</snippet></ROW><ROW><id>16759080</id><snippet>main_module.py</snippet></ROW><ROW><id>16759080</id><snippet>mode = 1</snippet></ROW><ROW><id>16759080</id><snippet>mode = 2</snippet></ROW><ROW><id>16759080</id><snippet>__main__</snippet></ROW><ROW><id>16759080</id><snippet>second_module</snippet></ROW><ROW><id>16759080</id><snippet>main_module</snippet></ROW><ROW><id>16759080</id><snippet>__main__.mode == 2</snippet></ROW><ROW><id>16759080</id><snippet>main_module.mode == 1</snippet></ROW><ROW><id>16759080</id><snippet>second_module.print_mode is main_module.print_mode</snippet></ROW><ROW><id>16759080</id><snippet>print_mode</snippet></ROW><ROW><id>16759080</id><snippet>second_module</snippet></ROW><ROW><id>16759080</id><snippet>main_module.mode</snippet></ROW><ROW><id>16759080</id><snippet>__main__</snippet></ROW><ROW><id>16759080</id><snippet>main()</snippet></ROW><ROW><id>16759080</id><snippet>main_module.py</snippet></ROW><ROW><id>16759080</id><snippet>main_module</snippet></ROW><ROW><id>16759080</id><snippet>main_module.main()</snippet></ROW><ROW><id>16759089</id><snippet>s1 = "Brendon, Melissa, Jason, , McGuirk"
s2 = "brandon, melissa, jxz, paula, coach"

print [a or b for a, b in zip(s1.split(', '), s2.split(', '))]
</snippet></ROW><ROW><id>16759089</id><snippet>import re
from itertools import izip_longest, ifilter, imap

s1 = "Brendon, Melissa, Jason, , McGuirk"
s2 = "brandon, melissa, jxz, paula, coach"


def take_first_not_empty(*args):
    splitter = re.compile(r'\s*?,\s*').split
    words = imap(splitter, args)
    return [next(ifilter(None, vals), '') for vals in izip_longest(*words, fillvalue='')]
</snippet></ROW><ROW><id>16759205</id><snippet>&gt;&gt;&gt; sld_list = re.findall("^.*SLD[0-9]*?=(.*?)$", enom, re.M)
&gt;&gt;&gt; tld_list = re.findall("^.*TLD[0-9]*?=(.*?)$", enom, re.M)
&gt;&gt;&gt; map(lambda x: x[0] + '.' + x[1], zip(sld_list, tld_list))
['domain1.com', 'domain2.org', 'domain3.co.uk', 'domain4.net']
</snippet></ROW><ROW><id>16759438</id><snippet>dashboard.css</snippet></ROW><ROW><id>16759438</id><snippet># template file
{% load staticfiles %}
&lt;link media="all" rel="stylesheet" type="text/css" href="{% static "css/dashboard.css" %}"/&gt;
</snippet></ROW><ROW><id>16759610</id><snippet>subprocess.py</snippet></ROW><ROW><id>16759610</id><snippet>GUI2exe.py</snippet></ROW><ROW><id>16759610</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.__file__
</snippet></ROW><ROW><id>16759610</id><snippet>'C:\Python27\lib\subprocess.pyc'</snippet></ROW><ROW><id>16759610</id><snippet>subprocess.py</snippet></ROW></DATA>