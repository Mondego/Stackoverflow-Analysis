<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>20133681</id><snippet>sin</snippet></ROW><ROW><id>20133681</id><snippet>def ct_dynamic(r, alpha):
    """alpha: the n-2 values between [0,\pi) and last one between [0,2\pi)
    """
    x = np.zeros(len(alpha) + 1)
    s = 1
    for e, a in enumerate(alpha):
        x[e] = s*np.cos(a)
        s *= np.sin(a)
    x[len(alpha)] = s
    return x*r
</snippet></ROW><ROW><id>20133681</id><snippet>def ct(r, arr):
    a = np.concatenate((np.array([2*np.pi]), arr))
    si = np.sin(a)
    si[0] = 1
    si = np.cumprod(si)
    co = np.cos(a)
    co = np.roll(co, -1)
    return si*co*r

&gt;&gt;&gt; n = 10
&gt;&gt;&gt; c = np.random.random_sample(n)*np.pi
&gt;&gt;&gt; all(ct(1,c) == ct_dynamic(1,c))
True

&gt;&gt;&gt; timeit.timeit('from __main__ import coord_transform_n as f, c; f(2.4,c)', number=10000)
2.213547945022583

&gt;&gt;&gt; timeit.timeit('from __main__ import ct_dynamic as f, c; f(2.4,c)', number=10000)
0.9227950572967529

&gt;&gt;&gt; timeit.timeit('from __main__ import ct as f, c; f(2.4,c)', number=10000)
0.5197498798370361
</snippet></ROW><ROW><id>20133763</id><snippet>import networkx as nx
import numpy as np
import matplotlib.pyplot as plt

G = nx.DiGraph()
G.add_edges_from(
    [('A', 'B'), ('A', 'C'), ('D', 'B'), ('E', 'C'), ('E', 'F'),
     ('B', 'H'), ('B', 'G'), ('B', 'F'), ('C', 'G')])

val_map = {'A': 1.0,
           'D': 0.5714285714285714,
           'H': 0.0}

values = [val_map.get(node, 0.25) for node in G.nodes()]

# Specify the edges you want here
red_edges = [('A', 'C'), ('E', 'C')]
edge_colours = ['black' if not edge in red_edges else 'red'
                for edge in G.edges()]
black_edges = [edge for edge in G.edges() if edge not in red_edges]

# Need to create a layout when doing
# separate calls to draw nodes and edges
pos = nx.spring_layout(G)
nx.draw_networkx_nodes(G, pos, cmap=plt.get_cmap('jet'), node_color = values)
nx.draw_networkx_edges(G, pos, edgelist=red_edges, edge_color='r', arrows=True)
nx.draw_networkx_edges(G, pos, edgelist=black_edges, arrows=False)
plt.show()
</snippet></ROW><ROW><id>20133808</id><snippet>setattr()</snippet></ROW><ROW><id>20133808</id><snippet>__getattr__()</snippet></ROW><ROW><id>20133808</id><snippet>class Test:
    def __init__(self):
        self.matrix_names = ['F', 'B', 'H', 'Q', 'R', 'x', 'P']

    def __matrix_read(self, name):
        return (read(".matrix/%s.csv"%filename))

    def __getattr__(self, name):
        if name in self.matrix_names:
            return self.__matrix_read(name)
</snippet></ROW><ROW><id>20133808</id><snippet>class Test:
    # note that this is only called if the attr does not exist
    def __getattr__(self, name):
        try:
            with open(".matrix/{0}.csv".format(name)) as f:
                return f.read()
        except IOError:
            raise AttributeError("{0} does not exist".format(name))
</snippet></ROW><ROW><id>20133808</id><snippet>IOError</snippet></ROW><ROW><id>20133808</id><snippet>FileNotFoundError</snippet></ROW><ROW><id>20133964</id><snippet>color = self.data[x][y]
</snippet></ROW><ROW><id>20133964</id><snippet>color = self.data[y][x]
</snippet></ROW><ROW><id>20133964</id><snippet>data</snippet></ROW><ROW><id>20133964</id><snippet>self.data[y, x]</snippet></ROW><ROW><id>20133964</id><snippet>for row in range(self.height):
    for col in range(self.width):
        color = self.data[row][col]
        color = int(Utils.translate_range(color, self.range_min, self.range_max, 0, 255))
        putpixel((col, row), (color, color, color))
</snippet></ROW><ROW><id>20133964</id><snippet>imshow</snippet></ROW><ROW><id>20134069</id><snippet>Thread</snippet></ROW><ROW><id>20134069</id><snippet>args</snippet></ROW><ROW><id>20134069</id><snippet>longfunction(a, b)</snippet></ROW><ROW><id>20134069</id><snippet>queue.extend</snippet></ROW><ROW><id>20134069</id><snippet>def</snippet></ROW><ROW><id>20134069</id><snippet>lambda</snippet></ROW><ROW><id>20134069</id><snippet>Thread(target=lambda: queue.extend(longfunction(a, b)).start()
</snippet></ROW><ROW><id>20134069</id><snippet>Thread(target=(lambda x, y: queue.extend(longfunction(x, y)), args=(a, b)).start()
</snippet></ROW><ROW><id>20134069</id><snippet>a</snippet></ROW><ROW><id>20134069</id><snippet>b</snippet></ROW><ROW><id>20134069</id><snippet>a</snippet></ROW><ROW><id>20134069</id><snippet>b</snippet></ROW><ROW><id>20134098</id><snippet>+=</snippet></ROW><ROW><id>20134098</id><snippet>b = b + a</snippet></ROW><ROW><id>20134098</id><snippet>b</snippet></ROW><ROW><id>20134098</id><snippet>b</snippet></ROW><ROW><id>20134098</id><snippet>a</snippet></ROW><ROW><id>20134098</id><snippet>b += a</snippet></ROW><ROW><id>20134098</id><snippet>__iadd__</snippet></ROW><ROW><id>20134162</id><snippet>apns_dict = {'aps':{'alert':'inner message','sound':'mySound.caf'}}
apns_string = json.dumps(apns_dict,ensure_ascii=False)
message = {'default':'default message','APNS_SANDBOX':apns_string}
messageJSON = json.dumps(message,ensure_ascii=False)
sns.publish(message=messageJSON,target_arn=device_arn,message_structure='json')
</snippet></ROW><ROW><id>20134162</id><snippet>apns_dict = {'aps':{'alert':'inner message','sound':'mySound.caf'}}
</snippet></ROW><ROW><id>20134162</id><snippet>apns_string = json.dumps(apns_dict,ensure_ascii=False)
</snippet></ROW><ROW><id>20134162</id><snippet>message = {'default':'default message','APNS_SANDBOX':apns_string}
</snippet></ROW><ROW><id>20134162</id><snippet>messageJSON = json.dumps(message,ensure_ascii=False)
</snippet></ROW><ROW><id>20134162</id><snippet>sns.publish(message=messageJSON,target_arn=device_arn,message_structure='json')
</snippet></ROW><ROW><id>20134237</id><snippet>try:
   assert something == something_else
except AssertionError:
   take_screenshot()
</snippet></ROW><ROW><id>20134237</id><snippet>&gt;&gt;&gt; def assertd(function):
        def _f(*args):
            try:
                return function(*args)
            except AssertionError:
                takescreenshot()
        return _f

&gt;&gt;&gt; @assertd
def f(x, y):
    assert x &gt; 0
    return x + y

&gt;&gt;&gt; f(1, 2)
3
&gt;&gt;&gt; f(5, 6)
11
&gt;&gt;&gt; f(-7, 8)
&lt;Screenshot taken&gt;
</snippet></ROW><ROW><id>20134284</id><snippet>globals</snippet></ROW><ROW><id>20134284</id><snippet>globals()[string[2]]["2"]
</snippet></ROW><ROW><id>20134284</id><snippet>dict1</snippet></ROW><ROW><id>20134284</id><snippet>dict1 = ...
namespace = {'dict1': dict1}

string = ...
namespace[string[2]]["2"]
</snippet></ROW><ROW><id>20134409</id><snippet>~/Library/Enthought/Canopy_**bit/User/bin/python</snippet></ROW><ROW><id>20134409</id><snippet>~/Library/Enthought/Canopy_**bit/User/bin/</snippet></ROW><ROW><id>20134409</id><snippet>source ~/Library/Enthought/Canopy_**bit/User/bin/activate
</snippet></ROW><ROW><id>20134440</id><snippet>globals</snippet></ROW><ROW><id>20134440</id><snippet>locals</snippet></ROW><ROW><id>20134440</id><snippet>class Foo(object):
    foo = [1,2,3]
    @staticmethod
    def bar():
       return foo[1]
</snippet></ROW><ROW><id>20134440</id><snippet>namespace</snippet></ROW><ROW><id>20134440</id><snippet>namespace['bar'].func_globals</snippet></ROW><ROW><id>20134440</id><snippet>&gt;&gt;&gt; namespace['bar'].func_globals.update(namespace)
&gt;&gt;&gt; namespace['bar']()
2
</snippet></ROW><ROW><id>20134440</id><snippet>namespace['bar'].__globals__.update</snippet></ROW><ROW><id>20134824</id><snippet>DEFAULT_PADDR</snippet></ROW><ROW><id>20134824</id><snippet>paddr</snippet></ROW><ROW><id>20134824</id><snippet>DEFAULT_PADDR</snippet></ROW><ROW><id>20134824</id><snippet>DEFAULT_PADDR = '/dev/ttyUSB0'
# ...
paddr = DEFAULT_PADDR
</snippet></ROW><ROW><id>20134824</id><snippet>paddr</snippet></ROW><ROW><id>20134976</id><snippet>Bil</snippet></ROW><ROW><id>20134976</id><snippet>bil_instance = Bil(80)  # Create instance of Bil.
print(bil_instance.tanaka())
print(bil_instance.aktuellVolym)
</snippet></ROW><ROW><id>20134976</id><snippet>AttributeError</snippet></ROW><ROW><id>20134976</id><snippet>Bil.tanka(80)
</snippet></ROW><ROW><id>20134976</id><snippet>80</snippet></ROW><ROW><id>20134976</id><snippet>self</snippet></ROW><ROW><id>20134976</id><snippet>tanka</snippet></ROW><ROW><id>20134976</id><snippet>tanka</snippet></ROW><ROW><id>20134976</id><snippet>Bil</snippet></ROW><ROW><id>20134982</id><snippet>Make_iterator</snippet></ROW><ROW><id>20134982</id><snippet>Make_iterator</snippet></ROW><ROW><id>20134982</id><snippet>f</snippet></ROW><ROW><id>20134982</id><snippet>def Make_iterator(fn):
    def f():
        global x
        x+=1
        return fn(x)
    return f
</snippet></ROW><ROW><id>20134982</id><snippet>t = Make_iterator(fn)</snippet></ROW><ROW><id>20134982</id><snippet>t()</snippet></ROW><ROW><id>20134982</id><snippet>0, 2, 4, 6, 8, etc...</snippet></ROW><ROW><id>20135077</id><snippet>&gt;&gt;&gt; '{:.4f}'.format(23.1234567890)
'23.1235'
</snippet></ROW><ROW><id>20135077</id><snippet>round</snippet></ROW><ROW><id>20135077</id><snippet>&gt;&gt;&gt; round(23.1234567890, 4)
23.1235
</snippet></ROW><ROW><id>20135077</id><snippet>round</snippet></ROW><ROW><id>20135085</id><snippet>test.html.tmp</snippet></ROW><ROW><id>20135085</id><snippet>test.html</snippet></ROW><ROW><id>20135120</id><snippet>def get_list(prompt, halt):
    lst = []
    while True:
        item = raw_input(prompt)
        if item == halt:
            return lst
        else:
            lst.append(item)

def check_list(lst, item):
    if item in lst:
        print('Yay there is {} here'.format(item))
        return True
    else:
        print('No you have not added {}'.format(item))
        return False

def get_yesno(prompt):
    while True:
        yesno = raw_input(prompt).lower()
        if yesno in {'y', 'yes'}:
            return True
        elif yesno in {'n', 'no'}:
            return False

def main():
    mylist = get_list('Add to list:', 'q')

    check = raw_input('Look for item:')
    if not check_list(mylist, check):
        if get_yesno('Would you like to add it?'):
            mylist.append(check)

    print(mylist)

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>20135120</id><snippet>list</snippet></ROW><ROW><id>20135120</id><snippet>camelCase</snippet></ROW><ROW><id>20135120</id><snippet>use_underscores</snippet></ROW><ROW><id>20135233</id><snippet>sample = """
... given sample text ...
 """
from pyparsing import *

# punctuation
LPAR,RPAR,LBRACE,RBRACE,LBRACK,RBRACK,COMMA,EQ = map(Suppress,"(){}[],=")

identifier = Word(alphas,alphanums+"_")

# define some types that can get converted to Python types
# (parse actions will do conversion at parse time)
NONE = Keyword("None").setParseAction(replaceWith(None))
integer = Word(nums).setParseAction(lambda t:int(t[0]))
quotedString.setParseAction(removeQuotes)

# define a placeholder for a nested object definition (since objDefn
# will be referenced within its own definition)
objDefn = Forward()

objType = Combine(LPAR + identifier + RPAR)

objval = quotedString | NONE | integer | Group(objDefn)
objattr = Group(identifier + EQ + objval)

arrayattr = Group(identifier + LBRACK + RBRACK + EQ + Group(OneOrMore(Group(objDefn)+COMMA)) )

# use '&lt;&lt;' operator to assign content to previously declared Forward
objDefn &lt;&lt; objType + LBRACE + ZeroOrMore((arrayattr | objattr) + Optional(COMMA)) + RBRACE
# parse sample text
result = objDefn.parseString(sample)

# use pprint to list out indented parsed data
import pprint
pprint.pprint(result.asList())
</snippet></ROW><ROW><id>20135233</id><snippet>['DetailResult',
 ['status', ['Status', ['message', None], ['code', '0']]],
 ['searchArgument',
  ['DetailSearchArgument',
   ['reqPartNumber', 'BQ'],
   ['reqMfg', 'T'],
   ['reqCpn', None]]],
 ['detailsDto',
  [['DetailsDto',
    ['summaryDto',
     ['SummaryDto',
      ['PartNumber', 'BQ'],
      ['seMfg', 'T'],
      ['description', 'Fast']]],
    ['packageDto',
     [['PackageDto', ['fetName', 'a'], ['fetValue', 'b']],
      ['PackageDto', ['fetName', 'c'], ['fetValue', 'd']],
      ['PackageDto', ['fetName', 'd'], ['fetValue', 'z']],
      ['PackageDto', ['fetName', 'f'], ['fetValue', 'Sq']],
      ['PackageDto', ['fetName', 'g'], ['fetValue', 'p']]]],
    ['additionalDetailsDto',
     ['AdditionalDetailsDto',
      ['cr', None],
      ['pOptions', None],
      ['inv', None],
      ['pcns', None]]],
    ['partImageDto', None],
    ['riskDto',
     ['RiskDto',
      ['life', 'Low'],
      ['lStage', 'Mature'],
      ['yteol', '10'],
      ['Date', '2023']]],
    ['partOptionsDto',
     [['ReplacementDto',
       ['partNumber', 'BQ2'],
       ['manufacturer', 'T'],
       ['type', 'Reel']]]],
    ['inventoryDto',
     [['InventoryDto',
       ['distributor', 'V'],
       ['quantity', '88'],
       ['buyNowLink', 'https://www...']],
      ['InventoryDto',
       ['distributor', 'R'],
       ['quantity', '7'],
       ['buyNowLink', 'http://www.r.']],
      ['InventoryDto',
       ['distributor', 'RS'],
       ['quantity', '2'],
       ['buyNowLink', 'http://www.rs..']]]]]]]]
</snippet></ROW><ROW><id>20135284</id><snippet>next</snippet></ROW><ROW><id>20135284</id><snippet>n</snippet></ROW><ROW><id>20135284</id><snippet>n</snippet></ROW><ROW><id>20135284</id><snippet>list</snippet></ROW><ROW><id>20135284</id><snippet>sum(list(range(i)) for i in range(n))</snippet></ROW><ROW><id>20135318</id><snippet>self</snippet></ROW><ROW><id>20135318</id><snippet>class roman1:
    roman_numeral_map = (('M',  1000),
                         ('CM', 900),
                         ('D',  500),
                         ('CD', 400),
                         ('C',  100),
                         ('XC', 90),
                         ('L',  50),
                         ('XL', 40),
                         ('X',  10),
                         ('IX', 9),
                         ('V',  5),
                         ('IV', 4),
                         ('I',  1))

    def to_roman(self): # Instance methods take `self`
        '''convert integer to roman numeral'''
        for numeral, integer in self.roman_numeral_map: # Note: `self`
            print(numeral, integer)


if __name__ == '__main__': # Note: Indent to same level as `class` above
    roman = roman1() # `roman` is global, no need for `self`
    roman.to_roman() # Use `()` to *call* `to_roman()`
</snippet></ROW><ROW><id>20135366</id><snippet>dir</snippet></ROW><ROW><id>20135366</id><snippet>file</snippet></ROW><ROW><id>20135366</id><snippet>tarfile.open</snippet></ROW><ROW><id>20135366</id><snippet>with</snippet></ROW><ROW><id>20135366</id><snippet>close()</snippet></ROW><ROW><id>20135366</id><snippet>import os, tarfile

for root, dirs, _ in os.walk('.'):
    for d in dirs:
        with tarfile.open(d + '.tar.gz', 'w:gz') as tar:
            for _, _, files in os.walk(os.path.join(root, d)):
                for f in files:
                    tar.add(os.path.join(root, d, f))
</snippet></ROW><ROW><id>20135374</id><snippet>Parent</snippet></ROW><ROW><id>20135374</id><snippet>parents = Parent.objects.filter(child__date_made__gte=a_while_ago).distinct()
</snippet></ROW><ROW><id>20135374</id><snippet>values</snippet></ROW><ROW><id>20135374</id><snippet>values_list</snippet></ROW><ROW><id>20135374</id><snippet>recent</snippet></ROW><ROW><id>20135374</id><snippet>parent</snippet></ROW><ROW><id>20135374</id><snippet>parent</snippet></ROW><ROW><id>20135374</id><snippet>parent_pks = recent.values_list('parent', flat=True).distinct()
</snippet></ROW><ROW><id>20135374</id><snippet>in_bulk</snippet></ROW><ROW><id>20135374</id><snippet>parents = Parent.objects.in_bulk(parent_pks)
</snippet></ROW><ROW><id>20135396</id><snippet>def __init__(self,name):
    self.__name__=name
    number_hops=10 
    self.number_hops=number_hops
def __repr__(self):
    return self.__name__
</snippet></ROW><ROW><id>20135396</id><snippet>print(rabbit)
</snippet></ROW><ROW><id>20135396</id><snippet>print(rabbit.__name__)
</snippet></ROW><ROW><id>20135396</id><snippet>def name(self):
    return self.__name__
</snippet></ROW><ROW><id>20135705</id><snippet>random.shuffle</snippet></ROW><ROW><id>20135705</id><snippet>&gt;&gt;&gt; import ctypes, random
&gt;&gt;&gt; my_array = (10 * ctypes.py_object)(*range(10))
&gt;&gt;&gt; random.shuffle(my_array)
&gt;&gt;&gt; my_array[:]
[5, 0, 4, 8, 6, 3, 7, 1, 2, 9]
</snippet></ROW><ROW><id>20135705</id><snippet>py_object</snippet></ROW><ROW><id>20135705</id><snippet>c_long</snippet></ROW><ROW><id>20135705</id><snippet>c_double</snippet></ROW><ROW><id>20135705</id><snippet>py_object</snippet></ROW><ROW><id>20135705</id><snippet>c_void_p</snippet></ROW><ROW><id>20135705</id><snippet>_ctypes._SimpleCData</snippet></ROW><ROW><id>20135705</id><snippet>_ctypes._Pointer</snippet></ROW><ROW><id>20135705</id><snippet>value</snippet></ROW><ROW><id>20135705</id><snippet>contents</snippet></ROW><ROW><id>20135705</id><snippet>py_object</snippet></ROW><ROW><id>20135705</id><snippet>id</snippet></ROW><ROW><id>20135705</id><snippet>_objects</snippet></ROW><ROW><id>20135705</id><snippet>&gt;&gt;&gt; obj = 'abc'
&gt;&gt;&gt; pyobj = ctypes.py_object(obj)

&gt;&gt;&gt; pyobj._objects is obj
True
&gt;&gt;&gt; addr = ctypes.c_size_t.from_buffer(pyobj).value 
&gt;&gt;&gt; addr == id(obj)
True
</snippet></ROW><ROW><id>20135705</id><snippet>GETFUNC</snippet></ROW><ROW><id>20135705</id><snippet>NULL</snippet></ROW><ROW><id>20135705</id><snippet>ValueError</snippet></ROW><ROW><id>20135705</id><snippet>GETFUNC</snippet></ROW><ROW><id>20135705</id><snippet>c_void_p</snippet></ROW><ROW><id>20135705</id><snippet>None</snippet></ROW><ROW><id>20135705</id><snippet>&gt;&gt;&gt; arr = (ctypes.c_void_p * 5)()
&gt;&gt;&gt; random.shuffle(arr) # silly this is
&gt;&gt;&gt; arr[:]
[None, None, None, None, None]
</snippet></ROW><ROW><id>20135722</id><snippet>__getitem__()</snippet></ROW><ROW><id>20135722</id><snippet>__setitem__()</snippet></ROW><ROW><id>20135908</id><snippet>frozenset.__and__()</snippet></ROW><ROW><id>20135908</id><snippet>if unit in Fahrenheit:
   ...
elif unit in Celsius:
   ...
else:
   ...
</snippet></ROW><ROW><id>20135908</id><snippet>FAHRENHEIT</snippet></ROW><ROW><id>20135908</id><snippet>CELSIUS</snippet></ROW><ROW><id>20135976</id><snippet>the_regex  = re.compile(re.escape(the_value))
</snippet></ROW><ROW><id>20136328</id><snippet>'1'</snippet></ROW><ROW><id>20136328</id><snippet>'0'</snippet></ROW><ROW><id>20136328</id><snippet>49</snippet></ROW><ROW><id>20136328</id><snippet>48</snippet></ROW><ROW><id>20136328</id><snippet>0</snippet></ROW><ROW><id>20136328</id><snippet>49</snippet></ROW><ROW><id>20136328</id><snippet>48</snippet></ROW><ROW><id>20136328</id><snippet>char bit = path.charAt(i);
answer = (answer &lt;&lt; 1) | (bit - '0');
</snippet></ROW><ROW><id>20136454</id><snippet>def code(self, *args):
</snippet></ROW><ROW><id>20136454</id><snippet>def code(self, device=''):
</snippet></ROW><ROW><id>20136467</id><snippet>&gt;&gt;&gt; a = [(1,2),(2,3)]
&gt;&gt;&gt; [(x, y+2) for x,y in a]
[(1, 4), (2, 5)]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20136551</id><snippet>with_metaclass</snippet></ROW><ROW><id>20136551</id><snippet>six</snippet></ROW><ROW><id>20136551</id><snippet>class Foo(object):
    __metaclass__ = FooMeta
</snippet></ROW><ROW><id>20136551</id><snippet>class Foo(metaclass=FooMeta):
    pass
</snippet></ROW><ROW><id>20136551</id><snippet>with_metaclass(meta)</snippet></ROW><ROW><id>20136551</id><snippet>meta</snippet></ROW><ROW><id>20136551</id><snippet>class Test(MyMeta):</snippet></ROW><ROW><id>20136551</id><snippet>Test</snippet></ROW><ROW><id>20136551</id><snippet>MyMeta</snippet></ROW><ROW><id>20136551</id><snippet> class Test:
     __metaclass__ = MyMeta
</snippet></ROW><ROW><id>20136551</id><snippet> class Test(metaclass=MyMeta):
     ...
</snippet></ROW><ROW><id>20136551</id><snippet>with_metaclass</snippet></ROW><ROW><id>20136604</id><snippet>dict1.update(dict2)</snippet></ROW><ROW><id>20136604</id><snippet>dict1</snippet></ROW><ROW><id>20136604</id><snippet>dict2</snippet></ROW><ROW><id>20136604</id><snippet>dicts=[]
dicts.append({"1":[{'q': ['Data'], 'q1': '110'}]})
dicts.append({"2":[{'q2':["other Data"], "q3" : "exp"},{'q2':["other Data2"], "q3" : "exp2"}]})

a=[[{key: j} for key in d2 for j in d2[key]] for d2 in dicts ]

nmax=max(len(x) for x in a)

newdicts=[dict() for i in range(nmax)]

for i in range(nmax):    
    for j in range(len(a)):
        if i &lt; len(a[j]):    
            newdicts[i].update(a[j][i])

for i in newdicts:
    print i
</snippet></ROW><ROW><id>20136604</id><snippet>{'1': {'q': ['Data'], 'q1': '110'}, '2': {'q3': 'exp', 'q2': ['other Data']}}
{'2': {'q3': 'exp2', 'q2': ['other Data2']}}
</snippet></ROW><ROW><id>20136623</id><snippet>set_useLocale()</snippet></ROW><ROW><id>20136623</id><snippet>FuncFormatter</snippet></ROW><ROW><id>20136623</id><snippet>comma_format</snippet></ROW><ROW><id>20136623</id><snippet>from pylab import *
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

def comma_format(x, p):
    return format(x, "6,.0f").replace(",", ".")

ax = subplot(111)
xx = np.arange(0,20,1)
yy = np.arange(1000,10000,450)
ax.get_yaxis().set_major_formatter(ticker.FuncFormatter(comma_format))
plt.scatter(xx,yy)
plt.show()
</snippet></ROW><ROW><id>20136664</id><snippet>Pet</snippet></ROW><ROW><id>20136664</id><snippet>set_name</snippet></ROW><ROW><id>20136664</id><snippet>get_age</snippet></ROW><ROW><id>20136758</id><snippet>print (''.join(get_Info.values)).replace('\n','')
</snippet></ROW><ROW><id>20136867</id><snippet>sys.modules</snippet></ROW><ROW><id>20136867</id><snippet>sys.modules</snippet></ROW><ROW><id>20136867</id><snippet>sys.modules</snippet></ROW><ROW><id>20137069</id><snippet>i</snippet></ROW><ROW><id>20137069</id><snippet>j</snippet></ROW><ROW><id>20137069</id><snippet>B.i</snippet></ROW><ROW><id>20137069</id><snippet>B.j</snippet></ROW><ROW><id>20137069</id><snippet>self</snippet></ROW><ROW><id>20137069</id><snippet>NameError</snippet></ROW><ROW><id>20137069</id><snippet>class Foo:
    classvar = "bar"
    def blah(self):
        print(classvar) # raises "NameError: global name 'classvar' is not defined"
</snippet></ROW><ROW><id>20137069</id><snippet>for</snippet></ROW><ROW><id>20137069</id><snippet>A</snippet></ROW><ROW><id>20137069</id><snippet>next</snippet></ROW><ROW><id>20137069</id><snippet>for</snippet></ROW><ROW><id>20137069</id><snippet>B</snippet></ROW><ROW><id>20137069</id><snippet>dis</snippet></ROW><ROW><id>20137069</id><snippet>def f(lst):
    return [i for i in lst]

def g(lst):
    return [(i, j) for i in lst for j in lst]
</snippet></ROW><ROW><id>20137069</id><snippet>f</snippet></ROW><ROW><id>20137069</id><snippet>&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_CONST               1 (&lt;code object &lt;listcomp&gt; at 0x0000000003CCA1E0, file "&lt;pyshell#374&gt;", line 2&gt;) 
              3 LOAD_CONST               2 ('f.&lt;locals&gt;.&lt;listcomp&gt;') 
              6 MAKE_FUNCTION            0 
              9 LOAD_FAST                0 (lst) 
             12 GET_ITER             
             13 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             16 RETURN_VALUE       
</snippet></ROW><ROW><id>20137069</id><snippet>f</snippet></ROW><ROW><id>20137069</id><snippet>f.&lt;locals&gt;.&lt;listcomp&gt;</snippet></ROW><ROW><id>20137069</id><snippet>lst</snippet></ROW><ROW><id>20137069</id><snippet>f</snippet></ROW><ROW><id>20137069</id><snippet>&lt;listcomp&gt;</snippet></ROW><ROW><id>20137069</id><snippet>A</snippet></ROW><ROW><id>20137069</id><snippet>integers</snippet></ROW><ROW><id>20137069</id><snippet>g</snippet></ROW><ROW><id>20137069</id><snippet>&gt;&gt;&gt; dis.dis(g)
  2           0 LOAD_CLOSURE             0 (lst) 
              3 BUILD_TUPLE              1 
              6 LOAD_CONST               1 (&lt;code object &lt;listcomp&gt; at 0x0000000003CCA810, file "&lt;pyshell#377&gt;", line 2&gt;) 
              9 LOAD_CONST               2 ('g.&lt;locals&gt;.&lt;listcomp&gt;') 
             12 MAKE_CLOSURE             0 
             15 LOAD_DEREF               0 (lst) 
             18 GET_ITER             
             19 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             22 RETURN_VALUE         
</snippet></ROW><ROW><id>20137069</id><snippet>&lt;listcomp&gt;</snippet></ROW><ROW><id>20137069</id><snippet>g</snippet></ROW><ROW><id>20137069</id><snippet>Foo</snippet></ROW><ROW><id>20137069</id><snippet>class C:
    num = 5
    products = [i * num for i in range(10)] # raises a NameError about num
</snippet></ROW><ROW><id>20137069</id><snippet>for</snippet></ROW><ROW><id>20137069</id><snippet>if</snippet></ROW><ROW><id>20137069</id><snippet>&lt;listcomp&gt;</snippet></ROW><ROW><id>20137069</id><snippet>class D:
    nested = [[1, 2, 3], [4, 5, 6]]
    flattened = [item for inner in nested for item in inner] # works!
</snippet></ROW><ROW><id>20137162</id><snippet>&gt;&gt;&gt; word = 'apple'
&gt;&gt;&gt; listOfWords = ['applesauce']
&gt;&gt;&gt; word in listOfWords
False
</snippet></ROW><ROW><id>20137162</id><snippet>&gt;&gt;&gt; word = 'apple'
&gt;&gt;&gt; listOfWords = ['applesauce']
&gt;&gt;&gt; word in listOfWords[0]
True
</snippet></ROW><ROW><id>20137162</id><snippet>in</snippet></ROW><ROW><id>20137219</id><snippet>load()</snippet></ROW><ROW><id>20137219</id><snippet>post()</snippet></ROW><ROW><id>20137219</id><snippet>load</snippet></ROW><ROW><id>20137219</id><snippet>comment-post-content</snippet></ROW><ROW><id>20137219</id><snippet>load</snippet></ROW><ROW><id>20137219</id><snippet>var data = {csrfmiddlewaretoken: document.getElementsByName('csrfmiddlewaretoken')[0].value,
  content:document.getElementsByName('comment-post-content')[0].value
}
$.post(url , data, function(){
    $("#refresh-comments").load("/comments/" + event_id + '/', function(){
        $("#comment-post-content").val(""); 
    });
}); 
</snippet></ROW><ROW><id>20137220</id><snippet>data = [map(float, line.split()) for line in lines]
</snippet></ROW><ROW><id>20137586</id><snippet>pairs</snippet></ROW><ROW><id>20137586</id><snippet>sum_sq_diffs = 0
for a, b in pairs:
    sum_sq_diffs += (a - b)**2 
</snippet></ROW><ROW><id>20137586</id><snippet>a</snippet></ROW><ROW><id>20137586</id><snippet>b</snippet></ROW><ROW><id>20137586</id><snippet>&gt;&gt;&gt; pt1 = [1, 2, 3]
&gt;&gt;&gt; pt2 = [4, 5, 6]
&gt;&gt;&gt; pairs = zip(pt1, pt2)  
&gt;&gt;&gt; pairs
[(1, 4), (2, 5), (3, 6)]
&gt;&gt;&gt; sum_sq_diffs = sum((a - b)**2 for a, b in pairs)
&gt;&gt;&gt; sum_sq_diffs
27
&gt;&gt;&gt; sum_sq_diffs_2 = 0
&gt;&gt;&gt; for a, b in pairs:
...     print a, b
...     sum_sq_diffs_2 += (a - b)**2
... 
1 4
2 5
3 6
&gt;&gt;&gt; sum_sq_diffs_2
27
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20137587</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>20137587</id><snippet>pat = re.compile(engType+'(.*?)[Ss][Ee][Rr][Ii][Aa][Ll]',re.IGNORECASE)
</snippet></ROW><ROW><id>20137587</id><snippet>re.compile(engType+'(.*?)serial',re.IGNORECASE)</snippet></ROW><ROW><id>20137587</id><snippet>des = pat.search(line.lower()).strip()
</snippet></ROW><ROW><id>20137587</id><snippet>.strip()</snippet></ROW><ROW><id>20137587</id><snippet>pat.search()</snippet></ROW><ROW><id>20137587</id><snippet>None</snippet></ROW><ROW><id>20137587</id><snippet>AttributeError</snippet></ROW><ROW><id>20137853</id><snippet>outfile</snippet></ROW><ROW><id>20137853</id><snippet>w+</snippet></ROW><ROW><id>20137853</id><snippet>print outfile.read()</snippet></ROW><ROW><id>20137853</id><snippet>outfile</snippet></ROW><ROW><id>20137853</id><snippet>read()</snippet></ROW><ROW><id>20137853</id><snippet>outfile</snippet></ROW><ROW><id>20137853</id><snippet>outfile.seek(0)</snippet></ROW><ROW><id>20137853</id><snippet>outfile</snippet></ROW><ROW><id>20137853</id><snippet>r+</snippet></ROW><ROW><id>20137961</id><snippet>lists = [[1,2,3], [4,5,6]]
[ l[0] for l in lists ]
</snippet></ROW><ROW><id>20137961</id><snippet>map</snippet></ROW><ROW><id>20137961</id><snippet>map( lambda l: l[0], lists )
</snippet></ROW><ROW><id>20137961</id><snippet>heads = itertools.imap( lambda l: l[0], enumerate(lists))

for head in heads:
   print head 
</snippet></ROW><ROW><id>20138069</id><snippet>for x in range (6):
</snippet></ROW><ROW><id>20138069</id><snippet>for x in range (1, 7):
</snippet></ROW><ROW><id>20138112</id><snippet>value="{{request.form['username']}}"</snippet></ROW><ROW><id>20138112</id><snippet>/log</snippet></ROW><ROW><id>20138112</id><snippet>log.html</snippet></ROW><ROW><id>20138112</id><snippet>request.form['username']</snippet></ROW><ROW><id>20138112</id><snippet>POST</snippet></ROW><ROW><id>20138112</id><snippet>request.form['username']</snippet></ROW><ROW><id>20138112</id><snippet>request.form['password']</snippet></ROW><ROW><id>20138112</id><snippet>request.form['username']</snippet></ROW><ROW><id>20138112</id><snippet>request.form['username']</snippet></ROW><ROW><id>20138148</id><snippet>&gt;&gt;&gt; import socket
&gt;&gt;&gt; socket.inet_aton("127.0.0.1")    # valid
'\x7f\x00\x00\x01'
&gt;&gt;&gt; socket.inet_aton("127.1")        # oh yes this is valid too!
'\x7f\x00\x00\x01'
&gt;&gt;&gt; socket.inet_aton("127.0.0,1")    # this isn't
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
socket.error: illegal IP address string passed to inet_aton
</snippet></ROW><ROW><id>20138148</id><snippet>&gt;&gt;&gt; socket.inet_pton(socket.AF_INET6, "2001:db8:1234::")
b' \x01\r\xb8\x124\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
</snippet></ROW><ROW><id>20138323</id><snippet>final List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
list.add(1);
list.add(2);
list.add(3);
list.addAll(Collections.nCopies(8, 1));
</snippet></ROW><ROW><id>20138323</id><snippet>Collections.nCopies()</snippet></ROW><ROW><id>20138618</id><snippet>def test(test_config):
    for i in test_config:
      print i.header //prints func1
      print type(i.header)
      try:
        methods[i.header]()
      except (AtributeError, TypeError):
        logging.error("Method  %s not implemented"%(i.header)) 

def func1():
    print "In func1"
def func2():
    print "In func2"

methods = {u'func1':func1, u'func2':func2} #Methods that you want to call
</snippet></ROW><ROW><id>20138618</id><snippet>class A:
    def test(self, test_config):
        try:
          getattr(self, i.header)()
        except AtributeError:
           logging.error("Method  %s not implemented"%(i.header)) 

    def func1(self):
        print "In func1"
x = A()
x.test(pass_something_here)
</snippet></ROW><ROW><id>20138834</id><snippet>ascii</snippet></ROW><ROW><id>20138834</id><snippet>csv</snippet></ROW><ROW><id>20138834</id><snippet>Unicode</snippet></ROW><ROW><id>20138834</id><snippet>ASCII NUL</snippet></ROW><ROW><id>20138834</id><snippet>UTF-8</snippet></ROW><ROW><id>20138834</id><snippet>ASCII</snippet></ROW><ROW><id>20138834</id><snippet>def unicode_csv_reader(unicode_csv_data, dialect=csv.excel, **kwargs):
    # csv.py doesn't do Unicode; encode temporarily as UTF-8:
    csv_reader = csv.reader(utf_8_encoder(unicode_csv_data),
                            dialect=dialect, **kwargs)
    for row in csv_reader:
        # decode UTF-8 back to Unicode, cell by cell:
        yield [unicode(cell, 'utf-8') for cell in row]

def utf_8_encoder(unicode_csv_data):
    for line in unicode_csv_data:
        yield line.encode('utf-8')
</snippet></ROW><ROW><id>20138834</id><snippet>unicode_csv_reader</snippet></ROW><ROW><id>20138834</id><snippet>from operator import itemgetter

tweets_fname = "C:/myfile.csv"

with codecs.open(tweets_fname , encoding="utf-8") as current_file:
    data = unicode_csv_reader(current_file, delimiter=",")
    tweets = u' '.join(map(itemgetter(2), data))
    encoded_tweets = tweets.encode('utf8', 'replace')
</snippet></ROW><ROW><id>20138919</id><snippet>&lt;</snippet></ROW><ROW><id>20138919</id><snippet>with open('foo.txt') as f:
    for line in f:
        a, b = line.split('&lt;', 1)
        b = '#@ &lt;' + b.rstrip('. \n')
        print b
        print a.rstrip() + '.'
</snippet></ROW><ROW><id>20138919</id><snippet>#@ &lt;line 1&gt;
This is line1.
#@ &lt;http://&lt;line2&gt;
This is line2.
#@ &lt;http://&lt;&gt;line3&gt;
This is line3.
#@ &lt;line4&gt;
This is line4.
</snippet></ROW><ROW><id>20139080</id><snippet>set_position</snippet></ROW><ROW><id>20139080</id><snippet>get_position</snippet></ROW><ROW><id>20139080</id><snippet>import matplotlib.pyplot as plt
f,a = plt.subplots(1,1)
a.plot([1,2])
ticks = a.xaxis.get_ticklabels()
for tick in ticks[::2]:
    tpos = tick.get_position()
    tick.set_position((tpos[0],tpos[1]-0.05))
</snippet></ROW><ROW><id>20139080</id><snippet>0.05</snippet></ROW><ROW><id>20139129</id><snippet>collections.Counter</snippet></ROW><ROW><id>20139129</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; lis1 = [['a', 2], ['b',1]]
&gt;&gt;&gt; lis2 = [['b', 2], ['c', 1]]
&gt;&gt;&gt; c = Counter(dict(lis1)) + Counter(dict(lis2))
&gt;&gt;&gt; c.most_common()
[('b', 3), ('a', 2), ('c', 1)]
</snippet></ROW><ROW><id>20139129</id><snippet>Counter</snippet></ROW><ROW><id>20139129</id><snippet>&gt;&gt;&gt; lis1 = [['a', 2], ['b',1], ['b',5]]
&gt;&gt;&gt; lis2 = [['b', 2], ['c', 1], ['a', 10]]
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = sum((Counter(dict([x])) for x in chain(lis1, lis2)), Counter())
&gt;&gt;&gt; c.most_common()
[('a', 12), ('b', 8), ('c', 1)]
</snippet></ROW><ROW><id>20139129</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>20139129</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for k, v in lis1 + lis2:
    d[k] += v
...     
&gt;&gt;&gt; sorted(d.items(), key=lambda x:x[1], reverse=True)
[('b', 3), ('a', 2), ('c', 1)]
</snippet></ROW><ROW><id>20139520</id><snippet>flask-login</snippet></ROW><ROW><id>20139520</id><snippet>current_user</snippet></ROW><ROW><id>20139520</id><snippet>before_request</snippet></ROW><ROW><id>20139520</id><snippet>user_loader</snippet></ROW><ROW><id>20139520</id><snippet>current_user</snippet></ROW><ROW><id>20139520</id><snippet>AnonymousUser</snippet></ROW><ROW><id>20139520</id><snippet>login_required</snippet></ROW><ROW><id>20139520</id><snippet>current_user.is_authenticated()</snippet></ROW><ROW><id>20139520</id><snippet>login_required</snippet></ROW><ROW><id>20139520</id><snippet>current_user</snippet></ROW><ROW><id>20139870</id><snippet>def f():
    e=int(raw_input('enter number'))
    if e in range (12):
        print 'co'
    elif e in range (12,20):
        print 'co2'
    elif e in range (-10,0,1):
        print 'co3'

f()
</snippet></ROW><ROW><id>20139909</id><snippet>import httplib2
from google.appengine.api import memcache
from oauth2client.appengine import AppAssertionCredentials
from apiclient import discovery
...
credentials = AppAssertionCredentials(scope='https://www.googleapis.com/auth/devstorage.read_write')
http = credentials.authorize(httplib2.Http(memcache))
storage = discovery.build(serviceName='storage', version='v1beta2', http=http, developerKey=your_api_key)
</snippet></ROW><ROW><id>20139975</id><snippet>&lt;input type="hidden" class="event-id" value="{{ event.id }}"&gt;
</snippet></ROW><ROW><id>20139975</id><snippet>$('.comment-post-button').click(function(){
    var $btn = $(this);
    var $currentPost = $btn.parents('.post');
    var event_id = $currentPost.find('.event-id').val();
    //...
});
</snippet></ROW><ROW><id>20139975</id><snippet>$currentPost</snippet></ROW><ROW><id>20139975</id><snippet>content: document.getElementsByName('comment-post-content')[0].value
</snippet></ROW><ROW><id>20139975</id><snippet>content: $currentPost.find('input[name="comment-post-content"]').val()
</snippet></ROW><ROW><id>20140029</id><snippet>data[idx==0,0]</snippet></ROW><ROW><id>20140029</id><snippet>&gt;&gt;&gt; data[idx==0,0]
Traceback (most recent call last):
  ...
IndexError: too many indices for array
</snippet></ROW><ROW><id>20140029</id><snippet>centroids[:,0]</snippet></ROW><ROW><id>20140029</id><snippet>IndexError: too many indices</snippet></ROW><ROW><id>20140029</id><snippet>centroids</snippet></ROW><ROW><id>20140029</id><snippet>&gt;&gt;&gt; data = data.reshape(9,2) # 2d array of x,y coordinates
&gt;&gt;&gt; data
array([[1, 1],
       [1, 1],
       [1, 1],
       [3, 3],
       [3, 3],
       [3, 3],
       [7, 7],
       [7, 7],
       [7, 7]])
&gt;&gt;&gt; centroids, x = kmeans(data,3) # clusters in 2d
&gt;&gt;&gt; idx, x = vq(data,centroids)
</snippet></ROW><ROW><id>20140029</id><snippet>0</snippet></ROW><ROW><id>20140029</id><snippet>&gt;&gt;&gt; data[idx==0][:,0]
array([1, 1, 1])
</snippet></ROW><ROW><id>20140029</id><snippet>0</snippet></ROW><ROW><id>20140029</id><snippet>&gt;&gt;&gt; data[idx==0][:,1]
array([1, 1, 1])
</snippet></ROW><ROW><id>20140060</id><snippet>map</snippet></ROW><ROW><id>20140060</id><snippet>for</snippet></ROW><ROW><id>20140060</id><snippet>reader</snippet></ROW><ROW><id>20140060</id><snippet>map</snippet></ROW><ROW><id>20140060</id><snippet>float</snippet></ROW><ROW><id>20140060</id><snippet>for</snippet></ROW><ROW><id>20140060</id><snippet>reader</snippet></ROW><ROW><id>20140209</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup(open('myNotes.xml', 'r'))


source = soup.source
print source

#&lt;source&gt;
# mobile.iphone
#&lt;/source&gt;


source = soup.source
print source.string

# mobile.iphone
</snippet></ROW><ROW><id>20140209</id><snippet>for tag in soup.findAll('source'):
    print tag.string
</snippet></ROW><ROW><id>20140209</id><snippet>for tag in soup.findAll():
    print tag.string
</snippet></ROW><ROW><id>20140209</id><snippet>row = []
title = soup.note.title.string
created = soup.note.created.string
row.append(title)
row.append(created)
</snippet></ROW><ROW><id>20140453</id><snippet>import string
keys = string.digits+string.ascii_lowercase
values = range(len(keys))
d = dict(zip(keys,values))
</snippet></ROW><ROW><id>20140453</id><snippet>dicts</snippet></ROW><ROW><id>20140453</id><snippet>dict</snippet></ROW><ROW><id>20140453</id><snippet>list</snippet></ROW><ROW><id>20140658</id><snippet>.</snippet></ROW><ROW><id>20140658</id><snippet>b</snippet></ROW><ROW><id>20140658</id><snippet>(5).bit_length()</snippet></ROW><ROW><id>20140658</id><snippet>()</snippet></ROW><ROW><id>20140658</id><snippet>bit_length</snippet></ROW><ROW><id>20140658</id><snippet>5..zzz
</snippet></ROW><ROW><id>20140658</id><snippet>AttributeError</snippet></ROW><ROW><id>20140658</id><snippet>5.</snippet></ROW><ROW><id>20140866</id><snippet>datetime</snippet></ROW><ROW><id>20140866</id><snippet>import os.path
import datetime
def f(t0, t1):
    t = t0
    while t != t1:
        day_path = os.path.join(t.year, t.month, t.day)
        if os.path.exists(day_path):
            # Do what you need inside the day dir.
        t += datetime.timedelta(days=1)
</snippet></ROW><ROW><id>20140906</id><snippet>int</snippet></ROW><ROW><id>20140906</id><snippet>hex</snippet></ROW><ROW><id>20140906</id><snippet>a= '1000'
b= '2000'
print hex(int(a, 16) | int(b, 16))
</snippet></ROW><ROW><id>20140906</id><snippet>0x3000
</snippet></ROW><ROW><id>20141180</id><snippet>with file('bla.txt') as input:
  for count, line in enumerate(input):
    if count &gt; 10000:
      break
    if re.search('foo bar', line):
      print line
</snippet></ROW><ROW><id>20141180</id><snippet>grep</snippet></ROW><ROW><id>20141180</id><snippet>sys.stdin</snippet></ROW><ROW><id>20141180</id><snippet>input</snippet></ROW><ROW><id>20141195</id><snippet>k</snippet></ROW><ROW><id>20141195</id><snippet>k</snippet></ROW><ROW><id>20141195</id><snippet>k_or_guess : int or ndarray
   The number of centroids to generate. A code is assigned to
   each centroid, which is also the row index of the centroid
   in the code_book matrix generated.

   The initial k centroids are chosen by randomly selecting
   observations from the observation matrix. Alternatively,
   passing a k by N array specifies the initial k centroids.
</snippet></ROW><ROW><id>20141195</id><snippet>kmeans(data,np.array([1,3,7]),100)

# (array([1, 3, 7]), 0.0)
# (array([1, 3, 7]), 0.0)
# (array([1, 3, 7]), 0.0)
</snippet></ROW><ROW><id>20141196</id><snippet>import numpy as np

data = np.random.randint(0,100,size=(1,100))
np.savetxt('data.csv',data,delimiter=',',fmt='%d')     #numpy savetxt
</snippet></ROW><ROW><id>20141196</id><snippet>70,53,95,60,91,...
</snippet></ROW><ROW><id>20141196</id><snippet>fmt='"%d"'
</snippet></ROW><ROW><id>20141196</id><snippet>"70","53","95","60","91",...
</snippet></ROW><ROW><id>20141234</id><snippet>import options
</snippet></ROW><ROW><id>20141234</id><snippet>cpickle.dump(xxx, open('result', 'rb'))
</snippet></ROW><ROW><id>20141234</id><snippet>xxx</snippet></ROW><ROW><id>20141234</id><snippet>options</snippet></ROW><ROW><id>20141234</id><snippet>options</snippet></ROW><ROW><id>20141234</id><snippet>options</snippet></ROW><ROW><id>20141234</id><snippet>package.main</snippet></ROW><ROW><id>20141234</id><snippet>main.py</snippet></ROW><ROW><id>20141234</id><snippet>options</snippet></ROW><ROW><id>20141234</id><snippet>import package.main</snippet></ROW><ROW><id>20141234</id><snippet>options</snippet></ROW><ROW><id>20141234</id><snippet>package.options</snippet></ROW><ROW><id>20141234</id><snippet>options</snippet></ROW><ROW><id>20141352</id><snippet>lst += ["42"]
</snippet></ROW><ROW><id>20141352</id><snippet>lst</snippet></ROW><ROW><id>20141352</id><snippet>lst = lst + ["42"]
</snippet></ROW><ROW><id>20141352</id><snippet>lst</snippet></ROW><ROW><id>20141352</id><snippet>"42"</snippet></ROW><ROW><id>20141352</id><snippet>lst</snippet></ROW><ROW><id>20141352</id><snippet>lst = ["1"]
print(id(lst))
lst += ["2"]
print(id(lst))
lst = lst + ["3"]
print(id(lst))
</snippet></ROW><ROW><id>20141352</id><snippet>lst</snippet></ROW><ROW><id>20141352</id><snippet>def mutate(myList):
    myList = myList + ["2"] # WRONG way of doing the mutation
tList = ["1"]
mutate(tList)
print(tList)
</snippet></ROW><ROW><id>20141352</id><snippet>['1']</snippet></ROW><ROW><id>20141352</id><snippet>myList</snippet></ROW><ROW><id>20141352</id><snippet>def mutate(myList):
    myList += ["2"] # Or using append function
tList = ["1"]
mutate(tList)
print(tList)
</snippet></ROW><ROW><id>20141352</id><snippet>['1', '2']</snippet></ROW><ROW><id>20141816</id><snippet>",".join(str(elem) for elem in list1)
</snippet></ROW><ROW><id>20141816</id><snippet>",".join(map(str, list1))
</snippet></ROW><ROW><id>20142028</id><snippet>lxml</snippet></ROW><ROW><id>20142028</id><snippet>In [1]: from lxml.etree import parse

In [2]: tree = parse('nodes.xml')

In [3]: tree.xpath('//Node[@name="node3"]')
Out[3]: [&lt;Element Node at 0x180ec30&gt;]
</snippet></ROW><ROW><id>20142028</id><snippet>In [4]: tree.xpath('//Node[@name="node3"][@value="value3"]')
Out[4]: [&lt;Element Node at 0x155d1e0&gt;]
</snippet></ROW><ROW><id>20142055</id><snippet>GroupBy</snippet></ROW><ROW><id>20142055</id><snippet>colormap</snippet></ROW><ROW><id>20142055</id><snippet>df</snippet></ROW><ROW><id>20142055</id><snippet>df.set_index(['col1', 'col2'], append=True, inplace=True)
df.unstack(['col1', 'col2']).xs('value', axis=1).plot(colormap='jet')
</snippet></ROW><ROW><id>20142055</id><snippet>color cycle</snippet></ROW><ROW><id>20142055</id><snippet>pivot</snippet></ROW><ROW><id>20142055</id><snippet>df = pd.pivot_table(df.reset_index(),values='value', 
                    rows=['time'],cols=['col1', 'col2'])

df.plot(colormap='jet')
</snippet></ROW><ROW><id>20142439</id><snippet>form.find()</snippet></ROW><ROW><id>20142439</id><snippet>&lt;meta content="40.12938" itemprop="latitude"&gt;</snippet></ROW><ROW><id>20142439</id><snippet>form.find_all()</snippet></ROW><ROW><id>20142439</id><snippet>url = 'http://www.zillow.com/homedetails/3728-Balcary-Bay-Champaign-IL-61822/89057727_zpid/'
page = urllib2.urlopen(url)
soup = BeautifulSoup(page)

info = soup.findAll('span',{'itemtype':'http://schema.org/GeoCoordinates'}) #this tag + class combination found 4 matches, 4th one was the required one, just selecting that here
cordinates = [i['content'] for i in info[0].find_all('meta')]

print cordinates
</snippet></ROW><ROW><id>20142439</id><snippet>[u'40.12938', u'-88.30766']
</snippet></ROW><ROW><id>20142589</id><snippet>for</snippet></ROW><ROW><id>20142589</id><snippet>length = 0
for char in myString:
    length += 1
print(length)
</snippet></ROW><ROW><id>20142589</id><snippet>len</snippet></ROW><ROW><id>20142589</id><snippet>print(sum(1 for char in myString))
</snippet></ROW><ROW><id>20142589</id><snippet>reduce</snippet></ROW><ROW><id>20142589</id><snippet>from functools import reduce
print(reduce(lambda x, y: x + 1, myString, 0))
</snippet></ROW><ROW><id>20142659</id><snippet>ID</snippet></ROW><ROW><id>20142659</id><snippet>measurement</snippet></ROW><ROW><id>20142659</id><snippet>3</snippet></ROW><ROW><id>20142659</id><snippet>&gt;&gt;&gt; df
                   time  value  ntile
ID    measurement                  
ET001 0            0.00      2      0
      1            0.15      3      0
      2            0.30      4      0
      3            0.45      3      1
      4            0.60      3      1
      5            0.75      2      1
      6            0.90      3      2
ET002 0            0.00      2      0
      1            0.16      5      0
      2            0.32      4      0
      3            0.45      3      1
      4            0.60      3      1
      5            0.75      2      1
</snippet></ROW><ROW><id>20142659</id><snippet>&gt;&gt;&gt; def helper(x):
...     x = x.reset_index()
...     x = x.groupby(x['measurement'].div(3)).mean()
...     del x['measurement']
...     return x
... 
&gt;&gt;&gt; df.groupby(level=0).apply(helper)
                   time     value
ID    measurement                
ET001 0            0.15  3.000000
      1            0.60  2.666667
      2            0.90  3.000000
ET002 0            0.16  3.666667
      1            0.60  2.666667
</snippet></ROW><ROW><id>20142792</id><snippet>f(m2[2,7] = 43)
</snippet></ROW><ROW><id>20142792</id><snippet>if  (a = 1+2)</snippet></ROW><ROW><id>20142792</id><snippet>f( modify_matrix(m1) )
</snippet></ROW><ROW><id>20142792</id><snippet>def modify_matrix(m1):
     m1[2,7] = 2
     return m1
</snippet></ROW><ROW><id>20142817</id><snippet>yield</snippet></ROW><ROW><id>20142817</id><snippet>yield whatever
x = yield whatever
</snippet></ROW><ROW><id>20142892</id><snippet>other_matrix = dummy_matrix
</snippet></ROW><ROW><id>20142892</id><snippet>other_matrix</snippet></ROW><ROW><id>20142892</id><snippet>dummy_matrix</snippet></ROW><ROW><id>20142892</id><snippet>dummy_matrix[x][i] = 2
other_matrix[x][i] = 1   # overwrites the previous value
</snippet></ROW><ROW><id>20142892</id><snippet>other_matrix = [[0 for x in range(2)] for x in range(2)]
</snippet></ROW><ROW><id>20143261</id><snippet>{% for field in form %}

    {%if forloop.counter|divisibleby:"5" %}
        {#after 5 fields, somehow put elements in next row
         of table, paragraph, or using divs etc
        #}
    {%endif%}

    {{field}}
{%endfor%}
</snippet></ROW><ROW><id>20143505</id><snippet>t1 &gt; t2</snippet></ROW><ROW><id>20143505</id><snippet>In [1]: t1 = "2013-11-22 04:03:56"

In [2]: t2 = "2013-11-22 01:03:56"

In [3]: t1 &gt; t2
Out[3]: True

In [4]: t1 &lt; t2
Out[4]: False

In [5]: t1 == t2
Out[5]: False
</snippet></ROW><ROW><id>20143625</id><snippet>if</snippet></ROW><ROW><id>20143625</id><snippet>#!/user/bin/python
x=raw_input("your name?: ")
if x==raw_input("john"):
    print "Welcome john"
</snippet></ROW><ROW><id>20144500</id><snippet>&gt;&gt;&gt; myarray = 'ABCDE'
&gt;&gt;&gt; for i in range(len(myarray) + 1):
...     a = i % len(myarray) ; b = i % len(myarray) + 2
...     print a, b, myarray[a: b]
... 
0 2 AB
1 3 BC
2 4 CD
3 5 DE
4 6 E
0 2 AB
</snippet></ROW><ROW><id>20144500</id><snippet>&gt;&gt;&gt; myarray[::-4]
'EA'
</snippet></ROW><ROW><id>20144500</id><snippet>+ 1</snippet></ROW><ROW><id>20144500</id><snippet>&gt;&gt;&gt; for i in range(len(myarray)):
...     print (myarray*2)[i:i+2]
... 
AB
BC
CD
DE
EA
</snippet></ROW><ROW><id>20144722</id><snippet>In [1]: import redis

In [2]: pool = redis.ConnectionPool(host='localhost', port=6379, db=0)

In [3]: r = redis.Redis(connection_pool=pool)

In [4]: r.hmset('test', {1: 'a', 2: 'b'})
Out[4]: True

In [5]: r.hset('test', 2, 'c')
Out[5]: 0L

In [6]: r.hget('test', 2)
Out[6]: 'c'
</snippet></ROW><ROW><id>20144727</id><snippet>urllib.quote</snippet></ROW><ROW><id>20144727</id><snippet>urllib.quote_plus</snippet></ROW><ROW><id>20144727</id><snippet>import urllib
import urllib2

def celsius(a):
    responsex = urllib2.urlopen('http://gcdc2013-easyapisproject.appspot.com/unitconversion?q=' + urllib.quote(a + ' in celsius'))
    html = responsex.read()
    responsex.close()
    html = html[1:] #remove first {
    html = html[:-1] #remove last }
    html = html.split('}{') #split and put each resutls to array
    return html[0]

print "Enter a city name:",
q = raw_input() #get word from user
response = urllib2.urlopen('http://gcdc2013-easyapisproject.appspot.com/weather?q='+urllib.quote(q))
html = response.read()
print repr(html)
response.close()
html = html[1:] #remove first {
html = html[:-1] #remove last }
html = html.split('}{') #split and put each resutls to array
print "Today weather is " + html[1]
print "Temperature is " + html[3]
print "Temperature is " + celsius(html[3].split()[0])
</snippet></ROW><ROW><id>20144727</id><snippet>celsius</snippet></ROW><ROW><id>20144727</id><snippet>html</snippet></ROW><ROW><id>20144727</id><snippet>htmlx</snippet></ROW><ROW><id>20144727</id><snippet>html</snippet></ROW><ROW><id>20144727</id><snippet>htmlx</snippet></ROW><ROW><id>20144841</id><snippet>    fileExt = {'png': {'Content-Type': 'image/png'}, 'jpe': {'Content-Type':'image/jpeg'}, 
    'jpg': {'Content-Type': 'image/jpeg'}, 'png': {'Content-Type': 'image/png'}, 
    'mp4': {'Content-Type': 'video/mpeg'}, 'mp3': {'Content-Type': 'audio/mpeg'}, 
    '3gp': {'Content-Type': 'video/3gpp'}, 'flv': {'Content-Type': 'video/x-flv'}, 
    'flv': {'Content-Type': 'video/x-flv'}}
    handler = fileExt.get(ext)
</snippet></ROW><ROW><id>20144841</id><snippet>    key.copy(key.bucket, key.name, preserve_acl=True, metadata=handler)
</snippet></ROW><ROW><id>20145002</id><snippet>rel</snippet></ROW><ROW><id>20145002</id><snippet>rel, = graph_db.create(rel((a, "MANAGES",b)))
 ^                      ^
 |                      |
this             overwrites this
</snippet></ROW><ROW><id>20145002</id><snippet>ab, = graph_db.create(rel((a, "MANAGES",b)))
</snippet></ROW><ROW><id>20145184</id><snippet>{'stream', 'auth'}</snippet></ROW><ROW><id>20145184</id><snippet>tags = {'stream': {}, 'auth': {}}
tags["stream"]["path"]= ["/streams"]
tags['stream']['attribute']= ['id', 'secure', 'cpcode', 'format', 'event_pattern']
</snippet></ROW><ROW><id>20145184</id><snippet>&gt;&gt;&gt; type({'stream', 'auth'})
&lt;type 'set'&gt;
&gt;&gt;&gt; type({'stream': {}, 'auth': {}})
&lt;type 'dict'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20145587</id><snippet>results</snippet></ROW><ROW><id>20145587</id><snippet>items = [{
    'clients': [{'value': i[4], 'first_name': i[1], 'last_name': i[3]} for i in results]
}]
</snippet></ROW><ROW><id>20145587</id><snippet>items = [{
    'clients': [{'value': value, 'first_name': first, 'last_name': last} 
                for _, first, _, last, value in results]
}]
</snippet></ROW><ROW><id>20145587</id><snippet>clients = []
items = [{'clients': clients}]
for _, first, _, last, value in results:
    clients.append({'value': value, 'first_name': first, 'last_name': last})
</snippet></ROW><ROW><id>20145587</id><snippet>_</snippet></ROW><ROW><id>20145587</id><snippet>_</snippet></ROW><ROW><id>20145812</id><snippet>for table in zip( *[iter(tds)]*3 ):
    row = [', '.join([re.sub('\s+', ' ', text).strip().encode('utf8') 
                        for text in td.find_all(text=True) 
                        if text.strip()])
                       for td in table]
    print ' | '.join(row)
</snippet></ROW><ROW><id>20145812</id><snippet>Name &amp; Address of the Company | E Mail &amp; Web | Product Manufactured
A K Ponnusamy &amp; Co | cjm@yahoo.co.in | Manufacturing of Rough Castings
Aelenke PL Industrials |  | All types of Pulleys
...
</snippet></ROW><ROW><id>20145873</id><snippet>sorted(inputlist, key=lambda e: (len(e[0]), e[0], e[1]))
</snippet></ROW><ROW><id>20145873</id><snippet>e[0]</snippet></ROW><ROW><id>20145878</id><snippet>logon(device)
</snippet></ROW><ROW><id>20145878</id><snippet>p=logon(deive)
</snippet></ROW><ROW><id>20145927</id><snippet>(k, v), = d.items()
</snippet></ROW><ROW><id>20145927</id><snippet>[(k, v)] = d.items()
</snippet></ROW><ROW><id>20145927</id><snippet>k, v = d.items()[0]
</snippet></ROW><ROW><id>20145927</id><snippet>&gt;&gt;&gt; d = {'foo': 'bar'}
&gt;&gt;&gt; (k, v), = d.items()
&gt;&gt;&gt; k, v
('foo', 'bar')
&gt;&gt;&gt; [(k, v)] = d.items()
&gt;&gt;&gt; k, v
('foo', 'bar')
&gt;&gt;&gt; k, v = d.items()[0]
&gt;&gt;&gt; k, v
('foo', 'bar')
</snippet></ROW><ROW><id>20146066</id><snippet>z, pts = zip(*[(z, pt) for z, pt in zip(z, pts) if z &lt;= 3])
print z, pts
</snippet></ROW><ROW><id>20146066</id><snippet>(3, 1, 2) ((3, 3), (1, 1), (2, 2))
</snippet></ROW><ROW><id>20146221</id><snippet>with_tail=False</snippet></ROW><ROW><id>20146221</id><snippet>print(etree.tostring(element, encoding="unicode", pretty_print=True, with_tail=False))
</snippet></ROW><ROW><id>20146221</id><snippet>lxml.etree.tostring</snippet></ROW><ROW><id>20146263</id><snippet>{% url 'edit_match' tournament_id=... pk=match.pk %}
</snippet></ROW><ROW><id>20146263</id><snippet>pk</snippet></ROW><ROW><id>20146263</id><snippet>edit_match</snippet></ROW><ROW><id>20146263</id><snippet>edit_match</snippet></ROW><ROW><id>20146471</id><snippet>FILE*</snippet></ROW><ROW><id>20146471</id><snippet>long</snippet></ROW><ROW><id>20146471</id><snippet>struct XDRFILE</snippet></ROW><ROW><id>20146471</id><snippet>typedef</snippet></ROW><ROW><id>20146471</id><snippet>XDRFILE</snippet></ROW><ROW><id>20146471</id><snippet>XDRFILE</snippet></ROW><ROW><id>20146471</id><snippet>struct</snippet></ROW><ROW><id>20146535</id><snippet>where_con</snippet></ROW><ROW><id>20146535</id><snippet>colname_variable__range</snippet></ROW><ROW><id>20146535</id><snippet>#k = 'medical_home_last_visit__range'
where_con[k] = (start, end)
qs_new = model_obj.objects.filter(**where_con)
</snippet></ROW><ROW><id>20146535</id><snippet>model_obj.objects.filter(medical_home_last_visit__range=(start, end))
</snippet></ROW><ROW><id>20146535</id><snippet>where_con</snippet></ROW><ROW><id>20146535</id><snippet>#k = 'some_date__lte'
where_con[k] = datetime.datetime.now()
</snippet></ROW><ROW><id>20146541</id><snippet>def update_slug(mapper, connection, target):
    target.slug = slugify(target.name)
    if target.name_en:
        target.slug_en = slugify(target.name_en)

event.listen(Post, 'before_insert', update_slug_with_date)
event.listen(Post, 'before_update', update_slug_with_date)
</snippet></ROW><ROW><id>20146541</id><snippet>b = B()
b.a = target
b.save()
</snippet></ROW><ROW><id>20146670</id><snippet>&lt;form ... encrypt="multipart/form-data"&gt;</snippet></ROW><ROW><id>20146670</id><snippet>encrypt</snippet></ROW><ROW><id>20146670</id><snippet>enctype</snippet></ROW><ROW><id>20146833</id><snippet>&gt;&gt;&gt; li = ["image1.jpg", "image2.jpg", "image3.jpg", "image4.jpg"]
&gt;&gt;&gt; s = "a tag [[Media:]] - I want to replace all [[Media:]] tags with a names of pictures stored in a list. For example in a converted document there will be 5 [[Media:]] tags d by a tag [[Media:]] - I want to replace all [[Media:]] tags"
&gt;&gt;&gt; for item in li:
...    s = s.replace("[[Media:]]", item, 1)  # max. 1 replace per call
...
&gt;&gt;&gt; s
'a tag image1.jpg  - I want to replace all image2.jpg  tags with a names of pictures stored in a list. For example in a converted document there will be 5 image3.jpg  tags d by a tag image4.jpg  - I want to replace all image5.jpg  tags'
</snippet></ROW><ROW><id>20146833</id><snippet>def interleave(original, tag, replacements):
    items = original.split(tag)
    return "".join((text+repl for text,repl in zip(items, replacements+[""])))
</snippet></ROW><ROW><id>20146833</id><snippet>&gt;&gt;&gt; interleave(s, "[[Media:]]", li)
'a tag image1.jpg  - I want to replace all image2.jpg  tags with a names of pictures stored in a list. For example in a converted document there will be 5 image3.jpg  tags d by a tag image4.jpg  - I want to replace all image5.jpg  tags'
</snippet></ROW><ROW><id>20146892</id><snippet>give_it_to_me</snippet></ROW><ROW><id>20146892</id><snippet>try</snippet></ROW><ROW><id>20146892</id><snippet>except</snippet></ROW><ROW><id>20146892</id><snippet>def give_it_to_me(d):
    # This won't crash if key 'it' does not exist in a normal dict.
    # It returns just None in that case.
    # It returns the default value of an defaultdict if the key is not found.
    try:
        return d['it']
    except KeyError:
        return None
</snippet></ROW><ROW><id>20146901</id><snippet>dict = {...}</snippet></ROW><ROW><id>20146901</id><snippet>something.py</snippet></ROW><ROW><id>20146901</id><snippet>import something</snippet></ROW><ROW><id>20146901</id><snippet>something.dict</snippet></ROW><ROW><id>20146940</id><snippet>k</snippet></ROW><ROW><id>20146940</id><snippet>where</snippet></ROW><ROW><id>20146940</id><snippet>reshape</snippet></ROW><ROW><id>20146940</id><snippet>+</snippet></ROW><ROW><id>20146940</id><snippet>*</snippet></ROW><ROW><id>20146989</id><snippet>colors</snippet></ROW><ROW><id>20146989</id><snippet>contourf</snippet></ROW><ROW><id>20146989</id><snippet>Normalize</snippet></ROW><ROW><id>20146989</id><snippet>norm</snippet></ROW><ROW><id>20146989</id><snippet>matplotlib.colors.from_levels_and_colors</snippet></ROW><ROW><id>20146989</id><snippet>colors=sequence_of_colors</snippet></ROW><ROW><id>20146989</id><snippet>norm</snippet></ROW><ROW><id>20146989</id><snippet>Normalize</snippet></ROW><ROW><id>20146989</id><snippet>imshow</snippet></ROW><ROW><id>20146989</id><snippet>scatter</snippet></ROW><ROW><id>20146989</id><snippet>imshow</snippet></ROW><ROW><id>20146989</id><snippet>contourf</snippet></ROW><ROW><id>20146989</id><snippet>contourf</snippet></ROW><ROW><id>20146989</id><snippet>interpolation</snippet></ROW><ROW><id>20146989</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize

class MidpointNormalize(Normalize):
    def __init__(self, vmin=None, vmax=None, midpoint=None, clip=False):
        self.midpoint = midpoint
        Normalize.__init__(self, vmin, vmax, clip)

    def __call__(self, value, clip=None):
        # I'm ignoring masked values and all kinds of edge cases to make a
        # simple example...
        x, y = [self.vmin, self.midpoint, self.vmax], [0, 0.5, 1]
        return np.ma.masked_array(np.interp(value, x, y))

data = np.random.random((10,10))
data = 10 * (data - 0.8)

fig, ax = plt.subplots()
norm = MidpointNormalize(midpoint=0)
im = ax.imshow(data, norm=norm, cmap=plt.cm.seismic, interpolation='none')
fig.colorbar(im)
plt.show()
</snippet></ROW><ROW><id>20146989</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import from_levels_and_colors

data = np.random.random((10,10))
data = 10 * (data - 0.8)

num_levels = 20
vmin, vmax = data.min(), data.max()
midpoint = 0
levels = np.linspace(vmin, vmax, num_levels)
midp = np.mean(np.c_[levels[:-1], levels[1:]], axis=1)
vals = np.interp(midp, [vmin, midpoint, vmax], [0, 0.5, 1])
colors = plt.cm.seismic(vals)
cmap, norm = from_levels_and_colors(levels, colors)

fig, ax = plt.subplots()
im = ax.imshow(data, cmap=cmap, norm=norm, interpolation='none')
fig.colorbar(im)
plt.show()
</snippet></ROW><ROW><id>20147019</id><snippet>__qualname__</snippet></ROW><ROW><id>20147019</id><snippet>&gt;&gt;&gt; def f():
...     pass
...
&gt;&gt;&gt; f.__qualname__ = 'g'
&gt;&gt;&gt; f
&lt;function g at 0x0000000002AE5C80&gt;
</snippet></ROW><ROW><id>20147019</id><snippet>repr()</snippet></ROW><ROW><id>20147019</id><snippet>str()</snippet></ROW><ROW><id>20147019</id><snippet>__qualname__</snippet></ROW><ROW><id>20147019</id><snippet>__name__</snippet></ROW><ROW><id>20147156</id><snippet>"import sys, json; data=json.loads(sys.stdin.read()); print data.get('$1') or ''"
</snippet></ROW><ROW><id>20147398</id><snippet>import numpy as np
from scipy.signal import convolve2d

old_matrix=[[0,0,0,1,1,0],
            [1,1,1,1,0,0],
            [0,0,1,0,0,0],
            [1,0,0,0,0,1],
            [0,1,1,1,1,0],
            [1,0,0,1,1,0]]

a = np.array(old_matrix)
k = np.ones((2,2))

# compute sums at each submatrix
local_sums = convolve2d(a, k, mode='valid')

# restrict to sums corresponding to non-overlapping
# sub-matrices with local_sums[::2, ::2] and check if
# there are more 1 than 0 elements
result = local_sums[::2, ::2] &gt; 2

# convert back to Python list if needed
new_matrix = result.astype(np.int).tolist()
</snippet></ROW><ROW><id>20147398</id><snippet>&gt;&gt;&gt; result.astype(np.int).tolist()
[[0, 1, 0], [0, 0, 0], [0, 1, 0]]
</snippet></ROW><ROW><id>20147398</id><snippet>convolve2d</snippet></ROW><ROW><id>20147398</id><snippet>local_sums[::2, ::2]</snippet></ROW><ROW><id>20147492</id><snippet>self.v = StringVar()
self.cb1 = CheckButton( self, text=row[1], variable=self.v )
</snippet></ROW><ROW><id>20147492</id><snippet>self.v.get()
</snippet></ROW><ROW><id>20147492</id><snippet>variable</snippet></ROW><ROW><id>20147550</id><snippet>sys.platform == 'linux2'</snippet></ROW><ROW><id>20147550</id><snippet>sys.platform</snippet></ROW><ROW><id>20147550</id><snippet>'linux2'</snippet></ROW><ROW><id>20147597</id><snippet>QScrollBar</snippet></ROW><ROW><id>20147630</id><snippet>cache_control</snippet></ROW><ROW><id>20147630</id><snippet>location ~* \.(css|js|gif|jpe?g|png)$ {
  expires 168h;
  add_header Pragma public;
  add_header Cache-Control "public, must-revalidate, proxy-revalidate";
}
</snippet></ROW><ROW><id>20147630</id><snippet>STATIC_PATH</snippet></ROW><ROW><id>20147697</id><snippet>def getPermutations(string):
    if len(string) == 1: # Base Case
        return [string]
    else:                # Not base case
        result = []
        for i in range(len(string)):
            candidate = string[i]
            remaining = string[0:i] + string[i+1:]
            babies = getPermutations(remaining)  # Faith!
            for word in babies:
                result.append(candidate + word)
        return result
</snippet></ROW><ROW><id>20147697</id><snippet>&gt;&gt;&gt; myPerms = sorted( getPermutations("ABC") )
&gt;&gt;&gt; for p in myPerms: print p
... 
ABC
ACB
BAC
BCA
CAB
CBA
</snippet></ROW><ROW><id>20147735</id><snippet>ls.index(filter(lambda x:x!=0,ls)[0])</snippet></ROW><ROW><id>20147735</id><snippet>filter(lambda x:x!=0,ls)[0]</snippet></ROW><ROW><id>20147735</id><snippet>1</snippet></ROW><ROW><id>20147735</id><snippet>ls.index(1)</snippet></ROW><ROW><id>20147735</id><snippet>Series</snippet></ROW><ROW><id>20147735</id><snippet>Series.index</snippet></ROW><ROW><id>20147735</id><snippet>list.index</snippet></ROW><ROW><id>20147735</id><snippet>def titleNot0(ls):
    try:
        return filter(lambda x:x!=0,ls)[0]
    except IndexError: 
        return 2
</snippet></ROW><ROW><id>20147735</id><snippet>&gt;&gt;&gt; df = pd.DataFrame([[1,1,1,2,3],[0,1,2,0,1]]).T
&gt;&gt;&gt; df.columns = list('AB')
&gt;&gt;&gt; df.groupby('A')['B'].agg(titleNot0)
A
1    1
2    2
3    1
Name: B, dtype: int64
</snippet></ROW><ROW><id>20147756</id><snippet>p = Element('x')
q = Element('y')
r = SubElement(p, 'z')
q.append(r)
</snippet></ROW><ROW><id>20147756</id><snippet>dump(p)
&lt;x&gt;&lt;z /&gt;&lt;/x&gt;
dump(q)
&lt;y&gt;&lt;z /&gt;&lt;/y&gt;
</snippet></ROW><ROW><id>20147756</id><snippet>dump(p)
&lt;x/&gt;
dump(q)
&lt;y&gt;
  &lt;z/&gt;
&lt;/y&gt;
</snippet></ROW><ROW><id>20147756</id><snippet>r</snippet></ROW><ROW><id>20147818</id><snippet>list</snippet></ROW><ROW><id>20147818</id><snippet>Counter</snippet></ROW><ROW><id>20147818</id><snippet>from collections import defaultdict
d = defaultdict(list)
for key, value in cnt.items():
     d[value].append(key)     

for key, value in d.items():                                                
   print '{}:{}'.format(key, " ".join(value))                              

2:windows
3:android iphone
5:apple
....    
</snippet></ROW><ROW><id>20147818</id><snippet>Counter</snippet></ROW><ROW><id>20147818</id><snippet>cnt = Counter(keywords)
</snippet></ROW><ROW><id>20147941</id><snippet>np.float32</snippet></ROW><ROW><id>20147941</id><snippet>a = np.array([ 883,  931,  874], dtype=np.float64)

a+0.1-a
# array([ 0.1,  0.1,  0.1])

((a+0.1-a)-0.1) / 0.1
# array([  2.27318164e-13,   2.27318164e-13,   2.27318164e-13])
</snippet></ROW><ROW><id>20147941</id><snippet>np.array((0.1,)*3)</snippet></ROW><ROW><id>20147941</id><snippet>float64</snippet></ROW><ROW><id>20148254</id><snippet>&gt;&gt;&gt; for order, pairs in sorted(d.items()):
        print dict(pairs)['hostname']


hello
hi
</snippet></ROW><ROW><id>20148281</id><snippet>largeStraight = [{1, 2, 3, 4, 5}, {2, 3, 4, 5, 6}]
smallStraight = [{1, 2, 3, 4}, {2, 3, 4, 5} , {3 ,4, 5, 6}]
</snippet></ROW><ROW><id>20148281</id><snippet>if any(ls.issubset(dice) for ls in largeStraight):
    # a large straight
elif any(ss.issubset(dice) for ss in smallStraight):
    # a small straight
</snippet></ROW><ROW><id>20148281</id><snippet>largeStraight</snippet></ROW><ROW><id>20148281</id><snippet>smallStraight</snippet></ROW><ROW><id>20148281</id><snippet>any()</snippet></ROW><ROW><id>20148281</id><snippet>&gt;&gt;&gt; dice = [2, 3, 5, 1, 4]
&gt;&gt;&gt; if any(ls.issubset(dice) for ls in largeStraight):
...     print 'Large!'
... elif any(ss.issubset(dice) for ss in smallStraight):
...     print 'Small!'
... 
Large!
&gt;&gt;&gt; dice = [2, 3, 5, 1, 6]
&gt;&gt;&gt; if any(ls.issubset(dice) for ls in largeStraight):
...     print 'Large!'
... elif any(ss.issubset(dice) for ss in smallStraight):
...     print 'Small!'
... 
&gt;&gt;&gt; dice = [2, 3, 6, 4, 1]
&gt;&gt;&gt; if any(ls.issubset(dice) for ls in largeStraight):
...     print 'Large!'
... elif any(ss.issubset(dice) for ss in smallStraight):
...     print 'Small!'
... 
Small!
</snippet></ROW><ROW><id>20148532</id><snippet>re.sub(r'^(\t*)', r'\1 Added String here. ', inputtext)
</snippet></ROW><ROW><id>20148532</id><snippet>^</snippet></ROW><ROW><id>20148532</id><snippet>\t</snippet></ROW><ROW><id>20148532</id><snippet>*</snippet></ROW><ROW><id>20148532</id><snippet>\1</snippet></ROW><ROW><id>20148532</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; a = '\t\t\tHere is the next part of string.  More garbage.'
&gt;&gt;&gt; re.sub(r'^(\t*)', r'\1 Added String here. ', a)
'\t\t\t Added String here. Here is the next part of string.  More garbage.'
&gt;&gt;&gt; re.sub(r'^(\t*)', r'\1 Added String here. ', 'No leading tabs.')
' Added String here. No leading tabs.'
</snippet></ROW><ROW><id>20148609</id><snippet>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;ctype.h&gt;
#include &lt;assert.h&gt;

void decode( const char *encstr, 
             size_t decrypt_len, 
             char decrypt[ static decrypt_len ] )
{
  assert( encstr );

  size_t len = strlen( encstr );
  //
  // Create a local copy of the encrypted string, since we want to 
  // modify the input below
  //
  char lencstr[len + 1];
  strcpy( lencstr, encstr );

  if ( len % 2 )
    lencstr[len - 1] = 0;

  const char *cc = lencstr;
  const char *nc = cc + 1;

  while ( *cc )
  {
    int v;

    if ( *cc == '0' )
      v = *nc;
    else if ( *cc == 'z' )
      v = *cc - *nc + 56;
    else if ( isdigit( *cc )  )
      v = (*cc - 49) * 25 + 181 - *nc;
    else
      v = *cc - *nc;

    if ( v &lt; 0 )
      v = ( v % 256 ) + 256;
    else if ( v &gt; 255 )
      v = v % 256;
    *decrypt++ = (char) v;
    cc += 2;
    nc += 2;
  }
  *decrypt = 0;
}

int main( void )
{
  const char *enc = "0T1M1L1BtT1L1BtT1TtT1B1T1H1E1I1PtT1B2Z1C1L1G1NtTt"
                    "NtT2Z1M1T2ZtT2W1PtT1T1C1PtTzutT2Z1P1B2Z1L1G1N";
  char dec[ strlen(enc) + 1 ];

  printf( "Encrypted string: %s\n", enc );
  decode( enc, sizeof dec, dec );
  printf( "Decrypted string: %s\n", dec );
  return 0;
}
</snippet></ROW><ROW><id>20148929</id><snippet>&gt;&gt;&gt; def func(*args, **kw):
        print(args, kw)


&gt;&gt;&gt; func(1, b = 3, *(2,), **{'d':4})
(1, 2) {'b': 3, 'd': 4}
</snippet></ROW><ROW><id>20148929</id><snippet>2</snippet></ROW><ROW><id>20148929</id><snippet>3</snippet></ROW><ROW><id>20148929</id><snippet>b</snippet></ROW><ROW><id>20149236</id><snippet>aspect</snippet></ROW><ROW><id>20149236</id><snippet>imshow</snippet></ROW><ROW><id>20149236</id><snippet>plt.imshow(grid1,
    extent=(x1.min(), x1.max(), y1.min(), y1.max()),
    origin='lower', vmin=-5, vmax=5, aspect='auto',
    interpolation='nearest', cmap=cm.gist_rainbow)
</snippet></ROW><ROW><id>20149634</id><snippet>def binsearch(field, lower=True, a=0, b=None):
  if b is None:
    b = len(field)
  while a + 1 &lt; b:
    c = (a + b) / 2
    if lower:
      if field[c] &lt; c:
        a = c
      else:
        b = c
    else:  # search for upper bound
      if field[c] &gt; c:
        b = c
      else:
        a = c
  return b if lower else a

def indexMatchCount(field):
  upper = binsearch(field, lower=False)
  lower = binsearch(field, b=upper+1)
  return upper - lower + 1
</snippet></ROW><ROW><id>20149634</id><snippet>field = list({ random.randint(-10, 30) for i in range(30) })
field.sort()
upper = binsearch(field, lower=False)
lower = binsearch(field, b=upper+1)
for i, f in enumerate(field):
  print lower &lt;= i &lt;= upper, i == f, i, f
</snippet></ROW><ROW><id>20149838</id><snippet>&gt;&gt;&gt; bigNum=46623871433466988486147975697094761425185742805822717249007
&gt;&gt;&gt; bigNum % 3
0L
&gt;&gt;&gt; divmod(bigNum, 3)
(15541290477822329495382658565698253808395247601940905749669L, 0L)
&gt;&gt;&gt; _[0] * 3 == bigNum
True
</snippet></ROW><ROW><id>20149838</id><snippet>bigNum</snippet></ROW><ROW><id>20149838</id><snippet>&gt;&gt;&gt; sum(map(int, str(bigNum)))
288
&gt;&gt;&gt; 288 % 3
0
</snippet></ROW><ROW><id>20149843</id><snippet>classmethod</snippet></ROW><ROW><id>20149843</id><snippet>class Animal(object):

    @classmethod
    def create(cls):
        return cls()

class Frog(Animal):
    pass

&gt;&gt;&gt; Animal.create()
&lt;Animal object at 0x51fc190&gt;
&gt;&gt;&gt; Frog.create()
&lt;Frog object at 0x51fc610&gt;
</snippet></ROW><ROW><id>20150086</id><snippet>Frame</snippet></ROW><ROW><id>20150086</id><snippet>import tkinter as tk
from tkinter import *
class Gui():
    def __init__(self, root):
        self.root=root
        self.entry = tk.Entry(root)
        stvar=tk.StringVar()
        stvar.set("one")

        self.canvas=tk.Canvas(root, width=300, height=200, background='white')
        self.canvas.grid(row=0,column=1)

        frame = Frame(self.root)
        frame.grid(row=0,column=0, sticky="n")

        self.option=tk.OptionMenu(frame, stvar, "one", "two", "three")
        label1=Label(frame, text="Figure").grid(row=0,column=0, sticky="nw")
        label2=Label(frame, text="X").grid(row=1,column=0, sticky="w")
        label3=Label(frame, text="Y").grid(row=2,column=0, sticky="w")
        self.option.grid(row=0,column=1,sticky="nwe")
        entry = Entry(frame).grid(row = 1,column = 1,sticky = E+ W)
        entry1 = Entry(frame).grid(row = 2,column = 1, sticky = E)
        Button1=Button(frame,text="Draw").grid(row = 3,column = 1, sticky = "we")
        figure1=self.canvas.create_rectangle(80, 80, 120, 120, fill="blue")

        #Grid.columnconfigure(self.root,1,weight=1, size=200)
if __name__== '__main__':
    root=tk.Tk()
    gui=Gui(root)
    root.mainloop()
</snippet></ROW><ROW><id>20150172</id><snippet>import string

def long_enough(pw):
    'Password must be at least 6 characters'
    return len(pw) &gt;= 6

def short_enough(pw):
    'Password cannot be more than 12 characters'
    return len(pw) &lt;= 12

def has_lowercase(pw):
    'Password must contain a lowercase letter'
    return len(set(string.ascii_lowercase).intersection(pw)) &gt; 0

def has_uppercase(pw):
    'Password must contain an uppercase letter'
    return len(set(string.ascii_uppercase).intersection(pw)) &gt; 0

def has_numeric(pw):
    'Password must contain a digit'
    return len(set(string.digits).intersection(pw)) &gt; 0

def has_special(pw):
    'Password must contain a special character'
    return len(set(string.punctuation).intersection(pw)) &gt; 0

def test_password(pw, tests=[long_enough, short_enough, has_lowercase, has_uppercase, has_numeric, has_special]):
    for test in tests:
        if not test(pw):
            print(test.__doc__)
            return False
    return True

def main():
    pw = input('Please enter a test password:')
    if test_password(pw):
        print('That is a good password!')

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>20150200</id><snippet>dic2 = {key: [{k: v} for sublist in value for k, v in sublist] for key, value in dic1.items()}
</snippet></ROW><ROW><id>20150200</id><snippet>&gt;&gt;&gt; {key: [{k: v} for sublist in value for k, v in sublist] for key, value in dic1.items()}
{'removed ': [{'apple': '5'}, {'makeup': '4'}, {'trash': '4'}, {'stain': '4'}], 'persuaded ': [{'teacher': '6'}, {'group': '5'}, {'man': '5'}, {'girl': '5'}]}
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(_)
{'persuaded ': [{'teacher': '6'}, {'group': '5'}, {'man': '5'}, {'girl': '5'}],
 'removed ': [{'apple': '5'}, {'makeup': '4'}, {'trash': '4'}, {'stain': '4'}]}
</snippet></ROW><ROW><id>20150200</id><snippet>dic2 = {key: {k: v for sublist in value for k, v in sublist} for key, value in dic1.items()}
</snippet></ROW><ROW><id>20150200</id><snippet>&gt;&gt;&gt; {key: {k: v for sublist in value for k, v in sublist} for key, value in dic1.items()}
{'removed ': {'stain': '4', 'trash': '4', 'apple': '5', 'makeup': '4'}, 'persuaded ': {'group': '5', 'teacher': '6', 'man': '5', 'girl': '5'}}
&gt;&gt;&gt; pprint(_)
{'persuaded ': {'girl': '5', 'group': '5', 'man': '5', 'teacher': '6'},
 'removed ': {'apple': '5', 'makeup': '4', 'stain': '4', 'trash': '4'}}
</snippet></ROW><ROW><id>20150416</id><snippet>from bs4 import BeautifulSoup
import requests

def find_files():
    url = "http://www.python.org"
    soup = BeautifulSoup(requests.get(url).text)

    hrefs = []

    for a in soup.find_all('a'):
        hrefs.append(a['href'])

    return hrefs

list_of_links = find_files()

## show what you've found:
for link in list_of_links:
    print link
</snippet></ROW><ROW><id>20150416</id><snippet>url</snippet></ROW><ROW><id>20150416</id><snippet>from bs4 import BeautifulSoup
import requests

def find_files(url):

    soup = BeautifulSoup(requests.get(url).text)

    for a in soup.find_all('a'):
        yield a['href']

for link in find_files("http://www.python.org"):
    print link
</snippet></ROW><ROW><id>20150416</id><snippet>url</snippet></ROW><ROW><id>20150611</id><snippet>from prog import TaskThread
import sys
from PyQt4 import QtCore, QtGui

class flexemWidget(QtGui.QWidget):
  def __init__(self):
    super(flexemWidget, self).__init__()
    self.btn = QtGui.QPushButton('Run!', self)
    self.btn.clicked.connect(self.onStart)
    self.myLongTask = TaskThread()
    self.myLongTask.sayHello.connect(self.sayHi)
    self.show()

  def onStart(self):
    self.myLongTask.start()

  def sayHi(self):
    print "hello world" 

app = QtGui.QApplication(sys.argv)
ex = flexemWidget()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>20150611</id><snippet>from PyQt4 import QtCore 
from sm import sc
class TaskThread(QtCore.QThread):
  sayHello = QtCore.pyqtSignal()
  def run(self):
    sc(self.sayHello)
</snippet></ROW><ROW><id>20150611</id><snippet>from PyQt4 import QtCore
class sc():
  def __init__(self, signal):
    for i in range(0,50):
      print i
      if i == 5: signal.emit()
</snippet></ROW><ROW><id>20150633</id><snippet>HTML = """"&lt;div class="body"&gt;
    &lt;p&gt;this is the&lt;br /&gt;
    text that i want to&lt;br /&gt;
    .&lt;br /&gt;
    .&lt;br /&gt;
    get from html file&lt;br /&gt;
    .&lt;br /&gt;
    .&lt;/p&gt;
    &lt;div class="sender"&gt;someone&lt;/div&gt;
&lt;/div&gt;
"""
soup = BeautifulSoup(HTML)
print soup.p.get_text()
</snippet></ROW><ROW><id>20150742</id><snippet>time.sleep(seconds)</snippet></ROW><ROW><id>20150742</id><snippet>import threading
import time

def func_1():
    i = 0
    while i&lt;5:
        i += 1
        time.sleep(1.5) # Do some work for 1.5 seconds
        print 'func_1'

def func_2():
    i = 0
    while i&lt;5:
        i += 1
        time.sleep(0.5) # Do some work for 0.5 seconds
        print 'func_2'

thread1 = threading.Thread(target=func_1)
thread1.start()
thread2 = threading.Thread(target=func_2)
thread2.start()
</snippet></ROW><ROW><id>20150742</id><snippet>func_2 #0.5 seconds elapsed
func_2 #1.0 seconds elapsed
func_1 #1.5 seconds elapsed finally func_1 :)
func_2 #1.5 threading is not mutithreading! ;)
func_2 #2.0 seconds elapsed
func_2 #2.5 seconds elapsed and since variable i is 5 func_2 is no more :(
func_1 #3.0 seconds elapsed
func_1 #4.5 seconds elapsed
func_1 #6.0 seconds elapsed
func_1 #7.5 seconds elapsed
</snippet></ROW><ROW><id>20150742</id><snippet>threading is not mutithreading! ;)</snippet></ROW><ROW><id>20150742</id><snippet>func_1</snippet></ROW><ROW><id>20150742</id><snippet>func_2</snippet></ROW><ROW><id>20150742</id><snippet>1.5 seconds</snippet></ROW><ROW><id>20150742</id><snippet>multiprocessing</snippet></ROW><ROW><id>20150742</id><snippet>threading</snippet></ROW><ROW><id>20150968</id><snippet>map</snippet></ROW><ROW><id>20150968</id><snippet>iterable</snippet></ROW><ROW><id>20150968</id><snippet>list(map(...))</snippet></ROW><ROW><id>20150968</id><snippet>.append</snippet></ROW><ROW><id>20150968</id><snippet>append</snippet></ROW><ROW><id>20150968</id><snippet>.append</snippet></ROW><ROW><id>20150968</id><snippet>square</snippet></ROW><ROW><id>20150968</id><snippet>map</snippet></ROW><ROW><id>20150968</id><snippet>map</snippet></ROW><ROW><id>20150968</id><snippet>lambda</snippet></ROW><ROW><id>20151058</id><snippet>class student:
    def __init__(self, student_name):
        self.name = student_name

class homework:

    def __init__(self,student_name,assignment_name,assignment_subject,grade):
        self.student = student(student_name)
        self.assignment_name = assignment_name
        self.assignment_subject = assignment_subject
        self.grade = grade

    @classmethod
    def new_hw(cls, line):
        return cls(line[0],line[1],line[2],line[3])

    @classmethod
    def get_all_grades(cls, student_name, homework_list):
        return [ x.grade for x in homework_list if student_name is x.student.name]

lines = [["abc","a","b","A"],["abc","c","d","B"],["ebc","c","d","B"]]
hw_list = [homework.new_hw(line) for line in lines]
print homework.get_all_grades("abc",hw_list)
</snippet></ROW><ROW><id>20151117</id><snippet>return gcd((b, a % b))
</snippet></ROW><ROW><id>20151340</id><snippet>java.util.Map.Entry</snippet></ROW><ROW><id>20151340</id><snippet>#!/usr/bin/jython
import java.util.HashMap

channelList = java.util.HashMap()
channelList.put("Hello", "World")
it = channelList.entrySet().iterator()
while (it.hasNext()):
    e = it.next()
    print("key = " + e.getKey())
    print("value = " + e.getValue())
</snippet></ROW><ROW><id>20151340</id><snippet>$ ./test.py
key = Hello
value = World
$
</snippet></ROW><ROW><id>20151441</id><snippet>char</snippet></ROW><ROW><id>20151441</id><snippet>modified_string = ""
for char in string:
     #whatever condition
     modified_string += #value to be added
</snippet></ROW><ROW><id>20151447</id><snippet>def DagNode ( xform ):
    selectionList = OpenMaya.MSelectionList()
    try:
        selectionList.add( xform )
    except:
        return None
    dagPath = OpenMaya.MDagPath()
    selectionList.getDagPath( 0, dagPath )
    return dagPath
</snippet></ROW><ROW><id>20151476</id><snippet>&gt;&gt;&gt; from re import findall
&gt;&gt;&gt; somestr = 'ABCDABCDABCDABCDABCDABCD'
&gt;&gt;&gt; # no overlapping
&gt;&gt;&gt; for i in findall(".{3}", somestr):
...     print(i)
...
ABC
DAB
CDA
BCD
ABC
DAB
CDA
BCD
&gt;&gt;&gt; # overlapping
&gt;&gt;&gt; for i in findall("(?=(.{3}))", somestr):
...     print(i)
...
ABC
BCD
CDA
DAB
ABC
BCD
CDA
DAB
ABC
BCD
CDA
DAB
ABC
BCD
CDA
DAB
ABC
BCD
CDA
DAB
ABC
BCD
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20151476</id><snippet>3</snippet></ROW><ROW><id>20151693</id><snippet>s.replace(0, np.nan, inplace=True)
</snippet></ROW><ROW><id>20151693</id><snippet>def f(s_month):
    date = s_month.index[0]
    # create the month long range
    rng = pd.date_range(date, date + pd.offsets.MonthEnd(1), freq='D')
    # throw away results longer than month length
    s_month = s_month.iloc[0:len(rng)]
    # reindex those remaining
    s_month.index = rng
    return s_month
</snippet></ROW><ROW><id>20151693</id><snippet>s.index = pd.to_datetime(s.index)</snippet></ROW><ROW><id>20151693</id><snippet>In [11]: s_month = s.loc['1990-04-01']

In [12]: f(s_month)
Out[12]: 
1990-04-01    25.870
1990-04-02    26.205
1990-04-03    12.283
1990-04-04    19.630
...
1990-04-28    24.478
1990-04-29    33.674
1990-04-30    32.591
Freq: D, Name: Value, dtype: float64
</snippet></ROW><ROW><id>20151693</id><snippet>In [13]: res = s.groupby(s.index).apply(f)

In [14]: res
Out[14]: 
1990-04-01  1990-04-01    25.870
            1990-04-02    26.205
            1990-04-03    12.283
            1990-04-04    19.630
...
</snippet></ROW><ROW><id>20151693</id><snippet>In [15]: res.index = res.index.droplevel(0)

In [16]: res
Out[16]: 
1990-04-01    25.870
1990-04-02    26.205
1990-04-03    12.283
...
</snippet></ROW><ROW><id>20151910</id><snippet>if choice&gt;0 and choice&lt;=len(level[0]):
</snippet></ROW><ROW><id>20151910</id><snippet>level[1]</snippet></ROW><ROW><id>20151910</id><snippet>run_level()</snippet></ROW><ROW><id>20151910</id><snippet>def run_level(intro, choices):
</snippet></ROW><ROW><id>20151910</id><snippet>level[0]</snippet></ROW><ROW><id>20151910</id><snippet>intro</snippet></ROW><ROW><id>20151910</id><snippet>level[1]</snippet></ROW><ROW><id>20151910</id><snippet>choices</snippet></ROW><ROW><id>20151910</id><snippet>nextlevel=run_level(level_3[0], level_3[1])
</snippet></ROW><ROW><id>20151910</id><snippet>nextlevel=run_level(*level_3)
</snippet></ROW><ROW><id>20151915</id><snippet>find</snippet></ROW><ROW><id>20151915</id><snippet>aggregate</snippet></ROW><ROW><id>20151915</id><snippet>test.aggregate</snippet></ROW><ROW><id>20151915</id><snippet>db.vehicles.find({_id: {$in: vehicle_ids}})</snippet></ROW><ROW><id>20151915</id><snippet>vehicle_ids</snippet></ROW><ROW><id>20151915</id><snippet>aggregate</snippet></ROW><ROW><id>20151918</id><snippet>blocking</snippet></ROW><ROW><id>20151918</id><snippet>Lock.acquire()</snippet></ROW><ROW><id>20151918</id><snippet>False</snippet></ROW><ROW><id>20151918</id><snippet>Lock.acquire(False)</snippet></ROW><ROW><id>20151918</id><snippet>False</snippet></ROW><ROW><id>20151918</id><snippet>True</snippet></ROW><ROW><id>20151918</id><snippet>import threading
some_lock = threading.Lock()

# use this code anywhere you need to acquire the lock and check for blocking
if not some_lock.acquire(False):
    print 'BLOCKING!'
    some_lock.acquire() # call again with blocking=True (which is the default)
else:
    print 'Acquired lock without blocking'
# lock has been acquired, make sure you release when done with critical section
</snippet></ROW><ROW><id>20152060</id><snippet>sheet._cell_types</snippet></ROW><ROW><id>20152060</id><snippet>sheet._cell_values</snippet></ROW><ROW><id>20152060</id><snippet>biffh.py</snippet></ROW><ROW><id>20152060</id><snippet>xlrd</snippet></ROW><ROW><id>20152060</id><snippet>cell</snippet></ROW><ROW><id>20152060</id><snippet>Cell</snippet></ROW><ROW><id>20152060</id><snippet>put_cell</snippet></ROW><ROW><id>20152060</id><snippet>if sheet.cell_type(1, 4) == xlrd.XL_CELL_EMPTY:
    sheet._cell_types[1][4] = xlrd.XL_CELL_NUMBER
    sheet._cell_values[1][4] = 0.0
</snippet></ROW><ROW><id>20152060</id><snippet>if sheet.cell_type(1, 4) == xlrd.XL_CELL_EMPTY:
    sheet.put_cell(1, 4, xlrd.XL_CELL_NUMBER, 0.0, sheet.cell_xf_index(1, 4))
</snippet></ROW><ROW><id>20152467</id><snippet>'' in myList</snippet></ROW><ROW><id>20152467</id><snippet>''</snippet></ROW><ROW><id>20152467</id><snippet>myList</snippet></ROW><ROW><id>20152467</id><snippet>myList</snippet></ROW><ROW><id>20152467</id><snippet>myList.remove('')</snippet></ROW><ROW><id>20152467</id><snippet>myList</snippet></ROW><ROW><id>20152467</id><snippet>''</snippet></ROW><ROW><id>20152467</id><snippet>&gt;&gt;&gt; myList ['', 'not empty']
&gt;&gt;&gt; '' in myList
True
&gt;&gt;&gt; myList.remove('')
&gt;&gt;&gt; myList
['not empty']
&gt;&gt;&gt; '' in myList
False
</snippet></ROW><ROW><id>20152467</id><snippet>myList</snippet></ROW><ROW><id>20152467</id><snippet>myList = [v for v in myList if v != '']
</snippet></ROW><ROW><id>20152467</id><snippet>myList</snippet></ROW><ROW><id>20152566</id><snippet>__init__.py</snippet></ROW><ROW><id>20152566</id><snippet>__init__.py</snippet></ROW><ROW><id>20152566</id><snippet>site-packages</snippet></ROW><ROW><id>20152566</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>20152597</id><snippet>remainder = (value % cycle)
(remainder &lt;= range) || (cycle - remainder) &lt;= range
</snippet></ROW><ROW><id>20152597</id><snippet>value</snippet></ROW><ROW><id>20152597</id><snippet>cycle</snippet></ROW><ROW><id>20152597</id><snippet>remainder = (value % cycle)
min(remainder, cycle - remainder) &lt;= range
</snippet></ROW><ROW><id>20152597</id><snippet>range</snippet></ROW><ROW><id>20152597</id><snippet>cycle</snippet></ROW><ROW><id>20152835</id><snippet>for p in  [player, player1, player2]:
    p.sendMessage()
</snippet></ROW><ROW><id>20152858</id><snippet>text/plain</snippet></ROW><ROW><id>20152858</id><snippet>...
self.response.headers['Content-Type'] = 'text/plain'
self.response.write('{'+q+'}{'+str(code)+'}')
</snippet></ROW><ROW><id>20152858</id><snippet>application/xml</snippet></ROW><ROW><id>20152858</id><snippet>application/json</snippet></ROW><ROW><id>20153025</id><snippet>import re
DataL = [ 
        '''Grand Total for ATHLET:,,,"1,312 ",,62:58:18,130.62 ,,''',
        '''Grand Total for SELF:,,,"6,589 ",,397:57:58,708.53 ,,'''
    ]   
Pattern = re.compile(r''',(?=[^"']*(?:(?:[^'"]*["'][^"']*){2})*$)''')
for (i, d) in enumerate(DataL):
    print Pattern.split(d)
</snippet></ROW><ROW><id>20153025</id><snippet>['Grand Total for ATHLET:', '', '', '"1,312 "', '', '62:58:18', '130.62 ', '', '']
['Grand Total for SELF:', '', '', '"6,589 "', '', '397:57:58', '708.53 ', '', '']
</snippet></ROW><ROW><id>20153169</id><snippet>set xtics ("Sun" 0, "Mon" 1, "Tue" 2, "Wed" 3, "Thu" 4, "Fri" 5, "Sat" 6)
</snippet></ROW><ROW><id>20153210</id><snippet>&gt;&gt;&gt; df.index = pd.MultiIndex.from_tuples(df.index)
&gt;&gt;&gt; df
                     bar__sum  foo__sum
100000550 ActivityA        14        12
100001799 ActivityB         7         3

&gt;&gt;&gt; df.index.names = ['id', 'act_type']
&gt;&gt;&gt; df
                     bar__sum  foo__sum
id        act_type                     
100000550 ActivityA        14        12
100001799 ActivityB         7         3
</snippet></ROW><ROW><id>20153210</id><snippet>d</snippet></ROW><ROW><id>20153210</id><snippet>dict</snippet></ROW><ROW><id>20153210</id><snippet>&gt;&gt;&gt; pd.DataFrame(d.values(), index=pd.MultiIndex.from_tuples(d.keys(), names=['id', 'act_type']))
                     bar__sum  foo__sum
id        act_type                     
100001799 ActivityB         7         3
100000550 ActivityA        14        12
</snippet></ROW><ROW><id>20153210</id><snippet>values()</snippet></ROW><ROW><id>20153210</id><snippet>keys()</snippet></ROW><ROW><id>20153377</id><snippet>&gt;&gt;&gt; d = {'a': [0, 1, 2], 'b': [1, 2, 3]}
&gt;&gt;&gt; d['a'].append(3)
&gt;&gt;&gt; d['a']
&gt;&gt;&gt; [0, 1, 2, 3]
</snippet></ROW><ROW><id>20153377</id><snippet>append</snippet></ROW><ROW><id>20153377</id><snippet>&gt;&gt;&gt; d = {'a': (0, 1, 2), 'b': (1, 2, 3)}
&gt;&gt;&gt; d['a'] = d['a'] + (3,)
&gt;&gt;&gt; d['a']
&gt;&gt;&gt; (0, 1, 2, 3)
</snippet></ROW><ROW><id>20153377</id><snippet>defaultdict</snippet></ROW><ROW><id>20153377</id><snippet>defaultdict</snippet></ROW><ROW><id>20153377</id><snippet>&gt;&gt;&gt; d = {'b': (1, 2, 3)}
&gt;&gt;&gt; d['a'] = d['a'] + (3,)
KeyError: 'a'
&gt;&gt;&gt; d = defaultdict(tuple, {'b': (1, 2, 3)})
&gt;&gt;&gt; d['a'] = d['a'] + (3,)
&gt;&gt;&gt; d
{'b': (1, 2, 3), 'a': (3,)}
</snippet></ROW><ROW><id>20153377</id><snippet>def add_to_multidict(multidict, key, value):
    if key in multidict:
        if isinstance(multidict[key], tuple):
            multidict[key] = multidict[key] + (value,)
        else:
            multidict[key] = (multidict[key], value)
    else:
        multidict[key] = value
</snippet></ROW><ROW><id>20153377</id><snippet>dict</snippet></ROW><ROW><id>20153377</id><snippet>tuple</snippet></ROW><ROW><id>20153377</id><snippet>d['a'][1][2][1].append(3)</snippet></ROW><ROW><id>20153403</id><snippet>Usable(Consumable(Item(), 3), use_potion)</snippet></ROW><ROW><id>20153403</id><snippet>class ItemCapability:
    pass


class Consumable(ItemCapability):
    def __init__(self, amount):
        super().__init__()
        self.amount = amount


class Usable(ItemCapability):
    pass


class Item:
    def __init__(self, name):
        self.name = name
        self.capabilities = {}

    def make(self, capability):
        assert isinstance(capability, ItemCapability)
        assert capability.__class__ not in self.capabilities

        self.capabilities[capability.__class__] = capability

    def has(self, capability_cls):
        try:
            return self.capabilities[capability_cls]
        except KeyError:
            return False


potion = Item('potion')
potion.make(Usable())
potion.make(Consumable(amount=10))

print(potion.has(Usable))
print(potion.has(Consumable))
</snippet></ROW><ROW><id>20153474</id><snippet>def func_dot_einsum(C, X):
    Y = X.dot(C)
    return np.einsum('ij,ij-&gt;i', Y, X)
</snippet></ROW><ROW><id>20153474</id><snippet>In [7]: %timeit func_dot(C, X)
10 loops, best of 3: 31.1 ms per loop

In [8]: %timeit func_einsum(C, X)
10 loops, best of 3: 105 ms per loop

In [9]: %timeit func_einsum2(C, X)
10 loops, best of 3: 43.5 ms per loop

In [10]: %timeit func_dot_einsum(C, X)
10 loops, best of 3: 21 ms per loop
</snippet></ROW><ROW><id>20153474</id><snippet>np.dot</snippet></ROW><ROW><id>20153474</id><snippet>np.dot</snippet></ROW><ROW><id>20153474</id><snippet>np.einsum</snippet></ROW><ROW><id>20153474</id><snippet>np.einsum('ij,ij-&gt;i', a, b)</snippet></ROW><ROW><id>20153474</id><snippet>np.sum(a*b, axis=1)</snippet></ROW><ROW><id>20153474</id><snippet>for i in range(I):
    out[i] = 0
    for j in range(J):
        out[i] += a[i, j] * b[i, j]
</snippet></ROW><ROW><id>20153474</id><snippet>np.einsum('ij,jk,ik-&gt;i', a, b, c)
</snippet></ROW><ROW><id>20153474</id><snippet>np.sum(a[:, :, None] * b[None, :, :] * c[:, None, :], axis=(1, 2))
</snippet></ROW><ROW><id>20153474</id><snippet>In [29]: a, b, c = np.random.rand(3, 100, 100)

In [30]: %timeit np.einsum('ij,jk,ik-&gt;i', a, b, c)
100 loops, best of 3: 2.41 ms per loop

In [31]: %timeit np.sum(a[:, :, None] * b[None, :, :] * c[:, None, :], axis=(1, 2))
100 loops, best of 3: 12.3 ms per loop
</snippet></ROW><ROW><id>20153474</id><snippet>for i in range(I):
    out[i] = 0
    for j in range(J):
        for k in range(K):
            out[i] += a[i, j] * b[j, k] * c[i, k]
</snippet></ROW><ROW><id>20153474</id><snippet>for i in range(I):
    out[i] = 0
    for j in range(J):
        temp = 0
        for k in range(K):
            temp += b[j, k] * c[i, k]
        out[i] += a[i, j] * temp
</snippet></ROW><ROW><id>20153474</id><snippet>I * J * (K-1)</snippet></ROW><ROW><id>20153474</id><snippet>I * J</snippet></ROW><ROW><id>20153589</id><snippet>import pandas as pd

def promotion(ls):
    return (ls.diff() &gt; 0).sum()

def growth(ls):
    return ls.iloc[-1] - ls.iloc[0]

jobData = pd.DataFrame(
    {'candidate_id': [1, 2, 2, 2],
     'TitleLevel': [2, 1, 2, 1]})

grouped = jobData.groupby("candidate_id")
titlePromotion = grouped["TitleLevel"].agg(promotion)
print(titlePromotion)
# candidate_id
# 1               0
# 2               1
# dtype: int64

titleGrowth = grouped["TitleLevel"].agg(growth)
print(titleGrowth)
# candidate_id
# 1               0
# 2               0
# dtype: int64
</snippet></ROW><ROW><id>20153589</id><snippet>def foo(ls):
    print(type(ls))
</snippet></ROW><ROW><id>20153589</id><snippet>jobData.groupby("candidate_id")["TitleLevel"].apply(foo)
</snippet></ROW><ROW><id>20153589</id><snippet>&lt;class 'pandas.core.series.Series'&gt;
</snippet></ROW><ROW><id>20153589</id><snippet>jobData.groupby(...)[...].apply(foo)</snippet></ROW><ROW><id>20153589</id><snippet>Series</snippet></ROW><ROW><id>20153589</id><snippet>foo</snippet></ROW><ROW><id>20153589</id><snippet>apply</snippet></ROW><ROW><id>20153589</id><snippet>foo</snippet></ROW><ROW><id>20153589</id><snippet>apply</snippet></ROW><ROW><id>20153589</id><snippet>foo</snippet></ROW><ROW><id>20153589</id><snippet>agg</snippet></ROW><ROW><id>20153589</id><snippet>apply</snippet></ROW><ROW><id>20153589</id><snippet>transform</snippet></ROW><ROW><id>20153589</id><snippet>apply</snippet></ROW><ROW><id>20153589</id><snippet>foo</snippet></ROW><ROW><id>20153589</id><snippet>foo</snippet></ROW><ROW><id>20153589</id><snippet>transform</snippet></ROW><ROW><id>20153589</id><snippet>foo</snippet></ROW><ROW><id>20153589</id><snippet>apply</snippet></ROW><ROW><id>20153589</id><snippet>foo</snippet></ROW><ROW><id>20153589</id><snippet>agg</snippet></ROW><ROW><id>20153589</id><snippet>foo</snippet></ROW><ROW><id>20153589</id><snippet>apply</snippet></ROW><ROW><id>20153589</id><snippet>agg</snippet></ROW><ROW><id>20153589</id><snippet>foo</snippet></ROW><ROW><id>20153589</id><snippet>In [30]: grouped['TitleLevel'].apply(foo)
0    2
Name: 1, dtype: int64
--------------------------------------------------------------------------------
1    1
2    2
3    1
Name: 2, dtype: int64
--------------------------------------------------------------------------------
Out[30]: 
candidate_id
1               None
2               None
dtype: object
</snippet></ROW><ROW><id>20153589</id><snippet>foo</snippet></ROW><ROW><id>20153589</id><snippet>ls[0]</snippet></ROW><ROW><id>20153589</id><snippet>KeyError</snippet></ROW><ROW><id>20153589</id><snippet>0</snippet></ROW><ROW><id>20153589</id><snippet>iloc</snippet></ROW><ROW><id>20153589</id><snippet>ls[label]</snippet></ROW><ROW><id>20153589</id><snippet>label</snippet></ROW><ROW><id>20153589</id><snippet>ls.iloc[n]</snippet></ROW><ROW><id>20153589</id><snippet>n</snippet></ROW><ROW><id>20153589</id><snippet>def promotion(ls):
    pro =0
    if len(ls)&gt;1:
        for j in range(1,len(ls)):
            if ls.iloc[j]&gt;ls.iloc[j-1]:
                pro += 1
    return pro
def growth(ls):
    head= ls.iloc[0]
    tail= ls.iloc[len(ls)-1]
    gro= tail-head
    return gro
</snippet></ROW><ROW><id>20153611</id><snippet>global</snippet></ROW><ROW><id>20153611</id><snippet>global myDict
</snippet></ROW><ROW><id>20153611</id><snippet>myDict</snippet></ROW><ROW><id>20153611</id><snippet>myDict</snippet></ROW><ROW><id>20153700</id><snippet>ctypes</snippet></ROW><ROW><id>20153700</id><snippet>indexes[:]</snippet></ROW><ROW><id>20153700</id><snippet>a = [1, 2, 3]
b = a[:]
</snippet></ROW><ROW><id>20153700</id><snippet>a[:] = [4, 5, 6]
</snippet></ROW><ROW><id>20153700</id><snippet>a</snippet></ROW><ROW><id>20153700</id><snippet>b = a</snippet></ROW><ROW><id>20153700</id><snippet>a = [4, 5, 6]</snippet></ROW><ROW><id>20153700</id><snippet>a</snippet></ROW><ROW><id>20153700</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a           # b is now the same list as a
&gt;&gt;&gt; a[0] = 10       # so changing that list is visible to b
&gt;&gt;&gt; b
[10, 2, 3]

&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a[:]        # b is now a new list, with a copy of a
&gt;&gt;&gt; a[0] = 10       # so changing the original list doesn't affect b
&gt;&gt;&gt; b
[1, 2, 3]

&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a           # b is now the same list as a
&gt;&gt;&gt; a = [4, 5]      # but now a is a different list
&gt;&gt;&gt; a[0] = 10
&gt;&gt;&gt; b
[1, 2, 3]

&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a           # b is now the same list as a
&gt;&gt;&gt; a[:] = [4, 5]   # and we've replaced the contents
&gt;&gt;&gt; b
[4, 5]
</snippet></ROW><ROW><id>20153700</id><snippet>range(2000, 3000)[:]</snippet></ROW><ROW><id>20153700</id><snippet>range(2000, 3000)</snippet></ROW><ROW><id>20153700</id><snippet>indexes</snippet></ROW><ROW><id>20153700</id><snippet>range(2000, 3000)</snippet></ROW><ROW><id>20153700</id><snippet>range(2000, 3000)[:]</snippet></ROW><ROW><id>20153751</id><snippet>Boolean value</snippet></ROW><ROW><id>20153751</id><snippet>True</snippet></ROW><ROW><id>20153751</id><snippet>False</snippet></ROW><ROW><id>20153751</id><snippet>def process_tree( best_score, node=root ):

    if not node:
        return ["NaN",False]

    node_score = node.evaluate_score()
    if node_score == best_score:
        return [best_score, True]

    score_list = []
    score_list.append(node_score)
    for child in node.children:

        child_score = process_tree(best_score,child)
        if child_score[1]:
            return child_score
        else:
            score_list.append(child_score[0])

    #when no score is equal to the best score
    return [max(score_list),False]
</snippet></ROW><ROW><id>20154203</id><snippet>L[i] == i</snippet></ROW><ROW><id>20154203</id><snippet>i</snippet></ROW><ROW><id>20154203</id><snippet>L[i] - i == 0</snippet></ROW><ROW><id>20154203</id><snippet>bisect</snippet></ROW><ROW><id>20154203</id><snippet>import bisect

class HelperList(object):
    """Lazily computes l[i] - i to determine values."""
    def __init__(self, l):
        super(HelperList, self).__init__()
        self.l = l
    def __len__(self):
        return len(self.l)
    def __getitem__(self, i):
        return self.l[i] - i

def count_occur(l):
    helperlist = HelperList(l)
    leftmost = bisect.bisect_left(helperlist, 0)
    if l[leftmost] != leftmost:
        return 0
    return bisect.bisect_right(helperlist, 0) - leftmost
</snippet></ROW><ROW><id>20154411</id><snippet>gnuplot.stdin.write("plot '-' u 1:2 t 'aa', " + \
            " '-' u 1:2 t 'aa in', " + \
            "'-' u 1:2 t 'bb', " + \
            "'-' u 1:2 t 'bb in', " + \
            "'-' u 1:2 t 'cc', " + \
            "'-' u 1:2 t 'cc in', " + \
            "'-' u 1:2 t 'dd', " + \
            "'-' u 1:2 t 'dd in', " + \
            "'-' u 1:2 t 'ee', " + \
            "'-' u 1:2 t 'ee in';\n")

for n in range(10):
    for dataElement in data:        
        a = n + 1
        if a == 11:
            break
        else:
            gnuplot.stdin.write("%s,%i\n" % (dataElement[0],dataElement[a]))
    gnuplot.stdin.write("e\n")
gnuplot.stdin.flush()
</snippet></ROW><ROW><id>20154419</id><snippet>card_names = {'ace': 1, 'jack': 11, 'queen': 12, 'king': 13}
for i in range(2, 11):
    card_names[str(i)] = i
</snippet></ROW><ROW><id>20154419</id><snippet>Guess_number = int(Guess_number)</snippet></ROW><ROW><id>20154419</id><snippet>Guess_number = card_names.get(Guess_number.lower().strip())
</snippet></ROW><ROW><id>20154419</id><snippet>Guess_number</snippet></ROW><ROW><id>20154419</id><snippet>None</snippet></ROW><ROW><id>20154419</id><snippet>import random

SUITS = ("D", "H", "C", "S")
suit = random.choice(SUITS)

number = random.randint( 1,13)

card_names = {'ace': 1, 'jack': 11, 'queen': 12, 'king': 13}
for i in range(2, 11):
    card_names[str(i)] = i
guessCount = 0

Guess_Suit = input("Start by guessing the Suit: ")

guessCount = guessCount + 1
while guessCount &lt; 9:
    Guess_Suit = Guess_Suit.upper()
    guessCount = guessCount + 1
    if Guess_Suit == suit:
        print("Correct!")
        break
    elif Guess_Suit != suit:
        print('Wrong')
        Guess_Suit = input("Guess the Suit again: ")

Guess_number = input("Now Guess the card number or name of the face card:")
Guess_number = card_names.get(Guess_number.lower().strip())
guessCount = guessCount + 1
while guessCount &lt; 9:
    if Guess_number is None:
        print("The card you picked is invalid")
        Guess_number = input("Pick another one: ")
        Guess_number = card_names.get(Guess_number.lower().strip())
        guessCount = guessCount + 1
    elif Guess_number == number:
        print("THATS IT YOU WON")
        break
    else:
        print('Wrong')
        Guess_number = input("Pick another one: ")
        Guess_number = card_names.get(Guess_number.lower().strip())
        guessCount = guessCount + 1
</snippet></ROW><ROW><id>20154429</id><snippet>names</snippet></ROW><ROW><id>20154429</id><snippet>1,2,1
2,3,4,2,3
1,2,3,3
1,2,3,4,5,6
</snippet></ROW><ROW><id>20154429</id><snippet>&gt;&gt;&gt; pd.read_csv(r'D:/Temp/tt.csv')
Traceback (most recent call last):
...
Expected 5 fields in line 4, saw 6
</snippet></ROW><ROW><id>20154429</id><snippet>names</snippet></ROW><ROW><id>20154429</id><snippet>&gt;&gt;&gt; pd.read_csv(r'D:/Temp/tt.csv', names=list('abcdef'))
   a  b  c   d   e   f
0  1  2  1 NaN NaN NaN
1  2  3  4   2   3 NaN
2  1  2  3   3 NaN NaN
3  1  2  3   4   5   6
</snippet></ROW><ROW><id>20154584</id><snippet>[loggers]
keys=root

[handlers]
keys=logfile

[formatters]
keys=logfileformatter

[logger_root]
level=DEBUG
handlers=logfile

[formatter_logfileformatter]
format=%(asctime)s %(name)-12s: %(levelname)s %(message)s

[handler_logfile]
class=handlers.RotatingFileHandler
level=NOTSET
args=('testing.log',2000,100)
formatter=logfileformatter
</snippet></ROW><ROW><id>20154750</id><snippet>rename 's/(\d{2})-(\d{6})\.jpg/abc-$2-$1.jpg/' *.jpg
</snippet></ROW><ROW><id>20154750</id><snippet>linux</snippet></ROW><ROW><id>20154750</id><snippet>$ file $(readlink -f $(type -p rename))
</snippet></ROW><ROW><id>20154750</id><snippet>.../rename: Perl script, ASCII text executable
</snippet></ROW><ROW><id>20154750</id><snippet>Debian</snippet></ROW><ROW><id>20154750</id><snippet>Ubuntu</snippet></ROW><ROW><id>20154750</id><snippet>$ sudo update-alternatives --set rename /path/to/rename
</snippet></ROW><ROW><id>20154750</id><snippet>/path/to/rename</snippet></ROW><ROW><id>20154750</id><snippet>perl's rename</snippet></ROW><ROW><id>20154793</id><snippet>@app.route('/login', methods=['POST', 'GET'])
def login():
    form = NewUser()
    error='' # initialize the error variable outside the if loop
    if request.method == 'POST':
        if request.form['username'] != 'admin' and request.form['password'] != 'password':
            error = "uername/password incorrect"
        else:
            session['logged_in'] = True
            return redirect(url_for('secretarea'))

    # This line will execute if GET request OR the username/password checks fails
    return render_template('login.html', form=form, error=error)
</snippet></ROW><ROW><id>20154813</id><snippet>V = [0.10, 0.15, 0.20, 0.25]
cnt = plt.contour(X, Y, Z, V, cmap=cm.RdBu)
</snippet></ROW><ROW><id>20154813</id><snippet>V</snippet></ROW><ROW><id>20154813</id><snippet>X</snippet></ROW><ROW><id>20154813</id><snippet>Y</snippet></ROW><ROW><id>20154813</id><snippet>imshow</snippet></ROW><ROW><id>20154813</id><snippet>plt.imshow(Z, extent=(X.min(), X.max(), Y.min(), Y.max()), origin='lower', cmap=cm.RdBu)
</snippet></ROW><ROW><id>20154813</id><snippet>V</snippet></ROW><ROW><id>20154813</id><snippet>V = np.linspace(.1, .3, 25)
plt.contour(X,Y,Z,V, cmap=cm.RdBu)
</snippet></ROW><ROW><id>20155088</id><snippet>class A(object):
    def __init__(self, msg):
        self.msg = msg

    def __call__(self):
        print self.msg

    def __getattr__(self, name):
        return self


a = A('Hello World')
a()
a.b()
a.b.c()
</snippet></ROW><ROW><id>20155226</id><snippet>for item in sample_list:
    for i in range(2):
        new_list.append(item)
</snippet></ROW><ROW><id>20155226</id><snippet>'a' * 2</snippet></ROW><ROW><id>20155226</id><snippet>['a', 'a']</snippet></ROW><ROW><id>20155226</id><snippet>aa</snippet></ROW><ROW><id>20155226</id><snippet>item</snippet></ROW><ROW><id>20155226</id><snippet>for item in sample_list:
    new_list.extend([item] * 2)
</snippet></ROW><ROW><id>20155233</id><snippet>python</snippet></ROW><ROW><id>20155233</id><snippet>yield from</snippet></ROW><ROW><id>20155233</id><snippet>yield from funB()
</snippet></ROW><ROW><id>20155233</id><snippet>python</snippet></ROW><ROW><id>20155233</id><snippet>for x in funB(): yield x
</snippet></ROW><ROW><id>20155233</id><snippet>groups = [funA, funB, funC]
for group in groups:
    for item in group():
        yield item
</snippet></ROW><ROW><id>20155426</id><snippet>getrefcount</snippet></ROW><ROW><id>20155426</id><snippet>o</snippet></ROW><ROW><id>20155426</id><snippet>del o</snippet></ROW><ROW><id>20155426</id><snippet>sys.getrefcount</snippet></ROW><ROW><id>20155426</id><snippet>1</snippet></ROW><ROW><id>20155426</id><snippet>&gt;&gt;&gt; o = object()
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getrefcount(o)
2
&gt;&gt;&gt; del o
&gt;&gt;&gt; sys.getrefcount(o)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'o' is not defined
</snippet></ROW><ROW><id>20155426</id><snippet>del</snippet></ROW><ROW><id>20155506</id><snippet>image</snippet></ROW><ROW><id>20155506</id><snippet>text</snippet></ROW><ROW><id>20155506</id><snippet>checkButton = Button(root, height=5, width=10, text=u"\u2713")
</snippet></ROW><ROW><id>20155573</id><snippet>platform.system</snippet></ROW><ROW><id>20155573</id><snippet>os.uname</snippet></ROW><ROW><id>20155573</id><snippet>uname</snippet></ROW><ROW><id>20155573</id><snippet>linux_distribution</snippet></ROW><ROW><id>20155573</id><snippet>head /etc/file</snippet></ROW><ROW><id>20155573</id><snippet>file</snippet></ROW><ROW><id>20155573</id><snippet>release</snippet></ROW><ROW><id>20155573</id><snippet>version</snippet></ROW><ROW><id>20155573</id><snippet>head /etc/debian_version</snippet></ROW><ROW><id>20155573</id><snippet>linux_distribution</snippet></ROW><ROW><id>20155573</id><snippet>$ python -c 'import platform; print platform.linux_distribution()'
('debian', 'squeeze/sid', '')
('debian', 'wheezy/sid', '')
('SUSE Linux Enterprise Server ', '11', 'x86_64')
('Red Hat Enterprise Linux Server', '5.9', 'Tikanga')
('Red Hat Enterprise Linux Server', '6.4', 'Santiago')
</snippet></ROW><ROW><id>20155573</id><snippet>linux_distribution</snippet></ROW><ROW><id>20155573</id><snippet>/etc/debian_version</snippet></ROW><ROW><id>20155614</id><snippet>__init__.py</snippet></ROW><ROW><id>20155614</id><snippet>init.py</snippet></ROW><ROW><id>20155614</id><snippet>__init__.py</snippet></ROW><ROW><id>20155614</id><snippet>__init__.py</snippet></ROW><ROW><id>20155614</id><snippet>fooFunction</snippet></ROW><ROW><id>20155614</id><snippet>foo</snippet></ROW><ROW><id>20155614</id><snippet>module</snippet></ROW><ROW><id>20155614</id><snippet> import module.foo
 module.foo.fooFunction()
</snippet></ROW><ROW><id>20155614</id><snippet># __init__.py
import foo
import bar

# script
import module
module.foo.fooFunction()
</snippet></ROW><ROW><id>20155614</id><snippet>__init__.py</snippet></ROW><ROW><id>20155614</id><snippet>foo</snippet></ROW><ROW><id>20155614</id><snippet>import module</snippet></ROW><ROW><id>20155614</id><snippet>foo</snippet></ROW><ROW><id>20155614</id><snippet>bar</snippet></ROW><ROW><id>20155614</id><snippet>module</snippet></ROW><ROW><id>20155614</id><snippet>foo</snippet></ROW><ROW><id>20155614</id><snippet># __init__.py
from foo import fooFunction

# script
import module
module.fooFunction()
</snippet></ROW><ROW><id>20155615</id><snippet>while True:
    db.pending.wait()
    # after waking up, do code. for example, we wait for incoming messages to
    # be stored in the database. the threaded server will call db.pending.set()
    # which will wake us up. we'll poll the DB for new messages, relay them, clear
    # our event flag and go back to waiting.
    # ...
    db.pending.clear()
</snippet></ROW><ROW><id>20155615</id><snippet>import sys, os, sys, time, datetime, threading, select, logging, logging.handlers
import configparser, traceback, re, socket, hashlib
# local .py
sys.path.append('/var/vse/python')
import _util, _webby, _sni, _cams_db, _cams_threaded_server, _cams_bot
# ...

def start_courier(config):
    # default values
    host = '::'
    port = 2345

    configp = config['configp']

    host = configp.get('main', 'relay msp hostport')

    # require ipv6 addresses be specified in [xx:xx:xx] notation, therefore
    # it is safe to look for :nnnn at the end
    if ':' in host and not host.endswith(']'):
        port = host.split(':')[-1]
        try:
            port = int(port, 10)
        except:
            port = 2345
        host = host.split(':')[:-1][0]

    server = _cams_threaded_server.ThreadedTCPServer((host, port), _cams_threaded_server.ThreadedTCPRequestHandler, config)
    t = threading.Thread(target=server.serve_forever, name='courier')
    t.start()
</snippet></ROW><ROW><id>20155615</id><snippet>import socket, socketserver, select, datetime, time, threading
import sys, struct

from OpenSSL.SSL import SSLv23_METHOD, SSLv3_METHOD, TLSv1_METHOD, OP_NO_SSLv2
from OpenSSL.SSL import VERIFY_NONE, VERIFY_PEER, VERIFY_FAIL_IF_NO_PEER_CERT, Context, Connection
from OpenSSL.SSL import FILETYPE_PEM
from OpenSSL.SSL import WantWriteError, WantReadError, WantX509LookupError, ZeroReturnError, SysCallError
from OpenSSL.crypto import load_certificate
from OpenSSL import SSL

# see note at beginning of answer
import _sni, _cams_db

class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    def __init__(self, server_address, HandlerClass, config):
        socketserver.BaseServer.__init__(self, server_address, HandlerClass)
        self.address_family  = socket.AF_INET6
        self.connected       = []
        self.logger          = config['logger']
        self.config          = config

        self.socket = socket.socket(self.address_family, self.socket_type)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

        sc = Context(TLSv1_METHOD)
        sc.set_verify(VERIFY_PEER|VERIFY_FAIL_IF_NO_PEER_CERT, _sni.verify_cb)
        sc.set_tlsext_servername_callback(_sni.pick_certificate)
        self.sc = sc

        self.server_bind()
        self.server_activate()

class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):
    def handle(self):
        config         = self.server.config
        logger         = self.server.logger
        connected      = self.server.connected
        sc             = self.server.sc

        try:
           self.peer_hostname = socket.gethostbyaddr(socket.gethostbyname(self.request.getpeername()[0]))[0]
        except:
           self.peer_hostname = '!'+self.request.getpeername()[0]

        logger.info('peer: {}'.format(self.peer_hostname))

        ssl_s = Connection(sc, self.request)
        ssl_s.set_accept_state()

        try:
            ssl_s.do_handshake()
        except:
            t,v,tb = sys.exc_info()
            logger.warn('handshake failed {}'.format(v))

        ssl_s.setblocking(True)
        self.ssl_s = ssl_s

        try:
            peercert = ssl_s.get_peer_certificate()
        except:
            peercert = False
            t,v,tb = sys.exc_info()
            logger.warn('SSL get peer cert failed: {}'.format(v))                   

        if not peercert:
            logger.warn('No peer certificate')

        else:
            acl = config['configp']['main'].get('client cn acl', '').split(' ')
            cert_subject = peercert.get_subject().CN
            logger.info('Looking for {} in acl: {}'.format(cert_subject,acl))

            if cert_subject in acl:
                logger.info('{} is permitted'.format(cert_subject))
            else:
                logger.warn('''client CN not approved''')

        # it's ok to block here, every socket has its own thread
        ssl_s.setblocking(True)

        self.db  = config['db']
        msgcount = 0

        p = select.poll()
        # don't want writable, just readable

        p.register(self.request, select.POLLIN|select.POLLPRI|select.POLLERR|select.POLLHUP|select.POLLNVAL)
        peername = ssl_s.getpeername()

        x = peername[0]
        if x.startswith('::ffff:'):
            x = x[7:]
        peer_ip = x

        try:
            host = socket.gethostbyaddr(x)[0]
        except:
            host = peer_ip

        logger.info('{}/{}:{} connected'.format(host, peer_ip, peername[1]))
        connected.append( [host, peername[1]] )

        if peercert:
            threading.current_thread().setName('{}/port={}/CN={}'.format(host, peername[1], peercert.get_subject().CN))
        else:
            threading.current_thread().setName('{}/port={}'.format(host, peername[1]))

        sockclosed = False
        while not sockclosed:
            keepreading = True

            #logger.debug('starting 30 second timeout for poll')
            pe = p.poll(30.0)
            if not pe:
                # empty list means poll timeout
                # for SSL sockets it means WTF. we get an EAGAIN like return even if the socket is blocking
                continue

            logger.debug('poll indicates: {}'.format(pe))

            #define SSL_NOTHING     1
            #define SSL_WRITING     2
            #define SSL_READING     3
            #define SSL_X509_LOOKUP 4

            while keepreading and not sockclosed:
                data,sockclosed,keepreading = self._read_ssl_data(2, head=True)
                if sockclosed or not keepreading:
                    time.sleep(5)
                    continue

                plen = struct.unpack('H', data)[0]
                data,sockclosed,keepreading = self._read_ssl_data(plen)

                if sockclosed or not keepreading:
                    time.sleep(5)
                    continue

                # send thank you, ignore any errors since we appear to have gotten
                # the message
                try:
                    self.ssl_s.sendall(b'ty')
                except:
                    pass

                # extract the timestamp

                message_ts = data[0:8]
                msgtype    = chr(data[8])
                message    = data[9:].decode()

                message_ts = struct.unpack('d', message_ts)[0]
                message_ts = datetime.datetime.utcfromtimestamp(message_ts).replace(tzinfo=datetime.timezone.utc)

                self.db.enqueue(config['group'], peer_ip, msgtype, message, message_ts)
                self.db.pending.set()

        # we're recommended to use the return socket object for any future operations rather than the original
        try:
            s = ssl_s.unwrap()
            s.close()
        except:
            pass

        connected.remove( [host, peername[1]] )
        t_name = threading.current_thread().getName()
        logger.debug('disconnect: {}'.format(t_name))

    def _read_ssl_data(self, wantsize=16384, head=False):
        _w = ['WANT_NOTHING','WANT_READ','WANT_WRITE','WANT_X509_LOOKUP']

        logger = self.server.logger

        data        = b''
        sockclosed  = False
        keepreading = True

        while len(data) &lt; wantsize and keepreading and not sockclosed:
            rlen = wantsize - len(data)
            try:
                w,wr = self.ssl_s.want(),self.ssl_s.want_read()

                #logger.debug('  want({}) want_read({})'.format(_w[w],wr))
                x = self.ssl_s.recv(rlen)
                #logger.debug('  recv(): {}'.format(x))

                if not ( x or len(x) ):
                    raise ZeroReturnError

                data += x
                if not (len(x) == len(data) == wantsize):
                    logger.info('  read={}, len(data)={}, plen={}'.format(len(x),len(data),wantsize))

            except WantReadError:
                # poll(), when ready, read more
                keepreading = False
                logger.info('  got WantReadError')
                continue

            except WantWriteError:
                # poll(), when ready, write more
                keepreading = False
                logger.info('  got WantWriteError')
                continue

            except ZeroReturnError:
                # socket got closed, a '0' bytes read also means the same thing
                keepreading = False
                sockclosed  = True
                logger.info('  ZRE, socket closed normally')
                continue

            except SysCallError:
                keepreading = False
                sockclosed  = True

                t,v,tb = sys.exc_info()

                if v.args[0] == -1: # normal EOF
                    logger.info('  EOF found, keepreading=False')

                else:
                    logger.info('{} terminated session abruptly while reading plen'.format(self.peer_hostname))
                    logger.info('t: {}'.format(t))
                    logger.info('v: {}'.format(v))

                continue

            except:
                t,v,tb = sys.exc_info()
                logger.warning('  fucked? {}'.format(v))
                raise

        if not head and not len(data) == wantsize:
            logger.warn('  short read {} of {}'.format(len(data), wantsize))

        return data,sockclosed,keepreading
</snippet></ROW><ROW><id>20155676</id><snippet>JSON</snippet></ROW><ROW><id>20155676</id><snippet>websockets</snippet></ROW><ROW><id>20155676</id><snippet>jQuery</snippet></ROW><ROW><id>20155676</id><snippet>JSON</snippet></ROW><ROW><id>20155755</id><snippet>next()</snippet></ROW><ROW><id>20155755</id><snippet>def next(self):
</snippet></ROW><ROW><id>20155763</id><snippet>classmethod</snippet></ROW><ROW><id>20155763</id><snippet>class C:
    @staticmethod
    def imstatic():
        print("i'm static")

    @classmethod
    def anotherstatic(cls):
        cls.imstatic()
</snippet></ROW><ROW><id>20155929</id><snippet>scrapy startproject doctors &amp;&amp; cd doctors
</snippet></ROW><ROW><id>20155929</id><snippet>items.py</snippet></ROW><ROW><id>20155929</id><snippet>from scrapy.item import Item, Field

class DoctorsItem(Item):
    doctor_name = Field()
    qualification = Field()
    membership = Field()
    visiting_hospitals = Field()
    phone = Field()
    consulting_hours = Field()
    specialist_in = Field()
</snippet></ROW><ROW><id>20155929</id><snippet>basic</snippet></ROW><ROW><id>20155929</id><snippet>scrapy genspider -t basic doctors_spider 'coimbatore.com'
</snippet></ROW><ROW><id>20155929</id><snippet>Request</snippet></ROW><ROW><id>20155929</id><snippet>from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
from doctors.items import DoctorsItem
from scrapy.http import Request
from urlparse import urljoin

class DoctorsSpiderSpider(BaseSpider):
    name = "doctors_spider"
    allowed_domains = ["coimbatore.com"]
    start_urls = [ 
        'http://www.coimbatore.com/doctors/home.htm'
    ]   


    def parse(self, response):
        hxs = HtmlXPathSelector(response)

        for row in hxs.select('/html/body/center[1]/table[@cellpadding = 0]'):
            i = DoctorsItem()
            i['doctor_name'] = '|'.join(row.select('./tr[1]/td[2]//font[@size = -1]/text()').extract()).replace('\n', ' ')
            i['qualification'] ='|'.join( row.select('./tr[2]/td[2]//font[@size = -1]/text()').extract()).replace('\n', ' ')
            i['membership'] = '|'.join(row.select('./tr[3]/td[2]//font[@size = -1]/text()').extract()).replace('\n', ' ')
            i['visiting_hospitals'] = '|'.join(row.select('./tr[4]/td[2]//font[@size = -1]/text()').extract()).replace('\n', ' ')
            i['phone'] = '|'.join(row.select('./tr[5]/td[2]//font[@size = -1]/text()').extract()).replace('\n', ' ')
            i['consulting_hours'] = '|'.join(row.select('./tr[6]/td[2]//font[@size = -1]/text()').extract()).replace('\n', ' ')
            i['specialist_in'] = '|'.join(row.select('./tr[7]/td[2]//font[@size = -1]/text()').extract()).replace('\n', ' ')
            yield i

        for url in hxs.select('/html/body/center[3]//a/@href').extract():
            yield Request(urljoin(response.url, url), callback=self.parse)

        for url in hxs.select('/html/body//a/@href').extract():
            yield Request(urljoin(response.url, url), callback=self.parse)
</snippet></ROW><ROW><id>20155929</id><snippet>scrapy crawl doctors_spider -o doctors.csv -t csv
</snippet></ROW><ROW><id>20155929</id><snippet>csv</snippet></ROW><ROW><id>20155929</id><snippet>phone,membership,visiting_hospitals,qualification,specialist_in,consulting_hours,doctor_name
(H)00966 4 6222245|(R)00966 4 6230143 ,,Domat Al Jandal Hospital|Al Jouf |Kingdom Of Saudi Arabia ,"MBBS, MS, MCh ( Cardio-Thoracic)",Cardio Thoracic Surgery,,Dr. N. Rajaratnam
210075,FRCS(Edinburgh) FIACS,"SRI RAMAKRISHNA HOSPITAL|CHEST CLINIC,COWLEY BROWN ROAD,R.S.PURAM,CBE-2","MD.,DPPR.,FACP",PULMONOLOGY/ RESPIRATORY MEDICINE,"9-1, 5-8",DR.T.MOHAN KUMAR
+91-422-827784-827790,Member -IAPMR,"Kovai Medical Center &amp; Hospital, Avanashi Road,|Coimbatore-641 014","M.B.B.S., Dip.in. Physical Medicine &amp; Rehabilitation","Neck and Back pain, Joint pain, Amputee Rehabilitation,|Spinal cord Injuries &amp; Stroke",9.00am to 5.00pm (Except Sundays),Dr.Edmund M.D'Couto
+91-422-303352,*********,"206, Puliakulam Road, Coimbatore-641 045","M.B.B.S., M.D., D.V.",Sexually Transonitted Diseases.,5.00pm - 7.00pm,Dr.M.Govindaswamy
...
</snippet></ROW><ROW><id>20156048</id><snippet>use strict;
use warnings;

my $file = pop;
my %hash = map { chomp; $_ =&gt; 1 } &lt;&gt;;

push @ARGV, $file;

while (&lt;&gt;) {
    print if /^(\d+\s+\d+)/ and $hash{$1};
}
</snippet></ROW><ROW><id>20156048</id><snippet>perl script.pl ref.txt file.txt [&gt;outFile]</snippet></ROW><ROW><id>20156048</id><snippet>1  2  4
2  3  10
3  5  7
</snippet></ROW><ROW><id>20156055</id><snippet>gl = globals()
gl.update({'f':f})
</snippet></ROW><ROW><id>20156055</id><snippet>f()</snippet></ROW><ROW><id>20156055</id><snippet>gl = dict(globals())
gl.update({'f':f})
</snippet></ROW><ROW><id>20156055</id><snippet>globals()</snippet></ROW><ROW><id>20156073</id><snippet>x</snippet></ROW><ROW><id>20156073</id><snippet>y</snippet></ROW><ROW><id>20156073</id><snippet>x != y</snippet></ROW><ROW><id>20156073</id><snippet>x</snippet></ROW><ROW><id>20156073</id><snippet>y</snippet></ROW><ROW><id>20156073</id><snippet>hash(x) == hash(y)</snippet></ROW><ROW><id>20156073</id><snippet>x != y</snippet></ROW><ROW><id>20156188</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r"\bor", "*", "organization")
'*ganization'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20156188</id><snippet>\b</snippet></ROW><ROW><id>20156188</id><snippet>\x08</snippet></ROW><ROW><id>20156188</id><snippet>&gt;&gt;&gt; '\b'
'\x08'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20156188</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub("\\bor", "*", "organization")
'*ganization'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20156188</id><snippet>^</snippet></ROW><ROW><id>20156188</id><snippet>\b</snippet></ROW><ROW><id>20156188</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub("^or", "*", "organization")
'*ganization'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20156188</id><snippet>^</snippet></ROW><ROW><id>20156251</id><snippet>a = 1
b = 2
a = b
</snippet></ROW><ROW><id>20156251</id><snippet>t = ("1","2")
(a,b) = t
print t
</snippet></ROW><ROW><id>20156251</id><snippet>('1','2')</snippet></ROW><ROW><id>20156266</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>20156266</id><snippet>stdout</snippet></ROW><ROW><id>20156266</id><snippet>stderr</snippet></ROW><ROW><id>20156266</id><snippet>STDOUT_FILENO</snippet></ROW><ROW><id>20156266</id><snippet>STDERR_FILENO</snippet></ROW><ROW><id>20156266</id><snippet>/dev/pts/0</snippet></ROW><ROW><id>20156266</id><snippet>/dev/pts/0</snippet></ROW><ROW><id>20156266</id><snippet>./child.sh</snippet></ROW><ROW><id>20156266</id><snippet>proc = subprocess.Popen('./child.sh', stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>20156266</id><snippet>os.devnull</snippet></ROW><ROW><id>20156266</id><snippet>os.open()</snippet></ROW><ROW><id>20156266</id><snippet>f = open(os.devnull, "w")
</snippet></ROW><ROW><id>20156266</id><snippet>f.fileno()</snippet></ROW><ROW><id>20156266</id><snippet>proc = subprocess.Popen('./child.sh', stdout=f.fileno(), stderr=f.fileno())
</snippet></ROW><ROW><id>20156266</id><snippet>stderr=</snippet></ROW><ROW><id>20156266</id><snippet>read</snippet></ROW><ROW><id>20156266</id><snippet>write</snippet></ROW><ROW><id>20156266</id><snippet>EPIPE</snippet></ROW><ROW><id>20156266</id><snippet>SIGPIPE</snippet></ROW><ROW><id>20156266</id><snippet>write</snippet></ROW><ROW><id>20156266</id><snippet>close</snippet></ROW><ROW><id>20156266</id><snippet>/dev/null</snippet></ROW><ROW><id>20156266</id><snippet>SIGPIPE</snippet></ROW><ROW><id>20156266</id><snippet>SIGPIPE</snippet></ROW><ROW><id>20156266</id><snippet>SIG_IGN</snippet></ROW><ROW><id>20156266</id><snippet>SIGPIPE</snippet></ROW><ROW><id>20156266</id><snippet>exec</snippet></ROW><ROW><id>20156266</id><snippet>SIGPIPE</snippet></ROW><ROW><id>20156266</id><snippet>fork</snippet></ROW><ROW><id>20156266</id><snippet>AF_UNIX</snippet></ROW><ROW><id>20156266</id><snippet>AF_UNIX</snippet></ROW><ROW><id>20156266</id><snippet>stderr=subprocess.STDOUT</snippet></ROW><ROW><id>20156266</id><snippet>Popen()</snippet></ROW><ROW><id>20156266</id><snippet>stderr=subprocess.PIPE</snippet></ROW><ROW><id>20156266</id><snippet>read</snippet></ROW><ROW><id>20156266</id><snippet>for line in proc.stdout:
    ...
</snippet></ROW><ROW><id>20156266</id><snippet>line = proc.stdout.readline()
</snippet></ROW><ROW><id>20156266</id><snippet>subprocess</snippet></ROW><ROW><id>20156266</id><snippet>communicate()</snippet></ROW><ROW><id>20156266</id><snippet>stdout, stderr = proc.communicate()
</snippet></ROW><ROW><id>20156266</id><snippet>communicate()</snippet></ROW><ROW><id>20156266</id><snippet>read</snippet></ROW><ROW><id>20156266</id><snippet>read</snippet></ROW><ROW><id>20156266</id><snippet>close</snippet></ROW><ROW><id>20156266</id><snippet>proc = subprocess.Popen('./child.sh', stdout=subprocess.PIPE)
line1 = proc.stdout.readline()
line2 = proc.stdout.readline()
# that's all we care about
proc.stdout.close()
proc.kill()
status = proc.wait()
</snippet></ROW><ROW><id>20156360</id><snippet>&gt;&gt;&gt; a = [1,1,1]
&gt;&gt;&gt; b = []
&gt;&gt;&gt; b.append(a)
&gt;&gt;&gt; b.append(a)
&gt;&gt;&gt; b.append(a)
&gt;&gt;&gt; b
[[1, 1, 1], [1, 1, 1], [1, 1, 1]]
&gt;&gt;&gt; b[2][2] = 2
&gt;&gt;&gt; b
[[1, 1, 2], [1, 1, 2], [1, 1, 2]]
</snippet></ROW><ROW><id>20156360</id><snippet>b.append(a)</snippet></ROW><ROW><id>20156360</id><snippet>a</snippet></ROW><ROW><id>20156360</id><snippet>b</snippet></ROW><ROW><id>20156360</id><snippet>a</snippet></ROW><ROW><id>20156360</id><snippet>temp = a</snippet></ROW><ROW><id>20156360</id><snippet>a = [1,1,1]</snippet></ROW><ROW><id>20156360</id><snippet>temp</snippet></ROW><ROW><id>20156360</id><snippet>a</snippet></ROW><ROW><id>20156360</id><snippet>b</snippet></ROW><ROW><id>20156360</id><snippet>&gt;&gt;&gt; a = [1,1,1]
&gt;&gt;&gt; b = []
&gt;&gt;&gt; b.append(a[:])
&gt;&gt;&gt; b.append(a[:])
&gt;&gt;&gt; b.append(a[:])
&gt;&gt;&gt; b
[[1, 1, 1], [1, 1, 1], [1, 1, 1]]
&gt;&gt;&gt; b[2][2] = 2
&gt;&gt;&gt; b
[[1, 1, 1], [1, 1, 1], [1, 1, 2]]
</snippet></ROW><ROW><id>20156529</id><snippet>from itertools import groupby
from operator import itemgetter

data = [1,1,1,1,0,0,0,0,0,1,1,1,0,0]
blocks = [map(itemgetter(0), itemgetter(0, -1)(list(g))) + [k] for k, g in groupby(enumerate(data), itemgetter(1))]
# [[0, 3, 1], [4, 8, 0], [9, 11, 1], [12, 13, 0]]
</snippet></ROW><ROW><id>20156551</id><snippet>//td[contains(text(), "Shipment Total:")]/following-sibling::td
</snippet></ROW><ROW><id>20156585</id><snippet>from UserDict import UserDict

class Barn(UserDict):
    '''Barn automatically sets correct values for chickens.
    TBD: What to do if chickens get changed?'''
    def __init__(self, *args, **kw):
        UserDict.__init__(self, *args, **kw)
        pigs = self.data.get('pigs', None)
        if pigs is not None:
            self.data['chicken'] = pigs * 2

    def __setitem__(self, name, value):
        if name == 'pigs':
            self.data['chicken'] = value * 2
        self.data[name] = value

if __name__ == '__main__':
    b = Barn(cows=1, pigs=2)
    print b
    b['pigs'] = 3
    print b
</snippet></ROW><ROW><id>20156585</id><snippet>{'cows': 1, 'chicken': 4, 'pigs': 2}
{'cows': 1, 'chicken': 6, 'pigs': 3}
</snippet></ROW><ROW><id>20156701</id><snippet>while i &lt;= howmanygroups:
    bg = BanditGroup(a)
    howmanybandits = random.randint(1,11)
    while j &lt;= howmanybandits:
        b = Bandit(power, life)
        bg.addBandit(b) #&lt;-- line 60
</snippet></ROW><ROW><id>20156841</id><snippet>import re

pin_pattern = re.compile(r'^(\d{1,2})(\d{3})(\d{4})(\d{3})?$')

pin_formats = {
    3: '{0:02d}-{1:03d}-{2:04d}',
    4: '{0:02d}-{1:03d}-{2:04d}-{3:03d}'
}

def parse_pin(s):
    groups = [int(d) for d in pin_pattern.search(s).groups() if d is not None]
    return pin_formats[len(groups)].format(*groups)
</snippet></ROW><ROW><id>20157082</id><snippet>In [20]: x[1:3,1:3] += y

In [21]: print x
[[ 0  1  2  3  4]
 [ 5 72 73  8  9]
 [10 77 78 13 14]
 [15 16 17 18 19]
 [20 21 22 23 24]]
</snippet></ROW><ROW><id>20157351</id><snippet>new_list</snippet></ROW><ROW><id>20157351</id><snippet>def create_dict(sample_dict):
new_dict = {}
for key in sample_dict:
    new_list = []
    for val in sample_dict[key]:
        new_list.extend([val] * 2)  
    new_dict[key] = new_list
return new_dict

print create_dict({'a': [1, 2], 'b': [3, 4]})
</snippet></ROW><ROW><id>20157351</id><snippet>{'a': [1, 1, 2, 2], 'b': [3, 3, 4, 4]}</snippet></ROW><ROW><id>20157364</id><snippet>if event.type == PG.KEYDOWN and keystate[PL.K_UP]:
    key_up_pressed = True
elif event.type == PG.KEYUP and keystate[PL.K_UP]:
    key_up_pressed = False
</snippet></ROW><ROW><id>20157364</id><snippet>key_up_pressed</snippet></ROW><ROW><id>20157368</id><snippet>dict = {
    'a': 1, 'b': 3, 'c': 3, 'd': 2, 'e': 1, 'f': 4, 'g': 2, 'h': 4, 'i': 1,
    'j': 8, 'k': 5, 'l': 1, 'm': 3, 'n': 1, 'o': 1, 'p': 3, 'q': 10,
    'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 4, 'w': 4, 'x': 8, 'y': 4, 'z': 10
}

word = 'banana'
sum = 0
for letter in word:
    sum+=dict[letter]
print sum
</snippet></ROW><ROW><id>20157518</id><snippet>s.split('=')</snippet></ROW><ROW><id>20157518</id><snippet>d = {}
for i, part in enumerate(s1.split('=')):
    if i == 0:
        metric = part
    else:
        d[metric], _, metric = part.partition(' ')
</snippet></ROW><ROW><id>20157541</id><snippet>def validateFirstname(firstname):
    def validchar(c):
        return c.isalpha() or c.isspace() or (c in "'-")
    total = sum(1 for c in firstname if validchar(c))
    return 3 &lt;= total &lt;= 20 and total == len(firstname)
</snippet></ROW><ROW><id>20157556</id><snippet>DEBUG: ------------------------------- ember.js:3231
DEBUG: Ember      : 1.3.0-beta.1+canary.628071a4 ember.js:3231
DEBUG: Ember Data : 1.0.0-beta.4+canary.e7996c4d ember.js:3231
DEBUG: Handlebars : 1.0.0 ember.js:3231
DEBUG: jQuery     : 1.10.2 ember.js:3231
DEBUG: ------------------------------- 
</snippet></ROW><ROW><id>20157556</id><snippet>DS.DjangoRESTSerializer = DS.RESTSerializer.extend();
DS.DjangoRESTAdapter = DS.RESTAdapter.extend({
      defaultSerializer: "DS/djangoREST"
});

App.Store = DS.Store.extend({
        revision: 12,
        adapter: DS.DjangoRESTAdapter.create()
});
App.SearchAdapter = DS.DjangoRESTAdapter.extend({
    namespace: 'rest_framework'
});
</snippet></ROW><ROW><id>20157601</id><snippet>UPDATE</snippet></ROW><ROW><id>20157601</id><snippet>UPDATE UserEntry
SET contains = CASE WHEN screen_name LIKE CONCAT('%', name ,'%')
                      OR description LIKE CONCAT('%', name ,'%')
                    THEN True
                    ELSE False
                     END
</snippet></ROW><ROW><id>20157601</id><snippet>contain</snippet></ROW><ROW><id>20157601</id><snippet>TRIGGER</snippet></ROW><ROW><id>20157601</id><snippet>CREATE TRIGGER TRG_UserEntry_BeforeInsert BEFORE INSERT ON UserEntry
FOR EACH ROW 
SET new.contains = CASE WHEN new.screen_name LIKE CONCAT('%', new.name ,'%')
                          OR new.description LIKE CONCAT('%', new.name ,'%')
                        THEN True
                        ELSE False
                        END;
</snippet></ROW><ROW><id>20157601</id><snippet>BEFORE UPDATE</snippet></ROW><ROW><id>20157601</id><snippet>UPDATE</snippet></ROW><ROW><id>20157601</id><snippet>contains = 1</snippet></ROW><ROW><id>20157601</id><snippet>CONCAT()</snippet></ROW><ROW><id>20157601</id><snippet>'%'||new.name||'%'</snippet></ROW><ROW><id>20157601</id><snippet>contains</snippet></ROW><ROW><id>20157601</id><snippet>text</snippet></ROW><ROW><id>20157601</id><snippet>True</snippet></ROW><ROW><id>20157601</id><snippet>False</snippet></ROW><ROW><id>20157601</id><snippet>CASE WHEN new.screen_name LIKE '%'||new.name||'%'
       OR new.description LIKE '%'||new.name||'%'
     THEN "Y"
     ELSE "N"
     END;
</snippet></ROW><ROW><id>20157631</id><snippet>        if w is not None:
            logging.error("%s   out %s" % (pre,w))
            return w
</snippet></ROW><ROW><id>20157631</id><snippet>if w</snippet></ROW><ROW><id>20157631</id><snippet>t == None</snippet></ROW><ROW><id>20157631</id><snippet>t is None</snippet></ROW><ROW><id>20157723</id><snippet>from random import randint
a = []
for _ in range(100):
    b = 0
    c = set()
    while len(c) &lt; 5:
        c.add(randint(1, 5))
        b += 1
    a.append(b)
d = round(sum(a)/len(a))
print("{}\nAverage loops: {}".format(c, d))
</snippet></ROW><ROW><id>20157723</id><snippet># Import the `randint` function from `random`.
from random import randint
# This will hold the results that will later be used to calculate the average.
a = []
# This loops 100 times (to get data for a calculation of the average).
for _ in range(100):
    # This will be the number of times the while-loop loops.
    b = 0
    # This is a set to hold the choices of `random.randint`.
    # When it reaches 5 items, all numbers from 1-5 have been found.
    c = set()
    # Loop while the length of the set is less than 5.
    while len(c) &lt; 5:
        # Add a new random number to the set,
        # If the number is already there, nothing happens.
        c.add(randint(1, 5))
        # Record a completed iteration of the while-loop.
        b += 1
    # Add the number of while-loop loops to `a`.
    a.append(b)
# The average is calculated by dividing the sum of `a` by the length of `a`.
# It is then rounded to the nearest integer.
d = round(sum(a)/len(a))
# Print the results.
print("{}\nAverage loops: {}".format(c, d))
</snippet></ROW><ROW><id>20157723</id><snippet>{1, 2, 3, 4, 5}
Average loops: 12

{1, 2, 3, 4, 5}
Average loops: 10

{1, 2, 3, 4, 5}
Average loops: 9
</snippet></ROW><ROW><id>20157847</id><snippet>my $sth-&gt;prepare(q/
    insert into logs (tstamp, ext, type, action, queue, otherinfo)
    values (?,?,?,?,?,?)
/);
while (my $line = &lt;$info&gt;) {
      $line =~ s/\s+$//; # strip trailing ws
      my @fields = split(/\|/, $line);
      $sth-&gt;execute(@fields);
}
</snippet></ROW><ROW><id>20157963</id><snippet>code.py</snippet></ROW><ROW><id>20157963</id><snippet>code</snippet></ROW><ROW><id>20157963</id><snippet>code</snippet></ROW><ROW><id>20157963</id><snippet>compile_command</snippet></ROW><ROW><id>20158080</id><snippet>os.listdir</snippet></ROW><ROW><id>20158080</id><snippet># Your test file
import os

class YourTest(...):

    def setUp(self):
        self.mox = mox.Mox()


    def tearDown(self):
        self.mox.UnsetStubs()

    # Your test
    def testFoo(self):
        self.mox.StubOutWithMock(os, 'listdir')

        # the calls you expect to listdir, and what they should return
        os.listdir("some path").AndReturn([...])

        self.mox.ReplayAll()
        # ... the rest of your test
</snippet></ROW><ROW><id>20158316</id><snippet>universe = string.ascii_letters + string.digits
</snippet></ROW><ROW><id>20158316</id><snippet>62 ** 5 = 916,132,832
</snippet></ROW><ROW><id>20158316</id><snippet>map(''.join, itertools.product(universe, repeat=5))
</snippet></ROW><ROW><id>20158316</id><snippet>itertools.product</snippet></ROW><ROW><id>20158316</id><snippet>n_repeat = 5
for xs in itertools.product(universe, repeat = n_repeat):
    s = ''.join(xs)
</snippet></ROW><ROW><id>20158316</id><snippet>findall()</snippet></ROW><ROW><id>20158316</id><snippet>search()</snippet></ROW><ROW><id>20158316</id><snippet>match()</snippet></ROW><ROW><id>20158316</id><snippet>^(c|a|b|d)</snippet></ROW><ROW><id>20158316</id><snippet>^Y</snippet></ROW><ROW><id>20158333</id><snippet>append</snippet></ROW><ROW><id>20158333</id><snippet>None</snippet></ROW><ROW><id>20158333</id><snippet>l = l.append(k)
</snippet></ROW><ROW><id>20158333</id><snippet>None</snippet></ROW><ROW><id>20158333</id><snippet>l</snippet></ROW><ROW><id>20158333</id><snippet>append</snippet></ROW><ROW><id>20158333</id><snippet>None</snippet></ROW><ROW><id>20158333</id><snippet>l</snippet></ROW><ROW><id>20158333</id><snippet>None</snippet></ROW><ROW><id>20158333</id><snippet>return [key for key, value in d.items() if value == v]
</snippet></ROW><ROW><id>20158416</id><snippet>reduce</snippet></ROW><ROW><id>20158416</id><snippet>&gt;&gt;&gt; from operator import mul
&gt;&gt;&gt; reduce(mul, range(1, 5))
24
</snippet></ROW><ROW><id>20158416</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(1, 10)
&gt;&gt;&gt; a.prod()
362880
#Product along a axis
&gt;&gt;&gt; a = np.arange(1, 10).reshape(3,3)
&gt;&gt;&gt; a.prod(axis=1)
array([  6, 120, 504])
</snippet></ROW><ROW><id>20158436</id><snippet>//tr</snippet></ROW><ROW><id>20158436</id><snippet>tr</snippet></ROW><ROW><id>20158436</id><snippet>/foo</snippet></ROW><ROW><id>20158436</id><snippet>foo</snippet></ROW><ROW><id>20158436</id><snippet>table_lens = [len(table.xpath('tr')) for table in tables]
</snippet></ROW><ROW><id>20158499</id><snippet>#from basketbase.items import BasketbaseItem
from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.selector import HtmlXPathSelector
from scrapy.http import Request
from scrapy.http import TextResponse
from scrapy.http import HtmlResponse


class Basketspider(CrawlSpider):
    name = "basketsp17"
    allowed_domains = ["www.euroleague.net"]
    start_urls = ["http://www.euroleague.net/main/results/by-date/"]
    rules = (
        Rule(SgmlLinkExtractor(allow=('main\/results\/showgame\?gamecode\=/\d$\&amp;seasoncode\=E2013\#!boxscore')),follow=True),
        Rule(SgmlLinkExtractor(allow=()),callback='parse_item'),
    )  

    def init_request(self):
        print 'init request is called'
        return HtmlResponse("http://www.euroleague.net/main/results/by-date/", body = body)

    def parse(self,response):
        response = HtmlResponse(url=response.url, status=response.status, headers=response.headers, body=response.body)
        return super(Basketspider,self).parse(response)

    def parse_item(self, response):
        response = HtmlResponse(url=response.url, status=response.status, headers=response.headers, body=response.body)
        sel = HtmlXPathSelector(response)
        items=[]
        print 'parse item is called'
        #item = BasketbaseItem()
        #item['date'] = sel.select('//div[@class="gs-dates"]/text()').extract() # Game date
        #item['time'] = sel.select('//div[@class="gs-dates"]/span[@class="GameScoreTimeContainer"]/text()').extract() # Game time

        #items.append(item) 
        return items
</snippet></ROW><ROW><id>20158514</id><snippet>import sys
inFile = sys.argv[1]
outFile = sys.argv[2]
</snippet></ROW><ROW><id>20158514</id><snippet>with open(inFile,'r') as i:
    lines = i.readlines()

processedLines = manipulateData(lines)

with open(outFile,'w') as o:
    for line in processedLines:
        o.write(line)
</snippet></ROW><ROW><id>20158514</id><snippet>python script.py input_file.txt output_file.txt</snippet></ROW><ROW><id>20158514</id><snippet>sys.stdin.readlines()</snippet></ROW><ROW><id>20158598</id><snippet>print("Initial Hydra heads:",list(map(int, lineList[len(lineList)-2].strip().split())))
</snippet></ROW><ROW><id>20158598</id><snippet>print("Initial Hydra heads:",list(map(int, lineList[-2].strip().split())))
</snippet></ROW><ROW><id>20158782</id><snippet>isinstance</snippet></ROW><ROW><id>20158782</id><snippet>if isinstance(somelist, list):
    if len(somelist) == 1:
        return somelist[0]
    else:
        return somelist
else:
    return somelist
</snippet></ROW><ROW><id>20158782</id><snippet>&gt;&gt;&gt; len(['first','second','third'])
3
&gt;&gt;&gt; len('arbitrary')
9
</snippet></ROW><ROW><id>20158798</id><snippet>while</snippet></ROW><ROW><id>20158798</id><snippet>x &lt; y</snippet></ROW><ROW><id>20158798</id><snippet>0</snippet></ROW><ROW><id>20158798</id><snippet>0</snippet></ROW><ROW><id>20158798</id><snippet>y &lt;= x</snippet></ROW><ROW><id>20158798</id><snippet>while</snippet></ROW><ROW><id>20158959</id><snippet>listofshit</snippet></ROW><ROW><id>20158959</id><snippet>i</snippet></ROW><ROW><id>20158959</id><snippet>l</snippet></ROW><ROW><id>20158959</id><snippet>testing = """There is something unique about this line
in that it can span across several lines, which is unique and
useful in python."""

listofshit = []

i = 0
while i &lt; len(testing):
    if testing[i] == " ":
        listofshit.append(i)

    i = i + 1

listofshit.insert(0, 0)
listofshit.append(len(testing))


word_list = []
i = 0

while i &lt; len(listofshit) - 1:
    l = i + 1
    x = listofshit[i]
    y = listofshit[l]
    word = testing[x:y]
    word_list.append(word)

    i = l

print word_list 
</snippet></ROW><ROW><id>20159279</id><snippet>from StringIO import StringIO
out = StringIO()
out = tree.export_graphviz(clf, out_file=out)
</snippet></ROW><ROW><id>20159279</id><snippet>tree_</snippet></ROW><ROW><id>20159279</id><snippet>clf.tree_.children_left #array of left children
clf.tree_.children_right #array of right children
clf.tree_.feature #array of nodes splitting feature
clf.tree_.threshold #array of nodes splitting points
clf.tree_.value #array of nodes values
</snippet></ROW><ROW><id>20159279</id><snippet>inspect</snippet></ROW><ROW><id>20159279</id><snippet>from inspect import getmembers
print( getmembers( clf.tree_ ) )
</snippet></ROW><ROW><id>20159330</id><snippet>print</snippet></ROW><ROW><id>20159330</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>20159330</id><snippet>print</snippet></ROW><ROW><id>20159330</id><snippet>print("Favorited: %s" % (result['text']))
</snippet></ROW><ROW><id>20159330</id><snippet>print("Favorited: {}".format(result['text']))

print("Favorited:", result['text'])
</snippet></ROW><ROW><id>20159350</id><snippet>_pattern = r"""(?x)       # enable verbose mode (which ignores whitespace and comments)
    ^                     # start of the input
    [^\d+-\.]*            # prefixed junk
    (?P&lt;number&gt;           # capturing group for the whole number
        (?P&lt;sign&gt;[+-])?       # sign group (optional)
        (?P&lt;integer_part&gt;         # capturing group for the integer part
            \d{1,3}               # leading digits in an int with a thousands separator
            (?P&lt;sep&gt;              # capturing group for the thousands separator
                [ ,.]                 # the allowed separator characters
            )
            \d{3}                 # exactly three digits after the separator
            (?:                   # non-capturing group
                (?P=sep)              # the same separator again (a backreference)
                \d{3}                 # exactly three more digits
            )*                    # repeated 0 or more times
        |                     # or
            \d+                   # simple integer (just digits with no separator)
        )?                    # integer part is optional, to allow numbers like ".5"
        (?P&lt;decimal_part&gt;     # capturing group for the decimal part of the number
            (?P&lt;point&gt;            # capturing group for the decimal point
                (?(sep)               # conditional pattern, only tested if sep matched
                    (?!                   # a negative lookahead
                        (?P=sep)              # backreference to the separator
                    )
                )
                [.,]                  # the accepted decimal point characters
            )
            \d+                   # one or more digits after the decimal point
        )?                    # the whole decimal part is optional
    )
    [^\d]*                # suffixed junk
    $                     # end of the input
"""
</snippet></ROW><ROW><id>20159350</id><snippet>def parse_number(text):
    match = re.match(_pattern, text)
    if match is None or not (match.group("integer_part") or
                             match.group("decimal_part")):    # failed to match
        return None                      # consider raising an exception instead

    num_str = match.group("number")      # get all of the number, without the junk
    sep = match.group("sep")
    if sep:
        num_str = num_str.replace(sep, "")     # remove thousands separators

    if match.group("decimal_part"):
        point = match.group("point")
        if point != ".":
            num_str = num_str.replace(point, ".")  # regularize the decimal point
        return float(num_str)

    return int(num_str)
</snippet></ROW><ROW><id>20159350</id><snippet>"1,234"</snippet></ROW><ROW><id>20159350</id><snippet>"1.234"</snippet></ROW><ROW><id>20159350</id><snippet>1234</snippet></ROW><ROW><id>20159350</id><snippet>1.234</snippet></ROW><ROW><id>20159350</id><snippet>1.234</snippet></ROW><ROW><id>20159350</id><snippet>&gt;&gt;&gt; test_cases = ["2", "2.3", "2,35", "-2 000,5", "EUR 1.000,74 €",
                  "20,5 20,8", "20.345.32.231,50", "1.234"]
&gt;&gt;&gt; for s in test_cases:
    print("{!r:20}: {}".format(s, parse_number(s)))


'2'                 : 2
'2.3'               : 2.3
'2,35'              : 2.35
'-2 000,5'          : -2000.5
'EUR 1.000,74 €'    : 1000.74
'20,5 20,8'         : None
'20.345.32.231,50'  : None
'1.234'             : 1234
</snippet></ROW><ROW><id>20159357</id><snippet>all</snippet></ROW><ROW><id>20159357</id><snippet>def check_list(child1, child2):
    child2 = set(child2)
    return all(child in child2 for child in child1)

children1 = ['test1']
children2 = ['test2', 'test5', 'test1']
print check_list(children1, children2)
</snippet></ROW><ROW><id>20159357</id><snippet>True
</snippet></ROW><ROW><id>20159935</id><snippet>print root.xpath('substring-after(normalize-space(//td[contains(text(), "Shipment Total:")]/following-sibling::td/b/text()), "$")')
</snippet></ROW><ROW><id>20159935</id><snippet>fn:replace</snippet></ROW><ROW><id>20159952</id><snippet>my_logger</snippet></ROW><ROW><id>20159952</id><snippet>my_logger.config.fileConfig('log.conf')
my_logger = logging.getLogger(' ')
</snippet></ROW><ROW><id>20159952</id><snippet>my_logger = logging.getLogger(' ')
my_logger.config.fileConfig('log.conf')
....
</snippet></ROW><ROW><id>20159952</id><snippet>pdb</snippet></ROW><ROW><id>20159952</id><snippet>pdb</snippet></ROW><ROW><id>20159952</id><snippet>my_logger</snippet></ROW><ROW><id>20160255</id><snippet>itertools.combinations</snippet></ROW><ROW><id>20160255</id><snippet>from itertools import combinations
for item in combinations("ABCD", 3):
    print item
</snippet></ROW><ROW><id>20160255</id><snippet>('A', 'B', 'C')
('A', 'B', 'D')
('A', 'C', 'D')
('B', 'C', 'D')
</snippet></ROW><ROW><id>20160255</id><snippet>[list(item) for item in combinations("ABCD", 3)]
</snippet></ROW><ROW><id>20160507</id><snippet>&gt;&gt;&gt; data = [['Three','One','Ten'],
...  ['Three','Five','Nine'],
...  ['Two','Five','Three'],
...  ['Two','Three','Eight'],
...  ['One','Three','Nine']]
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; [Counter(x) for x in data]
[Counter({'Three': 1, 'Ten': 1, 'One': 1}), Counter({'Nine': 1, 'Five': 1, 'Three': 1}), Counter({'Five': 1, 'Two': 1, 'Three': 1}), Counter({'Eight': 1, 'Two': 1, 'Three': 1}), Counter({'Nine': 1, 'Three': 1, 'One': 1})]
</snippet></ROW><ROW><id>20160507</id><snippet>&gt;&gt;&gt; from collections import Counter, OrderedDict
&gt;&gt;&gt; c = Counter(e for l in data for e in l)
&gt;&gt;&gt; c
Counter({'Three': 5, 'Two': 2, 'Nine': 2, 'Five': 2, 'One': 2, 'Ten': 1, 'Eight': 1})
</snippet></ROW><ROW><id>20160507</id><snippet>&gt;&gt;&gt; c = Counter(l[0] for l in data)
&gt;&gt;&gt; c
Counter({'Three': 2, 'Two': 2, 'One': 1})
</snippet></ROW><ROW><id>20160507</id><snippet>&gt;&gt;&gt; {x:c[x] for x in keys} 
{
    'Twelve': 0, 'Seven': 0,
    'Ten': 1, 'Fourteen': 0,
    'Nine': 2, 'Six': 0
    'Three': 5, 'Two': 2,
    'Four': 0, 'Eleven': 0,
    'Five': 2, 'Thirteen': 0,
    'Eight': 1, 'One': 2, 'Fifteen': 0
}
</snippet></ROW><ROW><id>20160507</id><snippet>&gt;&gt;&gt; OrderedDict((x, c[x]) for x in keys)
OrderedDict([('One', 2), ('Two', 2), ('Three', 5), ('Four', 0), ('Five', 2), ('Six', 0), ('Seven', 0), ('Eight', 1), ('Nine', 2), ('Ten', 1), ('Eleven', 0), ('Twelve', 0), ('Thirteen', 0), ('Fourteen', 0), ('Fifteen', 0)])
</snippet></ROW><ROW><id>20160507</id><snippet>&gt;&gt;&gt; c['Nine']   # Key is in the Counter, returns number of occurences
2
&gt;&gt;&gt; c['Four']   # Key is not in the Counter, returns 0
0
</snippet></ROW><ROW><id>20160524</id><snippet>urllib</snippet></ROW><ROW><id>20160524</id><snippet>urllib2</snippet></ROW><ROW><id>20160524</id><snippet>urllib2</snippet></ROW><ROW><id>20160524</id><snippet>urllib</snippet></ROW><ROW><id>20160524</id><snippet>urllib2</snippet></ROW><ROW><id>20160559</id><snippet>&lt;script type="text/javascript" src="/static/tiny_mce/tiny_mce.js"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>20160559</id><snippet>tiny_mce.js</snippet></ROW><ROW><id>20160559</id><snippet>INSTALLED_APPS = (
    ...
    'tinymce',
    ...
)
</snippet></ROW><ROW><id>20160559</id><snippet>settings.py</snippet></ROW><ROW><id>20160652</id><snippet>zip</snippet></ROW><ROW><id>20160652</id><snippet>zip(*strings)</snippet></ROW><ROW><id>20160652</id><snippet>matrix = tuple(zip(*strings))
</snippet></ROW><ROW><id>20160652</id><snippet>matrix</snippet></ROW><ROW><id>20160652</id><snippet>zip(*strings)</snippet></ROW><ROW><id>20160652</id><snippet>matrix1, matrix2 = itertools.tee(zip(*strings))
</snippet></ROW><ROW><id>20160652</id><snippet>matrix1</snippet></ROW><ROW><id>20160652</id><snippet>matrix2</snippet></ROW><ROW><id>20160652</id><snippet>tuple</snippet></ROW><ROW><id>20160652</id><snippet>matrix1</snippet></ROW><ROW><id>20160652</id><snippet>matrix2</snippet></ROW><ROW><id>20160652</id><snippet>matrix1</snippet></ROW><ROW><id>20160652</id><snippet>def matrix():
    return zip(*strings)
# or
matrix = lambda: zip(*strings)
</snippet></ROW><ROW><id>20160652</id><snippet>matrix()</snippet></ROW><ROW><id>20160652</id><snippet>matrix</snippet></ROW><ROW><id>20160652</id><snippet>tuple</snippet></ROW><ROW><id>20160652</id><snippet>class ReusableIterable:
    def __init__(self, func):
        self.func = func
    def __iter__(self):
        return iter(self.func())

matrix = ReusableIterable(lambda: zip(*strings))
</snippet></ROW><ROW><id>20160652</id><snippet>matrix</snippet></ROW><ROW><id>20160652</id><snippet>strings</snippet></ROW><ROW><id>20160652</id><snippet>matrix</snippet></ROW><ROW><id>20160886</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export3.dtd"&gt;
&lt;en-export export-date="20131123T093001Z" application="Evernote" version="Evernote Mac 5.4.3 (402231)"&gt;
&lt;note&gt;&lt;title&gt;Untitled Note&lt;/title&gt;&lt;content&gt;&lt;![CDATA[&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"&gt;
&lt;en-note style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;"&gt;
Test Entry
&lt;div&gt;Another Entry&lt;/div&gt;
&lt;div&gt;Yet Another Entry&lt;span style="-evernote-last-insertion-point:true;"/&gt;&lt;/div&gt;
&lt;/en-note&gt;
]]&gt;&lt;/content&gt;&lt;created&gt;20131123T092930Z&lt;/created&gt;&lt;updated&gt;20131123T092953Z&lt;/updated&gt;&lt;note-attributes&gt;&lt;author&gt;Steven Parker&lt;/author&gt;&lt;reminder-order&gt;0&lt;/reminder-order&gt;&lt;/note-attributes&gt;&lt;/note&gt;
&lt;/en-export&gt;
</snippet></ROW><ROW><id>20160886</id><snippet>from lxml import etree
with open(u'/path/to/my_evernote_file.enex', 'rb') as src_file:
    my_xml_file = src_file.read()
root = etree.fromstring(my_xml_file)
</snippet></ROW><ROW><id>20160886</id><snippet>note</snippet></ROW><ROW><id>20160886</id><snippet>for note in root.xpath('//note'):  # Locate all tags under the root named 'note'. There's one.
    my_values = dict(
        title = note.xpath('title'),
        created = note.xpath('created'),
        updated = note.xpath('updated'),
        latitude = note.xpath('latitude'),
        longitude = note.xpath('longitude'),
        mime = note.xpath('mime'),
        timestamp = note.xpath('timestamp'),
    )
</snippet></ROW><ROW><id>20160886</id><snippet>my_values</snippet></ROW><ROW><id>20160886</id><snippet>{'created': [&lt;Element created at 0x10b53a410&gt;],  # notice, it's a list of matching children tags.
 'latitude': [],  # My example didn't contain these keys!
 'longitude': [],
 'mime': [],
 'timestamp': [],
 'title': [&lt;Element title at 0x10b53a3c0&gt;],
 'updated': [&lt;Element updated at 0x10b53a460&gt;]}
</snippet></ROW><ROW><id>20160886</id><snippet>for note in root.xpath('//note'):  # Locate all tags under the root named 'note'. There's one.
    for child in note.getchildren():
        print child.tag, repr(child.text)
</snippet></ROW><ROW><id>20160886</id><snippet>title 'Untitled Note'
content '&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;\n&lt;!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"&gt;\n&lt;en-note style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;"&gt;\nTest Entry\n&lt;div&gt;Another Entry&lt;/div&gt;\n&lt;div&gt;Yet Another Entry&lt;span style="-evernote-last-insertion-point:true;"/&gt;&lt;/div&gt;\n&lt;/en-note&gt;\n'
created '20131123T092930Z'
updated '20131123T092953Z'
note-attributes None
</snippet></ROW><ROW><id>20160985</id><snippet>suds</snippet></ROW><ROW><id>20160985</id><snippet>Client()</snippet></ROW><ROW><id>20160985</id><snippet>close</snippet></ROW><ROW><id>20160985</id><snippet>__exit__</snippet></ROW><ROW><id>20161021</id><snippet>socket.socket.connect</snippet></ROW><ROW><id>20161021</id><snippet>import socket
help(socket.socket.connect)
</snippet></ROW><ROW><id>20161131</id><snippet>(i, j)</snippet></ROW><ROW><id>20161131</id><snippet>G</snippet></ROW><ROW><id>20161131</id><snippet>GTC</snippet></ROW><ROW><id>20161131</id><snippet>GTA</snippet></ROW><ROW><id>20161131</id><snippet>GTAA</snippet></ROW><ROW><id>20161131</id><snippet>G--</snippet></ROW><ROW><id>20161131</id><snippet>GTC</snippet></ROW><ROW><id>20161131</id><snippet>G</snippet></ROW><ROW><id>20161131</id><snippet>TC</snippet></ROW><ROW><id>20161131</id><snippet>A</snippet></ROW><ROW><id>20161131</id><snippet>def lev(a, b):
    if not a:
        return len(b)
    if not b:
        return len(a)
    return min(lev(a[:-1], b[:-1]) + (a[-1] != b[-1]),
               lev(a[:-1], b) + 1,
               lev(a, b[:-1]) + 1)
</snippet></ROW><ROW><id>20161131</id><snippet>"absd31-km"</snippet></ROW><ROW><id>20161131</id><snippet>"ldk3-1fjm"</snippet></ROW><ROW><id>20161131</id><snippet>:</snippet></ROW><ROW><id>20161131</id><snippet>def lev2(a, b):
    def inner(j1, j2):
        if j1 &lt; 0:
            return j2 + 1
        if j2 &lt; 0:
            return j1 + 1
        return min(inner(j1-1, j2-1) + (a[j1] != b[j2]),
                   inner(j1-1, j2) + 1,
                   inner(j1, j2-1) + 1)
    return inner(len(a)-1, len(b)-1)
</snippet></ROW><ROW><id>20161131</id><snippet>def lev3(a, b):
    memo = {}
    def inner(j1, j2):
        if j1 &lt; 0:
            return j2 + 1
        if j2 &lt; 0:
            return j1 + 1
        args = j1, j2
        if args in memo:
            return memo[args]
        result = min(inner(j1-1, j2-1) + (a[j1] != b[j2]),
                     inner(j1-1, j2) + 1,
                     inner(j1, j2-1) + 1)
        memo[args] = result
        return result
    return inner(len(a)-1, len(b)-1)
</snippet></ROW><ROW><id>20161131</id><snippet>lev2</snippet></ROW><ROW><id>20161131</id><snippet>lev3()</snippet></ROW><ROW><id>20161131</id><snippet>memo</snippet></ROW><ROW><id>20161317</id><snippet>PIP</snippet></ROW><ROW><id>20161317</id><snippet>kazoo</snippet></ROW><ROW><id>20161385</id><snippet>fileload = Emov.objects.get(id=emov_id)
filename = fileload.mov_file.name.split('/')[-1]
response = HttpResponse(fileload.mov_file, content_type='text/plain') # your content type
response['Content-Disposition'] = 'attachment; filename=%s' % filename

return response
</snippet></ROW><ROW><id>20161385</id><snippet>FileField.url</snippet></ROW><ROW><id>20161385</id><snippet>/protected/</snippet></ROW><ROW><id>20161702</id><snippet>self.run()</snippet></ROW><ROW><id>20161702</id><snippet>import Queue
sentinel = object()
root = tkinter.Tk()

...
def run(self, url):
    outqueue = Queue.Queue()
    thr = threading.Thread(target=self.run_tests, args=(url, outqueue))
    thr.start()
    root.after(250, self.update, outqueue)
</snippet></ROW><ROW><id>20161702</id><snippet>def run_tests(self, url, outqueue):
    outqueue.put("Running test #1...")
    self.webtester.urlopen(url)
    outqueue.put("Running test #2")        
    self.webtester.test2()
    outqueue.put(sentinel)
</snippet></ROW><ROW><id>20161702</id><snippet>Queue.Queue</snippet></ROW><ROW><id>20161702</id><snippet>Queue.Queue</snippet></ROW><ROW><id>20161702</id><snippet>root.after</snippet></ROW><ROW><id>20161702</id><snippet>def update(self, outqueue):
    try:
        msg = outqueue.get_nowait()
        if msg is not sentinel:
            self.appendLine(msg)
            root.after(250, self.update, outqueue)
        else:
            # By not calling root.after here, we allow update to
            # truly end
            pass
    except Queue.Empty:
        root.after(250, self.update, outqueue)
</snippet></ROW><ROW><id>20161725</id><snippet>from itertools import combinations
def myStrings(s):
    return ["".join(item) for i in range(1,len(s)) for item in combinations(s,i)]

print myStrings('ab')
print myStrings('abc')
print myStrings('abcd')
</snippet></ROW><ROW><id>20161725</id><snippet>['a', 'b']
['a', 'b', 'c', 'ab', 'ac', 'bc']
['a', 'b', 'c', 'd', 'ab', 'ac', 'ad', 'bc', 'bd', 'cd', 'abc', 'abd', 'acd', 'bcd']
</snippet></ROW><ROW><id>20161895</id><snippet>from bisect import bisect_left
def solve(matrix, param):
    param.sort()             #Sort the params passed by user
    maxx = param[-1]         #Find max
    for row in matrix:
        # If item in the row is greater than `maxx` then use Nan
        # else use bisect_right to get the next highest item from
        # params in O(log N) time.
        yield [float('nan') if item &gt; maxx else
                                 param[bisect_left(param, item)] for item in row]

grid_z1 = [[1,2,3],
           [4,5,6],
           [7,8,9]]
print list(solve(grid_z1, [2, 7, 4]))   
</snippet></ROW><ROW><id>20161895</id><snippet>[[2, 2, 4], [4, 7, 7], [7, nan, nan]]
</snippet></ROW><ROW><id>20161961</id><snippet>c2.collection</snippet></ROW><ROW><id>20161961</id><snippet>discard</snippet></ROW><ROW><id>20161961</id><snippet>for item in c2:</snippet></ROW><ROW><id>20162053</id><snippet>import unittest
import itertools

def encode(bits):
    '''Encode n bits to an integer using a leading 1 to mark the length of the bit stream.

    Example: [0,0,0] == 0b1000 == 16
    '''
    # start with an initial 1.
    # iteratively shift current value left and OR in new bit.
    return reduce(lambda n,b: n &lt;&lt; 1 | b,bits,1)

def decode(encoded):
    '''Decode a positive integer into a list of 0/1 values.
    The most significant bit marks the length and is removed.

    Example:  137 = 0b10001001 = [0,0,0,1,0,0,1]
    '''
    if encoded &lt; 1:
        raise ValueError('encoded must be &gt; 0')
    return [1 if c=='1' else 0 for c in format(encoded,'b')][1:]

class Cases(unittest.TestCase):
    def testEncodeZeros(self):
        for i in xrange(100):
            bits = [0]*i
            self.assertEqual(encode(bits),2**i)
    def testEncodeOnes(self):
        for i in xrange(100):
            bits = [1]*i
            self.assertEqual(encode(bits),2**(i+1)-1)
    def testDecodeZeros(self):
        for i in xrange(100):
            encoded = 2**i
            self.assertEqual(decode(encoded),[0]*i)
    def testDecodeOnes(self):
        for i in xrange(100):
            encoded = 2**(i+1)-1
            self.assertEqual(decode(encoded),[1]*i)
    def testEncodeDecode(self):
        for n in xrange(10):
            for bits in itertools.product([0,1],repeat=n):
                self.assertEqual(decode(encode(bits)),list(bits))
    def testDecodeZero(self):
        self.assertRaises(ValueError,decode,0)
    def testDecodeNegative(self):
        self.assertRaises(ValueError,decode,-1)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>20162053</id><snippet>testDecodeNegative (__main__.Cases) ... ok
testDecodeOnes (__main__.Cases) ... ok
testDecodeZero (__main__.Cases) ... ok
testDecodeZeros (__main__.Cases) ... ok
testEncodeDecode (__main__.Cases) ... ok
testEncodeOnes (__main__.Cases) ... ok
testEncodeZeros (__main__.Cases) ... ok

----------------------------------------------------------------------
Ran 7 tests in 0.041s

OK
&gt;&gt;&gt; encode([0,0,0,0])
16
&gt;&gt;&gt; decode(16)
[0, 0, 0, 0]
&gt;&gt;&gt; encode([])
1
&gt;&gt;&gt; decode(1)
[]
&gt;&gt;&gt; encode([1,0,0,1])
25
&gt;&gt;&gt; decode(25)
[1, 0, 0, 1]
&gt;&gt;&gt; bin(25)
'0b11001'
&gt;&gt;&gt; encode([0,0,0,1,0,0,1])
137
&gt;&gt;&gt; bin(137)
'0b10001001'
&gt;&gt;&gt; decode(137)
[0, 0, 0, 1, 0, 0, 1]
</snippet></ROW><ROW><id>20162601</id><snippet>cursor.execute()</snippet></ROW><ROW><id>20162601</id><snippet># this build a (statement, (values,....)) tuple
args = "UPDATE namen SET Name = '%s' WHERE `Name` = '%s'",(lookup[i],i)

# so you need positional arguments unpacking:
cursor.execute(*args) 
</snippet></ROW><ROW><id>20162601</id><snippet>sql = "UPDATE namen SET Name = '%s' WHERE `Name` = '%s'"
cursor.execute(sql, (lookup[i],i))
</snippet></ROW><ROW><id>20162601</id><snippet>lookup={
    'Gigi':'Gigi Hofleitner',
    'Horst':'Horst Sergio'
}

# no need to create the same invariant string again and agin
sql="UPDATE namen SET Name=%s WHERE Name=%s"

for oldname, newname in lookup.items():
    cursor.execute(sql, (newname, oldname))

# better to commit only once    
connection.commit()
</snippet></ROW><ROW><id>20162661</id><snippet>TruncatedSVD.transform</snippet></ROW><ROW><id>20162812</id><snippet>a</snippet></ROW><ROW><id>20162812</id><snippet>file.seek</snippet></ROW><ROW><id>20162812</id><snippet>with tempfile.TemporaryFile(suffix=".png") as tmpfile:
    fig.savefig(tmpfile, format="png") # File position is at the end of the file.
    tmpfile.seek(0) # Rewind the file. (0: the beginning of the file)
    print b64encode(tmpfile.read())
</snippet></ROW><ROW><id>20162833</id><snippet>print</snippet></ROW><ROW><id>20162833</id><snippet>.write</snippet></ROW><ROW><id>20162833</id><snippet>print('Your Skill:', charskill, file=myFile)
</snippet></ROW><ROW><id>20163044</id><snippet>Server</snippet></ROW><ROW><id>20163044</id><snippet>HTTP/1.0 400 Bad Request</snippet></ROW><ROW><id>20163226</id><snippet>r == 0</snippet></ROW><ROW><id>20163226</id><snippet>c == 0</snippet></ROW><ROW><id>20163226</id><snippet>self.GameBoard[r-1][c-1]</snippet></ROW><ROW><id>20163309</id><snippet>self._count</snippet></ROW><ROW><id>20163309</id><snippet>nextImage</snippet></ROW><ROW><id>20163309</id><snippet>_imagesInList</snippet></ROW><ROW><id>20163309</id><snippet>animFlag</snippet></ROW><ROW><id>20163309</id><snippet>nextImage</snippet></ROW><ROW><id>20163309</id><snippet>showImageByPath</snippet></ROW><ROW><id>20163309</id><snippet>showImageByPath</snippet></ROW><ROW><id>20163309</id><snippet>showImageByPath</snippet></ROW><ROW><id>20163309</id><snippet>self.label.setPixmap()</snippet></ROW><ROW><id>20163309</id><snippet>QtGui.QLabel()</snippet></ROW><ROW><id>20163309</id><snippet>buildUI()</snippet></ROW><ROW><id>20163309</id><snippet>QtGui.QLabel()</snippet></ROW><ROW><id>20163324</id><snippet>&gt;&gt;&gt; items = [1, 10, 7, 4, 5, 9]
&gt;&gt;&gt; head, *tail = items
&gt;&gt;&gt; head
1
&gt;&gt;&gt; tail
[10, 7, 4, 5, 9]
</snippet></ROW><ROW><id>20163324</id><snippet>&gt;&gt;&gt; items = [1, 10, 7, 4, 5, 9]
&gt;&gt;&gt; head, *tail = items
  File "&lt;stdin&gt;", line 1
    head, *tail = items
          ^
SyntaxError: invalid syntax
&gt;&gt;&gt; head, tail = items[0], items[1:] # workaround
&gt;&gt;&gt; head
1
&gt;&gt;&gt; tail
[10, 7, 4, 5, 9]
</snippet></ROW><ROW><id>20163382</id><snippet>companyId</snippet></ROW><ROW><id>20163382</id><snippet>Id</snippet></ROW><ROW><id>20163382</id><snippet>userprofile</snippet></ROW><ROW><id>20163382</id><snippet>user</snippet></ROW><ROW><id>20163382</id><snippet>class Product(models.Model):
    name = models.CharField(max_length=200)
    company = models.ForeignKey(Company,null=True)
</snippet></ROW><ROW><id>20163382</id><snippet>class ListProducts(APIView):
    authentication_classes = (authentication.TokenAuthentication,)
    permission_classes = (permissions.IsAdminUser,)
    model = Product

    def get(self, request):
        if request.user.is_authenticated():
            userCompanyId = request.user.get_profile().companyId
        products = Product.objects.filter(company = userCompanyId)
        serializer = ProductSerializer(products,many=True)
        return Response(serializer.data)
</snippet></ROW><ROW><id>20163382</id><snippet>{
   "_id": ObjectId("5284ceaae9cfff79368e1f29"),
   "company_id": "528458c4bbe7823947b6d2a3",
   "name": "Apple Juice" 
}
</snippet></ROW><ROW><id>20163598</id><snippet>os.path</snippet></ROW><ROW><id>20163598</id><snippet>dir, filename = os.path.split(string1)
string1 = os.path.join(dir, string2 + filename)
</snippet></ROW><ROW><id>20163800</id><snippet>max_depth</snippet></ROW><ROW><id>20163975</id><snippet>&gt;&gt;&gt; arr = np.arange(5)
&gt;&gt;&gt; x, y = 10, 1
&gt;&gt;&gt; x*arr[:-1] + y*arr[1:]
array([ 1, 12, 23, 34])
</snippet></ROW><ROW><id>20163975</id><snippet>as_strided</snippet></ROW><ROW><id>20163975</id><snippet>&gt;&gt;&gt; from numpy.lib.stride_tricks import as_strided

&gt;&gt;&gt; arr_pairs = as_strided(arr, shape=(len(arr)-2+1,2), strides=arr.strides*2)
&gt;&gt;&gt; arr_pairs
array([[0, 1],
       [1, 2],
       [2, 3],
       [3, 4]])
</snippet></ROW><ROW><id>20163975</id><snippet>as_strided</snippet></ROW><ROW><id>20163975</id><snippet>np.dot</snippet></ROW><ROW><id>20163975</id><snippet>&gt;&gt;&gt; xy = [x, y]
&gt;&gt;&gt; np.dot(arr_pairs, xy)
array([ 1, 12, 23, 34])
</snippet></ROW><ROW><id>20164090</id><snippet>print("\n".join(str(x) for x in object_list))
</snippet></ROW><ROW><id>20164090</id><snippet>def __str__(self):
    return "Attr1: {0.attr1}, Attr2: {0.attr2}, ...".format(self)
</snippet></ROW><ROW><id>20164180</id><snippet>for i in range(len(lst)):
  lst[i] = [lst[i]]
</snippet></ROW><ROW><id>20164180</id><snippet>for itemlist in lst:
    item = itemlist[0]
    for ke, va in somedict.items():
        if (item + va) in someotherdict:
            itemlist.append(somevalue)
</snippet></ROW><ROW><id>20164332</id><snippet>scipy</snippet></ROW><ROW><id>20164332</id><snippet>return</snippet></ROW><ROW><id>20164332</id><snippet>def function(x):</snippet></ROW><ROW><id>20164443</id><snippet>89a</snippet></ROW><ROW><id>20164443</id><snippet>87a</snippet></ROW><ROW><id>20164443</id><snippet>&gt;&gt;&gt; 'R0lGODlh'.decode('base64')
'GIF89a'
&gt;&gt;&gt; 'R0lGODdh'.decode('base64')
'GIF87a'
</snippet></ROW><ROW><id>20164443</id><snippet>89a</snippet></ROW><ROW><id>20164647</id><snippet>str</snippet></ROW><ROW><id>20164647</id><snippet>dest = open('C:\\124_BPP_PL_PL_processed.txt', 'w', encoding='utf8')
</snippet></ROW><ROW><id>20164647</id><snippet>with</snippet></ROW><ROW><id>20164647</id><snippet>.close()</snippet></ROW><ROW><id>20164647</id><snippet>for item in li:
     s = s.replace("[[Image:]]", item, 1)

with open('C:\\124_BPP_PL_PL_processed.txt', 'w', encoding='utf8') as dest:        
    dest.write(s)
</snippet></ROW><ROW><id>20164705</id><snippet>CV_8U</snippet></ROW><ROW><id>20164705</id><snippet>img_filtered = cv2.filter2D(gray, cv2.CV_8U, gb_kernel.transpose())
</snippet></ROW><ROW><id>20164820</id><snippet>tasks.py</snippet></ROW><ROW><id>20164820</id><snippet>from celery import task
# other imports

@task()
def create_user(data):
    user = User.objects.create_user(
        username=data['username'], email=None, password=data['password']
    )
    user.save()
    profile = UserProfile()
    profile.user = user
    profile.token = generate_token()
    profile.save()

    return None
</snippet></ROW><ROW><id>20164820</id><snippet>utils/utilities.py</snippet></ROW><ROW><id>20164820</id><snippet>views.py</snippet></ROW><ROW><id>20164820</id><snippet>create_user</snippet></ROW><ROW><id>20164820</id><snippet>create_user(form.cleaned_data)
</snippet></ROW><ROW><id>20164820</id><snippet>create_user.delay(form.cleaned_data)
</snippet></ROW><ROW><id>20164820</id><snippet>create_user</snippet></ROW><ROW><id>20164820</id><snippet>delay</snippet></ROW><ROW><id>20164820</id><snippet>python manage.py celeryd</snippet></ROW><ROW><id>20164820</id><snippet>upstart</snippet></ROW><ROW><id>20164820</id><snippet>supervisor</snippet></ROW><ROW><id>20164985</id><snippet>sys</snippet></ROW><ROW><id>20164985</id><snippet>print</snippet></ROW><ROW><id>20164994</id><snippet>mat[0][0] = "O"
</snippet></ROW><ROW><id>20164994</id><snippet>mat = [["X" for x in range(10)] for y in range (10)]
</snippet></ROW><ROW><id>20165581</id><snippet>def getelements(lst, key, res=None):
    if res is None:
        res = []
    for e in lst:
        if isinstance(e, list):
            if e[0] == key:
                res.append(e)
            else:
                getelements(e, key, res)
    return res
</snippet></ROW><ROW><id>20165581</id><snippet>l</snippet></ROW><ROW><id>20165581</id><snippet>res = getelements(l, 'PackageDto')
for n, e in enumerate(res):
    print(n, e)
</snippet></ROW><ROW><id>20165581</id><snippet>0 ['PackageDto', ['fetName', 'a'], ['fetValue', 'b']]
1 ['PackageDto', ['fetName', 'c'], ['fetValue', 'd']]
2 ['PackageDto', ['fetName', 'd'], ['fetValue', 'z']]
3 ['PackageDto', ['fetName', 'f'], ['fetValue', 'Sq']]
4 ['PackageDto', ['fetName', 'g'], ['fetValue', 'p']]
</snippet></ROW><ROW><id>20165582</id><snippet>%</snippet></ROW><ROW><id>20165582</id><snippet>str.format</snippet></ROW><ROW><id>20165582</id><snippet>&gt;&gt;&gt; "%.5f" % 0.5
'0.50000'
&gt;&gt;&gt; "{:.5f}".format(0.5)
'0.50000'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20165636</id><snippet>s = 'the cat as;asas was wjdwi;qs at home'
res = ' '.join(w for w in s.split() if ';' not in w)
# the cat was at home
</snippet></ROW><ROW><id>20165937</id><snippet>urllib</snippet></ROW><ROW><id>20165937</id><snippet>ConnectionError</snippet></ROW><ROW><id>20165937</id><snippet>time.sleep(600)</snippet></ROW><ROW><id>20165937</id><snippet>ConnectionError</snippet></ROW><ROW><id>20165937</id><snippet>def parse(url, retry=0, max_retry=5):
    try:
        req = sel.open(url)
    except ConnectionError:
        if retry &gt; max_retry: break
        logging.error('Connection error, resting...')
        time.sleep(100)
        self.parse(url, retry+1, max_retry)
</snippet></ROW><ROW><id>20165979</id><snippet>struct</snippet></ROW><ROW><id>20165979</id><snippet>import struct
import numpy as np # for random string of ones and zeros

def chunks(s):
    for i in xrange(0, len(s), 32):
         yield s[i:i+32]

s =  ''.join(str(np.random.randint(2)) for x in xrange(32*2))
ints = (int(x, 2) for x in chunks(s)) # convert string from binary repr to integers
bins = (struct.pack('I', i) for i in ints) # pack to unsigned ints
</snippet></ROW><ROW><id>20165979</id><snippet>&gt;&gt;&gt; s
'0000000000011111011101011001010111000000010110111100111110001001'
&gt;&gt;&gt; ''.join(bins)
'\x95u\x1f\x00\x89\xcf[\xc0'
</snippet></ROW><ROW><id>20165979</id><snippet>I</snippet></ROW><ROW><id>20165979</id><snippet>&gt;I</snippet></ROW><ROW><id>20165979</id><snippet>&lt;I</snippet></ROW><ROW><id>20165979</id><snippet>&gt;&gt;&gt; bi_bins = (struct.pack('&gt;I',  i) for i in ints)
&gt;&gt;&gt; ''.join(bi_bins)
'\x00\x1fu\x95\xc0[\xcf\x89'
</snippet></ROW><ROW><id>20166069</id><snippet>import numpy as np
import matplotlib.pyplot as plt

y = [0,0,0,0,0,0,0,0,0,0,0,863,969,978,957,764,767,1009,1895,980,791]
x = np.arange(len(y))

fig, (ax1) = plt.subplots(1,1); 
ax1.fill_between(x, 0, y)
plt.show()
</snippet></ROW><ROW><id>20166211</id><snippet>html = open("html.txt").read()
out = open("foundWeights.txt", "w")


#split html on order number
legoOrders = html.split("Order #")

for order in legoOrders[1:]:
  print order
  orderNumber = order.split("&lt;")[0]

  weightString = order.split('Estimated Weight of Order:&lt;/FONT&gt;&lt;/TD&gt;&lt;TD ALIGN="RIGHT"&gt;&lt;FONT CLASS="fv"&gt;')[1]
  splitWeightString = weightString.split('   ')
  splitStringFinal = splitWeightString[1].split("&lt;")

  grams = splitStringFinal[0]
  ozs = weightString.split('&amp;nbsp')[0]

  out.write(str(orderNumber) + "\t" + str(grams) + "\t" + str(ozs) + "\n"
</snippet></ROW><ROW><id>20166211</id><snippet>3953198 61.44g  2.17oz
</snippet></ROW><ROW><id>20166691</id><snippet>self.</snippet></ROW><ROW><id>20166691</id><snippet>self.</snippet></ROW><ROW><id>20166691</id><snippet>return [(Training.get_bigram_word_feats(gf), label) for gf in thelist()]
         ^---+---^
             |
             +-- you need this part
</snippet></ROW><ROW><id>20166896</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; OrderedDict([('method', 'constant'), ('data', '1.225')])
OrderedDict([('method', 'constant'), ('data', '1.225')])
&gt;&gt;&gt; dict(OrderedDict([('method', 'constant'), ('data', '1.225')]))
{'data': '1.225', 'method': 'constant'}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20166933</id><snippet>if int(row["DISTANCE"]) &lt;= 300:
    proceed_with_row(...)
</snippet></ROW><ROW><id>20166972</id><snippet>virtualenv</snippet></ROW><ROW><id>20166972</id><snippet>pip</snippet></ROW><ROW><id>20166972</id><snippet>tomasz@laptop:~/Development/Python/foo$ source bin/activate
(foo)tomasz@laptop:~/Development/Python/foo$ which python
/home/tomasz/Development/Python/foo/bin/python
(foo)tomasz@laptop:~/Development/Python/foo$ which pip
/home/tomasz/Development/Python/foo/bin/pip
(foo)tomasz@laptop:~/Development/Python/foo$ which easy_install
/home/tomasz/Development/Python/foo/bin/easy_install
(foo)tomasz@laptop:~/Development/Python/foo$ echo $PYTHONPATH
/usr/lib/python2.7/site-packages:/usr/lib/python2.7/dist-packages
</snippet></ROW><ROW><id>20167038</id><snippet>argparse: nargs='*' positional argument doesn't accept any items if preceded by an option and another positional</snippet></ROW><ROW><id>20167038</id><snippet>['1', '2', '--spam', '8', '8', '9']</snippet></ROW><ROW><id>20167038</id><snippet>['1','2']</snippet></ROW><ROW><id>20167038</id><snippet>AAA*</snippet></ROW><ROW><id>20167038</id><snippet>pos</snippet></ROW><ROW><id>20167038</id><snippet>foo</snippet></ROW><ROW><id>20167038</id><snippet>vars</snippet></ROW><ROW><id>20167038</id><snippet>*</snippet></ROW><ROW><id>20167038</id><snippet>['--spam','8']</snippet></ROW><ROW><id>20167038</id><snippet>--spam</snippet></ROW><ROW><id>20167038</id><snippet>vars</snippet></ROW><ROW><id>20167038</id><snippet>[]</snippet></ROW><ROW><id>20167038</id><snippet>['8','9']</snippet></ROW><ROW><id>20167038</id><snippet>argparse</snippet></ROW><ROW><id>20167038</id><snippet>0</snippet></ROW><ROW><id>20167038</id><snippet>optionals</snippet></ROW><ROW><id>20167038</id><snippet>*</snippet></ROW><ROW><id>20167038</id><snippet>parse_known_args</snippet></ROW><ROW><id>20167038</id><snippet>remainder</snippet></ROW><ROW><id>20167038</id><snippet>parse_args</snippet></ROW><ROW><id>20167038</id><snippet>parse_known_args</snippet></ROW><ROW><id>20167038</id><snippet>optionals</snippet></ROW><ROW><id>20167038</id><snippet>parse_args</snippet></ROW><ROW><id>20167038</id><snippet>parse_intermixed_args</snippet></ROW><ROW><id>20167038</id><snippet>ArgumentParser</snippet></ROW><ROW><id>20167038</id><snippet>argparse.py</snippet></ROW><ROW><id>20167038</id><snippet>parse_known_intermixed_args</snippet></ROW><ROW><id>20167038</id><snippet>parse_known_args</snippet></ROW><ROW><id>20167038</id><snippet>_parser_class</snippet></ROW><ROW><id>20167038</id><snippet>parse_known_args</snippet></ROW><ROW><id>20167038</id><snippet>_SubParsersAction</snippet></ROW><ROW><id>20167038</id><snippet>__call__</snippet></ROW><ROW><id>20167038</id><snippet>from argparse import ArgumentParser

def parse_known_intermixed_args(self, args=None, namespace=None):
    # self - argparse parser
    # simplified from http://bugs.python.org/file30204/test_intermixed.py
    parsefn = super(SubParser, self).parse_known_args # avoid recursion

    positionals = self._get_positional_actions()
    for action in positionals:
        # deactivate positionals
        action.save_nargs = action.nargs
        action.nargs = 0

    namespace, remaining_args = parsefn(args, namespace)
    for action in positionals:
        # remove the empty positional values from namespace
        if hasattr(namespace, action.dest):
            delattr(namespace, action.dest)
    for action in positionals:
        action.nargs = action.save_nargs
    # parse positionals
    namespace, extras = parsefn(remaining_args, namespace)
    return namespace, extras

class SubParser(ArgumentParser):
    parse_known_args = parse_known_intermixed_args

parser = ArgumentParser()
parser.add_argument('foo')
sp = parser.add_subparsers(dest='cmd')
sp._parser_class = SubParser # use different parser class for subparsers
spp1 = sp.add_parser('cmd1')
spp1.add_argument('-x')
spp1.add_argument('bar')
spp1.add_argument('vars',nargs='*')

print parser.parse_args('foo cmd1 bar -x one 8 9'.split())
# Namespace(bar='bar', cmd='cmd1', foo='foo', vars=['8', '9'], x='one')
</snippet></ROW><ROW><id>20167043</id><snippet>labels</snippet></ROW><ROW><id>20167043</id><snippet>labels==1</snippet></ROW><ROW><id>20167043</id><snippet>a[labels==1, :]</snippet></ROW><ROW><id>20167043</id><snippet>matrix([[ 1,  2,  3],
        [ 7,  8,  9],
        [10, 11, 12]])
</snippet></ROW><ROW><id>20167043</id><snippet>labels</snippet></ROW><ROW><id>20167043</id><snippet>a[labels.view(np.ndarray).ravel()==1, :]
</snippet></ROW><ROW><id>20167148</id><snippet>lo()</snippet></ROW><ROW><id>20167148</id><snippet>Console</snippet></ROW><ROW><id>20167148</id><snippet>lo()</snippet></ROW><ROW><id>20167148</id><snippet>self</snippet></ROW><ROW><id>20167148</id><snippet>class Console:
    def start(self): # functions and methods should have lowercase names
        self.proc = sp.Popen(...)
    def lo(self):
        line = self.proc.stdout.readline()
        ...
</snippet></ROW><ROW><id>20167148</id><snippet>Start()</snippet></ROW><ROW><id>20167219</id><snippet>{% static 'url' %}</snippet></ROW><ROW><id>20167219</id><snippet>{{feedback.reception_courtesy}}</snippet></ROW><ROW><id>20167219</id><snippet>&lt;img src="{% static 'images' %}/rating-{{feedback.reception_courtesy}}.gif" alt="My image"/&gt;
</snippet></ROW><ROW><id>20167219</id><snippet>{% static ... %}</snippet></ROW><ROW><id>20167219</id><snippet>{% static 'one/two/three' %}</snippet></ROW><ROW><id>20167219</id><snippet>{% static 'one/two' %}/three</snippet></ROW><ROW><id>20167458</id><snippet>from PyQt4 import QtCore, QtGui

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.checkbox = QtGui.QCheckBox('Delete')
        self.button = QtGui.QPushButton('Open', self)
        self.button.clicked.connect(self.openDialog)
        layout = QtGui.QHBoxLayout(self)
        layout.addWidget(self.checkbox)
        layout.addWidget(self.button)

    def openDialog(self):
        widget = QtGui.QDialog(self)
        if (self.checkbox.isChecked() and
            not widget.testAttribute(QtCore.Qt.WA_DeleteOnClose)):
            widget.setAttribute(QtCore.Qt.WA_DeleteOnClose)
            for child in self.findChildren(QtGui.QDialog):
                if child is not widget:
                    child.deleteLater()
        label = QtGui.QLabel(widget)
        button = QtGui.QPushButton('Close', widget)
        button.clicked.connect(widget.close)
        layout = QtGui.QVBoxLayout(widget)
        layout.addWidget(label)
        layout.addWidget(button)
        objects = self.findChildren(QtCore.QObject)
        label.setText('Objects = %d' % len(objects))
        print(objects)
        widget.show()

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.setGeometry(500, 300, 100, 50)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20167679</id><snippet>self.files
</snippet></ROW><ROW><id>20167679</id><snippet>x</snippet></ROW><ROW><id>20167679</id><snippet>for x in self.files
</snippet></ROW><ROW><id>20167679</id><snippet>'/'</snippet></ROW><ROW><id>20167679</id><snippet>for x in self.files if x != '/'
</snippet></ROW><ROW><id>20167679</id><snippet>x[1:] for x in self.files if x != '/'
</snippet></ROW><ROW><id>20167679</id><snippet>[x[1:] for x in self.files if x != '/']
</snippet></ROW><ROW><id>20167679</id><snippet>ans = []                  # create a new empty list
for x in self.files:      # iterate over it, using x as variable
    if x != '/':          # if the element is not 'x'
        ans.append(x[1:]) # add it after removing 1st char
</snippet></ROW><ROW><id>20167679</id><snippet>ans</snippet></ROW><ROW><id>20167856</id><snippet>-d</snippet></ROW><ROW><id>20167856</id><snippet>   -d/--data &lt;data&gt;
</snippet></ROW><ROW><id>20167856</id><snippet>request.post</snippet></ROW><ROW><id>20167856</id><snippet>&gt;&gt;&gt; data = {'test':'12345'}
&gt;&gt;&gt; url = 'http://myurl.com'
&gt;&gt;&gt; r = requests.post(url,params=data)
&gt;&gt;&gt; print r.url
http://myurl.com/?test=12345
&gt;&gt;&gt; r = requests.post(url,data=data)
&gt;&gt;&gt; print r.url
http://myurl.com/
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20167984</id><snippet>quickest</snippet></ROW><ROW><id>20167984</id><snippet>simple</snippet></ROW><ROW><id>20167984</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; df = pd.DataFrame.from_dict({'A': {1: datetime.datetime.now()}})
&gt;&gt;&gt; df
                           A
1 2013-11-23 21:14:34.118531

&gt;&gt;&gt; records = json.loads(df.T.to_json()).values()
&gt;&gt;&gt; db.myCollection.insert(records)
</snippet></ROW><ROW><id>20167984</id><snippet>&gt;&gt;&gt; df = read_mongo(db, 'myCollection')
&gt;&gt;&gt; df
                     A
0  1385241274118531000
&gt;&gt;&gt; df.dtypes
A    int64
dtype: object
</snippet></ROW><ROW><id>20167984</id><snippet>datetime</snippet></ROW><ROW><id>20167984</id><snippet>int</snippet></ROW><ROW><id>20167984</id><snippet>float</snippet></ROW><ROW><id>20167984</id><snippet>str</snippet></ROW><ROW><id>20167984</id><snippet>DataFrame</snippet></ROW><ROW><id>20167984</id><snippet>&gt;&gt;&gt; df['A'] = pd.to_datetime(df['A'])
&gt;&gt;&gt; df
                           A
0 2013-11-23 21:14:34.118531
</snippet></ROW><ROW><id>20167988</id><snippet>def weighted_random(deck):
    total = sum(deck.values())
    r = randint(1, total)
    for c in deck.keys():
        r -= deck[c]
        if r &lt;= 0:
            deck[c]-=1
            return c

results = weighted_random(deck)
</snippet></ROW><ROW><id>20168012</id><snippet>...
&lt;p&gt;{{ article.body|linebreaks }}&lt;/p&gt;
</snippet></ROW><ROW><id>20168019</id><snippet>(key,value)</snippet></ROW><ROW><id>20168019</id><snippet># data = {}
# key = 'UID'
# value = ('Name','Male','Accountant','20000')
# data[key] = value

def consistency(dictionary):

    temp_list_of_values_we_care_about = [(x[0],x[1],x[2]) for x in dictionary.itervalues()]
    temp_dict = {}

    for val in temp_list_of_values_we_care_about:
        if val in temp_dict:
            temp_dict[val] += 1
        else:
            temp_dict[val] = 1

    if max(temp_dict.values()) &gt;=5:
        return False
    else:
        return True
</snippet></ROW><ROW><id>20168019</id><snippet>def consistency(dictionary):

    temp_list_of_values_we_care_about = [(x[0],x[1],x[2]) for x in dictionary.itervalues()]
    temp_dict = {}

    for val in temp_list_of_values_we_care_about:
        if val in temp_dict:
            temp_dict[val] += 1
        else:
            temp_dict[val] = 1

    new_dictionary = {}
    for key in dictionary:

        value = dictionary[key]
        temp = (value[0],value[1],value[2])

        if temp_dict[temp] &lt;=5:
            new_dictionary[key] = value

    return new_dictionary
</snippet></ROW><ROW><id>20168036</id><snippet>&gt;&gt;&gt; [my_list[i:i+3] for i in xrange(0, len(my_list), 3)]
[['a', 'b', 'c'], ['d', 'e', 'f']]
</snippet></ROW><ROW><id>20168052</id><snippet>turtles = [tx, ty, tz, ti, tj]
for turtle in turtles:
    turtle.fd()
</snippet></ROW><ROW><id>20168052</id><snippet>map</snippet></ROW><ROW><id>20168416</id><snippet>0</snippet></ROW><ROW><id>20168416</id><snippet>&gt;&gt;&gt; result.index
Int64Index([0, 1, 2], dtype=int64)
</snippet></ROW><ROW><id>20168416</id><snippet>1</snippet></ROW><ROW><id>20168416</id><snippet>&gt;&gt;&gt; result.index += 1 
&gt;&gt;&gt; result.index
Int64Index([1, 2, 3], dtype=int64)
</snippet></ROW><ROW><id>20168441</id><snippet>.get_rect()</snippet></ROW><ROW><id>20168441</id><snippet>pygame.Rect()</snippet></ROW><ROW><id>20168441</id><snippet>space_ship = pygame.image.load(spaceship).convert_alpha()

space_ship_rect = space_ship.get_rect()
</snippet></ROW><ROW><id>20168441</id><snippet>x</snippet></ROW><ROW><id>20168441</id><snippet>y</snippet></ROW><ROW><id>20168441</id><snippet>width</snippet></ROW><ROW><id>20168441</id><snippet>height</snippet></ROW><ROW><id>20168441</id><snippet>centerx</snippet></ROW><ROW><id>20168441</id><snippet>centery</snippet></ROW><ROW><id>20168441</id><snippet>center</snippet></ROW><ROW><id>20168441</id><snippet>print space_ship_rect.x, space_ship_rect.y, 
print space_ship_rect.centerx, space_ship_rect.centery, 
print space_ship_rect.center
print space_ship_rect.left, space_ship_rect.right
print space_ship_rect.top, space_ship_rect.bottom
print space_ship_rect.topleft, space_ship_rect.bottomright
print space_ship_rect.width, space_ship_rect.height
</snippet></ROW><ROW><id>20168441</id><snippet>.get_rect()</snippet></ROW><ROW><id>20168441</id><snippet>screen</snippet></ROW><ROW><id>20168441</id><snippet>pygame.Surface()</snippet></ROW><ROW><id>20168441</id><snippet>space_ship_rect</snippet></ROW><ROW><id>20168441</id><snippet>get_rect()</snippet></ROW><ROW><id>20168441</id><snippet>space_ship_rect.x = 100
space_ship_rect.y = 200
 # or
space_ship_rect.centerx = 100
space_ship_rect.centery = 200
</snippet></ROW><ROW><id>20168441</id><snippet>x</snippet></ROW><ROW><id>20168441</id><snippet>y</snippet></ROW><ROW><id>20168441</id><snippet>centerx</snippet></ROW><ROW><id>20168441</id><snippet>centery</snippet></ROW><ROW><id>20168441</id><snippet>width</snippet></ROW><ROW><id>20168441</id><snippet>height</snippet></ROW><ROW><id>20168441</id><snippet>centerx</snippet></ROW><ROW><id>20168441</id><snippet>centery</snippet></ROW><ROW><id>20168441</id><snippet>x</snippet></ROW><ROW><id>20168441</id><snippet>y</snippet></ROW><ROW><id>20168441</id><snippet>self.image</snippet></ROW><ROW><id>20168441</id><snippet>self.rect</snippet></ROW><ROW><id>20168441</id><snippet>screen.blit(space_ship, space_ship_rect)</snippet></ROW><ROW><id>20168472</id><snippet>if</snippet></ROW><ROW><id>20168472</id><snippet>while True</snippet></ROW><ROW><id>20168472</id><snippet>if volts &lt; 1.1</snippet></ROW><ROW><id>20168472</id><snippet>sleep(1)</snippet></ROW><ROW><id>20168472</id><snippet>continue</snippet></ROW><ROW><id>20168495</id><snippet>line</snippet></ROW><ROW><id>20168495</id><snippet>float(line.split(',')[-1])</snippet></ROW><ROW><id>20168495</id><snippet>def isFloat(val):
    try:
        float(val)
        return True
    except ValueError:
        return False

 number = [x for x in line.split(',') if isFloat(x)][-1]
</snippet></ROW><ROW><id>20168495</id><snippet>with open("my_file.txt") as f:
    for line in f:
        # Here goes the code where you're getting the floating number from the line 
</snippet></ROW><ROW><id>20168564</id><snippet>L = [0,1,1,0]
print("1"*L.count(1) + "0"*L.count(0)) # O(n)
</snippet></ROW><ROW><id>20168564</id><snippet>L = [0,1,1,0]
print("".join(map(str, sorted(L, reverse=True)))) # O(n*log n)
</snippet></ROW><ROW><id>20168564</id><snippet>roll_n_dices = lambda n: random.getrandbits(n)
r = roll_n_dices(4)
binstr = bin(r)[2:].zfill(4)
sorted_binstr = "1"*binstr.count("1") + "0"*binstr.count("0")
hex_value = hex(int(sorted_binstr, 2))
</snippet></ROW><ROW><id>20168719</id><snippet>def traverse(self, size, obj, tmpList):
    if self.label is None or size == 0:
        return []
    dic = {}
    tt = [children.label for children in obj.children]
    dic[obj.label] = tt
    tmpList.append(dic)
    for child in obj.children:
        child.traverse(len(child.children), child, tmpList)
    return tmpList
</snippet></ROW><ROW><id>20168719</id><snippet>final = test.traverse(len(test.children), test, [])
</snippet></ROW><ROW><id>20168736</id><snippet>@forbidden_view_config(renderer='json')
def unauthenticated_forbidden_view(exc, request):
    request.response.status_code = 401
    request.response.www_authenticate = 'Bearer'
    return {'error': 'auth_required'}
</snippet></ROW><ROW><id>20168918</id><snippet>n = 100
numbers = range(2,100)
results = []
while len(numbers) &gt; 0:
    results.append(numbers[0])
    numbers = [number for number in numbers if number % results[-1] != 0]
print len(results)
</snippet></ROW><ROW><id>20169063</id><snippet>a = np.arange(9.).reshape(3,3)
s = sparse.csr_matrix(a)
</snippet></ROW><ROW><id>20169063</id><snippet>np.sqrt(s.multiply(s).sum(1))
</snippet></ROW><ROW><id>20169063</id><snippet>s</snippet></ROW><ROW><id>20169063</id><snippet>s.multiply(1/np.sqrt(s.multiply(s).sum(1)))
</snippet></ROW><ROW><id>20169063</id><snippet>s.multiply(sparse.csr_matrix(1/np.sqrt(s.multiply(s).sum(1))))
</snippet></ROW><ROW><id>20169063</id><snippet>m = s.todense()
a = s.toarray()
</snippet></ROW><ROW><id>20169063</id><snippet>n = np.sqrt(np.einsum('ij,ij-&gt;i',a,a))
</snippet></ROW><ROW><id>20169063</id><snippet>n = np.apply_along_axis(np.linalg.norm, 1, a)
</snippet></ROW><ROW><id>20169063</id><snippet>an = a / n[:, None]
</snippet></ROW><ROW><id>20169063</id><snippet>a /= n[:, None]
</snippet></ROW><ROW><id>20169063</id><snippet>[:, None]</snippet></ROW><ROW><id>20169063</id><snippet>n</snippet></ROW><ROW><id>20169196</id><snippet>from decimal import *

html = open("html.txt").read()
out = open("legoShipping.txt", "w")

out.write("Order Number" + "\t" +
          "Grand Total (currency)" + "\t" +
          "Order Total (currency)" + "\t" +
          "Shipping Cost (currency)" + "\t" +
          "Order Weight (grams)" + "\t" +
          "Order Weight (oz.)" + "\t" +
          "Shipping Class" + "\n")

#split html on order number
legoOrders = html.split("Order #")

for order in legoOrders[1:]:
  orderNumber = order.split("&lt;")[0]

  #get Grand Total
  grand = order.split("&lt;TD&gt;Grand Total:&lt;/TD&gt;")[1].split('&lt;TD ALIGN="RIGHT"&gt;&lt;B&gt;')[1].split("&lt;")[0].split(' ')
  grandCurrency = grand[0]
  grandTotal = grand[1]

  #get Order Total
  orderTotalAndCurrency = order.split('&lt;TD&gt;Order Total:&lt;/TD&gt;')[1].split('&lt;TD ALIGN="RIGHT"&gt;')[1].split("&lt;")[0].split(' ')
  orderCurrency = orderTotalAndCurrency[0]
  orderTotal = orderTotalAndCurrency[1]

  #get Shipping Cost
  shipping = order.split("&lt;TD&gt;Shipping:&lt;/TD&gt;")[1].split('&lt;TD ALIGN="RIGHT"&gt;')[1].split("&lt;")[0].split(' ')
  shippingCurrency = shipping[0]
  shippingCost = shipping[1]

  #get Weights
  weightString = order.split('Estimated Weight of Order:&lt;/FONT&gt;&lt;/TD&gt;&lt;TD ALIGN="RIGHT"&gt;&lt;FONT CLASS="fv"&gt;')[1]
  splitWeightString = weightString.split('   ')
  splitStringFinal = splitWeightString[1].split("&lt;")
  grams = splitStringFinal[0]
  ozs = weightString.split('&amp;nbsp')[0]

  #convert grams to mathematical value
  gramsValue = Decimal(grams[:-1])

  #create default shipping class value. Set it to ""
  shippingClass = ""

  if gramsValue &gt; 0:
    if gramsValue &lt; 100:
      shippingClass = "A"

  if gramsValue &gt;= 100:
    if gramsValue &lt; 200:
      shippingClass = "B"

  out.write(str(orderNumber) + "\t" +
            str(grandTotal) + " (" + str(grandCurrency) + ")" + "\t" +
            str(orderTotal) + " (" + str(orderCurrency) + ")" + "\t" +
            str(shippingCost) + " (" + str(shippingCurrency) + ")" + "\t" +
            str(grams) + "\t" +
            str(ozs) + "\t" +
            str(shippingClass) + "\n")
</snippet></ROW><ROW><id>20169224</id><snippet>&gt;&gt;&gt; word = 'steam'
&gt;&gt;&gt; for i in range(len(word)):
...     print word[i:i+2]
... 
st
te
ea
am
m
</snippet></ROW><ROW><id>20169224</id><snippet>&gt;&gt;&gt; pairs = {}
&gt;&gt;&gt; n = 2
&gt;&gt;&gt; word = 'banana'
&gt;&gt;&gt; for i in range(len(word)):
...     pair = word[i:i+n]
...     pairs[pair] = pairs.get(pair, 0) + 1
... 
&gt;&gt;&gt; pairs
{'a': 1, 'na': 2, 'ba': 1, 'an': 2}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20169224</id><snippet>pairs</snippet></ROW><ROW><id>20169224</id><snippet>n</snippet></ROW><ROW><id>20169224</id><snippet>&gt;&gt;&gt; pairs = {}
&gt;&gt;&gt; for i in range(len(word)):
...     pair = word[i:i+n]
...     pair += '$' * (n - len(pair))
...     pairs[pair] = pairs.get(pair, 0) + 1
... 
&gt;&gt;&gt; pairs
{'na': 2, 'a$': 1, 'ba': 1, 'an': 2}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20169528</id><snippet>from urllib2 import urlopen
import json
def getplace(lat, lon):
    url = "http://maps.googleapis.com/maps/api/geocode/json?"
    url += "latlng=%s,%s&amp;sensor=false" % (lat, lon)
    v = urlopen(url).read()
    j = json.loads(v)
    components = j['results'][0]['address_components']
    country = town = None
    for c in components:
        if "country" in c['types']:
            country = c['long_name']
        if "postal_town" in c['types']:
            town = c['long_name']
    return town, country


print(getplace(51.1, 0.1))
print(getplace(51.2, 0.1))
print(getplace(51.3, 0.1))
</snippet></ROW><ROW><id>20169528</id><snippet>(u'Hartfield', u'United Kingdom')
(u'Edenbridge', u'United Kingdom')
(u'Sevenoaks', u'United Kingdom')
</snippet></ROW><ROW><id>20169643</id><snippet>typestr</snippet></ROW><ROW><id>20169643</id><snippet>int</snippet></ROW><ROW><id>20169643</id><snippet>&gt;&gt;&gt; s = pd.Series([1], dtype=np.int64)
&gt;&gt;&gt; s == 'a'
Traceback (most recent call last):
   ...
TypeError: Could not compare &lt;type 'str'&gt; type with Series
</snippet></ROW><ROW><id>20169643</id><snippet>&gt;&gt;&gt; typestr[typestr == 1] = 'ask'
</snippet></ROW><ROW><id>20169820</id><snippet>datetime.datetime</snippet></ROW><ROW><id>20169820</id><snippet>datetime.date</snippet></ROW><ROW><id>20169820</id><snippet>datetime.date</snippet></ROW><ROW><id>20169820</id><snippet>datetime.datetime</snippet></ROW><ROW><id>20169831</id><snippet>g</snippet></ROW><ROW><id>20169831</id><snippet>g(i,j) = F(g(i-1,j),g(i,j-1),g(i-1,j-1)</snippet></ROW><ROW><id>20169831</id><snippet>F</snippet></ROW><ROW><id>20169831</id><snippet>g(2,2) -&gt; g(1,2), g(2,1), g(1,1).
</snippet></ROW><ROW><id>20169831</id><snippet>g(1,2) -&gt; g(0,2), g(1,1), g(0,1)
</snippet></ROW><ROW><id>20169831</id><snippet>g(2,1) -&gt; g(1,2), g(1,1), g(1,0)
</snippet></ROW><ROW><id>20170159</id><snippet>chunksize</snippet></ROW><ROW><id>20170159</id><snippet>multiprocessing</snippet></ROW><ROW><id>20170159</id><snippet>chunks = [stringList[i: i+chunksize]
          for i in xrange(0, len(stringList), chunksize)]

for result in pool.imap(self.do_task, chunks):
    print result
</snippet></ROW><ROW><id>20170224</id><snippet>import random

LOWEST = 1
HIGHEST = 100

def main():
    print('Guess the secret number between {} and {}!'.format(LOWEST, HIGHEST))
    secret = random.randint(LOWEST, HIGHEST)

    tries = 0
    while True:
        guess = raw_input('Your guess: ').strip().lower()
        if guess.isdigit():
            tries += 1
            guess = int(guess)
            if guess &lt; secret:
                print('Higher!')
            elif guess &gt; secret:
                print('Lower!')
            else:
                print('You got it in {} tries!'.format(tries))
                break
        elif guess == "reveal":
            print('The secret number was {}'.format(secret))
            break
        else:
            print('Please enter a number between {} and {}'.format(LOWEST, HIGHEST))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>20170279</id><snippet>s2i = {"0": 0,
"1": 1,
"2": 2,
...
"Y": 34,
"Z": 35
}

def convert_float(s, base=10):
    ret = 0
    if "." not in s: bef = s
    else: bef, aft = s.split(".")
    for i in enumerate(reversed(bef)):
        integer = s2i[i[1]]
        if integer &gt;= base: raise ValueError
        ret += base**i[0] * integer
    if "." not in s: return ret
    for i in enumerate(aft):
        integer = s2i[i[1]]
        if integer &gt;= base: raise ValueError
        ret += base**-(i[0] + 1) * integer
    return ret

print convert_float("YF.1G90N", 36)

&gt; 1239.04031674
</snippet></ROW><ROW><id>20170301</id><snippet>POST</snippet></ROW><ROW><id>20170301</id><snippet>def submitrawtext(request):
    if request.method == "POST":
        form = SubmittedTextFileForm(request.POST)
        if form.is_valid():
           form.save()
           return render(request, 'upload_comlete.html')
        else:
           print form.errors #To see the form errors in the console. 
    else:
        form = SubmittedTextFileForm()
    # If form is not valid, this would re-render inputtest.html with the errors in the form.
    return render(request, 'inputtest.html', {'form': form})
</snippet></ROW><ROW><id>20170306</id><snippet>while True:</snippet></ROW><ROW><id>20170306</id><snippet>#!/usr/bin/python

while True:
    # some python code that I want 
    # to keep on running
</snippet></ROW><ROW><id>20170306</id><snippet>time.sleep</snippet></ROW><ROW><id>20170356</id><snippet>@crsf_exempt</snippet></ROW><ROW><id>20170356</id><snippet>from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse

@csrf_exempt
def my_view(request):
    return HttpResponse('Hello world')
</snippet></ROW><ROW><id>20170400</id><snippet>rid = RadioField("Record Select", choices=[], coerce=int,validators=[InputRequired()])
</snippet></ROW><ROW><id>20170400</id><snippet>form.rid.choices = mychoices
</snippet></ROW><ROW><id>20170400</id><snippet>validate_on_submit()</snippet></ROW><ROW><id>20170400</id><snippet>validate_on_submit</snippet></ROW><ROW><id>20170480</id><snippet>cell = [self.M[i][j], self.Ic[i][j], self.Ir[i][j]]</snippet></ROW><ROW><id>20170480</id><snippet> cell = [self.M[i][j], self.Ic[i][j], self.Ir[i][j]]
 cellIndex = cell.index(max(cell))
 while i &gt; 1 and j &gt; 1:
      chars = self.row_seq[i-1]+self.col_seq[j-1]
      if cellIndex == 0: #M
            diag = [diagM, diagC, diagR] = self.score_cell(i-1, j-1, chars)
            diagMax = max(diag)
            ...
            cellIndex = diagMax
            i, j = i-1, j-1
        elif cell.index(cellMax) == 1: #Ic
            up = [upM, upC, upR] = self.score_cell(i-1, j, chars)
            upMax = max(up)
            ...
            cellIndex = upMax
            i -= 1
        elif cell.index(cellMax) == 2: #Ir
            left = [leftM, leftC, leftR] = self.score_cell(i, j-1, chars)
            leftMax = max(left)
            ...
            cellIndex = leftMax
            j -= 1
</snippet></ROW><ROW><id>20170523</id><snippet>Button(root, text=a, command=lambda:show(i,j)).grid(column=j, row=i)
</snippet></ROW><ROW><id>20170523</id><snippet>def inner(i=i, j=j):
    Button(root, text=a, command=lambda:show(i,j)).grid(column=j, row=i)
inner()
</snippet></ROW><ROW><id>20170523</id><snippet>i</snippet></ROW><ROW><id>20170523</id><snippet>j</snippet></ROW><ROW><id>20170523</id><snippet>show</snippet></ROW><ROW><id>20170523</id><snippet>i</snippet></ROW><ROW><id>20170523</id><snippet>j</snippet></ROW><ROW><id>20170523</id><snippet>i</snippet></ROW><ROW><id>20170523</id><snippet>j</snippet></ROW><ROW><id>20170523</id><snippet>i</snippet></ROW><ROW><id>20170523</id><snippet>j</snippet></ROW><ROW><id>20170523</id><snippet>i</snippet></ROW><ROW><id>20170523</id><snippet>j</snippet></ROW><ROW><id>20170690</id><snippet>class myHeap(object):
    pass

myHeap.array = [2, 2, 2, 1]

for n, head in enumerate(myHeap.array):
    if head != None:
        myHeap.array[n] = head + 1

print myHeap.array
</snippet></ROW><ROW><id>20170690</id><snippet>[3, 3, 3, 2]
</snippet></ROW><ROW><id>20170816</id><snippet>enemyhp= 50
</snippet></ROW><ROW><id>20170816</id><snippet>enemyhp= 50
while do != 'hit rat with sword' or 'run away':
</snippet></ROW><ROW><id>20170818</id><snippet>i</snippet></ROW><ROW><id>20170818</id><snippet>i</snippet></ROW><ROW><id>20170818</id><snippet>zip()</snippet></ROW><ROW><id>20170818</id><snippet>def where_clause_case_1(my_dict, b1, b2):
    # build a set of indices to keep
    keep = {i for i, (x, y) in enumerate(zip(my_dict[b1], my_dict[b2])) if x == y}
    # build a new dictionary with kept indices
    return {key: [v for i, v in enumerate(value) if i in keep] for key, value in my_dict.items()}
</snippet></ROW><ROW><id>20170818</id><snippet>{key_expression: value_expression for variables in sequence}</snippet></ROW><ROW><id>20170818</id><snippet>my_dict</snippet></ROW><ROW><id>20170818</id><snippet>keep</snippet></ROW><ROW><id>20170818</id><snippet>def where_clause_case_1(my_dict, b1, b2):
    # build a set of indices to keep
    keep = set()
    for i, (x, y) in enumerate(zip(my_dict[b1], my_dict[b2])):
        if x == y:
            keep.add(i)

    # build a new dictionary with kept indices
    retval = {}
    for key, oldvalue in my_dict.items():
        retval[key] = newvalue = []
        for i, v in enumerate(oldvalue):
            if i in keep:
                newvalue.append(v)
    return retval
</snippet></ROW><ROW><id>20170818</id><snippet>&gt;&gt;&gt; def where_clause_case_1(my_dict, b1, b2):
...     # build a set of indices to keep
...     keep = {i for i, (x, y) in enumerate(zip(my_dict[b1], my_dict[b2])) if x == y}
...     # build a new dictionary with kept indices
...     return {key: [v for i, v in enumerate(value) if i in keep] for key, value in my_dict.items()}
... 
&gt;&gt;&gt; where_clause_case_1({'a': [1, 2], 'b': [1, 2], 'c':[3, 2]}, 'b', 'c')
{'a': [2], 'c': [2], 'b': [2]}
&gt;&gt;&gt; where_clause_case_1({'a': [1, 2], 'b': [1, 2], 'c':[3, 2]}, 'a', 'b')
{'a': [1, 2], 'c': [3, 2], 'b': [1, 2]}
</snippet></ROW><ROW><id>20170944</id><snippet>0</snippet></ROW><ROW><id>20170944</id><snippet>x</snippet></ROW><ROW><id>20170944</id><snippet>1e-8</snippet></ROW><ROW><id>20170944</id><snippet>R</snippet></ROW><ROW><id>20170944</id><snippet>his name shall not be spoken</snippet></ROW><ROW><id>20170944</id><snippet>RuntimeWarning</snippet></ROW><ROW><id>20170944</id><snippet>scipy</snippet></ROW><ROW><id>20170944</id><snippet>0.12.0</snippet></ROW><ROW><id>20170944</id><snippet>numpy</snippet></ROW><ROW><id>20170944</id><snippet>1.7.1</snippet></ROW><ROW><id>20170944</id><snippet>In [41]: popt, pcov
Out[41]: (array([  3.90107143e+01,  -3.08698757e+07,  -1.52971609e+02]), inf)
</snippet></ROW><ROW><id>20170944</id><snippet>f</snippet></ROW><ROW><id>20170944</id><snippet>g</snippet></ROW><ROW><id>20170944</id><snippet>In [38]: def g(x, a, b, c):
   ....:     return b/a*x**c+1/a
   ....:

In [39]: curve_fit(g, x, 1/y) #Better fit
Out[39]:
(array([ 19.76748582,  -0.14499508,   0.44206688]),
 array([[ 0.29043958,  0.00899521,  0.01650935],
        [ 0.00899521,  0.00036082,  0.00070345],
        [ 0.01650935,  0.00070345,  0.00140253]]))
</snippet></ROW><ROW><id>20170944</id><snippet>f()</snippet></ROW><ROW><id>20170944</id><snippet>curve_fit</snippet></ROW><ROW><id>20170944</id><snippet>g()</snippet></ROW><ROW><id>20170944</id><snippet>f()</snippet></ROW><ROW><id>20170944</id><snippet>In [78]: curve_fit(f, x, y, p0=curve_fit(g, x, 1/y)[0]) #Alternative Fit
Out[78]:
(array([ 18.0480446 ,  -0.22881647,   0.31200106]),
 array([[ 1.14928169,  0.03741604,  0.03897652],
        [ 0.03741604,  0.00128511,  0.00136315],
        [ 0.03897652,  0.00136315,  0.00145614]]))
</snippet></ROW><ROW><id>20170988</id><snippet>k1, k2 = ['C','D','H','S'], ['2','3','4','5','6','7','8','9','T','J','Q','K','A']
data = ['D5','DA','DT','HA','SQ']
print sorted(data, key=lambda x: k1.index(x[0]) * 13 + k2.index(x[1]))
</snippet></ROW><ROW><id>20170988</id><snippet>['D5', 'DT', 'DA', 'HA', 'SQ']
</snippet></ROW><ROW><id>20171006</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>20171006</id><snippet>import numpy as np
import scipy as sp
</snippet></ROW><ROW><id>20171188</id><snippet>package.json</snippet></ROW><ROW><id>20171188</id><snippet>if [ -f $1/package.json ]; then
  echo "Node.js" &amp;&amp; exit 0</snippet></ROW><ROW><id>20171188</id><snippet>heroku config:set BUILDPACK_URL=https://github.com/heroku/heroku-buildpack-python</snippet></ROW><ROW><id>20171189</id><snippet>r'https://www\.facebook\.com/.*browser'
</snippet></ROW><ROW><id>20171189</id><snippet>.</snippet></ROW><ROW><id>20171189</id><snippet>*</snippet></ROW><ROW><id>20171189</id><snippet>.*</snippet></ROW><ROW><id>20171189</id><snippet>r</snippet></ROW><ROW><id>20171251</id><snippet>all_data = soup.findAll('td', "yfnc_tabledata1")
stock_name = name.find('h2').string #find company's name in name_company with h2 tag

clean_data = list()
for x in [data.GetText().strip(' %') for data in all_data]
    try: 
        clean_data.append(float(x))
    except ValueError:
        clean_data.append(x)

try:    
    f.writerow([stock_name, clean_data[2], clean_data[17], clean_data[13], clean_data[29], clean_data[26]]) #write down PE data
except (IndexError, HTTPError) as e:
        pass
</snippet></ROW><ROW><id>20171290</id><snippet>clu</snippet></ROW><ROW><id>20171290</id><snippet>clu</snippet></ROW><ROW><id>20171290</id><snippet>clu</snippet></ROW><ROW><id>20171290</id><snippet>collections</snippet></ROW><ROW><id>20171290</id><snippet>Counter</snippet></ROW><ROW><id>20171290</id><snippet>from collections import Counter
with open(infilename, 'r') as infile:
    c = Counter(line.split()[0] for line in infile)
</snippet></ROW><ROW><id>20171290</id><snippet>c</snippet></ROW><ROW><id>20171290</id><snippet>Counter</snippet></ROW><ROW><id>20171290</id><snippet>clu</snippet></ROW><ROW><id>20171290</id><snippet>with open(infilename, 'r') as infile, open(outfilename, 'w') as outfile:
        for line in infile:
                clu, gen, spec, fam = line.split()
                if c[clu] &gt; 1:
                    outfile.write(line)
</snippet></ROW><ROW><id>20171393</id><snippet>self.recipes_by_guest = {"guest1": ["Beef Stew", "Tuna Casserole", "Spaghetti"],
                        "guest2": ["Beef Stew", "Spaghetti"],...etc}
guest = self.settings.get("guest")
recipes = self.recipes_by_guest[guest]
allergies = {'nuts': ["guest1", "guest2", "guest3"], 'seafood': ["guest5", "guest6"]}

for recipe in recipes: etc...
</snippet></ROW><ROW><id>20171404</id><snippet> result = subprocess.check_output(["./cexecutable", inputValue])
</snippet></ROW><ROW><id>20171404</id><snippet>result.split("/n")</snippet></ROW><ROW><id>20171404</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>20171404</id><snippet>Popen.communicate</snippet></ROW><ROW><id>20171404</id><snippet> genAlg = subprocess.Popen(["./executable"])
 ...
 #user enters data
 ...
 result = genAlg.communicate(inputValue)[0] 
 #communicate sends the given argument to stdin, and returns a 
 #tuple (stdout, stderr) - you want stdout, hence the "[0]"
</snippet></ROW><ROW><id>20171410</id><snippet>width=1</snippet></ROW><ROW><id>20171410</id><snippet>width=-1</snippet></ROW><ROW><id>20171410</id><snippet>In [33]: pprint.pprint(a, width=1)
{'first': 123,
 'second': 456,
 'third': {1: 1,
           2: 2}}
</snippet></ROW><ROW><id>20171443</id><snippet>localhost</snippet></ROW><ROW><id>20171443</id><snippet>FooLib</snippet></ROW><ROW><id>20171443</id><snippet>FooAPI</snippet></ROW><ROW><id>20171443</id><snippet>FooLib</snippet></ROW><ROW><id>20171443</id><snippet>FooAPI</snippet></ROW><ROW><id>20171443</id><snippet>FooApp</snippet></ROW><ROW><id>20171443</id><snippet>FooLib</snippet></ROW><ROW><id>20171841</id><snippet>return</snippet></ROW><ROW><id>20171841</id><snippet>function [a, b, c, d] = foo( a1, a2 )
% apples banabs, and most importantly assignment to outputs:
a = ...
b = ...
c = ...
d = ...
return;   % return has no arguments in Matlab
</snippet></ROW><ROW><id>20171841</id><snippet>def foo( a1, a2 ) :
    % apples bananas
    return a, b, c, d # outputs are defined here
</snippet></ROW><ROW><id>20171841</id><snippet>
    return ( a, b, c, d ) 
</snippet></ROW><ROW><id>20172006</id><snippet>BeautifulSoup4</snippet></ROW><ROW><id>20172006</id><snippet>lxml</snippet></ROW><ROW><id>20172006</id><snippet>from bs4 import BeautifulSoup
html = """..."""
soup = BeautifulSoup(html, 'lxml')
...
</snippet></ROW><ROW><id>20172006</id><snippet>anchor</snippet></ROW><ROW><id>20172217</id><snippet>myData</snippet></ROW><ROW><id>20172217</id><snippet>myData = ['{', 'a:', '"1",', 'b:', '{', 'a:', '"2",', 'b:', '{', 'a:', '"7",', 'b:', '{', 'a:', '"14"', '}', '}', '}', 'b:', '{', 'a:', '"3",', 'b:', '{', 'a:', '"8"', '}', 'b:', '{', 'a:', '"9"', '}', '}', 'b:', '{', 'a:', '"4",', 'b:', '{', 'a:', '"10"', '}', 'b:', '{', 'a:', '"11",', 'b:', '{', 'a:', '"15"', '}', '}', '}', 'b:', '{', 'a:', '"5"', '}', 'b:', '{', 'a:', '"6",', 'b:', '{', 'a:', '"12"', '}', 'b:', '{', 'a:', '"13",', 'b:', '{', 'a:', '16', '}', 'b:', '{', 'a:', '17', '}', 'b:', '{', 'a:', '18', '}', '}', '}', '}']</snippet></ROW><ROW><id>20172217</id><snippet>'},'</snippet></ROW><ROW><id>20172217</id><snippet>'}'</snippet></ROW><ROW><id>20172226</id><snippet>string[0]</snippet></ROW><ROW><id>20172226</id><snippet>string[-1]</snippet></ROW><ROW><id>20172226</id><snippet>l</snippet></ROW><ROW><id>20172226</id><snippet>r</snippet></ROW><ROW><id>20172226</id><snippet>1</snippet></ROW><ROW><id>20172226</id><snippet>-2</snippet></ROW><ROW><id>20172226</id><snippet>1 &lt; 0</snippet></ROW><ROW><id>20172226</id><snippet>def isPalindrome(s): return s == s[::-1]
</snippet></ROW><ROW><id>20172226</id><snippet>def isPalindrome(s, ignoreSpaces = False):
        if ignoreSpaces:
                s = s.replace(' ', '')
        return s == s[::-1]

print (isPalindrome ('pythonnohtyp') )
print (isPalindrome ('pythonnohtyp', True) )
print (isPalindrome ('pythonnoh ty p') )
print (isPalindrome ('pythonnoh ty p', True) )
</snippet></ROW><ROW><id>20172381</id><snippet>global_one = 0

class A(object):
    x = global_one + 10
    global_one = 100
    y = global_one + 20
    del global_one
    z = global_one + 30

a = A()
print a.x, a.y, a.z, global_one
</snippet></ROW><ROW><id>20172381</id><snippet>10, 120, 30, 0</snippet></ROW><ROW><id>20172381</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>20172381</id><snippet>global_one</snippet></ROW><ROW><id>20172412</id><snippet>None</snippet></ROW><ROW><id>20172412</id><snippet>request = sub_req.cleaned_data['request']
</snippet></ROW><ROW><id>20172438</id><snippet>numTimes = dict()
target = (len(a)//2)+1

for ele in a:
    if ele not in numTimes:
        numTimes[ele] = 1
    else:
        numTimes[ele] +=1

    if numTimes[ele] == target:
        return ele
</snippet></ROW><ROW><id>20172464</id><snippet>url = self.urlGetUnit
headers = {'content-type': 'application/json','encoding':'utf-8'}
r = requests.post(url, data=json.dumps(payload), headers=headers)
</snippet></ROW><ROW><id>20172464</id><snippet>self.urlGetUnit</snippet></ROW><ROW><id>20172464</id><snippet>baseUrl = 'http://www.yurticikargo.com/'
ajaxRoot = '_layouts/ArikanliHolding.YurticiKargo.WebSite/ajaxproxy-sswservices.aspx/'
getUnit = 'GetUnit'
urlGetUnit = baseUrl + ajaxRoot + getUnit
</snippet></ROW><ROW><id>20172464</id><snippet>http://www.yurticikargo.com/_layouts/ArikanliHolding.YurticiKargo.WebSite/ajaxproxy-sswservices.aspx/GetUnit</snippet></ROW><ROW><id>20172464</id><snippet>http://www.yurticikargo.com/_layouts/ArikanliHolding.YurticiKargo.WebSite/ajaxproxy-sswservices.aspx/GetUnit
http://www.yurticikargo.com/_layouts/ArikanliHolding.YurticiKargo.WebSite/ajaxproxy-unitservices.aspx/GetUnit
</snippet></ROW><ROW><id>20172464</id><snippet>ajaxRoot</snippet></ROW><ROW><id>20172589</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.Timer('random.randint(0,10)', 'import random').repeat()
[2.4119170746830494, 2.3879981728693105, 2.3901411990453427]
&gt;&gt;&gt; timeit.Timer('random.randrange(0,10)', 'import random').repeat()
[2.274937673930552, 2.178254943434162, 2.1761346646683215]
&gt;&gt;&gt; timeit.Timer('r._randbelow(10)', 'import random; r = random.Random()').repeat()
[1.115751664321607, 1.0852712353494667, 1.0842890608805078]
&gt;&gt;&gt; timeit.Timer('random.uniform(0,10)', 'import random').repeat()
[0.5058132474312629, 0.4609362760654676, 0.4719052973948692]
</snippet></ROW><ROW><id>20172589</id><snippet>uniform</snippet></ROW><ROW><id>20172599</id><snippet>settings.DEBUG=True</snippet></ROW><ROW><id>20172599</id><snippet>&gt;&gt;&gt; from django.contrib.auth.models import *
&gt;&gt;&gt; from django.db import connection
&gt;&gt;&gt; connection.queries
[]
&gt;&gt;&gt; query = User.objects.filter(pk=1)
&gt;&gt;&gt; connection.queries
[]
&gt;&gt;&gt; query.exists()
True
&gt;&gt;&gt; connection.queries
[{u'time': u'0.000', u'sql': u'SELECT (1) AS `a` FROM `auth_user` WHERE `auth_user`.`id` = 1  LIMIT 1'}]
&gt;&gt;&gt; query.get()
&lt;User: root&gt;
&gt;&gt;&gt; connection.queries
[{u'time': u'0.000', u'sql': u'SELECT (1) AS `a` FROM `auth_user` WHERE `auth_user`.`id` = 1  LIMIT 1'}, 
 {u'time': u'0.000', u'sql': u'SELECT `auth_user`.`id`, `auth_user`.`password`, `auth_user`.`last_login`, `auth_user`.`is_superuser`, `auth_user`.`username`, `auth_user`.`first_name`, `auth_user`.`last_name`, `auth_user`.`email`, `auth_user`.`is_staff`, `auth_user`.`is_active`, `auth_user`.`date_joined` FROM `auth_user` WHERE `auth_user`.`id` = 1 '}]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20172676</id><snippet>..., lookupNames=True, lookupValues=True
</snippet></ROW><ROW><id>20172676</id><snippet>..., cmdgen.MibVariable('TCP-MIB', 'tcpConnTable').addMibSource('/tmp/mymibs'),
</snippet></ROW><ROW><id>20172912</id><snippet>File "/usr/prestaconnect/prestashoperpconnect/src/prestapyt/prestapyt/prestapyt.py", line 375, in get_with_url
r = self._execute(url, 'GET')
File "/usr/prestaconnect/prestashoperpconnect/src/prestapyt/prestapyt/prestapyt.py", line 206, in _execute
self._check_status_code(r.status_code, r.content)
</snippet></ROW><ROW><id>20173108</id><snippet>pytumblr</snippet></ROW><ROW><id>20173108</id><snippet>import pytumblr
client = pytumblr.TumblrRestClient(
    '&lt;consumer_key&gt;',
    '&lt;consumer_secret&gt;',
    '&lt;oauth_token&gt;',
    '&lt;oauth_secret&gt;',
)
# Now that you're established, look at the client.create_video method.
client.create_video(**kwargs)
</snippet></ROW><ROW><id>20173108</id><snippet>data</snippet></ROW><ROW><id>20173108</id><snippet>embed</snippet></ROW><ROW><id>20173108</id><snippet>{
  "width": 250,
  "embed_code": "&lt;object width=\"248\" height=\"169\"&gt;&lt;param
     name=\"movie\" value=\"http:\/\/www.youtube.com\/
     v\/4Q1aI7xPo0Y&amp;rel=0&amp;egm=0&amp;
     showinfo=0&amp;fs=1\"&gt;&lt;\/param&gt;&lt;param name=\"wmode\"
     value=\"transparent\"&gt;&lt;\/param&gt;&lt;param name=\"
     allowFullScreen\" value=\"true\"&gt;&lt;\/param&gt;&lt;embed
     src=\"http:\/\/www.youtube.com\/v\/
     4Q1aI7xPo0Y&amp;rel=0&amp;egm=0&amp;showinfo=
     0&amp;fs=1\" type=\"application\/x-shockwave-flash\"
     width=\"248\" height=\"169\" allowFullScreen=\"true\"
     wmode=\"transparent\"&gt;&lt;\/embed&gt;&lt;\/object&gt;"
</snippet></ROW><ROW><id>20173123</id><snippet>filter</snippet></ROW><ROW><id>20173123</id><snippet>filter</snippet></ROW><ROW><id>20173123</id><snippet>lambda</snippet></ROW><ROW><id>20173123</id><snippet>lst = filter(lambda x: sum(x) in spectrum, lst)
</snippet></ROW><ROW><id>20173123</id><snippet>lst = [x for x in list if sum(x) in spectrum]
</snippet></ROW><ROW><id>20173123</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.Timer('filter(lambda x: sum(x) in spectrum, lst)', 'from __main__ import lst, spectrum').repeat()
[7.258743352344543, 7.146834532770029, 7.233350271593071]
&gt;&gt;&gt; timeit.Timer('[x for x in lst if sum(x) in spectrum]', 'from __main__ import lst, spectrum').repeat()
[5.67072096449019, 5.8301157366216785, 5.674548399701351]
</snippet></ROW><ROW><id>20173123</id><snippet>filter</snippet></ROW><ROW><id>20173179</id><snippet>MyModel.objects.extra(select={'field': "coalesce(field, 'Empty')"})
</snippet></ROW><ROW><id>20173262</id><snippet>unicode</snippet></ROW><ROW><id>20173262</id><snippet>io.open()</snippet></ROW><ROW><id>20173262</id><snippet>import io

with io.open(u'spam1.csv', 'r', encoding='utf8') as csvfile:
    spamreader = unicode_csv_reader(csvfile, delimiter=',', quotechar='"')
    for row in spamreader:
        print row
</snippet></ROW><ROW><id>20173262</id><snippet>with open(u'spam1.csv', 'rb') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=',', quotechar='"')
    for row in spamreader:
        row = [unicode(cell, 'utf-8') for cell in row]
</snippet></ROW><ROW><id>20173282</id><snippet>zip()</snippet></ROW><ROW><id>20173282</id><snippet>all()</snippet></ROW><ROW><id>20173282</id><snippet>if all(box ==  f for box, f in zip(filled_boxes, file)):
</snippet></ROW><ROW><id>20173282</id><snippet>zip()</snippet></ROW><ROW><id>20173282</id><snippet>all()</snippet></ROW><ROW><id>20173282</id><snippet>True</snippet></ROW><ROW><id>20173282</id><snippet>zip()</snippet></ROW><ROW><id>20173282</id><snippet>all()</snippet></ROW><ROW><id>20173282</id><snippet>&gt;&gt;&gt; zip([1, 2, 3], ['spam', 'ham', 'eggs'])
[(1, 'spam'), (2, 'ham'), (3, 'eggs')]
&gt;&gt;&gt; all(i &lt; 5 for i in range(5))
True
&gt;&gt;&gt; all(i &lt; 5 for i in range(10))
False
</snippet></ROW><ROW><id>20173282</id><snippet>all()</snippet></ROW><ROW><id>20173282</id><snippet>False</snippet></ROW><ROW><id>20173282</id><snippet>False</snippet></ROW><ROW><id>20173486</id><snippet>findAll</snippet></ROW><ROW><id>20173486</id><snippet>findAll</snippet></ROW><ROW><id>20173486</id><snippet>regex.search()</snippet></ROW><ROW><id>20173486</id><snippet>unicode(univ)</snippet></ROW><ROW><id>20173486</id><snippet>id</snippet></ROW><ROW><id>20173486</id><snippet>findAll</snippet></ROW><ROW><id>20173486</id><snippet>url = soup.find('div', {'id':'divBrand1'}).a['href']
</snippet></ROW><ROW><id>20173486</id><snippet>None</snippet></ROW><ROW><id>20173486</id><snippet>.find()</snippet></ROW><ROW><id>20173486</id><snippet>.a</snippet></ROW><ROW><id>20173486</id><snippet>has_key()</snippet></ROW><ROW><id>20173486</id><snippet>href</snippet></ROW><ROW><id>20173486</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>20173733</id><snippet>'http://103.4.253.46/search?q=nexus%204'
</snippet></ROW><ROW><id>20173768</id><snippet>python</snippet></ROW><ROW><id>20173768</id><snippet>/System/Library/Frameworks...</snippet></ROW><ROW><id>20173768</id><snippet>pip</snippet></ROW><ROW><id>20173768</id><snippet>/usr/local/lib/python2-7/site-packages</snippet></ROW><ROW><id>20173768</id><snippet>/usr/local/lib/python2.7/site-packages</snippet></ROW><ROW><id>20173768</id><snippet>PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH python exitwp.py
</snippet></ROW><ROW><id>20174149</id><snippet> print "First Second".replace(" ", "\040")
</snippet></ROW><ROW><id>20174149</id><snippet> print "First Second".replace(" ", "\\040")
</snippet></ROW><ROW><id>20174149</id><snippet>\\</snippet></ROW><ROW><id>20174269</id><snippet>for combination in itertools.product(['W','L'], repeat=(K*2)-1):
</snippet></ROW><ROW><id>20174269</id><snippet>2**(K*2-1)</snippet></ROW><ROW><id>20174269</id><snippet>(n choose k) * p**k (1 - p)**(n - k)
</snippet></ROW><ROW><id>20174269</id><snippet>(n choose k)</snippet></ROW><ROW><id>20174278</id><snippet>html</snippet></ROW><ROW><id>20174278</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>20174278</id><snippet>from bs4 import BeautifulSoup
import sys 

soup = BeautifulSoup(open(sys.argv[1], 'r'), 'html')

country = soup.find('table').find_all('br')[-1]
print(country.find_next(text=True).string)
</snippet></ROW><ROW><id>20174278</id><snippet>python3 script.py htmlfile 
</snippet></ROW><ROW><id>20174278</id><snippet>Germany
</snippet></ROW><ROW><id>20174479</id><snippet>try</snippet></ROW><ROW><id>20174479</id><snippet>except</snippet></ROW><ROW><id>20174479</id><snippet>try</snippet></ROW><ROW><id>20174479</id><snippet>except</snippet></ROW><ROW><id>20174479</id><snippet>raise Exception()</snippet></ROW><ROW><id>20174479</id><snippet>pass</snippet></ROW><ROW><id>20174544</id><snippet>/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources
/google_appengine/lib/cacerts/
</snippet></ROW><ROW><id>20174552</id><snippet>["R", "C"]</snippet></ROW><ROW><id>20174732</id><snippet>from Classes import *</snippet></ROW><ROW><id>20174732</id><snippet>import Classes</snippet></ROW><ROW><id>20174732</id><snippet>global variable</snippet></ROW><ROW><id>20174732</id><snippet>global</snippet></ROW><ROW><id>20174732</id><snippet>MAP_WIDTH</snippet></ROW><ROW><id>20174732</id><snippet>C.MAP_WIDTH</snippet></ROW><ROW><id>20174732</id><snippet>import C</snippet></ROW><ROW><id>20174757</id><snippet>l</snippet></ROW><ROW><id>20174902</id><snippet>def main():
    information = input_salesperson_data()
    commission = calculate_commission(information[1]) 
    determine_bonus(information[2], commission)
    output_commission(information[0], commission)
</snippet></ROW><ROW><id>20174902</id><snippet>input_salesperson_data()</snippet></ROW><ROW><id>20174902</id><snippet>information</snippet></ROW><ROW><id>20174902</id><snippet>input_salesperson_data()</snippet></ROW><ROW><id>20174902</id><snippet>calculate_commission()</snippet></ROW><ROW><id>20174902</id><snippet>commission</snippet></ROW><ROW><id>20174902</id><snippet>def determine_bonus(sales_amount, years_worked, commission):
</snippet></ROW><ROW><id>20174902</id><snippet>def determine_bonus(years_worked, commission):
</snippet></ROW><ROW><id>20174902</id><snippet>sales_amount</snippet></ROW><ROW><id>20175072</id><snippet>[-–—―]</snippet></ROW><ROW><id>20175072</id><snippet>-</snippet></ROW><ROW><id>20175072</id><snippet>\xe2</snippet></ROW><ROW><id>20175072</id><snippet>\x80</snippet></ROW><ROW><id>20175072</id><snippet>\x93</snippet></ROW><ROW><id>20175072</id><snippet>\xe2</snippet></ROW><ROW><id>20175072</id><snippet>\x80</snippet></ROW><ROW><id>20175072</id><snippet>\x94</snippet></ROW><ROW><id>20175072</id><snippet>\xe2</snippet></ROW><ROW><id>20175072</id><snippet>\x80</snippet></ROW><ROW><id>20175072</id><snippet>\x95</snippet></ROW><ROW><id>20175072</id><snippet>-</snippet></ROW><ROW><id>20175072</id><snippet>–</snippet></ROW><ROW><id>20175072</id><snippet>—</snippet></ROW><ROW><id>20175072</id><snippet>―</snippet></ROW><ROW><id>20175072</id><snippet># -*- coding: utf-8 -*-
import re
titles = [
    u'Spaced (News)',
    u'Angry Birds [Game]',
    u'Cheats - for all games', # dash
    u'Cheats – for all games', # ndash
    u'Cheats — for all games', # mdash
    u'Cheats ― for all games'  # horizontal bar
]
regex = re.compile(ur'^(?P&lt;name&gt;.+)\s+(([-–—―]\s+(?P&lt;addition_a&gt;.+))|([\(\[](?P&lt;addition_b&gt;.+)[\)\]]))$')
for title in titles:
    match = regex.match(title.strip())
    if match:
        data = {}
        data['name'] = match.group('name')
        data['addition'] = match.group('addition_a') or match.group('addition_b')
        print data
</snippet></ROW><ROW><id>20175072</id><snippet>{'addition': u'News', 'name': u'Spaced'}
{'addition': u'Game', 'name': u'Angry Birds'}
{'addition': u'for all games', 'name': u'Cheats'}
{'addition': u'for all games', 'name': u'Cheats'}
{'addition': u'for all games', 'name': u'Cheats'}
{'addition': u'for all games', 'name': u'Cheats'}
</snippet></ROW><ROW><id>20175072</id><snippet>&gt;&gt;&gt; r'[–]'
'[\xe2\x80\x93]'
&gt;&gt;&gt; re.findall(r'[–]', '–')
['\xe2', '\x80', '\x93']
&gt;&gt;&gt; re.findall(ur'[–]', u'–')
[u'\u2013']
&gt;&gt;&gt; print re.findall(ur'[–]', u'–')[0]
–
</snippet></ROW><ROW><id>20175135</id><snippet>equal</snippet></ROW><ROW><id>20175135</id><snippet>right</snippet></ROW><ROW><id>20175135</id><snippet>sort()</snippet></ROW><ROW><id>20175135</id><snippet>print "sorting", array</snippet></ROW><ROW><id>20175135</id><snippet>&gt;&gt;&gt; sort([3,1,2])
('sorting ', [3, 1, 2])
('sorting ', [1, 2])
('sorting ', [])
('sorting ', [1, 2])
('sorting ', [])
('sorting ', [1, 2])
('sorting ', [])
... etc. until crash
</snippet></ROW><ROW><id>20175231</id><snippet>event.type == MOUSEMOTION</snippet></ROW><ROW><id>20175231</id><snippet>display_s</snippet></ROW><ROW><id>20175231</id><snippet>display_s</snippet></ROW><ROW><id>20175231</id><snippet>display_s</snippet></ROW><ROW><id>20175231</id><snippet>def main():
     load()
     while(playing == True):
         handle_input()
         update()
         draw()
     unload()
</snippet></ROW><ROW><id>20175247</id><snippet>(1, 2)[1:]
#&gt;&gt;&gt; (2,)

(1, 2)[1]
#&gt;&gt;&gt; 2
</snippet></ROW><ROW><id>20175275</id><snippet>tal:attributes</snippet></ROW><ROW><id>20175275</id><snippet>&lt;li tal:repeat="menu view.site_menu" tal:attributes="class 'active' if menu.current else None"&gt;
    &lt;a href="/${menu.href}"&gt;${menu.title}&lt;/a&gt;
&lt;/li&gt;
</snippet></ROW><ROW><id>20175275</id><snippet>None</snippet></ROW><ROW><id>20175276</id><snippet>   print("\n".join(str(n,x))
</snippet></ROW><ROW><id>20175276</id><snippet>   print("\n".join(str(n,x)))
   #                        ^
</snippet></ROW><ROW><id>20175276</id><snippet>str</snippet></ROW><ROW><id>20175276</id><snippet>&gt;&gt;&gt; str(1, 2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: str() takes at most 1 argument (2 given)
&gt;&gt;&gt; str(1)
'1'
</snippet></ROW><ROW><id>20175276</id><snippet>n=0
for x in List:
    print(n, x)
    n += 1
</snippet></ROW><ROW><id>20175276</id><snippet>enumerate</snippet></ROW><ROW><id>20175276</id><snippet>for n, x in enumerate(List, 1):
    print(n, x)
</snippet></ROW><ROW><id>20175321</id><snippet>in</snippet></ROW><ROW><id>20175321</id><snippet>if shippingDest == "Spain":
    shippingRegion = "Spain"
elif shippingDest == "Portugal":
    shippingRegion = "Portugal"
elif shippingDest in ["France", "Germany", "Luxembourg", "Belgium", "United Kingdom"]:
    shippingRegion = "Euro1"
elif shippingDest in ["Albania", "Andorra", "Austria", "Belarus", "Bosnia and Herzegovina", "Bulgaria", "Croatia", "Czech Republic", "Denmark", "Estonia", "Faroe Islands", "Finland", "Georgia", "Gibraltar", "Greece", "Hongary", "Iceland", "Ireland", "Italy", "Latvia", "Liechtenstein", "Lithuania", "Luxembourg", "Macedonia", "Malta", "Moldova", "Monaco", "Montenegro", "Netherlands", "Norway", "Poland", "Romania", "Russia", "San Marino", "Serbia", "Slovenia", "Svalbard and Jan Mayen", "Sweden", "Switzerland", "Ukraine", "Vatican City State"]:
    shippingRegion = "Euro2"
else:
    shippingRegion = "World"
</snippet></ROW><ROW><id>20175321</id><snippet>in</snippet></ROW><ROW><id>20175321</id><snippet>{'something', 'something else', 'another thing', '...'}
</snippet></ROW><ROW><id>20175321</id><snippet>in</snippet></ROW><ROW><id>20175321</id><snippet>elif</snippet></ROW><ROW><id>20175321</id><snippet>if</snippet></ROW><ROW><id>20175321</id><snippet>if</snippet></ROW><ROW><id>20175321</id><snippet>Euro2</snippet></ROW><ROW><id>20175321</id><snippet>World</snippet></ROW><ROW><id>20175336</id><snippet>DISPLAY</snippet></ROW><ROW><id>20175336</id><snippet>:0</snippet></ROW><ROW><id>20175336</id><snippet>* * * * * export DISPLAY=:0.0 &amp;&amp; export XAUTHORITY=/home/&lt;username&gt;/.Xauthority &amp;&amp; sudo -u &lt;username&gt; /usr/bin/python /path/to/python/email/program.py
</snippet></ROW><ROW><id>20175336</id><snippet>&lt;username&gt;</snippet></ROW><ROW><id>20175344</id><snippet>u'patr\xed'</snippet></ROW><ROW><id>20175344</id><snippet>print u'patr\xed'</snippet></ROW><ROW><id>20175449</id><snippet>def partition(lst, start, end):
    pos = start                           # condition was obsolete, loop won't
                                          # simply run for empty range

    for i in range(start, end):           # i must be between start and end-1
        if lst[i] &lt; lst[end]:             # in your version it always goes from 0
            lst[i],lst[pos] = lst[pos],lst[i]
            pos += 1

    lst[pos],lst[end] = lst[end],lst[pos] # you forgot to put the pivot
                                          # back in its place
    return pos

def quick_sort_recursive(lst, start, end):
    if start &lt; end:                       # this is enough to end recursion
        pos = partition(lst, start, end)
        quick_sort_recursive(lst, start, pos - 1)
        quick_sort_recursive(lst, pos + 1, end)
                                          # you don't need to return the list
                                          # it's modified in place
</snippet></ROW><ROW><id>20175449</id><snippet>example = [3,45,1,2,34]
quick_sort_recursive(example, 0, len(example) - 1)
print example
</snippet></ROW><ROW><id>20175462</id><snippet>m+1</snippet></ROW><ROW><id>20175462</id><snippet>x in range()</snippet></ROW><ROW><id>20175462</id><snippet>range(2, m/2, 1)</snippet></ROW><ROW><id>20175462</id><snippet>    if m % x == 0:
        if Prime(m) != 0:
            l.append(x)
</snippet></ROW><ROW><id>20175462</id><snippet>m</snippet></ROW><ROW><id>20175462</id><snippet>x</snippet></ROW><ROW><id>20175462</id><snippet>Prime(m)</snippet></ROW><ROW><id>20175462</id><snippet>x</snippet></ROW><ROW><id>20175462</id><snippet>x</snippet></ROW><ROW><id>20175462</id><snippet>== m</snippet></ROW><ROW><id>20175462</id><snippet>Prime()</snippet></ROW><ROW><id>20175462</id><snippet>!= 0</snippet></ROW><ROW><id>20175590</id><snippet>interpolation='none'</snippet></ROW><ROW><id>20175590</id><snippet>plt.imshow(matrix_1, cmap = cm.Greys_r, interpolation='none')
</snippet></ROW><ROW><id>20175796</id><snippet>sorted()</snippet></ROW><ROW><id>20175796</id><snippet>sorted()</snippet></ROW><ROW><id>20175796</id><snippet>self.index</snippet></ROW><ROW><id>20175796</id><snippet>defaultdict</snippet></ROW><ROW><id>20175861</id><snippet>itertools.combinations_with_replacement</snippet></ROW><ROW><id>20175861</id><snippet>x</snippet></ROW><ROW><id>20175861</id><snippet>import itertools

str1 = "ABC"
lst = list(str1)
for n in range(len(str1)):
    for idxs in itertools.combinations_with_replacement(range(len(str1)), n):
        xs = lst[:]
        for i in reversed(idxs): # Use reversed, otherwise index become invald
            xs.insert(i, 'x')
        print(''.join(xs))
</snippet></ROW><ROW><id>20175861</id><snippet>ABC
xABC
AxBC
ABxC
xxABC
xAxBC
xABxC
AxxBC
AxBxC
ABxxC
</snippet></ROW><ROW><id>20176023</id><snippet>scatter</snippet></ROW><ROW><id>20176023</id><snippet>pcolormesh</snippet></ROW><ROW><id>20176023</id><snippet>scatter</snippet></ROW><ROW><id>20176023</id><snippet>import matplotlib.pyplot as plt

xdata = [695422.,695423.,695424.,695425.,695426.,695426.]
ydata = [0.,-15.4,-15.3,-15.7,-15.5,-19.]
colordata = [0.,121.,74.,42.,8.,0.],

fig, ax = plt.subplots()
ax.scatter(xdata, ydata, c=colordata, marker='o', s=200)
ax.xaxis_date()
fig.autofmt_xdate()
plt.show()
</snippet></ROW><ROW><id>20176023</id><snippet>hist2d</snippet></ROW><ROW><id>20176023</id><snippet>weights</snippet></ROW><ROW><id>20176023</id><snippet>vmin</snippet></ROW><ROW><id>20176023</id><snippet>im.cmap.set_under('none')</snippet></ROW><ROW><id>20176023</id><snippet>from glob import glob
import datetime as dt
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

def main():
    files = sorted(glob('sunspot_data/*.txt'))
    df = pd.concat([read_file(name) for name in files])

    date = mdates.date2num(df.date)

    fig, ax = plt.subplots(figsize=(10, 4))
    data, xbins, ybins, im = ax.hist2d(date, df.latitude, weights=df.area/1e4, 
                                       bins=(1000, 50), vmin=1e-6)
    ax.xaxis_date()
    im.cmap.set_under('none')
    cbar = fig.colorbar(im)

    ax.set(xlabel='Date', ylabel='Solar Latitude', title='Butterfly Plot')
    cbar.set_label("Percentage of the Sun's surface") 

    fig.tight_layout()
    plt.show()

def read_file(filename):
    """This data happens to be in a rather annoying format..."""
    def parse_date(year, month, day, time):
        year, month, day = [int(item) for item in [year, month, day]]
        time = 24 * float(time)
        hour = int(time)
        minute_frac = 60 * (time % 1)
        minute = int(minute_frac)
        second = int(60 * (minute_frac % 1))
        return dt.datetime(year, month, day, hour, minute, second)

    cols = dict(year=(0, 4), month=(4, 6), day=(6, 8), time=(8, 12), 
                area=(41, 44), latitude=(63, 68), longitude=(57, 62))
    df = pd.read_fwf(filename, colspecs=cols.values(), header=None, 
                     names=cols.keys(), date_parser=parse_date, 
                     parse_dates={'date':['year', 'month', 'day', 'time']})
    return df

main()
</snippet></ROW><ROW><id>20176031</id><snippet>ClassName.attribute_name</snippet></ROW><ROW><id>20176031</id><snippet>class A:
    foo = None
    foo_set_flag = False

    def __init__(self, arg_foo):
        if not A.foo_set_flag:
            A.foo = arg_foo
            A.foo_set_flag = True

a=A(12)
b=A(13)
print a.foo # -&gt; 12
print b.foo # -&gt; 12
</snippet></ROW><ROW><id>20176031</id><snippet>self.foo = ...</snippet></ROW><ROW><id>20176031</id><snippet>self.foo</snippet></ROW><ROW><id>20176031</id><snippet>foo</snippet></ROW><ROW><id>20176031</id><snippet>foo</snippet></ROW><ROW><id>20176287</id><snippet>phi = seq(2*pi, length = 1000)</snippet></ROW><ROW><id>20176287</id><snippet>phi = seq(0, 2 * pi, length = 1200) - .27
x = sin(phi)+2*sin(2*phi)
y = cos(phi)-2*cos(2*phi)
z = -sin(3*phi)

dcol &lt;- c(rep(1, 400), rep(2, 400), rep(3, 400))
ggknot &lt;- data.frame(x,y,z, dcol)
knot &lt;- ggplot(ggknot, aes(x, y)) + geom_point(aes(colour = as.factor(dcol)))
</snippet></ROW><ROW><id>20176287</id><snippet>dcol</snippet></ROW><ROW><id>20176321</id><snippet>students = []
student_abs = []
for i in range(10):
    students.append(raw_input("Enter Student %d's name: " % i+1))
    student_abs.append(raw_input("Enter Student %d's absences: " % i+1))
</snippet></ROW><ROW><id>20176321</id><snippet>students</snippet></ROW><ROW><id>20176358</id><snippet>a = 'ATGTATTATTAA'

codons = (a[n:n+3] for n in xrange(0,len(a),3)) # creates generator

dict_codons = {}

for codon in codons:
    if dict_codons.has_key(codon):
        dict_codons[codon] += 1
    else:
        dict_codons[codon] = 1

print dict_codons
</snippet></ROW><ROW><id>20176429</id><snippet>tup_1 = 5, 'adasd', 'dadas'
tup_2 = 4, 'adasda', 'dadad'
tup_3 = 3, 'adasds', 'asdasda'
gap = -2
score = 2

print(max((tup_1[0] + score, tup_1),
          (tup_2[0] + gap, tup_2),
          (tup_3[0] + gap, tup_3))[1])
</snippet></ROW><ROW><id>20176884</id><snippet>### uninstall PIL
sudo pip uninstall pil

### download and compile the JPEG library
wget http://www.ijg.org/files/jpegsrc.v8c.tar.gz    
tar xvfz jpegsrc.v8c.tar.gz
cd jpeg-8c
./configure --enable-shared --prefix=$CONFIGURE_PREFIX
make
sudo make install

### link the libraries correctly - RASPBERRY PI ONLY
sudo ln -s /usr/lib/arm-linux-gnueabi/libjpeg.so /usr/lib
sudo ln -s /usr/lib/arm-linux-gnueabi/libfreetype.so /usr/lib
sudo ln -s /usr/lib/arm-linux-gnueabi/libz.so /usr/lib

### install rest of the libraries, as well as freetrype and zlib
sudo apt-get install libjpeg-dev libfreetype6 libfreetype6-dev zlib1g-dev

### re-install PIL
sudo pip install pil
</snippet></ROW><ROW><id>20176907</id><snippet>plt.plot([0, len(data)], [centroids[0]]*2, lw=1.)
plt.plot([0, len(data)], [centroids[1]]*2, lw=1.)
plt.plot([0, len(data)], [centroids[2]]*2, lw=1.)
</snippet></ROW><ROW><id>20176907</id><snippet>plt.hlines(centroids, xmin=0, xmax=len(data), lw=1.)
</snippet></ROW><ROW><id>20176912</id><snippet>#+name elispNumBlock</snippet></ROW><ROW><id>20176912</id><snippet>#+name: elispNumBlock</snippet></ROW><ROW><id>20176912</id><snippet>sbe</snippet></ROW><ROW><id>20176912</id><snippet>(defadvice sbe (around get-err-msg activate)
  "Issue messages at errors."
  (condition-case err
      (progn
    ad-do-it)
    ((error debug)
     (message "Error in sbe: %S" err)
     (signal (car err) (cdr err)))))
</snippet></ROW><ROW><id>20176912</id><snippet>#ERROR</snippet></ROW><ROW><id>20176912</id><snippet>N</snippet></ROW><ROW><id>20176912</id><snippet>|   |    in: | in:     | out:     |     out: | out:      |
| ! | number | string  | elispStr | elispNum | pythonStr |
|---+--------+---------+----------+----------+-----------|
| # |      5 | "fd"    | fd       |        5 | fd        |
| # |      7 | "fadsf" | fadsf    |        7 | fadsf     |
#+TBLFM: $4='(sbe elispStrBlock (foo $string))::$5='(sbe elispNumBlock (a $number))::$6='(sbe pythonStrBlock (foo $string))

#+name: elispNumBlock
#+header: :var a=4
#+begin_src emacs-lisp :results value
(message (number-to-string a))
#+end_src

#+RESULTS:
: 4

#+name: elispStrBlock
#+header: :var foo="testing"
#+begin_src emacs-lisp :results value 
(message foo)
#+end_src


#+name: pythonStrBlock
#+header: :var foo="testing"
#+begin_src python :results output
print foo
#+end_src
</snippet></ROW><ROW><id>20176912</id><snippet>| ! | arg | res |
|---+-----+-----|
| # |   1 |   2 |
| # |   2 |   3 |
#+TBLFM: $3='(sbe myColFm (el $2))

#+name: myColFm
#+header: :var el=1
#+begin_src emacs-lisp
  (1+ el)
#+end_src
</snippet></ROW><ROW><id>20176912</id><snippet>(defadvice sbe (before escape-args activate)
  "Apply prin1 to argument values."
  (mapc '(lambda (var) (setcdr var (list (prin1-to-string (cadr var))))) variables))
</snippet></ROW><ROW><id>20176912</id><snippet>sbe</snippet></ROW><ROW><id>20176912</id><snippet>| ! | arg | res |   |
|---+-----+-----+---|
| # |   1 |   3 | 5 |
| # |   2 |   4 | 6 |
#+TBLFM: $3='(sbe myStr (el $2))::$4='(sbe myColFm (el $2));N

#+name: myStr
#+header: :var el="1"
#+begin_src emacs-lisp
  (+ 2 (string-to-number el))
#+end_src

#+name: myColFm
#+header: :var el=1
#+begin_src emacs-lisp
  (+ 4 el)
#+end_src
</snippet></ROW><ROW><id>20177060</id><snippet>display_s</snippet></ROW><ROW><id>20177060</id><snippet>space_ship</snippet></ROW><ROW><id>20177060</id><snippet>display_s</snippet></ROW><ROW><id>20177060</id><snippet>center</snippet></ROW><ROW><id>20177060</id><snippet>display_s</snippet></ROW><ROW><id>20177060</id><snippet> display_s_rect = display_s.get_rect( center=spaceship_rect.center)
</snippet></ROW><ROW><id>20177060</id><snippet>display_s_rect</snippet></ROW><ROW><id>20177060</id><snippet>display_s</snippet></ROW><ROW><id>20177060</id><snippet> screen.blit(display_s, display_s_rect)
</snippet></ROW><ROW><id>20177060</id><snippet>blit()</snippet></ROW><ROW><id>20177060</id><snippet>screen.blit(display_s, (space_ship_rect.centerx, space_ship_rect.centery))
</snippet></ROW><ROW><id>20177060</id><snippet>display_s</snippet></ROW><ROW><id>20177060</id><snippet>(space_ship_rect.centerx, space_ship_rect.centery)</snippet></ROW><ROW><id>20177060</id><snippet>display_s</snippet></ROW><ROW><id>20177060</id><snippet>(space_ship_rect.centerx, space_ship_rect.centery)</snippet></ROW><ROW><id>20177060</id><snippet>(space_ship_rect.centerx, space_ship_rect.centery)</snippet></ROW><ROW><id>20177060</id><snippet>(space_ship_rect.x, space_ship_rect.y)</snippet></ROW><ROW><id>20177060</id><snippet>blit()</snippet></ROW><ROW><id>20177060</id><snippet>space_ship_rect</snippet></ROW><ROW><id>20177060</id><snippet>(space_ship_rect.x, space_ship_rect.y)</snippet></ROW><ROW><id>20177060</id><snippet>blit()</snippet></ROW><ROW><id>20177060</id><snippet>mousec</snippet></ROW><ROW><id>20177060</id><snippet>blit()</snippet></ROW><ROW><id>20177060</id><snippet>mousec</snippet></ROW><ROW><id>20177060</id><snippet> mousec_rect = mousec.get_rect( center = pygame.mouse.get_pos() )
 screen.blit(mousec, mousec_rect)
</snippet></ROW><ROW><id>20177060</id><snippet>display_s = space_ship # default value at start when ship wasn't rotate

while True:
    clock.tick(60)
    screen.blit(bk, (0, 0))
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == MOUSEBUTTONDOWN and event.button == 3:
            pressed_down = 1
        elif event.type == MOUSEBUTTONUP:
            pressed_down = 0
        if pressed_down == 1:
            x, y = pygame.mouse.get_pos()
            x1, y1 = x - space_ship_rect.x, y - space_ship_rect.y
            angle = math.atan2(y1, x1)
            dx = speed*math.cos(angle)
            dy = speed*math.sin(angle)
            movex = space_ship_rect.centerx = space_ship_rect.centerx + dx#ship x
            movey = space_ship_rect.centery = space_ship_rect.centery + dy#ship y
        if event.type == MOUSEMOTION:
            x1, y1 = pygame.mouse.get_pos()
            x2, y2 = space_ship_rect.centerx, space_ship_rect.centery
            dx, dy = x2 - x1, y2 - y1
            rads = math.atan2(dx, dy)
            degs = math.degrees(rads)

            display_s = pygame.transform.rotate(space_ship, (degs))#rotation of ship
            display_s_rect = display_s.get_rect(center = space_ship_rect.center)            

        if event.type == MOUSEBUTTONDOWN and event.button == 1:
            #Is it possible for me to get the degree rotation of the space_ship and apply it to here so the beam will travel in the direction it was shot in?
            pass

    screen.blit(display_s, display_s_rect)
    #screen.blit(display_s, space_ship_rect)

    pos = pygame.mouse.get_pos()
    mousec_rect = mousec.get_rect(centerx=pos[0], centery=pos[1])

    screen.blit(mousec, mousec_rect )

    pygame.display.update()
</snippet></ROW><ROW><id>20177105</id><snippet>git clone git://source.ffmpeg.org/ffmpeg.git ffmpeg
</snippet></ROW><ROW><id>20177105</id><snippet>cv2.VideoCapture("some_file.avi")</snippet></ROW><ROW><id>20177253</id><snippet>dropDups</snippet></ROW><ROW><id>20177253</id><snippet>insert</snippet></ROW><ROW><id>20177253</id><snippet>upsert</snippet></ROW><ROW><id>20177253</id><snippet>findAndModify</snippet></ROW><ROW><id>20177255</id><snippet>HASH()</snippet></ROW><ROW><id>20177255</id><snippet>HASH()</snippet></ROW><ROW><id>20177255</id><snippet>||</snippet></ROW><ROW><id>20177255</id><snippet>&amp;</snippet></ROW><ROW><id>20177346</id><snippet>lines = open("txtfile.txt").readlines()
results = {}
last_part = {}
for line in lines:
    if line.strip() == "":
        continue
    elif line.startswith(tuple("shorts: longs: mosts: count: avglen:".split())):
        n, _, v = line.partition(":")
        results[n.strip()] = v.strip()
    else:
        n, v = line.split(" ")
        last_part[n.strip()] = v.strip()
results['last_part'] = last_part
print results
</snippet></ROW><ROW><id>20177346</id><snippet>{'count': '13', 'shorts': 'cat, dog, fox', 'longs': 'supercalifragilisticexpialidocious', 'mosts': 'dog, fox', 'avglen': '5.6923076923076925', 'last_part': {'frogger': '1', 'fox': '4', 'dog': '4', 'supercalifragilisticexpialidocious': '1', 'cat': '3'}}`
</snippet></ROW><ROW><id>20177683</id><snippet>5</snippet></ROW><ROW><id>20177683</id><snippet>import sys
result = subprocess.check_output([sys.executable, "C:\\Users\\Kyle\\Desktop\\x.py", '5'])
</snippet></ROW><ROW><id>20177875</id><snippet>import operator
from itertools import izip
query = reduce(
    operator.or_, 
    (Q(firstname=fn, lastname=ln) for fn, ln in izip(first_list, last_list))
    )

Person.objects.filter(query)
</snippet></ROW><ROW><id>20179085</id><snippet>datetime.strptime(time_string, "%m/%d/%Y").strftime("%Y-%m-%d")
</snippet></ROW><ROW><id>20179089</id><snippet>MANIFEST.in</snippet></ROW><ROW><id>20179089</id><snippet>include *.rst
</snippet></ROW><ROW><id>20179163</id><snippet>Player</snippet></ROW><ROW><id>20179163</id><snippet>Hit</snippet></ROW><ROW><id>20179163</id><snippet>while running:</snippet></ROW><ROW><id>20179163</id><snippet>while running == True</snippet></ROW><ROW><id>20179474</id><snippet>self.cleaned_data</snippet></ROW><ROW><id>20179474</id><snippet>username</snippet></ROW><ROW><id>20179474</id><snippet>email</snippet></ROW><ROW><id>20179474</id><snippet>password1</snippet></ROW><ROW><id>20179474</id><snippet>ExtendedUserForm</snippet></ROW><ROW><id>20179474</id><snippet>save</snippet></ROW><ROW><id>20179474</id><snippet>def save(self, commit = False):
    User.objects.create_user(username = self.cleaned_data['username'], 
                                email = self.cleaned_data['email'], 
                                password = self.cleaned_data['password1'])

    return super(ExtendedUserForm, self).save(self, commit = commit)
</snippet></ROW><ROW><id>20179498</id><snippet>+</snippet></ROW><ROW><id>20179541</id><snippet># sender
&gt;&gt;&gt; from socket import *
&gt;&gt;&gt; s=socket()
&gt;&gt;&gt; s.connect(('localhost',8000))
&gt;&gt;&gt; number=str(2).zfill(4)
&gt;&gt;&gt; s.send(number)

# receiver
&gt;&gt;&gt; from socket import *
&gt;&gt;&gt; s=socket()
&gt;&gt;&gt; s.bind(('',8000))
&gt;&gt;&gt; s.listen(1)
&gt;&gt;&gt; c,a=s.accept()
&gt;&gt;&gt; c.recv(4)
'0002'
</snippet></ROW><ROW><id>20179600</id><snippet>set</snippet></ROW><ROW><id>20179600</id><snippet>&gt;&gt;&gt; a = set([1, 2, 3, 4, 5])
&gt;&gt;&gt; b = set([4, 5, 6, 7, 8])
&gt;&gt;&gt; a.intersection(b)
set([4, 5])
&gt;&gt;&gt; a.difference(b)
set([1, 2, 3])
</snippet></ROW><ROW><id>20179600</id><snippet>multiset</snippet></ROW><ROW><id>20179600</id><snippet>Counter</snippet></ROW><ROW><id>20179600</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = Counter([1, 2, 3, 4, 4, 5, 5])
&gt;&gt;&gt; b = Counter([4, 4, 5, 6, 7, 8])
&gt;&gt;&gt; a - b
Counter({1: 1, 2: 1, 3: 1, 5: 1})
&gt;&gt;&gt; a &amp; b
Counter({4: 2, 5: 1})
</snippet></ROW><ROW><id>20179838</id><snippet>data = np.column_stack([x,y])
</snippet></ROW><ROW><id>20179838</id><snippet>kmeans2</snippet></ROW><ROW><id>20179838</id><snippet>from scipy.cluster.vq import kmeans2

centroids, ks = kmeans2(data, 3, 10)
</snippet></ROW><ROW><id>20179838</id><snippet>k</snippet></ROW><ROW><id>20179838</id><snippet>ks</snippet></ROW><ROW><id>20179838</id><snippet>kmeans2</snippet></ROW><ROW><id>20179838</id><snippet>colors = ['r', 'g', 'b']
plt.scatter(*data.T, c=np.choose(ks, colors))
plt.scatter(*centroids.T, c=colors, marker='v')
</snippet></ROW><ROW><id>20179838</id><snippet>data</snippet></ROW><ROW><id>20179838</id><snippet>plt.plot(data)
</snippet></ROW><ROW><id>20179838</id><snippet>data</snippet></ROW><ROW><id>20179838</id><snippet>plt.plot(range(len(data)), data)
</snippet></ROW><ROW><id>20179838</id><snippet>data = np.array([3,2,3,4,3])
centroids, variances= kmeans(data, 3, 10)
plt.plot(data)
</snippet></ROW><ROW><id>20179838</id><snippet>x</snippet></ROW><ROW><id>20179838</id><snippet>for c in centroids:
    plt.axhline(c)
</snippet></ROW><ROW><id>20179838</id><snippet>x = range(len(data))</snippet></ROW><ROW><id>20179838</id><snippet>y = data</snippet></ROW><ROW><id>20179838</id><snippet>xydata = np.column_stack([range(len(data)), data])
centroids, variances= kmeans(xydata, 3, 10)
</snippet></ROW><ROW><id>20179838</id><snippet>x</snippet></ROW><ROW><id>20179838</id><snippet>y</snippet></ROW><ROW><id>20179838</id><snippet>data = np.random.rand(100,2)
centroids, variances = kmeans(data, 3, 10)
</snippet></ROW><ROW><id>20179914</id><snippet>xtickNames = plt.setp(ax, xticklabels=[str(v) for v in values])
</snippet></ROW><ROW><id>20179914</id><snippet>xticklabels</snippet></ROW><ROW><id>20179914</id><snippet>plt.setp(xtickNames)
</snippet></ROW><ROW><id>20179914</id><snippet>xtickNames</snippet></ROW><ROW><id>20179914</id><snippet>xticklabels</snippet></ROW><ROW><id>20179914</id><snippet>ax.set_xticklabels(map(str, values))
</snippet></ROW><ROW><id>20179947</id><snippet>if ham_lic == 'Active':
    print "License: (\033[92m"+ham_lic+"\033[0m)"+"\n"
else:
    print "License: (\033[91m"+ham_lic+"\033[0m)"+"\n"
</snippet></ROW><ROW><id>20179962</id><snippet>pandas</snippet></ROW><ROW><id>20179962</id><snippet>&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; data = '''A, 1, 2013-10-10, .5
... A, 1, 2013-10-18, .75
... A, 2, 2013-10-20, 2.5
... B, 1, 2013-10-09, .25
... B, 2, 2014-10-20, .8'''
... 
&gt;&gt;&gt; df = pd.read_csv(StringIO(data), names=['person','itemCode','transDate','amount'], skiprows=0)
&gt;&gt;&gt; df
  person  itemCode    transDate  amount
0      A         1   2013-10-10    0.50
1      A         1   2013-10-18    0.75
2      A         2   2013-10-20    2.50
3      B         1   2013-10-09    0.25
4      B         2   2014-10-20    0.80
&gt;&gt;&gt; grouped = df.groupby(['person'])
&gt;&gt;&gt; res = df.groupby(['person']).apply(lambda x: pd.Series(x.groupby('itemCode').sum()['amount']))
&gt;&gt;&gt; res
itemCode     1    2
person             
A         1.25  2.5
B         0.25  0.8
</snippet></ROW><ROW><id>20179962</id><snippet>pandas.DataFrame</snippet></ROW><ROW><id>20179962</id><snippet>values</snippet></ROW><ROW><id>20179962</id><snippet>&gt;&gt;&gt; res.values
array([[ 1.25,  2.5 ],
       [ 0.25,  0.8 ]])
</snippet></ROW><ROW><id>20179972</id><snippet>f = open("data.txt", "r")
for line in f:
    if "&lt;/MetaDataAtStart&gt;" in line:
        print "Wavelength data was not found"
        break;
    if "Wavelength" in line:
        print line.split("=")[1]
</snippet></ROW><ROW><id>20179972</id><snippet>0.97587
</snippet></ROW><ROW><id>20179972</id><snippet>import re
f = open("data.txt", "r")
regex = re.compile(r'Wavelength \(Angstrom\)=([0-9]+\.?[0-9]*)')
for line in f:
    result = regex.search(line)
print result.group(1)
</snippet></ROW><ROW><id>20179972</id><snippet>0.97587
</snippet></ROW><ROW><id>20180000</id><snippet>nac.tests</snippet></ROW><ROW><id>20180000</id><snippet>nac</snippet></ROW><ROW><id>20180000</id><snippet>nac-project/
    nac/
        tests/
    setup.py
</snippet></ROW><ROW><id>20180000</id><snippet>nac</snippet></ROW><ROW><id>20180019</id><snippet>self.__cdict.isolation_level = "None"
</snippet></ROW><ROW><id>20180019</id><snippet>self.__cdict.isolation_level = None
</snippet></ROW><ROW><id>20180019</id><snippet>self.__cdict.isolation_level = "Exclusive"
</snippet></ROW><ROW><id>20180113</id><snippet>dict()</snippet></ROW><ROW><id>20180113</id><snippet>myTuple = [['1', " This is the system 1 (It has been tested)."],
           ['2', ' Tulip Database.']]
print {key:value for key, value in myTuple}
</snippet></ROW><ROW><id>20180113</id><snippet>{'1': ' This is the system 1 (It has been tested).', '2': ' Tulip Database.'}
</snippet></ROW><ROW><id>20180141</id><snippet>put()</snippet></ROW><ROW><id>20180141</id><snippet>put()</snippet></ROW><ROW><id>20180141</id><snippet>SFTP</snippet></ROW><ROW><id>20180148</id><snippet>probability of observation being class X</snippet></ROW><ROW><id>20180148</id><snippet>knn</snippet></ROW><ROW><id>20180148</id><snippet>RandomForestRegressor</snippet></ROW><ROW><id>20180233</id><snippet>STATIC_URL</snippet></ROW><ROW><id>20180233</id><snippet>/admin/</snippet></ROW><ROW><id>20180233</id><snippet>static/</snippet></ROW><ROW><id>20180233</id><snippet>STATIC_URL</snippet></ROW><ROW><id>20180233</id><snippet>admin/css/base.css</snippet></ROW><ROW><id>20180233</id><snippet>/admin/static/admin/css/base.css</snippet></ROW><ROW><id>20180233</id><snippet>STATIC_URL</snippet></ROW><ROW><id>20180233</id><snippet>/static/admin/css/base.css</snippet></ROW><ROW><id>20180238</id><snippet>numpy.concatenate</snippet></ROW><ROW><id>20180238</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.concatenate((A, B))
matrix([[ 1.,  2.],
        [ 3.,  4.],
        [ 5.,  6.]])
</snippet></ROW><ROW><id>20180327</id><snippet>.dat</snippet></ROW><ROW><id>20180327</id><snippet>.mca</snippet></ROW><ROW><id>20180327</id><snippet>.json</snippet></ROW><ROW><id>20180327</id><snippet>.sav</snippet></ROW><ROW><id>20180327</id><snippet>.mgz</snippet></ROW><ROW><id>20180364</id><snippet>&gt;&gt;&gt; df.groupby(df.index / 3).mean()
   col1
0   2.0
1   0.5
</snippet></ROW><ROW><id>20180376</id><snippet>float()</snippet></ROW><ROW><id>20180376</id><snippet>float</snippet></ROW><ROW><id>20180376</id><snippet>float(velocity_i)
</snippet></ROW><ROW><id>20180376</id><snippet>velocity_i = float(velocity_i)
</snippet></ROW><ROW><id>20180376</id><snippet>float()</snippet></ROW><ROW><id>20180376</id><snippet>while True:
    try:
        velocity_i = float(input("Initial Velocity?"))
        break               # Valid input - stop asking
    except ValueError:
        pass                # Ignore the exception, and ask again
</snippet></ROW><ROW><id>20180376</id><snippet>def get_input(prompt, exptype):
    while True:
        try:
            return exptype( input(prompt) )
        except ValueError:
            pass                # Ignore the exception, and ask again
</snippet></ROW><ROW><id>20180376</id><snippet>val_f = get_input('Give me a floating-point value:', float)
val_i = get_input('Give me an integer value:', int)
</snippet></ROW><ROW><id>20180531</id><snippet>for arg in arg1, arg2, arg3:
   if arg == None:
       arg = []
</snippet></ROW><ROW><id>20180531</id><snippet>arg1</snippet></ROW><ROW><id>20180531</id><snippet>arg2</snippet></ROW><ROW><id>20180531</id><snippet>arg3</snippet></ROW><ROW><id>20180531</id><snippet>None</snippet></ROW><ROW><id>20180531</id><snippet>arg</snippet></ROW><ROW><id>20180531</id><snippet>&gt;&gt;&gt; lis = [1, 2, 3]
&gt;&gt;&gt; x = lis[0]  #now `x` points to lis[0]
&gt;&gt;&gt; x = []      #now `x` points to a different object, this won't affect lis[0]
&gt;&gt;&gt; lis
[1, 2, 3]
&gt;&gt;&gt; x = lis[1]
&gt;&gt;&gt; x = []
&gt;&gt;&gt; lis
[1, 2, 3]
...
</snippet></ROW><ROW><id>20180531</id><snippet>arg is None</snippet></ROW><ROW><id>20180531</id><snippet>arg == None</snippet></ROW><ROW><id>20180597</id><snippet>pip freeze
</snippet></ROW><ROW><id>20180597</id><snippet>__version__</snippet></ROW><ROW><id>20180597</id><snippet>$ pip freeze | grep lxml
lxml==2.3
$ python -c "import lxml; print lxml.__version__"
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute '__version__'
</snippet></ROW><ROW><id>20180597</id><snippet>sudo</snippet></ROW><ROW><id>20180675</id><snippet>nq = Notifications.objects.filter(userid__iexact=q)
for string in nq:
    string.markType = "Read"
    string.save()
results = Notifications.objects.filter(Q(userid__iexact=q)).order_by('-id')
</snippet></ROW><ROW><id>20180744</id><snippet>hello</snippet></ROW><ROW><id>20180744</id><snippet>print(hello, name)</snippet></ROW><ROW><id>20180744</id><snippet>hello Bob !!!!!</snippet></ROW><ROW><id>20180744</id><snippet>print('hello', name)</snippet></ROW><ROW><id>20180974</id><snippet>test_</snippet></ROW><ROW><id>20180974</id><snippet>test_parsesSurveyPassedInAsCsvAndReturnsXmlRepresentation</snippet></ROW><ROW><id>20181407</id><snippet>Button.background_color</snippet></ROW><ROW><id>20181407</id><snippet>background_normal</snippet></ROW><ROW><id>20181407</id><snippet>background_down</snippet></ROW><ROW><id>20181651</id><snippet>BoxSizer</snippet></ROW><ROW><id>20181651</id><snippet>self.box</snippet></ROW><ROW><id>20181651</id><snippet>        self.box.Add(self.p1, 1, wx.EXPAND)
        self.box.Add(self.p2, 1, wx.EXPAND)
</snippet></ROW><ROW><id>20181651</id><snippet>        self.box.Add(self.sp, 1, wx.EXPAND)
</snippet></ROW><ROW><id>20181651</id><snippet>        self.sp.SplitVertically(self.p1, self.p2)
</snippet></ROW><ROW><id>20181651</id><snippet>MainPanel</snippet></ROW><ROW><id>20181651</id><snippet>SetMinimumPanelSize</snippet></ROW><ROW><id>20181651</id><snippet>MainPanel.__init__</snippet></ROW><ROW><id>20181651</id><snippet>        self.SetMinSize((350, 350))
</snippet></ROW><ROW><id>20181686</id><snippet>groupby</snippet></ROW><ROW><id>20181686</id><snippet>&gt;&gt;&gt; df.groupby(["score", "type"]).sum()
                        count
score    type                
9.397000 advanced  537.331573
9.397995 advanced    9.641728
9.397996 newbie      0.100000
9.399900 expert     19.6541374
&gt;&gt;&gt; df.groupby(["score", "type"], as_index=False).sum()
      score      type       count
0  9.397000  advanced  537.331573
1  9.397995  advanced    9.641728
2  9.397996    newbie    0.100000
3  9.399900    expert   19.654137
</snippet></ROW><ROW><id>20181909</id><snippet>import numpy as np

items = np.array([1,1,1,9])
sizeLimit = len(items)
P = np.zeros((len(items),len(items)))

for i in range(sizeLimit-1, -1, -1):
  for j in range(sizeLimit-1, i-1, -1):
    if i == sizeLimit-1:
        P[i,j] = items[i]
    else:
        if j &gt; i:
            P[i,j] = P[i+1,j] + [j-i]
        elif j == i:
            P[i,j] = items[i] + P[j+1, (j+1):].min()
</snippet></ROW><ROW><id>20181909</id><snippet>&gt;&gt;&gt; print P
[[ 12.  12.  13.  15.]
 [  0.  11.  11.  12.]
 [  0.   0.  10.  10.]
 [  0.   0.   0.   9.]]
</snippet></ROW><ROW><id>20181909</id><snippet>octave:1&gt; 4:-1:1
ans =

   4   3   2   1
</snippet></ROW><ROW><id>20181909</id><snippet>&gt;&gt;&gt; sizeLimit = 4
&gt;&gt;&gt; range(sizeLimit-1, -1, -1)
[3, 2, 1, 0]
</snippet></ROW><ROW><id>20181909</id><snippet>range</snippet></ROW><ROW><id>20181912</id><snippet>.env</snippet></ROW><ROW><id>20181912</id><snippet>$ source .env
</snippet></ROW><ROW><id>20182185</id><snippet>update = Board(square2='X')</snippet></ROW><ROW><id>20182185</id><snippet>class Board:

    def __init__(self, square1=' ', square2=' ', square3=' ', square4=' ', square5=' ', square6=' ', square7=' ', square8=' ', square9=' '):
        self.square1 = square1
        self.square2 = square2
        self.square3 = square3
        self.square4 = square4
        self.square5 = square5
        self.square6 = square6
        self.square7 = square7
        self.square8 = square8
        self.square9 = square9

    def grid(self):
        message = '\nSQUARES ARE 0-8, TOP LEFT TO BOTTOM RIGHT, TRAVEL HORIZONTALLY\n   |   |   \n ' + self.square1+' | '+self.square2+' | '+self.square3+'  \n___|___|___\n   |   |   \n '+self.square4+' | '+self.square5 + ' | ' + self.square6+'  \n___|___|___\n   |   |   \n ' + self.square7 + ' | ' + self.square8+' | ' + self.square9+'  \n   |   |   '
        print(message)


game=Board()

print(game.grid)

while True:
    entry = raw_input('Please enter a number\n')
    if entry == '0':
        game.square1='X'

    elif entry == '1':
        game.square2='X'

    elif entry == '2':
        game.square3='X'

    elif entry == '3':
        game.square4='X'

    elif entry == '4':
        game.square5='X'

    elif entry == '5':
        game.square6='X'

    elif entry == '6':
        game.square7='X'

    elif entry == '7':
        game.square8='X'

    elif entry == '8':
        game.square9='X'

    print(game.grid())
</snippet></ROW><ROW><id>20182214</id><snippet>content = self.view.substr(sublime.Region(0, self.view.size()))
</snippet></ROW><ROW><id>20182339</id><snippet>tree = ElementTree(fromstring(xml))
tree.findall('./{http://www.xyz.com}Message'
             '/{http://www.xyz.com}Body'
             '/{http://uri.xyz.com/Chorus/Message}CHMasterbook'
             '/{http://uri.xyz.com/Chorus/Message}event')
</snippet></ROW><ROW><id>20182339</id><snippet>CHMasterbook</snippet></ROW><ROW><id>20182339</id><snippet>CHMasterBook</snippet></ROW><ROW><id>20182376</id><snippet>print("{" + "\n".join("{}: {}".format(k, v) for k, v in d.items()) + "}")
</snippet></ROW><ROW><id>20182383</id><snippet>/home/ubuntu/virtualenv/myapp/myapp/homelaunch/static/img/templated/home/img.png</snippet></ROW><ROW><id>20182521</id><snippet>gen</snippet></ROW><ROW><id>20182521</id><snippet>generator</snippet></ROW><ROW><id>20182521</id><snippet>def</snippet></ROW><ROW><id>20182521</id><snippet>def</snippet></ROW><ROW><id>20182521</id><snippet>yield</snippet></ROW><ROW><id>20182521</id><snippet>def</snippet></ROW><ROW><id>20182539</id><snippet>self.para</snippet></ROW><ROW><id>20182539</id><snippet>runY</snippet></ROW><ROW><id>20182539</id><snippet> runY(&lt;server_proxy_instance&gt;, &lt;self.para&gt;):
</snippet></ROW><ROW><id>20182539</id><snippet>runY(self, **kwargs):
</snippet></ROW><ROW><id>20182539</id><snippet>self.para</snippet></ROW><ROW><id>20182539</id><snippet>**kw</snippet></ROW><ROW><id>20182539</id><snippet>&gt;&gt;&gt; def foo(x, **kw):
...    pass
... 
&gt;&gt;&gt; foo("bar", "baz")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: foo() takes 1 positional argument but 2 were given
</snippet></ROW><ROW><id>20182728</id><snippet>OutputStream</snippet></ROW><ROW><id>20182728</id><snippet>write</snippet></ROW><ROW><id>20182728</id><snippet>OutputStream</snippet></ROW><ROW><id>20182728</id><snippet>output_stream_demo.py</snippet></ROW><ROW><id>20182728</id><snippet>output_stream_demo2.py</snippet></ROW><ROW><id>20182728</id><snippet>enthought</snippet></ROW><ROW><id>20182728</id><snippet>from enthought.traits.api import ...
from enthought.traits.ui.api import ...
from enthought.etsconfig.api import ETSConfig
</snippet></ROW><ROW><id>20182728</id><snippet>from traits.api import ...
from traitsui.api import ...
from traits.etsconfig.api import ETSConfig
</snippet></ROW><ROW><id>20182728</id><snippet>TextEditor</snippet></ROW><ROW><id>20182728</id><snippet>QLabel</snippet></ROW><ROW><id>20182728</id><snippet>QTextEdit</snippet></ROW><ROW><id>20182728</id><snippet>QLabel</snippet></ROW><ROW><id>20182728</id><snippet>moveCursor</snippet></ROW><ROW><id>20182728</id><snippet>style="custom"</snippet></ROW><ROW><id>20182728</id><snippet>def _get_editor(uiinfo, name):
    ui = uiinfo.ui
    if ui is None:
        return None
    for ed in ui._editors:
        if ed.name == name:
            return ed
    return None


class _OutputStreamViewHandler(Handler):

    def init(self, uiinfo):
        if ETSConfig.toolkit == 'qt4':
            ed = _get_editor(uiinfo, 'text')
            if ed is not None:
                # Make the text field read-only.
                ed.control.setReadOnly(True)
        return True

    def object_text_changed(self, uiinfo):
        ed = _get_editor(uiinfo, 'text')
        if ed is None:
            return

        if ETSConfig.toolkit == 'wx':
            # With wx, the control is a TextCtrl instance.
            ed.control.SetInsertionPointEnd()
        elif ETSConfig.toolkit == 'qt4':
            # With qt4, the control is a PyQt4.QtGui.QTextEdit instance.
            from PyQt4.QtGui import QTextCursor
            ed.control.moveCursor(QTextCursor.End)
</snippet></ROW><ROW><id>20182942</id><snippet>[0] * 3
</snippet></ROW><ROW><id>20182942</id><snippet>[[]] * 3
</snippet></ROW><ROW><id>20182942</id><snippet>A = [[[0] * 3] for j in range(3)] for k in range(3)]
</snippet></ROW><ROW><id>20182958</id><snippet>&gt;&gt;&gt; students = [1,2,3,4,5,6,7,8,9,10] # assume numbers are students
&gt;&gt;&gt; matrix = [ students[i:i+4] for i in range(0,len(students),4) ]
&gt;&gt;&gt; for l in matrix:
...     print l
... 
[1, 2, 3, 4]
[5, 6, 7, 8]
[9, 10]
</snippet></ROW><ROW><id>20182958</id><snippet>students</snippet></ROW><ROW><id>20182958</id><snippet>matrix</snippet></ROW><ROW><id>20183062</id><snippet>.readlines()</snippet></ROW><ROW><id>20183062</id><snippet>.readline()</snippet></ROW><ROW><id>20183062</id><snippet>from subprocess import Popen, PIPE

p = Popen("my noisy stuff", stdout=PIPE, bufsize=1)
for line in iter(p.stdout.readline, b''):
    # process line
    ..
p.stdout.close()
p.wait()
</snippet></ROW><ROW><id>20183062</id><snippet>pexpect</snippet></ROW><ROW><id>20183062</id><snippet>import pexpect

child = pexpect.spawn("my noisy stuff", timeout=None)
for line in child: 
    # process line
    ..
child.close()
</snippet></ROW><ROW><id>20183062</id><snippet>stdbuf</snippet></ROW><ROW><id>20183062</id><snippet>pty</snippet></ROW><ROW><id>20183077</id><snippet>%</snippet></ROW><ROW><id>20183077</id><snippet>print "Hundreds %d" % (amount[0])
</snippet></ROW><ROW><id>20183077</id><snippet>str.format</snippet></ROW><ROW><id>20183077</id><snippet>print "Hundreds {}".format(amount[0])
</snippet></ROW><ROW><id>20183121</id><snippet>sorted</snippet></ROW><ROW><id>20183121</id><snippet>key</snippet></ROW><ROW><id>20183121</id><snippet>sorted(li,key=lambda x: x[1])
Out[31]: [['Jason', 1], ['John', 2], ['Jim', 9]]
</snippet></ROW><ROW><id>20183121</id><snippet>sorted</snippet></ROW><ROW><id>20183121</id><snippet>.sort</snippet></ROW><ROW><id>20183121</id><snippet>key</snippet></ROW><ROW><id>20183121</id><snippet>from operator import itemgetter
sorted(li,key=itemgetter(1))
Out[33]: [['Jason', 1], ['John', 2], ['Jim', 9]]
</snippet></ROW><ROW><id>20183486</id><snippet>vals = dic.values()
l = len(vals[0])
if all(len(item) == l for item in vals):
    # ok
</snippet></ROW><ROW><id>20183486</id><snippet>lens = map(len, dic.values())
if len(set(lens)) == 1:
    # ok
</snippet></ROW><ROW><id>20183500</id><snippet>from collections import Counter
c = Counter()
def fib3(n):
    c[n] += 1
    if n &lt; 9980:
        return 1
    else:
        return fib3(n-1) + fib3(n-2) + fib3(n-3)

fib3(10000)
print c
</snippet></ROW><ROW><id>20183500</id><snippet>Counter({9979: 223317, 9978: 187427, 9977: 121415, 9980: 121415, 9981: 66012, 9982: 35890, 9983: 19513, 9984: 10609, 9985: 5768, 9986: 3136, 9987: 1705, 9988: 927, 9989: 504, 9990: 274, 9991: 149, 9992: 81, 9993: 44, 9994: 24, 9995: 13, 9996: 7, 9997: 4, 9998: 2, 9999: 1, 10000: 1})
</snippet></ROW><ROW><id>20183500</id><snippet>n</snippet></ROW><ROW><id>20183500</id><snippet>n</snippet></ROW><ROW><id>20183500</id><snippet>fib3_count(n)</snippet></ROW><ROW><id>20183500</id><snippet>fib3(n)</snippet></ROW><ROW><id>20183500</id><snippet> x**3 - x**2 - x**1 - 1 == 0
</snippet></ROW><ROW><id>20183500</id><snippet>x1 = 1.8392867552141612
x2 = (-0.41964337760708065+0.6062907292071992j)
x3 = (-0.41964337760708065-0.6062907292071992j)
</snippet></ROW><ROW><id>20183537</id><snippet>Score = "0"</snippet></ROW><ROW><id>20183537</id><snippet>str(Score)</snippet></ROW><ROW><id>20183537</id><snippet>"\n"</snippet></ROW><ROW><id>20183537</id><snippet>while Score &gt;= 0 and userWantsToContinue</snippet></ROW><ROW><id>20183537</id><snippet>userWantsToContinue</snippet></ROW><ROW><id>20183538</id><snippet>grp_prof</snippet></ROW><ROW><id>20183538</id><snippet>&gt;&gt;&gt; grp_prof
                                 sum  mean  count_nonzero
TC_Code Primary_CPT_Description                          
0       5                         15    15              1
1       6                         16    16              1
2       7                         17    17              1
3       8                         18    18              1
4       9                         19    19              1
</snippet></ROW><ROW><id>20183538</id><snippet>TC_Code</snippet></ROW><ROW><id>20183538</id><snippet>Primary_CPT_Description</snippet></ROW><ROW><id>20183538</id><snippet>sum</snippet></ROW><ROW><id>20183538</id><snippet>mean</snippet></ROW><ROW><id>20183538</id><snippet>count_nonzero</snippet></ROW><ROW><id>20183538</id><snippet>&gt;&gt;&gt; grp_prof.columns
Index([u'sum', u'mean', u'count_nonzero'], dtype='object')
&gt;&gt;&gt; grp_prof.index
MultiIndex(levels=[[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]],
           labels=[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4]],
           names=[u'TC_Code', u'Primary_CPT_Description'])
</snippet></ROW><ROW><id>20183538</id><snippet>.reset_index()</snippet></ROW><ROW><id>20183538</id><snippet>&gt;&gt;&gt; grp_prof = grp_prof.reset_index()
&gt;&gt;&gt; grp_prof
   TC_Code  Primary_CPT_Description  sum  mean  count_nonzero
0        0                        5   15    15              1
1        1                        6   16    16              1
2        2                        7   17    17              1
3        3                        8   18    18              1
4        4                        9   19    19              1
&gt;&gt;&gt; grp_prof["Primary_CPT_Description"].idxmax()
4
</snippet></ROW><ROW><id>20183538</id><snippet>&gt;&gt;&gt; df["Primary_CPT_Description"]
0      A
1     BC
2    CDE
3      F
4     GH
Name: Primary_CPT_Description, dtype: object
&gt;&gt;&gt; df["Primary_CPT_Description"].apply(len)
0    1
1    2
2    3
3    1
4    2
Name: Primary_CPT_Description, dtype: int64
&gt;&gt;&gt; df["Primary_CPT_Description"].apply(len).idxmax()
2
&gt;&gt;&gt; df["Primary_CPT_Description"].str.len().idxmax()
2
</snippet></ROW><ROW><id>20183577</id><snippet>with open("tweet37.txt", "w") as o:
    for tweet in tweets:
        tweet_id = tweet['id']
        if tweet_id.endswith('700') or tweet_id.endswith('300'):
            print &gt;&gt; o, str(tweet['id'])
</snippet></ROW><ROW><id>20183584</id><snippet>sorted_list = sorted(list_not_sorted, key=lambda x:x[1], reverse=True)
</snippet></ROW><ROW><id>20183584</id><snippet>x[2]</snippet></ROW><ROW><id>20183584</id><snippet>x[1]</snippet></ROW><ROW><id>20183584</id><snippet>&gt;&gt;&gt; data = [['John', 973], ['Jim', 99], ['Jason', 912345]]
&gt;&gt;&gt;
&gt;&gt;&gt; sorted(data, key=lambda x:x[1], reverse=True)
[['Jason', 912345], ['John', 973], ['Jim', 99]]
</snippet></ROW><ROW><id>20183693</id><snippet>elif</snippet></ROW><ROW><id>20183693</id><snippet>if</snippet></ROW><ROW><id>20183693</id><snippet>if n_value == '1'</snippet></ROW><ROW><id>20183693</id><snippet>if n_value == '6'</snippet></ROW><ROW><id>20183693</id><snippet>else</snippet></ROW><ROW><id>20183693</id><snippet>elif</snippet></ROW><ROW><id>20183693</id><snippet>if n_value == '1':
    ...
elif n_value == '2':
    ...
...
else:
    whatever
</snippet></ROW><ROW><id>20183753</id><snippet>ascii</snippet></ROW><ROW><id>20183753</id><snippet>&gt;&gt;&gt; 'abc\xe9'.encode('ascii', errors='ignore')
b'abc'
</snippet></ROW><ROW><id>20183753</id><snippet>''.join(s for s in string if ord(s)&gt;31 and ord(s)&lt;126)
</snippet></ROW><ROW><id>20183804</id><snippet>tostring</snippet></ROW><ROW><id>20183804</id><snippet>array</snippet></ROW><ROW><id>20183804</id><snippet>array</snippet></ROW><ROW><id>20183804</id><snippet>sum</snippet></ROW><ROW><id>20183804</id><snippet>array</snippet></ROW><ROW><id>20183804</id><snippet>array.append(int(line))
</snippet></ROW><ROW><id>20183814</id><snippet>a is b</snippet></ROW><ROW><id>20183814</id><snippet>is</snippet></ROW><ROW><id>20183814</id><snippet>is</snippet></ROW><ROW><id>20183814</id><snippet>a = []
b = a
a is b # true
a == b # true

a = []
b = []
a is b # false
a == b # true
</snippet></ROW><ROW><id>20183871</id><snippet>strip</snippet></ROW><ROW><id>20183871</id><snippet>lstrip</snippet></ROW><ROW><id>20183871</id><snippet>rstrip</snippet></ROW><ROW><id>20183871</id><snippet>i</snippet></ROW><ROW><id>20183871</id><snippet>i.lstrip()</snippet></ROW><ROW><id>20183871</id><snippet>def makeList():
    lines = []
    with open('categories.txt', 'r') as file:
        for l in file:
            lines.append(l.lstrip('0123456789 '))
    return lines
</snippet></ROW><ROW><id>20183929</id><snippet>p.poll()</snippet></ROW><ROW><id>20183929</id><snippet>None</snippet></ROW><ROW><id>20183929</id><snippet>.poll()</snippet></ROW><ROW><id>20183929</id><snippet>subprocess</snippet></ROW><ROW><id>20183929</id><snippet>_cleanup()</snippet></ROW><ROW><id>20183929</id><snippet>Popen()</snippet></ROW><ROW><id>20183929</id><snippet>import os
#NOTE: don't use Popen() here
print os.popen(r"ps aux | grep Z | grep -v grep").read(),
</snippet></ROW><ROW><id>20184109</id><snippet>&gt;&gt;&gt; A = np.array([[1,2],[3,4]])
&gt;&gt;&gt; B = np.array([[5,6],[7,8]])
&gt;&gt;&gt; (A * B[None, :].T).T
array([[[ 5,  6],
        [21, 24]],

       [[10, 12],
        [28, 32]]])
</snippet></ROW><ROW><id>20184109</id><snippet>None</snippet></ROW><ROW><id>20184109</id><snippet>B</snippet></ROW><ROW><id>20184160</id><snippet>#mat is your matrix
for row in mat:
    hold = []
    for num in row:
        if num in hold:
            raise ValueError("There was an illegal repetition")
        elif num != 0:
            hold.append(num)
</snippet></ROW><ROW><id>20184160</id><snippet>hold</snippet></ROW><ROW><id>20184160</id><snippet>hold</snippet></ROW><ROW><id>20184160</id><snippet>ValueError</snippet></ROW><ROW><id>20184218</id><snippet>def multiple_replace(myString):
    myString = re.sub(ur'(?u)[^\W\d_]', u'A', myString)
    myString = re.sub(ur'[0-9]', u'9', myString)
    return myString
</snippet></ROW><ROW><id>20184218</id><snippet>with codecs.open(r'test5.txt', 'w', 'utf-8') as outfile1:
    for row in reader:
        unicode_row = [x.decode('utf-8') for x in row]
        item = unicode_row[csv_col_index]
        outfile1.write(row[1] + "," + item + "," + multiple_replace(item) + "\n")
</snippet></ROW><ROW><id>20184346</id><snippet>Checkbutton</snippet></ROW><ROW><id>20184346</id><snippet>sticky</snippet></ROW><ROW><id>20184346</id><snippet>ticky</snippet></ROW><ROW><id>20184346</id><snippet>Button</snippet></ROW><ROW><id>20184346</id><snippet>'ew'</snippet></ROW><ROW><id>20184346</id><snippet>'e+w'</snippet></ROW><ROW><id>20184451</id><snippet>import sys

def read_data(source):
    N = int(next(source))
    for case in range(N):
        num_rows = int(next(source))
        rows = [next(source).split() for i in range(num_rows)]
        yield rows

for case in read_data(sys.stdin):
    print case
</snippet></ROW><ROW><id>20184451</id><snippet>dsm@notebook:~/coding$ cat source.txt | python getdata.py 
[['.', '.', '.', 'x'], ['.', '.', 'x', 'x'], ['.', '.', 'x', 'x'], ['.', '.', '.', 'x']]
[['.', '.', 'x', 'x'], ['.', '.', 'x', 'x']]
[['x', 'x', '.', '.'], ['x', 'x', '.', '.'], ['.', '.', '.', 'x']]
</snippet></ROW><ROW><id>20184515</id><snippet>print([item.group() for item in items])
</snippet></ROW><ROW><id>20184545</id><snippet>cStringIO</snippet></ROW><ROW><id>20184545</id><snippet>StringIO</snippet></ROW><ROW><id>20184555</id><snippet>command</snippet></ROW><ROW><id>20184555</id><snippet>()</snippet></ROW><ROW><id>20184555</id><snippet>wButton = Button(self, text='text', command = self.OnButtonClick)
</snippet></ROW><ROW><id>20184555</id><snippet>command = self.OnButtonClick()</snippet></ROW><ROW><id>20184555</id><snippet>self.OnButtonClick()</snippet></ROW><ROW><id>20184555</id><snippet>command</snippet></ROW><ROW><id>20184555</id><snippet>command</snippet></ROW><ROW><id>20184555</id><snippet>child.transient(parent)</snippet></ROW><ROW><id>20184555</id><snippet>top.transient(self)</snippet></ROW><ROW><id>20184555</id><snippet>def OnButtonClick(self):
    top = Toplevel()
    top.title("title")
    top.geometry("300x150+30+30")

    top.transient(self)

    topButton = Button(top, text="CLOSE", command = self.destroy)
    topButton.pack()
</snippet></ROW><ROW><id>20184555</id><snippet>.config(state='disabled')</snippet></ROW><ROW><id>20184555</id><snippet>.config(state='normal')</snippet></ROW><ROW><id>20184555</id><snippet>OnButtonClick()</snippet></ROW><ROW><id>20184555</id><snippet>from Tkinter import *

class Window(Tk):
    def __init__(self, parent):
        Tk.__init__(self, parent)
        self.parent = parent
        self.initialize()

    def initialize(self):
        self.geometry("600x400+30+30")
        self.wButton = Button(self, text='text', command = self.OnButtonClick)
        self.wButton.pack()

    def OnButtonClick(self):
        self.top = Toplevel()
        self.top.title("title")
        self.top.geometry("300x150+30+30")
        self.top.transient(self)
        self.wButton.config(state='disabled')

        self.topButton = Button(self.top, text="CLOSE", command = self.OnChildClose)
        self.topButton.pack()

    def OnChildClose(self):
        self.wButton.config(state='normal')
        self.top.destroy()

if __name__ == "__main__":
    window = Window(None)

    window.title("title")

    window.mainloop()
</snippet></ROW><ROW><id>20184593</id><snippet>&gt;&gt;&gt; new = [sublist[0][1] for sublist in x]
&gt;&gt;&gt; pprint.pprint(new)
[u'Goals for',
 u'Goals against',
 u'Penalty goal',
 u'Goals for average',
 u'Matches Played',
 u'Shots on goal',
 u'Shots Wide',
 u'Free Kicks Received',
 u'Offsides',
 u'Corner kicks',
 u'Wins',
 u'Draws',
 u'Losses']
</snippet></ROW><ROW><id>20184593</id><snippet>pandas</snippet></ROW><ROW><id>20184593</id><snippet>MultiIndex</snippet></ROW><ROW><id>20184638</id><snippet>ax = 2 # the axis you want to have all values in
np.rollaxis(a, ax, a.ndim)[tuple(np.r_[b,c])]
</snippet></ROW><ROW><id>20184638</id><snippet>a[b,:,:,c]</snippet></ROW><ROW><id>20184638</id><snippet>np.rollaxis(np.rollaxis(a, ax, a.ndim), ax, a.ndim)[tuple(np.r_[b,c])]
</snippet></ROW><ROW><id>20184638</id><snippet>np.rollaxis(a, ax, a.ndim)</snippet></ROW><ROW><id>20184638</id><snippet>ax</snippet></ROW><ROW><id>20184638</id><snippet>a = np.zeros((1,2,3,4,5))
a.shape
#(1,2,3,4,5)
np.rollaxis(a, ax, a.ndim).shape
#(1,2,4,5,3)
</snippet></ROW><ROW><id>20184638</id><snippet>np.r_[b,c]</snippet></ROW><ROW><id>20184638</id><snippet>tuple(np.concatenate([b,c]))</snippet></ROW><ROW><id>20184638</id><snippet>a[tuple(b) + (slice(None),) + tuple(c)]
</snippet></ROW><ROW><id>20184638</id><snippet>slice</snippet></ROW><ROW><id>20184638</id><snippet>start:end:step</snippet></ROW><ROW><id>20184638</id><snippet>None</snippet></ROW><ROW><id>20184638</id><snippet>:</snippet></ROW><ROW><id>20184638</id><snippet>:</snippet></ROW><ROW><id>20184638</id><snippet>a[1:3]</snippet></ROW><ROW><id>20184638</id><snippet>a[slice(1,3)]</snippet></ROW><ROW><id>20184638</id><snippet>a[:3]</snippet></ROW><ROW><id>20184638</id><snippet>a[slice(None,3)]</snippet></ROW><ROW><id>20184950</id><snippet>tr</snippet></ROW><ROW><id>20184950</id><snippet>table</snippet></ROW><ROW><id>20184950</id><snippet>td</snippet></ROW><ROW><id>20184950</id><snippet>from lxml import etree
tree = etree.parse(url, etree.HTMLParser())
l = tree.xpath('//table[@class="download_tab"]/tr/td[@width="55%"]/text()')
print l[1]

09/29/2011 (Submitted: 09/08/2011)
</snippet></ROW><ROW><id>20184950</id><snippet>soup = BeautifulSoup(pageurl)
l = soup.find('table',{'class':'download_tab'}).find('tr').find('td',{'width':'55%'}).findAll(text=True)
print l[2]

09/29/2011 (Submitted: 09/08/2011)
</snippet></ROW><ROW><id>20185336</id><snippet>mesh</snippet></ROW><ROW><id>20185336</id><snippet>"foo_mesh"</snippet></ROW><ROW><id>20185336</id><snippet>isinstance(pc.PyNode("foo_mesh"), pc.nt.Mesh</snippet></ROW><ROW><id>20185336</id><snippet>"foo_mesh_cache.xml"</snippet></ROW><ROW><id>20185336</id><snippet>"foo_mesh_data.mc"</snippet></ROW><ROW><id>20185336</id><snippet>import pymel.core as pc

mesh = "foo_mesh"
xml = "foo_mesh_cache.xml"
data = "foo_mesh_data.mc"

pc.mel.doImportCacheFile(xml, "", [mesh], list())
</snippet></ROW><ROW><id>20185336</id><snippet>pc.nt.CacheFile</snippet></ROW><ROW><id>20185618</id><snippet>&gt;&gt;&gt; df = pd.read_csv("trans.csv", skipinitialspace=True)
&gt;&gt;&gt; w = df.groupby(["person", "product"])["val"].sum().reset_index()
&gt;&gt;&gt; w
  person product  val
0      A       x   20
1      A       y   20
2      B       x   20
3      B       y   15
4      C       z   40
&gt;&gt;&gt; w.pivot("person", "product").fillna(0)
         val        
product    x   y   z
person              
A         20  20   0
B         20  15   0
C          0   0  40
&gt;&gt;&gt; w.pivot("person", "product").fillna(0).values
array([[ 20.,  20.,   0.],
       [ 20.,  15.,   0.],
       [  0.,   0.,  40.]])
</snippet></ROW><ROW><id>20185618</id><snippet>chunksize</snippet></ROW><ROW><id>20185629</id><snippet>import re

def get_some_name(some_name, line):
    regex = r'{0}="([^"]*)"'.format(some_name)
    some_value = re.search(regex, line).groups()[0]
    return some_value

line = 'bla bla bla- 3 [saa@dsds aaa="789" SomeName="35229644" vv="typw" ee="o" Task="None"] &gt;bla bla bla'

print(get_some_name(some_name="SomeName", line=line))
</snippet></ROW><ROW><id>20185955</id><snippet>from django.db import models
from django_extensions.db.fields import AutoSlugField
from categories.models import CategoryBase

class MusicCategory(CategoryBase):
    # add extra fields, like images, "featured" and such here
    pass

class Artist(CategoryBase):
    name       = CharField(max_length=255,)
    categories = models.ManyToManyField(MusicCategory, related_name="artists")

    def __unicode__(self):
        return self.name

class Song(models.Model):
    slug        = AutoSlugField(populate_from='title', unique=True)
    title       = models.CharField(max_length=255,)
    artist      = models.ForeignKey(Artist, related_name="songs", on_delete=models.PROTECT)
    categories  = models.ManyToManyField(MusicCategory, related_name="songs")
    description = models.TextField()

    def __unicode__(self):
        return self.title
</snippet></ROW><ROW><id>20185955</id><snippet>{% extends 'base_post.html' %}
{% load category_tags %}
{% block page_content %}

&lt;h1&gt;{{ artist.name }}&lt;/h1&gt;

{% if artist.songs.all.exists %}
    &lt;h2&gt;Songs&lt;/h2&gt;
    &lt;ul&gt;
        {% for song in artist.songs.all %}
        &lt;li&gt;&lt;a href="{{ song.get_absolute_url }}"&gt;{{ song }}&lt;/a&gt;&lt;/li&gt;
        {% endfor %}
    &lt;/ul&gt;
{% endif %}
</snippet></ROW><ROW><id>20185982</id><snippet>FinalList = [(k, [int(i)*v for i in dr[k]]) for k, v in SimList]
TotalList = [sum(x) for x in zip(*(j for i in FinalList for j in i[1:]))]
</snippet></ROW><ROW><id>20186030</id><snippet>li = [(1,'Phone'),(1,'MP3 Player'),(2,'MP3 Player'),(2,'headphone'),(2,'laptop'),(2,'tablet'),(3,'tablet'),(3,'laptop')]

from itertools import groupby, combinations

[list(combinations(g,2)) for _,g in groupby(li,lambda x: x[0])]
Out[10]: 
[[((1, 'Phone'), (1, 'MP3 Player'))],
 [((2, 'MP3 Player'), (2, 'headphone')),
  ((2, 'MP3 Player'), (2, 'laptop')),
  ((2, 'MP3 Player'), (2, 'tablet')),
  ((2, 'headphone'), (2, 'laptop')),
  ((2, 'headphone'), (2, 'tablet')),
  ((2, 'laptop'), (2, 'tablet'))],
 [((3, 'tablet'), (3, 'laptop'))]]
</snippet></ROW><ROW><id>20186030</id><snippet>output = [list(combinations(g,2)) for _,g in groupby(li,lambda x: x[0])]
for id_ in output:
    for combo in id_:
        print([x[1] for x in combo])

['Phone', 'MP3 Player']
['MP3 Player', 'headphone']
['MP3 Player', 'laptop']
['MP3 Player', 'tablet']
['headphone', 'laptop']
['headphone', 'tablet']
['laptop', 'tablet']
['tablet', 'laptop']
</snippet></ROW><ROW><id>20186030</id><snippet>for id_ in output:
    for combo in id_:
        print('{}, {}'.format(*[x[1] for x in combo]))

Phone, MP3 Player
MP3 Player, headphone
MP3 Player, laptop
MP3 Player, tablet
headphone, laptop
headphone, tablet
laptop, tablet
tablet, laptop
</snippet></ROW><ROW><id>20186111</id><snippet>ClearableFileInput</snippet></ROW><ROW><id>20186111</id><snippet>def render(self, name, value, attrs=None):
    .. snip ..
    if value and hasattr(value, "url"):
        template = self.template_with_initial
        substitutions['initial'] = format_html(self.url_markup_template,
</snippet></ROW><ROW><id>20186165</id><snippet>shell=True</snippet></ROW><ROW><id>20186165</id><snippet>Popen()</snippet></ROW><ROW><id>20186165</id><snippet>shell=True</snippet></ROW><ROW><id>20186165</id><snippet>import sys
from subprocess import Popen, PIPE

# populate list of arguments
args = ["mytool.py"]
for opt, optname in zip("-a -x -p".split(), "address port pass".split()):
    args.extend([opt, str(servers[server][optname])])
args.extend("some additional command".split())

# run script
p = Popen([sys.executable or 'python'] + args, stdout=PIPE)
# use p.stdout here...
p.stdout.close()
p.wait()
</snippet></ROW><ROW><id>20186513</id><snippet>Combination</snippet></ROW><ROW><id>20186513</id><snippet>xy</snippet></ROW><ROW><id>20186513</id><snippet>Position</snippet></ROW><ROW><id>20186513</id><snippet>choose_last</snippet></ROW><ROW><id>20186513</id><snippet>Combination</snippet></ROW><ROW><id>20186513</id><snippet>xy</snippet></ROW><ROW><id>20186513</id><snippet>get_value</snippet></ROW><ROW><id>20186513</id><snippet>Combination</snippet></ROW><ROW><id>20186525</id><snippet>on_status(self, status)</snippet></ROW><ROW><id>20186525</id><snippet>on_data(self, raw_data)</snippet></ROW><ROW><id>20186525</id><snippet>status</snippet></ROW><ROW><id>20186525</id><snippet>tweepy.models.Status</snippet></ROW><ROW><id>20186525</id><snippet>status.user.id</snippet></ROW><ROW><id>20186525</id><snippet>user = jsonData['user']
user_id = user['id']
</snippet></ROW><ROW><id>20186535</id><snippet>pickle</snippet></ROW><ROW><id>20186535</id><snippet>read_pickle()</snippet></ROW><ROW><id>20186535</id><snippet>import pandas as pd
df = pd.read_pickle('flux.df')
</snippet></ROW><ROW><id>20186629</id><snippet>from Tkinter import *
from Tkinter import Tk


root = Tk()
usernameVal = StringVar()
class myclass():

    def __init__(self):
        self.main()

    def submitForm(self,*args):
        try:
            print("submitForm pressed")

            print('name is %s' % self.usernameVal.get()) #mira como hace el print!
            self.usernameVal.set("")

            #usernameVal.clear(1.0, END)  ??

        except ValueError:
            pass

    def main(self):

    #container view
        mainframe = Frame(root) #  mainframe contained by root!, init

        mainframe.grid(column=0, row=0, sticky=(N, W, E, S)) #  add subview mainframe
        mainframe.columnconfigure(0, weight=1)
        mainframe.rowconfigure(0, weight=1)

    #UI widgets
        createLbl = Label(mainframe, text='Create login &amp; Password')
        createLbl.grid(column=2 , row=1, sticky=(W,E))

    # user name
        nameLbl = Label(mainframe, text='User Name')
        nameLbl.grid(column=1 , row=2, sticky=(W,E))

        self.usernameVal = StringVar()
        usernameTf = Entry(mainframe, textvariable = self.usernameVal)
        usernameTf.grid(column=2 , row=2, sticky=(W,E))

        button = Button(mainframe, text='Create User', command=self.submitForm)
        button.grid(column=3 , row=2, sticky=(W,E))  

    #my loop
        root.mainloop()

if __name__ == "__main__":
    myclass()
</snippet></ROW><ROW><id>20186629</id><snippet>self.usernameVal.get</snippet></ROW><ROW><id>20186629</id><snippet>self.usernameVal.set=''</snippet></ROW><ROW><id>20186797</id><snippet>&gt;&gt;&gt; fib(5)
13
</snippet></ROW><ROW><id>20186993</id><snippet>join</snippet></ROW><ROW><id>20186993</id><snippet>+</snippet></ROW><ROW><id>20186993</id><snippet>join</snippet></ROW><ROW><id>20186993</id><snippet>timeit</snippet></ROW><ROW><id>20186993</id><snippet>import timeit

short_strings = ["foo", "bar", "baz"]
long_strings = [s*1000 for s in short_strings]

def concat(a, b, c):
    return a + b + c

def concat_from_list(lst):
    return lst[0] + lst[1] + lst[2]

def join(a, b, c):
    return "".join([a, b, c])

def join_tuple(a, b, c):
    return "".join((a, b, c))

def join_from_list(lst):
    return "".join(lst)

def test():
    print("Short strings")
    print("{:20}{}".format("concat:",
                           timeit.timeit(lambda: concat(*short_strings))))
    print("{:20}{}".format("concat_from_list:",
                           timeit.timeit(lambda: concat_from_list(short_strings))))
    print("{:20}{}".format("join:",
                           timeit.timeit(lambda: join(*short_strings))))
    print("{:20}{}".format("join_tuple:",
                           timeit.timeit(lambda: join_tuple(*short_strings))))
    print("{:20}{}\n".format("join_from_list:",
                             timeit.timeit(lambda: join_from_list(short_strings))))
    print("Long Strings")
    print("{:20}{}".format("concat:",
                           timeit.timeit(lambda: concat(*long_strings))))
    print("{:20}{}".format("concat_from_list:",
                           timeit.timeit(lambda: concat_from_list(long_strings))))
    print("{:20}{}".format("join:",
                           timeit.timeit(lambda: join(*long_strings))))
    print("{:20}{}".format("join_tuple:",
                           timeit.timeit(lambda: join_tuple(*long_strings))))
    print("{:20}{}".format("join_from_list:",
                           timeit.timeit(lambda: join_from_list(long_strings))))
</snippet></ROW><ROW><id>20186993</id><snippet>Python 3.3.0 (v3.3.0:bd8afb90ebf2, Sep 29 2012, 10:57:17) [MSC v.1600 64 bit (AMD64)] on win32
Type "copyright", "credits" or "license()" for more information.
&gt;&gt;&gt; ================================ RESTART ================================
&gt;&gt;&gt; 
&gt;&gt;&gt; test()
Short strings
concat:             0.5453461176251436
concat_from_list:   0.5185697357936024
join:               0.7099379456477868
join_tuple:         0.5900842397209949
join_from_list:     0.4177281794285359

Long Strings
concat:             2.002303591571888
concat_from_list:   1.8898819841869416
join:               1.5672863477837913
join_tuple:         1.4343144915087596
join_from_list:     1.231374639083505
</snippet></ROW><ROW><id>20186993</id><snippet>+</snippet></ROW><ROW><id>20186993</id><snippet>concat</snippet></ROW><ROW><id>20186993</id><snippet>concat_from_list</snippet></ROW><ROW><id>20187297</id><snippet>X = ['A','B','C']
Y = ['1','2','3']
VALUES_FOR_X = {'A':1, 'B': 2, 'C':3}

class Combination:   # Creates a list of possible position combinations
    def __init__(self,x,y):
        if (x in X) and (y in Y):
            self.x = x
            self.y = y
        else:
            print "WRONG!!"

    def get_value(self):
        return VALUES_FOR_X[self.x]

    def __repr__ (self):
        return self.x+self.y

class Position:     # Makes operation on the chosen position
    def __init__(self):
        self.xy = []
        for i in X:
            for j in Y:
                self.xy.append(Combination(i,j))

    def choose_last(self):
        return self.xy.pop()



    def __str__(self):
        return "List contains: " + str(self.xy)

pos = Position()
print pos
last_item = pos.choose_last()
print "Last item is:", last_item
print  last_item.get_value()
</snippet></ROW><ROW><id>20187297</id><snippet>&gt;&gt;&gt;  List contains: [A1, A2, A3, B1, B2, B3, C1, C2, C3]  
&gt;&gt;&gt;  Last item is: C3  
&gt;&gt;&gt;  3
</snippet></ROW><ROW><id>20187615</id><snippet>if raw_api_data != 'api error 1' or 'api error 2':
</snippet></ROW><ROW><id>20187615</id><snippet>if (raw_api_data != 'api error 1') or ('api error 2'):
</snippet></ROW><ROW><id>20187615</id><snippet>if (raw_api_data != 'api error 1') and (raw_api_data != 'api error 2'):
</snippet></ROW><ROW><id>20187615</id><snippet>if not raw_api_data in ('api error 1', 'api error 2'):
</snippet></ROW><ROW><id>20187851</id><snippet>styles = {
    'datetime': xlwt.easyxf(num_format_str='yyyy-mm-dd hh:mm:ss'),
    'date': xlwt.easyxf(num_format_str='yyyy-mm-dd')
}
</snippet></ROW><ROW><id>20187851</id><snippet>if isinstance(value, datetime.datetime):
    cell_style = styles['datetime']
elif:
    cell_style = styles['date']
</snippet></ROW><ROW><id>20187851</id><snippet>sheet.write(row, col, value, style=cell_style)
</snippet></ROW><ROW><id>20187924</id><snippet>for k, v in d.items():
    if v.count('s1')&gt;=4 and v.count('s2')&gt;=4:
        print k
</snippet></ROW><ROW><id>20187924</id><snippet>for k, v in d.items():
    print k, v.count('s1')+v.count('s2')
</snippet></ROW><ROW><id>20188032</id><snippet>rental</snippet></ROW><ROW><id>20188032</id><snippet>prem_channels = int(input("Enter the number of premium channels used: "))
rental = int(input("Were movies rented (Y or N): "))
if rental in ['Y', 'y']:
    rental_days = input("Enter the total number of rental days (one day for each movie, each day): ")
</snippet></ROW><ROW><id>20188032</id><snippet>connections = int(input("Enter the number of basic service connections: "))
prem_channels = int(input("Enter the number of premium channels used: "))
</snippet></ROW><ROW><id>20188032</id><snippet>if (cust_type in ["R", "r"]):
</snippet></ROW><ROW><id>20188032</id><snippet>if (cust_type == "R" or cust_type == "r"):
</snippet></ROW><ROW><id>20188032</id><snippet>input("Were movies rented (Y or N): ")</snippet></ROW><ROW><id>20188032</id><snippet>int()</snippet></ROW><ROW><id>20188032</id><snippet>if rental in ['Y', 'y']:</snippet></ROW><ROW><id>20188032</id><snippet>true</snippet></ROW><ROW><id>20188338</id><snippet>data = ['a','b','c']
a, b = data[0], data[1:]
print a, b
</snippet></ROW><ROW><id>20188338</id><snippet>a ['b', 'c']
</snippet></ROW><ROW><id>20188338</id><snippet>data = ['a']
a, b = data[0], data[1:]
print a, b
</snippet></ROW><ROW><id>20188338</id><snippet>a []
</snippet></ROW><ROW><id>20188407</id><snippet>float</snippet></ROW><ROW><id>20188407</id><snippet>datetime.datetime</snippet></ROW><ROW><id>20188407</id><snippet>datetime.date</snippet></ROW><ROW><id>20188668</id><snippet>facepy</snippet></ROW><ROW><id>20188668</id><snippet>OAuthError</snippet></ROW><ROW><id>20188668</id><snippet>FacebookError</snippet></ROW><ROW><id>20188668</id><snippet>message</snippet></ROW><ROW><id>20188668</id><snippet>if</snippet></ROW><ROW><id>20188668</id><snippet>message</snippet></ROW><ROW><id>20188668</id><snippet>try:
    #api query
except facepy.exceptions.OAuthError as error:
    if 'object does not exist' == error.message:
       # do something
    elif 'Hit API rate limit' == error.message:
       # do something else
    else:
       raise
</snippet></ROW><ROW><id>20188979</id><snippet>balls = Ball(list(1,1),1)
</snippet></ROW><ROW><id>20189153</id><snippet>list</snippet></ROW><ROW><id>20189153</id><snippet> class __VecRot(list):

     def __init__(self, coords):
         list.__init__(self, coords)

     def double(self):
         for i in range(len(self)):
             self[i] = self[i] * 2

 a = __VecRot([1,0,0])

 a.double()

 print a
</snippet></ROW><ROW><id>20189153</id><snippet>coords</snippet></ROW><ROW><id>20189153</id><snippet>list</snippet></ROW><ROW><id>20189153</id><snippet> class __VecRot:

     def __init__(self, coords):
         self.coords = coords

     def double(self):
         self.coords = [i*2 for i in self.coords]

     def __len__(self):
         return len(self.coords)

     def __str__(self):
         return "__VecRot["+str(self.coords)+"]"

     def __repr__(self):
         return "__VecRot("+repr(self.coords)+")"

 a = __VecRot([1,0,0])

 a.double()

 print a
</snippet></ROW><ROW><id>20189153</id><snippet>__getitem__</snippet></ROW><ROW><id>20189153</id><snippet>list</snippet></ROW><ROW><id>20189509</id><snippet>ICMP</snippet></ROW><ROW><id>20189509</id><snippet>struct</snippet></ROW><ROW><id>20189752</id><snippet> data1 = []
 pos = 0
 with open('data.txt', 'r') as f:
     line = f.readline()
     while line and not line.startswith('$$$'):
         data1.append(line)
         line = f.readline()

     pos = f.tell()

 data2 = []
 with open('data.txt', 'r') as f:
     f.seek(pos)
     for line in f:
         data2.append(line)

 print data1
 print data2
</snippet></ROW><ROW><id>20189752</id><snippet>for line in f</snippet></ROW><ROW><id>20189852</id><snippet>__name__</snippet></ROW><ROW><id>20189852</id><snippet>python prog.py
</snippet></ROW><ROW><id>20189852</id><snippet>__name__</snippet></ROW><ROW><id>20189852</id><snippet>prog.py</snippet></ROW><ROW><id>20189852</id><snippet>__main__</snippet></ROW><ROW><id>20189868</id><snippet>for row in version_new:
   if "JID" in row:
      # in required section, loop until end:
      for row in version_new:
          if "Total text" in row:
              break
          list_top_version_new.append(row)
    # Anything outside of the required section is ignored.
</snippet></ROW><ROW><id>20189868</id><snippet>row.split()</snippet></ROW><ROW><id>20189868</id><snippet>csv.DictReader</snippet></ROW><ROW><id>20189868</id><snippet>list_top_version_new</snippet></ROW><ROW><id>20189868</id><snippet>csv.DictReader()</snippet></ROW><ROW><id>20189868</id><snippet>list_top_version_new</snippet></ROW><ROW><id>20189868</id><snippet>list_top_version_new.append(row)</snippet></ROW><ROW><id>20189868</id><snippet>for row in version_new:
   if "JID" in row:
      # in required section, loop until end:
      for row in version_new:
          if "Total text" in row:
              break
          print(row)
</snippet></ROW><ROW><id>20190000</id><snippet>for row in iterable:
    Eg_dict[row[1]] = row[2]
</snippet></ROW><ROW><id>20190000</id><snippet>Eg_dict = {row[1]: row[2] for row in iterable}  # python 2.7 and up
</snippet></ROW><ROW><id>20190000</id><snippet>Eg_dict = dict(row[1:3] for row in iterable)    # python 2.3 and up
</snippet></ROW><ROW><id>20190000</id><snippet>row</snippet></ROW><ROW><id>20190000</id><snippet>for key, value in row:  # two elements
</snippet></ROW><ROW><id>20190000</id><snippet>for _, key, value in row:  # three elements, ignore the first
</snippet></ROW><ROW><id>20190000</id><snippet>{key: value for _, key, value in iterable}</snippet></ROW><ROW><id>20190293</id><snippet>cursor.description</snippet></ROW><ROW><id>20190293</id><snippet>column_names = [t[0] for t in cursor.description]
</snippet></ROW><ROW><id>20190293</id><snippet>for row in rows:
    myjson = {"id": row[columns['id']], "name": row[columns['name']], "age": row[columns['age']]}
    myresult = json.dumps(myjson, indent=4)
    return myresult
</snippet></ROW><ROW><id>20190685</id><snippet>raw_input</snippet></ROW><ROW><id>20190685</id><snippet>input</snippet></ROW><ROW><id>20190685</id><snippet>choice</snippet></ROW><ROW><id>20190685</id><snippet>choice = raw_input("Choose an option").strip()
</snippet></ROW><ROW><id>20190686</id><snippet>def i64str(obj):
    if isinstance(obj, list):
        return [i64str(x) for x in obj]
    if isinstance(obj, dict):
        return {k:i64str(v) for k, v in obj.items()}
    if isinstance(obj, (int, long)) and obj &gt;= 2**32:
        return str(obj)
    return obj

json.dumps(i64str(my_page_obj))
</snippet></ROW><ROW><id>20190726</id><snippet>import win32api
import win32net
import win32netcon,win32wnet

username='user'
password='psw'

try:
    win32wnet.WNetAddConnection2(win32netcon.RESOURCETYPE_DISK, 'Z:','\\\\192.168.1.18\\D$', None, username,password, 0)
    print "connection established successfully"
except:
    print  "connection not established"
</snippet></ROW><ROW><id>20190726</id><snippet>for root, dirnames, filenames in os.walk('\\\\192.168.1.18\D$'):
        for filename in filenames:
            match=os.path.join(root, filename)
            datafile = file(match)
            for line in datafile:
               print line
</snippet></ROW><ROW><id>20190726</id><snippet>import win32api
import win32net

ip = '192.168.1.18'
username = 'ram'
password = 'ram@123'

try:
    use_dict={}
    use_dict['remote']=unicode('\\\\192.168.1.18\C$')
    use_dict['password']=unicode(password)
    use_dict['username']=unicode(username)
    win32net.NetUseAdd(None, 2, use_dict)
except:
    print  "connection not established"
</snippet></ROW><ROW><id>20190791</id><snippet>raw_html.decode()</snippet></ROW><ROW><id>20190791</id><snippet>&gt;&gt;&gt; u'é'.decode('latin1')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe9' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>20192038</id><snippet>def sumVectors(classB_infile, classA_infile, outfile):
    class_dictA = {}

    with open(classA_infile, "rb") as opened_infile_A:
        for line in opened_infile_A:
            items = line.split()
            classA, feat, valuesA = items[:3]
            class_dictA[feat.strip()] = float(valuesA)


    class_dictB = {}

    with open(classB_infile, "rb") as opened_infile_B:
        for line in opened_infile_B:
            items = line.split()
            classB, feat, valuesB = items[:3]
            class_dictB[feat.strip()] = float(valuesB)

    ####outfile 
    with open(outfile, "wb") as output_file:
        for key in class_dictA:
            if key in class_dictB:
                weight = class_dictA[key] + class_dictB[key]
                outstring = "\t".join([classA + "-" +  classB, key, str(weight)])
            else:
                weight = class_dictA[key]
                outstring = "\t".join([classA + "-" +  classB, key, str(weight)])
            output_file.write(outstring + "\n")

        for key in class_dictB:
            if key not in class_dictA: # if key was in A it was processed already
                weight = class_dictB[key]
                outstring = "\t".join([classA + "-" + classB, key, str(weight)])
                output_file.write(outstring + "\n")
</snippet></ROW><ROW><id>20192038</id><snippet>def readFile(fileName, keys):
    result = {}
    class_ = ''
    with open(fileName, "rb") as opened_infile_A:
        for line in opened_infile_A:
            items = line.split()
            class_, feat, value = items[:3]
            keys.add(feat)
            result[feat] = float(value)
    return (class_, result)


def sumVectors(classB_infile, classA_infile, outfile):
    keys = set()

    classA, class_dictA = readFile(classA_infile, keys)
    classB, class_dictB = readFile(classB_infile, keys)

    with open(outfile, "wb") as output_file:
        for key in keys:
            weightA = class_dictA[key] if key in class_dictA else 0
            weightB = class_dictB[key] if key in class_dictB else 0
            weight = weightA + weightB
            outstring = "\t".join([classA + "-" +  classB, key, str(weight)])
            output_file.write(outstring + "\n")
</snippet></ROW><ROW><id>20192185</id><snippet>self.cleaned_data['First name']
</snippet></ROW><ROW><id>20192185</id><snippet>self.cleaned_data['first_name']
</snippet></ROW><ROW><id>20192185</id><snippet>last_name</snippet></ROW><ROW><id>20192185</id><snippet>birthday</snippet></ROW><ROW><id>20192231</id><snippet>def adder(producer1, producer2, consumers):
    while True:
        x = next(producer1)
        y = next(producer2)
        for consumer in consumers:
            consumer.send(x+y)
</snippet></ROW><ROW><id>20192231</id><snippet>adder(x_producer, y_producer, consumers)</snippet></ROW><ROW><id>20192231</id><snippet>class AdderWithBroadcast(object):

    consumers = []

    def __init__(self, x_prod, y_prod):
        self.x_prod = x_prod
        self.y_prod = y_prod

    def __iter__(self):
        return self

    def next(self):
        x = next(self.x_prod)
        y = next(self.y_prod)

        for consumer in self.consumers:
            consumer.send(x+y)

        return x+y

    def consumer():
        while True:
            a = (yield)
            print a, ' in consumer'


k = iter(range(10))
adder = AdderWithBroadcast(k, k)
cons = consumer()
cons.send(None)
adder.consumers.append(cons)
for i in adder: 
    #  I won't include the actual result here, you can try in no your own
    print i
</snippet></ROW><ROW><id>20192231</id><snippet>class Broadcaster(object):

    consumers = []

    def __init__(self, gen):
        self.gen = gen

    def __iter__(self):
        return self

    def __call__(self, *args, **kwargs):
        self.gen = self.gen(*args, **kwargs)

    def next(self):
        yielded = next(self.gen)

        for consumer in self.consumers:
            consumer.send(yielded)

        return yielded


@Broadcaster
def adder(producer1, producer2):
        while True:
            x = next(producer1)
            y = next(producer2)
            yield x + y
#  result is the same as in previous solution
</snippet></ROW><ROW><id>20192251</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>20192251</id><snippet>from multiprocessing import Pool

def process_image(name):
    sci=fits.open('{}.fits'.format(name))
    &lt;process&gt;

if __name__ == '__main__':
    pool = Pool(processes=4)              # process per core
    pool.map(process_image, data_inputs)  # proces data_inputs iterable with pool
</snippet></ROW><ROW><id>20192681</id><snippet>square.py</snippet></ROW><ROW><id>20192681</id><snippet>subprocess</snippet></ROW><ROW><id>20192681</id><snippet>pty</snippet></ROW><ROW><id>20192681</id><snippet>subprocess</snippet></ROW><ROW><id>20192681</id><snippet>#!/usr/bin/env python
from __future__ import print_function
import sys
from itertools import cycle
from subprocess import Popen, PIPE
from textwrap import dedent

# start child process
p = Popen([sys.executable or 'python', '-u', '-c', dedent("""
        for i in range(10):
            x = int(input('Enter x-dimension: '))
            print(x*x)
        """)], stdin=PIPE, stdout=PIPE, universal_newlines=True, bufsize=1)
for n in cycle([3, 1, 4, 15, 926]): # infinite loop
    while p.poll() is None: # while the subprocess is running
        # send input to the child
        print(n, file=p.stdin)
        # read &amp; parse answer
        data = p.stdout.readline().rpartition(' ')[2]
        if not data: # EOF
            answer = None
            break # exit inner loop
        answer = int(data)
        if answer == 1: # show example when input depends on output
            n += 1
        else: # done with given `n`
            break # exit inner loop
    else: # subprocess ended
        break # exit outer loop
    if answer is not None:
        print("Input %3d Output %6d" % (n, answer))
p.communicate() # close pipes, wait for the child to terminate
</snippet></ROW><ROW><id>20192681</id><snippet>pexpect</snippet></ROW><ROW><id>20192681</id><snippet>#!/usr/bin/env python
import sys
from itertools import cycle
from textwrap import dedent

import pexpect

child = pexpect.spawnu(sys.executable or 'python', ['-c', dedent("""
            for i in range(10):
                x = int(input('Enter x-dimension: '))
                print(x*x)
            """)])
for n in cycle([3, 1, 4, 15, 926]):
    while True:
        i = child.expect([pexpect.EOF, u'x-dimension:'])
        if i == 0: # EOF
            answer = None
            child.close()
            sys.exit()
        elif i == 1: # child waits for input
            child.sendline(str(n))
            child.expect(u'\\n\\d+\\s')
            answer = int(child.after)
            if answer == 1:
                n += 1
            else:
                break
        else:
            assert 0
    else: # child terminated
        break
    if answer is not None:
        print("Input %3d Output %6d" % (n, answer))
</snippet></ROW><ROW><id>20192681</id><snippet>-u</snippet></ROW><ROW><id>20192681</id><snippet>subprocess</snippet></ROW><ROW><id>20192681</id><snippet>pexpect</snippet></ROW><ROW><id>20192681</id><snippet>stdio</snippet></ROW><ROW><id>20192681</id><snippet>stdbuf</snippet></ROW><ROW><id>20192681</id><snippet>unbuffer</snippet></ROW><ROW><id>20192681</id><snippet>square.py</snippet></ROW><ROW><id>20192681</id><snippet>square.py</snippet></ROW><ROW><id>20192681</id><snippet>#!/usr/bin/env python
import sys
import time

for line in iter(sys.stdin.readline, ''): # get line as soon as it is available
    print(int(line)**2) # find square
    sys.stdout.flush()  # make the answer available immediately
    time.sleep(.5) # a delay to show that the answer is available immediately
</snippet></ROW><ROW><id>20192681</id><snippet>subprocess</snippet></ROW><ROW><id>20192681</id><snippet>import sys
from subprocess import Popen, PIPE

L = [2, 7, 1] # numbers to be squared
p = Popen([sys.executable or 'python', 'square.py'], stdin=PIPE, stdout=PIPE,
          universal_newlines=True, bufsize=-1)
answers = map(int, p.communicate("\n".join(map(str, L)))[0].splitlines())
</snippet></ROW><ROW><id>20192681</id><snippet>#!/usr/bin/env python
import sys
from subprocess import Popen, PIPE

answers = []
p = Popen([sys.executable or 'python', 'square.py'], stdin=PIPE, stdout=PIPE,
          bufsize=1)
for c in [b'2', b'7', b'1']:
    p.stdin.write(c + b'\n')
    p.stdin.flush()
    answers.append(int(p.stdout.readline()))
    print(answers)
p.communicate() # close pipes, wait for child to finish
print(answers)
</snippet></ROW><ROW><id>20192681</id><snippet>json</snippet></ROW><ROW><id>20192681</id><snippet>import json
from subprocess import Popen, PIPE

p = Popen(['./c-program', 'other', 'args'], stdin=PIPE, stdout=PIPE, bufsize=1)
p.stdin.write(json.dumps({'parameter': 8}).encode() + b'\n') # send input
p.stdin.flush()
result = json.loads(p.stdout.readline().decode()) # e.g., {"result": [0, 0, 7]}
# ...
p.communicate() # close pipes, wait for child to finish
</snippet></ROW><ROW><id>20192866</id><snippet>configure</snippet></ROW><ROW><id>20192866</id><snippet>widget.configure(state="disabled")
</snippet></ROW><ROW><id>20192866</id><snippet>entryconfig</snippet></ROW><ROW><id>20192866</id><snippet>widget.entryconfig(0, state="disabled")
</snippet></ROW><ROW><id>20193030</id><snippet>hash()</snippet></ROW><ROW><id>20193030</id><snippet>k = list(d.keys())
k.sort()
for i in k: print i, d[i]
</snippet></ROW><ROW><id>20193079</id><snippet>Component</snippet></ROW><ROW><id>20193079</id><snippet>from trac.core import *

class MyModule(Component):
    def createTicket(self):
        return Ticket(self.env)
</snippet></ROW><ROW><id>20193108</id><snippet>flattened.composite(img, 
                    PythonMagick.GravityType.CenterGravity,            # this
                    PythonMagick.CompositeOperator.SrcOverCompositeOp)
</snippet></ROW><ROW><id>20193146</id><snippet>for entry in entries:
    id = entry.id
    title = entry.title
    start = entry.date.strftime("%Y-%m-%dT%H:%M:%S")
    allDay = False

    json_entry = {'id':id, 'start':start, 'allDay':allDay, 'title': title}
    json_list.append(json_entry)

return HttpResponse(json.dumps(json_list), content_type='application/json')
</snippet></ROW><ROW><id>20193457</id><snippet>import re
print [re.search("archive/(.*?)/index.html", l).group(1) for l in l1]
</snippet></ROW><ROW><id>20193457</id><snippet>print [l.rsplit("/", 2)[-2] for l in l1]
</snippet></ROW><ROW><id>20193665</id><snippet>django.contrib.auth.forms.UserCreationForm</snippet></ROW><ROW><id>20193665</id><snippet>ModelForm</snippet></ROW><ROW><id>20193665</id><snippet>Meta</snippet></ROW><ROW><id>20193665</id><snippet>UserCreationForm.Meta</snippet></ROW><ROW><id>20193665</id><snippet>User</snippet></ROW><ROW><id>20193895</id><snippet>getattr</snippet></ROW><ROW><id>20193895</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; isoformat = getattr(datetime.datetime.now(), 'isoformat')
&gt;&gt;&gt; isoformat()
'2013-11-25T20:05:57.262055'
</snippet></ROW><ROW><id>20193895</id><snippet>&gt;&gt;&gt; print(isoformat)
&lt;built-in method isoformat of datetime.datetime object at 0x0000000002F66D50&gt;
</snippet></ROW><ROW><id>20194023</id><snippet>def subsets_with_sum(lst, target, with_replacement=False):
    x = 0 if with_replacement else 1
    def _a(idx, l, r, t):
        if t == sum(l): r.append(l)
        elif t &lt; sum(l): return
        for u in range(idx, len(lst)):
            _a(u + x, l + [lst[u]], r, t)
        return r
    return _a(0, [], [], target)
</snippet></ROW><ROW><id>20194023</id><snippet># data
vals = [57, 71, 87, 97, 99, 101, 103, 113, 114, 115, 128, 129, 131, 137, 147, 156, 163, 186]
target = 270
</snippet></ROW><ROW><id>20194023</id><snippet>itertools.combinations</snippet></ROW><ROW><id>20194023</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; [comb for i in range(1, 20) for comb in combinations(vals, i) if sum(comb) == target]
[(114, 156), (57, 99, 114)]
</snippet></ROW><ROW><id>20194023</id><snippet>combinations_with_replacement</snippet></ROW><ROW><id>20194023</id><snippet>itertools.combinations_with_replacement</snippet></ROW><ROW><id>20194023</id><snippet>&gt;&gt;&gt; from itertools import combinations_with_replacement
&gt;&gt;&gt; [comb for i in range(1, 20) for comb in combinations_with_replacement(vals, i) if sum(comb) == target]
&gt;&gt;&gt;  # result takes too long ...
</snippet></ROW><ROW><id>20194023</id><snippet>def subsets_with_sum(lst, target, subset_lengths=range(1, 20), method='combinations'):   
    import itertools
    return [comb for i in subset_lengths for comb in
            getattr(itertools, method)(lst, i) if sum(comb) == target]

&gt;&gt;&gt; subsets_with_sum(vals , 270)
[(114, 156), (57, 99, 114)]
</snippet></ROW><ROW><id>20194023</id><snippet>def a(lst, target, with_replacement=False):
    def _a(idx, l, r, t, w):
        if t == sum(l): r.append(l)
        elif t &lt; sum(l): return
        for u in range(idx, len(lst)):
            _a(u if w else (u + 1), l + [lst[u]], r, t, w)
        return r
    return _a(0, [], [], target, with_replacement)


&gt;&gt;&gt; s = [57, 71, 87, 97, 99, 101, 103, 113, 114, 115, 128, 129, 131, 137, 147, 156, 163, 186]
&gt;&gt;&gt; a(s, 270)
[[57, 99, 114], [114, 156]]
&gt;&gt;&gt; a(s, 270, True)
[[57, 57, 57, 99], [57, 57, 156], [57, 71, 71, 71], [57, 99, 114], [71, 71, 128], [114, 156]]
</snippet></ROW><ROW><id>20194023</id><snippet>def a(lst, target, with_replacement=False):
    def _a(idx, l, r, t, w):
        if t == sum(l): r.append(l)
        elif t &lt; sum(l): return
        for u in range(idx, len(lst)):
            _a(u if w else (u + 1), l + [lst[u]], r, t, w)
        return r
    return _a(0, [], [], target, with_replacement)

def b(lst, target, subset_lengths=range(1, 21), method='combinations'):   
    import itertools
    return [comb for i in subset_lengths for comb in
            getattr(itertools, method)(lst, i) if sum(comb) == target]

vals = [57, 71, 87, 97, 99, 101, 103, 113, 114, 115, 128, 129, 131, 137, 147, 156, 163, 186]

from timeit import timeit
print 'no replacement'
print timeit("a(vals, 270)", "from __main__ import vals, a", number=10)
print timeit("b(vals, 270)", "from __main__ import vals, b", number=10)
print 'with replacement'
print timeit("a(vals, 270, True)", "from __main__ import vals, a", number=10)
print timeit("b(vals, 270, method='combinations_with_replacement')", "from __main__ import vals, b", number=10)
</snippet></ROW><ROW><id>20194023</id><snippet>no replacement
0.0273933852733
0.683039054001
with replacement
0.0177899423427
... waited a long time ... no results ...
</snippet></ROW><ROW><id>20194119</id><snippet>parse_dates</snippet></ROW><ROW><id>20194119</id><snippet>datetime</snippet></ROW><ROW><id>20194119</id><snippet>date_parser</snippet></ROW><ROW><id>20194119</id><snippet>df = pd.read_csv(file, header=None, index_col='datetime', 
                 parse_dates={'datetime': [1,2,3,4]}, 
                 date_parser=lambda x: pd.datetime.strptime(x, '%Y %m %d %H'))
</snippet></ROW><ROW><id>20194119</id><snippet>                         0     5
datetime                        
2011-01-01 21:00:00  50136  9792
2011-01-01 22:00:00  50136  9794
2011-01-01 23:00:00  50136  9796
2011-01-01 00:00:00  50136  9798
2011-01-01 01:00:00  50136  9799
2011-01-01 02:00:00  50136  9802
</snippet></ROW><ROW><id>20194119</id><snippet>def dt_parse(date_string):

    dt = pd.datetime.strptime(date_string, '%Y %m %d %H')

    return dt
</snippet></ROW><ROW><id>20194219</id><snippet># This line is not correct
'explorer /n, /select r"\\192.168.0.27\\Project_Data\\Projects_2013\\"'+fldrname
#                      ^you start a new string without ending previous one
# this one is correct
'explorer /n, /select ' + r'\192.168.0.27\Project_Data\Projects_2013\' + fldrname
#                     ^first ending string start
</snippet></ROW><ROW><id>20194219</id><snippet>r"xxx"</snippet></ROW><ROW><id>20194219</id><snippet>\</snippet></ROW><ROW><id>20194219</id><snippet>r</snippet></ROW><ROW><id>20194219</id><snippet>+</snippet></ROW><ROW><id>20194219</id><snippet>os.path.join()</snippet></ROW><ROW><id>20194287</id><snippet>from time import time

# your code here

tic = time()
cursor.execute("select * from db.customer")
toc = time()
print toc - tic
</snippet></ROW><ROW><id>20194441</id><snippet>class Light:
    ...
    setup(self, i):
        glEnable(GL_LIGHT0 + i)
        glLightfv(GL_LIGHT0 + 1, GL_POSITION, self.light_position)
        ....
</snippet></ROW><ROW><id>20194441</id><snippet>glEnable(GL_LIGHTING)
for i,l in enumerate(lights):
    l.setup(i)
</snippet></ROW><ROW><id>20194538</id><snippet>text.replace("&lt;", "")</snippet></ROW><ROW><id>20194717</id><snippet>get_user_model</snippet></ROW><ROW><id>20194717</id><snippet>settings.AUTH_USER_MODEL</snippet></ROW><ROW><id>20194812</id><snippet>x = A[0]
</snippet></ROW><ROW><id>20194812</id><snippet>x = A[:1]
</snippet></ROW><ROW><id>20194812</id><snippet>[]</snippet></ROW><ROW><id>20194991</id><snippet>td</snippet></ROW><ROW><id>20194991</id><snippet>class="stones"</snippet></ROW><ROW><id>20194991</id><snippet>from bs4 import BeautifulSoup
from urllib2 import urlopen

response = urlopen('http://goldratenepal.com')
html = response.read()
soap = BeautifulSoup(html)
result = soap.find_all('td' ,{'class': 'stones'})

print result[0].text
</snippet></ROW><ROW><id>20195215</id><snippet>args['form']</snippet></ROW><ROW><id>20195215</id><snippet>{{form}}</snippet></ROW><ROW><id>20195564</id><snippet>instance.link</snippet></ROW><ROW><id>20195564</id><snippet>kwargs</snippet></ROW><ROW><id>20195564</id><snippet>'instance'</snippet></ROW><ROW><id>20195564</id><snippet>my_callback</snippet></ROW><ROW><id>20195564</id><snippet>instance</snippet></ROW><ROW><id>20195564</id><snippet>if instance.link is None:
    ....
</snippet></ROW><ROW><id>20195816</id><snippet>b.write_i2c_block_data(0x31, 5, [0, 8]) # write number 8 to digit 0
b.write_i2c_block_data(0x31, 5, [4, 5]) # write number 5 to digit 4 etc etc
</snippet></ROW><ROW><id>20195888</id><snippet>from collections import Counter

counter = Counter()

for line in file_handle:
    name, gender, age = line.split(',')
    counter[name] += 1

print counter.most_common()
</snippet></ROW><ROW><id>20196196</id><snippet>2*x*y*(math.cos(z)*(180/math.pi))
</snippet></ROW><ROW><id>20196196</id><snippet>cos(...)</snippet></ROW><ROW><id>20196196</id><snippet>2*x*y*math.cos(z*math.pi/180)
</snippet></ROW><ROW><id>20196329</id><snippet>$ cd pydhcplib-0.6.2/
$ sudo python setup.py install
</snippet></ROW><ROW><id>20196329</id><snippet>#!/usr/bin/python
from pydhcplib.dhcp_packet import *
from pydhcplib.dhcp_network import *


netopt = {'client_listen_port':68,
       'server_listen_port':67,
       'listen_address':"0.0.0.0"}


class Client(DhcpClient):
    def __init__(self, options):
         DhcpClient.__init__(self,options["listen_address"],
                        options["client_listen_port"],
                        options["server_listen_port"])

    def HandleDhcpOffer(self, packet):
        print packet.str()
    def HandleDhcpAck(self, packet):
        print packet.str()
    def HandleDhcpNack(self, packet):
        print packet.str()        

client = Client(netopt)
# Use BindToAddress if you want to emit/listen to an internet address (like 192.168.1.1)
# or BindToDevice if you want to emit/listen to a network device (like eth0)
client.BindToAddress()

while True :
    print client.GetNextDhcpPacket()
</snippet></ROW><ROW><id>20196329</id><snippet>$ sudo python x.py 
# Header fields
op : BOOTREPLY
htype : 1
hlen : 6
hops : 0
xid : 2381790907
secs : 0
flags : 0
ciaddr : 0.0.0.0
yiaddr : 192.168.125.88
siaddr : 0.0.0.0
giaddr : 0.0.0.0
chaddr : 60:fa:cd:bb:25:a5
sname : 
file : 
# Options fields
server_identifier : 3232267521
subnet_mask : 255.255.255.0
domain_name_server : 66.234.224.2 - 8.8.8.8 - 
router : 192.168.125.1 - 
dhcp_message_type : DHCP_ACK
ip_address_lease_time : 86400

# Header fields
op : BOOTREPLY
htype : 1
hlen : 6
hops : 0
xid : 3920377619
secs : 0
flags : 32768
ciaddr : 192.168.125.138
yiaddr : 192.168.125.138
siaddr : 0.0.0.0
giaddr : 0.0.0.0
chaddr : 68:5d:43:8c:3e:94
sname : 
file : 
# Options fields
server_identifier : 3232267521
subnet_mask : 255.255.255.0
domain_name_server : 66.234.224.2 - 8.8.8.8 - 
router : 192.168.125.1 - 
dhcp_message_type : DHCP_ACK
ip_address_lease_time : 86400
</snippet></ROW><ROW><id>20196337</id><snippet>get_bucket()</snippet></ROW><ROW><id>20196337</id><snippet>create_bucket()</snippet></ROW><ROW><id>20196337</id><snippet>get_bucket()</snippet></ROW><ROW><id>20196337</id><snippet>create_bucket()</snippet></ROW><ROW><id>20196337</id><snippet>try:
    print "bucket name " + bucket_name;
    bucket = conn.get_bucket( bucket_name)
except TimeoutException:
    sys.exit("Connection timed out; this usually means you're offline.")
except S3ResponseError, exception_data:
    sys.exit(exception_data.error_message)
</snippet></ROW><ROW><id>20196337</id><snippet>TimeoutException</snippet></ROW><ROW><id>20196337</id><snippet>get_bucket()</snippet></ROW><ROW><id>20196337</id><snippet>get_bucket()</snippet></ROW><ROW><id>20196337</id><snippet>socket</snippet></ROW><ROW><id>20196463</id><snippet>{% try %}
{% if clients_list %}
{% for client in clients_list %}
    {% for user in client['clients'] %}
        {% raw user['id'] %}
        {% raw user['value'] %}
    {% end %}
{% end %}
{% end %}
{% except %}
{% end %}
</snippet></ROW><ROW><id>20196660</id><snippet>numpy.isnan</snippet></ROW><ROW><id>20196660</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a=np.asarray([3,4,np.nan,1,2])
&gt;&gt;&gt; np.isnan(a)
array([False, False,  True, False, False], dtype=bool)
&gt;&gt;&gt; a[np.isnan(a)]
array([ nan])

&gt;&gt;&gt; np.where(np.isnan(a))
(array([2], dtype=int64),)
</snippet></ROW><ROW><id>20196855</id><snippet>class Member(models.Model):
    id = models.IntegerField()
    class Meta:
        db_table = 'member'
</snippet></ROW><ROW><id>20197009</id><snippet>a =  "{'a':'\\\\\my_host\\my_path'}"</snippet></ROW><ROW><id>20197009</id><snippet>\\\\m</snippet></ROW><ROW><id>20197009</id><snippet>\</snippet></ROW><ROW><id>20197009</id><snippet>\</snippet></ROW><ROW><id>20197009</id><snippet>r</snippet></ROW><ROW><id>20197009</id><snippet>a =  "{'a':r'\\\\my_host\\my_path'}"</snippet></ROW><ROW><id>20197009</id><snippet>&gt;&gt;&gt; a =  "{'a':r'\\\\my_host\\my_path'}"
&gt;&gt;&gt; eval(a)
{'a': '\\\\my_host\\my_path'}
&gt;&gt;&gt; a =  "{'a':'\\\\\my_host\\my_path'}"
&gt;&gt;&gt; eval(a)
{'a': '\\\\my_host\\my_path'}
</snippet></ROW><ROW><id>20197233</id><snippet>re.split()</snippet></ROW><ROW><id>20197233</id><snippet>#text is the variable with your text
text = text.strip()
questions = re.split(r'\d+\.',text)
questions = [x.strip() for x in questions if x != '']
final = [re.split(r'\(\d+\)',x) for x in questions]

for part in final:
    question = part[0]
    print question
    for answer in part[1:]:
        print answer
</snippet></ROW><ROW><id>20197489</id><snippet>c.execute("insert into SingleTable values (?)", (str_tweet,))
</snippet></ROW><ROW><id>20197489</id><snippet>execute</snippet></ROW><ROW><id>20197502</id><snippet>from math import floor, ceil
import profile

amino_weight = {
    'A':  71.038,
    'C': 103.009,
    'D': 115.027,
    'E': 129.043,
    'F': 147.068,
    'G':  57.021,
    'H': 137.059,
    'I': 113.084,
    'K': 128.095,
    'L': 113.084,   # you omitted leutine?
    'M': 131.040,
    'N': 114.043,
    'P':  97.053,
    'Q': 128.059,   # you omitted glutamine?
    'R': 156.101,
    'S':  87.032,
    'T': 101.048,
    'V':  99.068,
    'W': 186.079,
    'Y': 163.063
}

def get_float(prompt):
    while True:
        try:
            return float(raw_input(prompt))
        except ValueError:
            pass

# This is where the fun happens!
def get_mass_combos(aminos, pos, lo, hi, cutoff):
    this = aminos[pos]         # use a pointer into the string, to avoid copying 8 million partial strings around
    wt = amino_weight[this]
    kmax = int(floor(hi / wt))
    npos = pos - 1
    if npos:                   # more aminos to consider recursively
        for k in xrange(0, kmax + 1):
            mass    = k * wt
            nlo     = lo - mass
            nhi     = hi - mass
            ncutoff = cutoff - mass
            if nlo &lt;= 0. and nhi &gt;= 0.:
                # we found a winner!
                yield {this: k}
            elif ncutoff &lt; 0.:
                # no further solution is possible
                break
            else:
                # recurse
                for cc in get_mass_combos(aminos, npos, nlo, nhi, ncutoff):
                    if k &gt; 0: cc[this] = k
                    yield cc
    else:                      # last amino - it's this or nothing
        kmin = int(ceil(lo / wt))
        for k in xrange(kmin, kmax+1):
            yield {this: k}

def to_string(combo):
    keys = sorted(combo)
    return ''.join(k*combo[k] for k in keys)

def total_mass(combo):
    return sum(amino_weight[a]*n for a,n in combo.items())

def fact(n):
    num = 1
    for i in xrange(2, n+1):
        num *= i
    return num

def permutations(combo):
    num = 0
    div = 1
    for v in combo.values():
        num += v
        div *= fact(v)
    return fact(num) / div

def find_combos(lo, hi):
    total = 0
    bases = []
    aminos = ''.join(sorted(amino_weight, key = lambda x: amino_weight[x]))
    for combo in get_mass_combos(aminos, len(aminos)-1, lo, hi, hi - amino_weight[aminos[0]]):
        base = to_string(combo)
        bases.append(base)
        mass = total_mass(combo)
        cc = permutations(combo)
        total += cc
        print("{} (mass {}, {} permutations)".format(base, mass, cc))
    print('Total: {} bases, {} permutations'.format(len(bases), total))

def main():
    lo = get_float('Bottom of target mass range? ')
    hi = get_float('Top of target mass range? ')

    prof = profile.Profile()
    prof.run('find_combos({}, {})'.format(lo, hi))
    prof.print_stats()

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>20197760</id><snippet>character_list</snippet></ROW><ROW><id>20197760</id><snippet>cipher_list</snippet></ROW><ROW><id>20197760</id><snippet>len(character_list)</snippet></ROW><ROW><id>20197760</id><snippet>cipher_list</snippet></ROW><ROW><id>20197760</id><snippet>cipher_list</snippet></ROW><ROW><id>20197760</id><snippet>character_list</snippet></ROW><ROW><id>20197760</id><snippet>def obfuscation(character_list):    
    return {k: sorted(character_list, key=lambda k: random.random()) for k in character_list}
</snippet></ROW><ROW><id>20197760</id><snippet>len(character_list)</snippet></ROW><ROW><id>20197760</id><snippet>character_list</snippet></ROW><ROW><id>20197760</id><snippet>sorted()</snippet></ROW><ROW><id>20197760</id><snippet>random.random</snippet></ROW><ROW><id>20197760</id><snippet>&gt;&gt;&gt; res = obfuscation(character_list)
&gt;&gt;&gt; res
{'Space': ['P', '4', '8', 'w', 'i', '1', 'q', '0', 'F', 'n', '2', 'm', 'U', 'R', 'E', 'V', 'j', 'A', '6', 'K', 'o', 'l', 'x', 'Q', 'y', 'Space', 'L', 'g', 'B', 't', 'e', 'r', 'X', 'D', 'k', 'Y', 'f', 'G', 'H', 'O', 'Z', 'v', 'J', 'p', 'u', 's', 'd', 'N', 'c', '9', 'z', 'W', '3', 'a', 'h', 'b', 'C', '7', 'I', 'S', '5', 'M', 'T'], '1': ['9', '7', '2', 'G', 'C', 'I', 'S', 'v', 'b', 'O', 'W', 'L', 'R', 'k', 'f', 'K', 'e', 'y', 'u', 'J', 'q', 'T', 'V', '5', '8', 'x', 't', 'D', 'w', 'g', 'M', 'N', 'X', 'z', 'a', 'A', 'Q', 'Space', 'r', 'i', 'l', 'B', 'n', '1', 'c', 's', 'Y', 'm', 'P', 'p', 'Z', 'd', 'E', '6', 'H', 'h', 'o', '4', 'j', '0', '3', 'F', 'U'], '0': ['B', 'a', '5', 'o', 'd', 'g', '9', 'Y', '2', 'z', 'p', '4', 'W', 'r', 'R', 'f', '1', 'c', 'e', 'Z', 'D', 'l', 'u', '6', 'y', 'H', 'O', '7', 'T', 'Q', 'n', 'k', 'P', 'v', 'F', 'w', 'C', 'E', '3', 'Space', 'I', 'i', 'j', 'q', 'b', 'A', '0', 'J', 'S', 'N', 't', 'U', 's', 'L', 'm', 'X', '8', 'K', 'G', 'V', 'M', 'x', 'h'], '3': ['r', '1', 'L', 'R', 'F', 'X', 'y', '6', '2', 'S', 's', 'b', 'a', 'J', 'x', 'i', 'm', 'Z', 'l', '0', 'N', 'U', 'I', 'd', 'v', 'O', 'n', 'P', 'W', 'q', '4', 'k', '3', 'D', 'C', 'Q', '5', 'f', 'K', 'o', 'g', '9', '7', 'Space', 'G', 'B', 'p', 'V', 'c', 'e', 'T', 'A', 'j', 'Y', 'H', 'E', 't', 'M', 'z', 'u', 'w', 'h', '8'], '2': ['v', 'Q', 'S', 'P', '9', 'l', 'X', 'H', 'z', 'q', '1', 'M', 'C', 'a', 'y', 'V', '5', 'N', 'Z', 't', 'x', 'K', '0', 'A', 'i', 'u', 'T', 'c', 'e', 'j', 'Y', '8', 'I', 'F', 'g', 'U', 's', 'k', 'w', 'W', 'h', 'J', 'O', 'o', 'm', 'D', 'L', '6', 'E', 'r', '2', 'G', 'f', 'd', 'R', 'p', 'n', 'b', '3', '4', 'Space', '7', 'B'], '5': ['i', 'O', 'T', 'I', 'v', 'o', 'H', 'k', 'n', 'C', 'G', '8', '5', '0', 'Z', 'J', 'm', 'j', 'l', 'S', 'B', 'f', '3', 'M', 'E', '7', 'V', 'x', '6', 'L', '4', 'A', 'P', 'q', 'Y', 'Space', 'D', 'Q', 'r', 'g', 'b', 'X', 'W', 'd', 'u', 'h', 'p', 's', '2', 'a', 'e', '9', 'c', 'z', '1', 't', 'R', 'N', 'y', 'K', 'F', 'w', 'U'], '4': ['h', 'f', 'I', 'T', 'd', 'D', 'X', 's', '3', 't', 'Q', 'e', '4', 'S', 'P', 'B', 'H', 'N', 'p', '6', 'm', 'K', 'V', 'i', 'F', 'M', 'k', 'r', 'u', 'z', 'A', 'a', 'v', 'C', 'O', 'c', 'q', 'w', 'n', 'g', 'j', 'Z', 'o', 'G', '2', 'W', '8', 'x', '5', 'Y', 'J', 'l', 'Space', 'R', 'L', '9', '7', 'b', 'U', '1', 'y', 'E', '0'], '7': ['j', 'W', 'F', 'T', 'V', 'L', '5', 'A', '9', '0', 'q', '4', 'R', 'E', 'r', 'n', 'c', 'h', 'H', 'e', 'J', 'C', 'v', 'p', 'b', 'K', 'Space', 'l', 't', 'd', 'G', 'u', 'U', '6', 'x', 'S', 's', 'k', 'w', '3', 'z', 'm', 'P', 'X', 'D', '7', 'Z', 'i', 'y', 'g', 'N', 'B', 'Q', 'o', '8', 'O', '1', 'M', 'a', 'I', 'f', 'Y', '2'], '6': ['i', '9', 'x', 'b', 'Space', 'o', 'P', 'y', 'h', 'z', 'H', '3', 'U', 'B', '7', '8', 'E', 'm', 'R', 'k', 'D', '0', 'Z', 'S', 'G', 's', 'X', 'W', 'p', 'n', 'N', 'w', 'c', 'q', '4', 'j', 'M', 'A', 'J', 'l', 'd', 'Y', 'v', '5', 't', 'g', '6', 'a', 'f', 'e', 'F', '2', 'K', 'u', '1', 'O', 'r', 'T', 'V', 'L', 'Q', 'I', 'C'], '9': ['H', 'I', 'P', 'p', 'K', 'E', 'f', 'e', 'i', 'C', 'd', '1', 'j', '5', '9', '2', 'c', 'R', 'J', '4', 'X', 'M', 'l', 'G', 'r', 'B', 'A', 'z', 'F', 't', 'k', 'w', 'Q', 'a', 'o', '7', 'W', 'O', 'L', 'b', '0', 'T', 'Y', 'q', 'x', 'Z', 'm', 'g', 'U', 'v', 'u', 'D', 'n', 'Space', '6', 'N', 'V', 'h', 'y', 'S', 's', '3', '8'], '8': ['7', 'z', 'D', 'j', 'J', 'A', 'K', 'M', 'N', 'n', '1', 'r', 'm', 'X', 'L', 'l', 'e', 'R', '8', 'h', 't', '6', '5', 'F', 'Space', 'x', 'H', 'P', '9', 'i', 'Y', 'u', 'Z', 'v', 'f', 'q', '3', 'W', 's', 'p', 'y', 'T', 'a', 'b', 'V', 'g', 'c', 'Q', 'U', '0', 'I', 'd', 'E', 'O', 'B', 'w', 'G', 'C', 'k', 'o', 'S', '2', '4'], 'A': ['I', 'Q', 'd', 'r', 'T', 'X', 'i', 'B', 'Z', 'P', 'G', 'u', '1', 'v', 'D', '6', 'W', 'q', 'e', '2', 'V', 'U', 'S', 'h', 'R', 'E', '0', 'f', 'b', 't', 'C', 'k', 'x', 'p', 'y', 'M', '7', 'A', 'c', 'H', 'g', 'J', 'O', 'l', '8', '4', 'F', 'Space', '9', 'w', 'o', 'K', '5', 'j', 'n', 'a', 'Y', 'L', '3', 's', 'm', 'N', 'z'], 'C': ['3', 'd', 'r', 'M', 't', 'L', 'l', 'V', 'o', 'R', 'n', 'P', 'T', 'q', 'Q', 'z', 's', 'j', 'Space', '4', '5', 'H', 'c', 'b', 'Z', 'C', '6', 'g', 'w', 'U', 'y', 'X', 'D', '2', 'I', 'm', 'B', 'G', 'f', 'a', 'A', '8', 'e', '1', 'i', 'K', 'F', 'Y', 'v', '0', 'x', 'p', 'u', 'k', 'J', 'h', 'N', 'S', 'E', 'W', 'O', '7', '9'], 'B': ['w', 'p', '6', 'm', 'v', 'u', '9', 'y', '7', 'Y', 'e', 'F', 'i', 'C', 'd', 'H', 'U', 'b', '5', 'B', 'c', 'a', 'A', 'D', 'X', 'o', 'q', 'V', 'G', 'N', 'I', 'P', 'Q', '2', 'f', 'l', 'J', '0', 'M', 'k', 'Space', '8', 'Z', 's', 'L', 'j', 'O', 'n', 'K', 'h', 'W', '1', '4', 'E', 'r', 'S', '3', 't', 'x', 'z', 'g', 'R', 'T'], 'E': ['q', 'o', 'w', '9', 'N', 'V', 'a', 'm', '5', 'Y', 'M', 'U', '0', 'z', 'Space', '8', 'B', 'i', 'T', 'C', 'P', 'Q', 'Z', 'J', 'A', 'H', 'g', 'n', 's', 'S', '1', 'e', 'f', '3', '6', 'b', 'K', 'L', 'O', 'X', 'G', 'd', 'k', 'c', '2', 'p', 'y', 'v', 'D', '4', 'W', 'h', 'E', 'u', 'j', 'F', 'I', 'l', 'x', '7', 't', 'r', 'R'], 'D': ['Y', 't', 'F', 'o', 'g', 'K', 'i', 'w', '8', 'N', 'O', 'j', 'R', 'Q', 'e', 'u', 'G', 'd', 'h', 'I', 'H', 'E', 'C', 'X', 'J', 'B', '4', 'v', 'y', 'p', '5', 'f', 'A', 'M', 'm', 'Space', 'V', 'z', 'U', 'W', 'L', 'c', 'x', 'S', 's', '2', '6', '0', '1', 'P', 'l', 'k', 'b', 'a', 'T', '9', 'q', 'r', 'Z', 'D', '3', '7', 'n'], 'G': ['u', 'j', 'L', 'B', '7', 'M', 'D', '9', 'k', 'p', 'v', 'A', 'G', 't', 'Y', 'P', 'f', 'E', 'b', 'F', '0', '1', 'g', 'c', 'K', 'W', 'e', 'H', '3', '2', 'w', 'i', 'X', 'V', 'o', 'N', 'q', 'h', 'Z', 'l', 'd', '5', 'I', '8', 'Q', 'Space', 'z', 'a', 'x', 'R', 'J', 'O', 'y', 'r', 'C', '4', 'n', 'm', 'U', 'T', 's', 'S', '6'], 'F': ['Y', 'F', 'R', 'c', 'E', 'z', 'W', 'i', 'm', 'y', 'Space', 'r', 'L', 'v', '0', '9', 'M', 'O', 'e', 'V', 'b', 'P', 'J', 'q', 'l', '8', 'G', 'T', 'U', 'S', 'h', 'k', '1', 'a', 'Z', 'X', '2', 'I', 'B', '4', 's', 'D', 't', 'N', 'A', 'w', '5', 'K', 'H', 'x', 'f', 'g', '6', 'C', 'Q', 'j', '7', 'n', 'o', '3', 'd', 'u', 'p'], 'I': ['r', 'c', 'd', 'i', 'Q', 'Z', '6', '3', '5', 'g', 'o', 'v', 'l', 'w', 'Space', 's', 'B', 'a', 'X', 'C', 'u', 'R', 'z', 'P', 'F', 'L', 'x', 'f', 'U', '4', '7', 'p', 'T', 'Y', 'K', '0', 'n', 'V', 'b', 'k', 'S', 'I', 'm', 'J', 'q', 'M', 'W', '2', 'y', 'G', '1', '8', 'h', 'E', 'e', 'O', 'D', 'N', 't', 'H', 'A', '9', 'j'], 'H': ['B', 't', '9', 'Y', 'X', '7', 'V', 'Space', '2', 'E', 'm', 's', 'l', 'D', 'e', 'd', '5', 'L', 'f', 'x', 'I', 'h', '1', 'J', 'P', 'u', 'F', 'H', 'K', 'C', 'o', 'Z', 'W', 'n', 'w', 'q', 'g', 'G', '6', 'U', '8', 'c', 'N', 'a', 'A', 'O', 'y', 'v', '3', 'R', 'Q', 'j', 'i', '0', 'T', 'p', '4', 'S', 'b', 'z', 'M', 'r', 'k'], 'K': ['Z', 'i', 'n', 'u', 'V', 'G', '9', 'F', '6', 'N', 'd', 'x', 'f', 'c', 'Q', 'Space', 'e', 'h', 'r', 'C', 'Y', 'U', 'o', '5', 'y', 'k', 'J', 'D', 'a', 'I', '3', 'X', 'H', 'O', '8', 's', '7', 'v', 'S', 'K', 'w', 'z', 'm', 'g', 'A', 'L', 'j', 'T', '1', 'R', 't', 'q', '2', 'M', 'W', 'l', '4', 'b', 'p', 'B', 'P', 'E', '0'], 'J': ['5', 'm', 'J', 'W', 'Q', '9', 'j', 'O', 'g', 'V', 'D', 'd', 'Space', 'E', 'l', 'N', '7', '3', 'k', 'L', 'M', 'v', '8', 'R', 'o', '6', 'B', 'G', 'w', 'a', 'Z', 'X', 'I', 'i', 'x', 'y', 't', 'U', 'K', 'H', '2', 'T', 'b', '0', 's', 'A', 'f', 'P', '1', 'n', 'p', 'e', 'F', 'C', 'u', '4', 'c', 'z', 'Y', 'S', 'q', 'h', 'r'], 'M': ['e', 'g', 'H', '1', 'T', '0', 'C', 'J', '6', 'z', 'B', 'y', 'h', 'V', 'F', 'k', 'G', 'R', '5', 'q', 'w', 'O', 'U', '7', 'j', 'f', '3', 'I', 'Y', 'E', 'M', 'n', 'x', 'u', 'Space', 't', 'c', '2', 'v', 'Z', '4', 'r', 'L', 'W', 'X', 'i', 'N', 's', 'D', 'p', 'K', 'A', '8', 'a', 'l', 'd', '9', 'Q', 'S', 'b', 'o', 'P', 'm'], 'L': ['g', 'W', 'z', 'Y', '3', 'O', 'D', 'V', 'A', 'K', 't', 'T', 'B', 'U', 's', 'p', 'Space', 'f', 'k', 'v', 'c', 'C', 'j', 'x', 'E', 'm', 'L', 'P', 'r', '0', 'S', 'e', '9', 'Z', '2', 'w', 'd', 'R', 'h', 'i', '1', 'u', 'a', '7', 'y', '6', 'M', 'H', 'o', '5', '8', 'q', 'n', 'X', 'b', 'Q', 'G', 'F', '4', 'N', 'I', 'J', 'l'], 'O': ['c', 'p', 'G', 'e', 'x', 'b', '5', 'z', 'g', 'A', 'O', 'n', '2', 'P', 'I', 'N', 'y', 'm', '3', 't', 'h', 'T', 'a', 'H', '6', 'M', '0', 'Y', 'd', '7', '4', 'w', 'L', '1', 'X', 'W', 'i', 'F', '8', 'C', 'u', 'R', 'r', 'j', 'V', 'v', 'S', 'D', 's', 'Space', 'Q', 'B', '9', 'q', 'o', 'K', 'U', 'l', 'k', 'Z', 'J', 'f', 'E'], 'N': ['H', 'Z', '6', 'G', 'j', 'D', 'E', 'U', 'h', 'e', 'c', 'z', '4', 'R', 'q', 'K', 'n', '9', 'u', 'Space', 'M', 's', 'i', 'J', 'X', '5', 'A', 'l', 'k', 'L', '0', 'Y', '7', 'p', 'b', 't', 'P', 'B', 'f', 'S', 'F', 'N', 'm', 'g', '1', 'w', 'C', '2', 'y', 'T', 'x', 'Q', '3', 'I', 'v', 'O', 'r', 'a', '8', 'd', 'o', 'W', 'V'], 'Q': ['i', 'l', 'G', 'h', 'I', 'Space', 'Q', 'y', 'B', 'W', 'w', 'Y', '2', 'u', '5', '4', 'z', 'm', '6', '9', 'n', 'P', '0', 'H', 'Z', 'r', 'a', 'v', 'A', 'j', 'U', 'f', 'c', 'N', 'x', 's', 'M', 't', 'L', 'R', 'E', '1', 'C', 'k', 'T', 'q', 'X', '8', 'V', 'p', 'K', '7', 'J', 'S', 'b', 'O', 'o', 'D', 'e', '3', 'g', 'F', 'd'], 'P': ['o', 'A', 'l', 'w', 'p', 'n', 'h', '5', 'm', 'H', 'Z', '0', 'F', 'Q', 'V', 'f', 'J', 'P', 'L', 'T', 'j', '6', 'B', 'e', 'E', '3', 'S', 'r', '1', 'Y', 'y', 'd', 'Space', 'z', '4', 's', 'q', 'O', 'C', '8', 'N', 'u', 'R', 't', 'g', 'k', 'I', 'v', 'a', 'W', 'X', 'x', 'G', 'i', 'M', '7', '2', 'c', 'K', 'D', 'b', '9', 'U'], 'S': ['a', 'b', 'r', '4', 'Space', 'O', 'P', 'o', '8', 'T', 'f', 'K', '9', '7', 'R', 'F', 's', 'm', 'Y', 'J', 'X', '6', 'k', 'z', 'E', '0', 'B', 'G', 'y', 'S', 'q', 'A', 'M', 'h', 'H', 'I', 'C', '5', 'd', '1', 't', 'e', 'w', 'L', 'j', 'N', 'D', 'n', 'c', '2', 'V', 'v', 'u', 'l', 'U', 'i', 'p', 'g', 'Z', '3', 'W', 'Q', 'x'], 'R': ['f', 'E', 'T', 'P', 'j', 's', '9', 'h', '1', 'e', '3', 'W', 'I', 'S', '2', 'J', 'u', '0', 'x', 'y', 'a', '7', 'Z', 'w', 'l', 'V', 'b', 'c', 'Y', 't', 'm', 'v', 'r', 'Space', 'K', 'G', 'O', 'L', '6', 'H', 'o', 'p', 'q', 'A', 'D', 'i', '4', 'd', 'n', 'C', 'B', 'F', 'R', '8', 'g', 'M', 'z', 'U', 'Q', 'k', 'N', 'X', '5'], 'U': ['u', 'k', 'N', 'R', 'W', 'g', 'E', 'K', 'I', 'j', 'P', 'C', 'L', 'Y', 'y', 'm', 'H', 'b', 'F', '8', 'Space', 'a', 'r', 'J', 'S', 'd', 'Q', 'e', 'i', 'w', 'X', 'c', '6', 'v', 'h', 'A', 'D', 'x', 'O', 't', 'G', 's', 'z', 'q', 'p', 'l', 'B', '2', '9', 'Z', 'o', 'f', '1', 'V', '5', 'U', '7', 'T', 'M', '4', '3', 'n', '0'], 'T': ['B', 'A', 'v', '7', 's', 'U', 'u', 'o', 'T', 'i', 'q', 'b', 'F', '1', 'l', '5', 'G', 'S', 'm', 'C', '0', 'k', 'a', 'I', 'r', 'Y', 'h', 'Space', 'g', '3', 'H', 'J', 'f', 'd', 'V', 'Q', 'E', 'c', 'O', 'D', 'e', '4', 'x', 'P', '9', 'M', 'Z', 'R', 'y', 'L', 'K', 'j', '6', 'z', 't', 'p', '2', 'N', 'n', 'W', 'w', '8', 'X'], 'W': ['9', 'D', 'F', 'B', 'Space', 'Z', 'W', 'm', '8', 'o', 'Y', 'd', 'H', 'l', 'q', 'i', 'R', 'e', 'T', 'J', 'S', 'E', 'L', 'h', 'I', '7', 't', 'Q', 'N', 'M', 'X', 'f', 'x', 'w', 'y', 'G', '3', 'v', 'C', 'U', 'b', 'p', 'c', '0', 'r', 'z', '6', 'n', 'V', 'j', '4', 'k', 'g', 'a', '2', 's', '1', 'u', 'K', 'O', 'P', 'A', '5'], 'V': ['x', 'A', 'V', 'R', 'j', 'c', 'w', '1', '6', 'G', 'a', 'H', 'Space', 'J', '3', 'X', 't', 'N', 'E', 'k', 'h', 'u', 'r', 'W', 'Z', 's', 'p', 'D', 'C', 'O', '7', 'm', 'e', 'Q', 'b', 'U', 'S', 'P', 'l', 'Y', 'o', 'M', '4', 'I', 'n', '5', 'i', 'L', 'g', 'f', '9', 'd', '0', 'y', '8', 'q', 'v', 'F', 'B', 'K', 'z', 'T', '2'], 'Y': ['e', 'O', 'p', 'N', 'P', 'L', 'c', 'H', 's', 'g', 'S', 'V', 'y', 'w', '1', 'J', 'D', 'W', 'b', 'k', 'h', 'I', 'G', 'q', 'T', 'o', 'u', 'K', 'E', 'n', 'j', 'l', '7', 'v', 'X', 'Y', 'f', 'Space', '5', 'r', '9', '2', 't', '4', 'x', 'Q', 'Z', 'z', 'M', 'i', '6', 'A', 'R', '3', 'd', 'F', 'a', 'U', 'B', 'm', 'C', '0', '8'], 'X': ['k', 'S', 'l', 'E', '0', 'L', 'I', '5', 'Y', 'p', 'O', 'v', 'g', 'U', 's', '9', 'j', '4', 'a', 'q', 'D', 'b', 'C', '1', 'P', 'w', 'y', 'H', 'Q', 'Space', 'h', 'u', 'W', 'f', 'x', 'K', 'R', '7', 'M', 'J', 'A', '3', 'X', 'z', '8', 'e', 'B', '6', 'r', 'G', 'T', 'i', 'F', 'c', '2', 'N', 't', 'm', 'Z', 'n', 'V', 'd', 'o'], 'Z': ['j', '9', 'O', 'X', 'l', 'Y', 'p', '8', 'y', 'I', 'C', 'A', 'G', 'T', 'v', 'D', 'S', 'w', 'f', 'Space', 'R', 'V', 'k', 'd', 'u', '4', 'o', 'K', 'm', '5', 'q', 'Q', '2', '3', 'z', 'a', 's', 'F', 'c', 'x', 'W', 'B', 'i', 'Z', 'g', 't', 'E', '0', 'N', 'M', 'h', '7', '1', 'r', 'U', 'L', 'H', 'n', 'b', 'P', '6', 'e', 'J'], 'a': ['8', 'x', '1', 'c', 'r', 'y', 'd', '9', 'C', 'u', '0', 'p', 'J', '5', 'D', 'K', 'A', 'F', 'e', '6', 'H', 't', 'P', 'O', 'v', 'L', 'G', 'l', 'f', 'o', 'T', 'N', 'j', 'n', '3', 'z', 'S', 'Space', 'Z', 'I', '2', 'g', 'V', '4', 'k', 's', 'a', 'R', 'B', 'w', 'q', 'i', 'b', 'E', 'U', 'Y', '7', 'X', 'm', 'Q', 'W', 'M', 'h'], 'c': ['N', 'K', 't', 'j', 'J', '7', 'r', 'A', 'C', 'S', 'Z', 'a', 'G', 'i', 'D', 'm', 'v', 'M', 'c', 'l', 'n', 'x', 'q', '5', 'e', '2', '4', 'w', 'h', 'V', '8', 'z', 'g', '0', '9', 's', 'u', 'k', 'o', 'L', 'E', 'b', '3', 'R', 'f', 'd', '1', 'H', 'O', 'U', 'T', '6', 'P', 'Q', 'X', 'Y', 'W', 'Space', 'y', 'p', 'I', 'B', 'F'], 'b': ['L', 'Y', 'i', 'y', 'w', 'E', 'X', 'a', '7', 'u', 'c', 'B', 'v', 'N', 'r', 'Z', 'f', 'C', '1', 'W', 'b', 'T', 'q', 'Q', 'P', 'g', 'j', '2', '9', 'O', '6', 'H', 'e', 'V', '4', 'n', 'l', 'z', 'p', 'd', 'h', 'D', 'S', 'Space', 'x', 'm', 'M', '3', 'G', '5', 'F', '8', 'K', 'U', '0', 'A', 'J', 't', 's', 'o', 'R', 'I', 'k'], 'e': ['Z', 'k', 'l', '9', 'M', '4', 'y', 'U', 'a', 'Y', '1', 'A', 'g', '3', 'C', 'W', 'B', 's', 'd', '0', 'H', 'D', 'b', 'S', 'N', 'L', 'J', '8', 'j', 'Space', 'P', 'f', 'K', 'c', 'h', 'Q', 'v', 'z', 'i', 'G', '7', 'F', '6', 'p', 'n', 'r', 'e', 'I', 'R', 'V', 'T', 'w', 'q', 'E', 'm', 'X', 't', 'u', 'O', 'o', 'x', '5', '2'], 'd': ['7', 'N', 'k', 'Z', 'w', 'l', 'X', 'e', 'H', '5', 'a', 'I', 'v', 'm', 'n', 'D', 'O', 'g', '6', '4', 'V', 'B', 'b', 'G', 't', 'F', 'u', 'U', '1', 'd', 'z', 'Space', 'T', 'y', 'S', 'j', 'q', 'r', 'Q', 's', 'x', '9', 'C', '8', 'A', 'h', 'o', 'L', 'i', 'E', 'J', '3', 'c', 'R', 'Y', '0', 'K', 'p', 'M', 'f', 'P', 'W', '2'], 'g': ['E', 'i', 'a', 's', 'e', 'J', 'g', '3', 'Z', 'R', 'c', 'u', 'O', '5', 'v', 'T', 'b', 'B', 'L', 'F', 'q', 'x', 'Space', 'W', 'n', 'H', '9', 'D', 'V', '6', 'm', 'j', '7', 'l', 'A', 'U', 'h', '8', 'k', 'w', 'S', 'K', 't', '1', 'Y', '4', 'G', 'M', 'X', '0', 'z', 'f', 'r', 'y', 'C', 'P', 'N', 'o', 'Q', 'I', 'p', 'd', '2'], 'f': ['I', 'N', 'O', 'a', '6', 'b', 'j', 'Z', '0', 'e', '8', 'A', 'C', 'Q', 'F', 'H', '9', '5', '1', 'U', 'k', 'T', 'K', 'h', 'L', 's', '2', 'l', '3', 'B', 'q', 'r', 'c', 'J', 'g', 'i', 'S', 'd', 'v', 'G', 'Y', 'n', 'x', 'V', 'M', 'D', 'R', 'z', '7', 'p', 'X', 'Space', 'P', 'y', 'u', 'f', 'w', 'm', 'W', 't', '4', 'o', 'E'], 'i': ['5', 'B', 'S', 'Y', 'q', 't', 'o', '9', '0', 'm', 'l', 'z', 'i', 'V', 'W', '6', 'D', 'r', '4', 'T', 'G', 'e', 'y', 'P', 'A', 'u', 's', 'L', 'k', 'Z', '7', 'R', 'J', 'h', '3', '2', 'd', 'X', 'j', 'b', '1', 'M', 'v', 'Q', 'O', 'U', 'Space', 'E', 'I', 'g', 'c', 'x', 'n', 'C', 'H', 'K', 'f', 'w', 'a', 'F', '8', 'p', 'N'], 'h': ['C', 'i', 'q', '1', 'n', 'a', 'P', 'p', '7', 'e', 'E', 'k', 'h', 'N', '5', 'm', 'B', 'Y', '2', 't', 'b', 'l', 'w', 'D', 'V', 'X', 'R', 'o', 'F', 'J', 'I', '8', 'H', 'K', 'z', 'r', 'U', 'O', '3', 'x', 'Space', 'j', 'v', 'S', 'A', '6', '9', 'c', 'M', 'T', 'G', 'Q', 's', 'd', 'W', 'y', 'f', 'Z', 'u', 'L', 'g', '0', '4'], 'k': ['A', 'r', 'h', 'c', 'm', 'F', 'f', 'v', 'G', 'k', 'i', 'E', 'l', 'X', 'j', 'Q', '5', 'p', 'b', 'T', 'q', 'w', 'e', 'o', 'D', 'Y', '3', 'd', 'W', 'Space', 'C', 'U', '1', 'g', '0', 'Z', 'M', '8', 'u', 'S', 'I', 'O', '6', 't', '9', 'y', 'R', 'J', '4', 'L', 'V', 'N', 's', 'a', 'z', 'B', 'P', 'H', 'K', 'n', '2', '7', 'x'], 'j': ['s', 'g', 'U', '5', 'M', 'n', '3', 'F', 'm', 'E', 'v', 'a', 'J', 'b', 'S', 'd', '7', 'e', 'H', 'u', 't', 'B', 'Space', 'I', 'T', 'k', 'K', 'N', 'V', 'q', '0', 'X', 'y', 'p', 'f', 'D', 'h', 'Q', '4', 'i', 'w', 'G', 'O', 'P', '6', 'R', 'C', 'c', 'L', 'Z', 'z', 'r', 'j', 'A', 'l', '1', '2', 'W', 'o', 'x', '8', 'Y', '9'], 'm': ['a', 't', 'J', '3', 'N', 'l', '6', 'e', 'Space', 'Q', 'D', 'I', 'P', 'd', 'u', '7', 'A', 'X', 'q', '9', 'g', 'T', 'n', '8', 'L', 'Y', 'Z', 'O', 'j', 'h', '0', 'b', 'M', 's', 'z', '2', 'F', 'E', 'v', 'y', 'i', 'm', '5', 'x', '1', 'r', 'H', 'k', 'G', 'p', 'W', 'o', 'K', 'w', 'B', 'R', '4', 'C', 'S', 'U', 'f', 'c', 'V'], 'l': ['Space', 'V', '7', 'Z', 'P', 'O', 'f', 'N', 'F', 'A', 't', 'k', 'o', 'X', 'i', '1', 'K', 'l', '6', 'J', 'n', 'h', 'q', 'Y', 'Q', 'r', 'H', '4', 'v', '2', 'w', 'b', 'y', 'G', '0', 'B', 'L', 'x', '5', 'z', 'j', 'T', 'e', 'u', 'g', 'U', '9', 'C', 'a', 's', 'M', 'p', 'm', 'W', '3', 'c', 'R', 'D', '8', 'E', 'd', 'I', 'S'], 'o': ['0', 'j', 'g', 'J', 'Q', 'T', 'B', 'm', 'E', 't', 'Z', 'Space', 'V', 'y', 'p', '2', 'S', 'A', 'C', 'D', 'r', 'H', 'N', 'X', 'L', 'i', 'k', 'h', '6', 'W', 'w', 'M', 'v', '5', 'K', 'e', '9', '4', 'b', 'O', 'F', 'x', 'u', 'l', 'o', 'd', 'Y', 'n', 'G', 'c', 'q', 'U', 'z', 'f', '1', 's', '8', '7', 'P', 'I', 'a', '3', 'R'], 'n': ['z', 'j', 'm', 'd', 'h', 'a', '5', 'D', 'r', 'o', '7', 'e', 'Z', 'M', 'P', 'L', 'Space', 'w', 'H', 'Y', 'J', 'b', 'n', 'p', '3', 's', 'U', 'B', '9', 'F', 'O', 'q', 'i', 'c', 'I', 'G', 'K', 'f', 'u', '8', '1', '4', 'y', 'W', 'S', 'R', 'X', 'V', 'k', 'A', '6', '2', 'Q', '0', 'l', 'E', 'T', 'g', 'x', 'v', 'N', 't', 'C'], 'q': ['J', 'W', 'f', 'r', 'q', 'V', 'v', 'Space', 'o', 'R', 'U', 'C', 'P', 'F', 'T', '7', 'G', 'O', 'e', 'p', 'A', 'L', 'x', 'Z', 'j', 'a', 'd', 'K', 'B', 'Q', 'N', 'm', 'S', 'y', 'b', 'i', 'X', 'h', '1', '0', 'I', 'D', 's', 'H', 'w', 'k', 'z', '6', '5', '2', 'c', 'n', 'M', 'u', '9', 'l', '8', 'E', 'g', '3', '4', 't', 'Y'], 'p': ['9', 'K', 's', 'S', 'n', '0', 'k', 'u', 'Q', 'M', 'Z', 'h', 'x', 'T', 'm', 'Space', 'N', 'r', 'D', 'z', 'g', 'X', 'U', 'b', 'd', '1', 'e', 'G', 'V', 'p', 'O', 'w', '2', 'B', 'J', 'H', 'I', 'F', 'i', '7', 'o', '8', '5', '4', 'c', 'W', 'C', 'E', 'a', 'L', 'q', 'P', 'R', 'y', 'j', 't', '6', 'A', 'f', '3', 'l', 'Y', 'v'], 's': ['9', 'O', '1', 'Z', '3', 'N', 'd', 'Space', 'D', '7', 'n', 'X', 'b', 'T', '5', 'C', 'x', 'v', 'l', 'Y', 'f', 'M', '6', 'P', 'F', 'y', 'K', 't', 'A', 'h', 'c', 'm', 'g', '4', 'L', '8', 'p', 's', 'S', 'V', 'Q', 'r', 'w', 'U', 'q', 'E', 'H', 'a', 'J', 'I', 'u', '2', 'z', 'o', 'B', 'i', 'R', 'e', 'j', '0', 'k', 'G', 'W'], 'r': ['Z', 'B', 'U', '8', 'o', '5', '1', 'y', '9', '6', 'V', '4', 'p', 'j', 'e', 'z', 'L', '2', 'A', 'J', 'x', 'S', 'X', '3', 'I', 'k', 'w', 'W', 'v', 'C', 'u', 'K', 'r', 't', 'T', 'c', 'E', 'R', 'D', 'd', 'G', 'l', 'H', 'Y', 'Q', 'F', 'm', '0', 'n', 'i', 's', 'O', 'h', 'Space', 'q', 'a', 'P', 'b', '7', 'N', 'g', 'M', 'f'], 'u': ['7', 'u', 'n', 'L', 'P', 'c', 'K', 'C', 'z', 'p', 'k', 'R', 'j', 'b', 'Space', '3', 'D', 'g', 'V', 'S', 'W', 'X', 'T', '8', '5', 'm', 'U', 'e', 'l', 'Q', '9', 'M', 'I', 'o', 'h', 'q', 'G', 'F', 'y', 'E', 'f', '0', 'Z', '4', 'Y', 'N', 's', 'x', 'B', '6', 'A', 'a', '1', '2', 'r', 't', 'v', 'd', 'O', 'i', 'H', 'w', 'J'], 't': ['J', 'u', 'B', 'f', '2', 'b', 'c', 't', 'W', 'L', 'q', 'H', '4', 'A', 'y', 'N', 'x', 'U', 'E', 'P', 'w', '0', 'a', 'G', 'j', 'o', 'h', '7', 'd', '9', 'K', '1', 'X', 'Q', 'Y', 'S', 'm', 'V', 'F', 'O', 'M', 'v', 'l', 'D', '6', 'k', 'C', 'n', '3', 'g', 'Z', 'r', 'T', 'e', 's', 'i', 'p', 'Space', 'R', '8', '5', 'I', 'z'], 'w': ['3', 'e', 'U', 'W', 'u', 'H', '2', '8', 'D', 'C', '6', 'j', 'k', 'O', 'M', 'E', 'X', 'Space', 'P', 'o', 'v', 'l', 'N', 'x', 'r', 'y', 'c', 'q', '0', 'G', 't', '1', 'd', 'T', 'Q', 'm', '7', '9', '4', 'V', 'A', 'n', 'p', '5', 'R', 'L', 'b', 'w', 'F', 'K', 'a', 'Z', 'I', 'Y', 'S', 'f', 'B', 'z', 'J', 'h', 's', 'g', 'i'], 'v': ['P', 'Space', 'A', 'l', 's', 'o', 'f', 'Y', 'M', 'n', 'b', 'm', 'v', '8', 'd', '3', 'T', '9', 'N', 'x', 'O', 'S', 'J', 'R', 'q', 'r', '6', 'F', 'p', 'k', 'H', '4', 'h', 't', 'G', 'W', '1', '2', 'j', 'z', 'V', 'e', 'u', 'C', 'X', 'a', 'g', 'I', 'K', 'y', '5', 'Z', 'i', 'E', 'c', 'B', 'L', 'w', '7', 'Q', '0', 'U', 'D'], 'y': ['k', 'u', 'a', 'H', 'J', 's', 'm', '5', 'p', 'g', 'Z', 'P', 'G', 'l', 'v', 'd', '0', 'W', 'B', '4', 'Y', 'z', '1', 'q', 'c', 'x', 'h', 'K', 'j', 'F', 'R', 'Space', 'U', 'r', 'n', 'N', 'w', 'b', 'C', 'y', '9', 'D', '7', '2', 'L', 'T', 'Q', 'i', 'o', '6', 'S', '3', 'f', 'X', 'O', 'V', 't', 'A', 'I', 'M', 'e', '8', 'E'], 'x': ['z', 'n', 'V', 'Space', 'y', 'Z', 'M', 'm', 'D', 'c', 'r', 's', 'J', 'v', '4', 'e', '7', 'W', '9', 'X', 'C', '6', 'U', 'G', 'o', 'i', 'f', 'u', 'N', 'k', 'B', 'b', 'K', 'E', 'w', 'h', 'H', 'Y', 'T', 'L', 'R', 'p', 'g', 'S', 'x', '0', 'j', 'I', '8', 'Q', '2', '3', '1', 'P', 'l', 'O', 'q', 't', 'd', 'F', 'a', 'A', '5'], 'z': ['w', 'J', 's', 't', 'I', 'r', 'N', 'i', 'Space', 'O', 'V', 'M', 'T', 'g', 'A', 'j', 'c', 'H', '9', 'e', '0', 'h', 'p', 'o', 'S', 'K', '4', 'f', '6', 'P', '2', 'R', '7', 'F', 'l', '8', 'L', 'Z', 'n', 'Q', 'u', 'E', 'z', 'q', 'G', '3', 'a', 'X', 'v', '5', 'Y', 'x', 'C', 'm', 'd', 'k', 'W', '1', 'y', 'B', 'D', 'b', 'U']}
&gt;&gt;&gt; len(res)
63
&gt;&gt;&gt; all(len(v) == 63 for v in res.values())
True
</snippet></ROW><ROW><id>20197878</id><snippet>custom.js</snippet></ROW><ROW><id>20197878</id><snippet>IPython.Cell.options_default.cm_config.lineNumbers = true;</snippet></ROW><ROW><id>20197878</id><snippet>$(ipython locate profile)/static/custom/custom.js</snippet></ROW><ROW><id>20197878</id><snippet>custom.js</snippet></ROW><ROW><id>20197878</id><snippet>site-packages/IPython/html/static/custom/</snippet></ROW><ROW><id>20198369</id><snippet>extra</snippet></ROW><ROW><id>20198369</id><snippet>Example.objects.extra(select={'value': 'column1 + column2 + column3'})
</snippet></ROW><ROW><id>20198369</id><snippet>where</snippet></ROW><ROW><id>20198369</id><snippet>Example.objects.extra(select={'value': 'column1 + column2 + column3'},
                      where=['(column1 + column2 + column3) &gt;= %s'],
                      params=[100])
</snippet></ROW><ROW><id>20198412</id><snippet>self.data_weights[index] = ...
</snippet></ROW><ROW><id>20198412</id><snippet>w</snippet></ROW><ROW><id>20198412</id><snippet>w *= ...
</snippet></ROW><ROW><id>20198412</id><snippet>data_weights</snippet></ROW><ROW><id>20198412</id><snippet>data_weights</snippet></ROW><ROW><id>20198664</id><snippet>(key, value)</snippet></ROW><ROW><id>20198664</id><snippet>items()</snippet></ROW><ROW><id>20198664</id><snippet>iteritems()</snippet></ROW><ROW><id>20198690</id><snippet>listen</snippet></ROW><ROW><id>20198690</id><snippet>accept</snippet></ROW><ROW><id>20198690</id><snippet>gethostbyaddr</snippet></ROW><ROW><id>20198690</id><snippet>if (port == ECHO_PORT_TCP)
{
    if (listen(echo_socket, ECHO_PORT_TCP) == -1)
    {
        perror("listen");
        exit(1);
    }

    while (1)
    {
        clientlen = sizeof(client);

        echo_socket_child = accept(echo_socket, (struct sockaddr *) &amp;client, &amp;clientlen);

        if (echo_socket_child &lt; 0)
        {
              perror("accept"); 
              break; 
        }

        // gethostbyaddr: determine who sent the message
        hostp = gethostbyaddr((const char *) &amp;client.sin_addr.s_addr, sizeof(client.sin_addr.s_addr), AF_INET);

        if (hostp == NULL)
        {   herror("byaddr"); 
            break;
        }

        hostaddrp = inet_ntoa(client.sin_addr);

        if (hostaddrp == NULL)
        {
            printf("ERROR on inet_ntoa\n");
            break;
        }

        printf("server established connection with %s (%s)\n", hostp-&gt;h_name, hostaddrp);

        bzero(buffer, BUFFER_SIZE);
        msg_byte_size = read(echo_socket_child, buffer, BUFFER_SIZE);

        if (msg_byte_size &lt; 0)
        {
            printf("ERROR reading from socket");
            break;
        }

        printf("server received %d bytes: %s", msg_byte_size, buffer);

        msg_byte_size = write(echo_socket_child, buffer, strlen(buffer));

        if (msg_byte_size &lt; 0)
        {
            printf("ERROR writing to socket");
            break;
        }

        close(echo_socket_child);

    } // endof while(1)

    return -1;
}
</snippet></ROW><ROW><id>20198717</id><snippet>self.tc_all = []
for child in self.inputsizer.GetChildren():
    self.tc_all.append(child.GetWindow().GetValue())

self.tc_all = sorted(self.tc_all)

for child,item in zip(self.inputsizer.GetChildren(),self.tc_all):
    child.GetWindow().SetValue(item)

self.inputsizer.Layout()  
</snippet></ROW><ROW><id>20198717</id><snippet>GetChildren()</snippet></ROW><ROW><id>20198717</id><snippet>GetWindow()</snippet></ROW><ROW><id>20198717</id><snippet>GetWindow()</snippet></ROW><ROW><id>20198717</id><snippet>TextCtrl</snippet></ROW><ROW><id>20198717</id><snippet>GetChildren()</snippet></ROW><ROW><id>20198717</id><snippet>SetValue()</snippet></ROW><ROW><id>20198717</id><snippet>StaticText</snippet></ROW><ROW><id>20198981</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>20198981</id><snippet>from itertools import groupby
from operator import itemgetter

[f(list(g)) for k, g in groupby(data, key=itemgetter(0))]
</snippet></ROW><ROW><id>20198981</id><snippet>itemgetter(0)</snippet></ROW><ROW><id>20198981</id><snippet>groupby()</snippet></ROW><ROW><id>20198981</id><snippet>g</snippet></ROW><ROW><id>20198981</id><snippet>'A'</snippet></ROW><ROW><id>20198981</id><snippet>'B'</snippet></ROW><ROW><id>20199068</id><snippet>std::vector&lt;unsigned&gt; p2;
unsigned m = 1;
while ( m != 0 ) {
    if ( (m &amp; i) != 0 ) {
        p2.push_back( m );
    }
    m &lt;&lt;= 1;
}
</snippet></ROW><ROW><id>20199068</id><snippet>pow</snippet></ROW><ROW><id>20199068</id><snippet>std::vector&lt;unsigned&gt; p2;
std::cout &lt;&lt; i &lt;&lt; ": ";
while ( i != 0 ) {
    unsigned n = i &amp; i - 1;
    p2.push_back( i ^ n );
    i = n;
}
</snippet></ROW><ROW><id>20199108</id><snippet>-c</snippet></ROW><ROW><id>20199213</id><snippet>json.loads</snippet></ROW><ROW><id>20199213</id><snippet>json.load</snippet></ROW><ROW><id>20199350</id><snippet>output = {}
for key in d1.keys():
    output[key] = {}
    lst = d1[key]
    for name, count in (lst[i:i+2] for i in range(0, len(lst), 2)):
        output[key][name] = (int(count),)
for key in d2.keys():
    if key not in output:
        output[key] = {}
    lst = d2[key]
    for name, count in (lst[i:i+2] for i in range(0, len(lst), 2)):
        if name in output[key].keys():
            output[key][name] += (int(count),)
        else:
            output[key][name] = (int(count),) 
</snippet></ROW><ROW><id>20199350</id><snippet>d = {k: {a: int(b) for a, b in (v[i:i+2] for i in range(0, len(v), 2))} 
     for k, v in d.items()}
</snippet></ROW><ROW><id>20199350</id><snippet>{'mammals': {'cat': 4, 'cow': 5, 'dog': 3, 'beaver': 3, 'horse': 4}, 
 'bird': {'goose': 8, 'duck': 6, 'eagle': 8, 'bluejay': 9, 'robin': 7, 'cardinal': 5}}
</snippet></ROW><ROW><id>20199350</id><snippet>output = {k1: {k2: (d1.get(k1, {}).get(k2), d2.get(k1, {}).get(k2)) 
          for k2 in set(list(d1.get(k1, {}).keys()) + list(d2.get(k1, {}).keys()))} 
          for k1 in set(list(d1.keys()) + list(d2.keys()))}
</snippet></ROW><ROW><id>20199350</id><snippet>d1['reptiles'] = {'lizard': 10}</snippet></ROW><ROW><id>20199421</id><snippet>,</snippet></ROW><ROW><id>20199421</id><snippet>import csv
def solve(row):
    for item in row:
        spl = item.split(None, 1)
        if len(spl) &gt; 1:
            yield spl[0]
            yield spl[1]           
        else:
            yield spl[0]
...             
with open('abc1') as f:
    reader = csv.reader(f, delimiter=',')
    for row in reader:      
        print list(solve(row))
...         
['Name', 'Gender', 'Age', 'John Smith', 'M', '23', 'Ashley Jones', 'F', '18', 'James Smith Johns', 'M', '20']
</snippet></ROW><ROW><id>20199607</id><snippet>visible</snippet></ROW><ROW><id>20199607</id><snippet>add_attribute</snippet></ROW><ROW><id>20199607</id><snippet>self.column1.add_attribute( self.renderer1, "visible", 2)
</snippet></ROW><ROW><id>20199607</id><snippet>gtk.TreeViewColumn</snippet></ROW><ROW><id>20199607</id><snippet>import gtk, gobject

tree_store = gtk.TreeStore(gobject.TYPE_STRING,
                           gobject.TYPE_BOOLEAN,
                           gobject.TYPE_BOOLEAN )
root = tree_store.append(None, ("Computer 1", False, False))
tree_store.append(root, ("C drive", False, True))
tree_store.append(root, ("D drive", True, True))

view = gtk.TreeView(tree_store)
renderer1 = gtk.CellRendererText()
renderer2 = gtk.CellRendererToggle()

view.append_column(gtk.TreeViewColumn("Computer Name",
                                      renderer1, text=0))
view.append_column(gtk.TreeViewColumn("Select Drive",
                                      renderer2, active=1, visible=2))
w = gtk.Window()
w.add(view)
w.show_all()
gtk.main()
</snippet></ROW><ROW><id>20199702</id><snippet>cursor.execute("insert into products(id, name) values ('pyodbc', 'awesome library')")
cnxn.commit()
</snippet></ROW><ROW><id>20199702</id><snippet>cursor.execute("insert into products(id, name) values (?, ?)", 'pyodbc', 'awesome library')
cnxn.commit()
</snippet></ROW><ROW><id>20199798</id><snippet>&gt;&gt;&gt; df[df.groupby(level=0).transform(len)['type'] &gt; 1]
                   type
genome_location1   MIR3
genome_location1  AluJb
</snippet></ROW><ROW><id>20199844</id><snippet>end</snippet></ROW><ROW><id>20199844</id><snippet>start</snippet></ROW><ROW><id>20199893</id><snippet>import time

nSeconds = 11
t0 = time.clock()
dt = 0
enemyCount = 0

# the following would be in an appropriate
# place in the main game loop
if dt &lt; nSeconds:
    t1 = time.clock()
    dt = t1 - t0
else:
    enemyInstance = Enemy()
    enemyCount += 1
    t0 = time.clock()
    dt = 0
</snippet></ROW><ROW><id>20200084</id><snippet>0</snippet></ROW><ROW><id>20200084</id><snippet>ord(lett) - 96</snippet></ROW><ROW><id>20200084</id><snippet>0 if lett == ' ' else ord(lett) - 96
</snippet></ROW><ROW><id>20200084</id><snippet>lettconv = [0 if lett == ' ' else ord(lett) - 96 for lett in msg]
</snippet></ROW><ROW><id>20200100</id><snippet>filter()</snippet></ROW><ROW><id>20200100</id><snippet>Table.query.filter("name ~ 'foo'")
</snippet></ROW><ROW><id>20200100</id><snippet>text()</snippet></ROW><ROW><id>20200100</id><snippet>params()</snippet></ROW><ROW><id>20200100</id><snippet>from sqlalchemy.sql import text

Table.query.filter(text('name ~ :reg')).params(reg='foo')
</snippet></ROW><ROW><id>20200100</id><snippet>text()</snippet></ROW><ROW><id>20200100</id><snippet>params()</snippet></ROW><ROW><id>20200118</id><snippet>&gt;&gt;&gt;unixTS = 978307200 
&gt;&gt;&gt;date = str(datetime.datetime.fromtimestamp(unixTS + iphoneTS))  
</snippet></ROW><ROW><id>20200149</id><snippet>p</snippet></ROW><ROW><id>20200149</id><snippet>h1</snippet></ROW><ROW><id>20200149</id><snippet>&gt;&gt;&gt; htmls
'\n&lt;div class="main-content"&gt;\n&lt;h1 class="student"&gt;\n    &lt;p&gt;Name: &lt;br /&gt;\n    Alex&lt;/p&gt;\n    &lt;p&gt; &lt;/p&gt;\n&lt;/h1&gt;\n&lt;/div&gt;\n&lt;div class="department"&gt;\n... more text\n&lt;/div&gt;\n'
&gt;&gt;&gt; soup = BeautifulSoup(htmls)
&gt;&gt;&gt; soup

&lt;div class="main-content"&gt;
&lt;h1 class="student"&gt;
&lt;/h1&gt;&lt;p&gt;Name: &lt;br /&gt;
    Alex&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;

&lt;/div&gt;
&lt;div class="department"&gt;
... more text
&lt;/div&gt;
</snippet></ROW><ROW><id>20200149</id><snippet>p</snippet></ROW><ROW><id>20200149</id><snippet>h1</snippet></ROW><ROW><id>20200149</id><snippet>&gt;&gt;&gt; htmls = '''
... &lt;div class="main-content"&gt;
... &lt;h1 class="student"&gt;
...     &lt;span&gt;Name: &lt;br /&gt;
...     Alex&lt;/span&gt;
...     &lt;span&gt; &lt;/span&gt;
... &lt;/h1&gt;
... &lt;/div&gt;
... &lt;div class="department"&gt;
... ... more text
... &lt;/div&gt;
... '''
&gt;&gt;&gt; 
&gt;&gt;&gt; htmls.contents
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'str' object has no attribute 'contents'
&gt;&gt;&gt; soup = BeautifulSoup(htmls)
&gt;&gt;&gt; h1 = soup.find("h1", {"class": "student"})
&gt;&gt;&gt; 
&gt;&gt;&gt; h1
&lt;h1 class="student"&gt;
&lt;span&gt;Name: &lt;br /&gt;
    Alex&lt;/span&gt;
&lt;span&gt; &lt;/span&gt;
&lt;/h1&gt;
</snippet></ROW><ROW><id>20200149</id><snippet>p</snippet></ROW><ROW><id>20200149</id><snippet>block level elements</snippet></ROW><ROW><id>20200233</id><snippet>SELECT node1.user_id, node2.user_id, COUNT(item_id)
FROM yourtable AS node1
JOIN yourtable AS node2 ON
    (node1.user_id &lt;&gt; node2.user_id) AND (node1.item_id = node2.item_id)
GROUP BY node1.user_id, node2.user_id
</snippet></ROW><ROW><id>20200249</id><snippet>place</snippet></ROW><ROW><id>20200249</id><snippet>import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent)
        self.text = tk.Text(self, wrap="word")
        self.vsb = tk.Scrollbar(self, orient="vertical", command=self.text.yview)
        self.text.configure(yscrollcommand=self.text_yview)
        self.vsb.pack(side="right", fill="y")
        self.text.pack(side="left", fill="both", expand=True)

        # create an info window in the bottom right corner and
        # inset a couple of pixels
        self.info = tk.Label(self.text, width=20, borderwidth=1, relief="solid")
        self.info.place(relx=1.0, rely=1.0, x=-2, y=-2,anchor="se")

    def text_yview(self, *args):
        ''' 
        This gets called whenever the yview changes.  For this example
        we'll update the label to show the line number of the first
        visible row. 
        '''
        # first, update the scrollbar to reflect the state of the widget
        self.vsb.set(*args)

        # get index of first visible line, and put that in the label
        index = self.text.index("@0,0")
        self.info.configure(text=index)

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>20200273</id><snippet>john kennedy</snippet></ROW><ROW><id>20200273</id><snippet>from django.db.models import Q
queryset1 = MyModel.objects.filter(name='john kennedy')
queryset2 = MyModel.objects.filter(~Q(name='john kennedy'))
queryset =  queryset1 | queryset2
</snippet></ROW><ROW><id>20200300</id><snippet>def myAge(currentyear):
    if currentyear == 1986: #Base case, does not lead to recursion.
        return 0
    else:                   #Leads to recursion
        return 1+myAge(currentyear-1)
</snippet></ROW><ROW><id>20200300</id><snippet>def recursiveUrl(url,depth):

    if depth == 5:
        return url
    else:
        page=urllib2.urlopen(url)
        soup = BeautifulSoup(page.read())
        newlink = soup.find('a') #find just the first one
        if len(newlink) == 0:
            return url
        else:
            return url, recursiveUrl(newlink,depth+1)


def getLinks(url):
    page=urllib2.urlopen(url)
    soup = BeautifulSoup(page.read())
    links = soup.find_all('a', {'class':'institution'})
    for link in links:
        links.append(recursiveUrl(link,0))
    return links
</snippet></ROW><ROW><id>20200407</id><snippet>n</snippet></ROW><ROW><id>20200407</id><snippet>data = numpy.loadtxt(yourFileName,skiprows=n)
</snippet></ROW><ROW><id>20200407</id><snippet>data = numpy.genfromtxt(yourFileName,skiprows=n)    
</snippet></ROW><ROW><id>20200407</id><snippet>open</snippet></ROW><ROW><id>20200407</id><snippet>fh = open(yourFileName,'r')
for i,line in enumerate(fh):
    if i is n: break
    do_other_stuff_to_header(line)
fh.close()
</snippet></ROW><ROW><id>20200561</id><snippet>find(...)
  S.find(sub [,start [,end]]) -&gt; int

  Return the lowest index in S where substring sub is found,
  such that sub is contained within S[start:end].  Optional
  arguments start and end are interpreted as in slice notation.

  Return -1 on failure.
</snippet></ROW><ROW><id>20200561</id><snippet>contents_of_tunnel</snippet></ROW><ROW><id>20200561</id><snippet>True</snippet></ROW><ROW><id>20200561</id><snippet>if contents_of_tunnel.find("no delay") != -1:
</snippet></ROW><ROW><id>20200561</id><snippet>if "no delay" in contents_of_tunnel:
</snippet></ROW><ROW><id>20200561</id><snippet>try:
    index = contents_of_tunnel.index("no delay")
    # substring found
except ValueError:
    # substring not found        
</snippet></ROW><ROW><id>20200631</id><snippet># Only iterate through the first 200 followers
for follower in Cursor(api.followers).limit(200):
     follower_ids.append(follower.id)
</snippet></ROW><ROW><id>20200700</id><snippet>import csv

with open('csv_data.csv') as csv_data:
    reader = csv.reader(csv_data)

    # eliminate blank rows if they exist
    rows = [row for row in reader if row]
    headings = rows[0] # get headings

    person_info = {}
    for row in rows[1:]:
        # append the dataitem to the end of the dictionary entry
        # set the default value of [] if this key has not been seen
        for col_header, data_column in zip(headings, row):
            person_info.setdefault(col_header, []).append(data_column)

    print person_info
</snippet></ROW><ROW><id>20200778</id><snippet>def upper_bit(x):
    while x &amp; (x - 1):
        x &amp;= x - 1
    return x
</snippet></ROW><ROW><id>20200778</id><snippet>def mask_off(x, mask):
    return x &amp; ~mask

&gt;&gt;&gt; mask_off(6, upper_bit(6))
2
</snippet></ROW><ROW><id>20201101</id><snippet>def isClassVar(self,varname):
        return hasattr(self.__class__,varname)
...
vec.isClassVar("Zero")
</snippet></ROW><ROW><id>20201117</id><snippet>item = soup.find("a", {"title":"Open in Google Play"})
</snippet></ROW><ROW><id>20201117</id><snippet>import urllib2</snippet></ROW><ROW><id>20201117</id><snippet>soup = BeautifulSoup(urllib2.urlopen(urllib2.Request(sampleURL, None, {"User-Agent":"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:25.0) Gecko/20100101 Firefox/25.0"})).read())
item = soup.find("a", {"title":"Open in Google Play"}) 
print item
</snippet></ROW><ROW><id>20201117</id><snippet>"".join(pageHtml)</snippet></ROW><ROW><id>20201121</id><snippet>Content-type: text/html
</snippet></ROW><ROW><id>20201121</id><snippet>#!/usr/bin/env python

import cgi
import json
import sys

new_data = {"2": {"title": "what", "date": "tomorrow"}}

# print "Content-type: application/json\r\n\r\n" to the output stream
sys.stdout.write("Content-type: application/json\r\n\r\n") # read the comment

with open("jobs.json") as file:
    data = json.load(file)

data.update(new_data)

with open('test.json', 'w') as file:
    json.dump(data, file)
</snippet></ROW><ROW><id>20201219</id><snippet>%APPDATA%\Enthought\Canopy
</snippet></ROW><ROW><id>20201219</id><snippet>~/.canopy
</snippet></ROW><ROW><id>20201519</id><snippet>b</snippet></ROW><ROW><id>20201519</id><snippet>pkg/b</snippet></ROW><ROW><id>20201519</id><snippet>sys.path</snippet></ROW><ROW><id>20201519</id><snippet>/home/f.j/test/pkg</snippet></ROW><ROW><id>20201519</id><snippet>c</snippet></ROW><ROW><id>20201519</id><snippet>b</snippet></ROW><ROW><id>20201519</id><snippet>c</snippet></ROW><ROW><id>20201519</id><snippet>pkg.b</snippet></ROW><ROW><id>20201519</id><snippet>c</snippet></ROW><ROW><id>20201519</id><snippet>pkg.c</snippet></ROW><ROW><id>20201519</id><snippet>pkg.b</snippet></ROW><ROW><id>20201519</id><snippet>b = imp.load_source('pkg.b', os.path.dirname(__file__) + '/b.py')
</snippet></ROW><ROW><id>20201593</id><snippet>reversed()</snippet></ROW><ROW><id>20201593</id><snippet>[::-1]</snippet></ROW><ROW><id>20201593</id><snippet>&gt;&gt;&gt; myList = ['L', 'H', 'V', 'M']
&gt;&gt;&gt; ''.join(reversed(myList))
'MVHL'
&gt;&gt;&gt; ''.join(myList[::-1])
'MVHL'
</snippet></ROW><ROW><id>20201593</id><snippet>str.join()</snippet></ROW><ROW><id>20201593</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit("''.join(reversed(myList))", 'from __main__ import myList')
1.4639930725097656
&gt;&gt;&gt; timeit.timeit("''.join(myList[::-1])", 'from __main__ import myList')
0.4923250675201416
</snippet></ROW><ROW><id>20201593</id><snippet>str.join()</snippet></ROW><ROW><id>20201593</id><snippet>reversed()</snippet></ROW><ROW><id>20201721</id><snippet>copy</snippet></ROW><ROW><id>20201721</id><snippet>import copy
</snippet></ROW><ROW><id>20201721</id><snippet>Traceback (most recent call last):
  File "test.py", line 56, in &lt;module&gt;
    q4=copy.deepcopy(q3)
NameError: name 'copy' is not defined
</snippet></ROW><ROW><id>20201721</id><snippet>NameError</snippet></ROW><ROW><id>20201721</id><snippet>copy</snippet></ROW><ROW><id>20201783</id><snippet>np.empty</snippet></ROW><ROW><id>20201783</id><snippet>a = np.empty(3, dtype='int')
</snippet></ROW><ROW><id>20201783</id><snippet>np.empty</snippet></ROW><ROW><id>20201783</id><snippet>empty(shape, dtype=float, order='C')
</snippet></ROW><ROW><id>20201845</id><snippet>16.**k</snippet></ROW><ROW><id>20201845</id><snippet>decimal</snippet></ROW><ROW><id>20201845</id><snippet>import decimal
decimal.getcontext().prec = 100
def pi():
    pi = decimal.Decimal(0)
    for k in range(350):
        pi += (decimal.Decimal(4)/(decimal.Decimal(8)*decimal.Decimal(k+1))...)
</snippet></ROW><ROW><id>20201993</id><snippet>args.input</snippet></ROW><ROW><id>20201993</id><snippet>import argparse
parser = argparse.ArgumentParser(description='Get Files')    
parser.add_argument('-i','--input', help='Input file(s)',required=True, nargs='+') 
args = parser.parse_args()
for filename, num in zip(*[iter(args.input)]*2):
    print(filename, num)
    # with open(filename) as f:
    #     ....
</snippet></ROW><ROW><id>20201993</id><snippet>('myfile.txt', '2')
('secondfile.txt', '1')
</snippet></ROW><ROW><id>20202051</id><snippet>csv.reader</snippet></ROW><ROW><id>20202051</id><snippet>'(BIPL)'</snippet></ROW><ROW><id>20202051</id><snippet>csv.reader</snippet></ROW><ROW><id>20202051</id><snippet>import csv
import re

def only_bipl(f):
    for line in f:
        if '(BIPL)' in line:
            yield re.sub(r'\s*\(BIPL\)', '', line)

with open('test.csv', 'rb') as old_csv:
    reader = csv.reader(only_bipl(old_csv), delimiter=',')
    filters = {(row[0].lower(), row[1][:3].upper(), row[2].upper()) for row in reader}
</snippet></ROW><ROW><id>20202051</id><snippet>'(BIPL)'</snippet></ROW><ROW><id>20202051</id><snippet>'(BIPL)'</snippet></ROW><ROW><id>20202051</id><snippet>if-clause</snippet></ROW><ROW><id>20202051</id><snippet>with open('test.csv', 'rb') as old_csv:
    reader = csv.reader(old_csv, delimiter=',')
    filters = {(row[0].lower(), row[1][:3].upper(), row[2][:-6].strip().upper())
               for row in reader
               if row[2].endswith('(BIPL)')} 
</snippet></ROW><ROW><id>20202496</id><snippet>a</snippet></ROW><ROW><id>20202496</id><snippet>b</snippet></ROW><ROW><id>20202496</id><snippet>__cmp__</snippet></ROW><ROW><id>20202496</id><snippet>a &lt; b</snippet></ROW><ROW><id>20202496</id><snippet>a == b</snippet></ROW><ROW><id>20202496</id><snippet>a &gt; b</snippet></ROW><ROW><id>20202496</id><snippet>{1, 2, 3}</snippet></ROW><ROW><id>20202496</id><snippet>{4, 5, 6}</snippet></ROW><ROW><id>20202496</id><snippet>__lt__</snippet></ROW><ROW><id>20202496</id><snippet>@total_ordering</snippet></ROW><ROW><id>20202496</id><snippet>__lt__</snippet></ROW><ROW><id>20202496</id><snippet>__eq__</snippet></ROW><ROW><id>20202496</id><snippet>key</snippet></ROW><ROW><id>20202496</id><snippet>cmp</snippet></ROW><ROW><id>20202496</id><snippet>key</snippet></ROW><ROW><id>20202542</id><snippet>re</snippet></ROW><ROW><id>20202542</id><snippet>group(0)</snippet></ROW><ROW><id>20202542</id><snippet>abc</snippet></ROW><ROW><id>20202542</id><snippet>a</snippet></ROW><ROW><id>20202542</id><snippet>b</snippet></ROW><ROW><id>20202542</id><snippet>c</snippet></ROW><ROW><id>20202542</id><snippet>group(i)</snippet></ROW><ROW><id>20202542</id><snippet>group(1)</snippet></ROW><ROW><id>20202542</id><snippet>c</snippet></ROW><ROW><id>20202542</id><snippet>+</snippet></ROW><ROW><id>20202542</id><snippet>[abc]</snippet></ROW><ROW><id>20202542</id><snippet>+</snippet></ROW><ROW><id>20202542</id><snippet>&gt;&gt;&gt; re.match("([abc])", "abc").groups()
('a',)
&gt;&gt;&gt; re.match("([abc]+)", "abc").groups()
('abc',)
</snippet></ROW><ROW><id>20202637</id><snippet>class MixIn(object):
    def m(self):
        pass

class classA(MixIn): pass

class classB(MixIn): pass
</snippet></ROW><ROW><id>20202637</id><snippet>def m(self): pass

class classA(object): pass
class classB(object): pass

a = classB()
b = classB()
m(a)
m(b)
</snippet></ROW><ROW><id>20202637</id><snippet>m</snippet></ROW><ROW><id>20202637</id><snippet>m</snippet></ROW><ROW><id>20202917</id><snippet>getProd</snippet></ROW><ROW><id>20202917</id><snippet>return</snippet></ROW><ROW><id>20202917</id><snippet>def getProd(n1,n2,n3):
    itotal = n1 * n2 * n3 
    return itotal
</snippet></ROW><ROW><id>20202917</id><snippet>displayData</snippet></ROW><ROW><id>20202917</id><snippet>def displayProductData(first, second, third, total):
    print("The first value is = ", first);
    print("The second value is = ", second);
    print("The third value is = ", third)
    print("The Total is = ", total);
</snippet></ROW><ROW><id>20202917</id><snippet>main</snippet></ROW><ROW><id>20202917</id><snippet>def main():
    isum1 = 0
    isum2 = 0
    isum3 = 0 

    isum1 = getValue()
    isum2 = getValue()
    isum3 = getValue() 
    itotal = getProd(isum1, isum2, isum3)

    displayProductData(isum1, isum2, isum3, itotal)
</snippet></ROW><ROW><id>20202917</id><snippet>lower_case_with_underscores</snippet></ROW><ROW><id>20202917</id><snippet>mixedCase</snippet></ROW><ROW><id>20202917</id><snippet>def get_value():
    #code

def get_sum():
    #code

def get_prod()
</snippet></ROW><ROW><id>20202917</id><snippet>def get_sum(first, second):
    return first + second

def get_prod(n1,n2,n3):
    return n1 * n2 * n3
</snippet></ROW><ROW><id>20202917</id><snippet>main</snippet></ROW><ROW><id>20202917</id><snippet>def main():
    isum1 = getValue()
    isum2 = getValue()
    isum3 = getValue() 
    itotal = getProd(isum1, isum2, isum3)

    displayProductData(isum1, isum2, isum3, itotal)
</snippet></ROW><ROW><id>20202917</id><snippet>print</snippet></ROW><ROW><id>20202917</id><snippet>def display_product_data(first, second, third, total):
    print "The first value is = ", first
    print "The second value is = ", second
    print "The third value is = ", third
    print "The Total is = ", total
</snippet></ROW><ROW><id>20202917</id><snippet>('The first value is = ', 2.0)
('The second value is = ', 3.0)
('The third value is = ', 4.0)
('The Total is = ', 24.0)
</snippet></ROW><ROW><id>20202917</id><snippet>The first value is =  2.0
The second value is =  3.0
The third value is =  4.0
The Total is =  24.0    
</snippet></ROW><ROW><id>20203277</id><snippet>flask-sqlalchemy</snippet></ROW><ROW><id>20203277</id><snippet>sqlalchemy</snippet></ROW><ROW><id>20203277</id><snippet>flask-sqlalchemy</snippet></ROW><ROW><id>20203277</id><snippet>Session</snippet></ROW><ROW><id>20203277</id><snippet>sqlalchemy</snippet></ROW><ROW><id>20203277</id><snippet>_model_changes</snippet></ROW><ROW><id>20203277</id><snippet>flask-sqlalchemy</snippet></ROW><ROW><id>20203277</id><snippet>sqlalchemy</snippet></ROW><ROW><id>20203277</id><snippet>def create_session(config):
    engine = create_engine(config['DATABASE_URI'])
    Session = sessionmaker(bind=engine)
    session = Session()
    session._model_changes = {}
    return session 
</snippet></ROW><ROW><id>20203312</id><snippet>u</snippet></ROW><ROW><id>20203312</id><snippet>u</snippet></ROW><ROW><id>20203312</id><snippet>appName</snippet></ROW><ROW><id>20203312</id><snippet>appName.encode("utf-8")</snippet></ROW><ROW><id>20203312</id><snippet>appName.decode('the-existing-encoding').encode("utf-8")</snippet></ROW><ROW><id>20203312</id><snippet>appName = "Plants vs. Zombies‰ã¢ 2"
</snippet></ROW><ROW><id>20203312</id><snippet>u</snippet></ROW><ROW><id>20203317</id><snippet>re.sub('\s', ' ', s)</snippet></ROW><ROW><id>20203966</id><snippet>np.polynomial.polynomial.polyval</snippet></ROW><ROW><id>20203966</id><snippet>&gt;&gt;&gt; x = np.random.rand(100)
&gt;&gt;&gt; y = np.random.rand(100, 25)
&gt;&gt;&gt; fit = np.polynomial.polynomial.polyfit(x, y, 2)
&gt;&gt;&gt; fit.shape # 25 columns of 3 polynomial coefficients
(3L, 25L)
&gt;&gt;&gt; xx = np.random.rand(50)
&gt;&gt;&gt; interpol = np.polynomial.polynomial.polyval(xx, fit)
&gt;&gt;&gt; interpol.shape # 25 rows, each with 50 evaluations of the polynomial
(25L, 50L)
</snippet></ROW><ROW><id>20203966</id><snippet>&gt;&gt;&gt; np.all([np.allclose(np.polynomial.polynomial.polyval(xx, fit[:, j]),
...                     interpol[j]) for j in range(25)])
True
</snippet></ROW><ROW><id>20203973</id><snippet>pages = list(pages)

ipdb&gt; pages[0]['hede'] = 2
ipdb&gt; pages[0]
{'hede': 2, 'freq': 7, 'page_url': u'/'}
</snippet></ROW><ROW><id>20203996</id><snippet>$load</snippet></ROW><ROW><id>20203996</id><snippet>import</snippet></ROW><ROW><id>20203996</id><snippet>open</snippet></ROW><ROW><id>20203996</id><snippet>exec</snippet></ROW><ROW><id>20204066</id><snippet>datacode</snippet></ROW><ROW><id>20204066</id><snippet>row, column</snippet></ROW><ROW><id>20204066</id><snippet>import sys, csv, urllib2
class SmfImpl():
    def __init__( self, ctx ):
        self.ctx = ctx
        self.csv_reader = ''
        self.flag = ['Not Available', '']
        self.ticker = 'XOM'

    def getMorningKey(self, datacode):
        return fetch_keyratios(self, datacode)

#these functions are not in the SmfImpl class because they're in a seperate file
def query_morningstar(self, url_ending):
    MORNING_STAR = 'http://financials.morningstar.com/ajax/exportKR2CSV.html'
    url = MORNING_STAR + '?&amp;callback=?&amp;t=XNYS:%s%s' % (self.ticker, url_ending)
    req = urllib2.Request(url)
    response = sniff_query(req)
    response.readline()
    return csv.reader(response)

def sniff_query(req):
    try:
        response = urllib2.urlopen(req)
    except urllib2.URLError:
        return 'Check Connection'
    sniff = response.readline()
    if str(sniff) == '':
        return 'Not Available'
    return response

def fetch_keyratios(self, datacode):
    if datacode &lt; 1 or datacode &gt; 990:
        return 'Invalid Datacode'
    #check if we already have the data we need
    if(self.flag[0] == 'Check Connection' or
       self.flag[0] == 'Not Available' or self.flag[1] != self.ticker):
        #query remote and check for errors
        self.csv_reader = query_morningstar(self,
                                '&amp;region=usa&amp;culture=en-US&amp;cur=USD&amp;order=desc')
        if(self.csv_reader == 'Check Connection' or
           self.csv_reader == 'Not Available'):
            self.flag[1] = ''
            return self.csv_reader  # actually response status message
        else:
            self.flag[0] = ''
            self.flag[1] = self.ticker
            # read entire dataset in memory skipping lines as neccessary
            self.data = [row[1:] for row in self.csv_reader if len(row) == 12]

    return sort_keyratios(self, datacode)

def sort_keyratios(self, datacode):
    # convert datacode to row, column and return data in that position of list
    row, col = divmod(datacode-1, 11)
    return self.data[row][col]

if __name__ == "__main__":
    smf = SmfImpl(sys.argv)
    ticker = 'XOM'
    for val in range(1, 24):
        print ticker, val,':', smf.getMorningKey(val)
</snippet></ROW><ROW><id>20204066</id><snippet>csv.reader()</snippet></ROW><ROW><id>20204066</id><snippet>csv.DictReader</snippet></ROW><ROW><id>20204066</id><snippet>getMorningKey()</snippet></ROW><ROW><id>20204066</id><snippet>XOM 1 : TTM
XOM 2 : 2012-12
XOM 3 : 2011-12
XOM 4 : 2010-12
XOM 5 : 2009-12
XOM 6 : 2008-12
XOM 7 : 2007-12
XOM 8 : 2006-12
XOM 9 : 2005-12
XOM 10 : 2004-12
XOM 11 : 2003-12
XOM 12 : 443,708
XOM 13 : 482,295
XOM 14 : 486,429
XOM 15 : 383,221
XOM 16 : 310,586
XOM 17 : 477,359
XOM 18 : 404,552
XOM 19 : 377,635
XOM 20 : 370,680
XOM 21 : 298,035
XOM 22 : 246,738
XOM 23 : 27.8
</snippet></ROW><ROW><id>20204129</id><snippet>ModelResource</snippet></ROW><ROW><id>20204129</id><snippet>Meta.object_class</snippet></ROW><ROW><id>20204129</id><snippet>Meta.queryset</snippet></ROW><ROW><id>20204129</id><snippet>_meta</snippet></ROW><ROW><id>20204129</id><snippet>ModelResource</snippet></ROW><ROW><id>20204129</id><snippet>fields</snippet></ROW><ROW><id>20204129</id><snippet>_meta</snippet></ROW><ROW><id>20204129</id><snippet>class MyModelResource(ModelResource):
    class Meta:
        # If `object_class` is omitted, it's value is taken from
        # `queryset`, so defining both is optional.
        object_class = MyModel
        queryset = MyModel.objects.all()

    def dehydrate(self, bundle):
        # `model_class` == `MyModel`
        model_class = self._meta.object_class

        fields_list = model_class._meta.fields
</snippet></ROW><ROW><id>20204189</id><snippet>ary.any()</snippet></ROW><ROW><id>20204189</id><snippet>True</snippet></ROW><ROW><id>20204189</id><snippet>ary</snippet></ROW><ROW><id>20204189</id><snippet>True &gt; .1</snippet></ROW><ROW><id>20204189</id><snippet>True</snippet></ROW><ROW><id>20204189</id><snippet>(ary &gt; .1).any()
</snippet></ROW><ROW><id>20204232</id><snippet>sample_means = [x/seg_len] + [mean(data[x:x+seg_len,i]) for i in range(4)]
writer.writerow(sample_means)
</snippet></ROW><ROW><id>20204251</id><snippet>__iadd__</snippet></ROW><ROW><id>20204251</id><snippet>self</snippet></ROW><ROW><id>20204251</id><snippet>def __iadd__(self,other):
    for i in other.container:
        self.add(i)
    return self
</snippet></ROW><ROW><id>20204251</id><snippet>__iadd__</snippet></ROW><ROW><id>20204251</id><snippet>self</snippet></ROW><ROW><id>20204251</id><snippet>self</snippet></ROW><ROW><id>20204251</id><snippet>self</snippet></ROW><ROW><id>20204296</id><snippet>c = Context({'posts': })
</snippet></ROW><ROW><id>20204296</id><snippet>c = Context({'posts': posts})
</snippet></ROW><ROW><id>20204412</id><snippet>response, addr = s.recvfrom(65535)
response_id = struct.unpack('!H', response[4:6])
print response_id
</snippet></ROW><ROW><id>20204412</id><snippet>connect</snippet></ROW><ROW><id>20204412</id><snippet>send</snippet></ROW><ROW><id>20204412</id><snippet>scapy</snippet></ROW><ROW><id>20204412</id><snippet>import socket
import struct

def make_ip(proto, srcip, dstip, ident=54321):
    saddr = socket.inet_aton(srcip)
    daddr = socket.inet_aton(dstip)
    ihl_ver = (4 &lt;&lt; 4) | 5
    return struct.pack('!BBHHHBBH4s4s' , 
                       ihl_ver, 0, 0, ident, 0, 255, proto, 0, saddr, daddr)

def make_tcp(srcport, dstport, payload, seq=123, ackseq=0,
             fin=False, syn=True, rst=False, psh=False, ack=False, urg=False,
             window=5840):
    offset_res = (5 &lt;&lt; 4) | 0
    flags = (fin | (syn &lt;&lt; 1) | (rst &lt;&lt; 2) | 
             (psh &lt;&lt;3) | (ack &lt;&lt; 4) | (urg &lt;&lt; 5))
    return struct.pack('!HHLLBBHHH', 
                       srcport, dstport, seq, ackseq, offset_res, 
                       flags, window, 0, 0)

srcip = dstip = '127.0.0.1'
srcport, dstport = 11001, 11000
payload = '[TESTING]\n'

ip = make_ip(socket.IPPROTO_TCP, srcip, dstip)
tcp = make_tcp(srcport, dstport, payload)
packet = ip + tcp + payload

s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
s.sendto(packet, (dstip, 0))
response, addr = s.recvfrom(65535)
response_id = struct.unpack('!H', response[4:6])
print response_id
</snippet></ROW><ROW><id>20204412</id><snippet>IP_ID</snippet></ROW><ROW><id>20204431</id><snippet>process_and_compare</snippet></ROW><ROW><id>20204431</id><snippet>pymc/examples</snippet></ROW><ROW><id>20204478</id><snippet>json_docs = [json.dumps(doc, default=json_util.default) for doc in stories]

resp = jsonify(data=json_docs)
</snippet></ROW><ROW><id>20204478</id><snippet>json_docs</snippet></ROW><ROW><id>20204478</id><snippet>json.dumps()</snippet></ROW><ROW><id>20204478</id><snippet>resp = jsonify(data=stories)
</snippet></ROW><ROW><id>20204478</id><snippet>flask.json.dump()</snippet></ROW><ROW><id>20204478</id><snippet>Response()</snippet></ROW><ROW><id>20204478</id><snippet>resp = Response(json.dumps({'data': stories}, default=json_util.default),
                mimetype='application/json')
</snippet></ROW><ROW><id>20204478</id><snippet>json_util.default</snippet></ROW><ROW><id>20204551</id><snippet>$.ajax({
    url:"/filteredsearch/",
        type: 'POST',
        data: json,
        contentType: 'application/json;charset=UTF-8',
        success: function(evt) {
            $("#results").html = evt.data;
        }
}); 
</snippet></ROW><ROW><id>20204551</id><snippet>window.location = 'http://www.example.com'</snippet></ROW><ROW><id>20204616</id><snippet>log.close()</snippet></ROW><ROW><id>20204616</id><snippet>log.flush()</snippet></ROW><ROW><id>20204616</id><snippet>log.seek(0)</snippet></ROW><ROW><id>20204616</id><snippet>log.read()</snippet></ROW><ROW><id>20204777</id><snippet>set()</snippet></ROW><ROW><id>20204777</id><snippet>def check_row(row):
    return len(row) == len(set(row))
</snippet></ROW><ROW><id>20204777</id><snippet>list.index()</snippet></ROW><ROW><id>20204777</id><snippet>def check_row(row):
    for i, elem in enumerate(row):
        try:
            row.index(elem, i + 1)
            return False  # dupe found
        except ValueError:
            pass  # no dupe found
    return True
</snippet></ROW><ROW><id>20204869</id><snippet>class Foo:
    name1 = 'class variable'

    def __init__(self):
        self.name2 = 'instance variable'
        name3 = 'local variable'

    def test(self):
        print self.name1  # ok
        print self.name2  # ok
        print name3       # no
</snippet></ROW><ROW><id>20205174</id><snippet>object</snippet></ROW><ROW><id>20205174</id><snippet>class M(object):</snippet></ROW><ROW><id>20205174</id><snippet>class M:</snippet></ROW><ROW><id>20205260</id><snippet>IndentationError</snippet></ROW><ROW><id>20205264</id><snippet>sys.argv</snippet></ROW><ROW><id>20205264</id><snippet>if len(sys.argv) &gt; 2:
    filename = sys.argv[2]
</snippet></ROW><ROW><id>20205386</id><snippet># bp.py
from flask import Blueprint
from flask.ext.autoindex import AutoIndexBlueprint
auto_bp = Blueprint('auto_bp', __name__)
AutoIndexBlueprint(auto_bp, browse_root='/tmp')
</snippet></ROW><ROW><id>20205386</id><snippet>from bp import auto_bp
app.register_blueprint(auto_bp, url_prefix='/list')
</snippet></ROW><ROW><id>20205519</id><snippet>foo</snippet></ROW><ROW><id>20205519</id><snippet>from foo import *</snippet></ROW><ROW><id>20205519</id><snippet>foo</snippet></ROW><ROW><id>20205519</id><snippet>foo</snippet></ROW><ROW><id>20205519</id><snippet>d</snippet></ROW><ROW><id>20205519</id><snippet>d</snippet></ROW><ROW><id>20205519</id><snippet>foo</snippet></ROW><ROW><id>20205519</id><snippet>x = 1
</snippet></ROW><ROW><id>20205519</id><snippet>foo</snippet></ROW><ROW><id>20205783</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>20205783</id><snippet>python</snippet></ROW><ROW><id>20205873</id><snippet>write_frame</snippet></ROW><ROW><id>20205873</id><snippet>sql.write_frame(Office_RX, con=conn, name='Office_RX', if_exists='replace', flavor='mysql')
</snippet></ROW><ROW><id>20205873</id><snippet>**kwargs</snippet></ROW><ROW><id>20205960</id><snippet>list2 = [x for x in list2 if {'extension': x['Stationextension'], 'id': x['id']} not in list1]
</snippet></ROW><ROW><id>20205960</id><snippet>list2 = [y for x,y in itertools.izip(list1, list2) if x['extension'] == y['StationExtension'] and x['id'] == y['id']]
</snippet></ROW><ROW><id>20206418</id><snippet>mask = (array2 != 255)
result = array1.copy()
result[mask] += array2[mask]
print(result)
</snippet></ROW><ROW><id>20206431</id><snippet>.readline()</snippet></ROW><ROW><id>20206431</id><snippet># skip metadata
if header.startswith("&lt;arcmetadata"):
    while not header.endswith("&lt;/arcmetadata&gt;\n"):
        header = self.fileobj.readline()
    #NOTE: header ends with `"&lt;/arc..."` here i.e., it is not blank

# skip blank lines
while not header.strip():
    header = self.fileobj.readline()
</snippet></ROW><ROW><id>20206518</id><snippet>class Receipt(QWidget, Ui_Receipt):
    def __init__(self, parent):
        if not isinstance(parent, MainWindow):
            raise TypeError('parent must be a MainWindow')
        super(Receipt, self).__init__(parent)
        self.setupUi(self)
        ...
        print(self.parent().user_barcode)
</snippet></ROW><ROW><id>20206693</id><snippet>setattr</snippet></ROW><ROW><id>20206693</id><snippet>setattr(u, element, form.cleaned_data[element])
</snippet></ROW><ROW><id>20206708</id><snippet>__file__</snippet></ROW><ROW><id>20206708</id><snippet>os.path</snippet></ROW><ROW><id>20206708</id><snippet>#!/usr/bin/env python

import cgi
import json
import os.path

new_data = {"2": {"title": "what", "date": "tomorrow"}}

print("Content-type: application/json\n\r")

script_dir = os.path.dirname(os.path.abspath(__file__))
fname = os.path.join(script_dir, 'jobs.json')

with open(fname) as f:
    data = json.load(f)

data.update(new_data)

with open(fname, 'w') as f:
    json.dump(data, f)
</snippet></ROW><ROW><id>20206708</id><snippet>file</snippet></ROW><ROW><id>20206783</id><snippet>require(devtools)
devtools::install_github("RSelenium", "johndharrison")
library(RSelenium)
library(RJSONIO)

# one needs to have an active server running
# the following commented out lines source the latest java binary
# RSelenium::checkForServer()
# RSelenium::startServer()
# a selenium server is assummed to be running now

remDR &lt;- remoteDriver$new()
remDR$open() # opens a browser usually firefox with default settings
remDR$navigate('http://www.w3schools.com/jquery/trysel.asp') # navigate to your page
webElem &lt;- remDR$findElements(value = "//*[@id='selectorOptions']") # find your elememts

# display the appropriate quantities
cat(fromJSON(webElem[[1]]$getElementText())$value)
&gt; cat(fromJSON(webElem[[1]]$getElementText())$value)
$("#Lastname")
$(".intro")
$(".intro, #Lastname")
$("h1")
$("h1, p")
$("p:first")
$("p:last")
$("tr:even")
$("tr:odd")
$("p:first-child")
$("p:first-of-type")
$("p:last-child")
$("p:last-of-typ
.....................
</snippet></ROW><ROW><id>20206944</id><snippet>echo</snippet></ROW><ROW><id>20206944</id><snippet>socket</snippet></ROW><ROW><id>20206944</id><snippet>put fin.wait2 1385428269 0.0 host=srv1 testname=tcp source=nag03 product=rebuild
put established 1385428269 11.0 host=srv2 testname=tcp source=nag03 product=rebuild
put fin.wait1 1385428269 0.0 host=srv3 testname=tcp source=nag03 product=rebuild
put last.ack 1385428269 0.0 host=srv4 testname=tcp source=nag03 product=rebuild
put unknown 1385428269 0.0 host=srv5 testname=tcp source=nag03 product=rebuild
put syn.recv 1385428269 0.0 host=srv6 testname=tcp source=nag03 product=rebuild
</snippet></ROW><ROW><id>20206944</id><snippet>put fin.wait2 1385428269 0.0 host=srv1 testname=tcp source=nag03 product=rebuildput established 1385428269 11.0 host=srv2 testname=tcp source=nag03 product=rebuildput fin.wait1 1385428269 0.0 host=srv3 testname=tcp source=nag03 product=rebuildput last.ack 1385428269 0.0 host=srv4 testname=tcp source=nag03 product=rebuildput unknown 1385428269 0.0 host=srv5 testname=tcp source=nag03 product=rebuildput syn.recv 1385428269 0.0 host=srv6 testname=tcp source=nag03 product=rebuild
</snippet></ROW><ROW><id>20206944</id><snippet>put</snippet></ROW><ROW><id>20206944</id><snippet>socket</snippet></ROW><ROW><id>20206944</id><snippet>for line in data_list:
    s.sendall('put {}\n'.format(line))
</snippet></ROW><ROW><id>20207571</id><snippet>str.count</snippet></ROW><ROW><id>20207571</id><snippet>g = "ENGL 1301,preprofessional,MATH 2413,"
commas = g.count(",")  # I put this up here so it isn't called multiple times
if commas == 2:
    print "yay"
elif commas == 3:  # I used `elif` here since `commas` cannot equal 2 and 3
    print "nay"
</snippet></ROW><ROW><id>20207571</id><snippet>True</snippet></ROW><ROW><id>20207571</id><snippet>if "," and "," in g :
    print "yay"
if "," and "," and "," in g:
    print "nay"
</snippet></ROW><ROW><id>20207571</id><snippet>if True and ("," in g):
    print "yay"
if True and True and ("," in g):
    print "nay"
</snippet></ROW><ROW><id>20207584</id><snippet>for index, sample in enumerate(getSamples(sound)):
    setSampleValue(sample, int((((min-max)/length) * index) + max))
</snippet></ROW><ROW><id>20207744</id><snippet>def extractData():
    filename = ("data.txt")
    infile = open(filename,'r')

    for x in infile.readlines():
        x = x.strip()
        if x.startswith("&gt;"):
            header = x
        else:
            sequence = x
            if header.startswith("&gt;b22"):
                print(header, sequence)
                header = ''


    infile.close()

extractData()
</snippet></ROW><ROW><id>20207744</id><snippet>if header.startswith("&gt;b22")</snippet></ROW><ROW><id>20207744</id><snippet>else</snippet></ROW><ROW><id>20207744</id><snippet>header</snippet></ROW><ROW><id>20208082</id><snippet>re.split</snippet></ROW><ROW><id>20208082</id><snippet>import re
pat = re.compile(r'\s(?=[A-Z])|,')
pat.split(my_str)
</snippet></ROW><ROW><id>20208082</id><snippet>pat = re.compile(r'.(?=[A-Z])')
</snippet></ROW><ROW><id>20208098</id><snippet>__hash__</snippet></ROW><ROW><id>20208098</id><snippet>WrapStr</snippet></ROW><ROW><id>20208098</id><snippet>class WrapStr(object):
    def __init__(self,str):
       self.str = str
    def __eq__(self,other):
       return self.str == other.str
    def __repr__(self):
       return self.str
    def __hash__(self):
        return hash(self.str)

first_ins = WrapStr('col1')
my_ix = pd.Index([first_ins])
sec_ins = WrapStr('col1')

print first_ins in my_ix # True
print sec_ins in my_ix # False
</snippet></ROW><ROW><id>20208100</id><snippet>data = request.body.read()
</snippet></ROW><ROW><id>20208114</id><snippet>for num in unsorted:
    byte_at_offset = (num &amp; byte_check) &gt;&gt; offset*8
    buckets[byte_at_offset].append(num)
</snippet></ROW><ROW><id>20208114</id><snippet>bucketappender = [bucket.append for bucket in buckets]</snippet></ROW><ROW><id>20208114</id><snippet>for num in unsorted:
    bucketappender[(num &amp; byte_check) &gt;&gt; ofs8](num)
</snippet></ROW><ROW><id>20208114</id><snippet>(num &gt;&gt; offset*8) &amp; 0xff
</snippet></ROW><ROW><id>20208114</id><snippet>num &amp; byte_check</snippet></ROW><ROW><id>20208114</id><snippet>log(num)</snippet></ROW><ROW><id>20208114</id><snippet>num</snippet></ROW><ROW><id>20208425</id><snippet>__eq__</snippet></ROW><ROW><id>20208425</id><snippet>__eq__</snippet></ROW><ROW><id>20208425</id><snippet>ScheduleData() == datetime.date()</snippet></ROW><ROW><id>20208425</id><snippet>in</snippet></ROW><ROW><id>20208425</id><snippet>datetime.date() == ScheduleData()</snippet></ROW><ROW><id>20208425</id><snippet>__eq__</snippet></ROW><ROW><id>20208425</id><snippet>__eq__</snippet></ROW><ROW><id>20208425</id><snippet>datetime.date.__eq__</snippet></ROW><ROW><id>20208425</id><snippet>class A(object):
    def __eq__(self, other):
        print ('A.__eq__')
        return False

class B(object):
    def __eq__(self, other):
        print ('B.__eq__')

items = [A()]
B() in items
</snippet></ROW><ROW><id>20208425</id><snippet>B.__eq__</snippet></ROW><ROW><id>20208425</id><snippet>B</snippet></ROW><ROW><id>20208425</id><snippet>datetime.date</snippet></ROW><ROW><id>20208425</id><snippet>B.__eq__</snippet></ROW><ROW><id>20208425</id><snippet>datetime.date.__eq__</snippet></ROW><ROW><id>20208425</id><snippet>class B(object):
    def __eq__(self, other):
        print ('First B.__eq__')
        if isinstance(self, other.__class__):
            print ('B.__eq__')
        return NotImplemented
</snippet></ROW><ROW><id>20208425</id><snippet>First B.__eq__
A.__eq__ 
</snippet></ROW><ROW><id>20208425</id><snippet>NotImplemented</snippet></ROW><ROW><id>20208425</id><snippet>timetuple</snippet></ROW><ROW><id>20208425</id><snippet>class ScheduleData:
    timetuple = None
</snippet></ROW><ROW><id>20208445</id><snippet>d = {}

d['coffeec'] = (2.00, 2) # d[menu_item] = (cost, order_count)
d['juciec'] = (2.00, 1) # d[menu_item] = (cost, order_count)
d['sodac'] = (1.50, 10) # d[menu_item] = (cost, order_count)
d['waterc'] = (1.00, 20) # d[menu_item] = (cost, order_count)
d['lemonadec'] = (1.50, 10) # d[menu_item] = (cost, order_count)
</snippet></ROW><ROW><id>20208445</id><snippet>d = {'coffeec': (2.0, 2), 'waterc': (1.0, 20), 'lemonadec': (1.5, 10), 'juciec': (2.0, 1), 'sodac': (1.5, 10)}
</snippet></ROW><ROW><id>20208445</id><snippet>d_lst = sorted(d.items(), key=lambda x:x[1][0], reverse = True)
</snippet></ROW><ROW><id>20208445</id><snippet>d_lst = [('coffeec', (2.0, 2)), ('juciec', (2.0, 1)), ('lemonadec', (1.5, 10)), ('sodac', (1.5, 10)), ('waterc', (1.0, 20))]
</snippet></ROW><ROW><id>20208445</id><snippet>&gt;&gt;&gt; for item in d_lst:
...     print("Item:%s;;; Cost:%.2f;;; OrderCount:%i "%(item[0], item[1][0], item[1][1]))
...
Item:coffeec;;; Cost:2.00;;; OrderCount:2
Item:juciec;;; Cost:2.00;;; OrderCount:1
Item:lemonadec;;; Cost:1.50;;; OrderCount:10
Item:sodac;;; Cost:1.50;;; OrderCount:10
Item:waterc;;; Cost:1.00;;; OrderCount:20
</snippet></ROW><ROW><id>20208933</id><snippet>monthnumberstr=str(monthnumber)
daysinmonth= eval("month"+monthnumberstr)
</snippet></ROW><ROW><id>20209825</id><snippet>import operator
from functools import reduce

def getSearchQuery(search, list, columns=None):
    """
    Breaks up the search string and makes a query list
    Filters the given list based on the query list
    """
    if not columns:
        return list
    search = search.strip('\'"').split(" ")
    queries = []
    for col in columns:
        queries.extend([Q((col+'__icontains', value)) for value in search])

    return list.filter(reduce(operator.or_, queries))
</snippet></ROW><ROW><id>20209843</id><snippet>def split_after(lst, n):
    for i in range(n):
        yield lst[i]
    yield lst[n:]
</snippet></ROW><ROW><id>20209843</id><snippet>&gt;&gt;&gt; a,b,n = split_after(p,2)
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
2
&gt;&gt;&gt; n
(3, 4, 5, 6)
&gt;&gt;&gt; l = list(split_after(p,3))
&gt;&gt;&gt; l
[1, 2, 3, (4, 5, 6)]
</snippet></ROW><ROW><id>20209858</id><snippet>my_array[[0]]</snippet></ROW><ROW><id>20209858</id><snippet>my_array</snippet></ROW><ROW><id>20209858</id><snippet>my_dtype</snippet></ROW><ROW><id>20209858</id><snippet>my_array[0]</snippet></ROW><ROW><id>20209858</id><snippet>np.array(my_array.tolist())
</snippet></ROW><ROW><id>20209858</id><snippet>x = array([(1.0, 2), (3.0, 4)], dtype=[('x', '&lt;f8'), ('y', '&lt;i4')])
x.astype([('x', '&lt;f8'), ('y', '&lt;f8')]).view(dtype='f8').reshape(2,2)
</snippet></ROW><ROW><id>20209940</id><snippet>((prediction - test['actual']) ** 2).sum()
</snippet></ROW><ROW><id>20209940</id><snippet>((prediction - test['actual'].mean()) ** 2).sum()
</snippet></ROW><ROW><id>20210041</id><snippet>def myupdate(self):
    return db(db.table.id == id).update({field1=self.field1, field2=self.filed2)
</snippet></ROW><ROW><id>20210041</id><snippet>def myupdate(self):
    return db(**dictvar)
</snippet></ROW><ROW><id>20210048</id><snippet>&gt;&gt;&gt; df

   0  1  2
0  1  9  0
1  2  7  0
2  3  7  0

&gt;&gt;&gt; df.loc[:, (df != df.ix[0]).any()] 

   0  1
0  1  9
1  2  7
2  3  7
</snippet></ROW><ROW><id>20210336</id><snippet>def Person_Link(self):
    return "&lt;a href='/admin/sweetspotModel/persons/%s/' target='_blank'&gt;Person Details&lt;a/&gt;" % self.contactid.contactid
Person_Link.allow_tags = True  
</snippet></ROW><ROW><id>20210336</id><snippet>class ExecutiveAdmin(admin.ModelAdmin):
    list_display = ('Person_Name', 'Person_Link')
</snippet></ROW><ROW><id>20210586</id><snippet>for row in csv_data:
    data=row[0].split('\t')
    if len(data) &lt; 4: continue
    query="""insert into newsletter_subscriber (id, name, email) values 
      (%d, '%s', '%s')""" %(int(data[0]), data[1], data[2])
    cursor.execute(query)
</snippet></ROW><ROW><id>20210702</id><snippet>return None</snippet></ROW><ROW><id>20210702</id><snippet>return result</snippet></ROW><ROW><id>20210702</id><snippet>result</snippet></ROW><ROW><id>20210702</id><snippet>result</snippet></ROW><ROW><id>20210702</id><snippet>#temp_multi_search v0.25
def temp_multi_search(some_node, key):
    result = []                    # Line 1
    if some_node.val == key:
        print 'found', some_node
        result.append(some_node)   # Line 2
    for subtree in some_node.subtrees:         
        result.extend(temp_multi_search(subtree, key)) # Line 3
    return result
</snippet></ROW><ROW><id>20210702</id><snippet>temp_multi_search(subtree, key)</snippet></ROW><ROW><id>20210702</id><snippet>temp_multi_search(subtree, key)</snippet></ROW><ROW><id>20210702</id><snippet>1</snippet></ROW><ROW><id>20210702</id><snippet>temp_multi_search(root,1)</snippet></ROW><ROW><id>20210702</id><snippet>result</snippet></ROW><ROW><id>20210702</id><snippet>result = [node1]</snippet></ROW><ROW><id>20210702</id><snippet>[node2]</snippet></ROW><ROW><id>20210702</id><snippet>[node2]</snippet></ROW><ROW><id>20210702</id><snippet>[node1]</snippet></ROW><ROW><id>20210702</id><snippet>[node1, node2]</snippet></ROW><ROW><id>20210702</id><snippet>[node5]</snippet></ROW><ROW><id>20210702</id><snippet>[node5]</snippet></ROW><ROW><id>20210702</id><snippet>[node5]</snippet></ROW><ROW><id>20210702</id><snippet>[node9]</snippet></ROW><ROW><id>20210702</id><snippet>[node9]</snippet></ROW><ROW><id>20210702</id><snippet>[node1, node2]</snippet></ROW><ROW><id>20210702</id><snippet>[node1, node2, node5]</snippet></ROW><ROW><id>20210702</id><snippet>[node1, node2, node5, node9]</snippet></ROW><ROW><id>20210880</id><snippet>checkbutton_value1</snippet></ROW><ROW><id>20210880</id><snippet>def checkbutton_value1():
    x = var1.get()


master = Tk()  # Open up GUI connection
master.title('Program Application')
var1 = IntVar()
checkbox_1 = Checkbutton(master, text='Interpolate Graph',
                         variable=var1, command=checkbutton_value1)
checkbox_1.pack()
master.mainloop() # Continue loop till user close tab
</snippet></ROW><ROW><id>20210880</id><snippet>checkbox_1 = Checkbutton(master, text='Interpolate Graph',
                         variable=var1, command=lambda: var1.get())
</snippet></ROW><ROW><id>20211000</id><snippet>stdin</snippet></ROW><ROW><id>20211000</id><snippet>stdout</snippet></ROW><ROW><id>20211000</id><snippet>Popen</snippet></ROW><ROW><id>20211000</id><snippet>process = subprocess.Popen([SPIM_BIN] + extra_args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
pin = process.stdin
pout = process.stdout
</snippet></ROW><ROW><id>20211000</id><snippet>pin</snippet></ROW><ROW><id>20211000</id><snippet>pout</snippet></ROW><ROW><id>20211000</id><snippet>gnome-terminal</snippet></ROW><ROW><id>20211000</id><snippet>program.sh</snippet></ROW><ROW><id>20211066</id><snippet>,2</snippet></ROW><ROW><id>20211066</id><snippet>for i in range(0, len(input)-1):
    print input[i:i+2]
</snippet></ROW><ROW><id>20211066</id><snippet>,2</snippet></ROW><ROW><id>20211163</id><snippet>image1.png</snippet></ROW><ROW><id>20211163</id><snippet>image.png</snippet></ROW><ROW><id>20211250</id><snippet>&gt;&gt;&gt; d = {"a": [1], "b": [2,3], "c": [4,5,6]}
&gt;&gt;&gt; values = [v for k,v in d.items()]
&gt;&gt;&gt; values
[[1], [4, 5, 6], [2, 3]]
</snippet></ROW><ROW><id>20211250</id><snippet>&gt;&gt;&gt; for i in itertools.product(*l):
...     print i
... 
(1, 4, 2)
(1, 4, 3)
(1, 5, 2)
(1, 5, 3)
(1, 6, 2)
(1, 6, 3)
</snippet></ROW><ROW><id>20211290</id><snippet>from mimetypes import guess_extension

source = urllib.urlopen(download_link)
extension = guess_extension(source.info()['Content-Type'])
if extension:
    app_name += extension
else:
    # what to do? discard?
    pass

# later do source.read()
</snippet></ROW><ROW><id>20211387</id><snippet>any</snippet></ROW><ROW><id>20211387</id><snippet>any</snippet></ROW><ROW><id>20211387</id><snippet>True</snippet></ROW><ROW><id>20211387</id><snippet>[20.0, 0.0, 19.0, 1.0]</snippet></ROW><ROW><id>20211387</id><snippet>True</snippet></ROW><ROW><id>20211387</id><snippet>any([20.0, 0.0, 19.0, 1.0])</snippet></ROW><ROW><id>20211387</id><snippet>True</snippet></ROW><ROW><id>20211387</id><snippet>print True in [20.0, 0.0]</snippet></ROW><ROW><id>20211387</id><snippet>False</snippet></ROW><ROW><id>20211387</id><snippet>any</snippet></ROW><ROW><id>20211387</id><snippet>print any(x in [20.0, 0.0] for x in [20.0, 0.0, 19.0, 1.0])
</snippet></ROW><ROW><id>20211387</id><snippet>in</snippet></ROW><ROW><id>20211387</id><snippet>in</snippet></ROW><ROW><id>20211387</id><snippet>targets_set = set([20.0, 0.0])
print any(x in targets_set for x in [20.0, 0.0, 19.0, 1.0])
</snippet></ROW><ROW><id>20211859</id><snippet>from django.contrib.auth.models import User
from rest_framework import viewsets
from rest_framework import status
from rest_framework.decorators import action
from rest_framework.response import Response
from myapp.serializers import UserSerializer, PasswordSerializer

class UserViewSet(viewsets.ModelViewSet):
    """
    A viewset that provides the standard actions
    """
    queryset = User.objects.all()
    serializer_class = UserSerializer

    @action()
    def set_password(self, request, pk=None):
        user = self.get_object()
        serializer = PasswordSerializer(data=request.DATA)
        if serializer.is_valid():
            user.set_password(serializer.data['password'])
            user.save()
            return Response({'status': 'password set'})
        else:
            return Response(serializer.errors,
                            status=status.HTTP_400_BAD_REQUEST)
</snippet></ROW><ROW><id>20211949</id><snippet>*</snippet></ROW><ROW><id>20211949</id><snippet>match = re.search(r'i+', "piiiiiiiiiiiiiiiiiiiig")
match.group()
</snippet></ROW><ROW><id>20211949</id><snippet>'iiiiiiiiiiiiiiiiiiii'
</snippet></ROW><ROW><id>20211949</id><snippet>*</snippet></ROW><ROW><id>20211949</id><snippet>{0,}</snippet></ROW><ROW><id>20211949</id><snippet>p</snippet></ROW><ROW><id>20211949</id><snippet>0</snippet></ROW><ROW><id>20212024</id><snippet>db.execute("INSERT INTO present VALUES('test2', ?, 10)", (None,))
</snippet></ROW><ROW><id>20212056</id><snippet>byte[] plaintext = ...;
byte[] key = ...;

// get iv
SecureRandom rnd = new SecureRandom();
byte[] iv = rnd.getBytes(16);
IvParameterSpec ivSpec = new IvParameterSpec(iv);   

// encrypt
Cipher cipher = Cipher.getInstance("AES/CBC/PKCS7Padding");
cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);
byte[] ciphertext = cipher.doFinal(plaintext);

// copy to result
byte[] result = new byte[iv.length + ciphertext.length];
System.arraycopy(iv, 0, result, 0, iv.length);
System.arraycopy(ciphertext, 0 , result, iv.length, ciphertext.length);
</snippet></ROW><ROW><id>20212372</id><snippet>ip="192.168.1.1"
for line in csv_file:
    if ip in line:
        found = True
        break
</snippet></ROW><ROW><id>20212403</id><snippet>{% for key, val in d.items %}
    {% if val.subproduct1 %}
        {% for value in val.subproduct1 %}
            {{ value }}
        {% endfor %}
    {% endif %}
    {% if val.subproduct2 %}
        {% for value in val.subproduct2 %}
            {{ value }}
        {% endfor %}
    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>20212403</id><snippet>{% for key, val in d.items %}
    {% for key2, val2 in val.items %}
        {% if val2 %}
            {% for value in val2 %}
                {{ value }}
            {% endfor %}
        {% endif %}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>20212808</id><snippet>data = "index=索引?"</snippet></ROW><ROW><id>20212808</id><snippet>def display_unicode(data):
    return "".join(["\\u%s" % hex(ord(l))[2:].zfill(4) for l in data])

&gt;&gt;&gt; data = "index=索引?"
&gt;&gt;&gt; print(display_unicode(data))
\u0069\u006e\u0064\u0065\u0078\u003d\u7d22\u5f15\u003f
</snippet></ROW><ROW><id>20212808</id><snippet>&gt;&gt;&gt; data.encode('ascii', 'backslashreplace')
b'index=\\u7d22\\u5f15?'
&gt;&gt;&gt; data.encode('unicode_escape')
b'index=\\u7d22\\u5f15?'
</snippet></ROW><ROW><id>20213086</id><snippet>apache2</snippet></ROW><ROW><id>20213086</id><snippet>apache2</snippet></ROW><ROW><id>20213086</id><snippet>HTTP</snippet></ROW><ROW><id>20213086</id><snippet>apache2</snippet></ROW><ROW><id>20213086</id><snippet>apache2</snippet></ROW><ROW><id>20213104</id><snippet>pygame.display</snippet></ROW><ROW><id>20213104</id><snippet>pygame.error: cannot convert without pygame.display initialized
</snippet></ROW><ROW><id>20213104</id><snippet>class Player(pygame.sprite.Sprite): #create the player class as an instance of a Pygame sprite
   image_normal = []
   image_left = []
   image_right = []

   def __init__(self):
        pygame.sprite.Sprite.__init__(self) #init the Pygame sprite
        #load all images
        self.image_normal = pygame.image.load('images/player/normal.png').convert()
        self.image_left = pygame.image.load('images/player/left.png').convert()
        self.image_right = pygame.image.load('images/player/right.png').convert()
        self.image = self.image_normal    #load the player image

        self.rect = self.image.get_rect()   #get a rect for the player
</snippet></ROW><ROW><id>20213104</id><snippet>self.image = self.image_left
self.image = self.image_right
self.image = self.image_normal
</snippet></ROW><ROW><id>20213372</id><snippet>google_appengine</snippet></ROW><ROW><id>20213372</id><snippet>/home/username/google_appengine</snippet></ROW><ROW><id>20213372</id><snippet>python [GAE_SDK_ROOT]/appcfg.py update [YOUR_APP_ROOT]
</snippet></ROW><ROW><id>20213372</id><snippet>python /home/username/google_appengine/appcfg.py update /home/username/udaproject319
</snippet></ROW><ROW><id>20213521</id><snippet>import binascii

s1 = '\\xd0\\xb1'
print('s1 =', repr(s1), '=', list(s1))            # list() to emphasize what are the characters

s2 = s1.replace('\\x', '')
print('s2 =', repr(s2))

b = binascii.unhexlify(s2)
print('b =', repr(b), '=', list(b))

s3 = b.decode('utf8')
print('s3 =', ascii(s3))

with open('output.txt', 'w', encoding='utf-8') as f:
    f.write(s3)
</snippet></ROW><ROW><id>20213521</id><snippet>c:\__Python\user\so20210201&gt;py a.py
s1 = '\\xd0\\xb1' = ['\\', 'x', 'd', '0', '\\', 'x', 'b', '1']
s2 = 'd0b1'
b = b'\xd0\xb1' = [208, 177]
s3 = '\u0431'
</snippet></ROW><ROW><id>20213521</id><snippet>output.txt</snippet></ROW><ROW><id>20213521</id><snippet>\\n</snippet></ROW><ROW><id>20213521</id><snippet>bytes.decode()</snippet></ROW><ROW><id>20213521</id><snippet>def userDecode(s):
    status = 0
    lst = []                       # result as list of bytes as ints
    xx = None                      # variable for one byte escape conversion
    for c in s:                    # unicode character
        print(status, ' c ==', c)  ## just for debugging
        if status == 0:
            if c == '\\':
                status = 1         # escape sequence for a byte starts
            else:
                lst.append(ord(c)) # convert to integer

        elif status == 1:          # x expected
            assert(c == 'x')
            status = 2

        elif status == 2:          # first nibble expected
            xx = c
            status = 3

        elif status == 3:          # second nibble expected
            xx += c
            lst.append(int(xx, 16)) # this is a hex representation of int
            status = 0

    # Construct the bytes from the ordinal values in the list, and decode
    # it as UTF-8 string.
    return bytes(lst).decode('utf-8')


if __name__ == '__main__':

    s = userDecode('\\xd0\\xb1whatever')
    print(ascii(s))    # cannot be displayed on console that does not support unicode

    with open('output.txt', 'w', encoding='utf-8') as f:
        f.write(s)
</snippet></ROW><ROW><id>20213521</id><snippet>c:\__Python\user\so20210201&gt;b.py
0  c == \
1  c == x
2  c == d
3  c == 0
0  c == \
1  c == x
2  c == b
3  c == 1
0  c == w
0  c == h
0  c == a
0  c == t
0  c == e
0  c == v
0  c == e
0  c == r
'\u0431whatever'
</snippet></ROW><ROW><id>20213624</id><snippet>no_record_check</snippet></ROW><ROW><id>20213624</id><snippet>def get_context_data(self, **kwargs):
    context = super(YourViewClass, self).get_context_data(**kwargs)
    context['no_record_check'] = int(&lt;your code&gt;)
    return context
</snippet></ROW><ROW><id>20213624</id><snippet>&lt;script type="text/javascript"&gt;
var no_record_check = {{ no_record_check }};  // no_record_check **must** be an integer
if (no_record_check == 0) {
    alert('No record found');
}
&lt;/script&gt;
</snippet></ROW><ROW><id>20213717</id><snippet>DATABASE</snippet></ROW><ROW><id>20213717</id><snippet>settings.py</snippet></ROW><ROW><id>20213717</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>20214578</id><snippet>param</snippet></ROW><ROW><id>20214578</id><snippet>d</snippet></ROW><ROW><id>20214578</id><snippet>class Base(object):
    def __init__(self):
        self.param = 0
        self.d = 1
</snippet></ROW><ROW><id>20214578</id><snippet>get_xxx()</snippet></ROW><ROW><id>20214578</id><snippet>param += d
</snippet></ROW><ROW><id>20214578</id><snippet>self.iterate_param(a):
</snippet></ROW><ROW><id>20214578</id><snippet>Base.get_all()</snippet></ROW><ROW><id>20214578</id><snippet>iterate_param()</snippet></ROW><ROW><id>20214578</id><snippet>class A(Base):
    ...
    def iterate_param(self, a):
        self.param += self.d

class B(Base):
    ...
    def iterate_param(self, a):
        self.param = a + 1
</snippet></ROW><ROW><id>20214666</id><snippet># shell execute PHP
def php(code):
  # open process
  p = Popen(['php'], stdout=PIPE, stdin=PIPE, stderr=STDOUT, close_fds=True)

  # read output
  o = p.communicate(code)[0]

  # kill process
  try:
    os.kill(p.pid, signal.SIGTERM)
  except:
    pass

  # return
  return o
</snippet></ROW><ROW><id>20214666</id><snippet>width = 100
height = 100

code = """&lt;?php

  include('/path/to/file.php');
  echo start(""" + width + """, """ + height + """);

?&gt;
"""
res = php(code)
</snippet></ROW><ROW><id>20214747</id><snippet>&gt;&gt;&gt; v = '10.121.100.200'
&gt;&gt;&gt; ".".join(v.split('.')[0:-1])
'10.121.100'
</snippet></ROW><ROW><id>20214747</id><snippet>&gt;&gt;&gt; ".".join(v.split('.')[0:-1]) + '.'
'10.121.100.'
</snippet></ROW><ROW><id>20214863</id><snippet>m = __import__(a)
</snippet></ROW><ROW><id>20214863</id><snippet>m</snippet></ROW><ROW><id>20214863</id><snippet>&gt;&gt;&gt; m = __import__('sys')
&gt;&gt;&gt; m.path
['', '/usr/lib/python2.7', '/usr/local/lib/python2.7/dist-packages' ... ] 
</snippet></ROW><ROW><id>20215228</id><snippet>def</snippet></ROW><ROW><id>20215228</id><snippet>from Tkinter import *

class MyApp:
    def __init__(self, parent):
        self.myParent = parent
        self.myContainer1 = Frame(parent)
        self.myContainer1.pack()

        self.button1 = Button(self.myContainer1)
        self.button1.configure(text="OK", background= "green")
        self.button1.pack(side=LEFT)
        self.button1.bind("", self.button1Click)  #

        self.button2 = Button(self.myContainer1)
        self.button2.configure(text="Cancel", background="red")
        self.button2.pack(side=RIGHT)
        self.button2.bind("", self.button2Click)  #

    def button1Click(self, event):
        if self.button1["background"] == "green":
           self.button1["background"] = "yellow"
        else:
           self.button1["background"] = "green"

    def button2Click(self, event):
        self.myParent.destroy()

root = Tk()
myapp = MyApp(root)
root.mainloop()
</snippet></ROW><ROW><id>20215277</id><snippet>u</snippet></ROW><ROW><id>20215277</id><snippet>path</snippet></ROW><ROW><id>20215277</id><snippet>unicode type</snippet></ROW><ROW><id>20215277</id><snippet>type</snippet></ROW><ROW><id>20215277</id><snippet>data</snippet></ROW><ROW><id>20215277</id><snippet>type(data)</snippet></ROW><ROW><id>20215277</id><snippet>dirname</snippet></ROW><ROW><id>20215277</id><snippet>Unicode strings are expressed as instances of the unicode type
one of Python's repertoire of built-in types
</snippet></ROW><ROW><id>20215277</id><snippet>import Tkinter,tkFileDialog
top=Tkinter.Tk()
from tkFileDialog import askopenfilename
dirname = str(tkFileDialog.askdirectory(parent=top))
</snippet></ROW><ROW><id>20215377</id><snippet>float()</snippet></ROW><ROW><id>20215377</id><snippet>&gt;&gt;&gt; a = 10
&gt;&gt;&gt; float(a)
10.0
</snippet></ROW><ROW><id>20215377</id><snippet>&gt;&gt;&gt; float('10')
10.0
</snippet></ROW><ROW><id>20215461</id><snippet>x</snippet></ROW><ROW><id>20215461</id><snippet>indices = (array1[0,...] &gt;= np.min(array2[0,...])) &amp; (array1[0,...] &lt;= np.max(array2[0,...]))
xselected = array1[0,indices]
yselected = array1[1,indices]
</snippet></ROW><ROW><id>20215461</id><snippet>np.amin</snippet></ROW><ROW><id>20215461</id><snippet>np.min</snippet></ROW><ROW><id>20215461</id><snippet>*</snippet></ROW><ROW><id>20215461</id><snippet>&amp;</snippet></ROW><ROW><id>20215461</id><snippet>array[0,...]</snippet></ROW><ROW><id>20215461</id><snippet>array[0]</snippet></ROW><ROW><id>20215461</id><snippet>0</snippet></ROW><ROW><id>20215465</id><snippet>questions.py</snippet></ROW><ROW><id>20215465</id><snippet>sports_questions = ["What sport did michael jordan play?", "blablalba?", "and so on"]
computer_questions = ["Who founded microsoft?", "blabla", "many questions"]
</snippet></ROW><ROW><id>20215465</id><snippet>quiz.py</snippet></ROW><ROW><id>20215465</id><snippet>#!/usr/bin/env python

import questions

print "question one is,", questions.sports_questions[0]
</snippet></ROW><ROW><id>20215723</id><snippet>verifications = Verification.objects.filter(asset_code__range=(10, 100))
verifications.update(product_details=form.cleaned['product_details'])
</snippet></ROW><ROW><id>20216000</id><snippet>.getName()</snippet></ROW><ROW><id>20216000</id><snippet>studentList[i]</snippet></ROW><ROW><id>20216000</id><snippet>studentList[i + 1]</snippet></ROW><ROW><id>20216000</id><snippet>.getName()</snippet></ROW><ROW><id>20216000</id><snippet>aux = studentList[i]
studentList[i] = studentList[i+1]
studentList[i+1] = aux
</snippet></ROW><ROW><id>20216000</id><snippet>studentList[i], studentList[i+1] = studentList[i+1], studentList[i]
</snippet></ROW><ROW><id>20216168</id><snippet>subtraction()</snippet></ROW><ROW><id>20216168</id><snippet>def subtraction(a, b):
    return a - b
</snippet></ROW><ROW><id>20216168</id><snippet>c = subtraction(a, b)
</snippet></ROW><ROW><id>20216168</id><snippet>c = calculations.subtraction(a, b)
</snippet></ROW><ROW><id>20216168</id><snippet>from calculations import subtraction
</snippet></ROW><ROW><id>20216622</id><snippet>item_desc</snippet></ROW><ROW><id>20216622</id><snippet>[...]</snippet></ROW><ROW><id>20216622</id><snippet>item['title'] = [item_desc[0][:10]]
</snippet></ROW><ROW><id>20216622</id><snippet>.extract()</snippet></ROW><ROW><id>20216622</id><snippet>item['image'] = img.xpath('@src').extract()[0]
item_desc = img.xpath('@title').extract()[0]
item['description'] = item_desc
item['title'] = item_desc[:10]
</snippet></ROW><ROW><id>20216622</id><snippet>img_match = img.xpath('@src').extract()
item['image'] = img_match[0] if img_match else ''
item_desc = img.xpath('@title').extract()
item['description'] = item_desc[0] if item_desc else ''
item['title'] = item_desc[0][:10] if item_desc else ''
</snippet></ROW><ROW><id>20217021</id><snippet>dropdowns = ListProperty([])</snippet></ROW><ROW><id>20217021</id><snippet>self.dropdowns.append(dropdown)</snippet></ROW><ROW><id>20217047</id><snippet>for row in rows:
    rec={}
    for k in range(len(row)):
        print k
        rec[columns[k]]=row[k]
    rtn.append(rec)
</snippet></ROW><ROW><id>20217088</id><snippet>Song</snippet></ROW><ROW><id>20217088</id><snippet>Song(["Do","Re","Mi"]).sing_me_a_song()</snippet></ROW><ROW><id>20217088</id><snippet>print("Hi!")</snippet></ROW><ROW><id>20217088</id><snippet>message = "Hi!"</snippet></ROW><ROW><id>20217088</id><snippet>print(message)</snippet></ROW><ROW><id>20217088</id><snippet>"Hi!"</snippet></ROW><ROW><id>20217088</id><snippet>["Do","Re","Mi"]</snippet></ROW><ROW><id>20217413</id><snippet>float(order_weight[2].rstrip("g").replace(',',''))
</snippet></ROW><ROW><id>20217413</id><snippet>from locale import *
setlocale(LC_NUMERIC, '')
print atof('1,759.33')
</snippet></ROW><ROW><id>20217413</id><snippet>1759.33
</snippet></ROW><ROW><id>20217497</id><snippet>calc</snippet></ROW><ROW><id>20217497</id><snippet>calc</snippet></ROW><ROW><id>20217497</id><snippet>sys.path</snippet></ROW><ROW><id>20217497</id><snippet>plugins[name] = imp.load_module('{}.{}'.format(PluginFolder, name), 
                     *plugin["info"])
</snippet></ROW><ROW><id>20217497</id><snippet>plugin.calc</snippet></ROW><ROW><id>20217497</id><snippet>plugins</snippet></ROW><ROW><id>20217497</id><snippet>__init__.py</snippet></ROW><ROW><id>20217497</id><snippet>import &lt;module&gt;</snippet></ROW><ROW><id>20217497</id><snippet>plugins/calc.py</snippet></ROW><ROW><id>20217497</id><snippet>RuntimeWarning: Parent module 'plugins' not found while handling absolute import import &lt;module&gt;
</snippet></ROW><ROW><id>20217497</id><snippet>&lt;module&gt;</snippet></ROW><ROW><id>20217497</id><snippet>calc.py</snippet></ROW><ROW><id>20217497</id><snippet>plugins</snippet></ROW><ROW><id>20217497</id><snippet>plugins</snippet></ROW><ROW><id>20217497</id><snippet>import plugins</snippet></ROW><ROW><id>20217644</id><snippet>item=self.model.item(1,1)
thestring = str(item.text())
</snippet></ROW><ROW><id>20217790</id><snippet>KeyError</snippet></ROW><ROW><id>20217790</id><snippet>(u'l.a.',)</snippet></ROW><ROW><id>20217790</id><snippet>self.vectorSpace.keywords()</snippet></ROW><ROW><id>20217790</id><snippet>KeyError</snippet></ROW><ROW><id>20217790</id><snippet>dict</snippet></ROW><ROW><id>20217790</id><snippet>get()</snippet></ROW><ROW><id>20217790</id><snippet>w.append( self.lsa.getCell(doc, self.vectorSpace.keywords().get((term,), 'default') ) 
</snippet></ROW><ROW><id>20217790</id><snippet>'default'</snippet></ROW><ROW><id>20217823</id><snippet>import numpy as np
a = np.loadtxt("a.txt")
print a
</snippet></ROW><ROW><id>20217823</id><snippet>[[-0.11361818  0.04173076 -0.98787775  0.09719566]
 [-0.11361818  0.04173076 -0.98787775  0.09719566]
 [-0.11361818  0.04173076 -0.98787775  0.09719566]
 [-0.11361818  0.04173076 -0.98787775  0.09719566]]
</snippet></ROW><ROW><id>20217920</id><snippet>plt.xlim()</snippet></ROW><ROW><id>20217920</id><snippet>plt.xlim([0,bins.size])
</snippet></ROW><ROW><id>20217920</id><snippet>#make some data
N = 22
data = np.random.randint(1,10,N)
bin = np.arange(N)  
width = 1

#plot it
ax = plt.subplot(111)
ax.bar(bin, data, width, color='r')
plt.show()
</snippet></ROW><ROW><id>20217920</id><snippet>plt.xlim()</snippet></ROW><ROW><id>20217920</id><snippet>plt.xlim</snippet></ROW><ROW><id>20217920</id><snippet>#plot it
ax = plt.subplot(111)
ax.bar(bin, data, width, color='r')
plt.xlim([0,bin.size])
plt.show()
</snippet></ROW><ROW><id>20218562</id><snippet>atexit</snippet></ROW><ROW><id>20218562</id><snippet>sys.exit(0)</snippet></ROW><ROW><id>20218562</id><snippet>atexit</snippet></ROW><ROW><id>20218562</id><snippet>import time, atexit
import RPi.GPIO as GPIO

GPIO.setmode(GPIO.BOARD)

def exit_handler():
    GPIO.cleanup()
    print 'STOPPED'

atexit.register(exit_handler)

while True:
    GPIO.output(11, True)
    GPIO.output(16, True)
    print "Forward"
    time.sleep(5)
</snippet></ROW><ROW><id>20218562</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>20218562</id><snippet>import time
import RPi.GPIO as GPIO

GPIO.setmode(GPIO.BOARD)

try:
    while True:
        GPIO.output(11, True)
        GPIO.output(16, True)
        print "Forward"
        time.sleep(5)
except KeyboardInterrupt:
    pass  # silence the interrupt
finally:
    GPIO.cleanup()
    print 'STOPPED'
</snippet></ROW><ROW><id>20218562</id><snippet>finally</snippet></ROW><ROW><id>20218562</id><snippet>GPIO.cleanup()</snippet></ROW><ROW><id>20218562</id><snippet>except KeyboardInterrupt</snippet></ROW><ROW><id>20218562</id><snippet>atexit()</snippet></ROW><ROW><id>20218562</id><snippet>atexit()</snippet></ROW><ROW><id>20218562</id><snippet>atexit()</snippet></ROW><ROW><id>20218672</id><snippet>os.system</snippet></ROW><ROW><id>20218672</id><snippet>subprocess</snippet></ROW><ROW><id>20218672</id><snippet>import subprocess
import time
argument = '...'
proc = subprocess.Popen(['python', 'bar.py', argument], shell=True)
time.sleep(3) # &lt;-- There's no time.wait, but time.sleep.
pid = proc.pid # &lt;--- access `pid` attribute to get the pid of the child process.
</snippet></ROW><ROW><id>20218672</id><snippet>terminate</snippet></ROW><ROW><id>20218672</id><snippet>kill</snippet></ROW><ROW><id>20218672</id><snippet>kill</snippet></ROW><ROW><id>20218672</id><snippet>proc.terminate()
</snippet></ROW><ROW><id>20218681</id><snippet>config = {
}

cherrypy.tree.mount(Root(), '/', config=config)

cherrypy.config.update({
    'tools.staticdir.debug': True,
    'log.screen': True,
    'server.socket_host': '127.0.0.1',
    'server.socket_port': *****,
    'tools.sessions.on': True,
    'tools.encode.on': True,
    'tools.encode.encoding': 'utf-8'
})

cherrypy.engine.start()
</snippet></ROW><ROW><id>20218681</id><snippet>@cherrypy.expose
def submit(self, myfile):

    cherrypy.session['myfile'] = myfile
    data_name = myfile.filename

    #Send back to JQuery with Ajax
    #Put in JSON form
    data_name= json.dumps(dict(title = data_name))

    #changed line
    #cherrypy.response.headers['Content-Type'] = 'application/json'

    return data_name
</snippet></ROW><ROW><id>20218850</id><snippet>Example if the number is 2134

A[0] = 1.
second digit is 1. Hence A[1] is at least = A[0] = 1. 
Also, 21 can make a valid character code as well. 
Hence, A[1] becomes 1 + 1 = 2.

The two strings possible upto A[1] are 2,1 and 21.

Third digit is 3. Hence A[2] is at least = A[1] = 2. 
Also, 13 can make a valid character code.
Hence additional possibilities can result if we consider 13 as a single character = A[2].
Hence A[3] = 2 + 1 = 3 ({2,1,3}, {21,3}, {2,13})

Simililarly for A[4].
</snippet></ROW><ROW><id>20218963</id><snippet>try:
    from bs4 import BeautifulSoup as bs
except:
    from BeautifulSoup import BeautifulSoup as bs

bs.find_all = getattr(bs, 'find_all', False) or getattr(bs, 'findAll')
</snippet></ROW><ROW><id>20219034</id><snippet>urllib</snippet></ROW><ROW><id>20219034</id><snippet>urllib2</snippet></ROW><ROW><id>20219034</id><snippet>cookielib</snippet></ROW><ROW><id>20219034</id><snippet>requests</snippet></ROW><ROW><id>20219034</id><snippet>sessions</snippet></ROW><ROW><id>20219034</id><snippet>import requests

s = requests.session()
url = "http://www.snowbomb.com/my-account-2"
login_request = s.post(url, data=payload)
print login_request.text
logged_in_request = c.get(url)
print logged_in_request.text
</snippet></ROW><ROW><id>20219147</id><snippet>Division</snippet></ROW><ROW><id>20219147</id><snippet>league_name = league.name
league_type = league.league_type
league_sex = league.league_sex
</snippet></ROW><ROW><id>20219147</id><snippet>division = Division.objects.get(id=some_id)
league = division.league
print league.name
print league.league_type
</snippet></ROW><ROW><id>20219257</id><snippet>filename</snippet></ROW><ROW><id>20219257</id><snippet>testing</snippet></ROW><ROW><id>20219257</id><snippet>os.rename(os.path.join('testing', filename),
          os.path.join('testing', filename[2:]))
</snippet></ROW><ROW><id>20219257</id><snippet>os.rename</snippet></ROW><ROW><id>20219257</id><snippet>testing</snippet></ROW><ROW><id>20219726</id><snippet>reTitle2 = re.compile(
            """
             ^([A-Z]{1}|[A-Z]{1}[a-z]*|[0-9]+)         # first part 
              (_[A-Z]{1}|_[A-Z]{1}[a-z]*|_[0-9]+)*     # zero or more times 
              ([A-Z]{1}|[A-Z]{1}[a-z]*|[0-9]+){0,1}$   # last part
            """
            , re.UNICODE | re.VERBOSE)
</snippet></ROW><ROW><id>20219933</id><snippet>numpy.random.seed(x)
</snippet></ROW><ROW><id>20219933</id><snippet>x</snippet></ROW><ROW><id>20220366</id><snippet>a = [ [1, 'test', 12, 'toronto'], [2, 'test', 145, 'montreal'] ]
a = [ [e [:5] if i == 3 else e for i, e in enumerate (line)] for line in a]
print (a)
</snippet></ROW><ROW><id>20220366</id><snippet>i</snippet></ROW><ROW><id>20220366</id><snippet>i in (3, 5)</snippet></ROW><ROW><id>20220366</id><snippet>a = [[1, 'test', 12, 'toronto'], [2, 'test', 145, 'montreal']]
shorten = {1: 2, 3: 4} #shorten column 1 to length 2, and col 3 to len 4
a = [[e[:shorten[i]] if i in shorten else e for i, e in enumerate(line)] for line in a]
print (a)
</snippet></ROW><ROW><id>20220571</id><snippet>get_bounding_rect</snippet></ROW><ROW><id>20220571</id><snippet>pixel_rect = image.get_bounding_rect()
</snippet></ROW><ROW><id>20220571</id><snippet>trimmed_surface = pygame.Surface(pixel_rect.size)
</snippet></ROW><ROW><id>20220571</id><snippet>image</snippet></ROW><ROW><id>20220571</id><snippet>pixel_rect</snippet></ROW><ROW><id>20220571</id><snippet>trimmed_surface</snippet></ROW><ROW><id>20220571</id><snippet>trimmed_surface.blit(image, (0,0), pixel_rect)
</snippet></ROW><ROW><id>20220571</id><snippet>trimmed_surface</snippet></ROW><ROW><id>20220571</id><snippet>pixel_rect</snippet></ROW><ROW><id>20220714</id><snippet>import sys
sys.path.append('/path/to/your/djangoproject/')
</snippet></ROW><ROW><id>20220828</id><snippet>rows = {"id":[1,2,3,4,5,6,7,8,9,10]}
rows['id'] = [1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt;rows['id'][5]
6
&gt;&gt;&gt; rows['id'][:5]
[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>20221030</id><snippet>d = {}
with open("dn0501.txt", "r") as f:
    for line in f:
       key, val = line.split()
       d[key] = int(val)
</snippet></ROW><ROW><id>20221135</id><snippet>pascalVals = raw_input('...').split()
</snippet></ROW><ROW><id>20221135</id><snippet>pascalVals[0]
pascalVals[1]
pascalVals[2]
</snippet></ROW><ROW><id>20221135</id><snippet>pascalVals = [int(x) for x in raw_input('...').split()]
</snippet></ROW><ROW><id>20221218</id><snippet>&gt;&gt;&gt; a = np.array([[[0, 1, 2], [3, 4, 5], [6, 7, 8]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]])
&gt;&gt;&gt; a[:,:,::-1]      #or a[..., ::-1]
array([[[ 2,  1,  0],
        [ 5,  4,  3],
        [ 8,  7,  6]],

       [[12, 11, 10],
        [15, 14, 13],
        [18, 17, 16]]])
</snippet></ROW><ROW><id>20221218</id><snippet>&gt;&gt;&gt; %timeit a[:,:,::-1]
1000000 loops, best of 3: 1.53 µs per loop
&gt;&gt;&gt; %timeit a[..., ::-1]
1000000 loops, best of 3: 1.06 µs per loop
</snippet></ROW><ROW><id>20221312</id><snippet>Download error on https://pypi.python.org/simple/matplotlib-venn/: [Errno 11004] getaddrinfo failed 
</snippet></ROW><ROW><id>20221312</id><snippet>Cannot fetch index base URL https://pypi.python.org/simple/ 
</snippet></ROW><ROW><id>20221312</id><snippet>easy_install</snippet></ROW><ROW><id>20221312</id><snippet>set http_proxy="user:password@server:port"
set https_proxy="user:password@server:port"
</snippet></ROW><ROW><id>20221312</id><snippet>-proxy</snippet></ROW><ROW><id>20221655</id><snippet>ExcelWriter</snippet></ROW><ROW><id>20221655</id><snippet>import pandas
from openpyxl import load_workbook

book = load_workbook('Masterfile.xlsx')
writer = pandas.ExcelWriter('Masterfile.xlsx') 
writer.book = book
writer.sheets = dict((ws.title, ws) for ws in book.worksheets)

data_filtered.to_excel(writer, "Main", cols=['Diff1', 'Diff2'])

writer.save()
</snippet></ROW><ROW><id>20221803</id><snippet>com.open</snippet></ROW><ROW><id>20221803</id><snippet>serial.Serial</snippet></ROW><ROW><id>20221803</id><snippet>open</snippet></ROW><ROW><id>20221803</id><snippet>with</snippet></ROW><ROW><id>20221803</id><snippet>with serial.Serial(port_name, 9600, ...) as com:
    com.flushInput()
    com.flushOutput()
    ...
</snippet></ROW><ROW><id>20221916</id><snippet>__new__</snippet></ROW><ROW><id>20221916</id><snippet>class A(object):
    def __new__(cls, *args, **kw):
        instance = super(A, cls).__new__(cls, *args, **kw)
        return [instance]
</snippet></ROW><ROW><id>20221916</id><snippet>&gt;&gt;&gt; class A(object):
...     def __new__(cls, *args, **kw):
...         instance = super(A, cls).__new__(cls, *args, **kw)
...         return [instance]
... 
&gt;&gt;&gt; A()
[&lt;__main__.A object at 0x10f33f390&gt;]
</snippet></ROW><ROW><id>20221916</id><snippet>__init__</snippet></ROW><ROW><id>20221916</id><snippet>isinstance(returned_value, A)</snippet></ROW><ROW><id>20221916</id><snippet>False</snippet></ROW><ROW><id>20221916</id><snippet>A.__init__()</snippet></ROW><ROW><id>20221916</id><snippet>class A(object):
    def __new__(cls, *args, **kw):
        instance = super(A, cls).__new__(cls, *args, **kw)
        if hasattr(cls, '__init__'):
            instance.__init__(*args, **kw)            
        return [instance]
</snippet></ROW><ROW><id>20222131</id><snippet>  UPDATE TwTbl
  SET LenTweet = length(text)
</snippet></ROW><ROW><id>20222143</id><snippet>beatport.get_raw_request_token()</snippet></ROW><ROW><id>20222143</id><snippet>GET</snippet></ROW><ROW><id>20222143</id><snippet>POST</snippet></ROW><ROW><id>20222237</id><snippet>N</snippet></ROW><ROW><id>20222237</id><snippet>B1</snippet></ROW><ROW><id>20222237</id><snippet>B[N] = B1(N[:, None], I)
</snippet></ROW><ROW><id>20222237</id><snippet>Y</snippet></ROW><ROW><id>20222237</id><snippet>C</snippet></ROW><ROW><id>20222237</id><snippet>np.einsum</snippet></ROW><ROW><id>20222237</id><snippet>np.dot</snippet></ROW><ROW><id>20222237</id><snippet>C[M[:, None], N] = np.einsum('ij,kj-&gt;ik',
        B[M]/np.square(qi*Iq[0, :, 2]),
        B[N])

Y[M] = np.einsum('i, ki-&gt;k',
        U[0, :, 1]/np.square(qi*Iq[0, :, 2]),
        B[M])
</snippet></ROW><ROW><id>20222237</id><snippet>In [1]: a = np.arange(3)

In [2]: a
Out[2]: array([0, 1, 2])

In [3]: a[:, None]
Out[3]: 
array([[0],
       [1],
       [2]])

In [4]: b = np.arange(4,1,-1)

In [5]: b
Out[5]: array([4, 3, 2])

In [6]: a[:, None] * b
Out[6]: 
array([[0, 0, 0],
       [4, 3, 2],
       [8, 6, 4]])
</snippet></ROW><ROW><id>20222237</id><snippet>In [92]: %%timeit
   ....: B = np.zeros((18, 551))
   ....: C = np.zeros((18, 18))
   ....: Y = np.zeros((18))
   ....: for n in N:
   ....:     B[n, :] = B1(n, I)
   ....: for m in M:
   ....:     for n in N:
   ....:         C[m, n] = np.dot((1/np.square(qi*Iq[0, :, 2]))*B[m, :], B[n, :])
   ....:     Y[m] = np.dot((1/np.square(qi*Iq[0, :, 2]))*U[0, :, 1], B[m, :])
   ....: 
100 loops, best of 3: 15.8 ms per loop

In [93]: %%timeit
   ....: Bv = np.zeros((18, 551))
   ....: Cv = np.zeros((18, 18))
   ....: Yv = np.zeros((18))
   ....: Bv[N] = B1(N[:, None], I)
   ....: Cv[M[:, None], N] = np.einsum('ij,kj-&gt;ik', B[M]/np.square(qi*Iq[0, :, 2]), B[N])
   ....: Yv[M] = np.einsum('i, ki-&gt;k', U[0, :, 1]/np.square(qi*Iq[0, :, 2]), B[M])
   ....: 
1000 loops, best of 3: 1.34 ms per loop
</snippet></ROW><ROW><id>20222237</id><snippet>import numpy as np

# make fake data:
np.random.seed(5)

qi = np.random.rand(551)
N = np.random.randint(0,18,18)#np.arange(18)
M = np.random.randint(0,18,18)#np.arange(18)
I = np.arange(551)
Iq = np.random.rand(1, 551, 3)
U = np.random.rand(1, 551, 3)

B = np.zeros((18, 551))
C = np.zeros((18, 18))
Y = np.zeros((18))
Bv = np.zeros((18, 551))
Cv = np.zeros((18, 18))
Yv = np.zeros((18))

dmaxi = 1.

def B1(n, i):
    return np.pi * n * dmaxi * (-1)**(n+1) * np.sin(qi[i]*dmaxi) * ((np.pi*n)**2 - (qi[i]*dmaxi)**2)**(-1)

for n in N:
    B[n, :] = B1(n, I)

for m in M:
    for n in N:
        C[m, n] = np.dot((1/np.square(qi*Iq[0, :, 2]))*B[m, :], B[n, :])
    Y[m] = np.dot((1/np.square(qi*Iq[0, :, 2]))*U[0, :, 1], B[m, :])

Bv[N] = B1(N[:, None], I)
print "B correct?", np.allclose(Bv, B)

# np.einsum test case:
n, m = 2, 3
a = np.arange(n*m).reshape(n,m)*8 + 2
b = np.arange(n*m)[::-1].reshape(n,m)
c = np.empty((n,n))
for i in range(n):
    for j in range(n):
        c[i,j] = np.dot(a[i],b[j])
cv = np.einsum('ij,kj-&gt;ik', a, b)
print "einsum test successful?", np.allclose(c,cv)

Cv[M[:, None], N] = np.einsum('ij,kj-&gt;ik',
        B[M]/np.square(qi*Iq[0, :, 2]),
        B[N])
print "C correct?", np.allclose(Cv, C)

Yv[M] = np.einsum('i, ki-&gt;k',
        U[0, :, 1]/np.square(qi*Iq[0, :, 2]),
        B[M])
print "Y correct?", np.allclose(Yv, Y)
</snippet></ROW><ROW><id>20222237</id><snippet>B correct? True
einsum test successful? True
C correct? True
Y correct? True
</snippet></ROW><ROW><id>20222483</id><snippet>Q()</snippet></ROW><ROW><id>20222483</id><snippet>Q()</snippet></ROW><ROW><id>20222483</id><snippet>query = Q(type__type=types[0])
for t in types[1:]:
    query |= Q(type__type=t)
projects.filter(query)
</snippet></ROW><ROW><id>20222645</id><snippet>itertools.accumulate()</snippet></ROW><ROW><id>20222645</id><snippet># Python 3.1 or before

import operator

def accumulate(iterable, func=operator.add):
    'Return running totals'
    # accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15
    # accumulate([1,2,3,4,5], operator.mul) --&gt; 1 2 6 24 120
    it = iter(iterable)
    total = next(it)
    yield total
    for element in it:
        total = func(total, element)
        yield total

# Python 3.2 and newer can use
# from itertools import accumulate

array = list(accumulate(rand(100)))
</snippet></ROW><ROW><id>20222645</id><snippet>range(10)</snippet></ROW><ROW><id>20222645</id><snippet>rand(100)</snippet></ROW><ROW><id>20222645</id><snippet>&gt;&gt;&gt; list(accumulate(range(10)))
[0, 1, 3, 6, 10, 15, 21, 28, 36, 45]
</snippet></ROW><ROW><id>20222706</id><snippet>Process()</snippet></ROW><ROW><id>20222706</id><snippet>Process</snippet></ROW><ROW><id>20222706</id><snippet>Process()</snippet></ROW><ROW><id>20222706</id><snippet>fork</snippet></ROW><ROW><id>20222706</id><snippet>Process()</snippet></ROW><ROW><id>20222706</id><snippet>Process()</snippet></ROW><ROW><id>20222706</id><snippet>if __name__ == "__main__"
</snippet></ROW><ROW><id>20222706</id><snippet>if-statement</snippet></ROW><ROW><id>20222814</id><snippet>&lt;span&gt;View Comments (2077)&lt;/span&gt;
</snippet></ROW><ROW><id>20222814</id><snippet>http://news.yahoo.com/_xhr/contentcomments/get_comments/?content_id=42f7f6e0-7bae-33d3-aa1d-3dfc7fb5cdfc&amp;_device=full&amp;count=10&amp;sortBy=highestRated&amp;isNext=true&amp;offset=20&amp;pageNumber=2&amp;_media.modules.content_comments.switches._enable_view_others=1&amp;_media.modules.content_comments.switches._enable_mutecommenter=1&amp;enable_collapsed_comment=1
</snippet></ROW><ROW><id>20222814</id><snippet>go to this url: http://news.yahoo.com/_xhr/contentcomments/get_comments/
include these parameters: {'_device': 'full',
          '_media.modules.content_comments.switches._enable_mutecommenter': '1',
          '_media.modules.content_comments.switches._enable_view_others': '1',
          'content_id': '42f7f6e0-7bae-33d3-aa1d-3dfc7fb5cdfc',
          'count': '10',
          'enable_collapsed_comment': '1',
          'isNext': 'true',
          'offset': '20',
          'pageNumber': '2',
          'sortBy': 'highestRated'}
</snippet></ROW><ROW><id>20222833</id><snippet>.py</snippet></ROW><ROW><id>20222833</id><snippet>startup</snippet></ROW><ROW><id>20222833</id><snippet>import sys

if "matplotlib" in sys.modules:
   # Do something 
   print
   print "This seems to be working"
</snippet></ROW><ROW><id>20222833</id><snippet>sys.modules</snippet></ROW><ROW><id>20223083</id><snippet>string FreeBusy(
DateTime Start,
int MinPerChar,
Object CompleteFormat
</snippet></ROW><ROW><id>20223083</id><snippet>import datetime

#Then declare the my_date variable as datetime.date.

my_date = datetime.date(2013,11,23)
str_Free_Busy_Data = obj_Recipient.FreeBusy(my_date, 11)
</snippet></ROW><ROW><id>20223183</id><snippet>- consists of 2 or more arguments (eg. --eia key1 1 2 3) (see last point)
</snippet></ROW><ROW><id>20223183</id><snippet>nargs</snippet></ROW><ROW><id>20223183</id><snippet>2 or more</snippet></ROW><ROW><id>20223183</id><snippet>re {n,m}</snippet></ROW><ROW><id>20223183</id><snippet>nargs='+'</snippet></ROW><ROW><id>20223183</id><snippet>parse_args</snippet></ROW><ROW><id>20223183</id><snippet>type</snippet></ROW><ROW><id>20223183</id><snippet>- is optional
</snippet></ROW><ROW><id>20223183</id><snippet>--eia</snippet></ROW><ROW><id>20223183</id><snippet>- edit it can occour multiple times, eg. --eia key1 1,2 --eia key2 2,1 is valid
</snippet></ROW><ROW><id>20223183</id><snippet>--eia</snippet></ROW><ROW><id>20223183</id><snippet>action='append'</snippet></ROW><ROW><id>20223183</id><snippet>args.eia = [['key1','1','2'],['key2',...],...]</snippet></ROW><ROW><id>20223183</id><snippet>- the type of the first argument may differ from the type of the rest
</snippet></ROW><ROW><id>20223183</id><snippet>type</snippet></ROW><ROW><id>20223183</id><snippet>action</snippet></ROW><ROW><id>20223183</id><snippet>argparse</snippet></ROW><ROW><id>20223183</id><snippet>- other optional arguments like this can exist
</snippet></ROW><ROW><id>20223183</id><snippet>- the example has the delimiter of a , but I'd like to allow delimiting with spaces, because my actual argument values may be strings and I'd like to leave parsing them to the shell (if a string should start with -, quotation marks help: "-asdf")
</snippet></ROW><ROW><id>20223183</id><snippet>argparse</snippet></ROW><ROW><id>20223183</id><snippet>sys.argv</snippet></ROW><ROW><id>20223183</id><snippet>argparse.parse_args(argv)</snippet></ROW><ROW><id>20223183</id><snippet>argparse</snippet></ROW><ROW><id>20223183</id><snippet>parser.parse_args('--eia key1 1,2 --eia key2 2,1'.split())
</snippet></ROW><ROW><id>20223187</id><snippet>xdata</snippet></ROW><ROW><id>20223187</id><snippet>matplotlib.dates.date2num</snippet></ROW><ROW><id>20223187</id><snippet>xys</snippet></ROW><ROW><id>20223427</id><snippet>import json

datastore = json.load(open("file.json")) // load the file

datastore["new"] = "new value" // do something with your data

json.dump(datastore, open("file.json", "w")) // save data back to your file
</snippet></ROW><ROW><id>20223467</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>20223467</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>20223467</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; lis = [1,2,3,1,2,3,1,2,3]
&gt;&gt;&gt; d = OrderedDict()
&gt;&gt;&gt; for i, item in enumerate(lis):
    d.setdefault(item, []).append(i)
...     
&gt;&gt;&gt; d.values()
[[0, 3, 6], [1, 4, 7], [2, 5, 8]]
</snippet></ROW><ROW><id>20223553</id><snippet>StringBuilder</snippet></ROW><ROW><id>20223553</id><snippet>String</snippet></ROW><ROW><id>20223553</id><snippet>StringBuilder</snippet></ROW><ROW><id>20223553</id><snippet>theShift</snippet></ROW><ROW><id>20223553</id><snippet>0x</snippet></ROW><ROW><id>20223553</id><snippet>Integer.toString(x, 16)</snippet></ROW><ROW><id>20223553</id><snippet>0x</snippet></ROW><ROW><id>20223553</id><snippet>String result = "";
for (String thisHex : theHexArray) {
    result += Integer.toString(Integer.parseInt(thisHex, 16) + theShift, 16) + " ";
}
</snippet></ROW><ROW><id>20223553</id><snippet>toText</snippet></ROW><ROW><id>20223573</id><snippet>np.ogrid</snippet></ROW><ROW><id>20223573</id><snippet>import numpy as np

A = np.arange(27).reshape([3,3,3])
B = np.zeros(A.size)
i, j, k = np.ogrid[0:3, 0:3, 0:3]
B[i+j+k] = A
print(B)
</snippet></ROW><ROW><id>20223573</id><snippet>[  0.   9.  18.  21.  24.  25.  26.   0.   0.   0.   0.   0.   0.   0.   0.
   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.]
</snippet></ROW><ROW><id>20223573</id><snippet>B[X] = A
</snippet></ROW><ROW><id>20223573</id><snippet>B[X.ravel()] = A.ravel()
</snippet></ROW><ROW><id>20223573</id><snippet>X</snippet></ROW><ROW><id>20223573</id><snippet>B</snippet></ROW><ROW><id>20223613</id><snippet>&lt;head&gt;</snippet></ROW><ROW><id>20223613</id><snippet>&lt;head&gt;
&lt;link rel="stylesheet" type="text/css" href="xxx"/&gt;
&lt;style&gt;
body
{
    background-color: {{ colour }};
}
&lt;/style&gt;
&lt;/head&gt;
</snippet></ROW><ROW><id>20223613</id><snippet>Colours={'Grey': ['#999', '#ccc', '#ddd'], 'Blue': ['#00f', '#77f', '#aaf']}
</snippet></ROW><ROW><id>20223613</id><snippet>Colours['Blue']</snippet></ROW><ROW><id>20223613</id><snippet>Colour</snippet></ROW><ROW><id>20223613</id><snippet>&lt;style&gt;
body
{
    background-color: {{ Colour.0 }};
    color: {{ Colour.1 }};
}
div.misc
{
    background-color: {{ Colour.2 }};
}
&lt;/style&gt;
</snippet></ROW><ROW><id>20223624</id><snippet>lang</snippet></ROW><ROW><id>20223624</id><snippet>langMatches</snippet></ROW><ROW><id>20223624</id><snippet>lang</snippet></ROW><ROW><id>20223624</id><snippet>langMatches</snippet></ROW><ROW><id>20223624</id><snippet>lang</snippet></ROW><ROW><id>20223624</id><snippet>""</snippet></ROW><ROW><id>20223624</id><snippet>language-range   = (1*8ALPHA *("-" 1*8alphanum)) / "*"
alphanum         = ALPHA / DIGIT
</snippet></ROW><ROW><id>20223624</id><snippet>""</snippet></ROW><ROW><id>20223624</id><snippet>""</snippet></ROW><ROW><id>20223624</id><snippet>langMatches</snippet></ROW><ROW><id>20223624</id><snippet>filter</snippet></ROW><ROW><id>20223624</id><snippet>langMatches(lang(?obj),"")</snippet></ROW><ROW><id>20223624</id><snippet>langMatches("","")</snippet></ROW><ROW><id>20223624</id><snippet>lang</snippet></ROW><ROW><id>20223624</id><snippet>""</snippet></ROW><ROW><id>20223624</id><snippet>langMatches(lang(?obj),"")</snippet></ROW><ROW><id>20223624</id><snippet>lang(?obj) = ""</snippet></ROW><ROW><id>20223624</id><snippet>SELECT count(*) WHERE { 
  dbpedia:Johann_Sebastian_Bach ?pred ?obj
  FILTER( langMatches(lang(?obj), "")  || langMatches(lang(?obj), "EN" ) )
}
</snippet></ROW><ROW><id>20223624</id><snippet>distinct</snippet></ROW><ROW><id>20223624</id><snippet>distinct</snippet></ROW><ROW><id>20223624</id><snippet>distinct</snippet></ROW><ROW><id>20223624</id><snippet>select ?pred ?obj where { 
  dbpedia:Johann_Sebastian_Bach ?pred ?obj
  filter( langMatches(lang(?obj), "") || langMatches(lang(?obj), "EN") )
}
</snippet></ROW><ROW><id>20223852</id><snippet>request.__dict__</snippet></ROW><ROW><id>20223855</id><snippet>Py_GetVersion()</snippet></ROW><ROW><id>20223855</id><snippet>"1.5 (#67, Dec 31 1997, 22:34:28) [GCC 2.7.2.2]"
</snippet></ROW><ROW><id>20223855</id><snippet>sys.version</snippet></ROW><ROW><id>20223890</id><snippet>with open('foo.txt', 'wb') as f:
  f.write(b64Val)
</snippet></ROW><ROW><id>20223952</id><snippet>word</snippet></ROW><ROW><id>20223952</id><snippet>sum()</snippet></ROW><ROW><id>20223952</id><snippet>def find_value(word):
    return sum(value_list[char] for char in word)
</snippet></ROW><ROW><id>20223964</id><snippet>In [22]: df1 = df.groupby(['k1', 'k2', 'k3'])['v1'].sum()

In [23]: df2 = df.groupby(['k1', 'k2'])['v2'].sum()

In [24]: df1.reset_index().join(df2, on=['k1', 'k2'])
Out[24]:
    k1   k2   k3  v1   v2  
0  bar  baz  foo  40   90  
1  foo  bar  baz  35  160 
2  foo  bar  qux  35  160 
</snippet></ROW><ROW><id>20224035</id><snippet>n = [len(x) * k % m for x in S]
</snippet></ROW><ROW><id>20224062</id><snippet>__gte</snippet></ROW><ROW><id>20224062</id><snippet>__lte</snippet></ROW><ROW><id>20224062</id><snippet>__gt</snippet></ROW><ROW><id>20224062</id><snippet>__lt</snippet></ROW><ROW><id>20224062</id><snippet>verifications = Verification.objects.filter(asset_code__gte=fr, asset_code__lte=to)
</snippet></ROW><ROW><id>20224070</id><snippet>room</snippet></ROW><ROW><id>20224070</id><snippet>RecordDinningRoom</snippet></ROW><ROW><id>20224070</id><snippet>record = RecordDinningRoom(
    on_off=dinningroom.on_off,
    temp=dinningroom.temp,
    room=instance
)
</snippet></ROW><ROW><id>20224546</id><snippet>int</snippet></ROW><ROW><id>20224546</id><snippet>import __builtin__

if not isinstance(int('0'), __builtin__.int):
    # uhoh, Squish replaced `int()` with a thoroughly broken version
    # replace it back for this module
    int = __builtin__.int
</snippet></ROW><ROW><id>20224579</id><snippet>join</snippet></ROW><ROW><id>20224579</id><snippet>row_number()</snippet></ROW><ROW><id>20224579</id><snippet>select
    a.date, d.symbol, d.price, m.to_symbol as mapping,
from (
    select
        d.date, d.symbol, d.price, m.to_symbol as mapping,
        row_number() over(partition by d.date, d.symbol order by m.end_date asc) as rn
    from df as d
        inner join mapping as m on m.from_symbol = d.symbol and d.date &lt;= m.end_date
) as a
where a.rn = 1
</snippet></ROW><ROW><id>20224579</id><snippet>date, symbol</snippet></ROW><ROW><id>20224579</id><snippet># merge data on symbols
&gt;&gt;&gt; res = pd.merge(df, mapping, left_on='symbol', right_on='from_symbol')

# remove all records where date &gt; end_date
&gt;&gt;&gt; res = res[res['date'] &lt;= res['end_date']]

# for each combination of date, symbol get only first occurence
&gt;&gt;&gt; res = res.groupby(['date','symbol'], as_index=False, sort=lambda x: x['end_date']).first()

# subset result
&gt;&gt;&gt; res = res[['date','symbol','to_symbol','price']]
&gt;&gt;&gt; res
         date symbol to_symbol  price
0  2001-01-02   GCF5     GCF05   1000
1  2001-01-02   GCZ5     GCZ15   1001
2  2001-01-03   GCF5     GCF05   1002
3  2001-01-03   GCZ5     GCZ15   1003
4  2001-01-04   GCF5     GCF15   1004
5  2001-01-04   GCZ5     GCZ15   1005
</snippet></ROW><ROW><id>20224579</id><snippet>mapping2</snippet></ROW><ROW><id>20224579</id><snippet>outer apply</snippet></ROW><ROW><id>20224579</id><snippet>select
    d.date, d.symbol, d.price, m.to_symbol as mapping,
from df as d
    outer apply (
        select top 1
            m.to_symbol
        from mapping as m
        where m.from_symbol = d.symbol and d.date &lt;= m.end_date
        order by m.end_date asc
    ) as m
</snippet></ROW><ROW><id>20224579</id><snippet>mapping</snippet></ROW><ROW><id>20224579</id><snippet>&gt;&gt;&gt; mapping2 = mapping.set_index(['from_symbol', 'end_date']).sort_index()
&gt;&gt;&gt; mapping2
                       to_symbol
from_symbol end_date            
GCF5        2001-01-03     GCF05
            2001-12-31     GCF15
GCZ5        2001-12-31     GCZ15
&gt;&gt;&gt; df['mapping'] = df.apply(lambda x: mapping2.loc[x['symbol']][x['date']:].values[0][0], axis=1)
&gt;&gt;&gt; df
         date  price symbol mapping
0  2001-01-02   1000   GCF5   GCF05
1  2001-01-02   1001   GCZ5   GCZ15
2  2001-01-03   1002   GCF5   GCF05
3  2001-01-03   1003   GCZ5   GCZ15
4  2001-01-04   1004   GCF5   GCF15
5  2001-01-04   1005   GCZ5   GCZ15
</snippet></ROW><ROW><id>20224581</id><snippet>#!/usr/bin/python

import sys, csv, os

inputfile=sys.argv[1]
outputfile=sys.argv[1] + '.filter'
newtext=' '

print inputfile
print outputfile

with open(inputfile, "rb") as input:
 with open(outputfile, "wb") as output:
w = csv.writer(output, delimiter=',', quotechar='"', quoting=csv.QUOTE_NONNUMERIC, lineterminator='\n')
for record in csv.reader(input):
    w.writerow(tuple(s.replace("\n", newtext) for s in record))

os.rename(outputfile, inputfile)
</snippet></ROW><ROW><id>20224581</id><snippet>perl -pi -le 's/""//g' data</snippet></ROW><ROW><id>20224699</id><snippet>comments = re.split("(\d{4}/\d{2}/\d{2})",open("some_file.txt").read().strip())
date_comment_pairs = zip(*[iter(comments)]*2)
comments_and_users = [x[1].split("More")[0].strip() for x in date_comment_pairs]
comments_alone = ["\n".join(x.splitlines()[1:]) for x in comments_and_users]
</snippet></ROW><ROW><id>20224813</id><snippet>Thread.join()</snippet></ROW><ROW><id>20224813</id><snippet>def run_a():
    global NUM_PHILOSOPHER
    global MEAL
    threads = []
    for i in range(NUM_PHILOSOPHER):
        phil = Thread(target = philosophize_footman, args = (i,MEAL))
        phil.start()
        threads.append(phil)

    for t in threads:
        t.join()
</snippet></ROW><ROW><id>20224813</id><snippet>Thread.join()</snippet></ROW><ROW><id>20224904</id><snippet>{% extends %}</snippet></ROW><ROW><id>20224904</id><snippet>{% block %}</snippet></ROW><ROW><id>20224904</id><snippet>&lt;html&gt;
    &lt;head&gt;
       &lt;js and css etc&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;some more html /&gt;
    {% block content %}
        &lt;p&gt;generic content that wont be shown if you render specific.html&lt;/p&gt;
    {% endblock %}
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>20224904</id><snippet>{% extends 'base.html' %}

{% block content %}
    &lt;p&gt;specific content that will be shown instead&lt;/p&gt;
{% endblock %}
</snippet></ROW><ROW><id>20224904</id><snippet>&lt;body class="{% block bodyclass %}{% endblock %}"&gt;
</snippet></ROW><ROW><id>20224980</id><snippet>ElementTree</snippet></ROW><ROW><id>20224980</id><snippet>ElementTree</snippet></ROW><ROW><id>20224980</id><snippet>from xml.etree import ElementTree as et

def indent(elem, level=0):
    i = "\n" + level*"  "
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + "  "
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
        for elem in elem:
            indent(elem, level+1)
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = i

D = {36322:(17,2),22388:(5,8)}

job = et.Element('JOB')
for itemnumber,(salesman,quantity) in D.items():
    item = et.SubElement(job,'ITEMNUMBER').text = str(itemnumber)
    et.SubElement(job,'SALESMAN').text = str(salesman)
    et.SubElement(job,'QUANTITY').text = str(quantity)
indent(job)
et.dump(job)
</snippet></ROW><ROW><id>20224980</id><snippet>&lt;JOB&gt;
  &lt;ITEMNUMBER&gt;36322&lt;/ITEMNUMBER&gt;
  &lt;SALESMAN&gt;17&lt;/SALESMAN&gt;
  &lt;QUANTITY&gt;2&lt;/QUANTITY&gt;
  &lt;ITEMNUMBER&gt;22388&lt;/ITEMNUMBER&gt;
  &lt;SALESMAN&gt;5&lt;/SALESMAN&gt;
  &lt;QUANTITY&gt;8&lt;/QUANTITY&gt;
&lt;/JOB&gt;
</snippet></ROW><ROW><id>20224980</id><snippet>job = et.Element('JOB')
for itemnumber,(salesman,quantity) in D.items():
    item = et.SubElement(job,'ITEM')
    et.SubElement(item,'NUMBER').text = str(itemnumber)
    et.SubElement(item,'SALESMAN').text = str(salesman)
    et.SubElement(item,'QUANTITY').text = str(quantity)
</snippet></ROW><ROW><id>20224980</id><snippet>&lt;JOB&gt;
  &lt;ITEM&gt;
    &lt;NUMBER&gt;36322&lt;/NUMBER&gt;
    &lt;SALESMAN&gt;17&lt;/SALESMAN&gt;
    &lt;QUANTITY&gt;2&lt;/QUANTITY&gt;
  &lt;/ITEM&gt;
  &lt;ITEM&gt;
    &lt;NUMBER&gt;22388&lt;/NUMBER&gt;
    &lt;SALESMAN&gt;5&lt;/SALESMAN&gt;
    &lt;QUANTITY&gt;8&lt;/QUANTITY&gt;
  &lt;/ITEM&gt;
&lt;/JOB&gt;
</snippet></ROW><ROW><id>20225132</id><snippet>http://localhost:8000/?wsdl</snippet></ROW><ROW><id>20225295</id><snippet>from contextlib import contextmanager
import io
import os


@contextmanager
def inplace(filename, mode='r', buffering=-1, encoding=None, errors=None,
            newline=None, backup_extension=None):
    """Allow for a file to be replaced with new content.

    yields a tuple of (readable, writable) file objects, where writable
    replaces readable.

    If an exception occurs, the old file is restored, removing the
    written data.

    mode should *not* use 'w', 'a' or '+'; only read-only-modes are supported.

    """

    # move existing file to backup, create new file with same permissions
    # borrowed extensively from the fileinput module
    if set(mode) &amp; set('wa+'):
        raise ValueError('Only read-only file modes can be used')

    backupfilename = filename + (backup_extension or os.extsep + 'bak')
    try:
        os.unlink(backupfilename)
    except os.error:
        pass
    os.rename(filename, backupfilename)
    readable = io.open(backupfilename, mode, buffering=buffering,
                       encoding=encoding, errors=errors, newline=newline)
    try:
        perm = os.fstat(readable.fileno()).st_mode
    except OSError:
        writable = open(filename, 'w' + mode.replace('r', ''),
                        buffering=buffering, encoding=encoding, errors=errors,
                        newline=newline)
    else:
        os_mode = os.O_CREAT | os.O_WRONLY | os.O_TRUNC
        if hasattr(os, 'O_BINARY'):
            os_mode |= os.O_BINARY
        fd = os.open(filename, os_mode, perm)
        writable = io.open(fd, "w" + mode.replace('r', ''), buffering=buffering,
                           encoding=encoding, errors=errors, newline=newline)
        try:
            if hasattr(os, 'chmod'):
                os.chmod(filename, perm)
        except OSError:
            pass
    try:
        yield readable, writable
    except Exception:
        # move backup back
        try:
            os.unlink(filename)
        except os.error:
            pass
        os.rename(backupfilename, filename)
        raise
    finally:
        readable.close()
        writable.close()
        try:
            os.unlink(backupfilename)
        except os.error:
            pass
</snippet></ROW><ROW><id>20225295</id><snippet>csv</snippet></ROW><ROW><id>20225295</id><snippet>with inplace(csvfilename, 'rb') as (infh, outfh):
    reader = csv.reader(infh)
    writer = csv.writer(outfh)

    for row in reader:
        row += ['new', 'column']
        writer.writerow(row)
</snippet></ROW><ROW><id>20225470</id><snippet>Content-Type:</snippet></ROW><ROW><id>20225470</id><snippet>\nContent-Type:</snippet></ROW><ROW><id>20225470</id><snippet>&gt;&gt;&gt; '''\
This is the first line.
This is the second line.
'''
'This is the first line.\nThis is the second line.\n'
&gt;&gt;&gt; '''
... This is the first line.
... This is the second line.
... '''
'\nThis is the first line.\nThis is the second line.\n'
</snippet></ROW><ROW><id>20225470</id><snippet>\n</snippet></ROW><ROW><id>20225704</id><snippet>frac</snippet></ROW><ROW><id>20225704</id><snippet>ax.set_thetagrids</snippet></ROW><ROW><id>20225704</id><snippet>labelpad</snippet></ROW><ROW><id>20225704</id><snippet>plt.xlabel</snippet></ROW><ROW><id>20225704</id><snippet>plt.ylabel</snippet></ROW><ROW><id>20225704</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as tkr

def main():
    data = [ 10.49531611,  22.49511583,  10.90891806,  18.99525417,
            21.57165972,   6.687755  ,   6.52137028,  15.86534639,
            18.53823556,   6.32563583,  12.99365833,  11.06817056,
            17.29261306,  15.31288556,  19.16236667,  10.38483333,
            14.51442222,  17.01413611,   6.96102278,  15.98508611,
            16.5287    ,  15.26533889,  20.83520278,  17.21952056,
             7.3225775 ,  16.42534361,  14.38649722,  21.63573111,  16.19249444]
    data = np.array(data)*60*60
    plot_clock(data)
    plt.show()

def plot_clock(data):
    def hour_formatAM(x, p):
        hour = x * 6 / np.pi
        return '{:0.0f}:00'.format(hour) if x &gt; 0 else '12:00'

    def hour_formatPM(x, p):
        hour = x * 6 / np.pi
        return '{:0.0f}:00'.format(hour + 12) if x &gt; 0 else '24:00'

    def plot(ax, theta, counts, formatter):
        colors = plt.cm.jet(theta / 12.0)
        ax.bar(theta, counts, width=np.pi/6, color=colors, alpha=0.5)
        ax.xaxis.set_major_formatter(tkr.FuncFormatter(formatter))

    plt.rcParams['font.size'] = 8

    bins = np.r_[0, 0.5:12, 12, 12.5:24,  23.99999]
    data = np.array(data) / (60*60)
    counts = np.histogram(data,bins)[0]

    counts[13] += counts[0]
    counts[-1] += counts[13]

    fig, axes = plt.subplots(ncols=2, figsize=(5.5, 3), dpi=200,
                             subplot_kw=dict(projection='polar'))
    fig.subplots_adjust(wspace=0.4)
    for ax in axes:
        ax.set(theta_offset=np.pi/2, theta_direction=-1,
               xticks=np.arange(0, np.pi*2, np.pi/6),
               yticks=np.arange(1, counts.max()))

    plot(axes[0], bins[1:13] * np.pi / 6, counts[1:13], hour_formatAM)
    plot(axes[1], bins[14:26] * np.pi / 6, counts[14:26], hour_formatPM)

main()
</snippet></ROW><ROW><id>20225704</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as tkr

def main():
    data = [ 10.49531611,  22.49511583,  10.90891806,  18.99525417,
            21.57165972,   6.687755  ,   6.52137028,  15.86534639,
            18.53823556,   6.32563583,  12.99365833,  11.06817056,
            17.29261306,  15.31288556,  19.16236667,  10.38483333,
            14.51442222,  17.01413611,   6.96102278,  15.98508611,
            16.5287    ,  15.26533889,  20.83520278,  17.21952056,
             7.3225775 ,  16.42534361,  14.38649722,  21.63573111,  16.19249444]
    data = np.array(data)*60*60
    axes = plot_clock(data)
    for ax in axes:
        realign_polar_xticks(ax)
    plt.show()

def realign_polar_xticks(ax):
    for x, label in zip(ax.get_xticks(), ax.get_xticklabels()):
        if np.sin(x) &gt; 0.1:
            label.set_horizontalalignment('left')
        if np.sin(x) &lt; -0.1:
            label.set_horizontalalignment('right')

def plot_clock(data):
    def hour_formatAM(x, p):
        hour = x * 6 / np.pi
        return '{:0.0f}:00'.format(hour) if x &gt; 0 else '12:00'

    def hour_formatPM(x, p):
        hour = x * 6 / np.pi
        return '{:0.0f}:00'.format(hour + 12) if x &gt; 0 else '24:00'

    def plot(ax, theta, counts, formatter):
        colors = plt.cm.jet(theta / 12.0)
        ax.bar(theta, counts, width=np.pi/6, color=colors, alpha=0.5)
        ax.xaxis.set_major_formatter(tkr.FuncFormatter(formatter))

    plt.rcParams['font.size'] = 8

    bins = np.r_[0, 0.5:12, 12, 12.5:24,  23.99999]
    data = np.array(data) / (60*60)
    counts = np.histogram(data,bins)[0]

    counts[13] += counts[0]
    counts[-1] += counts[13]

    fig, axes = plt.subplots(ncols=2, figsize=(5.5, 3), dpi=200,
                             subplot_kw=dict(projection='polar'))
    fig.subplots_adjust(wspace=0.5)

    for ax in axes:
        ax.set(theta_offset=np.pi/2, theta_direction=-1,
               xticks=np.arange(0, np.pi*2, np.pi/6),
               yticks=np.arange(1, counts.max()))

    plot(axes[0], bins[1:13] * np.pi / 6, counts[1:13], hour_formatAM)
    plot(axes[1], bins[14:26] * np.pi / 6, counts[14:26], hour_formatPM)
    return axes

main()
</snippet></ROW><ROW><id>20225704</id><snippet>def realign_polar_xticks(ax):
    for theta, label in zip(ax.get_xticks(), ax.get_xticklabels()):
        theta = theta * ax.get_theta_direction() + ax.get_theta_offset()
        theta = np.pi/2 - theta
        y, x = np.cos(theta), np.sin(theta)
        if x &gt;= 0.1:
            label.set_horizontalalignment('left')
        if x &lt;= -0.1:
            label.set_horizontalalignment('right')
        if y &gt;= 0.5:
            label.set_verticalalignment('bottom')
        if y &lt;= -0.5:
            label.set_verticalalignment('top')
</snippet></ROW><ROW><id>20226158</id><snippet>d = [{"1":"value"},{"1":"second_value"},{"2":"third_value"},{"2":"fourth_value"},{"3":"fifth_value"}]

results = [{}]
for item in stuff:
    j,k = item.items()[0]  // Do the initial dicts always contain one key-value pair?
    for result in results:
        if j not in result:
            result[j] = k
            break
        if result == results[-1]:
            results.append(item)
            break
</snippet></ROW><ROW><id>20226158</id><snippet>[{'1': 'value', '3': 'fifth_value', '2': 'third_value'}, {'1': 'second_value', '2': 'fourth_value'}]
</snippet></ROW><ROW><id>20226167</id><snippet>if first == "a" or "e" or "i" or "o" or "u":
</snippet></ROW><ROW><id>20226167</id><snippet>if first in ('a', 'e', 'i', 'o', 'u'):  #or `if first in 'aeiou'`
</snippet></ROW><ROW><id>20226167</id><snippet>first == "a" or "e" or "i" or "o" or "u"</snippet></ROW><ROW><id>20226167</id><snippet>True</snippet></ROW><ROW><id>20226167</id><snippet>(first == "a") or ("e") or ("i") or ("o") or ("u")</snippet></ROW><ROW><id>20226167</id><snippet>&gt;&gt;&gt; bool('e')
True
</snippet></ROW><ROW><id>20226195</id><snippet>if t not in d[c][s]:
    d[c][s][t] = 1
else:
    d[c][s][t] += 1
</snippet></ROW><ROW><id>20226604</id><snippet>itertools.compress</snippet></ROW><ROW><id>20226604</id><snippet>&gt;&gt;&gt; from itertools import compress, imap
&gt;&gt;&gt; import operator
&gt;&gt;&gt; lis = range(10)
&gt;&gt;&gt; output = [random.choice([True, False]) for _ in xrange(10)]
&gt;&gt;&gt; output
[True, True, False, False, False, False, False, False, False, False]
&gt;&gt;&gt; truthy = list(compress(lis, output))
&gt;&gt;&gt; truthy
[0, 1]
&gt;&gt;&gt; falsy = list(compress(lis, imap(operator.not_,output)))
&gt;&gt;&gt; falsy
[2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>20226604</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.random.random(10)*10
&gt;&gt;&gt; a
array([ 2.94518349,  0.09536957,  8.74605883,  4.05063779,  2.11192606,
        2.24215582,  7.02203768,  2.1267423 ,  7.6526713 ,  3.81429322])
&gt;&gt;&gt; output = np.array([True, True, False, False, False, False, False, False, False, False])
&gt;&gt;&gt; a[output]
array([ 2.94518349,  0.09536957])
&gt;&gt;&gt; a[~output]
array([ 8.74605883,  4.05063779,  2.11192606,  2.24215582,  7.02203768,
        2.1267423 ,  7.6526713 ,  3.81429322])
</snippet></ROW><ROW><id>20226604</id><snippet>&gt;&gt;&gt; lis = range(1000)
&gt;&gt;&gt; output = [random.choice([True, False]) for _ in xrange(1000)]
&gt;&gt;&gt; a = np.random.random(1000)*100
&gt;&gt;&gt; output_n = np.array(output)
&gt;&gt;&gt; %timeit list(compress(lis, output))
10000 loops, best of 3: 44.9 us per loop
&gt;&gt;&gt; %timeit a[output_n]
10000 loops, best of 3: 20.9 us per loop
&gt;&gt;&gt; %timeit list(compress(lis, imap(operator.not_,output)))
1000 loops, best of 3: 150 us per loop
&gt;&gt;&gt; %timeit a[~output_n]
10000 loops, best of 3: 28.7 us per loop
</snippet></ROW><ROW><id>20226849</id><snippet>0</snippet></ROW><ROW><id>20226849</id><snippet>len(line) - 1</snippet></ROW><ROW><id>20226849</id><snippet>line</snippet></ROW><ROW><id>20226849</id><snippet>count</snippet></ROW><ROW><id>20226849</id><snippet>count</snippet></ROW><ROW><id>20226849</id><snippet>index</snippet></ROW><ROW><id>20226849</id><snippet>len(line)</snippet></ROW><ROW><id>20226849</id><snippet>count[index]</snippet></ROW><ROW><id>20226849</id><snippet>0</snippet></ROW><ROW><id>20226849</id><snippet>count[index] - 1</snippet></ROW><ROW><id>20226849</id><snippet>count[index]</snippet></ROW><ROW><id>20226849</id><snippet>for</snippet></ROW><ROW><id>20226849</id><snippet>line[index]</snippet></ROW><ROW><id>20226849</id><snippet>count[index]</snippet></ROW><ROW><id>20226849</id><snippet>index</snippet></ROW><ROW><id>20226849</id><snippet>index</snippet></ROW><ROW><id>20226849</id><snippet>0</snippet></ROW><ROW><id>20226849</id><snippet>len(line)</snippet></ROW><ROW><id>20226849</id><snippet>line[0]</snippet></ROW><ROW><id>20226849</id><snippet>a</snippet></ROW><ROW><id>20226849</id><snippet>count[0]</snippet></ROW><ROW><id>20226849</id><snippet>3</snippet></ROW><ROW><id>20226849</id><snippet>a</snippet></ROW><ROW><id>20226849</id><snippet>index</snippet></ROW><ROW><id>20226849</id><snippet>1</snippet></ROW><ROW><id>20226849</id><snippet>len(line)</snippet></ROW><ROW><id>20226849</id><snippet>line[1]</snippet></ROW><ROW><id>20226849</id><snippet>b</snippet></ROW><ROW><id>20226849</id><snippet>count[1]</snippet></ROW><ROW><id>20226849</id><snippet>4</snippet></ROW><ROW><id>20226849</id><snippet>b</snippet></ROW><ROW><id>20226849</id><snippet>index</snippet></ROW><ROW><id>20226849</id><snippet>6</snippet></ROW><ROW><id>20226849</id><snippet>while</snippet></ROW><ROW><id>20226849</id><snippet>for char, c in zip(line, count):
    print(c, c * char)
</snippet></ROW><ROW><id>20226850</id><snippet>Counter</snippet></ROW><ROW><id>20226850</id><snippet>from collections import Counter
def is_consistent(spec_a, spec_b):
    c1 = Counter(spec_a)
    c2 = Counter(spec_b)
    result = c1 - c2
    return all(result[key] == 0 for key in c1)
</snippet></ROW><ROW><id>20226850</id><snippet>Counter</snippet></ROW><ROW><id>20226850</id><snippet>.count</snippet></ROW><ROW><id>20226850</id><snippet>N</snippet></ROW><ROW><id>20227079</id><snippet>SELECT user.user_id, email, phone
  FROM user LEFT JOIN usertag
  ON usertag.user_id = user.user_id
    AND usertag.tag IN ('tag1', 'tag2')
  WHERE usertag.user_id IS NULL;
</snippet></ROW><ROW><id>20227174</id><snippet>1</snippet></ROW><ROW><id>20227174</id><snippet>pickle</snippet></ROW><ROW><id>20227174</id><snippet>help(pickle)</snippet></ROW><ROW><id>20227174</id><snippet>DATA
    APPEND = b'a'
    APPENDS = b'e'
    …
</snippet></ROW><ROW><id>20227174</id><snippet>autodata</snippet></ROW><ROW><id>20227174</id><snippet>#: Indicates some unknown error.
API_ERROR = 1
</snippet></ROW><ROW><id>20227174</id><snippet>#:</snippet></ROW><ROW><id>20227174</id><snippet>#:</snippet></ROW><ROW><id>20227174</id><snippet>enum</snippet></ROW><ROW><id>20227174</id><snippet>backport.enum</snippet></ROW><ROW><id>20227174</id><snippet>flufl.enum</snippet></ROW><ROW><id>20227174</id><snippet>flufl.enum</snippet></ROW><ROW><id>20227174</id><snippet>class MyErrors(enum.Enum):
    """Indicates some unknown error."""
    API_ERROR = 1

    """Indicates that the request was bad in some way."""
    BAD_REQUEST = 2

    """Indicates that the request is missing required parameters."""
    MISSING_PARAMS = 3
</snippet></ROW><ROW><id>20227174</id><snippet>help(MyErrors.MISSING_PARAMS)</snippet></ROW><ROW><id>20227333</id><snippet>first = word[0]
</snippet></ROW><ROW><id>20227333</id><snippet>word</snippet></ROW><ROW><id>20227333</id><snippet>first = word[:1]
</snippet></ROW><ROW><id>20227333</id><snippet>if len(original) &gt; 0 and original.isalpha():</snippet></ROW><ROW><id>20227333</id><snippet>first = word[0]</snippet></ROW><ROW><id>20227333</id><snippet>if len(original) &gt; 0)</snippet></ROW><ROW><id>20227333</id><snippet>if original</snippet></ROW><ROW><id>20227438</id><snippet>def onAbout(self):
    new_root = Tk()
    new_root.geometry("630x400+200+200")
    About(root)
</snippet></ROW><ROW><id>20227822</id><snippet>from django import template
from django.template.defaultfilters import stringfilter
from django.utils.text import slugify

register = template.Library()

@register.filter
@stringfilter
def germanslugify(value):
    replacements = [(u'ä', u'ae')]
    for (s, r) in replacements:
            value = value.replace(s, r)
    return slugify(value)
</snippet></ROW><ROW><id>20227948</id><snippet>N = 20

counter = 0
for a in range(1, N):
    if a%2 and a%3 and a%5:
        counter += 1
</snippet></ROW><ROW><id>20227948</id><snippet>counter</snippet></ROW><ROW><id>20227948</id><snippet>sum(1 for x in range(1, N) if all((x%2, x%3, x%5)))
=&gt; 6
</snippet></ROW><ROW><id>20227981</id><snippet>&gt;&gt;&gt; it = iter([9, 2, 4, 4, 1, 6, 7, 8, 17])
&gt;&gt;&gt; my_list = [[20, 15, 10], [15, 22, 37, 46], [22, 91]]
&gt;&gt;&gt; [[next(it) for i in j] for j in my_list]
[[9, 2, 4], [4, 1, 6, 7], [8, 17]]
</snippet></ROW><ROW><id>20228113</id><snippet>df1 != df2</snippet></ROW><ROW><id>20228113</id><snippet>_indexed_same</snippet></ROW><ROW><id>20228113</id><snippet>&gt;&gt;&gt; df = pd.concat([df1, df2])
&gt;&gt;&gt; df = df.reset_index(drop=True)
</snippet></ROW><ROW><id>20228113</id><snippet>&gt;&gt;&gt; df_gpby = df.groupby(list(df.columns))
</snippet></ROW><ROW><id>20228113</id><snippet>&gt;&gt;&gt; idx = [x[0] for x in df_gpby.groups.values() if len(x) == 1]
</snippet></ROW><ROW><id>20228113</id><snippet>&gt;&gt;&gt; df.reindex(idx)
         Date   Fruit   Num   Color
9  2013-11-25  Orange   8.6  Orange
8  2013-11-25   Apple  22.1     Red
</snippet></ROW><ROW><id>20228144</id><snippet>import numpy as np


def int2base(x, base, size=None, order='decreasing'):
    x = np.asarray(x)
    if size is None:
        size = int(np.ceil(np.log(np.max(x))/np.log(base)))
    if order == "decreasing":
        powers = base ** np.arange(size - 1, -1, -1)
    else:
        powers = base ** np.arange(size)
    digits = (x.reshape(x.shape + (1,)) // powers) % base
    return digits
</snippet></ROW><ROW><id>20228144</id><snippet>x</snippet></ROW><ROW><id>20228144</id><snippet>shp</snippet></ROW><ROW><id>20228144</id><snippet>shp + (size,)</snippet></ROW><ROW><id>20228144</id><snippet>size</snippet></ROW><ROW><id>20228144</id><snippet>x</snippet></ROW><ROW><id>20228144</id><snippet>order</snippet></ROW><ROW><id>20228144</id><snippet>order="decreasing"</snippet></ROW><ROW><id>20228144</id><snippet>order="increasing"</snippet></ROW><ROW><id>20228144</id><snippet>In [97]: int2base([255, 987654321], 10)
Out[97]: 
array([[0, 0, 0, 0, 0, 0, 2, 5, 5],
       [9, 8, 7, 6, 5, 4, 3, 2, 1]])

In [98]: int2base([255, 987654321], 10, size=12)
Out[98]: 
array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 5],
       [0, 0, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1]])

In [99]: int2base([255, 987654321], 10, order="increasing")
Out[99]: 
array([[5, 5, 2, 0, 0, 0, 0, 0, 0],
       [1, 2, 3, 4, 5, 6, 7, 8, 9]])

In [100]: int2base([255, 987654321], 16)
Out[100]: 
array([[ 0,  0,  0,  0,  0,  0, 15, 15],
       [ 3, 10, 13, 14,  6,  8, 11,  1]])
</snippet></ROW><ROW><id>20228312</id><snippet>__import__</snippet></ROW><ROW><id>20228312</id><snippet>libnames = ['numpy', 'scipy', 'operator']
for libname in libnames:
    try:
        lib = __import__(libname)
    except:
        print sys.exc_info()
    else:
        globals()[libname] = lib
</snippet></ROW><ROW><id>20228312</id><snippet>import ... as ...</snippet></ROW><ROW><id>20228312</id><snippet>from ... import ...</snippet></ROW><ROW><id>20228312</id><snippet>np = numpy
sp = scipy
itemgetter = operator.itemgetter
</snippet></ROW><ROW><id>20228340</id><snippet>__init__(self) :</snippet></ROW><ROW><id>20228340</id><snippet>   self.TaskList = []
</snippet></ROW><ROW><id>20228340</id><snippet>OnDoAllClicked(self, evt)</snippet></ROW><ROW><id>20228340</id><snippet>   self.TaskList.extend([call_thread1, call_thread2, call_thread3, etc])
   CheckNextTask()
</snippet></ROW><ROW><id>20228340</id><snippet>CheckNextTask(self)</snippet></ROW><ROW><id>20228340</id><snippet>   if len(self.TaskList) &gt; 0:
      current = self.TaskList[0]
      del self.TaskList[0]
      current(callback=self.CheckNextTask)
</snippet></ROW><ROW><id>20228340</id><snippet>   while not Done:
      # Do whatever
   wx.CallAfter(callbacK)
</snippet></ROW><ROW><id>20228419</id><snippet>from job import Job
</snippet></ROW><ROW><id>20228419</id><snippet>job.Job(...)
</snippet></ROW><ROW><id>20228722</id><snippet>vecotrize</snippet></ROW><ROW><id>20228722</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; @np.vectorize
... def foo(a, b):
...    return a + b
... 
&gt;&gt;&gt; foo([1,3,5], [2,4,6])
array([ 3,  7, 11])
&gt;&gt;&gt; foo(np.arange(9).reshape(3,3), np.arange(9).reshape(3,3))
array([[ 0,  2,  4],
       [ 6,  8, 10],
       [12, 14, 16]])
</snippet></ROW><ROW><id>20228722</id><snippet>func</snippet></ROW><ROW><id>20228722</id><snippet>np.vectorize</snippet></ROW><ROW><id>20228722</id><snippet>func(X, Y)</snippet></ROW><ROW><id>20228722</id><snippet>ravel</snippet></ROW><ROW><id>20228722</id><snippet>reshape</snippet></ROW><ROW><id>20228722</id><snippet>import numpy as np
import collections as c

# some arbitrary lookup table
a = c.defaultdict(int)
a[1] = 2
a[2] = 3
a[3] = 2
a[4] = 3

@np.vectorize
def func(x,y):
    # some arbitrary function
    return a[x] + a[y]

X,Y = np.mgrid[1:3, 1:4]
X = X.T
Y = Y.T

Z = func(X, Y)
</snippet></ROW><ROW><id>20228747</id><snippet># Check each condition explicitly
if user_input != 'h' and user_input != 'l' and user_input != 'c':
</snippet></ROW><ROW><id>20228747</id><snippet># Check if the input is one of the elements in the given list
if user_input not in ["h", "c", "l"]:
</snippet></ROW><ROW><id>20228747</id><snippet>if (user_input != 'h') or ('l') or ('c'):
</snippet></ROW><ROW><id>20228747</id><snippet>l</snippet></ROW><ROW><id>20228747</id><snippet>c</snippet></ROW><ROW><id>20228747</id><snippet>elif</snippet></ROW><ROW><id>20228747</id><snippet>while True:
    if user_input == 'h':
        High=Guess
        Guess= ((High-Low)/2)
    elif user_input == 'l':
        Low=Guess
        Guess= ((High-Low)/2)
    elif user_input == "c":
        # We're done guessing. Awesome.
        break
    else:
        print('Sorry, I did not understand your input.')
</snippet></ROW><ROW><id>20228902</id><snippet>layout = g.layout_reingold_tilford(mode="in", root=0)
</snippet></ROW><ROW><id>20229083</id><snippet>stderr</snippet></ROW><ROW><id>20229083</id><snippet>python test.py 2&gt; file
</snippet></ROW><ROW><id>20229124</id><snippet>callback()</snippet></ROW><ROW><id>20229124</id><snippet>def callback(*args):
    s = entry.get()
    print (s)
    varStr.trace_variable("w", callback)
</snippet></ROW><ROW><id>20229124</id><snippet>trace_variable()</snippet></ROW><ROW><id>20229124</id><snippet>root.globalgetvar(name)</snippet></ROW><ROW><id>20229124</id><snippet>root.globalsetvar(name)</snippet></ROW><ROW><id>20229124</id><snippet>root.nametowidget(varName)</snippet></ROW><ROW><id>20229124</id><snippet>varStr.trace_variable()</snippet></ROW><ROW><id>20229124</id><snippet>callback()</snippet></ROW><ROW><id>20229208</id><snippet>sorted_pairs = sorted(sorted(map.iteritems()), key=operator.itemgetter(1), reverse=True)
</snippet></ROW><ROW><id>20229208</id><snippet>[k for k,v in sorted_pairs]
</snippet></ROW><ROW><id>20229247</id><snippet>os</snippet></ROW><ROW><id>20229247</id><snippet>os.walk</snippet></ROW><ROW><id>20229247</id><snippet>os.stat</snippet></ROW><ROW><id>20229247</id><snippet>st_dev</snippet></ROW><ROW><id>20229247</id><snippet>os.path.ismount</snippet></ROW><ROW><id>20229247</id><snippet>rm</snippet></ROW><ROW><id>20229247</id><snippet>fts</snippet></ROW><ROW><id>20229247</id><snippet>fts</snippet></ROW><ROW><id>20229247</id><snippet>os.walk</snippet></ROW><ROW><id>20229247</id><snippet>os.stat</snippet></ROW><ROW><id>20229247</id><snippet>dirname</snippet></ROW><ROW><id>20229247</id><snippet>scandir</snippet></ROW><ROW><id>20229247</id><snippet>betterwalk</snippet></ROW><ROW><id>20229247</id><snippet>py-fts</snippet></ROW><ROW><id>20229247</id><snippet>dirnames</snippet></ROW><ROW><id>20229247</id><snippet>walk</snippet></ROW><ROW><id>20229247</id><snippet>fts</snippet></ROW><ROW><id>20229247</id><snippet>os.walk</snippet></ROW><ROW><id>20229247</id><snippet>os</snippet></ROW><ROW><id>20229247</id><snippet>os.path</snippet></ROW><ROW><id>20229292</id><snippet>df.reset_index(level=0, inplace=True)</snippet></ROW><ROW><id>20229396</id><snippet>html5lib</snippet></ROW><ROW><id>20229396</id><snippet>soup = BeautifulSoup(htmlcontent, 'html5')
</snippet></ROW><ROW><id>20229396</id><snippet>lxml</snippet></ROW><ROW><id>20229418</id><snippet>lengths = {1: 1}

def collatz(i):
    i0 = i
    acc = 0
    while True:
        if i in lengths:
            lengths[i0] = acc + lengths[i]
            return acc + lengths[i]
        acc += 1
        i = (i * 3 + 1) if i % 2 else i // 2

longest = 1
for i in range(1, 1000000):
    c = collatz(i)
    if c &gt; longest:
        longest = c
        print(i, c)
</snippet></ROW><ROW><id>20229418</id><snippet>lengths = {1: 1}

def collatz(i):
    if i in lengths: return lengths [i]
    j = (i * 3 + 1) if i % 2 else i // 2
    c = collatz (j) + 1
    lengths [i] = c
    return c

longest = 1
for i in range(1, 1000000):
    c = collatz(i)
    if c &gt; longest:
        longest = c
        print(i, c)
</snippet></ROW><ROW><id>20229507</id><snippet>text = open('txt_filename').read()
data = eval('[' + text + ']')
</snippet></ROW><ROW><id>20229613</id><snippet>R1 = Radiobutton(root, text = "HOSTS", var = 'hosts', value = 1, command = sel, variable=var2)
R1.pack(anchor = W)

R2 = Radiobutton(root, text = "NETWORKS", var = 'networks', value = 2, command = selnet, variable=var2)
R2.pack(anchor = W)
</snippet></ROW><ROW><id>20229628</id><snippet>object</snippet></ROW><ROW><id>20229628</id><snippet>functools.wraps</snippet></ROW><ROW><id>20229628</id><snippet>AttributeError</snippet></ROW><ROW><id>20229628</id><snippet>update_wrapper</snippet></ROW><ROW><id>20229628</id><snippet>wraps</snippet></ROW><ROW><id>20229777</id><snippet>re.split</snippet></ROW><ROW><id>20229777</id><snippet>&gt;&gt;&gt; from re import split
&gt;&gt;&gt; mystr = "word,word,,word,word"
&gt;&gt;&gt; split(",+", mystr)
['word', 'word', 'word', 'word']
</snippet></ROW><ROW><id>20229777</id><snippet>,+</snippet></ROW><ROW><id>20229777</id><snippet>\W</snippet></ROW><ROW><id>20229777</id><snippet>&gt;&gt;&gt; from re import split
&gt;&gt;&gt; mystr = "word,word,;word;word"
&gt;&gt;&gt; split("\W+", mystr)
['word', 'word', 'word', 'word']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20229781</id><snippet>df['Date']=pd.to_datetime(df['Date'])
xx=df.groupby('File')['Date'].max().order()
df=pd.DataFrame(xx).reset_index()
df['diff'] = df.apply(lambda x: (datetime.now() - x['Date']).days, axis=1)
df['alert']=1
tens='|'.join(['allEps.sps','pafpull.sps','pafpullsend.sps'])
tenDays=df[(df['diff'] &gt;= 10) &amp; (df.File.str.contains(tens))]
tenDays
thirtyThree='|'.join(['Level_1.sps','Level_1push.sps','Level_1pushp.sps','medicalfalloffa.sps','medicalfalloffpush.sps','allservices.sps'])
thirtyThreeDays=df[(df['diff'] &gt;= 33) &amp; (df.File.str.contains(thirtyThree))]
thirtyThreeDays
leftOver=tens+'|'+thirtyThree
fours=df[(df['diff'] &gt;= 4) &amp; (~df.File.str.contains(leftOver))]
fours
alerts=tenDays.append(thirtyThreeDays)
alerts=fours.append(alerts)
alerts
</snippet></ROW><ROW><id>20229831</id><snippet>all()</snippet></ROW><ROW><id>20229831</id><snippet>&gt;&gt;&gt; my_list1 = [30, 34, 56]
&gt;&gt;&gt; my_list2 = [29, 500, 43]
&gt;&gt;&gt; all(i &gt;= 30 for i in my_list1)
True
&gt;&gt;&gt; all(i &gt;= 30 for i in my_list2)
False
</snippet></ROW><ROW><id>20229831</id><snippet>my_list1</snippet></ROW><ROW><id>20229831</id><snippet>def all_30_or_up(ls):
    for i in ls:
        if i &lt; 30:
            return False
    return True
</snippet></ROW><ROW><id>20229831</id><snippet>False</snippet></ROW><ROW><id>20229831</id><snippet>True</snippet></ROW><ROW><id>20229986</id><snippet>workers will cycle through the last 3 chars
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
[etc]
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
the plaintext is 'test1'
</snippet></ROW><ROW><id>20229986</id><snippet>PAIRS</snippet></ROW><ROW><id>20229986</id><snippet>import string
import hashlib
from itertools import product

CHARSET = string.ascii_lowercase +  string.digits
MAX_LENGTH = 5
NUM_PROCESSES = None # defaults to all available cores

HASHALG = "md5"
HASH = "5a105e8b9d40e1329780d62ea2265d8a"

PAIRS = ["".join(t) for t in product(CHARSET, repeat=2)]

def make_bases(count):
    bases = [PAIRS] * (count // 2)
    if count &amp; 1:
        bases.insert(0, CHARSET)
    return bases

# string_gen is what the workers run.  Everything else
# runs in the main program.
def string_gen(prefix, suffix_len, length):
    # Generate all strings of length `length` starting with `prefix`.
    # If length &gt; suffix_len, only the last suffix_len characters
    # need to be generated.
    if length &lt;= suffix_len:
        assert prefix == ""
        bases = make_bases(length)
    else:
        assert len(prefix) + suffix_len == length
        bases = make_bases(suffix_len)
    for t in product(*bases):
        result = prefix + "".join(t)
        # do something with result
        if hashlib.new(HASHALG, result).hexdigest() == HASH:
            return result

def record_done(result):
    global all_done, the_secret
    print ".",
    if result is not None:
        print
        the_secret = result
        all_done = True
        pool.close()
        pool.terminate() # stop all workers! we're done

def do_work(pool, strings_per_chunk=1000000):
    global all_done, the_secret
    all_done = False
    the_secret = None
    # What's the most chars we can cycle through without
    # exceeding strings_per_chunk?
    N = len(CHARSET)
    suffix_len = 1
    while N**suffix_len &lt;= strings_per_chunk:
        suffix_len += 1
    suffix_len -= 1
    print "workers will cycle through the last", suffix_len, "chars"

    # There's no point to splitting up very short strings.
    max_short_len = min(suffix_len, MAX_LENGTH)
    for length in range(1, max_short_len + 1):
        pool.apply_async(string_gen, args=("", suffix_len, length),
                         callback=record_done)
        if all_done:
            return
    # And now the longer strings.
    for length in range(max_short_len + 1, MAX_LENGTH + 1):
        for t in product(*make_bases(length - suffix_len)):
            prefix = "".join(t)
            pool.apply_async(string_gen, args=(prefix, suffix_len, length),
                             callback=record_done)
            if all_done:
                return

if __name__ == "__main__":
    import multiprocessing
    pool = multiprocessing.Pool(NUM_PROCESSES)
    do_work(pool)
    pool.close()
    pool.join()
    if the_secret is None:
        print "didn't crack it!"
    else:
        print "the plaintext is", repr(the_secret)
</snippet></ROW><ROW><id>20229986</id><snippet>strings_per_chunk</snippet></ROW><ROW><id>20229986</id><snippet>apply_async()</snippet></ROW><ROW><id>20229986</id><snippet>multiprocessing</snippet></ROW><ROW><id>20229986</id><snippet>multiprocessing</snippet></ROW><ROW><id>20229986</id><snippet>multiprocessing</snippet></ROW><ROW><id>20229986</id><snippet>EarlyExit</snippet></ROW><ROW><id>20229986</id><snippet>record_done()</snippet></ROW><ROW><id>20229986</id><snippet>class EarlyExit(Exception):
    def __init__(self, result):
        Exception.__init__(self)
        self.result = result

class CustomDispatcher:
    def __init__(self, pool):
        from collections import deque
        self.pool = pool
        self.q = deque()

    def queue_work(self, *args):
        while len(self.q) &gt; NUM_PROCESSES * 3:
            # provided the workers have significant work to do,
            # it will "take a long time" to finish the work
            # already queued.  Rather than swamp the mp machinery
            # with even more pending tasks, wait for some to
            # finish first.
            self.unqueue()
        self.q.append(self.pool.apply_async(string_gen, args))

    def unqueue(self):
        if self.q:
            # note:  the main program spends most of its time
            # blocked on the .get(); that's because it can
            # generate prefixes far faster than workers can
            # process them
            result = self.q.popleft().get()
            print ".",
            if result is not None:
                print
                raise EarlyExit(result)

    def drain(self):
        while self.q:
            self.unqueue()

def do_work(dispatch, strings_per_chunk=10000000):
    # What's the most chars we can cycle through without
    # exceeding strings_per_chunk?
    N = len(CHARSET)
    suffix_len = 1
    while N**suffix_len &lt;= strings_per_chunk:
        suffix_len += 1
    suffix_len -= 1
    print "workers will cycle through the last", suffix_len, "chars"
    print "so each dot represents", \
          format(len(CHARSET)**suffix_len, ","), "strings"

    # There's no point to splitting up very short strings.
    max_short_len = min(suffix_len, MAX_LENGTH)
    for length in range(1, max_short_len + 1):
        dispatch.queue_work("", suffix_len, length)
    # And now the longer strings.
    for length in range(max_short_len + 1, MAX_LENGTH + 1):
        for t in product(*make_bases(length - suffix_len)):
            dispatch.queue_work("".join(t), suffix_len, length)
    dispatch.drain()  # check remaining tasks for a winner

if __name__ == "__main__":
    import multiprocessing
    pool = multiprocessing.Pool(NUM_PROCESSES)
    dispatch = CustomDispatcher(pool)
    try:
        do_work(dispatch)
    except EarlyExit as e:
        print "the plaintext is", repr(e.result)
    else:
        print "didn't crack it!"
    pool.close()
    pool.terminate() # stop all workers! we're done
    pool.join()
</snippet></ROW><ROW><id>20230044</id><snippet>u</snippet></ROW><ROW><id>20230209</id><snippet>\r\n</snippet></ROW><ROW><id>20230209</id><snippet>with open(csv_file_name, 'rb') as source:
    consec_empty_lines = 0
    for line in source:
        if line == '\r\n':
            consec_empty_lines += 1
            if consec_empty_lines == 2: 
                break
        else:
            consec_empty_lines = 0
    df = pd.read_csv(source)
</snippet></ROW><ROW><id>20230229</id><snippet>&lt;form&gt;
  &lt;h2&gt;Food Name&lt;/h2&gt;
  &lt;input type="text" name="food" value="{{ foodname }}"&gt;

  &lt;h2&gt;Sides:&lt;h2&gt;
  &lt;input type="checkbox" name="sides"  value="with_salad" {% if sides == "with_salad" %}checked{% endif %}&gt; With Salad
  &lt;input type="checkbox" name="sides"  value="with_fries" {% if sides == "with_fries" %}checked{% endif %}&gt; With Fries

  &lt;input type="submit"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>20230759</id><snippet>numpy</snippet></ROW><ROW><id>20230759</id><snippet>In [53]: np.array(np.all((x[:,None,:]==y[None,:,:]),axis=-1).nonzero()).T.tolist()
Out[53]: [[0, 4], [2, 1], [3, 2], [4, 3]]
</snippet></ROW><ROW><id>20230759</id><snippet>(5,5,4)</snippet></ROW><ROW><id>20230759</id><snippet>np.all</snippet></ROW><ROW><id>20230759</id><snippet>array([[False, False, False, False,  True],
       [False, False, False, False, False],
       [False,  True, False, False, False],
       [False, False,  True, False, False],
       [False, False, False,  True, False]], dtype=bool)
</snippet></ROW><ROW><id>20230759</id><snippet>True</snippet></ROW><ROW><id>20230759</id><snippet>L1</snippet></ROW><ROW><id>20230816</id><snippet>t = sorted(a.items(), key=lambda x: x[1])
</snippet></ROW><ROW><id>20230816</id><snippet>ret = {}

def build(ret, upv):
    if not t:
        return (None, None)
    k, v = t.pop(0)
    while k and v:
        if upv and v[:len(upv)] != upv:
            return (k, v)
        r = {}
        ret[k] = r
        k, v = build(r, v)
    return None, None

build(ret, None)
print ret
</snippet></ROW><ROW><id>20231049</id><snippet>    def __init__(self,*coords):
        self.coords = {}
        for count,pos in enumerate(coords,1):
            self.coords["x%s" % count] = pos
            self.coords["y%s" % count] = pos
</snippet></ROW><ROW><id>20231049</id><snippet>something.x1
</snippet></ROW><ROW><id>20231049</id><snippet>something.coords["x1"]
</snippet></ROW><ROW><id>20231049</id><snippet>for count,pos in enumerate(coords,1):
    setattr(self, "x%s" % count, pos)
</snippet></ROW><ROW><id>20231161</id><snippet>urlparse</snippet></ROW><ROW><id>20231161</id><snippet>&gt;&gt;&gt; s = "https://play.google.com/store/apps/details?id=com.lima.doodlejump"
&gt;&gt;&gt; urlparse.urlparse(s)
ParseResult(scheme='https', netloc='play.google.com', path='/store/apps/details', params='', query='id=com.lima.doodlejump', fragment='')
&gt;&gt;&gt; urlparse.parse_qs(urlparse.urlparse(s).query)
{'id': ['com.lima.doodlejump']}
&gt;&gt;&gt; urlparse.parse_qs(urlparse.urlparse(s).query)['id']
['com.lima.doodlejump']
&gt;&gt;&gt; urlparse.parse_qs(urlparse.urlparse(s).query)['id'][0]
'com.lima.doodlejump'
</snippet></ROW><ROW><id>20231161</id><snippet>str.split</snippet></ROW><ROW><id>20231161</id><snippet>urlparse</snippet></ROW><ROW><id>20231185</id><snippet>ready()</snippet></ROW><ROW><id>20231185</id><snippet>from time import sleep
result = some_task.apply_async(args=myargs)
while not result.ready():
    sleep(0.5)
result_output = result.get()
</snippet></ROW><ROW><id>20231185</id><snippet>wait()</snippet></ROW><ROW><id>20231185</id><snippet>result = some_task.apply_async(args=myargs)
result_output = result.wait(timeout=None, interval=0.5)
</snippet></ROW><ROW><id>20231227</id><snippet>&gt;&gt;&gt; c = np.ones((3, 2))
&gt;&gt;&gt; c[:, 1] = [1, 2, 3]
</snippet></ROW><ROW><id>20231227</id><snippet>&gt;&gt;&gt; c
array([[ 1.,  1.],
       [ 1.,  2.],
       [ 1.,  3.]])
</snippet></ROW><ROW><id>20231227</id><snippet>np.column_stack</snippet></ROW><ROW><id>20231227</id><snippet>&gt;&gt;&gt; np.column_stack(([1.,1,1],[1,2,3]))
array([[ 1.,  1.],
       [ 1.,  2.],
       [ 1.,  3.]])
</snippet></ROW><ROW><id>20231255</id><snippet>class Class1:
  def __init__(self, attribute):
    self.attribute1 = attribute

class Class2:
  def __init__(self, instanceName):
    setattr(self, instanceName, Class1(...))  # replace ... with whatever parameters you want
</snippet></ROW><ROW><id>20231410</id><snippet>&lt;div id="sku-8103"&gt;
</snippet></ROW><ROW><id>20231410</id><snippet>product = tree.xpath('//div[@id="sku-8240103"]/img[@src]')
</snippet></ROW><ROW><id>20231410</id><snippet>[]</snippet></ROW><ROW><id>20231410</id><snippet>product = tree.xpath('//div[@id="sku-8103"]/img[@src]')
</snippet></ROW><ROW><id>20231410</id><snippet>[&lt;Element img at 0x10c85b890&gt;]
</snippet></ROW><ROW><id>20231410</id><snippet>print product[0].attrib['src']
</snippet></ROW><ROW><id>20231410</id><snippet>http://images.bestbuy.com/BestBuy_US/en_US/images/global/buttons/btn_notorderable_pdp.gif
</snippet></ROW><ROW><id>20231410</id><snippet>[@src]</snippet></ROW><ROW><id>20231410</id><snippet>img</snippet></ROW><ROW><id>20231410</id><snippet>src</snippet></ROW><ROW><id>20231410</id><snippet>img</snippet></ROW><ROW><id>20231411</id><snippet>ast</snippet></ROW><ROW><id>20231411</id><snippet>import ast

s = 'subtract(4,add(4,times(3,4)))'

# Probably better to use functions from the operator module here :-)
functions = {'subtract': lambda a,b: a-b,
             'add': lambda a, b: a+b,
             'times': lambda a,b: a*b}


def _evaluate(node):
    if isinstance(node, ast.Num):
        return node.n
    elif isinstance(node, ast.Name):
        return functions[node.id]
    elif isinstance(node, ast.Call):
        function = _evaluate(node.func)
        return function(*[_evaluate(n) for n in node.args])
    else:
        raise ValueError('Unknown node type: %s', type(node))


def evaluate(s):
    tree = ast.parse(s)
    node = tree.body[0].value
    return _evaluate(node)

print evaluate(s)
</snippet></ROW><ROW><id>20231546</id><snippet>str.split</snippet></ROW><ROW><id>20231546</id><snippet>&gt;&gt;&gt; # Please don't name a variable `list` -- it overshadows the built-in.
&gt;&gt;&gt; lst = ['hello there 123 456', 'hello there 234 567', 'hello there 345 678']
&gt;&gt;&gt; [x.split()[2] for x in lst]
['123', '234', '345']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20231604</id><snippet>ndim</snippet></ROW><ROW><id>20231604</id><snippet>shape</snippet></ROW><ROW><id>20232648</id><snippet>Queue</snippet></ROW><ROW><id>20232648</id><snippet>itemdone</snippet></ROW><ROW><id>20232648</id><snippet>my_queue = queue.Queue() # or multiprocessing.Queue()
</snippet></ROW><ROW><id>20232648</id><snippet>def additem(uuid,work,the_queue):
    the_queue.put((uuid,word)) # Queue in a tuple containing the data

def proceeditems(the_queue):
    while True:
        item = the_queue.get() # This will block until something is inside the queue
        try:
            result = somework(item)
            itemdone.append(result)
        except:
            the_queue.put(item) # If failed, put back to queue for retry.
        # You don't need the last two lines
</snippet></ROW><ROW><id>20232648</id><snippet>additem</snippet></ROW><ROW><id>20232648</id><snippet>proceeditems</snippet></ROW><ROW><id>20232687</id><snippet>def run(self, edit, content)</snippet></ROW><ROW><id>20232687</id><snippet>set_timeout</snippet></ROW><ROW><id>20232816</id><snippet>'&lt;head&gt;' in msmalvo.read()
</snippet></ROW><ROW><id>20232816</id><snippet>msmalvo.read() == '&lt;head&gt;'
</snippet></ROW><ROW><id>20232944</id><snippet>changeLabel</snippet></ROW><ROW><id>20232944</id><snippet>def changeLabel():
    # Get the radiobutton's StringVar and see if it equals "HOSTS"
    if relStatus.get() == 'HOSTS':
        # Get the entrybox's IntVar and see if it equals 6
        if custname.get() == 6:
            # Set the label's StringVar to "255.255.255.248"
            label4Text.set("255.255.255.248")
</snippet></ROW><ROW><id>20232944</id><snippet>.pack</snippet></ROW><ROW><id>20232944</id><snippet>None</snippet></ROW><ROW><id>20232944</id><snippet>radio1 = Radiobutton(app, text="HOSTS", value="HOSTS", variable=relStatus, command=beenclicked)
radio1.pack()
radio2 = Radiobutton(app, text="NETWORKS", value="NETWORKS", variable=relStatus, command=beenclicked)
radio2.pack()
</snippet></ROW><ROW><id>20233091</id><snippet>NULL</snippet></ROW><ROW><id>20233260</id><snippet>&gt;&gt;&gt; for i in range(10):
...    print i, i.bit_length()
0 0
1 1
2 2
3 2
4 3
5 3
6 3
7 3
8 4
9 4
</snippet></ROW><ROW><id>20233260</id><snippet>bit_length()</snippet></ROW><ROW><id>20233260</id><snippet>def calcBitDigits(n):
    return (n-1).bit_length()
</snippet></ROW><ROW><id>20233260</id><snippet>n</snippet></ROW><ROW><id>20233260</id><snippet>n.bit_length()</snippet></ROW><ROW><id>20233260</id><snippet>n</snippet></ROW><ROW><id>20233260</id><snippet>(n-1).bit_length()</snippet></ROW><ROW><id>20233260</id><snippet>int(math.ceil(math.log(n, 2)))</snippet></ROW><ROW><id>20233260</id><snippet>n</snippet></ROW><ROW><id>20233260</id><snippet>n</snippet></ROW><ROW><id>20233260</id><snippet>0</snippet></ROW><ROW><id>20233260</id><snippet>n-1</snippet></ROW><ROW><id>20233260</id><snippet>n-1</snippet></ROW><ROW><id>20233260</id><snippet>n=1</snippet></ROW><ROW><id>20233260</id><snippet>(0).bit_length() == 0</snippet></ROW><ROW><id>20233437</id><snippet>import commands

node_free_mem = {}

for n in node_names:
    sys_output = commands.getoutput("ssh %s 'free -m'" % n)
    free_memory = sys_output.split()[9]
    node_free_mem[n] = int(free_memory)
</snippet></ROW><ROW><id>20233437</id><snippet>import commands

def get_free_mem(node_name):
    sys_output = commands.getoutput('ssh %s \'free -m\'' % node_name)
    free_memory = sys_output.split()[9]
    return int(free_memory)

free_list = [get_free_mem(n) for n in node_names]
node_free_mem = dict(zip(node_names, free_list))
</snippet></ROW><ROW><id>20233437</id><snippet>range()</snippet></ROW><ROW><id>20233437</id><snippet>zip()</snippet></ROW><ROW><id>20233437</id><snippet>itertools.izip()</snippet></ROW><ROW><id>20233437</id><snippet>zip()</snippet></ROW><ROW><id>20233437</id><snippet>zip()</snippet></ROW><ROW><id>20233437</id><snippet>commands.getoutput()</snippet></ROW><ROW><id>20233437</id><snippet>int()</snippet></ROW><ROW><id>20233477</id><snippet>x.__pow__(n)</snippet></ROW><ROW><id>20233477</id><snippet>n.__rpow__(x)</snippet></ROW><ROW><id>20233477</id><snippet>&gt;&gt;&gt; (2).__pow__(0.5)
NotImplemented
&gt;&gt;&gt; (0.5).__rpow__(2)
1.4142135623730951
</snippet></ROW><ROW><id>20233477</id><snippet>&gt;&gt;&gt; class F(object):
...   def __init__(self, value):
...     self.value = value
...   def __float__(self):
...     print("hi!")
...     return float(self.value)
... 
&gt;&gt;&gt; a=F(2)
&gt;&gt;&gt; math.sqrt(a)
hi!
1.4142135623730951
</snippet></ROW><ROW><id>20233477</id><snippet>&gt;&gt;&gt; import gmpy2
&gt;&gt;&gt; math.sqrt(gmpy2.mpz("1"*999))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OverflowError: 'mpz' too large to convert to float
&gt;&gt;&gt; gmpy2.mpz("1"*999)**0.5
mpfr('1.0540925533894598e+499')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20233676</id><snippet>Process#getErrorStream()</snippet></ROW><ROW><id>20233676</id><snippet>getOutputStream()</snippet></ROW><ROW><id>20233734</id><snippet>l = [(a,b,c,d,e) for a in list1 
                    for b in list2 
                        for c in list3 
                            for d in list4 
                                for e in list5 
                                    if len(set((a,b,c,d,e))) == 5]
s = set(map(lambda e: tuple(sorted(e)), l))
print len(s)

&gt;&gt;&gt; 970
</snippet></ROW><ROW><id>20233734</id><snippet>s = set([frozenset((a,b,c,d,e)) for a in list1 
                for b in list2 
                    for c in list3 
                        for d in list4 
                            for e in list5 
                                if len(set((a,b,c,d,e))) == 5])
print len(s)

&gt;&gt;&gt; 970
</snippet></ROW><ROW><id>20233890</id><snippet>max(cols[1] for cols in reader)
</snippet></ROW><ROW><id>20233890</id><snippet>seek</snippet></ROW><ROW><id>20233890</id><snippet>infile.seek(0)
</snippet></ROW><ROW><id>20233890</id><snippet>lines = infile.readlines()
max_conc = max(cols[1] for cols in lines)
</snippet></ROW><ROW><id>20233890</id><snippet>lines = list(reader)
</snippet></ROW><ROW><id>20233890</id><snippet>&gt;&gt;&gt; f = open('test.txt')
&gt;&gt;&gt; f.read()
'a\nb\nc\nd\ne\nf\ng'
&gt;&gt;&gt; f.read()
''  #whoops, iterator is exhausted
&gt;&gt;&gt; f.seek(0)
&gt;&gt;&gt; f.read()
'a\nb\nc\nd\ne\nf\ng'
</snippet></ROW><ROW><id>20233986</id><snippet>import re
splitter = re.compile(r":|,,?")
for line in ("literature,general education,,note: see approved list",
             "social-cultural elective,general education,,note: see approved"):
    print splitter.split(line)
</snippet></ROW><ROW><id>20233986</id><snippet>['literature', 'general education', 'note', ' see approved list']
['social-cultural elective', 'general education', 'note', ' see approved']
</snippet></ROW><ROW><id>20234151</id><snippet>trace()</snippet></ROW><ROW><id>20234151</id><snippet>StringVar()</snippet></ROW><ROW><id>20234151</id><snippet>changeLabel</snippet></ROW><ROW><id>20234151</id><snippet>custname</snippet></ROW><ROW><id>20234151</id><snippet>custname.trace("w", changeLabel)
</snippet></ROW><ROW><id>20234151</id><snippet>custname</snippet></ROW><ROW><id>20234151</id><snippet>IntVar</snippet></ROW><ROW><id>20234151</id><snippet>StringVar</snippet></ROW><ROW><id>20234151</id><snippet>Entry</snippet></ROW><ROW><id>20234151</id><snippet>*args</snippet></ROW><ROW><id>20234151</id><snippet>changeLabel()</snippet></ROW><ROW><id>20234151</id><snippet>trace</snippet></ROW><ROW><id>20234151</id><snippet>from Tkinter import *

SubnetM = 0

def beenclicked():
    radioValue = relStatus.get()
    return

def changeLabel(*args): # require *args for trace
    print "changeLabel", args
    if relStatus.get() == 'HOSTS':
        if custname.get() == "6":
            label4Text.set("255.255.255.248")
            return
    if relStatus.get() == 'NETWORKS':
        if custname.get() == "6":
            label4Text.set("224.0.0.0")
            return

app = Tk()
app.title("SUBNET MASK CALCULATOR")
app.geometry('400x450+200+200')

labelText = StringVar()
labelText.set("WELCOME!")
label1 = Label(app,textvariable=labelText, height=4)
label1.pack()

relStatus = StringVar()
relStatus.set(None)
radioValue = relStatus.get()
radio1 = Radiobutton(app, text="HOSTS", value="HOSTS", variable=relStatus, command=changeLabel)
radio1.pack()
radio1 = Radiobutton(app, text="NETWORKS", value="NETWORKS", variable=relStatus, command=changeLabel)
radio1.pack()

label2Text = StringVar()
label2Text.set("~Quantity~")
label2 = Label(app, textvariable=label2Text, height=4)
label2.pack()

custname = StringVar()
custname.set("0")
Quantity = Entry(app, textvariable=custname,)
Quantity.pack()
custname.trace("w", changeLabel)


label3Text = StringVar()
label3Text.set("Your Subnet Mask is...")
label3 = Label(app, textvariable=label3Text, height=4)
label3.pack()

label4Text = StringVar()
label4Text.set(SubnetM)
label4 = Label(app, textvariable=label4Text, height=4)
label4.pack()

button1 = Button(app, text="GO!", width=20, command=changeLabel)
button1.pack(padx=15, pady=15)

app.mainloop()
</snippet></ROW><ROW><id>20234151</id><snippet>def changeLabel(*args): # require *args for trace
    print "changeLabel", args

    custname_int = 0 # default value when error
    try:
        custname_int = int( custname.get() )
    except:
        pass # if error do nothing

    if 2 &lt; custname_int &lt;= 6:
        if relStatus.get() == 'HOSTS':
            label4Text.set("255.255.255.248")
        else: #if relStatus.get() == 'NETWORKS':
            label4Text.set("224.0.0.0")
    else:
        label4Text.set("-")
</snippet></ROW><ROW><id>20234151</id><snippet>Quantity</snippet></ROW><ROW><id>20234151</id><snippet>def changeLabel(*args): # require *args for trace
    #print "changeLabel", args

    custname_str = custname.get() 
    custname_int = 0 # default value when error

    try:
        custname_int = int( custname_str )
    except:
        if custname_str != "": # if not empty
            custname.set(custname_str[:-1]) # remove last char
            return 

    if 2 &lt; custname_int &lt;= 6:
        if relStatus.get() == 'HOSTS':
            label4Text.set("255.255.255.248")
        else: #if relStatus.get() == 'NETWORKS':
            label4Text.set("224.0.0.0")
    else:
        label4Text.set("-")
</snippet></ROW><ROW><id>20234252</id><snippet>fromkeys</snippet></ROW><ROW><id>20234252</id><snippet>print {}.fromkeys(myArray, "set")
</snippet></ROW><ROW><id>20234252</id><snippet>zip</snippet></ROW><ROW><id>20234252</id><snippet>print dict(zip(myArray, ["set"] * len(myArray)))
</snippet></ROW><ROW><id>20234252</id><snippet>{'OZONE PARK': 'set', 'BROOKLYN': 'set', 'STATEN ISLAND': 'set', 'SOUTH OZONE PARK': 'set', 'JAMAICA': 'set'}
</snippet></ROW><ROW><id>20234335</id><snippet>import Text.Read
import Text.Printf
import System.Environment
import Control.Monad
import System.Exit


parsingFailure :: String -&gt; String -&gt; IO a
parsingFailure name val = printf "ERROR: Couldn't parse %s : %s as an integer\n" 
                                  name val &gt;&gt; exitWith (ExitFailure 1)

validateArgs :: [String] -&gt; IO (Integer, Integer)
validateArgs [a, b] = liftM2 (,) (parse "VAL A" a) (parse "VAL B" b)
  where parse name s = maybe (parsingFailure name s) return $ readMaybe s
validateArgs _      = putStrLn "Wrong number of args" &gt;&gt; exitWith (ExitFailure 1)

main :: IO ()
main = do
  (a, b) &lt;- getArgs &gt;&gt;= validateArgs
  print $ a + b
</snippet></ROW><ROW><id>20234335</id><snippet>validateArgs</snippet></ROW><ROW><id>20234335</id><snippet>maybe</snippet></ROW><ROW><id>20234335</id><snippet>maybe</snippet></ROW><ROW><id>20234335</id><snippet>b</snippet></ROW><ROW><id>20234335</id><snippet>a -&gt; b</snippet></ROW><ROW><id>20234335</id><snippet>Maybe a</snippet></ROW><ROW><id>20234335</id><snippet>b</snippet></ROW><ROW><id>20234335</id><snippet>a</snippet></ROW><ROW><id>20234335</id><snippet>IO</snippet></ROW><ROW><id>20234743</id><snippet>import collections

with open("cpu_text", "r") as f:
    lines = f.readlines()

lines = [line.strip() for line in lines]

group_id = 0
group_member_id = 0
output_dict = collections.OrderedDict()

for line in lines:
    if line.find("SYS") &gt; -1:
        group_id += 1
    elif line.find("Tot") &gt; -1:
        group_member_id = 0
    else:
        group_member_id += 1
        key = "{0}-{1}".format(group_id, group_member_id)
        memory = line.split()[7]
        output_dict[key] = memory

print(output_dict)
</snippet></ROW><ROW><id>20234743</id><snippet>OrderedDict([('1-1', '92'), ('1-2', '2'), ('2-1', '1'), ('3-1', '8'), ('3-2', '200'), ('3-3', '6')])
</snippet></ROW><ROW><id>20234990</id><snippet>list - Average: O(n)
set/dict - Average: O(1), Worst: O(n)
</snippet></ROW><ROW><id>20235075</id><snippet>assert_equal</snippet></ROW><ROW><id>20235075</id><snippet>lexicon.scan("north")</snippet></ROW><ROW><id>20235075</id><snippet>None</snippet></ROW><ROW><id>20235075</id><snippet>[('direction', 'north')]</snippet></ROW><ROW><id>20235075</id><snippet>lexicon.scan</snippet></ROW><ROW><id>20235075</id><snippet>return</snippet></ROW><ROW><id>20235450</id><snippet>form.is_valid</snippet></ROW><ROW><id>20235450</id><snippet>from django.shortcuts import render, redirect

def update_details(request):
   if request.method == "POST":
            form = UpdateDetailsForm(request.POST, request.FILES)
            if form.is_valid():
               asset_code=form.cleaned_data['asset_code1']
               fd=form.cleaned_data['product_details']
               verifications = Verification.objects.filter(asset_code__exact=asset_code)
               # filter returns a list, so the line below will not work
               # you need to loop through the result in case there
               # are multiple verification objects returned
               # verifications.update(product_details=fd)
               for v in verifications:
                   v.update(product_details=fd)

               # you need to return something here
               return redirect('/')
            else:
               # Handle the condition where the form isn't valid
               return render(request, 'update_details.html', {'form': form})

   return render(request, 'update_details.html', {'form':UpdateDetailsForm()})
</snippet></ROW><ROW><id>20235613</id><snippet>import theano.tensor as T
from theano import function

x = T.dmatrix('x')
linmax = function([x], T.maximum(x,0))
</snippet></ROW><ROW><id>20235613</id><snippet>linmax([[-1,-2],[3,4]])
</snippet></ROW><ROW><id>20235613</id><snippet>array([[0.,0.],[3.,4.]])
</snippet></ROW><ROW><id>20236139</id><snippet>RFECV</snippet></ROW><ROW><id>20236139</id><snippet>binary</snippet></ROW><ROW><id>20236139</id><snippet>multiclass</snippet></ROW><ROW><id>20236139</id><snippet>multilabel-indicator</snippet></ROW><ROW><id>20236139</id><snippet>multilabel-sequences</snippet></ROW><ROW><id>20236139</id><snippet>y</snippet></ROW><ROW><id>20236139</id><snippet>y</snippet></ROW><ROW><id>20236139</id><snippet>y</snippet></ROW><ROW><id>20236139</id><snippet>y</snippet></ROW><ROW><id>20236139</id><snippet>Y</snippet></ROW><ROW><id>20236139</id><snippet>unknown</snippet></ROW><ROW><id>20236139</id><snippet>y</snippet></ROW><ROW><id>20236139</id><snippet>"0"</snippet></ROW><ROW><id>20236139</id><snippet>"1"</snippet></ROW><ROW><id>20236139</id><snippet>read_table</snippet></ROW><ROW><id>20236139</id><snippet>&gt;&gt;&gt; training_data[:, -1].dtype
dtype('O')
&gt;&gt;&gt; type_of_target(training_data[:, -1])
'unknown'
</snippet></ROW><ROW><id>20236139</id><snippet>int</snippet></ROW><ROW><id>20236139</id><snippet>&gt;&gt;&gt; Y = training_data[:, -1].astype(int)
&gt;&gt;&gt; type_of_target(Y)
'binary'
</snippet></ROW><ROW><id>20236565</id><snippet>while 0</snippet></ROW><ROW><id>20236565</id><snippet>while False</snippet></ROW><ROW><id>20236565</id><snippet>for i in range(0,30):
    while i: # while 0 == while False, so it just skips to next value
        print i           
        break 
</snippet></ROW><ROW><id>20236565</id><snippet>for i in range(0,30):
    while i is not False: # False == 0 but False is not 0
        print i           
        break 
</snippet></ROW><ROW><id>20236898</id><snippet>re.search</snippet></ROW><ROW><id>20236898</id><snippet>.*</snippet></ROW><ROW><id>20236898</id><snippet>re.match</snippet></ROW><ROW><id>20236898</id><snippet>re.search</snippet></ROW><ROW><id>20236898</id><snippet>^</snippet></ROW><ROW><id>20236898</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>20236898</id><snippet>r'string [^=]*=.*'
</snippet></ROW><ROW><id>20236898</id><snippet>=</snippet></ROW><ROW><id>20236898</id><snippet>=</snippet></ROW><ROW><id>20236898</id><snippet>+</snippet></ROW><ROW><id>20236898</id><snippet>*</snippet></ROW><ROW><id>20236898</id><snippet>*</snippet></ROW><ROW><id>20236898</id><snippet>+</snippet></ROW><ROW><id>20237044</id><snippet>def get_repr(value): 
    if callable(value):
        return '%s' % value()
    return value

def get_field(instance, field):
    field_path = field.split('.')
    attr = instance
    for elem in field_path:
        try:
            attr = getattr(attr, elem)
        except AttributeError:
            return None
    return attr

for field in fields:
    context['project'][field] = get_repr(get_field(project, field))
</snippet></ROW><ROW><id>20237385</id><snippet>time.sleep</snippet></ROW><ROW><id>20237385</id><snippet>socket.recv()</snippet></ROW><ROW><id>20237385</id><snippet>time.sleep</snippet></ROW><ROW><id>20237385</id><snippet>Event</snippet></ROW><ROW><id>20237385</id><snippet>from threading import Event

ev = Event()
ev.clear()

state = ev.wait(rand_pause) # this blocks until timeout or .set() call
</snippet></ROW><ROW><id>20237385</id><snippet>ev</snippet></ROW><ROW><id>20237385</id><snippet>ev.set() # this will unlock .wait above
</snippet></ROW><ROW><id>20237385</id><snippet>state</snippet></ROW><ROW><id>20237385</id><snippet>state == True</snippet></ROW><ROW><id>20237385</id><snippet>.set()</snippet></ROW><ROW><id>20237385</id><snippet>state == False</snippet></ROW><ROW><id>20237604</id><snippet>davidcottonworks.com</snippet></ROW><ROW><id>20237604</id><snippet>decotton</snippet></ROW><ROW><id>20237794</id><snippet>print("9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08"[::5])
</snippet></ROW><ROW><id>20237794</id><snippet>&gt;&gt;&gt; '9045e51f22550'
</snippet></ROW><ROW><id>20238314</id><snippet>bool(set(a)&amp;set(b))</snippet></ROW><ROW><id>20238314</id><snippet>a</snippet></ROW><ROW><id>20238314</id><snippet>b</snippet></ROW><ROW><id>20238314</id><snippet>&amp;</snippet></ROW><ROW><id>20238314</id><snippet>False</snippet></ROW><ROW><id>20238314</id><snippet>True</snippet></ROW><ROW><id>20238314</id><snippet>any(True for x in a if x in b)</snippet></ROW><ROW><id>20238314</id><snippet>any()</snippet></ROW><ROW><id>20238397</id><snippet>import os
import re
import csv
from bs4 import BeautifulSoup

def driver(folder, input_filename, output_filename1, output_filename2):
    os.chdir(folder)
    with open(input_filename, 'r') as f:
        hearing = f.read()

    Hearing = BeautifulSoup(hearing)
    Hearing = Hearing.get_text()
    Hearing = Hearing.split("erroneous text")

    speakers = re.findall("\\n    Mr. [A-Z][a-z]+\.|\\n    Ms. [A-Z][a-z]+\.|\\n    Congressman [A-Z][a-z]+\.|\\n   Congresswoman [A-Z][a-z]+\.|\\n   Chairwoman [A-Z][a-z]+\.|\\n   Chairman [A-Z][a-z]+\.", hearing)
    speakers = list(set(speakers))

    print speakers

    position = []
    for speaker in speakers:
        x = hearing.find(speaker)
        position.append(x)

    def find_speaker(hearing, speakers):
        position = []
        for speaker in speakers:
            x = hearing.find(speaker)
            if x==-1:
                x += 1000000
            position.append(x)
        first = min(position)
        name = speakers[position.index(min(position))]
        name_length = len(name)
        chunk = [name, hearing[0:first], hearing[first+name_length:]]
        return chunk

    chunks = []

    print hearing
    names = []
    while len(hearing)&gt;10:
        chunk_try = find_speaker(hearing, speakers)
        hearing = chunk_try[2]
        chunks.append(chunk_try[1])
        names.append(chunk_try[0].strip())

    print len(hearing)#0

    #print dialogue[0:5]

    chunks.append(hearing)
    chunks = chunks[1:]
    print len(names) #138
    print len(chunks) #138

    data = zip(names, chunks)

    with open(output_filename1,'wb') as f:
        w=csv.writer(f)
        w.writerow(['Speaker','Speach'])
        for row in data:
            w.writerow(row)

    paragraphs = str(chunks)
    print (paragraphs)

    Paragraphs = paragraphs.split("\\n")

    data1 = zip(Paragraphs)

    with open(output_filename2,'wb') as f:
        w=csv.writer(f)
        w.writerow(['Paragraphs'])
        for row in data1:
            w.writerow(row)

    return True  # success

if __name__ == '__main__':
    driver('path in computer', 'hearing_name.htm', 'filename.csv', 'Paragraphs.csv')
</snippet></ROW><ROW><id>20238469</id><snippet>import csv
from pylab import *

with open('test.csv', 'rb') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=',', quotechar='|') # open the csv file
    x = []
    y = []
    for row in spamreader:
        x.append(row[0])
        y.append(row[1])
        print ', '.join(row) #  in each loop, row is getting the data,
                         # first row is [1,1] , then [2,2] and so on

plot(x, y)
show()
</snippet></ROW><ROW><id>20238554</id><snippet>collections.Counter</snippet></ROW><ROW><id>20238554</id><snippet>from collections import Counter
with open('abc.txt') as f:
    c = Counter(int(line.split(None, 1)[0]) for line in f)
    print c
</snippet></ROW><ROW><id>20238554</id><snippet>Counter({0: 2, -1: 2, 1: 1})
</snippet></ROW><ROW><id>20238554</id><snippet>str.split(None, 1)</snippet></ROW><ROW><id>20238554</id><snippet>&gt;&gt;&gt; s = "1 3 4 2 6 7 8 8 93 23 45 2 0 0 0 1"                                                
&gt;&gt;&gt; s.split(None, 1)
['1', '3 4 2 6 7 8 8 93 23 45 2 0 0 0 1']
</snippet></ROW><ROW><id>20238554</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from collections import Counter                                                         
&gt;&gt;&gt; Counter(np.loadtxt('abc.txt', usecols=(0,), dtype=np.int))                                     
Counter({0: 2, -1: 2, 1: 1})
</snippet></ROW><ROW><id>20238749</id><snippet>for token in line.split(';'):
    start = any(s in token for s in ["RecentNetworks", "LastConnected"])
</snippet></ROW><ROW><id>20238998</id><snippet>c = None

def fib(n):
    global c

    result = []
    a, b = 0, 1
    while b &lt; n:
        result.append(b)    
        a, b = b, a+b
        c = result
    return result

f100 = fib(100)
print result
print c
</snippet></ROW><ROW><id>20238998</id><snippet>__call__</snippet></ROW><ROW><id>20238998</id><snippet>class fibber(object):
    def __init__(self):
        self.c = None

    def __call__(self, n):
        result = []
        a, b = 0, 1
        while b &lt; n:
            result.append(b)    
            a, b = b, a+b
            self.c = result
        return result

fib = fibber()
f100 = fib(100)
print result
print fib.c
</snippet></ROW><ROW><id>20239358</id><snippet>list.index</snippet></ROW><ROW><id>20239358</id><snippet>&gt;&gt;&gt; TupList = [('ABC D','235'),('EFG H','462')]
&gt;&gt;&gt; TupList.index((u'EFG H',u'462'))
1
</snippet></ROW><ROW><id>20239558</id><snippet>1.5 * (1.0 - random.random())
</snippet></ROW><ROW><id>20239558</id><snippet>random.random() &lt; 1.0</snippet></ROW><ROW><id>20239558</id><snippet>v = 3.0 * random.random()
result = 1.5 - v
if v &gt;= 1.5:
    result = v - 3.0
</snippet></ROW><ROW><id>20239558</id><snippet>0.0 &lt;= v &lt; 1.5</snippet></ROW><ROW><id>20239558</id><snippet>1.5 - v</snippet></ROW><ROW><id>20239558</id><snippet>0.0 &lt;= range &lt; 1.5</snippet></ROW><ROW><id>20239558</id><snippet>1.5 &lt;= v &lt; 3.0</snippet></ROW><ROW><id>20239558</id><snippet>v - 3.0</snippet></ROW><ROW><id>20239558</id><snippet>0.0 &gt; range &gt;= -1.5</snippet></ROW><ROW><id>20239680</id><snippet>image = Image.new('RGB', (xsize, ysize))
</snippet></ROW><ROW><id>20239680</id><snippet>draw = ImageDraw.Draw(image) 
</snippet></ROW><ROW><id>20239680</id><snippet>draw.text((xpos,ypos), mytext, font=ImageFont.truetype('myfont.ttf', 11))
</snippet></ROW><ROW><id>20239680</id><snippet>draw.line((startx,starty, endx,endy), fill=128)
</snippet></ROW><ROW><id>20239680</id><snippet>draw.arc((startx,starty, endx,endy), startangle, endangle)
</snippet></ROW><ROW><id>20239853</id><snippet>10 10
1 2 3 4 1 2 3 4 100000 99999
1
2
3
4
5
6
7
8
9
10
</snippet></ROW><ROW><id>20239853</id><snippet>[10, 9, 8, 7, 6, 5]</snippet></ROW><ROW><id>20239853</id><snippet>import timeit
from bisect import bisect_left

def doit():
    f_in = open('b.in', 'r')
    n, m = [int(i) for i in f_in.readline().rstrip().split(' ')]
    a = [int(i) for i in f_in.readline().rstrip().split(' ')]
    found = {}
    indices = []
    for i in range(n - 1, 0, -1):
        if not a[i] in found:
            indices.append(i+1)
            found[a[i]] = True

    indices.reverse()
    length = len(indices)
    for i in range(m):
        l = int(f_in.readline().rstrip())
        index = bisect_left(indices, l)
        print length - index

if __name__ == "__main__":
    print (timeit.timeit('doit()', setup="from bisect import bisect_left;from __main__ import doit", number=10))
</snippet></ROW><ROW><id>20239860</id><snippet>def spam():
    pass

spam2 = spam  # keep a reference
print spam
=&gt; &lt;function spam at 0x56d69b0&gt;

import gc
[ obj for obj in gc.get_objects() if id(obj) == 0x56d69b0 ]
=&gt; [&lt;function __main__.spam&gt;]
</snippet></ROW><ROW><id>20240445</id><snippet>sudo fuser -k 8000/tcp</snippet></ROW><ROW><id>20240457</id><snippet>foreman start</snippet></ROW><ROW><id>20240457</id><snippet>git push heroku</snippet></ROW><ROW><id>20240601</id><snippet>json</snippet></ROW><ROW><id>20240601</id><snippet>dict</snippet></ROW><ROW><id>20240601</id><snippet>list</snippet></ROW><ROW><id>20240601</id><snippet>db</snippet></ROW><ROW><id>20240601</id><snippet>obj = json.dumps("{
    'PatientProfile__is_recruiter': '1', 
    'PatientProfile__partner': 'FMCS', 
    'PatientProfile__health_insurance_provider': 'MILITARY/VA', 
    'PatientProfile__has_medical_home': '0', 
    'PatientProfile__medical_history_heart_disease': '0', 
    'PatientProfile__medical_history_hypertension': '0', 
    'data_model_name': [
        'PatientProfile'
    ]
}")
</snippet></ROW><ROW><id>20240601</id><snippet>json.loads
</snippet></ROW><ROW><id>20240738</id><snippet>import pyodbc
sname = 'Gord'
rcount = 3
cnxn = pyodbc.connect(
        'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};' +
        'DBQ=C:\\Users\\Public\\Database1.accdb;')
cursor = cnxn.cursor()
cursor.execute('''insert into core_data(screen_name,retweet_count) values (?,?)''', (sname,int(rcount)))
cursor.commit()
cnxn.close()
</snippet></ROW><ROW><id>20240738</id><snippet>import pypyodbc
sname = 'Gord'
rcount = 3
cnxn = pypyodbc.connect(
        'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};' +
        'DBQ=C:\\Users\\Public\\Database1.accdb;')
cursor = cnxn.cursor()
cursor.execute('''insert into core_data(screen_name,retweet_count) values (?,?)''', (sname,rcount))
cursor.commit()
cnxn.close()
</snippet></ROW><ROW><id>20240759</id><snippet>jinja2.Template()</snippet></ROW><ROW><id>20240759</id><snippet>template = jinja_env.from_string(text_of_the_template)
template.render(**kwargs)
</snippet></ROW><ROW><id>20240916</id><snippet>def shorten_hostnames(machines):
    keys, values = zip(*machines.items())
    values = [v.split('.') for v in values]
    for i, s in ((-1, slice(-1)), (0, slice(1, None))):
        while all(values):
            if not len(set(v[i] for v in values)) == 1:
                break
            if any(len(v) &lt;= 1 for v in values):
                break
            values = [v[s] for v in values]
    return {k: '.'.join(v) for k, v in zip(keys, values)}
</snippet></ROW><ROW><id>20240916</id><snippet>from itertools import dropwhile, izip_longest

def remove_common_prefix(*parts):
    # always leaves a last common element in place
    zipped = izip_longest(*(p[:-1] for p in parts), fillvalue=None)
    stripped = dropwhile(lambda v: len(set(v)) == 1, zipped)
    res = [filter(None, part) + (old[-1],) for part, old in zip(zip(*stripped), parts)]
    # filtered everything away? Then return just the last parts
    return res or [p[-1:] for p in parts]

def shorten_hostnames(machines):
    # edge-case; faster to just return the first part
    if len(machines) == 1:
        return {k: v.split('.', 1)[0] for k, v in machines.items()}
    keys, values = zip(*machines.items())  # for easier processing and re-assembling
    parts = remove_common_prefix(*(v.split('.')[::-1] for v in values))
    parts = remove_common_prefix(*(part[::-1] for part in parts))
    return {k: '.'.join(v) for k, v in zip(keys, parts)}
</snippet></ROW><ROW><id>20240916</id><snippet>&gt;&gt;&gt; shorten_hostnames(machines)
{'b.ace.site.info': 'b.ace', 'a.ace.site.info': 'a.ace', 'b.bob.site.info': 'b.bob', 'a.bob.site.info': 'a.bob'}
&gt;&gt;&gt; shorten_hostnames({'foo': 'a.ace.site', 'bar': 'a.ace.site.info'})
{'foo': 'site', 'bar': 'site.info'}
&gt;&gt;&gt; shorten_hostnames({'ace.a.site.info': 'ace.a.site.info', 'ace.b.site.info': 'ace.b.site.info'})
{'ace.b.site.info': 'b', 'ace.a.site.info': 'a'}
&gt;&gt;&gt; shorten_hostnames({'ace.a.site.info': 'ace.a.site.info'})
{'ace.a.site.info': 'ace'}
</snippet></ROW><ROW><id>20241020</id><snippet>logger.handlers.</snippet></ROW><ROW><id>20241020</id><snippet>logging.handlers.</snippet></ROW><ROW><id>20241020</id><snippet>setlevel</snippet></ROW><ROW><id>20241020</id><snippet>setLevel</snippet></ROW><ROW><id>20241020</id><snippet>import logging
import logging.handlers
CMDID='TEST'

class ContextFilter(logging.Filter):
  def filter(self,record):
    record.CMDID=CMDID
    return True

FORMAT='%(asctime)s [%(CMDID)s] - %(message)s'
logger=logging.getLogger("Test")
fh=logging.handlers.RotatingFileHandler("testing.log",maxBytes=1024,backupCount=5)
fh.setLevel(logging.DEBUG)
fh.setFormatter(logging.Formatter(FORMAT))
logger.addHandler(fh)
logger.addFilter(ContextFilter())
logger.warning("WTH")
</snippet></ROW><ROW><id>20241020</id><snippet>logger</snippet></ROW><ROW><id>20241020</id><snippet>logger.handlers</snippet></ROW><ROW><id>20241020</id><snippet>logging.handlers.RotatingFileHandler()</snippet></ROW><ROW><id>20241020</id><snippet>fh</snippet></ROW><ROW><id>20241020</id><snippet>logger.addHandler</snippet></ROW><ROW><id>20241020</id><snippet>In [4]: logger.handlers
Out[4]: [&lt;logging.handlers.RotatingFileHandler at 0x3e85b70&gt;]
</snippet></ROW><ROW><id>20241063</id><snippet>cur.execute("""SELECT MAX(id) FROM %s WHERE equipement_id = %s""" % (table, eq_id))
</snippet></ROW><ROW><id>20241070</id><snippet>HOST</snippet></ROW><ROW><id>20241070</id><snippet>header = {"Host": 'www.auto-club74.ru' }
r2 = requests.get('http://{}/'.format(sIP), headers=header)
</snippet></ROW><ROW><id>20241070</id><snippet>header = {"Host": 'auto-club74.ru' }
r2 = requests.get('http://{}/'.format(sIP), headers=header)
</snippet></ROW><ROW><id>20241115</id><snippet> from django.utils.translation import ugettext_lazy as _
</snippet></ROW><ROW><id>20241115</id><snippet>'password'</snippet></ROW><ROW><id>20241627</id><snippet>{% for form_field in add_gateway_details_form %}
    {{ form_field }}
{% endfor %}
</snippet></ROW><ROW><id>20241627</id><snippet>{{ add_gateway_details_form.gateway_name }}
</snippet></ROW><ROW><id>20241690</id><snippet>results = (lev_name,) + results
</snippet></ROW><ROW><id>20241705</id><snippet>traceback.format_tb()</snippet></ROW><ROW><id>20241705</id><snippet>print_tb()</snippet></ROW><ROW><id>20241705</id><snippet>error['traceback'] = ''.join(traceback.format_tb(error_traceback))
</snippet></ROW><ROW><id>20241705</id><snippet>print_tb()</snippet></ROW><ROW><id>20241705</id><snippet>None</snippet></ROW><ROW><id>20241738</id><snippet>from functools import wraps
from inspect import getcallargs


def decorator(f):
    @wraps(f)
    def new(**kwargs):
        # filter only those vars, that are in the list of function's named args
        from_globals = {arg: globals()[arg] for arg in getcallargs(f)}
        # overwrite them with user supplied kwargs
        from_globals.update(kwargs)
        f(**from_gobals)

    return new


@decorator
def f(a=None, b=None, c=None):
    print a, b, c


a = 1
b = 2
c = 3

f(a=2, b=4) # 2 4 3
</snippet></ROW><ROW><id>20242049</id><snippet>if self.children == []:
    self.children.append(node)
    return
</snippet></ROW><ROW><id>20242049</id><snippet>def add_child(self, node, parent):
    if self.data == parent:
        self.children.append(node)
        return
    for child in self.children:
        child.add_child(node, parent)
</snippet></ROW><ROW><id>20242077</id><snippet>&gt;&gt;&gt; import re    
&gt;&gt;&gt; s = 'CN=ERT234,OU=Computers,OU=ES1-HER,OU=ES1-Seura,OU=RES-ES1,DC=resu,DC=kt,DC=elt'
&gt;&gt;&gt; re.findall('OU=([^,]+)', s)
['Computers', 'ES1-HER', 'ES1-Seura', 'RES-ES1']
&gt;&gt;&gt; re.findall('OU=([^,]+)', s)[1:3]
['ES1-HER', 'ES1-Seura']
&gt;&gt;&gt; ' / '.join(re.findall('OU=([^,]+)', s)[1:3])
'ES1-HER / ES1-Seura'
</snippet></ROW><ROW><id>20242077</id><snippet>str</snippet></ROW><ROW><id>20242077</id><snippet>str</snippet></ROW><ROW><id>20242161</id><snippet>In [54]: urllib.unquote(google_response.url).decode('utf8')
Out[54]: u'http://maps.googleapis.com/maps/api/directions/json?origin=40.970321,29.060873&amp;destination=28.974656,41.029967&amp;sensor=false'
</snippet></ROW><ROW><id>20242362</id><snippet>unique=True</snippet></ROW><ROW><id>20242362</id><snippet>asset_code</snippet></ROW><ROW><id>20242362</id><snippet>from django import forms

class VerificationAdminForm(forms.ModelForm):
    class Meta:
        model = Verification

    def clean_asset_code(self):
        asset_code = self.cleaned_data['asset_code']
        if Verification.objects.filter(asset_code=asset_code).exists():
            raise forms.ValidationError("This asset code already exist.")
        return asset_code

class VerificationAdmin(admin.ModelAdmin):
    form = VerificationAdminForm
</snippet></ROW><ROW><id>20242411</id><snippet>super(Singleton, self).__new__(self)
</snippet></ROW><ROW><id>20242411</id><snippet>__new__</snippet></ROW><ROW><id>20242411</id><snippet>Singleton</snippet></ROW><ROW><id>20242411</id><snippet>object</snippet></ROW><ROW><id>20242411</id><snippet>__new__</snippet></ROW><ROW><id>20242411</id><snippet>self._instance</snippet></ROW><ROW><id>20242411</id><snippet>Singleton()</snippet></ROW><ROW><id>20242504</id><snippet>__repr__</snippet></ROW><ROW><id>20242504</id><snippet>__str__</snippet></ROW><ROW><id>20242504</id><snippet>str()</snippet></ROW><ROW><id>20242504</id><snippet>print</snippet></ROW><ROW><id>20242504</id><snippet>__str__</snippet></ROW><ROW><id>20242504</id><snippet>class node(object):
    def __init__(self, value, children = []):
        self.value = value
        self.children = children

    def __str__(self, level=0):
        ret = "\t"*level+repr(self.value)+"\n"
        for child in self.children:
            ret += child.__str__(level+1)
        return ret

    def __repr__(self):
        return '&lt;tree node representation&gt;'
</snippet></ROW><ROW><id>20242504</id><snippet>&gt;&gt;&gt; root = node('grandmother')
&gt;&gt;&gt; root.children = [node('daughter'), node('son')]
&gt;&gt;&gt; root.children[0].children = [node('granddaughter'), node('grandson')]
&gt;&gt;&gt; root.children[1].children = [node('granddaughter'), node('grandson')]
&gt;&gt;&gt; root
&lt;tree node representation&gt;
&gt;&gt;&gt; str(root)
"'grandmother'\n\t'daughter'\n\t\t'granddaughter'\n\t\t'grandson'\n\t'son'\n\t\t'granddaughter'\n\t\t'grandson'\n"
&gt;&gt;&gt; print root
'grandmother'
    'daughter'
        'granddaughter'
        'grandson'
    'son'
        'granddaughter'
        'grandson'
</snippet></ROW><ROW><id>20242681</id><snippet>cv=10</snippet></ROW><ROW><id>20242681</id><snippet>LassoCV</snippet></ROW><ROW><id>20242681</id><snippet>KFold</snippet></ROW><ROW><id>20242681</id><snippet>check_cv</snippet></ROW><ROW><id>20242681</id><snippet>LinearModelCV</snippet></ROW><ROW><id>20242681</id><snippet>LassoCV</snippet></ROW><ROW><id>20242681</id><snippet>KFold</snippet></ROW><ROW><id>20242681</id><snippet>random_state</snippet></ROW><ROW><id>20242681</id><snippet>numpy.random</snippet></ROW><ROW><id>20242681</id><snippet>/dev/urandom</snippet></ROW><ROW><id>20242681</id><snippet>False</snippet></ROW><ROW><id>20242681</id><snippet>random_state</snippet></ROW><ROW><id>20242681</id><snippet>KFold</snippet></ROW><ROW><id>20242681</id><snippet>shuffle=True</snippet></ROW><ROW><id>20242681</id><snippet>cv</snippet></ROW><ROW><id>20242681</id><snippet>10</snippet></ROW><ROW><id>20242937</id><snippet>widget = waitForObject(':Test Widget')

metaObject = widget.metaObject();
methodCount =  metaObject.methodCount()

for x in range(0, methodCount):
    method = metaObject.method(x)
    test.log(method.signature())
</snippet></ROW><ROW><id>20243020</id><snippet>k='john'
k1=['john', 'is', 'sleeping']
print [(i, k) for i in k1]
</snippet></ROW><ROW><id>20243020</id><snippet>[('john', 'john'), ('is', 'john'), ('sleeping', 'john')]
</snippet></ROW><ROW><id>20243020</id><snippet>k1</snippet></ROW><ROW><id>20243020</id><snippet>k</snippet></ROW><ROW><id>20243020</id><snippet>k</snippet></ROW><ROW><id>20243020</id><snippet>k1</snippet></ROW><ROW><id>20243020</id><snippet>k=['john']
k1=['john', 'is', 'sleeping']
from itertools import product
print [item for item in product(k1, k)]
</snippet></ROW><ROW><id>20243081</id><snippet>?dl=1</snippet></ROW><ROW><id>20243081</id><snippet>https://www.dropbox.com/sh/xyz/xyz-YZ</snippet></ROW><ROW><id>20243081</id><snippet>https://www.dropbox.com/sh/xyz/xyz-YZ?dl=1</snippet></ROW><ROW><id>20243088</id><snippet>hands = Nplayers*[[]]
</snippet></ROW><ROW><id>20243088</id><snippet>hands[0]</snippet></ROW><ROW><id>20243088</id><snippet>hands = [[] for _ in range(Nplayers)]
</snippet></ROW><ROW><id>20243088</id><snippet>def deal_cards(deck, Nplayers):
    shuffle(deck)
    l = len(deck)
    portion = l // Nplayers
    return [deck[i:i + portion] for i in range(0, len(deck), portion]
</snippet></ROW><ROW><id>20243278</id><snippet>EVT_TEXT_ENTER</snippet></ROW><ROW><id>20243278</id><snippet>on_change_pulses</snippet></ROW><ROW><id>20243278</id><snippet>self.data</snippet></ROW><ROW><id>20243278</id><snippet>TextCtrl</snippet></ROW><ROW><id>20243278</id><snippet>EVT_TEXT</snippet></ROW><ROW><id>20243278</id><snippet>TextCtrl</snippet></ROW><ROW><id>20243278</id><snippet>        ....
        #Send back their data
        self.Bind(wx.EVT_TEXT_ENTER, self.on_change_pulses, self.textctrl_width)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_change_pulses, self.textctrl_lead)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_change_pulses, self.textctrl_trail)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_change_pulses, self.textctrl_delay)

        # ADDED: listen for EVT_TEXT event
        self.Bind(wx.EVT_TEXT, self.on_change_pulses_update, self.textctrl_width)
        self.Bind(wx.EVT_TEXT, self.on_change_pulses_update, self.textctrl_lead)
        self.Bind(wx.EVT_TEXT, self.on_change_pulses_update, self.textctrl_trail)
        self.Bind(wx.EVT_TEXT, self.on_change_pulses_update, self.textctrl_delay)

        #Generate Layout
        #Use a FlexGrid Sizer
        self.fgs = wx.FlexGridSizer(rows=4, cols=2, vgap=9, hgap=25)
        ....
</snippet></ROW><ROW><id>20243278</id><snippet>    def on_change_pulses_update(self, event):
        textctrl = event.GetEventObject()
        name = textctrl.GetName()
        value = textctrl.GetValue()

        self.data[name] = value
</snippet></ROW><ROW><id>20243278</id><snippet>TextCtrl</snippet></ROW><ROW><id>20243278</id><snippet>EVT_TEXT_ENTER</snippet></ROW><ROW><id>20243278</id><snippet>    def on_change_pulses(self, event):
        textctrl = event.GetEventObject()
        name = textctrl.GetName()
        #value = textctrl.GetValue()

        self.data['Width']    = self.textctrl_width.GetValue()
        self.data['Leading']  =  self.textctrl_lead.GetValue()
        self.data['Trailing'] = self.textctrl_trail.GetValue()
        self.data['Delay']    =  self.textctrl_delay.GetValue()

        print self.name, self.data
</snippet></ROW><ROW><id>20243354</id><snippet>from selenium import webdriver
from bs4 import BeautifulSoup

link = "https://www.iaai.com/Vehicles/VehicleDetails.aspx?auctionID=14712591&amp;itemID=15775059&amp;RowNumber=0"
browser = webdriver.Firefox()
browser.get(link)
page = browser.page_source

soup = BeautifulSoup(page)

table = soup.find('dd', attrs = {'class': 'tip_vehicleStats'})
vin = table.contents.span.contents[0]
print vin
</snippet></ROW><ROW><id>20243354</id><snippet>table.contents[0]</snippet></ROW><ROW><id>20243354</id><snippet>table.contents.span.contents[0]</snippet></ROW><ROW><id>20243720</id><snippet>packages = ['.']
</snippet></ROW><ROW><id>20243926</id><snippet>.pyx</snippet></ROW><ROW><id>20243926</id><snippet>.pxd</snippet></ROW><ROW><id>20243926</id><snippet>C</snippet></ROW><ROW><id>20243926</id><snippet>int</snippet></ROW><ROW><id>20243926</id><snippet>void</snippet></ROW><ROW><id>20243926</id><snippet>int fib(int n){
    int i = 2;    /* Obviously 1 can divide all and 2 is the base of primality*/
    while (i &lt; n) {
        if (n % i == 0){
            return 0;
            break;
        }
        else {
            i = i + 1;
            if (i == (n-1)){ return 1; }
        }
    }
    return 0;
} 
</snippet></ROW><ROW><id>20243926</id><snippet>;</snippet></ROW><ROW><id>20243926</id><snippet>void fib(int n);
</snippet></ROW><ROW><id>20243926</id><snippet>my_cython.pyx</snippet></ROW><ROW><id>20243926</id><snippet>cdef extern from './fib.h':
    int fib(int n)

cdef extern from './fib.c':
    pass

def function(n):
    return fib(n)
</snippet></ROW><ROW><id>20243926</id><snippet>from my_cython import function
print function(10)
</snippet></ROW><ROW><id>20243926</id><snippet>cdef extern from *:</snippet></ROW><ROW><id>20243926</id><snippet>cdef extern from *:
    pass
</snippet></ROW><ROW><id>20244075</id><snippet>for items in data:
  id, salary, title, lastname, firstname = items
  employee(lastna,e, firstname, id, title, salary)
</snippet></ROW><ROW><id>20244325</id><snippet>server {
    listen       80;
    server_name  localhost;

    location / {
        root   html;
        index  index.html index.htm;
        proxy_pass http://127.0.0.1:8000;
    }
    location /static {
        autoindex on;
        alias /path/to/staticfiles;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }
}
</snippet></ROW><ROW><id>20244336</id><snippet>re.findall()</snippet></ROW><ROW><id>20244336</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile(r'([a-z][a-z-\']+[a-z])')
&gt;&gt;&gt; regex.findall("HELLO W-O-R-L-D") # this has uppercase
[]  # there are no results here, because the string is uppercase
&gt;&gt;&gt; regex.findall("HELLO W-O-R-L-D".lower()) # lets lowercase
['hello', 'w-o-r-l-d'] # now we have results
&gt;&gt;&gt; regex.findall("123hello456world789")
['hello', 'world']
</snippet></ROW><ROW><id>20244336</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>20244589</id><snippet>**params</snippet></ROW><ROW><id>20244589</id><snippet>params</snippet></ROW><ROW><id>20244589</id><snippet>params=None</snippet></ROW><ROW><id>20244589</id><snippet>&gt;&gt;&gt; def func(**params):
...     print params
... 
&gt;&gt;&gt; func()
{}
&gt;&gt;&gt; func(params=None)
{'params': None}
&gt;&gt;&gt; func(foo='bar')
{'foo': 'bar'}
</snippet></ROW><ROW><id>20244589</id><snippet>foo</snippet></ROW><ROW><id>20244589</id><snippet>**</snippet></ROW><ROW><id>20244589</id><snippet>params=None</snippet></ROW><ROW><id>20244589</id><snippet>.execute()</snippet></ROW><ROW><id>20244589</id><snippet>def execute(self, statement, **params):
    if not params:
        self._curs.execute(statement)
    else:
        self._curs.execute(statement, params)
    # ...
</snippet></ROW><ROW><id>20244589</id><snippet>rows = sqlcnxn.execute("select * from demographics")
</snippet></ROW><ROW><id>20244589</id><snippet>execute()</snippet></ROW><ROW><id>20244589</id><snippet>return</snippet></ROW><ROW><id>20244589</id><snippet>rows</snippet></ROW><ROW><id>20244589</id><snippet>None</snippet></ROW><ROW><id>20244589</id><snippet>return self</snippet></ROW><ROW><id>20244609</id><snippet>xml.etree.ElementTree.Element</snippet></ROW><ROW><id>20244609</id><snippet>lxml.etree.tostring</snippet></ROW><ROW><id>20244609</id><snippet>etree.objectify.fromstring</snippet></ROW><ROW><id>20244839</id><snippet>center</snippet></ROW><ROW><id>20244839</id><snippet>def center(self):
    frameGm = self.frameGeometry()
    screen = QtGui.QApplication.desktop().screenNumber(QtGui.QApplication.desktop().cursor().pos())
    centerPoint = QtGui.QApplication.desktop().screenGeometry(screen).center()
    frameGm.moveCenter(centerPoint)
    self.move(frameGm.topLeft())
</snippet></ROW><ROW><id>20244955</id><snippet>class BoolAnswer(models.Model):
    bool_answer_field = models.ForeignKey(BoolAnswerField)
    result = models.BooleanField()
    if_true = models.TextField(max_length=100, null=True, blank=True)

    def clean(self)
        if self.bool_answer_field.if_true_field and not self.if_true:
            raise ValidationError('BAF is True without a reason')
</snippet></ROW><ROW><id>20245040</id><snippet>yticks</snippet></ROW><ROW><id>20245040</id><snippet>ax1.set_yticks(np.linspace(ax1.get_ybound()[0], ax1.get_ybound()[1], 5))
ax2.set_yticks(np.linspace(ax2.get_ybound()[0], ax2.get_ybound()[1], 5))
</snippet></ROW><ROW><id>20245040</id><snippet>ytick</snippet></ROW><ROW><id>20245040</id><snippet>ax1.set_yticks(np.linspace(0, ax1.get_ybound()[1]+1, 5))
ax2.set_yticks(np.linspace(0, ax2.get_ybound()[1]+1, 5))
</snippet></ROW><ROW><id>20245125</id><snippet>&gt;&gt;&gt; a=2
&gt;&gt;&gt; f = (lambda a: lambda x: x**a)(a)
&gt;&gt;&gt; f(3)
9
&gt;&gt;&gt; a=4
&gt;&gt;&gt; f(3)
9
</snippet></ROW><ROW><id>20245125</id><snippet> f = (lambda a, b, c: lambda x: a + b * c - x)(a, b, c)
</snippet></ROW><ROW><id>20245125</id><snippet> f = (lambda a, b, c, **rest: lambda x: a + b * c - x)(**locals())
</snippet></ROW><ROW><id>20245186</id><snippet>n2 == 4</snippet></ROW><ROW><id>20245210</id><snippet>files = {
    'file1': ('foo.gif', open('foo.gif', 'rb'), 'image/gif'),
    'file2': ('bar.png', open('bar.png', 'rb'), 'image/png'),
}
response = requests.post(url, files=files)
</snippet></ROW><ROW><id>20245316</id><snippet>setup.py</snippet></ROW><ROW><id>20245316</id><snippet>build/lib.linux-x86_64-2.7/_pjsua.so</snippet></ROW><ROW><id>20245316</id><snippet>./configure</snippet></ROW><ROW><id>20245316</id><snippet>-fPIC</snippet></ROW><ROW><id>20245316</id><snippet>configure-linux</snippet></ROW><ROW><id>20245316</id><snippet>#!/bin/sh
#
export CFLAGS="$CFLAGS -fPIC"

./configure
</snippet></ROW><ROW><id>20245408</id><snippet>from bind import ...</snippet></ROW><ROW><id>20245408</id><snippet>from .bind import ...</snippet></ROW><ROW><id>20245408</id><snippet>instagram/__init__.py</snippet></ROW><ROW><id>20245518</id><snippet>glob.glob</snippet></ROW><ROW><id>20245518</id><snippet>glob.iglob</snippet></ROW><ROW><id>20245518</id><snippet>*.dat</snippet></ROW><ROW><id>20245518</id><snippet>/home/data</snippet></ROW><ROW><id>20245518</id><snippet>import glob

for filepath in glob.glob('/home/data/*.dat'):
    b = np.genfromtxt(filepath).T[1] #luminsity
    q = getmax(b)
    print filename, 'max b=', q
</snippet></ROW><ROW><id>20245620</id><snippet>find_elements_by_xpath</snippet></ROW><ROW><id>20245620</id><snippet>//*[@id]</snippet></ROW><ROW><id>20245620</id><snippet>.tag_name</snippet></ROW><ROW><id>20245620</id><snippet>get_attribute("id")</snippet></ROW><ROW><id>20246014</id><snippet>Accept</snippet></ROW><ROW><id>20246014</id><snippet>application/octet-stream</snippet></ROW><ROW><id>20246014</id><snippet>binary</snippet></ROW><ROW><id>20246014</id><snippet>flask.make_response()</snippet></ROW><ROW><id>20246308</id><snippet>name = input("What did you put as the calculation name?: ")
saved_calcs = open("saved_calcs.txt", "r")
lines = saved_calcs.read()
split_lines = lines.split("\n")
index = split_lines.index(str(name))+1
for line in split_lines[index:index+8]:
    print line
saved_calcs.close()
</snippet></ROW><ROW><id>20246457</id><snippet>where</snippet></ROW><ROW><id>20246457</id><snippet>Windspeedsplains = Defaultwindspeed[goodtime[0][:, None, None, None],:,goodlat[0][:,None],plainslon[0]]
</snippet></ROW><ROW><id>20246457</id><snippet>[0]</snippet></ROW><ROW><id>20246457</id><snippet>np.where(a)</snippet></ROW><ROW><id>20246457</id><snippet>a.ndim</snippet></ROW><ROW><id>20246457</id><snippet>where</snippet></ROW><ROW><id>20246457</id><snippet>[0]</snippet></ROW><ROW><id>20246457</id><snippet>(goodtime.size, Defaultwindspeed.shape[1], goodlat.size, plainslon.size)</snippet></ROW><ROW><id>20246457</id><snippet>goodtime</snippet></ROW><ROW><id>20246457</id><snippet>Windspeedplains</snippet></ROW><ROW><id>20246457</id><snippet>0</snippet></ROW><ROW><id>20246457</id><snippet>4</snippet></ROW><ROW><id>20246457</id><snippet>goodtime</snippet></ROW><ROW><id>20246457</id><snippet>0</snippet></ROW><ROW><id>20246457</id><snippet>(N, 1, 1, 1)</snippet></ROW><ROW><id>20246457</id><snippet>[:, None, None, None]</snippet></ROW><ROW><id>20246457</id><snippet>goodtime = n.where((Time&gt;=1948)&amp;(Time&lt;2013))[0][:, None, None, None]
goodlat = n.where((Lat&gt;=35)&amp;(Lat&lt;=50))[0][:, None]
plainslon = n.where((Lon&gt;=275)&amp;(Lon&lt;=285))[0]

Windspeedsplains=Defaultwindspeed[goodtime, :, goodlat, plainslon]
</snippet></ROW><ROW><id>20246457</id><snippet>goodtime = ((Time&gt;=1948)&amp;(Time&lt;2013))[:, None, None, None]
goodlat = ((Lat&gt;=35)&amp;(Lat&lt;=50))[:, None]
plainslon = ((Lon&gt;=275)&amp;(Lon&lt;=285))

Windspeedsplains=Defaultwindspeed[goodtime, :, goodlat, plainslon]
</snippet></ROW><ROW><id>20246457</id><snippet>In [52]: a = np.arange(3*3*3).reshape(3,3,3)

In [53]: a
Out[53]: 
array([[[ 0,  1,  2],
        [ 3,  4,  5],
        [ 6,  7,  8]],

       [[ 9, 10, 11],
        [12, 13, 14],
        [15, 16, 17]],

       [[18, 19, 20],
        [21, 22, 23],
        [24, 25, 26]]])

In [54]: mask0 = np.where(a[:,0,0] &gt;= 9)

In [55]: mask0
Out[55]: (array([1, 2]),)   # &lt;-- this is the length 1 tuple I was talking about. we want the array inside.

In [56]: mask1 = np.where(a[0,:,0]%2 == 0)

In [57]: mask1
Out[57]: (array([0, 2]),)

In [62]: mask2 = np.where(a[0,0,:] &lt; 1)

In [63]: mask2
Out[63]: (array([0]),)

In [67]: b = a[mask0[0][:, None, None], mask1[0][:, None], mask2[0]]

In [68]: b
Out[68]: 
array([[[ 9],
        [15]],

       [[18],
        [24]]])

In [69]: b.shape
Out[69]: (2, 2, 1)
</snippet></ROW><ROW><id>20246547</id><snippet>makefile.write("{0}\n".format(item))
</snippet></ROW><ROW><id>20246547</id><snippet>a = "[0]".format("test")
print(a)

b = "{0}".format("test")
print(b)
</snippet></ROW><ROW><id>20246751</id><snippet>data = ["15674 24000 Manager Gregory the 1st John", "15674 24000 Manager Gregory the 1st John",
        "15674 24000 Manager Gregory the 1st John", "15674 24000 Manager Gregory the 1st John"]

data1 = []

for items in data:
    splitNames = items.split()
    number, salary, position, first, des1, des2, last = splitNames
    data1.append([last, first + ' ' + des1 + ' ' + des2, number, position, salary])

for items in data1:
    print items
</snippet></ROW><ROW><id>20246751</id><snippet>['John', 'Gregory the 1st', '15674', 'Manager', '24000']
['John', 'Gregory the 1st', '15674', 'Manager', '24000']
['John', 'Gregory the 1st', '15674', 'Manager', '24000']
['John', 'Gregory the 1st', '15674', 'Manager', '24000']
</snippet></ROW><ROW><id>20246751</id><snippet>data1.append(tuple([last, first + ' ' + des1 + ' ' + des2, number, position, salary]))
</snippet></ROW><ROW><id>20246751</id><snippet>('John', 'Gregory the 1st', '15674', 'Manager', '24000')
('John', 'Gregory the 1st', '15674', 'Manager', '24000')
('John', 'Gregory the 1st', '15674', 'Manager', '24000')
('John', 'Gregory the 1st', '15674', 'Manager', '24000')
</snippet></ROW><ROW><id>20246751</id><snippet>for items in line:
    breakup= items.split()
    number, salary, position, first, des1, des2, last = breakup
    data.append(tuple([last, first + ' ' + des1 + ' ' + des2, number, position, salary]))

print data
</snippet></ROW><ROW><id>20246751</id><snippet>[('John', 'Gregory the 1st', '15674', 'Manager', '24000'), ('John', 'Gregory the 1st', '15674', 'Manager', '24000'), ('John', 'Gregory the 1st', '15674', 'Manager', '24000'), ('John', 'Gregory the 1st', '15674', 'Manager', '24000')]
</snippet></ROW><ROW><id>20246884</id><snippet>return (z[0])*x**6 (z[1])*x**5 + (z[2])*x**4 + (z[3])*x**3 + (z[4])*x**2 + (z[6])*x + z[7]
</snippet></ROW><ROW><id>20246884</id><snippet>+</snippet></ROW><ROW><id>20246884</id><snippet>(z[0])*x**6</snippet></ROW><ROW><id>20246884</id><snippet>(z[1])*x**5</snippet></ROW><ROW><id>20246884</id><snippet>return (z[0])*x**6 + (z[1])*x**5 + (z[2])*x**4 + (z[3])*x**3 + (z[4])*x**2 + (z[6])*x + z[7]
</snippet></ROW><ROW><id>20246884</id><snippet>+</snippet></ROW><ROW><id>20246884</id><snippet>(z[0])*x**6</snippet></ROW><ROW><id>20246884</id><snippet>(z[1])</snippet></ROW><ROW><id>20246967</id><snippet>\b</snippet></ROW><ROW><id>20246967</id><snippet>RESP</snippet></ROW><ROW><id>20246967</id><snippet>RESP</snippet></ROW><ROW><id>20246967</id><snippet>CRESP</snippet></ROW><ROW><id>20246967</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; for line in myfile:
...     match = re.search(r"\b(RT|RTTime|RESP|CRESP): (.*)", line)
...     if match:
...         print("Matched {0} with value {1}".format(match.group(1),
...                                                   match.group(2)))
</snippet></ROW><ROW><id>20246967</id><snippet>Matched RTTime with value 103886
Matched RT with value 5855
Matched RESP with value {DOWNARROW}
Matched CRESP with value
Matched RTTime with value 104998
</snippet></ROW><ROW><id>20247121</id><snippet>import mock   # See http://www.voidspace.org.uk/python/mock/

MOCK_MODULES = ['module1', 'module2', ...]
for mod_name in MOCK_MODULES:
    sys.modules[mod_name] = mock.Mock()
</snippet></ROW><ROW><id>20247207</id><snippet>from mechanize import Browser, Item
br = Browser()
br.set_handle_robots(False)
br.addheaders = [('User-agent',
                  'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1)'
                  ' Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')]
url = 'http://www.matrixscience.com'\
      '/cgi/search_form.pl?FORMVER=2&amp;SEARCH=MIS'
br.open(url)
br.select_form('mainSearch')

# get the actual control object instead of its contents
mods = br.find_control('MODS')
# add an item
item = Item(mods, {"contents": "Acetyl (N-term)", "value": "Acetyl (N-term)"})
# select it. if you don't, it doesn't appear in the output
# this is probably why MASTER_MODS appears empty
item.selected = True
print br['MODS']
# outputs: ['Acetyl (N-term)']
</snippet></ROW><ROW><id>20247207</id><snippet>mechanize.Item(cheeses, {"contents": "mascarpone", "value": "mascarpone"})</snippet></ROW><ROW><id>20247273</id><snippet>plot(..., marker="o")
</snippet></ROW><ROW><id>20247273</id><snippet>keyword=</snippet></ROW><ROW><id>20247273</id><snippet>plot(x, y, '#3FF235')
</snippet></ROW><ROW><id>20247273</id><snippet>plot(x, y, '#3FF235', marker='o')
</snippet></ROW><ROW><id>20247273</id><snippet>plot(x, y, marker='o', '#3FF235')
</snippet></ROW><ROW><id>20247273</id><snippet>x, y</snippet></ROW><ROW><id>20247273</id><snippet>270</snippet></ROW><ROW><id>20247273</id><snippet>plot(270, data1[270], '#3FF235', marker='o')
</snippet></ROW><ROW><id>20247273</id><snippet>data1 = np.asarray(data1, float)
maxi = data1.argmax()
plot(maxi, data1[maxi], 'ro')  # can combine color and marker in one positional argument
</snippet></ROW><ROW><id>20247404</id><snippet>button = tkinter.Button(frame, height=0, bg='blue',\
                    activebackground='blue',width = 0, text = " ", image = self.blank, \
                    command=lambda row=row_index, \
                        column=column_index: \
                        self.button_clicked(row,column))
</snippet></ROW><ROW><id>20247404</id><snippet>button['command'] = 0 #this disables the callback
button['relief'] = 'sunken' #makes the button fixed
</snippet></ROW><ROW><id>20247560</id><snippet>widget.queue_draw()</snippet></ROW><ROW><id>20247560</id><snippet>queue_draw</snippet></ROW><ROW><id>20247560</id><snippet>do_expose_event</snippet></ROW><ROW><id>20247560</id><snippet>def update(self):
    cr = self.window.cairo_create()
    x = randint(0, DOCK_W)
    y = randint(0, DOCK_H)
    self.points.append((x,y)) #for the expose event ;-)
    cr.rectangle(x, y, 1, 1)
    cr.set_source_rgba(0, 0, 0, 1)
    cr.fill()
    cr.paint()
</snippet></ROW><ROW><id>20247911</id><snippet># Lognormal distribution of P's
Pmean0 = 0.
P_0 = Lognormal('P_0', mu=Pmean0, tau=isigma2, trace=False, value=P_inits[0])
P = [P_0]

# Recursive step
for i in range(1,nyears):
    Pmean = Lambda("Pmean", lambda P=P[i-1], k=k, r=r: log(max(P+r*P*(1-P)-k*catch[i-1],0.01)))
    Pi = Lognormal('P_%i'%i, mu=Pmean, tau=isigma2, value=P_inits[i], trace=False)
    P.append(Pi)
</snippet></ROW><ROW><id>20247911</id><snippet>list.append</snippet></ROW><ROW><id>20247928</id><snippet>def __init__(self, data=False):
</snippet></ROW><ROW><id>20247928</id><snippet>data</snippet></ROW><ROW><id>20247928</id><snippet>kwarg</snippet></ROW><ROW><id>20247928</id><snippet>Foo</snippet></ROW><ROW><id>20247928</id><snippet>Foo(data = True, data1 = False)
</snippet></ROW><ROW><id>20247928</id><snippet>data1</snippet></ROW><ROW><id>20247928</id><snippet>kwarg</snippet></ROW><ROW><id>20247928</id><snippet>data</snippet></ROW><ROW><id>20247928</id><snippet>data</snippet></ROW><ROW><id>20247928</id><snippet>def __init__(self, data=False, **kwarg):
    print data, kwarg
</snippet></ROW><ROW><id>20247928</id><snippet>class Foo():
    def __init__(self, data=False):
        print data, kwarg

Foo(True, False)
</snippet></ROW><ROW><id>20247928</id><snippet>TypeError: __init__() takes at most 2 arguments (3 given)
</snippet></ROW><ROW><id>20247928</id><snippet>__init__</snippet></ROW><ROW><id>20247928</id><snippet>Foo(True, data = False)
</snippet></ROW><ROW><id>20247928</id><snippet>TypeError: __init__() got multiple values for keyword argument 'data'
</snippet></ROW><ROW><id>20247928</id><snippet>class Foo():
    def __init__(self, *args, **kwargs):
        print kwargs, args

Foo(True, data = False)
</snippet></ROW><ROW><id>20247928</id><snippet>{'data': False} (True,)
</snippet></ROW><ROW><id>20247928</id><snippet>args</snippet></ROW><ROW><id>20247928</id><snippet>kwargs</snippet></ROW><ROW><id>20247928</id><snippet>class Foo():
    def __init__(self, data = False, *args, **kwargs):
        print kwargs, args, data

Foo()
Foo(data = True)
Foo(data = True, data1 = "Welcome")
Foo(True, 1, data1 = "Welcome")
# Foo(True, data1 = "Welcome", 1) # This will throw an error
</snippet></ROW><ROW><id>20247928</id><snippet>{} () False
{} () True
{'data1': 'Welcome'} () True
{'data1': 'Welcome'} (1,) True
</snippet></ROW><ROW><id>20247928</id><snippet>data</snippet></ROW><ROW><id>20247928</id><snippet>False</snippet></ROW><ROW><id>20247928</id><snippet>data</snippet></ROW><ROW><id>20247928</id><snippet>data</snippet></ROW><ROW><id>20247928</id><snippet>data</snippet></ROW><ROW><id>20248184</id><snippet>del obj[key]</snippet></ROW><ROW><id>20248184</id><snippet>__delitem__</snippet></ROW><ROW><id>20248184</id><snippet>obj</snippet></ROW><ROW><id>20248184</id><snippet>obj</snippet></ROW><ROW><id>20248184</id><snippet>del obj[key]</snippet></ROW><ROW><id>20248184</id><snippet>type(obj).__delitem__(obj, key)</snippet></ROW><ROW><id>20248184</id><snippet>type(Foo).__delitem__(Foo, 'abcd')</snippet></ROW><ROW><id>20248184</id><snippet>type(Foo)</snippet></ROW><ROW><id>20248184</id><snippet>type</snippet></ROW><ROW><id>20248184</id><snippet>type.__delitem__</snippet></ROW><ROW><id>20248184</id><snippet>type</snippet></ROW><ROW><id>20248184</id><snippet>Foo</snippet></ROW><ROW><id>20248184</id><snippet>type</snippet></ROW><ROW><id>20248184</id><snippet>Foo</snippet></ROW><ROW><id>20248184</id><snippet>Foo</snippet></ROW><ROW><id>20248184</id><snippet>Foo</snippet></ROW><ROW><id>20248184</id><snippet>class ClassMapping(type):
    def __new__(cls, name, bases, dct):
        t = type.__new__(cls, name, bases, dct)
        t._instances = {}
        return t
    def __delitem__(cls, my_str):
        del cls._instances[my_str]

class Foo(object):
    __metaclass__ = ClassMapping
    def __init__(self, my_str):
        n = len(Foo._instances) + 1
        Foo._instances[my_str] = n
        print "Now up to {} instances".format(n)
</snippet></ROW><ROW><id>20248184</id><snippet>Foo</snippet></ROW><ROW><id>20248184</id><snippet>type</snippet></ROW><ROW><id>20248184</id><snippet>ClassMapping</snippet></ROW><ROW><id>20248184</id><snippet>Foo</snippet></ROW><ROW><id>20248184</id><snippet>_instances</snippet></ROW><ROW><id>20248184</id><snippet>__delitem__</snippet></ROW><ROW><id>20248184</id><snippet>_instances</snippet></ROW><ROW><id>20248452</id><snippet>(s?)</snippet></ROW><ROW><id>20248452</id><snippet>links = re.findall('href="(https?:\/\/[^"]+)"',page)
</snippet></ROW><ROW><id>20249006</id><snippet>class Pomodoro_app(Tk):
    def add_task(self):
        global time
        time = StringVar()
        time.set("Start")
        task_content = askstring(title = 'Add a Task', prompt = "Input a task")
        task_label   = Label(self, text = task_content, font = ("Arial, 12")).grid(column = 0, row = self.next_row)
        task_start_button = Button(self, textvariable = time, command = lambda: self.start_working(task_content)).grid(column = 1, row = self.next_row)
        #                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        self.next_row += 1

    def start_working(self, task_name):
        print('start working', task_name)

    def createWidgets(self):
        self.welcome_label   = Label(self, text = "Welcome to the Challenge!", font = ("Arial, 12")).grid(column = 0, row = 0, columnspan = 2)
        self.add_task_button = Button(self, text = "Add Task", width = 20, command = self.add_task).grid(column = 0 , columnspan = 2)

    def __init__(self):
        """GUI Initiation"""
        Tk.__init__(self)
        self.createWidgets()
        """window Initiation"""
        self.resizable(False, False)
        x = (self.winfo_screenwidth() - self.winfo_reqwidth()) / 2
        y = (self.winfo_screenheight() - self.winfo_reqheight()) / 2
        self.geometry('250x400+%d+%d' % (x, y))
        self.next_row = 3
</snippet></ROW><ROW><id>20249027</id><snippet>None</snippet></ROW><ROW><id>20249027</id><snippet>b = d.copy().update({'e':2})
</snippet></ROW><ROW><id>20249027</id><snippet>b</snippet></ROW><ROW><id>20249027</id><snippet>None</snippet></ROW><ROW><id>20249027</id><snippet>d.update({'c':3})
</snippet></ROW><ROW><id>20249027</id><snippet>d</snippet></ROW><ROW><id>20249027</id><snippet>list.sort</snippet></ROW><ROW><id>20249027</id><snippet>random.shuffle</snippet></ROW><ROW><id>20249027</id><snippet>None</snippet></ROW><ROW><id>20249143</id><snippet>itertools.accumulate</snippet></ROW><ROW><id>20249143</id><snippet>import itertools

def generate(f, x):
  return itertools.accumulate(itertools.repeat(x), lambda v,_:f(v))

for i, val in enumerate(generate(lambda x: 2*x, 3)):
  print(val)
  if i == 10:
    break
</snippet></ROW><ROW><id>20249295</id><snippet>shift</snippet></ROW><ROW><id>20249295</id><snippet>data_mean = pd.rolling_mean(data, window=5).shift(-2)
</snippet></ROW><ROW><id>20249295</id><snippet>window=5</snippet></ROW><ROW><id>20249295</id><snippet>import pandas as pd

data = pd.Series(range(1, 9))

data_mean = pd.rolling_mean(data, window=5).shift(-2)
print(data_mean)
</snippet></ROW><ROW><id>20249295</id><snippet>0   NaN
1   NaN
2     3
3     4
4     5
5     6
6   NaN
7   NaN
dtype: float64
</snippet></ROW><ROW><id>20249365</id><snippet>get</snippet></ROW><ROW><id>20249365</id><snippet>conf.write(e1.get())
</snippet></ROW><ROW><id>20249365</id><snippet>from Tkinter import StringVar, Tk
Tk()
s = StringVar()
s.set('word')
print s, type(s)
print s.get(), type(s.get())
</snippet></ROW><ROW><id>20249365</id><snippet>PY_VAR0 &lt;type 'instance'&gt;
word &lt;type 'str'&gt;
</snippet></ROW><ROW><id>20249394</id><snippet>merged = pd.merge(A,B,on="key")
answer = merged['val_x']/merged['val_y']
</snippet></ROW><ROW><id>20249394</id><snippet>answer</snippet></ROW><ROW><id>20249394</id><snippet>df = pd.DataFrame(zip(merged['key'],answer))
#print df
0  eggs  10
1   ham  10
2  spam  10

#left out header because I used 0 and 1, not key and value, but you get the point, it works!
</snippet></ROW><ROW><id>20249433</id><snippet>&gt;&gt;&gt; myDict = {0: [0, 1, 2], 1: [], 2: [20, 25, 26, 28, 31, 34], 3: [], 4: [0, 1, 2, 3, 4, 7, 10], 5: [], 6: [10, 20, 24]}
&gt;&gt;&gt; myDict = {k: v for k, v in myDict.items() if v}
&gt;&gt;&gt; myDict
{0: [0, 1, 2], 2: [20, 25, 26, 28, 31, 34], 4: [0, 1, 2, 3, 4, 7, 10], 6: [10, 20, 24]}
</snippet></ROW><ROW><id>20249433</id><snippet>tuple(myDict)</snippet></ROW><ROW><id>20249433</id><snippet>&gt;&gt;&gt; myDict =  {0: [0, 1, 2], 1: [], 2: [20, 25, 26, 28, 31, 34], 3: [], 4: [0, 1, 2, 3, 4, 7, 10], 5: [], 6: [10, 20, 24]}
&gt;&gt;&gt; for item in tuple(myDict):
...     if myDict[item] == []:
...         del myDict[item]
...
&gt;&gt;&gt; myDict
{0: [0, 1, 2], 2: [20, 25, 26, 28, 31, 34], 4: [0, 1, 2, 3, 4, 7, 10], 6: [10, 20, 24]}
</snippet></ROW><ROW><id>20249580</id><snippet>from html.parser import HTMLParser

def unescape_entities(value, parser=HTMLParser()):
    return parser.unescape(value)

def process(ob):
    if isinstance(ob, list):
        return [process(v) for v in ob]
    elif isinstance(ob, dict):
        return {k: process(v) for k, v in ob.items()}
    elif isinstance(ob, str):
        return unescape_entities(ob)
    return ob

theJSON = process(theJSON)
</snippet></ROW><ROW><id>20249580</id><snippet>&gt;&gt;&gt; theJSON['tuc'][0]['meanings'][-1]
{'language': 'fra', 'text': 'Mammifère carnivore, félin de taille moyenne au museau court et arrondi, domestiqué ou encore à l'état sauvage (Felis silvestris).'}
&gt;&gt;&gt; theJSON = process(theJSON)
&gt;&gt;&gt; theJSON['tuc'][0]['meanings'][-1]
{'language': 'fra', 'text': "Mammifère carnivore, félin de taille moyenne au museau court et arrondi, domestiqué ou encore à l'état sauvage (Felis silvestris)."}
</snippet></ROW><ROW><id>20249600</id><snippet>powerval</snippet></ROW><ROW><id>20249600</id><snippet>def powerval(x,y):
    if x &gt; y:
        big = x
    else:
        small = x
    if x &gt; y:
        small = y
    else:
        big = y
    answer = pow(big, small)
    return answer # &lt;----
</snippet></ROW><ROW><id>20249608</id><snippet>s={"username":"username",
   "email":"a@b.com",
   "email_error":"email_error",
   "password_error_one":"password_error_1"}


def write_form(username="", email="", username_error="", email_error="",
        password_error_one="", password_error_two = ""):
    print username, email, email_error, password_error_one, password_error_two

write_form(**s)
</snippet></ROW><ROW><id>20249697</id><snippet>import csv
import sys
import os

if len(sys.argv) &lt; 4:
     sys.exit("Usage: convert_to_psv.py ~/dir .tsv .csv")
else:    
     cur_dir, old_ext, new_ext = sys.argv[1:]
     for filename in os.listdir(cur_dir):
         filename = os.path.join(cur_dir, filename)
         base, file_ext = os.path.splitext(filename)
         if file_ext == old_ext:
             newfile = base + new_ext
             csv.field_size_limit(sys.maxsize)
             with open(filename, 'rb') as ifh, open(newfile, 'wb') as ofh:
                 reader = csv.reader(ifh, delimiter='\t')
                 csv.writer(ofh, delimiter='|').writerows(reader)
             os.unlink(filename)
</snippet></ROW><ROW><id>20249732</id><snippet>result = []
data = [("200", "Harry", "50000", "Dog", "jumbo"),("200", "Harry", "50000", "Dog", "jumbo"),    ("200", "Harry", "50000", "Dog", "jumbo")]
for item in data:
    result.append((int(item[0]), item[1], int(item[2]), item[3], item[4]))
</snippet></ROW><ROW><id>20249732</id><snippet>result = [((int(item[0]), item[1], int(item[2]), item[3], item[4])) for item in data]
</snippet></ROW><ROW><id>20249732</id><snippet>"Harry"</snippet></ROW><ROW><id>20249732</id><snippet>item[1] == "Harry"</snippet></ROW><ROW><id>20249782</id><snippet>a=((-1)**n)/float(2*n+1)
</snippet></ROW><ROW><id>20249782</id><snippet>a=float(((-1)**n)/(2*n+1))
</snippet></ROW><ROW><id>20249782</id><snippet>a</snippet></ROW><ROW><id>20249782</id><snippet>a</snippet></ROW><ROW><id>20249817</id><snippet>&gt;&gt;&gt; myDict = {0: [0, 1, 2], 1: [], 2: [20, 25, 26, 28, 31, 34], 3: [], 4: [0, 1, 2, 3, 4, 7, 10], 5: [], 6: [10, 20, 24]}
&gt;&gt;&gt; myList = [1, 34, 10]
&gt;&gt;&gt; {x:[z for z in y if z not in myList] for x,y in myDict.items()}
{0: [0, 2], 1: [], 2: [20, 25, 26, 28, 31], 3: [], 4: [0, 2, 3, 4, 7], 5: [], 6: [20, 24]}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20249882</id><snippet>  nodes = []

  def process_subtree(c, path):
      name = c.get('Name') if c.tag == 'Node' else None
      if name:
          path.append(name)
          nodes.append('/'.join(path))

      for c1 in c:
          process_subtree(c1, path)

      if name:
          path.pop()

  process_subtree(tree.getroot(), [])
</snippet></ROW><ROW><id>20250018</id><snippet>import string
class PartialFormatter(string.Formatter):
    def __init__(self, missing='~~', bad_fmt='!!'):
        self.missing, self.bad_fmt=missing, bad_fmt

    def get_field(self, field_name, args, kwargs):
        # Handle a key not found
        try:
            val=super(PartialFormatter, self).get_field(field_name, args, kwargs)
            # Python 3, 'super().get_field(field_name, args, kwargs)' works
        except (KeyError, AttributeError):
            val=None,field_name 
        return val 

    def format_field(self, value, spec):
        # handle an invalid format
        if value==None: return self.missing
        try:
            return super(PartialFormatter, self).format_field(value, spec)
        except ValueError:
            if self.bad_fmt is not None: return self.bad_fmt   
            else: raise

fmt=PartialFormatter()
data = {'n': 3, 'k': 3.141594, 'p': {'a': '7', 'b': 8}}
print(fmt.format('{n}, {k:.2f}, {p[a]}, {p[b]}', **data))
# 3, 3.14, 7, 8
del data['k']
data['p']['b'] = None
print(fmt.format('{n}, {k:.2f}, {p[a]:.2f}, {p[b]}', **data))
# 3, ~~, !!, ~~
</snippet></ROW><ROW><id>20250018</id><snippet>~~</snippet></ROW><ROW><id>20250018</id><snippet>!!</snippet></ROW><ROW><id>20250018</id><snippet>None</snippet></ROW><ROW><id>20250018</id><snippet>bad_fmt</snippet></ROW><ROW><id>20250018</id><snippet>get_field</snippet></ROW><ROW><id>20250018</id><snippet>KeyError</snippet></ROW><ROW><id>20250018</id><snippet>AttributeError</snippet></ROW><ROW><id>20250018</id><snippet>format_field</snippet></ROW><ROW><id>20250018</id><snippet>format_field</snippet></ROW><ROW><id>20250018</id><snippet>ValueError</snippet></ROW><ROW><id>20250062</id><snippet>c = (char) n;

n = (int) c;
</snippet></ROW><ROW><id>20250062</id><snippet>ord()</snippet></ROW><ROW><id>20250062</id><snippet>int()</snippet></ROW><ROW><id>20250107</id><snippet>sp = subprocess.Popen(["program", "arg"], stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>20250107</id><snippet>sp.stdout</snippet></ROW><ROW><id>20250107</id><snippet>["/usr/bin/bash", "-c", "my-complex-command"]</snippet></ROW><ROW><id>20250292</id><snippet>ordering</snippet></ROW><ROW><id>20250292</id><snippet>Meta</snippet></ROW><ROW><id>20250292</id><snippet>class MyModel(models.Model): 
    class Meta:
        ordering = ('name', ) #Or change to any other attributes. 
</snippet></ROW><ROW><id>20250292</id><snippet>order by</snippet></ROW><ROW><id>20250415</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>20250415</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval("[(0, 1), (1, 3), (2, 1), (3, 1), (4, 1)]")
[(0, 1), (1, 3), (2, 1), (3, 1), (4, 1)]
&gt;&gt;&gt; ast.literal_eval("[(0, 1, 6), (1, 3,7), (3, 1,4), (3, 1,3), (8, 1,2)]")
[(0, 1, 6), (1, 3, 7), (3, 1, 4), (3, 1, 3), (8, 1, 2)]
&gt;&gt;&gt; ast.literal_eval("[1,2,3,5,3]")
[1, 2, 3, 5, 3]
</snippet></ROW><ROW><id>20250586</id><snippet>xrange(4)</snippet></ROW><ROW><id>20250586</id><snippet>[0, 1, 2, 3]</snippet></ROW><ROW><id>20250586</id><snippet>means</snippet></ROW><ROW><id>20250586</id><snippet>nan</snippet></ROW><ROW><id>20250586</id><snippet>y</snippet></ROW><ROW><id>20250586</id><snippet>In [49]: means = numpy.array([x[y == i].mean(axis=0) for i in xrange(1, 5)])

In [50]: means
Out[50]: 
array([[-1.27636606],
       [-1.24042235],
       [-1.77208567],
       [-1.774899  ]])
</snippet></ROW><ROW><id>20250687</id><snippet>request.user.is_authenticated</snippet></ROW><ROW><id>20250687</id><snippet>user.is_authenticated</snippet></ROW><ROW><id>20250687</id><snippet>django.contrib.auth.context_processors.auth</snippet></ROW><ROW><id>20250687</id><snippet>user</snippet></ROW><ROW><id>20250715</id><snippet>None</snippet></ROW><ROW><id>20250715</id><snippet>.insert</snippet></ROW><ROW><id>20250715</id><snippet>None</snippet></ROW><ROW><id>20250715</id><snippet>insert</snippet></ROW><ROW><id>20250715</id><snippet>def m_reverse(lst):
    if len(lst) == 1:
       return lst
    else:
       return [lst[-1]] + m_reverse(lst[:-1])
       # return lst[-1:] + m_reverse(lst[:-1]) would also work.
</snippet></ROW><ROW><id>20250718</id><snippet>empty = [[] for _ in xrange(50)]
</snippet></ROW><ROW><id>20250718</id><snippet>empty = [0] * 50
</snippet></ROW><ROW><id>20250718</id><snippet>[[]] * 50</snippet></ROW><ROW><id>20250760</id><snippet>raw_input</snippet></ROW><ROW><id>20250782</id><snippet>__init__</snippet></ROW><ROW><id>20250782</id><snippet>np.array()</snippet></ROW><ROW><id>20250782</id><snippet>test.price</snippet></ROW><ROW><id>20250782</id><snippet>test.price</snippet></ROW><ROW><id>20250782</id><snippet>test.price</snippet></ROW><ROW><id>20250782</id><snippet>test.var</snippet></ROW><ROW><id>20250782</id><snippet>var</snippet></ROW><ROW><id>20250782</id><snippet>def __init__(self):
    dict={'a': 123}
    list=[1,2,3,4]
    var='spam'
var='eggs and spam'

&gt;&gt;&gt;test.dict['a']
123
&gt;&gt;&gt;test.list[2]
3
&gt;&gt;&gt;test.var
spam
&gt;&gt;&gt;var
eggs and spam
</snippet></ROW><ROW><id>20250782</id><snippet>self.PromotionIdData.array()[self.ID,t] = ...</snippet></ROW><ROW><id>20250782</id><snippet>class test():
    def array(self): #remember to always pass self to a function inside your class
        return [1,2,3,4,5]

&gt;&gt;&gt;t=test()
&gt;&gt;&gt;t.array[2]
3
</snippet></ROW><ROW><id>20250802</id><snippet>x</snippet></ROW><ROW><id>20250802</id><snippet>x = "foo"
def f():
    print x
    x = 5
f()
</snippet></ROW><ROW><id>20250802</id><snippet>x</snippet></ROW><ROW><id>20250802</id><snippet>x</snippet></ROW><ROW><id>20250802</id><snippet>print x</snippet></ROW><ROW><id>20250802</id><snippet>x = "foo"
def f():
    if some_condition:
        x = 42
    print x
f()
</snippet></ROW><ROW><id>20250802</id><snippet>x = x</snippet></ROW><ROW><id>20250802</id><snippet>x</snippet></ROW><ROW><id>20250802</id><snippet>x</snippet></ROW><ROW><id>20250802</id><snippet>x</snippet></ROW><ROW><id>20250802</id><snippet>class X:
    x = x     # we want to read the global x and assign it locally
    bar = x   # but here we want to read the local x of the previous line

class Y:
    if some_condition:
        x = 42
    print x     # may refer to either the local x, or some global x

class Z:
    for i in range(2):
        print x    # prints the global x the 1st time, and 42 the 2nd time
        x = 42
</snippet></ROW><ROW><id>20250802</id><snippet>x</snippet></ROW><ROW><id>20250802</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>20250802</id><snippet>x = x</snippet></ROW><ROW><id>20250802</id><snippet>x = x</snippet></ROW><ROW><id>20250820</id><snippet>def remove_signature(mail):
    payload = mail.get_payload()
    if isinstance(payload, list):
        for part in payload:
            if part.get_content_type().startswith('application/pkcs7-signature'):
                payload.remove(part)
    return mail
</snippet></ROW><ROW><id>20250996</id><snippet>.replace</snippet></ROW><ROW><id>20250996</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'col2': {0: 'a', 1: 2, 2: np.nan}, 'col1': {0: 'w', 1: 1, 2: 2}})
&gt;&gt;&gt; di = {1: "A", 2: "B"}
&gt;&gt;&gt; df
  col1 col2
0    w    a
1    1    2
2    2  NaN
&gt;&gt;&gt; df.replace({"col1": di})
  col1 col2
0    w    a
1    A    2
2    B  NaN
</snippet></ROW><ROW><id>20250996</id><snippet>Series</snippet></ROW><ROW><id>20250996</id><snippet>df["col1"].replace(di, inplace=True)</snippet></ROW><ROW><id>20251171</id><snippet>import random

input1 = list(range(1000))
input2 = [
    ([random.randint(0, 1000) for _ in range(100)], random.choice("ABCDE"))
    for _ in range(10000)
]
</snippet></ROW><ROW><id>20251171</id><snippet>def newfunction(input1, input2):
    input1_map = {i: dict.fromkeys("ABCDE", 0) for i in input1}

    for row in input2:
        for i1 in set(row[0]):
            try:
                input1_map[i1][row[1]] += 1
            except KeyError:
                pass

    return [[i] + list(input1_map[i].values()) for i in input1]
</snippet></ROW><ROW><id>20251171</id><snippet>row[0]</snippet></ROW><ROW><id>20251171</id><snippet>set(row[0])</snippet></ROW><ROW><id>20251171</id><snippet>row[0]</snippet></ROW><ROW><id>20251171</id><snippet>try</snippet></ROW><ROW><id>20251171</id><snippet>list(input1_map[i].values())</snippet></ROW><ROW><id>20251171</id><snippet>def function(input1, input2):
    mapping = []
    for item in input1:
        risks = {"A":0, "B":0, "C":0, "D":0, "E":0}
        temp = []
        for row in input2:
            if item in row[0]:
                for key in risks.keys():
                    if row[1] == key:
                        risks[key] += 1
        temp.append(item)
        for key in risks.keys():
            temp.append(risks[key])
        mapping.append(temp)
    return mapping
</snippet></ROW><ROW><id>20251171</id><snippet>function(input1, input2) == newfunction(input1, input2)
#&gt;&gt;&gt; True
</snippet></ROW><ROW><id>20251326</id><snippet>app</snippet></ROW><ROW><id>20251326</id><snippet>__init.py__</snippet></ROW><ROW><id>20251326</id><snippet>sys.path</snippet></ROW><ROW><id>20251326</id><snippet>root/
    app/
        app/__init__.py
        app/spam.py
        app/eggs.py
</snippet></ROW><ROW><id>20251326</id><snippet>root</snippet></ROW><ROW><id>20251326</id><snippet>sys.path</snippet></ROW><ROW><id>20251326</id><snippet>site-packages</snippet></ROW><ROW><id>20251326</id><snippet>app</snippet></ROW><ROW><id>20251326</id><snippet>app.spam</snippet></ROW><ROW><id>20251326</id><snippet>app.eggs</snippet></ROW><ROW><id>20251326</id><snippet>.spam</snippet></ROW><ROW><id>20251326</id><snippet>app</snippet></ROW><ROW><id>20251326</id><snippet>sys.path</snippet></ROW><ROW><id>20251326</id><snippet>app</snippet></ROW><ROW><id>20251326</id><snippet>spam</snippet></ROW><ROW><id>20251326</id><snippet>eggs</snippet></ROW><ROW><id>20251326</id><snippet>.spam</snippet></ROW><ROW><id>20251326</id><snippet>sys.path</snippet></ROW><ROW><id>20251326</id><snippet>app</snippet></ROW><ROW><id>20251326</id><snippet>spam</snippet></ROW><ROW><id>20251326</id><snippet>app.spam</snippet></ROW><ROW><id>20251326</id><snippet>app.eggs</snippet></ROW><ROW><id>20251326</id><snippet>.spam</snippet></ROW><ROW><id>20251326</id><snippet>eggs</snippet></ROW><ROW><id>20251326</id><snippet>.spam</snippet></ROW><ROW><id>20251326</id><snippet>sys.path.insert(0, os.path.abspath('..'))
</snippet></ROW><ROW><id>20251326</id><snippet>..</snippet></ROW><ROW><id>20251326</id><snippet>tests</snippet></ROW><ROW><id>20251326</id><snippet>tests/test_spam.py</snippet></ROW><ROW><id>20251326</id><snippet>app</snippet></ROW><ROW><id>20251326</id><snippet>root/
    src/
        app/
    tests/
    doc/
</snippet></ROW><ROW><id>20251326</id><snippet>app</snippet></ROW><ROW><id>20251326</id><snippet>__init__.py</snippet></ROW><ROW><id>20251326</id><snippet>app</snippet></ROW><ROW><id>20251326</id><snippet>sys.path</snippet></ROW><ROW><id>20251326</id><snippet>app</snippet></ROW><ROW><id>20251326</id><snippet>import</snippet></ROW><ROW><id>20251326</id><snippet>ni</snippet></ROW><ROW><id>20251467</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>20251467</id><snippet>argv</snippet></ROW><ROW><id>20251467</id><snippet>[1:]</snippet></ROW><ROW><id>20251467</id><snippet>os.system('trial.bat ' + ' '.join(sys.argv[1:]))
</snippet></ROW><ROW><id>20251467</id><snippet>subprocess</snippet></ROW><ROW><id>20251467</id><snippet>subprocess.check_call(['trial.bat'] + sys.argv[1:])
</snippet></ROW><ROW><id>20251467</id><snippet>argv</snippet></ROW><ROW><id>20251467</id><snippet>foo "hello world" bar</snippet></ROW><ROW><id>20251467</id><snippet>&gt;&gt;&gt; sys.argv[1:]
['foo', 'hello world', 'bar']
</snippet></ROW><ROW><id>20251467</id><snippet>&gt;&gt;&gt; ' '.join(sys.argv[1:])
'foo hello world bar'
</snippet></ROW><ROW><id>20251467</id><snippet>hello world</snippet></ROW><ROW><id>20251467</id><snippet>subprocess</snippet></ROW><ROW><id>20251467</id><snippet>hello world</snippet></ROW><ROW><id>20251489</id><snippet>request.GET</snippet></ROW><ROW><id>20251489</id><snippet>def add_book_link(self, instance):
    if instance.id:
        url = '%s?publisher=%d' % (reverse('admin:myapp_book_add'), instance.id)
    else:
        url = reverse('admin:myapp_book_add')
    return mark_safe(u'&lt;a href="{u}"&gt;Add&lt;/a&gt;'.format(u=url))
</snippet></ROW><ROW><id>20251489</id><snippet>allow_tags</snippet></ROW><ROW><id>20251489</id><snippet>mark_safe</snippet></ROW><ROW><id>20251523</id><snippet>scipy.stats</snippet></ROW><ROW><id>20251523</id><snippet>scipy.stats.norm.fit</snippet></ROW><ROW><id>20251523</id><snippet>&gt;&gt;&gt; import scipy.special as sse
&gt;&gt;&gt; import scipy.stats as sss
&gt;&gt;&gt; import scipy.optimize as so
&gt;&gt;&gt; from numpy import *

&gt;&gt;&gt; def eg_pdf(p, x): #defines the PDF
    m=p[0]
    s=p[1]
    l=p[2]
    return 0.5*l*exp(0.5*l*(2*m+l*s*s-2*x))*sse.erfc((m+l*s*s-x)/(sqrt(2)*s))

&gt;&gt;&gt; xo=array([ 450.,  560.,  692.,  730.,  758.,  723.,  486.,  596.,  716.,
        695.,  757.,  522.,  535.,  419.,  478.,  666.,  637.,  569.,
        859.,  883.,  551.,  652.,  378.,  801.,  718.,  479.,  544.])

&gt;&gt;&gt; sss.norm.fit(xo) #get the starting parameter vector form the normal MLE
(624.22222222222217, 132.23977474531389)

&gt;&gt;&gt; def llh(p, f, x): #defines the negative log-likelihood function
    return -sum(log(f(p,x)))

&gt;&gt;&gt; so.fmin(llh, array([624.22222222222217, 132.23977474531389, 1e-6]), (eg_pdf, xo)) #yeah, the data is not good
Warning: Maximum number of function evaluations has been exceeded.
array([  6.14003407e+02,   1.31843250e+02,   9.79425845e-02])

&gt;&gt;&gt; przt=so.fmin(llh, array([624.22222222222217, 132.23977474531389, 1e-6]), (eg_pdf, xo), maxfun=1000) #so, we increase the number of function call uplimit
Optimization terminated successfully.
         Current function value: 170.195924
         Iterations: 376
         Function evaluations: 681

&gt;&gt;&gt; llh(array([624.22222222222217, 132.23977474531389, 1e-6]), eg_pdf, xo)
400.02921290185645
&gt;&gt;&gt; llh(przt, eg_pdf, xo) #quite an improvement over the initial guess
170.19592431051217
&gt;&gt;&gt; przt
array([  6.14007039e+02,   1.31844654e+02,   9.78934519e-02])
</snippet></ROW><ROW><id>20251523</id><snippet>fmin</snippet></ROW><ROW><id>20251523</id><snippet>fmin_bfgs</snippet></ROW><ROW><id>20251523</id><snippet>fmin_l_bfgs_b</snippet></ROW><ROW><id>20251523</id><snippet>&gt;&gt;&gt; def eg_pdf2(p, x): #defines the PDF
    m=p[0]
    s=exp(p[1])
    l=exp(p[2])
    return 0.5*l*exp(0.5*l*(2*m+l*s*s-2*x))*sse.erfc((m+l*s*s-x)/(sqrt(2)*s))
</snippet></ROW><ROW><id>20251523</id><snippet>eg_pdf</snippet></ROW><ROW><id>20251523</id><snippet>exp()</snippet></ROW><ROW><id>20251523</id><snippet>(-inf, +inf)</snippet></ROW><ROW><id>20251523</id><snippet>(0, +inf)</snippet></ROW><ROW><id>20251524</id><snippet>str.format</snippet></ROW><ROW><id>20251524</id><snippet>print('The number generated between {} and {} is {}'.format(randomOne, randomTwo, number))
</snippet></ROW><ROW><id>20251524</id><snippet>print('The number generated between %s and %s is %s' % (randomOne, randomTwo, number))
</snippet></ROW><ROW><id>20251722</id><snippet>L[::5]</snippet></ROW><ROW><id>20251722</id><snippet>L</snippet></ROW><ROW><id>20251722</id><snippet>&gt;&gt;&gt; my_array = np.arange(20.)
&gt;&gt;&gt; my_array[4::5] = np.nan
&gt;&gt;&gt; my_array
array([  0.,   1.,   2.,   3.,  nan,   5.,   6.,   7.,   8.,  nan,  10.,
        11.,  12.,  13.,  nan,  15.,  16.,  17.,  18.,  nan])
</snippet></ROW><ROW><id>20251731</id><snippet>import numpy
A = numpy.array( [1,2,3,101,102,103,4,5,6,104,105,106] )
B = A.reshape( (-1,3) )
print B
</snippet></ROW><ROW><id>20251731</id><snippet>[[  1   2   3]
 [101 102 103]
 [  4   5   6]
 [104 105 106]]
</snippet></ROW><ROW><id>20251790</id><snippet>func setDefault(h map[string]int, k string, v int) (set bool, r int) {
    if r, set = h[k]; !set {
        h[k] = v
        r = v
        set = true
    }
    return
}
</snippet></ROW><ROW><id>20251917</id><snippet>#MFloatVector( x: 1.0, y: 2.0, z: 3.0)
</snippet></ROW><ROW><id>20251917</id><snippet># ==================== AttributeAccess.py ====================
import maya.cmds as cmds
import maya.mel as mel
import sys
import maya.OpenMaya as OM        # Version 1
import math

import inspect
import types

# ---------- Common Stuff ----------

# "something" can be any Python object.
def Exists(something):
    return something is not None

def printElements(ob):
    print '----- Elements: -----'
    i = 0
    for x in ob:
        print ' [' + str(i) + ']:  ' + repr(x)
        i += 1
    print '---------------------'

def printDictElements(ob):
    print ''
    print '-----------------------'
    for x in ob: print repr(x) + ':  ' + repr(ob[x])
    print '-----------------------'


# ---------- inspect Attributes ----------

# NOTE: ob is an instance, NOT a type object.
def TypeName(ob):
    return ob.__class__ .__name__

# Excludes 'internal' names (start with '__').
def Public(name):
    return not name.startswith('__')

# member is element of inspect.getmembers:
#   a two-element tuple.
def MemberWithType(member):
    return ( member[0], TypeName(member[1]), member[1] )
#print MemberWithType( (1.1, 2) )

def Members(ob):
    return inspect.getmembers(ob)

# True for Maya Python's 'this' member.
# member [1] is attribute value.
def SwigThis(member):
    return (member[0] == 'this') and (TypeName(member[1]) == 'SwigPyObject')

# HACK: "not SwigThis": omit Maya Python's 'this' member.
def PublicMembers(ob):
    members = filter(lambda member: Public(member[0]) and not SwigThis(member), Members(ob))
    return map(MemberWithType, members)

# Excludes 'internal' names (start with '__').
def Dir(ob):
    return filter(Public, dir(ob))


def _Type_And_Features(ob, names):
    return '{0}.({1})'.format(TypeName(ob), ', '.join(names))

def MemberName(member):
    return member[0]

# member with typename inserted as [1]. So descriptor is [2].
# member type-name is [1].
def CallableMember(member):
    #return (member[2].__class__  is types.MethodType)
    return inspect.isroutine(member[2])

def MemberNames(members):
    return map(MemberName, members)

def Features(ob):
    return _Type_And_Features(ob, MemberNames(PublicMembers(ob)) )   
    #return _Type_And_Features(ob, Dir(ob))

def Callable(ob):
    return _Type_And_Features(ob, MemberNames(filter(lambda a: CallableMember(a), PublicMembers(ob))))
    #return _Type_And_Features(ob, filter(lambda a: callable(a), Dir(ob)))

def IsClassVar(self, attrName):
    return hasattr(self.__class__, attrName)

# REQUIRE attrName already known to be supported by self.
# But just in case, return False if exception, so will be skipped.
def IsNotSameAsClassVar(self, attrName):
    try:
        if not IsClassVar(self, attrName):
            return True
        # If it has different value than class' attribute, it is on the instance.
        return getattr(self, attrName) is not getattr(self.__class__, attrName)
    except:
        return False

# ---------- _MayaValues ----------

# NOTE: 'ob' is an instance, not the class (type) itself.
def _ClassVars(ob):
    attributes = filter(lambda a: not CallableMember(a), PublicMembers(ob))
    # Keep class variables.
    # "not IsProperty": HACK: Skip Maya/Swig 'property' class variables.
    classVars = filter(lambda desc: IsClassVar(ob, desc[0]) and not IsProperty(getattr(ob.__class__, desc[0])), attributes)
    return MemberNames(classVars)

# NOTE: 'ob' is an instance, not the class (type) itself.
def ClassVars(ob):
    return _Header_And_Values(TypeName(ob) + ' Class_Variables',
        map(lambda attr: attr + ': ' + Repr(getattr(ob, attr)), _ClassVars(ob)),
        0
        )


# If it is invocable without parameters, return (attrName, typename, result of invocation).
# if Not reportExceptions, return None for Exception.
def CallAttribute_AsTriple(self, attrName, reportExceptions=False):
    try:
        expressionString = 'self.{0}()'.format(attrName)
        result = eval(expressionString)
        typename = TypeName(result)
    except Exception as e:
        if reportExceptions:
            result = e
            typename = '*** Exception'
        else:
            return None
    return (attrName, typename, result)

# member is tuple (attrName, typeName, value)
# If it is invocable without parameters, return (attrName, typename, result of invocation).
# if Not reportExceptions, return None for Exception.
def CallMember_AsTriple(self, member, reportExceptions=False):
    return CallAttribute_AsTriple(self, member[0], reportExceptions)

# If it is invocable without parameters, return string: pretty-printed result of invocation.
# if Not reportExceptions, return None for Exception.
def CallAttribute(self, attrName, reportExceptions=False):
    try:
        #printElements(locals())
        expressionString = 'self.{0}()'.format(attrName)
        #print Eval(expressionString, locals())
        result = eval(expressionString)
        resultString = Repr(result)
        typename = TypeName(result)
    except Exception as e:
        if reportExceptions:
            #result = '*** Exception  ' + str(e)
            result = e
            resultString = str(e)
            typename = '*** Exception'
        else:
            return None
    return ' .{0} {{{1}}}= {2}'.format(attrName, typename, resultString)

# member is tuple (attrName, typeName, value)
# If it is invocable without parameters, return string: pretty-printed result of invocation.
# if Not reportExceptions, return None for Exception.
def CallMemberRepr(self, member, reportExceptions=False):
    return CallAttribute(self, member[0], reportExceptions)

def FirstLine(string):
    lines = string.split('\n')
    if len(lines) &gt; 1:
        return lines[0] + '...'
    return string

def ArgLessRoutines_AsTriples(ob):
    members = PublicMembers(ob)
    members_WithNones = map(lambda member: CallMember_AsTriple(ob, member), members)
    # member is tuple (attrName, typeName, value)
    members = filter(Exists, members_WithNones)
    return members

def ArgLessRoutines(ob):
    members = PublicMembers(ob)
    members_WithNones = map(lambda member: CallMember_AsTriple(ob, member), members)
    # member is tuple (attrName, typeName, value)
    members = filter(Exists, members_WithNones)
    resultStrings = map(lambda string: FirstLine(string), resultStrings)
    return _Header_And_Values(TypeName(ob) + ' ArgLessRoutines', resultStrings)

def _MayaCallables_Common(mayaType):
    try:
        typeName = mayaType.__name__
        if typeName == 'MDagPath':
            return ['fullPathName']
        if typeName == 'MTypeId':
            return ['id']
        if typeName == 'MFnMesh':
            return ['numPolygons', 'numVertices', 'numEdges', 'numFaceVertices']
        if typeName == 'MDagPath':
            return ['fullPathName']
    except Exception as e:
        print e
    return []

def _MayaCallables_Version1(mayaType):
    return _MayaCallables_Common(mayaType)

def _MayaCallables_Version2(mayaType):
    return _MayaCallables_Common(mayaType)

# Names of callable attributes to include in Repr of 'ob'.
# For instances of types in 'maya.OpenMaya'.
def MayaCallables(ob):
    try:
        typ = ob.__class__
        if typ == type:
            return []
        if typ.__module__ == 'maya.OpenMaya':
            return _MayaCallables_Version1(typ)
        if typ.__module__ == 'OpenMaya':
            return _MayaCallables_Version2(typ)
    except Exception as e:
        print e
    return []

# Return (name, typename, value) per maya callable.
def _MayaValues(ob):
    callables = MayaCallables(ob)
    members_WithNones = map(lambda attrName: CallAttribute_AsTriple(ob, attrName), callables)
    members = filter(Exists, members_WithNones)
    return members

# TODO: If all results fit on single line, remove "{typename}" so is more readable.
#def MayaValues(ob):
#    resultStrings = _MayaValues(ob)
#    return _Header_And_Values(TypeName(ob) + ' MayaValues', resultStrings)

# ---------- Attributes ----------
def _AttributeNames(ob):
    attributes = filter(lambda a: not CallableMember(a), PublicMembers(ob))
    # Omit class variables.
    attributes = filter(lambda desc: IsNotSameAsClassVar(ob, desc[0]), attributes)
    return MemberNames(attributes)

def AttributeNames(ob):
    return _Type_And_Features(ob, _AttributeNames(ob))
    #return _Type_And_Features(ob, filter(lambda a: not callable(a), Dir(ob)))

def _Header_And_Values(headerString, valueStrings, maxWidth=100):
    if sum(map(len, valueStrings)) &gt; maxWidth:
        # pretty print, with one value per line.
        return '{0}(\n  {1}\n)'.format(headerString, '\n  '.join(valueStrings))
    return '{0}({1})'.format(headerString, ', '.join(valueStrings))

def _Type_And_Values(ob, valueStrings, maxWidth=100):
    return _Header_And_Values(TypeName(ob), valueStrings, maxWidth)

def AttributeValues(ob):
    return _Type_And_Values(ob, map(lambda attr: str(getattr(ob, attr)), _AttributeNames(ob)))

def Attributes(ob, depth=0):
    # Limit recursion.
    # If deep, don't include MayaValues.
    if depth &gt;= 2:
        return _Type_And_Values(ob, map(lambda attr: attr + ': ' + str(getattr(ob, attr)), _AttributeNames(ob)))
    attributes = map(lambda attr: attr + ': ' + Repr(getattr(ob, attr), depth + 1), _AttributeNames(ob))
    if depth == 0:
        mayaValues = _MayaValues(ob)
        if len(mayaValues) &gt; 0:
            for mayaValue in mayaValues:
                attribute = mayaValue[0] + ': ' + Repr(mayaValue[2])
                attributes.append(attribute)
    return _Type_And_Values(ob, attributes)

def IsProperty(ob):
    return (TypeName(ob) == 'property')

# ---------- Repr ----------
def Repr(ob, depth=0):
    r = repr(ob)
    # Helps avoid undesired recursion.
    if ob.__class__ == type:
        return r
    if (r.__class__ == types.StringType) and (len(r) &gt; 0) and (r.find('&lt;') &lt;&gt; 0):
        # Has a good repr.
        return r
    # Doesn't have a good repr; inspect it instead.
    return '#' + Attributes(ob, depth)

def Eval(expressionString, _locals=locals(), _globals=globals()):
    return str(expressionString) + "= " + str(Repr(eval(expressionString, _globals, _locals)))


# ---------- Testing ----------

# ---------- class Vector ----------
class Vector(object):
    def __init__(self, x=0.0, y=0.0, z=0.0):
        self.x, self.y, self.z = x, y, z
    # Provide useful info for 'repr(self)', 'str(self)', and 'print self'.
    def __repr__(self):
        return 'Vector({0}, {1}, {2})'.format(self.x, self.y, self.z)
    # math operators
    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y, self.z + other.z)
    # ==
    def __eq__(self, other):
        return (self.__class__ == other.__class__) and \
            (self.x == other.x) and \
            (self.y == other.y) and \
            (self.z == other.z)
    # a simple method
    def ApproximateLength(self):
        return self.x + self.y + self.z
    # list/sequence/iterator support.
    def tolist(self):
        return [self.x, self.y, self.z]
    def __len__(self):
        return 3
        # No need for "next(self)", because we create a list, use its iterator.
    def __iter__(self):
        return iter(self.tolist())
# class variable
Vector.Zero = Vector()

# ---------- inspecting Vector ----------
def Testing_Vector_Attributes():
    #vec = (1, 2, 3)
    #vec = [1, 2, 3]
    #vec = Vector(1.0, 2.0, 3.0)
    vec = OM.MFloatVector(1, 2, 3)
    print vec
    #for x in vec: print x
    print dir(vec)
    print TypeName(vec)
    print Dir(vec)
    print Features(vec)
    print Callable(vec)
    print '-----------------------'
    printElements(PublicMembers(vec))
    print '-----------------------'
    print AttributeNames(vec)
    #print vec.x
    #print eval('vec.x')
    #print getattr(vec, 'x')
    print AttributeValues(vec)
    print Attributes(vec)
    vec = OM.MFloatVector(1, 2, 3)
    #print repr(vec)
    #print Repr('Hi')
    print Repr( (1,2,3) )
    print Repr(vec)
    print ClassVars( Vector(1.0, 2.0, 3.0) )
    print ClassVars( OM.MFloatVector(1, 2, 3) )
    print Eval('OM.MMatrix()')
    print Eval('OM.MMatrix().matrix')

if __name__ == "__main__":
    Testing_Vector_Attributes()
</snippet></ROW><ROW><id>20252247</id><snippet>product</snippet></ROW><ROW><id>20252247</id><snippet>list</snippet></ROW><ROW><id>20252247</id><snippet>def product(*args, **kwds):
    # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
    pools = map(tuple, args) * kwds.get('repeat', 1)
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
###############################
myproduct = list(product(...))
###############################
print (myproduct)
</snippet></ROW><ROW><id>20252247</id><snippet>&gt;&gt;&gt; def func():
...     for i in range(10):
...         yield i
...
&gt;&gt;&gt; func()
&lt;generator object func at 0x01ADA210&gt;
&gt;&gt;&gt; list(func())
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20252320</id><snippet>with</snippet></ROW><ROW><id>20252320</id><snippet>with</snippet></ROW><ROW><id>20252320</id><snippet>with open("Data.txt") as f:
    # readlines returns a list of lines in the file
    # since it is a list all you need do is access the last element in the list
    # that element should be the last line in your text file.
    last_line = f.readlines()[-1] 

    print last_line
</snippet></ROW><ROW><id>20252324</id><snippet>with open(file_read, 'r') as file_r:
    with open(file_write, 'w') as file_w:
     [CODE HERE]
</snippet></ROW><ROW><id>20252324</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>20252482</id><snippet>n_active_vars=0
</snippet></ROW><ROW><id>20252482</id><snippet>nactive_vars=0
</snippet></ROW><ROW><id>20252482</id><snippet>term_crit=(cv2.TERM_CRITERIA_MAX_ITER,1000,1)
</snippet></ROW><ROW><id>20252505</id><snippet>    def clean(self):

    cd_wrtdf = super(WorkplaceRelatedTrainingDetailsForm, self).clean()

    if cd_wrtdf['workplace_training_display_type'] == 8888 or cd_wrtdf['workplace_training_display_type'] == 9999:

        self.cleaned_data['workplace_training_institute'] = ''
        self.cleaned_data['workplace_training_date_completed'] = ''
        self.cleaned_data['workplace_training_date_expiry'] = ''

    else:

        if 'workplace_training_institute' in cd_wrtdf and len(cd_wrtdf['workplace_training_institute'].strip()) == 0:

            self._errors['workplace_training_institute'] = self.error_class([_("This field is required.xxxxxxxxx")])
            del self.cleaned_data['workplace_training_institute']

        if 'workplace_training_date_completed' in cd_wrtdf and len(cd_wrtdf['workplace_training_date_completed'].strip()) == 0:

            self._errors['workplace_training_date_completed'] = self.error_class([_("This field is required.yyyyyyyy")])
            del self.cleaned_data['workplace_training_date_completed']

    return cd_wrtdf
</snippet></ROW><ROW><id>20252570</id><snippet>IOKit.framework</snippet></ROW><ROW><id>20252570</id><snippet>gen_bridge_metadata</snippet></ROW><ROW><id>20252570</id><snippet>objc.parseBridgeSupport()</snippet></ROW><ROW><id>20252570</id><snippet>objc.parseBridgeSupport(BRIDGE_FILE_STRING, globals(), objc.pathForFramework("/System/Library/Frameworks/IOKit.framework"))`
</snippet></ROW><ROW><id>20252573</id><snippet>Group</snippet></ROW><ROW><id>20252573</id><snippet>Pool</snippet></ROW><ROW><id>20252573</id><snippet>wait(iterable_of_futures, FIRST_COMPLETED)</snippet></ROW><ROW><id>20252573</id><snippet>def workqueue():
    def wrappedWork(item):
        value = startWork(item)
        if value != "Ok":
            workq.put(item)
    while True:
        item = workq.get()
        gevent.spawn(wrappedWork, item)
</snippet></ROW><ROW><id>20252601</id><snippet>zmq.NULL</snippet></ROW><ROW><id>20252601</id><snippet>ZMQ_NULL</snippet></ROW><ROW><id>20252601</id><snippet>socket.mechanism = zmq.NULL # or zmq.PLAIN or zmq.CURVE
</snippet></ROW><ROW><id>20252601</id><snippet>NULL</snippet></ROW><ROW><id>20252601</id><snippet>socket.send(b'')
</snippet></ROW><ROW><id>20252601</id><snippet>def http_hello_world():
    ctx = zmq.Context()
    sock = ctx.socket(zmq.ROUTER)
    sock.router_raw = True
    sock.bind("tcp://*:8080")
    while True:
        id_bytes, request = sock.recv_multipart()
        print("id: %r" % id_bytes)
        print("request:", request.decode('utf8'))
        if b'/close' in request:
            return

        # send the body of the response
        sock.send_multipart([
            id_bytes,
b"""HTTP/1.0 200 OK
Content-Type: text/plain

Hello, world!
"""
        ])
        # send an empty message to finish the response
        sock.send_multipart([
            id_bytes,
            b''
        ])
</snippet></ROW><ROW><id>20252623</id><snippet>Axes.draw</snippet></ROW><ROW><id>20252623</id><snippet>Axes</snippet></ROW><ROW><id>20252623</id><snippet>draw_artist</snippet></ROW><ROW><id>20252623</id><snippet>save</snippet></ROW><ROW><id>20252623</id><snippet>draw_artist</snippet></ROW><ROW><id>20252623</id><snippet>PathCollection</snippet></ROW><ROW><id>20252623</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib import _png
from itertools import izip

def main():
    # We'll be saving the figure's background, so let's make it transparent.
    fig, ax = plt.subplots(facecolor='none')

    # You'll have to know the extent of the input beforehand with this method.
    ax.axis([0, 10, 0, 10])

    # We need to draw the canvas before we start adding points.
    fig.canvas.draw()

    # This won't actually ever be drawn. We just need an artist to update.
    col = ax.scatter([5], [5], color=[0.1, 0.1, 0.1], alpha=0.3)

    for xy, color in datastream(int(1e6), chunksize=int(1e4)):
        col.set_offsets(xy)
        col.set_color(color)
        ax.draw_artist(col)

    save(fig, 'test.png')

def datastream(n, chunksize=1):
    """Returns a generator over "n" random xy positions and rgb colors."""
    for _ in xrange(n//chunksize):
        xy = 10 * np.random.random((chunksize, 2))
        color = np.random.random((chunksize, 3))
        yield xy, color

def save(fig, filename):
    """We have to work around `fig.canvas.print_png`, etc calling `draw`."""
    renderer = fig.canvas.renderer
    with open(filename, 'w') as outfile:
        _png.write_png(renderer._renderer.buffer_rgba(),
                       renderer.width, renderer.height,
                       outfile, fig.dpi)

main()
</snippet></ROW><ROW><id>20252623</id><snippet>ax.draw_artist(ax.spines['top'])</snippet></ROW><ROW><id>20252896</id><snippet>N=3
int(str(num)[:N])
</snippet></ROW><ROW><id>20252896</id><snippet>def nDigits(int_n):
    return nDigits(int_n//10) + 1 if int_n &gt; 10 else 1
num//(10*(nDigits(num)-N)
# nDigits can also be caluclated as follows: numDigits = int(math.log(num,10))+1
</snippet></ROW><ROW><id>20252901</id><snippet>' Chairwoman'</snippet></ROW><ROW><id>20252901</id><snippet>comms_chairs[0]</snippet></ROW><ROW><id>20252901</id><snippet>comms_chairs[0][0]</snippet></ROW><ROW><id>20252901</id><snippet>comms_chairs[0]</snippet></ROW><ROW><id>20252901</id><snippet>comms_chairs.remove(' Chairwoman')</snippet></ROW><ROW><id>20252901</id><snippet>' Chairwoman'</snippet></ROW><ROW><id>20252901</id><snippet>' Chairwoman'</snippet></ROW><ROW><id>20252921</id><snippet>l1 = [1, 3, 5, 7, 9]
l2 = [2, 4, 6, 8, 10]
sum(zip(l1, l2), ())
# (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
</snippet></ROW><ROW><id>20253067</id><snippet>helper.getResultByWeek</snippet></ROW><ROW><id>20253067</id><snippet> CSV_data = usageDictWeek
</snippet></ROW><ROW><id>20253067</id><snippet>usageDictWeek</snippet></ROW><ROW><id>20253067</id><snippet> CSV_data[:] = usageDictWeek 
</snippet></ROW><ROW><id>20253067</id><snippet>usageDictWeek</snippet></ROW><ROW><id>20253190</id><snippet>res_users</snippet></ROW><ROW><id>20253201</id><snippet>def create_or_get(value):
    obj = session.query(IP).filter(IP.value==value).first()
    if not obj:
        obj = IP(value=value)
        session.add(obj)
    return obj
</snippet></ROW><ROW><id>20253201</id><snippet>session</snippet></ROW><ROW><id>20253201</id><snippet>scoped_session</snippet></ROW><ROW><id>20253239</id><snippet>week = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
days1 = ['Mon', 'Tue', 'Wed', 'Fri', 'Sat']
days2 = ['Mon', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
days3 = ['Mon', 'Wed', 'Thu', 'Sat', 'Sun']

def is_consecutive(d1, d2):
    for i in range(0, len(week) - 1):
        if d1 == week[i] and d2 == week[i + 1]:
            return True
    return False


def recursive_weekdays(days, index, in_range=False):
    # Base case
    if index == len(days) - 1:
        return days[index]

    if is_consecutive(days[index], days[index + 1]):
        if not in_range:
            return days[index] + " - " + recursive_weekdays(days, index + 1, True)
        else:
            return recursive_weekdays(days, index + 1, in_range)

    return days[index] + ", " + recursive_weekdays(days, index + 1)

print recursive_weekdays(days1, 0)
print recursive_weekdays(days2, 0)
print recursive_weekdays(days3, 0)
</snippet></ROW><ROW><id>20253239</id><snippet>Mon - Wed, Fri - Sat
Mon, Wed - Sun
Mon, Wed - Thu, Sat - Sun
</snippet></ROW><ROW><id>20253239</id><snippet>-</snippet></ROW><ROW><id>20253239</id><snippet>Mon - Wed, Fri - Sat
Mon - Wed, Fri - Sun
Mon - Tue, Sun
Wed - Thu, Sun
Wed, Fri - Sat
</snippet></ROW><ROW><id>20253291</id><snippet>import csv
with open('some_list_file.txt', 'rb') as list_file:
    reader = csv.reader(some_list_file)
    with open('Testit.txt', 'W+') as output_file:
        output_file.writelines(line[0] + '\n' for line in reader)
</snippet></ROW><ROW><id>20253291</id><snippet>import csv
with open('some_list_file.txt', 'rb') as list_file:
    reader = csv.reader(some_list_file)
    with open('Testit.txt', 'W+') as output_file:
        for line in reader:
            IDs = [part for part in line if part.startswith('Mon-')]
            if IDs:
                output_file.write(IDs[0] + '\n') # or accept multiple ID values if that's a possibilty
</snippet></ROW><ROW><id>20253291</id><snippet>Mon-</snippet></ROW><ROW><id>20253291</id><snippet>    with open('Testit.txt', 'W+') as output_file:
        output_file.writelines([part for part in line if part.startswith('Mon-')][0] + '\n' for line in reader])
</snippet></ROW><ROW><id>20253404</id><snippet>import os    

def get_files_by_file_size(dirname, reverse=False):
    """ Return list of file paths in directory sorted by file size """

    # Get list of files
    filepaths = []
    for basename in os.listdir(dirname):
        filename = os.path.join(dirname, basename)
        if os.path.isfile(filename):
            filepaths.append(filename)

    # Re-populate list with filename, size tuples
    for i in xrange(len(filepaths)):
        filepaths[i] = (filepaths[i], os.path.getsize(filepaths[i]))

    # Sort list by file size
    # If reverse=True sort from largest to smallest
    # If reverse=False sort from smallest to largest
    filepaths.sort(key=lambda filename: filename[1], reverse=reverse)

    # Re-populate list with just filenames
    for i in xrange(len(filepaths)):
        filepaths[i] = filepaths[i][0]

    return filepaths
</snippet></ROW><ROW><id>20253427</id><snippet>foo = range(10)
bar = foo
baz = range(10, 0, -1)
foo[0:4] = baz[0:4]

&gt;&gt;&gt; foo
[10, 9, 8, 7, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; bar
[10, 9, 8, 7, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>20253427</id><snippet>foo[0:4] = [copy.deepcopy(x) for x in baz[0:4]]
</snippet></ROW><ROW><id>20253693</id><snippet># Its a square with the top edge poked in
points = [
    ( 1.0,  1.0),
    ( 0.0,  0.0),
    (-1.0,  1.0),
    (-1.0, -1.0),
    ( 1.0, -1.0)]


def angle(x1, y1, x2, y2):
    # Use dotproduct to find angle between vectors
    # This always returns an angle between 0, pi
    numer = (x1 * x2 + y1 * y2)
    denom = sqrt((x1 ** 2 + y1 ** 2) * (x2 ** 2 + y2 ** 2))
    return acos(numer / denom) 


def cross_sign(x1, y1, x2, y2):
    # True if cross is positive
    # False if negative or zero
    return x1 * y2 &gt; x2 * y1

for i in range(len(points)):
    p1 = points[i]
    ref = points[i - 1]
    p2 = points[i - 2]
    x1, y1 = p1[0] - ref[0], p1[1] - ref[1]
    x2, y2 = p2[0] - ref[0], p2[1] - ref[1]

    print('Points', p1, ref, p2)
    print('Angle', angle(x1, y1, x2, y2))
    if cross_sign(x1, y1, x2, y2):
        print('Inner Angle')
    else:
        print('Outer Angle')
    print('')
</snippet></ROW><ROW><id>20253780</id><snippet>class HashTable():

    def __init__(self):
        self.size = 1000
        self.table = [None] * self.size

    def add(self, item):
        hashcode = self.hash(item)
        if hashcode &gt;= self.size:
            # Resize the table.
            self.size *= 2
            # etc.
        else:
            self.table[hashcode] = item

    def hash(self, item):
        # Your implementation of a hash function.
</snippet></ROW><ROW><id>20253882</id><snippet>filename = ('input.txt')
infile = open(filename, 'r')
ids = []
for line in infile:
    id, value1, value2 = line.split()
    if int(value1) &gt; 2 and int(value2) &gt; 3000:
        ids.append(id)
</snippet></ROW><ROW><id>20253947</id><snippet>vertices</snippet></ROW><ROW><id>20253947</id><snippet>float64</snippet></ROW><ROW><id>20253947</id><snippet>self.vertices =  np.array(self.vertices)
</snippet></ROW><ROW><id>20253947</id><snippet>self.vertices =  np.array(self.vertices, dtype='float32')
</snippet></ROW><ROW><id>20254077</id><snippet>django-hstore</snippet></ROW><ROW><id>20254077</id><snippet>DictionaryField</snippet></ROW><ROW><id>20254077</id><snippet>get_prep_value()</snippet></ROW><ROW><id>20254077</id><snippet>to_python()</snippet></ROW><ROW><id>20254086</id><snippet>import os
os.system("cd mydir;cat * &gt; merged.txt")
</snippet></ROW><ROW><id>20254120</id><snippet>q.join()
</snippet></ROW><ROW><id>20254120</id><snippet>item = q.get()
</snippet></ROW><ROW><id>20254120</id><snippet>q.task_done</snippet></ROW><ROW><id>20254120</id><snippet>while not q.empty():
    time.sleep(0.1)
q.join()
</snippet></ROW><ROW><id>20254120</id><snippet>None</snippet></ROW><ROW><id>20254120</id><snippet>    def worker():
        global kill_received
        while True and not kill_received[0]:
            print kill_received[0]
            item = q.get()
            if item is None:
                q.task_done()
                break
            upload_file(item, file_quantity, retry_list, authenticate)
            q.task_done()

    for i in range(value):
        t = Thread(target=worker)
        t.setDaemon(True)
        t.start()

    for item in file_list:
        q.put(item)

    for i in range(value):
        q.put(None)
</snippet></ROW><ROW><id>20254120</id><snippet>None</snippet></ROW><ROW><id>20254132</id><snippet>import struct

lsof_list = """\
COMMAND     PID       USER   FD      TYPE DEVICE  SIZE/OFF   NODE NAME
init          1       root  cwd   unknown                         /proc/1/cwd (readlink: Permission denied)
init          1       root  rtd   unknown                         /proc/1/root (readlink: Permission denied)
python    30077      user1  txt       REG    8,1   2617520 461619 /usr/bin/python2.6
""".splitlines()

# note: variable-length NAME field at the end intentionally omitted
base_format = '8s 1x 6s 1x 10s 1x 4s 1x 9s 1x 6s 1x 9s 1x 6s 1x'
base_format_size = struct.calcsize(base_format)

for line in lsof_list:
    remainder = len(line) - base_format_size
    format = base_format + str(remainder) + 's'  # append NAME field format
    fields = struct.unpack(format, line)
    print fields
</snippet></ROW><ROW><id>20254132</id><snippet>('COMMAND ', '   PID', '      USER', '  FD', '     TYPE', 'DEVICE', ' SIZE/OFF', '  NODE', 'NAME')
('init    ', '     1', '      root', ' cwd', '  unknown', '      ', '         ', '      ', '/proc/1/cwd (readlink: Permission denied)')
('init    ', '     1', '      root', ' rtd', '  unknown', '      ', '         ', '      ', '/proc/1/root (readlink: Permission denied)')
('python  ', ' 30077', '     user1', ' txt', '      REG', '   8,1', '  2617520', '461619', '/usr/bin/python2.6')
</snippet></ROW><ROW><id>20254226</id><snippet>with open('path-to-file.txt') as infile:
  for line in infile:
    # code here to deal with line.
</snippet></ROW><ROW><id>20254226</id><snippet>with open('path-to-file.txt') as infile:
  for line in infile:
    if condition:
      # skip a line
      next(infile)
</snippet></ROW><ROW><id>20254226</id><snippet>aline + 2</snippet></ROW><ROW><id>20254226</id><snippet>lines = infile.readlines()
for lineno, line in enumerate(lines):
  targetline = lines[lineno + 2]
</snippet></ROW><ROW><id>20254277</id><snippet>1 x 3</snippet></ROW><ROW><id>20254277</id><snippet>n x 3</snippet></ROW><ROW><id>20254277</id><snippet>3*n</snippet></ROW><ROW><id>20254277</id><snippet>3 x n</snippet></ROW><ROW><id>20254277</id><snippet>n x 3</snippet></ROW><ROW><id>20254277</id><snippet>&gt;&gt;&gt; import numpy as np

&gt;&gt;&gt; rgbValues = np.array([14, 25, 19, 24, 25, 28, 58, 87, 43, 1, 2, 3])
&gt;&gt;&gt; rgbValues.shape
(12,)
</snippet></ROW><ROW><id>20254277</id><snippet>n x 3</snippet></ROW><ROW><id>20254277</id><snippet>&gt;&gt;&gt; lmsValues = rgbValues.reshape(-1, 3)
&gt;&gt;&gt; lmsValues
array([[14, 25, 19],
       [24, 25, 28],
       [58, 87, 43],
       [ 1,  2,  3]])
&gt;&gt;&gt; lmsValues.shape
(4, 3)
</snippet></ROW><ROW><id>20254277</id><snippet>3 x 1</snippet></ROW><ROW><id>20254277</id><snippet>3 x n</snippet></ROW><ROW><id>20254277</id><snippet>&gt;&gt;&gt; lmsValues.T
array([[14, 24, 58,  1],
       [25, 25, 87,  2],
       [19, 28, 43,  3]])

&gt;&gt;&gt; lmsValues.T.shape
(3, 4)

&gt;&gt;&gt; lmsValues.T[0]
array([14, 24, 58,  1])

&gt;&gt;&gt; lmsValues.T[0].shape
(4,)
</snippet></ROW><ROW><id>20254277</id><snippet>lmsValues</snippet></ROW><ROW><id>20254277</id><snippet>1 x 3</snippet></ROW><ROW><id>20254277</id><snippet>n x 1 x 3</snippet></ROW><ROW><id>20254277</id><snippet>&gt;&gt;&gt; lmsValues = rgbValues.reshape(-1, 1, 3)
&gt;&gt;&gt; lmsValues
array([[[14, 25, 19]],

       [[24, 25, 28]],

       [[58, 87, 43]],

       [[ 1,  2,  3]]])

&gt;&gt;&gt; lmsValues.shape
(4, 1, 3)

&gt;&gt;&gt; lmsValues[0]
array([[14, 25, 19]])

&gt;&gt;&gt; lmsValues[0].shape
(1, 3)
</snippet></ROW><ROW><id>20254490</id><snippet>s = "&lt;/th&gt;&lt;td class='tracking'&gt;"
</snippet></ROW><ROW><id>20254490</id><snippet>s = '&lt;/th&gt;&lt;td class=\'tracking\'&gt;'
</snippet></ROW><ROW><id>20254531</id><snippet>PyList_New()</snippet></ROW><ROW><id>20254634</id><snippet>axes</snippet></ROW><ROW><id>20254634</id><snippet>ax = gca()
ax.set_aspect(2)
plt.draw()
</snippet></ROW><ROW><id>20254713</id><snippet>itertools.groupby</snippet></ROW><ROW><id>20254713</id><snippet>filter</snippet></ROW><ROW><id>20254937</id><snippet>&gt;&gt;&gt; ast.literal_eval(raw_input('Foo: '))
Foo: 1,2,3
(1, 2, 3)
</snippet></ROW><ROW><id>20254957</id><snippet>def employee_creation():

    result = [((item[0] +", "+ item[1]).ljust(30), int(item[2]), item[3].ljust(15), int(item[4])) for item in data]
    for items in result:
            result1.append((items[0][0:30], format(items[1], "^5d"), items[2][0:15], "£"+format((items[3]),"&lt;8d")))

    return result # no need for () here

result = employee_creation() # store the return value of your function
print(result)
</snippet></ROW><ROW><id>20255007</id><snippet>(?:A(?:B)?|B)(?:C)?
</snippet></ROW><ROW><id>20255007</id><snippet>A</snippet></ROW><ROW><id>20255007</id><snippet>B</snippet></ROW><ROW><id>20255007</id><snippet>C</snippet></ROW><ROW><id>20255007</id><snippet>((?:A)?(?:B)?)(?!\1{100})(?:C)?
</snippet></ROW><ROW><id>20255078</id><snippet>class UserProfile(models.Model):
    """Contains user profile fields not provided by User model"""
    user = models.OneToOneField(User)
    # Defined User profile fields like picture, phone, etc
</snippet></ROW><ROW><id>20255078</id><snippet>UserProfile</snippet></ROW><ROW><id>20255078</id><snippet>User.profile = property(lambda u: UserProfile.objects.get_or_create(user=u)[0])
</snippet></ROW><ROW><id>20255078</id><snippet>{% user.profile.phone %}</snippet></ROW><ROW><id>20255305</id><snippet>files = {tag: open(pathname, 'rb') for (tag, pathname) in stuff_to_send}
</snippet></ROW><ROW><id>20255305</id><snippet>def read_file(pathname):
    with open(pathname, 'rb') as f:
        return f.read()
files = {tag: read_file(pathname) for (tag, pathname) in stuff_to_send}
</snippet></ROW><ROW><id>20255305</id><snippet>requests</snippet></ROW><ROW><id>20255305</id><snippet>read</snippet></ROW><ROW><id>20255305</id><snippet>files = {key: files[key] for key in chunk}</snippet></ROW><ROW><id>20255305</id><snippet>for key in chunk:
    files[key].close()
</snippet></ROW><ROW><id>20255305</id><snippet>dict</snippet></ROW><ROW><id>20255305</id><snippet>files = {tag: open(filename, 'rb') for (tag, filename) in chunk}
</snippet></ROW><ROW><id>20255305</id><snippet>for file in files.values():
    file.close()
</snippet></ROW><ROW><id>20255305</id><snippet>files</snippet></ROW><ROW><id>20255305</id><snippet>files.clear()</snippet></ROW><ROW><id>20255305</id><snippet>files</snippet></ROW><ROW><id>20255305</id><snippet>mmap</snippet></ROW><ROW><id>20255388</id><snippet>count = 0

while x != y::
   count +=1 # variable will increment every loop iteration
   # your code


print count
</snippet></ROW><ROW><id>20255555</id><snippet>td</snippet></ROW><ROW><id>20255555</id><snippet>object-cell-border</snippet></ROW><ROW><id>20255555</id><snippet>vakken = row.findAll("td", {"class" : "object-cell-border"})
for vak in vakken:
    duur = vak.find("td", {"class" : "object-cell-border"}).attrs["rowspan"]
</snippet></ROW><ROW><id>20255555</id><snippet>td</snippet></ROW><ROW><id>20255555</id><snippet>vakken</snippet></ROW><ROW><id>20255555</id><snippet>td</snippet></ROW><ROW><id>20255555</id><snippet>td</snippet></ROW><ROW><id>20255602</id><snippet>if i['Class'] == '&lt;=50K':
</snippet></ROW><ROW><id>20255602</id><snippet>dictionary</snippet></ROW><ROW><id>20255602</id><snippet>dictionary = [{'Class': '&gt;50K'},{'Class': '&lt;=50K'}]
#                                        here--^
</snippet></ROW><ROW><id>20255638</id><snippet>python pbkdf2.py
</snippet></ROW><ROW><id>20255638</id><snippet>pbkdf2.py</snippet></ROW><ROW><id>20255646</id><snippet>&gt;&gt;&gt; myArray[myotherArray == 0] *= 5
&gt;&gt;&gt; myArray
array([[25,  3,  2,  5, 10],
       [10, 25,  3, 15, 15]])
</snippet></ROW><ROW><id>20255668</id><snippet>url(r'^admin/', include('webshop.admin.site.urls')),
</snippet></ROW><ROW><id>20255860</id><snippet>inds = np.where(a)[0]
cutoff  = inds[inds.shape[0]//2]
</snippet></ROW><ROW><id>20255860</id><snippet>b = np.zeros(a.shape,dtype=bool)
c = np.zeros(a.shape,dtype=bool)
c[cutoff:] = a[cutoff:]
b[:cutoff] = a[:cutoff]
</snippet></ROW><ROW><id>20255860</id><snippet>b
Out[65]: array([False, False,  True,  True, False, False, False, False], dtype=bool)

c
Out[64]: array([False, False, False, False,  True, False,  True, False], dtype=bool)
</snippet></ROW><ROW><id>20256013</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile(r"([0-9]+?)\1+")
&gt;&gt;&gt; print pattern.search("1110111011").group()
111
</snippet></ROW><ROW><id>20256013</id><snippet>1</snippet></ROW><ROW><id>20256013</id><snippet>?</snippet></ROW><ROW><id>20256013</id><snippet>&gt;&gt;&gt; print re.search(r"([0-9]+)\1+", "1110111011").group()
11101110
</snippet></ROW><ROW><id>20256013</id><snippet>pattern = re.compile(r"([01]+)\1+")
print(pattern.search("11010").group())
</snippet></ROW><ROW><id>20256013</id><snippet>re.findall()</snippet></ROW><ROW><id>20256013</id><snippet>findall()</snippet></ROW><ROW><id>20256013</id><snippet>pattern = re.compile(r"(?=(([01]+)\2+))")
for match in pattern.finditer("11010"):
    print(match.group(1), "at {}:{}".format(*match.span(1)))
</snippet></ROW><ROW><id>20256013</id><snippet>11 at 0:2
1010 at 1:5
</snippet></ROW><ROW><id>20256015</id><snippet>newMessageSegment</snippet></ROW><ROW><id>20256015</id><snippet>preview</snippet></ROW><ROW><id>20256015</id><snippet>default</snippet></ROW><ROW><id>20256015</id><snippet>msg_id</snippet></ROW><ROW><id>20256015</id><snippet>newMessageSegment.msg_id = newMessage.id
</snippet></ROW><ROW><id>20256015</id><snippet>newMessageSegment</snippet></ROW><ROW><id>20256015</id><snippet>msgSegment._meta.fields</snippet></ROW><ROW><id>20256015</id><snippet>newMessageSegment._state.db = "default"
newMessageSegment.msg = newMessage
newMessageSegment.save(using="default")
</snippet></ROW><ROW><id>20256074</id><snippet>if u_items in inventory:
</snippet></ROW><ROW><id>20256074</id><snippet>u_items</snippet></ROW><ROW><id>20256074</id><snippet>u_items</snippet></ROW><ROW><id>20256074</id><snippet>inventory</snippet></ROW><ROW><id>20256074</id><snippet>u_items</snippet></ROW><ROW><id>20256074</id><snippet>'apple'</snippet></ROW><ROW><id>20256074</id><snippet>if 'Apple' in '3' == True:
</snippet></ROW><ROW><id>20256110</id><snippet>import csv
with open('mydata.csv') as in_file:
    with open('outfile.csv', 'wb') as out_file:
        csv_reader = csv.reader(in_file, delimiter=' ', skipinitialspace=True)
        csv_writer = csv.writer(out_file, delimiter = '\t')

        # Iterate over all rows in the file
        for i, header in enumerate(csv_reader):
            # Get the header data
            num = header[0]
            csv_writer.writerow([num])

            # Write frame number, starting with 1 (hence the +1 part)
            csv_writer.writerow([i+1])

            # Iterate over all data rows
            for _ in xrange(326):

                # Call next(csv_reader) to get the next row
                # Put inside a try ... except to avoid StopIteration exception
                # if end of file is found before reaching 326 lines
                try:
                    row = next(csv_reader)
                except StopIteration:
                    break
                # Use list comprehension to extract number of zeros
                zeros = sum([1 for x in row[2:12] if x.strip() == '0'])
                not_zeros = 10 - zeros
                # Write the data to output file
                out = [row[0].strip(), row[1].strip(),not_zeros, zeros, row[12].strip()]
                csv_writer.writerow(out)
            # If the
            else:
                # Skip the last two lines of the file
                next(csv_reader)
                next(csv_reader)
</snippet></ROW><ROW><id>20256110</id><snippet>326
1
1   6   5   5   1
2   6   4   6   1
3   6   4   6   1
</snippet></ROW><ROW><id>20256324</id><snippet>my_dict</snippet></ROW><ROW><id>20256324</id><snippet>my_dict[key] = value</snippet></ROW><ROW><id>20256324</id><snippet>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.set_dict('a', 7)
&gt;&gt;&gt; A.my_dict
{'a': 7, 'c': 3, 'b': 2}
&gt;&gt;&gt; n = A()
&gt;&gt;&gt; n.set_dict('a', 10)
&gt;&gt;&gt; A.my_dict
{'a': 10, 'c': 3, 'b': 2}
</snippet></ROW><ROW><id>20256324</id><snippet>A.my_dict</snippet></ROW><ROW><id>20256324</id><snippet>a.my_dict</snippet></ROW><ROW><id>20256324</id><snippet>class A(object):
    def __init__(self):
        self.my_dict = {"a":1, "b":2, "c":3}

    def set_dict(self,key,value):
        self.my_dict[key] = value

    def set_dict2(self,dct):
        self.my_dict = dct
</snippet></ROW><ROW><id>20256373</id><snippet>from bs4 import BeautifulSoup
import urllib2
html = urllib2.urlopen('http://www.lolking.net/champions/')
soup = BeautifulSoup(html)
# locate the cell that contains hero name: Ahri 
hero_list = ["Blitzcrank", "Ahri", "Akali"]
for hero in hero_list:
    td_name = soup.find('td', {"data-sortval":hero})
    tr = td_name.parent
    popularity = tr.find_all('td', recursive=False)[3].text
    print hero, popularity
</snippet></ROW><ROW><id>20256373</id><snippet>Blitzcrank 12.58%
Ahri 10.98%
Akali 7.52%
</snippet></ROW><ROW><id>20256373</id><snippet>10.98%
</snippet></ROW><ROW><id>20256373</id><snippet>from bs4 import BeautifulSoup
import urllib2
html = urllib2.urlopen('http://www.lolking.net/champions/')
soup = BeautifulSoup(html)
# find the table first
table = soup.find('table', {"class":"clientsort champion-list"})
# find the all the rows
for row in table.find('tbody').find_all("tr", recursive=False):
    cols = row.find_all("td")
    hero = cols[0].text.strip()
    popularity = cols[3].text
    print hero, popularity
</snippet></ROW><ROW><id>20256373</id><snippet>Aatrox 6.86%
Ahri 10.98%
Akali 7.52%
Alistar 4.9%
Amumu 8.75%
...
</snippet></ROW><ROW><id>20256379</id><snippet>dtype</snippet></ROW><ROW><id>20256379</id><snippet>float</snippet></ROW><ROW><id>20256379</id><snippet>TypeError</snippet></ROW><ROW><id>20256379</id><snippet>f_column = numpy.cumsum(numpy.asarray(row[1], dtype=float))
</snippet></ROW><ROW><id>20256414</id><snippet>final_list = []
for sublist in my_list:
    temp_list = []
    for item in sublist:
        temp_list += [item] * 2
    final_list.append(temp_list)
</snippet></ROW><ROW><id>20256554</id><snippet># create a dict that maps input bytes to their hamming-encoded version.  This
# can be pre-calculated and hard-coded, or generated at startup
hamming = {
    0x00: 0x0000, # these numbers are nonsense.  Input byte 0x00 is
                  # being mapped to output bytes 0x0000
    0x01: 0x0101,
    ...
    0xff: 0x10cf
}

# read the source binary file
with open('input.bin', 'r') as infile:
    data = [int(x) for x in infile.read()]

# translate the input data into its encoded form (1 byte becomes 2 with parity added, etc)
output = ''
for byte in data:
    encoded = hamming[byte]
    output += chr((encoded &gt;&gt; 8) &amp; 0xff)
    output += chr((encoded &gt;&gt; 0) &amp; 0xff)

# write the encoded data to a file
with open('output.bin', 'w') as out:    
    out.write(output)
</snippet></ROW><ROW><id>20256554</id><snippet>hamming</snippet></ROW><ROW><id>20256692</id><snippet>In [1]: df = DataFrame({'A' : ['foo','foo','bar','bar','baz'],
                        'B' : [1,2,1,2,1], 
                        'C' : np.random.randn(5) })

In [2]: df
Out[2]: 
     A  B         C
0  foo  1 -0.909708
1  foo  2  1.321838
2  bar  1  0.368994
3  bar  2 -0.058657
4  baz  1 -1.159151

[5 rows x 3 columns]
</snippet></ROW><ROW><id>20256692</id><snippet>table=True</snippet></ROW><ROW><id>20256692</id><snippet>format='table'</snippet></ROW><ROW><id>20256692</id><snippet>data_columns</snippet></ROW><ROW><id>20256692</id><snippet>data_columns=True</snippet></ROW><ROW><id>20256692</id><snippet>In [3]: df.to_hdf('test.h5','df',mode='w',format='table',data_columns=['A','B'])

In [4]: pd.read_hdf('test.h5','df')
Out[4]: 
     A  B         C
0  foo  1 -0.909708
1  foo  2  1.321838
2  bar  1  0.368994
3  bar  2 -0.058657
4  baz  1 -1.159151

[5 rows x 3 columns]
</snippet></ROW><ROW><id>20256692</id><snippet>query_column=list_of_values</snippet></ROW><ROW><id>20256692</id><snippet>In [8]: pd.read_hdf('test.h5','df',where='A=["foo","bar"] &amp; B=1')
Out[8]: 
     A  B         C
0  foo  1 -0.909708
2  bar  1  0.368994

[2 rows x 3 columns]
</snippet></ROW><ROW><id>20256692</id><snippet>In [11]: pd.read_hdf('test.h5','df',where=[pd.Term('A','=',["foo","bar"]),'B=1'])
Out[11]: 
     A  B         C
0  foo  1 -0.909708
2  bar  1  0.368994

[2 rows x 3 columns]
</snippet></ROW><ROW><id>20256775</id><snippet>if</snippet></ROW><ROW><id>20256775</id><snippet>parameters = raw_input()
sx, sy, sstartfrom, sjump, suntil = parameters.split()
x = "0123456789".index(sx)
y = "0123456789".index(sy)
startfrom = int(sstartfrom)
jump = int(sjump)
until = int(suntil)
for i in range(startfrom, until+jump, jump):
    si = str(i)
    booz = sx in si or i%x == 0
    bang = sy in si or i%y == 0
    print [[si, 'BANG'],['BOOZ','BOOZ-BANG']][booz][bang]
</snippet></ROW><ROW><id>20256775</id><snippet>def generator():
    for i in range(startfrom, until+jump, jump):
        si = str(i)
        booz = sx in str(i) or i%x == 0
        bang = sy in str(i) or i%y == 0
        yield [[si, 'BANG'],['BOOZ','BOOZ-BANG']][booz][bang]

print ",".join(generator())
</snippet></ROW><ROW><id>20256775</id><snippet>$ echo 3 4 1 1 14 | python2 boozbang.py
1,2,BOOZ,BANG,5,BOOZ,7,BANG,BOOZ,10,11,BOOZ-BANG,BOOZ,BANG
$ echo 5 3 670 7 691 | python2 boozbang.py 
BOOZ,677,BANG,691
$ echo 3 4 34 3 64 | python2 boozbang.py 
BOOZ-BANG,BOOZ,BANG,BOOZ-BANG,BANG,BANG,BANG,55,58,61,BANG
</snippet></ROW><ROW><id>20256891</id><snippet>lst = [tentativa1, tentativa2]
for item in lst:
    if item.code == 200:
        item = item.read()
        print '\n:)' if 'registration' in item else '\n:/'
        print '\n :)' if 'there is no form' in item else '\n:/'
</snippet></ROW><ROW><id>20256891</id><snippet>continue</snippet></ROW><ROW><id>20257096</id><snippet>\e</snippet></ROW><ROW><id>20257096</id><snippet>e</snippet></ROW><ROW><id>20257096</id><snippet>\</snippet></ROW><ROW><id>20257096</id><snippet>\e</snippet></ROW><ROW><id>20257096</id><snippet>\</snippet></ROW><ROW><id>20257096</id><snippet>e</snippet></ROW><ROW><id>20257096</id><snippet>\\</snippet></ROW><ROW><id>20257096</id><snippet>\</snippet></ROW><ROW><id>20257096</id><snippet>\</snippet></ROW><ROW><id>20257096</id><snippet>\\</snippet></ROW><ROW><id>20257096</id><snippet>\</snippet></ROW><ROW><id>20257096</id><snippet>\</snippet></ROW><ROW><id>20257096</id><snippet>\\\\</snippet></ROW><ROW><id>20257096</id><snippet>re.compile(r'\\')
print(re.findall(C, "\\"))
</snippet></ROW><ROW><id>20257174</id><snippet>import json

def update_view(request):
    # more code
    redirect_url = reverse('gameover', args=(game_id,), kwargs={})
    return HttpResponse(json.dumps({'redirect_url': redirect_url},
        ensure_ascii=False), mimetype='application/json')

(function($) {

    $(function() {
        $.ajax({
            type: 'post',
            url: 'path/to/your/view/',
            dataType: 'json',
            success: function(data, textStatus, jqXHR) {
                window.top.location = data.redirect_url;
            }
        });
    });

})(jQuery)
</snippet></ROW><ROW><id>20257174</id><snippet>$.post()</snippet></ROW><ROW><id>20257174</id><snippet>$.ajax()</snippet></ROW><ROW><id>20257199</id><snippet>postNumAvg</snippet></ROW><ROW><id>20257199</id><snippet>def posNumAvg(values):
    x = []
    average = 0

    for i in values:
        if i &gt; 0:
            x.append(i)
    average = sum(x) / len(x)

    return average
</snippet></ROW><ROW><id>20257199</id><snippet>sum</snippet></ROW><ROW><id>20257199</id><snippet>def posNumAvg(values):
    pos = [v for v in values if v &gt; 0]
    return sum(pos) / len(pos)
</snippet></ROW><ROW><id>20257199</id><snippet>def negativeNumAvg(values):
    x = []
    average = 0

    for i in values:
        if i &lt; 0:
            x.append(i)
    average = sum(x) / len(x)

    return average
</snippet></ROW><ROW><id>20257199</id><snippet>def store(values):
   return {'AvgPositive':posNumAvg(values), 'AvgNonPos':negativeNumAvg(values), 'AvgAllNum':allNumAvg(values)}
</snippet></ROW><ROW><id>20257382</id><snippet>%=%</snippet></ROW><ROW><id>20257382</id><snippet>set</snippet></ROW><ROW><id>20257382</id><snippet>project.py %inputName% %scoring%
</snippet></ROW><ROW><id>20257382</id><snippet>type</snippet></ROW><ROW><id>20257382</id><snippet>%inputName% %scoring%</snippet></ROW><ROW><id>20257427</id><snippet>self.parse_file(str(self.mpllineEdit.text()))
</snippet></ROW><ROW><id>20257427</id><snippet>Qstring</snippet></ROW><ROW><id>20257512</id><snippet>win32api.GetTimeZoneInformation</snippet></ROW><ROW><id>20257512</id><snippet>win32api.SetTimeZoneInformation</snippet></ROW><ROW><id>20257512</id><snippet>SE_TIME_ZONE_NAME</snippet></ROW><ROW><id>20257512</id><snippet>AdjustPrivilege</snippet></ROW><ROW><id>20257512</id><snippet>import ntsecuritycon, win32security, win32api

def AdjustPrivilege( priv ):
    flags = ntsecuritycon.TOKEN_ADJUST_PRIVILEGES | ntsecuritycon.TOKEN_QUERY
    htoken =  win32security.OpenProcessToken(win32api.GetCurrentProcess(), flags)
    id = win32security.LookupPrivilegeValue(None, priv)
    newPrivileges = [(id, ntsecuritycon.SE_PRIVILEGE_ENABLED)]
    win32security.AdjustTokenPrivileges(htoken, 0, newPrivileges)

# Enable the privilege
AdjustPrivilege(win32security.SE_TIME_ZONE_NAME)

# Set the timezone
win32api.SetTimeZoneInformation((-600,u'Eastern Standard Time',(2000,4,1,3,0,0,0,0),0,u'Eastern Daylight Time',(2000,10,1,2,0,0,0,0),-60))
</snippet></ROW><ROW><id>20257597</id><snippet>import os
import glob

searchTerm = "China"

#create output file in which we'll store all of the data that contains the word of interest
out = open("foundHits.txt", "w")

hitCount = 0

for csv in glob.glob("C:\\Users\\Douglas\\Desktop\\potato\\*.csv"):
    openCsv = open(csv, "r")
    readCsv = openCsv.read()

    #split each row into a string within the list "splitCsv"
    splitCsv = readCsv.split("\n")

    #for each row in the current csv
    for row in splitCsv:

        #split each row on the phrase "PM ET", which separates your metadata from the text data you want to scan
        splitRow = row.split("PM ET")

        #determine whether the string of interest appears in what I take to be the data of interest

        #use this if condition in order to prevent the script from breaking if it encounters a row that doesn't contain "PM ET"
        if len(splitRow) &gt; 1:

            #split each time you encounter that word
            splitOnTerm = splitRow[1].split(searchTerm)

            searchTermInstances = len(splitOnTerm) - 1

            #print row for review
            out.write(str(searchTermInstances) + "\t" + str(row) + "\n")
</snippet></ROW><ROW><id>20257603</id><snippet>t = a[j]
</snippet></ROW><ROW><id>20257603</id><snippet>a[j] = t
</snippet></ROW><ROW><id>20257603</id><snippet>a[j + 1] = t
</snippet></ROW><ROW><id>20257603</id><snippet>a[j], a[j + 1] = a[j + 1], a[j]
</snippet></ROW><ROW><id>20257697</id><snippet>LinearOperator</snippet></ROW><ROW><id>20257697</id><snippet>dtype</snippet></ROW><ROW><id>20257697</id><snippet>dtype='float64'</snippet></ROW><ROW><id>20257697</id><snippet>In [1]: import numpy as np

In [2]: from scipy.sparse.linalg import LinearOperator, gmres

In [3]: def mymatvec(v):
   ...:     a = np.array([[4,2,1],[2,2,1],[1,1,1]])
   ...:     return a.dot(v)
   ...: 

In [4]: A = LinearOperator((3,3), mymatvec, dtype='float64')

In [5]: b = np.array([1,2,3])

In [6]: gmres(A, b)
Out[6]: (array([-0.5, -0.5,  4. ]), 0)
</snippet></ROW><ROW><id>20257699</id><snippet>compiler</snippet></ROW><ROW><id>20257699</id><snippet>compiler</snippet></ROW><ROW><id>20257699</id><snippet>parser</snippet></ROW><ROW><id>20257763</id><snippet>[0 : half_list_position]</snippet></ROW><ROW><id>20257763</id><snippet> i % [0:half_list_position]
</snippet></ROW><ROW><id>20257763</id><snippet>if sum(1 for n in numbers[:half_list_position] if i % n == 0) &gt; 0:    
        prime_list.remove(i)
</snippet></ROW><ROW><id>20257999</id><snippet>ordering</snippet></ROW><ROW><id>20257999</id><snippet>order_by</snippet></ROW><ROW><id>20257999</id><snippet>Customer.objects.order_by('state', 'city_name', 'customer_name')</snippet></ROW><ROW><id>20257999</id><snippet>.all()</snippet></ROW><ROW><id>20257999</id><snippet>regroup</snippet></ROW><ROW><id>20258017</id><snippet>randint()</snippet></ROW><ROW><id>20258017</id><snippet>term_list</snippet></ROW><ROW><id>20258017</id><snippet>random.randint(1, len(term_list))
</snippet></ROW><ROW><id>20258017</id><snippet>random.randint(1, 0)
</snippet></ROW><ROW><id>20258017</id><snippet>randint</snippet></ROW><ROW><id>20258017</id><snippet>term_list</snippet></ROW><ROW><id>20258017</id><snippet>test_terms = list_scrambler(gen_test(int(raw_input("How many questions on your test? (There are " + str(len(term_list)) + " questions in total.) "))))
</snippet></ROW><ROW><id>20258017</id><snippet>term_list</snippet></ROW><ROW><id>20258017</id><snippet>gen_test</snippet></ROW><ROW><id>20258017</id><snippet>test_terms = term_list
</snippet></ROW><ROW><id>20258017</id><snippet>term_list</snippet></ROW><ROW><id>20258017</id><snippet>test_terms</snippet></ROW><ROW><id>20258017</id><snippet>term_list</snippet></ROW><ROW><id>20258017</id><snippet>list_scrambler</snippet></ROW><ROW><id>20258017</id><snippet>list_scrambler</snippet></ROW><ROW><id>20258017</id><snippet>        del unscrambled_list[transfer_var]
</snippet></ROW><ROW><id>20258017</id><snippet>term_list</snippet></ROW><ROW><id>20258018</id><snippet>sites = [site + 'index.php/1', site + 'index.php/2']

for url in sites:
    try:
        website = urllib2.urlopen(url)
    except URLError as e:
        print '{}: {}'.format(url, repr(e))
    else:
        if website.code == 200:
            website = website.read().lower()
            print '\n:)' if 'registration' in website else '\n:/'
            print '\n:)' if 'there is no form' in website else '\n:/'        
        else:
            print '{}: code {}'.format(url, website.code)
</snippet></ROW><ROW><id>20258155</id><snippet>ProtocolType</snippet></ROW><ROW><id>20258155</id><snippet>__unicode__()</snippet></ROW><ROW><id>20258155</id><snippet>class ProtocolType(models.Model):
   #your fields
   def __unicode__(self):
        return self.name # if you have char name field in protocol, otherwise use appropriate field(s) to construct the string.
</snippet></ROW><ROW><id>20258412</id><snippet>list_1 = [
    [1,2,3],
    [4,5,6],
    [7,8,9],
]
list_2 = [10,20,30]

list_1 = [row + [col] for row, col in zip(list_1, list_2)]
for row in list_1:
    print row
</snippet></ROW><ROW><id>20258412</id><snippet>[1, 2, 3, 10]
[4, 5, 6, 20]
[7, 8, 9, 30]
</snippet></ROW><ROW><id>20258556</id><snippet>print(dictionary.keys())
</snippet></ROW><ROW><id>20258556</id><snippet>print(dictionary.values())
</snippet></ROW><ROW><id>20258556</id><snippet>print(dictionary.items())
</snippet></ROW><ROW><id>20258556</id><snippet>for key in dictionary.keys():
    print("Key: ", key)
for value in dictionary.values():
    print("Value: ", value)
for k, v in dictionary.items():
    print("Key: ", k)
    print("Value: ", v)
</snippet></ROW><ROW><id>20258699</id><snippet>fetch</snippet></ROW><ROW><id>20258699</id><snippet>h.fetch(:x, 5)
h.fetch(:x) {|missing_key| "Unfortunately #{missing_key} is not available"}
</snippet></ROW><ROW><id>20259317</id><snippet>wlcm_scrn = tkinter.Tk()
</snippet></ROW><ROW><id>20259317</id><snippet>wlcm_scrn = tkinter.Toplevel()
</snippet></ROW><ROW><id>20259677</id><snippet>sh ./setup.sh</snippet></ROW><ROW><id>20259677</id><snippet>subprocess.call('sh ./setup.sh', shell=True)
</snippet></ROW><ROW><id>20259677</id><snippet>setup.sh</snippet></ROW><ROW><id>20259677</id><snippet>#!</snippet></ROW><ROW><id>20259677</id><snippet>shell=True</snippet></ROW><ROW><id>20259677</id><snippet>execve</snippet></ROW><ROW><id>20259677</id><snippet>subprocess.call(['sh', './setup.sh'])
</snippet></ROW><ROW><id>20259697</id><snippet>|</snippet></ROW><ROW><id>20259697</id><snippet>from django.db.models import Q
result = SomeModel.objects.filter(Q(somefield='foo') | Q(somefield='bar'))
</snippet></ROW><ROW><id>20259837</id><snippet>() {</snippet></ROW><ROW><id>20259837</id><snippet>def is_env_shell_func(name):
    return os.environ[name].startswith('() {')
</snippet></ROW><ROW><id>20259936</id><snippet>signal.SIGKILL</snippet></ROW><ROW><id>20259936</id><snippet>signal.SIGTERM</snippet></ROW><ROW><id>20259936</id><snippet>import signal

...

os.kill(logProc, signal.SIGKILL)
</snippet></ROW><ROW><id>20259936</id><snippet>kill(2)</snippet></ROW><ROW><id>20259936</id><snippet>sig</snippet></ROW><ROW><id>20259936</id><snippet>0</snippet></ROW><ROW><id>20259966</id><snippet>Q</snippet></ROW><ROW><id>20259966</id><snippet>from django.db.models import Q

Model.objects.filter(
    Q(f1__contains=query) |
    Q(f2__contains=query) |
    Q(f3__contains=query)
)
</snippet></ROW><ROW><id>20259966</id><snippet>search</snippet></ROW><ROW><id>20259966</id><snippet>contains</snippet></ROW><ROW><id>20260048</id><snippet>drawMatches</snippet></ROW><ROW><id>20260048</id><snippet>C++</snippet></ROW><ROW><id>20260048</id><snippet> C++: void drawMatches(const Mat&amp; img1, const vector&lt;KeyPoint&gt;&amp; keypoints1, const Mat&amp; img2, const vector&lt;KeyPoint&gt;&amp; keypoints2, const vector&lt;DMatch&gt;&amp; matches1to2, Mat&amp; outImg, const Scalar&amp; matchColor=Scalar::all(-1), const Scalar&amp; singlePointColor=Scalar::all(-1), const vector&lt;char&gt;&amp; matchesMask=vector&lt;char&gt;(), int flags=DrawMatchesFlags::DEFAULT )
 C++: void drawMatches(const Mat&amp; img1, const vector&lt;KeyPoint&gt;&amp; keypoints1, const Mat&amp; img2, const vector&lt;KeyPoint&gt;&amp; keypoints2, const vector&lt;vector&lt;DMatch&gt;&gt;&amp; matches1to2, Mat&amp; outImg, const Scalar&amp; matchColor=Scalar::all(-1), const Scalar&amp; singlePointColor=Scalar::all(-1), const vector&lt;vector&lt;char&gt;&gt;&amp; matchesMask=vector&lt;vector&lt;char&gt; &gt;(), int flags=DrawMatchesFlags::DEFAULT )
</snippet></ROW><ROW><id>20260048</id><snippet> Python: cv2.drawMatches(img1, keypoints1, [...]) 
</snippet></ROW><ROW><id>20260048</id><snippet>cv2.drawMatches(img1, keypoints1, img2, keypoints2, matches1to2[, outImg[, matchColor[, singlePointColor[, matchesMask[, flags]]]]]) → outImg
</snippet></ROW><ROW><id>20260313</id><snippet>None</snippet></ROW><ROW><id>20260313</id><snippet>Message.objects.filter(id=message_id).update(read_at=None)
</snippet></ROW><ROW><id>20260415</id><snippet>()</snippet></ROW><ROW><id>20260415</id><snippet>.lower</snippet></ROW><ROW><id>20260415</id><snippet>word = word[0].upper() + word[1:].lower()
</snippet></ROW><ROW><id>20260471</id><snippet>c</snippet></ROW><ROW><id>20260471</id><snippet>b</snippet></ROW><ROW><id>20260471</id><snippet>a</snippet></ROW><ROW><id>20260471</id><snippet>c[:]=a[:]</snippet></ROW><ROW><id>20260471</id><snippet>c</snippet></ROW><ROW><id>20260471</id><snippet>[1, 2, 3, 4, 7, 8, 9] [1, 2, 3, 4, 7, 8, 9]</snippet></ROW><ROW><id>20260638</id><snippet>pos</snippet></ROW><ROW><id>20260638</id><snippet>pos</snippet></ROW><ROW><id>20260638</id><snippet>train_set</snippet></ROW><ROW><id>20260638</id><snippet>pos</snippet></ROW><ROW><id>20260638</id><snippet>True</snippet></ROW><ROW><id>20260638</id><snippet>neg</snippet></ROW><ROW><id>20260638</id><snippet>pos</snippet></ROW><ROW><id>20260638</id><snippet>pos</snippet></ROW><ROW><id>20260638</id><snippet>pos</snippet></ROW><ROW><id>20260638</id><snippet>pos</snippet></ROW><ROW><id>20260802</id><snippet>import threading
import Queue
import datetime
import time

class myThread(threading.Thread):
    def __init__(self, in_queue, out_queue):
        threading.Thread.__init__(self)
        self.in_queue = in_queue
        self.out_queue = out_queue

    def run(self):
        while True:
            item = self.in_queue.get() #blocking till something is available in the queue
            #run your lines of code here
            processed_data = item + str(datetime.now()) + 'Processed'
            self.out_queue.put(processed_data)


IN_QUEUE = Queue.Queue()
OUT_QUEUE = Queue.Queue()

#starting 10 threads to do your work in parallel 
for i in range(10):
    t = myThread(IN_QUEUE, OUT_QUEUE)
    t.setDaemon(True)
    t.start()

#now populate your input queue
for i in range(3000):
    IN_QUEUE.put("string to process")

while not IN_QUEUE.empty():
    print "Data left to process - ", IN_QUEUE.qsize()
    time.sleep(10)

#finally printing output
while not OUT_QUEUE.empty():
    print OUT_QUEUE.get()
</snippet></ROW><ROW><id>20260838</id><snippet>/my</snippet></ROW><ROW><id>20260838</id><snippet>functions.py</snippet></ROW><ROW><id>20260838</id><snippet>def cleaner():
    print("Cleaner from functions!")

def worker():
    print("Worker from functions!")
</snippet></ROW><ROW><id>20260838</id><snippet>base.py</snippet></ROW><ROW><id>20260838</id><snippet>import my.functions

def cleaner():
    print("Replacement fake cleaner!")

my.functions.cleaner = cleaner


def method_to_test():
    from my.functions import cleaner
    from my.functions import worker
    cleaner()
    worker()


if __name__ == "__main__":
    method_to_test()
</snippet></ROW><ROW><id>20260968</id><snippet>import datetime

from sqlalchemy import *
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

engine = create_engine('sqlite:///:memory:', echo=True)
Session = sessionmaker(bind=engine)

# object model
class Record(Base):
    __tablename__ = 'test'
    id = Column(Integer, primary_key=True)
    datefrom = Column(Date)
    dateto = Column(Date)
    active = Column(Boolean, index=True, default=True)
    created = Column(DateTime, default=datetime.datetime.utcnow)

# create db schema
Base.metadata.create_all(engine)
session = Session()

# TEST INSERT DATA
somestring, someotherstring = '3/1/2008', '1/3/1988'
dfrom = datetime.datetime.strptime(somestring, '%d/%m/%Y').date()
dto = datetime.datetime.strptime(someotherstring, '%d/%m/%Y').date()
record = Record(datefrom=dfrom, dateto=dto)
session.add(record)
session.commit()
session.expunge_all()
</snippet></ROW><ROW><id>20260968</id><snippet>2013-11-28 09:17:14,608 INFO sqlalchemy.engine.base.Engine PRAGMA table_info("test")
2013-11-28 09:17:14,608 INFO sqlalchemy.engine.base.Engine ()
2013-11-28 09:17:14,609 INFO sqlalchemy.engine.base.Engine
CREATE TABLE test (
        id INTEGER NOT NULL,
        datefrom DATE,
        dateto DATE,
        active BOOLEAN,
        created DATETIME,
        PRIMARY KEY (id),
        CHECK (active IN (0, 1))
)


2013-11-28 09:17:14,611 INFO sqlalchemy.engine.base.Engine ()
2013-11-28 09:17:14,611 INFO sqlalchemy.engine.base.Engine COMMIT
2013-11-28 09:17:14,611 INFO sqlalchemy.engine.base.Engine CREATE INDEX ix_test_active ON test (active)
2013-11-28 09:17:14,611 INFO sqlalchemy.engine.base.Engine ()
2013-11-28 09:17:14,612 INFO sqlalchemy.engine.base.Engine COMMIT
2013-11-28 09:17:14,618 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2013-11-28 09:17:14,618 INFO sqlalchemy.engine.base.Engine INSERT INTO test (datefrom, dateto, active, created) VALUES (?, ?, ?, ?)
2013-11-28 09:17:14,618 INFO sqlalchemy.engine.base.Engine ('2008-01-03', '1988-03-01', 1, '2013-11-28 08:17:14.619000')
2013-11-28 09:17:14,619 INFO sqlalchemy.engine.base.Engine COMMIT
</snippet></ROW><ROW><id>20261075</id><snippet>os.path.expanduser</snippet></ROW><ROW><id>20261075</id><snippet>&gt;&gt;&gt; import os, os.path
&gt;&gt;&gt; os.path.expanduser('~')
'C:\\Documents and Settings\\alko'
</snippet></ROW><ROW><id>20261075</id><snippet>&gt;&gt;&gt; os.path.expanduser('~')
'/home/alko'
</snippet></ROW><ROW><id>20261075</id><snippet>os.mkdir</snippet></ROW><ROW><id>20261075</id><snippet>&gt;&gt;&gt; hd = os.path.expanduser('~')
&gt;&gt;&gt; os.mkdir(os.path.join(hd, '.my-config'))
</snippet></ROW><ROW><id>20261366</id><snippet>$ ipython --help-all</snippet></ROW><ROW><id>20261366</id><snippet>--pylab=&lt;CaselessStrEnum&gt; (InteractiveShellApp.pylab) # mean is an alias for

--InteractiveShellApp.pylab=&lt;CaselessStrEnum&gt;
    Default: None
    Choices: ['auto', 'gtk', 'inline', 'osx', 'qt', 'qt4', 'tk', 'wx']
    Pre-load matplotlib and numpy for interactive use, selecting a particular
    matplotlib backend and loop integration.
--InteractiveShellApp.pylab_import_all=&lt;Bool&gt;
    Default: True
    If true, IPython will populate the user namespace with numpy, pylab, etc.
    and an ``import *`` is done from numpy and pylab, when using pylab mode.
    When False, pylab mode should not import any names into the user namespace.
</snippet></ROW><ROW><id>20261366</id><snippet>c.InteractiveShellApp.pylab='auto'</snippet></ROW><ROW><id>20261433</id><snippet>def get_user_choice(prompt, choices):
    while True:
        choice = raw_input(prompt)
        if choice in choices:
            return choice
        else:
            print 'choice must be in: {}'.format(choices)
</snippet></ROW><ROW><id>20261433</id><snippet>&gt;&gt;&gt; get_user_choice('choose an option in A, B, C: ', ['A', 'B', 'C'])
choose an option in A, B, C: A
'A'
&gt;&gt;&gt; get_user_choice('choose an option in A, B, C: ', ['A', 'B', 'C'])
choose an option in A, B, C: D
choice must be in: ['A', 'B', 'C']
choose an option in A, B, C: B
'B'
</snippet></ROW><ROW><id>20261460</id><snippet>root</snippet></ROW><ROW><id>20261460</id><snippet>root</snippet></ROW><ROW><id>20261460</id><snippet>loggers</snippet></ROW><ROW><id>20261595</id><snippet>__private()</snippet></ROW><ROW><id>20261595</id><snippet>class Child(Parent):
    def foo(self):
        self._protected()

    def bar(self):
        self._Parent__private()
</snippet></ROW><ROW><id>20261595</id><snippet>__spam</snippet></ROW><ROW><id>20261595</id><snippet>_Ham__spam</snippet></ROW><ROW><id>20261894</id><snippet>zeros</snippet></ROW><ROW><id>20261894</id><snippet>Zeros</snippet></ROW><ROW><id>20261894</id><snippet>np.Zeros</snippet></ROW><ROW><id>20261894</id><snippet>np.zeros</snippet></ROW><ROW><id>20261926</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split("[#$!.\s]+", "The# dog.is.yelling$at!Me to" )
['The', 'dog', 'is', 'yelling', 'at', 'Me', 'to']
</snippet></ROW><ROW><id>20261926</id><snippet>&gt;&gt;&gt; re.split("\W+", "The# dog.is.yelling$at!Me to" )
</snippet></ROW><ROW><id>20261945</id><snippet>#-*-coding:utf-8-*-

import datetime, time

def ts2string(ts, fmt="%Y-%m-%d %H:%M:%S"):
    dt = datetime.datetime.fromtimestamp(ts)
    return dt.strftime(fmt)

def string2ts(string, fmt="%Y-%m-%d %H:%M:%S"):
    dt = datetime.datetime.strptime(string, fmt)
    t_tuple = dt.timetuple()
    return int(time.mktime(t_tuple))

def test():
    ts = 1385629728

    string = ts2string(ts)
    print string

    ts = string2ts(string)
    print ts

if __name__ == '__main__':
    test()
</snippet></ROW><ROW><id>20262092</id><snippet>max(dateList)
</snippet></ROW><ROW><id>20262174</id><snippet>AssertionError</snippet></ROW><ROW><id>20262174</id><snippet># You can also use type(result) == uuid.UUID or result == -1
correctness = isinstance(result, uuid.UUID) or (isinstance(result, int) and result == -1)
self.assertTrue(correctness)
</snippet></ROW><ROW><id>20262365</id><snippet>&gt;&gt;&gt; df[(df['ID'] == 'p') | (df['ID'] == 'ul')]
</snippet></ROW><ROW><id>20262725</id><snippet>dicts = {}
inner_dict = {}
</snippet></ROW><ROW><id>20262725</id><snippet>with open("file#1.txt","r") as f:
</snippet></ROW><ROW><id>20262725</id><snippet>   for line, score in zip(sys.stdin, f):
</snippet></ROW><ROW><id>20262725</id><snippet>      d2  = ast.literal_eval(score) 
</snippet></ROW><ROW><id>20262725</id><snippet>      for k,v in d2.items(): 
         inner_dict = dicts.setdefault(k, {}) 
</snippet></ROW><ROW><id>20262725</id><snippet>         inner_dict['sscore !=0'] = v.get('sscore !=0') 
</snippet></ROW><ROW><id>20262725</id><snippet>      print k,dicts[k]['sscore !=0'],re.split("\s+", line.strip())[0]
</snippet></ROW><ROW><id>20262812</id><snippet>list.index</snippet></ROW><ROW><id>20262812</id><snippet>with open('test.csv', 'rb') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=',', quotechar='|') # open the csv file
    medianGoodPixels = [] #vector to pixels
    Lux = [] #vector to LUX
    sdVer = [] # vector to the version
    NewCsvTable = [] #will be a matrix with 3 cols, LUX, pixels, and version
    header = next(spamreader)  #Returns the header 
    lux_col, pixel_col, version_col = header.index('LUX'), header.index('pixel'),\
                                      header.index('version')

    #Now iterate over rest of the rows. 
    for row in spamreader:
        Lux.append(row[lux_col])
        sdVer.append(row[version_col])
        medianGoodPixels.append(row[pixel_col])  
</snippet></ROW><ROW><id>20262859</id><snippet>4 * q + r - t &lt; m * t</snippet></ROW><ROW><id>20262859</id><snippet>fo=open("pi.txt", "wb")

def make_pi(num_digits):
    q, r, t, k, m, x = 1, 0, 1, 1, 3, 3
    j = 0
    while True:
        if 4 * q + r - t &lt; m * t:
            fo.write(str(m))
            yield m
            q, r, t, k, m, x = 10*q, 10*(r-m*t), t, k, (10*(3*q+r))//t - 10*m, x
            j += 1
            if j % 1000 == 0:
                print("Count status: %s" % j)
        else:
            q, r, t, k, m, x = q*k, (2*q+r)*x, t*x, k+1, (q*(7*k+2)+r*x)//(t*x), x+2
        if j &gt;= num_digits:
            break

for i in make_pi(50000):
    pass

fo.close()
</snippet></ROW><ROW><id>20262942</id><snippet>if start_link == -1:
 return None, 0, None
</snippet></ROW><ROW><id>20263024</id><snippet>awk</snippet></ROW><ROW><id>20263024</id><snippet>awk '{for (i=4;i&lt;=NF;i++) print $1,$2,$3,$i}' file
chr1 762440 762981 SAMD11
chr1 858932 859148 KLHL17
chr1 858932 859148 SAMD11
chr1 858932 859148 NOC2L
chr1 859786 860145 KLHL17
chr1 859786 860145 SAMD11
chr1 859786 860145 NOC2L
chr1 890663 891747 KLHL17
chr1 890663 891747 NOC2L
chr1 890663 891747 SAMD11
chr1 890663 891747 HES4
</snippet></ROW><ROW><id>20263950</id><snippet>@app.route('/api/users/&lt;username&gt;/words/&lt;int:word_id&gt;', methods=['GET'])
def get_words(username):
     user = User.objects(username=username)
     word = [word for word user.words if word.word_id == word_id]
     if not word:
        return abort(404)
     return Response(word[0].to_json(sort_keys=False, indent=4),
                     mimetype='application/json')
</snippet></ROW><ROW><id>20263978</id><snippet>win32com</snippet></ROW><ROW><id>20263978</id><snippet>openpyxl</snippet></ROW><ROW><id>20263978</id><snippet>openpyxl</snippet></ROW><ROW><id>20264075</id><snippet>PermissionMixin</snippet></ROW><ROW><id>20264075</id><snippet>PermissionMixin</snippet></ROW><ROW><id>20264114</id><snippet>&gt;&gt;&gt; x='a=2, b=3'
&gt;&gt;&gt; args = dict(tuple(e.split('=')) for e in x.split(', '))
&gt;&gt;&gt; f(**args)
a 2
b 3
</snippet></ROW><ROW><id>20264137</id><snippet>django.utils.log.RequireDebugTrue</snippet></ROW><ROW><id>20264164</id><snippet>for d in range(1, n - 1):
    print(c + ' ' * (m - 2) + c)
</snippet></ROW><ROW><id>20264164</id><snippet>for d in range(1, n - 1):
    print(c, ' ' * (m - 2), c, sep='')
</snippet></ROW><ROW><id>20264164</id><snippet>n - 2</snippet></ROW><ROW><id>20264164</id><snippet>print(end='')</snippet></ROW><ROW><id>20264164</id><snippet>def print_frame(n, m, c):
    print(c * m)
    for i in range(1, n - 1):
        print(c, ' ' * (m - 2), c, sep='')
    print(c * m)
</snippet></ROW><ROW><id>20264164</id><snippet>&gt;&gt;&gt; def print_frame(n, m, c):
...     print(c * m)
...     for i in range(1, n - 1):
...         print(c, ' ' * (m - 2), c, sep='')
...     print(c * m)
... 
&gt;&gt;&gt; print_frame(5, 6, '*')
******
*    *
*    *
*    *
******
</snippet></ROW><ROW><id>20264344</id><snippet>python -m py_compile mymodule.py</snippet></ROW><ROW><id>20264542</id><snippet>search = "This is the line I'm looking for.\n"
with open("highscores.txt") as file:
    if any(line == search for line in file):
        print("Found it!")
    else:
        print("Move along.")
</snippet></ROW><ROW><id>20264589</id><snippet>def keyDownload(request, benutzername):
        benutzernameKey = benutzername +".key"
        fsock = open('/var/www/openvpn/examples/easy-rsa/2.0/keys/'+benutzernameKey, 'r')
        response = HttpResponse(fsock, mimetype='application/pgp-keys')
        response['Content-Disposition'] = "attachment; filename = %s " % (benutzernameKey)
        return response
</snippet></ROW><ROW><id>20264589</id><snippet>&gt;&gt;&gt; import urllib, mimetypes
&gt;&gt;&gt; url = urllib.pathname2url(filename)
&gt;&gt;&gt; print mimetypes.guess_type(url)
</snippet></ROW><ROW><id>20264710</id><snippet>y == 'n' or y =='no'</snippet></ROW><ROW><id>20264710</id><snippet>y == 'n' or 'no'</snippet></ROW><ROW><id>20264710</id><snippet>&gt;&gt;&gt; y = 'anything'
&gt;&gt;&gt; 
&gt;&gt;&gt; bool(y == 'n' or 'no')
True
</snippet></ROW><ROW><id>20264710</id><snippet>True</snippet></ROW><ROW><id>20264710</id><snippet>y == 'no'</snippet></ROW><ROW><id>20264710</id><snippet>'no'</snippet></ROW><ROW><id>20264710</id><snippet>True</snippet></ROW><ROW><id>20264710</id><snippet>None</snippet></ROW><ROW><id>20264710</id><snippet>False</snippet></ROW><ROW><id>20264710</id><snippet>0</snippet></ROW><ROW><id>20264710</id><snippet>''</snippet></ROW><ROW><id>20264710</id><snippet>[]</snippet></ROW><ROW><id>20264710</id><snippet>{}</snippet></ROW><ROW><id>20264710</id><snippet>()</snippet></ROW><ROW><id>20264710</id><snippet>False</snippet></ROW><ROW><id>20264710</id><snippet>if y.lower() in ('n', 'no')</snippet></ROW><ROW><id>20264710</id><snippet>lower()</snippet></ROW><ROW><id>20265001</id><snippet>None</snippet></ROW><ROW><id>20265001</id><snippet>return</snippet></ROW><ROW><id>20265001</id><snippet>def jobsinghana():
    site = "http://www.jobsinghana.com/jobs"
    hdr = {'User-Agent' : 'Mozilla/5.0'}
    req = urllib2.Request(site, headers=hdr)
    mayday = urllib2.urlopen(req)
    soup = BeautifulSoup(mayday)
    return map(str, soup.find_all('a', {'class' : 'hover'}))


def modernghana():
    site = "http://www.modernghana.com/GhanaHome/classifieds/list_classifieds.asp?    menu_id=7&amp;sub_menu_id=362&amp;gender=&amp;cat_id=173&amp;has_price=2"
    hdr = {'User-Agent' : 'Mozilla/5.0'}
    req = urllib2.Request(site, headers=hdr)
    jobpass = urllib2.urlopen(req)
    soup = BeautifulSoup(jobpass)
    jobs = soup.find_all('a', href = re.compile('show_classifieds'))
    result = []
    for a in jobs:
        header = a.parent.find_previous_sibling('h3').text
        a.string = header
        result.append(str(a))
    return result

jobsinghana_links = jobsinghana()
modernghana_links = modernghana()


with open('content.html', 'w') as alllinks:
    alllinks.write("\n".join(jobsinghana_links + modernghana_links))
</snippet></ROW><ROW><id>20265001</id><snippet>def read_existing():
    with open('content.html') as alllinks:
        return {line.strip() for line in alllinks}

existing = read_existing()
jobsinghana_links = jobsinghana(existing)
modernghana_links = modernghana(existing)
</snippet></ROW><ROW><id>20265001</id><snippet>existing</snippet></ROW><ROW><id>20265001</id><snippet>if link in existing:</snippet></ROW><ROW><id>20265008</id><snippet>ordering</snippet></ROW><ROW><id>20265008</id><snippet>order_by()</snippet></ROW><ROW><id>20265008</id><snippet>&gt;&gt;&gt; from myapp.models import *
&gt;&gt;&gt; a=MyModel.objects.all()
&gt;&gt;&gt; a.ordered
False
&gt;&gt;&gt; b=MyModel.objects.all().order_by()
&gt;&gt;&gt; b.ordered
False
&gt;&gt;&gt; c=MyModel.objects.all().order_by('id')
&gt;&gt;&gt; c.ordered
True
</snippet></ROW><ROW><id>20265131</id><snippet>&gt; config/
    settings.py
    production.py
    development.py
</snippet></ROW><ROW><id>20265131</id><snippet>RUNNING_MODE = "production"  # could also be "development", set manually

if ENVIRONMENT == "production":
    from production import *
elif ENVIRONMENT == "development":
    from development import *
</snippet></ROW><ROW><id>20265131</id><snippet>from config.settings import LOG_LEVEL
</snippet></ROW><ROW><id>20265193</id><snippet>i</snippet></ROW><ROW><id>20265193</id><snippet>noinline</snippet></ROW><ROW><id>20265193</id><snippet>noinline</snippet></ROW><ROW><id>20265193</id><snippet>./a.out 200000000 10 12 $n
</snippet></ROW><ROW><id>20265193</id><snippet>$n</snippet></ROW><ROW><id>20265193</id><snippet>0</snippet></ROW><ROW><id>20265193</id><snippet>2</snippet></ROW><ROW><id>20265193</id><snippet>min:    0.040655
median: 0.040656
max:    0.040658
</snippet></ROW><ROW><id>20265193</id><snippet>min:    0.040653
median: 0.040655
max:    0.040657
</snippet></ROW><ROW><id>20265193</id><snippet>min:    0.042349
median: 0.042351
max:    0.042352
</snippet></ROW><ROW><id>20265193</id><snippet>loadu_ps</snippet></ROW><ROW><id>20265193</id><snippet>load_ps</snippet></ROW><ROW><id>20265193</id><snippet>loadu_ps</snippet></ROW><ROW><id>20265193</id><snippet>movups</snippet></ROW><ROW><id>20265193</id><snippet>movups</snippet></ROW><ROW><id>20265270</id><snippet>for url in urllist:
    retry = 0
    while True: # retry request
        try:
            req = urllib.urlopen(url)
            resp_data = req.read() # in call read() network still processing
        except Exception as e: # TODO need more detailed handling
            if retry &gt; 3: # 3 this is serious problem. exit
                raise e
            retry += 1 # retry
        else:
            data = json.loads()
            req.close() # not needed
            break
</snippet></ROW><ROW><id>20265477</id><snippet>numpy.fliplr</snippet></ROW><ROW><id>20265477</id><snippet>&gt;&gt;&gt; a = np.arange(4).reshape(2,2) + 1
&gt;&gt;&gt; a
array([[1, 2],
       [3, 4]])
&gt;&gt;&gt; np.fliplr(a)
array([[2, 1],
       [4, 3]])
</snippet></ROW><ROW><id>20265477</id><snippet>a[:,::-1]</snippet></ROW><ROW><id>20265477</id><snippet>&gt;&gt;&gt; i = np.array([0, 2, 4, 3, 1])
&gt;&gt;&gt; a 
array([[10, 20, 30, 40, 50],
       [ 6,  7,  8,  9, 10]])
&gt;&gt;&gt; a[:, i]
array([[10, 30, 50, 40, 20],
       [ 6,  8, 10,  9,  7]])
</snippet></ROW><ROW><id>20265609</id><snippet>max_iter</snippet></ROW><ROW><id>20265710</id><snippet>x=np.array(range(1,11))</snippet></ROW><ROW><id>20265710</id><snippet>dtype</snippet></ROW><ROW><id>20265710</id><snippet>int64</snippet></ROW><ROW><id>20265710</id><snippet>dtype</snippet></ROW><ROW><id>20265710</id><snippet>x = np.array(range(1, 11), dtype=float)
</snippet></ROW><ROW><id>20265710</id><snippet>np.insert</snippet></ROW><ROW><id>20265710</id><snippet>dtype</snippet></ROW><ROW><id>20265710</id><snippet>dtype</snippet></ROW><ROW><id>20265710</id><snippet>np.append</snippet></ROW><ROW><id>20265710</id><snippet>np.concatenate</snippet></ROW><ROW><id>20265710</id><snippet>dtype</snippet></ROW><ROW><id>20265710</id><snippet>x</snippet></ROW><ROW><id>20265710</id><snippet>float</snippet></ROW><ROW><id>20265710</id><snippet>np.arange</snippet></ROW><ROW><id>20265710</id><snippet>x = np.arange(1, 11, dtype=float)
</snippet></ROW><ROW><id>20265779</id><snippet>for ftp_file in f.nlst():
    if ftp_file not in os.listdir("path_where_files_exist"):
        print('Downloading file: %s', ftp_file)
        f.retrbinary('RETR '+ ftp_file ,open(ftp_file,'wb').write,rest=0)
        f.quit()
</snippet></ROW><ROW><id>20265779</id><snippet>for ftp_file in f.nlst():
    for filename in os.listdir("path_where_files_exist"):
        if not (ftp_file == filename):
        #some code
</snippet></ROW><ROW><id>20265779</id><snippet>ftp_file</snippet></ROW><ROW><id>20265779</id><snippet>filename</snippet></ROW><ROW><id>20265779</id><snippet>ftp_file</snippet></ROW><ROW><id>20265779</id><snippet>filename</snippet></ROW><ROW><id>20265779</id><snippet>filename</snippet></ROW><ROW><id>20265779</id><snippet>ftp_file</snippet></ROW><ROW><id>20265848</id><snippet>-c</snippet></ROW><ROW><id>20265848</id><snippet>-i</snippet></ROW><ROW><id>20265848</id><snippet>$ python -i -c 'from math import *'
&gt;&gt;&gt; sin(pi/2)
1.0
</snippet></ROW><ROW><id>20265948</id><snippet>wins = [['x', 'x', 0, 'x'], ['x', 0, 0, 'x'], ['x', 'x', 'x', 'x']]

# Iterate over all sublists
for win in wins:
    # Iterate over all elements in list, and check if all equals x
    if all(i == 'x' for i in win):
        # If this is the case - write a message and break out of the loop
        print("Well done! You've won!")
        break
</snippet></ROW><ROW><id>20265948</id><snippet>if a and b and c and d == 'x'</snippet></ROW><ROW><id>20265948</id><snippet>if a is not False and
   b is not False and
   c is not False and
   d == 'x'
</snippet></ROW><ROW><id>20265948</id><snippet>if wins[0][0] == 'x' and wins[0][1] == 'x' and wins[0][2] == 'x' and wins[0][3] == 'x': 
</snippet></ROW><ROW><id>20265948</id><snippet>for sublist in wins:
    if sublist[0] == 'x' and sublist[1] == 'x' and sublist[2] == 'x' and sublist[3] == 'x':
        print("Well done! You've won!")
        break
</snippet></ROW><ROW><id>20265948</id><snippet>for sublist in wins:
    for item in sublist:
        if item != 'x'
            break
    else:
        print("Well done! You've won!")
        break
</snippet></ROW><ROW><id>20266107</id><snippet>DATABASES = {
    'default': {
        'NAME': 'my_database',
        'ENGINE': 'sqlserver_ado',
        'HOST': 'dbserver\\ss2008',
        'USER': '',
        'PASSWORD': '',
    }
}
</snippet></ROW><ROW><id>20266135</id><snippet>os.popen()</snippet></ROW><ROW><id>20266135</id><snippet>subprocess</snippet></ROW><ROW><id>20266135</id><snippet>import subprocess

with open('/tmp/somefile', 'w') as tmpfile:
    subprocess.call(['qry_db', '-value', 'x'], stdout=tmpfile, stderr=subprocess.DEVNULL)
</snippet></ROW><ROW><id>20266135</id><snippet>stderr</snippet></ROW><ROW><id>20266135</id><snippet>/dev/null</snippet></ROW><ROW><id>20266135</id><snippet>stdout</snippet></ROW><ROW><id>20266135</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>20266135</id><snippet>stderr=subprocess.DEVNULL</snippet></ROW><ROW><id>20266135</id><snippet>subprocess.DEVNULL</snippet></ROW><ROW><id>20266135</id><snippet>import subprocess
import os

with open('/tmp/somefile', 'w') as tmpfile, open(os.devnull) as devnull:
    subprocess.call(['qry_db', '-value', 'x'], stdout=tmpfile, stderr=devnull)
</snippet></ROW><ROW><id>20266160</id><snippet>module1.method</snippet></ROW><ROW><id>20266160</id><snippet>method</snippet></ROW><ROW><id>20266160</id><snippet>from module1 import *</snippet></ROW><ROW><id>20266160</id><snippet>import module1
import module2
</snippet></ROW><ROW><id>20266160</id><snippet>import header

header.module1.method() #make all the function calls via header module.
</snippet></ROW><ROW><id>20266160</id><snippet>import header as h
h.module1.method()
</snippet></ROW><ROW><id>20266174</id><snippet>    /// &lt;summary&gt;
    /// Creates a Jpeg image file drawing the given text and saves the file on give disk location.
    /// &lt;/summary&gt;
    /// &lt;param name="text"&gt;text which is to be draw in image&lt;/param&gt;
    /// &lt;param name="font"&gt;font is to be used for the text&lt;/param&gt;
    /// &lt;param name="textColor"&gt;color to be used for the text&lt;/param&gt;
    /// &lt;param name="backColor"&gt;background color to be used for the image&lt;/param&gt;
    /// &lt;param name="filename"&gt;filename with complete path where you want to save the output jpeg file.&lt;/param&gt;
    private static void DrawText(String text, Font font, Color textColor, Color backColor, string filename)
    {
        //first, create a dummy bitmap just to get a graphics object
        Image image = new Bitmap(1, 1);
        Graphics drawing = Graphics.FromImage(image);

        //measure the string to see how big the image needs to be
        SizeF textSize = drawing.MeasureString(text, font);

        //free up the dummy image and old graphics object
        image.Dispose();
        drawing.Dispose();

        //create a new image of the right size
        image = new Bitmap((int)textSize.Width, (int)textSize.Height);

        drawing = Graphics.FromImage(image);

        //paint the background
        drawing.Clear(backColor);

        //create a brush for the text
        Brush textBrush = new SolidBrush(textColor);

        drawing.DrawString(text, font, textBrush, 0, 0);

        drawing.Save();

        textBrush.Dispose();
        drawing.Dispose();

        image.Save(filename, ImageFormat.Jpeg);
    }
</snippet></ROW><ROW><id>20266174</id><snippet>    /// &lt;summary&gt;
    /// Merges two Jpeg images vertically
    /// &lt;/summary&gt;
    /// &lt;param name="inputJpeg1"&gt;filename with complete path of the first jpeg file.&lt;/param&gt;
    /// &lt;param name="inputJpeg2"&gt;filname with complete path of the second jpeg file.&lt;/param&gt;
    /// &lt;param name="outputJpeg"&gt;filename with complete path where you want to save the output jpeg file.&lt;/param&gt;
    private void MergeJpeg(string inputJpeg1, string inputJpeg2, string outputJpeg)
    {

        Image image1 = Image.FromFile(inputJpeg1);
        Image image2 = Image.FromFile(inputJpeg2);

        int width = Math.Max(image1.Width, image2.Width);
        int height = image1.Height + image2.Height;

        Bitmap outputImage = new Bitmap(width, height);
        Graphics graphics = Graphics.FromImage(outputImage);

        graphics.Clear(Color.Black);
        graphics.DrawImage(image1, new Point(0, 0));
        graphics.DrawImage(image2, new Point(0, image1.Height));

        graphics.Dispose();
        image1.Dispose();
        image2.Dispose();

        outputImage.Save(outputJpeg, System.Drawing.Imaging.ImageFormat.Jpeg);
        outputImage.Dispose();
    }
</snippet></ROW><ROW><id>20266174</id><snippet>    var inputFile = @"c:\inputImage.jpg";
    var outputFile = @"c:\outputImage.jpg";
    Bitmap bitmap = null;

    //Open file in read moad and create a stream and using that stream create a bitmap.
    using (var stream = File.OpenRead(inputFile))
    {
        bitmap = (Bitmap)Bitmap.FromStream(stream);
    }

    using (bitmap)
    using (var graphics = Graphics.FromImage(bitmap))
    using (var font = new Font("Arial", 20, FontStyle.Regular))
    {
        //Draw Title in the existing jpeg file at coordinates 0,0 these coordinates can be changed as per your need.
        graphics.DrawString("Title ", font, Brushes.Red, 0, 0);

        //Save the updated file.
        bitmap.Save(outputFile);
    }
</snippet></ROW><ROW><id>20266206</id><snippet>runner = unittest.TextTestRunner()
itersuite = unittest.TestLoader().loadTestsFromTestCase(MyTestClass)
runner.run(itersuite)
</snippet></ROW><ROW><id>20266206</id><snippet>unittest.main()
</snippet></ROW><ROW><id>20266224</id><snippet>x = [1,10,5,4]
x = map(lambda y: y+1, x)
</snippet></ROW><ROW><id>20266442</id><snippet>proc = subprocess.Popen(['python', testRunner.tsPyFile, test], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
stdoutValue = proc.communicate()[0]
</snippet></ROW><ROW><id>20267053</id><snippet>xxx</snippet></ROW><ROW><id>20267053</id><snippet>self.xxx</snippet></ROW><ROW><id>20267053</id><snippet>xxx = False</snippet></ROW><ROW><id>20267214</id><snippet>test3 =((154L, u'SG'), (15L, u'SG3'), (1564L, u'SG'))

print(numpy.asarray(test3, dtype='&lt;U4'))

[[u'154' u'SG']
 [u'15' u'SG3']
 [u'1564' u'SG']]
</snippet></ROW><ROW><id>20267359</id><snippet>row = map(lambda x: float(x.replace(',','.')), row)
</snippet></ROW><ROW><id>20267359</id><snippet># Convert the generator to a list (bad option)
row = list(row)

# Or use a list comprehension
row = [float(x.replace(',','.')) for x in row]
</snippet></ROW><ROW><id>20267635</id><snippet>array_1[array_1.index(item)+1
</snippet></ROW><ROW><id>20267635</id><snippet>array_1 = ['A','b','A','c' ]

array_2 = []
i = 0
for item in array_1:

if array_1[i] == array_1[i].upper():
    array_2.append(array_1[i+1]+array_1[i])
i = i + 1
</snippet></ROW><ROW><id>20267639</id><snippet>.toordinal()</snippet></ROW><ROW><id>20267639</id><snippet>row</snippet></ROW><ROW><id>20267639</id><snippet>def xToFloat(x):
    for i, row in enumerate(x):
        day, month, year = row.split('/')
        row = date(int(year), int(month), int(day)).toordinal()
        x[i] = row
</snippet></ROW><ROW><id>20267639</id><snippet>datetime.strptime()</snippet></ROW><ROW><id>20267639</id><snippet>int()</snippet></ROW><ROW><id>20267639</id><snippet>[datetime.strptime(dt, '%d/%m/%Y').toordinal() for dt in x]
</snippet></ROW><ROW><id>20267639</id><snippet>x</snippet></ROW><ROW><id>20267639</id><snippet>x[:] = [datetime.strptime(dt, '%d/%m/%Y').toordinal() for dt in x]
</snippet></ROW><ROW><id>20267685</id><snippet>os.listdir</snippet></ROW><ROW><id>20267685</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; basedir = 'tmp/example'
&gt;&gt;&gt; names = os.listdir(basedir)
&gt;&gt;&gt; names
['a', 'b', 'c']
</snippet></ROW><ROW><id>20267685</id><snippet>basedir</snippet></ROW><ROW><id>20267685</id><snippet>&gt;&gt;&gt; paths = [os.path.join(basedir, name) for name in names]
&gt;&gt;&gt; paths
['tmp/example/a', 'tmp/example/b', 'tmp/example/c']
</snippet></ROW><ROW><id>20267685</id><snippet>&gt;&gt;&gt; sizes = [(path, os.stat(path).st_size) for path in paths]
&gt;&gt;&gt; sizes
[('tmp/example/a', 0), ('tmp/example/b', 0), ('tmp/example/c', 0)]
</snippet></ROW><ROW><id>20267685</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>20267685</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; grouped = collections.defaultdict(list)
&gt;&gt;&gt; for path, size in sizes:
...     grouped[size].append(path)
... 
&gt;&gt;&gt; grouped
defaultdict(&lt;type 'list'&gt;, {0: ['tmp/example/a', 'tmp/example/b', 'tmp/example/c']})
</snippet></ROW><ROW><id>20267685</id><snippet>&gt;&gt;&gt; open_files = [open(path) for path in grouped[0]]
</snippet></ROW><ROW><id>20267918</id><snippet>justCreatedDocument = Document()</snippet></ROW><ROW><id>20267918</id><snippet>save()</snippet></ROW><ROW><id>20267918</id><snippet>justCreatedDocument = oldDocument</snippet></ROW><ROW><id>20268355</id><snippet>P y t h o n
0 1 2 3 4 5
</snippet></ROW><ROW><id>20268355</id><snippet>-1</snippet></ROW><ROW><id>20268355</id><snippet>-2</snippet></ROW><ROW><id>20268355</id><snippet> P  y  t  h  o  n
-6 -5 -4 -3 -2 -1
</snippet></ROW><ROW><id>20268355</id><snippet>find</snippet></ROW><ROW><id>20268355</id><snippet>"Python".find("y", beg=1, end=-2)
</snippet></ROW><ROW><id>20268478</id><snippet>cimport my_module</snippet></ROW><ROW><id>20268478</id><snippet>my_module</snippet></ROW><ROW><id>20268478</id><snippet>import my_module</snippet></ROW><ROW><id>20268478</id><snippet>my_module</snippet></ROW><ROW><id>20268478</id><snippet>cimport numpy as np
</snippet></ROW><ROW><id>20268478</id><snippet>import numpy as np
</snippet></ROW><ROW><id>20268478</id><snippet>np.array</snippet></ROW><ROW><id>20268478</id><snippet>np.linspace</snippet></ROW><ROW><id>20268481</id><snippet>collections.Counter</snippet></ROW><ROW><id>20268481</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; intersection = Counter( [2,3,3,4,4,5] ) &amp; Counter( [0, 2, 2, 3, 3, 4, 6, 8] )
&gt;&gt;&gt; intersection
Counter({3: 2, 2: 1, 4: 1})
</snippet></ROW><ROW><id>20268481</id><snippet>scoreIn</snippet></ROW><ROW><id>20268481</id><snippet>sum( intersection.values() )</snippet></ROW><ROW><id>20268481</id><snippet>Counter</snippet></ROW><ROW><id>20268481</id><snippet>Counter</snippet></ROW><ROW><id>20268481</id><snippet>def common_elements( static_counter, dynamic_sorted_list ):
    last = None # previous element in the dynamic list
    count = 0 # count seen so far for this element in the dynamic list

    total_count = 0 # total common elements seen, eventually the return value

    for x in dynamic_sorted_list:
        # since the list is sorted, if there's more than one element they
        # will be consecutive.
        if x == last:
            # one more of the same as the previous  element

            # all we need to do is increase the count
            count += 1
        else:
            # this is a new element that we haven't seen before.

            # first "flush out" the current count we've been keeping.
            #   - count is the number of times it occurred in the dynamic list
            #   - static_counter[ last ] is the number of times it occurred in
            #       the static list (the Counter class counted this for us)
            # thus the number of occurrences the two have in common is the
            # smaller of these numbers. (Note that unlike a normal dictionary,
            # which would raise KeyError, a Counter will return zero if we try
            # to look up a key that isn't there at all.)
            total_count += min( static_counter[ last ], count )

            # now set count and last to the new element, starting a new run
            count = 1
            last = x

    if count &gt; 0:
        # since we only "flushed" above once we'd iterated _past_ an element,
        # the last unique value hasn't been counted. count it now.
        total_count += min( static_counter[ last ], count )

    return total_count
</snippet></ROW><ROW><id>20268481</id><snippet>Counter</snippet></ROW><ROW><id>20268481</id><snippet>Counter</snippet></ROW><ROW><id>20268481</id><snippet>static_counter[ x ]</snippet></ROW><ROW><id>20268481</id><snippet>x</snippet></ROW><ROW><id>20268481</id><snippet>Counter</snippet></ROW><ROW><id>20268481</id><snippet>Counter</snippet></ROW><ROW><id>20268481</id><snippet>Counter</snippet></ROW><ROW><id>20268481</id><snippet>scoreWalk</snippet></ROW><ROW><id>20268481</id><snippet>scoreWalk( [1,1,3], [1,1,2] )</snippet></ROW><ROW><id>20268481</id><snippet>Counter</snippet></ROW><ROW><id>20268481</id><snippet>scoreWalk</snippet></ROW><ROW><id>20269033</id><snippet>driver</snippet></ROW><ROW><id>20269033</id><snippet>from selenium.webdriver.common.by import By
import selenic.util

util = selenic.util.Util(driver)

# This goes through util and uses the explicit wait set by util.
foo = util.find_element((By.CSS_SELECTOR, "..."))

# For special cases that take longer to give results.
with util.local_timeout(10):
    # The timeout is set to 10 for calls in this with block.
    bar = util.find_element(...)
# The timeout is restored to what it was just before the with.
</snippet></ROW><ROW><id>20269033</id><snippet>parent = foo.find_element_by_xpath("..")</snippet></ROW><ROW><id>20269033</id><snippet>find_elements</snippet></ROW><ROW><id>20269033</id><snippet>find_elements</snippet></ROW><ROW><id>20269298</id><snippet>SELECT * FROM table WHERE field LIKE "string%"
</snippet></ROW><ROW><id>20269298</id><snippet>q = ses.query(Table).filter(Table.fullFilePath.like('path%')).all()
</snippet></ROW><ROW><id>20269424</id><snippet># Change xi, ti in to 2D arrays
    xi,ti = np.meshgrid(xi,ti)
</snippet></ROW><ROW><id>20269424</id><snippet>ti,xi = np.meshgrid(ti,xi)
</snippet></ROW><ROW><id>20269424</id><snippet>ax3.plot_surface(xi, ti, u_int, cmap=cm.coolwarm)
</snippet></ROW><ROW><id>20269424</id><snippet>ax3.plot_surface(ti, xi, u_int, cmap=cm.coolwarm)
</snippet></ROW><ROW><id>20269570</id><snippet>int</snippet></ROW><ROW><id>20269570</id><snippet>float</snippet></ROW><ROW><id>20269570</id><snippet>1</snippet></ROW><ROW><id>20269570</id><snippet>float</snippet></ROW><ROW><id>20269570</id><snippet>int</snippet></ROW><ROW><id>20269570</id><snippet>.</snippet></ROW><ROW><id>20269570</id><snippet>float</snippet></ROW><ROW><id>20269570</id><snippet>_</snippet></ROW><ROW><id>20269570</id><snippet>float</snippet></ROW><ROW><id>20269570</id><snippet>1.</snippet></ROW><ROW><id>20269570</id><snippet>float</snippet></ROW><ROW><id>20269570</id><snippet>_</snippet></ROW><ROW><id>20269570</id><snippet>__class__</snippet></ROW><ROW><id>20269570</id><snippet>123abc</snippet></ROW><ROW><id>20269570</id><snippet>123</snippet></ROW><ROW><id>20269570</id><snippet>abc</snippet></ROW><ROW><id>20269570</id><snippet>[FloatLiteral: '1.0'] [Identifier: '__class__']
</snippet></ROW><ROW><id>20269570</id><snippet>123abc</snippet></ROW><ROW><id>20269570</id><snippet>a</snippet></ROW><ROW><id>20269570</id><snippet>abc</snippet></ROW><ROW><id>20269570</id><snippet>123</snippet></ROW><ROW><id>20269570</id><snippet>1</snippet></ROW><ROW><id>20269570</id><snippet>int</snippet></ROW><ROW><id>20269570</id><snippet>float</snippet></ROW><ROW><id>20269570</id><snippet>int</snippet></ROW><ROW><id>20269570</id><snippet>.</snippet></ROW><ROW><id>20269570</id><snippet>float</snippet></ROW><ROW><id>20269570</id><snippet>int</snippet></ROW><ROW><id>20269570</id><snippet>float</snippet></ROW><ROW><id>20269570</id><snippet>.</snippet></ROW><ROW><id>20269570</id><snippet>.</snippet></ROW><ROW><id>20269570</id><snippet>float</snippet></ROW><ROW><id>20269570</id><snippet>int</snippet></ROW><ROW><id>20269570</id><snippet>float</snippet></ROW><ROW><id>20269570</id><snippet>E</snippet></ROW><ROW><id>20269570</id><snippet>j</snippet></ROW><ROW><id>20269570</id><snippet>float</snippet></ROW><ROW><id>20269570</id><snippet>.</snippet></ROW><ROW><id>20269570</id><snippet>float</snippet></ROW><ROW><id>20269570</id><snippet>[FloatLiteral: '1.0'] [Operator: '.'] [Identifier: '__class__']
</snippet></ROW><ROW><id>20269570</id><snippet>string</snippet></ROW><ROW><id>20269570</id><snippet>1 .__class__
</snippet></ROW><ROW><id>20269570</id><snippet>[IntLiteral: '1'] [Operator: '.'] [Identifier: '__class__']
</snippet></ROW><ROW><id>20269570</id><snippet>int</snippet></ROW><ROW><id>20269570</id><snippet>(1).__class__
</snippet></ROW><ROW><id>20269570</id><snippet>[Operator: '('] [IntLiteral: '1'] [Operator: ')'] [Operator: '.'] [Identifier: '__class__']
</snippet></ROW><ROW><id>20269570</id><snippet>1..__class__ # =&gt; &lt;type 'float'&gt;
</snippet></ROW><ROW><id>20269570</id><snippet>float</snippet></ROW><ROW><id>20269570</id><snippet>.</snippet></ROW><ROW><id>20269598</id><snippet>comp_id</snippet></ROW><ROW><id>20269598</id><snippet>id1</snippet></ROW><ROW><id>20269598</id><snippet>url(r'companies/(?P&lt;pdf&gt;\w+)/buy/?$',views.buy)
</snippet></ROW><ROW><id>20269773</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>20269773</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; mystr = '[[1, 2, 3], [4, 5, 6]]'
&gt;&gt;&gt; x = literal_eval(mystr)
&gt;&gt;&gt; x
[[1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; type(x)
&lt;type 'list'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20269949</id><snippet>import pytest

def pytest_generate_tests(metafunc):
    idlist = []
    argvalues = []
    for scenario in metafunc.cls.scenarios:
        idlist.append(scenario[0])
        items = scenario[1].items()
        argnames = [x[0] for x in items]
        argvalues.append(([x[1] for x in items]))
    metafunc.parametrize(argnames, argvalues, ids=idlist, scope="class")

scenario1 = ('itemNo = 0', {'itemNo': 0})
scenario2 = ('itemNo = 11', {'itemNo': 11})
scenario3 = ('itemNo = 33', {'itemNo': 33})

class TestSeries:
    scenarios = [scenario1, scenario2, scenario3]

    def test_greater_than_30(self, itemNo):
        assert (itemNo &gt; 30), "not greather than 30"
    def test_lesser_than_30(self, itemNo):
        assert (itemNo &lt; 30), "not lesser thant 30"
    def test_modulo_2(self, itemNo):
        assert (itemNo % 2) == 0, "not divisible by 2"
</snippet></ROW><ROW><id>20269949</id><snippet>$ py.test -v
============ test session starts ==============================================
platform linux2 -- Python 2.7.4 -- pytest-2.4.2 -- /home/jose/.virtualenvs/pytest1/bin/python
collected 9 items 

test_first.py:23: TestSeries.test_greater_than_30[itemNo = 0] FAILED
test_first.py:25: TestSeries.test_lesser_than_30[itemNo = 0] PASSED
test_first.py:27: TestSeries.test_modulo_2[itemNo = 0] PASSED
test_first.py:23: TestSeries.test_greater_than_30[itemNo = 11] FAILED
test_first.py:25: TestSeries.test_lesser_than_30[itemNo = 11] PASSED
test_first.py:27: TestSeries.test_modulo_2[itemNo = 11] FAILED
test_first.py:23: TestSeries.test_greater_than_30[itemNo = 33] PASSED
test_first.py:25: TestSeries.test_lesser_than_30[itemNo = 33] FAILED
test_first.py:27: TestSeries.test_modulo_2[itemNo = 33] FAILED
</snippet></ROW><ROW><id>20270042</id><snippet>axis</snippet></ROW><ROW><id>20270042</id><snippet>axis</snippet></ROW><ROW><id>20270042</id><snippet>np.apply_along_axis</snippet></ROW><ROW><id>20270042</id><snippet>numpy.count_nonzero</snippet></ROW><ROW><id>20270042</id><snippet>import numpy as np

arr = np.eye(3)
np.apply_along_axis(np.count_nonzero, 0, arr)
</snippet></ROW><ROW><id>20270093</id><snippet>filename = os.path.join("C:\path\to\Sales Packs", filename)
os.rename(filename, filename[0:11]+accName+".xlsx")
</snippet></ROW><ROW><id>20270343</id><snippet>&gt;cat main.cpp
int a()
{
  int p = 0;
  p = p +1;
  return  p;
}

int b()
{
  return a();
}

int c()
{
  return a();
}

int main()
{
  c();
  b();
  a();
  return 0;
}
</snippet></ROW><ROW><id>20270343</id><snippet>&gt;cat my_check.gdb
b main.cpp:20
b main.cpp:21
b b
source my_check.py
r
q
</snippet></ROW><ROW><id>20270343</id><snippet>def my_breakpoint_handler (event):
  if (isinstance(event, gdb.BreakpointEvent)):
    print event.breakpoint.location
    if event.breakpoint.location == "b":
        gdb.write("Breakpoint in b()\n")
        gdb.execute("bt")
    elif event.breakpoint.location == "main.cpp:20":
        gdb.write("Breakpoint in main.cpp:20\n")
        gdb.execute("info frame")
    elif event.breakpoint.location == "main.21":
        gdb.write("Breakpoint in main.cpp:21\n")
        gdb.write("some info")
    else:
      pass

    gdb.execute("c")

gdb.events.stop.connect(my_breakpoint_handler)
</snippet></ROW><ROW><id>20270343</id><snippet>&gt;gdb -q -x my_check.gdb a.out
Reading symbols from /import/home/sergey.kurenkov/src/linux.x64.6.0/tests/test.breakpoint/a.out...done.
Breakpoint 1 at 0x40056a: file main.cpp, line 20.
Breakpoint 2 at 0x40056f: file main.cpp, line 21.
Breakpoint 3 at 0x400554: file main.cpp, line 10.

Breakpoint 1, main () at main.cpp:20
20        c();
main.cpp:20
Breakpoint in main.cpp:20
Stack level 0, frame at 0x7fffffffe0d0:
 rip = 0x40056a in main (main.cpp:20); saved rip 0x3c4121ecdd
 source language c++.
 Arglist at 0x7fffffffe0c0, args:
 Locals at 0x7fffffffe0c0, Previous frame's sp is 0x7fffffffe0d0
 Saved registers:
  rbp at 0x7fffffffe0c0, rip at 0x7fffffffe0c8

Breakpoint 2, main () at main.cpp:21
21        b();
main.cpp:21

Breakpoint 3, b () at main.cpp:10
10        return a();
b
Breakpoint in b()
#0  b () at main.cpp:10
#1  0x0000000000400574 in main () at main.cpp:21
[Inferior 1 (process 20798) exited normally]
</snippet></ROW><ROW><id>20270343</id><snippet>&gt;cat my_check2.py
class MyBreakpoint (gdb.Breakpoint):
        def stop (self):
          print self.location
          if self.location == "b":
            gdb.write("Breakpoint in b()\n")
            gdb.execute("bt")
          elif self.location == "main.cpp:20":
            gdb.write("Breakpoint in main.cpp:20\n")
            gdb.execute("info frame")
          elif self.location == "main.21":
            gdb.write("Breakpoint in main.cpp:21\n")
          return False



MyBreakpoint("main.cpp:20")
MyBreakpoint("main.cpp:21")
MyBreakpoint("b")
gdb.execute("r")
gdb.execute("q")
</snippet></ROW><ROW><id>20270343</id><snippet>&gt;gdb -q -x my_check2.py a.out
Reading symbols from /import/home/sergey.kurenkov/src/linux.x64.6.0/tests/test.breakpoint/a.out...done.
Breakpoint 1 at 0x40056a: file main.cpp, line 20.
Breakpoint 2 at 0x40056f: file main.cpp, line 21.
Breakpoint 3 at 0x400554: file main.cpp, line 10.
main.cpp:20
Breakpoint in main.cpp:20
Stack level 0, frame at 0x7fffffffe0d0:
 rip = 0x40056a in main (main.cpp:20); saved rip 0x3c4121ecdd
 source language c++.
 Arglist at 0x7fffffffe0c0, args:
 Locals at 0x7fffffffe0c0, Previous frame's sp is 0x7fffffffe0d0
 Saved registers:
  rbp at 0x7fffffffe0c0, rip at 0x7fffffffe0c8
main.cpp:21
b
Breakpoint in b()
#0  b () at main.cpp:10
#1  0x0000000000400574 in main () at main.cpp:21
[Inferior 1 (process 27434) exited normally]
</snippet></ROW><ROW><id>20270490</id><snippet>export PYTHONPATH=/path/to/folder/with/manage.py:$PYTHONPATH
</snippet></ROW><ROW><id>20270490</id><snippet>manage.py</snippet></ROW><ROW><id>20270490</id><snippet>ram</snippet></ROW><ROW><id>20270490</id><snippet>manage.py</snippet></ROW><ROW><id>20270490</id><snippet>export DJANGO_SETTINGS_MODULE='ram.settings'
</snippet></ROW><ROW><id>20270490</id><snippet>django-admin.py runserver --settings='ram.settings'
</snippet></ROW><ROW><id>20270526</id><snippet>import inspect, dis

def expecting():
    """Return how many values the caller is expecting"""
    f = inspect.currentframe()
    f = f.f_back.f_back
    c = f.f_code
    i = f.f_lasti
    bytecode = c.co_code
    instruction = ord(bytecode[i + 3])
    if instruction == dis.opmap['UNPACK_SEQUENCE']:
        howmany = ord(bytecode[i + 4])
        return howmany
    elif instruction == dis.opmap['POP_TOP']:
        return 0
    return 1


def f(n):
    howmany = expecting()
    a = n * n
    b = a + 1
    if howmany == 1:
        return b
    else:
        return b, a

a = f(1)
print a # this prints 2

a, b = f(1)
print a # this prints 2 
print b # this prints 1
</snippet></ROW><ROW><id>20270637</id><snippet>raw_input()</snippet></ROW><ROW><id>20270637</id><snippet>input = raw_input("Type 1 for encryption, 2 for decryption, or 3 for information."
</snippet></ROW><ROW><id>20270637</id><snippet>input = raw_input("Type 1 for encryption, 2 for decryption, or 3 for information.")
</snippet></ROW><ROW><id>20270705</id><snippet>self.v.get()</snippet></ROW><ROW><id>20270705</id><snippet>????</snippet></ROW><ROW><id>20270705</id><snippet>r = requests.get("http://api.wunderground.com/api/ab78bcbaca641959/forecast/q/Sweden/" + self.v.get() + ".json")
</snippet></ROW><ROW><id>20270705</id><snippet>self.s = self.v.get()</snippet></ROW><ROW><id>20270975</id><snippet>mock_calls</snippet></ROW><ROW><id>20270975</id><snippet>mock_calls[1]</snippet></ROW><ROW><id>20271014</id><snippet>b[0, 2]</snippet></ROW><ROW><id>20271014</id><snippet>b[1, 3]</snippet></ROW><ROW><id>20271014</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; b = np.array([[2,3,4,5], [7,6,8,10]])
&gt;&gt;&gt; indices = np.array([2, 3])
&gt;&gt;&gt; b[np.arange(len(indices)), indices]
array([ 4, 10])
</snippet></ROW><ROW><id>20271085</id><snippet>for val in IP_list.itervalues():
    val[0] = ID_list.get(val[0], val[0])
</snippet></ROW><ROW><id>20271085</id><snippet>IP_list</snippet></ROW><ROW><id>20271085</id><snippet>ID_list</snippet></ROW><ROW><id>20271085</id><snippet>{'ip2': ['id2', 'string2'], 'ip3': ['id2', 'string3'], 'ip1': ['id1', 'string1']}
</snippet></ROW><ROW><id>20271140</id><snippet>model</snippet></ROW><ROW><id>20271140</id><snippet>&lt;STREAMING_ITEM_INSTANCE&gt;.content_type.model
</snippet></ROW><ROW><id>20271140</id><snippet>from testso_app.models import StreamItem
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
a = User.objects.all()[0]
cctt = ContentType.objects.all()
si = StreamItem(user=a, content_type=cctt[0], object_id=1)
si.content_type.model
</snippet></ROW><ROW><id>20271140</id><snippet>u'author'</snippet></ROW><ROW><id>20271262</id><snippet>sender.py</snippet></ROW><ROW><id>20271262</id><snippet>sender.bind</snippet></ROW><ROW><id>20271262</id><snippet>sender.connect</snippet></ROW><ROW><id>20271303</id><snippet>avg</snippet></ROW><ROW><id>20271303</id><snippet>average</snippet></ROW><ROW><id>20271303</id><snippet>alphabet</snippet></ROW><ROW><id>20271303</id><snippet>x,y</snippet></ROW><ROW><id>20271303</id><snippet>average[x] == avg[y]</snippet></ROW><ROW><id>20271303</id><snippet>x,y</snippet></ROW><ROW><id>20271303</id><snippet>(0, 0)
(1, 1)
(2, 2)
(3, 3)
(4, 4)
(5, 5)
(6, 6)
(7, 7)
(8, 8)
(9, 9)
(10, 10)
(11, 11)
(12, 12)
(13, 13)
(14, 14)
(15, 15)
(16, 16)
(17, 17)
(18, 18)
(19, 19)
(20, 20)
(21, 21)
(22, 22)
(23, 23)
(24, 24)
(25, 25)
(26, 26)
</snippet></ROW><ROW><id>20271303</id><snippet>average</snippet></ROW><ROW><id>20271303</id><snippet>average = [27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
</snippet></ROW><ROW><id>20271303</id><snippet>if average[x] == avg[y]:
</snippet></ROW><ROW><id>20271303</id><snippet>if x == y:
</snippet></ROW><ROW><id>20271565</id><snippet>myValueList = [obj.prop1 for obj in myList]
</snippet></ROW><ROW><id>20271565</id><snippet>operator.attrgetter</snippet></ROW><ROW><id>20271565</id><snippet>map</snippet></ROW><ROW><id>20271565</id><snippet>myValueList = map(operator.attrgetter('prop1'), myList)  # use list(map(...)) in python3.x
</snippet></ROW><ROW><id>20271832</id><snippet>.append()</snippet></ROW><ROW><id>20271832</id><snippet>T_1 = []

for a in A_1:
    nested = []
    T_1.append(nested) 
    for y in y_1:
        nested.append(T0_1 + ((q0_1 / k_1) * y) - (a / (2 * k_1)) * y**2))
</snippet></ROW><ROW><id>20271832</id><snippet>A_1</snippet></ROW><ROW><id>20271832</id><snippet>y_1</snippet></ROW><ROW><id>20271832</id><snippet>None</snippet></ROW><ROW><id>20271832</id><snippet>T_1 = [[None] * len(y_1) for _ in range(len(A_1))]

for i, a in enumerate(A_1):
    for j, y in enumerate(y_1):
        T_1[i][j] = T0_1 + ((q0_1 / k_1) * y) - (a / (2 * k_1)) * y**2))
</snippet></ROW><ROW><id>20271832</id><snippet>enumerate()</snippet></ROW><ROW><id>20271832</id><snippet>T_1 = [[T0_1 + ((q0_1 / k_1) * y) - ((a / (2 * k_1)) * y**2) for i in y_1] for a in A_1]
</snippet></ROW><ROW><id>20271832</id><snippet>[expression for variable in iterable]</snippet></ROW><ROW><id>20271832</id><snippet>A_1</snippet></ROW><ROW><id>20271832</id><snippet>a</snippet></ROW><ROW><id>20271832</id><snippet>y_1</snippet></ROW><ROW><id>20271832</id><snippet>list.append()</snippet></ROW><ROW><id>20272274</id><snippet>from flask_wtf import Form
from wtforms import SelectField

class Test(Form):
    name = SelectField('Name')
</snippet></ROW><ROW><id>20272274</id><snippet>from flask import Blueprint,session,render_template
from form import Test
our = Blueprint('our',__name__)
@our.route('/')
def index():
    form = Test()
    #session['name'] = 'hedi'
    if session.get('name').lower() == "morteza":
        form.name.choices = ((1,'mori'),(2,'hedi'))
    else:
        form.name.choices = ((1,'you'))
    return render_template('index.html',form=form)
    #return str(session.get('name'))
</snippet></ROW><ROW><id>20272335</id><snippet>numpy.insert</snippet></ROW><ROW><id>20272335</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; arr = np.array(tableData)
&gt;&gt;&gt; np.insert(arr, (2, 4), None, axis=1)
array([[-27.37,  36.61,    nan,   8.9 , -11.2 ,    nan, -36.03, -42.34],
       [ 16.83, -33.45,    nan,  -5.15,  12.9 ,    nan, -48.6 ,  -8.7 ],
       [-19.73,   2.64,    nan,   7.21,  24.16,    nan,  18.38,  20.47],
       [-31.05,  15.07,    nan,  42.69, -32.13,    nan, -36.02,  42.31],
       [ 15.18,  30.54,    nan, -47.31,  48.38,    nan,  31.6 ,  -1.98]])
</snippet></ROW><ROW><id>20272539</id><snippet>return render_template('index.html')
</snippet></ROW><ROW><id>20272539</id><snippet>return Response('OK')
</snippet></ROW><ROW><id>20272539</id><snippet>    success: function(data) {
        console.log('Success!');
    },
</snippet></ROW><ROW><id>20272539</id><snippet>if (data == 'OK') {
  alert ('YAY, FILE UPLOADED');
};
</snippet></ROW><ROW><id>20272645</id><snippet>ceasar</snippet></ROW><ROW><id>20272645</id><snippet>sentence = input('Please Enter a Sentence: ')
number   = input('Please Enter a Number: ')

shift   = int(number)
letters = list(sentence)
cipher  = '' 

ceasar = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']

for letter in letters:
    if letter in ceasar:
        oldindex = ceasar.index(letter)
        newindex = (oldindex + shift) % len(ceasar)
        newletter = ceasar[newindex]
    else:
        newletter = letter

    print(letter, end="")
    cipher += newletter
</snippet></ROW><ROW><id>20272786</id><snippet>raw_input</snippet></ROW><ROW><id>20272786</id><snippet>C = calc()

Input = int (raw_input ("Enter the choice:"))

if Input not in [1,2,3,4]:
    print "Its not avaliable try again"
    exit ()
</snippet></ROW><ROW><id>20272786</id><snippet>try/except</snippet></ROW><ROW><id>20272786</id><snippet>C = calc()
try:
    Input = int (raw_input ("Enter the choice:"))
except ValueError:
    print "Wrong input"
    exit()

if Input not in [1,2,3,4]:
    print "Its not avaliable try again"
    exit ()
</snippet></ROW><ROW><id>20272786</id><snippet>input</snippet></ROW><ROW><id>20272786</id><snippet>class Calc</snippet></ROW><ROW><id>20272841</id><snippet>def __str__</snippet></ROW><ROW><id>20273062</id><snippet>0.17</snippet></ROW><ROW><id>20273062</id><snippet>0,17</snippet></ROW><ROW><id>20273062</id><snippet>range</snippet></ROW><ROW><id>20273062</id><snippet>TypeError</snippet></ROW><ROW><id>20273272</id><snippet>with open(inputfilename) as ifh:
    for line in ifh:
        if line.startswith('for(') and line.endswith(';\n'):
            line = line.rstrip('\n') + next(ifh).rstrip('\n') + next(ifh)
</snippet></ROW><ROW><id>20273272</id><snippet>next()</snippet></ROW><ROW><id>20273272</id><snippet>ifh</snippet></ROW><ROW><id>20273272</id><snippet>&gt;&gt;&gt; lst = [1, 2, 3, 4]
&gt;&gt;&gt; lst_iter = iter(lst)
&gt;&gt;&gt; for i in lst_iter:
...     print i
...     if i == 2:
...         print 'skipping ahead to', next(lst_iter)
...
1
2
skipping ahead to 3
4
</snippet></ROW><ROW><id>20273272</id><snippet>next()</snippet></ROW><ROW><id>20273272</id><snippet>lst_iter</snippet></ROW><ROW><id>20273272</id><snippet>for</snippet></ROW><ROW><id>20273272</id><snippet>fileinput</snippet></ROW><ROW><id>20273272</id><snippet>import sys
import fileinput

for line in fileinput.input(inputfilename):
    if line.startswith('for(') and line.endswith(';'):
        line = line.rstrip('\n') + next(ifh).rstrip('\n') + next(ifh)
    sys.stdout.write(line)
</snippet></ROW><ROW><id>20273272</id><snippet>from inplace import inplace

with inplace(inputfilename) as (ifh, ofh):
    for line in ifh:
        if line.startswith('for(') and line.endswith(';'):
            line = line.rstrip('\n') + next(ifh).rstrip('\n') + next(ifh)
        ofh.write(line)
</snippet></ROW><ROW><id>20273312</id><snippet>j=5</snippet></ROW><ROW><id>20273312</id><snippet>&gt;&gt;&gt; for i in [1,2,3], j in [4,5,6]:
            print(i, j)
...     
Traceback (most recent call last):
  File "&lt;ipython-input-1-b8d5b59be30b&gt;", line 1, in &lt;module&gt;
    for i in [1,2,3], j in [4,5,6]:
NameError: name 'j' is not defined

&gt;&gt;&gt; j = 5
&gt;&gt;&gt; for i in [1,2,3], j in [4,5,6]:
            print(i, j)
...     
[1, 2, 3] 5
True 5
</snippet></ROW><ROW><id>20273312</id><snippet>&gt;&gt;&gt; for i in ([1,2,3], j in [4,5,6]):
            print(i, j)
...     
[1, 2, 3] 5
True 5
&gt;&gt;&gt; for i in ([1,2,3], True):
            print(i, j)
...     
[1, 2, 3] 5
True 5
</snippet></ROW><ROW><id>20273312</id><snippet>&gt;&gt;&gt; for m in range(5):
    print (m, end=' ')
...     
0 1 2 3 4
&gt;&gt;&gt; m
4
</snippet></ROW><ROW><id>20273312</id><snippet>zip</snippet></ROW><ROW><id>20273312</id><snippet>&gt;&gt;&gt; for x, y in zip([1,2,3],[4,5,6]):
...     print (x, y)
...     
1 4
2 5
3 6
</snippet></ROW><ROW><id>20273322</id><snippet>random.shuffle()</snippet></ROW><ROW><id>20273474</id><snippet>server_thread.start()</snippet></ROW><ROW><id>20273474</id><snippet>print "Server stopped - ...</snippet></ROW><ROW><id>20273474</id><snippet>server_thread.join()</snippet></ROW><ROW><id>20273474</id><snippet>print "Server Started...</snippet></ROW><ROW><id>20273644</id><snippet>re.search</snippet></ROW><ROW><id>20273644</id><snippet>re.match</snippet></ROW><ROW><id>20273644</id><snippet>re.search</snippet></ROW><ROW><id>20273644</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "bob2323"
&gt;&gt;&gt; re.match(r'\d+', s)
&gt;&gt;&gt; re.search(r'\d+', s)
&lt;_sre.SRE_Match object at 0x7f4d19beb988&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20273679</id><snippet>self.topLabel.config(text="some new text")</snippet></ROW><ROW><id>20273679</id><snippet>lambda</snippet></ROW><ROW><id>20273679</id><snippet>command= lambda text=b:self.info(text)</snippet></ROW><ROW><id>20273679</id><snippet>info()</snippet></ROW><ROW><id>20273679</id><snippet>from Tkinter import *
import Tkinter as tk

class App(Tk):
  def __init__(self):
    Tk.__init__(self)

    self.title("Periodic Table of the Elements")

    self.topLabel = Label(self, text = "Click the element you would like information about.", font=20)
    self.topLabel.grid(row=0,column=0,columnspan=18)

    column1 = [
    'H',
    'Li',
    'Na',
    'K',
    'Rb',
    'Cs',
    'Fr']
    # create all buttons with a loop
    r = 1
    c = 0
    for b in column1:
        tk.Button(self,text=b,width=5,height=2, bg="grey",command=lambda text=b:self.info(text)).grid(row=r,column=c)
        r += 1
        if r &gt; 7:
            r = 1
            c += 1

    column2 = [
    'Be',
    'Mg',
    'Ca',
    'Sr',
    'Ba',
    'Ra']
    r = 2
    c = 1
    for b in column2:
        tk.Button(self,text=b,width=5,height=2, bg="green",command=lambda text=b:self.info(text)).grid(row=r,column=c)
        r += 1
        if r &gt; 7:
            r = 1
            c += 1

    column3 = [
    'Sc',
    'Y',
    'La   &gt;|',
    'Ac   &gt;|']
    r = 4
    c = 2
    for b in column3:
        tk.Button(self,text=b,width=5,height=2, bg="yellow",command=lambda text=b:self.info(text)).grid(row=r,column=c)
        r += 1
        if r &gt; 7:
            r = 1
            c += 1

    self.mainloop()

  def info(self, text):
     #print text
     self.topLabel.config(text=text)

def main():
  a = App()

if __name__ == "__main__":
  main()
</snippet></ROW><ROW><id>20273679</id><snippet>column1 = [
    ('H', 'Hydrogen'),
    ('Li', 'other'),
    ('Na', 'other'),
    ('K', 'other'),
    ('Rb', 'other'),
    ('Cs', 'other'),
    ('Fr', 'other')
]

# create all buttons with a loop
r = 1
c = 0
for b in column1:
    tk.Button(self,text=b[0],width=5,height=2, bg="grey",command=lambda text=b[1]:self.info(text)).grid(row=r,column=c)
</snippet></ROW><ROW><id>20273679</id><snippet>\</snippet></ROW><ROW><id>20273679</id><snippet>all_columns = [
    ('H' , 'Hydrogen'    , 'grey', 1, 0),
    ('Li', 'Li-something', 'grey', 2, 0),
    ('Na', 'Na-something', 'grey', 3, 0),
    ('K' , 'K-something' , 'grey', 4, 0),
    ('Rb', 'Rb-something', 'grey', 5, 0),
    ('Cs', 'Cs-something', 'grey', 6, 0),
    ('Fr', 'Fr-something', 'grey', 7, 0),

    ('Be', 'Be-something', 'green', 2, 1),
    ('Mg', 'Mg-something', 'green', 3, 1),
    ('Ca', 'Ca-something', 'green', 4, 1),
    ('Sr', 'Sr-something', 'green', 5, 1),
    ('Ba', 'Ba-something', 'green', 6, 1),
    ('Ra', 'Ra-something', 'green', 7, 1),

    ('Sc', 'Sc-something', 'yellow', 4, 2),
    ('Y' , 'Y-something' , 'yellow', 5, 2),
    ('La   &gt;|', 'La-something', 'yellow', 6, 2),
    ('Ac   &gt;|', 'Ac-something', 'yellow', 7, 2)
]

# create all buttons with a loop
for element in all_columns:
    button_text, label_text, button_color, button_row, button_col = element
    tk.Button(self, text=button_text, width=5, height=2, bg=button_color, command=lambda text=label_text:self.info(text)) \
        .grid(row=button_row, column=button_col)
</snippet></ROW><ROW><id>20274031</id><snippet>a = np.zeros((n, (n-1)//8+1), dtype=np.uint8)
# to set to zero
a[x, y//8] &amp;= 255 - (1 &lt;&lt; (y%8))
# to set to one
a[x, y//8] |= (1 &lt;&lt; (y%8))
#to read
(a[x, y//8] &gt;&gt; (y % 8)) &amp; 1
</snippet></ROW><ROW><id>20274250</id><snippet>rhs = data.lstrip()
print '.' * (len(data) - len(rhs)) + rhs
</snippet></ROW><ROW><id>20274275</id><snippet>with open("square.bmp", "rb") as f:
   b = f.read(1)
   while b != b"":
      b = f.read(1)
</snippet></ROW><ROW><id>20274287</id><snippet>sum</snippet></ROW><ROW><id>20274287</id><snippet>sum</snippet></ROW><ROW><id>20274287</id><snippet>case</snippet></ROW><ROW><id>20274287</id><snippet>case</snippet></ROW><ROW><id>20274287</id><snippet>qry = select([
        func.count(users.c.userID).label("Total"),
        func.sum(case(value=users.c.sub, whens={'N': 1}, else_=0)).label("NotSubscribed"),
        func.sum(case(value=users.c.sub, whens={'A': 1}, else_=0)).label("12Month"),
        func.sum(case([(users.c.sub == 'HY', 1)], else_=0)).label("6Month"),
        func.sum(case([(users.c.sub == 'M', 1)], else_=0)).label("1Month"),
    ],
).where(users.c.userID != None)

res = engine.execute(qry)
print res.keys()     # column names
print res.fetchone() # values
</snippet></ROW><ROW><id>20274287</id><snippet>qry = select([users.c.sub, func.count(users.c.userID)]).where(users.c.userID != None).group_by(users.c.sub)

res = engine.execute(qry)
rows = res.fetchall()
rows.append(('Total', sum(_r[1] for _r in rows))) # add Total
for row in rows:
    print row
</snippet></ROW><ROW><id>20274391</id><snippet>b = np.insert(a.flat, np.ravel_multi_index((np.arange(ind.size), ind), a.shape), vals).reshape(a.shape[0], -1)
</snippet></ROW><ROW><id>20274391</id><snippet>a</snippet></ROW><ROW><id>20274391</id><snippet>a.flat</snippet></ROW><ROW><id>20274391</id><snippet>a</snippet></ROW><ROW><id>20274391</id><snippet>np.ravel_multi_index</snippet></ROW><ROW><id>20274391</id><snippet>ind1d</snippet></ROW><ROW><id>20274391</id><snippet>ind1d = np.ravel_multi_index((np.arange(ind.size), ind), a.shape)
</snippet></ROW><ROW><id>20274391</id><snippet>ind</snippet></ROW><ROW><id>20274391</id><snippet>np.arange</snippet></ROW><ROW><id>20274391</id><snippet>a.flat</snippet></ROW><ROW><id>20274391</id><snippet>a</snippet></ROW><ROW><id>20274391</id><snippet>b = np.insert(a.flat, ind1d, vals)
</snippet></ROW><ROW><id>20274391</id><snippet>b = b.reshape(a.shape[0], -1) # the -1 allows any shape at the end
</snippet></ROW><ROW><id>20274463</id><snippet>poly = Polygon([list of point pairs])
</snippet></ROW><ROW><id>20274463</id><snippet>poly.area
</snippet></ROW><ROW><id>20274543</id><snippet>from tkinter import *
import tkinter.font

class Main(Tk):
    def __init__(self, *args, **kwargs):
        Tk.__init__(self, *args, **kwargs)  

        self.fonts = list(tkinter.font.families())
        self.fonts.sort()

        self.list = Listbox(self)
        for item in self.fonts:
            self.list.insert(END, item)
        self.list.pack(side=LEFT, expand=YES, fill=BOTH)
        self.list.bind("&lt;&lt;ListboxSelect&gt;&gt;", self.PrintSelected)

        self.scroll = Scrollbar(self)
        self.scroll.pack(side=RIGHT, fill=Y)

        self.scroll.configure(command=self.list.yview)
        self.list.configure(yscrollcommand=self.scroll.set)

    def PrintSelected(self, e):
        print(self.fonts[int(self.list.curselection()[0])])

root = Main()
root.mainloop()
</snippet></ROW><ROW><id>20274543</id><snippet>ttk</snippet></ROW><ROW><id>20274543</id><snippet>Scrollbar</snippet></ROW><ROW><id>20274543</id><snippet>Listbox</snippet></ROW><ROW><id>20274543</id><snippet>from tkinter import ttk
from tkinter import *
import tkinter.font

class Main(Tk):
    def __init__(self, *args, **kwargs):
        Tk.__init__(self, *args, **kwargs)  

        self.fonts = list(tkinter.font.families())
        self.fonts.sort()

        self.list = Listbox(self, activestyle=NONE)
        for item in self.fonts:
            self.list.insert(END, item)
        self.list.pack(side=LEFT, expand=YES, fill=BOTH)
        self.list.bind("&lt;&lt;ListboxSelect&gt;&gt;", self.PrintSelected)

        self.scroll = ttk.Scrollbar(self)
        self.scroll.pack(side=RIGHT, fill=Y)

        self.scroll.configure(command=self.list.yview)
        self.list.configure(yscrollcommand=self.scroll.set)

    def PrintSelected(self, e):
        print(self.fonts[int(self.list.curselection()[0])])

root = Main()
root.mainloop()
</snippet></ROW><ROW><id>20274634</id><snippet>r</snippet></ROW><ROW><id>20274634</id><snippet>&gt;&gt;&gt; a = '\n'
&gt;&gt;&gt; b = '''
... '''
&gt;&gt;&gt; a == b
True
</snippet></ROW><ROW><id>20274634</id><snippet>a</snippet></ROW><ROW><id>20274634</id><snippet>b</snippet></ROW><ROW><id>20274634</id><snippet>r'\n'</snippet></ROW><ROW><id>20274634</id><snippet>&gt;&gt;&gt; c = sys.stdin.readline()

&gt;&gt;&gt; c == a
True
</snippet></ROW><ROW><id>20274634</id><snippet>&gt;&gt;&gt; d = chr(10)
&gt;&gt;&gt; d == a
</snippet></ROW><ROW><id>20274634</id><snippet>b</snippet></ROW><ROW><id>20274634</id><snippet>c</snippet></ROW><ROW><id>20274634</id><snippet>d</snippet></ROW><ROW><id>20274634</id><snippet>&gt;&gt;&gt; e = a.encode('unicode-escape').decode('ascii')
</snippet></ROW><ROW><id>20274634</id><snippet>shutil.copy</snippet></ROW><ROW><id>20274634</id><snippet>new_path=os.path.join(r'C:\foo', new_folder, file_to_copy)
source_file= new_path
destination= destination_folder
</snippet></ROW><ROW><id>20274774</id><snippet>values = [a1, b1, c1, d1, e1, f1]
</snippet></ROW><ROW><id>20274774</id><snippet>max_value = max(values, key=abs)
values = [v/max_value for v in values]
</snippet></ROW><ROW><id>20274774</id><snippet>&gt;&gt;&gt; a1=85550 
&gt;&gt;&gt; b1=-18996 
&gt;&gt;&gt; c1=45500 
&gt;&gt;&gt; d1=-60000 
&gt;&gt;&gt; e1=74666 
&gt;&gt;&gt; f1=-35666
&gt;&gt;&gt; values = [a1, b1, c1, d1, e1, f1]
&gt;&gt;&gt; max_value = max(values, key=abs)
&gt;&gt;&gt; [v/max_value for v in values]
[1.0, -0.22204558737580363, 0.5318527177089422, -0.701344243132671, 0.8727761542957335, -0.4169023962594974]
</snippet></ROW><ROW><id>20274774</id><snippet>/</snippet></ROW><ROW><id>20274774</id><snippet>max_value = float(max(values, key=abs))
</snippet></ROW><ROW><id>20274774</id><snippet>[1, -1, 0, -1, 0, -1]</snippet></ROW><ROW><id>20274774</id><snippet>values</snippet></ROW><ROW><id>20274774</id><snippet>&gt;&gt;&gt; values[0]
1.0
</snippet></ROW><ROW><id>20274774</id><snippet>&gt;&gt;&gt; a1, b1, c1, d1, e1, f1 = values
&gt;&gt;&gt; b1
-0.22204558737580363
</snippet></ROW><ROW><id>20274887</id><snippet>def print_resource(array):
    for entry in datastore:
        print("Name:  "+entry[0])
        print("Email:  "+entry[1])
        print("DOB:  "+entry[2])
        print("\n")
</snippet></ROW><ROW><id>20274887</id><snippet>array</snippet></ROW><ROW><id>20274887</id><snippet>def print_resource(entry):
    print("Name:  "+entry[0])
    print("Email:  "+entry[1])
    print("DOB:  "+entry[2])
    print("\n")
</snippet></ROW><ROW><id>20275033</id><snippet>$ culebra -VC -d on -t on -o myscript.py serialno1
</snippet></ROW><ROW><id>20275033</id><snippet>myscript.py</snippet></ROW><ROW><id>20275033</id><snippet>#! /usr/bin/env python
# -*- coding: utf-8 -*-
'''
Copyright (C) 2013  Diego Torres Milano
Created on 2013-11-28 by Culebra v4.5.2

                      __    __    __    __
                     /  \  /  \  /  \  /  \ 
____________________/  __\/  __\/  __\/  __\_____________________________
___________________/  /__/  /__/  /__/  /________________________________
                   | / \   / \   / \   / \   \___
                   |/   \_/   \_/   \_/   \    o \ 
                                           \_____/--&lt;
@author: Diego Torres Milano
@author: Jennifer E. Swofford (ascii art snake)
'''


import re
import sys
import os


try:
    sys.path.append(os.path.join(os.environ['ANDROID_VIEW_CLIENT_HOME'], 'src'))
except:
    pass

from com.dtmilano.android.viewclient import ViewClient


kwargs1 = {'verbose': True, 'ignoresecuredevice': False}
device1, serialno1 = ViewClient.connectToDeviceOrExit(serialno='serialno1', **kwargs1)
device2, serialno2 = ViewClient.connectToDeviceOrExit(serialno='serialno2', **kwargs1)
kwargs2 = {'startviewserver': True, 'forceviewserveruse': False, 'autodump': False, 'ignoreuiautomatorkilled': True}
vc1 = ViewClient(device1, serialno1, **kwargs2)
vc2 = ViewClient(device2, serialno2, **kwargs2)
vc1.dump(window='-1')
vc2.dump(window='-1')

no_id1_1 = vc1.findViewById("id/no_id/1")
print no_id1_1
no_id1_2 = vc2.findViewById("id/no_id/1")
print no_id1_2
</snippet></ROW><ROW><id>20275033</id><snippet>id/no_id/1</snippet></ROW><ROW><id>20275035</id><snippet>def test_foo3():
    foo(7)
</snippet></ROW><ROW><id>20275035</id><snippet>def test_foo3():
    try:
        foo(7)
    except MyError:
        pytest.fail("Unexpected MyError ..")
</snippet></ROW><ROW><id>20275180</id><snippet># Allow access to command-line arguments
import sys

# SIP allows us to select the API we wish to use
import sip

# use the more modern PyQt API (not enabled by default in Python 2.x);
# must precede importing any module that provides the API specified
sip.setapi('QDate', 2)
sip.setapi('QDateTime', 2)
sip.setapi('QString', 2)
sip.setapi('QTextStream', 2)
sip.setapi('QTime', 2)
sip.setapi('QUrl', 2)
sip.setapi('QVariant', 2)

# Import all of Qt
from PyQt4.Qt import *
</snippet></ROW><ROW><id>20275180</id><snippet># Allow access to command-line arguments
import sys

# Import the core and GUI elements of Qt
from PySide.QtCore import *
from PySide.QtGui import *
</snippet></ROW><ROW><id>20275180</id><snippet>from PyQt4 import QtGui, QtCore</snippet></ROW><ROW><id>20275180</id><snippet>*</snippet></ROW><ROW><id>20275180</id><snippet>QApplication</snippet></ROW><ROW><id>20275180</id><snippet>QtCore.QApplication</snippet></ROW><ROW><id>20275226</id><snippet>class FUSE(object):

    """This class is the lower level interface and should not be subclassed

       under normal use. Its methods are called by fuse.

       Assumes API version 2.6 or later."""



    def __init__(self, operations, mountpoint, raw_fi=False, **kwargs):

        """Setting raw_fi to True will cause FUSE to pass the fuse_file_info

           class as is to Operations, instead of just the fh field.

           This gives you access to direct_io, keep_cache, etc."""
</snippet></ROW><ROW><id>20275345</id><snippet>number, salary, position, rest = items.split(None, 3)
oname, first = rest.rsplit(None, 1)
data.append((first, oname, number, position, salary))
</snippet></ROW><ROW><id>20275345</id><snippet>oname</snippet></ROW><ROW><id>20275345</id><snippet>rest</snippet></ROW><ROW><id>20275345</id><snippet>oname</snippet></ROW><ROW><id>20275345</id><snippet>first</snippet></ROW><ROW><id>20275345</id><snippet>&gt;&gt;&gt; items = '15674 24000 Manager Gregory the 1st John\n'
&gt;&gt;&gt; number, salary, position, rest = items.split(None, 3)
&gt;&gt;&gt; oname, first = rest.rsplit(None, 1)
&gt;&gt;&gt; first, oname, number, position, salary
('John', 'Gregory the 1st', '15674', 'Manager', '24000')
</snippet></ROW><ROW><id>20275599</id><snippet>binascii.unhexlify</snippet></ROW><ROW><id>20275599</id><snippet>#</snippet></ROW><ROW><id>20275599</id><snippet>import binascii

def parse_bgcolor(bgcolor):
    if not bgcolor.startswith('#'):
        raise ValueError('A bgcolor must start with a "#"')
    return binascii.unhexlify(bgcolor[1:])

def is_bgcolor(bgcolor):
    try:
        parse_bgcolor(bgcolor)
    except Exception as e:
        return False
    else:
        return True
</snippet></ROW><ROW><id>20275599</id><snippet>#</snippet></ROW><ROW><id>20275599</id><snippet>== 6</snippet></ROW><ROW><id>20275599</id><snippet>in (3, 6)</snippet></ROW><ROW><id>20275599</id><snippet>% 3 == 0</snippet></ROW><ROW><id>20275599</id><snippet>parse_bgcolor</snippet></ROW><ROW><id>20275599</id><snippet>bytes</snippet></ROW><ROW><id>20275599</id><snippet>int(pair, 16)</snippet></ROW><ROW><id>20275599</id><snippet>bytes</snippet></ROW><ROW><id>20275599</id><snippet>struct.unpack('&gt;HHH')</snippet></ROW><ROW><id>20275599</id><snippet>red</snippet></ROW><ROW><id>20275599</id><snippet>rgb(1, 2, 3)</snippet></ROW><ROW><id>20275608</id><snippet>a[tuple(b.T)]</snippet></ROW><ROW><id>20275608</id><snippet>&gt;&gt;&gt; a = np.arange(9).reshape(3,1,3)
&gt;&gt;&gt; b = np.asarray([[1,0,2],[2,0,0]])
&gt;&gt;&gt; a
array([[[0, 1, 2]],

       [[3, 4, 5]],

       [[6, 7, 8]]])
&gt;&gt;&gt; b
array([[1, 0, 2],
       [2, 0, 0]])
&gt;&gt;&gt; a[1,0,2]
5
&gt;&gt;&gt; a[2,0,0]
6
&gt;&gt;&gt; a[tuple(b.T)]
array([5, 6])
</snippet></ROW><ROW><id>20275792</id><snippet>from collections import defaultdict

def find_controlled(company, shares):
    # shares the company owns directly
    controls = set([company])       # avoid the recursion problem pointed out by @Justin
    owns     = defaultdict(float)
    owns.update(shares[company])

    # first level of controlled companies to look at
    add_control = set(k for k,v in owns.items() if v &gt; 0.50)

    while add_control:
        # new level of controlled companies to look at next
        _add_control = set()

        for cpy in add_control:
            controls.add(cpy)
            for k,v in shares[cpy].items():
                owns[k] += v
                if owns[k] &gt; 0.5 and k not in controls:
                    _add_control.add(k)
        add_control = _add_control

    return sorted(controls - set([company]))

def main():
    # Data structure: dict of dict of float
    #   shares['A']['B'] = 0.51     means    A owns 51% of B's shares
    shares = defaultdict(lambda: defaultdict(float))

    # Who owns what
    shares['A']['B'] = 0.60
    shares['A']['C'] = 0.55
    shares['A']['D'] = 0.41
    shares['C']['D'] = 0.10
    shares['B']['E'] = 0.20
    shares['C']['E'] = 0.20
    shares['D']['E'] = 0.20

    # See who A controls:
    controlled = find_controlled('A', shares)
    print('A controls {}'.format(','.join(controlled)))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>20276001</id><snippet>statusGroups = []
    for group in status.groups.all():
        statusGroups.append(group)

    users = UserProfile.objects.filter(groupsIn__in=statusGroups)
</snippet></ROW><ROW><id>20276177</id><snippet>tk.Button(self,text=b[0],width=5,height=2, bg="grey", 
command=lambda text=b:[self.name(text[1]), self.info(text[2])] ).grid(row=r,column=c)
</snippet></ROW><ROW><id>20276177</id><snippet>tk.Button(self,text=b[0],width=5,height=2, bg="grey", 
command=lambda text=b:self.call_both(text)).grid(row=r,column=c)

def call_both(self, line):
    self.name(line[1])
    self.info(line[2])
</snippet></ROW><ROW><id>20276195</id><snippet>&gt;&gt;&gt; span = 5
&gt;&gt;&gt; a[0:3+span+1, 0:4+span+1]
array([[  1,   1,   1,   1,   1,   1,   1,   1,   1],
       [  1,   1,   4,   3,   1,   1,   1,   1,   1],
       [  1,   0,   2,  22,   0,   1,   0,   0,   0],
       [  1,   0,   1,  34,  99,   1,   1,   0,   1],
       [  1,   0,   5,  11,   0,   1,   1,   0,   1],
       [  1,   0,   6,  -5,   0,   1,   1,   0,   1],
       [  1,   0,  88,   0,   0,   1,   0,   0,   0],
       [  1,   1, 333,   1,   1,   1,   1,   1,   1]])
</snippet></ROW><ROW><id>20276195</id><snippet>&gt;&gt;&gt; np.mean(a[0:3+5, 0:4+5])
8.9305555555555554
</snippet></ROW><ROW><id>20276195</id><snippet>i, j = np.indices(a.shape)
a[((i-3)**2 &lt; 25) &amp; ((j-4)**2 &lt; 25)]
</snippet></ROW><ROW><id>20276248</id><snippet>recvfrom</snippet></ROW><ROW><id>20276248</id><snippet>recvfrom</snippet></ROW><ROW><id>20276248</id><snippet>SO_REUSEADDR</snippet></ROW><ROW><id>20276248</id><snippet>SO_REUSEPORT</snippet></ROW><ROW><id>20276248</id><snippet>bind</snippet></ROW><ROW><id>20276248</id><snippet>sendto</snippet></ROW><ROW><id>20276248</id><snippet>bind</snippet></ROW><ROW><id>20276248</id><snippet>recvfrom</snippet></ROW><ROW><id>20276248</id><snippet>('127.0.0.1', 12345)</snippet></ROW><ROW><id>20276248</id><snippet>('0.0.0.0', 12345)</snippet></ROW><ROW><id>20276248</id><snippet>libpcap</snippet></ROW><ROW><id>20276248</id><snippet>scapy</snippet></ROW><ROW><id>20276248</id><snippet>libpcap</snippet></ROW><ROW><id>20276248</id><snippet>wireshark</snippet></ROW><ROW><id>20276248</id><snippet>recvmsg</snippet></ROW><ROW><id>20276248</id><snippet>recvfrom</snippet></ROW><ROW><id>20276248</id><snippet>recvmsg</snippet></ROW><ROW><id>20276248</id><snippet>ctypes</snippet></ROW><ROW><id>20276435</id><snippet>import itertools
import operator

probabilities = {'W':0.837, 'L':0.163}

for product in itertools.product(['W','L'], repeat=3): #3=number of games
    p = reduce(operator.mul,
               [probabilities[p] for p in product])
    print product, ":", p
</snippet></ROW><ROW><id>20276435</id><snippet>reduce</snippet></ROW><ROW><id>20276435</id><snippet>import itertools
import operator

probabilities = {'W':0.837, 'L':0.163}

winProbability = 0
for product in itertools.product(['W','L'], repeat=3): #3=number of games
    p = reduce(operator.mul,
               [probabilities[p] for p in product])

    if product.count('W') &gt; 1: #works only for 3 games
        winProbability += p
        print "Susie wins:", product, "with probability:", p
    else:
        print "Susie looses:", product, "with probability:", p

print "Total probability of Susie winning:", winProbability 
</snippet></ROW><ROW><id>20276435</id><snippet>3</snippet></ROW><ROW><id>20276435</id><snippet>n</snippet></ROW><ROW><id>20276563</id><snippet>Image</snippet></ROW><ROW><id>20276563</id><snippet>bytes</snippet></ROW><ROW><id>20276563</id><snippet>bytearray</snippet></ROW><ROW><id>20276563</id><snippet>with open('spam.bmp', 'rb') as f:
    data = bytearray(f.read())
</snippet></ROW><ROW><id>20276563</id><snippet>struct</snippet></ROW><ROW><id>20276563</id><snippet>struct.unpack_from('&lt;L', data, offset)</snippet></ROW><ROW><id>20276563</id><snippet>data[offset]</snippet></ROW><ROW><id>20276563</id><snippet>data[offset+1]</snippet></ROW><ROW><id>20276563</id><snippet>pos = pixel_array_offset + row_size * y + pixel_size * x
data[pos:pos+3] = 255, 255, 255
</snippet></ROW><ROW><id>20276563</id><snippet>with open('eggs.bmp', 'wb') as f:
    f.write(data)
</snippet></ROW><ROW><id>20276674</id><snippet>ar = [2, 3, 45, 5556, 6, 'empty', 4]
new_ar = [0 if x == 'empty' else x for x in ar]
</snippet></ROW><ROW><id>20276674</id><snippet>[2, 3, 45, 5556, 6, 0, 4]
</snippet></ROW><ROW><id>20276674</id><snippet>{}</snippet></ROW><ROW><id>20276674</id><snippet>[]</snippet></ROW><ROW><id>20276674</id><snippet>new_ar = {0 if x == 'empty' else x for x in ar}
</snippet></ROW><ROW><id>20276797</id><snippet>__import__('os').system('rm -rf /')</snippet></ROW><ROW><id>20276797</id><snippet>eval</snippet></ROW><ROW><id>20276797</id><snippet>exec</snippet></ROW><ROW><id>20276797</id><snippet>ast</snippet></ROW><ROW><id>20276797</id><snippet>pyparsing</snippet></ROW><ROW><id>20276797</id><snippet>pybison</snippet></ROW><ROW><id>20276797</id><snippet>import operator

OPERATORS = operator.__dict__

def evaluate_expression(expr):
    try:
        return int(expr)
    except ValueError:
        pass
    op, _, args = expr.rpartition('(')
    rest, _, thisop = op.rpartition(',')
    args = args.rstrip(')').split(',')
    argvalues = map(int, args)
    thisvalue = OPERATORS[thisop](*argvalues)
    if rest:
        return evaluate_expression('{},{}'.format(rest, thisvalue))
    return thisvalue

while True:
    expr = input()
    print(evaluate_expression(expr))
</snippet></ROW><ROW><id>20276939</id><snippet>game state machine</snippet></ROW><ROW><id>20276939</id><snippet>def main_game_loop():
    if state == "player_turn":
        # logic for player's turn
    elif state == "enemy_turn":
        # logic for enemy's turn
    # they can also be used for other things, such as where you are in the game
    elif state == "paused":
        # pause logic etc etc
</snippet></ROW><ROW><id>20277000</id><snippet># read port-list
with open('ports.txt') as inf:
    ports = [int(i) for line in inf for i in line.split(',')]

# display ports
for port in ports:
    print(port)

# recreate file
ports.append(myPort)
ports.sort()
with open('ports.txt', 'w') as outf:
    outf.write(','.join(str(p) for p in ports))
</snippet></ROW><ROW><id>20277005</id><snippet>class Foo(object):
    def my_method(self, arg):
        print "self:", self
        print "arg:", arg

a = Foo()
print Foo.my_method(a, 2)
# self: self: &lt;__main__.Foo object at 0x000000000219DE10&gt;
# arg: 2

# You could, in theory, do that, but Python complains because it values the sanity
# of the people who will have to maintain your code :p
print Foo.my_method(1, 2)
# TypeError: unbound method my_method() must be called with Foo instance as first argument (got int instance instead)
</snippet></ROW><ROW><id>20277005</id><snippet>a.my_method(2)
# self: &lt;__main__.Foo object at 0x000000000219DE10&gt;
# arg: 2
</snippet></ROW><ROW><id>20277005</id><snippet>arg</snippet></ROW><ROW><id>20277005</id><snippet>a.my_method</snippet></ROW><ROW><id>20277005</id><snippet>my_method</snippet></ROW><ROW><id>20277005</id><snippet>a</snippet></ROW><ROW><id>20277005</id><snippet>Foo</snippet></ROW><ROW><id>20277005</id><snippet>dir(a.my_method)</snippet></ROW><ROW><id>20277005</id><snippet>im_self</snippet></ROW><ROW><id>20277005</id><snippet>print self</snippet></ROW><ROW><id>20277005</id><snippet>func1</snippet></ROW><ROW><id>20277005</id><snippet>foo0</snippet></ROW><ROW><id>20277005</id><snippet>foo0.child</snippet></ROW><ROW><id>20277005</id><snippet>foo0.child.secondMethod()</snippet></ROW><ROW><id>20277005</id><snippet>foo0.func1</snippet></ROW><ROW><id>20277005</id><snippet>foo0.child.secondMethod = foo0.func1</snippet></ROW><ROW><id>20277005</id><snippet>foo0</snippet></ROW><ROW><id>20277005</id><snippet>func1</snippet></ROW><ROW><id>20277005</id><snippet>foo0</snippet></ROW><ROW><id>20277005</id><snippet>foo0.child</snippet></ROW><ROW><id>20277099</id><snippet># content of test_class.py
class TestClass:
    def test_one(self):
        x = "this"
        assert 'h' in x

    def test_two(self):
        x = "hello"
        assert hasattr(x, 'check')
</snippet></ROW><ROW><id>20277192</id><snippet>urlparse.urljoin</snippet></ROW><ROW><id>20277192</id><snippet>import urlparse
import webbrowser

artist_name = 'virt' 
url = urlparse.urljoin('http://www.last.fm/music/', artist_name)

# Will open http://www.last.fm/music/virt in your browser.
webbrowser.open(url)
</snippet></ROW><ROW><id>20277269</id><snippet>https://github.com/kennethreitz/requests/blob/master/requests/__init__.py</snippet></ROW><ROW><id>20277365</id><snippet>def add_day(x):
    d = x.date()+DT.timedelta(1)
    return mtl.localize(x.replace(year=d.year, month=d.month, day=d.day, tzinfo=None))
</snippet></ROW><ROW><id>20277365</id><snippet>import datetime as DT
import pytz
import calendar
mtl = pytz.timezone('America/Montreal')
naive_time3 = DT.datetime.strptime('2013/11/03', '%Y/%m/%d')
print repr(naive_time3)
#datetime.datetime(2013, 11, 3, 0, 0)
localized_time3 = mtl.localize(naive_time3)
print repr(localized_time3)
#datetime.datetime(2013, 11, 3, 0, 0, tzinfo=&lt;DstTzInfo 'America/Montreal' EDT-1 day, 20:00:00 DST&gt;)
print calendar.timegm(localized_time3.utctimetuple())
#1383451200.0
def add_day(x):
    d = x.date()+DT.timedelta(1)
    return mtl.localize(x.replace(year=d.year, month=d.month, day=d.day, tzinfo=None))
print repr(add_day(localized_time3))
#datetime.datetime(2013, 11, 4, 0, 0, tzinfo=&lt;DstTzInfo 'America/Montreal' EST-1 day, 19:00:00 STD&gt;)
</snippet></ROW><ROW><id>20277365</id><snippet>calendar</snippet></ROW><ROW><id>20277430</id><snippet>mkdir foo
echo "print 'this is foo!'" &gt;&gt;foo/__init__.py
zip foo.zip -r foo
rm -rf foo                   # to ensure it doesn't get loaded from the filesystem
mv foo.zip somethingelse.zip # To ensure it doesn't get zipimported from the filesystem
</snippet></ROW><ROW><id>20277430</id><snippet>#!/usr/bin/python 

import sys
import os
import zipfile
import StringIO
import zipimport
import time

sys.path.append('/tmp')

class SinEater(object):
    def __init__(self):
        tmp = str(int(time.time()*100)) + '.zip'
        f = open(tmp, 'w')
        f.write(sys.stdin.read(1024*64)) # 64kb limit
        f.close()
        try:
            z = zipimport.zipimporter(tmp)
            z.load_module('foo')

        except:
            pass

if __name__ == '__main__':
    print 'herp derp'
    s = SinEater()
</snippet></ROW><ROW><id>20277430</id><snippet>herp derp
this is new
</snippet></ROW><ROW><id>20277705</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def main():
    data = read_data('test.dat', 512, 512)
    visualize(data)

def read_data(filename, width, height):
    with open(filename, 'r') as infile:
        # Skip the header
        infile.seek(512)
        data = np.fromfile(infile, dtype=np.uint16)
    # Reshape the data into a 3D array. (-1 is a placeholder for however many
    # images are in the file... E.g. 2000)
    return data.reshape((width, height, -1))

def visualize(data):
    # There are better ways to do this, but let's keep it simple
    plt.ion()
    fig, ax = plt.subplots()
    im = ax.imshow(data[:,:,0], cmap=plt.cm.gray)
    for i in xrange(data.shape[-1]):
        image = data[:,:,i]
        im.set(data=image, clim=[image.min(), image.max()])
        fig.canvas.draw()

main()
</snippet></ROW><ROW><id>20277731</id><snippet># make some z vlues
z = numpy.sin(xy[:,1]-0.2*xy[:,1])
</snippet></ROW><ROW><id>20277731</id><snippet>z = numpy.sin(0.8*xy[:, 1])
</snippet></ROW><ROW><id>20277731</id><snippet># whiten them
z = whiten(z)
</snippet></ROW><ROW><id>20277731</id><snippet>&gt;&gt;&gt; z = np.sin(.8*xy[:, 1])      # the original z
&gt;&gt;&gt; zw = vq.whiten(z)            # save it under a different name
&gt;&gt;&gt; zn = z / z.std()             # make another 'normalized' array
&gt;&gt;&gt; map(np.std, [z, zw, zn])     # standard deviations of the three arrays
[0.42645, 1.0, 1.0]
&gt;&gt;&gt; np.allclose(zw, zn)          # whitened is the same as normalized
True
</snippet></ROW><ROW><id>20277731</id><snippet># let scipy do its magic (k==3 groups)
res, idx = kmeans2(numpy.array(zip(xy[:,0],xy[:,1],z)),3)
</snippet></ROW><ROW><id>20277731</id><snippet>data = np.array(zip(xy[:, 0], xy[:, 1], z))
</snippet></ROW><ROW><id>20277731</id><snippet>data = np.column_stack([xy, z])
</snippet></ROW><ROW><id>20277731</id><snippet>&gt;&gt;&gt; xy.shape
(30, 2)
&gt;&gt;&gt; z.shape
(30,)
&gt;&gt;&gt; data.shape
(30, 3)
</snippet></ROW><ROW><id>20277731</id><snippet>data</snippet></ROW><ROW><id>20277731</id><snippet>res, idx = vq.kmeans2(data, 3)
</snippet></ROW><ROW><id>20277858</id><snippet>int("clear")</snippet></ROW><ROW><id>20277858</id><snippet>if pressed == "clear": calcvalue = calcvalue - int(pressed) / 10
</snippet></ROW><ROW><id>20277858</id><snippet>if pressed == "clear": calcvalue = int(calcvalue/10.0)
</snippet></ROW><ROW><id>20277858</id><snippet>if pressed == "clear": calcvalue = calcvalue/10
</snippet></ROW><ROW><id>20277858</id><snippet>integer/integer</snippet></ROW><ROW><id>20277858</id><snippet>integer</snippet></ROW><ROW><id>20277858</id><snippet>float/integer</snippet></ROW><ROW><id>20277858</id><snippet>integer/float</snippet></ROW><ROW><id>20277858</id><snippet>float</snippet></ROW><ROW><id>20277858</id><snippet>integer/integer</snippet></ROW><ROW><id>20277858</id><snippet>float</snippet></ROW><ROW><id>20277858</id><snippet>integer//integer</snippet></ROW><ROW><id>20277858</id><snippet>integer</snippet></ROW><ROW><id>20277858</id><snippet>if event.x &gt;10 and event.x &lt;70 ...
</snippet></ROW><ROW><id>20277858</id><snippet>if 10&lt; event.x &lt;70 ...
</snippet></ROW><ROW><id>20277858</id><snippet>if pressed == 0 or pressed == 1 or pressed == 2 or pressed == 3 or pressed == 4 or pressed == 5 or pressed == 6 or pressed == 7 or pressed == 8 or pressed == 9 :

if pressed == "divide" or pressed == "times" or pressed == "minus" or pressed == "plus" :
</snippet></ROW><ROW><id>20277858</id><snippet>if pressed in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9):

if pressed in ("divide", "times", "minus", "plus"):
</snippet></ROW><ROW><id>20277908</id><snippet>a = 'bad'

def bad_fn():
    a = 'good'
bad_fn()
print('bad_fn() is'+a)

def good_fn():
    global a
    a = 'good'
good_fn()
print('good_fn() is'+a)
</snippet></ROW><ROW><id>20277908</id><snippet>bad_fn() is bad
good_fn() is good
</snippet></ROW><ROW><id>20277908</id><snippet># Test the Collatz conjecture:
# http://en.wikipedia.org/wiki/Collatz_conjecture
import profile

# Python 2/3 compatibility shim
import sys
if sys.hexversion &gt;= 0x3000000:
    # Python 3.x
    inp = input
    rng = range
else:
    # Python 2.x
    inp = raw_input
    rng = xrange

# cache of already-seen values
seen = set([1])

def test(n):
    visited = set()
    while True:
        if n in seen:             # Ran into an already-seen chain that goes to 1
            seen.update(visited)
            return len(visited)
        elif n in visited:        # Closed loop! this should never happen
            print('Loop found at n = {}'.format(n))
            return None
        else:
            visited.add(n)

        if n % 2:         # n is odd?
            n = 3*n + 1
        else:
            n //= 2

def do_profile(upto=1000000):
    prof = profile.Profile()
    prof.run('for n in rng(2, {}): test(n)'.format(upto))
    prof.print_stats()

def main():
    while True:
        try:
            n = int(inp('Enter a number to test (or x to exit): '))
        except ValueError:
            break

        res = test(n)
        if res is None:
            print("Well, that's odd...")
        else:
            print("Chain terminated after {} values were tested".format(res))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>20277908</id><snippet>do_profile(1000000)</snippet></ROW><ROW><id>20278065</id><snippet>def _sub_ip(self, line):
    pattern = r"((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)([ (\[]?(\.|dot)[ )\]]?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})"
    ips = [each[0] for each in re.findall(pattern, line)]
    for item in ips:
        location = ips.index(item)
        ip = re.sub("[ ()\[\]]", "", item)
        ip = re.sub("dot", ".", ip)
        ips.remove(item)
        ips.insert(location, ip)

    for ip in ips:
        line = line.replace(ip, self._ip2db(ip))

    return line
</snippet></ROW><ROW><id>20278105</id><snippet>source="""RN_48865,
    1,Observed
    1,0
    259,Computed
    1,0.000014
    91,0.000014
    182,0.000014
    274,0.000014
    366,0.000014
    457,0.000014
    548,0.000014
    RN_7445,
    1,Observed
    1,0
    259,Computed
    1,0.000013
    91,0.000013
    182,0.000013
    274,0.000013
    366,0.000013
    457,0.000013
    548,0.000013
    RN_9288,
    1,Observed
    1,0
    259,Computed
    1,0.000011
    91,0.000011
    182,0.000011
    274,0.000011
    366,0.000011
    457,0.000011
    548,0.000011
    RN_10955,
    1,Observed
    1,0
    259,Computed
    1,0.000014
    91,0.000014
    182,0.000014
    274,0.000014
    366,0.000014
    457,0.000014
    548,0.000014
"""
import pandas as pd
import numpy as np
import StringIO
df = pd.read_csv(StringIO.StringIO(source), header=None)
rns = np.where(df[0].apply(lambda x: x.lstrip().startswith('RN_')))[0]
length = rns[1] - rns[0]
index = df[0].iloc[4:length]
cols = df[0][::length].apply(lambda x: x.lstrip()).values
result_df = pd.DataFrame(index=index)
for col_num, col_start in enumerate(range(0, len(df), length)):
    result_df[cols[col_num]] = df[1][col_num*length+4 : (col_num+1)*length].values
print result_df
</snippet></ROW><ROW><id>20278105</id><snippet>     RN_48865   RN_7445   RN_9288  RN_10955
1    0.000014  0.000013  0.000011  0.000014
91   0.000014  0.000013  0.000011  0.000014
182  0.000014  0.000013  0.000011  0.000014
274  0.000014  0.000013  0.000011  0.000014
366  0.000014  0.000013  0.000011  0.000014
457  0.000014  0.000013  0.000011  0.000014
548  0.000014  0.000013  0.000011  0.000014
</snippet></ROW><ROW><id>20278105</id><snippet>pandas.read_csv('file',
  parse_date=0,  # 0th column
  date_parser=lambda x: pandas.Timestamp('1995-1-1')+timedelta(x))
</snippet></ROW><ROW><id>20278154</id><snippet>self.redirect('login/%s' % wiki_topic) #wiki_topic = something like 'topic'
</snippet></ROW><ROW><id>20278154</id><snippet>'/'</snippet></ROW><ROW><id>20278154</id><snippet>'/css/wiki.css'</snippet></ROW><ROW><id>20278154</id><snippet>'login/css/wiki.css'</snippet></ROW><ROW><id>20278154</id><snippet>'css/wiki/css'.</snippet></ROW><ROW><id>20278154</id><snippet>self.redirect('login/%s' % wiki_topic) to &gt;&gt; self.redirect('login%s' % wiki_topic)
</snippet></ROW><ROW><id>20278230</id><snippet>collections.Counter</snippet></ROW><ROW><id>20278230</id><snippet>dict</snippet></ROW><ROW><id>20278230</id><snippet>Counter</snippet></ROW><ROW><id>20278230</id><snippet>most_common()</snippet></ROW><ROW><id>20278265</id><snippet>datetime</snippet></ROW><ROW><id>20278265</id><snippet>def hours_since(timestamp):
    import datetime
    return (datetime.datetime.utcnow() - datetime.datetime.utcfromtimestamp(timestamp)).total_seconds() / 3600.
</snippet></ROW><ROW><id>20278265</id><snippet>hours_since(1385715744.206451)
0.18432851777777778
</snippet></ROW><ROW><id>20278575</id><snippet>a_list.sort()</snippet></ROW><ROW><id>20278575</id><snippet>a_list</snippet></ROW><ROW><id>20278575</id><snippet>None</snippet></ROW><ROW><id>20278575</id><snippet>sorted( a_list, key=len )</snippet></ROW><ROW><id>20278764</id><snippet>def split_by_newline(text):
    ''' Split text by new lines '''
    return text.splitlines()

def split_by_indentation(text):
    ''' Detect paragraphs by indentations '''
    # ...

def take_first_sencence(paragraph):
    ''' Expect a single paragraph, return its first sentence'''
    # ...

def take_first_sentences(text, paragraph_policy=split_by_newline):
    for paragraph in paragraph_policy(text):
        yield take_first_sentence(paragraph)
</snippet></ROW><ROW><id>20279037</id><snippet>&gt;&gt;&gt; for original in originList:
    if 'x' in original:
        res.append(anotherList[int(original[-1])]) #grab the index
    else:
        res.append(original)


&gt;&gt;&gt; res
['I', 'just', 'try', 'to', 'acomplish', 'this', 'foo', 'list']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20279037</id><snippet>originList</snippet></ROW><ROW><id>20279135</id><snippet>p = argparse.ArgumentParser()
p.add_argument('-r', '--rule', nargs='?', default='string')
args = p.parse_args()
print args
</snippet></ROW><ROW><id>20279135</id><snippet>nargs='?'</snippet></ROW><ROW><id>20279135</id><snippet>Namespace(rule='string')</snippet></ROW><ROW><id>20279135</id><snippet>-r</snippet></ROW><ROW><id>20279135</id><snippet>Namespace(rule=None)</snippet></ROW><ROW><id>20279135</id><snippet>Namespace(rule='something')</snippet></ROW><ROW><id>20279135</id><snippet>-r something</snippet></ROW><ROW><id>20279135</id><snippet>if args.rule is None:
    print '\n    Error: no input value for rule:'
    print '    resetting rule to default value.'
    args.rule = 'string'
print args
</snippet></ROW><ROW><id>20279135</id><snippet>--rule</snippet></ROW><ROW><id>20279135</id><snippet>Namespace(rule=None)

    Error: no input value for rule:
    resetting rule to default value.
Namespace(rule='string')
</snippet></ROW><ROW><id>20279135</id><snippet>default</snippet></ROW><ROW><id>20279135</id><snippet>p.add_argument('-r', '--rule', nargs='?')</snippet></ROW><ROW><id>20279135</id><snippet>None</snippet></ROW><ROW><id>20279135</id><snippet>type</snippet></ROW><ROW><id>20279135</id><snippet>action</snippet></ROW><ROW><id>20279135</id><snippet>None</snippet></ROW><ROW><id>20279135</id><snippet>argparse</snippet></ROW><ROW><id>20279135</id><snippet>error message</snippet></ROW><ROW><id>20279135</id><snippet>warning</snippet></ROW><ROW><id>20279135</id><snippet>nargs=2</snippet></ROW><ROW><id>20279135</id><snippet>error</snippet></ROW><ROW><id>20279135</id><snippet>argparse</snippet></ROW><ROW><id>20279135</id><snippet>error</snippet></ROW><ROW><id>20279135</id><snippet>parse_args</snippet></ROW><ROW><id>20279135</id><snippet>rule</snippet></ROW><ROW><id>20279135</id><snippet>class MyParser(argparse.ArgumentParser):
    def error(self, message):
        if 'rule' in message:
            message = 'wrong number of input values for rule'
            raise argparse.ArgumentError(None,message)
            # cannot access namespace or continue parsing
        else:
            super(MyParser, self).error(message)

p = MyParser()
p.add_argument('-r', '--rule', nargs=2)
try:
    args = p.parse_args()
except argparse.ArgumentError as e:
    print e
    args = argparse.Namespace(rule='default')
    # create a namespace with this default value
print args
</snippet></ROW><ROW><id>20279135</id><snippet>nargs</snippet></ROW><ROW><id>20279135</id><snippet>add_argument</snippet></ROW><ROW><id>20279135</id><snippet>nargs='*'</snippet></ROW><ROW><id>20279160</id><snippet>zip([1,2,3],[4,5,6]) # returns [(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>20279160</id><snippet>[list(x) for x  in zip([1,2,3],[4,5,6],[7,8,9])] # returns [[1, 4], [2, 5], [3, 6]]
</snippet></ROW><ROW><id>20279160</id><snippet>results = [[1,2,3],[4,5,6]]
zip(*results) # returns [(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>20279164</id><snippet>#example
def make_popup(self):
    popupSurf = pygame.Surface(width, height)
    options = ['Attack',
               'Talk']
    for i in range(len(options)):
        textSurf = BASICFONT.render(options[i], 1, BLUE)
        textRect = textSurf.get_rect()
        textRect.top = self.top
        textRect.left = self.left
        self.top += pygame.font.Font.get_linesize(BASICFONT)
        popupSurf.blit(textSurf, textRect)
    popupRect = popupSurf.get_rect()
    popupRect.centerx = SCREENWIDTH/2
    popupRect.centery = SCREENHEIGHT/2
    DISPLAYSURFACE.blit(popupSurf, popupRect)
    pygame.display.update()
</snippet></ROW><ROW><id>20279676</id><snippet>readRequest</snippet></ROW><ROW><id>20279676</id><snippet>map</snippet></ROW><ROW><id>20279676</id><snippet>sc</snippet></ROW><ROW><id>20279676</id><snippet>socket</snippet></ROW><ROW><id>20279676</id><snippet>sc, sockname = s.accept</snippet></ROW><ROW><id>20279676</id><snippet>sc.sendall</snippet></ROW><ROW><id>20279676</id><snippet>TypeError: 'function' does not support the buffer interface
</snippet></ROW><ROW><id>20279676</id><snippet>readRequest</snippet></ROW><ROW><id>20279676</id><snippet>sc.sendall(readRequest())
</snippet></ROW><ROW><id>20279676</id><snippet>readRequest</snippet></ROW><ROW><id>20280463</id><snippet>Xi / mean(X)</snippet></ROW><ROW><id>20280463</id><snippet>Xi = 0</snippet></ROW><ROW><id>20280463</id><snippet>Xi / mean(X)</snippet></ROW><ROW><id>20280463</id><snippet>Xi == 0</snippet></ROW><ROW><id>20280463</id><snippet>ln(Xi / mean(X))</snippet></ROW><ROW><id>20280463</id><snippet>Pi == 0</snippet></ROW><ROW><id>20280463</id><snippet>x_i*log(x_i)</snippet></ROW><ROW><id>20280463</id><snippet>def Group_negentropy(x_i):
    if x_i == 0:
        return 0
    else:
        return x_i*log(x_i)

def H(x)
    n = len(x)
    entropy = 0.0
    sum = 0.0
    for x_i in x: # work on all x[i]
        print x_i
        error_if_not_in_range01(x_i)
        sum += x_i
        group_negentropy = Group_negentropy(x_i)
        entropy += group_negentropy
    error_if_not_1(sum)
    return -entropy
</snippet></ROW><ROW><id>20280777</id><snippet>json.loads</snippet></ROW><ROW><id>20280777</id><snippet>literal_eval</snippet></ROW><ROW><id>20280777</id><snippet>json.loads(g)</snippet></ROW><ROW><id>20280777</id><snippet>ast.literal_eval(g)</snippet></ROW><ROW><id>20280866</id><snippet>In [11]: %timeit g.apply(h)
1000 loops, best of 3: 1.79 ms per loop

In [12]: %timeit g['val1'].sum() / g['val2'].sum()
1000 loops, best of 3: 600 µs per loop
</snippet></ROW><ROW><id>20280866</id><snippet>def h1(x):
   a.append(x)
   return h(x)
a = []
</snippet></ROW><ROW><id>20280866</id><snippet>0     10
4     16
8     13
9     17
17    17
19    11
Name: val1, dtype: int64
</snippet></ROW><ROW><id>20280866</id><snippet>a</snippet></ROW><ROW><id>20280866</id><snippet>In [21]: a
Out[21]: 
[SNDArray([125755456, 131767536,        13,        17,        17,        11]),
 Series([], name: val1, dtype: int64),
 0     10
4     16
8     13
9     17
17    17
19    11
Name: val1, dtype: int64]
</snippet></ROW><ROW><id>20281031</id><snippet>squeeze=True</snippet></ROW><ROW><id>20281031</id><snippet>read_csv</snippet></ROW><ROW><id>20281031</id><snippet>In [16]: s = pd.read_csv('http://pastebin.com/raw.php?i=vx9xLtdm',
   ....:                 parse_dates=True, index_col=0, squeeze=True,
   ....:                 na_values=-9999)

In [17]: bins = np.linspace(s.min(), s.max(), num=50)

In [18]: axes = s.hist(by=s.index.date, bins=bins, sharex=True, sharey=True)

In [19]: plt.gcf().autofmt_xdate()

In [20]: plt.draw()
</snippet></ROW><ROW><id>20281149</id><snippet>{{ f.following_set.count() }}
</snippet></ROW><ROW><id>20281445</id><snippet>import urllib2
from bs4 import BeautifulSoup as bs
query = 'carrot'
page = urllib2.urlopen('http://www.englishnepalidictionary.com/?q=%s' % query)
soup = bs(page.read())
soup.select('div.search-result h3')[0].text
&gt;&gt;&gt; carrot - गाजर 
</snippet></ROW><ROW><id>20281573</id><snippet>odbc</snippet></ROW><ROW><id>20281573</id><snippet>pywin32</snippet></ROW><ROW><id>20281573</id><snippet>import odbc
db = odbc.odbc('dsn/user/password')
</snippet></ROW><ROW><id>20281573</id><snippet>pyodbc</snippet></ROW><ROW><id>20281573</id><snippet>import pyodbc
db = pyodbc.connect('Driver={SQL Server Native Client 10.0};Server=myServerAddress;Database=myDataBase;Uid=myUsername;Pwd=myPassword;')
</snippet></ROW><ROW><id>20281573</id><snippet>import odbc

source =  odbc.SQLDataSources(odbc.SQL_FETCH_FIRST)
while source:
    print(source)
    source =  odbc.SQLDataSources(odbc.SQL_FETCH_NEXT)
</snippet></ROW><ROW><id>20281604</id><snippet>&gt;&gt;&gt; @singleton
&gt;&gt;&gt; class cls(object):
...    pass
</snippet></ROW><ROW><id>20281604</id><snippet>&gt;&gt;&gt; class cls(object):
...    pass
&gt;&gt;&gt; cls = singleton( cls )
</snippet></ROW><ROW><id>20281604</id><snippet>singleton</snippet></ROW><ROW><id>20281604</id><snippet>get_instance</snippet></ROW><ROW><id>20281604</id><snippet>singleton</snippet></ROW><ROW><id>20281604</id><snippet>instances</snippet></ROW><ROW><id>20281604</id><snippet>cls</snippet></ROW><ROW><id>20281604</id><snippet>cls</snippet></ROW><ROW><id>20281604</id><snippet>&gt;&gt;&gt; cls
&lt;function get_instance at 0x0000000002352B38&gt;
</snippet></ROW><ROW><id>20281604</id><snippet>instances</snippet></ROW><ROW><id>20281604</id><snippet>get_instance</snippet></ROW><ROW><id>20282053</id><snippet>None</snippet></ROW><ROW><id>20282053</id><snippet>a = 'xxx xxx.suffix xxx xxx.suffix'
l = a.split()
patt = re.compile(r'(.*?)(\.suffix)?$')
print [patt.match(i).groups() for i in l]
</snippet></ROW><ROW><id>20282053</id><snippet>[('xxx', None), ('xxx', '.suffix'), ('xxx', None), ('xxx', '.suffix')]
</snippet></ROW><ROW><id>20282053</id><snippet>$</snippet></ROW><ROW><id>20282053</id><snippet>patt = re.compile(r'(.*?)(\.suffix|)$')
</snippet></ROW><ROW><id>20282053</id><snippet>''</snippet></ROW><ROW><id>20282053</id><snippet>None</snippet></ROW><ROW><id>20282053</id><snippet>print [p[:2] for p in (i.partition('.suffix') for i in l)]
</snippet></ROW><ROW><id>20282053</id><snippet>[('xxx', ''), ('xxx', '.suffix'), ('xxx', ''), ('xxx', '.suffix')]
</snippet></ROW><ROW><id>20282053</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit(lambda: [p[:2] for p in (i.partition('.suffix') for i in l)])
2.1371913756093956
&gt;&gt;&gt; timeit.timeit(lambda: [patt.match(i).groups() for i in l])
5.259215670919147
</snippet></ROW><ROW><id>20282186</id><snippet>instance</snippet></ROW><ROW><id>20282186</id><snippet>instance</snippet></ROW><ROW><id>20282186</id><snippet>get_instance</snippet></ROW><ROW><id>20282186</id><snippet>instance</snippet></ROW><ROW><id>20282186</id><snippet>get_instance</snippet></ROW><ROW><id>20282186</id><snippet>nonlocal instance</snippet></ROW><ROW><id>20282186</id><snippet>get_instance</snippet></ROW><ROW><id>20282194</id><snippet>if request.user.is_authenticated():
</snippet></ROW><ROW><id>20282194</id><snippet>auth_login</snippet></ROW><ROW><id>20282194</id><snippet>{% if user.is_authenticated %}
    &lt;p&gt;Welcome, {{ user.username }}. Thanks for logging in.&lt;/p&gt;
{% else %}
    &lt;p&gt;Welcome, new user. Please &lt;a href={% url 'login_url' %}&gt;log in&lt;/a&gt;.&lt;/p&gt;
{% endif %}
</snippet></ROW><ROW><id>20282194</id><snippet>def my_view(request):
   if not request.user.is_authenticated():
        return redirect('/login/')
</snippet></ROW><ROW><id>20282194</id><snippet>def login_app(request):
    ...
    if request.user.is_authenticated():
        #tell user he has login successful，or redict other page
    else:
        username = request.POST.get('username', '')
        password = request.POST.get('password', '')
        user = authenticate(username=username, password=password)
        if user is not None and user.is_active:
            auth_login(request, user)
        #tell user he login successfull
</snippet></ROW><ROW><id>20282334</id><snippet>$</snippet></ROW><ROW><id>20282334</id><snippet>re.sub(r'^~ ','@','~ Summary\n')
</snippet></ROW><ROW><id>20282699</id><snippet>T</snippet></ROW><ROW><id>20282699</id><snippet>A[i]</snippet></ROW><ROW><id>20282699</id><snippet>A[i]</snippet></ROW><ROW><id>20282699</id><snippet>T[A[i]]</snippet></ROW><ROW><id>20282699</id><snippet>A[i]</snippet></ROW><ROW><id>20283177</id><snippet>&gt;&gt;&gt; hex(0x52ed &gt;&gt; 8)
'0x52'
</snippet></ROW><ROW><id>20283289</id><snippet>SyntaxError</snippet></ROW><ROW><id>20283289</id><snippet>fin</snippet></ROW><ROW><id>20283289</id><snippet>fin[n]</snippet></ROW><ROW><id>20283289</id><snippet>IndexError</snippet></ROW><ROW><id>20283289</id><snippet>k2</snippet></ROW><ROW><id>20283289</id><snippet>l3</snippet></ROW><ROW><id>20283289</id><snippet>k1</snippet></ROW><ROW><id>20283289</id><snippet>l1</snippet></ROW><ROW><id>20283289</id><snippet>NameError</snippet></ROW><ROW><id>20283289</id><snippet>b</snippet></ROW><ROW><id>20283289</id><snippet>a</snippet></ROW><ROW><id>20283289</id><snippet>fin.append(b)</snippet></ROW><ROW><id>20283366</id><snippet>inputs = {'a': 1, 'b': 2, 'c', 3} #dictionaries are better for what you need to do
outputs = {'d':4, 'e':5, 'f': 6} 

foo = open('test.txt', 'wb')

foo.write('\t\t test \n\n\n')
foo.write('\t\t--------------Input-----------------\n\n')

for input, value in inputs.items(): #items will generate a list of tuples
    foo.write('{0} = {1}'.format(input, value)) #or any other formatting you'd like
    foo.write('\n')
</snippet></ROW><ROW><id>20283400</id><snippet>def display_user_content(self, details):
    self.user_sizer.Clear(True)
    self.single_user_sizer = wx.GridSizer(cols=2, hgap=5, vgap=5)
    for each in details:
        #Get username
        self.username_sizer = wx.BoxSizer(wx.HORIZONTAL)
        username = each[0]
        #Get location of image file
        location = each[-1]
        #Create static text to contain username
        stat = wx.StaticText(self, -1, 'username')
        #Load image from location and convert to bitmap.
        png = wx.Image(location, wx.BITMAP_TYPE_ANY).ConvertToBitmap()
        #Create bitmap
        avatar = wx.StaticBitmap(self, -1, png)
        #Add to sizer
        self.single_user_sizer.Add(avatar, 0)
        self.username_sizer.Add(stat, 0)
        self.single_user_sizer.Add(self.username_sizer, 0)
    #Add each users sizer to main user sizer
    self.user_sizer.Add(self.single_user_sizer, 0)
    #Add main user sizer to widget sizer
    #self.widget_sizer.Add(self.user_sizer, 0)
    self.Fit()
</snippet></ROW><ROW><id>20283582</id><snippet>sorted(a, key=lambda p: map(str.strip, p.split(',')[::-1]))
</snippet></ROW><ROW><id>20283582</id><snippet>str.strip</snippet></ROW><ROW><id>20283582</id><snippet>&gt;&gt;&gt; a = ["Asia/Pacific", "North America", "India,Asia/Pacific", "China, Asia/Pacific", "New Delhi, India, Asia/Pacific", "Bangalore, India,Asia/Pacific",  "Shangai, China, Asia/Pacific", "US, North America", "New York, US, North America"]
&gt;&gt;&gt; sorted(a, key=lambda p: map(str.strip, p.split(',')[::-1]))
['Asia/Pacific', 'China, Asia/Pacific', 'Shangai, China, Asia/Pacific', 'India,Asia/Pacific', 'Bangalore, India,Asia/Pacific', 'New Delhi, India, Asia/Pacific', 'North America', 'US, North America', 'New York, US, North America']
</snippet></ROW><ROW><id>20283983</id><snippet>Asset</snippet></ROW><ROW><id>20283983</id><snippet>class Asset(models.Model):
    ...
    class Meta:
        app_label = 'assets'
    ...
</snippet></ROW><ROW><id>20284109</id><snippet>class MyTestCase(unittest.TestCase):

    def request_with_role(self, path, method='GET', role='admin', *args, **kwargs):
        '''
        Make an http request with the given role in the session
        '''
        with self.app.test_client() as c:
            with c.session_transaction() as sess:
                sess['role'] = role
            kwargs['method'] = method
            kwargs['path'] = path
            return c.open(*args, **kwargs)

    def test_my_thing(self):
        review = {'company': 'test', 'rating':10}
        resp = self.request_with_role(
            '/review/create/123',
            method='POST',
            data=json.dumps(review),
        )
        ....
</snippet></ROW><ROW><id>20284109</id><snippet>request_as_user</snippet></ROW><ROW><id>20284109</id><snippet>session['_id'] = user.id
session['role'] = user.role
</snippet></ROW><ROW><id>20284206</id><snippet>_default_manager</snippet></ROW><ROW><id>20284206</id><snippet>&gt;&gt;&gt; m=Model1.objects.all()[0]
&gt;&gt;&gt; m._default_manager
&lt;django.db.models.manager.Manager object at 0x2a38b90&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20284222</id><snippet>set</snippet></ROW><ROW><id>20284222</id><snippet>&gt;&gt;&gt; len(set(x)) == 1
True
&gt;&gt;&gt; len(set(y)) == 1
False
</snippet></ROW><ROW><id>20284222</id><snippet>from timeit import timeit

# All the same
print timeit('len(set([2, 2, 2, 2])) == 1')
# 0.843292317054

# Not the same
print timeit('len(set([2, 1, 2, 2])) == 1')
# 0.869108628247

## Without set ##

# AlL the same
print timeit('all(item == x[0] for item in x)', setup='x = [2,2,2,2]')
# 1.20339177387

# Not the same
print timeit('all(item == x[0] for item in x)', setup='x = [2, 1, 2, 2]')
# 1.42827283125
</snippet></ROW><ROW><id>20284222</id><snippet>set</snippet></ROW><ROW><id>20284403</id><snippet>target=func1()</snippet></ROW><ROW><id>20284403</id><snippet>t1 = threading.Thread(target=func1, name = "1")
t2 = threading.Thread(target=func2, name = "2")
</snippet></ROW><ROW><id>20284403</id><snippet>import threading, time

def func1(lock):
    for j in range (10):
        with lock:
            print(str(time.ctime(time.time())) + " 1")
        time.sleep(0.5)


def func2(lock):
    for j in range (10):
        with lock:
            print(str(time.ctime(time.time())) + " 2")
        time.sleep(0.5)

lock = threading.Lock()
t1 = threading.Thread(target = func1, name = " 1", args=(lock,))
t2 = threading.Thread(target = func2, name = " 2", args=(lock,))
</snippet></ROW><ROW><id>20284552</id><snippet>import</snippet></ROW><ROW><id>20284552</id><snippet>using &lt;namespace&gt;</snippet></ROW><ROW><id>20284552</id><snippet>import System.Xml</snippet></ROW><ROW><id>20284552</id><snippet>clr.AddReference("myAssembly.dll")</snippet></ROW><ROW><id>20284552</id><snippet>import</snippet></ROW><ROW><id>20284552</id><snippet>import clr
clr.AddReferenceToFileAndPath(r"..\lib\umbraco.dll")
import umbraco
</snippet></ROW><ROW><id>20284552</id><snippet>umbraco</snippet></ROW><ROW><id>20285275</id><snippet>T.log(self.p_y_give_x)</snippet></ROW><ROW><id>20286095</id><snippet>position()</snippet></ROW><ROW><id>20286095</id><snippet>//table/tr/td/table/tr/td/table/tr/td/table/tr[(position() mod 3) != 0]
</snippet></ROW><ROW><id>20286095</id><snippet>@valign</snippet></ROW><ROW><id>20286095</id><snippet>//table/tr/td/table/tr/td/table/tr/td/table/tr[@valign = 'top']
</snippet></ROW><ROW><id>20286133</id><snippet>epoch_creation_date_1_related_hashtags_1</snippet></ROW><ROW><id>20286133</id><snippet>related_hashtags_1</snippet></ROW><ROW><id>20286133</id><snippet>epoch_creation_date_1</snippet></ROW><ROW><id>20286133</id><snippet>epoch_creation_date_1</snippet></ROW><ROW><id>20286133</id><snippet>'epoch_creation_date': {'$exists': True}</snippet></ROW><ROW><id>20286133</id><snippet>{"_id": 0, "related_hashtags":1}</snippet></ROW><ROW><id>20286133</id><snippet>related_hashtags</snippet></ROW><ROW><id>20286133</id><snippet>epoch_creation_date</snippet></ROW><ROW><id>20286601</id><snippet>unicode(record[0])
</snippet></ROW><ROW><id>20286601</id><snippet>unicode</snippet></ROW><ROW><id>20286601</id><snippet>ascii</snippet></ROW><ROW><id>20286601</id><snippet>unicode(ascii(record[0]))
</snippet></ROW><ROW><id>20286601</id><snippet>encoding</snippet></ROW><ROW><id>20286601</id><snippet>latin-1</snippet></ROW><ROW><id>20286601</id><snippet>unicode(record[0], encoding='latin-1')
</snippet></ROW><ROW><id>20286601</id><snippet>&gt;&gt;&gt; s = "Schüller"
&gt;&gt;&gt; unicode(s, encoding='latin-1')
u'Sch\xfcller'
</snippet></ROW><ROW><id>20286646</id><snippet>sklearn.cross_validation.train_test_split</snippet></ROW><ROW><id>20286688</id><snippet>from graphic import *

def main():
    repeat = 5
    diameter = 40
    radius = diameter // 2
    offset = radius // 2

    win = GraphWin("Graphic Design", diameter*repeat + offset, diameter*repeat)
    win.setBackground('white')

    for i in range(repeat):
        for j in range(repeat):
            draw_symbol(win, i % 2,
                        Point(i*diameter + offset, j*diameter), radius, 'red')

    win.getMouse()
    win.close()

def draw_symbol(win, kind, lower_left, radius, colour):
    centre = Point(lower_left.x+radius, lower_left.y+radius)
    circle = Circle(centre, radius)
    circle.setOutline('')
    circle.setFill(colour)
    circle.draw(win)

    if kind == 0:
        rectangle = Rectangle(lower_left,
                             Point(lower_left.x+radius, lower_left.y+radius*2))
    else:
        rectangle = Rectangle(lower_left,
                             Point(lower_left.x+radius*2, lower_left.y+radius))
    rectangle.setOutline('white')
    rectangle.setFill('white')
    rectangle.draw(win)

    circle = Circle(centre, radius)
    circle.setWidth(1)
    circle.setOutline(colour)
    circle.setFill('')
    circle.draw(win)

main()
</snippet></ROW><ROW><id>20286810</id><snippet>/usr/bin/bash -c "APSHOME=/all/aps/msc_2012; export APSHOME; "
</snippet></ROW><ROW><id>20286946</id><snippet>logging</snippet></ROW><ROW><id>20286946</id><snippet>import logging
logger = logging.getLogger(__name__)


def func1(*params):
    logger.debug("BEGIN func1(%s)", (params,))
    session = Session()

    try:
        do_something_with(params)

    except Exception as e:
        logger.exception("FAILED func1(%s)", (params,))

        logger.debug("ROLLINGBACK func1(%s)", (params,))
        session.rollback()
        logger.debug("ROLLEDBACK func1(%s)", (params,))

        # if you don't handle exceptions let them propagate, thanks
        raise 

    else:
        logger.debug("SUCCEEDED func1(%s)", (params,))
        # don't you need a session.commit() somewhere ???

    finally:
        logger.debug("CLOSING func1(%s)", (params,))
        session.close()
        logger.debug("CLOSED func1(%s)", (params,))
</snippet></ROW><ROW><id>20286946</id><snippet>def manage(func):
    def wrapper(*args, **kw):
        session = Session()
        try:
            logger.debug("BEGIN %s(%s, %s)", (func, args,kw))
            result = func(*args, **kw)
            logger.debug("SUCCEEDED %s(%s, %s)", (func, args,kw))
            # don't you need a session.commit() somewhere ???
            return result

        except Exception as e:
            logger.exception("FAILED %s(%s, %s)", (func, args,kw))

            logger.debug("ROLLINGBACK %s(%s, %s)", (func, args,kw))
            session.rollback()
            logger.debug("ROLLEDBACK %s(%s, %s)", (func, args,kw))

            # if you don't handle exceptions let them propagate, thanks
            raise 


        finally:
            logger.debug("CLOSING %s(%s, %s)", (func, args,kw))
            session.close()
            logger.debug("CLOSED %s(%s, %s)", (func, args,kw))

    return wrapper    

    @manage
    def func1(*params):
        do_something_with(params)
</snippet></ROW><ROW><id>20287233</id><snippet>str(p)</snippet></ROW><ROW><id>20287233</id><snippet>p</snippet></ROW><ROW><id>20287233</id><snippet>print unicode(p)</snippet></ROW><ROW><id>20287303</id><snippet>objects = {}
objects['object1'] = classTest.Test("Unn")
objects['object2'] = classTest.Test("Tss")
runThis = input("Type in either object1 or object2:")
objects[runThis].method_a()
</snippet></ROW><ROW><id>20287303</id><snippet>globals()</snippet></ROW><ROW><id>20287344</id><snippet>_</snippet></ROW><ROW><id>20287344</id><snippet>_, arg2 = myFunction(arg1, arg2)
</snippet></ROW><ROW><id>20287344</id><snippet>_</snippet></ROW><ROW><id>20287344</id><snippet>arg2 = myFunction(arg1, arg2)[-1]
</snippet></ROW><ROW><id>20287344</id><snippet>arg2, arg3 = returnsMoreThanTwo(arg1, arg2)[-2:]
</snippet></ROW><ROW><id>20287344</id><snippet>_</snippet></ROW><ROW><id>20287344</id><snippet>arg1, _, _, arg4 = returnsFourArguments(arg1, arg2)
</snippet></ROW><ROW><id>20287755</id><snippet>bitmap = wx.Bitmap(location)
dc = wx.MemoryDC(bitmap)
text = 'whatever'
w, h = dc.GetSize()
tw, th = dc.GetTextExtent(text)
dc.DrawText(text, w - tw / 2, h - th / 2)
del dc
control = wx.StaticBitmap(self, -1, bitmap)
</snippet></ROW><ROW><id>20287877</id><snippet>overrideredirect</snippet></ROW><ROW><id>20287877</id><snippet>self.root.attributes('-fullscreen', True)</snippet></ROW><ROW><id>20287877</id><snippet>self.root.overrideredirect(True)</snippet></ROW><ROW><id>20287877</id><snippet>self.root.after(5000, self.root.destroy)</snippet></ROW><ROW><id>20287877</id><snippet>fullscreen</snippet></ROW><ROW><id>20287877</id><snippet>overrideredirect</snippet></ROW><ROW><id>20287877</id><snippet>Entry()</snippet></ROW><ROW><id>20287877</id><snippet>Button()</snippet></ROW><ROW><id>20287877</id><snippet>overrideredirect</snippet></ROW><ROW><id>20287877</id><snippet>import Tkinter as tk

class App():
    def __init__(self):
        self.root = tk.Tk()

        # this works

        self.root.attributes('-fullscreen', True)

        # this doesn't work

        #self.root.overrideredirect(True)
        #self.root.geometry("800x600+100+100") # to see console behind
        #self.root.after(5000, self.appexit) # to kill program after 5s

        self.root.bind('q', self.q_pressed)

        tk.Label(text="some text here").grid()
        e = tk.Entry(self.root)
        e.grid()
        e.focus() # focus doesn't work with overrideredirect 

        tk.Button(self.root, text='Quit', command=self.appexit).grid()

        self.root.mainloop()

    def q_pressed(self, event):
        print "q_pressed"
        self.root.destroy()

    def appexit(self):
        print "appexit"
        self.root.destroy()

App()
</snippet></ROW><ROW><id>20287925</id><snippet>try:
   # mycode
except (AttributeError, TypeError, ValueError):
   # catches any of the tree exception types
</snippet></ROW><ROW><id>20287925</id><snippet>try</snippet></ROW><ROW><id>20287925</id><snippet>try</snippet></ROW><ROW><id>20287993</id><snippet>class Foo(object):
    def eggs(self):
        print eggs()

class Bar(Foo):
    def ham(self):
        print eggs()
</snippet></ROW><ROW><id>20287993</id><snippet>eggs</snippet></ROW><ROW><id>20287993</id><snippet>Foo.eggs</snippet></ROW><ROW><id>20287993</id><snippet>Bar.ham</snippet></ROW><ROW><id>20288178</id><snippet>$ cat t.txt 
Nov 29 13:20:33 Debian sshd[4043]: Accepted password for patrick from ::1 port 50864 ssh2
Nov 29 13:20:33 Debian sshd[4043]: pam_unix(sshd:session): session opened for user patrick by (uid=0)
Nov 29 13:21:23 Debian sshd[4043]: pam_unix(sshd:session): session closed for user patrick
$ cat t.py 
#/usr/bin/env python
for line in open('t.txt'):
    if "sshd" in line:
        if "Accepted password" in line:
            print "User: ", line.split()[8]
            print "IP: ", line.split()[10]
        if "session closed" in line:
            print "User: ", line.split()[10]
$ python t.py 
User:  patrick
IP:  ::1
User:  patrick
</snippet></ROW><ROW><id>20288178</id><snippet>if "sshd" in line:</snippet></ROW><ROW><id>20288426</id><snippet>for cur, nxt in pairwise('abc'):
    print cur, 'and', nxt
</snippet></ROW><ROW><id>20288426</id><snippet>a and b
b and c
</snippet></ROW><ROW><id>20288426</id><snippet>pairwise</snippet></ROW><ROW><id>20288426</id><snippet>def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)
</snippet></ROW><ROW><id>20288506</id><snippet>__add__</snippet></ROW><ROW><id>20288506</id><snippet>FakeDate()</snippet></ROW><ROW><id>20288506</id><snippet>class FakeDate(datetime.date):
     @classmethod
     def today(cls):
         return cls(1999, 12, 31)
     def __add__(self, other):
         res = super(FakeDate, self).__add__(other)
         return type(self)(res.year, res.month, res.day)
</snippet></ROW><ROW><id>20288506</id><snippet>&gt;&gt;&gt; class FakeDate(datetime.date):
...      @classmethod
...      def today(cls):
...          return cls(1999, 12, 31)
...      def __add__(self, other):
...          res = super(FakeDate, self).__add__(other)
...          return type(self)(res.year, res.month, res.day)
... 
&gt;&gt;&gt; FakeDate.today() + datetime.timedelta(days=1)
FakeDate(2000, 1, 1)
</snippet></ROW><ROW><id>20288506</id><snippet>datetime.date</snippet></ROW><ROW><id>20288506</id><snippet>FakeDate()</snippet></ROW><ROW><id>20288545</id><snippet>...
&lt;div id="formulir"&gt;
    &lt;form action="" method="POST" enctype="multipart/form-data"&gt;
        {% csrf_token %}
        &lt;div class="label"&gt;Username&lt;/div&gt;&lt;div class="input"&gt;&lt;input type="text" name="username"/&gt;&lt;/div&gt;
        &lt;div class="label"&gt;Email&lt;/div&gt;&lt;div class="input"&gt;&lt;input type="text" name="email"/&gt;&lt;/div&gt;
        &lt;input type="submit" name="tambah" value="Add"/&gt;

        {% for i in data %}
            &lt;input type="hidden" name="username" value="{{ i.username }}"/&gt;
            &lt;input type="hidden" name="email" value="{{ i.email }}"/&gt;
        {% endfor %}

    &lt;/form&gt;
&lt;/div&gt;
....
</snippet></ROW><ROW><id>20288545</id><snippet>data</snippet></ROW><ROW><id>20288545</id><snippet>{{ i.username }}</snippet></ROW><ROW><id>20288545</id><snippet>def home(request):
    data = []
    if request.POST:
        username = request.POST.getlist('username')
        email = request.POST.getlist('email')
        data = [{'username': u, 'email': e} for u, e in zip(username, email)]
        return render_to_response('data.html', locals(),
            context_instance=RequestContext(request))
    return render_to_response('index.html', locals(),
            context_instance=RequestContext(request))
</snippet></ROW><ROW><id>20288859</id><snippet>from win32com.client import constants
import win32com.client
speaker = win32com.client.Dispatch("SAPI.SpVoice")

d = {'a':'alfa', 'b':'bravo', 'c':'charlie', 'd':'delta', 'e':'echo', 'f':'foxtrot',
 'g':'golf', 'h':'hotel', 'i':'india', 'j':'juliett', 'k':'kilo', 'l':'lima',
 'm':'mike', 'n':'november', 'o':'oscar', 'p':'papa', 'q':'quebec', 'r':'romeo',
 's':'sierra', 't':'tango', 'u':'uniform', 'v':'victor', 'w':'whiskey', 
 'x':'x-ray', 'y':'yankee', 'z':'zulu'}
speaker.speak("Hello.. Please write a line you want me to say")
print ("Type your text now:")
inp = input()
print ("Outputting...")
result = ' '.join(d[c.lower()] for c in inp)
speaker.speak(result)
</snippet></ROW><ROW><id>20288864</id><snippet>WsgiMounter</snippet></ROW><ROW><id>20288864</id><snippet>from spyne.util.wsgi_wrapper import WsgiMounter

app1 = Application([SomeService], tns=tns,
        in_protocol=Soap11(), out_protocol=Soap11())
app2 = Application([SomeOtherService], tns=tns,
        in_protocol=Soap11(), out_protocol=Soap11())
wsgi_app = WsgiMounter({
    'app1': app1,
    'app2': app2,
})
</snippet></ROW><ROW><id>20288864</id><snippet>wsgi_app</snippet></ROW><ROW><id>20288864</id><snippet>WsgiApplication</snippet></ROW><ROW><id>20288864</id><snippet>Service</snippet></ROW><ROW><id>20288864</id><snippet>def SomeServiceFactory():
    class SomeService(ServiceBase):
        @rpc(Unicode, _returns=Unicode)
        def echo_string(ctx, string):
            return string
    return SomeService
</snippet></ROW><ROW><id>20288864</id><snippet>SomeServiceFactory()</snippet></ROW><ROW><id>20288864</id><snippet>Application</snippet></ROW><ROW><id>20288864</id><snippet>app1 = Application([SomeServiceFactory()], tns=tns,
        in_protocol=Soap11(), out_protocol=Soap11())
app2 = Application([SomeServiceFactory()], tns=tns,
        in_protocol=Soap11(), out_protocol=Soap11())
</snippet></ROW><ROW><id>20289130</id><snippet>User.objects.create_user</snippet></ROW><ROW><id>20289130</id><snippet>check_password</snippet></ROW><ROW><id>20289130</id><snippet>login</snippet></ROW><ROW><id>20289130</id><snippet>authenticate</snippet></ROW><ROW><id>20289130</id><snippet>User.objects.create_user</snippet></ROW><ROW><id>20289130</id><snippet>&gt;&gt;&gt; from django.test import Client
&gt;&gt;&gt; c = Client()
&gt;&gt;&gt; user = User(username='test', password='test')
&gt;&gt;&gt; user.save()
&gt;&gt;&gt; c.login(username='test', password='test')
False
&gt;&gt;&gt; from django.contrib.auth import authenticate
&gt;&gt;&gt; authenticate(username='test', password='test') # =&gt; None
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20289130</id><snippet>User.objects.create_user</snippet></ROW><ROW><id>20289130</id><snippet>&gt;&gt;&gt; user2 = User.objects.create_user(username='test2', password='test')
&gt;&gt;&gt; c.login(username='test2', password='test')
True
&gt;&gt;&gt; authenticate(username='test2', password='test')
&lt;User: test2&gt;
&gt;&gt;&gt; user2.check_password('test')
True
</snippet></ROW><ROW><id>20289138</id><snippet>numpy.close</snippet></ROW><ROW><id>20289300</id><snippet>set</snippet></ROW><ROW><id>20289300</id><snippet>set &lt;key&gt; &lt;flags&gt; &lt;exptime&gt; &lt;bytes&gt;
</snippet></ROW><ROW><id>20289300</id><snippet>set a 0 0 5
</snippet></ROW><ROW><id>20289300</id><snippet>test</snippet></ROW><ROW><id>20289530</id><snippet>ax</snippet></ROW><ROW><id>20289530</id><snippet>nrow = 1; ncol = 2;
fig, axs = plt.subplots(nrows=nrow, ncols=nrow)

for ax in axs.reshape(-1):
  ax.set_ylabel(str(i))
</snippet></ROW><ROW><id>20289530</id><snippet>nrow = 1; ncol = 1;
fig, axs = plt.subplots(nrows=nrow, ncols=nrow)
axs = np.array(axs)

for ax in axs.reshape(-1):
  ax.set_ylabel(str(i))
</snippet></ROW><ROW><id>20289530</id><snippet>-1</snippet></ROW><ROW><id>20289646</id><snippet>#! /usr/bin/python2.7

from random import randrange

class Choker:
    def __init__(self,PeerManager):
        self.PM = PeerManager
    def connection_made(self, peer,p=None):
        if p == None:
            p = randrange(-2, len(self.PM.peers) + 1)
        self.PM.insert(max(p, 0), peer)

class PM:
    def __init__(self):
        self.peers = []
    def insert(self,pos,elem):
        self.peers.insert(pos,elem)

pm = PM()
choker = Choker(pm)
c1, c2, c3, c4 = 'C1', 'C2', 'C3', 'C4'
choker.connection_made(c1)
choker.connection_made(c2,1)
choker.connection_made(c3,1)
choker.connection_made(c4,1)

print (pm.peers)
</snippet></ROW><ROW><id>20289646</id><snippet>['C1', 'C4', 'C3', 'C2']</snippet></ROW><ROW><id>20289646</id><snippet>C1</snippet></ROW><ROW><id>20289646</id><snippet>C2</snippet></ROW><ROW><id>20289646</id><snippet>C3</snippet></ROW><ROW><id>20289646</id><snippet>C2</snippet></ROW><ROW><id>20289646</id><snippet>C4</snippet></ROW><ROW><id>20289646</id><snippet>C2</snippet></ROW><ROW><id>20289646</id><snippet>C3</snippet></ROW><ROW><id>20289646</id><snippet>rechoke</snippet></ROW><ROW><id>20289646</id><snippet>self.PM.peers = self.PM.peers[pos:] + self.PM.peers[:pos]
</snippet></ROW><ROW><id>20289673</id><snippet>from random import *

class Card:
    def __init__(self):
        self.rank = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        self.suit = ['s', 'h', 'c', 'd']
        self.card = choice(rank) + choice(suit)   
</snippet></ROW><ROW><id>20289673</id><snippet>self.card = choice(self.rank) + choice(self.suit)   
</snippet></ROW><ROW><id>20289673</id><snippet>rank</snippet></ROW><ROW><id>20289673</id><snippet>suit</snippet></ROW><ROW><id>20289673</id><snippet>self.card = choice(rank) + choice(suit)</snippet></ROW><ROW><id>20289673</id><snippet>self.rank</snippet></ROW><ROW><id>20289673</id><snippet>self.suit</snippet></ROW><ROW><id>20289673</id><snippet>class Card:
    def __init__(self):
        rank = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        suit = ['s', 'h', 'c', 'd']
        card = choice(rank) + choice(suit)   
        self.rank = rank
        self.suit = suit
        self.card = card
</snippet></ROW><ROW><id>20289943</id><snippet>def parse (s):
    #Just throwing away all parentheses and commata
    s = s.replace ('(', ' ').replace (')', ' ').replace (',', ' ')
    #Return reversed polish notation
    return s.split () [::-1]

def evaluate (ops):
    stack = []
    while ops:
        op = ops [0]
        ops = ops [1:]
        try:
            stack.append (int (op) )
            continue
        except: pass
        try:
            stack.append (float (op) )
            continue
        except: pass
        if op == 'add':
            arg1, arg2 = stack.pop (), stack.pop ()
            stack.append (arg1 + arg2)
            continue
        if op == 'multiply':
            arg1, arg2 = stack.pop (), stack.pop ()
            stack.append (arg1 * arg2)
            continue
        if op == 'abs':
            arg1 = stack.pop ()
            stack.append (abs (arg1) )
            continue
        raise Exception ('Unkown instruction "{}".'.format (op) )
    return stack [0]

ops = parse ('abs(multiply(4,add(-4,2)))')
print (evaluate (ops) )
ops = parse ('multiply add 1 2 add add 3 4 5')
print (evaluate (ops) )
</snippet></ROW><ROW><id>20289943</id><snippet>add(1,2,3,4)</snippet></ROW><ROW><id>20289943</id><snippet>add</snippet></ROW><ROW><id>20289943</id><snippet>add add add 1 2 3 4</snippet></ROW><ROW><id>20289943</id><snippet>if</snippet></ROW><ROW><id>20289943</id><snippet>class Operator:
    def __init__ (self, argc, f):
        self.argc = argc
        self.f = f

    def __call__ (self, *args):
        return self.f (*args)
</snippet></ROW><ROW><id>20289943</id><snippet>evaluate</snippet></ROW><ROW><id>20289943</id><snippet>#! /usr/bin/python3

from random import randrange

class Operator:
    def __init__ (self, argc, f):
        self.argc = argc
        self.f = f

    def __call__ (self, *args):
        return self.f (*args)

def parse (s):
    s = s.replace ('(', ' ').replace (')', ' ').replace (',', ' ')
    return s.split () [::-1]

def evaluate (ops):
    stack = []
    while ops:
        op = ops [0]
        ops = ops [1:]
        try:
            stack.append (int (op) )
            continue
        except: pass
        try:
            stack.append (float (op) )
            continue
        except: pass
        try:
            operator = operators [op]
        except:
            raise Exception ('Unkown operator {}'.format (op) )
        args = [stack.pop () for _ in range (operator.argc) ]
        stack.append (operator (*args) )
    return stack [0]

operators = {
    'add': Operator (2, lambda a, b: a + b),
    'sub': Operator (2, lambda a, b: a - b),
    'mul': Operator (2, lambda a, b: a * b),
    'div': Operator (2, lambda a, b: a / b),
    'pow': Operator (2, lambda a, b: a ** b),
    'floor': Operator (1, lambda a: int (a) ),
    'abs': Operator (1, lambda a: abs (a) ),
    }

n = int (input ('Which fibonacci number do you want: ') )
fib = 'floor add div pow div add 1 pow 5 .5 2 {} pow 5 .5 .5'.format (n)
#or if you like parentheses: 'floor(add(div(pow(div(add(1,pow(5,.5)),2),{}),pow(5,.5)),.5))'
ops = parse (fib)
print ('F({}) = {}'.format (n, evaluate (ops) ) )
</snippet></ROW><ROW><id>20290134</id><snippet>%</snippet></ROW><ROW><id>20290134</id><snippet>for n, obj in enumerate(objects):
    print n, obj, colors[n % len(colors)]
</snippet></ROW><ROW><id>20290134</id><snippet>zip()</snippet></ROW><ROW><id>20290134</id><snippet>itertools.cycle()</snippet></ROW><ROW><id>20290134</id><snippet>from itertools import cycle

for n, (obj, color) in enumerate(zip(objects, cycle(colors))):
    print n, obj, color
</snippet></ROW><ROW><id>20290134</id><snippet>&gt;&gt;&gt; objects = ['pencil','pen','keyboard','table','phone']
&gt;&gt;&gt; colors  = ['red','green','blue']
&gt;&gt;&gt; for n, obj in enumerate(objects):
...     print n, obj, colors[n % len(colors)]
... 
0 pencil red
1 pen green
2 keyboard blue
3 table red
4 phone green
&gt;&gt;&gt; from itertools import cycle
&gt;&gt;&gt; for n, (obj, color) in enumerate(zip(objects, cycle(colors))):
...     print n, obj, color
... 
0 pencil red
1 pen green
2 keyboard blue
3 table red
4 phone green
</snippet></ROW><ROW><id>20290143</id><snippet>def register_user(request):
    args = {}
    args.update(csrf(request))
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        args['form'] = form
        if form.is_valid():           
            form.save()

            return HttpResponseRedirect('/accounts/register_success')
    else:
        args['form'] = RegistrationForm()   

    return render_to_response('user_profile/register.html', args, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>20290271</id><snippet>from requests import Request, Session

def authentication(self, req):
    signup = md5(str(req.body)).hexdigest()
    req.headers['Authorization'] = signup

s = Session()
req = Request('GET', url)
prepped = s.prepare_request(req)
authentication(prepped)

resp = s.send(prepped)
</snippet></ROW><ROW><id>20290440</id><snippet>syncdb</snippet></ROW><ROW><id>20290481</id><snippet>hash(text)</snippet></ROW><ROW><id>20290481</id><snippet>hashlib</snippet></ROW><ROW><id>20290611</id><snippet>int(round(the_probability * 1000))</snippet></ROW><ROW><id>20290611</id><snippet>heapq</snippet></ROW><ROW><id>20290611</id><snippet>syms = ['a','b','c','d','e']
weights = [30, 25, 20, 15, 10]
t = encode(syms, weights)
print t
</snippet></ROW><ROW><id>20290611</id><snippet>[abcde,,
    ([ab,0,
        ([a,00,(None),(None)]),
        ([b,01,(None),(None)])]),
    ([cde,1,
        ([c,10,(None),(None)]),
        ([de,11,
            ([d,110,(None),(None)]),
            ([e,111,(None),(None)])])])]
</snippet></ROW><ROW><id>20290611</id><snippet>class Node(object):
    def __init__(self, data=None, weight=None,
                       left=None, right=None,
                       code=None):
        self.data = data
        self.weight = weight
        self.left = left
        self.right = right
        self.code = code

    def is_symbol(self):
        return self.left is self.right is None

    def __repr__(self):
        return "[%s,%s,(%s),(%s)]" % (self.data,
                                      self.code,
                                      self.left,
                                      self.right)

    def __cmp__(self, a):
        return cmp(self.weight, a.weight)

def encode(syms, weights):
    from heapq import heapify, heappush, heappop

    tree = [Node(data=s, weight=w)
            for s, w in zip(syms, weights)]
    sym2node = {s.data: s for s in tree}
    heapify(tree)
    while len(tree) &gt; 1:
        a, b = heappop(tree), heappop(tree)
        heappush(tree, Node(weight=a.weight + b.weight,
                            left=a, right=b))

    # Compute code lengths for the canonical coding.
    sym2len = {}
    def assign_codelen(node, codelen):
        if node is not None:
            if node.is_symbol():
                sym2len[node.data] = codelen
            else:
                assign_codelen(node.left, codelen + 1)
                assign_codelen(node.right, codelen + 1)
    assign_codelen(tree[0], 0)

    # Create canonical codes, but with a twist:  instead
    # of ordering symbols alphabetically, order them by
    # their position in the `syms` list.
    # Construct a list of (codelen, index, symbol) triples.
    # `index` breaks ties so that symbols with the same
    # code length retain their original ordering.
    triples = [(sym2len[name], i, name)
                for i, name in enumerate(syms)]
    code = oldcodelen = 0
    for codelen, _, name in sorted(triples):
        if codelen &gt; oldcodelen:
            code &lt;&lt;= (codelen - oldcodelen)
        sym2node[name].code = format(code, "0%db" % codelen)
        code += 1
        oldcodelen = codelen

    # Create a tree corresponding to the new codes.
    tree = Node(code="")
    dir2attr = {"0": "left", "1": "right"}
    for snode in sym2node.values():
        scode = snode.code
        codesofar = ""
        parent = tree
        # Walk the tree creating any needed interior nodes.
        for d in scode:
            assert parent is not None
            codesofar += d
            attr = dir2attr[d]
            child = getattr(parent, attr)
            if codesofar == scode:
                # We're at the leaf position.
                assert child is None
                setattr(parent, attr, snode)
            elif child is not None:
                assert child.code == codesofar
            else:
                child = Node(code=codesofar)
                setattr(parent, attr, child)
            parent = child

    # Finally, paste the `data` attributes together up
    # the tree.  Why?  Don't know ;-)
    def paste(node):
        if node is None:
            return ""
        elif node.is_symbol():
            return node.data
        else:
            result = paste(node.left) + paste(node.right)
            node.data = result
            return result
    paste(tree)

    return tree
</snippet></ROW><ROW><id>20290611</id><snippet>        syms = list(enumerate(syms))
</snippet></ROW><ROW><id>20290611</id><snippet>syms</snippet></ROW><ROW><id>20290611</id><snippet>['a', 'b', 'a']
</snippet></ROW><ROW><id>20290611</id><snippet>[(0, 'a'), (1, 'b'), (2, 'a')]
</snippet></ROW><ROW><id>20290611</id><snippet>paste()</snippet></ROW><ROW><id>20290611</id><snippet>    def restore_syms(node):
        if node is None:
            return
        elif node.is_symbol():
            node.data = node.data[1]
        else:
            restore_syms(node.left)
            restore_syms(node.right)
    restore_syms(tree)
</snippet></ROW><ROW><id>20290611</id><snippet>.data</snippet></ROW><ROW><id>20290611</id><snippet>sym2node.values()</snippet></ROW><ROW><id>20290611</id><snippet>.data</snippet></ROW><ROW><id>20290663</id><snippet>from django.conf.urls.defaults import *
from views import views

urlpatterns = patterns('',
     (r'^/us/$', views.american_time),
     (r'^/ca/$', views.canadian_time),
)
</snippet></ROW><ROW><id>20290667</id><snippet>path_to_my_profile</snippet></ROW><ROW><id>20290667</id><snippet>from selenium import webdriver
from selenium.webdriver.firefox.webdriver import FirefoxProfile

profile = FirefoxProfile(path_to_my_profile)
driver = webdriver.Firefox(profile)
</snippet></ROW><ROW><id>20290667</id><snippet>FirefoxProfile</snippet></ROW><ROW><id>20290667</id><snippet>None</snippet></ROW><ROW><id>20290760</id><snippet>from dropbox.client import DropboxClient
from collections import defaultdict

client = DropboxClient('&lt;YOUR ACCESS TOKEN&gt;')

sizes = {}
cursor = None
while cursor is None or result['has_more']:
    result = client.delta(cursor)
    for path, metadata in result['entries']:
        sizes[path] = metadata['bytes'] if metadata else 0
    cursor = result['cursor']

foldersizes = defaultdict(lambda: 0)
for path, size in sizes.items():
    segments = path.split('/')
    for i in range(1, len(segments)):
        folder = '/'.join(segments[:i])
        if folder == '': folder = '/'
        foldersizes[folder] += size

for folder in reversed(sorted(foldersizes.keys(), key=lambda x: foldersizes[x])):
    print '%s: %d' % (folder, foldersizes[folder])
</snippet></ROW><ROW><id>20290760</id><snippet>delta</snippet></ROW><ROW><id>20290760</id><snippet>from dropbox.client import DropboxClient

client = DropboxClient('&lt;YOUR ACCESS TOKEN&gt;')

def size(path):
    return sum(
        f['bytes'] if not f['is_dir'] else size(f['path'])
        for f in client.metadata(path)['contents']
    )

print size('/')
</snippet></ROW><ROW><id>20290760</id><snippet>/delta</snippet></ROW><ROW><id>20290760</id><snippet>sizes = {}
cursor = None
while cursor is None or result['has_more']:
    result = client.delta(cursor)
    for path, metadata in result['entries']:
        sizes[path] = metadata['bytes'] if metadata else 0
    cursor = result['cursor']

print sum(sizes.values())
</snippet></ROW><ROW><id>20290760</id><snippet>quota_info = client.account_info()['quota_info']
print quota_info['normal'] + quota_info['shared']
</snippet></ROW><ROW><id>20290852</id><snippet>','</snippet></ROW><ROW><id>20290852</id><snippet>\t</snippet></ROW><ROW><id>20290852</id><snippet>zip</snippet></ROW><ROW><id>20290852</id><snippet>izip</snippet></ROW><ROW><id>20290852</id><snippet>&gt;&gt;&gt; data = zip(*np.histogram(ValList,bins))
&gt;&gt;&gt; np.savetxt('test.txt', data, delimeter=',')
</snippet></ROW><ROW><id>20291078</id><snippet>&lt;h2&gt;</snippet></ROW><ROW><id>20291078</id><snippet>for h2 in soup.find_all('h2'):
    n = h2.next_element
    if n.name == 'a':  print n
</snippet></ROW><ROW><id>20291078</id><snippet>&lt;a href="/en/financial-administrator-accra-1"&gt;Financial Administrator&lt;/a&gt;
&lt;a href="/en/house-help-accra-17"&gt;House help&lt;/a&gt;
&lt;a href="/en/office-manager-accra-1"&gt;Office Manager &lt;/a&gt;
...
</snippet></ROW><ROW><id>20291279</id><snippet>Counter</snippet></ROW><ROW><id>20291279</id><snippet>def isin(a, b): return not (Counter(b) - Counter(a))
</snippet></ROW><ROW><id>20291279</id><snippet>&gt;&gt;&gt; isin([1, 1, 2, 4], [1, 2, 3])
False
&gt;&gt;&gt; isin([1, 1, 2, 3], [1, 2, 3])
True
&gt;&gt;&gt; isin([1, 1, 2, 4], [1, 2, 1])
True
&gt;&gt;&gt; isin([1, 2, 4], [1, 2, 1])
False
</snippet></ROW><ROW><id>20291293</id><snippet>virtualenv</snippet></ROW><ROW><id>20291436</id><snippet>key</snippet></ROW><ROW><id>20291436</id><snippet>c</snippet></ROW><ROW><id>20291436</id><snippet>h</snippet></ROW><ROW><id>20291436</id><snippet>&gt;&gt;&gt; max(d, key=lambda x: d[x]['c'] + d[x]['h'])
'b'
</snippet></ROW><ROW><id>20291461</id><snippet>patch_artist=True</snippet></ROW><ROW><id>20291461</id><snippet>boxplot</snippet></ROW><ROW><id>20291461</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = [np.random.normal(0, std, 1000) for std in range(1, 6)]
plt.boxplot(data, notch=True, patch_artist=True)

plt.show()
</snippet></ROW><ROW><id>20291461</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = [np.random.normal(0, std, 1000) for std in range(1, 6)]

box = plt.boxplot(data, notch=True, patch_artist=True)

colors = ['cyan', 'lightblue', 'lightgreen', 'tan', 'pink']
for patch, color in zip(box['boxes'], colors):
    patch.set_facecolor(color)

plt.show()
</snippet></ROW><ROW><id>20291574</id><snippet>chmod +x run.sh
</snippet></ROW><ROW><id>20291683</id><snippet>[0-9]\.?[0-9]?
</snippet></ROW><ROW><id>20291683</id><snippet>([0-9]+(?:\.[0-9]+)?)(?:\s)
</snippet></ROW><ROW><id>20291742</id><snippet>read</snippet></ROW><ROW><id>20291742</id><snippet>html = response.read
</snippet></ROW><ROW><id>20291742</id><snippet>read</snippet></ROW><ROW><id>20291742</id><snippet>html</snippet></ROW><ROW><id>20291742</id><snippet>()</snippet></ROW><ROW><id>20291742</id><snippet>html = response.read()
</snippet></ROW><ROW><id>20291742</id><snippet>html</snippet></ROW><ROW><id>20291742</id><snippet>read</snippet></ROW><ROW><id>20291819</id><snippet>with open('stuff.txt', 'r') as f:
    store = []
    for line in f:
        tup, num = line.split()
        tup = tuple(map(int, tup[1:-1].split(',')))
        num = int(num)

        store.append((tup, num))
    print sorted(store)
</snippet></ROW><ROW><id>20291819</id><snippet>Stuff.txt</snippet></ROW><ROW><id>20291819</id><snippet>(0,1)     5
(0,10)    2
(0,2)     3
(1,8)     7
(1,82)    5
(1,9)     4
</snippet></ROW><ROW><id>20291819</id><snippet>[(('0', '1'), 5), (('0', '2'), 3), (('0', '10'), 2), (('1', '8'), 7), (('1', '9'), 4), (('1', '82'), 5)]
</snippet></ROW><ROW><id>20291897</id><snippet>from pprint import pprint
import webbrowser
search = raw_input("Find this Song: ")
results= m.searchSong(search)
pprint(results)


sortedResultByTitle = m.sortByTitle(results)

print "Sorted by Title"

# expression: enumerate(sortedResultByTitle)
# explanation: this generates some kind of iterator, that puts the index of the every list-entry in front of it
# example: (0, first), (1, second), ... 
# 
# expression: list(enumerate(…))
# explanation: we know that enumerate returns some kind of iterator. for printing the contents, we have to build a sequence like a list.
# example: [ (0, first), (1, second), (2, third), ... ]
pprint(list(enumerate(sortedResultByTitle)))


"""
The following while-loop will continue looping until the break-statement is hit
and that will happen, if there is no error occurring within the try-clause
"""
while True:
    try:
        # throws an error, if input can not be converted to integer
        song_number = int(raw_input("Choose song by number: "))
        # throws an error, if song_number is not within those boundaries
        assert 0 &lt;= song_number &lt; len(sortedResultByTitle)
    except:
        print "Error"
    else:
        break

webbrowser.open_new_tab(sortedResultByTitle[song_number]['link'])
</snippet></ROW><ROW><id>20291897</id><snippet>class MusicLink(object):
    #...
    def searchSong(self,search):
        musicObject = self.loadData(dataFile)
        """
        The following code-line is a list-comprehension. (http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions)
        try to read it like a sentence
        Create a list of song(s) by taking every song in musicObject["LinkCollection"]
        but only if the lowercase search-string is within the song 's lowercase title 
        """
        return [song for song in musicObject["LinkCollection"] if search.lower() in song["title"].lower() ]
    #…
</snippet></ROW><ROW><id>20291897</id><snippet>import webbrowser
import json
from pprint import pprint
from operator import itemgetter
class MusicLink():
    """
    This class stores a list of songs.
    """
    #
    def __init__(self, lst = None):
        print "Karaoke"
        # you did not use any instance-variables in your class although this is the whole sense of writing a class:
        # store data in a structured way and use methods to deal with those data
        # that's the way to store an instance variable: self.instance_variable = value
        self._songlist = lst or []
        """
        a = lst or [] 
        # same like means
        if lst is None: # short and more general: if not lst:
            a = []
        else:
            a = lst 
        """
        #
    def loadData(self,dataFile):
        # you watched the video, so have heard about with... advantage: you don't have to close the file
        with open(dataFile) as json_data:
            # the json-data are stored in the class variable
            self._songlist = json.load(json_data)["LinkCollection"]
        #
    def searchSong(self,search):
        """
        The following code-line is a list-comprehension. (http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions)
        try to read it like a sentence
        Create a list of song(s) by taking every song in musicObject["LinkCollection"]
        but only if the lowercase search-string is within the song 's lowercase title 
        """
        return MusicLink([song for song in self._songlist if search.lower() in song["title"].lower() ])
        # instead of returning a list, I return a MusicLink-Object, so I can use all the other method on it
        #
    def sortByTitle(self):
        # instead of deliver the foundMedia it sorts the data in the instance-variable
        return MusicLink(sorted(self._songlist, key=itemgetter('title')))
        # sorted returns a list and that is what MusicLink needs to create a new, sorted instance
        #
    def sortByArtist(self):
        #pprint(foundMedia)
        # ^- I uncommented this line, because it is not good, if two similar functions like sortByTitle and sortByArtist differ in printing behaviour
        sortedByArtistList = sorted(self._songlist, key=itemgetter('artist'), reverse=True)
        return  MusicLink(sortedByArtistList)
        #
    def chooseSong(self):
        print "CHOOSE SONG BY NUMBER"
        pprint(dict(enumerate(self._songlist)))
        #
        while True:
            try:
                entered = int(raw_input('Enter your song number (not id):'))
                chosen_song = self._songlist[entered]
            except:
                # this happens, if var entered isnot int or if it is out of range of songlist
                print " -&gt; Not found!"
            else:
                print " -&gt; Play song..."
                break
        webbrowser.open_new_tab(chosen_song['link'])
</snippet></ROW><ROW><id>20291897</id><snippet>ml = MusicLink()
Karaoke

ml.loadData('jsontest.json')

ml.chooseSong()
CHOOSE SONG BY NUMBER
{0: {u'artist': u'Whitney Houston',
     u'id': 1,
     u'link': u'http://www.youtube.com/watch?v=3JWTaaS7LdU',
     u'title': u'I Will Always Love You'},
 1: {u'artist': u'Roberta Flack',
     u'id': 2,
     u'link': u'http://www.youtube.com/watch?v=LQ2t5e7stVM',
     u'title': u'Killing Me Softly'},
 2: {u'artist': u'Mariah Carey',
     u'id': 3,
     u'link': u'http://www.youtube.com/watch?v=0IA3ZvCkRkQ',
     u'title': u'Hero'},
 3: {u'artist': u'Christina Aguliera',
     u'id': 4,
     u'link': u'http://www.youtube.com/watch?v=wwCykGDEp7M',
     u'title': u'Hurt'},
 4: {u'artist': u'Etta James',
     u'id': 5,
     u'link': u'http://www.youtube.com/watch?v=S-cbOl96RFM',
     u'title': u'At Last'}}

Enter your song number (not id):3
 -&gt; Play song...

ml.searchSong("you").chooseSong()
Karaoke
CHOOSE SONG BY NUMBER
{0: {u'artist': u'Whitney Houston',
     u'id': 1,
     u'link': u'http://www.youtube.com/watch?v=3JWTaaS7LdU',
     u'title': u'I Will Always Love You'}}

Enter your song number (not id):2
 -&gt; Not found!

Enter your song number (not id):2
 -&gt; Not found!

Enter your song number (not id):0
 -&gt; Play song...
</snippet></ROW><ROW><id>20291909</id><snippet>divmod()</snippet></ROW><ROW><id>20291909</id><snippet>'{:02d}:{:02d}'.format(*divmod(minutes, 60))
</snippet></ROW><ROW><id>20291909</id><snippet>divmod()</snippet></ROW><ROW><id>20291909</id><snippet>&gt;&gt;&gt; minutes = 135
&gt;&gt;&gt; '{:02d}:{:02d}'.format(*divmod(minutes, 60))
'02:15'
</snippet></ROW><ROW><id>20291923</id><snippet>r</snippet></ROW><ROW><id>20291923</id><snippet>delimiter=r'\s+'</snippet></ROW><ROW><id>20291923</id><snippet>r</snippet></ROW><ROW><id>20291923</id><snippet>delim_whitespace=True</snippet></ROW><ROW><id>20291923</id><snippet>&gt;&gt;&gt; df = pd.read_csv(StringIO(a.strip()), delimiter=r"\s+", header=None)
&gt;&gt;&gt; df2 = pd.read_csv(StringIO(a.strip()), delim_whitespace=True, header=None)
&gt;&gt;&gt; df2
         0         1   2           3         4     5           6         7   \
0  TRE-G3T-  Triumph-   0  11/06/2013  313585.1  1765  11/06/2013  313600.1   
1  TRE-G3T-  Triumph-   0  11/06/2013  313585.2  1765  11/06/2013  313600.2   
2  TRE-G3T-  Triumph-   0  11/06/2013  313585.3  1765  11/06/2013  313600.3   

   8   9         10  11  12        13      14     15          16           17  \
0  41  20  54.57907 -70  38  14.25924 -30.400 -1.379  893059.006  2588821.543   
1  41  20  54.61145 -70  38  14.22044 -30.332 -1.311  893061.933  2588824.850   
2  41  20  54.48685 -70  38  14.10862 -29.190 -0.169  893070.589  2588812.325   

         18         19      
0  2834.294 -19545.615 ...  
1  2835.196 -19544.617 ...  
2  2837.797 -19548.465 ...  

[3 rows x 42 columns]
</snippet></ROW><ROW><id>20291995</id><snippet>db.session.query(Post, db.func.count(Like.id)).outerjoin(Like).group_by(Post.id)
</snippet></ROW><ROW><id>20292017</id><snippet>config.getStringList("string.list")</snippet></ROW><ROW><id>20292017</id><snippet>for effectString in config.getStringList("string.list"):
</snippet></ROW><ROW><id>20292169</id><snippet>Skyrim = "Skyrim"
GTAIV = "Skyrim"
GTASA = "Skyrim"
Games = Skyrim + " " + GTAIV + " " + GTASA

if raw_input("Enter: ") == "Games":
    print Games
</snippet></ROW><ROW><id>20292169</id><snippet>Enter: Games
Skyrim Skyrim Skyrim
</snippet></ROW><ROW><id>20292342</id><snippet>scipy.stats</snippet></ROW><ROW><id>20292342</id><snippet>gamma</snippet></ROW><ROW><id>20292342</id><snippet>invgamma</snippet></ROW><ROW><id>20292342</id><snippet>gamma.cdf</snippet></ROW><ROW><id>20292342</id><snippet>gamma.ppf</snippet></ROW><ROW><id>20292342</id><snippet>In [7]: p = gamma.cdf([1, 2, 3], 0.5)

In [8]: gamma.ppf(p, 0.5)
Out[8]: array([ 1.,  2.,  3.])
</snippet></ROW><ROW><id>20292562</id><snippet>prev = n
curr = n.nxt
</snippet></ROW><ROW><id>20292562</id><snippet>prev = n
curr = n.nxt
n.nxt = None
</snippet></ROW><ROW><id>20292652</id><snippet>zip()</snippet></ROW><ROW><id>20292652</id><snippet>import csv

with open("name.csv", newline='') as infh:
    cr = csv.reader(infh)
    columns = {r[0]: list(r[1:]) for r in zip(*cr)}
</snippet></ROW><ROW><id>20292652</id><snippet>&gt;&gt;&gt; cr = [
...     ['key1', 'key2', 'key3'],
...     ['value1', 'value2', 'value3'],
...     ['value4', 'value5', 'value6'],
... ]
&gt;&gt;&gt; {r[0]: list(r[1:]) for r in zip(*cr)}
{'key3': ['value3', 'value6'], 'key2': ['value2', 'value5'], 'key1': ['value1', 'value4']}
</snippet></ROW><ROW><id>20292652</id><snippet>cr</snippet></ROW><ROW><id>20292652</id><snippet>csv.reader()</snippet></ROW><ROW><id>20292652</id><snippet>zip(*iterable)</snippet></ROW><ROW><id>20292652</id><snippet>&gt;&gt;&gt; zip(*[[1, 2, 3], [4, 5, 6]])
[(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>20292652</id><snippet>{key_expression: value_expression for targets in iterable}</snippet></ROW><ROW><id>20292690</id><snippet>import numpy as np
def ppoints(n, a):
    """ numpy analogue or `R`'s `ppoints` function
        see details at http://stat.ethz.ch/R-manual/R-patched/library/stats/html/ppoints.html 
        :param n: array type or number"""
    try:
        n = np.float(len(n))
    except TypeError:
        n = np.float(n)
    return (np.arange(n) + 1 - a)/(n + 1 - 2*a)
</snippet></ROW><ROW><id>20292690</id><snippet>&gt;&gt;&gt; ppoints(5, 1./2)
array([ 0.1,  0.3,  0.5,  0.7,  0.9])
&gt;&gt;&gt; ppoints(5, 1./4)
array([ 0.13636364,  0.31818182,  0.5       ,  0.68181818,  0.86363636])
&gt;&gt;&gt; n = 10
&gt;&gt;&gt; a = 3./8. if n &lt;= 10 else 1./2
&gt;&gt;&gt; ppoints(n, a)
array([ 0.06097561,  0.15853659,  0.25609756,  0.35365854,  0.45121951,
        0.54878049,  0.64634146,  0.74390244,  0.84146341,  0.93902439])
</snippet></ROW><ROW><id>20292826</id><snippet>def deposit(answer):</snippet></ROW><ROW><id>20292826</id><snippet>deposit = input("Enter amount to deposit: ")</snippet></ROW><ROW><id>20292826</id><snippet>int(deposit)</snippet></ROW><ROW><id>20292826</id><snippet>str(deposit)</snippet></ROW><ROW><id>20292858</id><snippet>def login(request, username, password):
    # not the actual code, but you get the gist
    logged_in_user = authenticate(username, password)
    request['cur_user'] = logged_in_user.username
</snippet></ROW><ROW><id>20293243</id><snippet>process.wait()</snippet></ROW><ROW><id>20293243</id><snippet>Popen.terminate()</snippet></ROW><ROW><id>20293243</id><snippet>process.wait()</snippet></ROW><ROW><id>20293243</id><snippet>process.wait()</snippet></ROW><ROW><id>20293243</id><snippet>process.terminate()</snippet></ROW><ROW><id>20293243</id><snippet>process.kill()</snippet></ROW><ROW><id>20293245</id><snippet>numpy.where</snippet></ROW><ROW><id>20293245</id><snippet>&gt;&gt;&gt; numpy.where(a&gt;b)
(array([   0,    1,    2, ..., 4993, 4994, 4999]),)
</snippet></ROW><ROW><id>20293245</id><snippet>&gt;&gt;&gt; np.where((a&gt;b) &amp; (np.roll(a, 1) &lt; np.roll(b, 1)))
(array([   5,    9,   17, ..., 4988, 4991, 4999]),)
</snippet></ROW><ROW><id>20293245</id><snippet>&gt;&gt;&gt; np.where((a[1:] &gt; b[1:]) &amp; (a[:-1] &lt; b[:-1]))[0] + 1
array([   5,    9,   17, ..., 4988, 4991, 4999])
</snippet></ROW><ROW><id>20293320</id><snippet>variable</snippet></ROW><ROW><id>20293320</id><snippet>None</snippet></ROW><ROW><id>20293320</id><snippet>&gt;&gt;&gt; variable = None
&gt;&gt;&gt; type(variable)
&lt;type 'NoneType'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20293394</id><snippet>x=0
.
.
def directions():
    .
    .
def north():
    global x
    x=x+1
    print("moved north...")
</snippet></ROW><ROW><id>20293394</id><snippet>def directions():
    current_location = 0
    .
    .
    if move == "North":
         current_location = North(current_location)
    .
    .
def North(location):
    print("moved north...")
    return location+1
</snippet></ROW><ROW><id>20293394</id><snippet>y</snippet></ROW><ROW><id>20293394</id><snippet>def directions():
.
.
    if move == "North":
        (x,y) = North(x,y)
.
.
def North(x,y):
    return (x+1,y)
def East(x,y):
    return (x,y+1)
def South(x,y):
    return (x-1,y)
</snippet></ROW><ROW><id>20293449</id><snippet>comma_indices = []
for index, p in enumerate(prp1):
    if p == ",":
        commas.append(index)
</snippet></ROW><ROW><id>20293449</id><snippet>perm</snippet></ROW><ROW><id>20293449</id><snippet>observed_comma_indices = [index for index, p in enumerate(perm) if p == ","]
if comma_indices == observed_comma_indices:
    lst.append(perm)
</snippet></ROW><ROW><id>20293449</id><snippet>from itertools import permutations

def permute_some(seq, indices_to_permute):
    for perm in permutations(indices_to_permute):
        newseq = seq[:]
        for i, p in zip(indices_to_permute, perm):
            newseq[i] = seq[p]
        yield newseq
</snippet></ROW><ROW><id>20293449</id><snippet>&gt;&gt;&gt; seq = ["A", "B", ",", "C", ","]
&gt;&gt;&gt; perm_ii = [i for i,x in enumerate(seq) if x != ","]
&gt;&gt;&gt; for p in permute_some(seq, perm_ii):
...     print p
...     
['A', 'B', ',', 'C', ',']
['A', 'C', ',', 'B', ',']
['B', 'A', ',', 'C', ',']
['B', 'C', ',', 'A', ',']
['C', 'A', ',', 'B', ',']
['C', 'B', ',', 'A', ',']
</snippet></ROW><ROW><id>20293450</id><snippet>maxiter</snippet></ROW><ROW><id>20293450</id><snippet>restart*maxiter</snippet></ROW><ROW><id>20293450</id><snippet>restart</snippet></ROW><ROW><id>20293450</id><snippet>20*50 s = 1000 s</snippet></ROW><ROW><id>20293498</id><snippet>print 'nice_name_' + str(i // 3)
</snippet></ROW><ROW><id>20293498</id><snippet>print('nice_name_{}'.format(i//3 + 1))  # start counting at 1
</snippet></ROW><ROW><id>20293508</id><snippet>fh = open(fn, "w")
</snippet></ROW><ROW><id>20293508</id><snippet>fh = open(fn, "wb")
</snippet></ROW><ROW><id>20293508</id><snippet>with open(fn, "wb") as fh:
    fh.write(contents)
</snippet></ROW><ROW><id>20293634</id><snippet>User_Tld_Entered</snippet></ROW><ROW><id>20293634</id><snippet>User_No_Auth_Tld</snippet></ROW><ROW><id>20293634</id><snippet>User_Auth_Tld</snippet></ROW><ROW><id>20293634</id><snippet>{% if not User_Tld_Entered %}
     ...
{% elif User_No_Auth_Tld %}
     ...
{% elif User_Auth_Tld %}
     ...
{% endif %}
</snippet></ROW><ROW><id>20293748</id><snippet>session.Add</snippet></ROW><ROW><id>20293748</id><snippet>CDRS = Table('CDRS', metadata, autoload=True)
i = CDRS.insert()
</snippet></ROW><ROW><id>20293748</id><snippet>i</snippet></ROW><ROW><id>20293748</id><snippet>i</snippet></ROW><ROW><id>20293748</id><snippet>execute</snippet></ROW><ROW><id>20293748</id><snippet>i.execute(...)
</snippet></ROW><ROW><id>20293748</id><snippet>db.execute(i, ...)
</snippet></ROW><ROW><id>20293748</id><snippet>execute</snippet></ROW><ROW><id>20293748</id><snippet>all_data = []

while count &lt; len(served_imei):
    data = {
        'Served_IMSI' : served_imsi[count],
        'Served_IMEI' : served_imei[count],
        ...
    }
    all_data.append(data)

    count += 1
</snippet></ROW><ROW><id>20293748</id><snippet>all_data</snippet></ROW><ROW><id>20293748</id><snippet>db.execute(i, all_data)
</snippet></ROW><ROW><id>20293748</id><snippet>echo</snippet></ROW><ROW><id>20293748</id><snippet>db = create_engine('sqlite:///CDR.db',echo=True) # Change `echo` from False to True
</snippet></ROW><ROW><id>20293748</id><snippet>#!/usr/bin/env python
import glob,os, csv
from sqlalchemy import *

db = create_engine('sqlite:///CDR.db',echo=False)
metadata = MetaData(db)
CDRS = Table('CDRS', metadata, autoload=True)
insert_statement = CDRS.insert()

all_data = []

path = '/home/cneps/cdr/*.cdr'
for file in glob.glob(path):
    # Use "with" to automatically close "f" when we're done with it.
    with open(file) as f:
        for lines in f:
            d = {
                'Served_IMSI' : lines[17:17+16],
                ....
            }
            all_data.append(d)

# No need for that "while count &lt; len(served_imei)" loop, we can now just do...
db.execute(insert_statement, all_data)
</snippet></ROW><ROW><id>20293772</id><snippet>def resizeEvent(self, event):
    # move to top-right corner
    self.widget.move(self.width() - self.widget.width() - 1, 1)
    super(Canvas, self).resizeEvent(event)
</snippet></ROW><ROW><id>20293772</id><snippet>from PyQt4 import QtCore, QtGui

class Window(QtGui.QMainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        toolbar = self.addToolBar('Toolbar')
        toolbar.addAction('Action')
        widget = QtGui.QWidget(self)
        layout = QtGui.QVBoxLayout(widget)
        self.canvas = Canvas(widget)
        layout.addWidget(self.canvas)
        self.setCentralWidget(widget)

class Canvas(QtGui.QGraphicsView):
    def __init__(self, parent):
        super(Canvas, self).__init__(parent)
        self.widget = QtGui.QComboBox(self)

    def resizeEvent(self, event):
        self.widget.move(self.width() - self.widget.width() - 2, 2)
        super(Canvas, self).resizeEvent(event)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()
    window.setGeometry(500, 300, 200, 200)
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20293782</id><snippet>session.query(TableName).filter(func.convert(func.VARCHAR(8), TableName.datetimefield, 8) &gt;= datetime.time(0,0)).all()
</snippet></ROW><ROW><id>20293836</id><snippet>for number in range(1, 11):
    line_contents = []
    for j in range(10):
        n = number + j * 10
        if (n % 3 == 0):
            line_contents.append("Biff")
        else:
            line_contents.append("{0:4d}".format(n))
    print(" ".join(line_contents))
</snippet></ROW><ROW><id>20293836</id><snippet>   1   11 Biff   31   41 Biff   61   71 Biff   91
   2 Biff   22   32 Biff   52   62 Biff   82   92
Biff   13   23 Biff   43   53 Biff   73   83 Biff
   4   14 Biff   34   44 Biff   64   74 Biff   94
   5 Biff   25   35 Biff   55   65 Biff   85   95
Biff   16   26 Biff   46   56 Biff   76   86 Biff
   7   17 Biff   37   47 Biff   67   77 Biff   97
   8 Biff   28   38 Biff   58   68 Biff   88   98
Biff   19   29 Biff   49   59 Biff   79   89 Biff
  10   20 Biff   40   50 Biff   70   80 Biff  100
</snippet></ROW><ROW><id>20293836</id><snippet>n</snippet></ROW><ROW><id>20293836</id><snippet>number</snippet></ROW><ROW><id>20293842</id><snippet>def delete():
    if request.args(0) == 'templates':
        if db.templates[request.args(1)].id == auth.user_id:
            db(db.templates.id ==  request.args(1)).delete()
            return dict(form=redirect(URL('templates')))
    return dict(form=redirect(URL('index')))
</snippet></ROW><ROW><id>20293913</id><snippet>import subprocess
subprocess.check_call( ['ls'], cwd='/tmp' )
</snippet></ROW><ROW><id>20294079</id><snippet>-tt</snippet></ROW><ROW><id>20294079</id><snippet>.communicate()</snippet></ROW><ROW><id>20294079</id><snippet>p.stdin</snippet></ROW><ROW><id>20294079</id><snippet>EOF</snippet></ROW><ROW><id>20294079</id><snippet>import pipes
from subprocess import Popen, PIPE

cmd = ["ssh", self.host, "cat &gt; " + pipes.quote(out_path)] # no '-tt'
p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)
stdout, stderr = p.communicate(in_string)
</snippet></ROW><ROW><id>20294079</id><snippet>paramiko</snippet></ROW><ROW><id>20294079</id><snippet>#!/usr/bin/env python
import os
import posixpath
import sys
from contextlib import closing

from paramiko import SSHConfig, SSHClient

hostname, out_path, in_string = sys.argv[1:] # get from command-line 

# load parameters to setup ssh connection
config = SSHConfig()
with open(os.path.expanduser('~/.ssh/config')) as config_file:
    config.parse(config_file)
d = config.lookup(hostname)

# connect
with closing(SSHClient()) as ssh:
    ssh.load_system_host_keys()
    ssh.connect(d['hostname'], username=d.get('user'))
    with closing(ssh.open_sftp()) as sftp:
        makedirs_exists_ok(sftp, posixpath.dirname(out_path))
        with sftp.open(out_path, 'wb') as remote_file:
            remote_file.write(in_string)
</snippet></ROW><ROW><id>20294079</id><snippet>makedirs_exists_ok()</snippet></ROW><ROW><id>20294079</id><snippet>os.makedirs()</snippet></ROW><ROW><id>20294079</id><snippet>from functools import partial
from stat import S_ISDIR

def isdir(ftp, path):
    try:
        return S_ISDIR(ftp.stat(path).st_mode)
    except EnvironmentError:
        return None

def makedirs_exists_ok(ftp, path):
    def exists_ok(mkdir, name):
        """Don't raise an error if name is already a directory."""
        try:
            mkdir(name)
        except EnvironmentError:
            if not isdir(ftp, name):
                raise

    # from os.makedirs()
    head, tail = posixpath.split(path)
    if not tail:
        assert path.endswith(posixpath.sep)
        head, tail = posixpath.split(head)

    if head and tail and not isdir(ftp, head):
        exists_ok(partial(makedirs_exists_ok, ftp), head)  # recursive call

    # do create directory
    assert isdir(ftp, head)
    exists_ok(ftp.mkdir, path)
</snippet></ROW><ROW><id>20294149</id><snippet>driver = webdriver.Ie 
</snippet></ROW><ROW><id>20294149</id><snippet>driver = webdriver.Opera
</snippet></ROW><ROW><id>20294151</id><snippet>l = [-1, 2, -3, 4, -5]
lr = map(lambda x: x * -1, l)
lr
&gt;&gt;[1, -2, 3, -4, 5]
</snippet></ROW><ROW><id>20294296</id><snippet>lems = []
def lem(list): #lemmatize a list of conjugated spanish verbs
    global lems
    ...
</snippet></ROW><ROW><id>20294296</id><snippet>lems2 = lem(...)
</snippet></ROW><ROW><id>20294296</id><snippet>lems = lem(...)
</snippet></ROW><ROW><id>20294439</id><snippet>open("tca.txt", 'w').close
</snippet></ROW><ROW><id>20294439</id><snippet>open("tca.txt", 'w').close()
                          ^^
</snippet></ROW><ROW><id>20294439</id><snippet>python.exe</snippet></ROW><ROW><id>20294439</id><snippet>cmd.exe</snippet></ROW><ROW><id>20294439</id><snippet>pythonw.exe</snippet></ROW><ROW><id>20294439</id><snippet>print "Running..."
</snippet></ROW><ROW><id>20294439</id><snippet>pythonw.exe</snippet></ROW><ROW><id>20294439</id><snippet>Standard input</snippet></ROW><ROW><id>20294439</id><snippet>standard output</snippet></ROW><ROW><id>20294439</id><snippet>pythonw</snippet></ROW><ROW><id>20294439</id><snippet>pythonw.exe</snippet></ROW><ROW><id>20294439</id><snippet>sys.stdout</snippet></ROW><ROW><id>20294439</id><snippet>print</snippet></ROW><ROW><id>20294439</id><snippet>python.exe</snippet></ROW><ROW><id>20294439</id><snippet>i = 0
while 1:
    i += 1
    with open("count.txt", "w") as f:
        print &gt;&gt; f, i
    print "hi!"
</snippet></ROW><ROW><id>20294439</id><snippet>python.exe</snippet></ROW><ROW><id>20294439</id><snippet>pythonw.exe</snippet></ROW><ROW><id>20294439</id><snippet>python.exe</snippet></ROW><ROW><id>20294439</id><snippet>C:\Python27&gt;python yyy.py
hi!
hi!
hi!
hi!
hi!
hi!
hi!
hi!
hi!
hi!
hi!
...
</snippet></ROW><ROW><id>20294439</id><snippet>count.txt</snippet></ROW><ROW><id>20294439</id><snippet>C:\Python27&gt;pythonw yyy.py

C:\Python27&gt;
</snippet></ROW><ROW><id>20294439</id><snippet>pythonw</snippet></ROW><ROW><id>20294439</id><snippet>pythonw.exe</snippet></ROW><ROW><id>20294439</id><snippet>C:\Python27&gt;type count.txt
1025
</snippet></ROW><ROW><id>20294439</id><snippet>print "hi!"</snippet></ROW><ROW><id>20294439</id><snippet>sys.stdout</snippet></ROW><ROW><id>20294439</id><snippet>None</snippet></ROW><ROW><id>20294439</id><snippet>pythonw.exe</snippet></ROW><ROW><id>20294453</id><snippet>__init__</snippet></ROW><ROW><id>20294453</id><snippet>tests</snippet></ROW><ROW><id>20294453</id><snippet>monkey</snippet></ROW><ROW><id>20294453</id><snippet>sys.path</snippet></ROW><ROW><id>20294453</id><snippet>-m</snippet></ROW><ROW><id>20294453</id><snippet>__init__</snippet></ROW><ROW><id>20294453</id><snippet>root/
   /tests
   /monkey
   __init__.py
</snippet></ROW><ROW><id>20294529</id><snippet>/myurl</snippet></ROW><ROW><id>20294529</id><snippet>POST</snippet></ROW><ROW><id>20294529</id><snippet>/&lt;a&gt;/</snippet></ROW><ROW><id>20294529</id><snippet>/&lt;a&gt;/</snippet></ROW><ROW><id>20294529</id><snippet>POST</snippet></ROW><ROW><id>20294529</id><snippet>FormDataRoutingRedirect</snippet></ROW><ROW><id>20294529</id><snippet>POST</snippet></ROW><ROW><id>20294529</id><snippet>/myurl/</snippet></ROW><ROW><id>20294529</id><snippet>/&lt;a&gt;/</snippet></ROW><ROW><id>20294529</id><snippet>POST</snippet></ROW><ROW><id>20294529</id><snippet>/myurl</snippet></ROW><ROW><id>20294529</id><snippet>@app.route('/myurl', methods = ['GET', 'POST'])
def my_func():
</snippet></ROW><ROW><id>20294644</id><snippet>tkinter</snippet></ROW><ROW><id>20294644</id><snippet>Tkinter</snippet></ROW><ROW><id>20294748</id><snippet>CoInitialised()</snippet></ROW><ROW><id>20294987</id><snippet>import re

text = "a word or 2, or three"

print('---')

pattern = re.compile(r"(?P&lt;word&gt;[^\W\d_]+)|(?P&lt;digits&gt;\d+)")

for m in pattern.finditer(text):
    name = next(k for k, v in m.groupdict().items() if v)
    print((m.group(), m.start(), name))

print('---')

pattern = re.compile(r"(?P&lt;one_word&gt;[^\W\d_]+)|(?P&lt;some_digits&gt;\d+)")

for m in pattern.finditer(text):
    name = next(k for k, v in m.groupdict().items() if v)
    print((m.group(), m.start(), name))
</snippet></ROW><ROW><id>20294987</id><snippet>---
('a', 0, 'word')
('word', 2, 'word')
('or', 7, 'word')
('2', 10, 'digits')
('or', 13, 'word')
('three', 16, 'word')
---
('a', 0, 'one_word')
('word', 2, 'one_word')
('or', 7, 'one_word')
('2', 10, 'some_digits')
('or', 13, 'one_word')
('three', 16, 'one_word')
</snippet></ROW><ROW><id>20295151</id><snippet>any()</snippet></ROW><ROW><id>20295151</id><snippet>def nested(x, ys):
    return any(x in nested for nested in ys)
</snippet></ROW><ROW><id>20295151</id><snippet>ys</snippet></ROW><ROW><id>20295151</id><snippet>def flatten(lst):
    for elem in lst:
        if isinstance(elem, (list, tuple)):
            for nested in flatten(elem):
                yield nested
        else:
            yield elem

def nested(x, ys):
    return any(x == nested for nested in flatten(ys))
</snippet></ROW><ROW><id>20295151</id><snippet>list</snippet></ROW><ROW><id>20295151</id><snippet>tuple</snippet></ROW><ROW><id>20295159</id><snippet>&gt;&gt;&gt; a = np.array([[0, 1], [2, 3], [4, 5], [6, 7], [9, 8]])
&gt;&gt;&gt; b = np.zeros_like(a)
&gt;&gt;&gt; b[np.arange(len(a)), a.argmax(1)] = 1
&gt;&gt;&gt; b
array([[0, 1],
       [0, 1],
       [0, 1],
       [0, 1],
       [1, 0]])
</snippet></ROW><ROW><id>20295159</id><snippet>range</snippet></ROW><ROW><id>20295159</id><snippet>arange</snippet></ROW><ROW><id>20295159</id><snippet>max</snippet></ROW><ROW><id>20295159</id><snippet>argmax</snippet></ROW><ROW><id>20295159</id><snippet>&gt;&gt;&gt; a = np.array([[0, 1], [2, 2], [4, 3]])
&gt;&gt;&gt; (a == a.max(axis=1)[:,None]).astype(int)
array([[0, 1],
       [1, 1],
       [1, 0]])
</snippet></ROW><ROW><id>20295206</id><snippet>import inspect
def master(mandatory_arg, *args):
    args = list(args)
    while args:
        f = args.pop(0)
        n = len(inspect.getargspec(f).args)
        p, args = args[:n], args[n:]
        f(*p)

master(mandatory_arg, f1, f2, 'a1', f3, 'a1', 'a2')
</snippet></ROW><ROW><id>20295296</id><snippet>sysmap = {}

class metric:
  def __init__(self, system):
    self.system = system
  def __call__(self, cls):
    sysmap[self.system] = cls
    return cls

class CpuMetrics:
  def __new__(self):
    cls = sysmap.get(platform.system)
    if not cls:
      raise RuntimeError('No metric class found!')
    else:
      return cls()
   ...
</snippet></ROW><ROW><id>20295296</id><snippet>@metric('Linux')
class SomeLinuxMetrics(CpuMetrics):
   ...
</snippet></ROW><ROW><id>20295296</id><snippet>metrics = CpuMetrics()
</snippet></ROW><ROW><id>20295301</id><snippet>%</snippet></ROW><ROW><id>20295301</id><snippet>&gt;&gt;&gt; '{:%.3f}'.format(1.2345)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: Invalid conversion specification
&gt;&gt;&gt; '{:.3f}'.format(1.2345)
'1.234'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20295301</id><snippet>mean</snippet></ROW><ROW><id>20295301</id><snippet>str</snippet></ROW><ROW><id>20295301</id><snippet>str.format</snippet></ROW><ROW><id>20295301</id><snippet>f</snippet></ROW><ROW><id>20295301</id><snippet>&gt;&gt;&gt; '{:.3f}'.format('1.2345')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: Unknown format code 'f' for object of type 'str'
&gt;&gt;&gt; '{:.3f}'.format(1.2345)
'1.234'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20295301</id><snippet>+"\n"</snippet></ROW><ROW><id>20295301</id><snippet>"\n"</snippet></ROW><ROW><id>20295301</id><snippet>str.format</snippet></ROW><ROW><id>20295301</id><snippet>0</snippet></ROW><ROW><id>20295301</id><snippet>outfile.write('{:.3f}\n'.format(mean))
</snippet></ROW><ROW><id>20295518</id><snippet>pts = [(1,1), (3,4), (1,8), (7,6)]

def mk_distsq(a):
    def distsq(b):
        return ((b[0]-a[0])**2 + (b[1]-a[1])**2)**0.5
    return distsq

dist = [sorted(pts, key=mk_distsq(pt)) for pt in pts]
</snippet></ROW><ROW><id>20295721</id><snippet>&gt;&gt;&gt; print "So, you're %r old, %r tall and %r heavy" % (age, height, weight)
So, you're '123' old, '456' tall and '789' heavy
&gt;&gt;&gt; print "So, you're %s old, %s tall and %s heavy" % (age, height, weight)
So, you're 123 old, 456 tall and 789 heavy
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20295944</id><snippet>get</snippet></ROW><ROW><id>20295944</id><snippet>LoginHandler</snippet></ROW><ROW><id>20295944</id><snippet>next</snippet></ROW><ROW><id>20295944</id><snippet>...

class LoginHandler(BaseHandler):
    def get(self):
        if self.get_current_user():
            self.redirect(self.get_argument('next', '/')) # Change this line
            return
        self.render('login.html')

...
</snippet></ROW><ROW><id>20296135</id><snippet>decimal</snippet></ROW><ROW><id>20296135</id><snippet>ROUND_UP</snippet></ROW><ROW><id>20296135</id><snippet>Decimal</snippet></ROW><ROW><id>20296135</id><snippet>decimal.ROUND_UP</snippet></ROW><ROW><id>20296135</id><snippet>from decimal import ROUND_UP
</snippet></ROW><ROW><id>20296135</id><snippet>ROUND_UP</snippet></ROW><ROW><id>20296135</id><snippet>decimal</snippet></ROW><ROW><id>20296135</id><snippet>from decimal import Decimal as D
</snippet></ROW><ROW><id>20296135</id><snippet>decimal.Decimal("1.23")</snippet></ROW><ROW><id>20296256</id><snippet>list(mystring)</snippet></ROW><ROW><id>20296256</id><snippet>list()</snippet></ROW><ROW><id>20296256</id><snippet>list()</snippet></ROW><ROW><id>20296256</id><snippet>__iter__()</snippet></ROW><ROW><id>20296300</id><snippet>__init__</snippet></ROW><ROW><id>20296300</id><snippet>__int__</snippet></ROW><ROW><id>20296313</id><snippet>def print_last_line(filename):
    print getLastFile(filename)
</snippet></ROW><ROW><id>20296313</id><snippet>test = []
def use_last_line(filename):
    test.append(getLastFile(filename))  # This will error, because test is not in scope

def use_last_line(filename):
    test = []
    test.append(getLastFile(filename))  # This will success because test is in the function.
</snippet></ROW><ROW><id>20296313</id><snippet>hello</snippet></ROW><ROW><id>20296313</id><snippet>hello = getLastFile(filename)
</snippet></ROW><ROW><id>20296329</id><snippet>print</snippet></ROW><ROW><id>20296329</id><snippet>global</snippet></ROW><ROW><id>20296329</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>20296329</id><snippet>print()</snippet></ROW><ROW><id>20296456</id><snippet>unittest.xx.run(allSuites)</snippet></ROW><ROW><id>20296456</id><snippet>test_aa()</snippet></ROW><ROW><id>20296456</id><snippet>python your_test.py</snippet></ROW><ROW><id>20296456</id><snippet>import unittest

class aa(unittest.TestCase):
    def test_aa(self):
        self.assertTrue(True)

if __name__ == '__main__':
    # this will not run on import, only when tests are running with unittest with python
    testlist = []

    suite = unittest.TestLoader().loadTestsFromTestCase(aa)
    testlist.append(suite)

    allSuites = unittest.TestSuite(testlist)
    unittest.TextTestRunner(verbosity=3).run(allSuites)

    print 'done'
</snippet></ROW><ROW><id>20296522</id><snippet>$ sudo apt-get install python-libsvm
</snippet></ROW><ROW><id>20296522</id><snippet>$ python
Python 2.7.3 (default, Sep 26 2013, 20:03:06) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import svm
&gt;&gt;&gt; 
$ cd /tmp
$ python
Python 2.7.3 (default, Sep 26 2013, 20:03:06) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import svm
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20296523</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; number_of_chr = 22,'X','Y'
&gt;&gt;&gt; n, *rest = number_of_chr
&gt;&gt;&gt; ['chr%s'%i for i in chain(range(1, n+1), rest)]
['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX', 'chrY']
</snippet></ROW><ROW><id>20296581</id><snippet>from openerp.osv import osv, fields
</snippet></ROW><ROW><id>20296686</id><snippet>import Tkinter as tk
import thread

def main():
    root = tk.Tk()
    progress_var = tk.StringVar(root)
    progress_var.set('')
    progress = tk.Label(root, textvariable = progress_var)
    progress.pack()
    def thread_helper(): # this can access the local variables in main()
        total = 10000000
        for i in xrange(1, total + 1):
             progress_var.set('Progress: {}%'.format(100 * float(i)/total))
    thread.start_new_thread(thread_helper, ())
    root.mainloop()
</snippet></ROW><ROW><id>20296686</id><snippet>for</snippet></ROW><ROW><id>20296686</id><snippet>root.mainloop()</snippet></ROW><ROW><id>20296686</id><snippet>for</snippet></ROW><ROW><id>20296866</id><snippet>import itertools
import collections

def read_table(filename):
    with open(filename) as fp:
        header = next(fp).split()
        rows = [line.split()[1:] for line in fp if line.strip()]
        columns = zip(*rows)
    data = dict(zip(header, columns))
    return data

table = read_table("data.txt")
pots = sorted(table)

alphabet = "+-?"
for num in range(2, len(table)+1):
    for group in itertools.combinations(pots, num):
        patterns = zip(*[table[p] for p in group])
        counts = collections.Counter(patterns)
        for poss in itertools.product(alphabet, repeat=num):
            print ', '.join(group) + ':',
            print ''.join(poss), counts[poss]
</snippet></ROW><ROW><id>20296866</id><snippet>PotA, PotB: ++ 3
PotA, PotB: +- 1
PotA, PotB: +? 0
PotA, PotB: -+ 0
PotA, PotB: -- 0
PotA, PotB: -? 1
PotA, PotB: ?+ 0
PotA, PotB: ?- 0
PotA, PotB: ?? 0
PotA, PotC: ++ 4
[...]
PotA, PotB, PotC, PotD, PotE: +++++ 3
PotA, PotB, PotC, PotD, PotE: ++++- 0
[...]
</snippet></ROW><ROW><id>20296866</id><snippet>PotA, PotB, PotC, PotD, PotE: ++++++ 2
</snippet></ROW><ROW><id>20296866</id><snippet>+</snippet></ROW><ROW><id>20297089</id><snippet>discount_factor = ((1 + r) ** (n) + 1) / r * (1 + r) ** n
</snippet></ROW><ROW><id>20297089</id><snippet>discount_factor = ((1 + r) ** (n) + 1) / (r * (1 + r) ** n)
</snippet></ROW><ROW><id>20297089</id><snippet>1/3 == 0</snippet></ROW><ROW><id>20297089</id><snippet>1//3</snippet></ROW><ROW><id>20297089</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>20297089</id><snippet>1.0/3</snippet></ROW><ROW><id>20297089</id><snippet>r</snippet></ROW><ROW><id>20297089</id><snippet>float</snippet></ROW><ROW><id>20297089</id><snippet>for i in xrange(1,4):
    print i**2

#prints 1,4,9
</snippet></ROW><ROW><id>20297149</id><snippet>WebElement.get_attribute</snippet></ROW><ROW><id>20297149</id><snippet>element = driver.find_element_by_class_name('abc')
href = element.get_attribute('href')
href # =&gt; u'http://example.com/'
</snippet></ROW><ROW><id>20297182</id><snippet>import csv

def get_last_row(csv_filename):
    with open(csv_filename,'rb') as f:
        reader = csv.reader(f)
        lastline = reader.next()
        for line in reader:
            lastline = line
        return lastline

print ', '.join(get_last_row(filename))
</snippet></ROW><ROW><id>20297182</id><snippet>deque</snippet></ROW><ROW><id>20297182</id><snippet>from collections import deque
import csv

def get_last_row(csv_filename):
    with open(csv_filename, 'rb') as f:
        return deque(csv.reader(f), 1)[0]

print ', '.join(get_last_row(filename))
</snippet></ROW><ROW><id>20297213</id><snippet>itertools.groupby</snippet></ROW><ROW><id>20297213</id><snippet>input_dictionary = [{"name":"kishore", "playing":["cricket","basket ball"]},
                    {"name":"kishore", "playing":["volley ball","cricket"]},
                    {"name":"kishore", "playing":["cricket","hockey"]},
                    {"name":"kishore", "playing":["volley ball"]},
                    {"name":"xyz","playing":["cricket"]}]
import itertools
import operator

by_name = operator.itemgetter('name')
result = []
for name, grp in itertools.groupby(sorted(input_dictionary, key=by_name), key=by_name):
    playing = set(itertools.chain.from_iterable(x['playing'] for x in grp))
    # If order of `playing` is important use `collections.OrderedDict`
    # playing = collections.OrderedDict.fromkeys(itertools.chain.from_iterable(x['playing'] for x in grp))
    result.append({'name': name, 'playing': list(playing)})

print(result)
</snippet></ROW><ROW><id>20297213</id><snippet>[{'playing': ['volley ball', 'basket ball', 'hockey', 'cricket'], 'name': 'kishore'}, {'playing': ['cricket'], 'name': 'xyz'}]
</snippet></ROW><ROW><id>20297273</id><snippet>bisect.bisect_left</snippet></ROW><ROW><id>20297273</id><snippet>bisect.bisect_right</snippet></ROW><ROW><id>20297275</id><snippet>&lt;photos page="2" pages="89" perpage="10" total="881"&gt;
    &lt;photo id="2636" owner="47058503995@N01" 
            secret="a123456" server="2" title="test_04"
            ispublic="1" isfriend="0" isfamily="0" /&gt;
    &lt;photo id="2635" owner="47058503995@N01"
            secret="b123456" server="2" title="test_03"
            ispublic="0" isfriend="1" isfamily="1" /&gt;
    &lt;photo id="2633" owner="47058503995@N01"
            secret="c123456" server="2" title="test_01"
            ispublic="1" isfriend="0" isfamily="0" /&gt;
    &lt;photo id="2610" owner="12037949754@N01"
            secret="d123456" server="2" title="00_tall"
            ispublic="1" isfriend="0" isfamily="0" /&gt;
&lt;/photos&gt;
</snippet></ROW><ROW><id>20297275</id><snippet>&gt;&gt;&gt; photos
&lt;Element 'rsp' at 0x2199a10&gt;
&gt;&gt;&gt; photos[0]
&lt;Element 'photos' at 0x2199a30&gt;
&gt;&gt;&gt; photos[0][0]
&lt;Element 'photo' at 0x2199cf0&gt;
&gt;&gt;&gt; photos[0][0].get('id')
'11124140143'
&gt;&gt;&gt; photos[0][0].get('owner')
'62997566@N08'
</snippet></ROW><ROW><id>20297275</id><snippet>&gt;&gt;&gt; import flickrapi
&gt;&gt;&gt; import xml
&gt;&gt;&gt; api_key = 'my API key'
&gt;&gt;&gt; api_secret = 'my API secret'
&gt;&gt;&gt; flickr = flickrapi.FlickrAPI(api_key,secret=api_secret)
&gt;&gt;&gt; r = flickr.photos_search(user_id='48439369@N00', per_page='10')
&gt;&gt;&gt; xml.etree.ElementTree.dump(r)
&lt;rsp stat="ok"&gt;
&lt;photos page="1" pages="376" perpage="10" total="3754"&gt;
    &lt;photo farm="8" id="10550639536" isfamily="0" isfriend="0" ispublic="1" owner="48439369@N00" secret="fb5a1b526c" server="7336" title="Morgan and Quinn" /&gt;
    &lt;photo farm="3" id="10550684964" isfamily="0" isfriend="0" ispublic="1" owner="48439369@N00" secret="0091541055" server="2840" title="Morgan and Quinn" /&gt;
    ...
&lt;/photos&gt;
&lt;/rsp&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20297306</id><snippet>In [26]: a = range(10)

In [27]: zip(a[::2], a[1::2])
Out[27]: [(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)]
</snippet></ROW><ROW><id>20297535</id><snippet>import csv
with open('test.csv', "r") as f:
    reader = csv.reader(f)
    result = {}

    for row in reader:
        key = row[0]
        result[key] = row[1:]

    print(result)
</snippet></ROW><ROW><id>20297722</id><snippet>sys.argv</snippet></ROW><ROW><id>20297722</id><snippet>argv</snippet></ROW><ROW><id>20297722</id><snippet>None</snippet></ROW><ROW><id>20297722</id><snippet>python manage.py test</snippet></ROW><ROW><id>20297722</id><snippet>sys.argv</snippet></ROW><ROW><id>20297828</id><snippet>executemany</snippet></ROW><ROW><id>20297828</id><snippet>execute</snippet></ROW><ROW><id>20297828</id><snippet>cursor.executemany("insert into testy (one, two) values (%s,%s)",
                   [('00','01'),('10','11'),('20','21')])
</snippet></ROW><ROW><id>20298193</id><snippet>class Class_1(object):
    def __init__(self):
        self.x = 1 # Your instance variables here
        self.y = 2
        self.class_2_instance = Class_2()

class Class_2(object):
    def __init__(self):
        pass
</snippet></ROW><ROW><id>20298193</id><snippet>class Class_1(object):
    def __init__(self):
        self.x = 1 # Your instance variables here
        self.y = 2
        self.class_2_instance = Class_2(self)

class Class_2(object):
    def __init__(self, class_1_instance):
        self.class_1_instance = class_1_instance
</snippet></ROW><ROW><id>20298193</id><snippet>print(self.class_1_instance.x) # prints 1
</snippet></ROW><ROW><id>20298193</id><snippet>c1</snippet></ROW><ROW><id>20298193</id><snippet>c2</snippet></ROW><ROW><id>20298193</id><snippet>c1 = Class_1()
</snippet></ROW><ROW><id>20298193</id><snippet>c1</snippet></ROW><ROW><id>20298193</id><snippet>Class_2</snippet></ROW><ROW><id>20298193</id><snippet>c1</snippet></ROW><ROW><id>20298373</id><snippet>Player.py</snippet></ROW><ROW><id>20298373</id><snippet>Enemy.py</snippet></ROW><ROW><id>20298373</id><snippet>Game.py</snippet></ROW><ROW><id>20298373</id><snippet>restart()</snippet></ROW><ROW><id>20298373</id><snippet>handle_event</snippet></ROW><ROW><id>20298373</id><snippet>handle_event</snippet></ROW><ROW><id>20298373</id><snippet>True/False</snippet></ROW><ROW><id>20298373</id><snippet>import pygame

#----------------------------------------------------------------------

class Player(object):

    def __init__(self, surface_rect):

        self.surface_rect = surface_rect

        self.image = pygame.image.load("player_one.png").convert()
        self.image.set_colorkey( (255,255,255) )

        self.rect = self.image.get_rect() # you get image width, height

        self.move_x = 15
        self.move_y = 15

        self.restart()

    #------------

    def restart(self):

        self.rect.x = 940
        self.rect.y = 240

    #------------

    def handle_events(self, event):
        player_moves = False

        if event.type == pygame.KEYDOWN:

            if event.key == pygame.K_DOWN:
                if self.rect.bottom &lt; self.surface_rect.bottom: #470
                    self.rect.y += self.move_y
                    player_moves = True

            elif event.key == pygame.K_UP:
                if self.rect.top &gt; self.surface_rect.top:
                    self.rect.y -= self.move_y
                    player_moves = True

            elif event.key == pygame.K_RIGHT:
                if self.rect.right &lt; self.surface_rect.right:
                    self.rect.x += self.move_x
                    player_moves = True

            elif event.key == pygame.K_LEFT:
                if self.rect.left &gt; self.surface_rect.left:
                    self.rect.x -= self.move_x
                    player_moves = True

            print "(debug): player: x, y:", self.rect.x, self.rect.y

        return player_moves
    #------------

    def draw(self, surface):
        surface.blit(self.image, self.rect)

#----------------------------------------------------------------------
</snippet></ROW><ROW><id>20298373</id><snippet>import pygame
import random

#----------------------------------------------------------------------

class Enemy():

    def __init__(self, image, x=0, y=0):

        self.image = pygame.image.load(image).convert()
        self.image.set_colorkey( (255,255,255) )

        self.rect = self.image.get_rect()

        self.rect.centerx = x
        self.rect.centery = y

    #------------

    def draw(self, screen):
        screen.blit(self.image, self.rect)

    #------------

    def update(self):
        # here change randomly positon
        self.rect.topleft = random.randint(60, 220+1), random.randint(0, 475+1)

#----------------------------------------------------------------------
</snippet></ROW><ROW><id>20298373</id><snippet>backspace</snippet></ROW><ROW><id>20298373</id><snippet>import random
import pygame

from Player import *
from Enemy import *

WHITE = (255,255,255)
BLACK = (0  ,0  ,0  )
RED   = (255,0  ,0  )

#----------------------------------------------------------------------

class Game():

    def __init__(self):

        pygame.init()

        self.screen = pygame.display.set_mode((1400,500))

        self.background = pygame.image.load("GameField1.png").convert()

        self.enemies = []
        #self.players = []
        self.player = Player(self.screen.get_rect())

        # create 3 enemies 0...2

        for i in range(3):
            enemy = Enemy("enemy_"+str(i)+".png")
            enemy.update() # set random position on start
            self.enemies.append(enemy)

        self.font = pygame.font.SysFont("", 32)

        self.gameover_text = self.font.render("GAME OVER", -1, RED)
        self.gameover_rect = self.gameover_text.get_rect(center=self.screen.get_rect().center)

        self.restart()

    #------------

    def restart(self):

        self.player_score = 0
        self.enemies_score = 0

        #self.play_time = 2*60 # 2minutes * 60 seconds
        self.play_time = 30 # 30 seconds for fast test
        self.change_time = pygame.time.get_ticks() + 1000 # 1s

        self.player.restart()

    #------------

    def update_time(self):
        print "(debug): time:", self.change_time, pygame.time.get_ticks()

        if pygame.time.get_ticks() &gt;= self.change_time:
            self.change_time += 1000 # 1s
            self.play_time -= 1

        return self.play_time &lt;= 0 # GAME OVER ?

    #------------

    def draw_score(self, surface):
        surface_rect = surface.get_rect()

        self.player_score_text = self.font.render(str(self.player_score) + " :Player", -1, WHITE)
        self.player_score_rect = self.player_score_text.get_rect(right=surface_rect.right-10, top=10)

        surface.blit(self.player_score_text, self.player_score_rect)

        self.enemies_score_text = self.font.render("Enemy: " + str(self.enemies_score), -1, WHITE)
        self.enemies_score_rect = self.enemies_score_text.get_rect(left=surface_rect.left+10, top=10)

        surface.blit(self.enemies_score_text, self.enemies_score_rect)

        print "(debug): render scores:", self.player_score, self.player_score_rect, self.enemies_score, self.enemies_score_rect

    #------------

    def draw_time(self, surface):
        surface_rect = surface.get_rect()

        time_str = "%02d:%02d" % (self.play_time/60, self.play_time%60)

        self.time_text = self.font.render(time_str, -1, RED )
        self.time_rect = self.time_text.get_rect(centerx=surface_rect.centerx, top=10)

        surface.blit(self.time_text, self.time_rect)

        print "(debug): render time:", self.play_time, self.time_rect, (self.play_time/60, self.play_time%60), time_str 

    #------------

    def run(self):

        clock = pygame.time.Clock()

        RUNNING = True
        GAME_OVER = False

        while RUNNING:

            # --- events ---

            PLAYER_MOVES = False

            for event in pygame.event.get():

                if event.type == pygame.QUIT:
                    RUNNING = False

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        RUNNING = False

                    if event.key == pygame.K_BACKSPACE:
                        if GAME_OVER:
                            GAME_OVER = False
                            self.restart()

                # player moves

                if not GAME_OVER:
                    PLAYER_MOVES = self.player.handle_events(event)

            # --- updates ---- 

            if PLAYER_MOVES and not GAME_OVER:

                # changes position when key is pressed

                for enemy in self.enemies:
                    enemy.update()

                # check collisions

                collision = False
                for enemy in self.enemies:
                    if pygame.sprite.collide_rect(self.player, enemy):
                        collision = True
                        break # first collision and I don't check rest enemies

                if collision:
                    self.enemies_score += 7
                    print "(debug): game: collision:", self.player_score, self.enemies_score
                    self.player.restart()

                # check touchdown

                if self.player.rect.left &lt;= 100:
                    self.player_score += 7
                    print "(debug): game: touchdown:", self.player_score, self.enemies_score
                    self.player.restart()

            if not GAME_OVER:
                GAME_OVER = self.update_time()

            # --- draws ---

            self.screen.fill(BLACK)

            self.screen.blit(self.background, self.background.get_rect())

            self.player.draw(self.screen)

            for enemy in self.enemies:
                enemy.draw(self.screen)

            self.draw_time(self.screen)
            self.draw_score(self.screen)

            if GAME_OVER:
                self.screen.blit(self.gameover_text, self.gameover_rect)

            pygame.display.update()

            # --- FPS ---

            clock.tick(20) 

#----------------------------------------------------------------------

Game().run()
</snippet></ROW><ROW><id>20298429</id><snippet>fgets</snippet></ROW><ROW><id>20298429</id><snippet>fgets</snippet></ROW><ROW><id>20298429</id><snippet>fgetc</snippet></ROW><ROW><id>20298429</id><snippet>int next;
while ((next=fgetc(file_ptr)) != EOF &amp;&amp; (next != '\n'))
   ; // &lt;&lt;== Do nothing
// At this point your file_ptr is either at the next line or at EOF
</snippet></ROW><ROW><id>20298470</id><snippet>next</snippet></ROW><ROW><id>20298470</id><snippet>&gt;&gt;&gt; dict_input = [{"name":"kishore", "age":23},{"name":"xyz", "age":21}]
&gt;&gt;&gt; next((d for d in dict_input if d['name'] == 'kishore'), None)
{'age': 23, 'name': 'kishore'}

&gt;&gt;&gt; next((d for d in dict_input if d['name'] == 'no-such-name'), None)
&gt;&gt;&gt; next((d for d in dict_input if d['name'] == 'no-such-name'), None) == None
True
</snippet></ROW><ROW><id>20298470</id><snippet>&gt;&gt;&gt; dict_input = {
...     "kishore": {"name":"kishore", "age":23},
...     "xyz": {"name":"xyz", "age":21}
... }
&gt;&gt;&gt; dict_input["kishore"]
{'age': 23, 'name': 'kishore'}


&gt;&gt;&gt; dict_input["no-such-name"]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'no-such-name'
&gt;&gt;&gt; dict_input.get("no-such-name", "?")
'?'
</snippet></ROW><ROW><id>20298491</id><snippet>energylist.append(energy)
</snippet></ROW><ROW><id>20298491</id><snippet>energy</snippet></ROW><ROW><id>20298491</id><snippet>for l in xrange(0,16,1):
    energylist.append(zeros((len(V2),len(V1))))
</snippet></ROW><ROW><id>20298589</id><snippet>createIndex()</snippet></ROW><ROW><id>20298589</id><snippet>data()</snippet></ROW><ROW><id>20298589</id><snippet>setData()</snippet></ROW><ROW><id>20298589</id><snippet>[string, bool]</snippet></ROW><ROW><id>20298589</id><snippet>data(cellIndex, QtCore.Qt.TooltipRole)</snippet></ROW><ROW><id>20298589</id><snippet>roles</snippet></ROW><ROW><id>20298589</id><snippet>QVariant()</snippet></ROW><ROW><id>20298589</id><snippet>None</snippet></ROW><ROW><id>20298589</id><snippet>QVariant</snippet></ROW><ROW><id>20298589</id><snippet>None</snippet></ROW><ROW><id>20298589</id><snippet>flags()</snippet></ROW><ROW><id>20298589</id><snippet>QtCore.Qt.ItemIsEditable</snippet></ROW><ROW><id>20298589</id><snippet>flags()</snippet></ROW><ROW><id>20298589</id><snippet>QtCore.Qt.ItemIsEditable</snippet></ROW><ROW><id>20298589</id><snippet>setData(cellIndex, typedString, Qt.EditRole)</snippet></ROW><ROW><id>20298589</id><snippet>setData()</snippet></ROW><ROW><id>20298589</id><snippet>Model</snippet></ROW><ROW><id>20298688</id><snippet>characters = ' abcdefghijklmnopqrstuvwxyz . \n'

result = []

for pair in zip(text[::2], text[1::2]):
    codepoint = int(''.join(pair))
    if not (1 &lt;= codepoint &lt;= 30) or codepoint == 29: continue
    result.append(characters[codepoint])
print(''.join(result))
</snippet></ROW><ROW><id>20298688</id><snippet>&gt;&gt;&gt; text = '2908051212152830132527140113052709192702150228'
&gt;&gt;&gt; characters = ' abcdefghijklmnopqrstuvwxyz . \n'
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for pair in zip(text[::2], text[1::2]):
...     codepoint = int(''.join(pair))
...     if not (1 &lt;= codepoint &lt;= 30) or codepoint == 29: continue
...     result.append(characters[codepoint])
... 
&gt;&gt;&gt; result
['h', 'e', 'l', 'l', 'o', '.', '\n', 'm', 'y', ' ', 'n', 'a', 'm', 'e', ' ', 'i', 's', ' ', 'b', 'o', 'b', '.']
&gt;&gt;&gt; print(''.join(result))
hello.
my name is bob.
</snippet></ROW><ROW><id>20298916</id><snippet>class SetTimeoutTestCommand(sublime_plugin.WindowCommand):
    def run(self, edit):
        for x in range(1,10):
            sublime.set_timeout(lambda x=x: print(x), x*1000)
</snippet></ROW><ROW><id>20298916</id><snippet>x</snippet></ROW><ROW><id>20298916</id><snippet>x</snippet></ROW><ROW><id>20298916</id><snippet>9</snippet></ROW><ROW><id>20299213</id><snippet>from random import choice

keys = klasa.keys()
while keys: #while there are keys left in 'keys'
    key = choice(keys) #get a random key
    print("Calling %s" % (klasa.pop(key))) #get the value at that key, and remove it
    keys.remove(key) #remove key from the list we select keys from
</snippet></ROW><ROW><id>20299213</id><snippet>klasa.pop(key)</snippet></ROW><ROW><id>20299213</id><snippet> |  pop(...)
 |      D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.
 |      If key is not found, d is returned if given, otherwise KeyError is raised
</snippet></ROW><ROW><id>20299213</id><snippet>from random import shuffle

keys = klasa.keys()
shuffle(keys) #put the keys in random order
for key in keys:
    print("Calling %s" % (klasa.pop(key)))
</snippet></ROW><ROW><id>20299213</id><snippet>print("Calling %s" % klasa.pop(choice(klasa.keys())))
</snippet></ROW><ROW><id>20299213</id><snippet>keys = .keys() ... a_key = choice(keys), klasa.pop(key), keys.delete(key)</snippet></ROW><ROW><id>20299213</id><snippet>keys = list(klasa)</snippet></ROW><ROW><id>20299213</id><snippet>.keys</snippet></ROW><ROW><id>20299237</id><snippet># Find contours at a constant value of 0.8
contours = measure.find_contours(r_grey, 0.8)

# Display the image and plot all contours found
plt.imshow(r, interpolation='nearest')

for n, contour in enumerate(contours):
    plt.plot(contour[:, 1], contour[:, 0], linewidth=2)
</snippet></ROW><ROW><id>20299376</id><snippet>(0, height, width, textHeight)</snippet></ROW><ROW><id>20299376</id><snippet>(left, upper, right, lower)</snippet></ROW><ROW><id>20299376</id><snippet>ints</snippet></ROW><ROW><id>20299376</id><snippet>floats</snippet></ROW><ROW><id>20299376</id><snippet>x, y = img1.size
wrapper.paste(textImage,(0,height,x,y))
</snippet></ROW><ROW><id>20299588</id><snippet>class Task(Entity):
    ...
    class Admin(EntityAdmin):
        list_display = ['id', 'text', 'total_hours_estimated_colprop']
        field_attributes = {
            'total_hours_estimated_colprop': {'delegate':delegates.FloatDelegate',
                                              'precision': 3} }
</snippet></ROW><ROW><id>20299709</id><snippet>LinearSVC</snippet></ROW><ROW><id>20299709</id><snippet>sklearn.linear_model.LogisticRegression</snippet></ROW><ROW><id>20299709</id><snippet>LinearSVC</snippet></ROW><ROW><id>20299709</id><snippet>1. / (1 + exp(-decision_function(X)))
</snippet></ROW><ROW><id>20299709</id><snippet>SGDClassifier</snippet></ROW><ROW><id>20299709</id><snippet>loss="log"</snippet></ROW><ROW><id>20299713</id><snippet>axis=1</snippet></ROW><ROW><id>20299713</id><snippet>concat</snippet></ROW><ROW><id>20299713</id><snippet>concat</snippet></ROW><ROW><id>20299713</id><snippet>df['count'] = df.groupby(df.index).cumcount()
df2['count'] = df2.groupby(df2.index).cumcount()
df = df.set_index('count', append=True)
df2 = df2.set_index('count', append=True)
</snippet></ROW><ROW><id>20299713</id><snippet>In [64]: df
Out[64]:
            No. Res
Type count
SS   0      323   O
     1       12   E
     2       21   O
DD   0      334   E
     1       44   E
FF   0       55   O
</snippet></ROW><ROW><id>20299713</id><snippet>axis=1</snippet></ROW><ROW><id>20299713</id><snippet>keys</snippet></ROW><ROW><id>20299713</id><snippet>In [65]: pd.concat([df,df2], axis=1, keys=['Sample1','Sample2'])
Out[65]:
           Sample1      Sample2
               No.  Res     No.  Res
Type count
DD   0         334    E     352    E
     1          44    E     NaN  NaN
FF   0          55    O      51    O
SS   0         323    O      43    O
     1          12    E      77    O
     2          21    O     NaN  NaN
TT   0         NaN  NaN      98    E
</snippet></ROW><ROW><id>20299713</id><snippet>count</snippet></ROW><ROW><id>20299713</id><snippet>merged.index = merged.index.droplevel(1)</snippet></ROW><ROW><id>20299713</id><snippet>cumcount</snippet></ROW><ROW><id>20299713</id><snippet>df = df.reset_index()
df['count'] = df.groupby('Type').apply(lambda x : pd.Series(np.arange(len(x)), x.index))
df.set_index(['Type', 'count'])
</snippet></ROW><ROW><id>20300050</id><snippet>lambda</snippet></ROW><ROW><id>20300050</id><snippet>Deferred</snippet></ROW><ROW><id>20300050</id><snippet>add_numbers</snippet></ROW><ROW><id>20300050</id><snippet>callRemote</snippet></ROW><ROW><id>20300050</id><snippet>def add_numbers(obj, a, b):
    return obj.callRemote("add_numbers", a, b)
</snippet></ROW><ROW><id>20300181</id><snippet>TEMPLATE_DIRS = (os.path.join(BASE_DIR, 'templates'), )
</snippet></ROW><ROW><id>20300339</id><snippet>list.sort(key=lambda x: x[0][1])
</snippet></ROW><ROW><id>20300425</id><snippet>utf-8</snippet></ROW><ROW><id>20300425</id><snippet>latin-1</snippet></ROW><ROW><id>20300425</id><snippet>utf-8</snippet></ROW><ROW><id>20300425</id><snippet>line = unicode("áaáaáaá", encoding="utf-8")
for c in line:
    print c
</snippet></ROW><ROW><id>20300425</id><snippet>utf-8</snippet></ROW><ROW><id>20300425</id><snippet>à</snippet></ROW><ROW><id>20300425</id><snippet>&gt;&gt;&gt; s = "áaáaáaá".encode()
&gt;&gt;&gt; for i, c in enumerate(s):
    print(i,c)


0 195
1 161
2 97
3 195
4 161
5 97
6 195
7 161
8 97
9 195
10 161
</snippet></ROW><ROW><id>20300425</id><snippet>\xc3\xa1</snippet></ROW><ROW><id>20300425</id><snippet>Ã
¡
</snippet></ROW><ROW><id>20300425</id><snippet>utf-8</snippet></ROW><ROW><id>20300425</id><snippet>utf-8</snippet></ROW><ROW><id>20300425</id><snippet>\xc3\xa1</snippet></ROW><ROW><id>20300425</id><snippet>utf-8</snippet></ROW><ROW><id>20300425</id><snippet>line = unicode("áaáaáaá", encoding="utf-8")
</snippet></ROW><ROW><id>20300425</id><snippet>utf-8</snippet></ROW><ROW><id>20301287</id><snippet>through</snippet></ROW><ROW><id>20301287</id><snippet>through</snippet></ROW><ROW><id>20301438</id><snippet>User_No_Auth_Tld</snippet></ROW><ROW><id>20301438</id><snippet>int</snippet></ROW><ROW><id>20301438</id><snippet>list</snippet></ROW><ROW><id>20301438</id><snippet>dict</snippet></ROW><ROW><id>20301464</id><snippet>time.time()</snippet></ROW><ROW><id>20301464</id><snippet>time.time()</snippet></ROW><ROW><id>20301464</id><snippet>for times in range(50):
    start = time.time()
    #do some stuff
    stop = time.time()
    duration = stop-start
    print(duration)
</snippet></ROW><ROW><id>20301464</id><snippet>&gt;&gt;&gt; for i in range(3):
      start = time.time()
      print(i)
      stop = time.time()
      print(stop-start)


0
0.08444404602050781
1
0.014003992080688477
2
0.009001970291137695
</snippet></ROW><ROW><id>20301464</id><snippet>timeit</snippet></ROW><ROW><id>20301464</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; def myfunction(time):
      print(time)


&gt;&gt;&gt; result = timeit.timeit("for i in range(2): myfunction(i)", setup="from __main__ import myfunction", number=1)
0
1
&gt;&gt;&gt; result
0.0868431608504352
</snippet></ROW><ROW><id>20301622</id><snippet>next_page</snippet></ROW><ROW><id>20301622</id><snippet>from google.appengine.api import memcache

# setup a key/value
memcache.set(key='next_page_%s' % user.id, next_page)

# get next_page
next_page = memcache.get(key='next_page_%s' % user.id)
</snippet></ROW><ROW><id>20301622</id><snippet>'next_page_%s' % user.id</snippet></ROW><ROW><id>20301622</id><snippet>user.id</snippet></ROW><ROW><id>20301622</id><snippet>next_page</snippet></ROW><ROW><id>20301878</id><snippet>1.5.5</snippet></ROW><ROW><id>20302032</id><snippet>help(np.loadtxt)</snippet></ROW><ROW><id>20302032</id><snippet>skiprows</snippet></ROW><ROW><id>20302032</id><snippet>N</snippet></ROW><ROW><id>20302032</id><snippet>In [1]: import numpy as np

In [2]: help(np.loadtxt)
Help on function loadtxt in module numpy.lib.npyio:

loadtxt(fname, dtype=&lt;type 'float'&gt;, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0)
    ...
    skiprows : int, optional
        Skip the first `skiprows` lines; default: 0.
</snippet></ROW><ROW><id>20302032</id><snippet>N</snippet></ROW><ROW><id>20302032</id><snippet>np.loadtxt(fname, skiprows=N)
</snippet></ROW><ROW><id>20302032</id><snippet>N</snippet></ROW><ROW><id>20302032</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>20302032</id><snippet>with open(filename, 'r') as f:
    lines = (line for line in f if predicate(line))
    arr = np.genfromtxt(lines)
</snippet></ROW><ROW><id>20302032</id><snippet>itertools</snippet></ROW><ROW><id>20302032</id><snippet>import itertools as IT

with open(filename, 'r') as f:
    lines = IT.chain(IT.islice(f, 46), IT.islice(f, 4, None))
    arr = np.genfromtxt(lines)
</snippet></ROW><ROW><id>20302038</id><snippet>zip</snippet></ROW><ROW><id>20302038</id><snippet>for</snippet></ROW><ROW><id>20302038</id><snippet>&gt;&gt;&gt; zip(*x)[0]
(1, 4, 7)
&gt;&gt;&gt; zip(*x)[1]
(2, 5, 8)
&gt;&gt;&gt; zip(*x)[2]
(3, 6, 9)
</snippet></ROW><ROW><id>20302038</id><snippet>&gt;&gt;&gt; x = [ [1,2,3], [4,5,6], [7,8,9] ]
&gt;&gt;&gt; l = [var[1] for var in x]
&gt;&gt;&gt; l
[2, 5, 8]
</snippet></ROW><ROW><id>20302038</id><snippet>&gt;&gt;&gt; [var[0] for var in x]
[1, 4, 7]
&gt;&gt;&gt; [var[2] for var in x]
[3, 6, 9]
</snippet></ROW><ROW><id>20302074</id><snippet>coding[:=]\s*([-\w.]+)
</snippet></ROW><ROW><id>20302074</id><snippet>#</snippet></ROW><ROW><id>20302074</id><snippet>-*-</snippet></ROW><ROW><id>20302161</id><snippet>new_str = re.sub(r'[\W_]', ' ', new_str)
</snippet></ROW><ROW><id>20302247</id><snippet>class Scm1:
    keys = {'b':0, 'i':0, 's':0}
</snippet></ROW><ROW><id>20302247</id><snippet>keys</snippet></ROW><ROW><id>20302247</id><snippet>class Scm1:
    def __init__(self):
        self.keys = {'b':0, 'i':0, 's':0}
</snippet></ROW><ROW><id>20302358</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>20302358</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>20302358</id><snippet>import sys
from time import sleep

words = "This is just a test :P"
for char in words:
    sleep(0.5)
    sys.stdout.write(char)
    sys.stdout.flush()
</snippet></ROW><ROW><id>20302358</id><snippet>import sys
from time import sleep

words = "This is just a test :P"
for char in words:
    sleep(0.5)
    sys.stderr.write(char)
</snippet></ROW><ROW><id>20302665</id><snippet>from codecs import EncodedFile
with EncodedFile(open('n.txt','wb'),'utf-8','iso8859-1') as f:
 f.write('Bryllup på Terningen')
</snippet></ROW><ROW><id>20302665</id><snippet>&gt;&gt;&gt; unicode(open('n.txt','rb').read(),'iso8859-1')
u'Bryllup p\xe5 Terningen'

&gt;&gt;&gt; unicode(open('n.txt','rb').read(),'utf-8')
---------------------------------------------------------------------------
UnicodeDecodeError                        Traceback (most recent call last)
&lt;ipython-input-8-2649b633aa10&gt; in &lt;module&gt;()
----&gt; 1 unicode(open('n.txt','rb').read(),'utf-8')

UnicodeDecodeError: 'utf8' codec can't decode byte 0xe5 in position 9: invalid continuation byte
</snippet></ROW><ROW><id>20302670</id><snippet>len()</snippet></ROW><ROW><id>20302670</id><snippet>.__len__</snippet></ROW><ROW><id>20302670</id><snippet>tp_as_sequence</snippet></ROW><ROW><id>20302670</id><snippet>sq_length</snippet></ROW><ROW><id>20302670</id><snippet>.__len__</snippet></ROW><ROW><id>20302670</id><snippet>type</snippet></ROW><ROW><id>20302670</id><snippet>.__len__</snippet></ROW><ROW><id>20302670</id><snippet>sq_length</snippet></ROW><ROW><id>20302878</id><snippet>from itertools import groupby
plop = [k for k, g in groupby(list1)]
</snippet></ROW><ROW><id>20302878</id><snippet>from itertools import groupby; plop = [k for k, g in groupby(list1)]
</snippet></ROW><ROW><id>20302878</id><snippet>from collections import OrderedDict
plop = list(OrderedDict.fromkeys(list1))
</snippet></ROW><ROW><id>20302895</id><snippet>bytes.find()</snippet></ROW><ROW><id>20302895</id><snippet>str</snippet></ROW><ROW><id>20302895</id><snippet>bytes</snippet></ROW><ROW><id>20302895</id><snippet>str</snippet></ROW><ROW><id>20302895</id><snippet>bytes</snippet></ROW><ROW><id>20302895</id><snippet>start_link = input.find(b' &lt;p class="js-tweet-text tweet-text" ')
</snippet></ROW><ROW><id>20302906</id><snippet>pylab.show()</snippet></ROW><ROW><id>20303085</id><snippet>curses</snippet></ROW><ROW><id>20303356</id><snippet>"55".replace("5","", count=1)
</snippet></ROW><ROW><id>20303626</id><snippet>pd.DataFrame ( { idx1: { idx2:sum( DistMatrix[ x ][ y ]
                                  for (x, y) in zip( row1, row2 ) ) 
                         for (idx2, row2) in sample.iterrows( ) } 
                 for (idx1, row1 ) in sample.iterrows( ) } )
</snippet></ROW><ROW><id>20303626</id><snippet># a helper function to compute distance of two items
dist = lambda xs, ys: sum( DistMatrix[ x ][ y ] for ( x, y ) in zip( xs, ys ) )

# a second helper function to compute distances from a given item
xdist = lambda x: { idx: dist( x, y ) for (idx, y) in sample.iterrows( ) }

# the pairwise distance matrix
pd.DataFrame( { idx: xdist( x ) for ( idx, x ) in sample.iterrows( ) } )
</snippet></ROW><ROW><id>20303853</id><snippet>e_key = mystring.lower
</snippet></ROW><ROW><id>20303853</id><snippet>e_key = mystring.lower()
</snippet></ROW><ROW><id>20303853</id><snippet>.lower</snippet></ROW><ROW><id>20303853</id><snippet>e_key</snippet></ROW><ROW><id>20304228</id><snippet>import re

if re.match('[0-9]{4}-[0-9a-z]{7}', '3256-10wyput'):
    return True
</snippet></ROW><ROW><id>20304256</id><snippet>zip</snippet></ROW><ROW><id>20304256</id><snippet>&gt;&gt;&gt; a = {'Letters': ['Alpha', 'Beta', 'Theta'], 'Animals': ['Dog', 'Cat', 'Ox']}
&gt;&gt;&gt; zip(a["Letters"], a["Animals"])
[('Alpha', 'Dog'), ('Beta', 'Cat'), ('Theta', 'Ox')]
</snippet></ROW><ROW><id>20304256</id><snippet>&gt;&gt;&gt; zip(*a.values())
[('Dog', 'Alpha'), ('Cat', 'Beta'), ('Ox', 'Theta')]
</snippet></ROW><ROW><id>20304256</id><snippet>list(zip(..))</snippet></ROW><ROW><id>20304256</id><snippet>for pair in zip(*a.values()): print(pair)</snippet></ROW><ROW><id>20304330</id><snippet>def memoize(function):
    memo = {}
    def wrapper(*args):
      if args in memo:
        return memo[args]
      else:
        rv = function(*args)
        memo[args] = rv
        return rv
    return wrapper



@memoize
def getmaxofsub(x, y):
    if y  == len(triangle) or x&gt;y: return 0
    #print x, y
    return triangle[y][x] + max(getmaxofsub(x, y+1), getmaxofsub(x+1, y+1)


getmaxofsub(0,0)
</snippet></ROW><ROW><id>20304330</id><snippet>memo</snippet></ROW><ROW><id>20304330</id><snippet>getmaxofsub()</snippet></ROW><ROW><id>20304330</id><snippet>for i in reversed(range(len(triangle))):
    getmaxofsub(0, i), getmaxofsub(i//2, i), getmaxofsub(i, i)

print getmaxofsub(0,0)
</snippet></ROW><ROW><id>20304330</id><snippet>getmaxofsub</snippet></ROW><ROW><id>20304330</id><snippet>   5
  9 8
 5 4 6
9 7 3 4
</snippet></ROW><ROW><id>20304330</id><snippet>  9
 5 4
9 7 3
</snippet></ROW><ROW><id>20304330</id><snippet> 4
7 3
</snippet></ROW><ROW><id>20304330</id><snippet>y==len(triangle)</snippet></ROW><ROW><id>20304330</id><snippet>0</snippet></ROW><ROW><id>20304330</id><snippet>memorize</snippet></ROW><ROW><id>20304330</id><snippet>x</snippet></ROW><ROW><id>20304330</id><snippet>y</snippet></ROW><ROW><id>20304479</id><snippet>"Modificada" or ""</snippet></ROW><ROW><id>20304479</id><snippet>"Modificada"</snippet></ROW><ROW><id>20304479</id><snippet>&gt;&gt;&gt; "Modificada" or ""
'Modificada'
</snippet></ROW><ROW><id>20304479</id><snippet>citasotras = citas_agendarcita.objects.filter(cita_agendar_status="Modificada", citas_tipodepaciente="mediexcel")
</snippet></ROW><ROW><id>20304479</id><snippet>cita_agendar_status</snippet></ROW><ROW><id>20304479</id><snippet>["Modificada", ""]</snippet></ROW><ROW><id>20304479</id><snippet>__in</snippet></ROW><ROW><id>20304479</id><snippet>citasotras = citas_agendarcita.objects.filter(cita_agendar_status__in=["Modificada", ""] ,citas_tipodepaciente="mediexcel")
</snippet></ROW><ROW><id>20304493</id><snippet>NameStartChar</snippet></ROW><ROW><id>20304493</id><snippet>&lt;2013-11-30&gt;...&lt;/2013-11-30&gt;</snippet></ROW><ROW><id>20304493</id><snippet>&lt;D2013-11-30&gt;...&lt;/D2013-11-30&gt;</snippet></ROW><ROW><id>20304493</id><snippet>from xml.etree import ElementTree as etree</snippet></ROW><ROW><id>20304493</id><snippet>from lxml import etree</snippet></ROW><ROW><id>20304501</id><snippet>lsof -F</snippet></ROW><ROW><id>20304501</id><snippet>-F</snippet></ROW><ROW><id>20304501</id><snippet>import subprocess
import copy
import pprint


def get_rows(output_to_parse, whitelist_keys):
    lines = output_to_parse.split("\n")
    rows = []
    while lines:
        row = _get_new_row(lines, whitelist_keys)
        rows.append(row)
    return rows


def _get_new_row(lines, whitelist_keys):
    new_row_keys = set()
    output = {}
    repeat = False
    while lines and repeat is False:
        line = lines.pop()
        if line == '':
            continue
        key = line[0]
        if key not in whitelist_keys:
            raise(ValueError(key))
        value = line[1:]
        if key not in new_row_keys:
            new_row_keys.add(key)
            output[key] = value
        else:
            repeat = True
    return output

if __name__ == "__main__":
    identifiers = subprocess.Popen(["lsof", "-F", "?"], stderr=subprocess.PIPE).communicate()

    keys = set([line.strip()[0] for line in identifiers[1].split("\n") if line != ''][1:])

    lsof_output = subprocess.check_output(["lsof", "-F"])
    rows = get_rows(lsof_output, whitelist_keys=keys)
    pprint.pprint(rows[:20])
</snippet></ROW><ROW><id>20304525</id><snippet>def fill_from_left(a, x=0):
    to_fill = (a == x)
    if a[0] == x:
        raise ValueError("cannot have {} as first element".format(x))
    if to_fill.any():
        lefts = ~to_fill &amp; (np.roll(a, -1) == x)
        fill_from = lefts.cumsum()
        fill_with = a[np.where(lefts)[0]][fill_from - 1]
        a[to_fill] = fill_with[to_fill]
</snippet></ROW><ROW><id>20304525</id><snippet>&gt;&gt;&gt; a = np.array([1,2,3,0,4,0,0,5])
&gt;&gt;&gt; fill_from_left(a)
&gt;&gt;&gt; a
array([1, 2, 3, 3, 4, 4, 4, 5])
</snippet></ROW><ROW><id>20304525</id><snippet>pandas</snippet></ROW><ROW><id>20304525</id><snippet>numpy</snippet></ROW><ROW><id>20304525</id><snippet>Series</snippet></ROW><ROW><id>20304525</id><snippet>ndarray</snippet></ROW><ROW><id>20304525</id><snippet>s.replace(0, np.nan).ffill()</snippet></ROW><ROW><id>20304647</id><snippet>request.FILES</snippet></ROW><ROW><id>20304647</id><snippet>post</snippet></ROW><ROW><id>20304647</id><snippet>put</snippet></ROW><ROW><id>20304647</id><snippet>serializer = PhotoSerializer(data=request.DATA, files=request.FILES)
</snippet></ROW><ROW><id>20304668</id><snippet>import re

text = '123.com 456.edu 999.com'

a = r'\d+\.(com|edu)'    # A capturing group.
b = r'\d+\.(?:com|edu)'  # A non-capturing group.

print re.findall(a, text)  # Only the captures: ['com', 'edu', 'com']
print re.findall(b, text)  # The full matches: ['123.com', '456.edu', '999.com']
</snippet></ROW><ROW><id>20304668</id><snippet>(?:...)  # Non-capturing group.
...{4,}  # Match something 4 or more times.
\w       # Word character.
\d       # Digit
</snippet></ROW><ROW><id>20304716</id><snippet>import Image

img = Image.new( 'RGB', (255,255), "black") # create a new black image
pixels = img.load() # create the pixel map

for i in range(img.size[0]):    # for every pixel:
    for j in range(img.size[1]):
        pixels[i,j] = (i, j, 100) # set the colour accordingly

img.show()
</snippet></ROW><ROW><id>20304718</id><snippet>&gt;&gt;&gt; b = b[~(b == 0).any(axis=1)]
&gt;&gt;&gt; b
array([[10, 11, 12],
       [13, 14, 15],
       [16, 17, 18],
       [22, 23, 24],
       [25, 26, 27],
       [34, 35, 36],
       [37, 38, 39]])
</snippet></ROW><ROW><id>20304783</id><snippet>pop</snippet></ROW><ROW><id>20304783</id><snippet>d['hi'] = d.pop('hii')
</snippet></ROW><ROW><id>20304962</id><snippet>place()</snippet></ROW><ROW><id>20304962</id><snippet>pack()</snippet></ROW><ROW><id>20304962</id><snippet>pack()</snippet></ROW><ROW><id>20304962</id><snippet>grid()</snippet></ROW><ROW><id>20304962</id><snippet>place()</snippet></ROW><ROW><id>20304962</id><snippet>Frame</snippet></ROW><ROW><id>20304962</id><snippet>pack()</snippet></ROW><ROW><id>20304962</id><snippet>Frame</snippet></ROW><ROW><id>20304962</id><snippet>grid()</snippet></ROW><ROW><id>20304962</id><snippet>Frame</snippet></ROW><ROW><id>20305186</id><snippet>import bisect

bins = range(0, 100, 15)

print bisect.bisect_left(bins, 35)
</snippet></ROW><ROW><id>20305274</id><snippet>[0]</snippet></ROW><ROW><id>20305274</id><snippet>[1]</snippet></ROW><ROW><id>20305274</id><snippet>[1]</snippet></ROW><ROW><id>20305274</id><snippet>[2]</snippet></ROW><ROW><id>20305385</id><snippet>def is_iterable(object):
    '''
    Returns True if the object is iterable, False if it is not.
    '''
    try:
        i = iter(object)
    except TypeError:
        return False
    else:
        return True


def validate_type(object, type_or_prototype):
    '''
    Returns True if the object is of the type passed in.

    The type can be a straightforward type, such as int, list, or
    a class type. If so, we check that the object is an instance of
    the type.

    Alternatively the 'type' can be a prototype instance of a more
    complex type. For example:
    [int]                   a list of ints
    [(str, int)]            a list of (str, int) tuples
    {str: [(float, float)]} a dictionary of strings to lists of (float, float) tuples

    In these cases we recursively check the sub-items to see if they match
    the prototype.
    '''
    # If the type_or_prototype is a type, we can check directly against it...
    type_of_type = type(type_or_prototype)
    if type_of_type == type:
        return isinstance(object, type_or_prototype)

    # We have a prototype.

    # We check that the object is of the right type...
    if not isinstance(object, type_of_type):
        return False

    # We check each sub-item in object to see if it is of the right sub-type...
    if(isinstance(object, dict)):
        # The object is a dictionary, so we check that its items match
        # the prototype...
        prototype = type_or_prototype.popitem()
        for sub_item in object.items():
            if not validate_type(sub_item, prototype):
                return False

    elif(isinstance(object, tuple)):
        # For tuples, we check that each element of the tuple is
        # of the same type as each element the prototype...
        if len(object) != len(type_or_prototype):
            return False
        for i in range(len(object)):
            if not validate_type(object[i], type_or_prototype[i]):
                return False

    elif is_iterable(object):
        # The object is a non-dictionary collection such as a list or set.
        # For these, we check that all items in the object match the
        prototype = iter(type_or_prototype).__next__()
        for sub_item in object:
            if not validate_type(sub_item, prototype):
                return False

    else:
        # We don't know how to check this object...
        raise Exception("Can not validate this object")

    return True
</snippet></ROW><ROW><id>20305385</id><snippet>isinstance</snippet></ROW><ROW><id>20305385</id><snippet>validate_type(3.4, float)
Out[1]: True
</snippet></ROW><ROW><id>20305385</id><snippet>list1 = [("hello", 2), ("world", 3)]
validate_type(list1, [(str, int)])
Out[2]: True
</snippet></ROW><ROW><id>20305502</id><snippet>i.year</snippet></ROW><ROW><id>20305502</id><snippet>j.year</snippet></ROW><ROW><id>20305502</id><snippet>def solve(d, *keys):
    indexes = [i for i, x in enumerate(zip(*(d[k] for k in keys)))
                                                                if len(set(x)) != 1]
    return {k:[v[x] for x in indexes] for k, v in d.items()}
</snippet></ROW><ROW><id>20305502</id><snippet>&gt;&gt;&gt; d = {'i.year': ['1997', '1997'], 'i.month': ['March', 'April'], 'j.month': ['March', 'April'], 'j.year': ['1997', '2003']}
&gt;&gt;&gt; solve(d, 'i.year', 'j.year')
{'i.year': ['1997'], 'j.month': ['April'], 'i.month': ['April'], 'j.year': ['2003']}

&gt;&gt;&gt; d = {'i.year': ['1997', '1997', '2009'], 'i.month': ['March', 'April', 'June'], 'j.month': ['March', 'April', 'June'], 'j.year': ['1997', '2003', '2010']}
&gt;&gt;&gt; solve(d, 'i.year', 'j.year')
{'i.year': ['1997', '2009'], 'j.month': ['April', 'June'], 'i.month': ['April', 'June'], 'j.year': ['2003', '2010']}

&gt;&gt;&gt; d = {'i.year': ['1996', '1997', '2010'], 'i.month': ['March', 'April', 'June'], 'j.month': ['March', 'April', 'June'], 'j.year': ['1997', '2003', '2010']}
&gt;&gt;&gt; solve(d, 'i.year', 'j.year')
{'i.year': ['1996', '1997'], 'j.month': ['March', 'April'], 'i.month': ['March', 'April'], 'j.year': ['1997', '2003']}
</snippet></ROW><ROW><id>20305551</id><snippet>numbers = raw_input()
</snippet></ROW><ROW><id>20305551</id><snippet>numbers</snippet></ROW><ROW><id>20305551</id><snippet>for num in numbers:
     ...
</snippet></ROW><ROW><id>20305551</id><snippet>num</snippet></ROW><ROW><id>20305551</id><snippet>for num in numbers.split():
</snippet></ROW><ROW><id>20305551</id><snippet>my_list.append(int(numbers))
</snippet></ROW><ROW><id>20305643</id><snippet>def function(lst):
    if not lst:
        return
    elif lst[0] &gt;= 100:
        print(lst[0], end='\n')
    else:
        print(lst[0], end=' ')
    function(lst[1:])
</snippet></ROW><ROW><id>20305643</id><snippet>list</snippet></ROW><ROW><id>20305643</id><snippet>lst</snippet></ROW><ROW><id>20305643</id><snippet>list</snippet></ROW><ROW><id>20305643</id><snippet>print</snippet></ROW><ROW><id>20305643</id><snippet>None</snippet></ROW><ROW><id>20305643</id><snippet>False</snippet></ROW><ROW><id>20305643</id><snippet>lst == []</snippet></ROW><ROW><id>20305643</id><snippet>not lst</snippet></ROW><ROW><id>20305663</id><snippet>file.readlines</snippet></ROW><ROW><id>20305663</id><snippet>'\n'</snippet></ROW><ROW><id>20305663</id><snippet>'\n'</snippet></ROW><ROW><id>20305663</id><snippet>def replace_line(file_name, line_num, text):
    with open(file_name, 'r') as fin, open(file_name, 'w') as out:
        lines = fin.readlines()
        lines[line_num] = text + '\n'             #This should contain a '\n'
        out.writelines(lines)
</snippet></ROW><ROW><id>20305663</id><snippet>with</snippet></ROW><ROW><id>20305663</id><snippet>with</snippet></ROW><ROW><id>20305663</id><snippet>with</snippet></ROW><ROW><id>20305903</id><snippet>socket.socket = socks.socksocket
</snippet></ROW><ROW><id>20305930</id><snippet>decimal</snippet></ROW><ROW><id>20306053</id><snippet>&lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;
  &lt;dependency&gt;
    &lt;dependentAssembly&gt;
      &lt;assemblyIdentity type="win32" name="Microsoft.VC90.CRT" version="9.0.21022.8" processorArchitecture="x86" publicKeyToken="1fc8b3b9a1e18e3b" &gt;&lt;/assemblyIdentity&gt;
    &lt;/dependentAssembly&gt;
  &lt;/dependency&gt;
&lt;/assembly&gt;
</snippet></ROW><ROW><id>20306101</id><snippet>type( test.getString )</snippet></ROW><ROW><id>20306101</id><snippet>builtins.method</snippet></ROW><ROW><id>20306101</id><snippet>meth.__func__</snippet></ROW><ROW><id>20306101</id><snippet>AttributeError</snippet></ROW><ROW><id>20306101</id><snippet>class Test:
    def getString(self, var):
        setattr(Test.getString, "string", var)
        return self.getString

test = Test()
test.getString("myString").string  # &gt; "myString"

test2 = Test()
test2.getString.string # &gt; this is also "myString"
</snippet></ROW><ROW><id>20306101</id><snippet>class Test:
    class getStringClass:
        def __call__ ( self, var ):
            setattr( self, "string", var )
            return self

    def __init__( self ):
        self.getString = Test.getStringClass( )

test = Test( )
test.getString( "myString" ).string   # &gt; "myString"

test2 = Test()
test2.getString.string  # &gt; this is error, because it does not
                        # have the attribute 'string' yet
</snippet></ROW><ROW><id>20306185</id><snippet>sep</snippet></ROW><ROW><id>20306185</id><snippet>print ('He is a', '\u200c', 'boy', sep="")
</snippet></ROW><ROW><id>20306185</id><snippet>new_pattern = '\\1\u200c\\2'
</snippet></ROW><ROW><id>20306185</id><snippet>new_pattern = '\\1\N{ZERO WIDTH NON-JOINER}\\2'
</snippet></ROW><ROW><id>20306185</id><snippet>r</snippet></ROW><ROW><id>20306185</id><snippet>\</snippet></ROW><ROW><id>20306185</id><snippet>\u200c</snippet></ROW><ROW><id>20306185</id><snippet>\\1\\u200c\\2</snippet></ROW><ROW><id>20306224</id><snippet>collections.Counter</snippet></ROW><ROW><id>20306224</id><snippet>from collections import Counter
def counting(self):
    with open("BRCA1.txt", "r") as gene:
        nucleotide_counts = Counter(char for line in gene for char in line.lower().strip())
    for (nucleotide, count) in nucleotide_counts.most_common():
        print "number of %s's: %d" % (nucleotide, count)
</snippet></ROW><ROW><id>20306224</id><snippet>from collections import Counter
def counting(self):
    nucleotides = frozenset(('g', 'a', 't', 'c'))
    with open("BRCA1.txt", "r") as gene:
        nucleotide_counts = Counter(char for line in gene for char in line.lower() if char in nucleotides)
    for (nucleotide, count) in nucleotide_counts.most_common():
        print "number of %s's: %d" % (nucleotide, count)
</snippet></ROW><ROW><id>20306224</id><snippet>strip</snippet></ROW><ROW><id>20306243</id><snippet>strip()</snippet></ROW><ROW><id>20306243</id><snippet>&gt;&gt;&gt; "abcdefabcdefabc".strip("cba")
'defabcdef'
</snippet></ROW><ROW><id>20306243</id><snippet>table_name = re.sub(r"\.csv$", "", name)</snippet></ROW><ROW><id>20306243</id><snippet>os.path</snippet></ROW><ROW><id>20306243</id><snippet>&gt;&gt;&gt; table_name, extension = os.path.splitext("movies.csv")
&gt;&gt;&gt; table_name
'movies'
&gt;&gt;&gt; extension
'.csv'
</snippet></ROW><ROW><id>20306319</id><snippet>some_object.__repr__()</snippet></ROW><ROW><id>20306319</id><snippet>repr(some_object)</snippet></ROW><ROW><id>20306319</id><snippet>repr(self)</snippet></ROW><ROW><id>20306319</id><snippet>if</snippet></ROW><ROW><id>20306319</id><snippet>int2meth = {1: "current_balance", 2: "deposit_funds",
            3: "withdraw_funds", 4: "__repr__"}
</snippet></ROW><ROW><id>20306319</id><snippet>methname = int2meth.get(my_choice)
if methname is None:
    print 'Invalid choice, try again!'
else:
    getattr(self, methname)()
</snippet></ROW><ROW><id>20306437</id><snippet>total = 0
while True:
     numbers = raw_input(" Please enter a number: ")
     ...etc...
</snippet></ROW><ROW><id>20306437</id><snippet>total = 0
while True:
    numbers = raw_input(" Please enter a number: ")
    mylist = []
</snippet></ROW><ROW><id>20306509</id><snippet>s[:]</snippet></ROW><ROW><id>20306509</id><snippet>[...]</snippet></ROW><ROW><id>20306509</id><snippet>[1]</snippet></ROW><ROW><id>20306509</id><snippet>[n[1] for n in s]
</snippet></ROW><ROW><id>20306509</id><snippet>&gt;&gt;&gt; s = [ [1,2], [3,4], [5,6] ]
&gt;&gt;&gt; [n[1] for n in s]
[2, 4, 6]
</snippet></ROW><ROW><id>20306527</id><snippet>vn = xn + (K1[1] + 2*K2[1] + 2*K3[1] + K4[1])/6
</snippet></ROW><ROW><id>20306527</id><snippet>vn = vn + (K1[1] + 2*K2[1] + 2*K3[1] + K4[1])/6
</snippet></ROW><ROW><id>20306537</id><snippet>url</snippet></ROW><ROW><id>20306537</id><snippet>Foobars</snippet></ROW><ROW><id>20306537</id><snippet>2013</snippet></ROW><ROW><id>20306537</id><snippet>navBreadcrumb</snippet></ROW><ROW><id>20306537</id><snippet>from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import NoSuchElementException

browser = webdriver.Chrome()
browser.get(url)

search_box1 = browser.find_element_by_id('searchText-0')
search_box2 = browser.find_element_by_id('searchText-2-dateInput')

search_box1.send_keys("Foobars")
search_box1.send_keys("2013")

search_box1.submit()

try:
    Hits = browser.find_element_by_id('navBreadcrumb').text
    Hits = int(Hits)
except NoSuchElementException:
    Hits = int(0)

browser.quit()
</snippet></ROW><ROW><id>20306556</id><snippet>mn_class</snippet></ROW><ROW><id>20306556</id><snippet>classes.append(str(nonaccepts))</snippet></ROW><ROW><id>20306556</id><snippet>if next_class == None:
    for c in classes:
        if next in c:
            next_class = c
</snippet></ROW><ROW><id>20306556</id><snippet>DAWG</snippet></ROW><ROW><id>20306556</id><snippet>mn_classes</snippet></ROW><ROW><id>20306556</id><snippet>return map(frosenset, classes)
</snippet></ROW><ROW><id>20306571</id><snippet>dayfirst=True</snippet></ROW><ROW><id>20306571</id><snippet>read_csv</snippet></ROW><ROW><id>20306571</id><snippet>In [6]: df = pd.read_csv("ooo.csv", skiprows=1, names=['Date', 'Hash Rate (Gh/s)'], parse_dates=True, index_col=0, dayfirst=True)

In [7]: df.head(10)
Out[7]: 
                     Hash Rate (Gh/s)
Date                                 
2009-01-04 18:15:05          0.000000
2009-01-05 18:15:05          0.000000
2009-01-06 18:15:05          0.000000
2009-01-07 18:15:05          0.000000
2009-01-08 18:15:05          0.000000
2009-01-09 18:15:05          0.000696
2009-01-10 18:15:05          0.001541
2009-01-11 18:15:05          0.005269
2009-01-12 18:15:05          0.004424
2009-01-13 18:15:05          0.005717

[10 rows x 1 columns]

In [8]: !head ooo.csv
03/01/2009 18:15:05,0.00004971026962962963
04/01/2009 18:15:05,0.0
05/01/2009 18:15:05,0.0
06/01/2009 18:15:05,0.0
07/01/2009 18:15:05,0.0
08/01/2009 18:15:05,0.0
09/01/2009 18:15:05,0.0006959437748148148
10/01/2009 18:15:05,0.0015410183585185184
11/01/2009 18:15:05,0.005269288580740741
12/01/2009 18:15:05,0.004424213997037036

In [9]: df["Hash Rate (Gh/s)"].plot(logy=True)
Out[9]: &lt;matplotlib.axes._subplots.AxesSubplot at 0xc4ea58c&gt;
</snippet></ROW><ROW><id>20306592</id><snippet>\b</snippet></ROW><ROW><id>20306592</id><snippet>regexp = re.compile(r"\d+(.*?)(\bfahrenheit\b|\bf\b)", re.IGNORECASE)
</snippet></ROW><ROW><id>20306602</id><snippet>import csv

with open('c.csv', 'wb') as outcsv:
    # Python 3: use open('c.csv', 'w', newline='') instead
    writer = csv.writer(outcsv)

    # copy a.csv across, adding a 3rd column
    with open('a.csv', 'rb') as incsv:
        # Python 3: use open('a.csv', newline='') instead
        reader = csv.reader(incsv)
        writer.writerows(row + [0.0] for row in reader)

    # copy b.csv across, inserting a 2nd column
    with open('b.csv', 'rb') as incsv:
        # Python 3: use open('b.csv', newline='') instead
        reader = csv.reader(incsv)
        writer.writerows(row[:1] + [0.0] + row[1:] for row in reader)
</snippet></ROW><ROW><id>20306602</id><snippet>writer.writerows()</snippet></ROW><ROW><id>20306602</id><snippet>reader</snippet></ROW><ROW><id>20306852</id><snippet>c:\\Python27\\bin\\python</snippet></ROW><ROW><id>20306852</id><snippet>python</snippet></ROW><ROW><id>20307236</id><snippet> YYYY-MM-DD HH:MM:SS not YYYY-MM-DD HH-MM-SS
</snippet></ROW><ROW><id>20307260</id><snippet>print</snippet></ROW><ROW><id>20307260</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; with open("propertyOutput.csv", "rb") as fp:
...     reader = csv.DictReader(fp, skipinitialspace=True)
...     for row in reader:
...         print row
...         
{'_id': 'ObjectID(525aae)', 'user_id': 'ObjectID(52389889)', 'name': 'Property 1', 'zip': '11101'}
{'_id': 'ObjectID(525afec3)', 'user_id': 'ObjectID(52389d1bc5f59)', 'name': 'San diego beach house', 'zip': 'ca4020'}
</snippet></ROW><ROW><id>20307270</id><snippet>[x.strip("'") for x in s.split('=')]
</snippet></ROW><ROW><id>20307270</id><snippet>s.replace("'","").split("=")
</snippet></ROW><ROW><id>20307344</id><snippet>&gt;&gt;&gt; sentence.split()
['?!a#', '.see']
</snippet></ROW><ROW><id>20307344</id><snippet>&gt;&gt;&gt; word_tokenizer = RegexpTokenizer('[\S]+') 
&gt;&gt;&gt; word_tokenizer.tokenize(sentence)
['?!a#', '.see']
</snippet></ROW><ROW><id>20307344</id><snippet>'\S'</snippet></ROW><ROW><id>20307371</id><snippet>detectCapital</snippet></ROW><ROW><id>20307371</id><snippet>False</snippet></ROW><ROW><id>20307371</id><snippet>True</snippet></ROW><ROW><id>20307371</id><snippet>True</snippet></ROW><ROW><id>20307371</id><snippet>False</snippet></ROW><ROW><id>20307371</id><snippet>def detectCapital(word):
    for i in range(0, len(word)+1):
        if (ord(word[i]) &gt;= 65 and ord(word[i]) &lt;= 90):
            return True
    return False
</snippet></ROW><ROW><id>20307371</id><snippet>detectLower</snippet></ROW><ROW><id>20307371</id><snippet>detectDigit</snippet></ROW><ROW><id>20307436</id><snippet>enumerate</snippet></ROW><ROW><id>20307436</id><snippet>dict.items()</snippet></ROW><ROW><id>20307436</id><snippet>def process_dict(d, k, v):
     indexes = [i for i, x in enumerate(d[k]) if x==v] #indexes where a match is found
     return {k:[v[i] for i in indexes] for k, v in d.items()}
... 
&gt;&gt;&gt; d = {'name': ['bob', 'bob', 'james', 'jeff'], 'last': ['bob', 'jeff', 'smith', 'jones']}
&gt;&gt;&gt; process_dict(d, 'name', 'bob')
{'last': ['bob', 'jeff'], 'name': ['bob', 'bob']}
</snippet></ROW><ROW><id>20307530</id><snippet>urls.py</snippet></ROW><ROW><id>20307530</id><snippet>password_reset_done</snippet></ROW><ROW><id>20307530</id><snippet>(r'^resetpassword/passwordsent/$', 'django.contrib.auth.views.password_reset_done', name='password_reset_done'),
</snippet></ROW><ROW><id>20307530</id><snippet>password_reset</snippet></ROW><ROW><id>20307530</id><snippet>reverse('password_reset_done')</snippet></ROW><ROW><id>20307530</id><snippet>reverse</snippet></ROW><ROW><id>20307530</id><snippet>name</snippet></ROW><ROW><id>20307530</id><snippet>reverse</snippet></ROW><ROW><id>20307543</id><snippet>%appdata%</snippet></ROW><ROW><id>20307543</id><snippet>%appdata%</snippet></ROW><ROW><id>20307543</id><snippet>.EliteCS/sysfiles</snippet></ROW><ROW><id>20307543</id><snippet>appdata</snippet></ROW><ROW><id>20307543</id><snippet>import os
import sys

sys.insert(0, os.path.join(os.environ['APPDATA'], '.EliteCS', 'sysfiles'))
</snippet></ROW><ROW><id>20307569</id><snippet>def hello(request):
    return HttpResponse('Hello World!')

def home(request):
    return render_to_response('index.html', {'variable': 'world'})
</snippet></ROW><ROW><id>20307569</id><snippet>&lt;h1&gt;Hello {{ variable }}, welcome to my awesome site&lt;/h1&gt;
</snippet></ROW><ROW><id>20307569</id><snippet>url(r'^hello/', 'myapp.views.hello'),
url(r'^home/', 'myapp.views.home'),
</snippet></ROW><ROW><id>20307569</id><snippet>$.ajax({
    url: '127.0.0.1:8000/hello',
    type: 'get', //this is the default though, you don't actually need to always mention it
    success: function(data) {
        alert(data);
    },
    failure: function(data) { 
        alert('Got an error dude');
    }
}); 
</snippet></ROW><ROW><id>20307569</id><snippet>&lt;h1&gt;Hello world, welcome to my awesome site&lt;/h1&gt;</snippet></ROW><ROW><id>20307569</id><snippet>console.log</snippet></ROW><ROW><id>20307667</id><snippet>FREEZER_DESTINATION</snippet></ROW><ROW><id>20307677</id><snippet>if list_of_shots[1] == (i[1] + 50):
</snippet></ROW><ROW><id>20307677</id><snippet>if abs( list_of_shots[1] - i[1] ) &lt;= 50:
</snippet></ROW><ROW><id>20307677</id><snippet>for i in enemies:
    enemy_len += 1
for i in enemies[enemy_len-1]:
</snippet></ROW><ROW><id>20307677</id><snippet>for i in enemies[-1]:
</snippet></ROW><ROW><id>20307677</id><snippet>pygame.Rect()</snippet></ROW><ROW><id>20307677</id><snippet>i.x</snippet></ROW><ROW><id>20307677</id><snippet>i[0]</snippet></ROW><ROW><id>20307677</id><snippet>i.centerx</snippet></ROW><ROW><id>20307677</id><snippet>i.bottom</snippet></ROW><ROW><id>20307677</id><snippet>i.top</snippet></ROW><ROW><id>20307677</id><snippet>class</snippet></ROW><ROW><id>20307677</id><snippet>pygame.Rect()</snippet></ROW><ROW><id>20307677</id><snippet>I</snippet></ROW><ROW><id>20307677</id><snippet>can't</snippet></ROW><ROW><id>20307677</id><snippet>don't</snippet></ROW><ROW><id>20307677</id><snippet>I'm</snippet></ROW><ROW><id>20307677</id><snippet>I've</snippet></ROW><ROW><id>20307677</id><snippet>i</snippet></ROW><ROW><id>20307677</id><snippet>cant</snippet></ROW><ROW><id>20307677</id><snippet>dont</snippet></ROW><ROW><id>20307677</id><snippet>Im</snippet></ROW><ROW><id>20307677</id><snippet>Ive</snippet></ROW><ROW><id>20307771</id><snippet>tally = {k: sum(d.get(k) if k != 'count' else 1 for d in data if d.get('code') == code and d.get('type') == type and d.get('color') == color) for k in ('count', 'amount', 'cost')}
</snippet></ROW><ROW><id>20307816</id><snippet>PhotoImage</snippet></ROW><ROW><id>20307908</id><snippet>after(time, function_name)</snippet></ROW><ROW><id>20307908</id><snippet>execute_dummy()</snippet></ROW><ROW><id>20307908</id><snippet>self.root.after(100, self.execute) # 100ms = 0.1 second
</snippet></ROW><ROW><id>20307920</id><snippet>os.path.dirname(__file__)</snippet></ROW><ROW><id>20307977</id><snippet>&gt;&gt;&gt; len('Percentage of A')
15
&gt;&gt;&gt; len('Percentage of  A')
16
</snippet></ROW><ROW><id>20307979</id><snippet>Button</snippet></ROW><ROW><id>20307979</id><snippet>temp = Button(...)
temp.config(command=lambda j=i, button=temp: self.letterGuess(alpha[j], button))
temp.grid(...)
</snippet></ROW><ROW><id>20307979</id><snippet>letterGuess</snippet></ROW><ROW><id>20307979</id><snippet>def letterGuess(letter, button):
    button.config(state=DISABLED)
</snippet></ROW><ROW><id>20307979</id><snippet># before loop
all_buttons = dict()

# inside loop
all_buttons[ alpha[i] ] = Button(...)
all_buttons[ alpha[i] ].grid(...) 

# in function
def letterGuess(letter):
    all_buttons[ letter ].config(state=DISABLED)
</snippet></ROW><ROW><id>20307979</id><snippet>alpha = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
buttonFrame = Frame(self).grid(row=0, column=1)

all_buttons = dict()

for i in range(len(alpha)):

    if i &lt;= 6:
         all_buttons[ alpha[i] ] = Button(buttonFrame, height=2, width=5, text = alpha[i], command=lambda j=i: self.letterGuess(alpha[j]))
         all_buttons[ alpha[i] ].grid(row=1, column=self.columnz(i))
    elif 6 &lt; i &lt;=13:
         all_buttons[ alpha[i] ] = Button(buttonFrame, height=2, width=5, text = alpha[i], command=lambda j=i: self.letterGuess(alpha[j]))
         all_buttons[ alpha[i] ].grid(row=2, column=self.columnz(i))
    elif 13 &lt; i &lt;=20:
         all_buttons[ alpha[i] ] = Button(buttonFrame, height=2, width=5, text = alpha[i], command=lambda j=i: self.letterGuess(alpha[j]))
         all_buttons[ alpha[i] ].grid(row=3, column=self.columnz(i))
    elif 20 &lt; i &lt;26:
         all_buttons[ alpha[i] ] = Button(buttonFrame, height=2, width=5, text = alpha[i], command=lambda j=i: self.letterGuess(alpha[j]))
         all_buttons[ alpha[i] ].grid(row=4, column=self.columnz(i))
</snippet></ROW><ROW><id>20307979</id><snippet>6 &lt; i &lt;=13</snippet></ROW><ROW><id>20307979</id><snippet>i &gt; 6 and i &lt;= 13</snippet></ROW><ROW><id>20307979</id><snippet>for i, letter in enumerate(alpha):
</snippet></ROW><ROW><id>20307979</id><snippet>letter</snippet></ROW><ROW><id>20307979</id><snippet>alpha[i]</snippet></ROW><ROW><id>20308335</id><snippet>https://accounts.google.com/o/oauth2/token</snippet></ROW><ROW><id>20308480</id><snippet>canvas.delete(ALL)</snippet></ROW><ROW><id>20308510</id><snippet>import re
from urllib.request import urlopen

def get_page(url, encoding='utf-8'):
    return urlopen(url).read().decode(encoding, errors='ignore')

def get_title(txt, reg=re.compile('&lt;title&gt;(.*)&lt;/title&gt;', re.IGNORECASE | re.DOTALL)):
    match = reg.search(txt)
    if match is None:
        return ''
    else:
        return match.group(1).strip()

def main():
    with open('websites.txt') as inf:
        urls = [line.strip() for line in inf]
    titles = [get_title(get_page(url)) for url in urls if url]
    print(titles)

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>20308510</id><snippet>["LimeCD - Lime's Code Library", 'YouTube', 'Big Solutions - Aqui nós pensamos grande!']
</snippet></ROW><ROW><id>20308518</id><snippet>def updateDB(databaseLoc, post_id, new_class):
</snippet></ROW><ROW><id>20308518</id><snippet>updateDB(databaseLoc, new_class, post_id)
</snippet></ROW><ROW><id>20308518</id><snippet>POSTID = 1</snippet></ROW><ROW><id>20308595</id><snippet>while 10 &lt; a &lt; 20:
    whatever
</snippet></ROW><ROW><id>20308595</id><snippet>for</snippet></ROW><ROW><id>20308595</id><snippet>for a in range(11, 20):
    whatever
</snippet></ROW><ROW><id>20308595</id><snippet>if</snippet></ROW><ROW><id>20308595</id><snippet>if 10 &lt; a &lt; 20:
    whatever
</snippet></ROW><ROW><id>20308595</id><snippet>a</snippet></ROW><ROW><id>20308595</id><snippet>10</snippet></ROW><ROW><id>20308655</id><snippet>Vec2D</snippet></ROW><ROW><id>20308655</id><snippet>Vec2D</snippet></ROW><ROW><id>20308655</id><snippet>upsublist[0] = turtle.Vec2D(round(upsublist[0][0], 2), round(upsublist[0][1], 2))
</snippet></ROW><ROW><id>20308657</id><snippet>except</snippet></ROW><ROW><id>20308657</id><snippet>try</snippet></ROW><ROW><id>20308657</id><snippet>try/except</snippet></ROW><ROW><id>20308657</id><snippet>from __future__ import print_function
import timeit
import random
import collections

def f1():
    d={}
    for x in tgt:
        if x in d:
            d[x]+=1
        else:
            d[x]=1
    return d

def f2():
    d = {}
    for x in tgt:
        try:
            d[x]+=1
        except KeyError:
            d[x] = 1    

def f3():
    d={}.fromkeys(tgt, 0)
    for x in tgt:
        d[x]+=1      

def f4():
    d=collections.defaultdict(int)
    for x in tgt:
        d[x]+=1    

def f5():
    return collections.Counter(tgt)        

def f6():
    d={}
    for x in tgt:
        d[x]=d.setdefault(x, 0)+1
    return d

def f7():
    d={}
    for x in tgt:
        d[x]=d.get(x,0)+1

    return d    

def cmpthese(funcs, c=10000, rate=True, micro=False):
    """Generate a Perl style function benchmark"""                   
    def pprint_table(table):
        """Perl style table output"""
        def format_field(field, fmt='{:,.0f}'):
            if type(field) is str: return field
            if type(field) is tuple: return field[1].format(field[0])
            return fmt.format(field)     

        def get_max_col_w(table, index):
            return max([len(format_field(row[index])) for row in table])         

        col_paddings=[get_max_col_w(table, i) for i in range(len(table[0]))]
        for i,row in enumerate(table):
            # left col
            row_tab=[row[0].ljust(col_paddings[0])]
            # rest of the cols
            row_tab+=[format_field(row[j]).rjust(col_paddings[j]) for j in range(1,len(row))]
            print(' '.join(row_tab))                

    results={k.__name__:timeit.Timer(k).timeit(c) for k in funcs}
    fastest=sorted(results,key=results.get, reverse=True)
    table=[['']]
    if rate: table[0].append('rate/sec')
    if micro: table[0].append('usec/pass')
    table[0].extend(fastest)
    for e in fastest:
        tmp=[e]
        if rate:
            tmp.append('{:,}'.format(int(round(float(c)/results[e]))))

        if micro:
            tmp.append('{:.3f}'.format(1000000*results[e]/float(c)))

        for x in fastest:
            if x==e: tmp.append('--')
            else: tmp.append('{:.1%}'.format((results[x]-results[e])/results[e]))
        table.append(tmp) 

    pprint_table(table)                    

if __name__=='__main__':
    import sys
    print(sys.version)
    for j in [100,1000]:
        for t in [(0,5), (0,50), (0,500)]:
            tgt=[random.randint(*t) for i in range(j)]
            print('{} rand ints between {}:'.format(j,t))
            print('=====')
            cmpthese([f1,f2,f3,f4,f5,f6,f7])
            print()
</snippet></ROW><ROW><id>20308657</id><snippet>timeit</snippet></ROW><ROW><id>20308657</id><snippet>3.3.2 (default, Jul  6 2013, 10:40:18) 
[GCC 4.2.1 Compatible Apple LLVM 4.2 (clang-425.0.28)]
100 rand ints between (0, 5):
=====
   rate/sec     f5     f6     f7     f1     f3     f2     f4
f5   25,025     -- -62.0% -63.5% -73.8% -74.2% -74.4% -75.1%
f6   65,894 163.3%     --  -3.8% -31.1% -32.0% -32.5% -34.5%
f7   68,504 173.7%   4.0%     -- -28.3% -29.3% -29.8% -31.9%
f1   95,570 281.9%  45.0%  39.5%     --  -1.3%  -2.1%  -5.0%
f3   96,843 287.0%  47.0%  41.4%   1.3%     --  -0.8%  -3.7%
f2   97,641 290.2%  48.2%  42.5%   2.2%   0.8%     --  -2.9%
f4  100,559 301.8%  52.6%  46.8%   5.2%   3.8%   3.0%     --

100 rand ints between (0, 50):
=====
   rate/sec     f5     f4     f2     f6     f7     f3     f1
f5   20,224     -- -58.3% -58.9% -67.5% -67.9% -76.3% -79.8%
f4   48,517 139.9%     --  -1.5% -22.0% -23.0% -43.0% -51.6%
f2   49,266 143.6%   1.5%     -- -20.8% -21.9% -42.1% -50.8%
f6   62,174 207.4%  28.1%  26.2%     --  -1.4% -27.0% -38.0%
f7   63,047 211.7%  29.9%  28.0%   1.4%     -- -26.0% -37.1%
f3   85,161 321.1%  75.5%  72.9%  37.0%  35.1%     -- -15.0%
f1  100,208 395.5% 106.5% 103.4%  61.2%  58.9%  17.7%     --

100 rand ints between (0, 500):
=====
   rate/sec     f5     f4     f2     f6     f7     f3     f1
f5   16,291     -- -45.2% -49.1% -70.0% -71.1% -78.0% -82.9%
f4   29,736  82.5%     --  -7.2% -45.2% -47.2% -59.8% -68.9%
f2   32,026  96.6%   7.7%     -- -41.0% -43.1% -56.7% -66.5%
f6   54,280 233.2%  82.5%  69.5%     --  -3.6% -26.5% -43.1%
f7   56,309 245.6%  89.4%  75.8%   3.7%     -- -23.8% -41.0%
f3   73,895 353.6% 148.5% 130.7%  36.1%  31.2%     -- -22.6%
f1   95,480 486.1% 221.1% 198.1%  75.9%  69.6%  29.2%     --

1000 rand ints between (0, 5):
=====
   rate/sec     f5     f6     f7     f1     f3     f2     f4
f5    2,896     -- -58.5% -59.3% -71.6% -72.3% -75.3% -78.1%
f6    6,974 140.8%     --  -2.0% -31.7% -33.3% -40.6% -47.2%
f7    7,115 145.7%   2.0%     -- -30.3% -31.9% -39.4% -46.1%
f1   10,205 252.4%  46.3%  43.4%     --  -2.4% -13.1% -22.7%
f3   10,454 261.0%  49.9%  46.9%   2.4%     -- -11.0% -20.8%
f2   11,743 305.5%  68.4%  65.0%  15.1%  12.3%     -- -11.1%
f4   13,206 356.0%  89.4%  85.6%  29.4%  26.3%  12.5%     --

1000 rand ints between (0, 50):
=====
   rate/sec     f5     f6     f7     f1     f3     f2     f4
f5    2,832     -- -59.4% -60.1% -72.3% -72.9% -73.2% -75.3%
f6    6,972 146.2%     --  -1.7% -31.9% -33.3% -33.9% -39.2%
f7    7,092 150.4%   1.7%     -- -30.7% -32.2% -32.8% -38.1%
f1   10,237 261.5%  46.8%  44.4%     --  -2.1%  -3.0% -10.7%
f3   10,457 269.3%  50.0%  47.4%   2.1%     --  -0.9%  -8.8%
f2   10,552 272.6%  51.3%  48.8%   3.1%   0.9%     --  -8.0%
f4   11,466 304.9%  64.4%  61.7%  12.0%   9.7%   8.7%     --

1000 rand ints between (0, 500):
=====
   rate/sec     f5     f4     f2     f6     f7     f3     f1
f5    2,170     -- -56.1% -56.6% -63.0% -63.6% -71.8% -75.3%
f4    4,942 127.7%     --  -1.1% -15.8% -17.1% -35.7% -43.9%
f2    4,997 130.2%   1.1%     -- -14.9% -16.1% -35.0% -43.2%
f6    5,869 170.4%  18.8%  17.5%     --  -1.5% -23.7% -33.3%
f7    5,958 174.5%  20.6%  19.2%   1.5%     -- -22.5% -32.3%
f3    7,690 254.4%  55.6%  53.9%  31.0%  29.1%     -- -12.7%
f1    8,804 305.7%  78.2%  76.2%  50.0%  47.8%  14.5%     --
</snippet></ROW><ROW><id>20308657</id><snippet>2.7.5 (default, Aug 25 2013, 00:04:04) 
[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)]
100 rand ints between (0, 5):
=====
   rate/sec     f5     f6     f7     f2     f1     f3     f4
f5   28,450     -- -40.4% -41.2% -50.2% -51.6% -56.4% -59.2%
f6   47,760  67.9%     --  -1.3% -16.4% -18.7% -26.9% -31.6%
f7   48,380  70.1%   1.3%     -- -15.3% -17.7% -25.9% -30.7%
f2   57,100 100.7%  19.6%  18.0%     --  -2.9% -12.6% -18.2%
f1   58,781 106.6%  23.1%  21.5%   2.9%     -- -10.0% -15.8%
f3   65,306 129.5%  36.7%  35.0%  14.4%  11.1%     --  -6.4%
f4   69,798 145.3%  46.1%  44.3%  22.2%  18.7%   6.9%     --

100 rand ints between (0, 50):
=====
   rate/sec     f2     f5     f6     f7     f4     f3     f1
f2   23,518     -- -13.7% -47.3% -47.6% -50.1% -62.2% -62.5%
f5   27,241  15.8%     -- -38.9% -39.3% -42.2% -56.2% -56.6%
f6   44,600  89.6%  63.7%     --  -0.5%  -5.4% -28.2% -29.0%
f7   44,846  90.7%  64.6%   0.6%     --  -4.9% -27.8% -28.6%
f4   47,169 100.6%  73.2%   5.8%   5.2%     -- -24.1% -24.9%
f3   62,151 164.3% 128.2%  39.4%  38.6%  31.8%     --  -1.0%
f1   62,785 167.0% 130.5%  40.8%  40.0%  33.1%   1.0%     --

100 rand ints between (0, 500):
=====
   rate/sec     f2     f5     f4     f6     f7     f3     f1
f2   13,990     -- -45.0% -56.3% -65.4% -65.7% -75.1% -78.1%
f5   25,420  81.7%     -- -20.5% -37.0% -37.6% -54.7% -60.1%
f4   31,994 128.7%  25.9%     -- -20.8% -21.5% -42.9% -49.8%
f6   40,376 188.6%  58.8%  26.2%     --  -0.9% -28.0% -36.7%
f7   40,750 191.3%  60.3%  27.4%   0.9%     -- -27.3% -36.1%
f3   56,072 300.8% 120.6%  75.3%  38.9%  37.6%     -- -12.1%
f1   63,783 355.9% 150.9%  99.4%  58.0%  56.5%  13.8%     --

1000 rand ints between (0, 5):
=====
   rate/sec     f5     f7     f6     f1     f3     f2     f4
f5    3,267     -- -34.1% -34.6% -45.8% -53.0% -57.9% -60.6%
f7    4,958  51.7%     --  -0.8% -17.7% -28.7% -36.1% -40.2%
f6    4,999  53.0%   0.8%     -- -17.0% -28.1% -35.6% -39.8%
f1    6,025  84.4%  21.5%  20.5%     -- -13.3% -22.3% -27.4%
f3    6,953 112.8%  40.2%  39.1%  15.4%     -- -10.4% -16.2%
f2    7,756 137.4%  56.5%  55.2%  28.7%  11.6%     --  -6.5%
f4    8,297 153.9%  67.4%  66.0%  37.7%  19.3%   7.0%     --

1000 rand ints between (0, 50):
=====
   rate/sec     f5     f7     f6     f1     f2     f3     f4
f5    3,230     -- -34.1% -34.2% -47.5% -49.1% -53.4% -58.0%
f7    4,900  51.7%     --  -0.2% -20.4% -22.8% -29.3% -36.3%
f6    4,910  52.0%   0.2%     -- -20.2% -22.6% -29.2% -36.2%
f1    6,152  90.5%  25.6%  25.3%     --  -3.0% -11.3% -20.0%
f2    6,344  96.4%  29.5%  29.2%   3.1%     --  -8.5% -17.5%
f3    6,935 114.7%  41.5%  41.2%  12.7%   9.3%     --  -9.8%
f4    7,692 138.2%  57.0%  56.7%  25.0%  21.3%  10.9%     --

1000 rand ints between (0, 500):
=====
   rate/sec     f2     f5     f6     f7     f4     f3     f1
f2    2,414     -- -17.4% -43.4% -44.3% -48.4% -57.3% -58.1%
f5    2,921  21.0%     -- -31.5% -32.6% -37.5% -48.3% -49.3%
f6    4,264  76.7%  46.0%     --  -1.6%  -8.8% -24.6% -26.0%
f7    4,332  79.5%  48.3%   1.6%     --  -7.4% -23.4% -24.9%
f4    4,676  93.7%  60.1%   9.7%   7.9%     -- -17.3% -18.9%
f3    5,655 134.3%  93.6%  32.6%  30.5%  20.9%     --  -1.9%
f1    5,766 138.9%  97.4%  35.2%  33.1%  23.3%   2.0%     --
</snippet></ROW><ROW><id>20308657</id><snippet>Counter</snippet></ROW><ROW><id>20308657</id><snippet>try/except</snippet></ROW><ROW><id>20308657</id><snippet>if key in dict</snippet></ROW><ROW><id>20308657</id><snippet>{}.fromkeys(tgt, 0)</snippet></ROW><ROW><id>20308657</id><snippet>defaultdict</snippet></ROW><ROW><id>20308748</id><snippet>def index(request):
   hat_id = request.GET.get('hat_id', None)
   if hat_id:
       return HttpResponseRedirect(reverse('detay', args=[hat_id]))
</snippet></ROW><ROW><id>20308782</id><snippet>&lt;presence xmlns='jabber:client' from='a@gmail.com' type='subscribe' to='b@gmail.com'&gt;&lt;sub:invitation xmlns:sub='google:subscribe'&gt;&lt;sub:body/&gt;&lt;/sub:invitation&gt;&lt;/presence&gt; 
</snippet></ROW><ROW><id>20308917</id><snippet>sudo dpkg --configure python2.7-dev
</snippet></ROW><ROW><id>20308935</id><snippet>pageReady</snippet></ROW><ROW><id>20308935</id><snippet>content.decode()</snippet></ROW><ROW><id>20308935</id><snippet>pageReady = u'content.decode()'
</snippet></ROW><ROW><id>20308935</id><snippet>page.read()</snippet></ROW><ROW><id>20308935</id><snippet>import urllib
import lxml.html

# pageReady = u'content.decode()'   &lt;----------- Remove/comment out this line.
page = urllib.urlopen('http://pogoda.yandex.ru/moscow/')
pageReady = page.read()   # &lt;-------------------------------
xmldata = lxml.html.document_fromstring(pageReady)
temperature = xmldata.xpath('//div[@class="b-thermometer__now"]/text()')              
clouds = xmldata.xpath('//div[@class="b-info-item b-info-item_type_fact-big"]/text()')
page.close()

print('%s, %s'%(temperature[0], clouds[0])) 
</snippet></ROW><ROW><id>20308966</id><snippet>\n</snippet></ROW><ROW><id>20309051</id><snippet>lock</snippet></ROW><ROW><id>20309051</id><snippet>def deduct(self):
    with lock:
        self.quantity -= 1
</snippet></ROW><ROW><id>20309051</id><snippet>class FileQuantity(object):
    """Keeps track of files that have been uploaded and how many are left"""

    def __init__(self, file_quantity):
        self.quantity = file_quantity
        self.total = file_quantity
        self.lock = threading.Lock()

    def deduct(self):
        with self.lock:
            self.quantity -= 1
</snippet></ROW><ROW><id>20309051</id><snippet>self.lock</snippet></ROW><ROW><id>20309051</id><snippet>FileQuantity</snippet></ROW><ROW><id>20309060</id><snippet>new_dict = {}
names = [] # used map 0, 1, 2 to `name`, `last`, `middle`
with open('/path/to/test.txt') as f:

    # Handle header (the first) line: `name, last, middle`
    for name in next(f).split(','): # split fields by `,`
        name = name.strip()  # remove surrounding spaces
        names.append(name)
        new_dict[name] = []  # initialize dictionary with empty list.

    # Handle body.
    for line in f:
        # enumerate(['bob', 'jones', 'm']) return an interator
        #    that generates (0, 'bob'), (1, 'jones'), (2, 'm')
        for i, value in enumerate(line.split(',')):
            new_dict[names[i]].append(value.strip())

print(new_dict)
</snippet></ROW><ROW><id>20309060</id><snippet>{'middle': ['m', 'k', 'f'], 'last': ['jones', 'bob', 'lol'], 'name': ['bob', 'jones', 'alice']}
</snippet></ROW><ROW><id>20309202</id><snippet>def findIt(data, num):
    num = str(num)
    return any(num in str(i) for item in data for i in item)

data = ((1234L,), (23456L,), (3333L,))
print findIt(data, 123)
</snippet></ROW><ROW><id>20309202</id><snippet>True
</snippet></ROW><ROW><id>20309356</id><snippet>format</snippet></ROW><ROW><id>20309356</id><snippet>&gt;&gt;&gt; a = "John"
&gt;&gt;&gt; "{:&lt;15}".format(a)
'John           '
</snippet></ROW><ROW><id>20309396</id><snippet>if A[1] &lt; 0:
    A[0] *= -1
</snippet></ROW><ROW><id>20309418</id><snippet>struct.pack</snippet></ROW><ROW><id>20309418</id><snippet>&lt;Q</snippet></ROW><ROW><id>20309418</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; import time
&gt;&gt;&gt; x = int(time.time())
&gt;&gt;&gt; x
1385879197
&gt;&gt;&gt; hex(x)
'0x529ad69d'
&gt;&gt;&gt; struct.pack('&lt;Q', x)
'\x9d\xd6\x9aR\x00\x00\x00\x00'
</snippet></ROW><ROW><id>20309418</id><snippet>import struct
import time
import _winreg

def add():
    ts = "Software\\Test\\ti"
    try:
        key = _winreg.CreateKeyEx(_winreg.HKEY_CURRENT_USER, ts, 0,
                                  _winreg.KEY_ALL_ACCESS)
    except:
        return Falseimport struct
import time
import _winreg

def add():
    ts = "Software\\Test\\ti"
    try:
        key = _winreg.CreateKeyEx(_winreg.HKEY_CURRENT_USER, ts, 0,
                                  _winreg.KEY_ALL_ACCESS)
    except:
        return False
    else:
        value = struct.pack('&lt;Q', int(time.time())) # &lt;-------
        _winreg.SetValueEx(key, "test", 0, _winreg.REG_BINARY, value)
        _winreg.CloseKey(key)
        return True

add()
</snippet></ROW><ROW><id>20309470</id><snippet>file.py</snippet></ROW><ROW><id>20309470</id><snippet>from file import function</snippet></ROW><ROW><id>20309470</id><snippet>function(a, b)</snippet></ROW><ROW><id>20309470</id><snippet>file</snippet></ROW><ROW><id>20309470</id><snippet>a.py</snippet></ROW><ROW><id>20309470</id><snippet>b.py</snippet></ROW><ROW><id>20309470</id><snippet>a.py</snippet></ROW><ROW><id>20309470</id><snippet>b.py</snippet></ROW><ROW><id>20309728</id><snippet>def f2(m, n):
    #First, let's create a list with the size of m, and
    #each row with the size of n.
    result = [[0 for _ in range(n)] for _ in range(m)]
    #now, you can loop through it easily.
    for i in range(m): #outer list
         for j in range(n): #inner list
             result[i][j] = i*n+j #put it there :)
    return result
</snippet></ROW><ROW><id>20310023</id><snippet>myDict = {
    'p1': {1: [1, 2, 3], 2: [4, 5, 6]},
    'p2': {3: [7, 8, 9], 4: [0, 1, 2]}
}

from collections import Mapping

def go_go_gadget_go(mapping):
    for k, v in mapping.items():
        if isinstance(v, Mapping):
            for ok in go_go_gadget_go(v):
                yield [k] + ok
        else:
            yield [k] + [v]

for protocol, n, counts in go_go_gadget_go(myDict):
    print(protocol, n, counts)

# p2 3 [7, 8, 9]
# p2 4 [0, 1, 2]
# p1 1 [1, 2, 3]
# p1 2 [4, 5, 6]
</snippet></ROW><ROW><id>20310135</id><snippet>etc/sudoers</snippet></ROW><ROW><id>20310135</id><snippet>Defaults    env_reset
Defaults    secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
Defaults    env_keep += "DISPLAY"
Defaults    env_keep += "XAUTHORITY"
</snippet></ROW><ROW><id>20310135</id><snippet>~/.bashrc</snippet></ROW><ROW><id>20310135</id><snippet>if [ -z "$XAUTHORITY" ]; then
    if [ -e $HOME/.Xauthority ]; then
        export XAUTHORITY=$HOME/.Xauthority;
    fi;
fi
</snippet></ROW><ROW><id>20310135</id><snippet>etc/sudoers.d/README</snippet></ROW><ROW><id>20310318</id><snippet>{"684x400":
    {"949520":
        {"_bannerpath": "http://tvdb.com/banners/somepath",
         "rating" : 9.000
         #etc...
        },
     "456520":
        {"_bannerpath": "http://tvdb.com/banners/somepath",
         "rating" : 9.000
         #and so on...
        }
    }
}
</snippet></ROW><ROW><id>20310318</id><snippet>from operator import itemgetter

for resolution, banners in tvdb_api_result.items():
    bannerpath = max(banners.values(), key=itemgetter('rating'))['_bannerpath']
    print("%s %s" % (resolution, bannerpath))
</snippet></ROW><ROW><id>20310334</id><snippet>import os

listdirectory = os.listdir(".") # gets the name of all files in your dir
for filename in listdirectory: 
    if filename.endswith(".wav"): # check each of the files for whether or not they end in .wav
</snippet></ROW><ROW><id>20310356</id><snippet>@app.route('/validate_line/', methods=['POST'])
</snippet></ROW><ROW><id>20310356</id><snippet>['GET', 'POST']
</snippet></ROW><ROW><id>20310627</id><snippet>http://localhost:8080</snippet></ROW><ROW><id>20310893</id><snippet>import csv
import random

spamReader = csv.reader(open('A3_words.csv', 'r'))

data = sum([i for i in spamReader],[]) #To flatten the list
print(random.choice(data))
</snippet></ROW><ROW><id>20310949</id><snippet>deal</snippet></ROW><ROW><id>20310949</id><snippet>[a, b] = deal(b, a)
</snippet></ROW><ROW><id>20311013</id><snippet>some_func</snippet></ROW><ROW><id>20311013</id><snippet>i</snippet></ROW><ROW><id>20311013</id><snippet>i</snippet></ROW><ROW><id>20311013</id><snippet>i</snippet></ROW><ROW><id>20311013</id><snippet>some_func</snippet></ROW><ROW><id>20311013</id><snippet>def try_print(string, i):
    print eval(string)

def some_func():
    global gameset
    gameset = "gamese,gamese1"
    for i in gameset.split(","):
            try_print('''"Trying to print the value of %s" %i''', i)
</snippet></ROW><ROW><id>20311013</id><snippet>eval</snippet></ROW><ROW><id>20311013</id><snippet>print "Trying to print the value of %s" %i
</snippet></ROW><ROW><id>20311210</id><snippet>list</snippet></ROW><ROW><id>20311210</id><snippet>with</snippet></ROW><ROW><id>20311210</id><snippet>with open("in.txt") as f:
    cols = [float(row.split()[2]) for row in f.readlines()]
    maxVal = max(cols)
    #print maxVal

data = list()
f3 = open('out.txt', 'w')
with open('in.txt') as f2:
    for line in f2:
        items = line.split() # parse the columns
        tClass, feats, values = items[:3] # parse the columns
        #print items
        normalizedData = float(values)/float(maxVal)
        #print normalizedData

        f3.write("\t".join([tClass +"\t"+ feats, str(normalizedData), "\n"]))
f3.close()
</snippet></ROW><ROW><id>20311323</id><snippet>color()</snippet></ROW><ROW><id>20311323</id><snippet>turtle.color() == ('green', 'green')
</snippet></ROW><ROW><id>20311377</id><snippet>import random

a = ['apple','banana']
probability = [0.1,0.9]

def biase(lst,probability):
    zipped = zip(lst,probability)
    lst = [[i[0]] * int(i[1]*100) for i in zipped]
    new = [b for i in lst for b in i]
    return new

biased_list = biase(a,probability)
random_word = random.choice(biased_list)
print random_word
</snippet></ROW><ROW><id>20311377</id><snippet>banana</snippet></ROW><ROW><id>20311377</id><snippet>banana</snippet></ROW><ROW><id>20311377</id><snippet>apple</snippet></ROW><ROW><id>20311377</id><snippet>biased_list</snippet></ROW><ROW><id>20311377</id><snippet>['apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana']
</snippet></ROW><ROW><id>20311378</id><snippet>tmp</snippet></ROW><ROW><id>20311378</id><snippet>A</snippet></ROW><ROW><id>20311378</id><snippet>test</snippet></ROW><ROW><id>20311378</id><snippet>tmp</snippet></ROW><ROW><id>20311378</id><snippet>test</snippet></ROW><ROW><id>20311378</id><snippet>A</snippet></ROW><ROW><id>20311378</id><snippet>B</snippet></ROW><ROW><id>20311421</id><snippet>In [12]: for s, t in zip(string_list, display_times):
    for i in range(int(t)):
        print "It is %s" % s
   ....:         
It is a
It is a
It is b
It is b
It is b
It is c
</snippet></ROW><ROW><id>20311445</id><snippet>for i in X Y Z; do
    python myscript.py /folder[1-5]/chr$i.vcf.gz &gt; /myNewFolderForOutputs/chr${i}output.txt
done
</snippet></ROW><ROW><id>20311449</id><snippet>with open('test.txt') as infile, open('test_2.txt', 'w') as outfile:
  for line in infile:
    if not line.startswith("I want"):
      outfile.write(line.strip())
</snippet></ROW><ROW><id>20311999</id><snippet>    yield ('prop',lambda: self.prop)
</snippet></ROW><ROW><id>20312120</id><snippet>{
    "rangeList1": [[50,60],[100,200],[300]],
    "rangeError": [[100],["t"],[50,100]]
}
</snippet></ROW><ROW><id>20312120</id><snippet>import json
with open("file", "r") as f:
    settings = json.load(f)
</snippet></ROW><ROW><id>20312305</id><snippet>schema_props = schema[exp][node]['properties']
schema_props['date'] = ...
</snippet></ROW><ROW><id>20312305</id><snippet>schema_props = lambda: schema[exp][node]['properties']
schema_props()['date'] = ...

node = node + 1

# this now uses the next node
schema_props()['date'] = ...
</snippet></ROW><ROW><id>20312305</id><snippet>def schema_props():
    return schema[exp][node]['properties']

schema_props()['date'] = ...

node = node + 1

# this now uses the next node
schema_props()['date'] = .
</snippet></ROW><ROW><id>20312502</id><snippet>terminal</snippet></ROW><ROW><id>20312502</id><snippet>python</snippet></ROW><ROW><id>20312502</id><snippet>$PATH</snippet></ROW><ROW><id>20312502</id><snippet>mapnik</snippet></ROW><ROW><id>20312502</id><snippet>site-packages</snippet></ROW><ROW><id>20312502</id><snippet>mapnik</snippet></ROW><ROW><id>20312502</id><snippet>python</snippet></ROW><ROW><id>20312502</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>20312502</id><snippet>Homebrew</snippet></ROW><ROW><id>20312502</id><snippet>ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"
</snippet></ROW><ROW><id>20312502</id><snippet>brew install python
</snippet></ROW><ROW><id>20312502</id><snippet>brew install mapnik
</snippet></ROW><ROW><id>20312623</id><snippet>class ClassA:
    def __init__(self):
        # CREATE ClassB right here
        print 'self is an INSTANCE of ClassA, look: ' + repr(self)
        print 'self.__class__ is a TYPE OF THE INSTANCE of ClassA, see? ' \
                                            + repr(self.__class__)
        class ClassB(self.__class__):
            # ClassA is a base class, ClassB is a child class
            def __init__(self):
                pass

            def main(self):
                a = self.randomword(10)
                print 'hello, the output of ClassA.randomword is "'+str(a)+'"'

        # Instantiate ClassB
        class_b = ClassB()
        class_b.main()

    def randomword(self, num):
        print 'randomword was called'
        return 'hey there'

a = ClassA()
</snippet></ROW><ROW><id>20312623</id><snippet>self is an INSTANCE of ClassA, look: &lt;__main__.ClassA instance at 0x7fa4f78b05f0&gt;
self.__class__ is a TYPE OF THE INSTANCE of ClassA, see? &lt;class __main__.ClassA at 0x7fa4f78bb0b8&gt;
randomword was called
hello, the output of ClassA.randomword is "hey there"
</snippet></ROW><ROW><id>20312623</id><snippet>self</snippet></ROW><ROW><id>20312623</id><snippet>class ClassA:
    def __init__(self):
        # Create or import ClassB right here
        class ClassB():
            # ClassA is a base class, ClassB is a child class
            # base argument is an internal object of the base class (ClassA)
            def __init__(self, base):
                # Assign it to the class variable for the further use
                self.base = base

            def main(self):
                # Use it here
                a = self.base.randomword(10)
                print 'hello, the output of ClassA.randomword is "' + str(a)+'"'

        # Instantiate ClassB
        class_b = ClassB(self)
        class_b.main()

    def randomword(self, num):
        print 'randomword was called'
        return 'hey there'

a = ClassA()
</snippet></ROW><ROW><id>20312623</id><snippet>randomword was called
hello, the output of ClassA.randomword is "hey there"
</snippet></ROW><ROW><id>20312679</id><snippet>(?:^|\n)(=+)\r?\n(?!=)([^\n\r]+)\r?\n(=+)(?:\r?\n|$)</snippet></ROW><ROW><id>20312714</id><snippet>func.convert(literal_column('VARCHAR(8)'), Table.datetimefiedld, 8)
</snippet></ROW><ROW><id>20312714</id><snippet>sqlalchemy.sql.func.ANYTHING(arg1, argN)</snippet></ROW><ROW><id>20312714</id><snippet>ANYTHING(arg1, argN)</snippet></ROW><ROW><id>20312714</id><snippet>func.convert(func.VARCHAR(8), Table.datetimefiedld, 8)
</snippet></ROW><ROW><id>20312714</id><snippet>&gt;&gt;&gt; from sqlalchemy import sql
&gt;&gt;&gt; print sql.func.CONVERT(func.VARCHAR(8), Table.fied, 8)
CONVERT(VARCHAR(:VARCHAR_1), table.field, :CONVERT_1)

&gt;&gt;&gt; print sql.func.CONVERT(
              sql.literal_column('VARCHAR(8)'), 
              Table.fied, 
              sql.literal_column('8')
          )
CONVERT(VARCHAR(8), table.field, 8)
</snippet></ROW><ROW><id>20312714</id><snippet>def date2str(field):
    return sql.func.CONVERT(
               sql.literal_column('VARCHAR(8)'), 
               field, 
               sql.literal_column(8)
           )
</snippet></ROW><ROW><id>20312714</id><snippet>date2str(Table.field)
</snippet></ROW><ROW><id>20312751</id><snippet>0 or 1</snippet></ROW><ROW><id>20312751</id><snippet>1</snippet></ROW><ROW><id>20312751</id><snippet>x or y</snippet></ROW><ROW><id>20312751</id><snippet>x</snippet></ROW><ROW><id>20312751</id><snippet>x</snippet></ROW><ROW><id>20312751</id><snippet>y</snippet></ROW><ROW><id>20312751</id><snippet>&gt;&gt;&gt; 0 or 1
1
</snippet></ROW><ROW><id>20312751</id><snippet>0 == (0 or 1)</snippet></ROW><ROW><id>20312751</id><snippet>0 == 1</snippet></ROW><ROW><id>20312751</id><snippet>False</snippet></ROW><ROW><id>20312751</id><snippet>0</snippet></ROW><ROW><id>20312751</id><snippet>1</snippet></ROW><ROW><id>20312751</id><snippet>x == 0 or x == 1
</snippet></ROW><ROW><id>20312751</id><snippet>x in (0, 1)
</snippet></ROW><ROW><id>20312856</id><snippet>str.rsplit</snippet></ROW><ROW><id>20312856</id><snippet>1</snippet></ROW><ROW><id>20312856</id><snippet>&gt;&gt;&gt; "hello.world.foo.bar".rsplit('.', 1) # &lt;-- 1: maxsplit
['hello.world.foo', 'bar']
</snippet></ROW><ROW><id>20312924</id><snippet>following-sibling</snippet></ROW><ROW><id>20312924</id><snippet>//div[text() = 'Stable Text']/following-sibling::div
</snippet></ROW><ROW><id>20313139</id><snippet>import win32api
from time import sleep

count = 0
savedpos = win32api.GetCursorPos()
while(True):
    if count&gt;20*5: # break after 5sec
        break

    curpos = win32api.GetCursorPos()
    if savedpos != curpos:
        savedpos = curpos
        print "moved to " + str(savedpos)

    sleep(0.05)
    count +=1
</snippet></ROW><ROW><id>20313180</id><snippet>MyOrganization</snippet></ROW><ROW><id>20313180</id><snippet>Organization</snippet></ROW><ROW><id>20313180</id><snippet>models.py</snippet></ROW><ROW><id>20313180</id><snippet>from django.db import models
from django.utils.translation import ugettext_lazy as _
from satchmo_store.contact.models import Organization

class MyOrganization(Organization):
    vat_number   = models.CharField(_('VAT'), max_length=12)
</snippet></ROW><ROW><id>20313180</id><snippet>admin.py</snippet></ROW><ROW><id>20313180</id><snippet>from django.contrib import admin
from localsite.models import MyOrganization
from satchmo_store.contact.models import Organization
from satchmo_store.contact.admin import OrganizationOptions

admin.site.unregister(Organization)
admin.site.register(MyOrganization, OrganizationOptions)
</snippet></ROW><ROW><id>20313180</id><snippet>OrganizationExtra</snippet></ROW><ROW><id>20313180</id><snippet>Organization</snippet></ROW><ROW><id>20313540</id><snippet># i am calling the specific column 'foo'
df = pd.DataFrame( [ '190000', '170000', '120k', '110K', '100000s', '68ks' ],
                   index=[21, 27, 29, 31, 33, 38], columns=['foo'] )

def clean( x ):
    from re import sub
    # \g&lt;1&gt; is whatever matches the the first (...)
    x = sub( r'(\d+)[kK]', r'\g&lt;1&gt;000', x )
    return sub( r'[^\d]', '' , x ) # remove any non-digit character

df.foo.map( clean ).astype( int )
</snippet></ROW><ROW><id>20313540</id><snippet>    return sub( r'[^\d\.]', '' , x )
</snippet></ROW><ROW><id>20313540</id><snippet>df.foo.map( clean ).astype( float )
</snippet></ROW><ROW><id>20313676</id><snippet>file=open("file1.txt","r")
text="target"
count=0
for line in file:
    count += 1
    if text in line:
        print (count, line)
</snippet></ROW><ROW><id>20313832</id><snippet>cj = cookielib.LWPCookieJar()

for s_cookie in cookie:
    cj.set_cookie(cookielib.Cookie(version = 0, name = s_cookie['name'], value = s_cookie['value'], port = '80', port_specified = False, domain = s_cookie['domain'], domain_specified = True, domain_initial_dot = False, path = s_cookie['path'], path_specified = True, secure = s_cookie['secure'], expires = s_cookie['expiry'], discard = False, comment = None, comment_url = None, rest = None, rfc2109 = False))
</snippet></ROW><ROW><id>20313858</id><snippet>new_a = [el for el in a if el]
</snippet></ROW><ROW><id>20313858</id><snippet>a</snippet></ROW><ROW><id>20313858</id><snippet>new_a = [el for el in a if el != '']
</snippet></ROW><ROW><id>20313858</id><snippet>append</snippet></ROW><ROW><id>20313858</id><snippet>extend</snippet></ROW><ROW><id>20313858</id><snippet>b</snippet></ROW><ROW><id>20313858</id><snippet>b</snippet></ROW><ROW><id>20313858</id><snippet>new_a = []
for item in a:
    if item != '':
        new_a.append(item)
</snippet></ROW><ROW><id>20314127</id><snippet>def matching_values_by_keys(d, key1, key2):
    # figure out which elements of each list to keep
    keep_indices = set()
    for index,value in enumerate(d[key1]):
        if value == d[key2][index]:
            keep_indices.add(index)

    # now go through each dictionary entry and keep the wanted elements
    new_d = {}
    for key,lst in d.items():
        new_lst = []
        for index,value in enumerate(lst):
            if index in keep_indices:
                new_lst.append(value)
        new_d[key] = new_lst

    return new_d
</snippet></ROW><ROW><id>20314127</id><snippet>matching_values_by_keys({'i.year': ['1997', '1997'], 'i.month': ['March', 'April'], 'j.month': ['March', 'April'], 'j.year': ['1997', '2003']}, 'i.year', 'j.year')
</snippet></ROW><ROW><id>20314127</id><snippet>{'i.month': ['March'], 'i.year': ['1997'], 'j.month': ['March'], 'j.year': ['1997']}
</snippet></ROW><ROW><id>20314143</id><snippet>j</snippet></ROW><ROW><id>20314143</id><snippet>import time

def iterative_brute_force(n):
    longest = 0
    terms = 0
    for i in range(1, n + 1):
        j = i
        this_terms = 1

        while j != 1:
            this_terms += 1
            if this_terms &gt; terms:
                terms = this_terms
                longest = i

            if j % 2 == 0:
                j = j / 2
            else:
                j = 3 * j + 1

    return longest, terms

t0 = time.time()
print(iterative_brute_force(10 ** 6))
t1 = time.time()
total = t1-t0
print(total)
</snippet></ROW><ROW><id>20314143</id><snippet>(837799, 525)
34.4885718822
</snippet></ROW><ROW><id>20314143</id><snippet>longest: 837799 (525)
It took 0.600000 seconds
</snippet></ROW><ROW><id>20314249</id><snippet>if condition1 and condition2 and condition3:
    # do something if all three are true
else:
    # not all three are true
</snippet></ROW><ROW><id>20314249</id><snippet>all()</snippet></ROW><ROW><id>20314249</id><snippet>if all(conditions):
</snippet></ROW><ROW><id>20314249</id><snippet>if all(val == testvale for val in sequence_of_values):
</snippet></ROW><ROW><id>20314249</id><snippet>list_of_conditions = [condition1, condition2, condition3]

if some_fourth_condition and all(list_of_conditions):
</snippet></ROW><ROW><id>20314249</id><snippet>and</snippet></ROW><ROW><id>20314249</id><snippet>list_of_conditions</snippet></ROW><ROW><id>20314249</id><snippet>and</snippet></ROW><ROW><id>20314249</id><snippet>outcome = true_expression if test_expression else false_expression
</snippet></ROW><ROW><id>20314249</id><snippet>true_expression</snippet></ROW><ROW><id>20314249</id><snippet>false_expression</snippet></ROW><ROW><id>20314249</id><snippet>test_expression</snippet></ROW><ROW><id>20314387</id><snippet> F(N) = (F(N-1)+1) + (F(N-2)+1) + F(N-3)...........F(1)+1
 F(2) = 1
 F(1) = 0
 F(N-1) = (F(N-2)+1) + F(N-3)...........F(1)+1 
 F(N) = F(N-1)  + F(N-1) + 1
 F(N) = 2*F(N-1) + 1
</snippet></ROW><ROW><id>20314387</id><snippet> F(N) = 2^(N-2) + 2^(N-2) - 1
      = 2^(N-1) - 1
</snippet></ROW><ROW><id>20314613</id><snippet>print(sum_to(10))</snippet></ROW><ROW><id>20314613</id><snippet>a</snippet></ROW><ROW><id>20314613</id><snippet>a += x+1</snippet></ROW><ROW><id>20314613</id><snippet>def sum_to(n) :
  return n*(n+1)//2
</snippet></ROW><ROW><id>20314812</id><snippet>count</snippet></ROW><ROW><id>20314812</id><snippet>map[key][0]</snippet></ROW><ROW><id>20314812</id><snippet>map[key][1]</snippet></ROW><ROW><id>20314812</id><snippet>if key == 42:
    return depth
found = count(map, map[key][0], depth+1)
if found:
    return found
return count(map, map[key][1], depth+1)
</snippet></ROW><ROW><id>20314812</id><snippet>count</snippet></ROW><ROW><id>20314812</id><snippet>map[x][0]</snippet></ROW><ROW><id>20314812</id><snippet>map[x][1]</snippet></ROW><ROW><id>20314959</id><snippet>return</snippet></ROW><ROW><id>20314959</id><snippet>for</snippet></ROW><ROW><id>20315063</id><snippet>a</snippet></ROW><ROW><id>20315063</id><snippet>A</snippet></ROW><ROW><id>20315063</id><snippet>b</snippet></ROW><ROW><id>20315063</id><snippet>B</snippet></ROW><ROW><id>20315063</id><snippet>c</snippet></ROW><ROW><id>20315063</id><snippet>C</snippet></ROW><ROW><id>20315063</id><snippet>a = np.linalg.norm(C - B)
b = np.linalg.norm(C - A)
c = np.linalg.norm(B - A)
</snippet></ROW><ROW><id>20315063</id><snippet>b1 + b2 + b3</snippet></ROW><ROW><id>20315063</id><snippet>&gt;&gt;&gt; A = np.array([2.0, 1.5, 0.0])
&gt;&gt;&gt; B = np.array([6.0, 4.5, 0.0])
&gt;&gt;&gt; C = np.array([11.75, 6.25, 0.0])
&gt;&gt;&gt; a = np.linalg.norm(C - B)
&gt;&gt;&gt; b = np.linalg.norm(C - A)
&gt;&gt;&gt; c = np.linalg.norm(B - A)
&gt;&gt;&gt; s = (a + b + c) / 2
&gt;&gt;&gt; R = a*b*c / 4 / np.sqrt(s * (s - a) * (s - b) * (s - c))
&gt;&gt;&gt; b1 = a*a * (b*b + c*c - a*a)
&gt;&gt;&gt; b2 = b*b * (a*a + c*c - b*b)
&gt;&gt;&gt; b3 = c*c * (a*a + b*b - c*c)
&gt;&gt;&gt; P = np.column_stack((A, B, C)).dot(np.hstack((b1, b2, b3)))
&gt;&gt;&gt; P /= b1 + b2 + b3
&gt;&gt;&gt; R
15.899002930062531
&gt;&gt;&gt; P
array([ 13.42073171,  -9.56097561,   0.        ])
</snippet></ROW><ROW><id>20315299</id><snippet>a = Dimarray(values, 'lat', lat, 'lon', lon)
</snippet></ROW><ROW><id>20315299</id><snippet>a = Dimarray(values, ('lat', lat), ('lon', lon))
</snippet></ROW><ROW><id>20315299</id><snippet>a = Dimarray(values, [('lat', lat), ('lon', lon)])
</snippet></ROW><ROW><id>20315423</id><snippet>hostname = urlparse.urlparse(url).hostname</snippet></ROW><ROW><id>20315423</id><snippet>hostname = urlparse.urlparse(url).hostname or ''
</snippet></ROW><ROW><id>20315423</id><snippet>urlparse.urlparse(url).path</snippet></ROW><ROW><id>20315423</id><snippet>path = urlparse.urlparse(url).path or ''
</snippet></ROW><ROW><id>20315475</id><snippet>filter</snippet></ROW><ROW><id>20315475</id><snippet>" ".join(filter(lambda word: word not in stop_words, line.split()))
</snippet></ROW><ROW><id>20315475</id><snippet>set</snippet></ROW><ROW><id>20315475</id><snippet>list</snippet></ROW><ROW><id>20315475</id><snippet>in</snippet></ROW><ROW><id>20315475</id><snippet>set</snippet></ROW><ROW><id>20315475</id><snippet>list</snippet></ROW><ROW><id>20315475</id><snippet>join</snippet></ROW><ROW><id>20315475</id><snippet>(x for x in y if f(x))</snippet></ROW><ROW><id>20315475</id><snippet>filter</snippet></ROW><ROW><id>20315475</id><snippet>  stop_words = set(["hi", "bye"])
  stopword = "DONE"
  while True:
      line = raw_input()
      if line.strip() == stopword:
          break
      print(" ".join(word for word in line.split() if word not in stop_words))
</snippet></ROW><ROW><id>20315475</id><snippet>hello hi my name is bye justin
</snippet></ROW><ROW><id>20315475</id><snippet>hello my name is justin
</snippet></ROW><ROW><id>20315579</id><snippet>scipy.sparse.hstack</snippet></ROW><ROW><id>20315579</id><snippet>new_matrix = scipy.sparse.hstack((big_feature_matrix, small_feature_matrix),
                                 format='csr')
</snippet></ROW><ROW><id>20315951</id><snippet>.strip()</snippet></ROW><ROW><id>20315951</id><snippet>def choose():
    with open('/usr/share/dict/words') as f:
        content = [line.strip() for line in f]
</snippet></ROW><ROW><id>20316142</id><snippet>from selenium import webdriver
driver = webdriver.Firefox()
driver.get("http://datafireball.com")
# I am using Chrome Developer Tool to get the Xpath, you might want to use your own code.
pic = driver.find_element_by_xpath('//*[@id="post-174"]/div/p[5]/a/img')
position = pic.location
print(position)
</snippet></ROW><ROW><id>20316142</id><snippet>{'y': 727, 'x': 493}
</snippet></ROW><ROW><id>20316236</id><snippet> matplotlib.axes.tick_params(direction='inout')
</snippet></ROW><ROW><id>20316330</id><snippet>dict</snippet></ROW><ROW><id>20316330</id><snippet>&gt;&gt;&gt; a = Counter({'a': 8508, 'c': 345, 'w': 60})
&gt;&gt;&gt; a.keys() # It haz keys
dict_keys(['a', 'c', 'w'])
&gt;&gt;&gt; for x in a:
...     print x, a[x]
... 
a 8508
c 345
w 60
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20316330</id><snippet>Counter</snippet></ROW><ROW><id>20316330</id><snippet>most_common</snippet></ROW><ROW><id>20316330</id><snippet>Counter</snippet></ROW><ROW><id>20316330</id><snippet>&gt;&gt;&gt; a.most_common 
&lt;bound method Counter.most_common of Counter({'a': 8508, 'c': 345, 'w': 60})&gt;
&gt;&gt;&gt; a.most_common() 
[('a', 8508), ('c', 345), ('w', 60)]
&gt;&gt;&gt; b = Counter({'a': 8508, 'c': 345, 'w': 600}) # Sample data
&gt;&gt;&gt; b.most_common()
[('a', 8508), ('w', 600), ('c', 345)]
&gt;&gt;&gt; for x in b.most_common():
...     print x[0], x[1]
...
a 8508
w 600
c 345
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20316361</id><snippet>readlines</snippet></ROW><ROW><id>20316361</id><snippet>\n</snippet></ROW><ROW><id>20316361</id><snippet>if fnmatch.fnmatch(filename, pattern.strip('\n\r'):
</snippet></ROW><ROW><id>20316384</id><snippet>python manage.py shell
</snippet></ROW><ROW><id>20316384</id><snippet>.py</snippet></ROW><ROW><id>20316384</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>20316384</id><snippet>import os
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myproj.settings")
from myapp.models import Stuff
# ...
</snippet></ROW><ROW><id>20316446</id><snippet>ipython3 notebook
</snippet></ROW><ROW><id>20316446</id><snippet>ipython</snippet></ROW><ROW><id>20316446</id><snippet>ipython3</snippet></ROW><ROW><id>20316446</id><snippet>ipython</snippet></ROW><ROW><id>20316446</id><snippet>ipython2</snippet></ROW><ROW><id>20316446</id><snippet>ipython</snippet></ROW><ROW><id>20316446</id><snippet>~/bin</snippet></ROW><ROW><id>20316446</id><snippet>#!/usr/bin/env python
import IPython
IPython.start_ipython()
</snippet></ROW><ROW><id>20316446</id><snippet>python -m IPython
</snippet></ROW><ROW><id>20316446</id><snippet>python3 -m IPython
</snippet></ROW><ROW><id>20316446</id><snippet>ipython</snippet></ROW><ROW><id>20316790</id><snippet>showinfo</snippet></ROW><ROW><id>20316790</id><snippet>tkMessageBox.showinfo("You entered:", petals.get())
</snippet></ROW><ROW><id>20316838</id><snippet>localhost:5000/api</snippet></ROW><ROW><id>20316838</id><snippet>localhost:5001/</snippet></ROW><ROW><id>20316838</id><snippet>connect: {
    options: {
        port: 5000,
        hostname: 'localhost'
    },
    proxies: [
        {
            context: '/api',
            host: '127.0.0.1',
            port: 5001,
            https: false,
            changeOrigin: false,
            xforward: false
        }
    ]
}
</snippet></ROW><ROW><id>20316838</id><snippet>app.run(port=5001)</snippet></ROW><ROW><id>20316844</id><snippet>True</snippet></ROW><ROW><id>20316844</id><snippet>print "Want to play a game? Add numbers until you reach 1001!"
print "Current total is 0!"
# Don't name a variable `sum` -- it overrides the built-in
total = 0
# This will loop until `total` equals 1001
while total != 1001:
    store = raw_input("Enter a number!") 
    num = int(store)
    # This is the same as `total=total+num`
    total += num
    print total
    # If we have gone over 1001, reset `total` to 0
    if total &gt; 1001:
        print "Oops! Too Far! Start Again!"
        total = 0
# When we get here, the total will be 1001
print "Congratulations! You won!"
</snippet></ROW><ROW><id>20316987</id><snippet>context_click</snippet></ROW><ROW><id>20316987</id><snippet>from selenium import webdriver
from selenium.webdriver import ActionChains

driver = webdriver.Chrome()
actionChains = ActionChains(driver)

actionChains.context_click(your_link).perform()
</snippet></ROW><ROW><id>20317063</id><snippet>def __init__(self):
    ...
    self.calc_button = tkinter.Button(self.bottom_frame, \
                                              text = 'Calculate', \
                                              command = self.calc_button_event)
    ...

def calc_button_event(self):
    self.taxCalculate()
    self.calculate()
</snippet></ROW><ROW><id>20317063</id><snippet>assessVal = str(format(float(((.6)*propVal)), '.2f'))
</snippet></ROW><ROW><id>20317063</id><snippet>assessVal = propVal*0.6
</snippet></ROW><ROW><id>20317241</id><snippet>itertools.groupby</snippet></ROW><ROW><id>20317241</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile(r'\d+ of \d+ DOCUMENTS')
&gt;&gt;&gt; with open('abc1') as f:
    for k, g in groupby(f, key=lambda x:r.search(x)):
        if not k:
            print list(g)
...             
['a\n', 'b\n']
['c\n', 'd\n']
['e\n', 'f\n']
</snippet></ROW><ROW><id>20317241</id><snippet>abc1</snippet></ROW><ROW><id>20317241</id><snippet>&gt;&gt;&gt; !cat abc1
a
b
1 of 3 DOCUMENTS
c
d
2 of 3 DOCUMENTS
e
f
3 of 3 DOCUMENTS
</snippet></ROW><ROW><id>20317267</id><snippet>'hello' * 3 == 'hellohellohello'
'hello' * 2 == 'hellohello'
'hello' * 1 == 'hello'
'hello' * 0 == ?
</snippet></ROW><ROW><id>20317267</id><snippet>'hello'</snippet></ROW><ROW><id>20317267</id><snippet>s * (n + 1) == (s * n) + s</snippet></ROW><ROW><id>20317267</id><snippet>s * 1 == s</snippet></ROW><ROW><id>20317267</id><snippet>n == 0</snippet></ROW><ROW><id>20317267</id><snippet>s * 0</snippet></ROW><ROW><id>20317267</id><snippet>''</snippet></ROW><ROW><id>20317267</id><snippet>s</snippet></ROW><ROW><id>20317267</id><snippet>a</snippet></ROW><ROW><id>20317267</id><snippet>b</snippet></ROW><ROW><id>20317267</id><snippet>s * (a + b) == s * a + s * b
</snippet></ROW><ROW><id>20317267</id><snippet>b == 0</snippet></ROW><ROW><id>20317267</id><snippet>s * a == s * a + s * 0
</snippet></ROW><ROW><id>20317267</id><snippet>s * 0</snippet></ROW><ROW><id>20317267</id><snippet>0</snippet></ROW><ROW><id>20317267</id><snippet>s * 0</snippet></ROW><ROW><id>20317342</id><snippet>Suggestion</snippet></ROW><ROW><id>20317342</id><snippet>Artist</snippet></ROW><ROW><id>20317342</id><snippet>self.artist</snippet></ROW><ROW><id>20317342</id><snippet>None</snippet></ROW><ROW><id>20317342</id><snippet>NULL</snippet></ROW><ROW><id>20317342</id><snippet>class Artist(db.Model):
    __tablename__ = 'artists'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80))
    suggestions = db.relationship('Suggestion', backref='artist')

class Suggestion(db.Model):
    __tablename__ = 'suggestions'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    artist_id = db.Column(db.Integer, db.ForeignKey('artists.id'))

    def __repr__(self):
        return '&lt;Suggestion %r&gt;' % (self.artist.name,)
</snippet></ROW><ROW><id>20317342</id><snippet>In [1]: from sqlalch import db, Artist, Suggestion

In [2]: Artist.query.all()
Out[2]: [&lt;sqlalch.Artist at 0x3559490&gt;]

In [3]: Suggestion.query.all()
Out[3]: [&lt;Suggestion u'Hey You!'&gt;]

In [4]: Suggestion.query.all()[0].artist
Out[4]: &lt;sqlalch.Artist at 0x3559490&gt;
</snippet></ROW><ROW><id>20317500</id><snippet>my_list = [y for y in my_list 
             if not any(meets_requirement(x,y) for x in my_list)]
</snippet></ROW><ROW><id>20317581</id><snippet>random.triangular(*parameters[0])
</snippet></ROW><ROW><id>20317581</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; parameters = [[1,3,2], [4,5,6]]
&gt;&gt;&gt; random.triangular(*parameters[0])
1.796949832039262
</snippet></ROW><ROW><id>20317581</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>20317581</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; dumb_parameters = ["1,3,2", "4,5,6"]
&gt;&gt;&gt; parameters = [ast.literal_eval(s) for s in dumb_parameters]
&gt;&gt;&gt; parameters
[(1, 3, 2), (4, 5, 6)]
&gt;&gt;&gt; random.triangular(*parameters[0])
2.2933615845752904
</snippet></ROW><ROW><id>20317594</id><snippet>self.game.aJouer</snippet></ROW><ROW><id>20317594</id><snippet>self.selection</snippet></ROW><ROW><id>20317594</id><snippet>aJouer</snippet></ROW><ROW><id>20317594</id><snippet>__repr__</snippet></ROW><ROW><id>20317594</id><snippet>__repr__</snippet></ROW><ROW><id>20317594</id><snippet>__repr__</snippet></ROW><ROW><id>20317594</id><snippet>__hash__</snippet></ROW><ROW><id>20317594</id><snippet>__equals__</snippet></ROW><ROW><id>20317594</id><snippet>dict</snippet></ROW><ROW><id>20317716</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>20317716</id><snippet>max</snippet></ROW><ROW><id>20317716</id><snippet>&gt;&gt;&gt; from collections import defaultdict                                   
&gt;&gt;&gt; lis = [['469420270013002A', -90],                                 
     ['469420270005000C', -89], 
     ['469420270013002A', -94], 
     ['4694202700270003', -53], 
     ['469420270005000C', -91], 
     ['469420270013002A', -92], 
     ['4694202700270003', -55]]
&gt;&gt;&gt; d = defaultdict(list)                
&gt;&gt;&gt; for k, v in lis:                                                      
    d[k].append(v)
...     
</snippet></ROW><ROW><id>20317716</id><snippet>d</snippet></ROW><ROW><id>20317716</id><snippet>&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;,
{'469420270005000C': [-89, -91],
 '4694202700270003': [-53, -55],
 '469420270013002A': [-90, -94, -92]})
</snippet></ROW><ROW><id>20317716</id><snippet>max</snippet></ROW><ROW><id>20317716</id><snippet>&gt;&gt;&gt; max({k:sum(v)/float(len(v)) for k, v in d.items()}.items(), key=lambda x:x[1])
('4694202700270003', -54.0)
</snippet></ROW><ROW><id>20317744</id><snippet>dates = [[d1, m1, y1], ..., [dn, mn, yn]]
datedict = {}
for d, m, y in dates:
    yeardict = datedict.setdefault(y, {})
    monthset = yeardict.setdefault(m, set())
    monthset.add(d)

nested_dates = [(y, list((m, sorted(days))
                         for m, days in sorted(yeardict.items())))
                for y, yeardict in sorted(datedict.items())]
</snippet></ROW><ROW><id>20317744</id><snippet>dates</snippet></ROW><ROW><id>20317744</id><snippet>dates = [[1, 2, 2013], [5, 2, 2013], [1, 3, 2013]]
</snippet></ROW><ROW><id>20317744</id><snippet>nested_dates</snippet></ROW><ROW><id>20317744</id><snippet>[(2013, [(2, [1, 5]), (3, [1])])]
</snippet></ROW><ROW><id>20317744</id><snippet>{% for year in nested_dates %}
    &lt;li class="year"&gt;
        &lt;a href="#"&gt;{{year.0}}&lt;/a&gt;
        &lt;ul&gt;
        {% for month in year.1 %}
            &lt;li class="month"&gt;
                &lt;a href="#"&gt;{{month.0}}&lt;/a&gt;
                &lt;ul&gt;
                {% for day in month.1 %}
                    &lt;li class="day"&gt;{{day}}&lt;/li&gt;
                {% endfor %}
                &lt;/ul&gt;
            &lt;/li&gt;
        {% endfor %}
        &lt;/ul&gt;
    &lt;/li&gt;
{% endfor %}
</snippet></ROW><ROW><id>20317744</id><snippet>nested_dates = []
for y, yeardict in sorted(datedict.items()):
    yearlist = []
    for m, days in sorted(yeardict.items()):
        yearlist.append((m, sorted(days)))
    nested_dates.append((y, yearlist))
</snippet></ROW><ROW><id>20317849</id><snippet>currentURL  [links]
urlpage1 [urlpage2. urlpage3.. ]
urlpage2 [urlpage1, urlpage3...]
... 
</snippet></ROW></DATA>