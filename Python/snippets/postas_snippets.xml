<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>4627407</id><snippet>str(123.456)[:2]
</snippet></ROW><ROW><id>4627407</id><snippet>&gt;&gt;&gt; str(123.456)[:2]
'12'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4628011</id><snippet>&gt;&gt;&gt; s = 'A - 13, B - 14, C - 29, M - 99'
&gt;&gt;&gt; dict(e.split(' - ') for e in s.split(','))
{'A': '13', 'C': '29', 'B': '14', 'M': '99'}
</snippet></ROW><ROW><id>4628011</id><snippet>&gt;&gt;&gt; dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))
{'A': 13, ' B': 14, ' M': 99, ' C': 29}
</snippet></ROW><ROW><id>4628148</id><snippet>import re
from datetime import timedelta


regex = re.compile(r'((?P&lt;hours&gt;\d+?)hr)?((?P&lt;minutes&gt;\d+?)m)?((?P&lt;seconds&gt;\d+?)s)?')


def parse_time(time_str):
    parts = regex.match(time_str)
    if not parts:
        return
    parts = parts.groupdict()
    time_params = {}
    for (name, param) in parts.iteritems():
        if param:
            time_params[name] = int(param)
    return timedelta(**time_params)


&gt;&gt;&gt; from parse_time import parse_time
&gt;&gt;&gt; parse_time('12hr')
datetime.timedelta(0, 43200)
&gt;&gt;&gt; parse_time('12hr5m10s')
datetime.timedelta(0, 43510)
&gt;&gt;&gt; parse_time('12hr10s')
datetime.timedelta(0, 43210)
&gt;&gt;&gt; parse_time('10s')
datetime.timedelta(0, 10)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4628446</id><snippet>from itertools import izip

def pairwise(t):
    it = iter(t)
    return izip(it,it)

# for "pairs" of any length
def chunkwise(t, size=2):
    it = iter(t)
    return izip(*[it]*size)
</snippet></ROW><ROW><id>4628446</id><snippet>from itertools import izip_longest
def blockwise(t, size=2, fillvalue=None):
    it = iter(t)
    return izip_longest(*[it]*size, fillvalue=fillvalue)
</snippet></ROW><ROW><id>4628646</id><snippet>&gt;&gt;&gt; u'longlongTESTstringTEST'.replace('TEST', '?', 1)
u'longlong?stringTEST'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4628806</id><snippet>requires</snippet></ROW><ROW><id>4628840</id><snippet>ImageField</snippet></ROW><ROW><id>4628840</id><snippet>open</snippet></ROW><ROW><id>4628840</id><snippet>FieldFile</snippet></ROW><ROW><id>4628840</id><snippet>Image.open</snippet></ROW><ROW><id>4628840</id><snippet>Image</snippet></ROW><ROW><id>4628840</id><snippet>stream = imagefield.open()
image = Image.open(stream)
stream.close()
# ... and then save image with: image.save(outfile, format, options)
</snippet></ROW><ROW><id>4629089</id><snippet>&gt;&gt;&gt; xml = """&lt;?xml version="1.0" encoding="UTF-8"?&gt;
... &lt;ISBNdb server_time="2005-02-25T23:03:41"&gt;
...  &lt;BookList total_results="1" page_size="10" page_number="1" shown_results="1"&gt;
...   &lt;BookData book_id="somebook" isbn="0123456789"&gt;
...    &lt;Title&gt;Interesting Book&lt;/Title&gt;
...    &lt;TitleLong&gt;Interesting Book: Read it or else..&lt;/TitleLong&gt;
...    &lt;AuthorsText&gt;John Doe&lt;/AuthorsText&gt;
...    &lt;PublisherText&gt;Acme Publishing&lt;/PublisherText&gt;
...   &lt;/BookData&gt;
...  &lt;/BookList&gt;
... &lt;/ISBNdb&gt;"""

from xml.etree import ElementTree as etree
tree = etree.fromstring(xml)

&gt;&gt;&gt; for book in tree.iterfind('BookList/BookData'):
...     print 'isbn:', book.attrib['isbn']
...     for child in book.getchildren():
...             print '%s :' % child.tag, child.text
... 
isbn: 0123456789
Title : Interesting Book
TitleLong : Interesting Book: Read it or else..
AuthorsText : John Doe
PublisherText : Acme Publishing
&gt;&gt;&gt; 

voila;)
</snippet></ROW><ROW><id>4629241</id><snippet>import itertools

def ranges(i):
    for a, b in itertools.groupby(enumerate(i), lambda (x, y): y - x):
        b = list(b)
        yield b[0][1], b[-1][1]

print list(ranges([0, 1, 2, 3, 4, 7, 8, 9, 11]))
</snippet></ROW><ROW><id>4629770</id><snippet>def iterAllItems(self):
    for i in range(self.count()):
        yield self.item(i)
</snippet></ROW><ROW><id>4630368</id><snippet>__lt__</snippet></ROW><ROW><id>4630368</id><snippet>sort</snippet></ROW><ROW><id>4630497</id><snippet>r'what"ever"
</snippet></ROW><ROW><id>4630497</id><snippet>r"""what"ev'er"""
</snippet></ROW><ROW><id>4630577</id><snippet>self.instance</snippet></ROW><ROW><id>4630577</id><snippet>clean</snippet></ROW><ROW><id>4630641</id><snippet>x = ...</snippet></ROW><ROW><id>4630641</id><snippet>x = 0
def f():
    x = 1
f()
print x #=&gt;0
</snippet></ROW><ROW><id>4630641</id><snippet>1</snippet></ROW><ROW><id>4630641</id><snippet>global x</snippet></ROW><ROW><id>4630641</id><snippet>x = 0
def f():
    global x
    x = 1
f()
print x #=&gt;1
</snippet></ROW><ROW><id>4630641</id><snippet>x.name = ...</snippet></ROW><ROW><id>4630641</id><snippet>collection[key] = ...</snippet></ROW><ROW><id>4630641</id><snippet>sliceable[start:end] = ...</snippet></ROW><ROW><id>4630641</id><snippet>global</snippet></ROW><ROW><id>4630879</id><snippet>calculations()</snippet></ROW><ROW><id>4630879</id><snippet>super</snippet></ROW><ROW><id>4630879</id><snippet>Blog</snippet></ROW><ROW><id>4630879</id><snippet>self.one</snippet></ROW><ROW><id>4630879</id><snippet>class FreshData(models.Model):
    name = models.CharField(max_length=20)
    one = models.IntegerField()
    two = models.IntegerField()

    def save(self, *args, **kwargs):
        super(FreshData, self).save(*args, **kwargs)
        calculations = Calculations()
        calculations.three = self.one + self.two
        calculations.save()

class Calculations(FreshData):
    three = models.IntegerField()
</snippet></ROW><ROW><id>4630879</id><snippet>FreshData</snippet></ROW><ROW><id>4630879</id><snippet>Calculations</snippet></ROW><ROW><id>4630879</id><snippet>name</snippet></ROW><ROW><id>4630879</id><snippet>one</snippet></ROW><ROW><id>4630879</id><snippet>two</snippet></ROW><ROW><id>4630879</id><snippet>FreshData</snippet></ROW><ROW><id>4630879</id><snippet>class Calculations(models.Model):
    fresh_data = models.ForeignKey(FreshData)
    three = models.IntegerField()
</snippet></ROW><ROW><id>4630879</id><snippet>fresh_data</snippet></ROW><ROW><id>4630879</id><snippet>Calculations</snippet></ROW><ROW><id>4630879</id><snippet>def save(self, *args, **kwargs):
    super(FreshData, self).save(*args, **kwargs)
    calculations = Calculationrs(fresh_data=self)
    ...
</snippet></ROW><ROW><id>4631082</id><snippet>subprocess</snippet></ROW><ROW><id>4631082</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>4631134</id><snippet>urlpatterns = patterns('',
    (r'^notification/', include(notification.urls)),
...
</snippet></ROW><ROW><id>4631138</id><snippet>python-twitter</snippet></ROW><ROW><id>4631138</id><snippet>&gt;&gt;&gt; api = twitter.Api(consumer_key='consumer_key',
    consumer_secret='consumer_secret', access_token_key='access_token',
    access_token_secret='access_token_secret')

&gt;&gt;&gt; api.PostUpdate('I love python-twitter!')
</snippet></ROW><ROW><id>4631489</id><snippet>complexobjects</snippet></ROW><ROW><id>4631489</id><snippet>for obj in complexobjects:
    listbox.insert(END, str(complexobjects))
</snippet></ROW><ROW><id>4631489</id><snippet>str(complexobjects)</snippet></ROW><ROW><id>4631489</id><snippet>selitems = [complexobjects[int(idx)] for idx in listbox.curselection()]
</snippet></ROW><ROW><id>4631503</id><snippet>mainmodule</snippet></ROW><ROW><id>4631503</id><snippet>submodule1</snippet></ROW><ROW><id>4631503</id><snippet>submodule2</snippet></ROW><ROW><id>4631503</id><snippet>submodule1</snippet></ROW><ROW><id>4631503</id><snippet>submodule2</snippet></ROW><ROW><id>4631503</id><snippet>mainmodule_heavy.py</snippet></ROW><ROW><id>4631640</id><snippet>vars()</snippet></ROW><ROW><id>4631640</id><snippet>getattr()</snippet></ROW><ROW><id>4631640</id><snippet>results = q.fetch(5)
for p in results:
    for attribute in vars(p).keys()
        print '%s = %s' % (attribute, str(getattr(p, attribute)))
</snippet></ROW><ROW><id>4631640</id><snippet>vars()</snippet></ROW><ROW><id>4631640</id><snippet>&gt;&gt;&gt; class A:
...     def __init__(self, a, b):
...         self.a = a
...         self.b = b
... 
&gt;&gt;&gt; a = A(1, 2)
&gt;&gt;&gt; vars(a)
{'a': 1, 'b': 2}
&gt;&gt;&gt; for attribute in vars(a).keys():
...     print '%s = %s' % (attribute, str(getattr(a, attribute)))
... 
a = 1
b = 2
</snippet></ROW><ROW><id>4631729</id><snippet>from django.core.cache import cache
</snippet></ROW><ROW><id>4631835</id><snippet>{% load pagination_tags %}</snippet></ROW><ROW><id>4632022</id><snippet>__init__.py</snippet></ROW><ROW><id>4632247</id><snippet>virtualenv</snippet></ROW><ROW><id>4632247</id><snippet>virtualenv --relocatable</snippet></ROW><ROW><id>4632327</id><snippet>"Hello, {user.first_name}!".format(user=django.utils.html.escape(my_user))
</snippet></ROW><ROW><id>4632327</id><snippet>def foo(**kwargs):
    for key,val in kwargs.iteritems():
        kwargs[key] = django.utils.html.escape(val)

    ...
</snippet></ROW><ROW><id>4632327</id><snippet>def foo(**kwargs):
    kwargs = dict((key, val) for key,val in izip(kwargs.iterkeys(), \
    map(django.utils.htmls.escape, kwargs.itervalues())))

    # OR if you use Python 3
    kwargs = {key:django.utils.htmls.escape(val) for key, val in kwargs.items()}
</snippet></ROW><ROW><id>4632348</id><snippet>&gt;&gt;&gt; strings = ['abc', 'def', 'ghi']
&gt;&gt;&gt; 'def' in strings
True
&gt;&gt;&gt; 'foo' in strings
False
</snippet></ROW><ROW><id>4632835</id><snippet>sudo yum install -y libjpeg-devel
</snippet></ROW><ROW><id>4632835</id><snippet>rm -rf /usr/lib/python2.6/site-packages/PIL-1.1.7-py2.6-linux-x86_64.egg/
</snippet></ROW><ROW><id>4632835</id><snippet>sudo easy_install PIL
</snippet></ROW><ROW><id>4633239</id><snippet>curl -H "Accept-Language: en-us,en;q=0.5" -H "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7" ... [url]
</snippet></ROW><ROW><id>4633510</id><snippet>file_new.write(text)
</snippet></ROW><ROW><id>4633929</id><snippet>arr</snippet></ROW><ROW><id>4633929</id><snippet>arr</snippet></ROW><ROW><id>4633929</id><snippet>for line in file:
    line = line[1:].replace("\n", "")
    if not line: continue
    lines = line.split(" ")
    lines.sort(key=str.lower)
    line = ''.join(lines)
    print line
</snippet></ROW><ROW><id>4634126</id><snippet>import pycurl, os

def send(file_contents, name):
    print "Sending file to pastebin...."
    curl = pycurl.Curl()
    curl.setopt(pycurl.URL, "http://pastebin.com/api_public.php")
    curl.setopt(pycurl.POST, True)
    curl.setopt(pycurl.POSTFIELDS, "paste_code=%s&amp;paste_name=%s" \
                                   % (file_contents, name))
    curl.setopt(pycurl.NOPROGRESS, True)
    curl.perform()


if __name__ == "__main__":
    content = raw_input("Provide the FULL path to the file: ")
    with open(content, 'r') as f:
        send(f.read(), "yournamehere")
    print
</snippet></ROW><ROW><id>4634126</id><snippet>with</snippet></ROW><ROW><id>4634126</id><snippet>main</snippet></ROW><ROW><id>4634126</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>4634126</id><snippet>&amp;</snippet></ROW><ROW><id>4634126</id><snippet>key1=value1&amp;key2=value2</snippet></ROW><ROW><id>4634126</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>4634126</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>4634153</id><snippet>AUTH_PROFILE_MODULE = 'content.UserProfile'</snippet></ROW><ROW><id>4634153</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>4634301</id><snippet>&amp;jsonp=window.yt.www.suggest.handleResponse</snippet></ROW><ROW><id>4634301</id><snippet>import json
import urllib2

data = urllib2.urlopen('http://suggestqueries.google.com/complete/search?hl=en&amp;ds=yt&amp;client=youtube&amp;hjson=t&amp;q=jum&amp;cp=3')

j = json.load(data)
k = [i for i, j, k in j[1]]
l = json.dumps(k)
</snippet></ROW><ROW><id>4634635</id><snippet>A</snippet></ROW><ROW><id>4634635</id><snippet>B</snippet></ROW><ROW><id>4634690</id><snippet>super</snippet></ROW><ROW><id>4634690</id><snippet>__slots__</snippet></ROW><ROW><id>4634690</id><snippet>object</snippet></ROW><ROW><id>4634741</id><snippet>with</snippet></ROW><ROW><id>4634741</id><snippet>def CheckSite(Url1, Url2):
    with urllib2.urlopen(Url1) as Response1:
        with urllib2.urlopen(Url2) as Response2:
            # do stuff
</snippet></ROW><ROW><id>4634842</id><snippet>self.assertEqual(person.age, 42, 'age incorrect: expected value {0} actual value {1}'.format(42, person.age))
</snippet></ROW><ROW><id>4634842</id><snippet>first != equal
</snippet></ROW><ROW><id>4635074</id><snippet>import math

d = math.sqrt(10)
</snippet></ROW><ROW><id>4635074</id><snippet>from math import *

d = sqrt(10)
</snippet></ROW><ROW><id>4635074</id><snippet>from math import sqrt
d = sqrt(10)
</snippet></ROW><ROW><id>4635451</id><snippet>get_decoded()</snippet></ROW><ROW><id>4635451</id><snippet>session_data = request.session.get_decoded()
user_id = session_data['_auth_user_id']
</snippet></ROW><ROW><id>4635488</id><snippet>SMTP.sendmail</snippet></ROW><ROW><id>4635488</id><snippet>SMTP.sendmail</snippet></ROW><ROW><id>4635713</id><snippet>datetime.datetime</snippet></ROW><ROW><id>4635713</id><snippet>time.time_struct</snippet></ROW><ROW><id>4635713</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>4635713</id><snippet># power_reading is the data type corresponding to one set of power readings
# (it could be a simple float, or a tuple, or a class if you want; just make
# sure that you can add them together)
hourly_readings = collections.defaultdict(power_reading)
minutely_readings = { ... };  # dict of time.struct_time ==&gt; power_reading

for timestamp, reading in minutely_readings.iteritems():
    hour = datetime.datetime(timestamp.tm_year, timestamp.tm_mon,
                             timestamp.tm_mday, timestamp.tm_hour);
    hourly_readings[hour] += reading
</snippet></ROW><ROW><id>4635713</id><snippet>power_reading</snippet></ROW><ROW><id>4635713</id><snippet>+=</snippet></ROW><ROW><id>4635713</id><snippet>hourly_readings[hour] = tuple(map(sum, zip(hourly_readings[hour], reading)))
</snippet></ROW><ROW><id>4635956</id><snippet>InputStream</snippet></ROW><ROW><id>4635956</id><snippet>java.nio</snippet></ROW><ROW><id>4635956</id><snippet>nio</snippet></ROW><ROW><id>4635956</id><snippet>nio</snippet></ROW><ROW><id>4635956</id><snippet>nio</snippet></ROW><ROW><id>4636344</id><snippet>for name in dirList[:]:</snippet></ROW><ROW><id>4636344</id><snippet>modifiedDirList = []
for name in dirList:
    match = re.search(r'\.mp3', name)
    if match:
        i += 1
        modifiedDirList.append(name)

print modifiedDirList
</snippet></ROW><ROW><id>4636344</id><snippet>dirList = [name for name in sorted(os.listdir(path))
           if re.search(r'\.mp3', name)]
</snippet></ROW><ROW><id>4636344</id><snippet>dirList = [name for name in sorted(os.listdir(path))
           if name.endswith('.mp3')]
</snippet></ROW><ROW><id>4636665</id><snippet>basic = [x*x for x in range(11)]
</snippet></ROW><ROW><id>4636784</id><snippet>#!/usr/bin/env python
import sys

try:
    # dont use ; !
    infilename = sys.argv[1]
    outfilename = sys.argv[2]
except:
    print "Usage is &lt;script&gt; inFile outFile"


# you could use `with` here if you have a Python 2.7
ifile = open(infilename,'r')
ofile = open(outfilename, 'w')

# no need to count yourself, enumerate does that
# plus when you iterate over a file you get lines too
for i, line in enumerate(ifile, start=1):
    # dont shadow builtins like `list`
    parts = line.split()
    parts[0] = i
    # join is the inverse function to split
    new_line = ' '.join("%d" % int(val) for val in parts)
    ofile.write(new_line + '\n')

ifile.close()
ofile.close()
</snippet></ROW><ROW><id>4636784</id><snippet>("%d" % int(val) for val in parts)</snippet></ROW><ROW><id>4636784</id><snippet>["%d" % int(val) for val in parts]</snippet></ROW><ROW><id>4636784</id><snippet>int</snippet></ROW><ROW><id>4636784</id><snippet>for i, line in enumerate(ifile, start=1):
    parts = line.split()
    parts[0] = "%d" % i
    new_line = ' '.join(parts)
    ofile.write(new_line + '\n')
</snippet></ROW><ROW><id>4637055</id><snippet>/tmp</snippet></ROW><ROW><id>4637055</id><snippet>df /tmp</snippet></ROW><ROW><id>4637055</id><snippet>/tmp/cer</snippet></ROW><ROW><id>4637055</id><snippet>/tmp</snippet></ROW><ROW><id>4637055</id><snippet>/tmp/cer</snippet></ROW><ROW><id>4637432</id><snippet>lxml</snippet></ROW><ROW><id>4637530</id><snippet>import time

def do_something():
    with open("/tmp/current_time.txt", "w") as f:
        f.write("The time is now " + time.ctime())

def run():
    while True:
        time.sleep(60)
        do_something()

if __name__ == "__main__":
    run()
</snippet></ROW><ROW><id>4637530</id><snippet>time.sleep(60)</snippet></ROW><ROW><id>4637530</id><snippet>do_something()</snippet></ROW><ROW><id>4637530</id><snippet>$ python background_test.py &amp;
</snippet></ROW><ROW><id>4637530</id><snippet>$ python background_test.py &gt;stdout.txt 2&gt;stderr.txt &amp;
</snippet></ROW><ROW><id>4637674</id><snippet>window.setGeometry(width, height, x_pos, y_pos?)</snippet></ROW><ROW><id>4637712</id><snippet>clojure.contrib.repl-utils/show</snippet></ROW><ROW><id>4637712</id><snippet>user=&gt; (use '[clojure.contrib.repl-utils :only (show)])
nil
user=&gt; (show String)
===  public final java.lang.String  ===
[ 0] static CASE_INSENSITIVE_ORDER : Comparator
[ 1] static copyValueOf : String (char[])
[ 2] static copyValueOf : String (char[],int,int)
[ 3] static format : String (Locale,String,Object[])
[ 4] static format : String (String,Object[])
...
</snippet></ROW><ROW><id>4637712</id><snippet>user=&gt; (map #(.getName %) (.getMethods String))
("equals" "toString" "hashCode" "compareTo" ...)
</snippet></ROW><ROW><id>4637712</id><snippet>.getFields</snippet></ROW><ROW><id>4637712</id><snippet>.getConstructors</snippet></ROW><ROW><id>4638019</id><snippet>class a:

    def __init__(self):
        self.__variable = 6

    def b(self, value=None):
        if value is None:
            value = self.__variable
        print value
</snippet></ROW><ROW><id>4638062</id><snippet>_ABC_</snippet></ROW><ROW><id>4638062</id><snippet>_CBA_</snippet></ROW><ROW><id>4638062</id><snippet>&gt;&gt;&gt; s = 'blah blah blah... _ABC_superman_is_cool_CBA_ ...blah blah _ABC_blah_CBA_...'
&gt;&gt;&gt; re.findall('_ABC_(.*?)_CBA_', s)
['superman_is_cool', 'blah']
</snippet></ROW><ROW><id>4638062</id><snippet>?</snippet></ROW><ROW><id>4638062</id><snippet>*</snippet></ROW><ROW><id>4638062</id><snippet>['superman_is_cool_CBA_ ...blah blah _ABC_blah']</snippet></ROW><ROW><id>4638637</id><snippet>class Permalink(models.Model):
    key = models.CharField(primary_key = True, max_length = 8)
    refersTo = models.ForeignKey(MyContentModel, unique = True)
</snippet></ROW><ROW><id>4638637</id><snippet>refersTo</snippet></ROW><ROW><id>4638637</id><snippet>url("^permalink/(?P&lt;key&gt;[a-f0-9]{8})$",
    "view.that.redirects.to.permalink.refersTo"),
</snippet></ROW><ROW><id>4638750</id><snippet>&gt;&gt;&gt; xml = """&lt;DOCUMENT&gt;
... &lt;PAGE width="544.252" height="634.961" number="1" id="p1"&gt;
... &lt;MEDIABOX x1="0" y1="0" x2="544.252" y2="634.961"/&gt;
... 
... &lt;BLOCK id="p1_b1"&gt;
... 
... &lt;TEXT width="37.7" height="74.124" id="p1_t1" x="51.1" y="20.8652"&gt;
... &lt;TOKEN sid="p1_s11" id="p1_w1" font-name="Verdanae" bold="yes" italic="no"&gt;111&lt;/TOKEN&gt;
... &lt;/TEXT&gt;
... &lt;/BLOCK&gt;
... 
... &lt;BLOCK id="p1_b3"&gt;
... 
... &lt;TEXT width="151.267" height="10.725" id="p1_t6" x="24.099" y="572.096"&gt;
... &lt;TOKEN sid="p1_s35" id="p1_w22" font-name="Verdanae" bold="yes"     italic="yes"&gt;AAA&lt;/TOKEN&gt;
... &lt;TOKEN sid="p1_s36" id="p1_w23" font-name="verdanae" bold="yes" italic="no"&gt;BBB&lt;/TOKEN&gt;
... &lt;TOKEN sid="p1_s37" id="p1_w24" font-name="verdanae" bold="yes" italic="no"&gt;CCC&lt;/TOKEN&gt;
... &lt;/TEXT&gt;
... &lt;/BLOCK&gt;
... 
... &lt;BLOCK id="p1_b4"&gt;
... 
... &lt;TEXT width="82.72" height="26" id="p1_t7" x="55.426" y="138.026"&gt;
... &lt;TOKEN sid="p1_s42" id="p1_w29" font-name="verdanae" bold="yes" italic="no"&gt;DDD&lt;/TOKEN&gt;
... &lt;TOKEN sid="p1_s43" id="p1_w30" font-name="verdanae" bold="yes" italic="no"&gt;EEE&lt;/TOKEN&gt;
... &lt;/TEXT&gt;
... 
... &lt;TEXT width="101.74" height="26" id="p1_t8" x="55.406" y="162.026"&gt;
... &lt;TOKEN sid="p1_s45" id="p1_w31" font-name="verdanae" bold="yes" italic="no"&gt;FFF&lt;/TOKEN&gt;
... &lt;/TEXT&gt;
... 
... &lt;TEXT width="152.96" height="26" id="p1_t9" x="55.406" y="186.026"&gt;
... &lt;TOKEN sid="p1_s47" id="p1_w32" font-name="verdanae" bold="yes" italic="no"&gt;GGG&lt;/TOKEN&gt;
... &lt;TOKEN sid="p1_s48" id="p1_w33" font-name="verdanae" bold="yes" italic="no"&gt;HHH&lt;/TOKEN&gt;
... &lt;/TEXT&gt;
... &lt;/BLOCK&gt;
... &lt;/PAGE&gt;
... &lt;/DOCUMENT&gt;"""
&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; parsed = etree.fromstring(xml)
&gt;&gt;&gt; tokens = parsed.xpath('//TOKEN/text()')
&gt;&gt;&gt; tokens
['111', 'AAA', 'BBB', 'CCC', 'DDD', 'EEE', 'FFF', 'GGG', 'HHH']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4638750</id><snippet>&gt;&gt;&gt; parsed = etree.fromstring(xml)
&gt;&gt;&gt; for block in parsed.xpath('//PAGE/BLOCK/TEXT'):
...     print block.xpath('./TOKEN/text()')
... 
['111']
['AAA', 'BBB', 'CCC']
['DDD', 'EEE']
['FFF']
['GGG', 'HHH']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4638902</id><snippet>dict((x+y,0) for x in 'cd' for y in 'ab')
</snippet></ROW><ROW><id>4638957</id><snippet>j = dict((a, i) for i, s in enumerate(l) for a in s)
</snippet></ROW><ROW><id>4639153</id><snippet>import json
for l in xrange(100):
    try:
        with open('C:/Twitter/json/user_%d.json' % l, 'r') as f:
            data = json.load(f)
            #do stuff with obj
    except IOError:
        pass
</snippet></ROW><ROW><id>4639451</id><snippet>self.lt = threading.Thread(target=self.loop())
</snippet></ROW><ROW><id>4639451</id><snippet>self.lt = threading.Thread(target=self.loop)
</snippet></ROW><ROW><id>4639451</id><snippet>target=self.loop()</snippet></ROW><ROW><id>4639451</id><snippet>loop</snippet></ROW><ROW><id>4639451</id><snippet>threading.Thread</snippet></ROW><ROW><id>4639451</id><snippet>target=self.loop</snippet></ROW><ROW><id>4639451</id><snippet>threading.Thread</snippet></ROW><ROW><id>4639451</id><snippet>threading.Thread</snippet></ROW><ROW><id>4639451</id><snippet>import Tkinter
import threading
import subprocess
import Queue
import shlex
import re
import matplotlib.pyplot as plt
import matplotlib.backends.backend_tkagg as tkagg
import atexit
import numpy as np

pingers=[]
def cleanup():
    print('terminating ping subprocesses...')
    for pinger in pingers:
        pinger.proc.terminate()        
atexit.register(cleanup)

class Pinger(threading.Thread):
    def __init__(self,app,queue):
        threading.Thread.__init__(self)        
        self.app=app
        self.queue=queue
    def run(self):
        # One ping subprocess is started by each Pinger thread.
        # The ping subprocess runs indefinitely, terminated by the cleanup function
        # which is called by atexit right before the main program terminates.
        ip = self.queue.get()
        cmd="ping %s" % ip
        self.proc = subprocess.Popen(shlex.split(cmd),
                                     stdout=subprocess.PIPE)
        for line in iter(self.proc.stdout.readline,''):
            match=re.search('time=(.*)\s+ms',line)
            if match:
                avg=float(match.group(1))
                self.app.update(ip,avg)

class App(object):
    def __init__(self,master,ips):
        self.ips=ips
        self.fig = plt.Figure(figsize=(5,4), dpi=100)
        self.fig.subplots_adjust(bottom=0.25) 
        self.ax=self.fig.add_subplot(1,1,1)
        self.canvas = tkagg.FigureCanvasTkAgg(self.fig, master=master)
        self.canvas.get_tk_widget().pack(side='top', fill='both', expand=1)
        self.canvas.show()
        N=len(self.ips)
        self.idx=dict(zip(self.ips,range(N)))
        # I set an initial ping time of 200 just to make the initial bar chart
        times=[200]*N  
        self.rects=self.ax.bar(range(N), times)
        self.ax.set_xticks(np.arange(N)+0.8*0.5)
        self.ax.set_xticklabels(self.ips, rotation=25)
    def update(self,ip,avg):
        # This is called by Pinger threads, each time a new ping value is obtained
        print(ip,avg)
        self.rects[self.idx[ip]].set_height(avg)
        self.canvas.draw()

def main():    
    root = Tkinter.Tk()
    root.wm_title("Connection Speed")
    ips=['bbc.co.uk', 'google.co.uk', 'nhgs.co.uk', 'bing.co.uk', 'msn.com']
    app = App(root,ips)
    queue = Queue.Queue()
    for ip in ips:
        queue.put(ip)
        # This starts one Pinger for each ip.
        pinger=Pinger(app,queue)
        pingers.append(pinger)
        pinger.daemon=True
        pinger.start()
    Tkinter.mainloop()

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>4639581</id><snippet>print</snippet></ROW><ROW><id>4639982</id><snippet>&gt;&gt;&gt; class A: m = lambda: None
...
&gt;&gt;&gt; A.m
&lt;unbound method A.&lt;lambda&gt;&gt;
</snippet></ROW><ROW><id>4639982</id><snippet>&gt;&gt;&gt; A.m is A.m
False
</snippet></ROW><ROW><id>4639982</id><snippet>&gt;&gt;&gt; x = A.m
&gt;&gt;&gt; x is x
True
</snippet></ROW><ROW><id>4639982</id><snippet>&gt;&gt;&gt; A.m.im_func is A.m.im_func
True
</snippet></ROW><ROW><id>4639982</id><snippet>im_func</snippet></ROW><ROW><id>4639982</id><snippet>C.m is C.m</snippet></ROW><ROW><id>4639982</id><snippet>&gt;&gt;&gt; class ChangingAttribute(object):
...     @property
...     def n(self):
...             self._n += 1
...             return self._n
...
...     def __init__(self):
...             self._n = 0
...
&gt;&gt;&gt; foo = ChangingAttribute()
&gt;&gt;&gt; foo.n
1
&gt;&gt;&gt; foo.n
2
&gt;&gt;&gt; foo.n
3
&gt;&gt;&gt; foo.n is foo.n
False
&gt;&gt;&gt; foo.n
6
</snippet></ROW><ROW><id>4640644</id><snippet>threading.Thread(target = ScanLow).start()
threading.Thread(target = ScanHigh).start()

e = a + b

while e &lt; 2000:
   f = raw_input()
</snippet></ROW><ROW><id>4640644</id><snippet>e</snippet></ROW><ROW><id>4640644</id><snippet>e</snippet></ROW><ROW><id>4640644</id><snippet>join()</snippet></ROW><ROW><id>4640644</id><snippet>from threading import Thread
threads = []
threads.append(Thread(target = ScanLow))
threads.append(Thread(target = ScanHigh))
for thread in threads:
  thread.start()
//both threads are running
for thread in threads:
  thread.join()
//both threads have stopped
</snippet></ROW><ROW><id>4640644</id><snippet>from threading import Thread
def Scan(start, stop):
    global a
    global c

    for i in range(start, stop):  
        s = socket(AF_INET, SOCK_STREAM)  
        result = s.connect_ex((TargetIP, i))  

        if(result == 0) :  
            c = "Port %d: OPEN\n" % (i,)  

        s.close()  
        a += 1

threadCount = 2
totalPorts = 2000
threads = []
for start in xrange(0, totalPorts, totalPorts/threadCount):
    threads.append(Thread(target = Scan, args = (start, totalPorts/threadCount)))

for thread in threads:
  thread.start()
//both threads are running
for thread in threads:
  thread.join()
//both threads have stopped
</snippet></ROW><ROW><id>4640781</id><snippet>sha256</snippet></ROW><ROW><id>4641158</id><snippet>LocationV2()</snippet></ROW><ROW><id>4641191</id><snippet>button.config(image=...)
</snippet></ROW><ROW><id>4641191</id><snippet>button.cget("image") == image.name
</snippet></ROW><ROW><id>4641491</id><snippet>&gt;&gt;&gt; x = 'Hello, WORLD, McGisty, you are my HERO THAT I am.'
&gt;&gt;&gt; m = ' '.join(e.capitalize() if e.isupper() else e for e in x.split())
&gt;&gt;&gt; m
'Hello, World, McGisty, you are my Hero That I am.'
</snippet></ROW><ROW><id>4641506</id><snippet># Python 2
params=( buffer(ba.data()), ...)
# Python 3
params=( bytes(ba.data()), ...)
</snippet></ROW><ROW><id>4641871</id><snippet>&gt;&gt;&gt; L=[0,0,0,0]
&gt;&gt;&gt; things_to_add=({'idx':1,'amount':1},{'idx':2,'amount':1})
&gt;&gt;&gt; for item in things_to_add:
...     L[item['idx']]+=item['amount']
... 
&gt;&gt;&gt; L
[0, 1, 1, 0]
</snippet></ROW><ROW><id>4641871</id><snippet>&gt;&gt;&gt; L=[0,0,0,0]
&gt;&gt;&gt; things_to_add=[0,1,1,0]
&gt;&gt;&gt; for idx, amount in enumerate(things_to_add):
...     L[idx]+=amount
... 
&gt;&gt;&gt; L
[0, 1, 1, 0]
</snippet></ROW><ROW><id>4641871</id><snippet>&gt;&gt;&gt; things_to_add=[(1,1),(2,1)]
&gt;&gt;&gt; for idx, amount in things_to_add:
...     L[idx]+=amount
... 
&gt;&gt;&gt; L
[0, 1, 1, 0]
</snippet></ROW><ROW><id>4642067</id><snippet>mixed = [ "hello", 3.1415926, 42, (1+2j) ]
</snippet></ROW><ROW><id>4642067</id><snippet>List&lt;String&gt; javaList= new LinkedList&lt;String&gt;();
</snippet></ROW><ROW><id>4642280</id><snippet>&gt;&gt;&gt; grades = { 'k':'x'}
&gt;&gt;&gt; grades
{'k': 'x'}
&gt;&gt;&gt; grades = { 'newinput':'newval'}
&gt;&gt;&gt; grades
{'newinput': 'newval'}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4642280</id><snippet>&gt;&gt;&gt; grades = {}
&gt;&gt;&gt; grades['k'] = 'x'
&gt;&gt;&gt; grades['newinput'] = 'newval'
&gt;&gt;&gt; grades
{'k': 'x', 'newinput': 'newval'}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4642280</id><snippet>&gt;&gt;&gt; grades = {}
&gt;&gt;&gt; while True:
...     k = raw_input('Please enter the module ID: ')
...     val = raw_input('Please enter the grade for the module: ')
...     grades[k] = val
... 
Please enter the module ID: x
Please enter the grade for the module: 222
Please enter the module ID: y
Please enter the grade for the module: 234
Please enter the module ID: z
Please enter the grade for the module: 456
Please enter the module ID: 
Please enter the grade for the module: 
Please enter the module ID: Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
KeyboardInterrupt
&gt;&gt;&gt; 
&gt;&gt;&gt; grades
{'y': '234', 'x': '222', 'z': '456', '': ''}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4642377</id><snippet>getopt</snippet></ROW><ROW><id>4642386</id><snippet>conn.close()</snippet></ROW><ROW><id>4642386</id><snippet>conn.recv()</snippet></ROW><ROW><id>4642386</id><snippet>conn</snippet></ROW><ROW><id>4642392</id><snippet>% mkfifo foo
% cat giantFile &gt; foo &amp;
[1] 4667
% wc -l foo
100
</snippet></ROW><ROW><id>4642407</id><snippet>commands = {}
</snippet></ROW><ROW><id>4642407</id><snippet>from yourmodule.main import commands

def mynewcommand(arguments=here):
    pass

commands['newcommand'] = mynewcommand
</snippet></ROW><ROW><id>4642509</id><snippet>&gt;&gt;&gt; sorted(d)
['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>4642509</id><snippet>&gt;&gt;&gt; sorted(d.items())
[
 ('a', [1, 2, 3]),
 ('b', ['blah', 'bhasdf', 'asdf']),
 ('c', ['one', 'two']),
 ('d', ['asdf', 'wer', 'asdf', 'zxcv'])
]
</snippet></ROW><ROW><id>4642509</id><snippet>OrderedDict</snippet></ROW><ROW><id>4642509</id><snippet>&gt;&gt;&gt; d = collections.OrderedDict(sorted(d.items()))
&gt;&gt;&gt; for k, v in d.items():
&gt;&gt;&gt;     print k, v
</snippet></ROW><ROW><id>4642607</id><snippet>is_anonymous</snippet></ROW><ROW><id>4642692</id><snippet>environ['wsgi.input']</snippet></ROW><ROW><id>4642692</id><snippet>PUT</snippet></ROW><ROW><id>4642692</id><snippet>PUT</snippet></ROW><ROW><id>4642692</id><snippet>php://input</snippet></ROW><ROW><id>4642692</id><snippet>$f1 = fopen('php://input', 'rb');
$f2 = fopen($FilePath, 'wb');

while($data = fread($f1, 4096))
{
    fwrite($f2, $data);
}

fclose($f1);
fclose($f2);
</snippet></ROW><ROW><id>4642692</id><snippet>multipart/form-data</snippet></ROW><ROW><id>4642692</id><snippet>POST</snippet></ROW><ROW><id>4642692</id><snippet>PUT</snippet></ROW><ROW><id>4642692</id><snippet>  output = open('/tmp/input', 'wb')
  while True:
    buf = environ['wsgi.input'].read(4096)
    if len(buf) == 0:
      break
    output.write(buf)
</snippet></ROW><ROW><id>4643052</id><snippet>'&amp;category=%s&amp;v=2' % '%2C+'.join(tag.strip() for tag in tags_list)
</snippet></ROW><ROW><id>4643058</id><snippet>libxslt-devel</snippet></ROW><ROW><id>4643058</id><snippet>yum install libxslt-devel</snippet></ROW><ROW><id>4643058</id><snippet>python setup.py install</snippet></ROW><ROW><id>4643058</id><snippet>Installed /usr/lib/python2.6/site-packages/lxml-2.2.8-py2.6-linux-i686.egg
Processing dependencies for lxml==2.2.8
Finished processing dependencies for lxml==2.2.8
</snippet></ROW><ROW><id>4643058</id><snippet>libxml2</snippet></ROW><ROW><id>4643058</id><snippet>libxml2-devel</snippet></ROW><ROW><id>4643058</id><snippet>libxslt</snippet></ROW><ROW><id>4643082</id><snippet>WM_DELETE_WINDOW</snippet></ROW><ROW><id>4643087</id><snippet>__init__.py</snippet></ROW><ROW><id>4643087</id><snippet>$ python manage.py celeryd -E -B -lDEBUG
</snippet></ROW><ROW><id>4643087</id><snippet>-E</snippet></ROW><ROW><id>4643087</id><snippet>-B</snippet></ROW><ROW><id>4643392</id><snippet>pop3.126.idns.yeah.net
220.181.15.128
</snippet></ROW><ROW><id>4643392</id><snippet>nslookup pop3.126.com</snippet></ROW><ROW><id>4643723</id><snippet>NOTIFICATION_QUEUE_ALL=True
</snippet></ROW><ROW><id>4643723</id><snippet>django_admin.py emit_notices
</snippet></ROW><ROW><id>4643723</id><snippet>sendmail</snippet></ROW><ROW><id>4643911</id><snippet>&gt;&gt;&gt; from PIL import Image
&gt;&gt;&gt; im = Image.open('polar-bear-cub.jpg')
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; by_color = defaultdict(int)
&gt;&gt;&gt; for pixel in im.getdata():
...     by_color[pixel] += 1
&gt;&gt;&gt; by_color
defaultdict(&lt;type 'int'&gt;, {(11, 24, 41): 8, (53, 52, 58): 8, (142, 147, 117): 1, (121, 111, 119): 1, (234, 228, 216): 4
</snippet></ROW><ROW><id>4643972</id><snippet>AuthenticationForm</snippet></ROW><ROW><id>4643972</id><snippet>urls.py</snippet></ROW><ROW><id>4643972</id><snippet>class MyAuthenticationForm(AuthenticationForm):
    # add your form widget here
    widget = .....
</snippet></ROW><ROW><id>4643972</id><snippet>urls.py</snippet></ROW><ROW><id>4643972</id><snippet>(r'^login/?$','django.contrib.auth.views.login',{'template_name':'login.html', 'authentication_form':MyAuthenticationForm}),
</snippet></ROW><ROW><id>4643972</id><snippet>forms.py</snippet></ROW><ROW><id>4644059</id><snippet>sorted(lst, reverse=True)
</snippet></ROW><ROW><id>4644077</id><snippet>LOGIN_URL = '/login'</snippet></ROW><ROW><id>4644120</id><snippet>lst2 = [(x, y) for (x, y) in lst if y != (4, 5)]
</snippet></ROW><ROW><id>4644129</id><snippet>class Workshop(object):
  def __init__(self, week, stream, strand, day, name):
    self.week = week
    self.stream = stream
    self.day = day
    self.strand = strand
    self.name = name

...
for row in workshop_reader:
  workshops['name'] = Workshop(...)
</snippet></ROW><ROW><id>4644327</id><snippet>import string
from collections import defaultdict
rng = xrange if xrange else range

def filetxt():
    users     = 0
    total_t   = 0
    occ       = 0

    wordcount = defaultdict(int)
    wordpairs = defaultdict(lambda: defaultdict(int))
    for filenum in rng(500):
        try:
            with open("C:/Twitter/json/user_" + str(filenum) + ".json",'r') as inf:
                users += 1
                tweets = json.load(inf)
                total_t += len(tweets)

                for txt in (r['text'] for r in tweets):
                    occ += txt.count('RT') + txt.count('@')
                    prev = None
                    for word in txt.encode('utf-8').translate(None, string.punctuation).lower().split():
                        wordcount[word] += 1
                        wordpairs[prev][word] += 1
                        prev = word
        except IOError:
            pass
</snippet></ROW><ROW><id>4644573</id><snippet>manage.py startapp main
</snippet></ROW><ROW><id>4645143</id><snippet>print ('The price is $ ', us_price, ' as of ', trade_time)
</snippet></ROW><ROW><id>4645143</id><snippet>&gt;&gt;&gt; x = 3
&gt;&gt;&gt; print('The value of x is:', 3, 'Yes!')
The value of x is: 3 Yes!
</snippet></ROW><ROW><id>4645865</id><snippet>&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt; x = range(3)
&gt;&gt;&gt; list(permutations(x))
[(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4645947</id><snippet>class XType(models.Model):
    language = models.CharField(max_length=5)
    description = models.CharField(max_length=50) 
</snippet></ROW><ROW><id>4646459</id><snippet>try:
   return self.clientdetails.last_name
except ClientDetails.DoesNotExist:
   ##handle it here, returning a graceful message
</snippet></ROW><ROW><id>4646459</id><snippet>try:
    self.clientdetails_set.all()[0].last_name
except IndexError, e:
    ## handle exception here
</snippet></ROW><ROW><id>4646459</id><snippet>unique=True</snippet></ROW><ROW><id>4646477</id><snippet>while ( match( "&lt;td[^&gt;]*&gt;(.*?)&lt;/td[^&gt;]*&gt;" ) ) {
    inner = match[1];
    ...
}
</snippet></ROW><ROW><id>4646477</id><snippet>(.*?)</snippet></ROW><ROW><id>4646477</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>4646477</id><snippet>&lt;/td&gt;</snippet></ROW><ROW><id>4646477</id><snippet>&lt;/td&gt;</snippet></ROW><ROW><id>4646477</id><snippet>inner</snippet></ROW><ROW><id>4646611</id><snippet>parse_qs</snippet></ROW><ROW><id>4646611</id><snippet>cgi</snippet></ROW><ROW><id>4646611</id><snippet>urlparse</snippet></ROW><ROW><id>4646611</id><snippet>import cgi</snippet></ROW><ROW><id>4646611</id><snippet>cgi.parse_qs</snippet></ROW><ROW><id>4646611</id><snippet>import urlparse # if we're pre-2.6, this will not include parse_qs
try:
    from urlparse import parse_qs
except ImportError: # old version, grab it from cgi
    from cgi import parse_qs
    urlparse.parse_qs = parse_qs
</snippet></ROW><ROW><id>4646654</id><snippet>parse_args</snippet></ROW><ROW><id>4646654</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>4646654</id><snippet>args_str = '-file all -height 100 -width 200 -type jpeg'</snippet></ROW><ROW><id>4646654</id><snippet>parser.parse_args(args_str.split())</snippet></ROW><ROW><id>4646726</id><snippet>connect</snippet></ROW><ROW><id>4646726</id><snippet>lambda</snippet></ROW><ROW><id>4646726</id><snippet>    self.connect(pyuic4Button, SIGNAL("clicked()"),
            lambda: self.setPath("pyuic4"))
    self.connect(pyrcc4Button, SIGNAL("clicked()"),
            lambda: self.setPath("pyrcc4"))
</snippet></ROW><ROW><id>4646794</id><snippet>highlightthickness</snippet></ROW><ROW><id>4646923</id><snippet>import time
import sys
import urllib2
import urllib
from json import loads
import cookielib

base_url = "https://graph.facebook.com/search?q="
post_id = None
post_type = None
user_id = None 
message = None
created_time = None

jar = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(jar))
opener.addheaders = [
    ('Accept-Language', 'en-US,en;q=0.8'),]

def doit(hour):
    page = 1
    search_term = "\"Plastic Planet\""
    encoded_search_term = urllib.quote(search_term)
    print encoded_search_term
    type="&amp;type=post"
    url = "%s%s%s" % (base_url,encoded_search_term,type)

    print url

    data = True
    while data:
        response = opener.open(url)
        opener.addheaders += [
            ('Referer', url) ]

        content = response.read()
        content = loads(content)

        print "=================================="
        for c in content["data"]:
            print c.keys()
        print "****************************************"

        if "paging" in content:
            print "current URL"
            print url
            print "next page!------------"
            url = content["paging"]["next"]
            print url
        else:
            print content
            print url
            data = False

doit(1)
</snippet></ROW><ROW><id>4646923</id><snippet>import urllib2
import urllib
from json import loads
import cookielib

def doit(search_term, base_url = "https://graph.facebook.com/search?q="):
    opener = urllib2.build_opener()
    opener.addheaders = [('Accept-Language', 'en-US,en;q=0.8')]

    encoded_search_term = urllib.quote(search_term)
    type="&amp;type=post"
    url = "%s%s%s" % (base_url,encoded_search_term,type)

    print encoded_search_term
    print url

    data = True
    while data:
        response = opener.open(url)

        content = loads(response.read())

        print "=================================="
        for c in content["data"]:
            print c.keys()
        print "****************************************"

        if "paging" in content:
            url = content["paging"]["next"]
        else:
            print "Empty response"
            print content
            data = False

doit('"Plastic Planet"')
</snippet></ROW><ROW><id>4647086</id><snippet>zipped = zip(mylist[0::2], mylist[1::2])
</snippet></ROW><ROW><id>4647086</id><snippet>zip</snippet></ROW><ROW><id>4647379</id><snippet>a[2:4]</snippet></ROW><ROW><id>4647379</id><snippet>a[2:4].reverse()</snippet></ROW><ROW><id>4647379</id><snippet>b = a[:]
</snippet></ROW><ROW><id>4647551</id><snippet>cmp=</snippet></ROW><ROW><id>4647551</id><snippet>key=</snippet></ROW><ROW><id>4647551</id><snippet>sorted(list, key=lambda x: x['nr'])
</snippet></ROW><ROW><id>4647551</id><snippet>cmp</snippet></ROW><ROW><id>4647551</id><snippet>key</snippet></ROW><ROW><id>4647551</id><snippet>key</snippet></ROW><ROW><id>4647551</id><snippet>cmp</snippet></ROW><ROW><id>4647551</id><snippet>sorted</snippet></ROW><ROW><id>4647551</id><snippet>.sort()</snippet></ROW><ROW><id>4647551</id><snippet>.sort()</snippet></ROW><ROW><id>4648221</id><snippet>glob.glob</snippet></ROW><ROW><id>4648221</id><snippet>.txt</snippet></ROW><ROW><id>4648221</id><snippet>os.walk</snippet></ROW><ROW><id>4648221</id><snippet>def get_all_txts_on_dir(path):
    import os
    ret = []
    for root, dir, files in os.walk(path):
        for name in files:
            if name.endswith('.txt'):
                ret.append(name)
    return ret
</snippet></ROW><ROW><id>4648417</id><snippet>class class1(object):
    def __init__(self, friend=None):
        if friend is None:
            friend = class2
        self.friendInstance = friend()
</snippet></ROW><ROW><id>4648417</id><snippet>class class1(object):
    def __init__(self, friend=None):
        if friend is None:
            self.friendInstance = class2(self)
        else:
            self.friendInstance = friend
</snippet></ROW><ROW><id>4648417</id><snippet>class class1(object):
    def __init__(self, friend=None, friendClass=None):
        if friend is None:
            self.friendInstance = (class2 if friendClass is None else friendClass)(self)
        else:
            self.friendInstance = friend

class class2(object):
    def __init__(self, friend=None, friendClass=class1):
        if friend is None:
            self.friendInstance = friendClass(self)
        else:
            self.friendInstance = friend
</snippet></ROW><ROW><id>4648949</id><snippet>__getstate__</snippet></ROW><ROW><id>4648949</id><snippet>__setstate__</snippet></ROW><ROW><id>4648949</id><snippet>__setstate__</snippet></ROW><ROW><id>4648949</id><snippet>__class__</snippet></ROW><ROW><id>4648949</id><snippet>__class__</snippet></ROW><ROW><id>4648949</id><snippet>class Base(object):
    def m(self):
        return self.__class__.PARAM
    def __getstate__(self):
        global AutoSub
        AutoSub = self.__class__
        return (self.__dict__,self.__class__.PARAM)
    def __setstate__(self, state):
        self.__class__ = make_parameterized(state[1])
        self.__dict__.update(state[0])

def make_parameterized(param_value):
    class AutoSub(Base):
        PARAM = param_value
    return AutoSub

class AutoSub(Base):
    pass


if __name__ == "__main__":

    from pickle import dumps, loads

    a = make_parameterized("a")()
    b = make_parameterized("b")()

    print a.PARAM, b.PARAM, type(a) is type(b)
    a_p = dumps(a)
    b_p = dumps(b)

    del a, b
    a = loads(a_p)
    b = loads(b_p)

    print a.PARAM, b.PARAM, type(a) is type(b)
</snippet></ROW><ROW><id>4649285</id><snippet>chosen_word = random.choice(['cat', 'dog'])
letters_set = set(chosen_word)
while len(letters_set) &gt; 0:
    letter = raw_input() #make controls on this.
    if letter in letters_set:
        letters_set.remove(letter)
        print "Good!"
        print ''.join(map(lambda c: c in letters_set and '_' or c, chosen_word))
    else:
        print "Bad Bad, try again!"
</snippet></ROW><ROW><id>4649440</id><snippet>SELECT * from the_table where not (lower_bound &gt; 2008 or upper_bound &lt; 2004)</snippet></ROW><ROW><id>4649464</id><snippet>rdf=rdflib.Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#")</snippet></ROW><ROW><id>4649464</id><snippet>rdflib.term.URIRef(rdf+'type')</snippet></ROW><ROW><id>4649464</id><snippet>rdflib.term.URIRef(rdf['type'])</snippet></ROW><ROW><id>4649464</id><snippet>from rdflib.namespace import RDF
#RDF &lt;-- rdf.namespace.ClosedNamespace('http://www.w3.org/1999/02/22-rdf-syntax-ns#')
</snippet></ROW><ROW><id>4649655</id><snippet>class ConnectionChecker(sqlalchemy.interfaces.PoolListener):
    def checkout(self, dbapi_con, con_record, con_proxy):
        if not is_valid_connection(dbapi_con):
            # a new connection will be used
            raise sqlalchemy.exc.DisconnectionError 
</snippet></ROW><ROW><id>4649655</id><snippet>is_valid_connection</snippet></ROW><ROW><id>4649778</id><snippet>users.user.key</snippet></ROW><ROW><id>4649778</id><snippet>users.user[key]</snippet></ROW><ROW><id>4649778</id><snippet>with</snippet></ROW><ROW><id>4649778</id><snippet> {% with user.key as user_key %}
    {{users.user_key}} 
 {% endwith %}
</snippet></ROW><ROW><id>4649825</id><snippet>sorted</snippet></ROW><ROW><id>4649825</id><snippet>for</snippet></ROW><ROW><id>4649825</id><snippet>imap</snippet></ROW><ROW><id>4649825</id><snippet>from sys import stdin, stdout
stdout.writelines(sorted(stdin, key=int))
</snippet></ROW><ROW><id>4650198</id><snippet>import lxml.html
doc = lxml.html.fromstring(your_html)
result = doc.xpath("//div[@class='col result_name']")
print result
</snippet></ROW><ROW><id>4650418</id><snippet>class counted(object):
    """ counts how often a function is called """
    def __init__(self, func):
        self.func = func
        self.counter = 0

    def __call__(self, *args, **kwargs):
        self.counter += 1
        return self.func(*args, **kwargs)


@counted
def something():
    pass

something()
print something.counter
</snippet></ROW><ROW><id>4650476</id><snippet>text = """
def fun1():
    print 'fun1'

def fun2():
    print 'fun2'

"""

import ast
tree = ast.parse(text)
# tree.body[0] contains FunctionDef for fun1, tree.body[1] for fun2

wrapped = ast.Interactive(body=[a.body[1]])
code = compile(wrapped, 'yourfile', 'single')
eval(code)
fun2() # prints 'fun2'
</snippet></ROW><ROW><id>4650586</id><snippet>replaceLeadingCharacters()</snippet></ROW><ROW><id>4650586</id><snippet>replaceLeadingString()</snippet></ROW><ROW><id>4650586</id><snippet>re</snippet></ROW><ROW><id>4650586</id><snippet>while</snippet></ROW><ROW><id>4650586</id><snippet>#!/usr/bin/env python
import re

def lreplace(s, old, new):
    """Return a copy of string `s` with leading occurrences of
    substring `old` replaced by `new`.

    &gt;&gt;&gt; lreplace('abcabcdefabc', 'abc', 'X')
    'XXdefabc'
    &gt;&gt;&gt; lreplace('_abc', 'abc', 'X')
    '_abc'
    """
    return re.sub(r'^(?:%s)+' % re.escape(old),
                  lambda m: new * (m.end() / len(old)),
                  s)
</snippet></ROW><ROW><id>4650586</id><snippet>re.escape()</snippet></ROW><ROW><id>4650737</id><snippet>writer.writerow([s.encode('utf8') if type(s) is unicode else s for s in row]) 
</snippet></ROW><ROW><id>4650737</id><snippet>row = (56, u"LIMPIADOR BA\xd1O 1'5 L")
</snippet></ROW><ROW><id>4650737</id><snippet>col1, col2 = row # Use the names of what is actually there instead
row = col1, col2.encode('utf8')
writer.writerow(row) 
</snippet></ROW><ROW><id>4651152</id><snippet>MyModel._meta.get_field('foo').verbose_name
</snippet></ROW><ROW><id>4651208</id><snippet>{{ data.0 }}</snippet></ROW><ROW><id>4651320</id><snippet>signal</snippet></ROW><ROW><id>4651320</id><snippet>time.sleep(seconds)</snippet></ROW><ROW><id>4651320</id><snippet>seconds</snippet></ROW><ROW><id>4651422</id><snippet>MutableString</snippet></ROW><ROW><id>4651422</id><snippet>bytearray</snippet></ROW><ROW><id>4651422</id><snippet>str.replace</snippet></ROW><ROW><id>4651422</id><snippet>str.format</snippet></ROW><ROW><id>4651422</id><snippet>re.sub</snippet></ROW><ROW><id>4651422</id><snippet>__unicode__</snippet></ROW><ROW><id>4651422</id><snippet>__str__</snippet></ROW><ROW><id>4651422</id><snippet>encode</snippet></ROW><ROW><id>4651643</id><snippet>parseDoc</snippet></ROW><ROW><id>4651643</id><snippet>parseFile</snippet></ROW><ROW><id>4651643</id><snippet>styledoc = libxml2.parseFile("read.xml")
</snippet></ROW><ROW><id>4651893</id><snippet>start:</snippet></ROW><ROW><id>4651893</id><snippet>;</snippet></ROW><ROW><id>4651893</id><snippet>re.findall('c?[0-9]+', text)</snippet></ROW><ROW><id>4652188</id><snippet>Form</snippet></ROW><ROW><id>4652265</id><snippet>def group():
    import numpy as np
    values = np.array(np.random.randint(0,3298,size=35000000),dtype='u4')
    values.sort()
    dif = np.ones(values.shape,values.dtype)
    dif[1:] = np.diff(values)
    idx = np.where(dif&gt;0)
    vals = values[idx]
    count = np.diff(idx)
</snippet></ROW><ROW><id>4652302</id><snippet>p = Parent()
p.user_ptr = user
p.contact_means = ...
p.save()
</snippet></ROW><ROW><id>4652718</id><snippet>PyImport_AddModule</snippet></ROW><ROW><id>4652718</id><snippet>PyImport_GetModuleDict</snippet></ROW><ROW><id>4652718</id><snippet>PyErr_Occurred</snippet></ROW><ROW><id>4652718</id><snippet>def has_no_letters(text):
  return text.upper() == text.lower()
</snippet></ROW><ROW><id>4652718</id><snippet>{ 'func_name': 'has_no_letters',
  'num_args': 1,
  'kwargs': [],
  'codez': [
    ('get_attr', 'tmp_a', 'arg_0', 'upper'),  # tmp_a = arg_0.upper
    ('func_call', 'tmp_b', 'tmp_a', []),  # tmp_b = tmp_a() # tmp_b = arg_0.upper()
    ('get_attr', 'tmp_c', 'arg_0', 'lower'),
    ('func_call', 'tmp_d', 'tmp_c', []),
    ('get_global', 'tmp_e', '=='),
    ('func_call', 'tmp_f', 'tmp_e', ['tmp_b', 'tmp_d']),
    ('return', 'tmp_f'),
  ]
}
</snippet></ROW><ROW><id>4652718</id><snippet>wt(f, d(o, e), s) &lt;= th(i, s) + cr(a, p * d + o)</snippet></ROW><ROW><id>4652787</id><snippet>from lxml import etree

doc = etree.fromstring(some_xml)
nodes = doc.xpath('some_query')
for node in nodes:
    if node.text == 'smth':
        reference = node

reference.text = 'hello world'
</snippet></ROW><ROW><id>4652826</id><snippet>from java.lang import Runtime
process = Runtime.getRuntime().exec("ls -l")
output = process.getInputStream() # process' output is our input
# read output somehow, while the process is generating it
</snippet></ROW><ROW><id>4653021</id><snippet>__init__.py</snippet></ROW><ROW><id>4653021</id><snippet>import Classes.PositionWindow

p = Classes.PositionWindow.PositionWindow()

p.Center()
</snippet></ROW><ROW><id>4653458</id><snippet>X-AppEngine-TaskRetryCount</snippet></ROW><ROW><id>4653536</id><snippet>for i in range(3):
    for j in range(3):
        for k in range(3):
            # something here
            print _3x3x3[i][j][k],
    print
</snippet></ROW><ROW><id>4653549</id><snippet>&lt;job&gt;
&lt;script language="VBScript"&gt;
set WshShell = WScript.CreateObject("WScript.Shell")
CMDFile = "App\\pythonw.exe App\\gui.py"
WshShell.Run CMDFile, 1
&lt;/script&gt;
&lt;/job&gt; 
</snippet></ROW><ROW><id>4653549</id><snippet>#include &lt;windows.h&gt;
#include &lt;process.h&gt;

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, 
                   LPSTR lpCmdLine, int nCmdShow)
{
    return _spawnl(_P_NOWAIT, "App/pythonw.exe", " App/gui.py", lpCmdLine, NULL);
}
</snippet></ROW><ROW><id>4653549</id><snippet>appicon ICON "app.ico"
</snippet></ROW><ROW><id>4653549</id><snippet>"C:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat"
rc.exe app.rc
cl.exe app.c /FeApp.exe /link app.res
</snippet></ROW><ROW><id>4653569</id><snippet>import inspect

allowed_vars = set(["min_", "max_", "path", ...])
def update_globals(dic):
    caller_frame = inspect.currentframe(1)
    globals = caller_frame.f_globals
    # here, you _could_ simply do globals.update(dic) 
    # but it is  evil
    for key, value in dic.items():
        #here you shuld carefullyt verify each key, and value for not
        #not dangerous pairs, with stuff like:
        #if key not in allowed_vars:
        #    sys.stderr.write("Warning: invalid variable in configuration update\n")
        #     continue
        #if type(value) not in (string, int, float):
        #    #(issue error)
        #    continue
        globals[key] = value
</snippet></ROW><ROW><id>4653569</id><snippet>&gt;&gt;&gt; a
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'a' is not defined
&gt;&gt;&gt; update_globals({"a": 5})
&gt;&gt;&gt; a
</snippet></ROW><ROW><id>4653641</id><snippet>for k in dic.keys():
  if k.startswith('s_'):
    dic.pop(k)
</snippet></ROW><ROW><id>4653656</id><snippet>from google.appengine.ext.webapp import template
from django import template as django_template

def in_list(value, arg):
  """
  Given an item and a list, check if the item is in the list.
  Usage:
  {% if item|in_list:list %} 
      in list 
  {% else %} 
      not in list
  {% endif %}
  """
  return value in arg

register = template.create_template_register()  
ifinlist = register.filter(in_list)
</snippet></ROW><ROW><id>4653729</id><snippet> def partition_mapping(mapping, keys):
     """ Return two dicts. The first one has key, value pair for any key from the keys
         argument that is in mapping and the second one has the other keys from              
         mapping
     """
     # This could be modified to take two sequences of keys and map them into two dicts
     # optionally returning a third dict for the leftovers
     d1 = {}
     d2 = {}
     keys = set(keys)
     for key, value in mapping.iteritems():
         if key in keys:
             d1[key] = value
         else:
             d2[key] = value
     return d1, d2
</snippet></ROW><ROW><id>4653729</id><snippet>def func(**kwargs):
    kwargs1, kwargs2 = partition_mapping(kwargs, ("arg1", "arg2", "arg3"))
</snippet></ROW><ROW><id>4653729</id><snippet>def func(arg1=None, arg2=None, arg3=None, **kwargs):
    # do stuff
</snippet></ROW><ROW><id>4653863</id><snippet>import tempfile
import zipfile
import shutil
import os

def remove_from_zip(zipfname, *filenames):
    tempdir = tempfile.mkdtemp()
    try:
        tempname = os.path.join(tempdir, 'new.zip')
        with zipfile.ZipFile(zipfname, 'r') as zipread:
            with zipfile.ZipFile(tempname, 'w') as zipwrite:
                for item in zipread.infolist():
                    if item.filename not in filenames:
                        data = zipread.read(item.filename)
                        zipwrite.writestr(item, data)
        shutil.move(tempname, zipfname)
    finally:
        shutil.rmtree(tempdir)
</snippet></ROW><ROW><id>4653863</id><snippet>remove_from_zip('archive.zip', 'hello.txt')
with zipfile.ZipFile('archive.zip', 'a') as z:
    z.write('hello.txt')
</snippet></ROW><ROW><id>4653965</id><snippet>&gt;&gt;&gt; False = True
&gt;&gt;&gt; a = False
&gt;&gt;&gt; b = False
&gt;&gt;&gt; a | b
True
&gt;&gt;&gt; a
True
&gt;&gt;&gt; b
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4653965</id><snippet>print int(False)</snippet></ROW><ROW><id>4653965</id><snippet>1</snippet></ROW><ROW><id>4653965</id><snippet>&gt;&gt;&gt; False = bool(0)
&gt;&gt;&gt; a = False
&gt;&gt;&gt; b = False
&gt;&gt;&gt; a | b
False
</snippet></ROW><ROW><id>4653965</id><snippet>False</snippet></ROW><ROW><id>4653965</id><snippet>False</snippet></ROW><ROW><id>4653965</id><snippet>bool(0)</snippet></ROW><ROW><id>4653965</id><snippet>True</snippet></ROW><ROW><id>4653965</id><snippet>False</snippet></ROW><ROW><id>4654441</id><snippet>l = [0] * 100
# [0, 0, 0, 0, 0, ...]

l = ['foo'] * 100
# ['foo', 'foo', 'foo', 'foo', ...]
</snippet></ROW><ROW><id>4654441</id><snippet>l = [{} for x in range(100)]
</snippet></ROW><ROW><id>4654441</id><snippet>&lt;list&gt;*&lt;number&gt;</snippet></ROW><ROW><id>4654441</id><snippet>[{}]*100</snippet></ROW><ROW><id>4654441</id><snippet>extend()</snippet></ROW><ROW><id>4654441</id><snippet>a = [1,2,3]
b = [4,5,6]
a.extend(b)
# a is now [1,2,3,4,5,6]
</snippet></ROW><ROW><id>4654573</id><snippet>to_db</snippet></ROW><ROW><id>4654573</id><snippet>Ticker  Date    Open   High   Low    Close   Volume    AdjClose  
AA      1/5/11  16.34  16.59  16.11  16.56   48278700  16.56
</snippet></ROW><ROW><id>4654573</id><snippet>to_db</snippet></ROW><ROW><id>4654573</id><snippet>to_db = [(i['Ticker'], i['Date'], i['Open'], i['High'], i['Low'],i['Close'], i['Volume'], i['AdjClose']) for i in dr]
</snippet></ROW><ROW><id>4654699</id><snippet>__mul__</snippet></ROW><ROW><id>4654699</id><snippet>__mull__</snippet></ROW><ROW><id>4654699</id><snippet>__mull__</snippet></ROW><ROW><id>4654699</id><snippet>__mul__</snippet></ROW><ROW><id>4654956</id><snippet>RotatingFileHandler</snippet></ROW><ROW><id>4654956</id><snippet>maxBytes</snippet></ROW><ROW><id>4654956</id><snippet>doRollover()</snippet></ROW><ROW><id>4654956</id><snippet>import glob
import logging
import logging.handlers
import time
from os import path

LOG_FILENAME = 'logging_rotatingfile_example.out'

# Set up a specific logger with our desired output level
my_logger = logging.getLogger('MyLogger')
my_logger.setLevel(logging.DEBUG)

# Check if log exists and should therefore be rolled
needRoll = False
if path.isfile(LOG_FILENAME):
    needRoll = True

# Add the log message handler to the logger
handler = logging.handlers.RotatingFileHandler(
              LOG_FILENAME, backupCount=50)

my_logger.addHandler(handler)

# This is a stale log, so roll it
if needRoll:    
    # Add timestamp
    my_logger.debug('\n---------\nLog closed on %s.\n---------\n' % time.asctime())

    # Roll over on application start
    my_logger.handlers[0].doRollover()

# Add timestamp
my_logger.debug('\n---------\nLog started on %s.\n---------\n' % time.asctime())

# Log some messages
for i in range(20):
    my_logger.debug('i = %d' % i)

# See what files are created
logfiles = glob.glob('%s*' % LOG_FILENAME)

for filename in logfiles:
    print filename
</snippet></ROW><ROW><id>4654968</id><snippet>Album.objects.annotate(n_artists=Count("artists')).filter(n_artists=1).filter(artist=some_awesome_artist)
</snippet></ROW><ROW><id>4655051</id><snippet>delete</snippet></ROW><ROW><id>4655051</id><snippet>n</snippet></ROW><ROW><id>4655051</id><snippet>.next</snippet></ROW><ROW><id>4655051</id><snippet>n.next = n.next.next 
</snippet></ROW><ROW><id>4655051</id><snippet>n.next</snippet></ROW><ROW><id>4655051</id><snippet>.next</snippet></ROW><ROW><id>4655051</id><snippet>n</snippet></ROW><ROW><id>4655051</id><snippet>n.next.next</snippet></ROW><ROW><id>4655051</id><snippet>n</snippet></ROW><ROW><id>4655120</id><snippet>&gt;&gt;&gt; s = "the quick brown fox\x00jumped over the lazy\00programmer\00\00"  
&gt;&gt;&gt; filter(None, s.split('\x00'))  
['the quick brown fox', 'jumped over the lazy', 'programmer']
</snippet></ROW><ROW><id>4655225</id><snippet>    &lt;form method="POST" action=""&gt; {# doubt this easy to do in uni-form #}
        {% csrf_token %}
        &lt;table class="notice_settings"&gt;
            &lt;tr&gt;
                &lt;th&gt;{% trans "Notification Type" %}&lt;/th&gt;
                {% for header in notice_settings.column_headers %}
                    &lt;th&gt;{{ header }}&lt;/th&gt;
                {% endfor %}
            &lt;/tr&gt;
            {% for row in notice_settings.rows %}
                &lt;tr&gt;
                    &lt;td&gt;{% trans row.notice_type.display %}&lt;br/&gt;
                        &lt;span class="notice_type_description"&gt;{% trans row.notice_type.description %}&lt;/span&gt;
                    &lt;/td&gt;
                    {% for cell in row.cells %}
                        &lt;td&gt;
                            &lt;input type="checkbox" name="{{ cell.0 }}" {% if cell.1 %}checked="yes"{% endif %}/&gt;
                        &lt;/td&gt;
                    {% endfor %}
                &lt;/tr&gt;
            {% endfor %}
            &lt;tr&gt;
                &lt;td&gt;&lt;input type="submit" value="{% trans "Change" %}" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/form&gt;
</snippet></ROW><ROW><id>4655770</id><snippet>Transcription</snippet></ROW><ROW><id>4655770</id><snippet>def</snippet></ROW><ROW><id>4655770</id><snippet> def align_transcription(self,model,target=PHONE):
        pass
</snippet></ROW><ROW><id>4655770</id><snippet>PHONE</snippet></ROW><ROW><id>4655770</id><snippet>Transcription</snippet></ROW><ROW><id>4655770</id><snippet>class</snippet></ROW><ROW><id>4655770</id><snippet>class</snippet></ROW><ROW><id>4655770</id><snippet>class</snippet></ROW><ROW><id>4655770</id><snippet>type</snippet></ROW><ROW><id>4655770</id><snippet>def</snippet></ROW><ROW><id>4655770</id><snippet>class Foo(object):
    a = 1
    def foo(self):
        print self.a
</snippet></ROW><ROW><id>4655770</id><snippet>ns = {'a': 1, 'foo': foo}</snippet></ROW><ROW><id>4655770</id><snippet>Foo = type('Foo', (object,), ns)
</snippet></ROW><ROW><id>4655770</id><snippet>def foo(self):
    print self.a

Foo = type('Foo', (object,), {'a': 1, 'foo': foo})
</snippet></ROW><ROW><id>4655770</id><snippet>Foo</snippet></ROW><ROW><id>4655770</id><snippet>foo</snippet></ROW><ROW><id>4655770</id><snippet>Foo.a</snippet></ROW><ROW><id>4656228</id><snippet>tools/
    core/
        object_editor/
            # files that need to use ntlib.py
            editor.py # see example at bottom
            __init__.py
        state_editor/
            # files that need to use ntlib.py
            __init__.py
        ntlib.py
        __init__.py # core is the top level package
    LICENSE
    state_editor.py # equivalent to main.py for the state editor
    object_editor.py # equivalent to main.py for the object editor
</snippet></ROW><ROW><id>4656228</id><snippet>object_editor.py</snippet></ROW><ROW><id>4656228</id><snippet>from core.object_editor import editor
</snippet></ROW><ROW><id>4656228</id><snippet>editor.py</snippet></ROW><ROW><id>4656228</id><snippet>from .. import ntlib
</snippet></ROW><ROW><id>4656228</id><snippet>from core import ntlib
</snippet></ROW><ROW><id>4656228</id><snippet>core</snippet></ROW><ROW><id>4656228</id><snippet>ntlib</snippet></ROW><ROW><id>4656478</id><snippet>&gt;&gt;&gt; dic1 = {'a':'a','b':'c','c':'d'}
&gt;&gt;&gt; dic2 = {'b':'a','a':'c','c':'d'}
&gt;&gt;&gt; dic1.viewkeys() == dic2.viewkeys()
True
&gt;&gt;&gt; dic1.viewkeys() - dic2.viewkeys()
set([])
&gt;&gt;&gt; dic1.viewkeys() | dic2.viewkeys()
set(['a', 'c', 'b'])
</snippet></ROW><ROW><id>4656478</id><snippet>&gt;&gt;&gt; dic1 = {'a':'a','b':'c','c':'d'}
&gt;&gt;&gt; dic2 = {'b':'a','a':'c','c':'d'}
&gt;&gt;&gt; dic1.keys() == dic2.keys()
True
&gt;&gt;&gt; dic1.keys() - dic2
set()
&gt;&gt;&gt; dic1.keys() | dic2
{'a', 'c', 'b'}
</snippet></ROW><ROW><id>4656478</id><snippet>&gt;&gt;&gt; dic1 = {'a':'a','b':'c','c':'d'}
&gt;&gt;&gt; dic2 = {'b':'a','a':'c','c':'d'}
&gt;&gt;&gt; set(dic1) == set(dic2)
True
</snippet></ROW><ROW><id>4656605</id><snippet>blog_ids = [c.blog_id for c in connections if c is not None]
</snippet></ROW><ROW><id>4657548</id><snippet>ipconfig</snippet></ROW><ROW><id>4657548</id><snippet>socket.INADDR_ANY</snippet></ROW><ROW><id>4657551</id><snippet>\\&gt;</snippet></ROW><ROW><id>4657551</id><snippet>\\\&gt;</snippet></ROW><ROW><id>4658020</id><snippet>       if request.method=='POST':
            if 'add_department' in request.POST:
                cp = request.POST.copy()
                cp['department-TOTAL_FORMS'] = int(cp['department-TOTAL_FORMS'])+ 1
                new_department = AddDepartmentFormSet(cp, prefix='department', instance=provider_obj)
            elif 'submit' in request.POST:
                formset = AddDepartmentFormSet(request.POST, instance=provider_obj)
                instances = formset.save(commit=False)
                for instance in instances:
                    instance.provider = provider_obj
                    instance.save()
                return HttpResponse("Departments have been added")
        else:
            new_department = AddDepartmentFormSet(prefix='department', instance=provider_obj)
</snippet></ROW><ROW><id>4658504</id><snippet>send_mail</snippet></ROW><ROW><id>4658504</id><snippet>func = 'send_mail'
args = ('subj', 'body', 'email@box.ru', ['email1@box.ru'])
kwargs = {'fail_silently': False}

my_call = cPickle.dumps((func, args, kwargs)) 
</snippet></ROW><ROW><id>4658504</id><snippet>func, args, kwargs = cPickle.loads(my_call)

getattr(my_module, func)(*args, **kwargs)
</snippet></ROW><ROW><id>4658753</id><snippet>&gt;&gt;&gt; import getpass

&gt;&gt;&gt; getpass.getuser()
'me'
</snippet></ROW><ROW><id>4658753</id><snippet>import logging
import getpass

FORMAT = "DATE : %(asctime)-15s USER :  %(message)s FILE : %(filename)s"

logging.basicConfig(level=logging.DEBUG, 
                    format=FORMAT, 
                    filename='users.log', 
                    filemode='a')

logging.debug(getpass.getuser())
</snippet></ROW><ROW><id>4658753</id><snippet>DATE : 2011-01-11 15:06:26,465 USER : me    FILE : zzz.py
</snippet></ROW><ROW><id>4658919</id><snippet>MyCategory</snippet></ROW><ROW><id>4659190</id><snippet>PyLong</snippet></ROW><ROW><id>4659190</id><snippet>int</snippet></ROW><ROW><id>4659190</id><snippet>double</snippet></ROW><ROW><id>4659190</id><snippet>int</snippet></ROW><ROW><id>4659190</id><snippet>double</snippet></ROW><ROW><id>4659190</id><snippet>long</snippet></ROW><ROW><id>4659277</id><snippet>Meta</snippet></ROW><ROW><id>4659277</id><snippet>db_table</snippet></ROW><ROW><id>4659277</id><snippet>Meta</snippet></ROW><ROW><id>4659338</id><snippet>while True:
    file = raw_input('Enter the name of the file: ')
    try:
        text_file = open(file,'r')
        break
    except IOError:
        print 'File not found'
</snippet></ROW><ROW><id>4659539</id><snippet>the_list.sort() # sorts normally by alphabetical order
the_list.sort(key=len, reverse=True) # sorts by descending length
</snippet></ROW><ROW><id>4659539</id><snippet>the_list.sort(key=lambda item: (-len(item), item))
</snippet></ROW><ROW><id>4659539</id><snippet>cmp</snippet></ROW><ROW><id>4659539</id><snippet>key</snippet></ROW><ROW><id>4659638</id><snippet>&gt;&gt;&gt; import unidecode # to install: `pip install unidecode`
&gt;&gt;&gt; line = u"Flyttbara hyllplan anpassar förvaringen så"
&gt;&gt;&gt; unidecode.unidecode(line)
u'Flyttbara hyllplan anpassar forvaringen sa'
</snippet></ROW><ROW><id>4660281</id><snippet>DeleteValue</snippet></ROW><ROW><id>4660281</id><snippet>DeleteKey</snippet></ROW><ROW><id>4660281</id><snippet>def del_env(name):
   key = OpenKey(HKEY_CURRENT_USER, 'Environment', 0, KEY_ALL_ACCESS)
   DeleteValue(key, name) 
   CloseKey(key)
   SendMessage(
        win32con.HWND_BROADCAST, win32con.WM_SETTINGCHANGE, 0, 'Environment')
</snippet></ROW><ROW><id>4660289</id><snippet>urllib2</snippet></ROW><ROW><id>4660332</id><snippet>a = the_list
a += [0] * (-len(a) % 5)
result = [a[i:i + 5] for i in range(0, len(a), 5)]
</snippet></ROW><ROW><id>4660332</id><snippet>result = zip(*[iter(a)] * 5)
</snippet></ROW><ROW><id>4660395</id><snippet>from SimpleXMLRPCServer import SimpleXMLRPCServer, SimpleXMLRPCRequestHandler

port = 9999

def func():
    print 'Hi!'
    print x # error!
    print 'Bye!'

class Handler(SimpleXMLRPCRequestHandler):
     def _dispatch(self, method, params):
         try: 
             return self.server.funcs[method](*params)
         except:
             import traceback
             traceback.print_exc()
             raise


if __name__ == '__main__':
    server = SimpleXMLRPCServer(("localhost", port), Handler)
    server.register_function(func)
    print "Listening on port %s..." % port
    server.serve_forever()
</snippet></ROW><ROW><id>4660395</id><snippet>Listening on port 9999...
Hi!
Traceback (most recent call last):
  File "xml.py", line 13, in _dispatch
    value = self.server.funcs[method](*params)
  File "xml.py", line 7, in func
    print x # error!
NameError: global name 'x' is not defined
localhost - - [11/Jan/2011 17:13:16] "POST /RPC2 HTTP/1.0" 200 
</snippet></ROW><ROW><id>4660677</id><snippet>my_msg = "Hello world"
QtGui.QMessageBox.information(None, 'My Title', my_msg)
</snippet></ROW><ROW><id>4661089</id><snippet>str.replace()</snippet></ROW><ROW><id>4661089</id><snippet>re.sub</snippet></ROW><ROW><id>4661089</id><snippet>str.replace</snippet></ROW><ROW><id>4661089</id><snippet>re.sub</snippet></ROW><ROW><id>4661089</id><snippet>str.replace</snippet></ROW><ROW><id>4661089</id><snippet>re.sub</snippet></ROW><ROW><id>4661090</id><snippet>from PyQt4 import QtGui

class setWindowPosition:
    def __init__(self, xCoord, yCoord, windowName, parent = None):
        self.x = xCoord
        self.y = yCoord
        self.wName = windowName;

    def AdjustWindow(self):
        print self.x, self.y, self.wName //See Here
        //now use them how you want
        screen = QtGui.QDesktopWidget().screenGeometry()
        size = self.geometry()
        self.move((screen.width()-size.width())/2, (screen.height()-size.height())/2)
</snippet></ROW><ROW><id>4661090</id><snippet>QtGui.QWidget</snippet></ROW><ROW><id>4661090</id><snippet>geometry()</snippet></ROW><ROW><id>4661090</id><snippet>move()</snippet></ROW><ROW><id>4661090</id><snippet>def AdjustWindow(self):
  self.move(self.x, self.y)
</snippet></ROW><ROW><id>4661090</id><snippet>windowName</snippet></ROW><ROW><id>4661284</id><snippet>select</snippet></ROW><ROW><id>4661284</id><snippet>my_pipe = os.pipe()
...
while True:
    ready_fds = select.select(my_read_fds + [my_pipe[0]],
                              my_write_fds, my_except_fds, timeout)
    if my_pipe[0] in ready_fds[0]:
        # Add another fd to my_read_fds, etc.
        os.read(my_pipe[0], 1)
    ...

# To interrupt the current select call and add a new fd, write to the pipe:
os.write(my_pipe[1], 'x')
</snippet></ROW><ROW><id>4661286</id><snippet>request.session.set_expiry(...)</snippet></ROW><ROW><id>4661336</id><snippet>ccc = defaultdict( lambda: defaultdict( list ) )
for row in cursor.fetchall():
    country, county, city = row
    ccc[country][county].append(city)
</snippet></ROW><ROW><id>4661417</id><snippet>~/.vimrc</snippet></ROW><ROW><id>4661417</id><snippet>:syntax on</snippet></ROW><ROW><id>4661417</id><snippet>~/.vimrc</snippet></ROW><ROW><id>4661417</id><snippet>syntax on</snippet></ROW><ROW><id>4661652</id><snippet>b, g, r = im.split()
im = Image.merge("RGB", (r, g, b))
</snippet></ROW><ROW><id>4661652</id><snippet>im.split()</snippet></ROW><ROW><id>4661652</id><snippet>data = np.asarray(im)
im = Image.fromarray(np.roll(data, 1, axis=-1))
</snippet></ROW><ROW><id>4661652</id><snippet>im.split()</snippet></ROW><ROW><id>4661901</id><snippet>bob2='bob\xf0\xa4\xad\xa2'
</snippet></ROW><ROW><id>4661901</id><snippet>In [62]: print(bob2)
bob
</snippet></ROW><ROW><id>4661901</id><snippet>print(bob2)</snippet></ROW><ROW><id>4661901</id><snippet>bobð¤­¢</snippet></ROW><ROW><id>4661901</id><snippet>utf-8</snippet></ROW><ROW><id>4661901</id><snippet>cp1252</snippet></ROW><ROW><id>4661901</id><snippet>In [63]: print(repr(bob2))
'bob\xf0\xa4\xad\xa2'
</snippet></ROW><ROW><id>4661901</id><snippet>repr(obj)</snippet></ROW><ROW><id>4661901</id><snippet>obj</snippet></ROW><ROW><id>4661901</id><snippet>__repr__</snippet></ROW><ROW><id>4661901</id><snippet>A</snippet></ROW><ROW><id>4661901</id><snippet>__repr__</snippet></ROW><ROW><id>4661901</id><snippet>repr(b)</snippet></ROW><ROW><id>4661901</id><snippet>__repr__</snippet></ROW><ROW><id>4661901</id><snippet>'&lt;__main__.A instance at 0x74d78&gt;'</snippet></ROW><ROW><id>4661901</id><snippet>b</snippet></ROW><ROW><id>4661901</id><snippet>A</snippet></ROW><ROW><id>4661901</id><snippet>__main__</snippet></ROW><ROW><id>4661901</id><snippet>A</snippet></ROW><ROW><id>4661901</id><snippet>id</snippet></ROW><ROW><id>4662031</id><snippet>/Library/Frameworks/</snippet></ROW><ROW><id>4662031</id><snippet>/System/Library/Frameworks</snippet></ROW><ROW><id>4662031</id><snippet>configure</snippet></ROW><ROW><id>4662031</id><snippet>Makefile</snippet></ROW><ROW><id>4662031</id><snippet>$A</snippet></ROW><ROW><id>4662031</id><snippet>pythonw.c</snippet></ROW><ROW><id>4662031</id><snippet>man 1 python</snippet></ROW><ROW><id>4662031</id><snippet>$B</snippet></ROW><ROW><id>4662031</id><snippet>exec</snippet></ROW><ROW><id>4662031</id><snippet>$A</snippet></ROW><ROW><id>4662031</id><snippet>sys.executable</snippet></ROW><ROW><id>4662031</id><snippet>$ cd /Library/Frameworks/Python.framework/Versions/2.6
$ ./bin/python2.6 -c 'import sys;print(sys.executable)'
/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python`
</snippet></ROW><ROW><id>4662031</id><snippet>$C</snippet></ROW><ROW><id>4662031</id><snippet>otool</snippet></ROW><ROW><id>4662031</id><snippet>$B</snippet></ROW><ROW><id>4662031</id><snippet>$ cd /System/Library/Frameworks/Python.framework/Versions/2.6
$ cd Resources/Python.app/Contents/MacOS/
$ otool -L ./Python
Python:
   /System/Library/Frameworks/Python.framework/Versions/2.6/Python (compatibility version 2.6.0, current version 2.6.1)
   /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 125.2.0)
</snippet></ROW><ROW><id>4662701</id><snippet>Password = QtGui.QLineEdit(widget)
</snippet></ROW><ROW><id>4662701</id><snippet>widget</snippet></ROW><ROW><id>4662701</id><snippet>QLineEdit</snippet></ROW><ROW><id>4662701</id><snippet>widget</snippet></ROW><ROW><id>4662701</id><snippet>QLineEdit</snippet></ROW><ROW><id>4662889</id><snippet>REGEDIT4

[HKEY_LOCAL_MACHINE\SOFTWARE\Python\PythonCore\X.Y]

[HKEY_LOCAL_MACHINE\SOFTWARE\Python\PythonCore\X.Y\Help]
@=""

[HKEY_LOCAL_MACHINE\SOFTWARE\Python\PythonCore\X.Y\Help\Main Python Documentation]
@="C:\\PythonXY\\Doc\\pythonXYZ.chm"

[HKEY_LOCAL_MACHINE\SOFTWARE\Python\PythonCore\X.Y\InstallPath]
@="C:\\PythonXY\\"

[HKEY_LOCAL_MACHINE\SOFTWARE\Python\PythonCore\X.Y\InstallPath\InstallGroup]
@="Python X.Y"

[HKEY_LOCAL_MACHINE\SOFTWARE\Python\PythonCore\X.Y\Modules]

[HKEY_LOCAL_MACHINE\SOFTWARE\Python\PythonCore\X.Y\PythonPath]
@="C:\\PythonXY\\Lib;C:\\PythonXY\\DLLs"
</snippet></ROW><ROW><id>4662954</id><snippet>begin &lt;perm&gt; &lt;name&gt;
</snippet></ROW><ROW><id>4662954</id><snippet>^begin [0-7]{3} (.*)$</snippet></ROW><ROW><id>4663062</id><snippet>sum(int(tuple_list[i][0]) for i in range(3,5))
</snippet></ROW><ROW><id>4663062</id><snippet>range(x, y, step)</snippet></ROW><ROW><id>4663062</id><snippet>sum(float(close[4]) for close in tickers[30:40])
</snippet></ROW><ROW><id>4663232</id><snippet>Dialog.run()</snippet></ROW><ROW><id>4663232</id><snippet>hide()</snippet></ROW><ROW><id>4663232</id><snippet>run()</snippet></ROW><ROW><id>4663232</id><snippet>run()</snippet></ROW><ROW><id>4663232</id><snippet>show()</snippet></ROW><ROW><id>4663232</id><snippet>run()</snippet></ROW><ROW><id>4663232</id><snippet>run()</snippet></ROW><ROW><id>4663232</id><snippet>delete-event</snippet></ROW><ROW><id>4663232</id><snippet>run()</snippet></ROW><ROW><id>4663232</id><snippet>run()</snippet></ROW><ROW><id>4663232</id><snippet>run()</snippet></ROW><ROW><id>4663232</id><snippet>run()</snippet></ROW><ROW><id>4663232</id><snippet>hide()</snippet></ROW><ROW><id>4663232</id><snippet>delete-event</snippet></ROW><ROW><id>4663342</id><snippet>s = raw_input()
numbers = map(int, s.split())
</snippet></ROW><ROW><id>4663396</id><snippet>m.col_age_name = ['c:blue, a:22', 'c:blue, n:Tom', \
                  'a:22, n:Tom', 'a:22, c:blue, n:Tom']
</snippet></ROW><ROW><id>4663396</id><snippet>q.filter('col_age_name IN', ['c:blue, a:22', 'c:blue, n:Tom', 'a:22, n:Tom'])
</snippet></ROW><ROW><id>4663566</id><snippet>def transform(li):
    new_li = []
    prev_tag = None
    for word, tag in li:
        if word.endswith('ing') and prev_tag == 'NN':
            tag = 'VBG'
        new_li += [(word, tag)]
        prev_tag = tag
    return new_li
</snippet></ROW><ROW><id>4663566</id><snippet>def transform(li):
    for i in xrange(len(li)):
        if li[i][0].endswith('ing') and i &gt; 0 and li[i-1][1]:
            li[i] = (li[i], 'VBG')
</snippet></ROW><ROW><id>4663566</id><snippet>list</snippet></ROW><ROW><id>4663566</id><snippet>li</snippet></ROW><ROW><id>4663566</id><snippet>list</snippet></ROW><ROW><id>4663916</id><snippet>def value_from_datadict(self, data, files, name):
    datelist = [widget.value_from_datadict(data, files, name + '_%s' % i) \ 
                                      for i, widget in enumerate(self.widgets)]
    try:
        D = date(day=int(datelist[0]), month=int(datelist[1]), \
             year=int(datelist[2]))
        return str(D)
    except ValueError:
        return ""
</snippet></ROW><ROW><id>4663916</id><snippet>value_from_datadict</snippet></ROW><ROW><id>4663916</id><snippet>forminstance.is_valid()
</snippet></ROW><ROW><id>4664021</id><snippet>$ sudo port selfupdate
</snippet></ROW><ROW><id>4664021</id><snippet>$ sudo port install py26-gst-python
</snippet></ROW><ROW><id>4664021</id><snippet>$ sudo port install py27-gst-python
</snippet></ROW><ROW><id>4664021</id><snippet>Python</snippet></ROW><ROW><id>4664021</id><snippet>Gnome</snippet></ROW><ROW><id>4664151</id><snippet>\xc3\xa6</snippet></ROW><ROW><id>4664151</id><snippet>'æ'</snippet></ROW><ROW><id>4664151</id><snippet>'Ã¦'</snippet></ROW><ROW><id>4664151</id><snippet>str</snippet></ROW><ROW><id>4664151</id><snippet>unicode</snippet></ROW><ROW><id>4664151</id><snippet>"&lt;"</snippet></ROW><ROW><id>4664151</id><snippet>"&lt;"</snippet></ROW><ROW><id>4664151</id><snippet>"&amp;#256"</snippet></ROW><ROW><id>4664151</id><snippet>"\xc4\x80"</snippet></ROW><ROW><id>4664182</id><snippet>C:\Python31\Lib\site-packages\ystockquote.py</snippet></ROW><ROW><id>4664182</id><snippet>import ystockquote</snippet></ROW><ROW><id>4664513</id><snippet>file.read</snippet></ROW><ROW><id>4664513</id><snippet>print</snippet></ROW><ROW><id>4664513</id><snippet>binascii.hexlify</snippet></ROW><ROW><id>4664513</id><snippet>
f = open("test.jpg", "rb")
ima = f.read(16)

print "%s" % (binascii.hexlify(ima))
</snippet></ROW><ROW><id>4664524</id><snippet>p.mean(copy[:,1])</snippet></ROW><ROW><id>4664524</id><snippet>mean()</snippet></ROW><ROW><id>4664524</id><snippet>copy</snippet></ROW><ROW><id>4664535</id><snippet>&gt;&gt;&gt; from jinja2 import Template
&gt;&gt;&gt; template = Template('Hello {{ name }}!')
</snippet></ROW><ROW><id>4664535</id><snippet>&gt;&gt;&gt; template.render(name='John Doe')
u'Hello John Doe!'
</snippet></ROW><ROW><id>4664535</id><snippet>from jinja2 import Environment, PackageLoader
env = Environment(loader=PackageLoader('yourapplication', 'templates'))
</snippet></ROW><ROW><id>4664535</id><snippet>templates</snippet></ROW><ROW><id>4664535</id><snippet>yourapplication</snippet></ROW><ROW><id>4664535</id><snippet>template = env.get_template('mytemplate.html')
print template.render(the='variables', go='here')
</snippet></ROW><ROW><id>4664535</id><snippet>render_template</snippet></ROW><ROW><id>4664535</id><snippet>templates</snippet></ROW><ROW><id>4664535</id><snippet>from flask import render_template

@app.route('/hello/')
def hello(name=None):
    return render_template('hello.html', name=name)
</snippet></ROW><ROW><id>4664535</id><snippet>render_template</snippet></ROW><ROW><id>4664598</id><snippet>var red = {color: 'red'};
console.log(red);
</snippet></ROW><ROW><id>4664685</id><snippet>f( a=1, b=2, c=3, d=4 )
</snippet></ROW><ROW><id>4664889</id><snippet>&gt;&gt;&gt; [m.start() for m in re.finditer('test', 'test test test test')]
[0, 5, 10, 15]
</snippet></ROW><ROW><id>4664889</id><snippet>&gt;&gt;&gt; [m.start() for m in re.finditer('(?=tt)', 'ttt')]
[0, 1]
</snippet></ROW><ROW><id>4664889</id><snippet>&gt;&gt;&gt; search = 'tt'
&gt;&gt;&gt; [m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]
[1]
</snippet></ROW><ROW><id>4664889</id><snippet>re.finditer</snippet></ROW><ROW><id>4664889</id><snippet>[]</snippet></ROW><ROW><id>4664889</id><snippet>()</snippet></ROW><ROW><id>4664993</id><snippet>import json

json_text = """
{
    "name": "Joe Smith",
    "link": "http://www.facebook.com/joey",
    "location": {
        "id": "105590706140862",
        "name": "Fairfield, Iowa"
    }
}"""

obj = json.loads(json_text)
print obj["location"]["name"]
</snippet></ROW><ROW><id>4665457</id><snippet>from django.core import serializers
data = serializers.serialize('json', SomeModel.objects.all())

# it's pretty useful and quick.
data = serializers.serialize('json', SomeModel.objects.all(), fields=('foo','bar'))
</snippet></ROW><ROW><id>4665480</id><snippet>class BigDictLookup(object):
    def __init__(self):
        self.bigdict = build_big_dict() # or some other means of generating it
    def lookup(self):
        # do something with self.bigdict

def main():
    my_bigdict = BigDictLookup()
    # ...
    my_bigdict.lookup()
    # ...
    my_bigdict.lookup()
</snippet></ROW><ROW><id>4665534</id><snippet># example in the docs
Entry.objects.order_by('?')[:20]
</snippet></ROW><ROW><id>4665670</id><snippet>odbcinst.ini</snippet></ROW><ROW><id>4665670</id><snippet>odbc.ini</snippet></ROW><ROW><id>4665670</id><snippet>odbc.ini</snippet></ROW><ROW><id>4665670</id><snippet>import _mysql

conn = _mysql.connect(host="localhost", user="rooter", 
                      password="sshh", db="mysql") 
conn.query("SET GLOBAL event_scheduler = ON")
conn.close() 
</snippet></ROW><ROW><id>4665916</id><snippet>VERSIONER_PYTHON_PREFER_32_BIT</snippet></ROW><ROW><id>4665916</id><snippet>man 1 python</snippet></ROW><ROW><id>4665916</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>4665916</id><snippet>default</snippet></ROW><ROW><id>4665916</id><snippet>arch</snippet></ROW><ROW><id>4665916</id><snippet>/usr/bin/python2.6</snippet></ROW><ROW><id>4665916</id><snippet>arch -i386</snippet></ROW><ROW><id>4666136</id><snippet>import urllib2
import base64
theurl = 'http://abc.com/A.xml'

username='AAA'
password='BBB'

req = urllib2.Request(theurl)


base64string = base64.encodestring(
            '%s:%s' % (username, password))[:-1]
authheader =  "Basic %s" % base64string
req.add_header("Authorization", authheader)
try:
    handle = urllib2.urlopen(req)
except IOError, e:
    print "It looks like the username or password is wrong."
xml = handle.read()
inputXml  = etree.fromstring(xml)
</snippet></ROW><ROW><id>4666401</id><snippet>wordlist = wl.readlines()
</snippet></ROW><ROW><id>4666401</id><snippet>['eye\n','bye\n', 'cyc\n']
</snippet></ROW><ROW><id>4666401</id><snippet>['eye','bye', 'cyc']
</snippet></ROW><ROW><id>4666401</id><snippet>strip</snippet></ROW><ROW><id>4666401</id><snippet>wordlist = [line.strip() for line in open('/usr/share/dict/words')]
</snippet></ROW><ROW><id>4666579</id><snippet>r'\s+(\w+)(\s*,\s*\w+)*\s*=\s*(.*?)(\s*,\s*.*?)*'
</snippet></ROW><ROW><id>4667014</id><snippet>import re

text = 'gfgfdAAA1234ZZZuijjk'

m = re.search('AAA(.+?)ZZZ', text)
if m:
    found = m.group(1)

# found: 1234
</snippet></ROW><ROW><id>4667014</id><snippet>import re

text = 'gfgfdAAA1234ZZZuijjk'

try:
    found = re.search('AAA(.+?)ZZZ', text).group(1)
except AttributeError:
    # AAA, ZZZ not found in the original string
    found = '' # apply your error handling

# found: 1234
</snippet></ROW><ROW><id>4667162</id><snippet>DBT_DEVICEARRIVAL</snippet></ROW><ROW><id>4667162</id><snippet>import os.path
for letter in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
    drive_mounted[letter] = os.path.exists(letter + ":")
</snippet></ROW><ROW><id>4667332</id><snippet>str = 'URL: http://www.cnn.com Cookie: xxx; yyy'

match = re.search(r'URL: (\S+)( Cookie: (.*))?', str)
print match.group(1)
print match.group(3)

&gt;&gt;&gt; http://www.cnn.com
&gt;&gt;&gt; xxx; yyy
</snippet></ROW><ROW><id>4667547</id><snippet>(define main
  (lambda ()
    (define i 0)
    (define increment-i
      (lambda ()
        (set! i (+ i 1))))
    (increment-i)
    i))

(main)
</snippet></ROW><ROW><id>4667547</id><snippet>increment-i</snippet></ROW><ROW><id>4667547</id><snippet>main</snippet></ROW><ROW><id>4667547</id><snippet>i</snippet></ROW><ROW><id>4667547</id><snippet>main</snippet></ROW><ROW><id>4667547</id><snippet>0</snippet></ROW><ROW><id>4667547</id><snippet>1</snippet></ROW><ROW><id>4667642</id><snippet>import sys

MAX_NUMLINES = 7
counter = 0

class TooMuchLine(Exception):
    pass

def tracer(frame, event, arg):
    global counter
    if event == "line":
        counter += 1
        print "counter", counter
        if counter &gt; MAX_NUMLINES:
             raise TooMuchLine()

    return tracer

def badfunc():
    while True:
      import time
      time.sleep(1)


sys.settrace(tracer)

print 'start'

try:
   badfunc()
except TooMuchLine:
   print 'stopped'

print 'done'
</snippet></ROW><ROW><id>4667642</id><snippet>start
counter 1
counter 2
counter 3
counter 4
counter 5
counter 6
counter 7
counter 8
stopped
done
</snippet></ROW><ROW><id>4667940</id><snippet>csv</snippet></ROW><ROW><id>4667940</id><snippet>urllib2</snippet></ROW><ROW><id>4668265</id><snippet>import wx

class MainWindow(wx.Frame):
  def __init__(self,parent,title):
    wx.Frame.__init__(self,parent,title=title,size=(200,-1))
    self.sizer = wx.BoxSizer(wx.HORIZONTAL)
    self.buttons = [
      wx.Button(self,-1,"Button &amp;One"),
      wx.Button(self,-1,"Button &amp;&amp;Two"),
    ]
    for btn in self.buttons:
      self.sizer.Add(btn,1,wx.EXPAND)
    self.SetSizer(self.sizer)
    self.SetAutoLayout(1)
    self.sizer.Fit(self)
    self.Show()

app = wx.App(False)
frame = MainWindow(None,"Hello Ampersand")
app.MainLoop()
</snippet></ROW><ROW><id>4668347</id><snippet>GetSize</snippet></ROW><ROW><id>4668347</id><snippet>__init__()</snippet></ROW><ROW><id>4668663</id><snippet>collapse.py sometweetfile | filter.py | user_id.py | user_split.py -d some_directory
</snippet></ROW><ROW><id>4668663</id><snippet>import sys
with open("source","r") as theFile:
    tweet = {}
    for line in theFile:
        rec_type, content = line.split('\t')
        if rec_type in tweet:
            t, u, w = tweet.get('T',''), tweet.get('U',''), tweet.get('W','')
            result=  "{0}\t{1}\t{2}".format( t, u, w )
            sys.stdout.write( result )
            tweet= {}
        tweet[rec_type]= content
    t, u, w = tweet.get('T',''), tweet.get('U',''), tweet.get('W','')
    result=  "{0}\t{1}\t{2}".format( t, u, w )
    sys.stdout.write( result )
</snippet></ROW><ROW><id>4668663</id><snippet>import sys
for tweet in sys.stdin:
    t, u, w = tweet.split('\t')
    if 'No Post Title' in t:
        continue
    sys.stdout.write( tweet )
</snippet></ROW><ROW><id>4668663</id><snippet>import sys
import urllib
for tweet in sys.stdin:
    t, u, w = tweet.split('\t')
    path=urlparse(w).path.strip('/')
    result= "{0}\t{1}\t{2}\t{3}".format( t, u, w, path )
    sys.stdout.write( result )
</snippet></ROW><ROW><id>4668663</id><snippet>users = {}
for tweet in sys.stdin:
    t, u, w, user = tweet.split('\t')
    if user not in users:
        # May run afoul of open file limits...
        users[user]= open(some_directory+user,"w")
    users[user].write( tweet )
    users[user].flush( tweet )
for u in users:
    users[u].close()
</snippet></ROW><ROW><id>4668663</id><snippet>    if user not in users:
        # Only keep a limited number of files open
        if len(users) &gt; 64: # or whatever your OS limit is.
            lru, aFile, u = min( users.values() )
            aFile.close()
            users.pop(u)
        users[user]= [ tolu, open(some_directory+user,"w"), user ]
    tolu += 1
    users[user][1].write( tweet )
    users[user][1].flush() # may not be necessary
    users[user][0]= tolu
</snippet></ROW><ROW><id>4669093</id><snippet>starnames = [ n.username+"*" for n in results]
</snippet></ROW><ROW><id>4669275</id><snippet>print</snippet></ROW><ROW><id>4669275</id><snippet>,</snippet></ROW><ROW><id>4669275</id><snippet>print "Line 1 is",
print "big"
</snippet></ROW><ROW><id>4669275</id><snippet>,</snippet></ROW><ROW><id>4669275</id><snippet>print</snippet></ROW><ROW><id>4669275</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>4669720</id><snippet>import cPickle

class MemoizeMutable:
    def __init__(self, fn):
        self.fn = fn
        self.memo = {}
    def __call__(self, *args, **kwds):
        import cPickle
        str = cPickle.dumps(args, 1)+cPickle.dumps(kwds, 1)
        if not self.memo.has_key(str): 
            print "miss"  # DEBUG INFO
            self.memo[str] = self.fn(*args, **kwds)
        else:
            print "hit"  # DEBUG INFO

        return self.memo[str]
</snippet></ROW><ROW><id>4669720</id><snippet>_level = MemoizeMutable(_level)

equirements = {'a': [],
               'b': [],
               'c': ['a'],
               'd': ['a','b'],
               'e': ['c','d'],
               'f': ['e']
                 }

print uses_hierarchy(equirements)
</snippet></ROW><ROW><id>4669720</id><snippet>miss
miss
hit
miss
miss
hit
miss
hit
hit
hit
miss
hit
{0: ['a', 'b'], 1: ['c', 'd'], 2: ['e'], 3: ['f']}
</snippet></ROW><ROW><id>4669802</id><snippet>i=10
sys.stdout.write("Value is %s" % i)
</snippet></ROW><ROW><id>4669802</id><snippet>%</snippet></ROW><ROW><id>4669802</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>4669802</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>4669982</id><snippet>kill -0 PID</snippet></ROW><ROW><id>4669982</id><snippet>os.kill</snippet></ROW><ROW><id>4670697</id><snippet>func("arg", "arg2", **({"arg3": "some value"} if condition == True else {}))
</snippet></ROW><ROW><id>4670697</id><snippet>func("arg", "arg2", *(("some value",) if condition == True else ()))
</snippet></ROW><ROW><id>4670697</id><snippet>if condition:
   arg3 = "some value",
else:
   arg3 = ()
func("arg", "arg2", *arg3)
</snippet></ROW><ROW><id>4671037</id><snippet>"".join(some_string_array)
</snippet></ROW><ROW><id>4671957</id><snippet>ffmpeg</snippet></ROW><ROW><id>4671957</id><snippet>subprocess</snippet></ROW><ROW><id>4671957</id><snippet>subprocess</snippet></ROW><ROW><id>4671957</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; import shlex                          # to split the command that follows
&gt;&gt;&gt; command = 'ffmpeg -i sample.avi'      # your command goes here
&gt;&gt;&gt; subprocess.call(shlex.split(command))
</snippet></ROW><ROW><id>4671957</id><snippet>handbrakecli</snippet></ROW><ROW><id>4672015</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111)
im = ax.imshow(np.random.random((27,27)), interpolation='nearest')

for i in range(28):
    x, y =  ax.transData.transform_point([i,i])
    print '%i, %i' % (x, fig.bbox.height - y)

fig.savefig('foo.png', dpi=fig.dpi)
</snippet></ROW><ROW><id>4672015</id><snippet>89, 55
107, 69
125, 83
...
548, 410
566, 424
585, 439
</snippet></ROW><ROW><id>4672015</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111)
im = ax.imshow(np.random.random((27,27)), interpolation='nearest')

fig.canvas.draw()

for i in range(28):
    x, y =  ax.transData.transform_point([i,i])
    print '%i, %i' % (x, fig.bbox.height - y)

fig.savefig('foo.png', dpi=fig.dpi)
</snippet></ROW><ROW><id>4672015</id><snippet>&lt;-0.5, -0.5&gt;</snippet></ROW><ROW><id>4672015</id><snippet>&lt;0, 0&gt;</snippet></ROW><ROW><id>4672015</id><snippet>&lt;0, 0&gt;</snippet></ROW><ROW><id>4672015</id><snippet>143, 55</snippet></ROW><ROW><id>4672015</id><snippet>135, 48</snippet></ROW><ROW><id>4672015</id><snippet>143, 55
157, 69
171, 83
...
498, 410
512, 424
527, 439
</snippet></ROW><ROW><id>4672015</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def print_pixel_coords(event):
    fig = event.canvas.figure
    ax = fig.axes[0] # I'm assuming there's only one subplot here...
    for i in range(28):
        x, y = ax.transData.transform_point([i,i])
        print '%i, %i' % (x, fig.bbox.height - y)

fig = plt.figure()
ax = fig.add_subplot(111)
im = ax.imshow(np.random.random((27,27)), interpolation='nearest')

fig.canvas.mpl_connect('draw_event', print_pixel_coords)

fig.savefig('foo.png', dpi=fig.dpi)
</snippet></ROW><ROW><id>4672015</id><snippet>143, 55
157, 69
171, 83
...
498, 410
512, 424
527, 439
</snippet></ROW><ROW><id>4672015</id><snippet>fig.savefig</snippet></ROW><ROW><id>4672015</id><snippet>fig</snippet></ROW><ROW><id>4672015</id><snippet>fig.savefig('foo.png')</snippet></ROW><ROW><id>4672015</id><snippet>fig.savefig('foo.png', dpi=whatever)</snippet></ROW><ROW><id>4672015</id><snippet>fig.dpi</snippet></ROW><ROW><id>4672574</id><snippet>SomeModel.objects.filter( column=value, column__contains=value )

SomeModel.objects.filter( **{'column':value, 'column__contains':value} )
</snippet></ROW><ROW><id>4672602</id><snippet>o = urllib2.build_opener(urllib2.HTTPCookieProcessor())
urllib2.install_opener(o)

file = open('C:\Users\Owner\Desktop\\test1.txt')
for line in file:    
    f = o.open('http://www.test.com/?userid=' + line.rstrip())
    f.close()
</snippet></ROW><ROW><id>4672702</id><snippet>sudo apt-get install python-dev
</snippet></ROW><ROW><id>4672735</id><snippet>def matchIt(needle, haystack):
    """
    @param needle:   string, text to seek
    @param haystack: string, text to search in

    Return number of times needle is found in haystack,
        allowing overlapping instances.

    Example: matchIt('abab','ababababab') -&gt; 4
    """
    lastSeenAt = -1
    timesSeen = 0
    while True:
        nextSeen = haystack.find(needle, lastSeenAt+1)
        if nextSeen==-1:
            return timesSeen
        else:
            lastSeenAt = nextSeen
            timesSeen += 1
</snippet></ROW><ROW><id>4672735</id><snippet>import itertools
class FindableList(list):
    def find(self, sub, start=None, end=None):
        """
        @param sub: list, pattern to look for in self

        @param start: int, first possible start-of-list
            If not specified, start at first item

        @param: end: int, last+1 possible start-of-list
            If not specified, end such that entire self is searched

        Returns;
            Starting offset if a match is found, else -1
        """
        if start is None or start &lt; 0:
            start = 0

        # N.B. If end is allowed to be too high,
        # zip() will silently truncate the list comparison
        # and you will probably get extra spurious matches.
        lastEnd = len(self) - len(sub) + 1
        if end is None or end &gt; lastEnd:
            end = lastEnd

        rng = xrange if xrange else range
        iz  = itertools.izip
        isl = itertools.islice

        for pos in rng(start, end):
            if all(a==b for a,b in iz(sub, isl(self, pos, end))):
                return pos

        # no match found
        return -1
</snippet></ROW><ROW><id>4672735</id><snippet>matchIt([1,2,1,2], FindableList([1,2,1,2,1,2,1,2,1,2])) -&gt; 4
</snippet></ROW><ROW><id>4672735</id><snippet># Generate a list
randIn = lambda x: int(x*random.random())
myString =[randIn(2) for i in range(10000)]

pattern = [1,0,0]
result = matchIt(pattern, myString)

print("The sample had {0} matches and its size was {1}.\n".format(result, len(myString)))
</snippet></ROW><ROW><id>4672855</id><snippet>for row in range(model.rowCount()):
    for col in range(model.columnCount()):
        value = model.index( row, col, QModelIndex() ).data( Qt.DisplayRole ).toString()
        #write v, add separator...
    #finish row...
</snippet></ROW><ROW><id>4672930</id><snippet>&gt;&gt;&gt; cpv = re.compile(r'([0-9]+[-\. ]?[0-9])')
&gt;&gt;&gt; print cpv.findall('foo 30124120-1 bar 21966823.1 baz')
['30124120-1', '21966823.1']
</snippet></ROW><ROW><id>4673103</id><snippet>glDrawElements</snippet></ROW><ROW><id>4673257</id><snippet>from twisted.internet.protocol import DatagramProtocol
from twisted.internet import reactor

class Echo(DatagramProtocol):

    def datagramReceived(self, data, (host, port)):
        print "received %r from %s:%d" % (data, host, port)
        self.transport.write(data, (host, port))

reactor.listenUDP(9999, Echo())
reactor.run()
</snippet></ROW><ROW><id>4673420</id><snippet>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;
    &lt;noInheritable/&gt;
    &lt;assemblyIdentity
        type="win32"
        name="Microsoft.VC90.CRT"
        version="9.0.21022.8"
        processorArchitecture="x86"
        publicKeyToken="1fc8b3b9a1e18e3b"
    /&gt;
    &lt;file name="msvcr90.dll" /&gt;
    &lt;file name="msvcp90.dll" /&gt;
    &lt;file name="msvcm90.dll" /&gt;
&lt;/assembly&gt;
</snippet></ROW><ROW><id>4673562</id><snippet>-s</snippet></ROW><ROW><id>4673562</id><snippet>python pytest.py -s pyt.py</snippet></ROW><ROW><id>4673562</id><snippet>-s</snippet></ROW><ROW><id>4673562</id><snippet>args</snippet></ROW><ROW><id>4673562</id><snippet>main</snippet></ROW><ROW><id>4673562</id><snippet> pytest.main(args=['-s', os.path.abspath(__file__)])
</snippet></ROW><ROW><id>4674061</id><snippet>set</snippet></ROW><ROW><id>4674061</id><snippet>&gt;&gt;&gt; first = [1, 2, 3, 4]
&gt;&gt;&gt; second = [3, 2, 5, 6, 7]
&gt;&gt;&gt; third = list(set(first) | set(second))      # '|' is union
&gt;&gt;&gt; third
[1, 2, 3, 4, 5, 6, 7]
</snippet></ROW><ROW><id>4674277</id><snippet>&gt;&gt;&gt; def foo():
...     """
...     extending one list by another end then remove duplicates by making set
...     """
...     l1 = range(200)
...     l2 = range(150, 250)
...     l1.extend(l2)
...     set(l1)
... 
&gt;&gt;&gt; def bar():
...     """
...     checking if element is on one list end adding it only if not
...     """
...     l1 = range(200)
...     l2 = range(150, 250)
...     for elem in l2:
...             if elem not in l1:
...                     l1.append(elem)
... 
&gt;&gt;&gt; def baz():
...     """
...     making sets from both lists and then union from them
...     """
...     l1 = range(200)
...     l2 = range(150, 250)
...     set(l1) | set(l2)
... 
&gt;&gt;&gt; from timeit import Timer
&gt;&gt;&gt; Timer(foo).timeit(10000)
0.265153169631958
&gt;&gt;&gt; Timer(bar).timeit(10000)
7.921358108520508
&gt;&gt;&gt; Timer(baz).timeit(10000)
0.3845551013946533
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4674509</id><snippet>authHash.hexdigest()
</snippet></ROW><ROW><id>4674509</id><snippet>base64.b64encode(authHash.digest())
</snippet></ROW><ROW><id>4674782</id><snippet>def CircleAdd(request):

    form = CircleAddForm(request.POST)

    if form.is_valid():

        Circle = form.save(commit=False)
        Circle.Author = request.user
        Circle = Circle.save()
</snippet></ROW><ROW><id>4674782</id><snippet>class CircleAddForm(ModelForm):
    class Meta:
        model = Circle
</snippet></ROW><ROW><id>4674931</id><snippet>&gt;&gt;&gt; def testFunc(arg1, arg2, arg3, additional='test'):
...     print arg1
... 
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getargspec(testFunc)
ArgSpec(args=['arg1', 'arg2', 'arg3', 'additional'], varargs=None, keywords=None, defaults=('test',))
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4675080</id><snippet>&gt;&gt;&gt; hex(int(math.modf(math.sqrt(2))[0]*(1&lt;&lt;32)))
'0x6a09e667'
</snippet></ROW><ROW><id>4675148</id><snippet>for i in range(start, end):
</snippet></ROW><ROW><id>4675148</id><snippet>i</snippet></ROW><ROW><id>4675148</id><snippet>start</snippet></ROW><ROW><id>4675148</id><snippet>start</snippet></ROW><ROW><id>4675148</id><snippet>r'C:\Users\Owner\Desktop\test'</snippet></ROW><ROW><id>4675148</id><snippet>str.format</snippet></ROW><ROW><id>4675148</id><snippet>xrange</snippet></ROW><ROW><id>4675148</id><snippet>range</snippet></ROW><ROW><id>4675344</id><snippet>pip</snippet></ROW><ROW><id>4675383</id><snippet>numpy.array([[1,2], [2, 3, 4]])
</snippet></ROW><ROW><id>4675383</id><snippet>numpy.array([[1,2], [2, [3, 4]]])
</snippet></ROW><ROW><id>4675383</id><snippet>UnFilteredDuringExSummaryOfMeansArray</snippet></ROW><ROW><id>4675383</id><snippet>float</snippet></ROW><ROW><id>4675383</id><snippet>numpy.array([1.2, "abc"], dtype=float)
</snippet></ROW><ROW><id>4675383</id><snippet>object</snippet></ROW><ROW><id>4675383</id><snippet>numpy.array([1.2, "abc"], dtype=object)
</snippet></ROW><ROW><id>4675453</id><snippet>class HandlerFinder(object):
    """Searches for handler implementations across multiple objects.
    """
    # See &lt;http://stackoverflow.com/questions/4637792&gt; for why this is
    # necessary.

    def __init__(self, backing_objects):
        self.backing_objects = backing_objects

    def __getattr__(self, name):
        for o in self.backing_objects:
            if hasattr(o, name):
                return getattr(o, name)
        else:
            raise AttributeError("%r not found on any of %r"
                % (name, self.backing_objects))
</snippet></ROW><ROW><id>4675518</id><snippet>from django.forms import Form, fields
def UploadForm(Form):
 someField = fields.CharField()
 uploadedFile.name = fields.CharField()
</snippet></ROW><ROW><id>4675518</id><snippet>def UploadForm(Form):
 someField = fields.CharField()
 def __init__(self, *args, **kwargs):
  #call our superclasse's initializer
  super(UploadForm,self).__init__(*args,**kwargs)
  #define other fields dinamically:
  self.fields["uploadedFile.name"]=fields.CharField()
</snippet></ROW><ROW><id>4675518</id><snippet>if request.method == "POST":
 theForm = UploadForm(request.POST)
 if theForm.is_valid():
  theUploadedFileName=theForm.cleaned_data["uploadedFile.name"]
</snippet></ROW><ROW><id>4675585</id><snippet>import inspect
if inspect.isclass(X):
   X.f = staticmethod(f)
else:
   X.f = f
</snippet></ROW><ROW><id>4675585</id><snippet>self</snippet></ROW><ROW><id>4675585</id><snippet>X.__dict__['f']
&lt;function f at 0x023A52F0&gt;
</snippet></ROW><ROW><id>4675585</id><snippet>X.f
&lt;unbound method X.f&gt;
X.f.im_func
&lt;function f at 0x023A52F0&gt;
</snippet></ROW><ROW><id>4675596</id><snippet>import cPickle
class MyModel(models.Model):
    cpickled_values = models.TextField()

    def get_values(self):
        return cPickle.loads(str(self.cpickled_values))

    def set_values(self, value):
        self.cpickled_value = cPickle.dumps(values)

    values = property(get_values, set_values)
</snippet></ROW><ROW><id>4675596</id><snippet>obj.values = {'item1': data1}</snippet></ROW><ROW><id>4675744</id><snippet>sys.stdout</snippet></ROW><ROW><id>4675744</id><snippet>import sys
sys.stdout = open('file', 'w')
print 'test'
</snippet></ROW><ROW><id>4675744</id><snippet>$ python foo.py &gt; file
</snippet></ROW><ROW><id>4675929</id><snippet>import itertools

lst = [1,2,3,4]
lst2 = ['one','two','three','four','five']

print dict(itertools.izip_longest(lst2, lst, fillvalue=None))
# {'five': None, 'four': 4, 'one': 1, 'three': 3, 'two': 2}
</snippet></ROW><ROW><id>4675944</id><snippet>Accept-Encoding</snippet></ROW><ROW><id>4675944</id><snippet>gzip</snippet></ROW><ROW><id>4675944</id><snippet>    pic = download("http://media2.ct.yelpcdn.com/photo/2MdauidaMUazuew2h0pdgQ/l", g=True)
    s = getSize(pic)
</snippet></ROW><ROW><id>4675944</id><snippet>'Accept-Encoding'</snippet></ROW><ROW><id>4675944</id><snippet>'gzip'</snippet></ROW><ROW><id>4675944</id><snippet>'image.*'</snippet></ROW><ROW><id>4675944</id><snippet>    ree.add_header('User-Agent',random.choice(agents))
    ree.add_header('Accept-Encoding', 'image.*')
</snippet></ROW><ROW><id>4675944</id><snippet>gzip</snippet></ROW><ROW><id>4675944</id><snippet>    try:
        compressedstream = StringIO(h)
        gzipper = gzip.GzipFile(fileobj=compressedstream)
        data = gzipper.read()
        return data
    except IOError: # not gzip
        return h
</snippet></ROW><ROW><id>4676227</id><snippet>pygame</snippet></ROW><ROW><id>4676264</id><snippet>Content-Encoding</snippet></ROW><ROW><id>4676264</id><snippet>import urllib2
import socket
import random
import StringIO
import gzip

def download(source_url):
    try:
        socket.setdefaulttimeout(10)
        agents = ['Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)','Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.1)','Microsoft Internet Explorer/4.0b1 (Windows 95)','Opera/8.00 (Windows NT 5.1; U; en)']
        ree = urllib2.Request(source_url)
        ree.add_header('User-Agent',random.choice(agents))
        ree.add_header('Accept-encoding', 'gzip')
        opener = urllib2.build_opener()
        response = opener.open(ree)
        encoding=response.headers.getheader('Content-Encoding')
        content = response.read()
        if encoding and 'gzip' in encoding:
            compressedstream = StringIO.StringIO(content)
            gzipper = gzip.GzipFile(fileobj=compressedstream)
            data = gzipper.read()
            return data
        else:
            return content
    except urllib2.URLError as e:
        return ""

data=download('http://api.stackoverflow.com/1.0/questions/3708418?type=jsontext')
print(data)
</snippet></ROW><ROW><id>4676264</id><snippet>try</snippet></ROW><ROW><id>4676264</id><snippet>def download(source_url):
    try:
        socket.setdefaulttimeout(10)
        agents = ['Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)','Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.1)','Microsoft Internet Explorer/4.0b1 (Windows 95)','Opera/8.00 (Windows NT 5.1; U; en)']
        ree = urllib2.Request(source_url)
        ree.add_header('User-Agent',random.choice(agents))
        ree.add_header('Accept-encoding', 'gzip')
        opener = urllib2.build_opener()
        response = opener.open(ree)
        content = response.read()
        compressedstream = StringIO.StringIO(content)
        gzipper = gzip.GzipFile(fileobj=compressedstream)
        try:
            data = gzipper.read()
        except IOError:
            data = content
        return data        
    except urllib2.URLError as e:
        return ""
</snippet></ROW><ROW><id>4676593</id><snippet>def start(seconds):
    import time, _thread
    def stop(seconds):
        time.sleep(seconds)
        _thread.interrupt_main()
    total = 0
    _thread.start_new_thread(stop, (seconds,))
    try:
        while True:
            total += 1
    except:
        return total

if __name__ == '__main__':
    print('Testing the CPU speed ...')
    print('Relative speed:', start(60))
</snippet></ROW><ROW><id>4676732</id><snippet>a = pexpect.spawn(['ssh', 'remote-host', './script.sh', 'a'])
a.expect('something')

b = pexpect.spawn(['ssh', 'remote-host', './script.sh', 'b'])
b.expect('something else')

# ...

# to kill ALL of the children
a.sendcontrol('c')
a.close()

b.sendcontrol('c')
b.close()
</snippet></ROW><ROW><id>4676738</id><snippet>def inversereplace(text, word, repl):
    parts = text.split(word)
    return word.join(repl*len(x) for x in parts)
</snippet></ROW><ROW><id>4677063</id><snippet>&gt;&gt;&gt; class Foo():
...     Bar = namedtuple('Bar', ['x','y'])
...     def baz(self):
...         b = Foo.Bar(x=2, y=3)
...         print(type(b))
...
&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; a.baz()
&lt;class '__main__.Bar'&gt;
</snippet></ROW><ROW><id>4677063</id><snippet>namedtuple()</snippet></ROW><ROW><id>4677063</id><snippet>__main__.Bar</snippet></ROW><ROW><id>4677063</id><snippet>__main__.Foo.Bar</snippet></ROW><ROW><id>4677082</id><snippet>virtualenv --relocatable ENV</snippet></ROW><ROW><id>4677082</id><snippet>pip freeze</snippet></ROW><ROW><id>4677216</id><snippet>SYNC_TOTAL_SIZE</snippet></ROW><ROW><id>4677216</id><snippet>global</snippet></ROW><ROW><id>4677408</id><snippet>re.findall()</snippet></ROW><ROW><id>4677408</id><snippet>findall(pattern, string, flags=0)
    Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result.
</snippet></ROW><ROW><id>4677408</id><snippet>str</snippet></ROW><ROW><id>4677408</id><snippet>str</snippet></ROW><ROW><id>4677518</id><snippet>cStringIO</snippet></ROW><ROW><id>4677518</id><snippet>&gt;&gt;&gt; StringIO.StringIO().write(u'\u0080')

&gt;&gt;&gt; cStringIO.StringIO().write(u'\u0080')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\x80' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>4677542</id><snippet>StringIO</snippet></ROW><ROW><id>4677542</id><snippet>file</snippet></ROW><ROW><id>4677542</id><snippet>from StringIO import StringIO
import os
s = StringIO()
s.write("abc")
s.seek(0, os.SEEK_END)
print s.tell()
</snippet></ROW><ROW><id>4677542</id><snippet>len</snippet></ROW><ROW><id>4677591</id><snippet> &gt;&gt;&gt; m.from_buffer(thefile.read(1024))
'PDF document, version 1.2'
</snippet></ROW><ROW><id>4677598</id><snippet>list</snippet></ROW><ROW><id>4677598</id><snippet>dictionary</snippet></ROW><ROW><id>4677598</id><snippet>bytearray</snippet></ROW><ROW><id>4677598</id><snippet>bytearray</snippet></ROW><ROW><id>4677598</id><snippet>tuple</snippet></ROW><ROW><id>4677598</id><snippet>str</snippet></ROW><ROW><id>4677598</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; l = range(10)
&gt;&gt;&gt; s = "Hello World"
&gt;&gt;&gt; isinstance(l, collections.MutableSequence)
True
&gt;&gt;&gt; isinstance(s, collections.MutableSequence)
False
</snippet></ROW><ROW><id>4677598</id><snippet>&gt;&gt;&gt; isinstance({}, collections.MutableMapping)
True
</snippet></ROW><ROW><id>4677818</id><snippet>milkypostman</snippet></ROW><ROW><id>4677818</id><snippet>scoffey</snippet></ROW><ROW><id>4677818</id><snippet>def regex():
    global text
    for paragraph in text.split('\n\n'):
        lines = paragraph.split('\n', 1)
        #personal modifier to choose certain output only
        if lines[0].startswith('C:\\:') or lines[0].startswith('C:\\WINDOWS\system32:') or lines[0].startswith('C:\\WINDOWS\\security:'):
            print lines[0]
            iterables = re.finditer(r".*Special Permissions: \n(\s+[a-zA-Z ]+\n)*", lines[1])
            for items in iterables:
                #cosmetic fix
                parsedText = re.sub(r"\n$", "", items.group(0))
                parsedText = re.sub(r"^\s+", "", parsedText)
                parsedText = re.sub(r"\n\s+", "\n", parsedText)
                print parsedText
            print
</snippet></ROW><ROW><id>4677818</id><snippet>C:\Python27&gt;openfile.py
C:\:
BUILTIN\Users   Allowed:        Special Permissions:
Create Folders
BUILTIN\Users   Allowed:        Special Permissions:
Create Files

C:\WINDOWS\security:
BUILTIN\Users   Allowed:        Special Permissions:
Traverse Folder
Read Attributes
Read Permissions
BUILTIN\Power Users     Allowed:        Special Permissions:
Traverse Folder
Read Attributes
Read Permissions

C:\WINDOWS\system32:
BUILTIN\Power Users     Allowed:        Special Permissions:
Delete
</snippet></ROW><ROW><id>4677844</id><snippet>{% autoescape %}</snippet></ROW><ROW><id>4677844</id><snippet>jinja2.ext.autoescape</snippet></ROW><ROW><id>4677844</id><snippet>env = Environment(autoescape=True, extensions=['jinja2.ext.autoescape'],
                  loader=...)
</snippet></ROW><ROW><id>4677958</id><snippet>read(1024)</snippet></ROW><ROW><id>4677958</id><snippet>thefile = urllib2.urlopen(someURL)
</snippet></ROW><ROW><id>4677958</id><snippet>urlopen</snippet></ROW><ROW><id>4678424</id><snippet>import sys

def process(file):
    for line in file:
        arr = line.split()
        if not arr:
            continue
        last = arr.pop()
        n = len(arr)
        if n == 4:
            first, middle = ' '.join(arr[:2]), ' '.join(arr[2:])
        elif n == 3:
            if arr[0] in ('M', 'Shk', 'BS'):
                first, middle = ' '.join(arr[:2]), arr[-1]
            else:
                first, middle = arr[0], ' '.join(arr[1:])
        elif n == 2:
            first, middle = arr
        else:
            continue
        print 'First: %r' % first
        print 'Middle: %r' % middle
        print 'Last: %r' % last

if __name__ == '__main__':
    process(sys.stdin)
</snippet></ROW><ROW><id>4678424</id><snippet>First Middle Last
M First Middle Last
First Shk Middle Last
BS First M Middle Last
</snippet></ROW><ROW><id>4678424</id><snippet>First: 'First'
Middle: 'Middle'
Last: 'Last'
First: 'M First'
Middle: 'Middle'
Last: 'Last'
First: 'First'
Middle: 'Shk Middle'
Last: 'Last'
First: 'BS First'
Middle: 'M Middle'
Last: 'Last'
</snippet></ROW><ROW><id>4679363</id><snippet>a = "cat"
b = "cat"
a is b
   True
c = 1.2
d = 1.2
c is d
    False
</snippet></ROW><ROW><id>4679363</id><snippet>a is b</snippet></ROW><ROW><id>4679363</id><snippet>True</snippet></ROW><ROW><id>4679363</id><snippet>c is d</snippet></ROW><ROW><id>4679363</id><snippet>c is d</snippet></ROW><ROW><id>4679363</id><snippet>False</snippet></ROW><ROW><id>4679363</id><snippet>a is b</snippet></ROW><ROW><id>4679363</id><snippet>False</snippet></ROW><ROW><id>4679363</id><snippet>==</snippet></ROW><ROW><id>4679363</id><snippet>is</snippet></ROW><ROW><id>4679363</id><snippet>==</snippet></ROW><ROW><id>4679413</id><snippet>f_wo_append</snippet></ROW><ROW><id>4679413</id><snippet>def f_wo_append():
    '''Function without append'''
    P = 75
    numcustomers = 0
    for person in popn.people:
        person.customer = iscust = person.utility &gt;= P
        numcustomers += iscust
    return numcustomers
</snippet></ROW><ROW><id>4679413</id><snippet>import random # instead of numpy
import time
timer_func = time.clock # better on Windows, use time.time on *x platform

class Person(object):
    def __init__(self, util):
        self.utility = util
        self.customer = 0

class Population(object):
    def __init__(self, numpeople):
        random.seed(1)
        self.people = [Person(random.uniform(0, 300)) for i in xrange(numpeople)]
        self.cus = []
        self.noncus = []        

def f_w_append(popn):
    '''Function with append'''
    P = 75
    cus = []
    noncus = []
    for per in popn.people:
        if  per.utility &gt;= P:
            per.customer = 1
            cus.append(per)
        else:
            per.customer = 0
            noncus.append(per)
    popn.cus = cus # omitted from OP's code
    popn.noncus = noncus # omitted from OP's code
    return len(cus)

def f_w_append2(popn):
    '''Function with append'''
    P = 75
    popn.cus = []
    popn.noncus = []
    cusapp = popn.cus.append
    noncusapp = popn.noncus.append
    for per in popn.people:
        if  per.utility &gt;= P:
            per.customer = 1
            cusapp(per)
        else:
            per.customer = 0
            noncusapp(per)
    return len(popn.cus)    

def f_wo_append(popn):
    '''Function without append'''
    P = 75
    for per in popn.people:
        if  per.utility &gt;= P:
            per.customer = 1
        else:
            per.customer = 0

    numcustomers = 0
    for per in popn.people:
        if per.customer == 1:
            numcustomers += 1                
    return numcustomers

def f_wo_append2(popn):
    '''Function without append'''
    P = 75
    numcustomers = 0
    for person in popn.people:
        person.customer = iscust = person.utility &gt;= P
        numcustomers += iscust
    return numcustomers    

if __name__ == "__main__":
    import sys
    popsize, which, niter = map(int, sys.argv[1:4])
    pop = Population(popsize)
    func = (f_w_append, f_w_append2, f_wo_append, f_wo_append2)[which]
    t0 = timer_func()
    for _unused in xrange(niter):
        nc = func(pop)
    t1 = timer_func()
    print "popsize=%d func=%s niter=%d nc=%d seconds=%.2f" % (
        popsize, func.__name__, niter, nc, t1 - t0)
</snippet></ROW><ROW><id>4679413</id><snippet>C:\junk&gt;\python27\python ncust.py 300 0 80000
popsize=300 func=f_w_append niter=80000 nc=218 seconds=5.48

C:\junk&gt;\python27\python ncust.py 300 1 80000
popsize=300 func=f_w_append2 niter=80000 nc=218 seconds=4.62

C:\junk&gt;\python27\python ncust.py 300 2 80000
popsize=300 func=f_wo_append niter=80000 nc=218 seconds=5.55

C:\junk&gt;\python27\python ncust.py 300 3 80000
popsize=300 func=f_wo_append2 niter=80000 nc=218 seconds=4.29
</snippet></ROW><ROW><id>4679413</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; utils = numpy.random.uniform(0, 300, 10)
&gt;&gt;&gt; print repr(utils[0])
42.777972538362874
&gt;&gt;&gt; type(utils[0])
&lt;type 'numpy.float64'&gt;
</snippet></ROW><ROW><id>4679413</id><snippet>&gt;&gt;&gt; x = utils[0]
&gt;&gt;&gt; type(x)
&lt;type 'numpy.float64'&gt;
&gt;&gt;&gt; type(x &gt;= 75) 
&lt;type 'numpy.bool_'&gt; # iscust refers to a numpy.bool_
&gt;&gt;&gt; type(0 + (x &gt;= 75)) 
&lt;type 'numpy.int32'&gt; # numcustomers ends up referring to a numpy.int32
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4679413</id><snippet>random</snippet></ROW><ROW><id>4679413</id><snippet>numpy.float64</snippet></ROW><ROW><id>4679413</id><snippet>float</snippet></ROW><ROW><id>4679630</id><snippet>__self__</snippet></ROW><ROW><id>4679630</id><snippet>&gt;&gt;&gt; a.some.__self__ is a
True
</snippet></ROW><ROW><id>4679630</id><snippet>im_self</snippet></ROW><ROW><id>4679728</id><snippet>filenumber = 0
outfile = None
with open('source_file.txt') as f:
    for line in f:
        if line.strip() == 'DOCUMENTS':
            filenumber += 1
            outfile = open('result%03d.txt' % filenumber, 'w')
        elif line.strip().startswith('Copyright') and outfile:
            outfile.close()
            outfile = None
        elif outfile:
            outfile.write(line)
if outfile:
    outfile.close()
</snippet></ROW><ROW><id>4681377</id><snippet>&gt;&gt;&gt; etree.strip_tags(fragment,'a','c')
&gt;&gt;&gt; etree.tostring(fragment)
'&lt;fragment&gt;text1 inner1 text2 &lt;b&gt;inner2&lt;/b&gt; text3&lt;/fragment&gt;'
</snippet></ROW><ROW><id>4681607</id><snippet>...
 2 : readt3(e,t,off, partElems, partsNodes)
...
</snippet></ROW><ROW><id>4681607</id><snippet>readt3</snippet></ROW><ROW><id>4681607</id><snippet>e,t,off, partElems, partsNodes</snippet></ROW><ROW><id>4681607</id><snippet>def readt3( e, t, off, partElems, partsNodes, partPnt ):
    partsElems[partPnt].append(e)
    nods = t[offset: offset+3];
    for n in nods:
      partsNodes[partPnt].append(n)
    return 

# And of course all your function definition should be here before the cases dict.

cases = { 2 : readt3,  # to read the triangular elements 
          3 : readq4,  # to read the quadrangular elements
          5 : readh8,  # to read the hexa elements
        }   
</snippet></ROW><ROW><id>4681607</id><snippet>case</snippet></ROW><ROW><id>4681607</id><snippet>case = 2

cases[case](e,t,off, partElems, partsNodes)
</snippet></ROW><ROW><id>4682198</id><snippet>var = "/some/file/path/"
pipe = subprocess.Popen(["perl", "./uireplace.pl", var], stdin=subprocess.PIPE)
pipe.stdin.write(var)
pipe.stdin.close()
</snippet></ROW><ROW><id>4682215</id><snippet>except ExceptionObject as e</snippet></ROW><ROW><id>4682215</id><snippet>import os
try:
    os.chdir('somenonexistingdir')
except OSError as e:
    print e.errno
    print e.filename
    print e.strerror
</snippet></ROW><ROW><id>4682594</id><snippet>import threading
import time

def sleeper():
    print 'Starting to sleep'
    time.sleep(10)
    print 'Just waking up..'
    print 'snooze'
    print 'oh no. I have to get up.'

def worker():
    print 'Starting to work'
    time.sleep(1) # this also a work. :)
    print 'Done with Work'

t = threading.Thread(name='sleeper', target=sleeper)
w = threading.Thread(name='worker', target=worker)

w.start()
t.start()
</snippet></ROW><ROW><id>4682600</id><snippet>client.MultiEngineClient.map()</snippet></ROW><ROW><id>4682744</id><snippet>\v^\s*def\s+(\w+)\s*\(\s*(self[^)]*)\)\s*:</snippet></ROW><ROW><id>4682744</id><snippet>\v           # very magic
^            # start of line
   \s*       # 0 or more whitespace
   def       # 'def'
   \s+       # 1 or more whitespace
   (         # start capture group 1
      \w+       # 1 or more word [a-zA-Z0-9_] chars
   )         # end capture group 1
   \s*       # 0 or more whitespace
   \(        # '(' literal open parenthesis
   \s*       # 0 or more whitespace
   (         # start capture group 2
      self   # 'self'
      [^)]*     # 0 or more of not ')', includes newline
   )         # end capture group 2
   \)        # ')' literal close parenthesis
   \s*       # 0 or more whitespace
   :         # ':'
</snippet></ROW><ROW><id>4682776</id><snippet>get_form()</snippet></ROW><ROW><id>4682776</id><snippet>obj</snippet></ROW><ROW><id>4682776</id><snippet>change_view</snippet></ROW><ROW><id>4682776</id><snippet>
class MyModelAdmin(admin.ModelAdmin):
    def get_form(self, request, obj=None, **kwargs):
        # hide every other field apart from url
        # if we are adding
        if obj is None:
            kwargs['fields'] = ['url']
        return super(MyModelAdmin, self).get_form(request, obj, **kwargs)
</snippet></ROW><ROW><id>4682831</id><snippet>{% with %}</snippet></ROW><ROW><id>4683144</id><snippet>{"type": "Polygon", 
 "coordinates": [[
   [-102.05, 41.0], 
   [-102.05, 37.0], 
   [-109.05, 37.0], 
   [-109.05, 41.0]
 ]]}
</snippet></ROW><ROW><id>4683144</id><snippet>co = {"type": "Polygon", "coordinates": [
    [(-102.05, 41.0),
     (-102.05, 37.0),
     (-109.05, 37.0),
     (-109.05, 41.0)]]}
lon, lat = zip(*co['coordinates'][0])
from pyproj import Proj
pa = Proj("+proj=aea +lat_1=37.0 +lat_2=41.0 +lat_0=39.0 +lon_0=-106.55")
</snippet></ROW><ROW><id>4683144</id><snippet>x, y = pa(lon, lat)
cop = {"type": "Polygon", "coordinates": [zip(x, y)]}
from shapely.geometry import shape
shape(cop).area  # 268952044107.43506
</snippet></ROW><ROW><id>4683352</id><snippet>r['placa'] =   \n + r.get('placa_desc')[0]

r['placa'] =   "\n" + r.get('placa_desc')[0]
</snippet></ROW><ROW><id>4683522</id><snippet>which python
</snippet></ROW><ROW><id>4683791</id><snippet>jythonc</snippet></ROW><ROW><id>4683791</id><snippet>jythonroid</snippet></ROW><ROW><id>4683960</id><snippet>global
  user haproxy
  group haproxy
#  chroot /usr/share/haproxy
  pidfile /var/run/haproxy.pid
  daemon
  log 127.0.0.1 local0 info

defaults
  log global
  mode http
  option httplog
  option dontlognull
  option redispatch
  option httpclose
  option forwardfor
  balance roundrobin
  retries 3
  contimeout 5000
  clitimeout 600000
  srvtimeout 600000

frontend http_proxy :80
  acl path_foo path_beg /foo
  use_backend foo if path_foo
  default_backend www

backend foo
  server foo0 127.0.0.1:8080

backend www
  server www0 127.0.0.1:8081
</snippet></ROW><ROW><id>4683963</id><snippet>range</snippet></ROW><ROW><id>4683963</id><snippet>Entry.objects.filter(Q(start__range=(appointment.start, appointment.end)) | 
    Q(end__range=(appointment.start, appointment.end)))
</snippet></ROW><ROW><id>4683963</id><snippet>BETWEEN</snippet></ROW><ROW><id>4683963</id><snippet>Entry.objects.filter((Q(start__gte=appointment.start) &amp; Q(start__lt=appointment.end)) | 
   (Q(end__gt=appointment.start) &amp; Q(end__lte=appointment.end)))
</snippet></ROW><ROW><id>4683993</id><snippet>__init__.py</snippet></ROW><ROW><id>4684402</id><snippet>Sys.command</snippet></ROW><ROW><id>4684402</id><snippet>Unix.open_process*</snippet></ROW><ROW><id>4684402</id><snippet>Unix.create_process*</snippet></ROW><ROW><id>4684402</id><snippet>ls</snippet></ROW><ROW><id>4684402</id><snippet>let ls = Unix.open_process_in "ls"
try
  while true do
    Printf.printf "%s\n" (input_line ls)
  done
with End_of_file -&gt; ()
Unix.close_process_in ls
</snippet></ROW><ROW><id>4684549</id><snippet>os.path.realpath()</snippet></ROW><ROW><id>4684549</id><snippet>os.path.normpath()</snippet></ROW><ROW><id>4684631</id><snippet>argparse</snippet></ROW><ROW><id>4684631</id><snippet>optparse</snippet></ROW><ROW><id>4684631</id><snippet>optparse</snippet></ROW><ROW><id>4684631</id><snippet>import optparse

parser = optparse.OptionParser()

parser.add_option("-d", "--directory", metavar="DIR",
    help="Directory to scan for big files")
parser.add_option("-e", "--email", metavar='EMAIL', 
    help='email to send the list to')

opts, args = parser.parse_args()

print 'scanning', opts.directory

if opts.email is None:
    print 'not sending the email'
</snippet></ROW><ROW><id>4684874</id><snippet>&gt;&gt;&gt; from lxml import etree, html
&gt;&gt;&gt; 
&gt;&gt;&gt; t = etree.XML('&lt;a href="{{x}}" /&gt;')
&gt;&gt;&gt; 
&gt;&gt;&gt; etree.tostring(t)
'&lt;a href="{{x}}"/&gt;'
&gt;&gt;&gt; html.tostring(t)
'&lt;a href="%7B%7Bx%7D%7D"&gt;&lt;/a&gt;'
</snippet></ROW><ROW><id>4685307</id><snippet>bus = dbus.SessionBus()
if bus.name_has_owner('org.gnome.Rhythmbox'):
    # ...
</snippet></ROW><ROW><id>4685307</id><snippet>def rhythmbox_owner_changed(new_owner):
    if new_owner == '':
        print 'Rhythmbox is no longer running'
    else:
        print 'Rhythmbox is now running'

bus.watch_name_owner('org.gnome.Rhythmbox')
</snippet></ROW><ROW><id>4685402</id><snippet>defaultdict</snippet></ROW><ROW><id>4685402</id><snippet>import collections

def revert_dict(d):
    rd = collections.defaultdict(list)

    for key, value in d.iteritems():
        rd[value].append(key)

    return rd
</snippet></ROW><ROW><id>4685459</id><snippet>print</snippet></ROW><ROW><id>4685459</id><snippet>print ("test")
</snippet></ROW><ROW><id>4685588</id><snippet>[x[::-1] for x in b]
</snippet></ROW><ROW><id>4685677</id><snippet>header = "Host: www.google.com\r\nConnection: keep-alive\r\nAccept: application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\r\nUser-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; en-US) AppleWebKit/534.13 (KHTML, like Gecko) Chrome/9.0.597.45 Safari/534.13\r\nAccept-Encoding: gzip,deflate,sdch\r\nAvail-Dictionary: GeNLY2f-\r\nAccept-Language: en-US,en;q=0.8\r\n"

print re.findall(r"(?P&lt;name&gt;.*?): (?P&lt;value&gt;.*?)\r\n", header)
</snippet></ROW><ROW><id>4685677</id><snippet>[('Host', 'www.google.com'),
 ('Connection', 'keep-alive'),
 ('Accept',
  'application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5'),
 ('User-Agent',
  'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; en-US) AppleWebKit/534.13 (KHTML, like Gecko) Chrome/9.0.597.45 Safari/534.13'),
 ('Accept-Encoding', 'gzip,deflate,sdch'),
 ('Avail-Dictionary', 'GeNLY2f-'),
 ('Accept-Language', 'en-US,en;q=0.8')]
</snippet></ROW><ROW><id>4685677</id><snippet>headers = dict(re.findall(r"(?P&lt;name&gt;.*?): (?P&lt;value&gt;.*?)\r\n", header))

print headers['Accept']
# 'application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5'
</snippet></ROW><ROW><id>4685857</id><snippet>print repr(sample_raw data)</snippet></ROW><ROW><id>4685857</id><snippet>uc = raw_data.decode('cp1252')</snippet></ROW><ROW><id>4685857</id><snippet>clean_uc = manipulate(uc)</snippet></ROW><ROW><id>4685857</id><snippet>to_mongo = clean_uc.encode('utf8')</snippet></ROW><ROW><id>4686148</id><snippet>boto</snippet></ROW><ROW><id>4686400</id><snippet>super(B, B).my_method</snippet></ROW><ROW><id>4686400</id><snippet>&gt;&gt;&gt; super(B, B).my_method
&lt;function my_method at 0x00D51738&gt;
&gt;&gt;&gt; super(B, B).my_method is A.my_method
True
</snippet></ROW><ROW><id>4686593</id><snippet>__all__</snippet></ROW><ROW><id>4686593</id><snippet>NameError</snippet></ROW><ROW><id>4686593</id><snippet>listToText</snippet></ROW><ROW><id>4686789</id><snippet>float(us_price)</snippet></ROW><ROW><id>4686789</id><snippet>int(float(us_price))</snippet></ROW><ROW><id>4686902</id><snippet>&gt;&gt;&gt; import gio
&gt;&gt;&gt; help(gio.Socket)
</snippet></ROW><ROW><id>4686904</id><snippet>import html2text
import sys

print html2text.html2text(sys.stdin.read())
</snippet></ROW><ROW><id>4686955</id><snippet>types.ModuleType</snippet></ROW><ROW><id>4686955</id><snippet>sys.modules</snippet></ROW><ROW><id>4686955</id><snippet>sys.modules["somename"] = types.ModuleType("somename")
</snippet></ROW><ROW><id>4686955</id><snippet>import somename</snippet></ROW><ROW><id>4686955</id><snippet>def myfunc(x, y, z):
    ...

somename.myfunc = myfunc
</snippet></ROW><ROW><id>4686955</id><snippet>_winreg</snippet></ROW><ROW><id>4687435</id><snippet>import ctypes
array_type = ctypes.c_char_p * 4
names = array_type()
</snippet></ROW><ROW><id>4687435</id><snippet>names[0] = "foo"
names[1] = "bar"
</snippet></ROW><ROW><id>4687435</id><snippet>names</snippet></ROW><ROW><id>4687447</id><snippet>for var in var_list:</snippet></ROW><ROW><id>4687447</id><snippet>var = num</snippet></ROW><ROW><id>4687447</id><snippet>var</snippet></ROW><ROW><id>4687447</id><snippet>num</snippet></ROW><ROW><id>4687447</id><snippet>one</snippet></ROW><ROW><id>4687447</id><snippet>two</snippet></ROW><ROW><id>4687447</id><snippet>three</snippet></ROW><ROW><id>4687447</id><snippet>var_list</snippet></ROW><ROW><id>4687457</id><snippet>librt</snippet></ROW><ROW><id>4687582</id><snippet>from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np

def plot_implicit(fn, bbox=(-2.5,2.5)):
    ''' create a plot of an implicit function
    fn  ...implicit function (plot where fn==0)
    bbox ..the x,y,and z limits of plotted interval'''
    xmin, xmax, ymin, ymax, zmin, zmax = bbox*3
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    A = np.linspace(xmin, xmax, 100) # resolution of the contour
    B = np.linspace(xmin, xmax, 15) # number of slices
    A1,A2 = np.meshgrid(A,A) # grid on which the contour is plotted

    for z in B: # plot contours in the XY plane
        X,Y = A1,A2
        Z = fn(X,Y,z)
        cset = ax.contour(X, Y, Z+z, [z], zdir='z')
        # [z] defines the only level to plot for this contour for this value of z

    for y in B: # plot contours in the XZ plane
        X,Z = A1,A2
        Y = fn(X,y,Z)
        cset = ax.contour(X, Y+y, Z, [y], zdir='y')

    for x in B: # plot contours in the YZ plane
        Y,Z = A1,A2
        X = fn(x,Y,Z)
        cset = ax.contour(X+x, Y, Z, [x], zdir='x')

    # must set plot limits because the contour will likely extend
    # way beyond the displayed level.  Otherwise matplotlib extends the plot limits
    # to encompass all values in the contour.
    ax.set_zlim3d(zmin,zmax)
    ax.set_xlim3d(xmin,xmax)
    ax.set_ylim3d(ymin,ymax)

    plt.show()
</snippet></ROW><ROW><id>4687582</id><snippet>def goursat_tangle(x,y,z):
    a,b,c = 0.0,-5.0,11.8
    return x**4+y**4+z**4+a*(x**2+y**2+z**2)**2+b*(x**2+y**2+z**2)+c

plot_implicit(goursat_tangle)
</snippet></ROW><ROW><id>4687582</id><snippet>def hyp_part1(x,y,z):
    return -(x**2) - (y**2) + (z**2) - 1

plot_implicit(hyp_part1, bbox=(-100.,100.))
</snippet></ROW><ROW><id>4687582</id><snippet>def sphere(x,y,z):
    return x**2 + y**2 + z**2 - 2.0**2

def translate(fn,x,y,z):
    return lambda a,b,c: fn(x-a,y-b,z-c)

def union(*fns):
    return lambda x,y,z: np.min(
        [fn(x,y,z) for fn in fns], 0)

def intersect(*fns):
    return lambda x,y,z: np.max(
        [fn(x,y,z) for fn in fns], 0)

def subtract(fn1, fn2):
    return intersect(fn1, lambda *args:-fn2(*args))

plot_implicit(union(sphere,translate(sphere, 1.,1.,1.)), (-2.,3.))
</snippet></ROW><ROW><id>4687600</id><snippet>In [1]: import ctypes

In [2]: lib = ctypes.CDLL("libfoo.so.1.0")

In [3]: names = (ctypes.c_char_p*4)()

In [4]: names[0] = "NAME0"

In [5]: names[1] = "NAME1"

In [6]: names[2] = "NAME2"

In [7]: names[3] = 0

In [8]: lib.foo("whatever", names)
The file_name is whatever
The name is NAME0
The name is NAME1
The name is NAME2
Out[8]: 0
</snippet></ROW><ROW><id>4687600</id><snippet>names = ((c_char_p * 1024) * 4)()
</snippet></ROW><ROW><id>4687600</id><snippet>names[0]</snippet></ROW><ROW><id>4687600</id><snippet>dir</snippet></ROW><ROW><id>4687702</id><snippet>try:
    while True:
        val = it.next()
        print(val)
except StopIteration:
    print("Iteration done.")
</snippet></ROW><ROW><id>4687702</id><snippet>for i in it:
    print(i)
print("Iteration done.")
</snippet></ROW><ROW><id>4687760</id><snippet>zip testapp.zip *
echo '#!/usr/bin/env python' | cat - testapp.zip &gt; testapp.py
chmod 755 testapp.py
</snippet></ROW><ROW><id>4687760</id><snippet>python testapp.py
</snippet></ROW><ROW><id>4687760</id><snippet>./testapp.py
</snippet></ROW><ROW><id>4687760</id><snippet>__main__.py</snippet></ROW><ROW><id>4687760</id><snippet>__init__.py</snippet></ROW><ROW><id>4687760</id><snippet>__main__.py</snippet></ROW><ROW><id>4688063</id><snippet>mail.send_mail()</snippet></ROW><ROW><id>4688563</id><snippet>communicate</snippet></ROW><ROW><id>4688563</id><snippet>stdin=PIPE</snippet></ROW><ROW><id>4688563</id><snippet>communicate</snippet></ROW><ROW><id>4688563</id><snippet>useradd</snippet></ROW><ROW><id>4688563</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>4688563</id><snippet>process.returncode</snippet></ROW><ROW><id>4688563</id><snippet>communicate('test:password')</snippet></ROW><ROW><id>4688885</id><snippet>isEmpty()</snippet></ROW><ROW><id>4688885</id><snippet>push()</snippet></ROW><ROW><id>4688885</id><snippet>class stack(list):
    def push(self, item):
        self.append(item)
    def isEmpty(self):
        return not self
</snippet></ROW><ROW><id>4689264</id><snippet>python2.6</snippet></ROW><ROW><id>4689264</id><snippet>python26</snippet></ROW><ROW><id>4689264</id><snippet>OrderedDict</snippet></ROW><ROW><id>4689264</id><snippet>try:
    from collections import OrderedDict
except ImportError:
    print("Python 2.7+ is needed for this script.")
    sys.exit(1)
</snippet></ROW><ROW><id>4689876</id><snippet>import unittest

class UnitTestExamples(unittest.TestCase):

    def testsum(self):
        a = 10
        b = 42
        self.assertEqual(a+b,52)

if __name__  == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>4689876</id><snippet>python testexample.py -v
</snippet></ROW><ROW><id>4689943</id><snippet>Car</snippet></ROW><ROW><id>4689943</id><snippet>class Car:
    def __init__(self, brand, model, hp):
        self.brand = brand
        self.model = model
        self.hp = hp
</snippet></ROW><ROW><id>4689943</id><snippet>car1 = Car('foo', 'bar', 23)
car2 = Car('baz', 'bar', 34)

if car1.model == car2.model:
    # models are equal
</snippet></ROW><ROW><id>4689943</id><snippet>Car</snippet></ROW><ROW><id>4689943</id><snippet>car1 = Car('foo', 'bar', 23)
car2 = Car('baz', 'bar', 34)
car3 = Car('baz', 'bar', 14)
car_list = [car1, car2, car3]

car_list.sort(key=lambda c: c.hp)
</snippet></ROW><ROW><id>4689943</id><snippet>{'brand': 'foo', 'model': 'bar', 'hp': 23}
</snippet></ROW><ROW><id>4689943</id><snippet>car1 = {'brand': 'foo', 'model': 'bar', 'hp': 23}
car2 = {'brand': 'baz', 'model': 'bar', 'hp': 34}

if car1['model'] == car2['model']:
    # models are equal
</snippet></ROW><ROW><id>4689943</id><snippet>Car</snippet></ROW><ROW><id>4689943</id><snippet>car1 = {'brand': 'foo', 'model': 'bar', 'hp': 23}
car2 = {'brand': 'baz', 'model': 'bar', 'hp': 34}
car2 = {'brand': 'baz', 'model': 'bar', 'hp': 14}
car_list = [car1, car2, car3]

car_list.sort(key=lambda c: c['hp'])
</snippet></ROW><ROW><id>4690014</id><snippet>()</snippet></ROW><ROW><id>4690014</id><snippet>def my_callback_func(event):
    # do stuff

o = Observable()
o.subscribe(my_callback_func)
</snippet></ROW><ROW><id>4690014</id><snippet>class CallbackHandler(object):
    @staticmethod
    def static_handler(event):
        # do stuff

    def instance_handler(self, event):
        # do stuff

o = Observable()

# static methods are referenced as &lt;class&gt;.&lt;method&gt;
o.subscribe(CallbackHandler.static_handler)

c = CallbackHandler()
# instance methods are &lt;class instance&gt;.&lt;method&gt;
o.subscribe(c.instance_handler)

# You can even pass lambda functions
o.subscribe(lambda event: &lt;&lt;something involving event&gt;&gt;)
</snippet></ROW><ROW><id>4690134</id><snippet>&gt;&gt;&gt; L = sorted(d.items(), key=lambda (k, v): v[1])
&gt;&gt;&gt; L
[('a2', ['e', 2]), ('a4', ['s', 2]), ('a3', ['h', 3]), ('a1', ['g', 6]), ('a6', ['y', 7]), ('a5', ['j', 9])]

&gt;&gt;&gt; map(lambda (k,v): k, L)
['a2', 'a4', 'a3', 'a1', 'a6', 'a5']
</snippet></ROW><ROW><id>4690134</id><snippet>map</snippet></ROW><ROW><id>4690134</id><snippet>lambda</snippet></ROW><ROW><id>4690225</id><snippet>mode='full'</snippet></ROW><ROW><id>4690225</id><snippet>argmax</snippet></ROW><ROW><id>4690225</id><snippet>from scipy import signal, fftpack
import numpy
a = numpy.array([0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0, 0, 0, 0, 0])
b = numpy.array([0, 0, 0, 0, 0, 1, 2, 3, 4, 3, 2, 1, 0, 1, 2, 3, 4, 3, 2, 1, 0])
numpy.argmax(signal.correlate(a,b)) -&gt; 16
numpy.argmax(signal.correlate(b,a)) -&gt; 24
</snippet></ROW><ROW><id>4690225</id><snippet>a</snippet></ROW><ROW><id>4690225</id><snippet>b</snippet></ROW><ROW><id>4690225</id><snippet>A = fftpack.fft(a)
B = fftpack.fft(b)
Ar = -A.conjugate()
Br = -B.conjugate()
numpy.argmax(numpy.abs(fftpack.ifft(Ar*B))) -&gt; 4
numpy.argmax(numpy.abs(fftpack.ifft(A*Br))) -&gt; 17
</snippet></ROW><ROW><id>4690225</id><snippet>a</snippet></ROW><ROW><id>4690225</id><snippet>b</snippet></ROW><ROW><id>4690225</id><snippet>Ar = -A.conjugate() = fft(a[::-1])</snippet></ROW><ROW><id>4690432</id><snippet>string</snippet></ROW><ROW><id>4690432</id><snippet>str</snippet></ROW><ROW><id>4690432</id><snippet>&gt;&gt;&gt; x = 'Hi'
&gt;&gt;&gt; x.lstrip('H')
'i'
</snippet></ROW><ROW><id>4690432</id><snippet>chars</snippet></ROW><ROW><id>4690469</id><snippet>In [6]: sorted(mydict.iteritems(), key=lambda (k,v): operator.itemgetter(1)(v))
Out[6]: 
[('a2', ['e', 2]),
 ('a4', ['s', 2]),
 ('a3', ['h', 3]),
 ('a1', ['g', 6]),
 ('a6', ['y', 7]),
 ('a5', ['j', 9])]
</snippet></ROW><ROW><id>4690469</id><snippet>mydict.iteritems()</snippet></ROW><ROW><id>4690469</id><snippet>('a2',['e',2])
</snippet></ROW><ROW><id>4690469</id><snippet>('a2',['e',2])</snippet></ROW><ROW><id>4690469</id><snippet>lambda (k,v): ...</snippet></ROW><ROW><id>4690469</id><snippet>k</snippet></ROW><ROW><id>4690469</id><snippet>v</snippet></ROW><ROW><id>4690469</id><snippet>lambda</snippet></ROW><ROW><id>4690469</id><snippet>k</snippet></ROW><ROW><id>4690469</id><snippet>'a2'</snippet></ROW><ROW><id>4690469</id><snippet>v</snippet></ROW><ROW><id>4690469</id><snippet>['e',2]</snippet></ROW><ROW><id>4690469</id><snippet>lambda (k,v): operator.itemgetter(1)(v)</snippet></ROW><ROW><id>4690469</id><snippet>operator.itemgetter(1)(['e',2])</snippet></ROW><ROW><id>4690469</id><snippet>['e',2]</snippet></ROW><ROW><id>4690469</id><snippet>lambda (k,v): operator.itemgetter(1)(v)</snippet></ROW><ROW><id>4690469</id><snippet>operator.itemgetter(1)</snippet></ROW><ROW><id>4690469</id><snippet>operator.itemgetter(1)</snippet></ROW><ROW><id>4690469</id><snippet>lambda (k,v): v[1]</snippet></ROW><ROW><id>4690469</id><snippet>In [15]: %timeit sorted(mydict.iteritems(), key=lambda (k,v): v[1])
100000 loops, best of 3: 7.55 us per loop

In [16]: %timeit sorted(mydict.iteritems(), key=lambda (k,v): operator.itemgetter(1)(v))
100000 loops, best of 3: 11.2 us per loop
</snippet></ROW><ROW><id>4690476</id><snippet>import active_directory

user = active_directory.find_user("jimboface")
destination_ou = active_directory.find_ou("happyland")
destination_ou.com_object.MoveHere(str(user.as_string()), str(user.Name))
#Thats it!
</snippet></ROW><ROW><id>4690536</id><snippet>contour()</snippet></ROW><ROW><id>4690536</id><snippet>x = numpy.linspace(-2., 2.)
y = numpy.linspace(-2., 2.)[:, None]
contour(x, y.ravel(), 3*x + 2*y, [1])
</snippet></ROW><ROW><id>4690655</id><snippet>except Exception, e:</snippet></ROW><ROW><id>4690655</id><snippet>except, e:</snippet></ROW><ROW><id>4690655</id><snippet>try:
    with open(filepath,'rb') as f:
        con.storbinary('STOR '+ filepath, f)
    logger.info('File successfully uploaded to '+ FTPADDR)
except Exception, e:
    logger.error('Failed to upload to ftp: '+ str(e))
</snippet></ROW><ROW><id>4691534</id><snippet>help</snippet></ROW><ROW><id>4691534</id><snippet>_Helper</snippet></ROW><ROW><id>4691534</id><snippet>pydoc.help(...)</snippet></ROW><ROW><id>4691534</id><snippet>class _Helper(object):
    """Define the built-in 'help'.
    This is a wrapper around pydoc.help (with a twist).

    """

    def __repr__(self):
        return "Type help() for interactive help, " \
               "or help(object) for help about object."
    def __call__(self, *args, **kwds):
        import pydoc
        return pydoc.help(*args, **kwds)
</snippet></ROW><ROW><id>4691534</id><snippet>pydoc.Helper</snippet></ROW><ROW><id>4691534</id><snippet>sys.stdin</snippet></ROW><ROW><id>4691534</id><snippet>sys.stdout</snippet></ROW><ROW><id>4691707</id><snippet>with open('/tmp/filename', 'rt') as infile:
    data = infile.read()
    whatever(data)
</snippet></ROW><ROW><id>4691707</id><snippet>&gt;&gt;&gt; import contextlib
&gt;&gt;&gt; with contextlib.closing(urllib2.urlopen('http://www.python.org')) as page:
...   for line in page:
...     print(line)
&lt;html&gt; blablablabla&lt;/html&gt;
</snippet></ROW><ROW><id>4691853</id><snippet>import inspect
import logging
import linecache

def main():
    something_is_not_right = True
    logging.basicConfig(level=logging.DEBUG,
                        format=('%(filename)s: '    
                                '%(levelname)s: '
                                '%(funcName)s(): '
                                '%(lineno)d:\t'
                                '%(message)s')
                        )

    if something_is_not_right:
        logging.debug(linecache.getline(
            __file__,
            inspect.getlineno(inspect.currentframe())-1))

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>4691853</id><snippet>test.py: DEBUG: main(): 18:     if something_is_not_right == True:
</snippet></ROW><ROW><id>4691963</id><snippet>class Snake(object):
    @classmethod
    def my_name(cls):  
        print cls.__name__
</snippet></ROW><ROW><id>4692212</id><snippet># get a iterator over the lines in the file:
with open("input.txt", 'rt') as lines:
    # while the line is not empty drop it
    for line in lines:
        if not line.strip():
            break

    # now lines is at the point after the first paragraph
    # so write out everything from here
    with open("output.txt", 'wt') as out:
        out.writelines(lines)
</snippet></ROW><ROW><id>4692212</id><snippet>with</snippet></ROW><ROW><id>4692212</id><snippet>lines = open("input.txt", 'rt')
for line in lines:
    if not line.strip():
        break
open("output.txt", 'wt').writelines(lines)
</snippet></ROW><ROW><id>4692212</id><snippet># first, read everything from the old file
text = open("input.txt", 'rt').read()

# split it at the first empty line ("\n\n")
first, rest = text.split('\n\n',1)

# make a new file and write the rest
open("output.txt", 'wt').write(rest)
</snippet></ROW><ROW><id>4692212</id><snippet>\r\n</snippet></ROW><ROW><id>4692212</id><snippet>\r\n\r\n</snippet></ROW><ROW><id>4692230</id><snippet>scipy.ndimage.filters.laplace()</snippet></ROW><ROW><id>4692683</id><snippet>Tuple(Of T1, T2, T3)</snippet></ROW><ROW><id>4692683</id><snippet>IEqualityComparer(Of T)</snippet></ROW><ROW><id>4692683</id><snippet>set1.SequenceEqual(set2, New MyComparer())</snippet></ROW><ROW><id>4692683</id><snippet>Equals()</snippet></ROW><ROW><id>4692683</id><snippet>GetHashCode()</snippet></ROW><ROW><id>4692683</id><snippet>IEqualityComparer</snippet></ROW><ROW><id>4692766</id><snippet>x = scipy.matrix([1,2,3]).transpose()
</snippet></ROW><ROW><id>4692766</id><snippet>x.tolist()</snippet></ROW><ROW><id>4692766</id><snippet>[[1], [2], [3]]</snippet></ROW><ROW><id>4692766</id><snippet>&gt;&gt;&gt; import scipy
&gt;&gt;&gt; x = scipy.array([1,2,3])
&gt;&gt;&gt; x
array([1, 2, 3])
&gt;&gt;&gt; y = x.tolist()     // That's it. A clean, succinct conversion to a list.
&gt;&gt;&gt; y
[1, 2, 3]
</snippet></ROW><ROW><id>4692766</id><snippet>&gt;&gt;&gt; import scipy
&gt;&gt;&gt; x = scipy.matrix([1,2,3]).transpose()
&gt;&gt;&gt; x
matrix([[1],
        [2],
        [3]])
&gt;&gt;&gt; y = x.T.tolist()[0]
&gt;&gt;&gt; y
[1, 2, 3]
</snippet></ROW><ROW><id>4692766</id><snippet>x.T.tolist()[0]</snippet></ROW><ROW><id>4692766</id><snippet>.T</snippet></ROW><ROW><id>4692766</id><snippet>.tolist()</snippet></ROW><ROW><id>4692766</id><snippet>[0]</snippet></ROW><ROW><id>4692947</id><snippet>autodoc_member_order = 'bysource'
</snippet></ROW><ROW><id>4692947</id><snippet>'bysource'</snippet></ROW><ROW><id>4693383</id><snippet>python.org</snippet></ROW><ROW><id>4693383</id><snippet>2to3</snippet></ROW><ROW><id>4693385</id><snippet>global</snippet></ROW><ROW><id>4693385</id><snippet>def bob():
    me = "locally defined"    # Defined only in local context
    print me

bob()
print me     # Asking for a global variable
</snippet></ROW><ROW><id>4693385</id><snippet>locally defined
Traceback (most recent call last):
  File "file.py", line 9, in &lt;module&gt;
    print me
NameError: name 'me' is not defined
</snippet></ROW><ROW><id>4693385</id><snippet>global</snippet></ROW><ROW><id>4693385</id><snippet>def bob():
    global me
    me = "locally defined"   # Defined locally but declared as global
    print me

bob()
print me     # Asking for a global variable
</snippet></ROW><ROW><id>4693385</id><snippet>locally defined
locally defined
</snippet></ROW><ROW><id>4693385</id><snippet>global</snippet></ROW><ROW><id>4693465</id><snippet>wx.PostEvent</snippet></ROW><ROW><id>4693465</id><snippet>DownloadProgressEvent, EVT_DL_PROGRESS = wx.lib.newevent.NewEvent()

# from the thread...

event = DownloadProgressEvent(current=100, total=1000, filename="foo.jpg")
wx.PostEvent(frame, event)

# from the frame:

def OnDownloadProgress(self, event):
    self.statusbar.update_dl_msg(event.current, event.total, event.filename)
</snippet></ROW><ROW><id>4693498</id><snippet>def include_tagcloud(request):
    if request.path == '/tagcould/':
        tagcloud = Tags.objects.filter(active=True) #whatever 
    return {'tagcloud': tagcloud}

def include_login(request):
    if request.user.is_authenticated():
        loginform = MyLoginForm(request.POST) 
        #passing a Django form + POST data in the case of re-submit
    return {'loginform' : loginform}
</snippet></ROW><ROW><id>4693498</id><snippet>{% if loginform %}
      &lt;form action="accounts/login/"&gt;
      {{form.as_p}}
      &lt;input type="submit" name="Login"&gt;
      &lt;/form&gt;
{% endif %}

{% if tagcloud %}
       {%for tag in tagcloud %}.....{%for}
{% endif %}
</snippet></ROW><ROW><id>4693498</id><snippet>{% if user.is_authenticated %}
    &lt;form action="accounts/login/"&gt;
    &lt;input type="text" name="username"&gt;&lt;input type="password" name="password"&gt;
    &lt;input type="submit" name="Login"&gt;
    &lt;/form&gt;
{% endif %}
</snippet></ROW><ROW><id>4693681</id><snippet>&gt;&gt;&gt; import pkgutil
&gt;&gt;&gt; package = pkgutil.get_loader("pip")
&gt;&gt;&gt; package.filename
'/usr/local/lib/python2.6/dist-packages/pip-0.7.1-py2.6.egg/pip'
&gt;&gt;&gt; package = pkgutil.get_loader("threading")
&gt;&gt;&gt; package.filename
'/usr/lib/python2.6/threading.py'
&gt;&gt;&gt; package = pkgutil.get_loader("sqlalchemy.orm")
&gt;&gt;&gt; package.filename
'/usr/lib/pymodules/python2.6/sqlalchemy/orm'
</snippet></ROW><ROW><id>4693681</id><snippet>&gt;&gt;&gt; import imp
&gt;&gt;&gt; imp.find_module('sqlalchemy')
(None, '/usr/lib/pymodules/python2.6/sqlalchemy', ('', '', 5))
&gt;&gt;&gt; imp.find_module('pip')
(None, '/usr/local/lib/python2.6/dist-packages/pip-0.7.1-py2.6.egg/pip', ('', '', 5))
&gt;&gt;&gt; imp.find_module('threading')
(&lt;open file '/usr/lib/python2.6/threading.py', mode 'U' at 0x7fb708573db0&gt;, '/usr/lib/python2.6/threading.py', ('.py', 'U', 1))
</snippet></ROW><ROW><id>4693681</id><snippet>imp.find_module('sqlalchmy.orm')</snippet></ROW><ROW><id>4693739</id><snippet>if len(sys.argv) == 1:
    parser.print_help()
</snippet></ROW><ROW><id>4693891</id><snippet>virtualenv --python=/path/to/python/version --no-site-packages ENV_NAME
</snippet></ROW><ROW><id>4693891</id><snippet>virtualenv --python=/usr/bin/python2.6 --no-site-packages my_project_env
</snippet></ROW><ROW><id>4693998</id><snippet>from datetime import timedelta

a = timedelta(seconds=6928727.56235)

# a is now datetime.timedelta(80, 16727, 562350)

print "%d days %02d:%02d:%02d" % (a.days, a.seconds / 3600, (a.seconds / 60) % 60, a.seconds % 60)
</snippet></ROW><ROW><id>4693998</id><snippet>80 days 04:38:47</snippet></ROW><ROW><id>4694037</id><snippet>#Set up the pygame window
screen = pygame.display.set_mode((200,200))
screen.fill((255, 255, 255))

#Set up image properties (would be better to make an object)
image_one = pygame.image.load("image_one.png").convert()
image_x = 225
image_y = 400
image_width = image_one.get_width()
image_height = image_one.get_height()

# Mouse properties
mouse_width = 10
mouse_height = 10

screen.blit(image_one, (image_x, image_y))
pygame.display.flip()

while 1:
    for event in pygame.event.get():
        if event.type == pygame.MOUSEMOTION:
            mouse_x, mouse_y = pygame.mouse.get_pos()

            # Test for 'collision'
            if image_x - mouse_width &lt; mouse_x &lt; image_x + image_width and image_y - mouse_height &lt; mouse_y &lt; image_y + image_height:
                print 'Hi!'
</snippet></ROW><ROW><id>4694505</id><snippet>ValidationError</snippet></ROW><ROW><id>4694505</id><snippet>print err</snippet></ROW><ROW><id>4694505</id><snippet>[u'Empty URL']</snippet></ROW><ROW><id>4694505</id><snippet>repr(err.messages)</snippet></ROW><ROW><id>4694505</id><snippet>ValidationError.__str__</snippet></ROW><ROW><id>4694505</id><snippet>ValidationError</snippet></ROW><ROW><id>4694505</id><snippet>print '; '.join(err.messages)
</snippet></ROW><ROW><id>4694701</id><snippet>{
   "records_by_date_product": {
       "map": "function(doc) {\n  emit([doc.prod_id, doc.logtime], doc);\n}"
   }
}
</snippet></ROW><ROW><id>4694701</id><snippet>prod_id in [1,3]
from_date = '2010-01-01 00:00:00'
to_date = '2010-01-02 00:00:00'
</snippet></ROW><ROW><id>4694701</id><snippet>http://localhost:5984/db/_design/sampleview/_view/records_by_date_product?startkey='\["1,2010-01-01%2000:00:00"\]'&amp;endkey='\[1,"2010-01-02%2000:00:00"\]'

http://localhost:5984/db/_design/sampleview/_view/records_by_date_product?startkey='\[2,"2010-01-01%2000:00:00"\]'&amp;endkey='\[2,"2010-01-02%2000:00:00"\]'
</snippet></ROW><ROW><id>4695052</id><snippet>os.environ['TZ']="America/New_York"
time.tzset()
</snippet></ROW><ROW><id>4695170</id><snippet>Deferred</snippet></ROW><ROW><id>4695170</id><snippet>remote_</snippet></ROW><ROW><id>4695422</id><snippet>&gt;&gt;&gt; a = '%he#llo, my website is: http://www.url.com/abcdef123'
&gt;&gt;&gt; re.findall('(http://\S+|\S*[^\w\s]\S*)',a)
['%he#llo,', 'is:', 'http://www.url.com/abcdef123']
</snippet></ROW><ROW><id>4695422</id><snippet>re.sub</snippet></ROW><ROW><id>4695422</id><snippet>&gt;&gt;&gt; re.sub('(http://\S+|\S*[^\w\s]\S*)','',a)
' my website  '
</snippet></ROW><ROW><id>4695422</id><snippet>|</snippet></ROW><ROW><id>4695422</id><snippet>http://</snippet></ROW><ROW><id>4695422</id><snippet>http://</snippet></ROW><ROW><id>4695422</id><snippet>/</snippet></ROW><ROW><id>4695422</id><snippet>\S*[^\w\s]\S*</snippet></ROW><ROW><id>4695437</id><snippet>re.findall()</snippet></ROW><ROW><id>4695437</id><snippet>(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&amp;%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\?\'\\\+&amp;%\$#\=~_\-]+))*
</snippet></ROW><ROW><id>4695437</id><snippet>matches = re.findall(r"(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&amp;%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\?\'\\\+&amp;%\$#\=~_\-]+))*", html)
</snippet></ROW><ROW><id>4695437</id><snippet>re.finditer</snippet></ROW><ROW><id>4695437</id><snippet>for match in re.finditer(r"(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&amp;%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\?\'\\\+&amp;%\$#\=~_\-]+))*", html):
    print match.group()
</snippet></ROW><ROW><id>4695468</id><snippet>def fetch_resources(uri, rel):
 """
 Callback to allow pisa/reportlab to retrieve Images,Stylesheets, etc.
 `uri` is the href attribute from the html link element.
 `rel` gives a relative path, but it's not used here.

 """
 path = os.path.join(settings.MEDIA_ROOT, uri.replace(settings.MEDIA_URL, ""))
 return path

def render_pdf (html):
 result = StringIO.StringIO()
 pdf = pisa.pisaDocument(StringIO.StringIO(html.encode("ISO-8859-1")), dest=result, link_callback=fetch_resources)
 return result
</snippet></ROW><ROW><id>4695498</id><snippet>xlrd</snippet></ROW><ROW><id>4695498</id><snippet>PI</snippet></ROW><ROW><id>4695498</id><snippet>=22/7</snippet></ROW><ROW><id>4695498</id><snippet>SALES</snippet></ROW><ROW><id>4695498</id><snippet>=Mktng!$A$2:$Z$99</snippet></ROW><ROW><id>4695498</id><snippet>B2 =A2
B3 =A3+B2
B4 =A4+B3
B5 =A5+B4
...
B60 =A60+B59
</snippet></ROW><ROW><id>4695498</id><snippet>B3:B60</snippet></ROW><ROW><id>4695498</id><snippet>xlrd</snippet></ROW><ROW><id>4695663</id><snippet>a &lt;= x &lt;= b</snippet></ROW><ROW><id>4695663</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; today = datetime.date.today()
&gt;&gt;&gt; margin = datetime.timedelta(days = 3)

&gt;&gt;&gt; today - margin &lt;= datetime.date(2011, 1, 15) &lt;= today + margin
True
</snippet></ROW><ROW><id>4695828</id><snippet>CAP_SYS_TTY_CONFIG</snippet></ROW><ROW><id>4695828</id><snippet>/dev/tty1</snippet></ROW><ROW><id>4695828</id><snippet>/dev/console</snippet></ROW><ROW><id>4695828</id><snippet>/*
 * To have permissions to do most of the vt ioctls, we either have
 * to be the owner of the tty, or have CAP_SYS_TTY_CONFIG.
 */
perm = 0;
if (current-&gt;signal-&gt;tty == tty || capable(CAP_SYS_TTY_CONFIG))
    perm = 1;
⋮
case KDSETLED:
    if (!perm)
        goto eperm;
    setledstate(kbd, arg);
    break;
</snippet></ROW><ROW><id>4695834</id><snippet>data</snippet></ROW><ROW><id>4695834</id><snippet>rows</snippet></ROW><ROW><id>4696161</id><snippet>doc = etree.fromstring(xml)
btags = doc.xpath('//a/b')
for b in btags:
    print b.text
</snippet></ROW><ROW><id>4696161</id><snippet>etree.fromstring</snippet></ROW><ROW><id>4696161</id><snippet>def fast_iter(context, func):
    # fast_iter is useful if you need to free memory while iterating through a
    # very large XML file.
    #
    # http://www.ibm.com/developerworks/xml/library/x-hiperfparse/
    # Author: Liza Daly
    for event, elem in context:
        func(elem)
        elem.clear()
        while elem.getprevious() is not None:
            del elem.getparent()[0]
    del context

def process_element(elt):
    print(elt.text)

context=etree.iterparse(io.BytesIO(xml), events=('end',), tag='b')
fast_iter(context, process_element)
</snippet></ROW><ROW><id>4696161</id><snippet>fast_iter</snippet></ROW><ROW><id>4696161</id><snippet>cElementTree</snippet></ROW><ROW><id>4696161</id><snippet>iterparse</snippet></ROW><ROW><id>4696492</id><snippet>def extract_urls(your_text):
  url_re = re.compile(r'\b(([\w-]+://?|www[.])[^\s()&lt;&gt;]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))')
  for match in url_re.finditer(your_text):
    yield match.group(0)
</snippet></ROW><ROW><id>4696492</id><snippet>&gt;&gt;&gt; for uri in extract_urls('http://foo.bar/baz irc://freenode.org/bash'):
...   print uri
http://foo.bar/
irc://freenode.org
</snippet></ROW><ROW><id>4696647</id><snippet>virtualenv</snippet></ROW><ROW><id>4696647</id><snippet>site-packages</snippet></ROW><ROW><id>4696647</id><snippet>/System/Library/Frameworks/</snippet></ROW><ROW><id>4696647</id><snippet>~/.local</snippet></ROW><ROW><id>4696647</id><snippet>/Library/Frameworks/Python.framework/</snippet></ROW><ROW><id>4696652</id><snippet>def swap_even_odd_entries(seq):
    tmp = list(seq)+[seq[-1]]  # convert sequence to mutable list and dup last
    for i in xrange(0, len(seq), 2):
        tmp[i],tmp[i+1] = tmp[i+1],tmp[i]  # swap each entry with following one
    return tuple(tmp[:len(seq)])  # remove any excess

a = (1, 0, 3, 2, 5, 4, 7, 6, 9, 8)
a = swap_even_odd_entries(a)
b = (91, 70, 23, 42, 75, 14, 87, 36, 19, 80)
b = swap_even_odd_entries(b)
c = (1, 0, 3, 2, 5)
c = swap_even_odd_entries(c)
print a
print b
print c
# output
#  (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
#  (70, 91, 42, 23, 14, 75, 36, 87, 80, 19)
#  (0, 1, 2, 3, 5)
</snippet></ROW><ROW><id>4696652</id><snippet>swap_even_odd_entries2 = lambda t: tuple(
    v for p in [(b,a) for a,b in zip(*[iter(t)]*2) + [(t[-1],)*2]]
        for v in p)[:len(t)]

a = (1, 0, 3, 2, 5, 4, 7, 6, 9, 8)
a = swap_even_odd_entries2(a)
b = (91, 70, 23, 42, 75, 14, 87, 36, 19, 80)
b = swap_even_odd_entries2(b)
c = (1, 0, 3, 2, 5)
c = swap_even_odd_entries2(c)
print
print a
print b
print c
# output
#  (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
#  (70, 91, 42, 23, 14, 75, 36, 87, 80, 19)
#  (0, 1, 2, 3, 5)
</snippet></ROW><ROW><id>4696669</id><snippet>Comments.objects.filter(content__author=request.user)
</snippet></ROW><ROW><id>4697036</id><snippet>min</snippet></ROW><ROW><id>4697036</id><snippet>max</snippet></ROW><ROW><id>4697036</id><snippet>num = int(request.GET.get("num", 20))
num = min(num, 50)
</snippet></ROW><ROW><id>4697047</id><snippet>def split(txt, seps):
    default_sep = seps[0]
    for sep in seps[1:]: # we skip seps[0] because that's the default seperator
        txt = txt.replace(sep, default_sep)
    return [i.strip() for i in txt.split(default_sep)]
</snippet></ROW><ROW><id>4697047</id><snippet>&gt;&gt;&gt; split('ABC ; DEF123,GHI_JKL ; MN OP', [',', ';'])
['ABC', 'DEF123', 'GHI_JKL', 'MN OP']
</snippet></ROW><ROW><id>4697047</id><snippet>&gt;&gt;&gt; r = re.compile(",|;")
&gt;&gt;&gt; timeit.timeit(lambda: [s.strip() for s in r.split('ABC ; DEF123,GHI_JKL ; MN OP')])
6.328812837600708

&gt;&gt;&gt; timeit.timeit(lambda: split('ABC ; DEF123,GHI_JKL ; MN OP', [',', ';']))
5.310855865478516
</snippet></ROW><ROW><id>4697472</id><snippet>Domain</snippet></ROW><ROW><id>4697472</id><snippet>COOKIE_FMT</snippet></ROW><ROW><id>4697472</id><snippet>xyz.com</snippet></ROW><ROW><id>4697472</id><snippet>.xyz.com</snippet></ROW><ROW><id>4697472</id><snippet>COOKIE_KEY</snippet></ROW><ROW><id>4697553</id><snippet>letters = "asdfHRbySFss"
uppers = [l for l in letters if l.isupper()]
</snippet></ROW><ROW><id>4697553</id><snippet>print "".join(uppers)
</snippet></ROW><ROW><id>4697636</id><snippet>json</snippet></ROW><ROW><id>4697636</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; translation = json.loads("""{
...  "data": {
...   "translations": [
...    {
...     "translatedText": "Toute votre base sont appartiennent  nous"
...    },
...    {
...     "translate": "¡Qué bien!"
...    }
...   ]
...  }
... }
... """)
&gt;&gt;&gt; translation
{u'data': {u'translations': [{u'translatedText': u'Toute votre base sont appartiennent  nous'}]}}
&gt;&gt;&gt; translation[u'data'][u'translations'][0][u'translatedText']
u'Toute votre base sont appartiennent  nous'
&gt;&gt;&gt; translation[u'data'][u'translations'][1][u'translate']
u'¡Qué bien!'
</snippet></ROW><ROW><id>4697744</id><snippet>a[:]</snippet></ROW><ROW><id>4697744</id><snippet>a[0:len(a)]</snippet></ROW><ROW><id>4697821</id><snippet>split()</snippet></ROW><ROW><id>4697821</id><snippet>word = word.split('in')
</snippet></ROW><ROW><id>4697821</id><snippet>for i in range(len(newlist)):
    word = newlist[i].split('in', 1)
    newlist[i] = word[1]
</snippet></ROW><ROW><id>4697850</id><snippet>user</snippet></ROW><ROW><id>4697850</id><snippet>None</snippet></ROW><ROW><id>4697850</id><snippet>None</snippet></ROW><ROW><id>4697850</id><snippet>else</snippet></ROW><ROW><id>4697870</id><snippet>def countBlackPixels(grayImg):
    (w,h) = cv.GetSize(grayImg)
    size = w * h
    return size - cv.CountNonZero(grayImg)
</snippet></ROW><ROW><id>4697884</id><snippet>re.findall</snippet></ROW><ROW><id>4697884</id><snippet>re.finditer</snippet></ROW><ROW><id>4697884</id><snippet>re.findall(pattern, string)</snippet></ROW><ROW><id>4697884</id><snippet>re.finditer(pattern, string)</snippet></ROW><ROW><id>4697884</id><snippet>MatchObject</snippet></ROW><ROW><id>4697952</id><snippet>standard_normal()</snippet></ROW><ROW><id>4697952</id><snippet>numpy.random.normal()</snippet></ROW><ROW><id>4697972</id><snippet>def glue(a, b):
    maxn = 0
    for n in xrange(1, 1 + min(len(a), len(b))):
        suffix = a[-n:]
        prefix = b[:n]
        if prefix == suffix:
            maxn = n
    # BUG: return maxn, a[:-maxn] + b
    # FAILS when maxn == 0
    # EXTRA TEST: ['nil', 'overlap']
    return a + b[maxn:]     


def multiglue(words):
    if not words: return ""
    result = words[0]
    for word in words[1:]:
        nx, rx = glue(result, word)
        ny, ry = glue(word, result)
        result = rx if nx &gt; ny else ry
    return result

tests = [line.split() for line in """
    one
    two one
    one two
    overlap nil
    nil overlap
    toad dog rabbit
    frog ogham
    ogham frog
    hopper grasshopper
    grass grasshopper person
    foooo oooof
    oooof foooo""".splitlines()]

for test in tests:
    out = multiglue(test)
    print test, repr(out)
</snippet></ROW><ROW><id>4697972</id><snippet>[] ''
['one'] 'one'
['two', 'one'] 'twone'
['one', 'two'] 'twone'
['overlap', 'nil'] 'niloverlap'
['nil', 'overlap'] 'overlapnil'
['toad', 'dog', 'rabbit'] 'rabbitoadog'
['frog', 'ogham'] 'frogham'
['ogham', 'frog'] 'frogham'
['hopper', 'grasshopper'] 'grasshopper'
['grass', 'grasshopper', 'person'] 'grasshopperson'
['foooo', 'oooof'] 'foooof'
['oooof', 'foooo'] 'foooof'
</snippet></ROW><ROW><id>4698052</id><snippet>if self.pair[v] and self.dfs(v):
</snippet></ROW><ROW><id>4698052</id><snippet>if self.pair[v] is None and self.dfs(v):
</snippet></ROW><ROW><id>4698052</id><snippet>v = self.q.pop()
</snippet></ROW><ROW><id>4698052</id><snippet>v = self.q.popleft()
</snippet></ROW><ROW><id>4698112</id><snippet>tag()</snippet></ROW><ROW><id>4698112</id><snippet>with</snippet></ROW><ROW><id>4698112</id><snippet>tag()</snippet></ROW><ROW><id>4698112</id><snippet>tag()</snippet></ROW><ROW><id>4698112</id><snippet>with</snippet></ROW><ROW><id>4698112</id><snippet>__enter__</snippet></ROW><ROW><id>4698112</id><snippet>__exit__</snippet></ROW><ROW><id>4698112</id><snippet>with</snippet></ROW><ROW><id>4698112</id><snippet>tag()</snippet></ROW><ROW><id>4698149</id><snippet>In C/C++, I believe that I would use pointers to reference the same piece of 
data from different keys.
</snippet></ROW><ROW><id>4698205</id><snippet>class UnicodeWriter:
    """
    A CSV writer which will write rows to CSV file "f",
    which is encoded in the given encoding.
    """

    def __init__(self, f, dialect=csv.excel, encoding="utf-8", **kwds):
        # Redirect output to a queue
        self.queue = cStringIO.StringIO()
        self.writer = csv.writer(self.queue, dialect=dialect, **kwds)
        self.stream = f
        self.encoder = codecs.getincrementalencoder(encoding)()

    def writerow(self, row):
        self.writer.writerow([s.encode("utf-8") for s in row])
        # Fetch UTF-8 output from the queue ...
        data = self.queue.getvalue()
        data = data.decode("utf-8")
        # ... and reencode it into the target encoding
        data = self.encoder.encode(data)
        # write to the target stream
        self.stream.write(data)
        # empty queue
        self.queue.truncate(0)

    def writerows(self, rows):
        for row in rows:
            self.writerow(row)
</snippet></ROW><ROW><id>4698277</id><snippet>self.request.url</snippet></ROW><ROW><id>4698277</id><snippet>RequestHandler</snippet></ROW><ROW><id>4698388</id><snippet>cflags</snippet></ROW><ROW><id>4698388</id><snippet>cflags</snippet></ROW><ROW><id>4698415</id><snippet>re.subn</snippet></ROW><ROW><id>4698415</id><snippet>count</snippet></ROW><ROW><id>4698415</id><snippet>flags</snippet></ROW><ROW><id>4698415</id><snippet>&gt;&gt;&gt; print (re.subn(r'&lt;(script).*?&lt;/\1&gt;(?s)', '', data)[0])

&lt;nothtml&gt; 
  &lt;head&gt; 
    &lt;title&gt;Regular Expression HOWTO &amp;mdash; Python v2.7.1 documentation&lt;/title&gt; 




&gt;&gt;&gt;
</snippet></ROW><ROW><id>4698415</id><snippet>&gt;&gt;&gt; print (re.subn(r'&lt;(script).*?&lt;/\1&gt;(?s)', '', 0, data)[0])
</snippet></ROW><ROW><id>4698415</id><snippet>0</snippet></ROW><ROW><id>4698415</id><snippet>count</snippet></ROW><ROW><id>4698550</id><snippet># Built-in namespace
import __builtin__

# Extended subclass
class mystr(str):
    def first_last(self):
        if self:
            return self[0] + self[-1]
        else:
            return ''

# Substitute the original str with the subclass on the built-in namespace    
__builtin__.str = mystr

print str(1234).first_last()
print str(0).first_last()
print str('').first_last()
print '0'.first_last()

output = """
14
00

Traceback (most recent call last):
  File "strp.py", line 16, in &lt;module&gt;
    print '0'.first_last()
AttributeError: 'str' object has no attribute 'first_last'
"""
</snippet></ROW><ROW><id>4698592</id><snippet>dev_appserver_main.py:466] &lt;class 'google.appengine.api.datastore_errors.InternalError'&gt;
Are you using FloatProperty and/or GeoPtProperty? Unfortunately loading float values from the datastore file does not work with Python 2.5.0.</snippet></ROW><ROW><id>4698592</id><snippet>-c</snippet></ROW><ROW><id>4698592</id><snippet>Greeting</snippet></ROW><ROW><id>4698592</id><snippet>blogPosts = db.GqlQuery("SELECT * FROM BlogPost ORDER BY date DESC LIMIT 10")</snippet></ROW><ROW><id>4698592</id><snippet>date</snippet></ROW><ROW><id>4698592</id><snippet>postDate = db.DateTimeProperty(auto_now_add=True)</snippet></ROW><ROW><id>4698592</id><snippet>blogPosts = db.GqlQuery("SELECT * FROM BlogPost ORDER BY postDate DESC LIMIT 10")</snippet></ROW><ROW><id>4698760</id><snippet>__getitem__</snippet></ROW><ROW><id>4698760</id><snippet>&gt;&gt;&gt; class MyDatabase(object):
...     def __getitem__(self, x):
...         if 10 &lt;= x &lt;= 15:
...             return "foo"
...         else:
...             raise IndexError('key not in database')
...
&gt;&gt;&gt; db = MyDatabase()
&gt;&gt;&gt; db[12]
foo
</snippet></ROW><ROW><id>4698863</id><snippet>import collections

file_data = collections.defaultdict(list)

with open("you_file") as f
    for line in file:
        tag, data  = line.split('\t', 1)
        file_data[tag].append(data) 

for file_name, data in file_data.items():
    with open(file_name, 'w') as f:
         f.write("\n".join(data))
</snippet></ROW><ROW><id>4698948</id><snippet>d = dict((m.get(k, k), v) for (k, v) in d.items())
</snippet></ROW><ROW><id>4699069</id><snippet>from django.core.serializers import serialize
from django.db.models.query import QuerySet
from django.utils import simplejson
from django.utils.safestring import mark_safe
from django.template import Library

register = Library()

def jsonify(object):
    if isinstance(object, QuerySet):
        return mark_safe(serialize('json', object))
    return mark_safe(simplejson.dumps(object))

register.filter('jsonify', jsonify)
jsonify.is_safe = True   
</snippet></ROW><ROW><id>4699069</id><snippet>//without template filter (you'll need to serialise in the view)
var data = jQuery.parseJSON('{{ json_data|safe }}');
alert(data.length);

//using template filter    
var data2 = jQuery.parseJSON('{{ record_list|jsonify }}');
alert(data2.length);
</snippet></ROW><ROW><id>4699079</id><snippet>OrderedDict</snippet></ROW><ROW><id>4699128</id><snippet>scala&gt; val s = "abc"
s: java.lang.String = abc

scala&gt; s.&lt;tab&gt;

+                     asInstanceOf          charAt
codePointAt           codePointBefore       codePointCount
compareTo             compareToIgnoreCase   concat
contains              contentEquals         endsWith
equalsIgnoreCase      getBytes              getChars
indexOf               intern                isEmpty
isInstanceOf          lastIndexOf           length
matches               offsetByCodePoints    regionMatches
replace               replaceAll            replaceFirst
split                 startsWith            subSequence
substring             toCharArray           toLowerCase
toString              toUpperCase           trim
</snippet></ROW><ROW><id>4699190</id><snippet>class string(str):
    def sayHello(self):
        print(self, "is saying 'hello'")
</snippet></ROW><ROW><id>4699190</id><snippet>&gt;&gt;&gt; x = string("test")
&gt;&gt;&gt; x
'test'
&gt;&gt;&gt; x.sayHello()
test is saying 'hello'
</snippet></ROW><ROW><id>4699190</id><snippet>class str(str):</snippet></ROW><ROW><id>4699190</id><snippet>"test"</snippet></ROW><ROW><id>4699190</id><snippet>str</snippet></ROW><ROW><id>4699190</id><snippet>&gt;&gt;&gt; x = "hello"
&gt;&gt;&gt; x.sayHello()
Traceback (most recent call last):
  File "&lt;pyshell#10&gt;", line 1, in &lt;module&gt;
    x.sayHello()
AttributeError: 'str' object has no attribute 'sayHello'
&gt;&gt;&gt; x = str("hello")
&gt;&gt;&gt; x.sayHello()
hello is saying 'hello'
</snippet></ROW><ROW><id>4699498</id><snippet>def perm2(n):
    if n == 1:
        print a
    else:
        for i in range(n):  # &lt;&lt; here
            swap(i, n-1) 
            perm2(n-1)
            swap(i, n-1)
</snippet></ROW><ROW><id>4699498</id><snippet>['b', 'c', 'a']
['c', 'b', 'a']
['c', 'a', 'b']
['a', 'c', 'b']
['b', 'a', 'c']
['a', 'b', 'c']
</snippet></ROW><ROW><id>4699811</id><snippet>email_body.html</snippet></ROW><ROW><id>4699811</id><snippet>models.py</snippet></ROW><ROW><id>4700141</id><snippet>import networkx as nx
G=nx.DiGraph(nx.gnp_random_graph(1000,0.001))
t1=[n for n,k in G.out_degree_iter() if k==2
</snippet></ROW><ROW><id>4700141</id><snippet>t2=[n for n,nbrs in G.succ.items() if len(nbrs)==2]
</snippet></ROW><ROW><id>4700141</id><snippet>In [41]: %timeit t1=[n for n,k in G.out_degree_iter() if k==2]
1000 loops, best of 3: 368 us per loop

In [42]: %timeit s2=[n for n,nbrs in G.succ.items() if len(nbrs)==2]
1000 loops, best of 3: 198 us per loop
</snippet></ROW><ROW><id>4700471</id><snippet>import csv
reader1 = csv.reader(open('data1.csv', 'rb'), delimiter=',', quotechar='"'))
row1 = reader1.next()
reader2 = csv.reader(open('data2.csv', 'rb'), delimiter=',', quotechar='"'))
row2 = reader2.next()
if (row1[0] == row2[0]) and (row1[2:] == row2[2:]):
    print "eq"
else:
    print "different"
</snippet></ROW><ROW><id>4700574</id><snippet>urlparse</snippet></ROW><ROW><id>4700946</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; html = '&lt;input type="text" value="http://uploadir.com/u/bb41c5b3" /&gt;';
&gt;&gt;&gt; regex = r'http://uploadir.com/u/([^"]+)'
&gt;&gt;&gt; link = re.findall(regex, html)
&gt;&gt;&gt; link
['bb41c5b3']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4701054</id><snippet>error: /Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/easy-install.pth: Permission denied
</snippet></ROW><ROW><id>4701054</id><snippet>easy_install</snippet></ROW><ROW><id>4701353</id><snippet>MyObject(field1='foo', field2='bar')
</snippet></ROW><ROW><id>4701353</id><snippet>MyObject.objects.get(field1='baz')
</snippet></ROW><ROW><id>4701353</id><snippet>post_init</snippet></ROW><ROW><id>4701353</id><snippet>save</snippet></ROW><ROW><id>4701353</id><snippet>pre_save</snippet></ROW><ROW><id>4701353</id><snippet>post_save</snippet></ROW><ROW><id>4701353</id><snippet>pk</snippet></ROW><ROW><id>4701361</id><snippet>tHandlerStructure</snippet></ROW><ROW><id>4701361</id><snippet>stHandlerStructure = tHandlerStructure(OnFirst,OnSecond)
</snippet></ROW><ROW><id>4701361</id><snippet>from ctypes import *

firsttype = CFUNCTYPE(c_void_p, c_int)
secondtype = CFUNCTYPE(c_void_p, c_int)

@firsttype
def OnFirst(i):
    print "OnFirst"

@secondtype
def OnSecond(i):
    print "OnSecond" 

class tHandlerStructure(Structure):
    _fields_ = [
    ("firstCallback",firsttype),
    ("secondCallback",secondtype)
    ]

stHandlerStructure = tHandlerStructure(OnFirst,OnSecond)

cdll.myDll.Initialize.argtypes = [POINTER(tHandlerStructure)]
cdll.myDll.Initialize.restype = c_void_p

cdll.myDll.Initialize(stHandlerStructure)
</snippet></ROW><ROW><id>4701404</id><snippet>(-b +- sqrt(b^2-4ac)) / 2a</snippet></ROW><ROW><id>4701404</id><snippet>b</snippet></ROW><ROW><id>4701404</id><snippet>def quadratic(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant &lt; 0:
      return []
    elif discriminant == 0:
      return [-b / (2*a)]
    else:
      root = math.sqrt(discriminant)
      return [(-b + root) / (2*a), (-b - root) / (2*a)]

print quadratic(2, 3, 2) # []
print quadratic(2, 4, 2) # [-1]                    
print quadratic(2, 5, 2) # [-0.5, -2.0]
</snippet></ROW><ROW><id>4701524</id><snippet>httpGet.setURI(new URI(url + "/user?nickname=John") 
</snippet></ROW><ROW><id>4701524</id><snippet>localhost</snippet></ROW><ROW><id>4701524</id><snippet>127.0.0.1</snippet></ROW><ROW><id>4701524</id><snippet>String url = "http://192.168.1.104";
httpGet.setURI(new URI(url + "/user?nickname=John");
</snippet></ROW><ROW><id>4701524</id><snippet>gender = self.get_argument("gender",None)</snippet></ROW><ROW><id>4701524</id><snippet>None</snippet></ROW><ROW><id>4701524</id><snippet>gender</snippet></ROW><ROW><id>4701591</id><snippet>gobject.timeout_add(delay, function)</snippet></ROW><ROW><id>4701591</id><snippet>gobject.idle_add(function)</snippet></ROW><ROW><id>4701591</id><snippet>for i in range(X):
    gobject.idle_add(workerFunction)
</snippet></ROW><ROW><id>4701591</id><snippet>gobject.timeout_add(delay, function)</snippet></ROW><ROW><id>4701591</id><snippet>gobject.idle_add(function)</snippet></ROW><ROW><id>4701603</id><snippet>request</snippet></ROW><ROW><id>4701603</id><snippet>path</snippet></ROW><ROW><id>4701690</id><snippet>def run_with_delay(funcs, interval):
    for f in funcs[:-1]:
        before = time()
        f()
        # compensate the interval with the execution time.
        # NB: careful for functions that have a greater
        #     execution time than interval
        after = time()
        if after - before &lt; interval:
            sleep(interval - (after - before))
    # last function is taken separately because we don't need
    # an extra useless sleep
    funcs[-1]()
</snippet></ROW><ROW><id>4701984</id><snippet>svnlook</snippet></ROW><ROW><id>4701984</id><snippet>svnlook help</snippet></ROW><ROW><id>4702188</id><snippet>&gt;&gt;&gt; s1 = ['bacon\n', 'eggs\n', 'ham\n', 'guido\n']
&gt;&gt;&gt; s2 = ['python\n', 'eggy\n', 'hamster\n', 'guido\n']
&gt;&gt;&gt; for line in context_diff(s1, s2, fromfile='before.py', tofile='after.py'):
...     sys.stdout.write(line)  # doctest: +NORMALIZE_WHITESPACE
*** before.py
--- after.py
***************
*** 1,4 ****
! bacon
! eggs
! ham
  guido
--- 1,4 ----
! python
! eggy
! hamster
  guido
</snippet></ROW><ROW><id>4702227</id><snippet>Python</snippet></ROW><ROW><id>4702227</id><snippet>PowerShell</snippet></ROW><ROW><id>4702227</id><snippet>Windows PowerShell is Microsoft's task automation framework, consisting of a command-line shell and associated scripting language built on top of, and integrated with the .NET Framework. PowerShell provides full access to COM and WMI, enabling administrators to perform administrative tasks on both local and remote Windows systems.</snippet></ROW><ROW><id>4702277</id><snippet>json.dumps</snippet></ROW><ROW><id>4702277</id><snippet>from django.core.serializers.json import DjangoJSONEncoder
json.dumps(mydict, cls=DjangoJSONEncoder)
</snippet></ROW><ROW><id>4702280</id><snippet>def func():
    return 1,2,3

a,b,c = func()
</snippet></ROW><ROW><id>4702280</id><snippet>def func(a):
    a.append(1)
    a.append(2)
    a.append(3)

L=[]
func(L)
print L
</snippet></ROW><ROW><id>4702290</id><snippet>os.listdir()</snippet></ROW><ROW><id>4702290</id><snippet>import os
import re

print([x for x in os.listdir(".") if re.match(r"[a-z]+[0-9]+", x)])
</snippet></ROW><ROW><id>4702433</id><snippet>__bar</snippet></ROW><ROW><id>4702433</id><snippet>__bar</snippet></ROW><ROW><id>4702433</id><snippet>_(classname)__bar</snippet></ROW><ROW><id>4702433</id><snippet>Choices are: _Foo__bar</snippet></ROW><ROW><id>4702433</id><snippet>bar</snippet></ROW><ROW><id>4702476</id><snippet>b</snippet></ROW><ROW><id>4702476</id><snippet>yield</snippet></ROW><ROW><id>4702476</id><snippet>activate(a, a.function()) #called from process b
</snippet></ROW><ROW><id>4702476</id><snippet>class a(Process):
    def function(self):
        yield release, self, r
        yield passivate, self
</snippet></ROW><ROW><id>4702566</id><snippet>print("Hello")
</snippet></ROW><ROW><id>4702744</id><snippet>#define PYTHON_ERROR(TYPE, REASON) \
{ \
    PyErr_SetString(TYPE, REASON); \
    throw bp::error_already_set(); \
}

template&lt;class T&gt;
inline PyObject * managingPyObject(T *p)
{
    return typename bp::manage_new_object::apply&lt;T *&gt;::type()(p);
}

template&lt;class Copyable&gt;
bp::object
generic__copy__(bp::object copyable)
{
    Copyable *newCopyable(new Copyable(bp::extract&lt;const Copyable
&amp;&gt;(copyable)));
    bp::object
result(bp::detail::new_reference(managingPyObject(newCopyable)));

    bp::extract&lt;bp::dict&gt;(result.attr("__dict__"))().update(
        copyable.attr("__dict__"));

    return result;
}

template&lt;class Copyable&gt;
bp::object
generic__deepcopy__(bp::object copyable, bp::dict memo)
{
    bp::object copyMod = bp::import("copy");
    bp::object deepcopy = copyMod.attr("deepcopy");

    Copyable *newCopyable(new Copyable(bp::extract&lt;const Copyable
&amp;&gt;(copyable)));
    bp::object
result(bp::detail::new_reference(managingPyObject(newCopyable)));

    // HACK: copyableId shall be the same as the result of id(copyable)
in Python -
    // please tell me that there is a better way! (and which ;-p)
    int copyableId = (int)(copyable.ptr());
    memo[copyableId] = result;

    bp::extract&lt;bp::dict&gt;(result.attr("__dict__"))().update(
        deepcopy(bp::extract&lt;bp::dict&gt;(copyable.attr("__dict__"))(),
memo));

    return result;
}
</snippet></ROW><ROW><id>4702744</id><snippet>class_&lt;foo&gt;(foo)
   .def("__copy__", &amp;generic__copy__&lt; foo &gt;)
   .def("__deepcopy__", &amp;generic__deepcopy__&lt; foo &gt;)
   .def(init&lt; const foo &amp; &gt;())
</snippet></ROW><ROW><id>4702762</id><snippet>from guardian.shortcuts import get_objects_for_user
...
videos = get_objects_for_user(request.user, "view_video", Video.objects.all())
</snippet></ROW><ROW><id>4703084</id><snippet>$ echo $PATH
</snippet></ROW><ROW><id>4703236</id><snippet>class MyForm(forms.ModelForm):
  start_datetime=forms.SplitDateTimeField(input_time_formats=['%I:%M %p'])
  end_datetime=forms.SplitDateTimeField(input_time_formats=['%I:%M %p'])

  class Meta:
    model=MyModel
    exclude=('start_datetime','end_datetime')

  def clean(self):
    self.instance.start_datetime=self.cleaned_data.get('start_datetime')
    self.instance.end_datetime=self.cleaned_data.get('end_datetime')
</snippet></ROW><ROW><id>4703264</id><snippet>class MyBaseModel(BaseModel):
    def serialize():
        abstract # this will throw an error if it's called without being overwritten

class Post(MyBaseModel):
    title = db.stringProperty()
    body = db.textProperty()
    user = db.referenceProperty(User)

    # etc etc etc
    def serialize(self):
        return {
            'title' : self.title,
            'body' : self.body,
            'user' : self.user.serialize()
            # etc
        }
</snippet></ROW><ROW><id>4703284</id><snippet>'.json'</snippet></ROW><ROW><id>4703284</id><snippet>#!/usr/bin/env python
import json
import urllib2

url = "http://www.reddit.com/r/all/top/.json"
data = json.load(urllib2.urlopen(url))
for child in data['data']['children']:
    print child['data']['title']
</snippet></ROW><ROW><id>4703284</id><snippet>It's shit like this, reddit.
My autistic kid wanted some comment about his lion
How I got revenge on my cheating girlfriend [Based on a True Story]
no one is going to mess my with my laptop in the airport... no...
she's not there
Remember that unofficial Mortal Kombat film trailer 
with real Hollywood actors who helped out? 
(Michael Jai White, Jeri Ryan, Matt Mullins, etc) It's 
been greenlit to become an official mini-series.
Happy B-Day to me, 2 years clean and sober.
Mike Hunt strikes again!
FREE CAKE
real eyes
How to lose a job at Iowa State University. Just point out that cows naturally eat grass and not corn.
I'm sorry, I still can't get over the fact that the proposed health care repeal is ACTUALLY named "Repealing The Job-Killing Health Care Law Act." It's as if a bunch of three year olds named it.
This is why it gets cold in my bedroom at night.
Reddit, am I your tallest user?
Pharmacist Denies Anti-Bleeding Medication Because Woman Might Have Had an Abortion
Seems like I found a real pirate!
Reddit, a simple lifehack to save a family possibly hundreds a year on soap products.
China turns out First Solar Powered Air Conditioner capable of sending excess power back into the Grid ..50,000 models to head to US markets
“The Founding Fathers would have hated your guts…they were everything you despise. They studied science, read Plato, hung out in Paris, and thought the Bible was mostly bullshit.” - Maher on the Tea Party
Forget tropical beaches, this is what I'm doing for vacation [PIC]
How to teach kids science! [SMBC]
Lopsided coin {pic}
This is how I feel when my friends ask "how I know all this shit"
Fish helmet (pic)
Subtle
</snippet></ROW><ROW><id>4703321</id><snippet>Product.manufacturer == 'bar' =&gt; Product.manufacturer.__eq__('bar')
Product.manufacturer != 'foo' =&gt; Product.manufacturer.__ne__('foo')
</snippet></ROW><ROW><id>4703321</id><snippet>getattr</snippet></ROW><ROW><id>4703321</id><snippet>method_map = {'==': '__eq__', '!=': '__ne__'}
comparison = getattr(Product.manufacturer, method_map[op])   # Here, 'op' is the operator (!=)
sqlalchemy.or_(comparison('foo'), comparison('bar'))         # Equivalent to: Product.manufacturer != 'foo' || Product.manufacturer != 'bar'
</snippet></ROW><ROW><id>4703409</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall("\d+.\d+", "Current Level: 13.4 db.")
['13.4']
</snippet></ROW><ROW><id>4703409</id><snippet>&gt;&gt;&gt; re.findall(r"[-+]?\d*\.\d+|\d+", "Current Level: -13.2 db or 14.2 or 3")
['-13.2', '14.2', '3']
</snippet></ROW><ROW><id>4703409</id><snippet>user_input = "Current Level: 1e100 db"
for token in user_input.split():
    try:
        # if this succeeds, you have your (first) float
        print float(token), "is a float"
    except ValueError:
        print token, "is something else"

# =&gt; Would print ...
#
# Current is something else
# Level: is something else
# 1e+100 is a float
# db is something else
</snippet></ROW><ROW><id>4703413</id><snippet>http://www.whfoods.com/genpage.php?tname=foodspice&amp;dbid=97</snippet></ROW><ROW><id>4703413</id><snippet>Line 253, column 147: non SGML character number 150

  …ed mushrooms by Liquid Chromatography  Mass Spectroscopy. The 230th ACS Natio…
</snippet></ROW><ROW><id>4703413</id><snippet>&gt;&gt;&gt; import unicodedata as ucd
&gt;&gt;&gt; ucd.name(chr(150).decode('cp1252'))
'EN DASH'
</snippet></ROW><ROW><id>4703526</id><snippet>&gt;&gt;&gt; r'abc\dev\t'
'abc\\dev\\t'
</snippet></ROW><ROW><id>4703566</id><snippet>user = meta.Session.query(model.User).filter_by(name=user_name).first()
</snippet></ROW><ROW><id>4703566</id><snippet>user = meta.Session.query(model.User).filter(model.User.name=user_name).first()
</snippet></ROW><ROW><id>4703566</id><snippet>first()</snippet></ROW><ROW><id>4703566</id><snippet>one()</snippet></ROW><ROW><id>4703898</id><snippet>enumerate</snippet></ROW><ROW><id>4703898</id><snippet>&gt;&gt;&gt; for i, season in enumerate(['Spring', 'Summer', 'Fall', 'Winter']):
...     print i, season
0 Spring
1 Summer
2 Fall
3 Winter
</snippet></ROW><ROW><id>4704028</id><snippet>changectx</snippet></ROW><ROW><id>4704028</id><snippet>from mercurial import ui, hg, commands

myui = ui.ui()
repourl = "https://ninja-ide.googlecode.com/hg/"

commands.clone(myui, repourl, 'ninja')
r = hg.repository(myui, './ninja')
c = r.changectx("tip")

# show some information about the changeset
print c # represented as the changeset hash
print c.user()
print c.description()
print

# let's take a peek at the files
files = c.files()
for f in files:
 fc = c[f]
 print " ", f, len(fc.data())
</snippet></ROW><ROW><id>4704113</id><snippet>from nose.tools import assert_in, assert_is
</snippet></ROW><ROW><id>4704120</id><snippet>import distutils.command.build
from distutils.dist import Distribution

b = distutils.command.build.build(Distribution())
b.initialize_options()
b.finalize_options()

print b.build_temp

# If you're building a library, you might need:
print b.build_lib

# Other values of interest are:
b.build_purelib
b.build_platlib
b.build_scripts
b.build_base
</snippet></ROW><ROW><id>4704462</id><snippet>thestring = thestring.decode('utf8')
</snippet></ROW><ROW><id>4704588</id><snippet>A.__init__</snippet></ROW><ROW><id>4704588</id><snippet>createDrivers</snippet></ROW><ROW><id>4704588</id><snippet>callable(self.createDrivers)</snippet></ROW><ROW><id>4704588</id><snippet>createDrivers</snippet></ROW><ROW><id>4704588</id><snippet>class A(object):
    def __init__(self, *args, **kwargs):
       try:
           self._drivers = self.createDrivers(*args, **kwargs)
           select(self._drivers)
       except NotImplementedError:
           pass

    def createDrivers(self, *args, **kwargs):
        raise NotImplementedError("This class wasn't implemented")

class B(A):
    def createDrivers(self, *args, **kwargs):
        c1 = circle(sweep=270)[0]
        c2 = circle(sweep=180)[0]
        return c1, c2

class C(A):
    pass
</snippet></ROW><ROW><id>4704588</id><snippet>callable(self.createDrivers)</snippet></ROW><ROW><id>4704588</id><snippet>hasattr(self, 'createDrivers')</snippet></ROW><ROW><id>4704652</id><snippet>#include</snippet></ROW><ROW><id>4704652</id><snippet>pygame</snippet></ROW><ROW><id>4704652</id><snippet>one</snippet></ROW><ROW><id>4704726</id><snippet>dispatch</snippet></ROW><ROW><id>4705064</id><snippet>models.py</snippet></ROW><ROW><id>4705064</id><snippet>myproject/myapplication/models.py</snippet></ROW><ROW><id>4705101</id><snippet>import multiprocessing, random, time

def worker(num):
    """thread worker function"""
    time.sleep(random.randint(1,10))
    print 'Worker:', num
    return

if __name__ == '__main__':
    jobs = []
    for i in range(5):
        p = multiprocessing.Process(target=worker, args=(i,))
        jobs.append(p)
        p.start()

    while True:
        time.sleep(2)
        for n, p in enumerate(jobs):
            if not p.is_alive():
                jobs.pop(n)
                i += 1
                p = multiprocessing.Process(target=worker, args=(i,))
                jobs.append(p)
                p.start()
</snippet></ROW><ROW><id>4705131</id><snippet>g.triple(triple_pattern)</snippet></ROW><ROW><id>4705131</id><snippet>http://www.w3.org/1999/02/22-rdf-syntax-ns#_1</snippet></ROW><ROW><id>4705131</id><snippet>http://www.w3.org/1999/02/22-rdf-syntax-ns#_2</snippet></ROW><ROW><id>4705131</id><snippet>http://www.w3.org/1999/02/22-rdf-syntax-ns#_3</snippet></ROW><ROW><id>4705131</id><snippet>import rdflib

RDF = rdflib.namespace.RDF

#Parse the file
g = rdflib.Graph()
g.parse("zot.rdf")

#So that we are sure we get something back
print "Number of triples",len(g)

#Couple of handy namespaces to use later
BIB = rdflib.Namespace("http://purl.org/net/biblio#")
FOAF = rdflib.Namespace("http://xmlns.com/foaf/0.1/")

#Author counter to print at the bottom
i=0

#Article for wich we want the list of authors
article = rdflib.term.URIRef("http://www.ncbi.nlm.nih.gov/pubmed/18273724")

#First loop filters is equivalent to "get all authors for article x" 
for triple in g.triples((article,BIB["authors"],None)):

    #This expresions removes the rdf:type predicate cause we only want the bnodes
    # of the form http://www.w3.org/1999/02/22-rdf-syntax-ns#_SEQ_NUMBER
    # where SEQ_NUMBER is the index of the element in the rdf:Seq
    list_triples = filter(lambda y: RDF['type'] != y[1], g.triples((triple[2],None,None)))

    #We sort the authors by the predicate of the triple - order in sequences do matter ;-)
    # so "http://www.w3.org/1999/02/22-rdf-syntax-ns#_435"[44:] returns 435
    # and since we want numberic order we do int(x[1][44:]) - (BTW x[1] is the predicate)
    authors_sorted =  sorted(list_triples,key=lambda x: int(x[1][44:]))

    #We iterate the authors bNodes and we get surname and givenname
    for author_bnode in authors_sorted:
        for x in g.triples((author_bnode[2],FOAF['surname'],None)):
            author_surname = x[2]
        for y in g.triples((author_bnode[2],FOAF['givenname'],None)):
            author_name = y[2]
        print "author(%s): %s %s"%(i,author_name,author_surname)
        i += 1
</snippet></ROW><ROW><id>4705131</id><snippet>rdflib.plugin.register('sparql', rdflib.query.Processor,
                       'rdfextras.sparql.processor', 'Processor')
rdflib.plugin.register('sparql', rdflib.query.Result,
                       'rdfextras.sparql.query', 'SPARQLQueryResult')

query = """
SELECT ?seq_index ?name ?surname WHERE {
     &lt;http://www.ncbi.nlm.nih.gov/pubmed/18273724&gt; bib:authors ?seq .
     ?seq ?seq_index ?seq_bnode .
     ?seq_bnode foaf:givenname ?name .
     ?seq_bnode foaf:surname ?surname .
}
"""
for row in sorted(g.query(query, initNs=dict(rdf=RDF,foaf=FOAF,bib=BIB)),
                                                  key=lambda x:int(x[0][44:])):
    print "Author(%s) %s %s"%(row[0][44:],row[1],row[2])
</snippet></ROW><ROW><id>4705131</id><snippet>seq_index</snippet></ROW><ROW><id>4705138</id><snippet>mainWidget = QtGui.QWidget()
mainWidget.setLayout(layout)

scrollWidget = QtGui.QScrollArea()
scrollWidget.setWidget(mainWidget)
scrollWidget.setWidgetResizable(True) # &lt;---------------

self.setCentralWidget(scrollWidget)
</snippet></ROW><ROW><id>4705244</id><snippet>x1 = 1 * 16^8 * 2^3
x2 = 2 * 16^7 * 2^2
x3 = 3 * 16^6 * 2^1
x4 = 4 * 16^4 * 2^4
x5 = 5 * 16^3 * 2^3
x6 = 6 * 16^2 * 2^2
x7 = 7 * 16^1 * 2^1
x8 = 8 * 16^0 * 2^0
</snippet></ROW><ROW><id>4705244</id><snippet>16^4</snippet></ROW><ROW><id>4705244</id><snippet>16^6</snippet></ROW><ROW><id>4705244</id><snippet>x1 = 1 * 16^7 * 16^1 * 2^3
x2 = 2 * 16^6 * 16^1 * 2^2
x3 = 3 * 16^5 * 16^1 * 2^1
x4 = 4 * 16^4 * 2^4
x5 = 5 * 16^3 * 2^3
x6 = 6 * 16^2 * 2^2
x7 = 7 * 16^1 * 2^1
x8 = 8 * 16^0 * 2^0
</snippet></ROW><ROW><id>4705244</id><snippet>16^1</snippet></ROW><ROW><id>4705244</id><snippet>2^4</snippet></ROW><ROW><id>4705244</id><snippet>x1 = 1 * 16^7 * 2^4 * 2^3
x2 = 2 * 16^6 * 2^4 * 2^2
x3 = 3 * 16^5 * 2^4 * 2^1
x4 = 4 * 16^4 * 2^4
x5 = 5 * 16^3 * 2^3
x6 = 6 * 16^2 * 2^2
x7 = 7 * 16^1 * 2^1
x8 = 8 * 16^0 * 2^0
</snippet></ROW><ROW><id>4705244</id><snippet>x1 = 1 * 16^7 * 2^7
x2 = 2 * 16^6 * 2^6
x3 = 3 * 16^5 * 2^5
x4 = 4 * 16^4 * 2^4
x5 = 5 * 16^3 * 2^3
x6 = 6 * 16^2 * 2^2
x7 = 7 * 16^1 * 2^1
x8 = 8 * 16^0 * 2^0
</snippet></ROW><ROW><id>4705244</id><snippet>2^something</snippet></ROW><ROW><id>4705244</id><snippet>x1 = 1 * 16^7 &lt;&lt; 7
x2 = 2 * 16^6 &lt;&lt; 6
x3 = 3 * 16^5 &lt;&lt; 5
x4 = 4 * 16^4 &lt;&lt; 4
x5 = 5 * 16^3 &lt;&lt; 3
x6 = 6 * 16^2 &lt;&lt; 2
x7 = 7 * 16^1 &lt;&lt; 1
x8 = 8 * 16^0 &lt;&lt; 0
</snippet></ROW><ROW><id>4705244</id><snippet>16^something</snippet></ROW><ROW><id>4705244</id><snippet>AAAABBBB CCCCDDDD EEEEFFFF GGGGHHHH
</snippet></ROW><ROW><id>4705244</id><snippet>0AAAA0BB BB0CCCC0 DDDD0EEE E0FFFF0G GGG0HHHH
</snippet></ROW><ROW><id>4705244</id><snippet>void convert(unsigned char five[], unsigned char four[]) {
    four[0] = (five[0] &lt;&lt; 1) &amp; 0xF0  // 11110000
            | (five[0] &lt;&lt; 2) &amp; 0x0C  // 00001100
            | (five[1] &gt;&gt; 6) &amp; 0x03; // 00000011
    four[1] = (five[1] &lt;&lt; 3) &amp; 0xF0  // 11110000
            | (five[2] &gt;&gt; 4) &amp; 0x0F; // 00001111
    four[2] = (five[2] &lt;&lt; 5) &amp; 0xE0  // 11100000
            | (five[3] &gt;&gt; 3) &amp; 0x10  // 00010000
            | (five[3] &gt;&gt; 2) &amp; 0x0F; // 00001111
    four[3] = (five[3] &lt;&lt; 7) &amp; 0x80  // 10000000
            | (five[4] &gt;&gt; 1) &amp; 0x70  // 01110000
            | (five[4])      &amp; 0x0F; // 00001111
}
</snippet></ROW><ROW><id>4705244</id><snippet> 08 42 10 84 21      11 11 11 11
 10 84 21 8C 63      22 22 33 33
 52 D8 D0 88 64      AB CD 12 34
 21 4E 84 98 62      45 78 96 32
 7B DE F7 BD EF      FF FF FF FF
</snippet></ROW><ROW><id>4705777</id><snippet>$ awk '/Mark End/{f=0}/Mark Begin/{f=1;next}f' file
Text 2
Text 4

$ awk '/Mark End/{f=0}/Mark Begin/{f=1;next}f{p=$0}END{print p}' file
Text 4
</snippet></ROW><ROW><id>4705932</id><snippet>s=url['title']</snippet></ROW><ROW><id>4705932</id><snippet>s</snippet></ROW><ROW><id>4705932</id><snippet>In [48]: s=u'Oscar Winners Best Pictures Box Set \xc2\xa36.49'
</snippet></ROW><ROW><id>4705932</id><snippet>url</snippet></ROW><ROW><id>4705932</id><snippet>url</snippet></ROW><ROW><id>4705932</id><snippet>s</snippet></ROW><ROW><id>4705932</id><snippet>raw-unicode-escape</snippet></ROW><ROW><id>4705932</id><snippet>In [49]: print(s)
Oscar Winners Best Pictures Box Set Â£6.49

In [50]: print(s.encode('raw-unicode-escape'))
Oscar Winners Best Pictures Box Set £6.49
</snippet></ROW><ROW><id>4705932</id><snippet>s=u'Star Trek XI £3.99'</snippet></ROW><ROW><id>4705932</id><snippet>url</snippet></ROW><ROW><id>4705932</id><snippet>In [86]: import re

In [87]: print(re.sub(r'&amp;#x([a-fA-F\d]+);',lambda m: unichr(int(m.group(1),base=16)),s))
Star Trek XI £3.99
</snippet></ROW><ROW><id>4705932</id><snippet>In [51]: x=u'£'
In [53]: x.encode('utf-8')
Out[53]: '\xc2\xa3'
</snippet></ROW><ROW><id>4705932</id><snippet>u'£'</snippet></ROW><ROW><id>4705932</id><snippet>utf-8</snippet></ROW><ROW><id>4705932</id><snippet>'\xc2\xa3'</snippet></ROW><ROW><id>4705932</id><snippet>url['title']</snippet></ROW><ROW><id>4705932</id><snippet>u'\xc2\xa3'</snippet></ROW><ROW><id>4705932</id><snippet>u</snippet></ROW><ROW><id>4705932</id><snippet>u'\xc2\xa3'</snippet></ROW><ROW><id>4705932</id><snippet>'\xc2\xa3'</snippet></ROW><ROW><id>4705932</id><snippet>u'\xc2\xa3'</snippet></ROW><ROW><id>4705932</id><snippet>raw-unicode-escape</snippet></ROW><ROW><id>4705932</id><snippet>'\xc2\xa3'</snippet></ROW><ROW><id>4706043</id><snippet>import</snippet></ROW><ROW><id>4706043</id><snippet>execfile()</snippet></ROW><ROW><id>4706043</id><snippet>setup.py</snippet></ROW><ROW><id>4706043</id><snippet>setup()</snippet></ROW><ROW><id>4706119</id><snippet>TEMPLATE_DIRS = (
    "/webapp2/templates/"
    "/webapp2/templates/polls"
)
</snippet></ROW><ROW><id>4706119</id><snippet>def fromRelativePath(*relativeComponents):
    return os.path.join(os.path.dirname(__file__), *relativeComponents).replace("\\","/")

TEMPLATE_LOADERS = (
    "django.template.loaders.filesystem.Loader",
    "django.template.loaders.app_directories.Loader",
)

TEMPLATE_DIRS = (
    fromRelativePath("templates"),
)
</snippet></ROW><ROW><id>4706278</id><snippet>def contact(request):
    if request.method == 'POST': # If the form has been submitted...
        form = ContactForm(request.POST) # A form bound to the POST data
        if form.is_valid(): # All validation rules pass
            # Process the data in form.cleaned_data
            # ...

            print form.cleaned_data['my_form_field_name']

            return HttpResponseRedirect('/thanks/') # Redirect after POST
    else:
        form = ContactForm() # An unbound form

    return render_to_response('contact.html', {
        'form': form,
    })
</snippet></ROW><ROW><id>4706317</id><snippet>def mean(samplelists):
    means = []
    n = float(len(samplelists[0]))
    for sample in samplelists:
        mean = sum(sample)/n
        means.append(mean)
    return means

calc_means(repeat_sample(large_array))
</snippet></ROW><ROW><id>4706317</id><snippet>def mean(sample, n):
    n = float(n)
    mean = sum(sample)/n
    return mean

def sample(x):
    length = 1000000 
    new_array = random.sample(x, length)
    return new_array

def repeat_means(x):    
    repeats = 100
    list_of_means = []
    for i in range(repeats):
        list_of_means.append(mean(sample(x)))
    return list_of_means    

repeat_means(large_array)
</snippet></ROW><ROW><id>4706317</id><snippet>import random

def sampling_mean(population, k, times):
    # Part of this is lifted straight from random.py
    _int = int
    _random = random.random

    n = len(population)
    kf = float(k)
    result = []

    if not 0 &lt;= k &lt;= n:
        raise ValueError, "sample larger than population"

    for t in range(times):
        selected = set()
        sum_ = 0
        selected_add = selected.add

        for i in xrange(k):
            j = _int(_random() * n)
            while j in selected:
                j = _int(_random() * n)
            selected_add(j)
            sum_ += population[j]

        mean = sum_/kf
        result.append(mean)
    return result

sampling_mean(x, 1000000, 100)
</snippet></ROW><ROW><id>4706394</id><snippet>upstart</snippet></ROW><ROW><id>4706394</id><snippet>description "My service"
author  "Some Dude &lt;blah@foo.com&gt;"

start on runlevel [234]
stop on runlevel [0156]

chdir /some/dir
exec /some/dir/script.py
respawn
</snippet></ROW><ROW><id>4706394</id><snippet>/etc/init</snippet></ROW><ROW><id>4706394</id><snippet>$ sudo initctl reload-configuration
$ sudo start script
</snippet></ROW><ROW><id>4706394</id><snippet>stop script</snippet></ROW><ROW><id>4706394</id><snippet>SIGTERM</snippet></ROW><ROW><id>4706520</id><snippet>with open("test.txt", "a") as myfile:
    myfile.write("appended text")
</snippet></ROW><ROW><id>4706614</id><snippet>TkAgg</snippet></ROW><ROW><id>4706614</id><snippet>Agg</snippet></ROW><ROW><id>4706614</id><snippet>import matplotlib
matplotlib.use('Agg') # Must be before importing matplotlib.pyplot or pylab!
import matplotlib.pyplot as plt

fig = plt.figure()
plt.plot(range(10))
fig.savefig('temp.png')
</snippet></ROW><ROW><id>4706614</id><snippet>Agg</snippet></ROW><ROW><id>4706714</id><snippet>get_or_create()</snippet></ROW><ROW><id>4706714</id><snippet>p, created = Person.objects.get_or_create(
    first_name='John', last_name='Lennon',
    defaults={'birthday': date(1940, 10, 9)})
</snippet></ROW><ROW><id>4706783</id><snippet>DictCursor
    Like Cursor except it returns rows as dictionaries.
</snippet></ROW><ROW><id>4707001</id><snippet>len()</snippet></ROW><ROW><id>4707001</id><snippet>if len(listen_addr)&gt;2:</snippet></ROW><ROW><id>4707113</id><snippet>def setMesaj(self):
  mesaj = unicode(self.toPlainText().toUtf8(), "utf-8")
  ascii = mesaj.encode("ascii", "ignore")
  if ascii != mesaj:
    self.setPlainText(ascii)

  if (len(mesaj)) &gt; 159:
    QtGui.QMessageBox.warning(self, 'warning', "[WARN-1] Mesaj 160 karakterden fazla?")
    i = len(mesaj) - 159
    mesaj = mesaj [:-i]
    self.setPlainText(mesaj)
</snippet></ROW><ROW><id>4707258</id><snippet>\Lib\encodings\aliases.py</snippet></ROW><ROW><id>4707432</id><snippet>&gt;&gt;&gt; dir(A.B.C)
['__doc__', '__module__', 'method']
</snippet></ROW><ROW><id>4707432</id><snippet>A.B.C</snippet></ROW><ROW><id>4707432</id><snippet>A.B</snippet></ROW><ROW><id>4707432</id><snippet>Z.C = A.B.C</snippet></ROW><ROW><id>4707432</id><snippet>get_ns_path(Z.C.method)</snippet></ROW><ROW><id>4707578</id><snippet>action</snippet></ROW><ROW><id>4707578</id><snippet>/cgi-bin/test2.py</snippet></ROW><ROW><id>4707617</id><snippet>virtualenv --no-site-packages env
</snippet></ROW><ROW><id>4707867</id><snippet># Create copy of the form
form = myform()

# Append the dropdown to the form elements.
form.inputs = tuple(list(form.inputs) + [mydropdown])
</snippet></ROW><ROW><id>4708157</id><snippet>cursor.execute( "CREATE TABLE t1 ( t1_id INT PRIMARY KEY AUTO_INCREMENT )" )
cursor.commit()
cursor.execute( "CREATE TABLE t2 ( t2_id INT PRIMARY KEY AUTO_INCREMENT )" )
cursor.commit()
</snippet></ROW><ROW><id>4708157</id><snippet>BEGIN EXCLUSIVE TRANSACTION</snippet></ROW><ROW><id>4708348</id><snippet>def countLetters(str, ch):
#                      ^ the character you are looking for
    count=0
    index=0
    for ch in str:
#        ^ the string character you are trying to check
        if ch==str[index]:  # ???
            count=count+1
        index=index+1
    print count
</snippet></ROW><ROW><id>4708348</id><snippet>"aaabb".count("a")  -&gt; 3
</snippet></ROW><ROW><id>4708348</id><snippet>def countLetters(search_in, search_for):
    count = 0
    for s in search_in:    # iterate by string char, not by index
        if s==search_for:
            count += 1
    return count
</snippet></ROW><ROW><id>4708348</id><snippet>def countLetters(search_in, search_for):
    return sum(1 for s in search_in if s==search_for)
</snippet></ROW><ROW><id>4708428</id><snippet>{% splitarticle some_data word_count %}
    {{ pre_part }}
    {% if post_part %}
       {{ post_part }}
     {% endif %}
</snippet></ROW><ROW><id>4708428</id><snippet>from django import template
from django.utils.encoding import force_unicode

def split_by_sentence(text, word_count):
    words = force_unicode(text).strip().split(' ')
    word_count = int(word_count)
    if len(words)&gt;word_count:
        cnt = word_count
        for word in words[word_count:]:
            cnt+=1
            if '.' in word or '?' in word or '!' in word:
                break
        if cnt&gt;=len(words):
            cnt = word_count

        pre = ' '.join(words[:cnt])
        post = ' '.join(words[cnt:])
        return pre, post    
    else:
        return text, None

register = template.Library()
@register.tag
def splitarticle(parser, token):
    try:
        tag, data, word_count = token.split_contents()
    except ValueError:
        raise template.TemplateSyntaxError('splitarticle parsing error')
    return SplitArticleNode(data, word_count)

class SplitArticleNode(template.Node):
    def __init__(self, data, word_count):
        self.data = template.Variable(data)
        self.word_count = word_count
    def render(self, context):
        data = self.data.resolve(context)
        context['pre_part'], context['post_part'] = split_by_sentence(data, self.word_count)
        return ''
</snippet></ROW><ROW><id>4708530</id><snippet>from django.forms import forms

class MyBoundField(object):
    pass

forms.BoundField = MyBoundField
</snippet></ROW><ROW><id>4708625</id><snippet>_</snippet></ROW><ROW><id>4708625</id><snippet>_(x)</snippet></ROW><ROW><id>4708625</id><snippet>_</snippet></ROW><ROW><id>4708625</id><snippet>x</snippet></ROW><ROW><id>4708625</id><snippet>ugettext</snippet></ROW><ROW><id>4708625</id><snippet>_</snippet></ROW><ROW><id>4708625</id><snippet>from django.utils.translation import ugettext as _
</snippet></ROW><ROW><id>4708651</id><snippet>gobject.timeout_add()</snippet></ROW><ROW><id>4708651</id><snippet>True</snippet></ROW><ROW><id>4708651</id><snippet>bool</snippet></ROW><ROW><id>4708737</id><snippet>np.r_[tuple(slice(s, e) for s, e in zip(start, end))]
</snippet></ROW><ROW><id>4708737</id><snippet>def indices(start, end):
    lens = end - start
    np.cumsum(lens, out=lens)
    i = np.ones(lens[-1], dtype=int)
    i[0] = start[0]
    i[lens[:-1]] += start[1:]
    i[lens[:-1]] -= end[:-1]
    np.cumsum(i, out=i)
    return i
</snippet></ROW><ROW><id>4708737</id><snippet>lens</snippet></ROW><ROW><id>4708864</id><snippet>&lt;li&gt;&lt;a href="/{{item}}/"&gt;{{ item }}&lt;/a&gt;&lt;/li&gt;
</snippet></ROW><ROW><id>4708864</id><snippet>&lt;li&gt;&lt;a href="{% url item %}"&gt;{{ item }}&lt;/a&gt;&lt;/li&gt;
</snippet></ROW><ROW><id>4709018</id><snippet>pickle</snippet></ROW><ROW><id>4709018</id><snippet>db.BlobProperty</snippet></ROW><ROW><id>4709018</id><snippet>pickle</snippet></ROW><ROW><id>4709018</id><snippet>cPickle</snippet></ROW><ROW><id>4709185</id><snippet>string</snippet></ROW><ROW><id>4709185</id><snippet>import random
import string

chars = string.ascii_uppercase + string.ascii_lowercase + string.digits

for row in range(10):
    print ''.join(random.choice(chars) for col in range(7))
</snippet></ROW><ROW><id>4709325</id><snippet>$(document).ready()</snippet></ROW><ROW><id>4709325</id><snippet>ready()</snippet></ROW><ROW><id>4709329</id><snippet>"{0} {1} {1}".format("foo", "bar")
</snippet></ROW><ROW><id>4709456</id><snippet>@cython.cdivision(True)</snippet></ROW><ROW><id>4709456</id><snippet>import cython

cdef double pydivision():
  cdef int i
  cdef double k, j
  k = 2.0
  j = 0.0
  for i in range(10):
    j += i/k
  # Generated code: Python exception checking
  # /* "checksum.pyx":9
  # *   j = 0.0
  # *   for i in range(10):
  # *     j += i/k             # &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
  # *   return j
  # *
  # */
  #    if (unlikely(__pyx_v_k == 0)) {
  #      PyErr_Format(PyExc_ZeroDivisionError, "float division");
  #      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #    }
  #    __pyx_v_j = (__pyx_v_j + (__pyx_v_i / __pyx_v_k));
  #  }
  return j

#This decorator works wonders
@cython.cdivision(True)
cdef double cdivision():
  cdef int i
  cdef double k, j
  k = 2.0
  j = 0.0
  for i in range(10):
    j += i/k
  # Generated code: no exception checking
  # /* "checksum.pyx":20
  # *   j = 0.0
  # *   for i in range(10):
  # *     j += i/k             # &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
  # *   return j
  # *
  # */
  #    __pyx_v_j = (__pyx_v_j + (__pyx_v_i / __pyx_v_k));
  #  }
  return j
</snippet></ROW><ROW><id>4709545</id><snippet>__file__</snippet></ROW><ROW><id>4709545</id><snippet>os.path</snippet></ROW><ROW><id>4709638</id><snippet>perl -ne</snippet></ROW><ROW><id>4709638</id><snippet>perl -pe</snippet></ROW><ROW><id>4709638</id><snippet>curl -u $1:$2 --silent "https://mail.google.com/mail/feed/atom" | python -c ' 
import sys
for s in sys.stdin:
    s=s.strip()
    if not s: print '\t',
    else: print s
' 
</snippet></ROW><ROW><id>4709638</id><snippet>perl -ne 'print "\t" if //; print "$2\n" if /(.*)/;'
</snippet></ROW><ROW><id>4709638</id><snippet>LINE:
while (&lt;&gt;) {
  print "\t" if //;         # print a tab for a blank line
  print "$2\n" if /(.*)/;   # nonsensical. Print second group but only 
                            # a single match group defined...
}
</snippet></ROW><ROW><id>4709638</id><snippet>#!/usr/bin/python
from xml.dom.minidom import parseString
import sys

def get_XML_doc_stdin(f):
    return xml.dom.minidom.parse(f)

def get_tagged_data2(tag, index=0):    
    xmlData = dom.getElementsByTagName(tag)[index].firstChild.data
    return xmlData

data=sys.stdin.read()
dom = parseString(data)

ele2=get_tagged_data2('title')
print ele2

count=int(get_tagged_data2('fullcount'))
print count,"New Messages:"

for i in range(0,count):
    nam=get_tagged_data2('name',i)
    email=get_tagged_data2('email',i)
    print "  {0}: {1} &lt;{2}&gt;".format(i+1,nam,email)
</snippet></ROW><ROW><id>4709638</id><snippet>chmod +x</snippet></ROW><ROW><id>4709638</id><snippet>curl -u $1:$2 --silent "https://mail.google.com/mail/feed/atom" | 
/path/pythonfile.py
</snippet></ROW><ROW><id>4709638</id><snippet>Gmail - Inbox for xxxxxxx@gmail.com
2 New Messages:
  1: bob smith &lt;bob@smith.com&gt;
  2: Google Alerts &lt;googlealerts-noreply@google.com&gt;
</snippet></ROW><ROW><id>4709638</id><snippet>curl -u $1:$2 --silent "https://mail.google.com/mail/feed/atom" |python -c ' 
import sys, re
for t,m in re.findall(r"&lt;(title|name)&gt;(.*)&lt;\/\1&gt;",sys.stdin.read()):
    print "\t",m
'
</snippet></ROW><ROW><id>4709669</id><snippet>In [146]: import re
In [152]: match=re.search(r'(\d+/\d+/\d+)','The date is 11/12/98')

In [153]: match.group(1)
Out[153]: '11/12/98'
</snippet></ROW><ROW><id>4709669</id><snippet>In [154]: match=re.search(r'(\d+/\d+/\d+)','The date is 99/99/99')

In [155]: match.group(1)
Out[155]: '99/99/99'
</snippet></ROW><ROW><id>4709669</id><snippet>strptime</snippet></ROW><ROW><id>4709669</id><snippet>datetime.datetime</snippet></ROW><ROW><id>4709669</id><snippet>In [140]: datetime.datetime.strptime("11/12/98","%m/%d/%y")
Out[140]: datetime.datetime(1998, 11, 12, 0, 0)

In [141]: datetime.datetime.strptime("11/12/98","%d/%m/%y")
Out[141]: datetime.datetime(1998, 12, 11, 0, 0)

In [143]: date.year
Out[143]: 1998

In [144]: date.month
Out[144]: 11

In [145]: date.day
Out[145]: 12
</snippet></ROW><ROW><id>4709669</id><snippet>try..except</snippet></ROW><ROW><id>4709669</id><snippet>ValueError</snippet></ROW><ROW><id>4709669</id><snippet>In [159]: try:
   .....:     datetime.datetime.strptime("99/99/99","%m/%d/%y")
   .....: except ValueError as err:
   .....:     print(err)
   .....:     
   .....:     
time data '99/99/99' does not match format '%m/%d/%y'
</snippet></ROW><ROW><id>4709680</id><snippet>f.close</snippet></ROW><ROW><id>4709680</id><snippet>readline</snippet></ROW><ROW><id>4709680</id><snippet> if data.find('!masters') != -1:
     f = open('masters.txt')
     for line in f:
           print line,
           sck.send('PRIVMSG ' + chan + " " + line)
     f.close()
</snippet></ROW><ROW><id>4709680</id><snippet>lines</snippet></ROW><ROW><id>4709680</id><snippet>line</snippet></ROW><ROW><id>4709680</id><snippet>if</snippet></ROW><ROW><id>4709681</id><snippet>L=list()
</snippet></ROW><ROW><id>4709681</id><snippet>L=[]
</snippet></ROW><ROW><id>4709734</id><snippet>def removearticles(text):
  re.sub('(\s+)(a|an|and|the)(\s+)', '\1\3', text)
</snippet></ROW><ROW><id>4709734</id><snippet>def removearticles(text):
  re.sub('\s+(a|an|and|the)(\s+)', '\2', text)
</snippet></ROW><ROW><id>4709746</id><snippet>In [165]: json.loads('{"a": 0, "c": 0, "b": 0}')
Out[165]: {u'a': 0, u'b': 0, u'c': 0}
</snippet></ROW><ROW><id>4710090</id><snippet>f = open("yourfile.txt","r")
</snippet></ROW><ROW><id>4710090</id><snippet>lines = f.readlines()
</snippet></ROW><ROW><id>4710090</id><snippet>f.close()
</snippet></ROW><ROW><id>4710090</id><snippet>f = open("yourfile.txt","w")
</snippet></ROW><ROW><id>4710090</id><snippet>"\n"</snippet></ROW><ROW><id>4710090</id><snippet>for line in lines:
  if line!="nickname_to_delete"+"\n":
    f.write(line)
</snippet></ROW><ROW><id>4710090</id><snippet>f.close()
</snippet></ROW><ROW><id>4710140</id><snippet>&gt;&gt;&gt; s="2011-is-going-to-be-cool-455"
&gt;&gt;&gt; s.rsplit("-",1)[0]
'2011-is-going-to-be-cool'
</snippet></ROW><ROW><id>4710140</id><snippet>&gt;&gt;&gt; iwant=s.rsplit("-",1)
&gt;&gt;&gt; if iwant[-1].isdigit():
...   print iwant[0]
...
2011-is-going-to-be-cool
</snippet></ROW><ROW><id>4710227</id><snippet>import pycurl, json

STREAM_URL = "http://chirpstream.twitter.com/2b/user.json"

USER = "segphault"
PASS = "XXXXXXXXX"

class LimitError(Exception): pass

counter = 0
limit = 10
def on_receive(data):
    global counter
    if counter &lt; 10:
        print data
        counter += 1
    else:
        raise LimitError    
conn = pycurl.Curl()
conn.setopt(pycurl.USERPWD, "%s:%s" % (USER, PASS))
conn.setopt(pycurl.URL, STREAM_URL)
conn.setopt(pycurl.WRITEFUNCTION, on_receive)

try:
    conn.perform()
    print "Exited Normally"
except LimitError:
    print "Reached limit, exiting"
except pycurl.error:
    if counter == limit:
        print "pycurl expected error, nothing to worry about"
    else:
        raise
finally:
    conn.close()

print "All done"
</snippet></ROW><ROW><id>4710281</id><snippet>ls</snippet></ROW><ROW><id>4710281</id><snippet>stat</snippet></ROW><ROW><id>4710473</id><snippet>myXml</snippet></ROW><ROW><id>4710473</id><snippet>soup = BeautifulSoup(myXml)
for a in soup.findAll(a,{'class' : 'sqq'}):
  # this is your quote
  print a.contents
</snippet></ROW><ROW><id>4710544</id><snippet>HttpProxyMiddleware</snippet></ROW><ROW><id>4710544</id><snippet>http_proxy</snippet></ROW><ROW><id>4710649</id><snippet>multiprocessing</snippet></ROW><ROW><id>4710649</id><snippet>ctypes</snippet></ROW><ROW><id>4710887</id><snippet>dh-make-perl</snippet></ROW><ROW><id>4710887</id><snippet>distutils</snippet></ROW><ROW><id>4710887</id><snippet>dh_pycentral</snippet></ROW><ROW><id>4710887</id><snippet>debian/foo.install</snippet></ROW><ROW><id>4710887</id><snippet>dh_install</snippet></ROW><ROW><id>4710887</id><snippet>debian/control</snippet></ROW><ROW><id>4710910</id><snippet>def __init__(self,model,view):
    super(CompanyPresenter, self).__init__() # this!!!!!!!!!
</snippet></ROW><ROW><id>4711394</id><snippet>auto-fill-mode</snippet></ROW><ROW><id>4711394</id><snippet>fill-column</snippet></ROW><ROW><id>4711394</id><snippet>(defun refill-when-in-comment ()
  (interactive)
  (let ((curr-face (get-char-property (point) 'face)))
    (if (member "comment" (split-string (prin1-to-string curr-face) "-"))
        (fill-paragraph t)
      )
    )
  )

(defun smart-space (arg)
  (interactive "P")
  (refill-when-in-comment)
  (self-insert-command (prefix-numeric-value arg))
  )

(global-set-key " " 'smart-space)
</snippet></ROW><ROW><id>4711664</id><snippet>{% if user in users %}
  If users is a QuerySet, this will appear if user is an
  instance that belongs to the QuerySet.
{% endif %}
</snippet></ROW><ROW><id>4711664</id><snippet>{% if a == b or c == d and e %}
</snippet></ROW><ROW><id>4711863</id><snippet>{% thumbnail myobj.image 500 500 %}
</snippet></ROW><ROW><id>4711863</id><snippet>def thumbnail(self):
     path = # work out the path to the thumbnail
     try:
         #access the path where I expect the thumbnail file to be
     except #failure:
         # generate the thumbnail using the dimensions specified by the class
     return #path to the thumbnail
</snippet></ROW><ROW><id>4711874</id><snippet>import subprocess
import sys

params = dict()
startupinfo = subprocess.STARTUPINFO()
startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
params['startupinfo'] = startupinfo

p = subprocess.Popen("cmd.exe", **params)
</snippet></ROW><ROW><id>4712028</id><snippet>if args not in cache:
    cache[args] = func(args)
return cache[args]
</snippet></ROW><ROW><id>4712028</id><snippet>args</snippet></ROW><ROW><id>4712028</id><snippet>func(args)</snippet></ROW><ROW><id>4712028</id><snippet>threading</snippet></ROW><ROW><id>4712036</id><snippet>®</snippet></ROW><ROW><id>4712036</id><snippet>import xml.dom.minidom as mdom
text = mdom.Text()
# Start with unicode
text.data = u'\xae'

f = open('reg1.html', 'w')
f.write("header saying the file is ascii")
uxml = text.toxml()
bxml = uxml.encode('ascii', 'xmlcharrefreplace')
f.write(bxml)
f.close()

f = open('reg2.html', 'w')
f.write("header saying the file is UTF-8")
xml = text.toxml(encoding='UTF-8')
f.write(xml)
f.close()
</snippet></ROW><ROW><id>4712545</id><snippet>modelsinspector</snippet></ROW><ROW><id>4712851</id><snippet>QHBoxLayout</snippet></ROW><ROW><id>4712851</id><snippet>QGridLayout</snippet></ROW><ROW><id>4713930</id><snippet>range</snippet></ROW><ROW><id>4713930</id><snippet>xrange</snippet></ROW><ROW><id>4713930</id><snippet>t[0] + t[1]</snippet></ROW><ROW><id>4713930</id><snippet>t[0] + t[1]</snippet></ROW><ROW><id>4713930</id><snippet>timedelta</snippet></ROW><ROW><id>4713930</id><snippet>t[0]</snippet></ROW><ROW><id>4713930</id><snippet>t[1]</snippet></ROW><ROW><id>4714134</id><snippet>allFruits = set()
for i,(k,v) in enumerate(sorted(dd.iteritems()), 1):
    allFruits.update(v)
    print i, len(allFruits)
</snippet></ROW><ROW><id>4714134</id><snippet>allFruits = set()
for i,(k,v) in enumerate(sorted(dd.iteritems())):
    allFruits.update(v)
    print i+1, len(allFruits)
</snippet></ROW><ROW><id>4714134</id><snippet>dd = {'A': set(['Apple', 'Orange', 'Strawberries']),
      'B': set(['Banana', 'Dates', 'Kiwi', 'Orange', 'Strawberries']),
      'C': set(['Apple', 'Grapes', 'Kiwi']),
      'D': set(['Apple', 'Banana', 'Lemon', 'Orange'])}
</snippet></ROW><ROW><id>4714134</id><snippet>1 3
2 6
3 7
4 8
</snippet></ROW><ROW><id>4714145</id><snippet>dict</snippet></ROW><ROW><id>4714145</id><snippet>&gt;&gt;&gt; dict(one=1, two=2, three=3)
{'three': 3, 'two': 2, 'one': 1}
</snippet></ROW><ROW><id>4714172</id><snippet>class Dog:
  def say(self):
    print "hau"

class Cat:
  def say(self):
    print "meow"

pet = Dog()
pet.say() # prints "hau"
another_pet = Cat()
another_pet.say() # prints "meow"

my_pets = [pet, another_pet]
for a_pet in my_pets:
  a_pet.say()
</snippet></ROW><ROW><id>4714172</id><snippet>Cat</snippet></ROW><ROW><id>4714172</id><snippet>Dog</snippet></ROW><ROW><id>4714172</id><snippet>abc</snippet></ROW><ROW><id>4714778</id><snippet>def GCD(a, b):              #Euclid's algorithim
    if (b == 0):
        return a
    else:
        return GCD(b, a % b)
</snippet></ROW><ROW><id>4714778</id><snippet>RFIND</snippet></ROW><ROW><id>4714857</id><snippet>itertools.product()</snippet></ROW><ROW><id>4714857</id><snippet>numpy.indices()</snippet></ROW><ROW><id>4714857</id><snippet>numpy.rollaxis(numpy.indices((2, 3, 3)), 0, 4)
array([[[[0, 0, 0],
         [0, 0, 1],
         [0, 0, 2]],

        [[0, 1, 0],
         [0, 1, 1],
         [0, 1, 2]],

        [[0, 2, 0],
         [0, 2, 1],
         [0, 2, 2]]],


       [[[1, 0, 0],
         [1, 0, 1],
         [1, 0, 2]],

        [[1, 1, 0],
         [1, 1, 1],
         [1, 1, 2]],

        [[1, 2, 0],
         [1, 2, 1],
         [1, 2, 2]]]])
</snippet></ROW><ROW><id>4714857</id><snippet>a = numpy.indices((4,)*13)
b = 1j ** numpy.rollaxis(a, 0, 14)
</snippet></ROW><ROW><id>4714857</id><snippet>numpy.rollaxis()</snippet></ROW><ROW><id>4714857</id><snippet>itertools.product()</snippet></ROW><ROW><id>4714857</id><snippet>numpy.array(list(itertools.product(some_list, repeat=some_length)))
</snippet></ROW><ROW><id>4714857</id><snippet>numpy.array(some_list)[numpy.rollaxis(
    numpy.indices((len(some_list),) * some_length), 0, some_length + 1)
    .reshape(-1, some_length)]
</snippet></ROW><ROW><id>4715206</id><snippet>There is a couple of function who don't map directly to their C counterparts due to specificities in their argument conversions:

    * virConnectListDomains is replaced by virDomain::listDomainsID(self) which returns a list of the integer ID for the currently running domains
    * virDomainGetInfo is replaced by virDomain::info() which returns a list of
         1. state: one of the state values (virDomainState)
         2. maxMemory: the maximum memory used by the domain
         3. memory: the current amount of memory used by the domain
         4. nbVirtCPU: the number of virtual CPU
         5. cpuTime: the time used by the domain in nanoseconds
</snippet></ROW><ROW><id>4715692</id><snippet>USStateField</snippet></ROW><ROW><id>4715692</id><snippet>from django.contrib.localflavor.us.forms import USStateField

class UserProfileForm(forms.ModelForm):
    state = USStateField()
    zip = USZipCodeField()
    class Meta:
        model = UserProfile
</snippet></ROW><ROW><id>4715692</id><snippet>USZipCodeField</snippet></ROW><ROW><id>4715692</id><snippet>zip</snippet></ROW><ROW><id>4715692</id><snippet>forms.ChoiceField</snippet></ROW><ROW><id>4716156</id><snippet>["^core/.fields/.ImageWithThumbsField",]</snippet></ROW><ROW><id>4716156</id><snippet>["^lib\.thumbs\.ImageWithThumbsField",]</snippet></ROW><ROW><id>4716156</id><snippet>ImageWithThumbsField</snippet></ROW><ROW><id>4716156</id><snippet>lib.thumbs</snippet></ROW><ROW><id>4716169</id><snippet>if Gender in ('boy', 'Boy'):

if Gender in ('girl', 'Girl'):
</snippet></ROW><ROW><id>4716169</id><snippet>=</snippet></ROW><ROW><id>4716169</id><snippet>in</snippet></ROW><ROW><id>4716169</id><snippet>if Gender in options
</snippet></ROW><ROW><id>4716169</id><snippet>options</snippet></ROW><ROW><id>4716169</id><snippet>if Gender == 'boy' or Gender == 'something else'
</snippet></ROW><ROW><id>4716272</id><snippet>d = {
  'str'  : StringProperty,
  'time' : unicode(DateTimeProperty)
}
s = simplejson.dumps(d)
print s
</snippet></ROW><ROW><id>4716664</id><snippet>xmlrpclib.ServerProxy</snippet></ROW><ROW><id>4716664</id><snippet>import xmlrpclib
import socket

def _get_rpc():
    a = xmlrpclib.ServerProxy('http://dd:LNXFhcZnYshy5mKyOFfy@127.0.0.1:9001')

    try:
        a._()   # Call a fictive method.
    except xmlrpclib.Fault:
        # connected to the server and the method doesn't exist which is expected.
        pass
    except socket.error:
        # Not connected ; socket error mean that the service is unreachable.
        return False, None

    # Just in case the method is registered in the XmlRPC server
    return True, a

connected, server_proxy = _get_rpc():
if not connected
    print "Failed to connect"
    import sys
    sys.exit(1)
</snippet></ROW><ROW><id>4716664</id><snippet>_</snippet></ROW><ROW><id>4716664</id><snippet>return True</snippet></ROW><ROW><id>4716664</id><snippet>xmlrpclib.Fault</snippet></ROW><ROW><id>4716664</id><snippet>return True</snippet></ROW><ROW><id>4716664</id><snippet>socket.error</snippet></ROW><ROW><id>4716664</id><snippet>a._()</snippet></ROW><ROW><id>4716664</id><snippet>return False</snippet></ROW><ROW><id>4716664</id><snippet>if a:</snippet></ROW><ROW><id>4716664</id><snippet>__nonzero__()</snippet></ROW><ROW><id>4716664</id><snippet>a</snippet></ROW><ROW><id>4716690</id><snippet>from math import sin, cos, radians, degrees, acos

def calc_dist(lat_a, long_a, lat_b, long_b):
    lat_a = radians(lat_a)
    lat_b = radians(lat_b)
    long_diff = radians(long_a - long_b)
    distance = (sin(lat_a) * sin(lat_b) +
                cos(lat_a) * cos(lat_b) * cos(long_diff))
    return degrees(acos(distance)) * 69.09
</snippet></ROW><ROW><id>4717232</id><snippet>&gt;&gt;&gt; dan = 'dan|warrior|54'
&gt;&gt;&gt; dan.split('|')[1]
"warrior"
</snippet></ROW><ROW><id>4717354</id><snippet>class Foo(models.Model):
    bar = models.CharField()
    baz = models.CharField()

# admin.py
class FooProxy(Foo):
    class Meta:
        proxy=True

admin.site.register(Foo, FooAdmin1)
admin.site.register(FooProxy, FooAdmin2) 
</snippet></ROW><ROW><id>4717417</id><snippet>&gt;&gt;&gt; X = scipy.matrix('1 2 3; 4 5 6; 7 8 9')
&gt;&gt;&gt; X*X.T
matrix([[ 14,  32,  50],
        [ 32,  77, 122],
        [ 50, 122, 194]])
</snippet></ROW><ROW><id>4717417</id><snippet>&gt;&gt;&gt; X = scipy.array([[1,2,3], [4,5,6], [7,8,9]])
&gt;&gt;&gt; scipy.dot(X, X.T)
array([[ 14,  32,  50],
       [ 32,  77, 122],
       [ 50, 122, 194]])
</snippet></ROW><ROW><id>4717491</id><snippet>username_is_send</snippet></ROW><ROW><id>4717494</id><snippet>pyglet.gl</snippet></ROW><ROW><id>4717924</id><snippet>value_from_datadict()</snippet></ROW><ROW><id>4717924</id><snippet>raise</snippet></ROW><ROW><id>4717924</id><snippet>File "/usr/lib/python2.7/site-packages/django/forms/forms.py" in is_valid
  121.         return self.is_bound and not bool(self.errors)
File "/usr/lib/python2.7/site-packages/django/forms/forms.py" in _get_errors
  112.             self.full_clean()
File "/usr/lib/python2.7/site-packages/django/forms/forms.py" in full_clean
  267.         self._clean_fields()
File "/usr/lib/python2.7/site-packages/django/forms/forms.py" in _clean_fields
  278.             value = field.widget.value_from_datadict(self.data, self.files, self.add_prefix(name))
</snippet></ROW><ROW><id>4717924</id><snippet>DateField()</snippet></ROW><ROW><id>4718002</id><snippet>django.template.loaders.filesystem.load_template_source
django.template.loaders.app_directories.load_template_source
</snippet></ROW><ROW><id>4718091</id><snippet>permTemp = perm[:]
</snippet></ROW><ROW><id>4718105</id><snippet>if</snippet></ROW><ROW><id>4718105</id><snippet>else</snippet></ROW><ROW><id>4718105</id><snippet>while</snippet></ROW><ROW><id>4718105</id><snippet>if Guess &lt; Answer:
     print("Too low! try again")
    else:
        print("too high")
</snippet></ROW><ROW><id>4718105</id><snippet>if Guess &lt; Answer:
    print("Too low! try again")
else:
    print("too high")
</snippet></ROW><ROW><id>4718105</id><snippet>Gender == 'boy' or 'Boy'</snippet></ROW><ROW><id>4718105</id><snippet>Boy</snippet></ROW><ROW><id>4718105</id><snippet>Gender == 'boy'</snippet></ROW><ROW><id>4718105</id><snippet>Gender == 'boy' or Gender == 'Boy'</snippet></ROW><ROW><id>4718105</id><snippet>Gender.lower() == 'boy'</snippet></ROW><ROW><id>4718105</id><snippet>gender</snippet></ROW><ROW><id>4718105</id><snippet>Gender</snippet></ROW><ROW><id>4718105</id><snippet>Gender</snippet></ROW><ROW><id>4718135</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>4718135</id><snippet>sudo chmod a+x /Users/tobylieven/Documents/my_scripts/alarm.py
</snippet></ROW><ROW><id>4718135</id><snippet>alarm.py</snippet></ROW><ROW><id>4718183</id><snippet>:echo has("python")
</snippet></ROW><ROW><id>4718225</id><snippet>unicode</snippet></ROW><ROW><id>4718225</id><snippet>csv</snippet></ROW><ROW><id>4718225</id><snippet>unicode</snippet></ROW><ROW><id>4718225</id><snippet>csv</snippet></ROW><ROW><id>4718225</id><snippet>UnicodeWriter</snippet></ROW><ROW><id>4718225</id><snippet>csv</snippet></ROW><ROW><id>4718225</id><snippet>import csv, codecs, cStringIO

class UnicodeWriter:
    """
    A CSV writer which will write rows to CSV file "f",
    which is encoded in the given encoding.
    """

    def __init__(self, f, dialect=csv.excel, encoding="utf-8", **kwds):
        # Redirect output to a queue
        self.queue = cStringIO.StringIO()
        self.writer = csv.writer(self.queue, dialect=dialect, **kwds)
        self.stream = f
        self.encoder = codecs.getincrementalencoder(encoding)()

    def writerow(self, row):
        self.writer.writerow([s.encode("utf-8") for s in row])
        # Fetch UTF-8 output from the queue ...
        data = self.queue.getvalue()
        data = data.decode("utf-8")
        # ... and reencode it into the target encoding
        data = self.encoder.encode(data)
        # write to the target stream
        self.stream.write(data)
        # empty queue
        self.queue.truncate(0)

    def writerows(self, rows):
        for row in rows:
            self.writerow(row)
</snippet></ROW><ROW><id>4718382</id><snippet>for x in xrange(1000)</snippet></ROW><ROW><id>4718382</id><snippet>StopIteration</snippet></ROW><ROW><id>4718789</id><snippet>try:
    myfile.write('blah')
finally:
        f.close()
        except IOError:
myfile.close()
</snippet></ROW><ROW><id>4718789</id><snippet>try:
    myfile.write('blah')
except IOError:
        myfile.close()
finally:
        f.close()
</snippet></ROW><ROW><id>4718839</id><snippet>__setattr__()</snippet></ROW><ROW><id>4718839</id><snippet>__slots__ = []</snippet></ROW><ROW><id>4719087</id><snippet>import os
if os.name == 'nt':
    pass # Windows
else:
    pass # other (unix)
</snippet></ROW><ROW><id>4719087</id><snippet>from time import strftime
import os

if os.name == 'nt': # Windows
    basePath = 'C:\\working\\'
else:
    basePath = '/working/'

Fn = '%sSetup%s.csv' % ( basePath, strftime( '%y%m%d' ) )
</snippet></ROW><ROW><id>4719108</id><snippet>def new_func(self, param):
    print param

class a:
    pass

a.my_func = new_func
b = a()
b.my_func(10)
</snippet></ROW><ROW><id>4719108</id><snippet>class A:
    def __init__(self):
        setattr(self, 'prepare_orig', getattr(self,'prepare'))
        setattr(self, 'prepare', getattr(self,'prepare_wrapper'))

    def prepare_wrapper(self,*args,**kwargs):
        def prepare_thread(*args,**kwargs):
            try:
                self.prepare_orig(*args,**kwargs)
            except:
                print "Unexpected error:", sys.exc_info()[0]
        t = threading.Thread(target=prepare_thread, args=args, kwargs=kwargs)
        t.start()

    def prepare(self):
        pass
</snippet></ROW><ROW><id>4719166</id><snippet>{% for u in users %}
{{u.name}}{% if not forloop.last %},{% endif %}
{% endfor }
</snippet></ROW><ROW><id>4719184</id><snippet>sql = f.read() # watch out for built-in `str`
cur.executescript(sql)
</snippet></ROW><ROW><id>4719261</id><snippet>data1.strip()</snippet></ROW><ROW><id>4719261</id><snippet>print repr(data1)</snippet></ROW><ROW><id>4719372</id><snippet>TheParser</snippet></ROW><ROW><id>4719372</id><snippet>WebParser</snippet></ROW><ROW><id>4719372</id><snippet>TheParser</snippet></ROW><ROW><id>4719372</id><snippet>TheGUI</snippet></ROW><ROW><id>4719372</id><snippet>LoadThread</snippet></ROW><ROW><id>4719372</id><snippet>textbox</snippet></ROW><ROW><id>4719372</id><snippet>LoadThread</snippet></ROW><ROW><id>4719372</id><snippet>class MyGUI(wx.Frame):
    def __init__(self, title, size, loader):
        wx.Frame.__init__(self, None, 1, title, size=size)

        # The GUI is made ...

        textbox.TextCtrl(panel1, 1, pos=(67,7), size=(150, 20))
        self.textbox = textbox
        button1.Bind(wx.EVT_BUTTON, self.button1Click)
        self.loader = loader
        self.Show(True) 

    def button1Click(self, event):
        self.loader.LoadThread(get_thread_id(), self.textbox)


class WebParser:
    def LoadThread(self, thread_id, a_textbox):
        do_something_with(a_textbox)


TheGUI = MyGUI("Text RPG", (500,500), WebParser())

TheApp.MainLoop()
</snippet></ROW><ROW><id>4719452</id><snippet>class Dog(Structure):
    _fields_ = [('name', c_char_p), ('weight', c_int)]

Dog.name.offset
# 0
Dog.weight.offset
# 4 (on my 32-bit system)
</snippet></ROW><ROW><id>4719562</id><snippet># with is like your try .. finally block in this case
with open('stats.txt', 'r') as file:
    # read a list of lines into data
    data = file.readlines()

print data
print "Your name: " + data[0]

# now change the 2nd line, note that you have to add a newline
data[1] = 'Mage\n'

# and write everything back
with open('stats.txt', 'w') as file:
    file.writelines( data )
</snippet></ROW><ROW><id>4719889</id><snippet>import itertools

lower_a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
upper_a = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
num = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']

all = []
all = lower_a + upper_a + num

for r in range(1, 3):
    for s in itertools.product(all, repeat=r):
         print ''.join(s)
</snippet></ROW><ROW><id>4719889</id><snippet>def product(*args, **kwds):
    # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
    pools = map(tuple, args) * kwds.get('repeat', 1)
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
</snippet></ROW><ROW><id>4719889</id><snippet>lower_a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
upper_a = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
num = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']

all = []
all = lower_a + upper_a + num

def recursive_product(myList, length, myString = ""):
    if length == 0:
        print myString
        return
    for c in myList:
        recursive_product(myList, length-1, myString + c)

for r in range(1, 3):
    recursive_product(all, r)
</snippet></ROW><ROW><id>4719920</id><snippet>~/.MacOSX/environment.plist</snippet></ROW><ROW><id>4720094</id><snippet># reference like this: maze[y][x] or maze[row][col]
# with [0][0] starting at the top left
maze = [['b','a','a', 'a'],
        ['b','a','b', 'a'],
        ['b','a','b', 'b'],
        ['b','b','b', 'a'],
        ['b','a','b', 'a'],
        ['a','a','a', 'a']]

moves = {}

# Loop through all cells of the maze, starting in the top-left
for y, row in enumerate(maze):
    for x, value in enumerate(row):
#        print "y, x, val: ", y, x, value
        # for every cell, create an empty list of moves
        moves[y, x] = []
        # then if we can move from this cell
        # check each of its neighbours and if they are a 'b' add it 
        # to the list of moves - assumes we can't move diagonally
        if value == 'b':
            if y - 1 &gt; 0 and maze[y - 1][x] == 'b':
                moves[y, x].append((y - 1, x))
            if y + 1 &lt; len(maze) and maze[y + 1][x] == 'b':
                moves[y, x].append((y + 1, x))
            if x - 1 &gt; 0 and maze[y][x - 1] == 'b':
                moves[y, x].append((y, x - 1))
            if x + 1 &lt; len(row) and maze[y][x+1] == 'b':
                moves[y, x].append((y, x+1))

print moves
</snippet></ROW><ROW><id>4720164</id><snippet>import time
from threading import Timer

def timeout_handler(timeout=10):
    print time.time()
    timer = Timer(timeout, timeout_handler)
    timer.start()

timeout_handler()
while True:
    print "loop"
    time.sleep(1)
</snippet></ROW><ROW><id>4720386</id><snippet>import time

start_time = time.time()

# Your code here

stop_time = time.time()
print "Running time in sec:", stop_time - start_time
</snippet></ROW><ROW><id>4720439</id><snippet>
 # the base class
class B(object):
    def f1(self, val):
        pass
    def f2(self, val):
        pass&lt;/p&gt;

&lt;p&gt;def decorator(cls, f):
    def g(self, *args, **kwargs):
        # do stuff
        result = f(self, *args, **kwargs)
        # do more stuff
    return g&lt;/p&gt;

&lt;p&gt;class A(B):
    _overridden = ['f1', 'f2']
    @classmethod
    def load(cls):
        for name in cls._overridden:
            setattr(name, decorator(getattr(name).im_func))&lt;/p&gt;

&lt;p&gt;A.load()
&lt;/pre&gt;</snippet></ROW><ROW><id>4721080</id><snippet>&gt;&gt;&gt; lst = [1,2,3]
&gt;&gt;&gt; newlst = [dict(number=n) for n in lst]
&gt;&gt;&gt; newlst
[{'number': 1}, {'number': 2}, {'number': 3}]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4721264</id><snippet>from eventlet import *
patcher.monkey_patch(all=True)

import os, sys, time
from boto.s3.connection import S3Connection
from boto.s3.bucket import Bucket

import logging

logging.basicConfig(filename="s3_download.log", level=logging.INFO)


def download_file(key_name):
    # Its imp to download the key from a new connection
    conn = S3Connection("KEY", "SECRET")
    bucket = Bucket(connection=conn, name="BUCKET")
    key = bucket.get_key(key_name)

    try:
        res = key.get_contents_to_filename(key.name)
    except:
        logging.info(key.name+":"+"FAILED")

if __name__ == "__main__":
    conn = S3Connection("KEY", "SECRET")
    bucket = Bucket(connection=conn, name="BUCKET")

    logging.info("Fetching bucket list")
    bucket_list = bucket.list(prefix="PREFIX")

    logging.info("Creating a pool")
    pool = GreenPool(size=20)

    logging.info("Saving files in bucket...")
    for key in bucket.list():
        pool.spawn_n(download_file, key.key)
</snippet></ROW><ROW><id>4721319</id><snippet>Category</snippet></ROW><ROW><id>4721319</id><snippet>Package</snippet></ROW><ROW><id>4721319</id><snippet>Category</snippet></ROW><ROW><id>4721319</id><snippet>Packages</snippet></ROW><ROW><id>4721319</id><snippet>ManyToManyField</snippet></ROW><ROW><id>4721319</id><snippet>Category</snippet></ROW><ROW><id>4721319</id><snippet>Package</snippet></ROW><ROW><id>4721319</id><snippet>categories = models.ManyToManyField('Category',related_name="packages")
</snippet></ROW><ROW><id>4721469</id><snippet>&gt;&gt;&gt; xml = """&lt;Content&gt;
...   &lt;Para&gt;first&lt;/Para&gt;
...   &lt;Table&gt;&lt;Para&gt;second&lt;/Para&gt;&lt;/Table&gt;
...   &lt;Para&gt;third&lt;/Para&gt;
... &lt;/Content&gt;"""
&gt;&gt;&gt; import xml.etree.cElementTree as et
&gt;&gt;&gt; page = et.fromstring(xml)
&gt;&gt;&gt; for p in page.getiterator():
...     print "ppp", p.tag, repr(p.text)
...     for c in p:
...         print "ccc", c.tag, repr(c.text), p.tag
...
ppp Content '\n  '
ccc Para 'first' Content
ccc Table None Content
ccc Para 'third' Content
ppp Para 'first'
ppp Table None
ccc Para 'second' Table
ppp Para 'second'
ppp Para 'third'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4721469</id><snippet>getiterator</snippet></ROW><ROW><id>4721469</id><snippet>&gt;&gt;&gt; def process(elem, parent):
...    print elem.tag, repr(elem.text), parent.tag if parent is not None else None
...    for child in elem:
...       process(child, elem)
...
&gt;&gt;&gt; process(page, None)
Content '\n  ' None
Para 'first' Content
Table None Content
Para 'second' Table
Para 'third' Content
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4721469</id><snippet>&gt;&gt;&gt; def iterate_with_parent(elem):
...     stack = []
...     while 1:
...         for child in reversed(elem):
...             stack.append((child, elem))
...         if not stack: return
...         elem, parent = stack.pop()
...         yield elem, parent
...
&gt;&gt;&gt;
&gt;&gt;&gt; showtag = lambda e: e.tag if e is not None else None
&gt;&gt;&gt; showtext = lambda e: repr((e.text or '').rstrip())
&gt;&gt;&gt; for e, p in iterate_with_parent(page):
...     print e.tag, showtext(e), showtag(p)
...
Para 'first' Content
Table '' Content
Para 'second' Table
Para 'third' Content
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4722121</id><snippet>Tools/Scripts</snippet></ROW><ROW><id>4722121</id><snippet>Tools/Scripts</snippet></ROW><ROW><id>4722244</id><snippet>xml.etree.ElementTree.ElementTree</snippet></ROW><ROW><id>4722244</id><snippet>&gt;&gt;&gt; from xml.etree.ElementTree import ElementTree
&gt;&gt;&gt; tree = ElementTree()
&gt;&gt;&gt; tree.parse("your_xml_file.xml")
</snippet></ROW><ROW><id>4722244</id><snippet>tree</snippet></ROW><ROW><id>4722294</id><snippet>upload_recieved</snippet></ROW><ROW><id>4722941</id><snippet>extra</snippet></ROW><ROW><id>4722941</id><snippet>Somewhere.objects.extra(select={'year': 'EXTRACT(year FROM date)',
                                'month': 'EXTRACT(month FROM date)'}
                       ).values_list('year', 'month').annotate(Sum('amount'))
</snippet></ROW><ROW><id>4723154</id><snippet>\w</snippet></ROW><ROW><id>4723154</id><snippet>LOCALE</snippet></ROW><ROW><id>4723154</id><snippet>UNICODE</snippet></ROW><ROW><id>4723154</id><snippet>pattern = '^\w+$'</snippet></ROW><ROW><id>4723235</id><snippet>h={}
o=s=p
$&lt;.map{|l|o,b,c=l.split;h[[o,b]]=c;s||=o}
o.chars{|c|puts s+' '+c+((s=h[[s,c]])?' -&gt; '+s :'')}rescue 0
puts s&amp;&amp;s&lt;'['?:ACCEPT: :REJECT
</snippet></ROW><ROW><id>4723235</id><snippet>[
  "S1 s2
S1 0 s2
S1 1 S1
s2 0 S1
s2 1 s2
1001010",
  "S1 s2
S1 0 s2
S1 1 S1
s2 0 S1
s2 1 s2
101",
  "S1 s2
S1 0 s2
S1 1 S1
s2 0 S1
s2 1 s2
",
  "S1 s2
S1 0 s2
S1 1 S1
s2 0 S1
s2 1 s2
10X"
].each do |b|
  puts "------"
  puts "Input:"
  puts b
  puts
  puts "Output:"
  puts `echo "#{b}" | ruby fsm-golf.rb`
  puts "------"
end
</snippet></ROW><ROW><id>4723235</id><snippet>S1 s2
S1 0 s2
S1 1 S1
s2 0 S1
s2 1 s2
</snippet></ROW><ROW><id>4723235</id><snippet>Input: '1001010'
Output:
S1 1 -&gt; S1
S1 0 -&gt; s2
s2 0 -&gt; S1
S1 1 -&gt; S1
S1 0 -&gt; s2
s2 1 -&gt; s2
s2 0 -&gt; S1
ACCEPT

Input: '101'
Output:
S1 1 -&gt; S1
S1 0 -&gt; s2
s2 1 -&gt; s2
REJECT

Input: 'X10'
Output:
S1 X
REJECT

Input: ''
Output:
ACCEPT

Input: '10X'
Output:
S1 1 -&gt; S1
S1 0 -&gt; s2
s2 X
REJECT
</snippet></ROW><ROW><id>4723265</id><snippet>for arg in sys.argv[1:]:         
    print arg
</snippet></ROW><ROW><id>4723265</id><snippet>&gt;&gt;&gt; s = "Hello"
&gt;&gt;&gt; s[1:]
'ello'
&gt;&gt;&gt; s[:2]
'He'
</snippet></ROW><ROW><id>4723265</id><snippet>&gt;&gt;&gt; s[:-1]
'Hell'
&gt;&gt;&gt; s[:-2]
'Hel'
</snippet></ROW><ROW><id>4723380</id><snippet>import logging
log = logging.getLogger("mylog")
log.setLevel(logging.DEBUG)

formatter = logging.Formatter(
    "%(asctime)s %(threadName)-11s %(levelname)-10s %(message)s")
# Alternative formatting available on python 3.2+:
# formatter = logging.Formatter(
#     "{asctime} {threadName:&gt;11} {levelname} {message}", style='{')

# Log to file
filehandler = logging.FileHandler("debug.txt", "w")
filehandler.setLevel(logging.DEBUG)
filehandler.setFormatter(formatter)
log.addHandler(filehandler)

# Log to stdout too
streamhandler = logging.StreamHandler()
streamhandler.setLevel(logging.INFO)
streamhandler.setFormatter(formatter)
log.addHandler(streamhandler)

# Test it
log.debug("Some message")
log.error("An error!")
try:
    something()
except:
    log.exception("An exception occured!")
</snippet></ROW><ROW><id>4723472</id><snippet>'results'</snippet></ROW><ROW><id>4724061</id><snippet>MySQLdb</snippet></ROW><ROW><id>4724061</id><snippet>_mysql.so</snippet></ROW><ROW><id>4724061</id><snippet>_mysql_exceptions.py</snippet></ROW><ROW><id>4724061</id><snippet>_mysql_exceptions.pyc</snippet></ROW><ROW><id>4724061</id><snippet>_mysql_exceptions.pyo</snippet></ROW><ROW><id>4724061</id><snippet>&gt;&gt;&gt; import MySQLdb  
&gt;&gt;&gt; MySQLdb.__version__  
'1.2.3'
</snippet></ROW><ROW><id>4724730</id><snippet>exec</snippet></ROW><ROW><id>4724730</id><snippet>execfile()</snippet></ROW><ROW><id>4724730</id><snippet>__import__()</snippet></ROW><ROW><id>4724730</id><snippet>exec</snippet></ROW><ROW><id>4724730</id><snippet>execfile()</snippet></ROW><ROW><id>4724730</id><snippet>__import__()</snippet></ROW><ROW><id>4724730</id><snippet>global</snippet></ROW><ROW><id>4724730</id><snippet>global</snippet></ROW><ROW><id>4724730</id><snippet>global</snippet></ROW><ROW><id>4724730</id><snippet>exec</snippet></ROW><ROW><id>4724730</id><snippet>execfile()</snippet></ROW><ROW><id>4724730</id><snippet>__import__()</snippet></ROW><ROW><id>4724968</id><snippet>&gt;&gt;&gt; a = {'key' : 'value'}
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b['key'] = 'new-value'
&gt;&gt;&gt; print a['key']
</snippet></ROW><ROW><id>4724968</id><snippet>'new-value'</snippet></ROW><ROW><id>4724968</id><snippet>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; b = a
&gt;&gt;&gt; print id(a) == id(b)
</snippet></ROW><ROW><id>4724968</id><snippet>b</snippet></ROW><ROW><id>4724968</id><snippet>b</snippet></ROW><ROW><id>4724968</id><snippet>&gt;&gt;&gt; print id(b)
&gt;&gt;&gt; b = b + 1
&gt;&gt;&gt; print id(b)
</snippet></ROW><ROW><id>4724968</id><snippet>b</snippet></ROW><ROW><id>4724968</id><snippet>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; b = a
&gt;&gt;&gt; print id(a)==id(b)
True
&gt;&gt;&gt; b += 1
&gt;&gt;&gt; print id(b)==id(a)
False
</snippet></ROW><ROW><id>4725202</id><snippet>try:
    main()
except KeyboardInterrupt:
    stop()

def stop():
    for t in threads:
        t.my_stop_function()
    # wait for threads to stop here...

class MyThread(threading.Thread):
    def __init__(self, *args, **kwargs):
        threading.Thread.__init__(self, *args, **kwargs)
        self.stop = False

    def my_stop_function(self):
        self.stop = True

    def run(self):
        while not self.stop:
            scrape()
</snippet></ROW><ROW><id>4725276</id><snippet>textwrap</snippet></ROW><ROW><id>4725276</id><snippet>&gt;&gt;&gt; import textwrap
&gt;&gt;&gt; s = 'This is a line of text over 10 characters'
&gt;&gt;&gt; textwrap.fill(s, width=10)
'This is a\nline of\ntext over\n10\ncharacters'
</snippet></ROW><ROW><id>4725443</id><snippet>'{"_id" : "%09d", "name" : "example", "field%d" : "hello"}' % 
    (num, random.randint(0, 100))
</snippet></ROW><ROW><id>4725443</id><snippet>{"_id" : "005049980", "name" : "example", "field77" : "hello"}
</snippet></ROW><ROW><id>4725443</id><snippet>_id</snippet></ROW><ROW><id>4725854</id><snippet>import sys
sys.coinit_flags = 0x8 # COINIT_SPEED_OVER_MEMORY == 0x8
</snippet></ROW><ROW><id>4725968</id><snippet>setup_method</snippet></ROW><ROW><id>4726192</id><snippet>&lt;gml:lowerCorner&gt;</snippet></ROW><ROW><id>4726192</id><snippet>&lt;gml:upperCorner&gt;</snippet></ROW><ROW><id>4726192</id><snippet>gml</snippet></ROW><ROW><id>4726192</id><snippet>xmlns:gml="http://www.opengis.net/gml"</snippet></ROW><ROW><id>4726192</id><snippet>from xml.etree import ElementTree as ET
tree = ET.parse('file.xml')
print tree.find('//{http://www.opengis.net/gml}lowerCorner').text
print tree.find('//{http://www.opengis.net/gml}upperCorner').text
</snippet></ROW><ROW><id>4726192</id><snippet>137796 483752
138178 484222
</snippet></ROW><ROW><id>4726192</id><snippet>//</snippet></ROW><ROW><id>4726192</id><snippet>{url}tag</snippet></ROW><ROW><id>4726192</id><snippet>gml</snippet></ROW><ROW><id>4726192</id><snippet>http://www.opengis.net/gml</snippet></ROW><ROW><id>4726192</id><snippet>.text</snippet></ROW><ROW><id>4726192</id><snippet>//</snippet></ROW><ROW><id>4726192</id><snippet>upperCorner</snippet></ROW><ROW><id>4726192</id><snippet>{http://www.kadaster.nl/schemas/klic/20080722/leveringsinfo}Pngformaat/{http://www.kadaster.nl/schemas/klic/20080722/leveringsinfo}OmsluitendeRechthoek/{http://www.opengis.net/gml}Envelope/{http://www.opengis.net/gml}upperCorner
</snippet></ROW><ROW><id>4726287</id><snippet>import optparse

def parse_range(astr):
    result=set()
    for part in astr.split(','):
        x=part.split('-')
        result.update(range(int(x[0]),int(x[-1])+1))
    return sorted(result)

parser = optparse.OptionParser()
parser.add_option('-n', dest='n')
opt,args=parser.parse_args()
opt.n=parse_range(opt.n)
print(opt.n)
</snippet></ROW><ROW><id>4726287</id><snippet>% test.py -n 3-6
[3, 4, 5, 6]

% test.py -n 3,6
[3, 6]

% test.py -n 22-27,51-64 
[22, 23, 24, 25, 26, 27, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64]
</snippet></ROW><ROW><id>4726374</id><snippet>IOError</snippet></ROW><ROW><id>4726374</id><snippet>try:
    shutil.copy(src,dst)
except IOError as e:
    print e
</snippet></ROW><ROW><id>4726554</id><snippet>class Person(object):
    def __init__(self, name):
        self.name = name
    def __repr__(self):
        print "A person named %s" % self.name

people = {}
while True:
    print "Enter a name:",
    a_name = raw_input()

    if a_name == 'done':
        break

    people[a_name] = Person(a_name)

    print "I made a new Person object. The person's name is %s." % a_name

print repr(people)
</snippet></ROW><ROW><id>4726591</id><snippet>from twisted.internet import reactor
from twisted.internet.serialport import SerialPort

SerialPort(YourProtocolClass(), Port, reactor, baudrate=baudrate))
reactor.run() 
</snippet></ROW><ROW><id>4726758</id><snippet>prefix</snippet></ROW><ROW><id>4726758</id><snippet>Form</snippet></ROW><ROW><id>4726758</id><snippet>prefix</snippet></ROW><ROW><id>4726758</id><snippet>return [TextAnswerForm(q,data=post, prefix='q_%s' % q.pk)
        for q in survey.questions.all()]
</snippet></ROW><ROW><id>4727207</id><snippet>dphi</snippet></ROW><ROW><id>4727207</id><snippet>dtheta</snippet></ROW><ROW><id>4727207</id><snippet>range</snippet></ROW><ROW><id>4727207</id><snippet>0 .. facets-1</snippet></ROW><ROW><id>4727207</id><snippet>dtheta = 180.0 / facets
dphi = 360.0 / facets

for y in range(facets):
    theta = y * dtheta - 90
    for x in range(facets):
        phi = x * dphi
        ...
</snippet></ROW><ROW><id>4727364</id><snippet>#!/usr/bin/env python

import mechanize
import cookielib
import urllib
import logging
import sys

def main():

    br = mechanize.Browser()
    cj = cookielib.LWPCookieJar()
    br.set_cookiejar(cj)

    br.set_handle_equiv(True)
    br.set_handle_gzip(True)
    br.set_handle_redirect(True)
    br.set_handle_referer(True)
    br.set_handle_robots(False)

    br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

    r= br.open('http://www.reddit.com')

    # Select the second (index one) form
    br.select_form(nr=1)

    # User credentials
    br.form['user'] = 'user'
    br.form['passwd'] = 'passwd'

    # Login
    br.submit()

    # Open up comment page
    posting = 'http://www.reddit.com/r/PoopSandwiches/comments/f47f8/testing/'
    rval = 'PoopSandwiches'
    # you can get the rval in other ways, but this will work for testing

    r = br.open(posting)

    # You need the 'uh' value from the first form
    br.select_form(nr=0)
    uh = br.form['uh']

    br.select_form(nr=7)
    thing_id = br.form['thing_id']
    id = '#' + br.form.attrs['id']
    # The id that gets posted is the form id with a '#' prepended.

    data = {'uh':uh, 'thing_id':thing_id, 'id':id, 'renderstyle':'html', 'r':rval, 'text':"Your text here!"}
    new_data_dict = dict((k, urllib.quote(v).replace('%20', '+')) for k, v in data.iteritems())

    # not sure if the replace needs to happen, I did it anyway
    new_data = 'thing_id=%(thing_id)s&amp;text=%(text)s&amp;id=%(id)s&amp;r=%(r)s&amp;uh=%(uh)s&amp;renderstyle=%(renderstyle)s' %(new_data_dict)

    # not sure which of these headers are really needed, but it works with all
    # of them, so why not just include them.
    req = mechanize.Request('http://www.reddit.com/api/comment', new_data)
    req.add_header('Referer', posting)
    req.add_header('Accept', ' application/json, text/javascript, */*')
    req.add_header('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')
    req.add_header('X-Requested-With', 'XMLHttpRequest')
    cj.add_cookie_header(req)
    res = mechanize.urlopen(req)

main()
</snippet></ROW><ROW><id>4727364</id><snippet>magic</snippet></ROW><ROW><id>4727364</id><snippet>uh</snippet></ROW><ROW><id>4727364</id><snippet>id</snippet></ROW><ROW><id>4727398</id><snippet>filter</snippet></ROW><ROW><id>4727398</id><snippet>country_reverse = dict((v, k) for k, v in COUNTRY_CHOICES)
Country.objects.filter(code=country_reverse['france'])
</snippet></ROW><ROW><id>4727657</id><snippet>__dict__</snippet></ROW><ROW><id>4727657</id><snippet>if "__some_attribute__" in obj.__dict__:
    # do stuff
</snippet></ROW><ROW><id>4727657</id><snippet>try:
    obj.some_action_i_want_to_do(...)
except AttributeError:
    # doesn't provide the functionality I want
</snippet></ROW><ROW><id>4727657</id><snippet>dir()</snippet></ROW><ROW><id>4727796</id><snippet>except</snippet></ROW><ROW><id>4727796</id><snippet>&gt;&gt;&gt; def defaultval(error, value):
...     def decorator(func):
...             def defaulted(*args, **kwargs):
...                     try:
...                             return func(*args, **kwargs)
...                     except error:
...                             return value
...             return defaulted
...     return decorator
...
&gt;&gt;&gt; @defaultval(NameError, "undefined")
... def get_var():
...     return name
...
&gt;&gt;&gt; get_var()
'undefined'
</snippet></ROW><ROW><id>4727935</id><snippet> company, was_created = Company.objects.get_or_create(name=info)
                        setattr(self,key, [company,])
</snippet></ROW><ROW><id>4728147</id><snippet>()</snippet></ROW><ROW><id>4728147</id><snippet>[]</snippet></ROW><ROW><id>4728147</id><snippet>3 + 5
map(lambda x: x*x, range(10))
[a.x for a in some_iterable]
yield 7
</snippet></ROW><ROW><id>4728147</id><snippet># all the above expressions
print 42
if x: do_y()
return
a = 7
</snippet></ROW><ROW><id>4728458</id><snippet>f = float(c - (3*b**2 / 8))
g = float(d + (b**3/ 8) - (b*c / 2))
h = e - (3*b**4 / 256) + (b**2 * c / 16) - (b*d / 4)
</snippet></ROW><ROW><id>4728458</id><snippet>__future__</snippet></ROW><ROW><id>4728458</id><snippet>(3*b**2/8)</snippet></ROW><ROW><id>4728702</id><snippet>MaxRequestsPerChild 1</snippet></ROW><ROW><id>4729083</id><snippet>*</snippet></ROW><ROW><id>4729083</id><snippet>%</snippet></ROW><ROW><id>4729083</id><snippet>-</snippet></ROW><ROW><id>4729083</id><snippet>25 * 3 % 4</snippet></ROW><ROW><id>4729083</id><snippet>*</snippet></ROW><ROW><id>4729083</id><snippet>%</snippet></ROW><ROW><id>4729083</id><snippet>25 * 3</snippet></ROW><ROW><id>4729083</id><snippet>75</snippet></ROW><ROW><id>4729083</id><snippet>75 % 4</snippet></ROW><ROW><id>4729083</id><snippet>3</snippet></ROW><ROW><id>4729083</id><snippet>100 - 3</snippet></ROW><ROW><id>4729083</id><snippet>97</snippet></ROW><ROW><id>4729145</id><snippet>&gt;&gt;&gt; chars = "MESH" # guess
&gt;&gt;&gt; binchars = b"MESH" # guess
&gt;&gt;&gt; struct_fmt = "{}s".format(chars) # what you showed
&gt;&gt;&gt; struct_fmt
'MESHs' ############### won't work
&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack(struct_fmt, binchars)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
struct.error: bad char in struct format ############ didn't work
&gt;&gt;&gt; struct_fmt2 = "{}s".format(len(chars)) # what you probably did use
&gt;&gt;&gt; struct_fmt2
'4s' #### looks much better
&gt;&gt;&gt; struct.unpack(struct_fmt2, binchars)
(b'MESH',) ### did work
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4729400</id><snippet>def generateFromFile ( fileName ):
    for line in open( fileName ):
        for segment in line.split( ',' ):
            yield segment

for ln in generateFromFile( "input.txt" ):
    ch.Add( ln.strip() )
</snippet></ROW><ROW><id>4729413</id><snippet>import collections

data = [
    {'firstname': 'John', 'lastname': 'Smith'}, 
    {'firstname': 'Samantha', 'lastname': 'Smith'}, 
    {'firstname': 'shawn', 'lastname': 'Spencer'},
]

new_data = collections.defaultdict(list)

for d in data:
    new_data[d['lastname']].append(d['firstname'])

print new_data
</snippet></ROW><ROW><id>4729413</id><snippet>defaultdict(&lt;type 'list'&gt;, {'Smith': ['John', 'Samantha'], 'Spencer': ['shawn']})
</snippet></ROW><ROW><id>4729413</id><snippet>{% for lastname, firstname in data.items %}
    &lt;h1&gt; {{ lastname }} &lt;/h1&gt;
    &lt;p&gt; {{ firstname|join:", " }} &lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>4729413</id><snippet>&lt;h1&gt; Smith &lt;/h1&gt;
&lt;p&gt; John, Samantha &lt;/p&gt;

&lt;h1&gt; Spencer &lt;/h1&gt;
&lt;p&gt; shawn &lt;/p&gt;
</snippet></ROW><ROW><id>4729495</id><snippet>def getlocation(self, cellindex):
    res = []
    for size in reversed(self.dimensions):
        res.append(cellindex % size)
        cellindex /= size
    return res[::-1]
</snippet></ROW><ROW><id>4729495</id><snippet>class ndim:
    def __init__(self):
        self.dimensions=[8,9,10]
        self.numdimensions=3
        self.gridsize=8*9*10

    def getcellindex(self, location):
        cindex = 0
        cdrop = self.gridsize
        for index in xrange(self.numdimensions):
            cdrop /= self.dimensions[index]
            cindex += cdrop * location[index]
        return cindex

    def getlocation(self, cellindex):
        res = []
        for size in reversed(self.dimensions):
            res.append(cellindex % size)
            cellindex /= size
        return res[::-1]

n=ndim()
print n.getcellindex((0,0,0))
print n.getcellindex((0,0,1))
print n.getcellindex((0,1,0))
print n.getcellindex((1,0,0))

print n.getlocation(90)
print n.getlocation(10)
print n.getlocation(1)
print n.getlocation(0)
</snippet></ROW><ROW><id>4730164</id><snippet>import re

pattern_type = type(re.compile("foo"))

if isinstance(your_object, pattern_type):
   print "It's a pattern object!"
</snippet></ROW><ROW><id>4730356</id><snippet>class Device(models.Model):
    """A sensor"""
    name = models.CharField(max_length=20)
    ...

class DataPoint(models.Model):
    value = models.DecimalField(decimal_places=2, max_digits=10) # whatever is appropriate
    timestamp = models.DateTimeField()
    device = models.ForiegnKey(Device)
</snippet></ROW><ROW><id>4730356</id><snippet>appname_device
appname_data_point
</snippet></ROW><ROW><id>4730415</id><snippet>class Spam
  prop1 = db.String
  eggs = db.List

class Eggs
  prop1 = db.string
  @property
  def spams(self):
    return Spam.all().filter('eggs', self.key())
</snippet></ROW><ROW><id>4730415</id><snippet>def prefetch_refprops(entities, *props):
    """Dereference Reference Properties to reduce Gets.  See:
    http://blog.notdot.net/2010/01/ReferenceProperty-prefetching-in-App-Engine
    """
    fields = [(entity, prop) for entity in entities for prop in props]
    ref_keys = [prop.get_value_for_datastore(x) for x, prop in fields]
    ref_entities = dict((x.key(), x) for x in db.get(set(ref_keys)))
    for (entity, prop), ref_key in zip(fields, ref_keys):
        prop.__set__(entity, ref_entities[ref_key])
    return entities  
</snippet></ROW><ROW><id>4730415</id><snippet>derefrenced_spams = prefetch_refprops(Spams, models.Spam.eggs)    
</snippet></ROW><ROW><id>4730508</id><snippet>for k,v in dic:
</snippet></ROW><ROW><id>4730508</id><snippet>for k,v in dic.items():
</snippet></ROW><ROW><id>4730931</id><snippet>float</snippet></ROW><ROW><id>4730931</id><snippet>double</snippet></ROW><ROW><id>4730931</id><snippet>float</snippet></ROW><ROW><id>4730931</id><snippet>float</snippet></ROW><ROW><id>4730931</id><snippet>double</snippet></ROW><ROW><id>4730931</id><snippet>float</snippet></ROW><ROW><id>4730961</id><snippet>raw_input()</snippet></ROW><ROW><id>4730961</id><snippet>x1 = float(raw_input("x1: "))
y1 = float(raw_input("y1: "))
x2 = float(raw_input("x2: "))
y2 = float(raw_input("y2: "))
</snippet></ROW><ROW><id>4730961</id><snippet>input()</snippet></ROW><ROW><id>4731079</id><snippet>value.key in dict.keys()
</snippet></ROW><ROW><id>4731079</id><snippet>value.key in dict
</snippet></ROW><ROW><id>4731079</id><snippet>setdefault</snippet></ROW><ROW><id>4731292</id><snippet>W = m.X
</snippet></ROW><ROW><id>4731292</id><snippet>def W(*args, **kwargs):
    return m.X(*args, **kwargs)
</snippet></ROW><ROW><id>4731292</id><snippet>isinstance</snippet></ROW><ROW><id>4731292</id><snippet>class W(m.X): pass
</snippet></ROW><ROW><id>4731292</id><snippet>W</snippet></ROW><ROW><id>4731292</id><snippet>m.X</snippet></ROW><ROW><id>4731292</id><snippet>W</snippet></ROW><ROW><id>4731292</id><snippet>W=m.X; W(args)</snippet></ROW><ROW><id>4731292</id><snippet>m.X</snippet></ROW><ROW><id>4731333</id><snippet>MySQLdb</snippet></ROW><ROW><id>4731333</id><snippet>_mysql.so</snippet></ROW><ROW><id>4731333</id><snippet>$ otool -L /Users/yanigisawa/.python-eggs/MySQL_python-1.2.3-py2.6-macosx-10.6-universal.egg-tmp/_mysql.so
</snippet></ROW><ROW><id>4731333</id><snippet>$ otool -DX /usr/local/mysql/lib/libmysqlclient.16.dylib
</snippet></ROW><ROW><id>4731333</id><snippet>DYLD_LIBRARY_PATH</snippet></ROW><ROW><id>4731333</id><snippet>install_name_tool</snippet></ROW><ROW><id>4731333</id><snippet>Python</snippet></ROW><ROW><id>4731333</id><snippet>MySQLdb</snippet></ROW><ROW><id>4731333</id><snippet>MySQL</snippet></ROW><ROW><id>4731333</id><snippet>MacPorts</snippet></ROW><ROW><id>4731333</id><snippet>Fink</snippet></ROW><ROW><id>4731333</id><snippet>HomeBrew</snippet></ROW><ROW><id>4731333</id><snippet>MacPorts</snippet></ROW><ROW><id>4731333</id><snippet>dmg</snippet></ROW><ROW><id>4731333</id><snippet>$ sudo port selfupdate  # ensure the port files are up-to-date
$ sudo port install py26-mysql
</snippet></ROW><ROW><id>4731333</id><snippet>/opt/local/bin/python2.6</snippet></ROW><ROW><id>4731333</id><snippet>Django</snippet></ROW><ROW><id>4731333</id><snippet>otool</snippet></ROW><ROW><id>4731333</id><snippet>/</snippet></ROW><ROW><id>4731333</id><snippet>install_name_tool</snippet></ROW><ROW><id>4731333</id><snippet>_mysql.so</snippet></ROW><ROW><id>4731333</id><snippet>DYLD_LIBRARY_PATH</snippet></ROW><ROW><id>4731333</id><snippet>$ cd ~/.python-eggs/MySQL_python-1.2.3-py2.6-macosx-10.6-universal.egg-tmp
$ sudo install_name_tool -change libmysqlclient.16.dylib \
                                 /usr/local/mysql/lib/libmysqlclient.16.dylib \
                         _mysql.so
</snippet></ROW><ROW><id>4731508</id><snippet>A = Cell(8,Cell(9,Cell(10)))
</snippet></ROW><ROW><id>4731508</id><snippet>class Cell(object):
    def __init__(self, val, nxt=None):
        self.val = val
        self.next = nxt
</snippet></ROW><ROW><id>4731508</id><snippet>C = Cell(A)
</snippet></ROW><ROW><id>4731508</id><snippet>class Cell(object):
    def __init__(self, val, nxt=None):
        self.val = val
        self.next = nxt

    def copy(self):
        if self.next is None:
            return Cell(self.value)
        else:
            return Cell(self.value, self.next.copy())
</snippet></ROW><ROW><id>4731508</id><snippet>def concat_copy(a, b):
        new = a.copy()

        # find the end of the copy
        last = new
        while last.next is not None:
            last = last.next
        # append a copy of the other list
        last.next = b.copy()
</snippet></ROW><ROW><id>4731508</id><snippet>def copy( cells ):
    new = Cell(cells.value)
    current = new
    old = cells

    while old.next is not None:
        # copy the current cell
        ccopy = Cell(old.value)

        # add it
        current.next = ccopy

        # prepare for the next round
        current = ccopy
        old = old.next

    return new
</snippet></ROW><ROW><id>4731508</id><snippet>C = Cell(A,C)</snippet></ROW><ROW><id>4731508</id><snippet>C</snippet></ROW><ROW><id>4731530</id><snippet>UploadedFile</snippet></ROW><ROW><id>4731530</id><snippet>utf8_file = codecs.EncodedFile(request.FILES['file_field'],"utf-8")</snippet></ROW><ROW><id>4731530</id><snippet>InMemoryUploadedFile</snippet></ROW><ROW><id>4731530</id><snippet>codecs.EncodedFile</snippet></ROW><ROW><id>4731530</id><snippet>seek()</snippet></ROW><ROW><id>4731530</id><snippet>InMemoryUploadedFile</snippet></ROW><ROW><id>4731530</id><snippet>request.FILES['file_field'].open()</snippet></ROW><ROW><id>4731530</id><snippet>seek()</snippet></ROW><ROW><id>4731596</id><snippet>x = [1, 2, 3]
y = [4, 5, 6]
zipped = zip(x, y)
</snippet></ROW><ROW><id>4731596</id><snippet>{% for x, y in zipped %}
    {{ x }} - {{ y }}
{% endfor %}
</snippet></ROW><ROW><id>4731628</id><snippet>sudo apt-get install python-yaml python-setuptools</snippet></ROW><ROW><id>4731628</id><snippet>def main():
    beanstalk = beanstalkc.Connection(host='localhost', port=11300)
    while True:
        job = beanstalk.reserve()
        print job.body
        job.delete()


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4731628</id><snippet>def main():
    beanstalk = beanstalkc.Connection(host='localhost', port=11300)
    jid = beanstalk.put('foo', delay=5)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4731628</id><snippet>eta</snippet></ROW><ROW><id>4731732</id><snippet>myro</snippet></ROW><ROW><id>4731732</id><snippet>myro</snippet></ROW><ROW><id>4731741</id><snippet>SiteUser</snippet></ROW><ROW><id>4732126</id><snippet> &gt;&gt;&gt;from django.contrib.localflavor.us.us_states import US_STATES
 &gt;&gt;&gt;dict(US_STATES)['AL']
 'Alabama'
</snippet></ROW><ROW><id>4732910</id><snippet>__doc__</snippet></ROW><ROW><id>4732910</id><snippet>&gt;&gt;&gt; def f(x):
...     "return the square of x"
...     return x * x
&gt;&gt;&gt; f.__doc__
'return the square of x'
&gt;&gt;&gt; help(f)
(help page with appropriate docstring)
&gt;&gt;&gt; f.__doc__ = "Return the argument squared"
&gt;&gt;&gt; help(f)
(help page with new docstring)
</snippet></ROW><ROW><id>4732910</id><snippet>def f(x):
    return x * x

f.__doc__ = """
Return the square of the function argument.

Arguments: x - number to square

Return value: x squared

Exceptions: none

Global variables used: none

Side effects: none

Limitations: none
"""
</snippet></ROW><ROW><id>4733196</id><snippet>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; getcontext().prec = 100
&gt;&gt;&gt; Decimal(2).sqrt()
Decimal('1.414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641573')
</snippet></ROW><ROW><id>4733417</id><snippet>class A:
   def foo(self):
     pass
class B(A):
   def boo(Aself):
     pass
class C(B):
   def coo(self):
     pass
class D(C):
   def doo(self):
      pass  

import inspect 
inspect.classify_class_attrs(D)

[('__doc__', 'data', &lt;class __main__.D at 0x85fb8fc&gt;, None),
 ('__module__', 'data', &lt;class __main__.D at 0x85fb8fc&gt;, '__main__'),
 ('boo',
  'method',
  &lt;class __main__.B at 0x85fb44c&gt;,
  &lt;function boo at 0x8612bfc&gt;),
 ('coo',
  'method',
  &lt;class __main__.C at 0x85fb8cc&gt;,
  &lt;function coo at 0x8612ca4&gt;),
 ('doo',
  'method',
  &lt;class __main__.D at 0x85fb8fc&gt;,
  &lt;function doo at 0x8612f0c&gt;),
 ('foo',
  'method',
  &lt;class __main__.A at 0x85fb71c&gt;,
  &lt;function foo at 0x8612f7c&gt;)]
</snippet></ROW><ROW><id>4733605</id><snippet>'\n'.join(resultlist)</snippet></ROW><ROW><id>4733605</id><snippet>import os

usernames = []

for l in os.listdir('/path/to/directory/with/usernames/'):
    usernames.append(l)

usernames = set(usernames)

f = open('/path/to/6 million','r')
resultlist = [] 
for l in f:
    l = l.split(' ')
    if (l[1] in usernames):
        resultlist.append(l[1])
f.close()

common=open('/path/to/filf','w')
common.write('\n'.join(resultlist) + '\n')
common.close()
</snippet></ROW><ROW><id>4733605</id><snippet>usernames = set(os.listdir('/path/to/directory/with/usernames/'))
from collections import Counter

f = open('/path/to/6 million')
name_counts = Counter(line.split()[1] for line in f if line in usenames)
print name_counts.most_common()
</snippet></ROW><ROW><id>4733605</id><snippet>import os
usernames = set(os.listdir('/path/to/directory/with/usernames/'))

f = open('/path/to/6 million')
resultlist = [line.split()[1] for line in f if line[1] in usernames]

common = open('/path/to/filf','w')
common.write('\n'.join(resultlist) + '\n')
common.close()
</snippet></ROW><ROW><id>4733717</id><snippet>&lt;script type='text/javascript'&gt;
var a = {{ someJsonObject }}
&lt;/script&gt;
</snippet></ROW><ROW><id>4733795</id><snippet>cStringIO</snippet></ROW><ROW><id>4733795</id><snippet>from io import StringIO</snippet></ROW><ROW><id>4733795</id><snippet>io.BytesIO</snippet></ROW><ROW><id>4734157</id><snippet>var params = JSON.parse('{{ all_params_in_json|escapejs }}');
</snippet></ROW><ROW><id>4734157</id><snippet>all_params_in_json</snippet></ROW><ROW><id>4734492</id><snippet>    import os  
    os.path.abspath(os.path.dirname(__file__))
</snippet></ROW><ROW><id>4734547</id><snippet>os.system</snippet></ROW><ROW><id>4734547</id><snippet>new_volume = 50
with open("/home/administrator/files/mplayer-control.pipe","w") as fp:
    fp.write("set_property volume %d\n" % (new_volume,))
</snippet></ROW><ROW><id>4734547</id><snippet>musicvol</snippet></ROW><ROW><id>4734547</id><snippet>%</snippet></ROW><ROW><id>4734547</id><snippet>subprocess.call</snippet></ROW><ROW><id>4734547</id><snippet>executable</snippet></ROW><ROW><id>4734547</id><snippet>shell</snippet></ROW><ROW><id>4734547</id><snippet>setvolume.sh</snippet></ROW><ROW><id>4734547</id><snippet>#!</snippet></ROW><ROW><id>4734547</id><snippet>subprocess.call("/home/administrator/files/setvolume.sh")
</snippet></ROW><ROW><id>4734547</id><snippet>open</snippet></ROW><ROW><id>4734547</id><snippet>write</snippet></ROW><ROW><id>4734640</id><snippet>import numpy as np

nbLamps = 200000
nbDays = 365

arr = np.array([nbLamps, nbDays], dtype=np.bool)
</snippet></ROW><ROW><id>4735064</id><snippet>class Complicated:
    pass

class _Utility1:
    pass

class _Utility2:
    pass
</snippet></ROW><ROW><id>4735064</id><snippet>_</snippet></ROW><ROW><id>4735064</id><snippet>from module import *</snippet></ROW><ROW><id>4735609</id><snippet>data[0].rstrip("\n").decode("utf-16")
</snippet></ROW><ROW><id>4735609</id><snippet>data = open(...).read()
data.decode("utf-16")
</snippet></ROW><ROW><id>4735609</id><snippet>readlines()</snippet></ROW><ROW><id>4736172</id><snippet>obj = Foo.objects.get(pk="foo")
obj.pk = "bar"
obj.save()
</snippet></ROW><ROW><id>4736210</id><snippet>itertools.groupby</snippet></ROW><ROW><id>4736210</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; for i, grp in groupby(data, key=lambda x: x['value']):
    lst = [x['time'] for x in grp]
    print(i, max(lst) - min(lst))


0 0:00:00
1 0:00:00
0 0:49:57
1 2:31:25
0 0:00:00
1 0:00:00
</snippet></ROW><ROW><id>4736210</id><snippet>&gt;&gt;&gt; sums = {0:datetime.timedelta(0), 1:datetime.timedelta(0)}
&gt;&gt;&gt; for cur, nex in zip(data, data[1:]):
    sums[cur['value']] += nex['time'] - cur['time']


&gt;&gt;&gt; for i, j in sums.items():
    print(i, j)


0 5:32:10
1 6:44:20
</snippet></ROW><ROW><id>4736210</id><snippet>itertools.groupby</snippet></ROW><ROW><id>4736230</id><snippet>&gt;&gt;&gt; from urlparse import urlparse
&gt;&gt;&gt; o = urlparse('http://www.facebook.com/pages/create.php')
&gt;&gt;&gt; o.netloc
'www.facebook.com'
</snippet></ROW><ROW><id>4736607</id><snippet>from random import random

class MyContainer(object):
    def __iter__(self):
        return MyIter(self)

class MyIter(object):
    def __init__(self, container):
        self.container = container
        self.context = {}
        self.it = iter(xrange(10))
    def next(self):
        self.context[random()] = random()
        return next(self.it)
    def __iter__(self):
        return self

obj = MyContainer()
# ...
</snippet></ROW><ROW><id>4736609</id><snippet>def get_entries( infile ):
    with open( infile, 'rt') as file:
        for line in file:
            name, nums = line.split(':', 1)
            yield name, tuple(int(x) for x in nums.split(','))

# dict takes a sequence of  `(key, value)` pairs and turns in into a dict
print dict(get_entries( infile ))
</snippet></ROW><ROW><id>4736609</id><snippet>dict</snippet></ROW><ROW><id>4736609</id><snippet>for name, nums in get_entries( infile ):
    print name, nums
</snippet></ROW><ROW><id>4736609</id><snippet>dict</snippet></ROW><ROW><id>4736609</id><snippet>OrderedDict</snippet></ROW><ROW><id>4736609</id><snippet>from collections import OrderedDict
print OrderedDict(get_entries( infile ))
</snippet></ROW><ROW><id>4736921</id><snippet>tree = ET.parse(workspace)
</snippet></ROW><ROW><id>4736921</id><snippet>tree = ET.parse(filename)
</snippet></ROW><ROW><id>4737115</id><snippet>i</snippet></ROW><ROW><id>4737115</id><snippet>i</snippet></ROW><ROW><id>4737115</id><snippet>self</snippet></ROW><ROW><id>4737362</id><snippet>ElementTree</snippet></ROW><ROW><id>4737362</id><snippet>write(file, encoding="us-ascii", xml_declaration=None, method="xml")</snippet></ROW><ROW><id>4737362</id><snippet>ElementTree</snippet></ROW><ROW><id>4737362</id><snippet>&gt;&gt;&gt; from xml.etree.ElementTree import ElementTree
&gt;&gt;&gt; tree = ElementTree()
&gt;&gt;&gt; tree.parse("index.xhtml")
</snippet></ROW><ROW><id>4737926</id><snippet>dict(itertools.izip_longest(l, x))
# {1: 'a', 2: 'b', 3: 'c', 4: None, 5: None}
</snippet></ROW><ROW><id>4738098</id><snippet>float(factorize(n/candidate))
</snippet></ROW><ROW><id>4738098</id><snippet>factorize</snippet></ROW><ROW><id>4738098</id><snippet>float</snippet></ROW><ROW><id>4738232</id><snippet>self.Center()
</snippet></ROW><ROW><id>4738232</id><snippet>__init__()</snippet></ROW><ROW><id>4738232</id><snippet>pos=(-1,-1)</snippet></ROW><ROW><id>4738303</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>4738303</id><snippet>!=</snippet></ROW><ROW><id>4738303</id><snippet>&gt;&gt;&gt; "foo" &lt;&gt; "bar"
True
&gt;&gt;&gt; "foo" &lt;&gt; "foo"
False
</snippet></ROW><ROW><id>4738318</id><snippet>class A(object):
    def __getattr__(self, attr):
        try:
            return self.__dict__[attr]
        except KeyError:
            self.__dict__[attr] = 'Attribute set to string'
            print 'Assigned attribute'
            return self.__dict__[attr]

obj = A()
print obj.foo
</snippet></ROW><ROW><id>4738318</id><snippet>Assigned attribute
Attribute set to string
</snippet></ROW><ROW><id>4738318</id><snippet>__getattr__</snippet></ROW><ROW><id>4738318</id><snippet>try .. except</snippet></ROW><ROW><id>4738318</id><snippet>class A(object):
    def __getattr__(self, attr):
        val = 'Attribute set to string'
        setattr(self, attr, val)
        print 'Assigned attribute'
        return val
</snippet></ROW><ROW><id>4738563</id><snippet>from txjsonrpc.web import jsonrpc
from twisted.web import server
from twisted.internet import reactor

class Math(jsonrpc.JSONRPC):
    """
    An example object to be published.
    """
    def jsonrpc_add(self, a, b):
        """
        Return sum of arguments.
        """
        return a + b

reactor.listenTCP(7080, server.Site(Math()))
reactor.run()
</snippet></ROW><ROW><id>4738563</id><snippet>from twisted.internet import reactor
from txjsonrpc.web.jsonrpc import Proxy

def printValue(value):
    print "Result: %s" % str(value)

def printError(error):
    print 'error', error

def shutDown(data):
    print "Shutting down reactor..."
    reactor.stop()

proxy = Proxy('http://127.0.0.1:7080/')

d = proxy.callRemote('add', 3, 5)
d.addCallback(printValue).addErrback(printError).addBoth(shutDown)
reactor.run()
</snippet></ROW><ROW><id>4738588</id><snippet>#!/usr/bin/env python2

# Let's take this string:
a = "palindnilddafa"
# I surround with a try/catch block, explanation following
try:
  # In this loop I go from length of a minus 1 to 0.
  # range can take 3 params: start, end, increment
  # This way I start from the thow longest subsring,
  # the one without the first char and without the last
  # and go on this way
  for i in range(len(a)-1, 0, -1):
    # In this loop I want to know how many 
    # Palidnrome of i length I can do, that
    # is len(a) - i, and I take all
    # I start from the end to find the largest first
    for j in range(len(a) - i):
      # this is a little triky.
      # string[start:end] is the slice operator
      # as string are like arrays (but unmutable).
      # So I take from j to j+i, all the offsets 
      # The result of "foo"[1:3] is "oo", to be clear.
      # with string[::-1] you take all elements but in the
      # reverse order
      # The check string1 in string2 checks if string1 is a 
      # substring of string2
      if a[j:j+i][::-1] in a:
        # If it is I cannot break, 'couse I'll go on on the first
        # cycle, so I rise an exception passing as argument the substring
        # found
        raise Exception(a[j:j+i][::-1])

# And then I catch the exception, carrying the message
# Which is the palindrome, and I print some info
except Exception as e:
  # You can pass many things comma-separated to print (this is python2!)
  print e, "is the longest palindrome of", a
  # Or you can use printf formatting style
  print "It's %d long and start from %d" % (len(str(e)), a.index(str(e)))
</snippet></ROW><ROW><id>4738588</id><snippet>#!/usr/bin/env python2


def check(s, i):
  mid = s[i]
  j = 1
  try:
    while s[i-j] == s[i+j]:
      j += 1
  except:
    pass
  return s[i-j+1:i+j]

def do_all(a):
  pals = []
  mlen = 0
  for i in range(len(a)/2):
    #print "check for", i
    left = check(a, len(a)/2 + i)
    mlen = max(mlen, len(left))
    pals.append(left)

    right = check(a, len(a)/2 - i)
    mlen = max(mlen, len(right))
    pals.append(right)

    if mlen &gt; max(2, i*2-1):
      return left if len(left) &gt; len(right) else right

string = "palindnilddafa"

print do_all(string)
</snippet></ROW><ROW><id>4738904</id><snippet>name</snippet></ROW><ROW><id>4738904</id><snippet>title</snippet></ROW><ROW><id>4738904</id><snippet>name</snippet></ROW><ROW><id>4738904</id><snippet>[x for x in Session.query(Entry).all() if x.name==my_name][0]</snippet></ROW><ROW><id>4738904</id><snippet>id</snippet></ROW><ROW><id>4738904</id><snippet>title</snippet></ROW><ROW><id>4738904</id><snippet>id</snippet></ROW><ROW><id>4739499</id><snippet> python my_program.py 2&gt;&amp;1| grep -v "GLib-GIO-CRITICAL"
</snippet></ROW><ROW><id>4739517</id><snippet>sudo apt-get install python-kerberos
</snippet></ROW><ROW><id>4739524</id><snippet>python-dev</snippet></ROW><ROW><id>4739616</id><snippet>processQueue.qsize</snippet></ROW><ROW><id>4739616</id><snippet>Definition: processQueue.qsize(self)
Docstring:
    Return the approximate size of the queue (not reliable!).
</snippet></ROW><ROW><id>4739616</id><snippet>qsize</snippet></ROW><ROW><id>4739616</id><snippet>processQueue.qsize</snippet></ROW><ROW><id>4739616</id><snippet>processQueue.put</snippet></ROW><ROW><id>4739690</id><snippet>class MyDelegate(QItemDelegate):      
    def __init__(self):    
        QItemDelegate.__init__(self)  

    def sizeHint(self, option, index):  
        return QSize(32,32)
</snippet></ROW><ROW><id>4739690</id><snippet>delegate = MyDelegate()   
tree = QTreeWidget()
tree.setItemDelegate(delegate)
</snippet></ROW><ROW><id>4739690</id><snippet>def sizeHint(self,option,index):
    parent = index.parent()
    if parent.isValid() and  not parent.parent().isValid():            
        return QSize(32,32)
    return QSize(24,24)
</snippet></ROW><ROW><id>4739690</id><snippet>QTreeWidget.setIconSize(QSize(width,height))</snippet></ROW><ROW><id>4739704</id><snippet>import enthought.mayavi.mlab as mylab
import numpy as np
x, y, z, value = np.random.random((4, 40))
mylab.points3d(x, y, z, value)
</snippet></ROW><ROW><id>4739850</id><snippet>import networkx as nx
g = nx.DiGraph()
g.add_nodes_from(['London', 'Boston', 'NY', 'Dallas'])
g.add_edge('NY', 'Boston', capacity)
g.add_edge('Dallas', 'Boston')
g.add_edge('Dallas', 'London')
# add capacity to existing edge
g.edge['Dallas']['London']['capacity'] = 2
# create edge with capacity attribute
g.add_edge('NY', 'London', capacity=3)
print nx.min_cut(g, 'NY', 'London')
</snippet></ROW><ROW><id>4740493</id><snippet>if socket.gethostname() in ('bristle', 'rete'):
  # Something here that operates under the conditions.
</snippet></ROW><ROW><id>4740509</id><snippet>html = """&lt;html&gt;&lt;head&gt;
&lt;style&gt;#square{color:%(color)s;width:100%%;height:100%%;}&lt;/style&gt;    
&lt;/head&gt;    &lt;body&gt;  &lt;div id="square"&gt;  &lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;""" % locals()
</snippet></ROW><ROW><id>4740640</id><snippet>setup.py</snippet></ROW><ROW><id>4740640</id><snippet>setup.py</snippet></ROW><ROW><id>4741112</id><snippet>for host in f:
    match = re_hostinfo.search(host)
    if match:
        print match.groups()
</snippet></ROW><ROW><id>4741112</id><snippet>host</snippet></ROW><ROW><id>4741112</id><snippet>data = f.read()
for x in regex.finditer(data):
    process(x.groups())
</snippet></ROW><ROW><id>4741112</id><snippet>regex</snippet></ROW><ROW><id>4741112</id><snippet>&gt;&gt;&gt; m = re.search(r'(hardware ethernet\s+(\S+));\s+\S+\s+(\S+);', data)
&gt;&gt;&gt; print m.groups()
('hardware ethernet   00:22:38:8f:1f:43', '00:22:38:8f:1f:43', 'node20007.domain.com')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4741112</id><snippet>&gt;&gt;&gt; regex = re.compile(r"""
... (hardware[ ]ethernet \s+
...     (\S+) # MAC
... ) ;
... \s+ # includes newline
... \S+ # variable(??) text e.g. "fixed-address"
... \s+
... (\S+) # e.g. "node20007.domain.com"
... ;
... """, re.VERBOSE)
&gt;&gt;&gt; print regex.search(data).groups()
('hardware ethernet   00:22:38:8f:1f:43', '00:22:38:8f:1f:43', 'node20007.domain.com')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4741269</id><snippet>g = myfunct()
</snippet></ROW><ROW><id>4741269</id><snippet>g.next()
</snippet></ROW><ROW><id>4741269</id><snippet>next(g)
</snippet></ROW><ROW><id>4741269</id><snippet>StopIteration</snippet></ROW><ROW><id>4741500</id><snippet>T(1) = 1
T(2) = 1
T(n) &lt;= T(n / 2) + T(n / 2 + 1) + 1
</snippet></ROW><ROW><id>4741500</id><snippet>T(1) = 1
T(2) = 1
</snippet></ROW><ROW><id>4741500</id><snippet>T(n) &lt;= T(n / 2) + T(n / 2 + 1) + 1
     &lt;= 1 + 1 + 1
     &lt;= 3
</snippet></ROW><ROW><id>4741500</id><snippet>T(n) &lt;= T(n / 2) + T(n / 2 + 1) + 1
     &lt;= 1 + max{c(n / 2 + 1) + d, 1} + 1
     &lt;= 2 + max{c(n / 2 + 1) + d, 1}
     &lt;= 3 + c(n / 2 + 1) + d
</snippet></ROW><ROW><id>4741500</id><snippet>3 + c(n / 2 + 1) + d &lt;= cn + d
3 + c(n / 2 + 1)     &lt;= cn
3 + c(5 / 2 + 1)     &lt;= 5c
3 + 5c/2 + c         &lt;= 5c
3 + 7c/2             &lt;= 5c
4                    &lt;= 3c / 2
8 / 3                &lt;= c
</snippet></ROW><ROW><id>4741500</id><snippet>T(n) &lt;= T(n / 2) + T(n / 2 + 1) + 1
     &lt;= c(n / 2) + d + c(n / 2 + 1) + d + 1
     &lt;= cn / 2 + cn / 2 + c + 2d + 1
      = cn + c + 2d + 1
</snippet></ROW><ROW><id>4741500</id><snippet> cn + c + 2d + 1 &lt;= cn + d
      c + 2d + 1 &lt;=      d
      c +  d + 1 &lt;= 0
</snippet></ROW><ROW><id>4741500</id><snippet>T(n) &lt;= max{8n/3 - 11/3, 1}
</snippet></ROW><ROW><id>4741509</id><snippet>QMainWindow</snippet></ROW><ROW><id>4741542</id><snippet>config.get('pylons.app_globals') or config.get('pylons.g')
</snippet></ROW><ROW><id>4741543</id><snippet>a.extend(list(b))
</snippet></ROW><ROW><id>4741543</id><snippet>a.extend(b)
</snippet></ROW><ROW><id>4741546</id><snippet>import urllib
f = urllib.urlopen("http://tycho.usno.navy.mil/cgi-bin/timer.pl")
time_page = f.readlines()
for line in time_page:
    if line.find("Eastern Time") != -1:
        ny_time = line[4:24]
        break
print ny_time
</snippet></ROW><ROW><id>4741951</id><snippet>-self.libraries = ['ssleay32', 'libeay32']
+self.libraries = ['ssleay32', 'libeay32', 'crypt32', 'user32', 'gdi32', 'kernel32', 'ws2_32', 'advapi32']
</snippet></ROW><ROW><id>4741957</id><snippet>group1 = models.ForeignKey(Group1, blank=True, null=True)
</snippet></ROW><ROW><id>4741957</id><snippet>User.objects.filter(username='blahblah').select_related('profile', 'profile__group1', 'profile__group2')
</snippet></ROW><ROW><id>4742078</id><snippet>local_settings.py</snippet></ROW><ROW><id>4742078</id><snippet>settings.py</snippet></ROW><ROW><id>4742078</id><snippet>settings.py</snippet></ROW><ROW><id>4742078</id><snippet>local_settings.py</snippet></ROW><ROW><id>4742078</id><snippet>local_settings.py</snippet></ROW><ROW><id>4742152</id><snippet>abc</snippet></ROW><ROW><id>4742152</id><snippet>abc.py</snippet></ROW><ROW><id>4742316</id><snippet>match = re.finditer('A', 'ABBACDA')
for m in match:
    print m.start(), m.end(), m.group(0)
</snippet></ROW><ROW><id>4742316</id><snippet>0 1 A
3 4 A
6 7 A
</snippet></ROW><ROW><id>4742316</id><snippet>match = re.finditer('BB', 'ABBACDA')
for m in match:
    print m.start(), m.end(), m.group(0)
</snippet></ROW><ROW><id>4742316</id><snippet>1 3 BB
</snippet></ROW><ROW><id>4742518</id><snippet>int()</snippet></ROW><ROW><id>4742518</id><snippet>&gt;&gt;&gt; n = None
&gt;&gt;&gt; while n is None:
...    a = raw_input("Enter a number: ")
...    try:
...      n = int(a)
...    except ValueError:
...      print "Not a number."
...
Enter a number: abc
Not a number.
Enter a number: cauliflowers are my favourite vegetable
Not a number.
Enter a number: 12
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4742518</id><snippet>0, 1, 2, ..., N</snippet></ROW><ROW><id>4742518</id><snippet>&gt;&gt;&gt; while True:
...   a = raw_input("Enter a number: ")
...   if a.isdigit():
...     break
...   print "Not a number."
...
Enter a number: I like beetroot too
Not a number.
Enter a number: -500
Not a number.
Enter a number: 500
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4742518</id><snippet>&gt;&gt;&gt; while True:
...   a = raw_input("Enter a number: ")
...   if len(a) &gt; 0 and ((a[0] == '-' and a[1:].isdigit()) or a.isdigit()):
...     break
...   print "Not a number."
...
Enter a number: Celery stinks.
Not a number.
Enter a number:
Not a number.
Enter a number: -
Not a number.
Enter a number: 1
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4742783</id><snippet>re.match</snippet></ROW><ROW><id>4742783</id><snippet>def url_match(line, url):
    match = re.match(r'&lt;a href="(?P&lt;url&gt;[^"]*?)"', line)
    return match and match.groupdict()['url'] == url:
</snippet></ROW><ROW><id>4742783</id><snippet>&gt;&gt;&gt; url_match('&lt;a href="test"&gt;', 'test')
True
&gt;&gt;&gt; url_match('&lt;a href="test"&gt;', 'te')
False
&gt;&gt;&gt; url_match('this is a &lt;a href="test"&gt;', 'test')
False
</snippet></ROW><ROW><id>4742783</id><snippet>re.search</snippet></ROW><ROW><id>4742783</id><snippet>def url_search(line, url):
    match = re.search(r'&lt;a href="(?P&lt;url&gt;[^"]*?)"', line)
    return match and match.groupdict()['url'] == url:
</snippet></ROW><ROW><id>4742783</id><snippet>&gt;&gt;&gt; url_search('&lt;a href="test"&gt;', 'test')
True
&gt;&gt;&gt; url_search('&lt;a href="test"&gt;', 'te')
False
&gt;&gt;&gt; url_search('this is a &lt;a href="test"&gt;', 'test')
True
</snippet></ROW><ROW><id>4743219</id><snippet>self.assertIn('rugby', [sport_object.name for sport_object in sports_objects])
</snippet></ROW><ROW><id>4743286</id><snippet>from operator import itemgetter
import heapq
import collections
def least_common_values(array, to_find=None):
    counter = collections.Counter(array)
    if to_find is None:
        return sorted(counter.items(), key=itemgetter(1), reverse=False)
    return heapq.nsmallest(to_find, counter.items(), key=itemgetter(1))

&gt;&gt;&gt; data = [1,1,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4]
&gt;&gt;&gt; least_common_values(data, 2)
[(1, 2), (2, 4)]
&gt;&gt;&gt; least_common_values([1,1,2,3,3])
[(2, 1), (1, 2), (3, 2)]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4743418</id><snippet>def addToList(self, str_to_add):
    if str_to_add not in self.list_of_strings:
        self.list_of_strings.append(str_to_add)
</snippet></ROW><ROW><id>4743621</id><snippet>list(an_iterator)</snippet></ROW><ROW><id>4743621</id><snippet>difflib</snippet></ROW><ROW><id>4743621</id><snippet>Differ</snippet></ROW><ROW><id>4743621</id><snippet>difflib</snippet></ROW><ROW><id>4743621</id><snippet>difflib</snippet></ROW><ROW><id>4743621</id><snippet>difflib</snippet></ROW><ROW><id>4743621</id><snippet>---  
+++  
@@ -7,0 +7,1 @@
+aaaaa
@@ -9,1 +10,1 @@
-c= 0
+c= 1
@@ -15,1 +16,0 @@
-    m = re.match(code_re, text)
</snippet></ROW><ROW><id>4743621</id><snippet>+7,1 
aaaaa
-9,1 
+10,1
c= 1
-15,1
</snippet></ROW><ROW><id>4743621</id><snippet>-8,1
+9,1
print "The end"
</snippet></ROW><ROW><id>4743621</id><snippet>-8,1
+9,1
&gt;print "The end"
</snippet></ROW><ROW><id>4743621</id><snippet>def compact_a_unidiff(s):
    s = [l for l in s if l[0] in ('+','@')]
    result = []
    for l in s:
        if l.startswith('++'):
            continue
        elif l.startswith('+'):
            result.append('&gt;'+ l[1:])
        else:
            del_cmd, add_cmd = l[3:-3].split()
            del_pair, add_pair = (c.split(',') for c in (del_cmd,add_cmd))
            if del_pair[1]  != '0':
                result.append(del_cmd)
            if add_pair[1] != '0':
                result.append(add_cmd)
    return result
</snippet></ROW><ROW><id>4743693</id><snippet>import paramiko
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(your_host, port=your_port, username=your_username, password=your_password)
</snippet></ROW><ROW><id>4743783</id><snippet>popen(3)</snippet></ROW><ROW><id>4743783</id><snippet>popen</snippet></ROW><ROW><id>4743783</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; print args
['/bin/vikings', '-input', 'eggs.txt', '-output', 'spam spam.txt', '-cmd', "echo '$MONEY'"]
&gt;&gt;&gt; p = subprocess.Popen(args)
</snippet></ROW><ROW><id>4743979</id><snippet>class EditEventForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(EditEventForm, self).__init__(*args, **kwargs)
        self.fields['bands'].queryset= \
                      Bands.objects.filter(Q(name='band1')|Q(name='band2'))
    class Meta:
        model = Event
</snippet></ROW><ROW><id>4743979</id><snippet>form = EditEventForm(instance=event)
</snippet></ROW><ROW><id>4744266</id><snippet>form = SnippetForm(data=request.POST, instance=snippet, force_update=True)
</snippet></ROW><ROW><id>4744333</id><snippet>forms.py</snippet></ROW><ROW><id>4744333</id><snippet>from form_utils.forms import BetterModelForm as ModelForm
</snippet></ROW><ROW><id>4744463</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>4744463</id><snippet>TestCase</snippet></ROW><ROW><id>4744463</id><snippet>TestSuite</snippet></ROW><ROW><id>4744463</id><snippet>TestCase</snippet></ROW><ROW><id>4744625</id><snippet>import Image

image  = Image.open('images/original.jpg')
width  = image.size[0]
height = image.size[1]

aspect = width / float(height)

ideal_width = 200
ideal_height = 200

ideal_aspect = ideal_width / float(ideal_height)

if aspect &gt; ideal_aspect:
    # Then crop the left and right edges:
    new_width = int(ideal_aspect * height)
    offset = (width - new_width) / 2
    resize = (offset, 0, width - offset, height)
else:
    # ... crop the top and bottom:
    new_height = int(width / ideal_aspect)
    offset = (height - new_height) / 2
    resize = (0, offset, width, height - offset)

thumb = image.crop(resize).resize((ideal_width, ideal_height), Image.ANTIALIAS)
thumb.save('thumb.jpg')
</snippet></ROW><ROW><id>4745007</id><snippet># thread a
from UserShare import RegDevID
</snippet></ROW><ROW><id>4745007</id><snippet># thread b
from ShareVar import send_queue, RegDevID 
</snippet></ROW><ROW><id>4745007</id><snippet>somevar = sys.modules['somemodule'].somevar
</snippet></ROW><ROW><id>4745007</id><snippet>import ShareVar
...
ShareVar.RegDevID = data
</snippet></ROW><ROW><id>4745007</id><snippet>def SetVar(self):
    RegDevID = 999
</snippet></ROW><ROW><id>4745007</id><snippet>global</snippet></ROW><ROW><id>4745007</id><snippet>def SetVar(self):
    global RegDevID
    RegDevID = 999
</snippet></ROW><ROW><id>4746036</id><snippet>import sys

class Blackhole(object):

    def write(self, string):
        pass

stdout = sys.stdout
sys.stdout = Blackhole()

function_el_spammo()

sys.stdout = stdout
</snippet></ROW><ROW><id>4746215</id><snippet>sed -i 's/;/ /g' yourBigFile.txt
</snippet></ROW><ROW><id>4746215</id><snippet>f1 = open('yourBigFile.txt', 'r')
f2 = open('yourBigFile.txt.tmp', 'w')
for line in f1:
    f2.write(line.replace(';', ' '))
f1.close()
f2.close()
</snippet></ROW><ROW><id>4746609</id><snippet>:syntax on</snippet></ROW><ROW><id>4746609</id><snippet>syntax on</snippet></ROW><ROW><id>4746942</id><snippet>tralala = dict()

for group, name in [('A', 'Bob'), ('B', 'Jane'), ('A', 'Bob')]:
    tralala.setdefault(group, dict()).setdefault(name, 0) 
    tralala[group][name] += 1

print tralala
</snippet></ROW><ROW><id>4746942</id><snippet>{'A': {'Bob': 2}, 'B': {'Jane': 1}}
</snippet></ROW><ROW><id>4747229</id><snippet>dis.dis</snippet></ROW><ROW><id>4747229</id><snippet>LOAD_ATTR</snippet></ROW><ROW><id>4747229</id><snippet>getattr(TOS, co_names[namei])</snippet></ROW><ROW><id>4747229</id><snippet>&gt;&gt;&gt; from dis import dis
&gt;&gt;&gt; dis(lambda: t.m())
  1           0 LOAD_GLOBAL              0 (t)
              3 LOAD_ATTR                1 (m)
              6 CALL_FUNCTION            0
              9 RETURN_VALUE        
&gt;&gt;&gt; dis(lambda: getattr(t, 'm')())
  1           0 LOAD_GLOBAL              0 (getattr)
              3 LOAD_GLOBAL              1 (t)
              6 LOAD_CONST               0 ('m')
              9 CALL_FUNCTION            2
             12 CALL_FUNCTION            0
             15 RETURN_VALUE        
</snippet></ROW><ROW><id>4747427</id><snippet>&gt;&gt;&gt; class A(object):
...     def print_it(self):
...             print 'A'
... 
&gt;&gt;&gt; class B(A):
...     def print_it(self):
...             print 'B'
... 
&gt;&gt;&gt; x = B()
&gt;&gt;&gt; x.print_it()                # calls derived class method as expected
B
&gt;&gt;&gt; super(B, x).print_it()      # calls base class method
A
</snippet></ROW><ROW><id>4747590</id><snippet>In [32]: doc.xpath('//head/link[@rel="image_src"]/@href')[0]
Out[32]: 'http://img337.yfrog.com/img337/5023/1tru.jpg'
</snippet></ROW><ROW><id>4747590</id><snippet>xpath</snippet></ROW><ROW><id>4747590</id><snippet>In [25]: doc.xpath('//head/link')
Out[25]: [&lt;Element link at 9c94c5c&gt;, &lt;Element link at 9c94b6c&gt;]
</snippet></ROW><ROW><id>4747590</id><snippet>[@rel="image_src"]</snippet></ROW><ROW><id>4747590</id><snippet>[0]</snippet></ROW><ROW><id>4747590</id><snippet>xpath</snippet></ROW><ROW><id>4747590</id><snippet>In [29]: doc.xpath('//head/link[@rel="image_src"]')[0]
Out[29]: &lt;Element link at 9c94c5c&gt;
</snippet></ROW><ROW><id>4747590</id><snippet>import lxml.html as lh
import urllib2

url=r'http://www.yfrog.com/9d1truj'
doc=lh.parse(urllib2.urlopen(url))
link=doc.xpath('//head/link[@rel="image_src"]/@href')[0]
print(link)
# http://img337.yfrog.com/img337/5023/1tru.jpg
</snippet></ROW><ROW><id>4748180</id><snippet>myip = re.findall(r'(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:[.](?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}', commandslist)
</snippet></ROW><ROW><id>4748180</id><snippet>i = 0
while i &lt; 5:
    # do something with i
    i = i + 1
</snippet></ROW><ROW><id>4748180</id><snippet>for i in xrange(5):
    # do something with i
</snippet></ROW><ROW><id>4748180</id><snippet>for e in l:
    # do something with e
</snippet></ROW><ROW><id>4748180</id><snippet>import re

commandslist = 'Lorem 192.168.0.1, ipsum 127.0.0.1: 10.0.0.1 and 10.0.0.2.'
myips = re.findall(r'(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:[.](?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}', commandslist)
for ip in myips:
    print 'found ', ip
</snippet></ROW><ROW><id>4748216</id><snippet>inc()</snippet></ROW><ROW><id>4748216</id><snippet>def nextPal(num):
    lng = len(num)
    guess = num[:lng//2] + num[(lng-1)//2::-1]  # works whether lng is even or odd
    if guess &gt; num:  # don't bother converting to int
        return guess
    else:
        return inc(numstr, n)
</snippet></ROW><ROW><id>4748216</id><snippet>inc</snippet></ROW><ROW><id>4748216</id><snippet>array</snippet></ROW><ROW><id>4748216</id><snippet>import array

def nextPal(numstr):
    # If we don't need to increment, just reflect the left half and return.
    n = len(numstr)
    h = n//2
    guess = numstr[:n-h] + numstr[h-1::-1]
    if guess &gt; numstr:
        return guess

    # Increment the left half of the number without converting to int.
    a = array.array('b', numstr)
    zero = ord('0')
    ten = ord('9') + 1
    for i in range(n - h - 1, -1, -1):
        d = a[i] + 1
        if d == ten:
            a[i] = zero
        else:
            a[i] = d
            break
    else:
        # The left half was all nines. Carry the 1.
        # Update n and h since the length changed.
        a.insert(0, ord('1'))
        n += 1
        h = n//2

    # Reflect the left half onto the right half.
    a[n-h:] = a[h-1::-1]
    return a.tostring()
</snippet></ROW><ROW><id>4748216</id><snippet>while</snippet></ROW><ROW><id>4748216</id><snippet>for i in range(n - h - 1, -1, -1)</snippet></ROW><ROW><id>4748509</id><snippet>k = getattr(u, 'self.b')
</snippet></ROW><ROW><id>4748509</id><snippet>k = getattr(u, 'b')
</snippet></ROW><ROW><id>4748509</id><snippet>k = u.b
</snippet></ROW><ROW><id>4749073</id><snippet>subprocess.call</snippet></ROW><ROW><id>4749177</id><snippet>from rpy2.robjects.functions import SignatureTranslatedFunction
lattice = importr("lattice")
lattice.levelplot = SignatureTranslatedFunction(lattice.levelplot,
                                                init_prm_translate={'col_regions': 'col.regions'})
foo = lattice.levelplot(formula, data=df, col_regions=grayvector)
</snippet></ROW><ROW><id>4749185</id><snippet>&gt;&gt;&gt; from django.db import connection
&gt;&gt;&gt; cursor = connection.cursor()
&gt;&gt;&gt; cursor.execute("SHOW TABLE STATUS WHERE name='appname_modelname'")
&gt;&gt;&gt; print cursor.fetchone()

('appname_modelname',
 u'InnoDB',
 10L,
 u'Compact',
 29L,
 6779L,
 196608L,
 0L,
 49152L,
 10485760L,
 34L,
 datetime.datetime(2010, 11, 19, 13, 5),
 None,
 None,
 u'latin1_swedish_ci',
 None,
 u'',
 u'')
</snippet></ROW><ROW><id>4749227</id><snippet>openssl</snippet></ROW><ROW><id>4749227</id><snippet>usermod</snippet></ROW><ROW><id>4749227</id><snippet>#!/usr/bin/env python
import subprocess

login = 'username'
password = 'somepassword'

# OpenSSL doesn't support stronger hash functions, mkpasswd is preferred
#p = subprocess.Popen(('openssl', 'passwd', '-1', password), stdout=subprocess.PIPE)
p = subprocess.Popen(('mkpasswd', '-m', 'sha-512', password), stdout=subprocess.PIPE)
shadow_password = p.communicate()[0].strip()

if p.returncode != 0:
    print 'Error creating hash for ' + login

r = subprocess.call(('usermod', '-p', shadow_password, login))

if r != 0:
    print 'Error changing password for ' + login
</snippet></ROW><ROW><id>4749387</id><snippet>some_struct</snippet></ROW><ROW><id>4749387</id><snippet>__init__</snippet></ROW><ROW><id>4749387</id><snippet>def new_init(self):
    self._old_init()
    set_some_struct_defaults(self)

some_struct.__dict__["_old_init"] = some_struct.__init__
some_struct.__init__ = new_init
</snippet></ROW><ROW><id>4749387</id><snippet>__init__</snippet></ROW><ROW><id>4749883</id><snippet>&lt;%!
def check(foo):
    return not foo
%&gt;
%if check([]):
    works
%endif
</snippet></ROW><ROW><id>4749989</id><snippet>all_stems = {
 'chair' : set(['high', 'arm']),
 'charge': set(['over', 'under']),
 'fall'  : set(['down', 'water', 'night']),
 'up'    : set(['lock', 'crack', 'vote']),
 'down'  : set(['lock', 'crack', 'fall']),
}

endings     = all_stems.keys()
stem_sets   = all_stems.values()

i = 0
for target_stem_set in stem_sets:
    i += 1
    j  = 0

    remaining_stems = stem_sets[i:]
    for remaining_stem_set in remaining_stems:
        j += 1
        union = target_stem_set &amp; remaining_stem_set
        if len(union) &gt; 1:
            print "%d matches found" % len(union)
            for stem in union:
                print "%s%s" % (stem, endings[i-1])
                print "%s%s" % (stem, endings[j+i-1])
</snippet></ROW><ROW><id>4749989</id><snippet>$ python stems_and_endings.py 
2 matches found
lockdown
lockup
crackdown
crackup
</snippet></ROW><ROW><id>4750169</id><snippet>def update_after(m):
    """ calls self.update_everything() after method m """
    def decorated(self, *args, **kwargs):
        r = m(self, *args, **kwargs)
        self.update_everything()
        return r
    return decorated


def MyClass(object):
    def __init__(self):
        pass

    def update_everything(self):
        '''update everything'''
        pass

    @update_after
    def f1(self):
        #do stuff
        return result

    @update_after
    def f2(self):
        #do stuff
        return result

    @update_after
    def f3(self):
        #do stuff
        return result
</snippet></ROW><ROW><id>4750231</id><snippet>multiprocessing</snippet></ROW><ROW><id>4750231</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>4750231</id><snippet>lock=False</snippet></ROW><ROW><id>4750231</id><snippet>shared_data = multiprocessing.sharedctypes.RawArray("c", data)
</snippet></ROW><ROW><id>4750231</id><snippet>data</snippet></ROW><ROW><id>4750231</id><snippet>numpy.frombuffer(shared_data, dtype="c")
</snippet></ROW><ROW><id>4750231</id><snippet>shared_path = multiprocessing.sharedctypes.RawArray("c", path)
</snippet></ROW><ROW><id>4750231</id><snippet>shared_path.raw</snippet></ROW><ROW><id>4750231</id><snippet>(shared_data, shared_path)</snippet></ROW><ROW><id>4750231</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>4750243</id><snippet>folder = "C:/Documents and Settings/DuffA/Bureaublad/shortcuts projects/klic01/11G008689_1"

import glob, os
for filename in glob.glob(os.path.join(folder, "*+*")):
    print "I rename '+' to '_' in\n"+filename
    os.rename(filename, filename.replace('+','_'))


print '\n\n---- Now, there after, are the filenames in \n     '+folder


for root, dirs, filenames in os.walk(folder): # returms root, dirs, and files
    for filename in filenames:
        print '\nfilename==',filename
        filename_split = os.path.splitext(filename) # filename and extension name (extension in [1])
        filename_zero = filename_split[0]
        extension = str.upper(filename_split[1])
        print 'filename_zero==',filename_zero
        print 'os.path.join(filename_zero, "*.*")==',os.path.join(filename_zero, "*.*")
        print 'glob.glob(os.path.join(filename_zero, "*.*"))==',glob.glob(os.path.join(filename_zero, "*.*"))
        for filename_zero in glob.glob(os.path.join(filename_zero, "*.*")):
            print '  filename_zero in glob.glob(os.path.join(filename_zero, "*.*")) ==',filename_zero
            os.rename(filename_zero, filename_zero.replace('.','_'))
</snippet></ROW><ROW><id>4750243</id><snippet>I rename '+' to '_' in
C:/Documents and Settings/DuffA/Bureaublad/shortcuts projects/klic01/11G008689_1\+po.rt.hos.txt
I rename '+' to '_' in
C:/Documents and Settings/DuffA/Bureaublad/shortcuts projects/klic01/11G008689_1\ar.am+is.doc
I rename '+' to '_' in
C:/Documents and Settings/DuffA/Bureaublad/shortcuts projects/klic01/11G008689_1\ath+os.html
I rename '+' to '_' in
C:/Documents and Settings/DuffA/Bureaublad/shortcuts projects/klic01/11G008689_1\d'a.rtagn+an
I rename '+' to '_' in
C:/Documents and Settings/DuffA/Bureaublad/shortcuts projects/klic01/11G008689_1\dum+as.doc
I rename '+' to '_' in
C:/Documents and Settings/DuffA/Bureaublad/shortcuts projects/klic01/11G008689_1\ki.kiouili.do+c


---- Now, there after, are the filenames in 
     C:/Documents and Settings/DuffA/Bureaublad/shortcuts projects/klic01/11G008689_1

filename== ar.am_is.doc
filename_zero== ar.am_is
os.path.join(filename_zero, "*.*")== ar.am_is\*.*
glob.glob(os.path.join(filename_zero, "*.*"))== []

filename== arctic.txt
filename_zero== arctic
os.path.join(filename_zero, "*.*")== arctic\*.*
glob.glob(os.path.join(filename_zero, "*.*"))== []

filename== ath_os.html
filename_zero== ath_os
os.path.join(filename_zero, "*.*")== ath_os\*.*
glob.glob(os.path.join(filename_zero, "*.*"))== []

filename== atla.ntic.html
filename_zero== atla.ntic
os.path.join(filename_zero, "*.*")== atla.ntic\*.*
glob.glob(os.path.join(filename_zero, "*.*"))== []

filename== d'a.rtagn_an
filename_zero== d'a
os.path.join(filename_zero, "*.*")== d'a\*.*
glob.glob(os.path.join(filename_zero, "*.*"))== []

filename== dum_as.doc
filename_zero== dum_as
os.path.join(filename_zero, "*.*")== dum_as\*.*
glob.glob(os.path.join(filename_zero, "*.*"))== []

filename== ki.kiouili.do_c
filename_zero== ki.kiouili
os.path.join(filename_zero, "*.*")== ki.kiouili\*.*
glob.glob(os.path.join(filename_zero, "*.*"))== []

filename== _po.rt.hos.txt
filename_zero== _po.rt.hos
os.path.join(filename_zero, "*.*")== _po.rt.hos\*.*
glob.glob(os.path.join(filename_zero, "*.*"))== []
</snippet></ROW><ROW><id>4750243</id><snippet>for root, dirs, filenames in os.walk(folder):
    for filename in filenames:
</snippet></ROW><ROW><id>4750243</id><snippet>for filename in os.listdir(folder):
    if os.path.isfile(filename):
</snippet></ROW><ROW><id>4750243</id><snippet>for filename in ( f in os.listdir(folder) if os.path.isfile(f) ):
</snippet></ROW><ROW><id>4750243</id><snippet>folder = "C:/Documents and Settings/DuffA/Bureaublad/shortcuts projects/klic01/11G008689_1"

import os
separ = os.sep

for n in os.listdir(folder):
    print n
    if os.path.isfile(folder + separ + n):
        filename_zero, extension = os.path.splitext(n)
        os.rename(folder + separ + n , folder + separ + filename_zero.replace('.','_').replace('+','_') + extension)

print '\n--------------------------------\n'
for n in os.listdir(folder):
    print n
</snippet></ROW><ROW><id>4750243</id><snippet>+po.rt.hos.txt
ar.am+is.doc
arctic.txt
ath+os.html
atla.ntic.html
d'a.rtagn+an
dum+as.doc
ki.kiouili.do+c

--------------------------------

arctic.txt
ar_am_is.doc
ath_os.html
atla_ntic.html
d'a.rtagn+an
dum_as.doc
ki_kiouili.do+c
_po_rt_hos.txt
</snippet></ROW><ROW><id>4750550</id><snippet>entropy:~&gt;python
Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import time
&gt;&gt;&gt; u = u'Wed Jan 19 18:08:23 2011'
&gt;&gt;&gt; t = time.strptime(u)
&gt;&gt;&gt; t
time.struct_time(tm_year=2011, tm_mon=1, tm_mday=19, tm_hour=18, tm_min=8, tm_sec=23, tm_wday=2, tm_yday=19, tm_isdst=-1)
&gt;&gt;&gt; time.mktime(t)
1295489303.0
</snippet></ROW><ROW><id>4750969</id><snippet>from PyQt4 import QtGui

class MyQGroupBoxes(QtGui.QGroupBox):
    def __init__(self, parent):
        QtGui.QGroupBox.__init__(self, parent)

        self.button_export = QtGui.QPushButton("Export", self)
        self.button_import = QtGui.QPushButton("Import", self)

        layout = QtGui.QVBoxLayout(self)
        self.setLayout(layout)

        layout.addWidget(self.button_export)
        layout.addWidget(self.button_import)

    def config_export(self):
        # config your button
        pass

    def config_import(self):
        # config your button
        pass

if __name__ == "__main__":

    app = QtGui.QApplication(sys.argv)

    my_box1 = MyQGroupBoxes(None)
    my_box2 = MyQGroupBoxes(None)

    my_boxes = [my_box1, my_box2]

    # Config all the boxes
    for my_box in my_boxes:
        my_box.config_export()
        my_box.config_import()

        my_box.show()

    app.exec_()
</snippet></ROW><ROW><id>4751020</id><snippet>&gt;&gt;&gt; syn = IP(dst='www.google.com') / TCP(dport=80, flags='S')
&gt;&gt;&gt; syn
&lt;IP  frag=0 proto=tcp dst=Net('www.google.com') |&lt;TCP  dport=www flags=S |&gt;&gt;
</snippet></ROW><ROW><id>4751020</id><snippet>&gt;&gt;&gt; syn_ack = sr1(syn)
Begin emission:
Finished to send 1 packets.
*
Received 1 packets, got 1 answers, remaining 0 packets

&gt;&gt;&gt; syn_ack
&lt;IP  version=4L ihl=5L tos=0x0 len=44 id=424 flags= frag=0L ttl=55 proto=tcp chksum=0x2caa src=74.125.226.148 dst=10.20.30.40 options=[] |&lt;TCP  sport=www dport=ftp_data seq=3833491143 ack=1 dataofs=6L reserved=0L flags=SA window=5720 chksum=0xd8b6 urgptr=0 options=[('MSS', 1430)] |&lt;Padding  load='\x00\x00' |&gt;&gt;&gt;
</snippet></ROW><ROW><id>4751020</id><snippet>getStr = 'GET / HTTP/1.1\r\nHost: www.google.com\r\n\r\n'
request = IP(dst='www.google.com') / TCP(dport=80, sport=syn_ack[TCP].dport,
             seq=syn_ack[TCP].ack, ack=syn_ack[TCP].seq + 1, flags='A') / getStr
reply = sr1(request)
</snippet></ROW><ROW><id>4751062</id><snippet>TarFile.add</snippet></ROW><ROW><id>4751062</id><snippet>arcname</snippet></ROW><ROW><id>4751107</id><snippet>enumerate</snippet></ROW><ROW><id>4751107</id><snippet>#!/usr/bin/env python

d = {1:2, 3:4, 5:6, 7:8, 9:0}

# If you want an ordered dictionary (and have python 2.7/3.2), 
# uncomment the next lines:

# from collections import OrderedDict
# d = OrderedDict(sorted(d.items(), key=lambda t: t[0]))

last = len(d) - 1

for i, x in enumerate(d):
    if i == last:
        print i, x, 'last'
    else:
        print i, x

# Output:
# 0 1
# 1 3
# 2 9
# 3 5
# 4 7 last
</snippet></ROW><ROW><id>4751471</id><snippet>form</snippet></ROW><ROW><id>4751471</id><snippet>extra_context</snippet></ROW><ROW><id>4751471</id><snippet>context</snippet></ROW><ROW><id>4751471</id><snippet>context['form']</snippet></ROW><ROW><id>4751471</id><snippet>else:
    form = EmailChangeForm(username=request.user.username)

extra_context['form'] = form
context = RequestContext(request, extra_context)
</snippet></ROW><ROW><id>4751532</id><snippet>/</snippet></ROW><ROW><id>4751532</id><snippet>#!/usr/bin/env python

import web

urls = (
  '/', 'index'
)

class index:
    def GET(self):
        # redirect to the static file ...
        raise web.seeother('/static/index.html')

app = web.application(urls, globals())

if __name__ == "__main__": app.run()
</snippet></ROW><ROW><id>4751739</id><snippet>productTable</snippet></ROW><ROW><id>4751739</id><snippet>None</snippet></ROW><ROW><id>4751739</id><snippet>'NoneType' object has no attribute 'findAll'</snippet></ROW><ROW><id>4751739</id><snippet>productTable.findall</snippet></ROW><ROW><id>4752327</id><snippet>set</snippet></ROW><ROW><id>4752327</id><snippet>all(items[0] == item for item in items)</snippet></ROW><ROW><id>4752565</id><snippet>mimetypes</snippet></ROW><ROW><id>4752615</id><snippet>&gt;&gt;&gt; import webbrowser
&gt;&gt;&gt; webbrowser.open("http://stackoverflow.com")
</snippet></ROW><ROW><id>4752615</id><snippet>webbrowser</snippet></ROW><ROW><id>4752615</id><snippet>&gt;&gt;&gt; from appscript import *
&gt;&gt;&gt; safari = app("Safari")
&gt;&gt;&gt; safari.make(new=k.document,with_properties={k.URL:"http://stackoverflow.com"})
&gt;&gt;&gt; safari.windows.first.current_tab.close()
</snippet></ROW><ROW><id>4752615</id><snippet>&gt;&gt;&gt; safari.windows.first.current_tab.URL.set("http://www.google.com")
&gt;&gt;&gt; safari.windows.first.current_tab.URL.set("http://www.python.com")
</snippet></ROW><ROW><id>4752831</id><snippet>str.decode</snippet></ROW><ROW><id>4752831</id><snippet>&gt;&gt;&gt; print '\xe2\x99\x9e'.decode('utf-8')
♞
</snippet></ROW><ROW><id>4752886</id><snippet>LOG_FILES = [LogFile(f) for f in glob.glob(srcdir + "/*.txt")
                        if from_date &lt;= f.DATE &lt;= to_date]
</snippet></ROW><ROW><id>4752922</id><snippet>A</snippet></ROW><ROW><id>4752922</id><snippet>B</snippet></ROW><ROW><id>4752922</id><snippet>AB</snippet></ROW><ROW><id>4752922</id><snippet>B</snippet></ROW><ROW><id>4752922</id><snippet>A</snippet></ROW><ROW><id>4752922</id><snippet>1/A</snippet></ROW><ROW><id>4752922</id><snippet>A</snippet></ROW><ROW><id>4752922</id><snippet>B</snippet></ROW><ROW><id>4752922</id><snippet>AB</snippet></ROW><ROW><id>4753059</id><snippet>os.chroot('/srv/nfs/chrooted-nfs-client/')
setup(name='ClientLibrary',
    version='1.1',
    description='Client Framework',
    author='Michael Brown',
    packages = [ 'ClientLibrary' ],
    options = {
        'build': { 'build_base': 'build-chroot' }
    }
)
</snippet></ROW><ROW><id>4753389</id><snippet>os.makedirs(path[, mode])
</snippet></ROW><ROW><id>4753588</id><snippet># (make a LEVELS dict out of all the logging levels first)    
def indent(self, step = 1):
        "Change the current indent level by the step (use negative to decrease)"
        self._indent_level += step
        if self._indent_level &lt; 0:
            self._indent_level = 0
        self._indent_str = self._indent_str_base * self._indent_level
        for lvl in LEVELS:
            level_name = self._indent_str + LEVELS[lvl]
            logging.addLevelName(lvl, level_name)
</snippet></ROW><ROW><id>4753807</id><snippet>SELECT      headline,
            the_date,
            DAY(the_date) AS the_day
FROM (
    SELECT      headline,
                pub_date AS the_date
    FROM        stories
    UNION
    SELECT      headline,
                update_date AS the_date
    FROM        stories
    WHERE       update_date IS NOT NULL
) AS publishedandupdated
ORDER BY    the_date DESC;
</snippet></ROW><ROW><id>4753831</id><snippet>import csv
writer = csv.writer(open("out.csv", "wb"), quoting=csv.QUOTE_NONE)
reader = csv.reader(open("in.csv", "rb"), skipinitialspace=True)
writer.writerows(reader)
</snippet></ROW><ROW><id>4753831</id><snippet>csv</snippet></ROW><ROW><id>4754029</id><snippet>map</snippet></ROW><ROW><id>4754029</id><snippet>()</snippet></ROW><ROW><id>4754029</id><snippet>my @ids = map { $_-&gt;id &gt; 100 ? $_-&gt;id : () } @objs;
</snippet></ROW><ROW><id>4754029</id><snippet>@objs</snippet></ROW><ROW><id>4754029</id><snippet>id</snippet></ROW><ROW><id>4754029</id><snippet>my @ids = map { $_-&gt;{id} &gt; 100 ? $_-&gt;{id} : () } @objs;
</snippet></ROW><ROW><id>4754029</id><snippet>map</snippet></ROW><ROW><id>4754029</id><snippet>grep</snippet></ROW><ROW><id>4754029</id><snippet>my @ids = map { $_-&gt;id } grep { $_-&gt;id &gt; 100 } @objs;

# Or reverse the order to avoid calling $_-&gt;id twice:
my @ids = grep { $_ &gt; 100 } map { $_-&gt;id } @objs;
</snippet></ROW><ROW><id>4754029</id><snippet>@objs</snippet></ROW><ROW><id>4754029</id><snippet>my @vals = map { my $v = $_-&gt;expensive_method;  $v &gt; 100 ? $v : () } @objs;
</snippet></ROW><ROW><id>4754060</id><snippet>config = [line.split(',') for line in open("config")]
</snippet></ROW><ROW><id>4754060</id><snippet>config = [Player(line.split(',')) for line in open("config")]
</snippet></ROW><ROW><id>4754141</id><snippet>import wx
from matplotlib.patches import Rectangle
from matplotlib.widgets import Lasso
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg
from matplotlib.backends.backend_wxagg import NavigationToolbar2WxAgg

class MyNavToolbar(NavigationToolbar2WxAgg):
    """wx/mpl NavToolbar hack with an additional tools user interaction.
    This class is necessary because simply adding a new togglable tool to the
    toolbar won't (1) radio-toggle between the new tool and the pan/zoom tools.
    (2) disable the pan/zoom tool modes in the associated subplot(s).
    """
    ID_LASSO_TOOL = wx.NewId()
    def __init__(self, canvas):
        super(NavigationToolbar2WxAgg, self).__init__(canvas)

        self.pan_tool  = self.FindById(self._NTB2_PAN)
        self.zoom_tool = self.FindById(self._NTB2_ZOOM)

        self.lasso_tool = self.InsertSimpleTool(5, self.ID_LASSO_TOOL, 
                            wx.ArtProvider.GetBitmap(wx.ART_ADD_BOOKMARK),
                            isToggle=True)
        self.Bind(wx.EVT_TOOL, self.on_toggle_lasso_tool, self.lasso_tool)
        self.Bind(wx.EVT_TOOL, self.on_toggle_pan_zoom, self.zoom_tool)
        self.Bind(wx.EVT_TOOL, self.on_toggle_pan_zoom, self.pan_tool)

    def get_mode(self):
        """Use this rather than navtoolbar.mode
        """
        if self.lasso_tool.IsToggled():
            return 'lasso'
        else:
            return self.mode

    def untoggle_mpl_tools(self):
        """Hack city: Since I can't figure out how to change the way the 
        associated subplot(s) handles mouse events: I generate events to turn
        off whichever tool mode is enabled (if any). 
        This function needs to be called whenever any user-defined tool 
        (eg: lasso) is clicked.
        """
        if self.pan_tool.IsToggled():
            wx.PostEvent(
                self.GetEventHandler(), 
                wx.CommandEvent(wx.EVT_TOOL.typeId, self._NTB2_PAN)
            )
            self.ToggleTool(self._NTB2_PAN, False)
        elif self.zoom_tool.IsToggled():
            wx.PostEvent(
                self.GetEventHandler(),
                wx.CommandEvent(wx.EVT_TOOL.typeId, self._NTB2_ZOOM)
            )
            self.ToggleTool(self._NTB2_ZOOM, False)

    def on_toggle_lasso_tool(self, evt):
        """Lasso tool handler.
        """
        if evt.Checked():
            self.untoggle_mpl_tools()

    def on_toggle_pan_zoom(self, evt):
        """Called when pan or zoom is toggled. 
        We need to manually untoggle user-defined tools.
        """
        if evt.Checked():
            self.ToggleTool(self.ID_LASSO_TOOL, False)
        # Make sure the regular pan/zoom handlers get the event
        evt.Skip()

class ScatterPanel(FigureCanvasWxAgg):
    """Contains the guts for drawing scatter plots.
    """
    def __init__(self, parent, **kwargs):
        self.figure = Figure()
        FigureCanvasWxAgg.__init__(self, parent, -1, self.figure, **kwargs)
        self.canvas = self.figure.canvas
        self.SetMinSize((100,100))
        self.figure.set_facecolor((1,1,1))
        self.figure.set_edgecolor((1,1,1))
        self.canvas.SetBackgroundColour('white')

        self.subplot = self.figure.add_subplot(111)
        self.navtoolbar = None
        self.lasso = None
        self.redraw()

        self.canvas.mpl_connect('button_press_event', self.on_press)
        self.canvas.mpl_connect('button_release_event', self.on_release)

    def lasso_callback(self, verts):
        pass

    def on_press(self, evt):
        """canvas mousedown handler
        """
        if evt.button == 1:
            if self.canvas.widgetlock.locked(): 
                return
            if evt.inaxes is None: 
                return
            if self.navtoolbar and self.navtoolbar.get_mode() == 'lasso':
                self.lasso = Lasso(evt.inaxes, (evt.xdata, evt.ydata), self.lasso_callback)
                self.canvas.widgetlock(self.lasso)

    def on_release(self, evt):
        """canvas mouseup handler
        """
        # Note: lasso_callback is not called on click without drag so we release
        #   the lock here to handle this case as well.
        if evt.button == 1:
            if self.lasso:
                self.canvas.draw_idle()
                self.canvas.widgetlock.release(self.lasso)
                self.lasso = None
        else:
            self.show_popup_menu((evt.x, self.canvas.GetSize()[1]-evt.y), None)

    def redraw(self):
        self.subplot.clear()
        self.subplot.scatter([1,2,3],[3,1,2])

    def get_toolbar(self):
        if not self.navtoolbar:
            self.navtoolbar = MyNavToolbar(self.canvas)
            self.navtoolbar.Realize()
        return self.navtoolbar

if __name__ == "__main__":
    app = wx.PySimpleApp()
    f = wx.Frame(None, size=(600,600))
    p = ScatterPanel(f)
    f.SetToolBar(p.get_toolbar())            
    f.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>4754227</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>4754227</id><snippet>data</snippet></ROW><ROW><id>4754227</id><snippet>numpy.ndarray.data</snippet></ROW><ROW><id>4754227</id><snippet>class Table(object):
    def __init__(self, xsize=1, ysize=1, zsize=1):
        self.data = numpy.zeros((xsize, ysize, zsize))

    def __getitem__(self, key):
        return self.data[key]

    def __setitem__(self, key, value):
        self.data[key] = value

    def resize(self, xsize=1, ysize=1, zsize=1):
        # This only works for increasing the size of the data,
        # but is easy do adapt to other cases
        newdata = numpy.zeros((xsize, ysize, zsize))
        shape = self.data.shape
        newdata[:shape[0], :shape[1], :shape[2]] = self.data
        self.data = newdata
</snippet></ROW><ROW><id>4754227</id><snippet>eq = self.data == self.data.map
layerflags = eq.reshape(-1, 3).any(axis=0)
if layerflags.any():
    self.data[:] = self.map.data
</snippet></ROW><ROW><id>4754401</id><snippet>if l&lt;p:
    ...
if t&gt;0:
    ...
if int(num)&gt;=int(lst):
    ...
</snippet></ROW><ROW><id>4754401</id><snippet>&lt;</snippet></ROW><ROW><id>4754401</id><snippet>&gt;</snippet></ROW><ROW><id>4754401</id><snippet>&lt;</snippet></ROW><ROW><id>4754401</id><snippet>&gt;</snippet></ROW><ROW><id>4754427</id><snippet>import sys
x = [True]*(sys.maxint+1)
</snippet></ROW><ROW><id>4754427</id><snippet>OverflowError</snippet></ROW><ROW><id>4754427</id><snippet>x = [True]*(sys.maxint)
</snippet></ROW><ROW><id>4754427</id><snippet>MemoryError</snippet></ROW><ROW><id>4754439</id><snippet>k = k.copy(k.bucket.name, k.name, {'myKey':'myValue'}, preserve_acl=True)
</snippet></ROW><ROW><id>4754439</id><snippet>k.metadata.update({'myKey':'myValue'})
k2 = k.copy(k.bucket.name, k.name, k.metadata, preserve_acl=True)
k2.metadata = k.metadata    # boto gives back an object without *any* metadata
k = k2;
</snippet></ROW><ROW><id>4754466</id><snippet>watcher()</snippet></ROW><ROW><id>4754466</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>4754466</id><snippet>threading_cleanup.watcher()</snippet></ROW><ROW><id>4754466</id><snippet>fork()</snippet></ROW><ROW><id>4754466</id><snippet>python mymodule.py</snippet></ROW><ROW><id>4754842</id><snippet>None</snippet></ROW><ROW><id>4754842</id><snippet>class MyClass(object):
    """ Documentation for MyClass goes here. """

    def __init__(self):
        """
        doc string
        """

i = MyClass()  
print i.__doc__ # same as MyClass.__doc__
</snippet></ROW><ROW><id>4754968</id><snippet>import sys
sys.path.insert(0, './toplevel')
</snippet></ROW><ROW><id>4754978</id><snippet>count = sum(1 for i in items if i &gt; 3)
correct = sum(1 for i in items if i &gt; 5)

score = float(correct) / count
print '%.2f' % score
</snippet></ROW><ROW><id>4755156</id><snippet>nosetests</snippet></ROW><ROW><id>4755156</id><snippet>.coverage</snippet></ROW><ROW><id>4755156</id><snippet>coverage xml</snippet></ROW><ROW><id>4755156</id><snippet>.coverage</snippet></ROW><ROW><id>4755261</id><snippet>class TestStyle : public QProxyStyle
{
public:
    TestStyle(QStyle *baseStyle = 0) : QProxyStyle(baseStyle) {}

    void drawPrimitive(PrimitiveElement element, const QStyleOption *option, QPainter *painter, const QWidget *widget) const
    {
        if (element == QStyle::PE_IndicatorItemViewItemDrop)
        {
            //?? do nothing or do custom painting here
        }
        else
        {
            QProxyStyle::drawPrimitive(element, option, painter, widget);
        }
    }
};

.. 

ui-&gt;treeView-&gt;setStyle(new TestStyle(ui-&gt;treeView-&gt;style()));
</snippet></ROW><ROW><id>4755261</id><snippet>class TestTreeView : public QTreeView
{
public:
    explicit TestTreeView(QWidget *parent = 0) : QTreeView(parent) {}

    void paintEvent(QPaintEvent * event)
    {
        QPainter painter(viewport());
        drawTree(&amp;painter, event-&gt;region());
    }
};
</snippet></ROW><ROW><id>4755450</id><snippet>filter()</snippet></ROW><ROW><id>4755450</id><snippet>(dynamic property in your question)</snippet></ROW><ROW><id>4755470</id><snippet>items.get_top_tags()</snippet></ROW><ROW><id>4755470</id><snippet># 'n' is the number of tags you'll be returning, I suppose
', '.join(items.get_top_tags(i)[0].get_name() for i in range(n))
</snippet></ROW><ROW><id>4755478</id><snippet>itertools.product(*groups)</snippet></ROW><ROW><id>4755592</id><snippet>r'^[^a-zA-Z]+'
</snippet></ROW><ROW><id>4755830</id><snippet>respawn

respawn limit 5 300

exec python /path/to/a.py
</snippet></ROW><ROW><id>4755830</id><snippet>/etc/init/</snippet></ROW><ROW><id>4755855</id><snippet>"audio/x-raw-int, endianness=(int)1234, channels=(int)1, width=(int)16, depth=(int)16, signed=(boolean)true, rate=(int)11025"</snippet></ROW><ROW><id>4756252</id><snippet>def sum(a,b):
    if a&gt;0 and b&gt;0:
        return str(a*b) + "\n" + str(sum(a,b-1))
    else:
        return ""
</snippet></ROW><ROW><id>4756496</id><snippet>cgi</snippet></ROW><ROW><id>4756496</id><snippet>cgi.FieldStorage()</snippet></ROW><ROW><id>4756998</id><snippet>1.2256 days
</snippet></ROW><ROW><id>4756998</id><snippet>1 day, 5 hours, 24 minutes, 51 seconds
</snippet></ROW><ROW><id>4756998</id><snippet>def nice_repr(timedelta, display="long"):
    """
    Turns a datetime.timedelta object into a nice string repr.

    display can be "minimal", "short" or "long" [default].

    &gt;&gt;&gt; from datetime import timedelta as td
    &gt;&gt;&gt; nice_repr(td(days=1, hours=2, minutes=3, seconds=4))
    '1 day, 2 hours, 3 minutes, 4 seconds'
    &gt;&gt;&gt; nice_repr(td(days=1, seconds=1), "minimal")
    '1d, 1s'
    """

    assert isinstance(timedelta, datetime.timedelta), "First argument must be a timedelta."

    result = ""

    weeks = timedelta.days / 7
    days = timedelta.days % 7
    hours = timedelta.seconds / 3600
    minutes = (timedelta.seconds % 3600) / 60
    seconds = timedelta.seconds % 60

    if display == 'minimal':
        words = ["w", "d", "h", "m", "s"]
    elif display == 'short':
        words = [" wks", " days", " hrs", " min", " sec"]
    else:
        words = [" weeks", " days", " hours", " minutes", " seconds"]

    values = [weeks, days, hours, minutes, seconds]

    for i in range(len(values)):
        if values[i]:
            if values[i] == 1 and len(words[i]) &gt; 1:
                result += "%i%s, " % (values[i], words[i].rstrip('s'))
            else:
                result += "%i%s, " % (values[i], words[i])

    return result[:-2]
</snippet></ROW><ROW><id>4758264</id><snippet>databasefunctions</snippet></ROW><ROW><id>4758264</id><snippet># databasefunctions
DEFAULT_NAME = ""
def checkStatusOfDatabase(database=DEFAULT_NAME):

# main
import databasefunctions
databasefunctions.DEFAULT_NAME = "mydatabase"
</snippet></ROW><ROW><id>4758351</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4758351</id><snippet>bin/activate</snippet></ROW><ROW><id>4758351</id><snippet>export PYTHONPATH="/the/path/you/want"
</snippet></ROW><ROW><id>4758351</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4758351</id><snippet>deactivate</snippet></ROW><ROW><id>4758351</id><snippet>export OLD_PYTHONPATH="$PYTHONPATH"
</snippet></ROW><ROW><id>4758351</id><snippet>bin/postdeactivate</snippet></ROW><ROW><id>4758351</id><snippet>export PYTHONPATH="$OLD_PYTHONPATH"
</snippet></ROW><ROW><id>4758597</id><snippet>ORACLE_HOME</snippet></ROW><ROW><id>4758597</id><snippet>.jar</snippet></ROW><ROW><id>4758597</id><snippet>db = DriverManager.getConnection('jdbc:oracle:thin:169.0.1.225:1521:test_db', 'user', 'passwd')
</snippet></ROW><ROW><id>4758597</id><snippet>ojdbc6.jar</snippet></ROW><ROW><id>4758597</id><snippet>orai18n.jar</snippet></ROW><ROW><id>4758597</id><snippet>CLASSPATH</snippet></ROW><ROW><id>4758940</id><snippet>import os
print os.path.abspath(os.curdir)
</snippet></ROW><ROW><id>4759140</id><snippet>ndarray</snippet></ROW><ROW><id>4759140</id><snippet>import functools
import numpy as np


class Array(object):

    def __init__(self, size):
        self._array = np.zeros(size)

    def __getattr__(self, attr):
        try: return getattr(self._array, attr)
        except AttributeError:
            # extend interface to all functions from numpy
            f = getattr(np, attr, None)
            if hasattr(f, '__call__'):
                return functools.partial(f, self._array)
            else:
                raise AttributeError(attr)

    def allzero(self):
        return np.allclose(self._array, 0)


a = Array(10)
# ndarray doesn't have 'sometrue()' that is the same as 'any()' that it has.
assert a.sometrue() == a.any() == False
assert a.allzero()

try: a.non_existent
except AttributeError:
    pass
else:
    assert 0
</snippet></ROW><ROW><id>4759177</id><snippet>import os, errno

def mkdir(path, overwrite=False):
    try:
        os.makedirs(path)
    except OSError as exc: # Python &gt;2.5
        if exc.errno == errno.EEXIST:
            if not overwrite:
                print "path '%s' already exists" % path   # overwrite == False and we've hit a directory that exists
                return
        else: raise
    # data making code...
</snippet></ROW><ROW><id>4759779</id><snippet>from datetime import date
import random

start_date = date.today().replace(day=1, month=1).toordinal()
end_date = date.today().toordinal()
random_day = date.fromordinal(random.randint(start_date, end_date))
</snippet></ROW><ROW><id>4760210</id><snippet>UserData.test_user.company.ref('id')
or
UserData.test_user.ref('company_id')
</snippet></ROW><ROW><id>4760387</id><snippet>ManyToOne</snippet></ROW><ROW><id>4760387</id><snippet>relation</snippet></ROW><ROW><id>4760387</id><snippet>relationship</snippet></ROW><ROW><id>4760387</id><snippet>lazy</snippet></ROW><ROW><id>4760387</id><snippet>query</snippet></ROW><ROW><id>4760387</id><snippet>sqlalchemy.ext.declarative</snippet></ROW><ROW><id>4760517</id><snippet>subprocess.check_output(*popenargs, **kwargs)  
</snippet></ROW><ROW><id>4760517</id><snippet>stderr=subprocess.STDOUT</snippet></ROW><ROW><id>4760517</id><snippet>communicate</snippet></ROW><ROW><id>4760517</id><snippet>output = Popen(["mycmd", "myarg"], stdout=PIPE).communicate()[0]
</snippet></ROW><ROW><id>4760517</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; p = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE, 
                                       stderr=subprocess.PIPE)
&gt;&gt;&gt; out, err = p.communicate()
&gt;&gt;&gt; print out
.
..
foo
</snippet></ROW><ROW><id>4761058</id><snippet>import sys
sys.path.append('../src')
</snippet></ROW><ROW><id>4761153</id><snippet>random.py</snippet></ROW><ROW><id>4761153</id><snippet>uniform</snippet></ROW><ROW><id>4761153</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4761153</id><snippet>.py</snippet></ROW><ROW><id>4761414</id><snippet>-</snippet></ROW><ROW><id>4761414</id><snippet>^</snippet></ROW><ROW><id>4761414</id><snippet>^</snippet></ROW><ROW><id>4761414</id><snippet>-</snippet></ROW><ROW><id>4761414</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; match_literal_hyphen = "[ab-]"
&gt;&gt;&gt; re.findall(match_literal_hyphen, "abc - def")
['a', 'b', '-']
&gt;&gt;&gt; match_literal_caret = "[a^b]"
&gt;&gt;&gt; re.findall(match_literal_caret, "abc ^ def")
['a', 'b', '^']
</snippet></ROW><ROW><id>4762002</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111)

ax.plot(range(10))
ax.set_xlabel('X-axis')
ax.set_ylabel('Y-axis')

ax.spines['bottom'].set_color('red')
ax.spines['top'].set_color('red')
ax.xaxis.label.set_color('red')
ax.tick_params(axis='x', colors='red')

plt.show()
</snippet></ROW><ROW><id>4762355</id><snippet>next()</snippet></ROW><ROW><id>4762355</id><snippet>StopIteration</snippet></ROW><ROW><id>4762355</id><snippet>with open('myfile.txt') as f:
    try:
        header = next(f)
    except StopIteration as e:
        print "File is empty"
    for line in f:
        # do stuff with line
</snippet></ROW><ROW><id>4762465</id><snippet>#!/usr/bin/env python

import base64
import zlib
import cgi
import urlparse

def getValue(raw):
    args = urlparse.parse_qs(urlparse.urlparse(raw).query)
    keys = ['SAMLResponse', 'SAMLRequest', 'LogoutRequest', 'LogoutResponse']
    for key in keys:
        if key in args: return args[key][0]

def decode(raw):
    message = getValue(raw)
    message = message + "=" * (4 - len(message) % 4)
    base64decoded = base64.b64decode(message)
    try:
        base64decoded = zlib.decompressobj().decompress('x\x9c' + base64decoded)
    except zlib.error:
        pass # may want to handle this error
    return cgi.escape(base64decoded, True)

data = 'PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIElEPSJwZnhkYTAxMjkzOC03MDkxLWNjZjQtZTc2Ny0wZWQ4OGVhN2Q1YmYiIFZlcnNpb249IjIuMCIgSXNzdWVJbnN0YW50PSIyMDExLTAxLTIxVDEyOjI4OjI5WiIgRGVzdGluYXRpb249Imh0dHBzOi8vd2F5Zi5teWRvbWFpbi5kay9zaW1wbGVzYW1sL3NhbWwyLW15bG9naW4ucGhwIiBJblJlc3BvbnNlVG89Il82ZDhmNDAxZDUzYTg1NDkzMzY2N2FiNWU5NzE1NWNmMzJjYWExMjBkZDciPjxzYW1sOklzc3Vlcj5odHRwczovL3Rlc3RicmlkZ2Uud2F5Zi5kazwvc2FtbDpJc3N1ZXI'

url = "http://www.google.com?SAMLResponse=" + data
print decode(url)
</snippet></ROW><ROW><id>4762556</id><snippet>os</snippet></ROW><ROW><id>4762556</id><snippet>$VOL="/BLAH"</snippet></ROW><ROW><id>4762556</id><snippet>import os
my_path = os.environ['VOL']
</snippet></ROW><ROW><id>4762909</id><snippet>sort_by</snippet></ROW><ROW><id>4762909</id><snippet>operator.attrgetter()</snippet></ROW><ROW><id>4762909</id><snippet>members_list.sort( key = lambda mbr: operator.attrgetter( sort_by )( mbr ).lower(),
                   reverse = False )
</snippet></ROW><ROW><id>4762909</id><snippet>get_key = operator.attrgetter( sort_by )
members_list.sort( key = lambda mbr: get_key( mbr ).lower(), reverse = False )
</snippet></ROW><ROW><id>4762949</id><snippet>isinstance(x, Event)</snippet></ROW><ROW><id>4762949</id><snippet>make_event</snippet></ROW><ROW><id>4763796</id><snippet>@classmethod
def showDefaultValue(cls):
    print "defl == %s" % (cls.default,)
</snippet></ROW><ROW><id>4763796</id><snippet>defl</snippet></ROW><ROW><id>4763796</id><snippet>showDefaultValue</snippet></ROW><ROW><id>4763796</id><snippet>defl</snippet></ROW><ROW><id>4763796</id><snippet>default</snippet></ROW><ROW><id>4763796</id><snippet>Base</snippet></ROW><ROW><id>4763796</id><snippet>showDefaultValue</snippet></ROW><ROW><id>4763796</id><snippet>Base</snippet></ROW><ROW><id>4763796</id><snippet>Descend</snippet></ROW><ROW><id>4763796</id><snippet>showDefaultValue</snippet></ROW><ROW><id>4763806</id><snippet>import user, db
</snippet></ROW><ROW><id>4763806</id><snippet>database = db.Database()
</snippet></ROW><ROW><id>4763806</id><snippet>grid.addWidget(self.createList(), 1, 0, 1, 4)</snippet></ROW><ROW><id>4763806</id><snippet>self.establishedConnection</snippet></ROW><ROW><id>4763806</id><snippet>self.establishedConnection.disconnect()</snippet></ROW><ROW><id>4763806</id><snippet>python main.py</snippet></ROW><ROW><id>4763857</id><snippet>rpcserver = zerorpc.Server("ipc://myrpc.ipc")

@rpcserver.expose
def product(a, b):
    return a * b

rpcserver.run()
</snippet></ROW><ROW><id>4763857</id><snippet>rpcclient = zerorpc.Client("ipc://myrpc.ipc")

print(rpcclient.product(5, 7))
rpcclient._stopserver()
</snippet></ROW><ROW><id>4764004</id><snippet>nonlocal</snippet></ROW><ROW><id>4764004</id><snippet>self</snippet></ROW><ROW><id>4764225</id><snippet>import *</snippet></ROW><ROW><id>4764225</id><snippet>database = "original"

def printdatabase():
   print "Database is", database
</snippet></ROW><ROW><id>4764225</id><snippet>import toolsmodule
toolsmodule.database = "newdatabase"
toolsmodule.printdatabase()
</snippet></ROW><ROW><id>4764225</id><snippet>Database is newdatabase
</snippet></ROW><ROW><id>4764225</id><snippet>import *</snippet></ROW><ROW><id>4764225</id><snippet>from x import *</snippet></ROW><ROW><id>4764311</id><snippet>dict(new_data)
</snippet></ROW><ROW><id>4764592</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; dict(re.findall(r'(\S+)=(".*?"|\S+)', s))
{'key3': '"SrtingWithoutSpace"', 'key2': '"string with space"', 'key1': '1234'}
</snippet></ROW><ROW><id>4764592</id><snippet>&gt;&gt;&gt; {k:v.strip('"') for k,v in re.findall(r'(\S+)=(".*?"|\S+)', s)}
</snippet></ROW><ROW><id>4764760</id><snippet>for line in wordlist:
    if not line.startswith(word):
        wordlist.remove(line)
</snippet></ROW><ROW><id>4764760</id><snippet>wordlist = [w for w in wordlist if w.startswith(word)]
</snippet></ROW><ROW><id>4765093</id><snippet>foo.py bar baz quux</snippet></ROW><ROW><id>4765097</id><snippet>global</snippet></ROW><ROW><id>4765097</id><snippet>setup</snippet></ROW><ROW><id>4765097</id><snippet>myvar1</snippet></ROW><ROW><id>4765097</id><snippet>def copy():
    global myvar1
    print "in copy", myvar1, myvar2
    myvar1 += 5.0
</snippet></ROW><ROW><id>4765097</id><snippet>global</snippet></ROW><ROW><id>4765103</id><snippet>return render_to_response('index.html', {'chan_prog_list': chan_prog_list})
</snippet></ROW><ROW><id>4765104</id><snippet>from token import NAME
from tokenize import generate_tokens, untokenize
from StringIO import StringIO

source = """def x(y):
    b = 2
    if y == b:
        foo(y)"""
result = []
tokens = generate_tokens(StringIO(source).readline)
for toknum, tokval, _, _, _ in tokens:
    if toknum == NAME and tokval == "foo":
        tokval = "bar"
    result.append((toknum, tokval))

print untokenize(result)
</snippet></ROW><ROW><id>4765104</id><snippet>def x (y ):
    b =2 
    if y ==b :
        bar (y )
</snippet></ROW><ROW><id>4765175</id><snippet>gtk.Entry</snippet></ROW><ROW><id>4765242</id><snippet>from PIL import Image
img = Image.open('img.jpg')
exif_data = img._getexif()
</snippet></ROW><ROW><id>4765242</id><snippet>exif = {
    PIL.ExifTags.TAGS[k]: v
    for k, v in img._getexif().items()
    if k in PIL.ExifTags.TAGS
}
</snippet></ROW><ROW><id>4765634</id><snippet>to_insert</snippet></ROW><ROW><id>4765634</id><snippet>to_insert = my_hash
</snippet></ROW><ROW><id>4765634</id><snippet>my_hash</snippet></ROW><ROW><id>4765634</id><snippet>&gt;&gt;&gt; hsh = '49cb6536afc7e4a4b3a94eb493aae4d52b8f6a60'
&gt;&gt;&gt; conn = sqlite3.connect(':memory:')
&gt;&gt;&gt; c = conn.cursor()
&gt;&gt;&gt; c.execute("CREATE TABLE t (i TEXT);")
&gt;&gt;&gt; c.execute("INSERT INTO t VALUES (?)", (hsh,)) # tuple works
&lt;sqlite3.Cursor object at 0x011A35E0&gt;
&gt;&gt;&gt; c.execute("INSERT INTO t VALUES (?)", ((123,),)) # tuple within tuple doesn't
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
sqlite3.InterfaceError: Error binding parameter 0 - probably unsupported type.
</snippet></ROW><ROW><id>4765850</id><snippet>__init__.py</snippet></ROW><ROW><id>4765850</id><snippet>config = Configurator(settings={'mako.directories':['house:templates']}) 
</snippet></ROW><ROW><id>4765909</id><snippet>checks = [
    lambda n: (len(n)==4, "Enter 4 digits only."),
    lambda n: (n.isdigit(), "Enter digits only."),
    lambda n: (len(set(str(n)))==4, "Enter non duplicate numbers only.")
]

a = raw_input("Enter the 4 numbers you want to play with: ")

sturn = 1
lturn = 8
for turn in range(sturn, lturn):
    b = raw_input("Enter your guess: ")
    all_good = True

    for check in checks:
        good,msg = check(b)
        if not good:
            print msg
            all_good = False
            break

    if all_good:
        print "{0} is correct!".format(b)
        break
</snippet></ROW><ROW><id>4765909</id><snippet>class CheckError(Exception): pass

class WrongLengthError(CheckError): pass
def check1(n):
    if len(n) != 4:
        raise WrongLengthError("Enter 4 digits only.")

class NonDigitCharError(CheckError): pass
def check2(n):
    if not n.isdigit():
        raise NonDigitCharError("Enter digits only.")

class HasDuplicatesError(CheckError): pass
def check3(n):
    if len(set(str(n))) != 4:
        raise HasDuplicatesError("Enter non duplicate numbers only.")


a = raw_input("Enter the 4 numbers you want to play with: ")

sturn = 1
lturn = 8
for turn in range(sturn, lturn):
    b = raw_input("Enter your guess: ")

    try:
        for check in (check1, check2, check3):
            check(b)

        print "{0} is correct!".format(b)
        break
    except CheckError, c:
        print c
</snippet></ROW><ROW><id>4766032</id><snippet>-c</snippet></ROW><ROW><id>4766032</id><snippet>build</snippet></ROW><ROW><id>4766032</id><snippet>$ python setup.py install -c</snippet></ROW><ROW><id>4766032</id><snippet>--compile (-c)     compile .py to .pyc [default]
</snippet></ROW><ROW><id>4766032</id><snippet>$ python setup.py build -c</snippet></ROW><ROW><id>4766032</id><snippet>--compiler (-c)    specify the compiler type
</snippet></ROW><ROW><id>4766032</id><snippet>$ python setup.py build --help</snippet></ROW><ROW><id>4766251</id><snippet>#Important assumption here... wordlist is sorted

base=wordlist[0]                      #consider the first word in the list
for word in wordlist:                 #loop through the entire list checking if
    if not word.startswith(base):     # the word we're considering starts with the base
        print base                    #If not... we have a new base, print the current
        base=word                     #  one and move to this new one
    #else word starts with base
        #don't output word, and go on to the next item in the list
print base                            #finish by printing the last base
</snippet></ROW><ROW><id>4766312</id><snippet>self.redirect('/serve/%s' % spam.egg.key())
</snippet></ROW><ROW><id>4766378</id><snippet>from piston.emitters import Emitter
from piston.utils import Mimer    

class TextEmitter(Emitter):
    def render(self, request):
        return self.construct()
Emitter.register('text', TextEmitter)
Mimer.register('text', None, ('text/plain',))
</snippet></ROW><ROW><id>4766378</id><snippet>urlpatterns = patterns('',
   url(r'^blogposts$', resource_here, { 'emitter_format': 'text' }),
)
</snippet></ROW><ROW><id>4766530</id><snippet>corpus reader</snippet></ROW><ROW><id>4766530</id><snippet>nltk.corpus</snippet></ROW><ROW><id>4766530</id><snippet>AlpinoCorpusReader
BNCCorpusReader
BracketParseCorpusReader
CMUDictCorpusReader
CategorizedCorpusReader
CategorizedPlaintextCorpusReader
CategorizedTaggedCorpusReader
ChunkedCorpusReader
ConllChunkCorpusReader
ConllCorpusReader
CorpusReader
DependencyCorpusReader
EuroparlCorpusReader
IEERCorpusReader
IPIPANCorpusReader
IndianCorpusReader
MacMorphoCorpusReader
NPSChatCorpusReader
NombankCorpusReader
PPAttachmentCorpusReader
Pl196xCorpusReader
PlaintextCorpusReader
PortugueseCategorizedPlaintextCorpusReader
PropbankCorpusReader
RTECorpusReader
SensevalCorpusReader
SinicaTreebankCorpusReader
StringCategoryCorpusReader
SwadeshCorpusReader
SwitchboardCorpusReader
SyntaxCorpusReader
TaggedCorpusReader
TimitCorpusReader
ToolboxCorpusReader
VerbnetCorpusReader
WordListCorpusReader
WordNetCorpusReader
WordNetICCorpusReader
XMLCorpusReader
YCOECorpusReader
</snippet></ROW><ROW><id>4766530</id><snippet>c = nltk.corpus.whateverCorpusReaderYouChoose(directoryWithCorpus, regexForFileTypes)
</snippet></ROW><ROW><id>4766530</id><snippet>paragraphs = [para for para in c.paras()]
for para in paragraphs:
    words = [word for sentence in para for word in sentence]
</snippet></ROW><ROW><id>4766592</id><snippet>import functools
def try_x_times(x, exceptions_to_catch, exception_to_raise, fn):
    @functools.wraps(fn) #keeps name and docstring of old function
    def new_fn(*args, **kwargs):
        for i in xrange(x):
            try:
                return fn(*args, **kwargs)
            except exceptions_to_catch:
                 pass
        raise exception_to_raise
    return new_fn
</snippet></ROW><ROW><id>4766592</id><snippet>#instead of
#risky_method(1,2,'x')
not_so_risky_method = try_x_times(3, (MyError,), myError2, risky_method)
not_so_risky_method(1,2,'x')

#or just
try_x_times(3, (MyError,), myError2, risky_method)(1,2,'x')
</snippet></ROW><ROW><id>4767134</id><snippet>lookup = set([x[0] for x in least_common])
new_array = []
for elem in array:
    if elem in lookup:
        new_array.append(elem + (elem * (mod[1]/100)))
    else:
        new_array.append(elem)
</snippet></ROW><ROW><id>4767306</id><snippet>_initialized=False
def initialize(path=None):
  if _initialized:
    if path:
      raise ValueError, "initialize called after first use"
    return
  if path is None:
    path = default_path
  load_dll(path)
  determine_features()
</snippet></ROW><ROW><id>4767306</id><snippet>initialized()</snippet></ROW><ROW><id>4767306</id><snippet>class DLLAPI:
  def __init__(self, path=None):
    ...
</snippet></ROW><ROW><id>4767413</id><snippet>&gt;&gt;&gt; for counter in range(10, 0, -1):
        print counter,
</snippet></ROW><ROW><id>4767413</id><snippet>step</snippet></ROW><ROW><id>4767527</id><snippet>array(Image.fromarray(&lt;data&gt;).rotate(&lt;angle&gt;, resample=Image.BICUBIC))
</snippet></ROW><ROW><id>4767527</id><snippet>array[&lt;layer&gt;]</snippet></ROW><ROW><id>4767527</id><snippet>for x in range(&lt;amount of layers&gt;):
    layer = &lt;array&gt;[i]
    &lt;array&gt;[i] = (Image.fromarray(layer).rotate(&lt;angle&gt;, resample=Image.BICUBIC))
</snippet></ROW><ROW><id>4767752</id><snippet>people = (('fred','sam','jane','betty'), (1,2,3,4))
p_dict = dict(zip(*people))
</snippet></ROW><ROW><id>4767844</id><snippet>import lxml.html as lh
import io

somehtml = "&lt;p&gt;Here is my solution: &lt;/p&gt;&lt;pre&gt;&lt;code&gt; some code here &lt;/code&gt; &lt;/pre&gt; &lt;pre&gt;this is not a code&lt;/pre&gt;"

doc=lh.parse(io.BytesIO(somehtml))
root=doc.getroot() 
pres=root.xpath('//pre/code/..')

for pre in pres:
    pre.attrib['class']='foo'
print(lh.tostring(root))
</snippet></ROW><ROW><id>4767844</id><snippet>&lt;html&gt;&lt;body&gt;&lt;p&gt;Here is my solution: &lt;/p&gt;&lt;pre class="foo"&gt;&lt;code&gt; some code here &lt;/code&gt; &lt;/pre&gt; &lt;pre&gt;this is not a code&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>4767873</id><snippet>images.get_serving_url(blob_key)</snippet></ROW><ROW><id>4767873</id><snippet>=sxx</snippet></ROW><ROW><id>4767873</id><snippet>xx</snippet></ROW><ROW><id>4767873</id><snippet>BlobReader</snippet></ROW><ROW><id>4768167</id><snippet>bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)
</snippet></ROW><ROW><id>4768167</id><snippet>foo.sort</snippet></ROW><ROW><id>4768345</id><snippet>pip install -i http://pypi.testrun.org pytest 
</snippet></ROW><ROW><id>4768467</id><snippet>libldap2-dev</snippet></ROW><ROW><id>4768494</id><snippet>&lt;form method="post" action="/node/createnode/${request.urlvars['id']}"&gt;
  &lt;input type="text" name="child_name"&gt;
  &lt;input name="submit" type="submit" value="Submit"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>4768730</id><snippet>Producer::run()</snippet></ROW><ROW><id>4768730</id><snippet>Consumer::run()</snippet></ROW><ROW><id>4768730</id><snippet>boost::python::object writer = this-&gt;k-&gt;Get&lt;boost::python::object&gt;("write");
</snippet></ROW><ROW><id>4768730</id><snippet>PyObject_GetItem</snippet></ROW><ROW><id>4768730</id><snippet>boost::python::object::operator[](const std::string&amp;)</snippet></ROW><ROW><id>4768730</id><snippet>Keeper::Get</snippet></ROW><ROW><id>4768730</id><snippet>{
  boost::mutex::scoped_lock l(this-&gt;k-&gt;python_keeper);
  boost::python::object writer = this-&gt;k-&gt;Get&lt;boost::python::object&gt;("write");
  writer(boost::python::str(os.str()));
}
</snippet></ROW><ROW><id>4768730</id><snippet>Py_Finalize()</snippet></ROW><ROW><id>4768979</id><snippet>subkeyword = (
        Session.query(Subkeyword.subkeyword_id, Subkeyword.subkeyword_word)
        .filter_by(subkeyword_company_id=self.e_company_id)
        .filter_by(subkeyword_word=subkeyword_word)
        .filter_by(subkeyword_active=True)
        .one()
    )
</snippet></ROW><ROW><id>4769092</id><snippet>[x*x for x in values if x &gt; 15]
</snippet></ROW><ROW><id>4769092</id><snippet>values.select {|v| v &gt; 15}.map {|v| v * v}
</snippet></ROW><ROW><id>4769092</id><snippet>expr ? val1 : val2</snippet></ROW><ROW><id>4769092</id><snippet>collection.each do |value|
  ...
end
</snippet></ROW><ROW><id>4769092</id><snippet>collection.each</snippet></ROW><ROW><id>4769092</id><snippet>def some_operation(value):
  ...

collection.each(some_operation)
</snippet></ROW><ROW><id>4769092</id><snippet>for value in collection:
  ...
</snippet></ROW><ROW><id>4769092</id><snippet>with</snippet></ROW><ROW><id>4769376</id><snippet>readLine</snippet></ROW><ROW><id>4769376</id><snippet>ser.read(numBytes)</snippet></ROW><ROW><id>4769376</id><snippet>&lt;HHL</snippet></ROW><ROW><id>4769376</id><snippet>try:
  data = [struct.unpack('&lt;HHL', handle.read(8)) for i in range(PACKETS_PER_TRANSMIT)]
except OSError:
  self.emit(SIGNAL("connectionLost()"))
  self.connected = False
</snippet></ROW><ROW><id>4769376</id><snippet>unsigned int SensA, SensB;
byte out_buffer[64];
unsigned int buffer_head = 0;
unsigned int buffer_size = 64;

SensA = analogRead(SENSOR_A);
SensB = analogRead(SENSOR_B);
micr = micros();
out_buffer[buffer_head++] = (SensA &amp; 0xFF);
out_buffer[buffer_head++] = (SensA &gt;&gt; 8) &amp; 0xFF;

out_buffer[buffer_head++] = (SensB &amp; 0xFF);
out_buffer[buffer_head++] = (SensB &gt;&gt; 8) &amp; 0xFF;

out_buffer[buffer_head++] = (micr &amp; 0xFF);
out_buffer[buffer_head++] = (micr &gt;&gt; 8) &amp; 0xFF;
out_buffer[buffer_head++] = (micr &gt;&gt; 16) &amp; 0xFF;
out_buffer[buffer_head++] = (micr &gt;&gt; 24) &amp; 0xFF;

Serial.write(out_buffer, buffer_size);
</snippet></ROW><ROW><id>4769376</id><snippet>readLine</snippet></ROW><ROW><id>4769376</id><snippet>byte</snippet></ROW><ROW><id>4769376</id><snippet>(SensA &amp; 0xFF)</snippet></ROW><ROW><id>4769376</id><snippet>SensA</snippet></ROW><ROW><id>4769376</id><snippet>0xFF</snippet></ROW><ROW><id>4769376</id><snippet>SensA</snippet></ROW><ROW><id>4769376</id><snippet>struct.unpack('&lt;HHL',handle.read(8))</snippet></ROW><ROW><id>4769665</id><snippet>ExitType.objects.filter(exits__stop__line=line).distinct()
</snippet></ROW><ROW><id>4769674</id><snippet>key</snippet></ROW><ROW><id>4769674</id><snippet>min(iterable, key=func)
</snippet></ROW><ROW><id>4769969</id><snippet>    theModule = __import__(module_name+".forms") # for some reason need the .forms part
    theClass = getattr(theModule,'forms')
    theForm = getattr(theClass,form_name)
</snippet></ROW><ROW><id>4769969</id><snippet>theForm() or theForm(request.POST)
</snippet></ROW><ROW><id>4770192</id><snippet>type</snippet></ROW><ROW><id>4770192</id><snippet>class Directory(webapp.RequestHandler):
    def get(self):
       ....
       merchandise_type = self.request.get("type", "")
       items = Item.all()
       items.filter("type =", merchandise_type)
       path = os.path.join(os.path.dirname(__file__), 'dir_details.html')
       self.response.out.write(template.render(path,{'type':merchandise_type}))
</snippet></ROW><ROW><id>4770192</id><snippet>type</snippet></ROW><ROW><id>4770192</id><snippet>&lt;input type="hidden" name="dir_type" value="{{ type }}"&gt;
</snippet></ROW><ROW><id>4770192</id><snippet>dir_type</snippet></ROW><ROW><id>4770192</id><snippet>class DirectorySubmitHandler(webapp.RequestHandler):
    def post(self):
        user = users.get_current_user()
        merchandise_type = self.request.get("dir_type", "")
        dir_type = merchandise_type
        if user:
            item = Item()
            item.title = self.request.get("title")
            item.url = self.request.get("url")
            item.type = self.request.get("dir_type")
            item.user_who_liked_this_item = user
            item.put()
            self.redirect("/dir?type=%s" %
self.request.get("dir_type"))
        else:
            self.redirect(users.create_login_url(self.request.uri)) 
</snippet></ROW><ROW><id>4770360</id><snippet>raw_data = [ 'LEVEL 1', 'SUBJECT A', 'GROUP X', 'COMMENT i', 'COMMENT ii',
'COMMENT iii', 'GROUP Y', 'COMMENT iv', 'COMMENT v', 'COMMENT vi', 'LEVEL 2',
'SUBJECT B', 'GROUP Z', 'COMMENT vii', 'COMMENT viii', 'COMMENT ix', 
'SUBJECT C', 'GROUP X2', 'COMMENT x', 'COMMENT xi', 'COMMENT xii', 
'COMMENT xiii', 'GROUP Y2', 'COMMENT xiv', 'COMMENT xv', 'COMMENT xvi' ]

level, subject, group, comment = '', '', '', ''

result = []

for item in raw_data:

    if item.startswith('COMMENT'): 
        comment = item
    elif item.startswith('GROUP'): 
        group = item
        comment = ''
    elif item.startswith('SUBJECT'): 
        subject = item
        group = ''
    elif item.startswith('LEVEL'): 
        level = item
        subject = ''

    if level and subject and group and comment:
        result.append([level, subject, group, comment])

import pprint
pprint.pprint(result)
</snippet></ROW><ROW><id>4770360</id><snippet>[['LEVEL 1', 'SUBJECT A', 'GROUP X', 'COMMENT i'],
 ['LEVEL 1', 'SUBJECT A', 'GROUP X', 'COMMENT ii'],
 ['LEVEL 1', 'SUBJECT A', 'GROUP X', 'COMMENT iii'],
 ['LEVEL 1', 'SUBJECT A', 'GROUP Y', 'COMMENT iv'],
 ['LEVEL 1', 'SUBJECT A', 'GROUP Y', 'COMMENT v'],
 ['LEVEL 1', 'SUBJECT A', 'GROUP Y', 'COMMENT vi'],
 ['LEVEL 2', 'SUBJECT B', 'GROUP Z', 'COMMENT vii'],
 ['LEVEL 2', 'SUBJECT B', 'GROUP Z', 'COMMENT viii'],
 ['LEVEL 2', 'SUBJECT B', 'GROUP Z', 'COMMENT ix'],
 ['LEVEL 2', 'SUBJECT C', 'GROUP X2', 'COMMENT x'],
 ['LEVEL 2', 'SUBJECT C', 'GROUP X2', 'COMMENT xi'],
 ['LEVEL 2', 'SUBJECT C', 'GROUP X2', 'COMMENT xii'],
 ['LEVEL 2', 'SUBJECT C', 'GROUP X2', 'COMMENT xiii'],
 ['LEVEL 2', 'SUBJECT C', 'GROUP Y2', 'COMMENT xiv'],
 ['LEVEL 2', 'SUBJECT C', 'GROUP Y2', 'COMMENT xv'],
 ['LEVEL 2', 'SUBJECT C', 'GROUP Y2', 'COMMENT xvi']]
</snippet></ROW><ROW><id>4770589</id><snippet>ledger = model.Ledger()
ledger.name = name
ledger.users.append(user)
meta.Session.add(ledger)
meta.Session.commit()
</snippet></ROW><ROW><id>4770747</id><snippet>argparse</snippet></ROW><ROW><id>4770747</id><snippet>group.add_argument</snippet></ROW><ROW><id>4770747</id><snippet># exclusivegroups.py
import conflictsparse

parser = conflictsparse.ConflictsOptionParser()
a_opt = parser.add_option('-a')
b_opt = parser.add_option('-b')
c_opt = parser.add_option('-c')
d_opt = parser.add_option('-d')

import itertools
compatible_opts1 = (a_opt, b_opt)
compatible_opts2 = (c_opt, d_opt)
exclusives = itertools.product(compatible_opts1, compatible_opts2)
for exclusive_grp in exclusives:
    parser.register_conflict(exclusive_grp)


opts, args = parser.parse_args()
print "opts: ", opts
print "args: ", args
</snippet></ROW><ROW><id>4770747</id><snippet>$ python exclusivegroups.py -a 1 -b 2
opts:  {'a': '1', 'c': None, 'b': '2', 'd': None}
args:  []
$ python exclusivegroups.py -c 3 -d 2
opts:  {'a': None, 'c': '3', 'b': None, 'd': '2'}
args:  []
$ python exclusivegroups.py -a 1 -b 2 -c 3
Usage: exclusivegroups.py [options]

exclusivegroups.py: error: -b, -c are incompatible options.
</snippet></ROW><ROW><id>4770747</id><snippet>'-a'</snippet></ROW><ROW><id>4770747</id><snippet>'-b'</snippet></ROW><ROW><id>4770747</id><snippet>'-c'</snippet></ROW><ROW><id>4770747</id><snippet>argparse</snippet></ROW><ROW><id>4770747</id><snippet>argparse</snippet></ROW><ROW><id>4770747</id><snippet>itertools</snippet></ROW><ROW><id>4770747</id><snippet>import itertools
compatible_opts1 = ('-a', '-b')
compatible_opts2 = ('-c', '-d')
exclusives = itertools.product(compatible_opts1, compatible_opts2)
for exclusive_grp in exclusives:
    group = parser.add_mutually_exclusive_group()
    group.add_argument(exclusive_grp[0])
    group.add_argument(exclusive_grp[1])
</snippet></ROW><ROW><id>4770759</id><snippet>operator.and_</snippet></ROW><ROW><id>4770759</id><snippet>operator.or_</snippet></ROW><ROW><id>4770759</id><snippet>and</snippet></ROW><ROW><id>4770759</id><snippet>or</snippet></ROW><ROW><id>4770759</id><snippet>operator</snippet></ROW><ROW><id>4770759</id><snippet>any()</snippet></ROW><ROW><id>4770759</id><snippet>all()</snippet></ROW><ROW><id>4770759</id><snippet>and</snippet></ROW><ROW><id>4770759</id><snippet>or</snippet></ROW><ROW><id>4770759</id><snippet>False and sys.stdout.write("Hello")
</snippet></ROW><ROW><id>4770759</id><snippet>f(False, sys.stdout.write("Hello"))
</snippet></ROW><ROW><id>4770759</id><snippet>f()</snippet></ROW><ROW><id>4770759</id><snippet>operator</snippet></ROW><ROW><id>4771200</id><snippet>report_callback_exception</snippet></ROW><ROW><id>4771200</id><snippet>import traceback
import tkMessageBox

# You would normally put that on the App class
def show_error(self, *args):
    err = traceback.format_exception(*args)
    tkMessageBox.showerror('Exception',err)
# but this works too
tk.Tk.report_callback_exception = show_error
</snippet></ROW><ROW><id>4771200</id><snippet>Tkinter.Tk.report_callback_exception = show_error
</snippet></ROW><ROW><id>4771229</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; line = '0 1 1 75 55'
&gt;&gt;&gt; x = re.findall("(\d+)", line)
&gt;&gt;&gt; print x
['0', '1', '1', '75', '55']
</snippet></ROW><ROW><id>4771504</id><snippet>.py</snippet></ROW><ROW><id>4771504</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>4771504</id><snippet>main.py</snippet></ROW><ROW><id>4771504</id><snippet>import pkg1.util as util
</snippet></ROW><ROW><id>4771504</id><snippet>test.py</snippet></ROW><ROW><id>4771504</id><snippet>pkg1</snippet></ROW><ROW><id>4771504</id><snippet>pkg2</snippet></ROW><ROW><id>4771504</id><snippet>from ..pkg1 import util
</snippet></ROW><ROW><id>4771504</id><snippet>import pkg1.util as util
</snippet></ROW><ROW><id>4771504</id><snippet>main.py</snippet></ROW><ROW><id>4771504</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4771504</id><snippet>sys.path</snippet></ROW><ROW><id>4771733</id><snippet>tzinfo</snippet></ROW><ROW><id>4771733</id><snippet>tzinfo</snippet></ROW><ROW><id>4771733</id><snippet>from datetime import datetime
from dateutil import tz

# METHOD 1: Hardcode zones:
from_zone = tz.gettz('UTC')
to_zone = tz.gettz('America/New_York')

# METHOD 2: Auto-detect zones:
from_zone = tz.tzutc()
to_zone = tz.tzlocal()

# utc = datetime.utcnow()
utc = datetime.strptime('2011-01-21 02:37:21', '%Y-%m-%d %H:%M:%S')

# Tell the datetime object that it's in UTC time zone since 
# datetime objects are 'naive' by default
utc = utc.replace(tzinfo=from_zone)

# Convert time zone
central = utc.astimezone(to_zone)
</snippet></ROW><ROW><id>4771733</id><snippet>strptime</snippet></ROW><ROW><id>4771983</id><snippet>I am trying to retrieve all of the possible Wikipedia supported languages and output them to a text file by traversing the tables on List_of_Wikipedias
</snippet></ROW><ROW><id>4771983</id><snippet>(//x:table)[1]/x:tr[not(x:th)]/x:td[2]//text()
</snippet></ROW><ROW><id>4771983</id><snippet>"http://www.w3.org/1999/xhtml"</snippet></ROW><ROW><id>4771983</id><snippet>"x"</snippet></ROW><ROW><id>4771983</id><snippet>&lt;!DOCTYPE html [
&lt;!ENTITY uarr "↑"&gt;
&lt;!ENTITY darr "↓"&gt;
&lt;!ENTITY ccedil "Ç"&gt;
&lt;!ENTITY oslash "Ø"&gt;
&lt;!ENTITY aacute "á"&gt;
&lt;!ENTITY aring "å"&gt;
&lt;!ENTITY agrave "À"&gt;
&lt;!ENTITY egrave "è"&gt;
&lt;!ENTITY ograve "Ò"&gt;
&lt;!ENTITY ocirc "ô"&gt;
]&gt;
</snippet></ROW><ROW><id>4771983</id><snippet>                    English

                    German

                    French

                    Polish

                    Italian

                    Japanese

                    Spanish

                    Portuguese

                    Dutch

                    Russian

                    Swedish

                    Chinese

                    Catalan

                    Norwegian (Bokmål)

                    Finnish

                    Ukrainian

                    Czech

                    Hungarian

                    Romanian

                    Korean

                    Turkish

                    Vietnamese

                    Indonesian

                    Danish

                    Arabic

                    Esperanto

                    Serbian

                    Lithuanian

                    Slovak

                    Volapük

                    Persian

                    Hebrew

                    Bulgarian

                    Slovenian

                    Malay

                    Waray-Waray

                    Croatian

                    Estonian

                    Newar / Nepal Bhasa

                    Simple English

                    Hindi

                    Galician

                    Thai

                    Basque

                    Norwegian (Nynorsk)

                    Aromanian

                    Greek

                    Haitian

                    Azerbaijani

                    Tagalog

                    Latin

                    Telugu

                    Georgian

                    Macedonian

                    Cebuano

                    Serbo-Croatian

                    Breton

                    Piedmontese

                    Marathi

                    Latvian

                    Luxembourgish

                    Javanese

                    Belarusian (Taraškievica)

                    Welsh

                    Icelandic

                    Bosnian

                    Albanian

                    Tamil

                    Belarusian

                    Bishnupriya Manipuri

                    Aragonese

                    Occitan

                    Bengali

                    Swahili

                    Ido

                    Lombard

                    West Frisian

                    Gujarati

                    Afrikaans

                    Low Saxon

                    Malayalam

                    Quechua

                    Sicilian

                    Urdu

                    Kurdish

                    Cantonese

                    Sundanese

                    Asturian

                    Neapolitan

                    Samogitian

                    Armenian

                    Yoruba

                    Irish

                    Chuvash

                    Walloon

                    Nepali

                    Ripuarian

                    Western Panjabi

                    Kannada

                    Tajik

                    Tarantino

                    Venetian

                    Yiddish

                    Scottish Gaelic

                    Tatar

                    Min Nan

                    Ossetian

                    Uzbek

                    Alemannic

                    Kapampangan

                    Sakha

                    Egyptian Arabic

                    Kazakh

                    Maori

                    Limburgian

                    Amharic

                    Nahuatl

                    Upper Sorbian

                    Gilaki

                    Corsican

                    Gan

                    Mongolian

                    Scots

                    Interlingua

                    Central_Bicolano

                    Burmese

                    Faroese

                    Võro

                    Dutch Low Saxon

                    Sinhalese

                    Turkmen

                    West Flemish

                    Sanskrit

                    Bavarian

                    Malagasy

                    Manx

                    Ilokano

                    Divehi

                    Norman

                    Pangasinan

                    Banyumasan

                    Sorani

                    Romansh

                    Northern Sami

                    Zazaki

                    Mazandarani

                    Wu

                    Friulian

                    Uyghur

                    Ligurian

                    Maltese

                    Bihari

                    Novial

                    Tibetan

                    Anglo-Saxon

                    Kashubian

                    Sardinian

                    Classical Chinese

                    Fiji Hindi

                    Khmer

                    Ladino

                    Zamboanga Chavacano

                    Pali

                    Franco-Provençal/Arpitan

                    Pashto

                    Hakka

                    Cornish

                    Punjabi

                    Navajo

                    Silesian

                    Kalmyk

                    Pennsylvania German

                    Hawaiian

                    Saterland Frisian

                    Interlingue

                    Somali

                    Komi

                    Karachay-Balkar

                    Crimean Tatar

                    Tongan

                    Acehnese

                    Meadow Mari

                    Picard

                    Erzya

                    Lingala

                    Kinyarwanda

                    Extremaduran

                    Guarani

                    Kirghiz

                    Emilian-Romagnol

                    Assyrian Neo-Aramaic

                    Papiamentu

                    Aymara

                    Chechen

                    Lojban

                    Wolof

                    Banjar

                    Bashkir

                    North Frisian

                    Greenlandic

                    Tok Pisin

                    Udmurt

                    Kabyle

                    Tahitian

                    Sranan

                    Zealandic

                    Hill Mari

                    Komi-Permyak

                    Lower Sorbian

                    Abkhazian

                    Gagauz

                    Igbo

                    Oriya

                    Lao

                    Kongo

                    Avar

                    Moksha

                    Mirandese

                    Romani

                    Old Church Slavonic

                    Karakalpak

                    Samoan

                    Moldovan

                    Tetum

                    Gothic

                    Kashmiri

                    Bambara

                    Inupiak

                    Sindhi

                    Bislama

                    Lak

                    Nauruan

                    Norfolk

                    Inuktitut

                    Pontic

                    Assamese

                    Cherokee

                    Min Dong

                    Swati

                    Palatinate German

                    Hausa

                    Ewe

                    Tigrinya

                    Oromo

                    Zulu

                    Zhuang

                    Venda

                    Tsonga

                    Kirundi

                    Dzongkha

                    Sango

                    Cree

                    Chamorro

                    Luganda

                    Buginese

                    Buryat (Russia)

                    Fijian

                    Chichewa

                    Akan

                    Sesotho

                    Xhosa

                    Fula

                    Tswana

                    Kikuyu

                    Tumbuka

                    Shona

                    Twi

                    Cheyenne

                    Ndonga

                    Sichuan Yi

                    Choctaw

                    Marshallese

                    Afar

                    Kuanyama

                    Hiri Motu

                    Muscogee

                    Kanuri

                    Herero
</snippet></ROW><ROW><id>4771983</id><snippet>(//x:table)[1]/x:tr[not(x:th)]/x:td[2]//text()[normalize-space()]
</snippet></ROW><ROW><id>4772035</id><snippet>B()</snippet></ROW><ROW><id>4772035</id><snippet>A()</snippet></ROW><ROW><id>4772241</id><snippet>__setattr__</snippet></ROW><ROW><id>4772241</id><snippet>baseclass.__setattr__(self, attr, value)</snippet></ROW><ROW><id>4772241</id><snippet>self.__dict__[attr] = value</snippet></ROW><ROW><id>4772241</id><snippet>def __setattr__(self, name, value):
    object.__setattr__(self, name, value)
</snippet></ROW><ROW><id>4772241</id><snippet>def __setattr__(self, name, value):
    super(Test, self).__setattr__(name, value)
</snippet></ROW><ROW><id>4772241</id><snippet>class Test(object):
    @property
    def gx(self):
        print "getting gx"
        return self.__dict__['gx']

    @gx.setter
    def gx(self, value):
        print "setting gx"
        self.__dict__['gx'] = value

    def __setattr__(self, attr, value):
        print "using setattr"            
        object.__setattr__(self, attr, value)

t = Test()
t.gx = 4
t.dummy = 5
print t.gx
print t.dummy

print dir(Test)
</snippet></ROW><ROW><id>4772241</id><snippet>using setattr
setting gx
getting gx
using setattr
4
5
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'gx']
</snippet></ROW><ROW><id>4772241</id><snippet>__setattr__</snippet></ROW><ROW><id>4772241</id><snippet>foo.bar = x</snippet></ROW><ROW><id>4772241</id><snippet>foo.__dict__['bar'] = x</snippet></ROW><ROW><id>4772241</id><snippet>foo.__dict__</snippet></ROW><ROW><id>4772241</id><snippet>__setattr__</snippet></ROW><ROW><id>4772407</id><snippet>inspect</snippet></ROW><ROW><id>4772407</id><snippet>try: ugly()
except TypeError as e:
    stack = inspect.stack()
    [...look at the stack...]
</snippet></ROW><ROW><id>4772407</id><snippet>FUNCTION_TO_CALL</snippet></ROW><ROW><id>4772407</id><snippet>y_better</snippet></ROW><ROW><id>4772407</id><snippet>def y_better(foo, bar=None):
    try: y(foo, bar)
    except TypeError:
        if foo == bar: # detect foobar condition
            raise FoobarError()
        else:          # not foobar, so re-raise the exception
            raise
</snippet></ROW><ROW><id>4772459</id><snippet>--extra-index-url=http://example.com
my-apps/apps1.tar.gz
# put apps2-1.0.1.tar.gz to http://example.com/apps2/
apps2
</snippet></ROW><ROW><id>4772484</id><snippet>word = "alpha"
index = 0

while (index &lt; len(word)):
    print word + "   " + word[::-1]
    word = word[1:] + word[0]
    index += 1
</snippet></ROW><ROW><id>4772643</id><snippet>bot-Overmind</snippet></ROW><ROW><id>4773111</id><snippet>__add__</snippet></ROW><ROW><id>4773111</id><snippet>__iadd__</snippet></ROW><ROW><id>4773111</id><snippet>__add__</snippet></ROW><ROW><id>4773111</id><snippet>__iadd__</snippet></ROW><ROW><id>4773111</id><snippet>__iadd__</snippet></ROW><ROW><id>4773111</id><snippet>a + b</snippet></ROW><ROW><id>4773111</id><snippet>__add__</snippet></ROW><ROW><id>4773111</id><snippet>a += b</snippet></ROW><ROW><id>4773111</id><snippet>__iadd__</snippet></ROW><ROW><id>4773111</id><snippet>__add__</snippet></ROW><ROW><id>4773111</id><snippet>tmp = a + b; a = tmp</snippet></ROW><ROW><id>4773111</id><snippet>operator.add</snippet></ROW><ROW><id>4773111</id><snippet>operator.iadd</snippet></ROW><ROW><id>4773111</id><snippet>operator.iadd(x, y)</snippet></ROW><ROW><id>4773111</id><snippet>z = x; z += y</snippet></ROW><ROW><id>4773111</id><snippet>__iadd__</snippet></ROW><ROW><id>4773111</id><snippet>__add__</snippet></ROW><ROW><id>4773111</id><snippet>x = operator.iadd(x, y)</snippet></ROW><ROW><id>4773111</id><snippet>import operator
a = 1
operator.iadd(a, 2)
# a is still 1, because ints don't have __iadd__; iadd returned 3

b = ['a']
operator.iadd(b, ['b'])
# lists do have __iadd__, so b is now ['a', 'b']
</snippet></ROW><ROW><id>4773358</id><snippet># the dependencies
sudo apt-get install libsndfile-dev python-numpy cython python-setuptools
# install audiolab
cd audiolab-0.11 &amp;&amp; python setup.py install --user
</snippet></ROW><ROW><id>4773358</id><snippet>from scikits.audiolab.pysndfile.matapi import oggread
data, fs, enc = oggread("myfile.ogg")
</snippet></ROW><ROW><id>4774366</id><snippet>python django-admin.py startproject blog
</snippet></ROW><ROW><id>4774809</id><snippet>output += self.nanosecond * (d(8.64) * d(10)**d(-9))
</snippet></ROW><ROW><id>4774809</id><snippet>output += self.nanosecond / d(86400000000000)
</snippet></ROW><ROW><id>4774809</id><snippet>Decimal</snippet></ROW><ROW><id>4774809</id><snippet>Decimal</snippet></ROW><ROW><id>4774809</id><snippet>d = decimal.Decimal
</snippet></ROW><ROW><id>4774809</id><snippet>.0</snippet></ROW><ROW><id>4775027</id><snippet>&gt;&gt;&gt; a = [1, 2, 9, 5, 1]
&gt;&gt;&gt; b = [9, 8, 7, 6, 5]
&gt;&gt;&gt; len(set(a) &amp; set(b))     # &amp; is intersection - elements common to both
2 
</snippet></ROW><ROW><id>4775027</id><snippet>&gt;&gt;&gt; def filter_(x, y):
...     count = 0
...     for num in y:
...             if num in x:
...                     count += 1
...     return count
... 
&gt;&gt;&gt; filter_(a, b)
2
</snippet></ROW><ROW><id>4775027</id><snippet>return count</snippet></ROW><ROW><id>4775249</id><snippet>Point</snippet></ROW><ROW><id>4775249</id><snippet>class Point(tuple):
    def r_neighbor(self):
        return Point((self[0] + 1, self[1]))
    def l_neighbor(self): 
        [...]

x = Point((10, 11))
print x
print x.r_neighbor()
</snippet></ROW><ROW><id>4775249</id><snippet>Point((10, 11))</snippet></ROW><ROW><id>4775249</id><snippet>__new__</snippet></ROW><ROW><id>4775249</id><snippet>__init__</snippet></ROW><ROW><id>4775249</id><snippet>def __new__(self, x, y):
    return super(Point, self).__new__(self, (x, y))
</snippet></ROW><ROW><id>4775249</id><snippet>def __new__(self, x, y, gridsize=100):
    return super(Point, self).__new__(self, (x % gridsize, y % gridsize))
</snippet></ROW><ROW><id>4775249</id><snippet>__new__</snippet></ROW><ROW><id>4775249</id><snippet>def __new__(self, tup, gridsize=100):
    return super(Point, self).__new__(self, (x % gridsize for x in tup))
</snippet></ROW><ROW><id>4775249</id><snippet>Point</snippet></ROW><ROW><id>4775249</id><snippet>from collections import defaultdict

grid = defaultdict(list)
p = Point((10, 13))
grid[(10, 13)] = [2, 3, 4]
print grid[p]                  # prints [2, 3, 4]
print grid[p.r_neighbor]       # no KeyError; prints []
</snippet></ROW><ROW><id>4775249</id><snippet>defaultdict(defaultdict)</snippet></ROW><ROW><id>4775249</id><snippet>def intdict():
    return defaultdict(int)

grid = defaultdict(intdict)
</snippet></ROW><ROW><id>4775249</id><snippet>grid = defaultdict(lambda: defaultdict(int))
</snippet></ROW><ROW><id>4775249</id><snippet>p = Point((10, 13))
grid[(10, 13)]["coins"] = 50
print grid[p]["coins"]              # prints 50
print grid[p.r_neighbor]["coins"]   # prints 0; again, no KeyError
</snippet></ROW><ROW><id>4775284</id><snippet>bytetable = [("00000000"+bin(x)[2:])[-8:] for x in range(256)]
</snippet></ROW><ROW><id>4775284</id><snippet>bytetable = [("00000000"+bin(x)[2:])[-1:-9:-1] for x in range(256)]
</snippet></ROW><ROW><id>4775284</id><snippet>binrep = "".join(bytetable[x] for x in open("file", "rb").read())
</snippet></ROW><ROW><id>4775596</id><snippet>__main__</snippet></ROW><ROW><id>4775706</id><snippet>python-devel</snippet></ROW><ROW><id>4775706</id><snippet>python2.6 setup.py install</snippet></ROW><ROW><id>4775900</id><snippet>__init__.py</snippet></ROW><ROW><id>4775900</id><snippet>__init__.py</snippet></ROW><ROW><id>4775988</id><snippet>&gt; foo This is my text
</snippet></ROW><ROW><id>4775988</id><snippet>do_addtext(self, parameter):
  "Add text to end of file."
  filename,text = parameter.split(" ", 1)  # &lt;--- this does the parsing you wanted Cmd to do
  if os.path.exists(filename) == True:
    f = open(filename, 'a')
    f.write("\n" + text)
    print "\n&gt;&gt;&gt; Text added!\n"
  else:
    print "\n&gt;&gt;&gt; File do not exists\n"
</snippet></ROW><ROW><id>4776009</id><snippet>codecs.open()</snippet></ROW><ROW><id>4776009</id><snippet>extract()</snippet></ROW><ROW><id>4776009</id><snippet>decode()</snippet></ROW><ROW><id>4776009</id><snippet>codecs</snippet></ROW><ROW><id>4776009</id><snippet>zip_in_memory.open(...)</snippet></ROW><ROW><id>4776009</id><snippet>codecs.EncodedFile</snippet></ROW><ROW><id>4776336</id><snippet>key()</snippet></ROW><ROW><id>4776336</id><snippet>Key</snippet></ROW><ROW><id>4776336</id><snippet>key</snippet></ROW><ROW><id>4776336</id><snippet>&lt;select size="5" name="client"&gt; 
  {% for person in clients %}
    &lt;option value="{{ person.key }}"&gt;
      {{ person.first|escape }} {{ person.last|escape }}
    &lt;/option&gt;
  {% endfor %}
&lt;/select&gt;
</snippet></ROW><ROW><id>4776336</id><snippet>&lt;option&gt;</snippet></ROW><ROW><id>4776336</id><snippet>value</snippet></ROW><ROW><id>4776336</id><snippet>&lt;select&gt;</snippet></ROW><ROW><id>4776336</id><snippet>cleint_list</snippet></ROW><ROW><id>4776336</id><snippet>client</snippet></ROW><ROW><id>4776336</id><snippet>Key</snippet></ROW><ROW><id>4776336</id><snippet>get()</snippet></ROW><ROW><id>4776336</id><snippet>client_key = Key(self.request.get('client'))
client = Person.get(client_key)
if client is None:
    # in case the passed key isn't available
    return
reservation.client = client
</snippet></ROW><ROW><id>4776403</id><snippet>/Applications</snippet></ROW><ROW><id>4776403</id><snippet>idle2.6</snippet></ROW><ROW><id>4776403</id><snippet>idle3</snippet></ROW><ROW><id>4776403</id><snippet>idle3.1</snippet></ROW><ROW><id>4776403</id><snippet>idle3.2</snippet></ROW><ROW><id>4776696</id><snippet>#!/usr/bin/python26/python
</snippet></ROW><ROW><id>4776748</id><snippet>type</snippet></ROW><ROW><id>4776748</id><snippet>class VoteHandler(webapp.RequestHandler):
    def get(self, id):
        id = int(id)
        item = Item.get_by_id(id)
        merchandise_type = self.request.get("type", "")
        ..
        self.redirect('/%s' % merchandise_type)
</snippet></ROW><ROW><id>4776806</id><snippet>for i, j in itertools.product([1, 2, 3], [4, 5, 6]):
    print i, j
</snippet></ROW><ROW><id>4776828</id><snippet>UserProfile</snippet></ROW><ROW><id>4776828</id><snippet>class UserProfile(models.Model):
    user = models.ForeignKey(User, unique=True)
    ...
    zip = models.CharField(max_length=12, blank=True, null=True)
    city_state = models.CharField(max_length=30, blank=True, null=True)
    lat = models.DecimalField(max_digits=12, decimal_places=9, blank=True, null=True)
    lng = models.DecimalField(max_digits=12, decimal_places=9, blank=True, null=True)

    def save(self, *args, **kwargs):
        if self.zip:
            (city_state, lat, lng) = get_lat_lng(self.zip)
            if city_state and lat and lng:
                self.city_state = city_state
                self.lat = lat
                self.lng = lng

        super(UserProfile, self).save(*args, **kwargs)

class UserProfileForm(ModelForm):
    class Meta:
        model = UserProfile
        fields = ('zip',)
</snippet></ROW><ROW><id>4776828</id><snippet>zip</snippet></ROW><ROW><id>4777049</id><snippet>msg1 = ""
...
    elif int(b) != int(a):
        msg1 += ("{0}: position:{1}, exists {2}\n").format(b, position(a, b), (exists(a, b) - position(a, b)))
        print msg1,
        ...
</snippet></ROW><ROW><id>4777156</id><snippet>-O</snippet></ROW><ROW><id>4777156</id><snippet>.pyo</snippet></ROW><ROW><id>4777156</id><snippet>__debug__</snippet></ROW><ROW><id>4777156</id><snippet>-OO</snippet></ROW><ROW><id>4777156</id><snippet>Py_OptimizeFlag</snippet></ROW><ROW><id>4777355</id><snippet># find lines with authors
import re

# multiline string to simulate possible input
text = '''
Stuff before
This won't be matched...
Author(s)    : Firstname Lastname  
               Firstname Lastname  
               Firstname Lastname  
               Firstname Lastname
Other(s)     : Something else we won't match
               More shenanigans....
Only the author names will be matched.
'''

# run the regex to pull author lines from the sample input
authors = re.search(r'Author\(s\)\s*:\s*(.*?)^[^\s]', text, re.DOTALL | re.MULTILINE).group(1)
</snippet></ROW><ROW><id>4777355</id><snippet>'''Firstname Lastname  
           Firstname Lastname  
           Firstname Lastname  
           Firstname Lastname
'''
</snippet></ROW><ROW><id>4777355</id><snippet># grab authors from the lines
import re
authors = '''Firstname Lastname  
           Firstname Lastname  
           Firstname Lastname  
           Firstname Lastname
'''

# run the regex to pull a list of individual authors from the author lines
authors = re.findall(r'^\s*(.+?)\s*$', authors, re.MULTILINE)
</snippet></ROW><ROW><id>4777355</id><snippet>['Firstname Lastname', 'Firstname Lastname', 'Firstname Lastname', 'Firstname Lastname']
</snippet></ROW><ROW><id>4777355</id><snippet>text = '''
Stuff before
This won't be matched...
Author(s)    : Firstname Lastname  
               Firstname Lastname  
               Firstname Lastname  
               Firstname Lastname
Other(s)     : Something else we won't match
               More shenanigans....
Only the author names will be matched.
'''

import re
stage1 = re.compile(r'Author\(s\)\s*:\s*(.*?)^[^\s]', re.DOTALL | re.MULTILINE)
stage2 = re.compile('^\s*(.+?)\s*$', re.MULTILINE)

preliminary = stage1.search(text).group(1)
authors = stage2.findall(preliminary)
</snippet></ROW><ROW><id>4777355</id><snippet>['Firstname Lastname', 'Firstname Lastname', 'Firstname Lastname', 'Firstname Lastname']
</snippet></ROW><ROW><id>4777356</id><snippet>profile.html</snippet></ROW><ROW><id>4777356</id><snippet>common-profile.html</snippet></ROW><ROW><id>4777356</id><snippet>{% extends 'base.html' %}

{% block content %}
    &lt;!-- Normal common profile stuff --&gt;

    {% block extendedcontent %}{% endblock extendedcontent %}
{% endblock content %}
</snippet></ROW><ROW><id>4777356</id><snippet>{% extends 'common-profile.html' %}

{% block extendedcontent %}
    &lt;!-- Special profile stuff --&gt;
{% endblock extendedcontent %}
</snippet></ROW><ROW><id>4777413</id><snippet>xticks(...)</snippet></ROW><ROW><id>4777413</id><snippet>set_xticks</snippet></ROW><ROW><id>4777420</id><snippet>img = Image.fromarray(numpy.rot90(numpy.array(img), n))
</snippet></ROW><ROW><id>4777420</id><snippet>n</snippet></ROW><ROW><id>4777548</id><snippet>def some_func():
  some_expr_using(lambda args: 42)

# becomes:

def some_func():
  def unique_name(args):
    return 42
  some_expr_using(unique_name)
</snippet></ROW><ROW><id>4777548</id><snippet>def y(f):
  def a(x):
    def b(*r):
      return x(x)(*r)
    return f(b)
  return a(a)

def fx(f):
  def x(q, n):
    # changed "a and b or c": different semantics if b can be falsy
    if len(q) &lt;= n:
      return q
    else:
      return f(q[len(q) / 2:], n) + f(q[:len(q) / 2], n)
  return x

print "\n".join(
  " ".join(y(fx)(k, z + 1) for z, k in enumerate(i[:-1].split()))
  for i in list(s)[1:])
</snippet></ROW><ROW><id>4777925</id><snippet>class Foobar():
    def __init__(self, foo, bar, choo):
        self.foo = foo
        self.bar = bar
        self.choo = choo

    def doIt(self):
        return self.foo + self.bar


makeFooLookup = {
    "first":  ("eenie", "meenie", "miney"),
    "second": ("teeny", "toonie", "tiny"),
    "third":  ("biggie", "baggie", "boogie")
}
def makeFoo(label, lookup=makeFooLookup):
    return Foobar(*lookup[label])
</snippet></ROW><ROW><id>4777926</id><snippet>urlencode</snippet></ROW><ROW><id>4777926</id><snippet>query = urllib.urlencode({'q': u"München".encode('UTF-8')})</snippet></ROW><ROW><id>4777926</id><snippet>q=M%C3%BCnchen</snippet></ROW><ROW><id>4778034</id><snippet>long</snippet></ROW><ROW><id>4778034</id><snippet>float</snippet></ROW><ROW><id>4778034</id><snippet>long</snippet></ROW><ROW><id>4778034</id><snippet>int</snippet></ROW><ROW><id>4778034</id><snippet>long(float('234.89'))</snippet></ROW><ROW><id>4778034</id><snippet>int(float('234.89'))</snippet></ROW><ROW><id>4778034</id><snippet>int</snippet></ROW><ROW><id>4778095</id><snippet>user_birthday</snippet></ROW><ROW><id>4778095</id><snippet>scope</snippet></ROW><ROW><id>4778095</id><snippet>https://graph.facebook.com/oauth/authorize?
 client_id=YOUR_APP_ID&amp;redirect_uri=YOUR_URL&amp;scope=user_birthday
</snippet></ROW><ROW><id>4778095</id><snippet>profile = graph.get_object("me")
gender = profile["gender"]
dateofbirth = profile["birthday"]
</snippet></ROW><ROW><id>4778255</id><snippet>fab hello &gt; output.txt 2&gt;&amp;1
</snippet></ROW><ROW><id>4778255</id><snippet>from fabric.contrib.console import confirm
def hello():
    ...
    confirm("Would you like to exit?")
</snippet></ROW><ROW><id>4778773</id><snippet>f.seek(0)</snippet></ROW><ROW><id>4778773</id><snippet>f.truncate()</snippet></ROW><ROW><id>4778773</id><snippet>fpath = os.path.join(thisdir, filename)
with open(fpath, 'r+') as f:
    lines = f.readlines()
    f.seek(0)
    f.truncate()
    for line in lines:
        if '&lt;a href="' in line:
            for test in filelist:
                pathmatch = file_match(line, test)
                    if pathmatch is not None: 
                        repstring = filelist[test] + pathmatch
                        line = line.replace(test, repstring)
        f.write(line)
</snippet></ROW><ROW><id>4779215</id><snippet>return next(account for account in self.accounts if account.type == 'equity')
</snippet></ROW><ROW><id>4779215</id><snippet>return (account for account in self.accounts if account.type == 'equity').next()
</snippet></ROW><ROW><id>4779481</id><snippet>arcpy.AddJoin_management("regionsshape","NAME","region_table","NAME")
</snippet></ROW><ROW><id>4779481</id><snippet>rows = arcpy.SearchCursor("region_table")
  for row in rows:
     arcpy.SelectLayerByAttribute_management("regionsshape","NEW_SELECTION","FEATURE_NAME='" + row.getValue("NAME") + "'")
</snippet></ROW><ROW><id>4779481</id><snippet>arcpy.MakeFeatureLayer_management("regions",row.getValue("id"))  
  arcpy.SaveToLayerFile_management(row.getValue("id"),"C:/temp/"+row.getValue("id")e+".lyr","ABSOLUTE")
</snippet></ROW><ROW><id>4779500</id><snippet>addLayer = arcpy.mapping.Layer(r"C:/example.lyr")
</snippet></ROW><ROW><id>4779500</id><snippet>arcpy.Delete_management(layername)
</snippet></ROW><ROW><id>4779680</id><snippet>&gt;&gt;&gt; class MyStr(str):pass
... 
&gt;&gt;&gt; mydict = dict()
&gt;&gt;&gt; mydict['thiskey'] = MyStr('myvalue')
&gt;&gt;&gt; mydict['thiskey'].tag = 1
</snippet></ROW><ROW><id>4779913</id><snippet>sets</snippet></ROW><ROW><id>4779913</id><snippet>set</snippet></ROW><ROW><id>4779989</id><snippet>return HttpResponse(....)
</snippet></ROW><ROW><id>4779989</id><snippet>if request.is_ajax():
    return json_response
else:
    return HttpResponse(....)
</snippet></ROW><ROW><id>4779989</id><snippet>if request.is_ajax():
    return json_response
else:
    return HttpResponseForbidden('Only AJAX please!')
</snippet></ROW><ROW><id>4780076</id><snippet>import MySQLdb.cursors

DATABASE= MySQLdb.connect(host='localhost', user='username', passwd='password', db='databasename', cursorclass=MySQLdb.cursors.DictCursor)
</snippet></ROW><ROW><id>4780104</id><snippet>r</snippet></ROW><ROW><id>4780104</id><snippet>'\n'</snippet></ROW><ROW><id>4780104</id><snippet>r'\n'</snippet></ROW><ROW><id>4780104</id><snippet>\</snippet></ROW><ROW><id>4780104</id><snippet>n</snippet></ROW><ROW><id>4780104</id><snippet>'r'</snippet></ROW><ROW><id>4780104</id><snippet>'R'</snippet></ROW><ROW><id>4780104</id><snippet>r"\n"</snippet></ROW><ROW><id>4780104</id><snippet>'n'</snippet></ROW><ROW><id>4780104</id><snippet>r"\""</snippet></ROW><ROW><id>4780104</id><snippet>r"\"</snippet></ROW><ROW><id>4780484</id><snippet>&gt;&gt;&gt; os.system("/bin/ls")
api-manual.pdf  C++  GUI  Java  README
</snippet></ROW><ROW><id>4780484</id><snippet>&gt;&gt;&gt; f=os.popen("/bin/ls")
&gt;&gt;&gt; f.read()
'api-manual.pdf\nC++\nGUI\nJava\nREADME\n'
&gt;&gt;&gt; f.close()
</snippet></ROW><ROW><id>4780809</id><snippet>self</snippet></ROW><ROW><id>4780809</id><snippet>def method(self, name='Thomas', age=27):
  self.submethod(name, age)
</snippet></ROW><ROW><id>4780809</id><snippet>def method(self, name='Thomas', age=27):
  the_age = age
  self.submethod(name, age=the_age)
</snippet></ROW><ROW><id>4780809</id><snippet>self</snippet></ROW><ROW><id>4780809</id><snippet>def method(self, name='Thomas', age=27):
  self.submethod(name, age=age)
</snippet></ROW><ROW><id>4780929</id><snippet>import numpy as np

grid = np.array([[1, 2, 3],
                 [4, 5, 6],
                 [7, 8, 9]])

grid[0,:]
# array([1, 2, 3])

grid[:,0]
# array([1, 4, 7])
</snippet></ROW><ROW><id>4781007</id><snippet>for i in xrange(0x80, 0xFF):
    print unichr(i)
</snippet></ROW><ROW><id>4781154</id><snippet>$ ./configure --prefix = /opt/python27
$ make
$ sudo make install
</snippet></ROW><ROW><id>4781934</id><snippet>if notprime==1:</snippet></ROW><ROW><id>4781934</id><snippet>continue</snippet></ROW><ROW><id>4782085</id><snippet>safe</snippet></ROW><ROW><id>4782230</id><snippet>re.U</snippet></ROW><ROW><id>4782230</id><snippet>print(ER.sub('.', u'Maçã'))
</snippet></ROW><ROW><id>4782305</id><snippet>reset()</snippet></ROW><ROW><id>4782305</id><snippet>def reset(self):
    self.x = []
</snippet></ROW><ROW><id>4782305</id><snippet>self.x</snippet></ROW><ROW><id>4782305</id><snippet>self.x</snippet></ROW><ROW><id>4782305</id><snippet>b._x</snippet></ROW><ROW><id>4782305</id><snippet>def reset(self):
    del self.x[:]
</snippet></ROW><ROW><id>4782649</id><snippet>foo = "hello"</snippet></ROW><ROW><id>4782649</id><snippet>"hello"</snippet></ROW><ROW><id>4782649</id><snippet>"hello</snippet></ROW><ROW><id>4782649</id><snippet>eval</snippet></ROW><ROW><id>4782649</id><snippet>eval( "2+2" )</snippet></ROW><ROW><id>4782649</id><snippet>"2+2"</snippet></ROW><ROW><id>4782649</id><snippet>eval(&lt;string&gt;)</snippet></ROW><ROW><id>4783307</id><snippet>.search</snippet></ROW><ROW><id>4783307</id><snippet>\d*</snippet></ROW><ROW><id>4783307</id><snippet>''</snippet></ROW><ROW><id>4783307</id><snippet>(\d+)</snippet></ROW><ROW><id>4783307</id><snippet>1</snippet></ROW><ROW><id>4783307</id><snippet>1234</snippet></ROW><ROW><id>4783424</id><snippet>plink = link[-3:]
</snippet></ROW><ROW><id>4783424</id><snippet>link = line.split('.')
if len(link) &gt; 3 and link[-1].isalpha():
    plink = link[-3:]
</snippet></ROW><ROW><id>4783440</id><snippet>#!/usr/bin/env python
import os
from   select import poll, POLLIN

r_fd, w_fd = os.pipe()

p = poll()
p.register(r_fd, POLLIN)

os.write(w_fd, 'X') # Put something in the pipe so p.poll() will return

while True:
    events = p.poll(100)
    for e in events:
        print e
        os.read(r_fd, 1)
</snippet></ROW><ROW><id>4783948</id><snippet>fname = "feed.txt"

num_lines = 0
num_words = 0
num_chars = 0

with open(fname, 'r') as f:
    for line in f:
        words = line.split()

        num_lines += 1
        num_words += len(words)
        num_chars += len(line)
</snippet></ROW><ROW><id>4783948</id><snippet>fname = "feed.txt"
fname = open('feed.txt', 'r')
</snippet></ROW><ROW><id>4783948</id><snippet>fname</snippet></ROW><ROW><id>4783948</id><snippet>for line in feed:
    lines = line.split('\n')
</snippet></ROW><ROW><id>4783948</id><snippet>line</snippet></ROW><ROW><id>4783948</id><snippet>split('\n')</snippet></ROW><ROW><id>4784085</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>4784123</id><snippet>apt-get install python-tk</snippet></ROW><ROW><id>4784268</id><snippet>age = raw_input("How old are you?")
</snippet></ROW><ROW><id>4784487</id><snippet>THRESH_BINARY_INV</snippet></ROW><ROW><id>4784642</id><snippet>def some_func( x ):
    assert isinstance(x, int)
</snippet></ROW><ROW><id>4784642</id><snippet>assert instance( x, (int, long, float) )
</snippet></ROW><ROW><id>4784642</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>4784642</id><snippet>fractions.Rational</snippet></ROW><ROW><id>4784642</id><snippet>TypeError</snippet></ROW><ROW><id>4784788</id><snippet>with open("filename", "a") as f:
     f.write("Next line\n")
</snippet></ROW><ROW><id>4784788</id><snippet>"w"</snippet></ROW><ROW><id>4784788</id><snippet>open()</snippet></ROW><ROW><id>4784936</id><snippet>class Car( models.Model ):
    # model stuff here
    class Meta:
        permissions = ( 
            ( "read_car", "Can read Car" ),
        )
</snippet></ROW><ROW><id>4784936</id><snippet>obj.has_perm( 'drivers.read_car' )
</snippet></ROW><ROW><id>4784936</id><snippet>def has_model_permissions( entity, model, perms, app ):
    for p in perms:
        if not entity.has_perm( "%s.%s_%s" % ( app, p, model.__name__ ) ):
            return False
        return True
</snippet></ROW><ROW><id>4784936</id><snippet>result = has_model_permissions( myuser, mycar, ['read'], 'drivers' )
</snippet></ROW><ROW><id>4785003</id><snippet>PATH</snippet></ROW><ROW><id>4785003</id><snippet>$ export PATH=opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin:/opt/local/bin:/opt/local/sbin:$PATH
</snippet></ROW><ROW><id>4785003</id><snippet>python setup.py ...</snippet></ROW><ROW><id>4785003</id><snippet> $ sudo /opt/local/bin/python2.6 setup.py ...
</snippet></ROW><ROW><id>4785003</id><snippet>easy_install</snippet></ROW><ROW><id>4785003</id><snippet>easy_install</snippet></ROW><ROW><id>4785003</id><snippet> $ sudo port install py26-distribute  # setuptools replacement, provides easy_install
 $ sudo /opt/local/bin/easy_install-2.6 ...
</snippet></ROW><ROW><id>4785110</id><snippet>print line
</snippet></ROW><ROW><id>4785110</id><snippet>list</snippet></ROW><ROW><id>4785110</id><snippet>for ele in line:
    print ele
</snippet></ROW><ROW><id>4785306</id><snippet>searchfile = open("file.txt", "r")
for line in searchfile:
    if "searchphrase" in line: print line
searchfile.close()
</snippet></ROW><ROW><id>4785306</id><snippet>f = open("file.txt", "r")
searchlines = f.readlines()
f.close()
for i, line in enumerate(searchlines):
    if "searchphrase" in line: 
        for l in searchlines[i:i+3]: print l,
        print
</snippet></ROW><ROW><id>4785306</id><snippet>print l,</snippet></ROW><ROW><id>4785306</id><snippet>with open("file.txt", "r") as f:
    searchlines = f.readlines()
for i, line in enumerate(searchlines):
    if "searchphrase" in line: 
        for l in searchlines[i:i+3]: print l,
        print
</snippet></ROW><ROW><id>4785428</id><snippet>s = set(L1)
new_list = [a for a in L2 if any(b in s for b in a)]
</snippet></ROW><ROW><id>4785506</id><snippet>&lt;your openssl dir&gt;/include</snippet></ROW><ROW><id>4785506</id><snippet>include/</snippet></ROW><ROW><id>4785506</id><snippet>inc32/</snippet></ROW><ROW><id>4785506</id><snippet>opensslv.h</snippet></ROW><ROW><id>4785530</id><snippet>    import ldap
    l = ldap.initialize('ldap://ldapserver')
    username = "uid=%s,ou=People,dc=mydotcom,dc=com" % username
    password = "my password"
    try:
      l.protocol_version = ldap.VERSION3
      l.simple_bind_s(username, password)
      valid = True
    except Exception, error:
      print error
</snippet></ROW><ROW><id>4785709</id><snippet>import sys
with open('file.txt') as f:
  for line in f:
    if '1947' in line: # or some complex regular expressions test
      sys.stdout.write(line)
</snippet></ROW><ROW><id>4785709</id><snippet>for</snippet></ROW><ROW><id>4785709</id><snippet>with</snippet></ROW><ROW><id>4785766</id><snippet>def getException():
    return sys.exc_info()

def metaraise(exc_info):
    raise exc_info[0], exc_info[1], exc_info[2]

try: 3/0
except:
    e = getException()
    metaraise(e)
</snippet></ROW><ROW><id>4786120</id><snippet>import inspect, keyword, pprint, sys, tokenize

def value_in_frame(name, frame):
    try:
        return frame.f_locals[name]
    except KeyError:
        try:
            return frame.f_globals[name]
        except KeyError:
            raise ValueError("Couldn't find value for %s" % name)

def validate(expr, exc_class=AssertionError):
    """Evaluate `expr` in the caller's frame, raise `exc_class` if false."""
    frame = inspect.stack()[1][0]
    val = eval(expr, frame.f_globals, frame.f_locals)
    if not val:
        rl = iter([expr]).next
        for typ, tok, _, _, _ in tokenize.generate_tokens(rl):
            if typ == tokenize.NAME and not keyword.iskeyword(tok):
                try:
                    val = value_in_frame(tok, frame)
                except ValueError:
                    val = '???'
                else:
                    val = repr(val)
                print "  %s: %s" % (tok, val)
        raise exc_class("Failed to validate: %s" % expr)

if __name__ == '__main__':
    a = b = 3
    validate("a + b == 5")
</snippet></ROW><ROW><id>4786151</id><snippet>(r'profile/$', login_required(profile,'student')),
(r'editprofile/$', login_required(editprofile,'student')),
</snippet></ROW><ROW><id>4786151</id><snippet>http://your-site/student/editprofile</snippet></ROW><ROW><id>4786151</id><snippet>(r'^profile/$', login_required(profile,'student')),
(r'^editprofile/$', login_required(editprofile,'student')),
</snippet></ROW><ROW><id>4786535</id><snippet>cherrypy.tree</snippet></ROW><ROW><id>4786535</id><snippet>cherrypy.tree.mount(...)
cherrypy.tree.mount(...)
cherrypy.tree.mount(...)
application = cherrypy.tree
</snippet></ROW><ROW><id>4786606</id><snippet>request.GET['my_options']</snippet></ROW><ROW><id>4786606</id><snippet>request.POST['my_options']</snippet></ROW><ROW><id>4786606</id><snippet>"1"</snippet></ROW><ROW><id>4786606</id><snippet>"2"</snippet></ROW><ROW><id>4786606</id><snippet>"&lt;script&gt;alert('I hacked you!')&lt;/script&gt;"</snippet></ROW><ROW><id>4786785</id><snippet>split()</snippet></ROW><ROW><id>4786785</id><snippet>&gt;&gt;&gt; s='    1947q2        -0.6'
&gt;&gt;&gt; s.split()
['1947q2', '-0.6']
</snippet></ROW><ROW><id>4786848</id><snippet>print dir(user)
[..., 'thing_set', ...]

print dir(user.thing_set)
[..., '__iter__', ... , 'fetch', ...]
</snippet></ROW><ROW><id>4787661</id><snippet>("Monday" or "Wednesday")</snippet></ROW><ROW><id>4787661</id><snippet>"Monday"</snippet></ROW><ROW><id>4787661</id><snippet>or</snippet></ROW><ROW><id>4787661</id><snippet>or</snippet></ROW><ROW><id>4787661</id><snippet>True</snippet></ROW><ROW><id>4787661</id><snippet>"Monday"</snippet></ROW><ROW><id>4787661</id><snippet>"Monday"</snippet></ROW><ROW><id>4787661</id><snippet>if dayOfWeek in ("Monday", "Wednesday"):
    print("Poetry: 6-7:15 in Chem 131")
</snippet></ROW><ROW><id>4787764</id><snippet>next(reader)</snippet></ROW><ROW><id>4787804</id><snippet>for c in candidates:
    modname = os.path.splitext(c)[0]
    try:
        module=__import__(modname)   #&lt;-- You can get the module this way
    except (ImportError,NotImplementedError):
        continue
    for cls in dir(module):          #&lt;-- Loop over all objects in the module's namespace
        cls=getattr(module,cls)
        if (inspect.isclass(cls)                # Make sure it is a class 
            and inspect.getmodule(cls)==module  # Make sure it was defined in module, not just imported
            and issubclass(cls,base)):          # Make sure it is a subclass of base
            # print('found in {f}: {c}'.format(f=module.__name__,c=cls))
            classList.append(cls)
</snippet></ROW><ROW><id>4787804</id><snippet>import sys
import inspect
import os

class PluginBase(object): pass

def search(base):
    for root, dirs, files in os.walk('.'):
        candidates = [fname for fname in files if fname.endswith('.py') 
                      and not fname.startswith('__')]
        classList=[]
        if candidates:
            for c in candidates:
                modname = os.path.splitext(c)[0]
                try:
                    module=__import__(modname)
                except (ImportError,NotImplementedError):
                    continue
                for cls in dir(module):
                    cls=getattr(module,cls)
                    if (inspect.isclass(cls)
                        and inspect.getmodule(cls)==module
                        and issubclass(cls,base)):
                        # print('found in {f}: {c}'.format(f=module.__name__,c=cls))
                        classList.append(cls)
        print(classList)

search(PluginBase)
</snippet></ROW><ROW><id>4787935</id><snippet>grid</snippet></ROW><ROW><id>4787935</id><snippet>pack</snippet></ROW><ROW><id>4787935</id><snippet>in_</snippet></ROW><ROW><id>4787935</id><snippet>import Tkinter as tk
import random

class App(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        size = 40
        menubar = tk.Menu(self)
        menubar.add_cascade(label="Game")
        menubar.add_cascade(label="Options")
        menubar.add_cascade(label="Help")
        chessboard = tk.Canvas(width=8*size, height=8*size, borderwidth = 0,
                               highlightthickness=0)
        statusbar = tk.Label(self, borderwidth=1, relief="sunken")
        right_panel = tk.Frame(self, borderwidth = 1, relief="sunken")
        scrollbar = tk.Scrollbar(orient="vertical", borderwidth=1)
        # N.B. height is irrelevant; it will be as high as it needs to be
        text = tk.Text(background="white",width=40, height=1, borderwidth=0, yscrollcommand=scrollbar.set)
        scrollbar.config(command=text.yview)

        toolbar = tk.Frame(self)
        for i in range(10):
            b = tk.Button(self, text="B%s" % i, borderwidth=1)
            b.pack(in_=toolbar, side="left")

        self.config(menu=menubar)
        statusbar.pack(side="bottom", fill="x")
        chessboard.pack(side="left", fill="both", expand=False)
        toolbar.grid(in_=right_panel, row=0, column=0, sticky="ew")
        right_panel.pack(side="right", fill="both", expand=True)
        text.grid(in_=right_panel, row=1, column=0, sticky="nsew")
        scrollbar.grid(in_=right_panel, row=1, column=1, sticky="ns")
        right_panel.grid_rowconfigure(1, weight=1)
        right_panel.grid_columnconfigure(0, weight=1)

if __name__ == "__main__":
    app = App()
    app.mainloop()
</snippet></ROW><ROW><id>4788165</id><snippet>[item.strip() for item in mystring.split(',') if len(item.split()) &lt; 2]
</snippet></ROW><ROW><id>4788297</id><snippet># php -r 'echo utf8_decode("test \xc3\xb6");'
test ö
</snippet></ROW><ROW><id>4788426</id><snippet>class MyForm(forms.Form):
    CHOICES = (('Option 1', 'Option 1'),('Option 2', 'Option 2'),)
    field = forms.ChoiceField(choices=CHOICES)

print MyForm().as_p()

# out: &lt;p&gt;&lt;label for="id_field"&gt;Field:&lt;/label&gt; &lt;select name="field" id="id_field"&gt;\n&lt;option value="Option 1"&gt;Option 1&lt;/option&gt;\n&lt;option value="Option 2"&gt;Option 2&lt;/option&gt;\n&lt;/select&gt;&lt;/p&gt;
</snippet></ROW><ROW><id>4788458</id><snippet>sum(float(x) for x in my_list[0][1:13])
</snippet></ROW><ROW><id>4788459</id><snippet>__init__</snippet></ROW><ROW><id>4788497</id><snippet>%file</snippet></ROW><ROW><id>4788566</id><snippet>time.gmtime()</snippet></ROW><ROW><id>4788566</id><snippet>time.localtime()</snippet></ROW><ROW><id>4788566</id><snippet>time</snippet></ROW><ROW><id>4788566</id><snippet>time.time()</snippet></ROW><ROW><id>4788566</id><snippet>struct_time</snippet></ROW><ROW><id>4788566</id><snippet>time.localtime()</snippet></ROW><ROW><id>4788566</id><snippet>&gt;&gt;&gt; print time.strftime("%a, %d %b %Y %I:%M:%S %p %Z", time.localtime(10.5))
Thu, 01 Jan 1970 02:00:10 AM EET
</snippet></ROW><ROW><id>4788608</id><snippet>self.handle_starttag(tag, attrs)
</snippet></ROW><ROW><id>4788608</id><snippet>HTMLParser.py</snippet></ROW><ROW><id>4788608</id><snippet>self.foo = 'err'
</snippet></ROW><ROW><id>4788608</id><snippet>self.foo = 'err'
self.feed(data)
</snippet></ROW><ROW><id>4788630</id><snippet>&gt;&gt;&gt; import pyparsing
&gt;&gt;&gt; ing_ending = pyparsing.Regex(r'(?i)\b[a-z]+ing\b')
&gt;&gt;&gt; ing_ending.parseString("jumping")
(['jumping'], {})
</snippet></ROW><ROW><id>4788757</id><snippet>data</snippet></ROW><ROW><id>4788757</id><snippet>readUTF()</snippet></ROW><ROW><id>4788757</id><snippet>encoded = data.encode('UTF-8')
count = len(encoded)
msb, lsb = divmod(count, 256) # split to two bytes
outfile.write(chr(msb))
outfile.write(chr(lsb))
outfile.write(encoded)
</snippet></ROW><ROW><id>4788757</id><snippet>outfile</snippet></ROW><ROW><id>4788757</id><snippet>wb</snippet></ROW><ROW><id>4788757</id><snippet>DataInput</snippet></ROW><ROW><id>4788847</id><snippet>Project</snippet></ROW><ROW><id>4788847</id><snippet>self.video.open("w")</snippet></ROW><ROW><id>4788847</id><snippet>with open(video_path ,"rb") as source:
    self.video.open("wb")
    bytes= source.read(4096)
    if bytes: 
        self.video.write( bytes )
        bytes= source.read(4096)
</snippet></ROW><ROW><id>4788958</id><snippet>   &gt;&gt;&gt; xml_in = """
    ... &lt;A value="?"&gt;
    ...     &lt;B value="?"&gt;
    ...         &lt;C value="10"/&gt;
    ...         &lt;C value ="20"/&gt;
    ...     &lt;/B&gt;
    ...     &lt;B value="?"&gt;
    ...         &lt;C value = "5" /&gt;
    ...         &lt;C value = "10" /&gt;
    ...     &lt;/B&gt;
    ... &lt;/A&gt;
    ... """
    &gt;&gt;&gt; import xml.etree.ElementTree as et
    &gt;&gt;&gt; def updated_value(elem):
    ...     value = elem.get('value')
    ...     if value != '?': return int(value)
    ...     total = sum(updated_value(child) for child in elem)
    ...     elem.set('value', str(total))
    ...     return total
    ...
    &gt;&gt;&gt; root = et.fromstring(xml_in)
    &gt;&gt;&gt; print("grand total is", updated_value(root))
    grand total is 45
    &gt;&gt;&gt; import sys; nbytes = sys.stdout.write(et.tostring(root) + '\n')
    &lt;A value="45"&gt;
        &lt;B value="30"&gt;
            &lt;C value="10" /&gt;
            &lt;C value="20" /&gt;
        &lt;/B&gt;
        &lt;B value="15"&gt;
            &lt;C value="5" /&gt;
            &lt;C value="10" /&gt;
        &lt;/B&gt;
    &lt;/A&gt;
    &gt;&gt;&gt;
</snippet></ROW><ROW><id>4788973</id><snippet>/q/111/hello-world</snippet></ROW><ROW><id>4788973</id><snippet>/q/111/foobar</snippet></ROW><ROW><id>4788973</id><snippet>/q/111/foobar</snippet></ROW><ROW><id>4788973</id><snippet>slug</snippet></ROW><ROW><id>4788973</id><snippet># models
class MyModel(models.Model):
    # ...
    non_unique_slug = models.SlugField()

    def get_absolute_url(self):
        return "/questions/%s/%s" % (self.id, self.non_unique_slug)


# urls
    r'^questions/(?P&lt;id&gt;\d+)/(?P&lt;slug&gt;[\w-]+)/$' 

# views
def my_view(request, id, slug):
    page = Page.objects.get(id=id)
    if not slug == page.slug:
        return http.HttpResponsePermanentRedirect(page.get_absolute_url())

    # render page
    return direct_to_template(request, "foobar.html", {'page': page})
</snippet></ROW><ROW><id>4789007</id><snippet>FB.init({ appId: yourAppId });

FB.login(function (response) {
    if (response.session) {
        var authToken = response.session.access_token;
    } else {
        // do stuff if they are not logged in
    }
}, { perms: 'email,publish_stream' }); // list of extended permissions you require
</snippet></ROW><ROW><id>4789038</id><snippet>groups</snippet></ROW><ROW><id>4789038</id><snippet>User</snippet></ROW><ROW><id>4789038</id><snippet>&gt;&gt;&gt; from django.contrib.auth.models import User, Group
&gt;&gt;&gt; group = Group(name="Editor")
&gt;&gt;&gt; group.save()                  # save this new group for this example
&gt;&gt;&gt; user = User.objects.get(pk=1) # assuming, there is one initial user 
&gt;&gt;&gt; user.groups.add(group)        # user is now in the "Editor" group
&gt;&gt;&gt; user.groups.all()
[&lt;Group: Editor&gt;]
</snippet></ROW><ROW><id>4789162</id><snippet> line.replace('&lt;a href="' + test_str + '"&gt;', '&lt;a href="' + re_string + '"&gt;')
</snippet></ROW><ROW><id>4789163</id><snippet>#!/usr/bin/env python

from xml.etree.ElementTree import fromstring, ElementTree, Element

def validate_node(elem):
    for child in elem.getchildren():
        validate_node(child)
        value = child.attrib.get('value', '')
        if not value.isdigit() or int(value) &lt; 5:
            child.append(Element('D', {'name': 'error'}))

if __name__ == '__main__':
    import sys
    xml = sys.stdin.read() # read XML from standard input
    root = fromstring(xml) # parse into XML element tree
    validate_node(root)
    ElementTree(root).write(sys.stdout, encoding='utf-8')
            # write resulting XML to standard output
</snippet></ROW><ROW><id>4789163</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;A value="45"&gt;
    &lt;B value="30"&gt;
        &lt;C value="1"/&gt;
        &lt;C value="20"/&gt;
    &lt;/B&gt;
    &lt;B value="15"&gt;
        &lt;C value="5" /&gt;
        &lt;C value="10" /&gt;
        &lt;C value="foo" /&gt;
    &lt;/B&gt;
&lt;/A&gt;
</snippet></ROW><ROW><id>4789163</id><snippet>&lt;A value="45"&gt;
    &lt;B value="30"&gt;
        &lt;C value="1"&gt;&lt;D name="error" /&gt;&lt;/C&gt;
        &lt;C value="20" /&gt;
    &lt;/B&gt;
    &lt;B value="15"&gt;
        &lt;C value="5" /&gt;
        &lt;C value="10" /&gt;
        &lt;C value="foo"&gt;&lt;D name="error" /&gt;&lt;/C&gt;
    &lt;/B&gt;
&lt;/A&gt;
</snippet></ROW><ROW><id>4789396</id><snippet>init.d</snippet></ROW><ROW><id>4789396</id><snippet>/etc/passwd</snippet></ROW><ROW><id>4789462</id><snippet>some_num</snippet></ROW><ROW><id>4789462</id><snippet>from gaesessions import get_current_session
session = get_current_session()
if session.is_active():
    # set session['some_num'] to whatever was in there or three, otherwise
    session['some_num'] = session.get('some_num', 3) 
...

# later, session['some_num'] should exist and be equal to 3 ...
assert session['some_num'] == 3

# ... and is actually 'settable'
session['some_num'] = 4
</snippet></ROW><ROW><id>4789617</id><snippet>firstpart, secondpart = string[:len(string)/2], string[len(string)/2:]
</snippet></ROW><ROW><id>4789634</id><snippet>open()</snippet></ROW><ROW><id>4789634</id><snippet>...
xmlFile = open("MyFile.xml", "rt")
...
</snippet></ROW><ROW><id>4789680</id><snippet>import ipibot
</snippet></ROW><ROW><id>4789680</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4789680</id><snippet>ipibot.ipibot()</snippet></ROW><ROW><id>4789680</id><snippet>ipibot()</snippet></ROW><ROW><id>4789814</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class TestTreeWidget(QtGui.QTreeWidget):
    def __init__(self, parent = None):
        super(TestTreeWidget, self).__init__(parent)
        self.setDragEnabled(True)
        self.setAcceptDrops(True)

    def startDrag(self, dropAction):
        # create mime data object
        mime = QtCore.QMimeData()
        mime.setData('application/x-item', '???')
        # start drag 
        drag = QtGui.QDrag(self)
        drag.setMimeData(mime)        
        drag.start(QtCore.Qt.CopyAction | QtCore.Qt.CopyAction)

    def dragMoveEvent(self, event):
        if event.mimeData().hasFormat("application/x-item"):
            event.setDropAction(QtCore.Qt.CopyAction)
            event.accept()
        else:
            event.ignore()

    def dragEnterEvent(self, event):
        if (event.mimeData().hasFormat('application/x-item')):
            event.accept()
        else:
            event.ignore()    

    def dropEvent(self, event): 
        if (event.mimeData().hasFormat('application/x-item')):
            event.acceptProposedAction()
            data = QtCore.QString(event.mimeData().data("application/x-item"))
            item = QtGui.QTreeWidgetItem(self)
            item.setText(0, data)
            self.addTopLevelItem(item)
        else:
            event.ignore()    

class MainForm(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MainForm, self).__init__(parent)

        self.view = TestTreeWidget(self)
        self.view.setColumnCount(1)
        item0 = QtGui.QTreeWidgetItem(self.view)
        item0.setText(0, 'item0')
        item1 = QtGui.QTreeWidgetItem(self.view)
        item1.setText(0, 'item1')
        self.view.addTopLevelItems([item0, item1])

        self.setCentralWidget(self.view)

def main():
    app = QtGui.QApplication(sys.argv)
    form = MainForm()
    form.show()
    app.exec_()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4790609</id><snippet>from django.contrib.auth.views import login
from &lt;&lt;wherever&gt;&gt; import secure_required


urlpatterns = patterns('',
    (r'^login/?$',secure_required(login),{'template_name':'login.html', 'authentication_form':CustomAuthenticationForm}),
)
</snippet></ROW><ROW><id>4790654</id><snippet>from HTMLParser import HTMLParser
import urllib

class search_youtube(HTMLParser):

    def __init__(self, search_terms):
        HTMLParser.__init__(self)
        self.track_ids = []
        for search in search_terms:
            self.__in_result = False
            search = urllib.quote_plus(search)
            query = 'http://youtube.com/results?search_query='
            connection = urllib.urlopen(query + search)
            encoding = connection.headers.getparam('charset')
            page = connection.read().decode(encoding)
            self.feed(page)
            print 'success'

searches = ['telepopmusik breathe']
results = search_youtube(searches)
print results.track_ids
</snippet></ROW><ROW><id>4790962</id><snippet>(x0, y0, x1, y1)</snippet></ROW><ROW><id>4790962</id><snippet>(x0, y0)</snippet></ROW><ROW><id>4790962</id><snippet>(x1, y1)</snippet></ROW><ROW><id>4790962</id><snippet>eX</snippet></ROW><ROW><id>4790962</id><snippet>eY</snippet></ROW><ROW><id>4790962</id><snippet>from PIL import Image, ImageDraw

im = Image.open("1.jpg")

x, y =  im.size
eX, eY = 30, 60 #Size of Bounding Box for ellipse

bbox =  (x/2 - eX/2, y/2 - eY/2, x/2 + eX/2, y/2 + eY/2)
draw = ImageDraw.Draw(im)
draw.ellipse(bbox, fill=128)
del draw

im.save("output.png")
im.show()
</snippet></ROW><ROW><id>4790962</id><snippet>1.jpg</snippet></ROW><ROW><id>4790962</id><snippet>output.png</snippet></ROW><ROW><id>4791169</id><snippet>&gt;&gt;&gt; string = "testing\n"
&gt;&gt;&gt; string
'testing\n'
&gt;&gt;&gt; string = string[:-1]
&gt;&gt;&gt; string
'testing'
</snippet></ROW><ROW><id>4791169</id><snippet>:</snippet></ROW><ROW><id>4791169</id><snippet>aqua:test$ cat wordlist.txt 
Testing

This

Wordlist

With

Returns

Between

Lines
</snippet></ROW><ROW><id>4791169</id><snippet># script    
rf = open("wordlist.txt")
wf = open("newwordlist.txt","w")
for line in rf:
    newline = line.rstrip('\r\n')
    wf.write(newline)
    wf.write('\n') # last line of script
</snippet></ROW><ROW><id>4791169</id><snippet>aqua:test$ cat newwordlist.txt 
Testing
This
Wordlist
With
Returns
Between
Lines
</snippet></ROW><ROW><id>4791169</id><snippet>TestingThisWordlistWithReturnsBetweenLines
</snippet></ROW><ROW><id>4791272</id><snippet>User-Agent</snippet></ROW><ROW><id>4791272</id><snippet>import urllib2

request = urllib2.Request("http://www.ip-adress.com/ip_tracer/74.82.190.99")
request.add_header("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 5.1; es-ES; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5")

f = urllib2.urlopen(request)
print f.read()
</snippet></ROW><ROW><id>4791321</id><snippet>re.match</snippet></ROW><ROW><id>4791321</id><snippet>False</snippet></ROW><ROW><id>4791321</id><snippet>None</snippet></ROW><ROW><id>4791321</id><snippet>if re.match('^[a-zA-Z0-9 _\-\.]+$', repName):
    print 'ACCEPTED: '+repName
else:
    print 'DECLINE: '+repName
</snippet></ROW><ROW><id>4791583</id><snippet>&gt;&gt;&gt; d = datetime.datetime(2009, 11, 12, 12)
&gt;&gt;&gt; for post in posts.find({"date": {"$lt": d}}).sort("author"):
...   post
...
{u'date': datetime.datetime(2009, 11, 10, 10, 45), u'text': u'and pretty easy too!', u'_id': ObjectId('...'), u'author': u'Eliot', u'title': u'MongoDB is fun'}
{u'date': datetime.datetime(2009, 11, 12, 11, 14), u'text': u'Another post!', u'_id': ObjectId('...'), u'author': u'Mike', u'tags': [u'bulk', u'insert']}
</snippet></ROW><ROW><id>4791612</id><snippet>import os
import signal
import subprocess

# The os.setsid() is passed in the argument preexec_fn so
# it's run after the fork() and before  exec() to run the shell.
pro = subprocess.Popen(cmd, stdout=subprocess.PIPE, 
                       shell=True, preexec_fn=os.setsid) 

os.killpg(pro.pid, signal.SIGTERM)  # Send the signal to all the process groups
</snippet></ROW><ROW><id>4791668</id><snippet>data = [3, 3, 3, 4, 4, 2]
result = []
for entry in set(data):
    result.append((entry, data.count(entry)))
result.sort(key = lambda x: -x[1])
print result

&gt;&gt;[(3, 3), (4, 2), (2, 1)]
</snippet></ROW><ROW><id>4791676</id><snippet>def bases(words):
    base = next(words)
    yield base
    for word in words:
        if word and not word.startswith(base):
            yield word
            base = word


def get_bases(infile, outfile):
    with open(infile) as f_in:
        words = (line.strip() for line in f_in)
        with open(outfile, 'w') as f_out:
            f_out.writelines(word + '\n' for word in bases(words))
</snippet></ROW><ROW><id>4791676</id><snippet>$ time python words.py

real        0m0.233s
user        0m0.180s
sys         0m0.012s
</snippet></ROW><ROW><id>4791820</id><snippet>x=3</snippet></ROW><ROW><id>4791820</id><snippet>def myfunction1(number):
    biglist = [1,2,3,4,5,6,7,8,9]
    biglist = number*biglist
    print biglist
</snippet></ROW><ROW><id>4792208</id><snippet>set format x '%.6f'
</snippet></ROW><ROW><id>4792208</id><snippet>set timefmt "%Y-%m-%d-%H:%M:%.6S"
</snippet></ROW><ROW><id>4792208</id><snippet>%S</snippet></ROW><ROW><id>4792555</id><snippet>randomVariable = raw_input('Enter something: ')
sql = "SELECT name FROM example_table WHERE pid=?"
result = cursor.execute(sql, randomVariable)
print result
</snippet></ROW><ROW><id>4793281</id><snippet>False</snippet></ROW><ROW><id>4793281</id><snippet>for</snippet></ROW><ROW><id>4793281</id><snippet>break</snippet></ROW><ROW><id>4793281</id><snippet>else</snippet></ROW><ROW><id>4793281</id><snippet>primes = set(primes_to_one_million_however_you_want_to_get_them)

def is_circular(prime, primes=primes):
   prime_str = str(prime)
   # With thanks to Sven Marnach's comments
   return all(int(prime_str[i:]+prime_str[:i]) in primes 
              for i in xrange(len(prime_str)))


circular_primes = [p for p in primes if is_circular(p)]
</snippet></ROW><ROW><id>4793281</id><snippet>is_circular</snippet></ROW><ROW><id>4793281</id><snippet>else</snippet></ROW><ROW><id>4793281</id><snippet>circular = []
for p in primes:
   prime_str = str(prime)
   for i in xrange(len(prime_str)):
       if int(prime_str[i:]+prime_str[:i]) not in primes:
            break
   else:
       circular.append(p)
</snippet></ROW><ROW><id>4793680</id><snippet>queue.put(("QUIT", None, None))
</snippet></ROW><ROW><id>4793680</id><snippet>if func == "QUIT":
    return
</snippet></ROW><ROW><id>4793752</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')
datetime.datetime(2011, 1, 23, 0, 0)
</snippet></ROW><ROW><id>4794254</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>4794344</id><snippet>re.compile('name=\w+;size=\d+', re.U)
</snippet></ROW><ROW><id>4794417</id><snippet>import math, time
class PrimeFactor:
    def __init__(self):
        self.fnum = [1,]
        self.elapsedTime = 0
    def getElapsedTime(self):
        return self.elapsedTime
    def getFactors(self):
        return self.fnum
    def isprime(self,number):
        start=time.clock()
        self.fnum = [1,]
        last = int(math.ceil(math.sqrt(number)))
        for p in range(2, last + 1):
            if (number % p) == 0:
                self.fnum.append(p)
                self.fnum.append(number / p)
        # Remove duplicates, sort list
        self.fnum = list(set(self.fnum))
        self.fnum.sort()
        end=time.clock()
        self.elapsedTime = end-start
        return (not len(self.fnum) &gt; 1 )

num =int(raw_input("Enter number: "))
eg=PrimeFactor()

if eg.isprime(num):
    print num, "is a Prime Number", eg.isprime(num)
else:
    print num, "is not a prime number"
    print "Factors", eg.getFactors()
print eg.getElapsedTime()
</snippet></ROW><ROW><id>4794897</id><snippet>L1.sort()
[next(j) for i, j in itertools.groupby(L1, lambda x: x.rsplit(",", 1)[0])]
</snippet></ROW><ROW><id>4794897</id><snippet>L2</snippet></ROW><ROW><id>4794897</id><snippet>item.split(',')[:2]</snippet></ROW><ROW><id>4794897</id><snippet>not in</snippet></ROW><ROW><id>4794897</id><snippet>True</snippet></ROW><ROW><id>4795047</id><snippet>force_utf8 = True</snippet></ROW><ROW><id>4795047</id><snippet>MARCReader</snippet></ROW><ROW><id>4795047</id><snippet>reader = MARCReader(inputFile, to_unicode = True, force_utf8 = True)
</snippet></ROW><ROW><id>4795047</id><snippet>inspect</snippet></ROW><ROW><id>4795047</id><snippet>string.decode("utf-8", "strict")
</snippet></ROW><ROW><id>4795353</id><snippet>% 1</snippet></ROW><ROW><id>4795353</id><snippet>bottom</snippet></ROW><ROW><id>4795353</id><snippet>plt.bar</snippet></ROW><ROW><id>4795353</id><snippet>import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import datetime as dt

# Make a series of events 1 day apart
x = mpl.dates.drange(dt.datetime(2009,10,1), 
                     dt.datetime(2010,1,15), 
                     dt.timedelta(days=1))
# Vary the datetimes so that they occur at random times
# Remember, 1.0 is equivalent to 1 day in this case...
x += np.random.random(x.size)

# We can extract the time by using a modulo 1, and adding an arbitrary base date
times = x % 1 + int(x[0]) # (The int is so the y-axis starts at midnight...)

# I'm just plotting points here, but you could just as easily use a bar.
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot_date(x, times, 'ro')
ax.yaxis_date()
fig.autofmt_xdate()

plt.show()
</snippet></ROW><ROW><id>4795845</id><snippet>import itertools

for items in itertools.izip(deque1, deque2, deque3):
    for item in items:
        some_action(item)

for item in itertools.chain(deque1, deque2, deque3):
    some_action(item)
</snippet></ROW><ROW><id>4795845</id><snippet>deques = [deque1, deque2, deque3]
for item in itertools.chain(*deques):
    some_action(item)
</snippet></ROW><ROW><id>4795845</id><snippet>&gt;&gt;&gt; a = range(5)
&gt;&gt;&gt; b = range(5)
&gt;&gt;&gt; c = range(5)
&gt;&gt;&gt; d = [a, b, c]
&gt;&gt;&gt;
&gt;&gt;&gt; for items in itertools.izip(*d):
...     for item in items:
...         print item,
...
0 0 0 1 1 1 2 2 2 3 3 3 4 4 4
&gt;&gt;&gt;
&gt;&gt;&gt; for item in itertools.chain(*d):
...     print item,
...
0 1 2 3 4 0 1 2 3 4 0 1 2 3 4
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4796176</id><snippet>bisect.bisect()</snippet></ROW><ROW><id>4796176</id><snippet>limits = [0, 2000, 7700]
rates = [0.1, 0.15, 0.2]
index = bisect.bisect(limits, sold) - 1
if index &gt;= 0:
    rate = rates[index]
else:
    # sold is negative
</snippet></ROW><ROW><id>4796176</id><snippet>if sold &gt;= 7700:
    rate = 0.2
elif sold &gt;= 2000:
    rate = 0.15
elif sold &gt;= 0:
    rate = 0.1
else:
    # sold is negative
</snippet></ROW><ROW><id>4796352</id><snippet>import wx

class MyForm(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "Tutorial")

        # Add a panel so it looks the correct on all platforms
        panel = wx.Panel(self, wx.ID_ANY)

        control_panel = wx.Panel(panel)
        control_panel.SetBackgroundColour("Yellow")
        main_panel = wx.Panel(panel)
        main_panel.SetBackgroundColour("Blue")

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(control_panel, 3, wx.EXPAND)
        sizer.Add(main_panel, 1, wx.EXPAND)
        panel.SetSizer(sizer)

# Run the program
if __name__ == "__main__":
    app = wx.PySimpleApp()
    frame = MyForm().Show()
    app.MainLoop()
</snippet></ROW><ROW><id>4796382</id><snippet>boundfield.data = data
boundfield.field.initial = initial

{% for field in form %}
   {% if field.data != field.field.initial %}Not Initial{% endif %}
{% endfor %}
</snippet></ROW><ROW><id>4796704</id><snippet>ModelForm</snippet></ROW><ROW><id>4796704</id><snippet>user</snippet></ROW><ROW><id>4796704</id><snippet>data</snippet></ROW><ROW><id>4796704</id><snippet>user</snippet></ROW><ROW><id>4796704</id><snippet>user</snippet></ROW><ROW><id>4796704</id><snippet>user.first_name</snippet></ROW><ROW><id>4796785</id><snippet>with open(fname) as f:
    next(f)
    for line in f:
        #do something
</snippet></ROW><ROW><id>4797381</id><snippet>takeItem</snippet></ROW><ROW><id>4797381</id><snippet>source_list = new QListWidget();
dest_list = new QListWidget();
new QListWidgetItem(tr("Oak"), source_list);
new QListWidgetItem(tr("Birch"), source_list);
connect(source_list, SIGNAL(clicked(QModelIndex)), this, SLOT(swapEntry(QModelIndex)));


void MyWidget::swapEntry(QModelIndex index)
{
    dest_list-&gt;insertItem(dest_list-&gt;count(), source_list-&gt;takeItem(index.row()));
}
</snippet></ROW><ROW><id>4798122</id><snippet>class StringListProperty(ListProperty):
  def __init__(self, verbose_name=None, default=None, **kwds):
    super(StringListProperty, self).__init__(basestring,
                                             verbose_name=verbose_name,
                                             default=default,
                                             **kwds)
</snippet></ROW><ROW><id>4798227</id><snippet>from BeautifulSoup import BeautifulSoup

pageSource='''...omitted for brevity...'''    

soup = BeautifulSoup(pageSource)
alltables = soup.findAll( "table", {"border":"2", "width":"100%"} )

results=[]
for table in alltables:
    rows = table.findAll('tr')
    lines=[]
    for tr in rows:
        cols = tr.findAll('td')
        for td in cols:
            text=td.renderContents().strip('\n')
            lines.append(text)
    text_table='\n'.join(lines)
    if 'Website' in text_table:
        results.append(text_table) 
print "Number of tables found : " , len(results)
for result in results:
    print(result)
</snippet></ROW><ROW><id>4798227</id><snippet>Number of tables found :  1
Website
Last Visited
Last Loaded
&lt;a href="http://google.com"&gt;&lt;/a&gt;
01/14/2011

stackoverflow.com
01/10/2011

&lt;a href="http://stackoverflow.com"&gt;&lt;/a&gt;
01/10/2011
</snippet></ROW><ROW><id>4798227</id><snippet>td.contents</snippet></ROW><ROW><id>4798227</id><snippet>NavigableStrings</snippet></ROW><ROW><id>4798227</id><snippet>tags</snippet></ROW><ROW><id>4798227</id><snippet>print(td.contents)</snippet></ROW><ROW><id>4798227</id><snippet>['', '&lt;a href="http://stackoverflow.com"&gt;&lt;/a&gt;', '']
</snippet></ROW><ROW><id>4798227</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>4798456</id><snippet>subprocess.Popen(['myscript.sh "var=11; ignore all" /path/to/files'], shell=True, executable="/bin/bash")
</snippet></ROW><ROW><id>4798456</id><snippet>subprocess.Popen(['myscript.sh "var=11; ignore all" %s' % path_to_files], shell=True, executable="/bin/bash")
</snippet></ROW><ROW><id>4798456</id><snippet>subprocess.Popen(["/bin/bash", "myscript.sh", "var=11; ignore all", path_to_files])
</snippet></ROW><ROW><id>4798493</id><snippet>web.HTTPError</snippet></ROW><ROW><id>4798493</id><snippet>web.ctx.status</snippet></ROW><ROW><id>4798493</id><snippet>class MultipleChoices(web.HTTPError):
    def __init__(self, choices):
        status = '300 Multiple Choices'
        headers = {'Content-Type': 'text/html'}
        data = '&lt;h1&gt;Multiple Choices&lt;/h1&gt;\n&lt;ul&gt;\n'
        data += ''.join('&lt;li&gt;&lt;a href="{0}"&gt;{0}&lt;/a&gt;&lt;/li&gt;\n'.format(c)
                        for c in choices)
        data += '&lt;/ul&gt;'
        web.HTTPError.__init__(self, status, headers, data)
</snippet></ROW><ROW><id>4798493</id><snippet>raise MultipleChoices</snippet></ROW><ROW><id>4798493</id><snippet>class MyHandler:
    def GET(self):
        raise MultipleChoices(['http://example.com/', 'http://www.google.com/'])
</snippet></ROW><ROW><id>4798493</id><snippet>web.HTTPError</snippet></ROW><ROW><id>4798648</id><snippet>PYTHONPATH=/path/to/src:/path/to/src/package1
</snippet></ROW><ROW><id>4798648</id><snippet>from package1 import spam
import spam
</snippet></ROW><ROW><id>4798684</id><snippet>LL= [['a', 2, 3, 4, 13], ['b', 6, 7, 8, 13], ['c', 10, 11, 12, 13]]

for row in LL:
    row[-1]= max(row[1: -1])
    row.append(14)
print LL
</snippet></ROW><ROW><id>4798806</id><snippet>profile</snippet></ROW><ROW><id>4798806</id><snippet>from google.appengine.api import images
height = images.Image(image_data=profile.avatar).height
</snippet></ROW><ROW><id>4798806</id><snippet>avatar = db.BlobReferenceProperty()</snippet></ROW><ROW><id>4798806</id><snippet>profile</snippet></ROW><ROW><id>4798806</id><snippet>from google.appengine.api import images
img = images.Image(blob_key=str(profile.avatar.key()))

# we must execute a transform to access the width/height
img.im_feeling_lucky() # do a transform, otherwise GAE complains.

# set quality to 1 so the result will fit in 1MB if the image is huge
img.execute_transforms(output_encoding=images.JPEG,quality=1)

# now you can access img.height and img.width
</snippet></ROW><ROW><id>4799003</id><snippet>[ float(i) * 100 / max(l) for i in l ]
</snippet></ROW><ROW><id>4799003</id><snippet>n / 100 * max(l)
</snippet></ROW><ROW><id>4799230</id><snippet>from HTMLParser import HTMLParser

class MyParser(HTMLParser):
  def __init__(self):
    HTMLParser.__init__(self)
    self.line = ""
    self.in_tr = False
    self.in_table = False

  def handle_starttag(self, tag, attrs):
    if self.in_table and tag == "tr":
      self.line = ""
      self.in_tr = True
    if tag=='a':
     for attr in attrs:
       if attr[0] == 'href':
         self.line += attr[1] + " "

  def handle_endtag(self, tag):
    if tag == 'tr':
      self.in_tr = False
      if len(self.line):
        print self.line
    elif tag == "table":
      self.in_table = False

  def handle_data(self, data):
    if data == "Website":
      self.in_table = 1
    elif self.in_tr:
      data = data.strip()
      if data:
        self.line += data.strip() + " "

if __name__ == '__main__':
  myp = MyParser()
  myp.feed(open('table.html').read())
</snippet></ROW><ROW><id>4799345</id><snippet>/etc/myapp</snippet></ROW><ROW><id>4799345</id><snippet>.bashrc</snippet></ROW><ROW><id>4799345</id><snippet>System</snippet></ROW><ROW><id>4799345</id><snippet>My Documents</snippet></ROW><ROW><id>4799447</id><snippet>&gt;&gt;&gt; import abc
&gt;&gt;&gt; class B(object):
...     __metaclass__ = abc.ABCMeta
...     @abc.abstractmethod
...     def foo(self):
...             print 'In B'
... 
&gt;&gt;&gt; class C(B):
...     def foo(self):
...             super(C, self).foo()
...             print 'In C'
... 
&gt;&gt;&gt; C().foo()
In B
In C
</snippet></ROW><ROW><id>4799517</id><snippet>with open("file.txt") as f:
    for i in range(9):
        f.next()
    print f.readline()
</snippet></ROW><ROW><id>4799661</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>4799661</id><snippet>groupby()</snippet></ROW><ROW><id>4799661</id><snippet>inventory = {
    'item1': {'id': 1, 'template': None, 'height': 80, 'width': 120, 'length': 75, 'weight': 100},
    'item2': {'id': 2, 'template': None, 'height': 30, 'width': 40,  'length': 20, 'weight': 20},
    'item3': {'id': 3, 'template': None, 'height': 80, 'width': 100, 'length': 96, 'weight': 150},
    'item4': {'id': 4, 'template': None, 'height': 30, 'width': 40,  'length': 60, 'weight': 75},
    'item5': {'id': 5, 'template': None, 'height': 80, 'width': 100, 'length': 36, 'weight': 33}
}

import itertools as itools

def print_inventory():
    print 'inventory:'
    for key in sorted(inventory.iterkeys()):
        print '  {}: {}'.format(key, inventory[key])

print "-- BEFORE --"
print_inventory()

THRESHOLD = 2
ALLKEYS = ['template', 'height', 'width', 'length', 'weight']
EXCLUDEDKEYS = ['template', 'length', 'weight']
INCLUDEDKEYS = [key for key in ALLKEYS if key not in EXCLUDEDKEYS]

# determines which keys make up a template
sortby = lambda item, keys=INCLUDEDKEYS: tuple(item[key] for key in keys)

templates = {}
templateID = 0
sortedinventory = sorted(inventory.itervalues(), key=sortby)
for templatetuple, similariter in itools.groupby(sortedinventory, sortby):
    similaritems = list(similariter)
    if len(similaritems) &gt;= THRESHOLD:
        # create and assign a template
        templateID += 1
        templates[templateID] = templatetuple # tuple of values of INCLUDEDKEYS
        for item in similaritems:
            item['template'] = templateID
print
print "-- AFTER --"
print_inventory()
print
print 'templates:', templates
print
</snippet></ROW><ROW><id>4799661</id><snippet>-- BEFORE --
inventory:
  item1: {'weight': 100, 'height': 80, 'width': 120, 'length': 75, 'template': None, 'id': 1}
  item2: {'weight': 20, 'height': 30, 'width': 40, 'length': 20, 'template': None, 'id': 2}
  item3: {'weight': 150, 'height': 80, 'width': 100, 'length': 96, 'template': None, 'id': 3}
  item4: {'weight': 75, 'height': 30, 'width': 40, 'length': 60, 'template': None, 'id': 4}
  item5: {'weight': 33, 'height': 80, 'width': 100, 'length': 36, 'template': None, 'id': 5}

-- AFTER --
inventory:
  item1: {'weight': 100, 'height': 80, 'width': 120, 'length': 75, 'template': None, 'id': 1}
  item2: {'weight': 20, 'height': 30, 'width': 40, 'length': 20, 'template': 1, 'id': 2}
  item3: {'weight': 150, 'height': 80, 'width': 100, 'length': 96, 'template': 2, 'id': 3}
  item4: {'weight': 75, 'height': 30, 'width': 40, 'length': 60, 'template': 1, 'id': 4}
  item5: {'weight': 33, 'height': 80, 'width': 100, 'length': 36, 'template': 2, 'id': 5}

templates: {1: (30, 40), 2: (80, 100)}
</snippet></ROW><ROW><id>4799871</id><snippet>twisted.pair.ethernet</snippet></ROW><ROW><id>4800073</id><snippet>weight</snippet></ROW><ROW><id>4800073</id><snippet>Stop</snippet></ROW><ROW><id>4800073</id><snippet>days_open</snippet></ROW><ROW><id>4800073</id><snippet>Stop.objects.annotate(weight=models.Sum('weekday__weight')).order_by('-weight')
</snippet></ROW><ROW><id>4800073</id><snippet>weight</snippet></ROW><ROW><id>4800073</id><snippet>Weekday</snippet></ROW><ROW><id>4800319</id><snippet>proc update_view {w s data} {
  # store position
  set pos [$s get]
  $w configure -state normal -yscrollcommand {}
  $w delete 1.0 end
  $w insert end $data
  $w configure -state disabled -yscrollcommand [list $s set]
  $s get
  $s set {*}$pos
}
</snippet></ROW><ROW><id>4800319</id><snippet>def update_view(self, data):
    pos = self.myWidgetScrollbar.get()
    self.myWidget.configure(yscrollcommand=None, state=NORMAL)
    self.myWidget.delete(1.0, END)
    self.myWidget.insert(END, data)
    self.myWidget.configure(yscrollcommand=self.myWidgetScrollbar.set, state=DISABLED)
    self.myWidgetScrollbar.get()
    self.myWidgetScrollbar.set(pos)
</snippet></ROW><ROW><id>4800391</id><snippet>url = 'https://ajax.googleapis.com/ajax/services/language/translate?v=1.0&amp;q=' \
    + urllib2.quote(mytext) + '&amp;langpair=ru%7Cen'
</snippet></ROW><ROW><id>4800441</id><snippet>max(alkaline_earth_values, key=lambda x: x[1])
</snippet></ROW><ROW><id>4800441</id><snippet>k = lambda x: x[1]
</snippet></ROW><ROW><id>4800441</id><snippet>def k(l):
  return l[1]
</snippet></ROW><ROW><id>4800750</id><snippet>ER = re.compile(u'^[^\W\d_]{1,30}$', re.U)
s = ER.sub(u'.', u'Maçã')
</snippet></ROW><ROW><id>4800764</id><snippet>python2.5 /usr/local/bin/dev_appserver.py .
</snippet></ROW><ROW><id>4800816</id><snippet>[x[1] for x in L]
</snippet></ROW><ROW><id>4800856</id><snippet>settings.LOGIN_URL</snippet></ROW><ROW><id>4800856</id><snippet>/accounts/login/?next=/polls/3/</snippet></ROW><ROW><id>4800866</id><snippet>ifilter</snippet></ROW><ROW><id>4801380</id><snippet>result = ['{1} - {0}'.format(*pair) for pair in sorted(text_to_count.iteritems(), key = lambda (_,v): v, reverse = True)]
</snippet></ROW><ROW><id>4801795</id><snippet>try:
    from settings_local import *
except ImportError:
    pass

try:
    from settings_production import *
except ImportError:
    pass
</snippet></ROW><ROW><id>4802004</id><snippet>from pyparsing import *

data = '(gimme [some {nested, nested [lists]}])'

opening = oneOf("( { [")
nonBracePrintables = ''.join(c for c in printables if c not in '(){}[]')
closingFor = dict(zip("({[",")}]"))
closing = Forward()
# initialize closing with an expression
closing &lt;&lt; NoMatch()
closingStack = []
def pushClosing(t):
    closingStack.append(closing.expr)
    closing &lt;&lt; Literal( closingFor[t[0]] )
def popClosing():
    closing &lt;&lt; closingStack.pop()
opening.setParseAction(pushClosing)
closing.setParseAction(popClosing)

matchedNesting = nestedExpr( opening, closing, Word(alphas) | Word(nonBracePrintables) )

print matchedNesting.parseString(data).asList()
</snippet></ROW><ROW><id>4802004</id><snippet>[['gimme', ['some', ['nested', ',', 'nested', ['lists']]]]]
</snippet></ROW><ROW><id>4802004</id><snippet>operatorPrecedence</snippet></ROW><ROW><id>4802004</id><snippet>from pyparsing import *

enclosed = Forward()
nestedParens = nestedExpr('(', ')', content=enclosed) 
nestedBrackets = nestedExpr('[', ']', content=enclosed) 
nestedCurlies = nestedExpr('{', '}', content=enclosed) 
enclosed &lt;&lt; (Word(alphas) | ',' | nestedParens | nestedBrackets | nestedCurlies)


data = '(gimme [some {nested, nested [lists]}])' 

print enclosed.parseString(data).asList()
</snippet></ROW><ROW><id>4802004</id><snippet>[['gimme', ['some', ['nested', ',', 'nested', ['lists']]]]]
</snippet></ROW><ROW><id>4802010</id><snippet>for x in ['a', 'b', 'c', 'd', 'e']:
    setattr(i, x, f(getattr(i, x)))
</snippet></ROW><ROW><id>4802138</id><snippet>communicate()</snippet></ROW><ROW><id>4802138</id><snippet>.stdout.read()</snippet></ROW><ROW><id>4802138</id><snippet>Popen(shlex.split('python3.1 /home/hidura/webapps/karinapp/Suite/ForeingCode/saveCSS.py', stdin=args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
</snippet></ROW><ROW><id>4802138</id><snippet>stdout</snippet></ROW><ROW><id>4802138</id><snippet>stderr</snippet></ROW><ROW><id>4802138</id><snippet>shell=True</snippet></ROW><ROW><id>4802214</id><snippet>&gt;&gt;&gt; import difflib
&gt;&gt;&gt; 
&gt;&gt;&gt; a='abcd'
&gt;&gt;&gt; b='ab123'
&gt;&gt;&gt; seq=difflib.SequenceMatcher(None, a,b)
&gt;&gt;&gt; d=seq.ratio()*100
&gt;&gt;&gt; print d
44.4444444444
</snippet></ROW><ROW><id>4802303</id><snippet>from pypy.rlib import streamio
</snippet></ROW><ROW><id>4802359</id><snippet>os.read</snippet></ROW><ROW><id>4802661</id><snippet>asyncore.py</snippet></ROW><ROW><id>4802661</id><snippet>asyncore.py</snippet></ROW><ROW><id>4802661</id><snippet>asyncore.pyc</snippet></ROW><ROW><id>4802661</id><snippet>asyncore.py</snippet></ROW><ROW><id>4802661</id><snippet>import asyncore</snippet></ROW><ROW><id>4802661</id><snippet>sys.path</snippet></ROW><ROW><id>4802661</id><snippet>asyncore.py</snippet></ROW><ROW><id>4802814</id><snippet>try:
    import win32file
except ImportError:
    win32file = None
    import glob

if win32file:
    def findfile(wildcard):
        """Returns path of the first matched file. Using win32file."""
        ...
        return filepath
else:
    def findfile(wildcard):
        """Returns path of the first matched file. Using glob."""
        ...
        return filepath
</snippet></ROW><ROW><id>4802923</id><snippet>try:
    from functools import wraps
except ImportError:
    from django.utils.functional import wraps
from django.http import HttpRedirectResponse
from django.contrib import messages
from django.views.generic import * 

def add_message(success_message=None):
    def decorator(func):
        def inner(request, *args, **kwargs):
            resp = func(request, *args, **kwargs)
            if isinstance(resp, HttpRedirectResponse):
                messages.success(request, message)
            return resp
        return wraps(func)(inner)
    return decorator



student_info_edit = {
  'template_name': 'myapp/student/form.html',
  'template_object_name': 'student',
  'form_class':  studentForm,
}

student_info_new = {
  'template_name': 'myapp/student/form.html',
  'form_class':  studentForm,
  'post_save_redirect': '/myapp/students/',
}

urlpatterns += patterns('',
  url(r'^students/$', list_detail.object_list, { 'queryset': Student.objects.all() }, name="students"),
  url(r'^students/(?P&lt;object_id&gt;\d+)/$', add_message("Student record updated successfully")(create_update.update_object), student_info_edit, name="student_detail"),
  url(r'^students/new$', add_message("The student was added successfully.")(create_update.create_object), student_info_new, name="student_new"),
)
</snippet></ROW><ROW><id>4803039</id><snippet>dict</snippet></ROW><ROW><id>4803039</id><snippet>&gt;&gt;&gt; d = {1:1, 2:10, 3:10, 4:6, 5:5, 6:4, 7:2, 8:1}
&gt;&gt;&gt; d
{1: 1, 2: 10, 3: 10, 4: 6, 5: 5, 6: 4, 7: 2, 8: 1}
</snippet></ROW><ROW><id>4803039</id><snippet>&gt;&gt;&gt; def histo(dict_words):
    # Get max values, plus delta to ease display
    x_max = max(dict_words.keys()) + 2
    y_max = max(dict_words.values()) + 2
    # print line per line
    print '^'
    for j in range(y_max, 0, -1):
        s = '|'
        for i in range(1, x_max):
            if i in dict_words.keys() and dict_words[i] &gt;= j:
                s += '***'
            else:
                s += '   '
        print s
    # print x axis
    s = '+'
    for i in range(1, x_max):
        s += '---'
    s += '&gt;'
    print s
    # print indexes
    s = ' '
    for i in range(1, x_max):
        s += ' %d ' % i
    print s


&gt;&gt;&gt; histo(d)
^
|                           
|                           
|   ******                  
|   ******                  
|   ******                  
|   ******                  
|   *********               
|   ************            
|   ***************         
|   ***************         
|   ******************      
|************************   
+---------------------------&gt;
  1  2  3  4  5  6  7  8  9 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4803141</id><snippet>import numpy as NP
import numpy.linalg as LA

# a simulated data set with 8 data points, each point having five features
data = NP.random.randint(0, 10, 40).reshape(8, 5)

# usually a good idea to mean center your data first:
data -= NP.mean(data, axis=0)

# calculate the covariance matrix 
C = NP.corrcoef(data, rowvar=0)
# returns an m x m matrix, or here a 5 x 5 matrix)

# now get the eigenvalues/eigenvectors of C:
eval, evec = LA.eig(C)
</snippet></ROW><ROW><id>4803148</id><snippet># [ (x1, y1, z1), (x2, y2, z2), ... (xN, yN, zN) ]
all_vals = ...
# (x1, x2, ... xN) , (y1, y2, ... yN) , (z1, z2, ... zN)
all_xvals, all_yvals, all_zvals = zip(*all_vals)
fig = plt.figure()
ax = Axes3D(fig)
X, Y = np.meshgrid(xvals, yvals)
# This is the part you want:
Z1 = np.zeros(X.shape, float)
for (x, y, z) in all_vals:
    x = find_in_sorted_list(x, xvals)
    y = find_in_sorted_list(y, yvals)
    Z1[y,x] = z    
surf = ax.plot_surface(X, Y, Z1, rstride=1, cstride=1, cmap=cm.jet,
        linewidth=0, antialiased=False)
plt.xlabel('Blur standard deviation')  
plt.ylabel('JPEG quality')
ax.w_zaxis.set_major_locator(LinearLocator(10))
ax.w_zaxis.set_major_formatter(FormatStrFormatter('%.03f'))    
fig.colorbar(surf, shrink=0.5, aspect=5)    
plt.show()
</snippet></ROW><ROW><id>4803148</id><snippet>plt.show()</snippet></ROW><ROW><id>4803309</id><snippet>def create_rule(profile, lifestyles, is_something, title, input, output):
    rule = Rule.objects.create(
    ....
    bool=is_something,
)
</snippet></ROW><ROW><id>4803309</id><snippet>input_val, input_command = input
input_cls = models.get(model=input_val).model_class()
input_cls.objects.create(*input_command, rule=rule)
output_val, output_command, output_third_arg = output
....
</snippet></ROW><ROW><id>4803417</id><snippet>(r'^ask/$', include('advisor.core.urls.ask')),
</snippet></ROW><ROW><id>4803913</id><snippet>%</snippet></ROW><ROW><id>4803913</id><snippet>cmd = CMD % (option1, option2)
</snippet></ROW><ROW><id>4804039</id><snippet>d = {}
with open("file.txt") as f:
    for line in f:
       (key, val) = line.split()
       d[int(key)] = val
</snippet></ROW><ROW><id>4804660</id><snippet>Sql = """SELECT something, something 
         FROM table 
         WHERE foo=bar 
         ORDER BY foo"""
</snippet></ROW><ROW><id>4804985</id><snippet>jobid = emr_conn.run_jobflow(name = name,
                         log_uri = 's3n://'+ main_bucket_name +'/emr-logging/',
                         enable_debugging=1,
                         hadoop_version='0.20',
                         steps=[step1,step2])</snippet></ROW><ROW><id>4805178</id><snippet>savefig</snippet></ROW><ROW><id>4805178</id><snippet>facecolor</snippet></ROW><ROW><id>4805178</id><snippet>savefig</snippet></ROW><ROW><id>4805178</id><snippet>fig.savefig('whatever.png', facecolor=fig.get_facecolor(), edgecolor='none')</snippet></ROW><ROW><id>4805361</id><snippet>sys._getframe()</snippet></ROW><ROW><id>4805361</id><snippet>import sys

class Base(object):
    def A(self):
        print '  in method A() of a {} instance'.format(self.__class__.__name__)

    def B(self):
        print '  in method B() of a {} instance'.format(self.__class__.__name__)
        if sys._getframe(1).f_code.co_name != 'A':
            print '    caller is not A(), aborting'
            return
        print '    called from A(), continuing execution...'

class Derived(Base):
    def A(self):
        print "  in method A() of a {} instance".format(self.__class__.__name__)
        print '    calling self.B() from A()'
        self.B()

print '== running tests =='
base = Base()
print 'calling base.A()'
base.A()
print 'calling base.B()'
base.B()
derived = Derived()
print 'calling derived.A()'
derived.A()
print 'calling derived.B()'
derived.B()
</snippet></ROW><ROW><id>4805361</id><snippet>== running tests ==
calling base.A()
  in method A() of a Base instance
calling base.B()
  in method B() of a Base instance
    caller is not A(), aborting
calling derived.A()
  in method A() of a Derived instance
    calling self.B() from A()
  in method B() of a Derived instance
    called from A(), continuing execution...
calling derived.B()
  in method B() of a Derived instance
    caller is not A(), aborting
</snippet></ROW><ROW><id>4805617</id><snippet>p = Popen(cmd, bufsize=1024,
stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
p.stdin.close()
print p.stdout.read() #This will print the standard output from the spawned process
print p.stderr.read() #This is what you need, error output &lt;-----
</snippet></ROW><ROW><id>4805617</id><snippet>stderr</snippet></ROW><ROW><id>4805617</id><snippet>stdout or</snippet></ROW><ROW><id>4805617</id><snippet>def print_pipe(type_pipe,pipe):
    for line in iter(pipe.readline, ''):
         print "[%s] %s"%(type_pipe,line),

p = Popen(cmd, bufsize=1024,
stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)

t1 = Thread(target=print_pipe, args=("stdout",p.stdout,))
t1.start()
t2 = Thread(target=print_pipe, args=("stderr",p.stderr,))
t2.start()

#optionally you can join the threads to wait till p is done. This is avoidable but it 
# really depends on the application.
t1.join()
t2.join()
</snippet></ROW><ROW><id>4805617</id><snippet>stdout</snippet></ROW><ROW><id>4805617</id><snippet>stderr</snippet></ROW><ROW><id>4805617</id><snippet>type_pipe</snippet></ROW><ROW><id>4805617</id><snippet>stderr</snippet></ROW><ROW><id>4805617</id><snippet>stdout</snippet></ROW><ROW><id>4805775</id><snippet>os.system</snippet></ROW><ROW><id>4805775</id><snippet>urllib</snippet></ROW><ROW><id>4805814</id><snippet>x = Flight(flightFromInput='nebrasca')
print x
</snippet></ROW><ROW><id>4806384</id><snippet>django.db.connection.queries</snippet></ROW><ROW><id>4806384</id><snippet>if "celeryd" in sys.argv:
    DEBUG = False
</snippet></ROW><ROW><id>4806441</id><snippet>extra_requires</snippet></ROW><ROW><id>4806795</id><snippet>inspect</snippet></ROW><ROW><id>4806795</id><snippet>@validate(a=(int, 1, 10), b=(float, 1, 10), c=bool, returns=(int, -10, 10))
def foo(a, b, c): ...
</snippet></ROW><ROW><id>4806795</id><snippet>*arg</snippet></ROW><ROW><id>4806795</id><snippet>**kwarg</snippet></ROW><ROW><id>4806795</id><snippet>f1(int, int, int)</snippet></ROW><ROW><id>4806795</id><snippet>f2(int, *ints)</snippet></ROW><ROW><id>4806795</id><snippet>f3(int, **kwargs)</snippet></ROW><ROW><id>4806838</id><snippet>class Entry(db.Model):
  ...
  tag_1 = db.StringProperty();
  tag_2 = db.StringProperty();
  ...
Entry.all().filter('tag_1 !=', tag).filter('tag_2 !=', tag) ...
</snippet></ROW><ROW><id>4806946</id><snippet>&gt;&gt;&gt; 'abc' &gt; 'bac'
False
&gt;&gt;&gt; ord('a'), ord('b')
(97, 98)
</snippet></ROW><ROW><id>4806946</id><snippet>False</snippet></ROW><ROW><id>4806946</id><snippet>a</snippet></ROW><ROW><id>4806946</id><snippet>b</snippet></ROW><ROW><id>4806946</id><snippet>b</snippet></ROW><ROW><id>4806946</id><snippet>a</snippet></ROW><ROW><id>4806946</id><snippet>True</snippet></ROW><ROW><id>4807193</id><snippet>foo</snippet></ROW><ROW><id>4807193</id><snippet>from Queue import Empty, Queue
from subprocess import PIPE, Popen
from threading import Thread

def start_thread(target, *args):
    t = Thread(target=target, args=args)
    t.daemon = True
    t.start()
    return t

def signal_completion(queue, stderr):
    for line in iter(stderr.readline, ''):
        if 'Finished' in line:
           queue.put(1) # signal completion
    stderr.close()

def print_stdout(q, stdout):
    """Print stdout upon receiving a signal."""
    text = []
    for line in iter(stdout.readline, ''):
        if not q.empty():
           try: q.get_nowait()               
           except Empty:
               text.append(line) # queue is empty
           else: # received completion signal              
               print ''.join(text),
               text = []
               q.task_done()
        else: # buffer stdout until the task is finished
            text.append(line)
    stdout.close()
    if text: print ''.join(text), # print the rest unconditionally

queue = Queue()
proc = Popen("foo -config x.ini -threads 4".split(), bufsize=1,
             stdin=PIPE, stdout=PIPE, stderr=PIPE)
threads =  [start_thread(print_stdout, queue, proc.stdout)]
threads += [start_thread(signal_completion, queue, proc.stderr)]

mylist = ['this','is','my','test','app','.']
for line in mylist:
    proc.stdin.write(line.strip()+'\n')
proc.stdin.close()
proc.wait()
for t in threads: t.join() # wait for stdout
</snippet></ROW><ROW><id>4807230</id><snippet>re.escape(word)</snippet></ROW><ROW><id>4807273</id><snippet>PYTHONPATH=.</snippet></ROW><ROW><id>4807273</id><snippet>project folder</snippet></ROW><ROW><id>4807273</id><snippet>import classes_folder.class1</snippet></ROW><ROW><id>4807273</id><snippet>project folder</snippet></ROW><ROW><id>4807273</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4807273</id><snippet>project folder/tests_folder</snippet></ROW><ROW><id>4807273</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4807273</id><snippet>export PYTHONPATH=/full/path/to/project_folder</snippet></ROW><ROW><id>4807273</id><snippet>import sys
sys.path.append("/full/path/to/project_folder")
</snippet></ROW><ROW><id>4807273</id><snippet>import sys,os
home_project=os.path.abspath(".")
sys.path.append(home_project)
</snippet></ROW><ROW><id>4807627</id><snippet>req = urllib2.Request(url, data, {"Content-type": "application/json"})
</snippet></ROW><ROW><id>4807892</id><snippet># Create a temporary list to hold new x values
result = []

for x, y in zip(list_x, list_y):
     # Populate the new list
     result.append(f(x, y))

# Name your new list same as the old one
list_x = result
</snippet></ROW><ROW><id>4808233</id><snippet>subprocess</snippet></ROW><ROW><id>4808233</id><snippet>subprocess</snippet></ROW><ROW><id>4808233</id><snippet>subprocess.Popen.communicate</snippet></ROW><ROW><id>4808233</id><snippet>Popen.communicate(input=None)</snippet></ROW><ROW><id>4808233</id><snippet>stdin=PIPE</snippet></ROW><ROW><id>4808233</id><snippet>stdout=PIPE</snippet></ROW><ROW><id>4808233</id><snippet>stderr=PIPE</snippet></ROW><ROW><id>4808738</id><snippet>class PrintHelloMiddleware(object):
    def process_response(self, request, response):
        print "Hello"
        return None

# settings.py
MIDDLEWARE_CLASSES = ( # ... usual middleware
                       'path.to.my.middleware.PrintHelloMiddleware',
                      )
</snippet></ROW><ROW><id>4808764</id><snippet> &lt;layout class="QVBoxLayout" &gt;
  &lt;property name="spacing" &gt;
   &lt;number&gt;6&lt;/number&gt;
  &lt;/property&gt;
  &lt;property name="leftMargin" &gt;
   &lt;number&gt;6&lt;/number&gt;
  &lt;/property&gt;
  &lt;property name="topMargin" &gt;
   &lt;number&gt;6&lt;/number&gt;
  &lt;/property&gt;
  &lt;property name="rightMargin" &gt;
   &lt;number&gt;6&lt;/number&gt;
  &lt;/property&gt;
  &lt;property name="bottomMargin" &gt;
   &lt;number&gt;6&lt;/number&gt;
  &lt;/property&gt;
</snippet></ROW><ROW><id>4808824</id><snippet>os.environ</snippet></ROW><ROW><id>4808824</id><snippet>import os</snippet></ROW><ROW><id>4808824</id><snippet>os.environ['HG_USER']</snippet></ROW><ROW><id>4809040</id><snippet>from numpy import array, argwhere

A = array([[0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0],
           [0, 0, 1, 0, 0, 0, 0],
           [0, 0, 1, 1, 0, 0, 0],
           [0, 0, 0, 0, 1, 0, 0],
           [0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0]])

B = argwhere(A)
(ystart, xstart), (ystop, xstop) = B.min(0), B.max(0) + 1 
Atrim = a[ystart:ystop, xstart:xstop]
</snippet></ROW><ROW><id>4809094</id><snippet>request</snippet></ROW><ROW><id>4809094</id><snippet>request.myvar = 'hello'
</snippet></ROW><ROW><id>4809138</id><snippet>import random
for i in range(4):
    some_dict.pop( random.choice(some_dict.keys()) )   
</snippet></ROW><ROW><id>4809239</id><snippet>/^[1-9][0-9]{10,14}$/
</snippet></ROW><ROW><id>4809239</id><snippet>/^(873[1-9][0-9]{7,11}|91[1-9][0-9]{8,12})$/    #  India
/^46[1-9][0-9]{8,12}$/                          # Sweden
</snippet></ROW><ROW><id>4809350</id><snippet>[@attrib=’value’]</snippet></ROW><ROW><id>4809350</id><snippet>x = ElmentTree(file='testdata.xml')
cases = x.findall(".//testcase[@name='VHDL_BUILD_Passthrough'][@classname='TestOne']"
</snippet></ROW><ROW><id>4809350</id><snippet>x = ElmentTree(file='testdata.xml')
allcases = x12.findall(".//testcase")
cases = [c for c in allcases if c.get('classname') == 'TestOne' and c.get('name') == 'VHDL_BUILD_Passthrough']
</snippet></ROW><ROW><id>4809427</id><snippet>WSGIScriptAlias / /home/wong2/Code/python/django2/atest/apache/setting.wsgi
&lt;Directory "/home/wong2/Code/python/django2/atest/apache"&gt;
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>4809880</id><snippet>MY_APP_LOG_DIRECTORY = "path/to/logs"
</snippet></ROW><ROW><id>4809880</id><snippet>from django.conf import settings
</snippet></ROW><ROW><id>4809880</id><snippet>settings.MY_APP_LOG_DIRECTORY</snippet></ROW><ROW><id>4810122</id><snippet>/other/directory/lib/python2.6/site-packages/Numeric</snippet></ROW><ROW><id>4810122</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>4810230</id><snippet>{% media_url %}
</snippet></ROW><ROW><id>4810230</id><snippet>{{ MEDIA_URL }}
</snippet></ROW><ROW><id>4810265</id><snippet>a = [1,2,3,4,5]
b = iter(a)

try:
    while True:
        c = b.next()
        if (condition):
            c = b.next()
except StopIteration:
    pass
</snippet></ROW><ROW><id>4810607</id><snippet>django.core.context_processors.debug</snippet></ROW><ROW><id>4810607</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>4810607</id><snippet>settings.py</snippet></ROW><ROW><id>4810607</id><snippet>debug</snippet></ROW><ROW><id>4810607</id><snippet>def debug(request):
    "Returns context variables helpful for debugging."
    context_extras = {}
    if settings.DEBUG and request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS:
        context_extras['debug'] = True
        from django.db import connection
        context_extras['sql_queries'] = connection.queries
    return context_extras
</snippet></ROW><ROW><id>4811133</id><snippet>smtp_server.data(message.as_string())
</snippet></ROW><ROW><id>4811150</id><snippet>if "XY" not in s:
   print "matched"
else
   print "not matched"
</snippet></ROW><ROW><id>4811150</id><snippet>REGEXP="...(?!XY)..."
</snippet></ROW><ROW><id>4811295</id><snippet>.run_wsgi_app(webapp.WSGIApplication([(r'/page/(.*)', Page),
                (r'/user/(.*)', UserProfile),
                (r'/category/(.*)', CategoryProfile),  
                (r'/location/(.*)', LocationProfile),
                (r'/facebook/page/(.*)', Page),
                (r'/facebook/user/(.*)', UserProfile),
                (r'/facebook/category/(.*)', CategoryProfile),  
                (r'/facebook/location/(.*)', LocationProfile), 
                ('/facebook/', BaseHandler),
                ('/', BaseHandler)],
                debug=DEBUG))
</snippet></ROW><ROW><id>4811295</id><snippet>if re.search(r".facebook\.*", path):
</snippet></ROW><ROW><id>4811401</id><snippet>def month(n):
 lst = ['Months','Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
 return lst[n]
</snippet></ROW><ROW><id>4811504</id><snippet>class Parent(object):
    def __init__(self, x=None):
        self._x = x

class Child(Parent):
    def __init__(self, x):
        super(Child, self).__init__(x)
</snippet></ROW><ROW><id>4811937</id><snippet>print br.form</snippet></ROW><ROW><id>4811937</id><snippet>&lt;a href="http://www.crummy.com/software/BeautifulSoup/" rel="nofollow"&gt;BeautifulSoup&lt;/a&gt;</snippet></ROW><ROW><id>4812098</id><snippet>finally:</snippet></ROW><ROW><id>4812206</id><snippet>compiler</snippet></ROW><ROW><id>4812206</id><snippet>inspect</snippet></ROW><ROW><id>4812206</id><snippet>&gt;&gt;&gt; import compiler, inspect
&gt;&gt;&gt; import re # for testing 
&gt;&gt;&gt; compiler.parse(inspect.getsource(re))
Module('Support for regular expressions (RE). \n\nThis module provides ...
</snippet></ROW><ROW><id>4812216</id><snippet>string</snippet></ROW><ROW><id>4812216</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.punctuation
'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~'
</snippet></ROW><ROW><id>4812216</id><snippet>for each_character in mystr:
    if each_character in string.punctuation:
</snippet></ROW><ROW><id>4812216</id><snippet>raw_input()</snippet></ROW><ROW><id>4812216</id><snippet>input()</snippet></ROW><ROW><id>4812361</id><snippet>l_magazines.values_list('id', flat=True)</snippet></ROW><ROW><id>4812375</id><snippet>$ easy_install Genshi
</snippet></ROW><ROW><id>4812488</id><snippet>Player</snippet></ROW><ROW><id>4812488</id><snippet>aGame</snippet></ROW><ROW><id>4812488</id><snippet>Player</snippet></ROW><ROW><id>4812488</id><snippet>aGame</snippet></ROW><ROW><id>4812498</id><snippet>def crypto(s):
    return ''.join(chr(ord(c)+(1 if ord(c)%2 else -1)) for c in s)
</snippet></ROW><ROW><id>4812498</id><snippet>c</snippet></ROW><ROW><id>4812498</id><snippet>s</snippet></ROW><ROW><id>4812498</id><snippet>for c in s</snippet></ROW><ROW><id>4812498</id><snippet>ord('a')</snippet></ROW><ROW><id>4812498</id><snippet>ord('A')</snippet></ROW><ROW><id>4812498</id><snippet>(1 if ord(c)%2 else -1)</snippet></ROW><ROW><id>4812498</id><snippet>1</snippet></ROW><ROW><id>4812498</id><snippet>ord(c)</snippet></ROW><ROW><id>4812498</id><snippet>-1</snippet></ROW><ROW><id>4812498</id><snippet>ord(c)</snippet></ROW><ROW><id>4812498</id><snippet>chr</snippet></ROW><ROW><id>4812498</id><snippet>''.join()</snippet></ROW><ROW><id>4812694</id><snippet>request.ToASCII()</snippet></ROW><ROW><id>4812694</id><snippet>response.ToASCII()</snippet></ROW><ROW><id>4812912</id><snippet>[[(data[i,j], data[i+56,j]) for i in range(56)] for j in range(40)]
</snippet></ROW><ROW><id>4812912</id><snippet>data.reshape(2, 56, 40).swapaxes(0,2)
</snippet></ROW><ROW><id>4812924</id><snippet>@login_required
def new_photo(request, template_name="photo/newphoto.html"):

  form = PhotoForm( user= request.user, data=request.POST, files=request.FILES)

  if request.method == 'POST':
    form.photographer = request.user
    if form.is_valid():
      photo = form.save(commit=False)
      photo.photographer = request.user
      photo.save()
      return HttpResponseRedirect('/photo/%d/' % photo.id )
</snippet></ROW><ROW><id>4812961</id><snippet>related_name</snippet></ROW><ROW><id>4812961</id><snippet>class Tenant(models.Model):
    name = models.CharField(max_length=100)

class Room(models.Model):
    owner = models.ForeignKey(User, related_name='owns')
    maintainer = models.ForeignKey(User, related_name='maintains')
    tenant = models.ForeignKey(Tenant)
</snippet></ROW><ROW><id>4812961</id><snippet>jrb = User.objects.create(username='jrb')
bill = User.objects.create(username='bill')
bob = models.Tenant.objects.create(name="Bob")
models.Room.objects.create(owner=jrb, maintainer=bill, tenant=bob)

User.objects.filter(owns__tenant=bob)
</snippet></ROW><ROW><id>4813000</id><snippet>bookuser_key_name = "%s:%s" % (str(book_key.id_or_name()), str(user_key.id_or_name()))
bookuser = BookUser.get_or_insert(bookuser_key_name)
# set your values...
bookuser.put()
</snippet></ROW><ROW><id>4813472</id><snippet>__main__</snippet></ROW><ROW><id>4813571</id><snippet>os.system()</snippet></ROW><ROW><id>4813571</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>4813571</id><snippet>sts = os.system("mycmd" + " myarg")
</snippet></ROW><ROW><id>4813571</id><snippet>sts = Popen("mycmd" + " myarg", shell=True).wait()
</snippet></ROW><ROW><id>4813571</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>4813571</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>4813571</id><snippet>os.system()</snippet></ROW><ROW><id>4813571</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>4813571</id><snippet>os.system()</snippet></ROW><ROW><id>4814533</id><snippet>ABCMeta</snippet></ROW><ROW><id>4814533</id><snippet>from abc import ABCMeta
</snippet></ROW><ROW><id>4814533</id><snippet>abstractmethod</snippet></ROW><ROW><id>4814533</id><snippet>from abc import ABCMeta, abstractmethod
</snippet></ROW><ROW><id>4814659</id><snippet>&gt;&gt;&gt; s = '^a.b.c^'
&gt;&gt;&gt; s.strip('^')
'a.b.c'
</snippet></ROW><ROW><id>4814659</id><snippet>str.strip</snippet></ROW><ROW><id>4814692</id><snippet>class Foo:

   def __init__(self, **kwargs):
       for name, value in kwargs.items():
          setattr(self, name, value)
</snippet></ROW><ROW><id>4814692</id><snippet>   Foo(arg1=1, arg2=2, arg3=3)
</snippet></ROW><ROW><id>4814692</id><snippet>from Class import Class</snippet></ROW><ROW><id>4814692</id><snippet>re</snippet></ROW><ROW><id>4814692</id><snippet>urllib</snippet></ROW><ROW><id>4814879</id><snippet>replacement</snippet></ROW><ROW><id>4814879</id><snippet>url()</snippet></ROW><ROW><id>4814879</id><snippet>replacement = (url(...),)</snippet></ROW><ROW><id>4814985</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; output = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE).communicate()[0]
</snippet></ROW><ROW><id>4815106</id><snippet>SELECT * FROM List where categories = 'Philosophy'
</snippet></ROW><ROW><id>4815139</id><snippet>&gt;&gt;&gt; import socket

&gt;&gt;&gt; def get_ips_for_host(host):
        try:
            ips = socket.gethostbyname_ex(host)
        except socket.gaierror:
            ips=[]
        return ips

&gt;&gt;&gt; ips = get_ips_for_host('www.google.com')
&gt;&gt;&gt; print(repr(ips))
('www.l.google.com', [], ['74.125.77.104', '74.125.77.147', '74.125.77.99'])
</snippet></ROW><ROW><id>4815399</id><snippet>recursiveChildGenerator()</snippet></ROW><ROW><id>4815399</id><snippet>soup = BeautifulSoup.BeautifulSoup(html)
for child in soup.recursiveChildGenerator():
     name = getattr(child, "name", None)
     if name is not None:
         print name
     elif not child.isspace(): # leaf node, don't print spaces
         print child
</snippet></ROW><ROW><id>4815399</id><snippet>html
ul
li
Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
li
Aliquam tincidunt mauris eu risus.
li
Vestibulum auctor dapibus neque.
html
</snippet></ROW><ROW><id>4815399</id><snippet>html</snippet></ROW><ROW><id>4815399</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>4815594</id><snippet>im.seek(0)</snippet></ROW><ROW><id>4815594</id><snippet>Image.open(im)</snippet></ROW><ROW><id>4815796</id><snippet>def myfunc():
    stuff = [17] # &lt;&lt;---- this is a mutable object
    def lfun(arg):
        print "got arg", arg, "and stuff[0] is", stuff[0]
        stuff[0] += 1
    return lfun

my_function = myfunc()
my_function("hello")
my_function("hello")
</snippet></ROW><ROW><id>4815796</id><snippet>nonlocal</snippet></ROW><ROW><id>4815796</id><snippet>def myfunc():
    stuff = 17
    def lfun(arg):
        nonlocal stuff
        print "got arg", arg, "and stuff is", stuff
        stuff += 1
    return lfun

my_function = myfunc()
my_function("hello")
my_function("hello")
</snippet></ROW><ROW><id>4815808</id><snippet>result = ["_".join((i, j)) for i, j in itertools.izip(la, itertools.cycle(lb))]
</snippet></ROW><ROW><id>4815930</id><snippet>if line.startswith(u"Fußnote"):</snippet></ROW><ROW><id>4815930</id><snippet>print repr(line)</snippet></ROW><ROW><id>4815930</id><snippet>site.py</snippet></ROW><ROW><id>4815930</id><snippet>str</snippet></ROW><ROW><id>4815930</id><snippet>unicode</snippet></ROW><ROW><id>4815930</id><snippet>a.startswith(b)</snippet></ROW><ROW><id>4815930</id><snippet>str</snippet></ROW><ROW><id>4815930</id><snippet>unicode</snippet></ROW><ROW><id>4815930</id><snippet>str</snippet></ROW><ROW><id>4815930</id><snippet>a.startswith(b)</snippet></ROW><ROW><id>4815930</id><snippet>str</snippet></ROW><ROW><id>4815930</id><snippet>&gt;&gt;&gt; "\xff".startswith(u"\xab")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xff in position 0: ordinal not in range(128)

&gt;&gt;&gt; u"\xff".startswith("\xab")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xab in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>4815930</id><snippet>str</snippet></ROW><ROW><id>4815930</id><snippet>&gt;&gt;&gt; "abc".startswith(u"\xff")
False
&gt;&gt;&gt; u"\xff".startswith("abc")
False
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4815981</id><snippet>from xml.etree.ElementTree import ElementTree
tree = ElementTree()
tree.parse("yourdoc.xml")
roottree = tree.getroot() 
</snippet></ROW><ROW><id>4815981</id><snippet>for c in roottree.getchildren():
</snippet></ROW><ROW><id>4815981</id><snippet>roottree = tree.find('root') 
</snippet></ROW><ROW><id>4816263</id><snippet>while True</snippet></ROW><ROW><id>4816263</id><snippet>after</snippet></ROW><ROW><id>4816263</id><snippet>after</snippet></ROW><ROW><id>4816655</id><snippet>Facebook</snippet></ROW><ROW><id>4816655</id><snippet>import facebook
import logging

logging.warn('Facebook class: %r', dir(facebook.Facebook))
logging.warn('facebook module: %r', dir(facebook))
</snippet></ROW><ROW><id>4816655</id><snippet>import facebook

class Facebook(facebook.Facebook):
    def check_connect_session(request):
        pass

facebookapi = Facebook(API_KEY, SECRET)

if not facebookapi.check_connect_session(...):
    ...
</snippet></ROW><ROW><id>4816847</id><snippet>now</snippet></ROW><ROW><id>4816847</id><snippet>import datetime, pytz

testing = False # set to True/False

if testing:
    now = datetime.datetime(2011, 1, 1, 12, 23, 34, tzinfo=pytz.utc)
    # testing with any time
else:
    now = datetime.datetime.now(pytz.utc)
    # normal usage with current time

if (now.hour == 12):
    ...
</snippet></ROW><ROW><id>4816847</id><snippet>if optDate: 
    now = datetime.datetime.strptime(optDate, '%Y%m%d%H%M%S').replace(tzinfo=pytz.utc)
else:
    now = datetime.datetime.now(pytz.utc)
</snippet></ROW><ROW><id>4816920</id><snippet>class Image(webapp.RequestHandler):
    def get(self, id):
        path = os.path.join(os.path.dirname(__file__), 'fcimages/%s.png' % id)
        self.response.headers['Content-Type'] = "image/png"
        self.response.out.write(file(path, 'rb').read())
</snippet></ROW><ROW><id>4817167</id><snippet>test_foo.py</snippet></ROW><ROW><id>4817167</id><snippet>tests</snippet></ROW><ROW><id>4817167</id><snippet>tests/__init__.py</snippet></ROW><ROW><id>4817167</id><snippet>from __future__ import absolute_import 
import foo                   # import global foo.py, the first foo.py in sys.path
import tests.foo as test_foo # import tests/foo.py
</snippet></ROW><ROW><id>4817229</id><snippet>strides</snippet></ROW><ROW><id>4817229</id><snippet>B = A[[0, 2], [0, 1], [1, 2]]
</snippet></ROW><ROW><id>4817229</id><snippet>B = numpy.array([A[0, 0, 1], A[2, 1, 2]])
</snippet></ROW><ROW><id>4817229</id><snippet>B = A[[0,2],:,:][:,:,[1,2]]
</snippet></ROW><ROW><id>4817229</id><snippet>A[np.ix_([0,2],[0,1],[1,2])]
</snippet></ROW><ROW><id>4817229</id><snippet>B = A[::2, :, 1:2]
</snippet></ROW><ROW><id>4817249</id><snippet>text</snippet></ROW><ROW><id>4817249</id><snippet>&gt;&gt;&gt; mystring = u"élève"
&gt;&gt;&gt; mystring
u'\xe9l\xe8ve'
&gt;&gt;&gt; str(mystring)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe9' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>4817249</id><snippet>UTF-8</snippet></ROW><ROW><id>4817249</id><snippet>&gt;&gt;&gt; str(mystring.encode("utf-8"))
'\xc3\xa9l\xc3\xa8ve'
</snippet></ROW><ROW><id>4817249</id><snippet>text</snippet></ROW><ROW><id>4817249</id><snippet>self.output += unicode(mystring).encode("utf-8")
</snippet></ROW><ROW><id>4817281</id><snippet>form_name.photo.storage.location = upload_dir_path      
</snippet></ROW><ROW><id>4817543</id><snippet>import re    
from lxml import html

def replace_link(link):
    if re.match(r"\.\./[^/]+/$", link):
        link += "index.html"
    return link

print html.rewrite_links(your_html_text, replace_link)
</snippet></ROW><ROW><id>4817543</id><snippet>&lt;p&gt; 

 &lt;a href="../personal-autonomy/index.html"&gt;autonomy: personal&lt;/a&gt; |
 &lt;a href="../principle-beneficence/index.html"&gt;beneficence, principle of&lt;/a&gt; |
 &lt;a href="../decision-capacity/index.html"&gt;decision-making capacity&lt;/a&gt; |
 &lt;a href="../legal-obligation/index.html"&gt;legal obligation and authority&lt;/a&gt; |
 &lt;a href="../paternalism/index.html"&gt;paternalism&lt;/a&gt; |
 &lt;a href="../identity-personal/index.html"&gt;personal identity&lt;/a&gt; |
 &lt;a href="../identity-ethics/index.html"&gt;personal identity: and ethics&lt;/a&gt; |
 &lt;a href="../respect/index.html"&gt;respect&lt;/a&gt; |
 &lt;a href="../well-being/index.html"&gt;well-being&lt;/a&gt; 

&lt;/p&gt;
</snippet></ROW><ROW><id>4817776</id><snippet>import os
import subprocess

if __name__ == '__main__':
    package_name = 'package'
    short_package_name = 'package-1.0.6'

    print "Changing to SOURCES"
    os.chdir('SOURCES')

    tar_file = '.'.join([short_package_name, 'tar', 'gz'])
    print "Untarring ", tar_file
    p = subprocess.Popen(['tar', 'xzfv', tar_file], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, errors = p.communicate()

    print "Changing to ", short_package_name
    os.chdir(short_package_name)

    print "Setting up source distribution"
    p = subprocess.Popen(['python', 'setup.py', 'install'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, errors = p.communicate()
</snippet></ROW><ROW><id>4817776</id><snippet>-e ...git</snippet></ROW><ROW><id>4817951</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def main():
    # Contour some regular (fake) data
    grid = np.arange(100).reshape((10,10))
    plt.contourf(grid)

    # Verticies of the clipping polygon in counter-clockwise order
    #  (A triange, in this case)
    poly_verts = [(2, 2), (5, 2.5), (6, 8), (2, 2)]

    mask_outside_polygon(poly_verts)

    plt.show()

def mask_outside_polygon(poly_verts, ax=None):
    """
    Plots a mask on the specified axis ("ax", defaults to plt.gca()) such that
    all areas outside of the polygon specified by "poly_verts" are masked.  

    "poly_verts" must be a list of tuples of the verticies in the polygon in
    counter-clockwise order.

    Returns the matplotlib.patches.PathPatch instance plotted on the figure.
    """
    import matplotlib.patches as mpatches
    import matplotlib.path as mpath

    if ax is None:
        ax = plt.gca()

    # Get current plot limits
    xlim = ax.get_xlim()
    ylim = ax.get_ylim()

    # Verticies of the plot boundaries in clockwise order
    bound_verts = [(xlim[0], ylim[0]), (xlim[0], ylim[1]), 
                   (xlim[1], ylim[1]), (xlim[1], ylim[0]), 
                   (xlim[0], ylim[0])]

    # A series of codes (1 and 2) to tell matplotlib whether to draw a line or 
    # move the "pen" (So that there's no connecting line)
    bound_codes = [mpath.Path.MOVETO] + (len(bound_verts) - 1) * [mpath.Path.LINETO]
    poly_codes = [mpath.Path.MOVETO] + (len(poly_verts) - 1) * [mpath.Path.LINETO]

    # Plot the masking patch
    path = mpath.Path(bound_verts + poly_verts, bound_codes + poly_codes)
    patch = mpatches.PathPatch(path, facecolor='white', edgecolor='none')
    patch = ax.add_patch(patch)

    # Reset the plot limits to their original extents
    ax.set_xlim(xlim)
    ax.set_ylim(ylim)

    return patch

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4818016</id><snippet>my_decorator</snippet></ROW><ROW><id>4818016</id><snippet>wrapper</snippet></ROW><ROW><id>4818016</id><snippet>functionDecorator()</snippet></ROW><ROW><id>4818016</id><snippet>my_decorator</snippet></ROW><ROW><id>4818016</id><snippet>my_decorator</snippet></ROW><ROW><id>4818319</id><snippet>ssl.py</snippet></ROW><ROW><id>4818319</id><snippet>ssl.py</snippet></ROW><ROW><id>4818319</id><snippet>import ssl</snippet></ROW><ROW><id>4819323</id><snippet>johns = []
for s in L1:
    # NOTE: not the most robust parsing method. 
    v = [x.strip() for x in s.split(",")]
    data = {
        "gender": v[-1],
        "last_name": v[0],
        "first_name": v[1],
    }

    # build keyword args for datetime.date()
    v = v[2:-1] # remove parsed data
    kwargs = { "year": int(v.pop(0)), "month": 1, "day":1 }
    try:
        kwargs["month"] = int(v.pop(0))
        kwargs["day"] = int(v.pop(0))
    except:
        pass

    data["date"] = date(**kwargs)
    johns.append(data)
</snippet></ROW><ROW><id>4819323</id><snippet>dict</snippet></ROW><ROW><id>4819323</id><snippet>L2</snippet></ROW><ROW><id>4819323</id><snippet>date</snippet></ROW><ROW><id>4819323</id><snippet>&gt;&gt;&gt; a = date(2008, 12,12)
&gt;&gt;&gt; b = date(2010, 1, 13)
&gt;&gt;&gt; delta = b - a
&gt;&gt;&gt; print delta.days
397
&gt;&gt;&gt; print "%d years, %d days" % divmod(delta.days, 365)
1 years, 32 days
</snippet></ROW><ROW><id>4819323</id><snippet>divmod</snippet></ROW><ROW><id>4819323</id><snippet>timedelta</snippet></ROW><ROW><id>4819323</id><snippet>from datetime import timedelta
def my_time_delta(d1,d2):
    """
    Returns time delta as the following tuple:
        ("before|after|same", "years", "months", "days")
    """
    if d1 == d2:
        return ("same",0,0,0)

    # d1 before or after d2?
    if d1 &gt; d2:
        ba = "after"
        d1,d2 = d2,d1 # swap so d2 &gt; d1
    else:
        ba = "before"

    years  = d2.year - d1.year
    months = d2.month - d1.month
    days   = d2.day - d1.day

    # adjust for -ve days/months
    if days &lt; 0:
        # get last day of month for month before d1
        pre_d1 = d1 - timedelta(days=d1.day)
        days = days + pre_d1.day
        months = months - 1

    if months &lt; 0:
        months = months + 12
        years  = years - 1

    return (ba, years, months, days)
</snippet></ROW><ROW><id>4819323</id><snippet>&gt;&gt;&gt; my_time_delta(date(2003,12,1), date(2003,11,2))
('after', 0, 0, 30)
&gt;&gt;&gt; my_time_delta(date(2003,12,1), date(2004,11,2))
('before', 0, 11, 1)
&gt;&gt;&gt; my_time_delta(date(2003,2,1), date(1992,3,10))
('after', 10, 10, 20)
&gt;&gt;&gt; p,y,m,d = my_time_delta(date(2003,2,1), date(1992,3,10))
&gt;&gt;&gt; print "%d years, %d months, %d days %s" % (y,m,d,p)
10 years, 10 months, 20 days after
</snippet></ROW><ROW><id>4819434</id><snippet>for</snippet></ROW><ROW><id>4819434</id><snippet>for name in filenames:
    try:
        f = open(name)
        break
    except IOError:
        pass
else:
    # error
</snippet></ROW><ROW><id>4819791</id><snippet>app.MainLoop()</snippet></ROW><ROW><id>4819791</id><snippet>app.MainLoop()</snippet></ROW><ROW><id>4819812</id><snippet>.connect()</snippet></ROW><ROW><id>4819812</id><snippet>.connect()</snippet></ROW><ROW><id>4819812</id><snippet>.connect()</snippet></ROW><ROW><id>4819812</id><snippet>self.tableWidget.insertColumn(2)</snippet></ROW><ROW><id>4819812</id><snippet>.connect()</snippet></ROW><ROW><id>4820227</id><snippet>hashlib</snippet></ROW><ROW><id>4820227</id><snippet>shared_private_key = "ABCDEF"

def create_signature(data):
    return hashlib.sha1(repr(data) + "," + shared_private_key).hexdigest()

def verify_signature(data, signature):
    return signature == create_signature(data)
</snippet></ROW><ROW><id>4820327</id><snippet>CHOICE1IMG&lt;number of bytes&gt;&lt;image bytestream&gt;</snippet></ROW><ROW><id>4820533</id><snippet>__getattr__</snippet></ROW><ROW><id>4820533</id><snippet>__getattr__</snippet></ROW><ROW><id>4820533</id><snippet>__getattribute__</snippet></ROW><ROW><id>4820533</id><snippet>def __getattr__(self, name):
    def set_fn(self, value):
        return self.set({name:value})
    return set_fn
</snippet></ROW><ROW><id>4820533</id><snippet>move_at</snippet></ROW><ROW><id>4820533</id><snippet>__getattr__</snippet></ROW><ROW><id>4820533</id><snippet>set_fn</snippet></ROW><ROW><id>4820533</id><snippet>name</snippet></ROW><ROW><id>4820533</id><snippet>name</snippet></ROW><ROW><id>4820533</id><snippet>__getattr__</snippet></ROW><ROW><id>4820533</id><snippet>"move_at"</snippet></ROW><ROW><id>4820533</id><snippet>10</snippet></ROW><ROW><id>4820533</id><snippet>def __getattr__(self, name):
    return lambda value: self.set({name:value})
</snippet></ROW><ROW><id>4821120</id><snippet>getattr(module, class_name)
</snippet></ROW><ROW><id>4821120</id><snippet>module = __import__(module_name)
class_ = getattr(module, class_name)
instance = class_()
</snippet></ROW><ROW><id>4821175</id><snippet>yum install postgresql-libs</snippet></ROW><ROW><id>4821464</id><snippet>import glob
os.listdir(glob.glob('A/*')[0])
</snippet></ROW><ROW><id>4821464</id><snippet>glob.glob('A/*/*')
</snippet></ROW><ROW><id>4821521</id><snippet>def index(request)
   get_data = api.getSomeExpensiveData
   return render_to_response('template.html', {'get_data':get_data} )
</snippet></ROW><ROW><id>4821521</id><snippet>{% block content %}
  {% cache 500 "myCacheKey" %}
     {{ get_data.something }}
     Or maybe
     {% for something in get_data %}
     {% endfor %}
  {% endcache %}
{% endblock %}
</snippet></ROW><ROW><id>4821521</id><snippet>def index(request)
   class get_data(object):
       data = False
       def __call__(self):
           if not self.data:
               self.data = api.getSomeExpensiveData()
           return self.data
   return render_to_response('template.html', {'get_data':get_data()} )
</snippet></ROW><ROW><id>4821596</id><snippet>import __main__
__SHOULD_MULTITHREAD__ = False
if hasattr(__main__,'__file__'):
    __SHOULD_MULTITHREAD__ = True
</snippet></ROW><ROW><id>4822054</id><snippet>Python 2.6.2 (r262:71605, Apr 14 2009, 22:40:02) [MSC v.1500 32 bit (Intel)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; float('NaN')
nan
&gt;&gt;&gt; _**2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: (33, 'Domain error')
</snippet></ROW><ROW><id>4822098</id><snippet>simplejson</snippet></ROW><ROW><id>4822098</id><snippet>default</snippet></ROW><ROW><id>4822098</id><snippet>object_hook</snippet></ROW><ROW><id>4822098</id><snippet>dump</snippet></ROW><ROW><id>4822098</id><snippet>load</snippet></ROW><ROW><id>4822098</id><snippet>class SerializerRegistry(object):
    def __init__(self):
        self._classes = {}
    def add(self, cls):
        self._classes[cls.__module__, cls.__name__] = cls
        return cls
    def object_hook(self, dct):
        module, cls_name = dct.pop('__type__', (None, None))
        if cls_name is not None:
            return self._classes[module, cls_name].from_dict(dct)
        else:
            return dct
    def default(self, obj):
        dct = obj.to_dict()
        dct['__type__'] = [type(obj).__module__,
                           type(obj).__name__]
        return dct

registry = SerializerRegistry()

@registry.add
class A(object):
    def __init__(self, item1):
        self.item1 = item1
    def __repr__(self):
        return str(self.__dict__)
    def to_dict(self):
        return dict(item1=self.item1)
    @classmethod
    def from_dict(cls, dct):
        return cls(**dct)

s = json.dumps(A(1), default=registry.default)
a = json.loads(s, object_hook=registry.object_hook)
</snippet></ROW><ROW><id>4822098</id><snippet>&gt;&gt;&gt; s
'{"item1": 1, "__type__": ["__main__", "A"]}'
&gt;&gt;&gt; a
{'item1': 1}
</snippet></ROW><ROW><id>4822098</id><snippet>default</snippet></ROW><ROW><id>4822098</id><snippet>object_hook</snippet></ROW><ROW><id>4822098</id><snippet>_classes</snippet></ROW><ROW><id>4822184</id><snippet>SEV = PRI &amp; 7
FAC = PRI &gt;&gt; 3
</snippet></ROW><ROW><id>4822761</id><snippet>class MainWindow(wx.Frame):
    def __init__(self, parent, id, title, app):
        wx.Frame.__init__(self, parent, id, title)
        self.app = app
        #...

class CustomApp(wx.App):
    def __init__(self):
        wx.App.__init__(self)
        self.value = None

    def SetValue(self, value):
        self.value = value

    def GetValue(self):
        return self.value


app = CustomApp()
frm = MainWindow(None, wx.ID_ANY, "Main Window", app)
frm.Show()
app.MainLoop()

print(app.GetValue())
</snippet></ROW><ROW><id>4823009</id><snippet>ProxyHandler</snippet></ROW><ROW><id>4823128</id><snippet>@login_reqluired
def view(request, extra_context=None, ...):

    form = EmailChangeForm(user=request.user, data=request.POST or None)

    if request.POST and form.is_valid():
        send_email_change_request(request.user,
                                  form.cleaned_data['email'],
                                  https=request.is_secure())
        return redirect(success_url)

    ...
</snippet></ROW><ROW><id>4823128</id><snippet>class EmailChangeForm(Form):
    email = ...
    old_password = CharField(..., widget=Password())

    def __init__(self, user, data=None):
        self.user = user
        super(EmailChangeForm, self).__init__(data=data)

    def clean_old_password(self):
        password = self.cleaned_data.get('password', None)
        if not self.user.check_password(password):
            raise ValidationError('Invalid password')
</snippet></ROW><ROW><id>4823128</id><snippet> def send_email_change_request(user, new_email, https=True):

    site = cache.get_model('sites', 'Site')

    email = new_email
    verification_key = generate_key(user, email)

    current_site = Site.objects.get_current()
    site_name = current_site.name
    domain = current_site.domain

    protocol = 'https' if https else 'http'

    # First clean all email change requests made by this user
    qs = EmailChangeRequest.objects.filter(user=request.user)
    qs.delete()

    # Create an email change request
    change_request = EmailChangeRequest(
       user = request.user,
       verification_key = verification_key,
       email = email
    )
    change_request.save()

    # Prepare context
    c = {
        'email': email,
        'site_domain': 'dev.tolisto.de',
        'site_name': 'tolisto',
        'user': self.user,
        'verification_key': verification_key,
        'protocol': protocol,
    }
    c.update(extra_context)
    context = Context(c)

    # Send success email
    subject = "Subject" # I don't think that using template for 
                        # subject is good idea
    message = render_to_string(email_message_template_name, context_instance=context)

    send_mail(subject, message, None, [email])
</snippet></ROW><ROW><id>4823420</id><snippet>set(CMAKE_SWIG_OUTDIR ${CMAKE_CURRENT_BINARY_DIR}/bin)
</snippet></ROW><ROW><id>4823685</id><snippet>Group</snippet></ROW><ROW><id>4823685</id><snippet>Item</snippet></ROW><ROW><id>4823685</id><snippet>items</snippet></ROW><ROW><id>4823685</id><snippet>groups = groups.objects.filter(item__in=items).distinct().values_list('name', flat=True)
</snippet></ROW><ROW><id>4823936</id><snippet>PyMem_Malloc</snippet></ROW><ROW><id>4823936</id><snippet>PyObject_Malloc</snippet></ROW><ROW><id>4823936</id><snippet>PYMALLOC_DEBUG</snippet></ROW><ROW><id>4823936</id><snippet>PyMem_Malloc</snippet></ROW><ROW><id>4823936</id><snippet>malloc()</snippet></ROW><ROW><id>4823936</id><snippet>PyMem_Malloc</snippet></ROW><ROW><id>4823936</id><snippet>pymem.h</snippet></ROW><ROW><id>4823936</id><snippet>PyMem_Malloc</snippet></ROW><ROW><id>4823936</id><snippet>PyObject_Malloc</snippet></ROW><ROW><id>4823936</id><snippet>100*234</snippet></ROW><ROW><id>4823936</id><snippet>str(100)</snippet></ROW><ROW><id>4823936</id><snippet>10 + 4j</snippet></ROW><ROW><id>4823936</id><snippet>&gt;&gt;&gt; id(10 + 4j)
139721697591440
&gt;&gt;&gt; id(10 + 4j)
139721697591504
&gt;&gt;&gt; id(10 + 4j)
139721697591440
</snippet></ROW><ROW><id>4823936</id><snippet>complex()</snippet></ROW><ROW><id>4823936</id><snippet>PyMem_Malloc</snippet></ROW><ROW><id>4823936</id><snippet>PyObject_Malloc</snippet></ROW><ROW><id>4823936</id><snippet>PyObject_Malloc</snippet></ROW><ROW><id>4823936</id><snippet>/*
 * The basic blocks are ordered by decreasing execution frequency,
 * which minimizes the number of jumps in the most common cases,
 * improves branching prediction and instruction scheduling (small
 * block allocations typically result in a couple of instructions).
 * Unless the optimizer reorders everything, being too smart...
 */
</snippet></ROW><ROW><id>4824332</id><snippet>print x.rjust(40) + x.ljust(40)
</snippet></ROW><ROW><id>4824362</id><snippet>centroid = SUM(pos*volume)/SUM(volume)</snippet></ROW><ROW><id>4824362</id><snippet>pos</snippet></ROW><ROW><id>4824362</id><snippet>volume</snippet></ROW><ROW><id>4824464</id><snippet>content_type</snippet></ROW><ROW><id>4824464</id><snippet>readline()</snippet></ROW><ROW><id>4824591</id><snippet>test</snippet></ROW><ROW><id>4824591</id><snippet>__main__</snippet></ROW><ROW><id>4824591</id><snippet>sys.modules</snippet></ROW><ROW><id>4824591</id><snippet>__main__</snippet></ROW><ROW><id>4824591</id><snippet>sys.modules</snippet></ROW><ROW><id>4824591</id><snippet>test</snippet></ROW><ROW><id>4824591</id><snippet>A</snippet></ROW><ROW><id>4824615</id><snippet>IN ()</snippet></ROW><ROW><id>4824615</id><snippet>IN (?, ?, . . ., ?)</snippet></ROW><ROW><id>4824624</id><snippet>changed_mask</snippet></ROW><ROW><id>4824624</id><snippet>new_window_state</snippet></ROW><ROW><id>4824624</id><snippet># Did the user actually toggle fullscreen, or was it
# a different window-state event (e.g. maximize)?
if event.changed_mask &amp; gtk.gdk.WINDOW_STATE_FULLSCREEN:
    # What's the new state?
    print bool(event.new_window_state &amp; gtk.gdk.WINDOW_STATE_FULLSCREEN)
</snippet></ROW><ROW><id>4824768</id><snippet>foo
bofoo
foobar
barfood
</snippet></ROW><ROW><id>4824768</id><snippet># python sort
x = [results]
x.sort(key=len)
</snippet></ROW><ROW><id>4824768</id><snippet>MyModel.objects.extra(select={'myfield_length':'Length(myfield)'}).order_by('myfield_length') 
</snippet></ROW><ROW><id>4824835</id><snippet>bars = [i[0]&lt;i[1] for i in comp1]

for b in range(1,len(bars)):
    if bars[b] and bars[b-1]:
        print "yes"
</snippet></ROW><ROW><id>4824952</id><snippet>\d{15}</snippet></ROW><ROW><id>4824952</id><snippet>(?:(?&lt;!\d)\d{15}(?!\d))
</snippet></ROW><ROW><id>4824952</id><snippet>(?:\b\d{15}\b)
</snippet></ROW><ROW><id>4824952</id><snippet>(?:</snippet></ROW><ROW><id>4824952</id><snippet>)</snippet></ROW><ROW><id>4825096</id><snippet>Application Manager</snippet></ROW><ROW><id>4825096</id><snippet>Software installation</snippet></ROW><ROW><id>4825096</id><snippet>Signed</snippet></ROW><ROW><id>4825096</id><snippet>All</snippet></ROW><ROW><id>4825096</id><snippet>SIS</snippet></ROW><ROW><id>4825096</id><snippet>PythonForS60 2.0</snippet></ROW><ROW><id>4825096</id><snippet>Python 2.5</snippet></ROW><ROW><id>4825114</id><snippet>&gt;&gt;&gt; if y is None:
...   print 'none'
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'y' is not defined
</snippet></ROW><ROW><id>4825114</id><snippet>def get_text(msg):
text = ""
if msg.is_multipart():
    html = None
    for part in msg.get_payload():
        if part.get_content_charset() is None:
            charset = chardet.detect(str(part))['encoding']
        else:
            charset = part.get_content_charset()
        if part.get_content_type() == 'text/plain':
            text = unicode(part.get_payload(decode=True),str(charset),"ignore").encode('utf8','replace')
        if part.get_content_type() == 'text/html':
            html = unicode(part.get_payload(decode=True),str(charset),"ignore").encode('utf8','replace')
    if html is None:
        return text.strip()
    else:
        return html.strip()
else:
    text = unicode(msg.get_payload(decode=True),msg.get_content_charset(),'ignore').encode('utf8','replace')
    return text.strip()
</snippet></ROW><ROW><id>4825279</id><snippet>raise</snippet></ROW><ROW><id>4825279</id><snippet># need to re-raise err so caller can do its own handling
if err:
    raise
</snippet></ROW><ROW><id>4825279</id><snippet>raise something</snippet></ROW><ROW><id>4825279</id><snippet>something</snippet></ROW><ROW><id>4825279</id><snippet>raise</snippet></ROW><ROW><id>4825315</id><snippet>wx.CallLater</snippet></ROW><ROW><id>4825315</id><snippet>wx.CallAfter()</snippet></ROW><ROW><id>4825403</id><snippet>{{ chef.meal|join:", " }}
</snippet></ROW><ROW><id>4825435</id><snippet>python manage.py dumpdata [app_name] &gt; [app_name]/fixtures/initial_data.json
</snippet></ROW><ROW><id>4825435</id><snippet>python manage.py ...
</snippet></ROW><ROW><id>4825435</id><snippet>python ./manage.py ...
</snippet></ROW><ROW><id>4825578</id><snippet>In [18]: float('0.00355')
Out[18]: 0.0035500000000000002

In [19]: float('0.00355')*100
Out[19]: 0.35500000000000004

In [20]: 0.355
Out[20]: 0.35499999999999998
</snippet></ROW><ROW><id>4825578</id><snippet>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; "%.2f" % (decimal.Decimal('0.00355')*100)
'0.35'
</snippet></ROW><ROW><id>4825895</id><snippet>from datetime import datetime

for data in pair:
    date = datetime.strptime(data[1], &lt;yourdateformat&gt;)
    if date.year == 2010:
        names.append(data[0])
</snippet></ROW><ROW><id>4826560</id><snippet>string[42:-7]
</snippet></ROW><ROW><id>4826560</id><snippet>&lt;html&gt;</snippet></ROW><ROW><id>4827380</id><snippet>tuple</snippet></ROW><ROW><id>4827380</id><snippet>__init__</snippet></ROW><ROW><id>4827380</id><snippet>__new__</snippet></ROW><ROW><id>4827380</id><snippet>&gt;&gt;&gt; class MyTuple(tuple):
...     def __new__(typ, itr):
...             seq = [int(x) for x in itr]
...             return tuple.__new__(typ, seq)
... 
&gt;&gt;&gt; t = MyTuple((1, 2, 3))
&gt;&gt;&gt; t
(1, 2, 3)
</snippet></ROW><ROW><id>4827520</id><snippet>class Copier(object):
    def __init__(self, tgtdir):
        self.target_dir = tgtdir
    def __call__(self, src):
        copy_file(src, self.target_dir)
</snippet></ROW><ROW><id>4827520</id><snippet>Pool.map</snippet></ROW><ROW><id>4827520</id><snippet>p.map(Copier(target_dir), file_list)
</snippet></ROW><ROW><id>4827946</id><snippet>return style.saveResultToString(html)
</snippet></ROW><ROW><id>4827946</id><snippet>return html</snippet></ROW><ROW><id>4827946</id><snippet>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
    &lt;xsl:output method="html" encoding="UTF-8" /&gt;
    &lt;xsl:template match="/"&gt;
        &lt;html&gt;
        &lt;head&gt;
            &lt;title&gt;学生名簿&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
        &lt;h1&gt;学生名簿&lt;/h1&gt;

        &lt;table border="1"&gt;
            &lt;tr&gt;
                &lt;th&gt;学生番号&lt;/th&gt;&lt;th&gt;氏名&lt;/th&gt;&lt;th&gt;電話番号&lt;/th&gt;&lt;th&gt;住所&lt;/th&gt;
            &lt;/tr&gt;
            &lt;xsl:for-each select="学生名簿/学生" &gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;xsl:value-of select="学生番号" /&gt;&lt;/td&gt;
                &lt;td&gt;&lt;xsl:value-of select="氏名" /&gt;&lt;/td&gt;
                &lt;td&gt;&lt;xsl:value-of select="電話番号" /&gt;&lt;/td&gt;
                &lt;td&gt;&lt;xsl:value-of select="住所" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/xsl:for-each&gt;
        &lt;/table&gt;
        &lt;/body&gt;
        &lt;/html&gt;
    &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt; 
</snippet></ROW><ROW><id>4827946</id><snippet>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;学生名簿&gt;
    &lt;学生&gt;
        &lt;学生番号&gt;23&lt;/学生番号&gt;
        &lt;氏名&gt;あ&lt;/氏名&gt;
        &lt;電話番号&gt;111-111-1111&lt;/電話番号&gt;
        &lt;住所&gt;○市○町&lt;/住所&gt;
    &lt;/学生&gt;
    &lt;学生&gt;
        &lt;学生番号&gt;20&lt;/学生番号&gt;
        &lt;氏名&gt;い&lt;/氏名&gt;
        &lt;電話番号&gt;222-222-2222&lt;/電話番号&gt;
        &lt;住所&gt;×市×町&lt;/住所&gt;
    &lt;/学生&gt;
    &lt;学生&gt;
        &lt;学生番号&gt;17&lt;/学生番号&gt;
        &lt;氏名&gt;う&lt;/氏名&gt;
        &lt;電話番号&gt;333-333-3333&lt;/電話番号&gt;
        &lt;住所&gt;△市△町&lt;/住所&gt;
    &lt;/学生&gt;
    &lt;学生&gt;
        &lt;学生番号&gt;18&lt;/学生番号&gt;
        &lt;氏名&gt;え&lt;/氏名&gt;
        &lt;電話番号&gt;444-444-4444&lt;/電話番号&gt;
        &lt;住所&gt;◇市◇町&lt;/住所&gt;
    &lt;/学生&gt;
    &lt;学生&gt;
        &lt;学生番号&gt;22&lt;/学生番号&gt;
        &lt;氏名&gt;お&lt;/氏名&gt;
        &lt;電話番号&gt;555-555-5555&lt;/電話番号&gt;
        &lt;住所&gt;▽市▽町&lt;/住所&gt;
    &lt;/学生&gt;
&lt;/学生名簿&gt; 
</snippet></ROW><ROW><id>4827946</id><snippet>import libxml2
import libxslt

styledoc = libxml2.parseFile("test.xsl")
style = libxslt.parseStylesheetDoc(styledoc)
doc = libxml2.parseFile("test.xml")
html = style.applyStylesheet(doc, None)

print style.saveResultToString(html)
</snippet></ROW><ROW><id>4827946</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;学生名簿&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;学生名簿&lt;/h1&gt;
&lt;table border="1"&gt;
&lt;tr&gt;
&lt;th&gt;学生番号&lt;/th&gt;
&lt;th&gt;氏名&lt;/th&gt;
&lt;th&gt;電話番号&lt;/th&gt;
&lt;th&gt;住所&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;あ&lt;/td&gt;
&lt;td&gt;111-111-1111&lt;/td&gt;
&lt;td&gt;○市○町&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;い&lt;/td&gt;
&lt;td&gt;222-222-2222&lt;/td&gt;
&lt;td&gt;×市×町&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;う&lt;/td&gt;
&lt;td&gt;333-333-3333&lt;/td&gt;
&lt;td&gt;△市△町&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;え&lt;/td&gt;
&lt;td&gt;444-444-4444&lt;/td&gt;
&lt;td&gt;◇市◇町&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;お&lt;/td&gt;
&lt;td&gt;555-555-5555&lt;/td&gt;
&lt;td&gt;▽市▽町&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>4827946</id><snippet>&gt;&gt;&gt; style.saveResultToString(html)
'&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;\n&lt;title&gt;\xe5\xad\xa6\xe7\x94\x9f\xe5\x90\x8d\xe7\xb0\xbf&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;\xe5\xad\xa6\xe7\x94\x9f\xe5\x90\x8d\xe7\xb0\xbf&lt;/h1&gt;\n&lt;table border="1"&gt;\n&lt;tr&gt;\n&lt;th&gt;\xe5\xad\xa6\xe7\x94\x9f\xe7\x95\xaa\xe5\x8f\xb7&lt;/th&gt;\n&lt;th&gt;\xe6\xb0\x8f\xe5\x90\x8d&lt;/th&gt;\n&lt;th&gt;\xe9\x9b\xbb\xe8\xa9\xb1\xe7\x95\xaa\xe5\x8f\xb7&lt;/th&gt;\n&lt;th&gt;\xe4\xbd\x8f\xe6\x89\x80&lt;/th&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;23&lt;/td&gt;\n&lt;td&gt;\xe3\x81\x82&lt;/td&gt;\n&lt;td&gt;111-111-1111&lt;/td&gt;\n&lt;td&gt;\xe2\x97\x8b\xe5\xb8\x82\xe2\x97\x8b\xe7\x94\xba&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;20&lt;/td&gt;\n&lt;td&gt;\xe3\x81\x84&lt;/td&gt;\n&lt;td&gt;222-222-2222&lt;/td&gt;\n&lt;td&gt;\xc3\x97\xe5\xb8\x82\xc3\x97\xe7\x94\xba&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;17&lt;/td&gt;\n&lt;td&gt;\xe3\x81\x86&lt;/td&gt;\n&lt;td&gt;333-333-3333&lt;/td&gt;\n&lt;td&gt;\xe2\x96\xb3\xe5\xb8\x82\xe2\x96\xb3\xe7\x94\xba&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;18&lt;/td&gt;\n&lt;td&gt;\xe3\x81\x88&lt;/td&gt;\n&lt;td&gt;444-444-4444&lt;/td&gt;\n&lt;td&gt;\xe2\x97\x87\xe5\xb8\x82\xe2\x97\x87\xe7\x94\xba&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;22&lt;/td&gt;\n&lt;td&gt;\xe3\x81\x8a&lt;/td&gt;\n&lt;td&gt;555-555-5555&lt;/td&gt;\n&lt;td&gt;\xe2\x96\xbd\xe5\xb8\x82\xe2\x96\xbd\xe7\x94\xba&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n'
</snippet></ROW><ROW><id>4827946</id><snippet>&gt;&gt;&gt; style.saveResultToString(html).decode("utf8")
u'&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;\n&lt;title&gt;\u5b66\u751f\u540d\u7c3f&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;\u5b66\u751f\u540d\u7c3f&lt;/h1&gt;\n&lt;table border="1"&gt;\n&lt;tr&gt;\n&lt;th&gt;\u5b66\u751f\u756a\u53f7&lt;/th&gt;\n&lt;th&gt;\u6c0f\u540d&lt;/th&gt;\n&lt;th&gt;\u96fb\u8a71\u756a\u53f7&lt;/th&gt;\n&lt;th&gt;\u4f4f\u6240&lt;/th&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;23&lt;/td&gt;\n&lt;td&gt;\u3042&lt;/td&gt;\n&lt;td&gt;111-111-1111&lt;/td&gt;\n&lt;td&gt;\u25cb\u5e02\u25cb\u753a&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;20&lt;/td&gt;\n&lt;td&gt;\u3044&lt;/td&gt;\n&lt;td&gt;222-222-2222&lt;/td&gt;\n&lt;td&gt;\xd7\u5e02\xd7\u753a&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;17&lt;/td&gt;\n&lt;td&gt;\u3046&lt;/td&gt;\n&lt;td&gt;333-333-3333&lt;/td&gt;\n&lt;td&gt;\u25b3\u5e02\u25b3\u753a&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;18&lt;/td&gt;\n&lt;td&gt;\u3048&lt;/td&gt;\n&lt;td&gt;444-444-4444&lt;/td&gt;\n&lt;td&gt;\u25c7\u5e02\u25c7\u753a&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;22&lt;/td&gt;\n&lt;td&gt;\u304a&lt;/td&gt;\n&lt;td&gt;555-555-5555&lt;/td&gt;\n&lt;td&gt;\u25bd\u5e02\u25bd\u753a&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n'
</snippet></ROW><ROW><id>4828231</id><snippet>import sys
from PyQt4.QtGui import QApplication, QSlider, QMainWindow

class Window(QMainWindow):
    def __init__(self, parent = None):
        super(Window, self).__init__(parent)

        slider = QSlider()
        slider.setMinimum(0)
        slider.setMaximum(100)

        slider.setTickInterval(20)
        slider.setSingleStep(20)


        self.setCentralWidget(slider)


if __name__ == "__main__":
    app = QApplication(sys.argv)

    window = Window()
    window.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>4828285</id><snippet>def tuple_of_primes_less_than( n ):
    if n &lt;= 2: return ()
    else:
        x, p = set( range(2,n) ), 2
        while p &lt;= max(x):
            for k in range(2,int(2+math.sqrt(p))):
                x.discard(k*p)
            p += 1
        return tuple( sorted( x ) )
</snippet></ROW><ROW><id>4828615</id><snippet>{
    '_auth_user_id': 123,
    '_auth_user_backend': 'django.contrib.auth.backends.ModelBackend',
}
</snippet></ROW><ROW><id>4828831</id><snippet>Immutable = collections.namedtuple("Immutable", ["a", "b"])
</snippet></ROW><ROW><id>4828831</id><snippet>[0]</snippet></ROW><ROW><id>4828831</id><snippet>pickle</snippet></ROW><ROW><id>4828831</id><snippet>copy</snippet></ROW><ROW><id>4828831</id><snippet>namedtuple</snippet></ROW><ROW><id>4828831</id><snippet>tuple</snippet></ROW><ROW><id>4828831</id><snippet>__slots__</snippet></ROW><ROW><id>4829057</id><snippet>from dates.format import timesince

environment = jinja2.Environment(whatever)
environment.filters['timesince'] = timesince
# render template here
</snippet></ROW><ROW><id>4829057</id><snippet>{% macro time(mytime) %}
&lt;a title="{{ mytime }}"&gt;{{ mytime|timesince }}&lt;/a&gt;
{% endmacro %}
</snippet></ROW><ROW><id>4829203</id><snippet>query.filter(self.request.get("tag"), self.request.get("tag"))
</snippet></ROW><ROW><id>4829203</id><snippet>=</snippet></ROW><ROW><id>4829285</id><snippet>def on_rm_error( func, path, exc_info):
    # path contains the path of the file that couldn't be removed
    # let's just assume that it's read-only and unlink it.
    os.chmod( path, stat.S_IWRITE )
    os.unlink( path )


shutil.rmtree( TEST_OBJECTS_DIR, onerror = on_rm_error )
</snippet></ROW><ROW><id>4829309</id><snippet>import itertools  

file = open('out.txt', 'w')
variations = itertools.product('abc', repeat=3)  
for variations in variations:  
    variation_string = ""  
    for letter in variations:  
        variation_string += letter  
    file.write(variation_string)
file.close()
</snippet></ROW><ROW><id>4829311</id><snippet>in</snippet></ROW><ROW><id>4829311</id><snippet>.find</snippet></ROW><ROW><id>4829311</id><snippet>def product_search(*params):
    results = []
    upperParams = [ param.upper() for param in params ]

    for product in products:
        name = str(product.name).upper()
        item_number = str(product.item_number).upper()
        for upperParam in upperParams:
            if upperParam in name or upperParam in item_number:
                results.append(product)
    print results
</snippet></ROW><ROW><id>4829384</id><snippet>excel.XlFormatConditionType.xlCellValue
excel.XlFormatConditionOperator.xlGreaterEqual
</snippet></ROW><ROW><id>4829384</id><snippet>win32com.client.constants.xlCellValue
win32com.client.constants.xlGreaterEqual
</snippet></ROW><ROW><id>4829759</id><snippet>import sys
from PyQt4.QtGui import QComboBox, QApplication, QCompleter, QSortFilterProxyModel, QStandardItemModel, QStandardItem
from PyQt4.QtCore import Qt

class ExtendedCombo( QComboBox ):
    def __init__( self,  parent = None):
        super( ExtendedCombo, self ).__init__( parent )

        self.setFocusPolicy( Qt.StrongFocus )
        self.setEditable( True )

        self.setEditable( True )
        self.completer = QCompleter( self )

        # always show all completions
        self.completer.setCompletionMode( QCompleter.UnfilteredPopupCompletion )
        self.pFilterModel = QSortFilterProxyModel( self )
        self.pFilterModel.setFilterCaseSensitivity( Qt.CaseInsensitive )



        self.completer.setPopup( self.view() )


        self.setCompleter( self.completer )


        self.lineEdit().textEdited[unicode].connect( self.pFilterModel.setFilterFixedString )
        self.completer.activated.connect(self.setTextIfCompleterIsClicked)

    def setModel( self, model ):
        super(ExtendedCombo, self).setModel( model )
        self.pFilterModel.setSourceModel( model )
        self.completer.setModel(self.pFilterModel)

    def setModelColumn( self, column ):
        self.completer.setCompletionColumn( column )
        self.pFilterModel.setFilterKeyColumn( column )
        super(ExtendedCombo, self).setModelColumn( column )


    def view( self ):
        return self.completer.popup()

    def index( self ):
        return self.currentIndex()

    def setTextIfCompleterIsClicked(self, text):
      if text:
        index = self.findText(text)
        self.setCurrentIndex(index)

if __name__ == "__main__":
    app = QApplication(sys.argv)

    model = QStandardItemModel()

    for i,word in enumerate( ['hola', 'adios', 'hello', 'good bye'] ):
        item = QStandardItem(word)
        model.setItem(i, 0, item)



    combo = ExtendedCombo()
    combo.setModel(model)
    combo.setModelColumn(0)

    combo.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>4829858</id><snippet>IN</snippet></ROW><ROW><id>4829858</id><snippet>class Item(db.Model):
   ...
   tag = db.StringProperty()

query.filter("tag IN", ["glam", "speaking"])
</snippet></ROW><ROW><id>4829858</id><snippet># Note: Your model must be a Datastore Plus model; this may require some restructuring!
q1 = query.filter("glam =", "glam")
q2 = query.filter("speaking =", "speaking")
for result in q1.OR(q2):
    ....
</snippet></ROW><ROW><id>4829955</id><snippet>v</snippet></ROW><ROW><id>4829955</id><snippet>vnew</snippet></ROW><ROW><id>4829955</id><snippet>unchangeableflag</snippet></ROW><ROW><id>4829955</id><snippet>size*size</snippet></ROW><ROW><id>4829955</id><snippet>v = v.reshape(size, size)
vnew = vnew.reshape(size, size)
unchangeableflag = unchangeableflag.reshape(size, size)
average = v[1:-1, 2:]
average += v[1:-1, :-2] 
average += v[2:, 1:-1]
average += v[-2:, 1:-1]
average /= 4.0
vnew[1:-1, 1:-1][unchangeableflag[1:-1, 1:-1] == 0] = average
</snippet></ROW><ROW><id>4829955</id><snippet>v</snippet></ROW><ROW><id>4829955</id><snippet>dtype</snippet></ROW><ROW><id>4830141</id><snippet>&gt;&gt;&gt; n = 0
&gt;&gt;&gt; while True:
...     y = 8 * 10**n - 64
...     if y % 79 == 0:
...         x = y / 79
...         break
...     n += 1
... 
&gt;&gt;&gt; print x
101265822784
&gt;&gt;&gt; print int("8"+str(x))==8*int(str(x)+"8")
True
</snippet></ROW><ROW><id>4830156</id><snippet>O(n + m)</snippet></ROW><ROW><id>4830156</id><snippet>m</snippet></ROW><ROW><id>4830156</id><snippet>SEA</snippet></ROW><ROW><id>4830156</id><snippet>n</snippet></ROW><ROW><id>4830156</id><snippet>SRC</snippet></ROW><ROW><id>4830156</id><snippet>last = 1
for i = 1 to m do
    while SRC[last] != SEA[i]
        ++last

    print last
    ++last (skip this match)
</snippet></ROW><ROW><id>4830156</id><snippet>SEA</snippet></ROW><ROW><id>4830156</id><snippet>SRC</snippet></ROW><ROW><id>4830156</id><snippet>B</snippet></ROW><ROW><id>4830156</id><snippet>SRC</snippet></ROW><ROW><id>4830156</id><snippet>last = 1</snippet></ROW><ROW><id>4830156</id><snippet>1</snippet></ROW><ROW><id>4830156</id><snippet>last = 2</snippet></ROW><ROW><id>4830156</id><snippet>B</snippet></ROW><ROW><id>4830156</id><snippet>SRC</snippet></ROW><ROW><id>4830156</id><snippet>last = 4</snippet></ROW><ROW><id>4830156</id><snippet>4</snippet></ROW><ROW><id>4830156</id><snippet>last = 5</snippet></ROW><ROW><id>4830156</id><snippet>B</snippet></ROW><ROW><id>4830156</id><snippet>SRC</snippet></ROW><ROW><id>4830156</id><snippet>last = 6</snippet></ROW><ROW><id>4830156</id><snippet>6</snippet></ROW><ROW><id>4830156</id><snippet>last = 7</snippet></ROW><ROW><id>4830156</id><snippet>SRC</snippet></ROW><ROW><id>4830156</id><snippet>SEA</snippet></ROW><ROW><id>4830156</id><snippet>n</snippet></ROW><ROW><id>4830156</id><snippet>find(1, 1), ... find(m, n)</snippet></ROW><ROW><id>4830156</id><snippet>find(i, j)</snippet></ROW><ROW><id>4830156</id><snippet>O(m)</snippet></ROW><ROW><id>4830156</id><snippet>i = 1 to n</snippet></ROW><ROW><id>4830156</id><snippet>i = 1: calls find(2, 2), find(3, 3), ..., find(m, n)
       find(2, 2) calls find(3, 3), ..., find(m, n)
       find(3, 3) calls find(4, 4), ..., find(m, n)
       find(4, 4) calls find(5, 5), ..., find(m, n)
       ...
       total calls: O(m^m)
i = 2: same, but start from find(2, 3).
...
i = n: same
</snippet></ROW><ROW><id>4830156</id><snippet>O(n*m^m)</snippet></ROW><ROW><id>4830247</id><snippet>run()</snippet></ROW><ROW><id>4830247</id><snippet>with context:</snippet></ROW><ROW><id>4830620</id><snippet>{{ car.date_of_manufacture.strftime('%Y-%m-%d') }}
</snippet></ROW><ROW><id>4830620</id><snippet>def format_datetime(value, format='medium'):
    if format == 'full':
        format="EEEE, d. MMMM y 'at' HH:mm"
    elif format == 'medium':
        format="EE dd.MM.y HH:mm"
    return babel.format_datetime(value, format)

jinja_env.filters['datetime'] = format_datetime
</snippet></ROW><ROW><id>4830620</id><snippet>{{ car.date_of_manufacture|datetime }}
</snippet></ROW><ROW><id>4830620</id><snippet>babel.format_timedelta</snippet></ROW><ROW><id>4830631</id><snippet># coding=UTF-8</snippet></ROW><ROW><id>4830631</id><snippet># coding=UTF-8

import os
fname = u'/temp/1-02 Só Danço Samba (Jazz Samba).m4a'
print(os.stat(fname))
</snippet></ROW><ROW><id>4830832</id><snippet>stats{
   'day': '',
   'user_id': 0,
   'hits':{ 
       // Array of your hits document
    }
}
</snippet></ROW><ROW><id>4830959</id><snippet>            formula1 = "=95" 
            formula2 = "=100"
            wb.ActiveSheet.Columns("F:AA").FormatConditions.Add(win32c.xlCellValue , win32c.xlBetween , formula1,formula2)             
            #wb.ActiveSheet.Columns("F:AA").FormatConditions(excel.Selection.FormatConditions.Count).SetFirstPriority()              
            wb.ActiveSheet.Columns("F:AA").FormatConditions(1).Font.Bold = True            
            wb.ActiveSheet.Columns("F:AA").FormatConditions(1).Interior.Color = 8420607                       
            wb.ActiveSheet.Columns("F:AA").FormatConditions(1).StopIfTrue = False 
            wb.ActiveSheet.Columns("F:AA").FormatConditions.Add(win32c.xlCellValue , win32c.xlGreaterEqual , formula2)             
            #wb.ActiveSheet.Columns("F:AA").FormatConditions(excel.Selection.FormatConditions.Count).SetFirstPriority()              
            wb.ActiveSheet.Columns("F:AA").FormatConditions(2).Font.Bold = True          
            wb.ActiveSheet.Columns("F:AA").FormatConditions(2).Interior.Color = 10092543                       
            wb.ActiveSheet.Columns("F:AA").FormatConditions(2).StopIfTrue = False 
</snippet></ROW><ROW><id>4831026</id><snippet>&gt;&gt;&gt; shlex.split(raw_args, posix=False)
['-path', '"\\\\server\\folder\\file.txt"', '-arg', 'SomeValue']
</snippet></ROW><ROW><id>4831241</id><snippet>with open('file_that_works.csv', 'rb') as testfile:     # file is automatically
    d = csv.Sniffer().sniff(testfile.read(1024))        # closed at end of with
                                                        # block
with open(Fn, 'wb') as F:       # also try 'w'
    w = csv.writer(F, dialect=d)
    w.writerow(sym)
</snippet></ROW><ROW><id>4831241</id><snippet>syms = ['JAGHS','GJKDGJ','GJDFAJ']
with open('filename.txt', 'wb') as F:       
    for s in syms[:-1]:                     # separate all but the last
        F.write(s + ',')                    # symbols with commas
    F.write(syms[-1])                       # end with the last symbol
</snippet></ROW><ROW><id>4831241</id><snippet>with open('filename.txt', 'wb') as F:
    F.write(','.join(syms))
</snippet></ROW><ROW><id>4831249</id><snippet>plt.show()</snippet></ROW><ROW><id>4831270</id><snippet>_</snippet></ROW><ROW><id>4831270</id><snippet>__</snippet></ROW><ROW><id>4831358</id><snippet> class Foobar_Collection( dict ):
     def __init__( self, *arg, **kw ):
         super( Foobar_Collection, self ).__init__( *arg, **kw ):
     def foobar( self, *arg, **kw ):
         fb= Foobar( *arg, **kw )
         self[fb.name]= fb
         return fb

 class Foobar( object ):
     def __init__( self, name, something )
         self.name= name
         self.something= something

fc= Foobar_Collection()
fc.foobar( 'first', 42 )
fc.foobar( 'second', 77 ) 

for name in fc:
    print name, fc[name]
</snippet></ROW><ROW><id>4831358</id><snippet>wait_for_deps</snippet></ROW><ROW><id>4832777</id><snippet>chr</snippet></ROW><ROW><id>4832832</id><snippet>eval</snippet></ROW><ROW><id>4832832</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>4832832</id><snippet>&gt;&gt;&gt; c = eval("('item 1', [1,2,3,4] , [4,3,2,1])")
&gt;&gt;&gt; c
('item 1', [1, 2, 3, 4], [4, 3, 2, 1])
</snippet></ROW><ROW><id>4832832</id><snippet>&gt;&gt;&gt; def myFunc(myString, myList1, myList2):
...     print myString, myList1, myList2
... 
&gt;&gt;&gt; myFunc(*eval("('item 1', [1,2,3,4] , [4,3,2,1])"))
item 1 [1, 2, 3, 4] [4, 3, 2, 1]
</snippet></ROW><ROW><id>4832832</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; def myFunc(myString, myList1, myList2):
...     print myString, myList1, myList2
... 
&gt;&gt;&gt; myFunc(*ast.literal_eval("('item 1', [1,2,3,4] , [4,3,2,1])"))
item 1 [1, 2, 3, 4] [4, 3, 2, 1]
</snippet></ROW><ROW><id>4833085</id><snippet>from win32com.client import Dispatch
</snippet></ROW><ROW><id>4833307</id><snippet>sorted</snippet></ROW><ROW><id>4833307</id><snippet>&gt;&gt;&gt; a
set([(2, 7), (4, 7), (6, 7), (5, 7), (7, 7), (0, 7), (1, 7), (3, 7)])
&gt;&gt;&gt; sorted(a)
[(0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7)]
</snippet></ROW><ROW><id>4833455</id><snippet>def newline_callback(matchobj):
    return re.sub(re.compile(r'^(.+)$', re.M),r'\1  ',matchobj.group(0))     

text = re.sub(re.compile(r'(\A|^$\n)(^\w[^\n]*\n)(^\w[^\n]*$)+', re.M), newline_callback, text)
</snippet></ROW><ROW><id>4833455</id><snippet>"apple\npear\norange\n\nruby\npython\nerlang"
-&gt;
"apple  \npear  \norange\n\nruby  \npython  \nerlang"
</snippet></ROW><ROW><id>4833827</id><snippet>SIGNAL</snippet></ROW><ROW><id>4833827</id><snippet>EMIT</snippet></ROW><ROW><id>4833827</id><snippet>QThread</snippet></ROW><ROW><id>4833827</id><snippet>Segmentation Fault</snippet></ROW><ROW><id>4833827</id><snippet>class Binder(QtCore.QThread):
  '''
  Class for binding the actual book
  '''

  def __init__(self, parent = None):
    super(Binder, self).__init__(parent)



  def initialize(self, pages, options, outfile):
    self.pages = pages
    self.options = options
    self.outFile = outfile

    self.book = organizer.Book()
    self.enc = Encoder(self.options)
    self.ocr = ocr.OCR(self.options)

    self.connect(self.enc, QtCore.SIGNAL('updateProgress(int, int)'), self.updateProgress)



  def updateProgress(self, percent, item):
    self.emit(QtCore.SIGNAL('updateProgress(int, QString)'), int(percent), 'Binding the book...')
    self.emit(QtCore.SIGNAL('updateBackground(int, QColor)'), int(item), QtGui.QColor(170, 255, 170, 120))

    if int(percent) == 100:
      time.sleep(0.5)
      self.emit(QtCore.SIGNAL('finishedBinding'))



  def run(self):
    self.die = False

    for page in self.pages:
      self.add_file(page, 'page')

    if not self.die:
      self.analyze()

    if not self.die:
      self.book.get_dpi()

    if self.options['ocr'] and not self.die:
      self.get_ocr()

    if not self.die:
      self.enc.initialize(self.book, self.outFile)
      self.enc.start()
</snippet></ROW><ROW><id>4833860</id><snippet>&lt;form id="currcalc" onsubmit="calculate(); return false;" action="#"&gt;
</snippet></ROW><ROW><id>4833860</id><snippet>  &lt;script type="text/javascript"&gt;
//&lt;![CDATA[
      var test_obj = new Object();
      var price = new Object();
                price['ADP:CUR'] = 122.244;
                price['AED:CUR'] = 3.67295;
                price['AFN:CUR'] = 45.33;
                price['ALL:CUR'] = 102.325;
...
</snippet></ROW><ROW><id>4834026</id><snippet>time</snippet></ROW><ROW><id>4834026</id><snippet>[...]
s_line = line.rstrip()
if line.startswith('time:'):
    part = s_line.split(':', 1)
else:
    part = s_line.split(':')
print part
[...]
</snippet></ROW><ROW><id>4834026</id><snippet>['hostname', 'comp1']
['time', ' Fri Jan 28 20:00:02 GMT 2011']
['ip', 'xxx.xxx.xx.xx']
['fs', 'good', '45']
['memory', 'bad', '78']
['swap', 'good', '34']
['Mail', 'good']
</snippet></ROW><ROW><id>4834026</id><snippet>time</snippet></ROW><ROW><id>4834137</id><snippet>host:~ user$ irb
irb(main):001:0&gt; s = "test"
=&gt; "test"
irb(main):002:0&gt; puts _
test
=&gt; nil
</snippet></ROW><ROW><id>4834298</id><snippet>result_msgs = {
  7: result_7,
  12: result_12,
   ...
}

old_last_result_msg = result_msgs.get(old_last_result,
  "Error code: #%s" % old_last_result)
new_last_result_msg = result_msgs.get(new_last_result,
  "Error code: #%s" % new_last_result)
</snippet></ROW><ROW><id>4834492</id><snippet>class Meal(models.Model):
    name = models.CharField(max_length=10)
    chef = models.ForeignKey(Chef)
    def __unicode__(self):
        return "%s" % self.name
</snippet></ROW><ROW><id>4834492</id><snippet>{% for meal in chef.meal_set.all %}
     {{ meal }}
{% endfor %}
</snippet></ROW><ROW><id>4834562</id><snippet>trade</snippet></ROW><ROW><id>4834562</id><snippet>sys.path</snippet></ROW><ROW><id>4834818</id><snippet>cwd</snippet></ROW><ROW><id>4834818</id><snippet>subprocess.call()</snippet></ROW><ROW><id>4834818</id><snippet>cwd</snippet></ROW><ROW><id>4834818</id><snippet>cwd</snippet></ROW><ROW><id>4834818</id><snippet>cwd</snippet></ROW><ROW><id>4834818</id><snippet>subprocess.call(["/home/blah/trunk/blah/run.sh", "/tmp/ad_xml", "/tmp/video_xml"], cwd='/tmp')
</snippet></ROW><ROW><id>4835120</id><snippet>x = numpy.arange(10)
y = numpy.zeros(x.shape)

y[1:] = x[1:] - x[:-1]

print y
</snippet></ROW><ROW><id>4835147</id><snippet>class Dtracker(dict):
    def __init__(self,*arg,**kw):
        super(Dtracker,self).__init__(*arg,**kw)
    def __getitem__(self,item):
        print "Accessed %s" % str(item)
        return dict.__getitem__(self, item)

def track( fn ):
    def tracked_fn( **kw ):
        kw= Dtracker( kw )
        fn( kw )
    return tracked_fn

@track
def libfn(kw):
    a = kw["foo"]
    print "a is %s" % a
    return a
</snippet></ROW><ROW><id>4835147</id><snippet>&gt;&gt;&gt; libfn( **{'foo':'bar'} )
Accessed foo
a is bar
</snippet></ROW><ROW><id>4835207</id><snippet>$ PYTHONIOENCODING=ascii python -c'print "\xc3\xa9".decode("utf-8")'
</snippet></ROW><ROW><id>4835207</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>4835207</id><snippet>'ascii'</snippet></ROW><ROW><id>4835207</id><snippet>$ PYTHONIOENCODING=utf-8 python -c'print "\xc3\xa9".decode("utf-8")'
é
</snippet></ROW><ROW><id>4835207</id><snippet>$ python -c'import locale; print "\xc3\xa9".decode("utf-8").encode(
&gt; locale.getpreferredencoding())'
é
</snippet></ROW><ROW><id>4835207</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>4835207</id><snippet>$ python -c'import sys; o = sys.stdout; print o.isatty(), o.encoding'
True UTF-8

$ python -c'import sys; o = sys.stdout; print o.isatty(), o.encoding' | cat
False None

$ python -c'import sys; o = sys.stdout; print o.isatty(), o.encoding' &gt;/tmp/out
$ cat /tmp/out
False None
</snippet></ROW><ROW><id>4835207</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>4835207</id><snippet>None</snippet></ROW><ROW><id>4835207</id><snippet>locale.getpreferredencoding()</snippet></ROW><ROW><id>4835207</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>4835207</id><snippet>sys.displayhook()</snippet></ROW><ROW><id>4835239</id><snippet>skiprows</snippet></ROW><ROW><id>4835239</id><snippet>skip_header</snippet></ROW><ROW><id>4835239</id><snippet>numpy.genfromtxt</snippet></ROW><ROW><id>4835239</id><snippet>names=True</snippet></ROW><ROW><id>4835239</id><snippet>usecols</snippet></ROW><ROW><id>4835239</id><snippet>invalid_raise</snippet></ROW><ROW><id>4835450</id><snippet>pass</snippet></ROW><ROW><id>4835450</id><snippet>import types


ARGS_FLAG = 4   #If memory serves, this can be found in code.h in the Python source.
KWARGS_FLAG = 8

def valid(f, args, kwargs):

    def dummy():
        pass

    dummy_code = dummy.func_code
    real_code = f.func_code

    args_flag = real_code.co_flags &amp; ARGS_FLAG
    kwargs_flag = real_code.co_flags &amp; KWARGS_FLAG

    # help(types.CodeType) for details
    test_code = types.CodeType(real_code.co_argcount,
                               real_code.co_nlocals,
                               dummy_code.co_stacksize,
                               args_flag | kwargs_flag,
                               dummy_code.co_code,
                               dummy_code.co_consts,
                               dummy_code.co_names,
                               real_code.co_varnames,
                               "&lt;test&gt;", "", 0, "", ())

    # help(types.FunctionType) for details
    test_func = types.FunctionType(test_code, {}, "test", f.func_defaults)

    try:
        test_func(*args, **kwargs)
    except TypeError:
        return False
    else:
        return True


def x(a, b, c): pass
def y(a, b=1, c=2): pass
def z(a=1, b=2, c=3): pass

print valid(x, ("hello", "goodbye", "what?"), {}) # =&gt; True
print valid(x, ("hello", "goodbye"), {}) # =&gt; False
print valid(y, ("hello", "goodbye", "what?"), {}) # =&gt; True
print valid(y, (), {"a": "hello", "b": "goodbye", "c": "what"}) #=&gt; True
print valid(y, ("hello", "goodbye"), {"c": "what?"}) #=&gt; True
</snippet></ROW><ROW><id>4835450</id><snippet>$ python argspec.py
True
False
True
True
True
</snippet></ROW><ROW><id>4835476</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; mo = re.search ("a", "a")
&gt;&gt;&gt; mo_class = type(mo)
&gt;&gt;&gt; mo_class
&lt;type '_sre.SRE_Match'&gt;
&gt;&gt;&gt; class SubClass(mo_class):
...     pass
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Error when calling the metaclass bases
    type '_sre.SRE_Match' is not an acceptable base type
</snippet></ROW><ROW><id>4835476</id><snippet>type(obj)</snippet></ROW><ROW><id>4835626</id><snippet>with</snippet></ROW><ROW><id>4835626</id><snippet>with</snippet></ROW><ROW><id>4835626</id><snippet>__enter__()</snippet></ROW><ROW><id>4835626</id><snippet>def __enter__(self): return self</snippet></ROW><ROW><id>4836064</id><snippet> a[3:5,4:7] += 1
</snippet></ROW><ROW><id>4836071</id><snippet>def get_male_owners(self):
    return [res for res in self.results if res.owner.sex.male]

def get_cards_5_to_10(self):
    return [res for res in self.results if res.car and self.is_5_to_10(res.car)]

def is_5_to_10(self, car):
    return 5 &lt;= car.age &lt;= 10
</snippet></ROW><ROW><id>4836071</id><snippet>x &lt;= y &lt;= z</snippet></ROW><ROW><id>4836071</id><snippet>(5 &lt;= car.age) &lt;= 10</snippet></ROW><ROW><id>4836192</id><snippet>try:
  f = open('foo', 'r')
  data = f.read()
  f.close()
except IOError as e:
  error_log.write('Unable to open foo : %s\n' % e)
</snippet></ROW><ROW><id>4836192</id><snippet>try:
  f = open('foo', 'r')
except IOError as e:
  error_log.write('Unable to open foo : %s\n' % e)
else:
  data = f.read()
  f.close()
</snippet></ROW><ROW><id>4836309</id><snippet>virtualenv</snippet></ROW><ROW><id>4836309</id><snippet>distribute</snippet></ROW><ROW><id>4836309</id><snippet>pip</snippet></ROW><ROW><id>4836309</id><snippet>$ cd /home/projects
$ /opt/python27/bin/virtualenv acoolproject
$ cd acoolproject
$ ./bin/pip install ThepackageIneed.
</snippet></ROW><ROW><id>4836309</id><snippet>$ ./bin/python main.py
</snippet></ROW><ROW><id>4836309</id><snippet>$ /home7projects/acoolproject/bin/python
</snippet></ROW><ROW><id>4836346</id><snippet>{% for car in cars %}
&lt;h2&gt;Owners of {{ car.manufacturer }}&lt;/h2&gt;
&lt;table id="hor-minimalist-b" summary="Old Cars"&gt;
&lt;thead&gt;
    &lt;tr&gt;
        &lt;th scope="col"&gt;Name&lt;/th&gt;
        &lt;th scope="col"&gt;Age&lt;/th&gt;
        &lt;th scope="col"&gt;Address&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    {% for model in car.models %}
    &lt;tr&gt;
        &lt;td&gt;{{model.name}}&lt;/td&gt;
        &lt;td&gt;{{model.age}}&lt;/td&gt;
        &lt;td&gt;{{model.address}}&lt;/td&gt;
    &lt;/tr&gt;
    {% endfor %}
&lt;/tbody&gt;
&lt;/table&gt;
{% endfor %}
</snippet></ROW><ROW><id>4836346</id><snippet>result = []
manufacturers = Manufacturer.objects.all() # get all manuf
for m in manufacturer:
    mf = dict()
    mf["manufacturer"] = m.name
    mf["models"] = m.model_set.all() # get all linked models
    result.append(mf)
# pass result to template as cars
</snippet></ROW><ROW><id>4836354</id><snippet>ForeignKey</snippet></ROW><ROW><id>4836354</id><snippet>class ForeignKey(RelatedField, Field):
    # snip
    def __init__(self, to, to_field=None, rel_class=ManyToOneRel, **kwargs):
        # snip
        if 'db_index' not in kwargs:
            kwargs['db_index'] = True
</snippet></ROW><ROW><id>4836469</id><snippet>virhilo tmp $ cat l.py 
import logging

logging.basicConfig(filename='exceptions.log', level=logging.DEBUG)

try:
    1/0
except ZeroDivisionError as e:
    logging.debug(e)
virhilo tmp $ python2 l.py 
virhilo tmp $ cat exceptions.log 
DEBUG:root:integer division or modulo by zero
virhilo tmp $ 
</snippet></ROW><ROW><id>4836469</id><snippet>e</snippet></ROW><ROW><id>4836469</id><snippet>traceback.print_exc()</snippet></ROW><ROW><id>4836685</id><snippet>from django.conf import settings
from django.template import RequestContext

def index(request):
        return render_to_response('index.html', {'settings': settings},
        context_instance=RequestContext(request))
</snippet></ROW><ROW><id>4836685</id><snippet>{{ settings.MY_SETTING_NAME }}
</snippet></ROW><ROW><id>4836930</id><snippet>auth_token_key = request.get('auth_token_key')
</snippet></ROW><ROW><id>4836969</id><snippet>&gt;&gt;&gt; from urllib2 import urlopen
&gt;&gt;&gt; from lxml import html
&gt;&gt;&gt; page = urlopen('http://www.amazon.co.uk/')
&gt;&gt;&gt; page_source = html.parse(page)
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(page_source.xpath('//img/@src'))
['http://g-ecx.images-amazon.com/images/G/02/gno/images/orangeBlue/navPackedSprites-UK-15._V202471918_.png',
 'http://g-ecx.images-amazon.com/images/G/02/x-locale/common/transparent-pixel._V192199769_.gif',
 'http://g-ecx.images-amazon.com/images/G/02/x-locale/common/transparent-pixel._V192199769_.gif',
 'http://g-ecx.images-amazon.com/images/G/02/x-locale/common/transparent-pixel._V192199769_.gif',
 'http://g-ecx.images-amazon.com/images/G/02/uk-marketing/xmas10/janbargains/uk-january-bargains-loz75._V175451391_.gif',
 'http://g-ecx.images-amazon.com/images/G/02/UK-Shoe/email/7_jan_11-amzn-sale-loz-1._V173375114_.png',
 'http://g-ecx.images-amazon.com/images/G/02/uk-jw/homepage/uk-wtch-police-roto._V185455265_.png',
 'http://g-ecx.images-amazon.com/images/G/02/kindle/shasta/merch/gw/shasta-gw-bestselling-01a-470x265._V173993687_.jpg',
 'http://ecx.images-amazon.com/images/I/412wF8LJ-uL._SL135_.jpg',
 'http://ecx.images-amazon.com/images/I/51YC5H64AuL._SL135_.jpg',
 'http://ecx.images-amazon.com/images/I/41%2BdpTvM1FL._SL135_.jpg',
 'http://z-ecx.images-amazon.com/images/G/02/x-locale/common/transparent-pixel._V192234675_.gif',
 'http://z-ecx.images-amazon.com/images/G/02/x-locale/common/transparent-pixel._V192234675_.gif',
 'http://g-ecx.images-amazon.com/images/G/01/x-locale/common/transparent-pixel._V42752373_.gif',
 'http://z-ecx.images-amazon.com/images/G/02/x-locale/common/transparent-pixel._V192234675_.gif',
 'http://z-ecx.images-amazon.com/images/G/02/x-locale/common/transparent-pixel._V192234675_.gif',
 'http://g-ecx.images-amazon.com/images/G/02/x-locale/common/transparent-pixel._V192199769_.gif',
 'http://ecx.images-amazon.com/images/I/51-kiOR0NwL._SL135_.jpg',
 'http://ecx.images-amazon.com/images/I/51DRc-7HuxL._SL135_.jpg',
 'http://ecx.images-amazon.com/images/I/51SK5htD22L._SL135_.jpg',
 'http://z-ecx.images-amazon.com/images/G/02/x-locale/common/transparent-pixel._V192234675_.gif',
 'http://z-ecx.images-amazon.com/images/G/02/x-locale/common/transparent-pixel._V192234675_.gif',
 'http://z-ecx.images-amazon.com/images/G/02/x-locale/common/transparent-pixel._V192234675_.gif',
 'http://z-ecx.images-amazon.com/images/G/02/x-locale/common/transparent-pixel._V192234675_.gif',
 'http://ecx.images-amazon.com/images/I/31POT%2BzL1tL._SS120_RO10,1,201,225,243,255,255,255,15_.jpg',
 'http://ecx.images-amazon.com/images/I/41hkDkhjrTL._SS120_RO10,1,201,225,243,255,255,255,15_.jpg',
 'http://ecx.images-amazon.com/images/I/41zDYiAWasL._SS120_RO10,1,201,225,243,255,255,255,15_.jpg',
 'http://ecx.images-amazon.com/images/I/31HqB5H8j%2BL._SS120_RO10,1,201,225,243,255,255,255,15_.jpg',
 'http://g-ecx.images-amazon.com/images/G/02/uk-clothing/Lingerie/UK_APP_LingerieStore_50._V171062881_.png',
 'http://g-ecx.images-amazon.com/images/G/02/uk-pets/graphics/B000FVC1HE_50._V198692831_.jpg',
 'http://g-ecx.images-amazon.com/images/G/02/uk-grocery/images/illy_50._V198779066_.gif',
 'http://g-ecx.images-amazon.com/images/G/02/uk-electronics/MI_Store/UK_MIN_MILaunch_50._V191178779_.png',
 'http://g-ecx.images-amazon.com/images/G/02/uk-lighting/graphics/NoveltyLighting_50._V192237013_.jpg',
 'http://g-ecx.images-amazon.com/images/G/02/UK-Shoe/email/7_jan_11-amzn-sale-TCG-1._V173375108_.png',
 'http://g-ecx.images-amazon.com/images/G/02/gno/images/general/navAmazonLogoFooter._V192252709_.gif']
</snippet></ROW><ROW><id>4837294</id><snippet>PyObject *</snippet></ROW><ROW><id>4837294</id><snippet>int</snippet></ROW><ROW><id>4837294</id><snippet>PyObject *</snippet></ROW><ROW><id>4837294</id><snippet>ctypes</snippet></ROW><ROW><id>4837309</id><snippet>export PYTHONSTARTUP=~/.pythonrc.py
</snippet></ROW><ROW><id>4837571</id><snippet>pip install git+ssh://git@github.com/echweb/echweb-utils.git
</snippet></ROW><ROW><id>4837571</id><snippet>pip install -e URI#egg=EggName
</snippet></ROW><ROW><id>4837662</id><snippet>user = User.objects.get(username='their_username')
user.delete()
</snippet></ROW><ROW><id>4837782</id><snippet>std::vector&lt;Foo&gt;</snippet></ROW><ROW><id>4837782</id><snippet>void bar (std::vector&lt;Foo&gt; arg)
</snippet></ROW><ROW><id>4837782</id><snippet>vector</snippet></ROW><ROW><id>4837782</id><snippet>BOOST_PYTHON_MODULE(awesome_module)
{
    class_&lt;Foo&gt;("Foo")
        //methods and attrs here
    ;

    class_&lt;std::vector&lt;Foo&gt; &gt;("VectorOfFoo")
        .def(vector_indexing_suite&lt;std::vector&lt;foo&gt; &gt;() )
    ;

    .def("bar", &amp;bar)
}
</snippet></ROW><ROW><id>4837782</id><snippet>Foo</snippet></ROW><ROW><id>4837782</id><snippet>vector</snippet></ROW><ROW><id>4837782</id><snippet>bar</snippet></ROW><ROW><id>4837782</id><snippet>from awesome_module import *
foo_vector = VectorOfFoo()
foo_vector.extend(Foo(arg) for arg in arglist)
bar(foo_vector)
</snippet></ROW><ROW><id>4837967</id><snippet>.py</snippet></ROW><ROW><id>4837967</id><snippet>python.exe</snippet></ROW><ROW><id>4837967</id><snippet>django-admin.py</snippet></ROW><ROW><id>4837967</id><snippet>python django-admin.py</snippet></ROW><ROW><id>4837971</id><snippet>import time</snippet></ROW><ROW><id>4837971</id><snippet>time.sleep(1.0)</snippet></ROW><ROW><id>4838161</id><snippet>public function onHTTPServiceResult(event:ResultEvent):void{
 var myResult : XML = event.result as XML
 // process XML in some manner
}
</snippet></ROW><ROW><id>4838161</id><snippet>public function onHTTPServiceResult(event:ResultEvent):void{
 var myResult : String = event.result as String
 // do something with the String value here
}
</snippet></ROW><ROW><id>4838197</id><snippet>__class__</snippet></ROW><ROW><id>4838197</id><snippet>class</snippet></ROW><ROW><id>4838344</id><snippet>tag_list = [u'formal', u'flag', u'photo']
print ", ".join(tag_list)
&gt;&gt; formal, flag, photo
</snippet></ROW><ROW><id>4838541</id><snippet>del l[100:]
</snippet></ROW><ROW><id>4838680</id><snippet>django-admin.py</snippet></ROW><ROW><id>4838684</id><snippet>printf()</snippet></ROW><ROW><id>4838684</id><snippet>GetModuleHandle()</snippet></ROW><ROW><id>4838684</id><snippet>LoadLibrary()</snippet></ROW><ROW><id>4838771</id><snippet>Queue</snippet></ROW><ROW><id>4838771</id><snippet>multiprocessing</snippet></ROW><ROW><id>4838771</id><snippet>map()</snippet></ROW><ROW><id>4838771</id><snippet>TaskClient.map()</snippet></ROW><ROW><id>4838875</id><snippet>import io
import logging
import os
import select
import subprocess
import time
import threading

LOG_FILENAME = 'output.log'
logging.basicConfig(filename=LOG_FILENAME,level=logging.DEBUG)

class StreamLogger(io.IOBase):
    def __init__(self, level):
        self.level = level
        self.pipe = os.pipe()
        self.thread = threading.Thread(target=self._flusher)
        self.thread.start()

    def _flusher(self):
        self._run = True
        buf = b''
        while self._run:
            for fh in select.select([self.pipe[0]], [], [], 0)[0]:
                buf += os.read(fh, 1024)
                while b'\n' in buf:
                    data, buf = buf.split(b'\n', 1)
                    self.write(data.decode())
            time.sleep(1)
        self._run = None

    def write(self, data):
        return logging.log(self.level, data)

    def fileno(self):
        return self.pipe[1]

    def close(self):
        if self._run:
            self._run = False
            while self._run is not None:
                time.sleep(1)
            os.close(self.pipe[0])
            os.close(self.pipe[1])
</snippet></ROW><ROW><id>4838875</id><snippet>with StreamLogger(logging.INFO) as out:
    with StreamLogger(logging.ERROR) as err:
        subprocess.Popen("ls", stdout=out, stderr=err, shell=True)
</snippet></ROW><ROW><id>4838875</id><snippet>INFO:root:output.log
INFO:root:streamlogger.py
INFO:root:and
INFO:root:so
INFO:root:on
</snippet></ROW><ROW><id>4839239</id><snippet>#!/usr/bin/env python
#-*- coding: utf-8 -*-

import sys
from PyQt4.Qt import *

class MyPopup(QWidget):
    def __init__(self):
        QWidget.__init__(self)

    def paintEvent(self, e):
        dc = QPainter(self)
        dc.drawLine(0, 0, 100, 100)
        dc.drawLine(100, 0, 0, 100)

class MainWindow(QMainWindow):
    def __init__(self, *args):
        QMainWindow.__init__(self, *args)
        self.cw = QWidget(self)
        self.setCentralWidget(self.cw)
        self.btn1 = QPushButton("Click me", self.cw)
        self.btn1.setGeometry(QRect(0, 0, 100, 30))
        self.connect(self.btn1, SIGNAL("clicked()"), self.doit)
        self.w = None

    def doit(self):
        print "Opening a new popup window..."
        self.w = MyPopup()
        self.w.setGeometry(QRect(100, 100, 400, 200))
        self.w.show()

class App(QApplication):
    def __init__(self, *args):
        QApplication.__init__(self, *args)
        self.main = MainWindow()
        self.connect(self, SIGNAL("lastWindowClosed()"), self.byebye )
        self.main.show()

    def byebye( self ):
        self.exit(0)

def main(args):
    global app
    app = App(args)
    app.exec_()

if __name__ == "__main__":
    main(sys.argv)
</snippet></ROW><ROW><id>4839239</id><snippet>w = MyPopup(...)</snippet></ROW><ROW><id>4839239</id><snippet>self.w = MyPopup(...)</snippet></ROW><ROW><id>4839239</id><snippet>w</snippet></ROW><ROW><id>4839239</id><snippet>self.w = []</snippet></ROW><ROW><id>4839239</id><snippet>self.w.append(MyPopup(...))</snippet></ROW><ROW><id>4839324</id><snippet>repr()</snippet></ROW><ROW><id>4839324</id><snippet>&gt;&gt;&gt; dictionary = {'foo': 3, u'bar': [6.7]}
&gt;&gt;&gt; str = repr(dictionary)
&gt;&gt;&gt; str
"{'foo': 3, u'bar': [6.7000000000000002]}"
&gt;&gt;&gt; exec("adict = " + str)
&gt;&gt;&gt; adict
{'foo': 3, u'bar': [6.7000000000000002]}
</snippet></ROW><ROW><id>4839335</id><snippet>Dice.__init__</snippet></ROW><ROW><id>4839335</id><snippet>from_n_sided_dice</snippet></ROW><ROW><id>4839335</id><snippet>Dice</snippet></ROW><ROW><id>4839335</id><snippet>@staticmethod
def from_n_sided_dice(num_dice, sides):
    return Dice([Die(sides)] * num_dice)
</snippet></ROW><ROW><id>4839335</id><snippet>[Die(sides)] * num_dice</snippet></ROW><ROW><id>4839335</id><snippet>[Die(sides) for _ in range(num_dice)]</snippet></ROW><ROW><id>4839335</id><snippet>*args</snippet></ROW><ROW><id>4839335</id><snippet>**kwargs</snippet></ROW><ROW><id>4839385</id><snippet>import *</snippet></ROW><ROW><id>4839385</id><snippet>from Tkinter import Tk, Label</snippet></ROW><ROW><id>4839507</id><snippet>(r'^resources/$',
 lambda request: ListView.as_view(queryset=Resources.objects.filter(user=request.user.username), ...)(request)
)
</snippet></ROW><ROW><id>4839507</id><snippet>class MyListView(ListView):
    def dispatch(self, request, *args, **kwargs):
        self.queryset = Resources.objects.filter(user = request.user.username)
        return super(MyListView, self).dispatch(request, *args, **kwargs)
</snippet></ROW><ROW><id>4839519</id><snippet>from google.appengine.api import users

class Premium(webapp.RequestHandler):
  def get(self):
    user = users.get_current_user()
    if not user:
      this.redirect(users.create_login_url(this.request.uri))
    # Your normal page code here
</snippet></ROW><ROW><id>4839831</id><snippet>import logging
...

logger = logging.getLogger("blabla")
...

try:
    print blah # You can use logger.debug("blah") instead of print
except KeyError:
    logger.exception("An error occurred")
</snippet></ROW><ROW><id>4839860</id><snippet>&gt;&gt;&gt; def reformat(artist,beg):
...   if artist.startswith(beg):
...     artist = artist[len(beg):] + ', ' + beg.strip()
...   return artist
...
&gt;&gt;&gt; reformat('The Beatles','The ')
'Beatles, The'
&gt;&gt;&gt; reformat('An Officer and a Gentleman','An ')
'Officer and a Gentleman, An'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4839906</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class MainForm(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MainForm, self).__init__(parent)

        # create button
        self.button = QtGui.QPushButton("test button", self)       
        self.button.resize(100, 30)

        # set button context menu policy
        self.button.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.connect(self.button, QtCore.SIGNAL('customContextMenuRequested(const QPoint&amp;)'), self.on_context_menu)

        # create context menu
        self.popMenu = QtGui.QMenu(self)
        self.popMenu.addAction(QtGui.QAction('test0', self))
        self.popMenu.addAction(QtGui.QAction('test1', self))
        self.popMenu.addSeparator()
        self.popMenu.addAction(QtGui.QAction('test2', self))        

    def on_context_menu(self, point):
        # show context menu
        self.popMenu.exec_(self.button.mapToGlobal(point))        

def main():
    app = QtGui.QApplication(sys.argv)
    form = MainForm()
    form.show()
    app.exec_()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4840006</id><snippet>p = re.compile('\d+\.\s+(\w+)\s+(\w+)\s+-\s+(\d+)')
m = p.match(the_line)
// m.group(0) will be the first word
// m.group(1) the second word
// m.group(2) will be the firstnumber after the last word.

The regexp is :&lt;some digits&gt;&lt;a dot&gt;
&lt;some whitespace&gt;&lt;alphanumeric characters, captured as group 0&gt;
&lt;some whtespace&gt;&lt;alphanumeric characters, captured as group 1&gt;
&lt;some whitespace&gt;&lt;a '-'&gt;&lt;some witespace&gt;&lt;digits, captured as group 2&gt;
</snippet></ROW><ROW><id>4840161</id><snippet>&lt;Configure&gt;</snippet></ROW><ROW><id>4840262</id><snippet>$ py manage.py migrate wall</snippet></ROW><ROW><id>4840262</id><snippet>$ py manage.py migrate wall 0001 --fake</snippet></ROW><ROW><id>4840262</id><snippet>python manage.py schemamigration app_name --initial</snippet></ROW><ROW><id>4840262</id><snippet>python manage.py migrate app_name</snippet></ROW><ROW><id>4840262</id><snippet>python manage.py schemamigration app_name --initial</snippet></ROW><ROW><id>4840262</id><snippet>python manage.py migrate app_name 0001 --fake</snippet></ROW><ROW><id>4840262</id><snippet>python manage.py schemamigration app_name --initial</snippet></ROW><ROW><id>4840262</id><snippet>python manage.py migrate</snippet></ROW><ROW><id>4840262</id><snippet>python manage.py schemamigration app_name migration_name --auto</snippet></ROW><ROW><id>4840262</id><snippet>python manage.py migrate</snippet></ROW><ROW><id>4840271</id><snippet>afc = {'Baltimore Ravens': (10,3), 'Pb Steelers': (3,4)}
</snippet></ROW><ROW><id>4840271</id><snippet>afc = {'Baltimore Ravens': {'wins':10,'losses': 3}, 'Pb Steelers': {'wins': 3,'losses': 4}}
</snippet></ROW><ROW><id>4840272</id><snippet>grid_sizer_1 = wx.GridSizer(3, 3, 0, 0)
grid_sizer_1.AddMany( [
  (self.button_last_page, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL),
  (self.button_up, 0, wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL),
  (self.button_next_page, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL),
  (self.button_left, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL),
  (self.button_select, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL),
  (self.button_right, 0, wx.ALIGN_CENTER_VERTICAL),
  (wx.StaticText(self, -1, ''), 0, wx.EXPAND),
  (self.button_down, 0, wx.ALIGN_CENTER_HORIZONTAL) ] )
</snippet></ROW><ROW><id>4840277</id><snippet>form.filename</snippet></ROW><ROW><id>4840277</id><snippet>class UploadFileForm(ModelForm):
    def save(self, commit=True):
        instance = ModelForm.save(self, commit=False)
        instance.filename = self.files['theFile'].name

        if commit:
            instance.save()

        return instance

    class Meta:
        model = UploadFile
        fields = ('title', 'theFile', 'date_uploaded',) # Don't prompt for filename
</snippet></ROW><ROW><id>4840277</id><snippet>upload_file = form.save(commit=False)
upload_file.filename = request.FILES['theFile'].name
upload_file.save()
</snippet></ROW><ROW><id>4840429</id><snippet>[(x,fx,gx) for (x,fx,gx) in ((x,fx,g(fx)) for (x,fx) in ((x,f(x)) for x in bigList) if fx &lt; p) if gx&lt;q]
</snippet></ROW><ROW><id>4840429</id><snippet>[(x,f,g) for (x,f,g) in
  ((x,f,g(f)) for (x,f) in
     ((x,f(x)) for x in bigList)
  if f &lt; p)
if g&lt;q]
</snippet></ROW><ROW><id>4840429</id><snippet>f</snippet></ROW><ROW><id>4840429</id><snippet>g</snippet></ROW><ROW><id>4840429</id><snippet>f(x)</snippet></ROW><ROW><id>4840429</id><snippet>&lt; p</snippet></ROW><ROW><id>4840429</id><snippet>g</snippet></ROW><ROW><id>4840429</id><snippet>f</snippet></ROW><ROW><id>4840429</id><snippet>bigList</snippet></ROW><ROW><id>4840429</id><snippet>a = ( (x,f(x)) for x in bigList )
b = ( (x,fx,g(fx)) for (x,fx) in a if fx&lt;p )
results = [ c for c in b if c[2] &lt; q ] # faster than writing out full tuples
</snippet></ROW><ROW><id>4840429</id><snippet>a</snippet></ROW><ROW><id>4840429</id><snippet>b</snippet></ROW><ROW><id>4840617</id><snippet>"{name} is a {adjective} {noun} that {verb}".format(**locals())
</snippet></ROW><ROW><id>4840617</id><snippet>locals()</snippet></ROW><ROW><id>4840617</id><snippet>**locals()</snippet></ROW><ROW><id>4840617</id><snippet>f(**{'a': 0, 'b': 1})</snippet></ROW><ROW><id>4840617</id><snippet>f(a=0, b=1)</snippet></ROW><ROW><id>4840617</id><snippet>.format()</snippet></ROW><ROW><id>4840617</id><snippet>{0.name}</snippet></ROW><ROW><id>4840617</id><snippet>string.template</snippet></ROW><ROW><id>4840617</id><snippet>{'name': name, ...}</snippet></ROW><ROW><id>4840786</id><snippet>cur.execute('UPDATE workunits SET Completed=1, Returns=? WHERE PID=? AND Args=?',
    (pickle.dumps(Ret), PID, Args)
)
</snippet></ROW><ROW><id>4840805</id><snippet>.lstrip()</snippet></ROW><ROW><id>4840805</id><snippet>"aaaaaaaabbbbbbbc".lstrip("ab")  # "c"
</snippet></ROW><ROW><id>4841051</id><snippet>&gt;&gt;&gt;&gt; y="A %{foo} is a %{bar}"

&gt;&gt;&gt;&gt; for a,b,c,d in y._formatter_parser(): print b

foo

bar
</snippet></ROW><ROW><id>4841051</id><snippet>&gt;&gt;&gt;&gt; import string
&gt;&gt;&gt;&gt; x = string.Formatter()
&gt;&gt;&gt;&gt; elements = x.parse(y)
&gt;&gt;&gt;&gt; for a,b,c,d in elements: print b
</snippet></ROW><ROW><id>4841125</id><snippet>query = db.GqlQuery("SELECT * FROM Item ORDER BY date DESC")
cursor = self.request.get('cursor')
if cursor: query.with_cursor(cursor)
items = query.fetch(30)
cursor = query.cursor()

... your regular output ...

self.response.out.write('&lt;a href="yoururl?cursor=%s"&gt;Next Page&lt;/a&gt;' % cursor)
</snippet></ROW><ROW><id>4841225</id><snippet>icfg = Matrix2D_icfg("icfg") #declaring object
icfg_compress = pickle.dumps(icfg) #to pickle

icfg = pickle.loads(str(icfg_compress)) # to unload
</snippet></ROW><ROW><id>4841275</id><snippet>br.form.add_file(open(FILENAME), 'text/plain', FILENAME)
br.form.set_all_readonly(False)
</snippet></ROW><ROW><id>4841472</id><snippet>def attrs(**kwds):
    def decorate(f):
        for k in kwds:
            setattr(f, k, kwds[k])
        return f
    return decorate

@attrs(argument_types=(int, int,),
       returns=int)
def add(a, b):
    return a + b
</snippet></ROW><ROW><id>4841472</id><snippet>f_inspect</snippet></ROW><ROW><id>4841472</id><snippet>add.argument_types</snippet></ROW><ROW><id>4841472</id><snippet>add.returns</snippet></ROW><ROW><id>4841472</id><snippet>add</snippet></ROW><ROW><id>4841667</id><snippet>from pylab import *
A = rand(5,5)
figure(1)
imshow(A, interpolation='nearest')
grid(True)
</snippet></ROW><ROW><id>4841850</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; input = "Hamro sano ghar holata."
&gt;&gt;&gt; regex = re.compile(ur'a([rmnu])') # the part in parens is remembered
&gt;&gt;&gt; print regex.sub(ur'ā\1', input) # replace by ā plus remembered part
Hāmro sāno ghār holata.
</snippet></ROW><ROW><id>4841850</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; inputString = u"संगम"
&gt;&gt;&gt; regex = re.compile(ur'\u0902(?=[कखगघ])')
&gt;&gt;&gt; print regex.sub(ur'ङ\u094d', inputString)
सङ्गम
</snippet></ROW><ROW><id>4841855</id><snippet>class Node:
     def __init__(self, wordList=None, adjacencyList=None):
        if wordList is None:
            self.wordList = []
        else:
             self.wordList = wordList 
        if adjacencyList is None:
            self.adjacencyList = []
        else:
             self.adjacencyList = adjacencyList 
</snippet></ROW><ROW><id>4841961</id><snippet>a = (1,2)</snippet></ROW><ROW><id>4841961</id><snippet>b = list(a); b.remove(1)</snippet></ROW><ROW><id>4841961</id><snippet>a</snippet></ROW><ROW><id>4841961</id><snippet>b</snippet></ROW><ROW><id>4841961</id><snippet>a</snippet></ROW><ROW><id>4841961</id><snippet>a</snippet></ROW><ROW><id>4841961</id><snippet>a</snippet></ROW><ROW><id>4842095</id><snippet>with open(filename) as f_in:
    lines = (line.rstrip() for line in f_in) # All lines including the blank ones
    lines = (line for line in lines if line) # Non-blank lines
</snippet></ROW><ROW><id>4842095</id><snippet>lines</snippet></ROW><ROW><id>4842095</id><snippet>with open(filename) as f_in:
    lines = (line.rstrip() for line in f_in) 
    lines = list(line for line in lines if line) # Non-blank lines in a list
</snippet></ROW><ROW><id>4842095</id><snippet>with</snippet></ROW><ROW><id>4842095</id><snippet>with open(filename) as f_in:
    lines = list(line for line in (l.strip() for l in f_in) if line)
</snippet></ROW><ROW><id>4842095</id><snippet>def nonblank_lines(f):
    for l in f:
        line = l.rstrip()
        if line:
            yield line
</snippet></ROW><ROW><id>4842095</id><snippet>with open(filename) as f_in:
    for line in nonblank_lines(f_in):
        # Stuff
</snippet></ROW><ROW><id>4842095</id><snippet>with open(filename) as f_in:
    lines = filter(None, (line.rstrip() for line in f_in))
</snippet></ROW><ROW><id>4842095</id><snippet>lines = filter(None, (line.rstrip() for line in open(filename)))
</snippet></ROW><ROW><id>4842095</id><snippet>itertools.ifilter</snippet></ROW><ROW><id>4842095</id><snippet>list</snippet></ROW><ROW><id>4842237</id><snippet>/var/www/django/log
</snippet></ROW><ROW><id>4842318</id><snippet>&gt;&gt;&gt; 1/2
0.5
</snippet></ROW><ROW><id>4842318</id><snippet>&gt;&gt;&gt; 1.0/2
0.5
</snippet></ROW><ROW><id>4842318</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 1/2
0.5
</snippet></ROW><ROW><id>4842318</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; a = Fraction(1, 2) #or Fraction('1/2')
&gt;&gt;&gt; a
Fraction(1, 2)
&gt;&gt;&gt; print a
1/2
&gt;&gt;&gt; float(a)
0.5
</snippet></ROW><ROW><id>4842361</id><snippet>[buildout]
extensions = mr.developer
</snippet></ROW><ROW><id>4842361</id><snippet>[sources]</snippet></ROW><ROW><id>4842361</id><snippet>[sources]
pack1 = hg https://repo.xxx.com/hg/pack1/
pack2 = hg https://repo.xxx.com/hg/pack2/
</snippet></ROW><ROW><id>4842361</id><snippet>auto-checkout</snippet></ROW><ROW><id>4842361</id><snippet>[buildout]</snippet></ROW><ROW><id>4842361</id><snippet>[buildout]
extensions = mr.developer
auto-checkout =
    pack1
    pack2
</snippet></ROW><ROW><id>4842361</id><snippet>eggs</snippet></ROW><ROW><id>4842361</id><snippet>bin/developer</snippet></ROW><ROW><id>4842479</id><snippet>%d</snippet></ROW><ROW><id>4842479</id><snippet>C</snippet></ROW><ROW><id>4842479</id><snippet>96</snippet></ROW><ROW><id>4842479</id><snippet>%d</snippet></ROW><ROW><id>4842479</id><snippet>%d</snippet></ROW><ROW><id>4842479</id><snippet>'&gt;%dL'%96</snippet></ROW><ROW><id>4842479</id><snippet>struct.unpack</snippet></ROW><ROW><id>4842479</id><snippet>'&gt;%dL'</snippet></ROW><ROW><id>4842479</id><snippet>unpack</snippet></ROW><ROW><id>4842479</id><snippet>'&gt;%dL'</snippet></ROW><ROW><id>4842479</id><snippet>'&gt;96L'</snippet></ROW><ROW><id>4842741</id><snippet>frame</snippet></ROW><ROW><id>4842741</id><snippet>gray</snippet></ROW><ROW><id>4842741</id><snippet>printf("frame.nChannels: %d gray.nChannels: %d\n", frame.nChannels, gray.nChannels);
</snippet></ROW><ROW><id>4842741</id><snippet>frame</snippet></ROW><ROW><id>4842741</id><snippet>gray</snippet></ROW><ROW><id>4842741</id><snippet>frame</snippet></ROW><ROW><id>4842741</id><snippet>cv.CV_LOAD_IMAGE_COLOR</snippet></ROW><ROW><id>4842741</id><snippet>cv.LoadImage</snippet></ROW><ROW><id>4842741</id><snippet>gray</snippet></ROW><ROW><id>4842741</id><snippet>gray=cv.CreateImage(cv.GetSize(frame), frame.depth, 1)</snippet></ROW><ROW><id>4842965</id><snippet>list2 = [x for x in list1 if x != []]
</snippet></ROW><ROW><id>4842965</id><snippet>list2 = [x for x in list1 if x]
</snippet></ROW><ROW><id>4843172</id><snippet>some_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456']
if any("abc" in s for s in some_list):
    # whatever
</snippet></ROW><ROW><id>4843172</id><snippet>matching = [s for s in some_list if "abc" in s]
</snippet></ROW><ROW><id>4843213</id><snippet>N = 3</snippet></ROW><ROW><id>4843213</id><snippet>D2</snippet></ROW><ROW><id>4843213</id><snippet>      1  /  1 -2  1  0  0 \
D2 = --- |  0  1 -2  1  0 |
     h^2 \  0  0  1 -2  1 /
</snippet></ROW><ROW><id>4843213</id><snippet>x_1</snippet></ROW><ROW><id>4843213</id><snippet>1/h^2 * (u_0 - 2*u_1 + u_2)</snippet></ROW><ROW><id>4843213</id><snippet>u_0 = 0</snippet></ROW><ROW><id>4843213</id><snippet>      1  /  0 -2  1  0  0 \
D2 = --- |  0  1 -2  1  0 |
     h^2 \  0  0  1 -2  0 /
</snippet></ROW><ROW><id>4843213</id><snippet>u_0</snippet></ROW><ROW><id>4843213</id><snippet>u_{n+1}</snippet></ROW><ROW><id>4843213</id><snippet>      1  /  2  1  0 \
D2 = --- |  1 -2  1 |
     h^2 \  0  1 -2 /
</snippet></ROW><ROW><id>4843333</id><snippet>#ifndef PYTHONPATH
#   define PYTHONPATH L".\\DLLs;.\\lib;.\\lib\\plat-win"
</snippet></ROW><ROW><id>4843333</id><snippet>make PYTHONPATH=../lib:../Lib:./lib:./Lib
</snippet></ROW><ROW><id>4843333</id><snippet>/mnt/key/
├── AUTORUN.INF 
├── Lib
│   ├── os.py
│   ├── sys.py
│   ├── ...
│   └── (Here i'll put the Python Standard Library)
├── Linux
│   └── python
└── Windows
    ├── python.exe
    └── pythonw.exe
</snippet></ROW><ROW><id>4843674</id><snippet>K = self.request.get_all("article_tag")
</snippet></ROW><ROW><id>4843714</id><snippet>CACHE_TIMEOUT_SECONDS = 60 * 60 * 24 # this is 24 hours

class CalendarManager(models.Manager):

    def get_calendar_by_date(self, by_date):
        """ assuming date is a datetime object """
        date_key = by_date.strftime("%m_%d_%Y")
        cache_key = 'CAL_DATE_%s' % (date_key)
        cal_date = cache.get(cache_key)
        if cal_date is not None:
            return cal_date

        # not in cache get from database
        cal_date = self.filter(event_date=by_date)

        # set cal_date in cache for later use
        cache.set(cache_key, cal_date, CACHE_TIMEOUT_SECONDS)
        return cal_date
</snippet></ROW><ROW><id>4843805</id><snippet>sorted(cards, key=lambda x: CARD_ORDER.index(x[0]))
</snippet></ROW><ROW><id>4843805</id><snippet>key</snippet></ROW><ROW><id>4843805</id><snippet>cmp</snippet></ROW><ROW><id>4843846</id><snippet>os.path.commonprefix</snippet></ROW><ROW><id>4843846</id><snippet>import os.path as _osp

def is_inside(file_path, folder_path):
    full_file_path = _osp.realpath(file_path)
    full_folder_path = _osp.realpath(folder_path)
    return _osp.commonprefix([full_file_path, full_folder_path]) == \
           full_folder_path
</snippet></ROW><ROW><id>4843861</id><snippet>&gt;&gt;&gt; re.split(r'(\d+)', 'a1b2c30d40')
['a', '1', 'b', '2', 'c', '30', 'd', '40', '']
</snippet></ROW><ROW><id>4843861</id><snippet>\d</snippet></ROW><ROW><id>4843861</id><snippet>+</snippet></ROW><ROW><id>4843861</id><snippet>\d+</snippet></ROW><ROW><id>4843861</id><snippet>()</snippet></ROW><ROW><id>4843861</id><snippet>re.split</snippet></ROW><ROW><id>4843861</id><snippet>['a', 'b', 'c', 'd', '']</snippet></ROW><ROW><id>4844143</id><snippet>node = pydot.Node("ε",shape = "ellipse", style="filled", fillcolor="turquoise")</snippet></ROW><ROW><id>4844424</id><snippet>def cumulative_sum(n):
    cum_sum = []
    y = 0
    for i in n:   # &lt;--- i will contain elements (not indices) from n
        y += i    # &lt;--- so you need to add i, not n[i]
        cum_sum.append(y)
    print cum_sum

a = [1,2,3]
cumulative_sum(a)
</snippet></ROW><ROW><id>4844424</id><snippet>n[i]</snippet></ROW><ROW><id>4844424</id><snippet>i</snippet></ROW><ROW><id>4844424</id><snippet>n[3]</snippet></ROW><ROW><id>4844424</id><snippet>n</snippet></ROW><ROW><id>4844442</id><snippet>for</snippet></ROW><ROW><id>4844442</id><snippet>iter()</snippet></ROW><ROW><id>4844442</id><snippet>X</snippet></ROW><ROW><id>4844442</id><snippet>iter()</snippet></ROW><ROW><id>4844442</id><snippet>X</snippet></ROW><ROW><id>4844442</id><snippet>__iter__</snippet></ROW><ROW><id>4844442</id><snippet>__getitem__</snippet></ROW><ROW><id>4844442</id><snippet>__iter__</snippet></ROW><ROW><id>4844442</id><snippet>TypeError: 'Nothing' object is not iterable</snippet></ROW><ROW><id>4844442</id><snippet>__getitem__</snippet></ROW><ROW><id>4844442</id><snippet>class GetItem(object):
    def __init__(self, data):
        self.data = data

    def __getitem__(self, x):
        return self.data[x]
</snippet></ROW><ROW><id>4844442</id><snippet>&gt;&gt;&gt; data = range(10)
&gt;&gt;&gt; print [x*x for x in GetItem(data)]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</snippet></ROW><ROW><id>4844442</id><snippet>__iter__</snippet></ROW><ROW><id>4844442</id><snippet>class TheIterator(object):
    def __init__(self, data):
        self.data = data
        self.index = -1

    # Note: In  Python 3 this is called __next__
    def next(self):
        self.index += 1
        try:
            return self.data[self.index]
        except IndexError:
            raise StopIteration

    def __iter__(self):
        return self

class Iter(object):
    def __init__(self, data):
        self.data = data

    def __iter__(self):
        return TheIterator(data)
</snippet></ROW><ROW><id>4844442</id><snippet>&gt;&gt;&gt; data = range(10)
&gt;&gt;&gt; print [x*x for x in Iter(data)]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</snippet></ROW><ROW><id>4844442</id><snippet>__iter__</snippet></ROW><ROW><id>4844442</id><snippet>class CombinedIter(object):
    def __init__(self, data):
        self.data = data

    def __iter__(self):
        self.index = -1
        return self

    def next(self):
        self.index += 1
        try:
            return self.data[self.index]
        except IndexError:
            raise StopIteration
</snippet></ROW><ROW><id>4844442</id><snippet>&gt;&gt;&gt; well, you get it, it's all the same...
</snippet></ROW><ROW><id>4844442</id><snippet>class CheatIter(object):
    def __init__(self, data):
        self.data = data

    def __iter__(self):
        return iter(self.data)
</snippet></ROW><ROW><id>4844442</id><snippet>__iter__</snippet></ROW><ROW><id>4844442</id><snippet>list</snippet></ROW><ROW><id>4844442</id><snippet>__iter__</snippet></ROW><ROW><id>4844442</id><snippet>class Generator(object):
    def __init__(self, data):
        self.data = data

    def __iter__(self):
        for x in self.data:
            yield x
</snippet></ROW><ROW><id>4844646</id><snippet>with open("input.txt") as f:
    for s in f:
        print(s.split(",")[1])
</snippet></ROW><ROW><id>4844911</id><snippet>include-site-packages</snippet></ROW><ROW><id>4844911</id><snippet>allowed-eggs-from-site-packages</snippet></ROW><ROW><id>4844962</id><snippet>&gt;&gt;&gt; x = 1.2345678
&gt;&gt;&gt; '%.2f' % x
'1.23'
</snippet></ROW><ROW><id>4844974</id><snippet>subprocess.Popen( '/usr/bin/git status', cwd = os.path.dirname( path ), shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE )
</snippet></ROW><ROW><id>4845279</id><snippet>ADMIN_ENABLED = True
</snippet></ROW><ROW><id>4845279</id><snippet>ADMIN_ENABLED = False
</snippet></ROW><ROW><id>4845279</id><snippet>if settings.ADMIN_ENABLED:
    urlpatterns += patterns('',
        (r'^admin/(.*)', include(admin.site.urls)),
        # ..maybe other stuff you want to be dev-only, etc...
        )
</snippet></ROW><ROW><id>4845324</id><snippet>import base64
import zlib
compressed = 'eJwdktkNgDAMQxfqR+5j/8V4QUJQUttx3Nrzl0+f+uunPPpm+Tf3Z/tKX1DM5bXP+wUFA777bCob4HMRfUk14QwfDYPrrA5gcuQB49lQQxdZpdr+1oN2bEA3pW5Nf8NGOFsR19NBszyX7G2raQpkVUEBdbTLuwSRlcDCYiW7GeBaRYJrgImrM3lmI/WsIxFXNd+aszXoRXuZ1PnZRdwKJeqYYYKq6y1++PXOYdgM0TlZcymCOdKqR7HYmYPiRslDr2Sn6C0Wgw+a6MakM2VnBk6HwU6uWqDRz+p6wtKTCg2WsfdKJwfJlHNaFT4+Q7PGfR9hyWK3p3464nhFwpOd7kdvjmz1jpWcxmbG/FJUXdMZgrpzs+jxC11twrBo3TaNgvsf8oqIYwT4r9XkPnNC1XcP7qD5cW7UHSJZ3my5qba+ozncl5kz8gGEEYOQ'
data = zlib.decompress(base64.b64decode(compressed))
</snippet></ROW><ROW><id>4845324</id><snippet>&gt;&gt;&gt; data
'2,3,5,1,13,7,17,11,89,1,233,29,61,47,1597,19,37,41,421,199,28657,23,3001,521,53,281,514229,31,557,2207,19801,3571,141961,107,73,9349,135721,2161,2789,211,433494437,43,109441,139,2971215073,1103,97,101,6376021,90481,953,5779,661,14503,797,59,353,2521,4513,3010349,35239681,1087,14736206161,9901,269,67,137,71,6673,103681,9375829,54018521,230686501,29134601,988681,79,157,1601,2269,370248451,99194853094755497,83,9521,6709,173,263,1069,181,741469,4969,4531100550901,6643838879,761,769,193,599786069,197,401,743519377,919,519121,103,8288823481,119218851371,1247833,11128427,827728777,331,1459000305513721,10745088481,677,229,1381,347,29717,709,159512939815855788121,'
</snippet></ROW><ROW><id>4845395</id><snippet>&lt;br&gt;
from geopy import geocoders&lt;br&gt;
gn = geocoders.Google()&lt;br&gt;
    place, (lat, lng) = gn.geocode("istanbul")&lt;br&gt;
    print place</snippet></ROW><ROW><id>4845395</id><snippet> Istanbul/Istanbul Province, Turkey</snippet></ROW><ROW><id>4845580</id><snippet>ctypes</snippet></ROW><ROW><id>4845580</id><snippet>import ctypes
from ctypes import wintypes

def get_appdata_directory():
    CSIDL_APPDATA = 0x001a

    dll = ctypes.windll.shell32
    app_data_directory = ctypes.create_unicode_buffer(wintypes.MAX_PATH)

    found = dll.SHGetFolderPathW(0, CSIDL_APPDATA, 0, 0, app_data_directory)

    # FYI: if `found` is False, then it failed to locate the appdata directory
    # and app_data_directory.value is empty. So you might want to add some
    # code here to verify that a valid path is going to be returned.

    # This would probably only happen on older versions of windows, 
    # but, this is just a guess as I don't have any older OSs available
    # for testing. (see my note below)

    return app_data_directory.value

appdata = get_appdata_directory()
print(appdata)
# outputs something such as: 'C:\Users\bob\AppData'
</snippet></ROW><ROW><id>4845580</id><snippet>appdata</snippet></ROW><ROW><id>4845580</id><snippet>platform</snippet></ROW><ROW><id>4845606</id><snippet>ValueError</snippet></ROW><ROW><id>4845606</id><snippet>"{0:&gt;17}".format(11.1)
</snippet></ROW><ROW><id>4845700</id><snippet>class Command(object):
    def subcommand(method): # Regular function in class definition scope.
        method.is_subcommand = True

        return method

    @subcommand
    def common(self):
        print "this subcommand is available to all child classes"

    subcommand = staticmethod(subcommand)
    # Now a static method. Can no longer be called during class definition phase.
</snippet></ROW><ROW><id>4845700</id><snippet>class Command(object):
    @staticmethod
    def subcommand(method):
        method.is_subcommand = True

        return method

class CommandBase(Command):

    @Command.subcommand
    def common(self):
        print "this subcommand is available to all child classes"
</snippet></ROW><ROW><id>4845700</id><snippet>CommandBase</snippet></ROW><ROW><id>4845700</id><snippet>Command</snippet></ROW><ROW><id>4846064</id><snippet>transientvariables = []
transientvariables.append(makenewtransientvariable())
# ...
for tv in transientvariables:
    print tv
</snippet></ROW><ROW><id>4846064</id><snippet>transients["tempPipe1"]
</snippet></ROW><ROW><id>4846064</id><snippet>transients["temp"]["Pipe1"]
</snippet></ROW><ROW><id>4846064</id><snippet>__getattr__</snippet></ROW><ROW><id>4846064</id><snippet>transients.tempPipe1
</snippet></ROW><ROW><id>4846064</id><snippet>__getattr__</snippet></ROW><ROW><id>4846064</id><snippet>def __getattr__(self, name):
    if name in self.varMap:
        return self.varMap[name]
    raise AttributeError
</snippet></ROW><ROW><id>4846067</id><snippet>__init__</snippet></ROW><ROW><id>4846067</id><snippet>self</snippet></ROW><ROW><id>4846067</id><snippet>self1.pag1</snippet></ROW><ROW><id>4846067</id><snippet>NovoRegisto.variable_name</snippet></ROW><ROW><id>4846067</id><snippet>self</snippet></ROW><ROW><id>4846067</id><snippet>self.pag1</snippet></ROW><ROW><id>4846067</id><snippet>super(InfoOT, self).__init__(parent)
</snippet></ROW><ROW><id>4846067</id><snippet>wx.Panel.__init__(self, parent)
</snippet></ROW><ROW><id>4846067</id><snippet>object</snippet></ROW><ROW><id>4846467</id><snippet>Explicit is better than implicit.
</snippet></ROW><ROW><id>4846467</id><snippet>__init__</snippet></ROW><ROW><id>4846467</id><snippet>def injectArguments(inFunction):
    """
    This function allows to reduce code for initialization 
    of parameters of a method through the @-notation
    You need to call this function before the method in this way: 
    @injectArguments
    """
    def outFunction(*args, **kwargs):
        _self = args[0]
        _self.__dict__.update(kwargs)
        # Get all of argument's names of the inFunction
        _total_names = \
            inFunction.func_code.co_varnames[1:inFunction.func_code.co_argcount]
        # Get all of the values
        _values = args[1:]
        # Get only the names that don't belong to kwargs
        _names = [n for n in _total_names if not kwargs.has_key(n)]

        # Match names with values and update __dict__
        d={}
        for n, v in zip(_names,_values):
            d[n] = v
        _self.__dict__.update(d)
        inFunction(*args,**kwargs)

    return outFunction
</snippet></ROW><ROW><id>4846467</id><snippet>class Test:
    @injectArguments
    def __init__(self, name, surname):
        pass

if __name__=='__main__':
    t = Test('mickey', surname='mouse')
    print t.name, t.surname
</snippet></ROW><ROW><id>4846534</id><snippet>example_instance = example(**{var_under_study: value})
</snippet></ROW><ROW><id>4846923</id><snippet>from subprocess import Popen, PIPE
dd_process = Popen(['dd', 'if=/dev/sda'], stdout=PIPE)
ssh_process = Popen(['ssh', 'root@example.com', 'dd','of=/dev/sda'],stdin=dd_process.stdout, stdout=PIPE)
out, err = ssh_process.communicate()
</snippet></ROW><ROW><id>4847311</id><snippet>maketrans</snippet></ROW><ROW><id>4847311</id><snippet>Python 2.6.6 (r266:84297, Aug 24 2010, 18:46:32) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; delete_chars=''.join(chr(i) for i in xrange(32))
&gt;&gt;&gt; '\x00abc\x01def\x1fg'.translate(None,delete_chars)
'abcdefg'
</snippet></ROW><ROW><id>4847311</id><snippet>Python 2.6.6 (r266:84297, Aug 24 2010, 18:46:32) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; delete_chars = dict.fromkeys(range(32))
&gt;&gt;&gt; u'\x00abc\x01def\x1fg'.translate(delete_chars)
u'abcdefg'
</snippet></ROW><ROW><id>4847311</id><snippet>Python 3.1.3 (r313:86834, Nov 27 2010, 18:30:53) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; delete_chars = dict.fromkeys(range(32))
&gt;&gt;&gt; '\x00abc\x01def\x1fg'.translate(delete_chars)
'abcdefg'
</snippet></ROW><ROW><id>4847311</id><snippet>help(str.translate)</snippet></ROW><ROW><id>4847311</id><snippet>help(unicode.translate)</snippet></ROW><ROW><id>4847408</id><snippet>Image.new(...)</snippet></ROW><ROW><id>4847408</id><snippet>Image.open(...)</snippet></ROW><ROW><id>4847408</id><snippet>self.i.put(...)</snippet></ROW><ROW><id>4847493</id><snippet># myproject/myapp/management/commands/my_command.py

from django.core.management.base import NoArgsCommand
from django.template import Template, Context
from django.conf import settings

class Command(NoArgsCommand):
    def handle_noargs(self, **options):
        t=Template("My name is {myname}.")
        c=Context({"myname":"John"})
        f = open('write_test.txt', 'w')
        f.write(t.render(c))
        f.close
</snippet></ROW><ROW><id>4847493</id><snippet>python manage.py my_command
</snippet></ROW><ROW><id>4847549</id><snippet>python Journal.py
</snippet></ROW><ROW><id>4847549</id><snippet>./Journal.py
</snippet></ROW><ROW><id>4847574</id><snippet>base.py</snippet></ROW><ROW><id>4847574</id><snippet>__init__.py</snippet></ROW><ROW><id>4847574</id><snippet>bar/controller/__init__.py</snippet></ROW><ROW><id>4847574</id><snippet>import os,sys
# Make sure the interpreter knows were your files are.
sys.path.append(os.path.join(os.path.dirname(__file__),'../')
from bar.controller import Controller
from bar.model import Model
from bar.view import View
class Controller(object):
 model = Model()
 view = View()
</snippet></ROW><ROW><id>4847574</id><snippet>bar/model/__init__.py</snippet></ROW><ROW><id>4847574</id><snippet>bar/view/__init__.py</snippet></ROW><ROW><id>4847574</id><snippet>bar/controller/__init__.py</snippet></ROW><ROW><id>4847574</id><snippet>class Model(object):
 pass
class View(object):
 pass
class Controller(object):
 model = Model()
 view = View()
</snippet></ROW><ROW><id>4847574</id><snippet>bar/
  __init__.py
  controller.py
  model.py
  view.py
</snippet></ROW><ROW><id>4847574</id><snippet>controller.py</snippet></ROW><ROW><id>4847574</id><snippet>import os,sys
from bar.controller import Controller
from bar.model import Model
from bar.view import View
class Controller(object):
 model = Model()
 view = View()
</snippet></ROW><ROW><id>4847634</id><snippet>raw_input</snippet></ROW><ROW><id>4847634</id><snippet>input</snippet></ROW><ROW><id>4847634</id><snippet>input</snippet></ROW><ROW><id>4847634</id><snippet>{}</snippet></ROW><ROW><id>4847634</id><snippet>db.commit</snippet></ROW><ROW><id>4847634</id><snippet>db.commit()</snippet></ROW><ROW><id>4847634</id><snippet>&gt;&gt;&gt; import pythonmakenote
</snippet></ROW><ROW><id>4847634</id><snippet>&gt;&gt;&gt; pythonmakenote.mn()
</snippet></ROW><ROW><id>4847634</id><snippet>&gt;&gt;&gt; from pythonmakenote import mn
&gt;&gt;&gt; mn()
</snippet></ROW><ROW><id>4847634</id><snippet>db.execute('INSERT INTO note (note_txt) VALUES (?)', notetxt)
</snippet></ROW><ROW><id>4847634</id><snippet>db.execute('INSERT INTO note (note_txt) VALUES (?)', (notetxt,))
</snippet></ROW><ROW><id>4847634</id><snippet>execute</snippet></ROW><ROW><id>4847634</id><snippet>14 bindings</snippet></ROW><ROW><id>4847634</id><snippet>(xxx,)</snippet></ROW><ROW><id>4847634</id><snippet>[xxx]</snippet></ROW><ROW><id>4847634</id><snippet>import sys
import sqlite3

def mn():
    conn = sqlite3.connect('data.db')
    db = conn.cursor()
    db.execute('select tag_text from tag')
    tagssofar = db.fetchall()
    print tagssofar

    print "Enter note text, remember to let console wrap long lines"
    notetxt = raw_input("note: ") 

    print "Enter 1 or more tags separated by spaces"
    taglist = raw_input("tags: ")
    taglist = taglist.split()

    db.execute('INSERT INTO note (note_txt) VALUES (?)', [notetxt])
    conn.commit()
    db.execute('select last_insert_rowid()')
    fknote = db.fetchone()[0]
    print fknote

    #records new tags since db trigger stops dups, updates many-many tbl

    for tagtxt in taglist: 
        db.execute('INSERT INTO tag VALUES (?)',[tagtxt])
        conn.commit()
        db.execute('select rowid from tag where tag_text = (?)',[tagtxt])
        fktag = db.fetchone()[0]
        print fktag
        db.execute('INSERT INTO fkeys VALUES (?,?)',[fknote,fktag])
        conn.commit()
</snippet></ROW><ROW><id>4847660</id><snippet>def copy(src, dst):
    if os.path.islink(src):
        linkto = os.readlink(src)
        os.symlink(linkto, dst)
    else:
        shutil.copy(src,dst)
</snippet></ROW><ROW><id>4847755</id><snippet>im</snippet></ROW><ROW><id>4847755</id><snippet>im = Image.open(r'C:\Python26\Suite\test.png')
im = ImageDraw.Draw(im)
im = im.point((0, 0), fill="red")
</snippet></ROW><ROW><id>4847755</id><snippet>ImageTk.PhotoImage(im)</snippet></ROW><ROW><id>4847755</id><snippet>im</snippet></ROW><ROW><id>4847755</id><snippet>point()</snippet></ROW><ROW><id>4847755</id><snippet>None</snippet></ROW><ROW><id>4847755</id><snippet>ImageDraw</snippet></ROW><ROW><id>4847755</id><snippet>ImageDraw</snippet></ROW><ROW><id>4847755</id><snippet>ImageDraw</snippet></ROW><ROW><id>4847755</id><snippet>__init__</snippet></ROW><ROW><id>4847755</id><snippet>def __init__(self):
    Tkinter.Tk.__init__(self)
    self.configure(bg='red')
    im = Image.open(r'C:\Python26\Suite\test.png')
    width, height = im.size
    self.ImbImage = Tkinter.Canvas(self, highlightthickness=0, bd=0, bg='red', width=width, height=height)
    self.ImbImage.pack()
    print im.format, im.size, im.mode

    draw = ImageDraw.Draw(im)
    draw.rectangle([0, 0, 40, 40 ],  fill="green")
    del draw

    self.i = ImageTk.PhotoImage(im)
    self.ImbImage.create_image(width/2, height/2, image=self.i)
</snippet></ROW><ROW><id>4847755</id><snippet>ImageDraw</snippet></ROW><ROW><id>4847755</id><snippet>draw.rectangle</snippet></ROW><ROW><id>4847755</id><snippet>None</snippet></ROW><ROW><id>4847755</id><snippet>draw</snippet></ROW><ROW><id>4847755</id><snippet>create_image</snippet></ROW><ROW><id>4848084</id><snippet>insert</snippet></ROW><ROW><id>4848084</id><snippet>show</snippet></ROW><ROW><id>4848084</id><snippet>show_all</snippet></ROW><ROW><id>4848272</id><snippet>set</snippet></ROW><ROW><id>4848272</id><snippet>numbers_in_nxn = random.sample(range(n*n), k) # Use xrange in Python 2.x
tuples_in_nxn = [divmod(x,n) for x in numbers_in_nxn]
</snippet></ROW><ROW><id>4848879</id><snippet>string.join(words[, sep])  
</snippet></ROW><ROW><id>4848879</id><snippet>str.join(iterable)    
</snippet></ROW><ROW><id>4848879</id><snippet>string.join()</snippet></ROW><ROW><id>4848879</id><snippet>join()</snippet></ROW><ROW><id>4849021</id><snippet> import TheSurface
 class Agent:
  ...
   def Move(self,x,y):
     surface = TheSurface.getSurface()
     surface.canIMoveTo(x,y)
     ....
</snippet></ROW><ROW><id>4849442</id><snippet>elif</snippet></ROW><ROW><id>4849442</id><snippet>{% if role == 'Login' %}
 ... stuff
{% else %}{% if role eq 'Admin' %}
 ... stuff
{% endif %}
</snippet></ROW><ROW><id>4849442</id><snippet>ifequal</snippet></ROW><ROW><id>4849442</id><snippet>{% ifequal role "Login" %}
 ... stuff
{% else %}{% ifequal role "Admin" %}
 ... stuff
{% endifequal %}
</snippet></ROW><ROW><id>4850571</id><snippet>__new__()</snippet></ROW><ROW><id>4850571</id><snippet>cls</snippet></ROW><ROW><id>4850571</id><snippet>__init__</snippet></ROW><ROW><id>4850571</id><snippet>__init__(self[, ...])</snippet></ROW><ROW><id>4850571</id><snippet>self</snippet></ROW><ROW><id>4850571</id><snippet>__new__()</snippet></ROW><ROW><id>4850571</id><snippet>set.__init__</snippet></ROW><ROW><id>4850571</id><snippet>class derivedset2(set):
    def __new__(cls,*args):
        return set.__new__(cls,*args)

    def __init__(self, *initial_values):
        set.__init__(self, initial_values)
</snippet></ROW><ROW><id>4850571</id><snippet>__init__</snippet></ROW><ROW><id>4850571</id><snippet>__new__</snippet></ROW><ROW><id>4850571</id><snippet>frozenset</snippet></ROW><ROW><id>4850571</id><snippet>frozenset</snippet></ROW><ROW><id>4850571</id><snippet>frozenset</snippet></ROW><ROW><id>4850571</id><snippet>frozenset</snippet></ROW><ROW><id>4850571</id><snippet>set([])</snippet></ROW><ROW><id>4850571</id><snippet>derivedset2([])</snippet></ROW><ROW><id>4850577</id><snippet>class MyForm(ModelForm):
    error_css_class = 'error'
</snippet></ROW><ROW><id>4850603</id><snippet>python-devel</snippet></ROW><ROW><id>4850603</id><snippet>Python.h</snippet></ROW><ROW><id>4850603</id><snippet># first, makes sure distutils.sysconfig usable
if ! $(python -c "import distutils.sysconfig.get_config_vars" &amp;&gt; /dev/null); then
    echo "ERROR: distutils.sysconfig not usable" &gt;&amp;2
    exit 2
fi

# get include path for this python version
INCLUDE_PY=$(python -c "from distutils import sysconfig as s; print s.get_config_vars()['INCLUDEPY']")
if [ ! -f "${INCLUDE_PY}/Python.h" ]; then
    echo "ERROR: python-devel not installed" &gt;&amp;2
    exit 3
fi
</snippet></ROW><ROW><id>4850603</id><snippet>distutils.sysconfig</snippet></ROW><ROW><id>4850603</id><snippet>apt</snippet></ROW><ROW><id>4850603</id><snippet>rpm</snippet></ROW><ROW><id>4850603</id><snippet>configure.ac</snippet></ROW><ROW><id>4850603</id><snippet>python-devel</snippet></ROW><ROW><id>4850603</id><snippet>./configure</snippet></ROW><ROW><id>4850611</id><snippet>localhost</snippet></ROW><ROW><id>4850611</id><snippet>127.0.0.1</snippet></ROW><ROW><id>4850611</id><snippet>manage.py runserver</snippet></ROW><ROW><id>4850624</id><snippet>Qt::WindowStaysOnTopHint</snippet></ROW><ROW><id>4851555</id><snippet>num_converted</snippet></ROW><ROW><id>4851555</id><snippet>num_converted = [0]
def convert_variables(m):
    name = m.group(1)
    num_converted[0] += 1
    return '&lt;%%= %s %%&gt;' % name
</snippet></ROW><ROW><id>4851820</id><snippet>foo.blogspot.com</snippet></ROW><ROW><id>4851820</id><snippet>foo.blogspot.com</snippet></ROW><ROW><id>4851820</id><snippet>&lt;link rel="openid.server" href="http://www.blogger.com/openid-server.g" /&gt;
</snippet></ROW><ROW><id>4851820</id><snippet>OpenIdMixin</snippet></ROW><ROW><id>4851820</id><snippet>GoogleMixin</snippet></ROW><ROW><id>4851820</id><snippet>OpenIdMixin</snippet></ROW><ROW><id>4851820</id><snippet>class GoogleMixin(OpenIdMixin, OAuthMixin):
    """A :class:`tipfy.RequestHandler` mixin that implements Google OpenId /
    OAuth authentication.
</snippet></ROW><ROW><id>4851820</id><snippet>_OPENID_ENDPOINT = 'https://www.google.com/accounts/o8/ud'
</snippet></ROW><ROW><id>4851820</id><snippet>OpenIdMixin</snippet></ROW><ROW><id>4851820</id><snippet>GoogleMixin</snippet></ROW><ROW><id>4851820</id><snippet>FriendFeedMixin</snippet></ROW><ROW><id>4851820</id><snippet>FaceBookMixin</snippet></ROW><ROW><id>4851820</id><snippet>openid.consumer.consumer.py</snippet></ROW><ROW><id>4851820</id><snippet>OpenIdMixin</snippet></ROW><ROW><id>4853266</id><snippet>&gt;&gt;&gt;import pygame
&gt;&gt;&gt;pygame.init()
&gt;&gt;&gt;clock = pygame.time.Clock()
&gt;&gt;&gt;a = list(range(100000))
&gt;&gt;&gt;def do_with_range():
...    clock.tick()
...    k = 0
...    for i in range(len(a)):
...        k += a[i]
...    print(clock.tick())
&gt;&gt;&gt;def do_with_enumerate():
...    clock.tick()
...    k = 0
...    for i, j in enumerate(a):
...        k += j
...    print(clock.tick())
&gt;&gt;&gt;do_with_range()
23
&gt;&gt;&gt;do_with_enumerate()
21
</snippet></ROW><ROW><id>4853386</id><snippet>class_&lt;Foo&gt;("Foo") 
    .def("setValue", &amp;Foo::setValue&lt;double&gt;, 
        return_value_policy&lt;reference_existing_object&gt;()) 
    .def("getValue", &amp;Foo::getValue&lt;double&gt;,
        return_value_policy&lt;copy_const_reference&gt;()) 
    .def("getValue", &amp;Foo::getValue&lt;std::string&gt;, 
        return_value_policy&lt;copy_const_reference&gt;()) 
    .def("setValue", &amp;Foo::setValue&lt;std::string&gt;, 
        return_value_policy&lt;reference_existing_object&gt;());
</snippet></ROW><ROW><id>4853386</id><snippet>Foo&amp; setValueDouble(foo&amp; self, const string&amp; propertyName, const double value)
{ 
    return self.setValue(propertyName, value)
}
...
</snippet></ROW><ROW><id>4854247</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; x = tuple(range(100))
&gt;&gt;&gt; random.choice(x)
8
</snippet></ROW><ROW><id>4854247</id><snippet>def first(_tuple):
    return _tuple[randint(0, len(_tuple) - 1)]

def second(_tuple):
    return choice(_tuple)

print timeit('first(t)', 'from __main__ import first; t = tuple(range(10))')        
print timeit('second(t)', 'from __main__ import second; t = tuple(range(10))')
</snippet></ROW><ROW><id>4854247</id><snippet>2.73662090302
1.01494002342
</snippet></ROW><ROW><id>4854273</id><snippet>static PyStringObject *characters[UCHAR_MAX + 1];

PyObject *
PyString_FromStringAndSize(const char *str, Py_ssize_t size)
{
    register PyStringObject *op;
    if (size == 1 &amp;&amp; str != NULL &amp;&amp;
        (op = characters[*str &amp; UCHAR_MAX]) != NULL)
    {
        Py_INCREF(op);
        return (PyObject *)op;
    }

...
</snippet></ROW><ROW><id>4854402</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; 
&gt;&gt;&gt; data = "billg@microsoft.com;steve@apple.com;  dhh@37signals.com"
&gt;&gt;&gt; stuff = re.split(r"\s*[,;]\s*", data.strip())
</snippet></ROW><ROW><id>4855043</id><snippet>fsync_config_exception</snippet></ROW><ROW><id>4855043</id><snippet>__init__()</snippet></ROW><ROW><id>4855223</id><snippet>import collections
def download_file(url):
    # Bundle together the bunch of browser calls necessary to download one file.
    browser.follow_link(...)
    ...
    response=browser.response()
    data=response.read()

urls=collections.deque(urls)

while urls:
    url=urls.popleft()
    try:
        download_file(url)
    except IOError as err:
        if err.args[1].args[0].errno != errno.ECONNRESET:
            raise
        else:
            # if ECONNRESET error, add the url back to urls to try again later
            urls.append(url)
</snippet></ROW><ROW><id>4855663</id><snippet>str()</snippet></ROW><ROW><id>4855663</id><snippet>u</snippet></ROW><ROW><id>4855663</id><snippet>u'string'</snippet></ROW><ROW><id>4855663</id><snippet>&gt;&gt;&gt; a = u'hello'
&gt;&gt;&gt; a
u'hello'
&gt;&gt;&gt; str(a)
'hello'
</snippet></ROW><ROW><id>4855820</id><snippet>myHandles = []
</snippet></ROW><ROW><id>4856260</id><snippet>StringIO</snippet></ROW><ROW><id>4856260</id><snippet>s = cStringIO.StringIO(line)
r = csv.reader(s)
next(r)
# "['007147', 'John Smith', '100 Farley Ln', '', 'Berlin NH 03570', 'Berlin', 'NH', '2450000', 'John', '24643203', '3454', 'E', '', '2345071', '1201', 'N', '15465', 'I', '.00', '20102456', '945610', '20247320', '1245712', '0T', '.00100000', '', '.00', '.00', '780', 'D', '000', '.00', '0']"
</snippet></ROW><ROW><id>4856260</id><snippet>StringIO</snippet></ROW><ROW><id>4856260</id><snippet>write()</snippet></ROW><ROW><id>4856260</id><snippet>read()</snippet></ROW><ROW><id>4856260</id><snippet>s.reset()</snippet></ROW><ROW><id>4856260</id><snippet>s.seek(0)</snippet></ROW><ROW><id>4856260</id><snippet>StringIO</snippet></ROW><ROW><id>4856367</id><snippet>require 'net/http'

url = URI.parse('http://www.yellowpages.com.au/search/listings?clue=plumber&amp;locationClue=Australia')
req = Net::HTTP::Get.new(url.path)
res = Net::HTTP.start(url.host, url.port) {|http|   http.request(req) }    
puts res.body
</snippet></ROW><ROW><id>4856367</id><snippet>counter = 0

20.times do
  url = URI.parse('http://www.yellowpages.com.au/search/listings?clue=plumber&amp;locationClue=Australia')
  req = Net::HTTP::Get.new(url.path)
  res = Net::HTTP.start(url.host, url.port) {|http|   http.request(req) }    
  sleep 1
  counter +=1 unless res.body.empty?
end

puts counter
</snippet></ROW><ROW><id>4856367</id><snippet>curl "http://www.yellowpages.com.au/search/listings?clue=plumber&amp;locationClue=Australia"
</snippet></ROW><ROW><id>4856375</id><snippet>open</snippet></ROW><ROW><id>4856375</id><snippet>O_CREAT</snippet></ROW><ROW><id>4856375</id><snippet>int open(const char *pathname, int flags, mode_t mode);
</snippet></ROW><ROW><id>4856375</id><snippet>umask</snippet></ROW><ROW><id>4856553</id><snippet>thefile.read()
</snippet></ROW><ROW><id>4856684</id><snippet>subprocess.call</snippet></ROW><ROW><id>4856684</id><snippet>None</snippet></ROW><ROW><id>4856684</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>4856684</id><snippet>open</snippet></ROW><ROW><id>4856684</id><snippet>call</snippet></ROW><ROW><id>4856684</id><snippet>f = open("blah.txt", "w")
subprocess.call(["/home/myuser/run.sh", "/tmp/ad_xml",  "/tmp/video_xml"], stdout=f)
</snippet></ROW><ROW><id>4856684</id><snippet>stderr=subprocess.STDOUT</snippet></ROW><ROW><id>4856692</id><snippet>def pdista(X):
    """Squared pairwise distances between all columns of X."""
    B= np.dot(X.T, X)
    q= np.diag(B)[:, None]
    return q+ q.T- 2* B
</snippet></ROW><ROW><id>4856783</id><snippet>$ easy_install -Z --prefix . psycopg2
</snippet></ROW><ROW><id>4856885</id><snippet>for ticker in tickers:
   t = Thread(target = quotes, args = (ticker,) )
</snippet></ROW><ROW><id>4857079</id><snippet>&lt;br&gt;&lt;br&gt;import re&lt;br&gt;
text = "[Customer01]\nName: Mr Smith\nAddress: Somewhere\nTelephone: 01234567489\n[Customer02]\nName: Mr Jones\nAddress: Laandon\nTelephone:\n[Customer03]\nName: Mr Brown\nAddress: Bibble\nTelephone: 077764312"&lt;br&gt;
blah = re.search("[Customer02]\nName:\s*(.*?)\n", text)&lt;br&gt;
print blah.group(1)</snippet></ROW><ROW><id>4857121</id><snippet>import wx
from wx.lib.wordwrap import wordwrap
import wx.lib.agw.ultimatelistctrl as ULC   

class Frame(wx.Frame):
    def __init__(self, *args, **kw):
        wx.Frame.__init__(self, *args, **kw)

        self.list = ULC.UltimateListCtrl(self, agwStyle=ULC.ULC_REPORT|ULC.ULC_HAS_VARIABLE_ROW_HEIGHT)
        items = ['A', 'b', 'a really really long line that if would be nice if it could word-wrap']
        colWidth = 100
        self.list.InsertColumn(0, "AA", width=colWidth)
        for item in items:
            item = wordwrap(item, colWidth, wx.ClientDC(self))
            self.list.InsertStringItem(0, item)

app = wx.App(False)
frm = Frame(None, title="ULC wordwrap test")
frm.Show()
app.MainLoop()
</snippet></ROW><ROW><id>4857146</id><snippet>ExtEntry.objects.filter(categories=my_category)
</snippet></ROW><ROW><id>4857146</id><snippet>select_related</snippet></ROW><ROW><id>4857146</id><snippet>for e in category.entry_set.select_related('extentry'):
    e.extentry # already loaded because of `select_related`, 
               # however might be None if there is no Extentry for current e
</snippet></ROW><ROW><id>4857146</id><snippet>for e in category.entry_set.select_related('extentry').exlude(extentry=None):
    e.extentry # now this definitely is something, not None
</snippet></ROW><ROW><id>4857146</id><snippet>SELECT entry.*, extentry.* FROM entry
LEFT OUTER JOIN `extentry` ON (entry.id = extentry.entry_ptr_id) 
WHERE NOT (entry.id IN (SELECT U0.id FROM entry U0 LEFT OUTER JOIN 
                        extentry U1 ON (U0.id = U1.entry_ptr_id) 
                        WHERE U1.entry_ptr_id IS NULL))
</snippet></ROW><ROW><id>4857146</id><snippet>ExtEntry.objects.filter()</snippet></ROW><ROW><id>4857337</id><snippet>select field1, field2, field3 from SomeTable
</snippet></ROW><ROW><id>4857337</id><snippet>[{'field1' : 1, 'field2' : 'asdf', 'field3' : 3.234},
 {'field1' : 0, 'field2' : 'Some string here', 'field3', 0.93284},]
</snippet></ROW><ROW><id>4857393</id><snippet>from BeautifulSoup import BeautifulSoup
doc = ['&lt;html&gt;&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;',
       '&lt;body&gt;&lt;p id="firstpara" align="center"&gt;This is paragraph &lt;b&gt;one&lt;/b&gt;.',
       '&lt;p id="secondpara" align="blah"&gt;This is paragraph &lt;b&gt;two&lt;/b&gt;.',
       '&lt;/html&gt;']
soup = BeautifulSoup(''.join(doc))
soup.findAll('b')
[&lt;b&gt;one&lt;/b&gt;, &lt;b&gt;two&lt;/b&gt;]
</snippet></ROW><ROW><id>4857393</id><snippet>aa = doc[0]
aa
'&lt;html&gt;&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;'
pt = re.compile('(?&lt;=&lt;title&gt;).*?(?=&lt;/title&gt;)')
re.findall(pt,aa)
['Page title']
</snippet></ROW><ROW><id>4857404</id><snippet>&gt;&gt;&gt; names = [trend["name"] for trend in retrieved[0]["trends"]]
&gt;&gt;&gt; names
['#wishuwould', '#questionsidontlike', '#februarywish', 'Purp &amp; Patron', 'Egyptians', 'Kool Herc', 'American Pie', 'Judge Vinson', 'Eureka Nutt', 'Eddie House']
</snippet></ROW><ROW><id>4857404</id><snippet>json</snippet></ROW><ROW><id>4857404</id><snippet>retrieved</snippet></ROW><ROW><id>4857404</id><snippet>trends</snippet></ROW><ROW><id>4857404</id><snippet>retrieved[0]["trends"]</snippet></ROW><ROW><id>4857404</id><snippet>name</snippet></ROW><ROW><id>4857535</id><snippet>import httplib

images = ['img1.png', 'img2.png', 'img3.png']

conn = httplib.HTTPConnection('www.example.com')

for image in images:
    conn.request('GET', '/images/%s' % image)
    resp = conn.getresponse()
    data = resp.read()
    with open(image, 'wb') as f:
        f.write(data)

conn.close()
</snippet></ROW><ROW><id>4857604</id><snippet>&gt;&gt;&gt; class C(object):
...     def __str__(self):
...         return 'oops: ' + oops
...
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; str(c)
NameError: global name 'oops' is not defined
</snippet></ROW><ROW><id>4857604</id><snippet>unicode</snippet></ROW><ROW><id>4857604</id><snippet>&gt;&gt;&gt; u = u'\xff'
&gt;&gt;&gt; s = str(u)
UnicodeEncodeError: 'ascii' codec can't encode character u'\xff' in position 0:
ordinal not in range(128)
</snippet></ROW><ROW><id>4857926</id><snippet>main</snippet></ROW><ROW><id>4857926</id><snippet>main</snippet></ROW><ROW><id>4857967</id><snippet>QComboBox
</snippet></ROW><ROW><id>4857967</id><snippet>QListWidget
</snippet></ROW><ROW><id>4857967</id><snippet>editor = QtGui.QComboBox(parent)
</snippet></ROW><ROW><id>4858123</id><snippet>import sys
sys.modules.keys()​​​
</snippet></ROW><ROW><id>4858123</id><snippet>globals()</snippet></ROW><ROW><id>4858123</id><snippet>import types
def imports():
    for name, val in globals().items():
        if isinstance(val, types.ModuleType):
            yield val.__name__
</snippet></ROW><ROW><id>4858123</id><snippet>from x import y</snippet></ROW><ROW><id>4858123</id><snippet>val.__name__</snippet></ROW><ROW><id>4858123</id><snippet>import module as alias</snippet></ROW><ROW><id>4858134</id><snippet>and</snippet></ROW><ROW><id>4858134</id><snippet>a() and b()
</snippet></ROW><ROW><id>4858134</id><snippet>a()</snippet></ROW><ROW><id>4858134</id><snippet>True</snippet></ROW><ROW><id>4858134</id><snippet>b()</snippet></ROW><ROW><id>4858134</id><snippet>a()</snippet></ROW><ROW><id>4858134</id><snippet>False</snippet></ROW><ROW><id>4858134</id><snippet>b()</snippet></ROW><ROW><id>4858134</id><snippet>b()</snippet></ROW><ROW><id>4858134</id><snippet>a()</snippet></ROW><ROW><id>4858134</id><snippet>False</snippet></ROW><ROW><id>4858369</id><snippet>def make_class(x):
    class C(A):
        p = x
    return C
</snippet></ROW><ROW><id>4858400</id><snippet>foo</snippet></ROW><ROW><id>4858400</id><snippet>defer</snippet></ROW><ROW><id>4858750</id><snippet>from email.mime.multipart import MIMEMultipart</snippet></ROW><ROW><id>4859105</id><snippet>data = simplejson.loads(yourString)
for image in data['images']:
    image['viewurl'] = '/view?imagekey=%s' %(image['imagekey'])
</snippet></ROW><ROW><id>4859105</id><snippet>&gt;&gt;&gt; def addImageKey(dataPart):
...     if dataPart.has_key('imagekey'):
...         dataPart['viewurl'] = '/view?imagekey=%s' %dataPart['imagekey']
...     return dataPart
... 
&gt;&gt;&gt; decoded_with_viewurl = json.loads(myString, object_hook = addImageKey)
</snippet></ROW><ROW><id>4859105</id><snippet>addImageKey</snippet></ROW><ROW><id>4859105</id><snippet>imagekey</snippet></ROW><ROW><id>4859105</id><snippet>images</snippet></ROW><ROW><id>4859105</id><snippet>&gt;&gt;&gt; reencoded_with_viewurl = json.dumps(json.loads(myString, object_hook = addImageKey))
</snippet></ROW><ROW><id>4859181</id><snippet>__new__</snippet></ROW><ROW><id>4859181</id><snippet>__init__</snippet></ROW><ROW><id>4859181</id><snippet>obj.__init__(*args)</snippet></ROW><ROW><id>4859181</id><snippet>tuple</snippet></ROW><ROW><id>4859181</id><snippet>list</snippet></ROW><ROW><id>4859181</id><snippet>&gt;&gt;&gt; x = (1, 2)
&gt;&gt;&gt; x
(1, 2)
&gt;&gt;&gt; x.__init__([3, 4])
&gt;&gt;&gt; x # tuple.__init__ does nothing
(1, 2)
&gt;&gt;&gt; y = [1, 2]
&gt;&gt;&gt; y
[1, 2]
&gt;&gt;&gt; y.__init__([3, 4])
&gt;&gt;&gt; y # list.__init__ reinitialises the object
[3, 4]
</snippet></ROW><ROW><id>4859181</id><snippet>__new__</snippet></ROW><ROW><id>4859181</id><snippet>__init__</snippet></ROW><ROW><id>4859181</id><snippet>__init__</snippet></ROW><ROW><id>4859181</id><snippet>__init__</snippet></ROW><ROW><id>4859181</id><snippet>__new__</snippet></ROW><ROW><id>4859181</id><snippet>__init__</snippet></ROW><ROW><id>4859322</id><snippet>import random
d = {'VENEZUELA':'CARACAS', 'CANADA':'TORONTO'}
random.choice(d.keys())
</snippet></ROW></DATA>