<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>3185329</id><snippet>itertools.count</snippet></ROW><ROW><id>3185728</id><snippet>n = 1
with open('sourcefile.txt') as input:
    with open('destination.txt', 'w') as output:
        for line in input:
            if line.startswith('%'):
                line = str(n) + line[1:]
                n += 1
            output.write(line)
</snippet></ROW><ROW><id>3186743</id><snippet>{% url %}</snippet></ROW><ROW><id>3186743</id><snippet>error_message</snippet></ROW><ROW><id>3186743</id><snippet>error_messages</snippet></ROW><ROW><id>3187323</id><snippet>python /path/to/my/python/script.py</snippet></ROW><ROW><id>3187788</id><snippet>"python makeprg settings

setlocal makeprg=python\ %

setlocal errorformat=
        \%A\ \ File\ \"%f\"\\\,\ line\ %l\\\,%m,
        \%C\ \ \ \ %.%#,
        \%+Z%.%#Error\:\ %.%#,
        \%A\ \ File\ \"%f\"\\\,\ line\ %l,
        \%+C\ \ %.%#,
        \%-C%p^,
        \%Z%m,
        \%-G%.%#
</snippet></ROW><ROW><id>3188040</id><snippet>Categories</snippet></ROW><ROW><id>3188040</id><snippet>class Categories(models.Model):
   ... rest of your definition ...

   def get_spamwords_as_list(self):
       return self.spamwords.split(',')
</snippet></ROW><ROW><id>3188040</id><snippet>cat = Categories.objects.get(id=1)
print cat.get_spamwords_as_list()
</snippet></ROW><ROW><id>3188040</id><snippet>ManyToManyField</snippet></ROW><ROW><id>3188040</id><snippet>def get_word_list(self, name):
    if name in ['keywords', 'spamwords', 'translations']:
        return getattr(self, name).split(',')

# or even
def __getattr__(self, name):
    if name[-5:] == '_list' and name[:-5] in ['keywords', 'spamwords', 'translations']:
        return getattr(self, name[:-5]).split(',')
    else
        raise AttributeError

cat = Categories.get(pk=1)
cat.get_word_list('keywords')  # ['word 1', 'word 2', ...]
cat.keywords_list              # ['word 1', 'word 2', ...] with 2nd approach
cat.keywords                   # 'word 1, word 2' -- remains CSV
</snippet></ROW><ROW><id>3188134</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; def f(a,b,c):
...   print a,b,c
...
&gt;&gt;&gt; bound_f = partial(f,1)
&gt;&gt;&gt; bound_f(2,3)
1 2 3
</snippet></ROW><ROW><id>3188202</id><snippet>import cStringIO
import re
from xml import sax
from xml.sax import handler

relinend = re.compile(r'\n')

txt = '''&lt;foo&gt;
            &lt;tit&gt;Bar&lt;/tit&gt;
        &lt;baz&gt;whatever&lt;/baz&gt;
     &lt;/foo&gt;'''
stm = cStringIO.StringIO(txt)

class LocatingWrapper(object):
    def __init__(self, f):
        self.f = f
    self.linelocs = []
    self.curoffs = 0
    def read(self, *a):
        data = self.f.read(*a)
    linends = (m.start() for m in relinend.finditer(data))
    self.linelocs.extend(x + self.curoffs for x in linends)
    self.curoffs += len(data)
    return data
    def where(self, loc):
        return self.linelocs[loc.getLineNumber() - 1] + loc.getColumnNumber()

locstm = LocatingWrapper(stm)

class Handler(handler.ContentHandler):
    def setDocumentLocator(self, loc):
        self.loc = loc
    def startElement(self, name, attrs):
        print '%s@%s:%s (%s)' % (name, 
                                 self.loc.getLineNumber(),
                                 self.loc.getColumnNumber(),
                                 locstm.where(self.loc))

sax.parse(locstm, Handler())
</snippet></ROW><ROW><id>3188338</id><snippet>def extractPalette(infile,outfile):
    im=Image.open(infile)
    pal=im.palette.palette
    if im.palette.rawmode!='RGB':
        raise ValueError("Invalid mode in PNG palette")
    output=open(outfile,'wb')
    output.write('RIFF\x10\x04\x00\x00PAL data\x04\x04\x00\x00\x00\x03\x00\x01') # header
    output.write(''.join(pal[i:i+3]+'\0' for i in range(0,768,3))) # convert RGB to RGB0 before writing 
    output.close()
</snippet></ROW><ROW><id>3188340</id><snippet>PATTERNS = {'pattern1': re.compile('foo.*baz'),
            'snake': re.compile('python'),
            'knight': re.compile('[Aa]rthur|[Bb]edevere|[Ll]auncelot')}
</snippet></ROW><ROW><id>3188340</id><snippet>re.match(PATTERNS[pattern])</snippet></ROW><ROW><id>3188546</id><snippet>getElementsByTagName()
</snippet></ROW><ROW><id>3188546</id><snippet>getElementsByTagName('name')[0]</snippet></ROW><ROW><id>3188546</id><snippet>nametag = feedxml.getElementsByTagName('name')[0]
nametag.normalize()
name = nametag.firstChild.data
</snippet></ROW><ROW><id>3188550</id><snippet>create_OuterClass</snippet></ROW><ROW><id>3188550</id><snippet>__OuterClass__</snippet></ROW><ROW><id>3188550</id><snippet>dct</snippet></ROW><ROW><id>3188550</id><snippet>create_OuterClass</snippet></ROW><ROW><id>3188550</id><snippet>dct</snippet></ROW><ROW><id>3188550</id><snippet>def create_OuterClass(dct):
    # print('create_OuterClass: {0}'.format(dct))     
    if '__OuterClass__' in dct:
        arg = dct['arg']
        InnerClass_instances = [create_InnerClass(dct2) \
                                for dct2 in dct['InnerClass_instances']]
        return OuterClass(arg, *InnerClass_instances)
    return dct
</snippet></ROW><ROW><id>3188550</id><snippet>create_OuterClass: {u'__InnerClass__': True, u'name': u'Joe', u'value': 12}
create_OuterClass: {u'__InnerClass__': True, u'name': u'Jimmy', u'value': 7}
create_OuterClass: {u'__OuterClass__': True, u'InnerClass_instances': [{u'__InnerClass__': True, u'name': u'Joe', u'value': 12}, {u'__InnerClass__': True, u'name': u'Jimmy', u'value': 7}], u'arg': 4}
</snippet></ROW><ROW><id>3188550</id><snippet>json.loads</snippet></ROW><ROW><id>3188550</id><snippet>object_hook</snippet></ROW><ROW><id>3188576</id><snippet>User.get_by_key_name(str(uid))</snippet></ROW><ROW><id>3188576</id><snippet>None</snippet></ROW><ROW><id>3188576</id><snippet>User.get_or_insert(str(uid))</snippet></ROW><ROW><id>3188723</id><snippet>def __add__(self, other):
    if isinstance(other, self.__class__):
        return self.x + other.x
    elif isinstance(other, int):
        return self.x + other
    else:
        raise TypeError("unsupported operand type(s) for +: '{}' and '{}'").format(self.__class__, type(other))
</snippet></ROW><ROW><id>3188941</id><snippet>$LC_ALL</snippet></ROW><ROW><id>3188941</id><snippet>$LANG</snippet></ROW><ROW><id>3189103</id><snippet>&gt;&gt;&gt; n = [0]
&gt;&gt;&gt; d = { 1 : n, 2 : n }
&gt;&gt;&gt; d
{1: [0], 2: [0]}
&gt;&gt;&gt; d[1][0] = 3
&gt;&gt;&gt; d
{1: [3], 2: [3]}
</snippet></ROW><ROW><id>3189103</id><snippet>&gt;&gt;&gt; n = type( "number", ( object, ), { "val" : 0, "__repr__" : lambda self: str(self.val) } )()
&gt;&gt;&gt; d = { 1 : n, 2 : n }
&gt;&gt;&gt; d
{1: 0, 2: 0}
&gt;&gt;&gt; d[1].val = 9
&gt;&gt;&gt; d
{1: 9, 2: 9}
</snippet></ROW><ROW><id>3189105</id><snippet>import</snippet></ROW><ROW><id>3189105</id><snippet>import</snippet></ROW><ROW><id>3189105</id><snippet>import java.util.Set;
</snippet></ROW><ROW><id>3189105</id><snippet>Set</snippet></ROW><ROW><id>3189105</id><snippet>java.util.Set</snippet></ROW><ROW><id>3189105</id><snippet>s.add(o)</snippet></ROW><ROW><id>3189105</id><snippet>s</snippet></ROW><ROW><id>3189105</id><snippet>Set</snippet></ROW><ROW><id>3189105</id><snippet>add</snippet></ROW><ROW><id>3189105</id><snippet>Set.class</snippet></ROW><ROW><id>3189105</id><snippet>import util.set
</snippet></ROW><ROW><id>3189105</id><snippet>util.set</snippet></ROW><ROW><id>3189105</id><snippet>util</snippet></ROW><ROW><id>3189105</id><snippet>set</snippet></ROW><ROW><id>3189105</id><snippet>util</snippet></ROW><ROW><id>3189105</id><snippet>set</snippet></ROW><ROW><id>3189105</id><snippet>util = __import__('util.set')
</snippet></ROW><ROW><id>3189105</id><snippet>__import__</snippet></ROW><ROW><id>3189105</id><snippet>set</snippet></ROW><ROW><id>3189105</id><snippet>__import__</snippet></ROW><ROW><id>3189105</id><snippet>util</snippet></ROW><ROW><id>3189105</id><snippet>set</snippet></ROW><ROW><id>3189105</id><snippet>from util import set
</snippet></ROW><ROW><id>3189105</id><snippet>import util.set as set
</snippet></ROW><ROW><id>3189105</id><snippet>util</snippet></ROW><ROW><id>3189105</id><snippet>set</snippet></ROW><ROW><id>3189105</id><snippet>util</snippet></ROW><ROW><id>3189105</id><snippet>set</snippet></ROW><ROW><id>3189105</id><snippet>util.set</snippet></ROW><ROW><id>3189105</id><snippet>_util = __import__('util', fromlist='set')
set = _util.set
del _util
</snippet></ROW><ROW><id>3189105</id><snippet>_util = __import__('util.set')
set = _util.set
del _util
</snippet></ROW><ROW><id>3189105</id><snippet>set</snippet></ROW><ROW><id>3189105</id><snippet>util.set</snippet></ROW><ROW><id>3189333</id><snippet>connectTCP</snippet></ROW><ROW><id>3189333</id><snippet>reactor.run()</snippet></ROW><ROW><id>3189333</id><snippet>connectionLost</snippet></ROW><ROW><id>3189333</id><snippet>clientConnectionFailed</snippet></ROW><ROW><id>3189333</id><snippet>reactor.run()</snippet></ROW><ROW><id>3189333</id><snippet>for host in hosts:
    reactor.connectTCP(host, PORT, BlastFactory())
reactor.run()
</snippet></ROW><ROW><id>3189712</id><snippet>%23</snippet></ROW><ROW><id>3189712</id><snippet>http://example.com/whatever%23afterHash</snippet></ROW><ROW><id>3189870</id><snippet>has_advisor(self, advisor):
    if not self.advisor:
        return False
    elif advisor in self.advisor:
        return True
    else
        return self.advisor.has_advisor(advisor)
</snippet></ROW><ROW><id>3189870</id><snippet>e = people['e']
e_in_advisor_tree_and_grad_in_1990 = [p for p in people if p.has_advisor(e) and p.year == 1990]
</snippet></ROW><ROW><id>3189942</id><snippet>buff=''
while len(buff) &lt; 1024:
    buff += s.recv( 1024 - len(buff) )
</snippet></ROW><ROW><id>3190207</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.lowercase[:14]
'abcdefghijklmn'
&gt;&gt;&gt; string.lowercase[:14:2]
'acegikm'
</snippet></ROW><ROW><id>3190207</id><snippet>[i+j for i,j in zip(list_of_urls, string.lowercase[:14])]
</snippet></ROW><ROW><id>3190632</id><snippet>def process_images(method=filters.scale, options):
    method(**options)
</snippet></ROW><ROW><id>3190632</id><snippet>getattr</snippet></ROW><ROW><id>3190839</id><snippet>def run(cmd, logfile):
    p = subprocess.Popen(cmd, shell=True, universal_newlines=True, stdout=logfile)
    ret_code = p.wait()
    logfile.flush()
    return ret_code
</snippet></ROW><ROW><id>3190856</id><snippet>ScriptAlias</snippet></ROW><ROW><id>3190856</id><snippet>www.example.com/foo/A/B/ -&gt; www.example.com/foo?var1=A&amp;var2=B</snippet></ROW><ROW><id>3190970</id><snippet>useradd</snippet></ROW><ROW><id>3191318</id><snippet>open(filename, "wb")</snippet></ROW><ROW><id>3191452</id><snippet>validate=True</snippet></ROW><ROW><id>3191452</id><snippet>kwargs</snippet></ROW><ROW><id>3191452</id><snippet>args</snippet></ROW><ROW><id>3191452</id><snippet>kwargs['validate']</snippet></ROW><ROW><id>3191452</id><snippet>validate</snippet></ROW><ROW><id>3191452</id><snippet>kwargs</snippet></ROW><ROW><id>3191452</id><snippet>kwargs.pop('validate')</snippet></ROW><ROW><id>3191452</id><snippet>'validate'</snippet></ROW><ROW><id>3191452</id><snippet>kwargs</snippet></ROW><ROW><id>3191452</id><snippet>__init__</snippet></ROW><ROW><id>3191452</id><snippet>validate</snippet></ROW><ROW><id>3191452</id><snippet>kwargs</snippet></ROW><ROW><id>3191452</id><snippet>False</snippet></ROW><ROW><id>3191452</id><snippet>def __init__(self, *args, **kwargs):
    self.validate = kwargs.pop('validate',False)
    super(MyForm, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>3191452</id><snippet>'validate'</snippet></ROW><ROW><id>3191452</id><snippet>kwargs</snippet></ROW><ROW><id>3191452</id><snippet>__init__</snippet></ROW><ROW><id>3191452</id><snippet>pop</snippet></ROW><ROW><id>3191452</id><snippet>get</snippet></ROW><ROW><id>3191465</id><snippet>@decorator</snippet></ROW><ROW><id>3191465</id><snippet>instance.value</snippet></ROW><ROW><id>3191465</id><snippet>import operator

class Range(object):

    def __init__(self, value, lowerbound, upperbound):
        self._lowerbound = lowerbound
        self._upperbound = upperbound
        self.value = value

    def __repr__(self):
        return "&lt;Range: %s&gt;" % (self.value)

    def _from_value(self, val):
        val = max(min(val, self._upperbound), self._lowerbound)
        # NOTE: it's nice to use type(self) instead of writing the class
        # name explicitly; it then continues to work if you change the
        # class name, or use a subclass
        return type(self)(val, rng._lowerbound, rng._upperbound)

    def _make_binary_method(fn):
        # this is NOT a method, just a helper function that is used
        # while the class body is being evaluated
        def bin_op(self, other):
            return self._from_value(fn(self.value, other))
        return bin_op

    __mul__ = _make_binary_method(operator.mul)
    __div__ = _make_binary_method(operator.truediv)
    __truediv__ = __div__
    __add__ = _make_binary_method(operator.add)
    __sub__ = _make_binary_method(operator.sub)

rng = Range(7, 0, 10)
print rng + 5
print rng * 50
print rng - 10
print rng / 100
</snippet></ROW><ROW><id>3191465</id><snippet>&lt;Range: 10&gt;
&lt;Range: 10&gt;
&lt;Range: 0&gt;
&lt;Range: 0.07&gt;
</snippet></ROW><ROW><id>3191465</id><snippet>def check_range(fn):
    def wrapper(self, other):
        value = fn(self, other)
        value = max(min(value, self._upperbound), self._lowerbound)
        return type(self)(value, self._lowerbound, self._upperbound)
    return wrapper

class ApplyDecoratorsType(type):
    def __init__(cls, name, bases, attrs):
        for decorator, names in attrs.get('_auto_decorate', ()):
            for name in names:
                fn = attrs.get(name, None)
                if fn is not None:
                    setattr(cls, name, decorator(fn))

class Range(object):
    __metaclass__ = ApplyDecoratorsType
    _auto_decorate = (
            (check_range, 
             '__mul__ __div__ __truediv__ __add__ __sub__'.split()),
        )

    def __init__(self, value, lowerbound, upperbound):
        self._lowerbound = lowerbound
        self._upperbound = upperbound
        self.value = value

    def __repr__(self):
        return "&lt;Range: %s&gt;" % (self.value)

    def __mul__(self, other):
        return self.value * other

    def __div__(self, other):
        return self.value / float(other)

    def __truediv__(self, other):
        return self / other

    def __add__(self, other):
        return self.value + other

    def __sub__(self, other):
        return self.value - other
</snippet></ROW><ROW><id>3191642</id><snippet>import urllib
website = 'http://www.google.com/'
proxylist = ('http://75.101.215.123:9090', 'http://94.198.47.6:3128')
connlist = (urllib.urlopen(website, proxies = {'http': proxy}) for proxy in proxylist)
for conn in connlist:
    print conn.read()
    conn.close()
</snippet></ROW><ROW><id>3191699</id><snippet>clean_email</snippet></ROW><ROW><id>3191699</id><snippet>self.notvalidate</snippet></ROW><ROW><id>3191699</id><snippet>def clean_email(self):
    if self.notvalidate:
        return

     ....
</snippet></ROW><ROW><id>3191699</id><snippet>def createFormClass(validate):
    class MyClass(object):
        if validate:
            def clean_email(self):
                pass

    return MyClass

MyClassValidated = createFormClass(True)
MyClassNotValidated = createFormClass(False)
</snippet></ROW><ROW><id>3191761</id><snippet>cPickle</snippet></ROW><ROW><id>3191761</id><snippet>-1</snippet></ROW><ROW><id>3191761</id><snippet>pickle.HIGHEST_PROTOCOL</snippet></ROW><ROW><id>3191761</id><snippet>marshal</snippet></ROW><ROW><id>3191761</id><snippet>json</snippet></ROW><ROW><id>3191761</id><snippet>xml</snippet></ROW><ROW><id>3191761</id><snippet>unicode</snippet></ROW><ROW><id>3191761</id><snippet>twisted.spread.jelly</snippet></ROW><ROW><id>3191868</id><snippet>&gt;&gt;&gt; class num(object):
...   def __init__(self, x, flag):
...     self.x = x
...     self.flag = flag
...   def __float__(self):
...     return float(self.x)
...   from functools import wraps
&gt;&gt;&gt; def wrapper(f):
...   @wraps(f)
...   def wrapped(*a):
...     if not all(getattr(x, 'flag', True) for x in a):
...       return None
...     return f(*(getattr(x, 'x', x) for x in a))
...   return wrapped
... 
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; import math
&gt;&gt;&gt; for n, v in inspect.getmembers(math, inspect.isroutine):
...   setattr(math, n, wrapper(v))
... 

&gt;&gt;&gt; a = num(3, True)
&gt;&gt;&gt; print math.sqrt(a)
1.73205080757
&gt;&gt;&gt; b = num(4, False)
&gt;&gt;&gt; print math.sqrt(b)
None
</snippet></ROW><ROW><id>3191868</id><snippet>math</snippet></ROW><ROW><id>3191868</id><snippet>None</snippet></ROW><ROW><id>3191868</id><snippet>False</snippet></ROW><ROW><id>3191868</id><snippet>.flag</snippet></ROW><ROW><id>3191868</id><snippet>num</snippet></ROW><ROW><id>3191868</id><snippet>inspect</snippet></ROW><ROW><id>3191868</id><snippet>math</snippet></ROW><ROW><id>3191868</id><snippet>math</snippet></ROW><ROW><id>3192025</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; standard_format = re.compile(r'^\+(?P&lt;intl_prefix&gt;\d{2})\((?P&lt;area_code&gt;\d)\
)(?P&lt;local_first_half&gt;\d{3,4})-(?P&lt;local_second_half&gt;\d{4})')
&gt;&gt;&gt; m =standard_format.search("+61(3)1234-567890whoopsie")
&gt;&gt;&gt; m.groups()
('61', '3', '1234', '5678')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3192025</id><snippet>+61(2)9876-7</snippet></ROW><ROW><id>3192025</id><snippet>+61(2)9876-7ddd</snippet></ROW><ROW><id>3192025</id><snippet>r"\+61\(2\)9876-7\d{3,3}\Z"</snippet></ROW><ROW><id>3192025</id><snippet>"0" + the_digits[2:]</snippet></ROW><ROW><id>3192191</id><snippet>printf</snippet></ROW><ROW><id>3192191</id><snippet>printf</snippet></ROW><ROW><id>3192191</id><snippet>$ /usr/bin/printf "\u0410\u043b\u0438\u0441\u0410"
АлисА
</snippet></ROW><ROW><id>3192191</id><snippet>printf</snippet></ROW><ROW><id>3192191</id><snippet>/usr/bin</snippet></ROW><ROW><id>3192191</id><snippet>$ $(type -P printf) "\u0410\u043b\u0438\u0441\u0410"
АлисА
</snippet></ROW><ROW><id>3192191</id><snippet>$ env printf "\u0410\u043b\u0438\u0441\u0410"
АлисА
</snippet></ROW><ROW><id>3192263</id><snippet>y</snippet></ROW><ROW><id>3192263</id><snippet>&gt;&gt;&gt; class X:
...     y = [] 
...     def __init__(self):
...         pass
</snippet></ROW><ROW><id>3192263</id><snippet>&gt;&gt;&gt; class X:
...     y = [] # Class level attribute
...     def __init__(self):
...             pass
... 
&gt;&gt;&gt; x = X()
&gt;&gt;&gt; x.y.append(1)
&gt;&gt;&gt; x.y
[1]
&gt;&gt;&gt; x.y.append(2)
&gt;&gt;&gt; z = X()
&gt;&gt;&gt; z.y.append(3)
&gt;&gt;&gt; z.y
[1, 2, 3]
&gt;&gt;&gt; X.y.append(4)
&gt;&gt;&gt; [1, 2, 3, 4]
</snippet></ROW><ROW><id>3192263</id><snippet>x</snippet></ROW><ROW><id>3192263</id><snippet>z</snippet></ROW><ROW><id>3192263</id><snippet>y</snippet></ROW><ROW><id>3192263</id><snippet>z</snippet></ROW><ROW><id>3192263</id><snippet>y</snippet></ROW><ROW><id>3192263</id><snippet>X.y.append(4)</snippet></ROW><ROW><id>3192263</id><snippet>X</snippet></ROW><ROW><id>3192263</id><snippet>&gt;&gt;&gt; class X:
...     def __init__(self, y=None):
...             self.y = y or list() # Instance level attribute.  Default to empty list if y is not passed in.
... 
&gt;&gt;&gt; x = X()
&gt;&gt;&gt; x.y.append(1)
&gt;&gt;&gt; x.y
[1]
&gt;&gt;&gt; z = X()
&gt;&gt;&gt; z.y.append(2)
&gt;&gt;&gt; z.y
[2]
&gt;&gt;&gt; 
&gt;&gt;&gt; s = X()
&gt;&gt;&gt; s.y
[]
&gt;&gt;&gt; t = X(y=[10])
&gt;&gt;&gt; t.y
[10]
</snippet></ROW><ROW><id>3192263</id><snippet>z</snippet></ROW><ROW><id>3192263</id><snippet>y</snippet></ROW><ROW><id>3192263</id><snippet>t</snippet></ROW><ROW><id>3192263</id><snippet>y</snippet></ROW><ROW><id>3192263</id><snippet>[10]</snippet></ROW><ROW><id>3192263</id><snippet>y</snippet></ROW><ROW><id>3192264</id><snippet>GetWindowRect</snippet></ROW><ROW><id>3192264</id><snippet>GetSystemMetrics(SM_CXBORDER)</snippet></ROW><ROW><id>3192264</id><snippet>GetSystemMetrics(SM_CYBORDER)</snippet></ROW><ROW><id>3192264</id><snippet>GetWindowRect()</snippet></ROW><ROW><id>3192264</id><snippet>GetSystemMetrics()</snippet></ROW><ROW><id>3192264</id><snippet>GetWindowRect</snippet></ROW><ROW><id>3192264</id><snippet>GetClientRect</snippet></ROW><ROW><id>3192264</id><snippet>(100,200),(1000,900)</snippet></ROW><ROW><id>3192264</id><snippet>(112,227),(988,888)</snippet></ROW><ROW><id>3192264</id><snippet>227-200</snippet></ROW><ROW><id>3192264</id><snippet>900-888</snippet></ROW><ROW><id>3192264</id><snippet>112-100</snippet></ROW><ROW><id>3192264</id><snippet>900-888</snippet></ROW><ROW><id>3192264</id><snippet>GetWindowsRect</snippet></ROW><ROW><id>3192264</id><snippet>RECT r;
HRESULT stat = DwmGetWindowAttribute (
    hwnd,
    DWMWA_EXTENDED_FRAME_BOUNDS,
    &amp;r,
    sizeof(r));
</snippet></ROW><ROW><id>3192379</id><snippet>iptables -A INPUT -j NFQUEUE --queue-num 1
</snippet></ROW><ROW><id>3192379</id><snippet>import nfqueue
from dpkt import ip

q = None

def cb(dummy, payload):
    # make decision about if the packet should be allowed. in this case, drop everything:
    payload.set_verdict(nfqueue.NF_DROP)

q = nfqueue.queue()
q.open()
q.bind()
q.set_callback(cb)
q.create_queue(1)

q.try_run()
</snippet></ROW><ROW><id>3192513</id><snippet>def__init__(self, pyQueryRow):
    for i,attr in enumerate("crn course title tipe cr_hours seats instructor"
                            " days begin end location exam".split()):
        setattr(self, attr, self.get_column(pyQueryRow, i))
</snippet></ROW><ROW><id>3192513</id><snippet>self.get_column</snippet></ROW><ROW><id>3192513</id><snippet>def__init__(self, pyQueryRow):
    attrs = ("crn course title tipe cr_hours seats instructor"
             " days begin end location exam".split())
    values = [td.text for td in pyQueryRow.find('td')]
    for attr, value in zip(attrs, values):
        setattr(self, attr, value)
</snippet></ROW><ROW><id>3192598</id><snippet>class FactorFloat(float):
    def _factor_scale(f):
        def wrapper(self, *args, **kwargs):
            scaled = float.__mul__(self, FACTOR)
            result = f(scaled, *args, **kwargs)
            # if you want to return FactorFloats when possible:
            if isinstance(result, float):
                result = type(self)(result/FACTOR)
            return result
        return wrapper

    def __repr__(self):
        return '%s(%s)' % (type(self).__name__, float.__repr__(self))

    __str__ = _factor_scale(float.__str__)
    __mul__ = _factor_scale(float.__mul__)
    __div__ = _factor_scale(float.__div__)
    __add__ = _factor_scale(float.__add__)
    __sub__ = _factor_scale(float.__sub__)


f = FactorFloat(3.)
FACTOR = 10.
print f   # 30.0
print f-1 # 29.0
FACTOR = 2.
print f   # 6.0
print f-1 # 5.0
print repr(f)
</snippet></ROW><ROW><id>3192598</id><snippet>30.0
29.0
6.0
5.0
FactorFloat(3.0)
</snippet></ROW><ROW><id>3192598</id><snippet>dir(baseclass)</snippet></ROW><ROW><id>3192598</id><snippet>_scale_methods</snippet></ROW><ROW><id>3192598</id><snippet>def wrap_scale_methods(cls):
    Base = cls.__base__
    def factor_scale(f):
        def wrapper(self, *args, **kwargs):
            scaled = Base.__mul__(self, FACTOR)
            result = f(scaled, *args, **kwargs)
            if isinstance(result, Base):
                result = type(self)(result/FACTOR)
            return result
        return wrapper
    for methodname in cls._scale_methods:
        setattr(cls, methodname, factor_scale(getattr(Base, methodname)))
    return cls

@wrap_scale_methods
class FactorComplex(complex):
    _scale_methods = '__str__ __mul__ __div__ __add__ __sub__'.split()
    def __repr__(self):
        return '%s(%s)' % (type(self).__name__, complex.__repr__(self)[1:-1])
</snippet></ROW><ROW><id>3192923</id><snippet>resize()</snippet></ROW><ROW><id>3192923</id><snippet>def customresize(array, new_size):
    return (array._type_*new_size).from_address(addressof(array))
</snippet></ROW><ROW><id>3192990</id><snippet>SCRIPT=$(readlink -f "$0")
</snippet></ROW><ROW><id>3192990</id><snippet>sys.argv[-1]
</snippet></ROW><ROW><id>3193387</id><snippet>urllib2.HTTPError</snippet></ROW><ROW><id>3193387</id><snippet>raise</snippet></ROW><ROW><id>3193387</id><snippet>import urllib2
try:
   urllib2.urlopen("some url")
except urllib2.HTTPError, err:
   if err.code == 404:
       &lt;whatever&gt;
   else:
       raise
</snippet></ROW><ROW><id>3193521</id><snippet>self</snippet></ROW><ROW><id>3193521</id><snippet>class X:
    def __init__(self, v): self.v = v

a = X(1)
b = X(2)
print a.v, b.v
</snippet></ROW><ROW><id>3193521</id><snippet>X</snippet></ROW><ROW><id>3193521</id><snippet>a</snippet></ROW><ROW><id>3193521</id><snippet>b</snippet></ROW><ROW><id>3193521</id><snippet>self</snippet></ROW><ROW><id>3193521</id><snippet>a = X()
a.v = 1
b = X()
b.b = 2
print a.v, b.v
</snippet></ROW><ROW><id>3193521</id><snippet>b.b</snippet></ROW><ROW><id>3193521</id><snippet>b.v</snippet></ROW><ROW><id>3193521</id><snippet>class X:
    def set(v): ???.v = v
</snippet></ROW><ROW><id>3193521</id><snippet>v</snippet></ROW><ROW><id>3193521</id><snippet>__init__</snippet></ROW><ROW><id>3193521</id><snippet>X</snippet></ROW><ROW><id>3193521</id><snippet>X</snippet></ROW><ROW><id>3193521</id><snippet>class X:
    def set(a, v): a.v = v

a.set(a, 1) # Holy ugly!
</snippet></ROW><ROW><id>3193521</id><snippet>class X:
    def set(self, v): self.v = v

a.set(1) # while "set" runs, "self" == "a"
b.set(2) # while "set" runs, "self" == "b"
</snippet></ROW><ROW><id>3193521</id><snippet>self</snippet></ROW><ROW><id>3193521</id><snippet>run()</snippet></ROW><ROW><id>3193521</id><snippet>def run(self):
    self.servsock = self.create_tcp_serversocket(self.port)
(clientsock, address) = self.servsock.accept() # ERROR: 'SELF' not defined
</snippet></ROW><ROW><id>3193521</id><snippet>self.servsock.accept()</snippet></ROW><ROW><id>3193521</id><snippet>self</snippet></ROW><ROW><id>3193678</id><snippet>leftover</snippet></ROW><ROW><id>3193678</id><snippet>re.compile</snippet></ROW><ROW><id>3194027</id><snippet>''.join(_ih).split('\n')
</snippet></ROW><ROW><id>3194027</id><snippet>for item in _ih:
    print item
</snippet></ROW><ROW><id>3194171</id><snippet>first_day_of_month = datetime.date.today().replace(day=1)
</snippet></ROW><ROW><id>3194171</id><snippet>first_day_of_month</snippet></ROW><ROW><id>3194171</id><snippet>week_day = first_day_of_month.weekday()
</snippet></ROW><ROW><id>3194171</id><snippet>if week_day:
  first_day_of_month += datetime.timedelta(days=7-week_day)
</snippet></ROW><ROW><id>3194171</id><snippet>find_month_first_monday</snippet></ROW><ROW><id>3194171</id><snippet>week_day</snippet></ROW><ROW><id>3194171</id><snippet>month=1</snippet></ROW><ROW><id>3194171</id><snippet>.replace</snippet></ROW><ROW><id>3194171</id><snippet>weeks</snippet></ROW><ROW><id>3194230</id><snippet>region = rec.seq[start:end]
</snippet></ROW><ROW><id>3194567</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import unicodedata
text = u'Cześć'
print unicodedata.normalize('NFD', text).encode('ascii', 'ignore')
</snippet></ROW><ROW><id>3194617</id><snippet>import gtk

d = gtk.Dialog()
d.add_buttons(gtk.STOCK_YES, 1, gtk.STOCK_NO, 2)

label = gtk.Label('Do you like GTK?')
label.show()
d.vbox.pack_start(label)

answer = d.run()

print answer
</snippet></ROW><ROW><id>3194718</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; [min(j) for i, j in itertools.groupby(A, key=lambda x: x[:7])]
['2001/01/01', '2001/02/04', '2001/03/01', '2001/04/10', '2001/05/07', '2001/07/01', '2002/03/01', '2002/04/01']
</snippet></ROW><ROW><id>3195225</id><snippet>u'\u201cHello World\u201d'
</snippet></ROW><ROW><id>3195225</id><snippet>“Hello World”</snippet></ROW><ROW><id>3195225</id><snippet>\uXXXX</snippet></ROW><ROW><id>3195225</id><snippet>?</snippet></ROW><ROW><id>3195225</id><snippet>Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) [GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; u'\u201cHello World\u201d'==u'“Hello World”'
True
</snippet></ROW><ROW><id>3195225</id><snippet>\x</snippet></ROW><ROW><id>3195225</id><snippet>&gt;&gt;&gt; '\x61'=='a'
True
</snippet></ROW><ROW><id>3195225</id><snippet>\u</snippet></ROW><ROW><id>3195225</id><snippet>\x</snippet></ROW><ROW><id>3195225</id><snippet>repr()</snippet></ROW><ROW><id>3195426</id><snippet>date()</snippet></ROW><ROW><id>3195426</id><snippet>date</snippet></ROW><ROW><id>3195426</id><snippet>date</snippet></ROW><ROW><id>3195898</id><snippet>self.request.get</snippet></ROW><ROW><id>3195967</id><snippet>from google.appengine.api import xmpp
from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app

class FooHandler(webapp.RequestHandler):
    def get(self):
        xmpp.send_invite('example@gmail.com')

application = webapp.WSGIApplication([('.*', FooHandler)], debug=True)

def main():
    run_wsgi_app(application)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>3196057</id><snippet>scipy.stats.scoreatpercentile(arr,per)</snippet></ROW><ROW><id>3196057</id><snippet>import scipy.stats as ss
print(ss.scoreatpercentile([1, 4, 2, 3], 75))
# 3.25
</snippet></ROW><ROW><id>3196057</id><snippet>arr</snippet></ROW><ROW><id>3196057</id><snippet>per=(len(smat)-n)/len(smat)</snippet></ROW><ROW><id>3196057</id><snippet>threshold = ss.scoreatpercentile(abs(smat), per)
</snippet></ROW><ROW><id>3196088</id><snippet>csv</snippet></ROW><ROW><id>3196088</id><snippet>&gt;&gt;&gt; with open('test.txt', 'w') as f:
    f.write(','.join(['key', 'calc1', 'calc2']) + '\n')
    f.writelines('{},{},{}'.format(k, *v.values()) + '\n' for l in data for k,v in l.items())
</snippet></ROW><ROW><id>3196169</id><snippet>convert</snippet></ROW><ROW><id>3196169</id><snippet>im2 = im.convert('RGB').convert('P', palette=Image.ADAPTIVE)
</snippet></ROW><ROW><id>3196169</id><snippet>RGB</snippet></ROW><ROW><id>3196178</id><snippet>key=lambda solution: solution.distance
</snippet></ROW><ROW><id>3196178</id><snippet>key=lambda solution: solution.distance()
</snippet></ROW><ROW><id>3196178</id><snippet>distance</snippet></ROW><ROW><id>3196178</id><snippet>  @property
  def distance(self): 
      ....
</snippet></ROW><ROW><id>3196178</id><snippet>solution.distance()</snippet></ROW><ROW><id>3196178</id><snippet>solution.distance</snippet></ROW><ROW><id>3196178</id><snippet>key=lambda solution: solution.distance</snippet></ROW><ROW><id>3196178</id><snippet>solution.distance</snippet></ROW><ROW><id>3196178</id><snippet>solution</snippet></ROW><ROW><id>3196178</id><snippet>self.solutions</snippet></ROW><ROW><id>3196178</id><snippet>solution</snippet></ROW><ROW><id>3196591</id><snippet>--pythonpath</snippet></ROW><ROW><id>3196591</id><snippet>.bashrc</snippet></ROW><ROW><id>3196591</id><snippet>settings.py</snippet></ROW><ROW><id>3196591</id><snippet>import os,sys
PROJECT_ROOT = os.path.realpath(os.path.dirname(__file__))
sys.path.append(PROJECT_ROOT, 'to', 'my', 'apps')
sys.path.append(os.path.join('path', 'to', 'satchmo', 'apps'))
</snippet></ROW><ROW><id>3196660</id><snippet>bisect</snippet></ROW><ROW><id>3196669</id><snippet>import time
time.strptime(str(thetime), '%m/%d/%y %H:%M:%S')
</snippet></ROW><ROW><id>3197049</id><snippet>[intou()]</snippet></ROW><ROW><id>3197231</id><snippet>POST</snippet></ROW><ROW><id>3197231</id><snippet>/sign_in</snippet></ROW><ROW><id>3197231</id><snippet>/home</snippet></ROW><ROW><id>3197365</id><snippet>[dict(template,z=value) for value in add]
</snippet></ROW><ROW><id>3197365</id><snippet>k</snippet></ROW><ROW><id>3197365</id><snippet>[dict(template,**{k:value}) for value in add]
</snippet></ROW><ROW><id>3197561</id><snippet>$ rm -r lxml-2.2.6
$ curl http://pypi.python.org/packages/source/l/lxml/lxml-2.2.6.tar.gz | tar xz 
$ cd lxml-2.2.6
$ python3 setup.py install
</snippet></ROW><ROW><id>3197561</id><snippet>Compiling with an SDK that doesn't seem to exist: /Developer/SDKs/MacOSX10.4u.sdk
</snippet></ROW><ROW><id>3197585</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>3197585</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>3197585</id><snippet>os.system</snippet></ROW><ROW><id>3197585</id><snippet>from subprocess import Popen, PIPE

p = Popen(['command', 'and', 'args'], stdout=PIPE, stderr=PIPE, stdin=PIPE)

output = p.stdout.read()
p.stdin.write(input)
</snippet></ROW><ROW><id>3197642</id><snippet>import sys
sys.path.append('/Users/womble/Dropbox/scratch/')
from PyQt4 import QtCore, QtGui
</snippet></ROW><ROW><id>3197642</id><snippet>pyuic4 Urb.ui &gt; Urb.py
</snippet></ROW><ROW><id>3197786</id><snippet>MAN(?!.*PN)</snippet></ROW><ROW><id>3197786</id><snippet>MAN</snippet></ROW><ROW><id>3197786</id><snippet>PN</snippet></ROW><ROW><id>3197786</id><snippet>MAN_PN_MAN_BLEH</snippet></ROW><ROW><id>3197786</id><snippet>MAN</snippet></ROW><ROW><id>3197786</id><snippet>PN</snippet></ROW><ROW><id>3197786</id><snippet>MAN.*PN</snippet></ROW><ROW><id>3197786</id><snippet>^(?!.*MAN.*PN).*MAN.*$</snippet></ROW><ROW><id>3197786</id><snippet>find</snippet></ROW><ROW><id>3197786</id><snippet>rfind</snippet></ROW><ROW><id>3197786</id><snippet>string1</snippet></ROW><ROW><id>3197786</id><snippet>string2</snippet></ROW><ROW><id>3197786</id><snippet>-1</snippet></ROW><ROW><id>3197786</id><snippet>string.rfind(s, string2) &lt; string.find(s, string1)
</snippet></ROW><ROW><id>3197786</id><snippet>string1</snippet></ROW><ROW><id>3197786</id><snippet>string2</snippet></ROW><ROW><id>3197786</id><snippet>-1</snippet></ROW><ROW><id>3197786</id><snippet>false</snippet></ROW><ROW><id>3197786</id><snippet>string1</snippet></ROW><ROW><id>3197786</id><snippet>string2</snippet></ROW><ROW><id>3197786</id><snippet>true</snippet></ROW><ROW><id>3197786</id><snippet>string2</snippet></ROW><ROW><id>3197786</id><snippet>string1</snippet></ROW><ROW><id>3197786</id><snippet>string1</snippet></ROW><ROW><id>3197786</id><snippet>string2</snippet></ROW><ROW><id>3197786</id><snippet>find</snippet></ROW><ROW><id>3197786</id><snippet>rfind</snippet></ROW><ROW><id>3197952</id><snippet>sdpy/cs/ml/cla/boosting.py</snippet></ROW><ROW><id>3198124</id><snippet>"rb"</snippet></ROW><ROW><id>3198124</id><snippet>write</snippet></ROW><ROW><id>3198124</id><snippet>sys.stdout</snippet></ROW><ROW><id>3198124</id><snippet>print "Content-type: image/png\n\n"</snippet></ROW><ROW><id>3198124</id><snippet>sys.stdout.write( "Content-type: image/png\r\n\r\n" + file(filename,"rb").read() )
</snippet></ROW><ROW><id>3198188</id><snippet>login: admin</snippet></ROW><ROW><id>3198188</id><snippet>app.yaml</snippet></ROW><ROW><id>3198188</id><snippet>def admin_required(handler_method):
  def check_admin(self, *args):
    if not users.is_current_user_admin():
      self.redirect(users.create_login_url(self.request.uri))
      return
    else:
      handler_method(self, *args)
  return check_admin
</snippet></ROW><ROW><id>3198227</id><snippet>*</snippet></ROW><ROW><id>3198227</id><snippet>myMethod(myVariable, *myTuple)
</snippet></ROW><ROW><id>3198618</id><snippet>self.name2info[name]['prereqs'] = self.name2info[name]['prereqs'] or []</snippet></ROW><ROW><id>3198620</id><snippet>import os
os.startfile('my_mp3.mp3')
</snippet></ROW><ROW><id>3198623</id><snippet># your twisted imports...
import json

class MyProtocol(object): # Would be Protocol instead of object in real code

    def dataReceived(self, data):
        req = json.loads(data) # create a dictionary from JSON string
        modname, funcname = req['method'].split('.')
        m = __import__(modname)
        method = getattr(m, funcname) # get the method
        method(self, req['params']) # call the method
</snippet></ROW><ROW><id>3198623</id><snippet>mp = MyProtocol()
mp.dataReceived('{"method":"somemod.add", "params":[1,2,3]}')
</snippet></ROW><ROW><id>3198623</id><snippet>somemod.py</snippet></ROW><ROW><id>3198623</id><snippet>.add()</snippet></ROW><ROW><id>3198623</id><snippet>import json

def add(proto, params):
    result = {} # initialize a dictionary to convert later to JSON
    result['result'] = sum(params)
    result['error'] = None
    result['id'] = 1
    proto.transport.write(json.dumps(result)) # return a JSON string
    proto.transport.loseConnection() # close connection
</snippet></ROW><ROW><id>3198623</id><snippet>method(..</snippet></ROW><ROW><id>3198623</id><snippet>MyProtocol</snippet></ROW><ROW><id>3198623</id><snippet>split()</snippet></ROW><ROW><id>3198623</id><snippet>dataReceived()</snippet></ROW><ROW><id>3198623</id><snippet>dict</snippet></ROW><ROW><id>3198623</id><snippet>MyProtocol</snippet></ROW><ROW><id>3198623</id><snippet># in MyProtocol's __init__() method:
self.methods = {}
</snippet></ROW><ROW><id>3198623</id><snippet>def register(self, name, callable):
    self.methods[name] = callable
</snippet></ROW><ROW><id>3198623</id><snippet>dataReceived()</snippet></ROW><ROW><id>3198623</id><snippet>def dataReceived(self, data):
    # ...
    modname, funcname = self.methods.get(req['method'], False)
    # ..continue along the lines of the dataReceived() method above
</snippet></ROW><ROW><id>3198623</id><snippet>__import__</snippet></ROW><ROW><id>3198724</id><snippet>&lt;link&gt;</snippet></ROW><ROW><id>3198724</id><snippet>{{ MEDIA_URL }}/your_stylesheet.css</snippet></ROW><ROW><id>3198724</id><snippet>templates/admin/base.html</snippet></ROW><ROW><id>3198724</id><snippet>...
&lt;link rel="stylesheet" type="text/css" href="{% block stylesheet %}{% load adminmedia %}{% admin_media_prefix %}css/base.css{% endblock %}" /&gt;
&lt;link rel="stylesheet" type="text/css" href="{{ MEDIA_URL }}/your_stylesheet.css" /&gt;
...
</snippet></ROW><ROW><id>3198724</id><snippet>{%load%}</snippet></ROW><ROW><id>3199090</id><snippet>for</snippet></ROW><ROW><id>3199090</id><snippet>while</snippet></ROW><ROW><id>3199090</id><snippet>running = True
while running:
    for proxy in proxylist:
        try:
            h = urllib.urlopen(website, proxies = {'http': proxy}).readlines()
            print 'worked %s' % proxy
            running = False
        except:
            print 'error %s' % proxy
print 'done'
</snippet></ROW><ROW><id>3199219</id><snippet>def friend_exists(request, pid):
</snippet></ROW><ROW><id>3199219</id><snippet>request</snippet></ROW><ROW><id>3199219</id><snippet>pid</snippet></ROW><ROW><id>3199256</id><snippet>years_dict = dict()

for line in list:
    if line[0] in years_dict:
        # append the new number to the existing array at this slot
        years_dict[line[0]].append(line[1])
    else:
        # create a new array in this slot
        years_dict[line[0]] = [line[1]]
</snippet></ROW><ROW><id>3199256</id><snippet>{
    "2010": [2],
    "2009": [4,7],
    "1989": [8]
}
</snippet></ROW><ROW><id>3199469</id><snippet>print name[-1]
</snippet></ROW><ROW><id>3199469</id><snippet>print name[len(name) - 1]
</snippet></ROW><ROW><id>3199469</id><snippet>backname = name[::-1]
</snippet></ROW><ROW><id>3199670</id><snippet>@someDecorator
class foo(object):
   pass
</snippet></ROW><ROW><id>3199670</id><snippet>class foo(object):
   pass
foo = someDecorator(foo)
</snippet></ROW><ROW><id>3199670</id><snippet>class foo(object):
   pass
class bar(foo):
   pass

foo = someDecorator(foo)
</snippet></ROW><ROW><id>3199953</id><snippet>class A(object):
    def __init__(self,a,b):
        self.a = a
        self.b = b
    def __call__(self):
        return self.a + self.b

a = A(3, 4)
a() # returns 7
</snippet></ROW><ROW><id>3199953</id><snippet>__init__</snippet></ROW><ROW><id>3199953</id><snippet>None</snippet></ROW><ROW><id>3199953</id><snippet>TypeError</snippet></ROW><ROW><id>3199953</id><snippet>__new__</snippet></ROW><ROW><id>3199953</id><snippet>class A(object):
    def __new__(self,a,b):
        return A.run(a, b);
    @staticmethod
    def run(a, b):
        return a + b
</snippet></ROW><ROW><id>3200311</id><snippet>Ape()</snippet></ROW><ROW><id>3200311</id><snippet>Ape</snippet></ROW><ROW><id>3200311</id><snippet>__init__</snippet></ROW><ROW><id>3200311</id><snippet>say</snippet></ROW><ROW><id>3200311</id><snippet>say</snippet></ROW><ROW><id>3200311</id><snippet>Ape</snippet></ROW><ROW><id>3200355</id><snippet>[app:main]
full_stack = true
static_files = true

cache_dir = %(here)s/data
beaker.session.type = redis
beaker.session.url:127.0.0.1:6379
beaker.session.key = appname
</snippet></ROW><ROW><id>3200427</id><snippet>'all'</snippet></ROW><ROW><id>3200427</id><snippet>query = meta.session.query(Transaction)
if day != 'all':
    query = query.filter(Transaction.day == day)
records = query.all()
</snippet></ROW><ROW><id>3200486</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; help(re.split)
Help on function split in module re:

split(pattern, string, maxsplit=0)
    Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings.

&gt;&gt;&gt; re.split('\s+', 'The   quick brown\t fox')
['The', 'quick', 'brown', 'fox']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3200496</id><snippet>*</snippet></ROW><ROW><id>3200496</id><snippet>*</snippet></ROW><ROW><id>3200496</id><snippet>*</snippet></ROW><ROW><id>3200496</id><snippet>count</snippet></ROW><ROW><id>3200496</id><snippet>index</snippet></ROW><ROW><id>3200528</id><snippet>class ExtendedModel(models.Model):
        created_by = models.ForeignKey(User,related_name='"%(app_label)s_%(class)s_created_by')
        modified_by = models.ForeignKey(User,related_name='"%(app_label)s_%(class)s_modified_by')
        class Meta:
                abstract = True

class ChildModel1(ExtendedModel):
        pass

class ChildModel2(ExtendedModel):
        pass
</snippet></ROW><ROW><id>3200684</id><snippet>zipimport</snippet></ROW><ROW><id>3200684</id><snippet>.pyc</snippet></ROW><ROW><id>3200684</id><snippet>.pyo</snippet></ROW><ROW><id>3200684</id><snippet>.pyd</snippet></ROW><ROW><id>3200689</id><snippet>duck typing</snippet></ROW><ROW><id>3200689</id><snippet>isinstance</snippet></ROW><ROW><id>3200689</id><snippet>if hasattr(type(obj), '__call__'): ...
</snippet></ROW><ROW><id>3200689</id><snippet>import collections
if isinstance(obj, collections.Callable): ...
</snippet></ROW><ROW><id>3200689</id><snippet>collections.MutableSequence</snippet></ROW><ROW><id>3200689</id><snippet>isinstance</snippet></ROW><ROW><id>3200689</id><snippet>isinstance</snippet></ROW><ROW><id>3201533</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>3201813</id><snippet>im = Image.open(StringIO(request.FILES['im'].read()))
</snippet></ROW><ROW><id>3202096</id><snippet>&gt;&gt;&gt; l = [{'id':1,'name':'Foo'},{'id':2,'name':'Bar'}]
&gt;&gt;&gt; [tuple(d.values()) for d in l]
[(1, 'Foo'), (2, 'Bar')]
</snippet></ROW><ROW><id>3202429</id><snippet>Player</snippet></ROW><ROW><id>3202429</id><snippet>__slots__</snippet></ROW><ROW><id>3202630</id><snippet>SELECT</snippet></ROW><ROW><id>3202630</id><snippet>print str(choices.query)</snippet></ROW><ROW><id>3202653</id><snippet>NotesSession.ConvertMIME</snippet></ROW><ROW><id>3202653</id><snippet>NotesMIMEEntity</snippet></ROW><ROW><id>3202653</id><snippet>NotesMIMEHeader</snippet></ROW><ROW><id>3202653</id><snippet>NotesMIMEEntity</snippet></ROW><ROW><id>3202653</id><snippet>NotesMIMEHeader</snippet></ROW><ROW><id>3203001</id><snippet>ALLOWED = ('color', 'size', 'model')
kwargs = dict(
    (key, value)
    for key, value in request.GET.items()
    if key in ALLOWED
)
query.filter(**kwargs)
</snippet></ROW><ROW><id>3203001</id><snippet>/search/?color=red&amp;size=1</snippet></ROW><ROW><id>3203001</id><snippet>/search/?model=Nikon&amp;color=black</snippet></ROW><ROW><id>3203121</id><snippet>random.random</snippet></ROW><ROW><id>3203121</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; if random.random() &lt; percentage_chance:
    print('aaa')
</snippet></ROW><ROW><id>3203186</id><snippet>MEDIA_ROOT = '/home/webapps/test_project/media/'
</snippet></ROW><ROW><id>3203374</id><snippet>MyClass.method1()</snippet></ROW><ROW><id>3203374</id><snippet>False</snippet></ROW><ROW><id>3203374</id><snippet>mc</snippet></ROW><ROW><id>3203374</id><snippet>MyClass.method1()</snippet></ROW><ROW><id>3203374</id><snippet>mc</snippet></ROW><ROW><id>3203374</id><snippet>mc.method1()</snippet></ROW><ROW><id>3203374</id><snippet>mc</snippet></ROW><ROW><id>3203374</id><snippet>MyOtherClass</snippet></ROW><ROW><id>3203374</id><snippet>self.mc</snippet></ROW><ROW><id>3203374</id><snippet>MyClass</snippet></ROW><ROW><id>3203549</id><snippet>Range</snippet></ROW><ROW><id>3203549</id><snippet>Accept-Ranges</snippet></ROW><ROW><id>3203549</id><snippet>HEAD</snippet></ROW><ROW><id>3203549</id><snippet>&gt; HEAD /2238/2758537173_670161cac7_b.jpg HTTP/1.1
&gt; Host: farm3.static.flickr.com
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Thu, 08 Jul 2010 12:22:12 GMT
&lt; Content-Type: image/jpeg
&lt; Connection: keep-alive
&lt; Server: Apache/2.0.52 (Red Hat)
&lt; Expires: Mon, 28 Jul 2014 23:30:00 GMT
&lt; Last-Modified: Wed, 13 Aug 2008 06:13:54 GMT
&lt; Accept-Ranges: bytes
&lt; Content-Length: 350015
</snippet></ROW><ROW><id>3203549</id><snippet>GET</snippet></ROW><ROW><id>3203549</id><snippet>Range</snippet></ROW><ROW><id>3203549</id><snippet>&gt; GET /2238/2758537173_670161cac7_b.jpg HTTP/1.1
&gt; Host: farm3.static.flickr.com
&gt; Accept: */*
&gt; Range: bytes=0-10
&gt; 
&lt; HTTP/1.1 206 Partial Content
&lt; Date: Thu, 08 Jul 2010 12:26:54 GMT
&lt; Content-Type: image/jpeg
&lt; Connection: keep-alive
&lt; Server: Apache/2.0.52 (Red Hat)
&lt; Expires: Mon, 28 Jul 2014 23:30:00 GMT
&lt; Last-Modified: Wed, 13 Aug 2008 06:13:54 GMT
&lt; Accept-Ranges: bytes
&lt; Content-Range: bytes 0-10/350015
&lt; Content-Length: 11
&lt; 
</snippet></ROW><ROW><id>3203549</id><snippet>00000000  ff d8 ff e0 00 10 4a 46  49 46 00                 |......JFIF.|
0000000b
</snippet></ROW><ROW><id>3203623</id><snippet>class SomeModel(db.Expando):
    pass

your_model = SomeModel()
for k, v in your_dict.iteritems():
    setattr(your_model, k, v)
</snippet></ROW><ROW><id>3203623</id><snippet>your_model.__dict__.update(your_dict)</snippet></ROW><ROW><id>3203623</id><snippet>class SomeModel(db.Model):
    pickled_data = db.BlobProperty()

your_model = SomeModel()
your_model.pickled_data = pickle.dumps(your_dict)
</snippet></ROW><ROW><id>3203659</id><snippet>property</snippet></ROW><ROW><id>3203659</id><snippet>instance</snippet></ROW><ROW><id>3203659</id><snippet>None</snippet></ROW><ROW><id>3203659</id><snippet>__get__</snippet></ROW><ROW><id>3203659</id><snippet>owner</snippet></ROW><ROW><id>3203659</id><snippet>&gt;&gt;&gt; class classproperty(object):
...     def __init__(self, getter):
...         self.getter= getter
...     def __get__(self, instance, owner):
...         return self.getter(owner)
... 
&gt;&gt;&gt; class Foo(object):
...     x= 4
...     @classproperty
...     def number(cls):
...         return cls.x
... 
&gt;&gt;&gt; Foo().number
4
&gt;&gt;&gt; Foo.number
4
</snippet></ROW><ROW><id>3203741</id><snippet>wsgi.input</snippet></ROW><ROW><id>3203741</id><snippet>environ['wsgi.input']</snippet></ROW><ROW><id>3203741</id><snippet>StringIO</snippet></ROW><ROW><id>3203741</id><snippet>e = {}
setup_testing_defaults(e)
s = urlencode({'q': 'is there a way to set the value of wsgi input'})
e['wsgi.input'] = StringIO(s)
</snippet></ROW><ROW><id>3203851</id><snippet>on_findLineEdit_textEdited = pyqtSignature("Qstring")(on_findLineEdit_textEdited)
</snippet></ROW><ROW><id>3203851</id><snippet>def echo_fname(f):
    def newfun():
       print f.__name__
       f()
    return newfun
</snippet></ROW><ROW><id>3203851</id><snippet>f</snippet></ROW><ROW><id>3204000</id><snippet>Track</snippet></ROW><ROW><id>3204000</id><snippet>from project.apps.tracks.models import Track
# import for slugify

def process_slug():
    """ Populate slug field, if they are empty. 
    """
    for track in Track.objects.all():
        if not track.slug:  
            slug = slugify("%s - %s" % (track.name, track.artist)) 
            track.slug = slug
            track.save()
</snippet></ROW><ROW><id>3204000</id><snippet>management/commands</snippet></ROW><ROW><id>3204000</id><snippet>Track</snippet></ROW><ROW><id>3204000</id><snippet>save</snippet></ROW><ROW><id>3204171</id><snippet>&gt;&gt;&gt; n = []
&gt;&gt;&gt; for line in open(fname):
    els = line.split('\t')
    n.append(els[:2])
    n.append(els[2:])


&gt;&gt;&gt; n
[['A', '3'], ['A', '6'], ['B', '6'], ['B', '9'], ['C', '0'], ['C', '2']]
</snippet></ROW><ROW><id>3204171</id><snippet>&gt;&gt;&gt; g = (line.split('\t') for line in open(fname))
&gt;&gt;&gt; [els[i:i+2] for els in g for i in range(0, 4, 2)]
[['A', '3'], ['A', '6'], ['B', '6'], ['B', '9'], ['C', '0'], ['C', '2']]
</snippet></ROW><ROW><id>3204267</id><snippet>&gt;&gt;&gt; tupleOfTuples = ((1, 2), (3, 4), (5,))
&gt;&gt;&gt; [element for tupl in tupleOfTuples for element in tupl]
[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>3204267</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; it = lambda: list(chain(*tupleOfTuples))
&gt;&gt;&gt; timeit.timeit(it)
2.1475738355700913
&gt;&gt;&gt; lc = lambda: [element for tupl in tupleOfTuples for element in tupl]
&gt;&gt;&gt; timeit.timeit(lc)
1.5745135182887857
</snippet></ROW><ROW><id>3204267</id><snippet>tuple</snippet></ROW><ROW><id>3204794</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>3204794</id><snippet>child_procs = {'name1' : Process(target=myprocfunc, name='name1'), ...}</snippet></ROW><ROW><id>3204794</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>3204861</id><snippet>#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# The above encoding declaration is required and the file must be saved as UTF-8

from __future__ import with_statement   # Not required in Python 2.6 any more

import codecs

p = u"абвгдежзийкл"  # note the 'u' prefix

print p   # probably won't work on Windows due to a complex issue

with codecs.open("tets.txt", "w", "utf-16") as stream:   # or utf-8
    stream.write(p + u"\n")

# Now you should have a file called "tets.txt" that can be opened with Notepad or any other editor
</snippet></ROW><ROW><id>3205551</id><snippet>soda = a + b
</snippet></ROW><ROW><id>3205551</id><snippet>a</snippet></ROW><ROW><id>3205551</id><snippet>b</snippet></ROW><ROW><id>3205619</id><snippet>twisted.web.client.Agent</snippet></ROW><ROW><id>3205619</id><snippet>Agent</snippet></ROW><ROW><id>3205775</id><snippet>codecs.lookup</snippet></ROW><ROW><id>3205775</id><snippet>WriteConsoleW</snippet></ROW><ROW><id>3205775</id><snippet>ctypes</snippet></ROW><ROW><id>3206402</id><snippet>arg</snippet></ROW><ROW><id>3206402</id><snippet>arg</snippet></ROW><ROW><id>3206402</id><snippet>Before assignment         After assignment

args          arg          args          arg
  |            |            |            |
  |            |            |            |
(array)        /          (array)       'sdfkj'
  |[0]        /             |[0]        
   \         /              |
    \       /               |
     '-sdfkj'            '-sdfkj'
</snippet></ROW><ROW><id>3206446</id><snippet>{{ something|safe }}
</snippet></ROW><ROW><id>3206477</id><snippet>2.el5</snippet></ROW><ROW><id>3206477</id><snippet>.</snippet></ROW><ROW><id>3206477</id><snippet>\.(.*)</snippet></ROW><ROW><id>3206477</id><snippet>import rpm
# t1 and t2 are tuples of (version, release)
def compare(t1, t2):
    v1, r1 = t1
    v2, r2 = t2
    return rpm.labelCompare(('1', v1, r1), ('1', v2, r2))
</snippet></ROW><ROW><id>3206477</id><snippet>'1'</snippet></ROW><ROW><id>3206477</id><snippet>rpm</snippet></ROW><ROW><id>3206477</id><snippet>Obsoletes</snippet></ROW><ROW><id>3206477</id><snippet>rpm</snippet></ROW><ROW><id>3206477</id><snippet>rpm 4.4.2.3</snippet></ROW><ROW><id>3206477</id><snippet>[a-zA-Z]+</snippet></ROW><ROW><id>3206477</id><snippet>[0-9]+</snippet></ROW><ROW><id>3206477</id><snippet>[^a-zA-Z0-9]*</snippet></ROW><ROW><id>3206477</id><snippet>lib/rpmvercmp.c</snippet></ROW><ROW><id>3206627</id><snippet>group = [x + 'All.dbf' for x in group]
</snippet></ROW><ROW><id>3206653</id><snippet>fig = matplotlib.pyplot.figure()

plt1 = fig.add_subplot(2,1,1)
plt2 = fig.add_subplot(2,1,2)
</snippet></ROW><ROW><id>3206653</id><snippet>plt1</snippet></ROW><ROW><id>3206653</id><snippet>plt2</snippet></ROW><ROW><id>3206804</id><snippet>self.client</snippet></ROW><ROW><id>3206804</id><snippet>send</snippet></ROW><ROW><id>3206804</id><snippet>updateClient</snippet></ROW><ROW><id>3206804</id><snippet>updateClient</snippet></ROW><ROW><id>3206804</id><snippet>global</snippet></ROW><ROW><id>3206804</id><snippet>iteritems</snippet></ROW><ROW><id>3207009</id><snippet>def doFileStuff(filename):
   with open(filename, 'r') as f:
       for line in f:
            #do something
   return False # On success
</snippet></ROW><ROW><id>3207009</id><snippet>def performFileManipulation(self, widget, data=None):
        # Create the file chooser dialog:
        dialog = gtk.FileChooserDialog("Open..", 
                                       None, 
                                       gtk.FILE_CHOOSER_ACTION_OPEN, 
                                       (gtk.STOCK_CANCEL, 
                                        gtk.RESPONSE_CANCEL, 
                                        gtk.STOCK_OPEN, gtk.RESPONSE_OK))
        dialog.set_default_response(gtk.RESPONSE_OK)

        # Display the file selector and obtain the response back
        response = dialog.run()

        # If the user selected a file, then get the filename:
        if response == gtk.RESPONSE_OK:
            dataLocation = dialog.get_filename()

        # If the file was not chosen, then just close the window:
        else:
            print "Closed, no files selected"   # Just for now

        # You'll need to import gobject
        gobject.timeout_add(100, doFileStuff, dataLocation)
</snippet></ROW><ROW><id>3207250</id><snippet>file</snippet></ROW><ROW><id>3207250</id><snippet>&gt; file /Applications/TextEdit.app/Contents/MacOS/TextEdit 
/Applications/TextEdit.app/Contents/MacOS/TextEdit: Mach-O universal binary with 2 architectures
/Applications/TextEdit.app/Contents/MacOS/TextEdit (for architecture x86_64):   Mach-O 64-bit executable x86_64
/Applications/TextEdit.app/Contents/MacOS/TextEdit (for architecture i386): Mach-O executable i386
</snippet></ROW><ROW><id>3207363</id><snippet>arch -x86_64 /usr/bin/python2.6
</snippet></ROW><ROW><id>3207363</id><snippet>$ file /usr/bin/python2.5
/usr/bin/python2.5: Mach-O universal binary with 2 architectures
/usr/bin/python2.5 (for architecture i386): Mach-O executable i386
/usr/bin/python2.5 (for architecture ppc7400):  Mach-O executable ppc

$ file /usr/bin/python2.6
/usr/bin/python2.6: Mach-O universal binary with 3 architectures
/usr/bin/python2.6 (for architecture x86_64):   Mach-O 64-bit executable x86_64
/usr/bin/python2.6 (for architecture i386): Mach-O executable i386
/usr/bin/python2.6 (for architecture ppc7400):  Mach-O executable ppc
</snippet></ROW><ROW><id>3207363</id><snippet>python</snippet></ROW><ROW><id>3207363</id><snippet>python_select</snippet></ROW><ROW><id>3207989</id><snippet>def foo(self, a, b):
    params = frozenset([a, b])
    if params in self._cache:
        self._cache[params] = self._calculate(a, b)
    return self._cache[params]
</snippet></ROW><ROW><id>3207989</id><snippet>def foo(self, a, b):
    params = frozenset([a, b])
    if params not in self._cache:
        self._cache[params] = self._calculate(a, b)
    return self._cache[params]
</snippet></ROW><ROW><id>3207989</id><snippet>def foo(self, a, b):
    if a &lt; b:
        params = (a, b)
    else:
        params = (b, a)
    try:
        return self._cache[params]
    except KeyError:
        v = self._cache[params] = self._calculate(a, b)
        return v
</snippet></ROW><ROW><id>3207997</id><snippet>&lt;pre&gt;&lt;/pre&gt;</snippet></ROW><ROW><id>3208000</id><snippet>big_file = open('big_file', 'r')
small_file1 = open('small_file1', 'w')
small_file2 = open('small_file2', 'w')

for line in big_file:
    if 'Charlie' in line: small_file1.write(line)
    if 'Mark' in line: small_file2.write(line)

big_file.close()
small_file1.close()
small_file2.close()
</snippet></ROW><ROW><id>3208000</id><snippet>with open('big_file', 'r') as big_file:
    &lt;do stuff prone to error&gt;
</snippet></ROW><ROW><id>3208107</id><snippet>pairs</snippet></ROW><ROW><id>3208107</id><snippet>averages = [float(sum(values)) / len(values) for key, values in pairs]
</snippet></ROW><ROW><id>3208107</id><snippet>sum(values)</snippet></ROW><ROW><id>3208107</id><snippet>sum([int(i) for i in values])</snippet></ROW><ROW><id>3208107</id><snippet>averages = dict([(key, float(sum(values)) / len(values)) for key, values in pairs])
</snippet></ROW><ROW><id>3208227</id><snippet>suffixes</snippet></ROW><ROW><id>3208227</id><snippet>suffixes = parse_suffix_list("suffix_list.txt")
</snippet></ROW><ROW><id>3208227</id><snippet>def is_domain(d):
    for suffix in suffixes:
        if d.endswith(suffix):
            # Get the base domain name without suffix
            base_name = d[0:-(suffix.length + 1)]
            # If it contains '.', it's a subdomain. 
            if not base_name.contains('.'):
                return true
    # If we get here, no matches were found
    return false
</snippet></ROW><ROW><id>3208612</id><snippet>try:
    try:
        raise ValueError('1')
    except TypeError:
        print 'Caught the type error'
except ValueError:
    print 'Caught the value error!'
</snippet></ROW><ROW><id>3208612</id><snippet>try:
    try:
        raise ValueError('1')
    except TypeError:
        pass
    except ValueError:
        print 'Caught the inner ValueError!'
except ValueError:
    print 'Caught the outer value error!'
</snippet></ROW><ROW><id>3208826</id><snippet>/opt/...</snippet></ROW><ROW><id>3208826</id><snippet>PATH</snippet></ROW><ROW><id>3208826</id><snippet>.bashrc</snippet></ROW><ROW><id>3208915</id><snippet>extrasaction='ignore'</snippet></ROW><ROW><id>3208915</id><snippet>DictWriter</snippet></ROW><ROW><id>3208915</id><snippet>writerow()</snippet></ROW><ROW><id>3208915</id><snippet>'raise'</snippet></ROW><ROW><id>3208915</id><snippet>ValueError</snippet></ROW><ROW><id>3208915</id><snippet>'ignore'</snippet></ROW><ROW><id>3208915</id><snippet>writerows</snippet></ROW><ROW><id>3208915</id><snippet>writerow</snippet></ROW><ROW><id>3208972</id><snippet>template&lt;class T&gt;
struct foo {};

template&lt;class T&gt;
void export_foo(std::string name) { 
    boost::python::class_&lt;foo&lt;T&gt;&gt;(name.c_str());
}

BOOST_PYTHON_MODULE(foo)
{
    export_foo&lt;int&gt;("foo_int");
    export_foo&lt;std::string&gt;("foo_string");
    //...
}
</snippet></ROW><ROW><id>3209082</id><snippet>$ xset q | grep LED
&gt;  auto repeat:  on    key click percent:  0    LED mask:  00000000
</snippet></ROW><ROW><id>3209082</id><snippet>&gt;&gt;&gt; import commands
&gt;&gt;&gt; # Caps Lock is off.
&gt;&gt;&gt; commands.getoutput("xset q | grep LED")[65]
'0'
&gt;&gt;&gt; # Setting Caps Lock on now.
&gt;&gt;&gt; commands.getoutput("xset q | grep LED")[65]
'1'
</snippet></ROW><ROW><id>3209240</id><snippet>__new__()</snippet></ROW><ROW><id>3209240</id><snippet>class ClassA:
    def __new__(cls,theirnumber):
        if theirnumber &gt; 10:
            # all big numbers should be ClassB objects:
            return ClassB.ClassB(theirnumber)
        else:
            # numbers under 10 are ok in ClassA.
            return super(ClassA, cls).__new__(theirnumber)
</snippet></ROW><ROW><id>3209240</id><snippet>__new__()</snippet></ROW><ROW><id>3209240</id><snippet>__init__()</snippet></ROW><ROW><id>3209240</id><snippet>__new__()</snippet></ROW><ROW><id>3209240</id><snippet>__init__()</snippet></ROW><ROW><id>3209240</id><snippet>__new__()</snippet></ROW><ROW><id>3209240</id><snippet>__init__()</snippet></ROW><ROW><id>3209240</id><snippet>__init__()</snippet></ROW><ROW><id>3209240</id><snippet>def thingy(theirnumber):
    if theirnumber &gt; 10:
        return ClassB.ClassB(theirnumber)
    else:
        return ClassA.ClassA(theirnumber)
</snippet></ROW><ROW><id>3209240</id><snippet>__new__()</snippet></ROW><ROW><id>3209240</id><snippet>ClassB</snippet></ROW><ROW><id>3209240</id><snippet>__init__()</snippet></ROW><ROW><id>3209240</id><snippet>ClassB</snippet></ROW><ROW><id>3209240</id><snippet>__init__()</snippet></ROW><ROW><id>3209240</id><snippet>__new__()</snippet></ROW><ROW><id>3209240</id><snippet>__new__()</snippet></ROW><ROW><id>3209240</id><snippet>ClassA</snippet></ROW><ROW><id>3209254</id><snippet>attendees = rsvp.attendee_set.select_related().all().order_by('email__first_name')
</snippet></ROW><ROW><id>3209340</id><snippet>  my_name = 'Samuel Robert Dolan'
</snippet></ROW><ROW><id>3209557</id><snippet>split()</snippet></ROW><ROW><id>3209557</id><snippet>contents = open("file.dat").read()
for line in contents.split("*"):
  if not line: continue  # Remove initial empty string.
  line = line.strip()   # Remove whitespace from beginning/end of lines.
  items = line.split("-")
  print items[0], ":", " ".join(items[1:])
</snippet></ROW><ROW><id>3209610</id><snippet>serve_forever</snippet></ROW><ROW><id>3209779</id><snippet>&gt;&gt;&gt; def f(): return f.x
... 
&gt;&gt;&gt; f.x = 7
&gt;&gt;&gt; f()
7
&gt;&gt;&gt; g = f
&gt;&gt;&gt; g()
7
&gt;&gt;&gt; del f
&gt;&gt;&gt; g()
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
  File "&lt;interactive input&gt;", line 1, in f
NameError: global name 'f' is not defined
</snippet></ROW><ROW><id>3209779</id><snippet>def fn1(oneArg):
    // do the due

def fn2(oneArg, **kw):
    if 'option1' in kw:
        print 'called with option1=', kw['option1']
    //do the rest

fn2(42)
fn2(42, option1='something')
</snippet></ROW><ROW><id>3209779</id><snippet>sorted(dct,key=dct.get,reverse=True)</snippet></ROW><ROW><id>3209847</id><snippet>accumulators</snippet></ROW><ROW><id>3209847</id><snippet>min</snippet></ROW><ROW><id>3209847</id><snippet>max</snippet></ROW><ROW><id>3209847</id><snippet>min</snippet></ROW><ROW><id>3209847</id><snippet>max</snippet></ROW><ROW><id>3209847</id><snippet>def consume(iterable):
    for item in iterable: pass
</snippet></ROW><ROW><id>3209847</id><snippet>for</snippet></ROW><ROW><id>3209847</id><snippet>consume</snippet></ROW><ROW><id>3209847</id><snippet>a.write</snippet></ROW><ROW><id>3209847</id><snippet>None</snippet></ROW><ROW><id>3209847</id><snippet>any</snippet></ROW><ROW><id>3209847</id><snippet>a.writelines</snippet></ROW><ROW><id>3210254</id><snippet>curses.use_default_colors()</snippet></ROW><ROW><id>3210262</id><snippet>import urllib
URL_TEMPLATE="http://www.europarl.europa.eu/sides/getDoc.do?type=REPORT&amp;mode=XML&amp;reference=A7-%d-%.4d&amp;language=EN"
maxRange=300

for year in [2010, 2011]:
    for page in range(1,maxRange):
        f=urllib.urlopen(URL_TEMPLATE%(year, page))
        text=f.read()
        if "&lt;title&gt;Application Error&lt;/title&gt;" in text:
            print "year %d and page %.4d NOT found" %(year, page)
        else:
            print "year %d and page %.4d FOUND" %(year, page)
        f.close()
</snippet></ROW><ROW><id>3210592</id><snippet>&gt;&gt;&gt; n = pynotify.Notification("summary", "body\n next line", "dialog-warning")
&gt;&gt;&gt; n.show()
</snippet></ROW><ROW><id>3210884</id><snippet>set(d_1.keys()) == set(d_2.keys())
</snippet></ROW><ROW><id>3211113</id><snippet>file_open</snippet></ROW><ROW><id>3211113</id><snippet>fo.read(3)</snippet></ROW><ROW><id>3211113</id><snippet>def read_first_bytes(filename):
    with open(filename,'r') as f:
        return f.read(3)
</snippet></ROW><ROW><id>3211113</id><snippet>&gt;&gt;&gt; print read_first_bytes("file.py")
</snippet></ROW><ROW><id>3211304</id><snippet>$ pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>3211304</id><snippet>$ pip install -r requirements.txt
</snippet></ROW><ROW><id>3211357</id><snippet>import os
f = open('txt.txt', 'a', os.O_NONBLOCK)
while 1:
        f.write('asd')
        f.flush()
</snippet></ROW><ROW><id>3211357</id><snippet>import os
f = open('txt.txt', 'r', os.O_NONBLOCK)
while 1:
    print f.read(3)
</snippet></ROW><ROW><id>3211539</id><snippet>self._generator = itertools.count(99)</snippet></ROW><ROW><id>3211539</id><snippet>itertools.tee</snippet></ROW><ROW><id>3211539</id><snippet>class counter(object):
    def __init__(self, current=0):
        self.current = current

    def __iter__(self):
        def iter():
            while True:
                yield self.current
                self.current += 1 # 
        return iter()

    def set(self,x):
        self.current = x

s = counter()
t = iter(s)
print t.next() # 0
s.set(20)
print t.next() # 21
</snippet></ROW><ROW><id>3212102</id><snippet>&gt;&gt;&gt; os.stat('testfile').st_blocks*512
0
</snippet></ROW><ROW><id>3212102</id><snippet>st_blocks</snippet></ROW><ROW><id>3212102</id><snippet>st_blocks</snippet></ROW><ROW><id>3212222</id><snippet>import sys
def file_open(filename):
        fo=open(filename,'r')
        fo.seek(7)
        read_data=fo.read(3)
        fo.close()
        print read_data
file_open("zzz")
</snippet></ROW><ROW><id>3212222</id><snippet>12345678901234567890123456789012345678901234567890
</snippet></ROW><ROW><id>3212222</id><snippet>...
open("zzz", O_RDONLY|O_LARGEFILE)       = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=51, ...}) = 0
fstat64(3, {st_mode=S_IFREG|0644, st_size=51, ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb73fb000
_llseek(3, 0, [0], SEEK_SET)            = 0
read(3, "1234567", 7)                   = 7
read(3, "89012345678901234567890123456789"..., 4096) = 44
close(3)                                = 0
...
</snippet></ROW><ROW><id>3212222</id><snippet>import sys, os
def file_open(filename):
        fo=os.open(filename, os.O_RDONLY)
        os.lseek(fo, 7, 0)
        read_data=os.read(fo, 3)
        os.close(fo)
        print read_data
file_open("zzz")
</snippet></ROW><ROW><id>3212222</id><snippet>...
open("zzz", O_RDONLY|O_LARGEFILE)       = 3
_llseek(3, 7, [7], SEEK_SET)            = 0
read(3, "890", 3)                       = 3
close(3)                                = 0
...
</snippet></ROW><ROW><id>3213019</id><snippet>statusBar = self.CreateStatusBar(style=0)
</snippet></ROW><ROW><id>3213078</id><snippet>def log(*args):
    logging.info(' '.join(map(str, args)))
</snippet></ROW><ROW><id>3213142</id><snippet>testmatrix</snippet></ROW><ROW><id>3213142</id><snippet>dot()</snippet></ROW><ROW><id>3213142</id><snippet>numpy.dot(testmatrix,testmatrix.T)</snippet></ROW><ROW><id>3213142</id><snippet>numpy.dot</snippet></ROW><ROW><id>3213142</id><snippet>*</snippet></ROW><ROW><id>3213142</id><snippet>.*</snippet></ROW><ROW><id>3213236</id><snippet>bsxfun</snippet></ROW><ROW><id>3213236</id><snippet>repmat</snippet></ROW><ROW><id>3213236</id><snippet>AA = bsxfun(@minus,A,b)</snippet></ROW><ROW><id>3213236</id><snippet>b</snippet></ROW><ROW><id>3213236</id><snippet>A</snippet></ROW><ROW><id>3213923</id><snippet>def cumfreq(a, numbins=10, defaultreallimits=None):
    # docstring omitted
    h,l,b,e = histogram(a,numbins,defaultreallimits)
    cumhist = np.cumsum(h*1, axis=0)
    return cumhist,l,b,e
</snippet></ROW><ROW><id>3213923</id><snippet>numpy.histogram</snippet></ROW><ROW><id>3213923</id><snippet>a = array([...]) # your array of numbers
num_bins = 20
counts, bin_edges = numpy.histogram(a, bins=num_bins, normed=True)
cdf = numpy.cumsum(counts)
pylab.plot(bin_edges[1:], cdf)
</snippet></ROW><ROW><id>3213923</id><snippet>bin_edges[1:]</snippet></ROW><ROW><id>3213939</id><snippet>C:/Python26/Lib/site-packages/</snippet></ROW><ROW><id>3213939</id><snippet>site-packages</snippet></ROW><ROW><id>3213939</id><snippet>easy_install PIL</snippet></ROW><ROW><id>3213990</id><snippet>**</snippet></ROW><ROW><id>3214343</id><snippet># slower.
twosArr = array.array('i', [2] * 1000000)

# faster.
twosArr = array.array('i', [2]) * 1000000
</snippet></ROW><ROW><id>3214343</id><snippet>twosList = [2] * 1000000
</snippet></ROW><ROW><id>3214558</id><snippet>fetchone</snippet></ROW><ROW><id>3214558</id><snippet>datetime</snippet></ROW><ROW><id>3214558</id><snippet>sql = "SELECT DATE_FORMAT(timestamp,"%Y-%m-%d %k:%i") FROM dataset Limit 0,1;"
</snippet></ROW><ROW><id>3214558</id><snippet>adate=datetime.datetime(2010, 7, 7, 19, 55)
adate.strftime('%Y-%m-%d %H:%M')
# 2010-07-07 19:55
</snippet></ROW><ROW><id>3214815</id><snippet>from pylab import *

figure()
subplot(121, aspect='equal')
plot([1, 2, 3], [1, 2, 3])
subplot(122, aspect='equal')
plot([1, 2, 3], [1, 2, 3])
show()
</snippet></ROW><ROW><id>3214963</id><snippet>food_list = ['apple', 'pear', 'tomato', 'bean', 'carrot', 'grape']
for i in xrange(0, len(food_list), 4):
    print '\t'.join(food_list[i:i+4])
</snippet></ROW><ROW><id>3215060</id><snippet>import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection

import pylab as p

fig = plt.figure()
pts1 = []
pts2 = []
for i in range(100):
    pts1.append([i,i])
    pts2.append([-i-3,-i])
lines = LineCollection([pts1,pts2], linestyles='solid')
subplt = fig.add_subplot(111,aspect='equal')
subplt.add_collection(lines)
subplt.autoscale_view(True,True,True)
p.show()
</snippet></ROW><ROW><id>3215229</id><snippet>__ini__</snippet></ROW><ROW><id>3215229</id><snippet>__init__</snippet></ROW><ROW><id>3215325</id><snippet>os.popen('tasklist').read()
</snippet></ROW><ROW><id>3215339</id><snippet>food_list = ['car', 'plane', 'van', 'boat', 'ship', 'jet','shuttle']
for i in xrange(0, len(food_list), 4):
    print '&lt;tr&gt;&lt;td&gt;' + '&lt;/td&gt;&lt;td&gt;'.join(food_list[i:i+4]) + '&lt;/td&gt;&lt;/tr&gt;'
</snippet></ROW><ROW><id>3215459</id><snippet>dict</snippet></ROW><ROW><id>3215459</id><snippet>fields</snippet></ROW><ROW><id>3215459</id><snippet>metaclass</snippet></ROW><ROW><id>3215459</id><snippet>__new__</snippet></ROW><ROW><id>3215459</id><snippet>attrs</snippet></ROW><ROW><id>3215459</id><snippet>__new__</snippet></ROW><ROW><id>3215459</id><snippet>_fields</snippet></ROW><ROW><id>3215459</id><snippet>__init__</snippet></ROW><ROW><id>3215459</id><snippet>deepcopy</snippet></ROW><ROW><id>3215459</id><snippet>attribute</snippet></ROW><ROW><id>3215459</id><snippet>fields</snippet></ROW><ROW><id>3215521</id><snippet>**</snippet></ROW><ROW><id>3215521</id><snippet>register</snippet></ROW><ROW><id>3215521</id><snippet>register</snippet></ROW><ROW><id>3215521</id><snippet>user = backend.register( request, userdata ) # you need to pass request as definition says

def register( self, request, userdata ): # note lack of **
    logging.debug("backend.register")
    logging.debug( userdata ) # should work as expected

    username, email, password = userdata['email'], userdata['email'], userdata['password1']
</snippet></ROW><ROW><id>3215706</id><snippet>print "\n"</snippet></ROW><ROW><id>3215706</id><snippet>print "Content-Type: image/eps"
print "Content-Disposition: attachment; filename=%s" % new_filename
print
print open(converted_file_fullpath).read()
</snippet></ROW><ROW><id>3215706</id><snippet>new_filename</snippet></ROW><ROW><id>3215718</id><snippet>text.mark_set("insert", "%d.%d" % (line + 1, column + 1)
</snippet></ROW><ROW><id>3215827</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>3215869</id><snippet>lines-of-code</snippet></ROW><ROW><id>3215869</id><snippet># prints recursive count of lines of python source code from current directory
# includes an ignore_list. also prints total sloc

import os
cur_path = os.getcwd()
ignore_set = set(["__init__.py", "count_sourcelines.py"])

loclist = []

for pydir, _, pyfiles in os.walk(cur_path):
    for pyfile in pyfiles:
        if pyfile.endswith(".py") and pyfile not in ignore_set:
            totalpath = os.path.join(pydir, pyfile)
            loclist.append( ( len(open(totalpath, "r").read().splitlines()),
                               totalpath.split(cur_path)[1]) )

for linenumbercount, filename in loclist: 
    print "%05d lines in %s" % (linenumbercount, filename)

print "\nTotal: %s lines (%s)" %(sum([x[0] for x in loclist]), cur_path)
</snippet></ROW><ROW><id>3215905</id><snippet>data = UserProfile(user=user)</snippet></ROW><ROW><id>3215905</id><snippet>data</snippet></ROW><ROW><id>3215955</id><snippet>52&gt; from urllib import urlopen
53&gt; from lxml import etree

54&gt; f = urlopen( "http://www.google.com" ).read()
55&gt; tree = etree.HTML( f )
61&gt; m = tree.xpath( "//meta" )

62&gt; for i in m:
..&gt;     print etree.tostring( i )
..&gt;
&lt;meta http-equiv="content-type" content="text/html; charset=ISO-8859-2"/&gt;  
</snippet></ROW><ROW><id>3215955</id><snippet>75&gt; f = urlopen( "http://www.w3schools.com/XPath/xpath_syntax.asp" ).read()
76&gt; tree = etree.HTML( f )
85&gt; tree.xpath( "//meta[@name='Keywords']" )[0].get("content")
85&gt; "xml,tutorial,html,dhtml,css,xsl,xhtml,javascript,asp,ado,vbscript,dom,sql,colors,soap,php,authoring,programming,training,learning,b
eginner's guide,primer,lessons,school,howto,reference,examples,samples,source code,tags,demos,tips,links,FAQ,tag list,forms,frames,color table,w3c,cascading
 style sheets,active server pages,dynamic html,internet,database,development,Web building,Webmaster,html guide"
</snippet></ROW><ROW><id>3215955</id><snippet>87&gt; f = urlopen( "http://www.w3schools.com/XPath/xpath_syntax.asp" ).read()
88&gt; import re
101&gt; re.search( "&lt;meta name=\"Keywords\".*?content=\"([^\"]*)\"", f ).group( 1 )
101&gt;"xml,tutorial,html,dhtml,css,xsl,xhtml,javascript,asp,ado,vbscript,dom,sql, ...etc...
</snippet></ROW><ROW><id>3216304</id><snippet>finallist = [item.strip() for item in newlist]
</snippet></ROW><ROW><id>3216304</id><snippet>finallist = [item.replace("\\n", "\n").strip() for item in newlist]
</snippet></ROW><ROW><id>3216418</id><snippet>&gt;&gt;&gt; mylist = [["quux", 1, "a"], ["bar", 0, "b"]]
&gt;&gt;&gt; mylist.sort(key=lambda x: x[1])
&gt;&gt;&gt; print mylist
</snippet></ROW><ROW><id>3216418</id><snippet>[['bar', 0, 'b'], ['quux', 1, 'a']]
</snippet></ROW><ROW><id>3216418</id><snippet>sorted</snippet></ROW><ROW><id>3216500</id><snippet>SHOW PROCESSLIST</snippet></ROW><ROW><id>3216500</id><snippet>information_schema.processlist</snippet></ROW><ROW><id>3216694</id><snippet>if x:</snippet></ROW><ROW><id>3216694</id><snippet>int</snippet></ROW><ROW><id>3216694</id><snippet>x != 0</snippet></ROW><ROW><id>3216724</id><snippet>import math
def radians_from_triple(deg, min=0, sec=0):
    return math.radians(deg + min * 60 ** -1 + sec * 60 ** -2)
</snippet></ROW><ROW><id>3216728</id><snippet>+=</snippet></ROW><ROW><id>3216728</id><snippet>extend</snippet></ROW><ROW><id>3216728</id><snippet>+</snippet></ROW><ROW><id>3216728</id><snippet>extend</snippet></ROW><ROW><id>3216728</id><snippet>+</snippet></ROW><ROW><id>3216728</id><snippet>+</snippet></ROW><ROW><id>3216728</id><snippet>extend</snippet></ROW><ROW><id>3216728</id><snippet>x += y</snippet></ROW><ROW><id>3216728</id><snippet>x = x + y</snippet></ROW><ROW><id>3216728</id><snippet>+=</snippet></ROW><ROW><id>3216728</id><snippet>+</snippet></ROW><ROW><id>3216966</id><snippet>from django.db import connection

table_info = []
tables = connection.introspection.table_names()
seen_models = connection.introspection.installed_models(tables)
for model in seen_models:
    table = model._meta.db_table
    columns = [field.column for field in model._meta.fields]
    table_info.append((table, columns))
</snippet></ROW><ROW><id>3216966</id><snippet>for model in seen_models:
    for field in model._meta.local_many_to_many:
        if not field.creates_table:
            continue

        table = field.m2m_db_table()
        columns = ['id'] # They always have an id column
        columns.append(field.m2m_column_name())
        columns.append(field.m2m_reverse_name())
        table_info.append((table, columns))
</snippet></ROW><ROW><id>3216986</id><snippet>file</snippet></ROW><ROW><id>3216986</id><snippet>file</snippet></ROW><ROW><id>3216986</id><snippet>with open('/home/rv/ncbi-blast-2.2.23+/db/output.blast') as f:
    z = csv.reader(f, delimiter='\t')
</snippet></ROW><ROW><id>3216986</id><snippet>with</snippet></ROW><ROW><id>3216986</id><snippet>try...finally</snippet></ROW><ROW><id>3216986</id><snippet>finally</snippet></ROW><ROW><id>3217155</id><snippet>class HelloWorldService(SimpleWSGISoapApp):
    def say_hello(self, name, times):
        pass
</snippet></ROW><ROW><id>3217350</id><snippet>s.find('\xff\xc0')
</snippet></ROW><ROW><id>3217462</id><snippet>soaplib</snippet></ROW><ROW><id>3217788</id><snippet>x = [5,6,7,8,9]
</snippet></ROW><ROW><id>3217788</id><snippet>ax.plot(x, data2, ...)
</snippet></ROW><ROW><id>3217788</id><snippet>range(5,10)</snippet></ROW><ROW><id>3217788</id><snippet>arange(5,10)</snippet></ROW><ROW><id>3217788</id><snippet>linspace(5,9,5)</snippet></ROW><ROW><id>3217844</id><snippet>class flags(object):
    def __init__(self, *opts):
        keys = [t[0] for t in opts]
        words = [t[1] for t in opts]
        nums = [2**i for i in range(len(opts))]
        self.attrs = dict(zip(keys,nums))
        self.choices = zip(nums,words)

    def __getattr__(self, a):
        return self.attrs[a]

    def __iter__(self):
        return iter(self.choices)

Abilities = flags(
    ('FLY', 'Can fly'),
    ('FIREBALL', 'Can shoot fireballs'),
    ('INVISIBLE', 'Can turn invisible'),
)

print Abilities.FLY
for k, v in Abilities:
    print k, v
</snippet></ROW><ROW><id>3218048</id><snippet>&gt;&gt;&gt; u'\uffff'.encode('gbk')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'gbk' codec can't encode character u'\uffff' in position 0: illegal multibyte sequence
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3218048</id><snippet>import sys, urllib.request
url = "http://www.meilishuo.com"
wp = urllib.request.urlopen(url)
content = wp.read()
str_content = content.decode('utf-8')
fp = open("web.txt","w")
fp.write(str_content)
fp.close() 
</snippet></ROW><ROW><id>3218048</id><snippet>gbk_content = str_content.encode('gbk')</snippet></ROW><ROW><id>3218048</id><snippet>UnicodeEncodeError: 'gbk' codec can't encode character '\u2764' in position 35070: illegal multibyte sequence</snippet></ROW><ROW><id>3218048</id><snippet>\u2664</snippet></ROW><ROW><id>3218128</id><snippet>class EmailValidator(RegexValidator):

    def __call__(self, value):
        try:
            super(EmailValidator, self).__call__(value)
        except ValidationError, e:
            # Trivial case failed. Try for possible IDN domain-part
            if value and u'@' in value:
                parts = value.split(u'@')
                domain_part = parts[-1]
                try:
                    parts[-1] = parts[-1].encode('idna')
                except UnicodeError:
                    raise e
                super(EmailValidator, self).__call__(u'@'.join(parts))
            else:
                raise

email_re = re.compile(
    r"(^[-!#$%&amp;'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&amp;'*+/=?^_`{}|~0-9A-Z]+)*"  # dot-atom
    r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-011\013\014\016-\177])*"' # quoted-string
    r')@(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?$', re.IGNORECASE)  # domain
validate_email = EmailValidator(email_re, _(u'Enter a valid e-mail address.'), 'invalid')
</snippet></ROW><ROW><id>3218128</id><snippet>email_re</snippet></ROW><ROW><id>3218128</id><snippet>validate_email</snippet></ROW><ROW><id>3218128</id><snippet>ValidationError</snippet></ROW><ROW><id>3218128</id><snippet>def validateEmail( email ):
    from django.core.validators import validate_email
    from django.core.exceptions import ValidationError
    try:
        validate_email( email )
        return True
    except ValidationError:
        return False
</snippet></ROW><ROW><id>3218158</id><snippet>;</snippet></ROW><ROW><id>3218158</id><snippet>;</snippet></ROW><ROW><id>3218158</id><snippet>from twisted.internet import reactor, protocol, task
from twisted.protocols import basic
from twisted.python import log
import sys

class ServerProtocol(basic.LineOnlyReceiver):
    delimiter = ';'

    def lineReceived(self, line):
        if line.startswith('I'):
            user = dict(uid=line[1:6], x=line[6:9], y=line[9:12])
            self.factory.users[user['uid']] = user
            log.msg(repr(self.factory.users))
            self.startUpdateClient()
            self.sendLine('Beginning - Initialized')
        elif line.startswith('A'):
            self.sendLine(line)
        else:
            self.transport.loseConnection()

    def _updateClient(self):
        if self._running == 0:
            self._looper.stop()
            return
        self._running -= 1
        self._test += 1
        self.sendLine('Test Queue Data #%d' % (self._test,))

    def startUpdateClient(self):
        self._running, self._test = 20, 0
        self._looper = task.LoopingCall(self._updateClient)
        self._looper.start(1, now=False)

class Server(protocol.ServerFactory):
    protocol = ServerProtocol
    def __init__(self):
        self.users = {}

if __name__ == '__main__':
    log.startLogging(sys.stderr)
    reactor.listenTCP(2000, Server())
    reactor.run()
</snippet></ROW><ROW><id>3218162</id><snippet>[[False] * nodeCount] * nodeCount
</snippet></ROW><ROW><id>3218162</id><snippet>nodeCount</snippet></ROW><ROW><id>3218162</id><snippet>nodeCount</snippet></ROW><ROW><id>3218162</id><snippet>&gt;&gt;&gt; x = [False] * 3
&gt;&gt;&gt; y = [x] * 3
&gt;&gt;&gt; y[0] is y[1]
True
&gt;&gt; # your problem
&gt;&gt;&gt; y[0][0] = True
&gt;&gt;&gt; y[1]
[True, False, False]
</snippet></ROW><ROW><id>3218162</id><snippet>[[False]*nodeCount for _ in xrange(nodeCount)]
</snippet></ROW><ROW><id>3218162</id><snippet>&gt;&gt;&gt; y = [[False]*3 for _ in xrange(3)]
&gt;&gt;&gt; y[0] is y[1]
False
&gt;&gt;&gt; y[0][0] = True
&gt;&gt;&gt; y[1]
[False, False, False]
</snippet></ROW><ROW><id>3218257</id><snippet>import datetime
from google.appengine.ext import db
from google.appengine.tools import bulkloader

class Contact(db.Model):

    date = db.DateTimeProperty(auto_now_add=True)

    owner = db.StringProperty()

    companyname = db.StringProperty()

    companyemail = db.EmailProperty()

def myfunc(x):
    temp = x.split(":mailto:")
    if len(temp) &gt; 0:
        temp = temp[-1].split(":")
    else:
        return "defaultvalue"
    if len(temp) &gt; 0:
        temp = temp[0]
    else:
        return "defaultvalue"
    temp = temp.split("&lt;1&gt;")[0]
    if temp is None or len(temp) &lt; 5:
        return "defaultvalue"
    return temp

def mysecfunc(x):
    return x.split("&lt;0&gt;")[0]

class ContactLoader(bulkloader.Loader):
    def __init__(self):
        bulkloader.Loader.__init__(self, 'Contact',
                                   [
                                    ('companyname',mysecfunc),
                                    ('owner', lambda x:"somevalue"),
                                    ('companyemail',myfunc),
                                    ("date",lambda x:datetime.datetime.now()),
                                   ])

loaders = [ContactLoader]
</snippet></ROW><ROW><id>3218311</id><snippet>functools.partial</snippet></ROW><ROW><id>3218311</id><snippet>from functools import partial

def evaluate(match, mappings):
    return str(eval(match.group(0)[2:-1], mappings))

mappings = {'A': 1, 'B': 2}  # Or whatever ...

newstring = sub(r'\#\{([^#]+)\}', partial(evaluate, mappings=mappings), string)
</snippet></ROW><ROW><id>3218367</id><snippet>is</snippet></ROW><ROW><id>3218367</id><snippet>id()</snippet></ROW><ROW><id>3218367</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = 1
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; id(a) == id(b)
True
</snippet></ROW><ROW><id>3218367</id><snippet>==</snippet></ROW><ROW><id>3218367</id><snippet>__eq__()</snippet></ROW><ROW><id>3218367</id><snippet>is</snippet></ROW><ROW><id>3218367</id><snippet>&gt;&gt;&gt; "foobar" is "foobar"   # The interpreter knows that the string literals are
True                       # equal and creates only one shared object.
&gt;&gt;&gt; a = "foobar"
&gt;&gt;&gt; b = "foobar"
&gt;&gt;&gt; a is b        # "foobar" comes from the pool, so it is still the same object.
True
&gt;&gt;&gt; b = "foo"     # Here, we construct another string "foobar" dynamically that is
&gt;&gt;&gt; b += "bar"    # physically not the same as the pooled "foobar".
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
False
</snippet></ROW><ROW><id>3218367</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a = 2
&gt;&gt;&gt; b
1
</snippet></ROW><ROW><id>3218367</id><snippet>const int ONE = 1;
const int TWO = 2;

int *a = &amp;ONE;
int *b = a;  /* b points to 1 */
a = &amp;TWO;    /* a points to 2, b still points to 1 */
</snippet></ROW><ROW><id>3218680</id><snippet>Makefile</snippet></ROW><ROW><id>3218680</id><snippet>os.chdir()</snippet></ROW><ROW><id>3218680</id><snippet>eval()</snippet></ROW><ROW><id>3218680</id><snippet>ConfigParser()</snippet></ROW><ROW><id>3219374</id><snippet>thread = Thread()
thread.finished.connect(gui.do_update_thingy)
</snippet></ROW><ROW><id>3219374</id><snippet>terminated</snippet></ROW><ROW><id>3219374</id><snippet>started</snippet></ROW><ROW><id>3219438</id><snippet>def selectFile():
    lineEdit.setText(QFileDialog.getOpenFileName())

pushButton.clicked.connect(selectFile)
</snippet></ROW><ROW><id>3219460</id><snippet>$ echo whoami | vzctl enter 123  # stdin is not a tty

$ vzctl enter 123 | cat          # stdout is not a tty
whoami
&lt;ctrl-d&gt;
</snippet></ROW><ROW><id>3219460</id><snippet>pty</snippet></ROW><ROW><id>3219460</id><snippet>pexpect</snippet></ROW><ROW><id>3219582</id><snippet>&gt;&gt;&gt; t = [("asdf", )]
&gt;&gt;&gt; t[0][0]
'asdf'
</snippet></ROW><ROW><id>3219667</id><snippet>import random, sys

for i in xrange(500):
   sys.stdout.write(chr(random.randrange(256)))
</snippet></ROW><ROW><id>3219748</id><snippet>.zip</snippet></ROW><ROW><id>3219792</id><snippet>extern C</snippet></ROW><ROW><id>3219792</id><snippet>std::map</snippet></ROW><ROW><id>3219792</id><snippet>MutableMapping</snippet></ROW><ROW><id>3219792</id><snippet>tp_iter</snippet></ROW><ROW><id>3219792</id><snippet>tp_iternext</snippet></ROW><ROW><id>3219792</id><snippet>std::map</snippet></ROW><ROW><id>3219849</id><snippet>a.plot(x, y, '--', label='foo bar', dashes=(2,2))
</snippet></ROW><ROW><id>3219849</id><snippet>lg = a.legend()
fr = lg.get_frame()
fr.set_lw(0.2)
</snippet></ROW><ROW><id>3220028</id><snippet>c.execute("UPDATE movies SET rating = ? WHERE name = ?", (8.7, "'Allo 'Allo! (1982)"))
</snippet></ROW><ROW><id>3220147</id><snippet>django.forms.forms</snippet></ROW><ROW><id>3220147</id><snippet>__getitem__()</snippet></ROW><ROW><id>3220147</id><snippet>Form</snippet></ROW><ROW><id>3220147</id><snippet>BoundField</snippet></ROW><ROW><id>3220147</id><snippet>class MyForm(forms.Form):
    def __getitem__(self, name):
        boundfield = super(forms.Form,self).__getitem__(name)
        boundfield.foo = "bar"
        return boundfield
</snippet></ROW><ROW><id>3220147</id><snippet>"bar"</snippet></ROW><ROW><id>3220147</id><snippet>BoundField</snippet></ROW><ROW><id>3220147</id><snippet>"field"</snippet></ROW><ROW><id>3220147</id><snippet>class MyForm(forms.Form):
    def __init__(self, *args, **kwargs)
        super(forms.Form, self).__init__(*args, **kwargs)
        self.fields['field_name'].foo = "bar"
</snippet></ROW><ROW><id>3220147</id><snippet>foo</snippet></ROW><ROW><id>3220147</id><snippet>{{ form.field_name.field.foo }}
</snippet></ROW><ROW><id>3220210</id><snippet>pattern = re.compile("[\uD800-\uDFFF].", re.UNICODE)
pattern = re.compile("[^\u0000-\uFFFF]", re.UNICODE)
</snippet></ROW><ROW><id>3220210</id><snippet>pattern = re.compile(u'[^\u0000-\uD7FF\uE000-\uFFFF]', re.UNICODE)
filtered_string = re_pattern.sub(u'\uFFFD', unicode_string)
</snippet></ROW><ROW><id>3220296</id><snippet>uri = self.calendar.GetAlternateLink().href
batch_uri = uri + u'/batch'
calendar_service.ExecuteBatch(request_feed, batch_uri)
</snippet></ROW><ROW><id>3220312</id><snippet># create formatter
formatter = logging.Formatter("%(asctime)s;%(levelname)s;%(message)s")
</snippet></ROW><ROW><id>3220312</id><snippet># create formatter
formatter = logging.Formatter("%(asctime)s;%(levelname)s;%(message)s",
                              "%Y-%m-%d %H:%M:%S")
</snippet></ROW><ROW><id>3220470</id><snippet>easy_install</snippet></ROW><ROW><id>3220470</id><snippet>pip</snippet></ROW><ROW><id>3220470</id><snippet>easy_install pip</snippet></ROW><ROW><id>3220470</id><snippet>pip install Django==1.0.4
</snippet></ROW><ROW><id>3220888</id><snippet># The directory to search 
$searchpath = "C:\"

# List all rdl files    from the given search path recusrivley searching sub folders, store results into a variable
$files = gci $searchpath -recurse -filter "*.rdl" | SELECT FullName, DirectoryName, Name 

# for each of the found files pass the folder and file name  and the xml content
$files | % {$Directory = $_.DirectoryName; $Name = $_.Name; [xml](gc $_.FullName)}
            # in the xml content navigate to the the DataSets Element
            | % {$_.Report.DataSets} 
                    # for each query retrieve the Report directory , File Name, DataSource Name, Command Type, Command Text output thwese to a csv file
                    | % {$_.DataSet.Query} | SELECT  @{N="Path";E={$Directory}}, @{N="File";E={$Name}}, DataSourceName, CommandType, CommandText | Export-Csv Test.csv -notype   
</snippet></ROW><ROW><id>3220891</id><snippet>ConfigParser.ConfigParser</snippet></ROW><ROW><id>3220891</id><snippet>SafeConfigParser</snippet></ROW><ROW><id>3220891</id><snippet>import ConfigParser

class MyParser(ConfigParser.ConfigParser):

    def as_dict(self):
        d = dict(self._sections)
        for k in d:
            d[k] = dict(self._defaults, **d[k])
            d[k].pop('__name__', None)
        return d
</snippet></ROW><ROW><id>3220891</id><snippet>ConfigParser.py</snippet></ROW><ROW><id>3220891</id><snippet>2.*</snippet></ROW><ROW><id>3220891</id><snippet>3.*</snippet></ROW><ROW><id>3220891</id><snippet>configparser</snippet></ROW><ROW><id>3220894</id><snippet>@memoized
def search(a, b):
    # Initialize startup variables.
    nodes, index = [], []
    a_size, b_size = len(a), len(b)
    # Begin to slice the sequences.
    for size in range(min(a_size, b_size), 0, -1):
        for a_addr in range(a_size - size + 1):
            # Slice "a" at address and end.
            a_term = a_addr + size
            a_root = list(a)[a_addr:a_term] #change to list
            for b_addr in range(b_size - size + 1):
                # Slice "b" at address and end.
                b_term = b_addr + size
                b_root = list(b)[b_addr:b_term] #change to list
                # Find out if slices are equal.
                if a_root == b_root:
                    # Create prefix tree to search.
                    a_pref, b_pref = list(a)[:a_addr], list(b)[:b_addr]
                    p_tree = search(a_pref, b_pref)
                    # Create suffix tree to search.
                    a_suff, b_suff = list(a)[a_term:], list(b)[b_term:]
                    s_tree = search(a_suff, b_suff)
                    # Make completed slice objects.
                    a_slic = Slice(a_pref, a_root, a_suff)
                    b_slic = Slice(b_pref, b_root, b_suff)
                    # Finish the match calculation.
                    value = size + p_tree.value + s_tree.value
                    match = Match(a_slic, b_slic, p_tree, s_tree, value)
                    # Append results to tree lists.
                    nodes.append(match)
                    index.append(value)
        # Return largest matches found.
        if nodes:
            return Tree(nodes, index, max(index))
    # Give caller null tree object.
    return Tree(nodes, index, 0)
</snippet></ROW><ROW><id>3220946</id><snippet>from subprocess import Popen
process = Popen(['slow', 'running', 'program'])
while process.poll():
    if raw_input() == 'Kill':
        if process.poll(): process.kill()
</snippet></ROW><ROW><id>3220946</id><snippet>kill()</snippet></ROW><ROW><id>3221087</id><snippet>follower</snippet></ROW><ROW><id>3221087</id><snippet>calculate_rank</snippet></ROW><ROW><id>3221087</id><snippet>a</snippet></ROW><ROW><id>3221087</id><snippet>user</snippet></ROW><ROW><id>3221087</id><snippet>followers</snippet></ROW><ROW><id>3221248</id><snippet>names-1.fname   John
names-1.lname   Doe
names-2.fname   Jane
names-2.lname   Brown
</snippet></ROW><ROW><id>3221248</id><snippet>{'names': [
       {'fname': "John", 'lname': "Doe"},
       {'fname': "Jane", 'lname': 'Brown'},
</snippet></ROW><ROW><id>3221248</id><snippet>&lt;input type="hidden" name="item.a" value="5" /&gt;</snippet></ROW><ROW><id>3221248</id><snippet>item['a'] = 5</snippet></ROW><ROW><id>3221430</id><snippet>&gt;&gt;&gt; a = int('01101010', 2)
&gt;&gt;&gt; b = int('00110101', 2)
&gt;&gt;&gt; mask = 07  # Mask out the last 3 bits.
&gt;&gt;&gt; (b &amp; ~mask) | (a &amp; mask)
50
&gt;&gt;&gt; int('00110010', 2)
50
</snippet></ROW><ROW><id>3221430</id><snippet>(b &amp; ~mask)  &lt;- This keeps the first n-3 bits. (By negating the 3bit mask).
(a &amp; mask)   &lt;- This keeps the last 3 bits.
If you '|' (bitwise OR) them together, you get your desired result.
</snippet></ROW><ROW><id>3221431</id><snippet>import collections

def flattendict(d, prefix=()):
  r = {}
  for k, v in d.iteritems():
    pk = prefix + (k,)
    if isinstance(v, collections.Mapping):
      r.update(flattendict(v, pk))
    else:
      r['_'.join(pk)] = v
  return r
</snippet></ROW><ROW><id>3221431</id><snippet>d = {'foo': 'bar',
     'baz': {'fie': 'foo', 'zip': 'zap'},
     'bam': {'fie': 'foo', 'zip': {'zap': 'zup', 'mep': 'mop'}},
    }
print flattendict(d)
</snippet></ROW><ROW><id>3221431</id><snippet>{'baz_zip': 'zap', 'bam_fie': 'foo', 'foo': 'bar', 'bam_zip_mep': 'mop',
 'baz_fie': 'foo', 'bam_zip_zap': 'zup'}
</snippet></ROW><ROW><id>3221487</id><snippet>&gt;&gt;&gt; rev_ref = dict((v,k) for k,v in ref.iteritems())
&gt;&gt;&gt; rev_ref
{'def': 'abc'}

&gt;&gt;&gt; def revmapper(to):
...    return rev_ref[to]
</snippet></ROW><ROW><id>3221487</id><snippet>&gt;&gt;&gt; def revmapper(to):
...    for k,v in ref.iteritems():
...      if v == to: return k
</snippet></ROW><ROW><id>3221675</id><snippet>dRecieved = connFile.readline();
processThread = threading.Thread(target=processLine, args=(dRecieved,)); # &lt;- note extra ','
processThread.start();
</snippet></ROW><ROW><id>3221675</id><snippet>dRecieved = connFile.readline();
processThread = threading.Thread(target=processLine, args=[dRecieved])); # &lt;- 1 element list
processThread.start();
</snippet></ROW><ROW><id>3221675</id><snippet>self.__target(*self.__args, **self.__kwargs)</snippet></ROW><ROW><id>3221675</id><snippet>*self.__args</snippet></ROW><ROW><id>3221675</id><snippet>processLine</snippet></ROW><ROW><id>3221717</id><snippet>LoopingCall</snippet></ROW><ROW><id>3221717</id><snippet>callLater</snippet></ROW><ROW><id>3221717</id><snippet>callFromThread</snippet></ROW><ROW><id>3221717</id><snippet>callFromThread</snippet></ROW><ROW><id>3221717</id><snippet>blockingCallFromThread</snippet></ROW><ROW><id>3221717</id><snippet>callFromThread</snippet></ROW><ROW><id>3221717</id><snippet>blockingCallFromThread</snippet></ROW><ROW><id>3221766</id><snippet>sys.maxsize</snippet></ROW><ROW><id>3221766</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.maxsize
9223372036854775807
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3221766</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.maxsize
2147483647
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3221875</id><snippet>sessionmaker()</snippet></ROW><ROW><id>3221900</id><snippet>find()</snippet></ROW><ROW><id>3221900</id><snippet>&gt;&gt;&gt; s = "the dude is a cool dude"
&gt;&gt;&gt; s.find('dude')
4
</snippet></ROW><ROW><id>3222000</id><snippet>cget</snippet></ROW><ROW><id>3222000</id><snippet>from Tkinter import *

root = Tk()

w = Label(root, text="Hello, world!")
w.pack()
print w.cget('text')
root.mainloop()
</snippet></ROW><ROW><id>3222000</id><snippet>Hello, world!
</snippet></ROW><ROW><id>3222000</id><snippet>import pprint
from Tkinter import *

root = Tk()
w = Label(root, text="Hello, world!")
w.pack()
pprint.pprint(w.config())
root.mainloop()
</snippet></ROW><ROW><id>3222000</id><snippet>{'activebackground': ('activebackground',
                      'activeBackground',
                      'Foreground',
                      &lt;border object at 00C665D0&gt;,
                      'SystemButtonFace'),
 'activeforeground': ('activeforeground',
                      'activeForeground',
                      'Background',
                      &lt;color object at 00C66C48&gt;,
                      'SystemButtonText'),
 'anchor': ('anchor',
            'anchor',
            'Anchor',
            &lt;index object at 00C66588&gt;,
            'center'),
 'background': ('background',
                'background',
                'Background',
                &lt;border object at 0119A3E0&gt;,
                'SystemButtonFace'),
 'bd': ('bd', '-borderwidth'),
 'bg': ('bg', '-background'),
 'bitmap': ('bitmap', 'bitmap', 'Bitmap', '', ''),
 'borderwidth': ('borderwidth',
                 'borderWidth',
                 'BorderWidth',
                 &lt;pixel object at 0119A0F8&gt;,
                 &lt;pixel object at 0119A0F8&gt;),
 'compound': ('compound',
              'compound',
              'Compound',
              &lt;index object at 011A90D8&gt;,
              'none'),
 'cursor': ('cursor', 'cursor', 'Cursor', '', ''),
 'disabledforeground': ('disabledforeground',
                        'disabledForeground',
                        'DisabledForeground',
                        &lt;color object at 011A5DB0&gt;,
                        'SystemDisabledText'),
 'fg': ('fg', '-foreground'),
 'font': ('font',
          'font',
          'Font',
          &lt;font object at 011A5E40&gt;,
          (('MS', 'Sans', 'Serif'), '8')),
 'foreground': ('foreground',
                'foreground',
                'Foreground',
                &lt;color object at 011A5F48&gt;,
                'SystemButtonText'),
 'height': ('height', 'height', 'Height', 0, 0),
 'highlightbackground': ('highlightbackground',
                         'highlightBackground',
                         'HighlightBackground',
                         &lt;border object at 011A5EE8&gt;,
                         'SystemButtonFace'),
 'highlightcolor': ('highlightcolor',
                    'highlightColor',
                    'HighlightColor',
                    &lt;color object at 011A5F78&gt;,
                    'SystemWindowFrame'),
 'highlightthickness': ('highlightthickness',
                        'highlightThickness',
                        'HighlightThickness',
                        &lt;pixel object at 011A5FA8&gt;,
                        &lt;pixel object at 011A5FA8&gt;),
 'image': ('image', 'image', 'Image', '', ''),
 'justify': ('justify',
             'justify',
             'Justify',
             &lt;index object at 011A5F30&gt;,
             'center'),
 'padx': ('padx',
          'padX',
          'Pad',
          &lt;pixel object at 011A5FC0&gt;,
          &lt;pixel object at 011A5FC0&gt;),
 'pady': ('pady',
          'padY',
          'Pad',
          &lt;pixel object at 011A5FD8&gt;,
          &lt;pixel object at 011A5FD8&gt;),
 'relief': ('relief', 'relief', 'Relief', &lt;index object at 011A5FF0&gt;, 'flat'),
 'state': ('state', 'state', 'State', &lt;index object at 011A5EA0&gt;, 'normal'),
 'takefocus': ('takefocus', 'takeFocus', 'TakeFocus', '0', '0'),
 'text': ('text', 'text', 'Text', '', ('Hello,', 'world!')),
 'textvariable': ('textvariable', 'textVariable', 'Variable', '', ''),
 'underline': ('underline', 'underline', 'Underline', -1, -1),
 'width': ('width', 'width', 'Width', 0, 0),
 'wraplength': ('wraplength',
                'wrapLength',
                'WrapLength',
                &lt;pixel object at 00C50908&gt;,
                &lt;pixel object at 00C50908&gt;)}
</snippet></ROW><ROW><id>3222066</id><snippet>SELECT ... INTO OUTFILE ...</snippet></ROW><ROW><id>3222173</id><snippet>from ctypes import cast, pointer, c_int32, c_byte, POINTER
cast(pointer(c_int32(arg1)), POINTER(c_byte)).contents.value
</snippet></ROW><ROW><id>3222269</id><snippet>class Foo(object):
    class Bar(object):
        pass

&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; bar = Foo.Bar()
</snippet></ROW><ROW><id>3222269</id><snippet>class Player(object):
    def __init__(self, ... airplanes ...) # airplanes is a list of Airplane objects
        ...
        self.airplanes = airplanes
        ...

class Airplane(object):
    def __init__(self, ... flights ...) # flights is a list of Flight objects
        ...
        self.flights = flights
        ...

class Flight(object):
    def __init__(self, ... duration ...)
        ...
        self.duration = duration
        ...
</snippet></ROW><ROW><id>3222269</id><snippet>player = Player(...[
    Airplane(... [
        Flight(...duration=10...),
        Flight(...duration=15...),
        ] ... ),
    Airplane(...[
        Flight(...duration=20...),
        Flight(...duration=11...),
        Flight(...duration=25...),
        ]...),
    ])

player.airplanes[5].flights[6].duration = 5
</snippet></ROW><ROW><id>3222591</id><snippet>import ast, inspect
import codegen # by Armin Ronacher

def func(foo):
    return foo.bar - foo.baz

names = []

class CollectAttributes(ast.NodeVisitor):
    def visit_Attribute(self, node):
        names.append(codegen.to_source(node))

source = inspect.getsource(func)

tree = ast.parse(source)
guts = tree.body[0].body[0].value
CollectAttributes().visit(guts)
print names
</snippet></ROW><ROW><id>3222591</id><snippet>['foo.bar', 'foo.baz']
</snippet></ROW><ROW><id>3222720</id><snippet>iframe</snippet></ROW><ROW><id>3222774</id><snippet>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; builtin_types= [t
...  for t in __builtin__.__dict__.itervalues()
...  if isinstance(t, type)]

&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(sorted(builtin_types, key=repr))
[&lt;type 'basestring'&gt;,
 &lt;type 'bool'&gt;,
 &lt;type 'buffer'&gt;,
 &lt;type 'bytearray'&gt;,
 &lt;type 'classmethod'&gt;,
 &lt;type 'complex'&gt;,
 &lt;type 'dict'&gt;,
 &lt;type 'enumerate'&gt;,
 &lt;type 'exceptions.ArithmeticError'&gt;,
 &lt;type 'exceptions.AssertionError'&gt;,
 &lt;type 'exceptions.AttributeError'&gt;,
 &lt;type 'exceptions.BaseException'&gt;,
 &lt;type 'exceptions.BufferError'&gt;,
 &lt;type 'exceptions.BytesWarning'&gt;,
 &lt;type 'exceptions.DeprecationWarning'&gt;,
 &lt;type 'exceptions.EOFError'&gt;,
 &lt;type 'exceptions.EnvironmentError'&gt;,
 &lt;type 'exceptions.Exception'&gt;,
 &lt;type 'exceptions.FloatingPointError'&gt;,
 &lt;type 'exceptions.FutureWarning'&gt;,
 &lt;type 'exceptions.GeneratorExit'&gt;,
 &lt;type 'exceptions.IOError'&gt;,
 &lt;type 'exceptions.ImportError'&gt;,
 &lt;type 'exceptions.ImportWarning'&gt;,
 &lt;type 'exceptions.IndentationError'&gt;,
 &lt;type 'exceptions.IndexError'&gt;,
 &lt;type 'exceptions.KeyError'&gt;,
 &lt;type 'exceptions.KeyboardInterrupt'&gt;,
 &lt;type 'exceptions.LookupError'&gt;,
 &lt;type 'exceptions.MemoryError'&gt;,
 &lt;type 'exceptions.NameError'&gt;,
 &lt;type 'exceptions.NotImplementedError'&gt;,
 &lt;type 'exceptions.OSError'&gt;,
 &lt;type 'exceptions.OverflowError'&gt;,
 &lt;type 'exceptions.PendingDeprecationWarning'&gt;,
 &lt;type 'exceptions.ReferenceError'&gt;,
 &lt;type 'exceptions.RuntimeError'&gt;,
 &lt;type 'exceptions.RuntimeWarning'&gt;,
 &lt;type 'exceptions.StandardError'&gt;,
 &lt;type 'exceptions.StopIteration'&gt;,
 &lt;type 'exceptions.SyntaxError'&gt;,
 &lt;type 'exceptions.SyntaxWarning'&gt;,
 &lt;type 'exceptions.SystemError'&gt;,
 &lt;type 'exceptions.SystemExit'&gt;,
 &lt;type 'exceptions.TabError'&gt;,
 &lt;type 'exceptions.TypeError'&gt;,
 &lt;type 'exceptions.UnboundLocalError'&gt;,
 &lt;type 'exceptions.UnicodeDecodeError'&gt;,
 &lt;type 'exceptions.UnicodeEncodeError'&gt;,
 &lt;type 'exceptions.UnicodeError'&gt;,
 &lt;type 'exceptions.UnicodeTranslateError'&gt;,
 &lt;type 'exceptions.UnicodeWarning'&gt;,
 &lt;type 'exceptions.UserWarning'&gt;,
 &lt;type 'exceptions.ValueError'&gt;,
 &lt;type 'exceptions.Warning'&gt;,
 &lt;type 'exceptions.ZeroDivisionError'&gt;,
 &lt;type 'file'&gt;,
 &lt;type 'float'&gt;,
 &lt;type 'frozenset'&gt;,
 &lt;type 'int'&gt;,
 &lt;type 'list'&gt;,
 &lt;type 'long'&gt;,
 &lt;type 'object'&gt;,
 &lt;type 'property'&gt;,
 &lt;type 'reversed'&gt;,
 &lt;type 'set'&gt;,
 &lt;type 'slice'&gt;,
 &lt;type 'staticmethod'&gt;,
 &lt;type 'str'&gt;,
 &lt;type 'str'&gt;,
 &lt;type 'super'&gt;,
 &lt;type 'tuple'&gt;,
 &lt;type 'type'&gt;,
 &lt;type 'unicode'&gt;,
 &lt;type 'xrange'&gt;]
</snippet></ROW><ROW><id>3222870</id><snippet>high = 1
highpown = 1
while highpown &lt; x:
    high &lt;&lt;= 1
    highpown &lt;&lt;= n
</snippet></ROW><ROW><id>3222912</id><snippet>reader.fieldnames</snippet></ROW><ROW><id>3222912</id><snippet>allrows[0]</snippet></ROW><ROW><id>3222912</id><snippet>keepcols = [c for c in reader.fieldnames if any(r[c] != '0' for r in allrows)]
</snippet></ROW><ROW><id>3222912</id><snippet>csv</snippet></ROW><ROW><id>3222912</id><snippet>split</snippet></ROW><ROW><id>3222912</id><snippet>import csv
with open("test1.csv","r") as f:
    fields=next(f).split()
    # print(fields)
    allrows=[]
    for line in f:
        line=line.split()
        row=dict(zip(fields,line))
        allrows.append(row)
        # print(row)
    keepcols = [c for c in fields if any(row[c] != '0' for row in allrows)]
    print keepcols
    writer=csv.DictWriter(open("output1.csv","w"),fieldnames=keepcols,extrasaction='ignore')
    writer.writerows(allrows)
</snippet></ROW><ROW><id>3222912</id><snippet>for c in allrows[0]</snippet></ROW><ROW><id>3222912</id><snippet>allrows[0]</snippet></ROW><ROW><id>3222912</id><snippet>dict</snippet></ROW><ROW><id>3222912</id><snippet>fields</snippet></ROW><ROW><id>3222912</id><snippet>dict</snippet></ROW><ROW><id>3222912</id><snippet>fieldnames='keepcols'</snippet></ROW><ROW><id>3222912</id><snippet>fieldnames=keepcols</snippet></ROW><ROW><id>3222912</id><snippet>fieldnames</snippet></ROW><ROW><id>3222912</id><snippet>['fieldA','fieldB',...]</snippet></ROW><ROW><id>3222912</id><snippet>fieldnames='keepcols'</snippet></ROW><ROW><id>3222912</id><snippet>fieldnames</snippet></ROW><ROW><id>3222912</id><snippet>['k','e','e','p','c','o','l','s']</snippet></ROW><ROW><id>3222912</id><snippet>allrows</snippet></ROW><ROW><id>3222912</id><snippet>writer.writerows</snippet></ROW><ROW><id>3222912</id><snippet>extrasaction='ignore'</snippet></ROW><ROW><id>3222934</id><snippet>generator = email.generator.Generator(out_file)
generator.flatten(msg)
</snippet></ROW><ROW><id>3222934</id><snippet>out_file</snippet></ROW><ROW><id>3222934</id><snippet>msg</snippet></ROW><ROW><id>3223052</id><snippet>col_totals = [ sum(x) for x in zip(*my_list) ]
</snippet></ROW><ROW><id>3223262</id><snippet>fooTuple</snippet></ROW><ROW><id>3223262</id><snippet>In [1]: from collections import namedtuple

In [2]: Foo = namedtuple('Foo', ['item1', 'item2'], verbose=False)

In [3]: class ExtendedFoo(Foo):
   ...:     def __hash__(self):
   ...:         return hash(self.item1) * hash(self.item2)
   ...: 

In [4]: foo = ExtendedFoo(1, 2)

In [5]: hash(foo)
Out[5]: 2
</snippet></ROW><ROW><id>3223280</id><snippet>blank_page = PDFFileReader('blank.pdf').pages[0]
dest = PDFFileWriter()
for source in sources:
    PDF = PDFFileReader(source)
    dest.addPage(PDF.pages)
    if PDF.numPages % 2: #odd number of pages in source
        dest.addPage(blank_page)
</snippet></ROW><ROW><id>3223577</id><snippet>class MyXMLRPCServer(SimpleXMLRPCServer.SimpleXMLRPCServer):
    def process_request(self, request, client_address):
        self.client_address = client_address
        return SimpleXMLRPCServer.SimpleXMLRPCServer.process_request(
            self, request, client_address)

server=SimpleXMLRPCServer.MyXMLRPCServer((host, port))
</snippet></ROW><ROW><id>3223789</id><snippet>import itertools

itertools.islice(mygenerator, 10)
</snippet></ROW><ROW><id>3223789</id><snippet>itertools</snippet></ROW><ROW><id>3223789</id><snippet>islice</snippet></ROW><ROW><id>3224256</id><snippet>def fake_requested_from_root(fn):
    """
    Login decorator which when used on a view modifies the reqquest.path
    to fool the template into thibking that the request is coming from the
    root page
    """
    def decorator(request, **kwargs):
        request.path = reverse('home')
        return fn(request, **kwargs)
    return decorator
</snippet></ROW><ROW><id>3224300</id><snippet>unicodeData.encode('ascii', 'ignore')
</snippet></ROW><ROW><id>3224300</id><snippet>&gt;&gt;&gt; u = unichr(40960) + u'abcd' + unichr(1972)
&gt;&gt;&gt; u.encode('utf-8')
'\xea\x80\x80abcd\xde\xb4'
&gt;&gt;&gt; u.encode('ascii')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
UnicodeEncodeError: 'ascii' codec can't encode character '\ua000' in position 0: ordinal not in range(128)
&gt;&gt;&gt; u.encode('ascii', 'ignore')
'abcd'
&gt;&gt;&gt; u.encode('ascii', 'replace')
'?abcd?'
&gt;&gt;&gt; u.encode('ascii', 'xmlcharrefreplace')
'ꀀabcd޴'
</snippet></ROW><ROW><id>3224330</id><snippet>for l in x:
    print ', '.join(map(str, l))
</snippet></ROW><ROW><id>3224407</id><snippet>lxml.html.fromstring(s).text_content()
</snippet></ROW><ROW><id>3224480</id><snippet>import sys

def to_f(c): # Convert celsius to fahrenheit
    return (c * 9/5) + 32

def to_c(f): # Convert fahrenheit to celsius
    return (f - 32) * 5/9

def convert(args):
    if len(args) &lt; 2:
        return 1 # If less than two arguments
    t = args[1]
    if args[0] == '-f': # If the first argument is -f
        print "%s Fahrenheit is %s Celsius" % (t, to_c(int(t)))
        return 0
    elif args[0] == '-c': # If the first argument is -c
        print "%s Celsius is %s Fahrenheit" % (t, to_f(int(t)))
        return 0
    else:
        return 1

if __name__ == '__main__':
    sys.exit(convert(sys.argv[1:]))
</snippet></ROW><ROW><id>3224480</id><snippet>main()</snippet></ROW><ROW><id>3224480</id><snippet>convert()</snippet></ROW><ROW><id>3224480</id><snippet>convert()</snippet></ROW><ROW><id>3224480</id><snippet>exit()</snippet></ROW><ROW><id>3224480</id><snippet>exit()</snippet></ROW><ROW><id>3224480</id><snippet>argv</snippet></ROW><ROW><id>3224480</id><snippet>args</snippet></ROW><ROW><id>3224480</id><snippet>to_c</snippet></ROW><ROW><id>3224480</id><snippet>to_f</snippet></ROW><ROW><id>3224480</id><snippet>temp</snippet></ROW><ROW><id>3224480</id><snippet>if __name__</snippet></ROW><ROW><id>3224480</id><snippet>args[1]</snippet></ROW><ROW><id>3224480</id><snippet>t</snippet></ROW><ROW><id>3224480</id><snippet>sys.argv</snippet></ROW><ROW><id>3224480</id><snippet>if blah: doit()</snippet></ROW><ROW><id>3224692</id><snippet>print '&lt;table&gt;'
for i in zip(*food_list):
    print '&lt;tr&gt;'
    print '&lt;td&gt;'+i[0]+'&lt;/td&gt;&lt;td&gt;'+i[1]+'&lt;/td&gt;&lt;td&gt;'+i[2]+'&lt;/td&gt;'
    print '&lt;/tr&gt;'
print' &lt;/table&gt;'
</snippet></ROW><ROW><id>3224999</id><snippet>str</snippet></ROW><ROW><id>3224999</id><snippet>def what_type(s, possible_types=((int, [0]), (float, ()))):
    for t, xargs in possible_types:
        try: t(s, *xargs)
        except ValueError: pass
        else: return t
    return str
</snippet></ROW><ROW><id>3224999</id><snippet>'0x7e'</snippet></ROW><ROW><id>3224999</id><snippet>int</snippet></ROW><ROW><id>3224999</id><snippet>'126'</snippet></ROW><ROW><id>3224999</id><snippet>s</snippet></ROW><ROW><id>3225013</id><snippet>Dumper</snippet></ROW><ROW><id>3225013</id><snippet>eval</snippet></ROW><ROW><id>3225013</id><snippet>repr</snippet></ROW><ROW><id>3225013</id><snippet>dict</snippet></ROW><ROW><id>3225013</id><snippet>repr</snippet></ROW><ROW><id>3225013</id><snippet>str</snippet></ROW><ROW><id>3225013</id><snippet>repr</snippet></ROW><ROW><id>3225013</id><snippet>datetime</snippet></ROW><ROW><id>3225013</id><snippet>timedelta</snippet></ROW><ROW><id>3225013</id><snippet>repr</snippet></ROW><ROW><id>3225013</id><snippet>Dumper</snippet></ROW><ROW><id>3225013</id><snippet>dir</snippet></ROW><ROW><id>3225013</id><snippet>eval</snippet></ROW><ROW><id>3225013</id><snippet>def dump(obj):
  out = {}

  for attr in dir(obj):
    out[attr] = getattr(obj, attr)

  from pprint import pformat
  return pformat(out)

class myclass(object):
  foo = 'foo'

  def __init__(self):
    self.bar = 'bar'

  def __str__(self):
    return dump(self)

c = myclass()
print c
</snippet></ROW><ROW><id>3225013</id><snippet>__str__</snippet></ROW><ROW><id>3225013</id><snippet>__str__</snippet></ROW><ROW><id>3225013</id><snippet>repr</snippet></ROW><ROW><id>3225013</id><snippet>print obj</snippet></ROW><ROW><id>3225013</id><snippet>__repr__</snippet></ROW><ROW><id>3225013</id><snippet>__repr__</snippet></ROW><ROW><id>3225013</id><snippet># this would print the object's __repr__
print "%r" % c

# this would print the object's __str__
print "%s" % c
</snippet></ROW><ROW><id>3225013</id><snippet>{'__class__': &lt;class '__main__.myclass'&gt;,
 '__delattr__': &lt;method-wrapper '__delattr__' of myclass object at 0xb76deb0c&gt;,
 '__dict__': {'bar': 'bar'},
 '__doc__': None,
 '__format__': &lt;built-in method __format__ of myclass object at 0xb76deb0c&gt;,
 '__getattribute__': &lt;method-wrapper '__getattribute__' of myclass object at 0xb76deb0c&gt;,
 '__hash__': &lt;method-wrapper '__hash__' of myclass object at 0xb76deb0c&gt;,
 '__init__': &lt;bound method myclass.__init__ of &lt;__main__.myclass object at 0xb76deb0c&gt;&gt;,
 '__module__': '__main__',
 '__new__': &lt;built-in method __new__ of type object at 0x82358a0&gt;,
 '__reduce__': &lt;built-in method __reduce__ of myclass object at 0xb76deb0c&gt;,
 '__reduce_ex__': &lt;built-in method __reduce_ex__ of myclass object at 0xb76deb0c&gt;,
 '__repr__': &lt;method-wrapper '__repr__' of myclass object at 0xb76deb0c&gt;,
 '__setattr__': &lt;method-wrapper '__setattr__' of myclass object at 0xb76deb0c&gt;,
 '__sizeof__': &lt;built-in method __sizeof__ of myclass object at 0xb76deb0c&gt;,
 '__str__': &lt;bound method myclass.__str__ of &lt;__main__.myclass object at 0xb76deb0c&gt;&gt;,
 '__subclasshook__': &lt;built-in method __subclasshook__ of type object at 0x896ad34&gt;,
 '__weakref__': None,
 'bar': 'bar',
 'foo': 'foo'}
</snippet></ROW><ROW><id>3225161</id><snippet>num</snippet></ROW><ROW><id>3225265</id><snippet>wx.Timer</snippet></ROW><ROW><id>3225265</id><snippet>wx.Timer</snippet></ROW><ROW><id>3225310</id><snippet>try:
  i = int(temp[0])
except ValueError:
  print "not an integer\n"

try:
  i = float(temp[0])
except ValueError:
  print "not a number\n"
</snippet></ROW><ROW><id>3225310</id><snippet>import re
re.match( '^[-+]?(([0-9]+([.][0-9]*)?)|(([0-9]*[.])?[0-9]+))$', temp[0] )
</snippet></ROW><ROW><id>3225545</id><snippet>img = Image( name=name, data=file.read() )
img.put()
return ( str(img.name), img.key() )
</snippet></ROW><ROW><id>3225704</id><snippet>', '.join</snippet></ROW><ROW><id>3225704</id><snippet>iteritems</snippet></ROW><ROW><id>3225704</id><snippet>for i, (k,v) in enumerate(r.iteritems()):
    if i == len(r) - 1:
        print "last item: key=%r, value=%r" % (k, v)
</snippet></ROW><ROW><id>3225704</id><snippet>i</snippet></ROW><ROW><id>3225704</id><snippet>enumerate</snippet></ROW><ROW><id>3225704</id><snippet>if i==0:</snippet></ROW><ROW><id>3225704</id><snippet>if i==len(r)//2:</snippet></ROW><ROW><id>3225710</id><snippet>python-ogre</snippet></ROW><ROW><id>3225738</id><snippet>s[s.find('_') + 1:]
</snippet></ROW><ROW><id>3225738</id><snippet>s[0:s.rfind('_')]
</snippet></ROW><ROW><id>3225738</id><snippet>s[s.find('_') + 1:s.rfind('_')]
</snippet></ROW><ROW><id>3225738</id><snippet>find</snippet></ROW><ROW><id>3225738</id><snippet>rfind</snippet></ROW><ROW><id>3225757</id><snippet>import sys

print sys.maxsize
# prints some system-dependent number representing the maximum
# size most containers can hold.
</snippet></ROW><ROW><id>3225757</id><snippet>sys</snippet></ROW><ROW><id>3225757</id><snippet>sys.maxsize</snippet></ROW><ROW><id>3225757</id><snippet>sys.maxint</snippet></ROW><ROW><id>3225801</id><snippet>import os

def onemore():
    f = __file__ + '.counter'
    if os.path.exists(f):
        with open(f) as thefile:
            counter = int(thefile.read())
    else:
        counter = -1
    counter += 1
    with open(f, 'w') as thefile:
        thefile.write(str(counter) + '\n')
    return counter
</snippet></ROW><ROW><id>3225801</id><snippet>f</snippet></ROW><ROW><id>3225801</id><snippet>sqlite</snippet></ROW><ROW><id>3225930</id><snippet>path_exists()</snippet></ROW><ROW><id>3225930</id><snippet>os.path.exists()</snippet></ROW><ROW><id>3225930</id><snippet>def path_exist(path):
    return os.path.exists(path)

def list_dir(path):
    return os.listdir(path)

def is_dir(path):
    return os.path.isdir(path)
</snippet></ROW><ROW><id>3225930</id><snippet>os.path.join()</snippet></ROW><ROW><id>3225930</id><snippet>for element in list_dir(path):
  newpath = os.path.join(x86_64, element)
</snippet></ROW><ROW><id>3225930</id><snippet>os.walk()</snippet></ROW><ROW><id>3225930</id><snippet>try...except</snippet></ROW><ROW><id>3226081</id><snippet>CAtlString</snippet></ROW><ROW><id>3226081</id><snippet>CAtlString filename = _T("TheFileName.Something.xMl");

//search for '.' from the end
int dotIdx = filename.ReverseFind( _T('.') );

if( dotIdx != -1 ) {
  //extract the file extension
  CAtlString ext = filename.Right( filename.GetLength() - dotIdx );

  if( ext.CompareNoCase( _T(".xml" ) ) == 0 ) {
    filename.Delete( dotIdx, ext.GetLength() ); //remove extension
    filename += _T(".bak");
  }
}
</snippet></ROW><ROW><id>3226137</id><snippet>import csv
reader = csv.reader(open('output.csv', 'rb'))
reader1 = csv.reader(open('output1.csv', 'rb'))
writer = csv.writer(open('appended_output.csv', 'wb'))
for row in reader:
    row1 = reader1.next()
    writer.writerow(row + row1)
</snippet></ROW><ROW><id>3226301</id><snippet>class MyModel(models.Model):
    name = models.CharField(max_length=255)
    code = models.CharField(MAX_FILE_LENGTH)
</snippet></ROW><ROW><id>3226301</id><snippet>def Submit_Code(request):
     #Create MyModel using POST data
     process_input_file(NEWLY_CREATED_MODEL_NAME)
     return HttpResponse("Upload Successful")

def process_input_file(modelName):
     #assuming unique name. Use "id=" instead if needed.
     mm = MyModel.objects.get(name=modelName)
     if passes_security_checks(mm.code):
          f = open(mm.name, "r")
          f.write(mm.code)
          f.close()
</snippet></ROW><ROW><id>3226301</id><snippet>def Submit_Code(request):
     mm = MyModel()
     mm.name = request.POST.get('name')
     f = open(mm.name,"r")
     f.write(request.POST.get('code')
     f.close()
     #then associate the newly created file with the FileField however you want
     #passing through authentication/checking if need be.
     return HttpResponse("Upload Successful")
</snippet></ROW><ROW><id>3226320</id><snippet>
writer = csv.writer(open('corrected.csv'))
for row in csv.reader('myfile.csv'):
    if not row[0].startswith('1VDV-constatomGlu-final-NoGluWat.'):
        writer.writerow(row)
writer.close()
</snippet></ROW><ROW><id>3226989</id><snippet>
def create_object_with_request(request, *args, **kwargs):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def inject_request(fun):

    def helper(*args, **kwargs):
        finst = fun(*args, **kwargs)
        finst.request = request
        return finst

    helper._meta = fun._meta
    return helper
kwargs['form_class'] = inject_request(kwargs['form_class'])
return create_object(request,*args, **kwargs)
</snippet></ROW><ROW><id>3227612</id><snippet>isinstance()</snippet></ROW><ROW><id>3227612</id><snippet>str</snippet></ROW><ROW><id>3227612</id><snippet>unicode</snippet></ROW><ROW><id>3227612</id><snippet>unicode</snippet></ROW><ROW><id>3227612</id><snippet>Python 2.6.1 (r261:67515, Feb 11 2010, 00:51:29) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; isinstance(u'', (str, unicode))
True
&gt;&gt;&gt; isinstance('', (str, unicode))
True
&gt;&gt;&gt; isinstance([], (str, unicode))
False

&gt;&gt;&gt; for value in ('snowman', u'☃ ', ['snowman', u'☃ ']):
...     print type(value)
... 
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>3227612</id><snippet>Python 3.2 (r32:88445, May 29 2011, 08:00:24) 
[GCC 4.2.1 (Apple Inc. build 5664)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; isinstance('☃ ', str)
True
&gt;&gt;&gt; isinstance([], str)
False

&gt;&gt;&gt; for value in ('snowman', '☃ ', ['snowman', '☃ ']):
...     print(type(value))
... 
&lt;class 'str'&gt;
&lt;class 'str'&gt;
&lt;class 'list'&gt;
</snippet></ROW><ROW><id>3227612</id><snippet>isinstance()</snippet></ROW><ROW><id>3227653</id><snippet>setup_i18n</snippet></ROW><ROW><id>3227778</id><snippet>db.articles.find().sort({_id: -1}).limit(10);
</snippet></ROW><ROW><id>3227879</id><snippet>DEFAULT CHARSET</snippet></ROW><ROW><id>3227879</id><snippet>utf8</snippet></ROW><ROW><id>3227879</id><snippet>DEFAULT COLLATION</snippet></ROW><ROW><id>3227879</id><snippet>utf8_general_ci</snippet></ROW><ROW><id>3227879</id><snippet>ALTER DATABASE</snippet></ROW><ROW><id>3227879</id><snippet>CREATE DATABASE</snippet></ROW><ROW><id>3227931</id><snippet>os.path.expanduser</snippet></ROW><ROW><id>3227931</id><snippet>config_file = os.path.expanduser("~/foo.ini")
</snippet></ROW><ROW><id>3228034</id><snippet>def foo(bar = []):
  bar.append(1)
  print(bar)

foo()
foo()
</snippet></ROW><ROW><id>3228034</id><snippet>[1]
[1, 1]
</snippet></ROW><ROW><id>3228626</id><snippet>raise Exception, "This is not how to raise an exception..."
</snippet></ROW><ROW><id>3228741</id><snippet>from django.views.generic.simple import direct_to_template
...
url(r'^whatever', direct_to_template, 
                 { 'template':'foo.html', 'extra_context': {'files':myfiles} }
                 name='whatever' ),
</snippet></ROW><ROW><id>3228741</id><snippet>myfiles = [ 'relative/path/foo.jpg', 
            'http://static.mysite.com/absolute/path/bar.jpg' ]
</snippet></ROW><ROW><id>3228741</id><snippet>def myview( request ... ):
  context = RequestContext(request)
  context[files]=myfiles
  return render_to_respone( ..., context_instance=context )
</snippet></ROW><ROW><id>3228741</id><snippet>{% for file in files %}
  &lt;img src='YOUR_MEDIA_URL_HERE/{{ file }}' /&gt;
{% endfor %}
</snippet></ROW><ROW><id>3228772</id><snippet>print ",".join(row)
</snippet></ROW><ROW><id>3228882</id><snippet>&gt;&gt;&gt; '12344'.zfill(10)
0000012344
</snippet></ROW><ROW><id>3228931</id><snippet>f = MyClass.__dict__['mymethodname']</snippet></ROW><ROW><id>3228931</id><snippet>f = MyClass.mymethodname</snippet></ROW><ROW><id>3228931</id><snippet>MethodType</snippet></ROW><ROW><id>3228931</id><snippet>f = MyClass().mymethodname</snippet></ROW><ROW><id>3228931</id><snippet>getattr</snippet></ROW><ROW><id>3228931</id><snippet>unbound_mth = getattr(MyClass, "mymethodname")
</snippet></ROW><ROW><id>3228931</id><snippet>bound_mth = getattr(an_instance_of_MyClass, "mymethodname")
</snippet></ROW><ROW><id>3229367</id><snippet>rgb2xyz()</snippet></ROW><ROW><id>3229367</id><snippet>color.py</snippet></ROW><ROW><id>3229367</id><snippet>lab2rgb( rgb2lab([255,255,0]) )</snippet></ROW><ROW><id>3229367</id><snippet>%run main.py</snippet></ROW><ROW><id>3229367</id><snippet>    # unpack image array, 10 x 5 x 3 -&gt; r g b --
img = np.arange( 10*5*3 ).reshape(( 10,5,3 ))
print "img.shape:", img.shape
r,g,b = img.transpose( 2,0,1 )  # 3 10 5
print "r.shape:", r.shape

    # pack 10 x 5 r g b -&gt; 10 x 5 x 3 again --
rgb = np.array(( r, g, b )).transpose( 1,2,0 )  # 10 5 3 again
print "rgb.shape:", rgb.shape
assert (rgb == img).all()

    # rgb 0 .. 255 &lt;-&gt; float 0 .. 1 --
imgfloat = img.astype(np.float32) / 255.
img8 = (imgfloat * 255).round().astype(np.uint8)  
assert (img == img8).all()
</snippet></ROW><ROW><id>3229492</id><snippet>for (a,b) in zip(list1, list2):
  doSomething(a)
  doSomething(b)
</snippet></ROW><ROW><id>3229492</id><snippet>doSomething()</snippet></ROW><ROW><id>3229492</id><snippet>chain()</snippet></ROW><ROW><id>3229492</id><snippet>for x in chain(list1, list2):
  doSomething(x)
</snippet></ROW><ROW><id>3229492</id><snippet>from itertools import *</snippet></ROW><ROW><id>3229492</id><snippet>izip()</snippet></ROW><ROW><id>3229492</id><snippet>zip()</snippet></ROW><ROW><id>3229492</id><snippet>izip_longest()</snippet></ROW><ROW><id>3229492</id><snippet>izip(count(), lst)</snippet></ROW><ROW><id>3229492</id><snippet>for idx, a, b, c in izip(count(), A, B, C):
  ...
</snippet></ROW><ROW><id>3229493</id><snippet>def pretty(d, indent=0):
   for key, value in d.iteritems():
      print '\t' * indent + str(key)
      if isinstance(value, dict):
         pretty(value, indent+1)
      else:
         print '\t' * (indent+1) + str(value)
</snippet></ROW><ROW><id>3229540</id><snippet>def overview(page_to_get):
     try:
          page = "http://www.url.com%s.json?" % page_to_get
          u = urllib.urlopen(page.encode('utf-8'))
          bytes = StringIO(u.read())
          u.close()
     except Exception, e:
          print e
          return None
     try:
        JSON_data = json.load(bytes)
        return JSON_data
     except ValueError:
        print "Couldn't get .json for %s" % page
        return None 
</snippet></ROW><ROW><id>3229540</id><snippet>          page = "http://www.url.com/%s.json?" % page_to_get
</snippet></ROW><ROW><id>3229643</id><snippet>&gt;&gt;&gt; lst = [None,[],None,[1,2],'StackOverflow',[]]
&gt;&gt;&gt; next(i for i, j in enumerate(lst) if j)
3
</snippet></ROW><ROW><id>3229643</id><snippet>StopIteration</snippet></ROW><ROW><id>3229643</id><snippet>next</snippet></ROW><ROW><id>3229643</id><snippet>&gt;&gt;&gt; next((i for i, j in enumerate(lst) if j == 2), 42)
42
</snippet></ROW><ROW><id>3229643</id><snippet>list</snippet></ROW><ROW><id>3229676</id><snippet>import threading
dummy_event = threading.Event()
dummy_event.wait() 
</snippet></ROW><ROW><id>3229676</id><snippet>threading</snippet></ROW><ROW><id>3229676</id><snippet>dummy_threading</snippet></ROW><ROW><id>3229676</id><snippet>dummy_event.wait()</snippet></ROW><ROW><id>3229676</id><snippet>wait()</snippet></ROW><ROW><id>3229676</id><snippet>join()</snippet></ROW><ROW><id>3229676</id><snippet>Process</snippet></ROW><ROW><id>3229676</id><snippet>os.waitpid()</snippet></ROW><ROW><id>3229743</id><snippet>setup.py bdist_wininst 
</snippet></ROW><ROW><id>3229844</id><snippet>HttpResponse</snippet></ROW><ROW><id>3229965</id><snippet>wx.ListBox</snippet></ROW><ROW><id>3229965</id><snippet>wx.ControlWithitems</snippet></ROW><ROW><id>3230009</id><snippet>initial = {
           'update_date': datetime.datetime.now(),
           'creation_date': datetime.datetime.now(),
           'update_author': 1 # not Author.objects.get(id=1)
          }
if kwargs.has_key('initial'):
    kwargs['initial'].update(initial)
else:
    kwargs['initial'] = initial
# Initializing form only after you have set initial dict
super(DataReviewsForm,self).__init__(*args, **kwargs)

self.fields['update_date'].widget = forms.HiddenInput()
self.fields['creation_date'].widget = forms.HiddenInput()
self.fields['update_author'].widget = forms.HiddenInput()
</snippet></ROW><ROW><id>3230123</id><snippet>unravel_index</snippet></ROW><ROW><id>3230123</id><snippet>numpy.unravel_index(A.argmin(), A.shape)
</snippet></ROW><ROW><id>3230143</id><snippet>width = 6
height = 4
xs = range(1,25)
w = 3
h = 2

def subrect(x,y):
    pos = y*h*width+x*w
    return [xs[(pos+row*width):(pos+row*width+w)] for row in range(h)]

print [subrect(x,y) for y in range(height / h) for x in range(width / w)]
</snippet></ROW><ROW><id>3230143</id><snippet> 1  2  3     4  5  6
 7  8  9    10 11 12

13 14 15    16 17 18
19 20 21    22 23 24
</snippet></ROW><ROW><id>3230143</id><snippet>width = 10
height = 20
xs = range(1,201)
w = 2
h = 3
</snippet></ROW><ROW><id>3230207</id><snippet># views.py
from django.core import serializers

def departamentos_por_region(request, region_id):
    region = get_object_or_404(Region, id=region_id)
    departamentos = Departamento.objects.filter(region=region)
    return render_to_reponse("format_as_option_list.html",
                             {'departamentos': departamentos})

def municipios_por_departamento(request, departamento_id):
    # basically the same as above
</snippet></ROW><ROW><id>3230207</id><snippet>&lt;select id='regions'&gt;
  &lt;option value='1'&gt;Region 1&lt;/option&gt;
  &lt;option value='2'&gt;Region 2&lt;/option&gt;
&lt;/select&gt;
&lt;select id='departamentos'&gt;
&lt;/select&gt;
&lt;select id='municipios'&gt;
&lt;/select&gt;
</snippet></ROW><ROW><id>3230207</id><snippet>// this isn't tested code and likely contains an error or two
$('#regions').change(function(){

    // Region has changed, so reset Departamentos and Municipios
    $('#departamentos').html("")
    $('#municipios').html("")

    // now update the departamentos
    $.get('/ajax/departamentos_por_region/' +  $('#regions').val(),
          function(data) {
              ('#departamentos').html(data)    
          };     
    );
});
</snippet></ROW><ROW><id>3230461</id><snippet>class myplot(object):
    def __init__(self, filename):
        self._filename = filename

    def resetFileName(self, fileName):
        self._filename = fileName

    def __call__(self):
        matplotlib.pylab.savefig(self._filename)

plotfunction = myplot("foo.png")
matplotlib.pylab.draw_if_interactive = plotfunction
</snippet></ROW><ROW><id>3230461</id><snippet>hcluster</snippet></ROW><ROW><id>3230741</id><snippet>os.chdir(x)</snippet></ROW><ROW><id>3230741</id><snippet>os.chdir(path)</snippet></ROW><ROW><id>3230741</id><snippet>path</snippet></ROW><ROW><id>3230741</id><snippet>paths</snippet></ROW><ROW><id>3230741</id><snippet>chdir</snippet></ROW><ROW><id>3231251</id><snippet>z</snippet></ROW><ROW><id>3231251</id><snippet>Popen(["formatdb", "-p", "T", "-i", "%s.txt" % z]).wait()
</snippet></ROW><ROW><id>3231303</id><snippet>s = dict([ (k,r) for k,r in mydict.iteritems() if r['x'] &gt; 92 and r['x'] &lt; 95 and r['y'] &gt; 70 and r['y'] &lt; 75 ])
</snippet></ROW><ROW><id>3231393</id><snippet>import re
# Source: http://nedbatchelder.com/blog/200712/human_sorting.html
# Author: Ned Batchelder
def tryint(s):
    try:
        return int(s)
    except:
        return s

def alphanum_key(s):
    """ Turn a string into a list of string and number chunks.
        "z23a" -&gt; ["z", 23, "a"]
    """
    return [ tryint(c) for c in re.split('([0-9]+)', s) ]

def sort_nicely(l):
    """ Sort the given list in the way that humans expect.
    """
    l.sort(key=alphanum_key)

data=[
    'title_text #49',
    'title_text #5',
    'title_text #50']
sort_nicely(data)
print(data)
# ['title_text #5', 'title_text #49', 'title_text #50']
</snippet></ROW><ROW><id>3231393</id><snippet>data</snippet></ROW><ROW><id>3231393</id><snippet>data=[{'title': 'title_text #49', 'x':0},
      {'title':'title_text #5', 'x':10},
      {'title': 'title_text #50','x':20}]

data.sort(key=lambda x: alphanum_key(x['title']))
# [{'x': 10, 'title': 'title_text #5'}, {'x': 0, 'title': 'title_text #49'}, {'x': 20, 'title': 'title_text #50'}]
</snippet></ROW><ROW><id>3231976</id><snippet>In [17]: import itertools
# putter around 22 times
In [39]: l=['1', 'a', 'b','---', '2','c','d','---','3','123','e','---','4']

In [40]: [list(g) for k,g in itertools.groupby(l,'---'.__ne__) if k]
Out[40]: [['1', 'a', 'b'], ['2', 'c', 'd'], ['3', '123', 'e'], ['4']]
</snippet></ROW><ROW><id>3232026</id><snippet>import multiprocessing, time

def task(args):
    count = args[0]
    queue = args[1]
    for i in xrange(count):
        queue.put("%d mississippi" % i)
    return "Done"


def main():
    manager = multiprocessing.Manager()
    q = manager.Queue()
    pool = multiprocessing.Pool()
    result = pool.map_async(task, [(x, q) for x in range(10)])
    time.sleep(1)
    while not q.empty():
        print q.get()
    print result.get()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>3232189</id><snippet>class Foo(object):
    @many
    @decorators
    @here
    def bar(self):
        pass
</snippet></ROW><ROW><id>3232189</id><snippet>class Foo(object):
    @register(many,decos,here)
    def bar(self):
        pass
</snippet></ROW><ROW><id>3232189</id><snippet>def register(*decorators):
    def register_wrapper(func):
        for deco in decorators[::-1]:
            func=deco(func)
        func._decorators=decorators        
        return func
    return register_wrapper
</snippet></ROW><ROW><id>3232189</id><snippet>def many(f):
    def wrapper(*args,**kwds):
        return f(*args,**kwds)
    return wrapper

decos = here = many

class Foo(object):
    @register(many,decos,here)
    def bar(self):
        pass

foo=Foo()
</snippet></ROW><ROW><id>3232189</id><snippet>print(foo.bar._decorators)
# (&lt;function many at 0xb76d9d14&gt;, &lt;function decos at 0xb76d9d4c&gt;, &lt;function here at 0xb76d9d84&gt;)
</snippet></ROW><ROW><id>3232189</id><snippet>print([d.func_name for d in foo.bar._decorators])
# ['many', 'decos', 'here']
</snippet></ROW><ROW><id>3232288</id><snippet>&lt;?xml&gt;</snippet></ROW><ROW><id>3232288</id><snippet>xmlDeclaration=TRUE</snippet></ROW><ROW><id>3232288</id><snippet>etree.tostring(tree, xml_declaration=True)
</snippet></ROW><ROW><id>3232386</id><snippet>x</snippet></ROW><ROW><id>3232386</id><snippet>y</snippet></ROW><ROW><id>3232386</id><snippet>x = {}
y = {}
</snippet></ROW><ROW><id>3232386</id><snippet>x,y = {},{}
</snippet></ROW><ROW><id>3232692</id><snippet>DOCK((?!DOCK).)+?onomatopoeia
</snippet></ROW><ROW><id>3232738</id><snippet>root=tree.getroot()</snippet></ROW><ROW><id>3232738</id><snippet>findall()</snippet></ROW><ROW><id>3232738</id><snippet>deleteThese = root.findall("title")
for element in deleteThese: root.remove(element)
</snippet></ROW><ROW><id>3232738</id><snippet>etree.tostring(root, pretty_print=True)</snippet></ROW><ROW><id>3232738</id><snippet>root.attrib['myNewAttribute']='hello world'
</snippet></ROW><ROW><id>3232854</id><snippet>import component</snippet></ROW><ROW><id>3232854</id><snippet>import component</snippet></ROW><ROW><id>3232903</id><snippet>tty</snippet></ROW><ROW><id>3232903</id><snippet>import sys
import tty

# Back up previous tty settings
stdin_fileno = sys.stdin.fileno()
old_ttyattr = tty.tcgetattr(stdin_fileno)

try:
    print 'Reassigning ctrl-c to ctrl-x'

    # Enter raw mode on local tty
    tty.setraw(stdin_fileno)
    raw_ta = tty.tcgetattr(stdin_fileno)
    raw_ta[tty.LFLAG] |= tty.ISIG
    raw_ta[tty.OFLAG] |= tty.OPOST | tty.ONLCR

    # ^X is the new ^C, set this to 0 to disable it entirely
    raw_ta[tty.CC][tty.VINTR] = '\x18'  

    # Set raw tty as active tty
    tty.tcsetattr(stdin_fileno, tty.TCSANOW, raw_ta)

    # Dummy program loop
    import time
    for _ in range(5):
        print 'doing stuff'
        time.sleep(1)

finally:
    print 'Resetting ctrl-c'
    # Restore previous tty no matter what
    tty.tcsetattr(stdin_fileno, tty.TCSANOW, old_ttyattr)
</snippet></ROW><ROW><id>3232961</id><snippet>for i in hello:
    j = i.replace(' ','')
    k.append(j)
</snippet></ROW><ROW><id>3232961</id><snippet>strip</snippet></ROW><ROW><id>3232961</id><snippet>hello = [x.strip(' ') for x in hello]
</snippet></ROW><ROW><id>3233070</id><snippet>nmap</snippet></ROW><ROW><id>3233140</id><snippet>from django.contrib.models import User
from django.db.models.signals import post_save

def send_welcome_email(self):
   # Reusable email sending code

User.send_welcome_email = send_welcome_email

def welcome_emails(sender, instance, created, **kwargs):
    if created:
        instance.send_welcome_email() # `instance` is User

post_save.connect(welcome_emails, sender=User)
</snippet></ROW><ROW><id>3233279</id><snippet>readline</snippet></ROW><ROW><id>3233279</id><snippet>[</snippet></ROW><ROW><id>3233356</id><snippet>import collections

def update(d, u):
    for k, v in u.iteritems():
        if isinstance(v, collections.Mapping):
            r = update(d.get(k, {}), v)
            d[k] = r
        else:
            d[k] = u[k]
    return d
</snippet></ROW><ROW><id>3233356</id><snippet>.get</snippet></ROW><ROW><id>3233356</id><snippet>isinstance</snippet></ROW><ROW><id>3233603</id><snippet>#TODO: Something
</snippet></ROW><ROW><id>3234063</id><snippet>frame.MacGetTopLevelWindowRef()
</snippet></ROW><ROW><id>3234235</id><snippet>argparse</snippet></ROW><ROW><id>3234235</id><snippet>optparse</snippet></ROW><ROW><id>3234235</id><snippet>getopt</snippet></ROW><ROW><id>3234235</id><snippet>getopt</snippet></ROW><ROW><id>3234286</id><snippet>etree</snippet></ROW><ROW><id>3234286</id><snippet>&gt;&gt;&gt; from xml.etree.ElementTree import XMLParser
&gt;&gt;&gt; x = XMLParser()
&gt;&gt;&gt; x.feed('&lt;toplevel&gt;&lt;CompleteSuggestion&gt;&lt;suggestion data=...')
&gt;&gt;&gt; tree = x.close()
&gt;&gt;&gt; [(e.find('suggestion').get('data'), int(e.find('num_queries').get('int')))
     for e in tree.findall('CompleteSuggestion')]
[('test internet speed', 31800000), ('test', 686000000), ...]
</snippet></ROW><ROW><id>3234286</id><snippet>data</snippet></ROW><ROW><id>3234566</id><snippet>[]</snippet></ROW><ROW><id>3234566</id><snippet>[]</snippet></ROW><ROW><id>3234566</id><snippet>[]</snippet></ROW><ROW><id>3234954</id><snippet>#coding: utf8
import re
s = """“作為”(act) ，用於罪行或民事過失時，包括一連串作為、任何違法的不作為和一連串違法的不作為；
    “行政上訴委員會”(Administrative Appeals Board) 指根據《行政上訴委員會條例》(第442章)設立的行政上訴委員會；(由1994年第6號第32條增補)
    “成人”、“成年人”(adult)* 指年滿18歲的人；  (由1990年第32號第6條修訂)
    “飛機”、“航空器”(aircraft) 指任何可憑空氣的反作用而在大氣中獲得支承力的機器；
    “外籍人士”(alien) 指並非中國公民的人；  (由1998年第26號第4條增補)
    “修訂”(amend) 包括廢除、增補或更改，亦指同時進行，或以同一條例或文書進行上述全部或其中任何事項；  (由1993年第89號第3條修訂)
    “可逮捕的罪行”(arrestable offence) 指由法律規限固定刑罰的罪行，或根據、憑藉法例對犯者可處超過12個月監禁的罪行，亦指犯任何這類罪行的企圖；  (由1971年第30號第2條增補)
    “《基本法》”(Basic Law) 指《中華人民共和國香港特別行政區基本法》；  (由1998年第26號第4條增補)
    “行政長官”(Chief Executive) 指─"""
for zh1, zh2, en in re.findall(r"“([^”]*)”(?:、“([^”]*)”)?\((.*?)\)",s):
    print(ascii((zh1, zh2, en)))
</snippet></ROW><ROW><id>3234954</id><snippet>('\u4f5c\u70ba', '', 'act')
('\u884c\u653f\u4e0a\u8a34\u59d4\u54e1\u6703', '', 'Administrative Appeals Board')
('\u6210\u4eba', '\u6210\u5e74\u4eba', 'adult')
('\u98db\u6a5f', '\u822a\u7a7a\u5668', 'aircraft')
('\u5916\u7c4d\u4eba\u58eb', '', 'alien')
('\u4fee\u8a02', '', 'amend')
('\u53ef\u902e\u6355\u7684\u7f6a\u884c', '', 'arrestable offence')
('\u300a\u57fa\u672c\u6cd5\u300b', '', 'Basic Law')
('\u884c\u653f\u9577\u5b98', '', 'Chief Executive')
</snippet></ROW><ROW><id>3235275</id><snippet>select date (date '0000-12-31' + interval '733973 days');
&gt;&gt; "2010-07-20"
</snippet></ROW><ROW><id>3235275</id><snippet>select date (date '0000-12-31' + interval '1 days' * 733973);
&gt;&gt; "2010-07-20"
</snippet></ROW><ROW><id>3235275</id><snippet>0000-12-31</snippet></ROW><ROW><id>3235275</id><snippet>0001-01-01</snippet></ROW><ROW><id>3235275</id><snippet>datetime.toordinal()</snippet></ROW><ROW><id>3235275</id><snippet>1</snippet></ROW><ROW><id>3235275</id><snippet>0000-31-12</snippet></ROW><ROW><id>3235275</id><snippet>select date (date '0001-01-01' + interval '733973 days' - interval '1 day');
</snippet></ROW><ROW><id>3235275</id><snippet>select date (date '0001-01-01' + (interval '1 days' * (733973 - 1)));
</snippet></ROW><ROW><id>3235354</id><snippet>verify</snippet></ROW><ROW><id>3235354</id><snippet>assert</snippet></ROW><ROW><id>3235354</id><snippet>verify</snippet></ROW><ROW><id>3235354</id><snippet>assert</snippet></ROW><ROW><id>3235354</id><snippet>//verifyTextPresent
try: self.failUnless(sel.is_text_present("My Text"))
except AssertionError, e: self.verificationErrors.append(str(e))

//assertTextPresent
self.failUnless(sel.is_text_present("My Text"))
</snippet></ROW><ROW><id>3235418</id><snippet>&gt;&gt;&gt; s = u'\u2265'
&gt;&gt;&gt; print s
≥
&gt;&gt;&gt; print "{0}".format(s)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\u2265' in position 0: ordinal not in range(128)
&gt;&gt;&gt; print u"{0}".format(s)
≥
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3235572</id><snippet>&gt;&gt;&gt; x=-123
&gt;&gt;&gt; hex(((abs(x) ^ 0xffff) + 1) &amp; 0xffff)
'0xff85'
</snippet></ROW><ROW><id>3235767</id><snippet>import</snippet></ROW><ROW><id>3236464</id><snippet>def my_print(x):
    print x

formwraps.each(lambda e: my_print(e("h3").text()))
</snippet></ROW><ROW><id>3236621</id><snippet>ModelAdmin</snippet></ROW><ROW><id>3236621</id><snippet>Model</snippet></ROW><ROW><id>3236621</id><snippet>ModelForm</snippet></ROW><ROW><id>3236621</id><snippet>models.py</snippet></ROW><ROW><id>3236621</id><snippet>from django.db import models

class Contest(models.Model):
    name = models.CharField(max_length=50)
    # More fields here, if you like.
    contestants = models.ManyToManyField('Contestant', through='ContestResults')

class Contestant(models.Model):
    name = models.CharField(max_length=50)

class ContestResults(models.Model):
    contest = models.ForeignKey(Contest)
    contestant = models.ForeignKey(Contestant)
    rank = models.IntegerField()
</snippet></ROW><ROW><id>3236621</id><snippet>admin.py</snippet></ROW><ROW><id>3236621</id><snippet>TextInput</snippet></ROW><ROW><id>3236621</id><snippet>ContestResults</snippet></ROW><ROW><id>3236621</id><snippet>ModelForm</snippet></ROW><ROW><id>3236621</id><snippet>__init__()</snippet></ROW><ROW><id>3236621</id><snippet>save()</snippet></ROW><ROW><id>3236621</id><snippet>from django import forms
from django.contrib import admin
from models import Contest, Contestant, ContestResults

# Generates a function that sequentially calls the two functions that were
# passed to it
def func_concat(old_func, new_func):
    def function():
        old_func()
        new_func()
    return function

# A dummy widget to be replaced with your own.
class OrderedManyToManyWidget(forms.widgets.TextInput):
    pass

# A simple CharField that shows a comma-separated list of contestant IDs.
class ResultsField(forms.CharField):
    widget = OrderedManyToManyWidget()

class ContestAdminForm(forms.models.ModelForm):
    # Any fields declared here can be referred to in the "fieldsets" or
    # "fields" of the ModelAdmin. It is crucial that our custom field does not
    # use the same name as the m2m field field in the model ("contestants" in
    # our example).
    results = ResultsField()

    # Be sure to specify your model here.
    class Meta:
        model = Contest

    # Override init so we can populate the form field with the existing data.
    def __init__(self, *args, **kwargs):
        instance = kwargs.get('instance', None)
        # See if we are editing an existing Contest. If not, there is nothing
        # to be done.
        if instance and instance.pk:
            # Get a list of all the IDs of the contestants already specified
            # for this contest.
            contestants = ContestResults.objects.filter(contest=instance).order_by('rank').values_list('contestant_id', flat=True)
            # Make them into a comma-separated string, and put them in our
            # custom field.
            self.base_fields['results'].initial = ','.join(map(str, contestants))
            # Depending on how you've written your widget, you can pass things
            # like a list of available contestants to it here, if necessary.
        super(ContestAdminForm, self).__init__(*args, **kwargs)

    def save(self, *args, **kwargs):
        # This "commit" business complicates things somewhat. When true, it 
        # means that the model instance will actually be saved and all is
        # good. When false, save() returns an unsaved instance of the model.
        # When save() calls are made by the Django admin, commit is pretty
        # much invariably false, though I'm not sure why. This is a problem
        # because when creating a new Contest instance, it needs to have been
        # saved in the DB and have a PK, before we can create ContestResults.
        # Fortunately, all models have a built-in method called save_m2m()
        # which will always be executed after save(), and we can append our
        # ContestResults-creating code to the existing same_m2m() method.
        commit = kwargs.get('commit', True)
        # Save the Contest and get an instance of the saved model
        instance = super(ContestAdminForm, self).save(*args, **kwargs)
        # This is known as a lexical closure, which means that if we store
        # this function and execute it later on, it will execute in the same
        # context (i.e. it will have access to the current instance and self).
        def save_m2m():
            # This is really naive code and should be improved upon,
            # especially in terms of validation, but the basic gist is to make
            # the needed ContestResults. For now, we'll just delete any
            # existing ContestResults for this Contest and create them anew.
            ContestResults.objects.filter(contest=instance).delete()
            # Make a list of (rank, contestant ID) tuples from the comma-
            # -separated list of contestant IDs we get from the results field.
            formdata = enumerate(map(int, self.cleaned_data['results'].split(',')), 1)
            for rank, contestant in formdata:
                ContestResults.objects.create(contest=instance, contestant_id=contestant, rank=rank)
        if commit:
            # If we're committing (fat chance), simply run the closure.
            save_m2m()
        else:
            # Using a function concatenator, ensure our save_m2m closure is
            # called after the existing save_m2m function (which will be
            # called later on if commit is False).
            self.save_m2m = func_concat(self.save_m2m, save_m2m)
        # Return the instance like a good save() method.
        return instance

class ContestAdmin(admin.ModelAdmin):
    # The precious fieldsets.
    fieldsets = (
        ('Basic Info', {
            'fields': ('name', 'results',)
        }),)
    # Here's where we override our form
    form = ContestAdminForm

admin.site.register(Contest, ContestAdmin)
</snippet></ROW><ROW><id>3236670</id><snippet>(min1 &gt;= min2) and (max1 &lt;= max2)</snippet></ROW><ROW><id>3236670</id><snippet>min1, max1 = 4, 10</snippet></ROW><ROW><id>3236670</id><snippet>min2, max2 = 3, 20</snippet></ROW><ROW><id>3236670</id><snippet>min2 &lt;= min1 &lt;= max1 &lt;= max2</snippet></ROW><ROW><id>3236935</id><snippet>user = User()
pics = user.portfolio_set
</snippet></ROW><ROW><id>3236935</id><snippet>modelname_set</snippet></ROW><ROW><id>3236935</id><snippet>collection_name</snippet></ROW><ROW><id>3236935</id><snippet>ReferenceProperty</snippet></ROW><ROW><id>3236935</id><snippet>class Portfolio(db.Model):
  user = db.ReferenceProperty(User, collection_name="Portfolio")
</snippet></ROW><ROW><id>3237394</id><snippet>key1 = "18x 6]8vM;54 *(5:  {   U1]8  z [  8"
key2 = "1_ tx7X d  &lt;  nw  334J702) 7]o}` 0"
end8 = "Tm[K T2u"
</snippet></ROW><ROW><id>3237394</id><snippet>def numFromKey(key):
    return int(filter(lambda c: c in map(str,range(10)),key))
</snippet></ROW><ROW><id>3237394</id><snippet>def spacesIn(key):
    return len(filter(lambda c: c==' ',key))
</snippet></ROW><ROW><id>3237394</id><snippet>pkey1 = numFromKey(key1)/spacesIn(key1)
pkey2 = numFromKey(key2)/spacesIn(key2)
</snippet></ROW><ROW><id>3237394</id><snippet>from struct import pack
catstring = pack('&gt;L',pkey1) + pack('&gt;L',pkey2) + end8
</snippet></ROW><ROW><id>3237394</id><snippet>import md5
magic = md5.new(catstring).digest()
</snippet></ROW><ROW><id>3237421</id><snippet>ImportError</snippet></ROW><ROW><id>3237421</id><snippet>try:
    __import__("os.peth", fromlist=[os])
except ImportError:
    pass
</snippet></ROW><ROW><id>3237449</id><snippet>gimp -i -b '(python-fu-bw-film RUN-NONINTERACTIVE "/path/to/filename.jpg" 0 1 FALSE FALSE FALSE FALSE FALSE FALSE)' -b '(gimp-quit 0)'
</snippet></ROW><ROW><id>3237456</id><snippet>show create table TableName;
</snippet></ROW><ROW><id>3237456</id><snippet>   alter table TableName DEFAULT CHARACTER SET utf8;
</snippet></ROW><ROW><id>3237722</id><snippet>__set__</snippet></ROW><ROW><id>3237722</id><snippet>__delete__</snippet></ROW><ROW><id>3237722</id><snippet>class ReadOnlyCachedAttribute(object):    
    '''Computes attribute value and caches it in the instance.
    Source: Python Cookbook 
    Author: Denis Otkidach http://stackoverflow.com/users/168352/denis-otkidach
    This decorator allows you to create a property which can be computed once and
    accessed many times. Sort of like memoization
    '''
    def __init__(self, method, name=None):
        self.method = method
        self.name = name or method.__name__
        self.__doc__ = method.__doc__
    def __get__(self, inst, cls): 
        if inst is None:
            return self
        elif self.name in inst.__dict__:
            return inst.__dict__[self.name]
        else:
            result = self.method(inst)
            inst.__dict__[self.name]=result
            return result    
    def __set__(self, inst, value):
        raise AttributeError("This property is read-only")
    def __delete__(self,inst):
        del inst.__dict__[self.name]
</snippet></ROW><ROW><id>3237722</id><snippet>if __name__=='__main__':
    class Foo(object):
        @ReadOnlyCachedAttribute
        # @read_only_lazyprop
        def bar(self):
            print 'Calculating self.bar'  
            return 42
    foo=Foo()
    print(foo.bar)
    # Calculating self.bar
    # 42
    print(foo.bar)    
    # 42
    try:
        foo.bar=1
    except AttributeError as err:
        print(err)
        # This property is read-only
    del(foo.bar)
    print(foo.bar)
    # Calculating self.bar
    # 42
</snippet></ROW><ROW><id>3237722</id><snippet>CachedAttribute</snippet></ROW><ROW><id>3237722</id><snippet>del foo.bar</snippet></ROW><ROW><id>3237722</id><snippet>foo.bar</snippet></ROW><ROW><id>3237722</id><snippet>del foo.bar</snippet></ROW><ROW><id>3237722</id><snippet>'bar'</snippet></ROW><ROW><id>3237722</id><snippet>foo.__dict__</snippet></ROW><ROW><id>3237722</id><snippet>bar</snippet></ROW><ROW><id>3237722</id><snippet>Foo.__dict__</snippet></ROW><ROW><id>3237722</id><snippet>def read_only_lazyprop(fn):
    attr_name = '_lazy_' + fn.__name__
    @property
    def _lazyprop(self):
        if not hasattr(self, attr_name):
            setattr(self, attr_name, fn(self))
        return getattr(self, attr_name)
    @_lazyprop.setter
    def _lazyprop(self,value):
        raise AttributeError("This property is read-only")
    return _lazyprop
</snippet></ROW><ROW><id>3238274</id><snippet>suds</snippet></ROW><ROW><id>3238274</id><snippet>&gt;&gt;&gt; from suds.client import Client
&gt;&gt;&gt; url = 'https://109.231.73.12:8090/API?wsdl'
&gt;&gt;&gt; client = Client(url, username='qwerty123', password='qwerty123')
&gt;&gt;&gt; client.service.addition(1, 2)
3
&gt;&gt;&gt; client.service.hello('John')
HelloJohn
&gt;&gt;&gt; client.service.xToThePowerOfy(2, 16)
18
&gt;&gt;&gt; print client # automagic documentation

Suds ( https://fedorahosted.org/suds/ )  version: 0.4 (beta)  build: R685-20100513

Service ( BasicService ) tns="http://service.basic.com/"
   Prefixes (1)
      ns0 = "http://service.basic.com/"
   Ports (1):
      (BasicPort)
         Methods (3):
            addition(xs:int x, xs:int y, )
            hello(xs:string name, )
            xToThePowerOfy(xs:int x, xs:int y, )
         Types (6):
            addition
            additionResponse
            hello
            helloResponse
            xToThePowerOfy
            xToThePowerOfyResponse
</snippet></ROW><ROW><id>3238314</id><snippet>import collections
servers = collections.defaultdict(list)

def register(eventname, callable):
    servers[eventname].append(callable)

def raise(eventname, *a, **k):
    for s in servers.get(eventname, ()):
        s(*a, **k)
</snippet></ROW><ROW><id>3238314</id><snippet>import sys

class LazyCall(object):
    def __init__(self, name):
        self.name = name
        self.f = None
    def __call__(self, *a, **k):
        if self.f is None:
            modname, funname = self.name.rsplit('.', 1)
            if modname not in sys.modules:
                __import__(modname)
            self.f = getattr(sys.modules[modname], funname)
        self.f(*a, **k)
</snippet></ROW><ROW><id>3238314</id><snippet>'package.module.func'</snippet></ROW><ROW><id>3238314</id><snippet>register(LazyCall('package.module.func'))</snippet></ROW><ROW><id>3238314</id><snippet>Strategy</snippet></ROW><ROW><id>3238314</id><snippet>class _JustCallIt(object):
    def __call__(self, *a, **k):
        self.f(*a, **k)

class LazyCall(object):
    def __init__(self, name):
        self.name = name
        self.f = None
    def __call__(self, *a, **k):
        modname, funname = self.name.rsplit('.', 1)
        if modname not in sys.modules:
            __import__(modname)
        self.f = getattr(sys.modules[modname], funname)
        self.__class__ = _JustCallIt
        self.f(*a, **k)
</snippet></ROW><ROW><id>3238314</id><snippet>if self.f is None:</snippet></ROW><ROW><id>3238314</id><snippet>register</snippet></ROW><ROW><id>3238314</id><snippet>tipfy</snippet></ROW><ROW><id>3238314</id><snippet>register</snippet></ROW><ROW><id>3238314</id><snippet>subscribe</snippet></ROW><ROW><id>3238314</id><snippet>register(somevent, 'package.module.function')
</snippet></ROW><ROW><id>3238314</id><snippet>register(somevent, LazyCall('package.module.function'))
</snippet></ROW><ROW><id>3238314</id><snippet>LazyCall</snippet></ROW><ROW><id>3238314</id><snippet>LazyInstantiateAndCall</snippet></ROW><ROW><id>3238445</id><snippet>int</snippet></ROW><ROW><id>3238445</id><snippet>__new__</snippet></ROW><ROW><id>3238445</id><snippet>class TestClass(int):
    def __new__(cls, *args, **kwargs):
        return  super(TestClass, cls).__new__(cls, 5)

print TestClass()
</snippet></ROW><ROW><id>3238486</id><snippet>True</snippet></ROW><ROW><id>3238486</id><snippet>False</snippet></ROW><ROW><id>3238486</id><snippet>def body(line):
    global title_flag

    # skip over comments
    if line[0] == '#':
        return None, False
    # skip over blank lines
    if re.search(r'^\s+$', line):
        return None, False

    # Find the line where the title is defined
    if 'DEFINE_MENU' in line and title_flag == 0:
        type, name = line.split()
        title = name
        title_flag = 1
        return title, body(line)

    # If DEFINE_MENU is found and flag has been raised, this
    # signifies a new menu definition.
    if 'DEFINE_MENU' in line and title_flag == 1:
        return None, True
</snippet></ROW><ROW><id>3238486</id><snippet>title_flag = 0

with open('some_file', 'r') as afile:
    for line in afile:
        thetitle, mustbreak = body(line)
        if thetitle is not Note: title = thetitle
        if mustbreak: break
</snippet></ROW><ROW><id>3238486</id><snippet>file</snippet></ROW><ROW><id>3238486</id><snippet>with</snippet></ROW><ROW><id>3238486</id><snippet>re.search</snippet></ROW><ROW><id>3238486</id><snippet>in</snippet></ROW><ROW><id>3238486</id><snippet>'DEFINE_MENU"</snippet></ROW><ROW><id>3238486</id><snippet>body</snippet></ROW><ROW><id>3238584</id><snippet>openssl s_client</snippet></ROW><ROW><id>3239005</id><snippet>quote()</snippet></ROW><ROW><id>3239005</id><snippet>urllib2.quote(name.lower().encode('latin1'))</snippet></ROW><ROW><id>3239251</id><snippet>u = urllib2.urlopen('http://myserver/inout-tracker', data)
h.request('POST', '/inout-tracker/index.php', data, headers)
</snippet></ROW><ROW><id>3239251</id><snippet>/inout-tracker</snippet></ROW><ROW><id>3239251</id><snippet>/</snippet></ROW><ROW><id>3239251</id><snippet>index.php</snippet></ROW><ROW><id>3239251</id><snippet>302</snippet></ROW><ROW><id>3239251</id><snippet>/</snippet></ROW><ROW><id>3239259</id><snippet>ScriptScope</snippet></ROW><ROW><id>3239259</id><snippet>ScriptEngine</snippet></ROW><ROW><id>3239259</id><snippet>scope.SetVariable</snippet></ROW><ROW><id>3239815</id><snippet>thread</snippet></ROW><ROW><id>3239815</id><snippet>join()</snippet></ROW><ROW><id>3239815</id><snippet>class MyThread(threading.Thread):
    def __init__(self, ...):
        self.result = []
        ...

def main():
    # doStuffWith() returns a MyThread instance
    threads = [ doStuffWith(k).start() for k in arrayofkeywords[:maxThreads] ]
    for t in threads:
        t.join()
        ret = t.result
        # process return value here
</snippet></ROW><ROW><id>3239815</id><snippet>def handler(outList)
    ...
    # Modify existing object (important!)
    outList.append(1)
    ...

def doStuffWith(keyword):
    ...
    result = []
    thread = Thread(target=handler, args=(result,))
    return (thread, result)

def main():
    threads = [ doStuffWith(k) for k in arrayofkeywords[:maxThreads] ]
    for t in threads:
        t[0].start()
    for t in threads:
        t[0].join()
        ret = t[1]
        # process return value here
</snippet></ROW><ROW><id>3239889</id><snippet>whoosh</snippet></ROW><ROW><id>3240079</id><snippet>line</snippet></ROW><ROW><id>3240079</id><snippet>line.strip()</snippet></ROW><ROW><id>3240079</id><snippet>... " % (line.strip(), line.strip())
</snippet></ROW><ROW><id>3240079</id><snippet> ... " % (line.strip(), ) * 2
</snippet></ROW><ROW><id>3240086</id><snippet>errno</snippet></ROW><ROW><id>3240086</id><snippet>EINVAL</snippet></ROW><ROW><id>3240086</id><snippet>strace</snippet></ROW><ROW><id>3240086</id><snippet>$ strace -f -o strace.log python yourscript.py [arguments...]
</snippet></ROW><ROW><id>3240086</id><snippet>strace.log</snippet></ROW><ROW><id>3240086</id><snippet>times({tms_utime=162, tms_stime=123, tms_cutime=0, tms_cstime=0}) = 1718279979
write(1, "2.85\n", 5)                   = -1 EINVAL (Invalid argument)
</snippet></ROW><ROW><id>3240086</id><snippet>man 2 write</snippet></ROW><ROW><id>3240086</id><snippet>EINVAL</snippet></ROW><ROW><id>3240190</id><snippet>MEDIA_URL = 'http://192.168.0.1/gallery/media/'
ADMIN_MEDIA_PREFIX = '/gallery/admin_media/'
SESSION_COOKIE_PATH = '/gallery'
LOGIN_REDIRECT_URL = '/gallery/'
LOGIN_URL = '/gallery/accounts/login/'
LOGOUT_URL = '/gallery/accounts/logout/'
</snippet></ROW><ROW><id>3240190</id><snippet>WSGIScriptAlias /gallery /path/to/gallery/apache/gallery.wsgi
Alias /gallery/media /path/to/gallery/media
Alias /gallery/admin_media /path/to/gallery/venv/lib/python2.6/site-packages/django/contrib/admin/media
</snippet></ROW><ROW><id>3240312</id><snippet>k.write('&lt;table&gt;')
    for i in row:
        k.write('&lt;tr&gt;')
        k.write('&lt;td&gt;&lt;form action="edit_python" method="post" name="edit_python"&gt;&lt;input type="hidden" name="ivalue" value="' + i[0] + '"/&gt;&lt;input type="submit" value="Submit" /&gt;&lt;/form&gt;&lt;/td&gt;&lt;td&gt;'+i[0]+'&lt;/td&gt;&lt;td&gt;'+i[1]+'&lt;/td&gt;')
        k.write('&lt;/tr&gt;')
k.write('&lt;/table&gt;')
</snippet></ROW><ROW><id>3240312</id><snippet> &lt;&gt;&lt;/FORM&gt;
</snippet></ROW><ROW><id>3240312</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>3240312</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>3240481</id><snippet>$ s='abc/def/ghi'
$ echo ${s%%/*}
abc
$ echo ${s%/*}
abc/def
$ echo ${s#*/}
def/ghi
$ echo ${s##*/}
ghi
</snippet></ROW><ROW><id>3240481</id><snippet>&gt;&gt;&gt; s='abc/def/ghi'
&gt;&gt;&gt; print s[:s.find("/")]
abc
&gt;&gt;&gt; print s[:s.rfind("/")]
abc/def
&gt;&gt;&gt; print s[s.find("/")+1:]
def/ghi
&gt;&gt;&gt; print s[s.rfind("/")+1:]
ghi
</snippet></ROW><ROW><id>3240481</id><snippet>&gt;&gt;&gt; s='abc/def/ghi'
&gt;&gt;&gt; t='no slash here'
&gt;&gt;&gt; print s[:s.find("/") % (len(s) + 1)]
abc
&gt;&gt;&gt; print t[:t.find("/") % (len(t) + 1)]
no slash here
&gt;&gt;&gt; print s[:s.rfind("/") % (len(s) + 1)]
abc/def
&gt;&gt;&gt; print t[:t.rfind("/") % (len(t) + 1)]
no slash here
&gt;&gt;&gt; print s[s.find("/")+1:]
def/ghi
&gt;&gt;&gt; print t[t.find("/")+1:]
no slash here
&gt;&gt;&gt; print s[s.rfind("/")+1:]
ghi
&gt;&gt;&gt; print t[t.rfind("/")+1:]
no slash here
</snippet></ROW><ROW><id>3240486</id><snippet>date = datetime.datetime(2003,8,1,12,4,5)
for i in range(5): 
    date += datetime.timedelta(days=1)
    print(date) 
</snippet></ROW><ROW><id>3240649</id><snippet>__iter__</snippet></ROW><ROW><id>3240649</id><snippet>def __iter__(self):
  for r in rooms:
    yield r
</snippet></ROW><ROW><id>3241059</id><snippet>File "test.py", line 5, in __main__.flatten
Failed example:
    flatten([[9, [7, 1, 13, 2], 8], [7, 6]])
Expected:
    [9, 7, 1, 13, 2, 8, 7, 6]
Got:
    [9, [7, 1, 13, 2], 8, 7, 6]
</snippet></ROW><ROW><id>3241059</id><snippet>y</snippet></ROW><ROW><id>3241059</id><snippet>y</snippet></ROW><ROW><id>3241059</id><snippet>if type(x) != type([])</snippet></ROW><ROW><id>3241214</id><snippet>- url: /admin/.*
  script: admin.py
  login: admin
</snippet></ROW><ROW><id>3241214</id><snippet>admin.py</snippet></ROW><ROW><id>3241214</id><snippet>admin.py</snippet></ROW><ROW><id>3241214</id><snippet>users.is_current_user_admin()</snippet></ROW><ROW><id>3241364</id><snippet>clb.Check(itemnum, check=False)</snippet></ROW><ROW><id>3241439</id><snippet>[5]</snippet></ROW><ROW><id>3241439</id><snippet>x</snippet></ROW><ROW><id>3241439</id><snippet>neighbor</snippet></ROW><ROW><id>3241439</id><snippet>(x, neighbor) = random.sample(out_edge_list, 2)
</snippet></ROW><ROW><id>3241538</id><snippet>Exception</snippet></ROW><ROW><id>3241538</id><snippet>HTTPError</snippet></ROW><ROW><id>3241538</id><snippet>import urllib2 
try:
   page = urllib2.urlopen("some url")
except urllib2.HTTPError, err:
   if err.code == 404:
       print "Page not found!"
   else:
       ...
</snippet></ROW><ROW><id>3241538</id><snippet>EnvironmentError</snippet></ROW><ROW><id>3241538</id><snippet>import os
try:
   f=open("hello")
except IOError, err:
   print err
   print err.errno
   print err.strerror
   print err.filename
</snippet></ROW><ROW><id>3241538</id><snippet>[Errno 2] No such file or directory: 'hello'
2
No such file or directory
hello
</snippet></ROW><ROW><id>3241649</id><snippet>binascii</snippet></ROW><ROW><id>3241656</id><snippet>repr</snippet></ROW><ROW><id>3241656</id><snippet>str</snippet></ROW><ROW><id>3241656</id><snippet>repr</snippet></ROW><ROW><id>3241656</id><snippet>print</snippet></ROW><ROW><id>3241656</id><snippet>str</snippet></ROW><ROW><id>3241656</id><snippet>print Number</snippet></ROW><ROW><id>3241656</id><snippet>print VALUES</snippet></ROW><ROW><id>3241656</id><snippet>repr</snippet></ROW><ROW><id>3241656</id><snippet>print "%.3f" % 3.1415   # prints 3.142
</snippet></ROW><ROW><id>3241697</id><snippet>comments</snippet></ROW><ROW><id>3241697</id><snippet>comments = self.comments.order('-added_on').fetch(500)
</snippet></ROW><ROW><id>3241697</id><snippet>comments = self.comments_set.order('-added_on').fetch(500)
</snippet></ROW><ROW><id>3241761</id><snippet>sys.path</snippet></ROW><ROW><id>3241761</id><snippet>os.environ['PATH']</snippet></ROW><ROW><id>3241761</id><snippet>&gt;&gt;&gt; sys.path.append("/opt/local/bin")
&gt;&gt;&gt; os.system("wget")
sh: wget: command not found
32512
&gt;&gt;&gt; os.environ['PATH'] += os.pathsep + '/opt/local/bin'
&gt;&gt;&gt; os.system("wget")
wget: missing URL
</snippet></ROW><ROW><id>3241847</id><snippet>for f in *; do python myscript.py $f; done
</snippet></ROW><ROW><id>3241847</id><snippet>def process(filename):
    ...code goes here...
</snippet></ROW><ROW><id>3241847</id><snippet>for f in os.listdir(folder):
    process(f)
</snippet></ROW><ROW><id>3241847</id><snippet>folder</snippet></ROW><ROW><id>3241847</id><snippet>-r</snippet></ROW><ROW><id>3241847</id><snippet>args</snippet></ROW><ROW><id>3241847</id><snippet>for f in args:
    process(f)
</snippet></ROW><ROW><id>3241847</id><snippet>for d in args:
    for f in os.listdir(d):
        process(f)
</snippet></ROW><ROW><id>3241847</id><snippet>-r</snippet></ROW><ROW><id>3241847</id><snippet>for opt, arg in opt_list:
    if opt == '-r':
        process(arg)
</snippet></ROW><ROW><id>3241883</id><snippet>import os
os.open("lock", os.O_CREAT|os.O_EXCL)
</snippet></ROW><ROW><id>3241959</id><snippet>global Y_VAL</snippet></ROW><ROW><id>3241959</id><snippet>Y_VAL</snippet></ROW><ROW><id>3241959</id><snippet>global Y_VAL</snippet></ROW><ROW><id>3242325</id><snippet>number</snippet></ROW><ROW><id>3242325</id><snippet>i</snippet></ROW><ROW><id>3242325</id><snippet>for (int number = 1; number &lt; 101; number++) {
  printf("%d\n", number);
}
</snippet></ROW><ROW><id>3242400</id><snippet>setattr</snippet></ROW><ROW><id>3242400</id><snippet>foo.names</snippet></ROW><ROW><id>3242400</id><snippet>getattr(foo, attr).append(value)</snippet></ROW><ROW><id>3242494</id><snippet>SIGCHLD</snippet></ROW><ROW><id>3242494</id><snippet>waitpid()</snippet></ROW><ROW><id>3242494</id><snippet>SIG_DFL</snippet></ROW><ROW><id>3242666</id><snippet>quickList = ["string1", "string2"]
anotherList = {"string1": ["another1a", "another1b"],
               "string2": ["another2a", "another2b"]}

for i in range(1):
    quick = random.choice(quickList)
    print quick
    print random.choice(anotherList[quick])
</snippet></ROW><ROW><id>3242666</id><snippet>for</snippet></ROW><ROW><id>3242666</id><snippet>if</snippet></ROW><ROW><id>3242677</id><snippet>client, addr = listeningSocket.accept()
client.recv(32)
client.send(b'hello')
sslSocket = ssl.wrap_socket(client, keyfile='key.pem', certfile='cert.pem', server_side=True, ssl_version=ssl.PROTOCOL_TLSv1)
client.setblocking(0)
sslSocket.write(b'hello')
</snippet></ROW><ROW><id>3242677</id><snippet>client, addr = listeningSocket.accept()
client.recv(32)
client.send(b'hello')
client.setblocking(0)

while True:
    try:
        client.do_handshake()
        break
    except ssl.SSLError, err:
        if err.args[0] == ssl.SSL_ERROR_WANT_READ:
            select.select([client], [], [])
        elif err.args[0] == ssl.SSL_ERROR_WANT_WRITE:
            select.select([], [client], [])
        else:
            raise

sslSocket = ssl.wrap_socket(client, do_handshake_on_connect=False, keyfile='key.pem', certfile='cert.pem', server_side=True, ssl_version=ssl.PROTOCOL_TLSv1)
sslSocket.write(b'hello')
</snippet></ROW><ROW><id>3242841</id><snippet>mod_this</snippet></ROW><ROW><id>3242841</id><snippet>mod_that</snippet></ROW><ROW><id>3242841</id><snippet>lighttpd</snippet></ROW><ROW><id>3242841</id><snippet>mod_wsgi</snippet></ROW><ROW><id>3242931</id><snippet>doctest</snippet></ROW><ROW><id>3242931</id><snippet>gmpy</snippet></ROW><ROW><id>3242931</id><snippet>gmpy</snippet></ROW><ROW><id>3242931</id><snippet>unittest</snippet></ROW><ROW><id>3242931</id><snippet>nose</snippet></ROW><ROW><id>3242931</id><snippet>unittest</snippet></ROW><ROW><id>3242931</id><snippet>doctest</snippet></ROW><ROW><id>3242931</id><snippet>gmpy</snippet></ROW><ROW><id>3242958</id><snippet>shared_ptr</snippet></ROW><ROW><id>3242958</id><snippet>%include &lt;std_shared_ptr.i&gt;</snippet></ROW><ROW><id>3242958</id><snippet>python setup.py build_ext --inplace</snippet></ROW><ROW><id>3243588</id><snippet>provider = wx.SimpleHelpProvider()
wx.HelpProvider_Set(provider)
</snippet></ROW><ROW><id>3243588</id><snippet>panel.SetHelpText("This is a wx.Panel.")
</snippet></ROW><ROW><id>3243588</id><snippet>import  wx

class Frame(wx.Frame):
  def __init__(self, parent, title):
    wx.Frame.__init__(self, parent=parent, id=wx.ID_ANY, title=title,
                style=(wx.DEFAULT_FRAME_STYLE | wx.WS_EX_CONTEXTHELP) ,
                pos=(20, 20))
    self.SetExtraStyle(wx.FRAME_EX_CONTEXTHELP)
    self.CreateStatusBar()
    self.createOtherStuffHere()
    self.Show()

  def createOtherStuffHere(self):
    panel = wx.Panel(self)
    panel.SetHelpText("This is a wx.Panel.")

    self.label = wx.StaticText(panel, style=wx.WS_EX_CONTEXTHELP, label="Click me I may provide some help?", size=(200,30))
    self.label.SetHelpText("This is the help though not so helpful!")

    self.edit = wx.TextCtrl(panel, pos=(20,50))
    self.edit.SetHelpText("i am a edit box")

    self.helpButton = wx.ContextHelpButton(panel, pos=(20,100))

provider = wx.SimpleHelpProvider()
wx.HelpProvider_Set(provider)

app = wx.PySimpleApp()
frame = Frame(None, "Test")
app.SetTopWindow(frame)
app.MainLoop()
</snippet></ROW><ROW><id>3243878</id><snippet>for</snippet></ROW><ROW><id>3243925</id><snippet>import subprocess
CREATE_NO_WINDOW = 0x08000000
args = [...]
subprocess.check_call(["segwin.exe"] + args, creationflags=CREATE_NO_WINDOW)
</snippet></ROW><ROW><id>3243925</id><snippet>check_call</snippet></ROW><ROW><id>3243925</id><snippet>call</snippet></ROW><ROW><id>3243925</id><snippet>os.system()</snippet></ROW><ROW><id>3243925</id><snippet>subprocess</snippet></ROW><ROW><id>3243925</id><snippet>os.system()</snippet></ROW><ROW><id>3244061</id><snippet>import struct
import Image
import scipy
import scipy.misc
import scipy.cluster

NUM_CLUSTERS = 5

print 'reading image'
im = Image.open('image.jpg')
im = im.resize((150, 150))      # optional, to reduce time
ar = scipy.misc.fromimage(im)
shape = ar.shape
ar = ar.reshape(scipy.product(shape[:2]), shape[2])

print 'finding clusters'
codes, dist = scipy.cluster.vq.kmeans(ar, NUM_CLUSTERS)
print 'cluster centres:\n', codes

vecs, dist = scipy.cluster.vq.vq(ar, codes)         # assign codes
counts, bins = scipy.histogram(vecs, len(codes))    # count occurrences

index_max = scipy.argmax(counts)                    # find most frequent
peak = codes[index_max]
colour = ''.join(chr(c) for c in peak).encode('hex')
print 'most frequent is %s (#%s)' % (peak, colour)
</snippet></ROW><ROW><id>3244061</id><snippet># bonus: save image using only the N most common colours
c = ar.copy()
for i, code in enumerate(codes):
    c[scipy.r_[scipy.where(vecs==i)],:] = code
scipy.misc.imsave('clusters.png', c.reshape(*shape))
print 'saved clustered image'
</snippet></ROW><ROW><id>3245313</id><snippet>QtCore.QObject.connect(self.pushButton, QtCore.SIGNAL("clicked()"), self.SendEmail("info@mysite.net", "test@mysite.net", "subject", "bodytext"))
</snippet></ROW><ROW><id>3245313</id><snippet>QtCore.QObject.connect(self.pushButton, QtCore.SIGNAL("clicked()"), self.pushButtonClicked)

def pushButtonClicked(self):
    self.SendEmail("info@mysite.net", "test@mysite.net", "subject", "bodytext")
</snippet></ROW><ROW><id>3245471</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>3245471</id><snippet>read</snippet></ROW><ROW><id>3245471</id><snippet>#!/usr/bin/python

import urllib2

f=file('python.mp3', 'w')

url=urllib2.urlopen("http://mp3.streampower.be/radio1-high.mp3")

while True:
    f.write(url.read(1024))
</snippet></ROW><ROW><id>3245471</id><snippet>read</snippet></ROW><ROW><id>3245471</id><snippet>write</snippet></ROW><ROW><id>3245471</id><snippet>1024</snippet></ROW><ROW><id>3245471</id><snippet>write(2)</snippet></ROW><ROW><id>3245471</id><snippet>read</snippet></ROW><ROW><id>3245499</id><snippet>picture = get from id
return HttpResponse(picture, mimetype="image/jpeg")
</snippet></ROW><ROW><id>3245499</id><snippet>data:image</snippet></ROW><ROW><id>3245499</id><snippet>import base64

def getData(request,key):
    forum = Topic.get(key)
    picData = forum.creator.portfolio_set
    pictureSrc = ''
    if picData:
        picture = picData[0].userpic
        pictureSrc = "data:image;base64,%s"%base64.b64encode(picture)

    return render_to_response(request,"forum.html",{"forum":forum,"pic":pictureSrc })
</snippet></ROW><ROW><id>3245825</id><snippet>urllib.urlretrieve(url)
</snippet></ROW><ROW><id>3245825</id><snippet>urllib.urlretrieve(url, filename)
</snippet></ROW><ROW><id>3245907</id><snippet>30 * * * * /path/to/script</snippet></ROW><ROW><id>3245948</id><snippet>from django.contrib.auth.decorators import login_required

@login_required(redirect_field_name='redirect_to')
def my_view(request):
    ...
</snippet></ROW><ROW><id>3245996</id><snippet>db.define_table('name',Field('id_name','id'),...other fields...)</snippet></ROW><ROW><id>3245996</id><snippet>db.define_table('name',...fields..., primarykey=[....])</snippet></ROW><ROW><id>3246066</id><snippet>import urllib2

req = urllib2.Request(url, data)
response = urllib2.urlopen(req)
result = response.read()
</snippet></ROW><ROW><id>3246066</id><snippet>import urllib

values = { 'foo': 'bar' }
data = urllib.urlencode(values)
</snippet></ROW><ROW><id>3246366</id><snippet>o = ob.getData()
</snippet></ROW><ROW><id>3246366</id><snippet>o = ob.getData(mesh=True)
</snippet></ROW><ROW><id>3246445</id><snippet>import string
values = dict()
for index, letter in enumerate(string.ascii_lowercase):
   values[letter] = index + 1
</snippet></ROW><ROW><id>3246445</id><snippet>print values["a"]
-&gt; 1
</snippet></ROW><ROW><id>3246445</id><snippet>print ord("c") - (ord("a")) + 1
</snippet></ROW><ROW><id>3246445</id><snippet>values = {chr(i): i + 1 for i in range(ord("a"), ord("a") + 26)}
</snippet></ROW><ROW><id>3247308</id><snippet>elementtree</snippet></ROW><ROW><id>3247308</id><snippet>lxml</snippet></ROW><ROW><id>3247308</id><snippet>&gt;&gt;&gt; from xml.etree import ElementTree as et
&gt;&gt;&gt; x='''&lt;div&gt;
... text1
... &lt;div&gt;
...   t1
... &lt;/div&gt;
... text2
... &lt;div&gt;
...   t2
... &lt;/div&gt;
... text3
... &lt;/div&gt;'''
&gt;&gt;&gt; t=et.fromstring(x)
&gt;&gt;&gt; for el in t.iter():
...   print '%s: %r, %r' % (el.tag, el.text, el.tail)
... 
div: '\ntext1\n', None
div: '\n  t1\n', '\ntext2\n'
div: '\n  t2\n', '\ntext3\n'
</snippet></ROW><ROW><id>3247308</id><snippet>.getiterator()</snippet></ROW><ROW><id>3247308</id><snippet>.iter()</snippet></ROW><ROW><id>3247308</id><snippet>def elements_and_texts(t):
    for el in t.iter():
        yield 'tag', el.tag
        if el.text is not None:
            yield 'text', el.text
        if el.tail is not None:
            yield 'tail', el.tail
</snippet></ROW><ROW><id>3247308</id><snippet>None</snippet></ROW><ROW><id>3247308</id><snippet>'tag'</snippet></ROW><ROW><id>3247308</id><snippet>'text'</snippet></ROW><ROW><id>3247308</id><snippet>'tail'</snippet></ROW><ROW><id>3247553</id><snippet>)(][;,</snippet></ROW><ROW><id>3247553</id><snippet>A-Z a-z 0-9</snippet></ROW><ROW><id>3247553</id><snippet>def scrub(table_name):
    return ''.join( chr for chr in table_name if chr.isalnum() )

scrub('); drop tables --')  # returns 'droptables'
</snippet></ROW><ROW><id>3247760</id><snippet>form_with_post = CategoryForm(request.POST)
if form_with_post.is_valid():
    form_with_post.save()
else:
    ... return the form_with_post through the context to display the errors
</snippet></ROW><ROW><id>3247934</id><snippet>addLine</snippet></ROW><ROW><id>3247934</id><snippet>previousLine</snippet></ROW><ROW><id>3247934</id><snippet>twisted.conch.insults.insults.ServerProtocol</snippet></ROW><ROW><id>3247934</id><snippet>python -m twisted.conch.stdio
</snippet></ROW><ROW><id>3247934</id><snippet>ServerProtocol</snippet></ROW><ROW><id>3247934</id><snippet>runWithProtocol</snippet></ROW><ROW><id>3247934</id><snippet>ServerProtocol</snippet></ROW><ROW><id>3247934</id><snippet>StandardIO</snippet></ROW><ROW><id>3247934</id><snippet>ServerProtocol</snippet></ROW><ROW><id>3248053</id><snippet>import sys

...

def check_attribute(name, value):
    """Gives warnings on stderr if the value is an empty or whitespace string.

       All other values, including None, are OK and give no warning.
    """
    if isinstance(value, basestring) and (not value or value.isspace()):
        print&gt;&gt;sys.stderr, "Invalid value %r for argument %r" % (value, name)
</snippet></ROW><ROW><id>3248053</id><snippet>def check_arguments(d):
    for name, value in d.iteritems():
        check_attribute(name, value)
</snippet></ROW><ROW><id>3248053</id><snippet>def f1 (a, b, c=None, d=None):
    check_arguments(locals())
    ...
</snippet></ROW><ROW><id>3248053</id><snippet>@checked_arguments
def f1 (a, b, c=None, d=None):
   ...
</snippet></ROW><ROW><id>3248053</id><snippet>inspect</snippet></ROW><ROW><id>3248053</id><snippet>locals()</snippet></ROW><ROW><id>3248053</id><snippet>check_arguments</snippet></ROW><ROW><id>3248053</id><snippet>import functools
import inspect

def checked_arguments(f):
  @functools.wraps(f)
  def wrapper(*a, **k):
    d = inspect.getcallargs(f, *a, **k)
    check_arguments(d)
    return f(*a, **k)
  return wrapper
</snippet></ROW><ROW><id>3248053</id><snippet>inspect.getcallargs</snippet></ROW><ROW><id>3248053</id><snippet>www.python.org</snippet></ROW><ROW><id>3248053</id><snippet>2.*</snippet></ROW><ROW><id>3248067</id><snippet>2**31 - 1</snippet></ROW><ROW><id>3248067</id><snippet>2**63 - 1</snippet></ROW><ROW><id>3248599</id><snippet>numpy.nonzero((a &gt; 3) &amp; (a &lt; 8))
</snippet></ROW><ROW><id>3248622</id><snippet>import numpy
a = numpy.array([1, 2, 3, 4, 5])
a[[1, 3]]
</snippet></ROW><ROW><id>3248662</id><snippet>class aForm(forms.Form):
  input1 = forms.CharField()
  input2 = forms.CharField()

  def __init__(self, addfields=0, *args, **kwargs):
    super(aForm, self).__init__(*args, **kwargs)

    #add new fields
    for i in range(3,addfields+3)
       self.fields['input%d' % i] = forms.CharField()
</snippet></ROW><ROW><id>3248911</id><snippet>class Suite(object): pass

class Heart(Suite): pass
class Club(Suite): pass
</snippet></ROW><ROW><id>3248911</id><snippet>x=Heart
</snippet></ROW><ROW><id>3249051</id><snippet>itemgetter('time')</snippet></ROW><ROW><id>3249051</id><snippet>['time']</snippet></ROW><ROW><id>3249051</id><snippet>attrgetter('time')</snippet></ROW><ROW><id>3249051</id><snippet>.time</snippet></ROW><ROW><id>3249132</id><snippet>foo.py</snippet></ROW><ROW><id>3249132</id><snippet>import os, sys
PROJECT_ROOT = os.path.join(os.path.realpath(os.path.dirname(__file__)), os.pardir)
sys.path.append(PROJECT_ROOT)

# Now you can import from the django_project package
from django_project.django_app1.utils import bar1
from django_project.django_app2 import bar2
</snippet></ROW><ROW><id>3249174</id><snippet>worksheetObject.portrait = False
</snippet></ROW><ROW><id>3249176</id><snippet>pkg_resources.get_distribution(name).activate()
</snippet></ROW><ROW><id>3249211</id><snippet>return setup_auth(app, groups, permissions, remote_user_key=None, identifiers=identifiers, authenticators=[], challengers=[])
</snippet></ROW><ROW><id>3249215</id><snippet>DATABASE_ENGINE   = 'django.db.backends.sqlite3'
DATABASE_NAME     = '/path/to/db/foo.sqlite3'
DATABASE_USER     = ''
DATABASE_PASSWORD = ''
DATABASE_HOST     = ''
DATABASE_PORT     = ''

DATABASES = {
  'default': {
    'ENGINE':   DATABASE_ENGINE,
    'NAME':     DATABASE_NAME,
    'USER':     DATABASE_USER,
    'PASSWORD': DATABASE_PASSWORD,
    'HOST':     DATABASE_HOST,
    'PORT':     DATABASE_PORT,
  }
}
</snippet></ROW><ROW><id>3249215</id><snippet># grep -ri csrf .
  ./registration/login.html:  &lt;form method="post" action="{% url django.contrib.auth.views.login %}"&gt;{% csrf_token %}
</snippet></ROW><ROW><id>3249215</id><snippet>svn checkout &lt;a href="http://wherever.com/someproject/trunk/" rel="nofollow"&gt;http://wherever.com/someproject/trunk/&lt;/a&gt; ./someproject</snippet></ROW><ROW><id>3249390</id><snippet>repr</snippet></ROW><ROW><id>3249390</id><snippet>list</snippet></ROW><ROW><id>3249390</id><snippet>list(MyModel.objects.all())
</snippet></ROW><ROW><id>3249539</id><snippet>print item</snippet></ROW><ROW><id>3249539</id><snippet>print item,
</snippet></ROW><ROW><id>3249599</id><snippet>import re
keywords = ['S0414', 'GT213', 'AT3423', 'PR342'] # etc - you probably get those from some source
pattern = re.compile('|'.join(keywords))

for line in inf:
    if pattern.search(ln):
        outf.write(line)
</snippet></ROW><ROW><id>3249847</id><snippet>eval</snippet></ROW><ROW><id>3249847</id><snippet>dict</snippet></ROW><ROW><id>3249847</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>3249847</id><snippet>eval</snippet></ROW><ROW><id>3249847</id><snippet>dict</snippet></ROW><ROW><id>3249847</id><snippet>list</snippet></ROW><ROW><id>3249847</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval("1+1")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.6/ast.py", line 68, in literal_eval
    return _convert(node_or_string)
  File "/usr/lib/python2.6/ast.py", line 67, in _convert
    raise ValueError('malformed string')
ValueError: malformed string
&gt;&gt;&gt; ast.literal_eval("\"1+1\"")
'1+1'
&gt;&gt;&gt; ast.literal_eval("{'a': 2, 'b': 3, 3:'xyz'}")
{'a': 2, 3: 'xyz', 'b': 3}
</snippet></ROW><ROW><id>3249893</id><snippet>def myThread(QtCore.QThread):
    def run(self):
        pass

thread = myThread()
thread.start()
</snippet></ROW><ROW><id>3249893</id><snippet>def myRun():
    doStuff

thread = QtCore.QThread()
thread.run = lambda self: myRun()
thread.start()
</snippet></ROW><ROW><id>3249958</id><snippet>logfile.seek(0)</snippet></ROW><ROW><id>3249988</id><snippet>join</snippet></ROW><ROW><id>3249988</id><snippet>print "\n"+'|'.join([id,var1,var2,var3,var4])
</snippet></ROW><ROW><id>3249988</id><snippet>print "\n"+'|'.join(map(str,[id,var1,var2,var3,var4]))
</snippet></ROW><ROW><id>3250185</id><snippet>obj.send_command(*CommandList.popleft())
</snippet></ROW><ROW><id>3250185</id><snippet>self</snippet></ROW><ROW><id>3250185</id><snippet>def make_command(obj, *args, **kwargs):
    def f():
        obj.send_command(*args, **kwargs)
    return f
</snippet></ROW><ROW><id>3250185</id><snippet>queue.append(make_command(obj, 'ABC', whatever='else'))
</snippet></ROW><ROW><id>3250185</id><snippet>command = queue.popleft()
command()
</snippet></ROW><ROW><id>3250239</id><snippet>os.path.expanduser('~/.programname')
</snippet></ROW><ROW><id>3250239</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.expanduser('~/.programname')
'/home/user/.programname'
</snippet></ROW><ROW><id>3250239</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.expanduser('~/.programname')
'C:\\Documents and Settings\\user/.programname'
</snippet></ROW><ROW><id>3250239</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.join(os.path.expanduser('~'), '.programname')
'C:\\Documents and Settings\\user\\.programname'
</snippet></ROW><ROW><id>3250239</id><snippet>Documents and Settings\user</snippet></ROW><ROW><id>3250239</id><snippet>/user/.programname</snippet></ROW><ROW><id>3250239</id><snippet>/home/user/.programname</snippet></ROW><ROW><id>3250381</id><snippet>neato</snippet></ROW><ROW><id>3250381</id><snippet>$ cat similar.dot
graph g {
   n1 -- n8 [ weight = 3.458911570 ];
   n1 -- n9 [ weight = 7.448105193 ];
   n8 -- n9 [ weight = 2.153308936 ];
   n8 -- n11 [ weight = 16.227647992 ];
   n9 -- n11 [ weight = 34.943139430 ];
   n10;
   n6821;
}
$ neato -Tpng similar.dot -o similar.png
</snippet></ROW><ROW><id>3250502</id><snippet>get_or_create</snippet></ROW><ROW><id>3250502</id><snippet>defaults</snippet></ROW><ROW><id>3250502</id><snippet>obj</snippet></ROW><ROW><id>3250502</id><snippet>birthday</snippet></ROW><ROW><id>3250502</id><snippet>defaults</snippet></ROW><ROW><id>3250502</id><snippet>Model.objects.all().delete()
</snippet></ROW><ROW><id>3250502</id><snippet>DELETE FROM app_model WHERE True;
</snippet></ROW><ROW><id>3250502</id><snippet>update()</snippet></ROW><ROW><id>3250502</id><snippet>Model.objects.all().update( some_field = "" )
</snippet></ROW><ROW><id>3250502</id><snippet>UPDATE app_model SET `some_field` = '' WHERE True;
</snippet></ROW><ROW><id>3250543</id><snippet>for row in dictrows:
    out_f.write("%s%s" %(delimiter.join([row[name] for name in fieldnames]),
                         lineterminator))
</snippet></ROW><ROW><id>3250549</id><snippet>win32gui.</snippet></ROW><ROW><id>3250549</id><snippet>GetForegroundWindow()</snippet></ROW><ROW><id>3250814</id><snippet>fields = ('name')
</snippet></ROW><ROW><id>3250814</id><snippet>'n','a','m','e'</snippet></ROW><ROW><id>3250814</id><snippet>fields = ('name',)
</snippet></ROW><ROW><id>3250975</id><snippet>import sys

V = range(100000)
for x in V:
    print x
    sys.stdout.flush()
</snippet></ROW><ROW><id>3251001</id><snippet>mylist</snippet></ROW><ROW><id>3251001</id><snippet>split</snippet></ROW><ROW><id>3251043</id><snippet>isinstance</snippet></ROW><ROW><id>3251043</id><snippet>if isinstance(o, ClassName):
</snippet></ROW><ROW><id>3251043</id><snippet>o</snippet></ROW><ROW><id>3251043</id><snippet>type</snippet></ROW><ROW><id>3251373</id><snippet>def get_main_colors(col_list):
    main_colors = set()
    for index, color in col_list:
        main_colors.add(tuple(component &gt;&gt; 6 for component in color))
    return [tuple(component &lt;&lt; 6 for component in color) for color in main_colors]
</snippet></ROW><ROW><id>3251408</id><snippet>import poplib

M = poplib.POP3_SSL('pop3.live.com', 995) #Connect to hotmail pop3 server
try:
    M.user(raw_input("username: ")) #Get the username from the standar input
    M.pass_(raw_input("password: ")) #Get the password from the standar input
except:
    print "username or password incorrect"
else:
    print "Successful login"
</snippet></ROW><ROW><id>3251454</id><snippet>user.user_permissions.add(p)</snippet></ROW><ROW><id>3251454</id><snippet>user.save()</snippet></ROW><ROW><id>3251454</id><snippet>get_all_permissions()</snippet></ROW><ROW><id>3251454</id><snippet>user.user_permissions.all()
</snippet></ROW><ROW><id>3251454</id><snippet>get_all_permissions()</snippet></ROW><ROW><id>3251454</id><snippet>set(user.user_permissions.values_list('codename', flat=True))
</snippet></ROW><ROW><id>3251482</id><snippet>/Users/crocidb/src/project/
</snippet></ROW><ROW><id>3251482</id><snippet>export PYTHONPATH=/Users/crocidb/src
</snippet></ROW><ROW><id>3251482</id><snippet>import project.src.class_one
</snippet></ROW><ROW><id>3251482</id><snippet>export PYTHONPATH=/Users/crocidb/src/project
</snippet></ROW><ROW><id>3251482</id><snippet>import src.class_one
</snippet></ROW><ROW><id>3251482</id><snippet>export PYTHONPATH=/Users/crocidb/src/project:$PYTHONPATH
</snippet></ROW><ROW><id>3251558</id><snippet>re.search('STATION(?P&lt;StationName&gt;.*?):.*?\n.*?IP Address: %s' % sta_ip, output).group("StationName")
</snippet></ROW><ROW><id>3252222</id><snippet>#
# line segment intersection using vectors
# see Computer Graphics by F.S. Hill
#
from numpy import *
def perp( a ) :
    b = empty_like(a)
    b[0] = -a[1]
    b[1] = a[0]
    return b

# line segment a given by endpoints a1, a2
# line segment b given by endpoints b1, b2
# return 
def seg_intersect(a1,a2, b1,b2) :
    da = a2-a1
    db = b2-b1
    dp = a1-b1
    dap = perp(da)
    denom = dot( dap, db)
    num = dot( dap, dp )
    return (num / denom)*db + b1

p1 = array( [0.0, 0.0] )
p2 = array( [1.0, 0.0] )

p3 = array( [4.0, -5.0] )
p4 = array( [4.0, 2.0] )

print seg_intersect( p1,p2, p3,p4)

p1 = array( [2.0, 2.0] )
p2 = array( [4.0, 3.0] )

p3 = array( [6.0, 0.0] )
p4 = array( [6.0, 3.0] )

print seg_intersect( p1,p2, p3,p4)
</snippet></ROW><ROW><id>3252306</id><snippet>def test_logit(self):
    defer.fail(Exception("oh no"))

def test_returnit(self):
    return defer.fail(Exception("oh no"))
</snippet></ROW><ROW><id>3252306</id><snippet>TestCase.assertFailure</snippet></ROW><ROW><id>3252306</id><snippet>def test_returnit(self):
    d = defer.fail(ValueError("6 is a bad value"))
    return self.assertFailure(d, ValueError)
</snippet></ROW><ROW><id>3252306</id><snippet>d</snippet></ROW><ROW><id>3252306</id><snippet>d</snippet></ROW><ROW><id>3252306</id><snippet>TestCase.flushLoggedErrors</snippet></ROW><ROW><id>3252306</id><snippet>def test_logit(self):
    defer.fail(ValueError("6 is a bad value"))
    gc.collect()
    self.assertEquals(self.flushLoggedErrors(ValueError), 1)
</snippet></ROW><ROW><id>3252306</id><snippet>gc.collect()</snippet></ROW><ROW><id>3252306</id><snippet>--force-gc</snippet></ROW><ROW><id>3252395</id><snippet>raw_input</snippet></ROW><ROW><id>3252395</id><snippet>if</snippet></ROW><ROW><id>3252395</id><snippet>key_one = int(raw_input('enter key: '))
</snippet></ROW><ROW><id>3252544</id><snippet>&gt;&gt;&gt; '{0:07b}'.format(12)
'0001100'
</snippet></ROW><ROW><id>3252598</id><snippet>[(k, v) for (k, v) in D.iteritems() if 'Light' in k]
</snippet></ROW><ROW><id>3253016</id><snippet>In [265]: import urllib2

In [266]: req = urllib2.Request(query, headers={'Accept':'application/xml'})

In [267]: rsp = urllib2.urlopen(req)

In [268]: xml = minidom.parse(rsp)

In [268]: xml.toxml()[:64]
Out[268]: u'&lt;?xml version="1.0" ?&gt;&lt;sparql xmlns="http://www.w3.org/2005/spar'
</snippet></ROW><ROW><id>3253016</id><snippet>urllib2.Request</snippet></ROW><ROW><id>3253131</id><snippet>open('out.txt', 'w')
</snippet></ROW><ROW><id>3253131</id><snippet>'w'</snippet></ROW><ROW><id>3253131</id><snippet>'a'</snippet></ROW><ROW><id>3253165</id><snippet>onMethodExec</snippet></ROW><ROW><id>3253165</id><snippet>environ.get('REMOTE_ADDR')</snippet></ROW><ROW><id>3253276</id><snippet>buf.seek(0)
t = buf.read(1048576)
while t:
  fd.write(t)
  t = buf.read(1048576)
</snippet></ROW><ROW><id>3253550</id><snippet>state</snippet></ROW><ROW><id>3253550</id><snippet>state</snippet></ROW><ROW><id>3253550</id><snippet>class UserAlertStateAutomaton(FiniteStateAutomaton):
    """
    An automaton that alerts users when the state changes
    """
    users_to_alert = models.ManyToManyField(User)

    def change_state(self, new_state):
        """
        overrides the parent method to alert users that state has changed
        """
        super(UserAlertStateAutomaton, self).change_state(new_state)
        for user in self.users_to_alert:
            #do your thing
    def subscribe#... etc
</snippet></ROW><ROW><id>3253577</id><snippet>def __copy__(self):
    clone = copy.deepcopy(self)
    clone._b = some_op(clone._b)
    return clone
</snippet></ROW><ROW><id>3253577</id><snippet>deepcopy</snippet></ROW><ROW><id>3253609</id><snippet>...
char * tok;         /* delimiter tokens for strtok */
int cols;           /* number of cols to parse, from the left */

int numLines;       /* how many lines we passed for parsing */
char * line;        /* pointer to the line as a string */
char * token;       /* token parsed by strtok */

PyObject * listObj; /* the list of strings */
PyObject * strObj;  /* one string in the list */

/* the O! parses for a Python object (listObj) checked
   to be of type PyList_Type */
if (! PyArg_ParseTuple( args, "O!is", &amp;PyList_Type, &amp;listObj, 
           &amp;cols, &amp;tok )) return NULL;

/* get the number of lines passed to us */
numLines = PyList_Size(listObj);

/* should raise an error here. */
if (numLines &lt; 0)   return NULL; /* Not a list */
</snippet></ROW><ROW><id>3253609</id><snippet>/* iterate over items of the list, grabbing strings, and parsing
   for numbers */
for (i=0; i&lt;numLines; i++){

/* grab the string object from the next element of the list */
strObj = PyList_GetItem(listObj, i); /* Can't fail */

/* make it a string */
line = PyString_AsString( strObj );

/* now do the parsing */
</snippet></ROW><ROW><id>3254017</id><snippet>getattr</snippet></ROW><ROW><id>3254017</id><snippet>getattr(...)
    getattr(object, name[, default]) -&gt; value

    Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.
    When a default argument is given, it is returned when the attribute doesn't
    exist; without it, an exception is raised in that case.
</snippet></ROW><ROW><id>3254718</id><snippet>select m.name
  from brand b
  join market_brand mb on mb.fk_brand_id = b.id
  join market m on m.id = mb.fk_market_id
 where b.name = 'your_brand'
</snippet></ROW><ROW><id>3254750</id><snippet>import random

print('Username: ' + os.environ['USER'])
passwd = getpass('Password: ')
salt = ''.join(random.choice('BCDFGHJKLMNPQRSTVWXYZ') for range(4))
h = hashlib.md5()
h.update(salt)
h.update(passwd.encode())
passwd_encrypt = salt + h.hexdigest()
</snippet></ROW><ROW><id>3254750</id><snippet>passwd = getpass('Password: ')
salt = passwd_encrypt[:4]
h = hashlib.md5()
h.update(salt)
h.update(passwd.encode())
if passwd_encrypt != salt + h.hexdigest():
    raise LoginFailed()
</snippet></ROW><ROW><id>3255880</id><snippet>from scipy import array, ndimage

#              A    B    C         Y
m = array([ [.20, .54, .26],     # 0
            [.22, .54, .24],     # 1
            [.19, .56, .25],     # 2
            [.19, .58, .23],     # 3
            [.17, .62, .21] ])   # 4

inputs = array([-1, 0, 0.2, 1, 1.5, 2, 2.5, 3, 4, 8.7])
inputs[inputs &lt; 0] = 0
inputs[inputs &gt; 4] = 4

for y in inputs:
    x = ndimage.map_coordinates(m, [y * numpy.ones(3), numpy.arange(3)], order=1)
    print y, x
</snippet></ROW><ROW><id>3255880</id><snippet>&gt;&gt;&gt; 
0.0 [ 0.2   0.54  0.26]
0.0 [ 0.2   0.54  0.26]
0.2 [ 0.204  0.54   0.256]
1.0 [ 0.22  0.54  0.24]
1.5 [ 0.205  0.55   0.245]
2.0 [ 0.19  0.56  0.25]
2.5 [ 0.19  0.57  0.24]
3.0 [ 0.19  0.58  0.23]
4.0 [ 0.17  0.62  0.21]
4.0 [ 0.17  0.62  0.21]
</snippet></ROW><ROW><id>3255954</id><snippet>def get_picture(self, event, data):
    drawable = self.movie_window.window
    colormap = drawable.get_colormap()
    pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, 0, 8, *drawable.get_size())
    pixbuf = pixbuf.get_from_drawable(drawable, colormap, 0,0,0,0, *drawable.get_size())
    pixbuf.save(r'somefile.png', 'png')
    pixbuf.save(r'somefile.jpeg', 'jpeg')
</snippet></ROW><ROW><id>3255954</id><snippet>get_picture</snippet></ROW><ROW><id>3255954</id><snippet>Image</snippet></ROW><ROW><id>3255954</id><snippet>gtk.DrawingArea</snippet></ROW><ROW><id>3256399</id><snippet>.extendleft</snippet></ROW><ROW><id>3256399</id><snippet>z = collections.deque([1,2,3,4])   # [1, 2, 3, 4]

z.appendleft(['bad', 'news'])   # [ ['bad', 'news'], 1, 2, 3, 4 ]
z.extendleft(['good', 'news'])  # [ 'good', 'news', ['bad', 'news'], 1, 2, 3, 4 ]
</snippet></ROW><ROW><id>3256399</id><snippet>z.extendleft(reversed(['good', 'news']))
</snippet></ROW><ROW><id>3256610</id><snippet>import urllib2 
try:
   page = urllib2.urlopen("some url")
except urllib2.HTTPError, err:
   if err.code == 404:
       print "Page not found!"
   elif err.code == 403:
       print "Access denied!"
   else:
       print "Something happened! Error code", err.code
except urllib2.URLError, err:
    print "Some other error happened:", err.reason
</snippet></ROW><ROW><id>3256610</id><snippet>URLError</snippet></ROW><ROW><id>3257140</id><snippet>re.sub</snippet></ROW><ROW><id>3257140</id><snippet>from Tkinter import *

master = Tk()

def my_callback():
    print('Running my_callback')

b = Button(master, text="OK", command=my_callback)
b.pack()

mainloop()
</snippet></ROW><ROW><id>3257140</id><snippet>OK</snippet></ROW><ROW><id>3257140</id><snippet>from Tkinter import *
import time

master = Tk()

def my_callback():
    print('Starting my_callback')
    time.sleep(5)
    print('Ending my_callback')    

def my_callback2():
    print('Starting my_callback2')
    time.sleep(5)
    print('Ending my_callback2')    

b = Button(master, text="OK", command=my_callback)
b.pack()
b = Button(master, text="OK2", command=my_callback2)
b.pack()

mainloop()
</snippet></ROW><ROW><id>3257641</id><snippet>open(fname, 'rb')</snippet></ROW><ROW><id>3257699</id><snippet>exec(str1 + '=1')
</snippet></ROW><ROW><id>3257699</id><snippet>b=1</snippet></ROW><ROW><id>3257886</id><snippet>\r\n</snippet></ROW><ROW><id>3257886</id><snippet>\n</snippet></ROW><ROW><id>3257886</id><snippet>\n</snippet></ROW><ROW><id>3257886</id><snippet>\r</snippet></ROW><ROW><id>3257955</id><snippet>Option +ExecCGI</snippet></ROW><ROW><id>3257955</id><snippet>os.system()</snippet></ROW><ROW><id>3257957</id><snippet>is None</snippet></ROW><ROW><id>3257999</id><snippet>$ python
&gt;&gt;&gt; import scapy
&gt;&gt;&gt; print scapy.__file__
</snippet></ROW><ROW><id>3258304</id><snippet>foo</snippet></ROW><ROW><id>3258304</id><snippet>os.system("/bin/csh -i -c 'foo arg1 arg2'")
</snippet></ROW><ROW><id>3258304</id><snippet>-i</snippet></ROW><ROW><id>3258381</id><snippet>mysite/
    __init__.py
    manage.py
    settings.py
    urls.py
</snippet></ROW><ROW><id>3258387</id><snippet>IN_MODIFY</snippet></ROW><ROW><id>3258387</id><snippet>IN_CLOSE_WRITE</snippet></ROW><ROW><id>3258387</id><snippet>IN_CLOSE_WRITE</snippet></ROW><ROW><id>3258387</id><snippet># Example: loops monitoring events forever.
#
import pyinotify

# Instanciate a new WatchManager (will be used to store watches).
wm = pyinotify.WatchManager()
# Associate this WatchManager with a Notifier (will be used to report and
# process events).
notifier = pyinotify.Notifier(wm)
# Add a new watch on /tmp for ALL_EVENTS.
wm.add_watch('/tmp', pyinotify.ALL_EVENTS)
# Loop forever and handle events.
notifier.loop()
</snippet></ROW><ROW><id>3258407</id><snippet>h_size = len(h) * 4
</snippet></ROW><ROW><id>3258407</id><snippet>.zfill</snippet></ROW><ROW><id>3258407</id><snippet>h = ( bin(int(h, 16))[2:] ).zfill(h_size)
</snippet></ROW><ROW><id>3258567</id><snippet>PythonOption django.root /</snippet></ROW><ROW><id>3258596</id><snippet>&gt;&gt;&gt; s = '12345678'
&gt;&gt;&gt; t = iter(s)
&gt;&gt;&gt; '-'.join(a+b for a,b in zip(t, t))
'12-34-56-78'
</snippet></ROW><ROW><id>3258596</id><snippet>t</snippet></ROW><ROW><id>3258596</id><snippet>&gt;&gt;&gt; '-'.join(a+b for a,b in zip(s[::2], s[1::2]))
'12-34-56-78'
</snippet></ROW><ROW><id>3258596</id><snippet>-</snippet></ROW><ROW><id>3258596</id><snippet>&gt;&gt;&gt; s[::2], s[1::2]
('1357', '2468')
</snippet></ROW><ROW><id>3258596</id><snippet>zip</snippet></ROW><ROW><id>3258596</id><snippet>&gt;&gt;&gt; list( zip(s[::2], s[1::2]) )
[('1', '2'), ('3', '4'), ('5', '6'), ('7', '8')]
</snippet></ROW><ROW><id>3258596</id><snippet>&gt;&gt;&gt; [a+b for a,b in zip(s[::2], s[1::2])]
['12', '34', '56', '78']
</snippet></ROW><ROW><id>3258596</id><snippet>str.join()</snippet></ROW><ROW><id>3258596</id><snippet>&gt;&gt;&gt; '-'.join(a+b for a,b in zip(s[::2], s[1::2]))
'12-34-56-78'
</snippet></ROW><ROW><id>3258791</id><snippet>import functools
def add(x,y):
    return x + y

inc2 = functools.partial(add, 2)
print inc2(3)
</snippet></ROW><ROW><id>3258807</id><snippet>wx.ArtProvider.GetBitmap(wx.ART_ERROR, wx.ART_CMN_DIALOG)
</snippet></ROW><ROW><id>3258811</id><snippet>FlashWindowEx</snippet></ROW><ROW><id>3259211</id><snippet>a</snippet></ROW><ROW><id>3259211</id><snippet>a</snippet></ROW><ROW><id>3259211</id><snippet>seen = {}
for x in your_list:
    a,b,c,d = x
    seen.setdefault(a, []).append(x)

newlist = []
for a,x_vals in seen.iteritems():
    if len(x_vals) == 1:
        newlist.append(x_vals[0])
</snippet></ROW><ROW><id>3259365</id><snippet>if b.find(a) != -1:  # -1 will be returned when a is not in b
    do_whatever
</snippet></ROW><ROW><id>3259365</id><snippet>if b.lower().find(a.lower()) != -1:
    do_whatever
</snippet></ROW><ROW><id>3259365</id><snippet>if a in b:</snippet></ROW><ROW><id>3259592</id><snippet>if/else</snippet></ROW><ROW><id>3259592</id><snippet>yesno</snippet></ROW><ROW><id>3259592</id><snippet>x = True
y = False
z = None
</snippet></ROW><ROW><id>3259592</id><snippet>{{ x|yesno:"true","false","none" }}
{{ y|yesno:"true","false","none" }}    
{{ z|yesno:"true","false","none" }}    
</snippet></ROW><ROW><id>3259592</id><snippet>true
false
none
</snippet></ROW><ROW><id>3259924</id><snippet>your_search_query = 'super very news'

qset = Q()
for term in your_search_query.split():
    qset |= Q(name__contains=term)

matching_results = YourModel.objects.filter(qset)
</snippet></ROW><ROW><id>3259924</id><snippet>matching_result = YourModel.objects.filter(Q(name__contains='super') |
                                           Q(name__contains='very') |   
                                           Q(name__contains='news'))
</snippet></ROW><ROW><id>3259924</id><snippet> select * from your_model where name like '%super%' or name like '%very%' or name like '%news%'
</snippet></ROW><ROW><id>3259927</id><snippet>def is_match(a, b):
    aa = a.split('.')
    bb = b.split('.')
    if len(aa) != len(bb): return False
    for x, y in zip(aa, bb):
        if not (x == y or x == '*' or y == '*'): return False
    return True
</snippet></ROW><ROW><id>3259927</id><snippet>.</snippet></ROW><ROW><id>3259927</id><snippet>*</snippet></ROW><ROW><id>3259971</id><snippet>ndims = 5
N = 10

# Define bin boundaries 
binbnds = ndims*[None]
nbins = []
for idim in xrange(ndims):
    binbnds[idim] = numpy.linspace(-10.0,10.0,numpy.random.randint(2,15))
    binbnds[idim][0] = -float('inf')
    binbnds[idim][-1] = float('inf')
    nbins.append(binbnds[idim].shape[0]-1)

nstates = numpy.cumprod(nbins)[-1]

# Define variable values for N particles in ndims dimensions
p = numpy.random.normal(size=(N,ndims))

# Assign to bins along each dimension
binassign = ndims*[None]
for idim in xrange(ndims):
    binassign[idim] = numpy.digitize(p[:,idim],binbnds[idim]) - 1

binassign = numpy.array(binassign)

# multidimensional array with elements mapping from multidim to linear index
# Two different arrays for C vs F ordering
linind_C = numpy.arange(nstates).reshape(nbins,order='C')
linind_F = numpy.arange(nstates).reshape(nbins,order='F')
</snippet></ROW><ROW><id>3259971</id><snippet># Fast conversion to linear index
b_F = numpy.cumprod([1] + nbins)[:-1]
b_C = numpy.cumprod([1] + nbins[::-1])[:-1][::-1]

box_index_F = numpy.dot(b_F,binassign)
box_index_C = numpy.dot(b_C,binassign)
</snippet></ROW><ROW><id>3259971</id><snippet># Check
print 'Checking correct mapping for each particle F order'
for k in xrange(N):
    ii = box_index_F[k]
    jj = linind_F[tuple(binassign[:,k])]
    print 'particle %d %s (%d %d)' % (k,ii == jj,ii,jj)

print 'Checking correct mapping for each particle C order'
for k in xrange(N):
    ii = box_index_C[k]
    jj = linind_C[tuple(binassign[:,k])]
    print 'particle %d %s (%d %d)' % (k,ii == jj,ii,jj)
</snippet></ROW><ROW><id>3259971</id><snippet>print 'Convert C-style from linear to multi'
x = box_index_C.reshape(-1,1)
bassign_rev_C = x / b_C % nbins 

print 'Convert F-style from linear to multi'
x = box_index_F.reshape(-1,1)
bassign_rev_F = x / b_F % nbins
</snippet></ROW><ROW><id>3259971</id><snippet>print 'Check C-order'
for k in xrange(N):
    ii = tuple(binassign[:,k])
    jj = tuple(bassign_rev_C[k,:])
    print ii==jj,ii,jj

print 'Check F-order'
for k in xrange(N):
    ii = tuple(binassign[:,k])
    jj = tuple(bassign_rev_F[k,:])
    print ii==jj,ii,jj 
</snippet></ROW><ROW><id>3260070</id><snippet>if s in ('a', 'b'):
  return 1
elif s in ('c', 'd'):
  return 2
else:
  return 3
</snippet></ROW><ROW><id>3260110</id><snippet>subprocess</snippet></ROW><ROW><id>3260110</id><snippet>import subprocess

for v in range(1000):
    cmdLine = r"c:\path\to\my\app.exe"
    subprocess.Popen(subprocess)
    subprocess.Popen(r"move output.txt ./acc/output-%d.txt" % (v))
</snippet></ROW><ROW><id>3260462</id><snippet>[line for (time,line) in sorted(zip(listofTimes, listofLines))]
</snippet></ROW><ROW><id>3260462</id><snippet>def extract_time(line):
    ...
    return time
</snippet></ROW><ROW><id>3260462</id><snippet>listofLines.sort(key=extract_time)
</snippet></ROW><ROW><id>3260462</id><snippet>sorted(listofLines, key=extract_time)
</snippet></ROW><ROW><id>3260528</id><snippet>return self.changed.get(key, self.start + key*self.step)</snippet></ROW><ROW><id>3260528</id><snippet>dict.get</snippet></ROW><ROW><id>3260528</id><snippet>yourthing[foo]</snippet></ROW><ROW><id>3260528</id><snippet>yourthing[foo] = bar</snippet></ROW><ROW><id>3260528</id><snippet>s[5] = 100</snippet></ROW><ROW><id>3260528</id><snippet>value</snippet></ROW><ROW><id>3260528</id><snippet>__setitem__</snippet></ROW><ROW><id>3260643</id><snippet> import lib1, lib2, lib3, lib4, lib5
</snippet></ROW><ROW><id>3260643</id><snippet> modnames = "lib1 lib2 lib3 lib4 lib5".split()
 for lib in modnames:
     globals()[lib] = __import__(lib)
</snippet></ROW><ROW><id>3260998</id><snippet>def check_time(self):
        for game in self.games:
            if self.games[game]['state'] == 'GAME': 
                game_start_time = self.games[game]['starttime']
                if game_start_time is None:
                    continue
                elif game_start_time + 300 &gt; time.time():
                    #300 seconds = 5 minutes.
                    continue
                else:
                    self.end_game(game)
def __init__(self):
    self.timecheck = task.LoopingCall(self.check_time)
    self.timecheck.start(1)
</snippet></ROW><ROW><id>3261232</id><snippet>soup.findAll('a')
</snippet></ROW><ROW><id>3261430</id><snippet>xml.minidom.parse</snippet></ROW><ROW><id>3261430</id><snippet>parse</snippet></ROW><ROW><id>3261430</id><snippet>response = urllib2.urlopen(askfor)
doc = parse(response)
</snippet></ROW><ROW><id>3261430</id><snippet>response</snippet></ROW><ROW><id>3261430</id><snippet>parseString</snippet></ROW><ROW><id>3261430</id><snippet>minidom</snippet></ROW><ROW><id>3261430</id><snippet>the_page</snippet></ROW><ROW><id>3261430</id><snippet>url_nodes = doc.getElementsByTagName('url')
url = url_nodes[0]
print url.childNodes[0].data
</snippet></ROW><ROW><id>3261430</id><snippet>getElementsByTagName</snippet></ROW><ROW><id>3261430</id><snippet>url</snippet></ROW><ROW><id>3261668</id><snippet>begin()</snippet></ROW><ROW><id>3261668</id><snippet>commit()</snippet></ROW><ROW><id>3261668</id><snippet>rollback()</snippet></ROW><ROW><id>3261764</id><snippet>from django.db import connection #@UnusedImport
from django.db import * #@UnusedWildImport
</snippet></ROW><ROW><id>3262267</id><snippet>( (4,5) , north, 1)</snippet></ROW><ROW><id>3262267</id><snippet>north</snippet></ROW><ROW><id>3262267</id><snippet>'north'</snippet></ROW><ROW><id>3262267</id><snippet>s = problem.getSuccessors(getStartState())
</snippet></ROW><ROW><id>3262267</id><snippet>closed[s[0]] = s[1:]
</snippet></ROW><ROW><id>3262267</id><snippet>closed[s[:2]] = s[2]
</snippet></ROW><ROW><id>3262267</id><snippet>closed</snippet></ROW><ROW><id>3262878</id><snippet>unicode</snippet></ROW><ROW><id>3263083</id><snippet>roots = [(5, 6), (2, 3)]

for u, v in roots:
  if f not in closed:
    closed.add(v)
    print closed
</snippet></ROW><ROW><id>3263083</id><snippet>roots</snippet></ROW><ROW><id>3263083</id><snippet>for u, v in roots</snippet></ROW><ROW><id>3263083</id><snippet>u</snippet></ROW><ROW><id>3263083</id><snippet>v</snippet></ROW><ROW><id>3263083</id><snippet>if v is not closed</snippet></ROW><ROW><id>3263083</id><snippet>if f not in closed</snippet></ROW><ROW><id>3263083</id><snippet>closed</snippet></ROW><ROW><id>3263083</id><snippet>close.add</snippet></ROW><ROW><id>3263083</id><snippet>()</snippet></ROW><ROW><id>3263083</id><snippet>()</snippet></ROW><ROW><id>3263306</id><snippet>foo = set()</snippet></ROW><ROW><id>3263306</id><snippet>for val in someset:
    print val
</snippet></ROW><ROW><id>3263306</id><snippet>val in someset</snippet></ROW><ROW><id>3263539</id><snippet>interValRef = 0;

interValRef = setInterval("checkState();",100)

function checkState(){
    if(document.readyState == 'complete'){
        clearInterval(interValRef);
        myFunc();
    }
}
</snippet></ROW><ROW><id>3263712</id><snippet>for line in sys.stdin:
    ...
</snippet></ROW><ROW><id>3263712</id><snippet>.readline()</snippet></ROW><ROW><id>3263763</id><snippet>print</snippet></ROW><ROW><id>3263763</id><snippet>sys.stdout</snippet></ROW><ROW><id>3263763</id><snippet>print &gt;&gt; open('file.txt', 'w'), 'Hello', 'World', 2+3
</snippet></ROW><ROW><id>3263763</id><snippet>print</snippet></ROW><ROW><id>3263763</id><snippet>sys.stdout</snippet></ROW><ROW><id>3263763</id><snippet>print</snippet></ROW><ROW><id>3263763</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>3263763</id><snippet>print "something", 1/0, "other" #prints only something because 1/0 raise an Exception

print("something", 1/0, "other") #doesn't print anything. The func is not called
</snippet></ROW><ROW><id>3263871</id><snippet>DIRECT_ACCESS = re.compile(r'^/media/.*\.(js|css|png|gif|jpg)$')

...

if DIRECT_ACCESS.match(url):
    ...
</snippet></ROW><ROW><id>3264100</id><snippet>activate</snippet></ROW><ROW><id>3264100</id><snippet>activate.bat</snippet></ROW><ROW><id>3264108</id><snippet>ls -1 /usr/lib/python*/site-packages/pygame/__init__.pyc
</snippet></ROW><ROW><id>3264108</id><snippet>/usr/lib/python2.4/site-packages/pygame/__init__.pyc
/usr/lib/python2.5/site-packages/pygame/__init__.pyc
</snippet></ROW><ROW><id>3264108</id><snippet>import sys; print(sys.version)</snippet></ROW><ROW><id>3264108</id><snippet>import sys
sys.path.append('/usr/lib/python2.5/site-packages/')
import pygame
</snippet></ROW><ROW><id>3264538</id><snippet>def foo():
    a = 1
    b = 2
    c = 0
    return a * b * c

&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_CONST               1 (1)
              3 STORE_FAST               0 (a)

  3           6 LOAD_CONST               2 (2)
              9 STORE_FAST               1 (b)

  4          12 LOAD_CONST               3 (3)
             15 STORE_FAST               2 (c)

  5          18 LOAD_FAST                0 (a)
             21 LOAD_FAST                1 (b)
             24 BINARY_MULTIPLY     
             25 LOAD_FAST                2 (c)
             28 BINARY_MULTIPLY     
             29 RETURN_VALUE        
</snippet></ROW><ROW><id>3264538</id><snippet>test6</snippet></ROW><ROW><id>3264538</id><snippet>def test1():
    return 0 * 1

def test2():
    a = 1
    return 0 * a * 1

def test3():
    return 243*(5539**35)*0

def test4():
    return 0*243*(5539**35)

def test5():
    return (256**256)*0

def test6():
    return 0*(256**256)

&gt;&gt;&gt; dis.dis(test1) # 0 * 1
  2           0 LOAD_CONST               3 (0)
              3 RETURN_VALUE       

&gt;&gt;&gt; dis.dis(test2) # 0 * a * 1
  5           0 LOAD_CONST               1 (1)
              3 STORE_FAST               0 (a)

  6           6 LOAD_CONST               2 (0)
              9 LOAD_FAST                0 (a)
             12 BINARY_MULTIPLY     
             13 LOAD_CONST               1 (1)
             16 BINARY_MULTIPLY     
             17 RETURN_VALUE        

&gt;&gt;&gt; dis.dis(test3) # 243*(5539**35)*0
  9           0 LOAD_CONST               1 (243)
              3 LOAD_CONST               5 (104736434394484...681759461305771899L)
              6 BINARY_MULTIPLY     
              7 LOAD_CONST               4 (0)
             10 BINARY_MULTIPLY     
             11 RETURN_VALUE        

&gt;&gt;&gt; dis.dis(test4) # 0*243*(5539**35)
 12           0 LOAD_CONST               5 (0)
              3 LOAD_CONST               6 (104736433252667...001759461305771899L)
              6 BINARY_MULTIPLY     
              7 RETURN_VALUE        

&gt;&gt;&gt; dis.dis(test5) # (256**256)*0
 15           0 LOAD_CONST               4 (0L)
              3 RETURN_VALUE        

&gt;&gt;&gt; dis.dis(test6) # 0*(256**256)
 18           0 LOAD_CONST               1 (0)
              3 LOAD_CONST               3 (323170060713110...853611059596230656L)
              6 BINARY_MULTIPLY     
              7 RETURN_VALUE        
</snippet></ROW><ROW><id>3264674</id><snippet>from string import ascii_lowercase
from itertools import product

def letterrange(last):
    for k in range(len(last)):
        for x in product(ascii_lowercase, repeat=k+1):
            result = ''.join(x)
            yield result
            if result == last:
                return
</snippet></ROW><ROW><id>3264674</id><snippet>'a'</snippet></ROW><ROW><id>3264674</id><snippet>def letterrange(first, last):
    for k in range(len(last)):
        for x in product(ascii_lowercase, repeat=k+1):
            result = ''.join(x)
            if first:
                if first != result:
                    continue
                else:
                    first = None
            yield result
            if result == last:
                return
</snippet></ROW><ROW><id>3264892</id><snippet>"%0.2f"</snippet></ROW><ROW><id>3264892</id><snippet>for item in mylist:
    print '%0.2f' % item,
</snippet></ROW><ROW><id>3264892</id><snippet>print " ".join('%0.2f' % item for item in mylist)
</snippet></ROW><ROW><id>3265209</id><snippet>urllist = ['/myurl/%s' % the_file for the_file in mylist]
</snippet></ROW><ROW><id>3265308</id><snippet>PyModule_GetDict()</snippet></ROW><ROW><id>3265308</id><snippet>PyDict_GetItemString()</snippet></ROW><ROW><id>3265308</id><snippet>x</snippet></ROW><ROW><id>3265376</id><snippet>ModelBase</snippet></ROW><ROW><id>3265376</id><snippet>Model</snippet></ROW><ROW><id>3265376</id><snippet>Model._meta</snippet></ROW><ROW><id>3265376</id><snippet>Meta</snippet></ROW><ROW><id>3265483</id><snippet>object</snippet></ROW><ROW><id>3265483</id><snippet>__getstate__</snippet></ROW><ROW><id>3265483</id><snippet>__dict__</snippet></ROW><ROW><id>3265483</id><snippet>object</snippet></ROW><ROW><id>3265785</id><snippet>import sys
sys.path.append('PATH_TO/config')
import common
</snippet></ROW><ROW><id>3265930</id><snippet>__new__</snippet></ROW><ROW><id>3265930</id><snippet>def add_list_attributes(klass):
    def new(cls, *args, **kwargs):
        result = super(cls, cls).__new__(cls)
        for attribute in klass.list_attributes:
            setattr(result, attribute, [])
        return result
    klass.__new__ = staticmethod(new)
    return klass

@add_list_attributes
class Person(object):
    list_attributes = [
        'phone_numbers'
    ]
    def __init__(self):
        pass

p1 = Person()
p2 = Person()
p1.phone_numbers.append('01234')

print p1.phone_numbers, p2.phone_numbers
</snippet></ROW><ROW><id>3266021</id><snippet>class CachedProperty(object):
    '''
    A property that is calculated (a) lazily and (b) only once for an object.

    Usage:

        class MyObject(object):

            # ... Regular definitions here

            def _get_personality(self):
                print('Calculating personality...')
                time.sleep(5) # Time consuming process that creates personality
                return 'Nice person'

            personality = CachedProperty(_get_personality)

    '''
    def __init__(self, getter, name=None):
        '''
        Construct the cached property.

        You may optionally pass in the name that this property has in the
        class; This will save a bit of processing later.
        '''
        self.getter = getter
        self.our_name = name


    def __get__(self, obj, our_type=None):

        if obj is None:
            # We're being accessed from the class itself, not from an object
            return self

        value = self.getter(obj)

        if not self.our_name:
            if not our_type:
                our_type = type(obj)
            (self.our_name,) = (key for (key, value) in 
                                vars(our_type).iteritems()
                                if value is self)

        setattr(obj, self.our_name, value)

        return value
</snippet></ROW><ROW><id>3266205</id><snippet>for line in file:
    data = re.search('(\d+\.\d+)\|(-\d+\.\d+)\|(.*?)\|(.*?)\|(\d+:\d+\s+\w+)\sTO\s(.*?)',line)
    groups = data.groups()
    # do the magic...
</snippet></ROW><ROW><id>3266205</id><snippet>MatchObject.groups()</snippet></ROW><ROW><id>3266205</id><snippet>groups()</snippet></ROW><ROW><id>3266205</id><snippet>None</snippet></ROW><ROW><id>3266387</id><snippet>self.PopupMenu(self.tbicon.CreatePopupMenu())
</snippet></ROW><ROW><id>3266387</id><snippet>self.tbicon.PopupMenu(self.tbicon.CreatePopupMenu())
</snippet></ROW><ROW><id>3266403</id><snippet>import urllib
data = urllib.urlencode({"postField1" : "postValue1", "postField2" : "postValue2", "etc" : "etc"})
f = urllib.urlopen("http://www.domain.com/storePostData.php", data)
# At this point your storePostData.php file stores all the post 
# info in either an sql DB or temporary file so this can accessed later on and
# an uuid is passed back which we now read below. In may case I store all post        
# fields in a sql DB and each column represents each post field.
uuid = f.read()
# the uuid is the sql table id field which is auto_incremented.
# SO now we load the default browser below and send it the uuid so the php script
# can access the sql data. Once it has been accessed and the form fields have been 
# received then we delete that row as the information is useless to us now that we 
# have filled in the forms fields
import webbrowser
webbrowser.open_new("http://www.domain.com/someOtherUrl?uuid=" + uuid)
</snippet></ROW><ROW><id>3266776</id><snippet>                 'data': open('../data/media/pics/2009/05-14/100_1167.JPG'),
</snippet></ROW><ROW><id>3266776</id><snippet>.read()</snippet></ROW><ROW><id>3266790</id><snippet>tp_dict</snippet></ROW><ROW><id>3266790</id><snippet>__get__</snippet></ROW><ROW><id>3266818</id><snippet>robjects.r['mantel.rtest']</snippet></ROW><ROW><id>3266818</id><snippet>In [1]: %cpaste
Pasting code; enter '--' alone on the line to stop.
:from rpy2 import robjects
import rpy2.robjects as robjects
robjects.r('library(ade4)')
::::::--

In [3]: robjects.r['mantel.rtest']
Out[5]: &lt;RFunction - Python:0xa2aac0c / R:0xac9ec04&gt;
</snippet></ROW><ROW><id>3266818</id><snippet>In [8]: robjects.r('mantel.rtest')
Out[8]: &lt;RFunction - Python:0xaf7042c / R:0xac9ec04&gt;
</snippet></ROW><ROW><id>3266818</id><snippet>mantel.rtest</snippet></ROW><ROW><id>3266818</id><snippet>dist</snippet></ROW><ROW><id>3266818</id><snippet>M1</snippet></ROW><ROW><id>3266818</id><snippet>M2</snippet></ROW><ROW><id>3266818</id><snippet>dist</snippet></ROW><ROW><id>3266818</id><snippet>M1</snippet></ROW><ROW><id>3266818</id><snippet>M2</snippet></ROW><ROW><id>3266818</id><snippet>MOne</snippet></ROW><ROW><id>3266818</id><snippet>MTwo</snippet></ROW><ROW><id>3266818</id><snippet>dist</snippet></ROW><ROW><id>3266818</id><snippet>result = rmantel(MOne, MTwo, nrepet = 9999)
</snippet></ROW><ROW><id>3266848</id><snippet>def add_data(node, name, value):
    if '-' not in name:
        node[name] = value
    else:
        key = name[:name.index('-')]
        node_index = int(name[len(key) + 1:name.index('.')])
        node.setdefault(key, [])
        if node_index &gt;= len(node[key]):
            node[key].append({})
        add_data(node[key][node_index],
                 name[name.index('.') + 1:],
                 value)
</snippet></ROW><ROW><id>3266848</id><snippet>root_node = {}
for data in formdata:
    add_data(root_node, data['formname'], data['formvalue'])
</snippet></ROW><ROW><id>3266848</id><snippet>def add_data(node, name, value):
    # We're at a parent node (ex: paragraph-0), so we need to drill down until
    # we find a leaf node
    if '-' in name:
        key = name[:name.index('-')]
        node_index = int(name[len(key) + 1:name.index('.')])

        # Initialize the parent node if needed by giving it a dict to store it's
        # information nodes
        node.setdefault(key, [])
        if node_index &gt;= len(node[key]):
            node[key].append({})

        # Drill down the tree by calling this function again, making this
        # parent node the root
        add_data(node[key][node_index],
                 name[name.index('.') + 1:],
                 value)

    # We're at a leaf node, so just add it to the parent node's information
    # ex:  The first formdata item would make the root_node dict look like
    # { 'name': 'Roel Kramer' }
    else:
        node[name] = value
</snippet></ROW><ROW><id>3266923</id><snippet>url(r'^urlstart/(?P&lt;image_id&gt;\d*)/?$', 'urlstart', name='urlstart')
</snippet></ROW><ROW><id>3266923</id><snippet>def urlstart(request, image_id=0):
  if image_id == 0:
    image = None
  else:
    image = get_object_or_404(Image, image_id)
  next_image = image_id + 1

  return render_to_response('template.html', locals(), context_instance=RequestContext(request)
</snippet></ROW><ROW><id>3266923</id><snippet>{% if image %}
  &lt;img src={{ image.url }}&gt;
  &lt;a href="/urlstart/{{ next_image }}"&gt;Next&lt;/a&gt;
{% else %}
  Put your text here.  See first image by clicking &lt;a href="/urlstart/1"&gt;here&lt;/a&gt;
{% endif %}
</snippet></ROW><ROW><id>3267069</id><snippet>list()</snippet></ROW><ROW><id>3267069</id><snippet>tee()</snippet></ROW><ROW><id>3267069</id><snippet>tee</snippet></ROW><ROW><id>3267069</id><snippet>L = list(DictReader(...))</snippet></ROW><ROW><id>3267069</id><snippet>iter(L)</snippet></ROW><ROW><id>3267069</id><snippet>csv</snippet></ROW><ROW><id>3267069</id><snippet>.seek(0)</snippet></ROW><ROW><id>3267069</id><snippet>list</snippet></ROW><ROW><id>3267114</id><snippet>application/X-www-form-urlencoded</snippet></ROW><ROW><id>3267460</id><snippet>Customize</snippet></ROW><ROW><id>3267460</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>3267460</id><snippet>UNIX command-line tools</snippet></ROW><ROW><id>3267460</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>3267460</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin</snippet></ROW><ROW><id>3267460</id><snippet>Distutils</snippet></ROW><ROW><id>3267460</id><snippet>Distutils</snippet></ROW><ROW><id>3267460</id><snippet>easy_install</snippet></ROW><ROW><id>3267460</id><snippet>Distribute</snippet></ROW><ROW><id>3267460</id><snippet>setuptools</snippet></ROW><ROW><id>3267460</id><snippet>pip</snippet></ROW><ROW><id>3267460</id><snippet>Shell profile updater</snippet></ROW><ROW><id>3267460</id><snippet>PATH</snippet></ROW><ROW><id>3267460</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>3267460</id><snippet>python2.7</snippet></ROW><ROW><id>3267754</id><snippet>a</snippet></ROW><ROW><id>3267754</id><snippet>b</snippet></ROW><ROW><id>3267754</id><snippet>items = [1, 2]
a = convert_val(items)
b = map(convert_val, items)
</snippet></ROW><ROW><id>3267754</id><snippet>map</snippet></ROW><ROW><id>3268211</id><snippet>if resp in octopusList</snippet></ROW><ROW><id>3268273</id><snippet>for line in f</snippet></ROW><ROW><id>3268273</id><snippet># creating a list of the first two lines of each file
for f in os.listdir("../scores"):
    with open(f) as fh:
        score.append(fh.readline())
        score.append(fh.readline())
</snippet></ROW><ROW><id>3268273</id><snippet>with</snippet></ROW><ROW><id>3268273</id><snippet>fh</snippet></ROW><ROW><id>3268306</id><snippet>inputFile = (IODevice*) cD_py;
</snippet></ROW><ROW><id>3268306</id><snippet>inputFile = reinterpret_cast&lt;IODevice*&gt; (cD_py);
</snippet></ROW><ROW><id>3268306</id><snippet>inputFile = dynamic_cast&lt;IODevice*&gt; (cD_py);
</snippet></ROW><ROW><id>3268334</id><snippet>os</snippet></ROW><ROW><id>3268404</id><snippet>FastObjectListView</snippet></ROW><ROW><id>3268427</id><snippet>function</snippet></ROW><ROW><id>3268427</id><snippet>function</snippet></ROW><ROW><id>3268427</id><snippet>list</snippet></ROW><ROW><id>3268427</id><snippet># python

&gt; class FooFunc(list):
&gt;   pass
&gt; class Foo:
&gt;   foofunc = FooFunc()
&gt; f = Foo()
&gt; f.foofunc.append("bar")
&gt; f.foofunc[0]
'bar'
</snippet></ROW><ROW><id>3268630</id><snippet>cropped_buffer=pixbuf.subpixbuf(x,y,width,height)</snippet></ROW><ROW><id>3268655</id><snippet>my_set.remove((6, 7))
</snippet></ROW><ROW><id>3268655</id><snippet>remove()</snippet></ROW><ROW><id>3268798</id><snippet>process.stdin.write("4\n")    
process.stdin.flush()    
output = process.stdout.readline()    
print output
</snippet></ROW><ROW><id>3268798</id><snippet>inp = sys.stdin.readline()
integer = int(inp)
sys.stdout.write("%d\n", (integer ** 2,))
sys.stdout.flush()
</snippet></ROW><ROW><id>3268798</id><snippet>sys.stdin.readline</snippet></ROW><ROW><id>3268798</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>3268888</id><snippet>simplejson</snippet></ROW><ROW><id>3268888</id><snippet>from google.appengine.api import urlfetch</snippet></ROW><ROW><id>3268888</id><snippet>class GetEntityJSON(webapp.RequestHandler):
  def post(self):
    url = 'http://url.that.generates.the.feeds/'
    if self.request.get('idList'):
      idList = self.request.get('idList').split(',')

      try:
        asyncRequests = self._asyncFetch([url + id + '.json' for id in idList])
      except urlfetch.DownloadError:
        # Dealed with time out errors (#5) as these were very frequent

      for result in asyncRequests:
        if result.status_code == 200:
          entityJSON = simplejson.loads(result.content)
          # Filled a database entity with some json info. It goes like this:
          # entity= Entity(
          # name = entityJSON['name'],
          # dateOfBirth = entityJSON['date_of_birth']
          # ).put()

    self.redirect('/')

  def _asyncFetch(self, urlList):
    rpcs = []
    for url in urlList:
      rpc = urlfetch.create_rpc(deadline = 10)
      urlfetch.make_fetch_call(rpc, url)
      rpcs.append(rpc)
    return [rpc.get_result() for rpc in rpcs]
</snippet></ROW><ROW><id>3268909</id><snippet>'some value goes here %s' % value</snippet></ROW><ROW><id>3268909</id><snippet>result = ("%s limit 1" % sql) % table</snippet></ROW><ROW><id>3268909</id><snippet>&gt;&gt;&gt; sql = 'a value of %s'
&gt;&gt;&gt; x = 'some string %s with stuff'
&gt;&gt;&gt; y = 'VALUE'
&gt;&gt;&gt; x % sql % y
'some string a value of VALUE with stuff'
</snippet></ROW><ROW><id>3268909</id><snippet>&gt;&gt;&gt; sql = 'a value of %d'
&gt;&gt;&gt; x = 'some string %d with stuff'
&gt;&gt;&gt; y = 123    
&gt;&gt;&gt; x % sql % y
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: %d format: a number is required, not str
</snippet></ROW><ROW><id>3268909</id><snippet>%d</snippet></ROW><ROW><id>3268909</id><snippet>%</snippet></ROW><ROW><id>3269123</id><snippet>lxml</snippet></ROW><ROW><id>3269237</id><snippet>request.redirect("/test")
request.finish()
return twisted.web.server.NOT_DONE_YET
</snippet></ROW><ROW><id>3269237</id><snippet>request.finish()</snippet></ROW><ROW><id>3269237</id><snippet>def finish(self):
    import traceback #here
    """
    Indicate that all response data has been written to this L{Request}.
    """
    if self._disconnected:
        raise RuntimeError(
            "Request.finish called on a request after its connection was lost; "
            "use Request.notifyFinish to keep track of this.")
    if self.finished:
        warnings.warn("Warning! request.finish called twice.", stacklevel=2)
        traceback.print_stack() #here
        return
    #....
</snippet></ROW><ROW><id>3269237</id><snippet>render</snippet></ROW><ROW><id>3269237</id><snippet>twisted.web.server</snippet></ROW><ROW><id>3269237</id><snippet>    if body == NOT_DONE_YET:
        return
    if type(body) is not types.StringType:
        body = resource.ErrorPage(
            http.INTERNAL_SERVER_ERROR,
            "Request did not return a string",
            "Request: " + html.PRE(reflect.safe_repr(self)) + "&lt;br /&gt;" +
            "Resource: " + html.PRE(reflect.safe_repr(resrc)) + "&lt;br /&gt;" +
            "Value: " + html.PRE(reflect.safe_repr(body))).render(self)

    if self.method == "HEAD":
        if len(body) &gt; 0:
            # This is a Bad Thing (RFC 2616, 9.4)
            log.msg("Warning: HEAD request %s for resource %s is"
                    " returning a message body."
                    "  I think I'll eat it."
                    % (self, resrc))
            self.setHeader('content-length', str(len(body)))
        self.write('')
    else:
        self.setHeader('content-length', str(len(body)))
        self.write(body)
    self.finish()
</snippet></ROW><ROW><id>3269237</id><snippet>body</snippet></ROW><ROW><id>3269237</id><snippet>body</snippet></ROW><ROW><id>3269237</id><snippet>finish</snippet></ROW><ROW><id>3269237</id><snippet>self</snippet></ROW><ROW><id>3269237</id><snippet>NOT_DONE_YET</snippet></ROW><ROW><id>3269237</id><snippet>if not self.finished:
    self.finish()
</snippet></ROW><ROW><id>3269237</id><snippet>request.redirect()</snippet></ROW><ROW><id>3269237</id><snippet>request.finish()</snippet></ROW><ROW><id>3269237</id><snippet>return twisted.web.server.NOT_DONE_YET</snippet></ROW><ROW><id>3269237</id><snippet>request.write()</snippet></ROW><ROW><id>3269237</id><snippet>request.finish()</snippet></ROW><ROW><id>3269237</id><snippet>NOT_DONE_YET</snippet></ROW><ROW><id>3269237</id><snippet>render()</snippet></ROW><ROW><id>3269323</id><snippet>import codecs
try:
    f = codecs.open(filename, encoding='utf-8', errors='strict')
    for line in f:
        pass
    print "Valid utf-8"
except UnicodeDecodeError:
    print "invalid utf-8"
</snippet></ROW><ROW><id>3269756</id><snippet>import string #fixed typo was using
rot13 = string.maketrans( 
    "ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz", 
    "NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm")
string.translate("Hello World!", rot13)
# 'Uryyb Jbeyq!'
</snippet></ROW><ROW><id>3269811</id><snippet>git-hg clone ...url...</snippet></ROW><ROW><id>3269825</id><snippet>import os

os.spawnv(os.P_WAIT,"/usr/bin/wc", ("/usr/bin/wc",))
os.execv("/usr/bin/wc", ("/usr/bin/wc",))

$ cat j.py | python j.py 
       4       6     106
       0       0       0
</snippet></ROW><ROW><id>3269825</id><snippet>import os
import sys

buf = sys.stdin.read()
wc = os.popen("usr/sbin/sendmail other@place.com","w")
wc.write(buf)
wc.close()
wc = os.popen("usr/sbin/sendmail first@place.com","w")
wc.write(buf)
wc.close()
sys.exit(0)
</snippet></ROW><ROW><id>3269941</id><snippet>def get_int(request, name, default=0):
    try:
        val = int(request.GET[name])
    except (ValueError, KeyError):
        val = default
    return val
</snippet></ROW><ROW><id>3269941</id><snippet>year = get_int(request, 'year')
</snippet></ROW><ROW><id>3269959</id><snippet>DataFrame</snippet></ROW><ROW><id>3269959</id><snippet>import csv
from collections import defaultdict
from pandas import DataFrame

rdr = csv.reader(open('mat.txt'), delimiter=' ', skipinitialspace=True)
datacols = defaultdict(list)

# skip header
rdr.next()
for spec, dat, num in rdr:
    datacols['species'].append(int(spec))
    datacols['dates'].append(dat)
    datacols['data'].append(int(num))

df = DataFrame(datacols)
df2 = df.pivot(index='dates', columns='species', values='data')
</snippet></ROW><ROW><id>3269959</id><snippet>datacol</snippet></ROW><ROW><id>3269959</id><snippet>DataFrame</snippet></ROW><ROW><id>3269959</id><snippet>DataFrame</snippet></ROW><ROW><id>3269959</id><snippet>df</snippet></ROW><ROW><id>3269959</id><snippet>df</snippet></ROW><ROW><id>3269959</id><snippet>df2</snippet></ROW><ROW><id>3269959</id><snippet>In [205]: df
Out[205]:
     data           dates          species
0    3              Dec            1
1    4              Jan            2
2    6              Dec            2
3    3              Dec            2


In [206]: df2
Out[206]:
       1              2
Dec    3              3
Jan    NaN            4
</snippet></ROW><ROW><id>3269959</id><snippet>toCSV</snippet></ROW><ROW><id>3270066</id><snippet>class Foo(object):
    pass

class Bar(object):
    pass

Foo.other = Bar
Bar.other = Foo
</snippet></ROW><ROW><id>3270096</id><snippet>search</snippet></ROW><ROW><id>3270096</id><snippet>while</snippet></ROW><ROW><id>3270096</id><snippet>def dfs(problem):
   stack.push(bache)
   search(root)              
</snippet></ROW><ROW><id>3270096</id><snippet>bache</snippet></ROW><ROW><id>3270096</id><snippet>stack</snippet></ROW><ROW><id>3270096</id><snippet>root</snippet></ROW><ROW><id>3270096</id><snippet>problem</snippet></ROW><ROW><id>3270096</id><snippet>   while stack.isEmpty() != 0:
</snippet></ROW><ROW><id>3270096</id><snippet>isEmpty</snippet></ROW><ROW><id>3270096</id><snippet>stack</snippet></ROW><ROW><id>3270096</id><snippet>  def search(vertex):
     closed.add(vertex)
</snippet></ROW><ROW><id>3270096</id><snippet>closed</snippet></ROW><ROW><id>3270096</id><snippet>closed</snippet></ROW><ROW><id>3270096</id><snippet>     for index in sars:
</snippet></ROW><ROW><id>3270096</id><snippet>sars</snippet></ROW><ROW><id>3270096</id><snippet>        stack.push(index)
        return stack
</snippet></ROW><ROW><id>3270096</id><snippet>sars</snippet></ROW><ROW><id>3270180</id><snippet>tb func</snippet></ROW><ROW><id>3270180</id><snippet>c</snippet></ROW><ROW><id>3270616</id><snippet>topPos = int(someClass.get_element_pos('element'))
</snippet></ROW><ROW><id>3270616</id><snippet>...
1440 &gt;= 1500
False
1470 &gt;= 1500
False
1500 &gt;= 1500
True
</snippet></ROW><ROW><id>3270616</id><snippet>maxCounter = '1500'  # string instead of integer
</snippet></ROW><ROW><id>3270616</id><snippet>1410 &gt;= 1500
False
1440 &gt;= 1500
False
1470 &gt;= 1500
False
1500 &gt;= 1500
False
1530 &gt;= 1500
False
etc..
</snippet></ROW><ROW><id>3270887</id><snippet>while True:
    Fibonacci1 = Fibonacci1 + Fibonacci2
    if Fibonacci1 % 2 == 0:
        if a + Fibonacci1 &gt; 4000000:
            break
        a = a + Fibonacci1
    Fibonacci2 = Fibonacci1 + Fibonacci2
    if Fibonacci2 % 2 == 0:
        if a + Fibonacci2 &gt; 4000000:
            break
        a = a + Fibonacci2
</snippet></ROW><ROW><id>3270915</id><snippet>from six.moves import builtin  # works for both python 2 and 3
</snippet></ROW><ROW><id>3270996</id><snippet>[&lt;a href="/isp/SomeProvider"&gt;   Provider name &lt;/a&gt;]
</snippet></ROW><ROW><id>3270996</id><snippet>contentSoup.a
</snippet></ROW><ROW><id>3271011</id><snippet>self.actionIndex += 1 
print self.actions
if i &lt; len(self.actions): 
  return self.actions[i]     
else: 
  return Directions.STOP 
</snippet></ROW><ROW><id>3271011</id><snippet>problem = self.searchType(state) # Makes a new search problem 
self.actions  = self.searchFunction(problem) # Find a path 
</snippet></ROW><ROW><id>3271011</id><snippet>problem = self.searchType(state) # Makes a new search problem 
print problem
self.actions  = self.searchFunction(problem) # Find a path 
</snippet></ROW><ROW><id>3271125</id><snippet>models.py</snippet></ROW><ROW><id>3271125</id><snippet>class Representative(models.Model):
    parliament = models.CharField(max_length=128)
    name = models.CharField(max_length=128)
    country = models.CharField(max_length=128)
    party_group = models.CharField(max_length=128)
    national_party = models.CharField(max_length=128)
    position = models.CharField(max_length=128)
</snippet></ROW><ROW><id>3271125</id><snippet>python manage.py shell</snippet></ROW><ROW><id>3271125</id><snippet>import csv
from your_app.models import Representative
# If you're using different field names, change this list accordingly.
# The order must also match the column order in the CSV file.
fields = ['parliament', 'name', 'country', 'party_group', 'national_party', 'position']
for row in csv.reader(open('your_file.csv')):
    Representative.objects.create(**dict(zip(fields, row)))
</snippet></ROW><ROW><id>3271125</id><snippet>**dict(zip(fields,row))</snippet></ROW><ROW><id>3271125</id><snippet>fields</snippet></ROW><ROW><id>3271125</id><snippet>row</snippet></ROW><ROW><id>3271125</id><snippet>fields = ['parliament', 'name', 'country', ...]
row = ['7', 'Marta Andreasen', 'United Kingdom', ...]
</snippet></ROW><ROW><id>3271125</id><snippet>zip()</snippet></ROW><ROW><id>3271125</id><snippet>zip(['a','b,'c'], ['A','B','C'])</snippet></ROW><ROW><id>3271125</id><snippet>[('a','A'), ('b','B'), ('c','C')]</snippet></ROW><ROW><id>3271125</id><snippet>&gt;&gt;&gt; zip(fields, row)
[('parliament', '7'), ('name', 'Marta Andreasen'), ('country', 'United Kingdom'), ...]
</snippet></ROW><ROW><id>3271125</id><snippet>dict()</snippet></ROW><ROW><id>3271125</id><snippet>&gt;&gt;&gt; dict(zip(fields, row))
{'parliament': '7', 'name': 'Marta Andreasen', 'country': 'United Kingdom', ...}
</snippet></ROW><ROW><id>3271125</id><snippet>**</snippet></ROW><ROW><id>3271125</id><snippet>function(**{'key': 'value'})</snippet></ROW><ROW><id>3271125</id><snippet>function(key='value')</snippet></ROW><ROW><id>3271125</id><snippet>create(**dict(zip(field, row)))</snippet></ROW><ROW><id>3271125</id><snippet>create(parliament='7', name='Marta Andreasen', country='United Kingdom', ...)
</snippet></ROW><ROW><id>3271153</id><snippet>max_allow_packets</snippet></ROW><ROW><id>3271153</id><snippet>max_allow_packets</snippet></ROW><ROW><id>3271269</id><snippet>$ ffmpeg -i audio.wav -acodec mp3 -ab 192k audio.mp3
</snippet></ROW><ROW><id>3271485</id><snippet>if any(word in 'some one long two phrase three' for word in list_):
</snippet></ROW><ROW><id>3271663</id><snippet>gtk.TextIter.forward_to_tag_toggle()</snippet></ROW><ROW><id>3271829</id><snippet>int</snippet></ROW><ROW><id>3272005</id><snippet>repeat</snippet></ROW><ROW><id>3272005</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; s1 = set((0, 1))
&gt;&gt;&gt; set(product(s1, repeat = 3))
</snippet></ROW><ROW><id>3272005</id><snippet>product</snippet></ROW><ROW><id>3272005</id><snippet>def product(*args, **kwds):
    # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
    pools = map(tuple, args) * kwds.get('repeat', 1)
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
</snippet></ROW><ROW><id>3272116</id><snippet>str</snippet></ROW><ROW><id>3272116</id><snippet>__repr__</snippet></ROW><ROW><id>3272116</id><snippet>__str__</snippet></ROW><ROW><id>3272116</id><snippet>__repr__</snippet></ROW><ROW><id>3272139</id><snippet>FilterPanel</snippet></ROW><ROW><id>3272139</id><snippet>wx</snippet></ROW><ROW><id>3272161</id><snippet>__init__.py</snippet></ROW><ROW><id>3272161</id><snippet>_core.py</snippet></ROW><ROW><id>3272161</id><snippet>core.py</snippet></ROW><ROW><id>3272225</id><snippet>import sympy
a,b,c,d,e,f=sympy.symbols('abcdef')
e=a+b #equation 
print e.subs([(a,c),(b,d)])
# c + d
print e.subs([(a,d),(b,f)])
# d + f
</snippet></ROW><ROW><id>3272377</id><snippet>import wx

class Frame(wx.Frame):
  def __init__(self):
    wx.Frame.__init__(self, None)
    blah  = CustomWidget(self)
    self.Show(True)

class CustomWidget(wx.PyControl):
  def __init__(self, parent):
    wx.PyControl.__init__(self, parent=parent)
    text = wx.TextCtrl(parent=self)
    spin = wx.SpinButton(parent=self, style=wx.SP_VERTICAL)
    sizer = wx.GridBagSizer()
    self.layout(text, spin, sizer)
    self.OnInit(text, sizer)

  def OnInit(self, text, sizer):
    text.SetValue(u"0.000")

  def layout(self, text, spin, sizer):
    self.SetSizer(sizer)
    sizer.Add(text, pos=(0, 0), flag=wx.ALIGN_CENTER)
    sizer.Add(spin, pos=(0, 1), flag=wx.ALIGN_CENTER)
    self.Fit()
    self.Layout()
    self.CenterOnParent()

app = wx.App()
f = Frame()
app.MainLoop()
</snippet></ROW><ROW><id>3272794</id><snippet>results.filter('created &gt; ', now - datetime.timedelta(days=2))
</snippet></ROW><ROW><id>3272963</id><snippet>class A: 
     def __init__(self):
         self.mylist=[] 
</snippet></ROW><ROW><id>3272963</id><snippet>self.mylist</snippet></ROW><ROW><id>3272963</id><snippet>class B(A):
    def __init__(self):
        A.__init__(self)
</snippet></ROW><ROW><id>3272997</id><snippet>sudo port install python26 +no_tkinter py26-mysql py26-django
</snippet></ROW><ROW><id>3272997</id><snippet>python_select</snippet></ROW><ROW><id>3272997</id><snippet>/opt/local/bin/python</snippet></ROW><ROW><id>3272997</id><snippet>sudo python_select python26
</snippet></ROW><ROW><id>3272997</id><snippet>bin</snippet></ROW><ROW><id>3272997</id><snippet>bin</snippet></ROW><ROW><id>3272997</id><snippet>export PATH="/opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin:/opt/local/bin:$PATH"
</snippet></ROW><ROW><id>3273071</id><snippet>/dev/stdin</snippet></ROW><ROW><id>3273071</id><snippet>$ echo -n hi there | wc /dev/stdin
       0       2       8 /dev/stdin
</snippet></ROW><ROW><id>3273097</id><snippet>t = self.a
self.a = self.b
self.b = t+self.b
</snippet></ROW><ROW><id>3273097</id><snippet>(self.a, self,b)</snippet></ROW><ROW><id>3273097</id><snippet>(self.b, self.a+self.b)</snippet></ROW><ROW><id>3273097</id><snippet>self.a</snippet></ROW><ROW><id>3273193</id><snippet># -*- encoding: utf-8 -*-
#
# script to register Python 2.0 or later for use with win32all
# and other extensions that require Python registry settings
#
# Adapted by Ned Batchelder from a script
# written by Joakim Löw for Secret Labs AB / PythonWare
#
# source:
# http://www.pythonware.com/products/works/articles/regpy20.htm

import sys

from _winreg import *

# tweak as necessary
version = sys.version[:3]
installpath = sys.prefix

regpath = "SOFTWARE\\Python\\Pythoncore\\%s\\" % (version)
installkey = "InstallPath"
pythonkey = "PythonPath"
pythonpath = "%s;%s\\Lib\\;%s\\DLLs\\" % (
    installpath, installpath, installpath
)

def RegisterPy():
    try:
        reg = OpenKey(HKEY_LOCAL_MACHINE, regpath)
    except EnvironmentError:
        try:
            reg = CreateKey(HKEY_LOCAL_MACHINE, regpath)
        except Exception, e:
            print "*** Unable to register: %s" % e
            return

    SetValue(reg, installkey, REG_SZ, installpath)
    SetValue(reg, pythonkey, REG_SZ, pythonpath)
    CloseKey(reg)
    print "--- Python %s at %s is now registered!" % (version, installpath)

if __name__ == "__main__":
    RegisterPy()
</snippet></ROW><ROW><id>3273233</id><snippet>SELECT ?thing
WHERE {
  { 
    ?thing x:name ?name .
    FILTER regex(?name, "%s", "i" )
  } UNION {
    ?thing x:featurename ?name .
    FILTER regex(?featurename, "%s", "i" )
  }
}
</snippet></ROW><ROW><id>3273563</id><snippet># python
&gt; stack = [(4, 5), (5, 4)]
&gt; stack.pop(0)
(4,5)
&gt; stack.pop(0)
(5,4)
</snippet></ROW><ROW><id>3273563</id><snippet># python
&gt; stack=[]
&gt; stack.append( (4,5) )    
&gt; stack.append( (5,4) )
&gt; stack.pop()
(5,4)
&gt; stack.pop()
(4,5)
</snippet></ROW><ROW><id>3273851</id><snippet>db.get</snippet></ROW><ROW><id>3273851</id><snippet>{'entries': db.get(listofkeys), ...</snippet></ROW><ROW><id>3273851</id><snippet>for i in entries</snippet></ROW><ROW><id>3273893</id><snippet>C:\Python26\Lib\site-packages\nltk</snippet></ROW><ROW><id>3273893</id><snippet>sys.path</snippet></ROW><ROW><id>3273893</id><snippet>C:\Python26\Lib\site-packages</snippet></ROW><ROW><id>3273893</id><snippet>nltk</snippet></ROW><ROW><id>3273893</id><snippet>site-packages</snippet></ROW><ROW><id>3273893</id><snippet>nltk</snippet></ROW><ROW><id>3274069</id><snippet>list_patterns = [': error:', ': warning:', 'cc1plus:', 'undefine reference to']
string = 'there is an : error: and a cc1plus: in this string'
print re.findall('|'.join(list_patterns), string)
</snippet></ROW><ROW><id>3274069</id><snippet>[': error:', 'cc1plus:']
</snippet></ROW><ROW><id>3274069</id><snippet>list_patterns = [': error:', ': warning:', 'cc1plus:', 'undefine reference to']
string = 'there is an : error: and a cc1plus: in this string'
pattern = "|".join(re.escape(p) for p in list_patterns)
print re.findall(pattern, string)
</snippet></ROW><ROW><id>3274069</id><snippet>re.escape()</snippet></ROW><ROW><id>3274100</id><snippet>result.extend(item)
</snippet></ROW><ROW><id>3274163</id><snippet>totaldict = {}

for ...whatever your loop is...:
   ...
   totaldict.update(( t[0], t[1:]) for t in n )
</snippet></ROW><ROW><id>3274163</id><snippet>import collections
totaldict = collections.defaultdict(list)

for ...whatever your loop is...:
    ...
    for t in n:
        totaldict[t[0]].append(t[1:])
</snippet></ROW><ROW><id>3274222</id><snippet>xticks</snippet></ROW><ROW><id>3274222</id><snippet>nums = arange(2003, 2010)
xticks(nums, (str(n) for n in nums))
</snippet></ROW><ROW><id>3274222</id><snippet>gca().xaxis.set_major_formatter(FormatStrFormatter('%d'))
</snippet></ROW><ROW><id>3274222</id><snippet>setMajorFormatter</snippet></ROW><ROW><id>3274224</id><snippet>doRead</snippet></ROW><ROW><id>3274224</id><snippet>0</snippet></ROW><ROW><id>3274224</id><snippet>doRead</snippet></ROW><ROW><id>3274224</id><snippet>PoetrySocket</snippet></ROW><ROW><id>3274224</id><snippet>__init__</snippet></ROW><ROW><id>3274224</id><snippet>addReader</snippet></ROW><ROW><id>3274342</id><snippet>def tofloat(b16):
  sign = -1 if b16 &amp; 0x8000 else +1
  expo = ( b16 &amp; 0x7C00 ) &gt;&gt; 10
  prec = b16 &amp; 0x03FF
  if expo == 0:
    return sign * (2.0 ** -24) * prec
  elif expo == 0x1F:
    return sign * float('inf')
  prec |= 0x0400
  return sign * (2.0 ** (expo - 25)) * prec
</snippet></ROW><ROW><id>3274360</id><snippet>__init__</snippet></ROW><ROW><id>3274360</id><snippet>self._some_field = []
</snippet></ROW><ROW><id>3274360</id><snippet>@property
def some_field(self):
    return self._some_field
</snippet></ROW><ROW><id>3274360</id><snippet>self.some_field = 'bah'
</snippet></ROW><ROW><id>3274360</id><snippet>self.some_field.append('blah')
</snippet></ROW><ROW><id>3274376</id><snippet>import webbrowser
import pyinotify

class ModHandler(pyinotify.ProcessEvent):
    # evt has useful properties, including pathname
    def process_IN_CLOSE_WRITE(self, evt):
            webbrowser.open(URL)

handler = ModHandler()
wm = pyinotify.WatchManager()
notifier = pyinotify.Notifier(wm, handler)
wdd = wm.add_watch(FILE, pyinotify.IN_CLOSE_WRITE)
notifier.loop()
</snippet></ROW><ROW><id>3274502</id><snippet>MYTable.objects.filter( id__in = [42,55,65,55] )
</snippet></ROW><ROW><id>3274555</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; x = math.e
&gt;&gt;&gt; m = 2j*math.pi
&gt;&gt;&gt; (x**m)**m      # (e^(2πi))^(2πi) = 1^(2πi) = 1
(1.0000000000000016+0j)
&gt;&gt;&gt; x**(m*m)       # e^(2πi×2πi) = e^(-4π²) ≠ 1
(7.157165835186074e-18-0j)
</snippet></ROW><ROW><id>3274555</id><snippet>b</snippet></ROW><ROW><id>3274555</id><snippet>&gt;&gt;&gt; x = -2
&gt;&gt;&gt; m = 2
&gt;&gt;&gt; n = 0.5
&gt;&gt;&gt; (x**m)**n
2.0
&gt;&gt;&gt; x**(m*n)
-2.0
</snippet></ROW><ROW><id>3274555</id><snippet>&gt;&gt;&gt; from sympy import symbols 
&gt;&gt;&gt; a,b=symbols('ab', real=True, positive=True)
&gt;&gt;&gt; j=(a**b**5)**(b**10)
&gt;&gt;&gt; print j
a**(b**15)
</snippet></ROW><ROW><id>3274654</id><snippet>120:Sag, 218:Cap, 320:Aqu, 420:Pis, 521:Ari,
621:Tau, 722:Gem, 823:Can, 923:Leo, 1023:Vir
1122:Lib, 1222:Scorp, 1231: Sag
</snippet></ROW><ROW><id>3274654</id><snippet>mdd</snippet></ROW><ROW><id>3274654</id><snippet>zodiacs = [(120, 'Sag'), (218, 'Cap'), (320, 'Aqu'), (420, 'Pis'), (521, 'Ari'),
           (621, 'Tau'), (722, 'Gem'), (823, 'Can'), (923, 'Leo'), (1023, 'Vir'),
           (1122, 'Lib'), (1222, 'Scorp'), (1231, 'Sag')]
def get_zodiac_of_date(date):
    date_number = int("".join((str(date.date().month), '%02d' % date.date().day)))
    for z in zodiacs:
        if date_number &lt; z[0]:
            return z[1]
</snippet></ROW><ROW><id>3274771</id><snippet>&gt;&gt;&gt; final = {(4,5):"West", (5,6): "East"}
&gt;&gt;&gt; print final
{(4, 5): 'West', (5, 6): 'East'}
&gt;&gt;&gt; final[(4,5)]
'West'
</snippet></ROW><ROW><id>3274771</id><snippet>final.get((4,5))</snippet></ROW><ROW><id>3274771</id><snippet>final</snippet></ROW><ROW><id>3274771</id><snippet>KeyError</snippet></ROW><ROW><id>3274771</id><snippet>&gt;&gt;&gt; final[(7,8)]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: (7, 8)
</snippet></ROW><ROW><id>3274771</id><snippet>try:
    final[(7,8)]
except KeyError:
    print "Key not in dict."
</snippet></ROW><ROW><id>3274771</id><snippet>final.get((7,8), &lt;default value&gt;)</snippet></ROW><ROW><id>3274771</id><snippet>&lt;default value&gt;</snippet></ROW><ROW><id>3274771</id><snippet>None</snippet></ROW><ROW><id>3275077</id><snippet>any([])</snippet></ROW><ROW><id>3275077</id><snippet>all([])</snippet></ROW><ROW><id>3275077</id><snippet>all([])</snippet></ROW><ROW><id>3275260</id><snippet>libcurl</snippet></ROW><ROW><id>3275327</id><snippet>setup(console=['__main__.py'], options={"py2exe":{"includes":["sip"]}})
</snippet></ROW><ROW><id>3275327</id><snippet>setup(windows=['__main__.py'], options={"py2exe":{"includes":["sip"]}})
</snippet></ROW><ROW><id>3275379</id><snippet>offset</snippet></ROW><ROW><id>3275379</id><snippet>import re
s = "The quick, brown fox jumps over the lazy dog."

print re.search(r'(?:\w+\W*){0}((?:\w+\W*){3})', s).group(1)
# The quick, brown 
print re.search(r'(?:\w+\W*){1}((?:\w+\W*){3})', s).group(1)
# quick, brown fox      
print re.search(r'(?:\w+\W*){2}((?:\w+\W*){3})', s).group(1)
# brown fox jumps 
</snippet></ROW><ROW><id>3275379</id><snippet> _"word"_      _"word"_
/        \    /        \
(?:\w+\W*){2}((?:\w+\W*){3})
             \_____________/
                group 1
</snippet></ROW><ROW><id>3275379</id><snippet>2</snippet></ROW><ROW><id>3275379</id><snippet>3</snippet></ROW><ROW><id>3275379</id><snippet>(?:...)</snippet></ROW><ROW><id>3275379</id><snippet>\w+\W*</snippet></ROW><ROW><id>3275379</id><snippet>import re
s = "nothing"
print re.search(r'(\w+\W*){3}', s).group()
# nothing
</snippet></ROW><ROW><id>3275379</id><snippet>\W*</snippet></ROW><ROW><id>3275379</id><snippet>\w+(?:\W+|$)
</snippet></ROW><ROW><id>3275379</id><snippet>\w+</snippet></ROW><ROW><id>3275379</id><snippet>\W+</snippet></ROW><ROW><id>3275379</id><snippet>$</snippet></ROW><ROW><id>3275379</id><snippet>findall</snippet></ROW><ROW><id>3275379</id><snippet>import re
s = "The quick, brown fox jumps over the lazy dog."

triplets = re.findall(r"\b(?=((?:\w+(?:\W+|$)){3}))", s)

print triplets
# ['The quick, brown ', 'quick, brown fox ', 'brown fox jumps ',
#  'fox jumps over ', 'jumps over the ', 'over the lazy ', 'the lazy dog.']

print triplets[3]
# fox jumps over 
</snippet></ROW><ROW><id>3275379</id><snippet>\b</snippet></ROW><ROW><id>3275379</id><snippet>    ______lookahead______
   /      ___"word"__    \
  /      /           \    \
\b(?=((?:\w+(?:\W+|$)){3}))
     \___________________/
           group 1
</snippet></ROW><ROW><id>3275944</id><snippet>reactor.listenTCP</snippet></ROW><ROW><id>3275944</id><snippet>reactor.connectTCP</snippet></ROW><ROW><id>3275944</id><snippet>from twisted.internet import protocol, reactor
from twisted.protocols import basic

class SomeServerProtocol(basic.LineReceiver):
    def lineReceived(self, line):
        host, port = line.split()
        port = int(port)
        factory = protocol.ClientFactory()
        factory.protocol = SomeClientProtocol
        reactor.connectTCP(host, port, factory)

class SomeClientProtocol(basic.LineReceiver):
    def connectionMade(self):
        self.sendLine("Hello!")
        self.transport.loseConnection()

def main():
    import sys
    from twisted.python import log

    log.startLogging(sys.stdout)
    factory = protocol.ServerFactory()
    factory.protocol = SomeServerProtocol
    reactor.listenTCP(12345, factory)
    reactor.run()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3276119</id><snippet>class LinksParser(HTMLParser.HTMLParser):
  def __init__(self):
    HTMLParser.HTMLParser.__init__(self)
    self.recording = 0
    self.data = []

  def handle_starttag(self, tag, attributes):
    if tag != 'div':
      return
    if self.recording:
      self.recording += 1
      return
    for name, value in attributes:
      if name == 'id' and value == 'remository':
        break
    else:
      return
    self.recording = 1

  def handle_endtag(self, tag):
    if tag == 'div' and self.recording:
      self.recording -= 1

  def handle_data(self, data):
    if self.recording:
      self.data.append(data)
</snippet></ROW><ROW><id>3276119</id><snippet>self.recording</snippet></ROW><ROW><id>3276119</id><snippet>div</snippet></ROW><ROW><id>3276119</id><snippet>self.data</snippet></ROW><ROW><id>3276119</id><snippet>self.data</snippet></ROW><ROW><id>3276119</id><snippet>'div'</snippet></ROW><ROW><id>3276119</id><snippet>'id'</snippet></ROW><ROW><id>3276119</id><snippet>'remository'</snippet></ROW><ROW><id>3276119</id><snippet>self.tag</snippet></ROW><ROW><id>3276119</id><snippet>self.attname</snippet></ROW><ROW><id>3276119</id><snippet>self.attvalue</snippet></ROW><ROW><id>3276119</id><snippet>__init__</snippet></ROW><ROW><id>3276190</id><snippet>match = re.search(r'\d{4}-\d{2}-\d{2}', text)
date = datetime.strptime('%Y-%m-%d').date()
</snippet></ROW><ROW><id>3276205</id><snippet>Action</snippet></ROW><ROW><id>3276205</id><snippet>class ListAction(argparse.Action):
    def __call__(parser, namespace, values, option_string=None):
        setattr(namespace, 'list', values[0])
        do_something_completely_different()
</snippet></ROW><ROW><id>3276554</id><snippet>proc_open()</snippet></ROW><ROW><id>3276554</id><snippet>exec()</snippet></ROW><ROW><id>3276554</id><snippet>shell_exec()</snippet></ROW><ROW><id>3276554</id><snippet>$_ENV</snippet></ROW><ROW><id>3276554</id><snippet>$process = proc_open(
    "{$command}",
    array(            
     array('pipe', 'r'),
     array('pipe', 'w'),
     array('pipe', 'w')
    ),
    $pipes,
    NULL,
    $_ENV
);

if(is_resource($process)){

    fwrite($pipes[0], $string);
    fclose($pipes[0]);

    $rt = stream_get_contents($pipes[1]);
    fclose($pipes[1]);

    $rtErr = stream_get_contents($pipes[2]);
    fclose($pipes[2]);

    $exitCode = proc_close($process);

}
</snippet></ROW><ROW><id>3276679</id><snippet>@href</snippet></ROW><ROW><id>3276679</id><snippet>a</snippet></ROW><ROW><id>3276679</id><snippet>//a[text()='bigdog']/@href
</snippet></ROW><ROW><id>3276817</id><snippet>Key.from_path</snippet></ROW><ROW><id>3276817</id><snippet>k = Key.from_path('User', 'Boris', 'Address', 9876)</snippet></ROW><ROW><id>3276817</id><snippet>kind=User&amp;name=Boris</snippet></ROW><ROW><id>3276817</id><snippet>kind=Address&amp;name=9876</snippet></ROW><ROW><id>3276823</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>3276823</id><snippet>def describe_builtin(obj):
   """ Describe a builtin function """

   wi('+Built-in Function: %s' % obj.__name__)
   # Built-in functions cannot be inspected by
   # inspect.getargspec. We have to try and parse
   # the __doc__ attribute of the function.
   docstr = obj.__doc__
   args = ''

   if docstr:
      items = docstr.split('\n')
      if items:
         func_descr = items[0]
         s = func_descr.replace(obj.__name__,'')
         idx1 = s.find('(')
         idx2 = s.find(')',idx1)
         if idx1 != -1 and idx2 != -1 and (idx2&gt;idx1+1):
            args = s[idx1+1:idx2]
            wi('\t-Method Arguments:', args)

   if args=='':
      wi('\t-Method Arguments: None')

   print
</snippet></ROW><ROW><id>3276941</id><snippet>LIKE</snippet></ROW><ROW><id>3276941</id><snippet>SELECT * FROM table WHERE name LIKE '%smith%';
</snippet></ROW><ROW><id>3276941</id><snippet>SOUNDEX()</snippet></ROW><ROW><id>3277137</id><snippet>fabfile.py</snippet></ROW><ROW><id>3277137</id><snippet>env.user = "your_username"
env.key_filename = ["/path/to/keyfile"]
</snippet></ROW><ROW><id>3277215</id><snippet>def add(n):
    yield n
    for m in add(n+1):
        yield m
</snippet></ROW><ROW><id>3277215</id><snippet>def resolve(db, goals, cut_parent=0):
    try:
        head, tail = goals[0], goals[1:]
    except IndexError:
        yield {}
        return
    try:
        predicate = (
            deepcopy(clause)
                for clause in db[head.name]
                    if len(clause) == len(head)
        )
    except KeyError:
        return
    trail = []
    for clause in predicate:
        try:
            unify(head, clause, trail)
            for each in resolve(db, clause.body, cut_parent + 1):
                for each in resolve(db, tail, cut_parent):
                    yield head.subst
        except UnificationFailed:
            continue
        except Cut, cut:
            if cut.parent == cut_parent:
                raise
            break
        finally:
            restore(trail)
    else:
        if is_cut(head):
            raise Cut(cut_parent)

...

for substitutions in resolve(db, query):
    print substitutions
</snippet></ROW><ROW><id>3277235</id><snippet>l = (('AA', 1.11), ('BB', 2.22), ('CC', 3.33))
ls = [('XX', 7.77), ('YY', 8.88), ('ZZ', 9.99)]

for x,y in zip(l,ls):
    print(list(x+y))

# ['AA', 1.1100000000000001, 'XX', 7.7699999999999996]
# ['BB', 2.2200000000000002, 'YY', 8.8800000000000008]
# ['CC', 3.3300000000000001, 'ZZ', 9.9900000000000002]
</snippet></ROW><ROW><id>3277253</id><snippet>{% for i in geo %}
  &lt;p&gt;&lt;a href="{{ i.0 }}"&gt;{{ i.0 }}&lt;/a&gt;&lt;/p&gt;
{% endfor%}
</snippet></ROW><ROW><id>3277336</id><snippet>property</snippet></ROW><ROW><id>3277336</id><snippet>__get__</snippet></ROW><ROW><id>3277336</id><snippet>def classproperty_getter_only(f):
    class NonDataDescriptor(object):
        def __get__(self, instance, icls):
            return f(icls)
    return NonDataDescriptor()

class Foo(object):

    @classproperty_getter_only
    def flup(cls):
        return 'hello from', cls

print Foo.flup
print Foo().flup
</snippet></ROW><ROW><id>3277336</id><snippet>('hello from', &lt;class '__main__.Foo'&gt;)
('hello from', &lt;class '__main__.Foo'&gt;)
</snippet></ROW><ROW><id>3277407</id><snippet>First.__init__</snippet></ROW><ROW><id>3277407</id><snippet>__init__</snippet></ROW><ROW><id>3277407</id><snippet>class Third(First, Second):
    ...
</snippet></ROW><ROW><id>3277407</id><snippet>class First(object):
    def __init__(self):
        print "first"

class Second(First):
    def __init__(self):
        print "second"

class Third(First):
    def __init__(self):
        print "third"

class Fourth(Second, Third):
    def __init__(self):
        super(Fourth, self).__init__()
        print "that's it"
</snippet></ROW><ROW><id>3277407</id><snippet>class First(object):
    def __init__(self):
        print "first"

class Second(First):
    def __init__(self):
        print "second"

class Third(First, Second):
    def __init__(self):
        print "third"
</snippet></ROW><ROW><id>3277527</id><snippet>$ python
Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41)
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; l=[]
&gt;&gt;&gt; l.append("honda")
&gt;&gt;&gt; l.append("ford")
&gt;&gt;&gt; l
['honda', 'ford']
&gt;&gt;&gt; l[0]
'honda'
&gt;&gt;&gt; l.pop(0)
'honda'
&gt;&gt;&gt; l.pop(0)
'ford'
&gt;&gt;&gt; l.pop(0)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: pop from empty list
</snippet></ROW><ROW><id>3277527</id><snippet>results = []
foreach p1 in [list of people]
    foreach p2 in [list of people]
        next if p1 == p2
        next if p1.state == p2.state
        next unless p1.car == p2.car
        foreach c1 in p1.colors
            foreach c2 in p2.colors
                results.append((p1,p2)) if c1 == c2
</snippet></ROW><ROW><id>3277527</id><snippet>[(person1, person2),
(person2, person1)]</snippet></ROW><ROW><id>3277527</id><snippet>results = []
for i=0; i&lt;people.last_index-1; i++
    for j=i+1; j&lt;people.last_index ; j++
        p1 = people[i] ; p2 = people[j]
        next if p1.state == p2.state
        next unless p1.car == p2.car
        foreach c1 in p1.colors
            foreach c2 in p2.colors
                results.append((p1,p2)) if c1 == c2
</snippet></ROW><ROW><id>3277527</id><snippet>next if p1 == p2</snippet></ROW><ROW><id>3277527</id><snippet>i == j</snippet></ROW><ROW><id>3277527</id><snippet>j</snippet></ROW><ROW><id>3277527</id><snippet>i+1</snippet></ROW><ROW><id>3277889</id><snippet>from pylons import url
from pylons.controllers.util import redirect

# ...
redirect(url(controller='formtest', action='result'))
</snippet></ROW><ROW><id>3278005</id><snippet>python</snippet></ROW><ROW><id>3278005</id><snippet>python</snippet></ROW><ROW><id>3278005</id><snippet>which python</snippet></ROW><ROW><id>3278005</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>3278005</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>3278005</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>3278005</id><snippet>#!</snippet></ROW><ROW><id>3278005</id><snippet>chmod 755 &lt;filename&gt;</snippet></ROW><ROW><id>3278005</id><snippet>chmod 533 &lt;filename&gt;</snippet></ROW><ROW><id>3278005</id><snippet>./&lt;filename&gt;</snippet></ROW><ROW><id>3278005</id><snippet>/path/to/filename</snippet></ROW><ROW><id>3278104</id><snippet>__getattr__</snippet></ROW><ROW><id>3278104</id><snippet>__getattribute__</snippet></ROW><ROW><id>3278104</id><snippet>__getattr__</snippet></ROW><ROW><id>3278104</id><snippet>__getattribute__</snippet></ROW><ROW><id>3278104</id><snippet>object</snippet></ROW><ROW><id>3278104</id><snippet>__getattr__</snippet></ROW><ROW><id>3278104</id><snippet>__getattribute__</snippet></ROW><ROW><id>3278104</id><snippet>__getattr__</snippet></ROW><ROW><id>3278178</id><snippet>import math
def f_of_x(op):
    return eval("lambda x:" + op, math.__dict__)
</snippet></ROW><ROW><id>3278178</id><snippet>[]</snippet></ROW><ROW><id>3278178</id><snippet>()</snippet></ROW><ROW><id>3278178</id><snippet>2x</snippet></ROW><ROW><id>3278278</id><snippet>if choose_a == 1: the_dict=dict_a
elif choose_b == 1: the_dict=dict_b

for x,y in the_dict.iteritems():
    # do stuff with x and y.
</snippet></ROW><ROW><id>3278340</id><snippet>import numpy as np

a = np.array([1,2,3])
b = np.array([None, a, a, a])[1:]

print b.dtype, b[0].dtype, b[1].dtype
# object int32 int32
</snippet></ROW><ROW><id>3278489</id><snippet>    x, y = self.textView.get_pointer()
    x, y = self.textView.window_to_buffer_coords(gtk.TEXT_WINDOW_WIDGET, x, y)
    if self.textView.get_iter_at_location(x, y).has_tag(self.errTag):
        # Code here
</snippet></ROW><ROW><id>3278575</id><snippet>source_node.children</snippet></ROW><ROW><id>3278575</id><snippet>source_node</snippet></ROW><ROW><id>3278575</id><snippet>==</snippet></ROW><ROW><id>3278575</id><snippet>is</snippet></ROW><ROW><id>3278575</id><snippet>graph[source_node]</snippet></ROW><ROW><id>3278575</id><snippet>def allpaths(source_node, sink_node):
    if source_node == sink_node: # Handle trivial case
        return frozenset([(source_node,)])
    else:
        result = set()
        for new_source in source_node.children:
            paths = allpaths(new_source, sink_node, memo_dict)
            for path in paths:
                path = (source_node,) + path
                result.add(path)
        result = frozenset(result)
        return result
</snippet></ROW><ROW><id>3278575</id><snippet>def allpaths(source_node, sink_node, memo_dict = None):
    if memo_dict is None:
        # putting {}, or any other mutable object
        # as the default argument is wrong 
        memo_dict = dict()

    if source_node == sink_node: # Don't memoize trivial case
        return frozenset([(source_node,)])
    else:
        pair = (source_node, sink_node)
        if pair in memo_dict: # Is answer memoized already?
            return memo_dict[pair]
        else:
            result = set()
            for new_source in source_node.children:
                paths = allpaths(new_source, sink_node, memo_dict)
                for path in paths:
                    path = (source_node,) + path
                    result.add(path)
            result = frozenset(result)
            # Memoize answer
            memo_dict[(source_node, sink_node)] = result
            return result
</snippet></ROW><ROW><id>3278898</id><snippet>txt = open("file.txt").read()
</snippet></ROW><ROW><id>3278910</id><snippet>in</snippet></ROW><ROW><id>3278910</id><snippet>has_key</snippet></ROW><ROW><id>3278910</id><snippet>&gt;&gt;&gt; timeit.timeit('f = {(1,2) : "Foo"}; f.has_key((1,2))')
0.27945899963378906
&gt;&gt;&gt; timeit.timeit('f = {(1,2) : "Foo"}; (1,2) in f')
0.22165989875793457
</snippet></ROW><ROW><id>3279015</id><snippet>.date()</snippet></ROW><ROW><id>3279015</id><snippet>if item_date.date() &gt; from_date:
</snippet></ROW><ROW><id>3279015</id><snippet>datetime.today()</snippet></ROW><ROW><id>3279015</id><snippet>date.today()</snippet></ROW><ROW><id>3279015</id><snippet>from_date = from_date.replace(hour=0, minute=0, second=0, microsecond=0)
</snippet></ROW><ROW><id>3279025</id><snippet>__getitem__()</snippet></ROW><ROW><id>3279025</id><snippet>__getattr__()</snippet></ROW><ROW><id>3279025</id><snippet>def get_value(some_thing, some_key):
    if type(some_thing) in ('dict','tuple','list'):
        return some_thing[some_key]
    else:
        return getattr(some_thing, some_key)
</snippet></ROW><ROW><id>3279025</id><snippet>def get_value(some_thing, some_key):
    if type(some_thing) in (dict,tuple,list):
        return some_thing[some_key]
    else:
        return getattr(some_thing, some_key)
</snippet></ROW><ROW><id>3279124</id><snippet>reduce()</snippet></ROW><ROW><id>3279124</id><snippet>from functools import reduce
reduce(getattr, "X.Y.Z".split('.'), doc)
</snippet></ROW><ROW><id>3279855</id><snippet>&gt;&gt;&gt; 'åéîøü'.encode('utf16')
b'\xff\xfe\xe5\x00\xe9\x00\xee\x00\xf8\x00\xfc\x00'
</snippet></ROW><ROW><id>3279855</id><snippet>'utf_16_be'</snippet></ROW><ROW><id>3279855</id><snippet>'utf_16_le'</snippet></ROW><ROW><id>3279855</id><snippet>binascii.hexlify</snippet></ROW><ROW><id>3279855</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.hexlify('åéîøü'.encode('utf16'))
b'fffee500e900ee00f800fc00'
</snippet></ROW><ROW><id>3280011</id><snippet>re.M</snippet></ROW><ROW><id>3280011</id><snippet>import re

data = '&lt;your input data as above&gt;' # or open('data.txt').read()
results = map(lambda m: (m[0], m[1].strip().splitlines()),
    re.findall('^([^\n]+):\n((?:[^\n]+\n)*)\n', data, re.M))

for dirname, files in results:
    f = open(dirname.replace('/', '')+'.txt', 'w')
    for line in files:
        f.write(line + '\n')
    f.close()
</snippet></ROW><ROW><id>3280220</id><snippet>from collections import Counter
from itertools import chain
def sortPairList2(data):
    tally = Counter(chain(*map(set, data)))
    data.sort(key=lambda x: sorted(tally[i] for i in x))
</snippet></ROW><ROW><id>3280220</id><snippet>lambda</snippet></ROW><ROW><id>3280220</id><snippet>&gt;&gt;&gt; c = 4
&gt;&gt;&gt; a = lambda p: p - c
&gt;&gt;&gt; a(7)
3
</snippet></ROW><ROW><id>3280220</id><snippet>list</snippet></ROW><ROW><id>3280220</id><snippet>count</snippet></ROW><ROW><id>3280220</id><snippet>count = [0] * n</snippet></ROW><ROW><id>3280220</id><snippet>maxcount</snippet></ROW><ROW><id>3280220</id><snippet>max</snippet></ROW><ROW><id>3280220</id><snippet>maxcount = max(count)</snippet></ROW><ROW><id>3280270</id><snippet>class DeleteQueueItem(db.Model):
    """Model to keep track of items that will be deleted via task queue."""

    # URL path to the blog post is handled as key_name
    delete_when = db.DateTimeProperty()

    @classmethod
    def new(cls, key_name):
        delay = 120  # Seconds
        t = datetime.timedelta(seconds=delay)
        deadline = datetime.datetime.now() - t

        return cls(key_name=key_name, delete_when=deadline)

    def put(self, **kwargs):
      def _tx():
        taskqueue.add(url='/admin/task/delete_page', 
                      countdown=delay,
                      params={'path': key_name},
                      transactional=True)
        return super(DeleteQueueItem, self).put(**kwargs)
      if not self.is_saved():
        return db.run_in_transaction(_tx)
      else:
        return super(DeleteQueueItem, self).put(**kwargs)
</snippet></ROW><ROW><id>3280409</id><snippet>from itertools import izip

def areFilesIdentical(filename1, filename2):
    with open(filename1, "rtU") as a:
        with open(filename2, "rtU") as b:
            # Note that "all" and "izip" are lazy
            # (will stop at the first line that's not identical)
            return all(myprint() and lineA == lineB
                       for lineA, lineB in izip(a.xreadlines(), b.xreadlines()))
</snippet></ROW><ROW><id>3280732</id><snippet>_r</snippet></ROW><ROW><id>3281229</id><snippet>&lt;? 
$otto = "/usr/etc/init.d/otto2 "; 

if( $_GET["action"] ) { 
    $ret = shell_exec( $otto.$_GET["action"] ); 
    //Check your ret value  
} 
else { 
    ?&gt; 
    &lt;a href="&lt;?=$PHP_SELF?&gt;?action=start"&gt;Start  &lt;/a&gt; 
    &lt;a href="&lt;?=$PHP_SELF?&gt;?action=stop"&gt;Stop  &lt;/a&gt; 
    &lt;? 
} 

?&gt;
</snippet></ROW><ROW><id>3281251</id><snippet>__file__</snippet></ROW><ROW><id>3281251</id><snippet>import os, time
print time.ctime(os.path.getmtime(__file__))
</snippet></ROW><ROW><id>3281405</id><snippet>def setup_1():
    print('1')

def setup_2():
    print('2')

def setup_3():
    print('3')

if __name__ == '__main__':    
    for func in (val for key,val in vars().items()
                 if key.startswith('setup_')):
        func()
</snippet></ROW><ROW><id>3281405</id><snippet># 1
# 3
# 2
</snippet></ROW><ROW><id>3281569</id><snippet>!=</snippet></ROW><ROW><id>3281569</id><snippet>is not</snippet></ROW><ROW><id>3281844</id><snippet>INSERT</snippet></ROW><ROW><id>3281844</id><snippet>WHERE</snippet></ROW><ROW><id>3281844</id><snippet>LABEL</snippet></ROW><ROW><id>3281844</id><snippet>INSERT OR FAIL</snippet></ROW><ROW><id>3281863</id><snippet>from datetime import date
d = date.today()
print d.format("%B %d")
</snippet></ROW><ROW><id>3281863</id><snippet>from babel.dates import dateformat
format_date(d, format="long", locale="en_US")
</snippet></ROW><ROW><id>3281863</id><snippet>babel.dates.get_date_format("long", locale="en_US").pattern</snippet></ROW><ROW><id>3281863</id><snippet>format</snippet></ROW><ROW><id>3281922</id><snippet>&gt;&gt;&gt; l = [4, 5, 12, 0, 3, 7]
&gt;&gt;&gt; min(x for x in l if x &gt; 5)
7
</snippet></ROW><ROW><id>3282691</id><snippet>''.join(chr(int(x)) for x in oldString)
</snippet></ROW><ROW><id>3282691</id><snippet>chr</snippet></ROW><ROW><id>3282691</id><snippet>ord</snippet></ROW><ROW><id>3282829</id><snippet>read</snippet></ROW><ROW><id>3282829</id><snippet>while read page section rest
do
    echo "Page: $page"
    echo "Section: $section"
done &lt; inputfile
</snippet></ROW><ROW><id>3282829</id><snippet>while read -a fields
do
    wget --quiet --no-proxy "www.cs.sun.ac.za/hons/${fields[0]}" -O html.tmp
    unset "fields[0]"
    ./DokuWikiHtml2Latex.py html.tmp "${fields[@]}"
done &lt; inputfile
</snippet></ROW><ROW><id>3282904</id><snippet>min(d, key=d.get)</snippet></ROW><ROW><id>3282904</id><snippet>lambda</snippet></ROW><ROW><id>3282948</id><snippet>for i in range(0, len(the_string), 2):
    print(the_string[i:i+2])
</snippet></ROW><ROW><id>3282952</id><snippet>import csv

trials = ['trial134', 'trial1', 'trial56']
data = csv.reader(open('completedataset.txt'))

with open('smalldataset.txt','w') as outf:
    csv.writer(outf).writerows(l for l in data if l[0] in trials)
</snippet></ROW><ROW><id>3283137</id><snippet>factor</snippet></ROW><ROW><id>3283137</id><snippet>def factor(n, _memo={1: []}):
    """returns a list of the prime factors of integer n"""
    if n &lt;= 0: raise ValueError("Can't factor %r" % n)
    localmemo = {}
    orgn = n
    p = primes.generator()  # yields an infinite iterable
    for x in p:
        if n in _memo:
            for k in localmemo:
                localmemo[k].extend(_memo[n])
            _memo.update(localmemo)
            return _memo[orgn]
        localmemo[n] = []
        if n % x == 0:
            n = n/x
            for k in localmemo:
                localmemo[k].append(x)
            p.send(x)  # get `x` again next time
</snippet></ROW><ROW><id>3283137</id><snippet>send</snippet></ROW><ROW><id>3283137</id><snippet>next</snippet></ROW><ROW><id>3283137</id><snippet>for</snippet></ROW><ROW><id>3283137</id><snippet>x</snippet></ROW><ROW><id>3283137</id><snippet>gmpy</snippet></ROW><ROW><id>3283137</id><snippet>def factor(n, _memo={1: []}):
    """returns a list of the prime factors of integer n

       n must be &gt; 0 (otherwise, raises ValueError).

       uses a stream of primes in increasing order generated
       by `primes.generator()` (q.v.).

       do **not** pass argument _memo, it's used for memoization
       (holding the list of factors for all ints that have already
        been factorized by this function in this process's past).
    """
    # get error cases out of the way first
    if n &lt;= 0: raise ValueError("Can't factor %r" % n)
    # localmemo records all numbers which are being factorized
    # for the first time in this specific call to `factor`, each
    # with a list of corresponding factors found so far
    localmemo = {}
    # keep a copy of the original n since in the loop below n
    # gets decreased
    orgn = n
    p = primes.generator()  # yields an infinite iterable
    # look at each prime (the .send call below may cause a prime
    # to be looked at more than once since it's assumed to work
    # as a "push back" for this specific generator)
    for x in p:
        if n in _memo:  # we've factorized n already in the past
            # (or n is 1, which is always a key in _memo!)
            # so we're all done, mop up
            # every list of factors in localmemo gets all n's factors
            for k in localmemo:
                localmemo[k].extend(_memo[n])
            # add every localmemo list to _memo for future calls
            _memo.update(localmemo)
            # now orgn is in _memo (as it was in localmemo if it had
            # not already been in _memo it's been added) so we can just
            # index to get the corresponding list of factors
            return _memo[orgn]
        # start with an empty list since we don't know n's factors yet
        localmemo[n] = []
        if n % x == 0:  # x is a factor of n, so of everything we're factoring
            n = n/x
            for k in localmemo:
                localmemo[k].append(x)  # ...so add it to every entry in localmemo
            p.send(x)  # get `x` again next time (it might be a multiple factor!)
</snippet></ROW><ROW><id>3283137</id><snippet>def withpushback(aniterator):
  pushback = None
  while True:
    if pushback is not None:  # last client action was `send`
      to_yield = pushback
      while pushback is not None:
        pushback = yield to_yield  # iterate until a `next`!
    else:                     # last client action was `next`
      try: to_yield = next(aniterator)
      except StopIteration: break
    pushback = yield to_yield

# an example use...:
w = withpushback(iter(range(7)))
repetitions = {2: 3, 5: 2}
for p in w:
  print p,
  if repetitions.get(p):
    w.send(p)
    repetitions[p] -= 1
print
</snippet></ROW><ROW><id>3283137</id><snippet>0 1 2 2 2 2 3 4 5 5 5 6</snippet></ROW><ROW><id>3283137</id><snippet>2</snippet></ROW><ROW><id>3283137</id><snippet>5</snippet></ROW><ROW><id>3283137</id><snippet>repetitions</snippet></ROW><ROW><id>3283137</id><snippet>next</snippet></ROW><ROW><id>3283137</id><snippet>send</snippet></ROW><ROW><id>3283137</id><snippet>send</snippet></ROW><ROW><id>3283229</id><snippet>if d &gt; datetime.now():
    d = datetime(d.year - 100, d.month, d.day)
</snippet></ROW><ROW><id>3283326</id><snippet> __file__
</snippet></ROW><ROW><id>3283326</id><snippet>os.path.abspath(__file__) 
</snippet></ROW><ROW><id>3283362</id><snippet>            start=+portion
</snippet></ROW><ROW><id>3283362</id><snippet>            start += portion
</snippet></ROW><ROW><id>3283362</id><snippet>self.client</snippet></ROW><ROW><id>3283362</id><snippet>YieldID</snippet></ROW><ROW><id>3283362</id><snippet>append</snippet></ROW><ROW><id>3283362</id><snippet>insert</snippet></ROW><ROW><id>3283362</id><snippet>insert</snippet></ROW><ROW><id>3283362</id><snippet>append</snippet></ROW><ROW><id>3283362</id><snippet>def append(self, objects):
    """
    Append the specified child based on whether it is an
    element or an attrbuite.
    @param objects: A (single|collection) of attribute(s) or element(s)
        to be added as children.
    @type objects: (L{Element}|L{Attribute})
    @return: self
    @rtype: L{Element}
    """
    if not isinstance(objects, (list, tuple)):
        objects = (objects,)
    for child in objects:
        if isinstance(child, Element):
            self.children.append(child)
            child.parent = self
            continue
        if isinstance(child, Attribute):
            self.attributes.append(child)
            child.parent = self
            continue
        raise Exception('append %s not-valid' % child.__class__.__name__)
    return self
</snippet></ROW><ROW><id>3283362</id><snippet>append</snippet></ROW><ROW><id>3283362</id><snippet>insert</snippet></ROW><ROW><id>3283362</id><snippet>insert</snippet></ROW><ROW><id>3283362</id><snippet>def insert(self, objects, index=0): // line 337
    # ... snip to line 348
    objects = (objects,)
</snippet></ROW><ROW><id>3283362</id><snippet>append</snippet></ROW><ROW><id>3283362</id><snippet>    if not isinstance(objects, (list, tuple)):
        objects = (objects,)
</snippet></ROW><ROW><id>3283362</id><snippet>append</snippet></ROW><ROW><id>3283495</id><snippet>type</snippet></ROW><ROW><id>3283495</id><snippet>&gt;&gt;&gt; type('abc')
&lt;class 'str'&gt;
&gt;&gt;&gt; type = None
&gt;&gt;&gt; type('abc')
Traceback (most recent call last):
  File "&lt;pyshell#62&gt;", line 1, in &lt;module&gt;
    type('abc')
TypeError: 'NoneType' object is not callable
</snippet></ROW><ROW><id>3283570</id><snippet>__metaclass__ = type</snippet></ROW><ROW><id>3283570</id><snippet>(object)</snippet></ROW><ROW><id>3283570</id><snippet>class</snippet></ROW><ROW><id>3283570</id><snippet>  def parsers(self):
    for afile in self.files:
        with open(afile, "rb") as fh:
            yield FileParser(fh)
</snippet></ROW><ROW><id>3283570</id><snippet>afile</snippet></ROW><ROW><id>3283570</id><snippet>file</snippet></ROW><ROW><id>3284069</id><snippet>&gt;&gt;&gt; bytes.fromhex('4a4b4c').decode('utf-8')
'JKL'
</snippet></ROW><ROW><id>3284128</id><snippet>klass.__name__</snippet></ROW><ROW><id>3284128</id><snippet>klass.__module__+'.'+klass.__name__</snippet></ROW><ROW><id>3284148</id><snippet>import glob
for filename in glob.glob(r"C:\script\test\*.dat"):
    with open(filename, 'rb') as inputfile:
        data = inputfile.read()
    with open(filename, 'wb') as outputfile:
        outputfile.write(data.replace("^", "|"))
</snippet></ROW><ROW><id>3284256</id><snippet>easy_install &lt;package_name&gt;</snippet></ROW><ROW><id>3284256</id><snippet>python setup.py install</snippet></ROW><ROW><id>3284466</id><snippet>usage: xmlearn [-h] [-i INFILE] [-p PATH] {graph,dump,tags} ...

optional arguments:
  -h, --help            show this help message and exit
  -i INFILE, --infile INFILE
                        The XML file to learn about. Defaults to stdin.
  -p PATH, --path PATH  An XPath to be applied to various actions.
                        Defaults to the root node.

subcommands:
  {graph,dump,tags}
    dump                Dump xml data according to a set of rules.
    tags                Show information about tags.
    graph               Build a graph from the XML tags relationships.
</snippet></ROW><ROW><id>3284803</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile(r'(\w+(\W+\w+)?)(\W+with\b|\Z)')
&gt;&gt;&gt; r.search('bar baz baf bag').group(1)
'baf bag'
&gt;&gt;&gt; r.search('bar baz baf with bag').group(1)
'baz baf'
&gt;&gt;&gt; r.search('bar baz baf without bag').group(1)
'without bag'
&gt;&gt;&gt; r.search('bar with bag').group(1)
'bar'
&gt;&gt;&gt; r.search('bar with baz baf with bag').group(1)
'bar'
</snippet></ROW><ROW><id>3285358</id><snippet>if __FILE__ == $0
    tell_the_truth()
end
</snippet></ROW><ROW><id>3285410</id><snippet>__slots__</snippet></ROW><ROW><id>3285410</id><snippet>&gt;&gt;&gt; class A(object):
...    x = 42
...    y = 43
... 
&gt;&gt;&gt; class B(A):
...    x = 11
... 
&gt;&gt;&gt; b = B()
</snippet></ROW><ROW><id>3285410</id><snippet>&gt;&gt;&gt; 'x' in b.__class__.__dict__
True
&gt;&gt;&gt; 'y' in b.__class__.__dict__
False
</snippet></ROW><ROW><id>3285410</id><snippet># comment explaining why this unusual check is necessary
if 'attribute' in instance.__class__.__dict__:
    value = instance.attribute
else:
    value = None
</snippet></ROW><ROW><id>3285453</id><snippet>class MyForm(forms.Form):
    # You can change the queryset in the __init__ method, but this should be a nice basis
    timeslots = forms.ModelMultipleChoiceFieldqueryset=Timeslot.objects.all(), widget=forms.CheckboxSelectMultiple)

    def save(self):
        # make sure you do a form.is_valid() before trying to save()
        for timeslot in self.cleaned_data['timeslots']:
            timeslot.delete()
</snippet></ROW><ROW><id>3285480</id><snippet>&gt;&gt;&gt; b'\x81'.decode('cp1252')
Traceback (most recent call last):
  ...
UnicodeDecodeError: 'charmap' codec can't decode byte 0x81 in position 0: character maps to &lt;undefined&gt;
</snippet></ROW><ROW><id>3285480</id><snippet>&gt;&gt;&gt; open('test.txt', 'wb').write(b'\x81\n')
2
&gt;&gt;&gt; open('test.txt').read()
Traceback (most recent call last):
  ...
UnicodeDecodeError: 'utf8' codec can't decode byte 0x81 in position 0: unexpected code byte
</snippet></ROW><ROW><id>3285480</id><snippet>encoding</snippet></ROW><ROW><id>3285480</id><snippet>&gt;&gt;&gt; open('test.txt', encoding='latin-1').read()
'\x81\n'
</snippet></ROW><ROW><id>3285637</id><snippet>codecs.open</snippet></ROW><ROW><id>3285637</id><snippet>write</snippet></ROW><ROW><id>3285637</id><snippet>csv.DictWriter</snippet></ROW><ROW><id>3285637</id><snippet>f</snippet></ROW><ROW><id>3285637</id><snippet>f = open("test.csv", 'wb')</snippet></ROW><ROW><id>3285637</id><snippet>codecs</snippet></ROW><ROW><id>3285967</id><snippet>from twisted.internet import wxreactor
from twisted.internet.protocol import DatagramProtocol

wxreactor.install()

class MyProtocol(DatagramProtocol):
    def datagramReceived(self, data, (host, port)):
        print "received %r from %s:%d" % (data, host, port)
        self.transport.write(data, (host, port))

# &lt;GUI code&gt;
# to start listening do port = reactor.listenUDP(&lt;port&gt;, MyProtocol())
# to stop do self.transport.stopListening() in MyProtocol
# or port.stopListening() from outside

from twisted.internet import reactor
reactor.registerWxApp(app)
reactor.run()
</snippet></ROW><ROW><id>3286173</id><snippet>getattr()</snippet></ROW><ROW><id>3286173</id><snippet>obj = myobject()
i = 7
date7 = getattr(obj, 'date%d' % i) # same as obj.date7
</snippet></ROW><ROW><id>3286173</id><snippet>foo</snippet></ROW><ROW><id>3286173</id><snippet>getattr()</snippet></ROW><ROW><id>3286173</id><snippet>foo.py:
  class Class1: pass
  class Class2: pass
  [ etc ]


bar.py:
  import foo
  i = 3
  someClass = getattr(foo, "Class%d" % i) # Same as someClass = foo.Class3
  obj = someClass() # someClass is a pointer to foo.Class3
  # short version:
  obj = getattr(foo, "Class%d" % i)()
</snippet></ROW><ROW><id>3286315</id><snippet>super</snippet></ROW><ROW><id>3286315</id><snippet>Exception</snippet></ROW><ROW><id>3286315</id><snippet>msg</snippet></ROW><ROW><id>3286315</id><snippet>class CustomFooError(Exception):

    def __init__(self, msg=None):
        if msg is None:
            msg = 'Something went wrong with Foo.'
        super(CustomFooError, self).__init__(msg)
</snippet></ROW><ROW><id>3286841</id><snippet>import simplejson

from sqlobject import *

# Replace this with the URI for your actual database
connection = connectionForURI('sqlite:/:memory:')
sqlhub.processConnection = connection

# This defines the columns for your database table. See SQLObject docs for how it
# does its conversions for class attributes &lt;-&gt; database columns (underscores to camel
# case, generally)

class Song(SQLObject):

    name = StringCol()
    artist = StringCol()
    album = StringCol()

# Create fake data for demo - this is not needed for the real thing
def MakeFakeDB():
    Song.createTable()
    s1 = Song(name="B Song",
              artist="Artist1",
              album="Album1")
    s2 = Song(name="A Song",
              artist="Artist2",
              album="Album2")

def Main():
    # This is an iterable, not a list
    all_songs = Song.select().orderBy(Song.q.name)

    songs_as_dict = []

    for song in all_songs:
        song_as_dict = {
            'name' : song.name,
            'artist' : song.artist,
            'album' : song.album}
        songs_as_dict.append(song_as_dict)

    print simplejson.dumps(songs_as_dict)


if __name__ == "__main__":
    MakeFakeDB()
    Main()
</snippet></ROW><ROW><id>3286940</id><snippet>from Commands import *
</snippet></ROW><ROW><id>3286940</id><snippet>__init__.py</snippet></ROW><ROW><id>3286969</id><snippet>[a-zA-Z0-9+_\-\.\ ]*[ ]*&lt;?[a-zA-Z0-9+_\-\.]+@[0-9a-zA-Z][.-0-9a-zA-Z]*.[a-zA-Z]+&gt;?
</snippet></ROW><ROW><id>3287013</id><snippet>start_date = datetime.date(2005, 8, 9)
end_date = datetime.date(2005, 8, 11)
Model.objects.filter(name__icontains="hello").filter(date__range(start_date,end_date))
</snippet></ROW><ROW><id>3287063</id><snippet>python</snippet></ROW><ROW><id>3287063</id><snippet>/home/my/virtual/bin/python /home/my/project/manage.py command arg
</snippet></ROW><ROW><id>3287063</id><snippet>cd /home/my/project &amp;&amp; /home/my/virtual/bin/python ...
</snippet></ROW><ROW><id>3287063</id><snippet>cd /home/my/project &amp;&amp; /home/my/virtual/bin/python /home/my/project/manage.py &gt; /tmp/cronlog.txt 2&gt;&amp;1
</snippet></ROW><ROW><id>3287063</id><snippet>manage.py</snippet></ROW><ROW><id>3287063</id><snippet>#!/home/my/virtual/bin/python
</snippet></ROW><ROW><id>3287201</id><snippet>readlines()</snippet></ROW><ROW><id>3287201</id><snippet>f = open('your-file.dat')
yourList = f.readlines()
</snippet></ROW><ROW><id>3287201</id><snippet>yourList = [line.rstrip('\n') for line in f]
</snippet></ROW><ROW><id>3287201</id><snippet>yourDict = dict(zip(xrange(1, len(yourList)+1), yourList))
</snippet></ROW><ROW><id>3287634</id><snippet>return math.cos((a * math.pi) / 180)
</snippet></ROW><ROW><id>3288009</id><snippet>class MyUserChangeForm(UserChangeForm):

  def __init__(self, *args, **kwargs):
    super(MyUserChangeForm, self).__init__(*args, **kwargs)
    self.fields.pop('username')

  class Meta(UserChangeForm.Meta):
    fields = ('first_name', 'last_name', 'email')
</snippet></ROW><ROW><id>3288050</id><snippet>&lt;B1-Motion&gt;</snippet></ROW><ROW><id>3288050</id><snippet>&lt;B2-Motion&gt;</snippet></ROW><ROW><id>3288050</id><snippet>&lt;Button-1&gt;</snippet></ROW><ROW><id>3288050</id><snippet>&lt;B1-Release&gt;</snippet></ROW><ROW><id>3288270</id><snippet>int1, int2 = tuple
</snippet></ROW><ROW><id>3288395</id><snippet>ImageNtHeader</snippet></ROW><ROW><id>3288506</id><snippet>lambda</snippet></ROW><ROW><id>3288801</id><snippet>_ordering</snippet></ROW><ROW><id>3288801</id><snippet>class MyOrderedField(int):
  creation_counter = 0

  def __init__(self, val):
    # Set the instance's counter, to keep track of ordering
    self.creation_counter = MyOrderedField.creation_counter
    # Increment the class's counter for future instances
    MyOrderedField.creation_counter += 1
</snippet></ROW><ROW><id>3288801</id><snippet>ordered_items</snippet></ROW><ROW><id>3288801</id><snippet>class BaseWithOrderedFields(type):
  """ Metaclass, which provides an attribute "ordered_fields", being an ordered
      list of class attributes that have a "creation_counter" attribute. """

  def __new__(cls, name, bases, attrs):
    new_class = super(BaseWithOrderedFields, cls).__new__(cls, name, bases, attrs)
    # Add an attribute to access ordered, orderable fields
    new_class._ordered_items = [(name, attrs.pop(name)) for name, obj in attrs.items()
                                    if hasattr(obj, "creation_counter")]
    new_class._ordered_items.sort(key=lambda item: item[1].creation_counter)
    return new_class
</snippet></ROW><ROW><id>3288801</id><snippet>MyOrderedField</snippet></ROW><ROW><id>3288801</id><snippet>class Ordered(object):
  __metaclass__ = BaseWithOrderedFields

  x = MyOrderedField(0)
  z = MyOrderedField(0)
  b = MyOrderedField(0)
  a = MyOrderedField(0)
</snippet></ROW><ROW><id>3288801</id><snippet>ordered_fields</snippet></ROW><ROW><id>3288801</id><snippet>&gt;&gt;&gt; ordered = Ordered()
&gt;&gt;&gt; ordered.ordered_fields
[('x', 0), ('z', 0), ('b', 0), ('a', 0)]
</snippet></ROW><ROW><id>3288801</id><snippet>__metaclass__</snippet></ROW><ROW><id>3288954</id><snippet>{% with %}</snippet></ROW><ROW><id>3289356</id><snippet>print '\n%s %s' % (row[0].strftime('%Y-%m-%d'), row[1])
</snippet></ROW><ROW><id>3289391</id><snippet>import Tkinter

class App:
    def __init__(self, root):
        f = Tkinter.Frame(width=100, height=100, background="bisque")
        f.pack(padx=100, pady=100)
        f.bind("&lt;1&gt;", self.OnMouseDown)

    def OnMouseDown(self, event):
        print "frame coordinates: %s/%s" % (event.x, event.y)
        print "root coordinates: %s/%s" % (event.x_root, event.y_root)

root=Tkinter.Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>3289606</id><snippet>None</snippet></ROW><ROW><id>3289606</id><snippet>is</snippet></ROW><ROW><id>3289606</id><snippet>if foo is None:
    ...
</snippet></ROW><ROW><id>3289832</id><snippet>newlist = oldlist</snippet></ROW><ROW><id>3289832</id><snippet>newlist = oldlist[:]</snippet></ROW><ROW><id>3289925</id><snippet>version</snippet></ROW><ROW><id>3289925</id><snippet>"Version"</snippet></ROW><ROW><id>3289925</id><snippet>class Info(object):
    @property
    def version(self):
        return 3
    def __getitem__(self,key):
        if hasattr(self,key.lower()):
            return getattr(self,key.lower())
</snippet></ROW><ROW><id>3289925</id><snippet>def attrcls(cls):
    cls._attrdict={}
    for methodname in cls.__dict__:
        method=cls.__dict__[methodname]
        if hasattr(method,'_attr'):
            cls._attrdict[getattr(method,'_attr')]=methodname
    return cls

def attr(key):
    def wrapper(func):
        class Property(object):
            def __get__(self,inst,instcls):
                return func(inst)
            def __init__(self):
                self._attr=key
        return Property()
    return wrapper

@attrcls
class Info(object):
    @attr("Version")
    def version(self):
        return 3
    def __getitem__(self,key):
        if key in self._attrdict:
            return getattr(self,self._attrdict[key])
</snippet></ROW><ROW><id>3290267</id><snippet>time.strptime()</snippet></ROW><ROW><id>3290267</id><snippet>str()</snippet></ROW><ROW><id>3290267</id><snippet>&gt;&gt;&gt; e1['Image DateTime']
(0x0132) ASCII=2007:09:06 06:37:51 @ 176
&gt;&gt;&gt; str(e1['Image DateTime'])
'2007:09:06 06:37:51'
&gt;&gt;&gt; 
&gt;&gt;&gt; tag = time.strptime(str(e1['Image DateTime']),"%Y:%m:%d %H:%M:%S")
&gt;&gt;&gt; tag
time.struct_time(tm_year=2007, tm_mon=9, tm_mday=6, tm_hour=6, tm_min=37, tm_sec=51,tm_wday=3, tm_yday=249, tm_isdst=-1)
&gt;&gt;&gt; time.strftime("%Y-%m-%d %H:%M:%S", tag)
'2007-09-06 06:37:51'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3290359</id><snippet>import time

while 1:
    where = file.tell()
    line = file.readline()
    if not line:
        time.sleep(1)
        file.seek(where)
    else:
        print line, # already has newline
</snippet></ROW><ROW><id>3290669</id><snippet>import sys
import trace

# create a Trace object, telling it what to ignore, and whether to
# do tracing or line-counting or both.
tracer = trace.Trace(
    ignoredirs=[sys.prefix, sys.exec_prefix],
    trace=0,
    count=1)

# run the new command using the given tracer
tracer.run('main()')

# make a report, placing output in /tmp
r = tracer.results()
r.write_results(show_missing=True, coverdir="/tmp")
</snippet></ROW><ROW><id>3290882</id><snippet>with file("test.xml") as temp:
    temp.write(doc.toprettyxml())
    temp.flush()
    command = ["./cval", "-o", options.output, "-i", str(options.interval), "-s", "%dx%d" %    (options.width, options.height), "-f", str(options.frames), "-x", temp.name]
    subprocess.call(command)
</snippet></ROW><ROW><id>3291014</id><snippet>class B():
    def __init__(self, someA):
        self.parent = someA
    def C(self):
        self.parent.d()

class A(object):
   def __init__(self):
       self.b = B(self)
   def d(self):
      print "Hi"
</snippet></ROW><ROW><id>3291220</id><snippet>            elif self.path.endswith(".css"):
                 f = open(curdir+sep+self.path)
                 self.send_response(200)
                 self.send_header('Content-type', 'text/css')
                 self.end_headers()
                 self.wfile.write(f.read())
                 f.close()
                 return
</snippet></ROW><ROW><id>3291220</id><snippet>import os
from mimetypes import types_map
class MyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
       try:
            if self.path == "/":
                 self.path = "/index.html"
            if self.path == "favico.ico":
                 return
            fname,ext = os.path.splitext(self.path)
            if ext in (".html", ".css"):
                 with open(os.path.join(curdir,self.path)) as f:
                     self.send_response(200)
                     self.send_header('Content-type', types_map[ext])
                     self.end_headers()
                     self.wfile.write(f.read())
            return
        except IOError:
            self.send_error(404)
</snippet></ROW><ROW><id>3291415</id><snippet>__import__</snippet></ROW><ROW><id>3291415</id><snippet>fromlist</snippet></ROW><ROW><id>3291415</id><snippet>&gt;&gt;&gt; __import__("os.path")
&lt;module 'os' from '/usr/lib/python2.6/os.pyc'&gt;
&gt;&gt;&gt; __import__("os.path", fromlist=["os"])
&lt;module 'posixpath' from '/usr/lib/python2.6/posixpath.pyc'&gt;
</snippet></ROW><ROW><id>3291508</id><snippet>{% for each_model in model %}
    #Do Something with model
    {{each_model.name}}
{% endfor %}
</snippet></ROW><ROW><id>3291937</id><snippet>json</snippet></ROW><ROW><id>3291937</id><snippet>simplejson</snippet></ROW><ROW><id>3291937</id><snippet>try:
    import json
except ImportError:
    import simplejson as json
</snippet></ROW><ROW><id>3292046</id><snippet>System.IO.Path.GetPathRoot(path);</snippet></ROW><ROW><id>3292046</id><snippet>System.IO.Path.GetPathRoot("C:\\Foo\\Bar.xml") // Equals C:\\
</snippet></ROW><ROW><id>3292046</id><snippet>basename</snippet></ROW><ROW><id>3292046</id><snippet>System.IO.Path.GetDirectoryName(path)</snippet></ROW><ROW><id>3292046</id><snippet>GetDirectoryName</snippet></ROW><ROW><id>3292046</id><snippet>public void EquivalentSplit(string path, out string head, out string tail)
{

    // Get the directory separation character (i.e. '\').
    string separator = System.IO.Path.DirectorySeparatorChar.ToString();

    // Trim any separators at the end of the path
    string lastCharacter = path.Substring(path.Length - 1);
    if (separator == lastCharacter)
    {
        path = path.Substring(0, path.Length - 1);
    }

    int lastSeparatorIndex = path.LastIndexOf(separator);

    head = path.Substring(0, lastSeparatorIndex);
    tail = path.Substring(lastSeparatorIndex + separator.Length,
        path.Length - lastSeparatorIndex - separator.Length);

}
</snippet></ROW><ROW><id>3292519</id><snippet>['NAMETHEFIRST,' 'NAMEANOTHERNAME ']
</snippet></ROW><ROW><id>3292519</id><snippet>['NAMETHEFIRST', 'NAMEANOTHERNAME ']
</snippet></ROW><ROW><id>3292538</id><snippet>for payload_index in data_dictionary:
    if payload_index != 3:
        assembled_packet.append(data_dictionary[payload_index])
</snippet></ROW><ROW><id>3292538</id><snippet>assembled_packet = [data_dictionary[index] for index in data_dictionary if index != 3]
</snippet></ROW><ROW><id>3292538</id><snippet>&gt;&gt;&gt; d = {1:'blue',2:'green',3:'red',4:'orange',5:'purple',6:'mauve'}
&gt;&gt;&gt; d.pop(3)
'red'
&gt;&gt;&gt; list(d.values())        # in py3k; in python-2.x d.values() would do
['blue', 'green', 'orange', 'purple', 'mauve']
</snippet></ROW><ROW><id>3292538</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>3292703</id><snippet>&gt;&gt;&gt; l = [(1,2), (3,4)]
&gt;&gt;&gt; str(l).strip('[]')
'(1, 2), (3, 4)'
</snippet></ROW><ROW><id>3292757</id><snippet>def _get_id(self):
   return self._id

def _set_id(self, newid):
   self._id = newid
</snippet></ROW><ROW><id>3292757</id><snippet>id = property(_get_id, _set_id)
</snippet></ROW><ROW><id>3292757</id><snippet>property</snippet></ROW><ROW><id>3292757</id><snippet>@property
def id(self):
    return self._id

@id.setter
def id(self, newid):
    self._id = newid
</snippet></ROW><ROW><id>3292757</id><snippet>set_id</snippet></ROW><ROW><id>3292757</id><snippet>id.setter</snippet></ROW><ROW><id>3293042</id><snippet>regexitem</snippet></ROW><ROW><id>3293042</id><snippet>char</snippet></ROW><ROW><id>3293042</id><snippet>char</snippet></ROW><ROW><id>3293042</id><snippet>class regexItem(Structure):
    _fields_ = [("regex", c_char_p),
                ("groups", POINTER(c_char_p)),
                ("groupsize", c_int),
                ]
</snippet></ROW><ROW><id>3293042</id><snippet>_fields_</snippet></ROW><ROW><id>3293042</id><snippet>regex1Groups = (c_char_p * 5)("a", "b", "x", "s", None)
regex2Groups = (c_char_p * 2)("l", None)
</snippet></ROW><ROW><id>3293042</id><snippet>regexitem</snippet></ROW><ROW><id>3293042</id><snippet>regex = (regexItem * 2)(("bla", regex1Groups, 4),
                        ("bla2", regex2Groups, 1))
</snippet></ROW><ROW><id>3293042</id><snippet>ctypes</snippet></ROW><ROW><id>3293262</id><snippet>dbus</snippet></ROW><ROW><id>3293262</id><snippet>print dbus.__file__</snippet></ROW><ROW><id>3293262</id><snippet>dbus.py</snippet></ROW><ROW><id>3293457</id><snippet>class Volunteer(models.Model):
    def __unicode__(self):
        return self.fname + self.lname
    fname = models.CharField(max_length=200)
    lname = models.CharField(max_length=200)
    bio = models.TextField(max_length=400)
    number = models.CharField(max_length=15)
    email = modesl.CharField(max_length=255)
</snippet></ROW><ROW><id>3293457</id><snippet>def volunteer_create(request):
    if request.method == 'POST'and request.POST['fname'] and request.POST['lname'] and request.POST['email'] (ETC...):
        v = Volunteer()
        v.fname = request.POST['fname']
        v.fname = request.POST['lname']
        v.fname = request.POST['email']
        v.fname = request.POST['number']
        ...
        v.save()
        return HttpResponse("Thank you!")    #success!
    else
        return HttpResponseRedirect("/volunteer_form/") #take them back to the form to fill out missed info
</snippet></ROW><ROW><id>3293717</id><snippet>[COEFF, SCORE]= princomp(zscore(X));

x=SCORE(1:2:end,1);
y=SCORE(1:2:end,2);
z=SCORE(1:2:end,3);
u=SCORE(2:2:end,1);
v=SCORE(2:2:end,2);
w=SCORE(2:2:end,3);

quiver3(x,y,z,u-x,v-y,w-z,0);
</snippet></ROW><ROW><id>3293748</id><snippet>&gt;&gt;min([3, 2, 4, 1])
1
</snippet></ROW><ROW><id>3293824</id><snippet>shell(paste("python", shQuote("C:\\Documents and Settings\\USER\\Desktop\\UGA New Website\\metrics_get.py")))
</snippet></ROW><ROW><id>3293996</id><snippet>pickle</snippet></ROW><ROW><id>3294052</id><snippet>tarfile.TarFile.extractfile</snippet></ROW><ROW><id>3294052</id><snippet>tarfile.open</snippet></ROW><ROW><id>3294052</id><snippet>fileobj</snippet></ROW><ROW><id>3294052</id><snippet>$ cat bar/baz.txt     
This is bar/baz.txt.
$ tar cvfz bar.tgz bar
bar/
bar/baz.txt
$ tar cvfz baz.tgz bar.tgz
bar.tgz
</snippet></ROW><ROW><id>3294052</id><snippet>&gt;&gt;&gt; import tarfile
&gt;&gt;&gt; baz = tarfile.open('baz.tgz')
&gt;&gt;&gt; bar = tarfile.open(fileobj=baz.extractfile('bar.tgz'))
&gt;&gt;&gt; bar.extractfile('bar/baz.txt').read()
'This is bar/baz.txt.\n'
</snippet></ROW><ROW><id>3294899</id><snippet>for key in d:</snippet></ROW><ROW><id>3294899</id><snippet>for key, value in d.iteritems():</snippet></ROW><ROW><id>3294899</id><snippet>key</snippet></ROW><ROW><id>3294899</id><snippet>poop</snippet></ROW><ROW><id>3294899</id><snippet>iteritems()</snippet></ROW><ROW><id>3294899</id><snippet>items()</snippet></ROW><ROW><id>3294899</id><snippet>iteritems()</snippet></ROW><ROW><id>3294899</id><snippet>items()</snippet></ROW><ROW><id>3294899</id><snippet>(key, value)</snippet></ROW><ROW><id>3295463</id><snippet># root is your root window
root.protocol('WM_DELETE_WINDOW', doSomething)

def doSomething():
    # check if saving
    # if not:
    root.destroy()
</snippet></ROW><ROW><id>3295579</id><snippet>self.canvas.show()</snippet></ROW><ROW><id>3295579</id><snippet>self.canvas.show() # insert this line
self.canvas.get_tk_widget().update_idletasks()
</snippet></ROW><ROW><id>3295770</id><snippet>~/bin</snippet></ROW><ROW><id>3295770</id><snippet>~/bin</snippet></ROW><ROW><id>3295770</id><snippet>$PATH</snippet></ROW><ROW><id>3295770</id><snippet>~/lib/python</snippet></ROW><ROW><id>3295770</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>3295770</id><snippet>% python setup.py install --home $HOME
</snippet></ROW><ROW><id>3295770</id><snippet>bzr+ssh</snippet></ROW><ROW><id>3295770</id><snippet>bzr+ssh</snippet></ROW><ROW><id>3295846</id><snippet>f = ReviewForm(stats)
</snippet></ROW><ROW><id>3295853</id><snippet>factorial(0) = 1
factorial(1) = 1
factorial(2) = 2
factorial(3) = 6
factorial(4) = 24
</snippet></ROW><ROW><id>3295853</id><snippet>def factorial(x):
    if x == 0:            # this is our base case
        return 1          # and this is what we do when we see it
    else:                 # this is what we do with all other numbers
        return x * factorial(x-1)
</snippet></ROW><ROW><id>3295853</id><snippet>function:
    if base case: 
        this
    else: 
        something + function(something closer to the base case)
</snippet></ROW><ROW><id>3295933</id><snippet>projects/
templates/
common/
local/
</snippet></ROW><ROW><id>3296052</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; sqlite3.sqlite_version
'3.6.12'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3296058</id><snippet>for...elseifbreak</snippet></ROW><ROW><id>3296058</id><snippet>for n in range(15): 
    if n == 100:
        print(n)  
        break
</snippet></ROW><ROW><id>3296058</id><snippet>break</snippet></ROW><ROW><id>3296058</id><snippet>print(n)</snippet></ROW><ROW><id>3296168</id><snippet>" If the previous line ended with a colon, indent relative to
" statement start.
if pline =~ ':\s*$'
</snippet></ROW><ROW><id>3296168</id><snippet>" If the previous line ended with a colon, indent relative to
" statement start.
if pline =~ ':\s*\(#.*\)\?$'
</snippet></ROW><ROW><id>3296782</id><snippet>{'a': 23, 'A': 45}</snippet></ROW><ROW><id>3296782</id><snippet>set</snippet></ROW><ROW><id>3296782</id><snippet>theset = set(k.lower() for k in thedict)
</snippet></ROW><ROW><id>3296782</id><snippet>{k.lower() for k in thedict}</snippet></ROW><ROW><id>3296782</id><snippet>if k.lower() in theset: ...</snippet></ROW><ROW><id>3296782</id><snippet>import collections

class CaseInsensitiveDict(collections.Mapping):
    def __init__(self, d):
        self._d = d
        self._s = dict((k.lower(), k) for k in d)
    def __contains__(self, k):
        return k.lower() in self._s
    def __len__(self):
        return len(self._s)
    def __iter__(self):
        return iter(self._s)
    def __getitem__(self, k):
        return self._d[self._s[k.lower()]]
    def actual_key_case(self, k):
        return self._s.get(k.lower())
</snippet></ROW><ROW><id>3296782</id><snippet>actual_key_case</snippet></ROW><ROW><id>3296782</id><snippet>None</snippet></ROW><ROW><id>3296800</id><snippet>result = store.find(Plan, Plan.id == Project.plan_id, Project.project_id == "alpha")
</snippet></ROW><ROW><id>3296800</id><snippet>plan = result.one()
</snippet></ROW><ROW><id>3296800</id><snippet>plan = store.find(Plan, Plan.id == Project.plan_id, Project.project_id == "alpha").one()
</snippet></ROW><ROW><id>3296800</id><snippet>result = store.using(LeftJoin(Plan, Project, Plan.id == Project.plan_id)).find(
    Plan, Project.project_id == "alpha")
</snippet></ROW><ROW><id>3297010</id><snippet>im_func</snippet></ROW><ROW><id>3297010</id><snippet>A.f.im_func(b)
</snippet></ROW><ROW><id>3298223</id><snippet>enctype</snippet></ROW><ROW><id>3298223</id><snippet>&lt;form enctype="multipart/form-data" method="post" action="/foo/"&gt;
</snippet></ROW><ROW><id>3298373</id><snippet>return sum(binary_compare(x, y) for x, y in zip(data, expectedData) if x != y)
</snippet></ROW><ROW><id>3298373</id><snippet>itertools.izip</snippet></ROW><ROW><id>3298373</id><snippet>zip</snippet></ROW><ROW><id>3298953</id><snippet>from datetime import datetime

dt = datetime.strptime( date, '%Y-%m-%d %H:%M' )
dt_plus_25 = dt + datetime.timedelta( 0, 2*60*60 + 30*60 )
</snippet></ROW><ROW><id>3299261</id><snippet>seek</snippet></ROW><ROW><id>3299261</id><snippet>tell</snippet></ROW><ROW><id>3299261</id><snippet>file</snippet></ROW><ROW><id>3299261</id><snippet>tell</snippet></ROW><ROW><id>3299337</id><snippet>for k in range(1,len(list1) - 1):
    if (list1[k] == list1[k - 1]):
        list1.remove(list1[k])
</snippet></ROW><ROW><id>3299337</id><snippet>range</snippet></ROW><ROW><id>3299337</id><snippet>remove</snippet></ROW><ROW><id>3299337</id><snippet>k = 1
while k &lt; len(list1):
    if list1[k] == list1[k-1]:
        del list1[k]
    else:
        k += 1
</snippet></ROW><ROW><id>3299724</id><snippet>dis</snippet></ROW><ROW><id>3299724</id><snippet>&gt;&gt;&gt; def fib(n): return n if n &lt; 2 else fib(n - 2) + fib(n - 1)
... 
&gt;&gt;&gt; fib(10)
55
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(fib)
  1           0 LOAD_FAST                0 (n)
              3 LOAD_CONST               1 (2)
              6 COMPARE_OP               0 (&lt;)
              9 JUMP_IF_FALSE            5 (to 17)
             12 POP_TOP             
             13 LOAD_FAST                0 (n)
             16 RETURN_VALUE        
        &gt;&gt;   17 POP_TOP             
             18 LOAD_GLOBAL              0 (fib)
             21 LOAD_FAST                0 (n)
             24 LOAD_CONST               1 (2)
             27 BINARY_SUBTRACT     
             28 CALL_FUNCTION            1
             31 LOAD_GLOBAL              0 (fib)
             34 LOAD_FAST                0 (n)
             37 LOAD_CONST               2 (1)
             40 BINARY_SUBTRACT     
             41 CALL_FUNCTION            1
             44 BINARY_ADD          
             45 RETURN_VALUE        
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3299724</id><snippet>fib</snippet></ROW><ROW><id>3299724</id><snippet>LOAD_FAST 0</snippet></ROW><ROW><id>3299724</id><snippet>n</snippet></ROW><ROW><id>3299724</id><snippet>fib</snippet></ROW><ROW><id>3299724</id><snippet>LOAD_CONST 1</snippet></ROW><ROW><id>3299724</id><snippet>&gt;&gt;&gt; fib.func_code.co_consts
(None, 2, 1)
</snippet></ROW><ROW><id>3299724</id><snippet>COMPARE_OP 0</snippet></ROW><ROW><id>3299724</id><snippet>if n &lt; 2</snippet></ROW><ROW><id>3299724</id><snippet>fib</snippet></ROW><ROW><id>3299724</id><snippet>fib</snippet></ROW><ROW><id>3299724</id><snippet>POP_TOP</snippet></ROW><ROW><id>3299724</id><snippet>JUMP_IF_FALSE</snippet></ROW><ROW><id>3299724</id><snippet>fib</snippet></ROW><ROW><id>3299724</id><snippet>&gt;&gt;&gt; code = fib.func_code.co_code
&gt;&gt;&gt; code
'|\x00\x00d\x01\x00j\x00\x00o\x05\x00\x01|\x00\x00S\x01t\x00\x00|\x00\x00d\x01\x00\x18\x83\x01\x00t\x00\x00|\x00\x00d\x02\x00\x18\x83\x01\x00\x17S'
&gt;&gt;&gt; import opcode
&gt;&gt;&gt; op = code[0]
&gt;&gt;&gt; op
'|'
&gt;&gt;&gt; op = ord(op)
&gt;&gt;&gt; op
124
&gt;&gt;&gt; opcode.opname[op]
'LOAD_FAST'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3299724</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>3299724</id><snippet>'\x00\x00'</snippet></ROW><ROW><id>3299724</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>3300514</id><snippet>import sqlite3

def dict_factory(cursor, row):
    d = {}
    for idx, col in enumerate(cursor.description):
        d[col[0]] = row[idx]
    return d

con = sqlite3.connect(":memory:")
con.row_factory = dict_factory
cur = con.cursor()
cur.execute("select 1 as a")
print cur.fetchone()["a"]
</snippet></ROW><ROW><id>3300647</id><snippet>imports.py</snippet></ROW><ROW><id>3300647</id><snippet>from imports import *
</snippet></ROW><ROW><id>3301321</id><snippet>class _Settings(object):
    def __init__(self, fname):
        self._config = ...
    ...

Settings = _Settings('/path/to/config.ini')
</snippet></ROW><ROW><id>3301453</id><snippet>==</snippet></ROW><ROW><id>3301453</id><snippet>in</snippet></ROW><ROW><id>3301453</id><snippet>word == True</snippet></ROW><ROW><id>3301453</id><snippet>&gt;&gt;&gt; w = 'ab c'
&gt;&gt;&gt; ' ' in w == True
1: False
&gt;&gt;&gt; (' ' in w) == True
2: True
</snippet></ROW><ROW><id>3301453</id><snippet>== True</snippet></ROW><ROW><id>3301453</id><snippet>if</snippet></ROW><ROW><id>3301453</id><snippet>' ' in word</snippet></ROW><ROW><id>3301453</id><snippet>if ' ' in word: ...</snippet></ROW><ROW><id>3301454</id><snippet>lst = [{...},{...},{...},{...}]
ordered = [lst[1],lst[2],lst[0],lst[3]]
</snippet></ROW><ROW><id>3301454</id><snippet>ordered = sorted(lst, key=lambda d: [2,3,1,4].index(int(d['id'])))
</snippet></ROW><ROW><id>3301454</id><snippet>index()</snippet></ROW><ROW><id>3301454</id><snippet>O(n)</snippet></ROW><ROW><id>3301454</id><snippet>timeit</snippet></ROW><ROW><id>3301524</id><snippet>db=MySQLdb.connect(user="root",passwd="",db="my_db",unix_socket="/opt/lampp/var/mysql/mysql.sock")
</snippet></ROW><ROW><id>3301530</id><snippet>select.select()</snippet></ROW><ROW><id>3301530</id><snippet>''</snippet></ROW><ROW><id>3301530</id><snippet>fcntl.fcntl()</snippet></ROW><ROW><id>3301787</id><snippet>def __init__( self, spam, eggs=0 )
</snippet></ROW><ROW><id>3301809</id><snippet>shelve</snippet></ROW><ROW><id>3301848</id><snippet>my_other_field</snippet></ROW><ROW><id>3301848</id><snippet>F()</snippet></ROW><ROW><id>3301848</id><snippet>F()</snippet></ROW><ROW><id>3301913</id><snippet>get_x = lambda: foo_instance.bar
get_x() # yahoo!
</snippet></ROW><ROW><id>3301913</id><snippet>def wrap_prop (obj, pname):
  def _access(*v):
    if not len(v):
      return getattr(obj, pname)
    else
      setattr(obj, pname, v[0])
  return _access

class z (object):
  pass

access = wrap_prop(z(), "bar")
access(20)
access() # yahoo! \o/
</snippet></ROW><ROW><id>3301913</id><snippet>access = wrap_prop(z(), "bar")
access.val = 20
access.val # yahoo \o/
</snippet></ROW><ROW><id>3301919</id><snippet>bzr branch lp:cairoplot/1.1</snippet></ROW><ROW><id>3301919</id><snippet>1.1</snippet></ROW><ROW><id>3301919</id><snippet>CairoPlot.py</snippet></ROW><ROW><id>3301919</id><snippet>CairoPlot.py</snippet></ROW><ROW><id>3301919</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3301919</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3301919</id><snippet>1.1</snippet></ROW><ROW><id>3302050</id><snippet>AutoItX.dll</snippet></ROW><ROW><id>3302050</id><snippet>AutoItX3_x64.dll</snippet></ROW><ROW><id>3302050</id><snippet>AutoItX.chm</snippet></ROW><ROW><id>3302064</id><snippet>class C(object):
    _default_x = 5
    _x = None
    @property
    def x(self):
        return self._x or self._default_x
    def alpha(self, beta):
        self._x = beta
</snippet></ROW><ROW><id>3302085</id><snippet>chmod +x hello.py</snippet></ROW><ROW><id>3302163</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import create_session
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()
engine = create_engine('oracle://EPIGENETICS:sgc04lab@ELN')
meta = MetaData(bind=engine)

class construct(Base):
    __table__ = Table('construct', meta, autoload=True)

class expression(Base):
    __table__ = Table('expression', meta, autoload=True)

class purification(Base):
    __table__ = Table('purification', meta, autoload=True)

session = create_session(bind=engine)
print session.query(expression).join(purification,expression)
</snippet></ROW><ROW><id>3302163</id><snippet>SELECT expression.pkey AS expression_pkey, expression.cellline AS expression_cellline, expression.epiconstruct_pkey AS expression_epiconstruct_pkey, expression.elnexp AS expression_elnexp, expression.expression_id AS expression_expression_id, expression.expressioncomments AS expression_expressioncomments, expression.cellmass AS expression_cellmass, expression.datestamp AS expression_datestamp, expression.person AS expression_person, expression.soluble AS expression_soluble, expression.semet AS expression_semet, expression.scale AS expression_scale, expression.purtest AS expression_purtest, expression.nmrlabelled AS expression_nmrlabelled, expression.yield AS expression_yield 
FROM expression JOIN purification ON expression.pkey = purification.epiexpression_pkey JOIN expression ON expression.pkey = purification.epiexpression_pkey
</snippet></ROW><ROW><id>3302241</id><snippet>subprocess.call</snippet></ROW><ROW><id>3302241</id><snippet>Popen</snippet></ROW><ROW><id>3302241</id><snippet>communicate</snippet></ROW><ROW><id>3302241</id><snippet>stdout</snippet></ROW><ROW><id>3302241</id><snippet>stderr</snippet></ROW><ROW><id>3302241</id><snippet>stdin</snippet></ROW><ROW><id>3302241</id><snippet>output = Popen(["mycmd", "myarg"], stdout=PIPE).communicate()[0]
</snippet></ROW><ROW><id>3302422</id><snippet>import lxml.etree

content='''\
&lt;p&gt;&lt;span class="Title"&gt;Name&lt;/span&gt;Dave Davies&lt;/p&gt;
&lt;p&gt;&lt;span class="Title"&gt;Address&lt;/span&gt;123 Greyfriars Road, London&lt;/p&gt;'''


root=lxml.etree.fromstring(content,parser=lxml.etree.HTMLParser())
for elt in root.findall('**/span'):
    print(elt.text, elt.tail)

# ('Name', 'Dave Davies')
# ('Address', '123 Greyfriars Road, London')
</snippet></ROW><ROW><id>3302492</id><snippet>url</snippet></ROW><ROW><id>3302492</id><snippet>reverse()</snippet></ROW><ROW><id>3302492</id><snippet>name=channel_browse</snippet></ROW><ROW><id>3302492</id><snippet>slug=whatever</snippet></ROW><ROW><id>3302492</id><snippet>(?P&lt;slug&gt;.*)</snippet></ROW><ROW><id>3302515</id><snippet>* * * * * su esr -c "DBUS_SESSION_BUS_ADDRESS=$(grep -z DBUS_SESSION_BUS_ADDRESS /proc/$(ps -au esr | grep -i "gnome-session" | awk '{ print $1 }')/environ | sed -e 's/DBUS_SESSION_BUS_ADDRESS=//') $(whereis notify-send | awk '{ print $2 }') -u normal -t 20000 \"Hello\" "
</snippet></ROW><ROW><id>3302518</id><snippet>column_stack</snippet></ROW><ROW><id>3302531</id><snippet>reactor.callLater()</snippet></ROW><ROW><id>3302531</id><snippet>print</snippet></ROW><ROW><id>3302531</id><snippet>timeout</snippet></ROW><ROW><id>3302531</id><snippet>timeout</snippet></ROW><ROW><id>3302531</id><snippet>reactor.callLater()</snippet></ROW><ROW><id>3302531</id><snippet>reactor.callLater()</snippet></ROW><ROW><id>3302531</id><snippet>self.transport.loseConnection()</snippet></ROW><ROW><id>3302531</id><snippet>Deferred</snippet></ROW><ROW><id>3302531</id><snippet>DeferredList</snippet></ROW><ROW><id>3302531</id><snippet>loseConnection()</snippet></ROW><ROW><id>3302950</id><snippet># without any parameters
def authentication_required(f):
    @functools.wraps
    def _authentication_required(*args, **kwargs):
        # Do you login stuff here
        return f(*args, **kwargs)
    return _authentication_required

# With parameters
def authentication_required(*allowed_groups):
    def _authentication_required(f):
        @functools.wraps
        def __authentication_required(*args, **kwargs):
            # Do you login stuff here
            return f(*args, **kwargs)
        return __authentication_required
    return _authentication_required
</snippet></ROW><ROW><id>3302976</id><snippet>import foursquare
import oauth
credentials = foursquare.OAuthCredentials(consumer_key, consumer_secret)
fs = foursquare.Foursquare(credentials)
user_token = oauth.OAuthToken(user_key, user_secret)
credentials.set_access_token(user_token)
print fs.user()
</snippet></ROW><ROW><id>3302997</id><snippet>deep_reload</snippet></ROW><ROW><id>3302997</id><snippet>-deep_reload</snippet></ROW><ROW><id>3302997</id><snippet>reload()</snippet></ROW><ROW><id>3302997</id><snippet>ipy_autoreload</snippet></ROW><ROW><id>3302997</id><snippet>import ipy_autoreload
%autoreload 1
</snippet></ROW><ROW><id>3303227</id><snippet>dict(zip(l[::2], l[1::2]))
</snippet></ROW><ROW><id>3303227</id><snippet>l[::2]</snippet></ROW><ROW><id>3303227</id><snippet>l[1::2]</snippet></ROW><ROW><id>3303227</id><snippet>zip</snippet></ROW><ROW><id>3303227</id><snippet>dict</snippet></ROW><ROW><id>3303227</id><snippet>~4n</snippet></ROW><ROW><id>3303227</id><snippet>~4n</snippet></ROW><ROW><id>3303227</id><snippet>zip</snippet></ROW><ROW><id>3303227</id><snippet>dict</snippet></ROW><ROW><id>3303361</id><snippet>import re

def clean(s):

   # Remove invalid characters
   s = re.sub('[^0-9a-zA-Z_]', '', s)

   # Remove leading characters until we find a letter or underscore
   s = re.sub('^[^a-zA-Z_]+', '', s)

   return s
</snippet></ROW><ROW><id>3303361</id><snippet>&gt;&gt;&gt; clean(' 32v2 g #Gmw845h$W b53wi ')
'v2gGmw845hWb53wi'
</snippet></ROW><ROW><id>3303396</id><snippet>request.POST</snippet></ROW><ROW><id>3303396</id><snippet>request.POST</snippet></ROW><ROW><id>3303396</id><snippet>iteritems</snippet></ROW><ROW><id>3303396</id><snippet>def my_view(request):
    # loop through keys
    for key in request.POST:
        value = request.POST[key]
    # loop through keys and values
    for key, value in request.POST.iteritems():
        # do something
</snippet></ROW><ROW><id>3303443</id><snippet>@task
def do_job(path, task_id=None):
    cache.set(task_id, operation_results)
</snippet></ROW><ROW><id>3303584</id><snippet>self.quit</snippet></ROW><ROW><id>3303584</id><snippet>Application</snippet></ROW><ROW><id>3303584</id><snippet>....
    def quit(self):
        import sys
        sys.exit()
....
</snippet></ROW><ROW><id>3303640</id><snippet>r = xrange(2000, 2005)
h = zip(xrange(1, len(r) + 1), r)
print h
</snippet></ROW><ROW><id>3304043</id><snippet>threadedselectreactor</snippet></ROW><ROW><id>3304043</id><snippet>doComputation</snippet></ROW><ROW><id>3304043</id><snippet>twistedThread = Thread(target=reactor.run); twistedThread.start()</snippet></ROW><ROW><id>3304043</id><snippet>RPCDoer</snippet></ROW><ROW><id>3304043</id><snippet>reactor.callFromThread</snippet></ROW><ROW><id>3304043</id><snippet>RPCDoer.doRPC</snippet></ROW><ROW><id>3304043</id><snippet>doRPC</snippet></ROW><ROW><id>3304043</id><snippet>doComputation</snippet></ROW><ROW><id>3304043</id><snippet>def doComputation(self):
    rpcResult = blockingCallFromThread(reactor, self.myRPCDoer.doRPC)
    return self.computeSomethingFrom(rpcResult)
</snippet></ROW><ROW><id>3304043</id><snippet>reactor.callFromThread(reactor.stop); twistedThread.join()</snippet></ROW><ROW><id>3304650</id><snippet>self.assertRaises</snippet></ROW><ROW><id>3304650</id><snippet>mro.setStatus</snippet></ROW><ROW><id>3304650</id><snippet>NEW_STATUS</snippet></ROW><ROW><id>3304650</id><snippet>self.assertRaises</snippet></ROW><ROW><id>3304650</id><snippet>mro.setStatus(NEW_STATUS)</snippet></ROW><ROW><id>3304650</id><snippet>try...except</snippet></ROW><ROW><id>3304650</id><snippet>ValueError</snippet></ROW><ROW><id>3304650</id><snippet>mro.setStatus(NEW_STATUS)</snippet></ROW><ROW><id>3304650</id><snippet>self.assertRaises</snippet></ROW><ROW><id>3304650</id><snippet>ValueError</snippet></ROW><ROW><id>3304650</id><snippet>self.assertRaises</snippet></ROW><ROW><id>3304650</id><snippet>self.assertRaises(ValueError,mro.setStatus,NEW_STATUS)
</snippet></ROW><ROW><id>3304713</id><snippet>SIGTERM</snippet></ROW><ROW><id>3304713</id><snippet>myProcess.kill</snippet></ROW><ROW><id>3304713</id><snippet>myProcess.terminate</snippet></ROW><ROW><id>3304713</id><snippet>myProcess.send_signal(9)</snippet></ROW><ROW><id>3304713</id><snippet>SIGKILL</snippet></ROW><ROW><id>3304977</id><snippet>path = ['/path/to/other/compiler/bin', '/bin', '/usr/bin',]
env = Environment(ENV = {'PATH' : path})
</snippet></ROW><ROW><id>3304977</id><snippet>$PATH</snippet></ROW><ROW><id>3304977</id><snippet>AddOption</snippet></ROW><ROW><id>3305745</id><snippet>req = mechanize.Request("https://www.site.com/path/" + url, " ")
req.add_header("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.7) Gecko/20100713 Firefox/3.6.7")
req.add_header("Referer", "https://www.site.com/path")
cj.add_cookie_header(req)
res = mechanize.urlopen(req)
</snippet></ROW><ROW><id>3305745</id><snippet>hh = mechanize.HTTPHandler()
hsh = mechanize.HTTPSHandler()
hh.set_http_debuglevel(1)
hsh.set_http_debuglevel(1)
opener = mechanize.build_opener(hh, hsh)
logger = logging.getLogger()
logger.addHandler(logging.StreamHandler(sys.stdout))
logger.setLevel(logging.NOTSET)
mechanize.install_opener(opener)
</snippet></ROW><ROW><id>3305964</id><snippet>StringIO</snippet></ROW><ROW><id>3305964</id><snippet>import StringIO
import csv

scsv = """1,2,3
a,b,c
d,e,f"""

f = StringIO.StringIO(scsv)
reader = csv.reader(f, delimiter=',')
for row in reader:
    print '\t'.join(row)
</snippet></ROW><ROW><id>3305964</id><snippet>split()</snippet></ROW><ROW><id>3305964</id><snippet>reader = csv.reader(scsv.split('\n'), delimiter=',')
for row in reader:
    print '\t'.join(row)
</snippet></ROW><ROW><id>3305964</id><snippet>split</snippet></ROW><ROW><id>3305964</id><snippet>\n</snippet></ROW><ROW><id>3305964</id><snippet>split</snippet></ROW><ROW><id>3305964</id><snippet>csv</snippet></ROW><ROW><id>3306298</id><snippet>heapq</snippet></ROW><ROW><id>3306298</id><snippet>in</snippet></ROW><ROW><id>3306298</id><snippet>if item in myqueue:
   print "yay!"
</snippet></ROW><ROW><id>3306310</id><snippet>del y</snippet></ROW><ROW><id>3306310</id><snippet>y</snippet></ROW><ROW><id>3306310</id><snippet>F1</snippet></ROW><ROW><id>3306310</id><snippet>F1</snippet></ROW><ROW><id>3306310</id><snippet>F1</snippet></ROW><ROW><id>3306310</id><snippet>F1</snippet></ROW><ROW><id>3306310</id><snippet>y = F1(x[0])   # F1(x[0]) is calculated, then y is bound to it
z[j] = F2(y)
y = F1(x[1])   # y is still bound to F1(x[0]) while F1(x[1]) is computed
               # The memory for F1(X[0]) is finally freed when y is rebound
z[j] = F2(y)
</snippet></ROW><ROW><id>3306310</id><snippet>del y</snippet></ROW><ROW><id>3306318</id><snippet>os.path.expanduser()</snippet></ROW><ROW><id>3306318</id><snippet>from win32security import LookupAccountName, ConvertSidToStringSid
from _winreg import OpenKey, QueryValueEx, HKEY_LOCAL_MACHINE

def getUserDir(userName):
    ssid = ConvertSidToStringSid(LookupAccountName(None, userName)[0])
    key = OpenKey(HKEY_LOCAL_MACHINE, r'SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\\' + ssid)
    return QueryValueEx(key, 'ProfileImagePath')[0]
</snippet></ROW><ROW><id>3306550</id><snippet>(URLLangDecorator(r'^%s/(?P&lt;slug&gt;[-w]+)/$', ['user']), 'myapp.view.relatedaction')
class URLLangDecorator:
    def __init__(self, url, params):
        self.url, self.params = url, params

    def __str__(self):
        return self.url % map(_, self.params)
    # Django can also preform "%" operation, so to be safe:
    def __mod__(self, arg):
        return str(self) % arg
</snippet></ROW><ROW><id>3306797</id><snippet>dict(win32timezone.TimeZoneInfo._get_indexed_time_zone_keys())</snippet></ROW><ROW><id>3306797</id><snippet>  import win32timezone
  win32tz_name = win32timezone.TimeZoneInfo.local().timeZoneName
  win32timezone_to_en = dict(win32timezone.TimeZoneInfo._get_indexed_time_zone_keys())
  win32timezone_name_en = win32timezone_to_en.get(win32tz_name, win32tz_name)
  olsen_name = win32timezones.get(win32timezone_name_en, None)
  if not olsen_name:
      raise ValueError(u"Could not map win32 timezone name %s (English %s) to Olsen timezone name" % (win32tz_name, win32timezone_name_en))
  return pytz.timezone(olsen_name)
</snippet></ROW><ROW><id>3306797</id><snippet>win32timezone.TimeZoneInfo</snippet></ROW><ROW><id>3306887</id><snippet>[0:6]</snippet></ROW><ROW><id>3306887</id><snippet>time.strptime</snippet></ROW><ROW><id>3307448</id><snippet>commands</snippet></ROW><ROW><id>3307448</id><snippet>print commands.__file__</snippet></ROW><ROW><id>3307731</id><snippet>q.ancestor = db.Key.from_path(aggrRootKind, aggrRootKeyName)
</snippet></ROW><ROW><id>3307731</id><snippet>q.ancestor(db.Key.from_path(aggrRootKind, aggrRootKeyName))
</snippet></ROW><ROW><id>3307746</id><snippet>u', '.join(x.place for x in Q)
</snippet></ROW><ROW><id>3307940</id><snippet>Sheet</snippet></ROW><ROW><id>3307940</id><snippet>ncols</snippet></ROW><ROW><id>3308117</id><snippet>[x[1] for x in elements]
</snippet></ROW><ROW><id>3308407</id><snippet>mod_wsgi</snippet></ROW><ROW><id>3308407</id><snippet>mod_python</snippet></ROW><ROW><id>3308807</id><snippet>import pbs, os

server_name = pbs.pbs_default()
c = pbs.pbs_connect(server_name)

attopl = pbs.new_attropl(4)
attropl[0].name  = pbs.ATTR_l
attropl[0].resource = 'ncpus'
attropl[0].value = '1'

attropl[1].name  = pbs.ATTR_l
attropl[1].resource = 'mem'
attropl[1].value = 'i1000mb'

attropl[2].name  = pbs.ATTR_l
attropl[2].resource = 'cput'
attropl[2].value = '24:00:00'

attrop1[3].name = pbs.ATTR_V

script='''
cd /data/work/
python experiment_model.py %f
'''

jobs = []

for a in pylab.linspace(0.,1.,100):
    script_name = 'experiment_model.job' + str(a)
    with open(script_name,'w') as scriptf:
        scriptf.write(script % a)
    job_id = pbs.pbs_submit(c, attropl, script_name, 'NULL', 'NULL')
    jobs.append(job_id)
    os.remove(script_name)

 print jobs
</snippet></ROW><ROW><id>3308895</id><snippet>__bases__</snippet></ROW><ROW><id>3309706</id><snippet>time.sleep</snippet></ROW><ROW><id>3309706</id><snippet>import time

def abc():
    print 'Hi'
    print 'Hello'
    print 'Hai'

for i in xrange(3):
    time.sleep(1)
    abc()   
</snippet></ROW><ROW><id>3309915</id><snippet>testclass.py</snippet></ROW><ROW><id>3309915</id><snippet>raw_input</snippet></ROW><ROW><id>3309915</id><snippet>input</snippet></ROW><ROW><id>3309915</id><snippet>$ python --version
</snippet></ROW><ROW><id>3309961</id><snippet>raw_input()</snippet></ROW><ROW><id>3310163</id><snippet>from twisted.conch.ssh import transport
from twisted.internet import defer
from twisted.conch.ssh import keys, userauth
from twisted.conch.ssh import connection
from twisted.conch.ssh import channel, common
from twisted.internet import protocol, reactor

class ClientTransport(transport.SSHClientTransport):
    def verifyHostKey(self, pubKey, fingerprint):
        return defer.succeed(1)
    def connectionSecure(self):
        self.requestService(ClientUserAuth('USERHERE', ClientConnection()))

class ClientUserAuth(userauth.SSHUserAuthClient):
    def getPassword(self, prompt=None):
        return 
    def getPublicKey(self):
        return keys.Key.fromString(data=publicKey)
    def getPrivateKey(self):
        return defer.succeed(keys.Key.fromString(data=privateKey))

class ClientConnection(connection.SSHConnection):
    def serviceStarted(self):
        self.openChannel(CatChannel(conn=self))

class CatChannel(channel.SSHChannel):
    name = 'session'
    def channelOpen(self, data):
        data = 'abcdefghijklmnopqrstuvwxyz' * 300
        self.return_data = ''
        self.conn.sendRequest(self, 'exec', common.NS('C:\helloworld %-10000s' % data), wantReply=True)
    def dataReceived(self, data):
        self.return_data += data
    def closed(self):
        print "got %d bytes of data back from Windows" % len(self.return_data)
        print self.return_data
        self.loseConnection()
        reactor.stop()

if __name__ == "__main__":
    factory = protocol.ClientFactory()
    factory.protocol = ClientTransport
    reactor.connectTCP('123.123.123.123', 22, factory)
    reactor.run()
</snippet></ROW><ROW><id>3310587</id><snippet>dump_data_fields</snippet></ROW><ROW><id>3310608</id><snippet>PyObject* myModuleString = PyString_FromString((char*)"mytest");
PyObject* myModule = PyImport_Import(myModuleString);
</snippet></ROW><ROW><id>3310608</id><snippet>PyObject* myFunction = PyObject_GetAttrString(myModule,(char*)"myabs");
PyObject* args = PyTuple_Pack(1,PyFloat_FromDouble(2.0));
</snippet></ROW><ROW><id>3310608</id><snippet>PyObject* myResult = PyObject_CallObject(myFunction, args)
</snippet></ROW><ROW><id>3310608</id><snippet>double result = PyFloat_AsDouble(myResult);
</snippet></ROW><ROW><id>3310995</id><snippet>cursor.execute('insert into File 
(id, name, bin) values (?,?,?)', (id, name, sqlite3.Binary(file.read())))</snippet></ROW><ROW><id>3310995</id><snippet>file = cursor.execute('select bin from File where id=?', (id,)).fetchone()</snippet></ROW><ROW><id>3310995</id><snippet>return cStringIO.StringIO(file['bin'])</snippet></ROW><ROW><id>3311116</id><snippet>sqlite.Binary</snippet></ROW><ROW><id>3311116</id><snippet>import sqlite3

# let's just make an arbitrary binary file...
with open('/tmp/abin', 'wb') as f:
  f.write(''.join(chr(i) for i in range(55)))
# ...and read it back into a blob
with open('/tmp/abin', 'rb') as f:
  ablob = f.read()

# OK, now for the DB part: we make it...:
db = sqlite3.connect('/tmp/thedb')
db.execute('CREATE TABLE t (thebin BLOB)')
db.execute('INSERT INTO t VALUES(?)', [buffer(ablob)])
db.commit()
db.close()

# ...and read it back:
db = sqlite3.connect('/tmp/thedb')
row = db.execute('SELECT * FROM t').fetchone()
print repr(str(row[0]))
</snippet></ROW><ROW><id>3311116</id><snippet>buffer</snippet></ROW><ROW><id>3311116</id><snippet>str</snippet></ROW><ROW><id>3311116</id><snippet>buffer</snippet></ROW><ROW><id>3311116</id><snippet>write</snippet></ROW><ROW><id>3311154</id><snippet>app.wsgi</snippet></ROW><ROW><id>3311154</id><snippet>import os
os.environ['MY_ENV_VARIABLE'] = 'value'
# e.g. os.environ['MPLCONFIGDIR'] = '/path/to/config/dir'
</snippet></ROW><ROW><id>3311157</id><snippet>from threading import Thread, Lock

mutex = Lock()

def processData(data):
    mutex.acquire()
    try:
        print('Do some stuff')
    finally:
        mutex.release()

while True:
    t = Thread(target = processData, args = (some_data,))
    t.start()
</snippet></ROW><ROW><id>3311157</id><snippet>multiprocessing</snippet></ROW><ROW><id>3311157</id><snippet>threading</snippet></ROW><ROW><id>3311157</id><snippet>from multiprocessing import Process, Lock

mutex = Lock()

def processData(data):
    with mutex:
        print('Do some stuff')

if __name__ == '__main__':
    while True:
        p = Process(target = processData, args = (some_data,))
        p.start()
</snippet></ROW><ROW><id>3311168</id><snippet>names</snippet></ROW><ROW><id>3311168</id><snippet>','.join(names)</snippet></ROW><ROW><id>3311168</id><snippet>+ ','</snippet></ROW><ROW><id>3311168</id><snippet>with open('yourfile.txt') as f:
  result = ','.join(f)
</snippet></ROW><ROW><id>3311168</id><snippet>+ ','</snippet></ROW><ROW><id>3311168</id><snippet>f.read()</snippet></ROW><ROW><id>3311168</id><snippet>with open('yourfile.txt') as f:
  result = ','.join(f.read().split('\t'))
</snippet></ROW><ROW><id>3311290</id><snippet>itertools.repeat(x[, count])</snippet></ROW><ROW><id>3311497</id><snippet>cursor.execute (
    "INSERT INTO text (text_key, language_id, text) VALUES (%s, %s, %s)",
    (key, language_id, text))
</snippet></ROW><ROW><id>3311510</id><snippet>logging.config.fileConfig('some.log')</snippet></ROW><ROW><id>3312002</id><snippet>class class1(object):
    @staticmethod
    def parse(array):
        ...
</snippet></ROW><ROW><id>3312002</id><snippet>self</snippet></ROW><ROW><id>3312002</id><snippet>parse</snippet></ROW><ROW><id>3312002</id><snippet>class1</snippet></ROW><ROW><id>3312002</id><snippet>class class1(object):
    @classmethod
    def parse(array):
        ...
</snippet></ROW><ROW><id>3312248</id><snippet>struct</snippet></ROW><ROW><id>3312248</id><snippet>struct.pack()</snippet></ROW><ROW><id>3312248</id><snippet>bytes = struct.pack( 'h', some_data )
</snippet></ROW><ROW><id>3312255</id><snippet>feed_user</snippet></ROW><ROW><id>3312255</id><snippet>r'(?P&lt;username&gt;\w+)/$'</snippet></ROW><ROW><id>3312255</id><snippet>r'(?P&lt;username&gt;[\w.]+)/$'</snippet></ROW><ROW><id>3312425</id><snippet>        result = (count * phyQP + 1) / float(pubKeyExpo)
</snippet></ROW><ROW><id>3312425</id><snippet>pow()</snippet></ROW><ROW><id>3312425</id><snippet>pow(x, y, z)</snippet></ROW><ROW><id>3312425</id><snippet>(x ** y) mod z</snippet></ROW><ROW><id>3312474</id><snippet>import PIL.Image
</snippet></ROW><ROW><id>3312474</id><snippet>import Image
</snippet></ROW><ROW><id>3312522</id><snippet>python.el</snippet></ROW><ROW><id>3312880</id><snippet>_temp = __import__(name, globals(), locals(), [name_of_class]); your_class = _temp.name_of_class</snippet></ROW><ROW><id>3313006</id><snippet>def convertEntities(s):
    return ''.join([getEntity(c) for c in s])

def getEntity(c):
    ord_c = ord(c)
    if ord_c &gt; 127 and ord_c in htmlentitydefs.codepoint2name:
        return "&amp;%s;" % htmlentitydefs.codepoint2name[ord_c]
    return c
</snippet></ROW><ROW><id>3313087</id><snippet>import numpy as np
import scipy as sp
import scipy.ndimage.morphology

# The array you gave above
data = np.array( 
        [
           [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], 
           [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], 
           [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
           [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
           [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], 
           [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], 
           [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], 
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], 
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], 
        ])


# Fill holes to make sure we get nice clusters
filled = sp.ndimage.morphology.binary_fill_holes(data)

# Now seperate each group of contigous ones into a distinct value
# This will be an array of values from 1 - num_objects, with zeros
# outside of any contigous object
objects, num_objects = sp.ndimage.label(filled)

# Now return a list of slices around each object
#  (This is effectively the tuple that you wanted)
object_slices =  sp.ndimage.find_objects(objects)

# Just to illustrate using the object_slices
for obj_slice in object_slices:
    print data[obj_slice]
</snippet></ROW><ROW><id>3313087</id><snippet>[[1]]
[[1 1 1]
 [1 1 1]]
[[1 1 1 1]
 [1 0 0 0]
 [1 0 0 1]]
[[1]]
[[0 1 1 0]
 [1 0 0 1]
 [0 1 1 0]]
[[0 0 1 0 0]
 [0 1 1 1 0]
 [1 1 1 1 1]
 [0 1 1 1 0]
 [0 0 1 0 0]]
</snippet></ROW><ROW><id>3313087</id><snippet>[[1 1 1 1]
 [1 0 0 0]
 [1 0 0 1]]
</snippet></ROW><ROW><id>3313087</id><snippet>[[1 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 0 0 0 0]
 [0 0 0 0 0 0 3 3 3 3 0 0 0 2 2 2 0 0 0 0]
 [0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 3 0 0 4 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 5 5 0 0 0 0 0 0 0 6 0 0 0 0 0]
 [0 0 0 0 5 5 5 5 0 0 0 0 0 6 6 6 0 0 0 0]
 [0 0 0 0 0 5 5 0 0 0 0 0 6 6 6 6 6 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 6 6 6 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 0 0 0 0 0]]
</snippet></ROW><ROW><id>3313144</id><snippet>x = u'a'
y = u'abc'[:1]
print x == y, x is y
</snippet></ROW><ROW><id>3313144</id><snippet>True False</snippet></ROW><ROW><id>3313577</id><snippet># A bogus game with wins in several directions.
board = (
    [1,1,2,1],
    [0,2,1,1],
    [2,2,2,1],
    [1,0,0,1],
)

# A few convenience variables.    
n_rows = len(board)    
lft = [ [0] * i for i in range(n_rows) ]  # [[], [0], [0, 0], [0, 0, 0]]
rgt = list(reversed(lft))

# Create transpositions of the board to check for wins in various directions.
transpositions = {
    'horizontal' : board,
    'vertical'   : zip(*board),
    'diag_forw'  : zip(* [lft[i] + board[i] + rgt[i] for i in range(n_rows)] ),
    'diag_back'  : zip(* [rgt[i] + board[i] + lft[i] for i in range(n_rows)] ),
}

# Apply Jonathan's horizontal-win check to all of the transpositions.
for direction, transp in transpositions.iteritems():
    for row in transp:
        s = ''.join( map(str, row) )
        for player in range(1,3):
            if s.find(str(player) * 3) &gt;= 0:
                print 'player={0} direction={1}'.format(player, direction)
</snippet></ROW><ROW><id>3313577</id><snippet>player=1 direction=diag_back
player=2 direction=diag_forw
player=2 direction=horizontal
player=1 direction=vertical
</snippet></ROW><ROW><id>3313577</id><snippet>lft</snippet></ROW><ROW><id>3313577</id><snippet>rgt</snippet></ROW><ROW><id>3313577</id><snippet>diag_forw</snippet></ROW><ROW><id>3313577</id><snippet>1 1 2 1 . . .
. 0 2 1 1 . .
. . 2 2 2 1 .
. . . 1 0 0 1 
</snippet></ROW><ROW><id>3313577</id><snippet>zip(*foo)</snippet></ROW><ROW><id>3313605</id><snippet>def sublistExists(list1, list2):
    return ''.join(map(str, list2)) in ''.join(map(str, list1))
</snippet></ROW><ROW><id>3313652</id><snippet>'..'</snippet></ROW><ROW><id>3313652</id><snippet>'../tools/...'</snippet></ROW><ROW><id>3313676</id><snippet>Failure</snippet></ROW><ROW><id>3313676</id><snippet>Service</snippet></ROW><ROW><id>3313676</id><snippet>reactor.addSystemEventTrigger</snippet></ROW><ROW><id>3313986</id><snippet>__modified</snippet></ROW><ROW><id>3313986</id><snippet>self.__objectives</snippet></ROW><ROW><id>3313986</id><snippet>__setattr__</snippet></ROW><ROW><id>3313986</id><snippet>def __setattr__(self, name, value):
    # set the value like usual and then update the modified attribute too
    self.__dict__[name] = value
    self.__dict__['__modified'] = datetime.now().isoformat()
</snippet></ROW><ROW><id>3314403</id><snippet>blah</snippet></ROW><ROW><id>3314403</id><snippet>&gt;&gt;&gt; import shutil
&gt;&gt;&gt; shutil.copy(blah.__file__, '/tmp/blahblah.pyc')
</snippet></ROW><ROW><id>3314542</id><snippet>\W{3,}</snippet></ROW><ROW><id>3314542</id><snippet>&gt;&gt;&gt; s = "***(((((hi abc ***&amp;&amp;&amp;&amp;"
&gt;&gt;&gt; re.sub("\W{3,}", "", s) 
'hi abc'
&gt;&gt;&gt; s = "(((((hi abc )))))))"
&gt;&gt;&gt; re.sub("\W{3,}", "", s) 
'hi abc'
</snippet></ROW><ROW><id>3314545</id><snippet>class aardvark(object):
    eggs = 50

class bar(object):
    spam = aardvark()
    def test(self) :
        print self.spam.eggs

foo = aardvark
</snippet></ROW><ROW><id>3314545</id><snippet>class bar(object):
    spam = None  # optional!-)
    def test(self) :
        print self.spam.eggs

class foo(object):
    eggs = 50

bar.spam = foo()
</snippet></ROW><ROW><id>3314545</id><snippet>pass</snippet></ROW><ROW><id>3314624</id><snippet>visible_fields</snippet></ROW><ROW><id>3314624</id><snippet>hidden_fields</snippet></ROW><ROW><id>3314624</id><snippet>class sendFleet(forms.Form):
    [...]
    ship1 = forms.IntegerField(initial=0)
    ship2 = forms.IntegerField(initial=0)

    def visible_fields(self):
        # create a list of fields you don't want to display
        invisibles = []
        if self.instance.ship1 == 0:
            invisibles.append(self.fields['ship1'])

        # remove fields from the list of visible fields
        visibles = super(MailForm, self).visible_fields()
        return [v for v in visibles if v.field not in invisibles]
</snippet></ROW><ROW><id>3314624</id><snippet>{% for field in form.visible_fields %}
    {{ field.label_tag }} : {{ field }}
{% endfor %}
</snippet></ROW><ROW><id>3314665</id><snippet>session.delete()</snippet></ROW><ROW><id>3314665</id><snippet>session.invalidate()</snippet></ROW><ROW><id>3314669</id><snippet>#!/usr/bin/python
class Foo(object):
  def bar(self):
    print type(self)

class SubFoo(Foo):
  pass

SubFoo().bar()
</snippet></ROW><ROW><id>3314669</id><snippet>object</snippet></ROW><ROW><id>3314669</id><snippet>Foo()</snippet></ROW><ROW><id>3315066</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; print os.path.dirname("C:\Users\myFile.txt")
C:\Users
&gt;&gt;&gt; print os.path.dirname(os.path.dirname("C:\Users\myFile.txt"))
C:\
</snippet></ROW><ROW><id>3315098</id><snippet>calendar</snippet></ROW><ROW><id>3315098</id><snippet>calendar.timegm</snippet></ROW><ROW><id>3315098</id><snippet>calendar.timegm</snippet></ROW><ROW><id>3315098</id><snippet>gmtime()</snippet></ROW><ROW><id>3315098</id><snippet>time</snippet></ROW><ROW><id>3315098</id><snippet>time.gmtime()</snippet></ROW><ROW><id>3315098</id><snippet>timegm()</snippet></ROW><ROW><id>3315449</id><snippet>$ cat gilliam.py
def spam():
    print 'eggs'
$ cat jones.py
import gilliam
gilliam.spam()
$ python jones.py
eggs
</snippet></ROW><ROW><id>3315526</id><snippet>./manage syncdb
</snippet></ROW><ROW><id>3315560</id><snippet>r = re.compile(r"(\*[^ ]+\*)")
</snippet></ROW><ROW><id>3315560</id><snippet>\1</snippet></ROW><ROW><id>3315560</id><snippet>r.sub(r'&lt;i&gt;"\1"&lt;/i&gt;', foo)
</snippet></ROW><ROW><id>3315560</id><snippet>r.sub(r'&lt;i&gt;"\1"&lt;/i&gt;', '*foo*')  # -&gt; '&lt;i&gt;"*foo*"&lt;/i&gt;'
</snippet></ROW><ROW><id>3315560</id><snippet>foo = '***foo***'
bold = re.compile(r'''\*\*([^ ]+)\*\*''')
ital = re.compile(r'''\*([^ ]+)\*''')

ital.sub(r'''&lt;i&gt;\1&lt;/i&gt;''', bold.sub(r'''&lt;b&gt;\1&lt;/b&gt;''', foo)) # '&lt;b&gt;&lt;i&gt;foo&lt;/i&gt;&lt;/b&gt;'
</snippet></ROW><ROW><id>3315879</id><snippet>MetaDataElement</snippet></ROW><ROW><id>3315879</id><snippet>class MetaDataElement:
    (MD_INVALID, MD_CATEGORY, MD_TAG) = range(3)
    mapInitiator2Type = {'!':MetaDataElement.MD_CATEGORY, 
                         '#':MetaDataElement.MD_TAG}
</snippet></ROW><ROW><id>3315879</id><snippet>mapInitiator2Type</snippet></ROW><ROW><id>3315879</id><snippet>MetaDataElement</snippet></ROW><ROW><id>3315879</id><snippet>MD_INVALID</snippet></ROW><ROW><id>3315879</id><snippet>class MetaDataElement:
    (MD_INVALID, MD_CATEGORY, MD_TAG) = range(3)
    mapInitiator2Type = {'!': MD_CATEGORY,  # MD_CATEGORY is like a local variable!
                         '#': MD_TAG}
</snippet></ROW><ROW><id>3315879</id><snippet>MetaDataElement</snippet></ROW><ROW><id>3315879</id><snippet>    def method_of_MetaDataElement(self):
        print MetaDataElement.MD_TAG
</snippet></ROW><ROW><id>3315879</id><snippet>MetaDataElement</snippet></ROW><ROW><id>3315879</id><snippet>MD_TAG</snippet></ROW><ROW><id>3315879</id><snippet>method_of_MetaDataElement()</snippet></ROW><ROW><id>3315879</id><snippet>MD_TAG</snippet></ROW><ROW><id>3315879</id><snippet>MetaDataElement</snippet></ROW><ROW><id>3315879</id><snippet>MD_TAG</snippet></ROW><ROW><id>3315879</id><snippet>method_of_MetaDataElement()</snippet></ROW><ROW><id>3315974</id><snippet>m[:3].T.tolist()
#      ^^^^^^^^^ optional
</snippet></ROW><ROW><id>3315974</id><snippet>$ python2.5 -m timeit -s 'import numpy; m = numpy.matrix([[5]*100,[6]*100,[7]*100,[1]*100])' 'm[:3].T'
100000 loops, best of 3: 6.26 usec per loop
$ python2.5 -m timeit -s 'import numpy; m = numpy.matrix([[5]*100,[6]*100,[7]*100,[1]*100])' 'm[:3].T.tolist()'
10000 loops, best of 3: 180 usec per loop
$ python2.5 -m timeit -s 'import numpy; m = numpy.matrix([[5]*100,[6]*100,[7]*100,[1]*100])' 'numpy.asarray(m[:3].T)'
100000 loops, best of 3: 10.9 usec per loop
$ python2.5 -m timeit -s 'import numpy; m = numpy.matrix([[5]*100,[6]*100,[7]*100,[1]*100])' '[p[:3].tolist()for p in numpy.asarray(m.T)]'
1000 loops, best of 3: 289 usec per loop
</snippet></ROW><ROW><id>3316247</id><snippet>time</snippet></ROW><ROW><id>3316247</id><snippet>time.sleep</snippet></ROW><ROW><id>3316247</id><snippet>time.clock</snippet></ROW><ROW><id>3316752</id><snippet>find</snippet></ROW><ROW><id>3316752</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>3316752</id><snippet>findAll</snippet></ROW><ROW><id>3316916</id><snippet>datetime</snippet></ROW><ROW><id>3316916</id><snippet>strftime</snippet></ROW><ROW><id>3316916</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.date.today().strftime("%B %d, %Y")
'July 23, 2010'
&gt;&gt;&gt; datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")
'10:36AM on July 23, 2010'
</snippet></ROW><ROW><id>3317008</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; parser = etree.XMLParser(remove_blank_text=True)
&gt;&gt;&gt; xml_str = '''&lt;root&gt;
&gt;&gt;&gt;     &lt;head&gt;&lt;/head&gt;
&gt;&gt;&gt;     &lt;content&gt;&lt;/content&gt;
&gt;&gt;&gt; &lt;/root&gt;'''
&gt;&gt;&gt; elem = etree.XML(xml_str, parser=p)
&gt;&gt;&gt; print etree.tostring(elem)
&lt;root&gt;&lt;head/&gt;&lt;content/&gt;&lt;/root&gt;
</snippet></ROW><ROW><id>3317008</id><snippet>&gt;&gt;&gt; elem = etree.XML('&lt;p&gt; spam &lt;a&gt;ham&lt;/a&gt; &lt;a&gt;eggs&lt;/a&gt;&lt;/p&gt;', parser=parser)
&gt;&gt;&gt; print etree.tostring(elem)
&lt;p&gt; spam &lt;a&gt;ham&lt;/a&gt; &lt;a&gt;eggs&lt;/a&gt;&lt;/p&gt;
</snippet></ROW><ROW><id>3317008</id><snippet>&gt;&gt;&gt; elem = etree.XML('&lt;p&gt;&lt;a&gt; ham&lt;/a&gt; &lt;a&gt;eggs&lt;/a&gt;&lt;/p&gt;', parser=parser)
&gt;&gt;&gt; print etree.tostring(elem)
&lt;p&gt;&lt;a&gt; ham&lt;/a&gt;&lt;a&gt;eggs&lt;/a&gt;&lt;/p&gt;
</snippet></ROW><ROW><id>3317008</id><snippet>xml:space="preserve"</snippet></ROW><ROW><id>3317008</id><snippet>etree.XMLParser(load_dtd=True)</snippet></ROW><ROW><id>3317008</id><snippet>.text</snippet></ROW><ROW><id>3317008</id><snippet>.tail</snippet></ROW><ROW><id>3317008</id><snippet>None</snippet></ROW><ROW><id>3317062</id><snippet>/9j/4AAQSkZJRgABAgEAYABgAAD/7gAOQWRvYmUAZAAAAAAB...
</snippet></ROW><ROW><id>3317062</id><snippet>encoded_data = base64.b64encode(open(file_name, 'rb').read())
strg = ''
for i in xrange((len(encoded_data)/40)+1):
    strg += encoded_data[i*40:(i+1)*40]
# strg then contains data required
</snippet></ROW><ROW><id>3317366</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>3317366</id><snippet>&lt;em&gt;</snippet></ROW><ROW><id>3317366</id><snippet>&gt;&gt;&gt; s = '&lt;a href="http://testsite.com" class="className"&gt;link_text_part1 &lt;em&gt;another_text&lt;/em&gt; link_text_part2&lt;/a&gt;'

&gt;&gt;&gt; re.sub("&lt;/?(a|em).*?&gt;", "", s)
'link_text_part1 another_text link_text_part2'
</snippet></ROW><ROW><id>3317496</id><snippet>setup.py</snippet></ROW><ROW><id>3318174</id><snippet>int main( void ){
        int i, j;
        for (i=0;i&lt;100000;i++){
                for (j=0;j&lt;100000;j++){
                        continue;
                }
        }
        return 0;
}
</snippet></ROW><ROW><id>3318479</id><snippet>import datetime
def millisecond(dt):
    return dt.microsecond/1000
</snippet></ROW><ROW><id>3319568</id><snippet>.SetSizerAndFit(sizer)</snippet></ROW><ROW><id>3319568</id><snippet>.SetSizer(sizer)</snippet></ROW><ROW><id>3319568</id><snippet>.Fit()</snippet></ROW><ROW><id>3319568</id><snippet>import wx

class Frame(wx.Frame):
  def __init__(self):
    wx.Frame.__init__(self, parent=None)
    panel = Panel(parent=self)
    custom = CustomWidget(parent=panel)
    self.Show()

class Panel(wx.Panel):
  def __init__(self, parent):
    wx.Panel.__init__(self, parent=parent)
    self.SetSize(parent.GetClientSize())

class CustomWidget(wx.PyControl):
  def __init__(self, parent):
    wx.PyControl.__init__(self, parent=parent)

    # Create the sizer and make it work for the CustomWidget        
    sizer = wx.GridBagSizer()
    self.SetSizer(sizer)

    # Create the CustomWidget's children
    text = wx.TextCtrl(parent=self)
    spin = wx.SpinButton(parent=self, style=wx.SP_VERTICAL)

    # Add the children to the sizer        
    sizer.Add(text, pos=(0, 0), flag=wx.ALIGN_CENTER)
    sizer.Add(spin, pos=(0, 1), flag=wx.ALIGN_CENTER)

    # Set sizer and fit, then layout
    self.SetSizerAndFit(sizer)
    self.Layout()

  # ------------------------------------------------------------
  #  # Make sure that CustomWidget will auto-Layout() upon resize
  #  self.Bind(wx.EVT_SIZE, self.OnSize)
  #  self.Fit()
  #  
  #def OnSize(self, event):
  #  self.Layout()
  # ------------------------------------------------------------    

app = wx.App(False)
frame = Frame()
app.MainLoop()
</snippet></ROW><ROW><id>3319570</id><snippet>_job_locks</snippet></ROW><ROW><id>3319570</id><snippet>one_time_init</snippet></ROW><ROW><id>3319570</id><snippet>RLock</snippet></ROW><ROW><id>3319570</id><snippet>Lock</snippet></ROW><ROW><id>3319570</id><snippet>with</snippet></ROW><ROW><id>3319570</id><snippet>import threading
import weakref
_mainlock = threading.RLock()
_job_locks = weakref.WeakValueDictionary()

def do_thing(job_id):
    with _mainlock:
        _job_locks.setdefault(job_id, threading.RLock())
    with _job_locks[job_id]:
        one_time_init(job_id)
</snippet></ROW><ROW><id>3319744</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdin.encoding
'cp437'
&gt;&gt;&gt; print urllib.urlencode({'foo':raw_input('&gt; ').decode('cp437').encode('utf8')})
&gt; áéíóúñ
foo=%C3%A1%C3%A9%C3%AD%C3%B3%C3%BA%C3%B1
</snippet></ROW><ROW><id>3319758</id><snippet> # results will contain your large dataset ...
 handle = open("filename.txt", "w")
 handle.write(results)
 handle.close()
</snippet></ROW><ROW><id>3319758</id><snippet> with open("filename.txt", "w") as f:
     f.write(results)
</snippet></ROW><ROW><id>3319758</id><snippet> # results will contain your large dataset ...
 handle = open("filename.txt", "w")
 handle.write(''.join(results)) # a little ugly, though
 handle.close()
</snippet></ROW><ROW><id>3319758</id><snippet> with open("filename.txt", "w") as f:
     for item in results:
         f.write(item)
</snippet></ROW><ROW><id>3319830</id><snippet>cherrypy.request</snippet></ROW><ROW><id>3319830</id><snippet>cherrypy.request.onloadalert="Warning!"
</snippet></ROW><ROW><id>3319830</id><snippet>cherrypy.request</snippet></ROW><ROW><id>3320142</id><snippet>\1</snippet></ROW><ROW><id>3320142</id><snippet>\\1</snippet></ROW><ROW><id>3320142</id><snippet>r"\n\1;"</snippet></ROW><ROW><id>3320255</id><snippet>.+?</snippet></ROW><ROW><id>3320255</id><snippet>.+</snippet></ROW><ROW><id>3320255</id><snippet>re.DOTALL</snippet></ROW><ROW><id>3320255</id><snippet>.</snippet></ROW><ROW><id>3320255</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>3320255</id><snippet>^</snippet></ROW><ROW><id>3320255</id><snippet>$</snippet></ROW><ROW><id>3320255</id><snippet>|</snippet></ROW><ROW><id>3320426</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches

def main():
    # Generate some random data
    nx, ny = 100, 100
    data = np.random.random((ny,nx))

    # Define a circle in the center of the data with a radius of 20 pixels
    radius = 20
    center_x = nx // 2
    center_y = ny // 2

    plot_masked(data, center_x, center_y, radius)
    plot_clipped(data, center_x, center_y, radius)
    plt.show()

def plot_masked(data, center_x, center_y, radius):
    """Plots the image masked outside of a circle using masked arrays"""
    # Calculate the distance from the center of the circle
    ny, nx = data.shape
    ix, iy = np.meshgrid(np.arange(nx), np.arange(ny))
    distance = np.sqrt((ix - center_x)**2 + (iy - center_y)**2)

    # Mask portions of the data array outside of the circle
    data = np.ma.masked_where(distance &gt; radius, data)

    # Plot
    plt.figure()
    plt.imshow(data)
    plt.title('Masked Array')

def plot_clipped(data, center_x, center_y, radius):
    """Plots the image clipped outside of a circle by using a clip path"""
    fig = plt.figure()
    ax = fig.add_subplot(111)

    # Make a circle
    circ = patches.Circle((center_x, center_y), radius, facecolor='none')
    ax.add_patch(circ) # Plot the outline

    # Plot the clipped image
    im = ax.imshow(data, clip_path=circ, clip_on=True)

    plt.title('Clipped Array')

main()
</snippet></ROW><ROW><id>3320426</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def main():
    # Contour some regular (fake) data
    grid = np.arange(100).reshape((10,10))
    plt.contourf(grid)

    # Verticies of the clipping polygon in counter-clockwise order
    #  (A triange, in this case)
    poly_verts = [(2, 2), (5, 2.5), (6, 8), (2, 2)]

    mask_outside_polygon(poly_verts)

    plt.show()

def mask_outside_polygon(poly_verts, ax=None):
    """
    Plots a mask on the specified axis ("ax", defaults to plt.gca()) such that
    all areas outside of the polygon specified by "poly_verts" are masked.  

    "poly_verts" must be a list of tuples of the verticies in the polygon in
    counter-clockwise order.

    Returns the matplotlib.patches.PathPatch instance plotted on the figure.
    """
    import matplotlib.patches as mpatches
    import matplotlib.path as mpath

    if ax is None:
        ax = plt.gca()

    # Get current plot limits
    xlim = ax.get_xlim()
    ylim = ax.get_ylim()

    # Verticies of the plot boundaries in clockwise order
    bound_verts = [(xlim[0], ylim[0]), (xlim[0], ylim[1]), 
                   (xlim[1], ylim[1]), (xlim[1], ylim[0]), 
                   (xlim[0], ylim[0])]

    # A series of codes (1 and 2) to tell matplotlib whether to draw a line or 
    # move the "pen" (So that there's no connecting line)
    bound_codes = [mpath.Path.MOVETO] + (len(bound_verts) - 1) * [mpath.Path.LINETO]
    poly_codes = [mpath.Path.MOVETO] + (len(poly_verts) - 1) * [mpath.Path.LINETO]

    # Plot the masking patch
    path = mpath.Path(bound_verts + poly_verts, bound_codes + poly_codes)
    patch = mpatches.PathPatch(path, facecolor='white', edgecolor='none')
    patch = ax.add_patch(patch)

    # Reset the plot limits to their original extents
    ax.set_xlim(xlim)
    ax.set_ylim(ylim)

    return patch

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3320429</id><snippet>os.path.isabs</snippet></ROW><ROW><id>3320429</id><snippet>True</snippet></ROW><ROW><id>3320429</id><snippet>False</snippet></ROW><ROW><id>3320429</id><snippet>os.path.isabs(my_path)
</snippet></ROW><ROW><id>3320498</id><snippet>__init__.py</snippet></ROW><ROW><id>3320498</id><snippet>subscription</snippet></ROW><ROW><id>3320498</id><snippet>acme</snippet></ROW><ROW><id>3320498</id><snippet>__init__.py</snippet></ROW><ROW><id>3320498</id><snippet>import world.acme.subscription</snippet></ROW><ROW><id>3320498</id><snippet>__init__.py</snippet></ROW><ROW><id>3320498</id><snippet>__init__.py</snippet></ROW><ROW><id>3320498</id><snippet>import subscription</snippet></ROW><ROW><id>3320498</id><snippet>__init__.py</snippet></ROW><ROW><id>3320532</id><snippet>threading</snippet></ROW><ROW><id>3320532</id><snippet>mutex</snippet></ROW><ROW><id>3321131</id><snippet>class A(object):
        pass

class B(A):
        pass

class C(A):
        pass

a = A()
b = B()
c = C()

&gt;&gt;&gt; type.mro(type(b))
[&lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;]
&gt;&gt;&gt; type.mro(type(c))
[&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;]
</snippet></ROW><ROW><id>3321131</id><snippet>&gt;&gt;&gt; type(b).mro()
</snippet></ROW><ROW><id>3321131</id><snippet>&gt;&gt;&gt; A = type("A", (object,), {'a':'A var'})  # create class A
&gt;&gt;&gt; B = type("B", (A,), {'b':'B var'})       # create class B
&gt;&gt;&gt; myvar = B()

def getvars(obj):
    ''' return dict where key/value is attribute-name/class-name '''
    retval = dict()
    for i in type(obj).mro():
        for k in i.__dict__:
            if not k.startswith('_'):
                retval[k] = i.__name__
    return retval

&gt;&gt;&gt; getvars(myvar)
{'a': 'A', 'b': 'B'}

&gt;&gt;&gt; for i in getvars(myvar):
    print getattr(myvar, i)   # or use setattr to modify the attribute value

A Var
B Var
</snippet></ROW><ROW><id>3321380</id><snippet>download_results.write('%s' % (s[i:i+60]))
</snippet></ROW><ROW><id>3321380</id><snippet>download_results.write('%s\n' % (s[i:i+60]))
</snippet></ROW><ROW><id>3321694</id><snippet>lines = [item for item in open('C:\textfile.txt', 'r').read().split(' ') if item.startswith("JJ")]</snippet></ROW><ROW><id>3321746</id><snippet>http://docs.python.org/reference/datamodel.html#object.__cmp__</snippet></ROW><ROW><id>3321746</id><snippet>__cmp__(self, other)</snippet></ROW><ROW><id>3321746</id><snippet>__cmp__</snippet></ROW><ROW><id>3321746</id><snippet>def __cmp__(self, obj):
    return cmp(obj.code, self.code)
</snippet></ROW><ROW><id>3321746</id><snippet>cmp()</snippet></ROW><ROW><id>3321746</id><snippet>__cmp__</snippet></ROW><ROW><id>3321746</id><snippet>__eq__</snippet></ROW><ROW><id>3321746</id><snippet>__cmp__</snippet></ROW><ROW><id>3321789</id><snippet>for i in 1 2 3 4 5 6 7 8 9 10
do
    python myapp.py &amp;
done
</snippet></ROW><ROW><id>3322242</id><snippet>lock_acquired = False
while not lock_acquired:
    try:
        move(fh, fhtemp)
    except:
        sleep(3)
    else:
        lock_acquired = True
# do your writing
move(fhtemp, fh)
lock_acquired = False
</snippet></ROW><ROW><id>3322242</id><snippet>move</snippet></ROW><ROW><id>3322242</id><snippet>open</snippet></ROW><ROW><id>3322242</id><snippet># each instance of the process should have a different filename here
process_lockfile = '/path/to/hostname.pid.lock'
# all processes should have the same filename here
global_lockfile = '/path/to/lockfile'
# create the file if necessary (only once, at the beginning of each process)
with open(process_lockfile, 'w') as f:
    f.write('\n') # or maybe write the hostname and pid

# now, each time you have to lock the file:
lock_acquired = False
while not lock_acquired:
    try:
        link(process_lockfile, global_lockfile)
    except:
        lock_acquired = (stat(process_lockfile).st_nlinks == 2)
    else:
        lock_acquired = True
# do your writing
unlink(global_lockfile)
lock_acquired = False
</snippet></ROW><ROW><id>3322334</id><snippet>pow</snippet></ROW><ROW><id>3322334</id><snippet>from math import *</snippet></ROW><ROW><id>3322334</id><snippet>pow</snippet></ROW><ROW><id>3322334</id><snippet>import math</snippet></ROW><ROW><id>3322334</id><snippet>open</snippet></ROW><ROW><id>3322334</id><snippet>os.open</snippet></ROW><ROW><id>3322448</id><snippet>itertools.izip</snippet></ROW><ROW><id>3322448</id><snippet>from itertools import izip
for line_from_file_1, line_from_file_2 in izip(open(file_1), open(file_2)):
</snippet></ROW><ROW><id>3322448</id><snippet>izip_longest</snippet></ROW><ROW><id>3322481</id><snippet>flag_to_do_something = 0</snippet></ROW><ROW><id>3322481</id><snippet>flag_to_do_something</snippet></ROW><ROW><id>3322481</id><snippet>g = [1,2,3]
def a():
    g = [1,2]
a()
print g #outputs [1,2,3]

g = [1,2,3]
def b():
    g.remove(3)
b()
print g #outputs [1,2]
</snippet></ROW><ROW><id>3322677</id><snippet>add</snippet></ROW><ROW><id>3322677</id><snippet>+</snippet></ROW><ROW><id>3322677</id><snippet>Integer</snippet></ROW><ROW><id>3322677</id><snippet>add</snippet></ROW><ROW><id>3322677</id><snippet>Float</snippet></ROW><ROW><id>3322677</id><snippet>add</snippet></ROW><ROW><id>3322677</id><snippet>Bignum</snippet></ROW><ROW><id>3322677</id><snippet>add</snippet></ROW><ROW><id>3322677</id><snippet>add</snippet></ROW><ROW><id>3322677</id><snippet>Addable</snippet></ROW><ROW><id>3322756</id><snippet>re.findall(r'\d+: (.+)(?:, .+)*\.', input, re.M | re.S)
</snippet></ROW><ROW><id>3322756</id><snippet>re.findall(r'(\d+): (.+)(?:, .+)*\.', input, re.M | re.S)
</snippet></ROW><ROW><id>3322756</id><snippet>re.findall(r'[^,]+,|[^,]+$', re.findall(r'\d+: (.+)(?:, .+)*\.', input, re.M | re.S)[0],re.M|re.S)
</snippet></ROW><ROW><id>3322769</id><snippet>session.delete(instance)
</snippet></ROW><ROW><id>3322854</id><snippet>import random

a = [1,2,3,4,5,6,7,8,9,0,'a','b','c','d','e','f','g','h','i','j','k','l','m']
parts=[a[i:i+10] for i in range(0, len(a), 10)]
map(random.shuffle,parts)
result = sum(parts,[])
</snippet></ROW><ROW><id>3323013</id><snippet>sys.setrecursionlimit</snippet></ROW><ROW><id>3323810</id><snippet>chardet.detect</snippet></ROW><ROW><id>3323810</id><snippet>'encoding'</snippet></ROW><ROW><id>3323810</id><snippet>import chardet    
rawdata = open(infile, "r").read()
result = chardet.detect(rawdata)
charenc = result['encoding']
</snippet></ROW><ROW><id>3323846</id><snippet>if i</snippet></ROW><ROW><id>3323846</id><snippet>i</snippet></ROW><ROW><id>3323846</id><snippet>if i and not i.isspace()
</snippet></ROW><ROW><id>3323853</id><snippet>python manage.py celeryd start --settings=settings</snippet></ROW><ROW><id>3323875</id><snippet>os.walk</snippet></ROW><ROW><id>3323875</id><snippet>arcExtract</snippet></ROW><ROW><id>3323875</id><snippet>os.walk</snippet></ROW><ROW><id>3323875</id><snippet>readpst</snippet></ROW><ROW><id>3323875</id><snippet>7z</snippet></ROW><ROW><id>3323899</id><snippet>$ ipython [options] files
</snippet></ROW><ROW><id>3323899</id><snippet>ipythonrc</snippet></ROW><ROW><id>3323899</id><snippet>python -i</snippet></ROW><ROW><id>3323899</id><snippet>ipython myfile.py</snippet></ROW><ROW><id>3323996</id><snippet>from warnings import catch_warnings, simplefilter

def try_query(self, query, args=()):
    with catch_warnings():
        simplefilter('error', MySQLdb.Warning)
        try:
            if args == ():
                self.cursor.execute(query)
            else:
                self.cursor.execute(query, args)
            self.connection.commit()
        except MySQLdb.Error, e:
            self.connection.rollback()
            raise e
</snippet></ROW><ROW><id>3323996</id><snippet>from warnings import filterwarnings

filterwarnings('ignore', category=MySQLdb.Warning)
</snippet></ROW><ROW><id>3324018</id><snippet>long</snippet></ROW><ROW><id>3324018</id><snippet>c_int64</snippet></ROW><ROW><id>3324018</id><snippet>c_void_p</snippet></ROW><ROW><id>3324360</id><snippet>__del__</snippet></ROW><ROW><id>3324360</id><snippet>__enter__</snippet></ROW><ROW><id>3324360</id><snippet>__exit__</snippet></ROW><ROW><id>3324360</id><snippet>class A(object):
    def __enter__(self):
        print 'enter'
        # create database object here (or in __init__)
        pass

    def __exit__(self, exc_type, exc_val, exc_tb):
        print 'exit'
        # save database object here

    # other methods
</snippet></ROW><ROW><id>3324360</id><snippet>with</snippet></ROW><ROW><id>3324360</id><snippet>with A() as myobj:
    print 'inside with block'
    myobj.do_something()
</snippet></ROW><ROW><id>3324360</id><snippet>with</snippet></ROW><ROW><id>3324360</id><snippet>A.__enter__</snippet></ROW><ROW><id>3324360</id><snippet>with</snippet></ROW><ROW><id>3324360</id><snippet>__exit__</snippet></ROW><ROW><id>3324360</id><snippet>with</snippet></ROW><ROW><id>3324498</id><snippet>os.path.expanduser</snippet></ROW><ROW><id>3324498</id><snippet>somefile.txt</snippet></ROW><ROW><id>3324498</id><snippet>import os
f = open(os.path.expanduser("~/Desktop/somefile.txt"))
</snippet></ROW><ROW><id>3324610</id><snippet>time.sleep()</snippet></ROW><ROW><id>3324739</id><snippet>class MyClass:
    my_member = []

    def __init__(self, arg_my_member):
        self.my_member = arg_my_member


&gt;&gt;&gt; a = MyClass(42)
&gt;&gt;&gt; print a.my_member
42
&gt;&gt;&gt; print MyClass.my_member
[]
</snippet></ROW><ROW><id>3324766</id><snippet>extra</snippet></ROW><ROW><id>3324766</id><snippet>where</snippet></ROW><ROW><id>3324766</id><snippet>select</snippet></ROW><ROW><id>3324766</id><snippet>People.objects.extra(where=['left(namefirst,1)=left(namelast,1)'])
</snippet></ROW><ROW><id>3324774</id><snippet>&lt;item&gt;
    &lt;value&gt;...&lt;/value&gt;
    &lt;date&gt;...&lt;/date&gt;
    ...
&lt;/item&gt;
</snippet></ROW><ROW><id>3324774</id><snippet>&lt;item value="..." date="..." ... /&gt;
</snippet></ROW><ROW><id>3324965</id><snippet>class C(object):
    def __init__(self):
        self._x = 0

    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, value):
        if value &lt;= 0:
            raise ValueError("Value must be positive")
        self._x = value

o = C()
print o.x
o.x = 5
print o.x
o.x = -2
</snippet></ROW><ROW><id>3325068</id><snippet>browser.addheaders = [('User-Agent', 'Mozilla/5.0 blahblah')]
</snippet></ROW><ROW><id>3325367</id><snippet>//*[@id="20"] | //*[@id="30"] | ... etc.
</snippet></ROW><ROW><id>3325584</id><snippet>@error(code)</snippet></ROW><ROW><id>3325584</id><snippet>from bottle import run, error, route

@error(500)
def handle_500_error(code):
  # add mail send code here
  return "Error message here"

@route("/test_500")
def cause_error():
  raise Exception

run()
</snippet></ROW><ROW><id>3325584</id><snippet>/test_500</snippet></ROW><ROW><id>3325584</id><snippet>@error</snippet></ROW><ROW><id>3325584</id><snippet>bottle.HTTPError</snippet></ROW><ROW><id>3325584</id><snippet>bottle.app().catchall</snippet></ROW><ROW><id>3325584</id><snippet>False</snippet></ROW><ROW><id>3325592</id><snippet>def descyear_ascauth(atup):
  datestr = atup[1]
  authstr = atup[2]
  year = int(datestr.split(None, 1)[0])
  return -year, authstr

... sorted(result, key=descyear_ascauth) ...
</snippet></ROW><ROW><id>3325592</id><snippet>lambda</snippet></ROW><ROW><id>3325592</id><snippet>def</snippet></ROW><ROW><id>3325604</id><snippet>[...].ensureIndex({"actions.time":1})
</snippet></ROW><ROW><id>3325616</id><snippet>PATH_MAX</snippet></ROW><ROW><id>3325616</id><snippet>NAME_MAX</snippet></ROW><ROW><id>3325616</id><snippet>/foo/bar</snippet></ROW><ROW><id>3325616</id><snippet>PATH_MAX</snippet></ROW><ROW><id>3325616</id><snippet>bar</snippet></ROW><ROW><id>3325616</id><snippet>NAME_MAX</snippet></ROW><ROW><id>3325616</id><snippet>pathconf</snippet></ROW><ROW><id>3325616</id><snippet>_PC_PATH_MAX</snippet></ROW><ROW><id>3325616</id><snippet>_PC_NAME_MAX</snippet></ROW><ROW><id>3325616</id><snippet>pathconf</snippet></ROW><ROW><id>3325616</id><snippet>POSIX_FOO_MAX</snippet></ROW><ROW><id>3325678</id><snippet>Client</snippet></ROW><ROW><id>3325740</id><snippet>for i in range(1, ROWS+1):
    for j in range(1, COLS+1):
        mine_field[(i, j)] = 0 # you don't even need the parentheses!
</snippet></ROW><ROW><id>3325740</id><snippet>d = {(1,2):3}
print d[1, 2] # will print 3
</snippet></ROW><ROW><id>3325743</id><snippet>class Foo(object):
    _all_names = {}
    def __init__(self, name=None):
        self.name = name
    @property
    def name(self):
        return self._name
    @name.setter
    def name(self, name):
        self._name = name
        self._all_names[name] = self
    @classmethod
    def get_by_name(cls, name):
        return cls._all_names[name]
    def __str__(self):
        return "Foo({0})".format(self.name)

a = Foo("alice")
b = Foo("bob")
print Foo.get_by_name("alice")
</snippet></ROW><ROW><id>3325928</id><snippet>import moduleX
dir(moduleX)
help(moduleX)
</snippet></ROW><ROW><id>3326069</id><snippet>
import sqlite3
import re
import numpy as np
from numpy import *
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

conn = sqlite3.connect('./RES/resDB.dbl')

fig = plt.figure()
ax = Axes3D(fig)

sam = array([])
x = array([])
y = array([])
z = array([])

for sv in conn.execute('select sam,easting,northing,altitude from trx_all'):
    sam = np.append(sam, [sv[0]]) #this works: sam = np.append(sam, [float(sv[0])])
    x = np.append(x, [sv[1]]) #this works: x = np.append(x, [float(sv[1])])
    y = np.append(y, [sv[2]]) #this works: y = np.append(y, [float(sv[2])])
    z = np.append(z, [sv[3]]) #this works: z = np.append(z, [float(sv[3])])
if sam.__len__() &gt; 0:
    print(repr(x))
    print(repr(y))
    print(repr(z))
    ax.scatter(x, y, z, marker='o')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title("3D plot")
plt.show()
</snippet></ROW><ROW><id>3326069</id><snippet>
x: array([u'227004.744896075', u'227029.694213685', u'227051.351657645', ...,
       u'226416.484484696', u'226436.436477995', u'226401.253669657'],
      dtype='U16')
y: array([u'3648736.75423911', u'3648737.3357031', u'3648746.34280013', ...,
       u'3645870.67565062', u'3645893.61216942', u'3645866.95833722'],
      dtype='U16')
z: array([u'1600.2589433603', u'1535.77224937826', u'1429.01016684435', ...,
       u'341.064685015939', u'343.452275622636', u'312.491347198375'],
      dtype='U16')
</snippet></ROW><ROW><id>3326069</id><snippet>
Traceback (most recent call last):
  File "C:\stripped_3dplot.py", line 27, in 
    ax.scatter(x, y, z, marker='o')
  File "C:\Python27\lib\site-packages\mpl_toolkits\mplot3d\axes3d.py", line 1019, in scatter
    patches = Axes.scatter(self, xs, ys, *args, **kwargs)
  File "C:\Python27\lib\site-packages\matplotlib\axes.py", line 5813, in scatter
    minx = np.amin(temp_x)
  File "C:\Python27\lib\site-packages\numpy\core\fromnumeric.py", line 1846, in amin
    return amin(axis, out)
TypeError: cannot perform reduce with flexible type
</snippet></ROW><ROW><id>3326183</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>3326183</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>3326183</id><snippet>$PATH</snippet></ROW><ROW><id>3326183</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>3326183</id><snippet>$ python -V
Python 2.5.4
</snippet></ROW><ROW><id>3326183</id><snippet>$ /usr/bin/env python -V
</snippet></ROW><ROW><id>3326183</id><snippet>/usr/bin/env</snippet></ROW><ROW><id>3326471</id><snippet>[f for (subdir, dirs, files) in os.walk(rootdir) for f in files]

sum([files for (subdir, dirs, files) in os.walk(rootdir)], [])
</snippet></ROW><ROW><id>3326471</id><snippet>$ find /tmp/test
/tmp/test
/tmp/test/subdir1
/tmp/test/subdir1/file1
/tmp/test/subdir2
/tmp/test/subdir2/file2
$ python
&gt;&gt;&gt; import os
&gt;&gt;&gt; rootdir = "/tmp/test"
&gt;&gt;&gt; [f for (subdir, dirs, files) in os.walk(rootdir) for f in files]
['file1', 'file2']
&gt;&gt;&gt; sum([files for (subdir, dirs, files) in os.walk(rootdir)], [])
['file1', 'file2']
</snippet></ROW><ROW><id>3326859</id><snippet>divisibleby</snippet></ROW><ROW><id>3326859</id><snippet>&lt;tr&gt;
{% for person in people %}
    &lt;td&gt;{{ person }}&lt;/td&gt;
    {% if forloop.counter|divisibleby:4 and not forloop.last %}&lt;/tr&gt;&lt;tr&gt;{% endif %}
{% endfor %}
&lt;/tr&gt;
</snippet></ROW><ROW><id>3327090</id><snippet>from time import clock
from random import randint
a=[True for _ in range(randint(1000000,10000000))]
spacing=randint(3,101)
t=clock()
try:
    a[::spacing]=[False]
except ValueError as e:
    a[::spacing]=[False]*int(e.message.rsplit(' ',1)[-1])

print spacing,clock()-t

# baseline

t=clock()
a[::spacing]=[False]*len(a[::spacing])
print 'Baseline:',spacing,clock()-t
</snippet></ROW><ROW><id>3327251</id><snippet>put_wall_post</snippet></ROW><ROW><id>3327375</id><snippet>connection.escape</snippet></ROW><ROW><id>3327375</id><snippet>MySQLdb.converters.conversions</snippet></ROW><ROW><id>3327375</id><snippet>{0: &lt;class 'decimal.Decimal'&gt;,
 1: &lt;type 'int'&gt;,
...
 &lt;type 'dict'&gt;: &lt;built-in function escape_dict&gt;,
 &lt;type 'NoneType'&gt;: &lt;function None2NULL at 0xae9717c&gt;,
 &lt;type 'set'&gt;: &lt;function Set2Str at 0xae9709c&gt;,
 &lt;type 'str'&gt;: &lt;function Thing2Literal at 0xae971b4&gt;,
 &lt;type 'tuple'&gt;: &lt;built-in function escape_sequence&gt;,
 &lt;type 'object'&gt;: &lt;function Instance2Str at 0xae971ec&gt;,
 &lt;type 'unicode'&gt;: &lt;function Unicode2Str at 0xae9710c&gt;,
 &lt;type 'array.array'&gt;: &lt;function array2Str at 0xae9725c&gt;,
 &lt;type 'bool'&gt;: &lt;function Bool2Str at 0xae97294&gt;}
</snippet></ROW><ROW><id>3327375</id><snippet>import MySQLdb
import MySQLdb.converters
import datetime

now=datetime.datetime.now()
connection=MySQLdb.connect(
    host=HOST,user=USER,passwd=PASS,db=MYDB)
print(connection.escape((1,2,now),MySQLdb.converters.conversions))
# ('1', '2', "'2010-07-24 19:33:59'")
</snippet></ROW><ROW><id>3327375</id><snippet>cursor.execute</snippet></ROW><ROW><id>3327375</id><snippet>sql='insert into students (name,grade,date) values (%s, %s, %s)'
args=("Robert'); DROP TABLE Students; --",60,now)   # no manual quotation necessary
cursor=connection.cursor()
cursor.execute(sql,args)
</snippet></ROW><ROW><id>3327459</id><snippet>file</snippet></ROW><ROW><id>3327459</id><snippet>read()</snippet></ROW><ROW><id>3327459</id><snippet>readline()</snippet></ROW><ROW><id>3327459</id><snippet>write()</snippet></ROW><ROW><id>3327459</id><snippet>tokenize.generate_tokens</snippet></ROW><ROW><id>3327459</id><snippet>generate_tokens()</snippet></ROW><ROW><id>3327459</id><snippet>readline()</snippet></ROW><ROW><id>3327459</id><snippet>StringIO</snippet></ROW><ROW><id>3327487</id><snippet>ID   RIGHT
1    DELETE
2    UPDATE
</snippet></ROW><ROW><id>3327487</id><snippet>ID  TITLE           CONTENT
1   blog entry 1    This is a blog entry
2   blog entry 2    This is another blog entry
</snippet></ROW><ROW><id>3327487</id><snippet>ID   NAME
1    Bob
2    Alice
</snippet></ROW><ROW><id>3327487</id><snippet>ID USER_ID RIGHT_ID BLOG_ID
1  1       2        1
2  2       1        1
3  2       2        1
4  2       1        2
5  2       2        2
</snippet></ROW><ROW><id>3327776</id><snippet>time.sleep(seconds)</snippet></ROW><ROW><id>3327776</id><snippet>import time

print 1
time.sleep(1)
print 2
time.sleep(0.45)
print 3
time.sleep(3)
print 4
</snippet></ROW><ROW><id>3327780</id><snippet>msvcrt</snippet></ROW><ROW><id>3327780</id><snippet>curses</snippet></ROW><ROW><id>3327940</id><snippet>import urllib2

request = urllib2.Request('http://example.com/path')
response = urllib2.urlopen(request)
content = response.read()

# now make the second request, just as above
</snippet></ROW><ROW><id>3328028</id><snippet>os.path.realpath</snippet></ROW><ROW><id>3328028</id><snippet>os.path.commonprefix</snippet></ROW><ROW><id>3328028</id><snippet>os.path.commonprefix(['/the/dir/', os.path.realpath(filename)])
</snippet></ROW><ROW><id>3328028</id><snippet>os.path.realpath</snippet></ROW><ROW><id>3328028</id><snippet>..</snippet></ROW><ROW><id>3328028</id><snippet>os.path.commonprefix</snippet></ROW><ROW><id>3328028</id><snippet>`/the/dirtwo/filename'</snippet></ROW><ROW><id>3328028</id><snippet>'/the/dir'</snippet></ROW><ROW><id>3328169</id><snippet># example.rb
require 'win32/api'
include Win32

FindWindow = API.new('FindWindow', 'PP', 'L', 'user32')
hWnd = FindWindow.call(nil, "firefox")
if (hWnd == 0)
  puts "firefox not found"
  exit 1
end

MoveWindow = API.new('MoveWindow', 'LIIIII', 'I', 'user32')
ret = MoveWindow.call(hWnd, 0, 0, 1024, 768, true)
if (ret == 0)
  puts "MoveWindow failed"
  exit 1
end

puts "success"
</snippet></ROW><ROW><id>3328359</id><snippet>**</snippet></ROW><ROW><id>3328359</id><snippet>&gt;&gt;&gt; 2 ** 2 ** 3
256
</snippet></ROW><ROW><id>3328359</id><snippet>==</snippet></ROW><ROW><id>3328359</id><snippet>&gt;</snippet></ROW><ROW><id>3328359</id><snippet>x [cmp] y [cmp] z</snippet></ROW><ROW><id>3328359</id><snippet>(x [cmp] y) and (y [cmp] z)</snippet></ROW><ROW><id>3328629</id><snippet>time { python clean.py ; }
0: 0
1: 199990
2: 1999919999999980
3: 19999199999999919999999970
4: 199991999999999199999999919999999960
5: 1999919999999991999999999199999999919999999950
6: 19999199999999919999999991999999999199999999919999999940
7: 199991999999999199999999919999999991999999999199999999919999999930
8: 1999919999999991999999999199999999919999999991999999999199999999919999999920
9: 19999199999999919999999991999999999199999999919999999991999999999199999999919999999918

real    0m0.777s
user    0m0.772s
sys 0m0.004s
</snippet></ROW><ROW><id>3328629</id><snippet>cache = {}
def how_many_used(n):
    if n in cache:
        return cache[n]
    result = 0
    if int(n) &gt;= 10:
        if n[0] == '1':
            result += int(n[1:]) + 1
        result += how_many_used(str(int(n[1:])))
        result += how_many_used(str(int(str(int(n[0])-1) + "9"*(len(n) - 1))))
    else:
        result += 1 if n &gt;= '1' else 0
    if n.endswith("9" * (len(n)-0)) or n.endswith("0" * (len(n)-1)):
        cache[n] = result
    return result

def how_many_have(i, stickers):
    return int(i) * stickers

def end_state(i, stickers):
    if i == '':
        return 0
    return how_many_have(i, stickers) - how_many_used(i)

cache2 = {}
def lowest_state(i, stickers):
    if stickers &lt;= 0:
        return end_state(i, stickers)
    if i in ('', '0'):
        return 0
    if (i, stickers) in cache2:
        return cache2[(i, stickers)]

    lowest_candidats = []

    tail9 = '9' * (len(i)-1)
    if i[0] == '1':
        tail = str(int('0'+i[1:]))
        lowest_candidats.append(end_state(str(10**(len(i) - 1)), stickers))
        lowest_candidats.append(lowest_state(tail, stickers - 1) + end_state(str(10**(len(i) - 1)), stickers))
    else:
        tail = str(int(i[0])-1) + tail9
        series = end_state(tail9, stickers)
        if series &lt; 0:
             lowest_candidats.append(lowest_state(str(int('0'+i[1:])), stickers) + end_state(i[0] + '0'*(len(i)-1), stickers))
        lowest_candidats.append(lowest_state(tail, stickers))
    result =  min(lowest_candidats)
    cache2[(i, stickers)] = result
    return result

def solve(stickers):
    i=1
    while lowest_state(str(i), stickers) &gt;= 0:
        i *= 2

    top = i
    bottom = 0
    center = 0

    while top - bottom &gt; 1:
        center = (top + bottom) / 2
        if lowest_state(str(center), stickers) &gt;= 0:
            bottom = center
        else:
            top = center

    if lowest_state(str(top), stickers) &gt;= 0:
        return top
    else:
        return bottom

import sys
sys.setrecursionlimit(sys.getrecursionlimit() * 10)

for i in xrange(10):
    print "%d: %d" % (i, solve(i))
</snippet></ROW><ROW><id>3328761</id><snippet>Greeting</snippet></ROW><ROW><id>3328761</id><snippet>Greeting.author</snippet></ROW><ROW><id>3328761</id><snippet>greeting.author.nickname</snippet></ROW><ROW><id>3328761</id><snippet>Greeting</snippet></ROW><ROW><id>3328761</id><snippet>User</snippet></ROW><ROW><id>3328761</id><snippet>author</snippet></ROW><ROW><id>3328761</id><snippet>db.UserProperty</snippet></ROW><ROW><id>3328761</id><snippet># fetch up to 10 greetings by the current user
user = users.get_current_user()
results = Greeting.all().filter('author =', user).fetch(10)
</snippet></ROW><ROW><id>3328761</id><snippet>author</snippet></ROW><ROW><id>3328761</id><snippet>Greeting</snippet></ROW><ROW><id>3328761</id><snippet>author</snippet></ROW><ROW><id>3328761</id><snippet>Greeting</snippet></ROW><ROW><id>3328761</id><snippet>author.nickname</snippet></ROW><ROW><id>3328761</id><snippet>author_nickname</snippet></ROW><ROW><id>3328761</id><snippet>Greeting</snippet></ROW><ROW><id>3328761</id><snippet>author.nickname</snippet></ROW><ROW><id>3328761</id><snippet>class Greeting(db.Model):
    author = db.UserProperty()
    author_nickname = db.StringProperty() # denormalization (copy of author.nickname)
    content = db.StringProperty(multiline = True)
    date = db.DateTimeProperty(auto_now_add=True)
</snippet></ROW><ROW><id>3328761</id><snippet>author_nickname</snippet></ROW><ROW><id>3328761</id><snippet>author</snippet></ROW><ROW><id>3328840</id><snippet>mmap</snippet></ROW><ROW><id>3328840</id><snippet># -*- coding: utf-8 -*-
from ctypes import (
    pythonapi, c_void_p, c_size_t, c_int, c_uint64,
    c_byte, cast, POINTER, memmove, string_at,
)
import errno

mmap = pythonapi.mmap
mmap.restype = c_void_p
mmap.argtypes = [c_void_p, c_size_t, c_int, c_int, c_int, c_uint64]

munmap = pythonapi.munmap
munmap.restype = c_int
munmap.argtypes = [c_void_p, c_size_t]

errno_location = pythonapi.__errno_location
errno_location.restype = POINTER(c_int)

errormessage = lambda: errno.errorcode[errno_location()[0]]

PROT_NONE = 0
PROT_READ = 1
PROT_WRITE = 2
PROT_EXEC = 4

MAP_SHARED = 1
MAP_PRIVATE = 2
MAP_ANONYMOUS = 0x20

class RawData(object):
    "Allocated with mmap -call, no file handles."
    def __init__(self, length, prot):
        flags = MAP_PRIVATE | MAP_ANONYMOUS
        self.address = mmap(None, length, prot, flags, -1, 0)
        if 0 == self.address:
            raise Exception(errormessage())
        self.__length = length
        self.__accessor = cast(self.address, POINTER(c_byte))

    def __len__(self):
        return self.__length

    def __getitem__(self, key):
        assert key &lt; len(self)
        return self.__accessor[key]

    def __setitem__(self, key, value):
        assert key &lt; len(self)
        self.__accessor[key] = value

    def close(self):
        "the mapped memory must be freed manually"
        if 0 != munmap(self.address, len(self)):
            raise Exception(errormessage())

    def poke(self, offset, data):
        "poke data (from a tuple) into requested offset"
        for i, byte in enumerate(data):
            self[offset+i] = byte

    def upload(self, data, offset=0):
        "upload the data from a string"
        data = data.tostring()
        assert offset+len(data) &lt;= len(self)
        memmove(self.address+offset, data, len(data))

    def tostring(self):
        return string_at(self.address, len(self))

__all__ = [
    'PROT_NONE',
    'PROT_READ',
    'PROT_WRITE',
    'PROT_EXEC',
    'RawData',
]
</snippet></ROW><ROW><id>3328840</id><snippet># -*- coding: utf-8 -*-

TWOPOWER32 = 1 &lt;&lt; 32
TWOPOWER64 = 1 &lt;&lt; 64

TWOPOWER31 = TWOPOWER32 &gt;&gt; 1
TWOPOWER63 = TWOPOWER64 &gt;&gt; 1

def uint32(value):
    assert 0 &lt;= value &lt; TWOPOWER32
    return (
        value &gt;&gt; 0 &amp; 255,
        value &gt;&gt; 8 &amp; 255,
        value &gt;&gt; 16 &amp; 255,
        value &gt;&gt; 24 &amp; 255
    )

def uint64(value):
    assert 0 &lt;= value &lt; TWOPOWER64
    return (
        value &gt;&gt; 0 &amp; 255,
        value &gt;&gt; 8 &amp; 255,
        value &gt;&gt; 16 &amp; 255,
        value &gt;&gt; 24 &amp; 255,
        value &gt;&gt; 32 &amp; 255,
        value &gt;&gt; 40 &amp; 255,
        value &gt;&gt; 48 &amp; 255,
        value &gt;&gt; 56 &amp; 255
    )

def int32(value):
    assert -TWOPOWER31 &lt;= value &lt; TWOPOWER31
    return uint32((TWOPOWER32 + value) &amp; (TWOPOWER32-1))

def int64(value):
    assert -TWOPOWER63 &lt;= value &lt; TWOPOWER63
    return uint64((TWOPOWER64 + value) &amp; (TWOPOWER64-1))

__all__ = ['uint32', 'int32', 'uint64', 'int64']
</snippet></ROW><ROW><id>3328840</id><snippet>from ctypes import CFUNCTYPE, c_int
from array import array
#... bunch of imports

simple = array('B')

# x86 and x64 machine code (MOV eax, 0x10; RET)
simple.extend((0x81, 0xc0) + int32(0x10))
simple.append(0xc3)

program = RawData(len(simple), PROT_READ|PROT_WRITE|PROT_EXEC)
program.upload(simple)

procedure = CFUNCTYPE(c_int)(program.address)
print "result:", procedure()

# alters the first instruction
program.poke(2, int32(123))
print "result:", procedure()

# transforms that first instruction into (NOP,NOP,NOP,NOP,NOP,NOP)
program.poke(0, [0x90]*6)
print "result:", procedure()
</snippet></ROW><ROW><id>3328863</id><snippet>num = 42 # or whatever default you want to use
while True:
    try:
        num = int(raw_input('Enter the number &gt; ') or num)
        break
    except ValueError:
        print 'Invalid number; please try again'
</snippet></ROW><ROW><id>3328863</id><snippet>int()</snippet></ROW><ROW><id>3328863</id><snippet>False</snippet></ROW><ROW><id>3329312</id><snippet>"</snippet></ROW><ROW><id>3329312</id><snippet>a</snippet></ROW><ROW><id>3329312</id><snippet>"</snippet></ROW><ROW><id>3329312</id><snippet>a</snippet></ROW><ROW><id>3329312</id><snippet>a</snippet></ROW><ROW><id>3329312</id><snippet>"a"
'a'
r"a"
"""a"""
r'''a'''
</snippet></ROW><ROW><id>3329312</id><snippet>"\xe2"</snippet></ROW><ROW><id>3329312</id><snippet>"\x"</snippet></ROW><ROW><id>3329312</id><snippet>if re.search(r"[\x90-\xff]", a):
</snippet></ROW><ROW><id>3329432</id><snippet>.</snippet></ROW><ROW><id>3329432</id><snippet>import re
' '.join(re.split(r'(?&lt;=[.?!])\s+', phrase, 2)[:-1])
</snippet></ROW><ROW><id>3329432</id><snippet>re.match(r'(.*?[.?!](?:\s+.*?[.?!]){0,1})', phrase).group(1)
</snippet></ROW><ROW><id>3329432</id><snippet>{0,1}</snippet></ROW><ROW><id>3329676</id><snippet>#...
is_important = True if something else False
extra_context.update({'is_important': is_important})
#...
</snippet></ROW><ROW><id>3329676</id><snippet>...
{% if is_important %}&lt;bold&gt;{{ text_to_render }}&lt;/bold&gt;{% else %}{{ text_to_render }}{% endif %}
...
</snippet></ROW><ROW><id>3329676</id><snippet>...
&lt;span {% if is_important %}class="is-important"{% endif %}&gt;
{{ text_to_render }}
&lt;/span&gt;
...
</snippet></ROW><ROW><id>3329676</id><snippet>.is-important{
    font-weight: bold;
}
</snippet></ROW><ROW><id>3329789</id><snippet>print qqq.pop()</snippet></ROW><ROW><id>3329928</id><snippet>192.168.*.*</snippet></ROW><ROW><id>3330259</id><snippet>import rpm
ts = rpm.TransactionSet()
mi = ts.dbMatch()
mi.pattern('name', rpm.RPMMIRE_GLOB, 'py*' )
for h in mi:
   # Do something with the header... 
</snippet></ROW><ROW><id>3330351</id><snippet>Set-Cookie: session=7878dfdsfjsdf89sd89f8df9; path=/; domain=.mysite.com
</snippet></ROW><ROW><id>3330716</id><snippet>line = [item for item in open('C:\chiptext.txt', 'r').read().split(' ')
          if item.startswith("SNP") or item.startswith("AFFY")]
</snippet></ROW><ROW><id>3330716</id><snippet>with open('C:\\datatext.txt', 'r') as datafile:
  lines = datafile.read().split(' ')
matchedLines = [item for item in lines if (PREDICATE)]
</snippet></ROW><ROW><id>3330716</id><snippet>matchedLines</snippet></ROW><ROW><id>3330716</id><snippet>trials</snippet></ROW><ROW><id>3330716</id><snippet>l = [1,2,3]
ll = [l]
print ll //[[1, 2, 3]]
</snippet></ROW><ROW><id>3330716</id><snippet>with open('C:\datatext.txt', 'r') as datafile:
  lines = datafile.read().split(' ')
matchedLines = [item for item in lines if item.startswith("name1") or item.startswith("othername")]

with open('C:\bigfile.txt', 'r') as completedataset:
  with open('C:\smallerdataset.txt', 'w') as smallerdataset:
    for line in completedataset:
      for t in matchedLines:
        if t in line:
          smallerdataset.write(line)
</snippet></ROW><ROW><id>3330883</id><snippet>self</snippet></ROW><ROW><id>3330883</id><snippet>def calculate(self, red=None, blue=None, yellow=None):
    if red is None:
        red = self.red
    if blue is None:
        blue = self.blue
    if yellow is None:
        yellow = self.yellow
    return red + blue + yellow
</snippet></ROW><ROW><id>3330883</id><snippet>def calculate(self, red=None, blue=None, yellow=None):
    red, blue, yellow = map(
        lambda (a, m): m if a is None else a,
        zip([red, blue, yellow], [self.red, self.blue, self.yellow]))
    return red + blue + yellow
</snippet></ROW><ROW><id>3330891</id><snippet>In [67]: alist = ['foo','spam', 'bar']

In [70]: [prefix+elt for elt in alist for prefix in ('','ok.') ]
Out[70]: ['foo', 'ok.foo', 'spam', 'ok.spam', 'bar', 'ok.bar']
</snippet></ROW><ROW><id>3330934</id><snippet>try:
    return results[0].id
except IndexError:
    pass # no rows returned
</snippet></ROW><ROW><id>3330934</id><snippet>import itertools

results_list = []
try:
    for i in itertools.count(0):
      results_list.append(results[i])
except IndexError:
    pass # no more rows
return results_list
</snippet></ROW><ROW><id>3331004</id><snippet>xcpt.args
</snippet></ROW><ROW><id>3331004</id><snippet>message</snippet></ROW><ROW><id>3331004</id><snippet>messages</snippet></ROW><ROW><id>3331101</id><snippet>ManagementReview</snippet></ROW><ROW><id>3331101</id><snippet>class Spam(object):
    actions = []
</snippet></ROW><ROW><id>3331101</id><snippet>class Spam(object):
    def __init__(self):
        self.actions = []
</snippet></ROW><ROW><id>3331101</id><snippet>actions = []</snippet></ROW><ROW><id>3331302</id><snippet>&gt;&gt;&gt; from django.core.files.uploadedfile import InMemoryUploadedFile
&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; buf = StringIO(data)  # `data` is your stream of bytes
&gt;&gt;&gt; buf.seek(0, 2)  # Seek to the end of the stream, so we can get its length with `buf.tell()`
&gt;&gt;&gt; file = InMemoryUploadedFile(buf, "image", "some_filename.png", None, buf.tell(), None)
&gt;&gt;&gt; photo.image.save(file.name, file)  # `photo` is an instance of `MyModel`
&gt;&gt;&gt; photo.image
&lt;ImageFieldFile: ...&gt;
</snippet></ROW><ROW><id>3331302</id><snippet>InMemoryUploadedFile</snippet></ROW><ROW><id>3331522</id><snippet>data = data[:-1]
</snippet></ROW><ROW><id>3331561</id><snippet>from django.db.models import Count
Song.objects.values('author','author__instrument').annotate(Count("id"))
</snippet></ROW><ROW><id>3331652</id><snippet>import csv

def splitit(inputfilename):
  with open(inputfilename, 'rb') as inf:
    inrd = csv.reader(inf)
    names = next(inrd)
    outfiles = [open(n+'.csv', 'wb') for n in names]
    ouwr = [csv.writer(w) for w in outfiles]
    for w, n in zip(ouwr, names):
      w.writerow([n])
    for row in inrd:
      for w, r in zip(ouwr, row):
        ouwr.writerow([r])
    for o in outfiles: o.close()
</snippet></ROW><ROW><id>3331658</id><snippet>for i, (letter, word) in enumerate(seq_nested):
  print i, letter, word
</snippet></ROW><ROW><id>3331904</id><snippet>utf8</snippet></ROW><ROW><id>3331904</id><snippet>... python -c "print repr(open('small_script.sql', 'rb').read())"
</snippet></ROW><ROW><id>3331904</id><snippet>\xhh</snippet></ROW><ROW><id>3331904</id><snippet>\xc3\xa2</snippet></ROW><ROW><id>3331904</id><snippet>cp1252</snippet></ROW><ROW><id>3331904</id><snippet>Latin1</snippet></ROW><ROW><id>3331904</id><snippet>ISO-8859-1</snippet></ROW><ROW><id>3331904</id><snippet>UTF-8</snippet></ROW><ROW><id>3331904</id><snippet>fixed_data = data.decode('cp1252').encode('utf8')</snippet></ROW><ROW><id>3332156</id><snippet>:syntax on
</snippet></ROW><ROW><id>3332156</id><snippet>filetype plugin on
</snippet></ROW><ROW><id>3332233</id><snippet>def register(self, *args, **kwargs)
</snippet></ROW><ROW><id>3332595</id><snippet>my $test = "Hello (Stack Overflow)";
   $test =~ /\(([^)]+)\)/;
my $matched_string = $1; 
print "$matched_string\n";  
</snippet></ROW><ROW><id>3332595</id><snippet>Stack Overflow
</snippet></ROW><ROW><id>3333310</id><snippet>Timer</snippet></ROW><ROW><id>3333310</id><snippet>j</snippet></ROW><ROW><id>3333310</id><snippet>"test(%d)" % j</snippet></ROW><ROW><id>3333310</id><snippet>from __main__ import j</snippet></ROW><ROW><id>3333310</id><snippet>j</snippet></ROW><ROW><id>3333310</id><snippet>timeit</snippet></ROW><ROW><id>3333310</id><snippet>test</snippet></ROW><ROW><id>3333310</id><snippet>j</snippet></ROW><ROW><id>3333310</id><snippet>from __main__ import</snippet></ROW><ROW><id>3333386</id><snippet>write</snippet></ROW><ROW><id>3333386</id><snippet>sys.stdout = &lt;your new class&gt;</snippet></ROW><ROW><id>3333386</id><snippet>class IORedirector(object):
    '''A general class for redirecting I/O to this Text widget.'''
    def __init__(self,text_area):
        self.text_area = text_area

class StdoutRedirector(IORedirector):
    '''A class for redirecting stdout to this Text widget.'''
    def write(self,str):
        self.text_area.write(str,False)
</snippet></ROW><ROW><id>3333386</id><snippet># To start redirecting stdout:
import sys
sys.stdout = StdoutRedirector( self )
# (where self refers to the widget)

# To stop redirecting stdout:
sys.stdout = sys.__stdout__
</snippet></ROW><ROW><id>3333410</id><snippet>&gt;&gt;&gt; import sqlite3 as standard
&gt;&gt;&gt; from pysqlite2 import dbapi2 as latest
&gt;&gt;&gt; for m in (standard, latest):
...    print m.sqlite_version
...
3.5.9
3.6.2
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3333458</id><snippet>def __new__(self,a,b):
    s=a
    return str.__new__(A,s)
</snippet></ROW><ROW><id>3333656</id><snippet>gc</snippet></ROW><ROW><id>3333656</id><snippet>which_list</snippet></ROW><ROW><id>3333656</id><snippet>import gc

class A(object): pass
class B(A): pass

def which_list(self):
    lists_referring_to_me = []
    for obj in gc.get_referrers(self):
        if isinstance(obj, list):
            lists_referring_to_me.append(obj)

    return lists_referring_to_me


a = A()
b = B()
foo = [a, 52, b]
bar = ['spam', b]

print which_list(a)
print which_list(b)
</snippet></ROW><ROW><id>3333656</id><snippet>[[&lt;__main__.A object at 0x00B7FAD0&gt;, 52, &lt;__main__.B object at 0x00B7FAF0&gt;]]
[[&lt;__main__.A object at 0x00B7FAD0&gt;, 52, &lt;__main__.B object at 0x00B7FAF0&gt;], ['spam', &lt;__main__.B object at 0x00B7FAF0&gt;]]
</snippet></ROW><ROW><id>3333688</id><snippet>sudokupossibilities = [[[1] * 9] * 9] * 9
</snippet></ROW><ROW><id>3333688</id><snippet>sudokupossibilities = [[[1] * 9] * 9] * 9
sudokupossibilities
sudokupossibilities[1][1][1]=2
sudokupossibilities
</snippet></ROW><ROW><id>3333688</id><snippet>&gt;&gt;&gt; s=[[[1] * 3] * 3] * 3
&gt;&gt;&gt; s
[[[1, 1, 1], [1, 1, 1], [1, 1, 1]], [[1, 1, 1], [1, 1, 1], [1, 1, 1]], [[1, 1, 1], [1, 1, 1], [1, 1, 1]]]
&gt;&gt;&gt; s[1][1][1]=2
&gt;&gt;&gt; s
[[[1, 2, 1], [1, 2, 1], [1, 2, 1]], [[1, 2, 1], [1, 2, 1], [1, 2, 1]], [[1, 2, 1], [1, 2, 1], [1, 2, 1]]]
</snippet></ROW><ROW><id>3333688</id><snippet>*</snippet></ROW><ROW><id>3333688</id><snippet>*</snippet></ROW><ROW><id>3333790</id><snippet>int main ()
{
  FILE * pFile;
  int a[3] = {1,2,3};
  pFile = fopen ( "file.bin" , "wb" );
  fwrite (a , 1 , sizeof(a) , pFile );
  fclose (pFile);
  return 0;
}
</snippet></ROW><ROW><id>3333790</id><snippet>Python 2.6.5 (r265:79063, Apr 16 2010, 13:09:56) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import array
&gt;&gt;&gt; a=array.array('l') # 'l' is the type code for signed integer
&gt;&gt;&gt; file=open('file.bin','rb')
&gt;&gt;&gt; a.read(file,3)
&gt;&gt;&gt; print a
array('l', [1, 2, 3])
&gt;&gt;&gt; print a[0]
1
</snippet></ROW><ROW><id>3334521</id><snippet>data</snippet></ROW><ROW><id>3334521</id><snippet>
data['cursor']['estimatedResultCount']</snippet></ROW><ROW><id>3334521</id><snippet>{'cursor': {'currentPageIndex': 0,
            'estimatedResultCount': '168000000',
            'moreResultsUrl': 'http://www.google.com/search?oe=utf8&amp;ie=utf8&amp;source=uds&amp;start=0&amp;hl=en&amp;q=cars',
            'pages': [{'label': 1, 'start': '0'},
                      {'label': 2, 'start': '4'},
                      {'label': 3, 'start': '8'},
                      {'label': 4, 'start': '12'},
                      {'label': 5, 'start': '16'},
                      {'label': 6, 'start': '20'},
                      {'label': 7, 'start': '24'},
                      {'label': 8, 'start': '28'}]},
 'results': [ &lt;&lt;list of 4 dicts&gt;&gt; ]}
</snippet></ROW><ROW><id>3334652</id><snippet>"&gt;"</snippet></ROW><ROW><id>3334652</id><snippet>operator.lt</snippet></ROW><ROW><id>3334652</id><snippet>__lt__</snippet></ROW><ROW><id>3334652</id><snippet>operator.lt</snippet></ROW><ROW><id>3334959</id><snippet>import urllib2
opener = urllib2.build_opener()
opener.addheaders.append(('Cookie', 'cookiename=cookievalue'))
f = opener.open("http://example.com/")
</snippet></ROW><ROW><id>3335029</id><snippet>env.host_string</snippet></ROW><ROW><id>3335029</id><snippet>env</snippet></ROW><ROW><id>3335311</id><snippet>G</snippet></ROW><ROW><id>3335311</id><snippet>__main__</snippet></ROW><ROW><id>3335311</id><snippet>import networkx as nx

def test(G):
    for e in G.edges_iter():
        print(e)

if __name__=='__main__':
    from timeit import Timer
    G = nx.DiGraph()
    G.add_edges_from([(1,2),(4,5)])
    t = Timer("test(G)","from __main__ import test,G")
    print( t.timeit(1))
</snippet></ROW><ROW><id>3335367</id><snippet>&gt;&gt;&gt; L=namedtuple('literal', 'name age')(**{'name': 'John Smith', 'age':23})
</snippet></ROW><ROW><id>3335367</id><snippet>&gt;&gt;&gt; L=namedtuple('literal', 'name age')(name='John Smith', age=23)
&gt;&gt;&gt; L
literal(name='John Smith', age=23)
&gt;&gt;&gt; L.name
'John Smith'
&gt;&gt;&gt; L.age
23
</snippet></ROW><ROW><id>3335367</id><snippet>def literal(**kw):
    return namedtuple('literal', kw)(**kw)
</snippet></ROW><ROW><id>3335367</id><snippet>literal = lambda **kw:namedtuple('literal', kw)(**kw)
</snippet></ROW><ROW><id>3335408</id><snippet>Connection.open</snippet></ROW><ROW><id>3335408</id><snippet>1</snippet></ROW><ROW><id>3335408</id><snippet>0</snippet></ROW><ROW><id>3335408</id><snippet>if conn.open:
    # do something
</snippet></ROW><ROW><id>3335927</id><snippet>from reportlab.pdfbase.pdfmetrics import stringWidth
textWidth = stringWidth(text, fontName, fontSize)
</snippet></ROW><ROW><id>3335927</id><snippet>from reportlab.lib.utils import simpleSplit
lines = simpleSplit(text, fontName, fontSize, maxWidth)
</snippet></ROW><ROW><id>3336090</id><snippet>else: pass</snippet></ROW><ROW><id>3336090</id><snippet>raw_input</snippet></ROW><ROW><id>3336090</id><snippet>input</snippet></ROW><ROW><id>3336341</id><snippet>SigCategory</snippet></ROW><ROW><id>3336341</id><snippet>mysigcategory.category</snippet></ROW><ROW><id>3336341</id><snippet>mysigcategory</snippet></ROW><ROW><id>3336341</id><snippet>select_related</snippet></ROW><ROW><id>3336452</id><snippet>result</snippet></ROW><ROW><id>3336452</id><snippet>functions = {
    1: lambda: api.PostDirectMessage(user,'Trebuie sa-mi spui si marca pe care o cauti'),
    2: lambda: postmarket(user,tval),
    3: lambda: api.PostDirectMessage(user,'Imi pare rau, dar nu stiu unde poti gasi aceste tipuri de smantana: %s' % tval)}
func = functions.get(i)
if func:
    return func()
else:
    raise ValueError("Bad index: %d!" % i)
</snippet></ROW><ROW><id>3336560</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime('2/9/1984', '%m/%d/%Y')
datetime.datetime(1984, 2, 9, 0, 0)
</snippet></ROW><ROW><id>3336735</id><snippet>req = urllib2.Request(url, headers={'User-Agent' : "Magic Browser"}) 
con = urllib2.urlopen( req )
print con.read()
</snippet></ROW><ROW><id>3336785</id><snippet>class B(A):
    @property
    def attr(self):
        return super(B, self).attr()
</snippet></ROW><ROW><id>3336785</id><snippet>class B(A):
    @property
    def attr(self):
        return super(B, self).attr
</snippet></ROW><ROW><id>3336917</id><snippet>Rating.filter(company__in=[company_a, company_b]).distinct()
</snippet></ROW><ROW><id>3336917</id><snippet>IndicatorRatingOptions.filter(company__in=[company_a, company_b]).distinct()
</snippet></ROW><ROW><id>3336983</id><snippet>[]</snippet></ROW><ROW><id>3336983</id><snippet>hashtags</snippet></ROW><ROW><id>3336983</id><snippet>newHashTags = self.request.get('hashtags', allow_multiple=True)
</snippet></ROW><ROW><id>3336983</id><snippet>allow_multiple=True</snippet></ROW><ROW><id>3336983</id><snippet>get</snippet></ROW><ROW><id>3336983</id><snippet>hashtags</snippet></ROW><ROW><id>3336983</id><snippet>for</snippet></ROW><ROW><id>3336983</id><snippet>newHashTags = self.request.get('hashtags', allow_multiple=True)
stream.hashtags.extend(newHashTags)
</snippet></ROW><ROW><id>3336994</id><snippet>perm</snippet></ROW><ROW><id>3336994</id><snippet>while</snippet></ROW><ROW><id>3336994</id><snippet>for</snippet></ROW><ROW><id>3337173</id><snippet>str</snippet></ROW><ROW><id>3337173</id><snippet>if a:
</snippet></ROW><ROW><id>3337173</id><snippet>if a != None
</snippet></ROW><ROW><id>3337222</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>3337310</id><snippet>Deferred</snippet></ROW><ROW><id>3337310</id><snippet>Deferred</snippet></ROW><ROW><id>3337310</id><snippet>Deferred</snippet></ROW><ROW><id>3337310</id><snippet>deferredfunc</snippet></ROW><ROW><id>3337310</id><snippet>blockingCallFromThread</snippet></ROW><ROW><id>3337310</id><snippet>Deferreds</snippet></ROW><ROW><id>3337310</id><snippet>Deferred</snippet></ROW><ROW><id>3337310</id><snippet>blocking</snippet></ROW><ROW><id>3337310</id><snippet>Call</snippet></ROW><ROW><id>3337310</id><snippet>FromThread</snippet></ROW><ROW><id>3337310</id><snippet>blockOnThisDeferredFromThread</snippet></ROW><ROW><id>3337310</id><snippet>blockingCallFromThread(reactor, deferredfunc, args)</snippet></ROW><ROW><id>3337531</id><snippet>self.table</snippet></ROW><ROW><id>3337531</id><snippet>self.table.setdefault(field,0)
</snippet></ROW><ROW><id>3337531</id><snippet>self.table</snippet></ROW><ROW><id>3337531</id><snippet>field</snippet></ROW><ROW><id>3337531</id><snippet>field</snippet></ROW><ROW><id>3337531</id><snippet>self.table[field]</snippet></ROW><ROW><id>3337531</id><snippet>import collections
class Foo(object):
    def __init__(self):
        self.CompleteAnalysis=collections.defaultdict(
            lambda: collections.defaultdict(list))

    def getFilledFields(self,sentence):
        field, field_value, field_date = sentence.split('|')
        field_value = field_value.strip('\n')
        field_date = field_date.strip('\n')
        self.CompleteAnalysis[field]['date'].append(field_date)
        self.CompleteAnalysis[field]['value'].append(field_value) 

foo=Foo()
foo.getFilledFields('A|1|2000-1-1')
foo.getFilledFields('A|2|2000-1-2')
print(foo.CompleteAnalysis['A']['date'])
# ['2000-1-1', '2000-1-2']

print(foo.CompleteAnalysis['A']['value'])
# ['1', '2']
</snippet></ROW><ROW><id>3337531</id><snippet>print(len(foo.CompleteAnalysis['A']['value']))
# 2
</snippet></ROW><ROW><id>3337576</id><snippet>msg = email.message_from_string('\n'.join([
    'To: michael@mydomain.com',
    'From: michael@mydomain.com',
    'Subject: test email',
    '',
    'Just testing'
]))
smtp = smtplib.SMTP()
smtp.connect()
smtp.sendmail('something@something.com', 'michael@mydomain.com', msg.as_string())
</snippet></ROW><ROW><id>3338357</id><snippet>from global_mod import x</snippet></ROW><ROW><id>3338357</id><snippet>x</snippet></ROW><ROW><id>3338357</id><snippet>x</snippet></ROW><ROW><id>3338357</id><snippet>global_mod</snippet></ROW><ROW><id>3338357</id><snippet>import global_mod</snippet></ROW><ROW><id>3338357</id><snippet>global_mod.x</snippet></ROW><ROW><id>3338357</id><snippet>global_mod</snippet></ROW><ROW><id>3338357</id><snippet>x</snippet></ROW><ROW><id>3338357</id><snippet>x</snippet></ROW><ROW><id>3338368</id><snippet>A = np.squeeze(np.asarray(M))
</snippet></ROW><ROW><id>3338368</id><snippet>A = np.asarray(M).reshape(-1)</snippet></ROW><ROW><id>3338429</id><snippet>from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer

class MyServer(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200, 'OK')
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write( "hello" )

HTTPServer(('', 8888), MyServer).serve_forever()
</snippet></ROW><ROW><id>3338429</id><snippet>...
ser = serial.Serial('/dev/tty.usbserial', 9600)
ser.write('5')
ser.readline()
...
</snippet></ROW><ROW><id>3338429</id><snippet>require "serialport.so"
require 'webrick';

SERIALPORT="/dev/ttyUSB0"

s =  HTTPServer.new( :Port =&gt; 2000 )

class DemoServlet &lt; HTTPServlet::AbstractServlet
    def getValue()
        begin
            sp = SerialPort.new( SERIALPORT, 9600, 8, 1, SerialPort::NONE)
            sp.read_timeout = 500
            sp.write( "... whatever you like to send to your arduino" )
            body = sp.readline()
            sp.close
            return body
        rescue
            puts "cant open serial port"
        end
    end

    def do_GET( req, res )

        body = "--.--"
        body = getValue()

        res.body = body
        res['Content-Type'] = "text/plain"
    end
end
s.mount( "/test", DemoServlet )
trap("INT"){ s.shutdown }
s.start
</snippet></ROW><ROW><id>3338466</id><snippet>check_call</snippet></ROW><ROW><id>3338466</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>3338605</id><snippet>In [15]: locale.setlocale(locale.LC_ALL, 'Portuguese_Brazil')
Out[15]: 'Portuguese_Brazil.1252'
</snippet></ROW><ROW><id>3338624</id><snippet>map = function() {
    for (var i = 0, j = this.actions.length; i &lt; j; i++) {
        emit(this.actions[i].time, this.actions[i].action);
    }
}
reduce = function(key, value_array) {
    var array = [];
    for (var i = 0, j = value_array.length; i &lt; j; i++) {
        if (value_array[i]['actions']) {
            array = array.concat(value_array[i]['actions']);
        } else {
            array.push(value_array[i]);
        }
    }
    return ({ actions: array });
}

res = db.test.mapReduce(map, reduce)
db[res.result].find()
</snippet></ROW><ROW><id>3338624</id><snippet>_id</snippet></ROW><ROW><id>3338624</id><snippet>{ "_id" : 123, "value" : { "actions" : [ "jump" ] } }
{ "_id" : 125, "value" : { "actions" : [ "neigh", "canter" ] } }
{ "_id" : 127, "value" : { "actions" : [ "whinny" ] } }
</snippet></ROW><ROW><id>3338624</id><snippet>{actions: [...]}</snippet></ROW><ROW><id>3338954</id><snippet>csv</snippet></ROW><ROW><id>3338954</id><snippet>csv</snippet></ROW><ROW><id>3339129</id><snippet>import matplotlib.pyplot as plt
plt.subplot(6,1,1)
plt.subplot(6,1,2)
plt.subplot(6,1,3)
plt.subplot(2,1,2)
</snippet></ROW><ROW><id>3339331</id><snippet>from webob.multidict import MultiDict

class TestSomeController(TestController):

    def test_something(self):
        params = MultiDict()
        params.add('some_param', '1')
        params.add('color', 'Green')
        params.add('color', 'Blue')
        response = self.app.post(url('something'), params=params)
        assert 'something' in response
</snippet></ROW><ROW><id>3339331</id><snippet>form = response.form
form.set('color', True, 0)
form.set('color', True, 2)
</snippet></ROW><ROW><id>3339587</id><snippet>python csvread.py</snippet></ROW><ROW><id>3340030</id><snippet>Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6
</snippet></ROW><ROW><id>3340034</id><snippet>data.pkl</snippet></ROW><ROW><id>3340034</id><snippet>main.py</snippet></ROW><ROW><id>3340034</id><snippet>main.py</snippet></ROW><ROW><id>3340034</id><snippet>data.pkl</snippet></ROW><ROW><id>3340115</id><snippet>In [32]: import re

In [33]: s='abcd2343 abw34324 abc3243-23A'

In [34]: re.split('(\d+)',s)
Out[34]: ['abcd', '2343', ' abw', '34324', ' abc', '3243', '-', '23', 'A']
</snippet></ROW><ROW><id>3340115</id><snippet>In [43]: re.findall('\d*\D+',s)
Out[43]: ['abcd', '2343 abw', '34324 abc', '3243-', '23A']
</snippet></ROW><ROW><id>3340203</id><snippet>urllib2</snippet></ROW><ROW><id>3340203</id><snippet>&lt;input&gt;</snippet></ROW><ROW><id>3340267</id><snippet>send</snippet></ROW><ROW><id>3340267</id><snippet>sendall</snippet></ROW><ROW><id>3340267</id><snippet>sendall</snippet></ROW><ROW><id>3340267</id><snippet>send</snippet></ROW><ROW><id>3340293</id><snippet>import csv

with open('thefile.csv', 'rb') as f:
  data = list(csv.reader(f))
</snippet></ROW><ROW><id>3340293</id><snippet>import collections
counter = collections.defaultdict(int)
for row in data:
    counter[row[0]] += 1
</snippet></ROW><ROW><id>3340293</id><snippet>for row in data:
    if counter[row[0]] &gt;= 4:
        print row
</snippet></ROW><ROW><id>3340390</id><snippet>sserv.py</snippet></ROW><ROW><id>3340390</id><snippet> gnome-terminal -e "python ./sserv.py"
</snippet></ROW><ROW><id>3340390</id><snippet>sserv.py</snippet></ROW><ROW><id>3340587</id><snippet>&gt;&gt;&gt; input = "1,2,3\n4,5,6\n7,8,9".splitlines()
&gt;&gt;&gt; reader=csv.reader(input)
&gt;&gt;&gt; for row in reader:
...     row[2] = log(float(row[2]))
...     print ','.join(map(str,row))
...
1,2,1.09861228867
4,5,1.79175946923
7,8,2.19722457734
</snippet></ROW><ROW><id>3340718</id><snippet>SetWindowPos</snippet></ROW><ROW><id>3340718</id><snippet>import win32gui, win32con

hwnd = get_my_window_handle()
win32gui.SetWindowPos(hwnd, win32con.HWND_TOPMOST, 0, 0, 0, 0, win32con.SWP_NOMOVE | win32con.SWP_NOSIZE)
</snippet></ROW><ROW><id>3340741</id><snippet>&gt;&gt;&gt; x = bytes(b'ciao bella')
&gt;&gt;&gt; x.split()
[b'ciao', b'bella']
</snippet></ROW><ROW><id>3340785</id><snippet>&gt;&gt;&gt; print "Today's stock price: %f" % 50.4625
  File "&lt;stdin&gt;", line 1
    print "Today's stock price: %f" % 50.4625
                                  ^
SyntaxError: invalid syntax
&gt;&gt;&gt; print("Today's stock price: %f" % 50.4625)
Today's stock price: 50.462500
</snippet></ROW><ROW><id>3340881</id><snippet>$ python3.1 -mtimeit -s'x,y,z=1,2,3' '[x,y,z]'
1000000 loops, best of 3: 0.379 usec per loop
$ python3.1 -mtimeit '[1,2,3]'
1000000 loops, best of 3: 0.413 usec per loop

$ python3.1 -mtimeit -s'x,y,z=1,2,3' '(x,y,z)'
10000000 loops, best of 3: 0.174 usec per loop
$ python3.1 -mtimeit '(1,2,3)'
10000000 loops, best of 3: 0.0602 usec per loop

$ python2.6 -mtimeit -s'x,y,z=1,2,3' '[x,y,z]'
1000000 loops, best of 3: 0.352 usec per loop
$ python2.6 -mtimeit '[1,2,3]'
1000000 loops, best of 3: 0.358 usec per loop

$ python2.6 -mtimeit -s'x,y,z=1,2,3' '(x,y,z)'
10000000 loops, best of 3: 0.157 usec per loop
$ python2.6 -mtimeit '(1,2,3)'
10000000 loops, best of 3: 0.0527 usec per loop
</snippet></ROW><ROW><id>3340881</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>3340881</id><snippet>timeit</snippet></ROW><ROW><id>3341206</id><snippet>filter(end__year=date.year, end__month=date.month, end__day=date.day)
</snippet></ROW><ROW><id>3341206</id><snippet>range</snippet></ROW><ROW><id>3341271</id><snippet>digraph {
  subgraph { rank = same; A0 };
  subgraph { rank = same; B0; B1 };
  root -&gt; A0;
  A0 -&gt; B0;
  root -&gt; B1;
}
</snippet></ROW><ROW><id>3341599</id><snippet>&gt;&gt;&gt; x = "first.last@host.domain.com"
&gt;&gt;&gt; x.split("@")[1].split(".")[0]
'host'
&gt;&gt;&gt; y = "first.last@host"
&gt;&gt;&gt; y.split("@")[1].split(".")[0]
'host'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3341762</id><snippet>$SESSION</snippet></ROW><ROW><id>3341762</id><snippet>module_name.ClassName.session</snippet></ROW><ROW><id>3341762</id><snippet>uuid</snippet></ROW><ROW><id>3341762</id><snippet>sqlite3</snippet></ROW><ROW><id>3341762</id><snippet>pickle</snippet></ROW><ROW><id>3342756</id><snippet>decode()</snippet></ROW><ROW><id>3342756</id><snippet>'string_escape'</snippet></ROW><ROW><id>3342756</id><snippet>mystr.decode('string_escape')
</snippet></ROW><ROW><id>3343018</id><snippet>## -*- coding: utf-16 -*-
</snippet></ROW><ROW><id>3343018</id><snippet>mylookup = TemplateLookup(
    directories=['plugins/stl/templates'],
    input_encoding='utf-16',
    output_encoding='utf-16',
    encoding_errors='replace')

self.template = Template(self.getTemplate(), lookup=mylookup,
    module_directory=tempfile.gettempdir(),
    input_encoding='utf-16',
    output_encoding='utf-16',
    encoding_errors='replace')
</snippet></ROW><ROW><id>3343305</id><snippet>futures</snippet></ROW><ROW><id>3343305</id><snippet>"Download many URLs in parallel."

import functools
import urllib.request
import futures

URLS = ['http://www.foxnews.com/',
        'http://www.cnn.com/',
        'http://europe.wsj.com/',
        'http://www.bbc.co.uk/',
        'http://some-made-up-domain.com/']

def load_url(url, timeout):
    return urllib.request.urlopen(url, timeout=timeout).read()

with futures.ThreadPoolExecutor(50) as executor:
   future_list = executor.run_to_futures(
           [functools.partial(load_url, url, 30) for url in URLS])
</snippet></ROW><ROW><id>3343450</id><snippet>xpath()</snippet></ROW><ROW><id>3343450</id><snippet>xpath()</snippet></ROW><ROW><id>3343450</id><snippet>findall()</snippet></ROW><ROW><id>3343450</id><snippet>self.doc.xpath('.//field[@on_change]')
</snippet></ROW><ROW><id>3343450</id><snippet>[i for i in self.doc.findall('.//field') if i.get('on_change') is not None]
</snippet></ROW><ROW><id>3343654</id><snippet>moderator.register(Post, PostModerator)
</snippet></ROW><ROW><id>3343654</id><snippet>if Post not in moderator._registry:
    moderator.register(Post, PostModerator)
</snippet></ROW><ROW><id>3343790</id><snippet>import csv
with open('activations.csv','rb') as act_data:
    rdr= csv.DictReader( act_data)
    activations = dict( (row['user'],row) for row in rdr )
with open('users.csv','rb') as user_data:
    rdr= csv.DictReader( user_data )
    with open( 'users_2.csv','wb') as updated_data:
        wtr= csv.DictWriter( updated_data, ['some','list','of','columns'])
        for user in rdr:
             user['some_field']= activations[user['user_id_column']]['some_field']
             wtr.writerow( user )
</snippet></ROW><ROW><id>3343790</id><snippet>shelve</snippet></ROW><ROW><id>3343790</id><snippet>pickle</snippet></ROW><ROW><id>3343814</id><snippet>form.is_valid()</snippet></ROW><ROW><id>3343814</id><snippet>def update_form(request):
    if request.method == 'POST':
        if not request.POST.get('submit'):
            dict = {}
            dict['form'] = MyForm(initial = dict(request.POST.items())).as_p()
            return HttpResponse(json.dumps(dict), mimetype='application/javascript')
        else:
            form = MyForm(request.POST)
            if form.is_valid():
                # Your Final Stuff
                pass
    return HttpResponseBadRequest()
</snippet></ROW><ROW><id>3343821</id><snippet>sql=('UPDATE results SET '
     + ', '.join(key+' = ?' for key in keys)
     + 'WHERE id = ?')
args = [results[key] for key in keys] + [id]
cur.execute(sql,args)
</snippet></ROW><ROW><id>3343894</id><snippet>Allow service to interact with desktop</snippet></ROW><ROW><id>3344249</id><snippet>&gt;&gt;&gt; book = 'what every programmer must know'
&gt;&gt;&gt; book = book.title()
&gt;&gt;&gt; book.istitle()
True
</snippet></ROW><ROW><id>3344729</id><snippet>DateInput widget</snippet></ROW><ROW><id>3344729</id><snippet>forms.DateField()</snippet></ROW><ROW><id>3344729</id><snippet>DateInput</snippet></ROW><ROW><id>3345052</id><snippet>&gt;&gt;&gt; "foo\n\rbar".splitlines()
['foo', '', 'bar']
</snippet></ROW><ROW><id>3345212</id><snippet>raw_input()</snippet></ROW><ROW><id>3345212</id><snippet>print "Enter a file name:",
filename = raw_input()
</snippet></ROW><ROW><id>3345212</id><snippet>filename = raw_input('Enter a file name: ')
</snippet></ROW><ROW><id>3345418</id><snippet>csv.writer</snippet></ROW><ROW><id>3345418</id><snippet>import csv

with open('thefile.csv', 'rb') as f:
  data = list(csv.reader(f))

import collections
counter = collections.defaultdict(int)
for row in data:
    counter[row[0]] += 1


writer = csv.writer(open("/path/to/my/csv/file", 'w'))
for row in data:
    if counter[row[0]] &gt;= 4:
        writer.writerow(row)
</snippet></ROW><ROW><id>3345871</id><snippet>import random

def gen(n):
    for i in xrange(n):
        if random.randint(0, 1) == 0:
            yield i

iterator = gen(10)
</snippet></ROW><ROW><id>3345871</id><snippet>iterator</snippet></ROW><ROW><id>3346009</id><snippet>import time
import os

one_minute_ago = time.time() - 60 
folder = '/home/rv/Desktop/test'
os.chdir(folder)
for somefile in os.listdir('.'):
    st=os.stat(somefile)
    mtime=st.st_mtime
    if mtime &lt; one_minute_ago:
        print('remove %s'%somefile)
        # os.unlink(somefile) # uncomment only if you are sure
</snippet></ROW><ROW><id>3346087</id><snippet>re.match()</snippet></ROW><ROW><id>3346295</id><snippet>def fun():
    print '{0} Here is a really long ' \
          'sentence with {1}'.format(3, 5)
</snippet></ROW><ROW><id>3346492</id><snippet>with open(fname, 'rb') as fh:
    first = next(fh).decode()

    fh.seek(-1024, 2)
    last = fh.readlines()[-1].decode()
</snippet></ROW><ROW><id>3346492</id><snippet>for line in fh:
    pass
last = line
</snippet></ROW><ROW><id>3346492</id><snippet>open(fname)</snippet></ROW><ROW><id>3346492</id><snippet>random.sample</snippet></ROW><ROW><id>3346913</id><snippet>print form.fields['answer'].widget.name
</snippet></ROW><ROW><id>3346913</id><snippet>form.fields['new_name'] = form.fields['answer']
del form.fields['answer']
</snippet></ROW><ROW><id>3346913</id><snippet>new_name</snippet></ROW><ROW><id>3346913</id><snippet>{{ form }}</snippet></ROW><ROW><id>3346953</id><snippet>PythonDirectPublic</snippet></ROW><ROW><id>3346953</id><snippet>class DerivedMetaClass(BaseMetaClass):
    def __new__(cls, name, bases, dct):
        # Do your custom memory allocation here, if any

        # Now let base metaclass do its memory allocation stuff
        return BaseMetaClass.__new__(cls, name, bases, dct)

    def __init__(cls, name, bases, dct):
        # Do your custom initialization here, if any
        # This, I assume, is where your catalog creation stuff takes place

        # Now let base metaclass do its initialization stuff
        super(DerivedMetaClass, cls).__init__(name, bases, dct)
</snippet></ROW><ROW><id>3346953</id><snippet>BaseMetaClass</snippet></ROW><ROW><id>3346953</id><snippet>enthought.traits.api.HasTraits.__metaclass__</snippet></ROW><ROW><id>3347027</id><snippet>def mail(to, subject, text):
    msg = MIMEMultipart()

    msg['From'] = gmail_user
    msg['To'] = to
    msg['Subject'] = subject

    msg.attach(MIMEText(text))

    part = MIMEBase('application', 'octet-stream')
    Encoders.encode_base64(part)
    msg.attach(part)

    mailServer = smtplib.SMTP("smtp.gmail.com", 587)
    mailServer.ehlo()
    mailServer.starttls()
    mailServer.ehlo()
    mailServer.login(gmail_user, gmail_pwd)
    mailServer.sendmail(gmail_user, to, msg.as_string())
    # Should be mailServer.quit(), but that crashes...
    mailServer.close()
</snippet></ROW><ROW><id>3347217</id><snippet>&gt;&gt;&gt; def getIterLength(iterator):
    temp = list(iterator)
    result = len(temp)
    iterator = iter(temp)
    return result

&gt;&gt;&gt;
&gt;&gt;&gt; f = xrange(20)
&gt;&gt;&gt; f
xrange(20)
&gt;&gt;&gt; 
&gt;&gt;&gt; x = getIterLength(f)
&gt;&gt;&gt; x
20
&gt;&gt;&gt; f
xrange(20)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3347217</id><snippet>&gt;&gt;&gt; def getIterLenAndIter(iterator):
    temp = list(iterator)
    return len(temp), iter(temp)

&gt;&gt;&gt; f = iter([1,2,3,7,8,9])
&gt;&gt;&gt; f
&lt;listiterator object at 0x02782890&gt;
&gt;&gt;&gt; l, f = getIterLenAndIter(f)
&gt;&gt;&gt; 
&gt;&gt;&gt; l
6
&gt;&gt;&gt; f
&lt;listiterator object at 0x02782610&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3347674</id><snippet>TextTestRunner</snippet></ROW><ROW><id>3347674</id><snippet>io.StringIO</snippet></ROW><ROW><id>3347674</id><snippet>StringIO</snippet></ROW><ROW><id>3347674</id><snippet>class StreamLogger(object):
    def __init__(self, input_stream, output_logger):
        self.input_stream = input_stream
        self.output_logger
    def run(self):
        while True:
            line = input_stream.readline()
            if not line:
                break
            output_logger.error(line)
</snippet></ROW><ROW><id>3347674</id><snippet>stream_logger.run()</snippet></ROW><ROW><id>3347842</id><snippet>getIterLength()</snippet></ROW><ROW><id>3347842</id><snippet>finditer()</snippet></ROW><ROW><id>3347842</id><snippet>def findpattern(commit_msg):
    pattern = re.compile("\w\w*-\d\d*")
    group = pattern.finditer(commit_msg)

    found = 0
    issues = 0
    for match in group:
        print " print matched issues:"
        auth = soap.login(jirauser,passwd)

        print match.group(0)
        getIssue(auth,match.group(0))
        issues = issues + 1
        found += 1
    if found == 0:
        sys.exit("No issue patterns found.")


    print "Retrieved issues: " + str(issues)  
</snippet></ROW><ROW><id>3347842</id><snippet>findall()</snippet></ROW><ROW><id>3347842</id><snippet>finditer()</snippet></ROW><ROW><id>3347842</id><snippet>len(group)</snippet></ROW><ROW><id>3347971</id><snippet>import mechanize

br = mechanize.Browser()
br.open('http://somesite.com/account/signin/')

br.select_form('loginForm')    
br['username'] = 'jekyll'
br['password'] = 'bananas'
br.submit()
# At this point, you're logged in, redirected, and the 
#  br object has the cookies and all that.

br.geturl() # e.g. http://somesite.com/loggedin/
</snippet></ROW><ROW><id>3347971</id><snippet>br</snippet></ROW><ROW><id>3348115</id><snippet>import py
py.test.cmdline.main(args)
</snippet></ROW><ROW><id>3348115</id><snippet>args</snippet></ROW><ROW><id>3348115</id><snippet>args_str = "-k test_myfavorite"
py.test.cmdline.main(args_str.split(" "))
</snippet></ROW><ROW><id>3348164</id><snippet>class Main(object):
    def __init__(self,arg1,arg2):
        ...
    def run(self):
        pass

if __name__=='__main__':
    import optparse
    class CLI(object):
        def parse_options(self):
            usage = 'usage: %prog [options]'+__usage__
            parser = optparse.OptionParser(usage=usage)
            parser.add_option('-i', dest='arg1')
            parser.add_option('-j', dest='arg2') 
            (self.opt, self.args) = parser.parse_args()
        def run(self):
            self.parse_options()        
            Main(self.opt.arg1,self.opt.arg2).run()
    CLI().run()
</snippet></ROW><ROW><id>3348183</id><snippet>with open('/pythonwork/thefile_subset1.csv', 'w') as outfile:
    writer = csv.writer(outfile)
    for row in data:
        if counter[row[11]] &gt;= 500:
           writer.writerow(row)
</snippet></ROW><ROW><id>3348606</id><snippet>or</snippet></ROW><ROW><id>3348606</id><snippet>False</snippet></ROW><ROW><id>3348606</id><snippet>locals()</snippet></ROW><ROW><id>3348606</id><snippet>get()</snippet></ROW><ROW><id>3348606</id><snippet>&gt;&gt;&gt; locals().get('some_var', "some_var doesn't exist.")
"some_var doesn't exist."
&gt;&gt;&gt; some_var = 0
&gt;&gt;&gt; locals().get('some_var', "some_var doesn't exist.")
0
</snippet></ROW><ROW><id>3348616</id><snippet>b.append(row)</snippet></ROW><ROW><id>3348616</id><snippet>b[]</snippet></ROW><ROW><id>3348616</id><snippet>b = []</snippet></ROW><ROW><id>3348616</id><snippet>b = [row for row in data if counter[row[10]] &gt;= sample_cutoff]
map(writer.writerow, b)
</snippet></ROW><ROW><id>3348664</id><snippet>outfile</snippet></ROW><ROW><id>3348761</id><snippet>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('./[0-9].*')
['./1.gif', './2.txt']
&gt;&gt;&gt; glob.glob('*.gif')
['1.gif', 'card.gif']
&gt;&gt;&gt; glob.glob('?.gif')
['1.gif']
</snippet></ROW><ROW><id>3348777</id><snippet>from Tkinter import tkinter
tkinter.createfilehandler(file, mask, callback)
</snippet></ROW><ROW><id>3348777</id><snippet>callback(file, mask)
</snippet></ROW><ROW><id>3348777</id><snippet>tkinter.deletefilehandler(file)
</snippet></ROW><ROW><id>3348777</id><snippet>os.read(file.fileno(), maxbytecount).</snippet></ROW><ROW><id>3348833</id><snippet>enctype</snippet></ROW><ROW><id>3348833</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>3348833</id><snippet>%nn</snippet></ROW><ROW><id>3348833</id><snippet>enctype="multipart/form-data"</snippet></ROW><ROW><id>3348833</id><snippet>0x80</snippet></ROW><ROW><id>3348833</id><snippet>escape/encodeURIComponent</snippet></ROW><ROW><id>3348866</id><snippet>&gt;&gt;&gt; print round(1123.456789, -1)
1120.0
</snippet></ROW><ROW><id>3349046</id><snippet>mylogger.warning("Attenzione!")
</snippet></ROW><ROW><id>3349046</id><snippet>logging.warning</snippet></ROW><ROW><id>3349046</id><snippet>mylogger</snippet></ROW><ROW><id>3349046</id><snippet>logging</snippet></ROW><ROW><id>3349046</id><snippet>util.setlogging</snippet></ROW><ROW><id>3349046</id><snippet>mylogger = logging.getLogger(package_name)
</snippet></ROW><ROW><id>3349046</id><snippet>util</snippet></ROW><ROW><id>3349046</id><snippet>util.mylogger.warning('Watch out!')
</snippet></ROW><ROW><id>3349273</id><snippet>blockingCallFromThread</snippet></ROW><ROW><id>3349449</id><snippet>python virtualenv.py ENV</snippet></ROW><ROW><id>3349449</id><snippet>--no-site-packages</snippet></ROW><ROW><id>3349534</id><snippet>AddressForm</snippet></ROW><ROW><id>3349534</id><snippet>gorod</snippet></ROW><ROW><id>3349534</id><snippet>.cleaned_data</snippet></ROW><ROW><id>3349534</id><snippet>()</snippet></ROW><ROW><id>3349534</id><snippet>django.forms</snippet></ROW><ROW><id>3349534</id><snippet>for name, field in self.fields.items():
</snippet></ROW><ROW><id>3349534</id><snippet>.cleaned_data</snippet></ROW><ROW><id>3349534</id><snippet>AddressForm</snippet></ROW><ROW><id>3349849</id><snippet>/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages</snippet></ROW><ROW><id>3349849</id><snippet>.tar.bz2</snippet></ROW><ROW><id>3349849</id><snippet>.so</snippet></ROW><ROW><id>3349849</id><snippet>.so</snippet></ROW><ROW><id>3350073</id><snippet>import threading

# ... your code here...

def run_while_true(server_class=BaseHTTPServer.HTTPServer,
               handler_class=BaseHTTPServer.BaseHTTPRequestHandler):

    server_address = ('', 8000)
    httpd = server_class(server_address, handler_class)
    while keep_running():
        httpd.handle_request()

if __name__ == '__main__':
    background_thread = threading.Thread(target=do_something_else)
    background_thread.start()
    # ... web server start code here...
    background_thread.join()
</snippet></ROW><ROW><id>3350073</id><snippet>do_something_else()</snippet></ROW><ROW><id>3350073</id><snippet>join()</snippet></ROW><ROW><id>3350073</id><snippet>do_something_else</snippet></ROW><ROW><id>3350147</id><snippet>dict</snippet></ROW><ROW><id>3350475</id><snippet>MainString</snippet></ROW><ROW><id>3350475</id><snippet>__init__</snippet></ROW><ROW><id>3350475</id><snippet>Sub1</snippet></ROW><ROW><id>3350475</id><snippet>class MainString(object):
    def __init__(self):
        self.Sub1 = ""
        self.Sub2 = ""
        self.Sub3 = ""
</snippet></ROW><ROW><id>3350475</id><snippet>StringNumberOne = MainString()
StringNumberOne.Sub1 = "hello"
</snippet></ROW><ROW><id>3351235</id><snippet>all=[]
def frec(word, values=[]):
    gobal all
    if word == "":  # got result.
        all+=[values]
    for s in subsets:
        if word.startswith(s):
            frec(word[len(s):], values+[s])

frec(word)
</snippet></ROW><ROW><id>3351235</id><snippet>all=[]
def frec(word, values=[]):
    global all
    if word == "":  # got result.
        all+=[values]
        return true
    match = False
    for s in subsets:
        if word.startswith(s):
            match = True
            frec(word[len(s):], values+[s])       
    if not match:                        
        return frec(word[1:], values+[word[0]])
frec(word)
</snippet></ROW><ROW><id>3351236</id><snippet>if "subject" in mystring.lower():
  # do something
</snippet></ROW><ROW><id>3351498</id><snippet>import re
notag = re.sub("&lt;.*?&gt;", " ", html)
</snippet></ROW><ROW><id>3351969</id><snippet>class Model(QAbstractListModel):
     def __init__(self,  parent=None,  *args):
        super(Model,  self).__init__(parent,  *args)
        self.id_list = []

     def data(self,  index,  role):
        if not index.isValid():
            return None

        row_id = self.id_list[index.row()]

        if role == QtCore.Qt.DisplayRole:
            # query database to retrieve the row with the given row_id
</snippet></ROW><ROW><id>3352397</id><snippet>class Mixin(object):
    def __getattribute__ (self, attr):
        print self, "getting", attr
        return object.__getattribute__(self, attr)
</snippet></ROW><ROW><id>3352397</id><snippet>&gt;&gt;&gt; class Mixin(object):
...     def __getattribute__ (self, attr):
...         print self, "getting", attr
...         return object.__getattribute__(self, attr)
...
&gt;&gt;&gt; Mixin().__str__
&lt;__main__.Mixin object at 0x00B47870&gt; getting __str__
&lt;method-wrapper '__str__' of Mixin object at 0x00B47870&gt;
&gt;&gt;&gt; Mixin().foobar
&lt;__main__.Mixin object at 0x00B47670&gt; getting foobar
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in __getattribute__
AttributeError: 'Mixin' object has no attribute 'foobar'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3352397</id><snippet>Mylist</snippet></ROW><ROW><id>3352397</id><snippet>&gt;&gt;&gt; class Mylist(Mixin):
...     def __init__ (self, lista):
...         if not type (lista) == type (""):
...             self.value = lista[:]
...     def __add__ (self,some):
...         return self.value + some
...     def __getitem__ (self,item):
...         return self.value[item]
...     def __getslice__ (self, beg, end):
...         return self.value[beg:end]
...
&gt;&gt;&gt; a=Mylist([1,2])
&gt;&gt;&gt; a.value
&lt;__main__.Mylist object at 0x00B47A90&gt; getting value
[1, 2]
</snippet></ROW><ROW><id>3352645</id><snippet>import BeautifulSoup

html = '''&lt;html&gt;
&lt;head&gt;
&lt;meta name="description" content="Free Web tutorials on HTML, CSS, XML" /&gt; 
&lt;META name="keywords" content="HTML, CSS, XML" /&gt; 
&lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;'''

soup = BeautifulSoup.BeautifulSoup(html)
for x in soup.findAll('meta'):
    print x
</snippet></ROW><ROW><id>3352761</id><snippet>random.shuffle()</snippet></ROW><ROW><id>3352913</id><snippet>-x, --stop
Stop running tests after the first error or failure
</snippet></ROW><ROW><id>3353112</id><snippet>w = root.winfo_screenwidth()
h = root.winfo_screenheight()
rootsize = tuple(int(_) for _ in root.geometry().split('+')[0].split('x'))
x = w/2 - rootsize[0]/2
y = h/2 - rootsize[1]/2
root.geometry("%dx%d+%d+%d" % (rootsize + (x, y)))
</snippet></ROW><ROW><id>3353112</id><snippet>import pygtk
import gtk

win = gtk.Window(gtk.TOPLEVEL)
win.resize(300, 300)
win.set_position(gtk.WIN_POS_CENTER)
win.show()
</snippet></ROW><ROW><id>3353484</id><snippet>issubclass()</snippet></ROW><ROW><id>3353484</id><snippet>True</snippet></ROW><ROW><id>3353484</id><snippet>&gt;&gt;&gt; class Foo: pass
&gt;&gt;&gt; issubclass(Foo, Foo)
True
</snippet></ROW><ROW><id>3353484</id><snippet>Player</snippet></ROW><ROW><id>3353841</id><snippet>try:    
    import thread 
except ImportError:
    import _thread as thread #Py3K changed it.
</snippet></ROW><ROW><id>3354037</id><snippet>poll()</snippet></ROW><ROW><id>3354037</id><snippet>wait()</snippet></ROW><ROW><id>3354249</id><snippet>data = get_file()
samples_subset1(data)
</snippet></ROW><ROW><id>3354345</id><snippet>exec_()</snippet></ROW><ROW><id>3354368</id><snippet>import clips
clips.Reset()

user = True

def py_getvar(k):
    return (clips.Symbol('TRUE') if globals().get(k) else clips.Symbol('FALSE'))

clips.RegisterPythonFunction(py_getvar)

# if globals().get('user') is not None: assert something
clips.BuildRule("user-rule", "(test (eq (python-call py_getvar user) TRUE))",
                '(assert (user-present))',
                "the user rule")

clips.Run()
clips.PrintFacts()
</snippet></ROW><ROW><id>3354789</id><snippet>getopt</snippet></ROW><ROW><id>3354789</id><snippet>sys.argv.pop()
cmd = {}
while sys.argv:
    arg = sys.argv.pop(0)
    if arg == '--arg1':
        cmd[arg] = sys.argv.pop(0), sys.argv.pop(0)
    elif:
        pass
print(cmd)
</snippet></ROW><ROW><id>3354790</id><snippet>import csv
import collections

def do_work():
    data, counter = get_file('thefile.csv')
    b = samples_subset1(data, counter, '/pythonwork/samples_subset3.csv', 500)

def get_file(start_file):
    with open(start_file, 'rb') as f:
        counter = collections.defaultdict(int)
        data = list(csv.reader(f))

        for row in data:
            counter[row[10]] += 1

    return (data, counter)

def samples_subset1(data, counter, output_file, sample_cutoff):
    with open(output_file, 'wb') as outfile:
        writer = csv.writer(outfile)
        b = []
        for row in data:
            if counter[row[10]] &gt;= sample_cutoff:
                b.append(row) 
                writer.writerow(row)

    return b
</snippet></ROW><ROW><id>3354790</id><snippet>None</snippet></ROW><ROW><id>3354790</id><snippet>data</snippet></ROW><ROW><id>3354790</id><snippet>data</snippet></ROW><ROW><id>3355029</id><snippet>{% set key = value %}</snippet></ROW><ROW><id>3355029</id><snippet>key</snippet></ROW><ROW><id>3355029</id><snippet>contextfunction</snippet></ROW><ROW><id>3355029</id><snippet>businesses.html</snippet></ROW><ROW><id>3355029</id><snippet>{% macro show_businesses(businesses, new_promotions) %}
  {# whatever you're displaying... #}
{% endmacro %}
</snippet></ROW><ROW><id>3355029</id><snippet>{% from "businesses.html" import show_businesses %}
{% show_businesses(**businesses) %}
</snippet></ROW><ROW><id>3355482</id><snippet>singletons</snippet></ROW><ROW><id>3355494</id><snippet>DECIMAL(18,17)</snippet></ROW><ROW><id>3355494</id><snippet>DECIMAL</snippet></ROW><ROW><id>3355494</id><snippet>DECIMAL(...)</snippet></ROW><ROW><id>3355548</id><snippet>cdef extern from "compress.h":
    size_t compress(void *s_start, void *d_start, size_t s_len)

from stdlib cimport *

def cmpr(bytes s):
    cdef size_t n = len(s)
    cdef unsigned char *dst = &lt;unsigned char *&gt; malloc(n * sizeof(unsigned char))
    try:
        m = compress(&lt;unsigned char *&gt; s, dst, n)
        ret = [dst[i] for i from 0 &lt;= i &lt; m]
    finally:
        free(dst)
    return ret
</snippet></ROW><ROW><id>3355548</id><snippet>cython -I. pylzjb.pyx
gcc -I /usr/include/python2.5 -shared -o pylzjb.so pylzjb.c compres.c
</snippet></ROW><ROW><id>3355548</id><snippet>import pylzjb
pylzjb.cmpr('asfd')
</snippet></ROW><ROW><id>3355588</id><snippet>ftp.set_pasv(False)
</snippet></ROW><ROW><id>3355778</id><snippet>drugs = {
  'MORPHINE': ['ASTRAMORPH',...],
  'HYDROCODONE': [...],
  ...
}
</snippet></ROW><ROW><id>3355778</id><snippet>print ( drugs[drugs_needed[1]][0] )
</snippet></ROW><ROW><id>3355816</id><snippet>__init__</snippet></ROW><ROW><id>3355816</id><snippet>ModelForm</snippet></ROW><ROW><id>3355816</id><snippet>class MyClass(ModelForm):
    def __init__(self, *args, **kwargs):
        super(MyClass, self).__init__(*args, **kwargs)

        chain_value = self.fields['name_of_the_field'].chain
        self.fields['name_of_the_field'].widget = CustomWidget(chain=chain_value)
</snippet></ROW><ROW><id>3355851</id><snippet>File.ReadAllText(filename).Split(',')
</snippet></ROW><ROW><id>3355851</id><snippet>csv</snippet></ROW><ROW><id>3355851</id><snippet>import csv
writer = csv.writer(filename)
writer.writerows(data)
</snippet></ROW><ROW><id>3355991</id><snippet>challenge.backends.LDAPBackend.LDAPBackend</snippet></ROW><ROW><id>3356068</id><snippet>(?&lt;=-arch )[^ ]+</snippet></ROW><ROW><id>3356068</id><snippet>&gt;&gt;&gt; re.findall( r"(?&lt;=-arch )([^ ]+)", r"'-foo 23 -bar -arch ppc -arch i386 -isysroot -fno-strict-aliasing -fPIC'" )
['ppc', 'i386']
</snippet></ROW><ROW><id>3356068</id><snippet>&gt;&gt;&gt; foo = re.compile( r"(?&lt;=-arch)\s+[^\s]+" )
&gt;&gt;&gt; [ str.strip() for str in re.findall( foo, r"'-foo 23 -bar -arch ppc -arch i386 -isysroot -fno-strict-aliasing -fPIC'" ) ]
['ppc', 'i386']
</snippet></ROW><ROW><id>3356068</id><snippet>x86_64</snippet></ROW><ROW><id>3356068</id><snippet>-arch ppc</snippet></ROW><ROW><id>3356068</id><snippet>-arch i386</snippet></ROW><ROW><id>3356154</id><snippet>os.fork()</snippet></ROW><ROW><id>3356154</id><snippet>os._exit(1)</snippet></ROW><ROW><id>3356154</id><snippet>pid = os.fork()
if (pid == 0): # The first child.
   os.chdir("/")
   os.setsid()
   os.umask(0) 
   pid2 = os.fork() 
   if (pid2 == 0):  # Second child
     # YOUR CODE HERE
   else:
     sys.exit()    #First child exists
else:           # Parent Code
  sys.exit()   # Parent exists
</snippet></ROW><ROW><id>3356264</id><snippet>needed = set(['ALGIDON','ALGOLYSIN','AMIDON','DEPRIDOL','DOLOPHINE','FENADONE', 'METHADOSE','MIADONE','PHENADONE'])
b = filter(lambda s: len(set(s.upper().split(',')) &amp; needed) &gt; 0, b)
</snippet></ROW><ROW><id>3356278</id><snippet>f()</snippet></ROW><ROW><id>3356278</id><snippet>sys.argv</snippet></ROW><ROW><id>3356278</id><snippet>f()</snippet></ROW><ROW><id>3356332</id><snippet>&gt;&gt;&gt; foo = re.compile( r"(?&lt;=\(K\()[^\)]*" )
&gt;&gt;&gt; foo.findall( r"http://sampleurl.com/(K(ThinkCode))/profile/view.aspx" )
['ThinkCode']
</snippet></ROW><ROW><id>3356332</id><snippet>ham</snippet></ROW><ROW><id>3356332</id><snippet>spam</snippet></ROW><ROW><id>3356332</id><snippet>(?&lt;=spam)ham</snippet></ROW><ROW><id>3356332</id><snippet>[^\)]*</snippet></ROW><ROW><id>3356332</id><snippet>\(K\(</snippet></ROW><ROW><id>3356332</id><snippet>\(K\(</snippet></ROW><ROW><id>3356332</id><snippet>(K(</snippet></ROW><ROW><id>3356332</id><snippet>\</snippet></ROW><ROW><id>3356332</id><snippet>^</snippet></ROW><ROW><id>3356332</id><snippet>[^\)]</snippet></ROW><ROW><id>3356332</id><snippet>[^\)]*</snippet></ROW><ROW><id>3356332</id><snippet>(?&lt;=\(K\()[^\)]*</snippet></ROW><ROW><id>3356332</id><snippet>(K(</snippet></ROW><ROW><id>3356332</id><snippet>\</snippet></ROW><ROW><id>3356332</id><snippet>r"spam"</snippet></ROW><ROW><id>3356332</id><snippet>"spam"</snippet></ROW><ROW><id>3356332</id><snippet>\</snippet></ROW><ROW><id>3356332</id><snippet>(foo)</snippet></ROW><ROW><id>3356332</id><snippet>foo</snippet></ROW><ROW><id>3356332</id><snippet>.groups()</snippet></ROW><ROW><id>3356619</id><snippet>if any(some_value in brand_names[key] for key in ('OXYCODONE','HYDROCODONE')):
    append to arrayC
</snippet></ROW><ROW><id>3356971</id><snippet>reader = open('input.txt')
writer = open('output.txt', 'w')
names, nums = [], []
row = reader.read().split(' ')
x = len(row)/2
for (a, b) in [(n, v) for n, v in zip(row[:x], row[x:]) if v!='na']:
    names.append(a)
    nums.append(b)
writer.write(' '.join(names))
writer.write(' ')
writer.write(' '.join(nums))
#writer.write(' '.join(names+nums)) is nicer but cause list to be concat
</snippet></ROW><ROW><id>3357141</id><snippet>django.utils.translation.get_language()</snippet></ROW><ROW><id>3357213</id><snippet>resultat.writerow( [ `info1`,`info2` ,`line[1]`,`line[2]`,`line[3]`,`line[4]`,`line[5]`,`line[6]`,`line[7]`,`line[8]`,`line[9]`,`line[10]`,`line[11]`,`line[12]`,`line[13]`,`line[14]`,`line[15]`,`line[16]`,`line[17]` ] )
</snippet></ROW><ROW><id>3357213</id><snippet>repr(expression)</snippet></ROW><ROW><id>3357213</id><snippet>&gt;&gt;&gt; s = "Montréal"
&gt;&gt;&gt; print s
Montréal
&gt;&gt;&gt; print repr(s)
'Montr\xe9al'
&gt;&gt;&gt; ord(s[5])
233
&gt;&gt;&gt; hex(233)
'0xe9'
&gt;&gt;&gt; s == "Montr\xe9al"
True
&gt;&gt;&gt; `s` == repr(s)
True
</snippet></ROW><ROW><id>3357213</id><snippet>resultat.writerow([info1, info2] + [line[1:18]]) # WRONG (sorry!)
resultat.writerow([info1, info2] + line[1:18]) # RIGHT
</snippet></ROW><ROW><id>3357269</id><snippet>def __init__(self):
    self.__dict__ = self.__shared_state
    self.lastUpdate = None
</snippet></ROW><ROW><id>3357269</id><snippet>self.lastUpdate = None</snippet></ROW><ROW><id>3357269</id><snippet>self.update()</snippet></ROW><ROW><id>3357269</id><snippet>self.lastUpdate</snippet></ROW><ROW><id>3357269</id><snippet>None</snippet></ROW><ROW><id>3357269</id><snippet>self.lastUpdate = None</snippet></ROW><ROW><id>3357269</id><snippet>__init__</snippet></ROW><ROW><id>3357269</id><snippet>lastUpdate = None
</snippet></ROW><ROW><id>3357269</id><snippet>__shared_state = {}</snippet></ROW><ROW><id>3357305</id><snippet>done = False
for x in xs:
    for y in ys:
        if bad:
            done = True
            break

    if done:
        break
</snippet></ROW><ROW><id>3357305</id><snippet>continue</snippet></ROW><ROW><id>3357305</id><snippet>else</snippet></ROW><ROW><id>3357305</id><snippet>break</snippet></ROW><ROW><id>3357305</id><snippet>for x in xs:
    for y in ys:
        if bad:
            break
    else:
        continue

    break
</snippet></ROW><ROW><id>3357645</id><snippet>&gt;&gt;&gt; d = ssp.lil_matrix((3,3))
&gt;&gt;&gt; d.setdiag(np.ones(3)*3)
&gt;&gt;&gt; a*d
&lt;5x3 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
 with 2 stored elements in Compressed Sparse Row format&gt;
&gt;&gt;&gt; (a*d).todense()
matrix([[ 0.,  0.,  0.],
        [ 0.,  0., -3.],
        [ 0.,  0.,  0.],
        [ 0.,  0.,  0.],
        [ 0.,  6.,  0.]])
</snippet></ROW><ROW><id>3357926</id><snippet>import item
Channel.items = relation(item.Item,
                         secondary=item.channel_items,
                         backref='channels')
</snippet></ROW><ROW><id>3357928</id><snippet>Q(name__icontains="Малахов".decode('utf-8'))|Q(name__icontains="Давай поженимся".decode('utf-8'))
#                                  here ---^
</snippet></ROW><ROW><id>3358084</id><snippet>return fee, fie, foo, fum
</snippet></ROW><ROW><id>3358084</id><snippet>return [fee, fie, foo, fum]
</snippet></ROW><ROW><id>3358084</id><snippet>tuple</snippet></ROW><ROW><id>3358084</id><snippet>import collections</snippet></ROW><ROW><id>3358084</id><snippet>return</snippet></ROW><ROW><id>3358084</id><snippet>freturn = collections.namedtuple('freturn', 'fee fie foo fum')

def f():
  ...
return freturn(fee, fie, foo, fum)
</snippet></ROW><ROW><id>3358084</id><snippet>f()</snippet></ROW><ROW><id>3358084</id><snippet>r = f()
print r.fie
</snippet></ROW><ROW><id>3358084</id><snippet>print r[1]
</snippet></ROW><ROW><id>3358084</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>3358179</id><snippet>import pdb
pdb.set_trace()
</snippet></ROW><ROW><id>3358179</id><snippet>h    help, list commands
s    step through current line
n    step to next line
u    go up the stack
c    continue execution
</snippet></ROW><ROW><id>3358319</id><snippet>1</snippet></ROW><ROW><id>3358319</id><snippet>&gt;&gt;&gt; s = 'celebrex, TRAMADOL'
&gt;&gt;&gt; print s.upper().find('CELEBREX')
0
</snippet></ROW><ROW><id>3358319</id><snippet>0</snippet></ROW><ROW><id>3358424</id><snippet>self.ematrix = [ [ Entry(self.top) for j in range(6)]  # columns
                                   for i in range(30)] # rows

for i,row in enumerate(self.ematrix):
    for j,elt in enumerate(row):
        elt.grid(row=i,column=j)
</snippet></ROW><ROW><id>3358474</id><snippet>import Image
import ImageFile
import subprocess

tiff = 'test.tiff'
im = Image.open(tiff)
print 'size', im.size
try:
    print 'extrema', im.getextrema()
except IOError as e:
    print 'help!', e, '\n'

print 'I Get by with a Little Help from my Friends'
pbm_proc = subprocess.Popen(['tifftopnm', tiff],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)
(pbm_data, pbm_error) = pbm_proc.communicate()
ifp = ImageFile.Parser()
ifp.feed(pbm_data)
im = ifp.close()
print 'conversion message', pbm_error,
print 'extrema', im.getextrema()
print 'size', im.size
# houston: we have an image
im.show()
</snippet></ROW><ROW><id>3358474</id><snippet>$ python g3fax.py 
size (1728, 2156)
extrema help! decoder group3 not available 

I Get by with a Little Help from my Friends
conversion message tifftopnm: writing PBM file
extrema (0, 255)
size (1728, 2156)
</snippet></ROW><ROW><id>3358592</id><snippet>import collections
a = collections.defaultdict(lambda: 3)
a.update({'one':1,'two':2})
print a['three']
</snippet></ROW><ROW><id>3358592</id><snippet>3</snippet></ROW><ROW><id>3358592</id><snippet>dict</snippet></ROW><ROW><id>3358592</id><snippet>__missing__</snippet></ROW><ROW><id>3358592</id><snippet>defaultdict</snippet></ROW><ROW><id>3358592</id><snippet>a</snippet></ROW><ROW><id>3358592</id><snippet>defaultdict</snippet></ROW><ROW><id>3358592</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; a = collections.defaultdict(lambda: 'blah')
&gt;&gt;&gt; print len(a), sys.getsizeof(a)
0 140
&gt;&gt;&gt; for i in xrange(99): _ = a[i]
... 
&gt;&gt;&gt; print len(a), sys.getsizeof(a)
99 6284
</snippet></ROW><ROW><id>3358592</id><snippet>&gt;&gt;&gt; class mydict(dict):
...   def __missing__(self, key): return 3
... 
&gt;&gt;&gt; a = mydict()
&gt;&gt;&gt; print len(a), sys.getsizeof(a)
0 140
&gt;&gt;&gt; for i in xrange(99): _ = a[i]
... 
&gt;&gt;&gt; print len(a), sys.getsizeof(a)
0 140
</snippet></ROW><ROW><id>3358592</id><snippet>$ python -mtimeit -s'import collections; a=collections.defaultdict(int); r=xrange(99)' 'for i in r: _=a[i]'
100000 loops, best of 3: 14.9 usec per loop

$ python -mtimeit -s'class mydict(dict):
&gt;   def __missing__(self, key): return 0
&gt; ' -s'a=mydict(); r=xrange(99)' 'for i in r: _=a[i]'
10000 loops, best of 3: 92.9 usec per loop
</snippet></ROW><ROW><id>3358592</id><snippet>defaultdict</snippet></ROW><ROW><id>3358592</id><snippet>mydict</snippet></ROW><ROW><id>3358592</id><snippet>__missing__</snippet></ROW><ROW><id>3359020</id><snippet>c_void_p</snippet></ROW><ROW><id>3359020</id><snippet>py_object</snippet></ROW><ROW><id>3359020</id><snippet>py_object(my_python_context_object)</snippet></ROW><ROW><id>3359020</id><snippet>cast(context, py_object).value</snippet></ROW><ROW><id>3359020</id><snippet>// FluffyBunny.c
// Compile on windows with command line
//      cl /Gd /LD FluffyBunny.c
// Result is FluffyBunny.DLL, which exports one function:
//      FluffyBunny() uses __cdecl calling convention.

#include &lt;windows.h&gt;

BOOL APIENTRY DllMain(HMODULE, DWORD, LPVOID) {
  return TRUE;
}

typedef int (*FLUFFYBUNNY_CALLBACK)(void *context);

__declspec(dllexport) int FluffyBunny(FLUFFYBUNNY_CALLBACK cb, void *context) {
  int result = 0;
  int count = 0;
  if (cb) {
    while (result == 0) {
      result = (*cb)(context);
      ++count;
    }
  }
  return count;
}
</snippet></ROW><ROW><id>3359020</id><snippet># FluffyBunny.py
from ctypes import *

# Declare a class that will be used for context info in calls to FluffyBunny()
class Rabbit:
    def __init__(self):
        self.count = 0

# FluffyBunny() wants a callback function with the following C prototype:
#     typedef int (*FLUFFYBUNNY_CALLBACK)(void *context);
FLUFFYBUNNY_CALLBACK = CFUNCTYPE(c_int, c_void_p)

# This DLL has been compiled with __cdecl calling convention.
FluffyBunny_dll = CDLL('FluffyBunny.dll')

# Get the function from the library. Its C prototype is:
#     int FluffyBunny(FLUFFYBUNNY_CALLBACK cb, void *context);
# Note that I use "py_object" instead of "c_void_p" for the context argument.
FluffyBunny          = FluffyBunny_dll.FluffyBunny
FluffyBunny.restype  = c_int
FluffyBunny.argtypes = [FLUFFYBUNNY_CALLBACK, py_object]

# Create Python version of the callback function.
def _private_enumerateBunnies(context):
    # Convert the context argument to a py_object, and extract its value.
    # This gives us the original Rabbit object that was passed in to 
    # FluffyBunny().
    furball = cast(context, py_object).value
    # Do something with the context object.
    if furball:
        furball.count += 1
        print 'furball.count =', furball.count
        # Return non-zero as signal that FluffyBunny() should terminate
        return 0 if (furball.count &lt; 10) else -1
    else:
        return -1

# Convert it to a C-callable function.
enumerateBunnies = FLUFFYBUNNY_CALLBACK(_private_enumerateBunnies)

# Try with no context info.
print 'no context info...'
result = FluffyBunny(enumerateBunnies, None)
print 'result=', result

# Give it a Python object as context info.
print 'instance of Rabbit as context info...'
furball = Rabbit()
result = FluffyBunny(enumerateBunnies, py_object(furball))
print 'result=', result
</snippet></ROW><ROW><id>3359236</id><snippet>import *</snippet></ROW><ROW><id>3359236</id><snippet>from mymodule import foo, bar, baz, arr, tee, eff, emm
</snippet></ROW><ROW><id>3359236</id><snippet>import</snippet></ROW><ROW><id>3359236</id><snippet>global</snippet></ROW><ROW><id>3359236</id><snippet>fubar</snippet></ROW><ROW><id>3359236</id><snippet>def foo(var1, var2):
    global bar
    from mainmodule import fubar
    bar = fubar(var1)
</snippet></ROW><ROW><id>3359309</id><snippet> for elem in xml.xpath( '//foo' ) :
      elem.getparent().remove(elem)
</snippet></ROW><ROW><id>3359630</id><snippet>import re

s = re.compile(r'^&lt;div.*?&gt;([^&lt;]+)&lt;br.*?&gt;([^,]+), (\w\w) (\d{5}-\d{4})&lt;/div&gt;$')
mo = s.match(thestring)
if mo is None:
  raise ValueError('No match for %r' % thestring)
address, city, state, zip = mo.groups()
</snippet></ROW><ROW><id>3359759</id><snippet>_</snippet></ROW><ROW><id>3360279</id><snippet>SELECT * FROM table WHERE string LIKE '%substring%'
</snippet></ROW><ROW><id>3360424</id><snippet>yaml.YAMLObject</snippet></ROW><ROW><id>3360424</id><snippet>class Monster(yaml.YAMLObject):
    yaml_tag = u'!Monster'
    def __init__(self, name, hp, ac, attacks):
        self.name = name
        self.hp = hp
        self.ac = ac
        self.attacks = attacks
    def __repr__(self):
        return "%s(name=%r, hp=%r, ac=%r, attacks=%r)" % (
            self.__class__.__name__, self.name, self.hp, self.ac, self.attacks)

print yaml.load("""
--- !Monster
name: Cave spider
hp: [2,6]    # 2d6
ac: 16
attacks: [BITE, HURT]
""")
</snippet></ROW><ROW><id>3360424</id><snippet>Monster(name='Cave spider', hp=[2, 6], ac=16, attacks=['BITE', 'HURT'])</snippet></ROW><ROW><id>3360509</id><snippet>list[ (i for i, j in enumerate( list ) if j.startswith( "1" ) ).next() - 2 ]
</snippet></ROW><ROW><id>3360509</id><snippet>import re
re.search( "\d{5}(?= \d{5} 1\d{4} 2\d{4} 3\d{4})", line )
</snippet></ROW><ROW><id>3360509</id><snippet>1xxxx 2xxxx 3xxxx</snippet></ROW><ROW><id>3360538</id><snippet># Make a queue with (url, filename) tuples
queue = Queue.Queue()
for url in urls:
    url = url.strip()
    if not url or url[0] == "#":
        continue
    filename = "doc_%03d.dat" % (len(queue.queue) + 1)
    queue.put((url, filename))


# Check args
assert queue.queue, "no URLs given"
num_urls = len(queue.queue)
num_conn = min(num_conn, num_urls)
assert 1 &lt;= num_conn &lt;= 10000, "invalid number of concurrent connections"
print "PycURL %s (compiled against 0x%x)" % (pycurl.version, pycurl.COMPILE_LIBCURL_VERSION_NUM)
print "----- Getting", num_urls, "URLs using", num_conn, "connections -----"


class WorkerThread(threading.Thread):
    def __init__(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue

    def run(self):
        while 1:
            try:
                url, filename = self.queue.get_nowait()
            except Queue.Empty:
                raise SystemExit
            fp = open(filename, "wb")
            curl = pycurl.Curl()
            curl.setopt(pycurl.URL, url)
            curl.setopt(pycurl.FOLLOWLOCATION, 1)
            curl.setopt(pycurl.MAXREDIRS, 5)
            curl.setopt(pycurl.CONNECTTIMEOUT, 30)
            curl.setopt(pycurl.TIMEOUT, 300)
            curl.setopt(pycurl.NOSIGNAL, 1)
            curl.setopt(pycurl.WRITEDATA, fp)
            try:
                curl.perform()
            except:
                import traceback
                traceback.print_exc(file=sys.stderr)
                sys.stderr.flush()
            curl.close()
            fp.close()
            sys.stdout.write(".")
            sys.stdout.flush()


# Start a bunch of threads
threads = []
for dummy in range(num_conn):
    t = WorkerThread(queue)
    t.start()
    threads.append(t)


# Wait for all threads to finish
for thread in threads:
    thread.join()
</snippet></ROW><ROW><id>3360889</id><snippet>range( a, b)</snippet></ROW><ROW><id>3360889</id><snippet>b</snippet></ROW><ROW><id>3361298</id><snippet>import lxml.html

page = """&lt;html&gt;...&lt;/html&gt;"""
page = lxml.html.document_fromstring(page)
lxml.html.tostring(page)
</snippet></ROW><ROW><id>3361298</id><snippet>lxml.html</snippet></ROW><ROW><id>3361298</id><snippet>clean</snippet></ROW><ROW><id>3361298</id><snippet>from lxml.html.clean import clean_html
clean_html(page)
</snippet></ROW><ROW><id>3361870</id><snippet>e.__traceback__</snippet></ROW><ROW><id>3361870</id><snippet>try:
    raise ValueError
except ValueError as e:
    print( e.__traceback__ )

&gt;c:/python31/pythonw -u "test.py"
&lt;traceback object at 0x00C964B8&gt;
&gt;Exit code: 0
</snippet></ROW><ROW><id>3362246</id><snippet>qqq = hxs.select("/html/head/link[@type='application/rss+xml']/@href").extract()
</snippet></ROW><ROW><id>3363095</id><snippet>class CurrentCompanyManager(models.Manager):
    def __init__(self,field,*args,**kwargs):
        super(CurrentCompanyManager,self).__init__(*args,**kwargs)
        self.__field_name = field

    def on(self,company):
        return self.filter( **{  self.__field_name + '__id__exact':company.id } )
</snippet></ROW><ROW><id>3363095</id><snippet>class Employee(models.Model):
    # some fields and relationships
    objects = CurrentCompanyManager("section__company")

class Accounts(models.Model):
    # some fields and relationships
    objects = CurrentCompanyManager("customer__company")
</snippet></ROW><ROW><id>3363095</id><snippet>def magic_view(request):
    Employee.objects.on(request.company).all()
</snippet></ROW><ROW><id>3363254</id><snippet>import smtplib, os
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email.Utils import COMMASPACE, formatdate
from email import Encoders

def send_mail(send_from, send_to, subject, text, files=[], server="localhost"):
    assert type(send_to)==list
    assert type(files)==list

    msg = MIMEMultipart()
    msg['From'] = send_from
    msg['To'] = COMMASPACE.join(send_to)
    msg['Date'] = formatdate(localtime=True)
    msg['Subject'] = subject

    msg.attach( MIMEText(text) )

    for f in files:
        part = MIMEBase('application', "octet-stream")
        part.set_payload( open(f,"rb").read() )
        Encoders.encode_base64(part)
        part.add_header('Content-Disposition', 'attachment; filename="%s"' % os.path.basename(f))
        msg.attach(part)

    smtp = smtplib.SMTP(server)
    smtp.sendmail(send_from, send_to, msg.as_string())
    smtp.close()
</snippet></ROW><ROW><id>3363631</id><snippet>def rwh_primes1(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """ Returns  a list of primes &lt; n """
    sieve = [True] * (n//2)
    for i in xrange(3,int(n**0.5)+1,2):
        if sieve[i//2]:
            sieve[i*i//2::i] = [False] * ((n-i*i-1)//(2*i)+1)
    return [2] + [2*i+1 for i in xrange(1,n/2) if sieve[i]]

def rwh_primes_tjv(n):
    # recurrence formula for length by amount1 and amount2 tjv
    """ Returns  a list of primes &lt; n """
    sieve = [True] * (n//2)
    amount1 = n-10
    amount2 = 6

    for i in range(3,int(n**0.5)+1,2):
        if sieve[i//2]:
             ## can you make recurrence formula for whole reciprocal?
            sieve[i*i//2::i] = [False] * (amount1//amount2+1)
        amount1-=4*i+4
        amount2+=4

    return [2] + [2*i+1 for i in xrange(1,n//2) if sieve[i]]

def rwh_primes_len(n):
    """ Returns  a list of primes &lt; n """
    sieve = [True] * (n//2)

    for i in range(3,int(n**0.5)+1,2):
        if sieve[i//2]:
            sieve[i*i//2::i] = [False] * len(sieve[i*i//2::i])

    return [2] + [2*i+1 for i in xrange(1,n//2) if sieve[i]]

def rwh_primes_any(n):
    """ Returns  a list of primes &lt; n """
    halfn=n//2
    sieve = [True] * (halfn)

    for i in range(3,int(n**0.5)+1,2):
        if sieve[i//2]:
            any(sieve.__setitem__(item,False) for item in range(i*i//2,halfn,i))

    return [2] + [2*i+1 for i in xrange(1,n//2) if sieve[i]]


if __name__ == "__main__":
    n = 1000000

    print("rwh sieve1")
    t=clock()
    r=rwh_primes1(n)
    print("Length %i,  %s ms" %(len(r),1000*(clock()-t)))

    print("rwh sieve with recurrence formula")
    t=clock()
    r=rwh_primes_tjv(n)
    print("Length %i,  %s ms" %(len(r),1000*(clock()-t)))

    print("rwh sieve with len function")
    t=clock()
    r=rwh_primes_len(n)
    print("Length %i,  %s ms" %(len(r),1000*(clock()-t)))

    print("rwh sieve with any with side effects")
    t=clock()
    r=rwh_primes_any(n)
    print("Length %i,  %s ms" %(len(r),1000*(clock()-t)))
    raw_input('Ready')

""" Output:
rwh sieve1
Length 78498,  213.199442946 ms
rwh sieve with recurrence formula
Length 78498,  218.34143725 ms
rwh sieve with len function
Length 78498,  257.80008353 ms
rwh sieve with any with side effects
Length 78498,  829.977273648 ms
Ready
"""
</snippet></ROW><ROW><id>3364025</id><snippet>openid.claimed_id</snippet></ROW><ROW><id>3364025</id><snippet>openid.identity</snippet></ROW><ROW><id>3364157</id><snippet>=</snippet></ROW><ROW><id>3364157</id><snippet>b</snippet></ROW><ROW><id>3364157</id><snippet>samples_subset1</snippet></ROW><ROW><id>3364841</id><snippet>session.close()</snippet></ROW><ROW><id>3365105</id><snippet>DECIMAL</snippet></ROW><ROW><id>3365105</id><snippet>conv=</snippet></ROW><ROW><id>3365105</id><snippet>connect</snippet></ROW><ROW><id>3365105</id><snippet>MySQLdb.converters.conversions</snippet></ROW><ROW><id>3365156</id><snippet>class Record(models.Model):
    name = models.CharField()
</snippet></ROW><ROW><id>3365156</id><snippet>class MyCustomForm(forms.Form):
    records= forms.ModelMultipleChoiceField(queryset=Record.objects.all, widget=forms.CheckboxSelectMultiple)
</snippet></ROW><ROW><id>3365156</id><snippet>def myview(request):
    if request.method == 'POST':
        form = MyCustomForm(data=request.POST)
        if form.is_valid():
            #do what you want with your data
            print form.cleaned_data['records']
            #do what you want with your data
    else:
        form = MyCustomForm()
    return render_to_response('mytemplate.html', {'form': form}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>3365156</id><snippet>mytemplate.html</snippet></ROW><ROW><id>3365156</id><snippet>&lt;div&gt;
    {{ form.records.label_tag }}
    {{ form.records }}
&lt;/div&gt;
</snippet></ROW><ROW><id>3365589</id><snippet>mainmyServ</snippet></ROW><ROW><id>3365589</id><snippet>def mainmyServ(self):
        # print "Client ID is: " + self.myServID
    # Joining Chat
    s1= DeferredList([client.getPage(self.myServServer+"/chat/", headers={'Content-Type': 'application/x-www-form-urlencoded'}, method="POST", postdata="action=join&amp;user=%s&amp;message=null" % self.myServID),])
    s1.addCallback(self.connectedtomyServService)
    s1.addErrback(self.error)
</snippet></ROW><ROW><id>3365589</id><snippet>DeferredList</snippet></ROW><ROW><id>3365589</id><snippet>Deferred</snippet></ROW><ROW><id>3365589</id><snippet>DeferredList</snippet></ROW><ROW><id>3365589</id><snippet>[0][0]</snippet></ROW><ROW><id>3365589</id><snippet>def mainmyServ(self):
        # print "Client ID is: " + self.myServID
    # Joining Chat
    s1= client.getPage(self.myServServer+"/chat/", headers={'Content-Type': 'application/x-www-form-urlencoded'}, method="POST", postdata="action=join&amp;user=%s&amp;message=null" % self.myServID)
    s1.addCallback(self.connectedtomyServService)
    s1.addErrback(self.error)
</snippet></ROW><ROW><id>3365589</id><snippet>def main():
    service = ChatService()
    service.mainmyServ()
</snippet></ROW><ROW><id>3365589</id><snippet>main</snippet></ROW><ROW><id>3365589</id><snippet>Deferred</snippet></ROW><ROW><id>3365589</id><snippet>mainmyServ</snippet></ROW><ROW><id>3365589</id><snippet>mainmyServ</snippet></ROW><ROW><id>3365589</id><snippet>def mainmyServ(self):
        # print "Client ID is: " + self.myServID
    # Joining Chat
    s1= client.getPage(self.myServServer+"/chat/", headers={'Content-Type': 'application/x-www-form-urlencoded'}, method="POST", postdata="action=join&amp;user=%s&amp;message=null" % self.myServID)
    s1.addCallback(self.connectedtomyServService)
    s1.addErrback(self.error)
    return s1


def main():
    service = ChatService()
    d = service.mainmyServ()
    d.addCallback(doSomethingElse)
</snippet></ROW><ROW><id>3365589</id><snippet>addCallback</snippet></ROW><ROW><id>3365589</id><snippet>Deferred</snippet></ROW><ROW><id>3365589</id><snippet>doSomethingElse</snippet></ROW><ROW><id>3365589</id><snippet>ChatService</snippet></ROW><ROW><id>3365589</id><snippet>Deferred</snippet></ROW><ROW><id>3365589</id><snippet>doSomethingElse</snippet></ROW><ROW><id>3365589</id><snippet>mainmyServ</snippet></ROW><ROW><id>3365785</id><snippet>ctypes.windll.user32.MessageBoxW(0, u"Error", u"Error", 0)
</snippet></ROW><ROW><id>3365846</id><snippet>__init__.py</snippet></ROW><ROW><id>3365846</id><snippet>import pkgutil

__all__ = []
for loader, module_name, is_pkg in  pkgutil.walk_packages(__path__):
    __all__.append(module_name)
    module = loader.find_module(module_name).load_module(module_name)
    exec('%s = module' % module_name)
</snippet></ROW><ROW><id>3365846</id><snippet>__import__(__path__+'.'+module_name)</snippet></ROW><ROW><id>3365846</id><snippet>exec</snippet></ROW><ROW><id>3365846</id><snippet>eval</snippet></ROW><ROW><id>3365846</id><snippet>scripts/__init__.py</snippet></ROW><ROW><id>3365846</id><snippet>import script1
import script2
import script3
__all__ = ['script1', 'script2', 'script3']
</snippet></ROW><ROW><id>3365846</id><snippet>__all__</snippet></ROW><ROW><id>3366046</id><snippet>self.photo = PhotoImage(file="noart.ppm")
    self.Artwork = Label(self.frame, image=self.photo)
    self.Artwork.photo = self.photo
    self.Artwork.pack()
</snippet></ROW><ROW><id>3366366</id><snippet>f2</snippet></ROW><ROW><id>3366366</id><snippet>f2</snippet></ROW><ROW><id>3366366</id><snippet>iteritems</snippet></ROW><ROW><id>3366366</id><snippet>import collections
import string
import random

def random_dict():
    n=random.randint(1,26)
    keys=list(string.letters)
    random.shuffle(keys)
    keys=keys[:n]
    values=[random.randint(1,100) for _ in range(n)]    
    return dict(zip(keys,values))

list_dictionaries=[random_dict() for x in xrange(100)]

def f1(list_dictionaries):
    comb_dict = {}  
    for dictionary in list_dictionaries:  
        for key in dictionary:  
            comb_dict.setdefault(key, 0)  
            comb_dict[key] += dictionary[key]  
    return comb_dict

def f2(list_dictionaries):    
    comb_dict = collections.defaultdict(int)
    for dictionary in list_dictionaries:  
        for key,value in dictionary.iteritems():  
            comb_dict[key] += value
    return comb_dict

def union( dict_list ):
    all_keys = set()
    for d in dict_list:
        for k in d:
            all_keys.add( k )
    for key in all_keys:
        yield key, sum( d.get(key,0) for d in dict_list)

def f3(list_dictionaries):
    return dict(union( list_dictionaries ))
</snippet></ROW><ROW><id>3366366</id><snippet>% python -mtimeit -s"import test" "test.f1(test.list_dictionaries)"
1000 loops, best of 3: 776 usec per loop
% python -mtimeit -s"import test" "test.f2(test.list_dictionaries)"
1000 loops, best of 3: 432 usec per loop    
% python -mtimeit -s"import test" "test.f3(test.list_dictionaries)"
100 loops, best of 3: 2.19 msec per loop
</snippet></ROW><ROW><id>3367309</id><snippet>data = self.cmd("r.out.gdal in=rdata out=geo{0}.tif".format(i))
self.dataOutTIF.setValue("geo{0}.tif".format(i))
</snippet></ROW><ROW><id>3367309</id><snippet>str.format(*args, **kwargs)
</snippet></ROW><ROW><id>3367309</id><snippet>&gt;&gt;&gt; "The sum of 1 + 2 is {0}".format(1+2)
'The sum of 1 + 2 is 3'
</snippet></ROW><ROW><id>3367309</id><snippet>New in version 2.6.
</snippet></ROW><ROW><id>3367341</id><snippet>1 / 2</snippet></ROW><ROW><id>3367341</id><snippet>1 / float(2) == 0.5</snippet></ROW><ROW><id>3367341</id><snippet>math.ceil(1 / float(2))</snippet></ROW><ROW><id>3367341</id><snippet>1</snippet></ROW><ROW><id>3367595</id><snippet>tuples = [('and', 44023), ('cx', 37711), ('is', 36777) .... ]
strings, numbers = zip(*tuples)
</snippet></ROW><ROW><id>3367702</id><snippet>    self.hitBox = Rect(self.gPos.x, self.gPos.y, 40, 40)
    self.gPos += self.velocity  
</snippet></ROW><ROW><id>3367702</id><snippet>    self.gPos += self.velocity  
    self.hitBox = Rect(self.gPos.x, self.gPos.y, 40, 40)
</snippet></ROW><ROW><id>3367702</id><snippet>class Player(object):  
    ...  
    def move(self):
        #at this point, velocity = some linear combination of (5, 0)and (5, 5)
        #gPos and velocity are types Vector2    
        selfCopy = self
        selfCopy.gPos += self.velocity
        selfCopy.hitBox = Rect(selfCopy.gPos.x, selfCopy.gPos.y, 40, 40)
        if not CheckCollisions(selfCopy)    
            self.gPos += self.velocity
    ...
def CheckCollisions(obj):
    #archList holds all 'architecture' objects, solid == True means you can't walk        
    #through it. colliderect checks to see if the rectangles are overlapping
    for i in archList:
        if i.solid:
            if i.hitBox.colliderect(obj.hitBox):
                return True
    return False
</snippet></ROW><ROW><id>3367868</id><snippet>translate</snippet></ROW><ROW><id>3367868</id><snippet>translate</snippet></ROW><ROW><id>3367868</id><snippet>r'onestring|another|yetanother|orthis'</snippet></ROW><ROW><id>3367868</id><snippet>re.escape</snippet></ROW><ROW><id>3367868</id><snippet>python -mtimeit -s'setup things here' 'statements to check'</snippet></ROW><ROW><id>3367868</id><snippet>timeit</snippet></ROW><ROW><id>3367868</id><snippet>import re

class Replacer(object):

  def __init__(self, **replacements):
    self.replacements = replacements
    self.locator = re.compile('|'.join(re.escape(s) for s in replacements))

  def _doreplace(self, mo):
    return self.replacements[mo.group()]

  def replace(self, s):
    return self.locator.sub(self._doreplace, s)
</snippet></ROW><ROW><id>3367868</id><snippet>r = Replacer(zap='zop', zip='zup')
print r.replace('allazapollezipzapzippopzip')
</snippet></ROW><ROW><id>3367868</id><snippet>r = Replacer(abc='xyz', def='yyt', ghi='zzq')
</snippet></ROW><ROW><id>3367868</id><snippet>def</snippet></ROW><ROW><id>3367868</id><snippet>r = Replacer(abc='xyz', ghi='zzq', **{'def': 'yyt'})
</snippet></ROW><ROW><id>3367868</id><snippet>replace</snippet></ROW><ROW><id>3367868</id><snippet>def make_replacer(**replacements):
  locator = re.compile('|'.join(re.escape(s) for s in replacements))

  def _doreplace(mo):
    return replacements[mo.group()]

  def replace(s):
    return locator.sub(_doreplace, s)

  return replace

r = make_replacer(zap='zop', zip='zup')
print r('allazapollezipzapzippopzip')
</snippet></ROW><ROW><id>3367868</id><snippet>timeit</snippet></ROW><ROW><id>3367868</id><snippet>replacements</snippet></ROW><ROW><id>3367868</id><snippet>locator</snippet></ROW><ROW><id>3367868</id><snippet>_doreplace</snippet></ROW><ROW><id>3367868</id><snippet>self.replacements</snippet></ROW><ROW><id>3367868</id><snippet>timeit</snippet></ROW><ROW><id>3367892</id><snippet>r'c:\Python26\lib\site.py'.lower().replace('python26', r'image\python26')
</snippet></ROW><ROW><id>3367892</id><snippet>&gt;&gt;&gt; def ireplace(s, a, b):
...     return re.sub("(?i)"+re.escape(a),b,s)
...
&gt;&gt;&gt; print ireplace(r'c:\Python26\lib\site.py', 'C:\python26', r'image\python26')
image\python26\lib\site.py
</snippet></ROW><ROW><id>3367903</id><snippet>&gt;&gt;&gt; print "Hello World!"
  File "&lt;stdin&gt;", line 1
    print "Hello World!"
SyntaxError: invalid syntax
&gt;&gt;&gt; print("Hello World!")
Hello World!
</snippet></ROW><ROW><id>3368074</id><snippet>control.Hide()</snippet></ROW><ROW><id>3368074</id><snippet>control.Show(False)</snippet></ROW><ROW><id>3368243</id><snippet>import BeautifulSoup</snippet></ROW><ROW><id>3368243</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>3368243</id><snippet>from BeautifulSoup import BeautifulSoup</snippet></ROW><ROW><id>3368243</id><snippet>from ...</snippet></ROW><ROW><id>3368243</id><snippet>from BeautifulSoup import BeautifulSoup 
Soup = BeautifulSoup
...
import BeautifulSoup
....
soup = Soup(html)
</snippet></ROW><ROW><id>3368280</id><snippet>function sum(arr) {
  var result = 0, n = arr.length || 0; //may use &gt;&gt;&gt; 0 to ensure length is Uint32
  while(n--) {
    result += +arr[n]; // unary operator to ensure ToNumber conversion
  }
  return result;
}

var x = [1.2, 3.4, 5.6];
sum(x); // 10.2
</snippet></ROW><ROW><id>3368280</id><snippet>Array.prototype.reduce</snippet></ROW><ROW><id>3368280</id><snippet>var arr = [1.2, 3.4, 5.6];
arr.reduce(function (a, b) { return a + b; }, 0); // 10.2
</snippet></ROW><ROW><id>3368280</id><snippet>reduce</snippet></ROW><ROW><id>3368285</id><snippet>VARIABLE_VAL = somethingELSE
for dataline in temp: ...
</snippet></ROW><ROW><id>3368285</id><snippet>VARIABLE_VAL</snippet></ROW><ROW><id>3368309</id><snippet>__file__ 
</snippet></ROW><ROW><id>3368309</id><snippet>fH = file(os.path.join(os.path.dirname(__file__), 'someFile.txt'), 'w')
fH.write('here is my string')
fH.close()
</snippet></ROW><ROW><id>3368483</id><snippet>sys.path</snippet></ROW><ROW><id>3368483</id><snippet>setup.py</snippet></ROW><ROW><id>3368483</id><snippet>setup.py</snippet></ROW><ROW><id>3368483</id><snippet>python setup.py install
</snippet></ROW><ROW><id>3368483</id><snippet>site-packages</snippet></ROW><ROW><id>3368483</id><snippet>python setup.py install --user
</snippet></ROW><ROW><id>3368483</id><snippet>site-packages</snippet></ROW><ROW><id>3368541</id><snippet>__process_calls</snippet></ROW><ROW><id>3368541</id><snippet>__enqueued_calls</snippet></ROW><ROW><id>3368541</id><snippet>def run(self):        
    while not self.__stop:  # while we've not been killed 
        with self.__enqueue_call_permission:
            # get the condition so that we can wait on it if we need too. 
            ### should be checking __stop here, it could have been modified before
            ### you took the lock.
            if not self.__enqueued_calls: 
                self.__enqueue_call_permission.wait() 
        self.__process_calls()
    else:
        # if we exit because self._run == False, finish processing
        # the pending calls if there are any
        self.__process_calls()
</snippet></ROW><ROW><id>3368649</id><snippet>dictionary['foo' if otherset == 'bar' else 'bar'].discard(element)
</snippet></ROW><ROW><id>3368662</id><snippet>abstract.o</snippet></ROW><ROW><id>3368662</id><snippet>-fPIC</snippet></ROW><ROW><id>3368662</id><snippet>-fPIC</snippet></ROW><ROW><id>3368662</id><snippet>libpython2.4.a</snippet></ROW><ROW><id>3368662</id><snippet>-fPIC</snippet></ROW><ROW><id>3368662</id><snippet>libpython2.4.a</snippet></ROW><ROW><id>3368780</id><snippet>findAll</snippet></ROW><ROW><id>3368780</id><snippet>form = soup.findAll('form')[0]
table = form.findAll('table')[0]  # table inside form
</snippet></ROW><ROW><id>3368833</id><snippet>def group_details(request, group_id):
    group = get_object_or_404(Group, pk=group_id)
    return render_to_response('group_details.html',
                              {'group': group})
</snippet></ROW><ROW><id>3368833</id><snippet>&lt;h2&gt;{{ group.name }}&lt;/h2&gt;
{% for membership in group.membership_set.all %}
    &lt;h3&gt;{{ membership.person }}&lt;/h3&gt;
    {{ membership.date_joined }}
{% endfor %}
</snippet></ROW><ROW><id>3368847</id><snippet>EXTENT</snippet></ROW><ROW><id>3368847</id><snippet>AFFINE</snippet></ROW><ROW><id>3368862</id><snippet>findAll</snippet></ROW><ROW><id>3368862</id><snippet>table = form.findAll('table', width='79%')[0]
tr = table.findAll(...)
</snippet></ROW><ROW><id>3368991</id><snippet>s = "123123STRINGabcabc"

def find_between( s, first, last ):
    try:
        start = s.index( first ) + len( first )
        end = s.index( last, start )
        return s[start:end]
    except ValueError:
        return ""

def find_between_r( s, first, last ):
    try:
        start = s.rindex( first ) + len( first )
        end = s.rindex( last, start )
        return s[start:end]
    except ValueError:
        return ""


print find_between( s, "123", "abc" )
print find_between_r( s, "123", "abc" )
</snippet></ROW><ROW><id>3368991</id><snippet>123STRING
STRINGabc
</snippet></ROW><ROW><id>3368991</id><snippet>index</snippet></ROW><ROW><id>3368991</id><snippet>rindex</snippet></ROW><ROW><id>3368991</id><snippet>(.*)</snippet></ROW><ROW><id>3368991</id><snippet>(.*?)</snippet></ROW><ROW><id>3369477</id><snippet>import dis
def f1():
    x=5
    if x &lt; 0: pass

def f2():
    x = 5
    if x &gt;=0: pass

&gt;&gt;&gt; dis.dis(f1)
  2           0 LOAD_CONST               1 (5) 
              3 STORE_FAST               0 (x) 

  3           6 LOAD_FAST                0 (x) 
              9 LOAD_CONST               2 (0) 
             12 COMPARE_OP               0 (&lt;) 
             15 POP_JUMP_IF_FALSE       21 
             18 JUMP_FORWARD             0 (to 21) 
        &gt;&gt;   21 LOAD_CONST               0 (None) 
             24 RETURN_VALUE         
&gt;&gt;&gt; dis.dis(f2)
  2           0 LOAD_CONST               1 (5) 
              3 STORE_FAST               0 (x) 

  3           6 LOAD_FAST                0 (x) 
              9 LOAD_CONST               2 (0) 
             12 COMPARE_OP               5 (&gt;=) 
             15 POP_JUMP_IF_FALSE       21 
             18 JUMP_FORWARD             0 (to 21) 
        &gt;&gt;   21 LOAD_CONST               0 (None) 
             24 RETURN_VALUE         
</snippet></ROW><ROW><id>3369815</id><snippet>used_keys</snippet></ROW><ROW><id>3369815</id><snippet>used_keys</snippet></ROW><ROW><id>3369815</id><snippet>&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; for x in a:
...    print x
...    a=[]
...
1
2
3
</snippet></ROW><ROW><id>3369815</id><snippet>&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; for x in a:
...    print x
...    a[:] = []
...
1
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3369912</id><snippet>__call__</snippet></ROW><ROW><id>3369912</id><snippet>__call__</snippet></ROW><ROW><id>3369912</id><snippet>run()</snippet></ROW><ROW><id>3369912</id><snippet>doStuff()</snippet></ROW><ROW><id>3369912</id><snippet>go()</snippet></ROW><ROW><id>3369912</id><snippet>doRun()</snippet></ROW><ROW><id>3370385</id><snippet>A(2)</snippet></ROW><ROW><id>3370385</id><snippet>A.__init__</snippet></ROW><ROW><id>3370385</id><snippet>A.__init__</snippet></ROW><ROW><id>3370385</id><snippet>A(val)</snippet></ROW><ROW><id>3370385</id><snippet>A(val)</snippet></ROW><ROW><id>3370385</id><snippet>A.__init__</snippet></ROW><ROW><id>3370385</id><snippet>val</snippet></ROW><ROW><id>3370385</id><snippet>val</snippet></ROW><ROW><id>3370385</id><snippet>3</snippet></ROW><ROW><id>3370385</id><snippet>2</snippet></ROW><ROW><id>3370385</id><snippet>class A( object ):
    @property
    def val( self ):
        return self.history[ -1 ]

    @val.setter
    def val( self, value ):
        self.history.append( value )

    def __init__( self, val ):
        self.history = [ ]
        self.val = val
</snippet></ROW><ROW><id>3370385</id><snippet>A( object )</snippet></ROW><ROW><id>3370385</id><snippet>object</snippet></ROW><ROW><id>3370385</id><snippet>@property</snippet></ROW><ROW><id>3370385</id><snippet>property</snippet></ROW><ROW><id>3370385</id><snippet>@val.setter</snippet></ROW><ROW><id>3370385</id><snippet>A.val</snippet></ROW><ROW><id>3370385</id><snippet>A.val</snippet></ROW><ROW><id>3370723</id><snippet>def log_open( *args, **kwargs ):
    print( "Opening a file..." )
    print( *args, **kwargs )
    return open( *args, **kwargs )
</snippet></ROW><ROW><id>3370723</id><snippet>log_open</snippet></ROW><ROW><id>3370723</id><snippet>open</snippet></ROW><ROW><id>3370723</id><snippet>File</snippet></ROW><ROW><id>3370723</id><snippet>__dict__</snippet></ROW><ROW><id>3371274</id><snippet>numbers = [ int(x) for x in numbers ]
</snippet></ROW><ROW><id>3371624</id><snippet>query.filter("strftime('%w', access_date) = :dow").params(dow=0).all()
</snippet></ROW><ROW><id>3371851</id><snippet>&gt;&gt;&gt; def f1():
    'hello'


&gt;&gt;&gt; def f2():
    'hel' 'lo'


&gt;&gt;&gt; def f3():
    'hel' + 'lo'


&gt;&gt;&gt; def f4():
    'hel%s' % 'lo'


&gt;&gt;&gt; def f5():
    'hel%s' % ('lo',)


&gt;&gt;&gt; for f in (f1, f2, f3, f4, f5):
    print(f.__name__)
    dis.dis(f)


f1
  1           0 LOAD_CONST               1 (None) 
              3 RETURN_VALUE         
f2
  1           0 LOAD_CONST               1 (None) 
              3 RETURN_VALUE         
f3
  2           0 LOAD_CONST               3 ('hello') 
              3 POP_TOP              
              4 LOAD_CONST               0 (None) 
              7 RETURN_VALUE         
f4
  2           0 LOAD_CONST               3 ('hello') 
              3 POP_TOP              
              4 LOAD_CONST               0 (None) 
              7 RETURN_VALUE         
f5
  2           0 LOAD_CONST               1 ('hel%s') 
              3 LOAD_CONST               3 (('lo',)) 
              6 BINARY_MODULO        
              7 POP_TOP              
              8 LOAD_CONST               0 (None) 
             11 RETURN_VALUE         
</snippet></ROW><ROW><id>3372289</id><snippet>-t</snippet></ROW><ROW><id>3372289</id><snippet>~/.ssh/config</snippet></ROW><ROW><id>3372289</id><snippet>#!/bin/sh

ssh -t "$*"
</snippet></ROW><ROW><id>3372289</id><snippet>ssh-t</snippet></ROW><ROW><id>3372289</id><snippet>chmod +x ssh-t</snippet></ROW><ROW><id>3372289</id><snippet>PATH</snippet></ROW><ROW><id>3372289</id><snippet>GIT_SSH=ssh-t</snippet></ROW><ROW><id>3372402</id><snippet>words = {"this": 0, "that": 0}
for w in text.split():
  if w in words:
    words[w] += 1
</snippet></ROW><ROW><id>3372442</id><snippet>from models import *</snippet></ROW><ROW><id>3372442</id><snippet>models</snippet></ROW><ROW><id>3372442</id><snippet>ldict = locals()
for k in models.__dict__:
    if not k.startswith('__') or not k.endswith('__'):
        ldict[k] = models.__dict__[k]
</snippet></ROW><ROW><id>3372442</id><snippet>exec("from project.data_{0}.models import *".format(release)) in locals()
</snippet></ROW><ROW><id>3372754</id><snippet>from types import FunctionType

class C:
    def __init__(self):
        for name,f in C.__dict__.iteritems():
            if type(f) == FunctionType and hasattr(f, 'setup'):
                  self.instance_method()

    def instance_method(self):
      print('Method called')

    def decorator(f):
        setattr(f, 'setup', True)
        return f

    @decorator
    def function(self):
      pass

c = C()
c.function()
c.function()
</snippet></ROW><ROW><id>3373214</id><snippet>import simplejson
import urllib2

def search_twitter(quoted_search_term): 
    url = "http://search.twitter.com/search.json?&amp;q=%%23%s" % quoted_search_term
    f = urllib2.urlopen(url)
    content = f.read()
    json = simplejson.loads(content)
    return json
</snippet></ROW><ROW><id>3373351</id><snippet> f = response.body_file
 f.write('hey')
</snippet></ROW><ROW><id>3373633</id><snippet>slotseeder</snippet></ROW><ROW><id>3373633</id><snippet>slotseeder()</snippet></ROW><ROW><id>3373633</id><snippet>### Monster Statistics ####

default_stats = dict(name='unknown',
                 HP=[0, 0, 0, 0],
                 Atk1=[0, 0, 0, 0], Atk1dmg=[0, 0, 0, 0],
                 Atk2=[0, 0, 0, 0], Atk2dmg=[0, 0, 0, 0],
                 Atk3=[0, 0, 0, 0], Atk3dmg=[0, 0, 0, 0],
                 Dfns=[0, 0, 0, 0])

Monsters = [dict(default_stats, name='Cerebus'),
            dict(default_stats, name='Cthulhu'),
            dict(default_stats, name='Cyclops',
                 HP=[65, 85, 95, 130],
                 Atk1=[3, 4, 4, 5], Atk1dmg=[3, 4, 4, 5],
                 Atk2=[2, 3, 3, 4], Atk2dmg=[5, 6, 6, 7],
                 Atk3=[1, 2, 3, 3], Atk3dmg=[5, 6, 6, 7],
                 Dfns=[2, 3, 4, 5]),
            dict(default_stats, name='Genie'),
            dict(default_stats, name='Giant Ape',
                 HP=[70, 90, 110, 140],
                 Atk1=[3, 4, 4, 5], Atk1dmg=[4, 5, 5, 6],
                 Atk2=[2, 2, 3, 4], Atk2dmg=[5, 6, 6, 7],
                 Atk3=[1, 2, 3, 3], Atk3dmg=[6, 6, 7, 8],
                 Dfns=[2, 3, 3, 4]),
            dict(default_stats, name='Giant Lizard',
                 HP=[80, 100, 130, 170],
                 Atk1=[3, 3, 4, 5], Atk1dmg=[3, 4, 5, 6],
                 Atk2=[2, 3, 3, 4], Atk2dmg=[4, 5, 6, 7],
                 Atk3=[1, 2, 2, 3], Atk3dmg=[6, 7, 8, 8],
                 Dfns=[1, 2, 2, 3]),
            dict(default_stats, name='Grey Alien',
                 HP=[30, 40, 45, 50],
                 Atk1=[3, 3, 4, 5], Atk1dmg=[1, 2, 2, 3],
                 Atk2=[2, 2, 3, 4], Atk2dmg=[2, 3, 3, 4],
                 Atk3=[1, 2, 3, 4], Atk3dmg=[4, 5, 5, 6],
                 Dfns=[3, 4, 4, 5]),
            dict(default_stats, name='Gryffin'),
            dict(name='Leprechaun',
                HP=[30, 35, 50, 65],
                Atk1=[3, 4, 4, 5], Atk1dmg=[1, 1, 2, 3],
                Atk2=[2, 3, 4, 5], Atk2dmg=[2, 2, 3, 4],
                Atk3=[1, 2, 3, 4], Atk3dmg=[4, 5, 6, 6],
                Dfns=[4, 6, 7, 8]),
            dict(default_stats, name='Medusa',
                 HP=[20, 30, 45, 50],
                 Atk1=[3, 3, 4, 4], Atk1dmg=[1, 2, 2, 3],
                 Atk2=[2, 2, 3, 4], Atk2dmg=[2, 2, 3, 3],
                 Atk3=[1, 1, 2, 3], Atk3dmg=[4, 5, 5, 6],
                 Dfns=[2, 3, 4, 4]),
            dict(default_stats, name='Minotaur'),
            dict(default_stats, name='Ninja',
                 HP=[20, 30, 40, 55],
                 Atk1=[4, 5, 5, 7], Atk1dmg=[1, 2, 3, 3],
                 Atk2=[3, 4, 5, 6], Atk2dmg=[3, 4, 5, 6],
                 Atk3=[2, 2, 3, 3], Atk3dmg=[4, 5, 5, 6],
                 Dfns=[4, 5, 6, 7]),
            dict(default_stats, name='Ogre'),
            dict(default_stats, name='Ooze Monster',
                 HP=[30, 40, 60, 90],
                 Atk1=[4, 5, 6, 7], Atk1dmg=[1, 1, 2, 3],
                 Atk2=[2, 2, 3, 3], Atk2dmg=[2, 2, 3, 3],
                 Atk3=[1, 1, 2, 2], Atk3dmg=[4, 4, 6, 7],
                 Dfns=[1, 2, 3, 3]),
            dict(default_stats, name='Orc'),
            dict(default_stats, name='Pirate',
                 HP=[20, 30, 40, 45],
                 Atk1=[4, 5, 5, 6], Atk1dmg=[2, 3, 3, 4],
                 Atk2=[2, 2, 3, 4], Atk2dmg=[3, 3, 4, 5],
                 Atk3=[2, 3, 3, 4], Atk3dmg=[3, 4, 5, 6],
                 Dfns=[3, 4, 4, 5]),
            dict(default_stats, name='Possessed Doll'),
            dict(default_stats, name='Robot',
                HP=[63, 76, 84, 102],
                Atk1=[4, 5, 5, 6], Atk1dmg=[1, 2, 2, 3],
                Atk2=[3, 4, 4, 5], Atk2dmg=[2, 3, 3, 4],
                Atk3=[2, 2, 3, 3], Atk3dmg=[3, 4, 5, 5],
                Dfns=[2, 3, 4, 4]),
            dict(default_stats, name='Sasquatch'),
            dict(name='Unicorn',
                 HP=[25, 35, 50, 85],
                 Atk1=[3, 4, 4, 5], Atk1dmg=[2, 2, 3, 4],
                 Atk2=[3, 4, 5, 6], Atk2dmg=[3, 4, 5, 5],
                 Atk3=[2, 3, 4, 5], Atk3dmg=[4, 5, 6, 7],
                 Dfns=[4, 5, 6, 7]),
            dict(default_stats, name='Vampire',
                 HP=[40, 50, 75, 95],
                 Atk1=[4, 5, 5, 6], Atk1dmg=[1, 2, 2, 3],
                 Atk2=[2, 3, 3, 4], Atk2dmg=[2, 3, 4, 4],
                 Atk3=[1, 2, 2, 3], Atk3dmg=[3, 4, 5, 5],
                 Dfns=[3, 4, 5, 6]),
            dict(default_stats, name='Werewolf',
                HP=[25, 30, 50, 75],
                Atk1=[4, 4, 5, 6], Atk1dmg=[1, 2, 3, 3],
                Atk2=[3, 3, 4, 5], Atk2dmg=[2, 3, 3, 3],
                Atk3=[1, 1, 2, 4], Atk3dmg=[4, 4, 5, 6],
                Dfns=[4, 5, 6, 7]),
            dict(default_stats, name='Witch'),
            dict(default_stats, name='Wizard',
                 HP=[40, 60, 90, 115],
                 Atk1=[3, 3, 4, 5], Atk1dmg=[1, 1, 2, 2],
                 Atk2=[2, 3, 4, 4], Atk2dmg=[4, 4, 5, 6],
                 Atk3=[1, 1, 3, 3], Atk3dmg=[4, 5, 5, 6],
                 Dfns=[4, 5, 6, 6]),
            dict(default_stats, name='Yeti',
                 HP=[30, 35, 55, 80],
                 Atk1=[3, 4, 4, 5], Atk1dmg=[1, 2, 3, 4],
                 Atk2=[2, 2, 3, 4], Atk2dmg=[3, 3, 4, 5],
                 Atk3=[1, 1, 2, 3], Atk3dmg=[4, 5, 5, 6],
                 Dfns=[3, 3, 4, 5]),
            dict(default_stats, name='Zombie',
                 HP=[49, 60, 90, 120],
                 Atk1=[3, 3, 4, 5], Atk1dmg=[1, 2, 2, 3],
                 Atk2=[2, 2, 3, 4], Atk2dmg=[2, 3, 4, 4],
                 Atk3=[1, 1, 2, 3], Atk3dmg=[3, 4, 4, 5],
                 Dfns=[1, 2, 2, 3])
    ]

import random

picked = [monster for monster in Monsters 
          if monster['name'] in ['Cyclops',
                                 'Genie', 'Giant Ape', 'Giant Lizard',
                                 'Grey Alien', 'Leprechaun', 'Medusa',
                                 'Ninja', 'Ooze Monster', 'Pirate',
                                 'Robot', 'Unicorn', 'Vampire',
                                 'Werewolf', 'Wizard', 'Zombie']]

def slotseeder ():
    randomnumber = (random.randrange(0,len(picked)))
    if picked[randomnumber] != None:
        pickedmonster = Monsters[randomnumber]
        picked[randomnumber] = None
        return pickedmonster

P01 = slotseeder()
if P01 is not None:
    print "I got monster:", P01
else:
    print "Monster already used"
</snippet></ROW><ROW><id>3373692</id><snippet>Popen</snippet></ROW><ROW><id>3373692</id><snippet>preexec_fn</snippet></ROW><ROW><id>3373692</id><snippet>multiprocessing</snippet></ROW><ROW><id>3374416</id><snippet>xl.DisplayAlerts = False
</snippet></ROW><ROW><id>3374416</id><snippet> xl.DisplayAlerts = True
</snippet></ROW><ROW><id>3374448</id><snippet>__init__</snippet></ROW><ROW><id>3374448</id><snippet>Subclass</snippet></ROW><ROW><id>3374448</id><snippet>setup</snippet></ROW><ROW><id>3374448</id><snippet>other</snippet></ROW><ROW><id>3374448</id><snippet>__init__</snippet></ROW><ROW><id>3374448</id><snippet>super(...).__init__</snippet></ROW><ROW><id>3374448</id><snippet>Base.__init__(self)</snippet></ROW><ROW><id>3374448</id><snippet>Base</snippet></ROW><ROW><id>3374490</id><snippet>re.findall</snippet></ROW><ROW><id>3374490</id><snippet>(...)</snippet></ROW><ROW><id>3374514</id><snippet>no-global-site-packages.txt</snippet></ROW><ROW><id>3374514</id><snippet>Lib</snippet></ROW><ROW><id>3374670</id><snippet>data['w:x:y:z'] = {'a':5, 'b':10}

for path, d in data.items():
    print '%s:%s' % (path, ':'.join("%s=%r" % pair for pair in d.items()))
</snippet></ROW><ROW><id>3374670</id><snippet>for w, wvals in data.items():
    for x, xvals in wvals.items():
        for y, yvals in xvals.items():
            for z, zvals in yvals.items():
                print '%s:%s:%s:%s:%s' % (
                    w, x, y, z,
                    ':'.join("%s=%r" % pair for pair in d.items()))
</snippet></ROW><ROW><id>3374670</id><snippet>def dump(data, path=''):
    if isinstance(data, defaultdict):
        for k, v in data.items():
            dump(v, path + k + ":")
    else:
        print "%s%s" % (path, ':'.join("%s=%r" % pair for pair in d.items()))

dump(data)
</snippet></ROW><ROW><id>3374765</id><snippet>from mutagen import _util
</snippet></ROW><ROW><id>3374765</id><snippet>from . import _util
</snippet></ROW><ROW><id>3374765</id><snippet>setuptools</snippet></ROW><ROW><id>3374765</id><snippet>install_requires=</snippet></ROW><ROW><id>3374765</id><snippet>import mutagen</snippet></ROW><ROW><id>3374818</id><snippet>if __name__ == '__main__':
    method(arg) # matches what you run manually in the Python shell
</snippet></ROW><ROW><id>3374818</id><snippet>python3.1 modulename.py
</snippet></ROW><ROW><id>3374818</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>3375011</id><snippet>itertools</snippet></ROW><ROW><id>3375011</id><snippet>from itertools import izip_longest

def grouper(n, iterable, fillvalue=None):
    """
    &gt;&gt;&gt; grouper(3, 'ABCDEFG', 'x')
    ["ABC", "DEF", "Gxx"]
    """
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>3375011</id><snippet>[(el[0], el[1]) for el in grouper(2, range(10))]
</snippet></ROW><ROW><id>3375011</id><snippet>[(el[0], el[1]) for el in grouper(2, elements)]
</snippet></ROW><ROW><id>3375257</id><snippet>spam = 0
def ham:
    print( spam )
</snippet></ROW><ROW><id>3375257</id><snippet>spam = 0
def ham:
    spam = 0
    print( spam )
</snippet></ROW><ROW><id>3375257</id><snippet>ham</snippet></ROW><ROW><id>3375257</id><snippet>localname</snippet></ROW><ROW><id>3375257</id><snippet>method</snippet></ROW><ROW><id>3375257</id><snippet>global</snippet></ROW><ROW><id>3375257</id><snippet>spam = 0
def ham:
    global spam
    spam = 0
    print( spam )
</snippet></ROW><ROW><id>3375257</id><snippet>nonlocal</snippet></ROW><ROW><id>3375291</id><snippet>import numpy as np
import Image

def alpha_composite(src, dst):
    '''
    Return the alpha composite of src and dst.

    Parameters:
    src -- PIL RGBA Image object
    dst -- PIL RGBA Image object

    The algorithm comes from http://en.wikipedia.org/wiki/Alpha_compositing
    '''
    # http://stackoverflow.com/a/3375291/190597
    # http://stackoverflow.com/a/9166671/190597
    src = np.asarray(src)
    dst = np.asarray(dst)
    out = np.empty(src.shape, dtype = 'float')
    alpha = np.index_exp[:, :, 3:]
    rgb = np.index_exp[:, :, :3]
    src_a = src[alpha]/255.0
    dst_a = dst[alpha]/255.0
    out[alpha] = src_a+dst_a*(1-src_a)
    old_setting = np.seterr(invalid = 'ignore')
    out[rgb] = (src[rgb]*src_a + dst[rgb]*dst_a*(1-src_a))/out[alpha]
    np.seterr(**old_setting)    
    out[alpha] *= 255
    np.clip(out,0,255)
    # astype('uint8') maps np.nan (and np.inf) to 0
    out = out.astype('uint8')
    out = Image.fromarray(out, 'RGBA')
    return out
</snippet></ROW><ROW><id>3375291</id><snippet>img1 = Image.new('RGBA', size = (100, 100), color = (255, 0, 0, 255))
draw = ImageDraw.Draw(img1)
draw.rectangle((33, 0, 66, 100), fill = (255, 0, 0, 128))
draw.rectangle((67, 0, 100, 100), fill = (255, 0, 0, 0))
img1.save('/tmp/img1.png')
</snippet></ROW><ROW><id>3375291</id><snippet>img2 = Image.new('RGBA', size = (100, 100), color = (0, 255, 0, 255))
draw = ImageDraw.Draw(img2)
draw.rectangle((0, 33, 100, 66), fill = (0, 255, 0, 128))
draw.rectangle((0, 67, 100, 100), fill = (0, 255, 0, 0))
img2.save('/tmp/img2.png')
</snippet></ROW><ROW><id>3375291</id><snippet>alpha_composite</snippet></ROW><ROW><id>3375291</id><snippet>img3 = alpha_composite(img1, img2)
img3.save('/tmp/img3.png')
</snippet></ROW><ROW><id>3375390</id><snippet>a[0][1]
</snippet></ROW><ROW><id>3375812</id><snippet>generic_drugs_mapping['MORPHINE']</snippet></ROW><ROW><id>3375812</id><snippet>[86]</snippet></ROW><ROW><id>3375812</id><snippet>generic_drugs_mapping['MORPHINE'][0]
</snippet></ROW><ROW><id>3375858</id><snippet>if value1:
    Decimal(value1) &gt; value2
</snippet></ROW><ROW><id>3375919</id><snippet>try...catch</snippet></ROW><ROW><id>3375919</id><snippet>False</snippet></ROW><ROW><id>3375919</id><snippet>Null</snippet></ROW><ROW><id>3375919</id><snippet>""</snippet></ROW><ROW><id>3375919</id><snippet>"1.1"</snippet></ROW><ROW><id>3375919</id><snippet>"1.2"</snippet></ROW><ROW><id>3375919</id><snippet>float</snippet></ROW><ROW><id>3375919</id><snippet>float(1.1) &gt; float(1.2)
</snippet></ROW><ROW><id>3376048</id><snippet>row</snippet></ROW><ROW><id>3376179</id><snippet>a.insert( 1, 3 )</snippet></ROW><ROW><id>3376274</id><snippet>datetime</snippet></ROW><ROW><id>3376274</id><snippet>yield</snippet></ROW><ROW><id>3376284</id><snippet>csv.reader</snippet></ROW><ROW><id>3376284</id><snippet>def get_file( start_file )
    f = csv.reader( start_file )
        def data( csvfile ):
            for line in csvfile:
                 yield line + [ "your_column" ]
    return data( f )
</snippet></ROW><ROW><id>3376284</id><snippet>def get_file( start_file )
    f = csv.reader( start_file )
        def data( csvfile ):
            for line in csvfile:
                line[ 1 ] += "butter"
                yield line
    return data( f )
</snippet></ROW><ROW><id>3376284</id><snippet>lines = get_file( "my_file.csv" )
for line in lines:
    # do stuff
</snippet></ROW><ROW><id>3376315</id><snippet>for row in data:
    row[ 1 ] += "Butter"
</snippet></ROW><ROW><id>3376315</id><snippet>data</snippet></ROW><ROW><id>3376315</id><snippet>data</snippet></ROW><ROW><id>3376315</id><snippet>def get_file( start_file )
    f = csv.reader( start_file )
        def data( csvfile ):
            for line in csvfile:
                line[ 1 ] += "butter"
                yield line
    return data( f )
</snippet></ROW><ROW><id>3376315</id><snippet>lines = get_file( "my_file.csv" )
for line in lines:
    # do stuff
</snippet></ROW><ROW><id>3376315</id><snippet>data</snippet></ROW><ROW><id>3376315</id><snippet>data</snippet></ROW><ROW><id>3376315</id><snippet>f = csv.reader( start_file )</snippet></ROW><ROW><id>3376315</id><snippet>csv.reader</snippet></ROW><ROW><id>3376315</id><snippet>open</snippet></ROW><ROW><id>3376315</id><snippet>def data( csvfile )</snippet></ROW><ROW><id>3376315</id><snippet>for line in csvfile:</snippet></ROW><ROW><id>3376315</id><snippet>data</snippet></ROW><ROW><id>3376315</id><snippet>csvfile</snippet></ROW><ROW><id>3376315</id><snippet>line[ 1 ] += butter</snippet></ROW><ROW><id>3376315</id><snippet>line</snippet></ROW><ROW><id>3376315</id><snippet>yield line</snippet></ROW><ROW><id>3376315</id><snippet>return</snippet></ROW><ROW><id>3376315</id><snippet>data</snippet></ROW><ROW><id>3376315</id><snippet>return data( f )</snippet></ROW><ROW><id>3376315</id><snippet>get_file</snippet></ROW><ROW><id>3376315</id><snippet>data</snippet></ROW><ROW><id>3376315</id><snippet>for line in get_file( "my_file.csv" ):</snippet></ROW><ROW><id>3376315</id><snippet>with ... as ...</snippet></ROW><ROW><id>3376315</id><snippet>context manager</snippet></ROW><ROW><id>3376315</id><snippet>list</snippet></ROW><ROW><id>3376323</id><snippet>user = request.GET['username']
# do something with the string variable, "user"
user = get_object_or_404(User,user)
# do something with the User object variable, "user"
</snippet></ROW><ROW><id>3376469</id><snippet>import sqlalchemy.types.DECIMAL as DECIMAL
</snippet></ROW><ROW><id>3376519</id><snippet>td[0].a.img['src']
</snippet></ROW><ROW><id>3376519</id><snippet>image</snippet></ROW><ROW><id>3376519</id><snippet>img</snippet></ROW><ROW><id>3376519</id><snippet>['src']</snippet></ROW><ROW><id>3376519</id><snippet>a</snippet></ROW><ROW><id>3376519</id><snippet>img</snippet></ROW><ROW><id>3376541</id><snippet>sys.exit()</snippet></ROW><ROW><id>3376541</id><snippet>import sys
sys.exit()
</snippet></ROW><ROW><id>3376541</id><snippet>thread.interrupt_main()</snippet></ROW><ROW><id>3376569</id><snippet>doc = SimpleDocTemplate(response, rightMargin=0, leftMargin=0, topMargin=0, bottomMargin=0)
</snippet></ROW><ROW><id>3376581</id><snippet>sudo /opt/local/share/mysql5/mysql/mysql.server start
</snippet></ROW><ROW><id>3376581</id><snippet>sudo launchctl load -w /Library/LaunchDaemons/org.macports.mysql5.plist
</snippet></ROW><ROW><id>3376612</id><snippet>.z()</snippet></ROW><ROW><id>3376612</id><snippet>class MockAny(object):

  # mock special methods by making them noops
  def __init__(self, *a, **k): pass

  # or returning fixed values
  def __len__(self): return 0

  # mock attributes:
  def getattr(self, name):
    return MockAny()

  # make it callable, if you need to
  def __call__(self, *a, **k):
    return MockAny()
</snippet></ROW><ROW><id>3376664</id><snippet>nonlocal</snippet></ROW><ROW><id>3376664</id><snippet>2.*</snippet></ROW><ROW><id>3376664</id><snippet>x = 23</snippet></ROW><ROW><id>3376664</id><snippet>x</snippet></ROW><ROW><id>3376664</id><snippet>global</snippet></ROW><ROW><id>3376664</id><snippet>nonlocal</snippet></ROW><ROW><id>3376664</id><snippet>x</snippet></ROW><ROW><id>3376664</id><snippet>change</snippet></ROW><ROW><id>3376664</id><snippet>x[0]</snippet></ROW><ROW><id>3376683</id><snippet>user
    user_id (PK)
    username (char)
    password (char)
    security_question_id (FK)
    security_answer (char)
    email_address (char)

security_question
    security_question_id (PK)
    question (char)

keyword
    keyword_id (PK)
    keyword (char)

user_keyword
    user_keyword_id (PK)
    user_id (FK)
    keyword_id (FK)

url
    url_id (PK)
    user_id (FK)
    url (char)

PK = Primary Key
FK = Foreign Key
char = varchar of some max length that you define
</snippet></ROW><ROW><id>3376683</id><snippet>sha1$8ac10f$a94a8fe5ccb19ba61c4c0873d391e987982fbbd3
</snippet></ROW><ROW><id>3376687</id><snippet>theimage = td[0].a.img
if theimage is not None:
   use(theimage['src'])
</snippet></ROW><ROW><id>3376687</id><snippet>None</snippet></ROW><ROW><id>3376687</id><snippet>def getsrc(image):
  return None if image is None else image['src']
</snippet></ROW><ROW><id>3376687</id><snippet>getsrc(td[0].a.img)</snippet></ROW><ROW><id>3376715</id><snippet>import re

pat = re.compile(r'\w+\((\d+)\)')

s = 'California(2342)'
match = pat.match(s)
if match:
    c.count = match.group(1)
    print c.count
    # '2342'
else:
    c.count = '0'  # or 0 if numeric
</snippet></ROW><ROW><id>3376715</id><snippet>value = int(match.group(1))
</snippet></ROW><ROW><id>3376734</id><snippet>vmin</snippet></ROW><ROW><id>3376734</id><snippet>vmax</snippet></ROW><ROW><id>3376734</id><snippet>import matplotlib as m
import matplotlib.pyplot as plt
import numpy as np

cdict = {
  'red'  :  ( (0.0, 0.25, .25), (0.02, .59, .59), (1., 1., 1.)),
  'green':  ( (0.0, 0.0, 0.0), (0.02, .45, .45), (1., .97, .97)),
  'blue' :  ( (0.0, 1.0, 1.0), (0.02, .75, .75), (1., 0.45, 0.45))
}

cm = m.colors.LinearSegmentedColormap('my_colormap', cdict, 1024)

x = np.arange(0, 10, .1)
y = np.arange(0, 10, .1)
X, Y = np.meshgrid(x,y)

data = 2*( np.sin(X) + np.sin(3*Y) )

def do_plot(n, f, title):
    #plt.clf()
    plt.subplot(1, 3, n)
    plt.pcolor(X, Y, f(data), cmap=cm, vmin=-4, vmax=4)
    plt.title(title)
    plt.colorbar()

plt.figure()
do_plot(1, lambda x:x, "all")
do_plot(2, lambda x:np.clip(x, -4, 0), "&lt;0")
do_plot(3, lambda x:np.clip(x, 0, 4), "&gt;0")
plt.show()
</snippet></ROW><ROW><id>3376859</id><snippet>autoload</snippet></ROW><ROW><id>3376904</id><snippet>x</snippet></ROW><ROW><id>3376904</id><snippet>x.findAll(text='price')
</snippet></ROW><ROW><id>3376904</id><snippet>'price'</snippet></ROW><ROW><id>3376904</id><snippet>[t.parent for t in x.findAll(text='price')]
</snippet></ROW><ROW><id>3376904</id><snippet>'th'</snippet></ROW><ROW><id>3376904</id><snippet>[t.parent for t in x.findAll(text='price') if t.parent.name=='th']
</snippet></ROW><ROW><id>3376904</id><snippet>'th'</snippet></ROW><ROW><id>3376904</id><snippet>[t.parent.nextSibling for t in x.findAll(text='price')
 if t.parent.name=='th' and t.parent.nextSibling and t.parent.nextSibling.name=='th']
</snippet></ROW><ROW><id>3376904</id><snippet>th</snippet></ROW><ROW><id>3376904</id><snippet>td</snippet></ROW><ROW><id>3376904</id><snippet>for t in x.findAll(text='price'):
  p = t.parent
  if p.name != 'th': continue
  ns = p.nextSibling
  if ns and not ns.name: ns = ns.nextSibling
  if not ns or ns.name not in ('td', 'th'): continue
  print ns.string
</snippet></ROW><ROW><id>3376904</id><snippet>ns.string</snippet></ROW><ROW><id>3376904</id><snippet>print</snippet></ROW><ROW><id>3376904</id><snippet>if...: continue</snippet></ROW><ROW><id>3376904</id><snippet>if</snippet></ROW><ROW><id>3376904</id><snippet>import this</snippet></ROW><ROW><id>3376987</id><snippet>str = r'''
&lt;select name="somelist"&gt;
   &lt;option value="234234234239393"&gt;Some Text&lt;/option&gt;
   &lt;option value="42"&gt;Other text&lt;/option&gt;
&lt;/select&gt;
'''

soup = BeautifulSoup(str)
select_node = soup.findAll('select', attrs={'name': 'somelist'})

if select_node:
    for option in select_node[0].findAll('option'):
        print option
</snippet></ROW><ROW><id>3376987</id><snippet>option</snippet></ROW><ROW><id>3376987</id><snippet>&lt;option value="234234234239393"&gt;Some Text&lt;/option&gt;
&lt;option value="42"&gt;Other text&lt;/option&gt;
</snippet></ROW><ROW><id>3376987</id><snippet>option</snippet></ROW><ROW><id>3376987</id><snippet>option['value']</snippet></ROW><ROW><id>3376987</id><snippet>option.text</snippet></ROW><ROW><id>3377042</id><snippet>from PIL import ImageGrab
ImageGrab.grab().save("screenshot.jpg", "JPEG")
</snippet></ROW><ROW><id>3377070</id><snippet>%PATH%</snippet></ROW><ROW><id>3377070</id><snippet>R.EXE</snippet></ROW><ROW><id>3377070</id><snippet>C:\Programs\R\R-2.8.0\bin</snippet></ROW><ROW><id>3377133</id><snippet>...
.P.
.G.
</snippet></ROW><ROW><id>3377133</id><snippet>....
.P.G
....
....
</snippet></ROW><ROW><id>3377272</id><snippet>eval</snippet></ROW><ROW><id>3377272</id><snippet>def memoized(f):
    cache={}
    def ret(*args):
        if args in cache:
            return cache[args]
        else:
            answer=f(*args)
            cache[args]=answer
            return answer
    return ret

@memoized
def fibonacci(n):
    if n==0 or n==1:
        return 1
    else:
        return fibonacci(n-1)+fibonacci(n-2)

print fibonacci(100)
</snippet></ROW><ROW><id>3377502</id><snippet>related_name</snippet></ROW><ROW><id>3377502</id><snippet>books = user.owner.all()
</snippet></ROW><ROW><id>3377502</id><snippet>related_name</snippet></ROW><ROW><id>3377502</id><snippet>relatedmodelname_set</snippet></ROW><ROW><id>3377502</id><snippet>user.book_set.all()</snippet></ROW><ROW><id>3377502</id><snippet>"books"</snippet></ROW><ROW><id>3377502</id><snippet>books = user.books.all()
</snippet></ROW><ROW><id>3377703</id><snippet>gradient.add_color_rgba(0, *light_blue, alpha=alpha)</snippet></ROW><ROW><id>3377909</id><snippet>with open(filename, "wb") as f:
    f.seek(999999)
    f.write("\0")
</snippet></ROW><ROW><id>3378195</id><snippet>boost::python</snippet></ROW><ROW><id>3378195</id><snippet>boost::shared_ptr</snippet></ROW><ROW><id>3378195</id><snippet>boost::shared_ptr&lt;A&gt;</snippet></ROW><ROW><id>3378195</id><snippet>A</snippet></ROW><ROW><id>3378195</id><snippet>boost::shared_ptr&lt;A&gt;</snippet></ROW><ROW><id>3378195</id><snippet>class_</snippet></ROW><ROW><id>3378195</id><snippet>boost::python::no_init</snippet></ROW><ROW><id>3378195</id><snippet>boost::python::class_&lt; A, boost::shared_ptr&lt;A&gt; &gt;("A", boost::python::no_init)
    //... .def, etc
    ;
</snippet></ROW><ROW><id>3378195</id><snippet>boost::shared_ptr</snippet></ROW><ROW><id>3378195</id><snippet>return_value_policy</snippet></ROW><ROW><id>3378195</id><snippet>make_shared&lt;A&gt;(...)</snippet></ROW><ROW><id>3378195</id><snippet>shared_ptr&lt;A&gt;(new A(...))</snippet></ROW><ROW><id>3378226</id><snippet>ldap</snippet></ROW><ROW><id>3378226</id><snippet>SIZELIMIT_EXCEEDED</snippet></ROW><ROW><id>3378226</id><snippet>sizelimit</snippet></ROW><ROW><id>3378226</id><snippet>sizelimit</snippet></ROW><ROW><id>3378226</id><snippet>LDAPObject.sizelimit</snippet></ROW><ROW><id>3378226</id><snippet>search_ext()</snippet></ROW><ROW><id>3379037</id><snippet>import sqlite3

con = sqlite3.connect("db")

con.execute("create table users(id, name, avatar)")

con.execute("insert into users(id, name, avatar) values (?, ?, ?)", (friend.id, friend.name, friend.avatar))
con.commit()

for row in con.execute("select * from users")
    print row

con.close()
</snippet></ROW><ROW><id>3379199</id><snippet>import subprocess

p = subprocess.Popen('command', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    for line in p.stdout.readlines():
        print line,
retval = p.wait()
</snippet></ROW><ROW><id>3379238</id><snippet>import threading
import time

def doit1():
    for i in range(10):
        time.sleep(.1)
        print 'doit1(%d)' % i

def doit2():
    for i in range(10):
        time.sleep(.2)
        print 'doit2(%d)' % i

t = threading.Thread(target=doit2)
t.start()
doit1()
t.join()
print 'All done.'
</snippet></ROW><ROW><id>3379284</id><snippet>sort</snippet></ROW><ROW><id>3379284</id><snippet>None</snippet></ROW><ROW><id>3379284</id><snippet>items()</snippet></ROW><ROW><id>3379284</id><snippet>for k, v in sorted(mydict.iteritems()):
</snippet></ROW><ROW><id>3379284</id><snippet>.items()</snippet></ROW><ROW><id>3379284</id><snippet>.iteritems()</snippet></ROW><ROW><id>3379284</id><snippet>.items()</snippet></ROW><ROW><id>3379284</id><snippet>.iteritems()</snippet></ROW><ROW><id>3379284</id><snippet>sorted</snippet></ROW><ROW><id>3379462</id><snippet>ErrorList</snippet></ROW><ROW><id>3379588</id><snippet>dumpdata</snippet></ROW><ROW><id>3379588</id><snippet>python manage.py dumpdata myapp &gt; apps/myapp/fixtures/initial_data.json
</snippet></ROW><ROW><id>3379702</id><snippet>import this.that.module 
import pickle
import os
legacy_obj= pickle.load( someFile )
os.rename( someFile, someFile+".bak")

import this.that.module.class
new_obj= this.that.module.class( legacy_obj )
pickle.save( someFile )
</snippet></ROW><ROW><id>3379708</id><snippet>setContextNode()</snippet></ROW><ROW><id>3379708</id><snippet>import libxml2

xml = "test.xml"
doc = libxml2.parseFile(xml) 

ctxt = doc.xpathNewContext() 
ctxt.xpathRegisterNs("pre","http://www.mysyte.com/foo") 

ret_list = []
record_nodes = ctxt.xpathEval('/pre:records/pre:record') 

for node in record_nodes:
    ctxt.setContextNode(node)
    _id = ctxt.xpathEval('pre:id')[0].content
    name = ctxt.xpathEval('pre:name')[0].content
    ret_list.append({'code': _id, 'name': name}) 

print ret_list
</snippet></ROW><ROW><id>3379809</id><snippet>"update-twitter-timeline-%s" % (user_id)</snippet></ROW><ROW><id>3379826</id><snippet>import module1
import module2

CONSTANT=...

def foo():
   ...

def bar():
   ....

class Baz():
   ....

def run(verbose=False):
    ....

if __name__=='__main__':
    import optparse
    def parse_options():
        usage = 'usage: %prog [options]'
        parser = optparse.OptionParser(usage=usage)
        parser.add_option('-v', '--verbose', dest='verbose',
                          action='store_true', 
                          default=False,
                          help="verbose")
        return parser.parse_args()
    def cli():
        opt,args=parse_options()        
        run(verbose=opt.verbose)
    cli()
</snippet></ROW><ROW><id>3379826</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3379826</id><snippet>PATH</snippet></ROW><ROW><id>3379854</id><snippet>char</snippet></ROW><ROW><id>3379854</id><snippet>signed char</snippet></ROW><ROW><id>3379854</id><snippet>unsigned char</snippet></ROW><ROW><id>3379854</id><snippet>char</snippet></ROW><ROW><id>3379854</id><snippet>ord()</snippet></ROW><ROW><id>3379854</id><snippet>char</snippet></ROW><ROW><id>3379854</id><snippet>m1, m2 = m2, m1
strcpy( m3, m2 )
</snippet></ROW><ROW><id>3379854</id><snippet>strcpy()</snippet></ROW><ROW><id>3379854</id><snippet>m1</snippet></ROW><ROW><id>3379854</id><snippet>m2</snippet></ROW><ROW><id>3379854</id><snippet>strcpy()</snippet></ROW><ROW><id>3379854</id><snippet>m3, m2, m1 = m2, m1, m3
</snippet></ROW><ROW><id>3379903</id><snippet>IsPrime</snippet></ROW><ROW><id>3379903</id><snippet>IsPandigital</snippet></ROW><ROW><id>3379903</id><snippet>IsPrime</snippet></ROW><ROW><id>3379903</id><snippet>[987654321,987654312,987654231,987654213,...]</snippet></ROW><ROW><id>3379903</id><snippet>while i &lt;
No</snippet></ROW><ROW><id>3379903</id><snippet>sqrt(No)</snippet></ROW><ROW><id>3379976</id><snippet>import math
math.ceil(float(177)/10)
</snippet></ROW><ROW><id>3380040</id><snippet>&gt;&gt;&gt; "www.someurl.com/{0}/blah.html".format(100)
'www.someurl.com/100/blah.html'
</snippet></ROW><ROW><id>3380040</id><snippet>0</snippet></ROW><ROW><id>3380153</id><snippet>gtk.Window</snippet></ROW><ROW><id>3380153</id><snippet>gtk.Container</snippet></ROW><ROW><id>3380153</id><snippet>check-resize</snippet></ROW><ROW><id>3380153</id><snippet>import gtk

def changed(window):
    print 'I have resized.'

w = gtk.Window()
w.connect('check-resize', changed)
w.show()
gtk.main()
</snippet></ROW><ROW><id>3380170</id><snippet>file</snippet></ROW><ROW><id>3380170</id><snippet>file</snippet></ROW><ROW><id>3380200</id><snippet>req = urllib2.Request('http://www.google.fr', None, headers)
</snippet></ROW><ROW><id>3380200</id><snippet>req = urllib2.Request('http://www.google.fr', headers=headers)
</snippet></ROW><ROW><id>3380207</id><snippet>glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
gluLookAt(...);
# do not touch the modelview matrix anymore!
</snippet></ROW><ROW><id>3380207</id><snippet>glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
gluLookAt(...);
# some stuff..
gluLookAt(...);
</snippet></ROW><ROW><id>3380229</id><snippet>fileinput</snippet></ROW><ROW><id>3380229</id><snippet>   import re
   import fileinput

   tagre = re.compile(r"&lt;o:p&gt;.*?&lt;/o:p&gt;")
   def sub(mo):
     return mo.group().replace(r"'", r"\'")

   for line in fileinput.input('thefilename', inplace=True):
     print tagre.sub(sub, line),
</snippet></ROW><ROW><id>3380229</id><snippet>   with open('thefilename', 'rb') as inf:
     with open('fixed', 'wb') as ouf:
       while True:
         b = inf.read(1024*1024)
         if not b: break
         ouf.write(tagre.sub(sub, b))
</snippet></ROW><ROW><id>3380229</id><snippet>'fixed'</snippet></ROW><ROW><id>3380229</id><snippet>'thefilename'</snippet></ROW><ROW><id>3380229</id><snippet>&lt;o:p&gt; ... &lt;/o:p&gt;</snippet></ROW><ROW><id>3380229</id><snippet>   with open('thefilename', 'rb') as inf:
     with open('fixed', 'wb') as ouf:
       while True:
         b = getblock(inf)
         if not b: break
         ouf.write(tagre.sub(sub, b))
</snippet></ROW><ROW><id>3380229</id><snippet>   partsofastartag = '&lt;', '&lt;o', '&lt;o:', '&lt;o:p'
   def getblock(inf):
     b = ''
     while True:
       newb = inf.read(1024 * 1024)
       if not newb: return b
       b += newb
       if any(b.endswith(p) for p in partsofastartag):
         continue
       if b.count('&lt;o:p&gt;') != b.count('&lt;/o:p&gt;'):
         continue
       return b
</snippet></ROW><ROW><id>3380229</id><snippet>&lt;o:p&gt;</snippet></ROW><ROW><id>3380229</id><snippet>&lt;/o:p&gt;</snippet></ROW><ROW><id>3380229</id><snippet>getblock</snippet></ROW><ROW><id>3380229</id><snippet>   with open('thefilename', 'rb') as inf:
     with open('fixed', 'wb') as ouf:
         b = inf.read()
         ouf.write(tagre.sub(sub, b))
</snippet></ROW><ROW><id>3380348</id><snippet>wsgiHandler</snippet></ROW><ROW><id>3380373</id><snippet>cur.execute("select order_no, amount from orders where cust_id=123")
dictrows = [dict(row) for row in cur]
for r in dictrows:
  r['amount'] = format(r['amount'],'%.2f')
</snippet></ROW><ROW><id>3380487</id><snippet>r</snippet></ROW><ROW><id>3380487</id><snippet>final= path + r'\xulrunner.exe ' + path + r'\application.ini'
</snippet></ROW><ROW><id>3380487</id><snippet>os.path.join</snippet></ROW><ROW><id>3380487</id><snippet>final = os.path.join(path, 'xulrunner.exe') + ' ' + \
         os.path.join(path, 'application.ini')
</snippet></ROW><ROW><id>3380487</id><snippet>final = path + '/xulrunner.exe ' + path + '/application.ini'
</snippet></ROW><ROW><id>3380487</id><snippet>os.path.join</snippet></ROW><ROW><id>3380739</id><snippet>%</snippet></ROW><ROW><id>3380739</id><snippet>&gt;&gt;&gt; '#%02x%02x%02x' % (0, 128, 64)
'#008040'
</snippet></ROW><ROW><id>3380739</id><snippet>&gt;&gt;&gt; '#%02x%02x%02x' % (0, -1, 9999)
'#00-1270f'
</snippet></ROW><ROW><id>3380891</id><snippet>def nindex(mystr, substr, n=0, index=0):
    for _ in xrange(n+1):
        index = mystr.index(substr, index) + 1
    return index - 1
</snippet></ROW><ROW><id>3380891</id><snippet>str.index()</snippet></ROW><ROW><id>3380891</id><snippet>nindex()</snippet></ROW><ROW><id>3380891</id><snippet>ValueError</snippet></ROW><ROW><id>3380935</id><snippet>global rootnode</snippet></ROW><ROW><id>3380935</id><snippet>rootnode</snippet></ROW><ROW><id>3380935</id><snippet>POST</snippet></ROW><ROW><id>3380935</id><snippet>upfile</snippet></ROW><ROW><id>3380935</id><snippet>FieldStorage</snippet></ROW><ROW><id>3380935</id><snippet>.file</snippet></ROW><ROW><id>3380935</id><snippet>.value</snippet></ROW><ROW><id>3380935</id><snippet>.filename</snippet></ROW><ROW><id>3380935</id><snippet>FieldStorage</snippet></ROW><ROW><id>3380935</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>3380935</id><snippet>cgi</snippet></ROW><ROW><id>3380935</id><snippet>CGIHTTPServer.py</snippet></ROW><ROW><id>3380935</id><snippet>def populenv(self):
        path = self.path
        dir, rest = '.', 'ciao'

        # find an explicit query string, if present.
        i = rest.rfind('?')
        if i &gt;= 0:
            rest, query = rest[:i], rest[i+1:]
        else:
            query = ''

        # dissect the part after the directory name into a script name &amp;
        # a possible additional path, to be stored in PATH_INFO.
        i = rest.find('/')
        if i &gt;= 0:
            script, rest = rest[:i], rest[i:]
        else:
            script, rest = rest, ''

        # Reference: http://hoohoo.ncsa.uiuc.edu/cgi/env.html
        # XXX Much of the following could be prepared ahead of time!
        env = {}
        env['SERVER_SOFTWARE'] = self.version_string()
        env['SERVER_NAME'] = self.server.server_name
        env['GATEWAY_INTERFACE'] = 'CGI/1.1'
        env['SERVER_PROTOCOL'] = self.protocol_version
        env['SERVER_PORT'] = str(self.server.server_port)
        env['REQUEST_METHOD'] = self.command
        uqrest = urllib.unquote(rest)
        env['PATH_INFO'] = uqrest
        env['SCRIPT_NAME'] = 'ciao'
        if query:
            env['QUERY_STRING'] = query
        host = self.address_string()
        if host != self.client_address[0]:
            env['REMOTE_HOST'] = host
        env['REMOTE_ADDR'] = self.client_address[0]
        authorization = self.headers.getheader("authorization")
        if authorization:
            authorization = authorization.split()
            if len(authorization) == 2:
                import base64, binascii
                env['AUTH_TYPE'] = authorization[0]
                if authorization[0].lower() == "basic":
                    try:
                        authorization = base64.decodestring(authorization[1])
                    except binascii.Error:
                        pass
                    else:
                        authorization = authorization.split(':')
                        if len(authorization) == 2:
                            env['REMOTE_USER'] = authorization[0]
        # XXX REMOTE_IDENT
        if self.headers.typeheader is None:
            env['CONTENT_TYPE'] = self.headers.type
        else:
            env['CONTENT_TYPE'] = self.headers.typeheader
        length = self.headers.getheader('content-length')
        if length:
            env['CONTENT_LENGTH'] = length
        referer = self.headers.getheader('referer')
        if referer:
            env['HTTP_REFERER'] = referer
        accept = []
        for line in self.headers.getallmatchingheaders('accept'):
            if line[:1] in "\t\n\r ":
                accept.append(line.strip())
            else:
                accept = accept + line[7:].split(',')
        env['HTTP_ACCEPT'] = ','.join(accept)
        ua = self.headers.getheader('user-agent')
        if ua:
            env['HTTP_USER_AGENT'] = ua
        co = filter(None, self.headers.getheaders('cookie'))
        if co:
            env['HTTP_COOKIE'] = ', '.join(co)
        # XXX Other HTTP_* headers
        # Since we're setting the env in the parent, provide empty
        # values to override previously set values
        for k in ('QUERY_STRING', 'REMOTE_HOST', 'CONTENT_LENGTH',
                  'HTTP_USER_AGENT', 'HTTP_COOKIE', 'HTTP_REFERER'):
            env.setdefault(k, "")
        os.environ.update(env)
</snippet></ROW><ROW><id>3380935</id><snippet>populenv</snippet></ROW><ROW><id>3380935</id><snippet>def do_POST(self):
    populen(self)
    form = cgi.FieldStorage(fp=self.rfile)
    upfilecontent = form['upfile'].value
    if upfilecontent:
        fout = open(os.path.join('tmp', form['upfile'].filename), 'wb')
        fout.write(upfilecontent)
        fout.close()
    self.do_GET()
</snippet></ROW><ROW><id>3381150</id><snippet>async</snippet></ROW><ROW><id>3381334</id><snippet>MultiViews</snippet></ROW><ROW><id>3381334</id><snippet>foo/bar</snippet></ROW><ROW><id>3381334</id><snippet>foo.py</snippet></ROW><ROW><id>3381334</id><snippet>PATH_INFO</snippet></ROW><ROW><id>3381334</id><snippet>/bar</snippet></ROW><ROW><id>3381334</id><snippet>.htaccess</snippet></ROW><ROW><id>3381334</id><snippet>Options</snippet></ROW><ROW><id>3381334</id><snippet>Options -MultiViews +ExecCGI
</snippet></ROW><ROW><id>3381334</id><snippet>MultiViews</snippet></ROW><ROW><id>3381334</id><snippet>q=main.py</snippet></ROW><ROW><id>3381334</id><snippet>mod_rewrite</snippet></ROW><ROW><id>3381334</id><snippet>foo/bar</snippet></ROW><ROW><id>3381334</id><snippet>.*</snippet></ROW><ROW><id>3381334</id><snippet>main.py?q=foo/bar</snippet></ROW><ROW><id>3381334</id><snippet>mod_rewrite</snippet></ROW><ROW><id>3381334</id><snippet>mod_rewrite</snippet></ROW><ROW><id>3381334</id><snippet>main.py</snippet></ROW><ROW><id>3381334</id><snippet>.*</snippet></ROW><ROW><id>3381334</id><snippet>main.py?q=main.py</snippet></ROW><ROW><id>3381334</id><snippet>mod_rewrite</snippet></ROW><ROW><id>3381334</id><snippet>mod_rewrite</snippet></ROW><ROW><id>3381334</id><snippet>main.py</snippet></ROW><ROW><id>3381334</id><snippet>.*</snippet></ROW><ROW><id>3381334</id><snippet>main.py?q=main.py</snippet></ROW><ROW><id>3381334</id><snippet>mod_rewrite</snippet></ROW><ROW><id>3381491</id><snippet>more=Many.objects.filter(one=one)
for m in more
    m.one=None
    m.save()
#and finally:
one.delete()
</snippet></ROW><ROW><id>3381491</id><snippet>for m in one.many_set.all()
    m.one=None
    m.save()
one.delete()
</snippet></ROW><ROW><id>3381491</id><snippet>one.many_set.clear()
one.delete()
</snippet></ROW><ROW><id>3381606</id><snippet>xs:anyURL</snippet></ROW><ROW><id>3381606</id><snippet>anyURI</snippet></ROW><ROW><id>3381606</id><snippet>link-url</snippet></ROW><ROW><id>3381606</id><snippet>xs:attribute</snippet></ROW><ROW><id>3381606</id><snippet>xs:element</snippet></ROW><ROW><id>3381606</id><snippet>simpleType</snippet></ROW><ROW><id>3381606</id><snippet>base</snippet></ROW><ROW><id>3381606</id><snippet>restriction</snippet></ROW><ROW><id>3381606</id><snippet>pattern</snippet></ROW><ROW><id>3381606</id><snippet>#!/usr/bin/env python2.6

from lxml import etree
from StringIO import StringIO

schema_doc = etree.parse(StringIO('''
    &lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;

    &lt;xs:simpleType name="httpURL"&gt;
        &lt;xs:restriction base="xs:anyURI"&gt;
            &lt;xs:pattern value='https?://.+'/&gt;
            &lt;!-- accepts only http:// or https:// URIs. --&gt;
        &lt;/xs:restriction&gt;
    &lt;/xs:simpleType&gt;

    &lt;xs:element name="a"&gt;
        &lt;xs:complexType&gt;
            &lt;xs:attribute name="link-url" type="httpURL"/&gt;
        &lt;/xs:complexType&gt;
    &lt;/xs:element&gt;
    &lt;/xs:schema&gt;
''')) #/
schema = etree.XMLSchema(schema_doc)

schema.assertValid(etree.parse(StringIO('&lt;a link-url="http://sd" /&gt;')))
assert not schema(etree.parse(StringIO('&lt;a link-url="server/path" /&gt;')))
</snippet></ROW><ROW><id>3381649</id><snippet>*args</snippet></ROW><ROW><id>3381649</id><snippet>import numpy as np
from scipy.integrate import quad

def f2( a, *args ):
    print "args:", args
    return a + np.sum( args, axis=0 )

x = np.ones(3)
print f2( x, x*2, x*3 )


def quadf( *args ):
    print "quadf args:", args
    return 1

quad( quadf, 0, 1, (2,3) )
</snippet></ROW><ROW><id>3382259</id><snippet>__str__</snippet></ROW><ROW><id>3382259</id><snippet>__repr__</snippet></ROW><ROW><id>3382509</id><snippet>import re
point = re.compile( r"(?&lt;=\d)\.(?=\d)" )
point.sub( value, "point" )
</snippet></ROW><ROW><id>3382509</id><snippet>.</snippet></ROW><ROW><id>3382509</id><snippet>"point"</snippet></ROW><ROW><id>3382509</id><snippet>str.replace</snippet></ROW><ROW><id>3382509</id><snippet>point</snippet></ROW><ROW><id>3382509</id><snippet>.</snippet></ROW><ROW><id>3382509</id><snippet>(?&lt;=spam)ham(?=eggs)</snippet></ROW><ROW><id>3382509</id><snippet>ham</snippet></ROW><ROW><id>3382509</id><snippet>spam</snippet></ROW><ROW><id>3382509</id><snippet>eggs</snippet></ROW><ROW><id>3382575</id><snippet>start = '&lt;font color="red"&gt;|&lt;span style="font-weight:bold;"&gt;'
end = '&lt;/font&gt;|&lt;/span&gt;'
</snippet></ROW><ROW><id>3382575</id><snippet>&lt;/font&gt;</snippet></ROW><ROW><id>3382575</id><snippet>&lt;/span&gt;</snippet></ROW><ROW><id>3382581</id><snippet>var a = ${c.my_string.__repr__()|n}; # Note lack of "" around it! 
</snippet></ROW><ROW><id>3382581</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>3382581</id><snippet>&lt;/script&gt;</snippet></ROW><ROW><id>3382581</id><snippet>.replace('&lt;', '&lt;');</snippet></ROW><ROW><id>3382716</id><snippet>$ py26
Python 2.6.5 (r265:79359, Mar 24 2010, 01:32:55) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import re
&gt;&gt;&gt; r1 = re.compile(r'^\t?[^a-z0-9]?([cbdefghijklnrtuv1-8]{0,32})\t?([cbdefghijklnrtuv1-8]{32})\t?\r?\n?$')
&gt;&gt;&gt; r2 = re.compile(r'^\t?[^a-z0-9]?([cbdefghijklnrtuv1-8]{0,32}?)\t?([cbdefghijklnrtuv1-8]{32})\t?\r?\n?$'
... )
&gt;&gt;&gt; nox="vvbrentlnccnhgfgrtetilbvckjcegblehfvbihrdcui"
&gt;&gt;&gt; r1.match(nox)
&lt;_sre.SRE_Match object at 0xcc458&gt;
&gt;&gt;&gt; r2.match(nox)
&lt;_sre.SRE_Match object at 0xcc920&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3382756</id><snippet>(defn zip
  [&amp; colls]
  (apply map vector colls))
</snippet></ROW><ROW><id>3382756</id><snippet>(zip a b)</snippet></ROW><ROW><id>3382756</id><snippet>(map vector a b)</snippet></ROW><ROW><id>3382810</id><snippet>model</snippet></ROW><ROW><id>3382869</id><snippet>urllib.urlretrieve</snippet></ROW><ROW><id>3382869</id><snippet>import errno
import os
import urllib

def require_dir(path):
    try:
        os.makedirs(path)
    except OSError, exc:
        if exc.errno != errno.EEXIST:
            raise

directory = os.path.join(os.path.dirname(os.path.abspath(__file__)), "images")
require_dir(directory)
filename = os.path.join(directory, "stackoverflow.html")

if not os.path.exists(filename):
    urllib.urlretrieve("http://stackoverflow.com", filename)
</snippet></ROW><ROW><id>3382913</id><snippet>__init__</snippet></ROW><ROW><id>3382913</id><snippet>class PersonEditHandler(RequestHandler, Jinja2Mixin): 
    person = None
</snippet></ROW><ROW><id>3382913</id><snippet>self.person</snippet></ROW><ROW><id>3382913</id><snippet>self</snippet></ROW><ROW><id>3382913</id><snippet>None</snippet></ROW><ROW><id>3382913</id><snippet>self.person</snippet></ROW><ROW><id>3382913</id><snippet>__new__</snippet></ROW><ROW><id>3382913</id><snippet>__init__</snippet></ROW><ROW><id>3382977</id><snippet>def run(self):
    self.lock = e32.Ao_lock()
    self.lock.wait()
    # restore old title etc. and finish

def exit_callback(self):
    # unlocks the application and lets it finish
    self.lock.signal()
</snippet></ROW><ROW><id>3383228</id><snippet>print invoices.query
</snippet></ROW><ROW><id>3383228</id><snippet>...
 AND (discount="YES" AND pricediscountincludedeuro*(7% fixe)&lt;=250)
 OR (discount="NO" AND priceeuro*(7% fixe)&lt;=250)
)
</snippet></ROW><ROW><id>3383228</id><snippet>...
 AND (
   (discount="YES" AND pricediscountincludedeuro*(7% fixe)&lt;=250)
   OR 
   (discount="NO" AND priceeuro*(7% fixe)&lt;=250)
 )
)
</snippet></ROW><ROW><id>3383378</id><snippet>os.getenv</snippet></ROW><ROW><id>3383378</id><snippet>ast</snippet></ROW><ROW><id>3383378</id><snippet>code</snippet></ROW><ROW><id>3383378</id><snippet>&gt;&gt;&gt; os.getenv.__name__
'getenv'
&gt;&gt;&gt; os.getenv.__module__
'os'
</snippet></ROW><ROW><id>3383378</id><snippet>faker</snippet></ROW><ROW><id>3383378</id><snippet>import sys

def faker(original, fakefun):

    original = os.getenv
    themod = sys.modules[original.__module__]
    thename = original.__name__

    def dummy(*a, **k):
        try: return fakefun(*a, **k)
        except BaseException: return original(*a, **k)

    setattr(themod, thename, dummy)
    yield
    setattr(themod, thename, original)
</snippet></ROW><ROW><id>3383378</id><snippet>with faker(os.getenv, dict(HOME='here').__getitem__):
   ...
</snippet></ROW><ROW><id>3383424</id><snippet>__init__</snippet></ROW><ROW><id>3383424</id><snippet>class Calculations(object):
  def __init__(self):
    self.running_total = 0  # or w/ever
  def calculate(self):
    ...

calc = Calculations()
</snippet></ROW><ROW><id>3383424</id><snippet>pickle</snippet></ROW><ROW><id>3383456</id><snippet>def f(self): return g()

class One(object): bah = f

class Two(object): blup = f

def g(): ...
</snippet></ROW><ROW><id>3383456</id><snippet>One.bah</snippet></ROW><ROW><id>3383456</id><snippet>Two.blup</snippet></ROW><ROW><id>3383456</id><snippet>f</snippet></ROW><ROW><id>3383456</id><snippet>One().f()
</snippet></ROW><ROW><id>3383456</id><snippet>Two().f()
</snippet></ROW><ROW><id>3383456</id><snippet>g()</snippet></ROW><ROW><id>3383456</id><snippet>f('blah bloh blup')
</snippet></ROW><ROW><id>3383456</id><snippet>f</snippet></ROW><ROW><id>3383456</id><snippet>self</snippet></ROW><ROW><id>3383456</id><snippet>self</snippet></ROW><ROW><id>3383456</id><snippet>self</snippet></ROW><ROW><id>3383456</id><snippet>One</snippet></ROW><ROW><id>3383456</id><snippet>Two</snippet></ROW><ROW><id>3383456</id><snippet>str</snippet></ROW><ROW><id>3383718</id><snippet>num_latest: The number of latest objects to send to the template context. By default, it's 15.</snippet></ROW><ROW><id>3383728</id><snippet>query = users.select()
result = conn.execute(query)
</snippet></ROW><ROW><id>3383744</id><snippet>class SpecialRule:
    """"""
    name="Special Rule"
    description="This is a Special Rule."
    @staticmethod
    def create(name=None):
        """"""
        print "SpecialCreate"
        if name!=None:
            SPECIAL_RULES={
                "Fly" : FlyRule,
                "Skirmish" : SkirmishRule
                } #dictionary coupling names to SpecialRuleclasses
            return SPECIAL_RULES[name]()
        else:
            return SpecialRule()
</snippet></ROW><ROW><id>3383744</id><snippet>@staticmethod</snippet></ROW><ROW><id>3383744</id><snippet>create()</snippet></ROW><ROW><id>3383744</id><snippet>SpecialRule.create("Fly")
</snippet></ROW><ROW><id>3383806</id><snippet>[program:your_daemon_name]
command=your_daemon_process
# Add extra options here according to the manual...

[eventlistener:your_monitor_name]
command=your_monitor_process
events=PROCESS_STATE_RUNNING # Will be triggered after a program changes from starting to running
# Add extra options here according to the manual...
</snippet></ROW><ROW><id>3383806</id><snippet>PROCESS_COMMUNICATION_STDOUT</snippet></ROW><ROW><id>3383806</id><snippet>TICK_60</snippet></ROW><ROW><id>3383915</id><snippet>#!/usr/bin/env python

import cv

class Target:

    def __init__(self):
        self.capture = cv.CaptureFromCAM(0)
        cv.NamedWindow("Target", 1)

    def run(self):
        # Capture first frame to get size
        frame = cv.QueryFrame(self.capture)
        frame_size = cv.GetSize(frame)
        color_image = cv.CreateImage(cv.GetSize(frame), 8, 3)
        grey_image = cv.CreateImage(cv.GetSize(frame), cv.IPL_DEPTH_8U, 1)
        moving_average = cv.CreateImage(cv.GetSize(frame), cv.IPL_DEPTH_32F, 3)

        first = True

        while True:
            closest_to_left = cv.GetSize(frame)[0]
            closest_to_right = cv.GetSize(frame)[1]

            color_image = cv.QueryFrame(self.capture)

            # Smooth to get rid of false positives
            cv.Smooth(color_image, color_image, cv.CV_GAUSSIAN, 3, 0)

            if first:
                difference = cv.CloneImage(color_image)
                temp = cv.CloneImage(color_image)
                cv.ConvertScale(color_image, moving_average, 1.0, 0.0)
                first = False
            else:
                cv.RunningAvg(color_image, moving_average, 0.020, None)

            # Convert the scale of the moving average.
            cv.ConvertScale(moving_average, temp, 1.0, 0.0)

            # Minus the current frame from the moving average.
            cv.AbsDiff(color_image, temp, difference)

            # Convert the image to grayscale.
            cv.CvtColor(difference, grey_image, cv.CV_RGB2GRAY)

            # Convert the image to black and white.
            cv.Threshold(grey_image, grey_image, 70, 255, cv.CV_THRESH_BINARY)

            # Dilate and erode to get people blobs
            cv.Dilate(grey_image, grey_image, None, 18)
            cv.Erode(grey_image, grey_image, None, 10)

            storage = cv.CreateMemStorage(0)
            contour = cv.FindContours(grey_image, storage, cv.CV_RETR_CCOMP, cv.CV_CHAIN_APPROX_SIMPLE)
            points = []

            while contour:
                bound_rect = cv.BoundingRect(list(contour))
                contour = contour.h_next()

                pt1 = (bound_rect[0], bound_rect[1])
                pt2 = (bound_rect[0] + bound_rect[2], bound_rect[1] + bound_rect[3])
                points.append(pt1)
                points.append(pt2)
                cv.Rectangle(color_image, pt1, pt2, cv.CV_RGB(255,0,0), 1)

            if len(points):
                center_point = reduce(lambda a, b: ((a[0] + b[0]) / 2, (a[1] + b[1]) / 2), points)
                cv.Circle(color_image, center_point, 40, cv.CV_RGB(255, 255, 255), 1)
                cv.Circle(color_image, center_point, 30, cv.CV_RGB(255, 100, 0), 1)
                cv.Circle(color_image, center_point, 20, cv.CV_RGB(255, 255, 255), 1)
                cv.Circle(color_image, center_point, 10, cv.CV_RGB(255, 100, 0), 1)

            cv.ShowImage("Target", color_image)

            # Listen for ESC key
            c = cv.WaitKey(7) % 0x100
            if c == 27:
                break

if __name__=="__main__":
    t = Target()
    t.run()
</snippet></ROW><ROW><id>3383943</id><snippet>logf = open("download.log", "w")
for download in download_list:
    try:
        # code to process download here
    except Exception as e:     # most generic exception you can catch
        logf.write("Failed to download {0}: {1}\n".format(str(download), str(e)))
        # optional: delete local version of failed download
    finally:
        # optional clean up code
        pass
</snippet></ROW><ROW><id>3383943</id><snippet>logging</snippet></ROW><ROW><id>3383943</id><snippet>with</snippet></ROW><ROW><id>3384160</id><snippet>  i=0
  end=20
  last_id=0
  data=[]
  while(i&lt;=end):
    i = i + 1
    ...
</snippet></ROW><ROW><id>3384160</id><snippet>  last_id=0
  data=[]
  for i in xrange(1, 22):
    ...
</snippet></ROW><ROW><id>3384160</id><snippet>if not last or last == None:
</snippet></ROW><ROW><id>3384160</id><snippet>if not last:
</snippet></ROW><ROW><id>3384160</id><snippet>None</snippet></ROW><ROW><id>3384160</id><snippet>not last</snippet></ROW><ROW><id>3384160</id><snippet>True</snippet></ROW><ROW><id>3384160</id><snippet>last</snippet></ROW><ROW><id>3384160</id><snippet>None).  In general, when you want to check if something is</snippet></ROW><ROW><id>3384160</id><snippet>, code</snippet></ROW><ROW><id>3384160</id><snippet>, not</snippet></ROW><ROW><id>3384160</id><snippet>  if(j['id'] &lt;&gt; last_id):
</snippet></ROW><ROW><id>3384160</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>3384160</id><snippet>  if j['id'] != last_id:
</snippet></ROW><ROW><id>3384160</id><snippet>if</snippet></ROW><ROW><id>3384160</id><snippet>  if len(data) == 0:
</snippet></ROW><ROW><id>3384160</id><snippet>  if not data:
</snippet></ROW><ROW><id>3384160</id><snippet>hash_str = str(hash.hexdigest())
</snippet></ROW><ROW><id>3384160</id><snippet>hash_str = hash.hexdigest()
</snippet></ROW><ROW><id>3384160</id><snippet>str</snippet></ROW><ROW><id>3384160</id><snippet>  for item in data:
    writer.writerow(item)
</snippet></ROW><ROW><id>3384160</id><snippet>  writer.writerows(data)
</snippet></ROW><ROW><id>3384160</id><snippet>  ofile = open('tmp/'+file_name, mode='ab')
  ...
  ofile.close()    
</snippet></ROW><ROW><id>3384160</id><snippet>  from __future__ import with_statement
</snippet></ROW><ROW><id>3384160</id><snippet>with</snippet></ROW><ROW><id>3384160</id><snippet>  with open('tmp/'+file_name, mode='ab') as ofile:
    ...
</snippet></ROW><ROW><id>3384160</id><snippet>print "Upload Error: "+uploadr[0]
</snippet></ROW><ROW><id>3384160</id><snippet>print "Upload Error:", uploadr[0]
</snippet></ROW><ROW><id>3384160</id><snippet>print</snippet></ROW><ROW><id>3384252</id><snippet>[paths]
/ = /var/hg/repos/*

#[web]
style = gitweb
allow_archive = bz2 gz zip
maxchanges = 200
allow_push = *
push_ssl = false
</snippet></ROW><ROW><id>3384252</id><snippet>[web]</snippet></ROW><ROW><id>3384252</id><snippet>[paths]</snippet></ROW><ROW><id>3384252</id><snippet>hgweb.config</snippet></ROW><ROW><id>3384252</id><snippet>.hg/hgrc</snippet></ROW><ROW><id>3384252</id><snippet>~/.hgrc</snippet></ROW><ROW><id>3384277</id><snippet>images[some_size] = ['x/a.jpg', 'b/f.jpg', 'n/q.jpg']
images[some_other_size] = ['q/b.jpg']
</snippet></ROW><ROW><id>3384277</id><snippet>possible_dupes = [size for size in images if len(images[size]) &gt; 1]
for size in possible_dupes:
    hashes = defaultdict(list)
    for fname in images[size]:
        m = md5.new()
        hashes[ m.update( file(fname,'rb').read(10000) ).digest() ] = fname
    for k in hashes:
       if len(hashes[k]) &lt;= 1: continue
       for fname in hashes[k][1:]:
           os.remove(fname)
</snippet></ROW><ROW><id>3384359</id><snippet>struct.pack()</snippet></ROW><ROW><id>3384416</id><snippet>str</snippet></ROW><ROW><id>3384416</id><snippet>unicode</snippet></ROW><ROW><id>3384416</id><snippet>str</snippet></ROW><ROW><id>3384416</id><snippet>bytes</snippet></ROW><ROW><id>3384609</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': '',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}
</snippet></ROW><ROW><id>3384609</id><snippet>django.db.backends.sqlite3</snippet></ROW><ROW><id>3384672</id><snippet>import collections

class UndoBuffer(object):
    def __init__(self,value,max_length=5):
        self.max_length=max_length
        self._buffer=collections.deque([value],max_length)
    @property
    def data(self):
        return self._buffer[-1]
    @data.setter
    def data(self,value):
        self._buffer.append(value)
    def restore(self,index):
        self.data=self._buffer[index]
</snippet></ROW><ROW><id>3384672</id><snippet>rawdict=UndoBuffer('{1}')      
</snippet></ROW><ROW><id>3384672</id><snippet>data</snippet></ROW><ROW><id>3384672</id><snippet>_buffer</snippet></ROW><ROW><id>3384672</id><snippet>print(rawdict._buffer)
# deque(['{1}'], maxlen=5)
print(rawdict.data)
# {1}
</snippet></ROW><ROW><id>3384672</id><snippet>rawdict.data</snippet></ROW><ROW><id>3384672</id><snippet>rawdict._buffer</snippet></ROW><ROW><id>3384672</id><snippet>rawdict.data = '{2}'
print(rawdict._buffer)
# deque(['{1}', '{2}'], maxlen=5)
</snippet></ROW><ROW><id>3384672</id><snippet>rawdict.data</snippet></ROW><ROW><id>3384672</id><snippet>print(rawdict.data)
# {2}
</snippet></ROW><ROW><id>3384672</id><snippet>rawdict.data = '{3}'
rawdict.data = '{4}'
rawdict.data = '{5}'
print(rawdict._buffer)
# deque(['{1}', '{2}', '{3}', '{4}', '{5}'], maxlen=5)
rawdict.data = '{6}'
print(rawdict._buffer)
# deque(['{2}', '{3}', '{4}', '{5}', '{6}'], maxlen=5)
</snippet></ROW><ROW><id>3384672</id><snippet>rawdict.restore(0)   # set rawdict.data to rawdict._buffer[0]
print(rawdict.data)
# {2}
print(rawdict._buffer)
# deque(['{3}', '{4}', '{5}', '{6}', '{2}'], maxlen=5)
</snippet></ROW><ROW><id>3385278</id><snippet>dictionaries</snippet></ROW><ROW><id>3385278</id><snippet>for k in dictionaries:</snippet></ROW><ROW><id>3385278</id><snippet>for k in dictionaries.keys()</snippet></ROW><ROW><id>3385278</id><snippet>    tp = dictionaries.get('*TYPE')
    if tp is not None:
      """ Here we determine the type """
      if tp.lower() == 'name':
        dictionaries.update({"type" : 0})
        func = name(dictionaries)
      elif tp.lower() == "ma":
        dictionaries.update({"type" : 1})
        func = DCC(dictionaries)
        logging.debug(type(func))
</snippet></ROW><ROW><id>3385278</id><snippet>dictionaries</snippet></ROW><ROW><id>3385278</id><snippet>dictionaries</snippet></ROW><ROW><id>3385278</id><snippet>dictionaries</snippet></ROW><ROW><id>3385293</id><snippet>sys.path</snippet></ROW><ROW><id>3385293</id><snippet>sys.modules</snippet></ROW><ROW><id>3385293</id><snippet>sys.meta_path</snippet></ROW><ROW><id>3385293</id><snippet>sys.meta_path</snippet></ROW><ROW><id>3385293</id><snippet>find_module()</snippet></ROW><ROW><id>3385293</id><snippet>sys.meta_path</snippet></ROW><ROW><id>3385293</id><snippet>sys.path_hooks</snippet></ROW><ROW><id>3385293</id><snippet>sys.path_importer_cache</snippet></ROW><ROW><id>3385293</id><snippet>sys.path</snippet></ROW><ROW><id>3385299</id><snippet>collections.Mapping</snippet></ROW><ROW><id>3385299</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>3385299</id><snippet>pop</snippet></ROW><ROW><id>3385299</id><snippet>__len__
__iter__
__getitem__
</snippet></ROW><ROW><id>3385299</id><snippet>Mapping</snippet></ROW><ROW><id>3385299</id><snippet>__contains__
</snippet></ROW><ROW><id>3385299</id><snippet>MutableMapping</snippet></ROW><ROW><id>3385299</id><snippet>__setitem__
__delitem__    
</snippet></ROW><ROW><id>3385845</id><snippet>class MyClass(object):
    def max_value(self):
        # assigning your list like this will make it accessible 
        # from other methods in the class
        self.list_in_max_value = ["A", "B", "C"]

    def get_action(self):
        # here, we're doing something with the list
        self.list_in_max_value.reverse()
        return self.list_in_max_value[0]

&gt;&gt;&gt; my_class = MyClass()
&gt;&gt;&gt; my_class.max_value()
&gt;&gt;&gt; my_class.get_action()
"C"
</snippet></ROW><ROW><id>3386141</id><snippet>for</snippet></ROW><ROW><id>3386141</id><snippet>for index, item in list:</snippet></ROW><ROW><id>3386141</id><snippet>for key, value in dict.items():</snippet></ROW><ROW><id>3386141</id><snippet>enumerate()</snippet></ROW><ROW><id>3386141</id><snippet>for index, item in enumerate(outputList1):
    pass
</snippet></ROW><ROW><id>3386141</id><snippet>list = [ ['a', 'b'], ['c', 'd'] ]
for item1, item2 in list:
    print item1, item2
</snippet></ROW><ROW><id>3386371</id><snippet>if</snippet></ROW><ROW><id>3386371</id><snippet>a</snippet></ROW><ROW><id>3386371</id><snippet>a[-1]</snippet></ROW><ROW><id>3386371</id><snippet>a</snippet></ROW><ROW><id>3386371</id><snippet>maxagent</snippet></ROW><ROW><id>3386371</id><snippet>max</snippet></ROW><ROW><id>3386371</id><snippet>def maxagent(gamestate, depth):
    actions = gamestate.getLegalActions(0)
    filteredactions = filter(lambda action: action != Directions.STOP, actions)
    # alternatives: 
    #    filteredactions = filter(Directions.STOP.__ne__, actions)
    #    filteredactions = (a for a in actions if a != Directions.STOP)
    bestaction = max(filteredactions,
                     key=lambda action: self.minvalue(
                                          gamestate.generateSuccessor(0, action),
                                          depth, 1
                                        ))
    return bestaction
</snippet></ROW><ROW><id>3386371</id><snippet>def maxagent(gamestate, depth)
    actions = gamestate.getLegalActions(0)
    scores = ( (self.minvalue(gamestate.generateSuccessor(0, a), depth, 1), a)
               for a in actions if a != Directions.STOP
             )
    return max(scores)
...
score, action = maxagent(gamestate, depth)
</snippet></ROW><ROW><id>3386656</id><snippet>result = Member.objects.\
    filter(
        membership__start_date__lte = dt1,
        membership__end_date__gte=dt1).\
    exclude(
        pk__in = \
            Member.objects.filter(
                membership__start_date__lte = dt2,
                membership__end_date__gte = dt2).\
    values_list('pk')
</snippet></ROW><ROW><id>3386914</id><snippet>get</snippet></ROW><ROW><id>3386914</id><snippet>set</snippet></ROW><ROW><id>3387212</id><snippet>with open('data.csv') as f:
    cf = csv.DictReader(f, fieldnames=['city'])
    for row in cf:
        print row['city']
</snippet></ROW><ROW><id>3387212</id><snippet>csv.DictReader</snippet></ROW><ROW><id>3387212</id><snippet>with open('data.csv') as f:
    cf = csv.reader(f)
    for row in cf:
        print row[0]
</snippet></ROW><ROW><id>3387228</id><snippet>from sqlalchemy import Column, Integer, Unicode, create_engine
from sqlalchemy.orm import create_session
from sqlalchemy.ext.declarative import declarative_base

engine = create_engine('sqlite://')
Base = declarative_base(bind=engine)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(60))

Base.metadata.create_all()   
</snippet></ROW><ROW><id>3387228</id><snippet>s = create_session(autocommit=False, autoflush=False)
u = User()
u.name = u'Cheezo'
s.add(u)
s.flush()
</snippet></ROW><ROW><id>3387228</id><snippet>&gt;&gt;&gt; u2 = s.query(User).first()
&gt;&gt;&gt; print u2.name
Cheezo
&gt;&gt;&gt; u2 is u
True
</snippet></ROW><ROW><id>3387230</id><snippet>__init__</snippet></ROW><ROW><id>3387230</id><snippet>from imaplib import IMAP4, IMAP4_PORT
from socks import sockssocket, PROXY_TYPE_SOCKS4, PROXY_TYPE_SOCKS5, PROXY_TYPE_HTTP

class SocksIMAP4(IMAP4):
    def open(self,host,port=IMAP4_PORT):
        self.host = host
        self.port = port
        self.sock = sockssocket()
        self.sock.setproxy(PROXY_TYPE_SOCKS5,'socks.example.com')
        self.sock.connect((host,port))
        self.file = self.sock.makefile('rb')
</snippet></ROW><ROW><id>3387410</id><snippet>from django.db.models.signals import class_prepared

def longer_username(sender, *args, **kwargs):
    # You can't just do `if sender == django.contrib.auth.models.User`
    # because you would have to import the model
    # You have to test using __name__ and __module__
    if sender.__name__ == "User" and sender.__module__ == \
        "django.contrib.auth.models":
        sender._meta.get_field("username").max_length = 75

class_prepared.connect(longer_username)
</snippet></ROW><ROW><id>3387410</id><snippet>INSTALLED_APPS = (
    'longer_username',
    ...
)
</snippet></ROW><ROW><id>3387486</id><snippet>script</snippet></ROW><ROW><id>3387486</id><snippet>distutils.core.setup()</snippet></ROW><ROW><id>3387486</id><snippet>distutils</snippet></ROW><ROW><id>3387486</id><snippet>py_modules</snippet></ROW><ROW><id>3387486</id><snippet>.py</snippet></ROW><ROW><id>3387486</id><snippet>data_files</snippet></ROW><ROW><id>3387486</id><snippet>distutils</snippet></ROW><ROW><id>3387542</id><snippet>hWnd</snippet></ROW><ROW><id>3387542</id><snippet>SendMessage</snippet></ROW><ROW><id>3387542</id><snippet>WndProc</snippet></ROW><ROW><id>3387542</id><snippet>WndProc</snippet></ROW><ROW><id>3387596</id><snippet>import sqlite3
conn = sqlite3.connect('database.db')
cursor = conn.cursor()

with open("...", "rb") as input_file:
    ablob = input_file.read()
    cursor.execute("INSERT INTO notes (id, file) VALUES(0, ?)", [sqlite3.Binary(ablob)])
    conn.commit()

with open("Output.bin", "wb") as output_file:
    cursor.execute("SELECT file FROM notes WHERE id = 0")
    ablob = cursor.fetchone()
    output_file.write(ablob[0])

cursor.close()
conn.close()
</snippet></ROW><ROW><id>3387651</id><snippet>{{ request.host }}</snippet></ROW><ROW><id>3387651</id><snippet>request</snippet></ROW><ROW><id>3387651</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = (
    "django.contrib.auth.context_processors.auth",
    "django.core.context_processors.debug",
    "django.core.context_processors.i18n",
    "django.core.context_processors.media",
    "django.contrib.messages.context_processors.messages",
    "django.core.context_processors.request"
)
</snippet></ROW><ROW><id>3387651</id><snippet>request</snippet></ROW><ROW><id>3387715</id><snippet>int</snippet></ROW><ROW><id>3387737</id><snippet>sys.path</snippet></ROW><ROW><id>3387737</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3387737</id><snippet>PYTHONPATH="/Me/Documents/mydir:$PYTHONPATH"
export PYTHONPATH
</snippet></ROW><ROW><id>3387737</id><snippet>PATH</snippet></ROW><ROW><id>3387925</id><snippet>object_detail</snippet></ROW><ROW><id>3387925</id><snippet>queryset</snippet></ROW><ROW><id>3387925</id><snippet>(\S+)</snippet></ROW><ROW><id>3387925</id><snippet>url(r'^post/(?P&lt;object_id&gt;\S+)/$' ...
</snippet></ROW><ROW><id>3387975</id><snippet>import collections


class TransformedDict(collections.MutableMapping):
    """A dictionary that applies an arbitrary key-altering
       function before accessing the keys"""

    def __init__(self, *args, **kwargs):
        self.store = dict()
        self.update(dict(*args, **kwargs))  # use the free update to set keys

    def __getitem__(self, key):
        return self.store[self.__keytransform__(key)]

    def __setitem__(self, key, value):
        self.store[self.__keytransform__(key)] = value

    def __delitem__(self, key):
        del self.store[self.__keytransform__(key)]

    def __iter__(self):
        return iter(self.store)

    def __len__(self):
        return len(self.store)

    def __keytransform__(self, key):
        return key
</snippet></ROW><ROW><id>3387975</id><snippet>class MyTransformedDict(TransformedDict):

    def __keytransform__(self, key):
        return key.lower()


s = MyTransformedDict([('Test', 'test')])

assert s.get('TEST') is s['test']   # free get
assert 'TeSt' in s                  # free __contains__
                                    # free setdefault, __eq__, and so on

import pickle
assert pickle.loads(pickle.dumps(s)) == s
                                    # works too since we just use a normal dict
</snippet></ROW><ROW><id>3387975</id><snippet>dict</snippet></ROW><ROW><id>3387999</id><snippet>select to_char(yourtimestamp,'yyyymmdd hh24:mi'), count(*)
from yourtable
group by to_char(yourtimestamp,'yyyymmdd hh24:mi') 
order by to_char(yourtimestamp,'yyyymmdd hh24:mi') DESC;
</snippet></ROW><ROW><id>3387999</id><snippet>select to_char(yourtimestamp,'yyyy'), count(*)
from yourtable
group by to_char(yourtimestamp,'yyyy') 
order by to_char(yourtimestamp,'yyyy') DESC;
</snippet></ROW><ROW><id>3388173</id><snippet>admin.site.register(Model)</snippet></ROW><ROW><id>3388173</id><snippet>admin.autodiscover()</snippet></ROW><ROW><id>3388173</id><snippet>self</snippet></ROW><ROW><id>3388286</id><snippet>def CreateDirectory(pathName):
    try:
        os.makedirs(pathName)
    except OSError, e:
        # could be that the directory already exists
        # could be permission error
        # could be file system is full
        # look at e.errno to determine what went wrong
</snippet></ROW><ROW><id>3388286</id><snippet>os.access</snippet></ROW><ROW><id>3388286</id><snippet>os.path.exists</snippet></ROW><ROW><id>3388286</id><snippet>os.path.exists</snippet></ROW><ROW><id>3388626</id><snippet>def extract_date(entity):
    'extracts the starting date from an entity'
    return entity.start_time.date()
</snippet></ROW><ROW><id>3388626</id><snippet>itertools.groupby</snippet></ROW><ROW><id>3388626</id><snippet>from itertools import groupby

entities = Entity.objects.order_by('start_time')
for start_date, group in groupby(entities, key=extract_date):
    do_something_with(start_date, list(group))
</snippet></ROW><ROW><id>3388626</id><snippet>entities = Entity.objects.order_by('start_time')
list_of_lists = [list(g) for t, g in groupby(entities, key=extract_date)]
</snippet></ROW><ROW><id>3388758</id><snippet>column_data = (('myName', 'myType', {'other': 'myOther'}),
               ('myName2', 'myType2', {'other2': 'myOther2'}))

def getColumn(self,name,type,**rest):
    pass

def getColumns(self,columns):
    return [self.getColumn(name, type, **rest) for name, type, rest in columns]
</snippet></ROW><ROW><id>3388758</id><snippet>rest</snippet></ROW><ROW><id>3388813</id><snippet>or</snippet></ROW><ROW><id>3388813</id><snippet>if raw_input == "dog" or raw_input == "cat" or raw_input == "small bird":
</snippet></ROW><ROW><id>3388813</id><snippet>in</snippet></ROW><ROW><id>3388813</id><snippet>if raw_input in ("dog", "cat", "small bird"):
</snippet></ROW><ROW><id>3389168</id><snippet>v.counter += 1
</snippet></ROW><ROW><id>3389168</id><snippet>v.counter</snippet></ROW><ROW><id>3389168</id><snippet>id()</snippet></ROW><ROW><id>3389168</id><snippet>v.counter</snippet></ROW><ROW><id>3389168</id><snippet>&gt;&gt;&gt; id(v.counter)
149265780
&gt;&gt;&gt; v.counter+=1
&gt;&gt;&gt; id(v.counter)
149265768
</snippet></ROW><ROW><id>3389168</id><snippet>v</snippet></ROW><ROW><id>3389168</id><snippet>__dict__</snippet></ROW><ROW><id>3389168</id><snippet>&gt;&gt;&gt; v=c()
&gt;&gt;&gt; v.__dict__
{}
&gt;&gt;&gt; v.counter+=1
&gt;&gt;&gt; v.__dict__
{'counter': 1}
</snippet></ROW><ROW><id>3389168</id><snippet>counter</snippet></ROW><ROW><id>3389168</id><snippet>list</snippet></ROW><ROW><id>3389168</id><snippet>&gt;&gt;&gt; class c:
...  counter=[]
... 
&gt;&gt;&gt; v=c()
&gt;&gt;&gt; v.counter+=[1]
&gt;&gt;&gt; c.counter
[1]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3389207</id><snippet>step1 = Popen(['ip','addr','show','br0'],stdout=PIPE)
step2 = Popen(['grep','inet6'],stdout=PIPE,stdin=step1.stdout)
step3 = Popen(['sed','-e','/fe80/d','-e','s/ *inet6 *//g','-e','s/\/64.*$//g'],stdout=PIPE,stdin=step2.stdout)
step4 = Popen(['tail','-n1'],stdout=PIPE,stdin=step3.stdout)
step4.communicate()[0]
</snippet></ROW><ROW><id>3389337</id><snippet>imp.find_module()</snippet></ROW><ROW><id>3389337</id><snippet>imp.load_module()</snippet></ROW><ROW><id>3389337</id><snippet>find_module</snippet></ROW><ROW><id>3389397</id><snippet>names = open('names.txt')
numbers = open('numbers.txt')

for name, number in zip(names, numbers):
   if not numbers == 'na':
       output.write(name + " " + number)
</snippet></ROW><ROW><id>3389505</id><snippet>from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler

class MyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write('&lt;html&gt;&lt;body&gt;&lt;p&gt;OK&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;')
    def log_message(self, format, *args):
        return

httpd = HTTPServer(('', 8001), MyHandler)
httpd.serve_forever()
</snippet></ROW><ROW><id>3389611</id><snippet>any</snippet></ROW><ROW><id>3389611</id><snippet>if any(x in str for x in a):
</snippet></ROW><ROW><id>3389611</id><snippet>all</snippet></ROW><ROW><id>3389611</id><snippet>any</snippet></ROW><ROW><id>3389735</id><snippet>nosetests</snippet></ROW><ROW><id>3389735</id><snippet>-s</snippet></ROW><ROW><id>3389842</id><snippet>/usr/local/lib/python</snippet></ROW><ROW><id>3389842</id><snippet>/home/user/lib/python</snippet></ROW><ROW><id>3389842</id><snippet>/usr/lib/python</snippet></ROW><ROW><id>3389842</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3390240</id><snippet>class Cereal:
    def eat(self):
        print 'yum'

breakfast = Cereal()
breakfast.eat()
</snippet></ROW><ROW><id>3390240</id><snippet>class User:
    def __init__(self, userid):
        # ...

admin_user = User(ADMIN_ID)
</snippet></ROW><ROW><id>3390423</id><snippet>def output():
    f = open('data.txt', 'r').read()
    print f
</snippet></ROW><ROW><id>3390575</id><snippet>elif len(dict[a]) &lt; length</snippet></ROW><ROW><id>3390602</id><snippet>open(filePath)</snippet></ROW><ROW><id>3390602</id><snippet>open(filePath, 'rb')</snippet></ROW><ROW><id>3390602</id><snippet>b</snippet></ROW><ROW><id>3390706</id><snippet>if</snippet></ROW><ROW><id>3390706</id><snippet>for</snippet></ROW><ROW><id>3390706</id><snippet>for</snippet></ROW><ROW><id>3390706</id><snippet>if random in range(0, 16):
    winning = 0
</snippet></ROW><ROW><id>3390706</id><snippet>range</snippet></ROW><ROW><id>3390706</id><snippet>random</snippet></ROW><ROW><id>3390706</id><snippet>if 0 &lt;= random &lt; 16:
    winning = 0

# The above is a shorthand syntax for this:
# if 0 &lt;= random and random &lt; 16
</snippet></ROW><ROW><id>3390973</id><snippet>*</snippet></ROW><ROW><id>3390973</id><snippet>print re.search(r'\*\*(.*)\*\*', 'hello **world**').group(1) # prints 'world'
</snippet></ROW><ROW><id>3390973</id><snippet>**asd**dfe**</snippet></ROW><ROW><id>3391039</id><snippet>help(thing)</snippet></ROW><ROW><id>3391105</id><snippet>def repeat_to_length(string_to_expand, length):
   return (string_to_expand * ((length/len(string_to_expand))+1))[:length]
</snippet></ROW><ROW><id>3391310</id><snippet>import re
samples = ['tt-5d10h', 'tt-5d10h30m', 'tt-5d30m', 'tt-10h30m', 'tt-5d', 'tt-10h', 'tt-30m',]

def parse(text):
    match = re.match('tt-(?:(\d+)d)?(?:(\d+)h)?(?:(\d+)m)?', text)
    values = [int(x) for x in match.groups(0)]
    return values

for sample in samples:
    print parse(sample)
</snippet></ROW><ROW><id>3391310</id><snippet>[5, 10, 0]
[5, 10, 30]
[5, 0, 30]
[0, 10, 30]
[5, 0, 0]
[0, 10, 0]
[0, 0, 30]
</snippet></ROW><ROW><id>3391341</id><snippet>easy_install boto
</snippet></ROW><ROW><id>3391341</id><snippet>python setup.py install</snippet></ROW><ROW><id>3391545</id><snippet>filter</snippet></ROW><ROW><id>3391545</id><snippet>self.filter = delkeyFilter()
self.dataTreeView.installEventFilter(self.filter)
</snippet></ROW><ROW><id>3391743</id><snippet>__unicode__</snippet></ROW><ROW><id>3391743</id><snippet>__unicode__</snippet></ROW><ROW><id>3391743</id><snippet>__unicode__</snippet></ROW><ROW><id>3391743</id><snippet>__unicode__</snippet></ROW><ROW><id>3391743</id><snippet>import types

class Dummy(object):
    def __unicode__(self):
        func = self.__dict__.get("__unicode__", None)
        if func:
            // WARNING: if func() invokes this __unicode__ method directly,
            // an infinite loop could result. You may need an ugly hack to guard
            // against this. (E.g., set a flag on entry / unset the flag on exit,
            // using a try/finally to protect against exceptions.)

            return func()

        return u'one'

    def two(self):
        return u'two'

d = Dummy()
print unicode(d)
funcType = type(Dummy.__unicode__)
d.__unicode__ = types.MethodType(Dummy.two, d)
print unicode(d)
print d.__unicode__()
</snippet></ROW><ROW><id>3391743</id><snippet>&gt; python dummy.py 
one
two
two
</snippet></ROW><ROW><id>3391764</id><snippet>for v in ('var2','var3','var4'):
    try:
        if row_num_id.get(str(i))==varschosen[1]:
            valuetowrite=str(row[i])
            value=getattr(students[str(variablekey)],v)
            if value != []:
                value.append(valuetowrite)
            else:
                value=[valuetowrite]
    except PUT_AN_EXPLICT_EXCEPTION_HERE:
        pass
</snippet></ROW><ROW><id>3391764</id><snippet>PUT_AN_EXPLICT_EXCEPTION_HERE</snippet></ROW><ROW><id>3391764</id><snippet>AttributeError</snippet></ROW><ROW><id>3391764</id><snippet>TypeError</snippet></ROW><ROW><id>3391764</id><snippet>ValueError</snippet></ROW><ROW><id>3391764</id><snippet>try...exception</snippet></ROW><ROW><id>3391764</id><snippet>TypeError: ...</snippet></ROW><ROW><id>3391764</id><snippet>PUT_AN_EXPLICT_EXCEPTION_HERE</snippet></ROW><ROW><id>3391764</id><snippet>TypeError</snippet></ROW><ROW><id>3391764</id><snippet>TypeError</snippet></ROW><ROW><id>3391764</id><snippet>ValueError</snippet></ROW><ROW><id>3391764</id><snippet>PUT_AN_EXPLICT_EXCEPTION_HERE</snippet></ROW><ROW><id>3391764</id><snippet>(TypeError,ValueError)</snippet></ROW><ROW><id>3391764</id><snippet>row_num_id.get(str(i))==varschosen[1]</snippet></ROW><ROW><id>3391764</id><snippet>row_num_id.get(str(i))</snippet></ROW><ROW><id>3391764</id><snippet>None</snippet></ROW><ROW><id>3391764</id><snippet>str(i)</snippet></ROW><ROW><id>3391764</id><snippet>row_num_id</snippet></ROW><ROW><id>3391764</id><snippet>varschosen[1]</snippet></ROW><ROW><id>3391764</id><snippet>None</snippet></ROW><ROW><id>3391764</id><snippet>str(i)</snippet></ROW><ROW><id>3391764</id><snippet>row_num_id</snippet></ROW><ROW><id>3391764</id><snippet>True</snippet></ROW><ROW><id>3391764</id><snippet>False</snippet></ROW><ROW><id>3391764</id><snippet>row_num_id.get(str(i),object())==varschosen[1]</snippet></ROW><ROW><id>3391764</id><snippet>row_num_id.get(str(i),object())</snippet></ROW><ROW><id>3391764</id><snippet>object()</snippet></ROW><ROW><id>3391764</id><snippet>str(i)</snippet></ROW><ROW><id>3391764</id><snippet>row_num_id</snippet></ROW><ROW><id>3391764</id><snippet>object()</snippet></ROW><ROW><id>3391764</id><snippet>object</snippet></ROW><ROW><id>3391764</id><snippet>varschosen[1]</snippet></ROW><ROW><id>3391887</id><snippet>a = a.clip(min=0)
</snippet></ROW><ROW><id>3391963</id><snippet>$ export PATH=$PATH:~/python2.7/bin
$ sh setuptools-0.6.c11-py2.7.egg
</snippet></ROW><ROW><id>3392026</id><snippet>request.POST.items()</snippet></ROW><ROW><id>3392049</id><snippet>pydoc</snippet></ROW><ROW><id>3392049</id><snippet>pydoc.py</snippet></ROW><ROW><id>3392049</id><snippet>c:\Python27\Lib\pydoc.py</snippet></ROW><ROW><id>3392049</id><snippet>c:\Python27\Tools\Scripts\pydocgui.pyw</snippet></ROW><ROW><id>3392053</id><snippet>post_save()</snippet></ROW><ROW><id>3392053</id><snippet>post_delete()</snippet></ROW><ROW><id>3392185</id><snippet>subdir</snippet></ROW><ROW><id>3392185</id><snippet>crawlFolder</snippet></ROW><ROW><id>3392185</id><snippet>file</snippet></ROW><ROW><id>3392185</id><snippet>os.path.join(crawlFolder, subdir, file)</snippet></ROW><ROW><id>3392185</id><snippet>open</snippet></ROW><ROW><id>3392185</id><snippet>file</snippet></ROW><ROW><id>3392185</id><snippet>for subdir, dirs, files in os.walk(crawlFolder):
    for file in files:
         print os.getcwd()
         f=open(os.path.join(crawlFolder, subdir, file),'r')
         lines=f.readlines()
         writeFile.write(lines)
         f.close()
writeFile.close()
</snippet></ROW><ROW><id>3392185</id><snippet>for subdir, dirs, files in os.walk(crawlFolder):
    for file in files:
         print os.getcwd()
         f=open(os.path.join(crawlFolder, subdir, file),'r')
         writeFile.writelines(f)
         f.close()
writeFile.close()
</snippet></ROW><ROW><id>3392185</id><snippet>for subdir, dirs, files in os.walk(crawlFolder):
    for file in files:
         writeFile.writelines(open(os.path.join(crawlFolder, subdir, file)))
writeFile.close()
</snippet></ROW><ROW><id>3392292</id><snippet>''</snippet></ROW><ROW><id>3392292</id><snippet>keep = set(generic_drugs_mapping[drug] for drug in drug_input)
for i in range(len(row)):
  if i not in keep:
    row[i] = ''
</snippet></ROW><ROW><id>3392340</id><snippet>import os, sys, unittest, lucene
lucene.initVM()

baseDir = os.path.dirname(os.path.abspath(sys.argv[0]))
sys.path.append(baseDir)

import lia.searching.ScoreTest
from lucene import System

System.setProperty("index.dir", os.path.join(baseDir, 'index'))
unittest.main(lia.searching.ScoreTest)
</snippet></ROW><ROW><id>3392370</id><snippet>keep.update(yoursequenceofvalues)
</snippet></ROW><ROW><id>3392370</id><snippet>keep.update(xrange(11))</snippet></ROW><ROW><id>3392370</id><snippet>for ...whatever...:
  onemorevalue = ...whatever...
  keep.add(onemorevalue)
</snippet></ROW><ROW><id>3392370</id><snippet>.update</snippet></ROW><ROW><id>3392406</id><snippet>isinstance</snippet></ROW><ROW><id>3392406</id><snippet>issubclass</snippet></ROW><ROW><id>3392406</id><snippet>Mapping</snippet></ROW><ROW><id>3392406</id><snippet>class GoogMapping(Mapping, collections.Mapping): ...</snippet></ROW><ROW><id>3392406</id><snippet>Mapping</snippet></ROW><ROW><id>3392406</id><snippet>collections.Mapping</snippet></ROW><ROW><id>3392406</id><snippet>collections.Mapping</snippet></ROW><ROW><id>3392412</id><snippet>next(b)</snippet></ROW><ROW><id>3392412</id><snippet>b.next()</snippet></ROW><ROW><id>3392412</id><snippet>b</snippet></ROW><ROW><id>3392412</id><snippet>for row in b[1:]:</snippet></ROW><ROW><id>3392647</id><snippet>in</snippet></ROW><ROW><id>3392647</id><snippet>if p.sku in dic1:
    ...
</snippet></ROW><ROW><id>3392647</id><snippet>in</snippet></ROW><ROW><id>3392656</id><snippet>class BAC:
    def __init__(self):
        self.alpha= 'Hello '
        self.beta= 'World!'
    def me(self):
        print self.alpha + self.beta
</snippet></ROW><ROW><id>3392656</id><snippet>class BAC:
    def me(self,alpha,beta):
        self.alpha = alpha
        self.beta= beta
        print self.alpha + self.beta
</snippet></ROW><ROW><id>3392656</id><snippet>my_bac = Bac()
print my_bac.alpha + my_bac.beta
</snippet></ROW><ROW><id>3392656</id><snippet>Hello World!
Hello World!
</snippet></ROW><ROW><id>3392668</id><snippet>from itertools import count
import urllib, urllib2, sys, argparse
from xgoogle.search import GoogleSearch, SearchError

stringArr = ["string 1",
             "string 2",
             "string 3",
             "string etc"]

def searchIt(url):
    try:
        if(args.verbose&gt;='1'):
            print "[INFO] Opening URL: "+url
        response = urllib.urlopen(url)
    except urllib2.URLError, e:
        print "[ERROR] "+e.reason
        return False
    if checkForStr(response.read()):
        if(args.verbose=='0'):
            print "[INFO] String found in URL: "+url
    else:
        if(args.verbose&gt;='1'):
            print "[INFO] No string found in URL: "+url

def checkForStr(html):
    return any(checkStr in html for checkStr in stringArr)

def main():
    try:
        gs = GoogleSearch(args.keyword)
        gs.results_per_page = 100
        for i in count():
            results = gs.get_results()
            if not results: # no more results (pages) were found
                break
            for r in results: # process results for page
                searchIt(r.url) # check for string
        # finished
    except SearchError, e:
        print "[ERROR] Search failed: %s" % e

if __name__ == '__main__':
    try:
        parser = argparse.ArgumentParser()
        parser.add_argument('-v', dest='verbose', default='0', help='Verbosity level', choices='012')
        group = parser.add_argument_group('required arguments')
        group.add_argument('-k', dest='keyword', help='Keyword to use on google query', required=True)
        args = parser.parse_args()
        main()
    except KeyboardInterrupt:
        print "Suspended by user..."
        sys.exit()
</snippet></ROW><ROW><id>3392692</id><snippet>row</snippet></ROW><ROW><id>3392692</id><snippet>&gt;&gt;&gt; range(5)
[0, 1, 2, 3, 4]
&gt;&gt;&gt; range(0, 5)
[0, 1, 2, 3, 4]
&gt;&gt;&gt; range(3, 5)
[3, 4]
&gt;&gt;&gt; range(3, 5, -1)
[]
&gt;&gt;&gt; range(5, 3, -1)
[5, 4]
</snippet></ROW><ROW><id>3392692</id><snippet>range(len(row) - 1, -1, -1)
</snippet></ROW><ROW><id>3392692</id><snippet>reversed(range(len(row))
</snippet></ROW><ROW><id>3392692</id><snippet>c</snippet></ROW><ROW><id>3392692</id><snippet>for row_number, row in enumerate(c):
    c[row_number] = [x for i, x in enumerate(row) if i in keep]
</snippet></ROW><ROW><id>3392712</id><snippet>shelve</snippet></ROW><ROW><id>3392732</id><snippet>c1= [row[:13] for row in c.readlines()]
</snippet></ROW><ROW><id>3392867</id><snippet>Key</snippet></ROW><ROW><id>3392867</id><snippet>conn.create_bucket()</snippet></ROW><ROW><id>3392867</id><snippet>mybucket</snippet></ROW><ROW><id>3392895</id><snippet>------------------------------------
| App  &lt;--&gt; Ext. API &lt;--&gt; Protocol | &lt;--&gt; (Socket) &lt;--&gt; API.py &lt;--&gt; Script
------------------------------------
</snippet></ROW><ROW><id>3392895</id><snippet>~/.myapp/plugins
</snippet></ROW><ROW><id>3393014</id><snippet>def get_data():
    data = memcache.get("key")
    if data is not None:
        return data
    else:
        data = self.query_for_data()
        memcache.add("key", data, 60)
        return data
</snippet></ROW><ROW><id>3393014</id><snippet>from google.appengine.api import memcache
</snippet></ROW><ROW><id>3393130</id><snippet>self.panel.SetScrollbars(1, 1, 1, 1)
</snippet></ROW><ROW><id>3393130</id><snippet>self.panel = wx.ScrolledWindow(self,wx.ID_ANY)</snippet></ROW><ROW><id>3393130</id><snippet>SetScrollBars</snippet></ROW><ROW><id>3393160</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; nltk.word_tokenize("Hello! Hi, I am debating this predicament called life. Can you help me?")
['Hello', '!', 'Hi', ',', 'I', 'am', 'debating', 'this', 'predicament', 'called', 'life.', 'Can', 'you', 'help', 'me', '?']
</snippet></ROW><ROW><id>3393266</id><snippet>'atr'</snippet></ROW><ROW><id>3393266</id><snippet>x</snippet></ROW><ROW><id>3393266</id><snippet>x.atr</snippet></ROW><ROW><id>3393266</id><snippet>mro</snippet></ROW><ROW><id>3393266</id><snippet>class sic(object):
  def foo(self): ...

x = sic()
x.foo()
</snippet></ROW><ROW><id>3393266</id><snippet>foo</snippet></ROW><ROW><id>3393266</id><snippet>x.foo = 23</snippet></ROW><ROW><id>3393266</id><snippet>x.foo()</snippet></ROW><ROW><id>3393266</id><snippet>x.foo</snippet></ROW><ROW><id>3393266</id><snippet>23</snippet></ROW><ROW><id>3393266</id><snippet>int</snippet></ROW><ROW><id>3393266</id><snippet>class one(object):
  foo = lambda self: ...

class two(object):
  def foo(self): ...

class three(object):
  foo = 23
</snippet></ROW><ROW><id>3393266</id><snippet>foo</snippet></ROW><ROW><id>3393266</id><snippet>def</snippet></ROW><ROW><id>3393266</id><snippet>class zap(zop):
  zep = None

  def blub(self):
    if self.zep is None: self.zep = 23
  ...&amp;c...
</snippet></ROW><ROW><id>3393266</id><snippet>zap</snippet></ROW><ROW><id>3393266</id><snippet>__init__</snippet></ROW><ROW><id>3393266</id><snippet>self.zep = None</snippet></ROW><ROW><id>3393266</id><snippet>__init__</snippet></ROW><ROW><id>3393266</id><snippet>zop</snippet></ROW><ROW><id>3393266</id><snippet>__init__</snippet></ROW><ROW><id>3393266</id><snippet>blub</snippet></ROW><ROW><id>3393266</id><snippet>blub</snippet></ROW><ROW><id>3393345</id><snippet>WWW-Authenticate: Basic realm=XXXX</snippet></ROW><ROW><id>3393345</id><snippet>'Basic '</snippet></ROW><ROW><id>3393345</id><snippet>username:password</snippet></ROW><ROW><id>3393427</id><snippet>for opis in d:
    try:
          print """&lt;B&gt;Place/Time:&lt;/B&gt; %s&lt;br&gt;""" % d.entries[count].title
</snippet></ROW><ROW><id>3393427</id><snippet>for entry in d.entries:
    try:
        print """&lt;B&gt;Place/Time:&lt;/B&gt; %s&lt;br&gt;""" % entry.title
        ....
</snippet></ROW><ROW><id>3393470</id><snippet>len(filter(None, iterable))
</snippet></ROW><ROW><id>3393470</id><snippet>None</snippet></ROW><ROW><id>3393470</id><snippet>filter</snippet></ROW><ROW><id>3393470</id><snippet>len(filter(bool, iterable))</snippet></ROW><ROW><id>3393568</id><snippet>f1</snippet></ROW><ROW><id>3393568</id><snippet>class A(object):

        def f1(self):
                return []

        test1 = property(lambda x:x.f1())
</snippet></ROW><ROW><id>3393572</id><snippet>groups = forms.ModelMultipleChoiceField( 
    queryset=None, 
    required=True, 
    widget=GroupsSelect,
)

 def __init__(self, *args, **kw):  
    super(ModelForm, self).__init__(*args, **kw)
    self.fields['groups'].queryset=Group.objects.filter(user=self.instance.id)

#view
op = UserAttributes.objects.get(id=operator_id)
form = SettingsOperatorsForm(instance=op)
</snippet></ROW><ROW><id>3393617</id><snippet>-lpython24</snippet></ROW><ROW><id>3393657</id><snippet>import wx

def vibrate(win, count=20, delay=50):
    if count == 0: return
    x, y = win.GetPositionTuple()
    dx = 2*count*(.5-count%2)
    win.SetPosition((x+dx,y))
    wx.CallLater(delay, vibrate, win, count-1, delay)

app = wx.PySimpleApp()
frame = wx.Frame(None, title="Vibrator")
frame.Show()
frame.Bind(wx.EVT_LEFT_DOWN, lambda e:wx.CallAfter(vibrate, frame))
app.SetTopWindow(frame)
app.MainLoop()
</snippet></ROW><ROW><id>3393759</id><snippet>import threading

def printit():
  threading.Timer(5.0, printit).start()
  print "Hello, World!"

printit()

# continue with the rest of your code
</snippet></ROW><ROW><id>3393962</id><snippet>url(r'^(?P&lt;username&gt;[\w-]+)/(?P&lt;cardId&gt;\d+)/?$', 'singleCard.views.singleCard', name='singleCardView'),
</snippet></ROW><ROW><id>3394821</id><snippet>li = iter(object_list)

obj = next(li)

do_first_thing_with(obj)

while True:
    try:
        do_something_with(obj)
        obj = next(li)
    except StopIteration:
        do_final_thing_with(obj)
        break
</snippet></ROW><ROW><id>3394867</id><snippet>Print the first 100 odd numbers
Determine the factors of a number entered  by the user
Play a number guessing game (User enters a guess, you print YES or Higher or Lower)
</snippet></ROW><ROW><id>3394898</id><snippet>*</snippet></ROW><ROW><id>3394898</id><snippet>**</snippet></ROW><ROW><id>3394898</id><snippet>*args</snippet></ROW><ROW><id>3394898</id><snippet>**kwargs</snippet></ROW><ROW><id>3394898</id><snippet>*args</snippet></ROW><ROW><id>3394898</id><snippet>&gt;&gt;&gt; def print_everything(*args):
        for count, thing in enumerate(args):
...         print '{0}. {1}'.format(count, thing)
...
&gt;&gt;&gt; print_everything('apple', 'banana', 'cabbage')
0. apple
1. banana
2. cabbage
</snippet></ROW><ROW><id>3394898</id><snippet>**kwargs</snippet></ROW><ROW><id>3394898</id><snippet>&gt;&gt;&gt; def table_things(**kwargs):
...     for name, value in kwargs.items():
...         print '{0} = {1}'.format(name, value)
...
&gt;&gt;&gt; table_things(apple = 'fruit', cabbage = 'vegetable')
cabbage = vegetable
apple = fruit
</snippet></ROW><ROW><id>3394898</id><snippet>*args</snippet></ROW><ROW><id>3394898</id><snippet>*kwargs</snippet></ROW><ROW><id>3394898</id><snippet>def table_things(titlestring, **kwargs)
</snippet></ROW><ROW><id>3394898</id><snippet>*args</snippet></ROW><ROW><id>3394898</id><snippet>**kwargs</snippet></ROW><ROW><id>3394898</id><snippet>*</snippet></ROW><ROW><id>3394898</id><snippet>**</snippet></ROW><ROW><id>3394898</id><snippet>&gt;&gt;&gt; def print_three_things(a, b, c):
...     print 'a = {0}, b = {1}, c = {2}'.format(a,b,c)
...
&gt;&gt;&gt; mylist = ['aardvark', 'baboon', 'cat']
&gt;&gt;&gt; print_three_things(*mylist)
a = aardvark, b = baboon, c = cat
</snippet></ROW><ROW><id>3394898</id><snippet>*</snippet></ROW><ROW><id>3394965</id><snippet>import sys
from EasyDialogs import ProgressBar
from urllib import urlretrieve

def download(url, filename):
    bar = ProgressBar(title='Downloading...', label=url)

    def report(block_count, block_size, total_size):
        if block_count == 0:
            bar.set(0, total_size)
        bar.inc(block_size)

    urlretrieve(url, filename, reporthook=report)

if __name__ == '__main__':
    url = sys.argv[1]
    filename = sys.argv[2]
    download(url, filename)
</snippet></ROW><ROW><id>3394977</id><snippet>import wx

class F(wx.Frame):
    def __init__(self, *args, **kw):
        wx.Frame.__init__(self, None)
        style = wx.TE_MULTILINE|wx.BORDER_SUNKEN|wx.TE_READONLY|wx.TE_RICH2
        self.status_area = wx.TextCtrl(self, -1,
                                       pos=(10, 270),style=style,
                                       size=(380,150))
        self.status_area.AppendText("blahblahhblah")
        fg = wx.Colour(200,80,100)
        at = wx.TextAttr(fg)
        self.status_area.SetStyle(3, 5, at)

app = wx.PySimpleApp()
f = F()
f.Show()
app.MainLoop()
</snippet></ROW><ROW><id>3395185</id><snippet>format</snippet></ROW><ROW><id>3395185</id><snippet>%</snippet></ROW><ROW><id>3395185</id><snippet>'{0} in {1}'.format(unicode(self.author,'utf-8'),  unicode(self.publication,'utf-8'))
</snippet></ROW><ROW><id>3395185</id><snippet>%</snippet></ROW><ROW><id>3395446</id><snippet>mod_wsgi</snippet></ROW><ROW><id>3395446</id><snippet>subprocess</snippet></ROW><ROW><id>3395546</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>3395546</id><snippet>objects= SomeModel.objects
if request.GET ... has categories ...
    objects = objects.filter( ... categories ... )
if request.GET ... has tags ...
    objects = objects.filter( ... tags ... )
if request.GET ... has search ...
    objects = objects.filter( something__contains( search ) )
return render_to_response( ... etc. ... )
</snippet></ROW><ROW><id>3395546</id><snippet>for k in range(1024):
    name = 'category_option_{0}'.format(k)
    # Use request.POST.get(name,None) to build a `Q` object
</snippet></ROW><ROW><id>3396090</id><snippet>Books</snippet></ROW><ROW><id>3396090</id><snippet>Sections</snippet></ROW><ROW><id>3396090</id><snippet>books_set</snippet></ROW><ROW><id>3396090</id><snippet>.filter()</snippet></ROW><ROW><id>3396090</id><snippet>.get()</snippet></ROW><ROW><id>3396090</id><snippet>.count()</snippet></ROW><ROW><id>3396090</id><snippet>{{ sec.books_set.count }}
</snippet></ROW><ROW><id>3396090</id><snippet>Book</snippet></ROW><ROW><id>3396090</id><snippet>Books</snippet></ROW><ROW><id>3396313</id><snippet>&gt;&gt;&gt; def abc():
...     letters = ['a','b','c']
...     for letter in letters:
...         print letter
...         yield letter
...
&gt;&gt;&gt; numbered = enumerate(abc())
&gt;&gt;&gt; for i, word in numbered:
...     print i, word
...
a
0 a
b
1 b
c
2 c
</snippet></ROW><ROW><id>3396870</id><snippet>table = Table(data, colWidths=270, rowHeights=79)
</snippet></ROW><ROW><id>3396870</id><snippet>def print_pdf(modeladmin, request, queryset):
    response = HttpResponse(mimetype='application/pdf')
    response['Content-Disposition'] = 'attachment; filename=somefilename.pdf'

    elements = []

    doc = SimpleDocTemplate(response, rightMargin=0, leftMargin=6.5 * cm, topMargin=0.3 * cm, bottomMargin=0)

    data=[(1,2),(3,4)]
    table = Table(data, colWidths=270, rowHeights=79)
    elements.append(table)
    doc.build(elements) 
    return response
</snippet></ROW><ROW><id>3396951</id><snippet>if __name__ == "__main__":
  process_file(sys.argv[1])
</snippet></ROW><ROW><id>3396951</id><snippet>process_file</snippet></ROW><ROW><id>3396951</id><snippet>process_file</snippet></ROW><ROW><id>3396951</id><snippet>if</snippet></ROW><ROW><id>3396951</id><snippet>def</snippet></ROW><ROW><id>3397586</id><snippet>commit_on_success</snippet></ROW><ROW><id>3397586</id><snippet>commit_on_success</snippet></ROW><ROW><id>3397586</id><snippet>from django.db.transaction import commit_on_success

@commit_on_success
def lot_of_saves(queryset):
    for item in queryset:
        modify_item(item)
        item.save()
</snippet></ROW><ROW><id>3397586</id><snippet>commit_manually</snippet></ROW><ROW><id>3397586</id><snippet>transaction.commit()</snippet></ROW><ROW><id>3397607</id><snippet>name_level_1_translated = util.translate("iw", "en", name_level_1.encode('utf-8'))
print name_level_1_translated

name_level_2_translated = util.translate("iw", "en", name_level_2.encode('utf-8'))
do_stuff(name_level_2_translated)
</snippet></ROW><ROW><id>3397607</id><snippet>names = [name_level_1, name_level_2, name_level_3, name_level_4]
translated_names = [util.translate("iw", "en", name.encode('utf-8')) for name in names]
for name in translated_names:
    print name
</snippet></ROW><ROW><id>3397607</id><snippet>print names[0]
</snippet></ROW><ROW><id>3397999</id><snippet>grep --files-without-match</snippet></ROW><ROW><id>3398009</id><snippet>row[0:13]</snippet></ROW><ROW><id>3398009</id><snippet>c1</snippet></ROW><ROW><id>3398009</id><snippet>IndexError: list index out of range</snippet></ROW><ROW><id>3398009</id><snippet>row.append(float(row[13])/100)</snippet></ROW><ROW><id>3398009</id><snippet>row[13]</snippet></ROW><ROW><id>3398026</id><snippet>foo</snippet></ROW><ROW><id>3398026</id><snippet>class FunkyCmpFoo( foo ):
    def __cmp__( self, other ):
        return -1
</snippet></ROW><ROW><id>3398026</id><snippet>foo</snippet></ROW><ROW><id>3398026</id><snippet>FunkyCmpFoo</snippet></ROW><ROW><id>3398026</id><snippet>foo</snippet></ROW><ROW><id>3398026</id><snippet>foo</snippet></ROW><ROW><id>3398026</id><snippet>funcType = type( foo.__cmp__ )
# Alternatively:
import new
cmp2 = new.instancemethod( func, a, foo )

a.__cmp__ = funcType( cmp2, a, foo )
b.__cmp__ = funcType( cmp2, b, foo )
</snippet></ROW><ROW><id>3398026</id><snippet>sys.maxint</snippet></ROW><ROW><id>3398256</id><snippet>import numpy
numpy.histogram( [ &lt;data&gt; ], [ &lt;bins&gt; ] )
</snippet></ROW><ROW><id>3398256</id><snippet>numpy.histogram(a, bins=10, range=None, normed=False, weights=None)
</snippet></ROW><ROW><id>3398256</id><snippet>a</snippet></ROW><ROW><id>3398256</id><snippet>bins</snippet></ROW><ROW><id>3398256</id><snippet>range</snippet></ROW><ROW><id>3398256</id><snippet>normed</snippet></ROW><ROW><id>3398256</id><snippet>weights</snippet></ROW><ROW><id>3398256</id><snippet>hist</snippet></ROW><ROW><id>3398256</id><snippet>bin_edges</snippet></ROW><ROW><id>3398264</id><snippet>named pipes</snippet></ROW><ROW><id>3398433</id><snippet>int</snippet></ROW><ROW><id>3398433</id><snippet>&gt;&gt;&gt; a = 123.456
&gt;&gt;&gt; int(a)
123
&gt;&gt;&gt; a = 0.9999
&gt;&gt;&gt; int(a)
0
&gt;&gt;&gt; int(-1.5)
-1
</snippet></ROW><ROW><id>3398433</id><snippet>int</snippet></ROW><ROW><id>3398433</id><snippet>math.floor</snippet></ROW><ROW><id>3398433</id><snippet>math.floor</snippet></ROW><ROW><id>3398546</id><snippet>comma_separated_float_list_re = re.compile('^([-+]?\d*\.?\d+[,\s]*)+$')
validate_comma_separated_float_list = RegexValidator(
              comma_separated_float_list_re, 
              _(u'Enter only floats separated by commas.'), 'invalid')

class CommaSeparatedFloatField(CharField):
    default_validators = [validators.validate_comma_separated_float_list]
    description = _("Comma-separated floats")

    def formfield(self, **kwargs):
        defaults = {
            'error_messages': {
                'invalid': _(u'Enter only floats separated by commas.'),
            }
        }
        defaults.update(kwargs)
        return super(CommaSeparatedFloatField, self).formfield(**defaults)
</snippet></ROW><ROW><id>3398649</id><snippet>key</snippet></ROW><ROW><id>3398649</id><snippet>sort</snippet></ROW><ROW><id>3398649</id><snippet>lambda</snippet></ROW><ROW><id>3398649</id><snippet>c2.sort(key = lambda row: row[2])
</snippet></ROW><ROW><id>3398649</id><snippet>lambda</snippet></ROW><ROW><id>3398649</id><snippet>lambda</snippet></ROW><ROW><id>3398649</id><snippet>def sort_key(row):
    return row[2]

c2.sort(key = sort_key)
</snippet></ROW><ROW><id>3398649</id><snippet>key</snippet></ROW><ROW><id>3398649</id><snippet>c2.sort(key = lambda row: (row[2],row[1]))
</snippet></ROW><ROW><id>3398649</id><snippet>c2.sort(key = lambda row: (row[2],row[1],row[0]))
</snippet></ROW><ROW><id>3398895</id><snippet>prev = None
for row in c1:
  if prev is not None and prev != row[0]:
     # there is a change
  prev = row[0]
</snippet></ROW><ROW><id>3398895</id><snippet>if</snippet></ROW><ROW><id>3398895</id><snippet>if prev is None or prev != row[0]:
</snippet></ROW><ROW><id>3398908</id><snippet>IN_CLOSE_WRITE</snippet></ROW><ROW><id>3398909</id><snippet>session = rdb.Session()
result = session.query(Channel).join(Channel.items).values(Channel.title, Item.title)
</snippet></ROW><ROW><id>3398909</id><snippet>(Channel.title, Item.title)</snippet></ROW><ROW><id>3398909</id><snippet>[('channel1', 'item1'), ('channel1', 'item2')]</snippet></ROW><ROW><id>3398909</id><snippet>from sqlalchemy.orm import eagerload
channels = session.query(Channel).options(eagerload('items')).all()
channels[0].items[0].title
</snippet></ROW><ROW><id>3399375</id><snippet>tokenize.TokenError</snippet></ROW><ROW><id>3399375</id><snippet>Exception</snippet></ROW><ROW><id>3399375</id><snippet>try...except</snippet></ROW><ROW><id>3399375</id><snippet>pass</snippet></ROW><ROW><id>3399375</id><snippet>except</snippet></ROW><ROW><id>3399375</id><snippet>import tokenize
try:
    strList = list(token[STRING] for token in tokenize.generate_tokens(StringIO(line).readline) if token[STRING])
except tokenize.TokenError:
    pass
</snippet></ROW><ROW><id>3399414</id><snippet>subprocess.call</snippet></ROW><ROW><id>3399414</id><snippet>call</snippet></ROW><ROW><id>3399414</id><snippet>returncode</snippet></ROW><ROW><id>3399414</id><snippet>pids</snippet></ROW><ROW><id>3399414</id><snippet>9</snippet></ROW><ROW><id>3399414</id><snippet>-9</snippet></ROW><ROW><id>3399414</id><snippet>-9</snippet></ROW><ROW><id>3399414</id><snippet>-9</snippet></ROW><ROW><id>3399414</id><snippet>threading</snippet></ROW><ROW><id>3399414</id><snippet>multiprocessing</snippet></ROW><ROW><id>3399414</id><snippet>suprocess.Process</snippet></ROW><ROW><id>3399414</id><snippet>.pid</snippet></ROW><ROW><id>3399414</id><snippet>import subprocess, threading, signal
import sys, time

pobs = set()
pobslock = threading.Lock()
def numpobs():
    with pobslock:
        return len(pobs)

def sigterm_handler(signal, frame):
    print 'You killed me!'
    with pobslock:
        for p in pobs: p.kill()
    sys.exit(0)

def sigint_handler(signal, frame):
    print 'You pressed Ctrl+C!'
    sys.exit(0)

signal.signal(signal.SIGINT, sigint_handler)
signal.signal(signal.SIGTERM, sigterm_handler)

def f_wrapper(d, p):
    print d, 'start', p.pid
    rc = p.wait()
    with pobslock:
        pobs.remove(p)
    print d, 'done, rc =', rc

print "Starting to run things."

for i in range(5):
    p = subprocess.Popen(['sleep', '100'])
    with pobslock:
        pobs.add(p)
    t = threading.Thread(target=f_wrapper, args=(i, p))
    t.daemon=True
    t.start()

print "Got things running ..."

while numpobs():
    print "Still working ..."
    time.sleep(1)
</snippet></ROW><ROW><id>3399529</id><snippet>a2</snippet></ROW><ROW><id>3399529</id><snippet>file.write("Multiple of 1000!\r\n" * (a2 % 1000 == 0).sum())
</snippet></ROW><ROW><id>3399529</id><snippet>file.write("Multiple of 1000!\r\n" * sum(filter(lambda i: i % 1000 == 0, a2)))
</snippet></ROW><ROW><id>3399529</id><snippet>file.write("Multiple of 1000!\r\n" * sum(1 for i in a2 if i % 1000 == 0))
</snippet></ROW><ROW><id>3399703</id><snippet>np.linspace(0,6,num=61)</snippet></ROW><ROW><id>3399703</id><snippet>np.arange(0,6.1,0.1)</snippet></ROW><ROW><id>3399703</id><snippet>import numpy as np
a=np.random.random(100)*6
hist=np.histogram(a,bins=np.linspace(0,6,num=61))
</snippet></ROW><ROW><id>3399865</id><snippet>numpy.histogram([1,3,2,3,1,1,1,1,2,3,2,5,6,6],bins=numpy.arange(0,8,1))
</snippet></ROW><ROW><id>3399908</id><snippet>array</snippet></ROW><ROW><id>3399908</id><snippet>numpy.array</snippet></ROW><ROW><id>3399908</id><snippet>myarray = array([0, 5, 3, 3, 0, 1, 2])
mylist = list(myarray)
</snippet></ROW><ROW><id>3400049</id><snippet>target:
  ( cd $DIR; $MAKE auto; )
</snippet></ROW><ROW><id>3400049</id><snippet>$DIR</snippet></ROW><ROW><id>3400049</id><snippet>$D</snippet></ROW><ROW><id>3400049</id><snippet>D</snippet></ROW><ROW><id>3400049</id><snippet>$MAKE</snippet></ROW><ROW><id>3400049</id><snippet>auto:
  @echo this is makefile \#1 making $@ in $(PWD)
</snippet></ROW><ROW><id>3400049</id><snippet>target</snippet></ROW><ROW><id>3400049</id><snippet>make[1]: Entering directory 'path-to-one'
this is makefile #1 making auto in path-to-one
make[1]: Leaving directory 'path-to-one'
</snippet></ROW><ROW><id>3400049</id><snippet>DIR</snippet></ROW><ROW><id>3400115</id><snippet>Literal('alpha') &amp; 'beta' &amp; 'gamma'
</snippet></ROW><ROW><id>3400115</id><snippet>Optional('alpha') &amp; Optional('beta') &amp; Optional('gamma')
</snippet></ROW><ROW><id>3400115</id><snippet>delimitedList(oneOf("alpha beta gamma"), '|')
</snippet></ROW><ROW><id>3400115</id><snippet>itemlist = delimitedList(oneOf("alpha beta gamma"), '|')
def ensureNoDuplicates(tokens):
    if len(set(tokens)) != len(tokens):
        raise ParseException("duplicate list entries found")
itemlist.setParseAction(ensureNoDuplicates)
</snippet></ROW><ROW><id>3400320</id><snippet>a = {"a": u"çö"}
b = "çö"
b.decode('utf-8') == a['a']
</snippet></ROW><ROW><id>3400320</id><snippet>.decode('utf-8')</snippet></ROW><ROW><id>3400320</id><snippet>a = {"a": "çö"}
b = "çö"
b.decode('utf-8') == a['a'].decode('utf-8')
</snippet></ROW><ROW><id>3400320</id><snippet>a = {"a": u"çö"}
b = u"çö"
b == a['a']
</snippet></ROW><ROW><id>3400320</id><snippet>b.decode('utf-8') == u'çö'</snippet></ROW><ROW><id>3400320</id><snippet>a['a'] == 'çö'</snippet></ROW><ROW><id>3400320</id><snippet>u'çö' == 'çö'
</snippet></ROW><ROW><id>3400320</id><snippet>unicode</snippet></ROW><ROW><id>3400320</id><snippet>str</snippet></ROW><ROW><id>3400320</id><snippet>str</snippet></ROW><ROW><id>3400320</id><snippet>unicode</snippet></ROW><ROW><id>3400320</id><snippet>unicode</snippet></ROW><ROW><id>3400320</id><snippet>u'a' == 'a'</snippet></ROW><ROW><id>3400320</id><snippet>unicode('a') == u'a'</snippet></ROW><ROW><id>3400320</id><snippet>u'çö' == 'çö'</snippet></ROW><ROW><id>3400320</id><snippet>unicode('çö')</snippet></ROW><ROW><id>3400399</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>3400401</id><snippet>from django.db.models import Q

query = 'fun'
books = Fun.objects.filter(Q(categories__id__in=[1,2,3]),
                     Q(name__icontains=query) | \
                     Q(description__icontains=query) | \
                     Q(keywords__title__icontains=query))
</snippet></ROW><ROW><id>3400597</id><snippet>def define_var_hdr(size):
   class Var(Structure):
       fields = [("size", c_int),
                 ("Array", c_ubyte * size)]

   return Var

var_class_10 = define_var_hdr(10)
var_class_20 = define_var_hdr(20)
var_instance_10 = var_class_10()
var_instance_20 = var_class_20()
</snippet></ROW><ROW><id>3400652</id><snippet>file2</snippet></ROW><ROW><id>3400652</id><snippet>file1.py</snippet></ROW><ROW><id>3400652</id><snippet>file2</snippet></ROW><ROW><id>3400652</id><snippet>file1</snippet></ROW><ROW><id>3400652</id><snippet>SomeClass</snippet></ROW><ROW><id>3400652</id><snippet>file2</snippet></ROW><ROW><id>3400652</id><snippet>file1</snippet></ROW><ROW><id>3400652</id><snippet>file2</snippet></ROW><ROW><id>3400652</id><snippet>file1</snippet></ROW><ROW><id>3400652</id><snippet>import file2</snippet></ROW><ROW><id>3400652</id><snippet>from ... import *</snippet></ROW><ROW><id>3400652</id><snippet>file1</snippet></ROW><ROW><id>3400652</id><snippet>file2</snippet></ROW><ROW><id>3400652</id><snippet>file3.py</snippet></ROW><ROW><id>3400652</id><snippet>import file3</snippet></ROW><ROW><id>3400652</id><snippet>file1</snippet></ROW><ROW><id>3400652</id><snippet>file2</snippet></ROW><ROW><id>3400652</id><snippet>file3.foo</snippet></ROW><ROW><id>3400756</id><snippet>local</snippet></ROW><ROW><id>3400756</id><snippet>mysub() = 5;</snippet></ROW><ROW><id>3400756</id><snippet>wantarray</snippet></ROW><ROW><id>3400756</id><snippet>eval</snippet></ROW><ROW><id>3400970</id><snippet>print "%.1f" % number
</snippet></ROW><ROW><id>3400970</id><snippet>round(number,1)
</snippet></ROW><ROW><id>3400970</id><snippet>math.floor(number*10)/10
</snippet></ROW><ROW><id>3401073</id><snippet>pipe_verbose = sys.stdout
pipe_silent  = open('/dev/null', 'w')

subprocess.Popen(shlex.split(command), stdout=pipe_silent)
subprocess.Popen(shlex.split(command), stdout=pipe_verbose)
</snippet></ROW><ROW><id>3401140</id><snippet>var = something</snippet></ROW><ROW><id>3401140</id><snippet>pull_args</snippet></ROW><ROW><id>3401140</id><snippet>def pull_args(request, *args):
    pulled = {}
    try:
        for a in args:
            pulled[a] = request[a]
    except AttributeError:
        logging.error("some arg was missing in " + self.request.path)
        exit()
    else:
        caller = inspect.stack()[1][0]
        caller.f_locals.update(pulled)
</snippet></ROW><ROW><id>3401147</id><snippet>int(s)</snippet></ROW><ROW><id>3401147</id><snippet>sorted(dict.keys(), key=int)</snippet></ROW><ROW><id>3401177</id><snippet>shell.SendKeys("^a")
shell.SendKeys("{DELETE}")
</snippet></ROW><ROW><id>3401235</id><snippet>return 'break'</snippet></ROW><ROW><id>3401369</id><snippet>str.join</snippet></ROW><ROW><id>3401369</id><snippet>','.join(results_histogram)
</snippet></ROW><ROW><id>3401369</id><snippet>TypeError: sequence item 0: expected string, int found</snippet></ROW><ROW><id>3401369</id><snippet>','.join(map(str, results_histogram))
</snippet></ROW><ROW><id>3401369</id><snippet>str.join</snippet></ROW><ROW><id>3401369</id><snippet>&gt;&gt;&gt; x = [1,2,3]
&gt;&gt;&gt; for i in range(len(x)):
...   if i != len(x) - 1:
...     print str(x[i]) + ',',
... 
1, 2,
</snippet></ROW><ROW><id>3401369</id><snippet>for i in range(len(results_histogram)):
    url += str(results_histogram[i])
    if i!=len(results_histogram)-1:
      url += ','
</snippet></ROW><ROW><id>3401369</id><snippet>str.join</snippet></ROW><ROW><id>3401509</id><snippet>html = template.render(context)

response = HttpResponse()
response['Content-Type'] ='application/pdf'
response['Content-Disposition']='attachment; filename=%s.pdf'%(filename)

pisa.CreatePDF(
    src=html,
    dest=response,
    show_error_as_pdf=True)

#response.flush()
return response
</snippet></ROW><ROW><id>3401545</id><snippet>url=('http://chart.apis.google.com/chart?chxl=1:|0|10|100|1,000|10,000|'
     '100,000|1,000,000&amp;chxp=1,0&amp;chxr=0,0,%(max_freq)s300|1,0,3&amp;chxs=0,676767'
     ',13.5,0,l,676767|1,676767,13.5,0,l,676767&amp;chxt=y,x&amp;chbh=a,1,0&amp;chs=640x465'
     '&amp;cht=bvs&amp;chco=A2C180&amp;chds=0,300&amp;chd=t:'%{'max_freq': max(freq)})
</snippet></ROW><ROW><id>3401545</id><snippet>+</snippet></ROW><ROW><id>3401545</id><snippet>%(max_freq)s</snippet></ROW><ROW><id>3401545</id><snippet>dict</snippet></ROW><ROW><id>3401545</id><snippet>urllib.urlencode()</snippet></ROW><ROW><id>3401564</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; dtnow = datetime.datetime.now();dtutcnow = datetime.datetime.utcnow()
&gt;&gt;&gt; dtnow
datetime.datetime(2010, 8, 4, 9, 33, 9, 890000)
&gt;&gt;&gt; dtutcnow
datetime.datetime(2010, 8, 3, 23, 33, 9, 890000)
&gt;&gt;&gt; delta = dtnow - dtutcnow
&gt;&gt;&gt; delta
datetime.timedelta(0, 36000)
&gt;&gt;&gt; hh,mm = divmod((delta.days * 24*60*60 + delta.seconds + 30) // 60, 60)
&gt;&gt;&gt; hh,mm
(10, 0)
&gt;&gt;&gt; "%s%+02d:%02d" % (dtnow.isoformat(), hh, mm)
'2010-08-04T09:33:09.890000+10:00'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3401638</id><snippet>class Foo(object):
  @some_decorator
  def bar(self, *args, **kwargs):
    # etc etc
</snippet></ROW><ROW><id>3401638</id><snippet>some_decorator</snippet></ROW><ROW><id>3401638</id><snippet>self</snippet></ROW><ROW><id>3401638</id><snippet>listen</snippet></ROW><ROW><id>3401638</id><snippet>class Foo(object):
  def __init__(self, *args, **kwargs):
    self.some_method = self.some_method # SEE BELOW FOR EXPLANATION
    # etc etc
  @listen
  def some_method(self, *args, **kwargs):
    # etc etc
</snippet></ROW><ROW><id>3401638</id><snippet>listen.__get__</snippet></ROW><ROW><id>3401638</id><snippet>f.some_method</snippet></ROW><ROW><id>3401638</id><snippet>f</snippet></ROW><ROW><id>3401638</id><snippet>listen</snippet></ROW><ROW><id>3401638</id><snippet>listen</snippet></ROW><ROW><id>3401638</id><snippet>listen.__get__</snippet></ROW><ROW><id>3401638</id><snippet>_self</snippet></ROW><ROW><id>3401638</id><snippet>self.some_method</snippet></ROW><ROW><id>3401638</id><snippet>__init__</snippet></ROW><ROW><id>3401638</id><snippet>listen.__get__</snippet></ROW><ROW><id>3401638</id><snippet>_self</snippet></ROW><ROW><id>3401638</id><snippet>Foo</snippet></ROW><ROW><id>3401638</id><snippet>_self</snippet></ROW><ROW><id>3401638</id><snippet>listen</snippet></ROW><ROW><id>3401638</id><snippet>Foo</snippet></ROW><ROW><id>3401638</id><snippet>Foo</snippet></ROW><ROW><id>3402193</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3402193</id><snippet>.profile</snippet></ROW><ROW><id>3402193</id><snippet>superuser.com</snippet></ROW><ROW><id>3402381</id><snippet>Program.RunGUI()</snippet></ROW><ROW><id>3402381</id><snippet>public static void RunGUI(EventHandler onLoad)
{   
    ...

    window = new MainWindow();
    window.Load += onLoad;
    Application.Run(window);
    window.Load -= onLoad; //removes handler in case RunGUI() is called again
}
</snippet></ROW><ROW><id>3402381</id><snippet>def onload(sender, args):
    time.sleep(2)
    Program.SetState(state)
    raw_input()  

def main():
    ...
    Program.RunGUI(onload)
</snippet></ROW><ROW><id>3402384</id><snippet>import itertools as it

newdic = {}
for v, grp in it.groupby(sorted((v, k) for k, v in dic.items)):
  newdic[min(k for _, k in grp)] = v
</snippet></ROW><ROW><id>3402384</id><snippet>min</snippet></ROW><ROW><id>3402384</id><snippet>key=</snippet></ROW><ROW><id>3402384</id><snippet>min</snippet></ROW><ROW><id>3402518</id><snippet>url</snippet></ROW><ROW><id>3402518</id><snippet>from django.conf.urls.defaults import url, patterns

urlpatterns = patterns('app.blog.views',
    url(r'^rss/(?P&lt;blog_name&gt;[A-Za-z0-9]+)/$', LatestPosts(), name='latest-posts'),
    #snip...
)
</snippet></ROW><ROW><id>3402518</id><snippet>{% url latest-posts blog_name="myblog" %}</snippet></ROW><ROW><id>3402717</id><snippet>10</snippet></ROW><ROW><id>3402717</id><snippet>11</snippet></ROW><ROW><id>3402717</id><snippet>j=j+1</snippet></ROW><ROW><id>3402717</id><snippet>j</snippet></ROW><ROW><id>3402717</id><snippet>11</snippet></ROW><ROW><id>3402717</id><snippet>k</snippet></ROW><ROW><id>3402717</id><snippet>11</snippet></ROW><ROW><id>3402717</id><snippet>&gt;&gt;&gt; j=10
&gt;&gt;&gt; id(j)
8402204
&gt;&gt;&gt; j=j+1
&gt;&gt;&gt; id(j)
8402192
&gt;&gt;&gt; k=11
&gt;&gt;&gt; id(k)
8402192
</snippet></ROW><ROW><id>3402717</id><snippet>&gt;&gt;&gt; x = 123456789
&gt;&gt;&gt; id(x)
8404568
&gt;&gt;&gt; y = 123456789
&gt;&gt;&gt; id(y)
8404604
</snippet></ROW><ROW><id>3402778</id><snippet>urlpatterns = patterns('django.views.generic.simple',
    (r'(.+\.html)$', 'direct_to_template'),
    # ...
)
</snippet></ROW><ROW><id>3403067</id><snippet>all</snippet></ROW><ROW><id>3403067</id><snippet>all</snippet></ROW><ROW><id>3403067</id><snippet>matches = []
for word in wordlist:
    testset = set(letters)
    if all(c in testset for c in word):
        matches.append(word)
</snippet></ROW><ROW><id>3403067</id><snippet>set.remove(item)</snippet></ROW><ROW><id>3403067</id><snippet>False</snippet></ROW><ROW><id>3403067</id><snippet>all</snippet></ROW><ROW><id>3403067</id><snippet>all(c in testset and "remove c from testset" for c in word)
</snippet></ROW><ROW><id>3403067</id><snippet>all(c in testset and not testset.remove(c) for c in word)
</snippet></ROW><ROW><id>3403067</id><snippet>all</snippet></ROW><ROW><id>3403067</id><snippet>for word in wordlist:
    testset = set(letters)
    if all(c in testset and not testset.remove(c) for c in word):
        matches.append(word)
</snippet></ROW><ROW><id>3403067</id><snippet>len</snippet></ROW><ROW><id>3403067</id><snippet>len</snippet></ROW><ROW><id>3403067</id><snippet>-1 * len</snippet></ROW><ROW><id>3403067</id><snippet>matches.sort(key=lambda wd: -len(wd))
</snippet></ROW><ROW><id>3403327</id><snippet>    static void Main(string[] args)
    {
        const string script = @"
class A(object) :
    def __init__(self) :
        self.a = 100

class B(object) : 
    def __init__(self, a, v) : 
        self.a = a
        self.v = v
    def run(self) :
        return self.a.a + self.v
";

        var engine = Python.CreateEngine();
        var scope = engine.CreateScope();
        engine.Execute(script, scope);

        var typeA = scope.GetVariable("A");
        var typeB = scope.GetVariable("B");
        var a = engine.Operations.CreateInstance(typeA); 
        var b = engine.Operations.CreateInstance(typeB, a, 20);
        Console.WriteLine(b.run()); // 120
    }
</snippet></ROW><ROW><id>3403327</id><snippet>    class Program
    {
        static void Main(string[] args)
        {
            var engine = Python.CreateEngine();
            var scriptScope = engine.CreateScope();

            var foo = new Foo(engine);

            scriptScope.SetVariable("Foo", foo);
            const string script = @"
class MyClass(object):
    def __init__(self):
        print ""this should be called""

Foo.Create(MyClass)
";
            var v = engine.Execute(script, scriptScope);
        }
    }

public  class Foo
{
    private readonly ScriptEngine engine;

    public Foo(ScriptEngine engine)
    {
        this.engine = engine;
    }

    public  object Create(object t)
    {
        return engine.Operations.CreateInstance(t);
    }
}
</snippet></ROW><ROW><id>3403990</id><snippet>==</snippet></ROW><ROW><id>3403990</id><snippet>is</snippet></ROW><ROW><id>3403990</id><snippet>==</snippet></ROW><ROW><id>3403990</id><snippet>is</snippet></ROW><ROW><id>3403990</id><snippet>is</snippet></ROW><ROW><id>3403990</id><snippet>==</snippet></ROW><ROW><id>3404089</id><snippet>from numpy import copy

newArray = copy(theArray)
for k, v in d.iteritems(): newArray[theArray==k] = v
</snippet></ROW><ROW><id>3404089</id><snippet>#!/usr/bin/env python2.7

from numpy import copy, random, arange

random.seed(0)
data = random.randint(30, size=10**5)

d = {4: 0, 9: 5, 14: 10, 19: 15, 20: 0, 21: 1, 22: 2, 23: 3, 24: 0}
dk = d.keys()
dv = d.values()

def f1(a, d):
    b = copy(a)
    for k, v in d.iteritems():
        b[a==k] = v
    return b

def f2(a, d):
    for i in xrange(len(a)):
        a[i] = d.get(a[i], a[i])
    return a

def f3(a, dk, dv):
    mp = arange(0, max(a)+1)
    mp[dk] = dv
    return mp[a]


a = copy(data)
res = f2(a, d)

assert (f1(data, d) == res).all()
assert (f3(data, dk, dv) == res).all()
</snippet></ROW><ROW><id>3404089</id><snippet>$ python2.7 -m timeit -s 'from w import f1,f3,data,d,dk,dv' 'f1(data,d)'
100 loops, best of 3: 6.15 msec per loop

$ python2.7 -m timeit -s 'from w import f1,f3,data,d,dk,dv' 'f3(data,dk,dv)'
100 loops, best of 3: 19.6 msec per loop
</snippet></ROW><ROW><id>3404197</id><snippet>field</snippet></ROW><ROW><id>3404197</id><snippet>field</snippet></ROW><ROW><id>3404197</id><snippet>fieldname</snippet></ROW><ROW><id>3404197</id><snippet>for fieldname in allowed_fields:
    setattr(obj, fieldname, getattr(individual, fieldname))
</snippet></ROW><ROW><id>3404473</id><snippet>z = 300
mylist = []

while(z &gt; 1):
    z = z - 1
    x,y = divmod(600851475143, z)
    if y==0:
        mylist.append(x)

print(mylist)
</snippet></ROW><ROW><id>3404631</id><snippet>INSERT OR REPLACE INTO table VALUES (...)
</snippet></ROW><ROW><id>3404631</id><snippet>REPLACE INTO table VALUES (...)
</snippet></ROW><ROW><id>3404849</id><snippet>import Tkinter

class App:
    def __init__(self, root):
        self.root = root
        for text in ("link1", "link2", "link3"):
            link = Tkinter.Label(text=text, foreground="#0000ff")
            link.bind("&lt;1&gt;", lambda event, text=text: \
                          self.click_link(event, text))
            link.pack()
    def click_link(self, event, text):
        print "you clicked '%s'" % text

root=Tkinter.Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>3404849</id><snippet>&lt;Enter&gt;</snippet></ROW><ROW><id>3404849</id><snippet>&lt;Leave&gt;</snippet></ROW><ROW><id>3405096</id><snippet>from south.db import db
from south.v2 import SchemaMigration

class Migration(SchemaMigration):
    def forwards(self, orm):
        db.execute('alter table appname_modelname charset=utf8')
        db.execute('alter table appname_modelname alter column fieldname charset=utf8')
        # et cetera for any other char or text columns

    def backwards(self, orm):
        db.execute('alter table appname_modelname charset=latin1')
        db.execute('alter table appname_modelname alter column fieldname charset=latin1')
        # et cetera for any other char or text columns

    complete_apps = ['appname']
</snippet></ROW><ROW><id>3405143</id><snippet>class D(dict):
    def __missing__(self, key):
        self[key]=D()
        return self[key]

d=D()
d['a']['b']['c']=3
</snippet></ROW><ROW><id>3405479</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>3405479</id><snippet>pythonw.exe</snippet></ROW><ROW><id>3405479</id><snippet>os.fork()</snippet></ROW><ROW><id>3405479</id><snippet>from multiprocessing import Process
import sys

def func(x):
    print 'works ', x + 2
    sys.stdout.flush()

if __name__ == '__main__':
    p = Process(target= func, args= (2, ))
    p.start()
    p.join()
    p.terminate()
    print 'done'
    sys.stdout.flush()
</snippet></ROW><ROW><id>3405772</id><snippet>def delete_keys_from_dict(dict_del, lst_keys):
    for k in lst_keys:
        try:
            del dict_del[k]
        except KeyError:
            pass
    for v in dict_del.values():
        if isinstance(v, dict):
            delete_keys_from_dict(v, lst_keys)

    return dict_del
</snippet></ROW><ROW><id>3405787</id><snippet>from lxml import etree

class SkipStartEndTarget:
    def __init__(self, *args, **kwargs):
        self.builder = etree.TreeBuilder()
        self.skip = False

    def start(self, tag, attrib, nsmap=None):
        if tag == 'start':
            self.skip = True
        if not self.skip:
            self.builder.start(tag, attrib, nsmap)

    def data(self, data):
        if not self.skip:
            self.builder.data(data)

    def comment(self, comment):
        if not self.skip:
            self.builder.comment(self)

    def pi(self, target, data):
        if not self.skip:
            self.builder.pi(target, data)

    def end(self, tag):
        if not self.skip:
            self.builder.end(tag)
        if tag == 'end':
            self.skip = False

    def close(self):
        self.skip = False
        return self.builder.close()
</snippet></ROW><ROW><id>3405787</id><snippet>SkipStartEndTarget</snippet></ROW><ROW><id>3405787</id><snippet>parser target</snippet></ROW><ROW><id>3405787</id><snippet>XMLParser</snippet></ROW><ROW><id>3405787</id><snippet>parser = etree.XMLParser(target=SkipStartEndTarget())
</snippet></ROW><ROW><id>3405787</id><snippet>elem = etree.fromstring(xml_str, parser=parser)
</snippet></ROW><ROW><id>3405787</id><snippet>etree.XML()</snippet></ROW><ROW><id>3405787</id><snippet>etree.parse()</snippet></ROW><ROW><id>3405787</id><snippet>etree.setdefaultparser()</snippet></ROW><ROW><id>3405787</id><snippet>etree.parse()</snippet></ROW><ROW><id>3405787</id><snippet>etree.XML()</snippet></ROW><ROW><id>3405787</id><snippet>etree.fromstring()</snippet></ROW><ROW><id>3405787</id><snippet>.docinfo</snippet></ROW><ROW><id>3405787</id><snippet>etree.parse()</snippet></ROW><ROW><id>3405787</id><snippet>&lt;start/&gt;</snippet></ROW><ROW><id>3405787</id><snippet>&lt;end/&gt;</snippet></ROW><ROW><id>3405787</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>3405787</id><snippet>&lt;p2&gt;</snippet></ROW><ROW><id>3405787</id><snippet>&lt;p&gt;....&lt;/p2&gt;</snippet></ROW><ROW><id>3405828</id><snippet>rules = [ rule1, rule2, rule3, rule4, ... ]
rules_generator = ( r( solution ) for f in rules )
return all( rules_generator )
</snippet></ROW><ROW><id>3405828</id><snippet>rules = [ rule1, rule2, rule3, rule4, ... ]
return all( r( solution ) for f in rules )
</snippet></ROW><ROW><id>3405828</id><snippet>.next()</snippet></ROW><ROW><id>3405828</id><snippet>for</snippet></ROW><ROW><id>3405828</id><snippet>range</snippet></ROW><ROW><id>3405828</id><snippet>yield</snippet></ROW><ROW><id>3405828</id><snippet>return</snippet></ROW><ROW><id>3405828</id><snippet>def integers():
    i = 0
    while True:
        yield i
</snippet></ROW><ROW><id>3405854</id><snippet>class PromoNotificationManager(models.Manager):
    def get_for_user(self, user)
        """Retrieve the notifications that are visible to the specified user"""
        # untested, but should be close to what you need
        notifications = super(PromoNotificationManager, self).get_query_set()
        user_filter = Q(groups__in=user.groups.all())
        group_filter = Q(users__in=user.groups.all())
        return notifications.filter(user_filter | group_filter)
</snippet></ROW><ROW><id>3405854</id><snippet>class PromoNotification(models.Model):
    ...
    objects = PromoNotificationManager()
</snippet></ROW><ROW><id>3405854</id><snippet>def some_view(self):
    user_notifications = PromoNotification.objects.get_for_user(request.user)
</snippet></ROW><ROW><id>3406017</id><snippet>multiprocessing</snippet></ROW><ROW><id>3406017</id><snippet>Queue</snippet></ROW><ROW><id>3406017</id><snippet>Pool</snippet></ROW><ROW><id>3406062</id><snippet>KeyError</snippet></ROW><ROW><id>3406062</id><snippet>/foo/bar</snippet></ROW><ROW><id>3406062</id><snippet>http://example.com/foo/bar</snippet></ROW><ROW><id>3406062</id><snippet>http://example.com/</snippet></ROW><ROW><id>3406062</id><snippet>from sys import stdout
from twisted.python.log import startLogging
startLogging(stdout)
</snippet></ROW><ROW><id>3406113</id><snippet>if opt_dict:
    for key, value in opt_dict.items():
        if "nonanswer" in key:
            print "nonanswer", value
        elif "answer" in key:
            print "answer", value
        else:
            raise Exception( "invalid key" )
else:
    print "empty dict"
</snippet></ROW><ROW><id>3406148</id><snippet>cStringIO</snippet></ROW><ROW><id>3406148</id><snippet>mmap</snippet></ROW><ROW><id>3406198</id><snippet>&gt;&gt;&gt; import xml.etree.cElementTree as ET
&gt;&gt;&gt; xmlStr = '''&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;painting&gt;
&lt;img src="madonna.jpg" alt='Foligno Madonna, by Raphael'/&gt;
&lt;caption&gt;This is Raphael's "Foligno" Madonna, painted in
     &lt;date&gt;1511&lt;/date&gt;?&lt;date&gt;1512&lt;/date&gt;.
&lt;/caption&gt;
&lt;/painting&gt;
'''
&gt;&gt;&gt; tree = ET.fromstring(xmlStr)  #use parse or iterparse to read direct from file path
&gt;&gt;&gt; tree.getchildren()
[&lt;Element 'img' at 0x115efc0&gt;, &lt;Element 'caption' at 0x1173090&gt;]
&gt;&gt;&gt; tree.getchildren()[1].text
'This is Raphael\'s "Foligno" Madonna, painted in\n    '
&gt;&gt;&gt; tree.getchildren()[0].get('src')
'madonna.jpg'
</snippet></ROW><ROW><id>3406439</id><snippet>n = set("abc")
print n

m = set("kabc")
m.remove("k")
print m
</snippet></ROW><ROW><id>3406439</id><snippet>set(['a', 'c', 'b'])
set(['a', 'b', 'c'])
</snippet></ROW><ROW><id>3406481</id><snippet>class Article(models.Model)
      title=models.CharField(max_length=32)
      body=models.TextField()

class ApprovalStatus(models.Model):
      name=models.CharField(max_length=32)
      alias=models.CharField(max_length=32,pk=True)

class StatusHistory(models.Model):
      status=models.ForeignKey(ApprovalStatus)
      article=models.ForeignKey(Article)
      current=models.BooleanField(default=True)
</snippet></ROW><ROW><id>3406823</id><snippet>remove</snippet></ROW><ROW><id>3406823</id><snippet>ssh = paramiko.SSHClient()
ssh.load_host_keys(os.path.expanduser(os.path.join("~", ".ssh", "known_hosts")))
ssh.connect(server, username=username, pkey=mykey)
sftp = ssh.open_sftp()

# Updated code below:
filesInRemoteArtifacts = sftp.listdir(path=remoteArtifactPath)
for file in filesInRemoteArtifacts:
    sftp.remove(remoteArtifactPath+file)

# Close to end
sftp.close()
ssh.close()
</snippet></ROW><ROW><id>3406958</id><snippet>for each file in a tree
  if file is below the root
    move it into the root
if nothing went wrong
  delete empty subtrees
</snippet></ROW><ROW><id>3406958</id><snippet>make empty result directory
for every file in the tree
  copy file into new result
on failure abort otherwise
  move result over old source directory
</snippet></ROW><ROW><id>3406958</id><snippet>backup_dirname = str(uuid.uuid4())
try:
    shutil.mkdir(backup_dirname)
    for root, dirs, files in os.walk(dirname, topdown=False):
        for file in files:
            full_filename = os.path.join(root, file)
            target_filename = os.path.join(backup_dirname,file)
            shutil.copy(full_filename, target_filename)
catch Exception, e:
    print &gt;&gt;sys.stderr, "Something went wrong %s" % e
    exit(-1)
shutil.move(back_dirname,root)      # I would do this bit by hand really
</snippet></ROW><ROW><id>3407036</id><snippet>for thestring in listdata:
    firstcomma = thestring.find(',')
    havename = thestring.find(name, 0, firstcomma)
    if havename &gt;= 0:
        print "found name:", thestring[:firstcomma]
</snippet></ROW><ROW><id>3407036</id><snippet> counter = 1
 for line in completedataset:
     print counter
     counter += 1
     firstcomma = thestring.find(',')
     havename = thestring.find(t, 0, firstcomma)
     if havename &gt;= 0:
         smallerdataset.write(line)
</snippet></ROW><ROW><id>3407036</id><snippet>counter</snippet></ROW><ROW><id>3407036</id><snippet> for counter, line in enumerate(completedataset):
     print counter + 1
     firstcomma = thestring.find(',')
     havename = thestring.find(t, 0, firstcomma)
     if havename &gt;= 0:
         smallerdataset.write(line)
</snippet></ROW><ROW><id>3407282</id><snippet>import pyparsing as pyp
import itertools

integer = pyp.Word(pyp.nums)
ip_addr = pyp.Combine(integer+'.'+integer+'.'+integer+'.'+integer)

def snort_parse(logfile):
    header = (pyp.Suppress("[**] [")
              + pyp.Combine(integer + ":" + integer + ":" + integer)
              + pyp.Suppress(pyp.SkipTo("[**]", include = True)))
    cls = (
        pyp.Suppress(pyp.Optional(pyp.Literal("[Classification:")))
        + pyp.Regex("[^]]*") + pyp.Suppress(']'))

    pri = pyp.Suppress("[Priority:") + integer + pyp.Suppress("]")
    date = pyp.Combine(
        integer+"/"+integer+'-'+integer+':'+integer+':'+integer+'.'+integer)
    src_ip = ip_addr + pyp.Suppress("-&gt;")
    dest_ip = ip_addr

    bnf = header+cls+pri+date+src_ip+dest_ip

    with open(logfile) as snort_logfile:
        for has_content, grp in itertools.groupby(
                snort_logfile, key = lambda x: bool(x.strip())):
            if has_content:
                tmpStr = ''.join(grp)
                fields = bnf.searchString(tmpStr)
                print(fields)

snort_parse('snort_file')
</snippet></ROW><ROW><id>3407282</id><snippet>[['1:486:4', 'Misc activity', '3', '08/03-07:30:02.233350', '172.143.241.86', '63.44.2.33']]
</snippet></ROW><ROW><id>3407301</id><snippet>for i in range(len(my_list)-1,-1,-1):
    # do something
</snippet></ROW><ROW><id>3407648</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; filename = 'tempfile'
&gt;&gt;&gt; def write(filename,data,offset):
...     try:
...         f = open(filename,'r+b')
...     except IOError:
...         f = open(filename,'wb')
...     f.seek(offset)
...     f.write(data)
...     f.close()
...
&gt;&gt;&gt; write(filename,'1' * (1024*32),1024*1024)
&gt;&gt;&gt; write(filename,'1' * (1024*32),0)
&gt;&gt;&gt; os.path.getsize(filename)
1081344
</snippet></ROW><ROW><id>3407710</id><snippet>Administration</snippet></ROW><ROW><id>3407710</id><snippet>click</snippet></ROW><ROW><id>3407710</id><snippet>link=Administration</snippet></ROW><ROW><id>3407710</id><snippet>css=a:contains(Administration)</snippet></ROW><ROW><id>3407710</id><snippet>css=#menunav a:nth-child(3)</snippet></ROW><ROW><id>3407710</id><snippet>xpath=id('menunav')/descendant::a[3]</snippet></ROW><ROW><id>3407710</id><snippet>//a[text()='Administration']</snippet></ROW><ROW><id>3407710</id><snippet>//a[contains(text(), 'Administration')]</snippet></ROW><ROW><id>3407821</id><snippet>__getitem__</snippet></ROW><ROW><id>3407821</id><snippet>&gt;&gt;&gt; x = [12, 101, 4, 56]
&gt;&gt;&gt; y = range(len(x))
&gt;&gt;&gt; sorted(y, key=x.__getitem__)
[2, 0, 3, 1]
</snippet></ROW><ROW><id>3407863</id><snippet>locals</snippet></ROW><ROW><id>3407863</id><snippet>exec ''</snippet></ROW><ROW><id>3407863</id><snippet>_Classname</snippet></ROW><ROW><id>3407956</id><snippet>pMerge.stderr.readlines()</snippet></ROW><ROW><id>3407956</id><snippet>pMerge = subprocess.Popen(mp4merge, stdout=subprocess.PIPE,
    stderr=subprocess.PIPE)
stdout, stderr = pMerge.communicate()
print stdout
print stderr
</snippet></ROW><ROW><id>3407956</id><snippet>pMerge = subprocess.Popen(mp4merge, stdout=subprocess.PIPE,
    stderr=subprocess.STDOUT)
for line in pMerge.stdout:
    print line,
</snippet></ROW><ROW><id>3407985</id><snippet>dbm</snippet></ROW><ROW><id>3407985</id><snippet>&gt;&gt;&gt; import dbm
&gt;&gt;&gt; x = dbm.open('/tmp/foo.dat', 'c')
&gt;&gt;&gt; x['Mouse'] = 'Mickey'
&gt;&gt;&gt; x['Bird'] = 'Tweety'
</snippet></ROW><ROW><id>3407985</id><snippet>&gt;&gt;&gt; import dbm
&gt;&gt;&gt; x = dbm.open('/tmp/foo.dat', 'c')
&gt;&gt;&gt; print x['Mouse']
Mickey
&gt;&gt;&gt; print x['Bird']
Tweety
</snippet></ROW><ROW><id>3408422</id><snippet>recent_comments_widget.js?num_items=5&amp;hide_avatars=0&amp;avatar_size=32&amp;excerpt_length=200</snippet></ROW><ROW><id>3408787</id><snippet>url = url.replace(' ','+')
</snippet></ROW><ROW><id>3408807</id><snippet>dbm</snippet></ROW><ROW><id>3408807</id><snippet>for</snippet></ROW><ROW><id>3408807</id><snippet>for key in patients[some_person].__dict__:
    value = patients[some_person].__dict__[key]
    # then continue as before
</snippet></ROW><ROW><id>3408807</id><snippet>dbm</snippet></ROW><ROW><id>3408807</id><snippet>len(value)</snippet></ROW><ROW><id>3408807</id><snippet>len(the_string.split(','))</snippet></ROW><ROW><id>3408807</id><snippet>def find_max_var_amt(some_person):
    return max(len(value) for value in patients[some_person].__dict__.itervalues())
</snippet></ROW><ROW><id>3408807</id><snippet>def find_max_var_amt(some_person):
    dct = patients[some_person].__dict__
    return max(len(dct[key]) for key in dct)
</snippet></ROW><ROW><id>3408936</id><snippet>your_staticBitmap_object.bind(wx.EVT_LEFT_UP, self.onImageClick, your_staticBitmap_object)
</snippet></ROW><ROW><id>3408990</id><snippet>if t in line:
</snippet></ROW><ROW><id>3408990</id><snippet>if t in line[:line.find(',')]:
</snippet></ROW><ROW><id>3408990</id><snippet>line</snippet></ROW><ROW><id>3408990</id><snippet>,</snippet></ROW><ROW><id>3408990</id><snippet>line</snippet></ROW><ROW><id>3408990</id><snippet>line</snippet></ROW><ROW><id>3408990</id><snippet>In [21]: line='a line of text'

In [22]: line[:line.find(',')]
Out[22]: 'a line of tex'
</snippet></ROW><ROW><id>3408990</id><snippet>In [23]: line[:line.find(',')+1]
Out[23]: ''
</snippet></ROW><ROW><id>3409039</id><snippet>C = (1/3*(x0 + x1 + x2), 1/3*(y0 + y1 + y2))</snippet></ROW><ROW><id>3409039</id><snippet>import math

class Ship:
    def centroid(self):
        return 1 / 3 * (self.x0 + self.x1 + self.x2), 1 / 3 * (self.y0 + self.y1 + self.y2)

    def __init__(self, canvas, x, y, width, height, turnspeed, acceleration=1):
        self._d = {'Up':1, 'Down':-1, 'Left':1, 'Right':-1}

        self.canvas = canvas
        self.width = width
        self.height = height
        self.speed = 0
        self.turnspeed = turnspeed
        self.acceleration = acceleration

        self.x0, self.y0 = x, y

        self.bearing = -math.pi / 2

        self.x1 = self.x0 + self.width / 2
        self.y1 = self.y0 - self.height

        self.x2 = self.x0 + self.width
        self.y2 = self.y0

        self.x, self.y = self.centroid()

        self.ship = self.canvas.create_polygon((self.x0, self.y0, self.x1, self.y1, self.x2, self.y2), outline="white", width=3)

    def changeCoords(self):
        self.canvas.coords(self.ship,self.x0, self.y0, self.x1, self.y1, self.x2, self.y2)

    def rotate(self, event=None):
        t = self._d[event.keysym] * self.turnspeed * math.pi / 180 # the trig functions generally take radians as their arguments rather than degrees; pi/180 radians is equal to 1 degree

        self.bearing -= t

        def _rot(x, y):
            #note: the rotation is done in the opposite fashion from for a right-handed coordinate system due to the left-handedness of computer coordinates
            x -= self.x
            y -= self.y
            _x = x * math.cos(t) + y * math.sin(t)
            _y = -x * math.sin(t) + y * math.cos(t)
            return _x + self.x, _y + self.y

        self.x0, self.y0 = _rot(self.x0, self.y0)
        self.x1, self.y1 = _rot(self.x1, self.y1)
        self.x2, self.y2 = _rot(self.x2, self.y2)
        self.x, self.y = self.centroid()

        self.changeCoords()

    def accel(self, event=None):
        mh = int(self.canvas['height'])
        mw = int(self.canvas['width'])
        self.speed += self.acceleration * self._d[event.keysym]

        self.x0 += self.speed * math.cos(self.bearing)
        self.x1 += self.speed * math.cos(self.bearing)
        self.x2 += self.speed * math.cos(self.bearing)

        self.y0 += self.speed * math.sin(self.bearing)
        self.y1 += self.speed * math.sin(self.bearing)
        self.y2 += self.speed * math.sin(self.bearing)

        self.x, self.y = self.centroid()

        if self.y &lt; - self.height / 2:
            self.y0 += mh
            self.y1 += mh
            self.y2 += mh
        elif self.y &gt; mh + self.height / 2:
            self.y0 += mh
            self.y1 += mh
            self.y2 += mh

        if self.x &lt; -self.width / 2:
            self.x0 += mw
            self.x1 += mw
            self.x2 += mw
        elif self.x &gt; mw + self.width / 2:
            self.x0 -= mw
            self.x1 -= mw
            self.x2 -= mw

        self.x, self.y = self.centroid()

        self.changeCoords()
</snippet></ROW><ROW><id>3409039</id><snippet>from tkinter import *
from ship import *

class Game:
    def __init__(self, gameWidth, gameHeight):
        self.root = Tk()
        self.gameWidth = gameWidth
        self.gameHeight = gameHeight
        self.gameWindow()

        self.ship = Ship(self.canvas, x=self.gameWidth / 2,y=self.gameHeight / 2, width=50, height=50, turnspeed=10, acceleration=5)
        self.root.bind('&lt;Left&gt;', self.ship.rotate)
        self.root.bind('&lt;Right&gt;', self.ship.rotate)
        self.root.bind('&lt;Up&gt;', self.ship.accel)
        self.root.bind('&lt;Down&gt;', self.ship.accel)

        self.root.mainloop()

    def gameWindow(self):
        self.frame = Frame(self.root)
        self.frame.pack(fill=BOTH, expand=YES)

        self.canvas = Canvas(self.frame,width=self.gameWidth, height=self.gameHeight, bg="black", takefocus=1)
        self.canvas.pack(fill=BOTH, expand=YES)     

asteroids = Game(600,600)
</snippet></ROW><ROW><id>3409157</id><snippet>urllib.urlretrieve</snippet></ROW><ROW><id>3409157</id><snippet>import urllib
urllib.urlretrieve('http://chart.apis.google.com/...', 'outfile.png')
</snippet></ROW><ROW><id>3409157</id><snippet>import urllib.request
urllib.request.urlretrieve('http://chart.apis.google.com/...', 'outfile.png')
</snippet></ROW><ROW><id>3409349</id><snippet>In [45]: a = np.array([1,2,3,-1,-2,-3])

In [46]: a[a&lt;0]+=1

In [47]: a
Out[47]: array([ 1,  2,  3,  0, -1, -2])
</snippet></ROW><ROW><id>3409485</id><snippet>try:
    from file import varName
except ImportError:
    print 'var not found'
</snippet></ROW><ROW><id>3409485</id><snippet>import file
# ...
try:
    v = file.varName
except AttributeError:
    print 'var not found'
</snippet></ROW><ROW><id>3409492</id><snippet>from lib import urllib2_file
from lib.urllib2_file import UploadFile

# this view serves a task in a queue
def article(request):
       article = Article.objects.get(id=form.cleaned_data['article'])

       try:
            image = StringIO(urllib2.urlopen(image_url).read())
        except (urllib2.HTTPError, DownloadError):
            article.parsed = True
            article.save()
        else:
            image = UploadFile(image, '.'.join([str(article.id), image_url.rsplit('.', 1)[1][:4]]))
            upload_url = blobstore.create_upload_url(reverse('Articles.views.upload'))

            try:
                urllib2.urlopen(upload_url, {'file': image})
            except (DownloadError, RequestTooLargeError):
                pass

    return HttpResponse(json.dumps({'status': 'OK'}))

def upload(request):
    if request.method == 'POST':
        blobs = get_uploads(request, field_name='file', populate_post=True)

        article = Article.objects.get(id=int(blobs[0].filename.split('.')[0]))
        article.media = blobs[0].filename
        article.parsed = True
        article.save()

        return HttpResponseRedirect(reverse('Articles.views.upload'))
    else:
        return HttpResponse('meow')

    def upload(request):
        if request.method == 'POST':
            blobs = get_uploads(request, field_name='file', populate_post=True)

            article = Article.objects.get(id=int(blobs[0].filename.split('.')[0]))
            article.media = blobs[0].filename
            article.parsed = True
            article.save()

            return HttpResponseRedirect(reverse('Articles.views.upload'))
        else:
            return HttpResponse('meow')

# this serves the image
def image(request):
    blob = BlobInfo.gql("WHERE filename='%s' LIMIT 1" % request.form.cleaned_data['id'])[0]

    return HttpResponse(BlobReader(blob.key()).read(),
                        content_type=blob.content_type)
</snippet></ROW><ROW><id>3409536</id><snippet>return HttpResponse(simplejson.dumps(data, ensure_ascii=False), mimetype='application/json')
</snippet></ROW><ROW><id>3409536</id><snippet>list(data)</snippet></ROW><ROW><id>3409536</id><snippet>for(i in values) {
    $select.append('&lt;option value="'+values[i][0]+'"&gt;'+values[i][1]+'&lt;/option&gt;');
}
</snippet></ROW><ROW><id>3410066</id><snippet>shelf.sync()</snippet></ROW><ROW><id>3410066</id><snippet>shelf.close()</snippet></ROW><ROW><id>3410066</id><snippet>shelf.sync()</snippet></ROW><ROW><id>3410066</id><snippet>s["foo"] = MyClass()
s["foo"].X = 8 
p = s["foo"] # store a reference to the object
p.X = 9 # update the reference
s.sync() # flushes the cache
p.X = 0
print "value in memory: %d" % p.X # prints 0
print "value in shelf: %d" % s["foo"].X # prints 9
</snippet></ROW><ROW><id>3410280</id><snippet>svn:externals</snippet></ROW><ROW><id>3410454</id><snippet>c</snippet></ROW><ROW><id>3410454</id><snippet>[c]</snippet></ROW><ROW><id>3410454</id><snippet>c</snippet></ROW><ROW><id>3410461</id><snippet>io.StringIO</snippet></ROW><ROW><id>3410461</id><snippet>StringIO.StringIO</snippet></ROW><ROW><id>3410461</id><snippet>io.open</snippet></ROW><ROW><id>3410461</id><snippet>open</snippet></ROW><ROW><id>3410509</id><snippet>dict1=shelve.open("shelve.dat", writeback=True)
</snippet></ROW><ROW><id>3410509</id><snippet>dict1=shelve.open("shelve.dat", protocol=2, writeback=True)
</snippet></ROW><ROW><id>3410511</id><snippet>from xyz.CXMock import CXMock
</snippet></ROW><ROW><id>3410553</id><snippet>urllib2</snippet></ROW><ROW><id>3410553</id><snippet>User-Agent</snippet></ROW><ROW><id>3410553</id><snippet>User-Agent</snippet></ROW><ROW><id>3410553</id><snippet>Request</snippet></ROW><ROW><id>3410553</id><snippet>urlopen</snippet></ROW><ROW><id>3410553</id><snippet>import urllib2

request = urllib2.Request('http://www.example.com/')
request.add_header('User-agent', 'Mozilla/5.0 (Linux i686)')

response = urllib2.urlopen(request)
</snippet></ROW><ROW><id>3410697</id><snippet>''.join</snippet></ROW><ROW><id>3410697</id><snippet>__str__</snippet></ROW><ROW><id>3410697</id><snippet>__str__</snippet></ROW><ROW><id>3410697</id><snippet>object</snippet></ROW><ROW><id>3410697</id><snippet>join</snippet></ROW><ROW><id>3410697</id><snippet>str</snippet></ROW><ROW><id>3410697</id><snippet>str</snippet></ROW><ROW><id>3410697</id><snippet>unicode</snippet></ROW><ROW><id>3410697</id><snippet>str</snippet></ROW><ROW><id>3410761</id><snippet>from urlparse import urlparse, parse_qs
qs = urlparse("http://example.com/hello?q=1&amp;b=1").query
parse_qs(qs)
</snippet></ROW><ROW><id>3410761</id><snippet>FieldStorage</snippet></ROW><ROW><id>3410761</id><snippet>cgi.FieldStorage(environ={'REQUEST_METHOD':'GET', 'QUERY_STRING':qs})
</snippet></ROW><ROW><id>3410820</id><snippet>db</snippet></ROW><ROW><id>3410820</id><snippet>cursor = db.execute('SELECT * FROM Customer WHERE CustomerID = %s', [customer_id])
</snippet></ROW><ROW><id>3410820</id><snippet>fetch...</snippet></ROW><ROW><id>3410820</id><snippet>cursor</snippet></ROW><ROW><id>3410820</id><snippet>%s</snippet></ROW><ROW><id>3410820</id><snippet>%s</snippet></ROW><ROW><id>3411052</id><snippet>sorted(mydict.iteritems(), key=lambda tup: sum(tup[1]), reverse=True)[:3]
</snippet></ROW><ROW><id>3411052</id><snippet>heapq.nlargest(3, mydict.iteritems(), key=lambda tup: sum(tup[1]))
</snippet></ROW><ROW><id>3411052</id><snippet>OrderedDict</snippet></ROW><ROW><id>3411052</id><snippet>OrderedDict(heapq.nlargest(3, mydict.iteritems(), key=lambda tup: sum(tup[1])))
</snippet></ROW><ROW><id>3411052</id><snippet>OrderedDict</snippet></ROW><ROW><id>3411052</id><snippet>dict</snippet></ROW><ROW><id>3411300</id><snippet>manage.py</snippet></ROW><ROW><id>3411300</id><snippet>settings</snippet></ROW><ROW><id>3411300</id><snippet>execute_manager</snippet></ROW><ROW><id>3411374</id><snippet>print event.GetEventObject().GetId()</snippet></ROW><ROW><id>3411374</id><snippet>GetEventObject</snippet></ROW><ROW><id>3411374</id><snippet>StaticBitmap</snippet></ROW><ROW><id>3411374</id><snippet>GetEventObject</snippet></ROW><ROW><id>3411374</id><snippet>import functools

widget1.Bind(wx.EVT_LEFT_DOWN, functools.partial(self.on_left_down, widget=widget1))
widget2.Bind(wx.EVT_LEFT_DOWN, functools.partial(self.on_left_down, widget=widget2))
# or the above could be in a loop, creating lots of widgets

def on_left_down(self, event, widget):
    # widget is the one that was clicked
    # event is still the wx event
    # handle the event here...
</snippet></ROW><ROW><id>3411435</id><snippet>&gt;&gt;&gt; round(1234, -3)
1000.0
</snippet></ROW><ROW><id>3411435</id><snippet>&gt;&gt;&gt; from math import log10, floor
&gt;&gt;&gt; def round_to_1(x):
...   return round(x, -int(floor(log10(x))))
... 
&gt;&gt;&gt; round_to_1(0.0232)
0.02
&gt;&gt;&gt; round_to_1(1234243)
1000000.0
&gt;&gt;&gt; round_to_1(13)
10.0
&gt;&gt;&gt; round_to_1(4)
4.0
&gt;&gt;&gt; round_to_1(19)
20.0
</snippet></ROW><ROW><id>3411689</id><snippet>long</snippet></ROW><ROW><id>3411689</id><snippet>int</snippet></ROW><ROW><id>3411689</id><snippet>repr</snippet></ROW><ROW><id>3411689</id><snippet>long</snippet></ROW><ROW><id>3411689</id><snippet>print math.factorial(100)
</snippet></ROW><ROW><id>3411689</id><snippet>str(math.factorial(100))
</snippet></ROW><ROW><id>3411694</id><snippet>array.array</snippet></ROW><ROW><id>3411694</id><snippet>c</snippet></ROW><ROW><id>3411694</id><snippet>str(...)</snippet></ROW><ROW><id>3411725</id><snippet>def permute(inputData, outputSoFar):
    for a in inputData:
        if a not in outputSoFar:
            if len(outputSoFar) == len(inputData) - 1:
                yield outputSoFar + [a]
            else:
                for b in permute(inputData, outputSoFar + [a]): # --- Recursion
                    yield b

for i in permute([1,2,3], []):
    print i
</snippet></ROW><ROW><id>3411725</id><snippet>def permute(inputData, outputSoFar):
    for elem in inputData:
        if elem not in outputSoFar:
            outputSoFar.append(elem)
            if len(outputSoFar) == len(inputData):
                yield outputSoFar
            else:
                for permutation in permute(inputData, outputSoFar):
                    yield permutation # --- Recursion
            outputSoFar.pop()

for i in permute([1,2,3], []):
    print i
</snippet></ROW><ROW><id>3411979</id><snippet>{% for objs in obj_arr %}
{% for answer in objs.answers.all %}
  {{ answer.someattribute }}
{% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>3412090</id><snippet>&gt;&gt;&gt; string="abc&amp;def#ghi"
&gt;&gt;&gt; for ch in ['&amp;','#']:
...   if ch in string:
...      string=string.replace(ch,"\\"+ch)
...
&gt;&gt;&gt; print string
abc\&amp;def\#ghi
</snippet></ROW><ROW><id>3412259</id><snippet>gdal.VersionInfo()</snippet></ROW><ROW><id>3412259</id><snippet>&gt;&gt;&gt; osgeo.gdal.VersionInfo()
'1604'
</snippet></ROW><ROW><id>3412259</id><snippet>gdal.__version__</snippet></ROW><ROW><id>3412259</id><snippet>&gt;&gt;&gt; import osgeo.gdal
&gt;&gt;&gt; print osgeo.gdal.__version__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute '__version__'
</snippet></ROW><ROW><id>3412299</id><snippet>&gt;&gt;&gt; e = evince.View()
&gt;&gt;&gt; docmodel = evince.DocumentModel()
&gt;&gt;&gt; doc = evince.document_factory_get_document('file:///path/to/file/example.pdf')
&gt;&gt;&gt; docmodel.set_document(doc)
&gt;&gt;&gt; e.set_model(model)
</snippet></ROW><ROW><id>3412338</id><snippet>ssh -NR10022:localhost:22 foo@mainserver.com
</snippet></ROW><ROW><id>3412338</id><snippet>ssh bar@localhost -p 10022</snippet></ROW><ROW><id>3412357</id><snippet>for k,v in sorted(opt_dict.items(),
                  key = lambda item: int(item[0][len("option"):])
                            if item[0].startswith("option")
                            else int(item[0][len("nonoption"):])
                    ):
    print k,v
</snippet></ROW><ROW><id>3412357</id><snippet>option1 1
nonoption2 1
nonoption3 12
option4 6
nonoption5 5
option6 1
option7 1
</snippet></ROW><ROW><id>3412484</id><snippet>NLTK</snippet></ROW><ROW><id>3412484</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; paragraph = u"Hi, this is my first sentence. And this is my second. Yet this is my third."
&gt;&gt;&gt; sentences = nltk.sent_tokenize(paragraph)
[u"Hi, this is my first sentence.", u"And this is my second.", u"Yet this is my third."]
</snippet></ROW><ROW><id>3412484</id><snippet>&gt;&gt;&gt; sentences[1]
u"And this is my second."
</snippet></ROW><ROW><id>3412590</id><snippet>print t[0][1]
print t[1][1]
</snippet></ROW><ROW><id>3412590</id><snippet>t = {}
t["a"] = 1
t["b"] = 2
print t["a"]
print t["b"]
</snippet></ROW><ROW><id>3413153</id><snippet>open()</snippet></ROW><ROW><id>3413153</id><snippet>io</snippet></ROW><ROW><id>3413153</id><snippet>open()</snippet></ROW><ROW><id>3413153</id><snippet>io.open()</snippet></ROW><ROW><id>3413153</id><snippet>from timeit import Timer
t = Timer('f = io.open("E:\\db.txt", "r"); f.read(); f.close()', 'import io')
t.timeit(10000)
</snippet></ROW><ROW><id>3413436</id><snippet>sudo port install py26-pyicu</snippet></ROW><ROW><id>3413436</id><snippet>import PyICU
collator = PyICU.Collator.createInstance(PyICU.Locale('pl_PL.UTF-8'))
print [i for i in sorted([u'a', u'z', u'ą'], cmp=collator.compare)]
</snippet></ROW><ROW><id>3413436</id><snippet>[u'a', u'ą', u'z']
</snippet></ROW><ROW><id>3413694</id><snippet>.items[0]</snippet></ROW><ROW><id>3413694</id><snippet>br.find_control(name="disclaimer").items[0].selected
</snippet></ROW><ROW><id>3413694</id><snippet>import mechanize

br = mechanize.Browser()
br.open('http://casesearch.courts.state.md.us/inquiry/inquiry-index.jsp')
br.select_form(name="main")
br.find_control(name="disclaimer").items[0].selected = True
reponse = br.submit()
print reponse.read()
</snippet></ROW><ROW><id>3413751</id><snippet>return</snippet></ROW><ROW><id>3413751</id><snippet>def get_foo(self):
    self._foo = self._foo or Bar()
    return self._foo
</snippet></ROW><ROW><id>3413751</id><snippet>def get_foo(self):
    if not self._foo:
        self._foo = Bar()
    return self._foo
</snippet></ROW><ROW><id>3413859</id><snippet>r'\b\[harry\]\b'
</snippet></ROW><ROW><id>3413859</id><snippet>[harry] blah</snippet></ROW><ROW><id>3413859</id><snippet>[</snippet></ROW><ROW><id>3413859</id><snippet>[</snippet></ROW><ROW><id>3413859</id><snippet>foobar[harry] blah</snippet></ROW><ROW><id>3414096</id><snippet>sys.path</snippet></ROW><ROW><id>3414096</id><snippet>mymod</snippet></ROW><ROW><id>3414096</id><snippet>sys.path</snippet></ROW><ROW><id>3414096</id><snippet>__main__.py</snippet></ROW><ROW><id>3414096</id><snippet>-m</snippet></ROW><ROW><id>3414096</id><snippet>mymod</snippet></ROW><ROW><id>3414096</id><snippet>__main__.py</snippet></ROW><ROW><id>3414096</id><snippet>import sys
import os
path = os.path.dirname(sys.modules[__name__].__file__)
path = os.path.join(path, '..')
sys.path.insert(0, path)
from myprog import function_you_referenced_from_init_file
</snippet></ROW><ROW><id>3414096</id><snippet>-m</snippet></ROW><ROW><id>3414096</id><snippet>python -m mymod
</snippet></ROW><ROW><id>3414306</id><snippet>                    1 0 1 = 5
            -------------
1 0 0 1 1 / 1 1 0 1 1 0 1
            1 0 0 1 1 | |
            --------- | |
              1 0 0 0 0 |
              0 0 0 0 0 |
              --------- |
              1 0 0 0 0 1
                1 0 0 1 1
                ---------
                  1 1 1 0 = 14 = remainder
</snippet></ROW><ROW><id>3414306</id><snippet>                      1 0 1 = 5
            ---------------
1 0 0 1 1 / 0 1 1 0 1 1 0 1
              1 0 0 1 1 | |
              --------- | |
                1 0 0 0 0 |
                0 0 0 0 0 |
                --------- |
                1 0 0 0 0 1
                  1 0 0 1 1
                  ---------
                    1 1 1 0 = 14 = remainder
</snippet></ROW><ROW><id>3415304</id><snippet>~/test/kl% ls -R
.:
foo  spam.py

./foo:
eggs.py  eggs.pyc  ham.py  ham.pyc  __init__.py  __init__.pyc
</snippet></ROW><ROW><id>3415304</id><snippet>~/test/kl% cat spam.py 
import foo.eggs

~/test/kl% cd foo/
~/test/kl/foo% cat eggs.py
print( "got eggs, importing ham!" )
import ham
</snippet></ROW><ROW><id>3415304</id><snippet>~/test/kl% python spam.py 
got eggs, importing ham!
got ham!
</snippet></ROW><ROW><id>3415304</id><snippet>python script.py</snippet></ROW><ROW><id>3415304</id><snippet>script.py</snippet></ROW><ROW><id>3415304</id><snippet>sys.path</snippet></ROW><ROW><id>3415304</id><snippet>python spam.py</snippet></ROW><ROW><id>3415304</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3415304</id><snippet>~/test/kl% python foo/eggs.py
got eggs, importing ham!
got ham!
</snippet></ROW><ROW><id>3415304</id><snippet>sys.path</snippet></ROW><ROW><id>3415304</id><snippet>eggs.py</snippet></ROW><ROW><id>3415304</id><snippet>import ham</snippet></ROW><ROW><id>3415304</id><snippet>ham.py</snippet></ROW><ROW><id>3415304</id><snippet>~/test/kl/foo</snippet></ROW><ROW><id>3415304</id><snippet>sys.path</snippet></ROW><ROW><id>3415304</id><snippet>~/test/kl% cd foo
~/test/kl/foo% python eggs.py
got eggs, importing ham!
got ham!
</snippet></ROW><ROW><id>3415333</id><snippet>11100111</snippet></ROW><ROW><id>3415333</id><snippet>00011000</snippet></ROW><ROW><id>3415333</id><snippet>11100111</snippet></ROW><ROW><id>3415333</id><snippet>~</snippet></ROW><ROW><id>3415560</id><snippet>set.issubset(...)</snippet></ROW><ROW><id>3415560</id><snippet>&gt;&gt;&gt; d = {'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; set(['a', 'b']).issubset(d)
True
&gt;&gt;&gt; set(['a', 'x']).issubset(d)
False
</snippet></ROW><ROW><id>3415560</id><snippet>&gt;&gt;&gt; d = {'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; {'a', 'b'}.issubset(d)
True
&gt;&gt;&gt; {'a', 'x'}.issubset(d)
False
</snippet></ROW><ROW><id>3416032</id><snippet>web.application</snippet></ROW><ROW><id>3416032</id><snippet>_delegate</snippet></ROW><ROW><id>3416032</id><snippet>import types

class application(web.application):
    def _delegate(self, f, fvars, args=[]):
        def handle_class(cls):
            meth = web.ctx.method
            if meth == 'HEAD' and not hasattr(cls, meth):
                meth = 'GET'
            if not hasattr(cls, meth):
                if hasattr(cls, '_default'):
                    tocall = getattr(cls(), '_default')
                    return tocall(*args)
                raise web.nomethod(cls)
            tocall = getattr(cls(), meth)
            return tocall(*args)

        def is_class(o): return isinstance(o, (types.ClassType, type))
        ...
</snippet></ROW><ROW><id>3416032</id><snippet>app = application(urls, globals())
</snippet></ROW><ROW><id>3416032</id><snippet>class secret():
    def _default(self):
        raise web.notfound()

    def GET(self):
        ...
</snippet></ROW><ROW><id>3416032</id><snippet>method=DELETE</snippet></ROW><ROW><id>3416032</id><snippet>            ...
            meth = web.ctx.method
            if meth == 'POST' and 'method' in web.input():
                meth = web.input()['method']
            ...
</snippet></ROW><ROW><id>3416473</id><snippet>&gt;&gt;&gt; l = ['1', '32', '523', '336']
&gt;&gt;&gt; [ x for x in l if "2" not in x ]
['1', '336']
&gt;&gt;&gt; [ x for x in l if "2" in x ]
['32', '523']
</snippet></ROW><ROW><id>3416926</id><snippet>total_compare</snippet></ROW><ROW><id>3416926</id><snippet>True</snippet></ROW><ROW><id>3416926</id><snippet>False</snippet></ROW><ROW><id>3416926</id><snippet>total_compare</snippet></ROW><ROW><id>3416926</id><snippet>total_compare</snippet></ROW><ROW><id>3416998</id><snippet>&lt;dependency&gt;
    &lt;groupId&gt;org.python&lt;/groupId&gt;
    &lt;artifactId&gt;jython&lt;/artifactId&gt;
    &lt;version&gt;2.5.0&lt;/version&gt;
&lt;/dependency&gt;
</snippet></ROW><ROW><id>3417023</id><snippet>import Queue
changes = Queue.Queue()
</snippet></ROW><ROW><id>3417023</id><snippet>changes.put</snippet></ROW><ROW><id>3417023</id><snippet>changes.get</snippet></ROW><ROW><id>3417023</id><snippet>queue</snippet></ROW><ROW><id>3417050</id><snippet>cnxn = pyodbc.connect("DSN=someDSN;UID=someUser;PWD=somePass;QuotedID=Yes;AnsiNPW=Yes")
</snippet></ROW><ROW><id>3417354</id><snippet>import sys, os
sys.atexit.register( os.remove, path_to_file )
</snippet></ROW><ROW><id>3417354</id><snippet>os.remove( path_to_file )</snippet></ROW><ROW><id>3417509</id><snippet>def f(x):
    return x+1

var1 = 5
var1 = f(var1)
# var1 is now 6
</snippet></ROW><ROW><id>3417622</id><snippet>big_set.extend(100.0 * i / sum_total for i in results_histogram_total)
</snippet></ROW><ROW><id>3417622</id><snippet>big_set = [100.0 * i / sum_total for i in results_histogram_total]
</snippet></ROW><ROW><id>3417758</id><snippet>glob</snippet></ROW><ROW><id>3417758</id><snippet>import glob
for name in glob.glob('testing*08-05.txt'):
    print name
</snippet></ROW><ROW><id>3417773</id><snippet>res = list(sorted(theDict, key=theDict.__getitem__, reverse=True))
</snippet></ROW><ROW><id>3417773</id><snippet>list</snippet></ROW><ROW><id>3417773</id><snippet>theDict.__getitem__</snippet></ROW><ROW><id>3417773</id><snippet>lambda x: theDict[x]</snippet></ROW><ROW><id>3417773</id><snippet>&gt;&gt;&gt; g = lambda x: x + 5
&gt;&gt;&gt; g(123)
128
</snippet></ROW><ROW><id>3417773</id><snippet>&gt;&gt;&gt; def h(x):
...   return x + 5
&gt;&gt;&gt; h(123)
128
</snippet></ROW><ROW><id>3417865</id><snippet>setup(name = "Urban Planning",
      windows = [{'script': "main.py", "dest_base": "Urban_Planning"}],
      options = opts, # Dictionary of options
      zipfile = None, # Don't create zip file
      data_files = Mydata_files) # Add list of data files to folder
</snippet></ROW><ROW><id>3417865</id><snippet>Mydata_files = [] # List of data files to include
# Get the images from the [script root]/ui/images/ folder
for files in os.listdir(sys.path[0] + '/ui/images/'):
    f1 = sys.path[0] + '/ui/images/' + files
    if os.path.isfile(f1): # This will skip directories
        f2 = 'ui/images', [f1]
        Mydata_files.append(f2)

# Get the config file from the [script root]/Configs folder
Mydata_files.append(('Configs', [sys.path[0] + '/Configs/defaults.cfg']))
</snippet></ROW><ROW><id>3417889</id><snippet>for line in infile:
    line = line.strip().split(',')
    outfile.write(','.join(line[:3]) + '\n')
</snippet></ROW><ROW><id>3418092</id><snippet>dict((v,k) for k,v in enumerate(calendar.month_abbr))
</snippet></ROW><ROW><id>3418092</id><snippet>{v: k for k,v in enumerate(calendar.month_abbr)}
</snippet></ROW><ROW><id>3418123</id><snippet>next</snippet></ROW><ROW><id>3418123</id><snippet>&gt;&gt;&gt; l = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; l_iter = iter(l)
&gt;&gt;&gt; for n in l_iter:
      if n==2:
        print '{0}+{1}+{2}'.format(n, l_iter.next(), l_iter.next())
      else:
        print n
1
2+3+4
5
6
</snippet></ROW><ROW><id>3418123</id><snippet>def combined_words(word_list):
  combined_word = ""
  for k, word in enumerate(word_list):
    combined_word += k
    if next_word_can_be_paired:
      pass
    else: # next word can't be paired
      yield combined_word
      combined_word = ""
  if combined_word:
    yield combined_word # just in case anything is left over
</snippet></ROW><ROW><id>3418123</id><snippet>list(combined_words(word_list))</snippet></ROW><ROW><id>3418261</id><snippet>from collections import defaultdict
def invert(oldDict):
    invertedDict = defaultdict(list)
    while oldDict:
        key, valuelist = oldDict.popitem()
        for value in valuelist:
            invertedDict[value].append(key)
    return invertedDict
</snippet></ROW><ROW><id>3418261</id><snippet>from collections import defaultdict
def invert(oldDict):
    invertedDict = defaultdict(list)
    i=0
    while oldDict:
        key, valuelist = oldDict.popitem()
        for value in valuelist:
            invertedDict[value].append(key)
        i+=1
        if i%1000==0: # allow the dict to release memory from time to time
            oldDict[None]=None
            del oldDict[None]
    return invertedDict
</snippet></ROW><ROW><id>3418378</id><snippet>execfile()</snippet></ROW><ROW><id>3418411</id><snippet>doc = ET.fromstring(source)
</snippet></ROW><ROW><id>3418619</id><snippet>webbrowser</snippet></ROW><ROW><id>3418859</id><snippet>print_exc()</snippet></ROW><ROW><id>3418859</id><snippet>None</snippet></ROW><ROW><id>3418859</id><snippet>None</snippet></ROW><ROW><id>3418909</id><snippet>@register.filter
def labeled(value, label):
    if value:
        return label + value
    else:
        return ""
</snippet></ROW><ROW><id>3418909</id><snippet>{{ year_est|labeled:"Year Established: " }}
</snippet></ROW><ROW><id>3419217</id><snippet>list1=[1,2,3,4,5]
list2=[123,234,456]
d={'a':[],'b':[]}
d['a'].append(list1)
d['a'].append(list2)
print d['a']
</snippet></ROW><ROW><id>3419240</id><snippet>print [sum(e) for e in izip(*twin)]
</snippet></ROW><ROW><id>3419240</id><snippet>print map(sum, izip(*twin))
</snippet></ROW><ROW><id>3419240</id><snippet>&gt;&gt;&gt; zip([1, 2, 3, 4],
...     [5, 6, 7, 8])  ==  [(1, 5),
...                         (2, 6),
...                         (3, 7),
...                         (4, 8)]
True
</snippet></ROW><ROW><id>3419501</id><snippet>&gt;&gt;&gt; try:
...  os.unlink(os.path.join(os.getcwd(),'file.csv'))
... except OSError, e:
...  print e #file does not exist or you don't have permission
</snippet></ROW><ROW><id>3419563</id><snippet>if any(s.lower() == "foo" for s in list): print "found"
</snippet></ROW><ROW><id>3419944</id><snippet>x = {}
x.foo = 34
</snippet></ROW><ROW><id>3419944</id><snippet>dict</snippet></ROW><ROW><id>3419991</id><snippet>\r</snippet></ROW><ROW><id>3419991</id><snippet>print i/len(some_list)*100," percent complete         \r",
</snippet></ROW><ROW><id>3419991</id><snippet>print ""</snippet></ROW><ROW><id>3420058</id><snippet>boxSizer</snippet></ROW><ROW><id>3420058</id><snippet>textCtrl</snippet></ROW><ROW><id>3420058</id><snippet>1</snippet></ROW><ROW><id>3420058</id><snippet>wx.EXPAND</snippet></ROW><ROW><id>3420058</id><snippet>textCtrl</snippet></ROW><ROW><id>3420058</id><snippet>bsizer = wx.BoxSizer()
bsizer.Add(yourTxtCtrl, 1, wx.EXPAND)
</snippet></ROW><ROW><id>3420058</id><snippet>self.SetSizerAndFit(bsizer)
</snippet></ROW><ROW><id>3420156</id><snippet>dict_you_want = { your_key: old_dict[your_key] for your_key in your_keys }
</snippet></ROW><ROW><id>3420156</id><snippet>dict((your_key, old_dict[your_key]) for ...)</snippet></ROW><ROW><id>3420156</id><snippet>old_dict</snippet></ROW><ROW><id>3420156</id><snippet>unwanted = set(keys) - set(your_dict)
for unwanted_key in unwanted: del your_dict[unwanted_key]
</snippet></ROW><ROW><id>3420186</id><snippet>activate</snippet></ROW><ROW><id>3420186</id><snippet>window-state-event</snippet></ROW><ROW><id>3420934</id><snippet>import threading
dummy_event = threading.Event()
dummy_event.wait(timeout=1)
</snippet></ROW><ROW><id>3420934</id><snippet>set()</snippet></ROW><ROW><id>3420934</id><snippet>join</snippet></ROW><ROW><id>3420934</id><snippet>import threading

def create_the_file(completion_event):
    # Do stuff to create the file

def Main():
    worker = threading.Thread(target=create_the_file)
    worker.start()

    # We will stop here until the "create_the_file" function finishes
    worker.join()

    # Do stuff with the file
</snippet></ROW><ROW><id>3420934</id><snippet>dummy_event.wait()</snippet></ROW><ROW><id>3420934</id><snippet>join()</snippet></ROW><ROW><id>3420934</id><snippet>wait</snippet></ROW><ROW><id>3420934</id><snippet>os.waitpid()</snippet></ROW><ROW><id>3420934</id><snippet>OSError</snippet></ROW><ROW><id>3420934</id><snippet>import gio

def directory_changed(monitor, file1, file2, evt_type):
    print "Changed:", file1, file2, evt_type

gfile = gio.File(".")
monitor = gfile.monitor_directory(gio.FILE_MONITOR_NONE, None)
monitor.connect("changed", directory_changed) 

import glib
ml = glib.MainLoop()
ml.run()
</snippet></ROW><ROW><id>3421025</id><snippet>CGImageRef myImage = CGBitmapContextCreateImage (myBitmapContext);// 5

CGContextDrawImage(myBitmapContext, myBoundingBox, myImage);// 6
</snippet></ROW><ROW><id>3421025</id><snippet>// I'd like to write to a file here!
</snippet></ROW><ROW><id>3421173</id><snippet>S</snippet></ROW><ROW><id>3421173</id><snippet>f(v, i, S)</snippet></ROW><ROW><id>3421173</id><snippet>v[i:]</snippet></ROW><ROW><id>3421173</id><snippet>S</snippet></ROW><ROW><id>3421173</id><snippet>v[i:]</snippet></ROW><ROW><id>3421173</id><snippet>[]</snippet></ROW><ROW><id>3421173</id><snippet>[]</snippet></ROW><ROW><id>3421173</id><snippet>v[i:]</snippet></ROW><ROW><id>3421173</id><snippet>v[i]</snippet></ROW><ROW><id>3421173</id><snippet>v[i]</snippet></ROW><ROW><id>3421173</id><snippet>S - v[i]</snippet></ROW><ROW><id>3421173</id><snippet>S</snippet></ROW><ROW><id>3421173</id><snippet>f</snippet></ROW><ROW><id>3421173</id><snippet>def f(v, i, S):
  if i &gt;= len(v): return 1 if S == 0 else 0
  count = f(v, i + 1, S)
  count += f(v, i + 1, S - v[i])
  return count

v = [1, 2, 3, 10]
sum = 12
print(f(v, 0, sum))
</snippet></ROW><ROW><id>3421173</id><snippet>f(v, 0, S) &gt; 0</snippet></ROW><ROW><id>3421173</id><snippet>S</snippet></ROW><ROW><id>3421173</id><snippet>def f(v, i, S, memo):
  if i &gt;= len(v): return 1 if S == 0 else 0
  if (i, S) not in memo:  # &lt;-- Check if value has not been calculated.
    count = f(v, i + 1, S, memo)
    count += f(v, i + 1, S - v[i], memo)
    memo[(i, S)] = count  # &lt;-- Memoize calculated result.
  return memo[(i, S)]     # &lt;-- Return memoized value.

v = [1, 2, 3, 10]
sum = 12
memo = dict()
print(f(v, 0, sum, memo))
</snippet></ROW><ROW><id>3421173</id><snippet>g</snippet></ROW><ROW><id>3421173</id><snippet>S</snippet></ROW><ROW><id>3421173</id><snippet>def f(v, i, S, memo):
  # ... same as before ...

def g(v, S, memo):
  subset = []
  for i, x in enumerate(v):
    # Check if there is still a solution if we include v[i]
    if f(v, i + 1, S - x, memo) &gt; 0:
      subset.append(x)
      S -= x
  return subset

v = [1, 2, 3, 10]
sum = 12
memo = dict()
if f(v, 0, sum, memo) == 0: print("There are no valid subsets.")
else: print(g(v, sum, memo))
</snippet></ROW><ROW><id>3421366</id><snippet>time.sleep(..)</snippet></ROW><ROW><id>3421366</id><snippet>sleep(..)</snippet></ROW><ROW><id>3421366</id><snippet>from time import sleep</snippet></ROW><ROW><id>3421366</id><snippet>time.sleep(..)</snippet></ROW><ROW><id>3421366</id><snippet>import time</snippet></ROW><ROW><id>3421778</id><snippet>cb = {}
for link in br.links(url_regex="inquiry-results.jsp"):
    cb[link.url] = link
print cb.values()
</snippet></ROW><ROW><id>3422122</id><snippet>%f</snippet></ROW><ROW><id>3422122</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>3422122</id><snippet>datetime.datetime</snippet></ROW><ROW><id>3422122</id><snippet>val</snippet></ROW><ROW><id>3422122</id><snippet>datetime.datetime.replace()</snippet></ROW><ROW><id>3422122</id><snippet>&gt;&gt;&gt; val = '2010-08-06T10:00:14.143896'
&gt;&gt;&gt; nofrag, frag = val.split('.')
&gt;&gt;&gt; nofrag_dt = datetime.datetime.strptime(nofrag, "%Y-%m-%dT%H:%M:%S")
&gt;&gt;&gt; dt = nofrag_dt.replace(microsecond=int(frag))
&gt;&gt;&gt; dt
datetime.datetime(2010, 8, 6, 10, 0, 14, 143896)
</snippet></ROW><ROW><id>3422122</id><snippet>datetime.datetime</snippet></ROW><ROW><id>3422122</id><snippet>datetime</snippet></ROW><ROW><id>3422122</id><snippet>%f</snippet></ROW><ROW><id>3422122</id><snippet>strptime</snippet></ROW><ROW><id>3422287</id><snippet>def merge_lists(l1, l2, key):
    merged = {}
    for item in l1+l2:
        if item[key] in merged:
            merged[item[key]].update(item)
        else:
            merged[item[key]] = item
    return [val for (_, val) in merged.items()]

courses = merge_lists(user_course_score, courses, 'course_id')
</snippet></ROW><ROW><id>3422287</id><snippet>[{'course_id': 1456, 'name': 'History', 'score': 56},
 {'course_id': 316, 'name': 'Science', 'score': 71},
 {'course_id': 926, 'name': 'Geography'}]
</snippet></ROW><ROW><id>3422396</id><snippet>def merge(self, request, queryset):
    main = queryset[0]
    tail = queryset[1:]

    related = main._meta.get_all_related_objects()

    valnames = dict()
    for r in related:
        valnames.setdefault(r.model, []).append(r.field.name)

    for place in tail:
        for model, field_names in valnames.iteritems():
            for field_name in field_names:
                model.objects.filter(**{field_name: place}).update(**{field_name: main})

        place.delete()

    self.message_user(request, "%s is merged with other places, now you can give it a canonical name." % main)
</snippet></ROW><ROW><id>3422417</id><snippet>from itertools import izip
[myfunc(a, b) for a, b in izip(data[::2], data[1::2])]
</snippet></ROW><ROW><id>3422417</id><snippet>idata = iter(data)
[myfunc(a, b) for a, b in izip(idata, idata)]
</snippet></ROW><ROW><id>3422740</id><snippet>&gt;&gt;&gt; s = 'Hello world'
&gt;&gt;&gt; t = buffer(s, 6, 5)
&gt;&gt;&gt; t
&lt;read-only buffer for 0x10064a4b0, size 5, offset 6 at 0x100634ab0&gt;
&gt;&gt;&gt; print t
world
</snippet></ROW><ROW><id>3422740</id><snippet>bytearray</snippet></ROW><ROW><id>3422740</id><snippet>&gt;&gt;&gt; s = bytearray(1000000)   # a million zeroed bytes
&gt;&gt;&gt; t = buffer(s, 1)         # slice cuts off the first byte
&gt;&gt;&gt; s[1] = 5                 # set the second element in s
&gt;&gt;&gt; t[0]                     # which is now also the first element in t!
'\x05'
</snippet></ROW><ROW><id>3422740</id><snippet>buffer</snippet></ROW><ROW><id>3422740</id><snippet>memoryview</snippet></ROW><ROW><id>3422823</id><snippet>class baseclass(object):
    def __init__(self):
        print 'hey this is the base'

    def _deco(func):
        def wrapper(*arg):
            res = func(*arg)
            print 'I\'m a decorator. This is fabulous, but that colour, so last season sweetiedarling'
            return res
        return wrapper

    @_deco
    def basefunc(self):
        print 'I\'m a base function'

    @_deco
    def basefunc2(self):
        print "I'm another base function"

   #no more uses of _deco in this class
    _deco = staticmethod(_deco) 
   # this is the key. it must be executed after all of the uses of _deco in 
   # the base class. this way _deco is some sort weird internal function that 
   # can be called from within the class namespace while said namespace is being 
   # created and a proper static method for subclasses or external callers.


class otherclass(baseclass):
    def __init__(self):
        super(otherclass, self).__init__()
        print 'other class'


    @baseclass._deco
    def meh(self):
        print 'I\'m a function'
</snippet></ROW><ROW><id>3422995</id><snippet>first, second = [], []
for lst in (first, second):
    lst.append(msg)
</snippet></ROW><ROW><id>3423524</id><snippet>import hashlib
with open( &lt;path-to-file&gt;, "rb" ) as theFile:
    m = hashlib.md5( )
    for line in theFile:
        m.update( line )
with open( &lt;path-to-hashfile&gt;, "wb" ) as theFile:
    theFile.write( m.digest( ) )
</snippet></ROW><ROW><id>3423524</id><snippet>hashfile</snippet></ROW><ROW><id>3423570</id><snippet>SimPy</snippet></ROW><ROW><id>3423570</id><snippet>app.yaml</snippet></ROW><ROW><id>3423570</id><snippet>SimPy</snippet></ROW><ROW><id>3423570</id><snippet>__init__.py</snippet></ROW><ROW><id>3423570</id><snippet>Simulation.py</snippet></ROW><ROW><id>3423697</id><snippet>&gt;&gt;&gt; values = 'one', 'two', 'three'
&gt;&gt;&gt; A = type('A', (object,), {i: i + ' value' for i in values})
&gt;&gt;&gt; A.one
'one value'
&gt;&gt;&gt; A.three
'three value'
</snippet></ROW><ROW><id>3423935</id><snippet>io.StringIO</snippet></ROW><ROW><id>3423935</id><snippet>from io import StringIO
sio = StringIO()
sio.write("Hello\n")
</snippet></ROW><ROW><id>3423935</id><snippet>Traceback (most recent call last):
  File "so2.py", line 3, in &lt;module&gt;
    sio.write("Hello\n")
TypeError: string argument expected, got 'str'
</snippet></ROW><ROW><id>3423935</id><snippet>io</snippet></ROW><ROW><id>3423935</id><snippet>io</snippet></ROW><ROW><id>3423935</id><snippet>from io import BytesIO as StringIO
</snippet></ROW><ROW><id>3424534</id><snippet>b = a[:-1] + (a[-1]*2,)
</snippet></ROW><ROW><id>3424534</id><snippet>+</snippet></ROW><ROW><id>3424836</id><snippet>$0.0001</snippet></ROW><ROW><id>3424836</id><snippet>$7.50</snippet></ROW><ROW><id>3424843</id><snippet>format()</snippet></ROW><ROW><id>3424843</id><snippet>u''</snippet></ROW><ROW><id>3424843</id><snippet>b''</snippet></ROW><ROW><id>3424843</id><snippet>''</snippet></ROW><ROW><id>3424843</id><snippet>b''</snippet></ROW><ROW><id>3424843</id><snippet>len()</snippet></ROW><ROW><id>3424843</id><snippet>u'something'</snippet></ROW><ROW><id>3424843</id><snippet>len()</snippet></ROW><ROW><id>3424843</id><snippet>u</snippet></ROW><ROW><id>3424843</id><snippet>''</snippet></ROW><ROW><id>3424862</id><snippet>from twisted.internet import reactor</snippet></ROW><ROW><id>3424862</id><snippet>sys.modules['twisted.internet.reactor']</snippet></ROW><ROW><id>3424862</id><snippet>sys.modules</snippet></ROW><ROW><id>3424862</id><snippet>multiprocessing</snippet></ROW><ROW><id>3424985</id><snippet>data = [row for row in csv.DictReader(file)]</snippet></ROW><ROW><id>3424985</id><snippet>&gt;&gt;&gt; data = [row for row in csv.DictReader(open('C:\\my.csv'),
...                                       ('num','time','time2'))]
&gt;&gt;&gt; len(data)  # lots of old data :P
1410
&gt;&gt;&gt; data[1].keys()
['time2', 'num', 'time']
&gt;&gt;&gt; keyeddata = {}
&gt;&gt;&gt; for row in data[2:]:  # I have some junk rows
...     keyeddata[row['num']] = row
...
&gt;&gt;&gt; keyeddata['32']
{'num': '32', 'time2': '8', 'time': '13269'}
</snippet></ROW><ROW><id>3425124</id><snippet>def monthdelta(date, delta):
    m, y = (date.month+delta) % 12, date.year + ((date.month)+delta-1) // 12
    if not m: m = 12
    d = min(date.day, [31,
        29 if y%4==0 and not y%400==0 else 28,31,30,31,30,31,31,30,31,30,31][m-1])
    return date.replace(day=d,month=m, year=y)

&gt;&gt;&gt; for m in range(-12, 12):
    print(monthdelta(datetime.now(), m))


2009-08-06 16:12:27.823000
2009-09-06 16:12:27.855000
2009-10-06 16:12:27.870000
2009-11-06 16:12:27.870000
2009-12-06 16:12:27.870000
2010-01-06 16:12:27.870000
2010-02-06 16:12:27.870000
2010-03-06 16:12:27.886000
2010-04-06 16:12:27.886000
2010-05-06 16:12:27.886000
2010-06-06 16:12:27.886000
2010-07-06 16:12:27.886000
2010-08-06 16:12:27.901000
2010-09-06 16:12:27.901000
2010-10-06 16:12:27.901000
2010-11-06 16:12:27.901000
2010-12-06 16:12:27.901000
2011-01-06 16:12:27.917000
2011-02-06 16:12:27.917000
2011-03-06 16:12:27.917000
2011-04-06 16:12:27.917000
2011-05-06 16:12:27.917000
2011-06-06 16:12:27.933000
2011-07-06 16:12:27.933000
&gt;&gt;&gt; monthdelta(datetime(2010,3,30), -1)
datetime.datetime(2010, 2, 28, 0, 0)
&gt;&gt;&gt; monthdelta(datetime(2008,3,30), -1)
datetime.datetime(2008, 2, 29, 0, 0)
</snippet></ROW><ROW><id>3425316</id><snippet>getdefaultlocale</snippet></ROW><ROW><id>3425316</id><snippet>locale</snippet></ROW><ROW><id>3425316</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.getdefaultlocale()
('en_GB', 'cp1252')
</snippet></ROW><ROW><id>3425803</id><snippet>/start/of/the/path/(?P&lt;a&gt;[a-z]+)_(?P&lt;b&gt;\w+?)(_(?P&lt;c&gt;[a-z]+))?(/|$)
</snippet></ROW><ROW><id>3425803</id><snippet>/jobs/ads/abc_J123/previs/m_name
/jobs/ads/abc_J123/previs/m_name/
/jobs/ads/abc_J123/previs/m_name/some_stuff
/jobs/ads/abc_J123/previs/m_name/some_stuff/
/jobs/ads/abc_J123/previs/m_name/some_stuff/other_stuff
/jobs/ads/abc_J123/previs/m_name/some_stuff/other_stuff/
/jobs/ads/abc_J123/previs/m_name_stage
/jobs/ads/abc_J123/previs/m_name_stage/
/jobs/ads/abc_J123/previs/m_name_stage/some_stuff
/jobs/ads/abc_J123/previs/m_name_stage/some_stuff/
/jobs/ads/abc_J123/previs/m_name_stage/some_stuff/other_stuff
/jobs/ads/abc_J123/previs/m_name_stage/some_stuff/other_stuff/
/jobs/ads/abc_J123/previs/m_long_name_stage
/jobs/ads/abc_J123/previs/m_long_name_stage/
/jobs/ads/abc_J123/previs/m_long_name_stage/some_stuff
/jobs/ads/abc_J123/previs/m_long_name_stage/some_stuff/
/jobs/ads/abc_J123/previs/m_long_name_stage/some_stuff/other_stuff
/jobs/ads/abc_J123/previs/m_long_name_stage/some_stuff/other_stuff/
</snippet></ROW><ROW><id>3426006</id><snippet>gettext</snippet></ROW><ROW><id>3426006</id><snippet>_("My String")</snippet></ROW><ROW><id>3426006</id><snippet>.py</snippet></ROW><ROW><id>3426006</id><snippet>from django.utils.translation import ugettext as _</snippet></ROW><ROW><id>3426006</id><snippet>{% trans "My String" %}</snippet></ROW><ROW><id>3426006</id><snippet>bundle.getString("My String")</snippet></ROW><ROW><id>3426006</id><snippet>.properties</snippet></ROW><ROW><id>3426006</id><snippet>.po</snippet></ROW><ROW><id>3426006</id><snippet>#: templates/inquiries/settings/new_field.html:12
#: templates/inquiries/settings/new_form.html:4
msgid "Save"
msgstr ""
</snippet></ROW><ROW><id>3426117</id><snippet>content = file['content']
</snippet></ROW><ROW><id>3426117</id><snippet>content = file.read()
</snippet></ROW><ROW><id>3426155</id><snippet>list1 = ["1","10","3","22","23","4","2","200"]
list1 = [int(x) for x in list1]
list1.sort()
</snippet></ROW><ROW><id>3426155</id><snippet>list1 = ["1","10","3","22","23","4","2","200"]
# call int(x) on each element before comparing it
list1.sort(key=int)
</snippet></ROW><ROW><id>3426277</id><snippet>select</snippet></ROW><ROW><id>3426277</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>3426277</id><snippet>p.stdout.fileno()</snippet></ROW><ROW><id>3426277</id><snippet>p</snippet></ROW><ROW><id>3426277</id><snippet>select.select</snippet></ROW><ROW><id>3426277</id><snippet>&gt;&gt;&gt; def f():                                                                    
...   p = subprocess.Popen("sleep 10; echo ciao", shell=True, stdout=subprocess.PIPE)
...   while True:                                                               
...     r, w, x = select.select([p.stdout.fileno()],[],[],1.0)
...     if r: return p.stdout.read()
...     print 'not ready yet'
... 
&gt;&gt;&gt; f()
not ready yet
not ready yet
not ready yet
not ready yet
not ready yet
not ready yet
not ready yet
not ready yet
not ready yet
not ready yet
'ciao\n'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3426277</id><snippet>fileno()</snippet></ROW><ROW><id>3426700</id><snippet>position = [(712,352), 
            (712,390), 
            (622,522)]

MouseMove(*position[0])
</snippet></ROW><ROW><id>3427051</id><snippet>datetime</snippet></ROW><ROW><id>3427051</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; a = datetime.datetime.now()
&gt;&gt;&gt; # ...wait a while...
&gt;&gt;&gt; b = datetime.datetime.now()
&gt;&gt;&gt; print(b-a)
0:03:43.984000
</snippet></ROW><ROW><id>3427051</id><snippet>&gt;&gt;&gt; a = datetime.datetime.now().replace(microsecond=0)
&gt;&gt;&gt; b = datetime.datetime.now().replace(microsecond=0)
&gt;&gt;&gt; print(b-a)
0:03:43
</snippet></ROW><ROW><id>3427322</id><snippet>itertools.product(*fields)
</snippet></ROW><ROW><id>3427391</id><snippet>storecoeffs</snippet></ROW><ROW><id>3427391</id><snippet>import numpy as np
# Note that this ignores your column names, and attempts to 
# convert all values to a float...
data = np.loadtxt('input_filename.txt', delimiter=',', skiprows=1)

# Access the first column 
workers = data[:,0]
</snippet></ROW><ROW><id>3427391</id><snippet>import numpy as np
infile = file('input_filename.txt')

# Read in the names of the columns from the first row...
names = infile.next().strip().split()

# Make a dtype from these names...
dtype = {'names':names, 'formats':len(names)*[np.float]}

# Read the data in...
data = np.loadtxt(infile, dtype=dtype, delimiter=',')

# Note that data is now effectively 1-dimensional. To access a column,
# index it by name
workers = data['workers']

# Note that this is now one-dimensional... You can't treat it like a 2D array
data[1:10, 3:5] # &lt;-- Raises an error!

data[1:10][['inc1', 'inc2']] # &lt;-- Effectively the same thing, but works..
</snippet></ROW><ROW><id>3427391</id><snippet>import numpy as np
infile = file('input_filename.txt')
names = infile.next().strip().split()

# Create the dtype... The 'S10' indicates a string field with a length of 10
dtype = {'names':names, 'formats':['S10'] + (len(names) - 1)*[np.float]}
data = np.loadtxt(infile, dtype=dtype, delimiter=',')

# The "workers" field is now a string array
print data['workers']

# Compare this to the other fields
print data['constant']
</snippet></ROW><ROW><id>3427728</id><snippet>np.append</snippet></ROW><ROW><id>3427728</id><snippet>a</snippet></ROW><ROW><id>3427728</id><snippet>10</snippet></ROW><ROW><id>3427728</id><snippet>a</snippet></ROW><ROW><id>3427728</id><snippet>a</snippet></ROW><ROW><id>3427728</id><snippet>gc.collect</snippet></ROW><ROW><id>3427728</id><snippet>a</snippet></ROW><ROW><id>3427728</id><snippet>a = np.zeros( &lt;size&gt; )</snippet></ROW><ROW><id>3427728</id><snippet>del</snippet></ROW><ROW><id>3427927</id><snippet>#!/usr/bin/python

...

sys.path.insert(0, '/usr/share/yum-cli')
try:
    import yummain
    yummain.user_main(sys.argv[1:], exit_code=True)
except KeyboardInterrupt, e:
    ...
</snippet></ROW><ROW><id>3428049</id><snippet>2^(bit length)</snippet></ROW><ROW><id>3428049</id><snippet>a + ~a = -1        =&gt;
    ~a = -1 - a    =&gt;
    ~a = -(a + 1)
</snippet></ROW><ROW><id>3428164</id><snippet>Public</snippet></ROW><ROW><id>3428164</id><snippet>rowSelected</snippet></ROW><ROW><id>3428164</id><snippet>rowNextUnread</snippet></ROW><ROW><id>3428164</id><snippet>iSelected</snippet></ROW><ROW><id>3428164</id><snippet>iNextUnread</snippet></ROW><ROW><id>3428164</id><snippet>rowItemsPerPage</snippet></ROW><ROW><id>3428164</id><snippet>colSelected</snippet></ROW><ROW><id>3428307</id><snippet>set(vocab) - english_dictionary
</snippet></ROW><ROW><id>3428307</id><snippet>vocab</snippet></ROW><ROW><id>3428307</id><snippet>english_dictionary</snippet></ROW><ROW><id>3428307</id><snippet>vocab</snippet></ROW><ROW><id>3428307</id><snippet>sorted</snippet></ROW><ROW><id>3428307</id><snippet>words</snippet></ROW><ROW><id>3428307</id><snippet>vocab</snippet></ROW><ROW><id>3428307</id><snippet>englishwords</snippet></ROW><ROW><id>3428307</id><snippet>english_dictionary</snippet></ROW><ROW><id>3428307</id><snippet>newwords = set(words) - set(englishwords)
</snippet></ROW><ROW><id>3428307</id><snippet>newwords = set(words).difference(englishwords)
</snippet></ROW><ROW><id>3428307</id><snippet>englishwords</snippet></ROW><ROW><id>3428307</id><snippet>difference</snippet></ROW><ROW><id>3428307</id><snippet>sorted(newwords)</snippet></ROW><ROW><id>3428307</id><snippet>list(newwords)</snippet></ROW><ROW><id>3428633</id><snippet>myclone.csv</snippet></ROW><ROW><id>3428633</id><snippet>workers,constant,age
w0,7.334,-1.406
w1,5.235,-4.936
w2,3.2225,-1.478
w3,0,0
</snippet></ROW><ROW><id>3428633</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; f = open('myclone.csv', 'rb')
&gt;&gt;&gt; reader = csv.reader(f)
&gt;&gt;&gt; headers = reader.next()
&gt;&gt;&gt; headers
['workers', 'constant', 'age']
&gt;&gt;&gt; column = {}
&gt;&gt;&gt; for h in headers:
...    column[h] = []
...
&gt;&gt;&gt; column
{'workers': [], 'constant': [], 'age': []}
&gt;&gt;&gt; for row in reader:
...   for h, v in zip(headers, row):
...     column[h].append(v)
...
&gt;&gt;&gt; column
{'workers': ['w0', 'w1', 'w2', 'w3'], 'constant': ['7.334', '5.235', '3.2225', '0'], 'age': ['-1.406', '-4.936', '-1.478', '0']}
&gt;&gt;&gt; column['workers']
['w0', 'w1', 'w2', 'w3']
&gt;&gt;&gt; column['constant']
['7.334', '5.235', '3.2225', '0']
&gt;&gt;&gt; column['age']
['-1.406', '-4.936', '-1.478', '0']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3428633</id><snippet>converters = [str.strip] + [float] * (len(headers) - 1)
</snippet></ROW><ROW><id>3428633</id><snippet>for h, v, conv in zip(headers, row, converters):
  column[h].append(conv(v))
</snippet></ROW><ROW><id>3428637</id><snippet>[item for item in x if item not in y]
</snippet></ROW><ROW><id>3428637</id><snippet>-</snippet></ROW><ROW><id>3428637</id><snippet>class MyList(list):
    def __init__(self, *args):
        super(MyList, self).__init__(args)

    def __sub__(self, other):
        return self.__class__(*[item for item in self if item not in other])
</snippet></ROW><ROW><id>3428637</id><snippet>x = MyList(1, 2, 3, 4)
y = MyList(2, 5, 2)
z = x - y   
</snippet></ROW><ROW><id>3428785</id><snippet>max(abs(x - y) for (x, y) in zip(values[1:], values[:-1]))
</snippet></ROW><ROW><id>3428820</id><snippet>xml.etree</snippet></ROW><ROW><id>3428820</id><snippet>import lxml.etree as le
data = """&lt;root
             xmlns:one="http://www.first.uri/here/"
             xmlns:two="http://www.second.uri/here/"&gt;

          ...all other child elements here...
          &lt;/root&gt;"""

tree = le.XML(data)
print(tree.nsmap)
# {'two': 'http://www.second.uri/here/', 'one': 'http://www.first.uri/here/'}
</snippet></ROW><ROW><id>3428885</id><snippet>str.replace()</snippet></ROW><ROW><id>3428885</id><snippet>cell_info = cell_info.replace('“','"').replace('”','"')
</snippet></ROW><ROW><id>3428932</id><snippet>'abc123'</snippet></ROW><ROW><id>3428932</id><snippet>href</snippet></ROW><ROW><id>3428932</id><snippet>re.compile('abc123')</snippet></ROW><ROW><id>3428932</id><snippet>'abc123.com'</snippet></ROW><ROW><id>3428932</id><snippet>re.compile(re.escape('abc123.com'))
</snippet></ROW><ROW><id>3428932</id><snippet>re.escape</snippet></ROW><ROW><id>3428932</id><snippet>'.'</snippet></ROW><ROW><id>3428932</id><snippet>re.compile('abc123.com')</snippet></ROW><ROW><id>3428932</id><snippet>'abc123zcom'</snippet></ROW></DATA>