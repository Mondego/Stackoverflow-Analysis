<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>20684313</id><snippet>B.p</snippet></ROW><ROW><id>20684313</id><snippet>B().p</snippet></ROW><ROW><id>20684313</id><snippet>self</snippet></ROW><ROW><id>20684313</id><snippet>class B(object):
    def foo(self):
        print 'ok'

&gt;&gt;&gt;B().foo()
ok
&gt;&gt;&gt;B.foo()
Exception, missing an argument.
&gt;&gt;&gt;B.foo(B())
ok
</snippet></ROW><ROW><id>20684313</id><snippet>__dict__</snippet></ROW><ROW><id>20684313</id><snippet>__get__</snippet></ROW><ROW><id>20684313</id><snippet>__set__</snippet></ROW><ROW><id>20684313</id><snippet>__get__</snippet></ROW><ROW><id>20684313</id><snippet>__set__</snippet></ROW><ROW><id>20684313</id><snippet>__get__</snippet></ROW><ROW><id>20684313</id><snippet>B.foo</snippet></ROW><ROW><id>20684313</id><snippet>B().foo</snippet></ROW><ROW><id>20684313</id><snippet>instancemethod</snippet></ROW><ROW><id>20684313</id><snippet>function</snippet></ROW><ROW><id>20684313</id><snippet>self</snippet></ROW><ROW><id>20684313</id><snippet>__get__</snippet></ROW><ROW><id>20684313</id><snippet>&gt;&gt;&gt; B.p
&lt;unbound method B.p&gt;
&gt;&gt;&gt; type(B.p)
&lt;type 'instancemethod'&gt;
</snippet></ROW><ROW><id>20684313</id><snippet>&gt;&gt;&gt;B.p</snippet></ROW><ROW><id>20684313</id><snippet>__repr__</snippet></ROW><ROW><id>20684313</id><snippet>&gt;&gt;&gt;print B.p.__repr__()</snippet></ROW><ROW><id>20684417</id><snippet>import itertools

def vectorr(I,  J,  K):
    return itertools.product(range(K), range(J), range(I))
</snippet></ROW><ROW><id>20684651</id><snippet>from django.views.generic import RedirectView

urlpatterns = patterns('',
    url(r'^new_part/other/$', 'some_view'),
    url(r'^old_part/other/$', 
        RedirectView.as_view(url='new_part/other/', permanent=True)),
)
</snippet></ROW><ROW><id>20684651</id><snippet>urlpatterns = patterns('',
    url(r'^new_part/other/$', include(sub_patterns)),
    url(r'^old_part/other/(?P&lt;rest&gt;.*)$', 
        RedirectView.as_view(url='new_part/other/%(rest)s', permanent=True)),
)
</snippet></ROW><ROW><id>20684651</id><snippet>redirect_to</snippet></ROW><ROW><id>20684726</id><snippet>gramme</snippet></ROW><ROW><id>20684726</id><snippet>-e</snippet></ROW><ROW><id>20684726</id><snippet>pip install -e git+git://github.com/shivek/gramme.git
</snippet></ROW><ROW><id>20684789</id><snippet>import glob
import os
os.chdir("/mydir")
for files in glob.glob("*.csv"):
    print files
</snippet></ROW><ROW><id>20684789</id><snippet>for files in glob.glob("*.csv"):
    for lines in files:
         if line == header:
              print member,line
         else:
              print line
</snippet></ROW><ROW><id>20684789</id><snippet>'Votes-[member name]-(2010-2014)-[download-time].csv'.split('-')[1]
</snippet></ROW><ROW><id>20684789</id><snippet>cat &lt;&lt;"EOF" &gt; 1.csv
1,2,3
4,5,6
EOF

cat &lt;&lt;"EOF" &gt; 2.csv
a,b,c
d,e,f
EOF
</snippet></ROW><ROW><id>20684789</id><snippet>rm -f all.csv
for fyle in *.csv ; do 
    echo | awk -v f=$fyle '{ print f","$0 }' $fyle &gt;&gt; all.csv
done
exit 0
</snippet></ROW><ROW><id>20684789</id><snippet>head -1 all.csv &gt; nohead.csv # add one header line
grep -v "header string" all.csv &gt;&gt; nohead.csv # add rest of rows, with no headers
</snippet></ROW><ROW><id>20684806</id><snippet>return False</snippet></ROW><ROW><id>20684806</id><snippet>else</snippet></ROW><ROW><id>20684806</id><snippet>return False</snippet></ROW><ROW><id>20684806</id><snippet>def isMember (value, list):
    for element in list:
        if element == value:
            return True
    return False
</snippet></ROW><ROW><id>20684806</id><snippet>any</snippet></ROW><ROW><id>20684806</id><snippet>any</snippet></ROW><ROW><id>20684806</id><snippet>def isMember (value, list):
    return any(value == element for element in list)
</snippet></ROW><ROW><id>20684810</id><snippet>portal/client_api.ashx?client=SAPRA&amp;key=1234234&amp;func=status&amp;code=99999
</snippet></ROW><ROW><id>20684810</id><snippet>portal/client_api.ashx
</snippet></ROW><ROW><id>20684810</id><snippet>client=SAPRA&amp;key=1234234&amp;func=status&amp;code=99999
</snippet></ROW><ROW><id>20684810</id><snippet>request.GET</snippet></ROW><ROW><id>20684810</id><snippet>views.py</snippet></ROW><ROW><id>20684810</id><snippet>request.GET</snippet></ROW><ROW><id>20684810</id><snippet>def test(request):
    code = request.GET.get('code') # here we try to get 'code' key, if not return None
    ...
</snippet></ROW><ROW><id>20684810</id><snippet>urls.py</snippet></ROW><ROW><id>20684810</id><snippet>urls.py</snippet></ROW><ROW><id>20684810</id><snippet>from django.conf.urls import patterns, url
from rt_moke import views

urlpatterns = patterns('',
    url(r'^portal/client_api\.ashx$', views.Sapata, name='sapata'),
)
</snippet></ROW><ROW><id>20685064</id><snippet>too many</snippet></ROW><ROW><id>20685064</id><snippet>to little values to unpack</snippet></ROW><ROW><id>20685064</id><snippet>eventTokens</snippet></ROW><ROW><id>20685064</id><snippet>&gt;&gt;&gt;a,b = 'ab'
&gt;&gt;&gt;a
'a'
&gt;&gt;&gt;b
'b'
</snippet></ROW><ROW><id>20685064</id><snippet>eventTokens</snippet></ROW><ROW><id>20685332</id><snippet>from sqlalchemy.sql import literal_column
...
tbl.update().where(
    tbl.c.id == bindparam('b_id')
).values(
    tbl.c.column_to_update == literal_column('b_column_to_update')
)
</snippet></ROW><ROW><id>20685332</id><snippet>tbl.update().where(
    tbl.c.id == bindparam('b_id')
).values(
    getattr(tbl.c, 'column_to_update') == bindparam('b_column_to_update')
)
</snippet></ROW><ROW><id>20685332</id><snippet>values</snippet></ROW><ROW><id>20685332</id><snippet>.values(column_to_update=value)</snippet></ROW><ROW><id>20685332</id><snippet>column_to_update</snippet></ROW><ROW><id>20685332</id><snippet>stmt = users.update().\
        where(users.c.id==5).\
        values(id=-5)
</snippet></ROW><ROW><id>20685332</id><snippet>where</snippet></ROW><ROW><id>20685332</id><snippet>==</snippet></ROW><ROW><id>20685332</id><snippet>values</snippet></ROW><ROW><id>20685332</id><snippet>=</snippet></ROW><ROW><id>20685332</id><snippet>**kwargs</snippet></ROW><ROW><id>20685332</id><snippet>.values(**{'column_to_update': value})</snippet></ROW><ROW><id>20685332</id><snippet>values</snippet></ROW><ROW><id>20685332</id><snippet>values</snippet></ROW><ROW><id>20685345</id><snippet>shelve</snippet></ROW><ROW><id>20685345</id><snippet>import shelve
db = shelve.open('data.db')
print db['keyname']
db['keyname'] = 'some new user data'
db.sync()
db.close()
</snippet></ROW><ROW><id>20685345</id><snippet>shelve</snippet></ROW><ROW><id>20685345</id><snippet>shelve</snippet></ROW><ROW><id>20685562</id><snippet>ord</snippet></ROW><ROW><id>20685562</id><snippet>A</snippet></ROW><ROW><id>20685562</id><snippet>A = ord('A')
for c in tempWord:
    if 'A' &lt;= c &lt;= 'Z':
        tempSum += ord(c) - A + 1
</snippet></ROW><ROW><id>20685562</id><snippet>A = ord('A')
tempSum = sum(ord(c) - A + 1 for c in tempWord if 'A' &lt;= c &lt;= 'Z')
</snippet></ROW><ROW><id>20685580</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>20685580</id><snippet>import ast

ast.literal_eval(x)
</snippet></ROW><ROW><id>20685580</id><snippet>json.loads()</snippet></ROW><ROW><id>20685580</id><snippet>import json

json.loads(x)
</snippet></ROW><ROW><id>20685580</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>20685580</id><snippet>json.loads()</snippet></ROW><ROW><id>20685580</id><snippet>&gt;&gt;&gt; import ast, json
&gt;&gt;&gt; x = "[26, 25]"
&gt;&gt;&gt; ast.literal_eval(x)
[26, 25]
&gt;&gt;&gt; json.loads(x)
[26, 25]
</snippet></ROW><ROW><id>20685580</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>20685580</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>20685580</id><snippet>&gt;&gt;&gt; x = '["List", "with", "strings", "including", "snowman", "\u2603"]'
&gt;&gt;&gt; ast.literal_eval(x)
['List', 'with', 'strings', 'including', 'snowman', '\\u2603']
&gt;&gt;&gt; json.loads(x)
[u'List', u'with', u'strings', u'including', u'snowman', u'\u2603']
&gt;&gt;&gt; x = "(1, 2, 3, 'a tuple is Python syntax, not JSON')"
&gt;&gt;&gt; ast.literal_eval(x)
(1, 2, 3, 'a tuple is Python syntax, not JSON')
&gt;&gt;&gt; json.loads(x)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mj/Development/Library/buildout.python/parts/opt/lib/python2.7/json/__init__.py", line 338, in loads
    return _default_decoder.decode(s)
  File "/Users/mj/Development/Library/buildout.python/parts/opt/lib/python2.7/json/decoder.py", line 365, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Users/mj/Development/Library/buildout.python/parts/opt/lib/python2.7/json/decoder.py", line 383, in raw_decode
    raise ValueError("No JSON object could be decoded")
ValueError: No JSON object could be decoded
</snippet></ROW><ROW><id>20685868</id><snippet>a = 100
a *= 1.15
print a # Returns 115
</snippet></ROW><ROW><id>20685906</id><snippet>date_publish</snippet></ROW><ROW><id>20685906</id><snippet>DateTimeField</snippet></ROW><ROW><id>20685906</id><snippet>DateField</snippet></ROW><ROW><id>20685906</id><snippet>datetimes()</snippet></ROW><ROW><id>20685906</id><snippet>dates()</snippet></ROW><ROW><id>20685906</id><snippet>Article.objects.datetimes('date_publish', 'month', order='DESC')
</snippet></ROW><ROW><id>20686263</id><snippet>None</snippet></ROW><ROW><id>20686263</id><snippet>None</snippet></ROW><ROW><id>20686263</id><snippet>None</snippet></ROW><ROW><id>20686263</id><snippet>object()</snippet></ROW><ROW><id>20686263</id><snippet>object()</snippet></ROW><ROW><id>20686263</id><snippet>def get_cases(some_args, another_arg, section_id=None):
    if section_id is None:
        # A value for section_id wasn't passed.
    else:
        # An value for section_id was passed.
</snippet></ROW><ROW><id>20686281</id><snippet>## removing from top
html = re.sub('.*?&lt;div id="container"&gt;', "", html)

## remove from bottom
html = re.sub('&lt;div class="callout"&gt;.*', "", html)

## then match
links = re.findall('&lt;li[^&gt;]*&gt;\s*&lt;a href="(https?://[^"]*)"', html, re.IGNORECASE)
## you can push the text rss inside the pattern if you want
</snippet></ROW><ROW><id>20686659</id><snippet>format</snippet></ROW><ROW><id>20686659</id><snippet>&gt;&gt;&gt; bankBalance = 1000000
&gt;&gt;&gt; format(bankBalance, ",")
'1,000,000'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20686746</id><snippet>printedrows = [("[X]","[X]","[X]","[X]","[X]","  &lt;- V: {}   TOTAL: {}".format(row.count(0), sum(row))) 
               for row in rows]
</snippet></ROW><ROW><id>20686746</id><snippet>printedrows = [["[X]","[X]","[X]","[X]","[X]","  &lt;- V: {}   TOTAL: {}".format(row.count(0), sum(row))] 
               for row in rows]
</snippet></ROW><ROW><id>20686780</id><snippet>itertools.izip</snippet></ROW><ROW><id>20686780</id><snippet>enumerate</snippet></ROW><ROW><id>20686780</id><snippet>import itertools

with open('file1.txt') as f1, open('file2.txt') as f2:
    for lineno, (line1, line2) in enumerate(itertools.izip(f1, f2), 1):
        if line1 != line2:
            print 'mismatch in line no:', lineno
</snippet></ROW><ROW><id>20686965</id><snippet>dialog = AndroidDialog.AndroidDialog(str(filename))
dialog.show()
</snippet></ROW><ROW><id>20686965</id><snippet>setAndroid(self)</snippet></ROW><ROW><id>20686965</id><snippet>dialog</snippet></ROW><ROW><id>20686965</id><snippet>self.dialog = AndroidDialog.AndroidDialog(str(filename))
self.dialog.show()
</snippet></ROW><ROW><id>20686965</id><snippet>self.dialog</snippet></ROW><ROW><id>20687008</id><snippet>start</snippet></ROW><ROW><id>20687008</id><snippet>p+3</snippet></ROW><ROW><id>20687008</id><snippet>p2 = mystr.find('id=', p+3)
</snippet></ROW><ROW><id>20687008</id><snippet>p = "id=id=1"
i = p.find("id=")
print p.find("id=", i + 3)
</snippet></ROW><ROW><id>20687008</id><snippet>3</snippet></ROW><ROW><id>20687094</id><snippet>__init__.py</snippet></ROW><ROW><id>20687094</id><snippet>import modulename from modulename as mod</snippet></ROW><ROW><id>20687097</id><snippet>re.findall</snippet></ROW><ROW><id>20687097</id><snippet>&gt;&gt;&gt; re.findall(r'[-\d]+', '43,5 67- -66,53-53 , 6')
['43', '5', '67-', '-66', '53-53', '6']
</snippet></ROW><ROW><id>20687097</id><snippet>&gt;&gt;&gt; pattern = r'(?&lt;![-\d])(\d+-\d+|-\d+|\d+-|\d+)(?![-\d])'
&gt;&gt;&gt; re.findall(pattern, '43,5 67- -66,53-53 , 1--, 2, --3, -4-')
['43', '5', '67-', '-66', '53-53', '2']
</snippet></ROW><ROW><id>20687344</id><snippet>unicode(a, 'utf8')
</snippet></ROW><ROW><id>20687344</id><snippet>str.decode()</snippet></ROW><ROW><id>20687344</id><snippet>a.decode('utf8')
</snippet></ROW><ROW><id>20687647</id><snippet>state=DISABLED</snippet></ROW><ROW><id>20687647</id><snippet>state</snippet></ROW><ROW><id>20687647</id><snippet>Checkbutton</snippet></ROW><ROW><id>20687647</id><snippet>Checkbutton(state=DISABLED)
</snippet></ROW><ROW><id>20687647</id><snippet>from Tkinter import Tk, Checkbutton, DISABLED
root = Tk()
check = Checkbutton(text="Click Me", state=DISABLED)
check.grid()
root.mainloop()
</snippet></ROW><ROW><id>20687647</id><snippet>Tkinter.Checkbutton.config</snippet></ROW><ROW><id>20687647</id><snippet>from Tkinter import Tk, Checkbutton, DISABLED
root = Tk()
def click():
    check.config(state=DISABLED)
check = Checkbutton(text="Click Me", command=click)
check.grid()
root.mainloop()
</snippet></ROW><ROW><id>20687868</id><snippet>extra</snippet></ROW><ROW><id>20687868</id><snippet>apps_extra</snippet></ROW><ROW><id>20687868</id><snippet>App</snippet></ROW><ROW><id>20687868</id><snippet>total_cases</snippet></ROW><ROW><id>20687868</id><snippet>executed_cases</snippet></ROW><ROW><id>20687868</id><snippet>apps_extra</snippet></ROW><ROW><id>20687868</id><snippet>Column()</snippet></ROW><ROW><id>20687868</id><snippet>django_tables2</snippet></ROW><ROW><id>20687953</id><snippet>distlibs</snippet></ROW><ROW><id>20687953</id><snippet>main.py</snippet></ROW><ROW><id>20687953</id><snippet>sys.path</snippet></ROW><ROW><id>20687953</id><snippet>import sys
sys.path[0:0] = ['distlibs']
</snippet></ROW><ROW><id>20687953</id><snippet>import</snippet></ROW><ROW><id>20687953</id><snippet>distlibs</snippet></ROW><ROW><id>20687953</id><snippet>wtforms</snippet></ROW><ROW><id>20687953</id><snippet>from wtforms import validators
...
</snippet></ROW><ROW><id>20688305</id><snippet>y = 'albumjcker' # all characters inside "lumberjack"
s = 'lumberjack'

for x in s:
    if any(x in alpha for alpha in y):
           print x
</snippet></ROW><ROW><id>20688305</id><snippet>y = ["a", "b", "c", "l"]
s = ["banana split", "lumberjack"]
for words in s:
    for char in y:
        if char in words:
            print (words)
            break
</snippet></ROW><ROW><id>20688305</id><snippet>y = ["animal","zoo","potato"] 
s =  ["The animal farm on the left","I had potatoes for lunch"]
for words in s:
    for char in y:
        if char in words:
            print (words)
            break

The animal farm on the left
I had potatoes for lunch
</snippet></ROW><ROW><id>20688305</id><snippet>y = ["animal","zoo","potato"] 
s =  ["The animal farm on the left","I had potatoes for lunch"]
s = list(set(s)) # But NOTE THAT this might change the order of your original list
for words in s:
    for char in y:
        if char in words:
            print (words)
            break
</snippet></ROW><ROW><id>20688305</id><snippet>y = ["animal","zoo","potato"] 
s =  ["The animal farm on the left","I had potatoes for lunch"]

new = []
for x in s:
    if x not in new:
        new.append(x)
s = new

for words in s:
    for char in y:
        if char in words:
            print (words)
            break
</snippet></ROW><ROW><id>20688430</id><snippet>foo = 0</snippet></ROW><ROW><id>20688430</id><snippet>foo</snippet></ROW><ROW><id>20688430</id><snippet>0</snippet></ROW><ROW><id>20688430</id><snippet>1</snippet></ROW><ROW><id>20688430</id><snippet>foo</snippet></ROW><ROW><id>20688430</id><snippet>0</snippet></ROW><ROW><id>20688430</id><snippet>0</snippet></ROW><ROW><id>20688430</id><snippet>[0, 0, 0]</snippet></ROW><ROW><id>20688430</id><snippet>for i in range(len(bar)):
    print id(bar[i])
    bar[i] = 0
    print id(bar[i])
print bar
</snippet></ROW><ROW><id>20688445</id><snippet>serializers.serialize</snippet></ROW><ROW><id>20688445</id><snippet>QuerySet</snippet></ROW><ROW><id>20688445</id><snippet>json</snippet></ROW><ROW><id>20688445</id><snippet>import json
print json.dumps({'your': 'dict'})
</snippet></ROW><ROW><id>20688445</id><snippet>ValuesQuerySet</snippet></ROW><ROW><id>20688445</id><snippet>json</snippet></ROW><ROW><id>20688445</id><snippet># [...]
data = paginator.page(1)
print json.dumps(list(data))
</snippet></ROW><ROW><id>20688574</id><snippet>get</snippet></ROW><ROW><id>20688574</id><snippet>user_obj = User.objects.get(username=inputname)
</snippet></ROW><ROW><id>20688574</id><snippet>inputNameSend</snippet></ROW><ROW><id>20688638</id><snippet>master</snippet></ROW><ROW><id>20688638</id><snippet>Window1</snippet></ROW><ROW><id>20688638</id><snippet>self.master=master
</snippet></ROW><ROW><id>20688638</id><snippet>Window1.__init__</snippet></ROW><ROW><id>20688638</id><snippet>def __init__(self,master):
    ####################
    self.master=master
    ####################
    self.button1=Button(master,text="OK",command=self.button_click)
    self.button1.pack()
</snippet></ROW><ROW><id>20688638</id><snippet>master</snippet></ROW><ROW><id>20688638</id><snippet>Window1</snippet></ROW><ROW><id>20688638</id><snippet>self</snippet></ROW><ROW><id>20688638</id><snippet>self.master</snippet></ROW><ROW><id>20689026</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>20689082</id><snippet>&gt;&gt;&gt; M = zeros((4,4))
&gt;&gt;&gt; M.flat[::5] = 1
&gt;&gt;&gt; print(M)
array([[ 1.,  0.,  0.,  0.],
       [ 0.,  1.,  0.,  0.],
       [ 0.,  0.,  1.,  0.],
       [ 0.,  0.,  0.,  1.]])
</snippet></ROW><ROW><id>20689082</id><snippet>&gt;&gt;&gt; M = zeros((4,4))
&gt;&gt;&gt; M.flat[:4] = 1
&gt;&gt;&gt; print(M)
array([[ 1.,  1.,  1.,  1.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.]])
</snippet></ROW><ROW><id>20689082</id><snippet>&gt;&gt;&gt; M = zeros((4,4))
&gt;&gt;&gt; M.T.flat[:4] = 1
&gt;&gt;&gt; print(M)
array([[ 1.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.],
       [ 1.,  0.,  0.,  0.]])
</snippet></ROW><ROW><id>20689211</id><snippet>x = int(input("Choose a number for the spirograph to use "))
</snippet></ROW><ROW><id>20689211</id><snippet>"Choose a number for the spirograph to use "
</snippet></ROW><ROW><id>20689328</id><snippet>@app.route('/entry', methods=['GET', 'POST'])
def entry_page():
    if request.method == 'POST':
        date = request.form['date']
        title = request.form['blog_title']
        post = request.form['blog_main']
        post_entry = models.BlogPost(date = date, title = title, post = post)
        db.session.add(post_entry)
        db.session.commit()
        return redirect(url_for('database'))
    else:
        return render_template('entry.html')

@app.route('/database', methods=['GET', 'POST'])        
def database():
    query = []
    for i in session.query(models.BlogPost):
        query.append((i.title, i.post, i.date))
    return render_template('database.html', query = query)
</snippet></ROW><ROW><id>20689347</id><snippet>target_word = "hello world"
target_size = len(target_word)
alphabet = "abcdefghijklmnopqrstuvwxyz "
def make_guess(alphabet,size):
   return "".join(random.choice(alphabet) for _ in range(size))

guess = make_guess(alphabet,target_size)

for i in itertools.count(0):
   if guess == target_word:
      break;
   if not i % 1000:
      print "Best So Far:",guess
   #climb hill and replace our guess if our next guess is better
   guess = min(guess,make_guess(alphabet,target_size),key=lambda _guess:levenstein(_guess,target_word))
print "Final Guess:",guess
</snippet></ROW><ROW><id>20689396</id><snippet>inspect.ismethod()</snippet></ROW><ROW><id>20689396</id><snippet>return inspect.ismethod(getattr(klass, methodName))
</snippet></ROW><ROW><id>20689396</id><snippet>inspect.isfunction()</snippet></ROW><ROW><id>20689396</id><snippet>types.MethodType</snippet></ROW><ROW><id>20689396</id><snippet>import types

isinstance(getattr(klass, methodName), types.MethodType)
</snippet></ROW><ROW><id>20689396</id><snippet>@classmethod</snippet></ROW><ROW><id>20689396</id><snippet>@staticmethod</snippet></ROW><ROW><id>20689396</id><snippet>cls.staticmethod.__get__(instance, cls)</snippet></ROW><ROW><id>20689396</id><snippet>inspect.isfunction()</snippet></ROW><ROW><id>20689396</id><snippet>isinstance(obj, (types.MethodType, types.FunctionType))</snippet></ROW><ROW><id>20689396</id><snippet>callable()</snippet></ROW><ROW><id>20689396</id><snippet>__call__</snippet></ROW><ROW><id>20689396</id><snippet>&gt;&gt;&gt; class MyCallable(object):
...     def __call__(self):
...         return "Hello World!"
... 
&gt;&gt;&gt; mc = MyCallable()
&gt;&gt;&gt; callable(mc)
True
&gt;&gt;&gt; mc()
'Hello World!'
</snippet></ROW><ROW><id>20689396</id><snippet>callable()</snippet></ROW><ROW><id>20689589</id><snippet>import numpy as np
import matplotlib.pyplot as plt
# import for 3d plot
from mpl_toolkits.mplot3d import Axes3D
# initializing 3d plot
fig = plt.figure()
ax = fig.add_subplot(111, projection = '3d')
# several data points 
r = np.array([0, 14, 64, 114])
# get lengths of the separate segments 
r[1:] = r[1:] - r[:-1]
phi = np.array([255.6, 255.6, 261.7, 267.4])
theta = np.array([-79.5, -79.5, -79.4, -78.8])
# convert to radians
phi = phi * 2 * np.pi / 360.
# in spherical coordinates theta is measured from zenith down; you are measuring it from horizontal plane up 
theta = (90. - theta) * 2 * np.pi / 360.
# get x, y, z from known formulae
x = r*np.cos(phi)*np.sin(theta)
y = r*np.sin(phi)*np.sin(theta)
z = r*np.cos(theta)
# np.cumsum is employed to gradually sum resultant vectors 
ax.plot(np.cumsum(x),np.cumsum(y),np.cumsum(z))
</snippet></ROW><ROW><id>20689729</id><snippet>mypkg/
  __init__.py
  toplevel.py
  mypkg.py
</snippet></ROW><ROW><id>20689729</id><snippet>toplevel.py</snippet></ROW><ROW><id>20689729</id><snippet>import mypkg.mypkg</snippet></ROW><ROW><id>20689729</id><snippet>mypkg.py</snippet></ROW><ROW><id>20689729</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>20689729</id><snippet>toplevel.py</snippet></ROW><ROW><id>20689729</id><snippet>from . import mypkg</snippet></ROW><ROW><id>20689729</id><snippet>toplevel.py</snippet></ROW><ROW><id>20689729</id><snippet>mypkg.py</snippet></ROW><ROW><id>20689908</id><snippet>&gt;&gt;&gt; ud = {}
&gt;&gt;&gt; ud['first'] = 1
&gt;&gt;&gt; ud['second'] = 2
&gt;&gt;&gt; ud['third'] = 3
&gt;&gt;&gt; ud.values()
[2, 3, 1]
</snippet></ROW><ROW><id>20689908</id><snippet>&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; od = OrderedDict()
&gt;&gt;&gt; od['first'] = 1
&gt;&gt;&gt; od['second'] = 2
&gt;&gt;&gt; od['third'] = 3
&gt;&gt;&gt; od.values()
[1, 2, 3]
</snippet></ROW><ROW><id>20689991</id><snippet>from subprocess import call
call(["./idal", "-B", "input-File"])
</snippet></ROW><ROW><id>20690001</id><snippet>import time

class MyObj(object):
    def __init__(self):
        self.start_time = time.time()

    def get_time_elapsed(self):
        return time.time() - self.start_time

m = MyObj()
print m.get_time_elapsed()
</snippet></ROW><ROW><id>20690055</id><snippet>headers = ["data", "title", "here", "testing", "stackoverflow"]
Row = namedtuple('Row', headers)
for raw_row in reader:
    row = Row._make(raw_row)

    # Do math
    score = row.data * row.here / stackoverflow
    # Print for user sake
    print score
    # Change the testing value
    new_testing = row.testing + (score - row.title)
    new_row = row._replace(testing=new_testing)

    # Do something with new_row...
</snippet></ROW><ROW><id>20690087</id><snippet>select *</snippet></ROW><ROW><id>20690087</id><snippet>DictCursor</snippet></ROW><ROW><id>20690087</id><snippet>select</snippet></ROW><ROW><id>20690091</id><snippet>datetime.py</snippet></ROW><ROW><id>20690091</id><snippet>Traceback (most recent call last):    
File "datetime.py", line 3, in
import datetime
File "/root/Desktop/python_work/datetime.py", line 5, in
today = datetime.date.today()
</snippet></ROW><ROW><id>20690091</id><snippet>datetime.py</snippet></ROW><ROW><id>20690091</id><snippet>datetime.py</snippet></ROW><ROW><id>20690091</id><snippet>/root/Desktop/python_work</snippet></ROW><ROW><id>20690091</id><snippet>datetime.py</snippet></ROW><ROW><id>20690156</id><snippet>if</snippet></ROW><ROW><id>20690156</id><snippet>condition1 and condition2 and condition3</snippet></ROW><ROW><id>20690156</id><snippet>condition1</snippet></ROW><ROW><id>20690156</id><snippet>condition2</snippet></ROW><ROW><id>20690156</id><snippet>and</snippet></ROW><ROW><id>20690156</id><snippet>results = (condition1, condition2, condition3)
if all(results):
    pass
else:
    # look at the individual values
</snippet></ROW><ROW><id>20690156</id><snippet>def countem(result):
    if result:
        countem.count += 1
    return result
countem.count = 0

if countem(condition1) and countem(condition2) and countem(condition3):
    pass
else:
    print countem.count
</snippet></ROW><ROW><id>20690156</id><snippet>if</snippet></ROW><ROW><id>20690156</id><snippet>conditions = (lambda: condition1, lambda: condition2, lambda: condition3)
first_failed = sum(1 for _ in itertools.takewhile(lambda f: f(), conditions))
</snippet></ROW><ROW><id>20690169</id><snippet>==</snippet></ROW><ROW><id>20690169</id><snippet>if</snippet></ROW><ROW><id>20690169</id><snippet>all</snippet></ROW><ROW><id>20690169</id><snippet>any</snippet></ROW><ROW><id>20690169</id><snippet>if not np.dot(M, v).any():
</snippet></ROW><ROW><id>20690169</id><snippet>zeros</snippet></ROW><ROW><id>20690169</id><snippet>list</snippet></ROW><ROW><id>20690169</id><snippet>asarray</snippet></ROW><ROW><id>20690169</id><snippet>count_nonzero</snippet></ROW><ROW><id>20690169</id><snippet>== 0</snippet></ROW><ROW><id>20690169</id><snippet>allclose</snippet></ROW><ROW><id>20690191</id><snippet>read_csv</snippet></ROW><ROW><id>20690191</id><snippet>In [3]: df = DataFrame(dict(A = Timestamp('20130101'), B = np.random.randn(5), C = np.nan))

In [4]: df
Out[4]: 
                    A         B   C
0 2013-01-01 00:00:00 -0.859994 NaN
1 2013-01-01 00:00:00 -2.562136 NaN
2 2013-01-01 00:00:00  0.410673 NaN
3 2013-01-01 00:00:00  0.480578 NaN
4 2013-01-01 00:00:00  0.464771 NaN

[5 rows x 3 columns]

In [5]: df.dtypes
Out[5]: 
A    datetime64[ns]
B           float64
C           float64
dtype: object

In [6]: df['A'] = pd.to_datetime(df['A'])

In [7]: df['C'] = pd.to_datetime(df['C'])

In [8]: df
Out[8]: 
                    A         B   C
0 2013-01-01 00:00:00 -0.859994 NaT
1 2013-01-01 00:00:00 -2.562136 NaT
2 2013-01-01 00:00:00  0.410673 NaT
3 2013-01-01 00:00:00  0.480578 NaT
4 2013-01-01 00:00:00  0.464771 NaT

[5 rows x 3 columns]

In [9]: df.dtypes
Out[9]: 
A    datetime64[ns]
B           float64
C    datetime64[ns]
dtype: object
</snippet></ROW><ROW><id>20690191</id><snippet>convert_objects</snippet></ROW><ROW><id>20690191</id><snippet>to_datetime</snippet></ROW><ROW><id>20690200</id><snippet>u'\u00b1'.join(item)
</snippet></ROW><ROW><id>20690200</id><snippet>item</snippet></ROW><ROW><id>20690200</id><snippet>str</snippet></ROW><ROW><id>20690200</id><snippet>&gt;&gt;&gt; items = [r.split() for r in '''\
... 50.21  0.03
... 43.23  0.06
... 23.65  1.20
... 12.22  0.06
... 11.25  2.21
... '''.splitlines()]
&gt;&gt;&gt; items
[['50.21', '0.03'], ['43.23', '0.06'], ['23.65', '1.20'], ['12.22', '0.06'], ['11.25', '2.21']]
&gt;&gt;&gt; for item in items:
...     print u'\u00b1'.join(item)
... 
50.21±0.03
43.23±0.06
23.65±1.20
12.22±0.06
11.25±2.21
</snippet></ROW><ROW><id>20690287</id><snippet>groups.get_group('name')
</snippet></ROW><ROW><id>20690305</id><snippet>UserOrgConnections</snippet></ROW><ROW><id>20690305</id><snippet>orgs</snippet></ROW><ROW><id>20690305</id><snippet>request.user</snippet></ROW><ROW><id>20690305</id><snippet>orgs</snippet></ROW><ROW><id>20690305</id><snippet>user = request.user
userorgs = UserOrgConnections.objects.filter(user = user)
# at this point, you have all instances of UserOrgConnections
# for which the current user is the user value

print userorgs.values('orgs')       # as ValuesQuerySet
print [x.orgs for x in userorgs]    # as Python list
</snippet></ROW><ROW><id>20690657</id><snippet>for</snippet></ROW><ROW><id>20690657</id><snippet>t0</snippet></ROW><ROW><id>20690657</id><snippet>for</snippet></ROW><ROW><id>20690657</id><snippet>t1</snippet></ROW><ROW><id>20690657</id><snippet>t1 - t0 &lt; 1</snippet></ROW><ROW><id>20690657</id><snippet>time.sleep(1 - (t1 - t0))</snippet></ROW><ROW><id>20690657</id><snippet>datetime.datetime</snippet></ROW><ROW><id>20690657</id><snippet>datetime</snippet></ROW><ROW><id>20690657</id><snippet>datetime</snippet></ROW><ROW><id>20690657</id><snippet>timedelta</snippet></ROW><ROW><id>20690657</id><snippet>t0 = datetime.datetime.now()
for …
t1 = datetime.datetime.now()
td = (t1 - t0).total_seconds()
if td &lt; 1:
    time.sleep(1 - td)
</snippet></ROW><ROW><id>20690657</id><snippet>time</snippet></ROW><ROW><id>20690657</id><snippet>clock_gettime</snippet></ROW><ROW><id>20690657</id><snippet>t0 = time.clock_gettime(time.CLOCK_MONOTONIC)
for …
t1 = time.clock_gettime(time.CLOCK_MONOTONIC)
td = (t1 - t0) / time.clock_getres(time.CLOCK_MONOTONIC)
# same code as above
</snippet></ROW><ROW><id>20690657</id><snippet>CLOCK_MONOTONIC</snippet></ROW><ROW><id>20690657</id><snippet>CLOCK_HIGHRES</snippet></ROW><ROW><id>20690657</id><snippet>CLOCK_MONOTONIC_RAW</snippet></ROW><ROW><id>20690657</id><snippet>clock</snippet></ROW><ROW><id>20690657</id><snippet>perf_counter</snippet></ROW><ROW><id>20690657</id><snippet>process_time</snippet></ROW><ROW><id>20690657</id><snippet>time</snippet></ROW><ROW><id>20690657</id><snippet>datetime.datetime</snippet></ROW><ROW><id>20690657</id><snippet>time</snippet></ROW><ROW><id>20690666</id><snippet>class JobdtlSerializer(serializers.ModelSerializer):

    class Meta:
        model = Jobdtl

class JobmstSerializer(serializers.ModelSerializer):
    jobdtl_id = JobdtlSerializer()

    class Meta:
        model = Jobmst
</snippet></ROW><ROW><id>20690666</id><snippet>@csrf_exempt
def jobmst_list(request):
    """
    List all code snippets, or create a new snippet.
    """
    if request.method == 'GET':
        DEV = Jobmst.objects.using('AdmiralDEV').all()
        serializer = JobmstSerializer(DEV, many=True)
        return XMLResponse(serializer.data)

    elif request.method == 'POST':
        data = XMLParser().parse(request)
        serializer = JobmstSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return XMLResponse(serializer.data, status=201)
        else:
            return XMLResponse(serializer.errors, status=400)

@csrf_exempt
def jobmst_detail(request, pk):
    """
    Retrieve, update or delete a code snippet.
    """
    try:
        DEV = Jobmst.objects.using('AdmiralDEV').get(jobmst_id=pk)
    except Jobmst.DoesNotExist:
        return HttpResponse(status=404)

    if request.method == 'GET':
        serializer = JobmstSerializer(DEV)
        return XMLResponse(serializer.data)

    elif request.method == 'PUT':
        data = XMLParser().parse(request)
        serializer = JobmstSerializer(DEV, data=data)
        if serializer.is_valid():
            serializer.save()
            return XMLResponse(serializer.data)
        else:
            return XMLResponse(serializer.errors, status=400)

    elif request.method == 'DELETE':
        DEV.delete()
        return HttpResponse(status=204)
</snippet></ROW><ROW><id>20690778</id><snippet>Content-Length</snippet></ROW><ROW><id>20690778</id><snippet>def do_POST(self):
    content = bytes("TEST RESPONSE", "UTF-8")
    self.send_response(200)
    self.send_header("Content-type","text/plain")
    self.send_header("Content-Length", len(content))
    self.end_headers()
    print(self.rfile.read().decode("UTF-8"))
    self.wfile.write(content)
</snippet></ROW><ROW><id>20690778</id><snippet>rfile</snippet></ROW><ROW><id>20690778</id><snippet>def do_POST(self):
    content = bytes("TEST RESPONSE", "UTF-8")
    self.send_response(200)
    self.send_header("Content-type","text/plain")
    self.send_header("Content-Length", len(content))
    self.end_headers()
    print(self.rfile.read(int(self.headers['Content-Length'])).decode("UTF-8"))
    self.wfile.write(content)
</snippet></ROW><ROW><id>20690778</id><snippet>$ curl -X POST http://localhost:8000 -d 'testrequest'
TEST RESPONSE
</snippet></ROW><ROW><id>20690778</id><snippet>Content-Length</snippet></ROW><ROW><id>20690942</id><snippet>ids = self.foos.values_list('pk', flat=True)
</snippet></ROW><ROW><id>20690942</id><snippet>my_query.filter(foo__pk__in=ids)
</snippet></ROW><ROW><id>20690982</id><snippet>cardreader</snippet></ROW><ROW><id>20690982</id><snippet>import ATRdb as ATR
</snippet></ROW><ROW><id>20690982</id><snippet>ATRdb</snippet></ROW><ROW><id>20690982</id><snippet>import cardreader
</snippet></ROW><ROW><id>20690982</id><snippet>cardreader.py</snippet></ROW><ROW><id>20690982</id><snippet>main</snippet></ROW><ROW><id>20690982</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>20690982</id><snippet>cardreader</snippet></ROW><ROW><id>20690982</id><snippet>main</snippet></ROW><ROW><id>20690982</id><snippet>ATRdb</snippet></ROW><ROW><id>20690982</id><snippet>ATRdb</snippet></ROW><ROW><id>20690982</id><snippet>sys</snippet></ROW><ROW><id>20690982</id><snippet>MYSQLdb</snippet></ROW><ROW><id>20690982</id><snippet>datetime</snippet></ROW><ROW><id>20690982</id><snippet>checkPerms</snippet></ROW><ROW><id>20690982</id><snippet>ATRdb</snippet></ROW><ROW><id>20690982</id><snippet>main</snippet></ROW><ROW><id>20690982</id><snippet>ATR.checkPerms</snippet></ROW><ROW><id>20690982</id><snippet>ATRdb</snippet></ROW><ROW><id>20690982</id><snippet>cardreader</snippet></ROW><ROW><id>20690982</id><snippet>cardutils</snippet></ROW><ROW><id>20690982</id><snippet>ATRdb</snippet></ROW><ROW><id>20690982</id><snippet>cardreader</snippet></ROW><ROW><id>20691039</id><snippet>and</snippet></ROW><ROW><id>20691039</id><snippet>or</snippet></ROW><ROW><id>20691039</id><snippet>if now_time &gt;= time(23,00) or now_time &lt;= time(8,00):
    print "night"
</snippet></ROW><ROW><id>20691054</id><snippet>def f(x):
     return a calculation on x

f can also be lambda x: ....

df.groupby(['host','operation']).apply(f)
</snippet></ROW><ROW><id>20691222</id><snippet>&gt;&gt;&gt; '\xe2\x80\x94-test'.decode('utf8')
u'\u2014-test'
&gt;&gt;&gt; print '\xe2\x80\x94-test'.decode('utf8')
—-test
&gt;&gt;&gt; '\xe2\x80\x9cTest\xe2\x80\x9d'.decode('utf8')
u'\u201cTest\u201d'
&gt;&gt;&gt; print '\xe2\x80\x9cTest\xe2\x80\x9d'.decode('utf8')
“Test”
&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; for u in u'\u2014\u201c\u201d':
...     print u, unicodedata.name(u)
... 
— EM DASH
“ LEFT DOUBLE QUOTATION MARK
” RIGHT DOUBLE QUOTATION MARK
</snippet></ROW><ROW><id>20691222</id><snippet>unicode.translate()</snippet></ROW><ROW><id>20691222</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.argv = ['test.py', '\xe2\x80\x94-test', '\xe2\x80\x9cTest\xe2\x80\x9d']
&gt;&gt;&gt; map = {0x2014: u'-', 0x201c: u"'", 0x201d: u"'"}
&gt;&gt;&gt; sys.argv[1:] = [s.decode('utf8').translate(map).encode('utf8') for s in sys.argv[1:]]
&gt;&gt;&gt; sys.argv
['test.py', '--test', "'Test'"]
</snippet></ROW><ROW><id>20691225</id><snippet>command</snippet></ROW><ROW><id>20691225</id><snippet>bool1show= True</snippet></ROW><ROW><id>20691225</id><snippet>grid</snippet></ROW><ROW><id>20691225</id><snippet>def show_scale():
    # note: grid will remember the values you used when you first called grid
    the_scale.grid()

def hide_scale():
    # this removes the scale from view, but remembers where it was
    the_scale.grid_remove()

the_scale = Scale(master, from_=255, to=0, length =sll,width =slw, troughcolor = stc)
the_scale.grid(row=sly, column=5)
...
Button(master,text="show the slider", command show_scale).place(x=800,y=10)
Button(master,text="hide the slider", command hide_scale).place(x=900,y=10)
</snippet></ROW><ROW><id>20691247</id><snippet>python3</snippet></ROW><ROW><id>20691247</id><snippet>python3.3</snippet></ROW><ROW><id>20691247</id><snippet>python3.3</snippet></ROW><ROW><id>20691247</id><snippet>python3.3m</snippet></ROW><ROW><id>20691247</id><snippet>m</snippet></ROW><ROW><id>20691303</id><snippet>from django.conf.urls import patterns, url
from base import views

urlpatterns = patterns('',
    url(r'^$', views.index, name='index'),
    url(r'^item/new', views.newItem, name='newItem'),
    url(r'^item/submitted', views.itemSubmitted, name='itemSubmitted'),
)
</snippet></ROW><ROW><id>20691303</id><snippet>from django.conf.urls import patterns, url

urlpatterns = patterns('',
    url(r'^$', 'base.views.index', name='index'),
    url(r'^item/new', 'base.views.newItem', name='newItem'),
    url(r'^item/submitted', 'base.views.itemSubmitted', name='itemSubmitted'),
)
</snippet></ROW><ROW><id>20691303</id><snippet>from django.conf.urls import patterns, url

urlpatterns = patterns('base.views',
    url(r'^$', 'index', name='index'),
    url(r'^item/new', 'newItem', name='newItem'),
    url(r'^item/submitted', 'itemSubmitted', name='itemSubmitted'),
)
</snippet></ROW><ROW><id>20691501</id><snippet>python</snippet></ROW><ROW><id>20691501</id><snippet>python3</snippet></ROW><ROW><id>20691501</id><snippet>python2 whatever.py</snippet></ROW><ROW><id>20691565</id><snippet>&amp;</snippet></ROW><ROW><id>20691565</id><snippet>|</snippet></ROW><ROW><id>20691565</id><snippet>class</snippet></ROW><ROW><id>20691565</id><snippet>and</snippet></ROW><ROW><id>20691565</id><snippet>or</snippet></ROW><ROW><id>20691578</id><snippet>brew link --overwrite --dry-run python</snippet></ROW><ROW><id>20691578</id><snippet>*.py</snippet></ROW><ROW><id>20691606</id><snippet>&gt;&gt;&gt; import main
&gt;&gt;&gt; resp = main.app.get_response('/image')
&gt;&gt;&gt; resp.headerlist
[('Content-Type', u'image/jpg; charset=utf-8'), ('Content-Length', '4369913'), ('Cache-Control', 'no-cache')]
</snippet></ROW><ROW><id>20691606</id><snippet>Content-Type</snippet></ROW><ROW><id>20691684</id><snippet>//regname</snippet></ROW><ROW><id>20691684</id><snippet>/registers/register/regname</snippet></ROW><ROW><id>20691684</id><snippet>print(myXML.xpath('hello(string(//regname))'))
</snippet></ROW><ROW><id>20691764</id><snippet>def interest_by_year(self, year):
    interest = [self.amount]
    for i in xrange(self.time):
        interest.append(interest[i]*self.rate)
    return interest[year]
</snippet></ROW><ROW><id>20691764</id><snippet>ivt = Investor(10000, 1.072, 10)
for i in range(1, 6):
    print "year", i, "=", ivt.interest_by_year(i) 
</snippet></ROW><ROW><id>20691764</id><snippet>year 1 = 10720.0
year 2 = 11491.84
year 3 = 12319.25248
year 4 = 13206.2386586
year 5 = 14157.087842    
</snippet></ROW><ROW><id>20691784</id><snippet>auth | User | can add user
auth | User | can modify user
auth | User | can delete user
</snippet></ROW><ROW><id>20691784</id><snippet>import django.contrib.auth
# let's get the User permissions         
user_perms=django.contrib.auth.models.Permission.objects.filter(content_type__name='user')
# let's find a user
u = django.contrib.auth.models.User.objects.get(username='xxx')
# add the permissions to the user
for up in user_perms:
    u.user_permissions.add(up)
# and make the user a staff member
u.is_staff = True
u.save()
</snippet></ROW><ROW><id>20691912</id><snippet>for item_due in ItemDue.objects.filter(some_criteria).select_related():
    print item_due.item.ref_id
</snippet></ROW><ROW><id>20691913</id><snippet>__init__</snippet></ROW><ROW><id>20691913</id><snippet>__new__</snippet></ROW><ROW><id>20691913</id><snippet>__init__</snippet></ROW><ROW><id>20691913</id><snippet>float</snippet></ROW><ROW><id>20691913</id><snippet>&gt;&gt;&gt; class D(float):
...     def __new__(cls, *args, **kwargs):
...         print cls, args, kwargs
...         return super(D, cls).__new__(cls, *args, **kwargs)
...     def __init__(self, value):
...         print value
...
&gt;&gt;&gt; D('a')
&lt;class '__main__.D'&gt; ('a',) {}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in __new__
ValueError: could not convert string to float: a
</snippet></ROW><ROW><id>20691913</id><snippet>&gt;&gt;&gt; class D(float):
...     __slots__ = ['name']
...     def __new__(cls, *args, **kwargs):
...         name = kwargs.pop('name')
...         obj = super(D, cls).__new__(cls, *args, **kwargs)
...         obj.name = name
...         return obj
...
&gt;&gt;&gt; d = D(0, name='d')
&gt;&gt;&gt; e = D(1, name='e')
&gt;&gt;&gt; d, d.name
(0.0, 'd')
&gt;&gt;&gt; e, e.name
(1.0, 'e')
</snippet></ROW><ROW><id>20692045</id><snippet>p = p + test1</snippet></ROW><ROW><id>20692045</id><snippet>p</snippet></ROW><ROW><id>20692045</id><snippet>p += test1</snippet></ROW><ROW><id>20692045</id><snippet>p</snippet></ROW><ROW><id>20692045</id><snippet>p</snippet></ROW><ROW><id>20692045</id><snippet>test</snippet></ROW><ROW><id>20692045</id><snippet>p</snippet></ROW><ROW><id>20692045</id><snippet>test</snippet></ROW><ROW><id>20692045</id><snippet>p</snippet></ROW><ROW><id>20692045</id><snippet>test</snippet></ROW><ROW><id>20692072</id><snippet>print sorted(file_handle)</snippet></ROW><ROW><id>20692072</id><snippet>def sorting(self):
    filename = ("food.txt")
    file_handle = open(filename, "r")
    words = []
    for line in file_handle:
        words += line.split()
    file_handle.close()
    print sorted(words)
</snippet></ROW><ROW><id>20692072</id><snippet>print '\n'.sorted(words)
</snippet></ROW><ROW><id>20692072</id><snippet>strip</snippet></ROW><ROW><id>20692072</id><snippet>words +=</snippet></ROW><ROW><id>20692072</id><snippet>words += line.strip().split()
</snippet></ROW><ROW><id>20692072</id><snippet>"one two three\n"</snippet></ROW><ROW><id>20692072</id><snippet>split()</snippet></ROW><ROW><id>20692072</id><snippet>["one", "two", "three"]</snippet></ROW><ROW><id>20692072</id><snippet>\n</snippet></ROW><ROW><id>20692072</id><snippet>with</snippet></ROW><ROW><id>20692072</id><snippet>return</snippet></ROW><ROW><id>20692072</id><snippet>set</snippet></ROW><ROW><id>20692072</id><snippet>list</snippet></ROW><ROW><id>20692072</id><snippet>"that."</snippet></ROW><ROW><id>20692072</id><snippet>"John's"</snippet></ROW><ROW><id>20692072</id><snippet>"jack-o-lantern"</snippet></ROW><ROW><id>20692072</id><snippet>"two-three"</snippet></ROW><ROW><id>20692072</id><snippet>self</snippet></ROW><ROW><id>20692072</id><snippet>self</snippet></ROW><ROW><id>20692072</id><snippet>def sorting(filename):
    words = []
    with open(filename) as file_handle:
        for line in file_handle:
            words += line.split()
    return sorted(words)

print '\n'.join(sorting('food.txt'))
</snippet></ROW><ROW><id>20692226</id><snippet>iterrows</snippet></ROW><ROW><id>20692226</id><snippet>loc</snippet></ROW><ROW><id>20692226</id><snippet>&gt;&gt;&gt; for i, trial in dfTrials.iterrows():
...     dfTrials.loc[i, "response"] = "answer {}".format(trial["no"])
...     
&gt;&gt;&gt; dfTrials
   condition  no  response
0          2   1  answer 1
1          1   2  answer 2
2          1   3  answer 3

[3 rows x 3 columns]
</snippet></ROW><ROW><id>20692226</id><snippet>&gt;&gt;&gt; dfTrials["response 2"] = dfTrials["condition"] + dfTrials["no"]
&gt;&gt;&gt; dfTrials
   condition  no  response  response 2
0          2   1  answer 1           3
1          1   2  answer 2           3
2          1   3  answer 3           4

[3 rows x 4 columns]
</snippet></ROW><ROW><id>20692226</id><snippet>apply</snippet></ROW><ROW><id>20692226</id><snippet>&gt;&gt;&gt; def f(row):
...     return "c{}n{}".format(row["condition"], row["no"])
... 
&gt;&gt;&gt; dfTrials["r3"] = dfTrials.apply(f, axis=1)
&gt;&gt;&gt; dfTrials
   condition  no  response  response 2    r3
0          2   1  answer 1           3  c2n1
1          1   2  answer 2           3  c1n2
2          1   3  answer 3           4  c1n3

[3 rows x 5 columns]
</snippet></ROW><ROW><id>20692371</id><snippet>Counter</snippet></ROW><ROW><id>20692371</id><snippet>count</snippet></ROW><ROW><id>20692371</id><snippet>color =['orange', 'green', 'yellow', 'violet', 'blue']
sentences = ['The green monkey age the blue egg', 'How many yellow monkey"s are in the green forest']

for sent in sentences:
  print sent
  for col in color:
    print "", col, sent.count(col)
</snippet></ROW><ROW><id>20692371</id><snippet>The green monkey age the blue egg
 orange 0
 green 1
 yellow 0
 violet 0
 blue 1
How many yellow monkey"s are in the green forest
 orange 0
 green 1
 yellow 1
 violet 0
 blue 0
</snippet></ROW><ROW><id>20692371</id><snippet>for</snippet></ROW><ROW><id>20692371</id><snippet>for sent in sentences:
  print sent, sum(sent.count(col) for col in color)
</snippet></ROW><ROW><id>20692388</id><snippet>data_gen()</snippet></ROW><ROW><id>20692388</id><snippet>def data_gen(init_val):
    b = init_val
    while True:
        b += 1
        yield b

gen = data_gen(3)
print next(gen)
print 'starting loop'
for j in gen:
    print j
    if j &gt; 50:
        print "don't want to run forever, breaking"
        break
</snippet></ROW><ROW><id>20692400</id><snippet>week_song_list = []
seen_ids = []
for song in week_songs:
    if song.song_id not in seen_ids:
        week_song_list.append(song)
        seen_ids.append(song.song_id)
</snippet></ROW><ROW><id>20692541</id><snippet>result[1].get('givenName', '')
</snippet></ROW><ROW><id>20692541</id><snippet>'givenName'</snippet></ROW><ROW><id>20692541</id><snippet>'givenName'</snippet></ROW><ROW><id>20692541</id><snippet>[1]</snippet></ROW><ROW><id>20692541</id><snippet>[0]</snippet></ROW><ROW><id>20692541</id><snippet>result[1].get('givenName', [''])[0]
</snippet></ROW><ROW><id>20692541</id><snippet>[0]</snippet></ROW><ROW><id>20692541</id><snippet>def getfirst(attrs, key):
    list_or_none = attrs.get(key)
    return '' if list_or_none is None else list_or_none[0]
</snippet></ROW><ROW><id>20692541</id><snippet>d = {
    'firstname': getfirst(result[1], 'givenName'),
}
</snippet></ROW><ROW><id>20692541</id><snippet>enumerate</snippet></ROW><ROW><id>20692541</id><snippet>i</snippet></ROW><ROW><id>20692541</id><snippet>for result in results:</snippet></ROW><ROW><id>20692633</id><snippet>easy_install "..."</snippet></ROW><ROW><id>20692715</id><snippet>Formatter</snippet></ROW><ROW><id>20692715</id><snippet>set_xticklabels</snippet></ROW><ROW><id>20692715</id><snippet>set_yticklabels</snippet></ROW><ROW><id>20692715</id><snippet>fig, ax = plt.subplots()
ax.loglog(np.logspace(0, 5), np.logspace(0, 5)**2)
ax.xaxis.set_major_formatter(matplotlib.ticker.LogFormatterExponent())
</snippet></ROW><ROW><id>20692715</id><snippet>matplotlib.ticker.LogFormatterExponent</snippet></ROW><ROW><id>20692715</id><snippet>FuncFormatter</snippet></ROW><ROW><id>20692715</id><snippet>FuncFomatter</snippet></ROW><ROW><id>20692715</id><snippet>ax.xaxis.set_major_formatter(
   FuncFormatter(lambda x, pos: '{:0.1f}'.format(log10(x))))
</snippet></ROW><ROW><id>20692943</id><snippet>deferToThread</snippet></ROW><ROW><id>20692943</id><snippet>callFromThread</snippet></ROW><ROW><id>20692955</id><snippet>dict.keys()</snippet></ROW><ROW><id>20692955</id><snippet>for key in mydict.keys():
    if key == bad_value:
        del mydict[key]
</snippet></ROW><ROW><id>20692955</id><snippet>for i in len(thelist):</snippet></ROW><ROW><id>20692955</id><snippet>enumate</snippet></ROW><ROW><id>20692955</id><snippet>&gt;&gt;&gt; mylist = list("aabbccddeeffgghhii")
&gt;&gt;&gt; for x, v  in enumerate(mylist):
...     if v in "bdfh":
...         del mylist[x]
&gt;&gt;&gt; print mylist
['a', 'a', 'b', 'c', 'c', 'd', 'e', 'e', 'f', 'g', 'g', 'h', 'i', 'i']
</snippet></ROW><ROW><id>20692955</id><snippet>&gt;&gt;&gt; mylist = list("aabbccddeeffgghhii")
&gt;&gt;&gt; for x in reversed(range(len(mylist))):
...     if mylist[x] in "bdfh":
...         del mylist[x]
&gt;&gt;&gt; print mylist
['a', 'a', 'c', 'c', 'e', 'e', 'g', 'g', 'i', 'i']
</snippet></ROW><ROW><id>20692955</id><snippet>def scrub(obj, bad="_this_is_bad"):
    if isinstance(obj, dict):
        for k in obj.keys():
            if k == bad:
                del obj[k]
            else:
                scrub(obj[k], bad)
    elif isinstance(obj, list):
        for i in reversed(range(len(obj))):
            if obj[i] == bad:
                del obj[i]
            else:
                scrub(obj[i], bad)

    else:
        # neither a dict nor a list, do nothing
        pass
</snippet></ROW><ROW><id>20693105</id><snippet>save</snippet></ROW><ROW><id>20693105</id><snippet>class Subnet(models.Model):
    network_address = models.IPAddressField()
    subnet_prefix = models.ForeignKey(SubnetPrefix)

    def save(self, *args, **kwargs):
        created = not self.pk
        super(Subnet, self).save(*args, **kwargs)
        if created:
            create_ip_addresses(self)
</snippet></ROW><ROW><id>20693310</id><snippet>while backPay &gt;= 0:
    balance2 -= standPay2
    backPay += 1
</snippet></ROW><ROW><id>20693310</id><snippet>backPay</snippet></ROW><ROW><id>20693310</id><snippet>backPay &gt;= 0</snippet></ROW><ROW><id>20693310</id><snippet>backPay -= 1</snippet></ROW><ROW><id>20693336</id><snippet>zip</snippet></ROW><ROW><id>20693336</id><snippet>str.split</snippet></ROW><ROW><id>20693336</id><snippet>for i in values.split(","):
</snippet></ROW><ROW><id>20693336</id><snippet>&gt;&gt;&gt; def sum_given(values):
...     s = 0
...     for i in values.split(","):
...         s += int(i)
...     return s
...
&gt;&gt;&gt; v_list = input("Enter values to be summed.\n&gt; ")
Enter values to be summed.
&gt; 1,2,3,4,5
&gt;&gt;&gt; result_of_sum = sum_given(v_list)
&gt;&gt;&gt; print(result_of_sum)
15
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20693336</id><snippet>sum</snippet></ROW><ROW><id>20693336</id><snippet>&gt;&gt;&gt; def sum_given(values):
...     return sum(int(x) for x in values.split(","))
...
&gt;&gt;&gt; v_list = input("Enter values to be summed.\n&gt; ")
Enter values to be summed.
&gt; 1,2,3,4,5
&gt;&gt;&gt; result_of_sum = sum_given(v_list)
&gt;&gt;&gt; print(result_of_sum)
15
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20693424</id><snippet>..</snippet></ROW><ROW><id>20693424</id><snippet>In [93]: os.path.normpath(os.path.join(path1,path2))
Out[93]: '../Source/directory/Common/headerFile.h'
</snippet></ROW><ROW><id>20693430</id><snippet>&gt;&gt;&gt; Line = "A[0x04] Va   [0xf]"
&gt;&gt;&gt; [x.partition(']')[0] for x in Line.split('[') if ']' in x]
['0x04', '0xf']
</snippet></ROW><ROW><id>20693712</id><snippet>name :: word of alphanumeric characters
entry :: name '=' value
struct :: '{' entry* '}'
value :: real | integer | quotedstring | struct
</snippet></ROW><ROW><id>20693712</id><snippet>EQ,LBRACE,RBRACE = map(Suppress,"={}")

name = Word(alphas, alphanums+"_")
value = Forward()
entry = Group(name + EQ + value)

real = Regex(r"[+-]?\d+\.\d*").setParseAction(lambda x: float(x[0]))
integer = Regex(r"[+-]?\d+").setParseAction(lambda x: int(x[0]))
quotedString.setParseAction(removeQuotes)

struct = Group(LBRACE + ZeroOrMore(entry) + RBRACE)
value &lt;&lt; (quotedString | struct | real | integer)
</snippet></ROW><ROW><id>20693712</id><snippet>result = OneOrMore(entry).parseString(sample)
</snippet></ROW><ROW><id>20693712</id><snippet>from pprint import pprint
pprint(result.asList())
</snippet></ROW><ROW><id>20693712</id><snippet>[['company', 'My Company'],
 ['phone', '555-5555'],
 ['people',
  [['person',
    [['name', 'Bob'],
     ['location', 'Seattle'],
     ['settings', [['size', 1], ['color', 'red']]]]],
   ['person',
    [['name', 'Joe'],
     ['location', 'Seattle'],
     ['settings', [['size', 2], ['color', 'blue']]]]]]]]
</snippet></ROW><ROW><id>20693712</id><snippet>struct = Dict(LBRACE + ZeroOrMore(entry) + RBRACE)
</snippet></ROW><ROW><id>20693712</id><snippet>result = Dict(OneOrMore(entry)).parseString(sample)
</snippet></ROW><ROW><id>20693712</id><snippet>print result['phone']
</snippet></ROW><ROW><id>20693712</id><snippet>print result.company
</snippet></ROW><ROW><id>20693712</id><snippet>for person in result.people:
    print person.dump()
    print
</snippet></ROW><ROW><id>20693712</id><snippet>['person', ['name', 'Bob'], ['location', 'Seattle'], ['settings', ['size', 1], ['color', 'red']]]
- location: Seattle
- name: Bob
- settings: [['size', 1], ['color', 'red']]
  - color: red
  - size: 1

['person', ['name', 'Joe'], ['location', 'Seattle'], ['settings', ['size', 2], ['color', 'blue']]]
- location: Seattle
- name: Joe
- settings: [['size', 2], ['color', 'blue']]
  - color: blue
  - size: 2
</snippet></ROW><ROW><id>20693716</id><snippet>v = sigma * np.random.randn(v_size) + b + sigma * W.dot(h)
</snippet></ROW><ROW><id>20693716</id><snippet>scipy.stats.norm</snippet></ROW><ROW><id>20693731</id><snippet>db.define_table('dept',
    Field('name',unique=True,label='Department Name'),
    format='%(name)s')
</snippet></ROW><ROW><id>20693731</id><snippet>IS_IN_DB</snippet></ROW><ROW><id>20693914</id><snippet>def prefix(x, y):
    comp = SequenceMatcher(None, x, y)
    matches = comp.get_matching_blocks()
    prefix_match = matches[0]
    prefix_size = prefix_match[2]
    return prefix_size

pairs = zip(files, files[1:])
matches = (prefix(x, y) for x, y in pairs)
prefixlen = min(matches)
prefix = files[0][:prefixlen]
</snippet></ROW><ROW><id>20693914</id><snippet>prefix</snippet></ROW><ROW><id>20693914</id><snippet>map</snippet></ROW><ROW><id>20693914</id><snippet>[2]</snippet></ROW><ROW><id>20693914</id><snippet>.size</snippet></ROW><ROW><id>20693914</id><snippet>difflib</snippet></ROW><ROW><id>20693914</id><snippet>get_matching_blocks</snippet></ROW><ROW><id>20693914</id><snippet>tuple</snippet></ROW><ROW><id>20693914</id><snippet>namedtuple</snippet></ROW><ROW><id>20693914</id><snippet>print</snippet></ROW><ROW><id>20693914</id><snippet>pairs</snippet></ROW><ROW><id>20693914</id><snippet>zip</snippet></ROW><ROW><id>20693914</id><snippet>names</snippet></ROW><ROW><id>20693914</id><snippet>names[1:]</snippet></ROW><ROW><id>20693914</id><snippet>print(zip(names, names[1:])</snippet></ROW><ROW><id>20693914</id><snippet>print(list(zip(names, names[1:]))</snippet></ROW><ROW><id>20693914</id><snippet>zip</snippet></ROW><ROW><id>20693914</id><snippet>prefix</snippet></ROW><ROW><id>20693914</id><snippet>min</snippet></ROW><ROW><id>20693914</id><snippet>prefixlen = min(SequenceMatcher(None, x, y).get_matching_blocks()[0][2] 
                for x, y in zip(files, files[1:]))
prefix = files[0][:prefixlen]
</snippet></ROW><ROW><id>20693914</id><snippet>SequenceMatcher</snippet></ROW><ROW><id>20693914</id><snippet>def prefixes(name):
    while name:
        yield name
        name = name[:-1]

def maxprefix(names):
    first, names = names[0], names[1:]
    for prefix in prefixes(first):
        if all(name.startswith(prefix) for name in names):
            return prefix
</snippet></ROW><ROW><id>20693914</id><snippet>prefixes(first)</snippet></ROW><ROW><id>20693914</id><snippet>'FilePrefix10.jpg'</snippet></ROW><ROW><id>20693914</id><snippet>'FilePrefix10.jp',</snippet></ROW><ROW><id>20693914</id><snippet>, etc. down to</snippet></ROW><ROW><id>20693914</id><snippet>def maxprefix(names):
    for i, letters in enumerate(zip(*names)):
        if len(set(letters)) &gt; 1:
            return names[0][:i]
</snippet></ROW><ROW><id>20693914</id><snippet>zip</snippet></ROW><ROW><id>20693914</id><snippet>[('F', 'F', 'F', 'F'), ('i', 'i', 'i', 'i'), …]</snippet></ROW><ROW><id>20693914</id><snippet>enumerate</snippet></ROW><ROW><id>20693914</id><snippet>('F', 'F', 'F', 'F')</snippet></ROW><ROW><id>20693914</id><snippet>0, ('F, 'F', F', 'F')</snippet></ROW><ROW><id>20693914</id><snippet>('F', 'F', 'F', 'F')</snippet></ROW><ROW><id>20693914</id><snippet>set</snippet></ROW><ROW><id>20693914</id><snippet>{'F'}</snippet></ROW><ROW><id>20693914</id><snippet>{'i'}</snippet></ROW><ROW><id>20693914</id><snippet>{'1', '2'}</snippet></ROW><ROW><id>20693971</id><snippet>author=</snippet></ROW><ROW><id>20693971</id><snippet>user=</snippet></ROW><ROW><id>20693971</id><snippet>p = Post(body='FIPO!!', timestamp = dt.now(), author=u)
</snippet></ROW><ROW><id>20693971</id><snippet>p = Post(body='FIPO!!', timestamp = dt.now(), user=u)
</snippet></ROW><ROW><id>20694043</id><snippet>db = Database(app)
db.database.execute_sql("some query", [param1, param2])
</snippet></ROW><ROW><id>20694043</id><snippet>MerchantDetails</snippet></ROW><ROW><id>20694043</id><snippet>dist = fn.haversine(
    34.0160, 
    -118.4925, 
    MerchantDetails.lat, 
    MerchantDetails.long, 
    'MILES')
MerchantDetails.select(MerchantDetails, dist.alias('dist')).having(dist &lt; 6000)
</snippet></ROW><ROW><id>20694043</id><snippet>SELECT A.* , haversine('34.0160',' -118.4925', A.lat, A.long, 'MILES') AS dist 
FROM merchant_details A 
HAVING haversine('34.0160', '-118.4925', A.lat, A.long, 'MILES') &lt;6000
</snippet></ROW><ROW><id>20694055</id><snippet>plugins/__init__.py</snippet></ROW><ROW><id>20694055</id><snippet>plugins</snippet></ROW><ROW><id>20694055</id><snippet>import plugins.plugin
</snippet></ROW><ROW><id>20694055</id><snippet>importlib</snippet></ROW><ROW><id>20694055</id><snippet>__import__</snippet></ROW><ROW><id>20694055</id><snippet>plugin = importlib.import_module('plugins.{name}'.format(name=pluginname))
</snippet></ROW><ROW><id>20694055</id><snippet>import plugins</snippet></ROW><ROW><id>20694055</id><snippet>import_module</snippet></ROW><ROW><id>20694055</id><snippet>plugins</snippet></ROW><ROW><id>20694055</id><snippet>/usr/share/myapp/plugins</snippet></ROW><ROW><id>20694055</id><snippet>/etc/myapp/plugins</snippet></ROW><ROW><id>20694055</id><snippet>~/myapp/plugins</snippet></ROW><ROW><id>20694055</id><snippet>SourceLoader</snippet></ROW><ROW><id>20694055</id><snippet>gzip</snippet></ROW><ROW><id>20694055</id><snippet>gzip</snippet></ROW><ROW><id>20694055</id><snippet>gzip</snippet></ROW><ROW><id>20694055</id><snippet>gzip</snippet></ROW><ROW><id>20694055</id><snippet>plugins.gzip</snippet></ROW><ROW><id>20694055</id><snippet>execfile</snippet></ROW><ROW><id>20694070</id><snippet># Import modules
import subprocess, sys, os
script_path = os.path.dirname(__file__)
myutils_path = os.path.join(script_path, '../myutils')
sys.path.append(myutils_path)
import myutils
</snippet></ROW><ROW><id>20694280</id><snippet>numba</snippet></ROW><ROW><id>20694280</id><snippet>from numba import autojit

def filtfunc(a):
    idx = []
    for ii in range(a.shape[0]):
        if (a[ii, 0] &gt; 1):
            idx.append(ii)
            if (len(idx) == 2):
                break
    return a[idx]

jit_filter = autojit(filtfunc)
</snippet></ROW><ROW><id>20694280</id><snippet>def marco_filter(a):
    return a[a[:,0] &gt; 1][:2]

def rico_filter(a):
    mask = a[:, 0] &gt; 1
    where = np.where(mask)[0][:2]
    return a[where]
</snippet></ROW><ROW><id>20694280</id><snippet>%%timeit a = np.random.random_integers(1, 12, (1000,1000))
marco_filter(a)
# 100 loops, best of 3: 11.6 ms per loop

%%timeit a = np.random.random_integers(1, 12, (1000,1000))
rico_filter(a)
# 10000 loops, best of 3: 44.8 µs per loop

%%timeit a = np.random.random_integers(1, 12, (1000,1000))
jit_filter(a)
# 10000 loops, best of 3: 30.7 µs per loop
</snippet></ROW><ROW><id>20694314</id><snippet>lambda</snippet></ROW><ROW><id>20694314</id><snippet>    findButton.clicked.connect(
        lambda: self.find(findField.text()))
</snippet></ROW><ROW><id>20694447</id><snippet>Bar</snippet></ROW><ROW><id>20694447</id><snippet>Foo</snippet></ROW><ROW><id>20694447</id><snippet>import types
import functools

def make_delegating_type(delegatee):
    class DelegatingType(type):
        def __getattr__(self, name):
            obj = getattr(delegatee, name)
            if isinstance(obj, (types.FunctionType, types.MethodType)):
                @functools.wraps(obj)
                def wrapper(*args, **kwargs):
                    result = obj(*args, **kwargs)
                    if isinstance(result, delegatee):
                        return self(result)
                    return result
                return wrapper
            return obj
    return DelegatingType

class Foo(object):
    def __init__(self, a): self.a = a

    @classmethod
    def from_a(cls, a): return cls(a)

class Bar(object):
    __metaclass__ = make_delegating_type(Foo)
    def __init__(self, foo): self._foo = foo

    def __getattr__(self, name): return getattr(self._foo, name)
</snippet></ROW><ROW><id>20694447</id><snippet>class Bar(object, metaclass=make_delegating_type(Foo)</snippet></ROW><ROW><id>20694447</id><snippet>__metaclass__ = make_delegating_type(Foo)</snippet></ROW><ROW><id>20694447</id><snippet>Bar</snippet></ROW><ROW><id>20694447</id><snippet>Bar</snippet></ROW><ROW><id>20694447</id><snippet>Foo</snippet></ROW><ROW><id>20694447</id><snippet>Bar</snippet></ROW><ROW><id>20694447</id><snippet>Foo</snippet></ROW><ROW><id>20694447</id><snippet>__getattr__</snippet></ROW><ROW><id>20694447</id><snippet>getattr(delegatee, name)</snippet></ROW><ROW><id>20694447</id><snippet>Bar.from_a(5)</snippet></ROW><ROW><id>20694447</id><snippet>Bar(Foo.from_a(5))</snippet></ROW><ROW><id>20694447</id><snippet>Foo.from_a(5)</snippet></ROW><ROW><id>20694447</id><snippet>from_a</snippet></ROW><ROW><id>20694447</id><snippet>Bar</snippet></ROW><ROW><id>20694447</id><snippet>Bar</snippet></ROW><ROW><id>20694447</id><snippet>Foo</snippet></ROW><ROW><id>20694481</id><snippet>for i,s in map(lambda n: (n,(n*(n+1))/2), range(1,101)):
    print "sum of the first %d integers: %d" % (i,s)
</snippet></ROW><ROW><id>20694749</id><snippet>def combine(L):
    results = {}
    for item in L:
        key = (item["date"], item["price"])
        if key in results:  # combine them
            results[key] = {"date": item["date"], "price": item["price"], "amount": item["amount"] + results[key]["amount"]}
        else:  # don't need to combine them
            results[key] = item
    return results.values()
</snippet></ROW><ROW><id>20694856</id><snippet>zip</snippet></ROW><ROW><id>20694856</id><snippet>newList = [[(x-Gradient)*y] for x,y in zip(signalxOP,appliedFieldOP)]
</snippet></ROW><ROW><id>20695095</id><snippet>ValueError</snippet></ROW><ROW><id>20695095</id><snippet>listremove</snippet></ROW><ROW><id>20695095</id><snippet>PyObject_RichCompareBool</snippet></ROW><ROW><id>20695095</id><snippet>PyObject_RichCompareBool</snippet></ROW><ROW><id>20695095</id><snippet>/* Quick result when objects are the same.
   Guarantees that identity implies equality. */
if (v == w) {
    if (op == Py_EQ)
        return 1;
    else if (op == Py_NE)
        return 0;
}

res = PyObject_RichCompare(v, w, op);
</snippet></ROW><ROW><id>20695095</id><snippet>1</snippet></ROW><ROW><id>20695125</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; def f_breaks(match):
...     return match.group().replace('\n', ',')
...
&gt;&gt;&gt; msg = 'YOUR STRING DATA'
&gt;&gt;&gt; re.sub(r'(?si)(?&lt;=message:\t).*?(?=\ncreated_time:)', f_breaks, msg)
</snippet></ROW><ROW><id>20695125</id><snippet>Working demo</snippet></ROW><ROW><id>20695142</id><snippet>&gt;&gt;&gt; s = 'call,me r c++ c# 132(list) 2345sdf;sdf_sfg? "adf-sdf aso.net? foo. bar.'
&gt;&gt;&gt; re.findall(r'\b\w[\w#+.-]*(?&lt;!\.)', s)
['call', 'me', 'r', 'c++', 'c#', '132', 'list', '2345sdf', 'sdf_sfg', 'adf-sdf', 'aso.net', 'foo', 'bar']
</snippet></ROW><ROW><id>20695142</id><snippet>#+.-</snippet></ROW><ROW><id>20695215</id><snippet>https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=1234567890123.apps.googleusercontent.com&amp;redirect_uri=urn:ietf:wg:oauth:2.0:oob&amp;scope=https://adwords.google.com/api/adwords/&amp;access_type=offline</snippet></ROW><ROW><id>20695215</id><snippet>access_type</snippet></ROW><ROW><id>20695215</id><snippet>offline</snippet></ROW><ROW><id>20695215</id><snippet>code</snippet></ROW><ROW><id>20695215</id><snippet>curl -v --data "code=4/v6xr77ewYqhvHSyW6UJ1w7jKwAzu&amp;client_id=8819981768.apps.googleusercontent.com&amp;client_secret={client_secret}&amp;redirect_uri=urn:ietf:wg:oauth:2.0:oob&amp;grant_type=authorization_code" https://accounts.google.com/o/oauth2/token</snippet></ROW><ROW><id>20695215</id><snippet>{
  "access_token":"1/fFAGRNJru1FTz70BzhT3Zg",
  "expires_in":3920,
  "token_type":"Bearer",
  "refresh_token":"1/xEoDL4iW3cxlI7yDbSRFYNG01kVKM2C-259HOF2aQbI"
}
</snippet></ROW><ROW><id>20695215</id><snippet>curl -v --data "client_id=8819981768.apps.googleusercontent.com&amp;
client_secret={client_secret}&amp;refresh_token=1/xEoDL4iW3cxlI7yDbSRFYNG01kVKM2C-259HOF2aQbI&amp;
grant_type=refresh_token" https://accounts.google.com/o/oauth2/token</snippet></ROW><ROW><id>20695263</id><snippet>from xml.dom import minidom
import os, time, shutil

domConf=('/home/test/JBoss/jboss-eap-6.2/domain/configuration/domain.xml')
resultFile='result.xml'
commentSub=('urn:jboss:domain:messaging:1.4')

now=str(int(time.time()))
bkup=(domConf+now)
shutil.copy2(domConf, bkup)

xmldoc = minidom.parse(domConf)
itemlist = xmldoc.getElementsByTagName('subsystem')
for s in itemlist:
        if commentSub in s.attributes['xmlns'].value:
            commentText = s.toxml()
            commentText = commentText.replace('--', '- -')
            s.parentNode.insertBefore(xmldoc.createComment(commentText), s)
            s.parentNode.removeChild(s)
file = open("result.xml", "wb")
xmldoc.writexml(file)
file.write('\n')
file.close()

shutil.copy2(resultFile, domConf)
</snippet></ROW><ROW><id>20695535</id><snippet>def delete_eof(fin, fout):
    BUFSIZE = 2**15
    EOFCHAR = chr(26)
    data = fin.read(BUFSIZE)
    while data:
        fout.write(data.translate(None, EOFCHAR))
        data = fin.read(BUFSIZE)

import sys
ipath = sys.argv[1]
opath = ipath + ".new"
with open(ipath, "rb") as fin, open(opath, "wb") as fout:
    delete_eof(fin, fout)
</snippet></ROW><ROW><id>20695535</id><snippet>chr(26)</snippet></ROW><ROW><id>20695535</id><snippet>.new</snippet></ROW><ROW><id>20695543</id><snippet>callable</snippet></ROW><ROW><id>20695543</id><snippet>types.FunctionType</snippet></ROW><ROW><id>20695543</id><snippet>callable</snippet></ROW><ROW><id>20695578</id><snippet>accepted = cgminer.command('summary')['SUMMARY'][0]['Difficulty Accepted']
</snippet></ROW><ROW><id>20695646</id><snippet>Dr.</snippet></ROW><ROW><id>20695646</id><snippet>Mr.</snippet></ROW><ROW><id>20695646</id><snippet>patt = r'(?:Dr\.|Mr\.|.)*?[.!?]\s?\n?'
</snippet></ROW><ROW><id>20695646</id><snippet>Mr.</snippet></ROW><ROW><id>20695646</id><snippet>Dr.</snippet></ROW><ROW><id>20695646</id><snippet>{Hello there|Hello|Howdy} Dr. Munchauson you {gentleman|fine fellow}! What {will|shall|should} we {eat|have} for lunch? Peas by the {thousand|hundred|1000} said Dr. Munchauson; {that|is} what he said.

But there are no {misters|doctors} here good sir! Help us if there is an emergency.

I am the {very last|last} sentence for this {instance|example}.
</snippet></ROW><ROW><id>20695646</id><snippet>{Hello there|Hello|Howdy} Dr. Munchauson you {gentleman|fine fellow}!
What {will|shall|should} we {eat|have} for lunch?
Peas by the {thousand|hundred|1000} said Dr. Munchauson; {that|is} what he said.

newline
But there are no {misters|doctors} here good sir!
Help us if there is an emergency.

newline
I am the {very last|last} sentence for this {instance|example}.
</snippet></ROW><ROW><id>20695713</id><snippet>app1</snippet></ROW><ROW><id>20695713</id><snippet>Bottle.merge</snippet></ROW><ROW><id>20695713</id><snippet>if __name__ == '__main__':
    app0.merge(app1)
    app0.run()
</snippet></ROW><ROW><id>20695824</id><snippet>import numpy as np
from scipy.optimize import minimize
from matplotlib import pyplot as pp

# function that defines the model we're fitting
def gaussian(P, x):
    a, b, c = P
    return a*np.exp(-(x-b)**2 /( 2*c**2))

# objective function to minimize
def loss(P, x, y):
    yhat = gaussian(P, x)
    return ((y - yhat)**2).sum()

# generate a gaussian distribution with known parameters
amp = 1.3543
pos = 64.546
var = 12.234
P_real = np.array([amp, pos, var])

# we use the vector of real parameters to generate our fake data
x = np.arange(100)
y = gaussian(P_real, x)
# add some gaussian noise to make things harder
y_noisy = y + np.random.randn(y.size)*0.5

# minimize needs an initial guess at the model parameters
P_guess = np.array([1, 50, 25])

# minimize provides a unified interface to all of scipy's solvers. you
# can also access them individually in scipy.optimize, but the
# standalone versions have annoying differences in their syntax. for now
# we'll use the Nelder-Mead solver, which doesn't use the Jacobian. we
# also need to hand it x and y_noisy as additional args to loss()
res = minimize(loss, P_guess, method='Nelder-Mead', args=(x, y_noisy))

# res is a dict containing the results of the optimization. in particular we
# want the optimized model parameters:
P_fit = res['x']

# we can pass these to gaussian() to evaluate our fitted model
y_fit = gaussian(P_fit, x)

# now let's plot the results:
fig, ax = pp.subplots(1,1)
ax.hold(True)
ax.plot(x, y, '-r', lw=2, label='Real')
ax.plot(x, y_noisy, '-k', alpha=0.5, label='Noisy')
ax.plot(x, y_fit, '--b', lw=5, label='Fit')
ax.legend(loc=0, fancybox=True)
</snippet></ROW><ROW><id>20695879</id><snippet>a = [[1], [1, 2], [1, 2, 3]]
print min(a, key = lambda x:len(x))
print locals()
</snippet></ROW><ROW><id>20695879</id><snippet>len</snippet></ROW><ROW><id>20695879</id><snippet>l = [1, 2]
lambda: l = []
</snippet></ROW><ROW><id>20695879</id><snippet>SyntaxError: can't assign to lambda</snippet></ROW><ROW><id>20696006</id><snippet>ipconfig - Windows CMD
ifconfig - Linux Shell, Mac Terminal
</snippet></ROW><ROW><id>20696006</id><snippet>localhost</snippet></ROW><ROW><id>20696006</id><snippet>server_address = ('myip', 10000)
</snippet></ROW><ROW><id>20696006</id><snippet>server_address = ('myip', 10000)
</snippet></ROW><ROW><id>20696173</id><snippet>def split_at_idx(s, idx):
    return [s[i:j] for i,j in zip([0]+idx, idx+[None])]
</snippet></ROW><ROW><id>20696173</id><snippet>&gt;&gt;&gt; split_at_idx(string.ascii_letters, [3, 10, 12, 40])
['abc', 'defghij', 'kl', 'mnopqrstuvwxyzABCDEFGHIJKLMN', 'OPQRSTUVWXYZ']
&gt;&gt;&gt; split_at_idx(string.ascii_letters, [])
['abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ']
&gt;&gt;&gt; split_at_idx(string.ascii_letters, [13, 26, 39])
['abcdefghijklm', 'nopqrstuvwxyz', 'ABCDEFGHIJKLM', 'NOPQRSTUVWXYZ']
</snippet></ROW><ROW><id>20696319</id><snippet>get_search_fields</snippet></ROW><ROW><id>20696319</id><snippet>class ImagesDBAdmin(admin.ModelAdmin):
        fieldsets[# bunch of fields placed
            ]
        def get_search_fields(self, request):
             search_fields = ['ptsxy']
             if "localhost:8000" in request.META['HTTP_REFERER']:
                  search_fields = ["ptsxy__lat"]
             return search_fields
</snippet></ROW><ROW><id>20696402</id><snippet> options = get_options() #assuming the function that populates the options is called get_options
</snippet></ROW><ROW><id>20696536</id><snippet>listpack_list = (["data", "data", "data"], ["test", "test", "test"], ["sof", "sof", "sof"])
import random
rem = random.randrange(3)
varToBePrinted, Main1, Main2 = listpack_list[rem]
listpack_list = tuple(item for index, item in enumerate(listpack_list) if index != rem)
print varToBePrinted
</snippet></ROW><ROW><id>20697028</id><snippet>data_list = list(data_gen)</snippet></ROW><ROW><id>20697028</id><snippet># copied directly from the proposed fix
def monkey_patch_init(self, fig, func, frames=None, init_func=None, fargs=None,
             save_count=None, **kwargs):
    if fargs:
        self._args = fargs
    else:
        self._args = ()
    self._func = func

    # Amount of framedata to keep around for saving movies. This is only
    # used if we don't know how many frames there will be: in the case
    # of no generator or in the case of a callable.
    self.save_count = save_count

    # Set up a function that creates a new iterable when needed. If nothing
    # is passed in for frames, just use itertools.count, which will just
    # keep counting from 0. A callable passed in for frames is assumed to
    # be a generator. An iterable will be used as is, and anything else
    # will be treated as a number of frames.
    if frames is None:
        self._iter_gen = itertools.count
    elif six.callable(frames):
        self._iter_gen = frames
    elif iterable(frames):
        self._iter_gen = lambda: iter(frames)
        if hasattr(frames, '__len__'):
            self.save_count = len(frames)
    else:
        self._iter_gen = lambda: xrange(frames).__iter__()
        self.save_count = frames

    # If we're passed in and using the default, set it to 100.
    if self.save_count is None:
        self.save_count = 100

    self._init_func = init_func

    # Needs to be initialized so the draw functions work without checking
    self._save_seq = []

    TimedAnimation.__init__(self, fig, **kwargs)

    # Need to reset the saved seq, since right now it will contain data
    # for a single frame from init, which is not what we want.
    self._save_seq = []
</snippet></ROW><ROW><id>20697028</id><snippet>monkey_patch_init</snippet></ROW><ROW><id>20697028</id><snippet>__init__</snippet></ROW><ROW><id>20697028</id><snippet>matplotlib.animation.FuncAnimation.__init__ = monkey_patch_init
</snippet></ROW><ROW><id>20697028</id><snippet>ani = animation.FuncAnimation(fig, update, frames=data_gen(a), init_func=init, interval=10, blit=True)
</snippet></ROW><ROW><id>20697028</id><snippet>plot</snippet></ROW><ROW><id>20697028</id><snippet>pyplot</snippet></ROW><ROW><id>20697028</id><snippet>ipython --pylab</snippet></ROW><ROW><id>20697028</id><snippet>plot</snippet></ROW><ROW><id>20697028</id><snippet>matplotlib.pyplot.plot</snippet></ROW><ROW><id>20697028</id><snippet>plt.gca().plot</snippet></ROW><ROW><id>20697069</id><snippet>&gt;&gt;&gt; import numpy as np, pandas as pd
&gt;&gt;&gt; import io, pkgutil
&gt;&gt;&gt; wells = pkgutil.get_data('pymc.examples', 'data/wells.dat')
&gt;&gt;&gt; type(wells)
&lt;class 'bytes'&gt;
&gt;&gt;&gt; df = pd.read_csv(io.BytesIO(wells), encoding='utf8', sep=" ", index_col="id", dtype={"switch": np.int8})
&gt;&gt;&gt; df.head()
    switch  arsenic       dist  assoc  educ
id                                         
1        1     2.36  16.826000      0     0
2        1     0.71  47.321999      0     0
3        0     2.07  20.966999      0    10
4        1     1.15  21.486000      0    12
5        1     1.10  40.874001      1    14

[5 rows x 5 columns]
</snippet></ROW><ROW><id>20697069</id><snippet>wells.dat</snippet></ROW><ROW><id>20697069</id><snippet>read_csv</snippet></ROW><ROW><id>20697069</id><snippet>BytesIO</snippet></ROW><ROW><id>20697069</id><snippet>io.TextIOWrapper</snippet></ROW><ROW><id>20697162</id><snippet>fig, ax = plt.subplots()

ax.plot([.5], [.5], 'bo')
ax.annotate(u'tt', xy=(.5, .5), xytext=(-6, -6), textcoords='offset points')
</snippet></ROW><ROW><id>20697163</id><snippet>µ</snippet></ROW><ROW><id>20697163</id><snippet>μ</snippet></ROW><ROW><id>20697163</id><snippet>&gt;&gt;&gt; u'\xb5'.swapcase()
u'\u039c'
&gt;&gt;&gt; u'\u03bc'.swapcase()
u'\u039c'
</snippet></ROW><ROW><id>20697163</id><snippet>str.swapcase()</snippet></ROW><ROW><id>20697163</id><snippet>&gt;&gt;&gt; u'\xb5'.swapcase().swapcase()
u'\u03bc'
</snippet></ROW><ROW><id>20697193</id><snippet>&gt;&gt;&gt; A = np.zeros((5, 7),dtype=bool)
&gt;&gt;&gt; B = np.array([0,1,3,0,2])
&gt;&gt;&gt; (np.arange(len(A[0])) &lt; B[:,None])
array([[False, False, False, False, False, False, False],
       [ True, False, False, False, False, False, False],
       [ True,  True,  True, False, False, False, False],
       [False, False, False, False, False, False, False],
       [ True,  True, False, False, False, False, False]], dtype=bool)
</snippet></ROW><ROW><id>20697193</id><snippet>(np.arange(len(A[0]))[:,None] &lt; B).T</snippet></ROW><ROW><id>20697193</id><snippet>B</snippet></ROW><ROW><id>20697193</id><snippet>A</snippet></ROW><ROW><id>20697493</id><snippet>string</snippet></ROW><ROW><id>20697493</id><snippet>print ",".join(str(i) for i in table1)
</snippet></ROW><ROW><id>20697493</id><snippet>unicode</snippet></ROW><ROW><id>20697493</id><snippet>print ",".join(str(i) if not isinstance(i, unicode) else i for i in table1)
</snippet></ROW><ROW><id>20699130</id><snippet>from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.selector import HtmlXPathSelector
from scrapy.item import Item, Field

class AppleItem(Item):
    reference_link = Field()
    rss_link = Field()

class AppleSpider(CrawlSpider):

    name = 'apple'
    allowed_domains = ['apple.com']
    start_urls = ['http://apple.com']
    rules = [Rule(SgmlLinkExtractor(allow=()), follow=True, callback='parse_item')]

    def parse_item(self, response):
        sel = HtmlXPathSelector(response)
        rsslinks = sel.select('/html/head/link[@type="application/rss+xml"]/@href').extract()
        #items = []
        item = AppleItem()
        item['reference_link'] = response.url
        item['rss_link'] = rsslinks
        #items.append(item)
        return item
</snippet></ROW><ROW><id>20699297</id><snippet>&gt;&gt;&gt; [dict(duple_list).get(e, 0) for e in element_list]
[1, 4, 0]
</snippet></ROW><ROW><id>20699297</id><snippet>dict</snippet></ROW><ROW><id>20699297</id><snippet>&gt;&gt;&gt; duple_dict = dict(duple_list)
&gt;&gt;&gt; duple_dict
{'H': 4, 'C': 1}
</snippet></ROW><ROW><id>20699297</id><snippet>element_list</snippet></ROW><ROW><id>20699297</id><snippet>duple_dict</snippet></ROW><ROW><id>20699297</id><snippet>&gt;&gt;&gt; vector = []
&gt;&gt;&gt; for element in element_list:
       if element in dict(duple_dict):
           vector.append(duple_dict[element])
       else:
           vector.append(0)

&gt;&gt;&gt; vector
[1, 4, 0]
</snippet></ROW><ROW><id>20699337</id><snippet>.start()</snippet></ROW><ROW><id>20699337</id><snippet>.join()</snippet></ROW><ROW><id>20699337</id><snippet>multiprocessing.Pool()</snippet></ROW><ROW><id>20699337</id><snippet>Pool()</snippet></ROW><ROW><id>20699337</id><snippet>.map()</snippet></ROW><ROW><id>20699337</id><snippet>multiprocessing.Pool().map()</snippet></ROW><ROW><id>20699337</id><snippet>import multiprocessing as mp
import time

def is_odd(n):
    return bool(n%2)

def hailstone(n):
    """
    Compute the Hailstone sequence, as described in:
    http://en.wikipedia.org/wiki/Collatz_conjecture
    """
    steps = 0
    while n &gt; 1:
        steps += 1
        if is_odd(n):
            n = 3*n + 1
        else:
            n = n//2
    return steps


def slow(limit):
    steps = sum(hailstone(n) for n in range(limit))
    #print("n: {}  steps: {}".format(n, steps))
    return (limit, steps)

LIMIT = 2000

start = time.time()
results0 = [slow(n) for n in range(LIMIT)]
stop = time.time()
elapsed0 = stop - start

print("Single-threaded time: {:.2f} seconds".format(elapsed0))

# note we are including time to set up the Pool() in the elapsed time
start = time.time()
p = mp.Pool()
results1 = p.map(slow, range(LIMIT))
stop = time.time()
elapsed1 = stop - start

results1.sort()

print("Multiprocessing time: {:.2f} seconds".format(elapsed1))

assert results0 == results1
</snippet></ROW><ROW><id>20699337</id><snippet>multiprocessing.Pool()</snippet></ROW><ROW><id>20699609</id><snippet>list = [u'ABC', u'DEF', u'GHI']
list = str(map(str, list))

list = list.replace('[', '{').replace(']', '}').replace('\'', '\"')

query = '''update "aTable" SET "Test" = '%s\'''' %(list)
print query
</snippet></ROW><ROW><id>20699609</id><snippet>update "aTable" SET "Test" = '{"ABC", "DEF", "GHI"}'
</snippet></ROW><ROW><id>20700063</id><snippet>import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import scipy.optimize
import functools

def plane(x, y, params):
    a = params[0]
    b = params[1]
    c = params[2]
    z = a*x + b*y + c
    return z

def error(params, points):
    result = 0
    for (x,y,z) in points:
        plane_z = plane(x, y, params)
        diff = abs(plane_z - z)
        result += diff**2
    return result

def cross(a, b):
    return [a[1]*b[2] - a[2]*b[1],
            a[2]*b[0] - a[0]*b[2],
            a[0]*b[1] - a[1]*b[0]]

points = [(1.1,2.1,8.1),
          (3.2,4.2,8.0),
          (5.3,1.3,8.2),
          (3.4,2.4,8.3),
          (1.5,4.5,8.0)]

fun = functools.partial(error, points=points)
params0 = [0, 0, 0]
res = scipy.optimize.minimize(fun, params0)

a = res.x[0]
b = res.x[1]
c = res.x[2]

xs, ys, zs = zip(*points)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

ax.scatter(xs, ys, zs)

point  = np.array([0.0, 0.0, c])
normal = np.array(cross([1,0,a], [0,1,b]))
d = -point.dot(normal)
xx, yy = np.meshgrid([-5,10], [-5,10])
z = (-normal[0] * xx - normal[1] * yy - d) * 1. /normal[2]
ax.plot_surface(xx, yy, z, alpha=0.2, color=[0,1,0])

ax.set_xlim(-10,10)
ax.set_ylim(-10,10)
ax.set_zlim(  0,10)

plt.show()
</snippet></ROW><ROW><id>20700103</id><snippet>dtype</snippet></ROW><ROW><id>20700103</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; list1=['10','20','30']
&gt;&gt;&gt; list2=['40','50','60']
&gt;&gt;&gt; list3=['70','80','90']
&gt;&gt;&gt; np.array([list1, list2, list3], dtype=int)
array([[10, 20, 30],
       [40, 50, 60],
       [70, 80, 90]])
</snippet></ROW><ROW><id>20700103</id><snippet>numpy.array</snippet></ROW><ROW><id>20700103</id><snippet>dtype</snippet></ROW><ROW><id>20700329</id><snippet>ipython notebook</snippet></ROW><ROW><id>20700329</id><snippet>ipython console</snippet></ROW><ROW><id>20700329</id><snippet>ipython qtconsole</snippet></ROW><ROW><id>20700989</id><snippet>@task</snippet></ROW><ROW><id>20700989</id><snippet>@task
def install_nova():
    ...
@task
def deploy_vms():
    ...
</snippet></ROW><ROW><id>20700989</id><snippet>@task</snippet></ROW><ROW><id>20701053</id><snippet>run</snippet></ROW><ROW><id>20701053</id><snippet>def run():    
    run('screen -S rr')
    run('./rr')
</snippet></ROW><ROW><id>20701061</id><snippet>cgi-bin</snippet></ROW><ROW><id>20701061</id><snippet>http://127.0.0.1/cgi-bin/my_scipt.py</snippet></ROW><ROW><id>20701282</id><snippet>%exception</snippet></ROW><ROW><id>20701282</id><snippet>except_test.h</snippet></ROW><ROW><id>20701282</id><snippet>%module except_test
%{
#include "except_test.h"
#include &lt;stdio.h&gt;
%}

%exception {
    $action
    if (flagged_exception) {
        PyErr_SetString(PyExc_RuntimeError, "test except");
        flagged_exception = 0;
        return NULL; // ** need to add this **
    }
}

%include "except_test.h"

%{
static int flagged_exception = 0;

void throw_except()
{
    flagged_exception = 1;
}
%}
</snippet></ROW><ROW><id>20701282</id><snippet>&gt;&gt;&gt; import except_test
&gt;&gt;&gt; except_test.except_test(-1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
RuntimeError: test except
</snippet></ROW><ROW><id>20701387</id><snippet>MPI_COMM_FREE</snippet></ROW><ROW><id>20701387</id><snippet>MPI_COMM_DISCONNECT</snippet></ROW><ROW><id>20701387</id><snippet>icomm.Disconnect()</snippet></ROW><ROW><id>20701387</id><snippet>orterun</snippet></ROW><ROW><id>20701387</id><snippet>mpirun</snippet></ROW><ROW><id>20701387</id><snippet>mpiexec</snippet></ROW><ROW><id>20701387</id><snippet>orterun</snippet></ROW><ROW><id>20701387</id><snippet>orterun</snippet></ROW><ROW><id>20701387</id><snippet>fork()</snippet></ROW><ROW><id>20701387</id><snippet>exec()</snippet></ROW><ROW><id>20701387</id><snippet>odls</snippet></ROW><ROW><id>20701387</id><snippet>ulimit</snippet></ROW><ROW><id>20701387</id><snippet>ulimit -n</snippet></ROW><ROW><id>20701387</id><snippet>user@host$ ulimit -n 123456
user@host$ mpiexec -n 1 ... ./spawning_code.py arg1 arg2 ...
</snippet></ROW><ROW><id>20701387</id><snippet>123456</snippet></ROW><ROW><id>20701387</id><snippet>ulimit -nH</snippet></ROW><ROW><id>20701387</id><snippet>ulimit -n</snippet></ROW><ROW><id>20701387</id><snippet>mpirun</snippet></ROW><ROW><id>20701387</id><snippet>mpiexec</snippet></ROW><ROW><id>20701520</id><snippet>Session</snippet></ROW><ROW><id>20701520</id><snippet>Session</snippet></ROW><ROW><id>20701520</id><snippet>Session</snippet></ROW><ROW><id>20701520</id><snippet>Session</snippet></ROW><ROW><id>20701520</id><snippet>allow_redirects</snippet></ROW><ROW><id>20701520</id><snippet>True</snippet></ROW><ROW><id>20701520</id><snippet>import requests

s = requests.Session()
s.post(website_url, data = params)
</snippet></ROW><ROW><id>20701520</id><snippet>Session</snippet></ROW><ROW><id>20701781</id><snippet>A -&gt; B
A -&gt; C
B -&gt; C
B -&gt; D
C -&gt; D
D -&gt; C
E -&gt; F
F -&gt; C 
</snippet></ROW><ROW><id>20701781</id><snippet>graph = {'A': ['B', 'C'],
         'B': ['C', 'D'],
         'C': ['D'],
         'D': ['C'],
         'E': ['F'],
         'F': ['C']}
</snippet></ROW><ROW><id>20701841</id><snippet>{% if context.disabled %} "Yes" {% else %} "No" {% endif %}
</snippet></ROW><ROW><id>20702630</id><snippet>outfile</snippet></ROW><ROW><id>20702630</id><snippet>tblastn_file</snippet></ROW><ROW><id>20702630</id><snippet>flag in alignment.title</snippet></ROW><ROW><id>20702630</id><snippet>alignment.hsps</snippet></ROW><ROW><id>20702630</id><snippet>hsps</snippet></ROW><ROW><id>20702630</id><snippet>hsps</snippet></ROW><ROW><id>20702630</id><snippet>for alignment in tblastn_record.alignments[:4]:
    if flag in alignment.title:  
        for hsp in alignment.hsps:
           # etc...
</snippet></ROW><ROW><id>20702662</id><snippet>fork</snippet></ROW><ROW><id>20702662</id><snippet>fork</snippet></ROW><ROW><id>20702662</id><snippet>Pool</snippet></ROW><ROW><id>20702662</id><snippet>map</snippet></ROW><ROW><id>20702769</id><snippet>import cv2
import time

cv2.namedWindow("Hawk Eye", 1)

capture = cv2.VideoCapture(0)
capture.set(cv2.cv.CV_CAP_PROP_FRAME_WIDTH, 800)
capture.set(cv2.cv.CV_CAP_PROP_FRAME_HEIGHT, 600)

x_offset=y_offset=50
arrows = cv2.imread("hawk.png")

while True:
    ret, webcam = capture.read()
    if ret:
        webcam[y_offset:y_offset+arrows.shape[0], x_offset:x_offset+arrows.shape[1]]=arrows
        cv2.imshow("Hawk Eye", webcam)
        if cv2.waitKey(10) == 27:
            break
cv2.destroyAllWindows()
</snippet></ROW><ROW><id>20702810</id><snippet>DataFrame.update(other, join='left', overwrite=True,
                 filter_func=None, raise_conflict=False)
</snippet></ROW><ROW><id>20702890</id><snippet>fgets(*input,7,stdin);
</snippet></ROW><ROW><id>20702890</id><snippet>input</snippet></ROW><ROW><id>20702890</id><snippet>*input</snippet></ROW><ROW><id>20702890</id><snippet>char</snippet></ROW><ROW><id>20702890</id><snippet>fgets</snippet></ROW><ROW><id>20702890</id><snippet>input</snippet></ROW><ROW><id>20702890</id><snippet>input</snippet></ROW><ROW><id>20702890</id><snippet>input</snippet></ROW><ROW><id>20702890</id><snippet>char input[16] = "m2000\n";
</snippet></ROW><ROW><id>20702890</id><snippet>while (fgets(input, sizeof(input), stdin) != NULL) { ... }
</snippet></ROW><ROW><id>20702890</id><snippet>sizeof(input)</snippet></ROW><ROW><id>20702890</id><snippet>fgets</snippet></ROW><ROW><id>20702890</id><snippet>fgets</snippet></ROW><ROW><id>20703059</id><snippet>zip</snippet></ROW><ROW><id>20703059</id><snippet>dict</snippet></ROW><ROW><id>20703059</id><snippet>&gt;&gt;&gt; [dict(zip(TEMPLATE,d)) for d in DATA]
[{'pl.': 'alphas', 'sing.': 'alpha', 'mode': 0}, {'pl.': 'betas', 'sing.': 'beta', 'mode': 2}, {'pl.': 'omegas', 'sing.': 'omega', 'mode': 3}]
</snippet></ROW><ROW><id>20703083</id><snippet>&gt;&gt;&gt; from django.template import Template, Context
&gt;&gt;&gt; t = Template('''
...     {% for first in firstList %}
...         {% for second in firstList %}
...             {% if first == second %}
...                 {{ first }}
...             {% endif %}
...         {% endfor %}
...     {% endfor %}
... ''')
&gt;&gt;&gt; t.render(Context({'firstList': ['foo', 'bar'], 'secondList': ['foo', 'bar']}))
u'\n    \n        \n            \n                foo\n            \n        \n            \n        \n    \n        \n            \n        \n            \n                bar\n            \n        \n    \n'
&gt;&gt;&gt; print(t.render(Context({'firstList': ['foo', 'bar'], 'secondList': ['foo', 'bar']})))


                foo



                bar
</snippet></ROW><ROW><id>20703083</id><snippet>fooloop.counter0</snippet></ROW><ROW><id>20703083</id><snippet>forloop.counter</snippet></ROW><ROW><id>20703083</id><snippet>for</snippet></ROW><ROW><id>20703133</id><snippet>__init__</snippet></ROW><ROW><id>20703133</id><snippet>start_urls</snippet></ROW><ROW><id>20703133</id><snippet>allowed_domains</snippet></ROW><ROW><id>20703133</id><snippet>domains.txt</snippet></ROW><ROW><id>20703133</id><snippet>example1.com
example2.com
...
</snippet></ROW><ROW><id>20703133</id><snippet>class MySpider(BaseSpider):
    name = "myspider"
    allowed_domains = []
    start_urls = []

    def __init__(self):
        for line in open('./domains.txt', 'r').readlines():
            self.allowed_domains.append(line)
            self.start_urls.append('http://%s' % line)

    def parse(self, response):
        # here you will get data parsing page
        # than put your data into single file
        # from scrapy toturial http://doc.scrapy.org/en/latest/intro/tutorial.html
        filename = response.url.split("/")[-2]
        open(filename, 'wb').write(your_data)
</snippet></ROW><ROW><id>20703248</id><snippet>fileinput</snippet></ROW><ROW><id>20703248</id><snippet>re</snippet></ROW><ROW><id>20703248</id><snippet>import fileinput,re  

def  modify_file(file_name,pattern,value=""):  
    fh=fileinput.input(file_name,inplace=True)  
    for line in fh:  
        replacement=value + line  
        line=re.sub(pattern,replacement,line)  
        sys.stdout.write(line)  
    fh.close()  
</snippet></ROW><ROW><id>20703248</id><snippet>modify_file("C:\\Users\\Malik\\Desktop\\release_0.5\\release_0.5\\5075442.xml",
            "abc..",
            "!--Delivery Date:")
</snippet></ROW><ROW><id>20703263</id><snippet>copy</snippet></ROW><ROW><id>20703263</id><snippet>import shutil
shutil.copy('fruitsoriginal.txt', 'fruits.txt')
</snippet></ROW><ROW><id>20703480</id><snippet>dict.copy()</snippet></ROW><ROW><id>20703480</id><snippet>class Base(object):
    static_types_mapping = {
          "params" : "namespace",
            "data" : "data",
            "type" : "blob",
          }

    def algo(self, data):
        do_some_magic(data, self.static_types_mapping)

class Derived(Base):
    static_types_mapping = Base.static_types_mapping.copy()
    static_types_mapping.update( {"extra_field" : "fancy_type"} )
</snippet></ROW><ROW><id>20703585</id><snippet>def smallIntToRoman(integer):
    rlist = romanList = [(1000, "M"),(900, "CM"),(500, "D"),(400, "CD"),(100, "C"),(90, "XC"),(50, "L"),(40, "XL"),(10, "X"),(9, "IX"),(5, "V"),(4, "IV"),(1, "I")]
    romanResult = ""
    for wholeNumber in rlist:
            while integer &gt;= wholeNumber[0]:
                    integer -= wholeNumber[0]
                    romanResult += wholeNumber[1]
    return romanResult

def bigIntToRoman(integer):
    thousands, rest = divmod(integer, 1000)
    return "({}){}".format(smallIntToRoman(thousands), smallIntToRoman(rest))

def intToRoman(integer):
    if integer &gt;= 4000:
        return bigIntToRoman(integer)
    else:
        return smallIntToRoman(integer)


def smallRomanToInt(numeral):
    rlist = romanList = [(1000, "M"),(900, "CM"),(500, "D"),(400, "CD"),(100, "C"),(90, "XC"),(50, "L"),(40, "XL"),(10, "X"),(9, "IX"),(5, "V"),(4, "IV"),(1, "I")]
    if checkIfRomanNumeral(numeral) is False:
        pass
    elif checkIfRomanNumeral(numeral) is True:
        index = 0
        intResult = 0
        for integer, romanNumeral in rlist:
            while numeral[index : index + len(romanNumeral)] == romanNumeral:
                intResult += integer
                index += len(romanNumeral)

def romainToInt(numeral):
    if len(numeral) == 0:
        return None
    int_parts = numeral[1:].split(')') # Better done with regex
    if len(int_parts) == 1:
        return smallRomainToInt(numeral)
    elif len(int_parts) == 2:
        big = smallRomainToInt(int_parts[1])
        small = smallRomainToInt(int_parts[0])
        if big is None or small is None:
            return None
        else:
            return big * 1000 + small
    else:
        return None
</snippet></ROW><ROW><id>20703625</id><snippet>img_bool = img.sum(axis=2)&gt;0
</snippet></ROW><ROW><id>20703625</id><snippet>img[img_bool] = [0, 0, 255, 255]
img[~img_bool] = [0, 255, 0, 255]
</snippet></ROW><ROW><id>20703625</id><snippet>img_bool = ~np.equal(img[:,:], [0, 0, 0, 0]).all(axis=2)
</snippet></ROW><ROW><id>20703953</id><snippet>sys.stdout</snippet></ROW><ROW><id>20703953</id><snippet>import sys
import traceback


class StacktraceOnPrint:

    def __init__(self, orig_stdout, substring):
        self.orig_stdout = orig_stdout
        self.substring = substring

    def write(self, txt):
        if self.substring in txt:
            traceback.print_stack() # OR  import pdb; pdb.set_trace()
        self.orig_stdout.write(txt)


sys.stdout = StacktraceOnPrint(sys.stdout, 'blah')
print 'test ...'
print 'Hello blah.'
print 'test ...'
</snippet></ROW><ROW><id>20703953</id><snippet>traceback.print_stack</snippet></ROW><ROW><id>20703953</id><snippet>sys.stderr</snippet></ROW><ROW><id>20703953</id><snippet>sys.stderr</snippet></ROW><ROW><id>20703953</id><snippet>traceback.format_stack</snippet></ROW><ROW><id>20703953</id><snippet>RuntimeError: maximum recursion depth exceeded</snippet></ROW><ROW><id>20704072</id><snippet>df.groupby(...).apply(foo)</snippet></ROW><ROW><id>20704072</id><snippet>foo</snippet></ROW><ROW><id>20704072</id><snippet>to_frame().T</snippet></ROW><ROW><id>20704072</id><snippet>def maxrow(x, col):
    return x.loc[x[col].argmax()].to_frame().T

result = df.groupby('c1').apply(maxrow, 'c3')
result = result.reset_index(level=0, drop=True)
print(result)
</snippet></ROW><ROW><id>20704072</id><snippet>  c1 c2  c3
1  a  c   3
4  b  c  12
</snippet></ROW><ROW><id>20704072</id><snippet>def maxrow(x, col):
    ser = x.loc[x[col].idxmax()]
    df = pd.DataFrame({ser.name: ser}).T
    return df
</snippet></ROW><ROW><id>20704072</id><snippet>sort</snippet></ROW><ROW><id>20704072</id><snippet>O(n)</snippet></ROW><ROW><id>20704072</id><snippet>O(n log n)</snippet></ROW><ROW><id>20704072</id><snippet>to_frame</snippet></ROW><ROW><id>20704072</id><snippet>import pandas as pd
import numpy as np
import timeit


def reset_df_first(df):
    df2 = df.reset_index()
    result = df2.groupby('c1').apply(lambda x: x.loc[x['c3'].idxmax()])
    result.set_index(['index'], inplace=True)
    return result

def maxrow(x, col):
    result = x.loc[x[col].argmax()].to_frame().T
    return result

def using_to_frame(df):
    result = df.groupby('c1').apply(maxrow, 'c3')
    result.reset_index(level=0, drop=True, inplace=True)
    return result

def using_sort(df):
    return df.sort('c3').groupby('c1', as_index=False).tail(1)


for N in (100, 1000, 2000):
    df = pd.DataFrame({'c1': {0: 'a', 1: 'a', 2: 'a', 3: 'b', 4: 'b', 5: 'b'},
                       'c2': {0: 'a', 1: 'c', 2: 'b', 3: 'b', 4: 'c', 5: 'a'},
                       'c3': {0: 1, 1: 3, 2: 2, 3: 10, 4: 12, 5: 7}})

    df = pd.concat([df]*N)
    df.reset_index(inplace=True, drop=True)

    timing = dict()
    for func in (reset_df_first, using_to_frame, using_sort):
        timing[func] = timeit.timeit('m.{}(m.df)'.format(func.__name__),
                              'import __main__ as m ',
                              number=10)

    print('For N = {}'.format(N))
    for func in sorted(timing, key=timing.get):
        print('{:&lt;20}: {:&lt;0.3g}'.format(func.__name__, timing[func]))
    print
</snippet></ROW><ROW><id>20704072</id><snippet>For N = 100
using_sort          : 0.018
using_to_frame      : 0.0265
reset_df_first      : 0.0303

For N = 1000
using_to_frame      : 0.0358    \
using_sort          : 0.036     / this is roughly where the two methods cross over in terms of performance
reset_df_first      : 0.0432

For N = 2000
using_to_frame      : 0.0457
reset_df_first      : 0.0523
using_sort          : 0.0569
</snippet></ROW><ROW><id>20704072</id><snippet>reset_df_first</snippet></ROW><ROW><id>20704242</id><snippet>myvar = !some_command --option1 --option2 foo bar
</snippet></ROW><ROW><id>20704242</id><snippet>%%bash</snippet></ROW><ROW><id>20704242</id><snippet>!</snippet></ROW><ROW><id>20704242</id><snippet>myvar</snippet></ROW><ROW><id>20704495</id><snippet>import random, time
total = 3600 * 5
times = sorted(random.randint(1, total) for i in range(random.randint(4, 8)))
last = 0
for t in times:
    time.sleep(t - last)
    last = t
    print "Do something at %02d:%02d:%02d" % (t/3600, t/60%60, t%60)
</snippet></ROW><ROW><id>20704510</id><snippet>all</snippet></ROW><ROW><id>20704510</id><snippet>if not all(isinstance(var, (int, float)) for var in [a, b, c, d]):
    # do stuff
</snippet></ROW><ROW><id>20704510</id><snippet>int</snippet></ROW><ROW><id>20704510</id><snippet>isinstance</snippet></ROW><ROW><id>20704908</id><snippet>(min, max)</snippet></ROW><ROW><id>20704908</id><snippet>Lock()</snippet></ROW><ROW><id>20704908</id><snippet>Value()</snippet></ROW><ROW><id>20704908</id><snippet>from multiprocessing import Queue, Process, Lock,Value

def do_sum(id, counter, lock):
    MAX = 50
    while counter.value &lt; MAX:    

        lock.acquire()
        counter.value += 1

        file = open('mytext.txt','a')
        file.write(str(counter.value))
        file.write("\n")
        file.close()

        lock.release()


def main():

    counter = Value('d', 0.0)
    lock = Lock()

    #f = open('mytext.txt','w')
    #f.close()
    print 'atat'
    q = Queue()
    p1 = Process(target=do_sum, args=(0, counter, lock,) )
    p2 = Process(target=do_sum, args=(1,counter, lock,) )
    p1.start()
    p2.start()
    r1 = q.get()
    r2 = q.get()
    print r1+r2

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>20705038</id><snippet>def handle_accept(self):
    pair = self.accept()
    if pair is not None:
        sock, addr = pair
        print ('Incoming connection from %s' % repr(addr))
</snippet></ROW><ROW><id>20705038</id><snippet>from twisted.internet.task import react
from twisted.internet.defer import Deferred
from twisted.internet.protocol import Protocol
from twisted.internet.endpoints import clientFromString, connectProtocol

class SendBytes(Protocol):
    def __init__(self, data):
        self.data = data
        self.done = Deferred()

    def connectionMade(self):
        self.transport.write(self.data)
        self.transport.loseConnection()

    def connectionLost(self, reason):
        self.done.callback(None)

def main(reactor, description, data):
    endpoint = clientFromString(reactor, description)
    connecting = connectProtocol(endpoint, SendBytes(data))
    def connected(proto):
        print("Successfully connected to {0}".format(proto.transport.getPeer().host))
        return proto.done
    connecting.addCallback(connected)
    return connecting

if __name__ == '__main__':
    react(main, [b"tcp:host=127.0.0.1:port=4444", b"DDDDDD"])
</snippet></ROW><ROW><id>20705038</id><snippet>from twisted.internet.task import react
from twisted.internet.defer import Deferred
from twisted.internet.protocol import Factory, Protocol
from twisted.internet.endpoints import serverFromString

class ReadBytes(Protocol):
    def connectionMade(self):
        print("Incoming connection from {}".format(self.transport.getPeer()))

    def dataReceived(self, data):
        print("Received {}".format(data))

def main(reactor, description):
    endpoint = serverFromString(reactor, description)
    endpoint.listen(Factory.forProtocol(ReadBytes))
    return Deferred()

if __name__ == '__main__':
    react(main, [b"tcp:interface=127.0.0.1:port=4444"])
</snippet></ROW><ROW><id>20705226</id><snippet>In [26]: df = d.reset_index().groupby(['host','operation']).apply(calc_load).set_index('index')

In [27]: df
Out[27]: 
      args            host kwargs        log_timestamp             operation      slot  status      time  time_stddev  time_mean
index                                                                                                                           
0       []   yy3.segm1.org     {}  1385984306000000000      x_gWidgboxParams    a12yy3    -101  0.000477     0.061657   0.003226
1       []  yy14.segm1.org     {}  1385984306000000000         x_initWidgbox   a11yy14       1  0.004177     0.035759   0.005816
10      []  yy32.segm1.org     {}  1385984307000000000             gSettings   a13yy32    -101  0.009686     0.245170   0.070137
100     []  yy19.segm1.org     {}  1385984308000000000  notifyTestsDelivered   a16yy19       1  0.000766     0.002825   0.000964
1000    []   yy7.segm1.org     {}  1385984320000000000           addWidging2    a12yy7       1  0.002576     0.008525   0.004122
10000   []  yy14.segm1.org     {}  1385984461000000000           addWidging2   a13yy14       1  0.001317     0.009431   0.003910
10001   []  yy14.segm1.org     {}  1385984461000000000               gxyzinf   a13yy14    -101  0.000542     0.001861   0.001074
10002   []  yy20.segm1.org     {}  1385984461000000000               x_gbinf  I502yy20    -101  0.000522     0.001043   0.000743
10003   []  yy20.segm1.org     {}  1385984461000000000       setFlagsOneWidg  I502yy20       1  0.001660     0.005404   0.002910
10004   []  yy14.segm1.org     {}  1385984461000000000  notifyTestsDelivered   a13yy14       1  0.000551     0.002877   0.001156
10005   []  yy20.segm1.org     {}  1385984461000000000               gxyzinf  I502yy20    -101  0.000521     0.000802   0.000813
10006   []  yy14.segm1.org     {}  1385984461000000000           addWidging2   a13yy14       1  0.001256     0.009431   0.003910
10007   []  yy14.segm1.org     {}  1385984461000000000               gxyzinf   a13yy14    -101  0.000414     0.001861   0.001074
10008   []  yy14.segm1.org     {}  1385984461000000000           addWidging2   a13yy14       1  0.001222     0.009431   0.003910
10009   []  yy14.segm1.org     {}  1385984461000000000               gxyzinf   a13yy14    -101  0.000475     0.001861   0.001074
1001    []   yy7.segm1.org     {}  1385984320000000000               gxyzinf    a12yy7    -101  0.000783     0.003059   0.001004
10010   []  yy14.segm1.org     {}  1385984461000000000         x_initWidgbox   a12yy14       1  0.002764     0.035759   0.005816
10011   []  yy32.segm1.org     {}  1385984461000000000         x_initWidgbox   a15yy32       1  0.057966     0.334923   0.147668
10012   []   yy3.segm1.org     {}  1385984461000000000             gSettings    a11yy3    -101  0.006519     0.163707   0.017649
10013   []  yy30.segm1.org     {}  1385984461000000000                gtfull   a13yy30    -101  0.003648     0.116366   0.014088
10014   []   yy6.segm1.org     {}  1385984461000000000               x_gbinf    a16yy6    -101  0.000621     0.005796   0.001139
10015   []  yy34.segm1.org     {}  1385984461000000000                gtfull   a14yy34    -101  0.002031     0.015581   0.007747
10016   []  yy34.segm1.org     {}  1385984461000000000               x_gbinf   a14yy34    -101  0.000546     0.002596   0.001899
10017   []  yy34.segm1.org     {}  1385984461000000000       setFlagsOneWidg   a14yy34       1  0.001358     0.003515   0.005866
10018   []  yy34.segm1.org     {}  1385984461000000000               gxyzinf   a14yy34    -101  0.000486     0.004446   0.002018
10019   []  yy25.segm1.org     {}  1385984461000000000                gtfull   a13yy25    -101  0.002029     0.001793   0.002355
1002    []   yy7.segm1.org     {}  1385984320000000000  notifyTestsDelivered    a12yy7       1  0.000847     0.003748   0.001081
10020   []  yy32.segm1.org     {}  1385984462000000000             gFolderId   a15yy32    -101  0.018326     0.187434   0.058200
10021   []  yy25.segm1.org     {}  1385984462000000000               x_gbinf   a13yy25    -101  0.000589     0.001716   0.000830
10022   []  yy25.segm1.org     {}  1385984462000000000            updateWidg   a13yy25       1  0.003058     0.004660   0.003973
10023   []  yy25.segm1.org     {}  1385984462000000000            clearElems   a13yy25       1  0.000661     0.004893   0.001687
10024   []  yy10.segm1.org     {}  1385984462000000000                gtfull   a18yy10    -101  0.002779     0.069679   0.007495
10025   []  yy13.segm1.org     {}  1385984462000000000                gtfull   a11yy13    -101  0.001978     0.124069   0.012524
10026   []  yy32.segm1.org     {}  1385984462000000000               x_gbinf   a14yy32    -101  0.018674     0.190657   0.058083
10027   []  yy10.segm1.org     {}  1385984462000000000               x_gbinf   a18yy10    -101  0.000874     0.007170   0.001606
10028   []  yy32.segm1.org     {}  1385984462000000000               gWidgId   a14yy32       1  0.014523     1.518315   0.559983
10029   []  yy13.segm1.org     {}  1385984462000000000               x_gbinf   a11yy13    -101  0.000577     0.008605   0.001130
1003    []   yy7.segm1.org     {}  1385984320000000000      x_gWidgboxParams    a12yy7    -101  0.000933     0.001084   0.001442
10030   []  yy13.segm1.org     {}  1385984462000000000       setFlagsOneWidg   a11yy13       1  0.001611     0.011409   0.004093
10031   []  yy13.segm1.org     {}  1385984462000000000               gxyzinf   a11yy13    -101  0.000575     0.053991   0.003044
10032   []  yy39.segm1.org     {}  1385984462000000000                gtfull   a13yy39    -101  0.002005     0.034577   0.003504
10033   []  yy39.segm1.org     {}  1385984462000000000               x_gbinf   a13yy39    -101  0.000539     0.001371   0.000931
10034   []  yy32.segm1.org     {}  1385984462000000000           addWidging2   a15yy32       1  0.122369     1.414068   0.441565
10035   []  yy32.segm1.org     {}  1385984462000000000           moveOneWidg   a12yy32       1  0.468481     1.303089   0.665778
10036   []  yy32.segm1.org     {}  1385984462000000000               gxyzinf   a15yy32    -101  0.018006     0.155379   0.040389
10037   []  yy32.segm1.org     {}  1385984462000000000  notifyTestsDelivered   a15yy32       1  0.006874     0.129650   0.032741
10038   []  yy32.segm1.org     {}  1385984462000000000               gxyzinf   a12yy32    -101  0.016607     0.155379   0.040389
10039   []  yy39.segm1.org     {}  1385984462000000000            updateWidg   a13yy39       1  0.003879     0.005466   0.006465
1004    []  yy34.segm1.org     {}  1385984320000000000                gtfull   a11yy34    -101  0.003681     0.015581   0.007747
10040   []  yy39.segm1.org     {}  1385984462000000000                SELECT   a13yy39  217831  0.000423     0.000126   0.000551
10041   []  yy39.segm1.org     {}  1385984462000000000            clearElems   a13yy39       1  0.000705     0.002367   0.001356
10042   []   yy3.segm1.org     {}  1385984462000000000           moveOneWidg    a15yy3       1  0.002660     0.027428   0.009078
10043   []   yy3.segm1.org     {}  1385984462000000000               gxyzinf    a15yy3    -101  0.000436     0.041627   0.001913
10044   []  yy39.segm1.org     {}  1385984462000000000             gSettings   a11yy39    -101  0.002237     0.007467   0.002679
10045   []  yy32.segm1.org     {}  1385984462000000000             gSettings   a15yy32    -101  0.012113     0.245170   0.070137
10046   []  yy32.segm1.org     {}  1385984462000000000      x_gWidgboxParams   a15yy32    -101  0.030427     0.143941   0.050055
10047   []  yy13.segm1.org     {}  1385984462000000000           moveOneWidg   a12yy13       1  0.003796     0.117085   0.017910
10048   []  yy13.segm1.org     {}  1385984462000000000               gxyzinf   a12yy13    -101  0.000521     0.053991   0.003044
10049   []  yy30.segm1.org     {}  1385984462000000000      x_gWidgboxParams   a13yy30    -101  0.002451     0.051829   0.003644
1005    []  yy12.segm1.org     {}  1385984320000000000                gtfull   a15yy12    -101  0.003428     0.005479   0.003063
       ...             ...    ...                  ...                   ...       ...     ...       ...          ...        ...

[410450 rows x 10 columns]
</snippet></ROW><ROW><id>20705345</id><snippet>#</snippet></ROW><ROW><id>20705345</id><snippet>127.0.0.1:7777/</snippet></ROW><ROW><id>20705651</id><snippet>$('#edit_user_image').change(function(){
    var client = new XMLHttpRequest();
    var file = document.getElementById("edit_user_image");
    var csrftoken = document.getElementsByName('csrfmiddlewaretoken')[0].value
    /* Create a FormData instance */

    var params = file.files[0];


    client.open("post", "/upload-image/", true);
    client.setRequestHeader("X-CSRFToken", csrftoken);
    client.setRequestHeader("Content-Type", "multipart/form-data; charset=UTF-8; boundary=frontier");
    client.send(params);  /* Send to server */ 
  });
</snippet></ROW><ROW><id>20705920</id><snippet>def resize(imgpath):
    img = pygame.image.load(imgpath)
    rect = img.get_rect()
    return pygame.transform.scale(img, (int(rect.w/size), int(rect.h/size)))


Credits = resize('TEXT\Credits.png')
</snippet></ROW><ROW><id>20705920</id><snippet>SOURCES = [
    ("credit",  'TEXT\Credits.png'),
    ("something", 'TEXT\whatever.png'),
    # etc
    ]

IMAGES = dict((name, resize(path)) for name, path in SOURCES)
</snippet></ROW><ROW><id>20705920</id><snippet>do_something_with(IMAGES["credit"])
</snippet></ROW><ROW><id>20705942</id><snippet>txt = re.sub( r'([a-zA-Z])([,.!])', r'\1 \2', '!!!this, .is, .a .test!!!' )
</snippet></ROW><ROW><id>20705942</id><snippet>re.sub( r'([,.!])([a-zA-Z])', r'\1 \2', txt )
</snippet></ROW><ROW><id>20705958</id><snippet>slicing notation</snippet></ROW><ROW><id>20706541</id><snippet>db((db.course.id == db.files.course_id) &amp; (db.dept.id==db.course.dept_id))
</snippet></ROW><ROW><id>20706852</id><snippet>def finding(q):
    return (item for item in sentences 
            if item.lower().find(q.lower()) != -1)
</snippet></ROW><ROW><id>20706852</id><snippet>from itertools import chain
chain.from_iterable(finding(key) for key in ['cats', 'apples'. 'doggs'])
</snippet></ROW><ROW><id>20706852</id><snippet>set(chain.from_iterable(finding(key) for key in ['cats', 'apples'. 'doggs']))
</snippet></ROW><ROW><id>20706852</id><snippet>def uniq(fn):
    uniq_elems = set()
    def handler(*args, **kwargs):
        uniq_elems.update(fn(*args, **kwargs))
        return uniq_elems
    return handler
@uniq
def finding(q):
    return (item for item in sentences 
            if item.lower().find(q.lower()) != -1)
</snippet></ROW><ROW><id>20706852</id><snippet>def uniq(fn):
    uniq_elems = OrderedDict()
    def handler(*args, **kwargs):
        uniq_elems.update(uniq_elems.fromkeys(fn(*args, **kwargs)))
        return uniq_elems.keys()
    return handler
</snippet></ROW><ROW><id>20706852</id><snippet>list</snippet></ROW><ROW><id>20706899</id><snippet>numpy.trapz(precission, recall)</snippet></ROW><ROW><id>20706899</id><snippet>AUC = 0.014036223712000031</snippet></ROW><ROW><id>20707305</id><snippet>data</snippet></ROW><ROW><id>20707305</id><snippet>using (var stream = new MemoryStream(data)) {
    using (var reader = new BinaryReader(stream)) {
        stream.Seek(2, SeekOrigin.Begin);

        var value1 = reader.ReadInt16();
        var value2 = reader.ReadInt16();
    }
}
</snippet></ROW><ROW><id>20707305</id><snippet>short</snippet></ROW><ROW><id>20707415</id><snippet>from itertools import imap
file2 = dict(imap(str.split, open("file2")))
with open("file1") as fin:
    for key, value in imap(str.split, fin):
        if value in file2:
            print key
</snippet></ROW><ROW><id>20707415</id><snippet>with open("file2") as fin:
    file2 = dict(imap(str.split, fin))
</snippet></ROW><ROW><id>20707691</id><snippet>fahrenheit = float(inputEntry.get())</snippet></ROW><ROW><id>20707691</id><snippet>main</snippet></ROW><ROW><id>20707691</id><snippet>inputEntry</snippet></ROW><ROW><id>20707691</id><snippet>val = inputEntry.get()
if not val:
    val = 0.0
fahrenheit = float(val)
</snippet></ROW><ROW><id>20707691</id><snippet>'10F'</snippet></ROW><ROW><id>20707710</id><snippet>class MRRecalculateSupportsPipeline(base_handler.PipelineBase):

    def run(self, user_key):
        # ...
        yield mapreduce_pipeline.MapreducePipeline('user_recalculate_supports',
                'myapp.mapreduces.user_recalculate_supports_map',
                'myapp.mapreduces.user_recalculate_supports_reduce',
                'mapreduce.input_readers.DatastoreInputReader', output_writer_spec=None,
                mapper_params={"""..."""})
</snippet></ROW><ROW><id>20707710</id><snippet>        pipe_future = yield mapreduce_pipeline.MapreducePipeline('user_recalculate_supports',
                'myapp.mapreduces.user_recalculate_supports_map',
                'myapp.mapreduces.user_recalculate_supports_reduce',
                'mapreduce.input_readers.DatastoreInputReader', output_writer_spec=None,
                mapper_params={"""..."""})
        with pipeline.After(pipe_future):
            yield CalcCompletePipeline(...)  # this could be a mapreduce pipeline, or any pipeline using the same base_handler.PipelineBase parent class.
</snippet></ROW><ROW><id>20707710</id><snippet>finalized</snippet></ROW><ROW><id>20707710</id><snippet>/_ah/*/status?root=</snippet></ROW><ROW><id>20707710</id><snippet>class EmailNewReleasePipeline(base_handler.PipelineBase):
    """Email followers about a new release"""
    # TODO: product_key is the name of the parameter, but it's built for albums ...

    def run(self, product_key, testing=False):
            # Send those emails ...
            yield mapreduce_pipeline.MapreducePipeline(...)

    def finalized(self):
        """Save product as launched"""
        ...
        product.launched = True
        product.put()
</snippet></ROW><ROW><id>20707786</id><snippet>numpy.fromfile</snippet></ROW><ROW><id>20707786</id><snippet>from os.path import join
import numpy
import struct
from time import time


def main():

    #Set the path name and filename
    folder = join("Tone_Tests","1khz_10ns_0907153323")
    fn = join(folder,"Channel1.raw32")


    #Test 1
    start = time()
    f = open(fn,'rb')
    array = read_fromstring(f)
    f.close()
    print "Test fromString = ",time()-start
    del array

    #Test 2
    start = time()
    f = open(fn,'rb')
    array = read_struct(f)
    f.close()
    print "Test fromStruct = ",time()-start
    del array

    #Test 3
    start = time()
    f = open(fn,'rb')
    array = read_fromfile(f)
    f.close()
    print "Test fromfile = ",time()-start
    del array


def read_fromstring(f):
    #Use Numpy fromstring, read each 4 bytes, convert, store in list
    data = []

    chunk = f.read(4)

    while chunk:
        num_chunk = numpy.fromstring(chunk, dtype = 'float32')
        data.append(num_chunk)

        chunk = f.read(4)

    return numpy.array(data)

def read_struct(f):
    #Same as numpy froms string but using the struct.
    data = []

    chunk = f.read(4)

    while chunk:
        num_chunk = struct.unpack('&lt;f',chunk)
        data.append(num_chunk)

        chunk = f.read(4)

    return numpy.array(data)

def read_fromfile(f):
    return numpy.fromfile(f, dtype = 'float32', count = -1)
</snippet></ROW><ROW><id>20707786</id><snippet>Test fromString =  4.43499994278
Test fromStruct =  2.42199993134
Test fromfile =  0.00399994850159
</snippet></ROW><ROW><id>20707786</id><snippet>python -m cProfile -s time filename.py &gt; profile.txt</snippet></ROW><ROW><id>20707786</id><snippet> ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    1.456    1.456    4.272    4.272 Read_Data_tester.py:42(read_fromstring)
        1    1.162    1.162    2.369    2.369 Read_Data_tester.py:56(read_struct)
        1    0.000    0.000    0.005    0.005 Read_Data_tester.py:70(read_fromfile)
</snippet></ROW><ROW><id>20707844</id><snippet>&lt;a href="{{ blog.link }}"&gt;Go to Story&lt;/a&gt;
</snippet></ROW><ROW><id>20707844</id><snippet>{{</snippet></ROW><ROW><id>20707911</id><snippet>import logging
import subprocess

cmd = "ls -al /directory/that/does/not/exist"  # &lt;- or Windows equivalent
logging.info(cmd)
try:
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
except OSError, err:
    logging.error(err.child_traceback)
(stdout, stderr) = process.communicate()
logging.debug(stdout)
if not stderr is None:
    logging.error(stderr)
</snippet></ROW><ROW><id>20708101</id><snippet>class FooMiddleware(object):
    def process_request(self, request):
        if request.user.is_authenticated():
            request.urlconf = 'myproject.authed_urls2'
</snippet></ROW><ROW><id>20708101</id><snippet>NotFound</snippet></ROW><ROW><id>20708101</id><snippet>NotAuthorized</snippet></ROW><ROW><id>20708137</id><snippet>if mylist.Count == 1:
    func = count1
elif mylist.Count == 2:
    func = count2
elif mylist.Count == 3:
    func = count3
else
   print  "your code is shit!"
   return

 for adc in activeDataConnections:
     for table in adc:
         if table.Name == mylist[0]:
              func()
</snippet></ROW><ROW><id>20708222</id><snippet>Foo</snippet></ROW><ROW><id>20708222</id><snippet>class Foo(object):
    def produce_nested_scope():
        class Bar(object):
            pass
        class Baz(object):
            class InnerBar(Bar):
                pass
        return Bar, Baz
    Bar, Baz = produce_nested_scope()
    del produce_nested_scope
</snippet></ROW><ROW><id>20708222</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def produce_nested_scope():
...         class Bar(object):
...             pass
...         class Baz(object):
...             class InnerBar(Bar):
...                 pass
...         return Bar, Baz
...     Bar, Baz = produce_nested_scope()
...     del produce_nested_scope
... 
&gt;&gt;&gt; Foo.Bar
&lt;class '__main__.Bar'&gt;
&gt;&gt;&gt; Foo.Baz
&lt;class '__main__.Baz'&gt;
</snippet></ROW><ROW><id>20708296</id><snippet>winfo_x</snippet></ROW><ROW><id>20708296</id><snippet>winfo_y</snippet></ROW><ROW><id>20708296</id><snippet>from tkinter import Tk, Button
root = Tk()
def click():
    print(root.winfo_x(), root.winfo_y())
Button(text="Get position", command=click).grid()
root.mainloop()
</snippet></ROW><ROW><id>20708296</id><snippet>Tk</snippet></ROW><ROW><id>20708296</id><snippet>Toplevel</snippet></ROW><ROW><id>20708296</id><snippet>Toplevel</snippet></ROW><ROW><id>20708378</id><snippet>and</snippet></ROW><ROW><id>20708378</id><snippet>or</snippet></ROW><ROW><id>20708378</id><snippet>not</snippet></ROW><ROW><id>20708378</id><snippet>and</snippet></ROW><ROW><id>20708378</id><snippet>or</snippet></ROW><ROW><id>20708378</id><snippet>__nonzero__</snippet></ROW><ROW><id>20708378</id><snippet>__len__</snippet></ROW><ROW><id>20708378</id><snippet>__nonzero__</snippet></ROW><ROW><id>20708378</id><snippet>__bool__</snippet></ROW><ROW><id>20708378</id><snippet>&amp;</snippet></ROW><ROW><id>20708378</id><snippet>|</snippet></ROW><ROW><id>20708378</id><snippet>~</snippet></ROW><ROW><id>20708378</id><snippet>__and__</snippet></ROW><ROW><id>20708378</id><snippet>__or__</snippet></ROW><ROW><id>20708378</id><snippet>__invert__</snippet></ROW><ROW><id>20708378</id><snippet>&amp;</snippet></ROW><ROW><id>20708378</id><snippet>|</snippet></ROW><ROW><id>20708378</id><snippet>__rand__</snippet></ROW><ROW><id>20708378</id><snippet>__ror__</snippet></ROW><ROW><id>20708378</id><snippet>__iand__</snippet></ROW><ROW><id>20708378</id><snippet>__ior__</snippet></ROW><ROW><id>20708378</id><snippet>__nonzero__</snippet></ROW><ROW><id>20708378</id><snippet>True</snippet></ROW><ROW><id>20708378</id><snippet>False</snippet></ROW><ROW><id>20708378</id><snippet>~custom_obj</snippet></ROW><ROW><id>20708378</id><snippet>type(custom_obj).__invert__(custom_obj)</snippet></ROW><ROW><id>20708378</id><snippet>custom_obj1 &amp; custom_obj2</snippet></ROW><ROW><id>20708378</id><snippet>type(custom_obj1).__and__(custom_obj1, custom_obj2)</snippet></ROW><ROW><id>20708378</id><snippet>NotImplemented</snippet></ROW><ROW><id>20708378</id><snippet>type(custom_obj2).__rand__(custom_obj2, custom_obj1)</snippet></ROW><ROW><id>20708465</id><snippet>import json
data = [(1, None),
            (4, 1),
            (15, 1),
            (6, 1),
            (2, 1),
            (7, 1),
                (12, 7),
                (13, 7),
                    (17, 13),
                        (18, 17),
                (14, 7),
            (8, 1),
            (9, 1),
            (10, 1),
            (11, 1),
            (19, 1),
        (16, None)]

def convert(input):
    loading_struct = {} #load your tuples into a dict object (because I like dict)
    alignment_struct = {} #structure to hold the output
    seen_embedded_keys = {} #keep track of items we have seen before to remove them
    for line in input: #iterating your input of a list of tuples
        loading_struct[line[0]] = line[1] #unloading them unto a dictionary
        alignment_struct[line[0]] = {} #creating a blank result dictionary with your proposed output
    for node_id, parent_node_id in loading_struct.items(): #iterating the loading struct
        if parent_node_id: #if it doesnt have a parent, we dont need to do anything
            alignment_struct[parent_node_id][node_id] = alignment_struct[node_id]
            seen_embedded_keys[node_id] = True
    for node_id in seen_embedded_keys: #cleanup time remove the keys that are embedded somewhere else
        del alignment_struct[node_id]
    return alignment_struct

output = json.dumps(convert(data)).replace('{}', '""') #your requirement to have nodes with no children to have values of ''
print output
</snippet></ROW><ROW><id>20708465</id><snippet>{"1": {"2": "", "4": "", "6": "", "7": {"12": "", "13": {"17": {"18": ""}}, "14": ""}, "8": "", "9": "", "10": "", "11": "", "15": "", "19": ""}, "16": ""}
</snippet></ROW><ROW><id>20708578</id><snippet>def partial_derivative(func, var=0, point=[]):
    args = point[:]
    def wraps(x):
        args[var] = x
        return func(*args)
    return derivative(wraps, point[var], dx = 1e-6)
</snippet></ROW><ROW><id>20708578</id><snippet>&gt;&gt;&gt; partial_derivative(foo, 0, [3,1])
6.0000000008386678
&gt;&gt;&gt; partial_derivative(foo, 1, [3,1])
2.9999999995311555
</snippet></ROW><ROW><id>20708616</id><snippet>  apply(x1, 2, function(x) sd(x) * sqrt((length(x) - 1) / length(x)) )
</snippet></ROW><ROW><id>20708788</id><snippet>pyxbgen -u /Users/xyz/XML_Validation/schemas/schema_short.xsd -m schema_short</snippet></ROW><ROW><id>20708927</id><snippet>zip</snippet></ROW><ROW><id>20708927</id><snippet>itertools.izip</snippet></ROW><ROW><id>20708927</id><snippet>zip</snippet></ROW><ROW><id>20708927</id><snippet>from operator import itemgetter
zip(*sorted(zip(*arr), key = itemgetter(1)))
[('string45', 'string25', 'string3'), (2, 12, 46)]
</snippet></ROW><ROW><id>20708927</id><snippet>&gt;&gt;&gt; arr #Original Array
[['string3', 'string45', 'string25'], [46, 2, 12]]
&gt;&gt;&gt; zip(*arr) #Unpacking the array, transposes it
[('string3', 46), ('string45', 2), ('string25', 12)]
&gt;&gt;&gt; sorted(zip(*arr), key = itemgetter(1)) #Sort the Transpose Array based on second element
[('string45', 2), ('string25', 12), ('string3', 46)]
&gt;&gt;&gt; zip(*sorted(zip(*arr), key = itemgetter(1))) #Transpose the result to generate the original format
[('string45', 'string25', 'string3'), (2, 12, 46)]
</snippet></ROW><ROW><id>20709115</id><snippet>exec</snippet></ROW><ROW><id>20709115</id><snippet>getattr()</snippet></ROW><ROW><id>20709115</id><snippet>setattr()</snippet></ROW><ROW><id>20709115</id><snippet>for name in ['leftCounter', 'rightCounter', 'neutralCounter']:
    r = getattr(self, name)[0]
    for i in getattr(self, name):
        r = map(operator.__add__, r, i)
    setattr(self, name, r)
</snippet></ROW><ROW><id>20709115</id><snippet>for attr in (self.leftCounter, self.rightCounter, self.neutralCounter):
    r = attr[0]
    for i in attr:
        r = map(operator.__add__, r, i)
    attr[:] = r
</snippet></ROW><ROW><id>20709190</id><snippet>str.rstrip('\n')</snippet></ROW><ROW><id>20709370</id><snippet>with</snippet></ROW><ROW><id>20709370</id><snippet>def lcount(fname, keyword):
    with open(fname) as fin:
        # Use a generator expr. to avoid intermediate list
        return sum(1 for line in fin if keyword in line)
        # Or better, since True == 1
        return sum(keyword in line for line in fin)

    #file is closed now

fname = "peer2.txt"
words = "bars bar table".split()

# don't repeat yourself
for word in words:
    print lcount(fname, word)
</snippet></ROW><ROW><id>20709405</id><snippet>583</snippet></ROW><ROW><id>20709405</id><snippet>583</snippet></ROW><ROW><id>20709405</id><snippet>y</snippet></ROW><ROW><id>20709405</id><snippet>x = 995</snippet></ROW><ROW><id>20709405</id><snippet>993 913 906609
</snippet></ROW><ROW><id>20709405</id><snippet>x</snippet></ROW><ROW><id>20709405</id><snippet>y</snippet></ROW><ROW><id>20709405</id><snippet>range(100, 1000)</snippet></ROW><ROW><id>20709405</id><snippet>from itertools import combinations

def check_reversed(x, y):
    number = str(x * y)
    return number == number[::-1]

x, y = max((c for c in combinations(range(100, 1000), r=2) if check_reversed(*c)), 
           key=lambda c: c[0] * c[1])
print x, y, x * y
</snippet></ROW><ROW><id>20709499</id><snippet>crispy</snippet></ROW><ROW><id>20709499</id><snippet>Form</snippet></ROW><ROW><id>20709499</id><snippet>Form</snippet></ROW><ROW><id>20709499</id><snippet>def yourview(request):
    return TemplateResponse(request, "yourtemplate.html", {'form': LoginForm()})
</snippet></ROW><ROW><id>20709499</id><snippet>@register.inclusion_tag('path/to/login_form.html')
def display_login_form():
    return {'form': LoginForm()}
</snippet></ROW><ROW><id>20709499</id><snippet>{% load your_template_tags %}
{% display_login_form %}
</snippet></ROW><ROW><id>20709728</id><snippet>import logging
logger = logging.get_logger("myapp")

def something_deeper():
   raise SomeException("yadda")

def execute_some_code(*args)
   do_something()
   something_deeper()
   this_wont_happen()

def main(*args):
    configure_logging()
    try:
       execute_some_code(*args)
    except SomeRecovarableException as e:
       warn_user(e)
       try_to_recover_from(e)
    except SomeUnrecovarableException as e:
       logger.exception("oops, crashing")
       try_to_exit_cleanly_if_possible()
    finally:
       do_some_cleanup()            

if __name__ = "__main__":
     import sys
     main(*sys.argv())
</snippet></ROW><ROW><id>20709925</id><snippet>import socket
s = socket.socket() 
s.connect((socket.gethostname(), 9999))

while True:
    message = input("&gt; ")
    s.send(message)
    if message == "quit":
        break
print ("bye")

s.close()
</snippet></ROW><ROW><id>20709925</id><snippet>import socket

#Server

s = socket.socket() 
s.bind((socket.gethostname(), 9999))
s.listen(1)

sc, addr = s.accept()

while True:
    received = sc.recv(1024)
    if received == "quit":
        break      
    print ("Received:", received)
    sc.send(received)

print ("bye")

sc.close()
s.close()
</snippet></ROW><ROW><id>20710055</id><snippet>import httplib2
from oauth2client.file import Storage
from oauth2client.client import flow_from_clientsecrets
from oauth2client.tools import run_flow, argparser
from apiclient.discovery import build

storage = Storage("/path/to/saved_user_creds.dat")
credentials = storage.get()
if credentials is None or credentials.invalid:
  credentials = run_flow(flow_from_clientsecrets("/path/to/client_secrets.json", scope=["scope1" ,"scope2"]), storage, argparser.parse_args([]))
http = credentials.authorize(httplib2.Http())

# Use the http object as needed...
service = build("bigquery", "v1")
result = service.object().method(name=value).execute(http=http)
</snippet></ROW><ROW><id>20710056</id><snippet>threading.Event</snippet></ROW><ROW><id>20710056</id><snippet>class SerialThread(threading.Thread):

    def __init__(self, queue, sp):
        threading.Thread.__init__(self)
        self.queue = queue
        self.event = threading.Event() # An event object.
        self.ser_handle = sp;

    def stop(self):
        self.event.set()

    def run(self):
        while not self.event.isSet():
            if self.ser_handle.inWaiting():
                text = self.ser_handle.readline(self.ser_handle.inWaiting())
                self.queue.put(text)
            time.sleep(0.2) 
</snippet></ROW><ROW><id>20710056</id><snippet>your_thread.stop()</snippet></ROW><ROW><id>20710076</id><snippet>table.set_zorder( 100 )
</snippet></ROW><ROW><id>20710205</id><snippet>train</snippet></ROW><ROW><id>20710205</id><snippet>labels</snippet></ROW><ROW><id>20710205</id><snippet>id,title,body,category_labels
0,greeting,hello,noun
1,affirm,yes,verb
2,deny,no,verb
</snippet></ROW><ROW><id>20710205</id><snippet>def get_train_data(training_file):
    with open(training_file, "rt") as f:
        next(f)  # throw away "headers" in first line
        for line in f:
            lst = line.rstrip('\n').split(',')
            # lst contains: id,title,body,category_labels
            yield (lst[1],lst[2])

train_dict = dict(get_train_data("data.csv"))
</snippet></ROW><ROW><id>20710205</id><snippet>results</snippet></ROW><ROW><id>20710205</id><snippet>results = [train_dict.get(x, sample) for x in test]
</snippet></ROW><ROW><id>20710205</id><snippet>test</snippet></ROW><ROW><id>20710205</id><snippet>dict.get()</snippet></ROW><ROW><id>20710205</id><snippet>if x in train_dict</snippet></ROW><ROW><id>20710212</id><snippet>print(a[1][1])
</snippet></ROW><ROW><id>20710212</id><snippet>1[1]</snippet></ROW><ROW><id>20710212</id><snippet>a[1]</snippet></ROW><ROW><id>20710212</id><snippet>a2</snippet></ROW><ROW><id>20710212</id><snippet>a[1][1]</snippet></ROW><ROW><id>20710242</id><snippet>2**(n**2)</snippet></ROW><ROW><id>20710242</id><snippet>nxn = np.arange(n**2).reshape(n, -1)
for i in xrange(0, 2**(n**2)):
    arr = (i &gt;&gt; nxn) % 2
    # do smthng with arr
</snippet></ROW><ROW><id>20710258</id><snippet>pattern = "L[12] = \{(.*?)\}\;"
</snippet></ROW><ROW><id>20710258</id><snippet>?</snippet></ROW><ROW><id>20710258</id><snippet>*</snippet></ROW><ROW><id>20710530</id><snippet>cursor.executescript("SELECT COUNT(value) AS itemcount FROM history WHERE itemid=?; \
    SELECT value FROM history WHERE itemid = ? ORDER BY value ASC LIMIT 1 OFFSET itemcount * (? / 100) - 1)", \
    [itemId, itemId, percentile])
</snippet></ROW><ROW><id>20710546</id><snippet>&lt;a href="{% url 'logout' %}?next={{request.path}}"&gt; Log Out&lt;/a&gt;
</snippet></ROW><ROW><id>20710590</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d.update(dict.fromkeys(range(10), 1))
&gt;&gt;&gt; d
{0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}
</snippet></ROW><ROW><id>20710590</id><snippet>dict.update</snippet></ROW><ROW><id>20710590</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>20710590</id><snippet>&gt;&gt;&gt; d = dict.fromkeys(range(10), 1)
&gt;&gt;&gt; d
{0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}  
</snippet></ROW><ROW><id>20710590</id><snippet>dict.update</snippet></ROW><ROW><id>20710590</id><snippet>from itertools import izip, repeat
d.update(izip(xrange(10), repeat(1)))
</snippet></ROW><ROW><id>20710590</id><snippet>OrderedSet</snippet></ROW><ROW><id>20710605</id><snippet>convert_objects</snippet></ROW><ROW><id>20710605</id><snippet>&gt;&gt;&gt; df = df.convert_objects(convert_numeric=True)
&gt;&gt;&gt; df[:2]
     qid lang           metric           val
0   Q774   fr  informativeness      1.350078
1   Q774   fr    referencerate      0.002627
&gt;&gt;&gt; df.dtypes
qid        object
lang       object
metric     object
val       float64
</snippet></ROW><ROW><id>20710625</id><snippet>np.newaxis</snippet></ROW><ROW><id>20710625</id><snippet>import numpy as np

def f(x1,x2,x3,x4):
    y = x1*x2/(x3+x4)
    return y

x1 = 1.0
x2 = 2.0
x3 = 3.0
x4 = 4.0
print f(x1,x2,x3,x4)

x3 = np.array([1.0,2.0,3.0,4.0,5.0])
print f(x1,x2,x3,x4)

x3 = x3[:, np.newaxis]
x4 = np.array([10.0,20.0,30.0,40.0,50.0,60.0,70.0])
x4 = x4[np.newaxis, :]
print f(x1,x2,x3,x4)
</snippet></ROW><ROW><id>20710625</id><snippet>(5, 7)</snippet></ROW><ROW><id>20710625</id><snippet>(7, 5)</snippet></ROW><ROW><id>20710648</id><snippet>@autojit
class name(object):
</snippet></ROW><ROW><id>20710674</id><snippet>    if X % n == 0:
</snippet></ROW><ROW><id>20710674</id><snippet>X</snippet></ROW><ROW><id>20710674</id><snippet>input</snippet></ROW><ROW><id>20710674</id><snippet>X % n</snippet></ROW><ROW><id>20710674</id><snippet>%</snippet></ROW><ROW><id>20710674</id><snippet>TypeError: not all arguments converted during string formatting
</snippet></ROW><ROW><id>20710674</id><snippet>float(X)</snippet></ROW><ROW><id>20710674</id><snippet>get_pf(float(N), pf)</snippet></ROW><ROW><id>20710674</id><snippet>int</snippet></ROW><ROW><id>20710674</id><snippet>float</snippet></ROW><ROW><id>20710709</id><snippet>nditer</snippet></ROW><ROW><id>20710709</id><snippet>meanTrialTypeRt = [Rt[trialTypeData == trialType].mean()
                   for trialType in xrange(4)]
</snippet></ROW><ROW><id>20710709</id><snippet>trialTypeData</snippet></ROW><ROW><id>20710709</id><snippet>trialType</snippet></ROW><ROW><id>20710709</id><snippet>Rt</snippet></ROW><ROW><id>20710709</id><snippet>Rt</snippet></ROW><ROW><id>20710709</id><snippet>trialTypeData</snippet></ROW><ROW><id>20710807</id><snippet>try_close</snippet></ROW><ROW><id>20710807</id><snippet>def initUI(self):
    ...
    menu = self.menuBar().addMenu('File')
    menu.addAction('Test', self.test)

def test(self):
    for w in QtGui.qApp.allWidgets():
        print(w.objectName(), w)
</snippet></ROW><ROW><id>20710921</id><snippet>import json
json.loads(your_json_string)
</snippet></ROW><ROW><id>20710953</id><snippet>&gt;&gt;&gt; x_ = (373,398,245,272,238,241,134,410,158,125,198,252,577,272,208,260)
&gt;&gt;&gt; y_ = (411,471,320,364,311,390,163,424,228,144,246,371,680,384,279,303)

&gt;&gt;&gt; from scipy import stats
&gt;&gt;&gt; stats.ttest_ind(x_, y_)
(array(-1.62292672368488), 0.11506840827144681)

&gt;&gt;&gt; import statsmodels.api as sm
&gt;&gt;&gt; sm.stats.ttest_ind(x_, y_)
(-1.6229267236848799, 0.11506840827144681, 30.0)
</snippet></ROW><ROW><id>20710953</id><snippet>&gt;&gt;&gt; statsmodels.stats.weightstats.ttest_ind(x_, y_,alternative="two-sided",usevar="unequal")
(-1.6229267236848799, 0.11516398707890187, 29.727196553288369)
&gt;&gt;&gt; stats.ttest_ind(x_, y_, equal_var=False)
(array(-1.62292672368488), 0.11516398707890187)
</snippet></ROW><ROW><id>20711093</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>20711093</id><snippet>from itertools import groupby
from operator import itemgetter

def group_by_start(inputlist, n):
    return [list(g) for k, g in groupby(inputlist, key=itemgetter(slice(n)))]
</snippet></ROW><ROW><id>20711093</id><snippet>def sorted_group_by_start(inputlist, n):
    key = itemgetter(slice(n))
    return [list(g) for k, g in groupby(sorted(inputlist, key=key), key=key)]
</snippet></ROW><ROW><id>20711093</id><snippet>&gt;&gt;&gt; group_by_start(['a','ab','abc','1','2','3','4','123','1234','12345'], 3)
[['a'], ['ab'], ['abc'], ['1'], ['2'], ['3'], ['4'], ['123', '1234', '12345']]
&gt;&gt;&gt; group_by_start(['a','ab','abc','1','2','3','4','123','1234','12345'], 1)
[['a', 'ab', 'abc'], ['1'], ['2'], ['3'], ['4'], ['123', '1234', '12345']]
&gt;&gt;&gt; sorted_group_by_start(['a','ab','abc','1','2','3','4','123','1234','12345'], 3)
[['1'], ['123', '1234', '12345'], ['2'], ['3'], ['4'], ['a'], ['ab'], ['abc']]
&gt;&gt;&gt; sorted_group_by_start(['a','ab','abc','1','2','3','4','123','1234','12345'], 1)
[['1', '123', '1234', '12345'], ['2'], ['3'], ['4'], ['a', 'ab', 'abc']]
</snippet></ROW><ROW><id>20711093</id><snippet>def group_by_start(inputlist, n):
    return [res[0] if len(res) == 1 else res for k, g in groupby(inputlist, key=itemgetter(slice(n))) for res in (list(g),)]
</snippet></ROW><ROW><id>20711093</id><snippet>def sorted_group_by_start(inputlist, n):
    key = itemgetter(slice(n))
    return [res[0] if len(res) == 1 else res for k, g in groupby(sorted(inputlist, key=key), key=key) for res in (list(g),)]
</snippet></ROW><ROW><id>20711093</id><snippet>&gt;&gt;&gt; group_by_start(['a','ab','abc','1','2','3','4','123','1234','12345'], 3)
['a', 'ab', 'abc', '1', '2', '3', '4', ['123', '1234', '12345']]
&gt;&gt;&gt; group_by_start(['a','ab','abc','1','2','3','4','123','1234','12345'], 1)
[['a', 'ab', 'abc'], '1', '2', '3', '4', ['123', '1234', '12345']]
&gt;&gt;&gt; sorted_group_by_start(['a','ab','abc','1','2','3','4','123','1234','12345'], 3)
['1', ['123', '1234', '12345'], '2', '3', '4', 'a', 'ab', 'abc']
&gt;&gt;&gt; sorted_group_by_start(['a','ab','abc','1','2','3','4','123','1234','12345'], 1)
[['1', '123', '1234', '12345'], '2', '3', '4', ['a', 'ab', 'abc']]
&gt;&gt;&gt; sorted_group_by_start(['asdf', 'fdsa', 'asd','123','1234','1','12345'], 3)
['1', ['123', '1234', '12345'], ['asdf', 'asd'], 'fdsa']
</snippet></ROW><ROW><id>20711093</id><snippet>def group_by_start(inputlist, n):
    return (list(g) for k, g in groupby(inputlist, key=itemgetter(slice(n))))
</snippet></ROW><ROW><id>20711093</id><snippet>def group_by_start(inputlist, n):
    for k, g in groupby(inputlist, key=itemgetter(slice(n))):
        res = list(g)
        yield res[0] if len(res) == 1 else res
</snippet></ROW><ROW><id>20711093</id><snippet>for</snippet></ROW><ROW><id>20711093</id><snippet>list()</snippet></ROW><ROW><id>20711105</id><snippet>aspect</snippet></ROW><ROW><id>20711105</id><snippet>fig.set_size_inches</snippet></ROW><ROW><id>20711127</id><snippet>print _("Some text... foo bar foo bar foo bar ..... blah blah"
        "More text")
</snippet></ROW><ROW><id>20711127</id><snippet>&gt;&gt;&gt; print 'a' 'b'
ab
</snippet></ROW><ROW><id>20711221</id><snippet>&gt;&gt;&gt; print 'Br\"{u}derle'
Br"{u}derle
</snippet></ROW><ROW><id>20711221</id><snippet>name = r'Br\"{u}derle'
</snippet></ROW><ROW><id>20711306</id><snippet>DatetimeIndex</snippet></ROW><ROW><id>20711306</id><snippet>&gt;&gt;&gt; rng
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2011-01-01 00:00:00, ..., 2011-01-03 23:00:00]
Length: 72, Freq: H, Timezone: None
&gt;&gt;&gt; len(rng)
72
&gt;&gt;&gt; rng.freq
&lt;1 Hour&gt;
&gt;&gt;&gt; rng.freqstr
'H'
</snippet></ROW><ROW><id>20711306</id><snippet>&gt;&gt;&gt; ts.index.freq
&lt;1 Hour&gt;
</snippet></ROW><ROW><id>20711324</id><snippet>import sys
df.to_csv(sys.stdout)
</snippet></ROW><ROW><id>20711353</id><snippet>import Tkinter as tk
root = tk.Tk()
past = 1
def fix(n):
    global past
    n = int(n)
    if not n % 2:
        scale.set(n+1 if n &gt; past else n-1)
        past = scale.get()
scale = tk.Scale(from_=1, to_=9, command=fix, orient=tk.HORIZONTAL)
scale.grid()
root.mainloop()
</snippet></ROW><ROW><id>20711353</id><snippet>fix</snippet></ROW><ROW><id>20711353</id><snippet>past</snippet></ROW><ROW><id>20711353</id><snippet>n &gt; past</snippet></ROW><ROW><id>20711353</id><snippet>n &lt; past</snippet></ROW><ROW><id>20711464</id><snippet>import praw
r = praw.Reddit(user_agent="bot by /u/{0}".format("YOUR-USERNAME")) 
submission = r.get_info(thing_id="t1_asdasd")
print(submission)
</snippet></ROW><ROW><id>20711482</id><snippet>string_list.sort(key=int)
integers_list.sort(key=int)
</snippet></ROW><ROW><id>20711616</id><snippet>str.split()</snippet></ROW><ROW><id>20711616</id><snippet>&gt;&gt;&gt; 'New York 10 10.10.10.0 10.10.10.0/24 255.255.255.0\n'.split()
['New', 'York', '10', '10.10.10.0', '10.10.10.0/24', '255.255.255.0']
</snippet></ROW><ROW><id>20711616</id><snippet>New</snippet></ROW><ROW><id>20711616</id><snippet>York</snippet></ROW><ROW><id>20711616</id><snippet>networkdata[3]</snippet></ROW><ROW><id>20711616</id><snippet>networkdata = line.rsplit(None, 4)
</snippet></ROW><ROW><id>20711616</id><snippet>&gt;&gt;&gt; 'New York 10 10.10.10.0 10.10.10.0/24 255.255.255.0\n'.rsplit(None, 4)
['New York', '10', '10.10.10.0', '10.10.10.0/24', '255.255.255.0']
</snippet></ROW><ROW><id>20711616</id><snippet>None</snippet></ROW><ROW><id>20711616</id><snippet>4</snippet></ROW><ROW><id>20711616</id><snippet>New York</snippet></ROW><ROW><id>20711616</id><snippet>def locateip(ipaddr):
    ipaddr = IPAddress(ipaddress)
    with open('networkinfo.txt') as f:
        next(f, None)  # skip the header line first
        for line in f:
            location, vlan, net, netcdr, mask = line.rsplit(None, 4)
            if ipaddr in IPNetwork(netcdr):   
                return location, vlan, net, netcdr, mask
</snippet></ROW><ROW><id>20711616</id><snippet>New York\t10\t10.10.10.0\t10.10.10.0/24\t255.255.255.0
</snippet></ROW><ROW><id>20711616</id><snippet>csv</snippet></ROW><ROW><id>20711616</id><snippet>import csv

def locateip(ipaddr):
    ipaddr = IPAddress(ipaddress)
    with open('networkinfo.txt') as f:
        reader = csv.reader(f, delimiter='\t')
        next(reader, None)  # skip the header line first
        for location, vlan, net, netcdr, mask in reader:
            if ipaddr in IPNetwork(netcdr):   
                return location, vlan, net, netcdr, mask
</snippet></ROW><ROW><id>20711654</id><snippet>screen.css</snippet></ROW><ROW><id>20711654</id><snippet>div.table-container {
    display: inline-block;
    position:relative;
    overflow:auto;
}
</snippet></ROW><ROW><id>20711656</id><snippet>data</snippet></ROW><ROW><id>20711656</id><snippet>var data = $(this).parents('form').serialize();

$.ajax({
    type:"POST",
    url: "/Tplots/ajax_curr/",
    data: data,
    datatype: "json",
    success: function(data) {
        alert(data);
    },
    error:function(){
        alert("failure");
    }
})
</snippet></ROW><ROW><id>20711677</id><snippet>/dev/input/*</snippet></ROW><ROW><id>20711719</id><snippet>Homebrew</snippet></ROW><ROW><id>20711719</id><snippet>PATH</snippet></ROW><ROW><id>20711719</id><snippet>brew doctor</snippet></ROW><ROW><id>20711719</id><snippet>pip</snippet></ROW><ROW><id>20711719</id><snippet>pip install Deis</snippet></ROW><ROW><id>20711976</id><snippet>asfreq</snippet></ROW><ROW><id>20711976</id><snippet>aapl = aapl.asfreq('D', method='ffill')
</snippet></ROW><ROW><id>20711976</id><snippet>aapl = aapl.asfreq('B', method='ffill')
</snippet></ROW><ROW><id>20711976</id><snippet>import pandas as pd
import numpy as np
import pandas.io.data as web
aapl = web.get_data_yahoo("AAPL")
f  = np.median(np.diff(aapl.index.values))
days = f.astype('timedelta64[D]').item().days
aapl = aapl.asfreq('{}D'.format(days), method='ffill')
print(aapl)
</snippet></ROW><ROW><id>20711976</id><snippet>import pandas as pd
import numpy as np
import pandas.io.data as web

def infer_freq(ts):
    med  = np.median(np.diff(ts.index.values))
    seconds = int(med.astype('timedelta64[s]').item().total_seconds())
    if seconds &lt; 60:
        freq = '{}s'.format(seconds)
    elif seconds &lt; 3600:
        freq = '{}T'.format(seconds//60)
    elif seconds &lt; 86400:
        freq = '{}H'.format(seconds//3600)
    elif seconds &lt; 604800:
        freq = '{}D'.format(seconds//86400)
    elif seconds &lt; 2678400:
        freq = '{}W'.format(seconds//604800)
    elif seconds &lt; 7948800:
        freq = '{}M'.format(seconds//2678400)
    else:
        freq = '{}Q'.format(seconds//7948800)
    return ts.asfreq(freq, method='ffill')

aapl = web.get_data_yahoo("AAPL")
print(infer_freq(aapl))
</snippet></ROW><ROW><id>20711989</id><snippet>getattr()</snippet></ROW><ROW><id>20711989</id><snippet>getattr(args, '256')
</snippet></ROW><ROW><id>20711989</id><snippet>dest</snippet></ROW><ROW><id>20711989</id><snippet>parser.add_argument('--256', '-256', action='store_true', dest='ff')
</snippet></ROW><ROW><id>20712160</id><snippet>yield</snippet></ROW><ROW><id>20712160</id><snippet>import sys


class Test: 
    def __init__(self): # it's possible to initialise these attributes in the __init__ method, so they are created on class instantiation(when you did hello = Test())
        self.str1 = "Hello"
        self.str2 = "World\n" #"\n" is needed for the example

    def printMe(self):
        for i in [self.str1, self.str2]:
            yield i 


app = Test()

print "Testing initiated:"

for i in app.printMe():
    print i # is there a reason why you can't use print?
</snippet></ROW><ROW><id>20712160</id><snippet>gen = app.printMe()
</snippet></ROW><ROW><id>20712160</id><snippet>gen.next() 
</snippet></ROW><ROW><id>20712169</id><snippet>tuple</snippet></ROW><ROW><id>20712169</id><snippet>dictionary</snippet></ROW><ROW><id>20712169</id><snippet>d = {'p1': val1, 'p2': val2}
cur.execute("""
    select *
    from t
    where col1 = %(p1)s and col2 = %(p2)s
    """, d
)
</snippet></ROW><ROW><id>20712169</id><snippet>d = {'p1': None, 'p2': val2}
cur.execute("""
    select *
    from t
    where
        (%(p1)s is null or col1 = %(p1)s)
        and
        (%(p2)s is null or col2 = %(p2)s)
    """, d
)
</snippet></ROW><ROW><id>20712169</id><snippet>ssh</snippet></ROW><ROW><id>20712169</id><snippet>ssh -L 5432:localhost:5432 remotehost.com
</snippet></ROW><ROW><id>20712235</id><snippet>def query(x):
    import numpy as np
    file_direc_in="path_to_input_file.csv"
    file_direc_out="path_to_output_file.csv"

    x=np.array([[1,2,4,6]])
</snippet></ROW><ROW><id>20712235</id><snippet>    x=np.array([[1,2,4,6]])
</snippet></ROW><ROW><id>20712349</id><snippet>TEMP</snippet></ROW><ROW><id>20712349</id><snippet>max_length</snippet></ROW><ROW><id>20712349</id><snippet>TEMP = ( ('H', 'High'), ('M', 'Medium'), ('L', 'Low'), )</snippet></ROW><ROW><id>20712349</id><snippet>max_length</snippet></ROW><ROW><id>20712433</id><snippet>write_html = """

&lt;form name="input" action="copy_file.php" method="get"&gt;

&lt;input type="hidden" name="path1" value="{0}" /&gt;
&lt;input type="hidden" name="path2" value="{1}" /&gt;

&lt;input type="button" name="button" value="onClick="copyfile('{0}', '{1}')"/&gt; 

&lt;script&gt; function moveFile(path1, path2){ ...} &lt;/script&gt;

""".format(path1, path2)
</snippet></ROW><ROW><id>20712433</id><snippet>copy_file.php</snippet></ROW><ROW><id>20712433</id><snippet>$path1 = $_GET["path1"];
$path2 = $_GET["path2"];
</snippet></ROW><ROW><id>20712625</id><snippet>for</snippet></ROW><ROW><id>20712625</id><snippet>variables = []
for row in range(4):
    row_variables = []
    for col in range(4):
        row_variables.append(vars())
    variables.append(row_variables)
A = matrix(variables)
</snippet></ROW><ROW><id>20712625</id><snippet>variables = [[vars() for col in range(4)] for row in range(4)]
A = matrix(variables)
</snippet></ROW><ROW><id>20712625</id><snippet>variables = [[vars()] * 4 for row in range(4)]
A = matrix(variables)
</snippet></ROW><ROW><id>20712674</id><snippet>BaseException</snippet></ROW><ROW><id>20712674</id><snippet>class LenTooLongError(ValueError):
  pass
</snippet></ROW><ROW><id>20712793</id><snippet>easy_install</snippet></ROW><ROW><id>20712793</id><snippet>setuptools</snippet></ROW><ROW><id>20712793</id><snippet>distribute</snippet></ROW><ROW><id>20712793</id><snippet>setuptools</snippet></ROW><ROW><id>20712793</id><snippet>easy_install</snippet></ROW><ROW><id>20712793</id><snippet>setuptools</snippet></ROW><ROW><id>20712793</id><snippet>setuptools</snippet></ROW><ROW><id>20712793</id><snippet>easy_install</snippet></ROW><ROW><id>20712793</id><snippet>easy_install-2.5</snippet></ROW><ROW><id>20712793</id><snippet>setuptools</snippet></ROW><ROW><id>20712793</id><snippet>setuptools</snippet></ROW><ROW><id>20712793</id><snippet>python32-setuptools</snippet></ROW><ROW><id>20712793</id><snippet>python32-easy-install</snippet></ROW><ROW><id>20712793</id><snippet>setuptools</snippet></ROW><ROW><id>20712793</id><snippet>setuptools</snippet></ROW><ROW><id>20712793</id><snippet>sudo</snippet></ROW><ROW><id>20712793</id><snippet>wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py -O - | sudo python
</snippet></ROW><ROW><id>20712793</id><snippet>easy_install</snippet></ROW><ROW><id>20712793</id><snippet>readline</snippet></ROW><ROW><id>20712793</id><snippet>pip</snippet></ROW><ROW><id>20712793</id><snippet>pip</snippet></ROW><ROW><id>20712793</id><snippet>easy_install</snippet></ROW><ROW><id>20712793</id><snippet>setuptools</snippet></ROW><ROW><id>20712793</id><snippet>pip</snippet></ROW><ROW><id>20712793</id><snippet>sudo easy_install pip</snippet></ROW><ROW><id>20712793</id><snippet>pip</snippet></ROW><ROW><id>20712793</id><snippet>pip</snippet></ROW><ROW><id>20712793</id><snippet>setuptools</snippet></ROW><ROW><id>20712793</id><snippet>python get-pip.py</snippet></ROW><ROW><id>20712793</id><snippet>sudo</snippet></ROW><ROW><id>20712793</id><snippet>python</snippet></ROW><ROW><id>20712793</id><snippet>python3.3</snippet></ROW><ROW><id>20712793</id><snippet>python2.6</snippet></ROW><ROW><id>20712793</id><snippet>/opt/local/mypython/bin/python</snippet></ROW><ROW><id>20712793</id><snippet>pip</snippet></ROW><ROW><id>20712793</id><snippet>setuptools</snippet></ROW><ROW><id>20712793</id><snippet>pip install --upgrade setuptools pip
</snippet></ROW><ROW><id>20712793</id><snippet>sudo</snippet></ROW><ROW><id>20712793</id><snippet>pip-3.3</snippet></ROW><ROW><id>20712793</id><snippet>easy_install</snippet></ROW><ROW><id>20712793</id><snippet>pip</snippet></ROW><ROW><id>20712813</id><snippet>fig.canvas.manager.toolbar._active is None
</snippet></ROW><ROW><id>20712813</id><snippet>True</snippet></ROW><ROW><id>20712813</id><snippet>_*</snippet></ROW><ROW><id>20712925</id><snippet>from foo import *</snippet></ROW><ROW><id>20712925</id><snippet>foo</snippet></ROW><ROW><id>20712925</id><snippet>level.py</snippet></ROW><ROW><id>20712925</id><snippet>from entity import *</snippet></ROW><ROW><id>20712925</id><snippet>entity</snippet></ROW><ROW><id>20712925</id><snippet>level</snippet></ROW><ROW><id>20712925</id><snippet>entity.py</snippet></ROW><ROW><id>20712925</id><snippet>from blocks import *</snippet></ROW><ROW><id>20712925</id><snippet>blocks</snippet></ROW><ROW><id>20712925</id><snippet>entity</snippet></ROW><ROW><id>20712925</id><snippet>blocks.py</snippet></ROW><ROW><id>20712925</id><snippet>from level import *</snippet></ROW><ROW><id>20712925</id><snippet>level</snippet></ROW><ROW><id>20712925</id><snippet>blocks</snippet></ROW><ROW><id>20712925</id><snippet>blocks</snippet></ROW><ROW><id>20712925</id><snippet>level</snippet></ROW><ROW><id>20712925</id><snippet>import level</snippet></ROW><ROW><id>20712925</id><snippet>from level import *</snippet></ROW><ROW><id>20712925</id><snippet>level.foo</snippet></ROW><ROW><id>20712925</id><snippet>foo</snippet></ROW><ROW><id>20712925</id><snippet>import foo</snippet></ROW><ROW><id>20712925</id><snippet>foo</snippet></ROW><ROW><id>20713130</id><snippet>mmap</snippet></ROW><ROW><id>20713130</id><snippet>mmap</snippet></ROW><ROW><id>20713130</id><snippet>msync</snippet></ROW><ROW><id>20713130</id><snippet>munmap</snippet></ROW><ROW><id>20713130</id><snippet>np.memmap</snippet></ROW><ROW><id>20713238</id><snippet>os.path.join</snippet></ROW><ROW><id>20713238</id><snippet>import re
import os
def normalize_path(path):
    return os.path.normpath(os.sep.join(re.split(r'\\|/', path)))
</snippet></ROW><ROW><id>20713238</id><snippet>&gt;&gt;&gt; normalize_path("/usr/local/share/myfile")
'/usr/local/share/myfile'
&gt;&gt;&gt; normalize_path("C:\My Documents\Users/music.mp3")
'C:/My Documents/Users/music.mp3'
&gt;&gt;&gt; normalize_path("~/Documents///report.pdf")
'~/Documents/report.pdf'
&gt;&gt;&gt; normalize_path("/tmp/subdir/subsubdir/.././//")
'/tmp/subdir'
&gt;&gt;&gt; normalize_path("../Photos/.")
'../Photos'
</snippet></ROW><ROW><id>20713238</id><snippet>&gt;&gt;&gt; os.path.abspath(normalize_path("../Photos/."))
'/private/tmp/Photos'
&gt;&gt;&gt; os.path.expanduser(normalize_path("~/Documents///report.pdf"))
'/Users/matt/Documents/report.pdf'
&gt;&gt;&gt; os.path.join(normalize_path("/tmp//./subdir"), "myfile.txt")
'/tmp/subdir/myfile.txt'
&gt;&gt;&gt; os.path.dirname(normalize_path("~/Documents///report.pdf"))
'~/Documents'
&gt;&gt;&gt; os.path.basename(normalize_path("~/Documents///report.pdf"))
'report.pdf'
</snippet></ROW><ROW><id>20713422</id><snippet>lcd_string</snippet></ROW><ROW><id>20713422</id><snippet>message = message.center(LCD_WIDTH," ")
</snippet></ROW><ROW><id>20713422</id><snippet>float</snippet></ROW><ROW><id>20713422</id><snippet>center</snippet></ROW><ROW><id>20713422</id><snippet>center</snippet></ROW><ROW><id>20713422</id><snippet>lcd_string(&lt;something&gt;, 2)</snippet></ROW><ROW><id>20713422</id><snippet>lcd_string(avgspeed,2)</snippet></ROW><ROW><id>20713422</id><snippet>avgspeed</snippet></ROW><ROW><id>20713422</id><snippet>print message</snippet></ROW><ROW><id>20713422</id><snippet>print</snippet></ROW><ROW><id>20713422</id><snippet>float</snippet></ROW><ROW><id>20713422</id><snippet>float</snippet></ROW><ROW><id>20713422</id><snippet>lcd_string</snippet></ROW><ROW><id>20713422</id><snippet>message = str(message)
</snippet></ROW><ROW><id>20713422</id><snippet>lcd_string</snippet></ROW><ROW><id>20713422</id><snippet>lcd_string(str(avgspeed), 2)
</snippet></ROW><ROW><id>20713422</id><snippet>lcd_string(format(avgspeed, '.2f'), 2) 
</snippet></ROW><ROW><id>20713422</id><snippet>assert isinstance(message, str)
</snippet></ROW><ROW><id>20713430</id><snippet>for (x,y) in zip(times, difference):
    if y:
         par.annotate("{0}%".format(y), xy=(x, y+10))
</snippet></ROW><ROW><id>20713486</id><snippet>u'\xa3'</snippet></ROW><ROW><id>20713486</id><snippet>In [99]: import unicodedata as UD

In [100]: UD.name(u'\xa3')
Out[100]: 'POUND SIGN'

In [101]: print(u'\xa3')
£
</snippet></ROW><ROW><id>20713486</id><snippet>u'\xa312.99'</snippet></ROW><ROW><id>20713486</id><snippet>u'\xa3</snippet></ROW><ROW><id>20713486</id><snippet>u'12.99'</snippet></ROW><ROW><id>20713486</id><snippet>In [108]: data = [u'\xa312.99',
 u'\xa38.99',
 u'\xa38.99',
 u'\xa34.49',
 u'\xa34.49',
 u'\xa329.99',
 u'\xa329.99']

In [110]: [float(item.lstrip(u'\xa3')) for item in data]
Out[110]: [12.99, 8.99, 8.99, 4.49, 4.49, 29.99, 29.99]
</snippet></ROW><ROW><id>20713577</id><snippet>a = [1, 2, 3, 6, 4, 5, 7, 8, 9]
b = [4, 4, 5, 5, 7, 7, 9, 9, 10]

r = dict([(x, []) for x in b])

for k, v in zip(b, a):
    r[k] += [v,]
</snippet></ROW><ROW><id>20713577</id><snippet>&gt;&gt;&gt; for k, v in r.items():
...     print k, v
... 
9 [7, 8]
10 [9,]
4 [1, 2]
5 [3, 6]
7 [4, 5]
&gt;&gt;&gt; 
&gt;&gt;&gt; print r[4]
[1, 2]
</snippet></ROW><ROW><id>20713577</id><snippet>from itertools import izip
from collections import defaultdict
r = defaultdict(list)

for k, v in izip(b, a):
    r[k] += [v]
</snippet></ROW><ROW><id>20713802</id><snippet>import numpy as np
import pandas as pd

### create sample data
date = pd.date_range("2010-01-01", periods=365*3)
date = pd.Index(np.random.choice(date, 30000))
order_id = np.random.randint(10, 1000, size=30000)

df = pd.DataFrame({"date":date, "order_id":order_id})

### group by year and date
date = pd.Index(df["date"])
df2 = df["order_id"].groupby([date.year, date]).count()

### shift all year to 2000
date = df2.index.get_level_values(1)
new_date = pd.Index(pd.io.date_converters.parse_date_fields(np.ones(len(date))*2000, date.month, date.day))
year = df2.index.get_level_values(0)
df2.index = pd.MultiIndex.from_arrays([year, new_date])

### plot
p = df2.unstack(0).plot()
p.xaxis.set_ticklabels(range(1, 13));
</snippet></ROW><ROW><id>20713817</id><snippet>DynamicMessage</snippet></ROW><ROW><id>20713817</id><snippet>DynamicMessage</snippet></ROW><ROW><id>20713817</id><snippet>DynamicMessage</snippet></ROW><ROW><id>20713822</id><snippet>content = urllib2.urlopen( url.encode('utf-8') ).read()
</snippet></ROW><ROW><id>20713822</id><snippet>content = urllib2.urlopen(url).read().decode('utf-8')
</snippet></ROW><ROW><id>20713853</id><snippet>0.06</snippet></ROW><ROW><id>20713853</id><snippet>float()</snippet></ROW><ROW><id>20713853</id><snippet>float</snippet></ROW><ROW><id>20713853</id><snippet>h.insert(0,float(1))</snippet></ROW><ROW><id>20713853</id><snippet>h.insert(0,1.0)</snippet></ROW><ROW><id>20713853</id><snippet>[-1]</snippet></ROW><ROW><id>20713853</id><snippet>[-2]</snippet></ROW><ROW><id>20713853</id><snippet>totrtn = prtns[-1] -1</snippet></ROW><ROW><id>20713853</id><snippet>returns</snippet></ROW><ROW><id>20713853</id><snippet>total_returns</snippet></ROW><ROW><id>20713853</id><snippet>totalReturns</snippet></ROW><ROW><id>20713853</id><snippet>for</snippet></ROW><ROW><id>20713853</id><snippet>for i in range(10000):
    # code to be repeated 10000 goes in an indented block here
    # more lines in the loop should be indented at same level as previous line
# to mark what code runs after the for loop finishes, just un-indent again
h - prtns.tolist()
...
</snippet></ROW><ROW><id>20714003</id><snippet>Program Files</snippet></ROW><ROW><id>20714291</id><snippet>&gt;&gt;&gt; l = [1,2,3,4,5]
&gt;&gt;&gt; n = 2
&gt;&gt;&gt; a = 0  # Number of items that meet the condition
&gt;&gt;&gt; for x in l:
...     if x % 2 == 0:
...         a += 1
...         if a &gt; n:
...             break
...
&gt;&gt;&gt; a == n
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20714385</id><snippet>accept()</snippet></ROW><ROW><id>20714385</id><snippet>read()</snippet></ROW><ROW><id>20714385</id><snippet>code = conn.recv(buff)
</snippet></ROW><ROW><id>20714544</id><snippet>NULL</snippet></ROW><ROW><id>20714544</id><snippet>if (flagged_exception) {
    PyErr_SetString(PyExc_RuntimeError, "test except");
    flagged_exception = 0;
    return NULL;
}
</snippet></ROW><ROW><id>20714548</id><snippet>pointsList</snippet></ROW><ROW><id>20714548</id><snippet>self.pointsList = pointsList

#create 10 new organisms
for i in range(10):
    org = Value(pointsList)
    print org.getFitness()
    self.values.append(org)
    shuffle(pointsList)
</snippet></ROW><ROW><id>20714548</id><snippet>Value(pointsList)</snippet></ROW><ROW><id>20714548</id><snippet>Value</snippet></ROW><ROW><id>20714548</id><snippet>pointsList</snippet></ROW><ROW><id>20714548</id><snippet>Value.__init__</snippet></ROW><ROW><id>20714548</id><snippet>    self.pointsList = pointsList
</snippet></ROW><ROW><id>20714548</id><snippet>Value.__init__</snippet></ROW><ROW><id>20714548</id><snippet>self.pointsList = pointsList[:]</snippet></ROW><ROW><id>20714548</id><snippet>Value.__init__</snippet></ROW><ROW><id>20714548</id><snippet>org = Value(pointsList[:])</snippet></ROW><ROW><id>20714548</id><snippet>shuffled</snippet></ROW><ROW><id>20714548</id><snippet>def shuffled(seq):
    retval = list(seq)
    shuffle(retval)
    return retval
</snippet></ROW><ROW><id>20714548</id><snippet>self.pointsList = pointsList

#create 10 new organisms
for i in range(10):
    pointsList = shuffled(pointsList)
    org = Value(pointsList)
    print org.getFitness()
    self.values.append(org)
</snippet></ROW><ROW><id>20714620</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>20714620</id><snippet>To define a source code encoding, a magic comment must
be placed into the source files either as first or second
line in the file, such as:
</snippet></ROW><ROW><id>20714620</id><snippet># -*- coding: utf-8 -*-
from django.shortcuts import render
from django.http import HttpResponse
from django.template.loader import get_template
...
</snippet></ROW><ROW><id>20714854</id><snippet>temp = soup.find('yweather:condition')['temp']

&gt;&gt;&gt; 34
</snippet></ROW><ROW><id>20714854</id><snippet>yweather</snippet></ROW><ROW><id>20714963</id><snippet>right = range(10, 20)                                                       
left = range(10)   
sum(x*y for x, y in zip(left, right))
735
</snippet></ROW><ROW><id>20714963</id><snippet>from operator import mul
from itertools import starmap, izip
sum(starmap(mul, izip(left, right)))
735
</snippet></ROW><ROW><id>20715094</id><snippet>handle_argv</snippet></ROW><ROW><id>20715094</id><snippet>import sys

def handle_argv(argv=None):
    if argv is None:
        argv = sys.argv

    # do your parsing here, and don't bother catching exceptions

    return args

def main(args):
    # do whatever, reading args as necessary

if __name__ == "__main__":
    args = handle_argv(sys.argv)
    main(args)
</snippet></ROW><ROW><id>20715094</id><snippet>handle_argv</snippet></ROW><ROW><id>20715094</id><snippet>whateverthemoduleis.handle_argv(sys.argv)</snippet></ROW><ROW><id>20715195</id><snippet>matplotlib</snippet></ROW><ROW><id>20715195</id><snippet>matplotlib</snippet></ROW><ROW><id>20715195</id><snippet>numpy</snippet></ROW><ROW><id>20715195</id><snippet>python-dateutil</snippet></ROW><ROW><id>20715195</id><snippet>pytz</snippet></ROW><ROW><id>20715195</id><snippet>pyparsing</snippet></ROW><ROW><id>20715195</id><snippet>six</snippet></ROW><ROW><id>20715195</id><snippet>Pillow</snippet></ROW><ROW><id>20715195</id><snippet>tornado</snippet></ROW><ROW><id>20715195</id><snippet>pyside</snippet></ROW><ROW><id>20715195</id><snippet>pyqt</snippet></ROW><ROW><id>20715195</id><snippet>from pylab import *

# make a square figure and axes
figure(1, figsize=(6,6))
ax = axes([0.1, 0.1, 0.8, 0.8])

# The slices will be ordered and plotted counter-clockwise.
labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
fracs = [15, 30, 45, 10]
explode=(0, 0.05, 0, 0)

pie(fracs, explode=explode, labels=labels,
                autopct='%1.1f%%', shadow=True, startangle=90)
                # The default startangle is 0, which would start
                # the Frogs slice on the x-axis.  With startangle=90,
                # everything is rotated counter-clockwise by 90 degrees,
                # so the plotting starts on the positive y-axis.

title('Raining Hogs and Dogs', bbox={'facecolor':'0.8', 'pad':5})

show()
</snippet></ROW><ROW><id>20715209</id><snippet>class NotEnoughMagic(Exception):
    pass


class Character(object):
    fire = 0
    magic = 0
    hp = 100
    armor = 1
    def take_damage(self, amount):
        self.hp -= amount
        if self.hp &lt;= 0:
            print '%s HAS DIED!' % type(self).__name__
    def walk(self):
        pass
    def attack(self, target, attack_points):
        target.take_damage(attack_points / target.armor)


class Monster(Character):
    fire = 50
    hp = 150
    armor = 2
    def punch(self, target):
        self.attack(target, 25)


class Magician(Character):
    magic = 10
    def magic_armor(self):
        self.hp += 20
        self.magic -= 10
    def sword_attack(self, target):
        self.attack(target, 20)
    def magic_attack(self, target):
        """Does tons of damage but uses all magic"""
        if self.magic &gt; 0:
            self.attack(target, 100)
            self.magic = 0
        else:
            raise NotEnoughMagic()
</snippet></ROW><ROW><id>20715209</id><snippet>&gt;&gt;&gt; monster     = Monster()
&gt;&gt;&gt; magician = Magician()
&gt;&gt;&gt; 
&gt;&gt;&gt; print magician.hp
100
&gt;&gt;&gt; print monster.hp
150
&gt;&gt;&gt; 
&gt;&gt;&gt; monster.punch(magician)
&gt;&gt;&gt; magician.sword_attack(monster)
&gt;&gt;&gt; 
&gt;&gt;&gt; print magician.hp
75
&gt;&gt;&gt; print monster.hp
140
&gt;&gt;&gt; 
&gt;&gt;&gt; monster.punch(magician)
&gt;&gt;&gt; magician.magic_attack(monster)
&gt;&gt;&gt; 
&gt;&gt;&gt; print magician.hp
50
&gt;&gt;&gt; print monster.hp
90
&gt;&gt;&gt; 
&gt;&gt;&gt; monster.punch(magician)
&gt;&gt;&gt; magician.magic_attack(monster)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 14, in magic_attack
__main__.NotEnoughMagic
&gt;&gt;&gt; 
&gt;&gt;&gt; print magician.hp
25
&gt;&gt;&gt; print monster.hp
90
&gt;&gt;&gt; 
&gt;&gt;&gt; monster.punch(magician)
Magician HAS DIED!
&gt;&gt;&gt; magician.sword_attack(monster)
&gt;&gt;&gt; 
&gt;&gt;&gt; print magician.hp
0
&gt;&gt;&gt; print monster.hp
80
</snippet></ROW><ROW><id>20715209</id><snippet>&gt;&gt;&gt; # Gang of monsters
... monsters = [Monster() for x in range(10)]
&gt;&gt;&gt; magician = Magician()
&gt;&gt;&gt; 
&gt;&gt;&gt; # Prepare for battle
... while magician.magic &gt; 0:
...     magician.magic_armor()
...     
... # Put on some chain mail
... magician.armor += 5
  File "&lt;stdin&gt;", line 6
    magician.armor += 5
           ^
SyntaxError: invalid syntax
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; while magician.hp &gt; 0:
...     for m in monsters:
...             m.punch(magician)
... 
Magician HAS DIED!
Magician HAS DIED!
Magician HAS DIED!
Magician HAS DIED!
Magician HAS DIED!
Magician HAS DIED!
Magician HAS DIED!
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20715209</id><snippet>class TeleportAbilityMixin(object):
    def teleport(self, destination):
        cost = 20
        if self.mp &gt;= cost:
            # Unpack the x, y coordinates
            self.x, self.y = destination
            self.mp -= cost

class TeleportingMagician(Magician, TeleportAbilityMixin):
    pass

m = TeleportingMagician()
new_location = (10, 5)
m.teleport(new_location)
</snippet></ROW><ROW><id>20715331</id><snippet>dates</snippet></ROW><ROW><id>20715331</id><snippet>get_context_data</snippet></ROW><ROW><id>20715331</id><snippet>class YearReviews(YearArchiveView):

    def get_context_data(self, **kwargs):
        context = super(YearReviews, self).get_context_data(**kwargs)
        context['years_available'] = self.queryset.dates(self.date_field, 'year')
        return context
</snippet></ROW><ROW><id>20715331</id><snippet>datetime.date</snippet></ROW><ROW><id>20715331</id><snippet>get_context_data</snippet></ROW><ROW><id>20715331</id><snippet>|date</snippet></ROW><ROW><id>20715331</id><snippet>allow_future</snippet></ROW><ROW><id>20715411</id><snippet>json_text</snippet></ROW><ROW><id>20715411</id><snippet>json_text = json.dumps(json_data)
</snippet></ROW><ROW><id>20715411</id><snippet>json_text += json.dumps(json_data)
</snippet></ROW><ROW><id>20715411</id><snippet>for index, post in enumerate(posts, 1):
    json_data["post{}".format(index)] = {
           'subject': post.subject,
           'content': post.blog,
           'day'    : post.day_created.strftime('%d %b %Y')
    }

print {"allposts": json_data}
</snippet></ROW><ROW><id>20715455</id><snippet>urllib.request</snippet></ROW><ROW><id>20715455</id><snippet>import urllib.request
req = urllib.request.urlopen('http://www.google.com')
data = req.read()
</snippet></ROW><ROW><id>20715455</id><snippet>urlretrieve</snippet></ROW><ROW><id>20715455</id><snippet>urllib.request.urlretrieve('http://example.com/big.zip', 'file/on/disk.zip')
</snippet></ROW><ROW><id>20715464</id><snippet>zip</snippet></ROW><ROW><id>20715464</id><snippet>open</snippet></ROW><ROW><id>20715464</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; with open("blank.csv", "rb") as fp:
...     reader = csv.reader(fp)
...     rows = [line for line in reader if line]
...     blob = zip(*rows)
...     
&gt;&gt;&gt; blob
[('header1', 'header2', 'header4', 'header6'), ('data1', 'data2', 'data4', 'data6')]
</snippet></ROW><ROW><id>20715464</id><snippet>if line</snippet></ROW><ROW><id>20715464</id><snippet>if len(line) &gt; 0</snippet></ROW><ROW><id>20715526</id><snippet>&gt;&gt;&gt; d = {k: [] for k in range(10)}
&gt;&gt;&gt; d[3].append(100)
&gt;&gt;&gt; d
{0: [], 1: [], 2: [], 3: [100], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}
</snippet></ROW><ROW><id>20715526</id><snippet>defaultdict</snippet></ROW><ROW><id>20715526</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {})
&gt;&gt;&gt; d[9].append(100)
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {9: [100]})
</snippet></ROW><ROW><id>20715526</id><snippet>setdefault</snippet></ROW><ROW><id>20715526</id><snippet>d.setdefault(k, [])</snippet></ROW><ROW><id>20715526</id><snippet>d[k]</snippet></ROW><ROW><id>20715526</id><snippet>defaultdict</snippet></ROW><ROW><id>20715526</id><snippet>[]</snippet></ROW><ROW><id>20715526</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d.setdefault(3, []).append(100)
&gt;&gt;&gt; d
{3: [100]}
</snippet></ROW><ROW><id>20715722</id><snippet>#!/bin/sh
cd $HOME/Projects/openerp_7_0/server/
/usr/bin/xterm -e 'python openerp-server --addons-path=../addons; /bin/bash' &amp;
</snippet></ROW><ROW><id>20715722</id><snippet>/usr/bin/gnome-terminal</snippet></ROW><ROW><id>20715722</id><snippet>/usr/bin/xterm</snippet></ROW><ROW><id>20715722</id><snippet>; /bin/bash</snippet></ROW><ROW><id>20715722</id><snippet>; /bin/bash</snippet></ROW><ROW><id>20715783</id><snippet>\r\n</snippet></ROW><ROW><id>20715783</id><snippet>\n</snippet></ROW><ROW><id>20715783</id><snippet>dos2unix</snippet></ROW><ROW><id>20715783</id><snippet>unix2dos</snippet></ROW><ROW><id>20715869</id><snippet>how='last'</snippet></ROW><ROW><id>20715869</id><snippet>Data.Close.resample('W', how ='last')
</snippet></ROW><ROW><id>20715909</id><snippet>k=[[0.0234,0.131,0.475,0.393,0.620],[0.0234,0.131,0.475,0.393,0.620]]
t1=np.arange(0.1,0.4,0.1)
def thresh(k, start, end):
    for x in k:
        yield [[val for val in x if s&lt;=val&lt;=end] for s in start]


list(thresh(k, t1,0.5))
[[[0.131, 0.475, 0.393], [0.475, 0.393], [0.475, 0.393], [0.475]], [[0.131, 0.475, 0.393], [0.475, 0.393], [0.475, 0.393], [0.475]]]
</snippet></ROW><ROW><id>20715951</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup('''&lt;html&gt;
    &lt;body&gt;
        &lt;select&gt;
            &lt;option&gt;Option 1
                &lt;option&gt;Option 2
                    &lt;option&gt;Option3  
                        &lt;option&gt;Option 4
                        &lt;/option&gt;
                    &lt;/option&gt;
                &lt;/option&gt;
            &lt;/option&gt;
        &lt;/select&gt;
    &lt;/body&gt;
&lt;/html&gt;''')

print(soup)
</snippet></ROW><ROW><id>20715951</id><snippet>&lt;html&gt;
&lt;body&gt;
&lt;select&gt;
&lt;option&gt;Option 1
                &lt;/option&gt;&lt;option&gt;Option 2
                    &lt;/option&gt;&lt;option&gt;Option3
                        &lt;/option&gt;&lt;option&gt;Option 4
                        &lt;/option&gt;
&lt;/select&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>20716117</id><snippet>apt-get install</snippet></ROW><ROW><id>20716117</id><snippet>virtualenv</snippet></ROW><ROW><id>20716117</id><snippet>sudo apt-get install</snippet></ROW><ROW><id>20716117</id><snippet>virtualenv</snippet></ROW><ROW><id>20716117</id><snippet>sudo</snippet></ROW><ROW><id>20716117</id><snippet>virtualenv</snippet></ROW><ROW><id>20716117</id><snippet>apt-get</snippet></ROW><ROW><id>20716117</id><snippet>pip</snippet></ROW><ROW><id>20716117</id><snippet>virtualenv</snippet></ROW><ROW><id>20716117</id><snippet>sudo</snippet></ROW><ROW><id>20716117</id><snippet>pip</snippet></ROW><ROW><id>20716278</id><snippet>self.moveset[0]</snippet></ROW><ROW><id>20716278</id><snippet>functools.partial()</snippet></ROW><ROW><id>20716278</id><snippet>from functools import partial

self.moveset[0] = partial(punch, self.level)
</snippet></ROW><ROW><id>20716278</id><snippet>while</snippet></ROW><ROW><id>20716278</id><snippet>while True:
    new_punch_every_time = self.moveset[0]() #note: parentheses
</snippet></ROW><ROW><id>20716278</id><snippet>self.moveset[0]()</snippet></ROW><ROW><id>20716278</id><snippet>punch</snippet></ROW><ROW><id>20716278</id><snippet>level</snippet></ROW><ROW><id>20716278</id><snippet>self.level</snippet></ROW><ROW><id>20716278</id><snippet>partial</snippet></ROW><ROW><id>20716529</id><snippet>--no-install</snippet></ROW><ROW><id>20716529</id><snippet>--no-install</snippet></ROW><ROW><id>20716529</id><snippet>pip install --no-install netifaces
</snippet></ROW><ROW><id>20716529</id><snippet>cd /tmp/pip_build_falsetru/netifaces
</snippet></ROW><ROW><id>20716529</id><snippet>pip install .</snippet></ROW><ROW><id>20716529</id><snippet>python setup.py install</snippet></ROW><ROW><id>20716529</id><snippet>sudo pip install --no-clean . 
</snippet></ROW><ROW><id>20716529</id><snippet>install --no-install</snippet></ROW><ROW><id>20716529</id><snippet>pip install -d . --allow-external netifaces --allow-unverified netifaces netifaces
tar xzf netifaces-0.8.tar.gz     # Unpack the downloaded file.
cd netifaces-0.8
</snippet></ROW><ROW><id>20716578</id><snippet>proc.stdin.flush()
</snippet></ROW><ROW><id>20716578</id><snippet>proc.stdin.close()
</snippet></ROW><ROW><id>20716578</id><snippet>python.exe</snippet></ROW><ROW><id>20716578</id><snippet>proc = Popen(...)
out, err = proc.communicate(b'exit()\r\n')
print(out)  # OR print(out[:1]) if you want only the first byte to be print.
</snippet></ROW><ROW><id>20716608</id><snippet>Cut</snippet></ROW><ROW><id>20716608</id><snippet>Copy</snippet></ROW><ROW><id>20716608</id><snippet>Paste</snippet></ROW><ROW><id>20716608</id><snippet>IDLE</snippet></ROW><ROW><id>20716636</id><snippet>append</snippet></ROW><ROW><id>20716636</id><snippet>pop</snippet></ROW><ROW><id>20716636</id><snippet>all_anagrams.append(anagram)
</snippet></ROW><ROW><id>20716636</id><snippet>anagram</snippet></ROW><ROW><id>20716636</id><snippet>all_anagrams</snippet></ROW><ROW><id>20716636</id><snippet>anagram</snippet></ROW><ROW><id>20716636</id><snippet>main</snippet></ROW><ROW><id>20716636</id><snippet>            if len(choice) &lt;= len(inventory) and choice in inventory:
            inventory.subtract(choice)
            get_anagrams(user_word, anagram + [choice], words, inventory)
            inventory.add(choice)
</snippet></ROW><ROW><id>20716636</id><snippet>all_anagrams</snippet></ROW><ROW><id>20716709</id><snippet>list(g.keys())
</snippet></ROW><ROW><id>20716709</id><snippet>g[('quest', random(x))] = []
</snippet></ROW><ROW><id>20716709</id><snippet>[number for tag, number in g.keys() if tag == "quest"]
</snippet></ROW><ROW><id>20716709</id><snippet>for (tag, number), value in g.items():
    # do somthing
</snippet></ROW><ROW><id>20716778</id><snippet>QSpinBox.__init__</snippet></ROW><ROW><id>20716778</id><snippet>parent</snippet></ROW><ROW><id>20716778</id><snippet>version = QtGui.QSpinBox(self._data[key][-1], self)
</snippet></ROW><ROW><id>20716778</id><snippet>version = QtGui.QSpinBox(self)
</snippet></ROW><ROW><id>20716778</id><snippet>setValue</snippet></ROW><ROW><id>20716778</id><snippet>version.setValue(self._data[key][-1])
</snippet></ROW><ROW><id>20716924</id><snippet>sys.excepthook</snippet></ROW><ROW><id>20716937</id><snippet>discriptions = doc.getElementsByTagName("rdf:Description")
for dis in discriptions:
    siblings = dis.childNodes
    for sib in siblings:
        if str(sib.nodeName)=="skos:prefLabel" :
            preflabel = sib.firstChild.data
        if str(sib.nodeName)=="skos:scopeNote":
            scopenote = sib.firstChild.data
</snippet></ROW><ROW><id>20717054</id><snippet>cursor.execute('SELECT entry FROM table')
rows = [entry for entry, in cursor.fetchall()]
#                      ^
</snippet></ROW><ROW><id>20717054</id><snippet>&gt;&gt;&gt; rows = [('entry1',), ('entry2',), ('entry3',)]
&gt;&gt;&gt; rows
[('entry1',), ('entry2',), ('entry3',)]
&gt;&gt;&gt; rows = [entry for entry, in rows]
&gt;&gt;&gt; rows
['entry1', 'entry2', 'entry3']
</snippet></ROW><ROW><id>20717115</id><snippet>w</snippet></ROW><ROW><id>20717115</id><snippet>open</snippet></ROW><ROW><id>20717115</id><snippet>a</snippet></ROW><ROW><id>20717115</id><snippet>....

with open ('happy.csv', 'ab') as f:
    #                    ^
    ....
</snippet></ROW><ROW><id>20717115</id><snippet>f.close()</snippet></ROW><ROW><id>20717115</id><snippet>with</snippet></ROW><ROW><id>20717596</id><snippet>$('#edit_user_image').change(function(){
    var csrftoken = document.getElementsByName('csrfmiddlewaretoken')[0].value
    var formData = new FormData($("#edit_user_image")[0]);
    var formData = new FormData(); 
    formData.append("file", $('#edit_user_image')[0].files[0]);
    formData.append("csrfmiddlewaretoken", csrftoken);

    $.ajax({  
      type: "POST", 
      url: "/upload-image/",  
      data: formData, 
      contentType: false, 
      processData: false, 

    });  
  });
</snippet></ROW><ROW><id>20717930</id><snippet>print("Please Enter a word")
input()
rev(text)
</snippet></ROW><ROW><id>20717930</id><snippet>text</snippet></ROW><ROW><id>20717930</id><snippet>print("Please Enter a word")
text = input()
rev(text)
</snippet></ROW><ROW><id>20717930</id><snippet>input</snippet></ROW><ROW><id>20717930</id><snippet>text</snippet></ROW><ROW><id>20717930</id><snippet>print</snippet></ROW><ROW><id>20717930</id><snippet>input("Please Enter a word") 
</snippet></ROW><ROW><id>20718147</id><snippet>extern "C"</snippet></ROW><ROW><id>20718147</id><snippet>PyMODINIT_FUNC</snippet></ROW><ROW><id>20718147</id><snippet>extern "C"</snippet></ROW><ROW><id>20718147</id><snippet>cdecl</snippet></ROW><ROW><id>20718229</id><snippet>&gt;&gt;&gt; from dis import dis
&gt;&gt;&gt; dis(compile('print outer', '&lt;string&gt;', 'exec'))
  1           0 LOAD_NAME                0 (outer)
              3 PRINT_ITEM          
              4 PRINT_NEWLINE       
              5 LOAD_CONST               0 (None)
              8 RETURN_VALUE
</snippet></ROW><ROW><id>20718229</id><snippet>else if (Py_TYPE(op)-&gt;tp_print == NULL) {
    PyObject *s;
    if (flags &amp; Py_PRINT_RAW)
        s = PyObject_Str(op);
    else
        s = PyObject_Repr(op);
    ...
}
else
    ret = (*Py_TYPE(op)-&gt;tp_print)(op, fp, flags);
</snippet></ROW><ROW><id>20718229</id><snippet>__str__</snippet></ROW><ROW><id>20718229</id><snippet>__repr__</snippet></ROW><ROW><id>20718318</id><snippet>foo.abc</snippet></ROW><ROW><id>20718318</id><snippet>d = {"abc": value}</snippet></ROW><ROW><id>20718318</id><snippet>foo</snippet></ROW><ROW><id>20718318</id><snippet>foo.d["abc"]</snippet></ROW><ROW><id>20718328</id><snippet>return HttpResponse(map(str, soup.find_all('a', href = re.compile('.getJobInfo'))))
</snippet></ROW><ROW><id>20718334</id><snippet>&gt;&gt;&gt; a=[1,2,3,4,5,7,8,9,10]
&gt;&gt;&gt; sum(xrange(a[0],a[-1]+1)) - sum(a)
6
</snippet></ROW><ROW><id>20718334</id><snippet>&gt;&gt;&gt; a[-1]*(a[-1] + a[0]) / 2 - sum(a)
6
</snippet></ROW><ROW><id>20718334</id><snippet>&gt;&gt;&gt; a=[1,2,3,4,7,8,10]
&gt;&gt;&gt; from itertools import imap, chain
&gt;&gt;&gt; print list(chain.from_iterable((a[i] + d for d in xrange(1, diff))
                        for i, diff in enumerate(imap(sub, a[1:], a))
                        if diff &gt; 1))
[5, 6, 9]
</snippet></ROW><ROW><id>20718517</id><snippet>if request.GET:
    form = SearchForm(request.GET)
</snippet></ROW><ROW><id>20718668</id><snippet>class Article(Base):
    ...
    name = Column(Text, nullable=False, unique=True)
    ...

    @validates('name')
    def validate_name(self, key, value):
        assert value != ''
        return value
</snippet></ROW><ROW><id>20718668</id><snippet>class Article(Base):
    ...
    name = Column(Text, CheckConstraint('name!=""')
    ...
</snippet></ROW><ROW><id>20718739</id><snippet>dict</snippet></ROW><ROW><id>20718739</id><snippet>dtDict = {str:'text', int:'short', float:'float'}
</snippet></ROW><ROW><id>20718739</id><snippet>foo = ['plot001', '01-01-2013', 'XX', '10', '12.5', '0.65', 'A']
from ast import literal_eval

dt = []
for item in foo:
    try:
        dt.append(type(literal_eval(item)))
    except:
        dt.append(str)

dtDict = {str:'text', int:'short', float:'float'}
print map(dtDict.get, dt)
</snippet></ROW><ROW><id>20718739</id><snippet>['text', 'text', 'text', 'short', 'float', 'float', 'text']
</snippet></ROW><ROW><id>20718799</id><snippet>np.maximum</snippet></ROW><ROW><id>20718799</id><snippet>np.maximum(x, 0)
</snippet></ROW><ROW><id>20718810</id><snippet>xbmc.executeJSONRPC('{"jsonrpc":"2.0","method":"Input.ExecuteAction","params":{"action":"togglefullscreen"},"id":"1"}')
os.system('sh -c "sudo killall -STOP xbmc.bin &amp;&amp; runmyapp &amp;&amp; sudo killall -CONT xbmc.bin"') //run my app
xbmc.executeJSONRPC('{"jsonrpc":"2.0","method":"Input.ExecuteAction","params":{"action":"togglefullscreen"},"id":"1"}')
</snippet></ROW><ROW><id>20719373</id><snippet>fields = ["reference_link", "rss_link"] # define fields to use
with open(filename,'a+') as f: # handle the source file
    f.write("{}\n".format('\t'.join(str(field) 
                              for field in fields))) # write header 
    for item in items:
        f.write("{}\n".format('\t'.join(str(item[field]) 
                              for field in fields))) # write items
</snippet></ROW><ROW><id>20719373</id><snippet>"{}\n".format(s)</snippet></ROW><ROW><id>20719373</id><snippet>"%s\n" % s</snippet></ROW><ROW><id>20719415</id><snippet>with open(filename) as f:
    text = f.read()

sentences = re.split(r' *[\.\?!][\'"\)\]]* *', text)
</snippet></ROW><ROW><id>20719415</id><snippet>text = re.sub(r'(M\w{1,2})\.', r'\1', text) # no for loop needed for this, like there was before
</snippet></ROW><ROW><id>20719415</id><snippet>sentences = re.split(r' *[\.\?!][\'"\)\]]* *', text)
</snippet></ROW><ROW><id>20719525</id><snippet>&gt;&gt;&gt; x = "hello"
&gt;&gt;&gt; x.replace("hello", "goodbye")
'goodbye'
&gt;&gt;&gt; x
'hello'
</snippet></ROW><ROW><id>20719525</id><snippet>replace</snippet></ROW><ROW><id>20719525</id><snippet>source_path = source_path.replace("\\", "/")
</snippet></ROW><ROW><id>20719595</id><snippet>dict.update</snippet></ROW><ROW><id>20719595</id><snippet>dict</snippet></ROW><ROW><id>20719595</id><snippet>None</snippet></ROW><ROW><id>20719595</id><snippet>update</snippet></ROW><ROW><id>20719595</id><snippet>foo</snippet></ROW><ROW><id>20719595</id><snippet>super(B, self).foo()</snippet></ROW><ROW><id>20719595</id><snippet>A.foo(self)</snippet></ROW><ROW><id>20719595</id><snippet>class B(A):
    def foo(self):
        dct = super(B, self).foo()
        dct.update({'field2':'value2'})
        return dct
</snippet></ROW><ROW><id>20719595</id><snippet>super</snippet></ROW><ROW><id>20719595</id><snippet>B</snippet></ROW><ROW><id>20719595</id><snippet>dct = super(B, self).foo()
</snippet></ROW><ROW><id>20719595</id><snippet>dct = A.foo(self)
</snippet></ROW><ROW><id>20719595</id><snippet>dct = A.foo(self)
</snippet></ROW><ROW><id>20719595</id><snippet>super</snippet></ROW><ROW><id>20719746</id><snippet>types.CodeType()</snippet></ROW><ROW><id>20719746</id><snippet>function.func_code</snippet></ROW><ROW><id>20719746</id><snippet>types.CodeType()</snippet></ROW><ROW><id>20719746</id><snippet>import types

def change_func_args(function, new_args):
    """ Create a new function with its arguments renamed to new_args. """
    code_obj = function.func_code
    assert(0 &lt;= len(new_args) &lt;= code_obj.co_argcount)
    # the arguments are just the first co_argcount co_varnames
    # replace them with the new argument names in new_args
    new_varnames = tuple(list(new_args[:code_obj.co_argcount]) +
                         list(code_obj.co_varnames[code_obj.co_argcount:]))
    # type help(types.CodeType) at the interpreter prompt for information
    new_code_obj = types.CodeType(code_obj.co_argcount,
                                  code_obj.co_nlocals,
                                  code_obj.co_stacksize,
                                  code_obj.co_flags,
                                  code_obj.co_code,
                                  code_obj.co_consts,
                                  code_obj.co_names,
                                  new_varnames,
                                  code_obj.co_filename,
                                  code_obj.co_name,
                                  code_obj.co_firstlineno,
                                  code_obj.co_lnotab,
                                  code_obj.co_freevars,
                                  code_obj.co_cellvars)
    modified = types.FunctionType(new_code_obj, function.func_globals)
    function.__code__ = modified.__code__  # replace code portion of original

if __name__ == '__main__':

    import inspect

    def f(x, y):
        return x+y

    def g(a, b):
        return f(a, b)

    print('Before:')
    print('inspect.getargspec(g).args: {}'.format(inspect.getargspec(g).args))
    print('g(1, 2): {}'.format(g(1, 2)))

    change_func_args(g, ['p', 'q'])

    print('')
    print('After:')
    print('inspect.getargspec(g).args: {}'.format(inspect.getargspec(g).args))
    print('g(1, 2): {}'.format(g(1, 2)))
</snippet></ROW><ROW><id>20719746</id><snippet>Before:
inspect.getargspec(g).args: ['a', 'b']
g(1, 2): 3

After:
inspect.getargspec(g).args: ['p', 'q']
g(1, 2): 3
</snippet></ROW><ROW><id>20719787</id><snippet>int</snippet></ROW><ROW><id>20719787</id><snippet>import struct
import hashlib
number_of_workers = 16
my_md5 = hashlib.md5('stackoverflow.com').hexdigest()
# my_md5 is 'd0cc85b26f2ceb8714b978e07def4f6e'

id = struct.unpack('&gt;L', my_md5.decode('hex')[:4])[0]
# id is 3503064498L
# id % number_of_workers = 2
string_id = '%X' % (id % number_of_workers, )
# string_id = '2'

send_to_worker(string_id, task)
</snippet></ROW><ROW><id>20719808</id><snippet>import imp
hest  = imp.load_source("Name", Path)
</snippet></ROW><ROW><id>20719841</id><snippet>multiprocessing.Pipe</snippet></ROW><ROW><id>20719841</id><snippet>import struct

def send_data(file_descriptor, data):
    length = struct.pack('&gt;L', len(data))
    packet = "%s%s" % (length, data)
    file_descriptor.write(packet)

def read_data(file_descriptor):
    binary_length = file_descriptor.read(4)
    length = struct.unpack('&gt;L', binary_length)[0]

    data = ''
    while len(data) &lt; length:
        data += file_descriptor.read(length - len(data))
</snippet></ROW><ROW><id>20719841</id><snippet>multiprocessing</snippet></ROW><ROW><id>20719841</id><snippet>cPickle.dumps</snippet></ROW><ROW><id>20719841</id><snippet>cPickle.loads</snippet></ROW><ROW><id>20719961</id><snippet>def change_2(v):
    v = v[:]
    v[2] = 6
    return v
</snippet></ROW><ROW><id>20719961</id><snippet>v[:]</snippet></ROW><ROW><id>20719961</id><snippet>list()</snippet></ROW><ROW><id>20719961</id><snippet>v = list(v)
</snippet></ROW><ROW><id>20719961</id><snippet>def change_2(v):
    v[2] = 6
    return v 

x = [1,2,3]
z = change_2(x[:])
</snippet></ROW><ROW><id>20720179</id><snippet>FileField.size</snippet></ROW><ROW><id>20720179</id><snippet>def validate_file_size(value):
    if value.size &gt; 1048576:  # Larger than 1MB
        raise ValidationError(u'%s file is too big' % value.name)
</snippet></ROW><ROW><id>20720179</id><snippet>save()</snippet></ROW><ROW><id>20720179</id><snippet>VideoContent.size</snippet></ROW><ROW><id>20720179</id><snippet>class VideoContent(models.Model):
    ...
    def save(self, *args, **kwargs):
        self.size = self.file.size
        super(VideoContent, self).save(*args, **kwargs)
        self.size = self.file.size
</snippet></ROW><ROW><id>20720213</id><snippet>getattr</snippet></ROW><ROW><id>20720213</id><snippet>class myclass:
    def __init__ (self, example):
        self.example = example

x = myclass('foo')
print(getattr(x, 'example')) # foo
</snippet></ROW><ROW><id>20720213</id><snippet>examplefunction</snippet></ROW><ROW><id>20720213</id><snippet>print(getattr(listex[randomnumber], myproblem))
</snippet></ROW><ROW><id>20720377</id><snippet>A</snippet></ROW><ROW><id>20720377</id><snippet>globals()</snippet></ROW><ROW><id>20720377</id><snippet>if globals()[S[0]] in M:
</snippet></ROW><ROW><id>20720377</id><snippet>lists = {'A': [...], 'C': [...]}
</snippet></ROW><ROW><id>20720377</id><snippet>S[0] in lists</snippet></ROW><ROW><id>20720558</id><snippet>if all(x == 'value' for x in (var1, var2, var3)):
</snippet></ROW><ROW><id>20720558</id><snippet>if var1 == 'value' and var2 == 'value' and var3 == 'value':
</snippet></ROW><ROW><id>20720922</id><snippet>str.split()</snippet></ROW><ROW><id>20720922</id><snippet>for line in sentences:
    if any(q.lower() == word.lower() for word in line.split()):
        outfile.write(line + '\n')
</snippet></ROW><ROW><id>20720922</id><snippet>.strip('?!."()')</snippet></ROW><ROW><id>20720922</id><snippet>\r\n</snippet></ROW><ROW><id>20720922</id><snippet>\n</snippet></ROW><ROW><id>20720922</id><snippet>import re

def finding(q, sentences, outfile):
    pattern = re.compile(r'\b{}\b'.format(re.escape(q), flags=re.IGNORE)
    for line in sentences:
        if pattern.match(line)
            outfile.write(line + '\n')
</snippet></ROW><ROW><id>20720922</id><snippet>re.IGNORE</snippet></ROW><ROW><id>20720922</id><snippet>\b</snippet></ROW><ROW><id>20720922</id><snippet>re.escape()</snippet></ROW><ROW><id>20720953</id><snippet>def heavy_path(node):
  if not node
    return (0,[])
  [lweight,llist] = heavy_path(node.left)
  [rweight,rlist] = heavy_path(node.right)
  if lweight&gt;rweight:
    return (node.val+lweight,[node.val]+llist)
  else:
    return (node.val+rweight,[node.val]+rlist)
</snippet></ROW><ROW><id>20720953</id><snippet>def weight(node):
  if node == None:
      return 0
  node.pathweight=node.val+max(weight(node.left),weight(node.right))
  return node.pathweight

def heavy_edge(node):
  if not node.left:
    lweight=0
  else:
    lweight=node.left.pathweight
  if not node.right:
    rweight=0
  else:
    rweight=node.right.pathweight
  if lweight&gt;rweight:
    return [node.val,heavy_edge(node.left)]
  else:
    return [node.val,heavy_edge(node.right)]

weight(t) #Precalculate the pathweight of all the nodes in O(n) time
heavy_edge(T) #Use the precalculated pathweights to efficient find list the heaviest path in O(lg n) time
</snippet></ROW><ROW><id>20721083</id><snippet>lambda</snippet></ROW><ROW><id>20721083</id><snippet>producersPool.submit(lambda i: print(i), (i,))
</snippet></ROW><ROW><id>20721187</id><snippet>usecols</snippet></ROW><ROW><id>20721187</id><snippet>names</snippet></ROW><ROW><id>20721187</id><snippet>IndexError</snippet></ROW><ROW><id>20721187</id><snippet>from StringIO import StringIO
import pandas as pd

data = """2013-10-11 11:53:49,1,2,3,4
2013-10-11 11:53:50,1,2,3,4
2013-10-11 11:53:51,1,2,3,4"""

df = pd.read_csv(
    StringIO(data),
    header=None,
    usecols=[0,2,4],
    names=["DATE","COl2","COL4"],
    parse_dates=["DATE"],
    index_col=0,
)
print df
</snippet></ROW><ROW><id>20721187</id><snippet>ppp_data.rename(columns=dict(zip(columns[2:],names)), inplace=True)
</snippet></ROW><ROW><id>20721196</id><snippet>sel.select('//a[contains(@href, "{0}")]/@href'.format(url_type)).extract()</snippet></ROW><ROW><id>20721251</id><snippet>class example(QtGui.QWidget):
    def __init__(self, parent= None):
        super(example, self).__init__()

        grid = QtGui.QGridLayout()
        grid.setSpacing(10)

        self.widget = QtGui.QWidget()

        # set the widget as parent of its own layout
        self.layout = QtGui.QGridLayout(self.widget)

        for i in range(5):
            btn = QtGui.QPushButton("test"+str(i))
            self.layout.addWidget(btn,i,0)
            btn.clicked.connect(self.buttonClicked)

        # following lines are redundant
        # self.count = i
        # self.widget.setLayout(self.layout)

        self.scroll = QtGui.QScrollArea()
        # need this so that scrollarea handles resizing
        self.scroll.setWidgetResizable(True)
        # these two lines may not be needed now
        self.scroll.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.scroll.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)

        self.scroll.setWidget(self.widget)

        grid.addWidget(self.scroll, 3, 0)
        self.setLayout(grid)

    def buttonClicked(self):
        title = QtGui.QLabel('Title' + str(self.layout.count()))
        self.layout.addWidget(title)
        # following lines are redundant
        # self.layout.addWidget(title, self.count + 1, 0)
        # self.count += 1
        # self.widget.addLayout(self.layout,0)
        # self.scroll.addWidget(self.widget,0)
</snippet></ROW><ROW><id>20721682</id><snippet>double</snippet></ROW><ROW><id>20721682</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; Fraction("10.25")
Fraction(41, 4)
&gt;&gt;&gt; x = Fraction("10.25")
&gt;&gt;&gt; x**100
Fraction(189839102486063226543090986563273122284619337618944664609359292215966165735102377674211649585188827411673346619890309129617784863285653302296666895356073140724001, 1606938044258990275541962092341162602522202993782792835301376)
</snippet></ROW><ROW><id>20721682</id><snippet>decimal</snippet></ROW><ROW><id>20721682</id><snippet>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; getcontext().prec = 150
&gt;&gt;&gt; Decimal("10.25")**100
Decimal('118137163510621850716311252946961817841741635398513936935237985161753371506358048089333490072379307296.453937046171460995169093650913476028229144848989')
</snippet></ROW><ROW><id>20721781</id><snippet>sys.argv</snippet></ROW><ROW><id>20721781</id><snippet>import sys

if "testarg" in sys.argv:
    # do something
</snippet></ROW><ROW><id>20721781</id><snippet>argparse</snippet></ROW><ROW><id>20721781</id><snippet>psutil</snippet></ROW><ROW><id>20721781</id><snippet>import psutil

for process in psutil.process_iter():
    cmdline = process.cmdline
    if "main.py" in cmdline and "testarg" in cmdline:
        # do something
</snippet></ROW><ROW><id>20721974</id><snippet>"a"</snippet></ROW><ROW><id>20721974</id><snippet>"&lt;&lt;koala&gt;&gt;"</snippet></ROW><ROW><id>20722029</id><snippet>require_once 'google/appengine/api/taskqueue/PushTask.php';
use \google\appengine\api\taskqueue\PushTask;

$task_name = (new PushTask('/worker/anchorextractor/1', array(
  'content_id' =&gt; 'aa', 
  'content_type' =&gt; 'aa'
)))-&gt;add("tagextractor");

syslog(LOG_INFO, "new task=".$task_name);
</snippet></ROW><ROW><id>20722075</id><snippet>            partial+=[row]
            ...
            partial = partial[0:current-1]
</snippet></ROW><ROW><id>20722075</id><snippet>partial.append(row) # this is equivalent to:  partial += [row]
...
partial.pop() # modifes list in place
</snippet></ROW><ROW><id>20722137</id><snippet>tmp = line[0][:-1]
</snippet></ROW><ROW><id>20722137</id><snippet>tmp = line[0].strip()
</snippet></ROW><ROW><id>20722137</id><snippet>with open('New.txt') as f:
    lines = f.readlines() # auto closes the file after reading, good practice.

tmp = lines[0] # no need for parens strictly

try:
    if tmp == "word7":  # this should work even if tmp has extra spacing either side i.e. return a bool, True or False and not some error
        print "ok"
except Error: # include particular Error name here that you are getting.
    print "not ok"
</snippet></ROW><ROW><id>20722232</id><snippet>app_name/management/commands/populatedb.py</snippet></ROW><ROW><id>20722232</id><snippet>python manage.py populatedb</snippet></ROW><ROW><id>20722476</id><snippet>changelabel</snippet></ROW><ROW><id>20722476</id><snippet>lambda</snippet></ROW><ROW><id>20722476</id><snippet>btn=Button(window, text="Change label text", command=lambda: changelabel(v))
</snippet></ROW><ROW><id>20722476</id><snippet>changelabel(v)
</snippet></ROW><ROW><id>20722529</id><snippet>profile = user.get_profile()
profile.sex = fsex
profile.save()
</snippet></ROW><ROW><id>20722529</id><snippet>user = User.objects.create_user(username=fuser, email=femail)
user.set_password(fpassword)
</snippet></ROW><ROW><id>20722729</id><snippet>Foo</snippet></ROW><ROW><id>20722729</id><snippet>object</snippet></ROW><ROW><id>20722729</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__(self, val1):
...         self.val1 = val1
... 
&gt;&gt;&gt; class Goo(Foo):
...     def __init__(self, val1, val2):
...         super(val1)
...         self.val2 = val2
... 
&gt;&gt;&gt; f=Foo(1)
&gt;&gt;&gt; f.__class__
&lt;class '__main__.Foo'&gt;
&gt;&gt;&gt; f.__class__ = Goo
&gt;&gt;&gt; f
&lt;__main__.Goo object at 0x10e9e6cd0&gt;
&gt;&gt;&gt; type(f)
&lt;class '__main__.Goo'&gt;
</snippet></ROW><ROW><id>20722729</id><snippet>self.__class__</snippet></ROW><ROW><id>20722729</id><snippet>changeToGoo()</snippet></ROW><ROW><id>20722729</id><snippet>def changeToGoo(self)
    self.__class__ = Goo
    self.val2 = 'some value'
</snippet></ROW><ROW><id>20722729</id><snippet>__init__</snippet></ROW><ROW><id>20722729</id><snippet>def changeToGoo(self)
    self.__class__ = Goo
    self.__init__(self.val1, 'some value')
</snippet></ROW><ROW><id>20722760</id><snippet>Resource</snippet></ROW><ROW><id>20722760</id><snippet>/api/users</snippet></ROW><ROW><id>20722760</id><snippet>/api/cities</snippet></ROW><ROW><id>20722760</id><snippet>http://example.com/api/users</snippet></ROW><ROW><id>20722760</id><snippet>{
    "users": [ 
        {
            "url": "http://example.com/api/user/1",
            "name": "John Smith",
            "city": "http://example.com/api/city/35"
        },
        {
            "url": "http://example.com/api/user/2",
            "name": "Susan Jones",
            "city": "http://example.com/api/city/2"
        }
    ]
}
</snippet></ROW><ROW><id>20722760</id><snippet>/api/city/&lt;id&gt;</snippet></ROW><ROW><id>20722760</id><snippet>/api/cities</snippet></ROW><ROW><id>20722760</id><snippet>/api/cities/&lt;name&gt;</snippet></ROW><ROW><id>20722760</id><snippet>&lt;name&gt;</snippet></ROW><ROW><id>20722760</id><snippet>Resource</snippet></ROW><ROW><id>20722760</id><snippet>    class CitiesByNameAPI(Resource):
        def __init__(self):
            # ...    
        def get(self, name):
            # ...

    api.add_resource(CitiesByNameAPI, '/api/cities/&lt;name&gt;', endpoint = 'cities_by_name')
</snippet></ROW><ROW><id>20722760</id><snippet>/api/users</snippet></ROW><ROW><id>20722760</id><snippet>http://example/api/city/35</snippet></ROW><ROW><id>20722760</id><snippet>{
    "url": "http://example.com/api/city/35",
    "name": "San Francisco",
    "users": "http://example/com/api/city/35/users"
}
</snippet></ROW><ROW><id>20722760</id><snippet>Resource</snippet></ROW><ROW><id>20722760</id><snippet>    class UsersByCityAPI(Resource):
        def __init__(self):
            # ...    
        def get(self, id):
            # ...

    api.add_resource(UsersByCityAPI, '/api/cities/&lt;int:id&gt;/users', endpoint = 'users_by_city')
</snippet></ROW><ROW><id>20722806</id><snippet>range</snippet></ROW><ROW><id>20722806</id><snippet>dis</snippet></ROW><ROW><id>20722806</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis('a=[]\nfor i in range(0,60000000):\n a.append(0)')
  1           0 BUILD_LIST               0 
              3 STORE_NAME               0 (a) 

  2           6 SETUP_LOOP              36 (to 45) 
              9 LOAD_NAME                1 (range) 
             12 LOAD_CONST               0 (0) 
             15 LOAD_CONST               1 (60000000) 
             18 CALL_FUNCTION            2 (2 positional, 0 keyword pair) 
             21 GET_ITER             
        &gt;&gt;   22 FOR_ITER                19 (to 44) 
             25 STORE_NAME               2 (i) 

  3          28 LOAD_NAME                0 (a) 
             31 LOAD_ATTR                3 (append) 
             34 LOAD_CONST               0 (0) 
             37 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             40 POP_TOP              
             41 JUMP_ABSOLUTE           22 
        &gt;&gt;   44 POP_BLOCK            
        &gt;&gt;   45 LOAD_CONST               2 (None) 
             48 RETURN_VALUE         
</snippet></ROW><ROW><id>20722806</id><snippet>a.append</snippet></ROW><ROW><id>20722806</id><snippet>&gt;&gt;&gt; dis.dis('a = [0] * 60000000')
  1           0 LOAD_CONST               0 (0) 
              3 BUILD_LIST               1 
              6 LOAD_CONST               1 (60000000) 
              9 BINARY_MULTIPLY      
             10 STORE_NAME               0 (a) 
             13 LOAD_CONST               2 (None) 
             16 RETURN_VALUE         
</snippet></ROW><ROW><id>20722806</id><snippet>BINARY_MULTIPLY</snippet></ROW><ROW><id>20722806</id><snippet>list_multiply</snippet></ROW><ROW><id>20722806</id><snippet>listobject.c</snippet></ROW><ROW><id>20722806</id><snippet>[0]</snippet></ROW><ROW><id>20722806</id><snippet>if (Py_SIZE(a) == 1) {
    elem = a-&gt;ob_item[0];
    for (i = 0; i &lt; n; i++) {
        items[i] = elem;
        Py_INCREF(elem);
    }
    return (PyObject *) np;
}
</snippet></ROW><ROW><id>20722912</id><snippet>import numpy as np
isprime = lambda x: np.all(np.mod(x, range(2, 1 + int(np.sqrt(x)))))
primes = np.array([ x for x in range(2, 255) if isprime(x) ])
</snippet></ROW><ROW><id>20722912</id><snippet>('{}.{}.{}.{}'.format(*x) for x in itertools.product(primes, repeat=4))
</snippet></ROW><ROW><id>20722912</id><snippet>socket</snippet></ROW><ROW><id>20722912</id><snippet>from multiprocessing import Pool
from socket import gethostbyaddr

def gethost(addr):
    try:
        return gethostbyaddr(addr)
    except:
        pass

if __name__ == '__main__':

    p = Pool(3)
    print (p.map(gethost,['74.125.228.137',
                          '11.222.333.444',
                          '17.149.160.49',
                          '98.139.183.24']))
</snippet></ROW><ROW><id>20722942</id><snippet>owner</snippet></ROW><ROW><id>20722942</id><snippet>Plan_Owner</snippet></ROW><ROW><id>20722942</id><snippet>plan_owner</snippet></ROW><ROW><id>20722942</id><snippet>Ticket_Number</snippet></ROW><ROW><id>20722942</id><snippet>ticket_number</snippet></ROW><ROW><id>20722942</id><snippet>UserData</snippet></ROW><ROW><id>20722942</id><snippet>class UserDataCreateView(CreateView):
  model=models.UserData

  def get_form_kwargs(self):
      kwargs = super(UserDataCreateView, self).get_form_kwargs()
      kwargs.update({'request': self.request})
      return kwargs

class UserDataDetailView(DetailView):
  def get_object(self, queryset=None):
      obj = super(UserDataDetailView, self).get_object(queryset)
      if not user_has_access(obj, self.request):
          raise Http404(u"Access Denied")
      return obj

class UserDataUpdateView(UpdateView):
  model=models.AuthorityData

  def get_form_kwargs(self):
      kwargs = super(UserDataUpdateView, self).get_form_kwargs()
      kwargs.update({'request': self.request})
      return kwargs

  def get_object(self, queryset=None):
      obj = super(UserDataUpdateView, self).get_object(queryset)
      if not user_has_access(obj, self.request):
          raise Http404(u"Access Denied")
      return obj
</snippet></ROW><ROW><id>20722942</id><snippet>request.user</snippet></ROW><ROW><id>20722942</id><snippet>request</snippet></ROW><ROW><id>20722942</id><snippet>ModelForm</snippet></ROW><ROW><id>20722942</id><snippet>has_access</snippet></ROW><ROW><id>20722942</id><snippet>def has_access(obj, req):
    if req.user == obj.owner:
        return True
    return False
</snippet></ROW><ROW><id>20722942</id><snippet>class UserDataModelForm(forms.ModelForm):
    class Meta:
      model = models.UserData
      exclude = ('owner',)

    def __init__(self, *args, **kwargs):
      self.request = kwargs.pop('request', None)
      super(ActionModelForm, self).__init__(*args, **kwargs)

    def save(self, force_insert=False, force_update=False, commit=True):
      obj = super(UserDataModelForm, self).save(commit=False)
      if obj:
          obj.owner = self.request.user
          obj.save()
      return obj
</snippet></ROW><ROW><id>20722942</id><snippet>request</snippet></ROW><ROW><id>20722942</id><snippet>kwargs</snippet></ROW><ROW><id>20722942</id><snippet>reqest.user</snippet></ROW><ROW><id>20723140</id><snippet>def string_in_list(s, entities):
    """Return elements of entities that contain given string."""
    for e in entities:
        if s in e:
            yield e

huge_list = ['you', 'say', 'hello', 'I', 'say', 'goodbye']  # ...
matches = string_in_list('y', huge_list)  # look for strings with letter 'y'
next(matches)  # first match
next(matches)  # second match
</snippet></ROW><ROW><id>20723140</id><snippet>def string_in_list(s, entities):
    idx = 0
    while idx &lt; len(entities):
        if s in entities[idx]:
            yield entities[idx]
        idx += 1
        if idx &gt;= len(entities):
            # restart from the beginning
            idx = 0
huge_list = ['you', 'say', 'hello']
m = string_in_list('y', huge_list)
next(m)  # you
next(m)  # say
next(m)  # you, again
</snippet></ROW><ROW><id>20723199</id><snippet>stop_words = frozenset(['the', 'a', 'is'])
def mostCommonWords(concordanceList):
    finalCount = Counter()
    for line in concordanceList:
        words = [w for w in line.split(" ") if w not in stop_words]
        finalCount.update(words)  # update final count using the words list
    return finalCount
</snippet></ROW><ROW><id>20723225</id><snippet>TCP4ClientEndpoint</snippet></ROW><ROW><id>20723225</id><snippet>ProxyAgent</snippet></ROW><ROW><id>20723225</id><snippet>auth = base64.b64encode("%s:%s" % (username, password))
headers['Proxy-Authorization'] = ["Basic " + auth.strip()]
endpoint = endpoints.TCP4ClientEndpoint(reactor, host, port, timeout=yourTimeout)
agent = client.ProxyAgent(endpoint, reactor=reactor, pool=pool)
</snippet></ROW><ROW><id>20723656</id><snippet>tkinter.filedialog.askopenfilename</snippet></ROW><ROW><id>20723656</id><snippet>grid</snippet></ROW><ROW><id>20723656</id><snippet>button = tkinter.Button(gui, command=lambda: tkinter.filedialog.askopenfilename(initialdir='C:/Users/%s' % user))
button.grid()
</snippet></ROW><ROW><id>20723656</id><snippet>import tkinter
import tkinter.filedialog
import getpass
gui = tkinter.Tk()
user = getpass.getuser()
button = tkinter.Button(gui, command=lambda: tkinter.filedialog.askopenfilename(initialdir='C:/Users/%s' % user))
button.grid()
gui.mainloop()
</snippet></ROW><ROW><id>20723693</id><snippet>pkgutil</snippet></ROW><ROW><id>20723693</id><snippet>import pkgutil

def module_exists(m):
    for module_loader, name, ispkg in pkgutil.iter_modules():
        if name == m:
            return True
    return False
</snippet></ROW><ROW><id>20723775</id><snippet>j</snippet></ROW><ROW><id>20723775</id><snippet>&gt;&gt;&gt; results = []
&gt;&gt;&gt; for no in j["response"]["result"]["Potentials"]["row"]:
...     data = no["FL"]
...     if isinstance(data, list) and len(data) &gt; 1:
...         results.append(int(data[1]["content"]))
...
&gt;&gt;&gt; results
[694275295, 729545274, 903187021, 729416761]
</snippet></ROW><ROW><id>20723833</id><snippet>"%05d"</snippet></ROW><ROW><id>20723833</id><snippet>for state in ["AL", "GA", ...]:
    # use state: "www.example.com/%s/search.php" % state
</snippet></ROW><ROW><id>20723874</id><snippet>yaml</snippet></ROW><ROW><id>20723874</id><snippet>ipython</snippet></ROW><ROW><id>20723874</id><snippet>head `which ipython` 
</snippet></ROW><ROW><id>20723874</id><snippet>which python</snippet></ROW><ROW><id>20723874</id><snippet>ipython</snippet></ROW><ROW><id>20723874</id><snippet>$PATH</snippet></ROW><ROW><id>20723874</id><snippet>which python</snippet></ROW><ROW><id>20723874</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>20723900</id><snippet>.tail</snippet></ROW><ROW><id>20723900</id><snippet>import xml.etree.cElementTree as ET

txt = """&lt;div1 type="chapter" num="9"&gt;
         &lt;p&gt;
           &lt;section num="1"/&gt; &lt;!-- The empty element --&gt;
             As they say, A student has usually three maladies: &lt;!-- Here lies the trouble --&gt;
           &lt;section num="2"/&gt; &lt;!-- Another empty element --&gt;
             poverty, itch, and pride.
         &lt;/p&gt;
         &lt;/div1&gt;"""
root = ET.fromstring(txt)
for p in root:
    for s in p:
        print s.attrib['num'], s.tail
</snippet></ROW><ROW><id>20723928</id><snippet>signal.alarm(1)
while True:
    pass
</snippet></ROW><ROW><id>20724113</id><snippet>None</snippet></ROW><ROW><id>20724113</id><snippet>-1</snippet></ROW><ROW><id>20724113</id><snippet>re.search()</snippet></ROW><ROW><id>20724113</id><snippet>re.match()</snippet></ROW><ROW><id>20724113</id><snippet>flags</snippet></ROW><ROW><id>20724113</id><snippet>def word_search(word, file):
    pattern = re.compile(r'\b{}\b'.format(re.escape(word)), flags=re.IGNORECASE)
    return (item for item in file if pattern.search(item))
</snippet></ROW><ROW><id>20724113</id><snippet>&gt;&gt;&gt; file = ["It's us or them.\n",
... '"Ah, yes--a simple matter."\n',
... 'Could you hold that for me?\n',
... 'Holmes was accessible upon the side of flattery, and also, to do him justice, upon the side of kindliness.\n',
... 'Trust your instincts.\n']
&gt;&gt;&gt; list(word_search("us", file))
["It's us or them.\n"]
&gt;&gt;&gt; list(word_search("you", file))
['Could you hold that for me?\n']
</snippet></ROW><ROW><id>20724284</id><snippet>Y = np.asarray(critics['fresh'])</snippet></ROW><ROW><id>20724284</id><snippet>Y = np.asarray(critics['fresh'], dtype="|S6")</snippet></ROW><ROW><id>20724300</id><snippet>from itertools import izip
import xml.etree.ElementTree as ET

def main():
    prefix = "{http://jbpm.org/4.4/jpdl}"

    xml = ET.parse("testWF2.xml")
    root = xml.getroot()
    i = root.findall('*')

    # convert list to dictionary indexed by Element.name
    temp = []
    for it in i:
        name = it.get("name")
        if name:
            temp.append(name)
        else:
            tag = it.tag
            temp.append(tag.replace(prefix, '')) # if no name exists use tag (ex. start and end)
    b = dict(izip(temp, i)) # create the dictionary with key = name


    nodes = []
    # add root to the list
    start_pair = (None, b["start"])  # # # # # using pairs
    nodes.append(start_pair)

    while(nodes):
        parent, n = nodes.pop()  # # # # # using pairs
        transitions = n.findall(prefix+"transition")
        children = []
        # get all of n's children
        for t in transitions:
            child = b[t.get("to")]
            children.append(child)
            nodes.append((n, child))  # add parent/child pair

        # only output the parent (thus outputing k times)
        try:
            print parent.get("name", "start")
        except AttributeError:
            pass  # ignore the start position
        # also output the node if it has no children (terminal node)
        if len(children) &lt; 1:
            print n.get("name", "start")

    # end while loop

main()
</snippet></ROW><ROW><id>20724300</id><snippet>start
a
b
d
f
end
d
c
e
end
b
c
e
end
</snippet></ROW><ROW><id>20724396</id><snippet>curDate = time.strftime('%Y%m%d')
tableName = "%s_%s" % (vendor, curDate)
</snippet></ROW><ROW><id>20724396</id><snippet>"vendorname_20131221"</snippet></ROW><ROW><id>20724480</id><snippet>s</snippet></ROW><ROW><id>20724480</id><snippet>contains(s, sub)
</snippet></ROW><ROW><id>20724480</id><snippet>s</snippet></ROW><ROW><id>20724480</id><snippet>s</snippet></ROW><ROW><id>20724480</id><snippet>sub</snippet></ROW><ROW><id>20724480</id><snippet>sub</snippet></ROW><ROW><id>20724480</id><snippet>def contains(s, sub):
    if sub in s:
        print sub, "is a substring of s."
        return True

if __name__ == '__main__':
    s = ["apples", "bananas", "oranges", "watermelon", "apricots"]
    sub = raw_input("Please enter a substring of s: ")
    contains(s, sub)
</snippet></ROW><ROW><id>20724480</id><snippet>def contains(s, sub):
    return sub in s

if __name__ == '__main__':
    fruits = ["apples", "bananas", "oranges", "watermelon", "apricots"]
    substring = raw_input("Please enter a substring of fruits: ")
    if contains(fruits, substring):
        print substring, "is a substring of fruits."
</snippet></ROW><ROW><id>20724480</id><snippet>s</snippet></ROW><ROW><id>20724480</id><snippet>sub</snippet></ROW><ROW><id>20724513</id><snippet>df.groupby("L1", as_index=False).apply(lambda x : pd.expanding_sum(x.sort("L3", ascending=False)["L3"])/x["L3"].sum())
</snippet></ROW><ROW><id>20724513</id><snippet>df.groupby("L1", as_index=False)</snippet></ROW><ROW><id>20724513</id><snippet>L1</snippet></ROW><ROW><id>20724513</id><snippet>.apply()</snippet></ROW><ROW><id>20724513</id><snippet>pd.expanding_sum(x.sort("L3", ascending=False)["L3"])</snippet></ROW><ROW><id>20724513</id><snippet>.../x["L3"].sum()</snippet></ROW><ROW><id>20724513</id><snippet>In [9]: df["new"] = df.groupby("L1", as_index=False).apply(lambda x : pd.expanding_sum(x.sort("L3", ascending=False)["L3"])/x["L3"].sum())

In [10]: df
Out[10]: 
  L1  L2   L3       new
0  X   1  200  0.800000
1  X   2  100  1.000000
2  Z   1   15  0.777778
3  X   3  200  0.400000
4  Z   2   10  1.000000
5  Y   1    1  1.000000
6  Z   3   20  0.444444
7  Y   2   10  0.990991
8  Y   3  100  0.900901
</snippet></ROW><ROW><id>20724513</id><snippet>In [16]: df.sort(["L1", "L3"], ascending=[True, False])
Out[16]: 
  L1  L2   L3       new
0  X   1  200  0.800000
3  X   3  200  0.400000
1  X   2  100  1.000000
8  Y   3  100  0.900901
7  Y   2   10  0.990991
5  Y   1    1  1.000000
6  Z   3   20  0.444444
2  Z   1   15  0.777778
4  Z   2   10  1.000000
</snippet></ROW><ROW><id>20724683</id><snippet>Tk</snippet></ROW><ROW><id>20724683</id><snippet>Toplevel</snippet></ROW><ROW><id>20724683</id><snippet>Tk</snippet></ROW><ROW><id>20724683</id><snippet>mainloop</snippet></ROW><ROW><id>20724683</id><snippet>mainloop</snippet></ROW><ROW><id>20724683</id><snippet>class window_2(object):
    def __init__(self, other):
        ...
        self.other = other
        ...
    def info(self):
        self.fetch_name = self.other.ent.get()
... 
rooter = window_2(self) # pass "self" to the new object
</snippet></ROW><ROW><id>20724683</id><snippet>ent</snippet></ROW><ROW><id>20724683</id><snippet>class window_1(object):
    ...
    def get_string(self):
        return self.ent.get()

class window_2(object):
    def info(self):
        self.fetch_name = self.other.get_string()
</snippet></ROW><ROW><id>20724683</id><snippet>get_string</snippet></ROW><ROW><id>20724689</id><snippet>b''</snippet></ROW><ROW><id>20724689</id><snippet>stdout</snippet></ROW><ROW><id>20724689</id><snippet>"./app"</snippet></ROW><ROW><id>20724689</id><snippet>"app"</snippet></ROW><ROW><id>20724689</id><snippet>"app"</snippet></ROW><ROW><id>20724689</id><snippet>print(p.stderr.read())
</snippet></ROW><ROW><id>20724809</id><snippet>def queens_sum(N):
    return solve(N, [0]*N, 0, N)

def solve(N, table, column, end):
    if column == end:
        return 1

    sum = 0
    for n in range(N):
        # if no other queen can attack here, place a queen in this row 
        if is_available(n, table, column, N):
            table[column] = n
            # Omit the current column at the start
            sum += solve(N, table, column+1, end)
        #else: we can't place queen here, we should abort this direction
            # do nothing

    return sum
</snippet></ROW><ROW><id>20724812</id><snippet>/</snippet></ROW><ROW><id>20724812</id><snippet>.</snippet></ROW><ROW><id>20724812</id><snippet>def usewalk():
   for root, dirname, filenames in os.walk("."):
       print filename
</snippet></ROW><ROW><id>20724812</id><snippet>root</snippet></ROW><ROW><id>20724812</id><snippet>def usewalk():
   for root, dirname, filenames in os.walk("."):
       for filename in filenames:
           print os.path.join(root, filename)
</snippet></ROW><ROW><id>20724818</id><snippet>self.socket.sendto(code, (self.listener_host, self.listener_port) )
</snippet></ROW><ROW><id>20724818</id><snippet>self.socket.sendto(code.encode('utf-8'), (self.listener_host, self.listener_port) )
</snippet></ROW><ROW><id>20724841</id><snippet>.ptvs</snippet></ROW><ROW><id>20724841</id><snippet>.ptvs</snippet></ROW><ROW><id>20724931</id><snippet>list.sort</snippet></ROW><ROW><id>20724931</id><snippet>None</snippet></ROW><ROW><id>20724931</id><snippet>list.sort</snippet></ROW><ROW><id>20724931</id><snippet>def reverseLookup(dictionary, value):
    dictionary.sort()
    value.sort()
    print dictionary
    print value
</snippet></ROW><ROW><id>20724931</id><snippet>sorted</snippet></ROW><ROW><id>20724931</id><snippet>def reverseLookup(dictionary, value):
    print sorted(dictionary)
    print sorted(value)
</snippet></ROW><ROW><id>20724931</id><snippet>dictionary</snippet></ROW><ROW><id>20724983</id><snippet>Parser/parser.c</snippet></ROW><ROW><id>20724983</id><snippet>PyParser_New</snippet></ROW><ROW><id>20724983</id><snippet>PyParser_AddToken</snippet></ROW><ROW><id>20724983</id><snippet>node</snippet></ROW><ROW><id>20724983</id><snippet>Parser/node.h</snippet></ROW><ROW><id>20724983</id><snippet>typedef struct _node {
    short        n_type;
    char         *n_str;
    int          n_lineno;
    int          n_col_offset;
    int          n_nchildren;
    struct _node *n_child;
} node;
</snippet></ROW><ROW><id>20724983</id><snippet>ast</snippet></ROW><ROW><id>20725135</id><snippet>&gt;&gt;&gt; d = {'a':5, 'b':6, 'c': 3}
&gt;&gt;&gt; d
{'a': 5, 'c': 3, 'b': 6}
</snippet></ROW><ROW><id>20725135</id><snippet>for k in sorted(d):
</snippet></ROW><ROW><id>20725135</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>20725135</id><snippet>dict</snippet></ROW><ROW><id>20725237</id><snippet>import collections
itemlist = [('ItemA', '0', 'Type1'), ('ItemA', '0', 'Type2'),('ItemA', '0', 'Type1'), ('ItemB', '0', 'Type2'), ('ItemA', '1', 'Type2'), ('ItemB', '2', 'Type1'), ('ItemB', '1', 'Type3'), ('ItemB', '1', 'Type1'), ('ItemC', '1', 'Type4'), ('ItemD', '1', 'Type4')]
data_dict = collections.defaultdict(int)
for attribute1, attribute2, attribute3 in itemlist:
    data_dict[(attribute1, attribute2, attribute3)] += 1
for key, value in sorted(data_dict.items()):
    attribute1, attribute2, attribute3 = key
    print("{attribute1} {attribute2}: {attribute3} = {value}".format(**locals()))
</snippet></ROW><ROW><id>20725399</id><snippet>str.split()</snippet></ROW><ROW><id>20725399</id><snippet>for line in fin1:
    for word in line.split():
</snippet></ROW><ROW><id>20725412</id><snippet>setupUi</snippet></ROW><ROW><id>20725412</id><snippet>self</snippet></ROW><ROW><id>20725412</id><snippet>objectName</snippet></ROW><ROW><id>20725412</id><snippet>import sys
from PySide import QtCore, QtGui
from InterfaceClass_Test01 import Ui_MainWindow

class MainInterface(QtGui.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MainInterface, self).__init__(parent)
        # inherited from Ui_MainWindow
        self.setupUi(self)
        self.radioButton.toggled.connect(self.radioButtonClicked)
        self.radioButton_2.toggled.connect(self.radioButton2Clicked)
        self.radioButton_3.toggled.connect(self.radioButton3Clicked)

    def radioButton3Clicked(self, enabled):
        pass

    def radioButton2Clicked(self, enabled):
        pass

    def radioButtonClicked(self, enabled):
        pass
</snippet></ROW><ROW><id>20725571</id><snippet>import tkinter
import tkinter.filedialog
import getpass
# Need this for the `os.path.split` function
import os
gui = tkinter.Tk()
user = getpass.getuser()
def click():
    # Get the file
    file = tkinter.filedialog.askopenfilename(initialdir='C:/Users/%s' % user)
    # Split the filepath to get the directory
    directory = os.path.split(file)[0]
    print(directory)
button = tkinter.Button(gui, command=click)
button.grid()
gui.mainloop()
</snippet></ROW><ROW><id>20725619</id><snippet>json</snippet></ROW><ROW><id>20725619</id><snippet>import json

def write_data(data, filename):
    with open(filename, 'w') as outfh:
        json.dump(data, outfh)

def read_data(filename):
    with open(filename, 'r') as infh:
        json.load(infh)
</snippet></ROW><ROW><id>20725673</id><snippet>v[0:5:2,0:5:2] += v[0:5:2,1:6:2]    # even rows
v[1:5:2,1:5:2] += v[1:5:2,2:6:2]    # odd rows
</snippet></ROW><ROW><id>20725705</id><snippet>import pickle
PIK = "pickle.dat"

data = ["A", "b", "C", "d"]
with open(PIK, "wb") as f:
    pickle.dump(data, f)
with open(PIK, "rb") as f:
    print pickle.load(f)
</snippet></ROW><ROW><id>20725705</id><snippet>['A', 'b', 'C', 'd']
</snippet></ROW><ROW><id>20725705</id><snippet>with open(PIK, "wb") as f:
    pickle.dump(len(data), f)
    for value in data:
        pickle.dump(value, f)
data2 = []
with open(PIK, "rb") as f:
    for _ in range(pickle.load(f)):
        data2.append(pickle.load(f))
print data2
</snippet></ROW><ROW><id>20725765</id><snippet>for i in xrange(len(a) - 1):
    print a[i:i+2]
</snippet></ROW><ROW><id>20725765</id><snippet>for window in zip(a, a[1:]):
    print window
</snippet></ROW><ROW><id>20725765</id><snippet>a_iter = iter(a)
next(a_iter)
for window in zip(a, a_iter):
    print window
</snippet></ROW><ROW><id>20725817</id><snippet>#admin.py    

class ModelAdmin(admin.ModelAdmin):
  list_display = ['brand', 'model_name']
  fields = ['model_name', 'brand']

class ModelInline(admin.TabularInline):
    model = Model

class BrandAdmin(admin.ModelAdmin):
    model = Brand
    inlines = [
        ModelInline,
    ]


admin.site.register(Brand, BrandAdmin)
admin.site.register(Model, ModelAdmin)
</snippet></ROW><ROW><id>20725906</id><snippet>import sys

for line in sys.stdin:
    print line
</snippet></ROW><ROW><id>20725937</id><snippet>STATIC_URL</snippet></ROW><ROW><id>20725937</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>20726064</id><snippet>stdin</snippet></ROW><ROW><id>20726064</id><snippet>#!/usr/bin/env python
import shutil
import sys
import time

print "In handler..."
with open(sys.argv[1], 'rb') as file:
    shutil.copyfileobj(file, sys.stdout)
sys.stdout.flush()
time.sleep(5)
</snippet></ROW><ROW><id>20726064</id><snippet>main.py</snippet></ROW><ROW><id>20726064</id><snippet>#!/usr/bin/env python
import os
from subprocess import Popen

fifo = "fifo"
os.mkfifo(fifo)
p = Popen(["gnome-terminal", "-x", "python", "handler.py", fifo])
with open(fifo, 'wb') as file:
    file.write("Text sent to handler for display")
os.remove(fifo)
p.wait()
</snippet></ROW><ROW><id>20726080</id><snippet>{
"$schema": "http://json-schema.org/draft-03/schema#",
"title": "test",
"type": "object",
"properties": {
    "type": {"enum": ["spice", "vnc"]},
    "listen": {
        "type": "string",
        "format": "ip-address"
    }
},   
"additionalProperties": false
}
</snippet></ROW><ROW><id>20726340</id><snippet>x = patsy.dmatrix("B + C", data=df)  # df is data for prediction
test2 = model.predict(x, transform=False)
</snippet></ROW><ROW><id>20726340</id><snippet>from statsmodels.api import add_constant
test2 = model.predict(add_constant(df[["B", "C"]]), transform=False)
</snippet></ROW><ROW><id>20726340</id><snippet>design_info</snippet></ROW><ROW><id>20726340</id><snippet>orig_exog</snippet></ROW><ROW><id>20726384</id><snippet>data = {'name': 'Karatepig', 'score': 10}
</snippet></ROW><ROW><id>20726384</id><snippet>write_data</snippet></ROW><ROW><id>20726384</id><snippet>read_data</snippet></ROW><ROW><id>20726384</id><snippet>def read_data(filename):
    with open(filename, 'r') as infh:
        data = json.load(infh)
    return data

data = read_data('player.json')
</snippet></ROW><ROW><id>20726384</id><snippet>print data['name']
data['score'] += 5  # add 5 points to the score
</snippet></ROW><ROW><id>20726384</id><snippet>write_data</snippet></ROW><ROW><id>20726384</id><snippet>json</snippet></ROW><ROW><id>20726449</id><snippet>class Home(object):
    pass

class Club(object):
    pass

PLACES = {
   'home': Home(),
   'club': Club()
}

class Manager(object):
    def display_plot_and_get_option(self):
        return raw_input('Where do you want to go?')
   def get_next_place(self, place_name):
        return PLACES[place_name]

m = Manager()
while 1:
    place_name = m.display_plot_and_get_option()
    m.get_next_place(place_name)
</snippet></ROW><ROW><id>20726597</id><snippet>__init__()</snippet></ROW><ROW><id>20726597</id><snippet>__init__()</snippet></ROW><ROW><id>20726597</id><snippet>Test</snippet></ROW><ROW><id>20726597</id><snippet>__init__()</snippet></ROW><ROW><id>20726597</id><snippet>Test</snippet></ROW><ROW><id>20726597</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>20726597</id><snippet>__init__()</snippet></ROW><ROW><id>20726597</id><snippet>Parent/Child</snippet></ROW><ROW><id>20726597</id><snippet>Child.__init__()</snippet></ROW><ROW><id>20726597</id><snippet>threading.Thread</snippet></ROW><ROW><id>20726597</id><snippet>__init__()</snippet></ROW><ROW><id>20726597</id><snippet>threading.Thread.__init__()</snippet></ROW><ROW><id>20726597</id><snippet>__init__()</snippet></ROW><ROW><id>20726597</id><snippet>__init__()</snippet></ROW><ROW><id>20726621</id><snippet>class HelpersTest(TestCase):

    @helpers.create_admin_user_and_login
    def test_create_admin_user_and_login(self):
        self.assertIn('_auth_user_id', self.client.session)
        user = User.objects.get(pk=self.client.session['_auth_user_id'])
        self.assertTrue(user.is_staff)
        self.assertTrue(user.is_superuser)
</snippet></ROW><ROW><id>20726621</id><snippet>coverage.py</snippet></ROW><ROW><id>20726621</id><snippet>coverage.py</snippet></ROW><ROW><id>20726634</id><snippet>from functools import wraps
from django.contrib.auth.models import User

from faker import Faker


def create_admin_user_and_login(func):                                                                                                                                                                       
    @wraps(func)
    def wrapper(self):
        faker = Faker()
        username = faker.pronounceable_unique_id(length=30)
        password = faker.password()
        user = User.objects.create_user(
            username=username,
            first_name=faker.word().title(),
            last_name=faker.word().title(),
            email=faker.email(),
            password=password)
        user.is_staff = True
        user.is_superuser = True
        user.save()
        self.client.login(username=username, password=password)
        return func(self)
    return wrapper
</snippet></ROW><ROW><id>20726634</id><snippet>faker.faker.Faker</snippet></ROW><ROW><id>20726780</id><snippet>Card</snippet></ROW><ROW><id>20726780</id><snippet>Card</snippet></ROW><ROW><id>20726780</id><snippet>ace_of_spades = Card('A', 's')
</snippet></ROW><ROW><id>20726780</id><snippet>Card</snippet></ROW><ROW><id>20726780</id><snippet>ace_of_spades = Card(Card.RANKS[0], Card.SUITS[3])
</snippet></ROW><ROW><id>20726780</id><snippet>Card.RANKS[0]</snippet></ROW><ROW><id>20726780</id><snippet>class Card(object):
    RANK_ACE = 'A'
    RANK_2 = '2'
    # and so on
</snippet></ROW><ROW><id>20726780</id><snippet>ace_of_spades = Card(Card.RANK_ACE, Card.SUIT_SPADES)
</snippet></ROW><ROW><id>20726780</id><snippet>ace_of_spades</snippet></ROW><ROW><id>20726780</id><snippet>hand = Hand()
hand.add(ace_of_spades)
</snippet></ROW><ROW><id>20726780</id><snippet>ace_of_spades</snippet></ROW><ROW><id>20726780</id><snippet>del(ace_of_spades)
</snippet></ROW><ROW><id>20726780</id><snippet>hand.add(Card(Card.RANK_ACE, Card.SUIT_SPADES))
</snippet></ROW><ROW><id>20726780</id><snippet>Hand.add()</snippet></ROW><ROW><id>20726780</id><snippet>Card</snippet></ROW><ROW><id>20726780</id><snippet>RANK_ACE = 'A'
RANK_2 = '2'
# and so on
SUIT_CLUBS = 'c'
# and so on

class Card(object):
    # and so on
</snippet></ROW><ROW><id>20726780</id><snippet>self.add()</snippet></ROW><ROW><id>20726780</id><snippet># inside class Hand
def add(self, card):
    self.cards.append(card)
</snippet></ROW><ROW><id>20726780</id><snippet>self</snippet></ROW><ROW><id>20726780</id><snippet>Hand</snippet></ROW><ROW><id>20726780</id><snippet>h</snippet></ROW><ROW><id>20726780</id><snippet>h.add(ace_of_spades)</snippet></ROW><ROW><id>20726780</id><snippet>self</snippet></ROW><ROW><id>20726780</id><snippet>Hand</snippet></ROW><ROW><id>20726780</id><snippet>h</snippet></ROW><ROW><id>20726780</id><snippet>h.add(ace_of_spades)</snippet></ROW><ROW><id>20726780</id><snippet>Hand.add(h, ace_of_spades)
</snippet></ROW><ROW><id>20726780</id><snippet>h.add()</snippet></ROW><ROW><id>20726780</id><snippet>h</snippet></ROW><ROW><id>20726780</id><snippet>Hand</snippet></ROW><ROW><id>20726780</id><snippet>Hand</snippet></ROW><ROW><id>20726780</id><snippet>add()</snippet></ROW><ROW><id>20726780</id><snippet>self.cards</snippet></ROW><ROW><id>20726780</id><snippet>list</snippet></ROW><ROW><id>20726780</id><snippet>Hand</snippet></ROW><ROW><id>20726780</id><snippet>.append()</snippet></ROW><ROW><id>20726862</id><snippet>__package__</snippet></ROW><ROW><id>20726862</id><snippet>importlib.import_module</snippet></ROW><ROW><id>20726862</id><snippet>import importlib
pkg = importlib.import_module(__package__)
print(pkg.a)
</snippet></ROW><ROW><id>20727136</id><snippet>signal.alarm</snippet></ROW><ROW><id>20727136</id><snippet>time.sleep</snippet></ROW><ROW><id>20727136</id><snippet>signal.SIGINT</snippet></ROW><ROW><id>20727136</id><snippet>ctlc_catcher</snippet></ROW><ROW><id>20727136</id><snippet>while</snippet></ROW><ROW><id>20727136</id><snippet>SIGINT</snippet></ROW><ROW><id>20727136</id><snippet>"Got an alarm."</snippet></ROW><ROW><id>20727167</id><snippet>[a-c]</snippet></ROW><ROW><id>20727167</id><snippet>a</snippet></ROW><ROW><id>20727167</id><snippet>c</snippet></ROW><ROW><id>20727167</id><snippet>a</snippet></ROW><ROW><id>20727167</id><snippet>b</snippet></ROW><ROW><id>20727167</id><snippet>c</snippet></ROW><ROW><id>20727167</id><snippet>$ touch a
$ touch b
$ touch c
$ touch d
$ ls [a-c]
a  b  c
</snippet></ROW><ROW><id>20727221</id><snippet>int</snippet></ROW><ROW><id>20727221</id><snippet>int</snippet></ROW><ROW><id>20727221</id><snippet>int</snippet></ROW><ROW><id>20727221</id><snippet>&gt;&gt;&gt; 1/2
0
&gt;&gt;&gt; 1.0/2
0.5
&gt;&gt;&gt; float(1)/2
0.5
</snippet></ROW><ROW><id>20727221</id><snippet>print(float(total_inode - free_inode) / total_inode)
</snippet></ROW><ROW><id>20727385</id><snippet>yum</snippet></ROW><ROW><id>20727385</id><snippet>#!/usr/local/bin/python2.7
</snippet></ROW><ROW><id>20727385</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>20727447</id><snippet>ChunkedUploader</snippet></ROW><ROW><id>20727447</id><snippet>with open(upload) as f:
    uploader = self.client.get_chunked_uploader(f)
    # ...
</snippet></ROW><ROW><id>20727447</id><snippet>DropboxClient.get_chunked_uploader</snippet></ROW><ROW><id>20727506</id><snippet>contents</snippet></ROW><ROW><id>20727506</id><snippet>path</snippet></ROW><ROW><id>20727506</id><snippet>is_dir</snippet></ROW><ROW><id>20727506</id><snippet>def download_cont(self, folder_name):
    for path in [entry['path'] for entry in self.client.metadata(folder_name)['contents'] if not entry['is_dir']]:
        name = os.path.basename(path)
        print 'Saving "%s"...' % name
        with open(name, 'wb') as out:
            with self.client.get_file(path) as f:
                out.write(f.read())
</snippet></ROW><ROW><id>20727506</id><snippet>with</snippet></ROW><ROW><id>20727506</id><snippet>print 'Saving "%s"...' % name
with open(name, 'wb') as out:
    out.write(self.client.get_file(path).read())
</snippet></ROW><ROW><id>20727571</id><snippet>qcut</snippet></ROW><ROW><id>20727571</id><snippet>import pandas as pd
import numpy as np

a = np.random.rand(26*10+3)
r = pd.qcut(a, 10)
np.bincount(r.labels)
</snippet></ROW><ROW><id>20727571</id><snippet>array([27, 26, 26, 26, 27, 26, 26, 26, 26, 27])
</snippet></ROW><ROW><id>20727571</id><snippet>n = len(a)
ngroup = 10

counts = np.ones(ngroup, int)*(n//ngroup)
counts[:n%ngroup] += 1

q = np.r_[0, np.cumsum(counts / float(n))]
q[-1] = 1.0
r2 = pd.qcut(a, q)
np.bincount(r2.labels)
</snippet></ROW><ROW><id>20727571</id><snippet>array([27, 27, 27, 26, 26, 26, 26, 26, 26, 26])
</snippet></ROW><ROW><id>20727795</id><snippet>int</snippet></ROW><ROW><id>20727795</id><snippet>input</snippet></ROW><ROW><id>20727795</id><snippet>input(int("...")) 
</snippet></ROW><ROW><id>20727795</id><snippet>int(input("..."))
</snippet></ROW><ROW><id>20727795</id><snippet>Player</snippet></ROW><ROW><id>20727795</id><snippet>drugs</snippet></ROW><ROW><id>20727795</id><snippet>{"weed": 10}</snippet></ROW><ROW><id>20727795</id><snippet>money</snippet></ROW><ROW><id>20727795</id><snippet>score</snippet></ROW><ROW><id>20727795</id><snippet>buy</snippet></ROW><ROW><id>20727795</id><snippet>sell</snippet></ROW><ROW><id>20727795</id><snippet>Player</snippet></ROW><ROW><id>20727795</id><snippet>drug</snippet></ROW><ROW><id>20727795</id><snippet>price</snippet></ROW><ROW><id>20727874</id><snippet>def wrapper(*args, **kwargs):
    print('inside wrapper')
    return func(*args, **kwargs)
</snippet></ROW><ROW><id>20727874</id><snippet>@wraps(func)</snippet></ROW><ROW><id>20727874</id><snippet>wrapper</snippet></ROW><ROW><id>20727874</id><snippet>wrapper</snippet></ROW><ROW><id>20728299</id><snippet>-2</snippet></ROW><ROW><id>20728299</id><snippet>range(2,-2)</snippet></ROW><ROW><id>20728299</id><snippet>for</snippet></ROW><ROW><id>20728299</id><snippet>lst</snippet></ROW><ROW><id>20728299</id><snippet>[]</snippet></ROW><ROW><id>20728299</id><snippet>'False' in lst</snippet></ROW><ROW><id>20728299</id><snippet>False</snippet></ROW><ROW><id>20728299</id><snippet>return True</snippet></ROW><ROW><id>20728397</id><snippet>theta[0]</snippet></ROW><ROW><id>20728397</id><snippet>RectSphereBivariateSpline</snippet></ROW><ROW><id>20728397</id><snippet>theta[0] += 1e-6
</snippet></ROW><ROW><id>20728565</id><snippet>class D(C, B):
    a = A.a
</snippet></ROW><ROW><id>20728574</id><snippet>import wx

class MyCheckBox(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, -1, 'Values', size=(490, 250))
        panel = wx.Panel(self, -1)

        positions = [(70, 55), (170, 55), (270, 55), (370, 55),
                     (70, 85), (170, 85), (270, 85), (370, 85)]

        values = ['a', 'a','a', 'a','a', 'a','a', 'a',]

        self.controls = []        
        for pos, value in zip(positions, values):
           control = wx.TextCtrl(panel, -1, value=str(value),
                                 pos=pos, size=(60,25))
           self.controls.append(control)

        self.to_show = wx.TextCtrl(panel, -1, value='',
                                   pos=(90, 120), size=(290,25))

        self.btnOK = wx.Button(panel, label="OK", pos=(190, 180))
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.btnOK)

    def OnOK(self, event):
        all_values = []
        for control in self.controls:
            all_values.append(control.GetValue())

        self.to_show.SetValue(str(all_values))

if __name__ == '__main__':
    app = wx.PySimpleApp()
    f = MyCheckBox()
    f.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>20728623</id><snippet>to_csv</snippet></ROW><ROW><id>20728623</id><snippet>df.to_csv(filename, date_format='%Y-%m-%d')
</snippet></ROW><ROW><id>20728658</id><snippet>for</snippet></ROW><ROW><id>20728658</id><snippet>(a, b)</snippet></ROW><ROW><id>20728658</id><snippet>s</snippet></ROW><ROW><id>20728658</id><snippet>a</snippet></ROW><ROW><id>20728658</id><snippet>b</snippet></ROW><ROW><id>20728658</id><snippet>t = s[:]
</snippet></ROW><ROW><id>20728658</id><snippet>s</snippet></ROW><ROW><id>20728658</id><snippet>t</snippet></ROW><ROW><id>20728658</id><snippet>t = s
</snippet></ROW><ROW><id>20728658</id><snippet>t</snippet></ROW><ROW><id>20728658</id><snippet>s</snippet></ROW><ROW><id>20728780</id><snippet>export PWD=$DJANGODIR
</snippet></ROW><ROW><id>20728780</id><snippet>pwd</snippet></ROW><ROW><id>20728780</id><snippet>set</snippet></ROW><ROW><id>20728780</id><snippet>cd $DJANGODIR
</snippet></ROW><ROW><id>20728883</id><snippet>form</snippet></ROW><ROW><id>20728883</id><snippet>//form</snippet></ROW><ROW><id>20728883</id><snippet>input</snippet></ROW><ROW><id>20728883</id><snippet>type=password</snippet></ROW><ROW><id>20728883</id><snippet>[.//input[@type='password']]</snippet></ROW><ROW><id>20728883</id><snippet>input</snippet></ROW><ROW><id>20728883</id><snippet>[.//input[not(@type) or @type='' or @type='text']]</snippet></ROW><ROW><id>20728883</id><snippet>[.//input[@type='submit'] or .//button[not(@type) or @type='' or @type='submit']]</snippet></ROW><ROW><id>20728883</id><snippet>//form[.//input[@type='password']][.//input[not(@type) or @type='' or @type='text']][.//input[@type='submit'] or .//button[not(@type) or @type='' or @type='submit']]
</snippet></ROW><ROW><id>20728883</id><snippet>type</snippet></ROW><ROW><id>20728883</id><snippet>text</snippet></ROW><ROW><id>20728883</id><snippet>submit</snippet></ROW><ROW><id>20728883</id><snippet>type</snippet></ROW><ROW><id>20728883</id><snippet>nonvalidtype</snippet></ROW><ROW><id>20728883</id><snippet>type</snippet></ROW><ROW><id>20728883</id><snippet>//form[.//input[lower-case(@type)='password']][.//input[not(@type) or @type='' or lower-case(@type)='text']][.//input[lower-case(@type)='submit'] or .//button[not(@type) or @type='' or lower-case(@type)='submit']]
</snippet></ROW><ROW><id>20729020</id><snippet>np.nan</snippet></ROW><ROW><id>20729020</id><snippet>float('nan')</snippet></ROW><ROW><id>20729020</id><snippet>interpolation='nearest'</snippet></ROW><ROW><id>20729020</id><snippet>imshow</snippet></ROW><ROW><id>20729472</id><snippet>fast_sqrt</snippet></ROW><ROW><id>20729472</id><snippet>return</snippet></ROW><ROW><id>20729472</id><snippet>@coroutine</snippet></ROW><ROW><id>20729472</id><snippet>fast_sqrt(x)</snippet></ROW><ROW><id>20729472</id><snippet>future = yield from ...</snippet></ROW><ROW><id>20729472</id><snippet>future</snippet></ROW><ROW><id>20729472</id><snippet>result</snippet></ROW><ROW><id>20729472</id><snippet>f(x)</snippet></ROW><ROW><id>20729472</id><snippet>@coroutine</snippet></ROW><ROW><id>20729472</id><snippet>fast_sqrt</snippet></ROW><ROW><id>20729472</id><snippet>yield from &lt;future&gt;</snippet></ROW><ROW><id>20729472</id><snippet>future = yield from ...</snippet></ROW><ROW><id>20729472</id><snippet>future</snippet></ROW><ROW><id>20729472</id><snippet>yield from &lt;future&gt;</snippet></ROW><ROW><id>20729472</id><snippet>fast_sqrt</snippet></ROW><ROW><id>20729472</id><snippet>future = yield from coro_returning_a_future(x)
res = yield from future
</snippet></ROW><ROW><id>20729472</id><snippet>fast_sqrt</snippet></ROW><ROW><id>20729472</id><snippet>coro_returning_a_future</snippet></ROW><ROW><id>20729472</id><snippet>yield from &lt;future&gt;</snippet></ROW><ROW><id>20729472</id><snippet>return</snippet></ROW><ROW><id>20729472</id><snippet>coroutine</snippet></ROW><ROW><id>20729472</id><snippet>fast_sqrt</snippet></ROW><ROW><id>20729472</id><snippet>@coroutine
def fast_sqrt(x):
   if x &gt;= 0:
      return math.sqrt(x)
   else:
      raise Exception("negative number")

@coroutine # for documentation, not strictly necessary
def slow_sqrt(x):
   yield from asyncio.sleep(1)
   if x &gt;= 0:
      return math.sqrt(x)
   else:
      raise Exception("negative number")

...
res = yield from f(x)
assert isinstance(res, float)
</snippet></ROW><ROW><id>20729713</id><snippet>ViewState: [&lt;input name="__VIEWSTATE" type="hidden" value="dDwtMTM3NzI1MDM3O3Q8O2w8aTwxPjs+O2w8dDw7bDxpPDE+O2k8Mj47PjtsPHQ8cDxwPGw8VmlzaWJsZTs+O2w8bzxmPjs+Pjs+O2w8aTwxPjtpPDM+Oz47bDx0PDtsPGk8Mz47PjtsPHQ8O2w8aTwwPjs+O2w8dDw7bDxpPDE+Oz47bDx0PEAwPDs7Ozs7Ozs7Ozs+Ozs+Oz4+Oz4+Oz4+O3Q8cDxwPGw8VmlzaWJsZTs+O2w8bzxmPjs+Pjs+Ozs+Oz4+O3Q8O2w8aTw5PjtpPDExPjs+O2w8dDxwPHA8bDxWaXNpYmxlOz47bDxvPGY+Oz4+Oz47Oz47dDx0PHA8cDxsPFZpc2libGU7PjtsPG88Zj47Pj47Pjs7Pjs7Pjs+Pjs+Pjs+Pjs+zHrNhAd1tTLXbBUyAJRtS6omUc0="/&gt;]
</snippet></ROW><ROW><id>20729713</id><snippet>formData</snippet></ROW><ROW><id>20729713</id><snippet>formData = (
     ('__EVENTVALIDATION', eventvalidation[0]['value']),
    ('__VIEWSTATE', viewstate[0]['value']),
    ('__VIEWSTATEENCRYPTED',''),
    ('TextBox1', '106110006'),
    ('Button1', 'Show'),
)
</snippet></ROW><ROW><id>20729713</id><snippet>__EVENTVALIDATION</snippet></ROW><ROW><id>20729713</id><snippet>formData</snippet></ROW><ROW><id>20729713</id><snippet>formData = (
    ('__VIEWSTATE', viewstate[0]['value']),
    ('__VIEWSTATEENCRYPTED',''),
    ('TextBox1', '106110006'),
    ('Button1', 'Show'),
)
</snippet></ROW><ROW><id>20729724</id><snippet>namespaces</snippet></ROW><ROW><id>20729724</id><snippet>ElementTree.find</snippet></ROW><ROW><id>20729724</id><snippet>lxml</snippet></ROW><ROW><id>20729724</id><snippet>xml.etree</snippet></ROW><ROW><id>20729724</id><snippet>from lxml.etree import ElementTree

t = ElementTree()
t.parse('eurofxref-daily.xml')
namespaces = { "exr": "http://www.ecb.int/vocabulary/2002-08-01/eurofxref" }
day = t.find('exr:Cube', namespaces)
print day
</snippet></ROW><ROW><id>20729724</id><snippet>namespaces</snippet></ROW><ROW><id>20729724</id><snippet>$ python test.py
&lt;Element '{http://www.ecb.int/vocabulary/2002-08-01/eurofxref}Cube' at 0x7fe0f95e3290&gt;
</snippet></ROW><ROW><id>20729724</id><snippet>xml.etree</snippet></ROW><ROW><id>20729724</id><snippet>lxml</snippet></ROW><ROW><id>20729991</id><snippet>import random

list_of_words = ["apple", "table", "words", "beers", "plural", "hands"]
word = random.choice(list_of_words)

# changed the loop to a 'while', because i don't want to count the invalid length answers
# and wanted to exit the loop, when the user guessed correctly
attempts = 5
attempt = 0
correct = False
while attempt &lt; attempts and not correct:
    if attempt == 0:
        # i stored a working copy of the initial hint (ex: "w....")
        # i'll use this to store the previously correctrly guessed letters
        tempList = list(word[0] + ("." * 4))
        print("The first letter of the word we are looking for: %s" % "".join(tempList))

    answer = raw_input("What is the word we are looking for?:")
    if len(answer) != 5:
        print("Please enter a 5 letter word")
    else:
        if answer != word:
            # i simplified this loop to comparing the wordlist and answerlist and update templist accordingly
            wordlist = list(word)
            answerlist = list(answer)
            for i in range(min(len(wordlist), len(answerlist))):
                if wordlist[i] == answerlist[i]:
                    tempList[i] = wordlist[i]
            print(tempList)
        else:
            correct = True
            print("Correct, you have guessed the word in %s attempts" % (attempt + 1))
        attempt += 1

if answer != word:
    # also i used string formatting on your prints, so is prints as a string, and not as a tuple.
    print("Sorry maximum number of tries, the word is: %s" % word)
</snippet></ROW><ROW><id>20730221</id><snippet>zip()</snippet></ROW><ROW><id>20730221</id><snippet>&gt;&gt;&gt; l1 = range(10)
&gt;&gt;&gt; l2 = range(20,30)
&gt;&gt;&gt; for x,y in zip(l1, l2):
    print x, y

0 20
1 21
2 22
3 23
4 24
5 25
6 26
7 27
8 28
9 29
</snippet></ROW><ROW><id>20730221</id><snippet>zip</snippet></ROW><ROW><id>20730221</id><snippet>izip_longest</snippet></ROW><ROW><id>20730221</id><snippet>itertools</snippet></ROW><ROW><id>20730221</id><snippet>None</snippet></ROW><ROW><id>20730311</id><snippet>1.sel.xpath('//baseTag/@attrName')
2.sel.css('baseTag::attr(attrName)')
</snippet></ROW><ROW><id>20730414</id><snippet>if 'c' in locals():
    print ('Ok')
else:
    print('no')
</snippet></ROW><ROW><id>20730503</id><snippet>refcheck</snippet></ROW><ROW><id>20730503</id><snippet>False</snippet></ROW><ROW><id>20730503</id><snippet>print</snippet></ROW><ROW><id>20730503</id><snippet>_</snippet></ROW><ROW><id>20730503</id><snippet>print(_) # shows array
a.resize((3, 2), refcheck=False) # works
</snippet></ROW><ROW><id>20730503</id><snippet>1 + 2</snippet></ROW><ROW><id>20730503</id><snippet>_</snippet></ROW><ROW><id>20730531</id><snippet>sudo apt-get install python-appindicator
</snippet></ROW><ROW><id>20730642</id><snippet>res = []
tmp = []

for i, line in enumerate(open('file.txt'), 1):
    tmp.append(line.strip())
    if i % 3 == 0:
        res.append(tmp)
        tmp = []

print(res)
</snippet></ROW><ROW><id>20730642</id><snippet>res = []
tmp = []

for i, line in enumerate(open('file.txt')):
    if i % 4 == 0:
        res.append(tmp)
        tmp = []
        continue
    tmp.append(line.strip())

print(res)
</snippet></ROW><ROW><id>20730890</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>20730890</id><snippet>^</snippet></ROW><ROW><id>20730890</id><snippet>$</snippet></ROW><ROW><id>20730890</id><snippet>re.DOTALL</snippet></ROW><ROW><id>20730890</id><snippet>.</snippet></ROW><ROW><id>20730890</id><snippet>(.*?)\n\s*\n</snippet></ROW><ROW><id>20730890</id><snippet>p = re.compile(r'texture\s+(\S+)\s+\[(\d+\s+\d+\s+\d+)\]\s+(.*?)\n\s*\n', re.DOTALL)
matches = p.findall(input)
for match in matches:
    print match[0]
    print match[1]
    print match[2]
    print "---------------"
</snippet></ROW><ROW><id>20730890</id><snippet>mytexture
640 480 1
'BE4C16FFBD4B15FFBD4B15FFBD4B15FFBD4B15FFBE4C16FFBE4C16FFBD4B15FFBD4B15FF'
    'BE4C16FFBE4C16FFBD4B15FFBC4A14FFBC4A14FFBC4A14FFBC4A14FFBC4A14FFBE4C16FF'
    'BF4C16FFBF4C16FFBE4B15FFBE4B15FFBC4913FFBC4913FFBC4913FFBB4812FFBC4913FF'
    'BC4A14FFBB4913FFBB4812FFBB4812FFBA4812FFBA4812FFBB4913FFBC4A16FFBB4915FF'
    'B84612FFB84612FFB94713FFB84612FFB64410FFB64410FFB64410FFB4420EFFB3410DFF'
    'FB03E0AFFB13F0BFB13F0BFFAE3C08FFAA3804FFAD3B07FFB03E0AFFB3410DFFB4420EFF'
    'B4400DFFB13D0AFFB23C0AFFB03C09FFB23E0BFFB5410EFFB74310FFB94512FFB84411FF'
---------------
mytexture2
640 480 1
'BE4C16FFBD4B15FFBD4B15FFBD4B15FFBD4B15FFBE4C16FFBE4C16FFBD4B15FFBD4B15FF'
    'BE4C16FFBE4C16FFBD4B15FFBC4A14FFBC4A14FFBC4A14FFBC4A14FFBC4A14FFBE4C16FF'
    (... etc...)
---------------
</snippet></ROW><ROW><id>20730965</id><snippet>mechanize</snippet></ROW><ROW><id>20731006</id><snippet>(?=..)</snippet></ROW><ROW><id>20731006</id><snippet>re.findall(r"(\b[A-Z].+?)(?=\s[A-Z]|\s*$)")
</snippet></ROW><ROW><id>20731110</id><snippet>.bashrc</snippet></ROW><ROW><id>20731110</id><snippet>$PYTHONSTARTUP</snippet></ROW><ROW><id>20731110</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>20731110</id><snippet>.bashrc</snippet></ROW><ROW><id>20731110</id><snippet>export PYTHONSTARTUP=$HOME/.config/python/pythonrc.py
export PYTHONPATH=$PYTHONPATH:$HOME/.config/python/path
</snippet></ROW><ROW><id>20731110</id><snippet>.bashrc</snippet></ROW><ROW><id>20731110</id><snippet>bash</snippet></ROW><ROW><id>20731110</id><snippet>$PYTHONSTARTUP</snippet></ROW><ROW><id>20731110</id><snippet>python</snippet></ROW><ROW><id>20731110</id><snippet>.config/python/pythonrc.py</snippet></ROW><ROW><id>20731110</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>20731110</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>20731110</id><snippet>$PATH</snippet></ROW><ROW><id>20731110</id><snippet>bash</snippet></ROW><ROW><id>20731110</id><snippet>$PATH</snippet></ROW><ROW><id>20731110</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>20731110</id><snippet>sys.path</snippet></ROW><ROW><id>20731110</id><snippet>$PYTHONSTARTUP</snippet></ROW><ROW><id>20731110</id><snippet>usercustomize</snippet></ROW><ROW><id>20731110</id><snippet>usercustomize</snippet></ROW><ROW><id>20731110</id><snippet>usercustomize</snippet></ROW><ROW><id>20731110</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>20731110</id><snippet>usercustomize</snippet></ROW><ROW><id>20731110</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>20731110</id><snippet>usercustomize.py</snippet></ROW><ROW><id>20731110</id><snippet>$PYTHONSTARTUP</snippet></ROW><ROW><id>20731110</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>20731114</id><snippet>E           - package or module path not included in sys.path;
E           - duplicated package or module name taking precedence in sys.path;
</snippet></ROW><ROW><id>20731114</id><snippet>config_default.py</snippet></ROW><ROW><id>20731114</id><snippet>from flask import Flask
import config

# Setup app
app = Flask(__name__)
app.config.from_object(config)
</snippet></ROW><ROW><id>20731114</id><snippet>ImportError: No module named config</snippet></ROW><ROW><id>20731114</id><snippet>app.config.from_pyfile()</snippet></ROW><ROW><id>20731114</id><snippet>app.config.from_pyfile('config.py')
</snippet></ROW><ROW><id>20731114</id><snippet>from_pyfile()</snippet></ROW><ROW><id>20731114</id><snippet>[exc</snippet></ROW><ROW><id>20731114</id><snippet>from_envvar()</snippet></ROW><ROW><id>20731131</id><snippet>import sys
import os
import urllib2
import re
from lxml import html
import requests

def parse():
    output = open('proba.xml','w')
    page = requests.get('http://www.rts.rs/page/tv/sr/broadcast/22/RTS+1.html')
    tree = html.fromstring(page.text)
    p = tree.xpath('//div[@class="ProgramTime"]/text()|//div[@class="ProgramName"]/text()|//a[@class="recnik"]/text()')
    for line in p:
        clean = line.strip()
        if clean:
            output.write(line.encode('utf-8')+'\n')  # the \n adds a line break
    output.close()
parse()
</snippet></ROW><ROW><id>20731131</id><snippet>try</snippet></ROW><ROW><id>20731131</id><snippet>import this</snippet></ROW><ROW><id>20731310</id><snippet>def Appviewer_SAVE(self):
    target = open("saved", "a")
    target.write("%s\t" % App_InfoTrans0())
    target.write("%s\t" % App_InfoTrans1())
    target.write("%s\n" % App_InfoTransfer_Gender) #\n doesn't make a difference here
    target.close()
</snippet></ROW><ROW><id>20731437</id><snippet>top</snippet></ROW><ROW><id>20731437</id><snippet>ps</snippet></ROW><ROW><id>20731711</id><snippet>def foo(bar1, bar2, bar3=None, bar4=1): print("bar1="+str(bar1)+" bar2="+str(bar2)+" bar3="+str(bar3)+" bar4="+str(bar4))
x=[1,7]
y={'bar3':True, 'bar4':9}
foo(*x,**y)
</snippet></ROW><ROW><id>20731711</id><snippet>foo()</snippet></ROW><ROW><id>20731711</id><snippet>x</snippet></ROW><ROW><id>20731711</id><snippet>Seq</snippet></ROW><ROW><id>20731711</id><snippet>x</snippet></ROW><ROW><id>20731711</id><snippet>Map</snippet></ROW><ROW><id>20731711</id><snippet>Map[String, Any]</snippet></ROW><ROW><id>20731711</id><snippet>def foo(bar1: Int*) = println(f"bar1=$bar1")
val x = Seq(1, 2)
foo(x:_*)
</snippet></ROW><ROW><id>20731711</id><snippet>tupled</snippet></ROW><ROW><id>20731711</id><snippet>def foo(bar1: Int, bar2: Int, bar3: Boolean = false, bar4: Int = 1) = println(f"bar1=$bar1 bar2=$bar2 bar3=$bar3 bar4=$bar4")
val x = (1, 2, true, 9)
(foo _).tupled(x)
</snippet></ROW><ROW><id>20731754</id><snippet>self.moduleSizer = wx.BoxSizer(wx.VERTICAL)
self.button1 = wx.Button(self.modulePanel, label="Show Yellow Panel",
                         size=(200, -1))
self.moduleSizer.Add(self.button1, flag=wx.CENTER)
self.modulePanel.SetSizer(self.moduleSizer)
</snippet></ROW><ROW><id>20731754</id><snippet>self.TCSizer = wx.BoxSizer(wx.VERTICAL)
self.button2 = wx.Button(self.TCPanel, label="Bring Black Panel",
                         size=(200, -1))
self.TCSizer.Add(self.button2, flag=wx.LEFT, border=20)
self.TCPanel.SetSizer(self.TCSizer)
</snippet></ROW><ROW><id>20731754</id><snippet>self.Layout()
</snippet></ROW><ROW><id>20731830</id><snippet>whereis hg</snippet></ROW><ROW><id>20731830</id><snippet>type -a hg</snippet></ROW><ROW><id>20731830</id><snippet>/usr/bin/hg</snippet></ROW><ROW><id>20731830</id><snippet>PATH</snippet></ROW><ROW><id>20731830</id><snippet>~/.bashrc</snippet></ROW><ROW><id>20731830</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>20731830</id><snippet>export PATH=$PATH:/path/to/hg/directory
</snippet></ROW><ROW><id>20731844</id><snippet>def cb(result):
    pass
def eb(failure):
    pass
</snippet></ROW><ROW><id>20731910</id><snippet>x &lt; y and y &lt;= z</snippet></ROW><ROW><id>20731910</id><snippet>[a bool ndarray] and [a bool ndarray]</snippet></ROW><ROW><id>20731910</id><snippet>and</snippet></ROW><ROW><id>20731910</id><snippet>b==True</snippet></ROW><ROW><id>20731910</id><snippet>(b &gt; 25) &amp; (b &lt; 75)</snippet></ROW><ROW><id>20731972</id><snippet>\w+
</snippet></ROW><ROW><id>20731972</id><snippet>import re
re.findall('\w+', myString)
=&gt; ['command', 'name', 'two', 'parent', 'one']
</snippet></ROW><ROW><id>20731972</id><snippet>[^\s/-]\S*
</snippet></ROW><ROW><id>20731972</id><snippet>myString = "//command -name two -parent one-one foo@example.com"
re.findall('[^\s/-]\S*', myString)
=&gt; ['command', 'name', 'two', 'parent', 'one-one', 'foo@example.com']
</snippet></ROW><ROW><id>20732068</id><snippet>variables = {
    variable1: None,
    variable2: None,
    variable3: None,
    variable4: None,
    variable5: None
}

values = [1, 2, 3, 4]

for i, value in enumerate(values):
    variables['variable' + (i + 1)] = value
</snippet></ROW><ROW><id>20732068</id><snippet># This will create a list with 5 None values, i.e. variables[0] .. variables[4]
variables = [None] * 5

for i, value in enumerate(values):
    variables[i] = value
</snippet></ROW><ROW><id>20732345</id><snippet>__spam</snippet></ROW><ROW><id>20732345</id><snippet>_classname__spam</snippet></ROW><ROW><id>20732649</id><snippet>plt.tight_layout()
</snippet></ROW><ROW><id>20732649</id><snippet>plt.tight_layout(pad=1.08, h_pad=None, w_pad=None, rect=None)
</snippet></ROW><ROW><id>20732697</id><snippet>def front_back(str):

    if len(str) &lt;= 1:
        return str

    return str[-1:] + str[1:-1] + str[:1]

print (front_back("abcdef"))
</snippet></ROW><ROW><id>20732929</id><snippet>%</snippet></ROW><ROW><id>20732929</id><snippet>def viable(self, north_south, east_west): 
    i = north_south.index(self)
    j = east_west.index(self)

    south = north_south[(i - 1) % len(north_south)]
    north = north_south[(i + 1) % len(north_south)]
    west = east_west[(j - 1) % len(east_west)]
    east = east_west[(j + 1) % len(east_west)]

    return east, west, north, south
</snippet></ROW><ROW><id>20732929</id><snippet>% 5</snippet></ROW><ROW><id>20732929</id><snippet>&gt;&gt;&gt; 5 % 5  # last index + 1
0
&gt;&gt;&gt; -1 % 5  # first index - 1
4
&gt;&gt;&gt; 3 % 5  # middle + 1
3
</snippet></ROW><ROW><id>20732991</id><snippet>something not something</snippet></ROW><ROW><id>20732991</id><snippet>!=</snippet></ROW><ROW><id>20732991</id><snippet>elif x['fname'] != 'ply.json':
</snippet></ROW><ROW><id>20732991</id><snippet>if</snippet></ROW><ROW><id>20732991</id><snippet>else</snippet></ROW><ROW><id>20732991</id><snippet>if x['fname'] == 'ply.json':
    save1(name)
else:
    write_data({'fname':'ply.json', 'name':'Karatepig'}, 'ply.json')
</snippet></ROW><ROW><id>20733108</id><snippet>accept</snippet></ROW><ROW><id>20733108</id><snippet>read</snippet></ROW><ROW><id>20733108</id><snippet>write</snippet></ROW><ROW><id>20733108</id><snippet>accept</snippet></ROW><ROW><id>20733108</id><snippet>close</snippet></ROW><ROW><id>20733180</id><snippet>debut</snippet></ROW><ROW><id>20733180</id><snippet>fin</snippet></ROW><ROW><id>20733180</id><snippet>taille</snippet></ROW><ROW><id>20733180</id><snippet>item = plateau[int(debut):int(fin)]
</snippet></ROW><ROW><id>20733180</id><snippet>taille</snippet></ROW><ROW><id>20733180</id><snippet>taille = int(sqrt(len(plateau)))
</snippet></ROW><ROW><id>20733220</id><snippet>Python 2.7.6 (default, Nov 26 2013, 12:52:49) 
[GCC 4.8.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from PyQt4 import QtGui
&gt;&gt;&gt; app = QtGui.QApplication([])
&gt;&gt;&gt; obj = QtGui.QGraphicsSimpleTextItem()
&gt;&gt;&gt; obj.setText('foo')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20733220</id><snippet>.pythonrc.py</snippet></ROW><ROW><id>20733246</id><snippet>df_negAssets.index
</snippet></ROW><ROW><id>20733246</id><snippet>df_negAssets.index[2] == 59
</snippet></ROW><ROW><id>20733246</id><snippet>numpy.where(df_negAssets.index == 59)[0][0] == 2
</snippet></ROW><ROW><id>20733246</id><snippet>df_negAssets[59]</snippet></ROW><ROW><id>20733246</id><snippet>df_negAssets</snippet></ROW><ROW><id>20733246</id><snippet>df[0][x:y:z]</snippet></ROW><ROW><id>20733246</id><snippet>&lt;0</snippet></ROW><ROW><id>20733310</id><snippet>def luhn_residue(digits):
    return sum(sum(divmod(int(d)*(1 + i%2), 10))
                 for i, d in enumerate(digits[::-1])) % 10
</snippet></ROW><ROW><id>20733310</id><snippet>(1 + i%2)</snippet></ROW><ROW><id>20733310</id><snippet>2</snippet></ROW><ROW><id>20733310</id><snippet>1</snippet></ROW><ROW><id>20733310</id><snippet>sum(divmod(..., 10))</snippet></ROW><ROW><id>20733310</id><snippet>def getImei(N):
    part = ''.join(str(random.randrange(0,9)) for _ in range(N-1))
    res = luhn_residue('{}{}'.format(part, 0))
    return '{}{}'.format(part, -res%10)
</snippet></ROW><ROW><id>20733310</id><snippet>&gt;&gt;&gt; luhn_residue('79927398713')
0
&gt;&gt;&gt; luhn_residue('05671564547361')
6
&gt;&gt;&gt; luhn_residue(getImei(14))
0
</snippet></ROW><ROW><id>20733335</id><snippet>binascii.unhexlify</snippet></ROW><ROW><id>20733335</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.unhexlify('AB02CF4AFF')
b'\xab\x02\xcfJ\xff'
</snippet></ROW><ROW><id>20733335</id><snippet>hex</snippet></ROW><ROW><id>20733513</id><snippet>brew versions python</snippet></ROW><ROW><id>20733513</id><snippet>cd /usr/local/Library/Formula/</snippet></ROW><ROW><id>20733513</id><snippet>git checkout 865f763 /usr/local/Library/Formula/python.rb</snippet></ROW><ROW><id>20733513</id><snippet>brew install python</snippet></ROW><ROW><id>20733513</id><snippet>rm -rf build</snippet></ROW><ROW><id>20733513</id><snippet>rm -rf ~/.python-eggs</snippet></ROW><ROW><id>20733513</id><snippet>mkdir build</snippet></ROW><ROW><id>20733513</id><snippet>cd build</snippet></ROW><ROW><id>20733513</id><snippet>../configure CXX=g++-4.7 CC=gcc-4.7 PYTHON=/usr/local/bin/python</snippet></ROW><ROW><id>20733513</id><snippet>make</snippet></ROW><ROW><id>20733513</id><snippet>make check</snippet></ROW><ROW><id>20733513</id><snippet>bin/mesos-tests.sh --gtest_filter="*.PythonFramework" --verbose</snippet></ROW><ROW><id>20733513</id><snippet>distutils</snippet></ROW><ROW><id>20733513</id><snippet>distutils</snippet></ROW><ROW><id>20733513</id><snippet>python-config</snippet></ROW><ROW><id>20733513</id><snippet>clang</snippet></ROW><ROW><id>20733513</id><snippet>distutils</snippet></ROW><ROW><id>20733513</id><snippet>clang</snippet></ROW><ROW><id>20733513</id><snippet>distutils</snippet></ROW><ROW><id>20733513</id><snippet>distutils</snippet></ROW><ROW><id>20733513</id><snippet>distutils</snippet></ROW><ROW><id>20733513</id><snippet>homebrew</snippet></ROW><ROW><id>20733679</id><snippet>ValueError</snippet></ROW><ROW><id>20733679</id><snippet>ValueError</snippet></ROW><ROW><id>20733679</id><snippet>ValueError</snippet></ROW><ROW><id>20733679</id><snippet>AssertionError</snippet></ROW><ROW><id>20733679</id><snippet>foo</snippet></ROW><ROW><id>20733679</id><snippet>switch = foo()
assert switch in (1, 2, 3), "foo() returned illegal value: %s" % switch
if switch == 1:
    ...
elif switch == 2:
    ...
else:
    ...
</snippet></ROW><ROW><id>20733684</id><snippet>def uniq_perms(a, b, c):
    if a &lt; 0 or b &lt; 0 or c &lt; 0:
        return
    if a + b + c == 0:
        yield []
    for s in uniq_perms(a - 1, b, c):
        yield [0] + s
    for s in uniq_perms(a, b - 1, c):
        yield [1] + s
    for s in uniq_perms(a, b, c - 1):
        yield [-1] + s

for s in uniq_perms(2, 1, 1):
    print s
</snippet></ROW><ROW><id>20733853</id><snippet>&gt;&gt;&gt; randomList
[0.46044625854330556, 0.7259964854084655, 0.23337439854506958, 0.4510862027107614, 0.5306153865653811, 0.8419679084235715, 0.8742117729328253, 0.7634456118593921, 0.5953545552492302, 0.7763910850561638]
</snippet></ROW><ROW><id>20733853</id><snippet>"%d" % randomList[index]</snippet></ROW><ROW><id>20733853</id><snippet>&gt;&gt;&gt; print("%.5f" % randomList[index])
0.77639
</snippet></ROW><ROW><id>20733853</id><snippet>&gt;&gt;&gt; print("{.5f}".format(randomList[index]))
0.77639   
</snippet></ROW><ROW><id>20733863</id><snippet>logging.root</snippet></ROW><ROW><id>20733863</id><snippet>logging.Logger</snippet></ROW><ROW><id>20733863</id><snippet>&gt;&gt;&gt; import logging
&gt;&gt;&gt;
&gt;&gt;&gt; logging.root.setLevel('INFO')
&gt;&gt;&gt; logging.root.info('Info message')
INFO:root:Info message
</snippet></ROW><ROW><id>20733863</id><snippet>logging</snippet></ROW><ROW><id>20733863</id><snippet>&gt;&gt;&gt; logging.info('Info message')
INFO:root:Info message
</snippet></ROW><ROW><id>20734025</id><snippet>*</snippet></ROW><ROW><id>20734025</id><snippet>a2</snippet></ROW><ROW><id>20734025</id><snippet>^[0-9]+$
</snippet></ROW><ROW><id>20734025</id><snippet>^\d+$
</snippet></ROW><ROW><id>20734025</id><snippet>^</snippet></ROW><ROW><id>20734025</id><snippet>$</snippet></ROW><ROW><id>20734031</id><snippet>stacks</snippet></ROW><ROW><id>20734031</id><snippet>&gt;&gt;&gt; stacks = [[1, 2, 3], [[4, 5, 6], [1, 2, 3]]]
&gt;&gt;&gt; wrapped = (s if isinstance(s[0], list) else [s] for s in stacks)
&gt;&gt;&gt; total = [sum(x[1] for x in w) for w in wrapped]
&gt;&gt;&gt; total
[2, 7]
</snippet></ROW><ROW><id>20734031</id><snippet>stacks</snippet></ROW><ROW><id>20734031</id><snippet>&gt;&gt;&gt; stacks = [[[1, 2, 3]], [[4, 5, 6], [1, 2, 3]]]
&gt;&gt;&gt; total = [sum(x[1] for x in w) for w in stacks]
&gt;&gt;&gt; total
[2, 7]
</snippet></ROW><ROW><id>20734207</id><snippet>get_file_and_metadata</snippet></ROW><ROW><id>20734207</id><snippet>self.client.get_file_and_metadata</snippet></ROW><ROW><id>20734207</id><snippet>download, metadata = self.client.get_file_and_metadata(selected_path)
</snippet></ROW><ROW><id>20734207</id><snippet>get_file</snippet></ROW><ROW><id>20734207</id><snippet>download = self.client.get_file(selected_path)
</snippet></ROW><ROW><id>20734428</id><snippet>auth['auth_url']</snippet></ROW><ROW><id>20734428</id><snippet>callback_url</snippet></ROW><ROW><id>20734442</id><snippet>(?:...)</snippet></ROW><ROW><id>20734442</id><snippet>url(r'^w(?:ords)?$', 'app_name.views.view_words')
</snippet></ROW><ROW><id>20734498</id><snippet>x = ['left'] * 7
</snippet></ROW><ROW><id>20734498</id><snippet>x = [[] for _ in xrange(7)]
</snippet></ROW><ROW><id>20734897</id><snippet>""</snippet></ROW><ROW><id>20734897</id><snippet>False</snippet></ROW><ROW><id>20734897</id><snippet>if options.in_dir:
    # argument supplied
else:
    # still empty, no arg
</snippet></ROW><ROW><id>20734897</id><snippet>None</snippet></ROW><ROW><id>20734897</id><snippet>if options.in_dir is None:
    # no arg
else:
    # arg supplied 
</snippet></ROW><ROW><id>20734958</id><snippet>start_server()
</snippet></ROW><ROW><id>20734958</id><snippet>for i in range(2):
    t = Thread(target=service)
    t.start()
#thread.start_new_thread(service,())
</snippet></ROW><ROW><id>20734958</id><snippet>.join()</snippet></ROW><ROW><id>20734958</id><snippet>threading</snippet></ROW><ROW><id>20734958</id><snippet>thread</snippet></ROW><ROW><id>20734958</id><snippet>thread</snippet></ROW><ROW><id>20734958</id><snippet>threading</snippet></ROW><ROW><id>20734958</id><snippet>thread</snippet></ROW><ROW><id>20734958</id><snippet>thread</snippet></ROW><ROW><id>20735137</id><snippet>204 No Content</snippet></ROW><ROW><id>20735137</id><snippet>return HttpResponse(status=204)
</snippet></ROW><ROW><id>20735245</id><snippet>diff = cv2.matchTemplate(img1, img2, cv2.TM_CCORR_NORMED)
x, y = np.unravel_index(np.argmax(diff), diff.shape)
</snippet></ROW><ROW><id>20735311</id><snippet>file.save()</snippet></ROW><ROW><id>20735311</id><snippet>FileStorage()</snippet></ROW><ROW><id>20735311</id><snippet>file.save()</snippet></ROW><ROW><id>20735311</id><snippet>filename</snippet></ROW><ROW><id>20735311</id><snippet>stream</snippet></ROW><ROW><id>20735311</id><snippet>FileStorage(stream=request.files['image']).save(os.path.join(app.config['AUTHOR_FOLDER'],'testpic.jpg')))
</snippet></ROW><ROW><id>20735336</id><snippet>+</snippet></ROW><ROW><id>20735336</id><snippet>' 1907727500'</snippet></ROW><ROW><id>20735336</id><snippet>%2B</snippet></ROW><ROW><id>20735336</id><snippet>var l_sParams = 'number=' + encodeURIComponent(customer_number.value);
</snippet></ROW><ROW><id>20735415</id><snippet>#models.py

Class Page(models.Model):
    url = models.URLField()

#views.py

def random_page_view(request):
    response_data = {}
    page = Page.objects.order_by('?')[0]
    response_data['page_url'] = page.url
    return HttpResponse(json.dumps(response_data), content_type="application/json")

#random_page.html

&lt;!-- I guess you have something like --&gt;
&lt;iframe id='random-page' src='some url'&gt;&lt;/iframe&gt;
&lt;button id='new-page-button'&gt;Click me!&lt;/button&gt;

&lt;script&gt;
  $(function(){
    $('#new-page-button').on('click', function(event){
        $.get( "{% url 'get_random_url' %}", function( data ) {
           $( "#random-page" ).attr('src', data.page_url);
        });
    });
  })
&lt;/script&gt;
</snippet></ROW><ROW><id>20735486</id><snippet>if len(dates) &lt; 6:</snippet></ROW><ROW><id>20735486</id><snippet>&gt;&gt;&gt; date = '10/5/13 - 12/14/13'
&gt;&gt;&gt; len(date)
18
&gt;&gt;&gt; date = '11/9/13'
&gt;&gt;&gt; len(date)
7
&gt;&gt;&gt; date[:6]
'11/9/1'
</snippet></ROW><ROW><id>20735486</id><snippet>row = row + 1</snippet></ROW><ROW><id>20735486</id><snippet>enumerate</snippet></ROW><ROW><id>20735486</id><snippet>dates</snippet></ROW><ROW><id>20735486</id><snippet>&gt;&gt;&gt; dates
u'\n10/5/13 - 12/14/13            \xa0\n        '
</snippet></ROW><ROW><id>20735514</id><snippet>url (
    r'^question_detail-(?P&lt;pk&gt;\w+)$',
    user_passes_test(not_in_group_chef, login_url='public_connexion')(
        Question_detail.as_view()
    ),
    name='detail_question'
)
</snippet></ROW><ROW><id>20735576</id><snippet>object.__init__</snippet></ROW><ROW><id>20735576</id><snippet>super</snippet></ROW><ROW><id>20735576</id><snippet>__init__</snippet></ROW><ROW><id>20735576</id><snippet>MyClass</snippet></ROW><ROW><id>20735576</id><snippet>__init__</snippet></ROW><ROW><id>20735576</id><snippet>__init__</snippet></ROW><ROW><id>20735576</id><snippet>MyClass.__init__</snippet></ROW><ROW><id>20735576</id><snippet>MyClass.__init__</snippet></ROW><ROW><id>20735623</id><snippet>gameState = GameState()
while gameState.characters_talked_to != 3:
</snippet></ROW><ROW><id>20735626</id><snippet>Menu</snippet></ROW><ROW><id>20735626</id><snippet>create_bttn()</snippet></ROW><ROW><id>20735626</id><snippet>self.instructions()</snippet></ROW><ROW><id>20735626</id><snippet>self.b1["command"] = self.instructions()
</snippet></ROW><ROW><id>20735626</id><snippet>instructions</snippet></ROW><ROW><id>20735626</id><snippet>self.pack_forget()
</snippet></ROW><ROW><id>20735626</id><snippet>self.b1["command"] = self.instructions()
</snippet></ROW><ROW><id>20735626</id><snippet>self.b1["command"] = self.instructions # without () 
</snippet></ROW><ROW><id>20735751</id><snippet>python.org</snippet></ROW><ROW><id>20735753</id><snippet>FreqDist</snippet></ROW><ROW><id>20735753</id><snippet>all_words=nltk.FreqDist(w.lower() for w in fiction.words() if w.lower() not in nltk.corpus.stopwords.words('english'))
</snippet></ROW><ROW><id>20735753</id><snippet>stopword_set = frozenset(ntlk.corpus.stopwords.words('english'))
</snippet></ROW><ROW><id>20735753</id><snippet>FreqDist</snippet></ROW><ROW><id>20735753</id><snippet>dict</snippet></ROW><ROW><id>20735753</id><snippet>for stopword in nltk.corpus.stopwords.words('english'):
    if stopword in all_words:
        del all_words[stopword]
</snippet></ROW><ROW><id>20735946</id><snippet>x,y = [], []
for l in f:
    row = l.split()
    x.append(row[0])
    y.append(row[1])
</snippet></ROW><ROW><id>20735946</id><snippet>import csv
with open('filename','r') as f:
    reader = csv.reader(open('filename','r'),delimeter=' ')
    for row in reader:
        x.append(row[0])
        y.append(row[1])
</snippet></ROW><ROW><id>20735946</id><snippet>x,y = zip(*[l.split() for l in f])
</snippet></ROW><ROW><id>20735946</id><snippet>import csv
x,y = zip(*csv.reader(f,delimeter=' '))
</snippet></ROW><ROW><id>20736052</id><snippet>overwrite()</snippet></ROW><ROW><id>20736052</id><snippet>print</snippet></ROW><ROW><id>20736052</id><snippet>print "Save file 1 contains:", x['name']  # notice the comma before the x
</snippet></ROW><ROW><id>20736052</id><snippet>'fname:'ply1.json'</snippet></ROW><ROW><id>20736052</id><snippet>'fname':'ply1.json'</snippet></ROW><ROW><id>20736088</id><snippet>__file__</snippet></ROW><ROW><id>20736088</id><snippet>import os

# Get the directory in which this script resides
script_path = os.path.split(__file__)[0]

# Trace file's location is relative to the script
trace_filename = os.path.join(script_path, '..', 'trace', 'out.txt')

print 'Trace file is at: {}'.format(trace_filename)
</snippet></ROW><ROW><id>20736088</id><snippet>os.path.split()</snippet></ROW><ROW><id>20736088</id><snippet>trace_filename</snippet></ROW><ROW><id>20736262</id><snippet>import subprocess</snippet></ROW><ROW><id>20736262</id><snippet>subprocess</snippet></ROW><ROW><id>20736262</id><snippet>sys.modules</snippet></ROW><ROW><id>20736262</id><snippet>import</snippet></ROW><ROW><id>20736262</id><snippet>sys.path</snippet></ROW><ROW><id>20736262</id><snippet>sys.modules</snippet></ROW><ROW><id>20736333</id><snippet>&gt;&gt;&gt; a = np.array([[2,0,0,0],[1,0,2,0],[1,0,5,0]])*1.0
&gt;&gt;&gt; b = np.array([0.3,0.4,0.6,0.8])
&gt;&gt;&gt; wild = (a == 0).all(axis=0)
&gt;&gt;&gt; c = a.copy()
&gt;&gt;&gt; c[:,wild] = b[wild]
&gt;&gt;&gt; c
array([[ 2. ,  0.4,  0. ,  0.8],
       [ 1. ,  0.4,  2. ,  0.8],
       [ 1. ,  0.4,  5. ,  0.8]])
</snippet></ROW><ROW><id>20736337</id><snippet>re.search</snippet></ROW><ROW><id>20736337</id><snippet>&gt;&gt;&gt; from re import search
&gt;&gt;&gt; f = '"bob smith" &lt;bob5@xxxxx.org&gt;'
&gt;&gt;&gt; search('&lt;(.*?)&gt;$', f)
&lt;_sre.SRE_Match object at 0x0213A520&gt;
&gt;&gt;&gt; search('&lt;(.*?)&gt;$', f).group(1)
'bob5@xxxxx.org'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20736337</id><snippet>&lt;      # &lt;
(.*?)  # Capture group for zero or more characters
&gt;      # &gt;
$      # End of string
</snippet></ROW><ROW><id>20736363</id><snippet>Story</snippet></ROW><ROW><id>20736363</id><snippet>get_top()</snippet></ROW><ROW><id>20736363</id><snippet>temp_cache['top']['response_json'] = {'stories': hn.get_stories()}
</snippet></ROW><ROW><id>20736363</id><snippet>Story</snippet></ROW><ROW><id>20736376</id><snippet>curx</snippet></ROW><ROW><id>20736376</id><snippet>Ball</snippet></ROW><ROW><id>20736376</id><snippet>print ball.curx()
</snippet></ROW><ROW><id>20736376</id><snippet>Ball.forcex</snippet></ROW><ROW><id>20736376</id><snippet>Ball.forcey</snippet></ROW><ROW><id>20736376</id><snippet>self</snippet></ROW><ROW><id>20736376</id><snippet>Vector.x</snippet></ROW><ROW><id>20736376</id><snippet>Vector.y</snippet></ROW><ROW><id>20736376</id><snippet>x</snippet></ROW><ROW><id>20736376</id><snippet>y</snippet></ROW><ROW><id>20736376</id><snippet>Vector</snippet></ROW><ROW><id>20736376</id><snippet>self.x</snippet></ROW><ROW><id>20736376</id><snippet>self.y</snippet></ROW><ROW><id>20736376</id><snippet>class Ball:
    def __init__(self,pos,vel):
        self.pos = Vector(pos.x,pos.y)
        self.vel = Vector(vel.x,vel.y)
    def curx(self):
        return (self.pos.x + self.vel.x)
    def cury(self):
        return (self.pos.y + self.vel.y)
    def forcex(self, velx):
        self.vel.deltax(velx)
    def forcey(self, vely):
        self.vel.deltay(vely)

class Vector:
    def __init__(self,x,y):
        self.x = x
        self.y = y
    def delx(self,deltax):
        self.x = self.x + deltax
    def dely(self,deltay):
        self.y = self.y + deltay
ball = Ball(Vector(0,0),Vector(0,0))
print ball.curx()
</snippet></ROW><ROW><id>20736778</id><snippet>app = Celery('proj',
         broker='amqp://guest@localhost//',
         backend='amqp://',
         include=['proj.tasks'])
</snippet></ROW><ROW><id>20736965</id><snippet>use 5.010;
use strict;
use warnings;
use autodie;
use List::Util 'sum';

open my $infile, '&lt;', 'foo.txt';
my @groups;
my $group; 
while ( my $line = &lt;$infile&gt; ) {
    chomp $line;
    my ($name, $sno, $points, $first) = split /\t/, $line;
    if ( $first &amp;&amp; $first eq 'F' ) {
        $group = [];
        push @groups, $group;
    }
    push @$group, { 'name' =&gt; $name, 'sno' =&gt; $sno, 'points' =&gt; $points, 'first' =&gt; $first };
}

say join "\t", qw/Name S.No Points First/;
for my $group (@groups) {
    my $total_points = sum map $_-&gt;{'points'}, @$group;
    my $first_points = $group-&gt;[0]{'points'};

    say join "\t", @{ $group-&gt;[0] }{ qw/name sno points first/ };

    for my $other (1..2) {
        if ( $group-&gt;[$other] ) {
            say join "\t", @{ $group-&gt;[$other] }{ qw/name sno points/ }, sprintf "%.2f", 100 * ($first_points - $group-&gt;[$other]{'points'}) / $total_points;
        }
    }
}
</snippet></ROW><ROW><id>20736965</id><snippet>Name    S.No    Points  First
Jack    2   98  F
Jones   6   25  51.77
Mike    8   11  61.70
Gareth  1   85  F
Simon   4   76  4.79
Mark    11  12  38.83
</snippet></ROW><ROW><id>20737096</id><snippet>using System;
using System.IO;
using System.IO.Pipes;
using System.Text;
class PipeServer
{
    static void Main()
    {
        var server = new NamedPipeServerStream("NPtest");

        Console.WriteLine("Waiting for connection...");
        server.WaitForConnection();

        Console.WriteLine("Connected.");
        var br = new BinaryReader(server);
        var bw = new BinaryWriter(server);

        while (true)
        {
            try
            {
                var len = (int)br.ReadUInt32();            // Read string length
                var str = new string(br.ReadChars(len));    // Read string

                Console.WriteLine("Read: \"{0}\"", str);

                //str = new string(str.Reverse().ToArray());  // Aravind's edit: since Reverse() is not working, might require some import. Felt it as irrelevant

                var buf = Encoding.ASCII.GetBytes(str);     // Get ASCII byte array     
                bw.Write((uint)buf.Length);                // Write string length
                bw.Write(buf);                              // Write string
                Console.WriteLine("Wrote: \"{0}\"", str);
            }
            catch (EndOfStreamException)
            {
                break;                    // When client disconnects
            }
        }
    }
}
</snippet></ROW><ROW><id>20737096</id><snippet>import time
import struct

f = open(r'\\.\pipe\NPtest', 'r+b', 0)
i = 1

while True:
    s = 'Message[{0}]'.format(i)
    i += 1

    f.write(struct.pack('I', len(s)) + s)   # Write str length and str
    f.seek(0)                               # EDIT: This is also necessary
    print 'Wrote:', s

    n = struct.unpack('I', f.read(4))[0]    # Read str length
    s = f.read(n)                           # Read str
    f.seek(0)                               # Important!!!
    print 'Read:', s

    time.sleep(2)
</snippet></ROW><ROW><id>20737253</id><snippet>__init__</snippet></ROW><ROW><id>20737253</id><snippet>self.guid = guid
</snippet></ROW><ROW><id>20737253</id><snippet>NewsStory.guid = guid
</snippet></ROW><ROW><id>20737769</id><snippet>cursor.execute('DELETE FROM datatable WHERE date &lt; %s', [datetime.date(2012, 1, 1)])
</snippet></ROW><ROW><id>20737800</id><snippet>Users</snippet></ROW><ROW><id>20737800</id><snippet>is_staff</snippet></ROW><ROW><id>20737800</id><snippet>manage.py shell</snippet></ROW><ROW><id>20737821</id><snippet>output_lines = [i for i in re.split(r'\n', output) if "Lorem" in i]
print output_lines
</snippet></ROW><ROW><id>20737821</id><snippet>['Lorem Ipsum is simply dummy text.', "Lorem Ipsum has been the industry's standard"]
</snippet></ROW><ROW><id>20737821</id><snippet>output_lines = [i for i in re.split(r'\n', output) if re.search("Lorem",i)]
</snippet></ROW><ROW><id>20738157</id><snippet>b = np.arange(1,4) # the base
e = np.arange(1,5) # the exponent

b[:,np.newaxis] ** e
=&gt; 
array([[ 1,  1,  1,  1],
       [ 2,  4,  8, 16],
       [ 3,  9, 27, 81]])

(b[:,None] ** e).reshape(-1,2,2) 
=&gt;
array([[[ 1,  1],
        [ 1,  1]],

       [[ 2,  4],
        [ 8, 16]],

       [[ 3,  9],
        [27, 81]]])
</snippet></ROW><ROW><id>20738157</id><snippet>m = (b[:,None] ** e).reshape(-1,2,2)
[ np.mat(a) for a in m ]
=&gt;
[matrix([[1, 1],
        [1, 1]]),
 matrix([[ 2,  4],
        [ 8, 16]]),
 matrix([[ 3,  9],
        [27, 81]])]
</snippet></ROW><ROW><id>20738294</id><snippet>def fact(n):
</snippet></ROW><ROW><id>20738294</id><snippet>a = f.fact(3)
</snippet></ROW><ROW><id>20738294</id><snippet>a = fact(f, 3)
</snippet></ROW><ROW><id>20738294</id><snippet>this</snippet></ROW><ROW><id>20738294</id><snippet># TypeError: fact() takes exactly 1 argument (2 given)
</snippet></ROW><ROW><id>20738294</id><snippet>def fact(self, n):
</snippet></ROW><ROW><id>20738294</id><snippet>self</snippet></ROW><ROW><id>20738323</id><snippet>import wx


class Main(wx.Frame):

    def __init__(self, parent, id):
        wx.Frame.__init__(self, parent, id, 'Main', size=(700, 500))

        self.SetBackgroundColour('white')

        panel = wx.Panel(self, wx.ID_ANY, size=(50, 50))
        panel.SetBackgroundColour('blue')

        sizer = wx.BoxSizer()
        sizer.AddStretchSpacer(1)
        sizer.Add(panel, 0, wx.ALIGN_CENTER)
        sizer.AddStretchSpacer(1)

        self.SetSizer(sizer)


if __name__ == '__main__':
    app = wx.App()
    frame = Main(parent=None, id=-1)
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>20738750</id><snippet>newState = cState
</snippet></ROW><ROW><id>20738750</id><snippet> newState = cState.copy()
</snippet></ROW><ROW><id>20738750</id><snippet>self.children = []</snippet></ROW><ROW><id>20738991</id><snippet>min</snippet></ROW><ROW><id>20738991</id><snippet>key</snippet></ROW><ROW><id>20738991</id><snippet>&gt;&gt;&gt; X = 4500
&gt;&gt;&gt; min(tuple_list,key=lambda x: abs(X-x[0]))
(4500, 1)
&gt;&gt;&gt; X = 8500
&gt;&gt;&gt; min(tuple_list,key=lambda x: abs(X-x[0]))
(8000, 4)
&gt;&gt;&gt; X = 11000
&gt;&gt;&gt; min(tuple_list,key=lambda x: abs(X-x[0]))
(11000, 6)
</snippet></ROW><ROW><id>20738991</id><snippet>X</snippet></ROW><ROW><id>20738991</id><snippet>filter</snippet></ROW><ROW><id>20738996</id><snippet>Settings &gt; Project Settings &gt; Python Debugger</snippet></ROW><ROW><id>20738996</id><snippet>/Users/iandouglas/.virtualenvs/defaultenv/bin/gunicorn</snippet></ROW><ROW><id>20738996</id><snippet>-b 192.168.1.1:9000 app:yourappname</snippet></ROW><ROW><id>20738996</id><snippet>/Users/iandouglas/PycharmProjects/MyExampleApp</snippet></ROW><ROW><id>20738996</id><snippet>-b 0.0.0.0:5001</snippet></ROW><ROW><id>20739302</id><snippet>print [5] * 3
print "abc" * 3
print [1.1] * 3
print (8,) * 3
</snippet></ROW><ROW><id>20739302</id><snippet>nums = [5] * 3
print map(id, nums)
</snippet></ROW><ROW><id>20739302</id><snippet>[41266184, 41266184, 41266184]
</snippet></ROW><ROW><id>20739302</id><snippet>id</snippet></ROW><ROW><id>20739302</id><snippet>[Foo() for i in range(3)]
</snippet></ROW><ROW><id>20739302</id><snippet>[5] * 3
</snippet></ROW><ROW><id>20739713</id><snippet>from registration.backends.default.views import RegistrationView
</snippet></ROW><ROW><id>20739713</id><snippet>form_class</snippet></ROW><ROW><id>20739713</id><snippet>RegistrationView</snippet></ROW><ROW><id>20739713</id><snippet>as_view()</snippet></ROW><ROW><id>20739713</id><snippet>url (
    r'^accounts/register/$', 
    RegistrationView.as_view(form_class=extendedRegistrationForm),
)
</snippet></ROW><ROW><id>20739826</id><snippet>__init__</snippet></ROW><ROW><id>20739826</id><snippet>super(menu, self).__init__(*args, **kwargs)</snippet></ROW><ROW><id>20739826</id><snippet>super()</snippet></ROW><ROW><id>20739826</id><snippet>menu.__init__</snippet></ROW><ROW><id>20739826</id><snippet>class menu(pyglet.sprite.Sprite):
    def __init__(self, *args, **kwargs):
        super(menu, self).__init__(*args, **kwargs)
        self.labels = {}

class pause_menu(menu):
    def __init__(self, *args, **kwargs):
        super(pause_menu, self).__init__(*args, **kwargs)
        self.labels['resume'] = pyglet.text.Label('Resume Game', font_name='Times New Roman', font_size=36, x=window.main.width//2, y=window.main.height//2)
</snippet></ROW><ROW><id>20739826</id><snippet>self</snippet></ROW><ROW><id>20739826</id><snippet>pyglet.sprite.Sprite.__init__()</snippet></ROW><ROW><id>20739826</id><snippet>self</snippet></ROW><ROW><id>20739826</id><snippet>self</snippet></ROW><ROW><id>20739826</id><snippet>img</snippet></ROW><ROW><id>20739826</id><snippet>pyglet</snippet></ROW><ROW><id>20739826</id><snippet>AbstractImage.get_texture()</snippet></ROW><ROW><id>20739897</id><snippet>timedelta</snippet></ROW><ROW><id>20739897</id><snippet>&gt;&gt;&gt; np.diff(index)/np.timedelta64(1, 's')
array([ 3.6139351 ,  3.39279693,  1.87199821])
</snippet></ROW><ROW><id>20739897</id><snippet>&gt;&gt;&gt; np.diff(index)/np.timedelta64(1, 'm')
array([ 0.06023225,  0.05654662,  0.03119997])
</snippet></ROW><ROW><id>20739928</id><snippet>exec</snippet></ROW><ROW><id>20739928</id><snippet>creates</snippet></ROW><ROW><id>20739928</id><snippet>exec { 'mycommand':
    command =&gt; '/usr/bin/something a b c',
    creates =&gt; '/var/lib/xxx';
}
</snippet></ROW><ROW><id>20739928</id><snippet>/var/lib/xxx</snippet></ROW><ROW><id>20740182</id><snippet>""" read csv input file, post process and plot 3D data """
import csv
import numpy as np
from mayavi import mlab
from scipy.interpolate import RectSphereBivariateSpline

# user input
nElevationPoints = 17 # needs to correspond with csv file
nAzimuthPoints = 40 # needs to correspond with csv file
threshold = - 40 # needs to correspond with how measurement data was captured
turnTableStepSize = 72 # needs to correspond with measurement settings
resolution = 0.125 # needs to correspond with measurement settings

# read data from file
patternData = np.empty([nElevationPoints, nAzimuthPoints]) # empty buffer
ifile  = open('ttest.csv') # need the 'b' suffix to prevent blank rows being inserted
reader = csv.reader(ifile,delimiter=',')
reader.next() # skip first line in csv file as this is only text
for nElevation in range (0,nElevationPoints):
    # azimuth
    for nAzimuth in range(0,nAzimuthPoints):  
        patternData[nElevation,nAzimuth] = reader.next()[2]
ifile.close()

# post process
def r(thetaIndex,phiIndex):
    """r(thetaIndex,phiIndex): function in 3D plotting to return positive vector length from patternData[theta,phi]"""
    radius = -threshold + patternData[thetaIndex,phiIndex]
    return radius

#phi,theta = np.mgrid[0:nAzimuthPoints,0:nElevationPoints]
theta = np.arange(0,nElevationPoints)
phi = np.arange(0,nAzimuthPoints)
thetaMesh, phiMesh = np.meshgrid(theta,phi)
stepSizeRad = turnTableStepSize * resolution * np.pi / 180
theta = theta * stepSizeRad
phi = phi * stepSizeRad

# create new grid to interpolate on
phiIndex = np.arange(1,361)
phiNew = phiIndex*np.pi/180
thetaIndex = np.arange(1,141)
thetaNew = thetaIndex*np.pi/180
thetaNew,phiNew = np.meshgrid(thetaNew,phiNew)
# create interpolator object and interpolate
data = r(thetaMesh,phiMesh)
theta[0] += 1e-6 # zero values for theta cause program to halt; phi makes no sense at theta=0
lut = RectSphereBivariateSpline(theta,phi,data.T,s=900)
data_interp = lut.ev(thetaNew.ravel(),phiNew.ravel()).reshape((360,140)).T

def rInterp(theta,phi):
    """rInterp(theta,phi): function in 3D plotting to return positive vector length from interpolated patternData[theta,phi]"""
    thetaIndex = theta/(np.pi/180)
    thetaIndex = thetaIndex.astype(int)
    phiIndex = phi/(np.pi/180)
    phiIndex = phiIndex.astype(int)
    radius = data_interp[thetaIndex,phiIndex]
    return radius
# recreate mesh minus one, needed otherwise the below gives index error, but why??
phiIndex = np.arange(0,360)
phiNew = phiIndex*np.pi/180
thetaIndex = np.arange(0,140)
thetaNew = thetaIndex*np.pi/180
thetaNew,phiNew = np.meshgrid(thetaNew,phiNew)

x = (rInterp(thetaNew,phiNew)*np.cos(phiNew)*np.sin(thetaNew))
y = (-rInterp(thetaNew,phiNew)*np.sin(phiNew)*np.sin(thetaNew))
z = (rInterp(thetaNew,phiNew)*np.cos(thetaNew))

# plot 3D data
intensity = rInterp(thetaNew,phiNew)
obj = mlab.mesh(x, y, z, scalars = intensity, colormap='jet')
obj.enable_contours = True
obj.contour.filled_contours = True
obj.contour.number_of_contours = 20
mlab.show()
</snippet></ROW><ROW><id>20740386</id><snippet>self.processEdit.insertHtml("\n\n Stopping App.....")

event.accept()

self.repaint()
qapp.processEvents()

# clean up resources and status reports here.
time.sleep(5) # only here for the snippet
</snippet></ROW><ROW><id>20740589</id><snippet>exit()</snippet></ROW><ROW><id>20740589</id><snippet>site</snippet></ROW><ROW><id>20740589</id><snippet>exit()</snippet></ROW><ROW><id>20740589</id><snippet>RuntimeError</snippet></ROW><ROW><id>20740589</id><snippet>998</snippet></ROW><ROW><id>20740589</id><snippet>exit()</snippet></ROW><ROW><id>20740589</id><snippet>RuntimeError</snippet></ROW><ROW><id>20740589</id><snippet>raise SystemExit()</snippet></ROW><ROW><id>20740589</id><snippet>sys.exit()</snippet></ROW><ROW><id>20740589</id><snippet>sys.getrecursionlimit()</snippet></ROW><ROW><id>20740794</id><snippet>lambda</snippet></ROW><ROW><id>20740794</id><snippet>def func(n):
    print 'The count is:', n

a = lambda count: [func(i) for i in range(count)]
a(5)
</snippet></ROW><ROW><id>20740886</id><snippet>python manage.py shell

from graphs.models import *
</snippet></ROW><ROW><id>20740886</id><snippet>from graphs.parser import Parser
</snippet></ROW><ROW><id>20740886</id><snippet>from django.core.management.base import BaseCommand, CommandError
from .models import APITest

class Command(BaseCommand):
    args = '&lt;arg1 arg2...&gt;'
    help = 'Help line ...'

    def handle(self, *args, **options):
        ... # You code comes here
</snippet></ROW><ROW><id>20740973</id><snippet>df</snippet></ROW><ROW><id>20740973</id><snippet>df</snippet></ROW><ROW><id>20740973</id><snippet>In [8]: df.index
Out[8]: Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8], dtype='int64')
</snippet></ROW><ROW><id>20740973</id><snippet>new_column</snippet></ROW><ROW><id>20740973</id><snippet>In [15]: new_column.index
Out[15]: 
MultiIndex
[(u'X', 3), (u'X', 1), (u'X', 0), (u'Y', 8), (u'Y', 7), (u'Y', 5), (u'Z', 6), (u'Z', 2), (u'Z', 4)]
</snippet></ROW><ROW><id>20740973</id><snippet>as_index=False</snippet></ROW><ROW><id>20740973</id><snippet>L1</snippet></ROW><ROW><id>20740973</id><snippet>In [13]: new_column = df.groupby('L1', as_index=False).apply(lambda x : pd.expanding_sum(x.sort('L3', ascending=False)['L3'])/x['L3'].sum())
In [14]: df["new"] = new_column.reset_index(level=0, drop=True)
</snippet></ROW><ROW><id>20740973</id><snippet>as_index=False</snippet></ROW><ROW><id>20740973</id><snippet>L1</snippet></ROW><ROW><id>20740973</id><snippet>as_index</snippet></ROW><ROW><id>20740973</id><snippet>apply</snippet></ROW><ROW><id>20741065</id><snippet>id()</snippet></ROW><ROW><id>20741065</id><snippet>id()</snippet></ROW><ROW><id>20741065</id><snippet>5.0</snippet></ROW><ROW><id>20741065</id><snippet>x = 5.0</snippet></ROW><ROW><id>20741065</id><snippet>x += 3.0</snippet></ROW><ROW><id>20741065</id><snippet>id()</snippet></ROW><ROW><id>20741413</id><snippet>def superDuperView(request, params,...): 
   # The logic lies here which is intended to be reused.
   ......
   ......
   return HttpResponse('template.html', {somedata}) 
</snippet></ROW><ROW><id>20741413</id><snippet>def superDuberBusinessLogic(user, params,...): 
   #implement your logic here without a need of any request.
   ......
   return result
</snippet></ROW><ROW><id>20741413</id><snippet>def superDuperView(request, params,...): 
   # You could pass user your logic if you need.
   data = superDuberBusinessLogic(request.user, params,....)
   return HttpResponse('template.html', {data}) 
</snippet></ROW><ROW><id>20741413</id><snippet>superDuberBusinessLogic</snippet></ROW><ROW><id>20741620</id><snippet>style</snippet></ROW><ROW><id>20741620</id><snippet>&lt;style type='text/css'&gt;

    @font-face {
        font-family: "DejaVuSansMono";
        src: url("fonts/DejaVuSansMono.ttf");
    }

    @font-face {
        font-family: "DejaVuSansMono";
        src: url("fonts/DejaVuSansMono-Bold.ttf");
        font-weight: bold;
    }
    @font-face {
        font-family: "DejaVuSansMono";
        src: url("fonts/DejaVuSansMono-Oblique.ttf");
        font-style: italic, oblique;
    }
    @font-face {
        font-family: "DejaVuSansMono";
        src: url("fonts/DejaVuSansMono-BoldOblique.ttf");
        font-weight: bold;
        font-style: italic, oblique;
    }

    *, html {
        font-family: "DejaVuSansMono";
    }

    html {
        padding:10pt;
    }

&lt;/style&gt;
</snippet></ROW><ROW><id>20741620</id><snippet>C:/fonts</snippet></ROW><ROW><id>20741620</id><snippet>/tmp/fonts</snippet></ROW><ROW><id>20741620</id><snippet>@font-face</snippet></ROW><ROW><id>20741620</id><snippet>@font-face {
    font-family: "DejaVuSansMono";
    src: url("c:/fonts/DejaVuSansMono.ttf");
}
</snippet></ROW><ROW><id>20741620</id><snippet>render_to_pdf</snippet></ROW><ROW><id>20741620</id><snippet>def render_to_pdf(template_src, context_dict):
    template = get_template(template_src)
    context = Context(context_dict)
    html  = template.render(context)
    result = StringIO.StringIO()

    pdf = pisa.pisaDocument(StringIO.StringIO(html.encode("UTF-8")), result, path= settings.PROJECT_PATH) 

    if not pdf.err:
        return HttpResponse(result.getvalue(), content_type='application/pdf')
    return HttpResponse('&lt;pre&gt;%s&lt;/pre&gt;' % escape(html))
</snippet></ROW><ROW><id>20741783</id><snippet>setUpClass</snippet></ROW><ROW><id>20741783</id><snippet>setUpClass</snippet></ROW><ROW><id>20741783</id><snippet>classmethod()</snippet></ROW><ROW><id>20741783</id><snippet>@classmethod
def setUpClass(cls):
    ...
</snippet></ROW><ROW><id>20741803</id><snippet>?merchant_name__like=seaside%25
</snippet></ROW><ROW><id>20741803</id><snippet>urllib.urlencode({'merchant_name__like': 'seaside%'})</snippet></ROW><ROW><id>20741803</id><snippet>?merchant_name__like=seaside</snippet></ROW><ROW><id>20741803</id><snippet>LIKE seaside</snippet></ROW><ROW><id>20741828</id><snippet>date_stamp = models.DateField(default=datetime.date.today)
</snippet></ROW><ROW><id>20741828</id><snippet>date_statp = models.DateField(default=datetime.date.today())
</snippet></ROW><ROW><id>20741828</id><snippet>datetime.date.today</snippet></ROW><ROW><id>20741848</id><snippet>python_2_unicode_compatible</snippet></ROW><ROW><id>20741955</id><snippet>mkvirtualenv ...</snippet></ROW><ROW><id>20741955</id><snippet>mypython276=/opt/python276/bin/python2.7
</snippet></ROW><ROW><id>20741955</id><snippet>mkvirtualenv test -p $mypython276
</snippet></ROW><ROW><id>20741955</id><snippet>/opt/python3.3/bin/</snippet></ROW><ROW><id>20741955</id><snippet>PATH</snippet></ROW><ROW><id>20742166</id><snippet>QWidget::setMask(QBitmap)</snippet></ROW><ROW><id>20742166</id><snippet>QBitmap</snippet></ROW><ROW><id>20742166</id><snippet>QRegion</snippet></ROW><ROW><id>20742166</id><snippet>QWidget::setMask(QRegion)</snippet></ROW><ROW><id>20742166</id><snippet>QRegion</snippet></ROW><ROW><id>20742166</id><snippet>setMask</snippet></ROW><ROW><id>20742166</id><snippet>widget.setMask(QRegion())</snippet></ROW><ROW><id>20742166</id><snippet>QRegion</snippet></ROW><ROW><id>20742166</id><snippet>isEmpty</snippet></ROW><ROW><id>20742166</id><snippet>QWidget::mask</snippet></ROW><ROW><id>20742166</id><snippet>QWidget::setMask(QRegion)</snippet></ROW><ROW><id>20742166</id><snippet>d-&gt;extra-&gt;mask = newMask;
d-&gt;extra-&gt;hasMask = !newMask.isEmpty();
</snippet></ROW><ROW><id>20742166</id><snippet>QWidget::setMask</snippet></ROW><ROW><id>20742214</id><snippet>factory = WebSocketClientFactory("ws://localhost:7096")
factory.job_queue = Queue.Queue()
factory.protocol = BridgeSocket
</snippet></ROW><ROW><id>20742214</id><snippet>class BridgeSocket(WebSocketClientProtocol):

    def onMessage(self, payload, isBinary):
        self.factory.job_queue.put(payload)
</snippet></ROW><ROW><id>20742502</id><snippet>final_result =  [{key:dic_a[key]- dic_b[key]} for dic_a in a for dic_b in b for key in dic_a if key in dic_b]
</snippet></ROW><ROW><id>20742502</id><snippet>[{'aaa': 8}, {'bbb': 15}]
</snippet></ROW><ROW><id>20742567</id><snippet>__init__</snippet></ROW><ROW><id>20742567</id><snippet>PDFRenderer</snippet></ROW><ROW><id>20742567</id><snippet>PDFRenderer</snippet></ROW><ROW><id>20742754</id><snippet>pep 3121</snippet></ROW><ROW><id>20742810</id><snippet>request.args.get('getName')
</snippet></ROW><ROW><id>20742810</id><snippet>request.args.get('a')
</snippet></ROW><ROW><id>20742810</id><snippet>{ getName : $('input[name="getName"]').val() }
</snippet></ROW><ROW><id>20742810</id><snippet>{a: $('input[name="getName"]').val()}</snippet></ROW><ROW><id>20742810</id><snippet>getName</snippet></ROW><ROW><id>20742810</id><snippet>'a'</snippet></ROW><ROW><id>20742810</id><snippet>'getName'</snippet></ROW><ROW><id>20742967</id><snippet>form.fields</snippet></ROW><ROW><id>20742967</id><snippet>BoundField</snippet></ROW><ROW><id>20742967</id><snippet>form</snippet></ROW><ROW><id>20742967</id><snippet>form["approve"]
</snippet></ROW><ROW><id>20742967</id><snippet>{{ form.approve }}
</snippet></ROW><ROW><id>20742967</id><snippet>html_name</snippet></ROW><ROW><id>20742990</id><snippet>[set([0]), set([1]), set([2]),..]</snippet></ROW><ROW><id>20742990</id><snippet>&gt;&gt;&gt; [{i} for i in range(5)] 
[set([0]), set([1]), set([2]), set([3]), set([4])]
</snippet></ROW><ROW><id>20742990</id><snippet>&gt;&gt;&gt; [set((i,)) for i in range(5)]
[set([0]), set([1]), set([2]), set([3]), set([4])]
</snippet></ROW><ROW><id>20742990</id><snippet>[set([i]) for i in range(5)]</snippet></ROW><ROW><id>20742990</id><snippet>&gt;python -mtimeit "[{i} for i in range(5)]"
1000000 loops, best of 3: 0.853 usec per loop

&gt;python -mtimeit "[set((i,)) for i in range(5)]"
1000000 loops, best of 3: 1.64 usec per loop

&gt;python -mtimeit "[set([i]) for i in range(5)]"
1000000 loops, best of 3: 1.87 usec per loop
</snippet></ROW><ROW><id>20743126</id><snippet>if</snippet></ROW><ROW><id>20743126</id><snippet>try</snippet></ROW><ROW><id>20743126</id><snippet>def question_two():
    answer_two = raw_input("What's your mother's name?").lower()
    question_3()
</snippet></ROW><ROW><id>20743267</id><snippet>li_dict =[{'invoice':1,'debit':10,'credit':10},{'name':'b','invoice':2,'debit':10,'credit':18},
{'invoice':1,'debit':10,'credit':10}, {'name':'b','invoice':2,'debit':10,'credit':18}]


final_result = []
for dic in li_dict :
    temp_dict = {}
    flag = False

    for dic_f in final_result:
        if 'invoice' in dic and 'invoice' in dic_f:
            if dic['invoice'] == dic_f['invoice']:
                dic_f['debit'] = dic['debit'] + dic_f['debit']
                dic_f['credit'] = dic['credit'] + dic_f['credit']
                flag = True
                break

    if not flag:
        temp_dict['invoice'] = dic.get('invoice', 0)
        temp_dict['debit'] = dic.get('debit', 0)
        temp_dict['credit'] = dic.get('credit', 0)
        final_result.append(temp_dict)

print final_result
</snippet></ROW><ROW><id>20743267</id><snippet>[{'credit': 20, 'invoice': 1, 'debit': 20}, {'credit': 18, 'invoice': 2, 'debit': 10}]
</snippet></ROW><ROW><id>20743494</id><snippet>if brush2.get_rect().collidepoint(pygame.mouse.get_pos()):
    screen.blit(brush2, (x -23.5,y-23.5))
    pygame.display.update()
</snippet></ROW><ROW><id>20743494</id><snippet>if brush2.get_rect().collidepoint(pygame.mouse.get_pos()):
    (brush, brush2) = (brush2, brush) # swaps brush and brush2
    pygame.display.update()
</snippet></ROW><ROW><id>20743494</id><snippet>import sys, pygame
from pygame.locals import *

pygame.init()

screen = pygame.display.set_mode((1000,600))

screen.fill((255,255,255))

brush1 = pygame.image.load("redbrush.png")
brush1 = pygame.transform.scale(brush1,(45,45))
pos1 = (0, 32)

brush2 = pygame.image.load("bluebrush.png")
brush2 = pygame.transform.scale(brush2,(45,45))
brush2 = pygame.transform.scale(brush2,(45,45))
pos2 = (0, 64)

brush = brush1

pygame.display.update()

clock = pygame.time.Clock()

z = 0

while 1:
    screen.blit(brush1, pos1)
    screen.blit(brush2, pos2)
    pygame.display.update()
    clock.tick(60)
    x,y = pygame.mouse.get_pos()

    for event in pygame.event.get():
        if event.type ==pygame.QUIT:
            pygame.quit()
            sys.exit() 
        elif event.type ==MOUSEBUTTONDOWN:
            z=1
        elif event.type ==MOUSEBUTTONUP:
            z=0
        if z==1:
            if brush1.get_rect(center=pos1).collidepoint(pygame.mouse.get_pos()):
                brush = brush1
            if brush2.get_rect(center=pos2).collidepoint(pygame.mouse.get_pos()):
                brush = brush2
            screen.blit(brush, (x -23.5,y-23.5))
            pygame.display.update()
</snippet></ROW><ROW><id>20743620</id><snippet>Photo.save()</snippet></ROW><ROW><id>20743620</id><snippet>super().save()</snippet></ROW><ROW><id>20743620</id><snippet>Photo</snippet></ROW><ROW><id>20743620</id><snippet>*args</snippet></ROW><ROW><id>20743620</id><snippet>**kwargs</snippet></ROW><ROW><id>20743620</id><snippet>Model.save()</snippet></ROW><ROW><id>20743620</id><snippet>class Foo(models.Model):
    def save(self, force_insert=False, force_update=False, **kwargs):
        super(Foo, self).save(force_insert, force_update, **kargs)
        if somethings_needs_to_be_done:
            do_something_here()
            super(Foo, self).save(force_insert=False, force_update=True, **kwargs)
</snippet></ROW><ROW><id>20744034</id><snippet>    import SocketServer
import SimpleHTTPServer

class ServerHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):

    def do_GET(self):
        f = self.wfile
        self.send_response(200)
        self.end_headers()
        f.write("ok")

def runServer(port):
    Handler = ServerHandler

    httpd = SocketServer.TCPServer(("", port), Handler)

    httpd.serve_forever()

if __name__ == "__main__":
    runServer(8000)
</snippet></ROW><ROW><id>20744034</id><snippet>    from testServer import ServerHandler
import SocketServer
from threading import Thread
import httplib
import unittest

class serverThread(Thread):

    def __init__(self, port):
        self.Handler = ServerHandler
        self.httpd = SocketServer.TCPServer(("", port), self.Handler)
        Thread.__init__(self)

    def run(self):
        self.httpd.serve_forever()


class Test(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.serverThread = serverThread(8000)
        cls.serverThread.daemon = True
        cls.serverThread.start()

    @classmethod    
    def tearDownClass(cls):
        cls.serverThread.httpd.__shutdown_request = True


    def test_Server(self):
        conn = httplib.HTTPConnection("localhost", 8000)
        conn.request("GET", "")
        response = conn.getresponse().read()
        self.assertTrue(response, "ok")

if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>20744180</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;SecurityProfile xmlns="security_profile_v1"&gt;
&lt;year&gt;{year}&lt;/year&gt;
&lt;security&gt;
&lt;ID&gt;{id}&lt;/ID&gt;
&lt;login&gt;{login}&lt;/login&gt;
&lt;hex_login&gt;{hex_login}&lt;/hex_login&gt;
&lt;pass&gt;{pass}&lt;/pass&gt;
&lt;/security&gt;
&lt;/SecurityProfile&gt;
</snippet></ROW><ROW><id>20744180</id><snippet>import csv

input_file_name = "some_file.csv" #name/path of your csv file
template_file_name = "some_file.xml" #name/path of your xml template
output_file_name = "{}_09500{}.xml"

with open(template_file_name,"rb") as template_file:
    template = template_file.read()

with open(filename,"rb") as csv_file:
    my_reader = csv.DictReader(csv_file)
    for row in my_reader:
        with open(output_file_name.format(row["YEAR"],row["ID"]),"wb") as current_out:
            current.write(template.format(year=row["YEAR"],
                                          id=row["ID"],
                                          login=row["LOGIN"],
                                          hex_login=row["HEX_LOGIN"],
                                          pass=row["PASS"]))
</snippet></ROW><ROW><id>20744343</id><snippet>QLineEdit</snippet></ROW><ROW><id>20744343</id><snippet>self.current_line_edit</snippet></ROW><ROW><id>20744343</id><snippet>QLineEdit</snippet></ROW><ROW><id>20744343</id><snippet>editingFinished</snippet></ROW><ROW><id>20744343</id><snippet>QLineEdit</snippet></ROW><ROW><id>20744343</id><snippet>def __init__(self, parent=None):
    ...
    ...
    self.current_line_edit = self.line_edit_1
    self.tablewidget.itemDoubleClicked.connect(self.onDoubleClick)
    self.line_edit_1.editingFinished.connect(self.onChangeLineEdit)
    self.line_edit_2.editingFinished.connect(self.onChangeLineEdit)
    self.line_edit_3.editingFinished.connect(self.onChangeLineEdit)
    ...
    ...

def onChange(self):
    self.current_line_edit = self.sender()

def onDoubleClick(self, item):
    self.current_line_edit.setText(item.text())
</snippet></ROW><ROW><id>20744354</id><snippet>Album.objects.filter(~Q(num_stars=1)).select_related()
</snippet></ROW><ROW><id>20744354</id><snippet>Person.objects.filter(~Q(musician__album__num_stars=1))
</snippet></ROW><ROW><id>20744615</id><snippet>owns_pets</snippet></ROW><ROW><id>20744615</id><snippet>owns_pets == True</snippet></ROW><ROW><id>20744615</id><snippet>pets</snippet></ROW><ROW><id>20744615</id><snippet>db.get(some_owner.pets)</snippet></ROW><ROW><id>20744615</id><snippet>pet_set</snippet></ROW><ROW><id>20744859</id><snippet>sock</snippet></ROW><ROW><id>20744859</id><snippet>&gt;&gt;&gt; def foo():
...   return ['potato']
... 
&gt;&gt;&gt; [p] = foo()
&gt;&gt;&gt; p
'potato'
</snippet></ROW><ROW><id>20744886</id><snippet>if what_item in Pickaxes:
    if money &gt;= Pickaxes[what_item]["cost"]:
        inventory.append[what_item]
        print "You have successfully purchased a", what_item
        start()
    else:
        print "Not enough money"
        start()
else:
    print "No such item"
    start()
</snippet></ROW><ROW><id>20744886</id><snippet>while True:
    what_item = raw_input("\nWhich item would you like to purchase? (Leave blank to quit)\n")
    if not what_item:
        break # exit the loop
    if what_item in Pickaxes:
        if money &gt;= Pickaxes[what_item]["cost"]:
            inventory.append[what_item]
            print "You have successfully purchased a", what_item
            break # exits the loop
        else:
            print "Not enough money"
    else:
        print "No such item"
</snippet></ROW><ROW><id>20744942</id><snippet>import cv2
import matplotlib.pyplot as plt
image = cv2.imread('t1NHA.jpg')
#padding since the t-shirt is touching the border, without this we cant get a continious contour around it.
image = cv2.copyMakeBorder(image, 10, 10, 10, 10, cv2.BORDER_CONSTANT, value=[255, 255, 255])
imgray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
imgray = cv2.GaussianBlur(imgray, (9, 9), 0)
ret, thresh = cv2.threshold(imgray, 0, 255, cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)
contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
cv2.drawContours(image, contours, -1, (0, 255, 0), 3)
plt.imshow(image)
plt.show()
</snippet></ROW><ROW><id>20745004</id><snippet>names</snippet></ROW><ROW><id>20745004</id><snippet>while True:
    name = input("Please enter a name: ")
    if name == "END":
        print(names)
        break   
    names.append(name)
</snippet></ROW><ROW><id>20745004</id><snippet>break</snippet></ROW><ROW><id>20745004</id><snippet>sys.exit()</snippet></ROW><ROW><id>20745095</id><snippet>ttk.Entry</snippet></ROW><ROW><id>20745095</id><snippet>from Tkinter import * # from tkinter import *    IN Python 3.x
import ttk

master = Tk()
my_entry = ttk.Entry(master, font=('Arial', 10, 'bold')) # &lt;-----
my_entry.pack()

mainloop()
</snippet></ROW><ROW><id>20745376</id><snippet>import collections
import functools

class memoized(object):
   '''Decorator. Caches a function's return value each time it is called.
   If called later with the same arguments, the cached value is returned
   (not reevaluated).
   '''
   def __init__(self, func):
      self.func = func
      self.cache = {}
   def __call__(self, *args):
      if not isinstance(args, collections.Hashable):
         # uncacheable. a list, for instance.
         # better to not cache than blow up.
         return self.func(*args)
      if args in self.cache:
         return self.cache[args]
      else:
         value = self.func(*args)
         self.cache[args] = value
         return value
   def __repr__(self):
      '''Return the function's docstring.'''
      return self.func.__doc__
   def __get__(self, obj, objtype):
      '''Support instance methods.'''
      return functools.partial(self.__call__, obj)
</snippet></ROW><ROW><id>20745376</id><snippet>change()</snippet></ROW><ROW><id>20745376</id><snippet>@memoized
def change(a, kinds=(50, 20, 10, 5, 1)):
    if a == 0:
        return 1
    if a &lt; 0 or len(kinds) == 0:
        return 0

    return change(a - kinds[0], kinds) + change(a, kinds[1:])

print(change(10))  # 4
</snippet></ROW><ROW><id>20745515</id><snippet>python manage.py migrate myapp zero
</snippet></ROW><ROW><id>20745559</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>20745669</id><snippet>class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
    pass
</snippet></ROW><ROW><id>20745669</id><snippet>ThreadedTCPServer</snippet></ROW><ROW><id>20745669</id><snippet>TCPServer</snippet></ROW><ROW><id>20745669</id><snippet>target</snippet></ROW><ROW><id>20745669</id><snippet>callable</snippet></ROW><ROW><id>20745723</id><snippet>repr(path).decode('unicode-escape')
</snippet></ROW><ROW><id>20745723</id><snippet>listdir</snippet></ROW><ROW><id>20745723</id><snippet>os.listdir(u'.')</snippet></ROW><ROW><id>20745723</id><snippet>os.listdir(root.decode('utf-8')):</snippet></ROW><ROW><id>20745723</id><snippet>from unicodedata import normalize
out_str = normalize('NFKD', in_str).encode('ascii', 'ignore').decode('ascii')
</snippet></ROW><ROW><id>20745787</id><snippet>_here = os.path.dirname(os.path.abspath(__file__))

def create_key():    
    filename = os.path.join(_here, 'passfile.txt')
    if os.path.isfile(filename):
        # exists
        with open(filename) as passfile:
            secret = passfile.read().strip()
    else:
        # create a new key
        secret = ''.join([str(randint(1, i + 8)) for i in range(8)])
        with open(filename, 'w') as passfile:
            secret = passfile.write(secret)
</snippet></ROW><ROW><id>20745787</id><snippet>_here</snippet></ROW><ROW><id>20745787</id><snippet>os.path.isfile()</snippet></ROW><ROW><id>20745958</id><snippet>process1</snippet></ROW><ROW><id>20745958</id><snippet>process2</snippet></ROW><ROW><id>20745958</id><snippet>import subprocess
from subprocess import PIPE

proc1 = subprocess.Popen(some_programm, stdout=PIPE, ...) # The others arguments where omitted for brevity.
proc2 = subprocess.Popen(some_other_program, stdin=proc1.stdout, ...) # The others arguments where omitted for brevity.
</snippet></ROW><ROW><id>20745958</id><snippet>proc2</snippet></ROW><ROW><id>20745958</id><snippet>proc2</snippet></ROW><ROW><id>20746027</id><snippet>enctype</snippet></ROW><ROW><id>20746027</id><snippet>form</snippet></ROW><ROW><id>20746027</id><snippet>&lt;form action="" method="post" enctype="multipart/form-data"&gt;
</snippet></ROW><ROW><id>20746160</id><snippet>request.GET</snippet></ROW><ROW><id>20746160</id><snippet>/blog/posts/&lt;post_id&gt;/</snippet></ROW><ROW><id>20746160</id><snippet>/blog/posts/?post_id=&lt;post_id&gt;</snippet></ROW><ROW><id>20746277</id><snippet>return</snippet></ROW><ROW><id>20746382</id><snippet>something = obj.attribute
</snippet></ROW><ROW><id>20746382</id><snippet>obj.attribute = something_else
</snippet></ROW><ROW><id>20746382</id><snippet>attribute</snippet></ROW><ROW><id>20746621</id><snippet>import re
from pprint import pprint

thestr = "(x=1, y = 2, z = 3 ) (a = 1) (m = 4, n = 6, o = 2)"
groups = re.findall(r'\([^)]+\)', thestr)
matches = []

for group in groups:
    matches.append(re.findall(r'(\w+)\s*=\s*(\d+)', group))

pprint(matches)
</snippet></ROW><ROW><id>20746621</id><snippet>[[('x', '1'), ('y', '2'), ('z', '3')],
 [('a', '1')],
 [('m', '4'), ('n', '6'), ('o', '2')]]
</snippet></ROW><ROW><id>20746650</id><snippet>&gt;&gt;&gt; Pickaxes = {
 'adamant pickaxe': {'cost': 100, 'speed': 5},
 'bronze pickaxe': {'cost': 100, 'speed': 5},
 'dragon pickaxe': {'cost': 100, 'speed': 5},
 'inferno adze': {'cost': 100, 'speed': 5},
 'iron pickaxe': {'cost': 100, 'speed': 5},
 'mithril pickaxe': {'cost': 100, 'speed': 5},
 'rune pickaxe': {'cost': 100, 'speed': 5},
 'steel pickaxe': {'cost': 100, 'speed': 5}}

&gt;&gt;&gt; for axe, values in Pickaxes.items():
    print '{} - costs: {}, speed: {}'.format(axe, values['cost'], values['speed'])

bronze pickaxe - costs: 100, speed: 5
mithril pickaxe - costs: 100, speed: 5
adamant pickaxe - costs: 100, speed: 5
steel pickaxe - costs: 100, speed: 5
iron pickaxe - costs: 100, speed: 5
rune pickaxe - costs: 100, speed: 5
dragon pickaxe - costs: 100, speed: 5
inferno adze - costs: 100, speed: 5
</snippet></ROW><ROW><id>20746650</id><snippet>&gt;&gt;&gt; Pickaxes = {
 'adamant pickaxe': {'name': 'adamant pickaxe', 'cost': 100, 'speed': 5},
 'bronze pickaxe': {'name': 'bronze pickaxe', 'cost': 100, 'speed': 5},
 'dragon pickaxe': {'name': 'dragon pickaxe', 'cost': 100, 'speed': 5},
 'inferno adze': {'name': 'inferno pickaxe', 'cost': 100, 'speed': 5},
 'iron pickaxe': {'name': 'iron pickaxe', 'cost': 100, 'speed': 5},
 'mithril pickaxe': {'name': 'mithril pickaxe', 'cost': 100, 'speed': 5},
 'rune pickaxe': {'name': 'rune pickaxe', 'cost': 100, 'speed': 5},
 'steel pickaxe': {'name': 'steel pickaxe', 'cost': 100, 'speed': 5}}

&gt;&gt;&gt; for axe in Pickaxes.values():
    print '{name} - costs: {cost}, speed: {speed}'.format(**axe)


bronze pickaxe - costs: 100, speed: 5
mithril pickaxe - costs: 100, speed: 5
adamant pickaxe - costs: 100, speed: 5
steel pickaxe - costs: 100, speed: 5
iron pickaxe - costs: 100, speed: 5
rune pickaxe - costs: 100, speed: 5
dragon pickaxe - costs: 100, speed: 5
inferno pickaxe - costs: 100, speed: 5
</snippet></ROW><ROW><id>20746806</id><snippet>&gt;&gt;&gt; variables = {}
&gt;&gt;&gt; for i in xrange(0, 7):
...     variables['result%s' % i] = [1000 + i]
...
&gt;&gt;&gt; variables
{'result6': [1006], 'result4': [1004], 'result5': [1005], 'result2': [1002], 'result3': [1003], 'result0': [1000], 'result1': [1001]}
&gt;&gt;&gt; variables['result2']
[1002]
&gt;&gt;&gt; variables['result6']
[1006]
</snippet></ROW><ROW><id>20746862</id><snippet>&gt;H</snippet></ROW><ROW><id>20746862</id><snippet>&gt;u2</snippet></ROW><ROW><id>20746862</id><snippet>np.memmap('test.bin', dtype=np.dtype('&gt;u2'), mode='r')
</snippet></ROW><ROW><id>20747199</id><snippet>file = models.FileField(upload_to= "/static/file/")
</snippet></ROW><ROW><id>20747199</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>20747199</id><snippet>upload_to</snippet></ROW><ROW><id>20747199</id><snippet>C:/Users/User/Desktop/site_is/app_is/static/file/</snippet></ROW><ROW><id>20747199</id><snippet>file = models.FileField(upload_to= ".")
</snippet></ROW><ROW><id>20747387</id><snippet>somearray.view(new_dtype)</snippet></ROW><ROW><id>20747387</id><snippet>astype</snippet></ROW><ROW><id>20747387</id><snippet>view</snippet></ROW><ROW><id>20747387</id><snippet>view</snippet></ROW><ROW><id>20747387</id><snippet>In [1]: import numpy as np

In [2]: x = np.arange(10)

In [3]: x
Out[3]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [4]: x.dtype
Out[4]: dtype('int64')

In [5]: x.view(np.int32)
Out[5]: array([0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0],
              dtype=int32)

In [6]: x.view(np.float64)
Out[6]:
array([  0.00000000e+000,   4.94065646e-324,   9.88131292e-324,
         1.48219694e-323,   1.97626258e-323,   2.47032823e-323,
         2.96439388e-323,   3.45845952e-323,   3.95252517e-323,
         4.44659081e-323])
</snippet></ROW><ROW><id>20747387</id><snippet>astype</snippet></ROW><ROW><id>20747387</id><snippet>In [7]: x
Out[7]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [8]: x.astype(np.int32)
Out[8]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=int32)

In [9]: x.astype(float)
Out[9]: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])
</snippet></ROW><ROW><id>20747387</id><snippet>astype</snippet></ROW><ROW><id>20747387</id><snippet>astype</snippet></ROW><ROW><id>20747387</id><snippet>pandas</snippet></ROW><ROW><id>20747387</id><snippet>pandas</snippet></ROW><ROW><id>20747436</id><snippet>def update_votes(song_id):
    song = Song.objects.get(id=song_id)
    song.votes += 1
    song.save()
</snippet></ROW><ROW><id>20747436</id><snippet>@dajaxice_register
def disable_button(request, song_id):
    update_votes(song_id)
    #disable the buttons
    return #whatever
</snippet></ROW><ROW><id>20747513</id><snippet>draw.ellipse((20, 20, 180, 180), fill = 'blue', outline ='blue')
</snippet></ROW><ROW><id>20747629</id><snippet>:edit</snippet></ROW><ROW><id>20747629</id><snippet>%</snippet></ROW><ROW><id>20747629</id><snippet>expand()</snippet></ROW><ROW><id>20747629</id><snippet>:PyInteractiveEval</snippet></ROW><ROW><id>20747629</id><snippet>:execute 'PyInteractiveEval execfile(' . string(expand('%:p')) . ')'
</snippet></ROW><ROW><id>20747736</id><snippet>test_main</snippet></ROW><ROW><id>20747736</id><snippet>import sys
import test_wdw
from PySide import QtGui
from PySide import QtCore

class Main_Window(QtGui.QMainWindow):
    def __init__(self):
        super(Main_Window,self).__init__()
        self.initUI()

    def initUI(self):
        self.statusBar()

        self.new_window=QtGui.QAction("&amp;Window alpha",self)
        self.new_window.triggered.connect(self.open_window)

        self.menu_bar=self.menuBar()
        self.menu1=self.menu_bar.addMenu('&amp;Menu 1')
        self.menu1.addAction(self.new_window)

        # Creates a QMdiArea to manage all windows
        self.wmanager=QtGui.QMdiArea()
        self.setCentralWidget(self.wmanager)

        # Shows the main window
        self.showMaximized()

    def open_window(self):
        test_wdw.launch_window()
        test_wdw.window_alpha=self.wmanager.addSubWindow(test_wdw.window)
        # Shows the new window
        test_wdw.window_alpha.show()

def main():
    app=QtGui.QApplication(sys.argv)
    main_wdw=Main_Window()
    sys.exit(app.exec_())

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>20747736</id><snippet>test_wdw</snippet></ROW><ROW><id>20747736</id><snippet>from PySide import QtGui
from PySide import QtCore

def launch_window():
    global window
    # Creates a new window
    window=QtGui.QWidget()
    window.setAttribute(QtCore.Qt.WA_DeleteOnClose)
    window.setWindowTitle('Window 1')
    # Creates a layout for the window and populates it with a Qlabel
    window.grid=QtGui.QGridLayout()
    window.label=QtGui.QLabel("Hello")
    window.grid.addWidget(window.label,0,0)
    # Sets the layout to the window and sets the size of the window
    window.setLayout(window.grid)
    window.setFixedSize(window.sizeHint())
    # Starts the thread
    myThread.start()

class running_operation(QtCore.QObject):

    # Creates a QtCore Signal for when the operation is over (if you want something to happen when the function ends processing)
    finish_operation=QtCore.Signal()
    # Wraps the function to run inside a QtCore Slot (MANDATORY !)
    @QtCore.Slot()
    # Function I wanted to run in a separate thread ! NOW IT RUNS !
    def run_operation(self):
        global counter
        counter=0
        # Setting a timer that fires every second and calling at the same time the function print_counter()
        global timer
        timer=QtCore.QTimer(self)
        timer.timeout.connect(self.print_counter)
        timer.start(1000)

    def print_counter(self):
        global counter
        global timer
        # A random function to execute just for testing purposes, the counter keeps counting up every second.
        if counter &lt;= 3 :
            counter += 1
            print(counter)
        elif counter == 4 :
        # At seconds, we emit the finish_operation signal.
            counter += 1
            self.finish_operation.emit()
        # At 5 seconds and more, the counter keeps counting up again every second (just to check if the thread actually exited)
        else:
            counter += 1
            print(counter)


# Creates a new thread
myThread=QtCore.QThread()
# Creates the object "operations"
operations = running_operation()
# Moves the object to the thread
operations.moveToThread(myThread)
# Connects the QThread.started signal function to the run_operation() function.
myThread.started.connect(operations.run_operation)
# Connects the finish_operation signal to quitting the thread.
operations.finish_operation.connect(myThread.quit)
</snippet></ROW><ROW><id>20747736</id><snippet>print_counter()</snippet></ROW><ROW><id>20747838</id><snippet>for b in blocks:
    while b.rect.collidepoint(px,py):
        px=randrange(1,640)
        py=randrange(1,480)
</snippet></ROW><ROW><id>20747838</id><snippet>while any(b.rect.collidepoint(px, py) for b in blocks): 
</snippet></ROW><ROW><id>20747907</id><snippet>if not (os.path.exists(file1) and os.access(file1, os.R_OK)):
   print "file1 does not exists or not readable"
   sys.exit(1)
else:
   //good to go
</snippet></ROW><ROW><id>20747971</id><snippet>for stat in Character.stats:
    setattr(self, stat, parser.get(self.char_class, stat))
</snippet></ROW><ROW><id>20747971</id><snippet>for stat in Character.stats:
    self.__dict__[stat] = parser.get(self.char_class, stat))
</snippet></ROW><ROW><id>20748018</id><snippet>contour</snippet></ROW><ROW><id>20748018</id><snippet>collections[0]</snippet></ROW><ROW><id>20748018</id><snippet>skimage.measure.find_contours</snippet></ROW><ROW><id>20748018</id><snippet>import numpy as np
from skimage.measure import find_contours

data = np.random.random((10,10))
contours = find_contours(data, 0.5)
for xy in contours:
    x, y = xy.T
    perim = np.hypot(np.diff(x), np.diff(y)).sum()
</snippet></ROW><ROW><id>20748308</id><snippet>literal_eval</snippet></ROW><ROW><id>20748308</id><snippet>literal_eval</snippet></ROW><ROW><id>20748308</id><snippet>literal_eval</snippet></ROW><ROW><id>20748308</id><snippet>literal_eval</snippet></ROW><ROW><id>20748308</id><snippet>repr</snippet></ROW><ROW><id>20748308</id><snippet>eval</snippet></ROW><ROW><id>20748308</id><snippet>import ast, operator

binOps = {
    ast.Add: operator.add,
    ast.Sub: operator.sub,
    ast.Mult: operator.mul,
    ast.Div: operator.div,
    ast.Mod: operator.mod
}

def arithmeticEval (s):
    node = ast.parse(s, mode='eval')

    def _eval(node):
        if isinstance(node, ast.Expression):
            return _eval(node.body)
        elif isinstance(node, ast.Str):
            return node.s
        elif isinstance(node, ast.Num):
            return node.n
        elif isinstance(node, ast.BinOp):
            return binOps[type(node.op)](_eval(node.left), _eval(node.right))
        else:
            raise Exception('Unsupported type {}'.format(node))

    return _eval(node.body)
</snippet></ROW><ROW><id>20748308</id><snippet>&gt;&gt;&gt; arithmeticEval('4+2')
6
&gt;&gt;&gt; arithmeticEval('4*1+2*6/3')
8
</snippet></ROW><ROW><id>20748323</id><snippet>self.value = value,
</snippet></ROW><ROW><id>20748323</id><snippet>value</snippet></ROW><ROW><id>20748323</id><snippet>&gt;&gt;&gt; 3
3
&gt;&gt;&gt; 3,
(3,)
</snippet></ROW><ROW><id>20748323</id><snippet>self.value</snippet></ROW><ROW><id>20748323</id><snippet>tuple</snippet></ROW><ROW><id>20748323</id><snippet>int</snippet></ROW><ROW><id>20748644</id><snippet>QDialog</snippet></ROW><ROW><id>20748644</id><snippet>class MyWindow(QtWidgets.QDialog):
    def __init__(self, *args, **kwargs):
        super(MyWindow, self).__init__(*args, **kwargs)
        self.txt_input = QtWidgets.QLineEdit()
        self.btn_submit = QtWidgets.QPushButton('&amp;Отправить')
        self.vbox = QtWidgets.QVBoxLayout()
        self.vbox.addWidget(self.txt_input)
        self.vbox.addWidget(self.btn_submit)
        self.setLayout(self.vbox)  
</snippet></ROW><ROW><id>20748644</id><snippet>def get_value(arg):
    self.arg = arg
    if arg == 0:
        self.window.btn_submit.connect(check_value)
        self.window.exec_()
</snippet></ROW><ROW><id>20748696</id><snippet>py_list</snippet></ROW><ROW><id>20748696</id><snippet>PyObject</snippet></ROW><ROW><id>20748696</id><snippet>nullptr</snippet></ROW><ROW><id>20748696</id><snippet>None</snippet></ROW><ROW><id>20748696</id><snippet>boost::python::object</snippet></ROW><ROW><id>20748696</id><snippet>boost::python::list</snippet></ROW><ROW><id>20748696</id><snippet>other_class</snippet></ROW><ROW><id>20748696</id><snippet>&gt;&gt;&gt; a = ['spam']
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b
['spam']
&gt;&gt;&gt; a is b
True
</snippet></ROW><ROW><id>20748696</id><snippet>&gt;&gt;&gt; a = ['spam']
&gt;&gt;&gt; b = a[:]
&gt;&gt;&gt; b
['spam']
&gt;&gt;&gt; a is b
False
</snippet></ROW><ROW><id>20748696</id><snippet>#include &lt;iostream&gt;
#include &lt;boost/python.hpp&gt;

/// @brief Mockup class.
struct other_class
{
  boost::python::list py_list;
};

/// @brief Helper function to print object id and its string representation.
std::string to_string(boost::python::object&amp; o)
{
  std::stringstream stream;
  stream &lt;&lt; o.ptr() &lt;&lt; " = "
         &lt;&lt; boost::python::extract&lt;std::string&gt;(o.attr("__str__")())();
  return stream.str();
}

int main()
{
  using std::cout;
  using std::endl;
  namespace python = boost::python;

  Py_Initialize();
  try
  {
    python::object object;                            // object = None
    cout &lt;&lt; to_string(object) &lt;&lt; "\n"                 // print object
         &lt;&lt; "  is none check: " &lt;&lt; object.is_none()   // print object is None
         &lt;&lt; endl;

    // Create other_class and populate its list.
    other_class* c = new other_class();               // py_list = []
    cout &lt;&lt; "c-&gt;py_list: " &lt;&lt; to_string(c-&gt;py_list)   // print py_list
         &lt;&lt; endl;
    c-&gt;py_list.append("spam");                        // py_list.append("spam")
    cout &lt;&lt; "c-&gt;py_list: " &lt;&lt; to_string(c-&gt;py_list)   // print py_list
         &lt;&lt; endl;

    // Have list1 reference c-&gt;py_list.
    python::list list1;                                // list1 = []
    cout &lt;&lt; "list1: " &lt;&lt; to_string(list1) &lt;&lt; "\n"      // print list1
         &lt;&lt; "assign py_list to list1" &lt;&lt; endl;
    list1 = c-&gt;py_list;                                // list1 = py_list
    cout &lt;&lt; "list1: " &lt;&lt; to_string(list1) &lt;&lt; endl;     // print list1

    // Modify list1 and observe effects on pylist.
    cout &lt;&lt; "modify list1" &lt;&lt; endl;
    list1.append(42);                                 // list1.append(42)
    cout &lt;&lt; "c-&gt;py_list: " &lt;&lt; to_string(c-&gt;py_list)   // print py_list
         &lt;&lt; endl;

    // Shallow-copy list1.
    cout &lt;&lt; "copying list1 into list2" &lt;&lt; endl;
    python::list list2(
        list1.slice(python::_, python::_));            // list2 = list1[:]
    list2.append("eggs");                              // list2.append("eggs")
    cout &lt;&lt; "list2: " &lt;&lt; to_string(list2) &lt;&lt; "\n"      // print list2
         &lt;&lt; "list1: " &lt;&lt; to_string(list1) &lt;&lt; endl;     // print list1

    delete c;
  }
  catch (python::error_already_set&amp;)
  {
    PyErr_Print();
  }
}
</snippet></ROW><ROW><id>20748696</id><snippet>0x804e1ac = None
  is none check: 1
c-&gt;py_list: 0xb707024c = []
c-&gt;py_list: 0xb707024c = ['spam']
list1: 0xb70da98c = []
assign py_list to list1
list1: 0xb707024c = ['spam']
modify list1
c-&gt;py_list: 0xb707024c = ['spam', 42]
copying list1 into list2
list2: 0xb707cb0c = ['spam', 42, 'eggs']
list1: 0xb707024c = ['spam', 42]
</snippet></ROW><ROW><id>20748696</id><snippet>boost::python::list</snippet></ROW><ROW><id>20748696</id><snippet>0x804e1ac</snippet></ROW><ROW><id>20748696</id><snippet>None</snippet></ROW><ROW><id>20748696</id><snippet>PyObject</snippet></ROW><ROW><id>20748696</id><snippet>list1 = py_list</snippet></ROW><ROW><id>20748696</id><snippet>list1</snippet></ROW><ROW><id>20748696</id><snippet>py_list</snippet></ROW><ROW><id>20748696</id><snippet>list1</snippet></ROW><ROW><id>20748696</id><snippet>0xb70da98c</snippet></ROW><ROW><id>20748696</id><snippet>0xb707024c</snippet></ROW><ROW><id>20748696</id><snippet>list1</snippet></ROW><ROW><id>20748696</id><snippet>py_list</snippet></ROW><ROW><id>20748696</id><snippet>PyObject</snippet></ROW><ROW><id>20748696</id><snippet>list2</snippet></ROW><ROW><id>20748696</id><snippet>0xb707cb0c</snippet></ROW><ROW><id>20748696</id><snippet>list1</snippet></ROW><ROW><id>20748696</id><snippet>0xb707024c</snippet></ROW><ROW><id>20748785</id><snippet>for line in request.split("\n"):
    if "Sec-WebSocket-Key:" in line:
        websocketkey = line.split(" ")[1]
</snippet></ROW><ROW><id>20748785</id><snippet>"\r"</snippet></ROW><ROW><id>20748785</id><snippet>Client Key: "yLffHPqMU4gIW2WnKq+4BQ=="
Server Key: YVjKqlMRxlzzM70LScN9VoCsboI=
</snippet></ROW><ROW><id>20748785</id><snippet>Client Key: "yLffHPqMU4gIW2WnKq+4BQ==\r"
Server Key: A0eCd19URtkji0OPV162okWsCns=
</snippet></ROW><ROW><id>20749220</id><snippet>*params</snippet></ROW><ROW><id>20749220</id><snippet>coordinates = lambda_mapping[key](argument)
viewport_set(*coordinates)
</snippet></ROW><ROW><id>20749220</id><snippet>coordinates</snippet></ROW><ROW><id>20749220</id><snippet>viewport_set()</snippet></ROW><ROW><id>20749220</id><snippet>&gt;&gt;&gt; def foo(x, y):
...     print(x, y)
... 
&gt;&gt;&gt; coordinates = (42, 38)
&gt;&gt;&gt; foo(*coordinates)
42 38
</snippet></ROW><ROW><id>20749220</id><snippet>def viewport_set(x, y=None):
    if y is None:
        # assume x is a sequence of two coordinates instead
        x, y = x
</snippet></ROW><ROW><id>20749322</id><snippet>def get_form_initial(self, step):
    initial = {}
    if step == 1:
        client_pk = self.kwargs.get('client_pk')
        initial.update({
            'client': Client.objects.get(pk=client_pk)
        })
    return self.initial_dict.get(step, initial)
</snippet></ROW><ROW><id>20749534</id><snippet>create_all()</snippet></ROW><ROW><id>20749534</id><snippet>from flask import Flask
from flask.ext.sqlalchemy import SQLAlchemy

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True)
    email = db.Column(db.String(120), unique=True)

    def __init__(self, username, email):
        self.username = username
        self.email = email

    def __repr__(self):
        return '&lt;User %r&gt;' % self.username

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql+psycopg2://login:pass@localhost/flask_app'
db = SQLAlchemy(app)
db.create_all()
db.session.commit()

admin = User('admin', 'admin@example.com')
guest = User('guest', 'guest@example.com')
db.session.add(admin)
db.session.add(guest)
db.session.commit()
users = User.query.all()
print users
</snippet></ROW><ROW><id>20749534</id><snippet>create_all()</snippet></ROW><ROW><id>20749714</id><snippet>this</snippet></ROW><ROW><id>20749714</id><snippet>self</snippet></ROW><ROW><id>20749714</id><snippet>self.handle</snippet></ROW><ROW><id>20749714</id><snippet>handle</snippet></ROW><ROW><id>20749874</id><snippet>b = np.asarray(a, dtype=float)
#to get the same shape do.
b = b.reshape(-1, len(b)) 
#to just get one dimmension do. 
b = np.asarray(a, dtype=float).reshape(len(a))
</snippet></ROW><ROW><id>20750052</id><snippet>from collections import defaultdict

COUNTER = defaultdict(lambda : -1)
def next_i(counter_id=0):
    """Return a new ID"""
    global COUNTER
    COUNTER[counter_id] += 1
    return COUNTER[counter_id]

id_generator = defaultdict(lambda : next_i(0))

my_string = "an example sentence with an example repetition."
my_ids = [id_generator[t] for t in my_string.lower().split()]
print my_ids
&gt;&gt;&gt; [0, 1, 2, 3, 0, 1, 4]
</snippet></ROW><ROW><id>20750055</id><snippet>hsv_img = cv2.cvtColor(self.img, cv2.COLOR_BGR2HSV)
</snippet></ROW><ROW><id>20750055</id><snippet>scn</snippet></ROW><ROW><id>20750055</id><snippet>self.img.channels()</snippet></ROW><ROW><id>20750055</id><snippet>depth</snippet></ROW><ROW><id>20750055</id><snippet>self.img.depth()</snippet></ROW><ROW><id>20750055</id><snippet>cvtColor()</snippet></ROW><ROW><id>20750055</id><snippet>cvtColor()</snippet></ROW><ROW><id>20750169</id><snippet>ur'[\w\ufb50-\ufdff]'
</snippet></ROW><ROW><id>20750169</id><snippet>ur'[\w\u0600-\u06ff\u0750-\u077f\u08a0-\u08ff\ufb50-\ufdff\ufe70-\ufeff]'
</snippet></ROW><ROW><id>20750169</id><snippet>re.findall</snippet></ROW><ROW><id>20750169</id><snippet>findall</snippet></ROW><ROW><id>20750189</id><snippet>draw.text((20,10), "count: %s" % x, fill=1)
</snippet></ROW><ROW><id>20750329</id><snippet>test_runner.py</snippet></ROW><ROW><id>20750329</id><snippet>runner.py</snippet></ROW><ROW><id>20750401</id><snippet>time.sleep(20)</snippet></ROW><ROW><id>20750401</id><snippet>reactor.callLater(N, someFunction)</snippet></ROW><ROW><id>20750401</id><snippet>sleep</snippet></ROW><ROW><id>20750425</id><snippet>a = int(100/3) # this will round down to 3
b = 100/3 # b = 33.333333333333336, a and b are not equal

so we can generalize into the following

def ceil(a, b):
    if (b == 0):
        raise Exception("Division By Zero Error!!") # throw an division by zero error
    if int(a/b) != a/b:
        return int(a/b) + 1
    return int(a/b)
</snippet></ROW><ROW><id>20750495</id><snippet>/path/to/wherever/you/cloned/Project</snippet></ROW><ROW><id>20750495</id><snippet>sys.path</snippet></ROW><ROW><id>20750495</id><snippet>__init__.py</snippet></ROW><ROW><id>20750495</id><snippet>Project/Client</snippet></ROW><ROW><id>20750495</id><snippet>Project/Server</snippet></ROW><ROW><id>20750495</id><snippet>Project/Shared</snippet></ROW><ROW><id>20750554</id><snippet>super(Main1,self).__init__(master)
</snippet></ROW><ROW><id>20750554</id><snippet>def create_wdgts(self):
</snippet></ROW><ROW><id>20750554</id><snippet>self.pointbttn["command"]= self.pointhndlr()
</snippet></ROW><ROW><id>20750554</id><snippet>self.pointhndlr</snippet></ROW><ROW><id>20750554</id><snippet>self.pointbttn["command"]</snippet></ROW><ROW><id>20750554</id><snippet>self.pointhndlr</snippet></ROW><ROW><id>20750554</id><snippet>self.pointbttn["command"]</snippet></ROW><ROW><id>20750554</id><snippet>self.pointbttn["command"]= self.pointhndlr
</snippet></ROW><ROW><id>20750567</id><snippet>SyntaxError</snippet></ROW><ROW><id>20750567</id><snippet>raise</snippet></ROW><ROW><id>20750567</id><snippet>&gt;&gt;&gt; raise TypeError, 'error'
  File "&lt;stdin&gt;", line 1
    raise TypeError, 'error'
                   ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>20750567</id><snippet>&gt;&gt;&gt; raise TypeError('error')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: error
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20750700</id><snippet>def WriteAddressToFile():
    theFile = open("ServerList.txt")

    for line in theFile:
      if line == server:
        theFile.close()
      else:
        theFile.close()

        theFile = open("ServerList.txt", "a")
        theFile.write(server + "\n")
        theFile.close()
</snippet></ROW><ROW><id>20750700</id><snippet>theFile = open("ServerList.txt")
</snippet></ROW><ROW><id>20750702</id><snippet>// lets say we have 4 directions
// we generate random number for it    

int randomDirection = Random.Next(0, 4);

// 0:MoveUp()
// 1:MoveDown()
// 2:MoveLeft()
// 3:MoveRight()

// then we check what random direction number we got 
// and execute specific method for it

switch(randomDirection)
{
    case 0:
    player.MoveUp();
    break;

    case 1:
    player.MoveDown();
    break;

    case 3:
    player.MoveDown();
    break;

    case 4:
    player.MoveDown();
    break;
}
</snippet></ROW><ROW><id>20750704</id><snippet>[1, -6, 3, 2]</snippet></ROW><ROW><id>20750704</id><snippet>"2x^3 + 3x^2 - 6x + 1"</snippet></ROW><ROW><id>20750704</id><snippet>class Polynomial(list): 
    def __repr__(self):
        # joiner[first, negative] = str
        joiner = {
            (True, True): '-',
            (True, False): '',
            (False, True): ' - ',
            (False, False): ' + '
        }

        result = []
        for power, coeff in reversed(list(enumerate(self))):
            j = joiner[not result, coeff &lt; 0]
            coeff = abs(coeff)
            if coeff == 1 and power != 0:
                coeff = ''

            f = {0: '{}{}', 1: '{}{}x'}.get(power, '{}{}x^{}')

            result.append(f.format(j, coeff, power))

        return ''.join(result) or '0'
</snippet></ROW><ROW><id>20750704</id><snippet>&gt;&gt;&gt; Polynomial([1, -6, 3, 2])
2x^3 + 3x^2 - 6x + 1
&gt;&gt;&gt; Polynomial([1, -6, 3, -2])
-2x^3 + 3x^2 - 6x + 1
&gt;&gt;&gt; Polynomial([])
0
</snippet></ROW><ROW><id>20750758</id><snippet>handler(request, *args, **kwargs)</snippet></ROW><ROW><id>20750758</id><snippet>dispatch</snippet></ROW><ROW><id>20750758</id><snippet>post</snippet></ROW><ROW><id>20750758</id><snippet># django.views.generic.base.py:
def dispatch(self, request, *args, **kwargs):
    # Try to dispatch to the right method; if a method doesn't exist,
    # defer to the error handler. Also defer to the error handler if the
    # request method isn't on the approved list.
    if request.method.lower() in self.http_method_names:
        handler = getattr(self, request.method.lower(), self.http_method_not_allowed)
    else:
        handler = self.http_method_not_allowed
    return handler(request, *args, **kwargs)
</snippet></ROW><ROW><id>20750758</id><snippet>    ajax_req = $.ajax({
        url: self.attr("href"),
        ...
</snippet></ROW><ROW><id>20750758</id><snippet>post</snippet></ROW><ROW><id>20751003</id><snippet>foo</snippet></ROW><ROW><id>20751003</id><snippet>my_dictionary['keys']['to']['subdict']=foo
</snippet></ROW><ROW><id>20751003</id><snippet>def drop_keys(recursive_dict,keep_list):
    key_list=recursive_dict.keys()
    for key in key_list:
        if(type(recursive_dict[key]) is dict):
            drop_keys(recursive_dict[key], keep_list)
        elif(key not in keep_list):
            del recursive_dict[key]
</snippet></ROW><ROW><id>20751100</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; my_array = numpy.array([[1,2],[3,4]])
&gt;&gt;&gt; pd.DataFrame(my_array, columns=list('cd'), index=list('ab'))
   c  d
a  1  2
b  3  4
</snippet></ROW><ROW><id>20751169</id><snippet>urlopen</snippet></ROW><ROW><id>20751169</id><snippet>urllib.request</snippet></ROW><ROW><id>20751169</id><snippet>&gt;&gt;&gt; from urllib.request import urlopen
&gt;&gt;&gt; urlopen
&lt;function urlopen at 0x020DA7C8&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20751169</id><snippet>from urllib.request import urlopen
page = urlopen('http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345').read()
print(page)
</snippet></ROW><ROW><id>20751223</id><snippet>dict</snippet></ROW><ROW><id>20751223</id><snippet>**name</snippet></ROW><ROW><id>20751223</id><snippet>args = {}

args['name__contains'] = cd['name']

if cd['subject'] is not None:
    args['subject'] = cd['subject']
if cd['school'] != '':
    args['school'] = cd['school']
if cd['price']:
    args['price'] = cd['price']

files = File.objects.filter(**args)
return render(request, 'search.html', {'files': files, 'request': request})
</snippet></ROW><ROW><id>20751388</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>20751388</id><snippet>multiprocessing.sharedctypes</snippet></ROW><ROW><id>20751388</id><snippet>Structure</snippet></ROW><ROW><id>20751388</id><snippet>mmap</snippet></ROW><ROW><id>20751388</id><snippet>Array</snippet></ROW><ROW><id>20751388</id><snippet>multiprocessing.Lock</snippet></ROW><ROW><id>20751388</id><snippet>JoinableQueue</snippet></ROW><ROW><id>20751388</id><snippet>Pool</snippet></ROW><ROW><id>20751388</id><snippet>a = [[0,1,2], [3,4,5], [6,7,8], [9,10,11]]
with multiprocessing.Pool() as pool:
    b = pool.map(reversed, a, chunksize=1)
    c = [list(i) for i in b]
</snippet></ROW><ROW><id>20751388</id><snippet>a</snippet></ROW><ROW><id>20751388</id><snippet>list</snippet></ROW><ROW><id>20751453</id><snippet>.get()</snippet></ROW><ROW><id>20751453</id><snippet>EventModel.all()</snippet></ROW><ROW><id>20751453</id><snippet>userevents</snippet></ROW><ROW><id>20751453</id><snippet>count()</snippet></ROW><ROW><id>20751453</id><snippet>.get()</snippet></ROW><ROW><id>20751541</id><snippet>returnedID = str(respond[itr][0])
</snippet></ROW><ROW><id>20751541</id><snippet>response</snippet></ROW><ROW><id>20751541</id><snippet>[(1, 'TEST', './data/test', 'test,testing'), (2, 'WORKS!', './data/works.snip', 'work,works')]
</snippet></ROW><ROW><id>20751541</id><snippet>respond</snippet></ROW><ROW><id>20751541</id><snippet>response</snippet></ROW><ROW><id>20751541</id><snippet>(1, 'TEST', './data/test', 'test,testing')
</snippet></ROW><ROW><id>20751541</id><snippet>itr</snippet></ROW><ROW><id>20751541</id><snippet>int(respond[0]) - 1</snippet></ROW><ROW><id>20751541</id><snippet>0</snippet></ROW><ROW><id>20751541</id><snippet>respond[itr]</snippet></ROW><ROW><id>20751541</id><snippet>1</snippet></ROW><ROW><id>20751541</id><snippet>respond[itr][0]</snippet></ROW><ROW><id>20751541</id><snippet>1[0]</snippet></ROW><ROW><id>20751541</id><snippet>itr</snippet></ROW><ROW><id>20751541</id><snippet>respond[0]</snippet></ROW><ROW><id>20751541</id><snippet>respond["0"]</snippet></ROW><ROW><id>20751541</id><snippet>returnedID = str(respond[itr][0])</snippet></ROW><ROW><id>20751541</id><snippet>thingy = respond[itr]
returned_id_as_int = thingy[0]
returned_id = str(returned_id_as_int)
</snippet></ROW><ROW><id>20751541</id><snippet>print</snippet></ROW><ROW><id>20751541</id><snippet>repr</snippet></ROW><ROW><id>20751541</id><snippet>type</snippet></ROW><ROW><id>20751541</id><snippet>response[itr]</snippet></ROW><ROW><id>20751541</id><snippet>respond[itr]</snippet></ROW><ROW><id>20751541</id><snippet>response[itr]</snippet></ROW><ROW><id>20751541</id><snippet>respond</snippet></ROW><ROW><id>20751541</id><snippet>response[itr]</snippet></ROW><ROW><id>20751541</id><snippet>respond[0]</snippet></ROW><ROW><id>20751541</id><snippet>itr</snippet></ROW><ROW><id>20751647</id><snippet>calculateMark()</snippet></ROW><ROW><id>20751711</id><snippet>if n == 1:
    return fn
</snippet></ROW><ROW><id>20751711</id><snippet>repeat(fn, 1)</snippet></ROW><ROW><id>20751711</id><snippet>fn</snippet></ROW><ROW><id>20751711</id><snippet>fn</snippet></ROW><ROW><id>20751711</id><snippet>n == 1</snippet></ROW><ROW><id>20751711</id><snippet>n - 1</snippet></ROW><ROW><id>20751711</id><snippet>repeat(fn, n)</snippet></ROW><ROW><id>20751711</id><snippet>repeat(fn, n-1)</snippet></ROW><ROW><id>20751711</id><snippet>repeat(fn, 3)(x): fn(fn(fn(x)))
repeat(fn, 2)(x): fn(fn(x))
</snippet></ROW><ROW><id>20751711</id><snippet>repeat(fn, n)</snippet></ROW><ROW><id>20751711</id><snippet>fn(repeat(fn, n-1))</snippet></ROW><ROW><id>20751711</id><snippet>else:
    def new_fn(x):
        return fn(repeat(fn, n-1)(x))
    return new_fn
</snippet></ROW><ROW><id>20751711</id><snippet>partial</snippet></ROW><ROW><id>20751711</id><snippet>def repeat3(fn, n, x):
    if n == 1:
        return fn(x)
    else:
        return fn(repeat3(fn, n-1, x))

def repeat(fn, n):
    return functools.partial(repeat3, fn, n)
</snippet></ROW><ROW><id>20752155</id><snippet>from PyQt5 import QtCore, QtGui, QtWidgets

class MainWindow(QtWidgets.QMainWindow, UI.MainUI.Ui_MainWindow):
    ...
</snippet></ROW><ROW><id>20752197</id><snippet>requests</snippet></ROW><ROW><id>20752197</id><snippet>requests</snippet></ROW><ROW><id>20752197</id><snippet>'</snippet></ROW><ROW><id>20752197</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>20752197</id><snippet>&gt;&gt;&gt; test
"'BZh91AY&amp;SYA\\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00!\\x9ah3M\\x07&lt;]\\xc9\\x14\\xe1BA\\x06\\xbe\\x084'"
&gt;&gt;&gt; import ast
&gt;&gt;&gt; res = ast.literal_eval("b%s" % test)
&gt;&gt;&gt; import bz2
&gt;&gt;&gt; len(bz2.decompress(res))
4
</snippet></ROW><ROW><id>20752197</id><snippet>b'\\xaf'</snippet></ROW><ROW><id>20752207</id><snippet>strip</snippet></ROW><ROW><id>20752207</id><snippet>a = [ #... ]
b = [s.strip('\x00') for s in a]
</snippet></ROW><ROW><id>20752207</id><snippet>lstrip</snippet></ROW><ROW><id>20752207</id><snippet>strip</snippet></ROW><ROW><id>20752219</id><snippet>def sortlh(lst_input):
    lst = list(lst_input) # make a copy of lst_input
    i = 0
    while i &lt; len(lst):
        j = i + 1
        i_lowest = i
        lowest = lst[i_lowest]
        while j &lt; len(lst):
            if lst[j] &lt; lowest:
                i_lowest = j
                lowest = lst[i_lowest]
            j += 1
        lst[i], lst[i_lowest] = lst[i_lowest], lst[i]  # swap
        i += 1
    return lst

test = [9,8,7,6,5,4,3,2,1]
assert sortlh(test) == sorted(test)
test = [1,3,2,4,5,7,6,9,8]
assert sortlh(test) == sorted(test)
</snippet></ROW><ROW><id>20752219</id><snippet>min()</snippet></ROW><ROW><id>20752219</id><snippet>min()</snippet></ROW><ROW><id>20752219</id><snippet>min()</snippet></ROW><ROW><id>20752219</id><snippet>for</snippet></ROW><ROW><id>20752219</id><snippet>enumerate</snippet></ROW><ROW><id>20752219</id><snippet>while</snippet></ROW><ROW><id>20752219</id><snippet>def sortlh(lst_input):
    lst = list(lst_input) # make a copy of lst_input
    for i, x in enumerate(lst):
        lowest, i_lowest = min((n, j) for j, n in enumerate(lst) if j &gt;= i)
        lst[i], lst[i_lowest] = lst[i_lowest], lst[i]  # swap
    return lst

test = [9,8,7,6,5,4,3,2,1]
assert sortlh(test) == sorted(test)
test = [1,3,2,4,5,7,6,9,8]
assert sortlh(test) == sorted(test)
</snippet></ROW><ROW><id>20752367</id><snippet>def add_runner(self):
    self._runner.append(Runner)
</snippet></ROW><ROW><id>20752367</id><snippet>self._runner</snippet></ROW><ROW><id>20752367</id><snippet>self._runners</snippet></ROW><ROW><id>20752367</id><snippet>Runner</snippet></ROW><ROW><id>20752367</id><snippet>add_runner</snippet></ROW><ROW><id>20752367</id><snippet>def add_runner(self, runner):
    self._runners.append(runner)
</snippet></ROW><ROW><id>20752367</id><snippet>add_runner(Runner: runner)</snippet></ROW><ROW><id>20752367</id><snippet>def add_runner(self, runner):
</snippet></ROW><ROW><id>20752367</id><snippet>def add_runner(self, runner: Runner):
</snippet></ROW><ROW><id>20752367</id><snippet>Runner</snippet></ROW><ROW><id>20752367</id><snippet>doe_club = Club(42, "Doe Family Club")
john_doe = CharityRunner(23, "John Doe", "Toys for John Doe")
doe_club.add_runner(john_doe)
</snippet></ROW><ROW><id>20752367</id><snippet>def add_runner(self, runner):
    if runner not in self._runners:
        self._runners.append(runner)
</snippet></ROW><ROW><id>20752367</id><snippet>set</snippet></ROW><ROW><id>20752367</id><snippet>add</snippet></ROW><ROW><id>20752367</id><snippet>append</snippet></ROW><ROW><id>20752367</id><snippet>set</snippet></ROW><ROW><id>20752367</id><snippet>self._runners = {}</snippet></ROW><ROW><id>20752367</id><snippet>def add_runner(self, runner):
    self._runners.add(runner)
</snippet></ROW><ROW><id>20752483</id><snippet>&gt;&gt;&gt; data.groupby(np.sum, axis='major')
&lt;pandas.core.groupby.PanelGroupBy object at 0x1a2ba50&gt;
</snippet></ROW><ROW><id>20752496</id><snippet>BoundField</snippet></ROW><ROW><id>20752496</id><snippet>field</snippet></ROW><ROW><id>20752496</id><snippet>{{ login_form.username.field }}
</snippet></ROW><ROW><id>20752496</id><snippet>{{ login_form.username.field.widget }}
</snippet></ROW><ROW><id>20752609</id><snippet>send</snippet></ROW><ROW><id>20752609</id><snippet>socket.send(string[, flags])</snippet></ROW><ROW><id>20752609</id><snippet>send</snippet></ROW><ROW><id>20752609</id><snippet>print</snippet></ROW><ROW><id>20752609</id><snippet>for i in (a, b):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    connect = s.connect((i, 25))
    banner = s.recv(1024)
    print banner
    users = ['root', 'user' ]
    # for loop on users list
    for user in users:
        s.send('VRFY %s\r\n' % (user,))
        result=s.recv(1024)
        print result
    s.close()
</snippet></ROW><ROW><id>20752609</id><snippet>s.close</snippet></ROW><ROW><id>20752609</id><snippet>()</snippet></ROW><ROW><id>20752609</id><snippet>close</snippet></ROW><ROW><id>20752655</id><snippet>im[~np.all(im == 0, axis=1)]</snippet></ROW><ROW><id>20752655</id><snippet>axis=2</snippet></ROW><ROW><id>20752713</id><snippet>unstack</snippet></ROW><ROW><id>20752713</id><snippet>droplevel</snippet></ROW><ROW><id>20752713</id><snippet>&gt;&gt;&gt; data = data.unstack(['observer', 'obstype'])
&gt;&gt;&gt; data.columns = data.columns.droplevel(0)
&gt;&gt;&gt; data
observer                 Bill                John          
obstype                 Speed  Strength     Speed  Strength
game jersey team                                           
1    35     Dodgers -0.110447 -0.617362  0.562761  0.240737
            Mets    -0.517094 -0.997027  0.248799 -0.296641
            Yankees  0.520576 -1.144341  0.801861  0.046567
     71     Dodgers  1.904659  1.111057  0.659050 -1.627438
            Mets     2.190700 -1.896361 -0.646917  0.901487
            Yankees  0.529465  0.137701  0.077821  0.618380
     84     Dodgers -0.400878  0.824006 -0.562305  1.954878
            Mets     1.331457 -0.287308  0.680070 -0.319802
            Yankees  1.038825  2.186980  0.441364 -0.100155
2    35     Dodgers  0.280665 -0.073113  1.160339  0.369493
            Mets     0.495211 -0.174703  0.986335  0.213534
            Yankees -0.186570 -0.101746  0.868886  0.750412
     71     Dodgers  0.602319  0.420282  0.810952  1.044442
            Mets     2.528326 -0.248635  0.043669 -0.226314
            Yankees  0.232495  0.682551 -0.310117 -2.434838
     84     Dodgers -1.331952 -1.760689 -1.650721 -0.890556
            Mets    -1.272559  0.313548  0.503185  1.293226
            Yankees -0.136445 -0.119054  0.017409 -1.122019

[18 rows x 4 columns]
</snippet></ROW><ROW><id>20752794</id><snippet>collection_detail_set</snippet></ROW><ROW><id>20752794</id><snippet>collection_detail</snippet></ROW><ROW><id>20752794</id><snippet>collection</snippet></ROW><ROW><id>20752794</id><snippet>ForeignKey</snippet></ROW><ROW><id>20752794</id><snippet>collection = models.ForeignKey(collection)
</snippet></ROW><ROW><id>20752794</id><snippet>collection = models.OneToOneField(collection)
</snippet></ROW><ROW><id>20752794</id><snippet>collection</snippet></ROW><ROW><id>20752794</id><snippet>collection_detail</snippet></ROW><ROW><id>20752794</id><snippet>collection_detail</snippet></ROW><ROW><id>20752794</id><snippet>collection</snippet></ROW><ROW><id>20752907</id><snippet>def buttonClicked(self):
    buttonHandle = self.sender()
    print buttonHandle
</snippet></ROW><ROW><id>20752907</id><snippet>Ui_MainWindow</snippet></ROW><ROW><id>20752907</id><snippet>MainWindow</snippet></ROW><ROW><id>20752907</id><snippet>def setupUi(self, MainWindow):
    self.MainWindow = MainWindow
    ....

def buttonClicked(self):
    buttonHandle = self.MainWindow.sender()
    print buttonHandle
</snippet></ROW><ROW><id>20753013</id><snippet>addressof</snippet></ROW><ROW><id>20753013</id><snippet>obj = myObject()
arg = c_char_p(addressof(obj) + myObject.data.offset)
</snippet></ROW><ROW><id>20753059</id><snippet>\\n</snippet></ROW><ROW><id>20753059</id><snippet>env = {}
env.update(os.environ)
env.update(jj)
subprocess.call('echo ${pp}', shell=True, env=env)
</snippet></ROW><ROW><id>20753059</id><snippet>jj[pp]</snippet></ROW><ROW><id>20753059</id><snippet>0</snippet></ROW><ROW><id>20753059</id><snippet>${pp}</snippet></ROW><ROW><id>20753059</id><snippet>pp</snippet></ROW><ROW><id>20753059</id><snippet>jj</snippet></ROW><ROW><id>20753059</id><snippet>env</snippet></ROW><ROW><id>20753059</id><snippet>pp</snippet></ROW><ROW><id>20753059</id><snippet>jj[pp]</snippet></ROW><ROW><id>20753059</id><snippet>"${pp}"</snippet></ROW><ROW><id>20753059</id><snippet>echo</snippet></ROW><ROW><id>20753059</id><snippet>subprocess</snippet></ROW><ROW><id>20753059</id><snippet>$1</snippet></ROW><ROW><id>20753059</id><snippet>str.format</snippet></ROW><ROW><id>20753059</id><snippet>%</snippet></ROW><ROW><id>20753059</id><snippet>script = 'echo {}'.format(shlex.quote(jj['pp']))
subprocess.call(script, shell=True)
</snippet></ROW><ROW><id>20753069</id><snippet>.</snippet></ROW><ROW><id>20753069</id><snippet>location = hostname.split('.')[1]
</snippet></ROW><ROW><id>20753069</id><snippet>&gt;&gt;&gt; hostname = 'dc1dbx1145.dc1.host.com'
&gt;&gt;&gt; hostname.split('.')[1]
'dc1'
</snippet></ROW><ROW><id>20753069</id><snippet>if location not in colo:
   print 'Not a recognized location'
</snippet></ROW><ROW><id>20753069</id><snippet>location = next((part for part in hostname.split('.') if part in colo), None)
if location is None:
    print 'Not a recognized location'
</snippet></ROW><ROW><id>20753341</id><snippet>&lt;input type="hidden" name="superlongstring" value="{{mySuperLongString}}"&gt;
</snippet></ROW><ROW><id>20753341</id><snippet>myGet()</snippet></ROW><ROW><id>20753341</id><snippet>flask.session['superlongstring'] = mySuperLongString
</snippet></ROW><ROW><id>20753341</id><snippet>myPost()</snippet></ROW><ROW><id>20753341</id><snippet>mySuperLongString  = flask.session['superlongstring']
</snippet></ROW><ROW><id>20753415</id><snippet>double **</snippet></ROW><ROW><id>20753415</id><snippet>double [][2]</snippet></ROW><ROW><id>20753415</id><snippet>double **</snippet></ROW><ROW><id>20753415</id><snippet>double</snippet></ROW><ROW><id>20753415</id><snippet>p[i]</snippet></ROW><ROW><id>20753415</id><snippet>p[i][0]</snippet></ROW><ROW><id>20753415</id><snippet>p[i]</snippet></ROW><ROW><id>20753415</id><snippet>NULL</snippet></ROW><ROW><id>20753415</id><snippet>c_void_p</snippet></ROW><ROW><id>20753415</id><snippet>from_param</snippet></ROW><ROW><id>20753415</id><snippet>_as_parameter_</snippet></ROW><ROW><id>20753425</id><snippet>id</snippet></ROW><ROW><id>20753425</id><snippet>someClass</snippet></ROW><ROW><id>20753425</id><snippet>print</snippet></ROW><ROW><id>20753425</id><snippet>id</snippet></ROW><ROW><id>20753425</id><snippet>id</snippet></ROW><ROW><id>20753425</id><snippet>class SomeClass:
    next_id = 0

    def __init__(self):
         self.id = SomeClass.nextid
         SomeClass.nextid += 1
</snippet></ROW><ROW><id>20753625</id><snippet>date</snippet></ROW><ROW><id>20753625</id><snippet>ndb.DateTimeProperty</snippet></ROW><ROW><id>20753625</id><snippet>type(g1.date).__name__ == "datetime"
type(Greeting.date).__name__ == "DateTimeProperty"
</snippet></ROW><ROW><id>20753743</id><snippet>#!/usr/bin/env python
#python server 

import json 
import threading
import time
import socket
from twitter import *
import re

#get thread lock ready
thread_lock = threading.Lock()

#set server variables
TCP_IP = '127.0.0.1'
TCP_PORT = 7001
BUFFER_SIZE  = 20


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((TCP_IP, TCP_PORT))
s.listen(1)

conn, addr = s.accept()

#print connection address when someone connects
print ('Connection address:', addr)

#fill these in your app!
#twitter auth keys
OAUTH_TOKEN = ''
OAUTH_SECRET = ''
CONSUMER_KEY = ''
CONSUMER_SECRET = ''

t = Twitter(auth=OAuth(OAUTH_TOKEN, OAUTH_SECRET, CONSUMER_KEY, CONSUMER_SECRET))

auth = OAuth(OAUTH_TOKEN, OAUTH_SECRET, CONSUMER_KEY, CONSUMER_SECRET)
stream = TwitterStream(auth = auth, secure = True)


#twitter functions
def pythonSearch():
    #lock thread to not interrupt search results
    thread_lock.acquire()

    print ('request newest tweets')

    #get 10 things from timeline
    x = t.statuses.home_timeline(count=10)

    for i in range(10):
        try:
            #get username and tweet
            userName = x[i]['entities']['user_mentions'][0]['screen_name']
            userTweet = x[i]['text']

            #print out values
            print('username: ', userName)
            print('tweet: ', userTweet)

            #send json back
            delivery = json.dumps({'type':'display','userName':userName,'userTweet':userTweet})
            conn.send(delivery.encode('utf-8'))
        except:
            #not a retweet
            print('not valid tweet')

    #unlock thread when finished
    thread_lock.release()

    return


def pythonStream():
    #open stream looking for search_term
    search_term = 'TESTING'
    tweet_iter = stream.statuses.filter(track = search_term)

    for tweet in tweet_iter:
        # check whether this is a valid tweet
        if tweet.get('text'):

            #get username and tweet
            userName = tweet["user"]["screen_name"]
            userTweet = tweet["text"]

            # now print our tweet
            print ('user: ', userName)
            print ('tweet: ', userTweet)

            #send json back
            delivery1 = json.dumps({'type':'showdown','userName':userName,'userTweet':userTweet})
            conn.send(delivery1.encode('utf-8'))


#start main loop
while 1:
    #listen for calls
    data = conn.recv(BUFFER_SIZE)
    data = data.decode('utf-8')

    #if someone calls search, do a search
    if data == 'SEARCH':
        threading.Thread(target = pythonSearch).start()


    if data == 'STREAM':
        threading.Thread(target = pythonStream).start()


conn.close()
</snippet></ROW><ROW><id>20753857</id><snippet>url = "http://creepypasta.wikia.com/api.php?%20action=query&amp;prop=revisions&amp;titles=Main_Page&amp;rvprop=content&amp;indexpageids=1&amp;format=json"
j = json.load(urllib2.urlopen(url))
value = j['query']['pages']['22491']['revisions'][0]['*']
</snippet></ROW><ROW><id>20753857</id><snippet>def _finditem(obj, key):
    if key in obj: return obj[key]
    for k, v in obj.items():
        if isinstance(v,dict):
            item = _finditem(v, key)
            if item is not None:
                return item

_finditem(j,'revisions')[0]['*']
</snippet></ROW><ROW><id>20753953</id><snippet>[1..x]</snippet></ROW><ROW><id>20753953</id><snippet>changeInfo['changeInfo']</snippet></ROW><ROW><id>20753953</id><snippet>[0..x]</snippet></ROW><ROW><id>20753953</id><snippet>for item in changeInfo['changeInfo'][:x]:
    # do stuff
</snippet></ROW><ROW><id>20753953</id><snippet>for item in changeInfo['changeInfo'][1:x]:
    # do stuff
</snippet></ROW><ROW><id>20753953</id><snippet>for item in changeInfo['changeInfo']</snippet></ROW><ROW><id>20753953</id><snippet>for changeInfo in MainchangeInfo:
    for item in changeInfo['changeInfo']:
        if (changeInfo['CRStatus'] == 'Fix' and (('Not Provided' in item['Url'] or 'Wrong change Provided' in item['Url']) or 'NEW' in item['Status'] or 'ABANDONED' in item['Status'] or 'Yes' not in changeInfo['RNotesStatus'] or 'Provided' not in changeInfo['RCAInfo'] or 'False' in str(changeInfo['IsDevComplete']))):
            if 'Wrong change Provided' in item['Url'] or item['Info'] != 'Available' ://want to loop over for changeInfo['changeInfo'][0]
                changeMailBody = changeMailBody + "&lt;tr bgcolor=\"Red\"&gt;"
</snippet></ROW><ROW><id>20754054</id><snippet>gocr</snippet></ROW><ROW><id>20754054</id><snippet>subprocess</snippet></ROW><ROW><id>20754054</id><snippet>from subprocess import Popen, PIPE

p = Popen(["gocr", "-"], stdin=PIPE)
im.save(p.stdin, 'PPM')
p.stdin.close()
p.wait()
</snippet></ROW><ROW><id>20754054</id><snippet>im.save()</snippet></ROW><ROW><id>20754054</id><snippet>from subprocess import Popen, PIPE
from StringIO import StringIO

buf = StringIO()
im.save(buf, 'PPM')

p = Popen(["gocr", "-"], stdin=PIPE)
p.communicate(input=buf.getvalue())
</snippet></ROW><ROW><id>20754128</id><snippet>__init__</snippet></ROW><ROW><id>20754128</id><snippet>self.instance.field_a</snippet></ROW><ROW><id>20754176</id><snippet>def getMyMessages(request):


    from django_mailbox.models import Message

    qs = Message.objects.all()
    count = 0
    for i in qs:
        count += 1
        output = output + str(count)+ " " + i.text +'&lt;br&gt;' + '&lt;br&gt;'

    return HttpResponse(output)
</snippet></ROW><ROW><id>20754178</id><snippet>Slider</snippet></ROW><ROW><id>20754178</id><snippet>slidermin</snippet></ROW><ROW><id>20754178</id><snippet>slidermax</snippet></ROW><ROW><id>20754178</id><snippet>val</snippet></ROW><ROW><id>20754178</id><snippet>Slider</snippet></ROW><ROW><id>20754178</id><snippet>import matplotlib.pyplot as plt
from matplotlib.widgets import Slider

class FakeSlider(object):
    def __init__(self, slider, func):
        self.func, self.slider = func, slider
    @property
    def val(self):
        return self.func(self.slider.val)

fig, ax = plt.subplots()
fig.subplots_adjust(bottom=0.25)

sliderax1 = fig.add_axes([0.15, 0.1, 0.75, 0.03], axisbg='gray')
sliderax2  = fig.add_axes([0.15, 0.15, 0.75, 0.03], axisbg='gray')

slider1 = Slider(sliderax1, 'Value 1', 0.1, 5, valinit=2)
slider2 = Slider(sliderax2, 'Value 2', -4, 0.9, valinit=-3,
                 slidermax=FakeSlider(slider1, lambda x: 1 - x))
plt.show()
</snippet></ROW><ROW><id>20754184</id><snippet>brew install libxml2 --with-python
</snippet></ROW><ROW><id>20754184</id><snippet>/usr/local/lib/python2.7/site-packages/libxml2*</snippet></ROW><ROW><id>20754235</id><snippet>less</snippet></ROW><ROW><id>20754235</id><snippet>more</snippet></ROW><ROW><id>20754235</id><snippet>cat</snippet></ROW><ROW><id>20754235</id><snippet>type</snippet></ROW><ROW><id>20754235</id><snippet>{\rtf</snippet></ROW><ROW><id>20754235</id><snippet>\</snippet></ROW><ROW><id>20754235</id><snippet>\ansicpg949</snippet></ROW><ROW><id>20754235</id><snippet>\ansicpg65001</snippet></ROW><ROW><id>20754235</id><snippet>\utf8</snippet></ROW><ROW><id>20754235</id><snippet>\ansicpg949</snippet></ROW><ROW><id>20754235</id><snippet>é</snippet></ROW><ROW><id>20754235</id><snippet>\'e9</snippet></ROW><ROW><id>20754235</id><snippet>file</snippet></ROW><ROW><id>20754236</id><snippet>thread.start_new_thread(self.handle, self.sock.accept())
</snippet></ROW><ROW><id>20754236</id><snippet>thread.start_new_thread(self.handle, *self.sock.accept())
</snippet></ROW><ROW><id>20754236</id><snippet>(conn, address)</snippet></ROW><ROW><id>20754236</id><snippet>args</snippet></ROW><ROW><id>20754236</id><snippet>kwargs</snippet></ROW><ROW><id>20754236</id><snippet>socket.accept()</snippet></ROW><ROW><id>20754236</id><snippet>Type Error</snippet></ROW><ROW><id>20754236</id><snippet>self.socket</snippet></ROW><ROW><id>20754322</id><snippet>&gt;&gt;&gt; print u'å'.encode("utf-8").decode("latin-1")
Ã¥
</snippet></ROW><ROW><id>20754322</id><snippet>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'str' object has no attribute 'encoding'
</snippet></ROW><ROW><id>20754322</id><snippet>psycopg2</snippet></ROW><ROW><id>20754322</id><snippet>unicode</snippet></ROW><ROW><id>20754322</id><snippet>&gt;&gt;&gt; conn = psycopg2.connect("dbname=regress")
&gt;&gt;&gt; curs = conn.cursor()
&gt;&gt;&gt; curs.execute("SELECT %s", (u'áéíóú',));
&gt;&gt;&gt; print curs.fetchone()[0]
áéíóú
</snippet></ROW><ROW><id>20754322</id><snippet>print repr(mystring)</snippet></ROW><ROW><id>20754322</id><snippet>psycopg2</snippet></ROW><ROW><id>20754322</id><snippet>psycopg2</snippet></ROW><ROW><id>20754322</id><snippet>psql</snippet></ROW><ROW><id>20754322</id><snippet>convert_to</snippet></ROW><ROW><id>20754322</id><snippet>SELECT convert_to(column1, 'utf-8') FROM mytable;
</snippet></ROW><ROW><id>20754322</id><snippet>psycopg2</snippet></ROW><ROW><id>20754362</id><snippet>.string</snippet></ROW><ROW><id>20754362</id><snippet>None</snippet></ROW><ROW><id>20754362</id><snippet>from bs4 import BeautifulSoup, Comment

soup = BeautifulSoup(html)
div = soup.find('div', 'booker-booking')
# remove comments
text = " ".join(div.find_all(text=lambda t: not isinstance(t, Comment)))
# -&gt; u'\n    2\xa0rooms\n    \xb7\n    USD\xa00\n     \n'
</snippet></ROW><ROW><id>20754362</id><snippet>text = " ".join(text.split())
# -&gt; u'2 rooms \xb7 USD 0'
print text
# -&gt; 2 rooms · USD 0
</snippet></ROW><ROW><id>20754362</id><snippet>var1, var2 = [s.strip() for s in text.split(u"\xb7")]
# -&gt; u'2 rooms', u'USD 0'
</snippet></ROW><ROW><id>20754647</id><snippet>from PIL import Image

img = Image.open('test.png')
pixels = img.load()

for y in xrange(img.size[1]):
    for x in xrange(img.size[0]):
        if pixels[x, y] == (0, 0, 0):
            // black pixel found, add it to a counter variable or something.
</snippet></ROW><ROW><id>20754827</id><snippet>/usr/local/bin/pip</snippet></ROW><ROW><id>20754827</id><snippet>easy_install</snippet></ROW><ROW><id>20754827</id><snippet>sudo rm /usr/local/bin/pip
</snippet></ROW><ROW><id>20754866</id><snippet>itertools.product</snippet></ROW><ROW><id>20754866</id><snippet>from itertools import product

def worker1(a, b, c):
    return a + b + c

def worker2(d, e, f):
    return d * e * f

def search(model, *params):
    res = []

    # Loop over one of the parameters and repeatedly append to res
    for current_params in product(*params):
        if model == 1:
            res.append(worker1(*current_params))
        elif model == 2:
            res.append(worker2(*current_params))

    return res

print search(1, [1,2,3,4], [2], [3])

# more complicated combinations are possible:
print search(1, [1,2,3,4], [2,7,9], [3,13,23,43])
</snippet></ROW><ROW><id>20754866</id><snippet>sum</snippet></ROW><ROW><id>20754866</id><snippet>reduce</snippet></ROW><ROW><id>20754984</id><snippet>from itertools import combinations

def all_splits(s):
    for numsplits in range(len(s)):
        for c in combinations(range(1,len(s)), numsplits):
            split = [s[i:j] for i,j in zip((0,)+c, c+(None,))]
            yield split
</snippet></ROW><ROW><id>20754984</id><snippet>&gt;&gt;&gt; for x in all_splits("abcd"):
...     print(x)
...     
['abcd']
['a', 'bcd']
['ab', 'cd']
['abc', 'd']
['a', 'b', 'cd']
['a', 'bc', 'd']
['ab', 'c', 'd']
['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>20755070</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>20755070</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>20755081</id><snippet>data.loc[
    (data.index.get_level_values('jersey').isin([71, 84])
     &amp; data.index.get_level_values('team').isin(['Dodgers', 'Mets'])), 
    data.columns.get_level_values('observer').isin(['John', 'Ralph'])
]
</snippet></ROW><ROW><id>20755081</id><snippet>def hackedsyntax():
    return data[[j in [71, 84] and t in ['Dodgers', 'Mets'] for t, j, g in data.index]]\
    .T[[obs in ['John', 'Ralph'] for obs, obstype in data.columns]].T

def uglybuiltinsyntax():
    return data.loc[
        (data.index.get_level_values('jersey').isin([71, 84])
         &amp; data.index.get_level_values('team').isin(['Dodgers', 'Mets'])), 
        data.columns.get_level_values('observer').isin(['John', 'Ralph'])
    ]

%timeit hackedsyntax()
%timeit uglybuiltinsyntax()

hackedsyntax() - uglybuiltinsyntax()
</snippet></ROW><ROW><id>20755081</id><snippet>1000 loops, best of 3: 395 µs per loop
1000 loops, best of 3: 409 µs per loop
</snippet></ROW><ROW><id>20755151</id><snippet>InlineModelAdmin</snippet></ROW><ROW><id>20755151</id><snippet>from django.contrib import admin

class ArticleInline(admin.TabularInline):
    model = Article

class ReporterAdmin(admin.ModelAdmin):
    inlines = [
        ArticleInline,
    ]
</snippet></ROW><ROW><id>20755160</id><snippet>def func(x):
    if x == 0: y = 1
    print locals()

func(1)
func(0)
</snippet></ROW><ROW><id>20755160</id><snippet>{'x': 1}
{'y': 1, 'x': 0}
</snippet></ROW><ROW><id>20755160</id><snippet>y</snippet></ROW><ROW><id>20755160</id><snippet>y</snippet></ROW><ROW><id>20755499</id><snippet>TestSuite.debug</snippet></ROW><ROW><id>20755499</id><snippet>unittest.TextTestRunner(verbosity=2).run(suite)
</snippet></ROW><ROW><id>20755499</id><snippet>suite.debug()
</snippet></ROW><ROW><id>20755794</id><snippet>package test.test;

import py4j.GatewayServer;

public class AdditionApplication {
    public int addition(int first, int second) {
        return first + second;
      }

      public static void main(String[] args) {
        AdditionApplication app = new AdditionApplication();
        // app is now the gateway.entry_point
        GatewayServer server = new GatewayServer(app);
        server.start();
      }
}
</snippet></ROW><ROW><id>20755865</id><snippet>imshow</snippet></ROW><ROW><id>20755865</id><snippet>from matplotlib import pyplot as plt
fig = plt.figure(figsize=(8,4))
ax = fig.add_subplot(111, frameon=True, xticks = [], yticks = [])
cells = np.random.randint(0, 100, (10, 10))
img = plt.imshow(cells, cmap="hot")
plt.colorbar()
img.set_visible(False)
tb = plt.table(cellText = cells, 
    rowLabels = range(10), 
    colLabels = range(10), 
    loc = 'center',
    cellColours = img.to_rgba(cells))
ax.add_table(tb)
plt.show()
</snippet></ROW><ROW><id>20755891</id><snippet>datetime.datetime.combine(datetime.date(2011, 01, 01), datetime.time(10, 23))
</snippet></ROW><ROW><id>20755891</id><snippet>datetime.datetime(2011, 1, 1, 10, 23)
</snippet></ROW><ROW><id>20755927</id><snippet>a</snippet></ROW><ROW><id>20755927</id><snippet>a</snippet></ROW><ROW><id>20755927</id><snippet>os.system('iperf -s -w {}'.format(a))
</snippet></ROW><ROW><id>20755927</id><snippet>a</snippet></ROW><ROW><id>20755927</id><snippet>{}</snippet></ROW><ROW><id>20755927</id><snippet>print 'iperf -s -w {}'.format(a)
print 'iperf -s -w a'
</snippet></ROW><ROW><id>20756104</id><snippet>M</snippet></ROW><ROW><id>20756104</id><snippet>N1</snippet></ROW><ROW><id>20756104</id><snippet>N2</snippet></ROW><ROW><id>20756104</id><snippet>N3</snippet></ROW><ROW><id>20756104</id><snippet>M</snippet></ROW><ROW><id>20756104</id><snippet>N*</snippet></ROW><ROW><id>20756275</id><snippet>&gt;&gt;&gt; issubclass(bool, int)
True
</snippet></ROW><ROW><id>20756275</id><snippet>bool</snippet></ROW><ROW><id>20756275</id><snippet>int</snippet></ROW><ROW><id>20756275</id><snippet>bool</snippet></ROW><ROW><id>20756275</id><snippet>int</snippet></ROW><ROW><id>20756275</id><snippet>bool</snippet></ROW><ROW><id>20756275</id><snippet>sum(x &lt; 2 for x in some_list)
</snippet></ROW><ROW><id>20756275</id><snippet>some_list</snippet></ROW><ROW><id>20756275</id><snippet>bool</snippet></ROW><ROW><id>20756275</id><snippet>&lt;</snippet></ROW><ROW><id>20756275</id><snippet>True</snippet></ROW><ROW><id>20756275</id><snippet>False</snippet></ROW><ROW><id>20756275</id><snippet>bool</snippet></ROW><ROW><id>20756275</id><snippet>int</snippet></ROW><ROW><id>20756275</id><snippet>False</snippet></ROW><ROW><id>20756275</id><snippet>True</snippet></ROW><ROW><id>20756282</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>20756282</id><snippet>from itertools import izip_longest
d = {1: [12, 13, 14, 15], 2: [16, 17, 18], 3: [19, 20, 21, 22]}
labels = d.keys()
rows = izip_longest(*d.values())
</snippet></ROW><ROW><id>20756282</id><snippet>csv.writer</snippet></ROW><ROW><id>20756282</id><snippet>import StringIO
buf = StringIO.StringIO()
outf = csv.writer(buf)
outf.writerow(labels)
outf.writerows(rows)
print buf.getvalue()
# 1,2,3
# 12,16,19
# 13,17,20
# 14,18,21
# 15,,22
</snippet></ROW><ROW><id>20756979</id><snippet>import json
jsoncnt = {'script':'#!/bin/bash \n STRING="Hello World" \n echo $STRING \n'}
jsonStr = json.dumps(jsoncnt)
print jsonStr
q = json.loads(jsonStr)
</snippet></ROW><ROW><id>20757048</id><snippet>$('.song_pk')</snippet></ROW><ROW><id>20757048</id><snippet>.val()</snippet></ROW><ROW><id>20757048</id><snippet>.text()</snippet></ROW><ROW><id>20757048</id><snippet>.val()</snippet></ROW><ROW><id>20757230</id><snippet>&gt;&gt;&gt; def bar():
...   """My function.
...   
...   That does foo.
...   """
...   pass
... 
&gt;&gt;&gt; bar.__doc__
'My function.\n  \n  That does foo.\n  '
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; def bar():
...   "My function.\n"
...   "\n"
...   "That does foo.\n"
...   pass
... 
&gt;&gt;&gt; bar.__doc__
'My function.\n'
</snippet></ROW><ROW><id>20757230</id><snippet>__doc__</snippet></ROW><ROW><id>20757230</id><snippet>__init__</snippet></ROW><ROW><id>20757296</id><snippet>pypy compute.py | python plot.py 
</snippet></ROW><ROW><id>20757344</id><snippet>open()</snippet></ROW><ROW><id>20757344</id><snippet>'w'</snippet></ROW><ROW><id>20757732</id><snippet>import pylab as pl
import numpy as np

n = 300                                     #number of sample data
x,y = np.random.rand(2,n)                   #generate random sample locations

pl.subplot(121)                             #sub-plot area 1 out of 2
pl.scatter(x,y,lw=0,c='k')                  #darw sample points
pl.axis('image')                            #necessary for correct aspect ratio

pl.subplot(122)                             #sub-plot area 2 out of 2

pl.hexbin(x,y,C=None,gridsize=15,bins=None,mincnt=1)        #hexbinning

pl.scatter(x,y,lw=0.5,c='k',edgecolor='w')  #overlaying the sample points
pl.axis('image')                            #necessary for correct aspect ratio

pl.show()                                   #to show the plot
</snippet></ROW><ROW><id>20757732</id><snippet>mincnt=1</snippet></ROW><ROW><id>20757768</id><snippet>endNum = int(raw_input("Enter the end number here "))
divisable_by = int(raw_input("Sum all numbers in the sequence that divide by: "))   

# below is the same as "a, b = 0, 1"
a = 0
b = 1
""" gave single letter variables to those above to use in formula below
(longer strings do not seem to work)"""
c = endNum
d = divisable_by

fib_list = []
# while b is less than or equal to the ending number, it will loop.
while b &lt;= c:
    print b
    fib_list.append(b)
# below is the same as "a, b = b, a+b"
    a_old = a
    a = b
    b = a_old + b
# the below helps with summing the numbers that are divisable by number chosen.
total = 0
for i in fib_list:
  if i%d == 0:
    total += i
#prints text and number calculated above.
print "Sum of all natural numbers that divide by the number you chose" 
print "and are less than the other number you chose is: ", total
</snippet></ROW><ROW><id>20758187</id><snippet>None</snippet></ROW><ROW><id>20758187</id><snippet>a = A()
b = a
a.finish()  # what should be set to `None` now? a, b or both?
</snippet></ROW><ROW><id>20758187</id><snippet>a.finish()</snippet></ROW><ROW><id>20758187</id><snippet>del a</snippet></ROW><ROW><id>20758187</id><snippet>__del__</snippet></ROW><ROW><id>20758187</id><snippet>class Playingsound:
    playing = []

    def fadeout_and_stop(self):
        Playingsound.playing.append(self)
        # do somthing (fadeout during 100 ms)
        Playingsound.playing.remove(self)
</snippet></ROW><ROW><id>20758187</id><snippet>a = Playingsound()
a.fadeout_and_stop()
del a
</snippet></ROW><ROW><id>20758187</id><snippet>Playingsound.playing</snippet></ROW><ROW><id>20758205</id><snippet>1</snippet></ROW><ROW><id>20758205</id><snippet>True</snippet></ROW><ROW><id>20758205</id><snippet>&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; 1 == True
True
</snippet></ROW><ROW><id>20758476</id><snippet>open(r'C:\Users\user\Documents\w-game\run\map1.txt')
</snippet></ROW><ROW><id>20758476</id><snippet>\Uhhhhhhhh</snippet></ROW><ROW><id>20758476</id><snippet>open('C:\\Users\\user\\Documents\\w-game\\run\\map1.txt')
</snippet></ROW><ROW><id>20758476</id><snippet>open('C:/Users/user/Documents/w-game/run/map1.txt')
</snippet></ROW><ROW><id>20758476</id><snippet>&gt;&gt;&gt; print('C:\Users')
  File "&lt;stdin&gt;", line 1
SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape
&gt;&gt;&gt; print(r'C:\Users')
C:\Users
&gt;&gt;&gt; print('C:\\Users')
C:\Users
&gt;&gt;&gt; print('C:/Users')
C:/Users
</snippet></ROW><ROW><id>20758558</id><snippet>pipelines.py</snippet></ROW><ROW><id>20758558</id><snippet>from scrapy import signals
from scrapy.contrib.exporter import CsvItemExporter

class CSVPipeline(object):

  def __init__(self):
    self.files = {}

  @classmethod
  def from_crawler(cls, crawler):
    pipeline = cls()
    crawler.signals.connect(pipeline.spider_opened, signals.spider_opened)
    crawler.signals.connect(pipeline.spider_closed, signals.spider_closed)
    return pipeline

  def spider_opened(self, spider):
    file = open('%s_items.csv' % spider.name, 'w+b')
    self.files[spider] = file
    self.exporter = CsvItemExporter(file)
    self.exporter.fields_to_export = [list with Names of fields to export - order is important]
    self.exporter.start_exporting()

  def spider_closed(self, spider):
    self.exporter.finish_exporting()
    file = self.files.pop(spider)
    file.close()

  def process_item(self, item, spider):
    self.exporter.export_item(item)
    return item
</snippet></ROW><ROW><id>20758558</id><snippet>settings.py</snippet></ROW><ROW><id>20758558</id><snippet>ITEM_PIPELINES = {'myproject.pipelines.CSVPipeline': 300 }
</snippet></ROW><ROW><id>20758778</id><snippet>0.8407745</snippet></ROW><ROW><id>20758778</id><snippet>0.8407745</snippet></ROW><ROW><id>20758778</id><snippet>&gt;&gt;&gt; '%.53f' % 0.8407745
'0.84077449999999998020427938172360882163047790527343750'
</snippet></ROW><ROW><id>20758778</id><snippet>0.840774</snippet></ROW><ROW><id>20758778</id><snippet>0.8407755</snippet></ROW><ROW><id>20758778</id><snippet>&gt;&gt;&gt; '%.53f' % 0.8407755
'0.84077550000000000895994389793486334383487701416015625'
</snippet></ROW><ROW><id>20758920</id><snippet>launchctl load -w /Library/LaunchAgents/org.macosforge.xquartz.startx.plist
</snippet></ROW><ROW><id>20758927</id><snippet>argparse</snippet></ROW><ROW><id>20758927</id><snippet>argparse.collections</snippet></ROW><ROW><id>20758927</id><snippet>collections</snippet></ROW><ROW><id>20758939</id><snippet>import subprocess
import json

testing = "HelloWorld"

jsonStr = '{"script":"#!/bin/bash \\n STRING=\'%VP%\' \\n echo $STRING \\n"}'.replace('%VP%', testing)

j = json.loads(jsonStr)

print "start"
subprocess.call(j['script'], shell=True)
print "end"
</snippet></ROW><ROW><id>20759111</id><snippet>re</snippet></ROW><ROW><id>20759111</id><snippet>\d+inline-formula</snippet></ROW><ROW><id>20759111</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; original = "&amp;\hbox{(1b)}}$$ with the initial condition &lt;2inline-formula&gt;$x(0)$, where the subscript &lt;3inline-formula&gt;$p$ means 'plant’; &lt;4inline-formula&gt;$x_{p}(t) \in \Re^{n}$ is the state, &lt;5inline-formula&gt;$y_{p}(t)\in\Re^{q}$ is the output, and &lt;6inline-formula&gt;$u_{p}(t)\in\Re^{m}$ is the input; &lt;7inline-formula&gt;"
&gt;&gt;&gt; new = re.sub(r"&lt;\d+inline-formula&gt;", "&lt;inline-formula&gt;", original)
&gt;&gt;&gt; print new
"&amp;\\hbox{(1b)}}$$ with the initial condition &lt;inline-formula&gt;$x(0)$, where the subscript &lt;inline-formula&gt;$p$ means 'plant\xe2\x80\x99; &lt;inline-formula&gt;$x_{p}(t) \\in \\Re^{n}$ is the state, &lt;inline-formula&gt;$y_{p}(t)\\in\\Re^{q}$ is the output, and &lt;inline-formula&gt;$u_{p}(t)\\in\\Re^{m}$ is the input; &lt;inline-formula&gt;"
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20759133</id><snippet>{
    "key1": "value1",
    "key2": "value2"
}
</snippet></ROW><ROW><id>20759133</id><snippet>json.load</snippet></ROW><ROW><id>20759133</id><snippet>import json

txt = open('demo.txt', 'rb')
data = json.load(txt)
</snippet></ROW><ROW><id>20759133</id><snippet>&gt;&gt; {u'key1': u'value1', u'key2': u'value2'}
</snippet></ROW><ROW><id>20759337</id><snippet>for a in range (myPossiblePrimes):
</snippet></ROW><ROW><id>20759337</id><snippet>for</snippet></ROW><ROW><id>20759337</id><snippet>for item in iterable:

for index in range(integer): # or range(len(iterable))
</snippet></ROW><ROW><id>20759337</id><snippet>for a in myPossiblePrimes:
</snippet></ROW><ROW><id>20759337</id><snippet>filter</snippet></ROW><ROW><id>20759337</id><snippet>return</snippet></ROW><ROW><id>20759337</id><snippet>True</snippet></ROW><ROW><id>20759337</id><snippet>False</snippet></ROW><ROW><id>20759337</id><snippet>"myPossibleDividers" != "myDividersList"</snippet></ROW><ROW><id>20759337</id><snippet>filter(f(), myPossiblePrimes)</snippet></ROW><ROW><id>20759337</id><snippet>filter(f, myPossiblePrimes)</snippet></ROW><ROW><id>20759971</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; s = "aacbed"
&gt;&gt;&gt; count = collections.Counter(c for c in s if c in "aeiou")
&gt;&gt;&gt; count
Counter({'a': 2, 'e': 1})
</snippet></ROW><ROW><id>20759971</id><snippet>&gt;&gt;&gt; s = 'debcaa'
&gt;&gt;&gt; count=collections.OrderedDict((c, s.count(c)) for c in s if c in "aeiou")
&gt;&gt;&gt; count
OrderedDict([('e', 1), ('a', 2)])
</snippet></ROW><ROW><id>20759971</id><snippet>&gt;&gt;&gt; sorted(count.items())
[('a', 2), ('e', 1)]
</snippet></ROW><ROW><id>20759971</id><snippet>&gt;&gt;&gt; sorted_count = collections.OrderedDict(sorted(count.items()))
&gt;&gt;&gt; sorted_count
OrderedDict([('a', 2), ('e', 1)])
</snippet></ROW><ROW><id>20760055</id><snippet>import requests
headers = {'User-Agent': 'Mozilla/5.0'}
payload = {'username':'niceusername','password':'123456'}

session = requests.Session()
session.post('https://admin.example.com/login.php',headers=headers,data=payload)
# the session instance holds the cookie. So use it get/post later.
# e.g. session.get('https://example.com/profile')
</snippet></ROW><ROW><id>20760379</id><snippet>averages = [sum(items)/len(items)
            for items in zip(*averages_dict.values())]
</snippet></ROW><ROW><id>20760379</id><snippet>zip</snippet></ROW><ROW><id>20760379</id><snippet>for</snippet></ROW><ROW><id>20760379</id><snippet>sum</snippet></ROW><ROW><id>20760379</id><snippet>len</snippet></ROW><ROW><id>20760379</id><snippet>[7.425000000000001, 7.074999999999999, 7.3]
</snippet></ROW><ROW><id>20760405</id><snippet>int</snippet></ROW><ROW><id>20760405</id><snippet>&gt;&gt;&gt; int('ff', 16) # 16: hexadecimal
255
</snippet></ROW><ROW><id>20760405</id><snippet>format</snippet></ROW><ROW><id>20760405</id><snippet>str.format</snippet></ROW><ROW><id>20760405</id><snippet>&gt;&gt;&gt; format(255, 'b') # binary
'11111111'
&gt;&gt;&gt; format(255, 'x') # hexadecimal
'ff'
</snippet></ROW><ROW><id>20760405</id><snippet>0n</snippet></ROW><ROW><id>20760405</id><snippet>&gt;&gt;&gt; format(5, '08b')
'00000101'
&gt;&gt;&gt; format(5, '02x')
'05'
</snippet></ROW><ROW><id>20760697</id><snippet>res = thingy(res) # instead of thingy(res)
</snippet></ROW><ROW><id>20760697</id><snippet>def thingy():
    global res
    if res=="food":
        res=0
    if res=="wood":
        res=1
    if res=="metal":
        res=2
    if res=="gold":
        res=3
    if res=="oil":
        res=3

res = "food"
thingy()
print(res)  # prints "0"
</snippet></ROW><ROW><id>20760697</id><snippet>res</snippet></ROW><ROW><id>20760697</id><snippet>res</snippet></ROW><ROW><id>20760697</id><snippet>global res</snippet></ROW><ROW><id>20760984</id><snippet>'''triple-quoted string literals'''</snippet></ROW><ROW><id>20760984</id><snippet>"""triple-quoted string literals"""</snippet></ROW><ROW><id>20760984</id><snippet>json_input = '''{ 
    "rate_of_climbing": 18.4, 
    "speed_factor": 520
}'''
</snippet></ROW><ROW><id>20761466</id><snippet>nodes =    [{'child': 'x', 'parent': '', 'key': '', 'title': 'w'}, 
 {'child': 'y', 'parent': 'w', 'key': '', 'title': 'x'}, 
 {'child': 'z', 'parent': 'x', 'key': '', 'title': 'y'}, 
 {'child': '', 'parent': 'y', 'key': '', 'title': 'z'}, 
 {'child': '', 'parent': 'z', 'key': '1', 'title': 'a'}, 
 {'child': '', 'parent': 'z', 'key': '2', 'title': 'b'}, 
 {'child': '', 'parent': 'z', 'key': '3', 'title': 'c'}, 
 {'child': '', 'parent': 'z', 'key': '4', 'title': 'd'}]


treeData = []

def insert_in_tree(node, parent, tree=None):
    if tree == None:
        tree = treeData

    for subnode in tree:
        if not 'children' in subnode:
            subnode['children'] = []
        elif insert_in_tree(node, parent, subnode['children']):
            return True

        if subnode['title'] == parent:
            subnode['children'].append(node)
            return True
    return False

for node in nodes:
    parent = node['parent']
    del node['parent']
    del node['child']
    if parent == '':
        treeData.append(node)
    else:
        result = insert_in_tree(node, parent)
        if not result:
            insert_in_tree(node, parent, nodes)

import json
print json.dumps(treeData, indent=4)
</snippet></ROW><ROW><id>20761466</id><snippet>key</snippet></ROW><ROW><id>20761466</id><snippet>[
    {
        "title": "w", 
        "key": "", 
        "children": [
            {
                "title": "x", 
                "key": "", 
                "children": [
                    {
                        "title": "y", 
                        "key": "", 
                        "children": [
                            {
                                "title": "z", 
                                "key": "", 
                                "children": [
                                    {
                                        "title": "a", 
                                        "key": "1", 
                                        "children": []
                                    }, 
                                    {
                                        "title": "b", 
                                        "key": "2", 
                                        "children": []
                                    }, 
                                    {
                                        "title": "c", 
                                        "key": "3", 
                                        "children": []
                                    }, 
                                    {
                                        "title": "d", 
                                        "key": "4"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
</snippet></ROW><ROW><id>20761466</id><snippet>key</snippet></ROW><ROW><id>20761466</id><snippet>def sort_tree(tree):
    for node in tree:
        node["children] = sort_tree(node)
    return sorted(tree, key=lambda x:x['key'])

treeData = sort_tree(treeData)
</snippet></ROW><ROW><id>20761532</id><snippet>var signature = CryptoJS.HmacSHA256(message,API_SECRET).toString(CryptoJS.enc.Hex).toUpperCase();
</snippet></ROW><ROW><id>20761683</id><snippet>reversed</snippet></ROW><ROW><id>20761683</id><snippet>reversed</snippet></ROW><ROW><id>20761683</id><snippet>reversed</snippet></ROW><ROW><id>20761683</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5]
&gt;&gt;&gt; r = reversed(a)
&gt;&gt;&gt; a[2:2] = [10, 11, 12, 13]
&gt;&gt;&gt; a
[1, 2, 10, 11, 12, 13, 3, 4, 5]
&gt;&gt;&gt; list(r)
[12, 11, 10, 2, 1]
</snippet></ROW><ROW><id>20761683</id><snippet>4</snippet></ROW><ROW><id>20761683</id><snippet>list</snippet></ROW><ROW><id>20761683</id><snippet>reversed</snippet></ROW><ROW><id>20761705</id><snippet>json.load()</snippet></ROW><ROW><id>20761705</id><snippet>json_file = open('data.json')
dct = json.load(json_file)
print dct['data'].keys()
</snippet></ROW><ROW><id>20761705</id><snippet>[u'4101', u'3591']
</snippet></ROW><ROW><id>20762127</id><snippet>checkW</snippet></ROW><ROW><id>20762127</id><snippet>checkW</snippet></ROW><ROW><id>20762127</id><snippet>radius = 15</snippet></ROW><ROW><id>20762127</id><snippet>checkH = 0</snippet></ROW><ROW><id>20762127</id><snippet>checkW = 0</snippet></ROW><ROW><id>20762127</id><snippet> while radius &gt; 2:
        #print(radius)                    
        while checkW &lt; targetImage.w:                
            while checkH &lt; targetImage.h:
                #print(radius)
                nodeDistance = math.sqrt(math.fabs(bmuW - checkW) * math.fabs(bmuW - checkW) + math.fabs(bmuH - checkH) * math.fabs(bmuH - checkH))
                if(nodeDistance &lt;= radius):
                    theta =  math.exp((-1) * ((nodeDistance * nodeDistance) / (2 * radius * radius)))
                    targetImage.canvas[checkW, checkH].w0 = targetImage.canvas[checkW, checkH].w0 + theta * 0.1 * (inputR - targetImage.canvas[checkW, checkH].w0)
                    targetImage.canvas[checkW, checkH].w1 = targetImage.canvas[checkW, checkH].w1 + theta * 0.1 * (inputG - targetImage.canvas[checkW, checkH].w1)
                    targetImage.canvas[checkW, checkH].w2 = targetImage.canvas[checkW, checkH].w2 + theta * 0.1 * (inputB - targetImage.canvas[checkW, checkH].w2)
                    targetImage.canvas[checkW,checkH].r = int(targetImage.canvas[checkW, checkH].w0 * 255)
                    targetImage.canvas[checkW,checkH].g = int(targetImage.canvas[checkW, checkH].w1 * 255)
                    targetImage.canvas[checkW,checkH].b = int(targetImage.canvas[checkW, checkH].w2 * 255)                    
                checkH =  checkH + 1
            checkH = 0
            checkW = checkW + 1
        radius = radius - 1
        checkH = 0
        checkW = 0
        #print(radius)
</snippet></ROW><ROW><id>20762242</id><snippet>return</snippet></ROW><ROW><id>20762242</id><snippet>cpRec</snippet></ROW><ROW><id>20762344</id><snippet>django.forms.fields.ImageField</snippet></ROW><ROW><id>20762344</id><snippet>to_python</snippet></ROW><ROW><id>20762344</id><snippet>Image.open(file).verify()
</snippet></ROW><ROW><id>20762344</id><snippet>class DmitryImageField(ImageField):

    def to_python(self, data):
        f = super(DmitryImageField, self).to_python(data)
        if f is None:
            return None

        try:
            from PIL import Image
        except ImportError:
            import Image

        # We need to get a file object for PIL. We might have a path or we might
        # have to read the data into memory.
        if hasattr(data, 'temporary_file_path'):
            file = data.temporary_file_path()
        else:
            if hasattr(data, 'read'):
                file = BytesIO(data.read())
            else:
                file = BytesIO(data['content'])

        try:
            im = Image.open(file)
            if im.format not in ('BMP', 'PNG', 'JPEG'):
                raise ValidationError("Unsupport image type. Please upload bmp, png or jpeg")
        except ImportError:
            # Under PyPy, it is possible to import PIL. However, the underlying
            # _imaging C module isn't available, so an ImportError will be
            # raised. Catch and re-raise.
            raise
        except Exception: # Python Imaging Library doesn't recognize it as an image
            raise ValidationError(self.error_messages['invalid_image'])

        if hasattr(f, 'seek') and callable(f.seek):
            f.seek(0)
        return f
</snippet></ROW><ROW><id>20762344</id><snippet>ImageField.to_python</snippet></ROW><ROW><id>20762344</id><snippet>ImageField</snippet></ROW><ROW><id>20762344</id><snippet>ImageField</snippet></ROW><ROW><id>20762344</id><snippet>im.verify()</snippet></ROW><ROW><id>20762412</id><snippet>rule = iptc.Rule()
match = rule.create_match('state')
match.state = 'RELATED,ESTABLISHED'
match.target = iptc.Target('ACCEPT')

chain = iptc.Chain(iptc.Table.(iptc.Table.FILTER), "INPUT")
chain.insert_rule(rule)
</snippet></ROW><ROW><id>20762417</id><snippet>&gt;&gt;&gt; str(42)
'42'
&gt;&gt;&gt; str(042)
'34'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20762417</id><snippet>clean_xxx</snippet></ROW><ROW><id>20762417</id><snippet>&gt;&gt;&gt; "1234".isdigit()
True
&gt;&gt;&gt; "A123".isdigit()
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20762417</id><snippet>    &lt;p&gt;Pay with PayPal.&lt;/p&gt;
    &lt;form action="" method="post"&gt;
    {% csrf_token %}
        &lt;input type="hidden" name="whichform" name="paypal" /&gt;
        {{ form1.as_p }}
        &lt;input type="submit" value="Buy"&gt;
        &lt;input type="reset" value="Reset"&gt;
    &lt;/form&gt;
    &lt;p&gt;Pay with your card.&lt;/p&gt;
    {% if form2.errors %}
    &lt;p style="color: red;"&gt;
        Please correct the error{{ form2.errors|pluralize }} below.
    &lt;/p&gt;
    {% endif %}
    &lt;form action="" method="post"&gt;
    {% csrf_token %}
        &lt;input type="hidden" name="whichform" name="card" /&gt;
        {{ form2.as_p }}
        &lt;input type="submit" value="Buy"&gt;
        &lt;input type="reset" value="Reset"&gt;
    &lt;/form&gt;
</snippet></ROW><ROW><id>20762417</id><snippet>def payment(request, type):
    if request.method == 'POST':
        whichform = request.POST.get("whichform")

        if whichform == "paypal":
            form = form1 = PaymentFormPaypal(request.POST)
            form2 =  PaymentFormCard()

        elif whichform == "card":
            form1 = PaymentFormPaypal()
            form = form2 =  PaymentFormCard(request.POST)

        else:
            # should not happen
            form1=PaymentFormPaypal()
            form2=PaymentFormCard()
            form = None

        if form and form.is_valid():
            profile = request.user.get_profile()
            profile.premiumstatus = True
            profile.save()
            # XXX fixed this, you want to REDIRECT here
            # Google for "post redirect get" for more infos
            return redirect(&lt;your home url here&gt;)

    else:
        form1=PaymentFormPaypal()
        form2=PaymentFormCard()

    return render(request, 'payment.html', {'form1': form1, 'form2': form2, 'request': request})
</snippet></ROW><ROW><id>20762609</id><snippet>string = 'Hi, This is a test. Are you surprised?'
words = re.split('[,!?.]', string)
print(words)
[u'Hi', u' This is a test', u' Are you surprised', u'']
</snippet></ROW><ROW><id>20762802</id><snippet>&gt;&gt;&gt; tokens = re.findall(ur'\w+', t.decode('utf-8'), flags=re.U)    # I did this to make sure I was working with a decoded text. If you are working with an encoded text, skip this. `t` is the equivalent of your `text`.

&gt;&gt;&gt; class ConcordanceIndex2(nltk.ConcordanceIndex):
    'Extends the ConcordanceIndex class.'
    def print_concordance(self, word, width=75, lines=25):
        half_width = (width - len(word) - 2) // 2
        context = width // 4 # approx number of words of context

        offsets = self.offsets(word)
        if offsets:
            lines = min(lines, len(offsets))
            print("Displaying %s of %s matches:" % (lines, len(offsets)))
            for i in offsets:
            if lines &lt;= 0:
                break
            left = (' ' * half_width +
                ' '.join([x.decode('utf-8') for x in self._tokens[i-context:i]]))    # decoded here for display purposes
            right = ' '.join([x.decode('utf-8') for x in self._tokens[i+1:i+context]])    # decoded here for display purposes
            left = left[-half_width:]
            right = right[:half_width]
            print(' '.join([left, self._tokens[i].decode('utf-8'), right]))    # decoded here for display purposes
            lines -= 1
        else:
            print("No matches")
</snippet></ROW><ROW><id>20762802</id><snippet>&gt;&gt;&gt; concordance_index = ConcordanceIndex2([x.encode('utf-8') for x in tokens], key=lambda s: s.lower())    # encoded here to match an encoded text
&gt;&gt;&gt; concordance_index.print_concordance(u'\u039a\u0391\u0399\u03a3\u0391\u03a1\u0395\u0399\u0391\u03a3'.encode('utf-8'))
Displaying 1 of 1 matches:
                           ΚΑΙΣΑΡΕΙΑΣ ΕΚΚΛΗΣΙΑΣΤΙΚΗ ΙΣΤΟΡΙΑ Euse
</snippet></ROW><ROW><id>20762802</id><snippet>&gt;&gt;&gt; concordance_index = ConcordanceIndex2(tokens, key=lambda s: s.lower())
&gt;&gt;&gt; concordance_index.print_concordance('\xce\x9a\xce\x91\xce\x99\xce\xa3\xce\x91\xce\xa1\xce\x95\xce\x99\xce\x91\xce\xa3')
Displaying 1 of 1 matches:
                           ΚΑΙΣΑΡΕΙΑΣ ΕΚΚΛΗΣΙΑΣΤΙΚΗ ΙΣΤΟΡΙΑ Euse
</snippet></ROW><ROW><id>20762876</id><snippet> if (x%y != 0): 
       myPossiblePrimes.add(x)
       myDividersList.add(y)
 elif x in myPossiblePrimes:
       myPossiblePrimes.remove(x)
</snippet></ROW><ROW><id>20762876</id><snippet> for x in range(2,15):
    for y in range(2,10):
        if x%y == 0 and x != y:
            myDividersList.add(y)
            break
    else: # the part below is executed if for loop ended without a break
        myPossiblePrimes.add(x)
</snippet></ROW><ROW><id>20762963</id><snippet>pygame.display.update
</snippet></ROW><ROW><id>20762963</id><snippet>pygame.display.update()
#                    ^^
</snippet></ROW><ROW><id>20762963</id><snippet>update</snippet></ROW><ROW><id>20762963</id><snippet>display</snippet></ROW><ROW><id>20763035</id><snippet>import codecs

...

def readPinyinTextfile(pinyintextfile):
    f = codecs.open(pinyintextfile, 'r', 'utf-8')
</snippet></ROW><ROW><id>20763035</id><snippet>apy = readPinyinTextfile('pinyinchars.txt')

newf = codecs.open(newname, 'w', 'utf-8')
</snippet></ROW><ROW><id>20763247</id><snippet>str.join()</snippet></ROW><ROW><id>20763247</id><snippet>import itertools
a = [''.join(i) for i in itertools.permutations("1234") ]
print(a)
</snippet></ROW><ROW><id>20763247</id><snippet>['1234', '1243', '1324', '1342', '1423', '1432', '2134', '2143', '2314', '2341', '2413', '2431', '3124', '3142', '3214', '3241', '3412', '3421', '4123', '4132', '4213', '4231', '4312', '4321']
</snippet></ROW><ROW><id>20763318</id><snippet>chmod +s file</snippet></ROW><ROW><id>20763318</id><snippet>root</snippet></ROW><ROW><id>20763318</id><snippet>chown root.root file</snippet></ROW><ROW><id>20763318</id><snippet>setcap cap_net_raw+ep file</snippet></ROW><ROW><id>20763405</id><snippet>save()</snippet></ROW><ROW><id>20763405</id><snippet>for i in qs:
    obj = myEmails(text=i.text)
    obj.save()
</snippet></ROW><ROW><id>20763537</id><snippet>split</snippet></ROW><ROW><id>20763537</id><snippet>s = 'smith, bob;jones, bill;doe, john'
for lname, fname in [q.split(",") for q in s.split(";")]:
    print fname, lname
</snippet></ROW><ROW><id>20763537</id><snippet>bob smith
bill jones
john doe
</snippet></ROW><ROW><id>20763674</id><snippet>Python 3</snippet></ROW><ROW><id>20763674</id><snippet>print val</snippet></ROW><ROW><id>20763674</id><snippet>print(val)</snippet></ROW><ROW><id>20763674</id><snippet>print</snippet></ROW><ROW><id>20763674</id><snippet>root</snippet></ROW><ROW><id>20763674</id><snippet>master</snippet></ROW><ROW><id>20763674</id><snippet>root</snippet></ROW><ROW><id>20763950</id><snippet>.values()</snippet></ROW><ROW><id>20763950</id><snippet>&gt;&gt;&gt; Blog.objects.values('id', 'name')
[{'id': 1, 'name': 'Beatles Blog'}]
</snippet></ROW><ROW><id>20763950</id><snippet>MyModel.objects.filter(mobile_name='xyz').values('total_mark')
</snippet></ROW><ROW><id>20764063</id><snippet>context.lower()
counts = {word: context.count(word)
          for word in links}
</snippet></ROW><ROW><id>20764063</id><snippet>context</snippet></ROW><ROW><id>20764399</id><snippet>groupindex</snippet></ROW><ROW><id>20764399</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; rstr = r"(?P&lt;DEF_FUNC&gt;def (?P&lt;NAME_FUNC&gt;\w+)\s*\((.*?)\):)|(?P&lt;OTHERS&gt;\w+)"
&gt;&gt;&gt; regex = re.compile(rstr)   
&gt;&gt;&gt; regex.groupindex
{'DEF_FUNC': 1, 'OTHERS': 4, 'NAME_FUNC': 2}
</snippet></ROW><ROW><id>20764399</id><snippet>&gt;&gt;&gt; sorted(regex.groupindex, key=regex.groupindex.get)
['DEF_FUNC', 'NAME_FUNC', 'OTHERS']
</snippet></ROW><ROW><id>20764510</id><snippet>l = [1, 2, 3, 4, 5]

def printMiddle(*args):
    print(args[1:-1])

printMiddle(*l)
</snippet></ROW><ROW><id>20764510</id><snippet>*</snippet></ROW><ROW><id>20764510</id><snippet>args</snippet></ROW><ROW><id>20764510</id><snippet>[1:-1]</snippet></ROW><ROW><id>20764568</id><snippet>Line</snippet></ROW><ROW><id>20764568</id><snippet>Flowable</snippet></ROW><ROW><id>20764568</id><snippet>SimpleDocTemplate.build()</snippet></ROW><ROW><id>20764568</id><snippet>Drawing</snippet></ROW><ROW><id>20764568</id><snippet>Flowable</snippet></ROW><ROW><id>20764568</id><snippet>d = Drawing(100, 1)
d.add(Line(0, 0, 100, 0))
rep.add(d)
</snippet></ROW><ROW><id>20764585</id><snippet>from subprocess import Popen, PIPE
p = Popen(['omxplayer, filePath], stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
p.stdin.write(' ') # sends a space to the running process
p.stdin.flush() # if the above isn't enough, try adding a flush
</snippet></ROW><ROW><id>20764585</id><snippet>^[[D</snippet></ROW><ROW><id>20764585</id><snippet>stream.write("\x1b[D")</snippet></ROW><ROW><id>20764585</id><snippet>"^[[D"</snippet></ROW><ROW><id>20764585</id><snippet>^[</snippet></ROW><ROW><id>20764905</id><snippet>string</snippet></ROW><ROW><id>20764905</id><snippet>workbook = xlsxwriter.Workbook('Test.xlsx', {'strings_to_numbers': True})
</snippet></ROW><ROW><id>20764905</id><snippet>write()</snippet></ROW><ROW><id>20765036</id><snippet>result</snippet></ROW><ROW><id>20765036</id><snippet>import threading
class YourThread(threading.Thread):
    ...                # code you already have.
    self.__result      # code I'm suggesting.

    def get_result(self):
        return self.__result

    def run(self):
        # You have to modify the code in your run method in order to provide
        # a value for self.__result.
</snippet></ROW><ROW><id>20765036</id><snippet>wait</snippet></ROW><ROW><id>20765036</id><snippet>myMailInstance</snippet></ROW><ROW><id>20765036</id><snippet>join</snippet></ROW><ROW><id>20765036</id><snippet>myMailInstance.start()

logging.debug('This message should be printed before the mail thread ends')

myMailInstance.join()

if myMailInstance.get_result() == 0:
    logging.debug('Success')
elif myMailInstance.get_result() == 1:
    logging.debug('Failed')
</snippet></ROW><ROW><id>20765286</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; fileText = '&lt;text top="52" left="20" width="383" height="15" font="0"&gt;&lt;b&gt;test&lt;/b&gt;&lt;/text&gt;'
&gt;&gt;&gt; fileText = re.sub("&lt;b&gt;(.*?)&lt;/b&gt;", r"\1", fileText, flags=re.DOTALL)
&gt;&gt;&gt; fileText
'&lt;text top="52" left="20" width="383" height="15" font="0"&gt;test&lt;/text&gt;'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20765286</id><snippet>"\1"</snippet></ROW><ROW><id>20765286</id><snippet>r"\1"</snippet></ROW><ROW><id>20765286</id><snippet>&gt;&gt;&gt; "\1"
'\x01'
&gt;&gt;&gt; r"\1"
'\\1'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20765391</id><snippet>Int16 x1 = 4096;  
var x2 = IPAddress.HostToNetworkOrder(x1);
</snippet></ROW><ROW><id>20765391</id><snippet>IPAddress.HostToNetworkOrder</snippet></ROW><ROW><id>20765478</id><snippet>string</snippet></ROW><ROW><id>20765478</id><snippet>replace</snippet></ROW><ROW><id>20765478</id><snippet>contri[6]</snippet></ROW><ROW><id>20765483</id><snippet>if selling in Pickaxes:

       confirm = raw_input ("Are you sure you wish to sell the item {} "
                 "for {} Coins? (y/n)\n&gt;&gt;".format(
                     selling,Pickaxes[selling]["sell"]))
       if confirm.lower() in ["yes","y"]:
            i = inventory.index(selling)
            del inventory[i]
            money = money + Pickaxes[selling]["sell"]
            print "You now have", money, "Coins"
            time.sleep(2)
            raw_input("\nHit Enter to return to the menu\n")
            home()
</snippet></ROW><ROW><id>20765853</id><snippet>SESSION_REFRESH_EACH_REQUEST</snippet></ROW><ROW><id>20765853</id><snippet>max-age</snippet></ROW><ROW><id>20765853</id><snippet>Set-Cookies</snippet></ROW><ROW><id>20765853</id><snippet>Set-Cookie</snippet></ROW><ROW><id>20765853</id><snippet>Set-Cookie</snippet></ROW><ROW><id>20765853</id><snippet>Set-Cookie</snippet></ROW><ROW><id>20765853</id><snippet>PERMANENT_SESSION_LIFETIME</snippet></ROW><ROW><id>20765853</id><snippet>Set-Cookie</snippet></ROW><ROW><id>20765853</id><snippet>Set-Cookie</snippet></ROW><ROW><id>20765853</id><snippet>Set-Cookie</snippet></ROW><ROW><id>20765853</id><snippet>SESSION_REFRESH_EACH_REQUEST</snippet></ROW><ROW><id>20765853</id><snippet>Set-Cookie</snippet></ROW><ROW><id>20765853</id><snippet>True</snippet></ROW><ROW><id>20765853</id><snippet>False</snippet></ROW><ROW><id>20765853</id><snippet>set-cookie</snippet></ROW><ROW><id>20765853</id><snippet>PERMANENT_SESSION_LIFETIME</snippet></ROW><ROW><id>20765853</id><snippet>SESSION_REFRESH_EACH_REQUEST</snippet></ROW><ROW><id>20765865</id><snippet>Timer</snippet></ROW><ROW><id>20765865</id><snippet>Timer</snippet></ROW><ROW><id>20765865</id><snippet>Lock</snippet></ROW><ROW><id>20765865</id><snippet>Timer</snippet></ROW><ROW><id>20765865</id><snippet>RepeatingTimer</snippet></ROW><ROW><id>20765865</id><snippet>setInterval</snippet></ROW><ROW><id>20765865</id><snippet>clearInterval</snippet></ROW><ROW><id>20765865</id><snippet>repeat</snippet></ROW><ROW><id>20765865</id><snippet>threading</snippet></ROW><ROW><id>20765865</id><snippet>threading.py</snippet></ROW><ROW><id>20765865</id><snippet>Timer</snippet></ROW><ROW><id>20765865</id><snippet>class RepeatableTimer(threading.Timer):
    def __init__(self, interval, 
                 function, args=None, kwargs=None, repeat=False):
        super(RepeatableTimer, self).__init__(interval, function, args, kwargs)
        self.repeat = repeat
        self.lock = threading.Lock()
    def cancel(self):
        with self.lock:
            self.repeat = False
        super(RepeatableTimer, self).cancel()
    def run(self):
        while True:
            self.finished.clear()
            super(RepeatableTimer, self).run()
            with self.lock:
                if not self.repeat:
                    break
</snippet></ROW><ROW><id>20765865</id><snippet>Event</snippet></ROW><ROW><id>20765865</id><snippet>repeat</snippet></ROW><ROW><id>20765865</id><snippet>times</snippet></ROW><ROW><id>20765865</id><snippet>-1</snippet></ROW><ROW><id>20765865</id><snippet>setInterval</snippet></ROW><ROW><id>20765865</id><snippet>clearInterval</snippet></ROW><ROW><id>20765865</id><snippet>def setInterval(sec=None, func=None, *args, **kw):
    task = RepeatableTimer(sec, func, args, kw, repeat=True)
    task.daemon = True
    task.start()
    return task

def clearInterval(task):
    task.cancel()
</snippet></ROW><ROW><id>20765865</id><snippet>clearInterval = RepeatableTimer.cancel</snippet></ROW><ROW><id>20765865</id><snippet>clearInterval</snippet></ROW><ROW><id>20765865</id><snippet>setInterval</snippet></ROW><ROW><id>20765865</id><snippet>isinstance</snippet></ROW><ROW><id>20765865</id><snippet>type</snippet></ROW><ROW><id>20765865</id><snippet>if</snippet></ROW><ROW><id>20765865</id><snippet>if</snippet></ROW><ROW><id>20765865</id><snippet>def setInterval(sec=None, func=None, *args, **kw):
    if isinstance(func, RepeatableTimer):
        task.cancel()
    else:
        task = RepeatableTimer(sec, func, args, kw, repeat=True)
        task.daemon = True
        task.start()
        return task

def clearInterval(task):
    setInterval(func=task)
</snippet></ROW><ROW><id>20765865</id><snippet>myInterval = setInterval(1, print, "Hello, world!")
time.sleep(3)
clearInterval(myInterval)
time.sleep(5)
</snippet></ROW><ROW><id>20765903</id><snippet>user_can_access</snippet></ROW><ROW><id>20765903</id><snippet>user</snippet></ROW><ROW><id>20765903</id><snippet>kwargs</snippet></ROW><ROW><id>20765903</id><snippet>def test_brett_can_access(self):
    resp = self.client.get("/p4_users/can_access/brett.bates")
    # self.assertContains(resp, "...") etc.
</snippet></ROW><ROW><id>20765932</id><snippet>&gt;&gt;&gt; L = [1, 2, 3, 4, 6, "apple"]
&gt;&gt;&gt; L[0]
1
&gt;&gt;&gt; L[1]
2
&gt;&gt;&gt; L[4]
6
&gt;&gt;&gt; L[5]
"apple"
</snippet></ROW><ROW><id>20765932</id><snippet>&gt;&gt;&gt; L0 = 1
&gt;&gt;&gt; L1 = 2
&gt;&gt;&gt; L2 = 3
&gt;&gt;&gt; L3 = 4
&gt;&gt;&gt; L4 = 6
&gt;&gt;&gt; L5 = "apple"
&gt;&gt;&gt; L1
2
</snippet></ROW><ROW><id>20765932</id><snippet>&gt;&gt;&gt; L = [(1, 2) for i in range(100000)]
</snippet></ROW><ROW><id>20765932</id><snippet>for</snippet></ROW><ROW><id>20765932</id><snippet>&gt;&gt;&gt; old_list = [(1, 2), (3, 4), (5, 6)]    # A list of coordinates represented by tuples
&gt;&gt;&gt; new_list = []
&gt;&gt;&gt; for item in old_list:
        new_item = (item[0]+1, item[1]*4)
        new_list.append(new_item)

&gt;&gt;&gt; new_list
[(2, 8), (4, 16), (6, 24)]
</snippet></ROW><ROW><id>20765932</id><snippet>b w b
b b w
w w w
</snippet></ROW><ROW><id>20765932</id><snippet>[[0, 1, 0],
 [0, 0, 1],
 [1, 1 ,1]]
</snippet></ROW><ROW><id>20765932</id><snippet>(x, y)</snippet></ROW><ROW><id>20765932</id><snippet>list_of_lists[y][x]</snippet></ROW><ROW><id>20766275</id><snippet>ni = Windows.Networking.Connectivity.NetworkInformation
profile = ni.GetInternetConnectionProfile()
if profile:
    interface = profile.NetworkAdapter.IanaInterfaceType
    if interface == 71:
        do WiFi stuff
    elif interface == 6:
        do Ethernet stuff
    else:
        do wtf stuff
</snippet></ROW><ROW><id>20766275</id><snippet>IanaInterfaceType</snippet></ROW><ROW><id>20766275</id><snippet>Win32_NetworkAdapter</snippet></ROW><ROW><id>20766275</id><snippet>MSFT_NetworkAdapter</snippet></ROW><ROW><id>20766275</id><snippet>NetworkAdapter</snippet></ROW><ROW><id>20766275</id><snippet>Win32_IP4RouteTable</snippet></ROW><ROW><id>20766275</id><snippet>Win32_NetworkAdapaterConfiguration</snippet></ROW><ROW><id>20766275</id><snippet>InterfaceIndex</snippet></ROW><ROW><id>20766275</id><snippet>Win32_NetworkAdapter</snippet></ROW><ROW><id>20766275</id><snippet>InterfaceIndex</snippet></ROW><ROW><id>20766275</id><snippet>AdapterType</snippet></ROW><ROW><id>20766275</id><snippet>!= "Wireless"</snippet></ROW><ROW><id>20766275</id><snippet>ctypes</snippet></ROW><ROW><id>20766275</id><snippet>pywin32</snippet></ROW><ROW><id>20766275</id><snippet>import wmi
MY_IP = '10.1.2.3'
w = wmi.WMI()
for nac in w.Win32_NetworkAdapterConfiguration():
    if MY_IP in nac.IPAddress:
        idx = nac.InterfaceIndex
        break
else:
    oops, do something, no NIC has that address
na = w.Win32_NetworkAdapter(InterfaceIndex=idx)
if not na:
    oops, unlikely race condition, NIC disabled right before we checked it
if na[0].AdapterType == 'Wireless':
    do WiFi stuff
elif na[0].AdapterType.startswith('Ethernet'):
    do Ethernet stuff
else:
    who's using LocalTalk in 2013?
</snippet></ROW><ROW><id>20766275</id><snippet>wmi</snippet></ROW><ROW><id>20766275</id><snippet>=</snippet></ROW><ROW><id>20766275</id><snippet>TARGET_IP = '10.10.10.10'
w = wmi.WMI()
rt = w.Win32_IP4RouteTable(Destination=TARGET_IP)
if not rt:
    oops, no route to host
idx = rt[0].InterfaceIndex
# same as above
</snippet></ROW><ROW><id>20766293</id><snippet>locale-gen sv_SE.utf8
locale-update LANG=sv_SE.utf8
reboot
</snippet></ROW><ROW><id>20766379</id><snippet>objects.filter</snippet></ROW><ROW><id>20766379</id><snippet>classmethod</snippet></ROW><ROW><id>20766379</id><snippet>class Channel(models.Model):
    name = models.CharField(max_length=200)
    accountid = models.CharField(max_length=34)

    @classmethod
    def get_channel_list(cls, acc):
        return cls.objects.filter(accountid=acc).values_list('name', flat=True)
</snippet></ROW><ROW><id>20766379</id><snippet>Channel</snippet></ROW><ROW><id>20766379</id><snippet>get_channel_list</snippet></ROW><ROW><id>20766379</id><snippet>class ChannelManager(models.Manager):
    def get_channel_list(self, acc):
        return self.filter(accountid=acc).values_list('name', flat=True)

class Channel(models.Model):
    name = models.CharField(max_length=200)
    accountid = models.CharField(max_length=34)

    objects = ChannelManager()
</snippet></ROW><ROW><id>20766483</id><snippet>request.path</snippet></ROW><ROW><id>20766483</id><snippet>/a/?b=c</snippet></ROW><ROW><id>20766483</id><snippet>request.path</snippet></ROW><ROW><id>20766483</id><snippet>/a</snippet></ROW><ROW><id>20766483</id><snippet>c</snippet></ROW><ROW><id>20766483</id><snippet>next</snippet></ROW><ROW><id>20766483</id><snippet>?</snippet></ROW><ROW><id>20766483</id><snippet>request.args</snippet></ROW><ROW><id>20766483</id><snippet>/a/?b=c</snippet></ROW><ROW><id>20766483</id><snippet>request.args.get('b')</snippet></ROW><ROW><id>20766483</id><snippet>"c"</snippet></ROW><ROW><id>20766483</id><snippet>request.args.get('next')</snippet></ROW><ROW><id>20766483</id><snippet>&lt;form method="POST" action="/login"&gt;
    ...
&lt;/form&gt;
</snippet></ROW><ROW><id>20766483</id><snippet>/login</snippet></ROW><ROW><id>20766483</id><snippet>/login/?next=%2Fsettings%2F</snippet></ROW><ROW><id>20766483</id><snippet>next</snippet></ROW><ROW><id>20766483</id><snippet>&lt;form method="POST"&gt;
    ...
&lt;/form&gt;
</snippet></ROW><ROW><id>20766483</id><snippet>/login/?next=%2Fsettings%2f</snippet></ROW><ROW><id>20766553</id><snippet>url</snippet></ROW><ROW><id>20766553</id><snippet>url(r'^dev/(?P&lt;file_name&gt;[-\w/.]+)', dev_static)
</snippet></ROW><ROW><id>20766553</id><snippet>/</snippet></ROW><ROW><id>20766553</id><snippet>.</snippet></ROW><ROW><id>20766553</id><snippet>abc/file.js</snippet></ROW><ROW><id>20766589</id><snippet>final = [['K'], ['E'], ['Y']]
message = ['F', 'F', 'F', ...]
while message:
    for lst in final:
        for _ in range(2):
            lst.append(message.pop(0))
</snippet></ROW><ROW><id>20766589</id><snippet>final = [final[index] + reduce(lambda x, y: x + y, 
                               list(message[i:i+2] for i in 
                                    range(index,
                                          len(message), 
                                          2 * len(final))))
         for index in range(len(final))]
</snippet></ROW><ROW><id>20766605</id><snippet>stdout.read()</snippet></ROW><ROW><id>20766605</id><snippet>with open('filename') as f:
    for line in f:
        # Each line will be iterated; so you could call a function here
        # that does the connection via SSH
        print(line)
</snippet></ROW><ROW><id>20766702</id><snippet>import os
import json
import subprocess

hello1 = "Hello World 1"
hello2 = "Hello World 2"

jsonData = '{"pp": [0,3,5,7,9], "sp": [1,2,4,6,8]}'
jj = json.loads(jsonData)

print jj['pp']
print jj['sp']

os.putenv( 'jj', ' '.join( str(v) for v in jj['pp']  ) )

print "start"
subprocess.call(['./test.sh', hello1, hello2 ])
print "end"
</snippet></ROW><ROW><id>20766702</id><snippet>echo $1
echo $2

for el in $jj
do
    echo "$el"
done
</snippet></ROW><ROW><id>20766936</id><snippet>-h</snippet></ROW><ROW><id>20766936</id><snippet>from PyQt4 import QtCore, QtGui

class Window(QtGui.QWidget):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        message = self.tr('Hello World')
        label = QtGui.QLabel('&lt;center&gt;&lt;b&gt;%s&lt;/b&gt;&lt;center&gt;' % message, self)
        buttonbox = QtGui.QDialogButtonBox(self)
        buttonbox.addButton(QtGui.QDialogButtonBox.Yes)
        buttonbox.addButton(QtGui.QDialogButtonBox.No)
        buttonbox.addButton(QtGui.QDialogButtonBox.Cancel)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(label)
        layout.addWidget(buttonbox)

if __name__ == '__main__':

    import sys, os, getopt

    options, args = getopt.getopt(sys.argv[1:], 'hl:')
    options = dict(options)
    if '-h' in options:
        print("""
Usage: %s [opts] [path/to/other.qm]

Options:
 -h        display this help and exit
 -l [LOC]  specify locale (e.g. fr, de, es, etc)
""" % os.path.basename(__file__))
        sys.exit(2)
    app = QtGui.QApplication(sys.argv)
    translator = QtCore.QTranslator(app)
    if '-l' in options:
        locale = options['-l']
    else:
        locale = QtCore.QLocale.system().name()
    # translator for built-in qt strings
    translator.load('qt_%s' % locale,
                    QtCore.QLibraryInfo.location(
                        QtCore.QLibraryInfo.TranslationsPath))
    app.installTranslator(translator)
    if args:
        # translator for app-specific strings
        translator = QtCore.QTranslator(app)
        translator.load(args[0])
        app.installTranslator(translator)
    window = Window()
    window.setGeometry(500, 300, 200, 60)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20766976</id><snippet>zip</snippet></ROW><ROW><id>20766976</id><snippet>list(zip(...))</snippet></ROW><ROW><id>20766976</id><snippet>if sys.version_info[0] &gt; 2:
</snippet></ROW><ROW><id>20767157</id><snippet>for i,files_in_folder in enumerate(all_files_in_all_folders):
    # Incase files are too large for memory, we will read 1mb increments
    block_size = 2**20
    # Iterate through each folder to read each file
    for each_file in files_in_folder:
        # Hasher will get the hash value of each files in this folder
        hasher = hashlib.md5()
    # Now i'm opening every file to get it's hash value below
        with open(subfolder_paths[i][0]+"\\"+each_file, 'rb') as to_check_for_duplicates:
            # We send large files bits by bits to the hasher so we can read larger files
            while True:
                file_buffer = to_check_for_duplicates.read(block_size)
                # If we have reached the end of the file, we break out
                if not file_buffer:
                    break
                # Updating the hasher everytime we feed more bytes
                hasher.update(file_buffer)
        # Effectivley putting each hash hex value into a dictionary with the filepath and key
        the_hash_dictionary[subfolder_paths[i][0]+"\\"+each_file] = hasher.hexdigest()
</snippet></ROW><ROW><id>20767173</id><snippet>get_specials</snippet></ROW><ROW><id>20767173</id><snippet>specials</snippet></ROW><ROW><id>20767173</id><snippet>def get_specials():
    # …

    specials = {'M': monday,
                'T': tuesday,
                'W': wednesday,
                'R': thursday,
                'F': friday,
                'St': saturday,
                'Sn': sunday}
    return specials
</snippet></ROW><ROW><id>20767173</id><snippet>specials = get_specials()</snippet></ROW><ROW><id>20767173</id><snippet>get_specials()</snippet></ROW><ROW><id>20767173</id><snippet>None</snippet></ROW><ROW><id>20767256</id><snippet>or</snippet></ROW><ROW><id>20767256</id><snippet>and</snippet></ROW><ROW><id>20767256</id><snippet>|</snippet></ROW><ROW><id>20767256</id><snippet>&amp;</snippet></ROW><ROW><id>20767256</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; data = np.array([1,1,1,2,2,2,3,3,3,4,4,4,5,5,5])
&gt;&gt;&gt; required = np.where((data &lt;= 2) | (data &gt;= 4),data,np.nan)
&gt;&gt;&gt; required
array([  1.,   1.,   1.,   2.,   2.,   2.,  nan,  nan,  nan,   4.,   4.,
         4.,   5.,   5.,   5.])
</snippet></ROW><ROW><id>20767533</id><snippet>StreamHandler</snippet></ROW><ROW><id>20767533</id><snippet>[handlers]
keys=logfile,logconsole

[handler_logconsole]
class=StreamHandler
# other configuration directives as you like

[logger_root]
handlers=logfile,logconsole
</snippet></ROW><ROW><id>20767799</id><snippet>'data'</snippet></ROW><ROW><id>20767799</id><snippet>'id'</snippet></ROW><ROW><id>20767799</id><snippet>&gt;&gt;&gt; json_data['data'].keys()
[u'numberOfPages', u'domainSummaryDTOs', u'rowsFound', u'qTime']
</snippet></ROW><ROW><id>20767799</id><snippet>id</snippet></ROW><ROW><id>20767799</id><snippet>json_data['data']['domainSummaryDTOs']</snippet></ROW><ROW><id>20767799</id><snippet>for entry in json_data['data']['domainSummaryDTOs']:
    print entry['id']
</snippet></ROW><ROW><id>20767799</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json_data = json.loads('''{"data":{"numberOfPages":512,"domainSummaryDTOs":[{"id":"http://www.cdfdmy.com/","timestamp":"Tue May 14 12:59:28 GMT 2013","title":"【推荐】成都空压机|四川空压机|成都空气压缩机|四川空气压缩机|成都螺杆空压机|四川螺杆空压机|成都双螺杆空压 机|四川双螺杆空压机|成都福道贸易有限公司","exploitabilityLevel":4,"bsqli":2,"sqli":2,"url":"http://www.cdfdmy.com/","xss":0},{"id":"http://www.chushijob.com/","timestamp":"Tue May 14 12:59:28 GMT 2013","title":"餐饮世界人才网-中国厨师人才网-中国酒店人才网","exploitabilityLevel":5,"bsqli":3,"sqli":2,"url":"http://www.chushijob.com/","xss":2},{"id":"http://www.hbenshi.com/","timestamp":"Tue May 14 12:59:28 GMT 2013","title":"恩施旅游网--恩施大峡谷 腾龙洞 利川 清江闯滩 土司城 欢迎您！","exploitabilityLevel":5,"bsqli":3,"sqli":4,"url":"http://www.hbenshi.com/","xss":1},{"id":"http://bbs.laiyb.com/","timestamp":"Mon Apr 29 03:30:09 GMT 2013","title":"莱阳论坛_莱阳吧_莱阳人的网络社区 -","exploitabilityLevel":4,"bsqli":4,"sqli":1,"url":"http://bbs.laiyb.com/","xss":0},{"id":"http://photostudio-town.com/","timestamp":"Mon Apr 29 03:30:09 GMT 2013","title":"フォトスタジオ・タウン-就職証明写真・お受験写真・オーディション写真-","exploitabilityLevel":5,"bsqli":1,"sqli":1,"url":"http://photostudio-town.com/","xss":1},{"id":"http://sp.sosfang.com/","timestamp":"Mon Apr 29 03:30:09 GMT 2013","title":"上海商铺出租/转让,上海门面房出租信息/上海门面转让-上海商铺网","exploitabilityLevel":2,"bsqli":0,"sqli":1,"url":"http://sp.sosfang.com/","xss":0},{"id":"http://www.msdssafe.com/","timestamp":"Sat Apr 06 11:03:33 GMT 2013","title":"MSDS查 询网 英文MSDS查询网 MSDS MSDS报告 MSDS下载 msds是什么意思 MSDS安全网","exploitabilityLevel":4,"bsqli":15,"sqli":3,"url":"http://www.msdssafe.com/","xss":0},{"id":"http://www.tiananjidian.com/","timestamp":"Sat Apr 06 11:15:03 GMT 2013","title":"上海精工阀门厂总代理★上海精工阀门|上工牌阀门|精工阀门厂|上海阀门|精工阀门|广东阀门|广州阀门|惠州阀门|东莞阀门|佛山阀门|深圳阀门|中山阀门|潮州阀门|珠海阀门|河源阀门|汕头阀门|肇庆阀门|","exploitabilityLevel":3,"bsqli":0,"sqli":2,"url":"http://www.tiananjidian.com/","xss":1},{"id":"http://www.ywscocie.com/","timestamp":"Sat Apr 06 11:20:46 GMT 2013","title":"","exploitabilityLevel":2,"bsqli":0,"sqli":2,"url":"http://www.ywscocie.com/","xss":0},{"id":"http://bookingsbarbados.com/","timestamp":"Wed May 15 00:54:31 GMT 2013","title":"Bookings Caribbean | Barbados Bookings Center. Book barbados Hotels and Activities. Search, tourism ","exploitabilityLevel":5,"bsqli":4,"sqli":2,"url":"http://bookingsbarbados.com/","xss":18}],"rowsFound":5115,"qTime":1}}
... ''')
&gt;&gt;&gt; for entry in json_data['data']['domainSummaryDTOs']:
...     print entry['id']
... 
http://www.cdfdmy.com/
http://www.chushijob.com/
http://www.hbenshi.com/
http://bbs.laiyb.com/
http://photostudio-town.com/
http://sp.sosfang.com/
http://www.msdssafe.com/
http://www.tiananjidian.com/
http://www.ywscocie.com/
http://bookingsbarbados.com/
</snippet></ROW><ROW><id>20767799</id><snippet>json</snippet></ROW><ROW><id>20767799</id><snippet>python -m json.tool filename.json
</snippet></ROW><ROW><id>20767799</id><snippet>{
    "data": {
        "numberOfPages": 512,
        "domainSummaryDTOs": [
            {
                "id": "http://www.cdfdmy.com/",
                "timestamp": "Tue May 14 12:59:28 GMT 2013",
                "title": "【推荐】成都空压机|四川空压机|成都空气压缩机|四川空气压缩机|成都螺杆空压机|四川螺杆空压机|成都双螺杆空压机|四川双螺杆空压机|成都福道贸易有限公司",
                "exploitabilityLevel": 4,
                "bsqli": 2,
                "sqli": 2,
                "url": "http://www.cdfdmy.com/",
                "xss": 0
            },
            {
                "id": "http://www.chushijob.com/",
                "timestamp": "Tue May 14 12:59:28 GMT 2013",
                "title": "餐饮世界人才网-中国厨师人才网-中国酒店人才网",
                "exploitabilityLevel": 5,
                "bsqli": 3,
                "sqli": 2,
                "url": "http://www.chushijob.com/",
                "xss": 2
            },
            {
                "id": "http://www.hbenshi.com/",
                "timestamp": "Tue May 14 12:59:28 GMT 2013",
                "title": "恩施旅游网--恩施大峡谷 腾龙洞 利川 清江闯滩 土司城 欢迎您！",
                "exploitabilityLevel": 5,
                "bsqli": 3,
                "sqli": 4,
                "url": "http://www.hbenshi.com/",
                "xss": 1
            },
            {
                "id": "http://bbs.laiyb.com/",
                "timestamp": "Mon Apr 29 03:30:09 GMT 2013",
                "title": "莱阳论坛_莱阳吧_莱阳人的网络社区 -",
                "exploitabilityLevel": 4,
                "bsqli": 4,
                "sqli": 1,
                "url": "http://bbs.laiyb.com/",
                "xss": 0
            },
            {
                "id": "http://photostudio-town.com/",
                "timestamp": "Mon Apr 29 03:30:09 GMT 2013",
                "title": "フォトスタジオ・タウン-就職証明写真・お受験写真・オーディション写真-",
                "exploitabilityLevel": 5,
                "bsqli": 1,
                "sqli": 1,
                "url": "http://photostudio-town.com/",
                "xss": 1
            },
            {
                "id": "http://sp.sosfang.com/",
                "timestamp": "Mon Apr 29 03:30:09 GMT 2013",
                "title": "上海商铺出租/转让,上海门面房出租信息/上海门面转让-上海商铺网",
                "exploitabilityLevel": 2,
                "bsqli": 0,
                "sqli": 1,
                "url": "http://sp.sosfang.com/",
                "xss": 0
            },
            {
                "id": "http://www.msdssafe.com/",
                "timestamp": "Sat Apr 06 11:03:33 GMT 2013",
                "title": "MSDS查询网 英文MSDS查询网 MSDS MSDS报告 MSDS下载 msds是什么意思 MSDS安全网",
                "exploitabilityLevel": 4,
                "bsqli": 15,
                "sqli": 3,
                "url": "http://www.msdssafe.com/",
                "xss": 0
            },
            {
                "id": "http://www.tiananjidian.com/",
                "timestamp": "Sat Apr 06 11:15:03 GMT 2013",
                "title": "上海精工阀门厂总代理★上海精工阀门|上工牌阀门|精工阀门厂|上海阀门|精工阀门|广东阀门|广州阀门|惠州阀门|东莞阀门|佛山阀门|深圳阀门|中山阀门|潮州阀门|珠海阀门|河源阀门|汕头阀门|肇庆阀门|",
                "exploitabilityLevel": 3,
                "bsqli": 0,
                "sqli": 2,
                "url": "http://www.tiananjidian.com/",
                "xss": 1
            },
            {
                "id": "http://www.ywscocie.com/",
                "timestamp": "Sat Apr 06 11:20:46 GMT 2013",
                "title": "",
                "exploitabilityLevel": 2,
                "bsqli": 0,
                "sqli": 2,
                "url": "http://www.ywscocie.com/",
                "xss": 0
            },
            {
                "id": "http://bookingsbarbados.com/",
                "timestamp": "Wed May 15 00:54:31 GMT 2013",
                "title": "Bookings Caribbean | Barbados Bookings Center. Book barbados Hotels and Activities. Search, tourism ",
                "exploitabilityLevel": 5,
                "bsqli": 4,
                "sqli": 2,
                "url": "http://bookingsbarbados.com/",
                "xss": 18
            }
        ],
        "rowsFound": 5115,
        "qTime": 1
    }
}
</snippet></ROW><ROW><id>20767950</id><snippet>next</snippet></ROW><ROW><id>20767950</id><snippet>/login?next=%2Frequests  
</snippet></ROW><ROW><id>20767950</id><snippet>&lt;form action="{{ url_for('login') }}" method='POST'&gt;
</snippet></ROW><ROW><id>20767950</id><snippet>/login</snippet></ROW><ROW><id>20767950</id><snippet>action</snippet></ROW><ROW><id>20767950</id><snippet>action=""</snippet></ROW><ROW><id>20767950</id><snippet>next=next</snippet></ROW><ROW><id>20767950</id><snippet>&lt;form action="{{ url_for('login', next=next) }}" method='POST'&gt;
</snippet></ROW><ROW><id>20768026</id><snippet>myword\n
</snippet></ROW><ROW><id>20768026</id><snippet>\r</snippet></ROW><ROW><id>20768026</id><snippet>\r\n</snippet></ROW><ROW><id>20768026</id><snippet>.strip()</snippet></ROW><ROW><id>20768026</id><snippet>&gt;&gt;&gt; 'myword\n'.strip()
myword
</snippet></ROW><ROW><id>20768041</id><snippet>urls.py</snippet></ROW><ROW><id>20768041</id><snippet>from django.shortcuts import render

def calculateMark(request, mobile_a, mobile_b):
    mobiles_list = [mobile_a, mobile_b]

    results = []
    for mobile in mobiles_list:
        record = TechSpecificationAdd.objects.filter(mobile_name=mobile).values('dimension', 'body_material', 'weight')
        results += record

    return render(request, 'compare.html', {'data': results})
</snippet></ROW><ROW><id>20768041</id><snippet>request</snippet></ROW><ROW><id>20768041</id><snippet>{{ record.dimension }}</snippet></ROW><ROW><id>20768041</id><snippet>{{ record.body_material }}</snippet></ROW><ROW><id>20768041</id><snippet>{{ record.weight }}</snippet></ROW><ROW><id>20768041</id><snippet>results.append(dict)</snippet></ROW><ROW><id>20768041</id><snippet>results += record</snippet></ROW><ROW><id>20768041</id><snippet>{{ record }}</snippet></ROW><ROW><id>20768041</id><snippet>render_to_response</snippet></ROW><ROW><id>20768041</id><snippet>RequestContext</snippet></ROW><ROW><id>20768041</id><snippet>django.shortcuts.render</snippet></ROW><ROW><id>20768199</id><snippet>(unsigned long)</snippet></ROW><ROW><id>20768199</id><snippet>2**32 (or 1 &lt;&lt; 32)</snippet></ROW><ROW><id>20768199</id><snippet>&gt;&gt;&gt; -1
-1
&gt;&gt;&gt; _ + 2**32
4294967295L
&gt;&gt;&gt; bin(_)
'0b11111111111111111111111111111111'
</snippet></ROW><ROW><id>20768199</id><snippet>~</snippet></ROW><ROW><id>20768199</id><snippet>ctypes</snippet></ROW><ROW><id>20768199</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; ctypes.c_ulong(-1)  # stuff Python's -1 into a C unsigned long
c_ulong(4294967295L)
&gt;&gt;&gt; _.value
4294967295L
</snippet></ROW><ROW><id>20768199</id><snippet>unsigned long</snippet></ROW><ROW><id>20768282</id><snippet>sudo apt-get install msttcorefonts -qq
</snippet></ROW><ROW><id>20768282</id><snippet>import matplotlib as mpl
font_paths = mpl.font_manager.findSystemFonts()
font_objects = mpl.font_manager.createFontList(font_paths)
font_names = [f.name for f in font_objects]
print font_names
</snippet></ROW><ROW><id>20768282</id><snippet>sns.set(font="Verdana")
</snippet></ROW><ROW><id>20768352</id><snippet>def testforoo(x):
    for j in range(0,len(x)):
        if j+1&lt;=len(x) and x[j:j+1]=='oo'.lower():
            return True
    return False
</snippet></ROW><ROW><id>20768352</id><snippet>def testforoo(x):
    for j in range(0,len(x)):
        if x[j]=='oo'.lower():
            return True
    return False
</snippet></ROW><ROW><id>20768352</id><snippet>len(x)</snippet></ROW><ROW><id>20768352</id><snippet>j</snippet></ROW><ROW><id>20768352</id><snippet>j+1</snippet></ROW><ROW><id>20768352</id><snippet>j+1</snippet></ROW><ROW><id>20768352</id><snippet>len(x)</snippet></ROW><ROW><id>20768352</id><snippet>def testforoo(x):
    return any(x[j]=='oo'.lower() for j in range(0,len(x)))
</snippet></ROW><ROW><id>20768352</id><snippet>pluralize(n)</snippet></ROW><ROW><id>20768352</id><snippet>None</snippet></ROW><ROW><id>20768352</id><snippet>None</snippet></ROW><ROW><id>20768352</id><snippet>%s</snippet></ROW><ROW><id>20768352</id><snippet>format</snippet></ROW><ROW><id>20768352</id><snippet>begin=input("Welcome!\n"
            "When you would like to try out\n"
            "Python Mad Libs Program, Prototype000,"
            "press the enter/return key.")

print("\nInitializing befuddlement...")

import random
sentenceCap=35
sentenceBottom=25
numOfSentences=random.randint(sentenceBottom,sentenceCap)

tempstore=[" "]*numOfSentences
irregplrls={'child':'children','ox':'oxen','moose':'moose'}

def testforoo(x):
    return any(x[j]=='oo'.lower() for j in range(0,len(x)))

def pluralize(x):
    if x in irregplrls:
        return irregplrls[x]

    if x[-1]=="y":
        return x[:-1]+"ies"
    elif x[-2:]=="us":
        return x[:-2]+"i"
    elif x[-1] in 'sx':
        return x+"es"
    elif x[-2:] in ('ch','sh'):
        return x+"es"
    elif 'f'==x[-1] or x[-2]:
        if 'f'==x[-1]:
            return x[:-1] + 'ves'
        elif 'f'==x[-2]:
            return x[:-2]+"ves"
    elif any(x[j]=='oo'.lower() for j in range(0,len(x))):
        return x[:testforoo(x)-2]+'ee'+x[testforoo(x):]
    else:
        return x+'s'

print("\nRetrieving craploads of words...") 

verb=["moves","jumps", "hides","sniffs","gazes","sneezes","calls"]
noun=["rabbit","dog","cat","otter","seal","elephant","fox",'baby','moose','octopus']
adjec=["happy","angry","cute","enormous","elegant","annoying"]
adver=["merrily","frustratedly","incoherently","morosely","peppily",'exuberantly']
endpunct=[".","!"]

print("\nSimulating human grammar-speak...\n")

for i000 in range(0,numOfSentences):
    v=random.choice(verb)
    n=random.choice(noun)
    adj=random.choice(adjec)
    adv=random.choice(adver)
    pun=random.choice(endpunct)
    askinput=random.randint(0,round(numOfSentences/5))
    whichinput=random.randint(0,3)
    if askinput==0:
        if whichinput==0:
            n=input("Please input a noun. ")
        elif whichinput==1:
            v=input("Please input a verb. ")
        elif whichinput==2:
            adj=input("Please input an adjective. ")
        elif whichinput==3:
            adv=input("Please input an adverb. ")
    templates=["The %s %s %s %s%s" % (adj,n,v,adv,pun),
               "%s %s %s %s%s" % (adj,pluralize(n),v[:len(v)-1],adv,pun)]
    final = random.choice(templates)
    final=final[0].upper() + final[1:]
    tempstore[i000]=final
    print('numOfSentences==',numOfSentences,i000)

print("\nProducing proof of illiteracy...\n")

print ('\n'.join(tempstore))
</snippet></ROW><ROW><id>20768352</id><snippet>pluralize()</snippet></ROW><ROW><id>20768352</id><snippet>testforoo()</snippet></ROW><ROW><id>20768352</id><snippet>elif 'f'==x[-1] or x[-2]:</snippet></ROW><ROW><id>20768352</id><snippet>elif 'f'==x[-1] or 'f'==x[-2]:</snippet></ROW><ROW><id>20768396</id><snippet>deleted</snippet></ROW><ROW><id>20768396</id><snippet>&gt;&gt;&gt; {'module': 'Test', 'deleted': False}
{'deleted': False, 'module': 'Test'}
</snippet></ROW><ROW><id>20768396</id><snippet>'deleted'</snippet></ROW><ROW><id>20768396</id><snippet>'module'</snippet></ROW><ROW><id>20768396</id><snippet>&gt;&gt;&gt; hash('module') % 8
6
&gt;&gt;&gt; hash('deleted') % 8
0
</snippet></ROW><ROW><id>20768396</id><snippet>'deleted'</snippet></ROW><ROW><id>20768404</id><snippet># test.py
print("Here!")

def foo():
    print("There!")
</snippet></ROW><ROW><id>20768404</id><snippet># main.py
print("A")
import test
print("B")
test.foo()
print("C")
</snippet></ROW><ROW><id>20768404</id><snippet>$ python main.py
A
Here!
B
There!
C
</snippet></ROW><ROW><id>20768452</id><snippet>keep_keys=True</snippet></ROW><ROW><id>20768452</id><snippet>class ModelB(ndb.Model):
    msg_id = ndb.StringProperty(indexed=False)
    cat_ids = ndb.StringProperty(repeated=True, indexed=False)
    list_ids = ndb.StringProperty(repeated=True, indexed=False)
    default_list_id_index = ndb.IntegerProperty(indexed=False)

class ModelA(ndb.Model):
    date_join = ndb.DateTimeProperty(auto_now_add=True)
    name = ndb.StringProperty()
    owner_salutation = ndb.StringProperty(indexed=False)
    owner_email_address = ndb.StringProperty()
    logo_url = ndb.StringProperty(indexed=False)
    ...
    messages = ndb.LocalStructuredProperty(ModelB, name='bm', repeated=True, keep_keys=True)
</snippet></ROW><ROW><id>20768452</id><snippet>put()</snippet></ROW><ROW><id>20768452</id><snippet>type ModelB struct {
    MessageID          string   `datastore:"msg_id,noindex"`
    CategoryIDs        []string `datastore:"cat_ids,noindex"`
    ListIDs            []string `datastore:"list_ids,noindex"`
    DefaultListIDIndex int      `datastore:"default_list_id_index,noindex"`
}

type ModelA struct {
    DateJoin          time.Time `datastore:"date_join,"`
    Name              string    `datastore:"name,"`
    OwnerSalutation   string    `datastore:"owner_salutation,noindex"`
    OwnerEmailAddress string    `datastore:"owner_email_address,"`
    LogoURL           string    `datastore:"logo_url,noindex"`
    Messages          []ModelB  `datastore:"-"`
}

// Load is implemented for the PropertyLoaderSaver interface.
func (s *ModelA) Load(c &lt;-chan datastore.Property) (err error) {
    f := make(chan datastore.Property, 32)
    errc := make(chan error, 1)
    defer func() {
        if err == nil {
            err = &lt;-errc
        }
    }()
    go func() {
        defer close(f)
        for p := range c {
            if p.Name == "bm" {
                var b ModelB
                err := loadLocalStructuredProperty(&amp;b, []byte(p.Value.(string)))
                if err != nil {
                    errc &lt;- err
                    return
                }
                s.Messages = append(s.Messages, b)
            } else {
                f &lt;- p
            }
        }
        errc &lt;- nil
    }()
    return datastore.LoadStruct(s, f)
}
</snippet></ROW><ROW><id>20768452</id><snippet>appengine/datastore</snippet></ROW><ROW><id>20768452</id><snippet>Reference</snippet></ROW><ROW><id>20768452</id><snippet>loadEntity</snippet></ROW><ROW><id>20768452</id><snippet>import (    
    "errors"    
    "time"    

    "appengine"    
    "appengine/datastore"        

    pb "appengine_internal/datastore"    
    proto "code.google.com/p/goprotobuf/proto"    
)    

func loadLocalStructuredProperty(dst interface{}, raw_proto []byte) error {    
    var val pb.EntityProto    
    err := proto.Unmarshal(raw_proto, &amp;val)    
    if err != nil {    
        return err    
    }    
    return loadEntity(dst, &amp;val)    
}

//Copied from appengine/datastore since its not exported

// loadEntity loads an EntityProto into PropertyLoadSaver or struct pointer.
func loadEntity(dst interface{}, src *pb.EntityProto) (err error) {
c := make(chan datastore.Property, 32)
 errc := make(chan error, 1)
 defer func() {
    if err == nil {
            err = &lt;-errc
        }
    }()
    go protoToProperties(c, errc, src)
    if e, ok := dst.(datastore.PropertyLoadSaver); ok {
        return e.Load(c)
    }
    return datastore.LoadStruct(dst, c)
}

func protoToProperties(dst chan&lt;- datastore.Property, errc chan&lt;- error, src *pb.EntityProto) {
    defer close(dst)
    props, rawProps := src.Property, src.RawProperty
    for {
        var (
            x       *pb.Property
            noIndex bool
        )
        if len(props) &gt; 0 {
            x, props = props[0], props[1:]
        } else if len(rawProps) &gt; 0 {
            x, rawProps = rawProps[0], rawProps[1:]
            noIndex = true
        } else {
            break
        }

        var value interface{}
        if x.Meaning != nil &amp;&amp; *x.Meaning == pb.Property_INDEX_VALUE {
            value = indexValue{x.Value}
        } else {
            var err error
            value, err = propValue(x.Value, x.GetMeaning())
            if err != nil {
                errc &lt;- err
                return
            }
        }
        dst &lt;- datastore.Property{
            Name:     x.GetName(),
            Value:    value,
            NoIndex:  noIndex,
            Multiple: x.GetMultiple(),
        }
    }
    errc &lt;- nil
}

func fromUnixMicro(t int64) time.Time {
    return time.Unix(t/1e6, (t%1e6)*1e3)
}

// propValue returns a Go value that combines the raw PropertyValue with a
// meaning. For example, an Int64Value with GD_WHEN becomes a time.Time.
func propValue(v *pb.PropertyValue, m pb.Property_Meaning) (interface{}, error) {
    switch {
    case v.Int64Value != nil:
        if m == pb.Property_GD_WHEN {
            return fromUnixMicro(*v.Int64Value), nil
        } else {
            return *v.Int64Value, nil
        }
    case v.BooleanValue != nil:
        return *v.BooleanValue, nil
    case v.StringValue != nil:
        if m == pb.Property_BLOB {
            return []byte(*v.StringValue), nil
        } else if m == pb.Property_BLOBKEY {
            return appengine.BlobKey(*v.StringValue), nil
        } else {
            return *v.StringValue, nil
        }
    case v.DoubleValue != nil:
        return *v.DoubleValue, nil
    case v.Referencevalue != nil:
        return nil, errors.New("Not Implemented!")
    }
    return nil, nil
}

// indexValue is a Property value that is created when entities are loaded from
// an index, such as from a projection query.
//
// Such Property values do not contain all of the metadata required to be
// faithfully represented as a Go value, and are instead represented as an
// opaque indexValue. Load the properties into a concrete struct type (e.g. by
// passing a struct pointer to Iterator.Next) to reconstruct actual Go values
// of type int, string, time.Time, etc.
type indexValue struct {
    value *pb.PropertyValue
}
</snippet></ROW><ROW><id>20768490</id><snippet>import io

with io.open(html, encoding='utf-8-sig') as infh:
    data = infh.read().encode('latin1').decode('euc-kr')

with io.open(html, 'w', encoding='utf8') as outfh:
    outfh.write(data)
</snippet></ROW><ROW><id>20768490</id><snippet>io.open()</snippet></ROW><ROW><id>20768490</id><snippet>codecs</snippet></ROW><ROW><id>20768490</id><snippet>io</snippet></ROW><ROW><id>20768490</id><snippet>&gt;&gt;&gt; broken = '\xef\xbb\xbf\xc2\xb9\xc3\x8c\xc2\xbc\xc3\xba'
&gt;&gt;&gt; print broken.decode('utf-8-sig').encode('latin1').decode('euc-kr')
미술
</snippet></ROW><ROW><id>20768593</id><snippet>from copy import copy, deepcopy
def calc(i, j, mat):
    if i &lt; 0 or j &lt; 0 or i &gt;= len(mat) or j &gt;= len(mat[0]):
        return 0 # out of borders
    elif mat[i][j] == 1:
        return 0 # this cell has already been visited
    elif i == len(mat)-1 and j == len(mat[0])-1:
        return 1 # reached destination (last cell)
    else:
        mat[i][j] = 1 # mark as visited
        # create copies of the matrix for the recursion calls
        m1 = deepcopy(mat)
        m2 = deepcopy(mat)
        m3 = deepcopy(mat)
        m4 = deepcopy(mat)
        # return the sum of results of the calls to the cells: 
        # down + up + right + left 
        return calc(i+1, j, m1) + calc(i-1, j, m2) + calc(i, j+1, m3) + calc(i, j-1, m4)

def do_the_robot_thing(m, n):
    # an un-visited cell will be marked with "0"
    mat = [[0]*n for x in xrange(m)]
    return calc(0, 0, mat)


print(do_the_robot_thing(3, 3))
</snippet></ROW><ROW><id>20768593</id><snippet>12
</snippet></ROW><ROW><id>20768687</id><snippet>&gt;&gt;&gt;PI=3.1415926535897
&gt;&gt;&gt; print PI*PI
9.86960440109
&gt;&gt;&gt; PI32=numpy.float32(PI)
&gt;&gt;&gt; print PI32*PI32
9.86961
</snippet></ROW><ROW><id>20768848</id><snippet>def replacer_factory1(dictionary):
    def replacing(match):
        if len(dictionary) &gt; 0:
            word = match.group()[:-1]
            exchange = dictionary.get(word, word)
            spintax = '{' + exchange + '}'
            create_place_holder = spintax.replace(' ', '#!#')
            return create_place_holder + match.group()[-1]
        else:
            return ""
    return replacing

def replacing1(text):
    regex_patt_list = r'\b(?:' + '|'.join(patt_list) + r')\W'
    replacer = replacer_factory1(dictionary)
    return re.sub(regex_patt_list, replacer, text)
</snippet></ROW><ROW><id>20768881</id><snippet>send_email()</snippet></ROW><ROW><id>20768881</id><snippet>def get_email_address():
    #the code to open up a window that gets the email address
    Email = input
    return Email

def get_email_username():
    #the code to open up a window that gets email username
    Email_Username = input
    return Email_Username

#same for the email recipient and email password

def send_email():
    # variables from the other def's
    email_address = get_email_address()
    email_username = get_email_username()

    #code to send email
</snippet></ROW><ROW><id>20768974</id><snippet>sys.modules</snippet></ROW><ROW><id>20768974</id><snippet>getattr</snippet></ROW><ROW><id>20768974</id><snippet>import sys
func = "os.error"
module, function = func.split(".", 1)
getattr(sys.modules[module], function)()
</snippet></ROW><ROW><id>20768974</id><snippet>sys.modules</snippet></ROW><ROW><id>20768974</id><snippet>__import__</snippet></ROW><ROW><id>20768974</id><snippet>module, function = "math.factorial".split(".", 1)
print getattr(__import__(module), function)(5)
</snippet></ROW><ROW><id>20768974</id><snippet>120
</snippet></ROW><ROW><id>20769004</id><snippet>QuerySet.extra(select=...)</snippet></ROW><ROW><id>20769004</id><snippet>@classmethod
def get_channel_list(cls, account):
    ret = cls.objects.extra(select={'name_lower': 'lower(name)'})
    ret = ret.order_by('-name_lower')
    ret = ret.filter(accountid=account).values_list('name', 'channelid')
    return channels
</snippet></ROW><ROW><id>20769047</id><snippet>def get_count(n):
    i = 1
    while n != 1:
        (n, i) = (3*n+1 if n%2 else n/2, i + 1)
        yield (n, i)

# usage:  
g = get_count(3)
for x in g:
    print x
</snippet></ROW><ROW><id>20769047</id><snippet>(10, 2)
(5, 3)
(16, 4)
(8, 5)
(4, 6)
(2, 7)
(1, 8)
</snippet></ROW><ROW><id>20769047</id><snippet>i</snippet></ROW><ROW><id>20769047</id><snippet>n == 1</snippet></ROW><ROW><id>20769047</id><snippet>factorial(n)</snippet></ROW><ROW><id>20769047</id><snippet>factorial(k)</snippet></ROW><ROW><id>20769047</id><snippet>k &lt; n</snippet></ROW><ROW><id>20769084</id><snippet>from Tkinter import *   # Python 3.x: from tkinter import *
from ttk import *       # Python 3.x: from tkinter.ttk import *

D = {'d1': {'a':'1'}, 'd2': {'b':'2'}, 'd3': {'c':'3'}}

root = Tk()
lb = Label(root, text='')
lb['text'] = '\n'.join('{} {}'.format(k, d) for k, d in D.items()) # &lt;---
# OR lb.config(text=....)
# OR lb.configure(text=...)
lb.pack()
root.mainloop()
</snippet></ROW><ROW><id>20769301</id><snippet>gpg --list-keys |awk '/pub/&amp;&amp;/4096R/{split($2,a,"/");print a[2]}' 
</snippet></ROW><ROW><id>20769301</id><snippet>GPG_KEY1="085C042B"
GPG_KEY2=$(gpg --list-keys |awk '/pub/&amp;&amp;/4096R/{split($2,a,"/");print a[2]}' )
sed -i "s/$GPG_KEY1/$GPG_KEY2/" *.conf
</snippet></ROW><ROW><id>20769355</id><snippet>current_user</snippet></ROW><ROW><id>20769355</id><snippet>is_authenticated()</snippet></ROW><ROW><id>20769355</id><snippet>True</snippet></ROW><ROW><id>20769575</id><snippet>....
  File "t.py", line 25, in handle_close
    self.server.disconnect(self)
  File "t.py", line 38, in disconnect
    self.sessions.remove(session)
NameError: global name 'session' is not defined
</snippet></ROW><ROW><id>20769575</id><snippet>ChatServer.disconnect</snippet></ROW><ROW><id>20769575</id><snippet>session</snippet></ROW><ROW><id>20769575</id><snippet>sessions</snippet></ROW><ROW><id>20769575</id><snippet>def disconnect(self, session):
    self.sessions.remove(session)
</snippet></ROW><ROW><id>20769976</id><snippet>import types
class MyMethod(TraitType):
    def validate(self, object, name, value): 
        if isinstance(value, types.MethodType):
            return value
        if isinstance(value, types.FunctionType):
            return types.MethodType(value, object, object.__class__)
        self.error(object, name, value)
</snippet></ROW><ROW><id>20770172</id><snippet>post_save</snippet></ROW><ROW><id>20770172</id><snippet>from django.db.models.signals import post_save

for model in [Fest, College, Event]:
    post_save.connect(create_stream_item, sender=model)
</snippet></ROW><ROW><id>20770296</id><snippet>CreateObject("Wscript.Shell").Run """" &amp; WScript.Arguments(0) &amp; """", 0, False
</snippet></ROW><ROW><id>20770296</id><snippet>wscript "C:\Uploads\invisible.vbs" "C:\Uploads\flashpolicyd.py"
</snippet></ROW><ROW><id>20770993</id><snippet>import random</snippet></ROW><ROW><id>20770993</id><snippet>def number_to_name(number):
# fill in your code below

# convert number to a name using if/elif/else
# don't forget to return the result!
    if number == 0:
        return 'rock'
    elif number == 1:
        return 'Spock'
    elif number == 2:
        return 'paper'
    elif number == 3:
        return 'lizard'
    elif number == 4:
        return 'scissors'


def name_to_number(name):
# fill in your code below

# convert name to number using if/elif/else
# don't forget to return the result!
    if name == 'rock':
        return 0
    elif name == 'Spock':
        return 1
    elif name == 'paper':
        return 2
    elif name == 'lizard':
        return 3
    elif name == 'scissors':
        return 4

def rpsls(name):
# fill in your code below

# convert name to player_number using name_to_number
    player_number = name_to_number(name)
# compute random guess for comp_number using random.randrange()
    comp_number = random.randrange(5)
# compute difference of player_number and comp_number modulo five
    difference = (player_number - comp_number) % 5
# use if/elif/else to determine winner
    if difference in [1, 2]:
        winmsg = "Player wins!"
    elif difference == 0:
        winmsg = "Player and computer tie!"
    else:
        winmsg = "Computer wins!"
# convert comp_number to name using number_to_name
    comp_name = number_to_name(comp_number)
# print results
    print " "
    print "Player chooses " + str(name)
    print "Computer chooses " + str(comp_name)
    print winmsg
</snippet></ROW><ROW><id>20770993</id><snippet>rpsls("rock")
rpsls("Spock")
rpsls("paper")
rpsls("lizard")
</snippet></ROW><ROW><id>20771168</id><snippet>QThread</snippet></ROW><ROW><id>20771168</id><snippet>QThread</snippet></ROW><ROW><id>20771168</id><snippet>run</snippet></ROW><ROW><id>20771419</id><snippet>zip</snippet></ROW><ROW><id>20771419</id><snippet>A = [2005, [4, 5, 6, 7], 2006, [4, 5, 6, 4]]
B = [7, 6]
global_max = max(B)

for year, year_list, max_year in zip(A[::2], A[1::2], B):
    print year
    for year_val in year_list:
        if year_val == global_max:
             print year_val, "(local max) (global max)"             
        elif year_val == max_year:
             print year_val, "(local max)"
        else:
             print year_val
</snippet></ROW><ROW><id>20771419</id><snippet>A[::2]</snippet></ROW><ROW><id>20771419</id><snippet>A</snippet></ROW><ROW><id>20771419</id><snippet>A[1::2]</snippet></ROW><ROW><id>20771419</id><snippet>zip</snippet></ROW><ROW><id>20771446</id><snippet>hasDelivery</snippet></ROW><ROW><id>20771446</id><snippet>SELECT * from restaurants WHERE hasDelivery</snippet></ROW><ROW><id>20771473</id><snippet>import numpy as np
import pandas as pd
ranges = np.asarray([(np.datetime64('2013-12-24T00:00:00Z'), np.datetime64('2013-12-24T00:02:00Z')),
                     (np.datetime64('2013-12-24T00:02:00Z'), np.datetime64('2013-12-24T00:04:00Z')),
                     (np.datetime64('2013-12-24T00:03:00Z'), np.datetime64('2013-12-24T00:05:00Z'))])
us = pd.Series(index=np.unique(ranges), data=0)
for start, end in ranges:
    us[start:end] += 1
print us
</snippet></ROW><ROW><id>20771473</id><snippet>2013-12-24 00:00:00    1
2013-12-24 00:02:00    2
2013-12-24 00:03:00    2
2013-12-24 00:04:00    2
2013-12-24 00:05:00    1
</snippet></ROW><ROW><id>20771473</id><snippet>2013-12-24 00:02:00    2</snippet></ROW><ROW><id>20771550</id><snippet>QMenu</snippet></ROW><ROW><id>20771550</id><snippet>QMenu</snippet></ROW><ROW><id>20771550</id><snippet>QMenu</snippet></ROW><ROW><id>20771550</id><snippet>class MainWindow(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        self.menu = None


    def mousePressEvent(self, event):
        menu = QMenu()
        self.menu = menu
        menu.installEventFilter(self)
        self.quit_action = menu.addAction("Close")
        self.add_action = menu.addAction("Add action")
        menu.exec_(self.mapToGlobal(event.pos()))

    def eventFilter(self, obj, event):
        print(obj, self.menu)
        if obj == self.menu:
            if event.type() == QEvent.MouseButtonRelease:
                action = self.menu.actionAt(event.pos())
                if action:
                    if action == self.quit_action:
                        return False
                    elif action == self.add_action:
                        self.menu.addAction("New action")
                        self.menu.exec_()
                        return True
        return False
</snippet></ROW><ROW><id>20771550</id><snippet>MouseButtonRelease</snippet></ROW><ROW><id>20771550</id><snippet>QMenu::exec</snippet></ROW><ROW><id>20771550</id><snippet>QObject::disconnect</snippet></ROW><ROW><id>20771727</id><snippet>global</snippet></ROW><ROW><id>20771727</id><snippet>vals[0] = 5</snippet></ROW><ROW><id>20771727</id><snippet>vals += [5, 6]</snippet></ROW><ROW><id>20771727</id><snippet>+=</snippet></ROW><ROW><id>20771727</id><snippet>vals[0] = 5</snippet></ROW><ROW><id>20771727</id><snippet>vals += [5, 6]</snippet></ROW><ROW><id>20771727</id><snippet>vals.extend([5, 6])</snippet></ROW><ROW><id>20771727</id><snippet>dis.dis</snippet></ROW><ROW><id>20771727</id><snippet>&gt;&gt;&gt; def a(): v[0] = 1
&gt;&gt;&gt; def b(): v += [1]
&gt;&gt;&gt; def c(): v.extend([1])
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(a)
  1           0 LOAD_CONST               1 (1)
              3 LOAD_GLOBAL              0 (v)
              6 LOAD_CONST               2 (0)
              9 STORE_SUBSCR        
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(b)
  1           0 LOAD_FAST                0 (v)
              3 LOAD_CONST               1 (1)
              6 BUILD_LIST               1
              9 INPLACE_ADD         
             10 STORE_FAST               0 (v)
             13 LOAD_CONST               0 (None)
             16 RETURN_VALUE        
d
&gt;&gt;&gt; dis.dis(c)
  1           0 LOAD_GLOBAL              0 (v)
              3 LOAD_ATTR                1 (extend)
              6 LOAD_CONST               1 (1)
              9 BUILD_LIST               1
             12 CALL_FUNCTION            1
             15 POP_TOP             
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE
</snippet></ROW><ROW><id>20771727</id><snippet>a</snippet></ROW><ROW><id>20771727</id><snippet>c</snippet></ROW><ROW><id>20771727</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>20771727</id><snippet>b</snippet></ROW><ROW><id>20771727</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>20771727</id><snippet>+=</snippet></ROW><ROW><id>20771727</id><snippet>v</snippet></ROW><ROW><id>20771727</id><snippet>v</snippet></ROW><ROW><id>20771727</id><snippet>v = v + [1]</snippet></ROW><ROW><id>20771836</id><snippet>In [1]: import numpy as np

In [2]: !cat test.txt
42 foo 41
40 bar 39

In [3]: data = np.genfromtxt('test.txt',
    ..:     dtype=np.dtype([('f1', int), ('f2', np.str_, 5), ('f3', int)]))

In [4]: data
Out[4]:
array([(42, 'foo', 41), (40, 'bar', 39)],
      dtype=[('f1', '&lt;i8'), ('f2', '&lt;U5'), ('f3', '&lt;i8')])

In [5]: data['f3']
Out[5]: array([41, 39])

In [6]: data['f3'][1]
Out[6]: 39
</snippet></ROW><ROW><id>20771836</id><snippet>In [7]: data['f1'] == 40
Out[7]: array([False,  True], dtype=bool)

In [8]: data[data['f1'] == 40]
Out[8]:
array([(40, 'bar', 39)],
      dtype=[('f1', '&lt;i8'), ('f2', '&lt;U5'), ('f3', '&lt;i8')])
</snippet></ROW><ROW><id>20771992</id><snippet>l = [[4,5,6,7],[3,4,5,6],[10,2,3,4]]
for idx, items in enumerate(l):
    mx = max(items)
    print "List {}".format(idx)
    for item in items:
        print "{}{}".format(item, " Max value" if item == mx else "")
</snippet></ROW><ROW><id>20771992</id><snippet>List 0
4
5
6
7 Max value
List 1
3
4
5
6 Max value
List 2
10 Max value
2
3
4
</snippet></ROW><ROW><id>20772294</id><snippet>def get_connection():
    global db

    if not db:    
        db = created_new_connection()
        print "New connection has been created"
    else:
        print "Connection already exists"

    return db
</snippet></ROW><ROW><id>20772294</id><snippet>created_new_connection()</snippet></ROW><ROW><id>20772294</id><snippet>False</snippet></ROW><ROW><id>20772294</id><snippet>None</snippet></ROW><ROW><id>20772294</id><snippet>str</snippet></ROW><ROW><id>20772294</id><snippet>list</snippet></ROW><ROW><id>20772674</id><snippet>pyDes.des(key, [mode], [IV], [pad], [padmode])

from pyDes import *

data = "Please encrypt my data"
k = des("DESCRYPT", ECB, "\0\0\0\0\0\0\0\0", pad=None, padmode=PAD_PKCS5)
d = k.encrypt(data)
print "Encrypted: %r" % d
print "Decrypted: %r" % k.decrypt(d)
</snippet></ROW><ROW><id>20772674</id><snippet>from pyDes import *
import hashlib
import base64
key = hashlib.md5("L6#F&amp;,q2$xLx").digest()
data = "I love security"
k = triple_des(key, ECB, "\0\0\0\0\0\0\0\0", pad=None, padmode=PAD_PKCS5)
d = k.encrypt(data)
base64Encrypted= base64.b64encode(d)
print "Encrypted: %r" % d
base64Decrypted= base64.b64decode(base64Encrypted)
print "Decrypted: %r" % k.decrypt(base64Decrypted)
</snippet></ROW><ROW><id>20773232</id><snippet>s = pd.DataFrame(pd.date_range('2012-1-1', periods=20, freq='D'), columns=["date"])

n = 5

s["date"] = np.int64(s)  #This step may not be needed in future pandas releases
s["bin"] = np.floor((n-0.001)*(s["date"] - s["date"].min( )) /((s["date"].max( ) - s["date"].min( ))))
</snippet></ROW><ROW><id>20773233</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>20773233</id><snippet>$ python -m timeit "original = {x: range(10) for x in xrange(10)}; copy = {x: v[:] for x,v in original.iteritems()}"
100000 loops, best of 3: 5.41 usec per loop

$ python -m timeit "original = {x: range(1000) for x in xrange(1000)}; copy = {x: v[:] for x,v in original.iteritems()}"
100 loops, best of 3: 17.1 msec per loop

$ python -m timeit "import copy; original = {x: range(10) for x in xrange(10)}; c = copy.deepcopy(original)"
10000 loops, best of 3: 86.4 usec per loop

$ python -m timeit "import copy; original = {x: range(1000) for x in xrange(1000)}; c = copy.deepcopy(original)"
10 loops, best of 3: 1.4 sec per loop
</snippet></ROW><ROW><id>20773233</id><snippet>deepcopy</snippet></ROW><ROW><id>20773233</id><snippet>deepcopy</snippet></ROW><ROW><id>20773233</id><snippet>deepcopy</snippet></ROW><ROW><id>20773233</id><snippet>deepcopy</snippet></ROW><ROW><id>20773233</id><snippet>&gt;&gt;&gt; import copy
&gt;&gt;&gt; obj = object()
&gt;&gt;&gt; original = {x: [obj] * 10 for x in xrange(10)}
&gt;&gt;&gt; copy1 = {x:v[:] for x,v in original.iteritems()}
&gt;&gt;&gt; copy2 = copy.deepcopy(original)
&gt;&gt;&gt; copy1[0][0] is original[0][0]
True
&gt;&gt;&gt; copy2[0][0] is original[0][0]
False
</snippet></ROW><ROW><id>20773233</id><snippet>deepcopy</snippet></ROW><ROW><id>20773233</id><snippet>obj</snippet></ROW><ROW><id>20773233</id><snippet>original</snippet></ROW><ROW><id>20773233</id><snippet>copy2</snippet></ROW><ROW><id>20773233</id><snippet>obj</snippet></ROW><ROW><id>20773389</id><snippet>attr_getter = operator.attrgetter('name')
names = map(attr_getter, l)
if most_common(names) in set(map(attr_getter, [a1, a2])):
    pass # do smth here
</snippet></ROW><ROW><id>20773513</id><snippet>nltk.NaiveBayesClassifier.prob_classify</snippet></ROW><ROW><id>20773513</id><snippet>classify</snippet></ROW><ROW><id>20773513</id><snippet>def classify(self, featureset):
    return self.prob_classify(featureset).max()
</snippet></ROW><ROW><id>20773513</id><snippet>dist = classifier.prob_classify(features)
for label in dist.samples():
    print("%s: %f" % (label, dist.prob(label)))
</snippet></ROW><ROW><id>20773537</id><snippet>room_size</snippet></ROW><ROW><id>20773537</id><snippet>house_size</snippet></ROW><ROW><id>20773537</id><snippet>class house:
    house_size = 100

class room:
    def __init__(self, house_object):
        self.house_object = house_object
        self.room_size = self.house_object.house_size / 10

    def __setattr__(self, key, value):
        self.__dict__[key] = value
        if key == "room_size":
            self.house_object.house_size = self.room_size * 10

house1 = house()
room1 = room(house1)

room1.room_size = 50
print house1.house_size
</snippet></ROW><ROW><id>20773759</id><snippet>function2</snippet></ROW><ROW><id>20773759</id><snippet>function1</snippet></ROW><ROW><id>20773759</id><snippet>def function1():
    #code here
    def function2():
        return foo
    return function2

def function3():
    x = function1()()  # calls function2, returned by function1()
</snippet></ROW><ROW><id>20773759</id><snippet>function1()</snippet></ROW><ROW><id>20773759</id><snippet>function2</snippet></ROW><ROW><id>20773759</id><snippet>&gt;&gt;&gt; def foo(bar):
...     def spam():
...         return bar + 42
...     return spam
... 
&gt;&gt;&gt; foo(0)
&lt;function spam at 0x10f371c08&gt;
&gt;&gt;&gt; foo(0)()
42
&gt;&gt;&gt; def ham(eggs):
...     result = foo(eggs + 3)()
...     return result
... 
&gt;&gt;&gt; ham(38)
83
</snippet></ROW><ROW><id>20773759</id><snippet>foo()</snippet></ROW><ROW><id>20773777</id><snippet>twisted.internet.defer.maybeDeferred</snippet></ROW><ROW><id>20774298</id><snippet>(\d{1,3},?)*\d{1,3}\.\d{2}
</snippet></ROW><ROW><id>20774301</id><snippet>Counter</snippet></ROW><ROW><id>20774301</id><snippet>&gt;&gt;&gt; c1 = Counter("word")
&gt;&gt;&gt; c2 = Counter("oawrc")
&gt;&gt;&gt; [(k, c2.get(k, 0) - v) for k, v in c1.items()]
[('r', 0), ('o', 0), ('w', 0), ('d', -1)]
</snippet></ROW><ROW><id>20774443</id><snippet>cross_val_score</snippet></ROW><ROW><id>20774443</id><snippet>make_scorer</snippet></ROW><ROW><id>20774443</id><snippet>score_func(y, y_pred, **kwargs)</snippet></ROW><ROW><id>20774443</id><snippet>make_scorer</snippet></ROW><ROW><id>20774626</id><snippet>L</snippet></ROW><ROW><id>20774626</id><snippet>print('The lists are:', *L, sep='\n')
</snippet></ROW><ROW><id>20774626</id><snippet>sep</snippet></ROW><ROW><id>20774626</id><snippet>&gt;&gt;&gt; L = [['some'], ['lists'], ['here']]
&gt;&gt;&gt; print('The lists are:', *L, sep='\n')
The lists are:
['some']
['lists']
['here']
</snippet></ROW><ROW><id>20774626</id><snippet>print('The lists are:', '\n'.join([str(lst) for lst in L]))
</snippet></ROW><ROW><id>20774626</id><snippet>'The lists are:'</snippet></ROW><ROW><id>20774626</id><snippet>sep='\n'</snippet></ROW><ROW><id>20774626</id><snippet>&gt;&gt;&gt; print('The lists are:', '\n'.join([str(lst) for lst in L]))
The lists are: ['some']
['lists']
['here']
&gt;&gt;&gt; print('The lists are:', '\n'.join([str(lst) for lst in L]), sep='\n')
The lists are:
['some']
['lists']
['here']
</snippet></ROW><ROW><id>20774840</id><snippet>scipy.integrate.simps</snippet></ROW><ROW><id>20774840</id><snippet>y : array_like

    Array to be integrated.

x : array_like, optional

    If given, the points at which y is sampled.
</snippet></ROW><ROW><id>20774840</id><snippet>y1</snippet></ROW><ROW><id>20774840</id><snippet>x</snippet></ROW><ROW><id>20774840</id><snippet>scipy.integrate.simps</snippet></ROW><ROW><id>20774840</id><snippet>x</snippet></ROW><ROW><id>20774840</id><snippet>y1</snippet></ROW><ROW><id>20774840</id><snippet>20.75</snippet></ROW><ROW><id>20774840</id><snippet>x</snippet></ROW><ROW><id>20774840</id><snippet>x = np.array([1.0,3.0,4.0])
</snippet></ROW><ROW><id>20774840</id><snippet>21.0</snippet></ROW><ROW><id>20774840</id><snippet>1.0</snippet></ROW><ROW><id>20774840</id><snippet>4.0</snippet></ROW><ROW><id>20774865</id><snippet>import webbrowser</snippet></ROW><ROW><id>20774865</id><snippet>pip install</snippet></ROW><ROW><id>20774865</id><snippet>easy_install</snippet></ROW><ROW><id>20775144</id><snippet>Connection: keep-alive</snippet></ROW><ROW><id>20775144</id><snippet>curl -v -H 'Connection: keep-alive' http://www.comicbookdb.com/browse.php
</snippet></ROW><ROW><id>20775144</id><snippet>import httplib2
h = httplib2.Http('.cache')
response, content = h.request('http://www.comicbookdb.com/browse.php', headers={'Connection':'keep-alive'})
print(content)
print(response)
</snippet></ROW><ROW><id>20775226</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>20775226</id><snippet>from django.contrib.auth.views import login

def login_with_preview(request, extra_context=None, *args, **kwargs):
    if extra_context is None:
        extra_context = {}
    extra_context['object_list'] = Request.objects.all()
    return login(request, authentication_form=LoginForm, extra_context=extra_context, *args, **kwargs)
</snippet></ROW><ROW><id>20775226</id><snippet>login_with_preview</snippet></ROW><ROW><id>20775226</id><snippet>@register.inclusion_tag("yourapp/preview_list.html")
def ticket_preview_list():
    return {'object_list': Request.objects.all()}
</snippet></ROW><ROW><id>20775226</id><snippet>preview_list.html</snippet></ROW><ROW><id>20775226</id><snippet>preview</snippet></ROW><ROW><id>20775226</id><snippet>base.html</snippet></ROW><ROW><id>20775348</id><snippet>import signal

class Alarm(Exception):
    pass
def stop_me(*args):
    raise Alarm
signal.signal(signal.SIGALRM, stop_me)

def raw_input_with_timeout(timeout):
    try:
        signal.alarm(timeout)  # number in seconds
        try:
            return raw_input()
        finally:
            signal.alarm(0)   # stop the alarm
    except Alarm:
        return "alarm!"   # or anything
</snippet></ROW><ROW><id>20775424</id><snippet>pool = multiprocessing.Pool(None) 
</snippet></ROW><ROW><id>20775424</id><snippet>os.fork</snippet></ROW><ROW><id>20775424</id><snippet>if __name__ == '__main__': 
</snippet></ROW><ROW><id>20775424</id><snippet>Hello Worlds</snippet></ROW><ROW><id>20775424</id><snippet>if __name__ == '__main__': 
</snippet></ROW><ROW><id>20775424</id><snippet>print("Hello World")
</snippet></ROW><ROW><id>20775424</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>20775424</id><snippet>import multiprocessing
import test_victim

files_list = ['c:\file1.log','c:\file2.log']

def main():
    print("Hello World")
    pool = multiprocessing.Pool(None)
    results = []
    for this_file in files_list:
        r = pool.map_async(test_victim.calculate, range(10), callback=results.append)
        results = r.get()

    print(results)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20775424</id><snippet>Hello World
[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
</snippet></ROW><ROW><id>20775424</id><snippet>multiprocessing</snippet></ROW><ROW><id>20775424</id><snippet>main</snippet></ROW><ROW><id>20775424</id><snippet>if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20775424</id><snippet>main</snippet></ROW><ROW><id>20775459</id><snippet>dtype</snippet></ROW><ROW><id>20775459</id><snippet>mat</snippet></ROW><ROW><id>20775459</id><snippet>numpy.object</snippet></ROW><ROW><id>20775459</id><snippet>dtype</snippet></ROW><ROW><id>20775459</id><snippet>numpy.zeros</snippet></ROW><ROW><id>20775459</id><snippet>float</snippet></ROW><ROW><id>20775459</id><snippet>ndarray</snippet></ROW><ROW><id>20775459</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; v = mat.astype(np.object)
&gt;&gt;&gt; v[0][0] = vec
&gt;&gt;&gt; v
array([[array([ 0.,  0.,  0.,  0.,  0.]), 0.0, 0.0, 0.0, 0.0],
       [0.0, 0.0, 0.0, 0.0, 0.0],
       [0.0, 0.0, 0.0, 0.0, 0.0],
       [0.0, 0.0, 0.0, 0.0, 0.0],
       [0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object)
</snippet></ROW><ROW><id>20775483</id><snippet>pip install facebook-sdk</snippet></ROW><ROW><id>20775483</id><snippet>import facebook
graph = facebook.GraphAPI()
page = graph.get_object('6127898346')
print '{} has {} likes.'.format(page['name'], page['likes'])
</snippet></ROW><ROW><id>20775483</id><snippet>import json
with open('outf.json', 'w') as f:
    json.dump(page, f)
</snippet></ROW><ROW><id>20775616</id><snippet>print</snippet></ROW><ROW><id>20775616</id><snippet>input</snippet></ROW><ROW><id>20775616</id><snippet>a = input("1 = KB, 2 = MB, 3 = GB, 4 = TB:")
</snippet></ROW><ROW><id>20775616</id><snippet>a</snippet></ROW><ROW><id>20775616</id><snippet>a = int(input("1 = KB, 2 = MB, 3 = GB, 4 = TB:"))
</snippet></ROW><ROW><id>20775616</id><snippet>if a == '1':
    ...
elif a == '2':
    ...
elif a == '3':
    ...
elif a == '4':
    ...
</snippet></ROW><ROW><id>20775616</id><snippet>str</snippet></ROW><ROW><id>20775616</id><snippet>str(" KBs")
</snippet></ROW><ROW><id>20775616</id><snippet>" KBs"
</snippet></ROW><ROW><id>20775736</id><snippet>line[0] not in final_ids:
</snippet></ROW><ROW><id>20775736</id><snippet>final_ids</snippet></ROW><ROW><id>20775736</id><snippet>set</snippet></ROW><ROW><id>20775736</id><snippet>list</snippet></ROW><ROW><id>20775736</id><snippet>O(1)</snippet></ROW><ROW><id>20775736</id><snippet>O(n)</snippet></ROW><ROW><id>20775736</id><snippet>nodesL</snippet></ROW><ROW><id>20775736</id><snippet>dict</snippet></ROW><ROW><id>20775736</id><snippet>(x,y,z)</snippet></ROW><ROW><id>20775736</id><snippet>nodeID</snippet></ROW><ROW><id>20775736</id><snippet>for x, y, z, nx, ny in deformedCoord:
    if (x,y,z) in nodesL:
        nodeID = nodesL[x,y,z]
        newNodesCoord.append([nodeID, nx, ny, 0.])  
</snippet></ROW><ROW><id>20775736</id><snippet>(x,y,z)</snippet></ROW><ROW><id>20775736</id><snippet>nodeID</snippet></ROW><ROW><id>20775736</id><snippet>for nid in nodeID:
    newNodesCoord.append([nid, nx, ny, 0.])
</snippet></ROW><ROW><id>20775736</id><snippet>newNodesCoord.extend([[nid, nx, ny, 0.] for nid in nodeID])
</snippet></ROW><ROW><id>20775736</id><snippet>for-loop</snippet></ROW><ROW><id>20775736</id><snippet>O(n*m)</snippet></ROW><ROW><id>20775736</id><snippet>n = len(deformedCoord)</snippet></ROW><ROW><id>20775736</id><snippet>m = len(nodesL)</snippet></ROW><ROW><id>20775736</id><snippet>nodesL</snippet></ROW><ROW><id>20775736</id><snippet>dict</snippet></ROW><ROW><id>20775736</id><snippet>if (x,y,z) in nodesL</snippet></ROW><ROW><id>20775736</id><snippet>O(1)</snippet></ROW><ROW><id>20775736</id><snippet>O(n)</snippet></ROW><ROW><id>20775909</id><snippet>any</snippet></ROW><ROW><id>20775909</id><snippet>string = 'Wazzup1'
result = any(c.isdigit() for c in string)
print(result) # True
</snippet></ROW><ROW><id>20775916</id><snippet>django-nvd3</snippet></ROW><ROW><id>20775916</id><snippet>script</snippet></ROW><ROW><id>20775916</id><snippet>load_chart</snippet></ROW><ROW><id>20775916</id><snippet>templates/chart.html</snippet></ROW><ROW><id>20775916</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>20775916</id><snippet>&lt;script&gt;{% load_chart charttype chartdata chartcontainer extra %}&lt;/script&gt;
</snippet></ROW><ROW><id>20775942</id><snippet>tr</snippet></ROW><ROW><id>20775942</id><snippet>trUtf8</snippet></ROW><ROW><id>20775942</id><snippet>translate</snippet></ROW><ROW><id>20775942</id><snippet>tr</snippet></ROW><ROW><id>20775942</id><snippet>qm</snippet></ROW><ROW><id>20775942</id><snippet>pylupdate</snippet></ROW><ROW><id>20775942</id><snippet>pylupdate</snippet></ROW><ROW><id>20775942</id><snippet>*.ts</snippet></ROW><ROW><id>20775942</id><snippet>ts</snippet></ROW><ROW><id>20775942</id><snippet>lrelease</snippet></ROW><ROW><id>20775942</id><snippet>qm</snippet></ROW><ROW><id>20775942</id><snippet>qm</snippet></ROW><ROW><id>20775942</id><snippet>    translator = QtCore.QTranslator(app)
    translator.load('qt_%s' % locale,
                    QtCore.QLibraryInfo.location(
                        QtCore.QLibraryInfo.TranslationsPath))
    app.installTranslator(translator)
</snippet></ROW><ROW><id>20775942</id><snippet>    translator = QtCore.QTranslator(app)
    translator.load('path/to/my/translations.qm')
    app.installTranslator(translator)
</snippet></ROW><ROW><id>20775942</id><snippet>qm</snippet></ROW><ROW><id>20776051</id><snippet>"</snippet></ROW><ROW><id>20776051</id><snippet>\w</snippet></ROW><ROW><id>20776051</id><snippet>.</snippet></ROW><ROW><id>20776051</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub("(.*)(\?)(.*)", r'\1\3\2', 'Is?"they')
'Is"they?'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20776051</id><snippet>.</snippet></ROW><ROW><id>20776051</id><snippet>re.sub</snippet></ROW><ROW><id>20776066</id><snippet>tasks</snippet></ROW><ROW><id>20776066</id><snippet>tasks</snippet></ROW><ROW><id>20776066</id><snippet>fields</snippet></ROW><ROW><id>20776066</id><snippet>Meta</snippet></ROW><ROW><id>20776066</id><snippet>tasks</snippet></ROW><ROW><id>20776066</id><snippet>from django.test import RequestFactory
from django.contrib.auth.models import User
from django.contrib import admin

# import InvoiceAdmin and Invoice here...

rf = RequestFactory()
user = User.objects.get(username="a_user_with_sufficient_permissions")
request = rf.get("/admin/foo/")
request.user = user
a = InvoiceAdmin(Invoice, admin.site)
print a.get_form(request).Meta.fields  # the form as modified by the admin
print a.form.Meta.fields  # the form as specified by you
</snippet></ROW><ROW><id>20776162</id><snippet>from PyQt4 import QtCore, QtGui

class Window(QtGui.QWidget):
    def __init__(self, path):
        QtGui.QWidget.__init__(self)
        pixmap = QtGui.QPixmap(path)
        layout = QtGui.QGridLayout(self)
        for row in range(4):
            for column in range(4):
                label = QtGui.QLabel(self)
                label.setPixmap(pixmap)
                layout.addWidget(label, row, column)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window(sys.argv[1] if len(sys.argv) else '')
    window.setGeometry(500, 300, 300, 300)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20776212</id><snippet>actions.py</snippet></ROW><ROW><id>20776212</id><snippet>SelectUserForm</snippet></ROW><ROW><id>20776228</id><snippet>def main():
    while True:
        # all your code here
</snippet></ROW><ROW><id>20776380</id><snippet>&gt;&gt;&gt; import atexit
&gt;&gt;&gt; atexit.__file__  # should display a similar path for you
'C:\\python27\\lib\\atexit.pyc'
&gt;&gt;&gt; dir(atexit)  # should display the same list, including "register"
['__all__', '__builtins__', '__doc__', '__file__',
 '__name__', '__package__', '_exithandlers', '_run_exitfuncs',
 'register', 'sys']
</snippet></ROW><ROW><id>20776380</id><snippet>atexit</snippet></ROW><ROW><id>20776380</id><snippet>atexit.pyc</snippet></ROW><ROW><id>20776399</id><snippet>    indexes = tablewidget.selectionModel().selectedRows(column)
    for index in sorted(indexes):
        row = index.row()
        rowtext = []
        for column in range(tablewidget.columnCount()):
            rowtext.append(tablewidget.item(row, column).text())
        print(rowtext)
</snippet></ROW><ROW><id>20776493</id><snippet>#include</snippet></ROW><ROW><id>20776493</id><snippet>#include</snippet></ROW><ROW><id>20776493</id><snippet>#include</snippet></ROW><ROW><id>20776493</id><snippet>//forloop.txt
for(int i=0;i&lt;SIZE;i++){
    ARRAY[i] = VALUE;
}

//prime.txt
2147483647

//main.cpp
#include&lt;iostream&gt;
using std::cout;
using std::string;

int main(){
    int prime = 
        #include "prime.txt"
    ;

    int arr[10];

    #define ARRAY arr
    #define SIZE 10
    #define VALUE prime
    #include "forloop.txt"
    #undef VALUE
    #undef SIZE
    #undef ARRAY

    for(int i=10;i-- &gt; 0;){
        cout&lt;&lt;arr[i]&lt;&lt;'\n';
    }
}
</snippet></ROW><ROW><id>20776493</id><snippet>using</snippet></ROW><ROW><id>20776493</id><snippet>max</snippet></ROW><ROW><id>20776493</id><snippet>math</snippet></ROW><ROW><id>20776493</id><snippet>cmath</snippet></ROW><ROW><id>20776493</id><snippet>namespace std{
    int max(int i, int j){
        if (i&lt;j)
            return j;
        return i;
    }

    //some variable declaration and initialization
    ostream cout(MAKE_BUFFER(stdout)); //std::ostream, if used outside
}
int max = 5;

int main(){
    std::cout&lt;&lt;std::max(3,::max)&lt;&lt;'\n'; //::max refers to global name "max"
}
</snippet></ROW><ROW><id>20776493</id><snippet>using namespace std;</snippet></ROW><ROW><id>20776493</id><snippet>std::</snippet></ROW><ROW><id>20776493</id><snippet>using namespace std</snippet></ROW><ROW><id>20776493</id><snippet>#include "F.h"</snippet></ROW><ROW><id>20776493</id><snippet>F.h</snippet></ROW><ROW><id>20776493</id><snippet>using namespace std</snippet></ROW><ROW><id>20776493</id><snippet>#include</snippet></ROW><ROW><id>20776493</id><snippet>import X</snippet></ROW><ROW><id>20776493</id><snippet>#include</snippet></ROW><ROW><id>20776493</id><snippet>import</snippet></ROW><ROW><id>20776493</id><snippet>import blah as x</snippet></ROW><ROW><id>20776493</id><snippet>blah</snippet></ROW><ROW><id>20776493</id><snippet>x.THING</snippet></ROW><ROW><id>20776493</id><snippet>import</snippet></ROW><ROW><id>20776493</id><snippet>import</snippet></ROW><ROW><id>20776493</id><snippet>import</snippet></ROW><ROW><id>20776493</id><snippet>using</snippet></ROW><ROW><id>20776493</id><snippet>import</snippet></ROW><ROW><id>20776493</id><snippet>import java.util.Scanner;
public class Example{
    public static void main(String blargs[]){
        Scanner cin = new Scanner(System.in);
        System.out.println("Type in your name and press Enter: ");
        System.out.println("Hello "+cin.next());
    }
}
</snippet></ROW><ROW><id>20776493</id><snippet>public class Example{
    public static void main(String blargs[]){
        java.util.Scanner cin = new java.util.Scanner(System.in);
        System.out.println("Type in your name and press Enter: ");
        System.out.println("Hello "+cin.next());
    }
}
</snippet></ROW><ROW><id>20776493</id><snippet>import java.lang.*;</snippet></ROW><ROW><id>20776493</id><snippet>public class Example{
    public static void main(java.lang.String blargs[]){
        java.util.Scanner cin = new java.util.Scanner(java.lang.System.in);
        java.lang.System.out.println("Type in your name and press Enter: ");
        java.lang.System.out.println("Hello "+cin.next());
    }
}
</snippet></ROW><ROW><id>20776493</id><snippet>import java.util.Scanner;
import static java.util.System.out;
import static java.util.System.in;

public class Example{
    public static void main(String blargs[]){
        Scanner cin = new Scanner(in);
        out.println("Type in your name and press Enter: ");
        out.println("Hello "+cin.next());
    }
}
</snippet></ROW><ROW><id>20776966</id><snippet>allsamples = ('sampleA', 'sampleB', 'sampleC')
for name in allsamples:
    df = vars()[name]
    df.to_csv(name + '.dat', sep=',', header=False, index=False)
</snippet></ROW><ROW><id>20776966</id><snippet>vars()</snippet></ROW><ROW><id>20776966</id><snippet>locals()</snippet></ROW><ROW><id>20776966</id><snippet>dict</snippet></ROW><ROW><id>20776966</id><snippet>dict</snippet></ROW><ROW><id>20776966</id><snippet>dict</snippet></ROW><ROW><id>20776966</id><snippet>dict</snippet></ROW><ROW><id>20776977</id><snippet>(&amp;(uid=MY_UID)(&amp;(uidNumber&gt;=chunk_start)(uidNumber&lt;=chunk_end))
</snippet></ROW><ROW><id>20776977</id><snippet>)</snippet></ROW><ROW><id>20776977</id><snippet>,</snippet></ROW><ROW><id>20777237</id><snippet>while</snippet></ROW><ROW><id>20777237</id><snippet>x</snippet></ROW><ROW><id>20777237</id><snippet>y</snippet></ROW><ROW><id>20777237</id><snippet>Character</snippet></ROW><ROW><id>20777237</id><snippet>Character</snippet></ROW><ROW><id>20777237</id><snippet>(x, y)</snippet></ROW><ROW><id>20777237</id><snippet>Character</snippet></ROW><ROW><id>20777237</id><snippet>Character</snippet></ROW><ROW><id>20777237</id><snippet>id</snippet></ROW><ROW><id>20777237</id><snippet># create dictionary, defaulting to new random positions
randpos = lambda: (random.randrange(0, width), random.randrange(0, height))
d = collections.defaultdict(randpos)

for i in range(10):             # corresponds to your outer 'while' loop
    print "outer loop", i
    for k in range(5):          # your 'for characters...' loop
        x, y = d[k]             # get x, y from dict, default to random position
        print x, y              # use position
</snippet></ROW><ROW><id>20777249</id><snippet>"</snippet></ROW><ROW><id>20777249</id><snippet>b"{\"Machine Name\":\""+hostname+"\"}", None, True)
</snippet></ROW><ROW><id>20777249</id><snippet>'</snippet></ROW><ROW><id>20777249</id><snippet>b'{"Machine Name":"'+hostname+'"}', None, True)
</snippet></ROW><ROW><id>20777249</id><snippet>b'{"Machine Name":"%s"}' % hostname, None, True) # python 2.x (old way)
b'{"Machine Name":"{0}"}'.format(hostname), None, True) # python &gt;= 2.6 (new way)
</snippet></ROW><ROW><id>20777249</id><snippet>dict</snippet></ROW><ROW><id>20777249</id><snippet>&gt;&gt;&gt; hostname = "machineA.host.com"
&gt;&gt;&gt; data = {'Machine Name': hostname}
&gt;&gt;&gt; json.dumps(data)
'{"Machine Name": "machineA.host.com"}'
</snippet></ROW><ROW><id>20777249</id><snippet>bytestring</snippet></ROW><ROW><id>20777286</id><snippet>GetMarket</snippet></ROW><ROW><id>20777286</id><snippet>GetMarketPrices</snippet></ROW><ROW><id>20777286</id><snippet>GetMarketPricesCompressed</snippet></ROW><ROW><id>20777286</id><snippet>GetMarketTradedVolume</snippet></ROW><ROW><id>20777417</id><snippet>return</snippet></ROW><ROW><id>20777417</id><snippet>print</snippet></ROW><ROW><id>20777417</id><snippet>a(arg)</snippet></ROW><ROW><id>20777417</id><snippet>b(arg)</snippet></ROW><ROW><id>20777417</id><snippet>a(b(10))
</snippet></ROW><ROW><id>20777417</id><snippet>a</snippet></ROW><ROW><id>20777417</id><snippet>None</snippet></ROW><ROW><id>20777417</id><snippet>None</snippet></ROW><ROW><id>20777417</id><snippet>print</snippet></ROW><ROW><id>20777417</id><snippet>def get_full_name(arg1, arg2, ...):
    # Do cool stuff
    return res   # &lt;- result of the function


print get_full_name('foo', 'bar')
full_name = get_full_name('Maxime', 'Lorant')
print some_other_function(full_name)
# etc.
</snippet></ROW><ROW><id>20777438</id><snippet>NEXTCDNURL</snippet></ROW><ROW><id>20777438</id><snippet>CDN_I</snippet></ROW><ROW><id>20777468</id><snippet>/config/Python/Main.sublime-menu</snippet></ROW><ROW><id>20777468</id><snippet>Main.sublime-menu</snippet></ROW><ROW><id>20777468</id><snippet>python</snippet></ROW><ROW><id>20777468</id><snippet>python3</snippet></ROW><ROW><id>20777468</id><snippet>caption</snippet></ROW><ROW><id>20777468</id><snippet>Python 3</snippet></ROW><ROW><id>20777468</id><snippet>Python 3 - RUN current file</snippet></ROW><ROW><id>20777468</id><snippet>Python 3</snippet></ROW><ROW><id>20777468</id><snippet>python3</snippet></ROW><ROW><id>20777468</id><snippet>Main.sublime-menu</snippet></ROW><ROW><id>20777961</id><snippet>doACalculation</snippet></ROW><ROW><id>20777961</id><snippet>similarityArray = doACalculation(np.indices((smallerDim, n)))
mat[:smallerDim] = np.abs(1.0 / (similarityArray + 1))
</snippet></ROW><ROW><id>20777961</id><snippet>doACalculation</snippet></ROW><ROW><id>20777961</id><snippet>doACalculation</snippet></ROW><ROW><id>20777961</id><snippet># Unvectorized
def doACalculation(i, j):
    return i**2 + i*j + j

# Vectorized
def doACalculation(input):
    i, j = input
    return i**2 + i*j + j

# Vectorized, but with the original call signature
def doACalculation(i, j):
    return i**2 + i*j + j
</snippet></ROW><ROW><id>20778184</id><snippet>reactor.stop</snippet></ROW><ROW><id>20778184</id><snippet>CommandProcess.do_quit</snippet></ROW><ROW><id>20778184</id><snippet>reactor.stop</snippet></ROW><ROW><id>20778184</id><snippet>reactor.callFromThread</snippet></ROW><ROW><id>20778184</id><snippet>reactor.callFromThread(reactor.stop)</snippet></ROW><ROW><id>20778184</id><snippet>do_quit</snippet></ROW><ROW><id>20778184</id><snippet>def do_quit(self, line):
    print 'bye bye !'
    reactor.stop() # &lt;------
    return True
</snippet></ROW><ROW><id>20778203</id><snippet>views.py</snippet></ROW><ROW><id>20778203</id><snippet>&lt;iframe src="http://www.w3schools.com"&gt;&lt;/iframe&gt;
&lt;form method="post" action="{% url app.views.your_view %}"&gt;
    &lt;input type="hidden" value="http://www.w3schools.com" name="iframeurl"&gt;
    &lt;input type="submit" value="Submit URL"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>20778203</id><snippet>url = request.POST.get("iframeurl", "")
</snippet></ROW><ROW><id>20778273</id><snippet>TypeError</snippet></ROW><ROW><id>20778273</id><snippet>math.sqrt</snippet></ROW><ROW><id>20778273</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.sqrt(4.0)
2.0
&gt;&gt;&gt; # Integers work too, even though the error message doesn't mention them
&gt;&gt;&gt; math.sqrt(4)
2.0
&gt;&gt;&gt; math.sqrt('4')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: a float is required
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20778273</id><snippet>input</snippet></ROW><ROW><id>20778273</id><snippet>&gt;&gt;&gt; x = input()
7
&gt;&gt;&gt; type(x)
&lt;class 'str'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20778273</id><snippet>g</snippet></ROW><ROW><id>20778273</id><snippet>math.sqrt</snippet></ROW><ROW><id>20778273</id><snippet>g</snippet></ROW><ROW><id>20778273</id><snippet>math.sqrt</snippet></ROW><ROW><id>20778273</id><snippet>int</snippet></ROW><ROW><id>20778273</id><snippet>float</snippet></ROW><ROW><id>20778273</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; g = int(input("Put your number here: "))
Put your number here: 7
&gt;&gt;&gt; print ("The square root of you number is: " + str(int(math.sqrt(g))))
The square root of you number is: 2
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20778273</id><snippet>print ("The square root of you number is: %d" % math.sqrt(g))
</snippet></ROW><ROW><id>20778314</id><snippet>print "%s posted a challenge to %s" % tuple(name_strings)
</snippet></ROW><ROW><id>20778314</id><snippet>s</snippet></ROW><ROW><id>20778314</id><snippet>%s</snippet></ROW><ROW><id>20778314</id><snippet>format</snippet></ROW><ROW><id>20778314</id><snippet>print("{} posted a challenge to {}".format(*name_strings))
</snippet></ROW><ROW><id>20778314</id><snippet>*name_strings</snippet></ROW><ROW><id>20778314</id><snippet>format</snippet></ROW><ROW><id>20778367</id><snippet>    return jj[data]
</snippet></ROW><ROW><id>20778367</id><snippet>'+data+'</snippet></ROW><ROW><id>20778682</id><snippet>ValuesQuerySet</snippet></ROW><ROW><id>20778682</id><snippet>record_a = TechSpecificationAdd.objects.filter(mobile_name=mobile_a).values()
</snippet></ROW><ROW><id>20778682</id><snippet>int(record_a["dimension"])
</snippet></ROW><ROW><id>20778682</id><snippet>int(record_a[0]["dimension"])
</snippet></ROW><ROW><id>20778682</id><snippet>record_a</snippet></ROW><ROW><id>20778682</id><snippet>record_a = record_a[0]
</snippet></ROW><ROW><id>20778691</id><snippet>int</snippet></ROW><ROW><id>20778691</id><snippet>wr.writerow(sh.row_values(0))
for rownum in xrange(1, sh.nrows):
    wr.writerow([str(int(entry)) for entry in sh.row_values(rownum)])
    #                ^^^
</snippet></ROW><ROW><id>20778814</id><snippet>mysite</snippet></ROW><ROW><id>20778814</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>20778814</id><snippet>settings.py</snippet></ROW><ROW><id>20778814</id><snippet>INSTALLED_APPS = (
    'mysite',
    # ...... the rest of installed apps
)
</snippet></ROW><ROW><id>20778904</id><snippet>&gt;&gt;&gt; data = ['1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35']
&gt;&gt;&gt; type(data) # It is a list
&lt;type 'list'&gt;
&gt;&gt;&gt; len(data)  # It has one item
1
&gt;&gt;&gt; type(data[0]) # That item is a string
&lt;type 'str'&gt;
&gt;&gt;&gt; data[0] 
'1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35'
&gt;&gt;&gt; data[0].split(' ') # Like all strings, it has a `split` method
['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15','16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31','32', '33','34', '35']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20778904</id><snippet>data</snippet></ROW><ROW><id>20778904</id><snippet>data[0].split(' ')</snippet></ROW><ROW><id>20778904</id><snippet>split</snippet></ROW><ROW><id>20778954</id><snippet>from django.db import models

class Place(models.Model):
    name = models.CharField(max_length=50)
    address = models.CharField(max_length=80)

    # On Python 3: def __str__(self):
    def __unicode__(self):
        return u"%s the place" % self.name

class Restaurant(models.Model):
    place = models.OneToOneField(Place, primary_key=True)
    serves_hot_dogs = models.BooleanField()
    serves_pizza = models.BooleanField()

    # On Python 3: def __str__(self):
    def __unicode__(self):
        return u"%s the restaurant" % self.place.name
</snippet></ROW><ROW><id>20778954</id><snippet>&gt;&gt;&gt; p1 = Place(name='Demon Dogs', address='944 W. Fullerton')
&gt;&gt;&gt; p1.save()
&gt;&gt;&gt; r = Restaurant(place=p1, serves_hot_dogs=True, serves_pizza=False)
&gt;&gt;&gt; r.save()

&gt;&gt;&gt; # accessing the restaurant as a property of the place
&gt;&gt;&gt; p1.restaurant
&lt;Restaurant: Demon Dogs the restaurant&gt;
</snippet></ROW><ROW><id>20778967</id><snippet>re.split</snippet></ROW><ROW><id>20778967</id><snippet>'London, ENG, United Kingdom or Melbourne, VIC, Australia or Palo Alto, CA USA'
&gt;&gt;&gt; list(map(str.strip, re.split(',|or', x)))
['London', 'ENG', 'United Kingdom', 'Melbourne', 'VIC', 'Australia', 'Palo Alto', 'CA USA']
&gt;&gt;&gt; list(map(str.strip, re.split('or', x)))
['London, ENG, United Kingdom', 'Melbourne, VIC, Australia', 'Palo Alto, CA USA']
</snippet></ROW><ROW><id>20778967</id><snippet>or</snippet></ROW><ROW><id>20778967</id><snippet>str.split</snippet></ROW><ROW><id>20778967</id><snippet>&gt;&gt;&gt; list(map(str.strip, x.split('or')))
['London, ENG, United Kingdom', 'Melbourne, VIC, Australia', 'Palo Alto, CA USA']
</snippet></ROW><ROW><id>20778967</id><snippet>list</snippet></ROW><ROW><id>20778967</id><snippet>&gt;&gt;&gt; x = 'London, ENG, United Kingdom / Melbourne, VIC, Australia / Palo Alto, CA USA'
&gt;&gt;&gt; re.findall(r'(?:\w+(?:\s+\w+)*,\s)+(?:\w+(?:\s\w+)*)', x)
['London, ENG, United Kingdom', 'Melbourne, VIC, Australia', 'Palo Alto, CA USA']
</snippet></ROW><ROW><id>20779104</id><snippet>$ easy_install liblas OR $ pip install liblas
</snippet></ROW><ROW><id>20779169</id><snippet>&gt;&gt; l=int(raw_input('Enter Length: '))
&gt;&gt; for i in range (0,l):
&gt;&gt;    #Do something (like append to a list)
</snippet></ROW><ROW><id>20779335</id><snippet>filtered_clue = filter(lambda x: len(x['number']), clue)
</snippet></ROW><ROW><id>20779414</id><snippet>timedelta</snippet></ROW><ROW><id>20779414</id><snippet>total_seconds()</snippet></ROW><ROW><id>20779414</id><snippet>&gt;&gt;&gt; d1 = "Thu Dec 26 04:46:28 GMT 2013"
&gt;&gt;&gt; d2 = "Thu Dec 26 04:50:28 GMT 2013"
&gt;&gt;&gt; fmt = '%a %b %d %I:%M%:%S %Z %Y'
&gt;&gt;&gt; from datetime import datetime as dt
&gt;&gt;&gt; (dt.strptime(d2, fmt) - dt.strptime(d1, fmt)).total_seconds()
240.0
</snippet></ROW><ROW><id>20779414</id><snippet>seconds</snippet></ROW><ROW><id>20779414</id><snippet>datetime</snippet></ROW><ROW><id>20779414</id><snippet>time</snippet></ROW><ROW><id>20779414</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; t1 = time.strptime(d2, fmt)
&gt;&gt;&gt; t2 = time.strptime(d1, fmt)
&gt;&gt;&gt; dt1 = dt.fromtimestamp(mktime(t1))
&gt;&gt;&gt; dt2 = dt.fromtimestamp(mktime(t2))
&gt;&gt;&gt; (dt1-dt2).total_seconds()
240.0
</snippet></ROW><ROW><id>20779425</id><snippet>from django.conf.urls import patterns, include, url

from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    url(r'^admin/', include(admin.site.urls)),

    url(r'^posts/', include('posts.urls')), ## Custom url include
    url(r'^links/', include('links.urls')), ## Custom url include
)
</snippet></ROW><ROW><id>20779425</id><snippet>FailBook
|-- posts
   |-- models.py
   |-- urls.py
   |-- views.py
   |-- etc.
|-- links
   |-- models.py
   |-- urls.py
   |-- views.py
   |-- etc.

# urls.py file in the posts folder
from django.conf.urls import patterns, include, url
from .views import PostListView, PostDetailView

urlpatterns = patterns('',

    url(r'^posts/', PostListView.as_view()), 
    url(r'^posts/(?P&lt;post_id&gt;\d+)', PostDetailView.as_view()),
)
# where both views are class based views, hence the as_view function call
</snippet></ROW><ROW><id>20779536</id><snippet>from restless.http import Http201, Http400
from restless.views import Endpoint
from .forms import NewCompanyForm

class APIEndpoint(Endpoint):
    """
    Endpoint for posting json data to server
    """
    def post(self, request):
        company_form = NewCompanyForm(request.data)
        if company_form.is_valid():
            # Check for duplicate data
            # ...
            if unique:
                company_form.save()
                return Http201({"message": "Post successful"})
            else:
                return Http400(reason='Data was not unique')
        else:
            return Http400(reason='You did not post a valid input')
</snippet></ROW><ROW><id>20779875</id><snippet>4</snippet></ROW><ROW><id>20779875</id><snippet>%</snippet></ROW><ROW><id>20779875</id><snippet>-1 = (5) * (-1) + 4</snippet></ROW><ROW><id>20779875</id><snippet>4</snippet></ROW><ROW><id>20779877</id><snippet>def is_prime(n):
    return all(n % i != 0 for i in range(2, n))

def order(numbers, current=[]):
    if not numbers:
        return current

    for i, n in enumerate(numbers):
        if current and not is_prime(n + current[-1]):
            continue

        result = order(numbers[:i] + numbers[i + 1:], current + [n])

        if result:
            return result

    return False

result = order(range(500))

for i in range(len(result) - 1):
    assert is_prime(result[i] + result[i + 1])
</snippet></ROW><ROW><id>20779886</id><snippet>file1 = open("file1.txt","r")
file2 = open("file2.txt","w")
always_print = False
lines = fo.readlines()
for line in lines:
  if always_print or "3" in line:
     print line
     file2.write(line)
     always_print = True
</snippet></ROW><ROW><id>20780056</id><snippet>differences = (test_array.reshape(1,-1) - known_array.reshape(-1,1))
</snippet></ROW><ROW><id>20780056</id><snippet>argmin</snippet></ROW><ROW><id>20780056</id><snippet>np.diagonal</snippet></ROW><ROW><id>20780056</id><snippet>indices = np.abs(differences).argmin(axis=0)
residual = np.diagonal(differences[indices,])
</snippet></ROW><ROW><id>20780056</id><snippet>&gt;&gt;&gt; known_array = np.array([-24, -18, -13, -30,  29])
&gt;&gt;&gt; test_array = np.array([-6,  4, -6,  4,  8, -4,  8, -6,  2,  8])
</snippet></ROW><ROW><id>20780056</id><snippet>&gt;&gt;&gt; indices
array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
&gt;&gt;&gt; residual
array([ 7, 17,  7, 17, 21,  9, 21,  7, 15, 21])
</snippet></ROW><ROW><id>20780118</id><snippet>get_posts</snippet></ROW><ROW><id>20780118</id><snippet>json.dumps(serialized_user)</snippet></ROW><ROW><id>20780118</id><snippet>json</snippet></ROW><ROW><id>20780118</id><snippet>import json</snippet></ROW><ROW><id>20780118</id><snippet>print(serialized_user)</snippet></ROW><ROW><id>20780118</id><snippet>QuerySet</snippet></ROW><ROW><id>20780118</id><snippet>QuerySet</snippet></ROW><ROW><id>20780118</id><snippet>fields = [
    'pk',
    'username',
    'job_title',
    'company',
    'interests',
    'email',
    'website',
    'image',
    ('posts', lambda user: list(user.get_posts().values()))
]
</snippet></ROW><ROW><id>20780118</id><snippet>json.dumps(serialized_user)</snippet></ROW><ROW><id>20780324</id><snippet>class StandardUser(AbstractEmailUser):
    class Meta:
        app_label = 'accounts'

class CompanyUser(StandardUser):
    company = models.CharField(max_length=100)

    class Meta:
        app_label = 'accounts'
</snippet></ROW><ROW><id>20780324</id><snippet>AUTH_USER_MODEL = 'myapp.StandardUser'
</snippet></ROW><ROW><id>20780324</id><snippet>CompanyUser</snippet></ROW><ROW><id>20780324</id><snippet>StandardUser</snippet></ROW><ROW><id>20780324</id><snippet>OneToOneField</snippet></ROW><ROW><id>20780324</id><snippet>StandardUser.objects.filter(companyuser=None)</snippet></ROW><ROW><id>20780324</id><snippet>AbstractEmailUser</snippet></ROW><ROW><id>20780324</id><snippet>StandardUser</snippet></ROW><ROW><id>20780391</id><snippet>127.0.0.1</snippet></ROW><ROW><id>20780391</id><snippet>host='0.0.0.0'</snippet></ROW><ROW><id>20780391</id><snippet>run()</snippet></ROW><ROW><id>20781082</id><snippet>oppstring = " "
</snippet></ROW><ROW><id>20781376</id><snippet>:</snippet></ROW><ROW><id>20781376</id><snippet>def your_function(string):
  for word in string.slpit():
    if word == 'Python':
      return word
    else:
      print 'No Python in string'
</snippet></ROW><ROW><id>20781741</id><snippet>YourModel.objects.using("db_for_read").all()
</snippet></ROW><ROW><id>20781741</id><snippet>your_model_instance.save(using="db_for_write")
</snippet></ROW><ROW><id>20781741</id><snippet>YourModel.objects.using("db_for_write").bulk_create(
    [your_model_instance1, your_model_instance2, etc]
    )
</snippet></ROW><ROW><id>20782052</id><snippet>def isPrime(n):
    d = n - 1
    s = 0
    while not d &amp; 1:
        s += 1
        d &gt;&gt;= 1
    for a in (2, 13, 23, 1662803):
        if pow(a, d, n) != 1 and all(pow(a, (1 &lt;&lt; r) * d, n) != n - 1 for r in range(0, s)):
            return False
    return True

print(sum(x for x in range(1000000000001, 1000000100000, 2) if isPrime(x)))
</snippet></ROW><ROW><id>20782245</id><snippet>a[0:a.lower().find("feat.")].rstrip()</snippet></ROW><ROW><id>20782245</id><snippet>and</snippet></ROW><ROW><id>20782245</id><snippet>"string1" and "string2" and ... and "stringN"</snippet></ROW><ROW><id>20782245</id><snippet>or</snippet></ROW><ROW><id>20782245</id><snippet>"string1" or "string2" or ... or "stringN"</snippet></ROW><ROW><id>20782786</id><snippet>sys.path</snippet></ROW><ROW><id>20782786</id><snippet>import sys
sys.path.append('C:\Python27\Lib\site-packages')

import cvxopt
</snippet></ROW><ROW><id>20782786</id><snippet>cvxopt</snippet></ROW><ROW><id>20782786</id><snippet>site-packages</snippet></ROW><ROW><id>20782786</id><snippet>cvxopt</snippet></ROW><ROW><id>20783042</id><snippet>DLLAPI myStruct DLLApiGetStruct()
{
    myStruct result;
    result.id = L"some id";
    result.content = L"some content";
    result.message = L"some message";  
    return result;
}
</snippet></ROW><ROW><id>20783042</id><snippet>myDLL.DLLApiGetStruct.restype = POINTER(TestStruct)
</snippet></ROW><ROW><id>20784034</id><snippet>def find(self, runners):
    for runners in self._runners:
        if runners.name == name:
            return runners    
</snippet></ROW><ROW><id>20784034</id><snippet>name</snippet></ROW><ROW><id>20784034</id><snippet>def find(self, name):
    for runners in self._runners:
        if runners.name == name:
            return runners
</snippet></ROW><ROW><id>20784078</id><snippet>Language</snippet></ROW><ROW><id>20784078</id><snippet>Subject</snippet></ROW><ROW><id>20784078</id><snippet>__unicode__</snippet></ROW><ROW><id>20784078</id><snippet> class Subject(models.Model):
     subject = models.CharField(....)

     def __unicode__(self):
         return self.subject
</snippet></ROW><ROW><id>20784078</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>20784078</id><snippet>label_from_instance</snippet></ROW><ROW><id>20784078</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>20784078</id><snippet>lambda</snippet></ROW><ROW><id>20784078</id><snippet>__init__</snippet></ROW><ROW><id>20784155</id><snippet>&gt;&gt;&gt; rc[0].shape
(3,)
</snippet></ROW><ROW><id>20784155</id><snippet>&gt;&gt;&gt; np.reshape(rc[0], (1,3)).T
array([[0],
       [0],
       [1]])
</snippet></ROW><ROW><id>20784230</id><snippet>codecs.encode(unicode_string, 'unicode-escape')</snippet></ROW><ROW><id>20784230</id><snippet>'Ç'</snippet></ROW><ROW><id>20784230</id><snippet>u'\u00c7'</snippet></ROW><ROW><id>20784230</id><snippet>u'\u0043\u0327'</snippet></ROW><ROW><id>20784230</id><snippet>NFKD</snippet></ROW><ROW><id>20784230</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import re
import unicodedata

s = u"freø̯̯nt"
# remove consecutive duplicate "breves"
print(re.sub(u'\u032f+', u'\u032f', unicodedata.normalize('NFKD', s)))
</snippet></ROW><ROW><id>20784230</id><snippet>re.sub('c+', 'c', text)</snippet></ROW><ROW><id>20784230</id><snippet>'c'</snippet></ROW><ROW><id>20784230</id><snippet>'c'</snippet></ROW><ROW><id>20784230</id><snippet>'c'</snippet></ROW><ROW><id>20784230</id><snippet>no_duplicates = re.sub(u'(\u032f)\\1+', r'\1', unicodedata.normalize('NFKD', s))
</snippet></ROW><ROW><id>20784773</id><snippet>angle = 360.0/float(nrOfObjects)
</snippet></ROW><ROW><id>20784773</id><snippet>angle = 360.0/int(nrOfObjects)
</snippet></ROW><ROW><id>20784773</id><snippet>input()</snippet></ROW><ROW><id>20784773</id><snippet>raw_input()</snippet></ROW><ROW><id>20784804</id><snippet>def get_clean_string(string, substring):
    while substring in string:
        string = string.replace(substring, '')
    return string
</snippet></ROW><ROW><id>20784804</id><snippet>In [24]: get_clean_string('replacemeHeresWhatINeed', 'replaceme')
Out[24]: 'HeresWhatINeed'
</snippet></ROW><ROW><id>20784804</id><snippet>#-*- coding: utf-8 -*-
</snippet></ROW><ROW><id>20784886</id><snippet>load_page_b_if_previous_function_is_true</snippet></ROW><ROW><id>20784886</id><snippet>test_element_a_in_page_a</snippet></ROW><ROW><id>20784934</id><snippet>__new__</snippet></ROW><ROW><id>20784934</id><snippet>__init__</snippet></ROW><ROW><id>20784934</id><snippet>class Foo(object):
    _instances = []

    def __new__(cls, *args, **kw):
        instance = object.__new__(cls)
        cls._instances.append(instance)
        return instance

    @classmethod
    def get_instances(cls):
        return self._instances
</snippet></ROW><ROW><id>20785002</id><snippet>.</snippet></ROW><ROW><id>20785002</id><snippet>re.search(r'\{cite web(.*?)([\r\n]+)(.*?)\}\}', inputtext, flags=re.DOTALL)
</snippet></ROW><ROW><id>20785002</id><snippet>re.DOTALL</snippet></ROW><ROW><id>20785002</id><snippet>'.'</snippet></ROW><ROW><id>20785002</id><snippet>'.'</snippet></ROW><ROW><id>20785002</id><snippet>re.sub()</snippet></ROW><ROW><id>20785002</id><snippet>cite</snippet></ROW><ROW><id>20785002</id><snippet>re.sub(r'\{cite web.*?[\r\n]+.*?\}\}', lambda m: re.sub('\s*[\r\n]\s*', '', m.group(0)), inputtext, flags=re.DOTALL)
</snippet></ROW><ROW><id>20785002</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; inputtext = '''\
... {{cite web
... |title=Testing
... |url=Testing
... |editor=Testing
... }}
... '''
&gt;&gt;&gt; re.search(r'\{cite web(.*?)([\r\n]+)(.*?)\}\}', inputtext, flags=re.DOTALL)
&lt;_sre.SRE_Match object at 0x10f335458&gt;
&gt;&gt;&gt; re.sub(r'\{cite web.*?[\r\n]+.*?\}\}', lambda m: re.sub('\s*[\r\n]\s*', '', m.group(0)), inputtext, flags=re.DOTALL)
'{{cite web|title=Testing|url=Testing|editor=Testing}}\n'
</snippet></ROW><ROW><id>20785053</id><snippet>global</snippet></ROW><ROW><id>20785053</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>20785053</id><snippet>if</snippet></ROW><ROW><id>20785053</id><snippet>if</snippet></ROW><ROW><id>20785053</id><snippet>global</snippet></ROW><ROW><id>20785053</id><snippet>global</snippet></ROW><ROW><id>20785053</id><snippet>if</snippet></ROW><ROW><id>20785053</id><snippet>ret_code</snippet></ROW><ROW><id>20785053</id><snippet>if</snippet></ROW><ROW><id>20785053</id><snippet>ret_code</snippet></ROW><ROW><id>20785053</id><snippet>sys.exit(ret_code)</snippet></ROW><ROW><id>20785076</id><snippet>path</snippet></ROW><ROW><id>20785076</id><snippet>Test.py</snippet></ROW><ROW><id>20785076</id><snippet>export PATH=$PATH:/home/thefourtheye/Desktop/
</snippet></ROW><ROW><id>20785076</id><snippet>chmod 755 /home/thefourtheye/Desktop/Test.py
</snippet></ROW><ROW><id>20785076</id><snippet>Test.py</snippet></ROW><ROW><id>20785122</id><snippet>test.py "D:\test\File Name"
</snippet></ROW><ROW><id>20785122</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>20785122</id><snippet>ctypes</snippet></ROW><ROW><id>20785122</id><snippet>GetCommandLine</snippet></ROW><ROW><id>20785524</id><snippet>class Chair(object):

    MAX_WEIGHT = 300

    def __init__(self):
        super().__init__()

        self.weight = 5
        self.currentWeight = self.weight
        self.holding = None
        self.broken = False

    def hold(self, item):
        self.holding = item
        self.currentWeight = self.weight + item.weight
        self.checkWeight()

    def checkWeight(self):
        if self.holding.weight &gt; self.MAX_WEIGHT:
            self.broken = True
            ...
</snippet></ROW><ROW><id>20785524</id><snippet>class Table(object):
    def __init__(self):
        self.chain = None
        self.rule = None
        self.match = None

    def setInput(self):
        self.chain = iptc.Chain(iptc.Table(iptc.Table.FILTER), 'INPUT')

    def setOutput(self):
        self.chain = iptc.Chain(iptc.Table(iptc.Table.FILTER), 'OUTPUT')

    ...

table = Table()
table.setInput()
...
</snippet></ROW><ROW><id>20785714</id><snippet>QInputDialog.getItem</snippet></ROW><ROW><id>20785714</id><snippet>QInputDialog.getText</snippet></ROW><ROW><id>20785714</id><snippet>user_name = QtGui.QInputDialog.getItem(parent, 'User names',
                                               'Full Name', all_users.keys(),
                                                current=0,editable=False)
</snippet></ROW><ROW><id>20785894</id><snippet>delete_stream_item()</snippet></ROW><ROW><id>20785894</id><snippet>instance</snippet></ROW><ROW><id>20785894</id><snippet>Fe</snippet></ROW><ROW><id>20785894</id><snippet>Event</snippet></ROW><ROW><id>20785894</id><snippet>StreamItem</snippet></ROW><ROW><id>20785894</id><snippet>instance</snippet></ROW><ROW><id>20785894</id><snippet>def delete_stream_item(sender, instance, signal, *args, **kwargs):
    ctype = ContentType.objects.get_for_model(instance)
    StreamItem.objects.filter(content_type=ctype, object_id=instance.id).delete()
</snippet></ROW><ROW><id>20786124</id><snippet>.drop_tag()</snippet></ROW><ROW><id>20786124</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>20786124</id><snippet>from lxml import html

doc = html.fromstring(data)
for br in doc.findall('.//br'):
    if br.tail is None: # no text immediately after &lt;br&gt; tag
        for dup in br.itersiblings():
            if dup.tag != 'br': # don't merge if there is another tag inbetween
                break
            dup.drop_tag()
            if dup.tail is not None: # don't merge if there is a text inbetween
               break

print(html.tostring(doc))
# -&gt; &lt;div&gt;&lt;p&gt;foo&lt;br&gt;bar. &lt;/p&gt;&lt;p&gt;foo&lt;br&gt;bar&lt;/p&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>20786242</id><snippet>temp_dict = {
    'a': OrderedDict([
        ('aardvark', (6,True)),
        ('apple', (3,True)),
    ]),
    'b':OrderedDict([
        ('banana', (2,False)),
        ('bobble', (8,True)),
    ]),
}
</snippet></ROW><ROW><id>20786255</id><snippet>word</snippet></ROW><ROW><id>20786255</id><snippet>&gt;&gt;&gt; combining_cedilla = u'\u0327'
&gt;&gt;&gt; c_with_cedilla = u'\u00e7'
&gt;&gt;&gt; letter_c = u'\u0063'
&gt;&gt;&gt;
&gt;&gt;&gt; print c_with_cedilla
ç
&gt;&gt;&gt; print letter_c + combining_cedilla
ç
</snippet></ROW><ROW><id>20786255</id><snippet>unicodedata.normalize()</snippet></ROW><ROW><id>20786255</id><snippet>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; comp = unicodedata.normalize('NFC', letter_c + combining_cedilla)
&gt;&gt;&gt; decomp = unicodedata.normalize('NFD', c_with_cedilla)
&gt;&gt;&gt;
&gt;&gt;&gt; print comp
ç
&gt;&gt;&gt; print decomp
ç
</snippet></ROW><ROW><id>20786255</id><snippet>NFC</snippet></ROW><ROW><id>20786255</id><snippet>NFD</snippet></ROW><ROW><id>20786255</id><snippet>&gt;&gt;&gt; comp == decomp
False
&gt;&gt;&gt; len(comp)
1
&gt;&gt;&gt; len(decomp)
2
</snippet></ROW><ROW><id>20786255</id><snippet>и</snippet></ROW><ROW><id>20786255</id><snippet>и</snippet></ROW><ROW><id>20787065</id><snippet>c:\Windows\</snippet></ROW><ROW><id>20787065</id><snippet>py.exe</snippet></ROW><ROW><id>20787065</id><snippet>pyw.exe</snippet></ROW><ROW><id>20787065</id><snippet>.py</snippet></ROW><ROW><id>20787065</id><snippet>.pyw</snippet></ROW><ROW><id>20787065</id><snippet>#!python3</snippet></ROW><ROW><id>20787065</id><snippet>#!python2</snippet></ROW><ROW><id>20787065</id><snippet>PATH</snippet></ROW><ROW><id>20787065</id><snippet>.py</snippet></ROW><ROW><id>20787065</id><snippet>scriptname.py</snippet></ROW><ROW><id>20787065</id><snippet>py scriptname.py</snippet></ROW><ROW><id>20787065</id><snippet>py.exe</snippet></ROW><ROW><id>20787065</id><snippet>C:\PythonXX\python.exe</snippet></ROW><ROW><id>20787065</id><snippet>XX</snippet></ROW><ROW><id>20787065</id><snippet>C:\Python27</snippet></ROW><ROW><id>20787065</id><snippet>C:\Python33</snippet></ROW><ROW><id>20787188</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>20787188</id><snippet>from collections import defaultdict
import csv

graph = defaultdict(dict)

with open('inputfile', 'rb') as infh:
    reader = csv.reader(infh, delimiter='\t')
    next(reader, None)  # skip header

    for source, target, edge in reader:
        graph[source][target] = edge
</snippet></ROW><ROW><id>20787188</id><snippet>graph = defaultdict(lambda: defaultdict(list))

with open('inputfile', 'rb') as infh:
    reader = csv.reader(infh, delimiter='\t')
    next(reader, None)  # skip header

    for source, target, edge in reader:
        graph[source][target].append(edge)
</snippet></ROW><ROW><id>20787188</id><snippet>{'A': {'C': ['Bus'], 'B': ['Train']}, 'C': {'A': ['Train']}, 'B': {'D': ['Bus']}}
</snippet></ROW><ROW><id>20787302</id><snippet>import shelve

from collections import defaultdict

db = shelve.open('/tmp/db')

grams = [
    ['I','go','to','work'],
    ['I','go','there','often'],
    ['it','is','nice','being'],
    ['I','live','in','NY'],
    ['I','go','to','work'],
]

for gram in grams:
    path = db.get(gram[0], defaultdict(int))

    def f(path, word):
        if not word in path:
            path[word] = defaultdict(int)
        return path[word]
    reduce(f, gram[1:-1], path)[gram[-1]] += 1

    db[gram[0]] = path

print db

db.close()
</snippet></ROW><ROW><id>20787598</id><snippet>np.unique</snippet></ROW><ROW><id>20787598</id><snippet>indices</snippet></ROW><ROW><id>20787598</id><snippet>In [14]: indices
Out[14]: 
array([[ 1,  1],
       [ 1,  2],
       [ 1,  3],
       [ 5,  1],
       [ 5,  3],
       [ 5, 10],
       [13, 10],
       [13, 13],
       [13, 14]])

In [15]: zones, inv = unique(indices, return_inverse=True)

In [16]: zones
Out[16]: array([ 1,  2,  3,  5, 10, 13, 14])

In [17]: new_indices = inv.reshape(indices.shape)

In [18]: new_indices
Out[18]: 
array([[0, 0],
       [0, 1],
       [0, 2],
       [3, 0],
       [3, 2],
       [3, 4],
       [5, 4],
       [5, 5],
       [5, 6]])
</snippet></ROW><ROW><id>20787770</id><snippet>In [6]: x1, x2, x3, x4 = symbols('x1:5')

In [7]: solve([x2, x3, x1 + x4, x1**3 - x1, x2**3 - x2, x3**3 - x3, x4**3 - x4], [x1, x2, x3, x4], dict=True)
Out[7]: [{x₁: -1, x₂: 0, x₃: 0, x₄: 1}, {x₁: 0, x₂: 0, x₃: 0, x₄: 0}, {x₁: 1, x₂: 0, x₃: 0, x₄: -1}]
</snippet></ROW><ROW><id>20787770</id><snippet>A = Matrix([[0, 1, 0, 0],
            [0, 0, 1, 0],
            [1, 0, 0, 1]])
</snippet></ROW><ROW><id>20787770</id><snippet>In [13]: syms = symbols("x:4")

In [14]: s = Matrix(syms)

In [15]: constraints = [xi**3 - xi for xi in syms]

In [16]: A*s
Out[16]:
⎡  x₁   ⎤
⎢       ⎥
⎢  x₂   ⎥
⎢       ⎥
⎣x₀ + x₃⎦

In [17]: solve(list(A*s) + constraints, syms, dict=True)
Out[17]: [{x₀: -1, x₁: 0, x₂: 0, x₃: 1}, {x₀: 0, x₁: 0, x₂: 0, x₃: 0}, {x₀: 1, x₁: 0, x₂: 0, x₃: -1}]
</snippet></ROW><ROW><id>20787770</id><snippet>In [35]: A = np.matrix([[0, 1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 1]])

In [36]: A = Matrix(A).applyfunc(int)

In [37]: syms = symbols("x:7")

In [38]: s = Matrix(syms)

In [39]: constraints = [xi**3 - xi for xi in syms]

In [40]: solve(list(A*s) + constraints, syms, dict=True)
Out[40]:
[{x₀: -1, x₁: 1, x₂: 1, x₃: -1, x₄: 0, x₅: 1, x₆: -1}, {x₀: 0, x₁: 0, x₂: 0, x₃: 0, x₄: 0, x₅: 0, x₆: 0}, {x₀: 1, x₁: -1, x₂: -1, x₃: 1, x₄: 0, x₅: -1, x₆:
1}]
</snippet></ROW><ROW><id>20787770</id><snippet>In [36]</snippet></ROW><ROW><id>20787770</id><snippet>Matrix</snippet></ROW><ROW><id>20787975</id><snippet>shell=True</snippet></ROW><ROW><id>20787975</id><snippet>soffice</snippet></ROW><ROW><id>20787975</id><snippet>subprocess.Popen(command)
</snippet></ROW><ROW><id>20787975</id><snippet>shell=True</snippet></ROW><ROW><id>20787975</id><snippet>subprocess.Popen(command.join(' '), shell=True)
</snippet></ROW><ROW><id>20787999</id><snippet>from datetime import datetime
</snippet></ROW><ROW><id>20787999</id><snippet>datetime.datetime.strptime(...)
</snippet></ROW><ROW><id>20787999</id><snippet>datetime</snippet></ROW><ROW><id>20787999</id><snippet>datetime</snippet></ROW><ROW><id>20787999</id><snippet>strptime</snippet></ROW><ROW><id>20787999</id><snippet>datetime</snippet></ROW><ROW><id>20787999</id><snippet>datetime.strptime(...)
</snippet></ROW><ROW><id>20787999</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>20787999</id><snippet>import datetime
</snippet></ROW><ROW><id>20787999</id><snippet>datetime</snippet></ROW><ROW><id>20787999</id><snippet>datetime.datetime</snippet></ROW><ROW><id>20787999</id><snippet>timedelta</snippet></ROW><ROW><id>20787999</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>20787999</id><snippet>date</snippet></ROW><ROW><id>20787999</id><snippet>datetime.date</snippet></ROW><ROW><id>20788113</id><snippet>dir_root = "/example/rootdir"
debug_level = 3
</snippet></ROW><ROW><id>20788113</id><snippet>class GLOBALS:
  dir_root = ...
  debug_level = ...

Globals = GLOBALS()
</snippet></ROW><ROW><id>20788113</id><snippet>Globals.dir_root</snippet></ROW><ROW><id>20788113</id><snippet>dir_root</snippet></ROW><ROW><id>20788113</id><snippet>Globals</snippet></ROW><ROW><id>20788120</id><snippet>x</snippet></ROW><ROW><id>20788120</id><snippet>y</snippet></ROW><ROW><id>20788120</id><snippet>y</snippet></ROW><ROW><id>20788120</id><snippet>x</snippet></ROW><ROW><id>20788120</id><snippet>import imp

global_var = 7
y = imp.load_source('y', 'y.py') # &lt;---
global_var = y.global_var        # &lt;---
print(global_var)
</snippet></ROW><ROW><id>20788120</id><snippet>exec</snippet></ROW><ROW><id>20788120</id><snippet>execfile</snippet></ROW><ROW><id>20788120</id><snippet>global_var = 7
#execfile('y.py')   # Python 2.x
with open('y.py') as f:
    exec(f.read())
print(global_var)
</snippet></ROW><ROW><id>20788142</id><snippet>for</snippet></ROW><ROW><id>20788142</id><snippet> for x in food:
   total += prices[x]
   print(total)
</snippet></ROW><ROW><id>20788142</id><snippet>print</snippet></ROW><ROW><id>20788142</id><snippet>total +=</snippet></ROW><ROW><id>20788572</id><snippet>cat /srv/salt/selenium-node.sls

selenium-node:
  pkg:
    - installed
  service:
    - running
    - watch:
      - pkg: selenium-node
      - file: /etc/selenium-node.conf
  file:
    - managed
    - name: /etc/selenium-node.conf
    - source: salt://selenium/selenium-node.conf # assuming config located at /srv/salt/selenium/selenium-node.conf  on the Salt Master
</snippet></ROW><ROW><id>20788572</id><snippet>restart_selenium:
  module.run:
    - name: service.restart
    - m_name: selenium-node   # m_name gets passed to the execution module as "name"
</snippet></ROW><ROW><id>20788681</id><snippet>select.select</snippet></ROW><ROW><id>20788681</id><snippet>import socket
import sys
import select

my_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
my_socket.connect(("10.10.10.69",1234))
sys.stdout.write('your message: ')
sys.stdout.flush()
while True:
    r, w, x = select.select([sys.stdin, my_socket], [], [])
    if not r:
        continue
    if r[0] is sys.stdin:
        message = raw_input()
        if message == "quit":
            my_socket.close()
            break
        my_socket.send(message)
        sys.stdout.write('your message: ')
        sys.stdout.flush()
    else:
        data = my_socket.recv(1024)
        print "message from server:" , data
</snippet></ROW><ROW><id>20788751</id><snippet>[^\(]</snippet></ROW><ROW><id>20788751</id><snippet>.</snippet></ROW><ROW><id>20788751</id><snippet>\s+</snippet></ROW><ROW><id>20788751</id><snippet>(</snippet></ROW><ROW><id>20788751</id><snippet>\s+</snippet></ROW><ROW><id>20788751</id><snippet>(</snippet></ROW><ROW><id>20788751</id><snippet>[^\(]</snippet></ROW><ROW><id>20789019</id><snippet>class JSONWeatherParser(object):
    def parse(self, value):
        json_obj =  json.load(value)
        w = Weather()
        # Do some stuff here, assign values from json_obj to w etc.
        return w


class XMLWeatherParser(object):
    def parse(self, value):
        element = xml.etree.ElementTree(value)
        w = Weather()
        # Do some stuff here, assign values from element to w etc.
        return w


class YAMLWeatherParser(object):
    def parse(self, value):
        w = Weather()
        # Sorry, I do not even know what it looks like
        return w
</snippet></ROW><ROW><id>20789019</id><snippet>weather_parsers = {
    'xml': XMLWeatherParser,
    'json': JSONWeatherParser,
    'yaml': YAMLWeatherParser
}
</snippet></ROW><ROW><id>20789019</id><snippet>format = request.get('format') # For example
data = request.get('weather')
parser = weather_parsers[format]()
weather = parser.parse(data)
</snippet></ROW><ROW><id>20789019</id><snippet>*WeatherParser</snippet></ROW><ROW><id>20789019</id><snippet>*_weather_parser</snippet></ROW><ROW><id>20789019</id><snippet>    def json_weather_parse(value):
        json_obj =  json.load(value)
        w = Weather()
        # Do some stuff here, assign values from json_obj to w etc.
        return w


    def xml_weather_parse(value):
        element = xml.etree.ElementTree(value)
        w = Weather()
        # Do some stuff here, assign values from element to w etc.
        return w


    def yaml_weather_parse(value):
        w = Weather()
        # Sorry, I do not even know what it looks like
        return w
</snippet></ROW><ROW><id>20789019</id><snippet>Weather</snippet></ROW><ROW><id>20789019</id><snippet>Weather</snippet></ROW><ROW><id>20789059</id><snippet>string.contains</snippet></ROW><ROW><id>20789059</id><snippet>"a"</snippet></ROW><ROW><id>20789059</id><snippet>"g"</snippet></ROW><ROW><id>20789059</id><snippet>a</snippet></ROW><ROW><id>20789059</id><snippet>length</snippet></ROW><ROW><id>20789059</id><snippet>(length^2 - length)/2</snippet></ROW><ROW><id>20789211</id><snippet>def insert_sqlite(tablename, data_list):
    global dbc
    dbc.execute("insert into " + tablename + " values (" + ('?,' * len(data_list))[:-1] + ")", data_list)
</snippet></ROW><ROW><id>20789211</id><snippet>dbc.execute("""
select * from numbers_table
""")
print(dbc.fetchall());

dbc.execute("""
select * from text_table
""")
print(dbc.fetchall());
</snippet></ROW><ROW><id>20789211</id><snippet>[(1, 2, 3, 4, 5)]
[(u'pies', u'cakes')]
</snippet></ROW><ROW><id>20789426</id><snippet>request.user</snippet></ROW><ROW><id>20789426</id><snippet>request.session.user</snippet></ROW><ROW><id>20789475</id><snippet>10</snippet></ROW><ROW><id>20789475</id><snippet>int</snippet></ROW><ROW><id>20789475</id><snippet>10</snippet></ROW><ROW><id>20789475</id><snippet>//</snippet></ROW><ROW><id>20789475</id><snippet>&gt;&gt;&gt; def round(x):
...     return (x//10)*10
... 
&gt;&gt;&gt; round(15.)
10.0
&gt;&gt;&gt; round(25.)
20.0
</snippet></ROW><ROW><id>20789475</id><snippet>divmod</snippet></ROW><ROW><id>20789475</id><snippet>def round(x):
    n, remainder = divmod(x, 10)
    if remainder &gt;= 5:
        n += 1
    return n * 10
</snippet></ROW><ROW><id>20789638</id><snippet>from itertools import izip
from operator import itemgetter

# Ignoring the outer levels of the dict and shortening the numbers.
data = {
    'Class1' : [-138, -133,  33, 999],
    'Class2' : [ -20,  -19, 100, 777],
    'Class3' : [-338, -345, 200, 111],
}

lookup    = dict(enumerate(data.keys()))
max_index = lambda ns: max(enumerate(ns), key = itemgetter(1))[0]

# Zip the arrays together.
# For each zipped-set of numbers, find the index of the max.
# Use that index to look up the class name.
classes = [lookup[max_index(ns)] for ns in izip(*data.values())]

print classes    # ['Class2', 'Class2', 'Class3', 'Class1']
</snippet></ROW><ROW><id>20789744</id><snippet>NULL</snippet></ROW><ROW><id>20789744</id><snippet>""</snippet></ROW><ROW><id>20789744</id><snippet>NULL</snippet></ROW><ROW><id>20789744</id><snippet>CharField</snippet></ROW><ROW><id>20789744</id><snippet>NULL</snippet></ROW><ROW><id>20789744</id><snippet>""</snippet></ROW><ROW><id>20789958</id><snippet>for k in wlist:
    if k != i:
        k.send(data)
</snippet></ROW><ROW><id>20790016</id><snippet>results = pool.map(Parallel(args), self.list_objects)
</snippet></ROW><ROW><id>20790016</id><snippet>__call__</snippet></ROW><ROW><id>20790016</id><snippet>__call__</snippet></ROW><ROW><id>20790016</id><snippet>def __call__(self, val):
</snippet></ROW><ROW><id>20790016</id><snippet>pool.map</snippet></ROW><ROW><id>20790016</id><snippet>p = Parallel(args)
result = []
for val in self.list_objects:
    result.append(p(val))
</snippet></ROW><ROW><id>20790150</id><snippet>line</snippet></ROW><ROW><id>20790150</id><snippet>gaierror..</snippet></ROW><ROW><id>20790150</id><snippet>&gt;&gt;&gt; import socket
&gt;&gt;&gt; socket.create_connection(('www.stackoverflow.com', 80)) # without newline
&lt;socket._socketobject object at 0x0000000002C1B180&gt;
&gt;&gt;&gt; socket.create_connection(('www.stackoverflow.com\n', 80)) # with newline
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\socket.py", line 553, in create_connection
    for res in getaddrinfo(host, port, 0, SOCK_STREAM):
socket.gaierror: [Errno 11004] getaddrinfo failed
</snippet></ROW><ROW><id>20790150</id><snippet>str.strip</snippet></ROW><ROW><id>20790150</id><snippet>paramiko.SSHClient.connect</snippet></ROW><ROW><id>20790150</id><snippet>...
for line in f:
    line = line.strip() # &lt;---
    print line
    ...
</snippet></ROW><ROW><id>20790302</id><snippet>reduce built-in</snippet></ROW><ROW><id>20790302</id><snippet>&gt;&gt;&gt; reduce(lambda x,y: x+y, [pow(2,i) for i in range(32)])
4294967295

in terms of function:
try this:
    &gt;&gt;&gt; def test(n):
...    return reduce(lambda x,y: x+y,[pow(2,i) for i in range(n+1)])
... 
&gt;&gt;&gt; test(31)
4294967295
</snippet></ROW><ROW><id>20790302</id><snippet>reduce</snippet></ROW><ROW><id>20790306</id><snippet>type(self)</snippet></ROW><ROW><id>20790306</id><snippet>self.__class__</snippet></ROW><ROW><id>20790306</id><snippet>self</snippet></ROW><ROW><id>20790306</id><snippet>Foo</snippet></ROW><ROW><id>20790306</id><snippet>Foo</snippet></ROW><ROW><id>20790306</id><snippet>class Foo(AnotherClass):
    id_counter = 0
    def __init__(self):
        super().__init__()
        self.id = type(self).id_counter
        type(self).id_counter += 1
</snippet></ROW><ROW><id>20790366</id><snippet>&gt;&gt;&gt; br.alignments
[]
</snippet></ROW><ROW><id>20790366</id><snippet>from Bio.Blast import NCBIXML
from Bio.Blast import NCBIWWW

lst=['TGCCCCGAAAATGAACTCAGTAAAGAATGACAGTTTCGCAAGACCCGTTGCTTTTTCAGTGCTAGCTAGCTGACTGATCGTAGCTGACGTAGTCTAGCTAGC','ATCGATCGTACTACGTAGCTGATCGTAGCTAGCTAGCTGATCGTAGCTATCGTACGTAGCTGATCGATCGTAGCTGACTGACGTACGTAGCTGATCGTAGCTAGCTAGCTAGCTGATCGATC']
eq="Homo sapiens[Organism]"
# download with lst[1]
print "download start"
rslt  = NCBIWWW.qblast("blastn", "nr", lst[1],entrez_query=eq)
print "download end"
print "parsing start"
rcrds = NCBIXML.parse(rslt)
print "parsing end"
br = rcrds.next()
print "br.alignments"
print br.alignments
</snippet></ROW><ROW><id>20790366</id><snippet>&gt;&gt;&gt; br.alignments
[&lt;Bio.Blast.Record.Alignment object at 0x02ACCF90&gt;, &lt;Bio.Blast.Record.Alignment object at 0x02ACCE50&gt;, &lt;Bio.Blast.Record.Alignment object at 0x02ACCCF0&gt;, &lt;Bio.Blast.Record.Alignment object at 0x02ACCE10&gt;, &lt;Bio.Blast.Record.Alignment object at 0x02ACCCD0&gt;, &lt;Bio.Blast.Record.Alignment object at 0x02ACCBF0&gt;, &lt;Bio.Blast.Record.Alignment object at 0x02ACCD70&gt;, &lt;Bio.Blast.Record.Alignment object at 0x02ACC930&gt;, &lt;Bio.Blast.Record.Alignment object at 0x02ACC9B0&gt;, &lt;Bio.Blast.Record.Alignment object at 0x02ACCA90&gt;, &lt;Bio.Blast.Record.Alignment object at 0x02ACCAD0&gt;, &lt;Bio.Blast.Record.Alignment object at 0x02ACCB90&gt;, &lt;Bio.Blast.Record.Alignment object at 0x02ACC850&gt;, &lt;Bio.Blast.Record.Alignment object at 0x02ACC970&gt;]
</snippet></ROW><ROW><id>20790434</id><snippet>/script1.pl &lt; input_file | /script2.pl &gt; output_file</snippet></ROW><ROW><id>20790434</id><snippet>subprocess</snippet></ROW><ROW><id>20790434</id><snippet>#!/usr/bin/env python
from subprocess import check_call

with open('input_file', 'rb') as input_file
    with open('output_file', 'wb') as output_file:
        check_call("/script1.pl | /script2.pl", shell=True,
                   stdin=input_file, stdout=output_file)
</snippet></ROW><ROW><id>20790434</id><snippet>shell=True</snippet></ROW><ROW><id>20790434</id><snippet>#!/usr/bin/env python
from subprocess import Popen, PIPE

with open('input_file', 'rb') as input_file
    script1 = Popen("/script1.pl", stdin=input_file, stdout=PIPE)
with open("output_file", "wb") as output_file:
    script2 = Popen("/script2.pl", stdin=script1.stdout, stdout=output_file)
script1.stdout.close() # allow script1 to receive SIGPIPE if script2 exits
script2.wait()
script1.wait()
</snippet></ROW><ROW><id>20790434</id><snippet>plumbum</snippet></ROW><ROW><id>20790434</id><snippet>#!/usr/bin/env python
from plumbum import local

script1, script2 = local["/script1.pl"], local["/script2.pl"]
(script1 &lt; "input_file" | script2 &gt; "output_file")()
</snippet></ROW><ROW><id>20790434</id><snippet>#!/usr/bin/env python
from subprocess import Popen, PIPE
from threading import Thread

def pump_input(pipe):
    try:
       for i in xrange(1000000000): # generate large input
           print &gt;&gt;pipe, i
    finally:
       pipe.close()

p = Popen("/script1.pl | /script2.pl", shell=True, stdin=PIPE, stdout=PIPE,
          bufsize=1)
Thread(target=pump_input, args=[p.stdin]).start()
try: # read output line by line as soon as the child flushes its stdout buffer
    for line in iter(p.stdout.readline, b''):
        print line.strip()[::-1] # print reversed lines
finally:
    p.stdout.close()
    p.wait()
</snippet></ROW><ROW><id>20790635</id><snippet>print ...</snippet></ROW><ROW><id>20790635</id><snippet>FileExistsError</snippet></ROW><ROW><id>20790635</id><snippet>FileExistsError</snippet></ROW><ROW><id>20790635</id><snippet>errno.EEXIST</snippet></ROW><ROW><id>20790635</id><snippet>import os
import errno

try:
    os.mkdir(folderPath)
except OSError as e:
    if e.errno == errno.EEXIST:
        print('Directory not created.')
    else:
        raise
</snippet></ROW><ROW><id>20790769</id><snippet>from gi.repository import Gtk, GLib
import os, signal

class MySpawned(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self)
        self.set_default_size(600,600)

        vb = Gtk.VBox(False, 5)

        self.tw_out = Gtk.TextView()

        sw = Gtk.ScrolledWindow()
        vb.pack_start(sw, True, True, 0)
        sw.add(self.tw_out)

        self.tw_err = Gtk.TextView()

        sw = Gtk.ScrolledWindow()
        vb.pack_start(sw, True, True, 0)
        sw.add(self.tw_err)

        self.progress = Gtk.ProgressBar()
        vb.pack_start(self.progress, False, True, 0)

        bt = Gtk.Button('Run')
        bt.connect('clicked', self.process)
        vb.pack_start(bt, False, False, 0)

        bt = Gtk.Button('Stop')
        bt.connect('clicked', self.kill)
        vb.pack_start(bt, False, False, 0)

        self.add(vb)
        self.set_size_request(200, 300)
        self.connect('delete-event', Gtk.main_quit)
        self.show_all()

    def run(self):
        Gtk.main()

    def update_progress(self, data=None):
        self.progress.pulse()
        return True

    def kill(self, widget, data=None):
        os.kill(self.pid, signal.SIGTERM)

    def process(self, widget, data=None):
        params = ['du', '--si', '/']

        def scroll_to_end(textview):
            i = textview.props.buffer.get_end_iter()
            mark = textview.props.buffer.get_insert()
            textview.props.buffer.place_cursor(i)
            textview.scroll_to_mark(mark, 0.0, True, 0.0, 1.0)

        def write_to_textview(io, condition, tw):
            if condition is GLib.IO_HUP:
                GLib.source_remove(self.source_id_out)
                GLib.source_remove(self.source_id_err)
                return False

            line = io.readline()
            tw.props.buffer.insert_at_cursor(line)
            scroll_to_end(tw)

            while Gtk.events_pending():
                Gtk.main_iteration_do(False)

            return True

        self.pid, stdin, stdout, stderr = GLib.spawn_async(params,
            flags=GLib.SpawnFlags.SEARCH_PATH|GLib.SpawnFlags.DO_NOT_REAP_CHILD,                                       
            standard_output=True,
            standard_error=True)

        self.progress.set_text('Runnig du --si')

        io = GLib.IOChannel(stdout)
        err = GLib.IOChannel(stderr)

        self.source_id_out = io.add_watch(GLib.IO_IN|GLib.IO_HUP,
                                 write_to_textview,
                                 self.tw_out,
                                 priority=GLib.PRIORITY_HIGH)

        self.source_id_err = err.add_watch(GLib.IO_IN|GLib.IO_HUP,
                                 write_to_textview,
                                 self.tw_err,
                                 priority=GLib.PRIORITY_HIGH)

        timeout_id = GLib.timeout_add(100, self.update_progress)

        def closure_func(pid, status, data):
            GLib.spawn_close_pid(pid)
            GLib.source_remove(timeout_id)
            self.progress.set_fraction(0.0)

        GLib.child_watch_add(self.pid, closure_func, None)

if __name__ == '__main__':
    s = MySpawned()
    s.run()
</snippet></ROW><ROW><id>20790925</id><snippet>setData</snippet></ROW><ROW><id>20790925</id><snippet>setData</snippet></ROW><ROW><id>20790925</id><snippet>setData</snippet></ROW><ROW><id>20790925</id><snippet>setData</snippet></ROW><ROW><id>20790925</id><snippet>setData</snippet></ROW><ROW><id>20790969</id><snippet>s3direct.widgets.S3DirectEditor</snippet></ROW><ROW><id>20791042</id><snippet>    normalvariate(self, mu, sigma) method of Random instance
    Normal distribution.

    mu is the mean, and sigma is the standard deviation.
</snippet></ROW><ROW><id>20791042</id><snippet>import random
x= random.normalvariate(2,17)
</snippet></ROW><ROW><id>20791133</id><snippet>while True:
    do_some_updates(game)
    render_frame(game)
</snippet></ROW><ROW><id>20791133</id><snippet>render_frame()</snippet></ROW><ROW><id>20791133</id><snippet>do_some_updates()</snippet></ROW><ROW><id>20791133</id><snippet>render_frame</snippet></ROW><ROW><id>20791133</id><snippet>do_some_updates</snippet></ROW><ROW><id>20791133</id><snippet>def do_some_updates(game):
    # some code
    player = game.get_player()
    last_regen_call = player.last_regen_call
    now = game.current_frame()
    if now - last_regen_call &gt;= 60:  # assuming 60FPS
        player.life += amount_of_life
        player.last_regen_call = now
</snippet></ROW><ROW><id>20791133</id><snippet>import threading
import time
def regen_life(player):
    while True:
        player.life += amount_of_life
        time.sleep(1)

threading.Thread(target=regen_life, args=(game.player,)).start()
while True:
    do_some_updates(game)
    render_frame(game)
</snippet></ROW><ROW><id>20791133</id><snippet>do_some_updates</snippet></ROW><ROW><id>20791133</id><snippet>render_frame</snippet></ROW><ROW><id>20791133</id><snippet>regen_life</snippet></ROW><ROW><id>20791144</id><snippet>def main(soup, domain, path, types):
    for link in soup.findAll(href = compile(types)):
        file = link.get('href')

        # Make file URL absolute here
        if '://' not in file and not file.startswith('//'):
            if not file.startswith('/'):
                file = urlparse.urljoin(path, file)
            file = urlparse.urljoin(domain, file)

        try:
            urlretrieve(file)
        except:
            print 'Error retrieving %s using URL %s' % (
                link.get('href'), file)

for url in URLs:
    html_data = urlopen(url)
    soup = BeautifulSoup(html_data)

    urlinfo = urlparse.urlparse(url)
    domain = urlparse.urlunparse((urlinfo.scheme, urlinfo.netloc, '', '', '', ''))
    path = urlinfo.path.rsplit('/', 1)[0]

    for types in FILETYPE:
        main(soup, domain, path, types)
</snippet></ROW><ROW><id>20791144</id><snippet>urlparse</snippet></ROW><ROW><id>20791144</id><snippet>domain</snippet></ROW><ROW><id>20791144</id><snippet>path</snippet></ROW><ROW><id>20791144</id><snippet>&gt;&gt;&gt; url = "http://www.example.com/some/web/page.html"
&gt;&gt;&gt; urlinfo = urlparse.urlparse(url)
&gt;&gt;&gt; urlinfo
ParseResult(scheme='http', netloc='www.example.com',
            path='/some/web/page.html', params='', query='', fragment='')
&gt;&gt;&gt; domain = urlparse.urlunparse((urlinfo.scheme, urlinfo.netloc, '', '', '', ''))
&gt;&gt;&gt; domain
'http://www.example.com'
&gt;&gt;&gt; path = urlinfo.path.rsplit('/', 1)[0]
&gt;&gt;&gt; path
'/some/web'
</snippet></ROW><ROW><id>20791144</id><snippet>domain</snippet></ROW><ROW><id>20791144</id><snippet>path</snippet></ROW><ROW><id>20791144</id><snippet>"://"</snippet></ROW><ROW><id>20791144</id><snippet>"//"</snippet></ROW><ROW><id>20791144</id><snippet>"/"</snippet></ROW><ROW><id>20791175</id><snippet>@dec2
@dec1
def func(arg1, arg2, ...):
    pass
</snippet></ROW><ROW><id>20791175</id><snippet>def func(arg1, arg2, ...):
    pass
func = dec2(dec1(func))
</snippet></ROW><ROW><id>20791260</id><snippet>import xlrd
workbook = xlrd.open_workbook('C:/User/myaccount/Book1.xls')
worksheet = workbook.sheet_by_name('Sheet1')
print worksheet
</snippet></ROW><ROW><id>20791395</id><snippet>with open('C:/Users/Family3/Downloads/weather.csv', 'a', newline='') as csvfile:
    writer = csv.writer(csvfile, delimiter=',',
                            quotechar='|', quoting=csv.QUOTE_MINIMAL)
    writer.writerow(listsof)
</snippet></ROW><ROW><id>20791399</id><snippet>closes = resampledData['close'].fillna(method='pad')
resampledData.apply(lambda x: x.fillna(closes))
</snippet></ROW><ROW><id>20791399</id><snippet>fillna</snippet></ROW><ROW><id>20791399</id><snippet>resampledData.resample('55min', how={'price':'ohlc', 'amount':'sum'})
</snippet></ROW><ROW><id>20791399</id><snippet>ohlc</snippet></ROW><ROW><id>20791595</id><snippet>app</snippet></ROW><ROW><id>20791595</id><snippet>app = App(root)
</snippet></ROW><ROW><id>20791595</id><snippet>App</snippet></ROW><ROW><id>20791595</id><snippet>NameError</snippet></ROW><ROW><id>20791595</id><snippet>updateSIP</snippet></ROW><ROW><id>20791595</id><snippet>App</snippet></ROW><ROW><id>20791595</id><snippet>app.updateSIP()
</snippet></ROW><ROW><id>20791595</id><snippet>TypeError</snippet></ROW><ROW><id>20791595</id><snippet>updateSIP</snippet></ROW><ROW><id>20791595</id><snippet>App</snippet></ROW><ROW><id>20791595</id><snippet>self.updateSIP()
</snippet></ROW><ROW><id>20791595</id><snippet>class App:
    def __init__(self,master):
        #Code to pack frame and load objects
        self.updateSIP() #Function I am trying to call
    def updateSIP(self):
        #Code that pulls data from text file
root = Tk()
root.wm_title('title')
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>20791644</id><snippet>"a" "b"</snippet></ROW><ROW><id>20791644</id><snippet>"ab"</snippet></ROW><ROW><id>20791644</id><snippet>"a" + "b"</snippet></ROW><ROW><id>20791644</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def s(): print "a" "b"
...
&gt;&gt;&gt; dis.dis(s)
  1           0 LOAD_CONST               1 ('ab')
              3 PRINT_ITEM
              4 PRINT_NEWLINE
              5 LOAD_CONST               0 (None)
              8 RETURN_VALUE
&gt;&gt;&gt; def s(): print "ab"
...
&gt;&gt;&gt; dis.dis(s)
  1           0 LOAD_CONST               1 ('ab')
              3 PRINT_ITEM
              4 PRINT_NEWLINE
              5 LOAD_CONST               0 (None)
              8 RETURN_VALUE
&gt;&gt;&gt; def s(): print "a"+"b"
...
&gt;&gt;&gt; dis.dis(s)
  1           0 LOAD_CONST               3 ('ab')
              3 PRINT_ITEM
              4 PRINT_NEWLINE
              5 LOAD_CONST               0 (None)
              8 RETURN_VALUE
</snippet></ROW><ROW><id>20791644</id><snippet>&gt;&gt;&gt; def s(): print "a" + chr(98)
...
&gt;&gt;&gt; dis.dis(s)
  1           0 LOAD_CONST               1 ('a')
              3 LOAD_GLOBAL              0 (chr)
              6 LOAD_CONST               2 (98)
              9 CALL_FUNCTION            1
             12 BINARY_ADD
             13 PRINT_ITEM
             14 PRINT_NEWLINE
             15 LOAD_CONST               0 (None)
             18 RETURN_VALUE
&gt;&gt;&gt; s()
ab
</snippet></ROW><ROW><id>20791707</id><snippet>In [1]: data = [{'a': 1, 'b': 3, 'date': '2013-09-20 20:07:26'},
   ...:         {'a': 2, 'b': 6, 'date': '2013-09-20 20:07:28'},
   ...:         {'a': 7, 'b': 5, 'date': '2013-09-20 20:07:33'}]

In [2]: df = pd.DataFrame(data)
In [3]: df = df.set_index('date')
In [4]: df.index = df.index.to_datetime()
In [5]: df.resample('5min', how='mean')
Out[5]:
                            a         b
2013-09-20 20:05:00  3.333333  4.666667
</snippet></ROW><ROW><id>20791819</id><snippet>d1 = {"foo": [1, 2, 3]}
d2 = d1.copy()
# Add a new element to d2 to show that the copy worked
d2["bar"] = []

# The two dicts are different.
print d1
print d2

# However, the list wasn't copied 
# it's the same object that shows up in 2 different dicts
print d1["foo"] is d2["foo"]

# So that's what happens in your code: you're mutating the list.
d1["foo"].append(5)
print d2["foo"]
</snippet></ROW><ROW><id>20792084</id><snippet>foo</snippet></ROW><ROW><id>20792084</id><snippet>A</snippet></ROW><ROW><id>20792084</id><snippet>a1 = A()
a2 = A()
print a1.foo is a2.foo
print a1.foo is A.foo
</snippet></ROW><ROW><id>20792084</id><snippet>self.foo = []</snippet></ROW><ROW><id>20792084</id><snippet>foo</snippet></ROW><ROW><id>20792084</id><snippet>A</snippet></ROW><ROW><id>20792238</id><snippet>def start_requests(self, filename, columnname):
    with open(filename) as file:
        headers = file.readline().strip().split(',')
        for line in file.readlines():
            zipcode = line.strip().split(',')[headers.index(columnname)]
            yield self.make_requests_from_url("http://www.example.com/zipcode/%05d/search.php" % zipcode)
</snippet></ROW><ROW><id>20792248</id><snippet>class CheckFunction(object):
     def __init__(self):
        self.mapping = [6,2,5,5,4,5,6,3,7,6]
     def newFunction(self,code):
        count = 0
        for n in code:
           count += self.mapping[int(n)]
        return count

obj = CheckFunction()
obj.newFunction("13579")
</snippet></ROW><ROW><id>20792248</id><snippet>&gt;&gt;&gt; obj.newFunction('13579')
21
</snippet></ROW><ROW><id>20792333</id><snippet>driver.find_elements_by_class_name(classname)
</snippet></ROW><ROW><id>20792485</id><snippet>entryWidget</snippet></ROW><ROW><id>20792485</id><snippet>App</snippet></ROW><ROW><id>20792485</id><snippet>self.</snippet></ROW><ROW><id>20792485</id><snippet>def __init__(self,master):
    calcframe = Frame(master)
    calcframe.pack()
    self.vol = DoubleVar()
    self.entryWidget = Entry(calcframe, textvariable=self.vol)
    self.entryWidget.grid(row=1, column=1, sticky=W)
    self.entryWidget.focus()
</snippet></ROW><ROW><id>20792485</id><snippet>entryWidget</snippet></ROW><ROW><id>20792485</id><snippet>App</snippet></ROW><ROW><id>20792485</id><snippet>self</snippet></ROW><ROW><id>20792526</id><snippet>socket.getfqdn()</snippet></ROW><ROW><id>20792526</id><snippet>&gt;&gt;&gt; import socket   
&gt;&gt;&gt; socket.getfqdn()
'phxdbx45.phx.host.com'
</snippet></ROW><ROW><id>20792531</id><snippet>def rgb(minimum, maximum, value):
    minimum, maximum = float(minimum), float(maximum)
    halfmax = (minimum + maximum) / 2
    b = int(max(0, 255*(1 - value/halfmax)))
    r = int(max(0, 255*(value/halfmax - 1)))
    g = 255 - b - r
    return r, g, b
</snippet></ROW><ROW><id>20792676</id><snippet>In [74]: df.set_index('timestamp').sort_index().groupby(pd.TimeGrouper('1D')).apply(lambda x: x.groupby(['username','session']).sum())
Out[74]: 
                             cnt
           username session     
2012-12-12 bob      one        1
2012-12-13 bob      two        1
2012-12-14 nancy    three      1

[3 rows x 1 columns]
</snippet></ROW><ROW><id>20792755</id><snippet>def rec(x,n):
    if n&gt;0:
        x2 = x*n
        return rec(x2,n-1)
    else:
        return x
</snippet></ROW><ROW><id>20792821</id><snippet>def method2_dictionary(request):
    people = Person.objects.all()
    return render_to_response('template.htm', {'people': people})
</snippet></ROW><ROW><id>20792821</id><snippet>{% for p in people %}
    {{ p.first_name }}
    etc
{% endfor %}
</snippet></ROW><ROW><id>20792821</id><snippet>p.age = p.getAge()</snippet></ROW><ROW><id>20792821</id><snippet>{{ p.getAge }}</snippet></ROW><ROW><id>20792821</id><snippet>def get_age(self)</snippet></ROW><ROW><id>20792821</id><snippet>{{ p.get_age }}</snippet></ROW><ROW><id>20792821</id><snippet>get_age</snippet></ROW><ROW><id>20792821</id><snippet>property</snippet></ROW><ROW><id>20792821</id><snippet>age</snippet></ROW><ROW><id>20792821</id><snippet>@property
def age(self):
    return ... # return the calculated years since date_of_birth
</snippet></ROW><ROW><id>20792821</id><snippet>{% for p in people %}
    {{ p.first_name }}
    {{ p.age }}
    etc
{% endfor %}
</snippet></ROW><ROW><id>20792821</id><snippet>last_30</snippet></ROW><ROW><id>20792821</id><snippet>annotate()</snippet></ROW><ROW><id>20792821</id><snippet>people</snippet></ROW><ROW><id>20792821</id><snippet>Login</snippet></ROW><ROW><id>20792821</id><snippet>Person</snippet></ROW><ROW><id>20792821</id><snippet>Login</snippet></ROW><ROW><id>20792821</id><snippet>select_related()</snippet></ROW><ROW><id>20792821</id><snippet>Person</snippet></ROW><ROW><id>20792821</id><snippet>Login</snippet></ROW><ROW><id>20792821</id><snippet>def method3(request):
    logins = Login.objects.filter(
        person__in=Person.objects.all(),
        login_date__gt=date.today() - timedelta(days=90)
    ).order_by('person', 'login_date').select_related()
    return render_to_response('template.htm', {'logins': logins})
</snippet></ROW><ROW><id>20792821</id><snippet>Person.objects.all()</snippet></ROW><ROW><id>20792821</id><snippet>person__in</snippet></ROW><ROW><id>20792821</id><snippet>regroup</snippet></ROW><ROW><id>20792821</id><snippet>{% regroup logins by person as people %}
{% for person in people %}
    {% with person.grouper as p %}
        {{ p.first_name }}
        {% for login in person.list %}
            {{ login.login_date }}
        {% endfor %}
    {% endwith %}
{% endfor %}
</snippet></ROW><ROW><id>20792821</id><snippet>{% regroup logins by person as people %}
{% for person in people %}
    {% with person.grouper as p %}
        {{ p.first_name }}
        {% logins_since person.list 60 as last_60_days %}
        {% logins_since person.list 30 as last_30_days %}
        {% for login in last_30_days %}
            {{ login.login_date }}
        {% endfor %}
        {% for login in last_60_days %}
            {{ login.login_date }}
        {% endfor %}
    {% endwith %}
{% endfor %}
</snippet></ROW><ROW><id>20792894</id><snippet>from itertools import groupby

interfaces = {}
with open('ip.txt') as f:
    lines = [line for line in f if line.strip()]
    # group by line number
    for key, group in groupby(lines, lambda x: x.split()[0]):
        interface = []
        for thing in group:
            # append lines without repeating part
            interface += thing.split()[2:]
        if interface:
            interfaces[key] = interface

    for key, interface in interfaces.items():
        for x in ['inet', 'inet6', 'state', 'link/ether']:
            if x in interface:
                idx = interface.index(x)
                print '%s %s=%s' % (key, x, interface[idx+1])


$ python ip.py
3: state=UP
3: link/ether=b8:ca:3a:65:43:3c
4: state=UP
4: link/ether=b8:ca:3a:65:43:3e
5: state=UP
5: link/ether=b8:ca:3a:65:43:3e
1: inet=127.0.0.1/8
1: inet6=::1/128
1: state=UNKNOWN
10: inet6=fe80::baca:3aff:fe65:433c/64
10: state=UP
10: link/ether=b8:ca:3a:65:43:3c
2: state=UP
2: link/ether=b8:ca:3a:65:43:3c
8: state=DOWN
8: link/ether=a0:36:9f:27:13:4a
9: state=DOWN
9: link/ether=a0:36:9f:27:13:4b
12: inet6=fe80::baca:3aff:fe65:433e/64
12: state=UP
12: link/ether=b8:ca:3a:65:43:3e
6: state=DOWN
6: link/ether=a0:36:9f:27:13:48
7: state=DOWN
7: link/ether=a0:36:9f:27:13:49
</snippet></ROW><ROW><id>20793206</id><snippet>OneToOneField</snippet></ROW><ROW><id>20793206</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>20793206</id><snippet>User</snippet></ROW><ROW><id>20793206</id><snippet>User</snippet></ROW><ROW><id>20793206</id><snippet>User</snippet></ROW><ROW><id>20793206</id><snippet>Group</snippet></ROW><ROW><id>20793206</id><snippet>User</snippet></ROW><ROW><id>20793219</id><snippet>if one % counter == 0 and two % counter == 0:
</snippet></ROW><ROW><id>20793219</id><snippet>if counter % one == 0 and counter % two == 0:
</snippet></ROW><ROW><id>20793219</id><snippet>counter</snippet></ROW><ROW><id>20793219</id><snippet>None</snippet></ROW><ROW><id>20793219</id><snippet>print counter
break
</snippet></ROW><ROW><id>20793219</id><snippet>return counter
</snippet></ROW><ROW><id>20793219</id><snippet>counter</snippet></ROW><ROW><id>20793219</id><snippet>counter</snippet></ROW><ROW><id>20793219</id><snippet>#LCM Calculator
#Author: Ethan Houston
#Language: Python
#Date: 2013-12-27
#Function: Program takes 2 numbers as input, and finds the lowest number
# that goes into each of them

def lcmCalculator(one, two):
    """ takes two numbers as input, computes a number that evenly 
        divides both numbers """
    counter = min_inp = min(one, two)
    while True:
        if counter % one == 0 and counter % two == 0:
            return counter
        else:
            counter += min_inp

print "\nThis program takes two numbers and computes the LCM of them...\n"

first_number = input("Enter your first number: ")
second_number = input("Enter your second number: ")

print lcmCalculator(first_number, second_number)
</snippet></ROW><ROW><id>20793219</id><snippet>input</snippet></ROW><ROW><id>20793219</id><snippet>raw_input</snippet></ROW><ROW><id>20793219</id><snippet>int</snippet></ROW><ROW><id>20793219</id><snippet>first_number = int(raw_input("Enter your first number: "))
second_number = int(raw_input("Enter your second number: "))
</snippet></ROW><ROW><id>20793386</id><snippet>context.closing()</snippet></ROW><ROW><id>20793386</id><snippet>with</snippet></ROW><ROW><id>20793386</id><snippet>connect_db()</snippet></ROW><ROW><id>20793386</id><snippet>sqlit3</snippet></ROW><ROW><id>20793386</id><snippet>connection.__exit__()</snippet></ROW><ROW><id>20793386</id><snippet>contextlib.closing()</snippet></ROW><ROW><id>20793386</id><snippet>connection.close()</snippet></ROW><ROW><id>20793386</id><snippet>db.commit()</snippet></ROW><ROW><id>20793386</id><snippet>def init_db():
    with closing(connect_db()) as db:
        with app.open_resource('schema.sql') as f, db:
            db.cursor().executescript(f.read())
</snippet></ROW><ROW><id>20793386</id><snippet>, db</snippet></ROW><ROW><id>20793386</id><snippet>with</snippet></ROW><ROW><id>20793386</id><snippet>db.__exit__()</snippet></ROW><ROW><id>20793512</id><snippet>self.name</snippet></ROW><ROW><id>20793512</id><snippet>name</snippet></ROW><ROW><id>20793512</id><snippet>class Human:
    def __init__(self):
        self.name = None

    def setName(self, _name):
        self.name = _name

    # NOTE: There is no more name method here!
</snippet></ROW><ROW><id>20793512</id><snippet>jim = Human()
jim.setName("Jim")
print(jim.name)  # directly using the attribute
</snippet></ROW><ROW><id>20793512</id><snippet>jim = Human()
jim.name = "Jim"
print(jim.name)
</snippet></ROW><ROW><id>20793512</id><snippet>self._name</snippet></ROW><ROW><id>20793512</id><snippet>class Human:
    _name = None

    def setName(self, _name):
        self._name = _name

    def name(self):
        return self._name
</snippet></ROW><ROW><id>20793512</id><snippet>Human._name</snippet></ROW><ROW><id>20793512</id><snippet>self._name</snippet></ROW><ROW><id>20793512</id><snippet>Human.setName()</snippet></ROW><ROW><id>20793592</id><snippet>AttributeError: 'module' object has no attribute 'readline'
</snippet></ROW><ROW><id>20793592</id><snippet>csv</snippet></ROW><ROW><id>20793592</id><snippet>readline</snippet></ROW><ROW><id>20793592</id><snippet>csv</snippet></ROW><ROW><id>20793592</id><snippet>for lines in f.readlines():</snippet></ROW><ROW><id>20793810</id><snippet>auth.User</snippet></ROW><ROW><id>20793810</id><snippet>users.User</snippet></ROW><ROW><id>20793810</id><snippet>User</snippet></ROW><ROW><id>20793810</id><snippet>User</snippet></ROW><ROW><id>20793810</id><snippet>User</snippet></ROW><ROW><id>20793810</id><snippet>form_class</snippet></ROW><ROW><id>20793856</id><snippet>class Property:
    def __init__(self, *args, **kwargs):
        #initialize the property with any information it needs to do get and set
    def __get__(self,obj, type=None):
        #logic to get from database or cache

    def __set__(self,obj, value):
        #logic to set the value and sync with database if necessary.
</snippet></ROW><ROW><id>20793856</id><snippet>class Student:
    student_id = Property(...)
    name = Property(...)
    classes = Property(...)
</snippet></ROW><ROW><id>20793899</id><snippet>import pandas as pd
from datetime import datetime
d = {'ru' : pd.Series([1., 1., 1.,1, 3]),
   'case' : pd.Series([2., 2., 2., 2., 2]),
      'opdate' : pd.Series([datetime(2012, 5, 2), datetime(2012, 5, 2), datetime(2012, 5, 2),datetime(2012, 5, 2), datetime(2012, 5, 2)]),
   'lst_svc' : pd.Series([datetime(2012, 5, 2), datetime(2012, 5, 3), datetime(2012, 5, 5),datetime(2012, 5, 5),datetime(2012, 6, 5)])}

df=pd.DataFrame(d)

def f(s):
    s2 = pd.Series(0, index=s.index)
    s2.iloc[-1] = 1
    return s2

df["lastMark"] = df.groupby(['ru','case','opdate'])['lst_svc'].apply(f)
df
</snippet></ROW><ROW><id>20793923</id><snippet>twisted.internet.endpoints._WrappingProtocol</snippet></ROW><ROW><id>20793923</id><snippet>_WrappingFactory</snippet></ROW><ROW><id>20793923</id><snippet>setTcpKeepAlive</snippet></ROW><ROW><id>20793923</id><snippet>self.transport.setTcpKeepAlive</snippet></ROW><ROW><id>20793923</id><snippet>connectionMade</snippet></ROW><ROW><id>20793923</id><snippet>#!/usr/bin/python
# based on example at http://twistedmatrix.com/pipermail/twisted-python/2008-June/017836.html
from twisted.internet import protocol 
from twisted.internet import reactor

class EchoProtocol(protocol.Protocol):
    def connectionMade(self):
        print "Client Connected Detected!"
        ### enable keepalive if supported
        try:
            self.transport.setTcpKeepAlive(1)
        except AttributeError: pass

    def connectionLost(self, reason):
        print "Client Connection Lost!"

    def dataReceived(self, data):
        self.transport.write(data)


factory = protocol.Factory()
factory.protocol = EchoProtocol 
reactor.listenTCP(8000, factory) 
reactor.run()
</snippet></ROW><ROW><id>20793923</id><snippet>_WrappingFactory</snippet></ROW><ROW><id>20793923</id><snippet>ClientFactory</snippet></ROW><ROW><id>20794047</id><snippet>__init__</snippet></ROW><ROW><id>20794047</id><snippet>test.__init__</snippet></ROW><ROW><id>20794047</id><snippet>class test(base):
    def __init__(self):
        base.__init__(self)
</snippet></ROW><ROW><id>20794047</id><snippet>super</snippet></ROW><ROW><id>20794047</id><snippet>class test(base):
    def __init__(self):
        super(test, self).__init__()
</snippet></ROW><ROW><id>20794047</id><snippet>base.__init__</snippet></ROW><ROW><id>20794047</id><snippet>class base(object):
    def __init__(self, text):
</snippet></ROW><ROW><id>20794047</id><snippet>test.__init__</snippet></ROW><ROW><id>20794047</id><snippet>class test(base):
    def __init__(self, text):
        base.__init__(self, text)
</snippet></ROW><ROW><id>20794047</id><snippet>self</snippet></ROW><ROW><id>20794131</id><snippet>server {
    listen   80;
          server_name scholarly;
      # crowdscholar endpoint
        location /crowdscholar {
            uwsgi_pass unix:///tmp/crowdscholar.sock;
        include uwsgi_params;
        # strip path before handing it to app
        uwsgi_param SCRIPT_NAME /crowdscholar;
        uwsgi_modifier1 30;
    }
    # citelet endpoint
        location /citelet {
            uwsgi_pass unix:///tmp/citelet.sock;
        include uwsgi_params;
        # strip path before handing it to app
        uwsgi_param SCRIPT_NAME /citelet;
        uwsgi_modifier1 30;
    }
}
</snippet></ROW><ROW><id>20794549</id><snippet>print</snippet></ROW><ROW><id>20794549</id><snippet>print(sheet_ranges.cell('A14').value)
#    ^                              ^
</snippet></ROW><ROW><id>20794669</id><snippet>actors = [item.text for item in soup.findAll('span', {"itemprop":"actor"})]
print "Actors: %s" % (", ".join(actors))
</snippet></ROW><ROW><id>20794706</id><snippet>proc = subprocess.Popen('testing.sh', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = proc.communicate()
if stderr:
   print "Shell script gave some error"
else:
   print "end" # Shell script ran fine.
</snippet></ROW><ROW><id>20794731</id><snippet>lst</snippet></ROW><ROW><id>20794731</id><snippet>wrapper</snippet></ROW><ROW><id>20794731</id><snippet>wrapper</snippet></ROW><ROW><id>20794731</id><snippet>lst = [v.lower() for v in lst]</snippet></ROW><ROW><id>20794731</id><snippet>lst</snippet></ROW><ROW><id>20794731</id><snippet>lst</snippet></ROW><ROW><id>20794731</id><snippet>nonlocal lst</snippet></ROW><ROW><id>20794731</id><snippet>lst</snippet></ROW><ROW><id>20794731</id><snippet>record_deco</snippet></ROW><ROW><id>20794731</id><snippet>lst</snippet></ROW><ROW><id>20794863</id><snippet>self.image, self.rect = load_image(self.clicked_image_source, -1)
</snippet></ROW><ROW><id>20794863</id><snippet>None</snippet></ROW><ROW><id>20794863</id><snippet>.JPG</snippet></ROW><ROW><id>20794863</id><snippet>.JPG</snippet></ROW><ROW><id>20794945</id><snippet>concurrent.futures</snippet></ROW><ROW><id>20794945</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>20794945</id><snippet>multiprocessing</snippet></ROW><ROW><id>20794945</id><snippet>Pool.apply_async()</snippet></ROW><ROW><id>20794945</id><snippet>Queue.Queue</snippet></ROW><ROW><id>20794945</id><snippet>Queue</snippet></ROW><ROW><id>20794945</id><snippet>Queues</snippet></ROW><ROW><id>20794945</id><snippet>concurrent.futures</snippet></ROW><ROW><id>20794945</id><snippet># Define global result_queue only in the main program.
import Queue
result_queue = Queue.Queue(100)  # pick a reasonable max size based on your problem

# Run this in as many threads as you like.
def consume_results():
    while True:
        a = result_queue.get()
        if a is None:
            break
        output(a.get())  # `output()` is your function

...
# main program passes out work, after starting threads
for i in range(1000):
    # the .put() will block so long as the queue is at its max size
    result_queue.put(pool.apply_async(calculate, args=(i,)))
# add sentinels to let threads know they're done
for i in range(number_of_threads_you_started):
    result_queue.put(None)
</snippet></ROW><ROW><id>20794945</id><snippet>concurrent.futures</snippet></ROW><ROW><id>20794945</id><snippet>multiprocessing</snippet></ROW><ROW><id>20794945</id><snippet>threading</snippet></ROW><ROW><id>20794945</id><snippet>threading</snippet></ROW><ROW><id>20794945</id><snippet>concurrent.futures</snippet></ROW><ROW><id>20794945</id><snippet>Future</snippet></ROW><ROW><id>20794945</id><snippet>multiprocessing</snippet></ROW><ROW><id>20794945</id><snippet>MAX_QUEUE_SIZE</snippet></ROW><ROW><id>20794945</id><snippet>i += 1</snippet></ROW><ROW><id>20794945</id><snippet>import concurrent.futures as cf
import threading
import queue

NUM_CPUS = 3
NUM_THREADS = 4
MAX_QUEUE_SIZE = 20

# Runs in worker processes.
def producer(i):
    return i + 10

def consumer(i):
    global total
    # We need to protect this with a lock because
    # multiple threads in the main program can
    # execute this function simultaneously.
    with sumlock:
        total += i

# Runs in threads in main program.
def consume_results(q):
    while True:
        future = q.get()
        if future is None:
            break
        else:
            consumer(future.result())

if __name__ == "__main__":
    sumlock = threading.Lock()
    result_queue = queue.Queue(MAX_QUEUE_SIZE)
    total = 0
    NUM_TO_DO = 1000
    with cf.ThreadPoolExecutor(NUM_THREADS) as tp:
        # start the threads running `consume_results`
        for _ in range(NUM_THREADS):
            tp.submit(consume_results, result_queue)
        # start the worker processes
        with cf.ProcessPoolExecutor(NUM_CPUS) as pp:
            for i in range(NUM_TO_DO):
                # blocks until the queue size &lt;= MAX_QUEUE_SIZE
                result_queue.put(pp.submit(producer, i))
        # tell threads we're done
        for _ in range(NUM_THREADS):
            result_queue.put(None)
    print("got", total, "expected", (10 + NUM_TO_DO + 9) * NUM_TO_DO // 2)
</snippet></ROW><ROW><id>20794945</id><snippet>got 509500 expected 509500
</snippet></ROW><ROW><id>20795001</id><snippet>test = ['1', '2', '3', '4']
i = 0
while i &lt; len(test):
    print test[i]
    # Do anything with i here, e.g.
    i = i - 2
    # This is part of the loop
    i = i + 1
</snippet></ROW><ROW><id>20795073</id><snippet>.</snippet></ROW><ROW><id>20795073</id><snippet>.*</snippet></ROW><ROW><id>20795073</id><snippet>year</snippet></ROW><ROW><id>20795073</id><snippet>year</snippet></ROW><ROW><id>20795073</id><snippet>year.*year</snippet></ROW><ROW><id>20795073</id><snippet>import re
string2 = re.sub('year(.*)year', r'century\1one', string1)
</snippet></ROW><ROW><id>20795350</id><snippet>os.startfile(r'C:\Users\me\Desktop\Personal\Songs\U2 - Beautiful Day.mp3')
</snippet></ROW><ROW><id>20795350</id><snippet>r</snippet></ROW><ROW><id>20795350</id><snippet>os.system('start "'+that_string+'"')
</snippet></ROW><ROW><id>20795402</id><snippet>kwargs</snippet></ROW><ROW><id>20795402</id><snippet>thread = threading.Thread(target=urllib2.urlopen, kwargs={
    'url': REMOVE_SERVER_URL,
    'data': context
})
</snippet></ROW><ROW><id>20795402</id><snippet>thread = threading.Thread(
    target=urllib2.urlopen,
    kwargs=dict(url=REMOVE_SERVER_URL, data=context)
)
</snippet></ROW><ROW><id>20795841</id><snippet>import numba
@numba.autojit
def speratedsum2():
    s = 0
    tmp=0
    for x in xrange(10000):
        if x % 100 == 0:
            s += tmp
            tmp=0
        else:
            tmp+=x
    return s


In [140]: %timeit sum([x for x in speratedsum1()])
1000 loops, best of 3: 625 µs per loop

In [142]: %timeit speratedsum2()
10000 loops, best of 3: 113 µs per loop
</snippet></ROW><ROW><id>20795962</id><snippet>$ ./echo_client 8080
write error:Broken pipe
write error:Broken pipe
read error:Connection reset by peer
write error:Broken pipe
$ 
</snippet></ROW><ROW><id>20795962</id><snippet>self.listen(5)</snippet></ROW><ROW><id>20795962</id><snippet>self.listen(15)</snippet></ROW><ROW><id>20796037</id><snippet>ax.plot(x, y, alpha=0.5)
</snippet></ROW><ROW><id>20796085</id><snippet>Users/my_name/env/bin/easy_install pyramid_mako
Users/my_name/env/bin/python tasks.py
</snippet></ROW><ROW><id>20796085</id><snippet>easy_install virtualenvwrapper
source /usr/local/bin/virtualenvwrapper.sh
mkvirtualenv [env1]
workon [env]
deactivate
</snippet></ROW><ROW><id>20796431</id><snippet>order.customer.CustomerName
</snippet></ROW><ROW><id>20796431</id><snippet>CustomerName</snippet></ROW><ROW><id>20796927</id><snippet>from module import *</snippet></ROW><ROW><id>20796927</id><snippet>module</snippet></ROW><ROW><id>20796927</id><snippet>from config import *</snippet></ROW><ROW><id>20796927</id><snippet>module</snippet></ROW><ROW><id>20796927</id><snippet>import threading as th</snippet></ROW><ROW><id>20796927</id><snippet>module</snippet></ROW><ROW><id>20796955</id><snippet>import os
os.chdir('C:\\Users\\username\\Desktop\\headfirstpython') ## Where username is replaced with your actual username
</snippet></ROW><ROW><id>20796955</id><snippet>os.chdir('chapter3') 
</snippet></ROW><ROW><id>20796955</id><snippet>os.chdir('.\\chapter3')
</snippet></ROW><ROW><id>20796955</id><snippet>os.chdir('C:\\Users\\username\\Desktop\\headfirstpython\\chapter3')
</snippet></ROW><ROW><id>20797032</id><snippet>foo</snippet></ROW><ROW><id>20797032</id><snippet>MyClass</snippet></ROW><ROW><id>20797032</id><snippet>for line in foo.a</snippet></ROW><ROW><id>20797032</id><snippet>for line in foo.a:
    bar.append(MyClass(line, foo.index))
</snippet></ROW><ROW><id>20797032</id><snippet>bar = [ MyClass(line, foo.index) for line in foo.a ]
</snippet></ROW><ROW><id>20797032</id><snippet>foo.a</snippet></ROW><ROW><id>20797032</id><snippet>deepcopy</snippet></ROW><ROW><id>20797032</id><snippet>MyClass</snippet></ROW><ROW><id>20797032</id><snippet>foo</snippet></ROW><ROW><id>20797032</id><snippet>deepcopy</snippet></ROW><ROW><id>20797032</id><snippet>MyClass</snippet></ROW><ROW><id>20797032</id><snippet>MyClass(...)</snippet></ROW><ROW><id>20797032</id><snippet>type(foo)(...)</snippet></ROW><ROW><id>20797081</id><snippet>&gt;&gt;&gt; import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
</snippet></ROW><ROW><id>20797307</id><snippet>list</snippet></ROW><ROW><id>20797307</id><snippet>None</snippet></ROW><ROW><id>20797307</id><snippet>result == my_func()
if result is None:
    foo()
else:
    bar(result)
</snippet></ROW><ROW><id>20797307</id><snippet>False</snippet></ROW><ROW><id>20797307</id><snippet>result = my_func()
if result:
    use_list(result)
else:
    empty_list()
</snippet></ROW><ROW><id>20797467</id><snippet>HTTPConnection</snippet></ROW><ROW><id>20797467</id><snippet>request</snippet></ROW><ROW><id>20797467</id><snippet>send</snippet></ROW><ROW><id>20797467</id><snippet>def send(self, data):
    """Send `data' to the server."""
    if self.sock is None:
        if self.auto_open:
            self.connect()
        else:
            raise NotConnected()
    ...
</snippet></ROW><ROW><id>20797467</id><snippet>auto_open</snippet></ROW><ROW><id>20797467</id><snippet>connect</snippet></ROW><ROW><id>20797637</id><snippet>&gt;&gt;&gt; ls = [['kukatpally'], ['gachibowli'], ['Madhapur'], ['Chintal']]
&gt;&gt;&gt; l = [x[0] for x in ls]
&gt;&gt;&gt; l
['kukatpally', 'gachibowli', 'Madhapur', 'Chintal']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20798008</id><snippet>1024 - 9999</snippet></ROW><ROW><id>20798008</id><snippet>port 3000</snippet></ROW><ROW><id>20798008</id><snippet>port 80</snippet></ROW><ROW><id>20798058</id><snippet>Function</snippet></ROW><ROW><id>20798058</id><snippet>while True:
    while Function == "Home":
        # check for the QUIT event
        events = pygame.event.get()
        for event in events:
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONUP:
                Function = "txtbox"
                break


        pygame.display.flip()



    while Function == "txtbox":

        events = pygame.event.get()
        # process other events
        for event in events:

              if event.type == pygame.MOUSEBUTTONUP:
                Function = "Home"
                break

        pygame.display.flip()
</snippet></ROW><ROW><id>20798218</id><snippet>None</snippet></ROW><ROW><id>20798218</id><snippet>None</snippet></ROW><ROW><id>20798218</id><snippet>g</snippet></ROW><ROW><id>20798218</id><snippet>and</snippet></ROW><ROW><id>20798218</id><snippet>f</snippet></ROW><ROW><id>20798218</id><snippet>g()</snippet></ROW><ROW><id>20798218</id><snippet>and</snippet></ROW><ROW><id>20798218</id><snippet>f()</snippet></ROW><ROW><id>20798218</id><snippet>and</snippet></ROW><ROW><id>20798218</id><snippet>g</snippet></ROW><ROW><id>20798218</id><snippet>h</snippet></ROW><ROW><id>20799060</id><snippet>set</snippet></ROW><ROW><id>20799060</id><snippet>Update the set, adding elements from all others.
</snippet></ROW><ROW><id>20799323</id><snippet>byref</snippet></ROW><ROW><id>20799323</id><snippet>pointer</snippet></ROW><ROW><id>20799323</id><snippet>argtypes</snippet></ROW><ROW><id>20799323</id><snippet>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

typedef struct _NodeStatInfo {
    char status[10];
    char name[64];
} NodeStatInfo;

int count = 3;

int cluster_info(char *remote_ip,
                 NodeStatInfo ***info,
                 int *node_count)
{
    int i;
    *info = (NodeStatInfo **)malloc(sizeof(NodeStatInfo *) * count);
    for(i = 0; i &lt; count; i++) {
        (*info)[i] = (NodeStatInfo *)malloc(sizeof(NodeStatInfo));
        strcpy((*info)[i]-&gt;status, "init");
        sprintf((*info)[i]-&gt;name, "node%d", i); 
    }
    *node_count = count;
    return 0;
}
</snippet></ROW><ROW><id>20799323</id><snippet>from ctypes import * 

class NodeStatInfo(Structure):
    _fields_ = [
        ('status', c_char * 10),
        ('name', c_char * 64)]

P_NodeStatInfo = POINTER(NodeStatInfo)
PP_NodeStatInfo = POINTER(P_NodeStatInfo)

lib = CDLL('./lib.so')
lib.cluster_info.argtypes = [c_char_p, 
                             POINTER(PP_NodeStatInfo), 
                             POINTER(c_int)]
</snippet></ROW><ROW><id>20799323</id><snippet>&gt;&gt;&gt; SOME_IP = '192.168.1.1'
&gt;&gt;&gt; node_info = PP_NodeStatInfo()
&gt;&gt;&gt; sn_count = c_int(0)
&gt;&gt;&gt; lib.cluster_info(SOME_IP, byref(node_info), byref(sn_count))
0

&gt;&gt;&gt; [node_info[i][0].status for i in range(sn_count.value)]
['init', 'init', 'init']

&gt;&gt;&gt; [node_info[i][0].name for i in range(sn_count.value)]
['node0', 'node1', 'node2']
</snippet></ROW><ROW><id>20799507</id><snippet>isinstance(something, io.IOBase)</snippet></ROW><ROW><id>20799507</id><snippet>something</snippet></ROW><ROW><id>20799507</id><snippet>io.IOBase</snippet></ROW><ROW><id>20799507</id><snippet>isinstance()</snippet></ROW><ROW><id>20799507</id><snippet>abc</snippet></ROW><ROW><id>20799507</id><snippet>abc</snippet></ROW><ROW><id>20799507</id><snippet>from abc import ABCMeta, abstractmethod

class ABCFileLike(metaclass=ABCMeta):
    @abstractmethod
    def __init__(self): pass

    @abstractmethod
    def write(self, line): pass

    @abstractmethod
    def close(self): pass

    @abstractmethod
    def flush(self): pass
</snippet></ROW><ROW><id>20799507</id><snippet>TypeError</snippet></ROW><ROW><id>20799507</id><snippet>class file_like(ABCFileLike):
    def __init__(self):
        pass

    def write(self, line):
        print("Written:", line)

    def close(self):
        pass

    def flush(self):
        pass

print(isinstance(file_like(), ABCFileLike))  # True
</snippet></ROW><ROW><id>20799507</id><snippet>import io

print(isinstance(io.IOBase(), ABCFileLike))  # False
ABCFileLike.register(io.IOBase)
print(isinstance(io.IOBase(), ABCFileLike))  # True
</snippet></ROW><ROW><id>20799687</id><snippet>def CronbachAlpha(itemscores):
    itemscores = numpy.asarray(itemscores)
    itemvars = itemscores.var(axis=1, ddof=1)
    tscores = itemscores.sum(axis=0)
    nitems = len(itemscores)

    return nitems / (nitems-1) * (1 - itemvars.sum() / tscores.var(ddof=1))
</snippet></ROW><ROW><id>20799687</id><snippet>ddof=1</snippet></ROW><ROW><id>20799687</id><snippet>sum</snippet></ROW><ROW><id>20799692</id><snippet>pmsg</snippet></ROW><ROW><id>20799692</id><snippet>NULL</snippet></ROW><ROW><id>20799692</id><snippet>byref(pmsg)</snippet></ROW><ROW><id>20799692</id><snippet>argtypes</snippet></ROW><ROW><id>20799692</id><snippet>from ctypes import *
from ctypes.wintypes import *

class CMsg(Structure):
    _fields_ = [
        ('bE', c_ubyte),
        ('cH', c_ubyte),
        ('cL', c_ubyte),
        ('EId1', c_ubyte),
        ('EId0', c_ubyte),
        ('SId1', c_ubyte),
        ('SId0', c_ubyte),
        ('DLC', c_ubyte),
        ('D0', c_ubyte),
        ('D1', c_ubyte),
        ('D2', c_ubyte),
        ('D3', c_ubyte),
        ('D4', c_ubyte),
        ('D5', c_ubyte),
        ('D6', c_ubyte),
        ('D7', c_ubyte)]

hllDll = cdll...
hllDll.WriteCANMessage.argtypes = [HANDLE, POINTER(CMsg)]

handle = ...
pmsg = CMsg() #  initially memset to {0}
hllDll.WriteCANMessage(handle, byref(pmsg))
</snippet></ROW><ROW><id>20799784</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>20799784</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; df = pd.read_clipboard(header=None, quotechar='"', sep=',', 
...                   converters={1:ast.literal_eval})
&gt;&gt;&gt; df
    0                                             1
0  HK  [5328.1, 5329.3, 2013-12-27 13:58:57.973614]
1  HK  [5328.1, 5329.3, 2013-12-27 13:58:59.237387]
2  HK  [5328.1, 5329.3, 2013-12-27 13:59:00.346325]
</snippet></ROW><ROW><id>20799784</id><snippet>&gt;&gt;&gt; df = pd.DataFrame.from_records(df[1].tolist(), index=df[0],
...                           columns=list('ABC')).reset_index()
&gt;&gt;&gt; df['C'] = pd.to_datetime(df['C'])
&gt;&gt;&gt; df
    0       A       B                          C
0  HK  5328.1  5329.3 2013-12-27 13:58:57.973614
1  HK  5328.1  5329.3 2013-12-27 13:58:59.237387
2  HK  5328.1  5329.3 2013-12-27 13:59:00.346325
</snippet></ROW><ROW><id>20800575</id><snippet>struct ipheader {
 unsigned char ip_hl:4, ip_v:4; /* this means that each member is 4 bits */
 unsigned char ip_tos;
 unsigned short int ip_len;
 unsigned short int ip_id;
 unsigned short int ip_off;
 unsigned char ip_ttl;
 unsigned char ip_p;
 unsigned short int ip_sum;
 unsigned int ip_src;
 unsigned int ip_dst;
}; 
</snippet></ROW><ROW><id>20800575</id><snippet>struct.unpack('!BBHHHBBHII')
</snippet></ROW><ROW><id>20800575</id><snippet>struct.unpack('!BBHHHBBH4s4s')</snippet></ROW><ROW><id>20800575</id><snippet>unsigned int ip_src;</snippet></ROW><ROW><id>20800575</id><snippet>unsigned int ip_dst;</snippet></ROW><ROW><id>20800575</id><snippet>struct.unpack()</snippet></ROW><ROW><id>20800575</id><snippet>unpack()</snippet></ROW><ROW><id>20800575</id><snippet>socket.inet_ntoa()</snippet></ROW><ROW><id>20800575</id><snippet>binascii.hexlify()</snippet></ROW><ROW><id>20800723</id><snippet>['x']</snippet></ROW><ROW><id>20800723</id><snippet>&gt;&gt;&gt; ['x'] = [1]
  File "&lt;stdin&gt;", line 1
SyntaxError: can't assign to literal
</snippet></ROW><ROW><id>20800723</id><snippet>=</snippet></ROW><ROW><id>20800723</id><snippet>options=['initialdir']=['home/var/www/']
options=['initialfile']='sampl1.py'
#      ^
</snippet></ROW><ROW><id>20801043</id><snippet>import scipy.interpolate
import numpy as np
y = np.array([0,1,2], dtype=np.int16)
x = np.arange(len(y))
</snippet></ROW><ROW><id>20801043</id><snippet>&gt;&gt;&gt; np.__version__
1.6.2
# code skipped
&gt;&gt;&gt; scipy.interpolate.PchipInterpolator(x, y)
Traceback (most recent call last):
    ...
    out[mask] = 1.0/(1.0/m0[mask]+1.0/d1[mask])
TypeError: array cannot be safely cast to required type
</snippet></ROW><ROW><id>20801043</id><snippet>&gt;&gt;&gt; np.__version__
1.8.0
# code skipped
&gt;&gt;&gt; scipy.interpolate.PchipInterpolator(x, y)
&lt;scipy.interpolate.polyint.PchipInterpolator object at 0x044371F0&gt;
</snippet></ROW><ROW><id>20801043</id><snippet>out = np.array([0])
out[np.array([True])] = np.array([.5])
</snippet></ROW><ROW><id>20801205</id><snippet>d = {}
f = open("tennis.txt")
for i, l in enumerate(f):
    # cut the '0b' chars, so you will get your dict keys just like you want
    bin_num = bin(i)[2:]
    # if the key is shorter than 3 chars, add 0 to the beginning
    while len(bin_num) &lt; 3:
        bin_num = '0' + bin_num
    d[bin_num] = l[:-1]

f.close()
for i in sorted(d.items()):
    print i
</snippet></ROW><ROW><id>20801205</id><snippet>('000', 'Anna')
('001', 'David')
('010', 'Dennis')
('011', 'Morgan')
('100', 'Lana')
('101', 'Peter')
('110', 'Joanna')
('111', 'Karen')
</snippet></ROW><ROW><id>20801325</id><snippet>dict.itervalues().next()</snippet></ROW><ROW><id>20801325</id><snippet>itervalues()</snippet></ROW><ROW><id>20801325</id><snippet>next()</snippet></ROW><ROW><id>20801325</id><snippet>fetchedPage = urllib2.urlopen('https://en.wikipedia.org/w/api.php?action=query&amp;
prop=extracts&amp;exintro&amp;titles=Steve%20Jobs&amp;format=json')
Json = json.load(fetchedPage)
content = Json['query']['pages'].itervalues().next()['extract']
print content
</snippet></ROW><ROW><id>20801325</id><snippet>dict[dict.keys()[0]]</snippet></ROW><ROW><id>20801325</id><snippet>page_id = Json['query']['pages'].keys()[0]
content = Json['query']['pages'][page_id]['extract']
</snippet></ROW><ROW><id>20801690</id><snippet>myreservation = conn.run_instances(amiid, placement='us-east-1a', key_name='n15a',instance_type=my_instance_type,security_groups=[my_security_groups])
</snippet></ROW><ROW><id>20801690</id><snippet>my_security_groups</snippet></ROW><ROW><id>20801690</id><snippet> myreservation = conn.run_instances('%s', placement='us-east-1a', key_name='nov15a',instance_type='%s',security_groups=['%s']) % (amiid, my_instance_type, my_security_groups)
</snippet></ROW><ROW><id>20801690</id><snippet>myreservation = conn.run_instances('%s'%amiid, placement='us-east-1a', key_name='nov15a',instance_type='%s'%my_instance_type,security_groups=['%s'my_security_groups]) 
</snippet></ROW><ROW><id>20801930</id><snippet>random</snippet></ROW><ROW><id>20801930</id><snippet>import random
import string

valid_characters= string.lowercase+string.digits

def get_random_id():
    return ''.join(random.choice(valid_characters) for x in range(8))

random.seed(0)
for x in range(10):
    print get_random_id()
</snippet></ROW><ROW><id>20801930</id><snippet>random.setstate( get_persisted() )
get_random_id()
persist( random.getstate )
#repeat ad infinitum
</snippet></ROW><ROW><id>20801930</id><snippet>random.jumpahead</snippet></ROW><ROW><id>20801930</id><snippet>random</snippet></ROW><ROW><id>20801930</id><snippet>2**19937-1</snippet></ROW><ROW><id>20801930</id><snippet>(26+10)**8</snippet></ROW><ROW><id>20801930</id><snippet>2**42</snippet></ROW><ROW><id>20801930</id><snippet>choice</snippet></ROW><ROW><id>20801930</id><snippet>random.seed(0)
space=len(valid_characters)**8
found=set()
x=0
while x&lt;space:
    id= get_random_id()
    if id in found:
        print "cycle found after",x,"iterations"
    found.update(id)
    if not x% 1000000:
        print "progress:",(float(x)/space)*100,"%"
    x+=1
</snippet></ROW><ROW><id>20802086</id><snippet>read_edgelist</snippet></ROW><ROW><id>20802086</id><snippet>cd</snippet></ROW><ROW><id>20802086</id><snippet>sed -n 's/ : /,/gpw nodes_replaced1.txt' nodes.txt
</snippet></ROW><ROW><id>20802086</id><snippet>nodes.txt</snippet></ROW><ROW><id>20802086</id><snippet>:</snippet></ROW><ROW><id>20802086</id><snippet>,</snippet></ROW><ROW><id>20802086</id><snippet>nodes_replaced1.txt</snippet></ROW><ROW><id>20802086</id><snippet>sed -n 's/ /,/gwp nodes.csv' nodes_replaced1.txt
</snippet></ROW><ROW><id>20802086</id><snippet>[spaces]</snippet></ROW><ROW><id>20802086</id><snippet>,</snippet></ROW><ROW><id>20802086</id><snippet>In [1]: import pandas as pd

In [2]: import networkx as nx

In [5]: nodes = pd.read_csv('nodes.csv', header=None)

In [6]: nodes
Out[6]: 
   0      1      2
0  0  52.88  52.53
1  1  56.63  49.53
2  2  38.60  69.81
3  3  43.00   2.88

In [7]: G = nx.Graph()

In [8]: G
Out[8]: &lt;networkx.classes.graph.Graph at 0x105e94cd0&gt;

In [9]: for row in nodes.iterrows():
   ...:     G.add_node(row[1][0], x=row[1][1], y=row[1][2])
   ...: 

In [10]: G.nodes(data=True)
Out[10]: 
[(0.0, {'x': 52.880000000000003, 'y': 52.530000000000001}),
 (1.0, {'x': 56.630000000000003, 'y': 49.530000000000001}),
 (2.0, {'x': 38.600000000000001, 'y': 69.810000000000002}),
 (3.0, {'x': 43.0, 'y': 2.8799999999999999})]
</snippet></ROW><ROW><id>20802086</id><snippet>G.nodes()</snippet></ROW><ROW><id>20802086</id><snippet>G.nodes(data=True)</snippet></ROW><ROW><id>20802107</id><snippet>data</snippet></ROW><ROW><id>20802107</id><snippet>form = AuthenticationForm(data=request.POST)
</snippet></ROW><ROW><id>20802107</id><snippet>__init__</snippet></ROW><ROW><id>20802107</id><snippet>data</snippet></ROW><ROW><id>20802202</id><snippet>requests</snippet></ROW><ROW><id>20802202</id><snippet>response = requests.post('https://bitonic.nl/json/', data={'part': 'rate_convert', 'check': 'euros', 'euros': 46})
print response.json()
</snippet></ROW><ROW><id>20802242</id><snippet>\1</snippet></ROW><ROW><id>20802242</id><snippet>re.search(...).group(1)</snippet></ROW><ROW><id>20802680</id><snippet>wget http://NEXUS/PATH/TO/MyLibrary.dll -P .\local_output_directory
</snippet></ROW><ROW><id>20802842</id><snippet>text = row
if row.find('=') &gt; 0:
    data = row.split('=')
    var, val = data[0], data[1]
    text = "{0:&lt;15} = {1:&lt;15}\n".format(var, val.strip())
</snippet></ROW><ROW><id>20802989</id><snippet>[0 0 0]
[1 1 1] 
[2 2 2]
</snippet></ROW><ROW><id>20802989</id><snippet>c = b.copy()
c[:,0] += a[:,0]
c
=&gt; 
array([[0, 1, 2],
       [4, 4, 5],
       [8, 7, 8]])
</snippet></ROW><ROW><id>20803065</id><snippet>import pandas as pd
from StringIO import StringIO
s = """1385940076332   3   M   subject_avatar  -30.000000  1.000000    -59.028107  180.000000  0.000000    0.000000
1385940076336   2   M   subject_avatar  -30.000000  1.000000    -59.028107  180.000000  0.000000    0.000000
1385940076339   3   M   subject_avatar  -30.000000  1.000000    -59.028107  180.000000  0.000000    0.000000
1385940076342   3   M   subject_avatar  -30.000000  1.000000    -59.028107  180.000000  0.000000    0.000000
1385940076346   3   M   subject_avatar  -30.000000  1.000000    -59.028107  180.000000  0.000000    0.000000
1385940076350   2   M   subject_avatar  -30.000000  1.000000    -59.028107  180.000000  0.000000    0.000000
1385940076353   3   M   subject_avatar  -30.000000  1.000000    -59.028107  180.000000  0.000000    0.000000
1385940076356   3   M   subject_avatar  -30.000000  1.000000    -59.028107  180.000000  0.# 000000    0.000000"""

df = pd.read_csv(StringIO(s),header=None, sep='\s+')[[0, 2, 3, 4, 6, 7]]
df.columns = ['time', 'mode', 'event', 'xcoord', 'ycoord', 'phi']
print df
#             time mode           event  xcoord     ycoord  phi
# 0  1385940076332    M  subject_avatar     -30 -59.028107  180
# 1  1385940076336    M  subject_avatar     -30 -59.028107  180
# 2  1385940076339    M  subject_avatar     -30 -59.028107  180
# 3  1385940076342    M  subject_avatar     -30 -59.028107  180
# 4  1385940076346    M  subject_avatar     -30 -59.028107  180
# 5  1385940076350    M  subject_avatar     -30 -59.028107  180
# 6  1385940076353    M  subject_avatar     -30 -59.028107  180
# 7  1385940076356    M  subject_avatar     -30 -59.028107  180
</snippet></ROW><ROW><id>20803386</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>20803386</id><snippet>stderr=subprocess.PIPE</snippet></ROW><ROW><id>20803386</id><snippet>stdout</snippet></ROW><ROW><id>20803386</id><snippet>stderr</snippet></ROW><ROW><id>20803386</id><snippet>communicate()</snippet></ROW><ROW><id>20803386</id><snippet>stderr</snippet></ROW><ROW><id>20803428</id><snippet>monthly_rainfall = daily_rainfall.resample('D', how=np.sum)
</snippet></ROW><ROW><id>20803428</id><snippet>grouped = monthly_rainfall.groupby(lambda x: x.month)
</snippet></ROW><ROW><id>20803428</id><snippet>deviation = grouped.transform(lambda x: x - x.mean())
deviation.cumsum()
</snippet></ROW><ROW><id>20803465</id><snippet>plt.show()</snippet></ROW><ROW><id>20803465</id><snippet>plt.show()</snippet></ROW><ROW><id>20803465</id><snippet>cmap=cm.&lt;whatever&gt;</snippet></ROW><ROW><id>20803465</id><snippet>ax.plot_surface()</snippet></ROW><ROW><id>20803465</id><snippet>alpha=0.3</snippet></ROW><ROW><id>20803465</id><snippet>import scipy.io
import matplotlib.pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D

data = scipy.io.loadmat('myfile.mat')
X = data['X']
Y = data['Y']
U = data['U']

fig = plt.figure()
ax = fig.gca(projection='3d')
surf = ax.plot_surface(X, Y, U, rstride=1, cstride=1, cmap=cm.jet)
fig.colorbar(surf)

plt.show()
</snippet></ROW><ROW><id>20803844</id><snippet>app.exec_()</snippet></ROW><ROW><id>20803950</id><snippet>.grid()</snippet></ROW><ROW><id>20803950</id><snippet>Field</snippet></ROW><ROW><id>20803950</id><snippet>db.multiple.a1*db.multiple.a1</snippet></ROW><ROW><id>20803950</id><snippet>Expression</snippet></ROW><ROW><id>20803980</id><snippet>do_it_all</snippet></ROW><ROW><id>20803980</id><snippet>@receiver(some_signal)
def do_it_all(sender, **kwargs):
    do_something_for_table_one(sender, **kwargs)
    do_something_for_table_two(sender, **kwargs)
    do_something_for_table_three(sender, **kwargs)
</snippet></ROW><ROW><id>20804038</id><snippet>def paintEvent(self, ev):
    painter = QPainter(self)
    gradient = QLinearGradient(QRectF(self.rect()).topLeft(),QRectF(self.rect()).bottomLeft())
    gradient.setColorAt(0.0, Qt.black)
    gradient.setColorAt(0.4, Qt.gray)
    gradient.setColorAt(0.7, Qt.black)
    painter.setBrush(gradient)
    painter.drawRoundedRect(self.rect(), 10.0, 10.0)
</snippet></ROW><ROW><id>20804038</id><snippet>painter.begin(self)</snippet></ROW><ROW><id>20804038</id><snippet>painter.end()</snippet></ROW><ROW><id>20804038</id><snippet>painter = QPainter(self)</snippet></ROW><ROW><id>20804038</id><snippet>begin()</snippet></ROW><ROW><id>20804038</id><snippet>end()</snippet></ROW><ROW><id>20804056</id><snippet>&gt;&gt;&gt; a = [[1,2],[2,3],[9,3]]
&gt;&gt;&gt; next(i for i,x in enumerate(a) if 3 in x)
1
</snippet></ROW><ROW><id>20804056</id><snippet>StopIteration</snippet></ROW><ROW><id>20804056</id><snippet>&gt;&gt;&gt; next(i for i,x in enumerate(a) if 99 in x)
Traceback (most recent call last):
  File "&lt;ipython-input-4-5eff54930dd5&gt;", line 1, in &lt;module&gt;
    next(i for i,x in enumerate(a) if 99 in x)
StopIteration

&gt;&gt;&gt; next((i for i,x in enumerate(a) if 99 in x), None)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20804107</id><snippet>mylst.append(mylst[i-1] + mylst[i-2])  
</snippet></ROW><ROW><id>20804107</id><snippet>mylst[0] + mylst[-1]</snippet></ROW><ROW><id>20804107</id><snippet>check = True
mylst = [1,1]
i = 1
while check:
    if  len(str(mylst[i])) &gt;= 1000:
        check = False
    else:
        mylst.append(mylst[i] + mylst[i-1])  
        i=i+1
</snippet></ROW><ROW><id>20804107</id><snippet>print len(mylst)
</snippet></ROW><ROW><id>20804592</id><snippet>if str(accget) in line:
</snippet></ROW><ROW><id>20804592</id><snippet>if accget.get() in line:
</snippet></ROW><ROW><id>20804971</id><snippet>endswith</snippet></ROW><ROW><id>20804971</id><snippet>find</snippet></ROW><ROW><id>20804971</id><snippet>for loop_package in ziproot.namelist():
    if loop_package.endswith("node.txt"):
</snippet></ROW><ROW><id>20805027</id><snippet>"cmd"</snippet></ROW><ROW><id>20805027</id><snippet>"cmd" : ["/Users/thumbtackthief/.virtualenvs/chorus/bin/python", "$file"]</snippet></ROW><ROW><id>20805068</id><snippet>and</snippet></ROW><ROW><id>20805068</id><snippet>if</snippet></ROW><ROW><id>20805068</id><snippet>if</snippet></ROW><ROW><id>20805068</id><snippet>if n &lt; 5:
    if lst[6] &gt; lst[2]:
        print True
</snippet></ROW><ROW><id>20805068</id><snippet>if</snippet></ROW><ROW><id>20805068</id><snippet>n</snippet></ROW><ROW><id>20805068</id><snippet>if</snippet></ROW><ROW><id>20805068</id><snippet>or</snippet></ROW><ROW><id>20805068</id><snippet># if x == 0 or 1/x &gt; 0.01: print True
if x == 0:
    print True
elif 1/x &gt; 0.01:
    print True
</snippet></ROW><ROW><id>20805068</id><snippet>1/x</snippet></ROW><ROW><id>20805068</id><snippet>if</snippet></ROW><ROW><id>20805068</id><snippet>or</snippet></ROW><ROW><id>20805068</id><snippet>x == 0</snippet></ROW><ROW><id>20805230</id><snippet>df2.index</snippet></ROW><ROW><id>20805230</id><snippet>df1</snippet></ROW><ROW><id>20805230</id><snippet>0,3,4</snippet></ROW><ROW><id>20805230</id><snippet>nan</snippet></ROW><ROW><id>20805230</id><snippet>nan</snippet></ROW><ROW><id>20805230</id><snippet>1</snippet></ROW><ROW><id>20805230</id><snippet>2</snippet></ROW><ROW><id>20805230</id><snippet>In [13]: df1.ix[df2.index]
Out[13]: 
    0
0 NaN
1   0
1   2
1   4
1   6
1   8
2   1
2   3
2   5
2   7
2   9
3 NaN
4 NaN
0 NaN
1   0
1   2
1   4
1   6
1   8
2   1
2   3
2   5
2   7
2   9
3 NaN
4 NaN

[26 rows x 1 columns]
</snippet></ROW><ROW><id>20805230</id><snippet>locations</snippet></ROW><ROW><id>20805230</id><snippet>In [14]: df1.iloc[df2.index]
Out[14]: 
   0
1  0
2  1
1  2
2  3
1  4
1  0
2  1
1  2
2  3
1  4

[10 rows x 1 columns]
</snippet></ROW><ROW><id>20805295</id><snippet>&gt;&gt;&gt; datetime(2013, 12, 27, 20, 0, 0, tzinfo=timezone('Europe/Bucharest'))
datetime.datetime(2013, 12, 27, 20, 0,
    tzinfo=&lt;DstTzInfo 'Europe/Bucharest' BMT+1:44:00 STD&gt;)
</snippet></ROW><ROW><id>20805295</id><snippet>pytz</snippet></ROW><ROW><id>20805295</id><snippet>timezone('Europe/Bucharest')</snippet></ROW><ROW><id>20805295</id><snippet>pytz</snippet></ROW><ROW><id>20805295</id><snippet>&gt;&gt;&gt; timezone('Europe/Bucharest')
&lt;DstTzInfo 'Europe/Bucharest' BMT+1:44:00 STD&gt;
</snippet></ROW><ROW><id>20805295</id><snippet>astimezone</snippet></ROW><ROW><id>20805295</id><snippet>&gt;&gt;&gt; datetime(2013, 12, 27, 20, 0, 0, tzinfo=pytz.utc)\
    .astimezone(timezone('Europe/Bucharest')) 
datetime.datetime(2013, 12, 27, 22, 0,
    tzinfo=&lt;DstTzInfo 'Europe/Bucharest' EET+2:00:00 STD&gt;)
</snippet></ROW><ROW><id>20805295</id><snippet>&gt;&gt;&gt; datetime(2013, 12, 27, 20, 0, 0, tzinfo=pytz.utc)\
    .astimezone(timezone('Europe/Bucharest'))\
    .astimezone(timezone('Europe/Berlin'))\
    .replace(tzinfo=None)
datetime.datetime(2013, 12, 27, 21, 0)
</snippet></ROW><ROW><id>20805440</id><snippet>print(l)</snippet></ROW><ROW><id>20805440</id><snippet>l</snippet></ROW><ROW><id>20805440</id><snippet>for l in notes.getall(user.name):
    sender, message, notetime = l
    t += "From %s: %s (%s)" % (sender.title(), msg, stamp.LongTimeStampFull(notetime))
</snippet></ROW><ROW><id>20805440</id><snippet>&gt;&gt;&gt; a = ['test','test2','test3']
&gt;&gt;&gt; b,c,d = a
&gt;&gt;&gt; b
'test'
&gt;&gt;&gt; c
'test2'
&gt;&gt;&gt; d
'test3'
</snippet></ROW><ROW><id>20805440</id><snippet>&gt;&gt;&gt; for b,c,d in [a]:
...  print(b,c,d)
...
test test2 test3
</snippet></ROW><ROW><id>20805557</id><snippet>for i in range(0, len(data)):   
  for j in range(i, len(data)):
    foo(data[i],data[j])
</snippet></ROW><ROW><id>20805557</id><snippet>[foo(data[i],data[j]) for i in range(0, len(data)) for j in range(i, len(data)]
</snippet></ROW><ROW><id>20805679</id><snippet>tearDown</snippet></ROW><ROW><id>20805679</id><snippet>with</snippet></ROW><ROW><id>20805679</id><snippet>__enter__()</snippet></ROW><ROW><id>20805679</id><snippet>__exit__()</snippet></ROW><ROW><id>20805679</id><snippet>TESTCONF = SafeConfigParser(...)
ENGINE = create_engine(TESTCONF.get('database', 'dsn'))

class DBConnection(object):
    def __init__(self, engine):
        self.engine = engine

    def __enter__(self):
        self.connection = engine.connect()
        self.trans = self.connection.begin()
        self.session = Session(bind=self.connection)
        # return value can be accessed using `as` directive
        return self.connection, self.trans, self.session

    def __exit__(self, exc_type, exc_val, traceback):
        self.trans.rollback()
        self.session.close()
        self.connection.close()


class TestBase(unittest.TestCase):

    def setUp(self):
        self.config = TESTCONF

    def run(self, result=None):
        with DBConnection(ENGINE) as db_conn:
            self.connection, self.trans, self.session = db_conn
            super(MyTest, self).run(result)
</snippet></ROW><ROW><id>20805679</id><snippet>from contextlib import contextmanager

@contextmanager
def DBConnection(engine):
    connection = engine.connect()
    trans = connection.begin()
    session = Session(bind=connection)
    yield connection, trans, session
    trans.close()
    session.close()
    connection.close()
</snippet></ROW><ROW><id>20805709</id><snippet>tokenize</snippet></ROW><ROW><id>20805709</id><snippet>&gt;&gt;&gt; s = "sin( 1 + 2 * x ) + tan( 2.123 * x "
&gt;&gt;&gt; import tokenize
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; tokenize.tokenize(StringIO(s).readline)
1,0-1,3:    NAME    'sin'
1,3-1,4:    OP  '('
1,5-1,6:    NUMBER  '1'
1,7-1,8:    OP  '+'
1,9-1,10:   NUMBER  '2'
1,11-1,12:  OP  '*'
1,13-1,14:  NAME    'x'
1,15-1,16:  OP  ')'
1,17-1,18:  OP  '+'
1,19-1,22:  NAME    'tan'
1,22-1,23:  OP  '('
1,24-1,29:  NUMBER  '2.123'
1,30-1,31:  OP  '*'
1,32-1,33:  NAME    'x'
# and now occurs some error you have to catch
</snippet></ROW><ROW><id>20805709</id><snippet>&gt;&gt;&gt; s = "sin( 1 + 2 * x ) + tan( 2.123 * x "
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r"(\b\w*[\.]?\w+\b|[\(\)\+\*\-\/])", s)
['sin', '(', '1', '+', '2', '*', 'x', ')', '+', 'tan', '(', '2.123', '*', 'x']
</snippet></ROW><ROW><id>20805719</id><snippet>while True:
    try:
        x = int(raw_input("put in a number"))
        break
    except ValueError:
        continue # or maybe print a message here...
</snippet></ROW><ROW><id>20805787</id><snippet>names = ["Name1", "Name2", "Name3"]
f = open("names.txt", "a")
for i in names:
    f.write(i + "\n")
f.close()
</snippet></ROW><ROW><id>20805787</id><snippet>Name1
Name2
Name3
</snippet></ROW><ROW><id>20805787</id><snippet>#...
f = open("t.txt")
lines = f.readlines()
f.close()

basicfont = pygame.font.SysFont(None, 48)
text = basicfont.render('Hello World!', True, (255, 0, 0), (255, 255, 255))
textrect = text.get_rect()
textrect.centerx = screen.get_rect().centerx
textrect.centery = screen.get_rect().centery

screen.fill((255, 255, 255))
for i in lines:
    # each i has a newline character, so by i[:-1] we will get rid of it
    text = basicfont.render(i[:-1], True, (255, 0, 0), (255, 255, 255))
    # by changing the y coordinate each i from lines will appear just
    # below the previous i
    textrect.centery += 50
    screen.blit(text, textrect)
#...
</snippet></ROW><ROW><id>20805816</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    def get_queryset(self, request):
        update_data_from_api()
        return = super(MyModelAdmin, self).get_queryset(request)
</snippet></ROW><ROW><id>20805906</id><snippet>locale</snippet></ROW><ROW><id>20805906</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.getdefaultlocale()
('en_US', 'UTF-8')
</snippet></ROW><ROW><id>20806038</id><snippet>line</snippet></ROW><ROW><id>20806038</id><snippet>None</snippet></ROW><ROW><id>20806038</id><snippet>None</snippet></ROW><ROW><id>20806038</id><snippet>img</snippet></ROW><ROW><id>20806038</id><snippet>import numpy as np
import cv2
# Create a black image
img = np.zeros((512,512,3), np.uint8)
# Draw a diagonal blue line with thickness of 5 px
cv2.line(img,(0,0),(511,511),(255,0,0),5)
cv2.imshow('img',img)
cv2.waitKey(0)
cv2.destroyAllWindows()
</snippet></ROW><ROW><id>20806183</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.insert(0, 'example.zip')  # Add .zip file to front of path
&gt;&gt;&gt; import foobar
</snippet></ROW><ROW><id>20806255</id><snippet>permission_required</snippet></ROW><ROW><id>20806255</id><snippet>permission_required("your_permission")(TagFormView.as_view())
</snippet></ROW><ROW><id>20806388</id><snippet>HexLimb</snippet></ROW><ROW><id>20806388</id><snippet>HexBones</snippet></ROW><ROW><id>20806388</id><snippet>HexBones</snippet></ROW><ROW><id>20806388</id><snippet>Servo</snippet></ROW><ROW><id>20806388</id><snippet>HexLimb</snippet></ROW><ROW><id>20806388</id><snippet>HexBones</snippet></ROW><ROW><id>20806388</id><snippet>HexLimb</snippet></ROW><ROW><id>20806388</id><snippet>limb</snippet></ROW><ROW><id>20806388</id><snippet>HexLimb.__init__()</snippet></ROW><ROW><id>20806388</id><snippet>parent</snippet></ROW><ROW><id>20806388</id><snippet>from random import random


class Servo(object):
    """Servo controller"""
    def __init__(self):
        self.angle = 0

    def set_angle(self, angle):
        print "Setting angle to %s" % angle
        self.angle = angle
        # Let limb recalculate its position
        self.limb.calc_position()


class HexBone(Servo):
    """A bone that can be attached to a limb and moved."""
    def __init__(self, length):
        super(HexBone, self).__init__()
        self.length = length

        # Will be assigned later when attached to a limb
        self.limb = None


class HexLimb(object):
    """A limb consisting of several bones."""
    def __init__(self):
        self.femur = HexBone(42)
        self.femur.limb = self

        self.tibia = HexBone(30)
        self.tibia.limb = self

    def calc_position(self):
        print "Calculating position..."
        # Something that needs self.femur and self.tibia
        self.x = self.femur.length * random()
        self.y = self.tibia.length * random()

    def extend(self):
        self.tibia.set_angle(0)    # extend knee


left_leg = HexLimb()
left_leg.extend()
</snippet></ROW><ROW><id>20806598</id><snippet>class C(object):
    def __init__(self):
        self._x = None

    @property
    def x(self):
        """I'm the 'x' property."""
        return self._x

    @x.setter
    def x(self, value):
        self._x = value

    @x.deleter
    def x(self):
        del self._x
</snippet></ROW><ROW><id>20806598</id><snippet>self.date_range = ...</snippet></ROW><ROW><id>20806683</id><snippet>&gt;&gt;&gt; data = struct.pack('2I',12, 30)
&gt;&gt;&gt; [hex(ord(c)) for c in data]
['0xc', '0x0', '0x0', '0x0', '0x1e', '0x0', '0x0', '0x0']
</snippet></ROW><ROW><id>20806683</id><snippet>[item for item in sequence]</snippet></ROW><ROW><id>20806683</id><snippet>for</snippet></ROW><ROW><id>20806683</id><snippet>ord()</snippet></ROW><ROW><id>20806683</id><snippet>chr()</snippet></ROW><ROW><id>20806683</id><snippet>unichr()</snippet></ROW><ROW><id>20806683</id><snippet>hex()</snippet></ROW><ROW><id>20806683</id><snippet>ord()</snippet></ROW><ROW><id>20806683</id><snippet>Python 3.4.0a3 (default, Nov  8 2013, 18:33:56)
&gt;&gt;&gt; import struct
&gt;&gt;&gt; data = struct.pack('2I',12, 30)
&gt;&gt;&gt; type(data)
&lt;class 'bytes'&gt;
&gt;&gt;&gt; type(data[1])
&lt;class 'int'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; [hex(i) for i in data]
['0xc', '0x0', '0x0', '0x0', '0x1e', '0x0', '0x0', '0x0']
</snippet></ROW><ROW><id>20806708</id><snippet>def __init__(self, parent):
    wx.Panel.__init__(self, parent)

    self.figure = Figure()
    canvas = FigureCanvas(self, -1, self.figure)
    canvas.mpl_connect('button_release_event', self.mouse_up_handler)

    # make axes
    self.ax = self.figure.add_subplot(1, 1, 1)
    # set up details
    self.ax.set_yscale('log')
    self.ax.autoscale(enable=True)
    self.ax.set_xlim(x_values[0], x_values[-1]) 
    # make the line
    self.ln, = self.ax.plot([], []) # add what ever parameters you want

    sizer = wx.BoxSizer(wx.VERTICAL)
    sizer.Add(canvas, 1, wx.GROW)
    self.SetSizer(sizer)

    self.generate_new_data()



def generate_new_data(self):
    x_values = range(16384)
    y_values = [exp(normalvariate(0, 10)) for _ in range(16384)]

    sleep(0.4)  # simulate some additional work being done with the data

    # update your existing line
    self.ln.set_data(x_values, y_values, antialiased=False)

    self.figure.canvas.draw()

    Timer(1.0, self.generate_new_data).start()
</snippet></ROW><ROW><id>20806708</id><snippet>Line2D</snippet></ROW><ROW><id>20806721</id><snippet>import datetime
import pandas as pd
parms = {'d':  datetime.datetime(2013, 11, 5, 5, 56), 't':datetime.timedelta(0, 22500)}
df = pd.DataFrame(columns=list('dt'))
df = df.append(parms, ignore_index=True)
</snippet></ROW><ROW><id>20806721</id><snippet>&gt;&gt;&gt; df.append(parms, ignore_index=True)
                    d               t
0 2013-11-05 05:56:00  22500000000000
1 2013-11-05 05:56:00         6:15:00
</snippet></ROW><ROW><id>20806850</id><snippet>class A(object):
    def __init__(self):
        self.x = "whatever"
        self.y= "cumbersome"
        self.z = "idea"

    def method1(self):
        self.x = self.x.lower()

class B(A):
    def __init__(self):
         super(B, self).__init__()
         self.a = 87

    def method1(self):
         super(B, self).method1()
         self.y =self.y.upper()
</snippet></ROW><ROW><id>20806850</id><snippet>A</snippet></ROW><ROW><id>20806850</id><snippet>object</snippet></ROW><ROW><id>20806850</id><snippet>object.__init__</snippet></ROW><ROW><id>20806850</id><snippet>A.__init__</snippet></ROW><ROW><id>20806850</id><snippet>B.__init__</snippet></ROW><ROW><id>20806850</id><snippet>A.__init__</snippet></ROW><ROW><id>20806850</id><snippet>B.method1extended</snippet></ROW><ROW><id>20806850</id><snippet>B.method1</snippet></ROW><ROW><id>20806850</id><snippet>A.method1</snippet></ROW><ROW><id>20806850</id><snippet>B.method1</snippet></ROW><ROW><id>20806850</id><snippet>A.method1</snippet></ROW><ROW><id>20807219</id><snippet>save</snippet></ROW><ROW><id>20807219</id><snippet>neighbor = Neighborhood.objects.get(pk=1)
form = NeighborhoodForm(instance=neighbor)
</snippet></ROW><ROW><id>20807219</id><snippet>state</snippet></ROW><ROW><id>20807219</id><snippet>neighbor = Neighborhood.objects.get(pk=1)
state = neighbor.city.state
form = NeighborhoodForm(instance=neighbor, initial={'state': state})
</snippet></ROW><ROW><id>20807219</id><snippet>__init__</snippet></ROW><ROW><id>20807219</id><snippet>def __init__(self, *args, **kwargs):
    super(NeighborhoodForm, self).__init__(*args, **kwargs)
    if 'instance' in kwargs:
        state = self.instance.city.state
        self.fields['state'].initial = state
</snippet></ROW><ROW><id>20807219</id><snippet>def save(self, *args, **kwargs):
    new_neighbor = super(NeighborhoodForm, self).save(*args, **kwargs)
    city = City.objects.create(state=self.cleaned_data['state'])
    new_neighbor.city = city
    new_neighbor.save()
    return new_neighbor
</snippet></ROW><ROW><id>20807477</id><snippet>list</snippet></ROW><ROW><id>20807477</id><snippet>import random

cards = {1.1:"Ace of Spades",
     1.2:"Ace of Clubs",
     1.3:"Ace of Diamonds",
     1.4:"Ace of Hearts",
      2.1:"Two of Spades",
     2.2:"Two of Clubs",
     2.3:"Two of Diamonds",
     2.4:"Two of Hearts",

     3.1:"Three of Spades",
     3.2:"Three of Clubs",
     3.3:"Three of Diamonds",
     3.4:"Three of Hearts",

     4.1:"Four of Spades",
     4.2:"Four of Clubs",
     4.3:"Four of Diamonds",
     4.4:"Four of Hearts"}

used_cards = []

def add_card():
    used_cards.append(cards[random.randint(1, 5) + random.randint(1, 5) * 0.1])

add_card()
add_card()

print used_cards
</snippet></ROW><ROW><id>20807477</id><snippet>['Three of Diamonds', 'Three of Spades']
</snippet></ROW><ROW><id>20807477</id><snippet>cards</snippet></ROW><ROW><id>20807477</id><snippet>cards[random.randint(1, 5) + random.randint(1, 5) * 0.1
</snippet></ROW><ROW><id>20807477</id><snippet>(1, 1)</snippet></ROW><ROW><id>20807477</id><snippet>1.1</snippet></ROW><ROW><id>20807533</id><snippet>test.py</snippet></ROW><ROW><id>20807533</id><snippet>/home/user</snippet></ROW><ROW><id>20807533</id><snippet>$ sudo python /home/user/test.py
</snippet></ROW><ROW><id>20807848</id><snippet>if</snippet></ROW><ROW><id>20807848</id><snippet>if 'iOS' in record_b['os']:
</snippet></ROW><ROW><id>20807848</id><snippet>record_b</snippet></ROW><ROW><id>20807848</id><snippet>os_mark_a</snippet></ROW><ROW><id>20807848</id><snippet>os_mark_b</snippet></ROW><ROW><id>20807848</id><snippet>1</snippet></ROW><ROW><id>20807848</id><snippet>1</snippet></ROW><ROW><id>20807848</id><snippet>elif 'iOS' in record_b['os']:
</snippet></ROW><ROW><id>20807848</id><snippet>os_mark_b</snippet></ROW><ROW><id>20807848</id><snippet>os_mark_a</snippet></ROW><ROW><id>20807848</id><snippet>values()</snippet></ROW><ROW><id>20807848</id><snippet>.get()</snippet></ROW><ROW><id>20807848</id><snippet>mobile_a = mobile_a
mobile_b = mobile_b
</snippet></ROW><ROW><id>20807848</id><snippet>def calculateMark(mobile):
    record = TechSpecificationAdd.objects.get(mobile_name=mobile)

    if 'Android' in record.os:
        return 8.9
    if 'iOS' in record.os:
        return 14
    return 1
</snippet></ROW><ROW><id>20807848</id><snippet>TechSpecificationAdd</snippet></ROW><ROW><id>20807848</id><snippet>class TechSpecificationAdd(models.Model):
    # some fields

    def calculateMark(self):
        if 'Android' in self.os:
            return 8.9
        if 'iOS' in self.os:
            return 14
        return 1
</snippet></ROW><ROW><id>20807848</id><snippet>record = TechSpecificationAdd.objects.get(mobile_name=mobile)
mark = record.calculateMark()
</snippet></ROW><ROW><id>20807966</id><snippet>arabic(n[len(n)-2:])</snippet></ROW><ROW><id>20807966</id><snippet>arabic(n[:len(n)-2])</snippet></ROW><ROW><id>20807993</id><snippet>render_template</snippet></ROW><ROW><id>20807993</id><snippet>jsonify</snippet></ROW><ROW><id>20807993</id><snippet>Response</snippet></ROW><ROW><id>20807993</id><snippet>jsonify</snippet></ROW><ROW><id>20808013</id><snippet>pyinotify</snippet></ROW><ROW><id>20808013</id><snippet>import pyinotify

# Instanciate a new WatchManager (will be used to store watches).
wm = pyinotify.WatchManager()
# Associate this WatchManager with a Notifier (will be used to report and
# process events).
notifier = pyinotify.Notifier(wm)
# Add a new watch on /tmp for ALL_EVENTS.
wm.add_watch('/tmp', pyinotify.ALL_EVENTS)
# Loop forever and handle events.
notifier.loop()
</snippet></ROW><ROW><id>20808027</id><snippet>matching = [string for string in words if string in op_text]
</snippet></ROW><ROW><id>20808030</id><snippet>cleaned_data = super(SignupForm, self).clean()</snippet></ROW><ROW><id>20808342</id><snippet>&gt;&gt;&gt; c = a + b*(np.arange(1, len(y)+1))
&gt;&gt;&gt; y/c
array([ 0.16923077,  0.25      ,  0.30857143,  0.03043478,  0.07719298,
        0.01470588,  0.03797468,  0.14444444,  0.02970297,  0.01071429])
</snippet></ROW><ROW><id>20808489</id><snippet>L</snippet></ROW><ROW><id>20808489</id><snippet>'string'</snippet></ROW><ROW><id>20808489</id><snippet>L</snippet></ROW><ROW><id>20808489</id><snippet>L</snippet></ROW><ROW><id>20808489</id><snippet>'string'</snippet></ROW><ROW><id>20808489</id><snippet>L</snippet></ROW><ROW><id>20808489</id><snippet>btnOk.caption = L('OK')
btnCancel.Caption = L('Cancel')
</snippet></ROW><ROW><id>20808489</id><snippet>L</snippet></ROW><ROW><id>20808489</id><snippet>L</snippet></ROW><ROW><id>20808820</id><snippet>min_x</snippet></ROW><ROW><id>20808820</id><snippet>min_y</snippet></ROW><ROW><id>20808820</id><snippet>max_x</snippet></ROW><ROW><id>20808820</id><snippet>max_y</snippet></ROW><ROW><id>20808820</id><snippet>def bounding_box(coords):

  min_x = 100000 # start with something much higher than expected min
  min_y = 100000
  max_x = -100000 # start with something much lower than expected max
  max_y = -100000

  for item in coords:
    if item[0] &lt; min_x:
      min_x = item[0]

    if item[0] &gt; max_x:
      max_x = item[0]

    if item[1] &lt; min_y:
      min_y = item[1]

    if item[1] &gt; max_y:
      max_y = item[1]

  return [(min_x,min_y),(max_x,min_y),(max_x,max_y),(min_x,max_y)]
</snippet></ROW><ROW><id>20808820</id><snippet>bounding_box([(6, 7), (2, 4), (8, 9), (3, 7), (5, 4), (9, 9)])
&gt;&gt; [(2, 4), (9, 4), (9, 9), (2, 9)]
</snippet></ROW><ROW><id>20808833</id><snippet>nargs</snippet></ROW><ROW><id>20808833</id><snippet>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('-i', nargs='+')
&gt;&gt;&gt; parser.parse_args('-i input1.txt input2.txt input3.txt'.split())
Namespace(i=['input1.txt', 'input2.txt', 'input3.txt'])
</snippet></ROW><ROW><id>20808921</id><snippet>def fib(a, b, n):
    if n == 1:
        return a
    else: 
        return fib(a+b, a, n-1)


print fib(1, 0, 10) # prints 55
</snippet></ROW><ROW><id>20808921</id><snippet>def fib(n):
    a = 1
    b = 0
    while n &gt; 1:
        a, b = a+b, a
        n = n - 1
    return a

print fib(100000)
</snippet></ROW><ROW><id>20808921</id><snippet>$ time python fibo.py 
3364476487643178326662161200510754331030214846068006390656476...

real    0m0.869s
</snippet></ROW><ROW><id>20808921</id><snippet>fib</snippet></ROW><ROW><id>20808921</id><snippet>a = 1
b = 0
n = 1
while len(str(a)) != 1000:
    a, b = a+b, a
    n = n + 1
print "%d has 1000 digits, n = %d" % (a, n)
</snippet></ROW><ROW><id>20809905</id><snippet>jsonDataaa = '{"script":"#!/bin/bash \\n hello=$jj1 \\n echo $hello \\n echo $jj1 \\n echo $jj2 \\n for el1 in $jj3 \\n do \\n echo \\"$el1\\" \\n done \\n for el2 in $jj4 \\n do \\n echo \\"$el2\\" \\n done"}'
</snippet></ROW><ROW><id>20809962</id><snippet>DELETE</snippet></ROW><ROW><id>20809962</id><snippet>GET</snippet></ROW><ROW><id>20809962</id><snippet>POST</snippet></ROW><ROW><id>20809962</id><snippet>POST</snippet></ROW><ROW><id>20809977</id><snippet>re.search</snippet></ROW><ROW><id>20809977</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s =  "It was in 1990. Then it was in 1992. Then it was in 2000. Then it was in 2005.      Then it was in 2010."
&gt;&gt;&gt; re.search("\d{4}", s)
&lt;_sre.SRE_Match object at 0x01939AA0&gt;
&gt;&gt;&gt; re.search("\d{4}", s).group()
'1990'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20810006</id><snippet>class ProfileCreateForm(Turtle_BaseInfoForm):
    fields = Turtle_BaseInfoForm.fields + ('bio',)
</snippet></ROW><ROW><id>20810049</id><snippet>make</snippet></ROW><ROW><id>20810049</id><snippet>make</snippet></ROW><ROW><id>20810049</id><snippet>Xcode</snippet></ROW><ROW><id>20810049</id><snippet>app store</snippet></ROW><ROW><id>20810049</id><snippet>Command Line Tools</snippet></ROW><ROW><id>20810049</id><snippet>Xcode-&gt;Preferences-&gt;Downloads</snippet></ROW><ROW><id>20810460</id><snippet>A</snippet></ROW><ROW><id>20810460</id><snippet>B</snippet></ROW><ROW><id>20810460</id><snippet>Bt</snippet></ROW><ROW><id>20810460</id><snippet>i+1</snippet></ROW><ROW><id>20810460</id><snippet>i</snippet></ROW><ROW><id>20810460</id><snippet>numpy</snippet></ROW><ROW><id>20810460</id><snippet>cumsum</snippet></ROW><ROW><id>20810460</id><snippet>cumprod</snippet></ROW><ROW><id>20810460</id><snippet>numpy's</snippet></ROW><ROW><id>20810460</id><snippet>ufunc.accumulate</snippet></ROW><ROW><id>20810460</id><snippet>y = np.array(y)
At = np.zeros(y.shape)
Bt = np.zeros(y.shape)
At[0] = 3
Bt[0] = 2 
for i in range(len(y)-1):
    A, B = At[i],Bt[i]
    At[i+1] =y[i] / y[i] + 5 * (A + B)
    Bt[i+1] =(At[i+1] - A) + y[i+1] * B
</snippet></ROW><ROW><id>20810460</id><snippet>numpy</snippet></ROW><ROW><id>20810460</id><snippet>nditer</snippet></ROW><ROW><id>20810460</id><snippet>cython</snippet></ROW><ROW><id>20810485</id><snippet>shell=True</snippet></ROW><ROW><id>20810485</id><snippet>#!/usr/bin/env python
from subprocess import call
from textwrap import dedent

call(dedent("""\
    #!/bin/bash
    echo Hello world
    """), shell=True)
</snippet></ROW><ROW><id>20810568</id><snippet>*</snippet></ROW><ROW><id>20810568</id><snippet>follow_symlinks</snippet></ROW><ROW><id>20810568</id><snippet>foo(True, False, False)</snippet></ROW><ROW><id>20810603</id><snippet>http</snippet></ROW><ROW><id>20810603</id><snippet>java -jar start.jar</snippet></ROW><ROW><id>20810603</id><snippet>EmbeddedSolrServer</snippet></ROW><ROW><id>20810728</id><snippet>&gt;&gt;&gt; l1 = [1,2,3]
&gt;&gt;&gt; l2 = [3,4,5]
&gt;&gt;&gt; l1.extend(l2)
&gt;&gt;&gt; l1
[1, 2, 3, 3, 4, 5]
</snippet></ROW><ROW><id>20810728</id><snippet>&gt;&gt;&gt; l1 + l2
[1, 2, 3, 3, 4, 5]
</snippet></ROW><ROW><id>20810732</id><snippet>url_for</snippet></ROW><ROW><id>20810732</id><snippet>url_title</snippet></ROW><ROW><id>20810732</id><snippet>None</snippet></ROW><ROW><id>20810732</id><snippet>url_title</snippet></ROW><ROW><id>20810732</id><snippet>artitle_page</snippet></ROW><ROW><id>20810776</id><snippet>class Email_Stuff():
    def Get_From_Email(self):
        #code to open up window and get email address
        self.emailaddr = #the input
    def Get_To_Email(self):
        #code to open up window and get to email address
        self.recipaddr = #the input
    def Get_Email_Address(self):
        #code to open up window and get email username
        self.EmailUser = #the input
    def Get_Email_Password(self):
        #code to open up window and get email password
        self.EmailPass = #the input
    def Send_Email(self):
        import smtplib
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.login((self.EmailUser),(self.EmailPass))
        message = "Python Test Email"
        server.sendmail(self.emailaddr,self.recipaddr,self.message)

instance = Email_Stuff()
instance.Get_From_Email()
instance.Get_To_Email()
instance.Get_Email_Address()
instance.Get_Email_Password()
instance.Send_Email()
</snippet></ROW><ROW><id>20810879</id><snippet>\n</snippet></ROW><ROW><id>20810879</id><snippet>\\n</snippet></ROW><ROW><id>20810879</id><snippet>data</snippet></ROW><ROW><id>20810879</id><snippet>"a "$b" c"
</snippet></ROW><ROW><id>20810879</id><snippet>"a \"$b\" c"
</snippet></ROW><ROW><id>20810879</id><snippet>print repr(json_string)</snippet></ROW><ROW><id>20810879</id><snippet>'"a \\"$b\\" c"'
</snippet></ROW><ROW><id>20810937</id><snippet>clean</snippet></ROW><ROW><id>20810937</id><snippet>form.cleaned_data</snippet></ROW><ROW><id>20810937</id><snippet>clean_password</snippet></ROW><ROW><id>20810937</id><snippet>def clean_password(self):
    # use data instead of cleaned_data
    password = self.data["password"]
    confirm_password = self.data["confirm_password"]
    if  password != confirm_password:
        raise forms.ValidationError("password not same")
    return confirm_password
</snippet></ROW><ROW><id>20810937</id><snippet>clean_xxx</snippet></ROW><ROW><id>20810937</id><snippet>password</snippet></ROW><ROW><id>20810937</id><snippet>confirm_password</snippet></ROW><ROW><id>20810937</id><snippet>clean_password</snippet></ROW><ROW><id>20810937</id><snippet>form.cleaned_data['confirm_password']</snippet></ROW><ROW><id>20811014</id><snippet>x[y] += 1
</snippet></ROW><ROW><id>20811014</id><snippet>x[y] = x[y] + 1
x[y]+1
# array([2, 2])
</snippet></ROW><ROW><id>20811014</id><snippet>numpy</snippet></ROW><ROW><id>20811014</id><snippet>x[y]=[4,3]  # or
x[y] += [4,3]
</snippet></ROW><ROW><id>20811014</id><snippet>np.add.at(x,y,1)
</snippet></ROW><ROW><id>20811014</id><snippet>np.add.at</snippet></ROW><ROW><id>20811014</id><snippet>a[indices] += b</snippet></ROW><ROW><id>20811014</id><snippet>a[[0,0]] += 1</snippet></ROW><ROW><id>20811014</id><snippet>add.at(a, [0,0], 1)</snippet></ROW><ROW><id>20811049</id><snippet>str.isdigit</snippet></ROW><ROW><id>20811049</id><snippet>len</snippet></ROW><ROW><id>20811049</id><snippet>&gt;&gt;&gt; '12345'.isdigit()
True
&gt;&gt;&gt; 'ab12'.isdigit()
False
&gt;&gt;&gt; len('12')
2
</snippet></ROW><ROW><id>20811049</id><snippet>while True:
    x = raw_input('Input 2 digits: ')
    if x.isdigit() and len(x) == 2:
        x = int(x)
        break
    print('input should be 2 digits.')

print('x = {}'.format(x))
</snippet></ROW><ROW><id>20811106</id><snippet>raw_response=True</snippet></ROW><ROW><id>20811106</id><snippet>False</snippet></ROW><ROW><id>20811106</id><snippet>False</snippet></ROW><ROW><id>20811106</id><snippet>raw_response</snippet></ROW><ROW><id>20811106</id><snippet>True</snippet></ROW><ROW><id>20811106</id><snippet>rest.py</snippet></ROW><ROW><id>20811106</id><snippet>if r.status != 200:
</snippet></ROW><ROW><id>20811106</id><snippet>if r.status != 200 and r.status != 206:
</snippet></ROW><ROW><id>20811132</id><snippet>random.sample</snippet></ROW><ROW><id>20811132</id><snippet>&gt;&gt;&gt; lst = ['1', 'n', 'f', 'g', 'z', 'j', '5', 's', '2', '3']
&gt;&gt;&gt; import random
&gt;&gt;&gt; random.sample(lst, 5)
['f', 's', '3', 'z', 'n']
</snippet></ROW><ROW><id>20811132</id><snippet>for</snippet></ROW><ROW><id>20811132</id><snippet>&gt;&gt;&gt; for i in range(10):
...    print ''.join(random.sample(lst, 5))
...
jn513
13g2f
nfsj5
nj3s1
3zn51
sgj2f
5ns3g
sg51z
23j1z
n2g53
</snippet></ROW><ROW><id>20811132</id><snippet>list</snippet></ROW><ROW><id>20811132</id><snippet>list</snippet></ROW><ROW><id>20811929</id><snippet>str.partition</snippet></ROW><ROW><id>20811929</id><snippet>str.rpartition</snippet></ROW><ROW><id>20811929</id><snippet>&gt;&gt;&gt; s = "aaa About DoctorTardi this Stats for Project Ares bbb"
&gt;&gt;&gt; head, sep1, x = s.partition("About DoctorTardi")
&gt;&gt;&gt; _, sep2, tail = x.partition("Stats for Project Ares")
&gt;&gt;&gt; head + sep1 + sep2 + tail
'aaa About DoctorTardiStats for Project Ares bbb'
</snippet></ROW><ROW><id>20812488</id><snippet>0x471d5c</snippet></ROW><ROW><id>20812488</id><snippet>#!/usr/bin/python
sensor_LaundryDoor = 'foo'

rf_433mhz = {
        "0x471d5c" : sensor_LaundryDoor,
}
</snippet></ROW><ROW><id>20812488</id><snippet>#!/usr/bin/python
from test import rf_433mhz

print rf_433mhz["0x471d5c"]
</snippet></ROW><ROW><id>20812619</id><snippet>def add_pic_panel(self, pic):
    img = ImageTk.PhotoImage(Image.open(pic))
    label = Label(self.master, image=img)
    label.img = img # to keep the reference for the image.
    label.pack() # &lt;--- pack
    return label
</snippet></ROW><ROW><id>20812619</id><snippet>add_pic_panel</snippet></ROW><ROW><id>20812619</id><snippet>root</snippet></ROW><ROW><id>20812619</id><snippet>self.master</snippet></ROW><ROW><id>20812619</id><snippet>root.destroy()</snippet></ROW><ROW><id>20812619</id><snippet>TclError</snippet></ROW><ROW><id>20812813</id><snippet>faces[:,:,0,4] = 1

faces[:,:,0,4] = (1, 1, 1)
</snippet></ROW><ROW><id>20812950</id><snippet>import requests
from bs4 import BeautifulSoup

url = 'http://www.example.com'
page_request = requests.get(url)
page_source = page_request.text
soup = BeautifulSoup(page_source)
</snippet></ROW><ROW><id>20813121</id><snippet>get_descendants</snippet></ROW><ROW><id>20813121</id><snippet>location = Location.objects.get(pk="some_location_id")
descendants = location.get_descendants().values_list('id', flat=True)
building_list = Building.objects.filter(title__icontains='house',
                                        location__in=descendants)
</snippet></ROW><ROW><id>20813135</id><snippet>BigList = ['server1','server2','server3','server4']

# here we use enumerate to generate the index i for the current item
# we pass in a temp list with an extra entry concatenated so that we
# dont need to duplicate the print expression
input_list = BigList + ['Return to main menu']
for i, item in enumerate(input_list):
    print "%d. %s" % (i, item)

# get user input
menu_input = raw_input("Enter the selection with comma:")

# the list of selection indexes 
menu_selection_indexes = []

# sanitize and store the indexes from user input string
for i in menu_input.split(','):
    # could print/throw errors on bad input
    # here we choose to discard bad list items silently
    try:
            # convert the string e.g. "2" into an integer type
            # so that we can use it to index into our menu list
        val = int(i.strip())
    except ValueError, ve:
            # some strings (e.g. "a") cannot be converted to an integer
            # a ValueError exception is thrown if this is attempted
            # we catch this exception and just ignore this value,
            # skipping this value continuing on with the next for-loop item
        continue
    # ignore indexes that exceeed the acceptable input list size
    if val &gt; len(input_list):
        continue
    menu_selection_indexes.append(val)

# print indexes
print menu_selection_indexes

# if the last possible input index was chosen, we return to menu
if len(BigList) in menu_selection_indexes:
    if not len(menu_selection_indexes) == 1:
        print "warning: mixed commands"
    print "will return to main menu"

else:
    # list of items selected, using list comprehensions
    menu_selection_names = [input_list[i] for i in menu_selection_indexes]

    # print names
    print menu_selection_names
</snippet></ROW><ROW><id>20813162</id><snippet>([1,])
</snippet></ROW><ROW><id>20813162</id><snippet>[1,]</snippet></ROW><ROW><id>20813162</id><snippet>([1,],)
</snippet></ROW><ROW><id>20813162</id><snippet>([1],)
</snippet></ROW><ROW><id>20813321</id><snippet>True</snippet></ROW><ROW><id>20813321</id><snippet>True</snippet></ROW><ROW><id>20813321</id><snippet>&gt;&gt;&gt; x = True
&gt;&gt;&gt; if x:
...     print 'hey'
...     
hey
</snippet></ROW><ROW><id>20813321</id><snippet>False</snippet></ROW><ROW><id>20813321</id><snippet>&gt;&gt;&gt; x = False
&gt;&gt;&gt; if not x:
...     print 'hey'
...     
hey
</snippet></ROW><ROW><id>20813321</id><snippet>bool()</snippet></ROW><ROW><id>20813581</id><snippet>logger = logging.getLogger(logger_name)</snippet></ROW><ROW><id>20813581</id><snippet>Logger</snippet></ROW><ROW><id>20813581</id><snippet>logger_name</snippet></ROW><ROW><id>20813581</id><snippet>FileHandler</snippet></ROW><ROW><id>20813581</id><snippet>setup_logger</snippet></ROW><ROW><id>20813581</id><snippet>def setup_logger(logger_name, log_filename):
    import logging
    logger = logging.getLogger(logger_name)
    logger.setLevel(logging.DEBUG)
    file_handler = logging.FileHandler(log_filename, 'w')
    formatter = logging.Formatter(_FORMAT)
    file_handler.setFormatter(formatter)

    # Replace the previous handlers with the new FileHandler
    for old_handler in logger.handlers:
        logger.removeHandler(old_handler)
    logger.addHandler(file_handler)

    return logger
</snippet></ROW><ROW><id>20813650</id><snippet>import lxml.objectify as objectify
import lxml.etree as ET

content = """
&lt;A&gt;
    &lt;B foo="baz"/&gt;
    &lt;B foo="bar"/&gt;
&lt;/A&gt;"""
xml_obj = objectify.fromstring(content)
print(xml_obj.getchildren())
# [u'', u'']
</snippet></ROW><ROW><id>20813650</id><snippet>elt.attrib</snippet></ROW><ROW><id>20813650</id><snippet>for child in xml_obj.getchildren():
    print(child.attrib)
# {'foo': 'baz'}
# {'foo': 'bar'}
</snippet></ROW><ROW><id>20813650</id><snippet>xml_obj.B.attrib['baz'] = 'boo'
xml_obj.B[1].attrib['foo'] = 'blah'
</snippet></ROW><ROW><id>20813650</id><snippet>xml_obj</snippet></ROW><ROW><id>20813650</id><snippet>ET.tostring</snippet></ROW><ROW><id>20813650</id><snippet>print(ET.tostring(xml_obj, pretty_print=True))
# &lt;A&gt;
#   &lt;B foo="baz" baz="boo"/&gt;
#   &lt;B foo="blah"/&gt;
# &lt;/A&gt;
</snippet></ROW><ROW><id>20813727</id><snippet>slice</snippet></ROW><ROW><id>20813727</id><snippet>s = s[::-1]
</snippet></ROW><ROW><id>20813727</id><snippet>str</snippet></ROW><ROW><id>20813727</id><snippet>dct = {k[::-1]: v for k, v in dct.items()}
</snippet></ROW><ROW><id>20813727</id><snippet>int(s, 2)</snippet></ROW><ROW><id>20813727</id><snippet>dct = {int(k[::-1], 2): v for k, v in dct.items()}
</snippet></ROW><ROW><id>20813813</id><snippet>var_defined(wopt)</snippet></ROW><ROW><id>20813813</id><snippet>wopt is not None</snippet></ROW><ROW><id>20813813</id><snippet>and</snippet></ROW><ROW><id>20813813</id><snippet>or</snippet></ROW><ROW><id>20813813</id><snippet>np.linalg</snippet></ROW><ROW><id>20813813</id><snippet>wopt</snippet></ROW><ROW><id>20813813</id><snippet>var_defined</snippet></ROW><ROW><id>20813813</id><snippet>NameError</snippet></ROW><ROW><id>20813813</id><snippet>var</snippet></ROW><ROW><id>20813813</id><snippet>return 1</snippet></ROW><ROW><id>20813813</id><snippet>is None</snippet></ROW><ROW><id>20813813</id><snippet>return</snippet></ROW><ROW><id>20813813</id><snippet>True</snippet></ROW><ROW><id>20813813</id><snippet>False</snippet></ROW><ROW><id>20813813</id><snippet>0</snippet></ROW><ROW><id>20813813</id><snippet>1</snippet></ROW><ROW><id>20813813</id><snippet>if not bool_func(x): # no == 0
</snippet></ROW><ROW><id>20813965</id><snippet>with open(infile,'r') as fin, open(outfile,'w') as fout:
   fout.write(fin.read()) 
</snippet></ROW><ROW><id>20813965</id><snippet>with</snippet></ROW><ROW><id>20814183</id><snippet>&gt;&gt;&gt; dict={'000': 'A', '001': 'B', '010': 'C'}
&gt;&gt;&gt; 
&gt;&gt;&gt; [int(ele, 2) for ele in dict]
[2, 1, 0]
&gt;&gt;&gt; # getting this shuffled, since the `dict items` are `random`
&gt;&gt;&gt;
&gt;&gt;&gt; {int(k, 2): v for k, v in dict.items()}
{0: 'A', 1: 'B', 2: 'C'}
</snippet></ROW><ROW><id>20814215</id><snippet>setup.py</snippet></ROW><ROW><id>20814215</id><snippet>python setup.py install</snippet></ROW><ROW><id>20814215</id><snippet>setup.py</snippet></ROW><ROW><id>20814263</id><snippet>os.path.join</snippet></ROW><ROW><id>20814263</id><snippet>def join(a, *p):
    """Join two or more pathname components, inserting '/' as needed.
    If any component is an absolute path, all previous path components
    will be discarded."""
    path = a
    for b in p:
        if b.startswith('/'):
            path = b
        elif path == '' or path.endswith('/'):
            path +=  b
        else:
            path += '/' + b
    return path
</snippet></ROW><ROW><id>20814337</id><snippet>import urllib.request
import re

Symbols = ['aapl', 'spy', 'goog', 'nflx']
i = 0
while i &lt; len(Symbols):
    Yahoo = 'http://finance.yahoo.com/q?s=' + Symbols[i]
    htmlfile = urllib.request.urlopen(Yahoo)
    htmltext = htmlfile.read()
    # Changed the string below so that we can resolve the problems with putting the
    # symbol value in the right place. str.format has been used instead
    # Also, the string has been made into a normal string again
    pattern = re.compile('&lt;span id="yfs_l84_{symbol}"&gt;(.+?)&lt;/span&gt;'.format(symbol=Symbols[i]))
    # Here htmltext is turned into a string so that we can compare, without the type-error
    price = re.findall(pattern, str(htmltext))
    print('The price of' + (Symbols[i]) + ' is ' + str(price))
    i += 1
</snippet></ROW><ROW><id>20814348</id><snippet>pip install</snippet></ROW><ROW><id>20814359</id><snippet>recent_menu.add_command(label=file_display, command=lambda i=i: processFile(i))
</snippet></ROW><ROW><id>20814416</id><snippet>newY = (math.cos(rads)*y)+(math.sin(rads)*z)
newZ = (math.sin(rads)*y)+(math.cos(rads)*z)
</snippet></ROW><ROW><id>20814416</id><snippet>newY = (math.cos(rads)*y)+(math.sin(rads)*z)
newZ = (-math.sin(rads)*y)+(math.cos(rads)*z)
        ^
        ^
</snippet></ROW><ROW><id>20814416</id><snippet>rotateY</snippet></ROW><ROW><id>20814416</id><snippet>rotateX</snippet></ROW><ROW><id>20814416</id><snippet>[cos(rads)  sin(rads)]
[sin(rads)  cos(rads)]
</snippet></ROW><ROW><id>20814416</id><snippet>1/(cos(rads)*cos(rads) - sin(rads)sin(rads)) 
= 1/cos(2*rads)
</snippet></ROW><ROW><id>20814416</id><snippet>rads</snippet></ROW><ROW><id>20814416</id><snippet>rads</snippet></ROW><ROW><id>20814580</id><snippet>Option Explicit
Sub ParseBiblio()
    Dim vData As Variant
    Dim vBiblios() As Variant
    Dim rRes As Range
    Dim re As Object, mc As Object
    Dim I As Long

'Assume Data is in column A.
'Might need to start at row 2 if there is a label row
vData = Range("A1", Cells(Rows.Count, "A").End(xlUp))

'Results to start in Column B with labels in row 1
Set rRes = Range("b1")

Set re = CreateObject("vbscript.regexp")
With re
    .MultiLine = True
    .Global = True
    .ignorecase = True
    .Pattern = "(^[^,]+),?\s*([^,]+?)(?:,\s*([^(]+))?\s*\((\d{4})\)\s*(.*?\.)\s*(?:In:\s*(.*)\.)?\s*(.*)"
End With

'Results array and labels
ReDim vBiblios(1 To UBound(vData) + 1, 1 To 7)
    vBiblios(1, 1) = "First Author"
    vBiblios(1, 2) = "Second Author"
    vBiblios(1, 3) = "Other Authors"
    vBiblios(1, 4) = "Publication Year"
    vBiblios(1, 5) = "Title"
    vBiblios(1, 6) = "Published In"
    vBiblios(1, 7) = "More Info"

For I = 1 To UBound(vData)
    Set mc = re.Execute(vData(I, 1))
    If mc.Count &gt; 0 Then
        With mc(0)
            vBiblios(I + 1, 1) = .submatches(0)
            vBiblios(I + 1, 2) = .submatches(1)
            vBiblios(I + 1, 3) = .submatches(2)
            vBiblios(I + 1, 4) = .submatches(3)
            vBiblios(I + 1, 5) = .submatches(4)
            vBiblios(I + 1, 6) = .submatches(5)
            vBiblios(I + 1, 7) = .submatches(6)
        End With
    End If
Next I

Set rRes = rRes.Resize(rowsize:=UBound(vBiblios, 1), columnsize:=UBound(vBiblios, 2))
rRes.EntireColumn.Clear
rRes = vBiblios
With rRes
    With .Rows(1)
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
    End With
    .EntireColumn.AutoFit
End With

End Sub
</snippet></ROW><ROW><id>20814665</id><snippet>serialized = f.read()
deserialized = json.loads(serialized)
</snippet></ROW><ROW><id>20814665</id><snippet>json.load(f)</snippet></ROW><ROW><id>20814665</id><snippet>json.loads(f.read())</snippet></ROW><ROW><id>20814688</id><snippet>&lt;h[1-3]&gt;</snippet></ROW><ROW><id>20814688</id><snippet>stackoverflow.com/page1</snippet></ROW><ROW><id>20814688</id><snippet>stackoverflow.com/page1</snippet></ROW><ROW><id>20815337</id><snippet>&lt;html&gt;
&lt;head&gt;
    &lt;script type="text/javascript" src="shCore.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="shBrushPython.js"&gt;&lt;/script&gt;
    &lt;link type="text/css" href="shCore.css" rel="stylesheet" /&gt;
    &lt;link type="text/css" href="shThemeDefault.css" rel="stylesheet" /&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;pre class='brush: python'&gt;
#!/usr/bin/env python

def hello(txt):
    print('Hello %s!' % txt)

if __name__ == '__main__':
    hello()
&lt;/pre&gt;

&lt;script type="text/javascript"&gt;
     SyntaxHighlighter.all()
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>20815371</id><snippet>pool.map</snippet></ROW><ROW><id>20815371</id><snippet>import multiprocessing.pool as mpool

def worker(target, isbn):
    return target(isbn)

def amazon(isbn):
    ...

def bookadda(isbn):
    ...

def infibeam(isbn):
    #b_price and b_avail are obtained from some where else
    return [b_price, b_avail]


pool = mpool.ThreadPool()
isbn = str(9789382711056)
args = [(target, isbn) for target in (amazon,bookadda,infibeam)]
result = pool.map(worker, args)
</snippet></ROW><ROW><id>20815371</id><snippet>multiprocessing.ThreadPool</snippet></ROW><ROW><id>20815371</id><snippet>result</snippet></ROW><ROW><id>20815371</id><snippet>args</snippet></ROW><ROW><id>20815371</id><snippet>import concurrent.futures as CF

with CF.ThreadPoolExecutor() as executor:
    future = executor.map(worker, args)
    result = list(future)
</snippet></ROW><ROW><id>20815486</id><snippet>json</snippet></ROW><ROW><id>20815486</id><snippet>import json
with open("Tamaguchis.txt","w") as file:
    date = time.strftime("%c")
    dictionary = {"size":tamaguchin.size,"date":date,"order":lista}
    file.write(json.dumps(dictionary))
</snippet></ROW><ROW><id>20815486</id><snippet>loads</snippet></ROW><ROW><id>20815486</id><snippet>import json
with open("Tamaguchis.txt","r") as file:
    dictionary = json.loads(file.read())
</snippet></ROW><ROW><id>20815486</id><snippet>pickle</snippet></ROW><ROW><id>20815668</id><snippet>&gt;&gt;&gt; matrix = [['F', 'B', 'F', 'A', 'C', 'F'],
          ['D', 'E', 'B', 'E', 'B', 'E'],
          ['F', 'A', 'D', 'B', 'F', 'B'],
          ['B', 'E', 'F', 'B', 'D', 'D']]
&gt;&gt;&gt; while [] not in matrix: print([i for var in matrix for i in [var.pop(0), var.pop(0)]])
['F', 'B', 'D', 'E', 'F', 'A', 'B', 'E']
['F', 'A', 'B', 'E', 'D', 'B', 'F', 'B']
['C', 'F', 'B', 'E', 'F', 'B', 'D', 'D']
</snippet></ROW><ROW><id>20815668</id><snippet>range</snippet></ROW><ROW><id>20815668</id><snippet>&gt;&gt;&gt; matrix = [['C', 'B', 'B', 'D', 'F', 'B'], ['D', 'B', 'B', 'A', 'B', 'A'], ['B', 'D', 'E', 'F', 'C', 'B'], ['B', 'A', 'C', 'B', 'E', 'F']] 
&gt;&gt;&gt; while [] not in matrix: print([var.pop(0) for var in matrix for i in range(2)])
['C', 'B', 'D', 'B', 'B', 'D', 'B', 'A']
['B', 'D', 'B', 'A', 'E', 'F', 'C', 'B']
['F', 'B', 'B', 'A', 'C', 'B', 'E', 'F']
</snippet></ROW><ROW><id>20816007</id><snippet>F</snippet></ROW><ROW><id>20816007</id><snippet>class F():
     def foo(self):
         return 1
</snippet></ROW><ROW><id>20816007</id><snippet>F.foo()</snippet></ROW><ROW><id>20816007</id><snippet>&gt;&gt;&gt; F.foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method foo() must be called with F instance as first argument (got nothing instead)
</snippet></ROW><ROW><id>20816007</id><snippet>foo()</snippet></ROW><ROW><id>20816007</id><snippet>F</snippet></ROW><ROW><id>20816007</id><snippet>&gt;&gt;&gt; f=F()
&gt;&gt;&gt; f.foo()
1
</snippet></ROW><ROW><id>20816007</id><snippet>Email_Stuff</snippet></ROW><ROW><id>20816007</id><snippet>yourobject.From_Email()</snippet></ROW><ROW><id>20816007</id><snippet>Email_Stuff</snippet></ROW><ROW><id>20816007</id><snippet>self.From_Email()</snippet></ROW><ROW><id>20816069</id><snippet>2.7.3 (default, Apr 10 2012, 23:24:47) [MSC v.1500 64 bit (AMD64)]</snippet></ROW><ROW><id>20816402</id><snippet>SyntaxError</snippet></ROW><ROW><id>20816402</id><snippet>SyntaxError</snippet></ROW><ROW><id>20816402</id><snippet>SyntaxError</snippet></ROW><ROW><id>20816402</id><snippet>compile</snippet></ROW><ROW><id>20816402</id><snippet>exec</snippet></ROW><ROW><id>20816402</id><snippet>eval</snippet></ROW><ROW><id>20816402</id><snippet>import</snippet></ROW><ROW><id>20816402</id><snippet>ast</snippet></ROW><ROW><id>20816402</id><snippet>tokenizer</snippet></ROW><ROW><id>20816402</id><snippet>parser</snippet></ROW><ROW><id>20816415</id><snippet>id</snippet></ROW><ROW><id>20816415</id><snippet>id = models.AutoField(primary_key=True)
</snippet></ROW><ROW><id>20816415</id><snippet>syncdb</snippet></ROW><ROW><id>20816504</id><snippet>func</snippet></ROW><ROW><id>20816504</id><snippet>C:/Users/Josh Bailey/Desktop/pi_dmx/preset_test.txt
</snippet></ROW><ROW><id>20816504</id><snippet>record</snippet></ROW><ROW><id>20816504</id><snippet>C:/Users/Josh Bailey/Desktop/pi_dmx/preset_test .txt
#                   Note the extra space here--^
</snippet></ROW><ROW><id>20816504</id><snippet>record</snippet></ROW><ROW><id>20816504</id><snippet>name_of_file = ("preset_test ")
#                     here--^
</snippet></ROW><ROW><id>20816504</id><snippet>pass</snippet></ROW><ROW><id>20816504</id><snippet>func</snippet></ROW><ROW><id>20816612</id><snippet>profile.expirationdate</snippet></ROW><ROW><id>20816612</id><snippet>profile.expirationdate()</snippet></ROW><ROW><id>20816680</id><snippet>crontab</snippet></ROW><ROW><id>20816680</id><snippet>time.sleep()</snippet></ROW><ROW><id>20816695</id><snippet>def get_fresh_tokens(func_to_call, *args, **kw):
    # gets new token called accesstoken
    func_to_call(new_accesstoken, *args, **kw)
</snippet></ROW><ROW><id>20816695</id><snippet>get_fresh_tokens(do_something, a, b, c)
</snippet></ROW><ROW><id>20816695</id><snippet>a</snippet></ROW><ROW><id>20816695</id><snippet>b</snippet></ROW><ROW><id>20816695</id><snippet>c</snippet></ROW><ROW><id>20816695</id><snippet>args</snippet></ROW><ROW><id>20816695</id><snippet>get_fresh_tokens()</snippet></ROW><ROW><id>20816695</id><snippet>func_to_call()</snippet></ROW><ROW><id>20816695</id><snippet>**kw</snippet></ROW><ROW><id>20816695</id><snippet>func_to_call()</snippet></ROW><ROW><id>20816729</id><snippet>%H</snippet></ROW><ROW><id>20816729</id><snippet>y</snippet></ROW><ROW><id>20816729</id><snippet>date_format = "%m/%d/%y %H:%M:%S"
</snippet></ROW><ROW><id>20816729</id><snippet>strftime()</snippet></ROW><ROW><id>20816729</id><snippet>strptime()</snippet></ROW><ROW><id>20816729</id><snippet>%h</snippet></ROW><ROW><id>20816729</id><snippet>time.strftime('%c')</snippet></ROW><ROW><id>20816729</id><snippet>b = datetime.now()
</snippet></ROW><ROW><id>20816729</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>20816729</id><snippet>hours</snippet></ROW><ROW><id>20816729</id><snippet>delta = b - a
print(delta.total_seconds() // 60)
</snippet></ROW><ROW><id>20816729</id><snippet>delta</snippet></ROW><ROW><id>20816729</id><snippet>timedelta()</snippet></ROW><ROW><id>20816729</id><snippet>if delta &gt; timedelta(hours=23):
</snippet></ROW><ROW><id>20816729</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; date_format = "%m/%d/%y %H:%M:%S"
&gt;&gt;&gt; datetime.strptime('12/28/13 16:49:19', date_format)
datetime.datetime(2013, 12, 28, 16, 49, 19)
</snippet></ROW><ROW><id>20816744</id><snippet>timeit.timeit</snippet></ROW><ROW><id>20816744</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt;
&gt;&gt;&gt; # Test 1
&gt;&gt;&gt; test = """
... my_list = []
... for i in xrange(50):
...     my_list.append(0)
... """
&gt;&gt;&gt; timeit(test)
22.384258893239178
&gt;&gt;&gt;
&gt;&gt;&gt; # Test 2
&gt;&gt;&gt; test = """
... my_list = []
... for i in xrange(50):
...     my_list += [0]
... """
&gt;&gt;&gt; timeit(test)
34.494779364416445
&gt;&gt;&gt;
&gt;&gt;&gt; # Test 3
&gt;&gt;&gt; test = "my_list = [0 for i in xrange(50)]"
&gt;&gt;&gt; timeit(test)
9.490926919482774
&gt;&gt;&gt;
&gt;&gt;&gt; # Test 4
&gt;&gt;&gt; test = "my_list = [0] * 50"
&gt;&gt;&gt; timeit(test)
1.5340533503559755
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20816744</id><snippet>&gt;&gt;&gt; lst = [[]] * 3
&gt;&gt;&gt; lst
[[], [], []]
&gt;&gt;&gt; # The ids of the items in `lst` are the same
&gt;&gt;&gt; id(lst[0])
28734408
&gt;&gt;&gt; id(lst[1])
28734408
&gt;&gt;&gt; id(lst[2])
28734408
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20816744</id><snippet>&gt;&gt;&gt; lst = [[] for _ in xrange(3)]
&gt;&gt;&gt; lst
[[], [], []]
&gt;&gt;&gt; # The ids of the items in `lst` are different
&gt;&gt;&gt; id(lst[0])
28796688
&gt;&gt;&gt; id(lst[1])
28796648
&gt;&gt;&gt; id(lst[2])
28736168
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20816744</id><snippet>range</snippet></ROW><ROW><id>20816744</id><snippet>xrange</snippet></ROW><ROW><id>20816888</id><snippet>import re

st=u'''\
今天天气很好。今天天气很好。bad? good! 今天天气很好。他说：“今天天气很好。我很开心。”
Sentence one. Sentence two! “Sentence three. Sentence four.” Sentence five?'''

pat=re.compile(r'(?:[^“。？！；~.]*?[?!。.；~])|(?:[^“。？！；~.]*?“[^”]*?”)')
print(pat.findall(st))
</snippet></ROW><ROW><id>20816888</id><snippet>['今天天气很好。', '今天天气很好。', 'bad?', ' good!', ' 今天天气很好。', 
 '他说：“今天天气很好。我很开心。”', '\nSentence one.', ' Sentence two!', 
 ' “Sentence three. Sentence four.”', ' Sentence five?']
</snippet></ROW><ROW><id>20816888</id><snippet>pat=re.compile(r'([^“。？！；~.]*?)[?!。.；~]|([^“。？！；~.]*?“[^”]*?”)')
#  note the end paren:           ^
print([t[0] if t[0] else t[1] for t in pat.findall(st)])
</snippet></ROW><ROW><id>20816888</id><snippet>['今天天气很好', '今天天气很好', 'bad', ' good', ' 今天天气很好', 
 '他说：“今天天气很好。我很开心。”', '\nSentence one', ' Sentence two', 
 ' “Sentence three. Sentence four.”', ' Sentence five']
</snippet></ROW><ROW><id>20816888</id><snippet>re.split</snippet></ROW><ROW><id>20816888</id><snippet>print(list(filter(None, pat.split(st))))   
</snippet></ROW><ROW><id>20816945</id><snippet>Popen(['omxplayer', unquotedFilePath], shell=False, ...)
</snippet></ROW><ROW><id>20817121</id><snippet>{{ somevar }}</snippet></ROW><ROW><id>20817121</id><snippet>{% sometag %}</snippet></ROW><ROW><id>20817121</id><snippet>def example(request):
    template = 'index.html'
    context = {'myvar': 'hello world'}
    return render_to_response(template, context)
</snippet></ROW><ROW><id>20817121</id><snippet>&lt;body&gt;
  &lt;h1&gt; {{ myvar }} &lt;/h1&gt;    
&lt;/body&gt;
</snippet></ROW><ROW><id>20817121</id><snippet>&lt;body&gt;
  &lt;h1&gt; hello world &lt;/h1&gt;    
&lt;/body&gt;
</snippet></ROW><ROW><id>20817121</id><snippet>{{ myvar }}</snippet></ROW><ROW><id>20817121</id><snippet>hello world</snippet></ROW><ROW><id>20817121</id><snippet>MyModel</snippet></ROW><ROW><id>20817121</id><snippet>MyData</snippet></ROW><ROW><id>20817121</id><snippet>def example(request):
    template = 'index.html'
    context = {'myvar': MyModel.objects.get(pk=1)}
    return render_to_response(template, context)
</snippet></ROW><ROW><id>20817121</id><snippet>&lt;body&gt;
  &lt;h1&gt; {{ myvar.MyData }} &lt;/h1&gt;    
&lt;/body&gt;
</snippet></ROW><ROW><id>20817121</id><snippet>def example_fortag(request):
    template = 'fortag.html'
    context = {'mylist': [1, 2, 3]}
    return render_to_response(template, context)
</snippet></ROW><ROW><id>20817121</id><snippet>&lt;body&gt;
{% for item in mylist %}
    &lt;h1&gt;{{ item }}&lt;/h1&gt;
{% endfor %}  
&lt;/body&gt;
</snippet></ROW><ROW><id>20817121</id><snippet>&lt;body&gt;
  &lt;h1&gt;1&lt;/h1&gt;
  &lt;h1&gt;2&lt;/h1&gt;
  &lt;h1&gt;3&lt;/h1&gt; 
&lt;/body&gt;
</snippet></ROW><ROW><id>20817121</id><snippet>def example_iftag(request):
    template = 'iftag.html'
    context = {'mylist': range(1, 10)}
    return render_to_response(template, context)
</snippet></ROW><ROW><id>20817121</id><snippet>&lt;body&gt;
{% for item in mylist %}
    {% if item / 2 == 0 %} 
        &lt;h1&gt;{{ item }}&lt;/h1&gt;
    {% endif %}
{% endfor %}  
&lt;/body&gt;
</snippet></ROW><ROW><id>20817121</id><snippet>&lt;body&gt;
  &lt;h1&gt;2&lt;/h1&gt;
  &lt;h1&gt;4&lt;/h1&gt;
  &lt;h1&gt;6&lt;/h1&gt;
  &lt;h1&gt;8&lt;/h1&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>20817121</id><snippet>context = {'myvar': {'key': 'value'}}
</snippet></ROW><ROW><id>20817121</id><snippet>{% for key, value in myvar.items %}
 ... etc ...
</snippet></ROW><ROW><id>20817121</id><snippet>()</snippet></ROW><ROW><id>20817288</id><snippet>__abstract__</snippet></ROW><ROW><id>20817288</id><snippet>__abstract__</snippet></ROW><ROW><id>20817288</id><snippet>#base.py
class LoadTender(Base):
    __abstract__ = True
    id = ...
    def __repr__ ...
</snippet></ROW><ROW><id>20817288</id><snippet>#schema1.py
from base import LoadTender

PublicBase = declarative_base(metadata=MetaData(schema='public'))

class LoadTender(PublicBase, LoadTender):
    __tablename__ = 'load_tenders'
</snippet></ROW><ROW><id>20817404</id><snippet>{# #}</snippet></ROW><ROW><id>20817451</id><snippet>StrictButton</snippet></ROW><ROW><id>20817495</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>20817495</id><snippet>etree</snippet></ROW><ROW><id>20817495</id><snippet>etree.ElementTree</snippet></ROW><ROW><id>20817495</id><snippet>etree.Element</snippet></ROW><ROW><id>20817495</id><snippet>etree.fromstring</snippet></ROW><ROW><id>20817495</id><snippet>etree.parse</snippet></ROW><ROW><id>20817495</id><snippet>etree.ElementTree</snippet></ROW><ROW><id>20817495</id><snippet>etree.fromstring</snippet></ROW><ROW><id>20817495</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>20817495</id><snippet>namespaces</snippet></ROW><ROW><id>20817495</id><snippet>ElementTree</snippet></ROW><ROW><id>20817495</id><snippet>Element</snippet></ROW><ROW><id>20817495</id><snippet>xml.etree.cElementTree</snippet></ROW><ROW><id>20817495</id><snippet>cElementTree</snippet></ROW><ROW><id>20817495</id><snippet>import xml.etree.ElementTree as etree
import html5lib

tb = html5lib.getTreeBuilder("etree", implementation=etree)
p = html5lib.HTMLParser(tb)
tree = p.parse("&lt;html&gt;")
</snippet></ROW><ROW><id>20817575</id><snippet>STATIC_URL</snippet></ROW><ROW><id>20817575</id><snippet>normalize.css</snippet></ROW><ROW><id>20817575</id><snippet>STATIC_URL</snippet></ROW><ROW><id>20817575</id><snippet>STATIC_URL = 'MySite/static/'
</snippet></ROW><ROW><id>20817575</id><snippet>STATIC_URL = '/MySite/static/'
</snippet></ROW><ROW><id>20817722</id><snippet>    import numpy as np
    import matplotlib
    matplotlib.use('TkAgg') 
    import matplotlib.pyplot as plt
</snippet></ROW><ROW><id>20817858</id><snippet>&gt;&gt;&gt; dict1 = {'a':0, 'b':1, 'c':2,'d':3,'e':4,'f':5}
&gt;&gt;&gt; dict2 = {'a':3, 'b':4, 'c':5}

&gt;&gt;&gt; d1 = {v:k for k,v in dict1.iteritems()}
&gt;&gt;&gt; d1
{0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f'}

&gt;&gt;&gt; dict3 = {k:d1[v] for k,v in dict2.iteritems()}
&gt;&gt;&gt; dict3
{'a': 'd', 'c': 'f', 'b': 'e'}
</snippet></ROW><ROW><id>20817890</id><snippet>A</snippet></ROW><ROW><id>20817890</id><snippet>A = ("James",)</snippet></ROW><ROW><id>20818103</id><snippet>vervaldatum</snippet></ROW><ROW><id>20818103</id><snippet>sorted(WhiteChocoStock, key=lambda x: datetime.datetime.strptime(x.vervaldatum, '%d/%m/%Y'))
</snippet></ROW><ROW><id>20818160</id><snippet>&gt;&gt;&gt; import textwrap
&gt;&gt;&gt; textwrap.wrap('The quick brown fox jumps over the lazy dog', 12)
['The quick', 'brown fox', 'jumps over', 'the lazy dog']
</snippet></ROW><ROW><id>20818201</id><snippet>%s</snippet></ROW><ROW><id>20818201</id><snippet>%d</snippet></ROW><ROW><id>20818201</id><snippet>add_user = """INSERT INTO DB.tbluser 
              (username, department, startyear, currentpos, link) 
              VALUES (%s, %s, %s, %s, %s)"""
</snippet></ROW><ROW><id>20818201</id><snippet>mysql.connector</snippet></ROW><ROW><id>20818201</id><snippet>%s</snippet></ROW><ROW><id>20818201</id><snippet>oursql</snippet></ROW><ROW><id>20818201</id><snippet>sqlite3</snippet></ROW><ROW><id>20818201</id><snippet>?</snippet></ROW><ROW><id>20818201</id><snippet>%s</snippet></ROW><ROW><id>20818330</id><snippet>MediaUpload</snippet></ROW><ROW><id>20818330</id><snippet>media_body</snippet></ROW><ROW><id>20818330</id><snippet>baseRevision</snippet></ROW><ROW><id>20818330</id><snippet>file = service.realtime().update(
    fileId=fileId, 
    media_body=revision_body, 
    baseRevision=base_body).execute()
</snippet></ROW><ROW><id>20818330</id><snippet>revision_body</snippet></ROW><ROW><id>20818330</id><snippet>base_body</snippet></ROW><ROW><id>20818330</id><snippet>MediaInMemoryUpload</snippet></ROW><ROW><id>20818330</id><snippet>base_body = MediaInMemoryUpload('{
   "appId": "81499847683",
   "revision": 2,
   "data": {
   "id": "root",
   "type": "Map",
   "value": {
      "text": {
      "id": "afEW2yVgyopf",
      "type": "EditableString",
      "value": "Hello Realtime World!"
      }
    }
   }
 }', 
 'application/vnd.google-apps.drive-sdk')

revision_body = MediaInMemoryUpload('{
   "appId": "81499847683",
   "revision": 2,
   "data": {
   "id": "root",
   "type": "Map",
   "value": {
      "text": {
      "id": "afEW2yVgyopf",
      "type": "EditableString",
      "value": "Hello Realtime World! Hello Realtime World! Hello Realtime World!"
      }
    }
   }
 }', 
 'application/vnd.google-apps.drive-sdk')
</snippet></ROW><ROW><id>20818377</id><snippet>c_void_p</snippet></ROW><ROW><id>20818377</id><snippet>from_param</snippet></ROW><ROW><id>20818377</id><snippet>_as_parameter_</snippet></ROW><ROW><id>20818377</id><snippet>_obj</snippet></ROW><ROW><id>20818377</id><snippet>c_void_p</snippet></ROW><ROW><id>20818377</id><snippet>from ctypes import *

__all__ = ['CellComplex']

class Cell(c_void_p):

    def __new__(cls, *args, **kwds):
        raise TypeError("cannot create %r instances" % cls.__name__)

    @property
    def dimension(self):
        return lib.dim(self)

class CellComplex(c_void_p):

    def __init__(self, p):
        pair = c_double * 2
        point = (pair * len(p))(*(pair(*q[:2]) for q in p))
        self.value = lib.new_cellComplex(point, len(p)).value

    @property
    def dimension(self):
        """Wrap a function that returns size_t."""
        return lib.????????(self)

    def get_elements(self):
        el = []
        for i in range(self.dimension):
            size = lib.size_elementsAtSpecifiedDim(self, i)
            cells = lib.get_elementsAtSpecifiedDim(self, i)
            el.append(cells[:size])
        return el
</snippet></ROW><ROW><id>20818377</id><snippet>lib = CDLL('./cellComplex_lib.so')

lib.dim.restype = c_int
lib.dim.argtypes = [Cell]

lib.new_cellComplex.restype = CellComplex
lib.new_cellComplex.argtypes = [POINTER(c_double * 2), c_size_t]

lib.size_elementsAtSpecifiedDim.restype = c_int
lib.size_elementsAtSpecifiedDim.argtypes = [CellComplex, c_int]

lib.get_elementsAtSpecifiedDim.restype = POINTER(Cell)
lib.get_elementsAtSpecifiedDim.argtypes = [CellComplex, c_int]
</snippet></ROW><ROW><id>20818377</id><snippet>restype</snippet></ROW><ROW><id>20818377</id><snippet>argtypes</snippet></ROW><ROW><id>20818377</id><snippet>cast</snippet></ROW><ROW><id>20818377</id><snippet>CellComplex</snippet></ROW><ROW><id>20818377</id><snippet>p</snippet></ROW><ROW><id>20818377</id><snippet>[[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]</snippet></ROW><ROW><id>20818377</id><snippet>c_cellComplex</snippet></ROW><ROW><id>20818377</id><snippet>value</snippet></ROW><ROW><id>20818377</id><snippet>lib.new_cellComplex</snippet></ROW><ROW><id>20818377</id><snippet>CellComplex</snippet></ROW><ROW><id>20818377</id><snippet>__new__</snippet></ROW><ROW><id>20818377</id><snippet>__init__</snippet></ROW><ROW><id>20818377</id><snippet>CellComplex</snippet></ROW><ROW><id>20818377</id><snippet>restype</snippet></ROW><ROW><id>20818377</id><snippet>__new__</snippet></ROW><ROW><id>20818377</id><snippet>c_void_p.__init__</snippet></ROW><ROW><id>20818377</id><snippet>dimension</snippet></ROW><ROW><id>20818401</id><snippet>type</snippet></ROW><ROW><id>20818401</id><snippet>connect</snippet></ROW><ROW><id>20818401</id><snippet>QtCore.Qt.AutoConnection</snippet></ROW><ROW><id>20818401</id><snippet>from QtCore import pyqtSlot

class Scanner(QObject):

    @pyqtSlot()
    def scan(self):
        scan_value(start, stop, step)
        progress.setValue(100)
</snippet></ROW><ROW><id>20818401</id><snippet>    if (rx_qobj)
        proxy-&gt;moveToThread(rx_qobj-&gt;thread());
</snippet></ROW><ROW><id>20818401</id><snippet>@pyqtSlot</snippet></ROW><ROW><id>20818419</id><snippet>#include "Python.h"
#include "gst_plugin.h"

static gboolean plugin_init (GstPlugin *plugin) {
    // initialize the extension module
    #if PY_MAJOR_VERSION &lt; 3
        initgstreamer();
    #else
        PyInit_gstreamer();
    #endif

    // call into function exported from cython module
    return register_plugin(plugin);
}

GST_PLUGIN_DEFINE (
    GST_VERSION_MAJOR,
    GST_VERSION_MINOR,
    my_filter,
    "My filter plugin",
    plugin_init,
    VERSION,
    "LGPL",
    "GStreamer",
    "http://gstreamer.net/"
)
</snippet></ROW><ROW><id>20818419</id><snippet>register_plugin</snippet></ROW><ROW><id>20818419</id><snippet>cdef public int register_plugin(void *plugin):
    # use the gstreamer API in here to register your plugin
</snippet></ROW><ROW><id>20818419</id><snippet>libpython</snippet></ROW><ROW><id>20818419</id><snippet>ctypes</snippet></ROW><ROW><id>20818419</id><snippet>mod_python</snippet></ROW><ROW><id>20818463</id><snippet>\r\n</snippet></ROW><ROW><id>20818463</id><snippet>\n</snippet></ROW><ROW><id>20818463</id><snippet>pylab</snippet></ROW><ROW><id>20818463</id><snippet>numpy</snippet></ROW><ROW><id>20818463</id><snippet>import os
outfile = datafile+'-fixed'
with open(datafile, 'rb') as f, open(outfile, 'wb') as g:
    content = f.read()
    g.write(content.replace('\r', '\r\n'))
os.rename(outfile, datafile)
</snippet></ROW><ROW><id>20818562</id><snippet>'%'</snippet></ROW><ROW><id>20818562</id><snippet>if inputstring and inputstring != '%':
</snippet></ROW><ROW><id>20818562</id><snippet>'%'</snippet></ROW><ROW><id>20818562</id><snippet>.</snippet></ROW><ROW><id>20818562</id><snippet>r'^(?:[^%]|.{2,})$'
</snippet></ROW><ROW><id>20818562</id><snippet>%</snippet></ROW><ROW><id>20818562</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; no_percentage = re.compile(r'^(?:[^%]|.{2,})$')
&gt;&gt;&gt; no_percentage.search('')
&gt;&gt;&gt; no_percentage.search('%')
&gt;&gt;&gt; no_percentage.search('%1')
&lt;_sre.SRE_Match object at 0x10f374370&gt;
&gt;&gt;&gt; no_percentage.search('1')
&lt;_sre.SRE_Match object at 0x10f3743d8&gt;
</snippet></ROW><ROW><id>20818725</id><snippet>for</snippet></ROW><ROW><id>20818725</id><snippet>file.subject.all()</snippet></ROW><ROW><id>20818725</id><snippet>{% for subject in file.subject.all %}
    {{ subject.subject }}
{% empty %}
    Sorry, no subjects found.
{% endfor %}
</snippet></ROW><ROW><id>20818725</id><snippet>subject = file.subject.filter(subject__startswith='Foo').first()
</snippet></ROW><ROW><id>20819252</id><snippet>def select(lst, subselect, select):
    return [sublst[slice(*subselect)] for sublst in lst[slice(*select)]]
</snippet></ROW><ROW><id>20819252</id><snippet>&gt;&gt;&gt; def select(lst, subselect, select):
...     return [sublst[slice(*subselect)] for sublst in lst[slice(*select)]]
... 
&gt;&gt;&gt; A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; select(A, (1, 3), (0, 3))
[[2, 3], [5, 6], [8, 9]]
</snippet></ROW><ROW><id>20819252</id><snippet>None</snippet></ROW><ROW><id>20819252</id><snippet>0</snippet></ROW><ROW><id>20819252</id><snippet>start</snippet></ROW><ROW><id>20819252</id><snippet>stop</snippet></ROW><ROW><id>20819252</id><snippet>stop</snippet></ROW><ROW><id>20819252</id><snippet>&gt;&gt;&gt; select(A, (1, None), (3,))
[[2, 3], [5, 6], [8, 9]]
</snippet></ROW><ROW><id>20819252</id><snippet>&gt;&gt;&gt; select(A, (1, None), (None, 3, 2))
[[2, 3], [8, 9]]
&gt;&gt;&gt; select(A, (1, None), (None, None, -1))
[[8, 9], [5, 6], [2, 3]]
</snippet></ROW><ROW><id>20819293</id><snippet>len(rock_group)</snippet></ROW><ROW><id>20819293</id><snippet>rock_group</snippet></ROW><ROW><id>20819293</id><snippet>rock_group = set()</snippet></ROW><ROW><id>20819293</id><snippet>rock_group = set()
if len(rock_group) &lt;= 12:
    rock_group.add(a_rock)
</snippet></ROW><ROW><id>20819360</id><snippet>import random

pin = random.randint(999, 9999)
print pin
</snippet></ROW><ROW><id>20819360</id><snippet>randint(a, b)</snippet></ROW><ROW><id>20819360</id><snippet>a</snippet></ROW><ROW><id>20819360</id><snippet>b</snippet></ROW><ROW><id>20819360</id><snippet>random</snippet></ROW><ROW><id>20819816</id><snippet>def func(lst, start):
    result = []
    while True:
        found = False
        for item in lst:
            if start in item:
                item.remove(start)
                result.append(start)
                found = True
                if item:
                    start = item[0]
                    item.remove(start)
                    break
        if not found:
            result.append(start)
            break
    return result
</snippet></ROW><ROW><id>20819816</id><snippet>&gt;&gt;&gt; func([[0, 1], [0, 4], [3, 4], [5, 1], [5, 2]], 3)
[3, 4, 0, 1, 5, 2]
</snippet></ROW><ROW><id>20819830</id><snippet>wait_for_element_visibility</snippet></ROW><ROW><id>20819830</id><snippet>wait_for_element_presence</snippet></ROW><ROW><id>20819830</id><snippet>def wait_for_visibility(self, selector, timeout_seconds=10):
    retries = timeout_seconds
    while retries:
        try:
            element = self.get_via_css(selector)
            if element.is_displayed():
                return element
        except (exceptions.NoSuchElementException,
                exceptions.StaleElementReferenceException):
            if retries &lt;= 0:
                raise
            else:
                pass

        retries = retries - 1
        time.sleep(pause_interval)
    raise exceptions.ElementNotVisibleException(
        "Element %s not visible despite waiting for %s seconds" % (
            selector, timeout_seconds)
    )
</snippet></ROW><ROW><id>20819830</id><snippet>get_via_css</snippet></ROW><ROW><id>20819997</id><snippet>In [11]: df = pd.read_csv('foo.csv', sep=',', header=None, parse_dates=[[0, 1]])

In [12]: df.columns = ['date', 'val']

In [13]: df.set_index('date', inplace=True)

In [14]: df
Out[14]: 
                         val
date                        
2011-05-16 00:00:00  1.40893
2011-05-16 01:00:00  1.40760
2011-05-16 02:00:00  1.40750
2011-05-16 03:00:00  1.40649
</snippet></ROW><ROW><id>20819997</id><snippet>In [15]: day_max = df.resample('D', how='max')
</snippet></ROW><ROW><id>20819997</id><snippet>In [16]: df['is_day_max'] = day_max.lookup(df.index.normalize(), len(df) * ['val']) == df.val

In [17]: df
Out[17]: 
                         val is_day_max
date                                   
2011-05-16 00:00:00  1.40893       True
2011-05-16 01:00:00  1.40760      False
2011-05-16 02:00:00  1.40750      False
2011-05-16 03:00:00  1.40649      False
</snippet></ROW><ROW><id>20819997</id><snippet>In [18]: df.groupby(df.index.time)['is_day_max'].sum()
Out[18]: 
00:00:00    1
01:00:00    0
02:00:00    0
03:00:00    0
Name: is_day_max, dtype: float64
</snippet></ROW><ROW><id>20820159</id><snippet>get_form_kwargs</snippet></ROW><ROW><id>20820159</id><snippet>class YourView(CreateView):
    form = YourFormClass  # no arguments here

    def get_form_kwargs(self):
        kwargs = super(YourViewName, self).get_form_kwargs()
        kwargs['initial'] = {}  # your initial data here
        return kwargs
</snippet></ROW><ROW><id>20820168</id><snippet>MOUSEBUTTONDOWN</snippet></ROW><ROW><id>20820168</id><snippet>mouse.click()</snippet></ROW><ROW><id>20820168</id><snippet>Button</snippet></ROW><ROW><id>20820168</id><snippet>all_sprites</snippet></ROW><ROW><id>20820168</id><snippet>click()</snippet></ROW><ROW><id>20820168</id><snippet>self.clicking = 1</snippet></ROW><ROW><id>20820168</id><snippet>all_sprites</snippet></ROW><ROW><id>20820168</id><snippet>self.clicking</snippet></ROW><ROW><id>20820168</id><snippet>self.clicking</snippet></ROW><ROW><id>20820168</id><snippet>for</snippet></ROW><ROW><id>20820168</id><snippet>def click(self, target):
    "returns true if the hand collides with the target"
    hitbox = self.rect.inflate(-5, -5)
    if hitbox.colliderect(target.rect):
        self.clicking = 1
        return True
</snippet></ROW><ROW><id>20820176</id><snippet>    if len(words) == 0:
        continue
    if words[0] != 'From':
        continue
</snippet></ROW><ROW><id>20820176</id><snippet>continue</snippet></ROW><ROW><id>20820176</id><snippet>if len(words) == 0 or words[0] != 'From':
                #  ^ or, not and
    continue
</snippet></ROW><ROW><id>20820176</id><snippet>and</snippet></ROW><ROW><id>20820176</id><snippet>print</snippet></ROW><ROW><id>20820176</id><snippet>continue</snippet></ROW><ROW><id>20820176</id><snippet>if len(words) &gt; 0 and words[0] == 'From':
    print words[2]
</snippet></ROW><ROW><id>20820276</id><snippet>v</snippet></ROW><ROW><id>20820276</id><snippet>v = numpy.array( [[1,2], [4,2], [15,34], [2,3]] )
</snippet></ROW><ROW><id>20820276</id><snippet>v1 = v[:,0]
v2 = v[:,1]
</snippet></ROW><ROW><id>20820276</id><snippet>C = numpy.correlate(v1,v1,'full') + numpy.correlate(v2,v2,'full')
</snippet></ROW><ROW><id>20820276</id><snippet>C = C[(len(C)/2):]
</snippet></ROW><ROW><id>20820318</id><snippet>&gt;&gt;&gt; (0.1 + 0.1) == 0.2
True
&gt;&gt;&gt; (0.1 + 0.2) == 0.3
False
</snippet></ROW><ROW><id>20820318</id><snippet>decimal</snippet></ROW><ROW><id>20820318</id><snippet>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; decimal.getcontext().prec = 60
&gt;&gt;&gt; decimal.Decimal(0.1)
Decimal('0.1000000000000000055511151231257827021181583404541015625')
&gt;&gt;&gt; decimal.Decimal(0.2)
Decimal('0.200000000000000011102230246251565404236316680908203125')
&gt;&gt;&gt; decimal.Decimal(0.1) + decimal.Decimal(0.1)
Decimal('0.2000000000000000111022302462515654042363166809082031250')
</snippet></ROW><ROW><id>20820453</id><snippet>import multiprocessing

...

def calc_one(xymm):
  x,y,(a0,p0,a1,p1) = xymm
  w0 = Waves.GetSampleValues(Waves.WaveParams((a0[y, x], 0, p0[y, x], 0)))
  w1 = Waves.GetSampleValues(Waves.WaveParams((a1[y, x], 0, p1[y, x], 0)))

  return x,y,DemoPoint(w0, w1, useOld)

inputs = []
for y in range(0, 288):
  for x in range(0, 352):
    inputs.append((x,y,(a0,p0,a1,p1)))

resultPhase0 = {}
resultPhase1 = {}
resultAmp0 = {}
resultAmp1 = {}

num_of_workers = multiprocessing.cpu_count()
pool = multiprocessing.Pool(num_of_workers)

for data in pool.map(calc_one,inputs):
  x,y,(am0,am1,ph0,ph1) = data
  resultPhase0[y,x],resultPhase1[y,x],resultAmp0[y,x],resultAmp1[y,x] = ph0,ph1,am0,am1

return resultAmp0, resultAmp1, resultPhase0, resultPhase1
</snippet></ROW><ROW><id>20820468</id><snippet>@app.route('/data', methods = ['GET', 'POST'])
def data():
    form = Form()
    if form.validate_on_submit():
        # Complete request
        # Generate data
        # Generate temp filename and save the result in it
        # Display (or redirect to) a page with a link to /get-result/{{ THE RESULT ID }}

    return render_template('data.html', title = 'Data Page', form = form)

@app.route('/get-result/&lt;result_id&gt;', methods = ['GET', 'POST'])
def output():
    # Open the result file based on its id
    # Stream it to the client as you did before
</snippet></ROW><ROW><id>20820479</id><snippet>getstate</snippet></ROW><ROW><id>20820479</id><snippet>setstate</snippet></ROW><ROW><id>20820479</id><snippet>Random</snippet></ROW><ROW><id>20820479</id><snippet>Random</snippet></ROW><ROW><id>20820479</id><snippet>getstate</snippet></ROW><ROW><id>20820479</id><snippet>setstate</snippet></ROW><ROW><id>20820479</id><snippet>    def getstate(self):
        return (self.previous, super(nrRand,self).getstate())
</snippet></ROW><ROW><id>20820479</id><snippet>self.previous</snippet></ROW><ROW><id>20820479</id><snippet>getstate</snippet></ROW><ROW><id>20820479</id><snippet>self.previous</snippet></ROW><ROW><id>20820479</id><snippet>    def getstate(self):
        return (self.previous[:], super(nrRand, self).getstate())
</snippet></ROW><ROW><id>20820479</id><snippet>setstate</snippet></ROW><ROW><id>20820479</id><snippet>    def setstate(self, state):
        previous, parent_state = state
        self.previous = previous[:]
        super(nrRand, self).setstate(parent_state)
</snippet></ROW><ROW><id>20820600</id><snippet>numpy</snippet></ROW><ROW><id>20820600</id><snippet>import numpy
# Change your p into an array, you'll see why.
r = numpy.array(p) # If p is a list this will change it into 1 dimensional vector.
sin_theta = numpy.array(sin_theta) # Same with the rest.
cos_phi = numpy.array(cos_phi)

x_sph = r.dot(sin_theta).dot(cos_theta)
</snippet></ROW><ROW><id>20820600</id><snippet>numpy</snippet></ROW><ROW><id>20820600</id><snippet>phi = numpy.array(phi) # I don't know how you calculate this but you can start here with a phi list.
theta = numpy.array(theta)

sin_theta  =numpy.sin(theta)
cos_phi = numpy.array(phi)
</snippet></ROW><ROW><id>20820600</id><snippet>sin_theta</snippet></ROW><ROW><id>20820600</id><snippet>cos_phi</snippet></ROW><ROW><id>20820600</id><snippet>numpy</snippet></ROW><ROW><id>20820600</id><snippet>numpy</snippet></ROW><ROW><id>20820644</id><snippet>Popen</snippet></ROW><ROW><id>20820644</id><snippet>start</snippet></ROW><ROW><id>20820644</id><snippet>/WAIT</snippet></ROW><ROW><id>20820644</id><snippet>start</snippet></ROW><ROW><id>20820644</id><snippet>start</snippet></ROW><ROW><id>20820644</id><snippet>psutil</snippet></ROW><ROW><id>20820644</id><snippet>&gt;&gt;&gt; import psutil
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; doc = subprocess.Popen(["start", "/WAIT", "file.pdf"], shell=True)
&gt;&gt;&gt; doc.poll()
&gt;&gt;&gt; psutil.Process(doc.pid).get_children()[0].kill()
&gt;&gt;&gt; doc.poll()
0
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20820644</id><snippet>poll</snippet></ROW><ROW><id>20820644</id><snippet>None</snippet></ROW><ROW><id>20820644</id><snippet>/WAIT</snippet></ROW><ROW><id>20820644</id><snippet>start</snippet></ROW><ROW><id>20820644</id><snippet>start</snippet></ROW><ROW><id>20820644</id><snippet>shell=True</snippet></ROW><ROW><id>20820644</id><snippet>subprocess.Popen("start /WAIT " + self.file, shell=True)
</snippet></ROW><ROW><id>20820757</id><snippet>app</snippet></ROW><ROW><id>20820757</id><snippet>Redis()</snippet></ROW><ROW><id>20820757</id><snippet>app</snippet></ROW><ROW><id>20820757</id><snippet>redis.init_app(app)</snippet></ROW><ROW><id>20820757</id><snippet>app = Flask(__name__)

manager = Manager(app)
db = SQLAlchemy()
redis = Redis()

def attach_extensions(app):
    db.init_app(app)
    redis.init_app(app)
</snippet></ROW><ROW><id>20820757</id><snippet>from myapp import app, manager, attach_extensions

@manager.command
def debug():
    app.config.from_pyfile("debug.cfg")
    attach_extensions(app)
    app.run()
</snippet></ROW><ROW><id>20820878</id><snippet>update_idletasks</snippet></ROW><ROW><id>20820878</id><snippet>def click(self):
    self.clicks += 1
    self.button_text.set("Click " + str(self.clicks))
    ##################################
    self.button.update_idletasks()
    ##################################
    time.sleep(2)
</snippet></ROW><ROW><id>20820878</id><snippet>click</snippet></ROW><ROW><id>20821065</id><snippet>python merge.py data0001.dat data0002.dat</snippet></ROW><ROW><id>20821065</id><snippet>with open(name, 'r') as infile:</snippet></ROW><ROW><id>20821065</id><snippet>close()</snippet></ROW><ROW><id>20821065</id><snippet>#!/usr/bin/env python

import argparse
import re

# Give help description
parser = argparse.ArgumentParser(description='Merge some data files')
# Add to help description
parser.add_argument('fname', metavar='f', nargs='+',
                    help='Names of files to be merged')
# Parse the input arguments!
args = parser.parse_args()
argdct = vars(args)

topcomment=None
output = {}
# Loop over file names
for name in argdct['fname']:
    with open(name, "r") as infile:
        # Loop over lines in each file
        for line in infile:
            line = str(line)
            # Skip comment lines, except to take note of first one that
            # matches "#A"
            if re.search('^#', line):
                if re.search('^#A', line) != None and topcomment==None:
                    topcomment = line
                continue
            items = line.split()
            # If a line matching this one has been encountered in a previous
            # file, add the column values
            currkey = float(items[0])
            if currkey in output.keys():
                for ii in range(len(output[currkey])):
                    output[currkey][ii] += float(items[ii+1])
            # Otherwise, add a new key to the output and create the columns
            else:
                output[currkey] = list(map(float, items[1:]))

# Print the comment line
print(topcomment, end='')
# Get total number of files for calculating average
nfile = len(argdct['fname'])              
# Sort the output keys
skey = sorted(output.keys())
# Loop through sorted keys and print each averaged column to stdout
for key in skey:
    outline = str(int(key))
    for item in output[key]:
        outline += ' ' + str(item/nfile)
    outline += '\n'
    print(outline, end='')
</snippet></ROW><ROW><id>20821075</id><snippet>ai</snippet></ROW><ROW><id>20821075</id><snippet>import fractions
ai = fractions.Fraction(2)
bi = 1
n = 5
for i in range(n):
    ai = 2 + bi / ai
    F = ai - 1
    print(F)
</snippet></ROW><ROW><id>20821075</id><snippet>3/2
7/5
17/12
41/29
99/70
</snippet></ROW><ROW><id>20821220</id><snippet>&gt;&gt;&gt; import pandas as pd

&gt;&gt;&gt; df = pd.read_csv('data.csv', sep=',', header=None, names=['datatable', 'col'])
&gt;&gt;&gt; df.head()
     datatable  col
0    DatatableA  1
1    DatatableA  2
2    DatatableA  3
3    DatatableA  4
4    DatatableA  5
</snippet></ROW><ROW><id>20821220</id><snippet>def replace_letter(group):
    letters = group.isin(['T', 'Q'])              # select letters
    group[letters] = int(group[~letters].max()) + 1  # replace by next max
    return group


&gt;&gt;&gt; df['col'] = df.groupby('datatable').transform(replace_letter)
&gt;&gt;&gt; df

     datatable   col
0    DatatableA  1
1    DatatableA  2
2    DatatableA  3
3    DatatableA  4
4    DatatableA  5
5    DatatableB  1
6    DatatableB  6
7    DatatableB  7
8    DatatableB  3
9    DatatableB  4
10   DatatableB  5
11   DatatableB  2
12   DatatableC  3
13   DatatableC  4
14   DatatableC  2
15   DatatableC  1
16   DatatableC  6
17   DatatableC  5
18   DatatableC  6
</snippet></ROW><ROW><id>20821220</id><snippet>df.to_csv('result.csv', index=None, header=None)
</snippet></ROW><ROW><id>20821294</id><snippet>moneyValidator</snippet></ROW><ROW><id>20821294</id><snippet>def moneyValidator(x):
    ...

class Market(models.Model):
    money = models.DecimalField(max_digits = 15, decimal_places=2, validators=[moneyValidator])
</snippet></ROW><ROW><id>20821299</id><snippet>Pool</snippet></ROW><ROW><id>20821299</id><snippet>import os
NUM_CPUS = None  # defaults to all available

def worker(f1, f2):
    os.system("run program x on f1 and f2")

def test_run(pool):
     filelist = os.listdir(files_dir)
     for f1 in filelist:
          for f2 in filelist:
               pool.apply_async(worker, args=(f1, f2))

if __name__ == "__main__":
     import multiprocessing as mp
     pool = mp.Pool(NUM_CPUS)
     test_run(pool)
     pool.close()
     pool.join()
</snippet></ROW><ROW><id>20821299</id><snippet>Pool</snippet></ROW><ROW><id>20821299</id><snippet>if __name__ == "__main__":
     import multiprocessing as mp
     with mp.Pool(NUM_CPUS) as pool:
         test_run(pool)
</snippet></ROW><ROW><id>20821299</id><snippet>concurrent.futures</snippet></ROW><ROW><id>20821299</id><snippet>test_run()</snippet></ROW><ROW><id>20821299</id><snippet>def test_run():
     import concurrent.futures as cf
     filelist = os.listdir(files_dir)
     with cf.ProcessPoolExecutor(NUM_CPUS) as pp:
         for f1 in filelist:
             for f2 in filelist:
                 pp.submit(worker, f1, f2)

if __name__ == "__main__":
     test_run()
</snippet></ROW><ROW><id>20821299</id><snippet>def test_run():
     import concurrent.futures as cf
     filelist = os.listdir(files_dir)
     futures = []
     with cf.ProcessPoolExecutor(NUM_CPUS) as pp:
         for f1 in filelist:
             for f2 in filelist:
                 futures.append(pp.submit(worker, f1, f2))
     for future in cf.as_completed(futures):
         future.result()
</snippet></ROW><ROW><id>20821299</id><snippet>future.result()</snippet></ROW><ROW><id>20821299</id><snippet>Future</snippet></ROW><ROW><id>20821324</id><snippet>Done</snippet></ROW><ROW><id>20821324</id><snippet>&gt;&gt;&gt; Done = True
&gt;&gt;&gt; while Done:
    quit = str(raw_input ("Do you want to quit? "))
    if quit == 'y' :
        Done = False
    attack = str(raw_input("Does your elf attack the dragon? "))
    if attack=='y':
        print("Bad choice, you died.")
        Done = False
        print("Loop stopped")
</snippet></ROW><ROW><id>20821324</id><snippet>print</snippet></ROW><ROW><id>20821402</id><snippet>print "I have worked %s hours, %s minutes, and %s seconds" % (hours, minutes, seconds);
</snippet></ROW><ROW><id>20821433</id><snippet>__import__</snippet></ROW><ROW><id>20821433</id><snippet>subdirname</snippet></ROW><ROW><id>20821433</id><snippet>for dirname in os.list('modules'):
    if os.isdir(os.path.join('modules', dirname)):
        module = getattr(__import__("modules." + dirname), dirname)
        func = getattr(module, "main", None)
        if func:
            func()
</snippet></ROW><ROW><id>20821433</id><snippet>os.list()</snippet></ROW><ROW><id>20821433</id><snippet>os.walk()</snippet></ROW><ROW><id>20821433</id><snippet>(dirname, directories, files)</snippet></ROW><ROW><id>20821433</id><snippet>for root, dirs, files in os.walk('modules'):
    for dir in dirs:
        module = getattr(__import__("modules." + dir), dirname)
        func = getattr(module, "main", None)
        if func:
            func()
     dirs[:] = []  # don't recurse into directories.
</snippet></ROW><ROW><id>20821433</id><snippet>importlib.import_module()</snippet></ROW><ROW><id>20821433</id><snippet>from importlib import import_module

for dirname in os.list('modules'):
    if os.isdir(os.path.join('modules', dirname)):
        module = import_module(dirname, 'modules')
        func = getattr(module, "main", None)
        if func:
            func()
</snippet></ROW><ROW><id>20821448</id><snippet>r</snippet></ROW><ROW><id>20821448</id><snippet>r'…'</snippet></ROW><ROW><id>20821448</id><snippet>"</snippet></ROW><ROW><id>20821448</id><snippet>r"…"</snippet></ROW><ROW><id>20821448</id><snippet>''</snippet></ROW><ROW><id>20821448</id><snippet>pattern = '"""' + r"\s*\d\d-'\d\d'-\d\d\s*" + '"""'</snippet></ROW><ROW><id>20821448</id><snippet>r</snippet></ROW><ROW><id>20821452</id><snippet>decode_header</snippet></ROW><ROW><id>20821452</id><snippet>&gt;&gt;&gt; sys.version_info
sys.version_info(major=3, minor=3, micro=2, releaselevel='final', serial=0)
&gt;&gt;&gt; email.header.decode_header('=?utf-8?B?aXNhYmVsIG1hcsOtYSB0b2Npbm8gZ2FyY8OtYQ==?=\r\n\t&lt;isatocino22@hotmail.com&gt;')
[(b'isabel mar\xc3\xada tocino garc\xc3\xada', 'utf-8'), (b'&lt;isatocino22@hotmail.com&gt;', None)]
</snippet></ROW><ROW><id>20821452</id><snippet>&gt;&gt;&gt; sys.version_info
sys.version_info(major=2, minor=7, micro=5, releaselevel='final', serial=0)
&gt;&gt;&gt; email.header.decode_header('=?utf-8?B?aXNhYmVsIG1hcsOtYSB0b2Npbm8gZ2FyY8OtYQ==?=\r\n\t&lt;isatocino22@hotmail.com&gt;')
[('=?utf-8?B?aXNhYmVsIG1hcsOtYSB0b2Npbm8gZ2FyY8OtYQ==?=\r\n\t&lt;isatocino22@hotmail.com&gt;', None)]
</snippet></ROW><ROW><id>20821594</id><snippet>y</snippet></ROW><ROW><id>20821594</id><snippet>done</snippet></ROW><ROW><id>20821594</id><snippet>break</snippet></ROW><ROW><id>20821594</id><snippet>else:</snippet></ROW><ROW><id>20821594</id><snippet>while done:
     quit = str(raw_input ("Do you want to quit? "))
     if quit == 'y' :
         done=False
     else:
         attack = str(raw_input("Does your elf attack the dragon? "))
         if attack=='y':
             print "Bad choice, you died."
             done=False
</snippet></ROW><ROW><id>20821594</id><snippet>y</snippet></ROW><ROW><id>20821672</id><snippet>x</snippet></ROW><ROW><id>20821672</id><snippet>float</snippet></ROW><ROW><id>20821672</id><snippet>int</snippet></ROW><ROW><id>20821672</id><snippet>x = float(x);
rate = (hours * x) + (minutes * x * (1.0/60)) + (seconds * x * (1.0/3600)) 
</snippet></ROW><ROW><id>20821694</id><snippet>https://www.rentometer.com/results?
</snippet></ROW><ROW><id>20821694</id><snippet>address=179%20Commonwealth%20Ave%2C%20Apt%201%2C%20Boston%2C%20MA&amp;
authenticity_token=%2BhrOEjFfwpI6f08lgiXB5%2B%2F9bWy0y20nVnQWn%2BKGgb0%3D&amp;
beds=1&amp;
latitude=42.351567&amp;
longitude=-71.07978300000002&amp;
price=&amp;utf8=%E2%9C%94
</snippet></ROW><ROW><id>20821694</id><snippet>from scrapy.spider import BaseSpider
from scrapy.http import FormRequest

class RentSpider(BaseSpider):
    name = 'rentometer'
    start_urls = [
        'http://www.rentometer.com'
    ]

    def parse(self, response):
        request = FormRequest.from_response(response=response,
            formxpath='//form',
            formdata={'address': '179 Commonwealth Ave, Apt 1, Boston, MA', 
                      'beds': '1',},
            callback=self.after_response)
        return [request]

    def after_response(self, response):
        with open('response_html', 'w')as f:
            f.write(response.body)
</snippet></ROW><ROW><id>20821694</id><snippet>$("#search_form").submit(function(t){var i,n;return e?void 0:
 (t.preventDefault(),i=$("#address_field").val(),n=new google.maps.Geocoder,
 n.geocode({address:i},function(t,i){var n;
 return i===google.maps.GeocoderStatus.OK?(n
 =t[0].geometry.location,$("#latitude").val(n.lat()),$("#longitude").val(n.lng())
</snippet></ROW><ROW><id>20821694</id><snippet>formdata={'address': '179 Commonwealth Ave, Apt 1, Boston, MA', 
          'beds': '1',
          'latitude': '42.351567',
          'longitude': '-71.07978300000002'},
</snippet></ROW><ROW><id>20821718</id><snippet>dirs</snippet></ROW><ROW><id>20821718</id><snippet>   for dir in dirs:
            ...
            dirs[:] = []  # don't recurse into directories.
</snippet></ROW><ROW><id>20821718</id><snippet>dirs</snippet></ROW><ROW><id>20821718</id><snippet>dirs[:] = []</snippet></ROW><ROW><id>20821733</id><snippet>addressStart = page.find("&lt;div id=\"address\"&gt;")
# or
addressStart = page.find('&lt;div id="address"&gt;')
</snippet></ROW><ROW><id>20821733</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(page)
for address in soup.find_all('div',id='address'): # returns a list, use find if you just want the first
    for info in address.find_all('div',class_='info'): # for attribute class, use class_ instead since class is a reserved word
        print info.string
</snippet></ROW><ROW><id>20821822</id><snippet>import os
def addToClipBoard(text):
    command = 'echo ' + text.strip() + '| clip'
    os.system(command)
</snippet></ROW><ROW><id>20821822</id><snippet>addToClipBoard(your_variable)
</snippet></ROW><ROW><id>20821903</id><snippet>.mat</snippet></ROW><ROW><id>20821903</id><snippet>scipy.io.whosmat</snippet></ROW><ROW><id>20821903</id><snippet>&gt;&gt;&gt; import numpy as np, scipy.io
&gt;&gt;&gt; md = {"A": np.random.random((100,3)), "B": np.zeros((1,2,3), dtype=int)}
&gt;&gt;&gt; scipy.io.savemat("test.mat", md)
&gt;&gt;&gt; scipy.io.whosmat("test.mat")
[('A', (100, 3), 'double'), ('B', (1, 2, 3), 'int32')]
</snippet></ROW><ROW><id>20821905</id><snippet>float('inf')</snippet></ROW><ROW><id>20821905</id><snippet>floatobject.c</snippet></ROW><ROW><id>20821905</id><snippet>else if (!Py_IS_FINITE(i)) {
    if (PyInt_Check(w) || PyLong_Check(w))
        /* If i is an infinity, its magnitude exceeds any
         * finite integer, so it doesn't matter which int we
         * compare i with.  If i is a NaN, similarly.
         */
        j = 0.0;
</snippet></ROW><ROW><id>20821905</id><snippet>10 ** 3000</snippet></ROW><ROW><id>20821905</id><snippet>float('inf')</snippet></ROW><ROW><id>20821939</id><snippet>...
bindings = ["PySide", "PyQt4"]

for name in bindings:
    try:
        binding = __import__(name)
        break
    except ImportError:
        continue


if binding is None:
    raise Exception("Ghost.py requires PySide or PyQt4")
...
</snippet></ROW><ROW><id>20821939</id><snippet>binding</snippet></ROW><ROW><id>20821939</id><snippet>import</snippet></ROW><ROW><id>20821939</id><snippet>import PySide

import PyQt4
</snippet></ROW><ROW><id>20821939</id><snippet>NameError</snippet></ROW><ROW><id>20821939</id><snippet>"Ghost.py requires PySide or PyQt4"</snippet></ROW><ROW><id>20822161</id><snippet>Open()</snippet></ROW><ROW><id>20822161</id><snippet>gui.quit()
</snippet></ROW><ROW><id>20822161</id><snippet>gui.destroy()
</snippet></ROW><ROW><id>20822161</id><snippet>event()</snippet></ROW><ROW><id>20822161</id><snippet>Open()</snippet></ROW><ROW><id>20822161</id><snippet>event()</snippet></ROW><ROW><id>20822161</id><snippet>data</snippet></ROW><ROW><id>20822161</id><snippet>mainloop</snippet></ROW><ROW><id>20822286</id><snippet>[{
  "id": null,
  "name": null,
  "type": "/music/genre",
  "subgenre": [{
    "id": null,
    "name": null,
    "subgenre": [{
      "id": null,
      "name": null,
      "limit": 10
    }]
  }],
  "limit": 10
}]
</snippet></ROW><ROW><id>20822286</id><snippet>/music/genre</snippet></ROW><ROW><id>20822286</id><snippet>[{
  "id": null,
  "name": null,
  "type": "/music/genre",
  "subgenre": [{
    "id": null,
    "name": null,
    "limit": 300
  }],
  "limit": 300
}]
</snippet></ROW><ROW><id>20822339</id><snippet>def parse(self, response):
   hxs = HtmlXPathSelector(response)
   for tb in hxs.xpath('//table'):

       heading = tb.xpath('.//thead/tr/th/a/text()').extract()[0]

       for td in tb.xpath('.//tbody/tr'):
          il = WebsiteLoader(response=response, selector=td)
          ...
          il.add_value('heading', heading)
          yield il.load_item()
</snippet></ROW><ROW><id>20822451</id><snippet>self</snippet></ROW><ROW><id>20822451</id><snippet>aggregate()</snippet></ROW><ROW><id>20822451</id><snippet>objects</snippet></ROW><ROW><id>20822451</id><snippet>def score(self):
    return self.vote_set.aggregate(sum=Sum('val'))['sum']
</snippet></ROW><ROW><id>20822508</id><snippet>listview</snippet></ROW><ROW><id>20822508</id><snippet>r"^(?P&lt;slug&gt;[-_\w]+)/$"</snippet></ROW><ROW><id>20822508</id><snippet>oferto_detail</snippet></ROW><ROW><id>20822508</id><snippet>listview/$</snippet></ROW><ROW><id>20822508</id><snippet>url(
regex=r"^(?P&lt;slug&gt;[-_\w]+)/$",
view=OfertoDetailView.as_view(),
name="oferto_detail"
),

url(
regex=r"^listview/$",
view=OfertoListView.as_view(),
name="oferto_listview"
),
</snippet></ROW><ROW><id>20822563</id><snippet>* git clone git@gitorious.org:pyside/shiboken.git
* cd shiboken
* mkdir build
* cd build
* cmake -DCMAKE_INSTALL_PREFIX="/usr/local" ..
* n(make)
* n(make) install
</snippet></ROW><ROW><id>20822563</id><snippet>* git clone git@gitorious.org:pyside/pyside.git
* edit the PySide/QtGui/typesystem_gui_common.xml file:
</snippet></ROW><ROW><id>20822563</id><snippet>git diff</snippet></ROW><ROW><id>20822563</id><snippet>diff --git a/PySide/QtGui/CMakeLists.txt b/PySide/QtGui/CMakeLists.txt
index 7625634..172f321 100644
--- a/PySide/QtGui/CMakeLists.txt
+++ b/PySide/QtGui/CMakeLists.txt
@@ -275,6 +275,7 @@ ${CMAKE_CURRENT_BINARY_DIR}/PySide/QtGui/qshowevent_wrapper.cpp
 ${CMAKE_CURRENT_BINARY_DIR}/PySide/QtGui/qsizepolicy_wrapper.cpp
 ${CMAKE_CURRENT_BINARY_DIR}/PySide/QtGui/qslider_wrapper.cpp
 ${CMAKE_CURRENT_BINARY_DIR}/PySide/QtGui/qsortfilterproxymodel_wrapper.cpp
+${CMAKE_CURRENT_BINARY_DIR}/PySide/QtGui/qidentityproxymodel_wrapper.cpp
 ${CMAKE_CURRENT_BINARY_DIR}/PySide/QtGui/qsound_wrapper.cpp
 ${CMAKE_CURRENT_BINARY_DIR}/PySide/QtGui/qspaceritem_wrapper.cpp
 ${CMAKE_CURRENT_BINARY_DIR}/PySide/QtGui/qspinbox_wrapper.cpp
diff --git a/PySide/QtGui/typesystem_gui_common.xml b/PySide/QtGui/typesystem_gui_common.xml
index 711d7cc..4980fa4 100644
--- a/PySide/QtGui/typesystem_gui_common.xml
+++ b/PySide/QtGui/typesystem_gui_common.xml
@@ -4571,6 +4571,16 @@
     &lt;modify-function signature="clear()" remove="all"/&gt;
     &lt;modify-function signature="filterChanged()" remove="all"/&gt;
     &lt;!--### End of obsolete section --&gt;
+&lt;/object-type&gt;
+  &lt;object-type name="QIdentityProxyModel"&gt;
+    &lt;extra-includes&gt;
+      &lt;include file-name="QItemSelection" location="global"/&gt;
+    &lt;/extra-includes&gt;
+    &lt;modify-function signature="setSourceModel(QAbstractItemModel*)"&gt;
+      &lt;modify-argument index="1"&gt;
+        &lt;reference-count action="set"/&gt;
+      &lt;/modify-argument&gt;
+    &lt;/modify-function&gt;
   &lt;/object-type&gt;
   &lt;object-type name="QSlider"&gt;
       &lt;enum-type name="TickPosition" /&gt;
</snippet></ROW><ROW><id>20822563</id><snippet>* mkdir build
* cd build
* cmake -DCMAKE_INSTALL_PREFIX="/usr/local" -DCMAKE_PREFIX_PATH="/usr/local" ..
* (n)make
* (n)make install
</snippet></ROW><ROW><id>20823081</id><snippet>r = requests.get(&lt;your url&gt;)
for x in r.iter_lines():
    // do something...
</snippet></ROW><ROW><id>20823081</id><snippet>import urllib2
...
r = urllib2.urlopen(&lt;your url &gt;)
for x in r:
    // do something...
</snippet></ROW><ROW><id>20823336</id><snippet>sys.path</snippet></ROW><ROW><id>20823336</id><snippet>import sys; sys.path.insert(0, '../Primality Functions Folder')
from isPrime import isPrime
</snippet></ROW><ROW><id>20823336</id><snippet>setup.py</snippet></ROW><ROW><id>20823336</id><snippet>isPrime.py</snippet></ROW><ROW><id>20823336</id><snippet>from distutils.core import setup

NAME = 'isPrime'
setup(name=NAME, version='0.0.1', py_modules=[NAME])
</snippet></ROW><ROW><id>20823336</id><snippet>$ python setup.py install
</snippet></ROW><ROW><id>20823336</id><snippet>from isPrime import isPrime
</snippet></ROW><ROW><id>20823336</id><snippet>project_euler_utils</snippet></ROW><ROW><id>20823336</id><snippet>setup.py</snippet></ROW><ROW><id>20823336</id><snippet>project_euler_utils</snippet></ROW><ROW><id>20823336</id><snippet>from distutils.core import setup

NAME = 'project_euler_utils'
setup(name=NAME, version='0.0.1', packages=[NAME])
</snippet></ROW><ROW><id>20823336</id><snippet>pip install project_euler_utils</snippet></ROW><ROW><id>20823336</id><snippet>from project_euler_utils.isprime import isprime
</snippet></ROW><ROW><id>20823336</id><snippet>"C:\Users\Owner\Documents\Primality Functions Folder"</snippet></ROW><ROW><id>20823336</id><snippet>Syntax Error: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape.</snippet></ROW><ROW><id>20823336</id><snippet>r'C:\Users\Owner...'</snippet></ROW><ROW><id>20823336</id><snippet>r''</snippet></ROW><ROW><id>20823336</id><snippet>u'\U0001F385'</snippet></ROW><ROW><id>20823336</id><snippet>U+1F385</snippet></ROW><ROW><id>20823353</id><snippet>curl -i 'http://192.168.9.70:5000/v2.0/tokens' -X POST -H "Content-Type: application/json" -H "Accept: application/json" -H "User-Agent: python-novaclient" -d '{"auth": {"tenantName": "TENANT", "passwordCredentials": {"username": "USERNAME", "password": "PASSWORD"}}}'
</snippet></ROW><ROW><id>20823353</id><snippet>sudo apt-get install pip
sudo pip install python-keystoneclient
</snippet></ROW><ROW><id>20823452</id><snippet>file.write()</snippet></ROW><ROW><id>20823452</id><snippet>Spl.write()</snippet></ROW><ROW><id>20823452</id><snippet>"rw+"</snippet></ROW><ROW><id>20823452</id><snippet>"r+"</snippet></ROW><ROW><id>20823452</id><snippet>file.seek()</snippet></ROW><ROW><id>20823452</id><snippet>file.truncate()</snippet></ROW><ROW><id>20823536</id><snippet>from time import sleep
MAX_TRIES = 6

# ... your other code ...

for i in xrange(MAX_TRIES):
    proc = subprocess.Popen(shell_script, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = proc.communicate()
    if stderr:
       print "Shell script gave some error..."
       print stderr
       sleep(0.05) # delay for 50 ms
    else:
       print stdout
       print "end" # Shell script ran fine.
       break
</snippet></ROW><ROW><id>20823630</id><snippet>global</snippet></ROW><ROW><id>20823630</id><snippet>txt</snippet></ROW><ROW><id>20823630</id><snippet>#!/usr/bin/env python

class ReadFile(object): # Classes have titlecase names and inherit from object
    def __init__(self):
        self.count = 0
        self.txt = None # Initialise the class member here

    def open(self, filename): # file is a Python built-in. Prefer 'filename'
        self.txt = open(filename, "r")

    def cnt(self):
        line = self.txt.readline() # str is a Python built-in. Prefer 'line'.
                                   # Reference the class member with 'self.'
        line = line.strip() # Remove any trailing whitespace
        while line != "end": # TODO: What happens if this line doesn't appear?
            self.count += 1
            line = self.txt.readline().strip()

    def printline(self):
        print "the number of lines = %d" % self.count

obj = ReadFile()
obj.open(raw_input("which file do you want to read? \n").strip())
obj.cnt()
obj.printline()

'''
end
'''
</snippet></ROW><ROW><id>20823670</id><snippet>find_full_word.append((n_term, "PERSON"))
</snippet></ROW><ROW><id>20823909</id><snippet>locals</snippet></ROW><ROW><id>20823909</id><snippet>list_country = ['dict_DAN', 'dict_FRA']

dict_DAN ={ 'APPROVEDTXT':  'GODKENDT', 'REVIEWTXT':  'KONTROLLERET AF'}
dict_FRA ={ 'APPROVEDTXT':  'Aprov', 'REVIEWTXT': 'Controllier'}

for country in list_country:
    print country

    for (key,item) in locals()[country].items():
        print key,item
</snippet></ROW><ROW><id>20823909</id><snippet>for dict_x in (dict_DAN, dict_FRA):
    for (key, value) in dict_x.items():
         print key, item
</snippet></ROW><ROW><id>20824546</id><snippet>for i in range(1, entered_number):    
    if i % 2 != 0 and i % 3 != 0 and i % 5 != 0:
        print("The number", i, "is ok.")
</snippet></ROW><ROW><id>20824546</id><snippet>and</snippet></ROW><ROW><id>20824546</id><snippet>The number 10 is ok.</snippet></ROW><ROW><id>20824546</id><snippet>The number ... is ok.</snippet></ROW><ROW><id>20824748</id><snippet>list(session.query(cls))
</snippet></ROW><ROW><id>20825124</id><snippet>class BaseModel(object):

    @classmethod
    def _get_keys(cls):
        return sa.orm.class_mapper(cls).c.keys()

    def get_dict(self):
        d = {}
        for k in self._get_keys():
            d[k] = getattr(self, k)
        return d
</snippet></ROW><ROW><id>20825291</id><snippet>B(t) = P1*(1-t)**2 + 2*P2*(1-t)*t + P3*t**2
</snippet></ROW><ROW><id>20825291</id><snippet>B</snippet></ROW><ROW><id>20825291</id><snippet>t</snippet></ROW><ROW><id>20825291</id><snippet>B'(t) = -2*P1*(1-t) + 2*P2*(1-2*t) + 2*P3*t
      = 2*(P1 - 2*P2 + P3)*t + 2*(-P1 + P2)
</snippet></ROW><ROW><id>20825291</id><snippet>V</snippet></ROW><ROW><id>20825291</id><snippet>B'(t) = V
</snippet></ROW><ROW><id>20825291</id><snippet>t</snippet></ROW><ROW><id>20825291</id><snippet>t = ts</snippet></ROW><ROW><id>20825291</id><snippet>V</snippet></ROW><ROW><id>20825291</id><snippet>B(ts)</snippet></ROW><ROW><id>20825291</id><snippet>B'(t)</snippet></ROW><ROW><id>20825291</id><snippet>V</snippet></ROW><ROW><id>20825291</id><snippet>X</snippet></ROW><ROW><id>20825291</id><snippet>Y</snippet></ROW><ROW><id>20825291</id><snippet>X = (a,b)</snippet></ROW><ROW><id>20825291</id><snippet>Y = (c,d)</snippet></ROW><ROW><id>20825291</id><snippet>X</snippet></ROW><ROW><id>20825291</id><snippet>Y</snippet></ROW><ROW><id>20825291</id><snippet>a*c + b*d
</snippet></ROW><ROW><id>20825291</id><snippet>X</snippet></ROW><ROW><id>20825291</id><snippet>Y</snippet></ROW><ROW><id>20825291</id><snippet>X</snippet></ROW><ROW><id>20825291</id><snippet>Y_perp</snippet></ROW><ROW><id>20825291</id><snippet>Y_perp</snippet></ROW><ROW><id>20825291</id><snippet>Y</snippet></ROW><ROW><id>20825291</id><snippet>Y = (a,b)</snippet></ROW><ROW><id>20825291</id><snippet>Y_perp = (-b, a)</snippet></ROW><ROW><id>20825291</id><snippet>Y</snippet></ROW><ROW><id>20825291</id><snippet>Y_perp</snippet></ROW><ROW><id>20825291</id><snippet>a*(-b) + b*(a) = 0
</snippet></ROW><ROW><id>20825291</id><snippet>B'(t) = (a*t+b, c*t+d)
V = (e, f)
</snippet></ROW><ROW><id>20825291</id><snippet>B'(t)</snippet></ROW><ROW><id>20825291</id><snippet>V</snippet></ROW><ROW><id>20825291</id><snippet>B'(t)</snippet></ROW><ROW><id>20825291</id><snippet>V_perp</snippet></ROW><ROW><id>20825291</id><snippet>dot product((a*t+b, c*t+d), (-f, e)) = 0
-(a*t+b)*f + (c*t+d)*e = 0
</snippet></ROW><ROW><id>20825291</id><snippet>a</snippet></ROW><ROW><id>20825291</id><snippet>b</snippet></ROW><ROW><id>20825291</id><snippet>c</snippet></ROW><ROW><id>20825291</id><snippet>d</snippet></ROW><ROW><id>20825291</id><snippet>e</snippet></ROW><ROW><id>20825291</id><snippet>f</snippet></ROW><ROW><id>20825291</id><snippet>t</snippet></ROW><ROW><id>20825291</id><snippet>t</snippet></ROW><ROW><id>20825291</id><snippet>B(t)</snippet></ROW><ROW><id>20825291</id><snippet>P1</snippet></ROW><ROW><id>20825291</id><snippet>P3</snippet></ROW><ROW><id>20825349</id><snippet>datetime.datetime</snippet></ROW><ROW><id>20825349</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>20825349</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; now
datetime.datetime(2013, 12, 29, 21, 54, 30, 836000)
&gt;&gt;&gt; now - datetime.timedelta(days=1)
datetime.datetime(2013, 12, 28, 21, 54, 30, 836000)
</snippet></ROW><ROW><id>20825349</id><snippet>import datetime

cars = MyClass.objects.filter(date__lt=datetime.datetime.now() - datetime.timedelta(days=1))
</snippet></ROW><ROW><id>20825349</id><snippet>timezone.now()</snippet></ROW><ROW><id>20825349</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>20825349</id><snippet>import datetime
from django.utils import timezone

cars = MyClass.objects.filter(date__lt=timezone.now() - datetime.timedelta(days=1))
</snippet></ROW><ROW><id>20825740</id><snippet>my_polynomials = itertools.product(*([range(1,11)]*10))</snippet></ROW><ROW><id>20825740</id><snippet>for p in my_polynomials:
    do_something_with_polynomial(p)
</snippet></ROW><ROW><id>20825952</id><snippet>sys.argv</snippet></ROW><ROW><id>20826125</id><snippet>import lxml.html

root = lxml.html.fromstring(html)
matched = root.cssselect('#__VIEWSTATE')
if matched:
    value = matched[0].get('value')
</snippet></ROW><ROW><id>20826125</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(html)
matched = soup.select('#__VIEWSTATE')
if matched:
    value = matched[0].get('value')
</snippet></ROW><ROW><id>20826242</id><snippet>hajnalgroup.com</snippet></ROW><ROW><id>20826242</id><snippet>http://hajnalgroup.com</snippet></ROW><ROW><id>20826242</id><snippet>&gt;&gt;&gt; import socket
&gt;&gt;&gt; socket.gethostbyname("http://hajnalgroup.com")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
socket.gaierror: [Errno 11004] getaddrinfo failed
&gt;&gt;&gt; socket.gethostbyname("hajnalgroup.com")
'89.134.187.222'
</snippet></ROW><ROW><id>20826242</id><snippet>host = "http://hajnalgroup.com"
</snippet></ROW><ROW><id>20826242</id><snippet>host = "hajnalgroup.com"
</snippet></ROW><ROW><id>20826242</id><snippet>range</snippet></ROW><ROW><id>20826242</id><snippet>int</snippet></ROW><ROW><id>20826242</id><snippet>&gt;&gt;&gt; range(1, 10)
[1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; range(1, "10")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: range() integer end argument expected, got str.
</snippet></ROW><ROW><id>20826242</id><snippet>conn = "100"</snippet></ROW><ROW><id>20826242</id><snippet>conn = 100</snippet></ROW><ROW><id>20826379</id><snippet>-</snippet></ROW><ROW><id>20826379</id><snippet>class ObjectAdmin(admin.ModelAdmin):
    ordering = ['-order']
    #            ^
</snippet></ROW><ROW><id>20826379</id><snippet>ordering</snippet></ROW><ROW><id>20826387</id><snippet>O(n log n)</snippet></ROW><ROW><id>20826387</id><snippet>O(n)</snippet></ROW><ROW><id>20826387</id><snippet>np.unique</snippet></ROW><ROW><id>20826387</id><snippet>import numpy as np

def nlargest_indices(arr, n):
    uniques = np.unique(arr)
    threshold = uniques[-n]
    return np.where(arr &gt;= threshold)

full = np.random.random((1002,1004))
x, y = nlargest_indices(full, 10)
print(full[x, y])
print(x)
# [  2   7 217 267 299 683 775 825 853]
print(y)
# [645 621 132 242 556 439 621 884 367]
</snippet></ROW><ROW><id>20826387</id><snippet>nlargest_indices</snippet></ROW><ROW><id>20826387</id><snippet>def nlargest_indices_orig(full, n):
    full = full.copy()
    x = np.zeros(n)
    y = np.zeros(n)

    for idx in range(n):
        x[idx] = np.unravel_index(full.argmax(), full.shape)[0]
        y[idx] = np.unravel_index(full.argmax(), full.shape)[1]
        full[full == full.max()] = 0.
    return x, y


In [97]: %timeit nlargest_indices_orig(full, 500)
1 loops, best of 3: 5 s per loop

In [98]: %timeit nlargest_indices(full, 500)
10 loops, best of 3: 133 ms per loop
</snippet></ROW><ROW><id>20826387</id><snippet>nlargest_indices_orig</snippet></ROW><ROW><id>20826387</id><snippet>full</snippet></ROW><ROW><id>20826387</id><snippet>def base(full, n):
    full = full.copy()

In [102]: %timeit base(full, 500)
100 loops, best of 3: 4.11 ms per loop
</snippet></ROW><ROW><id>20826387</id><snippet>nlargest_indices_orig</snippet></ROW><ROW><id>20826387</id><snippet>nlargest_indices</snippet></ROW><ROW><id>20826387</id><snippet>nlargest_indices_orig</snippet></ROW><ROW><id>20826387</id><snippet>arr</snippet></ROW><ROW><id>20826387</id><snippet>nlargest_indices</snippet></ROW><ROW><id>20826387</id><snippet>n</snippet></ROW><ROW><id>20826387</id><snippet>arr</snippet></ROW><ROW><id>20826387</id><snippet>x</snippet></ROW><ROW><id>20826387</id><snippet>y</snippet></ROW><ROW><id>20826387</id><snippet>nlargest_indices_orig</snippet></ROW><ROW><id>20826387</id><snippet>n</snippet></ROW><ROW><id>20826387</id><snippet>arr</snippet></ROW><ROW><id>20826387</id><snippet>x</snippet></ROW><ROW><id>20826387</id><snippet>y</snippet></ROW><ROW><id>20826387</id><snippet>x</snippet></ROW><ROW><id>20826387</id><snippet>y</snippet></ROW><ROW><id>20826468</id><snippet>tt.start</snippet></ROW><ROW><id>20826468</id><snippet>int</snippet></ROW><ROW><id>20826468</id><snippet>ceiling</snippet></ROW><ROW><id>20826468</id><snippet>self.start = ceiling(time.time())
</snippet></ROW><ROW><id>20826468</id><snippet>self.start</snippet></ROW><ROW><id>20826468</id><snippet>self.start_time</snippet></ROW><ROW><id>20826699</id><snippet>csrf_token</snippet></ROW><ROW><id>20826699</id><snippet>django.core.context_processors.csrf</snippet></ROW><ROW><id>20826699</id><snippet>{{ csrf_token }}
</snippet></ROW><ROW><id>20826699</id><snippet>{% csrf_token %}</snippet></ROW><ROW><id>20826713</id><snippet>i=i[4:]
</snippet></ROW><ROW><id>20826713</id><snippet>i</snippet></ROW><ROW><id>20826713</id><snippet>i[4:]</snippet></ROW><ROW><id>20826713</id><snippet>i</snippet></ROW><ROW><id>20826713</id><snippet>i[4:]</snippet></ROW><ROW><id>20826713</id><snippet>i</snippet></ROW><ROW><id>20826713</id><snippet>i[:]=i[4:]
</snippet></ROW><ROW><id>20826946</id><snippet>user</snippet></ROW><ROW><id>20826946</id><snippet>from __future__ import absolute_import

from celery.decorators import task
from django.contrib.auth import get_user_model

@task()
def user_send_activation_email(user_id):
    user = get_user_model().objects.get(pk=user_id)
    user.send_activation_email()
</snippet></ROW><ROW><id>20826946</id><snippet>user_send_activation_email.delay(user_id=user.pk)
</snippet></ROW><ROW><id>20827001</id><snippet>package</snippet></ROW><ROW><id>20827001</id><snippet>__init__.py</snippet></ROW><ROW><id>20827001</id><snippet>from .Subpackage import *
__all__ = ['MODULE1', 'MODULE2', 'MODULE3', 'MODULE4',
           'modulea', 'moduleb']
print('Package', __name__, 'imports', __all__)
</snippet></ROW><ROW><id>20827001</id><snippet>Subpackage</snippet></ROW><ROW><id>20827001</id><snippet>MODULE1.py</snippet></ROW><ROW><id>20827001</id><snippet>MODULE2.py</snippet></ROW><ROW><id>20827001</id><snippet>MODULE3.py</snippet></ROW><ROW><id>20827001</id><snippet>MODULE4.py</snippet></ROW><ROW><id>20827001</id><snippet>def f():
    return __name__

print('Module', __name__, 'imported')
</snippet></ROW><ROW><id>20827001</id><snippet>Subpackage</snippet></ROW><ROW><id>20827001</id><snippet>__init__.py</snippet></ROW><ROW><id>20827001</id><snippet>__all__ = ['modulea', 'moduleb']
print('Package', __name__, 'imports', __all__)
</snippet></ROW><ROW><id>20827001</id><snippet>modulea.py</snippet></ROW><ROW><id>20827001</id><snippet>moduleb.py</snippet></ROW><ROW><id>20827001</id><snippet>def f():
    return __name__

print('Module', __name__, 'imported')
</snippet></ROW><ROW><id>20827001</id><snippet>a.py</snippet></ROW><ROW><id>20827001</id><snippet>#!python3
from package import *

print('-------------------')
print(MODULE1.f())
print(MODULE2.f())
print(MODULE3.f())
print(MODULE4.f())
print(modulea.f())
print(moduleb.f())
</snippet></ROW><ROW><id>20827001</id><snippet>py a.py</snippet></ROW><ROW><id>20827001</id><snippet>c:\_Python\wakamdr\so20824045&gt;py a.py
Package package.Subpackage imports ['modulea', 'moduleb']
Module package.Subpackage.modulea imported
Module package.Subpackage.moduleb imported
Package package imports ['MODULE1', 'MODULE2', 'MODULE3', 'MODULE4', 'modulea',
'moduleb']
Module package.MODULE1 imported
Module package.MODULE2 imported
Module package.MODULE3 imported
Module package.MODULE4 imported
-------------------
package.MODULE1
package.MODULE2
package.MODULE3
package.MODULE4
package.Subpackage.modulea
package.Subpackage.moduleb
</snippet></ROW><ROW><id>20827020</id><snippet>date</snippet></ROW><ROW><id>20827020</id><snippet>date</snippet></ROW><ROW><id>20827020</id><snippet>date</snippet></ROW><ROW><id>20827029</id><snippet>varName</snippet></ROW><ROW><id>20827029</id><snippet>extractParam</snippet></ROW><ROW><id>20827029</id><snippet>extractParam</snippet></ROW><ROW><id>20827029</id><snippet>range(len(</snippet></ROW><ROW><id>20827029</id><snippet>strip</snippet></ROW><ROW><id>20827029</id><snippet>split</snippet></ROW><ROW><id>20827029</id><snippet>sline</snippet></ROW><ROW><id>20827029</id><snippet>line</snippet></ROW><ROW><id>20827029</id><snippet>words</snippet></ROW><ROW><id>20827029</id><snippet>sline</snippet></ROW><ROW><id>20827029</id><snippet>namesLikeThis</snippet></ROW><ROW><id>20827029</id><snippet>NamesLikeThis</snippet></ROW><ROW><id>20827029</id><snippet>names_like_this</snippet></ROW><ROW><id>20827029</id><snippet>dict</snippet></ROW><ROW><id>20827029</id><snippet>names</snippet></ROW><ROW><id>20827029</id><snippet>line</snippet></ROW><ROW><id>20827029</id><snippet>value</snippet></ROW><ROW><id>20827029</id><snippet>result</snippet></ROW><ROW><id>20827029</id><snippet>def extract_params(line, names):
    words = line.split()
    result = {}
    for name in names:
        value = 0
        for word in words:
            maybe_name, equals, maybe_value = word.partition('=')
            if maybe_name == name and equals == '=':
                value = maybe_value
        result[name] = value
    return result
</snippet></ROW><ROW><id>20827179</id><snippet>def foo(start, stop=None, step=1):
    if stop == None:
        start, stop = 0, start
    #rest of the code goes here
</snippet></ROW><ROW><id>20827179</id><snippet>foo(5) == foo(0,5,1)</snippet></ROW><ROW><id>20827179</id><snippet>foo(1,5) == foo(1,5,1)</snippet></ROW><ROW><id>20827212</id><snippet>while true:</snippet></ROW><ROW><id>20827212</id><snippet>import thread</snippet></ROW><ROW><id>20827212</id><snippet>thread.start_new_thread(ddos, ())</snippet></ROW><ROW><id>20827884</id><snippet>x = raw_input('Type a word')
y = raw_input('Type another word')


if x:
    print x[-1] in y
</snippet></ROW><ROW><id>20827919</id><snippet>train</snippet></ROW><ROW><id>20827919</id><snippet>&gt;&gt;&gt; train = [('I love this sandwich.', 'pos'),
('This is an amazing place!', 'pos'),
('I feel very good about these beers.', 'pos'),
('This is my best work.', 'pos'),
("What an awesome view", 'pos'),
('I do not like this restaurant', 'neg'),
('I am tired of this stuff.', 'neg'),
("I can't deal with this", 'neg'),
('He is my sworn enemy!', 'neg'),
('My boss is horrible.', 'neg')]
</snippet></ROW><ROW><id>20827919</id><snippet>&gt;&gt;&gt; from nltk.tokenize import word_tokenize # or use some other tokenizer
&gt;&gt;&gt; all_words = set(word.lower() for passage in train for word in word_tokenize(passage[0]))
&gt;&gt;&gt; t = [({word: (word in word_tokenize(x[0])) for word in all_words}, x[1]) for x in train]
</snippet></ROW><ROW><id>20827919</id><snippet>&gt;&gt;&gt; t
[({'this': True, 'love': True, 'deal': False, 'tired': False, 'feel': False, 'is': False, 'am': False, 'an': False, 'sandwich': True, 'ca': False, 'best': False, '!': False, 'what': False, '.': True, 'amazing': False, 'horrible': False, 'sworn': False, 'awesome': False, 'do': False, 'good': False, 'very': False, 'boss': False, 'beers': False, 'not': False, 'with': False, 'he': False, 'enemy': False, 'about': False, 'like': False, 'restaurant': False, 'these': False, 'of': False, 'work': False, "n't": False, 'i': False, 'stuff': False, 'place': False, 'my': False, 'view': False}, 'pos'), . . .]
</snippet></ROW><ROW><id>20827919</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; classifier = nltk.NaiveBayesClassifier.train(t)
&gt;&gt;&gt; classifier.show_most_informative_features()
Most Informative Features
                    this = True              neg : pos    =      2.3 : 1.0
                    this = False             pos : neg    =      1.8 : 1.0
                      an = False             neg : pos    =      1.6 : 1.0
                       . = True              pos : neg    =      1.4 : 1.0
                       . = False             neg : pos    =      1.4 : 1.0
                 awesome = False             neg : pos    =      1.2 : 1.0
                      of = False             pos : neg    =      1.2 : 1.0
                    feel = False             neg : pos    =      1.2 : 1.0
                   place = False             neg : pos    =      1.2 : 1.0
                horrible = False             pos : neg    =      1.2 : 1.0
</snippet></ROW><ROW><id>20827919</id><snippet>&gt;&gt;&gt; test_sentence = "This is the best band I've ever heard!"
</snippet></ROW><ROW><id>20827919</id><snippet>&gt;&gt;&gt; test_sent_features = {word.lower(): (word in word_tokenize(test_sentence.lower())) for word in all_words}
</snippet></ROW><ROW><id>20827919</id><snippet>&gt;&gt;&gt; test_sent_features
{'love': False, 'deal': False, 'tired': False, 'feel': False, 'is': True, 'am': False, 'an': False, 'sandwich': False, 'ca': False, 'best': True, '!': True, 'what': False, 'i': True, '.': False, 'amazing': False, 'horrible': False, 'sworn': False, 'awesome': False, 'do': False, 'good': False, 'very': False, 'boss': False, 'beers': False, 'not': False, 'with': False, 'he': False, 'enemy': False, 'about': False, 'like': False, 'restaurant': False, 'this': True, 'of': False, 'work': False, "n't": False, 'these': False, 'stuff': False, 'place': False, 'my': False, 'view': False}
</snippet></ROW><ROW><id>20827919</id><snippet>&gt;&gt;&gt; classifier.classify(test_sent_features)
'pos' # note 'best' == True in the sentence features above
</snippet></ROW><ROW><id>20827920</id><snippet>save</snippet></ROW><ROW><id>20827920</id><snippet>return</snippet></ROW><ROW><id>20827920</id><snippet>def save(self, *args, **kwargs):
    if not self.pk:
        #do something
    super(self, ModelName).save(*args, **kwargs)
</snippet></ROW><ROW><id>20827920</id><snippet>pk</snippet></ROW><ROW><id>20827920</id><snippet>def do_something_only_newly_created_objects(sender, **kwargs):
   if kwargs['created']:
      # do_something()

post_save.connect(do_something_only_newly_created_objects, sender=YourModel)
</snippet></ROW><ROW><id>20827977</id><snippet>$</snippet></ROW><ROW><id>20827977</id><snippet>re.compile("[a-z]{3}(_[a-z]{3})*$")
</snippet></ROW><ROW><id>20827977</id><snippet>^</snippet></ROW><ROW><id>20827977</id><snippet>match</snippet></ROW><ROW><id>20828302</id><snippet>argparse.Namespace</snippet></ROW><ROW><id>20828302</id><snippet>s</snippet></ROW><ROW><id>20828302</id><snippet>args.s</snippet></ROW><ROW><id>20828302</id><snippet>vars(args)</snippet></ROW><ROW><id>20828302</id><snippet>vars(args)['s']</snippet></ROW><ROW><id>20828366</id><snippet>MyClass::some_later_event()</snippet></ROW><ROW><id>20828366</id><snippet>MyClass</snippet></ROW><ROW><id>20828366</id><snippet>MyClass.event_in(seconds, value)</snippet></ROW><ROW><id>20828366</id><snippet>BOOST_PYTHON_MODULE(example)
{
  PyEval_InitThreads(); // Initialize GIL to support non-python threads.
  // ...
}
</snippet></ROW><ROW><id>20828366</id><snippet>/// @brief RAII class used to lock and unlock the GIL.
class gil_lock
{
public:
  gil_lock()  { state_ = PyGILState_Ensure(); }
  ~gil_lock() { PyGILState_Release(state_);   }
private:
  PyGILState_STATE state_;
};
</snippet></ROW><ROW><id>20828366</id><snippet>boost::signals2::signal</snippet></ROW><ROW><id>20828366</id><snippet>boost::signals2::signal</snippet></ROW><ROW><id>20828366</id><snippet>self</snippet></ROW><ROW><id>20828366</id><snippet>__call__</snippet></ROW><ROW><id>20828366</id><snippet>MyClass</snippet></ROW><ROW><id>20828366</id><snippet>/// @brief Mockup class.
class MyClass
{
public:
  /// @brief Connect a slot to the signal.
  template &lt;typename Slot&gt;
  void connect_slot(const Slot&amp; slot)
  {
    signal_.connect(slot);
  }

  /// @brief Send an event to the signal.
  void event(int value)
  {
    signal_(value);
  }

private:
  boost::signals2::signal&lt;void(int)&gt; signal_;
};
</snippet></ROW><ROW><id>20828366</id><snippet>MyClass</snippet></ROW><ROW><id>20828366</id><snippet>MyClass</snippet></ROW><ROW><id>20828366</id><snippet>MyClass</snippet></ROW><ROW><id>20828366</id><snippet>boost::shared_ptr</snippet></ROW><ROW><id>20828366</id><snippet>BOOST_PYTHON_MODULE(example)
{
  PyEval_InitThreads(); // Initialize GIL to support non-python threads.

  namespace python = boost::python;
  python::class_&lt;MyClass, boost::shared_ptr&lt;MyClass&gt;,
                 boost::noncopyable&gt;("MyClass")
    .def("event", &amp;MyClass::event)
    // ...
    ;
}
</snippet></ROW><ROW><id>20828366</id><snippet>boost::signals2::signal</snippet></ROW><ROW><id>20828366</id><snippet>boost::signals2::signal</snippet></ROW><ROW><id>20828366</id><snippet>signal</snippet></ROW><ROW><id>20828366</id><snippet>signal</snippet></ROW><ROW><id>20828366</id><snippet>boost::python::object</snippet></ROW><ROW><id>20828366</id><snippet>boost::python::object</snippet></ROW><ROW><id>20828366</id><snippet>shared_ptr</snippet></ROW><ROW><id>20828366</id><snippet>signal</snippet></ROW><ROW><id>20828366</id><snippet>shared_ptr</snippet></ROW><ROW><id>20828366</id><snippet>boost::python::object</snippet></ROW><ROW><id>20828366</id><snippet>/// @brief Helepr type that will manage the GIL for a python slot.
///
/// @detail GIL management:
///           * Caller must own GIL when constructing py_slot, as 
///             the python::object will be copy-constructed (increment
///             reference to the object)
///           * The newly constructed python::object will be managed
///             by a shared_ptr.  Thus, it may be copied without owning
///             the GIL.  However, a custom deleter will acquire the
///             GIL during deletion.
///           * When py_slot is invoked (operator()), it will acquire
///             the GIL then delegate to the managed python::object.
struct py_slot
{
public:

  /// @brief Constructor that assumes the caller has the GIL locked.
  py_slot(const boost::python::object&amp; object)
    : object_(
        new boost::python::object(object),  // GIL locked, so copy.
        [](boost::python::object* object)   // Delete needs GIL.
        {
          gil_lock lock;
          delete object;
        }
      )
  {}

  // Use default copy-constructor and assignment-operator.
  py_slot(const py_slot&amp;) = default;
  py_slot&amp; operator=(const py_slot&amp;) = default;

  template &lt;typename ...Args&gt;
  void operator()(Args... args)
  {
    // Lock the GIL as the python object is going to be invoked.
    gil_lock lock;
    (*object_)(args...); 
  }

private:
  boost::shared_ptr&lt;boost::python::object&gt; object_;
};
</snippet></ROW><ROW><id>20828366</id><snippet>/// @brief MyClass::connect_slot helper.
template &lt;typename ...Args&gt;
void MyClass_connect_slot(
  MyClass&amp; self,
  boost::python::object object)
{
  py_slot slot(object); // Adapt object to a py_slot for GIL management.

  // Using a lambda here allows for the args to be expanded automatically.
  // If bind was used, the placeholders would need to be explicitly added.
  self.connect_slot([slot](Args... args) mutable { slot(args...); });
}
</snippet></ROW><ROW><id>20828366</id><snippet>python::class_&lt;MyClass, boost::shared_ptr&lt;MyClass&gt;,
               boost::noncopyable&gt;("MyClass")
  .def("connect_slot", &amp;MyClass_connect_slot&lt;int&gt;)
  .def("event",        &amp;MyClass::event)
  // ...
  ;
</snippet></ROW><ROW><id>20828366</id><snippet>/// @brief Sleep then invoke an event on MyClass.
template &lt;typename ...Args&gt;
void MyClass_event_in_thread(
  boost::shared_ptr&lt;MyClass&gt; self,
  unsigned int seconds,
  Args... args)
{
  // Sleep without the GIl.
  std::this_thread::sleep_for(std::chrono::seconds(seconds));

  // We do not want to hold the GIL while invoking or copying 
  // C++-specific slots connected to the signal.  Thus, it is the 
  // responsibility of python slots to manage the GIL via the 
  // py_slot wrapper class.
  self-&gt;event(args...);
}

/// @brief Function that will be exposed to python that will create
///        a thread to call the signal.
template &lt;typename ...Args&gt;
void MyClass_event_in(
  boost::shared_ptr&lt;MyClass&gt; self,
  unsigned int seconds,
  Args... args)
{
  // The caller may or may not have the GIL.  Regardless, spawn off a 
  // thread that will sleep and then invoke an event on MyClass.  The
  // thread will not be joined so detach from it.  Additionally, as
  // shared_ptr is thread safe, copies of it can be made without the
  // GIL.
  std::thread(&amp;MyClass_event_in_thread&lt;Args...&gt;, self, seconds, args...)
      .detach();
}
</snippet></ROW><ROW><id>20828366</id><snippet>MyClass_event_in_thread</snippet></ROW><ROW><id>20828366</id><snippet>MyClass</snippet></ROW><ROW><id>20828366</id><snippet>python::class_&lt;MyClass, boost::shared_ptr&lt;MyClass&gt;,
               boost::noncopyable&gt;("MyClass")
  .def("connect_slot", &amp;MyClass_connect_slot&lt;int&gt;)
  .def("event",        &amp;MyClass::event)
  .def("event_in",     &amp;MyClass_event_in&lt;int&gt;)
  ;
</snippet></ROW><ROW><id>20828366</id><snippet>#include &lt;thread&gt; // std::thread, std::chrono
#include &lt;boost/python.hpp&gt;
#include &lt;boost/shared_ptr.hpp&gt;
#include &lt;boost/signals2/signal.hpp&gt;

/// @brief Mockup class.
class MyClass
{
public:
  /// @brief Connect a slot to the signal.
  template &lt;typename Slot&gt;
  void connect_slot(const Slot&amp; slot)
  {
    signal_.connect(slot);
  }

  /// @brief Send an event to the signal.
  void event(int value)
  {
    signal_(value);
  }

private:
  boost::signals2::signal&lt;void(int)&gt; signal_;
};

/// @brief RAII class used to lock and unlock the GIL.
class gil_lock
{
public:
  gil_lock()  { state_ = PyGILState_Ensure(); }
  ~gil_lock() { PyGILState_Release(state_);   }
private:
  PyGILState_STATE state_;
};    

/// @brief Helepr type that will manage the GIL for a python slot.
///
/// @detail GIL management:
///           * Caller must own GIL when constructing py_slot, as 
///             the python::object will be copy-constructed (increment
///             reference to the object)
///           * The newly constructed python::object will be managed
///             by a shared_ptr.  Thus, it may be copied without owning
///             the GIL.  However, a custom deleter will acquire the
///             GIL during deletion.
///           * When py_slot is invoked (operator()), it will acquire
///             the GIL then delegate to the managed python::object.
struct py_slot
{
public:

  /// @brief Constructor that assumes the caller has the GIL locked.
  py_slot(const boost::python::object&amp; object)
    : object_(
        new boost::python::object(object),  // GIL locked, so copy.
        [](boost::python::object* object)   // Delete needs GIL.
        {
          gil_lock lock;
          delete object;
        }
      )
  {}

  // Use default copy-constructor and assignment-operator.
  py_slot(const py_slot&amp;) = default;
  py_slot&amp; operator=(const py_slot&amp;) = default;

  template &lt;typename ...Args&gt;
  void operator()(Args... args)
  {
    // Lock the GIL as the python object is going to be invoked.
    gil_lock lock;
    (*object_)(args...); 
  }

private:
  boost::shared_ptr&lt;boost::python::object&gt; object_;
};

/// @brief MyClass::connect_slot helper.
template &lt;typename ...Args&gt;
void MyClass_connect_slot(
  MyClass&amp; self,
  boost::python::object object)
{
  py_slot slot(object); // Adapt object to a py_slot for GIL management.

  // Using a lambda here allows for the args to be expanded automatically.
  // If bind was used, the placeholders would need to be explicitly added.
  self.connect_slot([slot](Args... args) mutable { slot(args...); });
}

/// @brief Sleep then invoke an event on MyClass.
template &lt;typename ...Args&gt;
void MyClass_event_in_thread(
  boost::shared_ptr&lt;MyClass&gt; self,
  unsigned int seconds,
  Args... args)
{
  // Sleep without the GIL.
  std::this_thread::sleep_for(std::chrono::seconds(seconds));

  // We do not want to hold the GIL while invoking or copying 
  // C++-specific slots connected to the signal.  Thus, it is the 
  // responsibility of python slots to manage the GIL via the 
  // py_slot wrapper class.
  self-&gt;event(args...);
}

/// @brief Function that will be exposed to python that will create
///        a thread to call the signal.
template &lt;typename ...Args&gt;
void MyClass_event_in(
  boost::shared_ptr&lt;MyClass&gt; self,
  unsigned int seconds,
  Args... args)
{
  // The caller may or may not have the GIL.  Regardless, spawn off a 
  // thread that will sleep and then invoke an event on MyClass.  The
  // thread will not be joined so detach from it.  Additionally, as
  // shared_ptr is thread safe, copies of it can be made without the
  // GIL.
  // Note: MyClass_event_in_thread could be expressed as a lambda,
  //       but unpacking a template pack within a lambda does not work
  //       on some compilers.
  std::thread(&amp;MyClass_event_in_thread&lt;Args...&gt;, self, seconds, args...)
      .detach();
}

BOOST_PYTHON_MODULE(example)
{
  PyEval_InitThreads(); // Initialize GIL to support non-python threads.

  namespace python = boost::python;
  python::class_&lt;MyClass, boost::shared_ptr&lt;MyClass&gt;,
                 boost::noncopyable&gt;("MyClass")
    .def("connect_slot", &amp;MyClass_connect_slot&lt;int&gt;)
    .def("event",        &amp;MyClass::event)
    .def("event_in",     &amp;MyClass_event_in&lt;int&gt;)
    ;
}
</snippet></ROW><ROW><id>20828366</id><snippet>from time import sleep
import example

def spam1(x):
  print "spam1: ", x

def spam2(x):
  print "spam2: ", x

c = example.MyClass()
c.connect_slot(spam1)
c.connect_slot(spam2)
c.event(123)
print "Sleeping"
c.event_in(3, 321)
sleep(5)
print "Done sleeping"
</snippet></ROW><ROW><id>20828366</id><snippet>spam1:  123
spam2:  123
Sleeping
spam1:  321
spam2:  321
Done sleeping
</snippet></ROW><ROW><id>20828389</id><snippet>IMDBLOGIN = "https://secure.imdb.com/register/login?ref_=nv_usr_lgin_3"
form = OrderedDict([("49e6c", "3478"), ("login", self.username), ("password",  self.password)])
cj = CookieJar()
opener = build_opener(HTTPHandler(), HTTPSHandler(), HTTPErrorProcessor(), 
                     HTTPRedirectHandler(), HTTPCookieProcessor(cj))
params = urlencode(form)
response = opener.open(IMDBLOGIN, params)

# cookies automatically sent
response2 = opener.open(csv_url)
content = response2.read()
</snippet></ROW><ROW><id>20828553</id><snippet>wireshark</snippet></ROW><ROW><id>20828553</id><snippet>sudo</snippet></ROW><ROW><id>20828627</id><snippet>0x30 - 0x39</snippet></ROW><ROW><id>20828627</id><snippet>0x100 - 0x109</snippet></ROW><ROW><id>20828627</id><snippet>if (event.key &gt;= 0x100 and event.key &lt;= 0x109):
  return event.key - 0xD0
else:
  return event.key
</snippet></ROW><ROW><id>20828901</id><snippet>python -m SimpleHTTPServer 12345
</snippet></ROW><ROW><id>20828901</id><snippet>netstat</snippet></ROW><ROW><id>20828990</id><snippet>Tribool</snippet></ROW><ROW><id>20828990</id><snippet>Tribool</snippet></ROW><ROW><id>20828990</id><snippet>Tribool</snippet></ROW><ROW><id>20828990</id><snippet>from tribool import Tribool
x = Tribool(False)
</snippet></ROW><ROW><id>20828990</id><snippet>namespace python = boost::python;
python::object tribool_class = python::import("tribool").attr("Tribool");
python::object x = tribool_class(false);
</snippet></ROW><ROW><id>20828990</id><snippet>spam</snippet></ROW><ROW><id>20828990</id><snippet>Spam</snippet></ROW><ROW><id>20828990</id><snippet>example</snippet></ROW><ROW><id>20828990</id><snippet>make_spam</snippet></ROW><ROW><id>20828990</id><snippet>spam.Spam</snippet></ROW><ROW><id>20828990</id><snippet>spam.py</snippet></ROW><ROW><id>20828990</id><snippet>class Spam(object):

    def __init__(self, value):
        self.value = value

    def __str__(self):
        return self.__repr__() + " has a value of " + str(self.value)
</snippet></ROW><ROW><id>20828990</id><snippet>example.cpp</snippet></ROW><ROW><id>20828990</id><snippet>#include &lt;boost/python.hpp&gt;

boost::python::object make_spam(boost::python::object value)
{
  // from spam import Spam
  // return Spam(value)
  return boost::python::import("spam").attr("Spam")(value);
}

BOOST_PYTHON_MODULE(example)
{
  boost::python::def("make_spam", &amp;make_spam);
}
</snippet></ROW><ROW><id>20828990</id><snippet>&gt;&gt;&gt; import example
&gt;&gt;&gt; print example.make_spam(False)
&lt;spam.Spam object at 0xb74be1ac&gt; has a value of False
&gt;&gt;&gt; print example.make_spam(True)
&lt;spam.Spam object at 0xb74be10c&gt; has a value of True
&gt;&gt;&gt; print example.make_spam(None)
&lt;spam.Spam object at 0xb74be1ac&gt; has a value of None
</snippet></ROW><ROW><id>20829003</id><snippet>CHOICES = (
    (0, 'No'),
    (1, 'Yes'),
    (2, 'Don\'t Know'),
)
</snippet></ROW><ROW><id>20829003</id><snippet>[0,1,2]</snippet></ROW><ROW><id>20829003</id><snippet>IntegerField</snippet></ROW><ROW><id>20829003</id><snippet>myfield</snippet></ROW><ROW><id>20829003</id><snippet>filter(...) or exclude(...)</snippet></ROW><ROW><id>20829003</id><snippet>IntegerField</snippet></ROW><ROW><id>20829003</id><snippet>IntegerField</snippet></ROW><ROW><id>20829003</id><snippet>yes</snippet></ROW><ROW><id>20829003</id><snippet>no</snippet></ROW><ROW><id>20829003</id><snippet>.filter(myfield__in=[0,1])
</snippet></ROW><ROW><id>20829003</id><snippet>def lookup_choices(choices, values):
    choices = dict(choices)
    rchoices = {choices [k]: k for k in choices}
    return [rchoices[v] for v in values]

.filter(myfield__in=lookup_choices(CHOICES, ['Yes', 'No'])
</snippet></ROW><ROW><id>20829003</id><snippet>form.cleaned_data</snippet></ROW><ROW><id>20829061</id><snippet>origChoice = intChoice
if(switch):
    for index in range(0,len(choicesList)): #Loop finds entry index which hasn't been chosen, and isn't the "Opened Door", then switches to it
        if( (index != origChoice) and (index != alternate) ):
            intChoice = index
</snippet></ROW><ROW><id>20829255</id><snippet>    return val
</snippet></ROW><ROW><id>20829384</id><snippet>sys.excepthook</snippet></ROW><ROW><id>20829384</id><snippet>import sys

def myexcepthook(type, value, tb):
    import traceback
    from email.mime.text import MIMEText
    from subprocess import Popen, PIPE
    tbtext = ''.join(traceback.format_exception(type, value, tb))
    msg = MIMEText("There was a problem with your program:\n\n" + tbtext)
    msg["From"] = "me@example.com"
    msg["To"] = "you@example.com"
    msg["Subject"] = "Program exited with a traceback."
    p = Popen(["/usr/sbin/sendmail", "-t"], stdin=PIPE)
    p.communicate(msg.as_string())

sys.excepthook = myexcepthook
</snippet></ROW><ROW><id>20829384</id><snippet>sendmail</snippet></ROW><ROW><id>20829675</id><snippet>obj['posts']</snippet></ROW><ROW><id>20829675</id><snippet>obj = json.load(...)
[dct for dct in obj['posts'] if 'no' in dct]
</snippet></ROW><ROW><id>20829675</id><snippet>&gt;&gt;&gt; import json

&gt;&gt;&gt; obj = json.loads('''{"posts":[{"no":3919193, "p": "kekekekek"}, 
          {"no":3929342, "p": "trololol"}]}''')

&gt;&gt;&gt; [dct for dct in obj['posts'] if 'no' in dct]
[{u'no': 3919193, u'p': u'kekekekek'}, {u'no': 3929342, u'p': u'trololol'}]
</snippet></ROW><ROW><id>20829740</id><snippet>    for i in self.jobs:
        with open('postcodes.csv', 'rb') as f:
            reader = csv.reader(f)
            for row in reader:
                if row[0] == self.jobs[i][3]:
                    self.jobs[i].append((row[1], row[2]))
                elif self.jobs[i][3] != row[0]:
                    self.jobs[i].append("nothing")
</snippet></ROW><ROW><id>20829740</id><snippet>i</snippet></ROW><ROW><id>20829740</id><snippet>for i in self.jobs</snippet></ROW><ROW><id>20829740</id><snippet>list</snippet></ROW><ROW><id>20829740</id><snippet>self.jobs</snippet></ROW><ROW><id>20829740</id><snippet>    for job in self.jobs:
        with open('postcodes.csv', 'rb') as f:
            for row in csv.reader(f):
                if row[0] == job[3]:
                    job.append((row[1], row[2]))
                    break
            else: # no match
                job.append("nothing")
</snippet></ROW><ROW><id>20829740</id><snippet>"nothing"</snippet></ROW><ROW><id>20829740</id><snippet>else</snippet></ROW><ROW><id>20829740</id><snippet>for</snippet></ROW><ROW><id>20829740</id><snippet>postcodes.csv</snippet></ROW><ROW><id>20829740</id><snippet>self.jobs</snippet></ROW><ROW><id>20829740</id><snippet>for job in self.jobs:</snippet></ROW><ROW><id>20829830</id><snippet>zlib</snippet></ROW><ROW><id>20829837</id><snippet>digitalwrite</snippet></ROW><ROW><id>20829837</id><snippet>import wiringpi2 as pi
from multiprocessing import Process

def process(choice):
        if choice == "1":
                pi.digitalWrite(17, 1)
        else:
                pi.digitalWrite(17, 0)

if __name__ == '__main__':
        pi.wiringPiSetupSys()
        choice = raw_input("&gt;")
        p = Process(target=process, args=(choice,))
        p.start()
        p.join()

print('just printing something to see if gets to end')
</snippet></ROW><ROW><id>20829946</id><snippet>self.button</snippet></ROW><ROW><id>20829946</id><snippet>floor</snippet></ROW><ROW><id>20829946</id><snippet>def createWidgets(self):
    ...
    self.buttons = {}
    for floor in floors:
        ...
        self.buttons[floor] = tk.Button(...)
    ...
def pressed(self, index):
    ...
    self.buttons[index].configure(bg="red")
</snippet></ROW><ROW><id>20829956</id><snippet>from django.db import models
from django.db.models.query import QuerySet


class SoftDeletionQuerySet(QuerySet):
    def delete(self):
        # Bulk delete bypasses individual objects' delete methods.
        return super(SoftDeletionQuerySet, self).update(alive=False)

    def hard_delete(self):
        return super(SoftDeletionQuerySet, self).delete()

    def alive(self):
        return self.filter(alive=True)

    def dead(self):
        return self.exclude(alive=True)


class SoftDeletionManager(models.Manager):
    def __init__(self, *args, **kwargs):
        self.alive_only = kwargs.pop('alive_only', True)
        super(SoftDeletionManager, self).__init__(*args, **kwargs)

    def get_queryset(self):
        if self.alive_only:
            return SoftDeletionQuerySet(self.model).filter(alive=True)
        return SoftDeletionQuerySet(self.model)

    def hard_delete(self):
        return self.get_queryset().hard_delete()


class SoftDeletionModel(models.Model):
    alive = models.BooleanField(default=True)

    objects = SoftDeletionManager()
    all_objects = SoftDeletionManager(alive_only=False)

    class Meta:
        abstract = True

    def delete(self):
        self.alive = False
        self.save()

    def hard_delete(self):
        super(SoftDeletionModel, self).delete()
</snippet></ROW><ROW><id>20829956</id><snippet>alive</snippet></ROW><ROW><id>20829956</id><snippet>delete()</snippet></ROW><ROW><id>20830034</id><snippet>&gt;&gt;&gt; ld = pd.DataFrame(labeldict).T
&gt;&gt;&gt; ld.columns = ['color', 'size']
&gt;&gt;&gt; ld.index.name = 'label'
&gt;&gt;&gt; df.merge(ld.reset_index(), on='label')
  label  somedata  color    size
0     b  1.462108    red  medium
1     c -2.060141  green   small
2     c  1.133769  green   small
3     c  0.042214  green   small
4     e -0.322417    red  medium
5     e -1.099891    red  medium
6     e -0.877858    red  medium
7     e  0.582815    red  medium
8     f -0.384054    red   large
9     d -0.172428    red  medium
</snippet></ROW><ROW><id>20830077</id><snippet>rev_key = ndb.Key('Account', 'Sandy', 'Message', 'greeting', 'Revision', '2')
</snippet></ROW><ROW><id>20830077</id><snippet>account_sandy = Account.get_or_insert('Sandy')
sandy_message = Message.get_or_insert('greeting', parent=account_sandy.key)
sandy_message_rev = Revision.get_or_insert('2', parent=sandy_message.key)
</snippet></ROW><ROW><id>20830077</id><snippet>get_or_insert</snippet></ROW><ROW><id>20830077</id><snippet>Greeting</snippet></ROW><ROW><id>20830077</id><snippet>Sandy as parent</snippet></ROW><ROW><id>20830077</id><snippet>    Sandy
   / |   \
  M1 M2   M3 
 / |  \   | \
R1 R2  R1 R1 R2
</snippet></ROW><ROW><id>20830077</id><snippet>   Jukebox       
   / |   \        
  Q1 Q2   Q3     
 / |  \   | \
S1 S2  S3 S4 S5
</snippet></ROW><ROW><id>20830103</id><snippet>if c1-c2&gt;0 and c2-c3&lt;0 and c3-c4&gt;0 and c4-c5&lt;0 and c5-c6&gt;0 :</snippet></ROW><ROW><id>20830103</id><snippet>if c1&gt;c2 and c2&lt;c3 and c3&gt;c4 and c4&lt;c5 and c5&gt;c6 :</snippet></ROW><ROW><id>20830103</id><snippet>('t : ', 0.12977099418640137, 't1 : ', 14.45378589630127)</snippet></ROW><ROW><id>20830103</id><snippet>('t : ', 0.0887291431427002, 't1 : ', 8.54729700088501)</snippet></ROW><ROW><id>20830111</id><snippet>decimal</snippet></ROW><ROW><id>20830111</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal('3.5') % Decimal('0.1')
Decimal('0.0')
&gt;&gt;&gt; print(Decimal('3.5') % Decimal('0.1'))
0.0
&gt;&gt;&gt; (Decimal(7)/2) % (Decimal(1)/10)
Decimal('0.0')
</snippet></ROW><ROW><id>20830181</id><snippet>UserObject.objects.get('user@email.com')
</snippet></ROW><ROW><id>20830181</id><snippet>UserObject.objects.get(email='user@email.com')
</snippet></ROW><ROW><id>20830181</id><snippet>QuerySet</snippet></ROW><ROW><id>20830181</id><snippet>objects.get(...)</snippet></ROW><ROW><id>20830254</id><snippet>local4.sub(temp1, arg3[temp2])
</snippet></ROW><ROW><id>20830254</id><snippet>local4</snippet></ROW><ROW><id>20830254</id><snippet>temp1</snippet></ROW><ROW><id>20830254</id><snippet>local4 = local4.sub(temp1, arg3[temp2]) #or
local4.sub!(temp1, arg3[temp2])
</snippet></ROW><ROW><id>20830496</id><snippet>perms.hunt.has_voted</snippet></ROW><ROW><id>20830496</id><snippet>{% if request.session.has_voted %}
...
</snippet></ROW><ROW><id>20830496</id><snippet>has_voted</snippet></ROW><ROW><id>20830496</id><snippet>False</snippet></ROW><ROW><id>20830533</id><snippet>&gt;&gt;&gt; y = [1,2,3,4,5,6]
&gt;&gt;&gt; [[i] for i in y]
[[1], [2], [3], [4], [5], [6]]
</snippet></ROW><ROW><id>20830618</id><snippet>def setRadius(circleRadius):
    selected = cmds.ls( sl=True)         
    pivotcube = cmds.xform(selected[0], ws=True, q=True, t=True)
    satellite = cmds.xform(selected[1], ws=True, q=True, t=True)
    cmds.select(selected)  # reselect the original objects
</snippet></ROW><ROW><id>20830618</id><snippet>return pivotcube, satellite 
</snippet></ROW><ROW><id>20830618</id><snippet>pivotpos = (0,0,0)
cmds.xform(selected[0], t=pivotpos, ws=True)
</snippet></ROW><ROW><id>20830653</id><snippet>passage[0]</snippet></ROW><ROW><id>20830653</id><snippet>{'I love this sandwich.'}</snippet></ROW><ROW><id>20830653</id><snippet>{ ... }</snippet></ROW><ROW><id>20830653</id><snippet>word_tokenize</snippet></ROW><ROW><id>20830653</id><snippet>train = [('I love this sandwich.', 'pos'), ...]
</snippet></ROW><ROW><id>20830717</id><snippet>data</snippet></ROW><ROW><id>20830717</id><snippet>POST</snippet></ROW><ROW><id>20830820</id><snippet>stripe.py</snippet></ROW><ROW><id>20830820</id><snippet>stripe</snippet></ROW><ROW><id>20830820</id><snippet>stripe.py</snippet></ROW><ROW><id>20830820</id><snippet>stripe.pyc</snippet></ROW><ROW><id>20830820</id><snippet>c</snippet></ROW><ROW><id>20830820</id><snippet>/Users/sebastian/Desktop/stripe.py</snippet></ROW><ROW><id>20830832</id><snippet>import json</snippet></ROW><ROW><id>20830832</id><snippet>array = [['X', 'Y', 'Z'], [1, 2, 3], [4, 5, 6]]
return render_to_response('page2.html', {'array': json.dumps(array)})
</snippet></ROW><ROW><id>20830832</id><snippet>var djangoData = {{ array|safe }};
var data = google.visualization.arrayToDataTable(djangoData);
</snippet></ROW><ROW><id>20830832</id><snippet>Decimal</snippet></ROW><ROW><id>20830832</id><snippet>class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, decimal.Decimal):
            return float(o)
        return super(DecimalEncoder, self).default(o)
</snippet></ROW><ROW><id>20830832</id><snippet>array = [['X', 'Y', 'Z'], [Decimal('1'), Decimal('2'), Decimal('3')]]
return render_to_response('page2.html', {
    'array': json.dumps(array, cls=DecimalEncoder),
})
</snippet></ROW><ROW><id>20830884</id><snippet>float</snippet></ROW><ROW><id>20830884</id><snippet>timestep</snippet></ROW><ROW><id>20830884</id><snippet>timestep = 1.0 / wavData[0]
</snippet></ROW><ROW><id>20830884</id><snippet>1 / 16000 == 0
</snippet></ROW><ROW><id>20830884</id><snippet>1.0 / 16000 == 6.25e-05
</snippet></ROW><ROW><id>20830963</id><snippet>%s</snippet></ROW><ROW><id>20830963</id><snippet>zooklogger.info("steps:: Actual Steps :: %s, Workflow Path :: %s, Host Path :: %s" % (steps, wf_path, status_path))
</snippet></ROW><ROW><id>20830963</id><snippet>logging</snippet></ROW><ROW><id>20830963</id><snippet>zooklogger.info("steps:: Actual Steps :: %s, Workflow Path :: %s, Host Path :: %s",
                steps, wf_path, status_path)
</snippet></ROW><ROW><id>20830963</id><snippet>logger.info()</snippet></ROW><ROW><id>20830986</id><snippet>import pandas as pd

# game is a unique id (like a combination of date, home_team and away_team)
bet_list = [
    {'playerid': 1, 'game': 1, 'date': 1, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 3, 'away_goals': 5},
    {'playerid': 2, 'game': 1, 'date': 1, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 2, 'away_goals': 1},
    {'playerid': 3, 'game': 1, 'date': 1, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 1, 'away_goals': 0},
    {'playerid': 4, 'game': 1, 'date': 1, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 0, 'away_goals': 0},
    {'playerid': 1, 'game': 2, 'date': 2, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 3, 'away_goals': 5},
    {'playerid': 2, 'game': 2, 'date': 2, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 2, 'away_goals': 1},
    {'playerid': 3, 'game': 2, 'date': 2, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 1, 'away_goals': 0},
    {'playerid': 4, 'game': 2, 'date': 2, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 0, 'away_goals': 0},   
    {'playerid': 1, 'game': 3, 'date': 3, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 3, 'away_goals': 5},
    {'playerid': 2, 'game': 3, 'date': 3, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 2, 'away_goals': 1},
    {'playerid': 3, 'game': 3, 'date': 3, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 1, 'away_goals': 0},
    {'playerid': 4, 'game': 3, 'date': 3, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 0, 'away_goals': 0}  
]

result_list = [
    {'game': 1, 'date': 1, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 3, 'away_goals': 4},
    {'game': 2, 'date': 2, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 2, 'away_goals': 2},
    {'game': 3, 'date': 3, 'home_team': 'Bayern', 'away_team': 'VfL', 'home_goals': 0, 'away_goals': 0},
]

def calculate_result(input_df):
    input_df['result'] = 0
    # home wins (result 1)
    mask = input_df['home_goals'] &gt; input_df['away_goals']
    input_df['result'][mask] = 1
    # away wins (result 2)
    mask = input_df['home_goals'] &lt; input_df['away_goals']
    input_df['result'][mask] = 2
    # draws (result 3)
    mask = input_df['home_goals'] == input_df['away_goals']
    input_df['result'][mask] = 3
    # goal difference
    input_df['goal_difference'] = input_df['home_goals'] - input_df['away_goals']
    return input_df

# so what where the expectations?
bet_df = pd.DataFrame(bet_list)
bet_df = calculate_result(bet_df)
# if you want to look at the results
bet_df

# what were the actuals
result_df = pd.DataFrame(result_list)
result_df = calculate_result(result_df)
# if you want to look at the results
result_df

# now let's compare them!
# i take a subsetof the result df and link results on the game
combi_df = pd.merge(left=bet_df, right=result_df[['game', 'home_goals', 'away_goals', 'result', 'goal_difference']], left_on='game', right_on='game', how='inner', suffixes=['_bet', '_actual'])
# look at the data
combi_df

def calculate_bet_score(input_df):
    '''
Notice that I'm keeping in extra columns, because those are nice for comparative analytics in the future. Think: "you had this right, just like x% of all the people"

    '''
    input_df['bet_score'] = 0
    # now look at where people have correctly predicted the result
    input_df['result_estimation'] = 0
    mask = input_df['result_bet'] == input_df['result_actual']
    input_df['result_estimation'][mask] = 1 # correct result
    input_df['bet_score'][mask] = 1 # bet score for a correct result
    # now look at where people have correctly predicted the difference in goals when they already predicted the result correctly
    input_df['goal_difference_estimation'] = 0
    bet_mask = input_df['bet_score'] == 1
    score_mask = input_df['goal_difference_bet'] == input_df['goal_difference_actual']
    input_df['goal_difference_estimation'][(bet_mask) &amp; (score_mask)] = 1 # correct result
    input_df['bet_score'][(bet_mask) &amp; (score_mask)] = 2 # bet score for a correct result
    # now look at where people have correctly predicted the exact goals
    input_df['goal_exact_estimation'] = 0
    bet_mask = input_df['bet_score'] == 2
    home_mask = input_df['home_goals_bet'] == input_df['home_goals_actual']
    away_mask = input_df['away_goals_bet'] == input_df['away_goals_actual']
    input_df['goal_exact_estimation'][(bet_mask) &amp; (home_mask) &amp; (away_mask)] = 1 # correct result
    input_df['bet_score'][(bet_mask)  &amp; (home_mask) &amp; (away_mask)] = 3 # bet score for a correct result
    return input_df

combi_df = calculate_bet_score(combi_df)

# now look at the results
combi_df

# and you can do nifty stuff like making a top player list like this:
combi_df.groupby('playerid')['bet_score'].sum().order(ascending=False)
# player 4 is way ahead!
# which game was the best estimated game?
combi_df.groupby('game')['bet_score'].mean().order(ascending=False)
# game 3! though abysmal predictions in general ;) 
</snippet></ROW><ROW><id>20831087</id><snippet>s.bind((HOST,PORT))#for client
</snippet></ROW><ROW><id>20831087</id><snippet>s.connect((HOST,PORT))
</snippet></ROW><ROW><id>20831087</id><snippet>s.listen(1)  #number defines amount of queued connection to server
conn, addr = s.accept()
</snippet></ROW><ROW><id>20831200</id><snippet>def recurse(A):
    if A.shape[0]&gt;A.shape[1]:   #split longest axis first
        if not np.isnan( A[0,A.shape[1]//2]):
            return [rect for part in np.split(A, 2, axis=1) for rect in recurse(part)]
        if not np.isnan( A[A.shape[0]//2,0]):
            return [rect for part in np.split(A, 2, axis=0) for rect in recurse(part)]
    else:
        if not np.isnan( A[A.shape[0]//2,0]):
            return [rect for part in np.split(A, 2, axis=0) for rect in recurse(part)]
        if not np.isnan( A[0,A.shape[1]//2]):
            return [rect for part in np.split(A, 2, axis=1) for rect in recurse(part)]
    return [A]
</snippet></ROW><ROW><id>20831341</id><snippet>b</snippet></ROW><ROW><id>20831341</id><snippet>def b():
    return 3 * a
</snippet></ROW><ROW><id>20831341</id><snippet>b()</snippet></ROW><ROW><id>20831353</id><snippet>feedparser.parse("https://" + U + ":" + P + "@mail.google.com/gmail/feed/atom")["feed"]
</snippet></ROW><ROW><id>20831353</id><snippet>feed = feedparser.parse("https://{}:{}@mail.google.com/gmail/feed/atom".format(U, P))
try:
    B = int(feed["feed"]["fullcount"])
except KeyError:
    # handle the error
    continue  # you might want to sleep or put the following code in the else block
</snippet></ROW><ROW><id>20831353</id><snippet>ValueError</snippet></ROW><ROW><id>20831353</id><snippet>int()</snippet></ROW><ROW><id>20831511</id><snippet>list</snippet></ROW><ROW><id>20831511</id><snippet>slice</snippet></ROW><ROW><id>20831511</id><snippet>velx = vx[:]
</snippet></ROW><ROW><id>20831511</id><snippet>velx = list(vx)
</snippet></ROW><ROW><id>20831511</id><snippet>vx = [4.0 * math.sqrt(vtotsq) * (random.random() - 0.5) for _ in range(natoms)]
</snippet></ROW><ROW><id>20831511</id><snippet>vtotsqrt = math.sqrt(vtotsq) # sqrt is hard, do this once
vx = [4 * vtotsqrt * (random.random() - 0.5) for _ in range(natoms)]
</snippet></ROW><ROW><id>20831511</id><snippet>range(0, x, 1)</snippet></ROW><ROW><id>20831511</id><snippet>range(x)</snippet></ROW><ROW><id>20831618</id><snippet>_collections</snippet></ROW><ROW><id>20831642</id><snippet>nametag</snippet></ROW><ROW><id>20831642</id><snippet>class Person(object):
    def __init__(self, name, occupation):
        self.name = name
        self.occupation = occupation

class Teacher(Person):
    def __init__(self, name, occupation, subject):
        super().__init__(name, occupation)
        self.subject = subject

bob = Teacher("Bob", "Professor", "Python")
bob.name == "Bob"
</snippet></ROW><ROW><id>20831642</id><snippet>nametag</snippet></ROW><ROW><id>20831642</id><snippet>class Person(object):

    def __init__(self, name, occupation):
        self.name = name
        self.occupation = occupation

    @property
    def nametag(self):
        return {"name": self.name,
                "occupation": self.occupation}

class Teacher(Person):

    def __init__(self, name, occupation, subject):
        super().__init__(name, occupation)
        self.subject = subject

    @property
    def nametag(self):
        tag = super().nametag
        tag["subject"] = self.subject
        return tag

bob = Teacher("Bob", "Professor", "Python")
bob.nametag["name"] == "Bob"
</snippet></ROW><ROW><id>20831642</id><snippet>dict(d2.keys() + d1.keys())
</snippet></ROW><ROW><id>20831642</id><snippet>d1.update(d2)
</snippet></ROW><ROW><id>20831768</id><snippet>mul(2)(3)
</snippet></ROW><ROW><id>20831768</id><snippet>mul</snippet></ROW><ROW><id>20831768</id><snippet>2</snippet></ROW><ROW><id>20831768</id><snippet>return</snippet></ROW><ROW><id>20831768</id><snippet>3</snippet></ROW><ROW><id>20831768</id><snippet>def mul(arg):
    return lambda x: x * arg
</snippet></ROW><ROW><id>20831768</id><snippet>mul (2)(3)(4)</snippet></ROW><ROW><id>20831768</id><snippet>class</snippet></ROW><ROW><id>20831768</id><snippet>import operator

class op(object):

    def __init__(self, op, arg):
        self.op = op
        self.value = self._get_val(arg)

    def _get_val(self, arg):
        try:
            return arg.value
        except AttributeError:
            return arg

    def __repr__(self):
        return str(self.value)

    def __call__(self, arg):
        self.value = self.op(self.value, 
                             self._get_val(arg))
        return self

    def __getitem__(self, key):
        self.value = self.op(self.value, 
                             -1 * self._get_val(key))
        return self


class mul(op):

    def __init__(self, arg):
        super(mul, self).__init__(operator.mul, arg)
</snippet></ROW><ROW><id>20831768</id><snippet>mul(2)[3] == -6</snippet></ROW><ROW><id>20831768</id><snippet>return</snippet></ROW><ROW><id>20831768</id><snippet>mul&gt;x&gt;y</snippet></ROW><ROW><id>20831768</id><snippet>x &gt; y</snippet></ROW><ROW><id>20831768</id><snippet>True</snippet></ROW><ROW><id>20831768</id><snippet>False</snippet></ROW><ROW><id>20831768</id><snippet>mul</snippet></ROW><ROW><id>20832043</id><snippet>From</snippet></ROW><ROW><id>20832043</id><snippet>send_mail</snippet></ROW><ROW><id>20832066</id><snippet>#client
import socket
import time

HOST = "localhost"
PORT = 8065
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST,PORT))
test = 'Helloworld'
s.sendall(test.encode())
data = s.recv(1024)
s.close()
print 'Recieved', repr(data)
</snippet></ROW><ROW><id>20832066</id><snippet>#server
import socket
import time

HOST = ''
PORT = 8065

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((HOST,PORT))
s.listen(1)
conn, addr = s.accept()
print ('Connected by', addr)
while 1:
    data = conn.recv(1024)
    if not data: break
    conn.sendall(data)
conn.close()
</snippet></ROW><ROW><id>20832175</id><snippet>mypats = [("AC1", AC1), ("polyAT", polyAT), ... as many as you like]
</snippet></ROW><ROW><id>20832175</id><snippet>for patname, pat in mypats:
    for m in pat.finditer(text):
        matches.append([m.start(), m.end(), patname, m.group()])
</snippet></ROW><ROW><id>20832175</id><snippet>myregexps = [('AC1', r'(?:TGA[GA])+'), # list of (patname, regexp) pairs
             ('polyAT', r'[AT]{6,}'),
             ...
            ]

mypats = [(patname, re.compile(raw)) for patname, raw in myregexps]
</snippet></ROW><ROW><id>20832176</id><snippet>filename</snippet></ROW><ROW><id>20832176</id><snippet>attach_file.add_header('Content-Disposition', 'attachment', filename=attachment)
message.attach(attach)
</snippet></ROW><ROW><id>20832190</id><snippet>__eq__</snippet></ROW><ROW><id>20832190</id><snippet>x == y</snippet></ROW><ROW><id>20832190</id><snippet>y == z</snippet></ROW><ROW><id>20832190</id><snippet>x == z</snippet></ROW><ROW><id>20832190</id><snippet>__cmp__()</snippet></ROW><ROW><id>20832190</id><snippet>__eq__()</snippet></ROW><ROW><id>20832190</id><snippet>__hash__()</snippet></ROW><ROW><id>20832190</id><snippet>==</snippet></ROW><ROW><id>20832190</id><snippet>x = MyClass('foo')
y = 'foo'
z = MyClass('foo')

x == y # True
y == z # True
x == z # False
</snippet></ROW><ROW><id>20832430</id><snippet>tesseract.GetBoxText()</snippet></ROW><ROW><id>20832430</id><snippet>tesseract test.jpg result hocr</snippet></ROW><ROW><id>20832430</id><snippet>result.html</snippet></ROW><ROW><id>20832451</id><snippet>dtype</snippet></ROW><ROW><id>20832451</id><snippet>&gt;&gt;&gt; d2=asarray([(1.,2.,3.,4.,5.)],dtype=[('millis',float),('temperature_Celsius',float),('relative_humidity',float),('setpoint',float),('relay_status',float)])
&gt;&gt;&gt; d2=asarray([(1.,2.,3.,4.,5.)],dtype=data.dtype) #or this
&gt;&gt;&gt; d2
array([(1.0, 2.0, 3.0, 4.0, 5.0)], 
      dtype=[('millis', '&lt;f8'), ('temperature_Celsius', '&lt;f8'), ('relative_humidity', '&lt;f8'), ('setpoint', '&lt;f8'), ('relay_status', '&lt;f8')])
&gt;&gt;&gt; vstack((data,d2))
array([[(0.0, 0.0, 0.0, 0.0, 0.0)],
       [(1.0, 2.0, 3.0, 4.0, 5.0)]], 
      dtype=[('millis', '&lt;f8'), ('temperature_Celsius', '&lt;f8'), ('relative_humidity', '&lt;f8'), ('setpoint', '&lt;f8'), ('relay_status', '&lt;f8')])
</snippet></ROW><ROW><id>20832551</id><snippet>backend</snippet></ROW><ROW><id>20832551</id><snippet>matplotlib</snippet></ROW><ROW><id>20832551</id><snippet>macosx</snippet></ROW><ROW><id>20832551</id><snippet>backend</snippet></ROW><ROW><id>20832551</id><snippet>OSX</snippet></ROW><ROW><id>20832551</id><snippet>pylab=inline</snippet></ROW><ROW><id>20832551</id><snippet>inline</snippet></ROW><ROW><id>20832551</id><snippet>matplotlib</snippet></ROW><ROW><id>20832571</id><snippet>range</snippet></ROW><ROW><id>20832571</id><snippet>#! /usr/bin/python3
import datetime

def timerange(start, stop, step = datetime.timedelta(minutes = 15)):
    t = datetime.datetime(2000, 1, 1, start.hour, start.minute)
    stop = datetime.datetime(2000, 1, 1 if start &lt;= stop else 2, stop.hour, stop.minute)
    while t &lt; stop:
        yield t.time()
        t += step
</snippet></ROW><ROW><id>20832571</id><snippet>nineam = datetime.time(9, 0) #from DB
fivepm = datetime.time(17, 0) #from DB

for t in timerange(nineam, fivepm):
    print(t)
</snippet></ROW><ROW><id>20832571</id><snippet>def ftimerange(start, stop, step = datetime.timedelta(minutes = 15)):
    for t in timerange(start, stop, step):
        yield t.strftime('%I:%M%p')

for s in ftimerange(nineam, fivepm):
    print(s)
</snippet></ROW><ROW><id>20832571</id><snippet>&gt;&gt;&gt; elevenpm = datetime.time(23, 0)
&gt;&gt;&gt; oneam = datetime.time(1, 0)
&gt;&gt;&gt; for s in ftimerange(elevenpm, oneam): print(s)
... 
11:00PM
11:15PM
11:30PM
11:45PM
12:00AM
12:15AM
12:30AM
12:45AM
</snippet></ROW><ROW><id>20832571</id><snippet>&gt;&gt;&gt; start = datetime.time(8, 5)
&gt;&gt;&gt; stop = datetime.time(9, 12)
&gt;&gt;&gt; step = datetime.timedelta(minutes = 3, seconds = 22)
&gt;&gt;&gt; for s in ftimerange(start, stop, step): print(s)
... 
08:05AM
08:08AM
08:11AM
08:15AM
08:18AM
08:21AM
08:25AM
08:28AM
08:31AM
08:35AM
08:38AM
08:42AM
08:45AM
08:48AM
08:52AM
08:55AM
08:58AM
09:02AM
09:05AM
09:08AM
</snippet></ROW><ROW><id>20832588</id><snippet>mro</snippet></ROW><ROW><id>20832588</id><snippet>__new__</snippet></ROW><ROW><id>20832588</id><snippet>__mro__</snippet></ROW><ROW><id>20832588</id><snippet>__mro__</snippet></ROW><ROW><id>20832588</id><snippet>__new__</snippet></ROW><ROW><id>20832588</id><snippet>mro</snippet></ROW><ROW><id>20832588</id><snippet>B</snippet></ROW><ROW><id>20832588</id><snippet>change_mro_meta</snippet></ROW><ROW><id>20832588</id><snippet>__mro__</snippet></ROW><ROW><id>20832588</id><snippet>change_mro</snippet></ROW><ROW><id>20832588</id><snippet>__init__</snippet></ROW><ROW><id>20832588</id><snippet>class change_mro_meta(type):
    def __new__(cls, cls_name, cls_bases, cls_dict):
        out_cls = super(change_mro_meta, cls).__new__(cls, cls_name, cls_bases, cls_dict)
        out_cls.change_mro = False
        out_cls.hack_mro   = classmethod(cls.hack_mro)
        out_cls.fix_mro    = classmethod(cls.fix_mro)
        out_cls.recalc_mro = classmethod(cls.recalc_mro)
        return out_cls

    @staticmethod
    def hack_mro(cls):
        cls.change_mro = True
        cls.recalc_mro()

    @staticmethod
    def fix_mro(cls):
        cls.change_mro = False
        cls.recalc_mro()

    @staticmethod
    def recalc_mro(cls):
        # Changing a class' base causes __mro__ recalculation
        cls.__bases__  = cls.__bases__ + tuple()

    def mro(cls):
        default_mro = super(change_mro_meta, cls).mro()
        if hasattr(cls, "change_mro") and cls.change_mro:
            return default_mro[1:2] + default_mro
        else:
            return default_mro

class A(object):
    def __init__(self):
        print "__init__ A"
        self.hello()

    def hello(self):
        print "A hello"

class B(A):
    __metaclass__ = change_mro_meta
    def __init__(self):
        self.hack_mro()
        super(B, self).__init__()
        self.fix_mro()
        print "__init__ B"
        self.msg_str = "B"
        self.hello()

    def hello(self):
        print "%s hello" % self.msg_str

a = A()
b = B()
</snippet></ROW><ROW><id>20832588</id><snippet>hack_mro</snippet></ROW><ROW><id>20832588</id><snippet>fix_mro</snippet></ROW><ROW><id>20832588</id><snippet>recalc_mro</snippet></ROW><ROW><id>20832588</id><snippet>mro</snippet></ROW><ROW><id>20832647</id><snippet>from django.http import HttpResponse
from django.template import RequestContext, loader

from polls.models import Question

def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    template = loader.get_template('polls/index.html')
    context = RequestContext(request, {
        'latest_question_list': latest_question_list,
    })
    return HttpResponse(template.render(context))
</snippet></ROW><ROW><id>20832647</id><snippet>latest_question_list</snippet></ROW><ROW><id>20832647</id><snippet>{{ poll.id }}</snippet></ROW><ROW><id>20832775</id><snippet>abs</snippet></ROW><ROW><id>20832775</id><snippet>map</snippet></ROW><ROW><id>20832775</id><snippet>myList = [2,3,-3,-2]
print map(abs, myList)
</snippet></ROW><ROW><id>20832775</id><snippet>[2, 3, 3, 2]
</snippet></ROW><ROW><id>20832775</id><snippet>[abs(number) for number in myList]
</snippet></ROW><ROW><id>20832775</id><snippet>[-number if number &lt; 0 else number for number in myList]
</snippet></ROW><ROW><id>20832795</id><snippet>open(f)</snippet></ROW><ROW><id>20832795</id><snippet>_io.TextIOWrapper</snippet></ROW><ROW><id>20832795</id><snippet>documents = [open(f) for f in text_files]
</snippet></ROW><ROW><id>20832795</id><snippet>documents = [open(f).read() for f in text_files]
</snippet></ROW><ROW><id>20833112</id><snippet>    else:
        break
</snippet></ROW><ROW><id>20833112</id><snippet>else</snippet></ROW><ROW><id>20833112</id><snippet>break</snippet></ROW><ROW><id>20833112</id><snippet>break</snippet></ROW><ROW><id>20833112</id><snippet>if...else</snippet></ROW><ROW><id>20833164</id><snippet>"http:\\www.google.com"</snippet></ROW><ROW><id>20833164</id><snippet>"http://www.google.com"</snippet></ROW><ROW><id>20833164</id><snippet>"\\"</snippet></ROW><ROW><id>20833164</id><snippet>"http:\www.google.com"</snippet></ROW><ROW><id>20833164</id><snippet>//</snippet></ROW><ROW><id>20833164</id><snippet>"\\"</snippet></ROW><ROW><id>20833164</id><snippet>"http:\\www.google.com"</snippet></ROW><ROW><id>20833164</id><snippet>%5C</snippet></ROW><ROW><id>20833164</id><snippet>%5C</snippet></ROW><ROW><id>20833164</id><snippet>&lt;form action="/mylogin/" method="get"&gt;</snippet></ROW><ROW><id>20833171</id><snippet>from tkinter import *

root = Tk()

def yourFunction(event):
    print('left')

frame = Frame(root, width=100, height=100)

frame.bind("&lt;Left&gt;",yourFunction)   #Binds the "left" key to the frame and exexutes yourFunction if "left" key was pressed
frame.pack()

root.mainloop()
</snippet></ROW><ROW><id>20833285</id><snippet>(3644798167).bit_length() == 32</snippet></ROW><ROW><id>20833285</id><snippet>bin(3644798167) == '0b11011001001111110011010011010111'</snippet></ROW><ROW><id>20833285</id><snippet>if h == -1:
    h = 590923713
</snippet></ROW><ROW><id>20833285</id><snippet>-1</snippet></ROW><ROW><id>20833285</id><snippet>-1</snippet></ROW><ROW><id>20833285</id><snippet>-1</snippet></ROW><ROW><id>20833285</id><snippet>hash(i) == i</snippet></ROW><ROW><id>20833285</id><snippet>i</snippet></ROW><ROW><id>20833285</id><snippet>&gt;&gt;&gt; all(hash(i) == i for i in range(1000000))
True
</snippet></ROW><ROW><id>20833285</id><snippet>def hashxor(xs):
    h = 0
    for x in xs:
        h ^= hash(x)
    return h

def genpowerset(xs):
    from itertools import combinations
    for length in range(len(xs) + 1):
        for t in combinations(xs, length):
            yield t
</snippet></ROW><ROW><id>20833285</id><snippet>def show_stats(d):
    total = sum(d.values())
    print "total", total, "unique hashes", len(d), \
          "collisions", total - len(d)

def drive(n, hasher=hashxor):
    from collections import defaultdict
    d = defaultdict(int)

    for t in genpowerset(range(n)):
        d[hasher(t)] += 1
    show_stats(d)
</snippet></ROW><ROW><id>20833285</id><snippet>&gt;&gt; drive(20)
total 1048576 unique hashes 32 collisions 1048544
</snippet></ROW><ROW><id>20833285</id><snippet>_hash()</snippet></ROW><ROW><id>20833285</id><snippet>&gt;&gt;&gt; drive(20, _hash)
total 1048576 unique hashes 1048576 collisions 0
</snippet></ROW><ROW><id>20833285</id><snippet>_hash()</snippet></ROW><ROW><id>20833285</id><snippet>    h = h * 69069 + 907133923
</snippet></ROW><ROW><id>20833285</id><snippet>^ 89869747</snippet></ROW><ROW><id>20833285</id><snippet>    h = 1927868237 * (n + 1)
</snippet></ROW><ROW><id>20833285</id><snippet>    h = n
</snippet></ROW><ROW><id>20833285</id><snippet>total 1048576 unique hashes 851968 collisions 196608
</snippet></ROW><ROW><id>20833285</id><snippet>total 1048576 unique hashes 483968 collisions 564608
</snippet></ROW><ROW><id>20833285</id><snippet>0b01010101010101010101010101010101</snippet></ROW><ROW><id>20833285</id><snippet>total 1048576 unique hashes 163104 collisions 885472
</snippet></ROW><ROW><id>20833666</id><snippet>stackless.tasklet</snippet></ROW><ROW><id>20833666</id><snippet>MyTasklet</snippet></ROW><ROW><id>20833666</id><snippet>object</snippet></ROW><ROW><id>20833666</id><snippet>import stackless
class MyTasklet(object):
    def __init__(self, func, msg):
        self.func = func
        self.msg = msg 

    def __call__(self):
      t = stackless.tasklet()
      t.bind(self.func)
      t.setup(self.msg)
      t.run()

def foo(msg):
  print msg 

msg = 'hello'
MyTasklet(foo, msg)()
</snippet></ROW><ROW><id>20833666</id><snippet>__new__</snippet></ROW><ROW><id>20833666</id><snippet>stackless.tasklet.__new__</snippet></ROW><ROW><id>20833666</id><snippet>import stackless
class MyTasklet(stackless.tasklet):
  def __new__(cls, func, msg):
    return stackless.tasklet.__new__(MyTasklet, func)
  def __init__(self, func, msg):
    pass

def foo():
  pass

msg = 'hello'
MyTasklet(foo, msg)()
</snippet></ROW><ROW><id>20833831</id><snippet>&gt;&gt;&gt; def foo():
        print 'foo'



&gt;&gt;&gt; def bar():
        print 'bar'


&gt;&gt;&gt; funcs = {
             'foo':foo,
             'bar':bar
            }
&gt;&gt;&gt; funcs['foo']()
foo
&gt;&gt;&gt; funcs['bar']()
bar
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20833839</id><snippet>89.55.55.55</snippet></ROW><ROW><id>20833839</id><snippet>0.0.0.0</snippet></ROW><ROW><id>20833839</id><snippet>127.0.0.1</snippet></ROW><ROW><id>20834024</id><snippet>get_unique</snippet></ROW><ROW><id>20834024</id><snippet>Language.get_unique(id, name)</snippet></ROW><ROW><id>20834024</id><snippet>Language(id, name)</snippet></ROW><ROW><id>20834076</id><snippet>import mechanize

br = mechanize.Browser()

for x in range(1, 3):
     url = 'http://results.chicagomarathon.com/2013/?page=%d&amp;event=MAR' % (x)
     page = br.open(url)
     print page.read()
</snippet></ROW><ROW><id>20834094</id><snippet>temp = []
for i in range(len(rows) - 2, -1, -1):
    for j in range(i + 1):
        temp.append((i, j))
for (i, j) in temp:
    rows[i][j] += max([rows[i + 1][j], rows[i + 1][j + 1]])
</snippet></ROW><ROW><id>20834094</id><snippet>for i in range(len(rows) - 2, -1, -1):
    for j in range(i + 1):
        rows[i][j] += max([rows[i + 1][j], rows[i + 1][j + 1]])
</snippet></ROW><ROW><id>20834451</id><snippet>bar = json.dumps(foo, ensure_ascii=False)</snippet></ROW><ROW><id>20834451</id><snippet>bar</snippet></ROW><ROW><id>20834451</id><snippet>unicode</snippet></ROW><ROW><id>20834451</id><snippet>bar</snippet></ROW><ROW><id>20834451</id><snippet>str</snippet></ROW><ROW><id>20834523</id><snippet>globals()</snippet></ROW><ROW><id>20834523</id><snippet>myFunc()</snippet></ROW><ROW><id>20834523</id><snippet>var1 = 1
var2 = 2

def myFunc(varname):
    globals()[varname] = 10

print(var1, var2)

myFunc("var1")
myFunc("var2")

print(var1, var2)
</snippet></ROW><ROW><id>20834523</id><snippet>1, 2
10, 10
</snippet></ROW><ROW><id>20835092</id><snippet>options=driver.find_elements_by_class_name("close")
for i in options:
    if i.text=="X"
       i.click()
</snippet></ROW><ROW><id>20835579</id><snippet>from sqlalchemy.dialects.sqlite.base import _DateTimeMixin
</snippet></ROW><ROW><id>20835579</id><snippet>sqlalchemy.databases</snippet></ROW><ROW><id>20835579</id><snippet>lib/sqlalchemy/databases/__init__.py</snippet></ROW><ROW><id>20835663</id><snippet>WSGIScriptAlias /polls /home/ec2-user/srv/mysite/apache/wsgi.py
</snippet></ROW><ROW><id>20835663</id><snippet>os.environ["DJANGO_SETTINGS_MODULE"] = "mysite.settings" 
</snippet></ROW><ROW><id>20835769</id><snippet>import numpy as np
import pandas as pd
from scipy.interpolate import interp1d

np.random.seed(1)
n = 10e4

df = pd.DataFrame({'a': np.random.randn(n), 
                   'b': 10 + np.random.randn(n), 
                   'c': 30 + np.random.randn(n)})

xs = [-10, 0, 10]
cvs = df.columns.values
</snippet></ROW><ROW><id>20835769</id><snippet>%timeit df['n1'] = df.apply(lambda row: np.interp(5, xs, row[cvs]), axis=1)
%timeit df['n2'] = df.apply(lambda row: np.interp(5, xs, tuple([row[j] for j in cvs])), axis=1)
%timeit df['n3'] = interp1d(xs, df[cvs])(5)
</snippet></ROW><ROW><id>20835769</id><snippet>100 loops, best of 3: 13.2 ms per loop
1000 loops, best of 3: 1.24 ms per loop
1000 loops, best of 3: 488 µs per loop
</snippet></ROW><ROW><id>20835769</id><snippet>1 loops, best of 3: 1.33 s per loop
10 loops, best of 3: 109 ms per loop
1000 loops, best of 3: 798 µs per loop
</snippet></ROW><ROW><id>20835769</id><snippet># first one is too slow to wait for
1 loops, best of 3: 10.9 s per loop
10 loops, best of 3: 58.3 ms per loop
</snippet></ROW><ROW><id>20835825</id><snippet>extensions.adblockplus.currentVersion</snippet></ROW><ROW><id>20835825</id><snippet>adblockplus/patterns.ini</snippet></ROW><ROW><id>20835825</id><snippet>/Users/username/Downloads/profilemodel/adblockplus/patterns.ini</snippet></ROW><ROW><id>20835825</id><snippet>ffprofile = webdriver.FirefoxProfile("/Users/username/Downloads/profilemodel");
</snippet></ROW><ROW><id>20836263</id><snippet>if __name__ == "__main__":
    MLL = LinkedList()

    LL1 = LinkedList()
    LL2 = LinkedList()

    array_list1 = [2, 4, 5, 7, 11, 12, 15, 20]
    array_list2 = [3, 6, 9, 10]

    for p in array_list1:
        LL1.addElement(p)

    for q in array_list2:
        LL2.addElement(q)

    cur_node_l1 = LL1.Head
    cur_node_l2 = LL2.Head
    cur_node = MLL.Head; 
    while(cur_node_l1 and cur_node_l2):
        e1 = cur_node_l1.element
        e2 = cur_node_l2.element
        if e1 &lt; e2:
            if not cur_node:
                cur_node =  cur_node_l1;
                MLL.Head = cur_node
            else:
                cur_node.Next = cur_node_l1;
                cur_node = cur_node_l1
            cur_node_l1 = cur_node_l1.Next
#            MLL.TAIL = cur_node_l1;

        else:
            if not cur_node:
                cur_node =  cur_node_l2;
                MLL.Head = cur_node
            else:
                cur_node.Next = cur_node_l2;
                cur_node = cur_node_l2;
            cur_node_l2 = cur_node_l2.Next
#        MLL.TAIL = cur_node_l2;
    if (cur_node_l1):
        cur_node.Next = cur_node_l1
        cur_node = LL1.Tail;
    if (cur_node_l2):
        cur_node.Next = cur_node_l2
        cur_node = LL2.Tail;
    MLL.Tail = cur_node
    MLL.size = LL1.size + LL2.size
    MLL.displayLinkedList()
</snippet></ROW><ROW><id>20836462</id><snippet>data = [
    ('user_name', "Adam 'Adi' Bobek"), ('user_age', 23), ('person_name', "Jurek 'Jerry' Jimowski") ,('person_age', 28),
    ]
data = dict(data)
cols = ",".join(data.keys())
qmarks = ','.join(['?' for s in data.keys()])
values = [v for v in data.values()]
insert_statement = "INSERT INTO users (%s) VALUES (%s);" % (cols, qmarks)

import pyodbc
connection = pyodbc.connect('DSN=pglocal')
cursor = connection.cursor()
cursor.execute(insert_statement, values)
connection.commit()
</snippet></ROW><ROW><id>20836462</id><snippet>pyodbc</snippet></ROW><ROW><id>20836462</id><snippet>odbc</snippet></ROW><ROW><id>20836462</id><snippet>psycopg2</snippet></ROW><ROW><id>20836462</id><snippet>import psycopg2
....
connect_string = 'dbname=test host=localhost port=5493 user=postgres password=postgres'
connection = psycopg2.connect(connect_string)
cursor = connection.cursor()
psycopg_marks  = ','.join(['%s' for s in data.keys()])
insert_statement = "INSERT INTO users (%s) VALUES (%s)" % (cols, psycopg_marks)
cursor.execute(insert_statement, values)
connection.commit()
</snippet></ROW><ROW><id>20837649</id><snippet>"bar-baz"</snippet></ROW><ROW><id>20837649</id><snippet>bar</snippet></ROW><ROW><id>20837649</id><snippet>baz</snippet></ROW><ROW><id>20837898</id><snippet>implicit declaration of function ‘add’</snippet></ROW><ROW><id>20837898</id><snippet>add.h</snippet></ROW><ROW><id>20837898</id><snippet>_add.c</snippet></ROW><ROW><id>20838138</id><snippet>k[120]</snippet></ROW><ROW><id>20838143</id><snippet>s = requests.Session()
s.headers.update({'referer': my_referer})
s.get(url)
</snippet></ROW><ROW><id>20838143</id><snippet>requests.get(url, headers={'referer': my_referer})
</snippet></ROW><ROW><id>20838548</id><snippet>read()</snippet></ROW><ROW><id>20838548</id><snippet>readlines</snippet></ROW><ROW><id>20838548</id><snippet>seek</snippet></ROW><ROW><id>20838548</id><snippet>fread()</snippet></ROW><ROW><id>20838548</id><snippet>InMemoryUploadedFile</snippet></ROW><ROW><id>20838874</id><snippet>enumerate()</snippet></ROW><ROW><id>20838874</id><snippet>for i, item in enumerate(dic):
    if (inp == item) :
        print("Thanks, found the key.")
        break
    if i == len(dic) - 1:
        print('This is the last key in the loop')
</snippet></ROW><ROW><id>20838874</id><snippet>if inp in dic:
    print("The key is in the dictionary")
</snippet></ROW><ROW><id>20838935</id><snippet>countdown</snippet></ROW><ROW><id>20838935</id><snippet>eta</snippet></ROW><ROW><id>20839025</id><snippet>action = {'newChannel': (newChannel, hname),
             'newNetwork': (newNetwork, cname) , 'loginError': (loginError, nName)}

handler, param = action.get(eventType)
handler(param)
</snippet></ROW><ROW><id>20839025</id><snippet>action</snippet></ROW><ROW><id>20839025</id><snippet>def newChannel(cName):
    queue = j.queue(cName)
    r = queue.add_subscribers(*[subscriberCreateChanTable, subscriberSortScenes])

def newNetwork(hName):
    queue = j.queue(hName)
    r = queue.add_subscribers(*[subscriber1a])

def loginError(nName):
    pass

def hName(ok):
    return ok[11][1]

def cName(ok):
    return ok[12][1]

def nName(ok):
    return ok[10][1]

def eventType(ok):
    return ok[9][1]


action = {
    'newChannel': (newChannel, cName),
    'newNetwork': (newNetwork, hName),
    'loginError': (loginError, nName)
     }


ok = parse_qsl(urlparse(u).query, keep_blank_values=True)
handler, getter = action.get(eventType(ok))
handler(getter(ok))
</snippet></ROW><ROW><id>20839025</id><snippet>action = {
    'newChannel': lambda ok: newChannel(cName(ok)),
    'newNetwork': lambda ok: newNetwork(hName(ok)),
    'loginError': lambda ok: loginError(nName(ok))
     }

ok = parse_qsl(urlparse(u).query, keep_blank_values=True)

handler = action.get(eventType(ok))
handler(ok)
</snippet></ROW><ROW><id>20839025</id><snippet>action = {
    'newChannel': lambda ok: newChannel(ok[12][1]),
    'newNetwork': lambda ok: newNetwork(ok[11][1]),
    'loginError': lambda ok: loginError(ok[10][1])
     }
</snippet></ROW><ROW><id>20839063</id><snippet>utf-8</snippet></ROW><ROW><id>20839063</id><snippet>ASCII</snippet></ROW><ROW><id>20839063</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>20839472</id><snippet>setattr(object, attribute, value)</snippet></ROW><ROW><id>20839472</id><snippet>days = ['mon','tues','weds','thurs','fri','sat','sun']
for day in days:
    setattr(form, day + '_start', start_value)
    setattr(form, day + '_end', end_value)
</snippet></ROW><ROW><id>20839472</id><snippet>attribute</snippet></ROW><ROW><id>20839472</id><snippet>value</snippet></ROW><ROW><id>20839472</id><snippet>object</snippet></ROW><ROW><id>20839653</id><snippet>import boto.ec2
conn = boto.ec2.connect_to_region("eu-west-1")
groups = conn.get_all_security_groups()
for group in groups:
    print group.name
    for rule in group.rules:
        print rule.ip_protocol, rule.from_port, rule.to_port, rule.grants
</snippet></ROW><ROW><id>20839653</id><snippet>default
tcp 22 22 [0.0.0.0/0]
tcp 80 80 [0.0.0.0/0]
</snippet></ROW><ROW><id>20839696</id><snippet>from django.contrib.gis.utils import GeoIP
from logger.models import Log # your simple Log model

def get_ip(request):
   xff = request.META.get('HTTP_X_FORWARDED_FOR')
   if xff:
      return xff.split(',')[0]
   return request.META.get('REMOTE_ADDR')

class UserLocationLoggerMiddleware(object):

    def process_request(self, request):
        if request.user and request.user.is_superuser:
            # Only log requests for superusers,
            # you can control this by adding a setting
            # to track other user types
            ip = get_ip(request)
            g = GeoIP()
            lat,long = g.lat_lon(ip)
            Log.objects.create(request.user, ip, lat, long)
</snippet></ROW><ROW><id>20839776</id><snippet>if event.unicode.isalpha():
    if len(name) &lt; 3:
        if event.unicode == 3:
            name += 0
        else:
            name += event.unicode
</snippet></ROW><ROW><id>20839795</id><snippet>_SUFFIXES</snippet></ROW><ROW><id>20839795</id><snippet>importlib.machinery</snippet></ROW><ROW><id>20839795</id><snippet>imp.get_suffixes()</snippet></ROW><ROW><id>20839875</id><snippet>not</snippet></ROW><ROW><id>20839875</id><snippet>return</snippet></ROW><ROW><id>20839875</id><snippet>return (not self.myReturnCode)</snippet></ROW><ROW><id>20839875</id><snippet>not</snippet></ROW><ROW><id>20839875</id><snippet>True</snippet></ROW><ROW><id>20839875</id><snippet>False</snippet></ROW><ROW><id>20839875</id><snippet>self.myReturnCode</snippet></ROW><ROW><id>20839875</id><snippet>not self.myReturnCode</snippet></ROW><ROW><id>20839875</id><snippet>False</snippet></ROW><ROW><id>20839875</id><snippet>self.myReturnCode</snippet></ROW><ROW><id>20839875</id><snippet>not</snippet></ROW><ROW><id>20839875</id><snippet>True</snippet></ROW><ROW><id>20839875</id><snippet>False</snippet></ROW><ROW><id>20839875</id><snippet>externalProcessPopen.returncode</snippet></ROW><ROW><id>20839875</id><snippet>0</snippet></ROW><ROW><id>20839875</id><snippet>not 0</snippet></ROW><ROW><id>20839875</id><snippet>True</snippet></ROW><ROW><id>20839875</id><snippet>not 1</snippet></ROW><ROW><id>20839875</id><snippet>False</snippet></ROW><ROW><id>20839875</id><snippet>None</snippet></ROW><ROW><id>20839875</id><snippet>True</snippet></ROW><ROW><id>20839875</id><snippet>not None</snippet></ROW><ROW><id>20839875</id><snippet>True</snippet></ROW><ROW><id>20839875</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>20839875</id><snippet>None</snippet></ROW><ROW><id>20839889</id><snippet>.values</snippet></ROW><ROW><id>20839889</id><snippet>&gt;&gt;&gt; s = df['A']
&gt;&gt;&gt; s.index
MultiIndex
[(u'one', 1), (u'one', 2), (u'one', 3), (u'two', 1), (u'two', 2), (u'two', 3)]
&gt;&gt;&gt; s.index.values
array([('one', 1L), ('one', 2L), ('one', 3L), ('two', 1L), ('two', 2L),
       ('two', 3L)], dtype=object)
&gt;&gt;&gt; s.index.get_indexer([('one',1), ('two', 2)])
array([0, 4])
</snippet></ROW><ROW><id>20839889</id><snippet>&gt;&gt;&gt; s.index = np.arange(6)
&gt;&gt;&gt; s.index
Int64Index([0, 1, 2, 3, 4, 5], dtype=int64)
&gt;&gt;&gt; s.index.get_indexer([0,4])
array([0, 4])
&gt;&gt;&gt; s.index.values
array([0, 1, 2, 3, 4, 5], dtype=int64)
</snippet></ROW><ROW><id>20839904</id><snippet>][</snippet></ROW><ROW><id>20839904</id><snippet>templatetags</snippet></ROW><ROW><id>20839904</id><snippet>from django import template
from django.template.defaultfilters import stringfilter

register = template.Library()

@register.tag(name='captureas')
def do_captureas(parser, token):
    try:
        tag_name, args = token.contents.split(None, 1)
    except ValueError:
        raise template.TemplateSyntaxError("'captureas' node requires a variable name.")
    nodelist = parser.parse(('endcaptureas',))
    parser.delete_first_token()
    return CaptureasNode(nodelist, args)

class CaptureasNode(template.Node):
    def __init__(self, nodelist, varname):
        self.nodelist = nodelist
        self.varname = varname

    def render(self, context):
        output = self.nodelist.render(context)
        context[self.varname] = output
        return ''


@register.filter(name='join_my_tags')
@stringfilter
def join_my_tags(text):
    return text.replace(' ][ ', '')
</snippet></ROW><ROW><id>20839904</id><snippet>{% captureas my_tags %}{% tag_one "1A" "1B" %}{% tag_two "2A" %}{% endcaptureas %}
{{my_tags|join_my_tags}}
</snippet></ROW><ROW><id>20839904</id><snippet>from django.shortcuts import render

def index(request):
    myresponse = render(request, 'index.html')  # add your context object if you need it
    return HttpResponse(myresponse.content.replace(' ][ ', '')) # you may eventually use regex or eventually even a full html parser (!) but please take performances in account :)
</snippet></ROW><ROW><id>20840113</id><snippet>//
//  Hello World server in C++
//  Binds REP socket to tcp://*:5555
//  Expects "Hello" from client, replies with "World"
//
#include &lt;zmq.hpp&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;
#ifndef _WIN32
#include &lt;unistd.h&gt;
#else
#include &lt;windows.h&gt;
#endif

int main () {
    //  Prepare our context and socket
    zmq::context_t context (1);
    zmq::socket_t socket (context, ZMQ_REP);
    socket.bind ("tcp://*:5555");

    while (true) {
        zmq::message_t request;

        //  Wait for next request from client
        socket.recv (&amp;request);
        std::cout &lt;&lt; "Received Hello" &lt;&lt; std::endl;

        //  Do some 'work'
#ifndef _WIN32
        sleep(1);
#else
    Sleep (1);
#endif

        //  Send reply back to client
        zmq::message_t reply (5);
        memcpy ((void *) reply.data (), "World", 5);
        socket.send (reply);
    }
    return 0;
}
</snippet></ROW><ROW><id>20840113</id><snippet>#
#   Hello World client in Python
#   Connects REQ socket to tcp://localhost:5555
#   Sends "Hello" to server, expects "World" back
#
import zmq

context = zmq.Context()

#  Socket to talk to server
print "Connecting to hello world server…"
socket = context.socket(zmq.REQ)
socket.connect("tcp://localhost:5555")

#  Do 10 requests, waiting each time for a response
for request in range(10):
    print "Sending request %s …" % request
    socket.send("Hello")

    #  Get the reply.
    message = socket.recv()
    print "Received reply %s [ %s ]" % (request, message)
</snippet></ROW><ROW><id>20840263</id><snippet>from lxml import etree

f = """&lt;root&gt;
  &lt;trigger name="trigger_a"&gt;
    &lt;config_a&gt;10&lt;/config_a&gt;
    &lt;config_b&gt;4&lt;/config_b&gt;
    &lt;config_c&gt;true&lt;/config_c&gt;
  &lt;/trigger&gt;
  &lt;trigger name="trigger_b"&gt;
    &lt;config_a&gt;11&lt;/config_a&gt;
    &lt;config_b&gt;5&lt;/config_b&gt;
    &lt;config_c&gt;false&lt;/config_c&gt;
  &lt;/trigger&gt;
&lt;/root&gt;"""

tree = etree.XML(f)
# uncomment the next line if you want to parse a file
# tree = etree.parse(file_object)

def getTriggerConfig(myname):
   # here "tree" is hardcoded, assuming it is available in the function scope. You may add it as parameter, if you like.
   elements = tree[0].xpath("//trigger[@name=$name]/*", name = myname)
   # If reading from file uncomment the following line since parse() returns an ElementTree object, not an Element object as the string parser functions.
   #elements = tree.xpath("//trigger[@name=$name]/*", name = myname)
   for child in elements:
       print("Config %s is: %s"%(child.tag[7:], child.text))
</snippet></ROW><ROW><id>20840263</id><snippet>getTriggerConfig('trigger_a')
</snippet></ROW><ROW><id>20840263</id><snippet>Config a is: 10
Config b is: 4
Config c is: true
</snippet></ROW><ROW><id>20840327</id><snippet>mark = mark.resize(scale)
</snippet></ROW><ROW><id>20840327</id><snippet>mark = mark.resize(scale, Image.ANTIALIAS)
</snippet></ROW><ROW><id>20840327</id><snippet>quality=100</snippet></ROW><ROW><id>20840816</id><snippet>int()</snippet></ROW><ROW><id>20840816</id><snippet>x = int(x == 'true')
</snippet></ROW><ROW><id>20840816</id><snippet>int()</snippet></ROW><ROW><id>20840816</id><snippet>1</snippet></ROW><ROW><id>20840816</id><snippet>0</snippet></ROW><ROW><id>20840816</id><snippet>'true'</snippet></ROW><ROW><id>20840816</id><snippet>0</snippet></ROW><ROW><id>20841481</id><snippet>re.findall(r'(?&lt;=&lt;a href=")[^"]*',yourStr)
</snippet></ROW><ROW><id>20841562</id><snippet>def make_tree(task_dict, node):
    tree = {"name": node}
    if task_dict[node]:
        tree["children"] = [make_tree(task_dict, child) for child in task_dict[node]]
    return tree
</snippet></ROW><ROW><id>20841562</id><snippet>str()</snippet></ROW><ROW><id>20841562</id><snippet>node</snippet></ROW><ROW><id>20841562</id><snippet>tree</snippet></ROW><ROW><id>20841562</id><snippet>task_dict</snippet></ROW><ROW><id>20841562</id><snippet>&gt;&gt;&gt; print(json.dumps(make_tree(task_dict, 444), indent=2))
{
  "children": [
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "name": 220
                }
              ], 
              "name": 221
            }, 
            {
              "children": [
                {
                  "name": 220
                }
              ], 
              "name": 222
            }
          ], 
          "name": 223
        }
      ], 
      "name": 224
    }, 
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "name": 230
                }
              ], 
              "name": 231
            }, 
            {
              "children": [
                {
                  "name": 230
                }
              ], 
              "name": 232
            }
          ], 
          "name": 233
        }
      ], 
      "name": 234
    }
  ], 
  "name": 444
}
</snippet></ROW><ROW><id>20841605</id><snippet>prices = {'banana': 4, 'apple': 2, 'orange': 1.5, 'pear': 3}
stock = {'banana': 6, 'apple': 0, 'orange': 32, 'pear': 15}

for key in prices:
    print key
    print "price: %s" % prices[key]
    try:
        print "stock: %s" % stock[key]
    except KeyError:
        print "stock: KeyError"
</snippet></ROW><ROW><id>20841605</id><snippet>orange
price: 1.5
stock: 32
pear
price: 3
stock: 15
banana
price: 4
stock: 6
apple
price: 2
stock: 0
</snippet></ROW><ROW><id>20841605</id><snippet>items = {'banana': {'price': 4,   'stock': 6 },
         'apple':  {'price': 2,   'stock': 0 },
         'orange': {'price': 1.5, 'stock': 32},
         'pear':   {'price': 3,   'stock': 15},
        }

for key in items:
    print key
    print "price: %s" % items[key]['price']
    print "stock: %s" % items[key]['stock']
</snippet></ROW><ROW><id>20841909</id><snippet>&gt;&gt;&gt; np.__version__
1.8.0
&gt;&gt;&gt; fp100 = sp.polyfit(x, y, 100)
polynomial.py:587: RankWarning: Polyfit may be poorly conditioned
  warnings.warn(msg, RankWarning)
&gt;&gt;&gt; f100 = sp.poly1d(fp100)
&gt;&gt;&gt; f100.order
53
</snippet></ROW><ROW><id>20841909</id><snippet>y</snippet></ROW><ROW><id>20841909</id><snippet>&gt;&gt;&gt; y.mean()
1961.7438692098092
&gt;&gt;&gt; y.std()
860.64491521872196
</snippet></ROW><ROW><id>20841909</id><snippet>x-x.mean()</snippet></ROW><ROW><id>20841909</id><snippet>&gt;&gt;&gt; xp=x-x.mean()
&gt;&gt;&gt; f100 = sp.poly1d(sp.polyfit(xp, y,100))
&gt;&gt;&gt; max(abs(f100(xp)-y)/y)
2.1173504721727299
&gt;&gt;&gt; abs((f100(xp)-y)/y).mean()
0.18100985148093593

&gt;&gt;&gt; f4 = sp.poly1d(sp.polyfit(xp, y, 4))
&gt;&gt;&gt; max(abs(f4(xp)-y)/y)
2.1228866902203842
&gt;&gt;&gt; abs((f4(xp)-y)/y).mean()
0.20139219654066282

&gt;&gt;&gt; print f4
           4             3             2
8.827e-08 x + 3.161e-05 x + 0.0003102 x + 0.06247 x + 1621
</snippet></ROW><ROW><id>20842032</id><snippet>global</snippet></ROW><ROW><id>20842032</id><snippet>return</snippet></ROW><ROW><id>20842032</id><snippet>return</snippet></ROW><ROW><id>20842032</id><snippet>NameError</snippet></ROW><ROW><id>20842052</id><snippet>scipy.__version___</snippet></ROW><ROW><id>20842233</id><snippet>AttributeError</snippet></ROW><ROW><id>20842233</id><snippet>pid</snippet></ROW><ROW><id>20842233</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>20842233</id><snippet>AttributeError</snippet></ROW><ROW><id>20842283</id><snippet>.ix</snippet></ROW><ROW><id>20842283</id><snippet>[]</snippet></ROW><ROW><id>20842283</id><snippet>.ix/.loc</snippet></ROW><ROW><id>20842283</id><snippet>DataFrame(...).ix[row_indexer,column_indexer]
Series(...).ix[row_indexer]
</snippet></ROW><ROW><id>20842283</id><snippet>.ix</snippet></ROW><ROW><id>20842283</id><snippet>.loc/.iloc</snippet></ROW><ROW><id>20842836</id><snippet>import pandas, numpy
ewma = pandas.stats.moments.ewma
EMOV_n = ewma( ys, com=2 )
</snippet></ROW><ROW><id>20842836</id><snippet>com</snippet></ROW><ROW><id>20842836</id><snippet>EMOV_n</snippet></ROW><ROW><id>20842836</id><snippet>Xs</snippet></ROW><ROW><id>20842836</id><snippet>Xs = numpy.vstack((Xs,EMOV_n))
</snippet></ROW><ROW><id>20842836</id><snippet>from sklearn import linear_model
clf = linear_model.LinearRegression()
clf.fit ( Xs, ys )
print clf.coef_
</snippet></ROW><ROW><id>20843105</id><snippet>None</snippet></ROW><ROW><id>20843105</id><snippet>NULL</snippet></ROW><ROW><id>20843105</id><snippet>foobar = FooBar(some_field=None)
</snippet></ROW><ROW><id>20843181</id><snippet>d = 90
distance = d * 0.014472
#1 mile = 0.014472 degrees  

r1 = -0.1198244
r2 = 51.5112139

# load long[1], lat[0] into shapely
center_point = Point(r1, r2)
# 'POINT (-0.1198244000000000 51.5112138999999871)'

wkb_element = from_shape(center_point)

users = DBSession.query(User).\
    filter(func.ST_DFullyWithin(User.location,  wkb_element, distance)).all()
</snippet></ROW><ROW><id>20843329</id><snippet>xhtml2pdf</snippet></ROW><ROW><id>20843329</id><snippet>background-image</snippet></ROW><ROW><id>20843329</id><snippet>@page</snippet></ROW><ROW><id>20843329</id><snippet>pdftk</snippet></ROW><ROW><id>20843329</id><snippet>background</snippet></ROW><ROW><id>20843388</id><snippet>join</snippet></ROW><ROW><id>20843388</id><snippet>'\n'.join(['first line', 'second line', 'third line'])
</snippet></ROW><ROW><id>20843388</id><snippet>with open('output.txt', 'w') as f:
    f.write(some_string)
</snippet></ROW><ROW><id>20843426</id><snippet>import nltk
nltk.download()
</snippet></ROW><ROW><id>20843567</id><snippet>.lstrip()</snippet></ROW><ROW><id>20843567</id><snippet>p</snippet></ROW><ROW><id>20843567</id><snippet>r</snippet></ROW><ROW><id>20843567</id><snippet>a</snippet></ROW><ROW><id>20843567</id><snippet>d</snippet></ROW><ROW><id>20843567</id><snippet>e</snippet></ROW><ROW><id>20843567</id><snippet>pradeep</snippet></ROW><ROW><id>20843567</id><snippet>e</snippet></ROW><ROW><id>20843567</id><snippet>d</snippet></ROW><ROW><id>20843567</id><snippet>.lstrip('drape')</snippet></ROW><ROW><id>20843567</id><snippet>.lstrip('adepr')</snippet></ROW><ROW><id>20843567</id><snippet>example = 'pradeep'
example[5:] if example.startswith('prade') else example
</snippet></ROW><ROW><id>20843567</id><snippet>def remove_start(inputstring, word_to_remove):
    return inputstring[len(word_to_remove):] if inputstring.startswith(word_to_remove) else inputstring
</snippet></ROW><ROW><id>20843567</id><snippet>&gt;&gt;&gt; def remove_start(inputstring, word_to_remove):
...     return inputstring[len(word_to_remove):] if inputstring.startswith(word_to_remove) else inputstring
... 
&gt;&gt;&gt; remove_start('pradeep', 'prade')
'ep'
</snippet></ROW><ROW><id>20843682</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>20843682</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; html = '&lt;p&gt;&lt;img src="center.jpg"&gt;&lt;a href="?center"&gt;center&lt;/a&gt;TEXT&lt;img src="right.jpg"&gt;&lt;a href="?rightspan"&gt;right&lt;/a&gt; MORE TEXT&lt;img src="another.jpg"&gt;&lt;/p&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; for m in soup.findAll(['a', 'img']):
...   if m.parent.name == 'p':
...      m.replaceWith('')

&gt;&gt;&gt; print soup

&lt;p&gt;TEXT MORE TEXT&lt;/p&gt;
</snippet></ROW><ROW><id>20843682</id><snippet>&lt;a&gt;, &lt;/a&gt;</snippet></ROW><ROW><id>20843682</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>20843682</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>20843682</id><snippet>find_all()</snippet></ROW><ROW><id>20843682</id><snippet>replace_with()</snippet></ROW><ROW><id>20843735</id><snippet>loc = re.compile('(?:^|or)\s*([^,]+),\s([A-Z]+)')
</snippet></ROW><ROW><id>20843793</id><snippet>/x outfile    Silently save XML information to &lt;outfile&gt; and quit. 

/t outfile    Silently save txt information to &lt;outfile&gt; and quit.
</snippet></ROW><ROW><id>20843861</id><snippet>sieve = range(3, n+1, 2)
</snippet></ROW><ROW><id>20843861</id><snippet>(5*10^7)*4 bytes
 ~ 200 MB
</snippet></ROW><ROW><id>20843861</id><snippet>[0] * -((bottom-top)//si) 
</snippet></ROW><ROW><id>20843962</id><snippet>\unnnn</snippet></ROW><ROW><id>20843962</id><snippet>&gt;&gt;&gt; 'J\u00e2nis'
'Jânis'
</snippet></ROW><ROW><id>20843962</id><snippet>bytes.decode</snippet></ROW><ROW><id>20843962</id><snippet>utf-8</snippet></ROW><ROW><id>20843962</id><snippet>&gt;&gt;&gt; b'J\xc3\xa2nis'.decode('utf-8')
'Jânis'
</snippet></ROW><ROW><id>20843962</id><snippet>%C3%A2</snippet></ROW><ROW><id>20843962</id><snippet>urllib.parse.unquote</snippet></ROW><ROW><id>20843962</id><snippet>&gt;&gt;&gt; import urllib.parse
&gt;&gt;&gt; urllib.parse.unquote('J%c3%a2nis', encoding='utf-8')
'Jânis'
</snippet></ROW><ROW><id>20844139</id><snippet>try:
    with open('test.txt', 'r') as ins: #Opens the file and closes it when Pyhton is done with it
        array = []
        for line in ins:
            array.append(line.rstrip()) # appends each line of the file with trailing white space stripped

        for fahad in array:
            fahad += ".php" # for each item in the list 'array' it concatenates '.php' on to the end. The += operator is the same as fahad = fahad + '.php'
            print(fahad)

except FileNotFoundError: # this is part of a try/except block. If the file isn't found instead of throwing an error this will trigger. Right now nothing happens because of the pass statement but you can change that to print something if you like.
    pass
</snippet></ROW><ROW><id>20844139</id><snippet>&gt;&gt;&gt; fahad
'admin administrator adm log login.php'
</snippet></ROW><ROW><id>20844150</id><snippet>$.ajax({
            url: "http://localhost/cgi-bin/variousTests/post.py",
            type: "POST",
            data: {foo: 'bar', bar: 'foo'},
            success: function(response){
                    $("#div").html(response);
                }
       });
</snippet></ROW><ROW><id>20844150</id><snippet>#!/usr/bin/python

import cgi, cgitb 
cgitb.enable()  # for troubleshooting

#the cgi library gets vars from html
data = cgi.FieldStorage()
#this is the actual output
print "Content-Type: text/html\n"
print "The foo data is: " + data["foo"].value
print "&lt;br /&gt;"
print "The bar data is: " + data["bar"].value
print "&lt;br /&gt;"
print data
</snippet></ROW><ROW><id>20844271</id><snippet>import urllib2
f = urllib2.urlopen(str(Hyperlink), timeout=2)
</snippet></ROW><ROW><id>20844326</id><snippet>def hello_world():
    tmpl = env.get_template('index.html')
    sidebar = env.get_template('sidebar.html')
    js_url = url_for('static', filename='js/main.js')
    return tmpl.render(root_url="",sidebar=sidebar.render(), jsurl=js_url)
</snippet></ROW><ROW><id>20844326</id><snippet>&lt;script type="text/javascript" src="{{jsurl}}"&gt;&lt;/script&gt;</snippet></ROW><ROW><id>20844552</id><snippet>from threading import Thread
t = Thread(target=self.ReadThread)
t.setDaemon(True)
</snippet></ROW><ROW><id>20844584</id><snippet>pcolor</snippet></ROW><ROW><id>20844584</id><snippet>imshow</snippet></ROW><ROW><id>20844584</id><snippet>import numpy as np
import matplotlib.pyplot as plt
fig, ax = plt.subplots()
Z = np.random.random(size=(7,7))
x = 10.0 ** np.arange(-2, 5)
y = 10.0 ** np.arange(-4, 3)
ax.set_yscale('log')
ax.set_xscale('log')
ax.pcolor(x, y, Z)
</snippet></ROW><ROW><id>20844591</id><snippet>save</snippet></ROW><ROW><id>20844591</id><snippet>success</snippet></ROW><ROW><id>20844591</id><snippet>save</snippet></ROW><ROW><id>20844591</id><snippet>success</snippet></ROW><ROW><id>20844591</id><snippet>xhr</snippet></ROW><ROW><id>20844591</id><snippet>options</snippet></ROW><ROW><id>20844591</id><snippet>getResponseHeader('location')</snippet></ROW><ROW><id>20844591</id><snippet>window</snippet></ROW><ROW><id>20844591</id><snippet>model.save({}, {
  success: function(model, response, options){
    window.location = options.xhr.getResponseHeader('location');
  })
});
</snippet></ROW><ROW><id>20844591</id><snippet>from pyramid.view import view_config

class MyObject(object):
    def __init__(self, x):
        self.x = x

    def __json__(self, request):
        return {'x':self.x}

@view_config(renderer='json')
def object(request):
    request.response.location = "http://LocationToRedirectTo.com"
    return MyObject(1)

# the JSON value returned by ``object`` will be:
#    {"x": 1}
</snippet></ROW><ROW><id>20844591</id><snippet>MyObject</snippet></ROW><ROW><id>20844834</id><snippet>max(bar, key=lambda x: abs(x[0]))
</snippet></ROW><ROW><id>20844834</id><snippet>bar=[[-1,3],[5,2],[-8,2]]
foo=max(bar,key=lambda x: abs(x[0]))
#foo = [-8,2]
</snippet></ROW><ROW><id>20844866</id><snippet>font</snippet></ROW><ROW><id>20844866</id><snippet>import pygame.font

font = pygame.font.Font(None, 36) # None can be a font file instead
text = font.render("Welcome to Earth", 1, (0, 0, 0))
# Determine the location that should be allocated for the text
text_box = text.get_rect(centerx=DISPLAYSURF.get_width()/2)
# Draw the text onto the background
background.blit(text, text_box)
</snippet></ROW><ROW><id>20844867</id><snippet>ret = rrdtool.update('temperature.rrd', 'N:%s' % temp)
</snippet></ROW><ROW><id>20844867</id><snippet>rrdtool update temperature.rrd N: 65.6
</snippet></ROW><ROW><id>20844867</id><snippet>rrdtool update temperature.rrd N:65.6
</snippet></ROW><ROW><id>20844982</id><snippet>groupby</snippet></ROW><ROW><id>20844982</id><snippet>sum</snippet></ROW><ROW><id>20844982</id><snippet>zip</snippet></ROW><ROW><id>20844982</id><snippet>import pandas as pd
import numpy as np
from itertools import product

np.random.seed(1)

periods = range(0,3)
categories = list('ABC')

rows = list(product(periods, categories)) * 2
n = len(rows)

df = pd.DataFrame({'Projected': np.random.randn(n), 
                   'Actual': np.random.randn(n), 
                   'Previous': np.random.randn(n)},
                  index = pd.MultiIndex.from_tuples(rows))
df.index.names = ['Period', 'Category']
summed = df.groupby(level=['Period', 'Category']).sum()
summed['tuple'] = zip(*[summed[c] for c in ['Projected', 'Actual', 'Previous']])
result = summed['tuple'].unstack('Period')
</snippet></ROW><ROW><id>20844982</id><snippet>andback = result.stack().apply(lambda t: pd.Series({'Projected': t[0],
                                              'Actual': t[1],
                                              'Previous': t[2]}))
</snippet></ROW><ROW><id>20845142</id><snippet>max()</snippet></ROW><ROW><id>20845142</id><snippet>key = lambda rec: rec['date_time']</snippet></ROW><ROW><id>20845142</id><snippet>from itertools import groupby
recs = [{'data': '3.50.1', 'date_time': '20131213-100308', 'version': '8.0.22'},
        {'data': '3.50.1', 'date_time': '20131230-100308', 'version': '8.0.22'},
   {'data': '3.47.0', 'date_time': '20131213-150410', 'version': '8.0.21'}]

filtered_recs = []
for key, group_iter in groupby(recs, lambda rec: rec['data']):
    recent_rec = max(group_iter, key = lambda rec: rec['date_time'])
    filtered_recs.append(recent_rec)

filtered_recs
=&gt; 
[{'data': '3.50.1', 'date_time': '20131230-100308', 'version': '8.0.22'},
 {'data': '3.47.0', 'date_time': '20131213-150410', 'version': '8.0.21'}]
</snippet></ROW><ROW><id>20845142</id><snippet>recs.sort(key=lambda rec: rec['data'])
</snippet></ROW><ROW><id>20845142</id><snippet>groupby</snippet></ROW><ROW><id>20845142</id><snippet>itertools.groupby</snippet></ROW><ROW><id>20845142</id><snippet>def groupby(seq, func):
    groups = {}
    for x in seq:
        y = func(x)
        groups.setdefault(y, []).append(x)
    return groups
</snippet></ROW><ROW><id>20845142</id><snippet>groupby</snippet></ROW><ROW><id>20845142</id><snippet>groupby(recs, lambda rec: (rec['data'], rec['version']) ):</snippet></ROW><ROW><id>20845148</id><snippet>p</snippet></ROW><ROW><id>20845148</id><snippet>g</snippet></ROW><ROW><id>20845148</id><snippet>p</snippet></ROW><ROW><id>20845148</id><snippet>p</snippet></ROW><ROW><id>20845148</id><snippet>p = 6</snippet></ROW><ROW><id>20845148</id><snippet>p</snippet></ROW><ROW><id>20845148</id><snippet>f()</snippet></ROW><ROW><id>20845148</id><snippet>make_fun()</snippet></ROW><ROW><id>20845148</id><snippet>p</snippet></ROW><ROW><id>20845148</id><snippet>p</snippet></ROW><ROW><id>20845195</id><snippet>pelicanconf.py</snippet></ROW><ROW><id>20845195</id><snippet>publishconf.py</snippet></ROW><ROW><id>20845195</id><snippet>GOOGLE_ANALYTICS</snippet></ROW><ROW><id>20845195</id><snippet>publishconf.py</snippet></ROW><ROW><id>20845195</id><snippet>pelicanconf.py</snippet></ROW><ROW><id>20845195</id><snippet>pelicanconf.py</snippet></ROW><ROW><id>20845195</id><snippet>publishconf.py</snippet></ROW><ROW><id>20845195</id><snippet>pelican content -s publishconf.py
</snippet></ROW><ROW><id>20845195</id><snippet>pelican</snippet></ROW><ROW><id>20845195</id><snippet>fab publish
</snippet></ROW><ROW><id>20845195</id><snippet>make publish
</snippet></ROW><ROW><id>20845452</id><snippet>a href="{{ url_for('myRoute', varToBePassed = templateVar ) }}" &gt;
</snippet></ROW><ROW><id>20845479</id><snippet>self.renderText()
self.drawHint()
self.surface.blit(self.background, (0, 0))
</snippet></ROW><ROW><id>20845479</id><snippet>self.surface</snippet></ROW><ROW><id>20845479</id><snippet>self.surface</snippet></ROW><ROW><id>20845479</id><snippet>self.surface</snippet></ROW><ROW><id>20845479</id><snippet>self.surface.blit(self.background, (0, 0))
self.renderText()
self.drawHint()
</snippet></ROW><ROW><id>20845600</id><snippet>00:00:35</snippet></ROW><ROW><id>20845600</id><snippet>frames_load=0</snippet></ROW><ROW><id>20845600</id><snippet>end['timestamp'] - start['timestamp']</snippet></ROW><ROW><id>20845600</id><snippet>0</snippet></ROW><ROW><id>20845600</id><snippet>frames_load=timedelta()</snippet></ROW><ROW><id>20845600</id><snippet>times_start_dict = [{'timestamp': datetime(2013, 12, 21, 4, 36, 23)}, 
                    {'timestamp': datetime(2013, 12, 21, 4, 36, 23)}]
times_end_dict = [{'timestamp': datetime(2013, 12, 21, 4, 36, 25)}, 
                  {'timestamp': datetime(2013, 12, 21, 4, 36, 26)}]
print sum((end['timestamp'] - start['timestamp'] 
             for start, end in zip(times_start_dict, times_end_dict)),
          timedelta())

# 0:00:05
</snippet></ROW><ROW><id>20845656</id><snippet>&gt;&gt;&gt; (u''+'New York\u200b').encode('utf-8')
'New York\\u200b'
</snippet></ROW><ROW><id>20845656</id><snippet>'New York\u200b'</snippet></ROW><ROW><id>20845656</id><snippet>\u</snippet></ROW><ROW><id>20845656</id><snippet>\</snippet></ROW><ROW><id>20845656</id><snippet>u</snippet></ROW><ROW><id>20845656</id><snippet>2</snippet></ROW><ROW><id>20845656</id><snippet>0</snippet></ROW><ROW><id>20845656</id><snippet>0</snippet></ROW><ROW><id>20845656</id><snippet>b</snippet></ROW><ROW><id>20845656</id><snippet>14</snippet></ROW><ROW><id>20845656</id><snippet>u''</snippet></ROW><ROW><id>20845656</id><snippet>u</snippet></ROW><ROW><id>20845656</id><snippet>text = u''+'New York\u200b'
print text.encode('ascii', errors='ignore')
New York\u200b
</snippet></ROW><ROW><id>20845656</id><snippet>.encode</snippet></ROW><ROW><id>20845656</id><snippet>unicode</snippet></ROW><ROW><id>20845656</id><snippet>str</snippet></ROW><ROW><id>20845656</id><snippet>&gt;&gt;&gt; print(u'New York\u200b')  # note: \u200b interpreted as unicode character
New York
&gt;&gt;&gt; print(b'New York\u200b'.decode('ascii'))
New York\u200b
</snippet></ROW><ROW><id>20845656</id><snippet>&gt;&gt;&gt; print(u'New York\u2603')
New York☃
&gt;&gt;&gt; print(b'New York\u2603'.decode('ascii'))
New York\u2603
</snippet></ROW><ROW><id>20845724</id><snippet>text = "\n\n#bogus\nTags: #foo #bar\n"
</snippet></ROW><ROW><id>20845724</id><snippet>line = re.findall(r'Tags:.+\n', text)
# line = ['Tags: #foo #bar\n']
</snippet></ROW><ROW><id>20845724</id><snippet>tags = re.findall(r'#(\w+)', line[0])
# tags = ['foo', 'bar']
tags = re.findall(r'#\w+', line[0])
# tags = ['#foo', '#bar']
</snippet></ROW><ROW><id>20845803</id><snippet>Decimal</snippet></ROW><ROW><id>20845803</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; square(Decimal(line.strip()) for line in open("numbers.txt")
[Decimal("4.0"), Decimal("9.0"), ...]
</snippet></ROW><ROW><id>20845803</id><snippet>&gt;&gt;&gt; square(42)
…
TypeError: 'int' object isn't iterable
</snippet></ROW><ROW><id>20845803</id><snippet>list</snippet></ROW><ROW><id>20845803</id><snippet>deque</snippet></ROW><ROW><id>20845803</id><snippet>if not isinstance(input, deque): raise TypeError("a deque must be used!")</snippet></ROW><ROW><id>20845875</id><snippet>stream=True</snippet></ROW><ROW><id>20845875</id><snippet>Response.iter_content()</snippet></ROW><ROW><id>20845875</id><snippet>Session</snippet></ROW><ROW><id>20845993</id><snippet>from random import sample
print(''.join(sample(items, x)))
</snippet></ROW><ROW><id>20845993</id><snippet>x</snippet></ROW><ROW><id>20845993</id><snippet>while len(items) &lt; x:
    items += items
</snippet></ROW><ROW><id>20845994</id><snippet>In [1]: import os

In [2]: cwd = os.getcwd()

In [3]: files = os.listdir(cwd)

In [4]: files
Out[4]: ['Hello.taskpaper', 'My Todos.taskpaper', 'Tips &amp; Tricks.taskpaper']

In [5]: os.stat(cwd)
Out[5]: posix.stat_result(st_mode=16877, st_ino=393413, st_dev=16777217L, st_nlink=5, st_uid=501, st_gid=20, st_size=170, st_atime=1388431093, st_mtime=1362280774, st_ctime=1362280774)

In [6]: for f in files:
   ...: 
Display all 324 possibilities? (y or n) 
   ...: 
   ...:     print os.stat(f)
   ...: 
posix.stat_result(st_mode=33188, st_ino=406919, st_dev=16777217L, st_nlink=1, st_uid=501, st_gid=20, st_size=437, st_atime=1387857115, st_mtime=1341158105, st_ctime=1345503808)
posix.stat_result(st_mode=33188, st_ino=405425, st_dev=16777217L, st_nlink=1, st_uid=501, st_gid=20, st_size=238, st_atime=1387857115, st_mtime=1350748953, st_ctime=1350783773)
posix.stat_result(st_mode=33188, st_ino=414444, st_dev=16777217L, st_nlink=1, st_uid=501, st_gid=20, st_size=2560, st_atime=1387857115, st_mtime=1341158105, st_ctime=1345503292)
</snippet></ROW><ROW><id>20845994</id><snippet>In [1]: import os

In [2]: cwd = os.getcwd()

In [3]: files = os.listdir(cwd)

In [4]: files
Out[4]: ['fsys', 'Hello.taskpaper', 'My Todos.taskpaper', 'Tips &amp; Tricks.taskpaper']

In [5]: files_fsys = os.listdir(files[1])
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
&lt;ipython-input-5-7ca409829c27&gt; in &lt;module&gt;()
----&gt; 1 files_fsys = os.listdir(files[1])

OSError: [Errno 20] Not a directory: 'Hello.taskpaper'

In [6]: files_fsys = os.listdir(files[0])

In [7]: files_fsys
Out[7]: []
</snippet></ROW><ROW><id>20846029</id><snippet>try:
    with open('SSID.txt', 'r') as s:
        ssid_dict = {}
        for each_line in s:
            ssid_dict[each_line.strip()] = 0 #key: SSID value: count
except FileNotFoundError:
    pass

try:
    with open('kissmet.nettext', 'r') as f:
        try:
            for each_line in f:
                each_line = each_line.strip()
                if each_line.startswith("SSID") and ':' in each_line: #checks for a line that starts with 'SSID' and contains a ':'
                    val = each_line.split(':')[1].replace('"', '').strip() #splits the line to get the SSID, removes the quotes
                    if ssid_dict[val]:
                        ssid_dict[val] += 1 #adds one to the count in the dictionary
                    else:
                        pass#I don't know what you want to do here
        except KeyError as err:
            print("Key error" + str(err))
except FileNotFoundError:
    pass

for key in ssid_dict:
    print(str(key) + " " + str(ssid_dict[key]))
</snippet></ROW><ROW><id>20846029</id><snippet>Wireless 0
101 0
Belkin54g 0
tsunami 0
tmobile 0
&lt;hidden ssid&gt; 0
linksys-g 0
smc 0
hpsetup 0
ACTIONTEC 0
SpeedStream 0
Internet 1
3Com 0
home 0
USR8054 0
&lt;no ssid&gt; 0
WLAN 0
NETGEAR 0
default 0
MSHOME 0
linksys 0
orange 0
</snippet></ROW><ROW><id>20846029</id><snippet>pass</snippet></ROW><ROW><id>20846054</id><snippet>int</snippet></ROW><ROW><id>20846054</id><snippet>&amp;</snippet></ROW><ROW><id>20846054</id><snippet>|</snippet></ROW><ROW><id>20846054</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>20846054</id><snippet>gmpy2</snippet></ROW><ROW><id>20846054</id><snippet>gmpy</snippet></ROW><ROW><id>20846054</id><snippet>PyGMP</snippet></ROW><ROW><id>20846054</id><snippet>Sophie</snippet></ROW><ROW><id>20846054</id><snippet>bitarray</snippet></ROW><ROW><id>20846054</id><snippet>bitstring</snippet></ROW><ROW><id>20846054</id><snippet>intbitset</snippet></ROW><ROW><id>20846054</id><snippet>import random
import struct
import timeit
import bitarray
import bitstring
import gmpy2

n = random.randrange((1&lt;&lt;31)+1, 1&lt;&lt;32)

bs = bitstring.pack('&lt;q', n)
ba = bitarray.bitarray(64)
ba.frombytes(struct.pack('&lt;q', n))
gm = gmpy2.mpz(n)
py = n

for x in 'bs', 'ba', 'gm', 'py':
    def f(x=locals()[x]): x | x; x &amp; x
    t = timeit.timeit(f, number=10000)
    print(x, t)
</snippet></ROW><ROW><id>20846054</id><snippet>bs 0.7623525890521705
ba 0.006623028079047799
gm 0.0016346259508281946
py 0.002280334010720253
</snippet></ROW><ROW><id>20846054</id><snippet>bitstring</snippet></ROW><ROW><id>20846054</id><snippet>intbitset</snippet></ROW><ROW><id>20846054</id><snippet>intbitset.intbitset([i for i, bit in enumerate(bin(n)[2:]) if bit != '0'])</snippet></ROW><ROW><id>20846054</id><snippet>int</snippet></ROW><ROW><id>20846054</id><snippet>ba 6.385123810963705
gm 1.5937359740491956
py 2.129726824001409
</snippet></ROW><ROW><id>20846054</id><snippet>bitarray</snippet></ROW><ROW><id>20846054</id><snippet>int</snippet></ROW><ROW><id>20846054</id><snippet>x | x</snippet></ROW><ROW><id>20846054</id><snippet>x &amp; x</snippet></ROW><ROW><id>20846054</id><snippet>gmpy2</snippet></ROW><ROW><id>20846054</id><snippet>int</snippet></ROW><ROW><id>20846054</id><snippet>gm 0.19562570203561336
py 0.29293217696249485
</snippet></ROW><ROW><id>20846054</id><snippet>('gm', 0.2890629768371582)
('py', 0.36592698097229004)
</snippet></ROW><ROW><id>20846054</id><snippet>int</snippet></ROW><ROW><id>20846054</id><snippet>py 0.2135779857635498
('py', 0.20878291130065918)
</snippet></ROW><ROW><id>20846054</id><snippet>int</snippet></ROW><ROW><id>20846054</id><snippet>gmpy2.mpz</snippet></ROW><ROW><id>20846060</id><snippet>from rest_framework.response import Response


def view(request):
    ...
    serializer = TrgJobSerializer(DEV, many=True)
    response = {'trgjob': serializer.data}
    return Response(response)
</snippet></ROW><ROW><id>20846060</id><snippet>False</snippet></ROW><ROW><id>20846060</id><snippet>false</snippet></ROW><ROW><id>20846206</id><snippet>stats.print_callers('zip')</snippet></ROW><ROW><id>20846255</id><snippet>import os.path
f = open(os.path.dirname(__file__) + '/documents/form.html')
</snippet></ROW><ROW><id>20846289</id><snippet>mymethod</snippet></ROW><ROW><id>20846289</id><snippet>def mymethod(self, first_arg, second_arg="some default")</snippet></ROW><ROW><id>20846398</id><snippet>fubar</snippet></ROW><ROW><id>20846398</id><snippet>Fubar</snippet></ROW><ROW><id>20846398</id><snippet>Fubar</snippet></ROW><ROW><id>20846398</id><snippet>fubar.Fubar()
</snippet></ROW><ROW><id>20846398</id><snippet>from fubar import Fubar
Fubar()  # This will now work
</snippet></ROW><ROW><id>20846483</id><snippet>mcity=re.search(r"([\u0000-\uFFFFA-Za-z\s]+)", city, re.U)
</snippet></ROW><ROW><id>20846483</id><snippet>\x</snippet></ROW><ROW><id>20846483</id><snippet>\u</snippet></ROW><ROW><id>20846483</id><snippet>mcity=re.search(u"([\u0000-\uFFFFA-Za-z\\s]+)", city, re.U)
</snippet></ROW><ROW><id>20846483</id><snippet>\s</snippet></ROW><ROW><id>20846483</id><snippet>ur</snippet></ROW><ROW><id>20846483</id><snippet>\u</snippet></ROW><ROW><id>20846483</id><snippet>\x</snippet></ROW><ROW><id>20846483</id><snippet>A-Za-z\s</snippet></ROW><ROW><id>20846483</id><snippet>.+</snippet></ROW><ROW><id>20846507</id><snippet>class SizedInput(object):
    def __init__(self,label="input",map_fn=str):
        self.map_fn = map_fn
        self.label = label
        self._rval = None
    def _proc(self,sz,tokens):
        if len(tokens) &lt; sz:
            msg = "Insufficient arguments for %s (expected %s got %s)"
            raise Exception(msg%(self.label,sz,len(tokens) )    )

        return (self.map_fn(x) for x in tokens[:sz]), tokens[sz:]
    def parse(self,input_tokens):
        sz = int(input_tokens[0])
        self._rval,rest = self._proc(sz,input_tokens[1:])
        return list(self._rval),rest
    def GetValue():
        return self._rval
    def __call__(self,input_tokens):
        return self.parse(input_tokens)

class MatrixInput(SizedInput):
    def _proc(self,sz,tokens):
        result, rest = SizedInput._proc(self,sz**2,tokens) #call super function with new size
        result = zip(*[iter(result)]*sz)  #this looks fancy but it just resizes 1d to 2d
            return result,rest          

def validateSchema(schema,input_tokens):
    rest = input_tokens
    results = {}
    for schema_item in schema:
        results[schema_item.label] ,rest = schema_item(rest)
    if rest:
        print "Warning : %d unconsumed tokens!"
    return results
</snippet></ROW><ROW><id>20846507</id><snippet>schema = [ #define a schema
    SizedInput("ages",int),
    SizedInput("names",str),
    MatrixInput("matrix",int),
]
</snippet></ROW><ROW><id>20846507</id><snippet>input_stream = """
2 
8 9
3
asd dsa fff
2
1 2
3 4
"""
tokens = input_stream.split()
</snippet></ROW><ROW><id>20846507</id><snippet>print validateSchema(schema, tokens)
</snippet></ROW><ROW><id>20846549</id><snippet>"school.School"</snippet></ROW><ROW><id>20846549</id><snippet>ForeignKey</snippet></ROW><ROW><id>20846636</id><snippet>def recv(socket):
    char = ''
    num = ''
    while char != '\n':
        num += char
        char = socket.recv(1)

        if char:
            dummy=1
        else:
            return False

    expectedlength = int(num)
    recvlength = 0

    text = ""
    while expectedlength-recvlength &gt; 0:
        text += socket.recv(expectedlength-recvlength)
        recvlength = len(text)

    return text
</snippet></ROW><ROW><id>20846739</id><snippet>self</snippet></ROW><ROW><id>20846739</id><snippet>__init__</snippet></ROW><ROW><id>20846739</id><snippet>if self.user_entry.get_text() == books:
</snippet></ROW><ROW><id>20846739</id><snippet>Gtk.Entry()</snippet></ROW><ROW><id>20846739</id><snippet>get_text()</snippet></ROW><ROW><id>20846739</id><snippet>check_answer</snippet></ROW><ROW><id>20846739</id><snippet>self</snippet></ROW><ROW><id>20846739</id><snippet>def check_answer(self, button):
    if self.user_entry.get_text() == books:
        current += 1
        total += 1
        currentscore = current
</snippet></ROW><ROW><id>20846739</id><snippet>submit.connect()</snippet></ROW><ROW><id>20846739</id><snippet>submit.connect("clicked", self.check_answer, total, current)
</snippet></ROW><ROW><id>20846739</id><snippet>total</snippet></ROW><ROW><id>20846739</id><snippet>current</snippet></ROW><ROW><id>20846739</id><snippet>currentscore</snippet></ROW><ROW><id>20846758</id><snippet>float()</snippet></ROW><ROW><id>20846758</id><snippet>value = float(somelist[0])
</snippet></ROW><ROW><id>20846929</id><snippet>.__class__</snippet></ROW><ROW><id>20846929</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.__class__
&lt;class 'type'&gt;
&gt;&gt;&gt; str.__class__
&lt;class 'type'&gt;
</snippet></ROW><ROW><id>20846929</id><snippet>datetime.datetime</snippet></ROW><ROW><id>20846929</id><snippet>str</snippet></ROW><ROW><id>20846929</id><snippet>datetime.datetime</snippet></ROW><ROW><id>20846929</id><snippet>str</snippet></ROW><ROW><id>20846929</id><snippet>str.__class__</snippet></ROW><ROW><id>20846929</id><snippet>str</snippet></ROW><ROW><id>20846929</id><snippet>type</snippet></ROW><ROW><id>20846992</id><snippet>import re
str = "$rac{some}{latex}$$$\int^e_v {en} more$$\$rac{some}{latex}$$$\int^e_v {en} more$$\n$rac{some}{latex}$\n$$\int^e_v {en} more$$\n\$rac{some}{latex}$\n$$\int^e_v {en} more$$"

#first step:
str = re.sub(r'(?&lt;![\\])\$\$([^\$]+)\$\$', "&lt;div&gt;$$\g&lt;1&gt;$$&lt;/div&gt;", str)
#second step:
str = re.sub(r'(?&lt;![\$\\])\$([^\$]+)(?:(?&lt;!\&lt;div\&gt;)(?&lt;!\\)\$)', "&lt;span&gt;$\g&lt;1&gt;$&lt;/span&gt;", str)
print str
</snippet></ROW><ROW><id>20846992</id><snippet>$$</snippet></ROW><ROW><id>20846992</id><snippet>&lt;div&gt;$$\g&lt;1&gt;$$&lt;/div&gt;</snippet></ROW><ROW><id>20846992</id><snippet>\g&lt;1&gt;</snippet></ROW><ROW><id>20846992</id><snippet>str = re.sub(r'(?&lt;![\\])\$\$([^\$]+)\$\$', "&lt;div&gt;$$\g&lt;1&gt;$$&lt;/div&gt;", str)
</snippet></ROW><ROW><id>20846992</id><snippet>(?&lt;![\\])\$\$([^\$]+)\$\$</snippet></ROW><ROW><id>20846992</id><snippet>(?&lt;![\\]) ...</snippet></ROW><ROW><id>20846992</id><snippet>...</snippet></ROW><ROW><id>20846992</id><snippet>\</snippet></ROW><ROW><id>20846992</id><snippet>(?&lt;![\\])</snippet></ROW><ROW><id>20846992</id><snippet>\</snippet></ROW><ROW><id>20846992</id><snippet>... \$\$ ...</snippet></ROW><ROW><id>20846992</id><snippet>$$</snippet></ROW><ROW><id>20846992</id><snippet>... ([^\$]+)</snippet></ROW><ROW><id>20846992</id><snippet>$</snippet></ROW><ROW><id>20846992</id><snippet>[^\$]+</snippet></ROW><ROW><id>20846992</id><snippet>(...)</snippet></ROW><ROW><id>20846992</id><snippet>... \$\$</snippet></ROW><ROW><id>20846992</id><snippet>$$</snippet></ROW><ROW><id>20846992</id><snippet>$</snippet></ROW><ROW><id>20846992</id><snippet>&lt;span&gt;$\g&lt;1&gt;$&lt;/span&gt;</snippet></ROW><ROW><id>20846992</id><snippet>\g&lt;1&gt;</snippet></ROW><ROW><id>20846992</id><snippet>str = re.sub(r'(?&lt;![\$\\])\$([^\$]+)(?:(?&lt;!\&lt;div\&gt;)(?&lt;!\\)\$)', "&lt;span&gt;$\g&lt;1&gt;$&lt;/span&gt;", str)
</snippet></ROW><ROW><id>20846992</id><snippet>(?&lt;![\$\\])\$([^\$]+)(?:(?&lt;!\&lt;div\&gt;)(?&lt;!\\)\$)</snippet></ROW><ROW><id>20846992</id><snippet>(?&lt;![\$\\]) ...</snippet></ROW><ROW><id>20846992</id><snippet>...</snippet></ROW><ROW><id>20846992</id><snippet>\</snippet></ROW><ROW><id>20846992</id><snippet>$</snippet></ROW><ROW><id>20846992</id><snippet>(?&lt;![\\\$])</snippet></ROW><ROW><id>20846992</id><snippet>\</snippet></ROW><ROW><id>20846992</id><snippet>$</snippet></ROW><ROW><id>20846992</id><snippet>... \$ ...</snippet></ROW><ROW><id>20846992</id><snippet>$</snippet></ROW><ROW><id>20846992</id><snippet>... ([^\$]+) ...</snippet></ROW><ROW><id>20846992</id><snippet>$</snippet></ROW><ROW><id>20846992</id><snippet>... (?:(?&lt;!\&lt;div\&gt;)(?&lt;!\\)\$)</snippet></ROW><ROW><id>20846992</id><snippet>$</snippet></ROW><ROW><id>20846992</id><snippet>?&lt;!\&lt;div\&gt;)</snippet></ROW><ROW><id>20846992</id><snippet>\</snippet></ROW><ROW><id>20846992</id><snippet>(?&lt;!\\)</snippet></ROW><ROW><id>20846992</id><snippet>(?:(?&lt;!\&lt;div\&gt;)(?&lt;!\\)\$)</snippet></ROW><ROW><id>20847186</id><snippet>l</snippet></ROW><ROW><id>20847186</id><snippet>c</snippet></ROW><ROW><id>20847186</id><snippet>del c</snippet></ROW><ROW><id>20847186</id><snippet>c</snippet></ROW><ROW><id>20847186</id><snippet>del l[::2]</snippet></ROW><ROW><id>20847186</id><snippet>l</snippet></ROW><ROW><id>20847186</id><snippet>print c</snippet></ROW><ROW><id>20847186</id><snippet>print c[::2]</snippet></ROW><ROW><id>20847186</id><snippet>c = something</snippet></ROW><ROW><id>20847186</id><snippet>c[::2] = something</snippet></ROW><ROW><id>20847186</id><snippet>c</snippet></ROW><ROW><id>20847186</id><snippet>del c</snippet></ROW><ROW><id>20847186</id><snippet>c</snippet></ROW><ROW><id>20847186</id><snippet>globals()</snippet></ROW><ROW><id>20847186</id><snippet>del l[::2]</snippet></ROW><ROW><id>20847186</id><snippet>__delitem__</snippet></ROW><ROW><id>20847186</id><snippet>slice()</snippet></ROW><ROW><id>20847220</id><snippet>&gt;&gt;&gt; 'abcdefg'[::2]
'aceg'
</snippet></ROW><ROW><id>20847224</id><snippet>heroku run</snippet></ROW><ROW><id>20847224</id><snippet>foreman</snippet></ROW><ROW><id>20847458</id><snippet>index=True</snippet></ROW><ROW><id>20847458</id><snippet>class Users(Base):
    __tablename__ = "user_table"

    id = Column(Integer, Sequence('idseq'), primary_key = True)
    email = Column(String, unique=True)
    ip_addr = Column(String)
    created_date = Column(TIMESTAMP(timezone=True), default=datetime.datetime.utcnow)
    modified_date = Column(TIMESTAMP(timezone=True), default=datetime.datetime.utcnow)

Index('user_index',Users.c.email, Users.c.ip_addr)
</snippet></ROW><ROW><id>20847549</id><snippet>c.execute("INSERT INTO test (word) VALUES (?)", (word))
</snippet></ROW><ROW><id>20847549</id><snippet>c.execute("INSERT INTO test (word) VALUES (?)", (word,))
</snippet></ROW><ROW><id>20847549</id><snippet>(word)</snippet></ROW><ROW><id>20847549</id><snippet>word</snippet></ROW><ROW><id>20847549</id><snippet>(word,)</snippet></ROW><ROW><id>20847568</id><snippet>description</snippet></ROW><ROW><id>20847568</id><snippet>In [74]: dfUnstackedNoIndex.columns.name = None

In [75]: dfUnstackedNoIndex
Out[75]: 
  state  year  thing1  thing2
0     a     1       4     NaN
1     a     2       3       1
2     b     1       2       4
3     b     2     NaN       6
</snippet></ROW><ROW><id>20847568</id><snippet>In [107]: dfUnstacked2 = dfUnstacked.unstack('state')
In [108]: dfUnstacked2
Out[108]: 
description  thing1      thing2   
state             a   b       a  b
year                              
1                 4   2     NaN  4
2                 3 NaN       1  6
</snippet></ROW><ROW><id>20847568</id><snippet>dfUnstacked2.columns</snippet></ROW><ROW><id>20847568</id><snippet>MultiIndex</snippet></ROW><ROW><id>20847568</id><snippet>level</snippet></ROW><ROW><id>20847568</id><snippet>name</snippet></ROW><ROW><id>20847568</id><snippet>In [111]: dfUnstacked2.columns
Out[111]: 
MultiIndex(levels=[[u'thing1', u'thing2'], [u'a', u'b']],
           labels=[[0, 0, 1, 1], [0, 1, 0, 1]],
           names=[u'description', u'state'])
</snippet></ROW><ROW><id>20847568</id><snippet>df.index.names</snippet></ROW><ROW><id>20847568</id><snippet>df.columns.names</snippet></ROW><ROW><id>20847877</id><snippet>getpass.getpass('Password: ')
</snippet></ROW><ROW><id>20847962</id><snippet>runserver</snippet></ROW><ROW><id>20848120</id><snippet>list1</snippet></ROW><ROW><id>20848120</id><snippet>array</snippet></ROW><ROW><id>20848120</id><snippet>return render_to_response('services.html', 
                          {'array':json.dumps(data, cls=SpecialEncoder),
                          'list1':list1}    
                           )
</snippet></ROW><ROW><id>20848128</id><snippet>import re
from pprint import pprint

Test="""
This works.
but this does not because of the whitespace after the period. 

\t     This line not sepearated.
test. don't split here!  
or here
or here  \n    """

r = re.compile('(?&lt;=\.)\s*?^\s*|\s*\Z|\A\s*',re.M)

print '\n'.join(map(repr,Test.splitlines(1)))
print
pprint( r.split(Test) )
</snippet></ROW><ROW><id>20848128</id><snippet>'\n'
'This works.\n'
'but this does not because of the whitespace after the period. \n'
'\n'
'\t     This line not sepearated.\n'
"test. don't split here!  \n"
'or here\n'
'or here  \n'
'    '

['',
 'This works.',
 'but this does not because of the whitespace after the period.',
 'This line not sepearated.',
 "test. don't split here!  \nor here\nor here",
 '']
</snippet></ROW><ROW><id>20848128</id><snippet>\A</snippet></ROW><ROW><id>20848128</id><snippet>^</snippet></ROW><ROW><id>20848128</id><snippet>print [m.start() for m in re.finditer('\A','a\nb\n\nc\n')]
# prints [0]
print [m.start() for m in re.finditer('^', 'a\nb\n\nc\n')]
# prints [0] too
</snippet></ROW><ROW><id>20848128</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>20848128</id><snippet>^</snippet></ROW><ROW><id>20848128</id><snippet>\n</snippet></ROW><ROW><id>20848128</id><snippet>(?&lt;=\n)</snippet></ROW><ROW><id>20848128</id><snippet>print [m.start() for m in re.finditer('(?&lt;=\n)', 'a\nb\n\nc\n')]
# prints [2, 4, 5, 7]
</snippet></ROW><ROW><id>20848128</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>20848128</id><snippet>^</snippet></ROW><ROW><id>20848128</id><snippet>\A|(?&lt;=\n)</snippet></ROW><ROW><id>20848128</id><snippet>|</snippet></ROW><ROW><id>20848128</id><snippet>print [m.start() for m in re.finditer('^','a\nb\n\nc\n',re.M)]
print [m.start() for m in re.finditer('\A|(?&lt;=\n)','a\nb\n\nc\n')]
# they print [0, 2, 4, 5, 7]
</snippet></ROW><ROW><id>20848128</id><snippet>^</snippet></ROW><ROW><id>20848128</id><snippet>print [m.span() for m in re.finditer('^','a\nb\n\nc\n',re.M)]
# prints [(0, 0), (2, 2), (4, 4), (5, 5), (7, 7)]
</snippet></ROW><ROW><id>20848128</id><snippet>'a\nb\n\nc\n'</snippet></ROW><ROW><id>20848128</id><snippet>re.compile('(?&lt;=\.)\s*?^\s*|\s*\Z|\A\s*',re.M)
</snippet></ROW><ROW><id>20848128</id><snippet>re.compile('(?&lt;=\.)\s*?^\s*'
           '|'
           '\s*\Z'
           '|'
           '\A\s*',
           re.M)
</snippet></ROW><ROW><id>20848128</id><snippet>(?&lt;=\.)</snippet></ROW><ROW><id>20848128</id><snippet>.</snippet></ROW><ROW><id>20848128</id><snippet>^</snippet></ROW><ROW><id>20848128</id><snippet>\n</snippet></ROW><ROW><id>20848128</id><snippet>\s*</snippet></ROW><ROW><id>20848128</id><snippet>(?&lt;=\.)\s*?^</snippet></ROW><ROW><id>20848128</id><snippet>*</snippet></ROW><ROW><id>20848128</id><snippet>(?&lt;=\.)\s*^</snippet></ROW><ROW><id>20848128</id><snippet>^</snippet></ROW><ROW><id>20848128</id><snippet>?</snippet></ROW><ROW><id>20848128</id><snippet>(?&lt;=\.)\s*?^</snippet></ROW><ROW><id>20848128</id><snippet>\s</snippet></ROW><ROW><id>20848128</id><snippet>'(?&lt;=\.)[ \f\r\t\v]*\n</snippet></ROW><ROW><id>20848128</id><snippet>\s*</snippet></ROW><ROW><id>20848128</id><snippet>\n</snippet></ROW><ROW><id>20848128</id><snippet>\s</snippet></ROW><ROW><id>20848128</id><snippet>\s*</snippet></ROW><ROW><id>20848128</id><snippet>\n</snippet></ROW><ROW><id>20848128</id><snippet>\s*\Z</snippet></ROW><ROW><id>20848128</id><snippet>(?&lt;=\.)\s*?^\s*</snippet></ROW><ROW><id>20848128</id><snippet>\A\s*</snippet></ROW><ROW><id>20848128</id><snippet>(?&lt;=\.)\s*?^\s*</snippet></ROW><ROW><id>20848128</id><snippet>(?&lt;=\.)\s*^\s*</snippet></ROW><ROW><id>20848128</id><snippet>\s*?</snippet></ROW><ROW><id>20848128</id><snippet>\s*</snippet></ROW><ROW><id>20848128</id><snippet>(?&lt;=\.)\s*\n\s*</snippet></ROW><ROW><id>20848128</id><snippet>(?&lt;=\.)[ \f\r\t\v]*\n\s*</snippet></ROW><ROW><id>20848212</id><snippet>In [4]: df = pd.read_csv('triangle.csv', header=None)

In [5]: df
Out[5]: 
    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14
0   75 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN
1   95  64 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN
2   17  47  82 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN
3   18  35  87  10 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN
4   20   4  82  47  65 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN
5   19   1  23  75   3  34 NaN NaN NaN NaN NaN NaN NaN NaN NaN
6   88   2  77  73   7  63  67 NaN NaN NaN NaN NaN NaN NaN NaN
7   99  65   4  28   6  16  70  92 NaN NaN NaN NaN NaN NaN NaN
8   41  41  26  56  83  40  80  70  33 NaN NaN NaN NaN NaN NaN
9   41  48  72  33  47  32  37  16  94  29 NaN NaN NaN NaN NaN
10  53  71  44  65  25  43  91  52  97  51  14 NaN NaN NaN NaN
11  70  11  33  28  77  73  17  78  39  68  17  57 NaN NaN NaN
12  91  71  52  38  17  14  91  43  58  50  27  29  48 NaN NaN
13  63  66   4  68  89  53  67  30  73  16  69  87  40  31 NaN
14   4  62  98  27  23   9  70  98  73  93  38  53  60   4  23

In [24]: for row in df.iterrows():
   ....:     for item in row[1]:
   ....:         if np.isnan(item) == False:
   ....:             l.append((n, item))
   ....:             n += 1


In [26]: import networkx as nx

In [27]: G = nx.Graph()

In [28]: G.add_nodes_from(l)

In [29]: G.nodes()
Out[29]: 
[(113, 73.0),
 (74, 39.0),
 (64, 51.0),
 (111, 70.0),
 (72, 17.0),
 (69, 28.0),
 (102, 87.0),
 (46, 48.0),
 (118, 4.0),
 (105, 4.0),
 (92, 66.0),
 (55, 53.0),
 (19, 3.0),
 (17, 23.0),
 (90, 48.0),
 (18, 75.0),
 (27, 67.0),
 (37, 41.0),
 (8, 87.0),
 (59, 25.0),
 (43, 70.0), etc......
</snippet></ROW><ROW><id>20848240</id><snippet>&gt;&gt;&gt; a,b = [1, 2]
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
2
</snippet></ROW><ROW><id>20848288</id><snippet>for i in range(len(list1)):
    list4.append(list1[i])
    list4.append(list2[i])
</snippet></ROW><ROW><id>20848288</id><snippet>list4.extend()</snippet></ROW><ROW><id>20848288</id><snippet>for i in range(len(list1)):
    list4.extend([list1[i], list2[i]])
</snippet></ROW><ROW><id>20848288</id><snippet>zip()</snippet></ROW><ROW><id>20848288</id><snippet>list4 = [x for t in zip(list1, list2) for x in t]
</snippet></ROW><ROW><id>20848288</id><snippet>list4 = []
for t in zip(list1, list2):
    list4.extend(t)
</snippet></ROW><ROW><id>20848288</id><snippet>range()</snippet></ROW><ROW><id>20848288</id><snippet>list1 = list(range(1, 11, 2))
list2 = list(range(2, 11, 2))
</snippet></ROW><ROW><id>20848288</id><snippet>i</snippet></ROW><ROW><id>20848530</id><snippet>def accumulate(combiner, start, n, term):
    """Return the result of combining the first n terms in a sequence."""
    total = term(start)
    current = start
    while current &lt; n:
        total = combiner(total, term(current))
        current += 1
    return total
</snippet></ROW><ROW><id>20848613</id><snippet>print("a\tb")
</snippet></ROW><ROW><id>20848613</id><snippet>a&lt;TAB&gt;b</snippet></ROW><ROW><id>20848613</id><snippet>a\tb</snippet></ROW><ROW><id>20848619</id><snippet>id</snippet></ROW><ROW><id>20848619</id><snippet>count</snippet></ROW><ROW><id>20848619</id><snippet>set</snippet></ROW><ROW><id>20848619</id><snippet>id_list = set(open('test.txt', 'rU'))
id_list = list(id_list) 
</snippet></ROW><ROW><id>20848698</id><snippet>%</snippet></ROW><ROW><id>20848698</id><snippet>{}</snippet></ROW><ROW><id>20848698</id><snippet>%</snippet></ROW><ROW><id>20848698</id><snippet>[sdf]</snippet></ROW><ROW><id>20848698</id><snippet>{:\1\2}</snippet></ROW><ROW><id>20848698</id><snippet>%</snippet></ROW><ROW><id>20848698</id><snippet>%</snippet></ROW><ROW><id>20848698</id><snippet>%</snippet></ROW><ROW><id>20848698</id><snippet>format</snippet></ROW><ROW><id>20848698</id><snippet>%</snippet></ROW><ROW><id>20848698</id><snippet>{}</snippet></ROW><ROW><id>20848698</id><snippet>*</snippet></ROW><ROW><id>20848698</id><snippet>format</snippet></ROW><ROW><id>20848698</id><snippet>%(10)s</snippet></ROW><ROW><id>20848698</id><snippet>format</snippet></ROW><ROW><id>20848698</id><snippet>%(a[b])s</snippet></ROW><ROW><id>20848698</id><snippet>format</snippet></ROW><ROW><id>20848698</id><snippet>%c</snippet></ROW><ROW><id>20848698</id><snippet>:c</snippet></ROW><ROW><id>20848698</id><snippet>%r</snippet></ROW><ROW><id>20848698</id><snippet>%s</snippet></ROW><ROW><id>20848698</id><snippet>%a</snippet></ROW><ROW><id>20848698</id><snippet>%g</snippet></ROW><ROW><id>20848698</id><snippet>:g</snippet></ROW><ROW><id>20848698</id><snippet>%a</snippet></ROW><ROW><id>20848698</id><snippet>!a</snippet></ROW><ROW><id>20848698</id><snippet>printf</snippet></ROW><ROW><id>20849064</id><snippet>ThreadPoolExecutor.map</snippet></ROW><ROW><id>20849064</id><snippet>import time
import concurrent.futures

e = concurrent.futures.ThreadPoolExecutor(4)
s = range(10)
for i in e.map(time.sleep, s):
    print(i)
</snippet></ROW><ROW><id>20849064</id><snippet>import concurrent.futures

executor = concurrent.futures.ThreadPoolExecutor() # Or ProcessPoolExecutor
data = some_huge_list()
results = executor.map(crunch_number, data)
finals = []

for value in results:
    finals.append(do_some_stuff(value))
</snippet></ROW><ROW><id>20849064</id><snippet>do_some_stuff</snippet></ROW><ROW><id>20849064</id><snippet>crunch_number</snippet></ROW><ROW><id>20849064</id><snippet>executor.map</snippet></ROW><ROW><id>20849064</id><snippet>map</snippet></ROW><ROW><id>20849064</id><snippet>future.as_completed</snippet></ROW><ROW><id>20849195</id><snippet>&gt;&gt;&gt; t = ['2925729', 'Patrick did not shake our hands nor ask our names. He greeted us promptly and politely, but it seemed routine.']
&gt;&gt;&gt; [ [t[0], a + '.'] for a in t[1].rstrip('.').split('.')]
[['2925729', 'Patrick did not shake our hands nor ask our names.'], ['2925729', ' He greeted us promptly and politely, but it seemed routine.']]
</snippet></ROW><ROW><id>20849195</id><snippet>g = ( [t[0], a + '.'] for a in t[1].rstrip('.').split('.') )
for key, sentence in g:
    # do processing
</snippet></ROW><ROW><id>20849195</id><snippet>&gt;&gt;&gt; data = ['1', 'I think. I am.'], ['2', 'I came. I saw. I conquered.']
&gt;&gt;&gt; dict([ [t[0], t[1].rstrip('.').split('.')] for t in data ])
{'1': ['I think', ' I am'], '2': ['I came', ' I saw', ' I conquered']}
</snippet></ROW><ROW><id>20849283</id><snippet>&gt;&gt;&gt; guesses = ['H','A']
&gt;&gt;&gt; secret = 'HANGMAN'
&gt;&gt;&gt; state = ''.join(x if x in guesses else '_' for x in secret)
&gt;&gt;&gt; state
'HA___A_'
</snippet></ROW><ROW><id>20849283</id><snippet>join</snippet></ROW><ROW><id>20849283</id><snippet>&gt;&gt;&gt; state = ' '.join(x if x in guesses else '_' for x in secret)
&gt;&gt;&gt; state
'H A _ _ _ A _'
</snippet></ROW><ROW><id>20849283</id><snippet>upper()</snippet></ROW><ROW><id>20849283</id><snippet>&gt;&gt;&gt; guess = 'a'
&gt;&gt;&gt; guess.upper()
'A'
</snippet></ROW><ROW><id>20849283</id><snippet>if letter in secret:
    # do something
</snippet></ROW><ROW><id>20849506</id><snippet>        upper_bound = int(input("What is the upper bound (inclusive)?"))
        break
</snippet></ROW><ROW><id>20849506</id><snippet>break</snippet></ROW><ROW><id>20849506</id><snippet>upper_bound &lt; lower_bound</snippet></ROW><ROW><id>20849506</id><snippet>break</snippet></ROW><ROW><id>20849669</id><snippet>r"^next_view/(?P&lt;name&gt;\w+)/"
</snippet></ROW><ROW><id>20849855</id><snippet>utcfromtimestamp</snippet></ROW><ROW><id>20849855</id><snippet>fromtimestamp</snippet></ROW><ROW><id>20849855</id><snippet>normalize</snippet></ROW><ROW><id>20849855</id><snippet>int</snippet></ROW><ROW><id>20849855</id><snippet>dest_tz = pytz.timezone("Europe/London")
utc_dt = datetime.utcfromtimestamp(1364691600).replace(tzinfo=pytz.utc)
local_dt = dest_tz.normalize(utc_dt.astimezone(dest_tz))
</snippet></ROW><ROW><id>20849962</id><snippet>r = 12.92 * r if r &lt;= 0.0031308 else (1.0 + 0.055) * pow(r, (1.0 / 2.4)) - 0.055
g = 12.92 * g if g &lt;= 0.0031308 else (1.0 + 0.055) * pow(g, (1.0 / 2.4)) - 0.055
b = 12.92 * b if b &lt;= 0.0031308 else (1.0 + 0.055) * pow(b, (1.0 / 2.4)) - 0.055
</snippet></ROW><ROW><id>20849962</id><snippet>&lt;condition&gt; ? &lt;true value&gt; : &lt;false value&gt;</snippet></ROW><ROW><id>20849962</id><snippet>&lt;condition&gt; if &lt;true value&gt; else &lt;false-value&gt;</snippet></ROW><ROW><id>20849962</id><snippet>&lt;true value&gt; if &lt;condition&gt; else &lt;false value&gt;
</snippet></ROW><ROW><id>20850054</id><snippet>Engine</snippet></ROW><ROW><id>20850054</id><snippet>play()</snippet></ROW><ROW><id>20850054</id><snippet>while</snippet></ROW><ROW><id>20850054</id><snippet>enter()</snippet></ROW><ROW><id>20850054</id><snippet>scene_map</snippet></ROW><ROW><id>20850054</id><snippet>while</snippet></ROW><ROW><id>20850054</id><snippet>Engine</snippet></ROW><ROW><id>20850054</id><snippet>Scene</snippet></ROW><ROW><id>20850054</id><snippet>scene_map</snippet></ROW><ROW><id>20850054</id><snippet>scene_map</snippet></ROW><ROW><id>20850054</id><snippet>Engine</snippet></ROW><ROW><id>20850054</id><snippet>Scene</snippet></ROW><ROW><id>20850054</id><snippet>Scene</snippet></ROW><ROW><id>20850054</id><snippet>Scene</snippet></ROW><ROW><id>20850054</id><snippet>enter()</snippet></ROW><ROW><id>20850054</id><snippet>enter()</snippet></ROW><ROW><id>20850054</id><snippet>Engine</snippet></ROW><ROW><id>20850054</id><snippet>scene_map</snippet></ROW><ROW><id>20850054</id><snippet>Engine</snippet></ROW><ROW><id>20850054</id><snippet>enter()</snippet></ROW><ROW><id>20850075</id><snippet>__iadd__</snippet></ROW><ROW><id>20850075</id><snippet>a[1] += 2</snippet></ROW><ROW><id>20850075</id><snippet>a.b -= 2</snippet></ROW><ROW><id>20850075</id><snippet>__setitem__</snippet></ROW><ROW><id>20850075</id><snippet>__setattr__</snippet></ROW><ROW><id>20850075</id><snippet>self</snippet></ROW><ROW><id>20850075</id><snippet>__ispam__</snippet></ROW><ROW><id>20850075</id><snippet>__iadd__</snippet></ROW><ROW><id>20850075</id><snippet>self</snippet></ROW><ROW><id>20850075</id><snippet>self</snippet></ROW><ROW><id>20850075</id><snippet>__iadd__</snippet></ROW><ROW><id>20850075</id><snippet>+=</snippet></ROW><ROW><id>20850075</id><snippet>__add__</snippet></ROW><ROW><id>20850075</id><snippet>__iadd__</snippet></ROW><ROW><id>20850075</id><snippet>self</snippet></ROW><ROW><id>20850075</id><snippet>self</snippet></ROW><ROW><id>20850075</id><snippet>init</snippet></ROW><ROW><id>20850075</id><snippet>NSMutableFoo</snippet></ROW><ROW><id>20850075</id><snippet>void</snippet></ROW><ROW><id>20850075</id><snippet>list.sort</snippet></ROW><ROW><id>20850075</id><snippet>None</snippet></ROW><ROW><id>20850075</id><snippet>a += b</snippet></ROW><ROW><id>20850075</id><snippet>a.__iadd__(b)</snippet></ROW><ROW><id>20850507</id><snippet>for x in range(0, len(aminoacid)):
    if x != "-":
       print nucleotide[3x:3x+3]
    else:
       print "---"
</snippet></ROW><ROW><id>20850540</id><snippet>The two angle arguments are the initial and final angle in radians, with the zero on the right.
</snippet></ROW><ROW><id>20850627</id><snippet>from django.db import models
from picklefield.fields import PickledObjectField
import numpy

class DatafileModel(models.Model)
    data = PickledObjectField()
</snippet></ROW><ROW><id>20850627</id><snippet>datafile = DatafileModel()
datafile.data = numpy.array((1000,1000))
datafile.save()
</snippet></ROW><ROW><id>20850651</id><snippet>def maybe_decorate(condition, decorator):
    return decorator if condition else lambda x: x

@api_view(['GET'])
@maybe_decorate(settings.USE_API_KEY, authentication_classes((TokenAuthentication, )))
@maybe_decorate(settings.USE_API_KEY, permission_classes((IsAuthenticated, )))
def all_announcements(request):
    ...
</snippet></ROW><ROW><id>20850771</id><snippet>.//span[contains(text(), "Author")]/a</snippet></ROW><ROW><id>20850771</id><snippet>from selenium import webdriver
driver = webdriver.Firefox()
driver.get('http://jsfiddle.net/9pKMU/show/')
for a in driver.find_elements_by_xpath('.//span[contains(text(), "Author")]/a'):
    print(a.get_attribute('href'))
</snippet></ROW><ROW><id>20850776</id><snippet>None</snippet></ROW><ROW><id>20850776</id><snippet>None</snippet></ROW><ROW><id>20850776</id><snippet>str()</snippet></ROW><ROW><id>20850776</id><snippet>None</snippet></ROW><ROW><id>20850776</id><snippet>"None"</snippet></ROW><ROW><id>20850776</id><snippet>def strlist(lst):
    if not lst:
        return " "
    else:
        return str(lst[0]) + " " + strlist(lst[1:])

def printlist(lst):
    print strlist(lst)
</snippet></ROW><ROW><id>20850776</id><snippet>def printlist(lst):
    if not lst:
        print " "
    else:
        print str(lst[0]) + " "
        printlist(lst[1:])
</snippet></ROW><ROW><id>20850776</id><snippet>list</snippet></ROW><ROW><id>20850776</id><snippet>== ""</snippet></ROW><ROW><id>20850776</id><snippet>strlist</snippet></ROW><ROW><id>20850776</id><snippet>" ".join</snippet></ROW><ROW><id>20850776</id><snippet>def printlist(lst):
    print " ".join(map(str, lst))
</snippet></ROW><ROW><id>20850776</id><snippet>print</snippet></ROW><ROW><id>20850776</id><snippet>print</snippet></ROW><ROW><id>20850869</id><snippet>pygame.quit()</snippet></ROW><ROW><id>20850869</id><snippet>pygame.font</snippet></ROW><ROW><id>20850869</id><snippet>pygame.quit</snippet></ROW><ROW><id>20850869</id><snippet>pygame.display.quit</snippet></ROW><ROW><id>20850869</id><snippet>while running</snippet></ROW><ROW><id>20850869</id><snippet>pygame.quit</snippet></ROW><ROW><id>20850869</id><snippet>pygame.init()</snippet></ROW><ROW><id>20850886</id><snippet>from_to</snippet></ROW><ROW><id>20850886</id><snippet>__init__</snippet></ROW><ROW><id>20850886</id><snippet>cls.from_to={'inch':{'foot':cls.inch_to_foot,'meter':cls.inch_to_meter, }}
</snippet></ROW><ROW><id>20850886</id><snippet>to_from</snippet></ROW><ROW><id>20850886</id><snippet>from_to = {'inch':['foot','meter']}
</snippet></ROW><ROW><id>20850886</id><snippet>__init__</snippet></ROW><ROW><id>20850886</id><snippet>getattr</snippet></ROW><ROW><id>20850886</id><snippet>class length:    
    from_to = {'inch':['foot','meter']}

    def __init__(self,num,unit):
        if unit not in self.from_to:
            raise RuntimeError('unit %s not supported'%unit)

        cls = self.__class__
        setattr(self,unit,num)

        for k in cls.from_to[unit]:
            f = getattr(cls,'%s_to_%s'%(unit,k))
            setattr(self,k,f(num))            

    @classmethod
    def inch_to_foot(cls,inch):
        return inch/12.0

    @classmethod
    def inch_to_meter(cls,inch):
        return inch*2.54/100    

a = length(3,'inches')
print a.meter
print a.foot
print length.inch_to_foot(3)
</snippet></ROW><ROW><id>20850922</id><snippet>from PIL import Image
import numpy as np
import scipy as sp
import matplotlib.colors as colors
from sklearn.cluster import DBSCAN
from math import ceil, sqrt

"""
Inputs:

    rgbimg:         [M,N,3] numpy array containing (uint, 0-255) color image

    hueleftthr:     Scalar constant to select maximum allowed hue in the
                    yellow-green region

    huerightthr:    Scalar constant to select minimum allowed hue in the
                    blue-purple region

    satthr:         Scalar constant to select minimum allowed saturation

    valthr:         Scalar constant to select minimum allowed value

    monothr:        Scalar constant to select minimum allowed monochrome
                    brightness

    maxpoints:      Scalar constant maximum number of pixels to forward to
                    the DBSCAN clustering algorithm

    proxthresh:     Proximity threshold to use for DBSCAN, as a fraction of
                    the diagonal size of the image

Outputs:

    borderseg:      [K,2,2] Nested list containing K pairs of x- and y- pixel
                    values for drawing the tree border

    X:              [P,2] List of pixels that passed the threshold step

    labels:         [Q,2] List of cluster labels for points in Xslice (see
                    below)

    Xslice:         [Q,2] Reduced list of pixels to be passed to DBSCAN

"""

def findtree(rgbimg, hueleftthr=0.2, huerightthr=0.95, satthr=0.7, 
             valthr=0.7, monothr=220, maxpoints=5000, proxthresh=0.04):

    # Convert rgb image to monochrome for
    gryimg = np.asarray(Image.fromarray(rgbimg).convert('L'))
    # Convert rgb image (uint, 0-255) to hsv (float, 0.0-1.0)
    hsvimg = colors.rgb_to_hsv(rgbimg.astype(float)/255)

    # Initialize binary thresholded image
    binimg = np.zeros((rgbimg.shape[0], rgbimg.shape[1]))
    # Find pixels with hue&lt;0.2 or hue&gt;0.95 (red or yellow) and saturation/value
    # both greater than 0.7 (saturated and bright)--tends to coincide with
    # ornamental lights on trees in some of the images
    boolidx = np.logical_and(
                np.logical_and(
                  np.logical_or((hsvimg[:,:,0] &lt; hueleftthr),
                                (hsvimg[:,:,0] &gt; huerightthr)),
                                (hsvimg[:,:,1] &gt; satthr)),
                                (hsvimg[:,:,2] &gt; valthr))
    # Find pixels that meet hsv criterion
    binimg[np.where(boolidx)] = 255
    # Add pixels that meet grayscale brightness criterion
    binimg[np.where(gryimg &gt; monothr)] = 255

    # Prepare thresholded points for DBSCAN clustering algorithm
    X = np.transpose(np.where(binimg == 255))
    Xslice = X
    nsample = len(Xslice)
    if nsample &gt; maxpoints:
        # Make sure number of points does not exceed DBSCAN maximum capacity
        Xslice = X[range(0,nsample,int(ceil(float(nsample)/maxpoints)))]

    # Translate DBSCAN proximity threshold to units of pixels and run DBSCAN
    pixproxthr = proxthresh * sqrt(binimg.shape[0]**2 + binimg.shape[1]**2)
    db = DBSCAN(eps=pixproxthr, min_samples=10).fit(Xslice)
    labels = db.labels_.astype(int)

    # Find the largest cluster (i.e., with most points) and obtain convex hull   
    unique_labels = set(labels)
    maxclustpt = 0
    for k in unique_labels:
        class_members = [index[0] for index in np.argwhere(labels == k)]
        if len(class_members) &gt; maxclustpt:
            points = Xslice[class_members]
            hull = sp.spatial.ConvexHull(points)
            maxclustpt = len(class_members)
            borderseg = [[points[simplex,0], points[simplex,1]] for simplex
                          in hull.simplices]

    return borderseg, X, labels, Xslice
</snippet></ROW><ROW><id>20850922</id><snippet>#!/usr/bin/env python

from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from findtree import findtree

# Image files to process
fname = ['nmzwj.png', 'aVZhC.png', '2K9EF.png',
         'YowlH.png', '2y4o5.png', 'FWhSP.png']

# Initialize figures
fgsz = (16,7)        
figthresh = plt.figure(figsize=fgsz, facecolor='w')
figclust  = plt.figure(figsize=fgsz, facecolor='w')
figcltwo  = plt.figure(figsize=fgsz, facecolor='w')
figborder = plt.figure(figsize=fgsz, facecolor='w')
figthresh.canvas.set_window_title('Thresholded HSV and Monochrome Brightness')
figclust.canvas.set_window_title('DBSCAN Clusters (Raw Pixel Output)')
figcltwo.canvas.set_window_title('DBSCAN Clusters (Slightly Dilated for Display)')
figborder.canvas.set_window_title('Trees with Borders')

for ii, name in zip(range(len(fname)), fname):
    # Open the file and convert to rgb image
    rgbimg = np.asarray(Image.open(name))

    # Get the tree borders as well as a bunch of other intermediate values
    # that will be used to illustrate how the algorithm works
    borderseg, X, labels, Xslice = findtree(rgbimg)

    # Display thresholded images
    axthresh = figthresh.add_subplot(2,3,ii+1)
    axthresh.set_xticks([])
    axthresh.set_yticks([])
    binimg = np.zeros((rgbimg.shape[0], rgbimg.shape[1]))
    for v, h in X:
        binimg[v,h] = 255
    axthresh.imshow(binimg, interpolation='nearest', cmap='Greys')

    # Display color-coded clusters
    axclust = figclust.add_subplot(2,3,ii+1) # Raw version
    axclust.set_xticks([])
    axclust.set_yticks([])
    axcltwo = figcltwo.add_subplot(2,3,ii+1) # Dilated slightly for display only
    axcltwo.set_xticks([])
    axcltwo.set_yticks([])
    axcltwo.imshow(binimg, interpolation='nearest', cmap='Greys')
    clustimg = np.ones(rgbimg.shape)    
    unique_labels = set(labels)
    # Generate a unique color for each cluster 
    plcol = cm.rainbow_r(np.linspace(0, 1, len(unique_labels)))
    for lbl, pix in zip(labels, Xslice):
        for col, unqlbl in zip(plcol, unique_labels):
            if lbl == unqlbl:
                # Cluster label of -1 indicates no cluster membership;
                # override default color with black
                if lbl == -1:
                    col = [0.0, 0.0, 0.0, 1.0]
                # Raw version
                for ij in range(3):
                    clustimg[pix[0],pix[1],ij] = col[ij]
                # Dilated just for display
                axcltwo.plot(pix[1], pix[0], 'o', markerfacecolor=col, 
                    markersize=1, markeredgecolor=col)
    axclust.imshow(clustimg)
    axcltwo.set_xlim(0, binimg.shape[1]-1)
    axcltwo.set_ylim(binimg.shape[0], -1)

    # Plot original images with read borders around the trees
    axborder = figborder.add_subplot(2,3,ii+1)
    axborder.set_axis_off()
    axborder.imshow(rgbimg, interpolation='nearest')
    for vseg, hseg in borderseg:
        axborder.plot(hseg, vseg, 'r-', lw=3)
    axborder.set_xlim(0, binimg.shape[1]-1)
    axborder.set_ylim(binimg.shape[0], -1)

plt.show()
</snippet></ROW><ROW><id>20851070</id><snippet>&gt;&gt;&gt; list1= [0,2,3,6,12]
&gt;&gt;&gt; list2= [1,2,3,6,12]
&gt;&gt;&gt; list3= [1,4,5,8,12]
&gt;&gt;&gt; list4= [1,4,5,9,12]
&gt;&gt;&gt; def sort_lists_by_maxes(*lists):
    return sorted(lists, key=lambda x: sorted(x, reverse=True), reverse=True)

&gt;&gt;&gt; sort_lists_by_maxes(list1, list2, list3, list4)
[[1, 4, 5, 9, 12], [1, 4, 5, 8, 12], [1, 2, 3, 6, 12], [0, 2, 3, 6, 12]]
</snippet></ROW><ROW><id>20851259</id><snippet>df.groupby</snippet></ROW><ROW><id>20851259</id><snippet>df</snippet></ROW><ROW><id>20851259</id><snippet>DataFrame</snippet></ROW><ROW><id>20851259</id><snippet>&gt;&gt;&gt; df_summed = df.groupby('asp').sum()
&gt;&gt;&gt; df_summed
     asq
asp     
0     20
1     20

[2 rows x 1 columns]
</snippet></ROW><ROW><id>20851354</id><snippet>...
def create_a_person():
    global person
    person = Person(name_ent.get(), age_ent.get(), title_ent.get())

Button(root, text="Confirm", command=create_a_person).grid(row=3, columnspan=2)
Button(root, text="Print", command=lambda: print(person.print_person())).grid(row=4, columnspan=2)
...
</snippet></ROW><ROW><id>20851354</id><snippet>grid</snippet></ROW><ROW><id>20851354</id><snippet>None</snippet></ROW><ROW><id>20851354</id><snippet>hello_lbl = Label(root, text="").grid(row=4, columnspan=2) # =&gt; None
</snippet></ROW><ROW><id>20851354</id><snippet>Label</snippet></ROW><ROW><id>20851354</id><snippet>hello_lbl = Label(root, text="")
hello_lbl.grid(row=4, columnspan=2)
</snippet></ROW><ROW><id>20851934</id><snippet>write</snippet></ROW><ROW><id>20851934</id><snippet>close()</snippet></ROW><ROW><id>20851934</id><snippet>truncate</snippet></ROW><ROW><id>20851934</id><snippet>"w"</snippet></ROW><ROW><id>20852474</id><snippet>for</snippet></ROW><ROW><id>20852474</id><snippet>def rep(f, n):
    return f if n == 1 else lambda x: f(rep(f, n-1)(x))
</snippet></ROW><ROW><id>20853322</id><snippet>RewriteRule ^mypath/test/index.cgi/(.*)$ - [S=1]
RewriteRule ^mypath/test/(.*)$ /mypath/test/index.cgi/$1 [QSA,L]
</snippet></ROW><ROW><id>20853322</id><snippet>[S=1]</snippet></ROW><ROW><id>20853322</id><snippet>[L]</snippet></ROW><ROW><id>20853644</id><snippet>import codecs
with codecs.open("myutf8file.txt", encoding="utf-8-sig") as infile:
    for line in infile:
        # do something with line
</snippet></ROW><ROW><id>20853644</id><snippet>codecs.open()</snippet></ROW><ROW><id>20853644</id><snippet>\r\n</snippet></ROW><ROW><id>20853644</id><snippet>\n</snippet></ROW><ROW><id>20853644</id><snippet>utf-8-sig</snippet></ROW><ROW><id>20853644</id><snippet>utf-8</snippet></ROW><ROW><id>20853906</id><snippet>import bpy
import bmesh

myvertexlist = [[2,2,2],[4,4,4],[6,6,6],[8,8,8]]

# Get the active mesh
me = bpy.context.object.data

# Get a BMesh representation
bm = bmesh.new()   # create an empty BMesh
bm.from_mesh(me)   # fill it in from a Mesh

# Modify the BMesh, can do anything here...
for newvert in myvertexlist:
    bm.verts.new(newvert)

# also add bm.edges and bm.faces

# Finish up, write the bmesh back to the mesh
bm.to_mesh(me)
bm.free()  # free and prevent further access
</snippet></ROW><ROW><id>20853951</id><snippet>cursor.execute("UPDATE curweek SET row1=%s;", (str(var1),))
</snippet></ROW><ROW><id>20853951</id><snippet>&gt;&gt;&gt; i = 'hello'
&gt;&gt;&gt; z = (i)
&gt;&gt; z
'hello'
&gt;&gt;&gt; type(z)
&lt;type 'str'&gt;
&gt;&gt;&gt; z = (i,)
&gt;&gt;&gt; type(z)
&lt;type 'tuple'&gt;
&gt;&gt;&gt; z
('hello',)
</snippet></ROW><ROW><id>20854204</id><snippet>time python yourprogram.py
</snippet></ROW><ROW><id>20854250</id><snippet>"my niece.mkv"</snippet></ROW><ROW><id>20854250</id><snippet>subprocess.call</snippet></ROW><ROW><id>20854250</id><snippet>import subprocess

def run():
    DefaultFFMPEGParam = "-tune animation -keyint_min 12 -sc_threshold 45 -bf 8 -b_strategy 2 -refs 10 -qmin 10 -qmax 51 -qcomp 0.6 -direct-pred auto -me_range 24 -me_method umh -subq 9 -trellis 2 -vcodec libx264" \
        .split(' ')
    crf = ['-crf', '28.0']
    output = "output2.mkv"

    # list concatenation
    args1 = ["ffmpeg", "-i", "my niece.mkv"] + DefaultFFMPEGParam + crf + [output,]

    print args1
    # prints:
    #
    # ['ffmpeg', '-i', 'my niece.mkv', '-tune', 'animation', '-keyint_min', '12',
    #  '-sc_threshold', '45', '-bf', '8', '-b_strategy', '2', '-refs', '10', '-qmin',
    #  '10', '-qmax', '51', '-qcomp', '0.6', '-direct-pred', 'auto', '-me_range', '24',
    #  '-me_method', 'umh', '-subq', '9', '-trellis', '2', '-vcodec', 'libx264',
    #  '-crf', '28.0',
    #  'output2.mkv']    

    subprocess.call(args1)

run()
</snippet></ROW><ROW><id>20854250</id><snippet>shell=True</snippet></ROW><ROW><id>20854319</id><snippet>\1</snippet></ROW><ROW><id>20854319</id><snippet>\0</snippet></ROW><ROW><id>20854319</id><snippet>\</snippet></ROW><ROW><id>20854319</id><snippet>1</snippet></ROW><ROW><id>20854319</id><snippet>r</snippet></ROW><ROW><id>20854319</id><snippet>command = r"echo '12345 Tomcat' | sed -n 's/.*\(^.[0-9]*\).*/\1/p'"
</snippet></ROW><ROW><id>20854476</id><snippet>ratings</snippet></ROW><ROW><id>20854476</id><snippet>'Book-Rating'</snippet></ROW><ROW><id>20854476</id><snippet>&gt;&gt;&gt; ratings = pd.DataFrame([[276725,"034545104X",0]], 
...                columns=['User-ID', 'ISBN', 'Book-Rating'])
&gt;&gt;&gt; ratings.pivot(index='User-ID', columns='ISBN', values='Book-Rating')
ISBN     034545104X
User-ID
276725            0
</snippet></ROW><ROW><id>20854476</id><snippet>&gt;&gt;&gt; ratings.columns = ['User-ID', 'ISBN', 'BookRating']
&gt;&gt;&gt; ratings.pivot(index='User-ID', columns='ISBN', values='Book-Rating')
Traceback (most recent call last):
  ...
KeyError: u'no item named Book-Rating'
</snippet></ROW><ROW><id>20854476</id><snippet>names</snippet></ROW><ROW><id>20854476</id><snippet>pd.read_csv('/Users/mona/Downloads/BX-Dump/BX-Book-Ratings.csv', 
     sep=";", quotechar="\"", escapechar="\\")
</snippet></ROW><ROW><id>20854476</id><snippet>pd.read_csv('/Users/mona/Downloads/BX-Dump/BX-Book-Ratings.csv', 
     header=None, names=['User-ID', 'ISBN', 'Book-Rating'],
     sep=";", quotechar="\"", escapechar="\\")
</snippet></ROW><ROW><id>20854664</id><snippet>SA [1-9]\d{0,3}\.
</snippet></ROW><ROW><id>20854976</id><snippet>request.GET</snippet></ROW><ROW><id>20854976</id><snippet>emp_id = request.GET['Emp_ID']
year = request.GET['Year']
</snippet></ROW><ROW><id>20854987</id><snippet>:inherited-members:</snippet></ROW><ROW><id>20854987</id><snippet>:automodule:</snippet></ROW><ROW><id>20854987</id><snippet>:autoclass:</snippet></ROW><ROW><id>20854987</id><snippet>.. automodule:: greet
    :members:
    :inherited-members:
</snippet></ROW><ROW><id>20854987</id><snippet>.. autoclass:: greet.GreetArthur
    :members:
    :inherited-members:
</snippet></ROW><ROW><id>20854987</id><snippet>class greet.GreetArthur
    greet()
        Greet someone by the name of 'Arthur'.
</snippet></ROW><ROW><id>20855290</id><snippet>QLabel</snippet></ROW><ROW><id>20855290</id><snippet>QTextEdit</snippet></ROW><ROW><id>20855290</id><snippet>QProcess</snippet></ROW><ROW><id>20855290</id><snippet>class SystemUpdate(QProcess)
    """
    A class used for handling the system update process
    """

    def __init__(self):
        _timer = QTimer()
        _myDisplayWidget = QLabel()

        self.buttonPressed.connect(self.handleReadyRead)
        self.error.connect(self.handleError)
        _timer.timeout.connect(self.handleTimeout)

        _timer.start(5000)

    @pyqtSlot()    
    def handleReadyRead(self):
        _readData = readAll()
        _myDisplayWidget.append(readData)

        if not _timer.isActive():
            _timer.start(5000)

    @pyqtSlot()
    def handleTimeout(self):
        if not _readData:
            _myDisplayWidget.append('No data was currently available for reading from the system update')
        else:
            _myDisplayWidget.append('Update successfully run')

    @pyqtSlot(QProcess.ProcessError)
    def handleError(self, processError)
        if processError == QProcess.ReadError:
            _myDisplayWidget.append('An I/O error occurred while reading the data, error: %s' % _process-&gt;errorString())
</snippet></ROW><ROW><id>20855290</id><snippet>QLabel</snippet></ROW><ROW><id>20855290</id><snippet>import subprocess
from PyQt4.QtGui import QLabel

output = ""
try:
    """
        Here you may need to pass the absolute path to the command
        if that is not available in your PATH, although it should!
    """
    output = subprocess.check_output(['command', 'arg1', 'arg2'], stderr=subprocess.STDOUT)
exception subprocess.CalledProcessError as e:
    output = e.output
finally:
    myDisplayWidget.append(output)
</snippet></ROW><ROW><id>20855328</id><snippet>__global__ void func(...) {
...
#ifdef X
do something
#endif 

}
</snippet></ROW><ROW><id>20855328</id><snippet>X</snippet></ROW><ROW><id>20855328</id><snippet>-DX</snippet></ROW><ROW><id>20855328</id><snippet>X</snippet></ROW><ROW><id>20855328</id><snippet>options</snippet></ROW><ROW><id>20855328</id><snippet>SourceModule</snippet></ROW><ROW><id>20855328</id><snippet>my_global_var=True

....

build_options = []
if my_global_var:
    build_options.append('-Dmy_global_var')

mod=SourceModule(""" __global__ void func() {
...
#ifdef my_global_var
do something
#endif }
""", options=build_options)
</snippet></ROW><ROW><id>20855328</id><snippet>SourceModule</snippet></ROW><ROW><id>20855456</id><snippet>&gt;&gt;&gt; df.groupby('source')['retweet_count'].sum().plot(kind='bar')
&lt;matplotlib.axes.AxesSubplot object at 0x039C8070&gt;
</snippet></ROW><ROW><id>20856884</id><snippet>vcvarsall</snippet></ROW><ROW><id>20856884</id><snippet>nvcc</snippet></ROW><ROW><id>20856884</id><snippet>WARNING: nvcc not in path.</snippet></ROW><ROW><id>20856884</id><snippet>numpy</snippet></ROW><ROW><id>20856884</id><snippet>boost</snippet></ROW><ROW><id>20856952</id><snippet>sys.stdout</snippet></ROW><ROW><id>20856952</id><snippet>print()</snippet></ROW><ROW><id>20856952</id><snippet>from contextlib import contextmanager
import sys

class Prefixer(object):
    def __init__(self, prefix, orig):
        self.prefix = prefix
        self.orig = orig
    def write(self, text):
        self.orig.write(self.prefix + text)
    def __getattr__(self, attr):
        return getattr(self.orig, attr)     

@contextmanager
def prefix_stdout(prefix):
    current_out = sys.stdout
    try:
        sys.stdout = Prefixer(prefix, current_out)
        yield
    finally:
        sys.stdout = current_out
</snippet></ROW><ROW><id>20856952</id><snippet>with prefix_stdout('Prefixed: '):
    print('Hello world!')
</snippet></ROW><ROW><id>20856952</id><snippet>print()</snippet></ROW><ROW><id>20856952</id><snippet>stdout</snippet></ROW><ROW><id>20857000</id><snippet>items = [1,2,3,4]
for item in items:
    print item
</snippet></ROW><ROW><id>20857000</id><snippet>for student in students:
    print "  ",student['name']
    print student['homework']
    print student['quizzes']
    print student['tests']
</snippet></ROW><ROW><id>20857065</id><snippet>argument_default</snippet></ROW><ROW><id>20857065</id><snippet>argparse.SUPPRESS</snippet></ROW><ROW><id>20857065</id><snippet>default=None</snippet></ROW><ROW><id>20857065</id><snippet>group1.add_argument('-p', '--project', dest='proj',
                    nargs='?', const='all', type=str,
                    help='list of project(s)', default=None)
group1.add_argument('-c', '--component', dest='comp',
                    nargs='?', const='all', type=str,
                    help='list of Component(s)', default=None)
</snippet></ROW><ROW><id>20857065</id><snippet>args.proj</snippet></ROW><ROW><id>20857065</id><snippet>args.comp</snippet></ROW><ROW><id>20857065</id><snippet>None</snippet></ROW><ROW><id>20857065</id><snippet>if args.proj</snippet></ROW><ROW><id>20857065</id><snippet>hasattr()</snippet></ROW><ROW><id>20857065</id><snippet>if hasattr(args, 'proj'):
</snippet></ROW><ROW><id>20857088</id><snippet>def process_list(mylist):
    return [(-3 if x % 15 == 0 else (-2 if x % 5 == 0 else ( -1 if x % 3 == 0 else x))) for x in mylist if isinstance(x, int)]
</snippet></ROW><ROW><id>20857471</id><snippet>mtime</snippet></ROW><ROW><id>20857471</id><snippet>gunzip -N</snippet></ROW><ROW><id>20857471</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; import gzip
&gt;&gt;&gt; ts = datetime.datetime(2010, 11, 12, 13, 14).timestamp()
&gt;&gt;&gt; zf = gzip.GzipFile('test.gz', mode='wb', mtime=ts)
&gt;&gt;&gt; zf.write(b'test')
&gt;&gt;&gt; zf.flush()
&gt;&gt;&gt; zf.close()
</snippet></ROW><ROW><id>20857471</id><snippet>$ gunzip -N test.gz
$ stat -c%y test
2010-11-12 13:14:00.000000000 +0100
</snippet></ROW><ROW><id>20857471</id><snippet>...
st = os.stat(file)
...
os.utime(outputfile, (st.st_atime, st.st_mtime))
...
</snippet></ROW><ROW><id>20857582</id><snippet>dateutil</snippet></ROW><ROW><id>20857582</id><snippet>relativedelta</snippet></ROW><ROW><id>20857582</id><snippet>relativedelta(year=2013, month=12)</snippet></ROW><ROW><id>20857582</id><snippet>relativedelta</snippet></ROW><ROW><id>20858047</id><snippet>&gt;&gt;&gt; st = 'aaaaa\x12bbbbb'
&gt;&gt;&gt; escaped_st = st.encode('string-escape')
&gt;&gt;&gt; escaped_st
'aaaaa\\x12bbbbb'
&gt;&gt;&gt; escaped_st.decode('string-escape')
'aaaaa\x12bbbbb'
</snippet></ROW><ROW><id>20858379</id><snippet>C:\Python27</snippet></ROW><ROW><id>20858379</id><snippet>PATH</snippet></ROW><ROW><id>20858558</id><snippet>\xa6</snippet></ROW><ROW><id>20858558</id><snippet>print files[0]
</snippet></ROW><ROW><id>20858648</id><snippet>str.format</snippet></ROW><ROW><id>20858648</id><snippet>def format_float(value, ndigits=4):
    j = min(i-1 for i in range(ndigits+1) if value &gt;= 10 ** (ndigits - i))
    return '{:.0{num_digits}f}'.format(value, num_digits=max(0,j))
</snippet></ROW><ROW><id>20858648</id><snippet>i</snippet></ROW><ROW><id>20858648</id><snippet>10 ^ (ndigits -i)</snippet></ROW><ROW><id>20858648</id><snippet>0</snippet></ROW><ROW><id>20858648</id><snippet>In [66]: inputs = [11111.1, 111.11, 11.111, 1.1111]

In [67]: for inp in inputs:
    ...:     print('Input = {} -- output = {}'.format(inp, format_float(inp, 4)))
Input = 11111.1 -- output = 11111
Input = 111.11 -- output = 111.1
Input = 11.111 -- output = 11.11
Input = 1.1111 -- output = 1.111
</snippet></ROW><ROW><id>20858648</id><snippet>In [68]: format_float(0.0001, 4)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-68-68e3461a51e5&gt; in &lt;module&gt;()
----&gt; 1 format_float(0.0001, 4)

&lt;ipython-input-64-d4485ac4e1c9&gt; in format_float(value, ndigits)
      1 def format_float(value, ndigits=4):
----&gt; 2     j = min(i-1 for i in range(ndigits+1) if value &gt;= 10 ** (ndigits - i))
      3     return '{:.0{num_digits}f}'.format(value, num_digits=max(0,j))

ValueError: min() arg is an empty sequence
</snippet></ROW><ROW><id>20858648</id><snippet>def format_float(value, ndigits=4):
    try:
        j = min(i-1 for i in range(ndigits+1) if value &gt;= 10 ** (ndigits - i))
        return '{:.0{num_digits}f}'.format(value, num_digits=max(0,j))
    except ValueError:
        s = '{:.20f}'.format(value).rstrip('0')
        _, dec_part = s.split('.')
        if len(dec_part) &gt; ndigits:
            if set(dec_part[:ndigits]) != {'0'}:
                dec_part = dec_part[:ndigits]
            else:
                for i, char in enumerate(dec_part):
                    if char != '0':
                        dec_part = dec_part[:i+1]
                        break
        if not dec_part:
            # should happen only if the input is 0.0
            return '0'
        else:
            return '{}.{}'.format(0, dec_part)
</snippet></ROW><ROW><id>20858648</id><snippet>In [81]: inputs = [11111.1, 111.11, 11.111, 1.1111, 0.00111, 0.000011]

In [82]: for inp in inputs:
    ...:     print('Input = {} -- output = {}'.format(inp, format_float(inp, 4)))
Input = 11111.1 -- output = 11111
Input = 111.11 -- output = 111.1
Input = 11.111 -- output = 11.11
Input = 1.1111 -- output = 1.111
Input = 0.00111 -- output = 0.0011
Input = 1.1e-05 -- output = 0.00001
</snippet></ROW><ROW><id>20858648</id><snippet>def format_float(value, ndigits):
    sign = ''
    if value &lt; 0:
        value = abs(value)
        sign = '-'

    if value &gt;= 1:
        j = min(i-1 for i in range(ndigits+1) if value &gt;= 10 ** (ndigits - i))
        return '{}{:.0{num_digits}f}'.format(sign, value, num_digits=max(0,j))
    s = '{:.17f}'.format(value).rstrip('0')
    _, dec_part = s.split('.')
    if not dec_part:
        # Happens only with 0.0
        return '0'
    if len(dec_part) &lt; ndigits or set(dec_part[:ndigits]) != {'0'}:
        # truncate the decimal representation
        dec_part = dec_part.ljust(ndigits, '0')[:ndigits]
    elif len(dec_part) &gt; ndigits:
        # too small. Just find the first decimal place
        for i, char in enumerate(dec_part):
            if char != '0':
                dec_part = dec_part[:i+1]
                break
    return '{}{}.{}'.format(sign, 0, dec_part)
</snippet></ROW><ROW><id>20858721</id><snippet>str()</snippet></ROW><ROW><id>20858721</id><snippet>with open('Stockinventory.txt', 'w') as f:
    for row in items:
        f.write(', '.join(row) + '\n')
</snippet></ROW><ROW><id>20858721</id><snippet>csv</snippet></ROW><ROW><id>20858721</id><snippet>import csv

with open('Stockinventory.txt', 'w', newline='') as f:
    csv.writer(f).writerows(items)
</snippet></ROW><ROW><id>20858721</id><snippet>csv</snippet></ROW><ROW><id>20858721</id><snippet>import csv

with open('Stockinventory.txt', 'r', newline='') as f:
    items = list(csv.reader(f, skipinitialspace=True))
</snippet></ROW><ROW><id>20858721</id><snippet>for row in enumerate(items):
    if row[1] == itemname:
        print("SIN: %s" % row[0])
        print("Itemname: %s" % row[1])
        print("Retail price: %s" % row[2])
        print("Costprice: %s" % row[3])
        print("Quantity Available: %s" % row[4])
        choice = input("Would you like to update quantity? y/n")
        if choice == 'y':
            newquantity = input("Enter new quantity: ")
            row[4] = newquantity
            print(', '.join(row))
            writetrue = '1'
        else:
            startup()
</snippet></ROW><ROW><id>20858721</id><snippet>row</snippet></ROW><ROW><id>20858721</id><snippet>items</snippet></ROW><ROW><id>20858721</id><snippet>csv</snippet></ROW><ROW><id>20858783</id><snippet>Exception</snippet></ROW><ROW><id>20858792</id><snippet># Half of the remainder of the image height when space for all lines has been reserved:
line_dimensions = [draw.textsize(line, font=font) for line in para]
offset = (MAX_H - sum(h for w, h in line_dimensions)) // 2

current_h = offset
for line, (w, h) in zip(para, line_dimensions):
    draw.text(((MAX_W - w) // 2, current_h), line, font=font)
    current_h += h
</snippet></ROW><ROW><id>20858792</id><snippet>line_dimensions</snippet></ROW><ROW><id>20858792</id><snippet>(width, height)</snippet></ROW><ROW><id>20858792</id><snippet>sum()</snippet></ROW><ROW><id>20859001</id><snippet>.contents</snippet></ROW><ROW><id>20859001</id><snippet>.children</snippet></ROW><ROW><id>20859032</id><snippet>after</snippet></ROW><ROW><id>20859032</id><snippet>root = Tk()

...

root.after(2000, callback) # call `callback` function in 2000 ms.
</snippet></ROW><ROW><id>20859157</id><snippet>listdir</snippet></ROW><ROW><id>20859157</id><snippet>print listdir(path)
</snippet></ROW><ROW><id>20859157</id><snippet>listdir</snippet></ROW><ROW><id>20859157</id><snippet>print</snippet></ROW><ROW><id>20859157</id><snippet>None</snippet></ROW><ROW><id>20859157</id><snippet>print</snippet></ROW><ROW><id>20859157</id><snippet>listdir(path)
</snippet></ROW><ROW><id>20859230</id><snippet>preprocess</snippet></ROW><ROW><id>20859230</id><snippet>C</snippet></ROW><ROW><id>20859230</id><snippet>class C(B):
    def preprocess(self, x):
        return x + x
</snippet></ROW><ROW><id>20859230</id><snippet>A.__init__()</snippet></ROW><ROW><id>20859230</id><snippet>A</snippet></ROW><ROW><id>20859230</id><snippet>type(self) is C</snippet></ROW><ROW><id>20859380</id><snippet>auth</snippet></ROW><ROW><id>20859380</id><snippet>from gluon import current

auth = Auth(db)
current.auth = auth
</snippet></ROW><ROW><id>20859380</id><snippet>from gluon import current

def some_function():
    auth = current.auth
    ....
</snippet></ROW><ROW><id>20859556</id><snippet>optparse</snippet></ROW><ROW><id>20859556</id><snippet>./script.py --dir c:\\a\\b
</snippet></ROW><ROW><id>20859556</id><snippet>./script.py --dir "c:\a\b"
</snippet></ROW><ROW><id>20859616</id><snippet>lambda v: (v[:2], v[-2:])
</snippet></ROW><ROW><id>20859616</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>20859616</id><snippet>from operator import itemgetter

itemgetter(slice(2), slice(-2, None))
</snippet></ROW><ROW><id>20859616</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; sample = ['aaxbb', 'aayybb', 'aaaaaaabb', 'ccabcavabb', 'yyaaadbb', 'yyaabb', 'a']
&gt;&gt;&gt; for key, group in groupby(sample, lambda v: (v[:2], v[-2:])):
...     print list(group)
... 
['aaxbb', 'aayybb', 'aaaaaaabb']
['ccabcavabb']
['yyaaadbb', 'yyaabb']
['a']
&gt;&gt;&gt; for key, group in groupby(sample, itemgetter(slice(2), slice(-2, None))):
...     print list(group)
... 
['aaxbb', 'aayybb', 'aaaaaaabb']
['ccabcavabb']
['yyaaadbb', 'yyaabb']
['a']
</snippet></ROW><ROW><id>20859880</id><snippet>with open('Simon.csv', 'rb') as csvfile:
    myExSpreadSheet = csv.reader(csvfile)
    headers = next(myExSpreadSheet, None)  # grab first row

    for row in myExSpreadSheet:
        if 'cocaColaIsTheBest' in row:
            print headers
            print row
</snippet></ROW><ROW><id>20860027</id><snippet>else: pass</snippet></ROW><ROW><id>20860143</id><snippet>for</snippet></ROW><ROW><id>20860143</id><snippet>permutation_rec1()</snippet></ROW><ROW><id>20860143</id><snippet>def permutation_rec1(onelist, prelist):  
    if not onelist:
        yield prelist

    lenlist = len(onelist)
    for i, oneitem in enumerate(onelist):
        leftlist = [onelist[j] for j in range(lenlist) if j != i]
        for res in permutation_rec1(leftlist, prelist + [oneitem]):
            yield res
</snippet></ROW><ROW><id>20860143</id><snippet>yield from</snippet></ROW><ROW><id>20860143</id><snippet>def permutation_rec1(onelist,prelist):  
    if not onelist:
        yield prelist

    lenlist = len(onelist)
    for i, oneitem in enumerate(onelist):
        leftlist = [onelist[j] for j in range(lenlist) if j != i]
        yield from permutation_rec1(leftlist, prelist + [oneitem])
</snippet></ROW><ROW><id>20860213</id><snippet>class</snippet></ROW><ROW><id>20860213</id><snippet>Class</snippet></ROW><ROW><id>20860213</id><snippet>class A</snippet></ROW><ROW><id>20860213</id><snippet>class A:</snippet></ROW><ROW><id>20860213</id><snippet>myFunction</snippet></ROW><ROW><id>20860213</id><snippet>class A</snippet></ROW><ROW><id>20860213</id><snippet>class A:
    def myFunction(a,b)
</snippet></ROW><ROW><id>20860213</id><snippet>self</snippet></ROW><ROW><id>20860213</id><snippet>def myFunction(self, a, b)</snippet></ROW><ROW><id>20860213</id><snippet>def myFunction(self, a,b)</snippet></ROW><ROW><id>20860213</id><snippet>def myFunction(self, a,b):</snippet></ROW><ROW><id>20860213</id><snippet>def myFunction(self, a,b):
    pass
</snippet></ROW><ROW><id>20860213</id><snippet>sys.argv</snippet></ROW><ROW><id>20860213</id><snippet>sys</snippet></ROW><ROW><id>20860213</id><snippet>import sys</snippet></ROW><ROW><id>20860213</id><snippet>myFunction</snippet></ROW><ROW><id>20860213</id><snippet>Av = A()
Av.myFunction(a,b)
</snippet></ROW><ROW><id>20860213</id><snippet>sys.argv</snippet></ROW><ROW><id>20860213</id><snippet>def myFunction(a,b):
    pass

if __name__ == '__main__':
    a = sys.argv[1]
    b = sys.argv[2]
    myFunction(a,b)
</snippet></ROW><ROW><id>20860213</id><snippet>python file.py arg1 arg2</snippet></ROW><ROW><id>20860213</id><snippet>python</snippet></ROW><ROW><id>20860213</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>20860213</id><snippet>chmod +x file.py</snippet></ROW><ROW><id>20860213</id><snippet>./file.py arg1 arg2</snippet></ROW><ROW><id>20860257</id><snippet>elements = translation.split(' ',2)
traditionnal = elements[0]
simplified = elements[1]
rest = elements[2]
print "Traditionnal:" + traditionnal
print "Simplified:" + simplified
elems = rest.split(']')
tr = elems[0].strip('[')
print "Pronouciation:" + tr
</snippet></ROW><ROW><id>20860257</id><snippet>Traditionnal:賓主
Simplified:宾主
Pronouciation:bin1 zhu3
</snippet></ROW><ROW><id>20860257</id><snippet>/</snippet></ROW><ROW><id>20860257</id><snippet>translations = elems[1].strip().strip('/').split('/')
#strip the spaces, then the first and last slash, 
#then split on the slashes
</snippet></ROW><ROW><id>20860257</id><snippet>['visitor', 'guest', 'object (in grammar)']
</snippet></ROW><ROW><id>20860276</id><snippet>a, b, c = (np.zeros(5) for _ in xrange(3))   # generator
d, e, f = [np.zeros(5) for _ in xrange(3)]   # list comp
print a is b, d is e
# False False
</snippet></ROW><ROW><id>20860276</id><snippet>*</snippet></ROW><ROW><id>20860276</id><snippet>np.zeros()</snippet></ROW><ROW><id>20860276</id><snippet>h, i, j = (np.zeros(5),)*3
print h is i
# True
</snippet></ROW><ROW><id>20860276</id><snippet>a = b = c = np.zeros(5)</snippet></ROW><ROW><id>20860653</id><snippet>.find</snippet></ROW><ROW><id>20860653</id><snippet>result = lst.find cond
if result?
  do_stuff_with result
else
  do_other_stuff()
</snippet></ROW><ROW><id>20860653</id><snippet>for else</snippet></ROW><ROW><id>20860839</id><snippet>a[x, y]</snippet></ROW><ROW><id>20860839</id><snippet>x</snippet></ROW><ROW><id>20860839</id><snippet>y</snippet></ROW><ROW><id>20860839</id><snippet>a[i, j]</snippet></ROW><ROW><id>20860839</id><snippet>i</snippet></ROW><ROW><id>20860839</id><snippet>j</snippet></ROW><ROW><id>20860839</id><snippet>import numpy

def line_sums(a, thata):
    xsize, ysize = a.shape
    tan_theta = numpy.tan(theta)
    max_y_for_angle = int(ysize - 1 - ((xsize - 1) / tan_theta))

    x = numpy.arange(xsize)
    y_base = numpy.linspace(xsize / tan_theta, 0, xsize)
    y_base = y_base.astype(int)
    sum_list = numpy.zeros(max_y_for_angle)

    for idx in range(max_y_for_angle):
        sum_list[idx] = a[x, y_base + idx].sum()

    return sum_list

a = numpy.arange( (1002 * 1004) ).reshape(1002, 1004)
theta = (61/180.) * numpy.pi
sum_list = line_sums(a, theta)
</snippet></ROW><ROW><id>20861069</id><snippet>&gt;&gt;&gt; point1 = (3, 5)
&gt;&gt;&gt; scalar = 0.5
&gt;&gt;&gt; xform_matrix = np.array([[1., 1.], [1., -1.], [-1., -1.], [-1., 1.]])
&gt;&gt;&gt; (xform_matrix * scalar) + point1
array([[ 3.5,  5.5],
       [ 3.5,  4.5],
       [ 2.5,  4.5],
       [ 2.5,  5.5]])
</snippet></ROW><ROW><id>20861069</id><snippet>(x + 1.0) * 0.5</snippet></ROW><ROW><id>20861069</id><snippet>&gt;&gt;&gt; (xform_matrix + point1) * scalar
array([[ 2.,  3.],
       [ 2.,  2.],
       [ 1.,  2.],
       [ 1.,  3.]])
</snippet></ROW><ROW><id>20861128</id><snippet>class</snippet></ROW><ROW><id>20861128</id><snippet>(x, y, z)</snippet></ROW><ROW><id>20861128</id><snippet>valueLst = []
for i in f:
    valueLst.append(tuple(i.split('\t')))
</snippet></ROW><ROW><id>20861128</id><snippet>y</snippet></ROW><ROW><id>20861128</id><snippet>z</snippet></ROW><ROW><id>20861128</id><snippet>y</snippet></ROW><ROW><id>20861128</id><snippet>yDiffs = [0] + list(valueLst[i][1] - valueLst[i-1][1]
                    for i in range(1, len(valueLst)))
bestZVal = valueLst[yDiffs.index(max(yDiffs))][2]
</snippet></ROW><ROW><id>20861207</id><snippet>DPIstats[applicationName]['Total Bytes'] = {}</snippet></ROW><ROW><id>20861207</id><snippet>{}</snippet></ROW><ROW><id>20861207</id><snippet>0</snippet></ROW><ROW><id>20861519</id><snippet>random.sample()</snippet></ROW><ROW><id>20861519</id><snippet>random.choice()</snippet></ROW><ROW><id>20861519</id><snippet>for i in range(y):
    string = ''.join([random.choice(x) for _ in range(v)])
    print string
</snippet></ROW><ROW><id>20861519</id><snippet>v</snippet></ROW><ROW><id>20861519</id><snippet>x</snippet></ROW><ROW><id>20861519</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; import random
&gt;&gt;&gt; x = string.letters + string.digits + string.punctuation
&gt;&gt;&gt; v = 20
&gt;&gt;&gt; ''.join([random.choice(x) for _ in range(v)])
'Ms&gt;V\\0Mf|W@R,#/.P~Rv'
&gt;&gt;&gt; ''.join([random.choice(x) for _ in range(v)])
'TsPnvN&amp;qlm#mBj-!~}3W'
&gt;&gt;&gt; ''.join([random.choice(x) for _ in range(v)])
'{:dfE;VhR:=_~O*,QG&lt;f'
</snippet></ROW><ROW><id>20861527</id><snippet>Packages/User</snippet></ROW><ROW><id>20861527</id><snippet>SublimeREPL/config/Python/Main.sublime-menu</snippet></ROW><ROW><id>20861527</id><snippet>[
    {
        "id": "tools",
        "children":
        [{
            "caption": "SublimeREPL",
            "mnemonic": "r",
            "id": "SublimeREPL",
            "children":
            [
                {
                    "caption": "Python",
                    "id": "Python",

                    "children":[
                        {
                            "command": "repl_open",
                            "caption": "Python - Anaconda",
                            "id": "repl_python",
                            "mnemonic": "p",
                            "args": {
                                "type": "subprocess",
                                "encoding": "utf8",
                                "cmd": ["/path/to/Anaconda/python", "-i", "-u"],
                                "cwd": "$file_path",
                                "syntax": "Packages/Python/Python.tmLanguage",
                                "external_id": "python",
                                "extend_env": {"PYTHONIOENCODING": "utf-8"}
                            }
                        },
                        {
                            "command": "repl_open",
                            "caption": "IPython - Anaconda",
                            "id": "repl_python_ipython",
                            "mnemonic": "p",
                            "args": {
                                "type": "subprocess",
                                "encoding": "utf8",
                                "autocomplete_server": true,
                                "cmd": ["/path/to/Anaconda/python", "-u", "${packages}/SublimeREPL/config/Python/ipy_repl.py"],
                                "cwd": "$file_path",
                                "syntax": "Packages/Python/Python.tmLanguage",
                                "external_id": "python",
                                "extend_env": {
                                    "PYTHONIOENCODING": "utf-8",
                                    "SUBLIMEREPL_EDITOR": "$editor"
                                }
                            }
                        }
                    ]
                }
            ]
        }]
    }
]
</snippet></ROW><ROW><id>20861527</id><snippet>"cmd"</snippet></ROW><ROW><id>20861527</id><snippet>/path/to/Anaconda/python</snippet></ROW><ROW><id>20861527</id><snippet>/</snippet></ROW><ROW><id>20861527</id><snippet>\\</snippet></ROW><ROW><id>20861527</id><snippet>c:/Anaconda/bin/python.exe
# or
c:\\Anaconda\\bin\\python.exe
</snippet></ROW><ROW><id>20861527</id><snippet>Tools -&gt; SublimeREPL -&gt; Python -&gt; Python - Anaconda</snippet></ROW><ROW><id>20861527</id><snippet>IPython - Anaconda</snippet></ROW><ROW><id>20861527</id><snippet>children</snippet></ROW><ROW><id>20861527</id><snippet>caption</snippet></ROW><ROW><id>20861527</id><snippet>cmd</snippet></ROW><ROW><id>20862084</id><snippet>return query</snippet></ROW><ROW><id>20862084</id><snippet>FacebookSearch</snippet></ROW><ROW><id>20862084</id><snippet>search</snippet></ROW><ROW><id>20862084</id><snippet>None</snippet></ROW><ROW><id>20862084</id><snippet>search</snippet></ROW><ROW><id>20862084</id><snippet>return</snippet></ROW><ROW><id>20862084</id><snippet>None</snippet></ROW><ROW><id>20862084</id><snippet>&gt;&gt;&gt; response, data = None
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'NoneType' object is not iterable
</snippet></ROW><ROW><id>20862114</id><snippet>from itertools import chain
list(chain(*[[[y[0],z] for z in y[1].split('. ')] for y in x]))
</snippet></ROW><ROW><id>20862114</id><snippet>[['2925729', 'Patrick came outside and greeted us promptly.'],
 ['2925729', 'Patrick did not shake our hands nor ask our names'],
 ['2925729', 'He greeted us promptly and politely, but it seemed routine.'],
 ['2925728', 'Patrick sucks'],
 ['2925728', 'He farted politely, but it seemed routine.']]
</snippet></ROW><ROW><id>20862114</id><snippet>list(chain(*...))</snippet></ROW><ROW><id>20862114</id><snippet>[[[y[0],z] for z in y[1].split('. ')] for y in x]</snippet></ROW><ROW><id>20862114</id><snippet>xl = list(x) # you gave us a tuple          
for i,y in enumerate(xl):
    xx = xl[i]
    xx = [[xx[0],y] for y in xx[1].split('. ')]
    xl[i:i+1] = xx
</snippet></ROW><ROW><id>20862168</id><snippet>groupby</snippet></ROW><ROW><id>20862168</id><snippet>&gt;&gt;&gt; df
   Column with duplicates  value1  value2
0                       1       5       0
1                       1       0       9

[2 rows x 3 columns]
&gt;&gt;&gt; df.groupby("Column with duplicates", as_index=False).sum()
   Column with duplicates  value1  value2
0                       1       5       9

[1 rows x 3 columns]
</snippet></ROW><ROW><id>20862168</id><snippet>&gt;&gt;&gt; df
   trial       Time   1    2    3  4
0      1    '0-100'   0  100    0  0
1      1    '0-100'  32    0    0  0
2      1  '100-200'   0    0  100  0
3      2    '0-100'   0  100    0  0

[4 rows x 6 columns]
&gt;&gt;&gt; df.groupby("trial", as_index=False).sum()
   trial   1    2    3  4
0      1  32  100  100  0
1      2   0  100    0  0

[2 rows x 5 columns]
</snippet></ROW><ROW><id>20862218</id><snippet>var sys   = require('sys'),
    spawn = require('child_process').spawn,
    dummy  = spawn('python', ['test.py']);

dummy.stdout.on('data', function(data) {
    sys.print(data.toString());
});
</snippet></ROW><ROW><id>20862218</id><snippet>import time
def dummy() :
    out = '';
    for i in range(0,10) :
        out += str(i + 1) + ", "
        time.sleep(0.1)
    print out
if __name__ =='__main__' :
    dummy = dummy()
</snippet></ROW><ROW><id>20862385</id><snippet>Counter</snippet></ROW><ROW><id>20862385</id><snippet>[('a', 5), ('b', 6)]
</snippet></ROW><ROW><id>20862385</id><snippet>['a', 'b'], or [5, 6]
</snippet></ROW><ROW><id>20862385</id><snippet>most_common</snippet></ROW><ROW><id>20862385</id><snippet>test_counter.most_common(10)</snippet></ROW><ROW><id>20862385</id><snippet>[thing[0] for thing in list]
</snippet></ROW><ROW><id>20862385</id><snippet>('a', 5)[0] = 'a'</snippet></ROW><ROW><id>20862440</id><snippet>id</snippet></ROW><ROW><id>20862440</id><snippet>class ReportTemplate(models.Model):
    name = models.TextField(db_column='Name', blank=True, primary_key=True)
    template = models.TextField(db_column='Template', blank=True)

    class Meta:
        db_table = 'ReportTemplateTbl'
</snippet></ROW><ROW><id>20862445</id><snippet>bytes</snippet></ROW><ROW><id>20862445</id><snippet>bytes</snippet></ROW><ROW><id>20862445</id><snippet>str</snippet></ROW><ROW><id>20862548</id><snippet>import collections
def mode(L):
    # your code here
    d = collections.defaultdict(lambda: 1); mode = 0; freq = 0
    for j in L:
            d[j] += 1
            if d[j] &gt; freq:
                mode = j; freq = d[j]
    return mode
</snippet></ROW><ROW><id>20862548</id><snippet>import collections
def mode(L):
    collections.Counter(L).most_common(1)[0][0]
</snippet></ROW><ROW><id>20862553</id><snippet>class PastebinEntry(Form):
    language = SelectField(u'Programming Language', choices=[('cpp', 'C++'), ('py', 'Python'), ('text', 'Plain Text')])
</snippet></ROW><ROW><id>20862553</id><snippet>choices</snippet></ROW><ROW><id>20862553</id><snippet>def edit_user(request, id):
    user = User.query.get(id)
    form = UserDetails(request.POST, obj=user)
    form.group_id.choices = [(g.id, g.name) for g in Group.query.order_by('name')]
</snippet></ROW><ROW><id>20862553</id><snippet>car_make</snippet></ROW><ROW><id>20862553</id><snippet>car_make</snippet></ROW><ROW><id>20862553</id><snippet>car_model</snippet></ROW><ROW><id>20862553</id><snippet>car_make</snippet></ROW><ROW><id>20862553</id><snippet>car_model</snippet></ROW><ROW><id>20862553</id><snippet>car_make</snippet></ROW><ROW><id>20862553</id><snippet>class NonValidatingSelectField(SelectField):
    def pre_validate(self, form):
        pass
</snippet></ROW><ROW><id>20862553</id><snippet>car_model</snippet></ROW><ROW><id>20862553</id><snippet>class MyForm(Form):
    car_make = SelectField(u'Make', choices=[...])
    car_model = NonValidatingSelectField(u'Model', choices=[])

    def validate_car_model(self, field):
        choices = query_for_valid_models(self.car_make.data)
        # check that field.data is in choices...
</snippet></ROW><ROW><id>20862632</id><snippet>import</snippet></ROW><ROW><id>20862632</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>20862632</id><snippet>/home/alvas/python/lib/module_x.py</snippet></ROW><ROW><id>20862632</id><snippet>/usr/local/python/lib/foo.py</snippet></ROW><ROW><id>20862632</id><snippet>PYTHONPATH=/home/alvas/python/lib:/usr/local/python/lib /home/alvas/scripts/bar.py
</snippet></ROW><ROW><id>20862632</id><snippet>import module_x
import foo
</snippet></ROW><ROW><id>20862632</id><snippet>#!/usr/bin/env python
import sys
sys.path.append('/home/alvas/python/lib')
import module_x
sys.path.append('/usr/local/python/lib')
import foo
</snippet></ROW><ROW><id>20862720</id><snippet>print n[-4::] 
</snippet></ROW><ROW><id>20863126</id><snippet>sorted</snippet></ROW><ROW><id>20863126</id><snippet>df.take</snippet></ROW><ROW><id>20863126</id><snippet>import pandas as pd

df = pd.DataFrame({'foo':['100-200','1000-1100','1100-1200','200-300']})
order = sorted(range(len(df)),
               key=lambda idx: map(int, df.ix[idx, 'foo'].split('-')))
df = df.take(order)
print(df)
</snippet></ROW><ROW><id>20863126</id><snippet>         foo
0    100-200
3    200-300
1  1000-1100
2  1100-1200
</snippet></ROW><ROW><id>20863126</id><snippet>range(len(df))</snippet></ROW><ROW><id>20863126</id><snippet>key</snippet></ROW><ROW><id>20863126</id><snippet>range(len(df))</snippet></ROW><ROW><id>20863126</id><snippet>sorted</snippet></ROW><ROW><id>20863126</id><snippet>DataFrame</snippet></ROW><ROW><id>20863126</id><snippet>numpy.argsort</snippet></ROW><ROW><id>20863126</id><snippet>import pandas as pd
import numpy as np

df = pd.DataFrame({'foo':['100-200','1000-1100','1100-1200','200-300']*100})

arr = df['foo'].map(lambda item: map(int, item.split('-'))).values
order = np.argsort(arr)
df = df.take(order)
</snippet></ROW><ROW><id>20863126</id><snippet>df.sort</snippet></ROW><ROW><id>20863126</id><snippet>import pandas as pd

df = pd.DataFrame({'foo':['100-200','1000-1100','1100-1200','200-300']})

df[['start', 'end']] = df['foo'].apply(lambda val: pd.Series(map(int, val.split('-'))))
df.sort(['start', 'end'], inplace=True)
print(df)
</snippet></ROW><ROW><id>20863126</id><snippet>         foo  start   end
0    100-200    100   200
3    200-300    200   300
1  1000-1100   1000  1100
2  1100-1200   1100  1200
</snippet></ROW><ROW><id>20863182</id><snippet>n</snippet></ROW><ROW><id>20863182</id><snippet>None</snippet></ROW><ROW><id>20863182</id><snippet>NoneType.__new__</snippet></ROW><ROW><id>20863182</id><snippet>None</snippet></ROW><ROW><id>20863182</id><snippet>x is None</snippet></ROW><ROW><id>20863182</id><snippet>is</snippet></ROW><ROW><id>20863182</id><snippet>None == None</snippet></ROW><ROW><id>20863182</id><snippet>True</snippet></ROW><ROW><id>20863182</id><snippet>x == None</snippet></ROW><ROW><id>20863182</id><snippet>True</snippet></ROW><ROW><id>20863182</id><snippet>x</snippet></ROW><ROW><id>20863182</id><snippet>None</snippet></ROW><ROW><id>20863182</id><snippet>__new__</snippet></ROW><ROW><id>20863182</id><snippet>class Singleton(object):
  _instance = None
  def __new__(cls, *args, **kwargs):
    if Singleton._instance is None:
      Singleton._instance = object.__new__(cls, *args, **kwargs)
    return Singleton._instance

if __name__ == '__main__':
  s1 = Singleton()
  s2 = Singleton()
  print 's1 is s2:', s1 is s2
  print 'id(s1):', id(s1)
  print 'id(s2):', id(s2)
</snippet></ROW><ROW><id>20863331</id><snippet># Good uses.
p = re.compile(r"(?:[^\\])\\g&lt;(\w+)&gt;")

for m in p.finditer(r"&lt;/\g\&lt;at__tribut1&gt;\\g&lt;notattribut&gt;&gt;"):
    print(m.group(1))

# Bad uses.
p = re.compile(r"(?:[^\\])\\g(?!&lt;\w+&gt;)")

if p.search(r"&lt;/\g\&lt;at__tribut1&gt;\\g&lt;notattribut&gt;&gt;"):
    print("Wrong use !")
</snippet></ROW><ROW><id>20863357</id><snippet>$ sudo apt-get install python3-dev
</snippet></ROW><ROW><id>20863432</id><snippet>Series</snippet></ROW><ROW><id>20863432</id><snippet>groupby</snippet></ROW><ROW><id>20863432</id><snippet>Series</snippet></ROW><ROW><id>20863432</id><snippet>def test_function(df):
    ser = pd.Series(np.random.rand(len(df)))
    grouped = ser.groupby(df['A'])
    return grouped.first()

Ds = test_function(df)
</snippet></ROW><ROW><id>20863432</id><snippet>A
1    0.017537
2    0.392849
3    0.451406
4    0.234016
dtype: float64
</snippet></ROW><ROW><id>20863432</id><snippet>test_function</snippet></ROW><ROW><id>20863432</id><snippet>df</snippet></ROW><ROW><id>20863432</id><snippet>ser.groupby</snippet></ROW><ROW><id>20863432</id><snippet>df['A']</snippet></ROW><ROW><id>20863487</id><snippet>import bidi.algorithm</snippet></ROW><ROW><id>20863487</id><snippet>from .mirror import MIRRORED</snippet></ROW><ROW><id>20863487</id><snippet>from mirror import MIRRORED</snippet></ROW><ROW><id>20863487</id><snippet>X2_X5_MAPPINGS.keys() + ['BN', 'PDF', 'B']</snippet></ROW><ROW><id>20863487</id><snippet>dict.keys()</snippet></ROW><ROW><id>20863487</id><snippet>from .mirror import MIRRORED</snippet></ROW><ROW><id>20863615</id><snippet>__init__</snippet></ROW><ROW><id>20863615</id><snippet>on_status</snippet></ROW><ROW><id>20863615</id><snippet>def __init__(self, api=None):
    super(StdOutListener, self).__init__()
    self.num_tweets = 0

def on_status(self, status):
    text = status.text
    created = status.created_at
    record = {'Text': text, 'Created At': created}
    print record #See Tweepy documentation to learn how to access other fields
    self.num_tweets = self.num_tweets + 1
    if self.num_tweets &lt; 20:
        collection.insert(record)
        return True
    else:
        return False
</snippet></ROW><ROW><id>20863713</id><snippet>img = cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
</snippet></ROW><ROW><id>20863713</id><snippet>cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
</snippet></ROW><ROW><id>20863909</id><snippet>idle</snippet></ROW><ROW><id>20863909</id><snippet>idlelib</snippet></ROW><ROW><id>20863909</id><snippet>gnome-terminal</snippet></ROW><ROW><id>20863909</id><snippet>termcap</snippet></ROW><ROW><id>20863909</id><snippet>curses</snippet></ROW><ROW><id>20863944</id><snippet>&lt;script src="/js/jquery.js" &gt;
</snippet></ROW><ROW><id>20863944</id><snippet> import os
 import cherrypy
 from jinja2 import Environment, FileSystemLoader
 env = Environment(loader=FileSystemLoader('templates'))

 class Root:
     @cherrypy.expose
     def index(self):

     tmpl = env.get_template('index.html')
     return tmpl.render(javascript_folder=os.path.dirname(__file__),sidebar=sidebar.render())
</snippet></ROW><ROW><id>20863944</id><snippet>config = {'/static':
                {'tools.staticdir.on': True,
                 'tools.staticdir.dir': PATH_TO_STATIC_FILES,
                }
        }

cherrypy.tree.mount(MyApp(), '/', config=config)
</snippet></ROW></DATA>